external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
remote function Integer ExpApprovalStatus(record ExpVc,var record AcceptanceRulesVc);
remote function Integer ExpTestApprovalStatus(record ExpVc);
remote function Integer Argentina_ExpDClassInvoiceNrEFAfter(var record ExpVc,Integer);
remote procedure ExpVc_PasteCurncyCode(var record ExpVc);
remote procedure CalcExpRow(var record ExpVc,Integer);
remote procedure ExpGetRowRate(var record ExpVc,Integer);
external function string 40 ObjSClassPasteSpecialWindowClass(string);
remote procedure ExpVc_PasteDANr(var record ExpVc,Integer);
external procedure M4PadString(string,Integer,string,Boolean,var string);
external function Boolean ValidSuppInvNo_Argentina(string);
external function Boolean IsCapitalLetter(string); 
external function Boolean IsDigit(string);
external function Boolean IsLetter(string);
remote function Integer EditingAcceptanceRejectedAllowed(Integer,string,string,Integer,string);
external procedure WarnFutureDate(Boolean,Date);
remote function Boolean ExpVc_PasteVECode(var record ExpVc,Integer);
external procedure FindOTforAcc(string,var string);
remote procedure ExpAccName(var record ExpVc,Integer);
remote function Boolean ExpVc_PastePerson(var record ExpVc);
remote function Boolean ExpVc_PasteACShort(var record ExpVc,Integer);
remote function Boolean ExpVc_PasteAccNumber(var record ExpVc,Integer);
remote function Boolean ExpVc_PastePRCode(var record ExpVc,Integer);
remote function Boolean ExpVc_PasteWayList(var record ExpVc,Integer);
remote procedure ExpGetRate(var record ExpVc);
external function Boolean WarnOldRecords(Date,string,LongInt);
external function Boolean DateWarned(Date,string);
external function Boolean DidYouAuthorize(string);
external procedure RoundVATSum(string,string,string,var val);
external procedure RoundRowSum(string,string,string,var val);
external function Boolean UserCanChangePendingRecord(Integer);

global
procedure ExpSumup(record ExpVc Expp,var val rp)
begin
  Integer i,rwcnt;
  row ExpVc Exprw;
  val bal,vatsum;
  val basebal,basevatsum;
  val v;
  string 255 lastcrncy,crncy;
  record BaseCurBlock BCb;
  Boolean bcf,testf;

  rwcnt = MatRowCnt(Expp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Expp,i,Exprw);
    switch (Exprw.stp) begin
      case 1:
        if (Exprw.ovst==0) then begin
          testf = false;
          basebal = basebal + Exprw.BaseSum;
          basevatsum = basevatsum + Exprw.BaseVATSum;
//          if (Exprw.BankCurncy!=Expp.CurncyCode) then begin
          if (nonblank(Exprw.BankCurncy)) then begin
            if (bcf==false) then begin
              BlockLoad(BCb);
              bcf = true;
            end;
            if (Expp.CurncyCode==BCb.BaseCur1) then begin
              bal = bal + Exprw.BaseSum;
              vatsum = vatsum + Exprw.BaseVATSum;
              testf = true;
            end;
            if (testf==false) then begin
              if (Expp.CurncyCode==BCb.BaseCur2) then begin
                bal = bal + MulRateToBase2(Exprw.BankCurncy,Exprw.Sum,Exprw.FrRateBankVal,Exprw.ToRateB1BankVal,Exprw.ToRateB2BankVal,Exprw.BaseRate1BankVal,Exprw.BaseRate2BankVal,DefaultCurRoundOff);
                vatsum = vatsum + MulRateToBase2(Exprw.BankCurncy,Exprw.VATSum,Exprw.FrRateBankVal,Exprw.ToRateB1BankVal,Exprw.ToRateB2BankVal,Exprw.BaseRate1BankVal,Exprw.BaseRate2BankVal,DefaultCurRoundOff);
                testf = true;
              end;
            end;
            if (testf==false) then begin
              if (nonblank(Exprw.BankCurncy)) then begin
                CurValToOtherCur(CurrentDate,Exprw.BankCurncy,Exprw.Sum,Expp.CurncyCode,v,DefaultCurRoundOff);
                bal = bal + v;
                CurValToOtherCur(CurrentDate,Exprw.BankCurncy,Exprw.VATSum,Expp.CurncyCode,v,DefaultCurRoundOff);
                vatsum = vatsum + Exprw.VATSum;
              end else begin
                bal = bal + Exprw.Sum;
                vatsum = vatsum + Exprw.VATSum;
              end;
            end;
          end else begin
            bal = bal + Exprw.Sum;
            vatsum = vatsum + Exprw.VATSum;
          end;
        end;
    end;
  end;
  Expp.PayVal = bal;
  Expp.CalcVATVal = vatsum;
  Expp.BasePayVal = basebal;
  Expp.BaseCalcVATVal = basevatsum;
  rp = Expp.PayVal; 
  return;
end;

function Boolean ExpVc_PasteVATCode(var record ExpVc Expp,Integer rownr)
BEGIN
  Boolean res;

  CalcExpRow(Expp,rownr);
  res = true;
  ExpVc_PasteVATCode = res;
  RETURN;
END;

function Boolean ExpVc_PasteSum(var record ExpVc Expp,Integer rownr)
BEGIN
  Boolean res;

  CalcExpRow(Expp,rownr);
  res = true;
  ExpVc_PasteSum = res;
  RETURN;
END;

global
function Boolean ExpDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  record ExpVc Expr;
  record ExpVc Exp2r;
  record ExpTBlock ExpTRec;
  Boolean res;
  Integer updatemode,normalmode,err;

  BlockLoad(ExpTRec);
  res = true;
  normalmode = 0;
  updatemode = 2;
  GetWindowRecord(wn,Expr);    
  err = ExpTestApprovalStatus(Expr);
  if (err!=0) then begin
    MessageBox(err,"");
    res = false;
    goto LExpDClassOKFlagButtonAction;
  end;
  GetPrevWindowRecord(wn,Exp2r);    

  if (WindowState(wn)==normalmode) then begin
    if (Expr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
      goto LExpDClassOKFlagButtonAction;
    end;  
  end;        
  if (WindowState(wn)==updatemode) then begin
    if (Exp2r.OKFlag!=0) then begin
      res = false;
      goto LExpDClassOKFlagButtonAction;
    end;  
  end;
  if (ExpTRec.expDemandSign!=0) then begin
    if (DidYouAuthorize(Expr.OKSign)==false) then begin 
      MessageBox(1293," " & Expr.Person);
      res = false; 
      goto LExpDClassOKFlagButtonAction;
    end;
  end;  
LExpDClassOKFlagButtonAction:;
  ExpDClassOKFlagButtonAction = res;
  RETURN;
END;

function Boolean ExpApprovalStarted(record ExpVc Expr)
begin
  Boolean res;
  record AcceptanceRulesVc Acptr;

  res = false;
  if (ExpApprovalStatus(Expr,Acptr)>=kAcceptanceStatePending) then begin
    res = true;
  end;
  ExpApprovalStarted = res;
  return;
end;

global 
function Boolean ExpDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record ExpVc Expr;
  Boolean res;

  res = true;
  GetWindowRecord(wn,Expr);    
  if (ExpApprovalStarted(Expr) and UserCanAction("ChangeRecordMatrixWhenPending",false)==false) then begin
     res = false;
     goto LExpDClassDeleteRowTest;
   end;
  if (WindowState(wn)==0 or WindowState(wn)==2) then begin
    GetPrevWindowRecord(wn,Expr);    
    if (Expr.OKFlag!=0) then begin res = false; end;
  end;
LExpDClassDeleteRowTest:;  
  ExpDClassDeleteRowTest = res;
  return;
end;

function Boolean ExpCheckTBIVInvoiced(record ExpVc Expp,Integer rownr)
begin
  record TBIVVc TBIVr;
  row ExpVc Exprw;
  Boolean res;
  
  MatRowGet(Expp,rownr,Exprw);
  if ((nonblank(Exprw.PRCode)) and (nonblank(Exprw.Item))) then begin
    TBIVr.PRCode = Exprw.PRCode;
    TBIVr.oVc = 2;
    TBIVr.SerNr = Expp.SerNr;
    TBIVr.Row = rownr;
    TBIVr.ArtCode = Exprw.Item;
    TBIVr.EMCode = "";
//    TBIVr.ChildNr = -1;
    if (ReadFirstMain(TBIVr,6,true)) then begin
      if (TBIVr.Invoice!=-1) then begin
        res = true;
      end;
    end;    
  end;
  ExpCheckTBIVInvoiced = res;
  return;
end;

function Boolean ExpConnectedToPersonnelPayment(record ExpVc Expr)
begin
  Boolean res;
  row ExpVc Exprw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(Expr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Expr,i,Exprw);
    if (Exprw.stp==kExpenseRowTypePersonnelPayment) then begin
      res = true;
      goto LExpConnectedToPersonnelPayment;
    end;
  end;
LExpConnectedToPersonnelPayment:;  
  ExpConnectedToPersonnelPayment = res;
  return;
end;

global
function Boolean ExpDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record ExpVc Expr;
  Integer nwn;
  
  res = false;
  nwn = FindWindow("SelectApproverWClass");
  if (nwn>0) then begin
    if (MotherWindow(nwn)==wn) then begin
      res = false;
      goto LExpDClassActiveEditField;
    end;
  end;
  GetWindowRecord(wn,Expr);    
  if (ExpApprovalStarted(Expr) and UserCanChangePendingRecord(rownr)==false) then begin
    res = false;
    goto LExpDClassActiveEditField;
  end;
  if (rownr>=0) then begin
    switch (fieldname) begin
      case "VATSum":
        res = false;
        goto LExpDClassActiveEditField;
    end;
  end;
  if (wnst==1) then begin//Rs_insert
    res = true;
    switch (fieldname) begin
      case "Person":
        res = ExpConnectedToPersonnelPayment(Expr)==false;
    end;
  end;
  if (wnst==2) then begin//Rs_update
    GetPrevWindowRecord(wn,Expr);    
    if (Expr.OKFlag!=0) then begin
      if (rownr<0) then begin
        switch (fieldname) begin
          case "Comment": res = true;
        end;
      end else begin
        switch (fieldname) begin
          case "Item": res = !ExpCheckTBIVInvoiced(Expr,rownr);
          case "PRCode": res = !ExpCheckTBIVInvoiced(Expr,rownr);
        end;
      end;
    end else begin
      res = true;
      switch (fieldname) begin
        case "Person":
          res = ExpConnectedToPersonnelPayment(Expr)==false;
      end;
    end;
  end;
LExpDClassActiveEditField:;    
  ExpDClassActiveEditField = res;
  RETURN;
END;

global
function Boolean ExpDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record ExpVc Expr;
  val t;

  if (rownr>=0) then begin
    GetWindowRecord(wn,Expr);    
    ExpSumup(Expr,t);
    PutWindowRecord(wn,Expr);    
  end;
  ExpDClassOnOverStrike = true;
  RETURN;
END;

global 
function Boolean ExpDClassInsertRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
  record ExpVc Expr;

  res = true;
/* Makes NO sense..
  if (WindowState(wn)!=0) then begin//Rs_normal
    res = false;
  end;
*/
  GetWindowRecord(wn,Expr);    
  if (ExpApprovalStarted(Expr) and UserCanAction("ChangeRecordMatrixWhenPending",false)==false) then begin 
    res = false; 
    goto LExpDClassInsertRowTest; 
  end;
  if (WindowState(wn)==0 or WindowState(wn)==2) then begin
    GetPrevWindowRecord(wn,Expr);    
    if (Expr.OKFlag!=0) then begin res = false; end;
  end;
LExpDClassInsertRowTest:;  
  ExpDClassInsertRowTest = res;
  RETURN;
END;

function Boolean ExpDClassTransDateEFAfter(Integer wn,Integer changed)
BEGIN
  Boolean res;
  record ExpVc Expr;
  
  if (changed!=0) then begin
    res = true;
    GetWindowRecord(wn,Expr);    
    if (blankdate(Expr.TransDate)) then begin
      Expr.TransDate = CurrentDate;
      ExpGetRate(Expr);
    end else begin
      if (DateWarned(Expr.TransDate,"ExpVc")) then begin
        MessageBox(1045,"");
      end;
      if (WarnOldRecords(Expr.TransDate,"ExpVc",Expr.SerNr)) then begin
        MessageBox(2020,"");
      end;
      WarnFutureDate(true,Expr.TransDate);
      ExpGetRate(Expr);
//JJCS      
    end;
    PutWindowRecord(wn,Expr);        
  end;
  ExpDClassTransDateEFAfter = res;
  RETURN;
END;

function Boolean ExpDClassDocDateEFAfter(Integer wn,Integer changed)
BEGIN
  Boolean res;
  record ExpVc Expr;
  
  if (changed!=0) then begin
    res = true;
    GetWindowRecord(wn,Expr);    
    if (blankdate(Expr.DocDate)) then begin
      Expr.DocDate = CurrentDate;
      Expr.TransDate=Expr.DocDate;
    end else begin  
      Expr.TransDate=Expr.DocDate;
      if (DateWarned(Expr.TransDate,"ExpVc")) then begin
        MessageBox(1045,"");
      end;
      if (WarnOldRecords(Expr.TransDate,"ExpVc",Expr.SerNr)) then begin
        MessageBox(2020,"");
      end;
      WarnFutureDate(true,Expr.TransDate);
    end;
    ExpGetRate(Expr);
    PutWindowRecord(wn,Expr);        
  end;
  ExpDClassDocDateEFAfter = res;
  RETURN;
END;

function Boolean ExpDClassCurncyCodeEFAfter(Integer wn,Integer changed)
BEGIN
  Boolean res;
  record ExpVc Expr;

  if (changed!=0) then begin
    res = true;
    GetWindowRecord(wn,Expr);    
    ExpVc_PasteCurncyCode(Expr);
    PutWindowRecord(wn,Expr);        
  end;
  ExpDClassCurncyCodeEFAfter = res;
  RETURN;
END;

function Boolean ExpDClassBankCurncyEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record ExpVc Expr;
  val t;

  if (changedf) then begin
    res = true;
    GetWindowRecord(wn,Expr);    
    ExpGetRowRate(Expr,rownr);
    CalcExpRow(Expr,rownr);
    ExpSumup(Expr,t);
    PutWindowRecord(wn,Expr);        
  end;
  ExpDClassBankCurncyEFAfter = res;
  return;
end;

function Boolean ExpDClassPersonEFAfter(Integer wn,Integer changed)
BEGIN
  Boolean res;
  record ExpVc Expr;

  if (changed!=0) then begin
    res = true;
    GetWindowRecord(wn,Expr);    
    if (ExpVc_PastePerson(Expr)) then begin
      PutWindowRecord(wn,Expr);        
    end else begin
      Beep;
    end;
  end;
  ExpDClassPersonEFAfter = res;
  RETURN;
END;

function Boolean ExpDClassACShortEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record ExpVc Expr;

  if (changed!=0) then begin
    res = true;
    GetWindowRecord(wn,Expr);    
    if (ExpVc_PasteACShort(Expr,rownr)) then begin
      PutWindowRecord(wn,Expr);        
    end else begin
      Beep;
    end;
  end;
  ExpDClassACShortEFAfter = res;
  RETURN;
END;

function Boolean ExpDClassAccNumberEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record ExpVc Expr;
  row ExpVc Exprw;

  GetWindowRecord(wn,Expr);    
  MatRowGet(Expr,rownr,Exprw);
  //StopAlert("Acc No. " & Exprw.AccNumber);
  if ((changed!=0) or (blank(Exprw.Comment))) then begin
    res = true;
    if (ExpVc_PasteAccNumber(Expr,rownr)) then begin
      PutWindowRecord(wn,Expr);        
    end else begin
      if (changed) then begin
        Beep;
      end;
    end;
  end;
  ExpDClassAccNumberEFAfter = res;
  RETURN;
END;

function Boolean ExpDClassVATCodeEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record ExpVc Expr;
  row ExpVc Exprw;

  GetWindowRecord(wn,Expr);    
  MatRowGet(Expr,rownr,Exprw);
  if (changed!=0) then begin
    res = true;
    if (ExpVc_PasteVATCode(Expr,rownr)) then begin
      PutWindowRecord(wn,Expr);        
    end else begin
      Beep;
    end;
  end;
  ExpDClassVATCodeEFAfter = res;
  RETURN;
END;

function Boolean ExpDClassSumEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record ExpVc Expr;
  row ExpVc Exprw;

  GetWindowRecord(wn,Expr);    
  MatRowGet(Expr,rownr,Exprw);
  if ((changed!=0) or (blank(Exprw.Comment))) then begin
    res = true;
    if (ExpVc_PasteSum(Expr,rownr)) then begin
      PutWindowRecord(wn,Expr);        
    end else begin
      Beep;
    end;
  end;
  ExpDClassSumEFAfter = res;
  RETURN;
END;

function Boolean ExpDClassVATSumEFAfter(Integer wn,Integer changed)
BEGIN
  Boolean res;
  record ExpVc Expr;
  val t;

  if (changed!=0) then begin
    res = true;
    GetWindowRecord(wn,Expr);    
    ExpSumup(Expr,t);
    PutWindowRecord(wn,Expr);        
  end;
  ExpDClassVATSumEFAfter = res;
  RETURN;
END;

function Boolean ExpDClassExpDateEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record ExpVc Expr;
  row ExpVc Exprw;
  val t;

  if (changed!=0) then begin
    res = true;
    GetWindowRecord(wn,Expr);    
    MatRowGet(Expr,rownr,Exprw);
    if (Exprw.ExpDate>Expr.TransDate) then begin
      MessageBox(1142,"");
    end;
    ExpGetRowRate(Expr,rownr);
    CalcExpRow(Expr,rownr);
    ExpSumup(Expr,t);
    PutWindowRecord(wn,Expr);
  end;
  ExpDClassExpDateEFAfter = res;
  RETURN;
END;

function Boolean ExpDClassPRCodeEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record ExpVc Expr;
  row ExpVc Exprw;

  GetWindowRecord(wn,Expr);    
  MatRowGet(Expr,rownr,Exprw);
  if ((changed!=0) or (blank(Exprw.Comment))) then begin
    res = true;
    if (ExpVc_PastePRCode(Expr,rownr)) then begin
      PutWindowRecord(wn,Expr);        
    end else begin
      Beep;
    end;
  end;
  ExpDClassPRCodeEFAfter = res;
  RETURN;
END;

function Boolean ExpDClassWayListEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record ExpVc Expr;
  row ExpVc Exprw;

  GetWindowRecord(wn,Expr);    
  MatRowGet(Expr,rownr,Exprw);
  if (changed!=0) then begin
    if (ExpVc_PasteWayList(Expr,rownr)) then begin
      res = true;
      PutWindowRecord(wn,Expr);        
    end;
  end;
  ExpDClassWayListEFAfter = res;
  RETURN;
END;

function Boolean ExpDClassVECodeEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record ExpVc Expr;

  GetWindowRecord(wn,Expr);    
  if (changed!=0)then begin
    res = true;
    if (ExpVc_PasteVECode(Expr,rownr)) then begin
      PutWindowRecord(wn,Expr);        
    end else begin
      Beep;
    end;
  end;
  ExpDClassVECodeEFAfter = res;
  RETURN;
END;

function Boolean ExpDClassDocNrEFAfter(Integer wn,Integer rownr,Integer changed)
begin
  Boolean res;
  record ExpVc Expr;

  GetWindowRecord(wn,Expr);    
  if (changed!=0)then begin
    res = true;
    if (HasLocalization("ARG")) then begin
      Argentina_ExpDClassInvoiceNrEFAfter(Expr,rownr);
    end;
LExpDClassDocNrEFAfter:;
    PutWindowRecord(wn,Expr);
  end;
  ExpDClassDocNrEFAfter = res;
  return;
end;

function Boolean ExpDClassDANrEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record ExpVc Expr;
  row ExpVc Exprw;

  if (changedf)then begin
    GetWindowRecord(wn,Expr);    
    ExpVc_PasteDANr(Expr,rownr);    
    res = true;
    
    CalcExpRow(Expr,rownr);
    PutWindowRecord(wn,Expr);
  end;
  ExpDClassDANrEFAfter = res;
  return;
end;

global
function Boolean ExpDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
    
  res = false;
  switch (fieldname) begin
    case "TransDate": res = ExpDClassTransDateEFAfter(wn,changed);
    case "CurncyCode": res = ExpDClassCurncyCodeEFAfter(wn,changed);
    case "BankCurncy": res = ExpDClassBankCurncyEFAfter(wn,rownr,changed!=0);
    case "Person": res = ExpDClassPersonEFAfter(wn,changed);
    case "ACShort": res = ExpDClassACShortEFAfter(wn,rownr,changed);
    case "AccNumber": res = ExpDClassAccNumberEFAfter(wn,rownr,changed);
    case "VATCode": res = ExpDClassVATCodeEFAfter(wn,rownr,changed);
    case "Sum": res = ExpDClassSumEFAfter(wn,rownr,changed);
    case "VATSum": res = ExpDClassVATSumEFAfter(wn,changed);
    case "ExpDate": res = ExpDClassExpDateEFAfter(wn,rownr,changed);
    case "PRCode": res = ExpDClassPRCodeEFAfter(wn,rownr,changed);
    case "DocDate": res = ExpDClassDocDateEFAfter(wn,changed);
    case "WayList": res = ExpDClassWayListEFAfter(wn,rownr,changed);
    case "VECode": res = ExpDClassVECodeEFAfter(wn,rownr,changed);
    case "DocNr": res = ExpDClassDocNrEFAfter(wn,rownr,changed);
    case "DANr": res = ExpDClassDANrEFAfter(wn,rownr,changed!=0);
  end;
  ExpDClassAfterEditField = res;
  RETURN;
END;

function Boolean ExpDEnterSpec(Integer wn,record ExpVc Expp,Integer oldf,string fromfieldname)
BEGIN
  row ExpVc Exprw;
  row ExpVc Exp2rw;
  record VITBlock VITRec;
  Integer fo;
  Integer debcol;
  Integer textcol;
  Integer newf;
  Integer sf,nfr;
  Integer rownr;
  Boolean changedf;
  Boolean res;

  changedf = true;
  res = true;
/*
  if (TrDNewEF!=0) then begin
    newf = TrDNewEF;
    goto LEntSpec;
  end;
*/
  newf = -1;
/*  
  if (nfr>0) then begin
    rownr = (oldf-sf) / nfr;
  end else begin
    rownr = -1;
  end;
*/  
  if (oldf>=sf) then begin    
    if (rownr<0) then begin goto LEntSpec; end;
    BlockLoad(VITRec);
    MatRowGet(Expp,rownr,Exprw);
    if (rownr>0) then begin
      MatRowGet(Expp,rownr-1,Exp2rw);
    end;
/*  
    debcol = FoTo2Fn(wn,m4offset(ExpView,Math.h),row,m4offset(ExpRowType,Sum),NIL);
    textcol = FoTo2Fn(wn,m4offset(ExpView,Math.h),row,m4offset(ExpRowType,Comment),NIL);
*/    
    changedf = false;
    switch (Exprw.stp) begin
      case 1:
        switch (fromfieldname) begin
          case "AccNumber":
            newf = debcol;
            if (VITRec.trSkipCom==0) then begin newf = textcol; end;
//            if (VITRec.trSkipObj==0) then begin newf = sf+((row)*nfr)+1; end;
            if (blank(Exprw.AccNumber)) then begin
              if (rownr>0) then begin
                 Exprw.AccNumber = Exp2rw.AccNumber;
                 MatRowPut(Expp,rownr,Exprw);
                 ExpAccName(Expp,rownr);
                 MatRowGet(Expp,rownr,Exprw);
               end;
            end;
          case "Objects":
            newf = debcol;
            if (VITRec.trSkipCom==0) then begin newf = textcol; end;
            if (blank(Exprw.Objects)) then begin
              if (rownr>0) then begin
                 Exprw.Objects = Exp2rw.Objects;
              end;
            end;
          case "Item":
            if (blank(Exprw.Item)) then begin
              if (rownr>0) then begin
                 Exprw.Item = Exp2rw.Item;
               end;
             end;
          case "PRCode":
            if (blank(Exprw.PRCode)) then begin
              if (rownr>0) then begin
                 Exprw.PRCode = Exp2rw.PRCode;
               end;
             end;
          case "VECode":
            if (blank(Exprw.VECode)) then begin
              if (rownr>0) then begin
                 Exprw.VECode = Exp2rw.VECode;
               end;
            end;               
        end;
        MatRowPut(Expp,rownr,Exprw);
    end;
  end;
LEntSpec:
  if (newf!=-1) then begin
    WindowFieldGoto(wn,Expp,-1,"Comment",true);
  end;
  ExpDEnterSpec = res;  
  RETURN;
END;

global
function Boolean ExpDClassOnEnterKey(Integer wn,string fieldname,Integer fn,Integer rownr)
BEGIN
  Boolean res;
  record ExpVc Expr;
  
  res = false;
  if ((WindowState(wn)==2) or (WindowState(wn)==1)) then begin//Rs_update,Rs_insert
    GetWindowRecord(wn,Expr);
    res = ExpDEnterSpec(wn,Expr,fn,fieldname);
  end;

  ExpDClassOnEnterKey = true;
  RETURN;
END;

procedure ExpDClassSpecPasteNameObjects(Integer wn,var string psname)
BEGIN
  record ExpVc Expr;
  row ExpVc Exprw;
  Integer rownr;
  string 200 typ;

  GetWindowRecord(wn,Expr);
  rownr = WindowActiveRow(wn);
  typ="";
  if (rownr>=0) then begin
    MatRowGet(Expr,rownr,Exprw);
    FindOTforAcc(Exprw.AccNumber,typ);
  end;
  if (nonblank(typ)) then begin
    psname = "TRObjSClass";
  end else begin    
    psname = ObjSClassPasteSpecialWindowClass("ObjSClass");
  end;
  RETURN;
END;

global
function string 40 ExpDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "Objects":ExpDClassSpecPasteNameObjects(wn,psname);
  end;
  ExpDClassSpecPasteName = psname;
  return;
end;
