remote procedure RestAccVc_PasteRebCode(var record RestAccVc);
external procedure RestAccVc_PasteTaxTemplateCode(var record RestAccVc,Integer);
external function integer GetSelectedPOSItemRowIndex(integer);
external function Boolean FindTheUser(var record UserVc);
external updating procedure RestAccVc_PrintToFiscalPrinter(var record RestAccVc,Boolean);
remote function val GetServiceCharge(var record RestAccVc,record LocalMachineBlock,Boolean);
external procedure RestAccDchsum(record RestAccVc,Integer);
remote procedure RestAccVc_PasteQuant(var record RestAccVc,Integer,record LocalMachineBlock);
remote function Boolean RestAccDchrsum(var record RestAccVc,Integer,Integer);
external procedure RestAccDClassLevelTopExecute(Boolean);
external procedure RestAccDClass_RefreshStringList(Integer,record RestAccVc);
external procedure SetPOSWindowDisplay(string,string);
remote procedure RestAccVc_PasteLoyaltyCardNr(var record RestAccVc);
external function roundmode DefaultRoundMode();
external function string 40 ResSClassSpecPName(string);
external function Integer OpenMasterWClass();
remote updating function Boolean CreateTabInvoice(var Record IVVc,Record RestAccVc);
remote procedure slRestAccHALRemote(string,var Array string,var LongInt);
//remote function string 40 RestAccITDefaultRemote(string,string);
remote function Boolean RestAccVc_PasteArtCode(var record RestAccVc,Integer,record LocalMachineBlock,string,Integer,val,var string);
external procedure SplitEclass(string,var Array string);
remote updating function LongInt RestAccCheckIfSaveAllowed(var record RestAccVc,record RestAccVc,LongInt,LongInt);
remote function Boolean RestAccVc_PasteGuestCode(var record RestAccVc);
remote function Boolean RestAccVc_PasteCUCode(var record RestAccVc);
remote function Boolean RestAccVc_PasteResource(var record RestAccVc);
external procedure GetSalesGroup(string,var string);
remote procedure RestAccSumup(var record RestAccVc,string);
remote function Boolean CustOnRestAcc(record RestAccVc,record JobVc);
remote procedure RestAccVc_PasteCustCode(var record RestAccVc);
external procedure DisplayRestAccItem(record RestAccVc,Integer);
//external procedure RestAccDClassGotoPage(string);

global
function LongInt CheckIfOpenTabforTable(record RestAccVc RestAccr)
BEGIN
  LongInt res;
  record RestAccVc oldRestAccr;
  
  if ((nonblank(RestAccr.CustCode)) and (RestAccr.CustCode!="BAR")) then begin
    oldRestAccr.CustCode = RestAccr.CustCode;
    if (ReadFirstKey("OpenTabs",oldRestAccr,1,true)) then begin
      if (RestAccr.SerNr!=oldRestAccr.SerNr) then begin
        res = oldRestAccr.SerNr;
      end;
    end;
  end;
  CheckIfOpenTabforTable = res;
  RETURN;
END;

function Boolean RestAccDClassLoyaltyCardNrEFAfter(Integer wn,Boolean changedf)
begin
  record RestAccVc RestAccr;
  
  if (changedf) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,RestAccr);
    RestAccVc_PasteLoyaltyCardNr(RestAccr);
    PutWindowRecord(wn,RestAccr);
  end;
  RestAccDClassLoyaltyCardNrEFAfter = true;
  return;
end;

global
function Boolean RestAccDClassCUCodeEFAfter(Integer wn, Integer rownr,Integer changedf)
BEGIN
  record RestAccVc RestAccr;
  
  if (changedf) then begin
    GetWindowRecord(wn,RestAccr);
    if (RestAccVc_PasteCUCode(RestAccr)==false) then begin
      MessageBox(2158,"");
      RestAccr.CUCode = "";
      RestAccr.CUName = "";
      RestAccr.GuestCode = "";
      RestAccr.GuestName = "";
      RestAccr.LoyaltyCardNr = "";
      RestAccr.LCMLevel = "";
      RestAccr.Points = 0;
    end;
    PutWindowRecord(wn,RestAccr);
  end; 
  RestAccDClassCUCodeEFAfter = true;
  RETURN;
END;

global
updating function Boolean RestAccDClassCustCodeEFAfter(Integer wn,Integer changed)
BEGIN
  Boolean res;
  record RestAccVc RestAccr;
  record RestAccVc RestAccr2;
  LongInt oldbartab;
  Integer nwn;
  
  res = true;
  if (changed!=0) then begin 
    GetWindowRecord(wn,RestAccr);
    RestAccVc_PasteCustCode(RestAccr);
    oldbartab = CheckIfOpenTabforTable(RestAccr);
    if (oldbartab!=-1) then begin
      MessageBox(20066,oldbartab);
      RestAccr2.SerNr = oldbartab;
      if (ReadFirstMain(RestAccr2,1,true)) then begin
        CloseWindow(wn);
        nwn = OpenWindow("RestAccDClass",1,0,"","",RestAccr2);
      end;
      res = false;
    end else begin
      switch (WindowState(wn)) begin
        case 2:
          PutWindowRecord(wn,RestAccr);
/*
not good
          if (WindowDoOK(wn,0)) then begin
            UpdateBrowses("RestAccVc");
          end;
*/          
        case 1:
          PutWindowRecord(wn,RestAccr);
/*          
          if (WindowDoOK(wn,0)) then begin
            UpdateBrowses("RestAccVc");
          end;
*/          
      end;
    end;
  end;
LRestAccDClassCustCodeEFAfter:;  
  RestAccDClassCustCodeEFAfter = res;
  RETURN;
END;

global 
function Boolean RestAccDClassTaxTemplateCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin  
  record RestAccVc RestAccr;
  Boolean found;
  record LocalMachineBlock LMb;
  string 255 printgroupcode;
  
  if (changedf) then begin
    GetWindowRecord(wn,RestAccr);
    BlockLoad(LMb);
    RestAccVc_PasteTaxTemplateCode(RestAccr,rownr);
    DisplayRestAccItem(RestAccr,rownr);
    PutWindowRecord(wn,RestAccr);      
  end;
  RestAccDClassTaxTemplateCodeEFAfter = true;
  return;
end;

function Boolean RestAccDClassRebCodeEFAfter(Integer wn,Boolean changedf)
begin
  record RestAccVc RestAccr;
  
  if (changedf) then begin
    GetWindowRecord(wn,RestAccr);
    RestAccVc_PasteRebCode(RestAccr);
    PutWindowRecord(wn,RestAccr);
  end;
  RestAccDClassRebCodeEFAfter = true;
  return;
end;

global 
function Boolean RestAccDClassArtCodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record RestAccVc RestAccr;
  Boolean found;
  record LocalMachineBlock LMb;
  string 255 printgroupcode,inwarning;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,RestAccr);
    printgroupcode = GetWindowString(wn,"touchscreenwindowprintgroupcode");
    BlockLoad(LMb);
    if (RestAccVc_PasteArtCode(RestAccr,rownr,LMb,printgroupcode,0,1.00,inwarning)) then begin
      DisplayRestAccItem(RestAccr,rownr);
      PutWindowRecord(wn,RestAccr);      
    end;
    if (nonblank(inwarning)) then begin
      MessageBox(0,inwarning);
    end;
  end;
  RestAccDClassArtCodeEFAfter = true;
  return;
end;

global
function Boolean RestAccDClassInsertRowTest(Integer wn,Integer rownr)
BEGIN
  Boolean res;
  record RestAccVc RAr;

  res = true;
  GetWindowRecord(CurWindow,RAr);
  if (RAr.Closed!=0) then begin
    res = false;
  end;
  RestAccDClassInsertRowTest = res;
  RETURN;
END;

global
updating procedure RestAccToIVDsm()
begin
  record RestAccVc Tabr;
  record IVVc IVr;
  Integer wn,nwn;
 
  wn = CurWindow;
  GetWindowRecord(wn,Tabr); 
  if ((blank(Tabr.Resource)) and (Tabr.Closed==0)) then begin
    if (CreateTabInvoice(IVr,Tabr)) then begin
      RecordDelete(Tabr);
      RecordNew(Tabr);
      nwn = OpenWindow("RestAccDClass",1,0,"","",Tabr);  
      nwn = OpenWindow("IVDClass",1,0,"","",IVr);  
      UpdateBrowses("RestAccVc");
      UpdateBrowses("IVVc");
      CloseWindow(wn);
    end else begin
      Beep;
    end;
  end;
  return;
end;

//??
global
procedure RestAccPushButtons()
begin
  Integer wn,ab;
  record RestAccVc RestAccr;
  
  wn = CurWindow;
  GetWindowRecord(wn,RestAccr);
  ab = WIndowActiveButton(wn);
  return;
end;

global
function string 40 RestAccDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  record RestAccVc RestAccr;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "CUCode":
      GetWindowRecord(wn,RestAccr);
      if (blank(RestAccr.Resource)) then begin
        psname = "CUSClass";
      end else begin
        psname = "JobCustSClass";
      end;    
    case "GuestCode":
      GetWindowRecord(wn,RestAccr);
      if (blank(RestAccr.Resource)) then begin
        psname = "CUGuestSClass";
      end else begin
        psname = "GuestSClass";
      end;    
    case "ResCode": 
      psname = ResSClassSpecPName(defpsname);
  end;
  RestAccDClassSpecPasteName = psname;
  return;
end;

global
function Boolean RestAccDClassClosedButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record RestAccVc RestAccr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,RestAccr);
    if (RestAccr.Closed!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,RestAccr);
    if (RestAccr.Closed!=0) then begin
      res = false;
    end;
  end;  
  RestAccDClassClosedButtonAction = res;
  RETURN;
END;

global
function Boolean RestAccDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record RestAccVc RestAccr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,RestAccr);    
    RestAccSumup(RestAccr,"");
    PutWindowRecord(wn,RestAccr);    
  end;
  RestAccDClassOnOverStrike = true;
  RETURN;
END;

global
function Boolean RestAccDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  record RestAccVc RestAcc2r;
  Integer insertmode;

  res = true;
  insertmode = 1;//Rs_insert
  GetWindowRecord(wn,RestAccr);
  if (WindowState(wn)!=insertmode) then begin
    if (RestAccr.Closed!=0) then begin
      res = false;
      goto LRestAccDClassActiveEditField;
    end;
  end; 
/*  
  switch (fieldname) begin
    case "CustCode":
    otherwise
      if (blank(RestAccr.CustCode)) then begin
        MessageBox(1058,"");
        WindowFieldGoto(wn,RestAccr,-1,"CustCode",true);
        res = false;
        goto LRestAccDClassActiveEditField;
      end;
  end;
*/  
  switch (fieldname) begin
    case "SerNr":
      switch (wnst) begin
        case Rs_update:
          GetPrevWindowRecord(wn,RestAcc2r);
          if (RestAcc2r.Closed==0) then begin
            if (UserCanAction("AllowRestAccSerNrChange",true)==false) then begin res = false; end;
          end else begin
            res = false; 
          end;
        otherwise
          if (UserCanAction("AllowRestAccSerNrChange",true)==false) then begin res = false; end;
      end;
    case "TransDate":
      switch (wnst) begin
        case Rs_update:
          GetPrevWindowRecord(wn,RestAcc2r);
          if (RestAcc2r.Closed==0) then begin
            if (UserCanAction("AllowRestAccTransDateChange",true)==false) then begin res = false; end;
          end;
        otherwise
          if (UserCanAction("AllowRestAccTransDateChange",true)==false) then begin res = false; end;
      end;
    case "Price":
      if (UserCanAction("ChangePrices",true)==false) then begin
        res = false;
      end;
    case "VATCode":
      if (UserCanAction("ChangePrices",true)==false) then begin
        res = false;
      end;
    case "Quant":
      if (UserCanAction("AllowRestAccRowsDelete",true)==false) then begin
        res = false;
      end;
    case "ArtCode":
      MatRowGet(RestAccr,rownr,RestAccrw);
      if (nonblank(RestAccrw.ArtCode)) then begin
        if (UserCanAction("AllowRestAccRowsDelete",true)==false) then begin
          res = false;
        end;
      end;
    case "RebCode": 
      if (UserCanAction("ChangeDiscountMatrixonRestAcc",false)==false) then begin res = false; end;
  end;  
LRestAccDClassActiveEditField:;  
  RestAccDClassActiveEditField = res;
  RETURN;
END;

global
function Boolean RestAccDClassOnEnterKey(Integer wn,string fieldname,Integer fn,Integer rownr)
BEGIN
  Boolean res;
  record RestAccVc RestAccr;

  res = true;
  GetWindowRecord(wn,RestAccr);
  switch (fieldname) begin
    case "ArtCode": 
      WindowFieldGoto(wn,RestAccr,rownr+1,"ArtCode",true);
      res = false;
    case "Quant": 
      WindowFieldGoto(wn,RestAccr,rownr+1,"ArtCode",true);
      res = false;      
    case "Resource":    
      if (nonblank(RestAccr.Resource)) then begin
        WindowFieldGoto(wn,RestAccr,-1,"GuestCode",true);
        res = false;
      end else begin
        WindowFieldGoto(wn,RestAccr,-1,"ArtCode",true);
        res = true;
      end;
  end;
  RestAccDClassOnEnterKey = res;
  RETURN;
END;
  
function Boolean RestAccDClassDiscountEFAfter(Integer wn,Boolean changedf)
BEGIN
  record RestAccVc RestAccr;

  if (changedf) then begin
    GetWindowRecord(wn,RestAccr);
    RestAccSumup(RestAccr,"");
    PutWindowRecord(wn,RestAccr);
  end; 
  RestAccDClassDiscountEFAfter = true;
  return;
end;

function Boolean RestAccDClassCashierEFAfter(Integer wn,Boolean changedf)
BEGIN
  record RestAccVc RestAccr;
  string 255 tstr;
  
  if (changedf) then begin
    GetWindowRecord(wn,RestAccr);
    GetSalesGroup(RestAccr.Cashier,tstr);
    RestAccr.SalesGroup = tstr;
    PutWindowRecord(wn,RestAccr);
  end; 
  RestAccDClassCashierEFAfter = true;
  return;
end;

function Boolean RestAccDClassResourceEFAfter(Integer wn,Boolean changedf)
BEGIN
  record RestAccVc RestAccr;
  string 255 tstr;
  
  if (changedf) then begin
    GetWindowRecord(wn,RestAccr);
    if (RestAccVc_PasteResource(RestAccr)) then begin
      PutWindowRecord(wn,RestAccr);
    end else begin
      if (nonblank(RestAccr.Resource)) then begin
        tstr = RestAccr.Resource;
        RestAccr.Resource = "";
        PutWindowRecord(wn,RestAccr);
        MessageBox(0,USetStr(1724) & ": "  & tstr);
      end else begin
        PutWindowRecord(wn,RestAccr);
      end;
    end;
  end; 
  RestAccDClassResourceEFAfter = true;
  return;
end;

function Boolean RestAccDClassGuestCodeEFAfter(Integer wn,Boolean changedf)
BEGIN
  record RestAccVc RestAccr;
  
  if (changedf) then begin
    GetWindowRecord(wn,RestAccr);
    if (RestAccVc_PasteGuestCode(RestAccr)==false) then begin
      MessageBox(2155,"");
      RestAccr.CUCode = "";
      RestAccr.CUName = "";
      RestAccr.GuestCode = "";
      RestAccr.GuestName = "";
    end;
    PutWindowRecord(wn,RestAccr);
  end; 
  RestAccDClassGuestCodeEFAfter = true;
  return;
end;

function Boolean RestAccDClassQuantEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record RestAccVc RestAccr;
  record LocalMachineBlock LMb;
  
  if (changedf) then begin
    BlockLoad(LMb);
    GetWindowRecord(wn,RestAccr);
    RestAccVc_PasteQuant(RestAccr,rownr,LMb);
    DisplayRestAccItem(RestAccr,rownr);
    PutWindowRecord(wn,RestAccr);
  end; 
  RestAccDClassQuantEFAfter = true;
  return;
end;

function Boolean RestAccDClassPriceEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record RestAccVc RestAccr;
  
  if (changedf) then begin
    GetWindowRecord(wn,RestAccr);
    RestAccDchrsum(RestAccr,rownr,0);
    RestAccDchsum(RestAccr,rownr);
    RestAccSumup(RestAccr,"");
    DisplayRestAccItem(RestAccr,rownr);
    PutWindowRecord(wn,RestAccr);
  end; 
  RestAccDClassPriceEFAfter = true;
  return;
end;
  
function Boolean RestAccDClassCashValueEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record RestAccVc RestAccr;
  
  if (changedf) then begin
    GetWindowRecord(wn,RestAccr);
    RestAccSumup(RestAccr,"");
    PutWindowRecord(wn,RestAccr);
  end; 
  RestAccDClassCashValueEFAfter = true;
  return;
end;

function Boolean RestAccDClassRetValueEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record RestAccVc RestAccr;
  
  if (changedf) then begin
    GetWindowRecord(wn,RestAccr);
    RestAccSumup(RestAccr,"RetValue");
    PutWindowRecord(wn,RestAccr);
  end; 
  RestAccDClassRetValueEFAfter = true;
  return;
end;

function Boolean RestAccDClassTipValueEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record RestAccVc RestAccr;
  
  if (changedf) then begin
    GetWindowRecord(wn,RestAccr);
    RestAccSumup(RestAccr,"TipValue");
    PutWindowRecord(wn,RestAccr);
  end; 
  RestAccDClassTipValueEFAfter = true;
  return;
end;

function Boolean RestAccDClassPaidEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record RestAccVc RestAccr;
  
  if (changedf) then begin
    GetWindowRecord(wn,RestAccr);
    RestAccSumup(RestAccr,"");
    PutWindowRecord(wn,RestAccr);
  end; 
  RestAccDClassPaidEFAfter = true;
  return;
end;

function Boolean RestAccDClassPaid2EFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record RestAccVc RestAccr;
  
  if (changedf) then begin
    GetWindowRecord(wn,RestAccr);
    RestAccSumup(RestAccr,"");
    PutWindowRecord(wn,RestAccr);
  end; 
  RestAccDClassPaid2EFAfter = true;
  return;
end;

function Boolean RestAccDClassPaid3EFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record RestAccVc RestAccr;
  
  if (changedf) then begin
    GetWindowRecord(wn,RestAccr);
    RestAccSumup(RestAccr,"");
    PutWindowRecord(wn,RestAccr);
  end; 
  RestAccDClassPaid3EFAfter = true;
  return;
end;

function Boolean RestAccDClassSumEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  
  GetWindowRecord(wn,RestAccr);
  if (changedf==false) then begin
    MatRowGet(RestAccr,rownr,RestAccrw);
    if (RestAccrw.stp!=1) then begin
      if (RestAccrw.Sum==0) then begin
        RestAccrw.Sum = RestAccr.RemValue;
        MatRowPut(RestAccr,rownr,RestAccrw);
        RestAccDchsum(RestAccr,rownr);
        RestAccSumup(RestAccr,"");
        PutWindowRecord(wn,RestAccr);
      end;
    end;
  end;
  if (changedf) then begin
    RestAccSumup(RestAccr,"");
    PutWindowRecord(wn,RestAccr);
  end; 
  RestAccDClassSumEFAfter = true;
  return;
end;

function Boolean RestAccDClassServChargeEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record RestAccVc RestAccr;
  
  if (changedf) then begin
    GetWindowRecord(wn,RestAccr);
    RestAccSumup(RestAccr,"");
    PutWindowRecord(wn,RestAccr);
  end; 
  RestAccDClassServChargeEFAfter = true;
  return;
end;

global
updating function Boolean RestAccDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "ArtCode": res = RestAccDClassArtCodeEFAfter(wn,rownr,changed);
    case "CustCode": res = RestAccDClassCustCodeEFAfter(wn,changed);
    case "CUCode": res = RestAccDClassCUCodeEFAfter(wn,rownr,changed);
    case "Discount": res = RestAccDClassDiscountEFAfter(wn,changed!=0);
    case "Cashier": res = RestAccDClassCashierEFAfter(wn,changed!=0);
    case "Resource": res = RestAccDClassResourceEFAfter(wn,changed!=0);
    case "GuestCode": res = RestAccDClassGuestCodeEFAfter(wn,changed!=0);
    case "Quant": res = RestAccDClassQuantEFAfter(wn,rownr,changed!=0);
    case "Price": res = RestAccDClassPriceEFAfter(wn,rownr,changed!=0);
    case "CashValue": res = RestAccDClassCashValueEFAfter(wn,rownr,changed!=0);
    case "Paid": res = RestAccDClassPaidEFAfter(wn,rownr,changed!=0);
    case "Paid2": res = RestAccDClassPaid2EFAfter(wn,rownr,changed!=0);
    case "Paid3": res = RestAccDClassPaid3EFAfter(wn,rownr,changed!=0);
    case "Sum": res = RestAccDClassSumEFAfter(wn,rownr,changed!=0);
    case "RetValue": res = RestAccDClassRetValueEFAfter(wn,rownr,changed!=0);
    case "TipValue": res = RestAccDClassTipValueEFAfter(wn,rownr,changed!=0);
    case "ServCharge": res = RestAccDClassPaid3EFAfter(wn,rownr,changed!=0);
    case "LoyaltyCardNr": res = RestAccDClassLoyaltyCardNrEFAfter(wn,changed!=0);
    case "TaxTemplateCode": res = RestAccDClassTaxTemplateCodeEFAfter(wn,rownr,changed!=0);
    case "RebCode": res = RestAccDClassRebCodeEFAfter(wn,changed!=0);
  end;
  RestAccDClassAfterEditField = res;
  RETURN;
END;  

global
updating function Boolean RestAccOldDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  res = RestAccDClassAfterEditField(wn,fieldname,fn,rownr,changed);
  RestAccOldDClassAfterEditField = res;
  RETURN;
END;  

global
procedure ToolKeyPad_Numbers(string anumberstr)
begin
//  PasteString(CurWindow,anumberstr);
  Integer wn;
  record RcVc RepSpec;
  string 255 tstr;
  string 255 pmfield,numberstr,activefield;
  val sign;
  
  wn = CurWindow;
  activefield = WindowActiveField(wn);
  numberstr = anumberstr;
  pmfield = GetWindowString(wn,"PLUSorMINUS");
  tstr = GetWindowString(wn,activefield);
  if (nonblank(tstr)) then begin
    pmfield = "";
  end;
  numberstr = pmfield & numberstr;
  tstr = GetWindowString(wn,activefield) & numberstr;
  PutWindowString(wn,activefield,tstr);
  PasteString(wn,tstr);
  return;
end;  

global
procedure RestAccToolKeyPad0()
BEGIN
  ToolKeyPad_Numbers("0");
  RETURN;
END;  

global
procedure RestAccToolKeyPad1()
BEGIN
  ToolKeyPad_Numbers("1");
  RETURN;
END;  

global
procedure RestAccToolKeyPad2()
BEGIN
  ToolKeyPad_Numbers("2");
  RETURN;
END;  

global
procedure RestAccToolKeyPad3()
BEGIN
  ToolKeyPad_Numbers("3");
  RETURN;
END;  

global
procedure RestAccToolKeyPad4()
BEGIN
  ToolKeyPad_Numbers("4");
  RETURN;
END;  

global
procedure RestAccToolKeyPad5()
BEGIN
  ToolKeyPad_Numbers("5");
  RETURN;
END;  

global
procedure RestAccToolKeyPad6()
BEGIN
  ToolKeyPad_Numbers("6");
  RETURN;
END;  

global
procedure RestAccToolKeyPad7()
BEGIN
  ToolKeyPad_Numbers("7");
  RETURN;
END;  

global
procedure RestAccToolKeyPad8()
BEGIN
  ToolKeyPad_Numbers("8");
  RETURN;
END;  

global
procedure RestAccToolKeyPad9()
BEGIN
  ToolKeyPad_Numbers("9");
  RETURN;
END;  

global
procedure RestAccToolKeyPad00()
BEGIN
  ToolKeyPad_Numbers("00");
  RETURN;
END;  

global
procedure RestAccToolKeyPadPoint()
BEGIN
  ToolKeyPad_Numbers("."); //## international
  RETURN;
END;  

global
procedure RestAccToolKeyPadEnter()
BEGIN
  KeyPadEnter(CurWindow);
  RETURN;
END;  

global
procedure RestAccToolKeyPadDelete()
BEGIN
  KeyPadSelectAll(CurWindow);
  KeyPadDelete(CurWindow);
  DeselectWindow(CurWindow,true);
  RETURN;
END;  

global
procedure RestAccToolKeyPadClear()
BEGIN
  record RestAccVc RestAccr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,RestAccr); 
  WindowDeactivateField(wn);
  RestAccr.CashValue = blankval;
  RestAccr.RetValue = blankval;
  RestAccr.TendValue = blankval;
  RestAccr.TipValue = blankval;
  RestAccr.Paid = blankval;
  RestAccr.Paid2 = blankval;
  RestAccr.Paid3 = blankval;
//  RestAccr.PayDeal = "";
  RestAccr.PayDeal2 = "";
  RestAccr.PayDeal3 = "";
  RestAccr.PayDeal4 = "";
  RestAccSumup(RestAccr,"");
  PutWindowRecord(wn,RestAccr);   
  RETURN;
END;  

global
updating procedure RestAccToolKeyPadSplit()
BEGIN
  record RestAccVc newRestAccr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  record RestAccVc RestAcc2r;
  Integer wn,rownr,nwn,rwcnt,i,nrcnt;
  val splitqty;
  
  wn = CurWindow;
  GetWindowRecord(wn,RestAccr);  
  GetPrevWindowRecord(wn,RestAcc2r); 
  DeselectWindow(wn,false);  
  RecordCopy(newRestAccr,RestAccr);
  switch (WindowState(wn)) begin
    case 1: //Rs_insert
      if (RestAccCheckIfSaveAllowed(RestAccr,RestAcc2r,1,0)!=0) then begin
        goto LRestAccToolKeyPadSplit;
      end;
      if (RecordStore(RestAccr,false)==false) then begin 
        goto LRestAccToolKeyPadSplit;
      end;
//      SetRs();
      UpdateBrowses("RestAccVc");
    case 2://Rs_update
      if (RestAccCheckIfSaveAllowed(RestAccr,RestAcc2r,2,0)!=0) then begin
        goto LRestAccToolKeyPadSplit;
      end;
      if (RecordUpdate(RestAcc2r,RestAccr,true)!=0) then begin 
        goto LRestAccToolKeyPadSplit;
      end;//Rs_insert
      UpdateBrowses("RestAccVc");
  end;
  newRestAccr.SerNr = -1;
  rwcnt = MatRowCnt(newRestAccr);
  while (rwcnt>0) begin
    MatRowDelete(newRestAccr,0);
    rwcnt = rwcnt - 1;
  end;
  rwcnt = MatRowCnt(RestAccr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RestAccr,i,RestAccrw);
    switch (RestAccrw.stp) begin
//jjbartab    
      case 1:
        splitqty = RestAccrw.SplitQty;
        if (splitqty!=0) then begin
          if (splitqty>RestAccrw.Quant) then begin
            Beep;
            goto LRestAccToolKeyPadSplit;
          end;
          RestAccrw.Quant = RestAccrw.Quant - splitqty;
          RestAccrw.SplitQty = blankval;
          if (RestAccrw.Quant!=0) then begin
            MatRowPut(RestAccr,i,RestAccrw);
          end else begin
            MatRowDelete(RestAccr,i);
            i = i - 1;
            rwcnt = rwcnt - 1;
          end;
          RestAccrw.Quant = splitqty;
          MatRowPut(newRestAccr,nrcnt,RestAccrw);
          nrcnt = nrcnt + 1;
        end;
//            case kInvoiceRowTypeChequePayment:
//            case kInvoiceRowTypeCashPayment:
//            case kInvoiceRowTypeCreditCardPayment:
//            case kInvoiceRowTypeGiftVoucherPayment:
    end;
  end;
  RestAccSumup(newRestAccr,"");
  if (RecordUpdate(RestAcc2r,RestAccr,true)!=0) then begin end;
//  SetRs(wn,Rs_normal);
  if (RecordStore(newRestAccr,false)==false) then begin end;
  nwn = OpenWindow("RestAccDClass",0,0,"","",newRestAccr);
  PutWindowRecord(wn,RestAccr);  
LRestAccToolKeyPadSplit:;
  RETURN;
END;  

global
procedure RestAccToolKeyPadAdd()
BEGIN
  Integer wn,rownr;
  record INVc INr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  Boolean testf;
  Integer i,rwcnt;
  record LocalMachineBlock LMb;
  string 255 printgroupcode,inwarning;

  if (UserCanAction("AllowUsingAddonBarTab",true)==false) then begin
    goto LRestAccToolKeyPadAdd;
  end;
  wn = CurWindow;
  if (WindowActiveField(wn)=="Quant") then begin testf = true; end;
  if (WindowActiveField(wn)=="Price") then begin testf = true; end;
  if (WindowActiveField(wn)=="Split") then begin testf = true; end;
  if (ReadMarkedRecord(wn,INr)) then begin 
  end;
  WindowDeactivateField(wn);
  if (testf) then begin
    rownr = WindowActiveRow(wn);
    if (rownr>=0) then begin
      GetWindowRecord(wn,RestAccr);  
      MatRowGet(RestAccr,rownr,RestAccrw);
      if (nonblank(INr.Code)) then begin
        if (INr.Code!=RestAccrw.ArtCode) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        RestAccrw.Quant = RestAccrw.Quant + 1;
        MatRowPut(RestAccr,rownr,RestAccrw);
        RestAccSumup(RestAccr,"");
        PutWindowRecord(wn,RestAccr);  
        DisplayRestAccItem(RestAccr,rownr);
        goto LRestAccToolKeyPadAdd;
      end;
    end;
  end;
  if (nonblank(INr.Code)) then begin
    GetWindowRecord(wn,RestAccr);  
    rwcnt = MatRowCnt(RestAccr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RestAccr,i,RestAccrw);
      if (blank(RestAccrw.ArtCode)) then begin
        rownr = i;
        goto L55RestAccToolKeyPadAdd;
      end;
    end;
    rownr = rwcnt;
L55RestAccToolKeyPadAdd:;  
    printgroupcode = GetWindowString(wn,"touchscreenwindowprintgroupcode");
    BlockLoad(LMb);
    ClearRow(RestAccr,RestAccrw,1);
    RestAccrw.ArtCode = INr.Code;
    MatRowPut(RestAccr,rownr,RestAccrw);
    if (RestAccVc_PasteArtCode(RestAccr,rownr,LMb,printgroupcode,0,1.00,inwarning)) then begin
      RestAccSumup(RestAccr,"");
      PutWindowRecord(wn,RestAccr);  
      DisplayRestAccItem(RestAccr,rownr);    
      WindowFieldGoto(wn,RestAccr,rownr,"Quant",true);
    end;
    if (nonblank(inwarning)) then begin
      MessageBox(0,inwarning);
    end;
  end;
LRestAccToolKeyPadAdd:;  
  RETURN;
END;  

global
procedure RestAccToolKeyPadSub()
BEGIN
  Integer wn,rownr;
  record INVc INr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  Boolean testf;
  
  if (UserCanAction("AllowUsingSubonBarTab",true)==false) then begin
    goto LRestAccToolKeyPadSub;
  end;
  wn = CurWindow;
  rownr = WindowActiveRow(wn);
  GetWindowRecord(wn,RestAccr);  
  switch (WindowActiveField(wn)) begin
//    case "Quant": WindowFieldGoto(wn,RestAccr,rownr,"Quant",true);
  end;
  if (WindowActiveField(wn)=="Quant") then begin testf = true; end;
  if (WindowActiveField(wn)=="Price") then begin testf = true; end;
  if (WindowActiveField(wn)=="Split") then begin testf = true; end;
  if (testf) then begin
    rownr = WindowActiveRow(wn);
    if (rownr>=0) then begin
      GetWindowRecord(wn,RestAccr);  
      MatRowGet(RestAccr,rownr,RestAccrw);
      if (ReadMarkedRecord(wn,INr)) then begin 
        if (INr.Code!=RestAccrw.ArtCode) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        RestAccrw.Quant = RestAccrw.Quant - 1;
        MatRowPut(RestAccr,rownr,RestAccrw);
        PutWindowRecord(wn,RestAccr);  
      end;
    end;
  end;
LRestAccToolKeyPadSub:;  
  RETURN;
END;  

global
function string 40 RestAccITDefault(string tstr)
BEGIN
  string 40 lsubset;
  record LocalMachineBlock LMr;
  record MainStockBlock MSb;
  record DIVc DIr;
  
//  lsubset = RestAccITDefaultRemote(tstr,CurMachineName);
  BlockLoad(LMr);
  if (nonblank(LMr.DefRestDisp)) then begin
    lsubset = LMr.DefRestDisp;
  end else begin
    BlockLoad(MSb);
    if (nonblank(MSb.StartClass)) then begin
      lsubset = MSb.StartClass;
    end else begin
      DIr.Code = "";
      if (LoopMain(DIr,1,true)) then begin
        lsubset = DIr.Code;
      end;
    end;
  end;
  RestAccITDefault = lsubset;
  RETURN;
END;  

global 
procedure slRestAccHAL(Integer wn)
BEGIN
  record RestAccVc RestAccr;
  Array string 255 anames;
  LongInt i,acnt;
  string 255 tstr;

  acnt = 0;
  ClearStringList(wn);
  slRestAccHALRemote(GetWindowSubset(wn),anames,acnt);
  for (i=0;i<acnt;i=i+1) begin
    tstr = anames[i];
    SetListString(wn,len(tstr),tstr,false);
  end;  
  PutWindowRecord(wn,RestAccr);
  RETURN;
END;          

procedure CloseAllErrorClassWindows()
begin
  Integer i;

  for (i=0;i<=100;i=i+1) begin
    if (GetWindowClass(i)=="ErrorClass") then begin
      CloseWindow(i);
    end;
  end;
  return;
end;

updating function Boolean RestAccLoginCloseAllWindows(Integer automsavewn)
BEGIN
  Boolean res;
  Integer i;
  record RestAccVc RestAccr;
  record RestAccVc oldRestAccr;
  LongInt oldbartab;
  
  res = true;
  for (i=0;i<=100;i=i+1) begin
    if (i==automsavewn) then begin
      GetWindowRecord(i,RestAccr);
      oldbartab = CheckIfOpenTabforTable(RestAccr);
      if (oldbartab!=-1) then begin
        CloseWindow(i);
        goto LRestAccLoginCloseAllWindows;
      end;  
      if (blank(RestAccr.CustCode)) and (MatRowCnt(RestAccr)==0) then begin
      end else begin
				if (WindowDoOK(i,0)==false) then begin
	        res = false;
	        CloseWindow(i);
	        CloseAllErrorClassWindows;
	        goto LRestAccLoginCloseAllWindows;
				end;
		  end;
/*
      RestAccSumup(RestAccr,"");
      switch (WindowState(i)) begin
        case 1: //Rs_insert
          if (RestAccCheckIfSaveAllowed(RestAccr,oldRestAccr,1,1)==0) then begin
            if (RecordStore(RestAccr,false)) then begin 
            end;
          end else begin
            res = false;
            goto LRestAccLoginCloseAllWindows;
          end;
        case 2: //Rs_update
          GetPrevWindowRecord(i,oldRestAccr);
          if (RestAccCheckIfSaveAllowed(RestAccr,oldRestAccr,2,1)==0) then begin
            if (RecordUpdate(oldRestAccr,RestAccr,true)==0) then begin 
            end;
          end else begin
            res = false;
            goto LRestAccLoginCloseAllWindows;
          end;
      end;
*/
      
      CloseWindow(i);
      goto LRestAccLoginCloseAllWindows;
    end;
  end;
LRestAccLoginCloseAllWindows:; 
  RestAccLoginCloseAllWindows = res; 
  RETURN;
END;          

global 
updating procedure RestAccCurUserTabs()
BEGIN
  Integer wn,nwn;
  record RestAccVc RestAccr;
  record RestAccVc RestAccrCur;
  record UserVc Userr;
  string 255 subset;
  Boolean OpenBrowsef;
  
  
  OpenBrowsef = false;
  Userr.Code = CurrentUser;
  if (FindTheUser(Userr)) then begin 
    switch (Userr.limitedAccess) begin
      case 1: subset = Userr.Code;
      case 2: subset = Userr.SalesGroup;
    end;
  
    wn = CurWindow;
    switch (WindowState(wn)) begin
      case Rs_insert:
        GetWindowRecord(wn,RestAccrCur);
        if (MatRowCnt(RestAccrCur)>0) then begin
          if (WindowDoOK(wn,0)) then begin
            UpdateBrowses("RestAccVc");
            CloseWindow(wn);
            OpenBrowsef = true;
          end;
        end else begin
          OpenBrowsef = true;
        end;
      case Rs_update:
        if (WindowDoOK(wn,0)) then begin
          OpenBrowsef = true;
        end;
      otherwise
        OpenBrowsef = true;
    end;
    if (OpenBrowsef) then begin 
      CloseWindow(wn);
      nwn = OpenWindow("RestAcc2LClass",0,0,subset,"",RestAccr);  
    end else begin
      beep;
    end;
  end else begin
    beep;
  end;
  RETURN;
END;

global 
procedure RestAccDClassTouchScreenAllInvoices()
BEGIN
  Integer wn,nwn,mwn;
  record RestAccVc RestAccr;

  wn = CurWindow;
  mwn = MotherWindow(wn);
  nwn = OpenWindow("RestAccAllLClass",1,mwn,"","",RestAccr);  
  RETURN;
END;

global
updating procedure RestAccToolLogin()
BEGIN
  record USRowVc USRowr;
  Integer wn,nwn;

  wn = CurWindow;
  WindowDeactivateField(wn);
  if (RestAccDClassAfterEditField(wn,WindowActiveField(wn),0,WindowActiveRow(wn),1)) then begin
  end;
  if (RestAccLoginCloseAllWindows(wn)) then begin
    LogoutUser(CurWindow,true);
//    OpenLoginWindow(0,"Login2Class",0);
  end;
  RETURN;
END;          


global
procedure RestAccToolUp()
BEGIN
  record RestAccVc RestAccr;
  record DIVc DIr;
  Array string 20 ac;
  string 255 lsubset;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,RestAccr);
  DIr.Code = GetWindowSubset(wn);
  if (ReadFirstMain(DIr,1,true)) then begin
    SplitEclass(DIr.DispGroups,ac);
    SetWindowSubset(wn,ac[0]);
    if (blank(GetWindowSubset(wn))) then begin
      lsubset = RestAccITDefault("");
      SetWindowSubset(wn,lsubset);      
    end;
  end;
  slRestAccHAL(wn);
  UpdateBrowses("INVc");
  PutWindowRecord(wn,RestAccr);
  RETURN;
END;  

global
procedure RestAccToolFileDesktop()
BEGIN
  record RestAccVc RestAccr;
  Integer wn;
  string 255 lsubset;

  wn = CurWindow;
  GetWindowRecord(wn,RestAccr);
  lsubset = RestAccITDefault("");
  SetWindowSubset(wn,lsubset);      
  slRestAccHAL(wn);
  UpdateBrowses("INVc");
  PutWindowRecord(wn,RestAccr);
  RETURN;
END;  

global 
procedure RestAccToolMasterW()
BEGIN
  Integer nwn;
  
  nwn = FIndWindow("MasterWClass");
  if (nwn!=0) then begin
    SelectWindow(nwn);
  end else begin
    nwn = OpenMasterWClass;
  end;
  RETURN;
END;

global 
procedure RestAccToolPasteSpec()
BEGIN
  Integer wn,nwn;
  
  wn = CurWindow;  
  nwn = OpenPasteWindow(wn,GetWindowPasteName(wn,WindowActiveField(wn)),"");
  RETURN;
END;

/* Added FormName on the Window description. I don't know what is different.
global
updating function Boolean RestAccDClassPrint(Integer wn,Boolean previewf)
BEGIN
  record RestAccVc RestAccr;
  Integer normalmode,tf;
  string 20 docname;

  normalmode = 0;//Rs_normal
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RestAccr);
  if ((WindowState(wn)==normalmode) and (previewf==false)) then begin
    RecordActionRestAcc_Print(RestAccr,"","RestAccForm",true);
  end else begin
    if (PrintDocument(RestAccr,"RestAccForm",true)) then begin end;
  end;
  RestAccDClassPrint = true;
  RETURN;
END;
*/

global
function Boolean RestAccDClassRLClick(Integer wn,Integer rownr)
BEGIN
  record INVc INr;

  RestAccToolKeyPadAdd;
  RestAccDClassRLClick = true;
  RETURN;
END;

global
updating procedure RestAccDClassOnOpenFromBrowse(Integer wn)
begin
  Integer i;
  record LocalMachineBlock LocalMachineRec;
 
  BlockLoad(LocalMachineRec);
  if (LocalMachineRec.OneBarTabWindow!=0) then begin
    for (i=1;i<=100;i=i+1) begin//should be MaxWindow      
      if ((i!=wn) and (i!=CurWindow)) then begin
        if (WindowValid(i)) then begin
          switch (GetWindowClass(i)) begin
            case "RestAccDClass":
              if (RestAccLoginCloseAllWindows(i)) then begin            
              end;
            case "BGWClass": ;
            case "MasterWClass":  ;
            otherwise
              CloseWindow(i);
          end;
        end;
      end;
    end;
  end;
  return;
end;

global
function Boolean RestAccDClassOnOpenWindow(Integer wn)
begin
  record LocalMachineBlock LMb;
  record RestPMBlock RestPMb;
  row RestPMBlock RestPMbrw;
  Integer i,rwcnt,pmcnt;
  record RestAccVc RestAccr;
  String 255 DispText;
  
  GetWindowRecord(wn,RestAccr);
  BlockLoad(RestPMb);
  BlockLoad(LMb);
  rwcnt = MatRowCnt(RestPMb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RestPMb,i,RestPMbrw);
    if (RestPMbrw.MachineName==LMb.LocalMachineCode) then begin
      pmcnt = pmcnt + 1;
    end;
  end;
  if (pmcnt>2) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RestPMb,i,RestPMbrw);
      if (RestPMbrw.MachineName==LMb.LocalMachineCode) then begin
        switch (RestPMbrw.rowstp) begin
          case kInvoiceRowTypeLoyaltyPointsPayment:
            PutWindowString(wn,"RestAccPMCodeCash",RestPMbrw.PMCode);
            PutWindowString(wn,"RestAccrowstpCash",RestPMbrw.rowstp);
          case kInvoiceRowTypeCashPayment:
            PutWindowString(wn,"RestAccPMCodeCash",RestPMbrw.PMCode);
            PutWindowString(wn,"RestAccrowstpCash",RestPMbrw.rowstp);
          case kInvoiceRowTypeCreditCardPayment:
            PutWindowString(wn,"RestAccPMCodeCC",RestPMbrw.PMCode);
            PutWindowString(wn,"RestAccrowstpCC",RestPMbrw.rowstp);
          case kInvoiceRowTypeGiftVoucherPayment:
            PutWindowString(wn,"RestAccPMCodeGVR",RestPMbrw.PMCode);
            PutWindowString(wn,"RestAccrowstpGVR",RestPMbrw.rowstp);
          case kInvoiceRowTypeChequePayment:
            PutWindowString(wn,"RestAccPMCodeCHQ",RestPMbrw.PMCode);
            PutWindowString(wn,"RestAccrowstpCHQ",RestPMbrw.rowstp);
        end;
      end;
    end;
  end; 
//  RestAccDClassGoToPage("1");
  RestAccDClassLevelTopExecute(false);
  RestAccDClass_RefreshStringList(wn,RestAccr);
  if (ClientMode==false) or (SingleUserMode) or (GuiType!=kGuiCocoa) then begin
    ReRunWindowDef(wn);
  end;
  DispText = "";
//  if (MatRowCnt(RestAccr)==0) then begin  // RestAccDClassOnOpenWindow is getting the previous record on NEW
//    DispText = USetStr(13464);
//  end else begin
//    DispText = USetStr(16016) & ValToString(RestAccr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0);
//  end;
  SetPOSWindowDisplay(DispText,"");
  RestAccDClassOnOpenWindow = false;
  return;
end;

function Boolean RestAccVc_RowAlreadyVoided(var record RestAccVc RestAccr,Integer rownr)
begin
  Boolean res;
  row RestAccVc RestAccrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(RestAccr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RestAccr,i,RestAccrw);
    if (RestAccrw.VoidedRowNr==rownr) then begin
      res = true;
      goto LRestAccVc_RowAlreadyVoided; 
    end;
  end;
LRestAccVc_RowAlreadyVoided:;  
  RestAccVc_RowAlreadyVoided = res;
  return;
end;

global
function Boolean RestAccDClassVoidRow(var record RestAccVc RestAccr,Integer arownr,string stdproblemcode,Boolean voidf)
begin
  Boolean res;
  row RestAccVc RestAccrw;
  record LocalMachineBlock LMb;
  Integer i,rwcnt,rownr;
  Boolean testf;
  
  rownr = arownr;
  res = false;
  MatRowGet(RestAccr,rownr,RestAccrw);
  if (RestAccrw.stp==kInvoiceRowTypeNormal) then begin
  if (voidf) then begin
    testf = true;
  end else begin
    if (RestAccrw.AlreadyPrinted==0) and (RestAccrw.AlreadyPrintedToKitchen==0) then begin
      testf = true;
    end;
  end;
  if (testf) then begin
    if (RestAccVc_RowAlreadyVoided(RestAccr,rownr)==false) then begin
      BlockLoad(LMb);
      RestAccrw.ovst = 1;
      RestAccrw.AlreadyPrintedToKitchen = 0;
      MatRowPut(RestAccr,rownr,RestAccrw);
      RestAccrw.ovst = 0;
      RestAccrw.stp = kInvoiceRowTypeVoid;
      RestAccrw.VoidedRowNr = rownr;
      if (IsDoingManagerOverride) then begin
        RestAccrw.VoidedSign = OriginalLogin;
      end else begin
        RestAccrw.VoidedSign = CurrentUser;
      end;
      RestAccrw.Quant = -RestAccrw.Quant;
      RestAccrw.StandProblemCode = stdproblemcode;
      MatRowInsert(RestAccr,MatRowCnt(RestAccr),RestAccrw);

      rwcnt = MatRowCnt(RestAccr);
      for (i=rownr+1;i<rwcnt;i=i+1) begin
        MatRowGet(RestAccr,i,RestAccrw);
        if (RestAccrw.Modifier!=0) then begin
          RestAccrw.ovst = 1;
          MatRowPut(RestAccr,i,RestAccrw);
          RestAccrw.ovst = 0;
          RestAccrw.stp = kInvoiceRowTypeVoid;
          RestAccrw.VoidedRowNr = i;
          RestAccrw.VoidedSign = CurrentUser;
          RestAccrw.Quant = -RestAccrw.Quant;
          RestAccrw.StandProblemCode = stdproblemcode;
          MatRowInsert(RestAccr,MatRowCnt(RestAccr),RestAccrw);
        end else begin
          i = rwcnt;
        end;
      end;
      res = true;
    end;
  end;
  end;
  RestAccDClassVoidRow = res;
  
  return;
end;

global
function Boolean RestAccDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  Boolean res;
  record LocalMachineBlock LMb;
  
  res = true;
  GetWindowRecord(wn,RestAccr);
  switch (WindowState(wn)) begin 
    case Rs_update:
      if (RestAccr.Closed<>0) then begin
        res = false;
        goto LRestAccDClassDeleteRowTest;
      end;
  end;
  MatRowGet(RestAccr,rownr,RestAccrw);
  if (RestAccrw.AlreadyPrinted!=0) or (RestAccrw.AlreadyPrintedToKitchen!=0) then begin
    res = false;
  end;  
LRestAccDClassDeleteRowTest:;  
  if (UserCanAction("AllowRestAccRowsDelete",true)==false) then begin
    res = false;
  end;
  if (res==false) then begin
    if (UserCanAction("AllowRestAccRowsVoid",false)) then begin
      if (RestAccDClassVoidRow(RestAccr,rownr,"",false)) then begin
        RestAccSumup(RestAccr,true);              
        RestAccr.ServCharge = GetServiceCharge(RestAccr,LMb,true);
        RestAccSumup(RestAccr,true);              
        PutWindowRecord(wn,RestAccr);    
        res = false;
      end;
    end;    
  end;
  RestAccDClassDeleteRowTest = res;
  return;
end;

global
function Boolean RestAccDClassFiscalFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record RestAccVc RestAccr;
  
  res = true;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,RestAccr);
    if (RestAccr.Closed!=0) then begin
      res = false;
    end;
  end;  
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,RestAccr);
    if (RestAccr.Closed!=0) then begin
      res = false;
    end;
  end;
  RestAccDClassFiscalFlagButtonAction = res;
  return;
end;

global
updating procedure PrintToFiscPrntRestAccDsm()
begin
  Integer wn;
  record RestAccVc RestAccr;
  record RestAccVc oldRestAccr;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,RestAccr);
    if (UserCanAction("PrintToFiscPrnt",true)) then begin
      if (RestAccr.FiscalFlag!=0) then begin
        RestAccVc_PrintToFiscalPrinter(RestAccr,true);
/*
        if (RestAccVc_PrintToFiscalControlUnit(RestAccr)) then begin
          PutWindowRecord(wn,RestAccr);
        end;
*/
      end else begin
/*
        if (RestAccVc_PrintToFiscalControlUnit(RestAccr)) then begin
          PutWindowRecord(wn,RestAccr);
        end;
*/
      end;
    end else begin
      MessageBox(1274,StringFromStringSet(3,"PrintToFiscPrnt"));
    end;
  end else begin
    Beep;
  end;
  return;
end;

global
procedure TestVatMatrixRestAccDsmExecute(LongInt arownr)
begin
  record TaxMatrixVc TMr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  longint nwn,wn,rowno;
  
  wn = CurWindow;
  GetWindowRecord(wn,RestAccr);
  rowno = arownr;
  if (rowno<0) then begin
    rowno = WindowActiveRow(wn);
  end;
  
  if (rowno>=0) then begin
    MatRowGet(RestAccr,rowno,RestAccrw);
    UnpackRowFieldMatrix(RestAccrw,"TaxMatrix",TMr);
  end else begin
    UnpackFieldMatrix(RestAccr,"TaxMatrix",TMr);
  end;
  
  nwn = OpenWindow("TaxMatrixVClass",0,wn,"","",TMr);
  PutWindowString(nwn,"TaxMatrixActiveRow",rowno);
  
  PutWindowRecord(nwn,TMr);
  PutWindowPrevRecord(nwn,TMr);
  SetWindowState(nwn,Rs_normal);
  
  return;
end;

global
procedure TestVatMatrixRestAccDsm()
begin
  TestVatMatrixRestAccDsmExecute(-1);
  return;
end;

global
procedure RestAccDClassTouchScreenOpenTaxMatrix()
begin
  TestVatMatrixRestAccDsmExecute(GetSelectedPOSItemRowIndex(CurWindow));
  return;
end;

global
function Boolean RestAccCashDClassIPBookVATButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  
  res = false;
  RestAccCashDClassIPBookVATButtonAction = res;
  return;
end;
