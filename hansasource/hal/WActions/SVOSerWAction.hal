external updating function boolean GSXLogin(string,string,string,var string,var string);
external function boolean GSXPartsLookup(string,var record SVOSerVc,var string);
remote updating function Boolean MakeActFromSVOSer(record SVOSerVc,var record ActVc);
remote updating function Boolean MakeSVOFromSVOSer(record SVOSerVc,var record SVOVc);
external procedure ActVcRecordDefClient(var record ActVc);

global
updating procedure ActFromSVOSerLsm()
BEGIN
  record ActVc Actr;
  record SVOSerVc SVOSerr;
  Integer wn,i,nwn;
  
  wn = CurWindow;  
  i = 1;
  if (GetRecordFromBrowse(SVOSerr,wn,i)) then begin // Only want to open for the first marked
    if (MakeActFromSVOSer(SVOSerr,Actr)) then begin
      nwn = OpenWindow("ActDClass",1,0,"","",Actr);
      SetRLink(wn,true);  
    end;
    i = i + 1;
  end;  
  UpdateBrowses("ActVc");
  RETURN;
END;

global
updating procedure ActFromSVOSerDsm()
begin
  record SVOSerVc SVOSerr;
  record ActVc Actr;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//normal
    GetWindowRecord(wn,SVOSerr);
    RecordNew(Actr);
    ActVcRecordDefClient(Actr);
    if (MakeActFromSVOSer(SVOSerr,Actr)) then begin
      nwn = OpenWindow("ActDClass",1,0,"","",Actr);
      SetRLink(wn,true);  
    end;
  end;
end;

global
updating procedure SVOSerVcCreateActivity()
begin
  ActFromSVOSerDsm;
end;

global
updating procedure SVOFromSVOSerLsm()
BEGIN
  record SVOVc SVOr;
  record SVOSerVc SVOSerr;
  Integer wn,i,nwn;
  
  wn = CurWindow;  
  i = 1;
  if (GetRecordFromBrowse(SVOSerr,wn,i)) then begin // Only want to open for the first marked
    if (MakeSVOFromSVOSer(SVOSerr,SVOr)) then begin
      nwn = OpenWindow("SVODClass",1,0,"","",SVOr);
      SetRLink(wn,true);  
    end;
    i = i + 1;
  end;  
  UpdateBrowses("SVOVc");
  RETURN;
END;

global
procedure SerHistSVOSerLsm()
begin
  record RcVc RepSpec;
  record SVOSerVc SVOSerr;
  record YearBlock YearRec;
  row YearBlock YearRecrw;
  Integer wn,i;
  
  BlockLoad(YearRec);
  wn = CurWindow;  
  i = 1;
  if (GetRecordFromBrowse(SVOSerr,wn,i)) then begin // Only want to open for the first marked
    ReportDefaults(RepSpec,"SerialNrRClass");  
    RepSpec.Media = mtScreen;
    RepSpec.f1 = SVOSerr.ItemCode;
    RepSpec.f2 = SVOSerr.SerialNr;
    RepSpec.repname = "SERSerialRn";
    if (MatRowCnt(YearRec)>0) then begin
      MatRowGet(YearRec,0,YearRecrw);
      RepSpec.sStartDate = YearRecrw.StartDate;
    end;
    RunReport(RepSpec,0);
  end;  
  return;
end;

global
procedure SerHistSVOSerDsm()
begin
  record RcVc RepSpec;
  record SVOSerVc SVOSerr;
  record YearBlock YearRec;
  row YearBlock YearRecrw;
  Integer wn;
  
  BlockLoad(YearRec);
  wn = CurWindow;  
  DeselectWindow(wn,false);  
  GetWindowRecord(wn,SVOSerr);
  ReportDefaults(RepSpec,"SerialNrRClass");  
  RepSpec.Media = mtScreen;
  RepSpec.f1 = SVOSerr.ItemCode;
  RepSpec.f2 = SVOSerr.SerialNr;
  RepSpec.repname = "SERSerialRn";
  if (MatRowCnt(YearRec)>0) then begin
    MatRowGet(YearRec,0,YearRecrw);
    RepSpec.sStartDate = YearRecrw.StartDate;
  end;
  RunReport(RepSpec,0);
  return;
end;

function Boolean SVOSerDClassItemCodeEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record SVOSerVc SVOSerr;
  record INVc INr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,SVOSerr);
    INr.Code = SVOSerr.ItemCode;
    if (ReadFirstMain(INr,1,true)) then begin
      SVOSerr.ItemName = INr.Name;
      PutWindowRecord(wn,SVOSerr);    
    end;
  end;
  SVOSerDClassItemCodeEFAfter = res;
  RETURN;
END;

function Boolean SVOSerDClassCustCodeEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record SVOSerVc SVOSerr;
  record CUVc CUr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,SVOSerr);
    CUr.Code = SVOSerr.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      SVOSerr.CustName = CUr.Name;
      PutWindowRecord(wn,SVOSerr);    
    end;
  end;
  SVOSerDClassCustCodeEFAfter = res;
  RETURN;
END;

global
function Boolean SVOSerDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "ItemCode": res = SVOSerDClassItemCodeEFAfter(wn,rownr,changed);
    case "CustCode": res = SVOSerDClassCustCodeEFAfter(wn,rownr,changed);
  end;
  SVOSerDClassAfterEditField = res;
  RETURN;
END;

global
procedure OpenLinkSVOSerDsm()
begin
  record SVOSerVc SVOSerr;
  string 255 fieldname;
  integer wn;
  
  wn = CurWindow;

  fieldname = WindowActiveField(wn);
  switch (fieldname) begin
    case "ImageURL":
    case "ExplodedViewURL":
    case "ManualURL":
    otherwise
      goto LOpenLinkSVOSerDsm;
  end;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,SVOSerr);
  
  switch (fieldname) begin
    case "ImageURL": OpenWebBrowser(SVOSerr.ImageURL);
    case "ExplodedViewURL": OpenWebBrowser(SVOSerr.ExplodedViewURL);
    case "ManualURL": OpenWebBrowser(SVOSerr.ManualURL);
  end;

LOpenLinkSVOSerDsm:;
  return;
end;

global
updating procedure PartsLookupSVOSerDsm()
begin
  Integer wn;
  record GSXSettingsBlock GSb;
  record SVOSerVc SVOSerr;
  string 255 sessionID,errormsg;
  
  wn = CurWindow;
  DeselectWindow(wn,false);  
  GetWindowRecord(wn,SVOSerr);
  
  BlockLoad(GSb);
  if (GSXLogin(GSb.AppleID,GSb.Password,GSb.AccountNo,sessionID,errormsg)) then begin
    if (GSXPartsLookup(sessionID,SVOSerr,errormsg)) then begin
      PutWindowRecord(wn,SVOSerr);
      WindowFieldGoto(wn,SVOSerr,0,"PartNumber",true);
    end;
  end;
  
  if (nonblank(errormsg)) then begin
    MessageBox(0,errormsg);
  end;
  
  return;
end;