external function boolean ValidateIBAN(string);
external procedure AutomatedSalesOrderly(string);
remote updating procedure CreateCUObject(var record CUVc,Boolean);
remote procedure CUDClassOnOpenWindowRemote(record CUVc,var Integer,var string,var string);
remote procedure CUVc_PasteDelCountryCode(var record CUVc,string);
remote function Boolean TransactionForCustomerExists(string);
remote procedure CUDCLass_BIChart_Tool(record CUVc,var val,var Array val,var Array Integer);
remote procedure FindCurMailboxName(var string);
external procedure CUVc_PasteInvAddr(var record CUVc,Integer);
external procedure ActVcRecordDefClient(var record ActVc);
external procedure ReadTXServiceReply(var record TXServiceReplyVc,var Area,Boolean);
external procedure ReverseString(string,var string);
external function LongInt NumberOfJunkLeadingCharactersInArea(Area);
external function Boolean IsDigit(string);
external procedure PasteFromTRObjS(Integer,Integer);
external procedure SendTextParameter(string,var Area);
external procedure SendFunctionVersion(string,string,var Area);
external updating procedure RecordActionProfile_Print(var record CUVc,string,Boolean);
remote updating function Boolean NewContactCUDsmRemote(record CUVc,var record CUVc); // Must be remote
external function Boolean FindCustomerRelation(string,string,var record CUVc);
external function Integer CountObjects(string);
external procedure StripEndingSpaces(var string);
external updating function Boolean SendServiceRequest(string,Boolean,area,var Area);
external function Integer XmlGetInt(var xml,string);
remote updating procedure UpdContactAddrCUDsmRemote(record CUVc);
remote function Boolean MakeMailFromCU(record CUVc,var record MailVc,Boolean);
external function Boolean InterNetAddrTest(string);
remote function Boolean CurUserHasMailbox(var string);
remote function Boolean CUVc_PasteRegNr2(var record CUVc);
remote function Boolean CUVc_PasteSalesMan(var record CUVc);
remote function Boolean CUVc_PasteName(var record CUVc);
remote updating function Boolean MakeActFromCU(record CUVc,var record ActVc,Boolean);
remote procedure SetupCustPS2Rn(string,var record RcVc);
remote function Boolean PasteCustInQT(var record QTVc,string,string,var string,Boolean);
external procedure FindUserMailboxName(string,var string,var string);
external function Integer GetCodeFromCompanyCode(Integer);
remote procedure CUVc_PasteCountryCode(var record CUVc,string);
forward updating procedure UpdateCUAddr(integer,string,string,integer,Integer);

function Boolean CUDClassNationalityEFAfter(Integer wn,Integer changed)
begin
  Boolean res;
  record CUVc CUr;
  record CountryVc Countryr;

  if (changed!=0) then begin
    GetWindowRecord(wn,CUr);
    Countryr.Code = CUr.Nationality;
    if (ReadFirstMain(Countryr,1,true)) then begin
      CUr.Nationality = Countryr.Nationality;
      if (blank(CUr.Nationality)) then begin
        CUr.Nationality = Countryr.Code;
      end;
      PutWindowRecord(wn,CUr);
    end;
  end;
  CUDClassNationalityEFAfter = res;
  return;
end;

// Perhaps this should no longer be called.
function Boolean CUDClassPersonEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  record CUVc CUr;
  record CUVc ContactCUr;

  if (changed!=0) then begin
    GetWindowRecord(wn,CUr);
    if (FindCustomerRelation(CUr.Code,CUr.Person,ContactCUr)) then begin
      CUr.Mobile = ContactCUr.Mobile;
      PutWindowRecord(wn,CUr);
    end;
  end;
  CUDClassPersonEFAfter = res;
  RETURN;
END;

function Boolean CUDClassNameEFAfter(Integer wn,Integer changed)
begin
  Boolean res;
  record CUVc CUr;

  if (changed!=0) then begin
    GetWindowRecord(wn,CUr);
    if (CUVc_PasteName(CUr)) then begin
      PutWindowRecord(wn,CUr);
    end else begin
//      MessageBox(1547,""); in record check now
    end;
  end;
  CUDClassNameEFAfter = res;
  RETURN;
END;

function Boolean CUDClassSalesManEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  record CUVc CUr;

  if (changed!=0) then begin
    GetWindowRecord(wn,CUr);
    if (CUVc_PasteSalesMan(CUr)) then begin
      PutWindowRecord(wn,CUr);
    end else begin
      Beep;
    end;
  end;
  CUDClassSalesManEFAfter = res;
  RETURN;
END;

function Boolean CUDClassRegNr2EFAfter(Integer wn,Integer changed)
begin
  Boolean res;
  record CUVc CUr;

  if (changed!=0) then begin
    GetWindowRecord(wn,CUr);
    if (CUVc_PasteRegNr2(CUr)) then begin
      PutWindowRecord(wn,CUr);
    end else begin
      Beep;
    end;
  end;
  CUDClassRegNr2EFAfter = res;
  return;
end;

function Boolean CUDClassInvAddrEFAfter(Integer wn,Integer changed,Integer addrfield)
begin
  Boolean res;
  record CUVc CUr;

  if (changed!=0) then begin
    GetWindowRecord(wn,CUr);
    CUVc_PasteInvAddr(CUr,addrfield);
    PutWindowRecord(wn,CUr);    
  end;
  CUDClassInvAddrEFAfter = res;
  return;
end;

function Boolean CUDClassCountryCodeEFAfter(Integer wn,Integer changed)
begin
  Boolean res;
  record CUVc CUr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,CUr);
    CUVc_PasteCountryCode(CUr,WindEFstr(wn));
    PutWindowRecord(wn,CUr);
  end;
  CUDClassCountryCodeEFAfter = res;
  return;
end;

function Boolean CUDClassDelCountryCodeEFAfter(Integer wn,Integer changed)
begin
  Boolean res;
  record CUVc CUr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,CUr);
    CUVc_PasteDelCountryCode(CUr,WindEFstr(wn));
    PutWindowRecord(wn,CUr);
  end;
  CUDClassDelCountryCodeEFAfter = res;
  return;
end;

function Boolean CUDClassIBANCodeCodeEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record CUVc CUr;
  
  if (changedf) then begin
    GetWindowRecord(wn,CUr);
    if (ValidateIBAN(CUr.IBANCode)==false) then begin
      MessageBox(27312,0);
    end;
  end;
  CUDClassIBANCodeCodeEFAfter = res;
  return;
end;

global
function Boolean CUDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "RegNr2": res = CUDClassRegNr2EFAfter(wn,changed);
    case "SalesMan": res = CUDClassSalesManEFAfter(wn,fn,rownr,changed);
    case "Name": res = CUDClassNameEFAfter(wn,changed);
    case "Person": res = CUDClassPersonEFAfter(wn,fn,rownr,changed);
    case "Nationality": res = CUDClassNationalityEFAfter(wn,changed);
    case "InvAddr0": res = CUDClassInvAddrEFAfter(wn,changed,0);
    case "InvAddr1": res = CUDClassInvAddrEFAfter(wn,changed,1);
    case "InvAddr2": res = CUDClassInvAddrEFAfter(wn,changed,2);
    case "InvAddr3": res = CUDClassInvAddrEFAfter(wn,changed,3);
    case "InvAddr4": res = CUDClassInvAddrEFAfter(wn,changed,4);
    case "CountryCode": res = CUDClassCountryCodeEFAfter(wn,changed);
    case "DelCountry": res = CUDClassDelCountryCodeEFAfter(wn,changed);
    case "IBANCode": res = CUDClassIBANCodeCodeEFAfter(wn,changed!=0);
  end;
  CUDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean CUGuestDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = CUDClassAfterEditField(wn,fieldname,fn,rownr,changed);
  CUGuestDClassAfterEditField = res;
  return;
end;

global
procedure CUDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin // Temporary fix for the RecordList
  saveOK = true;
  return;
end;
 
global
function Boolean CUDClassListDblClick(Integer wn)
begin
  Integer mwn;
  record CUVc CUr;
  record ContactRelVc ContactRelr;
  
  if (WindowState(wn)==0) then begin
    if (ReadMarkedRecord(wn,ContactRelr)) then begin
      CUr.Code = ContactRelr.ContactCode;
      if (ReadFirstMain(CUr,1,true)) then begin
        mwn = OpenWindow("CUDClass",1,0,"","",CUr);
      end;
    end;
  end;
  CUDClassListDblClick = true;
  return;
end;

global
procedure CUEmployeeDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin // Temporary fix for the RecordList
  saveOK = true;
  return;
end;

global
function Boolean CUEmployeeDClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  record CUVc CUr;
  record ContactRelVc ContactRelr;
  
  if (WindowState(wn)==0) then begin
    if (ReadMarkedRecord(wn,ContactRelr)) then begin
      CUr.Code = ContactRelr.ContactCode;
      if (ReadFirstMain(CUr,1,true)) then begin
        mwn = OpenWindow("CUDClass",1,0,"","",CUr);
      end;
    end;
  end;
  CUEmployeeDClassOnOKWindow = true;
  return;
end;

global
function Boolean CUEmployeeDClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record CUVc CUr;
  
  GetWindowRecord(wn,CUr);
  if (nonblank(CUr.Code)) then begin
    subsetname = CUr.Code;
  end else begin
    subsetname = chr(0);
  end;
  CUEmployeeDClassUpdateWindowSubset = true;
  return;
end;

global
updating procedure NewContactCUDsm()
begin
  record CUVc CUr;
  record CUVc ContactCUr;
  record ContactRelVc ContactRelr;
  Integer wn,nwn;
  string 200 tstr;
  
  wn = CurWindow;
  switch (WindowState(wn)) begin
    case Rs_insert:
    otherwise
      GetWindowRecord(wn,CUr);
      if (NewContactCUDsmRemote(CUr,ContactCUr)) then begin
        nwn = OpenWindow("CUDClass",1,0,"","",ContactCUr);  
        WindowFieldGoto(nwn,ContactCUr,-1,"Name",true);
        UpdateBrowses("CUVc");
        UpdateBrowses("ContactRelVc");
      end;
  end;
  return;
end;

global
updating procedure DelContactCUDsm()
begin
  record ContactRelVc ContactRelr;
  record ContactRelVc oldContactRelr;
  Integer wn,nwn;
  string 200 tstr;
  
  wn = CurWindow;
  if (ReadMarkedRecord(wn,ContactRelr)) then begin
    RecordCopy(oldContactRelr,ContactRelr);
    ContactRelr.Invalid = 1;
    RecordUpdate(oldContactRelr,ContactRelr,0);
    UpdateBrowses("CUVc");
    UpdateBrowses("ContactRelVc");
  end;
  return;
end;

global
procedure EditContactCUDsm()
begin
  record ContactRelVc ContactRelr;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (ReadMarkedRecord(wn,ContactRelr)) then begin
    nwn = OpenWindow("ContactRel2DClass",0,0,"","",ContactRelr);  
  end;
  return;
end;


/*
global
procedure NewGuestCUDsm()
BEGIN
  record CUVc CUr;
  record CUVc Profiler;
  Integer wn,nwn;
  
  wn = CurWindow;
  GetWindowRecord(wn,CUr);
  RecordNew(Profiler);
//  Profiler.Code = CUr.Code;, what if several guests for corporate?
  Profiler.Addr0 = CUr.InvAddr0;
  Profiler.Addr1 = CUr.InvAddr1;
  Profiler.Addr2 = CUr.InvAddr2;
  Profiler.Addr3 = CUr.InvAddr3;
  Profiler.Addr4 = CUr.InvAddr4;
  Profiler.Phone = CUr.Phone;
  Profiler.Fax = CUr.Fax;
  Profiler.Email = CUr.eMail;
  nwn = OpenWindow("ProfileDClass",0,0,"","",Profiler);  
  RETURN;
END;
*/
global
updating procedure NewActCUDsm()
BEGIN
  record CUVc CUr;
  record ActVc Actr;
  Integer wn,nwn;
  
  wn = CurWindow;
  GetWindowRecord(wn,CUr);  
  if (WindowState(wn)!=Rs_normal) then begin
    WindowDoOK(wn,0);
  end;
  RecordNew(Actr);
  ActVcRecordDefClient(Actr);
  if (MakeActFromCU(CUr,Actr,true)) then begin
    nwn = OpenWindow("ActDClass",1,0,"","",Actr);
    WindowFieldGoto(nwn,Actr,-1,"Comment",true);
    SetRLink(wn,true);  
  end;
  RETURN;
END;

global
updating procedure CUVcCreateActivity()
begin
  NewActCUDsm;
  return;
end;

global
procedure NewMailCUDsm()
BEGIN
  record CUVc CUr;
  record MailVc Mailr;
  Integer wn,nwn;
  
  wn = CurWindow;
  GetWindowRecord(wn,CUr);
  if (MakeMailFromCU(CUr,Mailr,true)) then begin
    nwn = OpenWindow("MailDClass",1,0,"","",Mailr);  
  end;
  RETURN;
END;

global
updating procedure NewActCULsm()
BEGIN
  record CUVc CUr;
  record ActVc Actr;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (ReadMarkedRecord(wn,CUr)) then begin
    RecordNew(Actr);
    ActVcRecordDefClient(Actr);
    if (MakeActFromCU(CUr,Actr,true)) then begin
      nwn = OpenWindow("ActDClass",1,0,"","",Actr);  
      SetRLink(wn,true);  
    end;
  end;
  RETURN;
END;

global
updating procedure RandomPassMailCUDsm()
begin
  record CUVc CUr;
  record CUVc oldCUr;
  Integer wn,nwn;
  record MailVc Mailr;
  row MailVc marw;
  string 255 tstr;
  Integer mwn;
  LongInt newpasswd;
  record MailSettingsBlock MSb;
  
  wn = CurWindow;
  if (WindowState(wn)!=0) then begin//Rs_normal
    goto LRandomPassMailCUDsm;
  end;
  BlockLoad(MSb);
  GetWindowRecord(wn,CUr);
  GetPrevWindowRecord(wn,oldCUr);
  FindCurMailboxName(tstr);
//  if ((CurUserHasMailbox(tstr)==false) or (blank(CUr.eMail)) or (WindowState(wn)!=0)) then begin
  if ((blank(tstr)) or (blank(CUr.eMail)) or (WindowState(wn)!=0)) then begin
    Beep; // should be nice error message
    goto LRandomPassMailCUDsm;
  end;
  if (InterNetAddrTest(CUr.eMail)==false) then begin
    MessageBox(1353,CUr.eMail);
    goto LRandomPassMailCUDsm;
  end;
  mwn = MotherWindow(wn);
  RecordNew(Mailr);
  Mailr.HtmlFlag = MSb.UseHTMLMail;
  ClearRow(Mailr,marw,1);
  marw.RowTyp = kMailRowTypeFrom;
  marw.AddrCode = tstr;
  MatRowPut(Mailr,0,marw);
  ClearRow(Mailr,marw,1);
  marw.RowTyp = 0;
  marw.AddrCode = CUr.eMail;
  MatRowPut(Mailr,1,marw);
  newpasswd = Random(11111,91111);
  tstr = newpasswd;
  CUr.Password = CalcPassword(tstr,CUr.Code,0);
  if (RecordUpdate(oldCUr,CUr,true)==0) then begin
  end;
  Mailr.Header = USetStr(1955);
  Mailr.Header = Mailr.Header & " ";
  Mailr.Header = Mailr.Header & tstr;
//  PutWindowRecord(wn,CUr);/ this causes Record has changed message
  if (RecordStore(Mailr,false)) then begin end;
  nwn = OpenWindow("MailDClass",1,0,"","",Mailr);
  SetRLink(wn,true);
LRandomPassMailCUDsm:;
  return;
end;

global
procedure CUStatusCUDsm()
begin
  record CUVc CUr;
  record RcVc RepSpec;
  Integer wn;
  Boolean testf;

  wn = CurWindow;
  GetWindowRecord(wn,CUr);
  testf = false;
  if (CUr.CUType!=0) then begin
    testf = true;
  end;
  if (CUr.DealerType!=0) then begin
    testf = true;
  end;
  if (CUr.GuestType!=0) then begin
    testf = true;
  end;
  if (CUr.EmployeeType!=0) then begin
    testf = true;
  end;
  if (CUr.CUType==0) and (CUr.VEType==0) and (CUr.GuestType==0) and (CUr.DealerType==0) and (CUr.EmployeeType==0) then begin
    testf = true;
  end;
  
  if (testf) then begin
    SetupCustPS2Rn(CUr.Code,RepSpec);
    RunReport(RepSpec,0);
  end;
  return;
end;

global
procedure ChangePasswdCULsm()
BEGIN
  record CUVc CUr;
  record RcVc RepSpec;
  Integer wn,nwn;

  if (UserCanAction("AllowPasswdChanging",true)) then begin
    wn = CurWindow;
    if (ReadMarkedRecord(wn,CUr)) then begin
      nwn = OpenWindow("ChngePasswordNoOldClass",1,0,"","",RepSpec);
      DeselectWindow(nwn,false);
      RepSpec.ObjStr = CUr.Code;
      RepSpec.AccStr = "";
      RepSpec.FirstAcc = "";
      RepSpec.LastAcc = "";
      RepSpec.Notation = 1;
      RepSpec.ArtMode = 1;
      RepSpec.f1 = "DontQuiteOnCancel";
      PutWindowRecord(nwn,RepSpec);
      SelectWindow(nwn);
    end;
  end;
  RETURN;
END;

global
procedure ChangePasswdCUDsm()
BEGIN
  record CUVc CUr;
  record RcVc RepSpec;
  Integer wn,nwn;

  if (UserCanAction("AllowPasswdChanging",true)) then begin
    wn = CurWindow;
    GetWindowRecord(wn,CUr);
    nwn = OpenWindow("ChngePasswordNoOldClass",1,0,"","",RepSpec);
    DeselectWindow(nwn,false);
    RepSpec.ObjStr = CUr.Code;
    RepSpec.AccStr = "";
    RepSpec.FirstAcc = "";
    RepSpec.LastAcc = "";
    RepSpec.Notation = 1;
    RepSpec.ArtMode = 1;
    RepSpec.f1 = "DontQuiteOnCancel";
    PutWindowRecord(nwn,RepSpec);
    SelectWindow(nwn);
  end;
  RETURN;
END;


global
procedure PrintCUD(Integer wn,Boolean previewf)
BEGIN
  record CUVc CUr;
  record RcVc RepSpec;
  
  GetWindowRecord(wn,CUr);
  RepSpec.repname = "CustRn";
  if (previewf) then begin
    RepSpec.Media = mtScreen;
  end else begin
    RepSpec.Media = mtPrinter;
  end;
  RepSpec.JobDf = 0;
  RepSpec.f1 = CUr.Code;
  RepSpec.flags[2] = 1;
  if (CUr.CUType==0) and (CUr.VEType!=0) then begin
    RepSpec.repname = "VERn";
    if (previewf) then begin
      RepSpec.Media = mtScreen;
    end else begin
      RepSpec.Media = mtPrinter;
    end;
    RepSpec.JobDf = 0;
    RepSpec.f1 = CUr.Code;
  end;
  RunReport(RepSpec,0);
  RETURN;
END;

global
procedure CUStatusCULsm()
BEGIN
  record CUVc CUr;
  record RcVc RepSpec;
  Integer wn,i;
  string 20 firstcu;
  Boolean testf;
  Boolean foundf;
  
  wn = CurWindow;
  i = 1;
  while (GetRecordFromBrowse(CUr,wn,i)) begin
    foundf = true;
    if (i==1) then begin
      firstcu = CUr.Code;
    end;
    i = i + 1;
  end;
  if (foundf==false) then begin
    goto LCUStatusCULsm;
  end;
  SetupCustPS2Rn(firstcu,RepSpec);
  if (firstcu==RepSpec.f1) then begin
    if (nonblank(RepSpec.f1)) then begin
      RepSpec.f1 = RepSpec.f1 & ":";
    end;
    RepSpec.f1 = RepSpec.f1 & CUr.Code;  
  end;
  testf = true;
  if (firstcu==CUr.Code) then begin
    if (CUr.CUType==0) then begin testf = false; end;
    if (CUr.CUType==0) and (CUr.VEType==0) and (CUr.GuestType==0) and (CUr.DealerType==0) and (CUr.EmployeeType==0) then begin
      testf = true;
    end;
  end;
  RepSpec.Media = mtScreen;
  if (nonblank(RepSpec.f1)) then begin
    RunReport(RepSpec,0);
  end;
LCUStatusCULsm:;  
  RETURN;
END;

global
procedure CUStatus()
begin
  record CUVc CUr;
  record RcVc RepSpec;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,CUr);
  RepSpec.repname = "CustPSRn";
  RepSpec.f1 = CUr.Code;
  RepSpec.Media = mtScreen;    
  RunReport(RepSpec,0);
  return;
end;

global
procedure CUStatusCUSsm()
BEGIN
  record CUVc CUr;
  record RcVc RepSpec;
  Integer wn,i;
  string 20 firstcu;
  
  wn = CurWindow;
  i = 1;
  while (GetRecordFromBrowse(CUr,wn,i)) begin
    if (i==1) then begin
      firstcu = CUr.Code;
    end;
    i = i + 1;
  end;  
  SetupCustPS2Rn(firstcu,RepSpec);
  if (nonblank(RepSpec.f1)) then begin
    RepSpec.f1 = RepSpec.f1 & ":";
  end;
  RepSpec.f1 = RepSpec.f1 & CUr.Code;  
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);
  RETURN;
END;

/* For FirstContact */
global
procedure DoNewQuote()
begin
  record CUVc CUr;
  record QTVc QTr;
  string 30 cucode;
  string 255 warntext;
  Integer nwn;
  
  cucode = "";
  GetWindowRecord(CurWindow,CUr);
  RecordNew(QTr);
  QTr.CustCode = CUr.Code;
  if (PasteCustInQT(QTr,CUr.Code,"",warntext,false)) then begin
    nwn = OpenWindow("QTDClass",1,0,"","",QTr);
    if (nonblank(warntext)) then begin
      MessageBox(0,warntext);
    end;
//    PutWindowRecord(nwn,QTr);
  end;
  return;
end;

global
procedure DoNewMail()
begin
  record CUVc CUr;
  record MailVc Mailr;
  row MailVc marw;
  string 255 mailboxnr,tstr;
  Integer nwn;
  
  GetWindowRecord(CurWindow,CUr);
  FindUserMailboxName(CurrentUser,mailboxnr,tstr);
  if ((nonblank(mailboxnr)) and (nonblank(tstr)) and (nonblank(CUr.eMail))) then begin
    RecordNew(Mailr);
    marw.RowTyp = 1;
    marw.AddrCode = tstr;
    MatRowPut(Mailr,0,marw);
    marw.RowTyp = 0;
    marw.AddrCode = CUr.eMail;
    MatRowPut(Mailr,1,marw);
    nwn = OpenWindow("MailDClass",1,0,"","",Mailr);
//    PutWindowRecord(nwn,Mailr);
  end;
  return;
end;

global
function Boolean CUDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record CUVc CUr;
  
  res = true;

  switch (fieldname) begin
    case "Code": 
      switch (wnst) begin
        case Rs_update: res = false;
        otherwise
             if (UserCanAction("AllowCUSerNrChange",true)==false) then begin res = false; end;
      end;
    case "CreditLimit":
      switch (wnst) begin
        case Rs_insert:
          if (UserCanAction("AllowChangeCreditLimit",true)==false) then begin
            res = false;
          end;       
        case Rs_update:
          if (UserCanAction("AllowChangeCreditLimit",true)==false) then begin
            res = false;
          end;       
      end;
    case "Name":
      if (HasLocalization("PRT")) then begin
        GetWindowRecord(wn,CUr);
        if (CUr.VATNr=="999999990") then begin
          if (TransactionForCustomerExists(CUr.Code)) then begin
            res = false;
            MessageBox(1391,"");
          end;
        end;
      end;
    case "CreditLimitDays":
      switch (wnst) begin
        case Rs_insert:
          if (UserCanAction("AllowChangeCreditLimitDays",true)==false) then begin
            res = false;
          end;       
        case Rs_update:
          if (UserCanAction("AllowChangeCreditLimitDays",true)==false) then begin
            res = false;
          end;       
      end;
    case "VECreditLimitDays":
      switch (wnst) begin
        case Rs_insert:
          if (UserCanAction("AllowChangeCreditLimitDays",true)==false) then begin
            res = false;
          end;       
        case Rs_update:
          if (UserCanAction("AllowChangeCreditLimitDays",true)==false) then begin
            res = false;
          end;       
      end;
    case "SalesMan": 
      if (UserCanAction("AllowSalesmanChangeonContact",true)==false) then begin
        res = false;
      end;
    case "SalesGroup": 
      if (UserCanAction("AllowSalesmanChangeonContact",true)==false) then begin
        res = false;
      end;
  end;

  CUDClassActiveEditField = res;
  return;
end;

global
procedure DropCULClassOnQTLClass(Integer frwn,Integer town)
BEGIN
  record CUVc CUr;
  record QTVc QTr;
  Integer r,nwn;
  string 255 warntext;
  
  if ((GetWindowFileName(frwn)=="CUVc") and (GetWindowFileName(town)=="QTVc")) then begin
    if (CurUserHasMailbox(warntext)) then begin
    if (ReadMarkedRecord(frwn,CUr)) then begin
      if ((CUr.blockedFlag==0) and (IsRecordLocked(CUr)==false)) then begin
        RecordNew(QTr);
        nwn = OpenWindow("QTDClass",1,0,"","",QTr);  
//        GetWindowRecord(QTr,nwn);
        QTr.CustCode = CUr.Code;        
        if (PasteCustInQT(QTr,CUr.Code,"",warntext,true)) then begin
          PutWIndowRecord(nwn,QTr);
          if (nonblank(warntext)) then begin
            MessageBox(0,warntext);          
          end;
        end else begin
          MessageBox(22061,"");
        end;
      end;    
    end;
    end;
  end;  
  RETURN;
END;

global
procedure DropCULClassOnMailLClass(Integer frwn,Integer town)
BEGIN
  record CUVc CUr;
  record MailVc Mailr;
  row MailVc MArw;
  Integer r,nwn;
  string 255 warntext;
  Integer i,rwcnt;
  
  if ((GetWindowFileName(frwn)=="CUVc") and (GetWindowFileName(town)=="MailVc")) then begin
    if (CurUserHasMailbox(warntext)) then begin
      RecordNew(Mailr);
      nwn = OpenWindow("MailDClass",1,0,"","",Mailr);  
      rwcnt = MatRowCnt(Mailr);
      i = 1;
      while (GetRecordFromBrowse(CUr,frwn,i)) begin
        if ((CUr.blockedFlag==0) and (IsRecordLocked(CUr)==false)) then begin
          if (nonblank(CUr.eMail)) then begin
            MArw.RowTyp = 0;
            MArw.AddrCode = CUr.eMail;
            MatRowPut(Mailr,rwcnt,MArw);        
            rwcnt = rwcnt + 1;
          end;
        end;
        i = i + 1;
      end;          
      PutWindowRecord(nwn,Mailr)
    end;
  end;  
  RETURN;
END;

function string 40 CUDClassSpecPasteNameInvAddr(Integer wn,Integer addrfield)
begin
  string 255 res;
  record CUVc CUr;
  record CUUserLabelBlock CUUserLb;
  
  BlockLoad(CUUserLb);
  switch (CUUserLb.CountryAddrLine) begin
    case kCountryAddrLineUserAddr0:
      if (addrfield==0) then begin
        res = "CountrySClass";
      end;
    case kCountryAddrLineUserAddr1:
      if (addrfield==1) then begin
        res = "CountrySClass";
      end;
    case kCountryAddrLineUserAddr2:
      if (addrfield==2) then begin
        res = "CountrySClass";
      end;
    case kCountryAddrLineUserAddr3:
      if (addrfield==3) then begin
        res = "CountrySClass";
      end;
    case kCountryAddrLineUserAddr4:
      if (addrfield==4) then begin
        res = "CountrySClass";
      end;
  end;
  switch (CUUserLb.DistrictAddrLine) begin
    case kCountryAddrLineUserAddr0:
      if (addrfield==0) then begin
        res = "DistrictSClass";
      end;
    case kCountryAddrLineUserAddr1:
      if (addrfield==1) then begin
        res = "DistrictSClass";
      end;
    case kCountryAddrLineUserAddr2:
      if (addrfield==2) then begin
        res = "DistrictSClass";
      end;
    case kCountryAddrLineUserAddr3:
      if (addrfield==3) then begin
        res = "DistrictSClass";
      end;
    case kCountryAddrLineUserAddr4:
      if (addrfield==4) then begin
        res = "DistrictSClass";
      end;
  end;
  switch (CUUserLb.MunicipalityAddrLine) begin
    case kCountryAddrLineUserAddr0:
      if (addrfield==0) then begin
        res = "MunicipalitySClass";
      end;
    case kCountryAddrLineUserAddr1:
      if (addrfield==1) then begin
        res = "MunicipalitySClass";
      end;
    case kCountryAddrLineUserAddr2:
      if (addrfield==2) then begin
        res = "MunicipalitySClass";
      end;
    case kCountryAddrLineUserAddr3:
      if (addrfield==3) then begin
        res = "MunicipalitySClass";
      end;
    case kCountryAddrLineUserAddr4:
      if (addrfield==4) then begin
        res = "MunicipalitySClass";
      end;
  end;
  CUDClassSpecPasteNameInvAddr = res;
  return;
end;

global
function string 40 CUDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  record CUVc CUr;
  record CCatVc CCatr;
  Integer rownr;
  boolean sp;
  
  sp=false;
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "Classification":
      GetWindowRecord(wn,CUr);
      if (nonblank(CUr.CustCat)) then begin
        CCatr.Code = CUr.CustCat;
        if (ReadFirstMain(CCatr,1,true)) then begin
          if (nonblank(CCatr.ClassType)) then begin
            if (CountObjects(CCatr.ClassType)<=8) then begin
              sp = true;
            end;
          end;
        end;
      end;
      if (sp) then begin
        psname = "CUClassSClass";
      end else begin
        psname = "CClassSClass";
      end;
    case "InvoiceToCode":
      GetWindowRecord(wn,CUr);
      if ((CUr.CUType!=0) and (CUr.VEType!=0)) then begin
        psname = "AllCUSClass";
      end else begin
        if (CUr.CUType!=0) then begin
          psname = "CUSClass";
        end;
        if (CUr.VEType!=0) then begin
          psname = "VESClass";
        end;
      end;
    case "InvAddr0": psname = CUDClassSpecPasteNameInvAddr(wn,0);
    case "InvAddr1": psname = CUDClassSpecPasteNameInvAddr(wn,1);
    case "InvAddr2": psname = CUDClassSpecPasteNameInvAddr(wn,2);
    case "InvAddr3": psname = CUDClassSpecPasteNameInvAddr(wn,3);
    case "InvAddr4": psname = CUDClassSpecPasteNameInvAddr(wn,4);
  end;
  CUDClassSpecPasteName = psname;
  return;
end;

global
function string 40 CUGuestDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  record CUVc CUr;
  record CCatVc CCatr;
  Integer rownr;
  boolean sp;
  
  sp=false;
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "Classification":
      GetWindowRecord(wn,CUr);
      if (nonblank(CUr.CustCat)) then begin
        CCatr.Code = CUr.CustCat;
        if (ReadFirstMain(CCatr,1,true)) then begin
          if (nonblank(CCatr.ClassType)) then begin
            if (CountObjects(CCatr.ClassType)<=8) then begin
              sp = true;
            end;
          end;
        end;
      end;
      if (sp) then begin
        psname = "CUClassSClass";
      end else begin
        psname = "CClassSClass";
      end;
    case "InvoiceToCode":
      GetWindowRecord(wn,CUr);
      if ((CUr.CUType!=0) and (CUr.VEType!=0)) then begin
        psname = "AllCUSClass";
      end else begin
        if (CUr.CUType!=0) then begin
          psname = "CUSClass";
        end;
        if (CUr.VEType!=0) then begin
          psname = "VESClass";
        end;
      end;
  end;
  CUGuestDClassSpecPasteName = psname;
  return;
end;

global
procedure CUSearchLsm()
BEGIN
  Integer wn,nwn,mwn;
  record RcVc RepSpec;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  nwn = OpenWindow("SearchCURClass",0,0,"","",RepSpec);
  DeselectWindow(nwn,false);
  ReportDefaults(RepSpec,"SearchCURClass");
  RepSpec.UsedOnly = 0;
  RepSpec.long1 = GetWindowSubset(wn);
  RepSpec.repname = "SearchCuRn";
  RepSpec.critname = "SearchCURClass";
  RepSpec.Media = mtScreen;
  RepSpec.flags[0] = 0;
  RepSpec.f12 = GetWindowFileName(mwn);
  if (TestModule("modPL")) or (TestModule("modPO")) then begin
    RepSpec.flags[0] = 0;//why would we want to skip customers and enter same data again  ? 
  end;
  PutWindowRecord(nwn,RepSpec);  
  WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
  RETURN;
END;

global
procedure VESearchSsm()
BEGIN
  Integer wn,nwn,mwn;
  record RcVc RepSpec;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  nwn = OpenWindow("SearchVERClass",0,0,"","",RepSpec);
  DeselectWindow(nwn,false);
  ReportDefaults(RepSpec,"SearchVERClass");
  RepSpec.UsedOnly = 0;
  RepSpec.long1 = GetWindowSubset(wn);
  RepSpec.repname = "SearchCuRn";
  RepSpec.critname = "SearchVERClass";
  RepSpec.Media = mtScreen;
  RepSpec.flags[0] = 3;
  RepSpec.f12 = GetWindowFileName(mwn);
  PutWindowRecord(nwn,RepSpec);  
  WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
  RETURN;
END;

global
procedure ElecInvReport()
BEGIN
  record RcVc RepSpec;
  record RcVc RepSpec2;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  RepSpec.repname = "ElecInvRn";
  RepSpec.Media = mtScreen;    
  RunReport(RepSpec,0);
  RETURN;
END;

global
updating procedure UpdContactAddrCUDsm()
BEGIN
  record CUVc CUr;

  GetWindowRecord(CurWindow,CUr);
  UpdContactAddrCUDsmRemote(CUr);
  RETURN;
END;

global
procedure CopyToLocalAddressBookDsm()
begin
  CopyToLocalAddressBook;
  return;
END;

procedure CUDCLass_BIChart(Integer wn,record CUVc CUr)
begin
  Integer i;
  val maxv;
  Array val vsales;
  Array Integer vmonth;

  ChartBegin(wn,"$CUDCLass_BIChart",kChartTypeColumn,kChartLegendTypeNone,0,-1);
  ChartXAxis(0.5,12.5,UsetStr(21371));
  threadremote.CUDCLass_BIChart_Tool(CUr,maxv,vsales,vmonth);
  ChartYAxis(0,maxv,UsetStr(21370));  

  ChartDataSeriesBegin("CUDCLass_BIChartSales");
  for (i=1;i<=12;i=i+1) begin
    ChartXAxisLabel(i,USetStr(2870+vmonth[i]));
    ChartDatum(vsales[i],"");  
  end;
  EndChartDataSeries;
  EndChart;
  return;
end;

global
function Boolean CUDClassOnOpenWindow(Integer wn)
begin
  record CUVc CUr;
  string 255 errstr,gotofield;
  Integer err;
  
  GetWindowRecord(wn,CUr);
  if (nonblank(CUr.CustCat)) then begin
    CUDClassOnOpenWindowRemote(CUr,err,errstr,gotofield);
    if (err!=0) then begin
      MessageBox(err,errstr);
      WindowFieldGoto(wn,CUr,-1,gotofield,true);
    end;
  end;
  if (CUr.CUType!=0) then begin
    CUDCLass_BIChart(wn,CUr);
  end;
  
//  SetWindowNameArg(wn,"");
  CUDClassOnOpenWindow = false;
  return;
end;

global
procedure CUDClassOnWindowRecordChange(Integer wn)
begin
  record CUVc CUr;

  GetWindowRecord(wn,CUr);
  CUDCLass_BIChart(wn,CUr);
  return;
end;


procedure ConvertVATMask(var string vatnr)
begin
  record VATMaskBlock VATMaskbl;
  row VATMaskBlock VATMaskrw;
  Integer rw,rwc;
  Integer i,l;
  string 20 res;
  string 10 apdx;
  
  BlockLoad(VATMaskbl);
  rwc = MatRowCnt(VATMaskbl);
  apdx = "LV";
  for (rw=0;rw<rwc;rw=rw+1) begin
    MatRowGet(VATMaskbl,rw,VATMaskrw);
    if (VATMaskrw.CountryCode=="LAT") then begin
      l = len(VATMaskrw.VATMask);
      for (i=0;i<l;i=i+1) begin
        if Mid(VATMaskrw.VATMask,i,1)== "#" then begin
          apdx = Left(VATMaskrw.VATMask,i);
          i = l;
          rw = rwc;
        end;
      end;
    end;
  end;
  vatnr = apdx & vatnr;
  return;
end;

procedure Estonian_UpdateCustomerAddress(Integer wn,Area a_reply,var record CUVc CUr)
begin
  string 255 tstr;
  
  if (GetWindowFileName(wn)=="CUVc") then begin
    CUr.Name = "";
    CUr.InvAddr0 = "";
    CUr.InvAddr1 = "";
    CUr.InvAddr2 = "";
    CUr.InvAddr3 = "";
    CUr.InvAddr4 = "";
    CUr.Phone = "";
    CUr.Fax = "";
    CUr.eMail = "";
    CUr.wwwAddr = "";
    tstr  = GetTabTextFromArea(0,0,a_reply);
    if (nonblank(tstr)) then begin
      CUr.Name = tstr; 
    end;
    
    tstr  = GetTabTextFromArea(0,1,a_reply);
    if (nonblank(tstr)) then begin
        CUr.InvAddr0 = tstr;
    end;
    
    tstr  = GetTabTextFromArea(0,2,a_reply);
    if (nonblank(tstr)) then begin
        CUr.InvAddr1 = tstr;
    end;
    
    tstr  = GetTabTextFromArea(0,3,a_reply);
    if (nonblank(tstr)) then begin
        CUr.InvAddr2 = tstr;
    end;

    tstr  = GetTabTextFromArea(0,4,a_reply);
    if (nonblank(tstr)) then begin
      CUr.Phone = tstr;
    end;

    tstr  = GetTabTextFromArea(0,5,a_reply);
    if (nonblank(tstr)) then begin
      CUr.Fax = tstr;
    end;

    tstr  = GetTabTextFromArea(0,6,a_reply);
    if (nonblank(tstr)) then begin
      CUr.eMail = tstr;
    end;

    tstr  = GetTabTextFromArea(0,7,a_reply);
    if (nonblank(tstr)) then begin
      CUr.wwwAddr = tstr;
    end;
  end;
  return;
end;

function integer FindStrPosition(string tstr,string decsep)
begin
  integer res;
  integer i,slen;
  
  slen = len(tstr);
  for (i=slen;i>=0;i=i-1) begin
    if (Mid(tstr,i,1)==decsep) then begin
      res = i;
      goto LFindStrPosition;
    end;
  end;
  
LFindStrPosition:;
  FindStrPosition = res;
  return;
end;

procedure SplitLatvianAddress(string fulladdr,var string addr1,var string addr2)
begin
  integer pos;
  
  pos = FindStrPosition(fulladdr,",");
  addr1 = Right(fulladdr,len(fulladdr)-pos-2);
  addr2 = Left(fulladdr,pos);

  return;
end;

function boolean LatvianReplyIsList(xml axml)
begin
  boolean res;
  
  res = true;
  if (XmlNodeExists(axml,"soap:Envelope/soap:Body/answer/person")) then begin
    res = false;
  end;

  LatvianReplyIsList = res;
  return;
end;

procedure DisplayLatvianPremises(integer wn,xml axml,var record CUVc CUr,var record DelAddrVc DelAddrr,integer type)
begin
  record RCVc RepSpec;
  integer i,nwn;
  string 255 tstr,tagstr,item,name,regcode,root;
  
  RepSpec.flags[0] = type;
  nwn = OpenWindow("PremisesWClass",1,wn,"","",RepSpec);  

  i = 0;
  while (XmlNodeExists(axml,"object[" & i & "]")) begin
    item = "object[" & i & "]/";
    name = XmlGet(axml,item & "name");
    regcode = XmlGet(axml,item & "regcode");
    if (nonblank(regcode)) then begin
      tstr = name & " - " & regcode;
      DeselectWindow(nwn,false);
      tagstr = regcode;
      SetListStringAndTag(nwn,i,tstr,tagstr);
    end; 
    i = i + 1;    
  end;
  PutWindowRecord(nwn,RepSpec);
  
  return;
end;

procedure Latvian_UpdateCustomerAddress(Integer wn,Area a_reply,var record CUVc CUr,var record DelAddrVc DelAddrr,integer type)
begin
  string 255 tstr,addr1,post,root,name,city,fulladdr,vatcode;
  xml axml;

  axml = ParseXmlArea(a_reply);
  if (LatvianReplyIsList(axml)) then begin
    DisplayLatvianPremises(wn,axml,CUr,DelAddrr,type);
  end else begin
    root = "soap:Envelope/soap:Body/answer/person";
    if (XmlNodeExists(axml,root & "/address/adress_full")) then begin
      fulladdr = XmlGet(axml,root & "/address/adress_full");
      SplitLatvianAddress(fulladdr,addr1,city);
      post = XmlGet(axml,root & "/address/index");
    end;
    if (XmlNodeExists(axml,root & "/firm")) then begin
      name = XmlGet(axml,root & "/firm");
      if (Right(name,1)!=",") then begin
        name = name & ",";
      end;
      name = name & " " & XmlGet(axml,root & "/type");
    end;
    if (nonblank(post)) then begin
      post = "LV-" & post;
    end;
    if (XmlNodeExists(axml,root & "/pvncode")) then begin
      vatcode = XmlGet(axml,root & "/pvncode");
    end;

    if (GetWindowFileName(wn)=="CUVc") then begin
      if (type==1) then begin
        CUr.InvAddr0 = addr1;
        CUr.InvAddr1 = city;
        CUr.InvAddr2 = post;
        if (blank(CUr.Name)) then begin
          CUr.Name = name;
        end;
        if (blank(CUr.VATNr) and nonblank(vatcode)) then begin
          Cur.VATNr = vatcode;
        end;
        PutWindowRecord(wn,CUr);
        WindowFieldGoto(wn,CUr,-1,"InvAddr0",true);
      end else begin
        if (type==2) then begin
          CUr.DelAddr0 = addr1;
          CUr.DelAddr1 = post;
          PutWindowRecord(wn,CUr);
          WindowFieldGoto(wn,CUr,-1,"DelAddr0",true);
        end;
      end;
    end else begin
      if (GetWindowFileName(wn)=="DelAddrVc") then begin
        DelAddrr.DelAddr0 = addr1;
        DelAddrr.DelAddr1 = post;
        PutWindowRecord(wn,DelAddrr);
        WindowFieldGoto(wn,DelAddrr,-1,"DelAddr0",true);
      end;
    end;
  end;

  return;
end;            

global
Function Boolean PremisesWClassOnOpenWindow(Integer wn)
begin  
  PremisesWClassOnOpenWindow = false;
  return;
end;

procedure ExtractAddressElement(string ostr,var Integer pos,var string rstr,string separator)
begin
  string 1 c1;

  rstr = "";
L47:;
  if (pos>=len(ostr)) then begin goto L999; end;
  c1 = Mid(ostr,pos,1); 
  pos = pos + 1;
  if (c1==separator) then begin
    if (len(rstr)==0) then begin 
      goto L999; 
    end;
    goto L888;
  end;
  rstr = rstr & c1;
  goto L47;
L888:;
  if (pos>len(ostr)) then begin goto L999; end;
  c1 = Mid(ostr,pos,1);  
  pos = pos + 1;
  if (c1==separator) then begin goto L888; end;
  pos = pos - 1;
L999:;
  return;
end;


global
updating Function Boolean PremisesWClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  Integer where,l,cnt,pos,fieldnr;
  string 255 istring,istringtag,tstr,tstr2;
  record CUVc CUr;
  record DelAddrVc DelAddrr;
  Boolean putf;
  string 255 deploc,dbldeploc,depstr,street,organisation,premise;
  string 255 subbuilding,building,premisenr;
  record RcVc RepSpec;
  Area taga;
  integer type;
  
  GetWindowRecord(wn,RepSpec);
  type = RepSpec.flags[0];
  mwn = MotherWindow(wn);
  if (HasLocalization("LVA")) then begin
    if (SelectedListLine(wn)>=0) then begin
      tstr = GetListTag(wn,SelectedListLine(wn));
      UpdateCUAddr(mwn,"",tstr,type,0);
    end;
    CloseWindow(wn);
  end else begin
    if (SelectedListLine(wn)>=0) then begin
      istring = GetListString(wn,SelectedListLine(wn));
      istringtag = GetListTag(wn,SelectedListLine(wn));
      AddTextToArea(istringtag,taga);
      organisation = GetTabTextFromArea(0,0,taga);
      depstr = GetTabTextFromArea(0,1,taga);
      street = GetTabTextFromArea(0,2,taga);
      deploc = GetTabTextFromArea(0,3,taga);
      dbldeploc = GetTabTextFromArea(0,4,taga);
      premise = GetTabTextFromArea(0,5,taga);
        
  //StopAlert(" organisation " & organisation & " street " & street & " depstr " & depstr & " deploc " & deploc & " dbldeploc " & dbldeploc & " premise " & premise);

      ReverseString(premise,tstr2);
      fieldnr = 1;
      pos = 0;
      ExtractAddressElement(tstr2,pos,tstr,",");
      while (nonblank(tstr)) begin
        switch (fieldnr) begin
          case 1: 
            ReverseString(tstr,premisenr);          
          case 2: 
            ReverseString(tstr,building);          
          case 3:
            ReverseString(tstr,subbuilding);          
        end;
        ExtractAddressElement(tstr2,pos,tstr,",");
        fieldnr = fieldnr + 1;
      end;
    end else begin
      organisation = "";
    end;        
  //StopAlert(" subbuilding " & subbuilding & " building " & building & " premisenr " & premisenr);
    if (building=="Po Box") then begin
      subbuilding = building & " " & premisenr;
      premisenr = "";
      building = "";
    end else begin
      if (IsDigit(Left(premisenr,1))==false) then begin
        subbuilding = building;
        building = premisenr;
        premisenr = "";
      end;
    end;
    CloseWindow(wn);
    switch (GetWindowFileName(mwn)) begin
      case "CUVc":
        GetWIndowRecord(mwn,CUr);
        if (type==1) then begin
          CUr.Name = organisation;
          CUr.InvAddr0 = subbuilding;
          if (nonblank(CUr.InvAddr0)) then begin
            CUr.InvAddr0 = CUr.InvAddr0 & " ";
          end;
          CUr.InvAddr0 = CUr.InvAddr0 & building;
          CUr.InvAddr1 = premisenr;
          if (nonblank(CUr.InvAddr1)) then begin
            CUr.InvAddr1 = CUr.InvAddr1 & " ";
          end;
          CUr.InvAddr1 = CUr.InvAddr1 & street;
          if (blank(CUr.InvAddr0)) then begin
            CUr.InvAddr0 = CUr.InvAddr1;
            CUr.InvAddr1 = "";
          end;
          if (nonblank(deploc)) then begin
            CUr.InvAddr1 = deploc & " " & CUr.InvAddr1;
          end;
          PutWIndowRecord(mwn,CUr);
          tstr = CUr.InvAddr0;
          PasteString(mwn,tstr);
        end else begin
          if (type==2) then begin
            CUr.DelAddr0 = subbuilding;
            if (nonblank(CUr.DelAddr0)) then begin
              CUr.DelAddr0 = CUr.DelAddr0 & " ";
            end;
            CUr.DelAddr0 = CUr.DelAddr0 & building;
            CUr.DelAddr1 = premisenr;
            if (nonblank(CUr.DelAddr1)) then begin
              CUr.DelAddr1 = CUr.DelAddr1 & " ";
            end;
            CUr.DelAddr1 = CUr.DelAddr1 & street;
            if (blank(CUr.DelAddr0)) then begin
              CUr.DelAddr0 = CUr.DelAddr1;
              CUr.DelAddr1 = "";
            end;
            if (nonblank(deploc)) then begin
              CUr.DelAddr1 = deploc & " " & CUr.DelAddr1;
            end;
            PutWIndowRecord(mwn,CUr);        
            tstr = CUr.DelAddr0;
            PasteString(mwn,tstr);
          end;
        end;
      case "DelAddrVc":
        GetWIndowRecord(mwn,DelAddrr);
        DelAddrr.DelAddr0 = subbuilding;
        if (nonblank(DelAddrr.DelAddr0)) then begin
          DelAddrr.DelAddr0 = DelAddrr.DelAddr0 & " ";
        end;
        DelAddrr.DelAddr0 = DelAddrr.DelAddr0 & building;
        DelAddrr.DelAddr1 = premisenr;
        if (nonblank(DelAddrr.DelAddr1)) then begin
          DelAddrr.DelAddr1 = DelAddrr.DelAddr1 & " ";
        end;
        DelAddrr.DelAddr1 = DelAddrr.DelAddr1 & street;
        if (blank(DelAddrr.DelAddr0)) then begin
          DelAddrr.DelAddr0 = DelAddrr.DelAddr1;
          DelAddrr.DelAddr1 = "";
        end;
        if (nonblank(deploc)) then begin
          DelAddrr.DelAddr1 = deploc & " " & DelAddrr.DelAddr1;
        end;
        PutWIndowRecord(mwn,DelAddrr);        
        tstr = DelAddrr.DelAddr0;
        PasteString(mwn,tstr);
    end;
  end;

  PremisesWClassOnOKWindow = false;
  return;
end;

global
function Boolean PremisesWClassSysListClick(Integer wn,Integer rownr)
begin
  Area taga;
  string 255 istringtag,street;
  record RcVc RepSpec;

  GetWindowRecord(wn,RepSpec);
  istringtag = GetListTag(wn,SelectedListLine(wn));
  AddTextToArea(istringtag,taga);

  street = GetTabTextFromArea(0,2,taga);
  PutWindowString(wn,"premisses_street",street);
  street = GetTabTextFromArea(0,3,taga);
  PutWindowString(wn,"premisses_postcodearea",street);
  PutWindowRecord(wn,RepSpec);

  PremisesWClassSysListClick = true;
  return;
end;

procedure Swedish_UpdateCustomerAddress(Integer wn,Area a_reply,var record CUVc CUr)
begin
  xml xreply;
  Area a;
  string 255 xkey,xkeyrow;
  Array string 255 aFieldNames;
  Array string 255 aFieldValues;
  Integer i,acnt;  
  string 255 errorcode,errormessage;

  xreply = ParseXmlArea(a_reply);
    
  WindowFieldGoto(wn,CUr,-1,"Code",true);

  switch (CUr.CustType) begin    
    case 1:
      errorcode = XmlGet(xreply,"soap:Envelope/soap:Body/DataImportPersonResponse/DataImportPersonResult/Error/ErrorCode");
      errormessage = XmlGet(xreply,"soap:Envelope/soap:Body/DataImportPersonResponse/DataImportPersonResult/Error/ErrorMessage");
      if (errorcode!="0") and (nonblank(errorcode)) then begin
        StopAlert(USetStr(20239) & errormessage);
        goto LSwedish_UpdateCustomerAddress;
      end;
      xkey = "soap:Envelope/soap:Body/DataImportPersonResponse/DataImportPersonResult/FieldNames/";
      i = 0;  
      acnt = 0;
      while (XmlNodeExists(xreply,xkey & "string[" & i & "]")) begin
        xkeyrow = xkey & "string[" & i & "]";
        aFieldNames[acnt] = XmlGet(xreply,xkeyrow);
        acnt = acnt + 1;
        i = i+1;    
      end;
      xkey = "soap:Envelope/soap:Body/DataImportPersonResponse/DataImportPersonResult/FieldValues/";
      i = 0;  
      acnt = 0;
      while (XmlNodeExists(xreply,xkey & "string[" & i & "]")) begin
        xkeyrow = xkey & "string[" & i & "]";
        aFieldValues[acnt] = XmlGet(xreply,xkeyrow);
        acnt = acnt + 1;
        i = i+1;    
      end;
      for (i=0;i<acnt;i=i+1) begin        
        switch (aFieldNames[i]) begin
          case "Namn": CUr.Name = aFieldValues[i];
          case "Adress": CUr.InvAddr0 = aFieldValues[i];
          case "Postnummer": CUr.InvAddr1 = aFieldValues[i];
          case "Postort": CUr.InvAddr1 = CUr.InvAddr1 & " " & aFieldValues[i];
        end;
      end;
    otherwise
      errorcode = XmlGet(xreply,"soap:Envelope/soap:Body/DataImportCompanyResponse/DataImportCompanyResult/Error/ErrorCode");
      errormessage = XmlGet(xreply,"soap:Envelope/soap:Body/DataImportCompanyResponse/DataImportCompanyResult/Error/ErrorMessage");
      if (errorcode!="0") and (nonblank(errorcode)) then begin
        StopAlert(USetStr(20239) & errormessage);
        goto LSwedish_UpdateCustomerAddress;
      end;

      xkey = "soap:Envelope/soap:Body/DataImportCompanyResponse/DataImportCompanyResult/FieldNames/";
      i = 0;  
      acnt = 0;
      while (XmlNodeExists(xreply,xkey & "string[" & i & "]")) begin
        xkeyrow = xkey & "string[" & i & "]";
        aFieldNames[acnt] = XmlGet(xreply,xkeyrow);
        acnt = acnt + 1;
        i = i+1;    
      end;

      xkey = "soap:Envelope/soap:Body/DataImportCompanyResponse/DataImportCompanyResult/FieldValues/";
      i = 0;  
      acnt = 0;
      while (XmlNodeExists(xreply,xkey & "string[" & i & "]")) begin
        xkeyrow = xkey & "string[" & i & "]";
        aFieldValues[acnt] = XmlGet(xreply,xkeyrow);
        acnt = acnt + 1;
        i = i+1;    
      end;
      for (i=0;i<acnt;i=i+1) begin
    //    AddTextToArea(aFieldNames[i],a);
    //    AddTextToArea(chr(9),a);
    //    AddTextToArea(aFieldValues[i],a);
    //    AddTextToArea(chr(10),a);
        
        switch (aFieldNames[i]) begin
          case "Namn": CUr.Name = aFieldValues[i];
          case "Adress": CUr.InvAddr0 = aFieldValues[i];
          case "Postnummer": CUr.InvAddr1 = aFieldValues[i];
          case "Postort": CUr.InvAddr1 = CUr.InvAddr1 & " " & aFieldValues[i];
        end;
      end;
  end;
  
//  CreateFile("jjSwedish_UpdateCustomerAddress2.txt");
//  CloseFile;
//  WriteAreaToFile(a,"jjSwedish_UpdateCustomerAddress2.txt",0);
LSwedish_UpdateCustomerAddress:;
  return;
end;

procedure UKian_UpdateCustomerAddress(Integer wn,Area a_reply,var record CUVc CUr,var record DelAddrVc DelAddrr,integer type)
BEGIN
  string 255 tstr,tstr2,tagtstr;
  Integer nwn;
  record RcVc RepSpec;
  Integer i,adrressfldcnt;
  Area a_xmlreply;
  LongInt areasize,junk,read;
  Integer pla,pl;
  xml xreply;
  string 255 xkey,xkeypl,xkeypla,rkey;
  string 255 deploc,dbldeploc,depstr,street,organisation,premise;
  
  areasize = GetAreaLength(a_reply);
  junk = NumberOfJunkLeadingCharactersInArea(a_reply);
  read = GetAreaFromArea(a_reply,junk,areasize-junk,a_xmlreply);

//  CreateFile("jjUpdCustomerAddressCUDsm2_reply.txt");
//  CloseFile;
//  WriteAreaToFile(a_xmlreply,"jjUpdCustomerAddressCUDsm2_reply.txt",0);

  xreply = ParseXmlArea(a_xmlreply);

  xkey = "SOAP-ENV:Envelope/SOAP-ENV:Body/ns1:getPremiseListResponse/return/addresses/item/";

  if (GetWindowFileName(wn)=="CUVc") then begin
    if (type==1) then begin
      CUr.InvAddr0 = "";
      CUr.InvAddr1 = "";
      CUr.InvAddr2 = XmlGet(xreply,xkey & "post_town");
      CUr.InvAddr3 = XmlGet(xreply,xkey & "county");
      CUr.InvAddr4 = XmlGet(xreply,xkey & "postcode");    
      PutWindowRecord(wn,CUr);
      WindowFieldGoto(wn,CUr,-1,"InvAddr0",true);
    end else begin
      if (type==2) then begin
        CUr.DelAddr0 = "";
        CUr.DelAddr1 = "";
        CUr.DelAddr2 = XmlGet(xreply,xkey & "post_town");
        CUr.DelAddr3 = XmlGet(xreply,xkey & "county");
        CUr.DelAddr4 = XmlGet(xreply,xkey & "postcode");    
        PutWindowRecord(wn,CUr);
        WindowFieldGoto(wn,CUr,-1,"DelAddr0",true);
      end;
    end;
  end else begin
    if (GetWindowFileName(wn)=="DelAddrVc") then begin
      DelAddrr.DelAddr0 = "";
      DelAddrr.DelAddr1 = "";
      DelAddrr.DelAddr2 = XmlGet(xreply,xkey & "post_town");
      DelAddrr.DelAddr3 = XmlGet(xreply,xkey & "county");
      DelAddrr.DelAddr4 = XmlGet(xreply,xkey & "postcode");    
      PutWindowRecord(wn,DelAddrr);
      WindowFieldGoto(wn,DelAddrr,-1,"DelAddr0",true);
    end;
  end;

  RepSpec.flags[0] = type;
  nwn = OpenWindow("PremisesWClass",1,wn,"","",RepSpec);  

  i = 0;
  xkeypla = "SOAP-ENV:Envelope/SOAP-ENV:Body/ns1:getPremiseListResponse/return/addresses/";
  pla = 0;
  while (XmlNodeExists(xreply,xkeypla & "item[" & pla & "]")) begin
    xkeypl = xkeypla & "item[" & pla & "]/";
    
    deploc = XmlGet(xreply,xkeypl & "dependent_locality");
    dbldeploc = XmlGet(xreply,xkeypl & "double_dependent_locality");
    depstr = XmlGet(xreply,xkeypl & "dependent_street");
    street = XmlGet(xreply,xkeypl & "street");

    DeselectWindow(nwn,false);
    PutWindowString(nwn,"premisses_street",street);
    PutWindowString(nwn,"premisses_postcodearea",deploc);
    
    pl = 0;
    while (XmlNodeExists(xreply,xkeypl & "Premise/item[" & pl & "]")) begin
      rkey = xkeypl & "Premise/item[" & pl & "]/";
      organisation = XmlGet(xreply,rkey & "organisation");
      premise = XmlGet(xreply,rkey & "premise");;
      
      tagtstr = organisation;
      tagtstr = tagtstr & chr(9);
      tagtstr = tagtstr & depstr;
      tagtstr = tagtstr & chr(9);
      tagtstr = tagtstr & street;
      tagtstr = tagtstr & chr(9);
      tagtstr = tagtstr & deploc;
      tagtstr = tagtstr & chr(9);
      tagtstr = tagtstr & dbldeploc;
      tagtstr = tagtstr & chr(9);
      tagtstr = tagtstr & premise;
      tagtstr = tagtstr & chr(9);
            
      tstr = "";
      if (nonblank(organisation)) then begin
        tstr = tstr & organisation;
        tstr = tstr & ",";
      end;
      tstr = tstr & premise;
//      tstr = tstr & " ";
//      if (nonblank(street)) then begin
//        tstr = tstr & street;
//        tstr = tstr & ",";
//      end;
//      if (nonblank(deploc)) then begin
//        tstr = tstr & deploc;
//      end;


      SetListStringAndTag(nwn,i,tstr,tagtstr);     
      i = i + 1;
      
      pl = pl + 1;
    end;
    pla = pla + 1;
  end;
  PutWindowRecord(nwn,RepSpec);
  RETURN;
end;

global
updating procedure UpdateCUAddr(integer wn,string postcode,string regno,integer type,Integer custtype) // only for CUVc: 1 - invoice addr, 2 - delivery addr, other values - nothing happens
BEGIN
  record CUVc CUr;
  record DelAddrVc DelAddrr;
  Area a_req,a_reply;
  Boolean res;
  string 255 compid;
  record InternetEnablerBlock IEb;
  LongInt rerror;  
  string 255 rerrordesc;
  integer regcountry;
  record TXServiceReplyVc TXSrvReplyr;

  DeselectWindow(wn,false);
  BlockLoad(IEb);
  
  regcountry = IEb.RegInCountry;
  if (type!=1) then begin
    if (IEb.RegInCountry==99) then begin
      regcountry = GetCodeFromCompanyCode(CurrentCompany);
    end;
  end;
  
  switch (regcountry) begin
    case 99: ;
    case 8: if (type!=1) then begin goto LUpdateCUAddr; end;//latvia only supports updating main/invoice address
    case 25: if (type!=1) then begin goto LUpdateCUAddr; end;//estonia:HansaRaama only supports updating main/invoice address
    case 16: if (type!=1) then begin goto LUpdateCUAddr; end;//estonia:Excellent only supports updating main/invoice address
    case 7: if (type!=1) then begin goto LUpdateCUAddr; end;//estonia only supports updating main/invoice address
    case 3: if (type!=1) then begin goto LUpdateCUAddr; end;//sweden only supports updating main/invoice address
    case 1: ;
    otherwise 
      goto LUpdateCUAddr;
  end;

  if (GetWindowFileName(wn)=="CUVc") then begin
    GetWindowRecord(wn,CUr);
    PutWindowRecord(wn,CUr);
  end else begin
    if (GetWindowFileName(wn)=="DelAddrVc") then begin
      GetWindowRecord(wn,DelAddrr);
      PutWindowRecord(wn,DelAddrr);
    end;
  end;
  
//  if (WindowState(wn)!=2) then begin goto LUpdateCUAddr; end;
  switch (IEb.RegInCountry) begin
    case 99: 
      switch (CurrentCompany) begin
        case 25: compid = regno;//Estonia
        case 26: compid = regno;//Latvia
        case 38: compid = regno;//Latvia
        case 39: compid = regno;//Sweden
        case 63: compid = postcode;//UK
        case 68: compid = regno;//Estonia:HansaRaama
        case 74: compid = regno;//Estonia:Excellent
      end;
    case 25: compid = regno;//Estonia:HansaRaama
    case 16: compid = regno;//Estonia:Excellent
    case 8: compid = regno;//Latvia
    case 7: compid = regno;//Estonia
    case 3: compid = regno;//Sweden
    case 1: compid = postcode;//UK
    otherwise goto LUpdateCUAddr;
  end;
  if (nonblank(compid)) then begin 
    SendFunctionVersion("54.0","",a_req);
    SendTextParameter(CurrentUser,a_req);
    SendTextParameter(compid,a_req);
    SendTextParameter(custtype,a_req);
    
    res = SendServiceRequest("UPDATECOMPANYDATA",false,a_req,a_reply);        
    if (res) then begin
/*    
      CreateFile("jjUpdCustomerAddressCUDsm_reply.txt");
      CloseFile;
      WriteAreaToFile(a_reply,"jjUpdCustomerAddressCUDsm_reply.txt",0);
*/ 
   
      ReadTXServiceReply(TXSrvReplyr,a_reply,true);
      rerror = TXSrvReplyr.ErrorCode;
      rerrordesc = TXSrvReplyr.ErrorDescription;

      if (rerror==0) then begin
        switch (IEb.RegInCountry) begin
          case 99: 
             switch (CurrentCompany) begin
               case 25: Estonian_UpdateCustomerAddress(wn,a_reply,CUr); CUr.RegNr1 = regno; //est:hansaworld
               case 26: Latvian_UpdateCustomerAddress(wn,a_reply,CUr,DelAddrr,type); CUr.RegNr1 = regno;
               case 38: Latvian_UpdateCustomerAddress(wn,a_reply,CUr,DelAddrr,type); CUr.RegNr1 = regno;
               case 39: Swedish_UpdateCustomerAddress(wn,a_reply,CUr); 
               case 63: UKian_UpdateCustomerAddress(wn,a_reply,CUr,DelAddrr,type);
               case 68: Estonian_UpdateCustomerAddress(wn,a_reply,CUr); CUr.RegNr1 = regno; //est:hansaraama
               case 74: Estonian_UpdateCustomerAddress(wn,a_reply,CUr); CUr.RegNr1 = regno; //est:excellent
             end;
          case 25: Estonian_UpdateCustomerAddress(wn,a_reply,CUr); CUr.RegNr1 = regno; //est:hansaraama
          case 16: Estonian_UpdateCustomerAddress(wn,a_reply,CUr); CUr.RegNr1 = regno; //est:excellent
          case 8: Latvian_UpdateCustomerAddress(wn,a_reply,CUr,DelAddrr,type); CUr.RegNr1 = regno;
          case 7: Estonian_UpdateCustomerAddress(wn,a_reply,CUr); CUr.RegNr1 = regno; //est:hansaworld
          case 3: Swedish_UpdateCustomerAddress(wn,a_reply,CUr);            
          case 1: UKian_UpdateCustomerAddress(wn,a_reply,CUr,DelAddrr,type);            
          otherwise goto LUpdateCUAddr;
        end;
        if (GetWindowFileName(wn)=="CUVc") then begin
          PutWindowRecord(wn,CUr);
        end else begin
          if (GetWindowFileName(wn)=="DelAddrVc") then begin
            PutWindowRecord(wn,DelAddrr);
          end;
        end;
      end else begin
        MessageBox(rerror,rerrordesc);
      end;
    end else begin
      MessageBox(20241,"");
    end;
  end;
LUpdateCUAddr:;
  RETURN;
END;

global
updating procedure UpdDeliveryAddressCUDsm()
BEGIN
  record CUVc CUr;
  integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,CUr);
  UpdateCUAddr(wn,CUr.DelAddr4,"",2,CUr.CustType);
  RETURN;
END;

global
updating procedure UpdCustomerAddressCUDsm()
BEGIN
  record CUVc CUr;
  integer wn;
  string 60 regno;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,CUr);
  if (nonblank(CUr.RegNr2)) then begin
    regno = CUr.RegNr2;
  end else begin
    regno = CUr.RegNr1;
  end;
  UpdateCUAddr(wn,CUr.InvAddr4,regno,1,CUr.CustType);
  RETURN;
END;

global
updating procedure UpdAddressDelAddrDsm()
begin
  record DelAddrVc DelAddrr;
  integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,DelAddrr);
  UpdateCUAddr(wn,DelAddrr.DelAddr4,"",1,0);
  return;
end;

global
updating procedure LookupNewCUAddressDsm()
begin
  integer wn,mwn;
  record RcVc RepSpec;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  mwn = RepSpec.ArtMode;//MotherWindow(wn);
  UpdateCUAddr(mwn,Repspec.f1,RepSpec.f2,1,0);
  CloseWindow(wn);
  return;
end;

global
updating function Boolean NewCUHelperWClassOnOKWindow(Integer wn)
begin
  LookupNewCUAddressDsm;
  RETURN;
END;

global
updating function Boolean CUGuestDClassPrint(Integer wn,Boolean previewf)
BEGIN
  record CUVc CUGuestr;
  Integer normalmode,tf;
  string 20 docname;

  normalmode = 0;//Rs_normal
  DeselectWindow(wn,false);
  GetWindowRecord(wn,CUGuestr);  
  if ((WindowState(wn)==normalmode) and (previewf==false)) then begin
    RecordActionProfile_Print(CUGuestr,"",true);
  end else begin
    if (PrintDocument(CUGuestr,"GuestDocForm",true)) then begin end;
  end;

  RETURN;
END;

global
procedure CUClassReplace()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record CUVc CUr;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  GetWindowRecord(wn,RepSpec);
  switch (GetWindowFileName(mwn)) begin
    case "CUVc":
      GetWindowRecord(mwn,CUr);
      DeselectWindow(mwn,false);
      CUr.Classification = "";
      PutWindowRecord(mwn,CUr);
      WindowFieldGoto(mwn,CUr,-1,"Classification",true);
      PasteFromTRObjS(wn,1);
  end;
  CloseWindow(wn);
  return;
end;

global
procedure INClassReplace()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record INVc INr;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  GetWindowRecord(wn,RepSpec);
  switch (GetWindowFileName(mwn)) begin
    case "INVc":
      GetWindowRecord(mwn,INr);
      DeselectWindow(mwn,false);
      INr.DispGroups = "";
      PutWindowRecord(mwn,INr);
      WindowFieldGoto(mwn,INr,-1,"DispGroups",true);
      PasteFromTRObjS(wn,1);
  end;
  CloseWindow(wn);
  SelectWindow(mwn);
  WindowFieldGoto(mwn,INr,-1,"Code",false);
  WindowFieldGoto(mwn,INr,-1,"DispGroups",false);
  return;
end;

global
updating procedure CreateObjectCUDsm()
begin
  record CUVc CUr;
  Integer wn,nwn;
  string 200 tstr;
  
  wn = CurWindow;
  switch (WindowState(wn)) begin
    case Rs_insert:
    otherwise
      GetWindowRecord(wn,CUr);
      CreateCUObject(CUr,false);
      PutWindowRecord(wn,CUr);  
      WindowDoOK(wn,0);    
  end;
  return;
end;

global
function string 255 ReplaceCharByString(string instr,string rch,string replacestr)
begin
  string 255 res;
  string 1 ch;
  Integer i;
  
  for (i=0;i<len(instr);i=i+1) begin
    ch = Mid(instr,i,1);
    if (ch==rch) then begin
      res = res & replacestr; // "%20";
    end else begin
      res = res & ch;
    end;
  end;
  ReplaceCharByString = res;
  return;
end;

global
procedure MSNCUFindMapPosition(record CUVc CUr)
begin
  string 200 tstr,t2,default;
  Integer i,rwcnt;
  record MapBlock Mapb;
  row MapBlock Maprw;

  BlockLoad(Mapb);
  rwcnt = MatRowCnt(Mapb);
  tstr = "http://maps.google.com/?q=";
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Mapb,i,Maprw);
    if (blank(Maprw.CountryCode)) then begin
      if (Maprw.MapType==kMapEngineTypeBing) then begin
        tstr = "http://www.bing.com/maps/?v=2&where1=";
      end else begin
        tstr = "http://maps.google.com/?q=";
      end;
    end;
  end;
  if (nonblank(CUr.CountryCode)) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Mapb,i,Maprw);
      if (CUr.CountryCode==Maprw.CountryCode) then begin
        if (Maprw.MapType==kMapEngineTypeBing) then begin
          tstr = "http://www.bing.com/maps/?v=2&where1=";
        end else begin
          tstr = "http://maps.google.com/?q=";
        end;
      end;
    end;
  end;
  t2 = CUr.InvAddr0 & " " & CUr.InvAddr1 & " " & CUr.InvAddr2 & " " & CUr.InvAddr3 & " " & CUr.InvAddr4;
  t2 = UrlEncode(t2);
  tstr = tstr & t2;
  OpenWebBrowser(tstr);
  return;
end;

global
procedure MSNMapPositionDsm()
begin
  record CUVc CUr;
  Integer wn;

  wn = CurWindow;
  CUr.Name = GetListString(wn,0);
  if (ReadFirstKey("Name",CUr,1,true)) begin    
    MSNCUFindMapPosition(CUr);
  end;
  return;
end;

/*
global
procedure MSNMapPositionDsm()
begin
  record CUVc CUr;
  string 200 tstr,t2,country;
  Integer wn;
  record InternetEnablerBlock IEb;
  record CountryVc Countryr;

  wn = CurWindow;
//  GetWindowRecord(wn,CUr);
  CUr.Name = GetListString(wn,0);
  if(ReadFirstKey("Name",CUr,1,true)) begin
    BlockLoad(IEb);
    
    tstr = "http://maps.msn.com/home.aspx?";
    tstr = tstr & "strt1=" & CUr.InvAddr0;
    switch (IEb.RegInCountry) begin
      case 1:
        tstr = tstr & "&zipc1=" & CUr.InvAddr4;
      case 37:
        tstr = tstr & "&zipc1=" & CUr.InvAddr4;
      case 99://HansaMail
        switch (CurrentCompany) begin
          case 31:
            tstr = tstr & "&zipc1=" & CUr.InvAddr4;
          case 32:
            tstr = tstr & "&zipc1=" & CUr.InvAddr4;
          case 98:
            tstr = tstr & "&zipc1=" & CUr.InvAddr4;
          otherwise 
             tstr = tstr & "&zipc1=" & CUr.InvAddr2;
        end;
      otherwise 
        tstr = tstr & "&zipc1=" & CUr.InvAddr2;
    end;
    tstr = tstr & "&city1=" & CUr.InvAddr2;
    tstr = tstr & "&stnm1=" & CUr.InvAddr3; //State/province
    country = CUr.InvAddr4;
    switch (IEb.RegInCountry) begin
      case 37:
        if (nonblank(CUr.CountryCode)) then begin
          Countryr.Code = CUr.CountryCode;
          ReadFirstMain(Countryr,1,true);
          country = Countryr.Comment;
        end;
      case 99://HansaMail
        switch (CurrentCompany) begin
          case 98:
            if (nonblank(CUr.CountryCode)) then begin
              Countryr.Code = CUr.CountryCode;
              ReadFirstMain(Countryr,1,true);
              country = Countryr.Comment;
            end;
        end;
    end;
    switch (country) begin
      case "United States": tstr = tstr & "&cnty1=" & 0;
      case "Canada": tstr = tstr & "&cnty1=" & 1;
      case "United Kingdom": tstr = tstr & "&cnty1=" & 2;
      case "France": tstr = tstr & "&cnty1=" & 3;
      case "Germany": tstr = tstr & "&cnty1=" & 4;
      case "Austria": tstr = tstr & "&cnty1=" & 5;
      case "Switzerland": tstr = tstr & "&cnty1=" & 6;
      case "Belgium": tstr = tstr & "&cnty1=" & 7;
      case "Luxembourg": tstr = tstr & "&cnty1=" & 8;
      case "Denmark": tstr = tstr & "&cnty1=" & 9;
      case "Spain": tstr = tstr & "&cnty1=" & 10;
      case "Italy": tstr = tstr & "&cnty1=" & 11;
      case "Netherlands": tstr = tstr & "&cnty1=" & 12;
      case "Finland": tstr = tstr & "&cnty1=" & 13;
      case "Norway": tstr = tstr & "&cnty1=" & 14;
      case "Portugal": tstr = tstr & "&cnty1=" & 15;
      case "Sweden": tstr = tstr & "&cnty1=" & 16;
      case "Australia": tstr = tstr & "&cnty1=" & 17;
      case "Brazil": tstr = tstr & "&cnty1=" & 18;
      case "Greece": tstr = tstr & "&cnty1=" & 19;
      otherwise tstr = tstr & "&cnty1=" & 2;
    end;
    
    t2 = ConvertSpecStr(tstr,"NOSCANDCHAR"); // Should be proper code.....
    tstr = ReplaceCharByString(t2," ","%20");
    OpenWebBrowser(tstr);
  end;
  return;
end;
*/
// iOS functions follows

global 
procedure CUDClassOpenDelivery()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record CUVc CUr;
  
  wn = CurWindow;
  GetWindowRecord(wn,CUr);
  nwn = OpenWindow("CUDeliveryDClass",1,wn,subset,"",CUr);
  PutWindowRecord(wn,CUr);
  RETURN;
END;

global
function boolean CUDeliveryDClassOnOKWindow(Integer wn)
begin
  record CUVc CUr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,CUr);
    PutWindowRecord(mwn,CUr);
  end;
  CloseWindow(wn);
  
  CUDeliveryDClassOnOKWindow = true;
end;

global 
procedure CUDClassOpenTerms()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record CUVc CUr;
  
  wn = CurWindow;
  GetWindowRecord(wn,CUr);
  nwn = OpenWindow("CUTermsDClass",1,wn,subset,"",CUr);
  PutWindowRecord(wn,CUr);
  RETURN;
END;

global
function boolean CUTermsDClassOnOKWindow(Integer wn)
begin
  record CUVc CUr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,CUr);
    PutWindowRecord(mwn,CUr);
  end;
  CloseWindow(wn);
  
  CUTermsDClassOnOKWindow = true;
end;

global 
procedure CUDClassOpenPricing()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record CUVc CUr;
  
  wn = CurWindow;
  GetWindowRecord(wn,CUr);
  nwn = OpenWindow("CUPricingDClass",1,wn,subset,"",CUr);
  PutWindowRecord(wn,CUr);
  RETURN;
END;

global
function boolean CUPricingDClassOnOKWindow(Integer wn)
begin
  record CUVc CUr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,CUr);
    PutWindowRecord(mwn,CUr);
  end;
  CloseWindow(wn);
  
  CUPricingDClassOnOKWindow = true;
end;

global
function Boolean CUPricingDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "SalesMan": res = CUDClassSalesManEFAfter(wn,fn,rownr,changed);
  end;
  CUPricingDClassAfterEditField = res;
  RETURN;
END;

global 
procedure CUDClassOpenCompany()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record CUVc CUr;
  
  wn = CurWindow;
  GetWindowRecord(wn,CUr);
  nwn = OpenWindow("CUCompanyDClass",1,wn,subset,"",CUr);
  PutWindowRecord(wn,CUr);
  RETURN;
END;

global
function boolean CUCompanyDClassOnOKWindow(Integer wn)
begin
  record CUVc CUr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,CUr);
    PutWindowRecord(mwn,CUr);
  end;
  CloseWindow(wn);
  
  CUCompanyDClassOnOKWindow = true;
end;

global
function Boolean CUCompanyDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "RegNr2": res = CUDClassRegNr2EFAfter(wn,changed);
  end;
  CUCompanyDClassAfterEditField = res;
  RETURN;
END;

global 
procedure CUDClassOpenAccounts()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record CUVc CUr;
  
  wn = CurWindow;
  GetWindowRecord(wn,CUr);
  nwn = OpenWindow("CUAccountsDClass",1,wn,subset,"",CUr);
  PutWindowRecord(wn,CUr);
  RETURN;
END;

global
function boolean CUAccountsDClassOnOKWindow(Integer wn)
begin
  record CUVc CUr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,CUr);
    PutWindowRecord(mwn,CUr);
  end;
  CloseWindow(wn);
  
  CUAccountsDClassOnOKWindow = true;
end;

global 
procedure CUDClassOpenWeb()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record CUVc CUr;
  
  wn = CurWindow;
  GetWindowRecord(wn,CUr);
  nwn = OpenWindow("CUWebDClass",1,wn,subset,"",CUr);
  PutWindowRecord(wn,CUr);
  RETURN;
END;

global
function boolean CUWebDClassOnOKWindow(Integer wn)
begin
  record CUVc CUr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,CUr);
    PutWindowRecord(mwn,CUr);
  end;
  CloseWindow(wn);
  
  CUWebDClassOnOKWindow = true;
end;

global 
procedure CUDClassOpenComments()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record CUVc CUr;
  
  wn = CurWindow;
  GetWindowRecord(wn,CUr);
  nwn = OpenWindow("CUCommentsDClass",1,wn,subset,"",CUr);
  PutWindowRecord(wn,CUr);
  RETURN;
END;

global
function boolean CUCommentsDClassOnOKWindow(Integer wn)
begin
  record CUVc CUr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,CUr);
    PutWindowRecord(mwn,CUr);
  end;
  CloseWindow(wn);
  
  CUCommentsDClassOnOKWindow = true;
end;

global 
procedure CUDClassOpenGuest()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record CUVc CUr;
  
  wn = CurWindow;
  GetWindowRecord(wn,CUr);
  nwn = OpenWindow("CUGuestDClass",1,wn,subset,"",CUr);
  PutWindowRecord(wn,CUr);
  RETURN;
END;

/*
very wierd code it is
global
function boolean CUGuestDClassOnOKWindow(Integer wn)
begin
  record CUVc CUr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (mwn>0) then begin
    if (WindowState(mwn)==Rs_normal) then begin
      SetWindowState(mwn,Rs_update);
    end;
    if (WindowState(mwn)!=Rs_normal) then begin
      GetWindowRecord(wn,CUr);
      PutWindowRecord(wn,CUr);
    end;
    CloseWindow(wn);
  end;
  
  CUGuestDClassOnOKWindow = true;
end
*/;

global 
procedure CUDClassOpenUserDefined()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record CUVc CUr;
  
  wn = CurWindow;
  GetWindowRecord(wn,CUr);
  nwn = OpenWindow("CUUserDefinedDClass",1,wn,subset,"",CUr);
  PutWindowRecord(wn,CUr);
  RETURN;
END;

global
function boolean CUUserDefinedDClassOnOKWindow(Integer wn)
begin
  record CUVc CUr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,CUr);
    PutWindowRecord(mwn,CUr);
  end;
  CloseWindow(wn);
  
  CUUserDefinedDClassOnOKWindow = true;
end;

global
function Boolean CUDClassCallPhone(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  //StopAlert("CUDClassCallPhone(" & wn & "," & fieldname & "," & fn & "," & rownr & "," & changed & ")");
end;

global
procedure SIPQueStatusLsm()
begin
  record RcVc RepSpec;
  Integer wn,nwn;
  string 255 subset;
  
  wn = CurWindow;
  RepSpec.Media = mtScreen;
  ReportDefaults(RepSpec,"AsteriskQueueStatusRClass");  
  RepSpec.repname = "AsteriskQueueStatusRn";
  RepSpec.critname = "AsteriskQueueStatusRClass";
  nwn = OpenWindow("AsteriskQueueStatusRClass",1,wn,subset,"",RepSpec);
end;

/*
global
function Boolean CUDClassHtmlFlagButtonAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record CUVc CUr;
  Integer nwn,mwn;
  
  if (changedf) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,CUr);
    if (CUr.HtmlFlag!=0 and SystemSupportsHTMLLetters()) then begin
      nwn = ReOpenHtmlEditorWindow(wn,true);
    end;
  end;
  CUDClassHtmlFlagButtonAfter = res;
  return;
end;

global
function Boolean HtmlCUDClassHtmlFlagButtonAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record CUVc CUr;
  Integer nwn,mwn;
  
  if (changedf) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,CUr);
    if (CUr.HtmlFlag==0 and SystemSupportsHTMLLetters()) then begin
      nwn = ReOpenHtmlEditorWindow(wn,false);
    end;
  end;
  HtmlCUDClassHtmlFlagButtonAfter = res;
  return;
end;

function Boolean ShouldUseHtmlEditor(record CUVc CUr,Boolean newf)
begin
  Boolean res;
  res = false;
  
  if (SystemSupportsHTMLLetters()==false) then begin
    goto LShouldUseHtmlEditor;
  end;
    
  if (newf) then begin
    res = true;
  end;
  
  if (CUr.HtmlFlag!=0) then begin
    res = true;
  end;

LShouldUseHtmlEditor:;
  ShouldUseHtmlEditor = res;
end;

global
function string 255 CUDClassOverrideClass(record CUVc CUr,Boolean newf)
begin
  string 255 res;
  Boolean htmlf;
  
  htmlf = ShouldUseHtmlEditor(CUr,newf);
  if (htmlf==true) then begin
    res = "HtmlCUDClass";
  end;
  
LCUDClassOverrideClass:
  CUDClassOverrideClass = res;
  return;
end;
*/