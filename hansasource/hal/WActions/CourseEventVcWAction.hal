remote procedure CourseEvent_PasteDiscount(var record CourseEventVc,Integer);
remote procedure CourseEvent_PastePrice(var record CourseEventVc,Integer);
remote procedure CourseEvent_PasteHotel(var record CourseEventVc,Integer);
remote procedure CourseEvent_PasteCustCode(var record CourseEventVc,Integer);
remote procedure CourseEvent_PastePriceList(var record CourseEventVc);
remote procedure CourseEvent_PastePriceListRow(var record CourseEventVc,Integer);
remote procedure CourseEvent_PasteItemCode(var record CourseEventVc,Integer);
remote procedure CourseEvent_PasteCourseCode(var record CourseEventVc);
remote procedure CourseEventVc_UpdatePrice(var record CourseEventVc);
remote procedure CourseEvent_SumUp(var record CourseEventVc);
remote function val GetCourseEventRowPrice(var record CourseEventVc, integer, boolean);
remote function val GetCoursePrice(var record CourseEventVc, boolean);

global 
function Boolean CourseEventDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record CourseEventVc CourseEventr;
  row CourseEventVc CourseEventrw;
  Boolean res;

  res = true;
  if (WindowState(wn)==2) then begin//Rs_update
    GetWindowRecord(wn,CourseEventr);
    MatRowGet(CourseEventr,rownr,CourseEventrw);
    if (CourseEventrw.InvoiceNo>0) then begin
      res = false;
    end;
  end;
LCourseEventDClassDeleteRowTest:;  
  CourseEventDClassDeleteRowTest = res;
  return;
end;

function Boolean CourseEventDClassTransDateEFAfter(integer wn,Integer rownr,Integer changedf)
begin
  record CourseEventVc CourseEventr;
  record CourseVc Courser; 
  val price;
  integer length;
  Boolean res;
  res = true;
 
  if (changedf!=0) then begin
    GetWindowRecord(wn,CourseEventr);      
    Courser.Code = CourseEventr.CourseCode;
    if (ReadFirstMain(Courser,1,true)) then begin
      if (changedf) then begin
        length = StringToInt(left(Courser.Length,2));
        if (length>0) then begin length = length - 1; end;
        CourseEventr.EndDate = AddDay(CourseEventr.TransDate,length);
      end;    
    end;
    PutWindowRecord(wn,CourseEventr);  
  end;  
  CourseEventDClassTransDateEFAfter = res;  
  RETURN;
END;

function Boolean CourseEventDClassCourseCodeEFAfter(integer wn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record CourseEventVc CourseEventr;

  res = true; 
  if (changedf!=0) then begin
    GetWindowRecord(wn,CourseEventr);      
    CourseEvent_PasteCourseCode(CourseEventr);
    PutWindowRecord(wn,CourseEventr);  
  end;
  CourseEventDClassCourseCodeEFAfter = res;  
  RETURN;
END;

function Boolean CourseEventDClassItemCodeEFAfter(integer wn,Integer rownr,Integer changedf)
begin
  record CourseEventVc CourseEventr;

  if (changedf!=0) then begin
    GetWindowRecord(wn,CourseEventr);      
    CourseEvent_PasteItemCode(CourseEventr,rownr);
    PutWindowRecord(wn,CourseEventr);  
  end;
  CourseEventDClassItemCodeEFAfter = true;  
  RETURN;
END;

function Boolean CourseEventDClassPriceListRowEFAfter(integer wn,Integer rownr,Integer changedf)
begin
  record CourseEventVc CourseEventr;

  if (changedf!=0) then begin
    GetWindowRecord(wn,CourseEventr);    
    CourseEvent_PastePriceListRow(CourseEventr,rownr);
    PutWindowRecord(wn,CourseEventr);  
  end;  
  CourseEventDClassPriceListRowEFAfter = true;  
  RETURN;
END;

function Boolean CourseEventDClassPriceListEFAfter(integer wn,Integer changedf)
begin
  record CourseEventVc CourseEventr;
  Boolean res;

  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,CourseEventr);  
    CourseEvent_PastePriceList(CourseEventr);
    PutWindowRecord(wn,CourseEventr);  
  end;  
  CourseEventDClassPriceListEFAfter = res;  
  RETURN;
END;

function Boolean CourseEventDClassCustCodeEFAfter(integer wn,Integer rownr,Integer changedf)
begin
  record CourseEventVc CourseEventr;
  Boolean res;

  res = true;
  if (changedf!=0) and (rownr >= 0) then begin
    GetWindowRecord(wn,CourseEventr);      
    CourseEvent_PasteCustCode(CourseEventr,rownr);
    PutWindowRecord(wn,CourseEventr);  
  end;

  CourseEventDClassCustCodeEFAfter = res;  
  RETURN;
END;

function Boolean CourseEventDClassHotelEFAfter(integer wn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record CourseEventVc CourseEventr;
    
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,CourseEventr);
    CourseEvent_PasteHotel(CourseEventr,rownr);
    PutWindowRecord(wn,CourseEventr);
  end;
  CourseEventDClassHotelEFAfter = res;  
  RETURN;
END;

function Boolean CourseEventDClassConferenceLocationEFAfter(integer wn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record CourseEventVc CourseEventr;
  record ResVc Resr;

  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,CourseEventr);  
    Resr.Code = CourseEventr.ConferenceLocation;
    if (ReadFirstMain(Resr,1,true)) then begin
      CourseEventr.ConferenceLocationName = Resr.Name;
      CourseEventr.MaxPersons = Resr.MaxPersons;
    end;
    PutWindowRecord(wn,CourseEventr);      
  end;
  CourseEventDClassConferenceLocationEFAfter = res;  
  RETURN;
END;

function Boolean CourseEventDClassPriceEFAfter(integer wn,Integer rownr,Integer changedf)
begin
  record CourseEventVc CourseEventr;
  Boolean res;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,CourseEventr);  
    CourseEvent_PastePrice(CourseEventr,rownr);
    PutWindowRecord(wn,CourseEventr);      
  end;  
  CourseEventDClassPriceEFAfter = res;  
  RETURN;
END;

function Boolean CourseEventDClassDiscountEFAfter(integer wn,Integer rownr,Integer changedf)
begin
  record CourseEventVc CourseEventr;
  Boolean res;

  res = true;
  if (changedf!=0) then begin  
    GetWindowRecord(wn,CourseEventr);    
    CourseEvent_PasteDiscount(CourseEventr,rownr);
    PutWindowRecord(wn,CourseEventr);  
  end;
  CourseEventDClassDiscountEFAfter = res;  
  RETURN;
END;

function Boolean CourseEventDClassContactNameEFAfter(integer wn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record CourseEventVc CourseEventr;
  row CourseEventVc CourseEventrw;
  record ContactRelVc ContactRelr;

  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,CourseEventr);
    MatRowGet(CourseEventr,rownr,CourseEventrw);

    ContactRelr.ContactName = CourseEventrw.ContactName;
    ContactRelr.CustCode = CourseEventrw.CustCode;
    if (ReadFirstKey("Contact",ContactRelr,2,true)) then begin
      CourseEventrw.ContactCode = ContactRelr.ContactCode;
      MatRowPut(CourseEventr,rownr,CourseEventrw);
    end else begin
      ContactRelr.ContactCode = CourseEventrw.ContactCode;
      ContactRelr.ContactName = CourseEventrw.ContactName;
      if (ReadFirstKey("ContactName",ContactRelr,2,true)) then begin
        CourseEventrw.CustCode = ContactRelr.CustCode;
        MatRowPut(CourseEventr,rownr,CourseEventrw);
      end;
    end;    
    CourseEvent_PasteCustCode(CourseEventr,rownr);
    PutWindowRecord(wn,CourseEventr);  
  end;
  CourseEventDClassContactNameEFAfter = res;
  RETURN;
END;

function Boolean CourseEventDClassContactCodeEFAfter(integer wn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record CourseEventVc CourseEventr;
  row CourseEventVc CourseEventrw;
  record CUVc partCUr;
  record CUVc CUr;
  record ContactRelVc ContactRelr;

  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,CourseEventr);
    MatRowGet(CourseEventr,rownr,CourseEventrw);
    partCUr.Code = CourseEventrw.ContactCode;
    if (ReadFirstMain(partCUr,1,true)) then begin
      if (partCUr.blockedFlag!=0) then begin
        MessageBox(22069,partCUr.Code);
      end else begin
        CourseEventrw.ContactName = partCUr.Name;

        ContactRelr.ContactCode = CourseEventrw.ContactCode;
        ContactRelr.ContactName = CourseEventrw.ContactName;
        if (ReadFirstKey("ContactName",ContactRelr,2,true)) then begin
        end;
        CourseEventrw.CustCode = ContactRelr.CustCode;
        CUr.Code = CourseEventrw.CustCode;
        ReadFirstMain(CUr,1,true);
        if (nonblank(CUr.InvoiceToCode)) then begin
          CourseEventrw.CustCode = CUr.InvoiceToCode;
        end;        
        CourseEventrw.BookingDate = CurrentDate;
        MatRowPut(CourseEventr,rownr,CourseEventrw);
        CourseEvent_SumUp(CourseEventr); 
      end;
    end;    
    PutWindowRecord(wn,CourseEventr);  
  end;
  CourseEventDClassContactCodeEFAfter = res;
  RETURN;
END;

function Boolean CourseEventDClassStatusEFAfter(integer wn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record CourseEventVc CourseEventr;
  row CourseEventVc CourseEventrw;

  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,CourseEventr);
    MatRowGet(CourseEventr,rownr,CourseEventrw);
    if (CourseEventrw.Status==kCourseEventPaticipantStatusCancelled) then begin
      CourseEventrw.CancelDate = CurrentDate;
    end;
    MatRowPut(CourseEventr,rownr,CourseEventrw);
    PutWindowRecord(wn,CourseEventr);        
  end;
  CourseEventDClassStatusEFAfter = res;
  RETURN;
END;

function Boolean CourseEventDClassInvoiceNoEFAfter(integer wn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record CourseEventVc CourseEventr;
  row CourseEventVc CourseEventrw;

  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,CourseEventr);
    MatRowGet(CourseEventr,rownr,CourseEventrw);
    if (CourseEventrw.InvoiceNo<=0) and (CourseEventrw.Status==kCourseEventPaticipantStatusPaying) then begin
      if (CourseEventr.StatusFlag==1) then begin
        CourseEventr.StatusFlag = 0;
        PutWindowRecord(wn,CourseEventr);        
      end;
    end;
  end;
  CourseEventDClassInvoiceNoEFAfter = res;
  RETURN;
END;

global
function Boolean CourseEventDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record CourseEventVc CourseEventr;
  record CourseVc Courser;

  switch (fieldname) begin
    case "CourseCode" : res = CourseEventDClassCourseCodeEFAfter(wn,rownr,changed);
    case "ItemCode" : res = CourseEventDClassItemCodeEFAfter(wn,rownr,changed);    
    case "CustCode" : res = CourseEventDClassCustCodeEFAfter(wn,rownr,changed);
    case "PriceListRow" : res = CourseEventDClassPriceListRowEFAfter(wn,rownr,changed);      
    case "PriceList" : res = CourseEventDClassPriceListEFAfter(wn,changed);      
    case "Hotel" : res = CourseEventDClassHotelEFAfter(wn,rownr,changed);   
    case "ConferenceLocation" : res = CourseEventDClassConferenceLocationEFAfter(wn,rownr,changed);
    case "Discount" :  res = CourseEventDClassDiscountEFAfter(wn,rownr,changed);    
    case "Price" :  res = CourseEventDClassPriceEFAfter(wn,rownr,changed);
    case "ContactName" : 
      res = CourseEventDClassContactNameEFAfter(wn,rownr,changed);
    case "ContactCode" : 
      res = CourseEventDClassContactCodeEFAfter(wn,rownr,changed);
    case "TransDate" :  res = CourseEventDClassTransDateEFAfter(wn,rownr,changed);    
    case "Status" :  res = CourseEventDClassStatusEFAfter(wn,rownr,changed);  
    case "InvoiceNo" :  res = CourseEventDClassInvoiceNoEFAfter(wn,rownr,changed);        
  end;
  CourseEventDClassAfterEditField = res;
  RETURN;
END;


global
function Boolean CourseEventDClassSwitchRow(Integer wn,Integer rownr)
BEGIN
  record CourseEventVc CourseEventr;
  row CourseEventVc CourseEventrw;
/*
  GetWindowRecord(wn,CourseEventr);  
  CourseEvent_SumUp(CourseEventr); 
  PutWindowRecord(wn,CourseEventr);      
*/  
  CourseEventDClassSwitchRow = true;
  RETURN;
END;

global
function Boolean CourseEventDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;

  res = true;
  switch (fieldname) begin
  end;  
  CourseEventDClassActiveEditField = res;
  RETURN;
END;

global
function Boolean CourseEventDClassRemindersSentButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;

  res = false;
  CourseEventDClassRemindersSentButtonAction = res;
  RETURN;
END;

global
function Boolean CourseEventDClassOpenRecord(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record CourseEventVc CourseEventr;
  row CourseEventVc CourseEventrw;
  record IVVc IVr;
  Integer nwn;
  
  switch (fieldname) begin
    case "InvoiceNo":
      GetWindowRecord(wn,CourseEventr);  
      MatRowGet(CourseEventr,rownr,CourseEventrw);
      if (CourseEventrw.InvoiceNo>0) then begin
        IVr.SerNr = CourseEventrw.InvoiceNo;
        if (ReadFirstMain(IVr,1,true)) then begin
          nwn = OpenWindow("IVDClass",0,0,"","",IVr);    
        end;
      end;
  end;
  CourseEventDClassOpenRecord = res;
  return;
end;
