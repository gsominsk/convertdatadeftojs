external function string 40 ObjSClassPasteSpecialWindowClass(string);
remote procedure RecAction_raBud1AccObjCalc(var record Bud1Vc);
remote procedure RecAction_raBud1Sumup(var record Bud1Vc);
external procedure NormalizeObjstr(var string);
external function Boolean GetAccName(string,var string,Integer);
remote updating function Boolean RecordAction_rlBud1LOK(var record Bud1Vc);
external procedure FindOTforAcc(string,var string);

global
procedure Bud1Sum(var record Bud1Vc Bud1p)
begin
  Integer i,rwcnt;
  row Bud1Vc b1rrw;
  
  Bud1p.BudSum = blankval;
  rwcnt = MatRowCnt(Bud1p);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(Bud1p,i,b1rrw);
    Bud1p.BudSum = Bud1p.BudSum + b1rrw.sval;
  end;
  return;
end;

function Boolean Bud1DClassAccNumberEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record Bud1Vc Bud1r;
  string 255 tstr;

  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,Bud1r);
    if (GetAccName(Bud1r.AccNumber,tstr,60)) then begin
      Bud1r.Comment = tstr;
      PutWindowRecord(wn,Bud1r);    
    end;
  end;
  Bud1DClassAccNumberEFAfter = res;
  RETURN;
END;

function Boolean Bud1DClassObjectsEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record Bud1Vc Bud1r;
  string 255 tstr;

  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,Bud1r);
    tstr = Bud1r.Objects;
    NormalizeObjstr(tstr);
    Bud1r.Objects = tstr;
    PutWindowRecord(wn,Bud1r);    
  end;
  Bud1DClassObjectsEFAfter = res;
  RETURN;
END;

function Boolean Bud1DClasssvalEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record Bud1Vc Bud1r;
  string 255 tstr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,Bud1r);
    Bud1Sum(Bud1r);
    PutWindowRecord(wn,Bud1r);    
  end;
  Bud1DClasssvalEFAfter = res;
  return;
end;

global
function Boolean Bud1DClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "AccNumber": res = Bud1DClassAccNumberEFAfter(wn,fn,rownr,changed);
    case "Objects": res = Bud1DClassObjectsEFAfter(wn,fn,rownr,changed);
    case "sval": res = Bud1DClasssvalEFAfter(wn,rownr,changed!=0);
  end;
  Bud1DClassAfterEditField = res;
  RETURN;
END;

global
procedure RecalculateBud1Dsm()
BEGIN
  record Bud1Vc Bud1r;
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,Bud1r);
  if (MatRowCnt(Bud1r)>0) then begin
    RecAction_raBud1Sumup(Bud1r);
    PutWindowRecord(wn,Bud1r);
  end else begin
    MessageBox(1024,"");
    WindowFieldGoto(wn,Bud1r,0,"BudDate",false);
  end;
  RETURN;  
END;

global
procedure CalcSumBud1Dsm()
BEGIN
  record Bud1Vc Bud1r;
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,Bud1r);
  RecAction_raBud1AccObjCalc(Bud1r);
  PutWindowRecord(wn,Bud1r);
  RETURN;  
END;

global
function Boolean Bud1DClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record Bud1Vc Bud1r;
  
  res=true;
  if (wnst==2) then begin//updatemode
    GetPrevWindowRecord(wn,Bud1r);
    if (Bud1r.OKFlag!=0) then begin
      res=false;
    end;
  end;    
  Bud1DClassActiveEditField = res;
  return;
END;

global
function Boolean Bud1DClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record Bud1Vc Bud1r;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,Bud1r);
    if (Bud1r.OKFlag!=0) then begin
      res = false;
      if ((UserCanAction("UnOKAll",false) or UserCanAction("UnOKBud",true))) then begin
        res = true;
      end;
    end;
    if (Bud1r.OKFlag==0) then begin
      res = true;
      if (UserCanAction("BudOK",true)==false) then begin
        res = false;
        MessageBox(1274,StringFromStringSet(3,"BudOK"));
      end;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,Bud1r);
    if (Bud1r.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  Bud1DClassOKFlagButtonAction = res;
  return;
END;

global
updating procedure Bud1Lsm()
begin
  record Bud1Vc Bud1r;
  LongInt i;
  
  i = 1;
  while (GetRecordFromBrowse(Bud1r,CurWindow,i)) begin
  if (RecordAction_rlBud1LOK(Bud1r)) then begin end;
    i = i + 1;
  end;
  UpdateBrowses("Bud1Vc");
  
  return;
end;

procedure Bud1DClassSpecPasteNameObjects(Integer wn,var string psname)
begin
  record Bud1Vc Bud1r;
  string 200 typ;

  psname = ObjSClassPasteSpecialWindowClass("ObjSClass");
  GetWindowRecord(wn,Bud1r);
  if (nonblank(Bud1r.AccNumber)) then begin 
    FindOTforAcc(Bud1r.AccNumber,typ);
    if (nonblank(typ)) then begin
      psname = "TRObjSClass";
    end;     
  end;
  return;
end;

global
function string 40 Bud1DClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "Objects":Bud1DClassSpecPasteNameObjects(wn,psname);
  end;
  Bud1DClassSpecPasteName = psname;
  return;
end;