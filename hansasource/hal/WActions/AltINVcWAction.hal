remote procedure AltINVc_PasteItemCode(var record AltINVc);
remote procedure AltINVc_PasteAltItemCode(var record AltINVc);
remote procedure AltINVc_PasteCustCode(var record AltINVc);
external procedure SwapStr(var string,var string);
external function string 40 INSClassPasteSpecialWindowClass(string);
remote function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure FindMotherWindowLocation(Integer,var string,var Date);
external procedure SendArtStat(string,string,string,val,val,val,Date,Integer);

global
function Boolean AltINDClassItemCodeEFAfter(Integer wn,Integer changedf)
begin
  record AltINVc AltINr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,AltINr);
    AltINVc_PasteItemCode(AltINr);
    PutWindowRecord(wn,AltINr);
  end;
  
  AltINDClassItemCodeEFAfter = true;
  return;
end;

global
function Boolean AltINDClassAltItemCodeEFAfter(Integer wn,Integer changedf)
begin
  record AltINVc AltINr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,AltINr);
    AltINVc_PasteAltItemCode(AltINr);
    PutWindowRecord(wn,AltINr);
  end;
  
  AltINDClassAltItemCodeEFAfter = true;
  return;
end;

global
function Boolean AltINDClassCustCodeEFAfter(Integer wn,Integer changedf)
begin
  record AltINVc AltINr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,AltINr);
    AltINVc_PasteCustCode(AltINr);
    PutWindowRecord(wn,AltINr);
  end;
  
  AltINDClassCustCodeEFAfter = true;
  return;
end;

global
function Boolean AltINDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "ItemCode": res = AltINDClassItemCodeEFAfter(wn,changed);
    case "AltItemCode": res = AltINDClassAltItemCodeEFAfter(wn,changed);
    case "CustCode": res = AltINDClassCustCodeEFAfter(wn,changed);
  end;
  
  AltINDClassAfterEditField = res;
  return;
end;

global
function Boolean AltINSClassSwitchRow(Integer wn,Integer rownr)
begin
  record AltINVc AltINr;
  record INVc INr;
  val t,tproc,unitprdisc;
  string 20 location;
  Date td;

  if (FindWindow("ArtStatIClass")!=0) then begin
    if (ReadMarkedRecord(wn,AltINr)) then begin
      FindMotherWindowLocation(wn,location,td);
      ReadFirstItem(AltINr.AltItemCode,INr,false,false);
      SendArtStat(INr.Code,location,INr.Recepy,t,tproc,unitprdisc,td,0);
    end;
  end;
  
  AltINSClassSwitchRow = true;
  return;
end;

global
updating procedure ReverseAltINsm()
begin
  Integer wn;
  record AltINVc AltINr;
  string 255 tstr;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,AltINr);
    CloseWindow(wn);
    SwapStr(AltINr.ItemCode,AltINr.AltItemCode);
    SwapStr(AltINr.ItemName,AltINr.AltItemName);
    wn = OpenWindow("AltINDClass",1,0,"","",AltINr);
    WindowDoOk(wn,0);
  end else begin
    Beep;
  end;
  
  return;
end;

global
procedure AllItemsAltINsm()
begin
  Integer wn,mwn,i;
  record INVc INr;
  record AltINVc AltINr;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  CloseWindow(wn);
  wn = OpenWindow(INSClassPasteSpecialWindowClass("INSClass"),0,mwn,"","",INr);
  
  return;
end;

global
procedure AltItemAltINsm()
begin
  Integer wn,mwn,i;
  record AltINVc AltINr,AltIN2r;
  
  i = 1;
  wn = CurWindow;
  while (GetRecordFromBrowse(AltINr,wn,i)) begin
    i = i + 1;
  end;
  if (i==2) then begin
    mwn = MotherWindow(wn);
    CloseWindow(wn);
    wn = OpenWindow("AltINSClass",0,mwn,AltINr.AltItemCode,"",AltIN2r);
  end else begin
    MessageBox(26210,"");
  end;
  
  return;
end;

