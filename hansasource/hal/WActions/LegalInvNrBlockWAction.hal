
function Boolean LegalInvNrTClassPurchDateEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;

  res = false;
  if (changedf) then begin
    GetWindowRecord(wn,LINrb);
    MatRowGet(LINrb,rownr,LINrbrw);
    if (HasLocalization("PRT")) then begin
      if (LINrbrw.RegType==kOfficialNumTypeRecoverdIVVc or LINrbrw.RegType==kOfficialNumTypeRecoverdCashIVVc or LINrbrw.RegType==kOfficialNumTypeRecoverdPOSIVVc or
          LINrbrw.RegType==kOfficialNumTypeRecoverdCreditIVVc or LINrbrw.RegType==kOfficialNumTypeRecoverdInterestIVVc or LINrbrw.RegType==kOfficialNumTypeRecoverdCashInvoiceReceiptIVVc or
          LINrbrw.RegType==kOfficialNumTypeRecoverdCashInvoiceReceiptIVVc or LINrbrw.RegType==kOfficialNumTypeManualIPVc or
          LINrbrw.RegType==kOfficialNumTypeRecoveredIPVc) then begin
          LINrbrw.SelectionType = kLegalInvNrSelectionTypeAtOK;
          LINrbrw.Chronology = kLegalInvNrChronologyTypeForced;
          MatRowPut(LINrb,rownr,LINrbrw);
          PutWindowRecord(wn,LINrb);  
      end else begin
        LINrbrw.SelectionType = kLegalInvNrSelectionTypeAtOK;
        LINrbrw.Chronology = kLegalInvNrChronologyTypeForced;
        MatRowPut(LINrb,rownr,LINrbrw);
        PutWindowRecord(wn,LINrb);    
      end;
    end;
    if (HasLocalization("AGO")) then begin
      LINrbrw.SelectionType = kLegalInvNrSelectionTypeAtOK;
      LINrbrw.Chronology = kLegalInvNrChronologyTypeForced;
      MatRowPut(LINrb,rownr,LINrbrw);
      PutWindowRecord(wn,LINrb);
    end;
    if (HasLocalization("POL")) then begin
      LINrbrw.SelectionType = kLegalInvNrSelectionTypeAtInsert;
      MatRowPut(LINrb,rownr,LINrbrw);
      PutWindowRecord(wn,LINrb);    
    end;
  end;
  res = true;
  LegalInvNrTClassPurchDateEFAfter = res;
  return;
end;

function Boolean LegalInvNrTClassRegTypeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;

  res = false;
  if (changedf) then begin
    GetWindowRecord(wn,LINrb);
    MatRowGet(LINrb,rownr,LINrbrw);
    if (HasLocalization("PRT")) then begin
      if (LINrbrw.RegType==kOfficialNumTypeRecoverdIVVc or LINrbrw.RegType==kOfficialNumTypeRecoverdCashIVVc or LINrbrw.RegType==kOfficialNumTypeRecoverdPOSIVVc or 
          LINrbrw.RegType==kOfficialNumTypeManualIVVc or LINrbrw.RegType==kOfficialNumTypeManualCashIVVc or LINrbrw.RegType==kOfficialNumTypeManualPOSIVVc or 
          LINrbrw.RegType==kOfficialNumTypeManualCreditIVVc or LINrbrw.RegType==kOfficialNumTypeManualInterestIVVc or 
          LINrbrw.RegType==kOfficialNumTypeRecoverdCreditIVVc or LINrbrw.RegType==kOfficialNumTypeRecoverdInterestIVVc or
          LINrbrw.RegType==kOfficialNumTypeManualCashInvoiceReceiptIVVc or LINrbrw.RegType==kOfficialNumTypeManualRetVc or
          LINrbrw.RegType==kOfficialNumTypeManualRetPUVc or 
          LINrbrw.RegType==kOfficialNumTypeManualStockMovVc or LINrbrw.RegType==kOfficialNumTypeRecoverdStockMovVc or
          LINrbrw.RegType==kOfficialNumTypeManualCashInvoiceReceiptIVVc or LINrbrw.RegType==kOfficialNumTypeRecoverdCashInvoiceReceiptIVVc or
          LINrbrw.RegType==kOfficialNumTypeManualOwnGoodsTransStockMovVc or LINrbrw.RegType==kOfficialNumTypeManualConsigmentStockMovVc or
          LINrbrw.RegType==kOfficialNumTypeManualThirdEntGoodsTransStockMovVc or LINrbrw.RegType==kOfficialNumTypeManualGlobalTransStockMovVc or 
          LINrbrw.RegType==kOfficialNumTypeManualSHVc or LINrbrw.RegType==kOfficialNumTypeRecoverdSHVc or 
          LINrbrw.RegType==kOfficialNumTypeManualRetVc or LINrbrw.RegType==kOfficialNumTypeRecoverdRetVc or 
          LINrbrw.RegType==kOfficialNumTypeManualRetPUVc or LINrbrw.RegType==kOfficialNumTypeRecoverdRetPUVc or 
          LINrbrw.RegType==kOfficialNumTypeManualGlobalTransStockMovVc or LINrbrw.RegType==kOfficialNumTypeRecoverdGlobalTransStockMovVc or 
          LINrbrw.RegType==kOfficialNumTypeManualThirdEntGoodsTransStockMovVc or LINrbrw.RegType==kOfficialNumTypeRecoverdThirdEntGoodsTransStockMovVc or 
          LINrbrw.RegType==kOfficialNumTypeManualConsigmentStockMovVc or LINrbrw.RegType==kOfficialNumTypeRecoverdConsigmentStockMovVc or 
          LINrbrw.RegType==kOfficialNumTypeManualOwnGoodsTransStockMovVc or LINrbrw.RegType==kOfficialNumTypeRecoverdOwnGoodsTransStockMovVc or 
          LINrbrw.RegType==kOfficialNumTypeManualIPVc or LINrbrw.RegType==kOfficialNumTypeRecoveredIPVc or
          LINrbrw.RegType==kOfficialNumTypeReceiptIVVc or LINrbrw.RegType==kOfficialNumTypeLiquidationIVVc) then begin
        LINrbrw.SelectionType = kLegalInvNrSelectionTypeManual;
        LINrbrw.Chronology = kLegalInvNrChronologyTypeForced;
        MatRowPut(LINrb,rownr,LINrbrw);
        PutWindowRecord(wn,LINrb);    
      end;
      if (LINrbrw.RegType==kOfficialNumTypeIPVc) then begin 
        LINrbrw.SelectionType = kLegalInvNrSelectionTypeAtOK;
        LINrbrw.Chronology = kLegalInvNrChronologyTypeForced;
        MatRowPut(LINrb,rownr,LINrbrw);
        PutWindowRecord(wn,LINrb);    
      end;
    end;
  end;
  res = true;
  LegalInvNrTClassRegTypeEFAfter = res;
  return;
end;

global
function Boolean LegalInvNrTClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "PurchDate": res = LegalInvNrTClassPurchDateEFAfter(wn,rownr,changed!=0);
    case "RegType": res = LegalInvNrTClassRegTypeEFAfter(wn,rownr,changed!=0);
  end;
  LegalInvNrTClassAfterEditField = res;
  return;
end;

global
function Boolean LegalInvNrTClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  
  res = true;
  switch (fieldname) begin
    case "SelectionType": 
      GetWindowRecord(wn,LINrb);
      MatRowGet(LINrb,rownr,LINrbrw);
      if (HasLocalization("PRT")) then begin
        if ((LINrbrw.RegType!=kOfficialNumTypeManualIVVc) 
          and (LINrbrw.RegType!=kOfficialNumTypeManualCashIVVc) 
          and (LINrbrw.RegType!=kOfficialNumTypeManualPOSIVVc)
          and (LINrbrw.RegType!=kOfficialNumTypeManualCreditIVVc)
          and (LINrbrw.RegType!=kOfficialNumTypeManualInterestIVVc)
          and (LINrbrw.RegType!=kOfficialNumTypeStockMovVc)
          and (LINrbrw.RegType!=kOfficialNumTypeOwnGoodsTransStockMovVc)
          and (LINrbrw.RegType!=kOfficialNumTypeConsigmentStockMovVc)
          and (LINrbrw.RegType!=kOfficialNumTypeThirdEntGoodsTransStockMovVc)
          and (LINrbrw.RegType!=kOfficialNumTypeGlobalTransStockMovVc)
          and (LINrbrw.RegType!=kOfficialNumTypeIPVc)
          and (LINrbrw.RegType!=kOfficialNumTypeRetPUVc)
          and (LINrbrw.RegType!=kOfficialNumTypeSHVc)) then begin 
            res = false; 
        end;
      end;
      if (HasLocalization("AGO")) then begin
        res = false;
      end;
    case "Chronology": 
      if (HasLocalization("AGO,PRT")) then begin res = false; end;
  end;
  LegalInvNrTClassActiveEditField = res;
  return;
end;
