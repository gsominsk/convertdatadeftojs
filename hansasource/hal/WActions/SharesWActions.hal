remote function val GetNumberOfShares(string,Date);
external procedure SharesSellSumup(var record SharesSellVc);
external procedure SharesBuySumup(var record SharesBuyVc);
external procedure SharesTranSumup(var record SharesBuyVc);
external procedure GetUserName(string,var string);

function Boolean SharesDClassUserCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record SharesVc Sharesr;
  Boolean res;
  record UserVc USr;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,Sharesr);
    USr.Code = Sharesr.UserCode;
    ReadFirstMain(USr,1,true);
    Sharesr.Name = USr.Name;
    Sharesr.CustCode = USr.CustCode;
    PutWindowRecord(wn,Sharesr);
  end;
  SharesDClassUserCodeEFAfter = res;
  return;
end;

function Boolean SharesDClassFromToSerNoEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record SharesVc Sharesr;
  string 255 name;
  Boolean res;
  val a,b;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,Sharesr);
    a = StringToVal(Sharesr.FromSerNo,M4UVal);
    b = StringToVal(Sharesr.ToSerNo,M4UVal);
    if ((a>0) and (b>a)) then begin
      Sharesr.TotQty = b - a + 1;
    end;
    PutWindowRecord(wn,Sharesr);
  end;
  SharesDClassFromToSerNoEFAfter = res;
  return;
end;

global
function Boolean SharesDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = false;
  switch (fieldname) begin
    case "UserCode":  res = SharesDClassUserCodeEFAfter(wn,fn,rownr,changed);
    case "FromSerNo": res = SharesDClassFromToSerNoEFAfter(wn,fn,rownr,changed);
    case "ToSerNo":   res = SharesDClassFromToSerNoEFAfter(wn,fn,rownr,changed);
  end;
  SharesDClassAfterEditField = res;
  RETURN;
END;

function Boolean SharesSellDClassUserCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record SharesSellVc SharesSellr;
  string 255 name;
  Boolean res;
  val q;
  
  res = true;
  GetWindowRecord(wn,SharesSellr);
  if (changedf!=0) then begin
    GetUserName(SharesSellr.UserCode,name);
    SharesSellr.Name = name;
    PutWindowRecord(wn,SharesSellr);
  end;
  q = GetNumberOfShares(SharesSellr.UserCode,CurrentDate);
  if (q!=SharesSellr.RegQty) then begin
    SharesSellr.RegQty = q;
    SharesSellSumup(SharesSellr);
    PutWindowRecord(wn,SharesSellr);
  end;
  SharesSellDClassUserCodeEFAfter = res;
  return;
end;

function Boolean SharesSellDClassQtyEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record SharesSellVc SharesSellr;
  row SharesSellVc SharesSellrw;
  string 255 name;
  Boolean res;
  val a,b;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,SharesSellr);
    MatRowGet(SharesSellr,rownr,SharesSellrw);
    SharesSellrw.RegDate = CurrentDate;
    SharesSellrw.RegTime = CurrentTime;
    MatRowPut(SharesSellr,rownr,SharesSellrw);
    SharesSellSumup(SharesSellr);
    PutWindowRecord(wn,SharesSellr);
    if (SharesSellr.RemQty<0) then begin
      MessageBox(2244,"");
    end;
  end;
  SharesSellDClassQtyEFAfter = res;
  return;
end;

global
function Boolean SharesSellDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = false;
  switch (fieldname) begin
    case "UserCode": res = SharesSellDClassUserCodeEFAfter(wn,fn,rownr,changed);
    case "Qty": res = SharesSellDClassQtyEFAfter(wn,rownr,changed);
  end;
  SharesSellDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean SharesSellDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = true;
  switch (fieldname) begin
    case "RegDate": res = false;
    case "RegTime": res = false;
  end;
  SharesSellDClassActiveEditField = res;
  return;
end;

global
function Boolean SharesSellDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record SharesSellVc SharesSellr;
  Boolean res;

  if (rownr>=0) then begin
    GetWindowRecord(wn,SharesSellr);    
    SharesSellSumUp(SharesSellr);
    PutWindowRecord(wn,SharesSellr);    
  end;
  res = true;
  SharesSellDClassOnOverStrike = true;
  RETURN;
END;

function Boolean SharesBuyDClassUserCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record SharesBuyVc SharesBuyr;
  string 255 name;
  Boolean res;
  val q;
  
  res = true;
  GetWindowRecord(wn,SharesBuyr);
  if (changedf!=0) then begin
    GetUserName(SharesBuyr.UserCode,name);
    SharesBuyr.Name = name;
    PutWindowRecord(wn,SharesBuyr);
  end;
  SharesBuyDClassUserCodeEFAfter = res;
  return;
end;

function Boolean SharesBuyDClassQtyEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record SharesBuyVc SharesBuyr;
  row SharesBuyVc SharesBuyrw;
  string 255 name;
  Boolean res;
  val a,b;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,SharesBuyr);
    MatRowGet(SharesBuyr,rownr,SharesBuyrw);
    SharesBuyrw.RegDate = CurrentDate;
    SharesBuyrw.RegTime = CurrentTime;
    MatRowPut(SharesBuyr,rownr,SharesBuyrw);
    SharesBuySumup(SharesBuyr);
    PutWindowRecord(wn,SharesBuyr);
  end;
  SharesBuyDClassQtyEFAfter = res;
  return;
end;

global
function Boolean SharesBuyDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = false;
  switch (fieldname) begin
    case "UserCode": res = SharesBuyDClassUserCodeEFAfter(wn,fn,rownr,changed);
    case "Qty": res = SharesBuyDClassQtyEFAfter(wn,fn,rownr,changed);
  end;
  SharesBuyDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean SharesBuyDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = true;
  switch (fieldname) begin
    case "RegDate": res = false;
    case "RegTime": res = false;
  end;
  SharesBuyDClassActiveEditField = res;
  return;
end;

global
function Boolean SharesBuyDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record SharesBuyVc SharesBuyr;
  Boolean res;

  if (rownr>=0) then begin
    GetWindowRecord(wn,SharesBuyr);    
    SharesBuySumUp(SharesBuyr);
    PutWindowRecord(wn,SharesBuyr);    
  end;
  res = true;
  SharesBuyDClassOnOverStrike = true;
  RETURN;
END;

function Boolean SharesTranDClassSellUserCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record SharesTranVc SharesTranr;
  string 255 name;
  Boolean res;
  val q;
  
  res = true;
  GetWindowRecord(wn,SharesTranr);
  if (changedf!=0) then begin
    GetUserName(SharesTranr.SellUserCode,name);
    SharesTranr.SellName = name;
    PutWindowRecord(wn,SharesTranr);
  end;
  SharesTranDClassSellUserCodeEFAfter = res;
  return;
end;

function Boolean SharesTranDClassBuyUserCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record SharesTranVc SharesTranr;
  string 255 name;
  Boolean res;
  val q;
  
  res = true;
  GetWindowRecord(wn,SharesTranr);
  if (changedf!=0) then begin
    GetUserName(SharesTranr.BuyUserCode,name);
    SharesTranr.BuyName = name;
    PutWindowRecord(wn,SharesTranr);
  end;
  SharesTranDClassBuyUserCodeEFAfter = res;
  return;
end;

function Boolean SharesTranDClassQtyEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record SharesTranVc SharesTranr;
  string 255 name;
  Boolean res;
  val a,b;
  
  res = true;
  if (changedf!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,SharesTranr);
    SharesTranSumup(SharesTranr);
    PutWindowRecord(wn,SharesTranr);
  end;
  SharesTranDClassQtyEFAfter = res;
  return;
end;

function Boolean SharesTranDClassPriceEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record SharesTranVc SharesTranr;
  string 255 name;
  Boolean res;
  val a,b;
  
  res = true;
  if (changedf!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,SharesTranr);
    SharesTranSumup(SharesTranr);
    PutWindowRecord(wn,SharesTranr);
  end;
  SharesTranDClassPriceEFAfter = res;
  return;
end;

global
function Boolean SharesTranDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = false;
  switch (fieldname) begin
    case "SellUserCode": res = SharesTranDClassSellUserCodeEFAfter(wn,fn,rownr,changed);
    case "BuyUserCode": res = SharesTranDClassBuyUserCodeEFAfter(wn,fn,rownr,changed);
    case "Qty": res = SharesTranDClassQtyEFAfter(wn,fn,rownr,changed);
    case "Price": res = SharesTranDClassPriceEFAfter(wn,fn,rownr,changed);
  end;
  SharesTranDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean SharesTranDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record SharesTranVc SharesTranr;
  Boolean res;

  if (rownr>=0) then begin
    GetWindowRecord(wn,SharesTranr);    
    SharesTranSumUp(SharesTranr);
    PutWindowRecord(wn,SharesTranr);    
  end;
  res = true;
  SharesTranDClassOnOverStrike = true;
  RETURN;
END;

global
function Boolean SharesTranDClassUpdateTest(Integer wn)
BEGIN
  Boolean res;
  record SharesTranVc SharesTranr;
  
  res = true;
  GetWindowRecord(wn,SharesTranr);
  if (SharesTranr.OKFlag>0) then begin
    res = false;
  end;
  SharesTranDClassUpdateTest = res;
  RETURN;
END;

global
procedure SharesInfoWsm()
BEGIN
  Integer wn;
  record RcVc RepSpec;

  RepSpec.repname = "SharesInfoRn";
  ReportDefaults(RepSpec,"SharesInfoRClass");
  RepSpec.Media = mtScreen;
  RepSpec.ArtMode = 0;
  RepSpec.flags[0] = 0;
  RepSpec.flags[19] = 1;
  RunReport(RepSpec,0);   
  RETURN;
END;

global
function Boolean BuySellRequestDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = false;
  BuySellRequestDClassActiveEditField = res;
  RETURN;
END;

global
function Boolean BuySellRequestDClassSellFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  
  res = false;
  BuySellRequestDClassSellFlagButtonAction = res;
  RETURN;
END;

global
function Boolean BuySellRequestDClassUpdateTest(Integer wn)
BEGIN
  Boolean res;
  record BuySellRequestVc BuySellRequestr;
  
  res = true;
  GetWindowRecord(wn,BuySellRequestr);
  if (BuySellRequestr.OKFlag>0) then begin
    res = false;
  end;
  BuySellRequestDClassUpdateTest = res;
  RETURN;
END;

