external function Integer OYTestApprovalStatus(record OYVc);
remote procedure OYDClassOnOpenWindowRemote(var record OYVc,var Integer);
remote procedure OYVc_PasteDelCountry(var record OYVc,string);
remote procedure OYVc_PasteInvCountry(var record OYVc,string);
remote procedure OYDUpdatePrices(var record OYVc,Boolean);
remote function Integer EditingAcceptanceRejectedAllowed(Integer,string,string,Integer,string);
external function Boolean OYDClassActiveEditField(Integer,string,Integer,Integer,Integer,Integer);
external procedure SendArtStat(string,string,string,val,val,val,Date,Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function roundmode SetRoundModeD(Integer);
external procedure OYDchsum(record OYr,Integer);
remote procedure OYVc_PasteOYDate(var record OYVc);
external function Boolean TestForMATVARINS(Integer);
external procedure OYVc_PastePrice(var record OYVc,Integer,var Boolean);
remote procedure OYVc_PasteEMCode(var record OYVc,Integer,var Boolean);
remote procedure OYVc_PasteTimeClass(var record OYVc,Integer,var Boolean);
external procedure OYVc_PasteMarkup(var record OYVc,Integer,var Boolean);
remote procedure OYVc_PasteUnitXval(var record OYVc,Integer,var Boolean);
remote procedure OYVc_PasteUnitYval(var record OYVc,Integer,var Boolean);
remote procedure OYVc_PasteUnitZval(var record OYVc,Integer,var Boolean);
remote procedure OYVc_PasteDelAddrCode(var record OYVc);
remote procedure OYVc_PasteCurncyCode(var record OYVc,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean OYDClassSumEFAfter(Integer,Integer,Integer);
external function Boolean OYDClassVATCodeEFAfter(Integer,Integer,Integer);
external function Boolean OYDClassTaxTemplateCodeEFAfter(Integer,Integer,Boolean);
external function Boolean OYDClassvRebateEFAfter(Integer,Integer,Integer);
remote procedure OYVc_PasteUnitFactQuant(var record OYVc,Integer);
remote procedure OYVc_PasteUnitCode(var record OYVc,Integer);
remote procedure OYVc_PasteSerialNr(var record OYVc,Integer);
external function Boolean GetPD(var record PDVc);
external procedure MulM4ProcVal(val,val,var val);
remote procedure OYVc_PasteSalesMan(var record OYVc,string);
external function Boolean OYDClassSwitchRow(Integer,Integer);
remote function Boolean OYVc_PastePRCode(var record OYVc,string,var string);
remote function Boolean OYVc_PasteArtCode(var record OYVc,Integer,var string,var string);
remote procedure OYVc_PasteQuant(var record OYVc,Integer,Boolean,var Boolean);
external function Boolean OYDchrsum(var record OYVc,Integer,Integer);
external function Boolean OYDClassUnitFactPriceEFAfter(Integer,Integer,Integer);
external procedure CalcProc(val,val,var val);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
remote procedure OYSumup(var record OYVc);
external procedure AddCalcPrice(record INVc,record CPMVc,string,val,string,Integer,var val);
remote function Boolean PasteCustInOY(var record OYVc,string,string,var string,Boolean);
remote procedure OYVc_PasteLocation(var record OYVc);
remote procedure OYVc_PasteInvoiceToCode(var record OYVc);
remote procedure OYVc_PasteRebCode(var record OYVc);
external function Boolean OpenContactRecord(string,string);
 
global 
function Boolean OYDClassQuantEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record OYVc OYr;
  Boolean chsum;
  record ModuleBlock OptFeature;
  record GeneralOptionBlock GenOptRec;

  if (changedf!=0) then begin
    GetWindowRecord(wn,OYr);
//    DeselectWindow(wn,false);  What for
    BlockLoad(OptFeature);
    if (OptFeature.NoQtyDepPrices==0) then begin
      OYVc_PasteQuant(OYr,rownr,true,chsum);  
    end else begin
      BlockLoad(GenOptRec);
      chsum = OYDchrsum(OYr,rownr,GenOptRec.UseDiscount);
    end;
    if (chsum) then begin
      OYDchsum(OYr,rownr);
      OYSumup(OYr);
    end;    
    PutWindowRecord(wn,OYr);
  end;
  OYDClassQuantEFAfter = true;
  return;
end;          
 
function Boolean OYDClassSerialNrEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record OYVc OYr;

  if (changedf!=0) then begin
    GetWindowRecord(wn,OYr);
    DeselectWindow(wn,false);
    OYVc_PasteSerialNr(OYr,rownr);
    PutWindowRecord(wn,OYr);
  end;
  OYDClassSerialNrEFAfter = true;
  return;
end;

function Boolean OYDClassUnitCodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record OYVc OYr;

  if (changedf!=0) then begin
    GetWindowRecord(wn,OYr);
    DeselectWindow(wn,false);
    OYVc_PasteUnitCode(OYr,rownr);
    PutWindowRecord(wn,OYr);
  end;
  OYDClassUnitCodeEFAfter = true;
  return;
end;

function Boolean OYDClassUnitFactQuantEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record OYVc OYr;

  if (changedf!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,OYr);
    OYVc_PasteUnitFactQuant(OYr,rownr);
    PutWindowRecord(wn,OYr);
  end;
  OYDClassUnitFactQuantEFAfter = true;
  return;
end;

function Boolean OYDClassBasePriceEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record OYVc OYr;
  record GeneralOptionBlock GOb;

  if (changedf!=0) then begin
    BlockLoad(GOb);
    DeselectWindow(wn,false);
    GetWindowRecord(wn,OYr);
    if (GOb.UseDiscount==3) then begin
      if (OYDchrsum(OYr,rownr,GOb.UseDiscount)) then begin
      end;
    end;
    OYDchsum(OYr,rownr);
    OYSumup(OYr);
    PutWindowRecord(wn,OYr);
  end;
  OYDClassBasePriceEFAfter = true;
  return;
end;

function Boolean OYDClassPriceEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record OYVc OYr;
  Boolean chsum;

  if (changedf!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,OYr);
    OYVc_PastePrice(OYr,rownr,chsum);
    if (chsum) then begin
      OYDchsum(OYr,rownr);
      OYSumup(OYr);
    end;
    PutWindowRecord(wn,OYr);
  end;
  OYDClassPriceEFAfter = true;
  return;
end;

function Boolean OYDClassPriceFactorEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record OYVc OYr;
  record GeneralOptionBlock GenOptRec;

  if (changedf!=0) then begin
    BlockLoad(GenOptRec);
    DeselectWindow(wn,false);
    GetWindowRecord(wn,OYr);
    if (OYDchrsum(OYr,rownr,GenOptRec.UseDiscount)) then begin
      OYDchsum(OYr,rownr);
      OYSumup(OYr);
    end;
    PutWindowRecord(wn,OYr);
  end;
  OYDClassPriceFactorEFAfter = true;
  return;
end;
 
function Boolean OYDClassArtCodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record OYVc OYr;
  string 255 inwarning,warning;

  if (changedf!=0) then begin
//    DeselectWindow(wn,false);  What for
    GetWindowRecord(wn,OYr);
    if (OYVc_PasteArtCode(OYr,rownr,inwarning,warning)) then begin
/* I'm only calling this to get SendArtStat done, if you have a better way, please put it in */
      OYDchsum(OYr,rownr);
      OYSumup(OYr);
    end;
    if (nonblank(inwarning)) then begin
      MessageBox(0,inwarning);
    end;
    if (nonblank(warning)) then begin
      MessageBox(0,warning);
    end;
    PutWindowRecord(wn,OYr);
    if (OYDClassSwitchRow(wn,rownr)) then begin end;
  end;
  OYDClassArtCodeEFAfter = true;
  return;
end;

function Boolean OYDClassEMCodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record OYVc OYr;
  Boolean chsum;

  GetWindowRecord(wn,OYr);
  if ((changedf!=0) and (nonblank(OYr.PRCode))) then begin
    OYVc_PasteEMCode(OYr,rownr,chsum);    
    if (chsum) then begin    
      OYDchsum(OYr,rownr);
      OYSumup(OYr);
    end;
    PutWindowRecord(wn,OYr);   
  end; 
  OYDClassEMCodeEFAfter = true;
  return;
end;
 
function Boolean OYDClassTimeClassEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record OYVc OYr;
  Boolean chsum;

  GetWindowRecord(wn,OYr);
  if ((changedf!=0) and (nonblank(OYr.PRCode))) then begin
    OYVc_PasteTimeClass(OYr,rownr,chsum);    
    if (chsum) then begin
      OYDchsum(OYr,rownr);
      OYSumup(OYr);
    end;
    PutWindowRecord(wn,OYr);   
  end; 
  OYDClassTimeClassEFAfter = true;
  return;
end;
 
function Boolean OYDClassMarkupEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record OYVc OYr;
  Boolean chsum;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,OYr)
    OYVc_PasteMarkup(OYr,rownr,chsum);    
    PutWindowRecord(wn,OYr);   
  end; 
  OYDClassMarkupEFAfter = true;
  return;
end;
 
function Boolean OYDClassPRCodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record OYVc OYr;
  string 255 warntext;

  if (changedf!=0) then begin  
    DeselectWindow(wn,false);
    GetWindowRecord(wn,OYr);
    if (OYVc_PastePRCode(OYr,WindEFstr(wn),warntext)) then begin  
      if (nonblank(warntext)) then begin
        MessageBox(0,warntext);
      end;    
      PutWindowRecord(wn,OYr);   
      SelectWindow(wn);
    end;
  end; 
  OYDClassPRCodeEFAfter = true;
  return;
end;

function Boolean OYDClassUnitXvalEFAfter(Integer wn, Integer rownr,Integer changed)
BEGIN
  record OYVc OYr;
  Boolean chsum,res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,OYr);
    OYVc_PasteUnitXval(OYr,rownr,chsum);    
    if (chsum) then begin
      OYDchsum(OYr,rownr);
      OYSumup(OYr);
    end;  
    PutWindowRecord(wn,OYr);    
  end;
  OYDClassUnitXvalEFAfter = res;
  RETURN;
END;

function Boolean OYDClassUnitYvalEFAfter(Integer wn, Integer rownr,Integer changed)
BEGIN
  record OYVc OYr;
  Boolean chsum,res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,OYr);
    OYVc_PasteUnitYval(OYr,rownr,chsum);    
    if (chsum) then begin
      OYDchsum(OYr,rownr);
      OYSumup(OYr);
    end;  
    PutWindowRecord(wn,OYr);    
  end;
  OYDClassUnitYvalEFAfter = res;
  RETURN;
END;

function Boolean OYDClassUnitZvalEFAfter(Integer wn, Integer rownr,Integer changed)
BEGIN
  record OYVc OYr;
  Boolean chsum,res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,OYr);
    OYVc_PasteUnitZval(OYr,rownr,chsum);
    if (chsum) then begin
      OYDchsum(OYr,rownr);
      OYSumup(OYr);
    end;  
    PutWindowRecord(wn,OYr);    
  end;
  OYDClassUnitZvalEFAfter = res;
  RETURN;
END;

global
function Boolean OYDClassRejectedButtonAfter(Integer wn,Boolean changedf)
begin        
  record OYVc OYr;  
  record OYVc OY2r;
  Boolean res;

  DeselectWindow(wn,true);
  GetWindowRecord(wn,OYr);
  GetPrevWindowRecord(wn,OY2r);
  switch (OYr.Rejected) begin
    case 1:
      if (OY2r.Rejected!=1) then begin
        OYr.Probability = 0;
      end;
    case 2:
      if (OY2r.Rejected!=2) then begin
        OYr.Probability = 100;
      end;
  end;
  OYr.RejectDate = CurrentDate;
  PutWindowRecord(wn,OYr);
  OYDClassRejectedButtonAfter = res;  
  return;
end;
 
function Boolean OYDClassCustCodeEFAfter(Integer wn,Integer changedf)
begin
  record OYVc OYr;
  string 255 warntext;

  GetWindowRecord(wn,OYr);    
  if ((changedf!=0) or ((blank(OYr.Addr0)) and (nonblank(OYr.CustCode)))) then begin
    if (PasteCustInOY(OYr,OYr.CustCode,WindEFstr(wn),warntext,true)) then begin
      if (nonblank(warntext)) then begin
        MessageBox(0,warntext);
      end;
      PutWindowRecord(wn,OYr);    
    end else begin
      Beep;
    end;
  end; 
  OYDClassCustCodeEFAfter = true;
  return;
end;
 
function Boolean OYDClassSalesManEFAfter(Integer wn,Integer changedf)
begin
  record OYVc OYr;
  string 255 warntext;

  if (changedf!=0) then begin
    GetWindowRecord(wn,OYr);    
    OYVc_PasteSalesMan(OYr,WindEFstr(wn));
    PutWindowRecord(wn,OYr);    
  end; 
  OYDClassSalesManEFAfter = true;
  return;
end;
 
function Boolean OYDClassMakeContactDateEFAfter(Integer wn,Integer changedf)
begin
  record OYVc OYr;
  Date dat;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,OYr);    
    dat = StringToDate(OYr.MakeContactDate);
    OYr.MakeContactDate = dat;
    PutWindowRecord(wn,OYr);    
  end; 
  OYDClassMakeContactDateEFAfter = true;
  return;
end;
 
function Boolean OYDClassValidUntilDateEFAfter(Integer wn,Integer changedf)
begin
  record OYVc OYr;
  Date dat;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,OYr);    
    dat = StringToDate(OYr.ValidUntilDate);
    OYr.ValidUntilDate = dat;
    PutWindowRecord(wn,OYr);    
  end; 
  OYDClassValidUntilDateEFAfter = true;
  return;
end;
 
function Boolean OYDClassDiscPercEFAfter(Integer wn,Integer changedf)
begin
  record OYVc OYr;
  val t,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,OYr);    
    MulM4ProcVal(OYr.DiscPerc,s,t);
    OYr.DiscSum = Round(OYr.DiscSum,SetRoundModeD(t));
    OYr.Sum1 = s;
    if (blank(OYr.DiscPerc)) then begin
      OYr.DiscSum = blankval;
    end;
    PutWindowRecord(wn,OYr);    
  end; 
  OYDClassDiscPercEFAfter = true;
  return;
end;
 
function Boolean OYDClassOYDateEFAfter(Integer wn,Integer changedf)
begin
  record OYVc OYr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,OYr);    
    OYVc_PasteOYDate(OYr);
    PutWindowRecord(wn,OYr);    
  end; 
  OYDClassOYDateEFAfter = true;
  return;
end;
 
function Boolean OYDClassCurncyCodeEFAfter(Integer wn,Integer changedf)
begin
  record OYVc OYr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,OYr);    
    OYVc_PasteCurncyCode(OYr,WindEFstr(wn));
    PutWindowRecord(wn,OYr);    
  end; 
  OYDClassCurncyCodeEFAfter = true;
  return;
end;
 
function Boolean OYDClassFrRateEFAfter(Integer wn,Integer changedf)
begin
  record OYVc OYr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,OYr);    
    OYr.BaseSum4 = MulRateToBase1(OYr.CurncyCode,OYr.Sum4,OYr.FrRate,OYr.ToRateB1,OYr.ToRateB2,OYr.BaseRate1,OYr.BaseRate2,DefaultCurRoundOff);
    PutWindowRecord(wn,OYr);    
  end; 
  OYDClassFrRateEFAfter = true;
  return;
end;

function Boolean OYDClassToRateB1EFAfter(Integer wn,Integer changedf)
begin
  record OYVc OYr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,OYr);    
    OYr.BaseSum4 = MulRateToBase1(OYr.CurncyCode,OYr.Sum4,OYr.FrRate,OYr.ToRateB1,OYr.ToRateB2,OYr.BaseRate1,OYr.BaseRate2,DefaultCurRoundOff);
    PutWindowRecord(wn,OYr);    
  end; 
  OYDClassToRateB1EFAfter = true;
  return;
end;

function Boolean OYDClassToRateB2EFAfter(Integer wn,Integer changedf)
begin
  record OYVc OYr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,OYr);    
    OYr.BaseSum4 = MulRateToBase1(OYr.CurncyCode,OYr.Sum4,OYr.FrRate,OYr.ToRateB1,OYr.ToRateB2,OYr.BaseRate1,OYr.BaseRate2,DefaultCurRoundOff);
    PutWindowRecord(wn,OYr);    
  end; 
  OYDClassToRateB2EFAfter = true;
  return;
end;

function Boolean OYDClassBaseRate1EFAfter(Integer wn,Integer changedf)
begin
  record OYVc OYr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,OYr);    
    OYr.BaseSum4 = MulRateToBase1(OYr.CurncyCode,OYr.Sum4,OYr.FrRate,OYr.ToRateB1,OYr.ToRateB2,OYr.BaseRate1,OYr.BaseRate2,DefaultCurRoundOff);
    PutWindowRecord(wn,OYr);    
  end; 
  OYDClassBaseRate1EFAfter = true;
  return;
end;

function Boolean OYDClassBaseRate2EFAfter(Integer wn,Integer changedf)
begin
  record OYVc OYr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,OYr);    
    OYr.BaseSum4 = MulRateToBase1(OYr.CurncyCode,OYr.Sum4,OYr.FrRate,OYr.ToRateB1,OYr.ToRateB2,OYr.BaseRate1,OYr.BaseRate2,DefaultCurRoundOff);
    PutWindowRecord(wn,OYr);    
  end; 
  OYDClassBaseRate2EFAfter = true;
  return;
end;

function Boolean OYDClassPayDealEFAfter(Integer wn,Integer changedf)
begin
  record OYVc OYr;
  record PDVc PDr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,OYr);    
//    if (blank(OYr.PriceList)) then begin
      PDr.Code = OYr.PayDeal;
      if (GetPD(PDr)) then begin
        if (nonblank(PDr.PriceList)) then begin
          if (PDr.PriceList!=OYr.PriceList) then begin
            OYr.PriceList = PDr.PriceList;
            OYDUpdatePrices(OYr,false);
          end;
        end;
      end;
//    end;    
    PutWindowRecord(wn,OYr);    
  end; 
  OYDClassPayDealEFAfter = true;
  return;
end;

function Boolean OYDClassPriceListEFAfter(Integer wn,Integer changedf)
begin
  record OYVc OYr;
  record PLDefVc PLDefr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,OYr);    
    PLDefR.Code = OYr.PriceList;
    if (ReadFirstMain(PLDefR,1,true)) then begin
      OYr.InclVAT = PLDefR.InclVAT;
      OYDUpdatePrices(OYr,false);
    end;
    PutWindowRecord(wn,OYr);    
  end; 
  OYDClassPriceListEFAfter = true;
  return;
end;

function Boolean OYDClassDelAddrCodeEFAfter(Integer wn,Integer changed)
begin  
  record OYVc OYr;

  if (changed!=0) then begin  
    DeselectWindow(wn,false);
    GetWindowRecord(wn,OYr);
    OYVc_PasteDelAddrCode(OYr);
    PutWindowRecord(wn,OYr);
  end;  
  OYDClassDelAddrCodeEFAfter = true;
  return;
end;

function Boolean OYDClassPlanShipEFAfter(Integer wn,Integer changed)
begin
  record OYVc OYr;
  record PlanDeliveryBlock PlanDelRec;
  LongInt week;
  date d;
  
  if (changed!=0) then begin
    BlockLoad(PlanDelRec);
    GetWindowRecord(wn,OYr);
    switch (PlanDelRec.FieldType) begin
      case 1:  /* date */
        d = OYr.PlanShip;
        OYr.PlanShip = d;
        OYr.PlanShipDate = StringToDate(OYr.PlanShip);
      case 2:  /* week number (nn) */
        week = OYr.PlanShip;
        OYr.PlanShip = week;
      case 3:  /* week number (yynn */
        week = OYr.PlanShip;
        OYr.PlanShip = week;
    end;
    PutWindowRecord(wn,OYr);    
  end;
  OYDClassPlanShipEFAfter = true;
  return;
end;

function Boolean OYDClassLocationEFAfter(Integer wn,Integer changed)
begin
  record OYVc OYr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,OYr);
    OYVc_PasteLocation(OYr);
    PutWindowRecord(wn,OYr);
  end;
  
  OYDClassLocationEFAfter = true;
  return;
end;

function Boolean OYDClassInvCountryEFAfter(Integer wn,Integer changed)
begin  
  record OYVc OYr;

  if (changed!=0) then begin  
    DeselectWindow(wn,false);
    GetWindowRecord(wn,OYr);
    OYVc_PasteInvCountry(OYr,WindEFstr(wn));
    PutWindowRecord(wn,OYr);
  end;  
  OYDClassInvCountryEFAfter = true;
  return;
end;

function Boolean OYDClassDelCountryEFAfter(Integer wn,Integer changed)
begin  
  record OYVc OYr;

  if (changed!=0) then begin  
    DeselectWindow(wn,false);
    GetWindowRecord(wn,OYr);
    OYVc_PasteDelCountry(OYr,WindEFstr(wn));
    PutWindowRecord(wn,OYr);
  end;  
  OYDClassDelCountryEFAfter = true;
  return;
end;

function Boolean OYDClassInvoiceToCodeEFAfter(Integer wn,Integer changed)
begin
  record OYVc OYr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,OYr);
    OYVc_PasteInvoiceToCode(OYr);
    PutWindowRecord(wn,OYr);
  end;
  
  OYDClassInvoiceToCodeEFAfter = true;
end;

function Boolean OYDClassRebCodeEFAfter(Integer wn,Boolean changedf)
begin  
  record OYVc OYr;

  if (changedf) then begin  
    DeselectWindow(wn,false);
    GetWindowRecord(wn,OYr);
    OYVc_PasteRebCode(OYr);
    PutWindowRecord(wn,OYr);
  end;  
  OYDClassRebCodeEFAfter = true;
  return;
end;

global
function Boolean OYDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "PlanShip": res = OYDClassPlanShipEFAfter(wn,changed);
    case "PriceList": res = OYDClassPriceListEFAfter(wn,changed);
    case "PayDeal": res = OYDClassPayDealEFAfter(wn,changed);
    case "FrRate": res = OYDClassFrRateEFAfter(wn,changed);
    case "ToRateB1": res = OYDClassToRateB1EFAfter(wn,changed);
    case "ToRateB2": res = OYDClassToRateB2EFAfter(wn,changed);
    case "BaseRate1": res = OYDClassBaseRate1EFAfter(wn,changed);
    case "BaseRate2": res = OYDClassBaseRate2EFAfter(wn,changed);
    case "CurncyCode": res = OYDClassCurncyCodeEFAfter(wn,changed);
    case "OYDate": res = OYDClassOYDateEFAfter(wn,changed);
    case "DiscPerc": res = OYDClassDiscPercEFAfter(wn,changed);
    case "ValidUntilDate": res = OYDClassValidUntilDateEFAfter(wn,changed);
    case "MakeContactDate": res = OYDClassMakeContactDateEFAfter(wn,changed);
    case "SalesMan": res = OYDClassSalesManEFAfter(wn,changed);
    case "CustCode": res = OYDClassCustCodeEFAfter(wn,changed);
    case "UnitZval": res = OYDClassUnitZvalEFAfter(wn,rownr,changed);
    case "UnitYval": res = OYDClassUnitYvalEFAfter(wn,rownr,changed);
    case "UnitXval": res = OYDClassUnitXvalEFAfter(wn,rownr,changed);
    case "PRCode": res = OYDClassPRCodeEFAfter(wn,rownr,changed);
    case "Markup": res = OYDClassMarkupEFAfter(wn,rownr,changed);
    case "TimeClass": res = OYDClassTimeClassEFAfter(wn,rownr,changed);
    case "EMCode": res = OYDClassEMCodeEFAfter(wn,rownr,changed);
    case "ArtCode": res = OYDClassArtCodeEFAfter(wn,rownr,changed);
    case "Quant": res = OYDClassQuantEFAfter(wn,rownr,changed);
    case "SerialNr": res = OYDClassSerialNrEFAfter(wn,rownr,changed);
    case "UnitCode": res = OYDClassUnitCodeEFAfter(wn,rownr,changed);
    case "UnitFactQuant": res = OYDClassUnitFactQuantEFAfter(wn,rownr,changed);
    case "UnitFactPrice": res = OYDClassUnitFactPriceEFAfter(wn,rownr,changed);
    case "BasePrice": res = OYDClassBasePriceEFAfter(wn,rownr,changed);
    case "Price": res = OYDClassPriceEFAfter(wn,rownr,changed);
    case "PriceFactor": res = OYDClassPriceFactorEFAfter(wn,rownr,changed);
    case "vRebate": res = OYDClassvRebateEFAfter(wn,rownr,changed);
    case "VATCode": res = OYDClassVATCodeEFAfter(wn,rownr,changed);
    case "TaxTemplateCode": res = OYDClassTaxTemplateCodeEFAfter(wn,rownr,changed!=0);
    case "Sum": res = OYDClassSumEFAfter(wn,rownr,changed);
    case "DelAddrCode": res = OYDClassDelAddrCodeEFAfter(wn,changed);
    case "Location": res = OYDClassLocationEFAfter(wn,changed);
    case "InvCountry": res = OYDClassInvCountryEFAfter(wn,changed);
    case "DelCountry": res = OYDClassDelCountryEFAfter(wn,changed);
    case "InvoiceToCode": res = OYDClassInvoiceToCodeEFAfter(wn,changed);
    case "RebCode": res = OYDClassRebCodeEFAfter(wn,changed!=0);
  end;
  OYDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean OYDClassOnOverStrikeTest(Integer wn,Integer rownr)
BEGIN
  record OYVc OYr;
  row OYVc OYrw;
  Integer i,rwcnt;
  record INVc INr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,OYr);    
    OYSumUp(OYr);
    PutWindowRecord(wn,OYr);    
  end;
  OYDClassOnOverStrikeTest = true;
  RETURN;
END;

global
function Boolean OYDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record OYVc OYr;
  row OYVc OYrw;

  if (rownr>=0) then begin
    GetWindowRecord(wn,OYr);    
    OYSumUp(OYr);
    PutWindowRecord(wn,OYr);    
  end;
  OYDClassOnOverStrike = true;
  RETURN;
END;

global
function Boolean OYDClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
BEGIN
  Boolean res;
  record OYVc OYr;
  row OYVc OYrw;

  switch (fieldname) begin  
    case "Quant":     
      GetWindowRecord(wn,OYr);      
      MatRowGet(OYr,rownr,OYrw);
      if (OYrw.Quant==0) then begin
        if (TestForMATVARINS(wn)) then begin end;
      end;
  end;
  OYDClassBeforeEditField = res;
  return;
end;

global
function Boolean OYDClassRejectedButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record OYVc OYr;
  Integer err;
  
  res = true;
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,OYr);
      if (OYr.Closed!=0) then begin
        res = false;
      end;
      if (res) then begin
        err = OYTestApprovalStatus(OYr);
        if (err!=0) then begin
          MessageBox(err,"");
          res = false;
          goto LOYDClassOKFlagButtonAction;
        end;
      end;
    case Rs_insert:
      GetWindowRecord(wn,OYr);
      if (OYr.Closed!=0) then begin
        res = false;
      end;
      if (res) then begin
        err = OYTestApprovalStatus(OYr);
        if (err!=0) then begin
          MessageBox(err,"");
          res = false;
          goto LOYDClassOKFlagButtonAction;
        end;
      end;
    case Rs_update:
      GetPrevWindowRecord(wn,OYr);
      if (OYr.Closed!=0) then begin
        res = false;
      end;
      if (res) then begin
        err = OYTestApprovalStatus(OYr);
        if (err!=0) then begin
          MessageBox(err,"");
          res = false;
          goto LOYDClassOKFlagButtonAction;
        end;
      end;
  end;
LOYDClassOKFlagButtonAction:;  
  OYDClassRejectedButtonAction = res;
  return;
end;

global
function Boolean OYDClassBudTimeButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record OYVc OYr;
  
  res = true;
  switch (WindowState(wn)) begin
    case 0:
      GetWindowRecord(wn,OYr);
      if (OYr.Closed!=0) then begin
        res = false;
      end;
    case 1:
      GetWindowRecord(wn,OYr);
      if (OYr.Closed!=0) then begin
        res = false;
      end;
    case 2:
      GetPrevWindowRecord(wn,OYr);
      if (OYr.Closed!=0) then begin
        res = false;
      end;
  end;
  OYDClassBudTimeButtonAction = res;
  return;
end;

global
function Boolean OYDClassBudStockedButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record OYVc OYr;
  
  res = true;
  switch (WindowState(wn)) begin
    case 0:
      GetWindowRecord(wn,OYr);
      if (OYr.Closed!=0) then begin
        res = false;
      end;
    case 1:
      GetWindowRecord(wn,OYr);
      if (OYr.Closed!=0) then begin
        res = false;
      end;
    case 2:
      GetPrevWindowRecord(wn,OYr);
      if (OYr.Closed!=0) then begin
        res = false;
      end;
  end;
  OYDClassBudStockedButtonAction = res;
  return;
end;

global
function Boolean OYDClassBudMaterialButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record OYVc OYr;
  
  res = true;
  switch (WindowState(wn)) begin
    case 0:
      GetWindowRecord(wn,OYr);
      if (OYr.Closed!=0) then begin
        res = false;
      end;
    case 1:
      GetWindowRecord(wn,OYr);
      if (OYr.Closed!=0) then begin
        res = false;
      end;
    case 2:
      GetPrevWindowRecord(wn,OYr);
      if (OYr.Closed!=0) then begin
        res = false;
      end;
  end;
  OYDClassBudMaterialButtonAction = res;
  return;
end;

global
function Boolean OYDClassBudOtherButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record OYVc OYr;
  
  res = true;
  switch (WindowState(wn)) begin
    case 0:
      GetWindowRecord(wn,OYr);
      if (OYr.Closed!=0) then begin
        res = false;
      end;
    case 1:
      GetWindowRecord(wn,OYr);
      if (OYr.Closed!=0) then begin
        res = false;
      end;
    case 2:
      GetPrevWindowRecord(wn,OYr);
      if (OYr.Closed!=0) then begin
        res = false;
      end;
  end;
  OYDClassBudOtherButtonAction = res;
  return;
end;

global 
procedure OYDClassOpenCurrency()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record OYVc OYr;
  
  wn = CurWindow;
  GetWindowRecord(wn,OYr);
  nwn = OpenWindow("OYCurrencyDClass",1,wn,subset,"",OYr);
  PutWindowRecord(wn,OYr);
  RETURN;
END;

global
function boolean OYCurrencyDClassOnOKWindow(Integer wn)
begin
  record OYVc OYr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,OYr);
    PutWindowRecord(mwn,OYr);
  end;
  CloseWindow(wn);
  
  OYCurrencyDClassOnOKWindow = true;
end;

global
function Boolean OYCurrencyDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  Integer mwn;
  record OYVc OYr;
  
  switch (fieldname) begin
    case "FrRate": res = OYDClassFrRateEFAfter(wn,changed);
    case "ToRateB1": res = OYDClassToRateB1EFAfter(wn,changed);
    case "ToRateB2": res = OYDClassToRateB2EFAfter(wn,changed);
    case "BaseRate1": res = OYDClassBaseRate1EFAfter(wn,changed);
    case "BaseRate2": res = OYDClassBaseRate2EFAfter(wn,changed);
    case "CurncyCode": res = OYDClassCurncyCodeEFAfter(wn,changed);
  end;
  
  OYCurrencyDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean OYCurrencyDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  Integer mwn;

  mwn = MotherWindow(wn);
  res = OYDClassActiveEditField(mwn,fieldname,fn,wnst,rownr,changed);
  OYCurrencyDClassActiveEditField = res;
  return;
end;

global 
procedure OYDClassOpenDelTerms()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record OYVc OYr;
  
  wn = CurWindow;
  GetWindowRecord(wn,OYr);
  nwn = OpenWindow("OYDelTermsDClass",1,wn,subset,"",OYr);
  PutWindowRecord(wn,OYr);
  RETURN;
END;

global
function boolean OYDelTermsDClassOnOKWindow(Integer wn)
begin
  record OYVc OYr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,OYr);
    PutWindowRecord(mwn,OYr);
  end;
  CloseWindow(wn);
  
  OYDelTermsDClassOnOKWindow = true;
end;

global
function Boolean OYDelTermsDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "Location": res = OYDClassLocationEFAfter(wn,changed);
  end;
  OYDelTermsDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean OYDelTermsDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  Integer mwn;

  mwn = MotherWindow(wn);
  res = OYDClassActiveEditField(mwn,fieldname,fn,wnst,rownr,changed);
  OYDelTermsDClassActiveEditField = res;
  return;
end;

global 
procedure OYDClassOpenPriceList()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record OYVc OYr;
  
  wn = CurWindow;
  GetWindowRecord(wn,OYr);
  nwn = OpenWindow("OYPriceListDClass",1,wn,subset,"",OYr);
  PutWindowRecord(wn,OYr);
  RETURN;
END;

global
function boolean OYPriceListDClassOnOKWindow(Integer wn)
begin
  record OYVc OYr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,OYr);
    PutWindowRecord(mwn,OYr);
  end;
  CloseWindow(wn);
  
  OYPriceListDClassOnOKWindow = true;
end;

global
function Boolean OYPriceListDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "PriceList": res = OYDClassPriceListEFAfter(wn,changed);
  end;
  OYPriceListDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean OYPriceListDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  Integer mwn;

  mwn = MotherWindow(wn);
  res = OYDClassActiveEditField(mwn,fieldname,fn,wnst,rownr,changed);
  OYPriceListDClassActiveEditField = res;
  return;
end;

global 
procedure OYDClassOpenInvAddress()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record OYVc OYr;
  
  wn = CurWindow;
  GetWindowRecord(wn,OYr);
  nwn = OpenWindow("OYInvAddressDClass",1,wn,subset,"",OYr);
  PutWindowRecord(wn,OYr);
  RETURN;
END;

global
function boolean OYInvAddressDClassOnOKWindow(Integer wn)
begin
  record OYVc OYr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,OYr);
    PutWindowRecord(mwn,OYr);
  end;
  CloseWindow(wn);
  
  OYInvAddressDClassOnOKWindow = true;
end;

global
function Boolean OYInvAddressDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
//    case "Region": res = OYDClassRegionEFAfter(wn,changed!=0);
  end;
  OYInvAddressDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean OYInvAddressDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  Integer mwn;

  mwn = MotherWindow(wn);
  res = OYDClassActiveEditField(mwn,fieldname,fn,wnst,rownr,changed);
  OYInvAddressDClassActiveEditField = res;
  return;
end;

global 
procedure OYDClassOpenDelAddress()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record OYVc OYr;
  
  wn = CurWindow;
  GetWindowRecord(wn,OYr);
  nwn = OpenWindow("OYDelAddressDClass",1,wn,subset,"",OYr);
  PutWindowRecord(wn,OYr);
  RETURN;
END;

global
function boolean OYDelAddressDClassOnOKWindow(Integer wn)
begin
  record OYVc OYr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,OYr);
    PutWindowRecord(mwn,OYr);
  end;
  CloseWindow(wn);
  
  OYDelAddressDClassOnOKWindow = true;
end;

global
function Boolean OYDelAddressDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "DelAddrCode": res = OYDClassDelAddrCodeEFAfter(wn,changed);
    case "VATCode": res = OYDClassVATCodeEFAfter(wn,rownr,changed);
  end;
  OYDelAddressDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean OYDelAddressDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  Integer mwn;

  mwn = MotherWindow(wn);
  res = OYDClassActiveEditField(mwn,fieldname,fn,wnst,rownr,changed);
  OYDelAddressDClassActiveEditField = res;
  return;
end;

global
procedure OYDClassEditRow(Integer wn,Integer rwn)
begin
  record OYVc OYr;
  row OYVc OYrw;
  record RcVc RepSpec;
  integer nwn;
  
  GetWindowRecord(wn,OYr);
  MatRowGet(OYr,rwn,OYrw);
  RepSpec.long1 = rwn;
  RepSpec.f1 = OYrw.ArtCode;
  RepSpec.long2 = OYrw.Quant;
  RepSpec.f2 = OYrw.Spec;
  RepSpec.vals0 = OYrw.Price;
  RepSpec.vals1 = OYrw.vRebate;
  RepSpec.vals2 = OYrw.Sum;
  
  nwn = OpenWindow("OYRowDClass",0,wn,"","",RepSpec);
  SendArtStat(OYrw.ArtCode,"","",OYrw.rowGP,0,0,OYr.OYDate,1);
  return;
end;

global
procedure OYDClassAddRow(Integer wn,Integer rwn)
begin
  record OYVc OYr;
  row OYVc OYrw;

  GetWindowRecord(wn,OYr);
  MatRowGet(OYr,rwn,OYrw);
  OYrw.stp = kInvoiceRowTypeNormal;
  MatRowPut(OYr,rwn,OYrw);
  PutWindowRecord(wn,OYr);
  OYDClassEditRow(wn,rwn);
  return;
end;

global
procedure OYRowDClassTrash()
begin
  record RcVc RepSpec;
  record OYVc OYr;
  integer wn;
  integer mwn;
  integer rwn;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  
  GetWindowRecord(wn,RepSpec);
  GetWindowRecord(mwn,OYr);
  
  rwn = RepSpec.long1;
  MatRowDelete(OYr,rwn);
  
  PutWindowRecord(mwn,OYr);
  CloseWindow(wn);
  return;
end;

global
function boolean OYRowDClassOnOKWindow(Integer wn)
begin
  record RcVc RepSpec;
  record OYVc OYr;
  row OYVc OYrw;
  integer mwn;
  integer rwn;
  
  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,OYr);
  
  GetWindowRecord(wn,RepSpec);
  rwn = RepSpec.long1;
  
  MatRowGet(OYr,rwn,OYrw);
  
  OYrw.ArtCode = RepSpec.f1;
  OYrw.Quant = RepSpec.long2;
  OYrw.Spec = RepSpec.f2;
  OYrw.Price = RepSpec.vals0;
  OYrw.vRebate = RepSpec.vals1;
  OYrw.Sum = RepSpec.vals2;
  OYrw.stp = kInvoiceRowTypeNormal;

  MatRowPut(OYr,rwn,OYrw);
  PutWindowRecord(mwn,OYr);
  OYDClassSwitchRow(mwn,rwn);
  OYRowDClassOnOKWindow = true;
  return;
end;


global
function Boolean OYRowDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  Integer mwn;
  Integer rwn;
  record RcVc RepSpec;
  record OYVc OYr,OY2r;
  row OYVc OYrw;
  
  GetWindowRecord(wn,RepSpec);
  rwn = RepSpec.long1;

  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,OYr);
//  GetWindowRecord(mwn,OY2r);
  
  MatRowGet(OYr,rwn,OYrw);
  OYrw.ArtCode = RepSpec.f1;
  OYrw.Quant = RepSpec.long2;
  OYrw.Spec = RepSpec.f2;
  OYrw.Price = RepSpec.vals0;
  OYrw.vRebate = RepSpec.vals1;
  OYrw.Sum = RepSpec.vals2;
  MatRowPut(OYr,rwn,OYrw);
  PutWindowRecord(mwn,OYr);
  
  switch (fieldname) begin
//    case "Recepy": res = OYDClassRecepyEFAfter(wn,rownr,changed);
//    case "PriceFactor": res = OYDClassPriceFactorEFAfter(wn,rownr,changed);
//    case "BasePrice": res = OYDClassBasePriceEFAfter(wn,rownr,changed);
//    case "TaxTemplateCode": res = OYDClassTaxTemplateCodeEFAfter(wn,rownr,changed!=0);
//    case "UnitFactPrice": res = OYDClassUnitFactPriceEFAfter(wn,fn,rownr,changed);
//    case "UnitFactQuant": res = OYDClassUnitFactQuantEFAfter(wn,fn,rownr,changed);
//    case "UnitCode": res = OYDClassUnitCodeEFAfter(wn,fn,rownr,changed);
//    case "PlanShipRow": res = OYDClassPlanShipRowEFAfter(wn,rownr,changed);
//    case "SerialNr": res = OYDClassSerialNrEFAfter(wn,fn,rownr,changed);
//    case "UnitZval": res = OYDClassUnitZvalEFAfter(wn,fn,rownr,changed);
//    case "UnitYval": res = OYDClassUnitYvalEFAfter(wn,fn,rownr,changed);
//    case "UnitXval": res = OYDClassUnitXvalEFAfter(wn,fn,rownr,changed);
    case "long2": res = OYDClassQuantEFAfter(mwn,rwn,changed);
    case "f1": 
            res = OYDClassArtCodeEFAfter(mwn,rwn,changed);
            if (res) then begin
              GetWindowRecord(mwn,OYr);
              MatRowGet(OYr,rwn,OYrw);
              if (OYrw.Quant==0) then begin
                OYrw.Quant = 1;
                MatRowPut(OYr,rwn,OYrw);
                PutWindowRecord(mwn,OYr);
                OYDClassQuantEFAfter(mwn,rwn,changed);
              end;
            end;
    case "vals0": res = OYDClassPriceEFAfter(mwn,rwn,changed);
    case "vals1": res = OYDClassvRebateEFAfter(mwn,rwn,changed);
    case "vals2": res = OYDClassSumEFAfter(mwn,rwn,changed);
  end;

  if (res==true and changed!=0) then begin
    GetWindowRecord(mwn,OYr);
    MatRowGet(OYr,rwn,OYrw);
    RepSpec.f1 = OYrw.ArtCode;
    RepSpec.long2 = OYrw.Quant;
    RepSpec.f2 = OYrw.Spec;
    RepSpec.vals0 = OYrw.Price;
    RepSpec.vals1 = OYrw.vRebate;
    RepSpec.vals2 = OYrw.Sum;
    PutWindowRecord(wn,RepSpec);
    SendArtStat(OYrw.ArtCode,"","",OYrw.rowGP,0,0,OYr.OYDate,1);
  end;
  PutWindowRecord(mwn,OYr);

  OYRowDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean OYDClassOpenRecord(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record OYVc OYr;
  
  GetWindowRecord(wn,OYr);  
  switch (fieldname) begin
    case "CustContact":
      res = OpenContactRecord(OYr.CustContact,OYr.CustCode);
  end;
  OYDClassOpenRecord = res;
  return;
end;

global
function Boolean OYDClassOnOpenWindow(Integer wn)
begin
  record OYVc OYr;
  Integer AcceptanceStatusFlag;
  
  GetWindowRecord(wn,OYr);
  OYDClassOnOpenWindowRemote(OYr,AcceptanceStatusFlag);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  OYDClassOnOpenWindow = false;
  return;
end;

global
procedure OYDClassOnWindowRecordChange(Integer wn)
begin
  record OYVc OYr;
  Integer AcceptanceStatusFlag;

  GetWindowRecord(wn,OYr);
  OYDClassOnOpenWindowRemote(OYr,AcceptanceStatusFlag);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  return;
end;
