// CUST - changes not tagged
remote function Boolean IsAnyPlanMessageTextSent(longint);
remote function Boolean IsPlanMessageOKd(longint);
remote updating function Boolean FlagMessageTextForDeletion(longint,integer,string);
remote updating function integer FlagMessageQueueForDeletion(longint);

global
function Boolean PlanMessageQueueDClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record PlanMessageQueueVc PlanMessageQueuer;
  
  GetWindowRecord(wn,PlanMessageQueuer);
  subsetname = PlanMessageQueuer.SerNr;
  PlanMessageQueueDClassUpdateWindowSubset = true;
  RETURN;
END;

global
function Boolean PlanMessageQueueDClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  record PlanMessageTextVc PlanMessageTextr;
  
  if (WindowState(wn)==0) then begin
    if (ReadMarkedRecord(wn,PlanMessageTextr)) then begin
      mwn = OpenWindow("PlanMessageTextDClass",1,0,"","",PlanMessageTextr);
    end;
  end;
  PlanMessageQueueDClassOnOKWindow = true;
  return;
end;

global
procedure PlanMessageQueueDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin // Temporary fix for the RecordList
  saveOK = true;
  return;
end;

global
function Boolean PlanMessageQueueDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record PlanMessageQueueVc PlanMessageQueuer;
  
  res = true;
  GetWindowRecord(wn,PlanMessageQueuer);
  if (PlanMessageQueuer.OKFlag!=0) then begin
    res = false;
    switch (fieldname) begin
      case "EndDate": res = true;
    end;
  end;
  PlanMessageQueueDClassActiveEditField = res;
  RETURN;
END;

global
function Boolean  PlanMessageQueueDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record PlanMessageQueueVc PlanMessageQueuer;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,PlanMessageQueuer);
    if (PlanMessageQueuer.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = (IsAnyPlanMessageTextSent(PlanMessageQueuer.SerNr)==false);
      end;
    end;
  end;
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,PlanMessageQueuer);
    if (PlanMessageQueuer.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = (IsAnyPlanMessageTextSent(PlanMessageQueuer.SerNr)==false);
      end;
    end;
  end;  
  PlanMessageQueueDClassOKFlagButtonAction = res;
  return;
end;

global
function Boolean PlanMessageQueueDClassAllSentFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
 
  res = false;
  PlanMessageQueueDClassAllSentFlagButtonAction = res;
  return;
end;

global
function Boolean PlanMessageTextDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record PlanMessageTextVc PlanMessageText2r;
  
  res = true;
  if (wnst==2) then begin//Rs_update
    GetPrevWindowRecord(wn,PlanMessageText2r);
    if (PlanMessageText2r.OKFlag!=0) then begin
      res = false;
    end;
  end;
  PlanMessageTextDClassActiveEditField = res;
  RETURN;
END;

global
function Boolean  PlanMessageTextDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record PlanMessageTextVc PlanMessageTextr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,PlanMessageTextr);
    if (PlanMessageTextr.OKFlag!=0) then begin
      res = (PlanMessageTextr.SentFlag==0);
      if (res) then begin
        if (IsPlanMessageOKd(PlanMessageTextr.SerNr)) then begin
          res = false;
        end;
      end;
    end;
  end;
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,PlanMessageTextr);
    if (PlanMessageTextr.OKFlag!=0) then begin
      res = (PlanMessageTextr.SentFlag==0);
      if (res) then begin
        if (IsPlanMessageOKd(PlanMessageTextr.SerNr)) then begin
          res = false;
        end;
      end;
    end;
  end;  
  PlanMessageTextDClassOKFlagButtonAction = res;
  return;
end;

global
function Boolean  PlanMessageTextDClassSentFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
 
  res = false;
  PlanMessageTextDClassSentFlagButtonAction = res;
  return;
end;

global
procedure NewPlanMessageTextDsm()
begin
  record PlanMessageQueueVc PlanMessageQueuer;
  record PlanMessageTextVc PlanMessageTextr;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,PlanMessageQueuer);
  if (PlanMessageQueuer.OKFlag==0) then begin
    RecordNew(PlanMessageTextr);
    PlanMessageTextr.SerNr = PlanMessageQueuer.SerNr;
    PlanMessageTextr.Comment = "";
    PlanMessageTextr.CustCode = PlanMessageQueuer.CustCode;
    PlanMessageTextr.CustCat = PlanMessageQueuer.CustCat;
    PlanMessageTextr.Classification = PlanMessageQueuer.Classification;
    PlanMessageTextr.ContClass = PlanMessageQueuer.ContClass;
    PlanMessageTextr.JobDesc = PlanMessageQueuer.JobDesc;
    PlanMessageTextr.PersColCode = PlanMessageQueuer.PersColCode;
    PlanMessageTextr.Header = PlanMessageQueuer.Comment;
    PlanMessageTextr.Product = PlanMessageQueuer.Product;
    PlanMessageTextr.ReplyToAddr = PlanMessageQueuer.ReplyToAddr;
    wn = OpenWindow("PlanMessageTextDClass",1,0,"","",PlanMessageTextr);    
  end else begin
    Beep;
  end;
  return;
end;

global
procedure LetInfoPlanMessageQueueDsm()
BEGIN
  record PlanMessageQueueVc PlanMessageQueuer;
  record RcVc RepSpec;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,PlanMessageQueuer);
  RepSpec.Media = mtScreen;
  RepSpec.f1 = PlanMessageQueuer.SerNr;
  RepSpec.flags[1] = 0;
  RepSpec.flags[18] = 1;
  RepSpec.repname = "LetInfoPlanQueueRn";
  RunReport(RepSpec,0);
LLetInfoLetDsm:;  
  RETURN;
END;

global
procedure LetInfoPlanMessageTextDsm()
BEGIN
  record PlanMessageTextVc PlanMessageTextr;
  record RcVc RepSpec;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,PlanMessageTextr);
  RepSpec.Media = mtScreen;
  RepSpec.f1 = PlanMessageTextr.SerNr;
  RepSpec.FirstVer = PlanMessageTextr.RegInCountry;
  RepSpec.TransStr = PlanMessageTextr.LangCode;
  RepSpec.flags[1] = 0;
  RepSpec.flags[18] = 1;
  RepSpec.repname = "LetInfoPlanMessageRn";
  RunReport(RepSpec,0);
LLetInfoLetDsm:;  
  RETURN;
END;

global
updating function LongInt PlanMessageQueueVcRecordUpdateClient(LongInt wn,var record PlanMessageQueueVc PMQr,record PlanMessageQueueVc PMQ2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  if ((PMQr.OKFlag!=0 and PMQ2r.OKFlag==0) or (PMQr.OKFlag==0 and PMQ2r.OKFlag!=0)) then begin
    UpdateBrowses("PlanMessageTextVc");
  end;
  
  PlanMessageQueueVcRecordUpdateClient = res;
  return;
end;

global
updating procedure WithdrawPlanMessageTextDsm()
begin
  record PlanMessageTextVc PlanMessageTextr;
  integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,PlanMessageTextr);
  if (FlagMessageTextForDeletion(PlanMessageTextr.SerNr,PlanMessageTextr.RegInCountry,PlanMessageTextr.LangCode)) then begin
    UpdateBrowses("PlanMessageTextVc");
  end else begin
    Beep;
  end;
  
  return;
end;

global
updating procedure WithdrawPlanMessageQueueDsm()
begin
  record PlanMessageQueueVc PlanMessageQueuer;
  integer wn,res;
  
  wn = CurWindow;
  GetWindowRecord(wn,PlanMessageQueuer);
  res = FlagMessageQueueForDeletion(PlanMessageQueuer.SerNr);
  switch (res) begin
    case -1:
      Beep;
    case 0:
      UpdateBrowses("PlanMessageTextVc");
    otherwise
      MessageBox(50008,"");
  end;

  return;
end;