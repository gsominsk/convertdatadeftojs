global
procedure ForecastUserSumup(var record ForecastUserVc ForecastUserr)
BEGIN
  ForecastUserr.Chargeable = ForecastUserr.chConsulting + ForecastUserr.chProgramming + ForecastUserr.chProjectMan + ForecastUserr.chEducation;  
  if (ForecastUserr.AvailExclSupp!=0) then begin
    ForecastUserr.Chargebility = (ForecastUserr.Chargeable/ForecastUserr.AvailExclSupp)*100;
  end;
  ForecastUserr.UsedonCustomers = ForecastUserr.Chargeable + ForecastUserr.Support + ForecastUserr.FreeService;
  if (ForecastUserr.AvailInclSupp!=0) then begin
    ForecastUserr.Utilisation = (ForecastUserr.UsedonCustomers/ForecastUserr.AvailInclSupp)*100;
  end;
  ForecastUserr.TotalSales = ForecastUserr.LicensesNewCU + ForecastUserr.LicensesNewCUPart + ForecastUserr.LicensesOldCU + ForecastUserr.LicensesOldCUPart + ForecastUserr.ConsultingNewCU + ForecastUserr.ConsultingNewCUPart + ForecastUserr.ConsultingOldCU + ForecastUserr.ConsultingOldCUPart;  
  ForecastUserr.TurnoverNewCU = ForecastUserr.LicensesNewCU + ForecastUserr.ConsultingNewCU;
  ForecastUserr.TurnoverNewCUPart = ForecastUserr.LicensesNewCUPart + ForecastUserr.ConsultingNewCUPart;
  ForecastUserr.TurnoverOldCU = ForecastUserr.LicensesOldCU + ForecastUserr.ConsultingOldCU;
  ForecastUserr.TurnoverOldCUPart = ForecastUserr.LicensesOldCUPart + ForecastUserr.ConsultingOldCUPart;
  RETURN;
END;

procedure ForecastUserSumupWn(Integer wn,Boolean changedf)
BEGIN
  record ForecastUserVc ForecastUserr;
  
  if (changedf) then begin
    GetWindowRecord(wn,ForecastUserr);
    ForecastUserSumup(ForecastUserr);
    PutWindowRecord(wn,ForecastUserr);
  end;
  RETURN;
END;

global
function Boolean ForecastUserDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record ForecastUserVc ForecastUserr;
  
  if (wnst!=2) then begin//Rs_update
    res = true;
  end else begin
    res = false;
    GetPrevWindowRecord(wn,ForecastUserr);
    if (ForecastUserr.OKFlag!=0) then begin
      switch (fieldname) begin
        case "Comment": res = true;
      end;
    end else begin
      res = true;
    end;
  end;
  ForecastUserDClassActiveEditField = res;
  RETURN;
END;

function Boolean ForecastUserDClassPersonEFAfter(Integer wn,Boolean changedf)
BEGIN
  Boolean res;
  record ForecastUserVc ForecastUserr;
  record UserVc Userr;
  
  if (changedf) then begin
    GetWindowRecord(wn,ForecastUserr);
    Userr.Code = ForecastUserr.Person;
    if (ReadFirstMain(Userr,1,true)) then begin
      ForecastUserr.PersonName = Userr.Name;
      ForecastUserr.PersonObjects = Userr.PersObjx;
    end;
    PutWindowRecord(wn,ForecastUserr);
    res = true;
  end;
  ForecastUserDClassPersonEFAfter = res;
  RETURN;
END;

global
function Boolean ForecastUserDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "Person": res = ForecastUserDClassPersonEFAfter(wn,changed!=0);
  end;
  ForecastUserSumupWn(wn,changed!=0);
  ForecastUserDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean ForecastUserDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record ForecastUserVc ForecastUserr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,ForecastUserr);
    if (ForecastUserr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,ForecastUserr);
    if (ForecastUserr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  ForecastUserDClassOKFlagButtonAction = res;
  RETURN;
END;
