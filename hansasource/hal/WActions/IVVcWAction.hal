external function Integer GetSelectedPOSItemRowIndex(integer);
external procedure AutomatedSalesOrderly(string);
external function Boolean GetPM(string,var string,var string);
remote function Boolean IVVc_PasteAddr0(var record IVVc,record LocalMachineBlock,string,Boolean,var string,var string,var string,var string,var string);
external function Boolean FindLocalSerialPortDevice(Integer,LongInt,string,var record LSerialPortDeviceVc);
external procedure DisplayIVItem2(record IVVc,Integer,var Boolean,var record LSerialPortDeviceVc);
remote function Boolean IVVc_PasteQuantityRemote(var record IVVc,Integer,string,string,var Boolean,var record LSerialPortDeviceVc);
remote procedure IVVc_PasteRebCode(var record IVVc);
remote procedure IVVc_PasteDelCountry(var record IVVc,string);
remote procedure IVVc_PasteInvCountry(var record IVVc,string);
external procedure WindowFieldGotoForTouchScreen(Integer,Integer,string,Boolean);
remote function Boolean SerialNrForOneItem(string,var record SerBalVc);
external function Boolean IVDClasstouchscreenitemEFAfter(Integer,Integer,Boolean);
external procedure SetPOSWindowDisplay(string,string);
external function Boolean IVPrintReceipt(Integer,var record IVVc,var record IVVc,Integer,Boolean,Boolean,Integer,Integer);
remote function Boolean GetFirstItem(var string,var record INVc);
external procedure StripSpace(var string,string);
external procedure IVDClass_RefreshStringList(Integer,record IVVc);
external function Boolean IVDClassVoidRow(var record IVVc,Integer);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean GetFullCurncyPurchaseRate(var string,Date,var val,var val,var val,var val,var val);
external function Integer GetPOSCommand(string,var string,var string,var Integer);
external function boolean POSButtonsForWindow(integer,var record POSButtonsVc);
external procedure SendArtStat(string,string,string,val,val,val,Date,Integer);
external procedure ExtractObj(string,var Integer,var string);
remote procedure IVVc_PasteTaxTemplateCode(var record IVVc,Integer,var Boolean);
remote procedure IVVc_PasteLoyaltyCardNr(var record IVVc,record LocalMachineBlock);
remote procedure IVVc_PasteRegion(var record IVVc,string);
remote procedure IVVc_PasteSalesMan(var record IVVc,string);
remote procedure IVVc_PasteLocation(var record IVVc,Integer);
//external function string 255 FindTaxAuthIDControlCode(string,record IVVc);
external function Boolean IVDClassCreditedRowEFAfter(Integer,Integer,Boolean);
//external function string 255 FindTaxAuthID(string,LongInt,Date);
external function Boolean IVDClassServiceDelDateEFAfter(Integer,Integer);
remote function Boolean IVVc_PasteSerialNr(var record IVVc,Integer,Boolean);
external function Boolean TouchScreenLook();
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
remote function string 255 CurDrawerCode(string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean IVDClassSpecEFAfter(Integer,Integer,Boolean);
external function Boolean IVDClassGCNrEFAfter(Integer,Integer,Integer);
external function Boolean IVDClassOrdRowEFAfter(Integer,Integer,Integer);
external function Boolean IVDClassCredOfficialSerNrEFAfter(Integer,Integer,Integer);
external function Boolean IVDClassSwitchRow(Integer,Integer);
external function Boolean IVDClassPriceFactorEFAfter(Integer,Integer,Integer,Integer);
external function Boolean IVDClassUnitFactPriceEFAfter(Integer,Integer,Integer,Integer);
external function Boolean IVDClassUnitFactQuantEFAfter(Integer,Integer,Integer,Integer);
external function Boolean IVDClassUnitCodeEFAfter(Integer,Integer,Integer,Integer);
external function Boolean IVDClassvRebateEFAfter(Integer,Integer,Integer,Integer);
external function Boolean IVDClassBasePriceEFAfter(Integer,Integer,Integer,Integer);
external function Boolean IVDClassPriceEFAfter(Integer,Integer,Integer,Integer);
remote procedure IVVc_PasteCUPNr(var record IVVc,Integer );
remote procedure IVVc_PasteCuAccCode(var record IVVc,Integer);
remote procedure IVVc_PastePriceList(var record IVVc);
remote procedure IVVc_PastePayDeal(var record IVVc,string,string);
remote procedure IVVc_PasteCurncyCode(var record IVVc,string,Integer,Boolean,Boolean);
external procedure IVVc_PasteLangCode(Integer,var record IVVc);
remote procedure IVVc_PasteInvDate(var record IVVc,record LocalMachineBlock,var Integer,var Integer);
remote procedure IVVc_PasteTransDate(var record IVVc,var Integer,var Integer);
remote procedure IVVc_PasteDelAddrCode(var record IVVc);
remote procedure IVVc_PasteFrPrice(var record IVVc);
external procedure MulM4ProcVal(val,val,var val);
external procedure GetSalesGroup(string,var string);
remote function Boolean IVVc_PasteSum(var record IVVc,Integer,var Boolean,Integer);
remote procedure IVVc_PasteVATCode(var record IVVc,Integer,string,var Boolean);
remote function Boolean IVVc_PasteArtCode(var record IVVc,Integer,var string,var string,Boolean,var Integer);
remote function Boolean PasteCust2InInv(var record IVVc,record LocalMachineBlock,string,Boolean,var string,var string,var string,var string,var string);
external function Boolean IVDchrsum(var record IVVc,Integer);
remote procedure IVSumup(var record IVVc,Boolean);
external procedure IVDchsum(var record IVVc,Integer);
external function Boolean SetUnitFactor(string,var val,val,val,val,var val,var val,var val,var string,Boolean);
external function val CalculateSerialNrQuantity(string,string,string,Boolean,val,val,val,val);
external procedure DisplayIVItem(record IVVc,Integer);
remote procedure PastePDInInv(var record IVVc,string,Boolean);
external function Boolean OpenContactRecord(string,string);

procedure ChangeIVSerialNr(Integer wnst,var record IVVc IVp)
begin
  if (wnst==Rs_insert) then begin
    if (SingleUserMode) then begin
      IVp.SerNr = NextSerNr("IVVc",IVp.TransDate,IVp.SerNr,false,IVp.LangCode);
      PastePDInInv(IVp,"",false);//?? for common number series
    end;
  end;
  return;
end;

global
procedure IVVc_PasteLangCode(Integer wnst,var record IVVc IVp)
BEGIN
  ChangeIVSerialNr(wnst,IVp);
  RETURN;
END;

function Boolean IVDClassUnitXvalEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  row IVVc IVrw;
  record IVVc IVr;
  Boolean res;
  val unitqty,unitprice,qty,price;
  Boolean chrsum,chsum;

  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,IVr);
    MatRowGet(IVr,rownr,IVrw);
    IVrw.Quant = CalculateSerialNrQuantity(IVrw.ArtCode,"","",false,IVrw.UnitXval,IVrw.UnitYval,IVrw.UnitZval,IVrw.Quant);
    chrsum = true;
    MatRowPut(IVr,rownr,IVrw);
    MatRowGet(IVr,rownr,IVrw);
    unitqty = IVrw.UnitFactQuant;
    unitprice = IVrw.UnitFactPrice;
    qty = IVrw.Quant;
    price = IVrw.Price;
    if (SetUnitFactor(IVrw.UnitCode,unitqty,IVrw.UnitXval,IVrw.UnitYval,IVrw.UnitZval,unitprice,qty,price,IVrw.UnitComment,false)) then begin
      IVrw.UnitFactQuant = unitqty;
      IVrw.UnitFactPrice = unitprice;
      IVrw.Quant = qty;
      IVrw.Price = price;
      chrsum = true;
      MatRowPut(IVr,rownr,IVrw);
    end;
    if (chrsum) then begin
      chsum = IVDchrsum(IVr,rownr);
    end;
    IVSumup(IVr,true);
    PutWindowRecord(wn,IVr);    
  end;
  IVDClassUnitXvalEFAfter = res;
  RETURN;
END;

function Boolean IVDClassUnitYvalEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  row IVVc IVrw;
  record IVVc IVr;
  Boolean res;
  val unitqty,unitprice,qty,price;
  Boolean chrsum,chsum;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,IVr);
    MatRowGet(IVr,rownr,IVrw);
    IVrw.Quant = CalculateSerialNrQuantity(IVrw.ArtCode,"","",false,IVrw.UnitXval,IVrw.UnitYval,IVrw.UnitZval,IVrw.Quant);
    chrsum = true;
    MatRowPut(IVr,rownr,IVrw);
    MatRowGet(IVr,rownr,IVrw);
    unitqty = IVrw.UnitFactQuant;
    unitprice = IVrw.UnitFactPrice;
    qty = IVrw.Quant;
    price = IVrw.Price;
    if (SetUnitFactor(IVrw.UnitCode,unitqty,IVrw.UnitXval,IVrw.UnitYval,IVrw.UnitZval,unitprice,qty,price,IVrw.UnitComment,false)) then begin
      IVrw.UnitFactQuant = unitqty;
      IVrw.UnitFactPrice = unitprice;
      IVrw.Quant = qty;
      IVrw.Price = price;
      chrsum = true;
      MatRowPut(IVr,rownr,IVrw);
    end;
    if (chrsum) then begin
      chsum = IVDchrsum(IVr,rownr);
    end;
    IVSumup(IVr,true);
    PutWindowRecord(wn,IVr);    
  end;
  IVDClassUnitYvalEFAfter = res;
  RETURN;
END;

function Boolean IVDClassUnitZvalEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  row IVVc IVrw;
  record IVVc IVr;
  Boolean res;
  val unitqty,unitprice,qty,price;
  Boolean chrsum,chsum;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,IVr);
    MatRowGet(IVr,rownr,IVrw);
    IVrw.Quant = CalculateSerialNrQuantity(IVrw.ArtCode,"","",false,IVrw.UnitXval,IVrw.UnitYval,IVrw.UnitZval,IVrw.Quant);    
    chrsum = true;
    MatRowPut(IVr,rownr,IVrw);
    MatRowGet(IVr,rownr,IVrw);
    unitqty = IVrw.UnitFactQuant;
    unitprice = IVrw.UnitFactPrice;
    qty = IVrw.Quant;
    price = IVrw.Price;
    if (SetUnitFactor(IVrw.UnitCode,unitqty,IVrw.UnitXval,IVrw.UnitYval,IVrw.UnitZval,unitprice,qty,price,IVrw.UnitComment,false)) then begin
      IVrw.UnitFactQuant = unitqty;
      IVrw.UnitFactPrice = unitprice;
      IVrw.Quant = qty;
      IVrw.Price = price;
      chrsum = true;
      MatRowPut(IVr,rownr,IVrw);
    end;
    if (chrsum) then begin
      chsum = IVDchrsum(IVr,rownr);
    end;
    IVSumup(IVr,true);
    PutWindowRecord(wn,IVr);    
  end;
  IVDClassUnitZvalEFAfter = res;
  RETURN;
END;

function Boolean IVDClassSerialNrEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record IVVc IVr;
  Boolean res;
  Boolean chrsum,chsum;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,IVr);
    IVVc_PasteSerialNr(IVr,rownr,TouchScreenLook);
/* One serial numbered item can at the moment not have a different Sales Price than another...
    chrsum = true;
    if (chrsum) then begin
      chsum = IVDchrsum(IVr,rownr);
    end;
// IVSumup already done in IVVc_PasteSerialNr, only necessary if above line is commented in...
    if (chsum) then begin
      IVSumup(IVr,true);
    end;
*/
    PutWindowRecord(wn,IVr);    
  end;
  IVDClassSerialNrEFAfter = res;
  RETURN;
END;

global
procedure IVVc_PasteItem(record IVVc IVr,Integer rownr,Integer wn)
BEGIN
  string 255 inwarning,warning;
  Integer i;
  Integer sernrf;

  if (IVVc_PasteArtCode(IVr,rownr,inwarning,warning,TouchScreenLook,sernrf)) then begin    
    PutWindowRecord(wn,IVr);
/* I'm only calling this to get SendArtStat done, if you have a better way, please put it in */
    IVDchsum(IVr,rownr);
  end;
  if (nonblank(inwarning)) then begin
    MessageBox(0,inwarning);
  end;
  if (nonblank(warning)) then begin
    MessageBox(0,warning);
  end;
  if (IVDClassSwitchRow(wn,rownr)) then begin end;    
  RETURN;
END;
 
function Boolean IVDClassArtCodeEFAfter(Integer wn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;
  
  if (changed!=0) then begin
//    DeselectWindow(wn,false);//what for ? 
    GetWindowRecord(wn,IVr);
    IVVc_PasteItem(IVr,rownr,wn);
    DisplayIVItem(IVr,rownr);
  end;
  IVDClassArtCodeEFAfter = true;
  return;
end;

global
function Boolean IVVc_PasteQuantity2(var record IVVc IVr,Integer rownr,var Boolean serportf,var record LSerialPortDeviceVc LSPDr)
begin
  Boolean res;
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);
  res = IVVc_PasteQuantityRemote(IVr,rownr,LMb.LocalMachineCode,LMb.DefReturnLocation,serportf,LSPDr);
  serportf = FindLocalSerialPortDevice(kSerialPortDeviceClassDisplay,-1,LMb.LocalMachineCode,LSPDr);
  IVVc_PasteQuantity2 = res;
  
  return;
end;

global
function Boolean IVVc_PasteQuantity(var record IVVc IVr,Integer rownr)
begin
  Boolean res;
  record LSerialPortDeviceVc LSPDr;
  Boolean serportf;
  
  res = IVVc_PasteQuantity2(IVr,rownr,serportf,LSPDr);
  IVVc_PasteQuantity = res;
  
  return;
end;

global
procedure IVPasteItem(string artcode,Integer wn,LongInt defqty)
begin
  Integer rownr;
  record IVVc IVr;
  row IVVc IVrw;
  Integer i,rwcnt;
  record INVc INr;
  Boolean testf;
  
//    DeselectWindow(wn,false);//what for ? 
  GetWindowRecord(wn,IVr);
  INr.Code = artcode;
  if (ReadFirstItem(artcode,INr,true,false)==false) then begin 
    goto LIVPasteItem;
  end;
  rownr = WindowActiveRow(wn);
  WindowDeactivateField(wn);
  if (true) then begin
    if (rownr>=0) then begin
      GetWindowRecord(wn,IVr);  
      MatRowGet(IVr,rownr,IVrw);
      if (nonblank(artcode)) then begin
        if (artcode!=IVrw.ArtCode) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        IVrw.Quant = IVrw.Quant + 1;
        MatRowPut(IVr,rownr,IVrw);
        IVVc_PasteQuantity(IVr,rownr);
        PutWindowRecord(wn,IVr);  
        DisplayIVItem(IVr,rownr);
        WindowFieldGoto(wn,IVr,rownr,"Quant",true);
        goto LIVPasteItem;
      end;
    end;
  end;
  if (nonblank(artcode)) then begin
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.ArtCode==artcode) then begin
        rownr = i;
        goto L22IVPasteItem;
      end;
    end;
    rownr = rwcnt;
L22IVPasteItem:;  
    if (rownr==rwcnt) then begin
      ClearRow(IVr,IVrw,1);
      IVrw.ArtCode = artcode;
      MatRowPut(IVr,rownr,IVrw);
      IVVc_PasteItem(IVr,rownr,wn);
      PutWindowRecord(wn,IVr);
      if (defqty>0) then begin
        GetWindowRecord(wn,IVr);
        MatRowGet(IVr,rownr,IVrw);
        IVrw.Quant = defqty;
        MatRowPut(IVr,rownr,IVrw);
        PutWindowRecord(wn,IVr);
        IVVc_PasteQuantity(IVr,rownr);
      end;
      DisplayIVItem(IVr,rownr);
      PutWindowRecord(wn,IVr);
    end else begin
      MatRowGet(IVr,rownr,IVrw);
      IVrw.Quant = IVrw.Quant + 1;
      MatRowPut(IVr,rownr,IVrw);
      IVVc_PasteQuantity(IVr,rownr);
      DisplayIVItem(IVr,rownr);
      PutWindowRecord(wn,IVr);
    end;
    WindowFieldGoto(wn,IVr,rownr,"Quant",true);
  end;  
LIVPasteItem:;
  return;
end;

global
function Boolean IVDClassiPhonePasteItem(Integer wn,Integer pastewn,Boolean changedf)
begin  
  string 255 inwarning;
  record IVVc IVr;
  boolean res;
  string 255 artcode;
  LongInt qty;
  res = true;
  
  if (changedf) then begin
    GetWindowRecord(wn,IVr);
    if (IVr.OKFlag!=0) then begin goto LIVDClassiPhonePasteItem; end;
    artcode = GetWindowString(wn,"touchscreenitem");
    qty = StringToVal(GetWindowString(wn,"touchscreenitemqty"),2);
    IVPasteItem(artcode,wn,qty);
  end;
  
LIVDClassiPhonePasteItem:;  
  IVDClassiPhonePasteItem = true;
  return;
end;
 
global
procedure IVDClassPasteItemButton(Integer butnr)
BEGIN
  Integer i,rwcnt,wn;
  record ItemButtonsBlock ItemButtonsRec;
  row ItemButtonsBlock ItemButtonsrw;
  record IVVc IVr;

  wn = CurWindow;
  DeselectWindow(wn,true);
  if (WindowState(wn)!=2) then begin//Rs_update
    GetWindowRecord(wn,IVr);
  end else begin
    GetPrevWindowRecord(wn,IVr);
  end;
  if (IVr.OKFlag!=0 or (nonblank(IVr.CAE) and IVr.CAEAFlag==0)) then begin
    goto LIVDClassPasteItemButton;
  end;
  BlockLoad(ItemButtonsRec);
  rwcnt = MatRowCnt(ItemButtonsRec);
  for (i=0;i<rwcnt;i=i+1) begin
    if (i==(butnr-1)) then begin
      MatRowGet(ItemButtonsRec,i,ItemButtonsrw);
      IVPasteItem(ItemButtonsrw.ArtCode,wn,-1);
      goto LIVDClassPasteItemButton;
    end;
  end;
LIVDClassPasteItemButton:;  
  RETURN;
END;
  
function Boolean IVDClassQuantEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;
  Boolean serportf;
  record LSerialPortDeviceVc LSPDr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,IVr);
    IVVc_PasteQuantity2(IVr,rownr,serportf,LSPDr);
    PutWindowRecord(wn,IVr);
    DisplayIVItem2(IVr,rownr,serportf,LSPDr);
  end;
  IVDClassQuantEFAfter = true;
  return;
end;

function Boolean IVDClassVATCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;
  Boolean chsum;

  if (changed!=0) then begin  
    GetWindowRecord(wn,IVr);
    IVVc_PasteVATCode(IVr,rownr,WindEFstr(wn),chsum);
    if (chsum) then begin
      IVDchsum(IVr,rownr);
      IVSumup(IVr,true);
    end;
    PutWindowRecord(wn,IVr);
  end;
  IVDClassVATCodeEFAfter = true;
  return;
end;

function Boolean IVDClassTaxTemplateCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin  
  record IVVc IVr;
  Boolean chsum;

  if (changedf) then begin  
    GetWindowRecord(wn,IVr);
    IVVc_PasteTaxTemplateCode(IVr,rownr,chsum);
    if (chsum) then begin
      IVDchsum(IVr,rownr);
    end;    
    IVSumup(IVr,true);
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassTaxTemplateCodeEFAfter = true;
  return;
end;

function Boolean IVDClassSalesManEFAfter(Integer wn,Boolean changedf)
begin  
  record IVVc IVr;

  if (changedf) then begin  
    DeselectWindow(wn,false);    
    GetWindowRecord(wn,IVr);
    IVVc_PasteSalesMan(IVr,WindEFstr(wn));    
    PutWindowRecord(wn,IVr);
  end;
  IVDClassSalesManEFAfter = true;
  return;
end;

global
function Boolean IVDClassCustCodeEFAfter(Integer wn,Integer rownr,Integer changed)
begin
  record IVVc IVr;
  string 255 warning,errstr,prepstr,invdatewarn,transdatewarn;
  record LocalMachineBlock LMb;

  GetWindowRecord(wn,IVr);
  if ((changed!=0) or ((blank(IVr.Addr0)) and (nonblank(IVr.CustCode)))) then begin
    BlockLoad(LMb);
    GetWindowRecord(wn,IVr);    
    if (PasteCust2InInv(IVr,LMb,WindEFstr(wn),true,warning,errstr,prepstr,invdatewarn,transdatewarn)) then begin
    end else begin
      Beep;
    end;

    PutWindowRecord(wn,IVr);
    if (nonblank(warning)) then begin
      MessageBox(0,warning);
    end;
    if (nonblank(errstr)) then begin
      MessageBox(0,errstr);
    end;
    if (nonblank(prepstr)) then begin
      MessageBox(0,prepstr);
    end;
    if (nonblank(transdatewarn)) then begin
      MessageBox(0,transdatewarn);
    end;
    if (nonblank(invdatewarn)) then begin
      MessageBox(0,invdatewarn);
    end;
//          ChangeIVSerialNr(wn,IVp);//what is it?
  end;
  IVDClassCustCodeEFAfter = true;
  return;
end;

global
function Boolean IVDClassAddr0EFAfter(Integer wn,Boolean changedf)
begin
  record IVVc IVr;
  string 255 warning,errstr,prepstr,invdatewarn,transdatewarn;
  record LocalMachineBlock LMb;
  Boolean res;
  
  if (changedf) then begin
    BlockLoad(LMb);
    GetWindowRecord(wn,IVr);
    if (IVr.OKFlag==0) then begin
      if (IVVc_PasteAddr0(IVr,LMb,WindEFstr(wn),true,warning,errstr,prepstr,invdatewarn,transdatewarn)) then begin
        res = true;
        PutWindowRecord(wn,IVr);
        if (nonblank(warning)) then begin
          MessageBox(0,warning);
        end;
        if (nonblank(errstr)) then begin
          MessageBox(0,errstr);
        end;
        if (nonblank(prepstr)) then begin
          MessageBox(0,prepstr);
        end;
        if (nonblank(transdatewarn)) then begin
          MessageBox(0,transdatewarn);
        end;
        if (nonblank(invdatewarn)) then begin
          MessageBox(0,invdatewarn);
        end;
      end;
    end;
  end;
  IVDClassAddr0EFAfter = res;
  return;
end;

function Boolean IVDClassDiscPercEFAfter(Integer wn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;
  val t;

  if (changed!=0) then begin  
    GetWindowRecord(wn,IVr);
    MulM4ProcVal(IVr.DiscPerc,IVr.Sum1,t);
    IVr.DiscSum = t;
    if (IVr.DiscPerc==0) then begin IVr.DiscSum = blankval; end;
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassDiscPercEFAfter = true;
  return;
end;

function Boolean IVDClassFrPriceEFAfter(Integer wn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;
  val t;

  if (changed!=0) then begin  
    DeselectWindow(wn,false);
    GetWindowRecord(wn,IVr);
    IVVc_PasteFrPrice(IVr);
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassFrPriceEFAfter = true;
  return;
end;

function Boolean IVDClassDelAddrCodeEFAfter(Integer wn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;
  val t;

  if (changed!=0) then begin  
    GetWindowRecord(wn,IVr);
    IVVc_PasteDelAddrCode(IVr);
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassDelAddrCodeEFAfter = true;
  return;
end;

function Boolean IVDClassRegionEFAfter(Integer wn,Boolean changedf)
begin  
  record IVVc IVr;

  if (changedf) then begin  
    GetWindowRecord(wn,IVr);
    IVVc_PasteRegion(IVr,WindEFstr(wn))
    PutWindowRecord(wn,IVr);
  end;
  IVDClassRegionEFAfter = true;
  return;
end;

function Boolean IVDClassTransDateEFAfter(Integer wn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;
  Integer err1,err2;

  if (changed!=0) then begin  
    DeselectWindow(wn,false);
    GetWindowRecord(wn,IVr);
    IVVc_PasteTransDate(IVr,err1,err2);
    if (err1!=0) then begin
      MessageBox(err1,"");
    end;
    if (err2!=0) then begin
      MessageBox(err2,"");
    end;
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassTransDateEFAfter = true;
  return;
end;

function Boolean IVDClassInvDateEFAfter(Integer wn,Integer rownr,Integer changed)
begin
  record IVVc IVr;
  Integer err1,err2;
  record LocalMachineBlock LMb;
  
  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,IVr);
    IVVc_PasteInvDate(IVr,LMb,err1,err2);
    if (err1!=0) then begin
      MessageBox(err1,"");
    end;
    if (err2!=0) then begin
      MessageBox(err2,"");
    end;
    PutWindowRecord(wn,IVr);
  end;
  IVDClassInvDateEFAfter = true;
  return;
end;

function Boolean IVDClassLangCodeEFAfter(Integer wn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;

  if (changed!=0) then begin  
    DeselectWindow(wn,false);
    GetWindowRecord(wn,IVr);
    IVVc_PasteLangCode(WindowState(wn),IVr);
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassLangCodeEFAfter = true;
  return;
end;

function Boolean IVDClassBaseRate2EFAfter(Integer wn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;

  if (changed!=0) then begin  
    DeselectWindow(wn,false);
    GetWindowRecord(wn,IVr);
    IVr.BaseSum4 = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    IVDchsum(IVr,rownr);
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassBaseRate2EFAfter = true;
  return;
end;

function Boolean IVDClassBaseRate1EFAfter(Integer wn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;

  if (changed!=0) then begin  
    DeselectWindow(wn,false);
    GetWindowRecord(wn,IVr);
    IVDchsum(IVr,rownr);
    IVr.BaseSum4 = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassBaseRate1EFAfter = true;
  return;
end;

function Boolean IVDClassFrRateEFAfter(Integer wn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;

  if (changed!=0) then begin  
    DeselectWindow(wn,false);
    GetWindowRecord(wn,IVr);
    IVr.BaseSum4 = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    IVDchsum(IVr,rownr);
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassFrRateEFAfter = true;
  return;
end;

function Boolean IVDClassToRateB1EFAfter(Integer wn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;

  if (changed!=0) then begin  
    DeselectWindow(wn,false);
    GetWindowRecord(wn,IVr);
    IVr.BaseSum4 = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    IVDchsum(IVr,rownr);
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassToRateB1EFAfter = true;
  return;
end;

function Boolean IVDClassToRateB2EFAfter(Integer wn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;

  if (changed!=0) then begin  
    DeselectWindow(wn,false);
    GetWindowRecord(wn,IVr);
    IVr.BaseSum4 = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    IVDchsum(IVr,rownr);
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassToRateB2EFAfter = true;
  return;
end;

function Boolean IVDClassCurncyCodeEFAfter(Integer wn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;
  record IVVc IV2r;
  string 10 oldcurncy;

  if (changed!=0) then begin  
    DeselectWindow(wn,false);
    GetWindowRecord(wn,IVr);
    IVVc_PasteCurncyCode(IVr,WindEFstr(wn),rownr,false,true);
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassCurncyCodeEFAfter = true;
  return;
end;

function Boolean IVDClassPayDealEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;
  record IVVc IV2r;
  Integer preinvtype;
  record LocalMachineBlock LMb;

  if (changed!=0) then begin  
    GetWindowRecord(wn,IVr);
    if (WindowState(wn)==Rs_update) then begin
      GetPrevWindowRecord(wn,IV2r);
      if (IV2r.InvType==kInvoiceTypeCredit or IV2r.InvType==kInvoiceTypeCreditSpecialSales) then begin
        IVr.DisputedFlag = 0;
      end;
      preinvtype = IV2r.InvType;
    end;
    BlockLoad(LMb);
    IVVc_PastePayDeal(IVr,WindEFstr(wn),LMb.DefReturnLocation);
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassPayDealEFAfter = true;
  return;
end;

function Boolean IVDClassCommisionEFAfter(Integer wn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;

  if (changed!=0) then begin  
    DeselectWindow(wn,false);
    GetWindowRecord(wn,IVr);
    IVDchsum(IVr,rownr);
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassCommisionEFAfter = true;
  return;
end;

function Boolean IVDClassPriceListEFAfter(Integer wn,Boolean changedf)
begin  
  record IVVc IVr;

  if (changedf) then begin  
    DeselectWindow(wn,false);
    GetWindowRecord(wn,IVr);
    IVVc_PastePriceList(IVr);
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassPriceListEFAfter = true;
  return;
end;

function Boolean IVDClassRebCodeEFAfter(Integer wn,Boolean changedf)
begin  
  record IVVc IVr;

  if (changedf) then begin  
    DeselectWindow(wn,false);
    GetWindowRecord(wn,IVr);
    IVVc_PasteRebCode(IVr);
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassRebCodeEFAfter = true;
  return;
end;

function Boolean IVDClassSumEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;
  row IVVc IVrw;
  Boolean chsum,putf;

  GetWindowRecord(wn,IVr);
  putf = IVVc_PasteSum(IVr,rownr,chsum,changed);
  if (putf) then begin
    chsum = true;
    if (chsum) then begin
//      chsum = IVDchrsum(IVr,rownr);
      IVDchsum(IVr,rownr);
      IVSumup(IVr,true);  
    end;
    PutWindowRecord(wn,IVr);
    DisplayIVItem(IVr,rownr);
  end;
  IVDClassSumEFAfter = true;
  return;
end;

function Boolean IVDClassCuAccCodeEFAfter(Integer wn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;

  if (changed!=0) and (rownr>=0) then begin  
    DeselectWindow(wn,false);
    GetWindowRecord(wn,IVr);
    IVVc_PasteCuAccCode(IVr,rownr);
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassCuAccCodeEFAfter = true;
  return;
end;

function Boolean IVDClassCUPNrEFAfter(Integer wn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;

  if (changed!=0) and (rownr>=0) then begin  
    GetWindowRecord(wn,IVr);
    IVVc_PasteCUPNr(IVr,rownr);
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassCUPNrEFAfter = true;
  return;
end;

function Boolean IVDClassSalesAccEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;
  row IVVc IVrw;
  record AccVc Accr;

  if (changed!=0) and (rownr>=0) then begin  
    GetWindowRecord(wn,IVr);
    MatRowGet(IVr,rownr,IVrw);
    Accr.AccNumber = IVrw.SalesAcc;
    ReadFirstMain(Accr,1,true);
    IVrw.PeriodCode = Accr.PeriodCode;
    MatRowPut(IVr,rownr,IVrw);
    if (IVrw.stp==5) then begin
      IVDchsum(IVr,rownr);
    end;
    PutWindowRecord(wn,IVr);
  end;
  IVDClassSalesAccEFAfter = true;
  return;
end;

function Boolean IVDClassMachineNameEFAfter(Integer wn,Boolean  changedf)
begin
  record IVVc IVr;
  
  if (changedf) then begin
    GetWindowRecord(wn,IVr);
    IVr.DrawerCode = CurDrawerCode(IVr.MachineName);
    PutWindowRecord(wn,IVr);
  end;
  IVDClassMachineNameEFAfter = true;
  return;
end;

function Boolean IVDClassLocationEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record IVVc IVr;
  
  if (changedf) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,IVr);
    IVVc_PasteLocation(IVr,rownr);
    PutWindowRecord(wn,IVr);
  end;
  IVDClassLocationEFAfter = true;
  return;
end;

function Boolean IVDClassLoyaltyCardNrEFAfter(Integer wn,Boolean changedf)
begin
  record IVVc IVr;
  record LocalMachineBlock LMb;
  
  if (changedf) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,IVr);
    IVVc_PasteLoyaltyCardNr(IVr,LMb);
    PutWindowRecord(wn,IVr);
  end;
  IVDClassLoyaltyCardNrEFAfter = true;
  return;
end;

function Integer LastEnteredItemRowNr(record IVVc IVr)
begin
  Integer res;
  row IVVc IVrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(IVr);
  MatRowGet(IVr,rwcnt-1,IVrw);        
  if (IVrw.stp!=kInvoiceRowTypeStructuredItemComponent) then begin
    res = rwcnt - 1;
    goto LLastEnteredItemRowNr;
  end;
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(IVr,i,IVrw);        
    if (IVrw.stp!=kInvoiceRowTypeStructuredItemComponent) then begin
      res = i;
      goto LLastEnteredItemRowNr;
    end;
  end;
LLastEnteredItemRowNr:;  
  LastEnteredItemRowNr = res;
  return;
end;

global
updating function Boolean IVDClassivcashcommandOnEnterKey(Integer wn,Integer rownr)
begin
  Boolean res;
  string 255 input,tstr,value1,value2,crncy,tstr2;
  val fr,to1,to2,br1,br2;
  record IVVc IVr;
  record IVVc prevIVr;
  row IVVc IVrw;
  record INVc INr;
  Integer rwcnt,selrownr,suspended;
  val v1,t,t1;
  Boolean save_record,new_record,found;
  record GeneralOptionBlock GenOptRec;
  Integer sernrf,decimalptfctr;
  record DefCashBlock DCb;
  record POSButtonsVc POSBr;
  row POSButtonsVc POSBrw,cashPOSBrw;
  Integer pi,prwcnt;
  Boolean foundpos;
  Integer action;
  val prevRetValue;
  record SerBalVc SBr;
  record LocalMachineBlock LMb;
  
  suspended = StringToInt(GetWindowString(wn,"Suspended"));
  input = GetWindowString(wn,"ivcashcommand");
  PutWindowString(wn,"ivcashcommand","");
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVr);
  GetPrevWindowRecord(wn,prevIVr);
  
  // If purchase is done create new record
  if (IVr.OKFlag!=0) then begin
    MessageBox(2075," " & IVr.SerNr)
    goto LIVDClassivcashcommandOnEnterKey;
/*  
    WindowDoCancel(wn);
    WindowDoNew(wn,0);
    GetWindowRecord(wn,IVr);
    ReRunWindowDef(wn);
*/    
  end;
  if (IVr.Invalid!=0) then begin
    goto LIVDClassivcashcommandOnEnterKey;
  end;
  if (blank(input)) then begin
    goto LIVDClassivcashcommandOnEnterKey;
  end;
  foundpos = POSButtonsForWindow(wn,POSBr);
  IVr.Suspended = suspended;
  BlockLoad(GenOptRec);
  BlockLoad(LMb);
  rwcnt = MatRowCnt(IVr);
  action = GetPOSCommand(input,value1,value2,decimalptfctr);
  switch (action) begin
    case kPOSCommandsTypeQuantityAndItem:
      if (ReadFirstItem(value2,INr,true,false)) then begin
        IVrw.ArtCode = INr.Code;
        IVrw.Quant = StringToVal(value1,M4Val);   
        if (decimalptfctr!=0) then begin
          IVrw.Quant = IVrw.Quant/decimalptfctr;
        end;
        if (rwcnt==0) then begin
          MatRowInsert(IVr,rwcnt,IVrw);
        end else begin
          MatRowPut(IVr,rwcnt,IVrw);
        end;
        if (IVVc_PasteArtCode(IVr,rwcnt,tstr,tstr,TouchScreenLook,sernrf)) then begin
        end;
//        DisplayIVCashItem(IVr,rwcnt);
      end else begin
        StopAlert(USetStr(1233));
        goto LIVDClassivcashcommandOnEnterKey1;
      end;
    case kPOSCommandsTypeCash:
      BlockLoad(DCb);
      ClearRow(POSBr,cashPOSBrw,1);
      prwcnt = MatRowCnt(POSBr);
      for (pi=0;pi<prwcnt;pi=pi+1) begin
        MatRowGet(POSBr,pi,POSBrw);
        switch (POSBrw.ButtonType) begin
          case kPOSButtonTypeCashPayment:
            CopyRow(POSBr,POSBrw,cashPOSBrw);
            pi = prwcnt;
        end;
      end;

      if (blank(value1)) then begin
        ClearRow(IVr,IVrw,kInvoiceRowTypeCashPayment);
        IVrw.stp = kInvoiceRowTypeCashPayment;
        IVrw.Sum = -IVr.RetValue;
        if (IVrw.Sum!=0) then begin
          IVrw.PayMode = DCb.DefCashPayMode;
          IVrw.Spec = cashPOSBrw.Label;
          if (blank(IVrw.Spec)) then begin
            GetPM(DCb.DefCashPayMode,tstr,IVrw.Spec);
          end;
          crncy = IVr.CurncyCode;
          if (GetFullCurncyPurchaseRate(crncy,CurrentDate,fr,to1,to2,br1,br2)==false) then begin
            GetFullCurncyRate(crncy,CurrentDate,fr,to1,to2,br1,br2);
          end;
          IVrw.CurncyCode = crncy;
          IVrw.FrRate = fr;
          IVrw.ToRateB1 = to1;
          IVrw.ToRateB2 = to2;
          IVrw.BaseRate1 = br1;
          IVrw.BaseRate2 = br2;  
/*        
        crncy = RepSpec.CurncyCode;
        GetFullCurncyRate(crncy,IVr.TransDate,from,to1,to2,base1,base2);
        IVrw.CurncyCode = crncy;
        IVrw.FrRate = from;
        IVrw.ToRateB1 = to1;
        IVrw.ToRateB2 = to2;
        IVrw.BaseRate1 = base1;
        IVrw.BaseRate2 = base2;  
*/        
          MatRowPut(IVr,MatRowCnt(IVr),IVrw);
          save_record = true;    
          IVSumup(IVr,true);              
        end;
      end else begin
        v1 = StringToVal(value1,M4Val);
        if (decimalptfctr!=0) then begin
          v1 = v1/decimalptfctr;
        end;
        if (v1==0) then begin
//          IVr.CashValue = 0;
          IVSumup(IVr,true);              
        end else begin
          ClearRow(IVr,IVrw,kInvoiceRowTypeCashPayment);
          IVrw.stp = kInvoiceRowTypeCashPayment;
          IVrw.Sum = v1;
          IVrw.PayMode = DCb.DefCashPayMode;
          MatRowPut(IVr,MatRowCnt(IVr),IVrw);
          save_record = true;      
        end;
        IVSumup(IVr,true);              
      end;
    case kPOSCommandsTypeFinish:
      IVSumup(IVr,true);              
      IVr.OKFlag = 1;
      save_record = true;      
      new_record = true;
    case kPOSCommandsTypeCreditCardSum:
      if (blank(value1)) then begin
//        IVr.RecValue = IVr.Sum4 - IVr.CashValue;
        IVr.RecValue = IVr.Sum4;
        save_record = true;    
      end else begin
        v1 = StringToVal(value1,M4Val);
        if (decimalptfctr!=0) then begin
          v1 = v1/decimalptfctr;
        end;
        if (v1==0) then begin
          IVr.RecValue = 0;
          IVSumup(IVr,true);              
        end else begin
          IVr.RecValue = IVr.RecValue + v1;
          save_record = true;      
        end;
      end;
    case kPOSCommandsTypeLoyaltyCard:
      IVr.LoyaltyCardNr = value1;
      IVVc_PasteLoyaltyCardNr(IVr,LMb);
      save_record = true;
    case kPOSCommandsTypeLoyaltyPointsPayment:
    case kPOSCommandsTypeRebate:
      rwcnt = MatRowCnt(IVr);
      if (rwcnt>0) then begin
        selrownr = LastEnteredItemRowNr(IVr);
        MatRowGet(IVr,selrownr,IVrw);
        IVrw.vRebate = StringToVal(value1,M4UVal);
        if (decimalptfctr!=0) then begin
          IVrw.vRebate = IVrw.vRebate/decimalptfctr;
        end;
        MatRowPut(IVr,selrownr,IVrw);                
        if (IVDchrsum(IVr,selrownr)) then begin 
          IVDchsum(IVr,selrownr);
          IVSumup(IVr,true);      
        end;
//        DisplayIVCashItem(IVr,selrownr);
      end;
    case kPOSCommandsTypeDeleteRow:
      selrownr = StringToInt(value1) - 1;
      if (selrownr>=0) then begin
        if (selrownr<MatRowCnt(IVr)) then begin
          if (UserCanAction("AllowIVTSRowsDelete",false)==false) then begin
//            SetSelectedListLine(wn,selrownr);
//            POSManagersAction("DeleteItem");
          end else begin
//            DisplayIVItemStorno(IVr,selrownr);        
            MatRowDelete(IVr,selrownr);
          end;
        end;
        IVSumup(IVr,true);
      end;
    case kPOSCommandsTypeVoidRow:
      if (UserCanAction("AllowIVTSRowsVoid",false)) or (UserCanAction("AllowNPTSIVRowsVoid",false)) then begin
        selrownr = StringToInt(value1) - 1;
        if (selrownr>=0) then begin
          if (selrownr<MatRowCnt(IVr)) then begin
            if (IVDClassVoidRow(IVr,selrownr)) then begin
              PutWindowRecord(wn,IVr);    
            end;
          end;
        end;
      end;
    case kPOSCommandsTypeQuantityAddOne:
      rwcnt = MatRowCnt(IVr);
      if (rwcnt>0) then begin
        selrownr = LastEnteredItemRowNr(IVr);
        MatRowGet(IVr,selrownr,IVrw);        
        if (IVrw.stp!=kInvoiceRowTypeVoid) and (IVrw.stp!=kInvoiceRowTypeStructuredItemComponent) then begin
          if (GetWindowString(wn,"ivcashcommandlastitemsernrf")!="true") then begin
            IVrw.Quant = IVrw.Quant + 1.00;
            MatRowPut(IVr,selrownr,IVrw);        
            if (IVVc_PasteQuantity(IVr,selrownr)) then begin    
              PutWindowRecord(wn,IVr);    
              IVDClass_RefreshStringList(wn,IVr);
//              IVSumupSoftEditFields(wn,IVr);
//              DisplayIVCashItem(IVr,selrownr);
            end;
            
//            IVDchrsum(IVr,selrownr,GenOptRec.UseDiscount);
//            IVDchsum(IVr,selrownr);
//            IVSumup(IVr,true);
//            AddMultiBuyDiscountItems_IVVc(IVr);
//            DisplayIVItem(IVr,selrownr);        
          end else begin
            MessageBox(24180,"");
          end;
        end else begin
          MessageBox(24175,"");
        end;
      end;
    case kPOSCommandsTypeQuantitySubOne:
      rwcnt = MatRowCnt(IVr);
      if (rwcnt>0) then begin
        selrownr = LastEnteredItemRowNr(IVr);
        MatRowGet(IVr,selrownr,IVrw);        
        if (IVrw.stp!=kInvoiceRowTypeVoid) and (IVrw.stp!=kInvoiceRowTypeStructuredItemComponent) then begin
          IVrw.Quant = IVrw.Quant - 1.00;
          MatRowPut(IVr,selrownr,IVrw);        
          if (IVVc_PasteQuantity(IVr,selrownr)) then begin    
            PutWindowRecord(wn,IVr);    
            IVDClass_RefreshStringList(wn,IVr);
//            IVSumupSoftEditFields(wn,IVr);
//            DisplayIVCashItem(IVr,selrownr);
          end;    
//          IVDchrsum(IVr,selrownr,GenOptRec.UseDiscount);
//          IVDchsum(IVr,selrownr);
//          IVSumup(IVr,true);
//          AddMultiBuyDiscountItems_IVVc(IVr);
//          DisplayIVItem(IVr,selrownr);        
        end else begin
          MessageBox(24175,"");
        end;
      end;
    case kPOSCommandsTypeQuantity:
      rwcnt = MatRowCnt(IVr);
      if (rwcnt>0) then begin
        selrownr = LastEnteredItemRowNr(IVr);
        MatRowGet(IVr,selrownr,IVrw);        
        if (IVrw.stp!=kInvoiceRowTypeVoid) and (IVrw.stp!=kInvoiceRowTypeStructuredItemComponent) then begin
          if (GetWindowString(wn,"ivcashcommandlastitemsernrf")!="true") then begin
            IVrw.Quant = StringToVal(value1,M4Val);
            if (decimalptfctr!=0) then begin
              IVrw.Quant = IVrw.Quant/decimalptfctr;
            end;
            MatRowPut(IVr,selrownr,IVrw);  
            if (IVVc_PasteQuantity(IVr,selrownr)) then begin    
              PutWindowRecord(wn,IVr);    
              IVDClass_RefreshStringList(wn,IVr);
              DisplayIVItem(IVr,selrownr);
//              IVSumupSoftEditFields(wn,IVr);
//              DisplayIVCashItem(IVr,selrownr);
            end;    
//            IVDchrsum(IVr,selrownr,GenOptRec.UseDiscount);
//            IVDchsum(IVr,selrownr);
//            IVSumup(IVr,true);
//            AddMultiBuyDiscountItems_IVVc(IVr);
//            DisplayIVCashItem(IVr,selrownr);        
          end else begin
            MessageBox(24180,"");
          end;
        end else begin
          MessageBox(24175,"");
        end;
      end;
    case kPOSCommandsTypeSerialNr:
      rwcnt = MatRowCnt(IVr);
      if (rwcnt>0) then begin
        MatRowGet(IVr,rwcnt-1,IVrw);        
        if (IVrw.stp!=kInvoiceRowTypeVoid) then begin
          IVrw.SerialNr = value1;
          MatRowPut(IVr,rwcnt-1,IVrw);        
        end else begin
          MessageBox(24175,"");
        end;
      end;
    case kPOSCommandsTypeLoyaltyCard:
      IVr.LoyaltyCardNr = value1;
      IVVc_PasteLoyaltyCardNr(IVr,LMb);
/*
    case kPOSCommandsTypeVolumetricBarCodeScan:
      if (VolBarcodeScan_IVCashVc(IVCashr,value1)) then begin
        IVCashSumup(IVCashr,true);
        save_record = true;      
      end else begin
      end;
*/
    case kPOSCommandsTypeReprintReceipt:
      if (IVr.OKFlag!=0) then begin
//        IVPrintReceipt(wn,IVr,prevIVr,-1,false,false,0,WindowState(wn));
      end;
      goto LIVDClassivcashcommandOnEnterKey1;
    otherwise
      StripSpace(tstr,value1);
      if (GetFirstItem(value1,INr)) then begin
        value1 = INr.Code;
        found = true;
      end;
      if (found==false) then begin
        found = ReadFirstItem(tstr,INr,true,false);
      end;
      if (found==false) then begin
        found = SerialNrForOneItem(value1,SBr);
        if (found) then begin
          sernrf = 1;
        end;
      end;
      if (found) then begin
        PutWindowString(wn,"touchscreenitem",value1);
        PutWindowString(wn,"touchscreenitemqty",1.00);
        if (sernrf!=0) then begin
          PutWindowString(wn,"ivcashcommandlastitemsernrf","true");
        end;
        DeselectWindow(wn,false);
        IVDClasstouchscreenitemEFAfter(wn,0,true);
        goto LIVDClassivcashcommandOnEnterKey1;
      end else begin
        StopAlert(USetStr(1233));
        goto LIVDClassivcashcommandOnEnterKey1;
      end;
/*
      if (ReadFirstItem(tstr,INr,true,false)) then begin
        rwcnt = MatRowCnt(IVr);
        IVrw.ArtCode = INr.Code;
        IVrw.Quant = 1;
        MatRowPut(IVr,rwcnt,IVrw);
        if (IVVc_PasteArtCode(IVr,rwcnt,tstr)) then begin 
//        DisplayIVCashItem(IVr,rwcnt);
        end;        
      end else begin
        StopAlert(USetStr(1233));
        goto LIVDClassivcashcommandOnEnterKey;
      end;
*/      
  end;
  PutWindowRecord(wn,IVr);
  IVDClass_RefreshStringList(wn,IVr);
  prevRetValue = IVr.RetValue;
//  ReRunWindowDef(wn);//jjtmp
  if (save_record) then begin
    if (WindowDoOK(wn,0)==false) then begin 
      IVr.OKFlag = 0;
      PutWindowRecord(wn,IVr);
      new_record = false;
    end else begin
      switch (action) begin
        case kPOSCommandsTypeFinish:
          IVPrintReceipt(wn,IVr,prevIVr,-1,false,false,0,WindowState(wn));
      end;
    end;
  end;
  if (new_record) then begin
    WindowDoNew(wn,0);
    GetWindowRecord(wn,IVr);
    IVr.RetValue = prevRetValue;
    PutWindowString(wn,"touchscreenwindowpage",1);
    PutWindowString(wn,"touchscreenwindowpagestack","1");
    PutWindowString(wn,"touchscreenwindowprinterstack","*");
    PutWindowString(wn,"CustomerDisplayData_Line1","");
    PutWindowString(wn,"CustomerDisplayData_Line2","");    
    PutWindowString(wn,"touchscreenitemlastrownr",-1);
    tstr = USetStr(24172) & "  ";
    tstr = tstr & ValToString(prevRetValue,M4Val,ThousandSeparator,DecimalSeparator,0);
    SetPOSWindowDisplay("",tstr);
    PutWindowRecord(wn,IVr);
    IVDClass_RefreshStringList(wn,IVr);
  end;
LIVDClassivcashcommandOnEnterKey1:;  
  DeselectWindow(wn,false);
  //WindowFieldGoto(wn,IVr,-1,"ivcashcommand",false);
  WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",false);
LIVDClassivcashcommandOnEnterKey:;  
  IVDClassivcashcommandOnEnterKey = res;
  return;
end;

function Boolean IVDClassInvCountryEFAfter(Integer wn,Boolean changedf)
begin  
  record IVVc IVr;

  if (changedf) then begin  
    GetWindowRecord(wn,IVr);
    IVVc_PasteInvCountry(IVr,WindEFstr(wn))
    PutWindowRecord(wn,IVr);
  end;
  IVDClassInvCountryEFAfter = true;
  return;
end;

function Boolean IVDClassDelCountryEFAfter(Integer wn,Boolean changedf)
begin  
  record IVVc IVr;

  if (changedf) then begin  
    GetWindowRecord(wn,IVr);
    IVVc_PasteDelCountry(IVr,WindEFstr(wn))
    PutWindowRecord(wn,IVr);
  end;
  IVDClassDelCountryEFAfter = true;
  return;
end;

function Boolean IVDClassSerNrEFAfter(Integer wn,Boolean changedf)
begin  
  record IVVc IVr;

  if (changedf) then begin  
    AutomatedSalesOrderly("HasNumberSeries");
  end;
  IVDClassSerNrEFAfter = true;
  return;
end;

function Boolean IVDClassPRCodeEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record CUVc CUr;
  
  if (changedf) then begin
    AutomatedSalesOrderly("HasModTS+Edit_IVVc");
  end;
  IVDClassPRCodeEFAfter = res;
  return;
end;

global
function Boolean IVDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  switch (fieldname) begin
    case "SerNr": res = IVDClassSerNrEFAfter(wn,changed!=0);
    case "ServiceDelDate": res = IVDClassServiceDelDateEFAfter(wn,changed);
    case "PriceFactor": res = IVDClassPriceFactorEFAfter(wn,fn,rownr,changed);
    case "UnitFactPrice": res = IVDClassUnitFactPriceEFAfter(wn,fn,rownr,changed);
    case "UnitFactQuant": res = IVDClassUnitFactQuantEFAfter(wn,fn,rownr,changed);
    case "UnitCode": res = IVDClassUnitCodeEFAfter(wn,fn,rownr,changed);
    case "Price": res = IVDClassPriceEFAfter(wn,fn,rownr,changed);
    case "vRebate": res = IVDClassvRebateEFAfter(wn,fn,rownr,changed);
    case "BasePrice": res = IVDClassBasePriceEFAfter(wn,fn,rownr,changed);
    case "SalesAcc": res = IVDClassSalesAccEFAfter(wn,fn,rownr,changed);
    case "CUPNr": res = IVDClassCUPNrEFAfter(wn,rownr,changed);
    case "CuAccCode": res = IVDClassCuAccCodeEFAfter(wn,rownr,changed);
    case "PriceList": res = IVDClassPriceListEFAfter(wn,changed!=0);
    case "RebCode": res = IVDClassRebCodeEFAfter(wn,changed!=0);
    case "Commision": res = IVDClassCommisionEFAfter(wn,rownr,changed);
    case "PayDeal": res = IVDClassPayDealEFAfter(wn,fn,rownr,changed);
    case "CurncyCode": res = IVDClassCurncyCodeEFAfter(wn,rownr,changed);
    case "FrRate": res = IVDClassFrRateEFAfter(wn,rownr,changed);
    case "ToRateB1": res = IVDClassToRateB1EFAfter(wn,rownr,changed);
    case "ToRateB2": res = IVDClassToRateB2EFAfter(wn,rownr,changed);
    case "BaseRate1": res = IVDClassBaseRate1EFAfter(wn,rownr,changed);
    case "BaseRate2": res = IVDClassBaseRate2EFAfter(wn,rownr,changed);
    case "LangCode": res = IVDClassLangCodeEFAfter(wn,rownr,changed);
    case "InvDate": res = IVDClassInvDateEFAfter(wn,rownr,changed);
    case "TransDate": res = IVDClassTransDateEFAfter(wn,rownr,changed);
    case "DelAddrCode": res = IVDClassDelAddrCodeEFAfter(wn,rownr,changed);
    case "FrPrice": res = IVDClassFrPriceEFAfter(wn,rownr,changed);
    case "DiscPerc": res = IVDClassDiscPercEFAfter(wn,rownr,changed);
    case "CustCode": res = IVDClassCustCodeEFAfter(wn,rownr,changed);
    case "Addr0": res = IVDClassAddr0EFAfter(wn,changed!=0);
    case "Quant": res = IVDClassQuantEFAfter(wn,fn,rownr,changed);
    case "Sum": res = IVDClassSumEFAfter(wn,fn,rownr,changed);
    case "ArtCode": res = IVDClassArtCodeEFAfter(wn,rownr,changed);
    case "SerialNr": res = IVDClassSerialNrEFAfter(wn,rownr,changed);
    case "UnitZval": res = IVDClassUnitZvalEFAfter(wn,rownr,changed);
    case "UnitYval": res = IVDClassUnitYvalEFAfter(wn,rownr,changed);
    case "UnitXval": res = IVDClassUnitXvalEFAfter(wn,rownr,changed);
    case "VATCode": res = IVDClassVATCodeEFAfter(wn,fn,rownr,changed);
    case "TaxTemplateCode": res = IVDClassTaxTemplateCodeEFAfter(wn,rownr,changed!=0);
    case "SalesMan": res = IVDClassSalesManEFAfter(wn,changed!=0);
    case "OrdRow": res = IVDClassOrdRowEFAfter(wn,rownr,changed);
    case "CredOfficialSerNr": res = IVDClassCredOfficialSerNrEFAfter(wn,rownr,changed);
    case "MachineName": res = IVDClassMachineNameEFAfter(wn,changed!=0);
    case "GCNr": res = IVDClassGCNrEFAfter(wn,rownr,changed);
    case "Spec": res = IVDClassSpecEFAfter(wn,rownr,changed!=0);
    case "CreditedRow": res = IVDClassCreditedRowEFAfter(wn,rownr,changed!=0);
    case "Location": res = IVDClassLocationEFAfter(wn,rownr,changed!=0);
    case "Region": res = IVDClassRegionEFAfter(wn,changed!=0);
    case "LoyaltyCardNr": res = IVDClassLoyaltyCardNrEFAfter(wn,changed);
    case "InvCountry": res = IVDClassInvCountryEFAfter(wn,changed!=0);
    case "DelCountry": res = IVDClassDelCountryEFAfter(wn,changed!=0);
    case "PRCode": res = IVDClassPRCodeEFAfter(wn,changed!=0);
  end;
  IVDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean IVDClassCommandNew(Integer wn)
begin
  Boolean notallownew;
  record IVVc IVr;
  
  if (TouchScreenLook) then begin
    GetWindowRecord(wn,IVr);
//    IVDClass_RefreshStringList(wn,IVr);
    PutWindowString(wn,"touchscreenitem","")
    PutWindowString(wn,"touchscreenitemname","")
    PutWindowString(wn,"touchscreenitemqty",blankval);
    PutWindowString(wn,"touchscreenitemprice",blankval);
    if (MatRowCnt(IVr)==0) then begin
      notallownew = true;
    end;
  end;
  IVDClassCommandNew = notallownew;
  return;
end;

global
procedure RecalcIVSubtotal(var record IVVc IVr)
begin
  row IVVc IVrw;
  Integer i,rwcnt;
  val st,retentionv;
  string 255 retentionacc;
  
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp!=kInvoiceRowTypeSubtotal) then begin
      switch (IVrw.stp) begin
        case 1:
          st = st + IVrw.Sum;
/*
        case kInvoiceRowTypeRetention:
          IVVc_CalcRetentionLine(IVr,retentionv,retentionacc);
          IVrw.Sum = retentionv;
          IVrw.SalesAcc = retentionacc;
          MatRowPut(IVr,i,IVrw);
*/          
      end;
    end else begin
      IVrw.Sum = st;
      st = blankval;
      MatRowPut(IVr,i,IVrw);
    end;
  end;
  
  return;
end;

// iOS functions follows

global 
procedure IVDClassOpenCurrency()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record IVVc IVr;
  
  wn = CurWindow;
  GetWindowRecord(wn,IVr);
  nwn = OpenWindow("IVCurrencyDClass",1,wn,subset,"",IVr);
//  PutWindowRecord(wn,IVr);
  RETURN;
END;

global
function boolean IVCurrencyDClassOnOKWindow(Integer wn)
begin
  record IVVc IVr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,IVr);
    PutWindowRecord(mwn,IVr);
  end;
  CloseWindow(wn);
  
  IVCurrencyDClassOnOKWindow = true;
end;

global
function Boolean IVCurrencyDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  Integer mwn;
  record IVVc IVr;
  
  if (changed!=0) then begin
    mwn = MotherWindow(wn);
    if (WindowState(mwn)==Rs_normal) then begin
      SetWindowState(mwn,Rs_update);
    end;
  end;
  switch (fieldname) begin
    case "CurncyCode": res = IVDClassCurncyCodeEFAfter(wn,rownr,changed);
    case "FrRate": res = IVDClassFrRateEFAfter(wn,rownr,changed);
    case "ToRateB1": res = IVDClassToRateB1EFAfter(wn,rownr,changed);
    case "ToRateB2": res = IVDClassToRateB2EFAfter(wn,rownr,changed);
    case "BaseRate1": res = IVDClassBaseRate1EFAfter(wn,rownr,changed);
    case "BaseRate2": res = IVDClassBaseRate2EFAfter(wn,rownr,changed);
  end;
  
  IVCurrencyDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean IVCurrencyDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  Integer mwn;
  record IVVc IVr;

  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,IVr);
  res = IVr.OKFlag==0;
//  res = IVDClassActiveEditField(mwn,fieldname,fn,wnst,rownr,changed);
  IVCurrencyDClassActiveEditField = res;
  return;
end;

global 
procedure IVDClassOpenDelTerms()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record IVVc IVr;
  
  wn = CurWindow;
  GetWindowRecord(wn,IVr);
  nwn = OpenWindow("IVDelTermsDClass",1,wn,subset,"",IVr);
//  PutWindowRecord(wn,IVr);//moved to AfterEditField
  RETURN;
END;

global
function boolean IVDelTermsDClassOnOKWindow(Integer wn)
begin
  record IVVc IVr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,IVr);
    PutWindowRecord(mwn,IVr);
  end;
  CloseWindow(wn);
  
  IVDelTermsDClassOnOKWindow = true;
end;

global
function Boolean IVDelTermsDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  Integer mwn;
  record IVVc IVr;

  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,IVr);
  res = IVr.OKFlag==0;
//  res = IVDClassActiveEditField(mwn,fieldname,fn,wnst,rownr,changed);
  IVDelTermsDClassActiveEditField = res;
  return;
end;

global
function Boolean IVDelTermsDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  Integer mwn;
  record IVVc IVr;

  if (changed!=0) then begin
    mwn = MotherWindow(wn);
    GetWindowRecord(mwn,IVr);
    PutWindowRecord(mwn,IVr);
    if (WindowState(mwn)==Rs_normal) then begin
      SetWindowState(mwn,Rs_update);
    end;
  end;
  switch (fieldname) begin
    case "FrPrice": res = IVDClassFrPriceEFAfter(wn,rownr,changed);
    case "Location": res = IVDClassLocationEFAfter(wn,rownr,changed!=0);
  end;
  IVDelTermsDClassAfterEditField = res;
  RETURN;
END;

global 
procedure IVDClassOpenIdentifiers()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record IVVc IVr;
  
  wn = CurWindow;
  GetWindowRecord(wn,IVr);
  nwn = OpenWindow("IVIdentifiersDClass",1,wn,subset,"",IVr);
//  PutWindowRecord(wn,IVr);
  RETURN;
END;

global
function boolean IVIdentifiersDClassOnOKWindow(Integer wn)
begin
  record IVVc IVr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,IVr);
    PutWindowRecord(mwn,IVr);
  end;
  CloseWindow(wn);
  
  IVIdentifiersDClassOnOKWindow = true;
end;

global
function Boolean IVIdentifiersDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  Integer mwn;
  record IVVc IVr;

  if (changed!=0) then begin
    mwn = MotherWindow(wn);
    GetWindowRecord(mwn,IVr);
    PutWindowRecord(mwn,IVr);
    if (WindowState(mwn)==Rs_normal) then begin
      SetWindowState(mwn,Rs_update);
    end;
  end;
  switch (fieldname) begin
  end;
  IVIdentifiersDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean IVIdentifiersDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  Integer mwn;
  record IVVc IVr;

  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,IVr);
  res = IVr.OKFlag==0;
//  res = IVDClassActiveEditField(mwn,fieldname,fn,wnst,rownr,changed);
  IVIdentifiersDClassActiveEditField = res;
  return;
end;

global 
procedure IVDClassOpenPriceList()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record IVVc IVr;
  
  wn = CurWindow;
  GetWindowRecord(wn,IVr);
  nwn = OpenWindow("IVPriceListDClass",1,wn,subset,"",IVr);
//  PutWindowRecord(wn,IVr);
  RETURN;
END;

global
function boolean IVPriceListDClassOnOKWindow(Integer wn)
begin
  record IVVc IVr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,IVr);
    PutWindowRecord(mwn,IVr);
  end;
  CloseWindow(wn);
  
  IVPriceListDClassOnOKWindow = true;
end;


global
function Boolean IVPriceListDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  Integer mwn;
  record IVVc IVr;

  if (changed!=0) then begin
    mwn = MotherWindow(wn);
    GetWindowRecord(mwn,IVr);
    PutWindowRecord(mwn,IVr);
    if (WindowState(mwn)==Rs_normal) then begin
      SetWindowState(mwn,Rs_update);
    end;
  end;
  switch (fieldname) begin
    case "PriceList": res = IVDClassPriceListEFAfter(wn,changed!=0);
    case "Commision": res = IVDClassCommisionEFAfter(wn,rownr,changed);
    case "LangCode": res = IVDClassLangCodeEFAfter(wn,rownr,changed);
    case "DiscPerc": res = IVDClassDiscPercEFAfter(wn,rownr,changed);
    case "LoyaltyCardNr": res = IVDClassLoyaltyCardNrEFAfter(wn,changed);
  end;
  IVPriceListDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean IVPriceListDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  Integer mwn;
  record IVVc IVr;

  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,IVr);
  res = IVr.OKFlag==0;
//  res = IVDClassActiveEditField(mwn,fieldname,fn,wnst,rownr,changed);
  IVPriceListDClassActiveEditField = res;
  return;
end;

global 
procedure IVDClassOpenInvAddress()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record IVVc IVr;
  
  wn = CurWindow;
  GetWindowRecord(wn,IVr);
  nwn = OpenWindow("IVInvAddressDClass",1,wn,subset,"",IVr);
//  PutWindowRecord(wn,IVr);
  RETURN;
END;

global
function boolean IVInvAddressDClassOnOKWindow(Integer wn)
begin
  record IVVc IVr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,IVr);
    PutWindowRecord(mwn,IVr);
  end;
  CloseWindow(wn);
  
  IVInvAddressDClassOnOKWindow = true;
end;

global
function Boolean IVInvAddressDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  Integer mwn;
  record IVVc IVr;

  if (changed!=0) then begin
    mwn = MotherWindow(wn);
    GetWindowRecord(mwn,IVr);
    PutWindowRecord(mwn,IVr);
    if (WindowState(mwn)==Rs_normal) then begin
      SetWindowState(mwn,Rs_update);
    end;
  end;
  switch (fieldname) begin
    case "Region": res = IVDClassRegionEFAfter(wn,changed!=0);
  end;
  IVInvAddressDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean IVInvAddressDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  Integer mwn;
  record IVVc IVr;

  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,IVr);
  res = IVr.OKFlag==0;
//  res = IVDClassActiveEditField(mwn,fieldname,fn,wnst,rownr,changed);
  IVInvAddressDClassActiveEditField = res;
  return;
end;

global 
procedure IVDClassOpenDelAddress()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record IVVc IVr;
  
  wn = CurWindow;
  GetWindowRecord(wn,IVr);
  nwn = OpenWindow("IVDelAddressDClass",1,wn,subset,"",IVr);
//  PutWindowRecord(wn,IVr);
  RETURN;
END;

global
function boolean IVDelAddressDClassOnOKWindow(Integer wn)
begin
  record IVVc IVr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,IVr);
    PutWindowRecord(mwn,IVr);
  end;
  CloseWindow(wn);
  
  IVDelAddressDClassOnOKWindow = true;
end;

global
function Boolean IVDelAddressDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  Integer mwn;
  record IVVc IVr;

  if (changed!=0) then begin
    mwn = MotherWindow(wn);
    GetWindowRecord(mwn,IVr);
    PutWindowRecord(mwn,IVr);
    if (WindowState(mwn)==Rs_normal) then begin
      SetWindowState(mwn,Rs_update);
    end;
  end;
  switch (fieldname) begin
    case "DelAddrCode": res = IVDClassDelAddrCodeEFAfter(wn,rownr,changed);
  end;
  IVDelAddressDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean IVDelAddressDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  Integer mwn;
  record IVVc IVr;

  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,IVr);
  res = IVr.OKFlag==0;
//  res = IVDClassActiveEditField(mwn,fieldname,fn,wnst,rownr,changed);
  IVDelAddressDClassActiveEditField = res;
  return;
end;

global
procedure IVDClassEditRow(Integer wn,Integer rwn)
begin
  record IVVc IVr;
  row IVVc IVrw;
  record RcVc RepSpec;
  integer nwn;

  GetWindowRecord(wn,IVr);
  
  if (IVr.OKFlag==0) then begin
    MatRowGet(IVr,rwn,IVrw);
    RepSpec.long1 = rwn;
    RepSpec.f1 = IVrw.ArtCode;
    RepSpec.long2 = IVrw.Quant;
    RepSpec.f2 = IVrw.Spec;
    RepSpec.vals0 = IVrw.Price;
    RepSpec.vals1 = IVrw.vRebate;
    RepSpec.vals2 = IVrw.Sum;
    RepSpec.FirstVer = IVrw.CUPNr; 

    RepSpec.ArtMode = IVrw.stp;
    RepSpec.Comparison = IVrw.stp;//interesting
    if (RepSpec.Comparison==0) then begin
      RepSpec.Comparison = kInvoiceRowTypeNormal;
    end;
    if (RepSpec.ArtMode==0) then begin
      RepSpec.ArtMode = kInvoiceRowTypeNormal;
    end;
    nwn = OpenWindow("IVRowDClass",0,wn,"","",RepSpec);
    SendArtStat(IVrw.ArtCode,IVr.Location,IVrw.Recepy,IVrw.rowGP,0,0,IVr.TransDate,0);
  end;
end;

global
procedure IVDClassAddRow(Integer wn,Integer rwn)
begin
  record IVVc IVr;
  row IVVc IVrw;

  GetWindowRecord(wn,IVr);
  MatRowGet(IVr,rwn,IVrw);
  IVrw.stp = kInvoiceRowTypeNormal;
  MatRowPut(IVr,rwn,IVrw);
  PutWindowRecord(wn,IVr);
  IVDClassEditRow(wn,rwn);
  return;
end;

global
procedure IVRowDClassTrash()
begin
  record RcVc RepSpec;
  record IVVc IVr;
  integer wn;
  integer mwn;
  integer rwn;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  
  GetWindowRecord(wn,RepSpec);
  GetWindowRecord(mwn,IVr);
  
  rwn = RepSpec.long1;
  
  MatRowDelete(IVr,rwn);
  
  IVSumup(IVr,true);
  PutWindowRecord(mwn,IVr);
  
  CloseWindow(wn);
end;

global
function boolean IVRowDClassOnOKWindow(Integer wn)
begin
  record RcVc RepSpec;
  record IVVc IVr;
  row IVVc IVrw;
  integer mwn;
  integer rwn;
  
  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,IVr);
  
  GetWindowRecord(wn,RepSpec);
  rwn = RepSpec.long1;
  
  MatRowGet(IVr,rwn,IVrw);
  
  IVrw.ArtCode = RepSpec.f1;
  IVrw.Quant = RepSpec.long2;
  IVrw.Spec = RepSpec.f2;
  IVrw.Price = RepSpec.vals0;
  IVrw.vRebate = RepSpec.vals1;
  IVrw.Sum = RepSpec.vals2;
  if (IVrw.stp<0) then begin
    IVrw.stp = kInvoiceRowTypeNormal;
  end;

  MatRowPut(IVr,rwn,IVrw);
  IVVc_PasteQuantity(IVr,rwn);
  IVSumup(IVr,true);
  PutWindowRecord(mwn,IVr);
  if (IVrw.stp==kInvoiceRowTypeCashPayment) or (IVrw.stp==kInvoiceRowTypeCreditCardPayment) or (IVrw.stp==kInvoiceRowTypeChequePayment) or (IVrw.stp==kInvoiceRowTypeGiftVoucherPayment) begin
    IVDClassSumEFAfter(mwn,0,rwn,1);
  end;  
  IVRowDClassOnOKWindow = true;
end;

global
function Boolean IVRowDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  Integer mwn;
  Integer rwn;
  record RcVc RepSpec;
  record IVVc IVr;
  row IVVc IVrw;
  
  GetWindowRecord(wn,RepSpec);
  rwn = RepSpec.long1;

  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,IVr);
  
  MatRowGet(IVr,rwn,IVrw);
  IVrw.ArtCode = RepSpec.f1;
  IVrw.Quant = RepSpec.long2;
  IVrw.Spec = RepSpec.f2;
  IVrw.Price = RepSpec.vals0;
  IVrw.vRebate = RepSpec.vals1;
  IVrw.Sum = RepSpec.vals2;
  if (RepSpec.Comparison==0) then begin
    IVrw.stp = kInvoiceRowTypeNormal;
  end else begin
    IVrw.stp = RepSpec.Comparison;
  end;
  MatRowPut(IVr,rwn,IVrw);
  PutWindowRecord(mwn,IVr);
  
  switch (fieldname) begin
//    case "ServiceDelDate": res = IVDClassServiceDelDateEFAfter(wn,changed);
//    case "PriceFactor": res = IVDClassPriceFactorEFAfter(wn,fn,rownr,changed);
//    case "UnitFactPrice": res = IVDClassUnitFactPriceEFAfter(wn,fn,rownr,changed);
//    case "UnitFactQuant": res = IVDClassUnitFactQuantEFAfter(wn,fn,rownr,changed);
//    case "UnitCode": res = IVDClassUnitCodeEFAfter(wn,fn,rownr,changed);
    case "vals0": res = IVDClassPriceEFAfter(mwn,fn,rwn,changed);
    case "vals1": res = IVDClassvRebateEFAfter(mwn,fn,rwn,changed);
//    case "BasePrice": res = IVDClassBasePriceEFAfter(wn,fn,rownr,changed);
//    case "SalesAcc": res = IVDClassSalesAccEFAfter(wn,fn,rownr,changed);
//    case "CUPNr": res = IVDClassCUPNrEFAfter(wn,rownr,changed);
//    case "CuAccCode": res = IVDClassCuAccCodeEFAfter(wn,rownr,changed);
//    case "PayDeal": res = IVDClassPayDealEFAfter(wn,fn,rownr,changed);
//    case "InvDate": res = IVDClassInvDateEFAfter(wn,rownr,changed);
//    case "TransDate": res = IVDClassTransDateEFAfter(wn,rownr,changed);
//    case "CustCode": res = IVDClassCustCodeEFAfter(wn,rownr,changed);
    case "long2": res = IVDClassQuantEFAfter(mwn,fn,rwn,changed);
    case "vals2": res = IVDClassSumEFAfter(mwn,fn,rwn,changed);
    case "f1": res = IVDClassArtCodeEFAfter(mwn,rwn,changed);
//    case "SerialNr": res = IVDClassSerialNrEFAfter(wn,rownr,changed);
//    case "UnitZval": res = IVDClassUnitZvalEFAfter(wn,rownr,changed);
//    case "UnitYval": res = IVDClassUnitYvalEFAfter(wn,rownr,changed);
//    case "UnitXval": res = IVDClassUnitXvalEFAfter(wn,rownr,changed);
//    case "VATCode": res = IVDClassVATCodeEFAfter(wn,fn,rownr,changed);
//    case "TaxTemplateCode": res = IVDClassTaxTemplateCodeEFAfter(wn,rownr,changed!=0);
//    case "SalesMan": res = IVDClassSalesManEFAfter(wn,changed!=0);
//    case "OrdRow": res = IVDClassOrdRowEFAfter(wn,rownr,changed);
//    case "MachineName": res = IVDClassMachineNameEFAfter(wn,changed!=0);
//    case "GCNr": res = IVDClassGCNrEFAfter(wn,rownr,changed);
//    case "Spec": res = IVDClassSpecEFAfter(wn,rownr,changed!=0);
//    case "CreditedRow": res = IVDClassCreditedRowEFAfter(wn,rownr,changed!=0);
  end;

  if (res==true and changed!=0) then begin
    GetWindowRecord(mwn,IVr);
    MatRowGet(IVr,rwn,IVrw);
    RepSpec.f1 = IVrw.ArtCode;
    RepSpec.long2 = IVrw.Quant;
    RepSpec.f2 = IVrw.Spec;
    RepSpec.vals0 = IVrw.Price;
    RepSpec.vals1 = IVrw.vRebate;
    RepSpec.vals2 = IVrw.Sum;
    RepSpec.Comparison = IVrw.stp;
    SendArtStat(IVrw.ArtCode,IVr.Location,IVrw.Recepy,IVrw.rowGP,0,0,IVr.TransDate,0);
    PutWindowRecord(wn,RepSpec);
  end;
  PutWindowRecord(mwn,IVr);

  IVRowDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean IVDClassOpenRecord(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record IVVc IVr;
  row IVVc IVrw;
  record ObjVc Objr;
  record PRVc PRr;
  Integer nwn,pos;
  
  switch (fieldname) begin
    case "ClientContact":
      GetWindowRecord(wn,IVr);
      res = OpenContactRecord(IVr.ClientContact,IVr.CustCode);
    case "Objects":
      GetWindowRecord(wn,IVr);  
      if (rownr>=0) then begin
        MatRowGet(IVr,rownr,IVrw);
        if (nonblank(IVrw.Objects)) then begin
          ExtractObj(IVrw.Objects,pos,Objr.Code);
          if (ReadFirstMain(Objr,1,true)) then begin
            nwn = OpenWindow("ObjDClass",1,0,"","",Objr); 
            res = true;   
          end;
        end;
      end;
    case "PRCode":
      GetWindowRecord(wn,IVr);
      if (nonblank(IVr.PRCode)) then begin
        PRr.Code = IVr.PRCode;
        if (ReadFirstMain(PRr,1,true)) then begin
          nwn = OpenWindow("PRDClass",1,0,"","",PRr);
          res = true;
        end;
      end;
  end;
  IVDClassOpenRecord = res;
  return;
end;

global
function Boolean IVMobilePOSDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  res = IVDClassAfterEditField(wn,fieldname,fn,rownr,changed);
  IVMobilePOSDClassAfterEditField = res;
  return;
end;
