remote function Boolean RoyaltyRepVc_PasteArtCode(var record RoyaltyRepVc,Integer,var string);
remote function Boolean RoyaltyRepVc_PasteQuant(var record RoyaltyRepVc,Integer);
remote updating function Integer RecordAction_raRoyaltyRepToIV(var record IVVc,LongInt,record RoyaltyPrcBlock);
external function Boolean RoyaltyRepVc_PasteRoyaltyPerc(var record RoyaltyRepVc,Integer);
external function Boolean RoyaltyRepDchrsum(var record RoyaltyRepVc,Integer,Integer,Boolean);
external procedure RoyaltyRepSumup(var record RoyaltyRepVc);

function Boolean RoyaltyRepDClassCustCodeEFAfter(Integer wn,Integer fn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record RoyaltyRepVc RoyaltyRepr;
  record CUVc CUr;
  record BaseCurBlock BaseCurBl;
 
  BlockLoad(BaseCurBl);
  
  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,RoyaltyRepr);
    CUr.Code = RoyaltyRepr.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      RoyaltyRepr.Addr0 = CUr.Name;
      RoyaltyRepr.Addr1 = CUr.InvAddr0;
      RoyaltyRepr.Addr2 = CUr.InvAddr1;
      RoyaltyRepr.Addr3 = CUr.InvAddr2;
      RoyaltyRepr.InvAddr3 = CUr.InvAddr3;
      RoyaltyRepr.InvAddr4 = CUr.InvAddr4;
      RoyaltyRepr.Currency = CUr.CurncyCode;
      if blank(RoyaltyRepr.Currency) then begin 
        RoyaltyRepr.Currency = BaseCurBl.BaseCur1;
      end;
      PutWindowRecord(wn,RoyaltyRepr);
    end else begin
      Beep;
    end;
  end;
  RoyaltyRepDClassCustCodeEFAfter = res;
  return;
end;

function Boolean RoyaltyRepDClassCOCUServiceNrEFAfter(Integer wn,Integer fn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record RoyaltyRepVc RoyaltyRepr;
  record COCUServiceVc COCUServicer;
  
  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,RoyaltyRepr);
    COCUServicer.SerNr = RoyaltyRepr.COCUServiceNr;
    if (ReadFirstMain(COCUServicer,1,true)) then begin
      if (blank(RoyaltyRepr.CustCode) or COCUServicer.CustCode==RoyaltyRepr.CustCode) then begin
        RoyaltyRepr.InvComment = StringFromSet(309,COCUServicer.ProgType);
        RoyaltyRepr.CustCode = COCUServicer.CustCode;
        RoyaltyRepr.Addr0 = COCUServicer.Addr0;
        RoyaltyRepr.Addr1 = COCUServicer.Addr1;
        RoyaltyRepr.Addr2 = COCUServicer.Addr1;
        RoyaltyRepr.Addr3 = COCUServicer.Addr2;
        RoyaltyRepr.InvAddr3 = COCUServicer.InvAddr3;
        RoyaltyRepr.InvAddr4 = COCUServicer.InvAddr4;
        RoyaltyRepr.ClientContact = COCUServicer.ClientContact;
        RoyaltyRepr.ProgType = COCUServicer.ProgType;
        RoyaltyRepr.perLength = COCUServicer.perLength;
        RoyaltyRepr.normalFactor = COCUServicer.normalFactor;
        RoyaltyRepr.ContractClass = COCUServicer.Class;
        RoyaltyRepr.Currency = COCUServicer.CurncyCode;
        PutWindowRecord(wn,RoyaltyRepr);
      end else begin
        MessageBox(1218,"");
      end;
    end else begin
      Beep;
    end;
  end;
  RoyaltyRepDClassCOCUServiceNrEFAfter = res;
  return;
end;

function Boolean RoyaltyRepDClassArtCodeEFAfter(Integer wn,Integer fn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record RoyaltyRepVc RoyaltyRepr;
  row RoyaltyRepVc RoyaltyReprw;
  string 200 inwarn;
  record INVc INr;
  
  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,RoyaltyRepr);
    if (RoyaltyRepVc_PasteArtCode(RoyaltyRepr,rownr,inwarn)) then begin
      if (nonblank(inwarn)) then begin
        MessageBox(0,inwarn)
      end;
      PutWindowRecord(wn,RoyaltyRepr);
    end else begin
      Beep;
    end;
  end;
  RoyaltyRepDClassArtCodeEFAfter = res;
  return;
end;

function Boolean RoyaltyRepDClassQuantEFAfter(Integer wn,Integer fn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record RoyaltyRepVc RoyaltyRepr;
  row RoyaltyRepVc RoyaltyReprw;
  string 200 inwarn;
  record INVc INr;
  
  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,RoyaltyRepr);
    if (RoyaltyRepVc_PasteQuant(RoyaltyRepr,rownr)) then begin
      PutWindowRecord(wn,RoyaltyRepr);
    end else begin
      Beep;
    end;
  end;
  RoyaltyRepDClassQuantEFAfter = res;
  return;
end;

function Boolean RoyaltyRepDClassvRebateEFAfter(Integer wn,Integer fn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record RoyaltyRepVc RoyaltyRepr;
  row RoyaltyRepVc RoyaltyReprw;
  string 200 inwarn;
  record INVc INr;
  record GeneralOptionBlock GenOptRec;

  res = true;
  if (changedf) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,RoyaltyRepr);
    if (RoyaltyRepDchrsum(RoyaltyRepr,rownr,GenOptRec.UseDiscount,false)) then begin
//      RoyaltyRepDchsum(RoyaltyRepr,rownr);
    end;
    RoyaltyRepSumup(RoyaltyRepr);
    PutWindowRecord(wn,RoyaltyRepr);
  end;
  RoyaltyRepDClassvRebateEFAfter = res;
  return;
end;

function Boolean RoyaltyRepDClassRoyPercEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  record RoyaltyRepVc RoyaltyRepr;
  record GeneralOptionBlock GenOptRec;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,RoyaltyRepr);
    if (RoyaltyRepVc_PasteRoyaltyPerc(RoyaltyRepr,rownr)) then begin
      PutWindowRecord(wn,RoyaltyRepr);
    end else begin
      Beep;
    end;
  end;
  RoyaltyRepDClassRoyPercEFAfter = res;
  return;
end;

//function Boolean RoyaltyRepDClassIntSerNrEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
//begin
//  Boolean res;
//  record RoyaltyRepVc RoyaltyRepr;
//  record InternalSerialNrVc ISNr;
//
//
//  if (changed!=0) then begin
//    GetWindowRecord(wn,RoyaltyRepr);
//    if (nonblank(RoyaltyRepr.InternalSerialNr)) then begin
//      ISNr.Code = RoyaltyRepr.InternalSerialNr;
//      if (ReadFirstMain(ISNr,1,true)) then begin
//        if (ISNr.InclMaint!=0) then begin
//          RoyaltyRepr.MaintType = 1;
//          PutWindowRecord(wn,RoyaltyRepr);
//        end;
//      end;
//    end;
//  end;
//  RoyaltyRepDClassIntSerNrEFAfter = res;
//  return;
//end;

global
function Boolean RoyaltyRepDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = false;
  switch (fieldname) begin
    case "CustCode": res = RoyaltyRepDClassCustCodeEFAfter(wn,fn,rownr,changed);
    case "COCUServiceNr": res = RoyaltyRepDClassCOCUServiceNrEFAfter(wn,fn,rownr,changed);
    case "ArtCode": res = RoyaltyRepDClassArtCodeEFAfter(wn,fn,rownr,changed);
    case "Quant": res = RoyaltyRepDClassQuantEFAfter(wn,fn,rownr,changed);
    case "vRebate": res = RoyaltyRepDClassvRebateEFAfter(wn,fn,rownr,changed);
    case "ApprovedvRebate": res = RoyaltyRepDClassvRebateEFAfter(wn,fn,rownr,changed);
    case "RoyaltyPercentage": res = RoyaltyRepDClassRoyPercEFAfter(wn,fn,rownr,changed);
//    case "InternalSerialNr": res = RoyaltyRepDClassIntSerNrEFAfter(wn,fn,rownr,changed); //TODO: enable, once "InclMaint" functionality on InternalSerialNrVc is merged back from HansaMail
  end;
  RoyaltyRepDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean RoyaltyRepDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record RoyaltyRepVc RoyaltyRepr;
  
  res = true;
  if (wnst==Rs_update) then begin
    GetPrevWindowRecord(wn,RoyaltyRepr);
  end else begin
    GetWindowRecord(wn,RoyaltyRepr);
  end;
    
  if (RoyaltyRepr.Invalid!=0 or RoyaltyRepr.Approved!=0) then begin
    res = false;
  end else begin
    if (RoyaltyRepr.OKFlag!=0) then begin
      res = false;
    end;
    switch (fieldname) begin
      case "Price":
        if (RoyaltyRepr.OKFlag==0) then begin
          res = UserCanAction("HWContractAdmin",false);
        end;
      case "ActualSum": res = UserCanAction("HWContractAdmin",false);
      case "Royalty": res = false;
      case "ApprovedvRebate": res = UserCanAction("HWContractAdmin",false);
    end;
  end;
  RoyaltyRepDClassActiveEditField = res;
  RETURN;
END;

global
function Boolean RoyaltyRepDClassOnOverStrike(Integer wn,Integer rownr)
begin
  record RoyaltyRepVc RoyaltyRepr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,RoyaltyRepr);    
    RoyaltyRepSumup(RoyaltyRepr);
    PutWindowRecord(wn,RoyaltyRepr);    
  end;
  RoyaltyRepDClassOnOverStrike = true;
  return;
end;

global
function Boolean RoyaltyRepDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record RoyaltyRepVc RoyaltyRepr;
 
  res = true;
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,RoyaltyRepr);
    if (RoyaltyRepr.OKFlag!=0) then begin
      res = false;
      if (RoyaltyRepr.Approved==0 and (UserCanAction("UnOKAll",false) or UserCanAction("RoyaltyAdmin",false))) then begin
        res = true;
      end;
    end;
  end;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,RoyaltyRepr);
    if (RoyaltyRepr.OKFlag!=0) then begin
      res = false;
      if (RoyaltyRepr.Approved==0 and (UserCanAction("UnOKAll",false) or UserCanAction("RoyaltyAdmin",false))) then begin
        res = true;
      end;
    end;
  end;  
  RoyaltyRepDClassOKFlagButtonAction = res;
  return;
end;

global
function Boolean RoyaltyRepDClassApprovedButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record RoyaltyRepVc RoyaltyRepr;
 
  res = false;
  if (UserCanAction("RoyaltyRepApprove",false)) then begin
    res = true;
    if (WindowState(wn)==Rs_update) then begin
      GetPrevWindowRecord(wn,RoyaltyRepr);
      if (RoyaltyRepr.Approved!=0) then begin
        res = false;
//        if (UserCanAction("UnOKAll",false)) then begin
//          res = true;
//        end;
      end;
    end;
    if (WindowState(wn)==Rs_normal) then begin
      GetWindowRecord(wn,RoyaltyRepr);
      if (RoyaltyRepr.Approved!=0) then begin
        res = false;
        if (UserCanAction("UnOKAll",false)) then begin
          res = true;
        end;
      end;
    end;
  end;  
  RoyaltyRepDClassApprovedButtonAction = res;
  return;
end;

global 
function Boolean RoyaltyRepDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record RoyaltyRepVc RoyaltyRepr;
  Boolean res;

  res = true;
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,RoyaltyRepr);
      if (RoyaltyRepr.Invalid!=0 or RoyaltyRepr.OKFlag!=0 or RoyaltyRepr.Approved!=0) then begin res = false; end;
    case Rs_insert:
      res = true;
    case Rs_update:
      GetPrevWindowRecord(wn,RoyaltyRepr);
      if (RoyaltyRepr.Invalid!=0 or RoyaltyRepr.OKFlag!=0 or RoyaltyRepr.Approved!=0) then begin res = false; end;
  end;
  RoyaltyRepDClassDeleteRowTest = res;
  return;
end;

global 
function Boolean RoyaltyRepDClassInsertRowTest(Integer wn, Integer rownr)
begin
  RoyaltyRepDClassInsertRowTest = RoyaltyRepDClassDeleteRowTest(wn,rownr);
  return;
end;

global
updating procedure RoyaltyRepInvoicesm()
begin
  record RoyaltyRepVc RoyaltyRepr;
  record IVVc IVr;
  Integer wn,r,nwn;
  record RoyaltyPrcBlock RPb;

  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,RoyaltyRepr);
    BlockLoad(RPb);
    if ((RoyaltyRepr.OKFlag!=0) and (RoyaltyRepr.Approved!=0)) then begin
      if (UserCanAction("RoyaltyRepToIV",false)) then begin
        r = RecordAction_raRoyaltyRepToIV(IVr,RoyaltyRepr.SerNr,RPb);
        if (r!=-1) then begin
          if (MatRowCnt(IVr)!=0) then begin
            MessageBox(0,"Invoice was created in proper company with serial number " & IVr.SerNr);
          end else begin
            Beep;
            MessageBox(0,"Invoice was not created, zero lines");
          end;
        end else begin
          Beep;
          MessageBox(0,"Invoice was not created, failed for unknown reason");
        end;
      end else begin
        MessageBox(1274,StringFromStringSet(3,"RoyaltyRepToIV"));
      end;
    end else begin
      MessageBox(0,"Royalty Report must be approved");
    end;
  end else begin
    Beep;
  end;
  return;
end;

global
procedure RoyaltyRepRefreshPercentagesm()
begin
  record GeneralOptionBlock GenOptRec;
  record RoyaltyRepVc RoyaltyRepr;
  row RoyaltyRepVc RoyaltyReprw;
  integer wn;
  integer i,rwcnt;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RoyaltyRepr);

  if (RoyaltyRepr.Approved==0) then begin
    BlockLoad(GenOptRec);

    rwcnt = MatRowCnt(RoyaltyRepr);
    for (i=0;i<rwcnt;i=i+1) begin
      if (RoyaltyRepDchrsum(RoyaltyRepr,i,GenOptRec.UseDiscount,true)) then begin
//      RoyaltyRepDchsum(RoyaltyRepr,i);
      end;
    end;
    RoyaltyRepSumup(RoyaltyRepr);
    PutWindowRecord(wn,RoyaltyRepr);
  end;
  
  return;
end;

global
procedure RoyaltyRepClearDiscountsm()
begin
  record GeneralOptionBlock GenOptRec;
  record RoyaltyRepVc RoyaltyRepr;
  row RoyaltyRepVc RoyaltyReprw;
  integer wn;
  integer i,rwcnt;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RoyaltyRepr);

  if (RoyaltyRepr.Approved==0) then begin
    BlockLoad(GenOptRec);

    rwcnt = MatRowCnt(RoyaltyRepr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RoyaltyRepr,i,RoyaltyReprw);
      RoyaltyReprw.ApprovedvRebate = blankval;
      MatRowPut(RoyaltyRepr,i,RoyaltyReprw);
      if (RoyaltyRepDchrsum(RoyaltyRepr,i,GenOptRec.UseDiscount,false)) then begin
//      RoyaltyRepDchsum(RoyaltyRepr,i);
      end;
    end;
    RoyaltyRepSumup(RoyaltyRepr);
    PutWindowRecord(wn,RoyaltyRepr);
  end;
  return;
end;

global
procedure RoyaltyRepInvalidatesm()
begin
  record RoyaltyRepVc RoyaltyRepr;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,RoyaltyRepr);
  if (WindowState(wn)!=Rs_insert and RoyaltyRepr.Invalid==0 and RoyaltyRepr.OKFlag!=0 and RoyaltyRepr.Approved!=0) then begin
    SetWindowState(wn,Rs_update);
    RoyaltyRepr.Invalid = 1;
    PutWindowRecord(wn,RoyaltyRepr);
  end;
  
  return;
end;
