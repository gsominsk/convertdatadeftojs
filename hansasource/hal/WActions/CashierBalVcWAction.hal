remote procedure CashierBalVc_PastePerson(var record CashierBalVc);

function Boolean CashierBalDClassUserCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record CashierBalVc CashierBalr;

  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,CashierBalr);
    CashierBalVc_PastePerson(CashierBalr);
    PutWindowRecord(wn,CashierBalr);    
  end;
  CashierBalDClassUserCodeEFAfter = res;
  RETURN;
END;

global
function Boolean CashierBalDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "UserCode": res = CashierBalDClassUserCodeEFAfter(wn,fn,rownr,changed);
  end;
  CashierBalDClassAfterEditField = res;
  RETURN;
END;
 
global
function Boolean CashierBalDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record CashierBalVc CashierBalr;
  
  GetWindowRecord(wn,CashierBalr);
  if (CashierBalr.OKFlag==0) then begin
    res = true;
  end;
  CashierBalDClassActiveEditField = res;
  RETURN;
END;

global 
function Boolean CashierBalDClassInsertRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
  record CashierBalVc CashierBalr;

  res = true;
  switch (WindowState(wn)) begin
    case 0://Rs_normal
      GetWindowRecord(wn,CashierBalr);
      if (CashierBalr.OKFlag!=0) then begin res = false; end;
    case 1://Rs_insert
      res = true;
    case 2://Rs_update
      GetPrevWindowRecord(wn,CashierBalr);
      if (CashierBalr.OKFlag!=0) then begin res = false; end;
    otherwise
      res = false;
  end;
  CashierBalDClassInsertRowTest = res;
  RETURN;
END;

global 
function Boolean CashierBalDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record CashierBalVc CashierBalr;
  Boolean res;

  res = true;
  switch (WindowState(wn)) begin  
    case 0://Rs_normal
      GetWindowRecord(wn,CashierBalr);
      if (CashierBalr.OKFlag!=0) then begin res = false; end;
    case 1://Rs_insert
      res = true;
    case 2://Rs_update
      GetPrevWindowRecord(wn,CashierBalr);    
      if (CashierBalr.OKFlag!=0) then begin res = false; end;
  end;
LCashierBalDClassDeleteRowTest:;  
  CashierBalDClassDeleteRowTest = res;
  return;
end;

global
function Boolean CashierBalDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record CashierBalVc CashierBalr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,CashierBalr);
    if (CashierBalr.OKFlag!=0) then begin
      res = false;
      if ((UserCanAction("UnOKAll",false) or UserCanAction("UnOKCashCount",false))) then begin
        res = true;
      end;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,CashierBalr);
    if (CashierBalr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  CashierBalDClassOKFlagButtonAction = res;
  RETURN;
END;

global
procedure OpenActTodoRClass()
begin 
  Integer wn,wn2;
  Record RcVc RepSpec;
  Record RcVc RepSpec2;
  
  GetWindowrecord(CurWindow,RepSpec2);
  ReportDefaults(RepSpec,"ActTodoRClass");
  RepSpec.Media = mtScreen;
  RepSpec.repname = "ActCalendarRn";
  RepSpec.sStartDate = RepSpec2.sStartDate;
  RepSpec.sEndDate = RepSpec2.sEndDate;
  RepSpec.f1 = RepSpec2.f1;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RunReport(RepSpec,0);
  return; 
end;

global
updating procedure ConnectCashsm()
begin
  record CashierBalVc CashierBalr;
  record CashVc Cashr;
  row CashVc Cashrw;
  record DefCashBlock DefCashRec;
  Integer nwn;

  GetWindowRecord(CurWindow,CashierBalr);
  BlockLoad(DefCashRec);  
  RecordNew(Cashr);
  Cashr.Event = 0;
  Cashr.MachineName = CashierBalr.MachineName;
  Cashr.Drawer = CashierBalr.Drawer;
  Cashr.TransDate = CashierBalr.TransDate;
  Cashr.TransTime = CashierBalr.TransTime;
  Cashr.SkipUpdatTime = 1;
  ClearRow(Cashr,Cashrw,1);
  Cashrw.PMCode = DefCashRec.DefCashPayMode;
  MatRowPut(Cashr,0,Cashrw);
  nwn = OpenWindow("CashDClass",1,0,"","",Cashr);
  return;
end;

