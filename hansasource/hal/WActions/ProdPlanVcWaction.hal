remote updating function Integer CreateProdOrderFromProdPlan(var record ProdPlanVc,Date,Date);
remote procedure ProdPlanDClassItemCodeRemote(var record ProdPlanVc,Integer);
remote procedure ProdPlanDClassQtyRemote(var record ProdPlanVc,Integer,Integer);
remote procedure ProdPlanDClassSugQtyRemote(var record ProdPlanVc,Integer,Integer);
remote procedure RecalcProdStart(var record ProdPlanVc,Date,Integer,Boolean);

global
function Boolean ProdPlanDClassUpdateTest(Integer wn)
BEGIN
  Boolean res;
  record ProdPlanVc ProdPlanr;
  
  res = true;
  GetWindowRecord(wn,ProdPlanr);
//  if ((ProdPlanr.OKFlag!=0) or (ProdPlanr.Closed!=0)) then begin
  if (ProdPlanr.Closed!=0) then begin
    res = false;
    if (UserCanAction("UnOKAll",false)) then begin
      res = true;
    end;    
  end;
  ProdPlanDClassUpdateTest = res;
  RETURN;
END;

global
function Boolean ProdPlanDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record ProdPlanVc ProdPlanr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,ProdPlanr);
    if (ProdPlanr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,ProdPlanr);
    if (ProdPlanr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  ProdPlanDClassOKFlagButtonAction = res;
  return;
end;

function Boolean ProdPlanDClassItemCodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record ProdPlanVc ProdPlanr;
  Boolean res;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,ProdPlanr);
    ProdPlanDClassItemCodeRemote(ProdPlanr,rownr);
    PutWindowRecord(wn,ProdPlanr);
  end;
  ProdPlanDClassItemCodeEFAfter = res;
  return;
end;

function Boolean ProdPlanDClassSugQtyEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record ProdPlanVc ProdPlanr;
  Boolean res;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,ProdPlanr);
    ProdPlanDClassSugQtyRemote(ProdPlanr,rownr,1);
    PutWindowRecord(wn,ProdPlanr);
  end;
  ProdPlanDClassSugQtyEFAfter = res;
  return;
end;

function Boolean ProdPlanDClassQtyEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record ProdPlanVc ProdPlanr;
  row ProdPlanVc ProdPlanrw;
  Boolean res;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,ProdPlanr);
    ProdPlanDClassQtyRemote(ProdPlanr,rownr,1);
    PutWindowRecord(wn,ProdPlanr);
  end;
  ProdPlanDClassQtyEFAfter = res;
  return;
end;

function Boolean ProdPlanDClassStartDateEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record ProdPlanVc ProdPlanr;
  Boolean res;
  record SFPeriodsBlock SFPb; 
  Date ed;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,ProdPlanr);
    BlockLoad(SFPb);  
    ed = ProdPlanr.StartDate;
    switch (SFPb.PeriodType) begin
      case kForecastPeriodTypeMonths:
        ed.day = DaysInMonth(ed.year,ed.month);
      case kForecastPeriodTypeWeeks:
        ed = AddDay(ed,-GetDateId(ed)+7);
    end;
    ProdPlanr.EndDate = ed;
    PutWindowRecord(wn,ProdPlanr);
  end;
  ProdPlanDClassStartDateEFAfter = res;
  return;
end;

function Boolean ProdPlanDClassProdDaysEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record ProdPlanVc ProdPlanr;
  row ProdPlanVc ProdPlanrw;
  Boolean res;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,ProdPlanr);
    MatRowGet(ProdPlanr,rownr,ProdPlanrw);
    if (nonblank(ProdPlanrw.ProdDays)) then begin
//*PPSD      RecalcProdStart(ProdPlanr,ProdPlanr.EndDate,rownr,false);
      RecalcProdStart(ProdPlanr,ProdPlanr.StartDate,rownr,false);
    end else begin
//*PPSD      RecalcProdStart(ProdPlanr,ProdPlanr.EndDate,rownr,true);
      RecalcProdStart(ProdPlanr,ProdPlanr.StartDate,rownr,true);
    end;
    PutWindowRecord(wn,ProdPlanr);
  end;
  ProdPlanDClassProdDaysEFAfter = res;
  return;
end;

global
function Boolean ProdPlanDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = false;
  switch (fieldname) begin
    case "ItemCode": res = ProdPlanDClassItemCodeEFAfter(wn,rownr,changed);
    case "StartDate": res = ProdPlanDClassStartDateEFAfter(wn,rownr,changed);
    case "SugQty": res = ProdPlanDClassSugQtyEFAfter(wn,rownr,changed);
    case "Qty": res = ProdPlanDClassQtyEFAfter(wn,rownr,changed);
    case "ProdDays": res = ProdPlanDClassProdDaysEFAfter(wn,rownr,changed);
  end;
  ProdPlanDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean ProdPlanDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record ProdPlanVc ProdPlanr;
  record ProdPlanVc prevProdPlanr;
  
  res = true;
  GetWindowRecord(wn,ProdPlanr);
  if (wnst==Rs_update) then begin
    GetPrevWindowRecord(wn,prevProdPlanr);
    if (prevProdPlanr.OKFlag!=0) then begin
      res = false;
      goto LProdPlanDClassActiveEditField;
    end;
    res = true;
    switch (fieldname) begin
      case "Recipe": res = false;
      case "ProdPlanRow": res = false;
      case "AboveRecipeRow": res = false;
      case "SugQty": res = false;
      case "NeededDate": res = false;
    end;
  end;
LProdPlanDClassActiveEditField:;  
  ProdPlanDClassActiveEditField = res;
  return;
end;

global 
function Boolean ProdPlanDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record ProdPlanVc ProdPlanr;
  Boolean res;
  record RahaxiBlock Rahaxib; 

  res = true;
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,ProdPlanr);
      if ((ProdPlanr.OKFlag!=0) or (ProdPlanr.Closed!=0)) then begin
        res = false;
      end;
    case Rs_insert:
      res = true;
    case Rs_update:
      GetPrevWindowRecord(wn,ProdPlanr);
      if ((ProdPlanr.OKFlag!=0) or (ProdPlanr.Closed!=0)) then begin
        res = false;
      end;
    otherwise
      res = false;
  end;
  ProdPlanDClassDeleteRowTest = res;
  return;
end;

global 
function Boolean ProdPlanDClassInsertRowTest(Integer wn,Integer rownr)
begin
  record ProdPlanVc ProdPlanr;
  Boolean res;
  record RahaxiBlock Rahaxib; 

  res = true;
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,ProdPlanr);
      if ((ProdPlanr.OKFlag!=0) or (ProdPlanr.Closed!=0)) then begin
        res = false;
      end;
    case Rs_insert:
      res = true;
    case Rs_update:
      GetPrevWindowRecord(wn,ProdPlanr);
      if ((ProdPlanr.OKFlag!=0) or (ProdPlanr.Closed!=0)) then begin
        res = false;
      end;
    otherwise
      res = false;
  end;
  ProdPlanDClassInsertRowTest = res;
  return;
end;


// Should care about the production settings radiobutton.
global
updating procedure ProdOrderFromProdPlanDsm()
begin
  Integer wn,err;
  record ProdPlanVc PPr;
  Date bldat;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,PPr);
    if (PPr.Closed==0) then begin
      err = CreateProdOrderFromProdPlan(PPr,bldat,bldat);      
      if (err==0) then begin
        PutWindowRecord(wn,PPr);
        if (WindowDoOK(wn,0)) then begin
        end;
      end else begin
        switch (err) begin
          case 1274:
            MessageBox(1274,StringFromStringSet(3,"ProdPlanOK"));
          otherwise
            MessageBox(22071,"");
        end;
      end;
    end else begin
      MessageBox(22070,"");
    end;
  end;
  return;
end;

global
procedure ProdPlanInfoDsm()
begin
  Integer wn;
  record ProdPlanVc PPr;
  record RcVc RepSpec;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,PPr);
  RepSpec.f1 = PPr.SerNr;
  RepSpec.Media = mtScreen;
  RepSpec.repname = "ProdPlanInfoRn";
  RunReport(RepSpec,0);
  return;
end;
