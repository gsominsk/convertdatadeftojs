external procedure ExtractObj(string,var Integer,var string);
external function LongInt DateDiff(Date,Date);
external procedure PasteFromSysList(Integer ,Integer);
remote procedure FindUserMailboxName(string,var string,var string);
remote function Boolean PasteActTypeInAct(string,var record ActVc);
external procedure In2Period(var string,var Date,var Date);
external procedure ActVcRecordDefClient(var record ActVc);
external function Boolean GetGlobalUserMainCompany(string,var string);

global
function Boolean PipelineWClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record RcVc RepSpec;
  Date bd;

  res = false;
  GetWindowRecord(wn,RepSpec);
  switch (fieldname) begin
    case "Period2Str":
      if (blank(RepSpec.Period2Str)) then begin
        RepSpec.sStartDate = bd;
        RepSpec.sEndDate = bd;
      end else begin
        In2Period(RepSpec.Period2Str,RepSpec.sStartDate,RepSpec.sEndDate);
      end;
      PutWindowRecord(wn,RepSpec);      
  end;
  PipelineWClassAfterEditField = res;
  return;
end;

procedure PipelineWClassReadSavedPosition(Integer wn,var record RcVc RepSpec)
begin
  record WRVc WRr;
  row WRVc WRrw;
  Integer i,rwcnt;

  WRr.Sign = CurrentUser;
  WRr.WClassName = "PipelineWClass";
  if (ReadFirstMain(WRr,2,true)) then begin
    rwcnt = MatRowCnt(WRr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(WRr,i,WRrw);
      switch (WRrw.Tag) begin
        case "Period2Str": RepSpec.Period2Str = WRrw.str0;
        case "f1": RepSpec.f1 = WRrw.str0;
        case "f2": RepSpec.f2 = WRrw.str0;
        case "f3": RepSpec.f3 = WRrw.str0;
        case "f4": RepSpec.f4 = WRrw.str0;
        case "f5": RepSpec.f5 = WRrw.str0;
        case "f6": RepSpec.f6 = WRrw.str0;
        case "f7": RepSpec.f7 = WRrw.str0;
        case "f8": RepSpec.f8 = WRrw.str0;
        case "FirstAcc": RepSpec.FirstAcc = WRrw.str0;
        case "CurncyCode": RepSpec.CurncyCode = WRrw.str0;
        case "flags[0]": RepSpec.flags[0] = WRrw.long0;
        case "flags[1]": RepSpec.flags[1] = WRrw.long0;
      end;
    end;
  end;
  return;
end;

global
procedure PipelineWClassDefault(Integer wn)
begin
  Integer oldcomp;
  string 255 compcode,teststr;
  record UserPipelinOverviewVc UPOr;
  record RcVc RepSpec;
  record PipelinOverviewBlock POb;
  row PipelinOverviewBlock PObrw;
  Integer i,rwcnt;
  Boolean putf;
  
  GetWindowRecord(wn,RepSpec);
  oldcomp = CurrentCompany;
  RepSpec.UsedOnly = StringToInt(GetWindowString(wn,"BeingEdited"));
  if (RepSpec.UsedOnly==0) then begin
    RepSpec.Period2Str = AddMonth(CurrentDate,-1) & ":" & CurrentDate;
    if (blank(RepSpec.f1)) then begin
      if (GetGlobalUserMainCompany(CurrentUser,compcode)) then begin
        if (SetCompanyCode(compcode,false)) then begin
          UPOr.UserCode = CurrentUser;
          if (ReadFirstMain(UPOr,1,true)) then begin
            RepSpec.f1 = CurrentUser;
            RepSpec.f3 = UPOr.DefaultViewName;
            PutWindowRecord(wn,RepSpec);
          end;
        end;
      end;
    end;
    PipelineWClassReadSavedPosition(wn,RepSpec);
    if (TestModule("modIntProjMan") and blank(RepSpec.f3)) then begin
      switch (GetWindowSubset(wn)) begin
        case "ToolPipeline": teststr = "IntProjManActVc";
        case "ToolPipelineProjectIssues": teststr = "IntProjManToDoActVc";
      end;
      if (blank(RepSpec.f3)) then begin
        BlockLoad(POb);
        rwcnt = MatRowCnt(POb);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(POb,i,PObrw);
          if (PObrw.Register==teststr) then begin
            RepSpec.f3 = PObrw.ViewName;;
            i = rwcnt;
            putf = true;
          end;
        end;  
      end;
    end;
//  if (putf) then begin we will always put the date
    PutWindowRecord(wn,RepSpec);
//  end;
  end;
  ResetCompany(oldcomp);
end;

global
function Boolean PipelineWClassCGDblClick(LongInt type,LongInt sernr)
begin
  Integer wn;
  Integer nwn;
  record ActVc Actr;
  record QTVc QTr;
  
  switch (type) begin
    case kPipelineItemTypeActivity:
      Actr.SerNr = sernr;
      if (ReadFirstMain(Actr,1,true)) then begin
        nwn = OpenWindow("ActDClass",1,0,"","",Actr);
      end;
    case kPipelineItemTypeQuotation:
      QTr.SerNr = sernr;
      if (ReadFirstMain(QTr,1,true)) then begin
        nwn = OpenWindow("QTDClass",1,0,"","",QTr);
      end;
   end;

  PipelineWClassCGDblClick = true;
  return;
end;

global
procedure PipelineWClassNewOR()
begin
  record ORVc ORr;
  Integer wn;
  record PipelinOverviewBlock POb;
  row PipelinOverviewBlock PObrw;
  record UserPipelinOverviewVc UPOr;
  row UserPipelinOverviewVc UPOrw;
  Integer i,rwcnt,pos;
  record RcVc RepSpec;
  Boolean testf;
  
  GetWindowRecord(CurWindow,RepSpec);
  UPOr.UserCode = CurrentUser;
  if (ReadFirstMain(UPOr,1,true)) then begin
    rwcnt = MatRowCnt(UPOr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(UPOr,i,UPOrw);
      PObrw.ViewName = UPOrw.ViewName;
      PObrw.ColumnName = UPOrw.ColumnName;
      PObrw.Register = UPOrw.Register;
      PObrw.RegisterFilter = UPOrw.RegisterFilter;
      PObrw.RegisterFilter2 = UPOrw.RegisterFilter2;
      PObrw.Amounts = UPOrw.Amounts;
      MatRowPut(POb,MatRowCnt(POb),PObrw);
    end;
  end else begin
    BlockLoad(POb);
  end;
  rwcnt = MatRowCnt(POb);
  RecordNew(ORr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POb,i,PObrw);
    testf = false;
    if (nonblank(RepSpec.f3)) then begin
      if (PObrw.ViewName==RepSpec.f3) then begin
        testf = true;
      end;
    end else begin
      testf = true;
    end;
    if (testf) then begin
      if (StringSetFromString(584,PObrw.Register)=="ORVc") then begin
        pos = 0;
        ExtractObj(PObrw.RegisterFilter,pos,ORr.OrderClass);
        i = rwcnt;
      end;
    end;
  end;
  wn = OpenWindow("ORDClass",1,0,"","",ORr);
  return;
end;

global
procedure PipelineWClassNewQT()
begin
  record QTVc QTr;
  Integer wn;
  record PipelinOverviewBlock POb;
  row PipelinOverviewBlock PObrw;
  record UserPipelinOverviewVc UPOr;
  row UserPipelinOverviewVc UPOrw;
  Integer i,rwcnt,pos;
  record RcVc RepSpec;
  Boolean testf;
  
  GetWindowRecord(CurWindow,RepSpec);
  
  UPOr.UserCode = CurrentUser;
  if (ReadFirstMain(UPOr,1,true)) then begin
    rwcnt = MatRowCnt(UPOr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(UPOr,i,UPOrw);
      PObrw.ViewName = UPOrw.ViewName;
      PObrw.ColumnName = UPOrw.ColumnName;
      PObrw.Register = UPOrw.Register;
      PObrw.RegisterFilter = UPOrw.RegisterFilter;
      PObrw.RegisterFilter2 = UPOrw.RegisterFilter2;
      PObrw.Amounts = UPOrw.Amounts;
      MatRowPut(POb,MatRowCnt(POb),PObrw);
    end;
  end else begin
    BlockLoad(POb);
  end;
  rwcnt = MatRowCnt(POb);
  RecordNew(QTr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POb,i,PObrw);
    testf = false;
    if (nonblank(RepSpec.f3)) then begin
      if (PObrw.ViewName==RepSpec.f3) then begin
        testf = true;
      end;
    end else begin
      testf = true;
    end;
    if (testf) then begin
      if (StringSetFromString(584,PObrw.Register)=="QTVc") then begin
        pos = 0;
        ExtractObj(PObrw.RegisterFilter,pos,QTr.QuoteClass);
        i = rwcnt;
      end;
    end;
  end;
  wn = OpenWindow("QTDClass",1,0,"","",QTr);
  return;
end;

global
procedure PipelineWClassNewAct()
begin
  record ActVc Actr;
  Integer wn;
  record PipelinOverviewBlock POb;
  row PipelinOverviewBlock PObrw;
  record UserPipelinOverviewVc UPOr;
  row UserPipelinOverviewVc UPOrw;
  Integer i,rwcnt,pos;
  record RcVc RepSpec;
  Boolean testf;
  
  GetWindowRecord(CurWindow,RepSpec);
  UPOr.UserCode = CurrentUser;
  if (ReadFirstMain(UPOr,1,true)) then begin
    rwcnt = MatRowCnt(UPOr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(UPOr,i,UPOrw);
      PObrw.ViewName = UPOrw.ViewName;
      PObrw.ColumnName = UPOrw.ColumnName;
      PObrw.Register = UPOrw.Register;
      PObrw.RegisterFilter = UPOrw.RegisterFilter;
      PObrw.RegisterFilter2 = UPOrw.RegisterFilter2;
      PObrw.Amounts = UPOrw.Amounts;
      MatRowPut(POb,MatRowCnt(POb),PObrw);
    end;
  end else begin
    BlockLoad(POb);
  end;
  rwcnt = MatRowCnt(POb);
  RecordNew(Actr);
  ActVcRecordDefClient(Actr);
  Actr.TodoFlag = kTodoFlagTodo;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POb,i,PObrw);
    testf = false;
    if (nonblank(RepSpec.f3)) then begin
      if (PObrw.ViewName==RepSpec.f3) then begin
        testf = true;
      end;
    end else begin
      testf = true;
    end;
    if (testf) then begin
      if (StringSetFromString(584,PObrw.Register)=="ActVc") then begin
        pos = 0;
        ExtractObj(PObrw.RegisterFilter,pos,Actr.ActType);
        PasteActTypeInAct("",Actr);
        i = rwcnt;
      end;
    end;
  end;
  wn = OpenWindow("ActDClass",1,0,"","",Actr);
  return;
end;

global
procedure PipelineWClassNewProjAct()
begin
  record ActVc Actr;
  Integer wn;
  record PipelinOverviewBlock POb;
  row PipelinOverviewBlock PObrw;
  record UserPipelinOverviewVc UPOr;
  row UserPipelinOverviewVc UPOrw;
  Integer i,rwcnt,pos;
  record RcVc RepSpec;
  Boolean testf;
  
  GetWindowRecord(CurWindow,RepSpec);
  UPOr.UserCode = CurrentUser;
  if (ReadFirstMain(UPOr,1,true)) then begin
    rwcnt = MatRowCnt(UPOr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(UPOr,i,UPOrw);
      PObrw.ViewName = UPOrw.ViewName;
      PObrw.ColumnName = UPOrw.ColumnName;
      PObrw.Register = UPOrw.Register;
      PObrw.RegisterFilter = UPOrw.RegisterFilter;
      PObrw.RegisterFilter2 = UPOrw.RegisterFilter2;
      PObrw.Amounts = UPOrw.Amounts;
      MatRowPut(POb,MatRowCnt(POb),PObrw);
    end;
  end else begin
    BlockLoad(POb);
  end;
  rwcnt = MatRowCnt(POb);
  RecordNew(Actr);
  ActVcRecordDefClient(Actr);
  Actr.TodoFlag = kTodoFlagProject;
  Actr.Supervisor = CurrentUser;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POb,i,PObrw);
    testf = false;
    if (nonblank(RepSpec.f3)) then begin
      if (PObrw.ViewName==RepSpec.f3) then begin
        testf = true;
      end;
    end else begin
      testf = true;
    end;
    if (testf) then begin
      if (StringSetFromString(584,PObrw.Register)=="ActVc") then begin
        pos = 0;
        ExtractObj(PObrw.RegisterFilter,pos,Actr.ActType);
        PasteActTypeInAct("",Actr);
        i = rwcnt;
      end;
    end;
  end;
  wn = OpenWindow("ProjActDClass",1,0,"","",Actr);
  return;
end;

global
function Boolean PipelineViewSClassOnOpenWindow(Integer wn)
begin
  record PipelinOverviewBlock POb;
  row PipelinOverviewBlock PObrw;
  record UserPipelinOverviewVc UPOr;
  row UserPipelinOverviewVc UPOrw;
  Integer i,rwcnt,v;
  vector Boolean vviewname;
  
  UPOr.UserCode = CurrentUser;
  if (ReadFirstMain(UPOr,1,true)) then begin
    rwcnt = MatRowCnt(UPOr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(UPOr,i,UPOrw);
      if (nonblank(UPOrw.ViewName)) and (vviewname[UPOrw.ViewName]==false) then begin
        SetListString(wn,v,UPOrw.ViewName,false);    
        vviewname[UPOrw.ViewName] = true; 
        v = v + 1;
      end;
    end;  
  end else begin
    BlockLoad(POb);
    rwcnt = MatRowCnt(POb);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(POb,i,PObrw);
      if (nonblank(PObrw.ViewName)) and (vviewname[PObrw.ViewName]==false) then begin
        SetListString(wn,v,PObrw.ViewName,false);    
        vviewname[PObrw.ViewName] = true; 
        v = v + 1;
      end;
    end;  
  end;
  SetListString(wn,v,"",false);    
  PipelineViewSClassOnOpenWindow = false;
  return;
end;

global
function Boolean PipelineViewSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,0);
  PipelineViewSClassOnOKWindow = false;
  return;
end;

global
function string 40 PORegisterFilterSetSClassPasteSpecialWindowClass(string defpsname)
begin
  string 40 psname,actfld;
  record PipelinOverviewBlock POb;
  row PipelinOverviewBlock PObrw;
  Integer rwcnt,wn,arow;
  record UserPipelinOverviewVc UPOr;
  row UserPipelinOverviewVc UPOrw;
  
  wn = CurWindow;
  arow = WindowActiveRow(wn);
  actfld = WindowActiveField(wn);
  psname = "";
  switch (GetWindowClass(wn)) begin
    case "UserPipelineOverviewDClass":
      GetWindowRecord(wn,UPOr);
      rwcnt = MatRowCnt(UPOr);
      if (arow<rwcnt) then begin
        MatRowGet(UPOr,arow,UPOrw);
        switch (StringSetFromString(584,UPOrw.Register)) begin
          case "ActVc":
            switch (actfld) begin
              case "RegisterFilter2":
                psname = "ActStateSClass";
              otherwise
                psname = "ActTypeSClass";
            end;
          case "IntProjManActVc":
            switch (actfld) begin
              case "RegisterFilter2":
                psname = "ActTypeSClass";
              otherwise
                psname = "ActStateSClass";
            end;
          case "IntProjManToDoActVc":
            switch (actfld) begin
              case "RegisterFilter2":
                psname = "ActStateSClass";
              otherwise
                psname = "ActTypeSClass";
            end;
          case "KitchenOrderVc":
            psname = "DishStatusSClass";
          case "ORVc":
            psname = "OrderClassSClass";
          case "OYVc":
            psname = "QuoteClassSClass";
          case "PRVc":
            psname = "PRStageSClass";
          case "QTVc":
            psname = "QuoteClassSClass";
          case "RCAEC6CB623613711B4350336D3571BA6302203D8Vc":
    //        psname = "ActTypeSClass";
        end;
      end;
    case "PipelineOverviewTClass":
      GetWindowRecord(wn,POb);
      rwcnt = MatRowCnt(POb);
      if (arow<rwcnt) then begin
        MatRowGet(POb,arow,PObrw);
        switch (StringSetFromString(584,PObrw.Register)) begin
          case "ActVc":
            switch (actfld) begin
              case "RegisterFilter2":
                psname = "ActStateSClass";
              otherwise
                psname = "ActTypeSClass";
            end;
          case "IntProjManActVc":
            switch (actfld) begin
              case "RegisterFilter2":
                psname = "ActTypeSClass";
              otherwise
                psname = "ActStateSClass";
            end;
          case "IntProjManToDoActVc":
            switch (actfld) begin
              case "RegisterFilter2":
                psname = "ActStateSClass";
              otherwise
                psname = "ActTypeSClass";
            end;
          case "KitchenOrderVc":
            psname = "DishStatusSClass";
          case "ORVc":
            psname = "OrderClassSClass";
          case "QTVc":
            psname = "QuoteClassSClass";
          case "OYVc":
            psname = "QuoteClassSClass";
          case "PRVc":
            psname = "PRStageSClass";
          case "RCAEC6CB623613711B4350336D3571BA6302203D8Vc":
    //        psname = "ActTypeSClass";
        end;
      end;
  end;  
  PORegisterFilterSetSClassPasteSpecialWindowClass = psname;
  return;
end;

global
procedure PipelineWClassTaskMan()
begin
  Integer wn,nwn;
  record RcVc RepSpec;
  record RcVc todoRepSpec;
  string 255 mailboxnr,mailboxname;

  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  RecordClear(todoRepSpec);
  todoRepSpec.f1 = RepSpec.f1;
  if (blank(todoRepSpec.f1)) then begin
    todoRepSpec.f1 = CurrentUser;
  end;
  todoRepSpec.sStartDate = AddMonth(CurrentDate,-12);
  todoRepSpec.sEndDate = AddMonth(CurrentDate,12);
  todoRepSpec.Period2Str = todoRepSpec.sStartDate;
  todoRepSpec.Period2Str = todoRepSpec.Period2Str & ":";
  todoRepSpec.Period2Str = todoRepSpec.Period2Str & todoRepSpec.sEndDate;
  FindUserMailboxName(CurrentUser,mailboxnr,mailboxname);
  nwn = OpenWindow("ToDoWClass",1,0,"",mailboxname,todoRepSpec);
  return;
end;

global
procedure PipelineWClassSalesmanAct()
begin
  Integer wn,nwn;
  record RcVc RepSpec;
  record RcVc repRepSpec;
  string 255 mode;
  Date td;

  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  repRepSpec = RepSpec;
  ReportDefaults(repRepSpec,"SalesmanActRClass");
  repRepSpec.f1 = RepSpec.f1;
  if (len(RepSpec.Period2Str)>1) then begin
    repRepSpec.Period2Str = RepSpec.Period2Str;
    repRepSpec.sStartDate = RepSpec.sStartDate;
    repRepSpec.sEndDate = RepSpec.sEndDate;

    if ((GetDateId(repRepSpec.sEndDate) - GetDateId(repRepSpec.sStartDate) + 1)==7) then begin
      mode = "week";
    end;
    if (GetDay(repRepSpec.sEndDate)==DaysInMonth(GetYear(repRepSpec.sEndDate),GetMonth(repRepSpec.sEndDate))) then begin
      if (GetMonth(repRepSpec.sStartDate)==1) and (GetMonth(repRepSpec.sEndDate)==12) then begin
        mode = "year";
      end else begin
        mode = "month";
      end;
    end;
    repRepSpec.sEndDate2 = AddDay(repRepSpec.sStartDate,-1);
    switch (mode) begin
      case "week":
        td = AddDay(repRepSpec.sEndDate2,-6);
      case "month":
        td = repRepSpec.sEndDate2; td.day = 1;
      case "year":
        td = repRepSpec.sEndDate2; td.day = 1; td.month = 1;
      otherwise
        td = AddDay(repRepSpec.sEndDate2,-DateDiff(repRepSpec.sEndDate,repRepSpec.sStartDate)-1);          
    end;
    repRepSpec.sStartDate2 = td;
    repRepSpec.Period2Str2 = "" & repRepSpec.sStartDate2 & ":" & repRepSpec.sEndDate2;
  end else begin
    repRepSpec.sStartDate = CurrentDate;
    repRepSpec.sStartDate = AddDay(repRepSpec.sStartDate,-14-GetDateId(repRepSpec.sStartDate)+1);
    repRepSpec.sEndDate = AddDay(repRepSpec.sStartDate,13);
    repRepSpec.Period2Str = "" & repRepSpec.sStartDate & ":" & repRepSpec.sEndDate;

    repRepSpec.sStartDate2 = CurrentDate;
    repRepSpec.sStartDate2 = AddDay(repRepSpec.sStartDate2,-GetDateId(repRepSpec.sStartDate2)+1);
    repRepSpec.sEndDate2 = AddDay(repRepSpec.sStartDate2,6);
    repRepSpec.Period2Str2 = "" & repRepSpec.sStartDate2 & ":" & repRepSpec.sEndDate2;
  end;
  repRepSpec.repname = "SalesmanActRn";
  repRepSpec.FirstAcc = "";
  if (nonblank(repRepSpec.f1)) then begin
    repRepSpec.IncDaughter = 1;
  end else begin
    repRepSpec.IncDaughter = 0;
  end;
  repRepSpec.flags[0] = 0;
  repRepSpec.ArtMode = 1;
  repRepSpec.Media = mtScreen;
  RunReport(repRepSpec,0);
  return;
end;

global
procedure PipelineWClassSalesmanRes()
begin
  record RcVc RepSpec;
  record RcVc repRepSpec;
  Integer wn;

  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  repRepSpec = RepSpec;
  ReportDefaults(repRepSpec,"SalesmanResRClass");
  repRepSpec.f1 = RepSpec.f1;
  if (len(RepSpec.Period2Str)>1) then begin
    repRepSpec.Period2Str = RepSpec.Period2Str;
    repRepSpec.sStartDate = RepSpec.sStartDate;
    repRepSpec.sEndDate = RepSpec.sEndDate;
  end else begin
    repRepSpec.sStartDate = CurrentDate;
    repRepSpec.sStartDate = AddMonth(repRepSpec.sStartDate,-2);
    repRepSpec.sStartDate = AddDay(repRepSpec.sStartDate,1);
    repRepSpec.sEndDate = CurrentDate;
    repRepSpec.Period2Str = "" & repRepSpec.sStartDate & ":" & repRepSpec.sEndDate;
  end;
  repRepSpec.FirstAcc = "";
  if (nonblank(repRepSpec.f1)) then begin
    repRepSpec.IncDaughter = 1;
  end else begin
    repRepSpec.IncDaughter = 0;
  end;
  repRepSpec.repname = "SalesmanResRn";
  repRepSpec.Media = mtScreen;
  RunReport(repRepSpec,0);
  return;
end;

procedure PipelineWClassSort(Integer newcolumn)
begin
  record RcVc RepSpec;
  Integer wn;

  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);

  if (newcolumn==RepSpec.flags[0]) then begin
    if (RepSpec.flags[1]==1) then begin
      RepSpec.flags[1] = 0;
    end else begin
      RepSpec.flags[1] = 1;
    end;
  end else begin
    RepSpec.flags[0] = newcolumn;
    RepSpec.flags[1] = 0;
  end;

  PutWindowRecord(wn,RepSpec);
  ReloadColumnGrid(wn);
end;

global
procedure PipelineWClassSortIcon()
begin
  PipelineWClassSort(0);
end;

global
procedure PipelineWClassSortValue()
begin
  PipelineWClassSort(1);
end;

global
procedure PipelineWClassSortCaption()
begin
  PipelineWClassSort(2);
end;

global
procedure PipelineWClassSortDate()
begin
  PipelineWClassSort(3);
end;

global
procedure PipelineWClassSortCustomer()
begin
  PipelineWClassSort(4);
end;


function Boolean PipelineOverviewTClassColumnNameEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record PipelinOverviewBlock POb;
  row PipelinOverviewBlock PObrw;

  if (changedf) then begin
    if (rownr>=0) then begin
      GetWindowRecord(wn,POb);        
      MatRowGet(POb,rownr,PObrw);
      PObrw.colnr = kButtonColourDefault;
      MatRowPut(POb,rownr,PObrw);
      PutWindowRecord(wn,POb);    
    end;
  end;
  PipelineOverviewTClassColumnNameEFAfter = true;
  return;
end;

global
function Boolean PipelineOverviewTClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "ColumnName": res = PipelineOverviewTClassColumnNameEFAfter(wn,rownr,changed!=0);
  end;
  PipelineOverviewTClassAfterEditField = res;
  return;
end;

global
procedure PipelineWClassSortNew()
begin
  Integer wn;
  record RcVc RepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  PipelineWClassSort(RepSpec.Sorting);
end;


function Boolean PipelineOverviewTClassColumnNameEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record PipelinOverviewBlock POb;
  row PipelinOverviewBlock PObrw;

  if (changedf) then begin
    if (rownr>=0) then begin
      GetWindowRecord(wn,POb);        
      MatRowGet(POb,rownr,PObrw);
      PObrw.colnr = kButtonColourDefault;
      MatRowPut(POb,rownr,PObrw);
      PutWindowRecord(wn,POb);    
    end;
  end;
  PipelineOverviewTClassColumnNameEFAfter = true;
  return;
end;

global
function Boolean PipelineOverviewTClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "ColumnName": res = PipelineOverviewTClassColumnNameEFAfter(wn,rownr,changed!=0);
  end;
  PipelineOverviewTClassAfterEditField = res;
  return;
end;
