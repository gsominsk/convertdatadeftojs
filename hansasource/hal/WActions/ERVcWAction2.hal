external procedure LogAreaToFile(string,area);
external updating function Boolean ServiceRequestAsync(string,string,Boolean,area,string);
external procedure DisplayCountdownMessage(record TXServiceReplyVc);
external procedure ReadTXServiceReply(var record TXServiceReplyVc,var Area,Boolean);
external procedure GetAreaFromFile(Area,string);
external updating function Boolean SendServiceRequest(string,Boolean,area,var Area);
external procedure SendEOLParameter(var Area);
external procedure SendTextParameter(string,var Area);
external function val StringToValue(string,Integer,string,string);
external function Date DateFromString(string,string);


global
procedure NationalBankExchRateERLsm()
begin
  Integer nwn;
  record RcVc RepSpec;
  record ERBlock ERb;

  BlockLoad(ERb);
  nwn = OpenWindow("NatBankXRateDClass",0,CurWindow,"","",RepSpec);
  DeselectWindow(nwn,false);  
  RepSpec.d1 = CurrentDate;
//  RepSpec.flags[0] = 1;
  RepSpec.flags[1] = ERb.OverwriteExistRate;
  PutWindowRecord(nwn,RepSpec);
  WindowFieldGoto(nwn,RepSpec,-1,"d1",true);
  return;
end;

global
procedure CancelXRateDClass()
begin
  CloseWindow(CurWindow);
  return;
end;

updating procedure AddCurencyRate(record RcVc RepSpec,record BaseCurBlock BCb,record ERBlock ERb,string curncy,string curncyname,val rate,val brate,val units,Date ratedate)
begin
  record CurncyCodeVc CCr;
  record ERVc ERr;
  record BaseERVc BaseERr;
  Boolean treatedf,testf,updratef;

  testf = true;
  if (blank(curncy)) then begin
    testf = false;
  end;
  if (len(curncy)<3) then begin
    testf = false;
  end;
  if (testf) then begin
    treatedf = false;
    testf = true;
    updratef = true;
    CCr.CurncyCode = curncy;
    if (ReadFirstMain(CCr,1,true)==false) then begin
      if (RepSpec.flags[0]!=0) then begin
        CCr.CurncyCode = curncy;
        CCr.Comment = curncyname;
        if (RecordStore(CCr,false)) then begin end;
      end else begin
        testf = false;
      end;
    end;
    if (testf) then begin
      if (curncy==BCb.BaseCur1) then begin
        treatedf = true;
        updratef = true;
        BaseERr.Date = ratedate;
        if (ReadFirstMain(BaseERr,2,true)) then begin
          updratef = RepSpec.flags[1]!=0;
        end;
        if (ERb.BCRates==0) then begin updratef = false; end;
        if (updratef) then begin
          BaseERr.Date = ratedate;
          BaseERr.Rate1 = units;    
          BaseERr.Rate2 = brate;    
          if (RecordStore(BaseERr,updratef)) then begin
          end;
        end;
      end;
      if (curncy==BCb.BaseCur2) then begin
        treatedf = true;
        updratef = true;
        BaseERr.Date = ratedate;
        if (ReadFirstMain(BaseERr,2,true)) then begin
          updratef = RepSpec.flags[1]!=0;
        end;
        if (ERb.BCRates==0) then begin updratef = false; end;
        if (updratef) then begin
          BaseERr.Date = ratedate;
          BaseERr.Rate1 = brate;    
          BaseERr.Rate2 = units;    
          if (RecordStore(BaseERr,updratef)) then begin
          end;
        end;
      end;
      if (curncy==BCb.BaseCur2) then begin
        if (nonblank(ERb.B2CurCode)) then begin
          CCr.CurncyCode = ERb.B2CurCode;
          if (ReadFirstMain(CCr,1,true)) then begin
            ERr.CurncyCode = ERb.B2CurCode;
            ERr.Date = ratedate;

            if (ReadFirstMain(ERr,2,true)) then begin
              updratef = RepSpec.flags[1]!=0;
            end;
            if (updratef) then begin
              ERr.CurncyCode = ERb.B2CurCode;
              ERr.Date = ratedate;
              ERr.ToRate1 = rate;    
              ERr.FrRate = units;    
              if (RecordStore(ERr,updratef)) then begin
              end;
            end;
          end;
        end;
      end;
      if (treatedf==false) then begin
        updratef = true;
        ERr.CurncyCode = curncy;
        ERr.Date = ratedate;

        if (ReadFirstMain(ERr,2,true)) then begin
          updratef = RepSpec.flags[1]!=0;
        end;
        if (updratef) then begin
          ERr.CurncyCode = curncy;
          ERr.Date = ratedate;
//  StopAlert("curncy " & curncy & " units " & units & " rate " & rate & " ratedate " & ratedate & " BCb.BaseCur1 " & BCb.BaseCur1 & " BCb.BaseCur2 " & BCb.BaseCur2);
          ERr.ToRate1 = rate;    
          ERr.FrRate = units;    
          if (RecordStore(ERr,updratef)) then begin
          end;
        end;
      end;
    end;
  end;
  return;
end;

updating procedure AddCurencyRate_Swedish(record RcVc RepSpec,record BaseCurBlock BCb,record ERBlock ERb,string curncy,string curncyname,val rate,val brate,val units,val sekrate,Date ratedate)
begin
  record CurncyCodeVc CCr;
  record ERVc ERr;
  record BaseERVc BaseERr;
  Boolean treatedf,testf,updratef;

  testf = true;
  if (blank(curncy)) then begin
    testf = false;
  end;
  if (len(curncy)<3) then begin
    testf = false;
  end;
  if (testf) then begin
    treatedf = false;
    testf = true;
    updratef = true;
    CCr.CurncyCode = curncy;
    if (ReadFirstMain(CCr,1,true)==false) then begin
      if (RepSpec.flags[0]!=0) then begin
        CCr.CurncyCode = curncy;
        CCr.Comment = curncyname;
        if (RecordStore(CCr,false)) then begin end;
      end else begin
        testf = false;
      end;
    end;
    if (testf) then begin
      if (curncy==BCb.BaseCur1) then begin
//      if (BCb.BaseCur1=="SEK") then begin
        updratef = true;
        BaseERr.Date = ratedate;
        if (ReadFirstMain(BaseERr,2,true)) then begin
          updratef = RepSpec.flags[1]!=0;
        end;
        if (ERb.BCRates==0) then begin updratef = false; end;
        if (updratef) then begin
          BaseERr.Date = ratedate;
          BaseERr.Rate1 = units;    
          BaseERr.Rate2 = brate;    
          if (RecordStore(BaseERr,updratef)) then begin
          end;
        end;
      end;
      if (curncy==BCb.BaseCur2) then begin
//      if (BCb.BaseCur2=="SEK") then begin
        updratef = true;
        BaseERr.Date = ratedate;
        if (ReadFirstMain(BaseERr,2,true)) then begin
          updratef = RepSpec.flags[1]!=0;
        end;
        if (ERb.BCRates==0) then begin updratef = false; end;
        if (updratef) then begin
          BaseERr.Date = ratedate;
          BaseERr.Rate1 = brate;    
          BaseERr.Rate2 = units;    
          if (RecordStore(BaseERr,updratef)) then begin
          end;
        end;
      end;
      if (curncy==BCb.BaseCur2) then begin
//      if (true) then begin
        if (nonblank(ERb.B2CurCode)) then begin
          CCr.CurncyCode = ERb.B2CurCode;
          if (ReadFirstMain(CCr,1,true)) then begin
            ERr.CurncyCode = ERb.B2CurCode;
            ERr.Date = ratedate;

            if (ReadFirstMain(ERr,2,true)) then begin
              updratef = RepSpec.flags[1]!=0;
            end;
            if (updratef) then begin
              ERr.CurncyCode = ERb.B2CurCode;
              ERr.Date = ratedate;
              ERr.ToRate1 = brate;    
              ERr.FrRate = units;    
              if (RecordStore(ERr,updratef)) then begin
              end;
            end;
          end;
        end;
      end;
      if (treatedf==false) then begin        
        updratef = true;
//        if (BCb.BaseCur1!="EUR") and (BCb.BaseCur2!="EUR") and (BCb.BaseCur1=="SEK") then begin
//          if (curncy=="SEK") then begin
        if (BCb.BaseCur1!="EUR") and (BCb.BaseCur2!="EUR") then begin
          if (curncy==BCb.BaseCur1) then begin
            ERr.CurncyCode = "EUR";
            ERr.Date = ratedate;
            if (ReadFirstMain(ERr,2,true)) then begin
              updratef = RepSpec.flags[1]!=0;
            end;
            if (updratef) then begin
              ERr.CurncyCode = "EUR";
              ERr.Date = ratedate;
//  StopAlert("curncy " & curncy & " units " & units & " rate " & rate & " ratedate " & ratedate & " BCb.BaseCur1 " & BCb.BaseCur1 & " BCb.BaseCur2 " & BCb.BaseCur2);
              ERr.ToRate1 = sekrate;    
              ERr.FrRate = units;    
              if (RecordStore(ERr,updratef)) then begin
              end;
            end;
          end else begin
            ERr.CurncyCode = curncy;
            ERr.Date = ratedate;
            if (ReadFirstMain(ERr,2,true)) then begin
              updratef = RepSpec.flags[1]!=0;
            end;
            if (updratef) then begin
              ERr.CurncyCode = curncy;
              ERr.Date = ratedate;
  //  StopAlert("curncy " & curncy & " units " & units & " rate " & rate & " ratedate " & ratedate & " BCb.BaseCur1 " & BCb.BaseCur1 & " BCb.BaseCur2 " & BCb.BaseCur2);
              ERr.ToRate1 = rate;    
              ERr.FrRate = units;    
              if (RecordStore(ERr,updratef)) then begin
              end;
            end;
          end;
        end else begin
//  StopAlert("xx.curncy " & curncy & " units " & units & " rate " & rate & " ratedate " & ratedate & " BCb.BaseCur1 " & BCb.BaseCur1 & " BCb.BaseCur2 " & BCb.BaseCur2);
          ERr.CurncyCode = curncy;
          ERr.Date = ratedate;
          if (ReadFirstMain(ERr,2,true)) then begin
            updratef = RepSpec.flags[1]!=0;
          end;
          if (updratef) then begin
            ERr.CurncyCode = curncy;
            ERr.Date = ratedate;
//  StopAlert("curncy " & curncy & " units " & units & " rate " & rate & " ratedate " & ratedate & " BCb.BaseCur1 " & BCb.BaseCur1 & " BCb.BaseCur2 " & BCb.BaseCur2);
            ERr.ToRate1 = rate;    
            ERr.FrRate = units;    
            if (RecordStore(ERr,updratef)) then begin
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

updating procedure ParseXRateReply_Latvia(record RcVc RepSpec,Area a_reply)
begin
  Area a_xmlreply;
  xml xmlreply;
  date ratedate;
  Integer curnr;
  string 255 curncy,units,rate,tstr;
  record BaseCurBlock BCb;
  record ERBlock ERb;
  LongInt rerror,read;
  val ratev,unitsv,rateb1,rateb2;
  LongInt srvstart0,srvstart1,srvstart2;


  BlockLoad(BCb);
  BlockLoad(ERb);
  read = GetAreaFromArea(a_reply,0,GetAreaLength(a_reply)-0,a_xmlreply);      

/*
    CreateFile("ProceedXRateDClass3.txt");
    CloseFile;
    WriteAreaToFile(a_xmlreply,"ProceedXRateDClass3.txt",0);
*/

  srvstart0 = GetCurTick;

  xmlreply = ParseXMLArea(a_xmlreply);
  ratedate = DateFromString(XmlGet(xmlreply,"CRates/Date"),"YYYYMMDD");

  rateb1 = 1;
  rateb2 = 1;
  curnr = 0;
  while (XmlNodeExists(xmlreply,"CRates/Currencies/Currency[" & curnr & "]")) begin
    curncy = XmlGet(xmlreply,"CRates/Currencies/Currency[" & curnr & "]/ID");
    units = XmlGet(xmlreply,"CRates/Currencies/Currency[" & curnr & "]/Units");
    rate = XmlGet(xmlreply,"CRates/Currencies/Currency[" & curnr & "]/Rate");

    unitsv = StringToValue(units,M4Rate,"",".");
    ratev = StringToValue(rate,M4Rate,"",".");

    if (curncy==BCb.BaseCur1) then begin
      rateb1 = ratev;
    end;
    if (curncy==BCb.BaseCur2) then begin
      rateb2 = ratev;
    end;

    curnr = curnr + 1;
  end;

  curnr = 0;
  while (XmlNodeExists(xmlreply,"CRates/Currencies/Currency[" & curnr & "]")) begin
    curncy = XmlGet(xmlreply,"CRates/Currencies/Currency[" & curnr & "]/ID");
    units = XmlGet(xmlreply,"CRates/Currencies/Currency[" & curnr & "]/Units");
    rate = XmlGet(xmlreply,"CRates/Currencies/Currency[" & curnr & "]/Rate");

    unitsv = StringToValue(units,M4Rate,"",".");
    ratev = StringToValue(rate,M4Rate,"",".");
    ratev = ratev/rateb1;

    AddCurencyRate(RepSpec,BCb,ERb,curncy,"",ratev,rateb1/rateb2,unitsv,ratedate);
    curnr = curnr + 1;
  end;
  srvstart2 = GetCurTick;
//StopAlert("srvstart2 - srvstart0 " & srvstart2 - srvstart0);  
  return;
end;

updating procedure ParseXRateReply_Poland(record RcVc RepSpec,Area a_reply)
begin
  Area a_xmlreply;
  xml xmlreply;
  date ratedate;
  Integer curnr;
  string 255 curncy,curncyname,units,rate,tstr;
  record BaseCurBlock BCb;
  record ERBlock ERb;
  LongInt rerror,xmllen,headerl,read;
  val ratev,unitsv,rateb1,rateb2;

  BlockLoad(BCb);
  BlockLoad(ERb);
  read = GetAreaFromArea(a_reply,0,GetAreaLength(a_reply)-0,a_xmlreply);      

/*
    CreateFile("ParseXRateReply_Poland.txt");
    CloseFile;
    WriteAreaToFile(a_xmlreply,"ParseXRateReply_Poland.txt",0);
*/

  xmlreply = ParseXMLArea(a_xmlreply);
  ratedate = DateFromString(XmlGet(xmlreply,"tabela_kursow/data_publikacji"),"YYYY-MM-DD");

  rateb1 = 1;
  rateb2 = 1;
  curnr = 0;
  while (XmlNodeExists(xmlreply,"tabela_kursow/pozycja[" & curnr & "]")) begin
    curncyname = XmlGet(xmlreply,"tabela_kursow/pozycja[" & curnr & "]/nazwa_waluty");
    curncyname = ConvertStringFromCodePage("ISO-8859-2",curncyname);
    units = XmlGet(xmlreply,"tabela_kursow/pozycja[" & curnr & "]/przelicznik");
    curncy = XmlGet(xmlreply,"tabela_kursow/pozycja[" & curnr & "]/kod_waluty");
    rate = XmlGet(xmlreply,"tabela_kursow/pozycja[" & curnr & "]/kurs_sredni");

    unitsv = StringToValue(units,M4Rate,"",",");
    ratev = StringToValue(rate,M4Rate,"",",");

    if (curncy==BCb.BaseCur1) then begin
      rateb1 = ratev;
    end;
    if (curncy==BCb.BaseCur2) then begin
      rateb2 = ratev;
    end;
    curnr = curnr + 1;
  end;

  curnr = 0;
  while (XmlNodeExists(xmlreply,"tabela_kursow/pozycja[" & curnr & "]")) begin
    curncyname = XmlGet(xmlreply,"tabela_kursow/pozycja[" & curnr & "]/nazwa_waluty");
    curncyname = ConvertStringFromCodePage("ISO-8859-2",curncyname);
    units = XmlGet(xmlreply,"tabela_kursow/pozycja[" & curnr & "]/przelicznik");
    curncy = XmlGet(xmlreply,"tabela_kursow/pozycja[" & curnr & "]/kod_waluty");
    rate = XmlGet(xmlreply,"tabela_kursow/pozycja[" & curnr & "]/kurs_sredni");

    unitsv = StringToValue(units,M4Rate,"",",");
    ratev = StringToValue(rate,M4Rate,"",",");
    ratev = ratev/rateb1;
    AddCurencyRate(RepSpec,BCb,ERb,curncy,curncyname,ratev,rateb1/rateb2,unitsv,ratedate);
    curnr = curnr + 1;
  end;
  return;
end;

updating procedure ParseXRateReply_ECB(record RcVc RepSpec,Area a_reply,Boolean checktimef,Boolean clientf)
begin
  Area a_xmlreply;
  xml xmlreply;
  date ratedate,newratedate;
  Integer cubenr,curnr;
  string 255 curncy,curncyname,units,rate,tstr;
  string 255 cubestr,cubestrkey,curstr,curstrkey;
  record BaseCurBlock BCb;
  record ERBlock ERb;
  LongInt rerror,xmllen,headerl,read;
  val ratev,unitsv,rateb1,rateb2;

  BlockLoad(BCb);
  BlockLoad(ERb);
  read = GetAreaFromArea(a_reply,0,GetAreaLength(a_reply)-0,a_xmlreply);      

/*
    CreateFile("ParseXRateReply_ECB.txt");
    CloseFile;
    WriteAreaToFile(a_xmlreply,"ParseXRateReply_ECB.txt",0);
*/

  xmlreply = ParseXMLArea(a_xmlreply);

  rateb1 = 1;
  rateb2 = 1;
  cubestr = "gesmes:Envelope/Cube/";
  cubenr = 0;
  while (XmlNodeExists(xmlreply,cubestr & "Cube[" & cubenr & "]")) begin
    cubestrkey = cubestr & "Cube[" & cubenr & "]";
    ratedate = DateFromString(XmlGetAttribute(xmlreply,cubestrkey,"time"),"YYYY-MM-DD");

    if (ratedate==RepSpec.d1) then begin
      curnr = 0;
      curstr = cubestrkey & "/";
      while (XmlNodeExists(xmlreply,curstr & "Cube[" & curnr & "]")) begin
      
        curstrkey = curstr & "Cube[" & curnr & "]";

        curncy = XmlGetAttribute(xmlreply,curstrkey,"currency");
        units = "1.00";
        rate = XmlGetAttribute(xmlreply,curstrkey,"rate");

        unitsv = StringToValue(units,M4Rate,"",".");
        ratev = StringToValue(rate,M4Rate,"",".");
        if (curncy==BCb.BaseCur1) then begin
          rateb1 = ratev;
        end;
        if (curncy==BCb.BaseCur2) then begin
          rateb2 = ratev;
        end;
        curnr = curnr + 1;
      end;      
    end;
    cubenr = cubenr + 1;
  end;

  cubestr = "gesmes:Envelope/Cube/";
  cubenr = 0;
  while (XmlNodeExists(xmlreply,cubestr & "Cube[" & cubenr & "]")) begin
    cubestrkey = cubestr & "Cube[" & cubenr & "]";
    ratedate = DateFromString(XmlGetAttribute(xmlreply,cubestrkey,"time"),"YYYY-MM-DD");
//    AddCurencyRate(RepSpec,BCb,ERb,curncy,curncyname,1/ratev,1/ratev,unitsv,ratedate);

    if (ratedate==RepSpec.d1) then begin
      curnr = 0;
      curstr = cubestrkey & "/";
      while (XmlNodeExists(xmlreply,curstr & "Cube[" & curnr & "]")) begin
      
        curstrkey = curstr & "Cube[" & curnr & "]";

        curncy = XmlGetAttribute(xmlreply,curstrkey,"currency");
        units = "1.00";
        rate = XmlGetAttribute(xmlreply,curstrkey,"rate");

        unitsv = StringToValue(units,M4Rate,"",".");
        ratev = StringToValue(rate,M4Rate,"",".");

        ratev = rateb1/ratev;

        newratedate = ratedate;
        if (checktimef) then begin//this is a messed up logic in Latvia, but this is how it works..
          newratedate = addday(ratedate,1);
        end;

        AddCurencyRate(RepSpec,BCb,ERb,curncy,curncyname,ratev,rateb1/rateb2,unitsv,newratedate);

        curnr = curnr + 1;
      end;
      
      goto LParseXRateReply_ECB;
    end;
    cubenr = cubenr + 1;
  end;
LParseXRateReply_ECB:;  
  return;
end;

function string 255 GetValue(string InLine,Integer fieldnr)
begin
  string 255 res;
  Boolean testf;
  string 1 c;
  Integer fnr;
  Integer i,l;
  
  testf = true;
  fnr = 1;
  l = len(InLine);
  for (i=0;i<l;i=i+1) begin
    c = Mid(InLine,i,1);
    if (c==",") then begin 
      if (fnr>fieldnr) then begin
        testf = false;
        goto LGetValue;
      end else begin
        res = "";
        testf = true;
      end;
      fnr = fnr + 1;
    end;
    if (testf) then begin
      if (c!=",") then begin 
        res = res & c;
      end;
    end;
  end;
LGetValue:;  
  GetValue = res;
  return;
end;

function string 255 GetValueDelim(string InLine,Integer fieldnr,string delim)
begin
  string 255 res;
  Boolean testf;
  string 1 c;
  Integer fnr;
  Integer i,l;
  
  testf = true;
  fnr = 1;
  l = len(InLine);
  for (i=0;i<l;i=i+1) begin
    c = Mid(InLine,i,1);
    if (c==delim) then begin 
      if (fnr>fieldnr) then begin
        testf = false;
        goto LGetValueDelim;
      end else begin
        res = "";
        testf = true;
      end;
      fnr = fnr + 1;
    end;
    if (testf) then begin
      if (c!=delim) then begin 
        res = res & c;
      end;
    end;
  end;
LGetValueDelim:;  
  GetValueDelim = res;
  return;
end;

updating procedure ParseXRateReply_Lithuania(record RcVc RepSpec,Area a_reply)
begin
  LongInt lines,l;
  string 255 curncy,curncyname,units,rate,method,tstr;
  record BaseCurBlock BCb;
  record ERBlock ERb;
  Date ratedate;
  val ratev,unitsv,rateb1,rateb2;;

  BlockLoad(BCb);
  BlockLoad(ERb);
  lines = CountLinesInArea(a_reply); 
   
  rateb1 = 1;
  rateb2 = 1;
  for (l=2;l<lines;l=l+1) begin
    tstr = GetLineFromArea(a_reply,l);
    curncyname = ConvertStringFromCodePage("WINDOWS-1257",GetValue(tstr,0));
    curncy = GetValue(tstr,1);
    units = GetValue(tstr,2);
    rate = GetValue(tstr,3);
    ratedate = DateFromString(GetValue(tstr,4),"YYYY.MM.DD");

    unitsv = StringToValue(units,M4Rate,"",",");
    ratev = StringToValue(rate,M4Rate,"",",");
    if (curncy==BCb.BaseCur1) then begin
      rateb1 = ratev;
    end;
    if (curncy==BCb.BaseCur2) then begin
      rateb2 = ratev;
    end;
  end;

  for (l=2;l<lines;l=l+1) begin
    tstr = GetLineFromArea(a_reply,l);
    curncyname = ConvertStringFromCodePage("WINDOWS-1257",GetValue(tstr,0));
    curncy = GetValue(tstr,1);
    units = GetValue(tstr,2);
    rate = GetValue(tstr,3);
    ratedate = DateFromString(GetValue(tstr,4),"YYYY.MM.DD");

    unitsv = StringToValue(units,M4Rate,"",",");
    ratev = StringToValue(rate,M4Rate,"",",");

    ratev = ratev/rateb1;
    AddCurencyRate(RepSpec,BCb,ERb,curncy,curncyname,ratev,rateb1/rateb2,unitsv,ratedate);
  end;
  return;
end;

/*
old, partner did not allow 
updating procedure ParseXRateReply_Sweden(record RcVc RepSpec,Area a_reply)
begin
  LongInt lines,l;
  string 255 curncy,curncyname,units,rate,method,tstr;
  record BaseCurBlock BCb;
  record ERBlock ERb;
  Date ratedate;
  val ratev,unitsv;

  BlockLoad(BCb);
  BlockLoad(ERb);
  lines = CountLinesInArea(a_reply);  
  for (l=4;l<lines;l=l+1) begin
    tstr = GetLineFromArea(a_reply,l);
    if (len(tstr)==2) then begin
      goto LParseSweden;
    end;
    
    ratedate = DateFromString(GetValueDelim(tstr,0,";"),"DD/MM/YYYY");
    curncyname = "";
    curncy = GetValueDelim(GetValueDelim(tstr,2,";"),1," ");
    units = GetValueDelim(GetValueDelim(tstr,2,";"),0," ");
    rate = GetValueDelim(GetValueDelim(tstr,3,";"),0," "); // remove trailing spaces

    unitsv = StringToValue(units,M4Rate,"",",");
    ratev = StringToValue(rate,M4Rate,"",",");

    if (nonblank(ratev)) then begin
      AddCurencyRate(RepSpec,BCb,ERb,curncy,curncyname,ratev,ratev,unitsv,ratedate);
    end;
  end;
LParseSweden:;
  return;
end;

*/

updating procedure ParseXRateReply_ECB_Sweden(record RcVc RepSpec,Area a_reply)
begin
  Area a_xmlreply;
  xml xmlreply;
  date ratedate;
  Integer cubenr,curnr;
  string 255 curncy,curncyname,units,rate,tstr;
  string 255 cubestr,cubestrkey,curstr,curstrkey;
  record BaseCurBlock BCb;
  record ERBlock ERb;
  LongInt rerror,xmllen,headerl,read;
  val ratev,unitsv,rateb1,rateb2;

  BlockLoad(BCb);
  BlockLoad(ERb);
  read = GetAreaFromArea(a_reply,0,GetAreaLength(a_reply)-0,a_xmlreply);      

/*
    CreateFile("ParseXRateReply_ECB_Sweden.txt");
    CloseFile;
    WriteAreaToFile(a_xmlreply,"ParseXRateReply_ECB_Sweden.txt",0);
*/

  xmlreply = ParseXMLArea(a_xmlreply);

  rateb1 = 1;
  rateb2 = 1;
  cubestr = "gesmes:Envelope/Cube/";
  cubenr = 0;
  while (XmlNodeExists(xmlreply,cubestr & "Cube[" & cubenr & "]")) begin
    cubestrkey = cubestr & "Cube[" & cubenr & "]";
    ratedate = DateFromString(XmlGetAttribute(xmlreply,cubestrkey,"time"),"YYYY-MM-DD");

    if (ratedate==RepSpec.d1) then begin
      curnr = 0;
      curstr = cubestrkey & "/";
      while (XmlNodeExists(xmlreply,curstr & "Cube[" & curnr & "]")) begin
      
        curstrkey = curstr & "Cube[" & curnr & "]";

        curncy = XmlGetAttribute(xmlreply,curstrkey,"currency");
        units = "1.00";
        rate = XmlGetAttribute(xmlreply,curstrkey,"rate");

        unitsv = StringToValue(units,M4Rate,"",".");
        ratev = StringToValue(rate,M4Rate,"",".");

        if (curncy==BCb.BaseCur1) then begin
          rateb1 = ratev;
        end;
        if (curncy==BCb.BaseCur2) then begin
          rateb2 = ratev;
        end;
        curnr = curnr + 1;
      end;      
    end;
    cubenr = cubenr + 1;
  end;

//Trace("rateb2 " & rateb2 & " rateb1 " & rateb1," ratev " & ratev);

  cubestr = "gesmes:Envelope/Cube/";
  cubenr = 0;
  while (XmlNodeExists(xmlreply,cubestr & "Cube[" & cubenr & "]")) begin
    cubestrkey = cubestr & "Cube[" & cubenr & "]";
    ratedate = DateFromString(XmlGetAttribute(xmlreply,cubestrkey,"time"),"YYYY-MM-DD");

    if (ratedate==RepSpec.d1) then begin
      curnr = 0;
      curstr = cubestrkey & "/";
      while (XmlNodeExists(xmlreply,curstr & "Cube[" & curnr & "]")) begin
      
        curstrkey = curstr & "Cube[" & curnr & "]";

        curncy = XmlGetAttribute(xmlreply,curstrkey,"currency");
        units = "1.00";
        rate = XmlGetAttribute(xmlreply,curstrkey,"rate");

        unitsv = StringToValue(units,M4Rate,"",".");
        ratev = StringToValue(rate,M4Rate,"",".");

//Trace("curncy " & curncy & " rateb1 " & rateb1," ratev " & ratev & " rateb1/ratev " & rateb1/ratev);

        ratev = rateb1/ratev;

        AddCurencyRate_Swedish(RepSpec,BCb,ERb,curncy,curncyname,100*ratev,100*(rateb2/rateb1),100*unitsv,100*rateb1,ratedate);//sicko

        curnr = curnr + 1;
      end;
//        if (BCb.BaseCur1!="EUR") and (BCb.BaseCur2!="EUR") and (BCb.BaseCur1=="SEK") then begin
      
      goto LParseXRateReply_ECB_Sweden;
    end;
    cubenr = cubenr + 1;
  end;
LParseXRateReply_ECB_Sweden:;  
  return;
end;

updating procedure ParseXRateReply_Estonia(record RcVc RepSpec,Area a_reply)
begin
  LongInt lines,l;
  string 255 curncy,curncyname,units,rate,method,tstr,curstrkey;
  record BaseCurBlock BCb;
  record ERBlock ERb;
  Date ratedate;
  val ratev,unitsv,rateb1,rateb2;
  Area a_xmlreply;
  LongInt rerror,xmllen,headerl,read,i,cnt;
  xml xmlreply;

  BlockLoad(BCb);
  BlockLoad(ERb);
  read = GetAreaFromArea(a_reply,0,GetAreaLength(a_reply)-0,a_xmlreply);      

  xmlreply = ParseXMLArea(a_xmlreply);

  if (XmlGet(xmlreply,"Report/Header/Version")=="1.0") then begin
    ratedate = DateFromString(XmlGet(xmlreply,"Report/Body/FixingsDate"),"MM/DD/YY");
    if (ratedate.year<=80) then begin
      ratedate.year = ratedate.year + 2000;
    end else begin
      if (ratedate.year<100) then begin
        ratedate.year = ratedate.year + 1900;
      end;
    end;
    if (ratedate==RepSpec.d1) then begin
      cnt = XmlCountChildren(xmlreply,"Report/Body/Currencies");
      rateb1 = 1;
      rateb2 = 1;
      for (i=0;i<cnt;i=i+1) begin
        curstrkey = "Report/Body/Currencies/Currency[" & i & "]";
        curncy = XmlGetAttribute(xmlreply,curstrkey,"name");
        curncyname = XmlGetAttribute(xmlreply,curstrkey,"text");
        rate = XmlGetAttribute(xmlreply,curstrkey,"rate");
        
        unitsv = 1.00;
        ratev = StringToValue(rate,M4Rate,"",".");
        if (curncy==BCb.BaseCur1) then begin
          rateb1 = ratev;
        end;
        if (curncy==BCb.BaseCur2) then begin
          rateb2 = ratev;
        end;
      end;

      for (i=0;i<cnt;i=i+1) begin
        curstrkey = "Report/Body/Currencies/Currency[" & i & "]";
        curncy = XmlGetAttribute(xmlreply,curstrkey,"name");
        curncyname = XmlGetAttribute(xmlreply,curstrkey,"text");
        rate = XmlGetAttribute(xmlreply,curstrkey,"rate");
        
        unitsv = 1.00;
        ratev = StringToValue(rate,M4Rate,"",".");
        ratev = ratev/rateb1;
        
        AddCurencyRate(RepSpec,BCb,ERb,curncy,curncyname,ratev,rateb1/rateb2,unitsv,ratedate);
      end;
    end;
  end;
LParseEstonia:;
  return;
end;

updating procedure ParseXRateReply_Turkey(record RcVc RepSpec,Area a_reply)
begin
  LongInt lines,l;
  string 255 curncy,curncyname,units,rate,method,tstr,curstrkey;
  record BaseCurBlock BCb;
  record ERBlock ERb;
  Date ratedate;
  val ratev,unitsv;
  Area a_xmlreply;
  LongInt rerror,xmllen,headerl,read,i,cnt;
  xml xmlreply;

  BlockLoad(BCb);
  BlockLoad(ERb);
  
  read = GetAreaFromArea(a_reply,0,GetAreaLength(a_reply)-0,a_xmlreply);      

  xmlreply = ParseXMLArea(a_xmlreply);
  if (XmlNodeExists(xmlreply,"Tarih_Date")) then begin
    ratedate = DateFromString(XmlGetAttribute(xmlreply,"Tarih_Date","Date"),"MM/DD/YYYY");
    if (ratedate<RepSpec.d1) then begin//for sundays and saturndays
      ratedate = RepSpec.d1;
    end;
    if (ratedate<=RepSpec.d1) then begin
      cnt = 0;
      while (XmlNodeExists(xmlreply,"Tarih_Date/Currency[" & cnt & "]")) begin
        curncy = XmlGetAttribute(xmlreply,"Tarih_Date/Currency[" & cnt & "]","Kod");
        curncyname = XmlGet(xmlreply,"Tarih_Date/Currency[" & cnt & "]/Isim");
        curncyname = ConvertStringFromCodePage("ISO-8859-9",curncyname);
        units = XmlGet(xmlreply,"Tarih_Date/Currency[" & cnt & "]/Unit");
        rate = XmlGet(xmlreply,"Tarih_Date/Currency[" & cnt & "]/ForexSelling");

        unitsv = StringToValue(units,M4Rate,"",".");
        ratev = StringToValue(rate,M4Rate,"",".");

        if (ratev!=0) then begin
          AddCurencyRate(RepSpec,BCb,ERb,curncy,curncyname,ratev,ratev,unitsv,ratedate);
        end;
        cnt = cnt + 1;
      end;
    end;
  end;
LParseTurkey:;
  return;
end;

updating procedure ParseXRateReply_Russia(record RcVc RepSpec,Area a_reply)
begin
  LongInt lines,l;
  string 255 curncy,curncyname,units,rate,method,tstr,curstrkey;
  record BaseCurBlock BCb;
  record ERBlock ERb;
  Date ratedate;
  val ratev,unitsv,rateb1,rateb2;
  Area a_xmlreply;
  LongInt rerror,xmllen,headerl,read,i,cnt;
  xml xmlreply;

  BlockLoad(BCb);
  BlockLoad(ERb);
  read = GetAreaFromArea(a_reply,0,GetAreaLength(a_reply)-0,a_xmlreply);      
  
  xmlreply = ParseXMLArea(a_xmlreply);

  if (XmlNodeExists(xmlreply,"ValCurs")) then begin
    ratedate = DateFromString(XmlGetAttribute(xmlreply,"ValCurs","Date"),"DD.MM.YYYY");
    if (ratedate.year<=80) then begin
      ratedate.year = ratedate.year + 2000;
    end else begin
      if (ratedate.year<100) then begin
        ratedate.year = ratedate.year + 1900;
      end;
    end;
    if (ratedate==RepSpec.d1) then begin
      rateb1 = 1;
      rateb2 = 1;
      i = 0;
      curstrkey = "ValCurs/Valute[" & i & "]";
      while (XmlNodeExists(xmlreply,curstrkey)) begin
        curncy = ConvertStringFromCodePage("WINDOWS-1251",XmlGet(xmlreply,curstrkey & "/CharCode"));
        curncyname = ConvertStringFromCodePage("WINDOWS-1251",XmlGet(xmlreply,curstrkey & "/Name"));
        rate = ConvertStringFromCodePage("WINDOWS-1251",XmlGet(xmlreply,curstrkey & "/Value"));
        units = ConvertStringFromCodePage("WINDOWS-1251",XmlGet(xmlreply,curstrkey & "/Nominal"));
        
        unitsv = StringToValue(units,M4Rate,"",",");
        ratev = StringToValue(rate,M4Rate,"",",");

        if (curncy==BCb.BaseCur1) then begin
          rateb1 = ratev;
        end;
        if (curncy==BCb.BaseCur2) then begin
          rateb2 = ratev;
        end;        
        i = i+1;
        curstrkey = "ValCurs/Valute[" & i & "]";
      end;

      i = 0;
      curstrkey = "ValCurs/Valute[" & i & "]";
      while (XmlNodeExists(xmlreply,curstrkey)) begin
        curncy = ConvertStringFromCodePage("WINDOWS-1251",XmlGet(xmlreply,curstrkey & "/CharCode"));
        curncyname = ConvertStringFromCodePage("WINDOWS-1251",XmlGet(xmlreply,curstrkey & "/Name"));
        rate = ConvertStringFromCodePage("WINDOWS-1251",XmlGet(xmlreply,curstrkey & "/Value"));
        units = ConvertStringFromCodePage("WINDOWS-1251",XmlGet(xmlreply,curstrkey & "/Nominal"));
        
        unitsv = StringToValue(units,M4Rate,"",",");
        ratev = StringToValue(rate,M4Rate,"",",");
        ratev = ratev/rateb1;
        AddCurencyRate(RepSpec,BCb,ERb,curncy,curncyname,ratev,rateb1/rateb2,unitsv,ratedate);

        i = i+1;
        curstrkey = "ValCurs/Valute[" & i & "]";
      end;
    end;
  end;

  return;
end;

function string 5 TransCurrencyBOEtoISO(string curcode)
begin
  string 5 res;
  switch (curcode) begin
    case "XUDLADS": res = "AUD";
    case "XUDLCDS": res = "CAD";
    case "XUDLBK89": res = "CNY";
    case "XUDLBK22": res = "CYP";
    case "XUDLBK25": res = "CZK";
    case "XUDLDKS": res = "DKK";
    case "XUDLBK28": res = "EEK";
    case "XUDLERS": res = "EUR";
    case "XUDLHDS": res = "HKD";
    case "XUDLJYS": res = "JPY";
    case "XUDLBK33": res = "HUF";
    case "XUDLBK97": res = "INR";
    case "XUDLBK39": res = "LVL";
    case "XUDLBK78": res = "ILS";
    case "XUDLBK36": res = "LTL";
    case "XUDLBK83": res = "MYR";
    case "XUDLBK44": res = "MTL";
    case "XUDLNDS": res = "NZD";
    case "XUDLNKS": res = "NOK";
    case "XUDLBK47": res = "PLN";
    case "XUDLBK85": res = "RUB";
    case "XUDLSRS": res = "";
    case "XUDLSGS": res = "SGD";
    case "XUDLBK55": res = "SKK";
    case "XUDLSKS": res = "SEK";
    case "XUDLSFS": res = "CHF";
    case "XUDLBK52": res = "";
    case "XUDLZRS": res = "ZAR";
    case "XUDLBK93": res = "KRW";
    case "XUDLTWS": res = "TWD";
    case "XUDLBK87": res = "THB";
    case "XUDLBK95": res = "TRY";
    case "XUDLUSS": res = "USD";
  end;
  TransCurrencyBOEtoISO = res;
  return;
end;

updating procedure ParseXRateReply_UK(record RcVc RepSpec,Area a_reply)
begin
  LongInt lines,l;
  string 255 curncy,curncyname,units,rate,method,tstr,curstrkey,nstr;
  record BaseCurBlock BCb;
  record ERBlock ERb;
  Date ratedate;
  val ratev,unitsv,rateb1,rateb2;
  Area a_xmlreply;
  LongInt rerror,xmllen,headerl,read,i,cnt,j,cnt2;
  xml xmlreply;
  

  BlockLoad(BCb);
  BlockLoad(ERb);
  read = GetAreaFromArea(a_reply,0,GetAreaLength(a_reply)-0,a_xmlreply);      

/*
    CreateFile("ParseXRateReply_UK.txt");
    CloseFile;
    WriteAreaToFile(a_xmlreply,"ParseXRateReply_UK.txt",0);
*/

  xmlreply = ParseXMLArea(a_xmlreply);  
  if (XmlGetAttribute(xmlreply,"Envelope","xmlns")=="http://www.gesmes.org/xml/2002-08-01") then begin
    cnt = XmlCountChildren(xmlreply,"Envelope");
    rateb1 = 1;
    rateb2 = 1;
    for (i=0;i<cnt;i=i+1) begin
      curstrkey = "Envelope/Cube[" & i & "]";
      
      curncy = TransCurrencyBOEtoISO(XmlGetAttribute(xmlreply,curstrkey,"SCODE"));

      ratev = 0;
      
      cnt2 = XmlCountChildren(xmlreply,curstrkey);
      for (j=0;j<cnt2;j=j+1) begin
        nstr = curstrkey & "/Cube[" & j & "]";
        if (XmlGetAttribute(xmlreply,nstr,"CAT_ORD")=="6") then begin
          curncyname = XmlGetAttribute(xmlreply,nstr,"VAL_DESC");
        end;
        if (nonblank(XmlGetAttribute(xmlreply,nstr,"TIME"))) then begin
          ratedate = DateFromString(XmlGetAttribute(xmlreply,nstr,"TIME"),"YYYY-MM-DD");
          if (ratedate==AddDay(RepSpec.d1,-1)) then begin
            unitsv = 1.00;
            rate = XmlGetAttribute(xmlreply,nstr,"OBS_VALUE");
            ratev = StringToValue(rate,M4Rate,"",".");
          end;
        end;
      end;
      if (curncy==BCb.BaseCur1) then begin
        rateb1 = ratev;
      end;
      if (curncy==BCb.BaseCur2) then begin
        rateb2 = ratev;
      end;        
    end;

    for (i=0;i<cnt;i=i+1) begin
      curstrkey = "Envelope/Cube[" & i & "]";
      
      curncy = TransCurrencyBOEtoISO(XmlGetAttribute(xmlreply,curstrkey,"SCODE"));

      ratev = 0;
      
      cnt2 = XmlCountChildren(xmlreply,curstrkey);
      for (j=0;j<cnt2;j=j+1) begin
        nstr = curstrkey & "/Cube[" & j & "]";
        if (XmlGetAttribute(xmlreply,nstr,"CAT_ORD")=="6") then begin
          curncyname = XmlGetAttribute(xmlreply,nstr,"VAL_DESC");
        end;
        if (nonblank(XmlGetAttribute(xmlreply,nstr,"TIME"))) then begin
          ratedate = DateFromString(XmlGetAttribute(xmlreply,nstr,"TIME"),"YYYY-MM-DD");
          if (ratedate==AddDay(RepSpec.d1,-1)) then begin
            unitsv = 1.00;
            rate = XmlGetAttribute(xmlreply,nstr,"OBS_VALUE");
            ratev = StringToValue(rate,M4Rate,"",".");
          end;
        end;
      end;
      if (nonblank(curncy) and ratev!=0.0) then begin
        ratev = ratev/rateb1;
        AddCurencyRate(RepSpec,BCb,ERb,curncy,curncyname,unitsv,rateb1/rateb2,ratev,AddDay(ratedate,1));
        ratev = 0;
      end;
    end;
  end else begin
    LogText(0,"Cannot exchange rate information from the Bank of England. They XML format may have changed.");
  end;
LParseUK:;
  return;
end;

global
updating function Boolean ReadExchangeRateFromBank2(Area a_reply,Date td,Integer flag0,Integer flag1,var Integer errno,var string errstr,Date od,Boolean clientf)
begin
  Boolean found;
  LongInt rerror;
  string 255 rerrordesc;
  LongInt l;
  record TXServiceReplyVc TXSrvReplyr;
  record InternetEnablerBlock IEb;
  record RcVc RepSpec;

  RepSpec.d1 = td;
  RepSpec.flags[0] = flag0;
  RepSpec.flags[1] = flag1;
  
  ReadTXServiceReply(TXSrvReplyr,a_reply,true);
  rerror = TXSrvReplyr.ErrorCode;
  rerrordesc = TXSrvReplyr.ErrorDescription;
  
  if (rerror==0) then begin
    BlockLoad(IEb);

    switch (IEb.RegInCountry) begin
      case 99: 
        switch (CurrentCompany) begin
          case 29: //Russia
            ParseXRateReply_Russia(RepSpec,a_reply);
            found = true;
          case 24: //Norway
//              ParseXRateReply_Sweden(RepSpec,a_reply);
            ParseXRateReply_ECB_Sweden(RepSpec,a_reply);
            found = true;
          case 25: //Estonia
            ParseXRateReply_Estonia(RepSpec,a_reply);
            found = true;
          case 26: 
            ParseXRateReply_ECB(RepSpec,a_reply,false,clientf);
            found = true;
          case 28: 
            ParseXRateReply_ECB(RepSpec,a_reply,false,clientf);
//            ParseXRateReply_Lithuania(RepSpec,a_reply);
            found = true;
          case 36: 
            ParseXRateReply_Poland(RepSpec,a_reply);
            found = true;
          case 39: //Sweden
//              ParseXRateReply_Sweden(RepSpec,a_reply);
            ParseXRateReply_ECB_Sweden(RepSpec,a_reply);
            found = true;
          case 40: //Finland
            ParseXRateReply_ECB(RepSpec,a_reply,false,clientf);
            found = true;
          case 63: //UK
            ParseXRateReply_UK(RepSpec,a_reply);
            found = true;
          case 65: //Slovenia
            ParseXRateReply_ECB(RepSpec,a_reply,false,clientf);
            found = true;
          case 68: //Estonia
            ParseXRateReply_Estonia(RepSpec,a_reply);
            found = true;
          case 74: //Estonia
            ParseXRateReply_Estonia(RepSpec,a_reply);
            found = true;
          case 82: //Norway FO
//              ParseXRateReply_Sweden(RepSpec,a_reply);
            ParseXRateReply_ECB_Sweden(RepSpec,a_reply);
            found = true;
          case 90: //Portugal
            ParseXRateReply_ECB(RepSpec,a_reply,false,clientf);
            found = true;
          case 96: //Turkey
            ParseXRateReply_Turkey(RepSpec,a_reply);
            found = true;
        end;
      case 1:
        ParseXRateReply_UK(RepSpec,a_reply);
        found = true;
      case 2: // Norway
//          ParseXRateReply_Sweden(RepSpec,a_reply);
        ParseXRateReply_ECB_Sweden(RepSpec,a_reply);
        found = true;
      case 3: // Sweden
//          ParseXRateReply_Sweden(RepSpec,a_reply);
        ParseXRateReply_ECB_Sweden(RepSpec,a_reply);
        found = true;
      case 4: //Finland
        ParseXRateReply_ECB(RepSpec,a_reply,false,clientf);
        found = true;
      case 6:
        ParseXRateReply_Poland(RepSpec,a_reply);
        found = true;
      case 7: //Estonia
        ParseXRateReply_Estonia(RepSpec,a_reply);
        found = true;
      case 8:       
        ParseXRateReply_ECB(RepSpec,a_reply,true,clientf);
        found = true;
      case 9: 
        ParseXRateReply_ECB(RepSpec,a_reply,false,clientf);
//        ParseXRateReply_Lithuania(RepSpec,a_reply);
        found = true;
      case 10: //Russia
        ParseXRateReply_Russia(RepSpec,a_reply);
        found = true;
      case 16: //Estonia
        ParseXRateReply_Estonia(RepSpec,a_reply);
        found = true;
      case 22: //Portugal
        ParseXRateReply_ECB(RepSpec,a_reply,false,clientf);
        found = true;
      case 23: //Slovenia
        ParseXRateReply_ECB(RepSpec,a_reply,false,clientf);
        found = true;
      case 25: //Estonia
        ParseXRateReply_Estonia(RepSpec,a_reply);
        found = true;
      case 26: // Norway FO
//          ParseXRateReply_Sweden(RepSpec,a_reply);
        ParseXRateReply_ECB_Sweden(RepSpec,a_reply);
        found = true;
      case 35: //Turkey
        ParseXRateReply_Turkey(RepSpec,a_reply);
        found = true;
      otherwise 
        errno = 20237;
        goto LReadExchangeRateFromBank;
    end;
  end else begin
    if (TXSrvReplyr.HTSCUServiceErrorCode>0) then begin
      if (errno<1000) then begin
        errno = 0;
      end else begin
        errno = TXSrvReplyr.HTSCUServiceErrorCode;
      end;
      errstr = TXSrvReplyr.HTSCUServiceErrorDescription;
    end else begin
      errno = rerror;
      errstr = rerrordesc;
    end;
  end;
LReadExchangeRateFromBank:;
  ReadExchangeRateFromBank2 = found;
  return;
end;

global
updating function Boolean ReadExchangeRateFromBank(Area a_reply,Date td,Integer flag0,Integer flag1,var Integer errno,var string errstr,Date od)
begin

  ReadExchangeRateFromBank = ReadExchangeRateFromBank2(a_reply,td,flag0,flag1,errno,errstr,od,false);

  return;
end;

global
updating function Boolean GetExchangeRateFromBank(record RcVc RepSpec,Boolean clientf,var Integer errno,var string errstr)
begin  
  Boolean res,testf,found;
  record InternetEnablerBlock IEb;
  record CYBlock CYb;
  Area a_req,a_reply,a_xmlreply;
  record BaseCurBlock BCb;
  record ERBlock ERb;
  Date d1;
  Date od;

  d1 = RepSpec.d1;
  BlockLoad(IEb);
  BlockLoad(CYb);
  BlockLoad(ERb);
  switch (IEb.RegInCountry) begin
    case 99: ;
      switch (CurrentCompany) begin
//        case 63: //UK
//          d1 = AddDay(RepSpec.d1,-1);
      end;
    case 1:  ; //UK
      d1 = AddDay(RepSpec.d1,-1);
    case 2:  ;
    case 3:  ;
    case 4:  ;
    case 6:  ;
    case 7:  ;
    case 8:  ;
    case 9:  ;
    case 10:  ;
    case 16:  ;
    case 22:  ;
    case 23:  ;
    case 25:  ;
    case 26:  ;
    case 35:  
      d1 = AddDay(RepSpec.d1,-1);
    otherwise 
      errno = 20237;
      goto LGetExchangeRateFromBank;
  end;
  SendTextParameter(DateToString(d1,"YYYY-MM-DD"),a_req);
  if (ERb.VATLawExchangeRate!=0) then begin
    SendTextParameter(CYb.VATLaw,a_req);
  end else begin
    SendTextParameter("",a_req);
  end;
  SendEOLParameter(a_req);  

  BlockLoad(BCb);
  if (BCb.NotBase1!=0) then begin
    errno = 20237;
    errstr = " " & USetStr(20805);
    goto LGetExchangeRateFromBank;
  end;

  if (clientf) then begin
//  LogAreaToFile("_HTSNationalBankCurRatesReq.txt",a_req);

    testf = SendServiceRequest("NATIONALBANKCURRATES",false,a_req,a_reply);          

//  LogAreaToFile("_HTSNationalBankCurRatesReplyt.txt",a_reply);

  end else begin
    if (ServiceRequestAsync("NATIONALBANKCURRATES","",true,a_req,"HTSNationalBankCurRatesReply")==false) then begin
    end;
  end;
  if (testf) then begin
    found = ReadExchangeRateFromBank2(a_reply,RepSpec.d1,RepSpec.flags[0],RepSpec.flags[1],errno,errstr,od,clientf);
  end else begin
    errno = 20241;
  end;
LGetExchangeRateFromBank:;  
  GetExchangeRateFromBank = found;
  return;
end;

global
updating procedure ProceedXRateDClass()
begin
  Integer wn;
  record RcVc RepSpec;
  Boolean found;
  Integer errno;
  string 255 errstr;
  
  Area a_reply;
  Integer err;
  Date ratedate;
  
  wn = CurWindow;
  DeselectWindow(wn,true)
  GetWindowRecord(wn,RepSpec);

  found = GetExchangeRateFromBank(RepSpec,true,errno,errstr);  
  
  if (found) then begin
    CloseWindow(wn);
    UpdateBrowses("ERVc");
  end else begin
    MessageBox(errno,errstr);
  end;
  return;
end;
