external function Boolean TestForMATVARINS(Integer);
external procedure WarnFutureDate(Boolean,Date);
external function Boolean FindLocalSerialPortDevice(Integer,LongInt,string,var record LSerialPortDeviceVc);
remote procedure StockTakeVc_PasteSerialNr(var record StockTakeVc,Integer,var string);
remote procedure StockTakeVc_PasteSerialNr_iPhone(var record StockTakeVc,var record RcVc,var string);
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
remote procedure UpdateStockTakeFIFO(var record StockTakeVc,Boolean);
external function string 40 SerialNrSClassSpecPName(string);
remote function Boolean StockTakeVc_PasteArtCode(var record StockTakeVc,Integer,Integer,var string);
remote function Boolean StockTakeVc_PasteArtCode_iPhone(var record StockTakeVc,var record RcVc,Integer,var string);
external procedure SerialNrDimensions(string,string,var val,var val,var val);
external function val CalculateSerialNrQuantity(string,string,string,Boolean,val,val,val,val);
remote function Boolean GetSVOSerialItem(string,string,record SVOSerVc);
remote function Boolean GetFirstItem(var string,var record INVc);

global
function Boolean StockTakeDClassSwitchRow(Integer wn,Integer rownr)
begin        
  record StockTakeVc StockTaker;  
  row StockTakeVc StockTakerw; 
  Integer rwcnt;
  Boolean res;
  val unitprdisc;
  string 255 recepy;

  res = true;
  GetWindowRecord(wn,StockTaker);
  rwcnt = MatRowCnt(StockTaker);  
  if ((rownr<rwcnt) and (rownr>=0)) then begin
    MatRowGet(StockTaker,rownr,StockTakerw);
/*  This makes one extra call, I can see why but we need another solution
      unitprdisc = StockTakerw.Sum/StockTakerw.Quant;
      unitprdisc = Round(unitprdisc,DefaultRoundMode);
      recepy = StockTakerw.Recepy;
//      if (blank(recepy)) then begin
//        GetRecepy(StockTakerw.ArtCode,recepy);
//      end;  
    SendArtStat(StockTakerw.ArtCode,StockTaker.Location,recepy,0,0,unitprdisc,StockTaker.TransDate);
*/

    SetWindowNameArg(wn,StockTakerw.ArtCode & ":" & StockTaker.Location);
  end;
  StockTakeDClassSwitchRow = res;  
  return;
end;


global
function boolean StockTakeRowDClassOnOKWindow(Integer wn)
begin
  record RcVc RepSpec;
  record StockTakeVc StockTaker;
  row StockTakeVc STrw;
  integer mwn;
  integer rwn;
  
  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,StockTaker);
  
  GetWindowRecord(wn,RepSpec);
  rwn = RepSpec.long1;
  
  MatRowGet(StockTaker,rwn,STrw);
  
  STrw.ArtCode = RepSpec.f1;
  STrw.Qty = RepSpec.long2;
  STrw.InStock = RepSpec.BaseWidth; // Is it OK to just add long3 in rctype.h? Using BaseWidth until I know...
  STrw.Spec = RepSpec.f2;
  STrw.Location = RepSpec.f3;
  STrw.SerialNr = RepSpec.f4;
  STrw.Position = RepSpec.f5;
  STrw.UnitXval = RepSpec.vals1;
  STrw.UnitYval = RepSpec.vals2;
  STrw.UnitZval = RepSpec.vals3;
  STrw.Coefficient = RepSpec.vals0;
  STrw.BasePrice = RepSpec.vals4;
  
  MatRowPut(StockTaker,rwn,STrw);
  PutWindowRecord(mwn,StockTaker);
  
  StockTakeRowDClassOnOKWindow = true;
end;

global
procedure StockTakeDClassEditRow(Integer wn,Integer rwn)
begin
  record StockTakeVc StockTaker;
  row StockTakeVc STrw;
  record RcVc RepSpec;
  integer nwn;
  
  GetWindowRecord(wn,StockTaker);
  MatRowGet(StockTaker,rwn,STrw);
  
  RepSpec.long1 = rwn;
  RepSpec.f1 = STrw.ArtCode;
  RepSpec.long2 = STrw.Qty;
  RepSpec.BaseWidth = STrw.InStock; // Is it OK to just add long3 in rctype.h? Using BaseWidth until I know...
  RepSpec.f2 = STrw.Spec;
  RepSpec.f3 = STrw.Location;
  RepSpec.f4 = STrw.SerialNr;
  RepSpec.f5 = STrw.Position;
  RepSpec.vals1 = STrw.UnitXval;
  RepSpec.vals2 = STrw.UnitYval;
  RepSpec.vals3 = STrw.UnitZval;
  RepSpec.vals0 = STrw.Coefficient;
  RepSpec.vals4 = STrw.BasePrice;
  
  nwn = OpenWindow("StockTakeRowDClass",0,wn,"","",RepSpec);
end;

global
procedure StockTakeDClassAddRow(Integer wn,Integer rwn)
begin
  record StockTakeVc StockTaker;
  row StockTakeVc StockTakerw;

  GetWindowRecord(wn,StockTaker);
  MatRowGet(StockTaker,rwn,StockTakerw);
//  StockTakerw.stp = kInvoiceRowTypeNormal;
  MatRowPut(StockTaker,rwn,StockTakerw);
  PutWindowRecord(wn,StockTaker);
  StockTakeDClassEditRow(wn,rwn);
  return;
end;

function Boolean StockTakeRowDClassUnitXvalEFAfter(Integer wn,Integer changed)
begin
  record RcVc RepSpec;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,RepSpec);
    RepSpec.long2 = CalculateSerialNrQuantity(RepSpec.f1,"","",false,RepSpec.vals1,RepSpec.vals2,RepSpec.vals3,RepSpec.long2);
    PutWindowRecord(wn,RepSpec);    
  end;
  StockTakeRowDClassUnitXvalEFAfter = res;
  return;
end;

function Boolean StockTakeDClassUnitXvalEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  row StockTakeVc StockTakerw;
  record StockTakeVc StockTaker;
  Boolean res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,StockTaker);
    MatRowGet(StockTaker,rownr,StockTakerw);
    StockTakerw.Qty = CalculateSerialNrQuantity(StockTakerw.ArtCode,"","",false,StockTakerw.UnitXval,StockTakerw.UnitYval,StockTakerw.UnitZval,StockTakerw.Qty);
    MatRowPut(StockTaker,rownr,StockTakerw);
    PutWindowRecord(wn,StockTaker);    
  end;
  StockTakeDClassUnitXvalEFAfter = res;
  return;
end;

function Boolean StockTakeRowDClassUnitYvalEFAfter(Integer wn,Integer changed)
begin
  record RcVc RepSpec;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,RepSpec);
    RepSpec.long2 = CalculateSerialNrQuantity(RepSpec.f1,"","",false,RepSpec.vals1,RepSpec.vals2,RepSpec.vals3,RepSpec.long2);
    PutWindowRecord(wn,RepSpec);    
  end;
  StockTakeRowDClassUnitYvalEFAfter = res;
  return;
end;

function Boolean StockTakeDClassUnitYvalEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  row StockTakeVc StockTakerw;
  record StockTakeVc StockTaker;
  Boolean res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,StockTaker);
    MatRowGet(StockTaker,rownr,StockTakerw);
    StockTakerw.Qty = CalculateSerialNrQuantity(StockTakerw.ArtCode,"","",false,StockTakerw.UnitXval,StockTakerw.UnitYval,StockTakerw.UnitZval,StockTakerw.Qty);
    MatRowPut(StockTaker,rownr,StockTakerw);
    PutWindowRecord(wn,StockTaker);    
  end;
  StockTakeDClassUnitYvalEFAfter = res;
  return;
end;

function Boolean StockTakeRowDClassUnitZvalEFAfter(Integer wn,Integer changed)
begin
  record RcVc RepSpec;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,RepSpec);
    RepSpec.long2 = CalculateSerialNrQuantity(RepSpec.f1,"","",false,RepSpec.vals1,RepSpec.vals2,RepSpec.vals3,RepSpec.long2);    
    PutWindowRecord(wn,RepSpec);    
  end;
  StockTakeRowDClassUnitZvalEFAfter = res;
  return;
end;

function Boolean StockTakeDClassUnitZvalEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  row StockTakeVc StockTakerw;
  record StockTakeVc StockTaker;
  Boolean res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,StockTaker);
    MatRowGet(StockTaker,rownr,StockTakerw);
    StockTakerw.Qty = CalculateSerialNrQuantity(StockTakerw.ArtCode,"","",false,StockTakerw.UnitXval,StockTakerw.UnitYval,StockTakerw.UnitZval,StockTakerw.Qty);    
    MatRowPut(StockTaker,rownr,StockTakerw);
    PutWindowRecord(wn,StockTaker);    
  end;
  StockTakeDClassUnitZvalEFAfter = res;
  return;
end;

function Boolean StockTakeDClassTransDateEFAfter(Integer wn,Boolean changedf)
begin
  record StockTakeVc StockTaker;
  Boolean res;
  string 255 inwarn;
  
  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,StockTaker);
    WarnFutureDate(true,StockTaker.TransDate);
    PutWindowRecord(wn,StockTaker);    
  end;
  StockTakeDClassTransDateEFAfter = res;
  return;
end;

function Boolean StockTakeRowDClassSerialNrEFAfter(Integer wn,Integer changed)
begin
  record StockTakeVc StockTaker;
  record RcVc RepSpec;
  Boolean res;
  string 255 inwarn;
  Integer mwn;
  
  res = true;
  if (changed!=0) then begin
    mwn = MotherWindow(wn);
    GetWindowRecord(mwn,StockTaker);
    GetWindowRecord(wn,RepSpec);
    StockTakeVc_PasteSerialNr_iPhone(StockTaker,RepSpec,inwarn);
    if (nonblank(inwarn)) then begin
      MessageBox(0,inwarn);
    end;
    PutWindowRecord(wn,RepSpec);    
  end;
  StockTakeRowDClassSerialNrEFAfter = res;
  return;
end;

function Boolean StockTakeDClassSerialNrEFAfter(Integer wn,Integer rownr,Integer changed)
begin
  record StockTakeVc StockTaker;
  Boolean res;
  string 255 inwarn;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,StockTaker);
    StockTakeVc_PasteSerialNr(StockTaker,rownr,inwarn);
    if (nonblank(inwarn)) then begin
      MessageBox(0,inwarn);
    end;
    PutWindowRecord(wn,StockTaker);    
  end;
  StockTakeDClassSerialNrEFAfter = res;
  return;
end;

function Boolean StockTakeRowDClassArtCodeEFAfter(Integer wn,Integer changed)
begin
  record StockTakeVc StockTaker;
  record RcVc RepSpec;
  Boolean res;
  string 255 inwarn;
  Integer mwn;
  LongInt rows;
  
  res = true;
  if (changed!=0) then begin
    mwn = MotherWindow(wn);
    GetWindowRecord(mwn,StockTaker);
    GetWindowRecord(wn,RepSpec);
    if (StockTakeVc_PasteArtCode_iPhone(StockTaker,RepSpec,changed,inwarn)) then begin
      if (nonblank(inwarn)) then begin
        MessageBox(0,inwarn);
      end;
      PutWindowRecord(wn,RepSpec);    
      rows = MatRowCnt(StockTaker);
      if (StockTakeDClassSwitchRow(wn,rows)) then begin end;    
    end else begin
      Beep;
    end;
  end;
  StockTakeRowDClassArtCodeEFAfter = res;
  return;
end;

function Boolean StockTakeDClassArtCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  row StockTakeVc StockTakerw;
  record StockTakeVc StockTaker;
  Boolean res;
  string 255 inwarn;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,StockTaker);
    if (StockTakeVc_PasteArtCode(StockTaker,rownr,changed,inwarn)) then begin
      if (nonblank(inwarn)) then begin
        MessageBox(0,inwarn);
      end;
      PutWindowRecord(wn,StockTaker);    
      if (StockTakeDClassSwitchRow(wn,rownr)) then begin end;    
    end else begin
      Beep;
    end;
  end;
  StockTakeDClassArtCodeEFAfter = res;
  return;
end;

function Boolean StockTakeDClassFIFOEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  row StockTakeVc StockTakerw;
  record StockTakeVc StockTaker;
  Boolean res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,StockTaker);
    MatRowGet(StockTaker,rownr,StockTakerw);
    StockTakerw.FIFORowVal = StockTakerw.Qty*StockTakerw.FIFO;
    StockTakerw.FIFORowVal = Round(StockTakerw.FIFORowVal,SetRoundModeD(5));
    if (StockTakerw.FIFORowVal==0) then begin
      StockTakerw.FIFORowVal = blankval;
    end;
    MatRowPut(StockTaker,rownr,StockTakerw);
    PutWindowRecord(wn,StockTaker);    
  end;
  StockTakeDClassFIFOEFAfter = res;
  return;
end;

function Boolean StockTakeDClassFIFORowValEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  row StockTakeVc StockTakerw;
  record StockTakeVc StockTaker;
  Boolean res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,StockTaker);
    MatRowGet(StockTaker,rownr,StockTakerw);
    StockTakerw.FIFO = StockTakerw.FIFORowVal/StockTakerw.Qty;
    StockTakerw.FIFO = Round(StockTakerw.FIFO,SetRoundModeD(5));
    MatRowPut(StockTaker,rownr,StockTakerw);
    PutWindowRecord(wn,StockTaker);    
  end;
  StockTakeDClassFIFORowValEFAfter = res;
  return;
end;

global
function Boolean StockTakeRowDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "SerialNr": res = StockTakeRowDClassSerialNrEFAfter(wn,changed);
    case "UnitZval": res = StockTakeRowDClassUnitZvalEFAfter(wn,changed);
    case "UnitYval": res = StockTakeRowDClassUnitYvalEFAfter(wn,changed);
    case "UnitXval": res = StockTakeRowDClassUnitXvalEFAfter(wn,changed);
    case "ArtCode": res = StockTakeRowDClassArtCodeEFAfter(wn,changed);
//TODO    case "FIFO": res = StockTakeRowDClassFIFOEFAfter(wn,changed);
//TODO    case "FIFORowVal": res = StockTakeRowDClassFIFORowValEFAfter(wn,changed);
  end;
  StockTakeRowDClassAfterEditField = res;
  return;
end;

global
function Boolean StockTakeDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "TransDate": res = StockTakeDClassTransDateEFAfter(wn,changed!=0);
    case "SerialNr": res = StockTakeDClassSerialNrEFAfter(wn,rownr,changed);
    case "UnitZval": res = StockTakeDClassUnitZvalEFAfter(wn,fn,rownr,changed);
    case "UnitYval": res = StockTakeDClassUnitYvalEFAfter(wn,fn,rownr,changed);
    case "UnitXval": res = StockTakeDClassUnitXvalEFAfter(wn,fn,rownr,changed);
    case "ArtCode": res = StockTakeDClassArtCodeEFAfter(wn,fn,rownr,changed);
    case "FIFO": res = StockTakeDClassFIFOEFAfter(wn,fn,rownr,changed);
    case "FIFORowVal": res = StockTakeDClassFIFORowValEFAfter(wn,fn,rownr,changed);
  end;
  StockTakeDClassAfterEditField = res;
  return;
end;

global
function Boolean StockTakeRowDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record StockTakeVc STr;
  string 200 tstr;
  Integer mwn;

  mwn = MotherWindow(wn);
  res = true;
  switch (wnst) begin
    case Rs_update:      
      GetPrevWindowRecord(mwn,STr);
    otherwise
      GetWindowRecord(mwn,STr);
  end;
  if (STr.OKFlag!=0) then begin
    res = false;
  end;
  switch (fieldname) begin
    case "InStock": res = false;
  end;
  StockTakeRowDClassActiveEditField = res;
  return;
end;

global
function Boolean StockTakeDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record StockTakeVc STr;
  string 200 tstr;
  
  res = true;
  switch (wnst) begin
    case Rs_update:      
      GetPrevWindowRecord(wn,STr);
    otherwise
      GetWindowRecord(wn,STr);
  end;
  if (STr.OKFlag!=0) then begin
    res = false;
  end;
  switch (fieldname) begin
    case "InStock": res = false;
  end;
  StockTakeDClassActiveEditField = res;
  return;
end;

global 
function Boolean StockTakeDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record StockTakeVc StockTaker;
  Boolean res;

  res = true;
  if (WindowState(wn)==2) then begin//Rs_update
    GetPrevWindowRecord(wn,StockTaker);    
    if (StockTaker.OKFlag!=0) then begin res = false; end;
  end;
  StockTakeDClassDeleteRowTest = res;
  return;
end;


global
function Boolean StockTakeRowDClassUpdateTest(Integer wn)
begin
  Boolean res;
  record StockTakeVc StockTaker;
  Integer mwn;
  
  mwn = MotherWindow(wn);
  res = true;
  GetWindowRecord(mwn,StockTaker);
  if (StockTaker.OKFlag!=0) then begin
    res = false;
    if (UserCanAction("UnOKAll",false)) then begin
      res = true;
    end;    
  end;
  StockTakeRowDClassUpdateTest = res;
  return;
end;

global
function Boolean StockTakeDClassUpdateTest(Integer wn)
begin
  Boolean res;
  record StockTakeVc StockTaker;
  
  res = true;
  GetWindowRecord(wn,StockTaker);
  if (StockTaker.OKFlag!=0) then begin
    res = false;
    if (UserCanAction("UnOKAll",false)) then begin
      res = true;
    end;    
  end;
  StockTakeDClassUpdateTest = res;
  return;
end;

global
function string 40 StockTakeRowDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "f4": psname = SerialNrSClassSpecPName(defpsname);
  end;
  StockTakeRowDClassSpecPasteName = psname;
  return;
end;

global
function string 40 StockTakeDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "SerialNr": psname = SerialNrSClassSpecPName(defpsname);
  end;
  StockTakeDClassSpecPasteName = psname;
  return;
end;

global
function Boolean StockTakeRowDClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
begin
  Boolean res;
  record RcVc RepSpec;
  Integer mwn;
  
  mwn = MotherWindow(wn);
  switch (fieldname) begin  
    case "Qty":     
      GetWindowRecord(wn,RepSpec);      
      if (RepSpec.long2==0) then begin
        if (TestForMATVARINS(mwn)) then begin end;
      end;
  end;
  StockTakeRowDClassBeforeEditField = res;
  return;
end;

global
function Boolean StockTakeDClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
begin
  Boolean res;
  record StockTakeVc StockTaker;
  row StockTakeVc StockTakerw;

  switch (fieldname) begin  
    case "Qty":     
      GetWindowRecord(wn,StockTaker);      
      MatRowGet(StockTaker,rownr,StockTakerw);
      if (StockTakerw.Qty==0) then begin
        if (TestForMATVARINS(wn)) then begin end;
      end;
  end;
  StockTakeDClassBeforeEditField = res;
  return;
end;

global
procedure StockTakeFillFIFODsm()
begin
  Integer wn;
  record StockTakeVc StockTaker;

  wn = CurWindow;
  GetWindowRecord(wn,StockTaker);
  WindowDeactivatefield(wn);
  UpdateStockTakeFIFO(StockTaker,true);
  PutWindowRecord(wn,StockTaker);
  return;
end;

enum begin
  Digitag_STX = 4,
  Digitag_ETX = 5,
  Digitag_ACK = 6,
  Digitag_CR = 13,
  Digitag_NACK = 21,
  Digitag_UPL_STX = 158,
  Digitag_UPL_ETX = 159
end;

/*
not finished
global
procedure StockTakeDigitagDsm()
begin
  Integer wn,err;
  record StockTakeVc StockTaker;
  record LSerialPortDeviceVc LSPDr;
  record LocalMachineBlock LMb;
  string 255 tstr;

  wn = CurWindow;
  BlockLoad(LMb);
  GetWindowRecord(wn,StockTaker);
  WindowDeactivatefield(wn);
  if (FindLocalSerialPortDevice(kSerialPortDeviceClassStockControl,30,LMb.LocalMachineCode,LSPDr)==false) then begin  
    LSPDr.BaudRate = 9600; LSPDr.Parity = -1; LSPDr.ByteSize = 8; LSPDr.StopBits = 0; LSPDr.FlowControl = kFlowControlNone;
  end;  
  err = OpenComPort(0,LSPDr.Port,LSPDr.BaudRate,LSPDr.Parity,LSPDr.ByteSize,LSPDr.StopBits,LSPDr.FlowControl);
  if (err==0) then begin
    err = OutComPort(0,Digitag_STX);  
    tstr = ReadComPort(0,1);
    if (asc(tstr)!=Digitag_ACK) then begin
    end;
    err = OutComPort(0,Digitag_UPL_STX);  
    if (asc(tstr)!=Digitag_ACK) then begin
    end;

    err = OutComPort(0,Digitag_UPL_ETX);  
    err = OutComPort(0,Digitag_ETX);  
  end;
  err = CloseComPort(0);
  PutWindowRecord(wn,StockTaker);
  return;
end;

*/

global
procedure StockTakeRowDClassBarcodeData(Integer wn,string bcdata)
begin
  record RcVc RepSpec;
  record INVc INr;
  record StockTakeVc STr;
  row StockTakeVc STrw;
  LongInt i,rows;
  string 255 inwarn;
  record SVOSerVc SVOSerr;
  string 255 sernr;
  Integer mwn;
    
  if (GetFirstItem(bcdata,INr)==true) then begin
    goto LStockTakeRowDClassBarcodeDataDo;
  end;
  
  if (GetSVOSerialItem("",bcdata,SVOSerr)) then begin
    if (GetFirstItem(SVOSerr.ItemCode,INr)==true) then begin
      sernr = SVOSerr.SerialNr;
      goto LStockTakeRowDClassBarcodeDataDo;
    end;
  end;
  
  goto LStockTakeRowDClassBarcodeDataOut;
  
LStockTakeRowDClassBarcodeDataDo:;
  GetWindowRecord(wn,RepSpec);
  
  if (sernr=="") then begin
    if (RepSpec.f1==INr.Code) then begin
      RepSpec.long2 = RepSpec.long2 + 1;
      PutWindowRecord(wn,RepSpec);
      goto LStockTakeRowDClassBarcodeDataOut;
    end;
  end;

  mwn = MotherWindow(wn);
  StockTakeRowDClassOnOKWindow(wn);
  GetWindowRecord(mwn,STr);
  rows = MatRowCnt(STr);
  CloseWindow(wn);

  if (sernr=="") then begin
    for (i = 0; i<rows; i = i + 1) begin
      MatRowGet(STr,i,STrw);
      if (STrw.ArtCode==INr.Code) then begin
        STrw.Qty = STrw.Qty + 1;
        MatRowPut(STr,i,STrw);
        PutWindowRecord(mwn,STr);
        StockTakeDClassEditRow(mwn,i);
        goto LStockTakeRowDClassBarcodeDataOut;
      end;
    end;
  end;
  
  ClearRow(STr,STrw,1);
  STrw.ArtCode = INr.Code;
  STrw.SerialNr = sernr;
  STrw.Qty = 1;
  MatRowPut(STr,rows,STrw);
  
  if (StockTakeVc_PasteArtCode(STr,rows,1,inwarn)) then begin
    if (nonblank(inwarn)) then begin
      MessageBox(0,inwarn);
    end;
    
    MatRowGet(STr,rows,STrw);
    
    PutWindowRecord(mwn,STr);
    if (StockTakeDClassSwitchRow(mwn,rows)) then begin end;
    
    //MatRowGet(STr,rows,STrw);
    //STrw.Qty = 1;
    //MatRowPut(STr,rows,STrw);
    //PutWindowRecord(wn,STr);
  end else begin
    PutWindowRecord(mwn,STr);
    Beep;
  end;
  StockTakeDClassEditRow(mwn,i);

LStockTakeRowDClassBarcodeDataOut:;
  return;
end;

global
procedure StockTakeDClassBarcodeData(Integer wn,string bcdata)
begin
  record INVc INr;
  record StockTakeVc STr;
  row StockTakeVc STrw;
  LongInt i,rows;
  string 255 inwarn;
  record SVOSerVc SVOSerr;
  string 255 sernr;
  
  if (GetFirstItem(bcdata,INr)==true) then begin
    goto LStockTakeDClassBarcodeDataDo;
  end;
  
  if (GetSVOSerialItem("",bcdata,SVOSerr)) then begin
    if (GetFirstItem(SVOSerr.ItemCode,INr)==true) then begin
      sernr = SVOSerr.SerialNr;
      goto LStockTakeDClassBarcodeDataDo;
    end;
  end;
  
  goto LStockTakeDClassBarcodeDataOut;
  
LStockTakeDClassBarcodeDataDo:;
  GetWindowRecord(wn,STr);
  rows = MatRowCnt(STr);
  
  if (sernr=="") then begin
    for (i = 0; i<rows; i = i + 1) begin
      MatRowGet(STr,i,STrw);
      if (STrw.ArtCode==INr.Code) then begin
        STrw.Qty = STrw.Qty + 1;
        MatRowPut(STr,i,STrw);
        PutWindowRecord(wn,STr);
        StockTakeDClassEditRow(wn,i);
        goto LStockTakeDClassBarcodeDataOut;
      end;
    end;
  end;
  
  ClearRow(STr,STrw,1);
  STrw.ArtCode = INr.Code;
  STrw.SerialNr = sernr;
  STrw.Qty = 1;
  MatRowPut(STr,rows,STrw);
  
  if (StockTakeVc_PasteArtCode(STr,rows,1,inwarn)) then begin
    if (nonblank(inwarn)) then begin
      MessageBox(0,inwarn);
    end;
    
    MatRowGet(STr,rows,STrw);
    
    PutWindowRecord(wn,STr);
    if (StockTakeDClassSwitchRow(wn,rows)) then begin end;
    
    //MatRowGet(STr,rows,STrw);
    //STrw.Qty = 1;
    //MatRowPut(STr,rows,STrw);
    //PutWindowRecord(wn,STr);
  end else begin
    PutWindowRecord(wn,STr);
    Beep;
  end;

  StockTakeDClassEditRow(wn,rows);
  
LStockTakeDClassBarcodeDataOut:;
  return;
end;

global
function Boolean StockTakeDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record StockTakeVc StockTaker;
 
  res = true;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,StockTaker);
    if (StockTaker.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
    end;
  end;  
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,StockTaker);
    if (StockTaker.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  StockTakeDClassOKFlagButtonAction = res;
  return;
end;

global
procedure StockTakeRowDClassTrash()
begin
  record RcVc RepSpec;
  record StockTakeVc StockTaker;
  integer wn;
  integer mwn;
  integer rwn;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  
  GetWindowRecord(wn,RepSpec);
  GetWindowRecord(mwn,StockTaker);
  
  rwn = RepSpec.long1;
  
  MatRowDelete(StockTaker,rwn);
  
  PutWindowRecord(mwn,StockTaker);
  
  CloseWindow(wn);
end;


global
function Boolean StockTakeRowDClassOnClose(Integer wn,Integer wn2)
begin
  DeselectWindow(wn,false);
  StockTakeRowDClassOnOKWindow(wn);
  StockTakeRowDClassOnClose = false;
  return;
end;

