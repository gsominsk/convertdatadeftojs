remote procedure JobSumup(var record JobVc);
remote updating function LongInt CreateJobFromResAv(record ResAvVc,Boolean,LongInt,var record JobVc);
external procedure ElectronicLockingSystemCheckout(record RcVc);
external procedure ElectronicLockingSystemEncodeCard(record RcVc,Integer,LongInt);
remote updating function LongInt GroupAddSubJobRemote(record JobVc,array record JobVc,Integer,var LongInt);
remote updating function LongInt AssignGroupJobRemote(record RcVc,array record JobVc,Integer,var LongInt);
remote updating function LongInt GroupMoveSubJobRemote(record RcVc,array record JobVc,Integer,var LongInt);
remote procedure GroupCreateSubJobRemote(record JobVc,var record JobVc);
remote procedure GroupDuplicateSubJobRemote(record JobVc,string,var record JobVc);
remote updating function Integer GroupChargeJobRemote(var record JobVc,Boolean);
remote updating function Integer ChargeJobRemote(var record JobVc,Boolean);
remote function Boolean IsJobChargeAllowed(record JobVc);
remote updating function Integer GroupJobCheckInsmRemote(var record JobVc,string,var string,var string);
remote updating function Integer GroupJobCheckOutsmRemote(var record JobVc,string,var string,var Boolean,var string);
remote procedure SplitResRemote(record JobVc,var record JobVc);
remote updating function Integer JobCheckOutsmRemote(var record JobVc,string,var string,var Boolean,var string);
remote updating function Integer JobCheckInsmRemote2(var record JobVc,string,var string,var string,var string,var Integer);
external function Integer CountObjects(string);
external procedure GetCustAndBasket(string,var string,var LongInt);
remote procedure BuildFolioLists(record JobVc,var record RcVc);
remote updating procedure UpdateJobPrices(record JobVc,record JobVc,Boolean);
external function string 20 FindJobCustomerCode(record JobVc);
external function string 60 FindJobCustomerName(record JobVc);
remote updating function Integer JobShopBask1VClassSaveRemote(record SoftFVc,var string,var Integer);
external procedure CalcSum(val,val,val,val,var val,Integer);
remote procedure GetJobShopBaskPrices(string,string,string,val,var string,var val,var val,var val);
external function LongInt DateDiff(Date,Date);
external function Time TimeDiff(Time,Time);
external updating procedure RecordActionJob_Print(var record JobVc,string,Boolean);
external procedure IPPastePayMode(var record IPVc);
external function Boolean GetItemPriceDiscount2(string,record INVc,val,string,string,string,string,string,var val,
                  var string,var val,var val,Integer,var Boolean,Date);
external Function Boolean IsSpecialAccount(String);
external procedure GuestHistRn(record RcVc);
external updating procedure TelCallsJobLoop(LongInt,LongInt);
external procedure ListCheckinMessRn(record RcVc);
external procedure GetINObjects(string,var string);
external function Boolean CheckedAllowedStatus(string,string);
remote updating function boolean SetupJobDownPayInv(var record IVVc,record JobVc,string,boolean);
remote procedure SetupDownPayReceipt(var Record IPVc,LongInt,Val,String);
remote updating procedure GenResInvMn(var Record RcVc);
remote function LongInt JobVcCheckIfSaveAllowed(var record JobVc,record JobVc,LongInt,LongInt);
remote procedure GroupCreateSubJobsRemote(record JobVc,var record ResAvVc);

enum begin
  kChangeCheckInDate = 0,
  kChangeCheckOutDate = 1,
  kOffsetCheckInDate = 2,
  kOffsetCheckOutDate = 3
end;

updating procedure ChargeJob(Boolean fullstay)
begin
  record JobVc Jobr;
  Integer wn,res;
  
  if (UserCanAction("JobChargeStay",true)==false) then begin
    goto LChargeJobsm;
  end;
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,Jobr);
  res = ChargeJobRemote(Jobr,fullstay);
  if (res==0) then begin
    CloseWindow(wn);
    wn = OpenWindow("JobDClass",1,0,"","",Jobr);
//    ReRunWindowDef(wn);//this doesnt reload record
    UpdateBrowses("JobVc");
  end else begin
    MessageBox(res,"");
  end;
LChargeJobsm:;     
  return;
end;

global 
updating procedure ChargeJobsm()
begin
  ChargeJob(false);
  return;
end;

global 
updating procedure ChargeFullStayJobsm()
begin
  ChargeJob(true);
  return;
end;

global
updating procedure JobCheckOutsm()
begin  
  Integer err;
  Boolean hasopen;
  string 255 chklist,errstr;
  Integer wn;
  record RcVc RepSpec;
  String 20 fldnam;
  record JobVc Jobr;
  row JobVc Jobrw;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,Jobr); 
  fldnam = WindowActiveField(wn);
  
  // are u allowed
  if (UserCanAction("JobCheckOut",true)==false) then begin
    goto LJobCheckOutsm;
  end;
  // is the checkout status allowed from here
  err = JobCheckOutsmRemote(Jobr,fldnam,chklist,hasopen,errstr);
  if (err==0) then begin
    CloseWindow(wn);
    wn = OpenWindow("JobDClass",1,0,"","",Jobr);
    UpdateBrowses("JobVc");
    if (hasopen) then begin
      MessageBox(2044,"");
    end;
    if nonblank(chklist) then begin
      RepSpec.long1 = Jobr.SerNr;
      RepSpec.f1 = FindJobCustomerCode(Jobr);
      RepSpec.f2 = chklist;
      RepSpec.f3 = Jobr.ResCode;
      if (MatRowCnt(Jobr)>0) then begin
        MatRowGet(Jobr,0,Jobrw);
        RepSpec.f6 = Jobrw.GuestCode;
      end;
      RepSpec.Media = mtScreen;
      RepSpec.repname = "ListCheckinMessRn";
      RunReport(RepSpec,0);
    end;  
  end else begin
    MessageBox(err,errstr);
  end;
LJobCheckOutsm:;  
  return;
end; 

global
updating procedure JobCheckInsm()
begin  
  record JobVc Jobr;
  string 255 errstr,fldnam,chklist;
  Integer err;
  Integer wn;
  record RcVc RepSpec;
  string 255 thefield;
  Integer therow;
  

  if (UserCanAction("JobCheckIn",true)==false) then begin
    goto LJobCheckInsm;
  end;
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,Jobr);
  fldnam = WindowActiveField(wn);
  
  err = JobCheckInsmRemote2(Jobr,fldnam,chklist,errstr,thefield,therow);
  if (err==0) then begin
    CloseWindow(wn);
    wn = OpenWindow("JobDClass",1,0,"","",Jobr);
//    PutWindowPrevRecord(wn,Jobr);
//    PutWindowRecord(wn,Jobr);

    UpdateBrowses("JobVc");
    if nonblank(chklist) then begin
      RepSpec.repname = "ListCheckinMessRn";
      RepSpec.long1 = Jobr.SerNr;
      RepSpec.f1 = FindJobCustomerCode(Jobr);
      RepSpec.f2 = chklist;
      RepSpec.f3 = Jobr.ResCode;
      RepSpec.Media = mtScreen;    
      RunReport(RepSpec,0);
    end;
  end else begin
    MessageBox(err,errstr);
    WindowFieldGoto(wn,Jobr,therow,thefield,true);
  end;
LJobCheckInsm:;  
  return;
end;

/*
not used
global 
updating 
function LongInt DoGenDownsm()
begin
  record IVVc IVr;
  Record IPVc IPr;
  Integer nwn,wn;
  Record RcVc RepSpec;
  val monto;

  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  if (RepSpec.ArtMode==1) then begin
    if SetupJobDownPayInv(IVr,RepSpec.long1,RepSpec.vals0,RepSpec.f1,false) then begin
      nwn = OpenWindow("IVDClass",1,0,"","",IVr);
    end else begin
      Beep;
    end;
  end else begin
    SetupDownPayReceipt(IPr,RepSpec.long1,RepSpec.vals0,RepSpec.f1);
    nwn = OpenWindow("IPDClass",1,0,"","",IPr);
  end;
  return;
end;
*/

global 
updating procedure DownpaymentJobDsm()
begin
  record RcVc RepSpec;
  record IVVc IVr;
  record JobVc Jobr;
  row JobVc Jobrw;
  LongInt wn,nwn;
  string 30 fldnam,CustCode;
  Integer rown;
  
  if (UserCanAction("JobGenPrepayment",true)==false) then begin
    goto LGenDownsm;
  end;
  
  wn = CurWindow;
  rown   = WindowActiveRow(wn);
  fldnam = WindowActiveField(wn);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,Jobr);
   
  switch (fldnam) begin
    case "CUCode":
      CustCode = FindJobCustomerCode(Jobr);
    case "Source":
      CustCode = Jobr.Source;
    otherwise
      CustCode = FindJobCustomerCode(Jobr);
  end;  
  RepSpec.ArtMode = 0;
  RepSpec.long1   = Jobr.SerNr; 
  RepSpec.f1      = CustCode;
  RepSpec.repname = "";

/*
  nwn = OpenWindow("GenDownVClass",1,0,"","",RepSpec); 
  DeselectWindow(nwn,false);  
  PutWindowRecord(nwn,RepSpec); 
*/
  if (SetupJobDownPayInv(IVr,Jobr,RepSpec.f1,false)) then begin
    nwn = OpenWindow("IVDClass",1,0,"","",IVr);
  end else begin
    Beep;
  end;
LGenDownsm:;     
  return;
end;

global 
updating procedure GenDownsm()
begin
  DownpaymentJobDsm;
  return;
end;

global
procedure JobActsm()
BEGIN
  record JobVc Jobr;
  row JobVc Jobrw;
  record RcVc RepSpec;
  Integer wn,rown;
  String 30 Huesped,fldnam;

  wn = CurWindow;
  rown   = WindowActiveRow(wn);
  fldnam = WindowActiveField(wn);
  GetWindowRecord(wn,Jobr);  
  if ((fldnam=="GuestCode") and (rown!=-1)) then begin
    matrowget(Jobr,rown,Jobrw);
    Huesped = Jobrw.GuestCode;
  end;
  RepSpec.repname = "JobActRn";
  RepSpec.long1   = Jobr.SerNr;  //LO40
  RepSpec.f1      = Huesped;
  RepSpec.sStartDate = Jobr.TransDate;
  RepSpec.sEndDate = Jobr.EndDate;
  RepSpec.Media   = mtScreen; 
  RunReport(RepSpec,0);
  RETURN;
END;

global
procedure SplitRessm()
begin
  Integer wn,nwn;
  Record JobVc Jobr,nJobr;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin   //normalmode not in edit mode
    GetWindowRecord(wn,Jobr);
    DeselectWindow(wn,false);
    SplitResRemote(Jobr,nJobr);
    nwn = OpenWindow("JobDClass",1,0,"","",nJobr);
  end;  
  return;
end;

// Not used...
/*
global
function Boolean JobShopBaskVClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  record RcVc R1;
  Boolean res;
  string 200 comment;
  val tsum,disc,price;

  switch (fieldname) begin
    case "f1":
      GetWindowRecord(wn,R1);
      GetJobShopBaskPrices(R1.f3,R1.f1,1,comment,tsum,disc,price);//it is price
      R1.f2 = comment;
      R1.vals2 = disc;
      R1.vals1 = tsum;
      PutWindowRecord(wn,R1);
    case "vals0":
      GetWindowRecord(wn,R1);
      GetJobShopBaskPrices(R1.f3,R1.f1,1,comment,tsum,disc,price);//it is price
      R1.f2 = comment;
      R1.vals2 = disc;
      R1.vals1 = tsum;
      PutWindowRecord(wn,R1);    
    case "f3":
      GetWindowRecord(wn,R1);
      GetJobShopBaskPrices(R1.f3,R1.f1,1,comment,tsum,disc,price);//it is price
      R1.f2 = comment;
      R1.vals2 = disc;
      R1.vals1 = tsum;
      PutWindowRecord(wn,R1);
  end;
  JobShopBaskVClassAfterEditField = res;
  RETURN;
END;
*/
global
function Boolean GenResInvVClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  record RcVc RepSpec;
  Boolean res,testf;
  record JobVc Jobr;
  row JobVc Jobrw;
  Integer i,rwcnt;

  switch (fieldname) begin
    case "f1":
      GetWindowRecord(wn,RepSpec);
      Jobr.SerNr = RepSpec.long1;
      if (ReadFirstMain(Jobr,1,true)) then begin
        testf = true;
        if (Jobr.CUCode==RepSpec.f1) then begin
          RepSpec.f3 = Jobr.CUName;
          PutWindowRecord(wn,RepSpec);
          testf = false;
        end;
        if (Jobr.Source==RepSpec.f1) then begin
          RepSpec.f3 = Jobr.SourceName;
          PutWindowRecord(wn,RepSpec);
          testf = false;
        end;
        if (testf) then begin
          rwcnt = MatRowCnt(Jobr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(Jobr,i,Jobrw);
            if (Jobrw.CUCode==RepSpec.f1) then begin
              RepSpec.f3 = Jobrw.CUName;
              i = rwcnt;
              PutWindowRecord(wn,RepSpec);
            end;
          end;
        end;
      end;
  end;
  GenResInvVClassAfterEditField = res;
  return;
end;

global
procedure JobAddItemsm()
begin
  record JobVc Jobr;
  Integer wn,nwn;
  Boolean res;
  record SoftFVc SoftFr;
  record RcVc RepSpec;
  
  if (UserCanAction("JobAddItem",true)==false) then begin
    goto LJobAddItemsm;
  end;
  wn = CurWindow;
  GetWindowRecord(wn,Jobr);
  if (IsJobChargeAllowed(Jobr)==false) then begin
    Beep;
    goto LJobAddItemsm;
  end;
  nwn = OpenWindow("JobShopBask1VClass",1,0,"","",SoftFr);
  DeselectWindow(nwn,false);
  SoftFr.SerNr = Jobr.SerNr;
  SoftFr.CustCode    = FindJobCustomerCode(Jobr);
  SoftFr.Objects    = Jobr.Objects;
  SoftFr.PriceList = Jobr.PriceList;
  SoftFr.CurncyCode = Jobr.CurncyCode;
  SoftFr.FrRate = Jobr.FrRate;
  SoftFr.ToRateB1 = Jobr.ToRateB1;
  SoftFr.ToRateB2 = Jobr.ToRateB2;
  SoftFr.BaseRate1 = Jobr.BaseRate1;
  SoftFr.BaseRate2 = Jobr.BaseRate2;
  SoftFr.InclVAT = Jobr.InclVAT;
  PutWindowRecord(nwn,SoftFr);
  WindowFieldGoto(nwn,SoftFr,0,"ArtCode",true);

LJobAddItemsm:;  
  return;
end;

global
procedure GuestHistsm()
begin
  record RcVc RepSpec;
  Integer wn;
  Integer rown;
  record JobVc Jobr;
  Row JobVc Jobrw;
  
  wn = CurWindow;
  rown = WindowActiveRow(wn);
  GetWindowRecord(wn,Jobr);
  if (rown==-1) then begin
    if (MatRowCnt(Jobr)>0) then begin
      rown = 0;
    end;
  end;
  if (rown!=-1) then begin
    MatRowGet(Jobr,rown,Jobrw);
    RepSpec.repname = "GuestHistRn";
    RepSpec.f1 = Jobrw.GuestCode;
    RepSpec.Media = mtScreen;    
    RunReport(RepSpec,0);
  end;
  return;
end;

global
procedure JobCallssm()
begin
  Record RcVc RepSpec;
  Integer wn;
  record JobVc Jobr;

  wn = CurWindow;
  GetWindowRecord(wn,Jobr);
  ReportDefaults(RepSpec,"CallHisRClass");
  RepSpec.repname = "CallHisRn";
  RepSpec.f3 = Jobr.SerNr;  
  RepSpec.Media = mtScreen; 
  RunReport(RepSpec,0);
  return;
end;

global
procedure JobShowAccountsm()
begin
  record RcVc RepSpec;
  Integer wn,rown;
  Record JobVc Jobr;
  Row JobVc Jobrw;
  String 100 CustCode,fldnam;
  string 60 cucode;

  if (UserCanAction("JobShowAccount",true)==false) then begin
    goto LJobShowAccountsm;
  end;
  wn     = CurWindow;
  rown   = WindowActiveRow(wn);
  fldnam = WindowActiveField(wn);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,Jobr);
 
 cucode = FindJobCustomerCode(Jobr);

  if (rown!=-1) then begin
    switch (fldnam) begin
      case "CUCode":
        matrowget(Jobr,rown,Jobrw);
        if nonblank(Jobrw.CUCode) then begin
          CustCode = Jobrw.CUCode;
        end;
      case "GuestCode":
        matrowget(Jobr,rown,Jobrw);
        if nonblank(Jobrw.CUCode) then begin
          CustCode = Jobrw.CUCode;
        end;
    end;
  end;
  if ((fldnam=="CUCode") and (rown==-1) and nonblank(cucode)) then begin
    CustCode = cucode;
  end;
  if ((fldnam=="Source") and nonblank(Jobr.Source)) then begin
    CustCode = Jobr.Source;
  end;

  ReportDefaults(RepSpec,"JobShopBaskRClass");
  RepSpec.repname = "JobShopBaskRn";
  RepSpec.JobDf = 1;
  RepSpec.long1 = Jobr.SerNr;  
  RepSpec.f1    = CustCode;
  RepSpec.flags[0] = 1;
  RepSpec.Media = mtScreen; 
  RunReport(RepSpec,0);
LJobShowAccountsm:;  
  return;
end;

global
procedure GroupJobShowAccountDsm()
begin
  JobShowAccountsm;
  return;
end;

global
procedure JobShowGuestAccountsm()
begin
  record RcVc RepSpec;
  Integer wn;
  record JobVc Jobr;

  if (UserCanAction("JobShowGuestAccount",true)==false) then begin
    goto LJobShowGuestAccountsm;
  end;
  wn = CurWindow;
  GetWindowRecord(wn,Jobr);
  ReportDefaults(RepSpec,"JobShopBaskRClass");
  RepSpec.repname = "JobShopBaskRn";
  RepSpec.JobDf = 1;
  RepSpec.long1 = Jobr.SerNr;  
  RepSpec.flags[0] = 0;
  RepSpec.Media = mtScreen; 
  RunReport(RepSpec,0);
LJobShowGuestAccountsm:;
  return;
end;
      
global
procedure JobLOpenResAvsm()
begin
  Integer wn,nwn;
  record JobVc Jobr;      
  record ResAvVc ResAvr;      

  wn = CurWindow;
  if (GetRecordFromBrowse(Jobr,wn,1)) then begin
    ResAvr.MatherJobNr = Jobr.SerNr;
    if (ReadFirstKey("MatherJobNr",ResAvr,1,true)) then begin
      nwn = OpenWindow("ResAvDClass",1,0,"","",ResAvr);
    end;  
  end;  
  return;
end;

function Boolean JobShopBaskDClassItemCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record INVc INr;
  record ShopBaskVc SBr;

  if (changed!=0) then begin
    GetWindowRecord(wn,SBr);
    INr.Code = SBr.ItemCode;
    if ReadFirstMain(INr,1,true) then begin
      SBr.Comment= INr.Name;
    end;
    PutWindowRecord(wn,SBr);
  end;  
  JobShopBaskDClassItemCodeEFAfter = res;
  Return;
END;

global
function Boolean JobShopBaskDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "ItemCode": res = JobShopBaskDClassItemCodeEFAfter(wn,fn,rownr,changed);
  end;
  JobShopBaskDClassAfterEditField = res;
  RETURN;
END;

global
updating function Boolean JobDClassPrint(Integer wn,Boolean previewf)
BEGIN
  record JobVc Jobr;
  Integer tf;
  string 20 docname;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,Jobr);  
  if ((WindowState(wn)==Rs_normal) and (previewf==false)) then begin
    RecordActionJob_Print(Jobr,"",true);
  end else begin
    if (PrintDocument(Jobr,"JobForm",true)) then begin end;
  end;
  JobDClassPrint = true;
  RETURN;
END;

function Integer CountAccounts(record JobVc Jobr)
begin
  record RcVc RepSpec;
  Integer rwcnt,i,res;
  row JobVc Jobrw;
  
  if (nonblank(Jobr.CUCode)) then begin
    res = 1;
  end else begin
    res = 0;
  end;
  rwcnt = MatRowCnt(Jobr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Jobr,i,Jobrw);
    if (nonblank(Jobrw.CUCode)) then begin
      if (Jobrw.CUCode!=Jobr.CUCode) then begin
        res = res + 1;
      end;
    end;
  end;
  if (res==1) then begin
    BuildFolioLists(Jobr,RepSpec);
    res = res + CountObjects(RepSpec.f3);
    res = res + CountObjects(RepSpec.f4);
    res = res + CountObjects(RepSpec.f5);
    res = res + CountObjects(RepSpec.f6);
  end;
  CountAccounts = res;
  return;
end;

global
updating procedure InvoiceJobDsm()
begin
  record RcVc RepSpec;
  record IVVc IVr;
  record JobVc Jobr;
  Record CUVc CUr;
  record HotelBlock HotelBlockr;
  row JobVc Jobrw;
  Integer wn,nwn,rown;
  string 100 fldnam,CUCode;
  Boolean Cont;
  record CYBlock Info;

  blockload(HotelBlockr);
  Blockload(Info);  
  wn = CurWindow;
  rown = WindowActiveRow(wn);
  fldnam = WindowActiveField(wn);
  GetWindowRecord(wn,Jobr);

  ReportDefaults(RepSpec,"GenResInvVClass");  
  RepSpec.f1 = FindJobCustomerCode(Jobr);
  RepSpec.f3 = FindJobCustomerName(Jobr);
  if ((fldnam=="CUCode") and (rown!=-1)) then begin
    MatRowGet(Jobr,rown,Jobrw);
    if (nonblank(Jobrw.CUCode)) then begin
      RepSpec.f1 = Jobrw.CUCode;
      RepSpec.f3 = Jobrw.CUName;
    end;
  end;
  if (fldnam=="Source") then begin
    if (nonblank(Jobr.Source)) then begin
      RepSpec.f1 = Jobr.Source;
      RepSpec.f3 = Jobr.SourceName;
    end;
  end;
/*  
put it in halcust then for that customer who needs it
  if (Info.CountryCode=="AR") then begin // Argentina Specific
    CUr.Code = RepSpec.f1;
    if readfirstmain(CUr,1,true) then begin
      if (CUr.LangCode=="FACA") then begin
        RepSpec.f3 = "";
      end;
    end;
  end;
*/  
  RepSpec.long1   = Jobr.SerNr; 
  RepSpec.repname = "GenResInvMn";
  if (CountAccounts(Jobr)>1) then begin
    nwn = OpenWindow("GenResInvVClass",1,0,"","",RepSpec);
    DeselectWindow(nwn,false);  
    PutWindowRecord(nwn,RepSpec); 
  end else begin
    RepSpec.flags[29] = 1234;
    GenResInvMn(RepSpec);
    if (RepSpec.long2>0) then begin
      IVr.SerNr = RepSpec.long2;
      if (ReadFirstMain(IVr,1,true)) then begin
        nwn = OpenWindow("IVDClass",1,0,"","",IVr);
      end;
    end else begin
      CUCode = RepSpec.f1;
      RecordNew(RepSpec);
      ReportDefaults(RepSpec,"JobShopBaskRClass");
      RepSpec.repname = "JobShopBaskRn";
      RepSpec.JobDf = 1;
      RepSpec.long1 = Jobr.SerNr;  
      RepSpec.f1    = CUCode;
      RepSpec.flags[0] = 1;
      RepSpec.Media = mtScreen; 
      RunReport(RepSpec,0);
    end;
  end;
  RETURN;
END;

global
procedure OpenFindJobRClass()
begin 
  Integer wn,wn2;
  Record RcVc RepSpec;
  
  wn = OpenWindow("FindJobRClass",1,0,"","",RepSpec);
  DeselectWindow(wn,false);  
  RepSpec.Media = mtScreen;
  RepSpec.critname = "FindJobRClass";
  RepSpec.repname = "FindJobRn";
  RepSpec.flags[0] = 1;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.sStartDate = CurrentDate;
  RepSpec.sEndDate = CurrentDate;
  RepSpec.Period2Str = CurrentDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & CurrentDate;
  PutWindowRecord(wn,RepSpec);
  return; 
end;

global
updating procedure AsigRoomsm()
begin
  record RcVc RepSpec;
  record JobVc Jobr;
  Boolean runrepf;
  Integer wn;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  runrepf = true;
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,Jobr);  
  if (WindowState(wn)!=Rs_normal) then begin
    if (WindowDoOK(wn,0)) then begin
      UpdateBrowses("JobVc");
      runrepf = true;
    end;
  end else begin
    runrepf = true;
  end;
  if (runrepf) then begin
    RepSpec.repname = "AsigRoomsRn";
    RepSpec.long1 = Jobr.SerNr;
    if (blank(Jobr.Type)) then begin
      RepSpec.f3 = LMb.ResLoc;
      RepSpec.f6 = LMb.ResClass;
    end;
    RepSpec.Media = mtScreen;
    RepSpec.UsedOnly = wn;
    RunReport(RepSpec,0);
  end;
  return;
end;

global
updating procedure JopPriceDetailsm()
begin
  record JobVc Jobr;
  record JobVc oldJobr;
  record JobPriceVc JPr;
  Integer wn,nwn;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,Jobr);
    JPr.RecType = 0;
    JPr.SerNr = Jobr.SerNr;
    JPr.RowNr = 0;
    if (ReadFirstMain(JPr,3,true)) then begin
      nwn = OpenWindow("JobPriceDClass",1,0,"","",JPr);
    end else begin
      UpdateJobPrices(Jobr,oldJobr,false);
      JPr.RecType = 0;
      JPr.SerNr = Jobr.SerNr;
      JPr.RowNr = 0;
      if (ReadFirstMain(JPr,3,true)) then begin
        nwn = OpenWindow("JobPriceDClass",1,0,"","",JPr);
      end;
    end;
    PutWindowString(nwn,"MotherJobDClassWn",wn);
  end else begin
    MessageBox(1356,"");
  end;
  return;
end;

global
updating procedure JobPriceReportsm()
begin
  record JobVc Jobr;
  record RcVc RepSpec;
  Integer wn;
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,Jobr);
    RepSpec.long1 = Jobr.SerNr;
    RepSpec.repname = "PriceDetailsRn";
    RepSpec.Media = mtScreen;
    RunReport(RepSpec,0);
  end else begin
    MessageBox(1356,"");
  end;
  return;
end;

global
procedure AvailableRoomsm()
begin
  record RcVc RepSpec;
  Integer wn;
  record JobVc Jobr;

  wn = CurWindow;
  GetWindowRecord(wn,Jobr);
  RepSpec.repname = "AsigRoomsRn";
  RepSpec.long1 = Jobr.SerNr;
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);
  return;
end;

global
procedure AvailableResourceDsm()
BEGIN
  record RcVc RepSpec;
  record JobVc Jobr;
  Integer wn,nwn;
  record LocalMachineBlock LMb;
  record ResTypeVc RTr;
  record ResVc Resr;
  
  wn = CurWindow;
  GetWindowRecord(wn,Jobr);
  if (nonblank(Jobr.Type) or BuildProductCode=="StandardHotel") then begin
    BlockLoad(LMb);
    RepSpec.Notation = 1;
    RepSpec.long2 = 31;
    RepSpec.f1 = Jobr.Type;
    Resr.Code = Jobr.ResCode;
    ReadFirstMain(Resr,1,true);
    RepSpec.f3 = Resr.ResLoc;
    RepSpec.f6 = Resr.Class;

    if (blank(RepSpec.f3)) then begin
      RTr.Code = Jobr.Type;
      ReadFirstMain(RTr,1,true);
      RepSpec.f3 = RTr.ResLoc;
    end;
    if (blank(RepSpec.f3)) then begin
      RepSpec.f3 = LMb.ResLoc;
    end;
    if (blank(RepSpec.f6)) then begin
      RepSpec.f6 = LMb.ResClass;
    end;
    RepSpec.FirstVer = 0;
    RepSpec.Comparison = 0;
    if (nonblankdate(Jobr.TransDate)) then begin
      RepSpec.sStartDate = AddDay(Jobr.TransDate,-1);
    end else begin
      RepSpec.sStartDate = AddDay(CurrentDate,-GetDay(CurrentDate) + 1);
    end;
    RepSpec.d1 = RepSpec.sStartDate;
    RepSpec.sEndDate = AddMonth(RepSpec.sStartDate,1);
    RepSpec.d2 = Jobr.EndDate;
    RepSpec.sStartTime = Jobr.StartTime;
    RepSpec.sEndTime = Jobr.EndTime;
    nwn = OpenWindow("ResMonWClass",1,0,"","",RepSpec);
  end;
  RETURN;
END;

global
procedure RoomingList()
begin
  record JobVc Jobr;
  record RcVc RepSpec;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,Jobr);
  ReportDefaults(RepSpec,"RoomingListRClass");
  RepSpec.repname = "RoomingListRn";
  RepSpec.f1 = Jobr.SerNr;
  RepSpec.Media = mtScreen;    
  RunReport(RepSpec,0);
  return;
end;

global
procedure GroupJobDietRemarksDsm()
begin
  record JobVc Jobr;
  record RcVc RepSpec;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,Jobr);
  RepSpec.repname = "JobDietRemarksRn";
  RepSpec.long1 = Jobr.SerNr;
  RepSpec.Media = mtScreen;    
  RunReport(RepSpec,0);
  return;
end;

global
procedure PrintDocumentResDsm()
begin
  record JobVc Jobr;
  record RcVc RepSpec;
  Integer wn;
  Integer nwn;

  wn = CurWindow;
  GetWindowRecord(wn,Jobr);
  nwn = OpenWindow("JobAllRClass",0,0,"","",RepSpec);
  DeselectWindow(nwn,false);
  RepSpec.Media = mtPrinter;
  RepSpec.repname = "JobForm";
  RepSpec.f1 = Jobr.SerNr;
  PutWindowRecord(nwn,RepSpec);  
  SelectWindow(nwn);
  return;
end;

global 
procedure ChangeJobCustsm()
begin
  Record RcVc RepSpec;
  record JobVc Jobr;
  row JobVc Jobrw;
  LongInt wn,nwn;
  record HotelBlock HotelSetttings;
  string 30 fldnam,CustCode;
  Integer rown;
    
  wn = CurWindow;
  rown   = WindowActiveRow(wn);
  fldnam = WindowActiveField(wn);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,Jobr);
  Blockload(HotelSetttings);
 
  if ((fldnam=="CUCode") and (rown!=-1)) then begin
    matrowget(Jobr,rown,Jobrw);
    CustCode = Jobrw.CUCode;
  end;
  if ((fldnam=="CUCode") and (rown==-1)) then begin
    CustCode = FindJobCustomerCode(Jobr);
  end;
  if (fldnam=="Source") then begin
    CustCode = Jobr.Source;
  end;
  
  RepSpec.ArtMode = 0;
  RepSpec.long1   = Jobr.SerNr; 
  RepSpec.f1      = CustCode;
  RepSpec.repname = "ChangeJobCustMn";
  
  nwn = OpenWindow("ChangeJobCustVClass",1,0,"","",RepSpec); 
  DeselectWindow(nwn,false);  
  PutWindowRecord(nwn,RepSpec); 
   
  return;
end;

global
procedure ChangeCustJobsm()
begin
  record RcVc RepSpec;
  Integer wn;
  record JobVc Jobr;

  if (UserCanAction("JobShowGuestAccount",true)==false) then begin
    goto LChangeCustJobsm;
  end;
  wn = CurWindow;
  GetWindowRecord(wn,Jobr);
  BuildFolioLists(Jobr,RepSpec);
  RepSpec.repname = "ChangeCustJobRn";
  RepSpec.long1 = Jobr.SerNr;  
  RepSpec.flags[0] = 0;
  RepSpec.Media = mtScreen; 
  RunReport(RepSpec,0);
LChangeCustJobsm:;
  return;
end;

/*
global
updating function Boolean GenResInvVClassOnOKWindow(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  GetWindowRecord(wn,RepSpec);
  GenResInvMn(RepSpec);
  CloseWindow(wn);
  GenResInvVClassOnOKWindow = false;
  RETURN;
END;
*/

global
function Boolean JobShopBask1VClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  record SoftFVc Softr;
  row SoftFVc Softrw;
  string 20 custcode;
  LongInt baskno;
  Integer i,rwcnt;
  Boolean res;
  string 200 comment;
  val tsum,disc,price;
  record GeneralOptionBlock GenOptRec;

  switch (fieldname) begin
    case "ArtCode":    
      if (changed!=0) then begin
        GetWindowRecord(wn,Softr);
        MatRowGet(Softr,rownr,Softrw);
        GetCustAndBasket(Softr.CustCode,custcode,baskno);
        GetJobShopBaskPrices(custcode,Softr.PriceList,Softrw.ArtCode,Softrw.Quant,comment,tsum,disc,price);//it is price
        Softrw.Spec = comment;
        Softrw.vRebate = disc;
        Softrw.Price = price;
        Softrw.Sum = tsum;
        MatRowPut(Softr,rownr,Softrw);
        PutWindowRecord(wn,Softr);
      end;
    case "Quant":
      if (changed!=0) then begin
        BlockLoad(GenOptRec);

        GetWindowRecord(wn,Softr);
        MatRowGet(Softr,rownr,Softrw);
        CalcSum(Softrw.Quant,Softrw.Price,0,Softrw.vRebate,tsum,GenOptRec.UseDiscount);
        Softrw.Sum = tsum;
        MatRowPut(Softr,rownr,Softrw);
        PutWindowRecord(wn,Softr);
      end;
    case "vRebate":
      if (changed!=0) then begin
        BlockLoad(GenOptRec);

        GetWindowRecord(wn,Softr);
        MatRowGet(Softr,rownr,Softrw);
        CalcSum(Softrw.Quant,Softrw.Price,0,Softrw.vRebate,tsum,GenOptRec.UseDiscount);
        Softrw.Sum = tsum;
        MatRowPut(Softr,rownr,Softrw);
        PutWindowRecord(wn,Softr);
      end;
    case "Price":
      if (changed!=0) then begin
        BlockLoad(GenOptRec);

        GetWindowRecord(wn,Softr);
        MatRowGet(Softr,rownr,Softrw);
        CalcSum(Softrw.Quant,Softrw.Price,0,Softrw.vRebate,tsum,GenOptRec.UseDiscount);
        Softrw.Sum = tsum;
        MatRowPut(Softr,rownr,Softrw);
        PutWindowRecord(wn,Softr);
      end;
    case "CustCode":    
      if (changed!=0) then begin
        GetWindowRecord(wn,Softr);
        rwcnt = MatRowCnt(Softr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(Softr,i,Softrw);
          GetCustAndBasket(Softr.CustCode,custcode,baskno);
          GetJobShopBaskPrices(custcode,Softr.PriceList,Softrw.ArtCode,Softrw.Quant,comment,tsum,disc,price);//it is price
          Softrw.Price = price;
          Softrw.vRebate = disc;
          Softrw.Sum = tsum;
          MatRowPut(Softr,i,Softrw);
        end;
        PutWindowRecord(wn,Softr);
      end;
   
  end;
  JobShopBask1VClassAfterEditField = res;
  RETURN;
END;

global
function Boolean JobShopBask1VClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  Integer insertmode;

  res = true;
  switch (fieldname) begin
    case "Price":
      if (UserCanAction("ChangePrices",true)==false) then begin
        res = false;
      end;
    case "vRebate":
      if (UserCanAction("ChangePrices",true)==false) then begin
        res = false;
      end;
    case "Sum":
      if (UserCanAction("ChangePrices",true)==false) then begin
        res = false;
      end;
  end;  
  JobShopBask1VClassActiveEditField = res;
  RETURN;
END;

global
procedure JobShopBask1VClassCancel()
BEGIN
  CloseWindow(CurWindow);
  RETURN;
END;

global
updating procedure JobShopBask1VClassSave()
BEGIN
  Integer wn;
  record SoftFVc Softr;
  Integer err,rownr;
  string 255 fieldname;
  record JobVc Jobr;
  
  wn = CurWindow;
  DeselectWIndow(wn,true);
  GetWindowRecord(wn,Softr);
  err = JobShopBask1VClassSaveRemote(Softr,fieldname,rownr);
  if (err!=0) then begin
    MessageBox(err,0);
    WindowFieldGoto(wn,Softr,rownr,fieldname,true);
  end else begin
    CloseWindow(wn);
    wn = FindWindow("JobDClass");
    if (wn>0) then begin
      GetWindowRecord(wn,Jobr);
      JobSumup(Jobr);
      PutWindowRecord(wn,Jobr);
      WindowDoOK(wn,0)
      SelectWindow(wn);
    end;
  end;
  RETURN;
END;

global
updating function Boolean JobShopBask1VClassOnOKWindow(Integer wn)
BEGIN
  record SoftFVc Softr;
  Integer err,rownr;
  string 255 fieldname;
  
  DeselectWIndow(wn,true);
  GetWindowRecord(wn,Softr);
  err = JobShopBask1VClassSaveRemote(Softr,fieldname,rownr);
  if (err!=0) then begin
    MessageBox(err,0);
    WindowFieldGoto(wn,Softr,rownr,fieldname,true);
  end else begin
    CloseWindow(wn);
  end;
  JobShopBask1VClassOnOKWindow = false;
  RETURN;
END;

global
updating procedure GroupJobCheckOutDsm()
begin  
  Integer err;
  Boolean hasopen;
  string 255 chklist,errstr;
  Integer wn;
  record RcVc RepSpec;
  String 20 fldnam;
  record JobVc Jobr;
  row JobVc Jobrw;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,Jobr); 
  fldnam = WindowActiveField(wn);
  
  if (UserCanAction("JobCheckOut",true)==false) then begin
    goto LGroupJobCheckOutDsm;
  end;
  err = GroupJobCheckOutsmRemote(Jobr,fldnam,chklist,hasopen,errstr);
  if (err==0) then begin
    CloseWindow(wn);
    wn = OpenWindow("GroupJobDClass",1,0,"","",Jobr);
    UpdateBrowses("JobVc");
    if (hasopen) then begin
      MessageBox(2044,"");
    end;
    if nonblank(chklist) then begin
      RepSpec.long1 = Jobr.SerNr;
      RepSpec.f1 = FindJobCustomerCode(Jobr);
      RepSpec.f2 = chklist;
      RepSpec.f3 = Jobr.ResCode;
      if (MatRowCnt(Jobr)>0) then begin
        MatRowGet(Jobr,0,Jobrw);
        RepSpec.f6 = Jobrw.GuestCode;
      end;
      RepSpec.Media = mtScreen;
      RepSpec.repname = "ListCheckinMessRn";
      RunReport(RepSpec,0);
    end;  
  end else begin
    MessageBox(err,errstr);
  end;
LGroupJobCheckOutDsm:;  
  return;
end; 

global
updating procedure GroupJobCheckInDsm()
begin  
  record JobVc Jobr;
  string 255 errstr,fldnam,chklist;
  Integer err;
  Integer wn;
  record RcVc RepSpec;

  if (UserCanAction("JobCheckIn",true)==false) then begin
    goto LGroupJobCheckInDsm;
  end;
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,Jobr);
  fldnam = WindowActiveField(wn);
  
  err = GroupJobCheckInsmRemote(Jobr,fldnam,chklist,errstr);
  if (err==0) then begin
    CloseWindow(wn);
    wn = OpenWindow("GroupJobDClass",1,0,"","",Jobr);
    UpdateBrowses("JobVc");
    if nonblank(chklist) then begin
      RepSpec.repname = "ListCheckinMessRn";
      RepSpec.long1 = Jobr.SerNr;
      RepSpec.f1 = FindJobCustomerCode(Jobr);
      RepSpec.f2 = chklist;
      RepSpec.f3 = Jobr.ResCode;
      RepSpec.Media = mtScreen;    
      RunReport(RepSpec,0);
    end;
  end else begin
    MessageBox(err,errstr);
  end;
LGroupJobCheckInDsm:;  
  return;
end;

updating procedure GroupChargeJob(Boolean fullstay)
begin
  record JobVc Jobr;
  Integer wn,res;
  
  if (UserCanAction("JobChargeStay",true)==false) then begin
    goto LChargeJobsm;
  end;
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,Jobr);
  res = GroupChargeJobRemote(Jobr,fullstay);
  if (res==0) then begin
//    CloseWindow(wn);
//    wn = OpenWindow("GroupJobDClass",1,0,"","",Jobr);
    UpdateBrowses("JobVc");
  end else begin
    MessageBox(res,"");
  end;
LChargeJobsm:;     
  return;
end;

global 
updating procedure GroupChargeJobsm()
begin
  GroupChargeJob(false);
  return;
end;

global 
updating procedure GroupChargeFullStayJobsm()
begin
  GroupChargeJob(true);
  return;
end;

global
procedure GroupCreateSubJobsm()
begin
  Integer wn,nwn;
  record JobVc Jobr,nJobr;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,Jobr);
    DeselectWindow(wn,false);
    GroupCreateSubJobRemote(Jobr,nJobr);
    nwn = OpenWindow("JobDClass",1,0,"","",nJobr);
  end;  
  return;
end;

global
procedure GroupCreateSubJobssm()
begin
  Integer wn;
  record JobVc Jobr;
  record ResAvVc ResAvr;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,Jobr);
    DeselectWindow(wn,false);
    GroupCreateSubJobsRemote(Jobr,ResAvr);
    OpenWindow("GroupJobSubOClass",1,wn,"","",ResAvr);
  end else begin
    MessageBox(1356,"");
  end;
  return;
end;

function Integer TestGroupJobSubRun(record ResAvVc ResAvr,var string fieldname,var Integer rownr)
begin
  Integer err;
  row ResAvVc ResAvrw;
  Integer i,rwcnt;
  record HotelBlock Hotelb;
  
  fieldname = "";
  rownr = -1;
  BlockLoad(Hotelb);
  if (blankdate(ResAvr.TransDate)) then begin
    err = 1058;
    rownr = -1;
    fieldname = "TransDate";
    goto LTestGroupJobSubRun;
  end;
  if (blankdate(ResAvr.EndDate)) then begin
    err = 1058;
    rownr = -1;
    fieldname = "EndDate";
    goto LTestGroupJobSubRun;
  end;
  if (blankdate(ResAvr.CUCode)) then begin
    err = 1058;
    rownr = -1;
    fieldname = "CUCode";
    goto LTestGroupJobSubRun;
  end;
  if (Hotelb.ForceBookOrigin!=0) then begin
    if (blank(ResAvr.BookOrigin)) then begin
      err = 1058;
      rownr = -1;
      fieldname = "BookOrigin";
      goto LTestGroupJobSubRun;
    end;
  end;
  if (MatRowCnt(ResAvr)==0) then begin
    err = 1058;
    rownr = 0;
    fieldname = "ResType";
    goto LTestGroupJobSubRun;
  end;
  rwcnt = MatRowCnt(ResAvr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ResAvr,i,ResAvrw);
    if (blank(ResAvrw.ResType)) then begin
      err = 1058;
      rownr = i;
      fieldname = "ResType";
      goto LTestGroupJobSubRun;
    end;
    if (blank(ResAvrw.QtyWanted)) then begin
      err = 1058;
      rownr = i;
      fieldname = "QtyWanted";
      goto LTestGroupJobSubRun;
    end;
    if (blank(ResAvrw.Usage)) then begin
      err = 1058;
      rownr = i;
      fieldname = "Usage";
      goto LTestGroupJobSubRun;
    end;
    if (blank(ResAvrw.NoOfGuests)) then begin
      err = 1058;
      rownr = i;
      fieldname = "NoOfGuests";
      goto LTestGroupJobSubRun;
    end;
  end;
LTestGroupJobSubRun:;  
  TestGroupJobSubRun = err;
  return;
end;

updating function Boolean GroupJobSubRun(Integer wn,var record JobVc newGroupJobr)
begin
  Boolean res;
  Integer err,rownr;
  record ResAvVc ResAvr;
  string 255 fieldname;
  LongInt Mother;
  
  DeselectWindow(wn,true);
  GetWindowRecord(wn,ResAvr);
  err = TestGroupJobSubRun(ResAvr,fieldname,rownr);
  if (err!=0) then begin
    MessageBox(err,"");
    WindowFieldGoto(wn,ResAvr,rownr,fieldname,true);
    goto LGroupJobSubRun;
  end;
  Mother = CreateJobFromResAv(ResAvr,true,ResAvr.MatherJobNr,newGroupJobr);
  if (ResAvr.MatherJobNr<0) and (newGroupJobr.SerNr>0) then begin
    res = true;
  end;
  if (err!=0) then begin
//    MessageBox(err,"");
//    WindowFieldGoto(wn,ResAvr,rownr,fieldname,true);
//    goto LGroupJobSubRun;
  end;
  CloseWindow(wn);
LGroupJobSubRun:; 
  GroupJobSubRun = res;
  return;
end;

updating procedure DoGroupJobSubSave(integer wn)
begin
  record JobVc newGroupJobr;
  Integer nwn,mwn;
  longint subset;
  
  mwn = MotherWindow(wn); //Get mother window here, because 'GroupJobSubRun' closes 'wn' if successful.
  if (GroupJobSubRun(wn,newGroupJobr)) then begin  
    nwn = OpenWindow("GroupJobDClass",1,0,"","",newGroupJobr);
  end else begin
    if (GetWindowClass(mwn)=="GroupJobDClass") then begin
      subset = GetWindowSubset(mwn);
      SetWindowSubset(mwn,subset);
    end;
  end;
  UpdateNamedWindow("ResHotelWClass");
  UpdateNamedWindow("RTMonWClass");
  return;
end;

global
updating function Boolean GroupJobSubOClassOnOKWindow(Integer wn)
begin  
  DoGroupJobSubSave(wn);
  GroupJobSubOClassOnOKWindow = false;
  return;
end;

global
updating procedure GroupJobSubOSave()
begin
  DoGroupJobSubSave(CurWindow);
  return;
end;

global
procedure GroupDuplicateSubJobsm()
begin
  Integer wn,nwn;
  record JobVc Jobr,nJobr,MotherJobr;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,MotherJobr);
    if (ReadMarkedRecord(wn,Jobr)) then begin
      GroupDuplicateSubJobRemote(Jobr,MotherJobr.SerNr,nJobr);
      nwn = OpenWindow("JobDClass",1,0,"","",nJobr);
    end;
  end;  
  return;
end;

global
procedure GroupMoveSubJobsm()
begin
  Integer wn,nwn;
  record JobVc Jobr;
  record RcVc RepSpec;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,Jobr);
    RecordClear(RepSpec);
    nwn = OpenWindow("GroupMoveOClass",1,wn,"","",RepSpec);
    DeselectWindow(nwn,false);
    RepSpec.long1 = Jobr.SerNr;
    PutWindowRecord(nwn,RepSpec);
    WindowFieldGoto(nwn,RepSpec,-1,"long2",true);
  end;  
  return;
end;

global
updating procedure GroupMoveOClassRun()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record JobVc Jobr;
  Integer i,f;
  LongInt err,subsernr;
  array record JobVc aJobr;
  Integer acnt;

  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  if (RepSpec.long2<=0) then begin;
    MessageBox(12527,"");
    WindowFieldGoto(wn,RepSpec,-1,"long2",true);
    goto LGroupMoveOClassRun;
  end;
  mwn = MotherWindow(wn);
  if (mwn>0) then begin
    f = 1;
    i = 1;
    while (GetRecordFromBrowse(Jobr,mwn,i)) begin
      aJobr[acnt] = Jobr;
      acnt = acnt + 1;      
      i = i+1;
    end;
    if (acnt==0) then begin
      MessageBox(12529,"");
      goto LGroupMoveOClassRun;
    end;
    err = GroupMoveSubJobRemote(RepSpec,aJobr,acnt,subsernr);
    if (err!=0) then begin
      MessageBox(err," " & subsernr);
    end;
  end;
  UpdateBrowses("JobVc");
  CloseWindow(wn);
LGroupMoveOClassRun:;  
  return;
end;

global
procedure GroupAddSubJobsm()
begin
  Integer wn,nwn;
  record JobVc Jobr;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,Jobr);
    nwn = OpenWindow("NormalJobLClass",1,wn,"","",Jobr);
  end;  
  return;
end;

global
updating procedure GroupAddOClassRun()
begin
  Integer wn,mwn;
  record JobVc Jobr;
  record JobVc groupJobr;
  Integer i,f;
  LongInt err,subsernr;
  array record JobVc aJobr;
//  array LongInt aJobNrs;
  Integer acnt;

  wn = CurWindow;
  mwn = MotherWindow(wn);
  if (mwn>0) then begin
    GetWindowRecord(mwn,groupJobr);
    f = 1;
    i = 1;
    while (GetRecordFromBrowse(Jobr,wn,i)) begin
      aJobr[acnt] = Jobr;
      //aJobNrs[acnt] = Jobr.SerNr;
      acnt = acnt + 1;      
      i = i+1;
    end;
    if (acnt==0) then begin
      MessageBox(12529,"");
      goto LGroupAddOClassRun;
    end;
    err = GroupAddSubJobRemote(groupJobr,aJobr,acnt,subsernr);
    if (err!=0) then begin
      MessageBox(err," " & subsernr);
    end;
  end;
  UpdateBrowses("JobVc");
  CloseWindow(wn);
LGroupAddOClassRun:;  
  return;
end;

global
procedure CloseSpecificationWindow()
begin
  CloseWindow(CurWindow);
  return;
end;

global
procedure AssignGroupJobLsm()
begin
  Integer wn,nwn;
  record JobVc Jobr;
  record RcVc RepSpec;
  
  wn = CurWindow;
  RecordClear(RepSpec);
  nwn = OpenWindow("AssignGroupJobOClass",1,wn,"","",RepSpec);
  DeselectWindow(nwn,false);
  RepSpec.long1 = -1;
  PutWindowRecord(nwn,RepSpec);
  WindowFieldGoto(nwn,RepSpec,-1,"long1",true);
  return;
end;

global
updating procedure AssignGroupJobOClassRun()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record JobVc Jobr;
  Integer i,f;
  LongInt err,subsernr;
  array record JobVc aJobr;
  Integer acnt;

  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  if (RepSpec.long1<=0) then begin;
    MessageBox(12527,"");
    WindowFieldGoto(wn,RepSpec,-1,"long1",true);
    goto LAssignGroupJobOClassRun;
  end;
  mwn = MotherWindow(wn);
  if (mwn>0) then begin
    f = 1;
    i = 1;
    while (GetRecordFromBrowse(Jobr,mwn,i)) begin
      aJobr[acnt] = Jobr;
      acnt = acnt + 1;      
      i = i+1;
    end;
    if (acnt==0) then begin
      MessageBox(12530,"");
      goto LAssignGroupJobOClassRun;
    end;
    err = AssignGroupJobRemote(RepSpec,aJobr,acnt,subsernr);
    if (err!=0) then begin
      MessageBox(err," " & USetStr(12531) & " " &  subsernr);
    end;
  end;
  UpdateBrowses("JobVc");
  CloseWindow(wn);
LAssignGroupJobOClassRun:;  
  return;
end;

global
procedure JobELockingSystemDsm()
begin  
  record JobVc Jobr;
  string 255 errstr;
  Integer err;
  Integer wn;
  record RcVc RepSpec;

  if (UserCanAction("JobELockingSystem",true)==false) then begin
    goto LJobELockingSystemDsm;
  end;
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,Jobr);  
  wn = OpenWindow("ELockingSystemOClass",1,wn,"","",RepSpec);
  DeselectWindow(wn,false);
  RepSpec.f1 = Jobr.ResCode;
  RepSpec.sStartTime = Jobr.StartTime;
  RepSpec.sStartDate = Jobr.TransDate;
  RepSpec.sEndTime = Jobr.EndTime;
  RepSpec.sEndDate = Jobr.EndDate;
  RepSpec.long1 = 1;
  PutWindowRecord(wn,RepSpec);
  WindowFieldGoto(wn,RepSpec,-1,"long1",true);
LJobELockingSystemDsm:;  
  return;
end;

global
procedure ELSEncodeNewCard()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record HotelBlock Hotelb;
  record JobVc Jobr;

  wn = CurWindow;
  mwn = MotherWindow(wn);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec); 
  if (blank(RepSpec.f1)) then begin
    MessageBox(0,"Specify Room");
    goto LELSEncodeNewCard;
  end;
  if (mwn<=0) then begin
    MessageBox(0,"Not checked in");
    goto LELSEncodeNewCard;
  end;
  GetWindowRecord(mwn,Jobr); 
  Blockload(Hotelb); 
  if (Jobr.ResStatus==Hotelb.ChOutSt) or (Jobr.ResStatus==Hotelb.NoshowStatus) then begin
    MessageBox(0,"Incorect Reservation Status");
    goto LELSEncodeNewCard;
  end;
  ElectronicLockingSystemEncodeCard(RepSpec,0,Jobr.SerNr);
LELSEncodeNewCard:;  
  return;
end;

global
procedure ELSEncodeExtraCard()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record HotelBlock Hotelb;
  record JobVc Jobr;

  wn = CurWindow;
  mwn = MotherWindow(wn);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec); 
  if (blank(RepSpec.f1)) then begin
    MessageBox(0,"Specify Room");
    goto LELSEncodeExtraCard;
  end;
  if (mwn<=0) then begin
    MessageBox(0,"Not checked in");
    goto LELSEncodeExtraCard;
  end;
  GetWindowRecord(mwn,Jobr); 
  Blockload(Hotelb); 
  if (Jobr.ResStatus==Hotelb.ChOutSt) or (Jobr.ResStatus==Hotelb.NoshowStatus) then begin
    MessageBox(0,"Incorect Reservation Status");
    goto LELSEncodeExtraCard;
  end;
  ElectronicLockingSystemEncodeCard(RepSpec,1,Jobr.SerNr);
LELSEncodeExtraCard:;  
  return;
end;

global
procedure ELSCheckout()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record HotelBlock Hotelb;
  record JobVc Jobr;

  wn = CurWindow;
  mwn = MotherWindow(wn);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec); 
  if (blank(RepSpec.f1)) then begin
    MessageBox(0,"Specify Room");
    goto LELSCheckout;
  end;
  if (mwn<=0) then begin
    MessageBox(0,"Not checked in");
    goto LELSCheckout;
  end;
  GetWindowRecord(mwn,Jobr); 
  Blockload(Hotelb); 
  if (Jobr.ResStatus!=Hotelb.ChInSt) and (Jobr.ResStatus!=Hotelb.ChOutSt) then begin
    MessageBox(0,"Incorect Reservation Status");
    goto LELSCheckout;
  end;
  ElectronicLockingSystemCheckout(RepSpec);
LELSCheckout:;  
  return;
end;

procedure InitDateChange(longint func,string winclass)
begin
  record JobVc GroupResr,tmpJobr;
  record RcVc RepSpec;
  longint wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,GroupResr);
  tmpJobr.Mother = GroupResr.SerNr;
  if (ReadFirstKey("MotherKey",tmpJobr,1,true)==false) then begin
    MessageBox(27024,"");
    goto LInitDateChange;
  end;
  RepSpec.flags[0] = func;
  OpenWindow(winclass,1,CurWindow,"","",RepSpec);
LInitDateChange:;
  return;
end;

global
procedure GroupChangeSubCheckInJobssm()
begin
  InitDateChange(kChangeCheckInDate,"NewDateOClass");
  return;
end;

global
procedure GroupChangeSubCheckOutJobssm()
begin
  InitDateChange(kChangeCheckOutDate,"NewDateOClass");
  return;
end;

global
procedure GroupOffsetSubCheckInJobssm()
begin
  InitDateChange(kOffsetCheckInDate,"OffsetDateOClass");
  return;
end;

global
procedure GroupOffsetSubCheckOutJobssm()
begin
  InitDateChange(kOffsetCheckOutDate,"OffsetDateOClass");
  return;
end;

updating procedure DoGroupJobChangeDateDsm(integer func,date newdate,longint offset,record JobVc GroupResr)
begin
  record JobVc Jobr,oldJobr;
  boolean TrHs;
  integer daydiff;
  date tdate;
  
  TrHs = true;
  Jobr.Mother = GroupResr.SerNr;
  while LoopKey("MotherKey",Jobr,1,TrHs) begin
    TrHs = (Jobr.Mother==GroupResr.SerNr);
    if TrHs then begin
      RecordCopy(oldJobr,Jobr);
      switch func begin
        case kChangeCheckInDate:
          Jobr.TransDate = newdate;
          if (Jobr.TransDate>=Jobr.EndDate) then begin
            Jobr.EndDate = AddDay(Jobr.TransDate,1);
          end;
          Jobr.NrOfDays = DateDiff(Jobr.EndDate,Jobr.TransDate);;
        case kChangeCheckOutDate:
          Jobr.EndDate = newdate;
          if (Jobr.TransDate>=Jobr.EndDate) then begin
            Jobr.TransDate = AddDay(Jobr.EndDate,-1);
          end;
          Jobr.NrOfDays = DateDiff(Jobr.EndDate,Jobr.TransDate);
        case kOffsetCheckInDate:
          Jobr.TransDate = AddDay(Jobr.TransDate,offset);
          if (Jobr.TransDate>=Jobr.EndDate) then begin
            Jobr.EndDate = AddDay(Jobr.TransDate,1);
          end;
          Jobr.NrOfDays = DateDiff(Jobr.EndDate,Jobr.TransDate);;
        case kOffsetCheckOutDate:
          Jobr.EndDate = AddDay(Jobr.EndDate,offset);
          if (Jobr.TransDate>=Jobr.EndDate) then begin
            Jobr.TransDate = AddDay(Jobr.EndDate,-1);
          end;
          Jobr.NrOfDays = DateDiff(Jobr.EndDate,Jobr.TransDate);
      end;
      RecordUpdate(oldJobr,Jobr,true);
    end;
  end;
LDoGroupJobChangeDateDsm:;
  return;
end;

global
updating procedure GroupJobChangeDateDsm()
begin
  record JobVc GroupResr;
  record RcVc RepSpec;
  longint wn,mwn,subset;
    
  wn = CurWindow;
  mwn = MotherWindow(wn);  
  if (GetWindowClass(mwn)<>"GroupJobDClass") then begin
    goto LGroupJobChangeDateDsm;
  end;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  if (((RepSpec.flags[0]==kChangeCheckInDate) or (RepSpec.flags[0]==kChangeCheckOutDate)) and blankdate(RepSpec.d1)) then begin
    WindowFieldGoto(wn,RepSpec,-1,"d1",true);
    MessageBox(1058,"");
    PutWindowRecord(wn,RepSpec);
    goto LGroupJobChangeDateDsm;
  end;
  if (((RepSpec.flags[0]==kOffsetCheckInDate) or (RepSpec.flags[0]==kOffsetCheckOutDate)) and (RepSpec.long1==-1)) then begin
    WindowFieldGoto(wn,RepSpec,-1,"long1",true);
    MessageBox(1058,"");
    PutWindowRecord(wn,RepSpec);
    goto LGroupJobChangeDateDsm;
  end;
  CloseWindow(wn);
  GetWindowRecord(mwn,GroupResr);
  DoGroupJobChangeDateDsm(RepSpec.flags[0],RepSpec.d1,RepSpec.long1,GroupResr);
  subset = GetWindowSubset(mwn);
  SetWindowSubset(mwn,subset);
LGroupJobChangeDateDsm:;
  return;
end;

global
procedure InvoiceGroupJobDsm()
begin
  record JobVc GJobr;
  Integer wn,nwn;
  record RcVc RepSpec;

  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,GJobr);
  nwn = OpenWindow("IVFromGroupJobVClass",1,0,"","",RepSpec);
  DeselectWindow(nwn,false);
  RepSpec.repname = "IVFromGroupJobMn";
  RepSpec.long1 = GJobr.SerNr;
  RepSpec.f1 = GJobr.CUCode;
  PutWindowRecord(nwn,RepSpec);  
  SelectWindow(nwn);
  return;
end;
