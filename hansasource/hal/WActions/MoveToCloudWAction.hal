external updating procedure StoreCustomerHWAsync(Boolean);
external function Date DateFromString(string,string);
external function LongInt DateDiff(Date,Date);
external function Boolean DoMigrateServerToCloud(String,Boolean);

global
updating procedure StoreDynFieldValue(string wname,string field,string value)
begin
  Integer i,rwcnt;
  row WindowDynValuesVc WDVrw;
  record WindowDynValuesVc WDVr,oldWDVr;
  Boolean foundf,updatef;

  WDVr.WindowName = wname;
  if (ReadFirstMain(WDVr,1,true)) then begin
    updatef = true;
    RecordCopy(oldWDVr,WDVr);
    rwcnt = MatRowCnt(WDVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(WDVr,i,WDVrw);
      if (WDVrw.FieldName==field) then begin
        WDVrw.FieldValue = value;
        MatRowPut(WDVr,i,WDVrw);
        foundf = true;
        i = rwcnt;
      end;
    end;
  end else begin
    RecordNew(WDVr);
    WDVr.WindowName = wname;
  end;

  if (!foundf) then begin
    ClearRow(WDVr,WDVrw,1);
    WDVrw.FieldName = field;
    WDVrw.FieldValue = value;
    MatRowPut(WDVr,MatRowCnt(WDVr),WDVrw);
  end;

  if (updatef) then begin
    RecordUpdate(oldWDVr,WDVr,true);
  end else begin
    RecordStore(WDVr,true);
  end;

  return;
end;

global
function Boolean GetDynFieldValue(string wname,string field,var string value)
begin
  Integer i,rwcnt;
  record WindowDynValuesVc WDVr;
  row WindowDynValuesVc WDVrw;
  Boolean foundf;
  Boolean res;

  WDVr.WindowName = wname;
  if (ReadFirstMain(WDVr,1,true)) then begin
    rwcnt = MatRowCnt(WDVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(WDVr,i,WDVrw);
      if (WDVrw.FieldName==field) then begin
        value = WDVrw.FieldValue;
        res = true;
        i = rwcnt;
      end;
    end;
  end;

  GetDynFieldValue = res;
  return;
end;

procedure DoMoveLocalDBToCloud()
begin
  Boolean failf;
  record InternetEnablerBlock IEr;

  BlockLoad(IEr);
  if (blank(IEr.CustomerCode)) then begin
    qupdating.StoreCustomerHWAsync(false);
  end;
  SetGlobalBoolean("IsMovingToCloud",true);
  OpenProgressWindow(38823,38824);
  UpdateProgressWindow(10,100,38823,38824);
  failf = DoMigrateServerToCloud(DatabaseFileName,true);
  if (failf) then begin
    //TODO Display message: "We are sorry, but your data could not be moved to the cloud at this time. Please wait a few minutes and try again."
    //TODO Pushbutton bottom-right: "Try again"
    //TODO Pushbutton bottom-left: "Skip" <-- this option should restart the application
  end else begin
    // Nothing, this is handled in HTSClientMigrationTools.hal, MigrateServerToCloudDatabaseSent (check that function for todo:s)
  end;

  return;
end;

global
procedure MoveToCloudWClassMove()
begin
  CloseWindow(CurWindow);

  DoMoveLocalDBToCloud;
  return;
end;

global
procedure MoveToCloudWsm()
begin
  DoMoveLocalDBToCloud;
  return;
end;

global
procedure MoveToCloudWClassCancel()
begin
  Integer wn;
  record RCVc RepSpec;

  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  qupdating.StoreDynFieldValue("MoveToCloudWClass","hidereminder",RepSpec.flags[0]);
  qupdating.StoreDynFieldValue("MoveToCloudWClass","lastcall",DateToString(CurrentDate,"YYYYMMDD"));
  CloseWindow(wn);

  return;
end;

global
procedure OpenMoveToCloudWindow()
begin
  string 255 value,td;
  record RCVc RepSpec;
  Integer wn;

  if (SingleUserMode) then begin
    GetDynFieldValue("MoveToCloudWClass","hidereminder",value);
    GetDynFieldValue("MoveToCloudWClass","lastcall",td);
    if (value!="1" or DateDiff(CurrentDate,DateFromString(td,"YYYYMMDD"))>=30) then begin
      wn = OpenWindow("MoveToCloudWClass",0,0,"","",RepSpec);
    end;
  end;
  return;
end;
