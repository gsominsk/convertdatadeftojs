remote updating function LongInt OffHireAgreement1Mn(record RcVc);
remote updating function LongInt DispatchAgreement1Mn(record RcVc);
remote procedure RecordActionAgreement_Print(record AgreementVc,string,string,Boolean);
external procedure IVOpenPrepExists(string);
external function string 40 DelAddrSClassSpecPName(string);
remote updating function Integer RecordAction_raPasteAgreeInIV(var record IVVc,LongInt);
remote function Boolean PasteCustInAgreement(var record AgreementVc,string,Boolean,var string);
remote procedure NewRentalCharge(Integer,var record RentChrgVc,Date,LongInt,LongInt,var string,string);
external procedure RemoveOldUserObjects(string,var string);
remote procedure SetDelAddr(string,string,var string,var string,var string,var string,var string,var string,var string,var string,var string,var string,var Integer,var string);


global
procedure CreateObjAgreeDsm()
BEGIN
  record ObjVc Objr;
  record AgreementVc Agrr;
  Integer wn,nwn;
  string 60 tstr;
  
  wn = CurWindow;
  GetWindowRecord(wn,Agrr);
  DeselectWindow(wn,false);
  Objr.Code = Agrr.SerNr; // Prefix
  tstr = Agrr.Addr0;
  if nonblank(Agrr.InvComment) then begin
    tstr = tstr & ", " & Agrr.InvComment;
  end;
  Objr.Comment = tstr;
  Objr.OTCode = ""; // Object Type
  nwn = OpenWindow("ObjDClass",1,0,"","",Objr);
  if (nonblank(Agrr.Objects)) then begin
    Agrr.Objects = Agrr.Objects & ",";
  end;
  Agrr.Objects = Agrr.Objects & Objr.Code;
  PutWindowRecord(wn,Agrr);
  return;
end;

global
procedure AgreementVc_PasteDelAddrCode(var record AgreementVc Agreementp)
BEGIN
  string 255 name,a0,a1,a2,a3,a4,country,region,taxtemplatecode,vatcode,dummy;
  
  SetDelAddr(Agreementp.CustCode,Agreementp.Site,name,a0,a1,a2,a3,a4,country,region,taxtemplatecode,vatcode,Agreementp.ExportFlag,dummy);
  Agreementp.ShipAddr0 = name;
  Agreementp.ShipAddr1 = a0;
  Agreementp.ShipAddr2 = a1;
  Agreementp.ShipAddr3 = a2;
  Agreementp.DelAddr3 = a3;
  Agreementp.DelAddr4 = a4;
  Agreementp.CustVATCode = vatcode;
//  Agreementp.Region = region;
  RETURN;
END;

function Boolean AgreementDClassDelAddrCodeEFAfter(Integer wn,Integer changed)
begin  
  record AgreementVc Agreementr;
  val t;

  if (changed!=0) then begin  
    DeselectWindow(wn,false);
    GetWindowRecord(wn,Agreementr);
    AgreementVc_PasteDelAddrCode(Agreementr);
    PutWindowRecord(wn,Agreementr);
  end;  
  AgreementDClassDelAddrCodeEFAfter = true;
  return;
end;


function Boolean AgreementDClassCustCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record AgreementVc Agreer;
  string 255 warning;

  GetWindowRecord(wn,Agreer);    
  if ((changed!=0) or ((blank(Agreer.Addr0)) and (nonblank(Agreer.CustCode)))) then begin
    GetWindowRecord(wn,Agreer);    
    DeselectWindow(wn,false);
    if (PasteCustInAgreement(Agreer,WindEFstr(wn),true,warning)) then begin
      PutWindowRecord(wn,Agreer);
      if (nonblank(warning)) then begin
        MessageBox(0,warning);
      end;
    end else begin
      Beep;
    end;
  end;
  AgreementDClassCustCodeEFAfter = true;
  return;
end;

global
procedure PasteLTxttoAgreement(record AgreementVc Agreementr)
BEGIN
  record LTxtVc LTxtr;
  string 255 tstr;
  Integer pos,textsize;

  LTxtr.Code = Agreementr.LTxtCode;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    textsize = SizeTextCnt(LTxtr);
    while (pos<textsize) begin
      tstr = StringFromText(LTxtr,pos,255);
      pos = pos + len(tstr);
      if (len(tstr)==0) then begin
        pos = pos + 1;
      end;
      AddToText(tstr,Agreementr);
    end;
  end;  
  RETURN;
END;

function Boolean AgreementDClassLTxtCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record AgreementVc Agreementr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,Agreementr);
    PasteLTxttoAgreement(Agreementr);
    PutWindowRecord(wn,Agreementr);
  end;
  AgreementDClassLTxtCodeEFAfter = res;
  RETURN;
END;

function Boolean AgreementDClassSiteEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record AgreementVc Agreementr;
  record DelAddrVc DelAddrr;
  record RentInvoiceBlock RIr;
  Boolean res,sitefoundf;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,Agreementr);
    sitefoundf = false;
    DelAddrr.DelCode = Agreementr.Site;
    DelAddrr.CustCode = Agreementr.CustCode;
    if (ReadFirstMain(DelAddrr,2,true)) then begin
      sitefoundf = true;
    end else begin
      DelAddrr.DelCode = Agreementr.Site;
      DelAddrr.CustCode = "";
      if (ReadFirstMain(DelAddrr,2,true)) then begin
        sitefoundf = true;
      end;
    end;
    if (sitefoundf) then begin
      Agreementr.InvoiceBase = DelAddrr.InvoiceBase;
      Agreementr.IncludeOriginalItem = DelAddrr.IncludeOriginalItem;
      Agreementr.IncludePeriod = DelAddrr.IncludePeriod;
      Agreementr.AddEmptyLine = DelAddrr.AddEmptyLine;
      Agreementr.UseAsQty = DelAddrr.UseAsQty;
      Agreementr.GroupInvoice = DelAddrr.GroupInvoice;
      Agreementr.IncludeSite = DelAddrr.IncludeSite;
      Agreementr.ShipAddr0 = DelAddrr.Comment;
      Agreementr.ShipAddr1 = DelAddrr.DelAddr0;
      Agreementr.ShipAddr2 = DelAddrr.DelAddr1;
      Agreementr.ShipAddr3 = DelAddrr.DelAddr2;
      Agreementr.DelAddr3 = DelAddrr.DelAddr3;
      Agreementr.DelAddr4 = DelAddrr.DelAddr4;
      Agreementr.InclCustOrdNr = DelAddrr.InclCustOrdNr;
      Agreementr.InclRentResNo = DelAddrr.InclRentResNo;
      Agreementr.PriceList = DelAddrr.PriceList;
    end else begin
      BlockLoad(RIr);
      Agreementr.InvoiceBase = RIr.InvoiceBase;
      Agreementr.IncludeOriginalItem = RIr.IncludeOriginalItem;
      Agreementr.IncludePeriod = RIr.IncludePeriod;
      Agreementr.AddEmptyLine = RIr.AddEmptyLine;
      Agreementr.UseAsQty = RIr.UseAsQty;
      Agreementr.GroupInvoice = RIr.GroupInvoice;
      Agreementr.IncludeSite = RIr.IncludeSite;
      Agreementr.InclRentResNo = RIr.InclRentResNo;
      Agreementr.InclCustOrdNr = RIr.InclCustOrdNr;
    end;
    PutWindowRecord(wn,Agreementr);
  end;
  AgreementDClassSiteEFAfter = res;
  RETURN;
END;

function Boolean AgreementDClassSalesManEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record AgreementVc Agreementr;
  record UserVc Userr;
  string 255 efstr,tstr;

  if (changed!=0) then begin  
    GetWindowRecord(wn,Agreementr);
    DeselectWindow(wn,false);
    Userr.Code = Agreementr.SalesMan;
    if (ReadFirstMain(Userr,1,true)) then begin
      efstr = WindEFstr(wn);
      if ((efstr!=Agreementr.SalesMan) and (nonblank(efstr))) then begin
        tstr = Agreementr.Objects;
        RemoveOldUserObjects(efstr,tstr);
        Agreementr.Objects = tstr;
      end;
      tstr = Agreementr.Objects;
      if ((nonblank(tstr)) and (nonblank(Userr.PersObjx))) then begin
        tstr = tstr & ",";
      end;
      tstr = tstr & Userr.PersObjx;
      Agreementr.Objects = tstr;          
      Agreementr.Department = Userr.Department;          
    end;
    PutWindowRecord(wn,Agreementr);
  end;
  AgreementDClassSalesManEFAfter = true;
  return;
end;

global
function Boolean AgreementDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "CustCode": res = AgreementDClassCustCodeEFAfter(wn,fn,rownr,changed);
    case "SalesMan": res = AgreementDClassSalesManEFAfter(wn,fn,rownr,changed);
    case "Site":     res = AgreementDClassSiteEFAfter(wn,fn,rownr,changed);
    case "LTxtCode": res = AgreementDClassLTxtCodeEFAfter(wn,fn,rownr,changed);
    case "DelAddrCode": res = AgreementDClassDelAddrCodeEFAfter(wn,changed);
  end;
  AgreementDClassAfterEditField = res;
  RETURN;
END;

function Boolean AgreementButtonAction(string fieldname,Integer wn,Integer wnst)
begin
  Boolean res;
  record AgreementVc Agreementr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,Agreementr);
    if (Agreementr.OKFlag!=0) then begin
      switch (fieldname) begin
        case "OKFlag":
          res = false;
          if (UserCanAction("UnOKAll",true)) then begin
//          if (UserCanAction("UnOKAgree",true)) then begin
            res = true;
          end;
        otherwise
          res = false;
      end;
    end;
  end;
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,Agreementr);
    if (Agreementr.OKFlag!=0) then begin
      switch (fieldname) begin
        otherwise
          res = false;
      end;
    end;
  end;
  AgreementButtonAction = res;
  return;
end;

global
function Boolean AgreementDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;

//  res = AgreementButtonAction("OKFlag",wn,WindowState(wn));
  res = true;
  AgreementDClassOKFlagButtonAction = res;
  RETURN;
END;

global
procedure AgreementNewDsm()
BEGIN
  record AgreementVc Agreementr;
  record RentResVc RentResr;
  record DelAddrVc DelAddrr;
  Integer wn;
  Integer nwn;

  wn = CurWindow;
  GetWindowRecord(wn,Agreementr);
  if ((Agreementr.OKFlag<>0) and (Agreementr.AgreeStatus<1)) then begin
    RecordNew(RentResr);
    RentResr.AgreementNr = Agreementr.SerNr;
    if (Agreementr.startDate<CurrentDate) then begin
      RentResr.TransDate = CurrentDate;
    end else begin
      RentResr.TransDate = Agreementr.startDate;
    end;
    RentResr.AgreeType = Agreementr.AgreeType;
    RentResr.EndDate = Agreementr.endDate;
    RentResr.Location = Agreementr.Location;
    RentResr.LangCode = Agreementr.LangCode;
    RentResr.Site = Agreementr.Site;
    DelAddrr.DelCode = RentResr.Site;
    DelAddrr.CustCode = Agreementr.CustCode;
    if (ReadFirstMain(DelAddrr,2,true)) then begin
      RentResr.ClientContact = DelAddrr.Contact;
    end else begin
      DelAddrr.DelCode = RentResr.Site;
      DelAddrr.CustCode = "";
      if (ReadFirstMain(DelAddrr,2,true)) then begin
        RentResr.ClientContact = DelAddrr.Contact;
      end;
    end;
    nwn = OpenWindow("RentResDClass",1,0,"","",RentResr);
  end else begin
    MessageBox(0,USetStr(2161));
  end;
  RETURN;
END;

global
updating function Boolean DispatchAgreementVClassOnOKWindow(Integer wn)
BEGIN
  record RcVc RepSpec;
  record DispatchVc Dispatchr;
  Integer nwn;
  LongInt res;
  
  GetWindowRecord(wn,RepSpec);
  
  res = DispatchAgreement1Mn(RepSpec);
  if (res>0) begin
    Dispatchr.SerNr = res;
    if (ReadFirstMain(Dispatchr,1,true)) then begin
      nwn = OpenWindow("DispatchDClass",1,0,"","",Dispatchr);
      UpdateBrowses("DispatchVc");
    end;  
  end;
  CloseWindow(wn);
  DispatchAgreementVClassOnOKWindow = false;
  RETURN;
END;

global
procedure AgreementDispatchDsm()
BEGIN
  record AgreementVc Agreementr;
  record CUVc CUr;
  Integer wn,wn2;
  record RcVc RepSpec;
  boolean onhold;
  
  onhold = false;
  wn = CurWindow;
  GetWindowRecord(wn,Agreementr);
  CUr.Code = Agreementr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (CUr.OnHoldFlag == 1) then begin
      onhold = true;
    end;
  end;
  if (onhold) then begin
    MessageBox(1300,""); 
  end;
  if (onhold == false) then begin
    if ((Agreementr.OKFlag<>0) and (Agreementr.AgreeStatus<1)) then begin
      ReportDefaults(RepSpec,"DispatchAgreementVClass");  
      wn2 = OpenWindow("DispatchAgreementVClass",1,0,"","",RepSpec);
      DeselectWindow(wn2,false);
      //RepSpec.repname = "DispatchAgreementMn";
      RepSpec.long1 = Agreementr.SerNr;
      PutWindowRecord(wn2,RepSpec);
      SelectWindow(wn2);
    end else begin
      MessageBox(0,USetStr(2161));
    end;
  end;
  RETURN;
END;

global
procedure AgreementCollectionDsm()
BEGIN
  record AgreementVc Agreementr;
  Integer wn,wn2;
  record RcVc RepSpec;

  wn = CurWindow;
  GetWindowRecord(wn,Agreementr);
  if ((Agreementr.OKFlag<>0) and (Agreementr.AgreeStatus<1)) then begin
    ReportDefaults(RepSpec,"DispatchAgreementVClass");  
    wn2 = OpenWindow("CollectionAgreementVClass",1,0,"","",RepSpec);
    DeselectWindow(wn2,false);
    RepSpec.repname = "CollectionAgreementMn";
    RepSpec.long1 = Agreementr.SerNr;    
    PutWindowRecord(wn2,RepSpec);
    SelectWindow(wn2);
  end else begin
    MessageBox(0,USetStr(2161));
  end;
  RETURN;
END;

global
updating function Boolean OffHireAgreementVClassOnOKWindow(Integer wn)
BEGIN
  record RcVc RepSpec;
  record OffHireVc OffHirer;
  Integer nwn;
  LongInt res;
  
  GetWindowRecord(wn,RepSpec);
  
  res = OffHireAgreement1Mn(RepSpec);
  if (res>0) begin
    OffHirer.SerNr = res;
    if ReadFirstMain(OffHirer,1,true) then begin
      nwn = OpenWindow("OffHireDClass",1,0,"","",OffHirer);
      UpdateBrowses("OffHireVc");
    end;  
  end;
  CloseWindow(wn);
  OffHireAgreementVClassOnOKWindow = false;
  RETURN;
END;


global
procedure AgreementOffHireDsm()
BEGIN
  record AgreementVc Agreementr;
  Integer wn,wn2;
  record RcVc RepSpec;

  wn = CurWindow;
  GetWindowRecord(wn,Agreementr);
  if ((Agreementr.OKFlag<>0) and (Agreementr.AgreeStatus<2)) then begin
    ReportDefaults(RepSpec,"OffHireAgreementVClass");  
    wn2 = OpenWindow("OffHireAgreementVClass",1,0,"","",RepSpec);
    DeselectWindow(wn2,false);
    //RepSpec.repname = "OffHireAgreementMn";
    RepSpec.long1 = Agreementr.SerNr;
    PutWindowRecord(wn2,RepSpec);
    SelectWindow(wn2);
  end else begin
    MessageBox(0,USetStr(2161));
  end;
  RETURN;
END;

global
procedure AgreementInfoDsm()
BEGIN
  record RcVc RepSpec;
  record AgreementVc Agreementr;

  GetWindowRecord(CurWindow,Agreementr);
  RepSpec.f1 = Agreementr.SerNr;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.Media = mtScreen;
  RepSpec.repname = "AgreementInfoRn";
  RunReport(RepSpec,0);
  RETURN;
END;

global
procedure ChargeAgreementDsm()
BEGIN
  record AgreementVc Agreementr;
  Integer wn,wn2;
  record RcVc RepSpec;

  wn = CurWindow;
  GetWindowRecord(wn,Agreementr);
  if ((Agreementr.OKFlag<>0) and (Agreementr.AgreeStatus<1)) then begin
    ReportDefaults(RepSpec,"ChargeAgreementVClass");  
    wn2 = OpenWindow("ChargeAgreementVClass",1,0,"","",RepSpec);
    DeselectWindow(wn2,false);
    RepSpec.repname = "ChargeAgreementMn";
    RepSpec.f1 = Agreementr.SerNr;
    PutWindowRecord(wn2,RepSpec);
    SelectWindow(wn2);
  end else begin
    MessageBox(0,USetStr(2161));
  end;
  RETURN;
END;

global
procedure AgreementChargeDsm()
BEGIN
  record AgreementVc Agreementr;
  record RentChrgVc RentChrgr;
  string 255 warn;
  Integer wn;
  Integer nwn;

  wn = CurWindow;
  GetWindowRecord(wn,Agreementr);
  if ((Agreementr.OKFlag<>0) and (Agreementr.AgreeStatus<1)) then begin
    NewRentalCharge(0,RentChrgr,CurrentDate,Agreementr.SerNr,Agreementr.SerNr,warn,Agreementr.Site);
    nwn = OpenWindow("RentChrgDClass",1,0,"","",RentChrgr);
  end else begin
    MessageBox(0,USetStr(2161));
  end;
  RETURN;
END;

global
updating procedure InvoiceAgreementDsm()
BEGIN
  record AgreementVc Agreementr;
  record IVVc IVr;
  Integer wn,r,nwn;
  Integer normalstate;

  normalstate = 0;//Rs_normal
  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)==normalstate) then begin
    GetWindowRecord(wn,Agreementr);
    if ((Agreementr.OKFlag<>0) and (Agreementr.AgreeStatus<2)) then begin
      if (UserCanAction("AgreementToIV",true)) then begin
        r = RecordAction_raPasteAgreeInIV(IVr,Agreementr.SerNr);
        if (r!=-1) then begin
          if (MatRowCnt(IVr)!=0) then begin
            nwn = OpenWindow("IVDClass",1,0,"","",IVr);
            IVOpenPrepExists(IVr.CustCode);
          end else begin
            Beep;
          end;
        end else begin
          Beep;
        end;
      end else begin
        MessageBox(1274,StringFromStringSet(3,"AgreementToIV"));
      end;
    end else begin
      MessageBox(0,USetStr(2161));
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
procedure AgreementAvailableDsm()
BEGIN
  record AgreementVc Agreementr;
  record UserVc Userr;
  Integer wn,wn2;
  record RcVc RepSpec;
  Date fr,to;

  wn = CurWindow;
  GetWindowRecord(wn,Agreementr);
  ReportDefaults(RepSpec,"RentResAvailRClass");
  wn2 = OpenWindow("RentResAvailRClass",1,0,"","",RepSpec);
  DeselectWindow(wn2,false);
  RepSpec.repname = "RentResAvailRn";
  RepSpec.long1 = Agreementr.SerNr;
  RepSpec.Media = mtScreen;
  to = RepSpec.sEndDate;
  if (nonblankdate(Agreementr.startDate)) then begin
    fr = Agreementr.startDate;
  end else begin
    fr = RepSpec.sStartDate;
  end;
  if (nonblankdate(Agreementr.endDate)) then begin
    to = Agreementr.endDate;
  end else begin
    if (RepSpec.sEndDate<fr) then begin
      to = AddYear(RepSpec.sEndDate,1);
    end;
  end;
  RepSpec.Period2Str = fr;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & to;
  RepSpec.sStartDate = fr;
  RepSpec.sEndDate = to;
  if (Agreementr.OKFlag == 1) then begin
    RepSpec.UsedOnly = 1;
  end else begin
    RepSpec.UsedOnly = 0;
  end; 
  Userr.Code = CurrentUser;
  if (ReadFirstMain(Userr,1,true)) then begin
    RepSpec.f4 = Userr.Location;
  end;
  PutWindowRecord(wn2,RepSpec);
  SelectWindow(wn2);
  RETURN;
END;

global
function Boolean ReservationExists(LongInt sernr)
begin
  Boolean res;
  record RentResVc RentResr;
  
  res = false;
  RentResr.AgreementNr = sernr;
  if (ReadFirstKey("AgreementNr",RentResr,1,true)) then begin
    res = true;
  end;
  ReservationExists = res;
  return;
end;

function Boolean AgreementVcEFActiveCheck(string fieldname,Integer wn,Integer wnst,Integer rownr)
BEGIN
  Boolean res;
  record AgreementVc Agreementr;
  record AgreementVc Agreement2r;
  Integer updatemode;

  res = true;
  if (wnst==Rs_update) then begin
    GetPrevWindowRecord(wn,Agreement2r);
    GetWindowRecord(wn,Agreementr);
    if (Agreement2r.OKFlag<>0) then begin
      res = false;
    end;
    if (rownr<0) then begin
    switch (fieldname) begin
      case "endDate":
        res = true;
      case "CancelDate":
        res = true;
      case "SalesMan":
        res = true;
      case "ClientContact":
        res = true;
      case "InvComment":
        res = true;
      case "startDate":
        res = true;
/* I am not sure this works, but possibly the record checks will stop it
        if (res) then begin
          if (ReservationExists(Agreementr.SerNr)) then begin
            res = false;
          end;
        end;
*/
    end;
    end;
  end;
  AgreementVcEFActiveCheck = res;
  RETURN;
END;

global
function Boolean AgreementDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer ef)
BEGIN
  Boolean res;
  
  res = AgreementVcEFActiveCheck(fieldname,wn,wnst,rownr);
  AgreementDClassActiveEditField = res;
  return;
end;

global
function Boolean AgreementDClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  record AgreementVc Agreementr;
  record RentResVc RentResr;
  
  if (WindowState(wn)==0) then begin
    GetWindowRecord(wn,Agreementr);
    if (ReadMarkedRecord(wn,RentResr)) then begin
      mwn = OpenWindow("RentResDClass",1,0,"","",RentResr);    
    end;
  end;
  AgreementDClassOnOKWindow = true;
  return;
end;

global
function string 40 AgreementDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 40 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "DelAddrCode": psname = DelAddrSClassSpecPName(defpsname);
  end;
  AgreementDClassSpecPasteName = psname;
  return;
end;

global
function Boolean AgreementDClassPrint(Integer wn,Boolean previewf)
begin
  record AgreementVc Agreementr;
  Integer tf;
  boolean res;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,Agreementr); 
  res = true;
  if (WindowState(wn)!=Rs_normal) then begin 
    beep;
    res = false;
    goto LLAgreementDClassPrint;
  end;
  if ((WindowState(wn)==Rs_normal) and (previewf==false)) then begin
    RecordActionAgreement_Print(Agreementr,"","AgreementForm",true);
  end else begin  
    tf = Agreementr.OKFlag;
    if (previewf==false) then begin
      Agreementr.OKFlag = 0;
    end else begin
      Agreementr.OKFlag = 1;
    end;
    if (PrintDocument(Agreementr,"AgreementForm",true)) then begin end;
  end;
LLAgreementDClassPrint:;
  AgreementDClassPrint = res;
  return;
end;
