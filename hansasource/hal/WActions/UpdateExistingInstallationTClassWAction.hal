external procedure MigrateServerToCloud(string);
external procedure SendLogAction(Integer,Integer,Integer,string,string);

global
updating procedure UpdateExistingInstallationToCloud()
begin
  Integer wn;
  record RcVc RepSpec;

  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  SendLogAction(kActionUpgraderStarted,-1,-1,"NewInstallWClass","");
  MigrateServerToCloud(RepSpec.f1);
end;


global
updating procedure UpdateExistingInstallationLocally()
begin
  Integer wn;
  record RcVc RepSpec;

  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  SendLogAction(kActionUpgraderStarted,-1,-1,"NewInstallWClass","");
  UpdateLocally(RepSpec.f1,RepSpec.f2,"OldInstallation");
end;

global
function string 255 ExtName(string fname)
begin
  Integer i;
  string 255 ext;
  for (i=len(fname)-1;i>=0;i=i-1) begin
    if (mid(fname,i,1)==".") then begin
      i = -1;
    end else begin 
      ext = mid(fname,i,1) & ext;
    end;
  end;

  ExtName = ext;
end;

function Boolean SetIfExists(string inname,var string outname)
begin
  Boolean res;

  if (FileExists(inname)) then begin
    outname = inname;
    res = true;
  end;
  SetIfExists = res;
end;

global
function Boolean CheckForHDBs(string path,var string foundname)
begin
  Boolean res;
  res = SetIfExists(path & "HANSA.HDB",foundname);
  if (res) then begin goto LCheckForHDBs; end;
  res = SetIfExists(path & "RAAMA.HDB",foundname);
  if (res) then begin goto LCheckForHDBs; end;
  res = SetIfExists(path & "1OFFICE.HDB",foundname);
  if (res) then begin goto LCheckForHDBs; end;
  res = SetIfExists(path & "OFFICE2.HDB",foundname);
  if (res) then begin goto LCheckForHDBs; end;
  res = SetIfExists(path & "1CONTACT.HDB",foundname);
  if (res) then begin goto LCheckForHDBs; end;
LCheckForHDBs:;
  CheckForHDBs = res;
end;

global
function LongInt UpgradeGetBaseFolders(var array string folders,Boolean dbf)
begin
  LongInt res;
  res = 0;

  if (WindowsMode) then begin
    folders[res] = "C:\\Program Files\\HansaWorld\\";
    res = res +1;
    folders[res] = "C:\\Program Files (x86)\\HansaWorld\\";
    res = res +1;
    folders[res] = "C:\\Program Files\\";
    res = res +1;
    folders[res] = "C:\\Program Files (x86)\\";
    res = res +1;
    folders[res] = GetHomeDir & "\\Desktop\\";
    res = res +1;
    if (dbf) then begin
      folders[res] = GetHomeDir & "\\AppData\\Local\\VirtualStore\\Program Files\\HansaWorld\\";
      res = res +1;
      folders[res] = GetHomeDir & "\\AppData\\Local\\VirtualStore\\Program Files (x86)\\HansaWorld\\";
      res = res +1;
      folders[res] = GetHomeDir & "\\AppData\\Local\\VirtualStore\\Program Files\\";
      res = res +1;
      folders[res] = GetHomeDir & "\\AppData\\Local\\VirtualStore\\Program Files (x86)\\";
      res = res +1;
      folders[res] = GetHomeDir & "\\AppData\\Local\\VirtualStore\\Program Files\\Standard Apps\\";
      res = res +1;
      folders[res] = GetHomeDir & "\\AppData\\Local\\VirtualStore\\Program Files (x86)\\Standard Apps\\";
      res = res +1;
    end;
  end;
  UpgradeGetBaseFolders = res;
end;

function Boolean StrBegin(string text,string beg)
begin
  Boolean res;
  if (left(text,len(beg))==beg) then begin
    res = true;
  end;
  StrBegin = res;
end;


function Boolean UpdateExistingInstallationTClassDBLocationEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record RcVc RepSpec;
  string 255 ext,fname,rawname,path,exename;
  Boolean exefoundf;
  Longint dirs,j;
  array string 255 appsearchdirs;


  GetWindowRecord(wn,RepSpec);
  if (blank(RepSpec.f1) or nonblank(RepSpec.f2)) then begin
    goto LUpdateExistingInstallationTClassDBLocationEFAfter;
  end;
  fname = BaseName(RepSpec.f1);
  path = DirName(RepSpec.f1);
  if (WindowsMode) then begin
    path = path & "\\";
  end else begin
    path = path & "/";
  end;
  ext = ExtName(fname);
  if (len(ext)!=3) then begin
    rawname = fname;
  end else begin
    rawname = left(fname,len(fname)-len(ext)-1);
  end;
//  LogText(0,"UpdateExistingInstallationTClassDBLocationEFAfter path:" & path & " fname:" & fname & " rawname:" & rawname & " ext:" & ext);

  exefoundf = SetIfExists(path & rawname & ".app",exename);
  if (exefoundf) then begin goto LExeFound; end;
  exefoundf = SetIfExists(path & rawname & ".exe",exename);
  if (exefoundf) then begin goto LExeFound; end;
  if (WindowsMode) then begin
    dirs = UpgradeGetBaseFolders(appsearchdirs,false);
    for (j = 0 ; j<dirs; j = j +1) begin
      exename = appsearchdirs[j] & rawname & "\\" & rawname & ".exe";
    LogText(0,"UpdateExistingInstallationTClassDBLocationEFAfter a Looking for: " & exename);
      if (FileExists(exename)) then begin
        exefoundf = true;
        goto LExeFound;
      end;
      exename = appsearchdirs[j] & rawname & "\\HansaWorld.exe";
    LogText(0,"UpdateExistingInstallationTClassDBLocationEFAfter b Looking for: " & exename);
      if (FileExists(exename)) then begin
        exefoundf = true;
        goto LExeFound;
      end;
    end;
  end;
LExeFound:;
  if (exefoundf) then begin
    RepSpec.f2 = exename;
    PutWindowRecord(wn,RepSpec);
  end;
LUpdateExistingInstallationTClassDBLocationEFAfter:;
  UpdateExistingInstallationTClassDBLocationEFAfter = res;
  return;
end;

function Boolean UpdateExistingInstallationTClassExeLocationEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record RcVc RepSpec;
  string 255 ext,fname,rawname,path,dbname,appsearchdir;
  Boolean dbfoundf;

  GetWindowRecord(wn,RepSpec);
  if (blank(RepSpec.f2) or nonblank(RepSpec.f1)) then begin
    goto LUpdateExistingInstallationTClassExeLocationEFAfter;
  end;
  fname = BaseName(RepSpec.f2);

  path = DirName(RepSpec.f2);
  if (WindowsMode) then begin
    path = path & "\\";
  end else begin
    path = path & "/";
  end;
  ext = ExtName(fname);
  if (len(ext)!=3) then begin
    rawname = fname;
  end else begin
    rawname = left(fname,len(fname)-len(ext)-1);
  end;
//  LogText(0,"UpdateExistingInstallationTClassExeLocationEFAfter path:" & path & " fname:" & fname & " rawname:" & rawname & " ext:" & ext);

  dbfoundf = SetIfExists(path & rawname & ".hdf",dbname);
  if (dbfoundf) then begin goto LDBFound; end;
  dbfoundf = SetIfExists(path & rawname & ".HDB",dbname);
  if (dbfoundf) then begin goto LDBFound; end;
  dbfoundf = CheckForHDBs(path,dbname);
  if (dbfoundf) then begin goto LDBFound; end;
  if (WindowsMode) then begin
    rawname = BaseName(path);
    appsearchdir = GetHomeDir & "\\AppData\\Local\\VirtualStore\\Program Files\\HansaWorld\\" & rawname & "\\";
//    LogText(0,"UpdateExistingInstallationTClassExeLocationEFAfter appsearchdir:" & appsearchdir);
    dbfoundf = CheckForHDBs(appsearchdir,dbname);
    if (dbfoundf) then begin goto LDBFound; end;
    appsearchdir = GetHomeDir & "\\AppData\\Local\\VirtualStore\\Program Files\\" & rawname & "\\";
//    LogText(0,"UpdateExistingInstallationTClassExeLocationEFAfter appsearchdir:" & appsearchdir);
    dbfoundf = CheckForHDBs(appsearchdir,dbname);
    if (dbfoundf) then begin goto LDBFound; end;
  end else begin
    if (StrBegin(path,"/Applications/")) then begin
//      LogText(0,"Looking for:" & GetHomeDir & "/Library/Application Support/HansaWorld/" & rawname & ".hdf");
      dbfoundf = SetIfExists(GetHomeDir & "/Library/Application Support/HansaWorld/" & rawname & ".hdf",dbname);
      if (dbfoundf) then begin goto LDBFound; end;
    end;
  end;
LDBFound:;
  if (dbfoundf) then begin
    RepSpec.f1 = dbname;
    PutWindowRecord(wn,RepSpec);
  end;
LUpdateExistingInstallationTClassExeLocationEFAfter:;
  UpdateExistingInstallationTClassExeLocationEFAfter = res;
  return;
end;

global
function Boolean UpdateExistingInstallationTClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "f1": res = UpdateExistingInstallationTClassDBLocationEFAfter(wn,fn,rownr,changed);
    case "f2": res = UpdateExistingInstallationTClassExeLocationEFAfter(wn,fn,rownr,changed);
  end;
  UpdateExistingInstallationTClassAfterEditField = res;
  return;
end;

global
function LongInt FindSubFoldersWithHDBs(string folder,var array string subfolders)
begin
  LongInt res,i,n;
  string 255 searchfolder,dbname,fslash;
  n = CountFoldersInDir(folder);

  res = 0;
  if (WindowsMode) then begin
    fslash = "\\";
  end else begin
    fslash = "/";
  end;
  for (i = 0; i<n; i = i + 1) begin
    searchfolder = GetFolderNameInDir(folder,i);
    if (searchfolder!="oldver") then begin
      if (CheckForHDBs(folder & fslash & searchfolder & fslash,dbname)) then begin
        subfolders[res] = searchfolder;
//        LogText(0,"FindSubFoldersWithHDBs: searchfolder:" & searchfolder & " res:" & res);
        res = res+1;
      end;
    end;
  end;
  FindSubFoldersWithHDBs = res;
end;

global
function Boolean UpdateExistingInstallationTClassOnOpenWindow(Integer wn)
begin
  Boolean dbfoundf,exefoundf;
  array string 255 afolders,appsearchdirs;
  string 255 appsearchdir,dbname,ext,rawname,exename,fname;
  LongInt i,n,dirs,subs;
  Integer nwn;
  record RcVc RepSpec;

  appsearchdir = GetHomeDir & "/Library/Application Support/HansaWorld/";
  n = CountFoldersInDir(appsearchdir);
  if (n==0) then begin

    dirs = UpgradeGetBaseFolders(appsearchdirs,true);
    for (i = 0; i<dirs; i = i +1) begin
      if (CheckForHDBs(appsearchdirs[i],dbname)) then begin
        n = n+1;
      end;
      subs = FindSubFoldersWithHDBs(appsearchdirs[i],afolders);
      if (subs==1 and n==0) then begin
        CheckForHDBs(appsearchdirs[i] & afolders[0] & "\\",dbname);
      end;
      n = n+subs;
    end;
  end;

  if (n==1) then begin
    GetWindowRecord(wn,RepSpec);
    if (WindowsMode) then begin
      fname = dbname;
    end else begin
      fname = GetFolderNameInDir(appsearchdir,0);
      dbname = appsearchdir & fname;
      dbfoundf = true;
    end;
    RepSpec.f1 = dbname;
    ext = ExtName(fname);
    rawname = left(fname,len(fname)-len(ext)-1);
    if (WindowsMode) then begin
      dirs = UpgradeGetBaseFolders(appsearchdirs,false);
      for (i = 0 ; i<dirs; i = i +1) begin
        exefoundf = SetIfExists(appsearchdirs[i] & rawname & ".exe",exename);
      end;
    end else begin
      exefoundf = SetIfExists("/Applications/" & rawname & ".app",exename);
    end;
    if (exefoundf) then begin
      RepSpec.f2 = exename;
    end;
    PutWindowRecord(wn,RepSpec);
  end;
  if (n>1) then begin
    nwn = OpenWindow("UpdateExistingInstallationSelectTClass",1,wn,"","",RepSpec);
  end;

  UpdateExistingInstallationTClassOnOpenWindow = true;
  return;
end;

global
updating procedure UpdateExistingInstallationSelectFile(string fieldname)
begin
  Integer wn;
  record RcVc RepSpec;

  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  WindowFieldGoto(wn,RepSpec,-1,fieldname,true);
  OpenPasteWindow(wn,"PasteOpenFile","");
end;

global
updating procedure UpdateExistingInstallationSelectFileF1()
begin
  UpdateExistingInstallationSelectFile("f1");
end;

global
updating procedure UpdateExistingInstallationSelectFileF2()
begin
  UpdateExistingInstallationSelectFile("f2");
end;
