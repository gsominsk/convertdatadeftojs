remote function Boolean GetFullCurncySalesRate (var string,Date,var val,var val,var val,var val,var val);
remote function Boolean GetFullCurncyPurchaseRate (var string,Date,var val,var val,var val,var val,var val);
remote function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);

procedure ForexTRSumup(var record ForexTRVc FTRr)
begin
  FTRr.BaseTotal = MulRateToBase1(FTRr.CurncyCode,FTRr.Total,FTRr.FrRate,FTRr.ToRateB1,FTRr.ToRateB2,FTRr.BaseRate1,FTRr.BaseRate2,DefaultCurRoundOff);
  return;
end;

function Boolean ForexTRDClassTotalEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record ForexTRVc FTRr;
  
  if (changedf) then begin
    res = true;
    GetWindowRecord(wn,FTRr);
    ForexTRSumup(FTRr);
    PutWindowRecord(wn,FTRr);        
  end;
  ForexTRDClassTotalEFAfter = res;
  return;
end;

procedure GetForexTRRate(var record ForexTRVc FTRr)
begin
  switch (FTRr.Type) begin
    case kForexTRTypeSell:
      GetFullCurncySalesRate(FTRr.CurncyCode,FTRr.TransDate,FTRr.FrRate,FTRr.ToRateB1,FTRr.ToRateB2,FTRr.BaseRate1,FTRr.BaseRate2);
    case kForexTRTypeBuy:
      GetFullCurncyPurchaseRate(FTRr.CurncyCode,FTRr.TransDate,FTRr.FrRate,FTRr.ToRateB1,FTRr.ToRateB2,FTRr.BaseRate1,FTRr.BaseRate2);
  end;
  ForexTRSumup(FTRr);
  return;
end;

function Boolean ForexTRDClassCurncyCodeEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record ForexTRVc FTRr;
  
  if (changedf) then begin
    res = true;
    GetWindowRecord(wn,FTRr);
    GetForexTRRate(FTRr);
    PutWindowRecord(wn,FTRr);        
  end;
  ForexTRDClassCurncyCodeEFAfter = res;
  return;
end;

function Boolean ForexTRDClassTransDateEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record ForexTRVc FTRr;
  
  if (changedf) then begin
    res = true;
    GetWindowRecord(wn,FTRr);
    GetForexTRRate(FTRr);
    PutWindowRecord(wn,FTRr);        
  end;
  ForexTRDClassTransDateEFAfter = res;
  return;
end;

function Boolean ForexTRDClassCustCodeEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record ForexTRVc FTRr;
  record CUVc CUr;
  
  if (changedf) then begin
    res = true;
    GetWindowRecord(wn,FTRr);
    CUr.Code = FTRr.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      FTRr.CustCode = CUr.Code;
      FTRr.CustName = CUr.Name;
      FTRr.Addr0 = CUr.InvAddr0;
      FTRr.Addr1 = CUr.InvAddr1;
      FTRr.Addr2 = CUr.InvAddr2;
      FTRr.Addr3 = CUr.InvAddr3;
      FTRr.Addr4 = CUr.InvAddr4;
      FTRr.DocType = CUr.DocType;
      FTRr.PassportNr = CUr.PassportNr;
      FTRr.Nationality = CUr.Nationality;
      FTRr.BirthDate = CUr.BirthDate;
      FTRr.LangCode = CUr.LangCode;
      PutWindowRecord(wn,FTRr);        
    end;
  end;
  ForexTRDClassCustCodeEFAfter = res;
  return;
end;

global
function Boolean ForexTRDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "CustCode": res = ForexTRDClassCustCodeEFAfter(wn,changed!=0);
    case "CurncyCode": res = ForexTRDClassCurncyCodeEFAfter(wn,changed!=0);
    case "TransDate": res = ForexTRDClassTransDateEFAfter(wn,changed!=0);
    case "Total": res = ForexTRDClassTotalEFAfter(wn,changed!=0);
  end;
  ForexTRDClassAfterEditField = res;
  return;
end;

global
function Boolean ForexTRDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record ForexTRVc FTRr;  
  
  res = true;
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,FTRr);
      if (FTRr.OKFlag!=0) then begin
        res = false;
      end;
    case Rs_update:
      GetPrevWindowRecord(wn,FTRr);
      if (FTRr.OKFlag!=0) then begin
        res = false;
      end;
  end;
  ForexTRDClassActiveEditField = res;
  return;
end;

global
updating function Boolean ForexTRDClassTypeButtonAfter(Integer wn,Boolean changedf)
begin        
  record ForexTRVc FTRr;  
  Boolean res;

  if (changedf) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,FTRr);
    GetForexTRRate(FTRr);
    PutWindowRecord(wn,FTRr);
  end;
  ForexTRDClassTypeButtonAfter = res;  
  return;
end;

global
function Boolean ForexTRDClassTypeButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record ForexTRVc FTRr;
  
  res = true;
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,FTRr);
      if (FTRr.OKFlag!=0) then begin
        res = false;
        if (UserCanAction("UnOKAll",false)) then begin
          res = true;
        end;
      end;
    case Rs_update:
      GetPrevWindowRecord(wn,FTRr);
      if (FTRr.OKFlag!=0) then begin
        res = false;
        if (UserCanAction("UnOKAll",false)) then begin
          res = true;
        end;
      end;
  end;
  ForexTRDClassTypeButtonAction = res;
  return;
end;

global
function Boolean ForexTRDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record ForexTRVc FTRr;
  
  res = true;
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,FTRr);
      if (FTRr.OKFlag!=0) then begin
        res = false;
        if (UserCanAction("UnOKAll",false)) then begin
          res = true;
        end;
      end;
    case Rs_update:
      GetPrevWindowRecord(wn,FTRr);
      if (FTRr.OKFlag!=0) then begin
        res = false;
        if (UserCanAction("UnOKAll",false)) then begin
          res = true;
        end;
      end;
  end;
  ForexTRDClassOKFlagButtonAction = res;
  return;
end;
