external procedure WindowFieldGotoForTouchScreen(Integer,Integer,string,Boolean);
external procedure OpenCCPayIngenicoOClass(Integer,string,string,LongInt,val,val,string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure OpenCCReversalYomaniBanksysOClass(Integer,string,string,LongInt,val,val,string);
external procedure OpenCCPayYomaniBanksysOClass(Integer,string,string,LongInt,val,val,string);
external procedure OpenCCPayVerifoneBanksysOClass(Integer,string,string,LongInt,val,val,string);
remote procedure AddMultiBuyDiscountItems_IVCashVc(var record IVCashVc);
external procedure OpenCCPayRahaxiDClass(Integer,Integer,LongInt,val,val,string);
external procedure OpenCCPaySteriaDClass(Integer,Integer,LongInt,val,val,string);
external procedure IVCashToCredit();
external function string 40 SerialNrSClassSpecPName(string);
remote procedure IVCashSumup(var record IVCashVc,Boolean);


global
function Boolean IVCashDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer updatemode,insertmode;
  record CYBlock CYRec;
  record RahaxiBlock Rahaxib; 
  record CashierDefBlock CDb;

  insertmode = 1;//Rs_insert
  updatemode = 2;
  res = true; 
  if (fieldname=="TransDate") then begin
    BlockLoad(CYRec);
    if (CYRec.AllowTransDateEdit==0) then begin
      res = false;
      goto LIVCashDClassActiveEditField;
    end;
  end;
  if (wnst==updatemode) then begin  
    GetPrevWindowRecord(wn,IVCashr);
    BlockLoad(Rahaxib);
    if (IVCashr.OKFlag!=0) then begin    
      res = false;  
      switch (fieldname) begin
//        case "SalesMan": res = true;//reported as bug
        case "PayDate": res = true;
        case "InvComment": res = true;
        case "VATNr": res = true;
        case "ClientContact": res = true;
        case "LangCode": res = true;
        case "ivcashcommand": res = true;
      end;    
    end else begin
      switch (fieldname) begin
        case "OfficialSerNr2": 
          if (HasLocalization("PRT")) then begin
            res = IVCashr.Status==kRecordStatusManual or IVCashr.Status==kRecordStatusRecovered;
          end;
        case "Spec": 
          BlockLoad(CDb);
          if (UserCanAction("ChangeIVItemSpec",CDb.CashSalesToFiscalControlUnit==0)==false) then begin res = false; end;
        case "Price":
          BlockLoad(CDb);
          if (UserCanAction("ChangeUnitPrices",CDb.CashSalesToFiscalControlUnit==0)==false) then begin res = false; end;
        case "vRebate":
          if (UserCanAction("ChangeUnitPrices",true)==false) then begin res = false; end;
        case "RebCode": 
          if (UserCanAction("ChangeDiscountMatrixonIVCash",false)==false) then begin res = false; end;
        case "touchscreenitemprice":
          if (UserCanAction("ChangeUnitPrices",true)==false) then begin res = false; end;
        case "CreditCard": 
          if (rownr>=0) then begin
            MatRowGet(IVCashr,rownr,IVCashrw);
            if (IVCashrw.stp==kInvoiceRowTypeCreditCardPayment) then begin
              res = blank(IVCashrw.AuthorizationCode);
            end;
          end else begin
            res = blank(IVCashr.AuthorizationCode);
          end;        
        case "AuthorizationCode": 
          if (rownr>=0) then begin
            MatRowGet(IVCashr,rownr,IVCashrw);
            if (IVCashrw.stp==kInvoiceRowTypeCreditCardPayment) then begin
              res = blank(IVCashrw.AuthorizationCode);
            end;
          end else begin
            res = blank(IVCashr.AuthorizationCode);
          end;        
        case "VATNr": res = HasLocalization("PRT")==false;
        case "Addr0": res = HasLocalization("PRT")==false;
        case "RecValue": res = (Rahaxib.TerminalType==kLocalCCTerminalNone);
        case "CreditCard2": res = (Rahaxib.TerminalType==kLocalCCTerminalNone);
        case "AuthorizationCode2": res = (Rahaxib.TerminalType==kLocalCCTerminalNone);
        case "RecValue2": res = (Rahaxib.TerminalType==kLocalCCTerminalNone);
        case "MotherArtCode": res = false;
        case "RecipeQuant": res = false;
        case "Recepy": res = false;
        case "ArtCode": 
          MatRowGet(IVCashr,rownr,IVCashrw);
          switch (IVCashrw.stp) begin
            case kInvoiceRowTypeStructuredItemComponent:
              res = false;
          end;
        case "Quant": 
          MatRowGet(IVCashr,rownr,IVCashrw);
          switch (IVCashrw.stp) begin
            case kInvoiceRowTypeStructuredItemComponent:
              res = false;
          end;
      end;
    end;
  end;
  if (wnst==insertmode) then begin
    GetWindowRecord(wn,IVCashr);
    if (IVCashr.OKFlag!=0) then begin
      res = false;
      goto LIVCashDClassActiveEditField;
    end;
    if (IVCashr.Invalid!=0) then begin
      res = false;
      goto LIVCashDClassActiveEditField;
    end;
    BlockLoad(Rahaxib);
    switch (fieldname) begin
      case "Spec": 
        if (UserCanAction("ChangeIVItemSpec",true)==false) then begin res = false; end;
        case "CreditCard": 
          if (rownr>=0) then begin
            MatRowGet(IVCashr,rownr,IVCashrw);
            if (IVCashrw.stp==kInvoiceRowTypeCreditCardPayment) then begin
              res = blank(IVCashrw.AuthorizationCode);
            end;
          end else begin
            res = blank(IVCashr.AuthorizationCode);
          end;        
        case "AuthorizationCode": 
          if (rownr>=0) then begin
            MatRowGet(IVCashr,rownr,IVCashrw);
            if (IVCashrw.stp==kInvoiceRowTypeCreditCardPayment) then begin
              res = blank(IVCashrw.AuthorizationCode);
            end;
          end else begin
            res = blank(IVCashr.AuthorizationCode);
          end;        
      case "RecValue": res = (Rahaxib.TerminalType==kLocalCCTerminalNone);
      case "CreditCard2": 
        res = blank(IVCashr.AuthorizationCode2);
      case "AuthorizationCode2": 
        res = blank(IVCashr.AuthorizationCode2);
      case "RecValue2": res = (Rahaxib.TerminalType==kLocalCCTerminalNone);
      case "MotherArtCode": res = false;
      case "RecipeQuant": res = false;
      case "Recepy": res = false;
      case "ArtCode": 
        MatRowGet(IVCashr,rownr,IVCashrw);
        switch (IVCashrw.stp) begin
          case kInvoiceRowTypeStructuredItemComponent:
            res = false;
        end;
      case "Quant": 
        MatRowGet(IVCashr,rownr,IVCashrw);
        switch (IVCashrw.stp) begin
          case kInvoiceRowTypeStructuredItemComponent:
            res = false;
        end;
    end;
    if (rownr>=0) then begin
      MatRowGet(IVCashr,rownr,IVCashrw);
      switch (fieldname) begin
        case "DownPaidSum": if (IVCashrw.OrdQuant==0) then begin res = false; end;
        case "Price":
          if (UserCanAction("ChangeUnitPrices",true)==false) then begin res = false; end;
      end;  
    end;
  end;
  switch (fieldname) begin
    case "SalesMan": 
      if (UserCanAction("AllowSalesmanChangeOnPOS",false)==false) then begin
        res = false;
      end;
  end;
LIVCashDClassActiveEditField:;  
  IVCashDClassActiveEditField = res;
  RETURN;
END;


global
function Boolean IVCashDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record IVCashVc IVCashr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,IVCashr);
    if (IVCashr.OKFlag!=0) then begin
      res = false;
    end;
    if (IVCashr.Invalid!=0) then begin
      res = false;
    end;    
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,IVCashr);
    if (IVCashr.OKFlag!=0) then begin
      res = false;
    end;
    if (IVCashr.Invalid!=0) then begin
      res = false;
    end;
  end;  
  IVCashDClassOKFlagButtonAction = res;
  RETURN;
END;

global
function Boolean IVCashDClassIPBookVATButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  
  res = false;
  IVCashDClassIPBookVATButtonAction = res;
  return;
end;

global
function Boolean IVCashDClassInvalidButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record IVCashVc IVCashr;
  Integer normalmode,updatemode;
 
  res = false;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,IVCashr);
    if (IVCashr.Invalid==0) then begin
      res = true;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,IVCashr);
    if (IVCashr.Invalid==0) then begin
      res = true;
    end;
  end;  
  IVCashDClassInvalidButtonAction = res;
  RETURN;
END;

global 
function Boolean IVCashDClassInsertRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;

  res = true;
  switch (WindowState(wn)) begin
    case 0://Rs_normal
      GetWindowRecord(wn,IVCashr);
      if (IVCashr.OKFlag!=0) then begin res = false; end;
      if (IVCashr.Invalid!=0) then begin res = false; end;
    case 1://Rs_insert
      res = true;
    case 2://Rs_update
      GetPrevWindowRecord(wn,IVCashr);
      if (IVCashr.OKFlag!=0) then begin res = false; end;
      if (IVCashr.Invalid!=0) then begin res = false; end;
    otherwise
      res = false;
  end;
  if (res) then begin
    MatRowGet(IVCashr,rownr,IVCashrw);
    switch (IVCashrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        res = false;
    end;
  end;
  IVCashDClassInsertRowTest = res;
  RETURN;
END;

global
function Boolean RowAlreadyVoided(var record IVCashVc IVCashr,Integer rownr)
begin
  Boolean res;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(IVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    if (IVCashrw.VoidedRowNr==rownr) then begin
      res = true;
      goto LRowAlreadyVoided; 
    end;
  end;
LRowAlreadyVoided:;  
  RowAlreadyVoided = res;
  return;
end;

global
function Boolean IVCashDClassVoidRow(var record IVCashVc IVCashr,Integer rownr)
begin
  Boolean res;
  row IVCashVc IVCashrw;
  record LocalMachineBlock LMb;
  
  res = false;
  MatRowGet(IVCashr,rownr,IVCashrw);
  if (IVCashrw.stp==kInvoiceRowTypeNormal) then begin
    if (RowAlreadyVoided(IVCashr,rownr)==false) then begin
      BlockLoad(LMb);
      IVCashrw.ovst = 1;
      MatRowPut(IVCashr,rownr,IVCashrw);
      if (LMb.IncrementalReceiptPrinting!=0) then begin
        IVCashrw.ovst = 0;
        IVCashrw.stp = kInvoiceRowTypeVoid;
        IVCashrw.VoidedRowNr = rownr;
        IVCashrw.VoidedSign = CurrentUser;
        IVCashrw.Quant = -IVCashrw.Quant;
        MatRowPut(IVCashr,MatRowCnt(IVCashr),IVCashrw);
      end else begin
        ClearRow(IVCashr,IVCashrw,kInvoiceRowTypeUpdateMark);
        IVCashrw.ovst = 0;
        IVCashrw.stp = kInvoiceRowTypeUpdateMark;
        IVCashrw.VoidedRowNr = rownr;
        IVCashrw.VoidedSign = CurrentUser;
        MatRowPut(IVCashr,MatRowCnt(IVCashr),IVCashrw);
      end;
      IVCashSumup(IVCashr,true);
      res = true;
    end;
  end;
  IVCashDClassVoidRow = res;
  return;
end;

global 
function Boolean IVCashDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Boolean res,puf;
  Integer i,rwcnt;
  record INVc INr;

  res = true;
  switch (WindowState(wn)) begin
    case Rs_update:
      GetPrevWindowRecord(wn,IVCashr);    
      if (IVCashr.OKFlag!=0) then begin res = false; end;
      if (IVCashr.Invalid!=0) then begin res = false; end;
      if (res) then begin
        GetWindowRecord(wn,IVCashr);    
        MatRowGet(IVCashr,rownr,IVCashrw);
        switch (IVCashrw.stp) begin
          case kInvoiceRowTypeVoid: res = false;
          case kInvoiceRowTypeCreditCardPayment:
            res = blank(IVCashrw.AuthorizationCode);
        end;
      end;
      if (res) then begin
        if (UserCanAction("AllowIVTSRowsVoid",false)) or (UserCanAction("AllowNPTSIVRowsVoid",false)) then begin
          if (IVCashDClassVoidRow(IVCashr,rownr)) then begin
            PutWindowRecord(wn,IVCashr);    
          end;
        end;
      end;
    otherwise
      GetWindowRecord(wn,IVCashr);    
      if (IVCashr.Invalid!=0) then begin res = false; end;
      MatRowGet(IVCashr,rownr,IVCashrw);
      switch (IVCashrw.stp) begin
        case kInvoiceRowTypeVoid: res = false;
        case kInvoiceRowTypeNormal:
          if (IVCashrw.ovst!=0) then begin res = false; end;
        case kInvoiceRowTypeStructuredItemComponent:
          res = false;
        case kInvoiceRowTypeCreditCardPayment:
          res = blank(IVCashrw.AuthorizationCode);
      end;
  end;
  if (res) then begin
    MatRowGet(IVCashr,rownr,IVCashrw);
    if (IVCashrw.Quant!=0) then begin
      if (ReadFirstItem(IVCashrw.ArtCode,INr,false,false)) then begin
        if (INr.ItemType==kItemTypeStructured) then begin
          if (INr.ExplodeRec!=0) then begin
            rwcnt = MatRowCnt(IVCashr);
            i = rownr + 1;
            while (i<rwcnt) begin
              MatRowGet(IVCashr,i,IVCashrw); 
              if (IVCashrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
                MatRowDelete(IVCashr,i);
                puf = true;
              end else begin
                i = rwcnt;
              end;
            end;
          end;
        end;
      end;
    end;
    if (puf) then begin
      PutWindowRecord(wn,IVCashr);    
    end;
  end;
LIVCashDClassDeleteRowTest:;  
  IVCashDClassDeleteRowTest = res;
  return;
end;

global 
function Boolean IVCashDClassOverStrikeTest(Integer wn,Integer rownr)
begin
  IVCashDClassOverStrikeTest = IVCashDClassDeleteRowTest(wn,rownr);
  return;
end;

global
function Boolean IVCashDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  record INVc INr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,IVCashr);    
    IVCashSumup(IVCashr,true);
    AddMultiBuyDiscountItems_IVCashVc(IVCashr);
    PutWindowRecord(wn,IVCashr);  
  end;
  IVCashDClassOnOverStrike = true;
  RETURN;
END;

procedure IVCashDClassSpecPasteNameArtCode(Integer wn,var string psname)
begin
  record IVCashVc IVCashr;
  Integer rownr;

  GetWindowRecord(wn,IVCashr);
  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,false);
  WindowFieldGoto(wn,IVCashr,rownr,"ArtCode",false);
  return;
end;

global
function string 40 IVCashDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "SerialNr": psname = SerialNrSClassSpecPName(defpsname);
    case "ArtCode": IVCashDClassSpecPasteNameArtCode(wn,psname);
  end;
  IVCashDClassSpecPasteName = psname;
  return;
end;

global
function Boolean POSIVDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;

  res = IVCashDClassActiveEditField(wn,fieldname,fn,wnst,rownr,changed);
  POSIVDClassActiveEditField = res;
  RETURN;
END;

global
function Boolean POSIVDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;

  res = IVCashDClassOKFlagButtonAction(wn,value);
  POSIVDClassOKFlagButtonAction = res;
  RETURN;
END;

global
function Boolean POSIVDClassInvalidButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  
  res = IVCashDClassInvalidButtonAction(wn,value);
  POSIVDClassInvalidButtonAction = res;
  RETURN;
END;

global 
function Boolean POSIVDClassInsertRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
 
  res = IVCashDClassInsertRowTest(wn,rownr);
  POSIVDClassInsertRowTest = res;
  RETURN;
END;

global 
function Boolean POSIVDClassDeleteRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
 
  res = IVCashDClassDeleteRowTest(wn,rownr);
  POSIVDClassDeleteRowTest = res;
  RETURN;
END;

global 
function Boolean POSIVDClassOverStrikeTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
 
  res = IVCashDClassOverStrikeTest(wn,rownr);
  POSIVDClassOverStrikeTest = res;
  RETURN;
END;

global 
function Boolean POSIVDClassOnOverStrike(Integer wn, Integer rownr)
BEGIN
  Boolean res;
 
  res = IVCashDClassOnOverStrike(wn,rownr);
  POSIVDClassOnOverStrike = res;
  RETURN;
END;

global
function string 40 POSIVDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = IVCashDClassSpecPasteName(wn,defpsname);
  POSIVDClassSpecPasteName = psname;
  return;
end;

global
function string 255 POSCommandText(Integer action,Boolean addspacef)
begin
  string 255 res;
  record POSCommandsBlock POSCb;
  row POSCommandsBlock POSCbrw;
  Integer i,rwcnt;
  
  BlockLoad(POSCb);
  rwcnt = MatRowCnt(POSCb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POSCb,i,POSCbrw);
    if (action==POSCbrw.Action) then begin
      res = POSCbrw.Text;
      if (addspacef) then begin
        res = res & " ";
      end;
      goto LPOSCommandText;
    end;
  end;
LPOSCommandText:; 
  POSCommandText = res; 
  return;
end;

global 
procedure CashPOSPIVCashsm()
begin
  record IVCashVc IVCashr;
  Integer wn;

  wn = CurWindow;
//  KeyPadEnter(wn);
  DeselectWindow(wn,true);
  GetWindowRecord(wn,IVCashr);
  PutWindowString(wn,"ivcashcommand",POSCommandText(2,true));
  //WindowFieldGoto(wn,IVCashr,-1,"ivcashcommand",false);
  WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",false);
//  DisplayIVSubTotalAction(IVr);
LCashPOSPIVCashsm:;  
  return;
end;

global 
procedure CredCardPOSPIVCashsmExecute(string paymode,string label)
begin
  record IVCashVc IVCashr;
  Integer wn,rownr;
  record RahaxiBlock Rahaxib; 

  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,IVCashr);
  BlockLoad(Rahaxib);
  if (Rahaxib.TerminalType==kLocalCCTerminalNone) then begin
    PutWindowString(wn,"ivcashcommand",POSCommandText(6,true));
    //WindowFieldGoto(wn,IVCashr,-1,"ivcashcommand",false);
    WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",false);
  end else begin
    switch (Rahaxib.TerminalType) begin
      case kLocalCCTerminalRahaxi: OpenCCPayRahaxiDClass(wn,1,IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode);
      case kLocalCCTerminalSteriaCOM: OpenCCPaySteriaDClass(wn,1,IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode);
      case kLocalCCTerminalSteriaIP: OpenCCPaySteriaDClass(wn,1,IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode);
      case kLocalCCTerminalYomaniBanksys: OpenCCPayYomaniBanksysOClass(wn,paymode,label,IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode);
      case kLocalCCTerminalIngenico6550: OpenCCPayIngenicoOClass(wn,paymode,label,IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode);
      case kLocalCCTerminalVerifoneBanksys: OpenCCPayVerifoneBanksysOClass(wn,paymode,label,IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode);
    end;
  end;
  return;
end;

global 
procedure CredCardReversalPOSPIVCashsmExecute(string paymode,string label)
begin
  record IVCashVc IVCashr;
  Integer wn,rownr;
  record RahaxiBlock Rahaxib; 

  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,IVCashr);
  BlockLoad(Rahaxib);
  switch (Rahaxib.TerminalType) begin
    case kLocalCCTerminalYomaniBanksys: OpenCCReversalYomaniBanksysOClass(wn,paymode,label,IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode);
  end;
  return;
end;

global 
procedure CredCardPOSPIVCashsm()
begin
  CredCardPOSPIVCashsmExecute("","");
  return;
end;

global 
procedure FinishPOSPIVCashsm()
begin
  record IVCashVc IVCashr;
  Integer wn,rownr;

  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,IVCashr);
  PutWindowString(wn,"ivcashcommand",POSCommandText(4,true));
  KeypadEnter(wn);
  return;
end;

global 
procedure ReturnPOSPIVCashsm()
begin
  IVCashToCredit;
  return;
end;

global 
procedure QuantityPOSPIVCashsm()
begin
  record IVCashVc IVCashr;
  Integer wn;

  wn = CurWindow;
//  KeyPadEnter(wn);
  DeselectWindow(wn,true);
  GetWindowRecord(wn,IVCashr);
  PutWindowString(wn,"ivcashcommand",POSCommandText(1,false));
  //WindowFieldGoto(wn,IVCashr,-1,"ivcashcommand",false);
  WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",false);
//  DisplayIVSubTotalAction(IVr);
LQuantityPOSPIVCashsm:;  
  return;
end;

global 
procedure DeletePOSPIVCashsm()
begin
  record IVCashVc IVCashr;
  Integer wn;

  wn = CurWindow;
//  KeyPadEnter(wn);
  DeselectWindow(wn,true);
  GetWindowRecord(wn,IVCashr);
  PutWindowString(wn,"ivcashcommand",POSCommandText(18,true));
  //WindowFieldGoto(wn,IVCashr,-1,"ivcashcommand",false);
  WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",false);
//  DisplayIVSubTotalAction(IVr);
LDeletePOSPIVCashsm:;  
  return;
end;

global 
procedure KeyPadPOSPIVCashsm()
begin
  record RcVc RepSpec;
  Integer nwn;

  nwn = OpenWindow("EnterNumberWClass",0,CurWindow,"","",RepSpec);
  return;
end;

global
function Boolean NPTSIVCashDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  NPTSIVCashDClassActiveEditField = IVCashDClassActiveEditField(wn,fieldname,fn,wnst,rownr,changed);
  return;
end;

/*
global
function Boolean NPTSIVCashDClassUpdateTest(Integer wn)
begin
  Boolean res;
  record IVCashVc IVCashr;
  
  GetWindowRecord(wn,IVCashr);
  res = (IVCashr.OKFlag==0) and (IVCashr.Invalid==0);
  NPTSIVCashDClassUpdateTest = res;
  return;
end;
*/

global 
function Boolean NPTSIVCashDClassInsertRowTest(Integer wn,Integer rownr)
begin
  NPTSIVCashDClassInsertRowTest = IVCashDClassInsertRowTest(wn,rownr);
  return;
end;

global 
function Boolean NPTSIVCashDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  NPTSIVCashDClassDeleteRowTest = IVCashDClassDeleteRowTest(wn,rownr);
  return;
end;

/*
global 
function Boolean NPTSIVCashDClassOverStrikeTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
 
  res = IVCashDClassOverStrikeTest(wn,rownr);
  NPTSIVCashDClassOverStrikeTest = res;
  RETURN;
END;
*/

global
function Boolean NPTSIVCashDClassOnOverStrike(Integer wn,Integer rownr)
begin
  NPTSIVCashDClassOnOverStrike = IVCashDClassOnOverStrike(wn,rownr);
  return;
end;

global
function string 40 NPTSIVCashDClassSpecPasteName(Integer wn,string defpsname)
begin
  NPTSIVCashDClassSpecPasteName = IVCashDClassSpecPasteName(wn,defpsname);
  return;
end;
