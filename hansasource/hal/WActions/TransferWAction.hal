#ifdef HAL

external procedure PasteInTransferTimes(var record TransferVc);
external updating procedure RecordActionTransfer_Print(var record TransferVc,string,Boolean);

procedure GetTramo4EventType(String EventType,Integer FromOrTo,var String Res)
begin
  Record ReqTranfVc ReqTranfr;
  Boolean Bool;

  Res ="";
  Bool = true;
  ReqTranfr.EventType = EventType;
  while (loopkey("EventType",ReqTranfr,1,Bool)) begin
    if (ReqTranfr.EventType <> EventType) then begin
      Bool = false;
    end else begin
      if (ReqTranfr.Relatedf == FromOrTo) then begin
        Res = ReqTranfr.Route;
      end; 
    end;   
  end;
  return;
end;

global
Procedure GetEventData(String ExcurType,var Integer res,var Integer bt1,var Integer bt2)
begin
  record ExcurTypeVc Excurtyper;
  record ExcurGroupVc ExcurGroupr;

  res = -1;
  Excurtyper.Code = ExcurType;
  if readfirstmain(Excurtyper,1,true) then begin
    ExcurGroupr.Code = Excurtyper.ExGroup;
    bt1 = Excurtyper.BeforeTime1;
    bt2 = Excurtyper.BeforeTime2;
    if readfirstmain(ExcurGroupr,1,true) then begin
      res = ExcurGroupr.Tranferf;
    end;
  end;
  return;
end;  

procedure PasteGuestsInTransfer(var record TransferVc Transfer,record ExcursionVc Excur)
begin
  Integer i,rows;
  Row TransferVc Transferw;
  Row ExcursionVc Excurw;
  
  rows= MatRowCnt(Excur);
  for(i=0;i<rows;i=i+1) begin
    MatRowGet(Excur,i,Excurw); 
    Transferw.JobNr     = Excurw.JobNr;
    Transferw.GuestCode = Excurw.GuestCode;
    Transferw.GuestName = Excurw.GuestName;
    MatRowPut(Transfer,i,Transferw);
  end;
  return;
end;

global
procedure PasteEventInTransfer(var record TransferVc Transfer)
begin
  record ExcursionVc Excur;
  record ExcurTypeVc ExcurType;
  Integer handf,bt1,bt2;
  String 100 tstr;
  
  Excur.SerNr = Transfer.NrEvent;
  if ReadFirstMain(Excur,1,true) then begin
    if (Excur.Status==2) then begin
      PasteGuestsInTransfer(Transfer,Excur);
      Transfer.TransDate = Excur.TransDate;
      Transfer.ExcurType = Excur.ExcurType; 
      Transfer.Comment   = USetStr(11258) & " " & Excur.Comment;
        
      GetEventData(Transfer.ExcurType,handf,bt1,bt2);
      switch (handf) begin
     //   case 0:  MessageBox(0,"No Requiere Transfer!");
        case 1:  if (Transfer.Direction==0) then begin
                   Transfer.StartTime = AddMinutes(Excur.EndTime,-bt2);
                 end else begin
                   Transfer.EndTime =  AddMinutes(Excur.StartTime,-bt1);
                 end;
        case 2:  if (Transfer.Direction==1) then begin
                   Transfer.EndTime =  AddMinutes(Excur.StartTime,-bt1);
                 end else begin
                   Transfer.StartTime = AddMinutes(Excur.EndTime,-bt2);
                 end;
      end;  
      GetTramo4EventType(Transfer.ExcurType,Transfer.Direction,tstr);
      Transfer.Route = tstr;
      PasteInTransferTimes(Transfer);
    end else begin
      MessageBox(20157,"");
    end;
  end;
  return;
end;

function Boolean TransferDClassNrEventEFAfter(Integer wn,Integer changedf)
BEGIN
  Boolean res;
  record TransferVc Transfer;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,Transfer);
    PasteEventInTransfer(Transfer);
    PutWindowRecord(wn,Transfer);
  end;  
  TransferDClassNrEventEFAfter = res; 
  RETURN;
END;

function Boolean TransferDClassRouteEFAfter(Integer wn,Integer fn, Integer rownr,Integer changedf)
BEGIN
  Boolean res;
  record TransferVc Transfer;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,Transfer);
    PasteInTransferTimes(Transfer);
    PutWindowRecord(wn,Transfer);
  end;  
  TransferDClassRouteEFAfter = res; 
  RETURN;
END;

function Boolean TransferDClassVECodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changedf)
BEGIN
  Boolean res;
  record CUVc VEr;
  record TransferVc Transfer;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,Transfer);
    VEr.Code= Transfer.VECode;
    if ReadFirstMain(VEr,1,true) then begin
      Transfer.VEName= VEr.Name;
    end;
    PutWindowRecord(wn,Transfer);
  end;  
  TransferDClassVECodeEFAfter = res; 
  RETURN;
END;

function Boolean TransferDClassVehicleNrEFAfter(Integer wn,Integer fn, Integer rownr,Integer changedf)
BEGIN  
  Boolean res;
  record CUVc VEr;
  record TransferVc Transfer;
  record VehicleVc Vehicle;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,Transfer);
    Vehicle.Code = Transfer.VehicleNr;
    if ReadFirstMain(Vehicle,1,true) then begin
      Transfer.MainPersons = Vehicle.Person;
      Transfer.VECode  = Vehicle.VECode;
      Transfer.VEName  = Vehicle.VEName;
      Transfer.ResCode = Vehicle.ResCode;
    end;
    PutWindowRecord(wn,Transfer);
  end;  
  TransferDClassVehicleNrEFAfter = res; 
  RETURN;
END;

function Boolean TransferDClassGuestCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record TransferVc Transfer;
  row TransferVc Transferw;
  record CUVc Guestr;
  Boolean res;

  if (changedf!=0) then begin
    GetWindowRecord(wn,Transfer);
    MatrowGet(Transfer,rownr,Transferw);
    Guestr.Code = Transferw.GuestCode;
    if readfirstmain(Guestr,1,true) then begin
      Transferw.JobNr     = -1;   
      Transferw.GuestName = Guestr.Name;
    end;  
    MatrowPut(Transfer,rownr,Transferw);
    PutWindowRecord(wn,Transfer);
  end;
  TransferDClassGuestCodeEFAfter = res; 
  return;
end;

global
function Boolean TransferDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "GuestCode": res = TransferDClassGuestCodeEFAfter(wn,fn,rownr,changed);
    case "VECode": res = TransferDClassVECodeEFAfter(wn,fn,rownr,changed);
    case "Route": res = TransferDClassRouteEFAfter(wn,fn,rownr,changed);
    case "NrEvent": res = TransferDClassNrEventEFAfter(wn,changed);
    case "VehicleNr": res = TransferDClassVehicleNrEFAfter(wn,fn,rownr,changed);
  end;
  TransferDClassAfterEditField = res;
  RETURN;
END;

global
procedure PaxListbt()
begin
  record RcVc RepSpec;
  Integer wn;
  record TransferVc Transf;
  
  wn = CurWindow;
  GetWindowRecord(wn,Transf);
  if NonBlank(Transf.NrEvent) then begin
    RepSpec.repname = "TransfPaxsRn";
    RepSpec.long1   = Transf.SerNr;
    RepSpec.f1      = Transf.NrEvent;
    RepSpec.f3      = Transf.VehicleNr;
    RepSpec.f4      = Transf.MainPersons;
    RepSpec.f5      = Transf.Route;
    RepSpec.flags[0]   = Transf.Direction;
    RepSpec.sStartTime = Transf.StartTime;
    RepSpec.sEndTime   = Transf.EndTime;
    RepSpec.Media   = mtScreen;    

    RunReport(RepSpec,0);
  end else begin
    MessageBox(0,USetStr(2141));
  end;
  return;
end;


global
updating 
function Boolean TransferDClassPrint(Integer wn,Boolean previewf)
BEGIN
  record TransferVc Transferr;
  Integer normalmode,tf;
  string 20 docname;

  normalmode = 0;//Rs_normal
  DeselectWindow(wn,false);
  GetWindowRecord(wn,Transferr);  
  if ((WindowState(wn)==normalmode) and (previewf==false)) then begin
    RecordActionTransfer_Print(Transferr,"",true);
  end else begin
    if (PrintDocument(Transferr,"TransferDocForm",true)) then begin end;
  end;

  RETURN;
END;
#endif
