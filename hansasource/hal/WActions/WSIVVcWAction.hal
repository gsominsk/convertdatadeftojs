external procedure CalcExtra(val,string,var val);
external procedure CalcSum(val,val,val,val,var val,Integer);

global
function Boolean WSIVDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record WSIVVc WSIVr;
  
  res = true;
  GetWindowRecord(wn,WSIVr);
  switch (fieldname) begin
    case "CUCode": res = false;
    case "SerNr": res = false;
    case "EMCode": res = false;
    case "ArtCode": res = false;
    case "TransDate": res = false;
    case "UsedQty": res = false;
    case "GP": res = false;
    case "InvQty": if (WSIVr.InvNr>0) then begin res = false; end;
    case "Price": if (WSIVr.InvNr>0) then begin res = false; end;
    case "Markup": if (WSIVr.InvNr>0) then begin res = false; end;
    case "Sum": if (WSIVr.InvNr>0) then begin res = false; end;
    case "CostPrice": if (WSIVr.InvNr>0) then begin res = false; end;
  end;
  WSIVDClassActiveEditField = res;
  RETURN;
END;

global
function Boolean  WSIVDClassItemTypeButtonAction(Integer wn,Integer value)
begin
  Boolean res;
 
  res = false;
  WSIVDClassItemTypeButtonAction = res;
  return;
end;

global
function Boolean  WSIVDClassRecTypeButtonAction(Integer wn,Integer value)
begin
  Boolean res;
 
  res = false;
  WSIVDClassRecTypeButtonAction = res;
  return;
end;

global
function Boolean  WSIVDClassTypeButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record WSIVVc WSIVr;
 
  res = true;
  GetWindowRecord(wn,WSIVr);
  if (WSIVr.InvNr>0) then begin
    res = false;
  end;
  WSIVDClassTypeButtonAction = res;
  return;
end;

procedure CalcWSIV(record WSIVVc WSIVp)
BEGIN
  record GeneralOptionBlock GenOptr;
  val t;
  
  BlockLoad(GenOptr);  

  CalcSum(WSIVp.InvQty,WSIVp.Price,0,WSIVp.Discount,t,GenOptr.UseDiscount);
  WSIVp.Sum = t;
  CalcExtra(WSIVp.Sum,WSIVp.Markup,t);
  WSIVp.Sum = WSIVp.Sum + t;
  t = WSIVp.CostPrice*WSIVp.InvQty;
  WSIVp.GP = WSIVp.Sum - t;
  RETURN;
END;

function Boolean WSIVDClassInvQtyEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record WSIVVc WSIVr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,WSIVr);
    CalcWSIV(WSIVr);
    PutWindowRecord(wn,WSIVr);
  end;
  WSIVDClassInvQtyEFAfter = res;
  RETURN;
END;

function Boolean WSIVDClassMarkupEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record WSIVVc WSIVr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,WSIVr);
    CalcWSIV(WSIVr);
    PutWindowRecord(wn,WSIVr);
  end;
  WSIVDClassMarkupEFAfter = res;
  RETURN;
END;

function Boolean WSIVDClassPriceEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record WSIVVc WSIVr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,WSIVr);
    CalcWSIV(WSIVr);
    PutWindowRecord(wn,WSIVr);
  end;
  WSIVDClassPriceEFAfter = res;
  RETURN;
END;

function Boolean WSIVDClassDiscountEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record WSIVVc WSIVr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,WSIVr);
    CalcWSIV(WSIVr);
    PutWindowRecord(wn,WSIVr);
  end;
  WSIVDClassDiscountEFAfter = res;
  RETURN;
END;

function Boolean WSIVDClassSumEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record WSIVVc WSIVr;
  Boolean res;
  record GeneralOptionBlock GenOptr;
  val t;
  
  res = true;
  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,WSIVr);
    BlockLoad(GenOptr);  
    CalcSum(WSIVr.InvQty,WSIVr.Price,0,WSIVr.Discount,t,GenOptr.UseDiscount);
    t = WSIVr.Sum - t;
    WSIVr.Markup = t;
    t = WSIVr.CostPrice*WSIVr.InvQty;
    WSIVr.GP = WSIVr.Sum - t;
    PutWindowRecord(wn,WSIVr);
  end;
  WSIVDClassSumEFAfter = res;
  RETURN;
END;

function Boolean WSIVDClassCostPriceEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record WSIVVc WSIVr;
  Boolean res;
  val t;
  
  res = true;
  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,WSIVr);
    t = WSIVr.CostPrice*WSIVr.InvQty;
    WSIVr.GP = WSIVr.Sum - t;
    PutWindowRecord(wn,WSIVr);
  end;
  WSIVDClassCostPriceEFAfter = res;
  RETURN;
END;

global
function Boolean WSIVDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "InvQty": res = WSIVDClassInvQtyEFAfter(wn,rownr,changed);
    case "Markup": res = WSIVDClassMarkupEFAfter(wn,rownr,changed);
    case "Price": res = WSIVDClassPriceEFAfter(wn,rownr,changed);
    case "Discount": res = WSIVDClassDiscountEFAfter(wn,rownr,changed);
    case "Sum": res = WSIVDClassSumEFAfter(wn,rownr,changed);
    case "CostPrice": res = WSIVDClassCostPriceEFAfter(wn,rownr,changed);
  end;
  WSIVDClassAfterEditField = res;
  RETURN;
END;
