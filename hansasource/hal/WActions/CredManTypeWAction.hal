remote function Boolean CredManTypeVc_PasteArtCode(var record CredManTypeVc,Integer);
remote procedure CredManTypeVc_PasteQuant(var record CredManTypeVc,Integer);
remote procedure CredManTypeVc_PastevRebate(var record CredManTypeVc,Integer);

procedure CredManTypeUpdateAndSumup(var record CredManTypeVc CredManTyper,Integer rownr,string whichone)
begin
  row CredManTypeVc CredManTyperw;
  
  switch (whichone) begin
    case "Price":
      if (rownr>-1 and rownr<MatRowCnt(CredManTyper)) then begin
        MatRowGet(CredManTyper,rownr,CredManTyperw);
        CredManTyperw.Sum = CredManTyperw.Price * CredManTyperw.Quant;
        CredManTyperw.vRebate = BlankVal;
        MatRowPut(CredManTyper,rownr,CredManTyperw);
      end;
    case "Sum":
      if (rownr>-1 and rownr<MatRowCnt(CredManTyper)) then begin
        MatRowGet(CredManTyper,rownr,CredManTyperw);
        CredManTyperw.Price = CredManTyperw.Sum / CredManTyperw.Quant;
        CredManTyperw.vRebate = BlankVal;
        MatRowPut(CredManTyper,rownr,CredManTyperw);
      end;
  end;
//  CredManTypeSumup(CredManTyper);
  return;
end;

function Boolean CredManTypeDClassDefaultEFAfter(Integer wn,Integer rownr,Boolean changedf,string fieldname)
begin
  record CredManTypeVc CredManTyper;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManTyper);
    CredManTypeUpdateAndSumup(CredManTyper,rownr,fieldname);
    PutWindowRecord(wn,CredManTyper);   
  end; 
  CredManTypeDClassDefaultEFAfter = true;
  return;
end;

function Boolean CredManTypeDClassArtCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record CredManTypeVc CredManTyper;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManTyper);
    if (rownr>=0) then begin
      if (CredManTypeVc_PasteArtCode(CredManTyper,rownr)) then begin
      end;
    end;
    PutWindowRecord(wn,CredManTyper);   
  end; 
  CredManTypeDClassArtCodeEFAfter = true;
  return;
end;

function Boolean CredManTypeDClassQuantEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record CredManTypeVc CredManTyper;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManTyper);
    if (rownr>=0) then begin
      CredManTypeVc_PasteQuant(CredManTyper,rownr);
    end;
    PutWindowRecord(wn,CredManTyper);   
  end; 
  CredManTypeDClassQuantEFAfter = true;
  return;
end;

function Boolean CredManTypeDClassvRebateEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record CredManTypeVc CredManTyper;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManTyper);
    if (rownr>=0) then begin
      CredManTypeVc_PastevRebate(CredManTyper,rownr);
    end;
    PutWindowRecord(wn,CredManTyper);   
  end; 
  CredManTypeDClassvRebateEFAfter = true;
  return;
end;

global
function Boolean CredManTypeDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "ArtCode": res = CredManTypeDClassArtCodeEFAfter(wn,rownr,changed!=0);
    case "Quant": res = CredManTypeDClassQuantEFAfter(wn,rownr,changed!=0);
    case "vRebate": res = CredManTypeDClassvRebateEFAfter(wn,rownr,changed!=0);
    case "Sum": res = CredManTypeDClassDefaultEFAfter(wn,rownr,changed!=0,fieldname);
    case "Price": res = CredManTypeDClassDefaultEFAfter(wn,rownr,changed!=0,fieldname);
  end;
  CredManTypeDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean CredManEventDClassUpdateTest(Integer wn)
BEGIN
  Boolean res;
  
  res = false;
  CredManEventDClassUpdateTest = res;
  RETURN;
END;

global
procedure OpenSubsysCredManEventDsm()
BEGIN
  Integer wn,nwn;
  record CredManEventVc CredManEventr;
  record IVVc IVr;
  record IPVc IPr;

  wn = CurWindow; 
  GetWindowRecord(wn,CredManEventr); 
  switch (CredManEventr.FileName) begin
    case "IVVc":
      IVr.SerNr = CredManEventr.RecordNr;
      if (ReadFirstMain(IVr,1,true)) then begin
        nwn = OpenWindow("IVDClass",1,0,"","",IVr);
      end;
    case "IPVc":
      IPr.SerNr = CredManEventr.RecordNr;
      if (ReadFirstMain(IPr,1,true)) then begin
        nwn = OpenWindow("IPDClass",1,0,"","",IPr);
      end;
  end;
  RETURN;
END;

