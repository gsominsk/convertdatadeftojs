remote function Integer ProceedOnHotelGuestTouchScreenRemote_IVCashVc(record RcVc,var record IVCashVc,var string,var string);
external function Boolean FindTheUser(var record UserVc);
external procedure RestAccDchsum(record RestAccVc,Integer);
external function Boolean RestAccDchrsum(var record RestAccVc,Integer,Integer);
external function roundmode SetRoundModeD(Integer);
external function integer GetSelectedPOSItemRowIndex(integer);
external procedure RestAccDUpdatePrices(var record RestAccVc);
external function string 60 AddObjectToObjectList(string,string);
external procedure CancelNPTSCashPaymentTClass();
external procedure OpenAddQuantityTouchScreenTClass(Integer,Integer,string);
external function LongInt RestAccVcRecordDefaultsClient(LongInt,var record RestAccVc,record RestAccVc,LongInt,LongInt);
remote function val GetServiceCharge(var record RestAccVc,record LocalMachineBlock,Boolean);
external procedure M4PadString(string,Integer,string,Boolean,var string);
external procedure SetPOSWindowDisplay(string,string);
remote function Integer ProceedOnHotelGuestTouchScreenRemote(record RcVc,var record RestAccVc,var string,var string);
remote procedure RestAccSumup(var record RestAccVc,string);
remote updating procedure CloseMergedBarTab(LongInt,LongInt);
external function Integer TestMergeBarTabAllowed(record ResAccVc,var string);
external function Integer TestMoveItemToBarTabAllowed(record ResAccVc,var string);
external procedure RestAccDClass_RefreshStringList(Integer,record RestAccVc);
external procedure ExtractObj(string,var Integer,var string);
external function boolean POSButtonsForWindow(integer,var record POSButtonsVc);
remote procedure RestAccVc_AddQuant(var record RestAccVc,Integer,val,record LocalMachineBlock);
remote function Boolean RestAccVc_PasteArtCode(var record RestAccVc,Integer,record LocalMachineBlock,string,Integer,val,var string);
external procedure DisplayRestAccItem(record RestAccVc,Integer);
external procedure OpenSelectModifiers2WClass(Integer,string);
external procedure OpenCashDrawer();
external updating function Boolean RestAccDClassAfterEditField(Integer,string,Integer,Integer,Integer);
external updating function Boolean RestAccAccept2(Integer,var record RestAccVc);
external updating procedure RestAccReceiptPrint(record RestAccVc,Boolean,Boolean);

global
procedure RestAccDClassLevelTopExecute(Boolean rerunwdf)
begin
  Integer page,wn;
  
  wn = CurWindow;
  page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
  PutWindowString(wn,"touchscreenwindowpageprevious",page);  
  ActivateTile(wn,1);
  PutWindowString(wn,"touchscreenwindowpage",1)
  PutWindowString(wn,"touchscreenwindowpagestack",1);
  PutWindowString(wn,"touchscreenwindowprinterstack","*");
  if (rerunwdf) then begin
    ReRunWindowDef(wn);
  end;
  SetWindowSubset(wn,GetWindowSubset(wn));
  return;
end;

global
procedure RestAccDClassLevelTop()
begin
  RestAccDClassLevelTopExecute(true);
  return;
end;

global
procedure RestAccDClassLevelUp()
begin
  Integer page,wn,levelup;
  
  wn = CurWindow;
  levelup = StringToInt(GetWindowString(wn,"touchscreenwindowpageprevious"));  
  page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
  PutWindowString(wn,"touchscreenwindowpageprevious",levelup);  
  PutWindowString(wn,"touchscreenwindowpagestack",levelup);
  //PutWindowString(wn,"touchscreenwindowprinterstack","");
  ActivateTile(wn,levelup);
  PutWindowString(wn,"touchscreenwindowpage",levelup);
  ReRunWindowDef(wn);
  SetWindowSubset(wn,GetWindowSubset(wn));
  return;
end;

global
procedure RestAccDClassGotoPage(string tstr,string printer)
begin
  Integer page,wn;
  string 255 stack,prstack;
  
  wn = CurWindow;
  page = StringToInt(tstr);
  
  stack = GetWindowString(wn,"touchscreenwindowpagestack");
  stack = stack & "," & page;
  PutWindowString(wn,"touchscreenwindowpagestack",stack);
  
  prstack = GetWindowString(wn,"touchscreenwindowprinterstack");
  if (printer=="") then begin
    prstack = prstack & ",*";
  end else begin
    prstack = prstack & "," & printer;
  end;
  PutWindowString(wn,"touchscreenwindowprinterstack",prstack);
  
  PutWindowString(wn,"touchscreenwindowpage",page);
  
  SetWindowSubset(wn,GetWindowSubset(wn));
  SetWindowSubset(wn,page);
  ReRunWindowDef(wn);
  return;
end;

global
procedure RestAccDClassTouchScreenStackButtonExecute(string tag)
begin
  integer i,rwcnt,wn;
  string 60 ostr;
  string 60 prstr;
  Integer pos,prpos;
  string 255 stack;
  string 255 prstack;
  array string 255 stackarr;
  array string 255 prstackarr;
  longint stackend,sline;
  
  wn = CurWindow;
  
  //StopAlert("IVCashDClassTouchScreenStackButton, tag: " & tag);
  
  //page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
  stack = GetWindowString(wn,"touchscreenwindowpagestack");
  prstack = GetWindowString(wn,"touchscreenwindowprinterstack");
  
  stackend = 0;
  pos = 0;
  prpos = 0;
  ExtractObj(stack,pos,ostr);
  ExtractObj(prstack,prpos,prstr);
  
  while (nonblank(ostr)) begin
    stackarr[stackend] = ostr;
    prstackarr[stackend] = prstr;
    stackend = stackend + 1;
    ExtractObj(stack,pos,ostr);
    ExtractObj(prstack,prpos,prstr);
  end;
  
  stackend = stackend - 1;
  
  while ((stackend>0) and (stackarr[stackend]<>tag)) begin
    stackend = stackend - 1;
  end;
  
  stack = stackarr[0];
  prstack = prstackarr[0];
  
  for (i = 1; i<=stackend; i = i + 1) begin
    stack = stack & "," & stackarr[i];
    prstack = prstack & "," & prstackarr[i];
  end;
  
  sline = SelectedListLine(wn);
  
  PutWindowString(wn,"touchscreenwindowpagestack",stack);
  PutWindowString(wn,"touchscreenwindowprinterstack",prstack);
  
  PutWindowString(wn,"touchscreenwindowpage",stackarr[stackend]);
  SetWindowSubset(wn,GetWindowSubset(wn));
  ReRunWindowDef(wn);
  
  SetSelectedListLine(wn,sline);
  
  return;
end;

global
procedure RestAccDClassTouchScreenStackButton()
begin
  string 255 tag;

  tag = PushButtonTag;
  RestAccDClassTouchScreenStackButtonExecute(tag);
  return;
end;

function Integer ItemAlreadyOnBarTab(record RestAccVc RestAccr,string artcode,Boolean aptkf)
begin
  Integer res;
  row RestAccVc RestAccrw;
  Integer i,rwcnt;
  Boolean testf;
  
  res = -1;
  rwcnt = MatRowCnt(RestAccr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RestAccr,i,RestAccrw);
    testf = true;
    if (RestAccrw.ovst!=0) then begin testf = false; end;
    if (RestAccrw.stp!=kInvoiceRowTypeNormal) then begin testf = false; end;
    if (RestAccrw.ArtCode!=artcode) then begin testf = false; end;
    if (aptkf) then begin
      if (RestAccrw.AlreadyPrintedToKitchen!=0) then begin testf = false; end;
    end;
    if (testf) then begin
      res = i;
      goto LItemAlreadyOnBarTab;
    end;
  end;
LItemAlreadyOnBarTab:;
  ItemAlreadyOnBarTab = res;
  return;
end;

global
function Boolean RestAccDClasstouchscreenitemEFAfter(Integer wn,Boolean changedf)
begin  
  string 255 inwarning;
  record RestAccVc prevRestAccr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  string 255 location,printgroupcode;
  Integer rownr,nwn;
  record LocalMachineBlock LMb;
  Boolean sernrf,additemf;
  Integer modifier,MealCourse;
  record RestBlock Restb;
  record RcVc RepSpec;
  record RestSetupVc RSr;
  
  if (changedf) then begin
    BlockLoad(LMb);
    GetWindowRecord(wn,RestAccr);
    ClearRow(RestAccr,RestAccrw,1);
    RestAccrw.ArtCode = GetWindowString(wn,"touchscreenitem");

    printgroupcode = GetWindowString(wn,"touchscreenwindowprintgroupcode");
    modifier = StringToInt(GetWindowString(wn,"touchscreenitemModifier"));
    
    additemf = false;
    if (sernrf) then begin
      additemf = true;
    end;
    if (additemf==false) then begin
      BlockLoad(Restb);
      switch (Restb.AddingItemToBarTab) begin
        case kAddToBarTabNewItem:
          additemf = true;
        case kAddToBarTabOne:
          rownr = ItemAlreadyOnBarTab(RestAccr,RestAccrw.ArtCode,false);
          additemf = rownr<0;
          if (additemf==false) then begin
            RestAccVc_AddQuant(RestAccr,rownr,1.00,LMb);
            PutWindowRecord(wn,RestAccr);
            RestAccDClass_RefreshStringList(wn,RestAccr);
          end;
        case kAddToBarTabQuant:
          rownr = ItemAlreadyOnBarTab(RestAccr,RestAccrw.ArtCode,false);
          additemf = rownr<0;
          if (additemf==false) then begin
            OpenAddQuantityTouchScreenTClass(wn,rownr,RestAccrw.ArtCode);     
            goto LRestAccDClasstouchscreenitemEFAfter;      
          end;
      end;
    end;
    if (additemf) then begin
      rownr = MatRowCnt(RestAccr);
      MatRowPut(RestAccr,rownr,RestAccrw);
      additemf = RestAccVc_PasteArtCode(RestAccr,rownr,LMb,printgroupcode,modifier,1.00,inwarning);
    end;
    // then begin
    if (additemf) then begin
    
      MatRowGet(RestAccr,rownr,RestAccrw);
      PutWindowString(wn,"touchscreenitemname",RestAccrw.Spec);
      PutWindowString(wn,"touchscreenitemqty",RestAccrw.Quant);
      PutWindowString(wn,"touchscreenitemprice",RestAccrw.Price);
    //RestAccSumupSoftEditFields(wn,RestAccr);
      PutWindowRecord(wn,RestAccr);
      RestAccDClass_RefreshStringList(wn,RestAccr);
      DisplayRestAccItem(RestAccr,rownr);
    /*
    if (LMb.IncrementalReceiptPrinting!=0) then begin
      if (RestAccPrintReceipt(RestAccr,rownr,false,false,LMb.IncrementalReceiptPrinting)) then begin
      end;
    end;
    */
      PutWindowString(wn,"RestAcccommandlastitemsernrf","");
      if (sernrf) then begin
        PutWindowString(wn,"RestAcccommandlastitemsernrf","true");
      end;
    end;
    if (nonblank(inwarning)) then begin
      MessageBox(0,inwarning);
    end;
    if (additemf) then begin
      if (nonblank(RestAccr.CustCode)) then begin
        MealCourse = Restb.MealCourse;
        RSr.BranchID = RestAccr.BranchID;
        if (ReadFirstMain(RSr,1,true)) then begin
          MealCourse = RSr.MealCourse;
        end;
        if (MealCourse!=0) then begin
          nwn = OpenWindow("SelectMealCourseOClass",0,wn,"","",RepSpec);
          RepSpec.long1 = rownr;
          PutWindowRecord(nwn,RepSpec);
          DeselectWindow(wn,false);
        end;
      end;
    end;
  end;
LRestAccDClasstouchscreenitemEFAfter:;  

//  SetWindowNameArg(wn,RestAccrw.ArtCode & ":" & location); no varieties in Bar Tab
  RestAccDClasstouchscreenitemEFAfter = true;
  return;
end;

global
updating procedure ProceedSelectMealCourseOClass()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record RestAccVc prevRestAccr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "RestAccVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,RestAccr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedSelectMealCourseOClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedSelectMealCourseOClass;
            end;
        end;
        MatRowGet(RestAccr,RepSpec.long1,RestAccrw);
        RestAccrw.MealCourse = RepSpec.f1;
        RestAccrw.SeatCode = RepSpec.f2;
        MatRowPut(RestAccr,RepSpec.long1,RestAccrw);
        PutWindowRecord(mwn,RestAccr);
    end;
    if (WindowDoOK(mwn,0)) then begin
      DeselectWindow(wn,false);
      GetWindowRecord(wn,RepSpec);
      CloseWindow(wn);
/*      
      switch (GetWindowFileName(mwn)) begin
        case "RestAccVc":
          GetWindowRecord(mwn,RestAccr);
          RestAccDClass_RefreshStringList(mwn,RestAccr);
          ReRunWindowDef(mwn);
      end;
*/      
    end;
  end;
LProceedSelectMealCourseOClass:;  
  return;
end;

global 
procedure MealCourseOClassSelectCourse()
begin
  record RcVc RepSpec;
  record RestAccVc RAr;
  Integer wn,mwn;
  string 255 tagstr;
  
  wn = CurWindow;
  if (wn!=0) then begin
    tagstr = PushButtonTag;
    GetWindowRecord(wn,RepSpec);
    DeselectWindow(wn,true);
    RepSpec.f1 = tagstr;
    PutWindowRecord(wn,RepSpec);
    WindowFieldGoto(wn,RepSpec,-1,"f2",false);
  end;
  return;
end;

global
updating procedure ProceedAddQuantityTouchScreenTClass()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record RestAccVc prevRestAccr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  record LocalMachineBlock LMb;
  Integer rownr;
  Boolean additemf;
  string 255 printgroupcode,inwarning;
  Integer modifier;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "RestAccVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,RestAccr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedAddQuantityTouchScreenTClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedAddQuantityTouchScreenTClass;
            end;
        end;
        BlockLoad(LMb);
        RestAccrw.ArtCode = GetWindowString(mwn,"touchscreenitem");
        printgroupcode = GetWindowString(wn,"touchscreenwindowprintgroupcode");
        modifier = StringToInt(GetWindowString(wn,"touchscreenitemModifier"));
        rownr = -1;
        if (RepSpec.vals0>0) then begin
          rownr = ItemAlreadyOnBarTab(RestAccr,RestAccrw.ArtCode,true);
        end;
        additemf = rownr<0;
        if (additemf) then begin
          rownr = MatRowCnt(RestAccr);
          MatRowPut(RestAccr,rownr,RestAccrw);
          RestAccVc_PasteArtCode(RestAccr,rownr,LMb,printgroupcode,modifier,RepSpec.vals0,inwarning);
        end else begin
          RestAccVc_AddQuant(RestAccr,rownr,RepSpec.vals0,LMb);
        end;
        PutWindowRecord(mwn,RestAccr);
    end;
    if (WindowDoOK(mwn,0)) then begin
      DeselectWindow(wn,false);
      GetWindowRecord(wn,RepSpec);
      CloseWindow(wn);
      switch (GetWindowFileName(mwn)) begin
        case "RestAccVc":
          GetWindowRecord(mwn,RestAccr);
          RestAccDClass_RefreshStringList(mwn,RestAccr);
          MatRowGet(RestAccr,RepSpec.long1,RestAccrw);
          DisplayRestAccItem(RestAccr,RepSpec.long1);
          ReRunWindowDef(mwn);
      end;
    end else begin
      CloseWindow(wn);
    end;
  end;
LProceedAddQuantityTouchScreenTClass:;  
  return;
end;

global
updating procedure ProceedSetBarTabClassTouchScreenTClass()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record RestAccVc prevRestAccr;
  record RestAccVc RestAccr;
  record RestAccClassVc RACr;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    if (blank(RepSpec.f1)) then begin
      goto LProceedSetBarTabClassTouchScreenTClass;
    end;
    switch (GetWindowFileName(mwn)) begin
      case "RestAccVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,RestAccr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedSetBarTabClassTouchScreenTClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedSetBarTabClassTouchScreenTClass;
            end;
        end;
        RestAccr.Class = RepSpec.f1;
        RACr.Code = RestAccr.Class;
        if (ReadFirstMain(RACr,1,true)==false) then begin
          WindowFieldGoto(wn,RepSpec,-1,"f1",false);
          MessageBox(27326,"");
          goto LProceedSetBarTabClassTouchScreenTClass;
        end;
        RestAccr.PriceList = RACr.PriceList;
        RestAccr.Objects = AddObjectToObjectList(RestAccr.Objects,RACr.Objects);        
        RestAccDUpdatePrices(RestAccr);
        PutWindowRecord(mwn,RestAccr);
    end;
//    if (WindowDoOK(mwn,0)) then begin
    if (true) then begin
      DeselectWindow(wn,false);
      GetWindowRecord(wn,RepSpec);
      CloseWindow(wn);
      switch (GetWindowFileName(mwn)) begin
        case "RestAccVc":
          GetWindowRecord(mwn,RestAccr);
          RestAccDClass_RefreshStringList(mwn,RestAccr);
          ReRunWindowDef(mwn);
      end;
    end else begin
      CloseWindow(wn);
    end;
  end;
LProceedSetBarTabClassTouchScreenTClass:;  
  return;
end;

global
procedure ProceedPasteBarTabClassTouchScreenTClass()
begin
  Integer wn,nwn;
  record RcVc RepSpec;
  
  wn = CurWindow;
  KeyPadSelectAll(wn);
  nwn = OpenPasteWindow(wn,"RestAccClassNPTSSClass","");
  return;
end;

global
procedure RestAccAddItemRowDClassAdd()
begin
  longint wn,mwn;
  record INVc INr;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  
  GetWindowRecord(wn,INr);
  PutWindowString(mwn,"touchscreenitem",INr.Code);
  PutWindowString(mwn,"touchscreenitemqty",1.00);
  //DeselectWindow(wn,false);
  RestAccDClasstouchscreenitemEFAfter(mwn,true);
            
  CloseWindow(wn);
end;

global
procedure RestAccAddItemRowDClassCancel()
begin
  longint wn;
  
  wn = CurWindow;
  CloseWindow(wn);
end;

global
procedure RestAccDClassShowOrderiPad()
begin
  Integer wn;
  
  wn = CurWindow;
  PutWindowString(wn,"showorder","1");
  ReRunWindowDef(wn);
  return;
end;

global
procedure RestAccDClassHideOrderiPad()
begin
  Integer wn;
  
  wn = CurWindow;
  PutWindowString(wn,"showorder","0");
  ReRunWindowDef(wn);
  return;
end;

global
updating procedure RestAccDClassPlaceOrderiPad()
begin
  LongInt wn,nwn;
  
  wn = CurWindow;
  WindowDoOK(wn,0);
  return;
end;

global
procedure RestAccDClassFinishiPad()
begin
  LongInt wn,nwn;
  record RestAccVc RAr;
  
  wn = CurWindow;
  GetWindowRecord(wn,RAr);
  nwn = OpenWindow("FinishTabDClass",0,wn,"","",RAr);
  
  return;
end;

global
updating function Boolean FinishTabDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = RestAccDClassAfterEditField(wn,fieldname,fn,rownr,changed);
  
  FinishTabDClassAfterEditField = res;
end;

global
updating procedure FinishTabDClassOnOKWindow(integer wn)
begin
  record RestAccVc RAr;
  integer mwn;
  mwn = MotherWindow(wn);
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RAr);
  PutWindowRecord(mwn,RAr);
  //if (RAr.Closed!=0) then begin
  //  RestAccReceiptPrint(RAr,true,false);
  //end else begin    
  if (RestAccAccept2(mwn,RAr)) then begin
    //RestAccReceiptPrint(RAr,true,true);
    CloseWindow(wn);
  end;
  //end;
  //if (UserCanAction("AllowUsingSplitonBarTab",false)) then begin
  //  LogoutUser(CurWindow,true);
  //end;
  
  return;
end;

global
procedure RestAccDClassSetTableiPad()
begin
  Integer wn,nwn;
    
  wn = CurWindow;
  nwn = OpenPasteWindow(wn,"NeighbourHoodSClass","");
  return;
end;

/*
global
function Boolean RestAccDClassOnOpenWindow(integer wn)
begin
  record RestAccVc RestAccr;
  string 255 tstr;
  
  GetWindowRecord(wn,RestAccr);
  
  tstr = "Tab: " & RestAccr.SerNr;
  tstr = tstr & " Table: " & RestAccr.CustCode;
  tstr = tstr & " Waiter: " & CurrentUser;
  
  PutWindowString(wn,"WindowOverrideTitle",tstr);
  
  RestAccDClassOnOpenWindow = false;
end;
*/

/*
global
procedure RestAccDClassSetTable()
begin
  integer wn,nwn;
  record RcVc RepSpec;
  
  wn = CurrentWindow;
  nwn = OpenWindow("RestAccSetTableSClass",0,wn,"","",RepSpec);
  return;
end;

global
function boolean RestAccSetTableSClassOnOpenWindow(integer wn)
begin
  set slist rows to tables
  return;
end;

global
updating procedure RestAccSetTableSClass(integer wn)
begin
  selected row
  mother window
  get window record (mwn,RestAccr)
  RestAccr.CustCode = selrow tag...
  PutWindowRecord(mwn,RestAccr);
  
  return;
end;
*/

global
updating procedure ProceedSetCoversTouchScreenTClass()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record RestAccVc prevRestAccr;
  record RestAccVc RestAccr;
  record LocalMachineBlock LMb;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "RestAccVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,RestAccr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedSetCoversTouchScreenTClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedSetCoversTouchScreenTClass;
            end;
        end;
        BlockLoad(LMb);
        RestAccr.Persons = RepSpec.long2;
        RestAccr.ServCharge = GetServiceCharge(RestAccr,LMb,true);
        RestAccSumup(RestAccr,"");
        PutWindowRecord(mwn,RestAccr);
    end;
    if (WindowDoOK(mwn,0)) then begin
      DeselectWindow(wn,false);
      GetWindowRecord(wn,RepSpec);
      CloseWindow(wn);
      switch (GetWindowFileName(mwn)) begin
        case "RestAccVc":
          GetWindowRecord(mwn,RestAccr);
          RestAccDClass_RefreshStringList(mwn,RestAccr);
          ReRunWindowDef(mwn);
      end;
    end else begin
      CloseWindow(wn);
    end;
  end;
LProceedSetCoversTouchScreenTClass:;  
  return;
end;

global
procedure ProceedOpenRecordTouchScreenOClass()
begin
  Integer wn,mwn,nwn;
  record RcVc RepSpec;
  record RestAccVc RestAccr;
  record LocalMachineBlock LMb;
  record UserVc Userr;

  wn = CurWindow;
  mwn = MotherWindow(wn);
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  RestAccr.SerNr = RepSpec.long2;
  if (ReadFirstMain(RestAccr,1,true)) then begin
    Userr.Code = CurrentUser;
    if (FindTheUser(Userr)) then begin 
      switch (Userr.limitedAccess) begin
        case 1:
          if (Userr.Code!=RestAccr.Cashier) then begin
            goto LProceedOpenRecordTouchScreenOClass;
          end;
        case 2:
          if (Userr.Code!=RestAccr.SalesGroup) then begin
            goto LProceedOpenRecordTouchScreenOClass;
          end;
      end;
    end;    
    CloseWindow(wn);
    CloseWindow(mwn);
    nwn = OpenWindow("RestAccDClass",1,0,"","",RestAccr);  
    GetWindowRecord(nwn,RestAccr);
    RestAccDClass_RefreshStringList(nwn,RestAccr);
    ReRunWindowDef(nwn);
  end;
  
LProceedOpenRecordTouchScreenOClass:;  
  return;
end;

global
updating procedure ProceedSetTableTouchScreenOClass()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record RestAccVc prevRestAccr;
  record RestAccVc RestAccr;
  record LocalMachineBlock LMb;
  record NeighbourHoodVc Tabler;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "RestAccVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,RestAccr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LSetTableTouchScreenOClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LSetTableTouchScreenOClass;
            end;
        end;
        BlockLoad(LMb);
        Tabler.Table = RepSpec.f1;
        ReadFirstMain(Tabler,1,true);
        if (nonblank(LMb.BranchID)) and (nonblank(Tabler.BranchID)) then begin
          if (LMb.BranchID!=Tabler.BranchID) then begin
            MessageBox(27324,"");
            goto LSetTableTouchScreenOClass;
          end;
        end;
        
        RestAccr.CustCode = RepSpec.f1;
        PutWindowRecord(mwn,RestAccr);
    end;
    if (WindowDoOK(mwn,0)) then begin
      DeselectWindow(wn,false);
      GetWindowRecord(wn,RepSpec);
      CloseWindow(wn);
      switch (GetWindowFileName(mwn)) begin
        case "RestAccVc":
          ReRunWindowDef(mwn);
      end;
    end else begin
      CloseWindow(wn);
    end;
  end;
LSetTableTouchScreenOClass:;  
  return;
end;

global
updating procedure ProceedMergeBarTabTouchScreenTClass()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record RestAccVc prevcurRestAccr;
  record RestAccVc curRestAccr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  string 255 errstr;
  Integer err;
  Integer i,rwcnt,rownr;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin    
    GetWindowRecord(wn,RepSpec);
    if (RepSpec.long2<=0) then begin
      goto LProceedMergeBarTabTouchScreenTClass;
    end;
    switch (GetWindowFileName(mwn)) begin
      case "RestAccVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,curRestAccr);
        if (RepSpec.long2==curRestAccr.SerNr) then begin
          goto LProceedMergeBarTabTouchScreenTClass;
        end;
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevcurRestAccr);
            if (prevcurRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedMergeBarTabTouchScreenTClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevcurRestAccr);
            if (prevcurRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedMergeBarTabTouchScreenTClass;
            end;
        end;
        RestAccr.SerNr = RepSpec.long2;
        if (ReadFirstMain(RestAccr,1,true)==false) then begin
          goto LProceedMergeBarTabTouchScreenTClass;
        end;
        err = TestMergeBarTabAllowed(RestAccr,errstr);
        if (err!=0) then begin
          MessageBox(err," " & errstr);
          goto LProceedMergeBarTabTouchScreenTClass;
        end;
        rwcnt = MatRowCnt(RestAccr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(RestAccr,i,RestAccrw);
          MatRowPut(curRestAccr,MatRowCnt(curRestAccr),RestAccrw);
        end;
        curRestAccr.ServCharge = curRestAccr.ServCharge + RestAccr.ServCharge;
        RestAccSumup(curRestAccr,"");  
        PutWindowRecord(mwn,curRestAccr);
    end;
    if (WindowDoOK(mwn,0)) then begin
      DeselectWindow(wn,false);
      GetWindowRecord(wn,RepSpec);
      CloseWindow(wn);
      switch (GetWindowFileName(mwn)) begin
        case "RestAccVc":
          GetWindowRecord(mwn,curRestAccr);
          RestAccDClass_RefreshStringList(mwn,curRestAccr);
          ReRunWindowDef(mwn);
          CloseMergedBarTab(RestAccr.SerNr,curRestAccr.SerNr);
      end;
    end else begin
      CloseWindow(wn);
    end;
  end;
LProceedMergeBarTabTouchScreenTClass:;  
  return;
end;

global
updating procedure ProceedMoveItemToBarTabTouchScreenOClass()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record RestAccVc prevcurRestAccr;
  record RestAccVc curRestAccr;
  record RestAccVc oldRestAccr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  string 255 errstr;
  Integer err;
  Integer i,rwcnt,rownr;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin    
    GetWindowRecord(wn,RepSpec);
    if (blank(RepSpec.f1)) then begin
      goto LProceedMoveItemToBarTabTouchScreenTClass;
    end;
    switch (GetWindowFileName(mwn)) begin
      case "RestAccVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,curRestAccr);
        if (RepSpec.f1==curRestAccr.CustCode) then begin
          goto LProceedMoveItemToBarTabTouchScreenTClass;
        end;
        rownr = GetSelectedPOSItemRowIndex(mwn);
        if (rownr<0) then begin
          goto LProceedMoveItemToBarTabTouchScreenTClass;
        end;
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevcurRestAccr);
            if (prevcurRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedMoveItemToBarTabTouchScreenTClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevcurRestAccr);
            if (prevcurRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedMoveItemToBarTabTouchScreenTClass;
            end;
        end;
        err = TestMoveItemToBarTabAllowed(curRestAccr,errstr);
        RestAccr.CustCode = RepSpec.f1;
        if (ReadFirstKey("CustCode",RestAccr,1,true)==false) then begin
          goto LProceedMoveItemToBarTabTouchScreenTClass;
        end;
        RecordCopy(oldRestAccr,RestAccr);
        err = TestMoveItemToBarTabAllowed(RestAccr,errstr);
        if (err!=0) then begin
          MessageBox(err," " & errstr);
          goto LProceedMoveItemToBarTabTouchScreenTClass;
        end;
        MatRowGet(curRestAccr,rownr,RestAccrw);
        MatRowDelete(curRestAccr,rownr);
        MatRowPut(RestAccr,MatRowCnt(RestAccr),RestAccrw);        
        curRestAccr.ServCharge = curRestAccr.ServCharge + RestAccr.ServCharge;
        RestAccSumup(curRestAccr,"");  
        PutWindowRecord(mwn,curRestAccr);
    end;
    if (WindowDoOK(mwn,0)) then begin
      DeselectWindow(wn,false);
      GetWindowRecord(wn,RepSpec);
      CloseWindow(wn);
      switch (GetWindowFileName(mwn)) begin
        case "RestAccVc":
          GetWindowRecord(mwn,curRestAccr);
          RestAccDClass_RefreshStringList(mwn,curRestAccr);
          ReRunWindowDef(mwn);
          RecordUpdate(oldRestAccr,RestAccr,true);
      end;
    end else begin
      CloseWindow(wn);
    end;
  end;
LProceedMoveItemToBarTabTouchScreenTClass:;  
  return;
end;

global
procedure RestAccLClassAllTabs()
begin
  Integer wn;
  
  wn = CurWindow;
  PutWindowString(wn,"RestAccLClassAllTabsFlag","true");
  UpdateBrowses("RestAccAllLClass");
  ReRunWindowDef(wn);
  return;
end;

global
procedure RestAccLClassOpenTabs()
begin
  Integer wn;
  
  wn = CurWindow;
  PutWindowString(wn,"RestAccLClassAllTabsFlag","false");
  UpdateBrowses("RestAcc2LClass");
  ReRunWindowDef(wn);
  return;
end;

global
updating procedure RestAccSplitOClassSplit()
begin
  Integer wn,nwn,mwn;
  record RestAccVc RestAccr;
  record RestAccVc dummyRestAccr;
  record RestAccVc oldRestAccr;
  record RestAccVc newRestAccr;
  row RestAccVc RestAccrw;
  Integer i,rwcnt,nrcnt;
  val splitqty;
  vector val vquant;
  LongInt l;
  
  wn = CurWindow;
  mwn = Motherwindow(wn);
  if (UserCanAction("AllowUsingSplitonBarTab",true)==false) then begin
    goto LRestAccSplitOClassSplit;
  end;
  if (mwn<=0) then begin
    goto LRestAccSplitOClassSplit;
  end;
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RestAccr);
  if (WindowState(mwn)==Rs_insert) then begin
    goto LRestAccSplitOClassSplit;
  end;
  if (RestAccr.Closed!=0) then begin
    goto LRestAccSplitOClassSplit;
  end;
  if (RestAccr.SplitQty>=2) then begin
    rwcnt = MatRowCnt(RestAccr);
    l = 0;
    while (l<(RestAccr.SplitQty-1)) begin
      RecordCopy(newRestAccr,RestAccr);
      newRestAccr.SerNr = -1;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(newRestAccr,i,RestAccrw);
        RestAccrw.Quant = Round(RestAccrw.Quant/RestAccr.SplitQty,SetRoundModeD(2));
        MatRowPut(newRestAccr,i,RestAccrw);
        RestAccDchrsum(newRestAccr,i,0);
        RestAccDchsum(newRestAccr,i);
        vquant[i] = vquant[i] + RestAccrw.Quant;
      end;
      newRestAccr.SplitQty = -1;
      RestAccSumup(newRestAccr,"");
      newRestAccr.SerNr = NextSerNr("RestAccVc",newRestAccr.TransDate,-1,false,"");            
      if (newRestAccr.SerNr!=-1) then begin
        if (RecordStore(newRestAccr,false)) then begin
        end;
      end;
      l = l + 1;
    end;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RestAccr,i,RestAccrw);
      RestAccrw.Quant = RestAccrw.Quant - vquant[i];
      MatRowPut(RestAccr,i,RestAccrw);
      RestAccDchrsum(RestAccr,i,0);
      RestAccDchsum(RestAccr,i);
    end;
    RestAccSumup(RestAccr,"");  
    RestAccr.SplitQty = -1;
    PutWindowRecord(mwn,RestAccr);
    if (WindowDoOK(mwn,0)) then begin
      ReRunWindowDef(mwn);
      RestAccDClass_RefreshStringList(mwn,RestAccr);
    end;

  end else begin  
    RecordCopy(newRestAccr,RestAccr);
    RecordCopy(oldRestAccr,RestAccr);
    newRestAccr.SerNr = -1;
    rwcnt = MatRowCnt(newRestAccr);
    while (rwcnt>0) begin
      MatRowDelete(newRestAccr,0);
      rwcnt = rwcnt - 1;
    end;
    rwcnt = MatRowCnt(RestAccr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RestAccr,i,RestAccrw);
      splitqty = RestAccrw.SplitQty;
      if (splitqty!=0) then begin
        if (splitqty>RestAccrw.Quant) then begin
          WindowFieldGoto(wn,RestAccr,i,"SplitQty",false);
          goto LRestAccSplitOClassSplit;
        end;
        RestAccrw.Quant = RestAccrw.Quant - splitqty;
        RestAccrw.SplitQty = blankval;
        if (RestAccrw.Quant!=0) then begin
          MatRowPut(RestAccr,i,RestAccrw);
          RestAccDchrsum(RestAccr,i,0);
          MatRowGet(RestAccr,i,RestAccrw);
        end else begin
          MatRowDelete(RestAccr,i);
          i = i - 1;
          rwcnt = rwcnt - 1;
        end;
        RestAccrw.Quant = splitqty;
        MatRowPut(newRestAccr,nrcnt,RestAccrw);
        RestAccDchrsum(newRestAccr,nrcnt,0);
        MatRowGet(newRestAccr,nrcnt,RestAccrw);
        nrcnt = nrcnt + 1;
      end;
    end;
    RestAccSumup(RestAccr,"");  
    RestAccSumup(newRestAccr,"");
    PutWindowRecord(mwn,RestAccr);
    if (WindowDoOK(mwn,0)) then begin
      ReRunWindowDef(mwn);
      RestAccDClass_RefreshStringList(mwn,RestAccr);
      newRestAccr.SerNr = NextSerNr("RestAccVc",newRestAccr.TransDate,-1,false,"");            
      if (newRestAccr.SerNr!=-1) then begin
        if (RecordStore(newRestAccr,false)) then begin
        end;
        nwn = OpenWindow("RestAccDClass",1,0,"","",newRestAccr);  
        RestAccVcRecordDefaultsClient(wn,newRestAccr,dummyRestAccr,0,0);
        RestAccDClass_RefreshStringList(nwn,newRestAccr);
        ReRunWindowDef(nwn);
      end;
    end;
    CloseWindow(mwn);
  end;
  CloseWindow(wn);
LRestAccSplitOClassSplit:;  
  return;
end;

global
updating procedure ProceedOnHotelGuestTouchScreenOClass()
begin
  Integer wn,mwn,err;
  record RcVc RepSpec;
  record RestAccVc prevRestAccr;
  record RestAccVc RestAccr;
  record IVCashVc prevIVCashr;
  record IVCashVc IVCashr;
  string 255 errstr,fieldgoto;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "RestAccVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,RestAccr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedOnHotelGuestTouchScreenOClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin
              CloseWindow(wn);
              goto LProceedOnHotelGuestTouchScreenOClass;
            end;
        end;
        err = ProceedOnHotelGuestTouchScreenRemote(RepSpec,RestAccr,errstr,fieldgoto);
        if (err!=0) then begin
          MessageBox(err," " & errstr);
          WindowFieldGoto(wn,RepSpec,-1,fieldgoto,false);
          goto LProceedOnHotelGuestTouchScreenOClass;
        end;
        PutWindowRecord(mwn,RestAccr);
      case "IVCashVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedOnHotelGuestTouchScreenOClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedOnHotelGuestTouchScreenOClass;
            end;
        end;
        err = ProceedOnHotelGuestTouchScreenRemote_IVCashVc(RepSpec,IVCashr,errstr,fieldgoto);
        if (err!=0) then begin
          MessageBox(err," " & errstr);
          WindowFieldGoto(wn,RepSpec,-1,fieldgoto,false);
          goto LProceedOnHotelGuestTouchScreenOClass;
        end;
        PutWindowRecord(mwn,IVCashr);
    end;
    if (WindowDoOK(mwn,0)) then begin
      DeselectWindow(wn,false);
      GetWindowRecord(wn,RepSpec);
      CloseWindow(wn);
      switch (GetWindowFileName(mwn)) begin
        case "RestAccVc":
          GetWindowRecord(mwn,RestAccr);
          ReRunWindowDef(mwn);
        case "IVCashVc":
          GetWindowRecord(mwn,IVCashr);
          ReRunWindowDef(mwn);
      end;
    end else begin
      CloseWindow(wn);
    end;
  end;
LProceedOnHotelGuestTouchScreenOClass:;  
  return;
end;

global
function Boolean RestAccDClassListClick(Integer wn,Integer rownr)
begin
  integer sline,matrowix,res;
  string 255 tstr,t2,tag;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  val t;
  Boolean testf;
    
  sline = SelectedListLine(wn);
  if (sline<>-1) then begin
    matrowix = GetSelectedPOSItemRowIndex(wn);
  end else begin
    matrowix = -1;
  end;
  GetWindowRecord(wn,RestAccr);

  if (matrowix>=0) then begin
    MatRowGet(RestAccr,matrowix,RestAccrw);
    switch (RestAccrw.stp) begin
      case kInvoiceRowTypeNormal:
        tstr = ValToString(RestAccrw.Quant,M4UVal,ThousandSeparator,DecimalSeparator,0) & "*" & ValToString(RestAccrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0);
        M4PadString(ValToString(RestAccrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),30-len(tstr)," ",true,t2);
        tstr = tstr & t2;  
        SetPOSWindowDisplay(RestAccrw.ArtCode & " " & RestAccrw.Spec,tstr);
      case kInvoiceRowTypeCashPayment:
        tstr = RestAccrw.Spec & "  " & ValToString(RestAccrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0);
        SetPOSWindowDisplay(tstr,"");
      case kInvoiceRowTypeCreditCardPayment:
        tstr = RestAccrw.Spec & "  " & ValToString(RestAccrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0);
        SetPOSWindowDisplay(tstr,"");
      case kInvoiceRowTypeGiftVoucherPayment:
        tstr = RestAccrw.Spec & "  " & ValToString(RestAccrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0);
        SetPOSWindowDisplay(tstr,"");
      case kInvoiceRowTypeLoyaltyPointsPayment:
        tstr = RestAccrw.Spec & "  " & ValToString(RestAccrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0);
        SetPOSWindowDisplay(tstr,"");
      otherwise
        SetPOSWindowDisplay("","");
    end;
  end else begin
    tag = GetListTag(wn,sline);
    testf = true;
    tstr = ""; t2 = "";
    if (tag==USetStr(24172)) then begin
      t = RestAccr.RetValue;
      if (t<0) then begin t = 0.00; testf = false; end;
      if (blank(t)) then begin 
        t = 0.00;
      end;
      tstr = USetStr(24172) & "  " & ValToString(t,M4Val,ThousandSeparator,DecimalSeparator,0);
    end;
    if (tag==USetStr(24196)) then begin
      tstr = USetStr(24196) & "  " & ValToString(RestAccr.ServCharge,M4Val,ThousandSeparator,DecimalSeparator,0);
    end;
    if (testf) then begin    
      SetPOSWindowDisplay(tstr,t2);
    end else begin
      SetPOSWindowDisplay("","");
    end;
  end;
  //PutWindowString(wn,"touchscreenselecteditemtag",tstr);
  RestAccDClassListClick = false;
  return;
end;

global
updating function Boolean AddQuantityTouchScreenTClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Integer wn;
  Boolean res;
    
  wn = CurWindow;
  switch (keycode) begin
    case 1: 
      CancelNPTSCashPaymentTClass;
      res = true;
    case 2: 
      ProceedAddQuantityTouchScreenTClass;
      res = true;
  end;
  AddQuantityTouchScreenTClassFunctionKey = res;
  return;
end;

global
updating function Boolean SetBarTabClassTouchScreenTClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Integer wn;
  Boolean res;
    
  wn = CurWindow;
  switch (keycode) begin
    case 1: 
      CancelNPTSCashPaymentTClass;
      res = true;
    case 2: 
      ProceedSetBarTabClassTouchScreenTClass;
      res = true;
    case 3: 
      ProceedPasteBarTabClassTouchScreenTClass;
      res = true;
  end;
  SetBarTabClassTouchScreenTClassFunctionKey = res;
  return;
end;
