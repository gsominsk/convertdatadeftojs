external function Integer GetSelectedPOSItemRowIndex(integer);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external function boolean UpdateExistingVarietyRowsf();
external function Boolean GetPM(string,var string,var string);
remote procedure IVCashVc_PastePriceList(var record IVCashVc);
remote procedure IVCashVc_PasteRebCode(var record IVCashVc);
external procedure WindowFieldGotoForTouchScreen(Integer,Integer,string,Boolean);
remote function Boolean SerialNrForOneItem(string,var record SerBalVc);
external procedure IVCashDClassTouchScreenReprint();
external function Integer OpenArtStat(Integer,record RcVc,Boolean);
remote procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
remote function Boolean GetFullCurncyPurchaseRate(var string,Date,var val,var val,var val,var val,var val);
external function boolean POSButtonsForWindow(integer,var record POSButtonsVc);
external procedure OpenCCPayIngenicoOClass(Integer,string,string,LongInt,val,val,string);
external procedure OpenCCPayYomaniBanksysOClass(Integer,string,string,LongInt,val,val,string);
external procedure OpenCCPayVerifoneBanksysOClass(Integer,string,string,LongInt,val,val,string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure RowCalculateTaxMatrix_IVCashVc(var record IVCashVc,Integer,row IVCashVc);
remote function Integer IVCashVc_PasteGiftCertificate(var record IVCashVc,Integer,Integer);
external procedure IVCashDClass_RefreshStringList(Integer,record IVCashVc);
remote procedure AddMultiBuyDiscountItems_IVCashVc(var record IVCashVc);
external procedure POSManagersAction(Integer,string);
external function Boolean VolBarcodeScan_IVCashVc(var record IVCashVc,string);
external updating function Boolean VolBarcodeScanVClassOnOKWindow(Integer);
remote procedure PasteIVCashInvDate(integer,var record  IVCashVc);
remote procedure IVCashVc_PasteLoyaltyCardNr(var record IVCashVc);
remote function Integer TouchScreenSplitItemRemote(string,var record SplitINVc);
external procedure SetPOSWindowDisplay(string,string);
external function Boolean IVCashPrintReceipt(Integer,var record IVCashVc,record IVCashVc,Integer,Boolean,Boolean,Integer,Integer);
external function Boolean IVCashDClassVoidRow(var record IVCashVc,Integer);
remote function Boolean IVCashVc_PasteCustCode(var record IVCashVc,string,string,string,var Integer,var string);
external procedure WarnFutureDate(Boolean,Date);
external function Boolean IVCashDClassDeleteRowTest(Integer,Integer);
remote function Boolean IVCashVc_PasteSerialNr(var record IVCashVc,Integer,Boolean);
external procedure IVCashDClassLevelTop();
external function Boolean GetPMRow(string,var row PMBlock);
external function Boolean TouchScreenLook();
external procedure M4PadString(string,Integer,string,Boolean,var string);
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external procedure DisplayIVCashItemStorno(record IVCashVc,Integer);
external procedure DisplayIVCashItem(record IVCashVc,Integer);
external function Boolean FindStringInString(string,string);
external function Boolean TestForMATVARINS(Integer);
external procedure OpenCCPayRahaxiDClass(Integer,Integer,LongInt,val,val,string);
external procedure OpenCCPaySteriaDClass(Integer,Integer,LongInt,val,val,string);
external procedure CalcPrice(val,val,val,var val,Integer);
external function val FormulaDiscountCalcPrice(val,val,val,string);
external procedure RoundRowSum(string,string,string,var val);
external procedure CalcSum(val,val,val,val,var val,Integer);
external function val FormulaDiscountCalcSum(val,val,val,string);
external procedure StripSpace(var string,string);
external function Integer FindCharPosition(string,string);
remote function Boolean GetFirstItem(var string,var record INVc);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
remote function Boolean IVCashVc_PasteQuant(var record IVCashVc,Integer);
remote function Boolean IVCashVc_PasteArtCode(var record IVCashVc,Integer,Boolean,var string,var Integer);
external procedure SendArtStat(string,string,string,val,val,val,Date,Integer);
external procedure CalcProc(val,val,var val);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
remote procedure IVCashSumup(var record IVCashVc,Boolean);
external procedure RemoveOldCustObjects(string,var string);
external procedure ChangeIVCashSerialNr(Integer,var record IVCashVc);
remote procedure IVCashGetRate(var record IVCashVc);
external procedure Base1ToBase2(var val,Date,var val);
external procedure Base2ToBase1(var val,Date,var val);
remote procedure CalculatePOSCashBack(var record IVCashVc);
remote function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
//external procedure IVCashDClassSpecificLevel(string);

global
function string 255 FindPOSCommandText(Integer action)
begin
  record POSCommandsBlock POSCb;
  row POSCommandsBlock POSCrw;
  Integer i,rwcnt;
  string 255 commandstr;
    
  BlockLoad(POSCb);
  rwcnt = MatRowCnt(POSCb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POSCb,i,POSCrw);
    if (POSCrw.Action==action) then begin
      commandstr = POSCrw.Text;
      i = rwcnt;
    end;
  end;
  FindPOSCommandText = commandstr;
  return;
end;    
    
global
function Boolean IVCashDchrsum(record IVCashVc IVCashp,Integer rownr,Integer UseDiscount)
begin
  Boolean res;
  row IVCashVc IVCashrw;
  val s,p;
  record DefCashBlock DCr;
  
  BlockLoad(DCr); // Annoying...
  MatRowGet(IVCashp,rownr,IVCashrw);
  switch (IVCashrw.stp) begin
    case kInvoiceRowTypeSplitItem:
      IVCashrw.SplitQuant = IVCashrw.Quant*IVCashrw.SplitFactor;
      MatRowPut(IVCashp,rownr,IVCashrw);
      res = true;
    otherwise
      p = IVCashrw.Price; 
//      CalcPrice(IVCashrw.BasePrice,IVCashrw.PriceFactor,IVCashrw.vRebate,p,UseDiscount);
      IVCashrw.Price = FormulaDiscountCalcPrice(IVCashrw.BasePrice,IVCashrw.PriceFactor,IVCashrw.Price,IVCashrw.vRebate);
//      CalcSum(IVCashrw.Quant,IVCashrw.Price,IVCashrw.PriceFactor,IVCashrw.vRebate,s,UseDiscount);  
      s = FormulaDiscountCalcSum(IVCashrw.Quant,IVCashrw.Price,IVCashrw.PriceFactor,IVCashrw.vRebate);  
/*      
    // Was dollarstore code, should be no problem for standard either
      if (IVCashrw.vRebate > 100.00) then begin
        s = -s * (IVCashrw.vRebate-100.00)/100.00;
      end;
*/      
      if (HasLocalization("FIN")) then begin
        RoundRowSum(IVCashp.CurncyCode,DCr.DefCashPayMode,"IVCashVc",s);//s = Round(s,10); not row rounding
      end else begin
        RoundRowSum(IVCashp.CurncyCode,DCr.DefCashPayMode,"IVCashVc",s);
      end;


      if (s!=IVCashrw.Sum) then begin
        IVCashrw.Sum = s;
        res = true;
        RowCalculateTaxMatrix_IVCashVc(IVCashp,rownr,IVCashrw);
        MatRowPut(IVCashp,rownr,IVCashrw);
      end;
      if (IVCashrw.DownPaidSum!=0) then begin
        res = true;
      end;
  end;
  IVCashDchrsum = res; 
  return;
end;

global
procedure IVCashDchsum(record IVCashVc IVCashp,Integer rownr)
begin
  row IVCashVc IVCashrw;
  row IVCashVc IVCash2rw;
  val t,s,rowsum,tproc;
  val qty,sum,unitprdisc,gp;
  record TaxMatrixVc TMr;
  Integer i,rwcnt;

  MatRowGet(IVCashp,rownr,IVCashrw);
  if (IVCashrw.Quant==0) then begin
    qty = 1;
  end else begin
    qty = IVCashrw.Quant;
  end;  
  rowsum = blankval;
  if (IVCashrw.stp==1) or (IVCashrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVCashrw.stp==kInvoiceRowTypeMultiBuyDiscount) then begin
    if (nonblank(IVCashrw.ArtCode)) then begin
      t = qty*IVCashrw.BasePrice;
      if (IVCashrw.PriceFactor!=0) then begin
        t = t/IVCashrw.PriceFactor;
      end;
      if (IVCashrw.Sum==0) then begin
        sum = qty*IVCashrw.Price;
      end else begin
        sum = IVCashrw.Sum;
      end;  
      s = MulRateToBase1(IVCashp.CurncyCode,sum,IVCashp.FrRate,IVCashp.ToRateB1,IVCashp.ToRateB2,IVCashp.BaseRate1,IVCashp.BaseRate2,DefaultCurRoundOff);
      UnpackRowFieldMatrix(IVCashrw,"TaxMatrix",TMr);
      FindSalesExVat(TMr,IVCashrw.VATCode,s,IVCashp.InclVAT,IVCashp.NoTAXonVAT,rowsum);
      IVCashrw.rowGP = rowsum - t;
      gp = IVCashrw.rowGP;
      rwcnt = MatRowCnt(IVCashp);
      for (i=rownr+1;i<rwcnt;i=i+1) begin
        MatRowGet(IVCashp,i,IVCash2rw);
        switch (IVCash2rw.stp) begin
          case kInvoiceRowTypeStructuredItemComponent:
            if (IVCash2rw.MotherArtCode==IVCashrw.ArtCode) then begin
              gp = gp + IVCash2rw.rowGP;
            end;
          otherwise
            i = rwcnt;
        end;
      end;
    end else begin
      IVCashrw.rowGP = 0;
      IVCashrw.BasePrice = 0;
    end;
    MatRowPut(IVCashp,rownr,IVCashrw);
  end;
  MatRowGet(IVCashp,rownr,IVCashrw);
  CalcProc(rowsum,gp,tproc);
  MatRowPut(IVCashp,rownr,IVCashrw);
  SendArtStat(IVCashrw.ArtCode,IVCashp.Location,IVCashrw.Recepy,gp,tproc,unitprdisc,IVCashp.TransDate,0);
  return;
end;

global
procedure IVCashSumupSoftEditFields(Integer wn,record IVCashVc IVCashr)
begin
  val v;

/*
this is not being shown and anyway takes some beeps, so not proper place
if (NPTSIVCashDClass)  
  v = MulRateToBase2(IVCashr.CurncyCode,IVCashr.Sum4,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
  PutWindowString(wn,"touchscreenbc2sum4",v);
  v = MulRateToBase2(IVCashr.CurncyCode,IVCashr.Sum1,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
  PutWindowString(wn,"touchscreenbc2sum1",v);
*/  
  return;
end;

global
function Boolean IVCashDClassOnOpenWindow(Integer wn)
begin
  record IVCashVc IVCashr;

  GetWindowRecord(wn,IVCashr);
  PutWindowString(wn,"PrevSuspended",IVCashr.Suspended);
  PutWindowString(wn,"Suspended","0");
  IVCashSumupSoftEditFields(wn,IVCashr);
  IVCashDClassLevelTop;
  IVCashDClassOnOpenWindow = false;
  return;
end;

global
procedure IVCashDClassOnWindowRecordChange(Integer wn)
begin
  record IVCashVc IVCashr;
  
  GetWindowRecord(wn,IVCashr);   
  if (WindowState(wn)!=Rs_normal) then begin
    IVCashDClass_RefreshStringList(wn,IVCashr);
  end;
  IVCashSumupSoftEditFields(wn,IVCashr);
//  PutWindowRecord(wn,IVCashr); causes crash cause PutWindowRecord calls OnWindowRecordChange so ....
  return;
end;

global
function Boolean IVCashDClassCommandNew(Integer wn)
begin
  record IVCashVc IVCashr;

  GetWindowRecord(wn,IVCashr);    
//  IVCashDClass_RefreshStringList(wn,IVCashr);
  IVCashSumupSoftEditFields(wn,IVCashr);
  PutWindowString(wn,"touchscreenitem","")
  PutWindowString(wn,"touchscreenitemname","")
  PutWindowString(wn,"touchscreenitemqty",blankval);
  PutWindowString(wn,"touchscreenitemprice",blankval);
  IVCashDClassCommandNew = false;
  return;
end;

procedure IVCashCheckVarietyCodeRow(record IVCashVc IVCashr,string artcode,var integer rownr,var row IVCashVc IVCashr2w)
begin
  row IVCashVc IVCashrw;
  integer rwcnt,i;

  if (nonblank(artcode)) then begin 
    rwcnt = MatRowCnt(IVCashr);
    IVCashr2w.Quant = 1;
    for (i=0; i<rwcnt; i=i+1) begin
      MatRowGet(IVCashr,i,IVCashrw);
      if (nonblank(IVCashrw.ArtCode) and (IVCashrw.ArtCode==artcode)) then begin
        rownr = i;
        IVCashr2w.Quant = IVCashrw.Quant + 1;
        i = rwcnt;               
      end;
    end;  
  end; 
end;

global
function Boolean IVCashDClasstouchscreenitemEFAfter(Integer wn,Integer pastewn,Boolean changedf)
begin  
  string 255 inwarning;
  record IVCashVc prevIVCashr;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  record INVc INr;
  string 255 location;
  Integer rownr;
  LongInt printrownr;
  record LocalMachineBlock LMb;
  Integer sernrf;
  Integer nwn;
  record RcVc RepSpec;
  Boolean res,ReturnModef,varf;
  Integer suspended;
  string 60 sz,msk,mskrep;
  string 200 varsubset;
  
  res = true;
  
  if (changedf) then begin
    BlockLoad(LMb);
    suspended = StringToInt(GetWindowString(wn,"Suspended"));
    ReturnModef = GetWindowString(wn,"ReturnMode")=="true";
    GetWindowRecord(wn,IVCashr);
    GetPrevWindowRecord(wn,prevIVCashr);
    if (IVCashr.OKFlag!=0) then begin goto LIVCashDClasstouchscreenitemEFAfter; end;
    if (IVCashr.Invalid!=0) then begin goto LIVCashDClasstouchscreenitemEFAfter; end;
    IVCashr.Suspended = suspended;
    ClearRow(IVCashr,IVCashrw,1);
    if (GetWindowString(wn,"ivcashcommandlastitemsernrf")=="true") then begin
      IVCashrw.SerialNr = GetWindowString(wn,"touchscreenitem");
    end else begin
      IVCashrw.ArtCode = GetWindowString(wn,"touchscreenitem");
//      varf = ReadFirstItem(IVCashrw.ArtCode,INr,true,false);
    end;
    rownr = MatRowCnt(IVCashr);
    if (UpdateExistingVarietyRowsf) then begin
      if (nonblank(IVCashrw.ArtCode) and FindStringInString(IVCashrw.ArtCode,".")) then begin     
        IVCashCheckVarietyCodeRow(IVCashr,IVCashrw.ArtCode,rownr,IVCashrw);        
      end;
    end; 
    MatRowPut(IVCashr,rownr,IVCashrw);
    if (GetWindowString(wn,"ivcashcommandlastitemsernrf")=="true") then begin
      if (IVCashVc_PasteSerialNr(IVCashr,rownr,TouchScreenLook)) then begin
        MatRowGet(IVCashr,rownr,IVCashrw);
        PutWindowString(wn,"touchscreenitemname",IVCashrw.Spec);
        PutWindowString(wn,"touchscreenitemqty",IVCashrw.Quant);
        PutWindowString(wn,"touchscreenitemprice",IVCashrw.Price);
        IVCashSumupSoftEditFields(wn,IVCashr);
        PutWindowRecord(wn,IVCashr);    
        IVCashDClass_RefreshStringList(wn,IVCashr);
        DisplayIVCashItem(IVCashr,rownr);
        PutWindowString(wn,"ivcashcommandlastitemsernrf","");
        PutWindowString(wn,"touchscreenitemlastrownr",rownr);
      end;
    end else begin
      if (IVCashVc_PasteArtCode(IVCashr,rownr,ReturnModef,inwarning,sernrf)) then begin
        varf = FindItemVAR(IVCashrw.ArtCode,sz,msk,mskrep,varsubset);

        if (nonblank(inwarning)) then begin
          MessageBox(0,inwarning);
        end;
        MatRowGet(IVCashr,rownr,IVCashrw);
        PutWindowString(wn,"touchscreenitemname",IVCashrw.Spec);
        PutWindowString(wn,"touchscreenitemqty",IVCashrw.Quant);
        PutWindowString(wn,"touchscreenitemprice",IVCashrw.Price);
        IVCashSumupSoftEditFields(wn,IVCashr);
        PutWindowRecord(wn,IVCashr);
        IVCashDClass_RefreshStringList(wn,IVCashr);
        DisplayIVCashItem(IVCashr,rownr);
        if (LMb.IncrementalReceiptPrinting!=0) then begin
          printrownr = StringToLongInt(GetWindowString(wn,"touchscreenitemlastrownr"));
          if (printrownr>=0) then begin
            if (IVCashPrintReceipt(wn,IVCashr,prevIVCashr,printrownr,false,false,LMb.IncrementalReceiptPrinting,WindowState(wn))) then begin
            end;
          end;
        end;
        PutWindowString(wn,"touchscreenitemlastrownr",rownr);
        PutWindowString(wn,"ivcashcommandlastitemsernrf","");
        if (FindStringInString(IVCashrw.ArtCode,".") or varf==false) then begin     
          if (sernrf==1) or (sernrf==2)  then begin
            PutWindowString(wn,"ivcashcommandlastitemsernrf","true");
            RepSpec.long1 = rownr;
            res = false;
            if (pastewn>0) then begin
              // CloseWindow(pastewn);
              // nwn = 
              ReOpenWindow(pastewn,"SerialNoScanNPTSSClass",0,wn,"","",RepSpec);
            end else begin
              nwn = OpenWindow("SerialNoScanNPTSSClass",0,wn,"","",RepSpec);
            end;
            goto LIVCashDClasstouchscreenitemEFAfter;
          end;
        end;
      end;
    end;
  end;
  SetWindowNameArg(wn,IVCashrw.ArtCode & ":" & location);
  switch (GetWindowClass(wn)) begin
    case "NPTSIVCashDClass":
      //WindowFieldGoto(wn,IVCashr,-1,"ivcashcommand",false);
      WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",false);
  end;
LIVCashDClasstouchscreenitemEFAfter:;  
  IVCashDClasstouchscreenitemEFAfter = true;
  return;
end;

global
function Boolean IVCashDClasstouchscreenitemserialnrEFAfter(Integer wn,Boolean changedf)
begin  
  string 255 inwarning;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  string 255 location;
  Integer rownr;

  if (changedf) then begin
    GetWindowRecord(wn,IVCashr);
    ClearRow(IVCashr,IVCashrw,1);
    IVCashrw.SerialNr = GetWindowString(wn,"touchscreenitemserialnr");
    rownr = MatRowCnt(IVCashr);
    MatRowPut(IVCashr,rownr,IVCashrw);
    if (IVCashVc_PasteSerialNr(IVCashr,rownr,TouchScreenLook)) then begin
      if (nonblank(inwarning)) then begin
        MessageBox(0,inwarning);
      end;
      MatRowGet(IVCashr,rownr,IVCashrw);
      PutWindowString(wn,"touchscreenitem",IVCashrw.ArtCode)
      PutWindowString(wn,"touchscreenitemname",IVCashrw.Spec)
      PutWindowString(wn,"touchscreenitemqty",IVCashrw.Quant);
      PutWindowString(wn,"touchscreenitemprice",IVCashrw.Price);
      IVCashSumupSoftEditFields(wn,IVCashr);
      PutWindowRecord(wn,IVCashr);      
      IVCashDClass_RefreshStringList(wn,IVCashr);
    end;
  end;
  SetWindowNameArg(wn,IVCashrw.ArtCode & ":" & location);
  IVCashDClasstouchscreenitemserialnrEFAfter = true;
  return;
end;
  
function Boolean IVCashDClasstouchscreenitemqtyEFAfter(Integer wn,Boolean changedf)
begin  
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer rownr;
 
  if (changedf) then begin
    GetWindowRecord(wn,IVCashr);
    rownr = MatRowCnt(IVCashr)-1;
    MatRowGet(IVCashr,rownr,IVCashrw);
    IVCashrw.Quant = StringToVal(GetWindowString(wn,"touchscreenitemqty"),2);
    MatRowPut(IVCashr,rownr,IVCashrw);
    if (IVCashVc_PasteQuant(IVCashr,rownr)) then begin    
      PutWindowRecord(wn,IVCashr);    
      IVCashDClass_RefreshStringList(wn,IVCashr);
      IVCashSumupSoftEditFields(wn,IVCashr);
      DisplayIVCashItem(IVCashr,rownr);
    end;    
  end;
  IVCashDClasstouchscreenitemqtyEFAfter = true;
  return;
end;

global
function Boolean IVCashDClasstouchscreenitempriceEFAfter(Integer wn,Boolean changedf)
begin  
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer rownr;
   record GeneralOptionBlock GenOptRec;

  if (changedf) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,IVCashr);
    rownr = MatRowCnt(IVCashr)-1;
    MatRowGet(IVCashr,rownr,IVCashrw);
    IVCashrw.Price = StringToVal(GetWindowString(wn,"touchscreenitemprice"),M4Val);
    MatRowPut(IVCashr,rownr,IVCashrw);
    if (IVCashDchrsum(IVCashr,rownr,GenOptRec.UseDiscount)) then begin
      IVCashDchsum(IVCashr,rownr);
      IVCashSumup(IVCashr,true);
      PutWindowRecord(wn,IVCashr);    
      IVCashDClass_RefreshStringList(wn,IVCashr);
      IVCashSumupSoftEditFields(wn,IVCashr);
    end;
  end;
  IVCashDClasstouchscreenitempriceEFAfter = true;
  return;
end;

global
function Boolean IVCashDClassActiveFieldOnNew(Integer wn)
begin
  Boolean res;
  record CashierDefBlock CDb;
  record IVCashVc IVCashr;

  GetWindowRecord(wn,IVCashr);
  BlockLoad(CDb);
  switch (CDb.DefInvoiceField) begin
    case 0:
      if (TouchScreenLook) then begin
        if (nonblank(IVCashr.CustCode)) then begin
          WindowFieldGoto(wn,IVCashr,0,"touchscreenitem",true);
          res = true;
        end;
      end;
    case 1:
      if (TouchScreenLook) then begin
        WindowFieldGoto(wn,IVCashr,0,"touchscreenitem",true);
        res = true;
      end else begin
        WindowFieldGoto(wn,IVCashr,0,"ArtCode",true);
        res = true;
      end;
    case 2:
      if (TouchScreenLook) then begin
        WindowFieldGoto(wn,IVCashr,0,"touchscreenitemserialnr",true);
        res = true;
      end else begin
        WindowFieldGoto(wn,IVCashr,0,"SerialNr",true);
        res = true;
      end;
  end;
  IVCashDClassActiveFieldOnNew = res;
  return;
end;

function Boolean IVCashDClassArtCodeEFAfter(Integer wn,Integer rownr,integer changed)
begin  
  string 255 inwarning;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  string 255 location;
  Integer sernrf,rownr2;
  Boolean ReturnModef;
  record INVc INr;

  rownr2 = rownr;
  ReturnModef = GetWindowString(wn,"ReturnMode")=="true";
  GetWindowRecord(wn,IVCashr);
  location = IVCashr.Location;
  MatRowGet(IVCashr,rownr,IVCashrw);
 
  if (nonblank(IVCashrw.ArtCode) and UpdateExistingVarietyRowsf) then begin 
    if (GetFirstItem(IVCashrw.ArtCode,INr)) then begin
    end;  
  end; 
  if ((changed!=0) or (blank(IVCashrw.Spec)) and (nonblank(IVCashrw.ArtCode))) then begin
    if (UpdateExistingVarietyRowsf) then begin 
      if (nonblank(IVCashrw.ArtCode) and FindStringInString(IVCashrw.ArtCode,".")) then begin
        IVCashCheckVarietyCodeRow(IVCashr,IVCashrw.ArtCode,rownr2,IVCashrw);
        MatRowPut(IVCashr,rownr2,IVCashrw);
        if (rownr2!=rownr) then begin 
          MatRowDelete(IVCashr,rownr);
        end;   
      end;    
    end;
    if (IVCashVc_PasteArtCode(IVCashr,rownr2,ReturnModef,inwarning,sernrf)) then begin
      if (nonblank(inwarning)) then begin
        MessageBox(0,inwarning);
      end;
      PutWindowRecord(wn,IVCashr);
      DisplayIVCashItem(IVCashr,rownr2);
    end else begin
      Beep;
    end;
  end;
  SetWindowNameArg(wn,IVCashrw.ArtCode & ":" & location);
  IVCashDClassArtCodeEFAfter = true;
  return;
end;

function Boolean IVCashDClassSerialNrEFAfter(Integer wn,Integer rownr,integer changed)
begin  
  string 255 inwarning;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  string 255 location;

  GetWindowRecord(wn,IVCashr);
  location = IVCashr.Location;
  MatRowGet(IVCashr,rownr,IVCashrw);
  if (changed!=0) then begin
    if (IVCashVc_PasteSerialNr(IVCashr,rownr,TouchScreenLook)) then begin
      if (nonblank(inwarning)) then begin
        MessageBox(0,inwarning);
      end;
      PutWindowRecord(wn,IVCashr);
      DisplayIVCashItem(IVCashr,rownr);
    end else begin
      Beep;
    end;
  end;
  SetWindowNameArg(wn,IVCashrw.ArtCode & ":" & location);
  IVCashDClassSerialNrEFAfter = true;
  return;
end;

function Boolean IVCashDClassQuantEFAfter(Integer wn,Integer rownr,integer changed)
begin  
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
 
  GetWindowRecord(wn,IVCashr);
  MatRowGet(IVCashr,rownr,IVCashrw);
  if ((changed!=0) or ((IVCashrw.Quant==1) and (nonblank(IVCashrw.Recepy)))) then begin    // changed to do PasteQuant always (if IVCashrw.Quant == 1)
    if (IVCashVc_PasteQuant(IVCashr,rownr)) then begin    
      PutWindowRecord(wn,IVCashr);    
      DisplayIVCashItem(IVCashr,rownr);
    end;    
  end;
  IVCashDClassQuantEFAfter = true;
  return;
end;

function Boolean IVCashDClassCashValueEFAfter(Integer wn, Integer rownr,Integer changed)
begin
  record IVCashVc IVCashr;

  if (changed!=0) then begin
  	GetWindowRecord(wn,IVCashr);
  	CalculatePOSCashBack(IVCashr);
    PutWindowRecord(wn,IVCashr);
  end;
  IVCashDClassCashValueEFAfter = true;
  return;
end;

function Boolean IVCashDClassTendValueEFAfter(Integer wn,Boolean changedf)
begin
  record IVCashVc IVCashr;

  if (changedf) then begin
  	GetWindowRecord(wn,IVCashr);
  	CalculatePOSCashBack(IVCashr);
    PutWindowRecord(wn,IVCashr);
  end;
  IVCashDClassTendValueEFAfter = true;
  return;
end;

function Boolean IVCashDClassRecValueEFAfter(Integer wn, Integer rownr,Integer changed)
begin
  record IVCashVc IVCashr;

  if (changed!=0) then begin
  	GetWindowRecord(wn,IVCashr);
  	CalculatePOSCashBack(IVCashr);
    PutWindowRecord(wn,IVCashr);
  end;
  IVCashDClassRecValueEFAfter = true;
  return;
end;

function Boolean IVCashDClassRecValue2EFAfter(Integer wn, Integer rownr,Integer changed)
begin
  record IVCashVc IVCashr;

  if (changed!=0) then begin
  	GetWindowRecord(wn,IVCashr);
  	CalculatePOSCashBack(IVCashr);
    PutWindowRecord(wn,IVCashr);
  end;
  IVCashDClassRecValue2EFAfter = true;
  return;
end;

function Boolean IVCashDClassPOSCurncyCodeEFAfter(Integer wn, Integer rownr,Integer changed)
begin
  record IVCashVc IVCashr;

  if (changed!=0) then begin
  	GetWindowRecord(wn,IVCashr);
  	CalculatePOSCashBack(IVCashr);
    PutWindowRecord(wn,IVCashr);
  end;
  IVCashDClassPOSCurncyCodeEFAfter = true;
  return;
end;

function Boolean IVCashDClassCashValueCurEFAfter(Integer wn, Integer rownr,Integer changed)
begin
  record IVCashVc IVCashr;

  if (changed!=0) then begin
  	GetWindowRecord(wn,IVCashr);
  	CalculatePOSCashBack(IVCashr);
    PutWindowRecord(wn,IVCashr);
  end;
  IVCashDClassCashValueCurEFAfter = true;
  return;
end;

function Boolean IVCashDClassCashValueB2EFAfter(Integer wn, Integer rownr,Integer changed)
begin
  record IVCashVc IVCashr;
  val t;

  if (changed!=0) then begin
  	GetWindowRecord(wn,IVCashr);
    Base2ToBase1(IVCashr.CashValueB2,IVCashr.InvDate,t); 
    IVCashr.CashValue = t;
    t = IVCashr.RecValue + IVCashr.RecValue2 + IVCashr.CashValue + MulWithRateToBase1(IVCashr.POSCurncyCode,IVCashr.InvDate,IVCashr.CashValueCur,DefaultCurRoundOff);
    t = t - IVCashr.Sum4; 
    Base2ToBase1(t,IVCashr.InvDate,t); 
    IVCashr.RetValueB2 = t;
    PutWindowRecord(wn,IVCashr);
  end;
  IVCashDClassCashValueB2EFAfter = true;
  return;
end;

function Boolean IVCashDClassInvDateEFAfter(Integer wn, Integer rownr,Integer changed)
begin
  record IVCashVc IVCashr;

  if (changed!=0) then begin
   GetWindowRecord(wn,IVCashr);
//?      if (DateWarned(&IVCashp->InvDate,"IVCashVc")) then
//?        Error0(1045);
  	
    PasteIVCashInvDate(wn,IVCashr);
    PutWindowRecord(wn,IVCashr);
  end;
  IVCashDClassInvDateEFAfter = true;
  return;
end;

function Boolean IVCashDClassLangCodeEFAfter(Integer wn, Integer rownr,Integer changed)
begin
  record IVCashVc IVCashr;

  if (changed!=0) then begin
  	GetWindowRecord(wn,IVCashr);
    ChangeIVCashSerialNr(wn,IVCashr);
    PutWindowRecord(wn,IVCashr);
  end;
  IVCashDClassLangCodeEFAfter = true;
  return;
end;

function Boolean IVCashDClassPayDealEFAfter(Integer wn,Integer rownr,Integer changed)
begin
  record IVCashVc IVCashr;
  val t;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,IVCashr);
    IVCashSumup(IVCashr,true);
    if (nonblank(IVCashr.PayDeal)) then begin
      t = IVCashr.RecValue + IVCashr.RecValue2 + IVCashr.CashValue;
      IVCashr.RecValue = IVCashr.Sum4 - t;
      if (IVCashr.RecValue<0) then begin
        IVCashr.RecValue = blankval;
      end;
      t = IVCashr.RecValue + IVCashr.RecValue2 + IVCashr.CashValue;
      IVCashr.RetValue = t - IVCashr.Sum4;
    end else begin
      IVCashr.RecValue = blankval;
    end;
    PutWindowRecord(wn,IVCashr);
  end;
  IVCashDClassPayDealEFAfter = true;
  return;
end;

function Boolean IVCashDClassPayDeal2EFAfter(Integer wn,Integer rownr,Integer changed)
begin
  record IVCashVc IVCashr;
  val t;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,IVCashr);
    IVCashSumup(IVCashr,true);
    if (nonblank(IVCashr.PayDeal2)) then begin
      t = IVCashr.RecValue + IVCashr.RecValue2 + IVCashr.CashValue;
      IVCashr.RecValue2 = IVCashr.Sum4 -t;
      if (IVCashr.RecValue2<0) then begin
        IVCashr.RecValue2 = blankval;
      end;
      t = IVCashr.RecValue + IVCashr.RecValue2 + IVCashr.CashValue;
      IVCashr.RetValue = t - IVCashr.Sum4;
    end else begin
      IVCashr.RecValue2 = blankval;
    end;
    PutWindowRecord(wn,IVCashr);
  end;
  IVCashDClassPayDeal2EFAfter = true;
  return;
end;

function Boolean IVCashDClassPriceListEFAfter(Integer wn,Boolean changedf)
begin
  record IVCashVc IVCashr;
  
  if (changedf) then begin
    GetWindowRecord(wn,IVCashr);
    IVCashVc_PastePriceList(IVCashr);
    PutWindowRecord(wn,IVCashr);
  end;
  IVCashDClassPriceListEFAfter = true;
  return;
end;

function Boolean IVCashDClassRebCodeEFAfter(Integer wn,Boolean changedf)
begin
  record IVCashVc IVCashr;
  
  if (changedf) then begin
    GetWindowRecord(wn,IVCashr);
    IVCashVc_PasteRebCode(IVCashr);
    PutWindowRecord(wn,IVCashr);
  end;
  IVCashDClassRebCodeEFAfter = true;
  return;
end;

function Boolean IVCashDClassCustCodeEFAfter(Integer wn,Integer rownr,Integer changed)
begin
  record IVCashVc IVCashr;
  Integer err;
  string 255 warning;
  record LocalMachineBlock LMb;
  
  GetWindowRecord(wn,IVCashr);
  if ((changed!=0) or (blank(IVCashr.Addr0) and (nonblank(IVCashr.CustCode)) )) then begin
    BlockLoad(LMb);
    if (IVCashVc_PasteCustCode(IVCashr,WindEFstr(wn),LMb.DefLocation,LMb.PLCode,err,warning)) then begin
      ChangeIVCashSerialNr(wn,IVCashr);
      if (nonblank(warning)) then begin
        MessageBox(0,warning);
      end;
      if (err!=0) then begin
        MessageBox(err,"");
      end;
    end else begin
      if (err!=0) then begin
        MessageBox(err,"");
      end;
    end;
    PutWindowRecord(wn,IVCashr);
  end;
  IVCashDClassCustCodeEFAfter = true;
  return;
end;

function Boolean IVCashDClassvRebateEFAfter(Integer wn,Integer rownr,Integer changed)
begin
  record IVCashVc IVCashr;
  record GeneralOptionBlock GenOptRec;

  if (changed!=0) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,IVCashr);
    if (IVCashDchrsum(IVCashr,rownr,GenOptRec.UseDiscount)) then begin
      IVCashDchsum(IVCashr,rownr);
      IVCashSumup(IVCashr,true);
    end;
    PutWindowRecord(wn,IVCashr);
  end;
  IVCashDClassvRebateEFAfter = true;
  return;
end;

function Boolean IVCashDClassPriceFactorEFAfter(Integer wn,Integer rownr,Integer changed)
begin
  record IVCashVc IVCashr;
  record GeneralOptionBlock GenOptRec;
  
  if (changed!=0) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,IVCashr);
    if (IVCashDchrsum(IVCashr,rownr,GenOptRec.UseDiscount)) then begin
      IVCashDchsum(IVCashr,rownr);
      IVCashSumup(IVCashr,true);
    end;
    PutWindowRecord(wn,IVCashr);
  end;
  IVCashDClassPriceFactorEFAfter = true;
  return;
end;

function Boolean IVCashDClassBasePriceEFAfter(Integer wn,Integer rownr,Integer changed)
begin
  record IVCashVc IVCashr;
  record GeneralOptionBlock GenOptRec;
  
  if (changed!=0) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,IVCashr);
    if (IVCashDchrsum(IVCashr,rownr,GenOptRec.UseDiscount)) then begin
      IVCashDchsum(IVCashr,rownr);
      IVCashSumup(IVCashr,true);
    end;
    PutWindowRecord(wn,IVCashr);
  end;
  IVCashDClassBasePriceEFAfter = true;
  return;
end;

function Boolean IVCashDClassPriceEFAfter(Integer wn,Integer rownr,Integer changed)
begin
  record IVCashVc IVCashr;
  record GeneralOptionBlock GenOptRec;
  
  if (changed!=0) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,IVCashr);
    if (IVCashDchrsum(IVCashr,rownr,GenOptRec.UseDiscount)) then begin
      IVCashDchsum(IVCashr,rownr);
      IVCashSumup(IVCashr,true);
    end;
    PutWindowRecord(wn,IVCashr);
  end;
  IVCashDClassPriceEFAfter = true;
  return;
end;

function Boolean IVCashDClassVATCodeEFAfter(Integer wn,Integer rownr,Integer changed)
begin
  record IVCashVc IVCashr;
  record GeneralOptionBlock GenOptRec;
  
  if (changed!=0) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,IVCashr);
    if (IVCashDchrsum(IVCashr,rownr,GenOptRec.UseDiscount)) then begin
      IVCashDchsum(IVCashr,rownr);
      IVCashSumup(IVCashr,true);
    end;
    PutWindowRecord(wn,IVCashr);
  end;
  IVCashDClassVATCodeEFAfter = true;
  return;
end;

function Boolean IVCashDClassDownPaidSumEFAfter(Integer wn,Integer rownr,Integer changed)
begin
  record IVCashVc IVCashr;
  record IVCashVc IVCash2r;
  record GeneralOptionBlock GenOptRec;
  
  if (changed!=0) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,IVCashr);
    GetPrevWindowRecord(wn,IVCash2r);
    if (IVCashDchrsum(IVCashr,rownr,GenOptRec.UseDiscount)) then begin
      IVCashDchsum(IVCashr,rownr);
      IVCashSumup(IVCashr,true);
    end;
    PutWindowRecord(wn,IVCashr);
    DisplayIVCashItem(IVCashr,rownr);
  end;
  IVCashDClassDownPaidSumEFAfter = true;
  return;
end;

function Boolean IVCashDClassSumEFAfter(Integer wn,Integer rownr,Integer changed)
begin
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  record INVc INr;
  val t,s;
  record GeneralOptionBlock GenOptRec;
  
  if (changed!=0) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,IVCashr);
    MatRowGet(IVCashr,rownr,IVCashrw);
    switch (IVCashrw.stp) begin
      case kInvoiceRowTypeGiftVoucherPayment:
        IVCashSumup(IVCashr,true);
      case kInvoiceRowTypeLoyaltyPointsPayment:
        IVCashSumup(IVCashr,true);
      case kInvoiceRowTypeCashPayment:
        IVCashSumup(IVCashr,true);
      case kInvoiceRowTypeChequePayment:
        IVCashSumup(IVCashr,true);
      case kInvoiceRowTypeCreditCardPayment:
        IVCashSumup(IVCashr,true);
      otherwise
        if ((IVCashrw.Quant!=0) and (IVCashrw.Price!=0)) then begin
          INr.Code = IVCashrw.ArtCode;
          if (ReadFirstMain(INr,1,true)) then begin
          end;
          if (INr.PriceFactor!=0) then begin
            t = IVCashrw.Price/INr.PriceFactor;
          end else begin
            t = IVCashrw.Price;
          end;
          s = IVCashrw.Sum/IVCashrw.Quant;
          s = t - s;
          s = s*100;
          s = s/t;
          IVCashrw.vRebate = Round(s,SetRoundModeD(1));
          MatRowPut(IVCashr,rownr,IVCashrw);
        end;
        if (IVCashDchrsum(IVCashr,rownr,GenOptRec.UseDiscount)) then begin
          IVCashDchsum(IVCashr,rownr);
          IVCashSumup(IVCashr,true);
        end;
    end;
    PutWindowRecord(wn,IVCashr);
  end;
  IVCashDClassSumEFAfter = true;
  return;
end;

function Boolean IVCashDClassLoyaltyCardNrEFAfter(Integer wn,Boolean changedf)
begin
  record IVCashVc IVCashr;
  
  if (changedf) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,IVCashr);
    IVCashVc_PasteLoyaltyCardNr(IVCashr);
    PutWindowRecord(wn,IVCashr);
  end;
  IVCashDClassLoyaltyCardNrEFAfter = true;
  return;
end;

global
function Boolean IVCashDClassGCNrEFAfter(Integer wn,Integer rownr,Integer changed)
begin  
  Integer res;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  record IVCashVc orgIVCashr;

  if (changed!=0) then begin  
    GetWindowRecord(wn,IVCashr);
    DeselectWindow(wn,false);
    MatRowGet(IVCashr,rownr,IVCashrw);
    switch (IVCashrw.stp) begin
      case kInvoiceRowTypeGiftVoucherSold:
        res = IVCashVc_PasteGiftCertificate(IVCashr,rownr,kInvoiceRowTypeGiftVoucherSold);
        if (res==0) then begin
          PutWindowRecord(wn,IVCashr);
        end else begin
          Beep;
        end;
      case kInvoiceRowTypeGiftVoucherPayment:
        res = IVCashVc_PasteGiftCertificate(IVCashr,rownr,kInvoiceRowTypeGiftVoucherPayment);
        if (res==0) then begin
          PutWindowRecord(wn,IVCashr);
        end else begin
          Beep;
        end;
    end;
  end;
  IVCashDClassGCNrEFAfter = true;
  return;
end;

global
function Boolean IVCashDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "Sum": res = IVCashDClassSumEFAfter(wn,rownr,changed);
    case "VATCode": res = IVCashDClassVATCodeEFAfter(wn,rownr,changed);
    case "Price": res = IVCashDClassPriceEFAfter(wn,rownr,changed);
    case "BasePrice": res = IVCashDClassBasePriceEFAfter(wn,rownr,changed);
    case "PriceFactor": res = IVCashDClassPriceFactorEFAfter(wn,rownr,changed);
    case "vRebate": res = IVCashDClassvRebateEFAfter(wn,rownr,changed);
    case "CustCode": res = IVCashDClassCustCodeEFAfter(wn,rownr,changed);
    case "PriceList": res = IVCashDClassPriceListEFAfter(wn,changed!=0);
    case "RebCode": res = IVCashDClassRebCodeEFAfter(wn,changed!=0);
    case "PayDeal2": res = IVCashDClassPayDeal2EFAfter(wn,rownr,changed);
    case "PayDeal": res = IVCashDClassPayDealEFAfter(wn,rownr,changed);
    case "LangCode": res = IVCashDClassLangCodeEFAfter(wn,rownr,changed);
    case "InvDate": res = IVCashDClassInvDateEFAfter(wn,rownr,changed);
    case "CashValueB2": res = IVCashDClassCashValueB2EFAfter(wn,rownr,changed);
    case "CashValueCur": res = IVCashDClassCashValueCurEFAfter(wn,rownr,changed);
    case "POSCurncyCode": res = IVCashDClassPOSCurncyCodeEFAfter(wn,rownr,changed);
    case "RecValue2": res = IVCashDClassRecValue2EFAfter(wn,rownr,changed);
    case "RecValue": res = IVCashDClassRecValueEFAfter(wn,rownr,changed);
    case "CashValue": res = IVCashDClassCashValueEFAfter(wn,rownr,changed);
    case "Quant": res = IVCashDClassQuantEFAfter(wn,rownr,changed);
    case "ArtCode": res = IVCashDClassArtCodeEFAfter(wn,rownr,changed);
    case "DownPaidSum": res = IVCashDClassDownPaidSumEFAfter(wn,rownr,changed);
    case "TendValue": res = IVCashDClassTendValueEFAfter(wn,changed!=0);
    case "SerialNr": res = IVCashDClassSerialNrEFAfter(wn,rownr,changed);
    case "LoyaltyCardNr": res = IVCashDClassLoyaltyCardNrEFAfter(wn,changed);
    case "GCNr": res = IVCashDClassGCNrEFAfter(wn,rownr,changed);
//touchscreen
    case "touchscreenitem": res = IVCashDClasstouchscreenitemEFAfter(wn,0,changed!=0);
    case "touchscreenitemqty": res = IVCashDClasstouchscreenitemqtyEFAfter(wn,changed!=0);
    case "touchscreenitemprice": res = IVCashDClasstouchscreenitempriceEFAfter(wn,changed!=0);
//    case "touchscreenitemserialnr": res = IVCashDClasstouchscreenitemserialnrEFAfter(wn,changed!=0);
//no updating stock
  end;
  IVCashDClassAfterEditField = res;
  return;
end;

function Boolean IVCashDClassRecValueEFBefore(Integer wn)
begin
  Boolean res;
  record IVCashVc IVCashr;
  record RahaxiBlock Rahaxib;

  BlockLoad(Rahaxib);
  if (Rahaxib.TerminalType!=kLocalCCTerminalNone) then begin
    GetWindowRecord(wn,IVCashr);        
    if (blank(IVCashr.AuthorizationCode)) then begin
      switch (Rahaxib.TerminalType) begin
        case kLocalCCTerminalRahaxi: OpenCCPayRahaxiDClass(wn,1,IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode);
        case kLocalCCTerminalSteriaCOM: OpenCCPaySteriaDClass(wn,1,IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode);
        case kLocalCCTerminalSteriaIP: OpenCCPaySteriaDClass(wn,1,IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode);
        case kLocalCCTerminalYomaniBanksys: OpenCCPayYomaniBanksysOClass(wn,IVCashr.PayDeal,"",IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode);
        case kLocalCCTerminalIngenico6550: OpenCCPayIngenicoOClass(wn,IVCashr.PayDeal,"",IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode);
        case kLocalCCTerminalVerifoneBanksys: OpenCCPayVerifoneBanksysOClass(wn,IVCashr.PayDeal,"",IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode);
      end;
    end else begin
    end;
  end;
  IVCashDClassRecValueEFBefore = res;
  return;
end;

function Boolean IVCashDClassRecValue2EFBefore(Integer wn)
begin
  Boolean res;
  record IVCashVc IVCashr;
  record RahaxiBlock Rahaxib;

  BlockLoad(Rahaxib);
  if (Rahaxib.TerminalType!=kLocalCCTerminalNone) then begin
    GetWindowRecord(wn,IVCashr);        
    if (blank(IVCashr.AuthorizationCode2)) then begin
      switch (Rahaxib.TerminalType) begin
        case kLocalCCTerminalRahaxi: OpenCCPayRahaxiDClass(wn,2,IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode);
        case kLocalCCTerminalSteriaCOM: OpenCCPaySteriaDClass(wn,2,IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode);
        case kLocalCCTerminalSteriaIP: OpenCCPaySteriaDClass(wn,2,IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode);
        case kLocalCCTerminalYomaniBanksys: OpenCCPayYomaniBanksysOClass(wn,IVCashr.PayDeal2,"",IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode);
        case kLocalCCTerminalIngenico6550: OpenCCPayIngenicoOClass(wn,IVCashr.PayDeal2,"",IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode);
        case kLocalCCTerminalVerifoneBanksys: OpenCCPayVerifoneBanksysOClass(wn,IVCashr.PayDeal2,"",IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode);
      end;
    end else begin
    end;
  end;
  IVCashDClassRecValue2EFBefore = res;
  return;
end;

function Boolean IVCashDClassBeforeQuantEditField(Integer wn,Integer rownr)
begin
  Boolean res;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;

  GetWindowRecord(wn,IVCashr);      
  if (rownr>=0) then begin
    MatRowGet(IVCashr,rownr,IVCashrw);
  end;
  if (TestForMATVARINS(wn)) then begin end;
  IVCashDClassBeforeQuantEditField = res;
  return;
end;

function Boolean IVCashDClassBeforeivcashcommandEditField(Integer wn)
begin
  Boolean res;

  if (nonblank(GetWindowNameArg(wn))) then begin
    if (TestForMATVARINS(wn)) then begin
    end;
  end;
  if (GetWindowString(wn,"ivcashcommandlastitemsernrf")=="true") then begin
    if (blank(GetWindowString(wn,"ivcashcommand"))) then begin
      PutWindowString(wn,"ivcashcommand",FindPOSCommandText(kPOSCommandsTypeSerialNr));
    end;
  end;
  IVCashDClassBeforeivcashcommandEditField = res;
  return;
end;

global
function Boolean IVCashDClassListClick(Integer wn,Integer rownr)
begin
  integer sline,matrowix,res;
  string 255 tstr,t2,tag;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  val t;
  Boolean testf;
  /*
  record RcVc RepSpec;
  Integer nwn,line;

  if (TouchScreenLook) then begin      
    line = SelectedListLine(wn);
    if (line>=0) then begin
      if (IVCashDClassDeleteRowTest(wn,0)) then begin
        nwn = OpenWindow("TouchScreenRowFunctionsWClass",0,wn,"","",RepSpec);
      end;
    end;
  end;
  IVCashDClassListClick = true;
  */
  
  //IVCashDClassSpecificLevel(10); //This is test code to simulate a 'Utilities' page when an item is selected in the list.
  
  sline = SelectedListLine(wn);
  if (sline<>-1) then begin
    tag = GetListTag(wn,sline);
    if ((tag==USetStr(24172)) or (tag==USetStr(24173)) or (tag==USetStr(24171))) then begin
      matrowix = -1;
    end else begin
      matrowix = StringToLongInt(tag);
    end;
  end else begin
    matrowix = -1;
  end;
  GetWindowRecord(wn,IVCashr);
  if (matrowix>=0) then begin
    MatRowGet(IVCashr,matrowix,IVCashrw);
    switch (IVCashrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkInvoiceRowTypeNormal1;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal1:;
        tstr = ValToString(IVCashrw.Quant,M4UVal,ThousandSeparator,DecimalSeparator,0) & "*" & ValToString(IVCashrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0);
        M4PadString(ValToString(IVCashrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),30-len(tstr)," ",true,t2);
        tstr = tstr & t2;
        if (HasLocalization("POL")) then begin
          tstr = tstr & chr(10) & USetStr(24171) & ": " & IVCashr.Sum4;
        end;
        SetPOSWindowDisplay(IVCashrw.ArtCode & " " & IVCashrw.Spec,tstr);
      case kInvoiceRowTypeCashPayment:
        tstr = IVCashrw.Spec & "  " & ValToString(IVCashrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0);
        SetPOSWindowDisplay(tstr,"");
      case kPOSButtonTypeOnAccountPayment:
        tstr = IVCashrw.Spec & "  " & ValToString(IVCashrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0);
        SetPOSWindowDisplay(tstr,"");
      otherwise
        SetPOSWindowDisplay("","");
    end;
  end else begin
    testf = true;
    tstr = ""; t2 = "";
    if (tag==USetStr(24172)) then begin
      t = IVCashr.RetValue;
      if (t<0) then begin t = 0.00; testf = false; end;
      if (blank(t)) then begin t = 0.00; testf = false; end;
      tstr = USetStr(24172) & "  " & ValToString(t,M4Val,ThousandSeparator,DecimalSeparator,0);
    end;
    if (testf) then begin    
      SetPOSWindowDisplay(tstr,t2);
    end else begin
      SetPOSWindowDisplay("","");
    end;
  end;
  //PutWindowString(wn,"touchscreenselecteditemtag",tstr);
  IVCashDClassListClick = false;
  return;
end;

global
function Boolean IVCashDClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
begin
  Boolean res;
  record IVCashVc IVCashr;
  Integer nwn;
  record RcVc RepSpec;

  switch (fieldname) begin
    case "RecValue": res = IVCashDClassRecValueEFBefore(wn);
    case "RecValue2": res = IVCashDClassRecValue2EFBefore(wn);
    case "Quant": res = IVCashDClassBeforeQuantEditField(wn,rownr);
    case "ivcashcommand": res = IVCashDClassBeforeivcashcommandEditField(wn);
    case "touchscreenitemqty": 
      switch (WindowState(wn)) begin
        case Rs_update:
          GetPrevWindowRecord(wn,IVCashr);
        otherwise
          GetWindowRecord(wn,IVCashr);
      end;
      if (IVCashr.OKFlag==0) and (IVCashr.Invalid==0) then begin
        nwn = OpenWindow("EnterTextWClass",0,wn,"","",RepSpec);
      end;
    case "touchscreenitemprice": 
      switch (WindowState(wn)) begin
        case Rs_update:
          GetPrevWindowRecord(wn,IVCashr);
        otherwise
          GetWindowRecord(wn,IVCashr);
      end;
      if (IVCashr.OKFlag==0) and (IVCashr.Invalid==0) then begin
        nwn = OpenWindow("EnterTextWClass",0,wn,"","",RepSpec);
      end;
/*    
    case "CustCode":
      if (TouchScreenLook) then begin      
        GetWindowRecord(wn,IVCashr);      
        if (IVCashr.OKFlag==0) and (IVCashr.Invalid==0) then begin
          nwn = OpenPasteWindow(wn,GetWindowPasteName(wn,fieldname),IVCashr.CustCode);
        end;
      end;
    case "touchscreenitem":
      if (TouchScreenLook) then begin      
        GetWindowRecord(wn,IVCashr);      
        if (IVCashr.OKFlag==0) and (IVCashr.Invalid==0) then begin
          nwn = OpenPasteWindow(wn,GetWindowPasteName(wn,fieldname),GetWindowString(wn,"touchscreenitem"));
        end;
      end;
*/      
  end;
  IVCashDClassBeforeEditField = res;
  return;
end;

global
function Boolean IVCashDClassOnEnterKey(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record IVCashVc IVCashr;

  switch (fieldname) begin
    case "touchscreenitem":
      GetWindowRecord(wn,IVCashr);      
      if (TouchScreenLook) then begin      
        WindowFieldGoto(wn,IVCashr,-1,"touchscreenitemqty",true);
        res = true;
      end;
    case "touchscreenitemqty":
      GetWindowRecord(wn,IVCashr);      
      if (TouchScreenLook) then begin      
        WindowFieldGoto(wn,IVCashr,-1,"touchscreenitem",true);
        res = true;
      end;
    otherwise
      res = true;     
  end;
LIVCashDClassOnEnterKey:;  
  IVCashDClassOnEnterKey = res;
  return;
end;

global
function Boolean IVCashDClassSwitchRow(Integer wn,Integer rownr)
begin
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer rwcnt;
  string 255 tstr,location,recepy;
  val t,tproc,unitprdisc;
  val rowsum,s;
  Boolean res;
  record TaxMatrixVc TMr;
  record INVc INr;
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);
  res = true;
  GetWindowRecord(wn,IVCashr);
  rwcnt = MatRowCnt(IVCashr);  
  if ((rownr<rwcnt) and (rownr>=0)) then begin
    MatRowGet(IVCashr,rownr,IVCashrw);
    tstr = IVCashrw.ArtCode;
    location = IVCashr.Location;
    if (IVCashrw.stp==1) then begin
      t = IVCashrw.rowGP;
      s = MulRateToBase1(IVCashr.CurncyCode,IVCashrw.Sum,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
      UnpackRowFieldMatrix(IVCashrw,"TaxMatrix",TMr);
      FindSalesExVat(TMr,IVCashrw.VATCode,s,IVCashr.InclVAT,IVCashr.NoTAXonVAT,rowsum);
      CalcProc(rowsum,t,tproc);
      unitprdisc = IVCashrw.Sum/IVCashrw.Quant;
      unitprdisc = Round(unitprdisc,DefaultRoundMode);
      recepy = IVCashrw.Recepy;
//      if (blankstrp(recepy)) then GetRecepy(IVCashrw.ArtCode,recepy); This makes one extra call, I can see why but we need another solution
      if (GuiType==kGuiiPhone) then begin 
        if (LMb.TouchScreenLookPicture!=0) then begin 
          if (ReadFirstItem(tstr,INr,true,false)) then begin 
            //TO DO: Update the Picture field on POS Invoice : Requires a new Primitive
          end else begin
            //TO DO: Blank the Picture field on POS Invoice : Requires a new Primitive
          end;
        end;
      end;
    end;
  end;
  SendArtStat(tstr,location,recepy,t,tproc,unitprdisc,IVCashr.TransDate,0);
  SetWindowNameArg(wn,tstr & ":" & location);
  IVCashDClassSwitchRow = res;
  return;
end;

global
procedure ItemStatusIVCashDsm()
begin
  Integer wn,nwn;
  Boolean testf;
  record RcVc RepSpec;
  
  wn = CurWindow;
  nwn = OpenArtStat(wn,RepSpec,true);
  testf = IVCashDClassSwitchRow(wn,WindowActiveRow(wn));
  return;
end;


global
function Boolean POSIVDClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
begin
  Boolean res;

  res = IVCashDClassBeforeEditField(wn,fieldname,fn,rownr);
  POSIVDClassBeforeEditField = res;
  return;
end;

global
function Boolean POSIVDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  res = IVCashDClassAfterEditField(wn,fieldname,fn,rownr,changed);
  POSIVDClassAfterEditField = res;
  return;
end;

global
function Boolean POSIVDClassSwitchRow(Integer wn,Integer rownr)
begin
  Boolean res;

  res = IVCashDClassSwitchRow(wn,rownr);
  POSIVDClassSwitchRow = res;
  return;
end;

procedure IVCashToolKeyPad_Numbers(string numberstr)
begin
  Integer wn;
  record IVCashVc IVCashr;
  
  wn = CurWindow;
  GetWindowRecord(wn,IVCashr);
  PasteString(wn,numberstr);
  PutWindowRecord(wn,IVCashr);
  return;
end;  


global 
procedure IVCashToolKeyPad00()
begin
  IVCashToolKeyPad_Numbers("00");
  return;
end;  

global 
procedure IVCashToolKeyPad0()
begin
  IVCashToolKeyPad_Numbers("0");
  return;
end;  

global
procedure IVCashToolKeyPad1()
begin
  IVCashToolKeyPad_Numbers("1");
  return;
end;  

global
procedure IVCashToolKeyPad2()
begin
  IVCashToolKeyPad_Numbers("2");
  return;
end;  

global
procedure IVCashToolKeyPad3()
begin
  IVCashToolKeyPad_Numbers("3");
  return;
end;  

global
procedure IVCashToolKeyPad4()
begin
  IVCashToolKeyPad_Numbers("4");
  return;
end;  

global
procedure IVCashToolKeyPad5()
begin
  IVCashToolKeyPad_Numbers("5");
  return;
end;  

global
procedure IVCashToolKeyPad6()
begin
  IVCashToolKeyPad_Numbers("6");
  return;
end;  

global
procedure IVCashToolKeyPad7()
begin
  IVCashToolKeyPad_Numbers("7");
  return;
end;  

global
procedure IVCashToolKeyPad8()
begin
  IVCashToolKeyPad_Numbers("8");
  return;
end;  

global
procedure IVCashToolKeyPad9()
begin
  IVCashToolKeyPad_Numbers("9");
  return;
end;

global
procedure IVCashToolKeyPadPoint()
begin
  IVCashToolKeyPad_Numbers("."); //## international
  return;
end;  

global
procedure IVCashToolKeyPadEnter()
begin
  KeyPadEnter(CurWindow);
  return;
end;  

global
procedure IVCashToolKeyPadDelete()
begin
  KeyPadSelectAll(CurWindow);
  KeyPadDelete(CurWindow);
  return;
end;  

global
procedure IVCashToolKeyPadAdd()
begin
  Integer wn,rownr;
  record INVc INr;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Boolean testf;
  Integer i,rwcnt;
  string 255 inwarning;
  Integer sernrf;
  
  wn = CurWindow;
  if (WindowActiveField(wn)=="Quant") then begin testf = true; end;
  if (WindowActiveField(wn)=="Price") then begin testf = true; end;
  if (WindowActiveField(wn)=="Split") then begin testf = true; end;
  if (ReadMarkedRecord(wn,INr)) then begin 
  end;
  WindowDeactivateField(wn);
  if (testf) then begin
    rownr = WindowActiveRow(wn);
    if (rownr>=0) then begin
      GetWindowRecord(wn,IVCashr);  
      MatRowGet(IVCashr,rownr,IVCashrw);
      if (nonblank(INr.Code)) then begin
        if (INr.Code!=IVCashrw.ArtCode) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        IVCashrw.Quant = IVCashrw.Quant + 1;
        MatRowPut(IVCashr,rownr,IVCashrw);
        IVCashVc_PasteQuant(IVCashr,rownr);
        IVCashSumup(IVCashr,true);
        PutWindowRecord(wn,IVCashr);  
        goto LIVCashToolKeyPadAdd;
      end;
    end;
  end;
  if (nonblank(INr.Code)) then begin
    GetWindowRecord(wn,IVCashr);  
    rwcnt = MatRowCnt(IVCashr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVCashr,i,IVCashrw);
      if (blank(IVCashrw.ArtCode)) then begin
        rownr = i;
        goto L55IVCashToolKeyPadAdd;
      end;
    end;
    rownr = rwcnt;
L55IVCashToolKeyPadAdd:;  
    ClearRow(IVCashr,IVCashrw,1);
    IVCashrw.ArtCode = INr.Code;
    MatRowPut(IVCashr,rownr,IVCashrw);
    if (IVCashVc_PasteArtCode(IVCashr,rownr,false,inwarning,sernrf)) then begin end;
    IVCashSumup(IVCashr,true);
    PutWindowRecord(wn,IVCashr);  
    DisplayIVCashItem(IVCashr,rownr);
    WindowFieldGoto(wn,IVCashr,rownr,"Quant",true);
  end;
LIVCashToolKeyPadAdd:;  
  return;
end;  

global
procedure IVCashToolKeyPadSub()
begin
  Integer wn,rownr;
  record INVc INr;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Boolean testf;
  
  wn = CurWindow;
  rownr = WindowActiveRow(wn);
  GetWindowRecord(wn,IVCashr);  
  if (WindowActiveField(wn)=="Quant") then begin testf = true; end;
  if (WindowActiveField(wn)=="Price") then begin testf = true; end;
  if (WindowActiveField(wn)=="Split") then begin testf = true; end;
  if (testf) then begin
    rownr = WindowActiveRow(wn);
    if (rownr>=0) then begin
      GetWindowRecord(wn,IVCashr);  
      MatRowGet(IVCashr,rownr,IVCashrw);
      if (ReadMarkedRecord(wn,INr)) then begin 
        if (INr.Code!=IVCashrw.ArtCode) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        IVCashrw.Quant = IVCashrw.Quant - 1;
        MatRowPut(IVCashr,rownr,IVCashrw);
        IVCashVc_PasteQuant(IVCashr,rownr);
        PutWindowRecord(wn,IVCashr);  
      end;
    end;
  end;
  return;
end;  

global
function Integer GetPOSCommand(string input,var string value1,var string value2,var Integer decimalptfctr)
begin
  Integer res;
  record POSCommandsBlock POSCb;
  row POSCommandsBlock POSCrw;
  Integer i,rwcnt,spacepos;
  string 255 commandstr,tstr;
  record SysFormatBlock SFb;
  record INVc INr;
  
  INr.Code = input;
  if (ReadFirstMain(INr,1,true)) then begin
    goto LGetPOSCommand;
  end;
  
  BlockLoad(SFb);
  BlockLoad(POSCb);
  value1 = "";
  value2 = "";
  decimalptfctr = 1;
  rwcnt = MatRowCnt(POSCb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POSCb,i,POSCrw);
    switch (POSCrw.Command) begin
      case kPOSCommandsBeforeData:
        commandstr = Left(input,len(POSCrw.Text));
      case kPOSCommandsAfterDate:
        commandstr = Right(input,len(input)-len(POSCrw.Text));
    end;
    
    commandstr = Left(input,len(POSCrw.Text));
    if (POSCrw.Text==commandstr) then begin
      res = POSCrw.Action;
      tstr = Right(input,len(input)-len(commandstr));
      spacepos = FindCharPosition(tstr," ");
      if (spacepos==0) then begin
        spacepos = FindCharPosition(tstr,"=");
      end;
      if (spacepos==0) then begin
        value1 = tstr;
      end else begin
        value1 = Left(tstr,spacepos);
        value2 = Right(tstr,len(tstr) - spacepos - 1);
      end;      
      switch (res) begin
        case kPOSCommandsTypeSerialNr:
        case kPOSCommandsTypeLoyaltyCard:
        case kPOSCommandsTypeSalesAssistant:
        otherwise
          decimalptfctr = FindCharPosition(value1,DecimalSeparator);
          if (decimalptfctr>0) then begin
            decimalptfctr = Power(10,len(value1)-decimalptfctr-1);
          end;
          value1 = StripNonDigits(value1);
      end;

//      value2 = StripNonDigits(value2);// this is item code , so cannto be striped
      goto LGetPOSCommand;
    end;
    commandstr = Right(input,len(POSCrw.Text));
    if (POSCrw.Text==commandstr) then begin
      res = POSCrw.Action;
      tstr = Left(input,len(input)-len(commandstr));      
      spacepos = FindCharPosition(tstr," ");
      if (spacepos==0) then begin
        spacepos = FindCharPosition(tstr,"=");
      end;
      if (spacepos==0) then begin
        value1 = tstr;
      end else begin
        value1 = Right(tstr,len(tstr) - spacepos - 1);
        value2 = Left(tstr,spacepos);
      end;
      switch (res) begin
        case kPOSCommandsTypeSerialNr:
        case kPOSCommandsTypeLoyaltyCard:
        case kPOSCommandsTypeSalesAssistant:
        otherwise
          decimalptfctr = FindCharPosition(value1,DecimalSeparator);
          if (decimalptfctr>0) then begin
            decimalptfctr = Power(10,len(value1)-decimalptfctr-1);
          end;
          value1 = StripNonDigits(value1);
      end;
//      value2 = StripNonDigits(value2);// this is item code , so cannto be striped
      goto LGetPOSCommand;
    end;
  end;
LGetPOSCommand:; 
  if (res==0) then begin
    value1 = input;
  end; 
//StopAlert("res " & res & " value1 " & value1 & " value2 " & value2);
  GetPOSCommand = res;
  return;
end;

function Integer LastEnteredItemRowNr(record IVCashVc IVCashr)
begin
  Integer res;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(IVCashr);
  MatRowGet(IVCashr,rwcnt-1,IVCashrw);        
  if (IVCashrw.stp!=kInvoiceRowTypeStructuredItemComponent) then begin
    res = rwcnt - 1;
    goto LLastEnteredItemRowNr;
  end;
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(IVCashr,i,IVCashrw);        
    if (IVCashrw.stp!=kInvoiceRowTypeStructuredItemComponent) then begin
      res = i;
      goto LLastEnteredItemRowNr;
    end;
  end;
LLastEnteredItemRowNr:;  
  LastEnteredItemRowNr = res;
  return;
end;

global
updating function Boolean POSPIVCashDClassOnEnterKey(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  string 255 input,tstr,value1,value2;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  record INVc INr;
  Integer rwcnt,selrownr;
  val v1,vreb;
  Boolean save_record,new_record;
  Integer sernrf,decimalptfctr;
  
  input = GetWindowString(wn,"ivcashcommand");
  PutWindowString(wn,"ivcashcommand","");
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVCashr);
  
  // If purchase is done create new record
  if (IVCashr.OKFlag!=0) then begin
    WindowDoCancel(wn);
    WindowDoNew(wn,0);
    GetWindowRecord(wn,IVCashr);
  end;
  if (blank(input)) then begin
    goto LPOSPIVCashDClassOnEnterKey;
  end;
  if (IVCashr.Invalid!=0) then begin
    goto LPOSPIVCashDClassOnEnterKey;
  end;
  rwcnt = MatRowCnt(IVCashr);
  switch (GetPOSCommand(input,value1,value2,decimalptfctr)) begin
    case kPOSCommandsTypeQuantityAndItem:
      if (GetFirstItem(value2,INr)) then begin
        IVCashrw.ArtCode = INr.Code;
        IVCashrw.Quant = StringToVal(value1,M4Val);   
        if (decimalptfctr!=0) then begin
          IVCashrw.Quant = IVCashrw.Quant/decimalptfctr;
        end;
        if (rwcnt==0) then begin
          MatRowInsert(IVCashr,rwcnt,IVCashrw);
        end else begin
          MatRowPut(IVCashr,rwcnt,IVCashrw);
        end;
        if (IVCashVc_PasteArtCode(IVCashr,rwcnt,false,tstr,sernrf)) then begin
        end;
        DisplayIVCashItem(IVCashr,rwcnt);
      end else begin
        StopAlert(USetStr(1233));
        goto LPOSPIVCashDClassOnEnterKey;
      end;
    case kPOSCommandsTypeCash:
      if (blank(value1)) then begin
        IVCashr.CashValue = IVCashr.Sum4 - IVCashr.RecValue;
        save_record = true;    
      end else begin
        v1 = StringToVal(value1,M4Val);
        if (decimalptfctr!=0) then begin
          v1 = v1/decimalptfctr;
        end;
        if (v1==0) then begin
          IVCashr.CashValue = 0;
          IVCashSumup(IVCashr,true);              
        end else begin
          IVCashr.CashValue = IVCashr.CashValue + v1;
          save_record = true;      
        end;
      end;
    case kPOSCommandsTypeFinish:
      IVCashSumup(IVCashr,true);              
      IVCashr.OKFlag = 1;
      save_record = true;      
      new_record = true;
    case kPOSCommandsTypeCreditCardSum:
      if (blank(value1)) then begin
        IVCashr.RecValue = IVCashr.Sum4 - IVCashr.CashValue;
        save_record = true;    
      end else begin
        v1 = StringToVal(value1,M4Val);
        if (decimalptfctr!=0) then begin
          v1 = v1/decimalptfctr;
        end;
        if (v1==0) then begin
          IVCashr.RecValue = 0;
          IVCashSumup(IVCashr,true);              
        end else begin
          IVCashr.RecValue = IVCashr.RecValue + v1;
          save_record = true;      
        end;
      end;
    case kPOSCommandsTypeRebate:
      if (rwcnt>0) then begin
        selrownr = GetSelectedPOSItemRowIndex(wn);
        if (selrownr<0) then begin
          selrownr = LastEnteredItemRowNr(IVCashr);
        end;
        MatRowGet(IVCashr,selrownr,IVCashrw);
        vreb = StringToVal(value1,M4UVal);
        IVCashrw.vRebate = value1;
        if (decimalptfctr!=0) then begin
          IVCashrw.vRebate = vreb/decimalptfctr;
        end;
        MatRowPut(IVCashr,selrownr,IVCashrw);                
        if (IVCashDchrsum(IVCashr,selrownr,0)) then begin 
          IVCashDchsum(IVCashr,selrownr);
          IVCashSumup(IVCashr,true);      
        end;
        DisplayIVCashItem(IVCashr,selrownr);
      end;
    case kPOSCommandsTypeDeleteRow:
      rwcnt = StringToInt(value1) - 1;
      if (rwcnt<MatRowCnt(IVCashr)) then begin
        if (UserCanAction("AllowIVTSRowsDelete",false)==false) then begin
//          SetSelectedListLine(wn,rwcnt);
//          POSManagersAction("DeleteItem");
        end else begin
          DisplayIVCashItemStorno(IVCashr,rwcnt);        
          MatRowDelete(IVCashr,rwcnt);
        end;
        IVCashSumup(IVCashr,true);      
      end;
    otherwise
      StripSpace(tstr,value1);
      if (ReadFirstItem(tstr,INr,true,false)) then begin
        rwcnt = MatRowCnt(IVCashr);
        IVCashrw.ArtCode = INr.Code;
        IVCashrw.Quant = 1;
        MatRowPut(IVCashr,rwcnt,IVCashrw);
        if (IVCashVc_PasteArtCode(IVCashr,rwcnt,false,tstr,sernrf)) then begin 
        DisplayIVCashItem(IVCashr,rwcnt);
        end;        
      end else begin
        StopAlert(USetStr(1233));
        goto LPOSPIVCashDClassOnEnterKey;
      end;
  end;
  PutWindowRecord(wn,IVCashr);
  if (save_record) then begin
    if (WindowDoOK(wn,0)==false) then begin 
      IVCashr.OKFlag = 0;
      PutWindowRecord(wn,IVCashr);
      new_record = false;
    end;  
  end;
  if (new_record) then begin
    WindowDoNew(wn,0);
  end;
  DeselectWindow(wn,false);
  //WindowFieldGoto(wn,IVCashr,-1,"ivcashcommand",false);
  WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",false);
LPOSPIVCashDClassOnEnterKey:;  
  POSPIVCashDClassOnEnterKey = res;
  return;
end;

global
function Boolean POSPIVCashDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  
  switch (fieldname) begin
    case "ivcashcommand": res = true;
    otherwise res = UserCanAction("AllowPOSOfflineChanging",false);
  end;
  POSPIVCashDClassActiveEditField = res;
  return;
end;

global
function Boolean POSPIVCashDClassUpdateTest(Integer wn)
begin
  Boolean res;
  record IVCashVc IVCashr;
  
  GetWindowRecord(wn,IVCashr);
  res = (IVCashr.OKFlag==0) and (IVCashr.Invalid==0);
  POSPIVCashDClassUpdateTest = res;
  return;
end;

global 
function Boolean POSPIVCashDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record IVCashVc IVCashr;
  Boolean res;

  res = true;
  if (WindowState(wn)==2) then begin//Rs_update
    GetPrevWindowRecord(wn,IVCashr);    
    if (IVCashr.OKFlag!=0) then begin res = false; end;
    if (IVCashr.Invalid!=0) then begin res = false; end;
  end;
LPOSPIVCashDClassDeleteRowTest:;  
  POSPIVCashDClassDeleteRowTest = res;
  return;
end;

global
function Boolean POSPIVCashDClassOnOverStrike(Integer wn,Integer rownr)
begin
  record IVCashVc IVCashr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,IVCashr);    
    IVCashSumup(IVCashr,true);
    PutWindowRecord(wn,IVCashr);    
  end;
  POSPIVCashDClassOnOverStrike = true;
  return;
end;


global
function Boolean NPTSIVCashDClassOnOpenWindowExecute(Integer wn)
begin
  Boolean res;
  record IVCashVc IVCashr;
  Integer level;
  Integer nwn;
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);
  
  res = IVCashDClassOnOpenWindow(wn);
  GetWindowRecord(wn,IVCashr);
//  if (ClientMode==false) or (SingleUserMode) then begin
    IVCashDClass_RefreshStringList(wn,IVCashr);
    if (WindowState(wn)!=Rs_insert) then begin
      ReRunWindowDef(wn);
    end;    
//  end;
  level = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
  PutWindowString(wn,"touchscreenwindowpageprevious",level);
  
  if (LMb.UseCustomerDisplay!=0) then begin
    nwn = OpenWindow("NPTSIVCashCUDisplayDClass",0,wn,"","",IVCashr);
    if (nwn>0) then begin
      PutWindowString(nwn,"posinvoicenumberwn",wn);
    end;
  end;
  
  //if (WindowState(wn)==Rs_insert) then begin  // This is the correct way: TODO: Make it work this way
  if (MatRowCnt(IVCashr)==0) then begin 
    PutWindowString(wn,"CustomerDisplayData_Line1",USetStr(24165)); 
    PutWindowString(wn,"CustomerDisplayData_Line2","");   
  end else begin
    PutWindowString(wn,"CustomerDisplayData_Line1",USetStr(16016) & ValToString(IVCashr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0));  
    PutWindowString(wn,"CustomerDisplayData_Line2","");   
  end;
  
  NPTSIVCashDClassOnOpenWindowExecute = res;
  return;
end;

global
function Boolean NPTSIVCashDClassOnOpenWindow(Integer wn)
begin
  Boolean res;
  
  res = NPTSIVCashDClassOnOpenWindowExecute(wn);
  
//  WindowFieldGoto(wn,IVCashr,-1,"ivcashcommand",false);
  NPTSIVCashDClassOnOpenWindow = res;
  return;
end;

global
function Boolean NPTSIVCashCUDisplayDClassOnOpenWindow(Integer wn)
begin
  Boolean res;
  record IVCashVc IVCashr;
  Integer ivwn;
  
  ivwn = StringToInt(GetWindowString(wn,"posinvoicenumberwn"));
  if (ivwn==0) then begin
    ivwn = MotherWindow(wn);
  end;
  if (ivwn>0) then begin
    GetWindowRecord(ivwn,IVCashr);
    SetPOSWindowDisplay("","");
    ReRunWindowDef(wn);
    IVCashDClass_RefreshStringList(wn,IVCashr);
  end;
  NPTSIVCashCUDisplayDClassOnOpenWindow = true;
  return;
end;

procedure PasteSplitItem(Integer wn,var record IVCashVc IVCashr,Integer rownr,val qty,record SplitINVc SplitINr)
begin
  row IVCashVc IVCashrw;
  
  ClearRow(IVCashr,IVCashrw,kInvoiceRowTypeSplitItem);
  IVCashrw.ArtCode = SplitINr.FromArtCode;
  IVCashrw.Quant = qty;
  IVCashrw.Spec = SplitINr.FromArtName;
  IVCashrw.SplitArtCode = SplitINr.ToArtCode;
  IVCashrw.SplitFactor = SplitINr.Factor;
  IVCashrw.SplitQuant = IVCashrw.Quant*SplitINr.Factor;
  IVCashrw.SplitArtName = SplitINr.ToArtName;
  MatRowPut(IVCashr,rownr,IVCashrw);
  PutWindowRecord(wn,IVCashr);  
  IVCashDClass_RefreshStringList(wn,IVCashr);
  return;
end;

updating procedure SplitItemNPTSSClassDo(Integer wn)
begin
  record SplitINVc SplitINr;
  record IVCashVc IVCashr;
  record RcVc RepSpec;
  Integer mwn;
  
  mwn = MotherWindow(wn);
  if (mwn>0) then begin
    DeselectWindow(wn,false);  
    GetWindowRecord(wn,RepSpec);
    GetWindowRecord(mwn,IVCashr);
    SplitINr.FromArtCode = RepSpec.AccStr;
    SplitINr.ToArtCode = RepSpec.ObjStr;
    if (ReadFirstMain(SplitINr,2,true)) then begin
      if (RepSpec.vals0>0) then begin
        PasteSplitItem(mwn,IVCashr,RepSpec.long1,RepSpec.vals0,SplitINr);
        CloseWindow(wn);
        WindowDoOK(mwn,0);
        //WindowFieldGoto(wn,IVCashr,-1,"ivcashcommand",false);
        WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",false);
      end;
      OverrideLogout;
    end;
  end;
  return;
end;

global
updating function Boolean SplitItemNPTSSClassOnOKWindow(Integer wn)
begin
  SplitItemNPTSSClassDo(wn);
  SplitItemNPTSSClassOnOKWindow = true;
  return;
end;

global
updating procedure ProceedSplitItemNPTSSClass()
begin
  SplitItemNPTSSClassDo(CurWindow);
  return;
end;

global
updating procedure IVCashDClassTouchScreenSplitItem()
begin
  Integer wn,mwn,line,rownr;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  string 255 tstr,tagstr;
  Boolean testf;
  record SplitINVc SplitINr;
  
  mwn = CurWindow;
  line = SelectedListLine(mwn);

  if (line>=0) then begin
    if (UserCanAction("AllowSplitItem",false)==false) then begin
      POSManagersAction(mwn,"SplitItem");
      goto LIVCashDClassTouchScreenSplitItem;
    end;
    tagstr = GetListTag(mwn,line);
    rownr = StringToInt(tagstr);
    if (rownr>=0) then begin
      RecordClear(RepSpec);
      GetWindowRecord(mwn,IVCashr);
      MatRowGet(IVCashr,rownr,IVCashrw);
      testf = true;
      if (IVCashrw.stp!=kInvoiceRowTypeNormal) then begin testf = false; end;
      if (IVCashrw.ovst!=0) then begin testf = false; end;
      if (IVCashr.OKFlag!=0) then begin goto LIVCashDClassTouchScreenSplitItem; end;
      if (IVCashr.Invalid!=0) then begin goto LIVCashDClassTouchScreenSplitItem; end;
      if (testf) then begin
        switch (TouchScreenSplitItemRemote(IVCashrw.ArtCode,SplitINr)) begin
          case 0:
            MessageBox(20864,"");
          case 1:
            PasteSplitItem(mwn,IVCashr,rownr,1.00,SplitINr);
            WindowDoOK(mwn,0);
            OverrideLogout;
            //WindowFieldGoto(mwn,IVCashr,-1,"ivcashcommand",false);
            WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false);
          otherwise
            RepSpec.AccStr = IVCashrw.ArtCode;
            RepSpec.vals0 = 1.00;
            RepSpec.long1 = rownr;
            wn = OpenWindow("SplitItemNPTSSClass",0,mwn,"","",RepSpec);
            SelectWindow(wn);
            WindowFieldGoto(wn,RepSpec,-1,"ObjStr",false);
        end;
      end;
    end;
  end;
LIVCashDClassTouchScreenSplitItem:;  
  return;
end;

global
procedure NPTSIVCashDClassOnWindowRecordChange(Integer wn)
begin
  IVCashDClassOnWindowRecordChange(wn);
  ReRunWindowDef(wn);
  return;
end;

global
function Boolean NPTSIVCashDClassCommandNew(Integer wn)
begin
  NPTSIVCashDClassCommandNew = IVCashDClassCommandNew(wn);
  return;
end;

global
function Boolean NPTSIVCashDClassActiveFieldOnNew(Integer wn)
begin
  record IVCashVc IVCashr;
  
  //WindowFieldGoto(wn,IVCashr,-1,"ivcashcommand",false);
  WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",false);
//  NPTSIVCashDClassActiveFieldOnNew = IVCashDClassActiveFieldOnNew(wn);
  NPTSIVCashDClassActiveFieldOnNew = true;
  return;
end;

global
function Boolean NPTSIVCashDClassActiveFieldOnOpen(Integer wn)
begin
  record IVCashVc IVCashr;
  
  //WindowFieldGoto(wn,IVCashr,-1,"ivcashcommand",false);
  WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",false);
  NPTSIVCashDClassActiveFieldOnOpen = true;
  return;
end;

global
function Boolean NPTSIVCashDClassListClick(Integer wn,Integer rownr)
begin
  NPTSIVCashDClassListClick = IVCashDClassListClick(wn,rownr);
  return;
end;

global
function Boolean NPTSIVCashDClassListDoubleClick(Integer wn,Integer rownr)
begin
  integer sline,matrowix,res;
  string 255 tag;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  record INVc INr;
  Integer nwn;

  sline = SelectedListLine(wn);
  if (sline<>-1) then begin
    tag = GetListTag(wn,sline);
    if ((tag==USetStr(24172)) or (tag==USetStr(24173)) or (tag==USetStr(24171))) then begin
      matrowix = -1;
    end else begin
      matrowix = StringToLongInt(tag);
    end;
  end else begin
    matrowix = -1;
  end;
  GetWindowRecord(wn,IVCashr);
  if (matrowix>=0) then begin
    MatRowGet(IVCashr,matrowix,IVCashrw);
    switch (IVCashrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkInvoiceRowTypeNormal2;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal2:;
        INr.Code = IVCashrw.ArtCode;
        if (ReadFirstMain(INr,1,true)) then begin
          nwn = OpenWindow("NPTSIVCashItemInfoOClass",0,wn,"","",INr);
        end;
      case kInvoiceRowTypeCashPayment:
      otherwise
    end;
  end;
  NPTSIVCashDClassListDoubleClick = false;
  return;
end;

global
procedure IVCashDClassTouchScreenEditItemRecord()
begin
  Integer sline,matrowix,res;
  string 255 tag;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  record INVc INr;
  Integer wn,nwn;

  wn = CurWindow;
  sline = SelectedListLine(wn);
  if (sline<>-1) then begin
    tag = GetListTag(wn,sline);
    if ((tag==USetStr(24172)) or (tag==USetStr(24173)) or (tag==USetStr(24171))) then begin
      matrowix = -1;
    end else begin
      matrowix = StringToLongInt(tag);
    end;
  end else begin
    matrowix = -1;
  end;
  GetWindowRecord(wn,IVCashr);
  if (matrowix>=0) then begin
    MatRowGet(IVCashr,matrowix,IVCashrw);
    switch (IVCashrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkInvoiceRowTypeNormal2;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal2:;
        INr.Code = IVCashrw.ArtCode;
        if (ReadFirstMain(INr,1,true)) then begin
          nwn = OpenWindow("INDClass",0,wn,"","",INr);
        end;
      case kInvoiceRowTypeCashPayment:
      otherwise
    end;
  end;
  return;
end;


global
function Boolean RestAccDClassListDoubleClick(Integer wn,Integer rownr)
begin
  integer sline,res,matrowix;
  string 255 tag;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  record INVc INr;
  Integer nwn;

  sline = SelectedListLine(wn);
  if (sline<>-1) then begin
    tag = GetListTag(wn,sline);
    if ((tag==USetStr(24172)) or (tag==USetStr(24173)) or (tag==USetStr(24171))) then begin
      matrowix = -1;
    end else begin
      matrowix = StringToLongInt(tag);
    end;
  end else begin
    matrowix = -1;
  end;
  if (matrowix>=0) then begin
    GetWindowRecord(wn,RestAccr);
    if (matrowix>=0) then begin
      MatRowGet(RestAccr,matrowix,RestAccrw);
      switch (RestAccrw.stp) begin
        case kInvoiceRowTypeNormal:
          INr.Code = RestAccrw.ArtCode;
          if (ReadFirstMain(INr,1,true)) then begin
            nwn = OpenWindow("NPTSIVCashItemInfoOClass",0,wn,"","",INr);
          end;
        case kInvoiceRowTypeCashPayment:
        otherwise
      end;
    end;
  end;
  RestAccDClassListDoubleClick = false;
  return;
end;

global
function Boolean NPTSIVCashDClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
begin
  NPTSIVCashDClassBeforeEditField = IVCashDClassBeforeEditField(wn,fieldname,fn,rownr);
  return;
end;

global
function Boolean NPTSIVCashDClassSwitchRow(Integer wn,Integer rownr)
begin
  NPTSIVCashDClassSwitchRow = IVCashDClassSwitchRow(wn,rownr);
  return;
end;

updating function Boolean NPTSIVCashDClassivcashcommandOnEnterKey(Integer wn,Integer rownr)
begin
  Boolean res,ReturnModef;
  string 255 input,tstr,value1,value2,crncy,tstr2;
  val fr,to1,to2,br1,br2;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  row IVCashVc IVCashrw;
  record INVc INr;
  Integer rwcnt,selrownr,suspended;
  val v1;
  Boolean save_record,new_record,found;
  record GeneralOptionBlock GenOptRec;
  Integer sernrf,decimalptfctr;
  record DefCashBlock DCb;
  record POSButtonsVc POSBr;
  row POSButtonsVc POSBrw,cashPOSBrw;
  Integer pi,prwcnt;
  Boolean foundpos;
  Integer action;
  val prevRetValue,vreb;
  record SerBalVc SBr;
  
  suspended = StringToInt(GetWindowString(wn,"Suspended"));
  input = GetWindowString(wn,"ivcashcommand");
  ReturnModef = GetWindowString(wn,"ReturnMode")=="true";
  PutWindowString(wn,"ivcashcommand","");
  PutWindowString(wn,"touchscreenitem","");
  PutWindowString(wn,"touchscreenitemqty",blankval);
  PutWindowString(wn,"ivcashcommandlastitemsernrf","");  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVCashr);
  GetPrevWindowRecord(wn,prevIVCashr);
  
  // If purchase is done create new record
  action = GetPOSCommand(input,value1,value2,decimalptfctr);
  if (IVCashr.OKFlag!=0) and (action!=kPOSCommandsTypeReprintReceipt) then begin
    MessageBox(2075," " & IVCashr.SerNr)
    goto LNPTSIVCashDClassivcashcommandOnEnterKey;
/*  
    WindowDoCancel(wn);
    WindowDoNew(wn,0);
    GetWindowRecord(wn,IVCashr);
    ReRunWindowDef(wn);
*/    
  end;
  if (IVCashr.Invalid!=0) and (action!=kPOSCommandsTypeReprintReceipt) then begin
    goto LNPTSIVCashDClassivcashcommandOnEnterKey;
  end;
  if (blank(input)) then begin
    goto LNPTSIVCashDClassivcashcommandOnEnterKey;
  end;
  foundpos = POSButtonsForWindow(wn,POSBr);
  IVCashr.Suspended = suspended;
  BlockLoad(GenOptRec);
  rwcnt = MatRowCnt(IVCashr);
  switch (action) begin
    case kPOSCommandsTypeQuantityAndItem:
      if (ReadFirstItem(value2,INr,true,false)) then begin
        IVCashrw.ArtCode = INr.Code;
        IVCashrw.Quant = StringToVal(value1,M4Val);   
        if (decimalptfctr!=0) then begin
          IVCashrw.Quant = IVCashrw.Quant/decimalptfctr;
        end;
        if (ReturnModef) then begin
          IVCashrw.Quant = -IVCashrw.Quant;
        end;
        if (rwcnt==0) then begin
          MatRowInsert(IVCashr,rwcnt,IVCashrw);
        end else begin
          MatRowPut(IVCashr,rwcnt,IVCashrw);
        end;
        if (IVCashVc_PasteArtCode(IVCashr,rwcnt,ReturnModef,tstr,sernrf)) then begin
        end;
        DisplayIVCashItem(IVCashr,rwcnt);
      end else begin
        StopAlert(USetStr(1233));
        goto LNPTSIVCashDClassivcashcommandOnEnterKey1;
      end;
    case kPOSCommandsTypeCash:
      BlockLoad(DCb);
      ClearRow(POSBr,cashPOSBrw,1);
      prwcnt = MatRowCnt(POSBr);
      for (pi=0;pi<prwcnt;pi=pi+1) begin
        MatRowGet(POSBr,pi,POSBrw);
        switch (POSBrw.ButtonType) begin
          case kPOSButtonTypeCashPayment:
            CopyRow(POSBr,POSBrw,cashPOSBrw);
            pi = prwcnt;
        end;
      end;

      if (blank(value1)) then begin
        ClearRow(IVCashr,IVCashrw,kInvoiceRowTypeCashPayment);
        IVCashrw.stp = kInvoiceRowTypeCashPayment;
        IVCashrw.Sum = -IVCashr.RetValue;
        if (IVCashrw.Sum!=0) then begin
          IVCashrw.PayMode = DCb.DefCashPayMode;
          IVCashrw.Spec = cashPOSBrw.Label;
          if (blank(IVCashrw.Spec)) then begin
            GetPM(DCb.DefCashPayMode,tstr,IVCashrw.Spec);
          end;
          crncy = IVCashr.CurncyCode;
          if (GetFullCurncyPurchaseRate(crncy,CurrentDate,fr,to1,to2,br1,br2)==false) then begin
            GetFullCurncyRate(crncy,CurrentDate,fr,to1,to2,br1,br2);
          end;
          IVCashrw.CurncyCode = crncy;
          IVCashrw.FrRate = fr;
          IVCashrw.ToRateB1 = to1;
          IVCashrw.ToRateB2 = to2;
          IVCashrw.BaseRate1 = br1;
          IVCashrw.BaseRate2 = br2;  
/*        
        crncy = RepSpec.CurncyCode;
        GetFullCurncyRate(crncy,IVCashr.TransDate,from,to1,to2,base1,base2);
        IVCashrw.CurncyCode = crncy;
        IVCashrw.FrRate = from;
        IVCashrw.ToRateB1 = to1;
        IVCashrw.ToRateB2 = to2;
        IVCashrw.BaseRate1 = base1;
        IVCashrw.BaseRate2 = base2;  
*/        
          MatRowPut(IVCashr,MatRowCnt(IVCashr),IVCashrw);
          save_record = true;
          IVCashSumup(IVCashr,true);
        end;
      end else begin
        v1 = StringToVal(value1,M4Val);
        if (decimalptfctr!=0) then begin
          v1 = v1/decimalptfctr;
        end;
        if (v1==0) then begin
          IVCashr.CashValue = 0;
          IVCashSumup(IVCashr,true);              
        end else begin
          ClearRow(IVCashr,IVCashrw,kInvoiceRowTypeCashPayment);
          IVCashrw.stp = kInvoiceRowTypeCashPayment;
          IVCashrw.Sum = v1;
          IVCashrw.PayMode = DCb.DefCashPayMode;
          MatRowPut(IVCashr,MatRowCnt(IVCashr),IVCashrw);
          save_record = true;      
        end;
        IVCashSumup(IVCashr,true);              
      end;
    case kPOSCommandsTypeFinish:
      IVCashSumup(IVCashr,true);              
      IVCashr.OKFlag = 1;
      save_record = true;      
      new_record = true;
    case kPOSCommandsTypeCreditCardSum:
      if (blank(value1)) then begin
        IVCashr.RecValue = IVCashr.Sum4 - IVCashr.CashValue;
        save_record = true;    
      end else begin
        v1 = StringToVal(value1,M4Val);
        if (decimalptfctr!=0) then begin
          v1 = v1/decimalptfctr;
        end;
        if (v1==0) then begin
          IVCashr.RecValue = 0;
          IVCashSumup(IVCashr,true);              
        end else begin
          IVCashr.RecValue = IVCashr.RecValue + v1;
          save_record = true;      
        end;
      end;
    case kPOSCommandsTypeLoyaltyCard:
      IVCashr.LoyaltyCardNr = value1;
      IVCashVc_PasteLoyaltyCardNr(IVCashr);
      save_record = true;
    case kPOSCommandsTypeLoyaltyPointsPayment:
    case kPOSCommandsTypeRebate:
      rwcnt = MatRowCnt(IVCashr);
      if (rwcnt>0) then begin
        selrownr = GetSelectedPOSItemRowIndex(wn);
        if (selrownr<0) then begin
          selrownr = LastEnteredItemRowNr(IVCashr);
        end;
        MatRowGet(IVCashr,selrownr,IVCashrw);
        vreb = StringToVal(value1,M4UVal);
        IVCashrw.vRebate = value1;
        if (decimalptfctr!=0) then begin
          IVCashrw.vRebate = vreb/decimalptfctr;
        end;
        MatRowPut(IVCashr,selrownr,IVCashrw);                
        if (IVCashDchrsum(IVCashr,selrownr,0)) then begin 
          IVCashDchsum(IVCashr,selrownr);
          IVCashSumup(IVCashr,true);      
        end;
        DisplayIVCashItem(IVCashr,selrownr);
      end;
    case kPOSCommandsTypeDeleteRow:
      selrownr = StringToInt(value1) - 1;
      if (selrownr>=0) then begin
        if (selrownr<MatRowCnt(IVCashr)) then begin
          if (UserCanAction("AllowIVTSRowsDelete",false)==false) then begin
//            SetSelectedListLine(wn,selrownr);
//            POSManagersAction("DeleteItem");
          end else begin
            DisplayIVCashItemStorno(IVCashr,selrownr);        
            MatRowDelete(IVCashr,selrownr);
          end;
        end;
        IVCashSumup(IVCashr,true);
      end;
    case kPOSCommandsTypeVoidRow:
      if (UserCanAction("AllowIVTSRowsVoid",false)) or (UserCanAction("AllowNPTSIVRowsVoid",false)) then begin
        selrownr = StringToInt(value1) - 1;
        if (selrownr>=0) then begin
          if (selrownr<MatRowCnt(IVCashr)) then begin
            if (IVCashDClassVoidRow(IVCashr,selrownr)) then begin
              PutWindowRecord(wn,IVCashr);    
            end;
          end;
        end;
      end;
    case kPOSCommandsTypeQuantityAddOne:
      rwcnt = MatRowCnt(IVCashr);
      if (rwcnt>0) then begin
        selrownr = LastEnteredItemRowNr(IVCashr);
        MatRowGet(IVCashr,selrownr,IVCashrw);        
        if (IVCashrw.stp!=kInvoiceRowTypeVoid) and (IVCashrw.stp!=kInvoiceRowTypeStructuredItemComponent) then begin
          if (GetWindowString(wn,"ivcashcommandlastitemsernrf")!="true") then begin
            if (ReturnModef) then begin
              IVCashrw.Quant = IVCashrw.Quant - 1.00;
            end else begin
              IVCashrw.Quant = IVCashrw.Quant + 1.00;
            end;
            MatRowPut(IVCashr,selrownr,IVCashrw);        
            if (IVCashVc_PasteQuant(IVCashr,selrownr)) then begin    
              PutWindowRecord(wn,IVCashr);    
              IVCashDClass_RefreshStringList(wn,IVCashr);
              IVCashSumupSoftEditFields(wn,IVCashr);
              DisplayIVCashItem(IVCashr,selrownr);
            end;
            
//            IVCashDchrsum(IVCashr,selrownr,GenOptRec.UseDiscount);
//            IVCashDchsum(IVCashr,selrownr);
//            IVCashSumup(IVCashr,true);
//            AddMultiBuyDiscountItems_IVCashVc(IVCashr);
//            DisplayIVCashItem(IVCashr,selrownr);        
          end else begin
            MessageBox(24180,"");
          end;
        end else begin
          MessageBox(24175,"");
        end;
      end;
    case kPOSCommandsTypeQuantitySubOne:
      rwcnt = MatRowCnt(IVCashr);
      if (rwcnt>0) then begin
        selrownr = LastEnteredItemRowNr(IVCashr);
        MatRowGet(IVCashr,selrownr,IVCashrw);        
        if (IVCashrw.stp!=kInvoiceRowTypeVoid) and (IVCashrw.stp!=kInvoiceRowTypeStructuredItemComponent) then begin
          if (ReturnModef) then begin
            IVCashrw.Quant = IVCashrw.Quant + 1.00;
          end else begin
            IVCashrw.Quant = IVCashrw.Quant - 1.00;
          end;
          MatRowPut(IVCashr,selrownr,IVCashrw);        
          if (IVCashVc_PasteQuant(IVCashr,selrownr)) then begin    
            PutWindowRecord(wn,IVCashr);    
            IVCashDClass_RefreshStringList(wn,IVCashr);
            IVCashSumupSoftEditFields(wn,IVCashr);
            DisplayIVCashItem(IVCashr,selrownr);
          end;    
//          IVCashDchrsum(IVCashr,selrownr,GenOptRec.UseDiscount);
//          IVCashDchsum(IVCashr,selrownr);
//          IVCashSumup(IVCashr,true);
//          AddMultiBuyDiscountItems_IVCashVc(IVCashr);
//          DisplayIVCashItem(IVCashr,selrownr);        
        end else begin
          MessageBox(24175,"");
        end;
      end;
    case kPOSCommandsTypeQuantity:
      rwcnt = MatRowCnt(IVCashr);
      if (rwcnt>0) then begin
        selrownr = GetSelectedPOSItemRowIndex(wn);
        if (selrownr<0) then begin
          selrownr = LastEnteredItemRowNr(IVCashr);
        end;
        MatRowGet(IVCashr,selrownr,IVCashrw);        
        if (IVCashrw.stp!=kInvoiceRowTypeVoid) and (IVCashrw.stp!=kInvoiceRowTypeStructuredItemComponent) then begin
          if (GetWindowString(wn,"ivcashcommandlastitemsernrf")!="true") then begin
            IVCashrw.Quant = StringToVal(value1,M4Val);
            if (decimalptfctr!=0) then begin
              IVCashrw.Quant = IVCashrw.Quant/decimalptfctr;
            end;
            if (ReturnModef) then begin
              IVCashrw.Quant = -IVCashrw.Quant;
            end;
            MatRowPut(IVCashr,selrownr,IVCashrw);  
            if (IVCashVc_PasteQuant(IVCashr,selrownr)) then begin    
              PutWindowRecord(wn,IVCashr);    
              IVCashDClass_RefreshStringList(wn,IVCashr);
              IVCashSumupSoftEditFields(wn,IVCashr);
              DisplayIVCashItem(IVCashr,selrownr);
            end;    
//            IVCashDchrsum(IVCashr,selrownr,GenOptRec.UseDiscount);
//            IVCashDchsum(IVCashr,selrownr);
//            IVCashSumup(IVCashr,true);
//            AddMultiBuyDiscountItems_IVCashVc(IVCashr);
//            DisplayIVCashItem(IVCashr,selrownr);        
          end else begin
            MessageBox(24180,"");
          end;
        end else begin
          MessageBox(24175,"");
        end;
      end;
    case kPOSCommandsTypeSerialNr:
      rwcnt = MatRowCnt(IVCashr);
      if (rwcnt>0) then begin
        MatRowGet(IVCashr,rwcnt-1,IVCashrw);        
        if (IVCashrw.stp!=kInvoiceRowTypeVoid) then begin
          IVCashrw.SerialNr = value1;
          MatRowPut(IVCashr,rwcnt-1,IVCashrw);        
        end else begin
          MessageBox(24175,"");
        end;
      end;
    case kPOSCommandsTypeLoyaltyCard:
      IVCashr.LoyaltyCardNr = value1;
      IVCashVc_PasteLoyaltyCardNr(IVCashr);
    case kPOSCommandsTypeVolumetricBarCodeScan:
      if (VolBarcodeScan_IVCashVc(IVCashr,value1)) then begin
        IVCashSumup(IVCashr,true);
        save_record = true;      
      end else begin
      end;
    case kPOSCommandsTypeSalesAssistant:
      ClearRow(IVCashr,IVCashrw,kInvoiceRowTypeSalesAssistant);    
      IVCashrw.SalesAssistant = value1;
      MatRowPut(IVCashr,MatRowCnt(IVCashr),IVCashrw);
    case kPOSCommandsTypeReprintReceipt:
/*
      if (IVCashr.OKFlag!=0) then begin
        IVCashPrintReceipt(wn,IVCashr,prevIVCashr,-1,false,false,0,WindowState(wn));
      end;
*/
      IVCashDClassTouchScreenReprint;
      goto LNPTSIVCashDClassivcashcommandOnEnterKey1;
    otherwise
      StripSpace(tstr,value1);
      if (GetFirstItem(value1,INr)) then begin
        value1 = INr.Code;
        found = true;
      end;
      if (found==false) then begin
        found = ReadFirstItem(tstr,INr,true,false);
      end;
      if (found==false) then begin
        found = SerialNrForOneItem(value1,SBr);
        if (found) then begin
          sernrf = 1;
        end;
      end;
      if (found) then begin
        PutWindowString(wn,"touchscreenitem",value1);
        PutWindowString(wn,"touchscreenitemqty",1.00);
        if (sernrf!=0) then begin
          PutWindowString(wn,"ivcashcommandlastitemsernrf","true");
        end;

        DeselectWindow(wn,false);
        IVCashDClasstouchscreenitemEFAfter(wn,0,true);
        goto LNPTSIVCashDClassivcashcommandOnEnterKey1;
      end else begin
        StopAlert(USetStr(1233));
        goto LNPTSIVCashDClassivcashcommandOnEnterKey1;
      end;
/*
      if (ReadFirstItem(tstr,INr,true,false)) then begin
        rwcnt = MatRowCnt(IVCashr);
        IVCashrw.ArtCode = INr.Code;
        IVCashrw.Quant = 1;
        MatRowPut(IVCashr,rwcnt,IVCashrw);
        if (IVCashVc_PasteArtCode(IVCashr,rwcnt,tstr)) then begin 
        DisplayIVCashItem(IVCashr,rwcnt);
        end;        
      end else begin
        StopAlert(USetStr(1233));
        goto LNPTSIVCashDClassivcashcommandOnEnterKey;
      end;
*/      
  end;
  PutWindowRecord(wn,IVCashr);
  IVCashDClass_RefreshStringList(wn,IVCashr);
  prevRetValue = IVCashr.RetValue;
  ReRunWindowDef(wn);
  if (save_record) then begin
    if (WindowDoOK(wn,0)==false) then begin 
      IVCashr.OKFlag = 0;
      PutWindowRecord(wn,IVCashr);
      new_record = false;
    end else begin
      switch (action) begin
        case kPOSCommandsTypeFinish:
          if (IVCashPrintReceipt(wn,IVCashr,prevIVCashr,-1,false,false,0,WindowState(wn))) then begin
          end;
      end;
    end;
  end;
  if (new_record) then begin
    WindowDoNew(wn,0);
    GetWindowRecord(wn,IVCashr);
    IVCashr.RetValue = prevRetValue;
    PutWindowString(wn,"touchscreenwindowpage",1);
    PutWindowString(wn,"touchscreenwindowpagestack","1");
    PutWindowString(wn,"touchscreenwindowprinterstack","*");
    PutWindowString(wn,"CustomerDisplayData_Line1","");
    PutWindowString(wn,"CustomerDisplayData_Line2","");    
    PutWindowString(wn,"touchscreenitemlastrownr",-1);
    tstr = USetStr(24172) & "  ";
    tstr = tstr & ValToString(prevRetValue,M4Val,ThousandSeparator,DecimalSeparator,0);
    SetPOSWindowDisplay("",tstr);
    PutWindowRecord(wn,IVCashr);
    IVCashDClass_RefreshStringList(wn,IVCashr);
  end;
LNPTSIVCashDClassivcashcommandOnEnterKey1:;  
  DeselectWindow(wn,false);
  //WindowFieldGoto(wn,IVCashr,-1,"ivcashcommand",false);
  WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",false);
LNPTSIVCashDClassivcashcommandOnEnterKey:;  
  NPTSIVCashDClassivcashcommandOnEnterKey = res;
  return;
end;

global
updating function Boolean NPTSIVCashDClassOnEnterKey(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  
  switch (fieldname) begin
    case "ivcashcommand":
      res = NPTSIVCashDClassivcashcommandOnEnterKey(wn,rownr);
  end;
LNPTSIVCashDClassOnEnterKey:;  
  NPTSIVCashDClassOnEnterKey = res;
  return;
end;

updating function Boolean NPTSIVCashDClassivcashcommandEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin  
  Boolean res;
  
  if (changedf) then begin
//    res = NPTSIVCashDClassivcashcommandOnEnterKey(wn,rownr);//why 2 times same ? 
  end;
  NPTSIVCashDClassivcashcommandEFAfter = res;
  return;
end;

global
updating function Boolean NPTSIVCashDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  
  switch (fieldname) begin
    case "ivcashcommand":
      res = NPTSIVCashDClassivcashcommandEFAfter(wn,rownr,changed!=0);      
    otherwise
      res = IVCashDClassAfterEditField(wn,fieldname,fn,rownr,changed);
  end;
  NPTSIVCashDClassAfterEditField = res;
  return;
end;
