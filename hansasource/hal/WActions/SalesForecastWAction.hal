remote updating function Boolean CreateNewForecastVersion(var record SalesForecastVc);

global
function Boolean SalesForecastDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer ef)
BEGIN
  Boolean res;
  record SalesForecastVc SalesForecastr;
  Integer updatemode;

  updatemode = 2;//Rs_update
  res = true;
  if (wnst==updatemode) then begin
    GetWindowRecord(wn,SalesForecastr);
    if (SalesForecastr.OKFlag<>0) then begin
      res = false;
    end;
  end;
  SalesForecastDClassActiveEditField = res;
  return;
end;

global
function Boolean  SalesForecastDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record SalesForecastVc SalesForecastr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,SalesForecastr);
    if (SalesForecastr.OKFlag!=0) then begin
      res = false;
      if (SalesForecastr.Closed==0) then begin
        if (UserCanAction("UnOKAll",false)) then begin
          res = true;
        end;
      end;
    end;
  end;
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,SalesForecastr);
    if (SalesForecastr.OKFlag!=0) then begin
      res = false;
      if (SalesForecastr.Closed==0) then begin
        if (UserCanAction("UnOKAll",false)) then begin
          res = true;
        end;
      end;
    end;
  end;  
  SalesForecastDClassOKFlagButtonAction = res;
  return;
end;

global 
function Boolean SalesForecastDClassInsertRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
  record SalesForecastVc SalesForecastr;

  res = true;
  switch (WindowState(wn)) begin
    case 0://Rs_normal
      GetWindowRecord(wn,SalesForecastr);
      if (SalesForecastr.OKFlag!=0) then begin res = false; end;
    case 1://Rs_insert
      res = true;
    case 2://Rs_update
      GetPrevWindowRecord(wn,SalesForecastr);
      if (SalesForecastr.OKFlag!=0) then begin res = false; end;
  end;
  SalesForecastDClassInsertRowTest = res;
  RETURN;
END;

global 
function Boolean SalesForecastDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record SalesForecastVc SalesForecast2r;
  Boolean res;

  res = true;
  if (WindowState(wn)==2) then begin//Rs_update
    GetPrevWindowRecord(wn,SalesForecast2r);    
    if (SalesForecast2r.OKFlag!=0) then begin res = false; end;
  end;
  SalesForecastDClassDeleteRowTest = res;
  return;
end;

global
function Boolean  SalesForecastDClassClosedButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record SalesForecastVc SalesForecastr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,SalesForecastr);
    if (SalesForecastr.Closed!=0) then begin
      res = false;
    end;
  end;
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,SalesForecastr);
    if (SalesForecastr.Closed!=0) then begin
      res = false;
    end;
  end;  
  SalesForecastDClassClosedButtonAction = res;
  RETURN;
END;

global
function string 40 SalesForecastDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  record SalesForecastVc SalesForecastr;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "ItemCode":
      GetWindowRecord(wn,SalesForecastr);
      switch (SalesForecastr.RowType) begin
        case 0: psname = "ITSClass";
        case 1: psname = "ForSaleINSClass";
      end;
  end;
  SalesForecastDClassSpecPasteName = psname;
  return;
end;

function Boolean SalesForecastDClassItemCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record SalesForecastVc SalesForecastr;
  row SalesForecastVc SalesForecastrw;
  record INVc INr;
  record ITVc ITr;
  Integer rwcnt,i;
  Boolean res;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,SalesForecastr);
    i = rownr;
    MatRowGet(SalesForecastr,i,SalesForecastrw);
    if (SalesForecastr.RowType==0) then begin
      ITr.Code = SalesForecastrw.ItemCode;
      if (ReadFirstMain(ITr,1,true)) then begin
        SalesForecastrw.Spec = ITr.Comment;
      end;
    end else begin
      INr.Code = SalesForecastrw.ItemCode;
      if (ReadFirstMain(INr,1,true)) then begin
        SalesForecastrw.Spec = INr.Name;
        if (SalesForecastrw.Qty!=0) then begin
          SalesForecastrw.Sum = SalesForecastrw.Qty * INr.UPrice1;
        end;
      end;
    end;
    MatRowPut(SalesForecastr,i,SalesForecastrw);
    PutWindowRecord(wn,SalesForecastr);
  end;
  SalesForecastDClassItemCodeEFAfter = res;
  return;
end;

function Boolean SalesForecastDClassQtyEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record SalesForecastVc SalesForecastr;
  row SalesForecastVc SalesForecastrw;
  record INVc INr;
  record ITVc ITr;
  Integer rwcnt,i;
  Boolean res;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,SalesForecastr);
    i = rownr;
    MatRowGet(SalesForecastr,i,SalesForecastrw);
    if (SalesForecastr.RowType==1) then begin
      INr.Code = SalesForecastrw.ItemCode;
      if (ReadFirstMain(INr,1,true)) then begin
        if (SalesForecastrw.Qty!=0) then begin
          SalesForecastrw.Sum = SalesForecastrw.Qty * INr.UPrice1;
        end;
      end;
    end;
    MatRowPut(SalesForecastr,i,SalesForecastrw);
    PutWindowRecord(wn,SalesForecastr);
  end;
  SalesForecastDClassQtyEFAfter = res;
  return;
end;

function Boolean SalesForecastDClassStartDateEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record SalesForecastVc SalesForecastr;
  Boolean res;
  record SFPeriodsBlock SFPb; 
  Date ed;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,SalesForecastr);
    BlockLoad(SFPb);  
    ed = SalesForecastr.StartDate;
    switch (SFPb.PeriodType) begin
      case kForecastPeriodTypeMonths:
        ed.day = DaysInMonth(ed.year,ed.month);
      case kForecastPeriodTypeWeeks:
        ed = AddDay(ed,-GetDateId(ed)+7);
    end;
    SalesForecastr.EndDate = ed;
    PutWindowRecord(wn,SalesForecastr);
  end;
  SalesForecastDClassStartDateEFAfter = res;
  return;
end;

global
function Boolean SalesForecastDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = false;
  switch (fieldname) begin
    case "ItemCode": res = SalesForecastDClassItemCodeEFAfter(wn,fn,rownr,changed);
    case "StartDate": res = SalesForecastDClassStartDateEFAfter(wn,fn,rownr,changed);
    case "Qty": res = SalesForecastDClassQtyEFAfter(wn,fn,rownr,changed);
  end;
  SalesForecastDClassAfterEditField = res;
  RETURN;
END;

global
updating procedure SalesForecastNewVersion()
begin
  Integer wn,nwn;
  record SalesForecastVc SFr;
  record SalesForecastVc newSFr;

  wn = CurWindow;
  GetWindowRecord(wn,SFr);
  RecordCopy(newSFr,SFr);
  CloseWindow(wn);
  if (CreateNewForecastVersion(newSFr)) then begin
    nwn = OpenWindow("SalesForecastDClass",1,0,"","",newSFr);
  end;
  return;
end;

