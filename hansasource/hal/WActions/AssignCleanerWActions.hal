external procedure RecalculateRepWsm();
remote function time GetLastActOnDay(string,Date);
external function LongInt MinutesToTime(LongInt,var Time);
external function LongInt TimeToMinutes(Time);

global
procedure DblChangeVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
  Time STime;
   
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  MessageBox(0,"You have selected Cleaner " & dblstr);
  RepSpec.f1         = dblstr;
  STime = GetLastActOnDay(RepSpec.f1,RepSpec.d1);
  //stopalert("time:" & STime);
  RepSpec.sStartTime = STime;
  PutWindowRecord(wn,RepSpec);
  return;
end;

function integer GetCleaningTime(string Room)
begin
  record ResTypeVc ResTyper;
  record ResVc Resr;
  integer res;
  
  res = 0;
  Resr.Code = Room;
  if readfirstmain(Resr,1,true) then begin 
    ResTyper.Code = Resr.Type;
    if readfirstmain(ResTyper,1,true) then begin
      res = TimeToMinutes(ResTyper.TimeToClean);
    end;
  end;  
  GetCleaningTime = res;
  return;
end;

global
updating procedure DblAssignVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  LongInt exdays;
  record RcVc RepSpec;
  record ActVc Actr;
  Longint CleanTime,Dummy;
   
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  
  if (nonblank(l)) then begin
    Actr.SerNr = FirstInRange(l,10);
    if readfirstmain(Actr,1,true) then begin
      CleanTime = GetCleaningTime(Actr.Resources);
      Actr.StartTime   =  RepSpec.sStartTime;
      Actr.EndTime     =  AddMinutes(Actr.StartTime,CleanTime);  
      Dummy = MinutesToTime(CleanTime,Actr.CostTime);
      Actr.MainPersons = RepSpec.f1;
      if recordstore(Actr,true) then begin beep; end;
      RepSpec.sStartTime = Actr.EndTime;
//      PutWindowRecord(wn,RepSpec);
      RecalculateRepWsm;
    end;
  end;
  /*
  end else begin
    //MessageBox(0,"You have not selected a Cleaning Lady");
    Actr.SerNr = FirstInRange(l,10);
    if (ReadFirstMain(Actr,1,true)) then begin  
      wn = OpenWindow("ActDClass",1,0,"","",Actr);
    end;     
  end;
  */
  return;
end;
