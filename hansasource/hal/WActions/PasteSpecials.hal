external outer procedure OuterReadTRObjReplace();
external outer procedure OuterReadTRObjSClassOnOpenWindow(var record RcVc);
external procedure PayModeBankAccSClassArrayOnOpen(var Array string,var Array string);
external procedure SerialNoScanNPTSSClass_SerialNrSClass(Integer,Integer,Integer,var Array string,var Integer);
external procedure UnoccupTableSClassArrayOnOpen(var Array string,var Integer);
external procedure EmailRecipVc_ContactSClass(Integer,Integer);
external procedure OnHotelGuestTouchScreenOClass_CUListSClass(Integer,Integer);
external procedure OnHotelGuestTouchScreenOClass_GuestSClass(Integer,Integer);
external procedure HWCOClassBTSClassArrayOnOpen(integer,integer,var Array string,var Integer);
external procedure COCUServiceVc_ContactSClass(Integer,Integer);
external procedure PRScheduleVc_ContactSClass(Integer,Integer);
external procedure TXServiceSClassArrayOnOpen(var Array string,var Integer);
external procedure ProdOperationVc_SerialNrSClass(Integer,Integer,Integer,var Array string,var Integer);
remote procedure PRVc_TRObjSClass(record PRVc,var record RcVc);
external procedure PasteFromTRObjS(Integer,Integer);
remote procedure ORVc_TRObjSClass(record QTVc,integer,var record RcVc);
remote procedure QTVc_TRObjSClass(record QTVc,integer,var record RcVc);
external procedure SerialNrRClass_SerialNrSClass(string,Integer,Integer,Integer,var Array string,var Integer);
remote   procedure Bud1Vc_TRObjSClass(record Bud1Vc,var record RcVc);
remote   procedure Bud2Vc_TRObjSClass(record Bud2Vc,var record RcVc);
remote   procedure WSVc_TRObjSClass(record WSVc,integer,var record RcVc);
remote   procedure SHVc_TRObjSClass(record SHVc,integer,var record RcVc);
remote   procedure SDVc_TRObjSClass(record SDVc,integer,var record RcVc);
remote   procedure SRVc_TRObjSClass(record SRVc,integer,var record RcVc);
external procedure RetPUVc_SerialNrSClass(Integer,Integer,Integer,var Array string,var Integer);
remote   procedure ExpVc_TRObjSClass(record ExpVc,integer,var record RcVc);
remote   procedure VIVc_TRObjSClass(record VIVc,integer,var record RcVc);
remote   procedure IVVc_TRObjSClass(record IVVc,integer,var record RcVc);
remote   procedure CLInVc_TRObjSClass(record CLInVc,integer,var record RcVc);
remote   procedure CLOutVc_TRObjSClass(record CLOutVc,integer,var record RcVc);
external procedure SoftFVc_JobCustSClass(Integer,Integer);
external procedure POQTVc_ContactSClass(Integer,Integer);
external procedure POCOVc_ContactSClass(Integer,Integer);
external procedure POVc_ContactSClass(Integer,Integer);
external procedure PerSClassArrayOnOpen(var Array string,var Integer);
external procedure BudgetClassSClassArrayOnOpen(var Array string,var Array string);
external procedure QuoteClassSClassArrayOnOpen(var Array string,var Integer);
external procedure PRClassSClassArrayOnOpen(var Array string,var Integer);
external procedure ContractClassSClassArrayOnOpen(var Array string,var Integer);
external procedure LangSClassArrayOnOpen(var Array string,var Integer);
external procedure MachineGroupsSClassArrayOnOpen(var Array string,var Integer);
external procedure LocalMachineGroupsSClassArrayOnOpen(var Array string,var Integer);
external procedure PrintGroupSClassArrayOnOpen(var Array string,var Integer);
external procedure BookOrgSClassArrayOnOpen(var Array string,var Integer);
external procedure IDTSClassArrayOnOpen(var Array string,var Integer);
external procedure LoanSuccessSClassArrayOnOpen(var Array string,var Integer);
external procedure LoanStatusSClassArrayOnOpen(var Array string,var Integer);
external procedure JobDescSClassArrayOnOpen(var Array string,var Integer);
external procedure EducationDegreesSClassArrayOnOpen(var Array string,var Integer);
external procedure LeaveSchemeSClassArrayOnOpen(var Array string,var Integer);
external procedure EthnicitySClassArrayOnOpen(var Array string,var Integer);
external procedure HealthStatusSClassArrayOnOpen(var Array string,var Integer);
external procedure AC2SClassArrayOnOpen(var Array string,var Integer);
external procedure RegDefSClassArrayOnOpen(var Array string,var Integer);
external procedure CustomDeclKeySClassArrayOnOpen(var Array string,var Integer);
external procedure VATCodeSClassArrayOnOpen(var Array string,var Integer);
external procedure VATVITypeSClassArrayOnOpen(var Array string,var Integer);
external procedure VATIVTypeSClassArrayOnOpen(var Array string,var Integer);
external procedure CalDispGroupSClassArrayOnOpen(var Array string,var Integer);
external procedure DayShiftSClassArrayOnOpen(var Array string,var Integer);
external procedure RestPMSClassArrayOnOpen(string,var Array string,var Integer);
external procedure PDMSClassArrayOnOpen(var Array string,var Integer);
external procedure PMSClassArrayOnOpen(var Array string,var Integer);
remote procedure PMSClassArrayOnOpen2(var Array string,var Array string,var Array val);
external procedure PMSClassArrayOnOpen3(var Array string,var Array string);
external procedure WHTaxSClassArrayOnOpen(var Array string,var Integer);
external procedure ShopBaskVc_JobCustSClass(Integer,Integer);
external procedure ShopBaskVc_GuestSClass(Integer,Integer);
external procedure RcVc_JobCustSClass(Integer,Integer);
external procedure RcVc_GuestSClass(Integer,Integer);
external procedure RcVc_CUListSClass(Integer,Integer);
external procedure RestAccVc_GuestSClass(Integer,Integer);
external procedure RestAccVc_JobCustSClass(Integer,Integer);
external procedure INTransferVc_SerialNrSClass(Integer,Integer,Integer,var Array string,var Integer);
external procedure OffHireVc_SerialNrSClass(Integer,Integer,var Array string,var Integer);
external procedure InternMovVc_SerialNrSClass(Integer,Integer,var Array string,var Integer);
external procedure CollectionVc_SerialNrSClass(Integer,Integer);
external procedure DispatchVc_SerialNrSClass(Integer,Integer);
external procedure RentINVc_SerialNrSClass(Integer,Integer);
external procedure RentResVc_SerialNrSClass(Integer,Integer);
external procedure QualConVc_SerialNrSClass(Integer,Integer,var Array string,var Integer);
external procedure RetVc_SerialNrSClass(Integer,Integer,Integer,var Array string,var Integer);
external procedure WSVc_SerialNrSClass(Integer,Integer,Integer,var Array string,var Integer);
external procedure COVc_SerialNrSClass(Integer,Integer,Integer,var Array string,var Integer);
external procedure StockTakeVc_SerialNrSClass(Integer,Integer,Integer,var Array string,var Integer);
external procedure StockMovVc_SerialNrSClass(Integer,Integer,Integer,var Array string,var Integer);
external procedure DropSHVc_SerialNrSClass(Integer,Integer,Integer,var Array string,var Integer);
external procedure SHVc_SerialNrSClass(Integer,Integer,Integer,var Array string,var Integer);
external procedure SDVc_SerialNrSClass(Integer,Integer,Integer,var Array string,var Integer);
external procedure SRVc_SerialNrSClass(Integer,Integer,Integer,var Array string,var Integer);
external procedure PUVc_SerialNrSClass(Integer,Integer,Integer,var Array string,var Integer);
external procedure ProdVc_SerialNrSClass(Integer,Integer,Integer,var Array string,var Integer);
external procedure ORVc_SerialNrSClass(Integer,Integer,Integer,var Array string,var Integer);
external procedure IVCashVc_SerialNrSClass(Integer,Integer,Integer,var Array string,var Integer);
external procedure BatchTextVc_SerialNrSClass(Integer,Integer,Integer,var Array string,var Integer);
external procedure IVVc_SerialNrSClass(Integer,Integer,Integer,var Array string,var Integer);
external procedure BPCVc_SerialNrSClass(Integer,Integer,Integer,var Array string,var Integer);
external procedure SHVc_DelAddrSClass(Integer,Integer);
external procedure ORVc_DelAddrSClass(Integer,Integer);
external procedure IVVc_DelAddrSClass(Integer,Integer);
external procedure QTVc_DelAddrSClass(Integer,Integer);
external procedure JobVc_ResUserSClass(Integer,Integer);
external procedure WSVc_ContactSClass(Integer,Integer);
external procedure WOVc_ContactSClass(Integer,Integer);
external procedure SVOVc_ContactSClass(Integer,Integer);
external procedure SVGMVc_ContactSClass(Integer,Integer);
external procedure LetVc_ContactSClass(Integer,Integer);
external procedure QTVc_ContactSClass(Integer,Integer);
external procedure ORVc_ContactSClass(Integer,Integer);
external procedure IVVc_ContactSClass(Integer,Integer);
external procedure IVCashVc_ContactSClass(Integer,Integer);
external procedure ActVc_ContactSClass(Integer,Integer);
external procedure PRVc_ContactSClass(Integer,Integer);
external procedure COVc_ContactSClass(Integer,Integer);
external procedure CQVc_ContactSClass(Integer,Integer);
external procedure JobVc_ContactSClass(Integer,Integer);
external procedure ResAvVc_ContactSClass(Integer,Integer);
external procedure RestBookingVc_ContactSClass(Integer,Integer);
external procedure CUVc_ContactSClass(Integer,Integer);
external procedure RepItemsVc_JobCustSClass(Integer,Integer);
external procedure AgreementVc_ContactSClass(Integer,Integer);
external procedure RentResVc_ContactSClass(Integer,Integer);
external procedure RentQTVc_ContactSClass(Integer,Integer);
external procedure AuthCustVc_ContactSClass(Integer,Integer);
external procedure OffHireVc_ContactSClass(Integer,Integer);
external procedure DispatchVc_ContactSClass(Integer,Integer);
external procedure M4PadString(string,Integer,string,Boolean,var string);
external function Boolean GetNextItem2(string,var Integer,var string);
external procedure StripEndingSpaces(var string);
external procedure CClassBTSClassArrayOnOpen(integer,integer,var Array string,var Integer);
remote   procedure CUVc_CUClassSClass(record CUVc,var record RcVc);
external procedure ObjBTSClassArrayOnOpen(integer,integer,var Array string,var Integer);
remote   procedure TRVc_TRObjSClass(record TRVc,integer,var record RcVc);
external procedure AgreementVc_DelAddrSClass(Integer,Integer);
external procedure RetPUVc_DelAddrSClass(Integer,Integer);
external procedure RentQTVc_DelAddrSClass(Integer,Integer);
external procedure RentResVc_DelAddrSClass(Integer,Integer);
external procedure DispatchVc_DelAddrSClass(Integer,Integer);
external procedure OffHireVc_DelAddrSClass(Integer,Integer);
external procedure SVOVc_DelAddrSClass(Integer,Integer);
external procedure CustRouteVc_DelAddrSClass(Integer,Integer);
external procedure CourtesyTitlesSClassArrayOnOpen(var Array string,var Integer);
external procedure TaxAuthIDBlockSClassArrayOnOpen(var Array string,var Array string);

global
Function Boolean OcupResSClassOnOpenWindow(Integer wn)
begin
  record JobVc Jobr;
  row JobVc Jobrw;
  record HotelBlock HotelSettings;
  Boolean Cont;
  string 100 tstr,t2;
  
  BlockLoad(HotelSettings); Cont = true;
  Jobr.ResStatus = HotelSettings.ChInSt;
  while LoopKey("ResStatus",Jobr,1,Cont) begin
    if (Jobr.ResStatus <> HotelSettings.ChInSt) then begin
      Cont = false;
    end else begin
      tstr = Jobr.ResCode;
      M4PadString(tstr,8," ",false,t2);
      matrowget(Jobr,0,Jobrw);
      t2 = t2 & Jobrw.CUName;
      SetListString(wn,1,t2,false);
    end;
  end;  
  OcupResSClassOnOpenWindow = false;
  return;
end;

global
function Boolean ContactSClassOnOpenWindow(Integer wn)
begin
  Integer mwn;

  mwn = MotherWindow(wn);
  switch (GetWindowFileName(mwn)) begin
    case "AgreementVc": AgreementVc_ContactSClass(wn,mwn);
    case "RentResVc": RentResVc_ContactSClass(wn,mwn);
    case "RentQTVc": RentQTVc_ContactSClass(wn,mwn);
    case "AuthCustVc": AuthCustVc_ContactSClass(wn,mwn);
    case "OffHireVc": OffHireVc_ContactSClass(wn,mwn);
    case "DispatchVc": DispatchVc_ContactSClass(wn,mwn);
    case "CUVc": CUVc_ContactSClass(wn,mwn);
    case "JobVc": JobVc_ContactSClass(wn,mwn);
    case "ResAvVc": ResAvVc_ContactSClass(wn,mwn);
    case "RestBookingVc": RestBookingVc_ContactSClass(wn,mwn);
    case "CQVc": CQVc_ContactSClass(wn,mwn);
    case "COVc": COVc_ContactSClass(wn,mwn);
    case "PRVc": PRVc_ContactSClass(wn,mwn);
    case "ActVc": ActVc_ContactSClass(wn,mwn);
    case "IVVc": IVVc_ContactSClass(wn,mwn);
    case "IVCashVc": IVCashVc_ContactSClass(wn,mwn);
    case "ORVc": ORVc_ContactSClass(wn,mwn);
    case "QTVc": QTVc_ContactSClass(wn,mwn);
    case "LetVc": LetVc_ContactSClass(wn,mwn);
    case "SVGMVc": SVGMVc_ContactSClass(wn,mwn);
    case "SVOVc": SVOVc_ContactSClass(wn,mwn);
    case "WOVc": WOVc_ContactSClass(wn,mwn);
    case "WSVc": WSVc_ContactSClass(wn,mwn);
    case "POVc": POVc_ContactSClass(wn,mwn);
    case "POCOVc": POCOVc_ContactSClass(wn,mwn);
    case "POQTVc": POQTVc_ContactSClass(wn,mwn);
    case "PRScheduleVc": PRScheduleVc_ContactSClass(wn,mwn);
    case "COCUServiceVc": COCUServiceVc_ContactSClass(wn,mwn);
    case "EmailRecipVc": EmailRecipVc_ContactSClass(wn,mwn);
  end;
  ContactSClassOnOpenWindow = false;
  return;
end;

global
function Boolean ResUserSClassOnOpenWindow(Integer wn)
begin
  Integer mwn;

  mwn = MotherWindow(wn);
  JobVc_ResUserSClass(wn,mwn);
  ResUserSClassOnOpenWindow = false;
  return;
end;

global
function Boolean DelAddrSClassOnOpenWindow(Integer wn)
begin
  Integer mwn;

  mwn = MotherWindow(wn);
  switch (GetWindowFileName(mwn)) begin
    case "IVVc": IVVc_DelAddrSClass(wn,mwn);
    case "ORVc": ORVc_DelAddrSClass(wn,mwn);
    case "SHVc": SHVc_DelAddrSClass(wn,mwn);
    case "QTVc": QTVc_DelAddrSClass(wn,mwn);
    case "AgreementVc": AgreementVc_DelAddrSClass(wn,mwn);
    case "RentQTVc": RentQTVc_DelAddrSClass(wn,mwn);
    case "RentResVc": RentResVc_DelAddrSClass(wn,mwn);
    case "DispatchVc": DispatchVc_DelAddrSClass(wn,mwn);
    case "OffHireVc": OffHireVc_DelAddrSClass(wn,mwn);
    case "RetPUVc": RetPUVc_DelAddrSClass(wn,mwn);
    case "SVOVc": SVOVc_DelAddrSClass(wn,mwn);
    case "CustRouteVc": CustRouteVc_DelAddrSClass(wn,mwn);
  end;
  DelAddrSClassOnOpenWindow = false;
  return;
end;

global
function Boolean DelAddr3SClassOpenRecord(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record DelAddrVc DAr;
  string 255 subset;
  
  res = false;
  if (ReadMarkedRecord(wn,DAr)) then begin
    OpenWindow("DelAddrDClass",0,0,"","",DAr);    
    res = true;
  end; 
  DelAddr3SClassOpenRecord = res;
  return;
end;


global
function Boolean SerialNrSClassOnOpenWindow(Integer wn)
begin
  Integer mwn;
  Array string 100 asernrstr;
  Integer acnt,i;
  
  mwn = MotherWindow(wn);
  switch (GetWindowFileName(mwn)) begin
    case "BPCVc": BPCVc_SerialNrSClass(1,wn,mwn,asernrstr,acnt);
    case "BatchTextVc": BatchTextVc_SerialNrSClass(1,wn,mwn,asernrstr,acnt);
    case "IVVc": IVVc_SerialNrSClass(1,wn,mwn,asernrstr,acnt);
    case "IVCashVc": IVCashVc_SerialNrSClass(1,wn,mwn,asernrstr,acnt);
    case "ORVc": ORVc_SerialNrSClass(1,wn,mwn,asernrstr,acnt);
    case "ProdVc": ProdVc_SerialNrSClass(1,wn,mwn,asernrstr,acnt);
    case "PUVc": PUVc_SerialNrSClass(1,wn,mwn,asernrstr,acnt);
    case "RetVc": RetVc_SerialNrSClass(1,wn,mwn,asernrstr,acnt);
    case "SDVc": SDVc_SerialNrSClass(1,wn,mwn,asernrstr,acnt);
    case "SRVc": SRVc_SerialNrSClass(1,wn,mwn,asernrstr,acnt);
    case "SHVc": SHVc_SerialNrSClass(1,wn,mwn,asernrstr,acnt);
    case "DropSHVc": DropSHVc_SerialNrSClass(1,wn,mwn,asernrstr,acnt);
    case "StockMovVc": StockMovVc_SerialNrSClass(1,wn,mwn,asernrstr,acnt);
    case "StockTakeVc": StockTakeVc_SerialNrSClass(1,wn,mwn,asernrstr,acnt);
    case "WSVc": WSVc_SerialNrSClass(1,wn,mwn,asernrstr,acnt);
    case "COVc": COVc_SerialNrSClass(1,wn,mwn,asernrstr,acnt);
    case "OffHireVc": OffHireVc_SerialNrSClass(wn,mwn,asernrstr,acnt);
    case "INTransferVc": INTransferVc_SerialNrSClass(1,wn,mwn,asernrstr,acnt);
    case "InternMovVc": InternMovVc_SerialNrSClass(wn,mwn,asernrstr,acnt);
    case "CollectionVc": CollectionVc_SerialNrSClass(wn,mwn);
    case "RentResVc": RentResVc_SerialNrSClass(wn,mwn);
    case "QualConVc": QualConVc_SerialNrSClass(wn,mwn,asernrstr,acnt);
    case "DispatchVc": DispatchVc_SerialNrSClass(wn,mwn);
    case "RentINVc": RentINVc_SerialNrSClass(wn,mwn);
    case "RetPUVc": RetPUVc_SerialNrSClass(1,wn,mwn,asernrstr,acnt);
    case "ProdOperationVc": ProdOperationVc_SerialNrSClass(1,wn,mwn,asernrstr,acnt);
    otherwise
      switch (GetWindowClass(mwn)) begin
        case "SerialNrRClass": SerialNrRClass_SerialNrSClass("",1,wn,mwn,asernrstr,acnt);
        case "INPosRClass": SerialNrRClass_SerialNrSClass("",1,wn,mwn,asernrstr,acnt);
        case "PULabRClass": SerialNrRClass_SerialNrSClass("f3",1,wn,mwn,asernrstr,acnt);
        case "QualConRClass": SerialNrRClass_SerialNrSClass("",1,wn,mwn,asernrstr,acnt);
        case "QualConResRClass": SerialNrRClass_SerialNrSClass("",1,wn,mwn,asernrstr,acnt);
        case "SerialNoScanNPTSSClass": SerialNoScanNPTSSClass_SerialNrSClass(1,wn,mwn,asernrstr,acnt);
        otherwise ;
      end;  
  end;
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(asernrstr[i]),asernrstr[i],false);
  end;      
  SerialNrSClassOnOpenWindow = false;
  return;
end;

global
function Boolean SerialNr2SClassOnOpenWindow(Integer wn)
begin
  Integer mwn;
  Array string 100 asernrstr;
  Integer acnt,i;

  mwn = MotherWindow(wn);
  switch (GetWindowFileName(mwn)) begin
    case "BPCVc": BPCVc_SerialNrSClass(2,wn,mwn,asernrstr,acnt);
    case "BatchTextVc": BatchTextVc_SerialNrSClass(2,wn,mwn,asernrstr,acnt);
    case "IVVc": IVVc_SerialNrSClass(2,wn,mwn,asernrstr,acnt);
    case "IVCashVc": IVCashVc_SerialNrSClass(2,wn,mwn,asernrstr,acnt);
    case "ORVc": ORVc_SerialNrSClass(2,wn,mwn,asernrstr,acnt);
    case "ProdVc": ProdVc_SerialNrSClass(2,wn,mwn,asernrstr,acnt);
    case "PUVc": PUVc_SerialNrSClass(2,wn,mwn,asernrstr,acnt);
    case "SDVc": SDVc_SerialNrSClass(2,wn,mwn,asernrstr,acnt);
    case "SRVc": SRVc_SerialNrSClass(2,wn,mwn,asernrstr,acnt);
    case "SHVc": SHVc_SerialNrSClass(2,wn,mwn,asernrstr,acnt);
    case "StockMovVc": StockMovVc_SerialNrSClass(2,wn,mwn,asernrstr,acnt);
    case "StockTakeVc": StockTakeVc_SerialNrSClass(2,wn,mwn,asernrstr,acnt);
    case "WSVc": WSVc_SerialNrSClass(2,wn,mwn,asernrstr,acnt);
    case "COVc": COVc_SerialNrSClass(2,wn,mwn,asernrstr,acnt);
    case "OffHireVc": OffHireVc_SerialNrSClass(wn,mwn,asernrstr,acnt);
    case "INTransferVc": INTransferVc_SerialNrSClass(2,wn,mwn,asernrstr,acnt);
    case "InternMovVc": InternMovVc_SerialNrSClass(wn,mwn,asernrstr,acnt);
    case "CollectionVc": CollectionVc_SerialNrSClass(wn,mwn);
    case "RentResVc": RentResVc_SerialNrSClass(wn,mwn);
    case "QualConVc": QualConVc_SerialNrSClass(wn,mwn,asernrstr,acnt);
    case "DispatchVc": DispatchVc_SerialNrSClass(wn,mwn);
    case "RentINVc": RentINVc_SerialNrSClass(wn,mwn);
    case "DropSHVc": DropSHVc_SerialNrSClass(2,wn,mwn,asernrstr,acnt);
  end;
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(asernrstr[i]),asernrstr[i],false);
  end;    
  SerialNr2SClassOnOpenWindow = false;
  return;
end;

global
function Boolean JobCustSClassOnOpenWindow(Integer wn)
begin
  Integer mwn;

  mwn = MotherWindow(wn);
  switch (GetWindowFileName(mwn)) begin
    case "ShopBaskVc": ShopBaskVc_JobCustSClass(wn,mwn);
    case "RestAccVc": RestAccVc_JobCustSClass(wn,mwn);
    case "RepItemsVc": RepItemsVc_JobCustSClass(wn,mwn);
    case "SoftFVc": SoftFVc_JobCustSClass(wn,mwn);
    otherwise RcVc_JobCustSClass(wn,mwn);
  end;
  JobCustSClassOnOpenWindow = false;
  return;
end;

global
function Boolean GuestSClassOnOpenWindow(Integer wn)
begin
  Integer mwn;

  mwn = MotherWindow(wn);
  switch (GetWindowFileName(mwn)) begin
    case "ShopBaskVc": ShopBaskVc_GuestSClass(wn,mwn);
    case "RestAccVc": RestAccVc_GuestSClass(wn,mwn);
    otherwise 
      switch (GetWindowClass(mwn)) begin
        case "OnHotelGuestTouchScreenOClass": 
          OnHotelGuestTouchScreenOClass_GuestSClass(wn,mwn);
        otherwise 
          RcVc_GuestSClass(wn,mwn);
      end;
  end;  
  GuestSClassOnOpenWindow = false;
  return;
end;

global
function Boolean CUListSClassOnOpenWindow(Integer wn)
begin
  Integer mwn;

  mwn = MotherWindow(wn);
  switch (GetWindowFileName(mwn)) begin
    otherwise 
      switch (GetWindowClass(mwn)) begin
        case "OnHotelGuestTouchScreenOClass": 
          OnHotelGuestTouchScreenOClass_CUListSClass(wn,mwn);
        otherwise 
          RcVc_CUListSClass(wn,mwn);
      end;
  end;  
  CUListSClassOnOpenWindow = false;
  return;
end;

/*
global
function Boolean PMSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  PMSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  PMSClassOnOpenWindow = false;
  return;
end;
*/

global
function Boolean PMSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr,astr2;
  Array val av;
  Integer i,mwn;
  
  mwn = MotherWindow(wn);
  switch (GetWindowFileName(mwn)) begin
    case "OPVc": 
      if (UserModuleAccess("modNL")==kAccessLevelFull) then begin
        PMSClassArrayOnOpen2(astr,astr2,av);
      end else begin
        PMSClassArrayOnOpen3(astr,astr2);
      end;
    case "PPVc": 
      if (UserModuleAccess("modNL")==kAccessLevelFull) then begin
        PMSClassArrayOnOpen2(astr,astr2,av);
      end else begin
        PMSClassArrayOnOpen3(astr,astr2);
      end;
    otherwise 
      PMSClassArrayOnOpen3(astr,astr2);
  end;
  for (i=0;i<astr.length;i=i+1) begin
    AddListRow(wn,"PayMode",1,astr[i],0);
    AddListData(wn,"PayMode","PayMode",astr[i]);
    AddListData(wn,"PayMode","Comment",astr2[i]);
    AddListData(wn,"PayMode","Balance",av[i]);
  end;
  PMSClassOnOpenWindow = false;
  return;
end;

global
function Boolean PMBSClassOnOpenWindow(Integer wn)
begin
  PMBSClassOnOpenWindow = PMSClassOnOpenWindow(wn);
  return;
end;

global
function Boolean WHTaxSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  WHTaxSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  WHTaxSClassOnOpenWindow = false;
  return;
end;

global
function Boolean PDMSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  PDMSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  PDMSClassOnOpenWindow = false;
  return;
end;

global
function Boolean RestPMSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  Integer mwn;
  record RestAccVc RestAccr;
  string 255 machine;
  
  mwn = MotherWindow(wn);
  switch (GetWindowFileName(mwn)) begin
    case "RestAccVc":
      GetWindowRecord(mwn,RestAccr);
      machine = RestAccr.MachineName;
  end;
  RestPMSClassArrayOnOpen(machine,astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  RestPMSClassOnOpenWindow = false;
  return;
end;

global
function Boolean UnoccupTableSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  UnoccupTableSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  UnoccupTableSClassOnOpenWindow = false;
  return;
end;

global
function Boolean VATCodeSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  VATCodeSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  VATCodeSClassOnOpenWindow = false;
  return;
end;

global
function Boolean VATVITypeSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  VATVITypeSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  VATVITypeSClassOnOpenWindow = false;
  return;
end;

global
function Boolean VATIVTypeSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  VATIVTypeSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  VATIVTypeSClassOnOpenWindow = false;
  return;
end;

global
function Boolean TXServiceSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  TXServiceSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  TXServiceSClassOnOpenWindow = false;
  return;
end;

global
function Boolean CalDispGroupSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  CalDispGroupSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  CalDispGroupSClassOnOpenWindow = false;
  return;
end;

global
function Boolean DayShiftSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  DayShiftSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  DayShiftSClassOnOpenWindow = false;
  return;
end;

global
function Boolean CustomDeclKeySClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  CustomDeclKeySClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  CustomDeclKeySClassOnOpenWindow = false;
  return;
end;

global
function Boolean RegDefSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  RegDefSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  RegDefSClassOnOpenWindow = false;
  return;
end;

global
function Boolean AC2SClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  AC2SClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  AC2SClassOnOpenWindow = false;
  return;
end;

global
function Boolean JobDescSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  JobDescSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  JobDescSClassOnOpenWindow = false;
  return;
end;

global
function Boolean EthnicitySClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  EthnicitySClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  EthnicitySClassOnOpenWindow = false;
  return;
end;

global
function Boolean EducationDegreesSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  EducationDegreesSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  EducationDegreesSClassOnOpenWindow = false;
  return;
end;

/*
global
function Boolean LeaveSchemeSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  LeaveSchemeSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  LeaveSchemeSClassOnOpenWindow = false;
  return;
end;
*/

global
function Boolean HealthStatusSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  HealthStatusSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  HealthStatusSClassOnOpenWindow = false;
  return;
end;

global
function Boolean LoanStatusSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  LoanStatusSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  LoanStatusSClassOnOpenWindow = false;
  return;
end;

global
function Boolean LoanSuccessSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  LoanSuccessSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  LoanSuccessSClassOnOpenWindow = false;
  return;
end;

global
function Boolean IDTSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  IDTSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  IDTSClassOnOpenWindow = false;
  return;
end;

global
function Boolean BookOrgSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  BookOrgSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  BookOrgSClassOnOpenWindow = false;
  return;
end;

global
function Boolean PrintGroupSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  PrintGroupSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  PrintGroupSClassOnOpenWindow = false;
  return;
end;

global
function Boolean LangSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  LangSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  LangSClassOnOpenWindow = false;
  return;
end;

global
function Boolean MachineGroupsSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  MachineGroupsSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  MachineGroupsSClassOnOpenWindow = false;
  return;
end;

global
function Boolean LocalMachineGroupsSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  LocalMachineGroupsSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  LocalMachineGroupsSClassOnOpenWindow = false;
  return;
end;

global
function Boolean ContractClassSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  ContractClassSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  ContractClassSClassOnOpenWindow = false;
  return;
end;

global
function Boolean PRClassSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  PRClassSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  PRClassSClassOnOpenWindow = false;
  return;
end;

global
function Boolean QuoteClassSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  QuoteClassSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  QuoteClassSClassOnOpenWindow = false;
  return;
end;

global
function Boolean BudgetClassSClassOnOpenWindow(Integer wn)
begin
  Array string 255 acode,acomment;
  Integer i,acnt;
  
  BudgetClassSClassArrayOnOpen(acode,acomment);
  for (i=0;i<acode.length;i=i+1) begin
    AddListRow(wn,"BudgetClass",1,acode[i],0);
    AddListData(wn,"BudgetClass","Class",acode[i]);
    AddListData(wn,"BudgetClass","Comment",acomment[i]);
  end;
  BudgetClassSClassOnOpenWindow = false;
  return;
end;

global
function Boolean PerSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  PerSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  PerSClassOnOpenWindow = false;
  return;
end;

global
Function Boolean OcupResSClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  string 60 tstr,t2;
  Integer np;
  Boolean nsep;
  
  mwn = MotherWindow(wn);
  tstr = GetListString(wn,SelectedListLine(wn));
  np = 0;
  tstr = left(tstr,5);
  StripEndingSpaces(tstr);
  CloseWindow(wn);
  PasteString(mwn,tstr);
  OcupResSClassOnOKWindow = true;
  return;
end;

global
function Boolean CClassBTSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt,mwn,fn;  
  
  mwn = MotherWindow(wn);
  switch (WindowActiveField(mwn)) begin
    case "f1": fn = 1;
    case "f2": fn = 2;
    case "f3": fn = 3;
    case "f4": fn = 4;
    case "f5": fn = 5;
    case "ObjStr": fn = 6;
    case "Stext": fn = 7;
    case "LastAcc": fn = 8;
  end;
  CClassBTSClassArrayOnOpen(mwn,fn,astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  CClassBTSClassOnOpenWindow = false;
  return;
end;

global
function Boolean HWCOClassBTSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt,mwn,fn;  
  
  mwn = MotherWindow(wn);
  switch (WindowActiveField(mwn)) begin
    case "f1": fn = 1;
  end;
  HWCOClassBTSClassArrayOnOpen(mwn,fn,astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  HWCOClassBTSClassOnOpenWindow = false;
  return;
end;

global
function Boolean CUClassSClassOnOpenWindow(Integer wn)
begin
  Integer mwn;
  record RcVc RepSpec;
  record CUVc CUr;
  
  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,CUr);
 // GetWindowRecord(wn,RepSpec);
  CUVc_CUClassSClass(CUr,RepSpec);
  PutWindowRecord(wn,RepSpec);
  CUClassSClassOnOpenWindow = false;
  return;
end;

global
function Boolean ObjBTSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt,mwn,fn;
  
  mwn = MotherWindow(wn);
  switch (WindowActiveField(mwn)) begin
    case "f1": fn = 1;
    case "f2": fn = 2;
    case "f3": fn = 3;
    case "f4": fn = 4;
    case "f5": fn = 5;
    case "AccStr": fn = 6;
    case "FirstAcc": fn = 7;
  end;
  ObjBTSClassArrayOnOpen(mwn,fn,astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  ObjBTSClassOnOpenWindow = false;
  return;
end;

global
procedure TRObjReplace()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record TRVc TRr;
  record VIVc VIr;
  record IVVc IVr;
  record ExpVc Expr;
  record CLInVc CLInr;
  record CLOutVc CLOutr;
  record SDVc SDr;
  record SHVc SHr;
  record QTVc QTr;
  record ORVc ORr;
  record Bud1Vc Bud1r;
  record Bud2Vc Bud2r;
  row TRVc TRrw;
  row VIVc VIrw;
  row IVVc IVrw;
  row ExpVc Exprw;
  row CLInVc CLInrw;
  row CLOutVc CLOutrw;
  row SDVc SDrw;
  row SHVc SHrw;
  row QTVc QTrw;
  row ORVc ORrw;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  GetWindowRecord(wn,RepSpec);
  switch (GetWindowFileName(mwn)) begin
    case "TRVc":
      GetWindowRecord(mwn,TRr);
      DeselectWindow(mwn,false);
      if (RepSpec.long1>=0) then begin
        MatRowGet(TRr,RepSpec.long1,TRrw);
        TRrw.Objects = "";
        MatRowPut(TRr,RepSpec.long1,TRrw);
        PutWindowRecord(mwn,TRr);
        WindowFieldGoto(mwn,TRr,RepSpec.long1,RepSpec.TransStr,true);
      end;
    case "IVVc":
      GetWindowRecord(mwn,IVr);
      DeselectWindow(mwn,false);
      if (RepSpec.long1>=0) then begin
        MatRowGet(IVr,RepSpec.long1,IVrw);
        IVrw.Objects = "";
        MatRowPut(IVr,RepSpec.long1,IVrw);
      end else begin
        IVr.Objects = "";
      end;
      PutWindowRecord(mwn,IVr);
      WindowFieldGoto(mwn,IVr,RepSpec.long1,RepSpec.TransStr,true);
    case "VIVc":
      GetWindowRecord(mwn,VIr);
      DeselectWindow(mwn,false);
      if (RepSpec.long1>=0) then begin
        MatRowGet(VIr,RepSpec.long1,VIrw);
        VIrw.Objects = "";
        MatRowPut(VIr,RepSpec.long1,VIrw);
      end else begin
        VIr.Objects = "";
      end;
      PutWindowRecord(mwn,VIr);
      WindowFieldGoto(mwn,VIr,RepSpec.long1,RepSpec.TransStr,true);
    case "ExpVc":
      GetWindowRecord(mwn,Expr);
      DeselectWindow(mwn,false);
      if (RepSpec.long1>=0) then begin
        MatRowGet(Expr,RepSpec.long1,Exprw);
        Exprw.Objects = "";
        MatRowPut(Expr,RepSpec.long1,Exprw);
      end else begin
        Expr.Objects = "";
      end;
      PutWindowRecord(mwn,Expr);
      WindowFieldGoto(mwn,Expr,RepSpec.long1,RepSpec.TransStr,true);
    case "CLInVc":
      GetWindowRecord(mwn,CLInr);
      DeselectWindow(mwn,false);
      if (RepSpec.long1>=0) then begin
        MatRowGet(CLInr,RepSpec.long1,CLInrw);
        CLInrw.Objects = "";
        MatRowPut(CLInr,RepSpec.long1,CLInrw);
      end else begin
        CLInr.Objects = "";
      end;
      PutWindowRecord(mwn,CLInr);
      WindowFieldGoto(mwn,CLInr,RepSpec.long1,RepSpec.TransStr,true);
    case "CLOutVc":
      GetWindowRecord(mwn,CLOutr);
      DeselectWindow(mwn,false);
      if (RepSpec.long1>=0) then begin
        MatRowGet(CLOutr,RepSpec.long1,CLOutrw);
        CLOutrw.Objects = "";
        MatRowPut(CLOutr,RepSpec.long1,CLOutrw);
      end else begin
        CLOutr.Objects = "";
      end;
      PutWindowRecord(mwn,CLOutr);
      WindowFieldGoto(mwn,CLOutr,RepSpec.long1,RepSpec.TransStr,true);
    case "SDVc":
      GetWindowRecord(mwn,SDr);
      DeselectWindow(mwn,false);
      if (RepSpec.long1>=0) then begin
        MatRowGet(SDr,RepSpec.long1,SDrw);
        SDrw.Objects = "";
        MatRowPut(SDr,RepSpec.long1,SDrw);
      end else begin
        SDr.Objects = "";
      end;
      PutWindowRecord(mwn,SDr);
      WindowFieldGoto(mwn,SDr,RepSpec.long1,RepSpec.TransStr,true);
    case "SHVc":
      GetWindowRecord(mwn,SHr);
      DeselectWindow(mwn,false);
      if (RepSpec.long1>=0) then begin
        MatRowGet(SHr,RepSpec.long1,SHrw);
        SHrw.Objects = "";
        MatRowPut(SHr,RepSpec.long1,SHrw);
      end else begin
        SHr.Objects = "";
      end;
      PutWindowRecord(mwn,SHr);
      WindowFieldGoto(mwn,SHr,RepSpec.long1,RepSpec.TransStr,true);
    case "QTVc":
      GetWindowRecord(mwn,QTr);
      DeselectWindow(mwn,false);
      if (RepSpec.long1>=0) then begin
        MatRowGet(QTr,RepSpec.long1,QTrw);
        QTrw.Objects = "";
        MatRowPut(QTr,RepSpec.long1,QTrw);
      end else begin
        QTr.Objects = "";
      end;
      PutWindowRecord(mwn,QTr);
      WindowFieldGoto(mwn,QTr,RepSpec.long1,RepSpec.TransStr,true);
    case "ORVc":
      GetWindowRecord(mwn,ORr);
      DeselectWindow(mwn,false);
      if (RepSpec.long1>=0) then begin
        MatRowGet(ORr,RepSpec.long1,ORrw);
        ORrw.Objects = "";
        MatRowPut(ORr,RepSpec.long1,ORrw);
      end else begin
        ORr.Objects = "";
      end;
      PutWindowRecord(mwn,ORr);
      WindowFieldGoto(mwn,ORr,RepSpec.long1,RepSpec.TransStr,true);
    case "Bud1Vc":
      GetWindowRecord(mwn,Bud1r);
      DeselectWindow(mwn,false);
      Bud1r.Objects = "";
      PutWindowRecord(mwn,Bud1r);
      WindowFieldGoto(mwn,Bud1r,RepSpec.long1,RepSpec.TransStr,true);
    case "Bud2Vc":
      GetWindowRecord(mwn,Bud2r);
      DeselectWindow(mwn,false);
      Bud2r.Objects = "";
      PutWindowRecord(mwn,Bud2r);
      WindowFieldGoto(mwn,Bud2r,RepSpec.long1,RepSpec.TransStr,true);
    otherwise
      OuterReadTRObjReplace;
  end;
  PasteFromTRObjS(wn,1);
  return;
end;

global
function Boolean TRObjSClassOnOpenWindow(Integer wn)
begin
  Integer mwn,ar;
  record RcVc RepSpec;
  record TRVc TRr;
  record VIVc VIr;
  record IVVc IVr;
  record ExpVc Expr;
  record CLInVc CLInr;
  record CLOutVc CLOutr;
  record SDVc SDr;
  record SRVc SRr;
  record SHVc SHr;
  record QTVc QTr;
  record ORVc ORr;
  record PRVc PRr;
  record WSVc WSr;
  record Bud1Vc Bud1r;
  record Bud2Vc Bud2r;
  
  mwn = MotherWindow(wn);
  ar = WindowActiveRow(mwn);
  switch (GetWindowFileName(mwn)) begin
    case "TRVc":
      GetWindowRecord(mwn,TRr);
      TRVc_TRObjSClass(TRr,ar,RepSpec);
    case "VIVc":
      GetWindowRecord(mwn,VIr);
      VIVc_TRObjSClass(VIr,ar,RepSpec);
    case "IVVc":
      GetWindowRecord(mwn,IVr);
      IVVc_TRObjSClass(IVr,ar,RepSpec);
    case "ExpVc":
      GetWindowRecord(mwn,Expr);
      ExpVc_TRObjSClass(Expr,ar,RepSpec);
    case "CLInVc":
      GetWindowRecord(mwn,CLInr);
      CLInVc_TRObjSClass(CLInr,ar,RepSpec);
    case "CLOutVc":
      GetWindowRecord(mwn,CLOutr);
      CLOutVc_TRObjSClass(CLOutr,ar,RepSpec);      
    case "SDVc":
      GetWindowRecord(mwn,SDr);
      SDVc_TRObjSClass(SDr,ar,RepSpec);      
    case "SRVc":
      GetWindowRecord(mwn,SRr);
      SRVc_TRObjSClass(SRr,ar,RepSpec);      
    case "SHVc":
      GetWindowRecord(mwn,SHr);
      SHVc_TRObjSClass(SHr,ar,RepSpec);      
    case "QTVc":
      GetWindowRecord(mwn,QTr);
      QTVc_TRObjSClass(QTr,ar,RepSpec);      
    case "ORVc":
      GetWindowRecord(mwn,ORr);
      ORVc_TRObjSClass(ORr,ar,RepSpec);
    case "PRVc":
      GetWindowRecord(mwn,PRr);
      PRVc_TRObjSClass(PRr,RepSpec);
    case "WSVc":
      GetWindowRecord(mwn,WSr);
      WSVc_TRObjSClass(WSr,ar,RepSpec);      
    case "Bud1Vc":
      GetWindowRecord(mwn,Bud1r);
      Bud1Vc_TRObjSClass(Bud1r,RepSpec); 
    case "Bud2Vc":
      GetWindowRecord(mwn,Bud2r);
      Bud2Vc_TRObjSClass(Bud2r,RepSpec); 
    otherwise
      OuterReadTRObjSClassOnOpenWindow(RepSpec);
  end;  
  RepSpec.TransStr = WindowActiveField(mwn);
  RepSpec.long1 = WindowActiveRow(mwn);
  PutWindowRecord(wn,RepSpec);
  TRObjSClassOnOpenWindow = false;
  return;
end;

global
function Boolean TRObjSClassOpenRecord(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record RcVc RepSpec;
  record ObjVc Objr;
  Integer nwn,pos;
  string 255 obj;
  
  GetWindowRecord(wn,RepSpec);  
  switch (fieldname) begin
    case "f1": obj = RepSpec.f1;
    case "f2": obj = RepSpec.f2;
    case "f3": obj = RepSpec.f3;
    case "f4": obj = RepSpec.f4;
    case "f5": obj = RepSpec.f5;
    case "f6": obj = RepSpec.f6;
    case "f7": obj = RepSpec.f7;
    case "AccStr": obj = RepSpec.AccStr;
    case "FirstAcc": obj = RepSpec.FirstAcc;
  end;
  if (nonblank(obj)) then begin
    Objr.Code = obj;
    if (ReadFirstMain(Objr,1,true)) then begin
      nwn = OpenWindow("ObjDClass",1,0,"","",Objr);    
    end;
  end;
  TRObjSClassOpenRecord = res;
  return;
end;

global
function Boolean CourtesyTitlesSClassOnOpenWindow(Integer wn)
begin
  Array string 255 astr;
  Integer i,acnt;
  
  CourtesyTitlesSClassArrayOnOpen(astr,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,len(astr[i]),astr[i],false);    
  end;
  CourtesyTitlesSClassOnOpenWindow = false;
  return;
end;

global
function Boolean PayModeBankAccSClassOnOpenWindow(Integer wn)
begin
  Array string 255 acode,acomment;
  Integer i;
  
  PayModeBankAccSClassArrayOnOpen(acode,acomment);
  for (i=0;i<acode.length;i=i+1) begin
    AddListRow(wn,"PayModeBankAccClass",1,acode[i],0);
    AddListData(wn,"PayModeBankAccClass","bankacc",acode[i]);
  end;
  PayModeBankAccSClassOnOpenWindow = false;
  return;
end;

global
function Boolean TaxAuthIDBlockSClassOnOpenWindow(Integer wn)
begin
  Array string 255 acode,acomment;
  Integer i;
  
  TaxAuthIDBlockSClassArrayOnOpen(acode,acomment);
  for (i=0;i<acode.length;i=i+1) begin
    AddListRow(wn,"TaxAuthIDBlockClass",1,acode[i],0);
    AddListData(wn,"TaxAuthIDBlockClass","TaxAuthID",acode[i]);
    AddListData(wn,"TaxAuthIDBlockClass","Comment",acomment[i]);
  end;
  TaxAuthIDBlockSClassOnOpenWindow = false;
  return;
end;