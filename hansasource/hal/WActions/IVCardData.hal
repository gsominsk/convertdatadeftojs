external procedure IVDClass_RefreshStringList(Integer,record IVVc);
external updating procedure IPDClassCardDataExecute(record RcVc,Integer,string);
external function string 255 VerifySwipedCreditCardData(string,string);
external procedure IVCashDClass_RefreshStringList(Integer,record IVCashVc);
remote updating procedure IPVcProcessCCData(var record IPVc,val,string,string,Integer,var string);
remote updating procedure IVCashVcProcessCCData(var record IVCashVc,val,string,string,Integer,var string);
external updating function Boolean CCPayIVCashDWithCardData(record RcVc,Boolean,Integer,string);
external updating procedure IVCashDClassCardData(Integer,string);
external procedure IVVc_PasteItem(record IVVc,Integer,Integer);
external function Boolean IVVc_PasteQuantity(var record IVVc,Integer);
external function Boolean IVDClassCustCodeEFAfter(Integer,Integer,Integer);
external function Boolean GetFirstItem(var string,var record INVc);
remote procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);
remote updating procedure IVVcProcessCCData(var record IVVc,val,string,Integer,var string,string);
external procedure ParseT1Data(string,var string,var string,var string,var string,var string);
external procedure ParseT2Data(string,var string,var string,var string,var string);
external updating function Boolean CCPayIVDWithCardData(Integer,string);
external function Integer MerchantIDCardHolderType(string);

global
updating procedure AddCCChargeVClassOK()
begin
  integer wn,mwn;
  record RcVc RepSpec;
  record IVVc IVr;
  record IVCashVc IVCashr;
  record IPVc IPr;
  string 255 sdata;
  string 255 message;
  Integer addtocontacts;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  
  DeselectWindow(wn,true);
  DeselectWindow(mwn,true);
  
  GetWindowRecord(wn,RepSpec);
  addtocontacts = GetWindowInteger(wn,"AddCCChargeVClassAddToContacts");      

  sdata = RepSpec.f4;
  switch (GetWindowFileName(mwn)) begin
    case "IPVc":
      GetWindowRecord(mwn,IPr);    
      IPVcProcessCCData(IPr,RepSpec.vals1,RepSpec.AccStr,sdata,addtocontacts,message);
    case "IVCashVc":
      GetWindowRecord(mwn,IVCashr);    
      IVCashVcProcessCCData(IVCashr,RepSpec.vals1,RepSpec.AccStr,sdata,addtocontacts,message);
    case "IVVc":
      GetWindowRecord(mwn,IVr);    
      IVVcProcessCCData(IVr,RepSpec.vals1,sdata,addtocontacts,message,RepSpec.f7);
  end;
  if (message<>"") then begin
    MessageBox(0,message);
  end;

/*  
  if (WindowState(mwn)==Rs_normal) then begin
    DoUpdate(mwn);
  end;
*/  
  
  switch (GetWindowFileName(mwn)) begin
    case "IPVc":
      PutWindowRecord(mwn,IPr);
    case "IVCashVc":
      PutWindowRecord(mwn,IVCashr);
      IVCashDClass_RefreshStringList(mwn,IVCashr);
    case "IVVc":
      PutWindowRecord(mwn,IVr);
      IVDClass_RefreshStringList(mwn,IVr);
  end;
  if (blank(message)) then begin
    if (WindowDoOK(mwn,0)) then begin end;
  end;
  
  CloseWindow(wn);
  SelectWindow(mwn);
  
  return;
end;

global
procedure AddCCChargeVClassCancel()
begin
  integer wn;
  
  wn = CurWindow;
  
  CloseWindow(wn);
  
  return;
end;

global
updating function Boolean AddCCChargeVClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Integer wn;
  Boolean res;
    
  wn = CurWindow;
  switch (keycode) begin
    case 1: 
      AddCCChargeVClassOK;
      res = true;
    case 2: 
      AddCCChargeVClassCancel;
      res = true;
  end;
  AddCCChargeVClassFunctionKey = res;
  return;
end;

global
updating procedure IVDClassCardDataExecute(Integer wn,string asdata,record RcVc aRepSpec)
begin
  record RcVc RepSpec;
  record IVVc IVr;
  integer nwn;
  string 255 t1,t2,t3;
  string 255 priacc,name,expdate,scode,exdata,sdata,protacc;
  xml xdata;
  val outstanding;
  Integer i;
  string 255 errstr;
  
//  CCPayIVDWithCardData(wn,sdata);

  GetWindowRecord(wn,IVr);
  
  sdata = asdata;

//  sdata = "%B" & sdata & "?";
//  sdata = "<HAL1><T1>" & sdata & "</T1></HAL1>";

  xdata = ParseXmlString(sdata);
    
  t1 = XmlGet(xdata,"HAL1/T1");
  t2 = XmlGet(xdata,"HAL1/T2");
  t3 = XmlGet(xdata,"HAL1/T3");
  
  ParseT1Data(t1,priacc,name,expdate,scode,exdata);
  //ParseT2Data(t2,priacc,expdate,scode,exdata);
  errstr = VerifySwipedCreditCardData(priacc,aRepSpec.f7);
  if (nonblank(errstr)) then begin 
    Trace("Error","");
    MessageBox(0,errstr);
    goto LIVDClassCardDataExecute;
  end;
  
  for (i = 0; i<(len(priacc) - 4); i = i + 1) begin
    protacc = protacc & "*";
  end;
  protacc = protacc & right(priacc,4);
  RepSpec.f1 = protacc;
  RepSpec.f2 = trim(name);
  RepSpec.f3 = expdate;
  RepSpec.f12 = priacc;
  
  if (nonblank(IVr.RetnValue)) then begin
    outstanding = -IVr.RetnValue;
  end else begin
    outstanding = IVr.Sum4;
  end;
  
  RepSpec.vals0 = outstanding;
  RepSpec.vals1 = outstanding;
  
  RepSpec.f4 = sdata;
  
  if (outstanding>0) then begin
    nwn = OpenWindow("AddCCChargeVClass",0,wn,"","",RepSpec);
  end else begin
    beep;
    Trace("Invoice is already fully paid","");
  end;
  
LIVDClassCardDataExecute:;
  return;
end;

global
updating procedure IVDClassCardData(Integer wn,string sdata)
begin
  record RcVc RepSpec;
  
  RecordClear(RepSpec);
  IVDClassCardDataExecute(wn,sdata,RepSpec);
  return;
end;

global
procedure IVDClassBarcodeData(Integer wn,string bcdata)
begin
  record INVc INr;
  record IVVc IVr;
  row IVVc IVrw;
  LongInt i,rows;
  
  if (GetFirstItem(bcdata,INr)==false) then begin
    StopAlert(USetStr(2292) & ": " & bcdata);
    goto LIVDClassBarcodeData;  
  end;
  
  GetWindowRecord(wn,IVr);
  rows = MatRowCnt(IVr);
  
  for (i = 0; i<rows; i = i + 1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.ArtCode==INr.Code) then begin
      IVrw.Quant = IVrw.Quant + 1;
      MatRowPut(IVr,i,IVrw);
      IVVc_PasteQuantity(IVr,i);
      PutWindowRecord(wn,IVr);
      goto LIVDClassBarcodeData;
    end;
  end;
  
  ClearRow(IVr,IVrw,1);
  IVrw.ArtCode = INr.Code;
  MatRowPut(IVr,rows,IVrw);
  IVVc_PasteItem(IVr,i,wn);
  MatRowGet(IVr,rows,IVrw);
  IVrw.Quant = 1;
  MatRowPut(IVr,rows,IVrw);
  IVVc_PasteQuantity(IVr,i);
  PutWindowRecord(wn,IVr);
  
LIVDClassBarcodeData:;
  return;
end;

global
updating procedure TestIVDClassCardData()
begin
  Integer wn;
  string 255 sdata;
  
  StopAlert("Put the test data here to test");
  wn = CurWindow;
  sdata = "";
  sdata = sdata & "<HAL1>";
  sdata = sdata & "<T1></T1>";
  sdata = sdata & "<T2></T2>";
  sdata = sdata & "</HAL1>";
  IVDClassCardData(wn,sdata);
  
  return;
end;

global
function Boolean AddCCChargeVClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  boolean res;
  record RcVc RepSpec;
  val zeroval;
  
  res = true;
  zeroval = 0;
  GetWindowRecord(wn,RepSpec);
  
  switch (fieldname) begin
    case "vals1":
      if (RepSpec.vals1==blankval or RepSpec.vals1<zeroval) then begin
        res = false;
        RepSpec.vals1 = RepSpec.vals0;
        PutWindowRecord(wn,RepSpec);
        beep;
        goto LAddCCChargeVClassAfterEditField;
      end;
      
      if (RepSpec.vals1>RepSpec.vals0) then begin
        res = false;
        RepSpec.vals1 = RepSpec.vals0;
        PutWindowRecord(wn,RepSpec);
        beep;
        goto LAddCCChargeVClassAfterEditField;
      end;
  end;
  
LAddCCChargeVClassAfterEditField:;
  
  AddCCChargeVClassAfterEditField = res;
  return;
end;

global
updating procedure CCPayCardHolderPresentWClassCardData(Integer wn,string sdata)
begin
  Integer mwn;
  record RcVc RepSpec;

  mwn = MotherWindow(wn);
  GetWindowRecord(wn,RepSpec);
  CloseWindow(wn);
  switch (GetWindowFileName(mwn)) begin
    case "IVCashVc":
      IVCashDClassCardData(mwn,sdata);
    case "IPVc":
      IPDClassCardDataExecute(RepSpec,mwn,sdata);
    otherwise
      IVDClassCardDataExecute(mwn,sdata,RepSpec);
  end;
  return;
end;

global
updating procedure CCPayTouchScreenDClassCardData(Integer wn,string sdata)
begin
  Integer mwn;
  record RcVc RepSpec;
  
  GetWindowRecord(wn,RepSpec);  
  mwn = MotherWindow(wn);
  CloseWindow(wn);
  switch (GetWindowFileName(mwn)) begin
    case "IVCashVc":
      CCPayIVCashDWithCardData(RepSpec,true,mwn,sdata);
    otherwise
      IVDClassCardData(mwn,sdata);
  end;
  return;
end;

global
updating procedure DCPayTouchScreenDClassCardData(Integer wn,string sdata)
begin
  Integer mwn;
  record RcVc RepSpec;
  
  GetWindowRecord(wn,RepSpec);  
  mwn = MotherWindow(wn);
  CloseWindow(wn);
  switch (GetWindowFileName(mwn)) begin
    case "IVCashVc":
      CCPayIVCashDWithCardData(RepSpec,true,mwn,sdata);
    otherwise
      IVDClassCardData(mwn,sdata);
  end;
  return;
end;

updating procedure DoCCPayCardData(Integer wn,string carddata)
begin
  record RcVc RepSpec;
  record CCAccountIDVc CCAccountIDr;
  xml xdata;
  string 255 t1,t2,t3,priacc,name,expdate,scode,exdata;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  if (nonblank(carddata) and RepSpec.flags[9]==kCardHolderPresent) then begin
    xdata = ParseXmlString(carddata);
    
    t1 = XmlGet(xdata,"HAL1/T1");
    t2 = XmlGet(xdata,"HAL1/T2");
    t3 = XmlGet(xdata,"HAL1/T3");
    
    ParseT1Data(t1,priacc,name,expdate,scode,exdata);

    RepSpec.f2 = priacc;
    RepSpec.f1 = trim(name);
    RepSpec.FirstAcc = Right(expdate,2);
    RepSpec.LastAcc = Left(expdate,2);
    if (nonblank(RepSpec.LastAcc)) then begin
      RepSpec.LastAcc = "20" & RepSpec.LastAcc;
    end;
    PutWindowRecord(wn,RepSpec);
    PutWindowString(wn,"ccpayaddr1",RepSpec.f1);
  end;
  SelectWindow(wn);
  return;
end;

global
updating procedure CCPayInvDelAddressDClassCardData(Integer wn,string sdata)
begin
  DoCCPayCardData(wn,sdata);
  return;
end;

global
updating procedure CCPayAddressDClassCardData(Integer wn,string sdata)
begin
  DoCCPayCardData(wn,sdata);
  return;
end;

global
updating procedure CCPayDelAddressDCardData(Integer wn,string sdata)
begin
  DoCCPayCardData(wn,sdata);
  return;
end;

global
updating procedure CCPayDClassCardData(Integer wn,string sdata)
begin
  DoCCPayCardData(wn,sdata);
  return;
end;

function Boolean CCPayCardHolderNameEFAfter(Integer wn,Boolean changedf)
begin
  record RcVc RepSpec;
  Boolean res;
  
  if (changedf) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,RepSpec);
    PutWindowString(wn,"ccpayaddr1",RepSpec.f1);
    res = true;
  end;
  
  CCPayCardHolderNameEFAfter = res;
  return;
end;

global
function boolean CCPayAddressDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  
  switch (fieldname) begin
    case "f1": res = CCPayCardHolderNameEFAfter(wn,changed!=0);
  end;
  
  CCPayAddressDClassAfterEditField = res;
  return;
end;

global
function boolean CCPayInvDelAddressDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  
  switch (fieldname) begin
    case "f1": res = CCPayCardHolderNameEFAfter(wn,changed!=0);
  end;
  
  CCPayInvDelAddressDClassAfterEditField = res;
  return;
end;
