external function Boolean UserCanChangePendingRecord(Integer);
remote function Integer ActTestApprovalStatus(record ActVc);
remote function Integer ActApprovalStatus(record ActVc,var record AcceptanceRulesVc);
external function Integer CountObjects(string);
remote updating function LongInt CancelApprovalRequest(string,string,var Integer);
remote updating function Integer RequestApproval_ActVc(record ActVc,string,var record RcVc,var Integer);
remote procedure ActDClassOnOpenWindowRemote(var record ActVc,string,var Integer,var array string,var array LongInt);
remote procedure ActDClassOnOpenWindowRemote2(var record ActVc,string,var Integer,var array string,var array LongInt,var array string,var array Integer);
remote function Boolean ActivityIsForAcceptanceOrFYI(record ActVc,Boolean,Boolean);
external function Integer SecondsToTime(LongInt,var Time);
external function LongInt TimeDiffInSeconds(Time,Time);
external function Time AddTime_Minutes(Time,Time);
external function LongInt MoveTime(Time,Time,var Time);
remote function Boolean DateWarned(Date,string);
remote function Boolean DateLocked(Date,string);
external remote procedure ActType2SClassOnOKWindowDo(string,Array string,Array string,var Integer);
external remote function string 255 GetSelDI_ActType2SClass(string,LongInt,string);
external remote function string 255 UpWindDI_ActType2SClass(string,Integer);
external procedure ReverseString(string,var string);
external function Time AddTime2(Time,LongInt);
external function Boolean FindCustomerRelation(string,string,var record CUVc);
remote function Boolean ActVc_PasteSerialNr(var record ActVc);
external function LongInt DateDiff(Date,Date);
external function Time TimeDiff(Time,Time);
external function LongInt TimeToMinutes(Time);
remote function Boolean PasteActTypeInAct2(string,var record ActVc,var string);
remote function Boolean PasteINInAct2(var record ActVc,var string);
remote function Boolean PastePRInAct(var record ActVc,var string);
remote function Boolean PasteCuInAct(var record ActVc,var string);
remote updating function Boolean RecordAction_rlActLOK(var record ActVc);
remote procedure ActDEndActivityServer(var record ActVc);

function
Boolean srlActLPrint(var record ActVc Actp,string arg1)
BEGIN
  Boolean res;
  Boolean previewf;

 if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;      
  if (PrintDocument(Actp,"ActDocForm",previewf)) then begin
    res = true;
  end;   
  srlActLPrint = res;
  RETURN;
END;


global
updating procedure RecordActionAct_Print(var record ActVc Actp,string arg1,Boolean readf)
BEGIN
  record ActVc oldActr;
  
  if (readf) then begin
    if (ReadFirstMain(Actp,0,true)) then begin end;  
  end;
  RecordCopy(oldActr,Actp);
  if (srlActLPrint(Actp,arg1)) then begin
    if (RecordUpdate(oldActr,Actp,false)==0) then begin
    end;
  end;
  RETURN;
END;

global
updating procedure OKActLsm()
BEGIN
  record ActVc Actr;
  Integer wn,i;
  
  wn = CurWindow;  
  i = 1;
  while (GetRecordFromBrowse(Actr,wn,i)) begin
    if (RecordAction_rlActLOK(Actr)) then begin
    end;
    i = i + 1;
  end;  
  UpdateBrowses("ActVc");
  RETURN;
END;

global
updating procedure PrintActL(Integer wn,Boolean previewf)
BEGIN
  record ActVc Actr;
  Integer i;
  
  StartPrintDialogGroup;
  i = 1;
  while (GetRecordFromBrowse(Actr,wn,i)) begin
    RecordActionAct_Print(Actr,previewf,true);
    i = i + 1;
  end;
  EndPrintDialogGroup;
  RETURN;
END;

global
function Boolean ActDClassCUCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record ActVc Actr;
  string 255 warning;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,Actr);
    DeselectWindow(wn,false);
    if (PasteCuInAct(Actr,warning)) then begin
      if (nonblank(warning)) then begin
        MessageBox(0,warning);
      end;
      PutWindowRecord(wn,Actr);
    end else begin
      Beep;
    end;
  end;
  ActDClassCUCodeEFAfter = res;
  return;
end;

function Boolean ExplodeUsers(string theuser,var string users)
begin
  record CalDispGroupBlock CDGr;
  row CalDispGroupBlock CDGrw;
  Integer i,rwcnt;
  Boolean res;
  
  res = false;
  BlockLoad(CDGr);
  rwcnt = MatRowCnt(CDGr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CDGr,i,CDGrw);
    if (theuser==CDGrw.Code) then begin
      users = CDGrw.DefStr;
      i = rwcnt;
      res = true;
    end;
  end;
  ExplodeUsers = res;
  return;
end;

function Boolean ActDClassMainPersonsEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record ActVc Actr;
  string 100 tstr;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,Actr);
    DeselectWindow(wn,false);
    if (ExplodeUsers(Actr.MainPersons,tstr)) then begin
      Actr.MainPersons = tstr;
      PutWindowRecord(wn,Actr);
    end;
  end;
  ActDClassMainPersonsEFAfter = res;
  return;
end;

function Boolean ActDClassCCPersonsEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record ActVc Actr;
  string 100 tstr;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,Actr);
    DeselectWindow(wn,false);
    if (ExplodeUsers(Actr.CCPersons,tstr)) then begin
      Actr.CCPersons = tstr;
      PutWindowRecord(wn,Actr);
    end;
  end;
  ActDClassCCPersonsEFAfter = res;
  return;
end;

function Boolean ActDClassPRCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record ActVc Actr;
  string 255 warning;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,Actr);
    DeselectWindow(wn,false);
    if (PastePRInAct(Actr,warning)) then begin
      if (nonblank(warning)) then begin
        MessageBox(0,warning);
      end;
      PutWindowRecord(wn,Actr);
    end else begin
      if (nonblank(Actr.PRCode)) then begin    
        Beep;
      end;
    end;
  end;
  ActDClassPRCodeEFAfter = res;
  return;
end;

global
function Boolean ActDClassItemCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record ActVc Actr;
  string 255 warning;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,Actr);
    DeselectWindow(wn,false);
    if (nonblank(Actr.PRCode)) then begin
      if (nonblank(Actr.MainPersons)) then begin
        if (PasteINInAct2(Actr,warning)) then begin
          PutWindowRecord(wn,Actr);
        end;
      end;
    end;
  end;
  ActDClassItemCodeEFAfter = res;
  return;
end;

function Boolean ActDClassContactEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record ActVc Actr;
  record CUVc ContactCUr;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,Actr);
    DeselectWindow(wn,false);
    if (FindCustomerRelation(Actr.CUCode,Actr.Contact,ContactCUr)) then begin
      Actr.Phone = ContactCUr.Phone;
      PutWindowRecord(wn,Actr);
    end;
  end;
  ActDClassContactEFAfter = res;
  return;
end;

function Boolean ActDClassActResultEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record ActVc Actr;
  string 255 warning;
  LongInt days;
  Time t;
  record CRMBlock CRMb;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,Actr);
    DeselectWindow(wn,false);
    BlockLoad(CRMb);
    if (nonblank(Actr.ActResult)) then begin
      if (CRMb.ActTimeFromClient!=0) then begin
        if (blanktime(Actr.EndTime)) then begin
          Actr.EndTime = CurrentTime;
        end;
        Actr.EndDate = CurrentDate;
      end else begin
        t = Actr.EndTime;
        ActDEndActivityServer(Actr);
        if (nonblanktime(t)) then begin
          Actr.EndTime = t;
        end;
      end;
      if (blanktime(Actr.CostTime)) then begin
        days = DateDiff(Actr.EndDate,Actr.TransDate);
        if (Actr.EndTime<Actr.StartTime) then begin
          days = days - 1;
        end;
        if (days < 0) then begin 
          days = days * -1;
        end;
        Actr.CostTime = TimeDiff(Actr.StartTime,Actr.EndTime);  
        Actr.CostTime = AddTime2(Actr.CostTime,days*24*60);
        if (days>1) then begin
          t.hour = 23; t.minute = 59; t.second = 59;
          Actr.CostTime = t;
        end;
      end;
      PutWindowRecord(wn,Actr);
    end;    
  end;
  ActDClassActResultEFAfter = res;
  return;
end;

procedure CheckTimeMinSec(var Time timep)
begin
  if (GetSecond(timep)>=60) then begin
    timep = AddMinutes(timep,1);
    timep = AddSeconds(timep,-GetSecond(timep));  
  end;
  if (GetMinute(timep)>=60) then begin
    timep = AddHours(timep,1);
    timep = AddMinutes(timep,-GetMinute(timep));  
  end;
  return;
end;

function Boolean ActDClassEndDateEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record ActVc Actr;
  string 255 warning;
  LongInt days;
  Time t;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,Actr);
    DeselectWindow(wn,false);
    t = Actr.EndTime;
    CheckTimeMinSec(t);
    Actr.EndTime = t;
    days = DateDiff(Actr.EndDate,Actr.TransDate);
    if (Actr.EndTime<Actr.StartTime) then begin
      days = days - 1;
    end;
    Actr.CostTime = TimeDiff(Actr.StartTime,Actr.EndTime);  
    if ((days==0) or (days>=1)) then begin//what if days are 2 or more?
      Actr.CostTime = AddTime2(Actr.CostTime,days*24*60);
    end;    
    if (days>1) then begin
      t.hour = 23; t.minute = 59; t.second = 59;
      Actr.CostTime = t;
    end;
    PutWindowRecord(wn,Actr);
  end;
  ActDClassEndDateEFAfter = res;
  return;
end;

function Boolean ActDClassStartTimeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record ActVc Actr;
  string 255 warning;
  LongInt days;
  Time t;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,Actr);
    DeselectWindow(wn,false);
    t = Actr.StartTime;
    CheckTimeMinSec(t);
    Actr.StartTime = t;
    
    if (nonblank(Actr.StartTime)) then begin
      if (GetHour(Actr.StartTime)>23) then begin
        Actr.StartTime = AddHours(Actr.StartTime,-GetHour(Actr.StartTime));  
      end;
      if (GetMinute(Actr.StartTime)>59) then begin
        Actr.StartTime = AddMinutes(Actr.StartTime,-GetMinute(Actr.StartTime));  
      end;
      if (GetSecond(Actr.StartTime)>59) then begin
        Actr.StartTime = AddSeconds(Actr.StartTime,-GetSecond(Actr.StartTime));  
      end;
      if (nonblank(Actr.EndTime)) then begin
        t = Actr.EndTime;
        CheckTimeMinSec(t);
        Actr.EndTime = t;
        days = DateDiff(Actr.EndDate,Actr.TransDate);        
        if (Actr.EndTime<Actr.StartTime) then begin
          days = days - 1;
        end;
        Actr.CostTime = TimeDiff(Actr.StartTime,Actr.EndTime);  
        if ((days==0) or (days>=1)) then begin//what if days are 2 or more?
          Actr.CostTime = AddTime2(Actr.CostTime,days*24*60);
        end;
      end;
      PutWindowRecord(wn,Actr);
    end;    
  end;
  ActDClassStartTimeEFAfter = res;
  return;
end;

global
function Boolean ActDClassEndTimeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record ActVc Actr;
  string 255 warning;
  LongInt days;
  Time t;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,Actr);
    DeselectWindow(wn,false);    
    if (nonblank(Actr.EndTime)) then begin
      if (GetHour(Actr.EndTime)>23) then begin
        Actr.EndTime = AddHours(Actr.EndTime,-GetHour(Actr.EndTime));  
      end;
      if (GetMinute(Actr.EndTime)>59) then begin
        Actr.EndTime = AddMinutes(Actr.EndTime,-GetMinute(Actr.EndTime));  
      end;
      if (GetSecond(Actr.EndTime)>59) then begin
        Actr.EndTime = AddSeconds(Actr.EndTime,-GetSecond(Actr.EndTime));  
      end;
      t = Actr.EndTime;
      CheckTimeMinSec(t);
      Actr.EndTime = t;        
      days = DateDiff(Actr.EndDate,Actr.TransDate);      
      if (Actr.EndTime<Actr.StartTime) then begin
        days = days - 1;
      end;
//      Actr.CostTime = TimeDiff(Actr.StartTime,Actr.EndTime);  
      SecondsToTime(TimeDiffInSeconds(Actr.StartTime,Actr.EndTime),Actr.CostTime);      
      if (days>=1) then begin//what if days are 2 or more?
        Actr.CostTime = AddTime2(Actr.CostTime,days*24*60);
      end;
      if (days>1) then begin
        t.hour = 23; t.minute = 59; t.second = 59;
        Actr.CostTime = t;
      end;
      PutWindowRecord(wn,Actr);
    end;    
  end;
  ActDClassEndTimeEFAfter = res;
  return;
end;

function Boolean ActDClassActTypeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record ActVc Actr;
  string 255 warning;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,Actr);
    if (PasteActTypeInAct2(WindEFStr(wn),Actr,warning)) then begin
      PutWindowRecord(wn,Actr);
      if (nonblank(warning)) then begin
        MessageBox(0,warning);
      end;
    end;
  end;
  ActDClassActTypeEFAfter = res;
  return;
end;

function Boolean ActDClassActStateEFAfter(Integer wn,Integer changedf)
begin
  Boolean res;
  record ActVc Actr;
  record ActStateVc ASr;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,Actr);
    ASr.Code = Actr.ActState;
    ReadFirstMain(ASr,1,true);
    Actr.ActStateComment = ASr.Comment;
    PutWindowRecord(wn,Actr);
  end;
  ActDClassActStateEFAfter = res;
  return;
end;

function Boolean ActDClassTransDateEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record ActVc Actr;
  Time t;
  LongInt days;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,Actr);
    DeselectWindow(wn,false);
    Actr.EndDate = Actr.TransDate;
    t = Actr.EndTime;
    CheckTimeMinSec(t);
    Actr.EndTime = t;
    days = DateDiff(Actr.EndDate,Actr.TransDate);
    if (Actr.EndTime<Actr.StartTime) then begin
      days = days - 1;
    end;
    Actr.CostTime = TimeDiff(Actr.StartTime,Actr.EndTime);  
    if ((days==0) or (days>=1)) then begin//what if days are 2 or more?
      Actr.CostTime = AddTime2(Actr.CostTime,days*24*60);
    end;    
    if (days>1) then begin
      t.hour = 23; t.minute = 59; t.second = 59;
      Actr.CostTime = t;
    end;
    if (DateWarned(Actr.TransDate,"ActVc")) then begin
      MessageBox(1045,"");
    end;
    if (DateLocked(Actr.TransDate,"ActVc")) then begin
      MessageBox(1045,"");
    end;
//    if (IVWarnOldRecords(IVp.TransDate,IVp.SerNr)) then begin
//      MessageBox(2020,"");
//    end;
    PutWindowRecord(wn,Actr);
  end;
  ActDClassTransDateEFAfter = res;
  return;
end;

function Boolean ActDClassTextCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record TextTypeVc Textr;
  record ActVc Actr;
  row ActVc Actrw;
  
  res = true;
  if ((changedf!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,Actr);
    DeselectWindow(wn,false);
    MatRowGet(Actr,rownr,Actrw);
    Textr.Code = Actrw.TextCode;
    if (ReadFirstMain(Textr,1,true)) then begin
      Actrw.Text = Textr.Comment;
      MatRowPut(Actr,rownr,Actrw);
    end;
    PutWindowRecord(wn,Actr);
  end;
  ActDClassTextCodeEFAfter = res;
  return;
end;

function Integer FindWhiteChar(string text)
begin
  Integer res;
  string 255 rtext;
  
  ReverseString(text,rtext);
  res = InString(rtext," ");
//  StopAlert("res " & res);
  if (res==0) then begin
    res = InString(rtext,".");
  end;
  if (res==0) then begin
    res = InString(rtext,",");
  end;
  if (res==0) then begin
    res = InString(rtext,";");
  end;
  if (res==0) then begin
    res = InString(rtext,":");
  end;
  res = len(text) - res;
  FindWhiteChar = res;
  return;
end;

function Boolean ActDClassTextEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record ActVc Actr;
  row ActVc Actrw;
  row ActVc newActrw;
  Integer i;

  res = true;
  if ((changedf!=0) and (rownr>0)) then begin
    GetWindowRecord(wn,Actr);
    MatRowGet(Actr,rownr-1,Actrw);
    if (len(Actrw.Text)>=100) then begin
      i = FindWhiteChar(Actrw.Text);
      ClearRow(Actr,newActrw,1);
      newActrw.Text = Right(Actrw.Text,len(Actrw.Text)-i);
      if (LastChar>=33) then begin
        newActrw.Text = newActrw.Text & chr(LastChar);
      end;
      MatRowInsert(Actr,rownr,newActrw);
      Actrw.Text = Left(Actrw.Text,i);
      MatRowPut(Actr,rownr-1,Actrw);
    end;
    PutWindowRecord(wn,Actr);
  end;
  ActDClassTextEFAfter = res;
  return;
end;

global
function Boolean ActDClassSwitchRow(Integer wn,Integer rownr)
begin
  Boolean res;
  
  if (WindowState(wn)==2) then begin//Rs_update
    //res = ActDClassTextEFAfter(wn,0,rownr,1);
  end;
  ActDClassSwitchRow = res;
  return;
end;

function Boolean ActDClassSerialNrEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record ActVc Actr;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,Actr);
    DeselectWindow(wn,false);
    if (ActVc_PasteSerialNr(Actr)) then begin
      PutWindowRecord(wn,Actr);
    end;
  end;
  ActDClassSerialNrEFAfter = res;
  return;
end;

function Boolean ActDClassSVOSerNrEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record ActVc Actr;
  record SVOVc SVOr;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,Actr);
    DeselectWindow(wn,false);
    SVOr.SerNr = Actr.SVOSerNr;
    if (ReadFirstMain(SVOr,1,true)) then begin
      Actr.CUCode = SVOr.CustCode;
      Actr.CUName = SVOr.Addr0;
      Actr.Contact = SVOr.CustContact;
      Actr.Phone = SVOr.Phone;
      PutWindowRecord(wn,Actr);
    end;
  end;
  ActDClassSVOSerNrEFAfter = res;
  return;
end;

function Boolean ActDClassProdOpSerNrEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record ActVc Actr;
  record ProdSettingsBlock PSb;
  
  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,Actr);
    DeselectWindow(wn,false);
    BlockLoad(PSb);
    Actr.ArtCode = PSb.LabourCostItem;
    PutWindowRecord(wn,Actr);
  end;
  ActDClassProdOpSerNrEFAfter = res;
  return;
end;

global
function Boolean ActDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = false;
  switch (fieldname) begin
    case "CUCode": res = ActDClassCUCodeEFAfter(wn,fn,rownr,changed);
    case "PRCode": res = ActDClassPRCodeEFAfter(wn,fn,rownr,changed);
    case "ItemCode": res = ActDClassItemCodeEFAfter(wn,fn,rownr,changed);
    case "Contact": res = ActDClassContactEFAfter(wn,fn,rownr,changed);
    case "ActType": res = ActDClassActTypeEFAfter(wn,fn,rownr,changed);
    case "ActState": res = ActDClassActStateEFAfter(wn,changed);
    case "TransDate": res = ActDClassTransDateEFAfter(wn,fn,rownr,changed);
    case "TextCode": res = ActDClassTextCodeEFAfter(wn,fn,rownr,changed);
    case "ActResult": res = ActDClassActResultEFAfter(wn,fn,rownr,changed);
    case "MainPersons": res = ActDClassMainPersonsEFAfter(wn,fn,rownr,changed);
    case "CCPersons": res = ActDClassCCPersonsEFAfter(wn,fn,rownr,changed);
    case "EndDate": res = ActDClassEndDateEFAfter(wn,fn,rownr,changed);
    case "StartTime": res = ActDClassStartTimeEFAfter(wn,fn,rownr,changed);
    case "EndTime": res = ActDClassEndTimeEFAfter(wn,fn,rownr,changed);
    case "SerialNr": res = ActDClassSerialNrEFAfter(wn,fn,rownr,changed);
    case "SVOSerNr": res = ActDClassSVOSerNrEFAfter(wn,fn,rownr,changed);
    case "ProdOpSerNr": res = ActDClassProdOpSerNrEFAfter(wn,changed!=0);
  end;
  ActDClassAfterEditField = res;
  return;
end;

function Boolean ActApprovalStarted(record ActVc Actr)
begin
  Boolean res;
  record AcceptanceRulesVc Acptr;

  res = false;
  if (ActApprovalStatus(Actr,Acptr)>=kAcceptanceStatePending) then begin
    res = true;
  end;
  ActApprovalStarted = res;
  return;
end;

global
function Boolean ActDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record ActVc Actr;
  
  res = true;
  if (wnst==Rs_update) then begin
    GetPrevWindowRecord(wn,Actr);
    if (Actr.Invalid!=0) then begin
      res = false;
      goto LActDClassActiveEditField;
    end;
    if (Actr.TodoFlag!=kTodoFlagApproval) then begin
      if (ActApprovalStarted(Actr) and UserCanChangePendingRecord(rownr)==false) then begin
        res = false;
        goto LActDClassActiveEditField;
      end;
    end;
    if (Actr.OKFlag!=0 or Actr.TodoFlag==kTodoFlagApproval) then begin
      res = false;
      switch (fieldname) begin
        case "CCPersons": res = true;
        case "Contact": res = true;
        case "Phone": res = true;
        case "PrioLevel": res = true;
        case "Comment": res = true;
        case "LangCode": res = true;
        case "UserStr1": res = true;
        case "UserStr2": res = true;
        case "UserStr3": res = true;
        case "UserStr4": res = true;
        case "UserStr5": res = true;
        case "UserVal1": res = true;
        case "UserVal2": res = true;
        case "UserVal3": res = true;
        case "UserDate1": res = true;
        case "UserDate2": res = true;
        case "UserDate3": res = true;
      end;
      if (Actr.OKFlag!=0) then begin
        goto LActDClassActiveEditField;
      end;
    end;
  end;
  GetWindowRecord(wn,Actr);
  if (Actr.Invalid!=0) then begin
    res = false;
    goto LActDClassActiveEditField;
  end;
  switch (fieldname) begin
    case "MainPersons": 
      if (Actr.TodoFlag==kTodoFlagApproval) then begin
        res = SetInSet(CurrentUser,Actr.MainPersons);
      end;
    case "ActType": 
      res = true;
      if (Actr.TodoFlag==kTodoFlagApproval) then begin
        res = ActivityIsForAcceptanceOrFYI(Actr,true,true)==false;
      end;
    case "CUCode": if (nonblank(Actr.PRCode)) then begin res = false; end;
    case "Supervisor": res = UserCanAction("AllowProjectActivitySupervisorChange",true);
    case "ActResult": 
      if (Actr.TodoFlag==kTodoFlagApproval) then begin
//        res = ApprovalActivityForCurrentUser(Actr);
        res = SetInSet(CurrentUser,Actr.MainPersons);
      end;
  end;
LActDClassActiveEditField:;
  ActDClassActiveEditField = res;
  return;
end;

global
function Boolean ProjActDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  ProjActDClassActiveEditField = ActDClassActiveEditField(wn,fieldname,fn,wnst,rownr,changed);
  return;
end;


global
function Boolean ActDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record ActVc Actr;
  record TBIVVc TBIVp;
  Integer err;
 
  res = true;
  GetWindowRecord(wn,Actr);
  if (Actr.TodoFlag!=kTodoFlagApproval) then begin
    err = ActTestApprovalStatus(Actr);
    if (err!=0) then begin
      MessageBox(err,"");
      res = false;
      goto LActDClassOKFlagButtonAction;
    end;
  end;
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,Actr);
    if (Actr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
      if (nonblank(Actr.PRCode)) then begin
        RecordNew(TBIVp);
        TBIVp.PRCode = Actr.PRCode;
        TBIVp.oVc = 5;
        TBIVp.SerNr = Actr.SerNr;
        TBIVp.Row = -1;
        TBIVp.ArtCode = Actr.ItemCode;
        TBIVp.EMCode = Actr.MainPersons;
        TBIVp.TransDate = Actr.TransDate;
        if (ReadFirstKey("TransDate",TBIVp,7,true)) then begin
          res = false;
        end;
      end;
    end;
    GetWindowRecord(wn,Actr);
    switch (Actr.TodoFlag) begin
      case kTodoFlagTodo:
        if (Actr.TransDate>CurrentDate) then begin Actr.TransDate = CurrentDate; end;
        if (Actr.EndDate>CurrentDate) then begin Actr.EndDate = CurrentDate; end;
      case kTodoFlagTimedTodo:
        if (Actr.TransDate>CurrentDate) then begin Actr.TransDate = CurrentDate; end;
        if (Actr.EndDate>CurrentDate) then begin Actr.EndDate = CurrentDate; end;
      case kTodoFlagApproval:
        if (Actr.TransDate>CurrentDate) then begin Actr.TransDate = CurrentDate; end;
        if (Actr.EndDate>CurrentDate) then begin Actr.EndDate = CurrentDate; end;
    end;
    PutWindowRecord(wn,Actr);
  end;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,Actr);
    switch (Actr.TodoFlag) begin
      case kTodoFlagTodo:
        if (Actr.TransDate>CurrentDate) then begin Actr.TransDate = CurrentDate; end;
        if (Actr.EndDate>CurrentDate) then begin Actr.EndDate = CurrentDate; end;
      case kTodoFlagTimedTodo:
        if (Actr.TransDate>CurrentDate) then begin Actr.TransDate = CurrentDate; end;
        if (Actr.EndDate>CurrentDate) then begin Actr.EndDate = CurrentDate; end;
      case kTodoFlagApproval:
        if (Actr.TransDate>CurrentDate) then begin Actr.TransDate = CurrentDate; end;
        if (Actr.EndDate>CurrentDate) then begin Actr.EndDate = CurrentDate; end;
    end;
    PutWindowRecord(wn,Actr);
    if (Actr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
      if (nonblank(Actr.PRCode)) then begin
        RecordNew(TBIVp);
        TBIVp.PRCode = Actr.PRCode;
        TBIVp.oVc = 5;
        TBIVp.SerNr = Actr.SerNr;
        TBIVp.Row = -1;
        TBIVp.ArtCode = Actr.ItemCode;
        TBIVp.EMCode = Actr.MainPersons;
        TBIVp.TransDate = Actr.TransDate;
        if (ReadFirstKey("TransDate",TBIVp,7,true)) then begin
          res = false;
        end;
      end;
    end;
  end;  
LActDClassOKFlagButtonAction:;  
  ActDClassOKFlagButtonAction = res;
  return;
end;

global
function Boolean ProjActDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  ProjActDClassOKFlagButtonAction = ActDClassOKFlagButtonAction(wn,value);
  return;
end;

global
function Boolean  ActDClassTodoFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record ActVc Actr;
 
  res = true;
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,Actr);
    if (Actr.OKFlag!=0) then begin
      if (nonblank(Actr.PRCode)) then begin
        res = false;
      end;
    end;
    if (Actr.TodoFlag==kTodoFlagApproval) then begin
      res = false;
    end;
    if (value==kTodoFlagApproval) then begin
      res = false;
    end;
  end;
  if (WindowState(wn)==Rs_normal or WindowState(wn)==Rs_insert) then begin
    GetWindowRecord(wn,Actr);
    if (Actr.OKFlag!=0) then begin
      if (nonblank(Actr.PRCode)) then begin
        res = false;
      end;
    end;
    if (Actr.TodoFlag==kTodoFlagApproval) then begin
      res = false;
    end;
    if (value==kTodoFlagApproval) then begin
      res = false;
    end;
  end;
  ActDClassTodoFlagButtonAction = res;
  return;
end;

global
function Boolean ActDClassTodoFlagButtonAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record ActVc Actr;
  record ActVc Act2r;
  
  switch (WindowState(wn)) begin
    case Rs_insert:
      GetWindowRecord(wn,Actr);
      if (Actr.TodoFlag==kTodoFlagProject) then begin
        Actr.Supervisor = CurrentUser;
        PutWindowRecord(wn,Actr);
        res = true;
      end;
    case Rs_update:
      GetPrevWindowRecord(wn,Act2r);
      GetWindowRecord(wn,Actr);
      if (Act2r.OKFlag==0) then begin
        if (Actr.TodoFlag==kTodoFlagProject and Act2r.TodoFlag!=kTodoFlagProject) then begin
          Actr.Supervisor = CurrentUser;
          PutWindowRecord(wn,Actr);
          res = true;
        end;
      end;
  end;
  ActDClassTodoFlagButtonAfter = res;
  return;
end;


/* I have disconected this. Once we have made new multiple views of Activities we reactivate it.
global
updating function Boolean ActDClassTodoFlagButtonAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record ActVc Actr;
  record ActVc OldActr;
  string 255 windnamearg;
  string 255 subset;
  string 255 wname;
  integer nwn,mwn,multif,wstate;
  
  GetWindowRecord(wn,Actr);
  GetPrevWindowRecord(wn,OldActr);
  
  //StopAlert("changedf = " & changedf & " Actr.TodoFlag = " & Actr.TodoFlag);  
  //RedefineWindow(wn);
  
  //GetWindowName(wn,wname);
  wname = "ActDClass";
  //GetWindowNameArgument(wn,windnamearg);
  //GetWindowSubset(wn,subset);
  mwn = MotherWindow(wn);
  multif = 0; // ???
  wstate = WindowState(wn);
  
  SetWindowDirty(wn);
  CloseWindow(wn);
  
  nwn = OpenWindow(wname,multif,mwn,subset,windnamearg,Actr);
  
  SetWindowState(nwn,wstate);
  PutWindowPrevRecord(nwn,OldActr);
  
  res = true;
  ActDClassTodoFlagButtonAfter = res;
end;
*/

global
function Boolean ProjActDClassTodoFlagButtonAction(Integer wn,Integer value)
begin
  ProjActDClassTodoFlagButtonAction = ActDClassTodoFlagButtonAction(wn,value);
  return;
end;

global
function Boolean  ActDClassCalTimeFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record ActVc Actr;
 
  res = true;
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,Actr);
    if (Actr.OKFlag!=0) then begin
      if (nonblank(Actr.PRCode)) then begin
        res = false;
      end;
    end;
  end;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,Actr);
    if (Actr.OKFlag!=0) then begin
      if (nonblank(Actr.PRCode)) then begin
        res = false;
      end;
    end;
  end;    
  ActDClassCalTimeFlagButtonAction = res;
  return;
end;

global
function Boolean  ActDClassSymbNrButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record ActVc Actr;
 
  res = true;
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,Actr);
    if (Actr.OKFlag!=0) then begin
      if (nonblank(Actr.PRCode)) then begin
        res = false;
      end;
    end;
  end;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,Actr);
    if (Actr.OKFlag!=0) then begin
      if (nonblank(Actr.PRCode)) then begin
        res = false;
      end;
    end;
  end;    
  ActDClassSymbNrButtonAction = res;
  return;
end;

procedure ActDClassSpecPasteNameActResult(Integer wn,var string psname)
begin
  record CRMBlock CRMb;
    
  BlockLoad(CRMb);
  if (CRMb.ShowResultFromConsequencesOnly!=0) then begin
    psname = "ActTypeConseqSClass";
  end;
  return;
end;

global
function string 40 ActDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  record ActVc Actr;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "Contact": 
      GetWindowRecord(wn,Actr);
      if (blank(Actr.CUCode)) then begin
        psname = "ContactSClass";
      end;
    case "ActResult": 
      ActDClassSpecPasteNameActResult(wn,psname);
  end;
  ActDClassSpecPasteName = psname;
  return;
end;

global
procedure EnablerInfoDsm()
BEGIN
  record RcVc RepSpec;
  record ActVc Actr;
  row ActVc Actrw;
  Integer rwcnt,i;

  GetWindowRecord(CurWindow,Actr);
  rwcnt = MatRowCnt(Actr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Actr,i,Actrw);
    if ((Actrw.TextCode=="CS") and (rwcnt>=i+2)) then begin
      RepSpec.LastAcc = UpperCase(Actrw.Text);
      MatRowGet(Actr,i+1,Actrw);
      if (Actrw.TextCode=="CC") then begin
        RepSpec.FirstAcc = Actrw.Text;
      end;
    end;
  end;
  RepSpec.f1 = Actr.CUCode;
  RepSpec.f2 = Actr.CUName;
  RepSpec.f3 = Actr.Comment;
  RepSpec.f4 = Actr.Phone;
  RepSpec.Media = mtScreen;
  RepSpec.repname = "CodeManRn";
  RunReport(RepSpec,0);
  RETURN;
END;

global
function Boolean ActDClassOnOpenWindow(Integer wn)
begin
  record ActVc Actr;
  Integer AcceptanceStatusFlag;
  array string 255 aspas;
  array LongInt aactnr;
  
  GetWindowRecord(wn,Actr);
  if (Actr.TodoFlag!=kTodoFlagApproval) then begin
    ActDClassOnOpenWindowRemote(Actr,"ActVc",AcceptanceStatusFlag,aspas,aactnr);
    PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
    ReRunWindowDef(wn);
  end;
  ActDClassOnOpenWindow = false;
  return;
end;

global
function Boolean ActDClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  record ActVc Actr;
  
  if (WindowState(wn)==Rs_normal) then begin
    if (ReadMarkedRecord(wn,Actr)) then begin
      mwn = OpenWindow("ActDClass",1,0,"","",Actr);
    end;
  end;
  ActDClassOnOKWindow = true;
  return;
end;

global
function Boolean ActDClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record ActVc Actr;
  
  GetWindowRecord(wn,Actr);
  if (Actr.SerNr!=-1) then begin
    subsetname = Actr.SerNr;
  end else begin
    subsetname = -4232098; // very ugly... but a way to make sure not all activities are shown when making a new record.
  end;
  ActDClassUpdateWindowSubset = true;
  return;
end;

global
procedure ActDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin // Temporary fix for the RecordList
  saveOK = true;
  return;
end;

global
procedure RecActDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin // Temporary fix for the RecordList
  saveOK = true;
  return;
end;

global
procedure ProjActDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin // Temporary fix for the RecordList
  saveOK = true;
  return;
end;

global
function Boolean ActType2SClassOnOpenWindow(Integer wn)
begin
  LongInt l;
  string 255 subset;
  string 255 seltag;
  Array string 255 adi;
  Array string 255 aci;
  Integer i,acnt;
  
  l = SelectedListLine(wn);
  seltag = GetListTag(wn,l);
  subset = GetSelDI_ActType2SClass(GetWindowSubset(wn),l,seltag);
  ClearStringList(wn);
  ActType2SClassOnOKWindowDo(subset,adi,aci,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListStringAndTag(wn,i,adi[i],aci[i]);  
  end;
  SetWindowSubset(wn,subset);
  i = SelectedListLine(wn);
  ActType2SClassOnOpenWindow = true;
  return;
end;

global
function Boolean ActType2SClassOnOKWindow(Integer wn)
begin  
  LongInt l;
  string 255 subset;
  string 255 seltag;
  Array string 255 adi;
  Array string 255 aci;
  Integer i,acnt;
  
  l = SelectedListLine(wn);
  seltag = GetListTag(wn,l);
  subset = GetSelDI_ActType2SClass(GetWindowSubset(wn),l,seltag);
  ClearStringList(wn);
  ActType2SClassOnOKWindowDo(subset,adi,aci,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListStringAndTag(wn,i,adi[i],aci[i]);  
  end;
  SetWindowSubset(wn,subset);
  i = SelectedListLine(wn);
  UpdateBrowses("");
  ActType2SClassOnOKWindow = true;
  return;
end;

global
procedure ActType2SClassTop()
begin
  Integer wn;
  string 255 subset;
  string 255 seltag;
  Array string 255 adi;
  Array string 255 aci;
  Integer i,acnt;
  LongInt l;
  
  wn = CurWindow;
  subset = UpWindDI_ActType2SClass(GetWindowSubset(wn),1);
  seltag = GetListTag(wn,l);
  subset = GetSelDI_ActType2SClass(subset,l,seltag);
  ClearStringList(wn);
  ActType2SClassOnOKWindowDo(subset,adi,aci,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListStringAndTag(wn,i,adi[i],aci[i]);  
  end;
  SetWindowSubset(wn,subset);
  i = SelectedListLine(wn);
  UpdateBrowses("");
  return;
end;

global
updating procedure MoveActivity(Integer compnr,LongInt actsernr,Date newdate,Time newtime)
begin
  record ActVc Actr;
  record ActVc oldActr;
  LongInt actlend;

  if (compnr!=CurrentCompany) then begin
    MessageBox(2245,"");
    goto LMoveActivity;
  end;
  Actr.SerNr = actsernr;
  if (ReadFirstMain(Actr,1,true)) then begin
    if (Actr.OKFlag!=0) then begin
      MessageBox(23165,"");
      goto LMoveActivity;
    end;
    RecordCopy(oldActr,Actr);
    actlend = DateDiff(Actr.EndDate,Actr.TransDate);
    Actr.TransDate = newdate;
    Actr.StartTime = newtime;
    if (nonblankdate(Actr.EndDate)) then begin
      Actr.EndDate = newdate;
      Actr.EndDate = AddDay(Actr.EndDate,actlend);
    end;
    Actr.EndTime = AddTime_Minutes(Actr.StartTime,Actr.CostTime);
    if (RecordUpdate(oldActr,Actr,true)==0) then begin
      UpdateBrowses("ActVc");
    end;
  end;
LMoveActivity:;  
  return;
end;

global
function Boolean ActDClassOnEnterKey(var Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  Integer mwn;
  record ActVc Actr;
  
  res = true;
  if (WindowState(wn)==Rs_normal) then begin
    if (ReadMarkedRecord(wn,Actr)) then begin
      mwn = OpenWindow("ActDClass",1,0,"","",Actr);
      res = false;
    end;
  end;
  ActDClassOnEnterKey = res;
  return;
end;


global
function Boolean RecActDClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  record ActVc Actr;
  
  if (WindowState(wn)==Rs_normal) then begin
    if (ReadMarkedRecord(wn,Actr)) then begin
      mwn = OpenWindow("RecActDClass",1,0,"","",Actr);
    end;
  end;
  RecActDClassOnOKWindow = true;
  return;
end;

global
function Boolean RecActDClassOnEnterKey(var Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  Integer mwn;
  record ActVc Actr;
  
  res = true;
  if (WindowState(wn)==Rs_normal) then begin
    if (ReadMarkedRecord(wn,Actr)) then begin
      mwn = OpenWindow("RecActDClass",1,0,"","",Actr);
      res = false;
    end;
  end;
  RecActDClassOnEnterKey = res;
  return;
end;

global
function Boolean RecActDClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record ActVc Actr;
  
  GetWindowRecord(wn,Actr);
  if (Actr.SerNr!=-1) then begin
    subsetname = Actr.SerNr;
  end else begin
    subsetname = -4232098; // very ugly... but a way to make sure not all activities are shown when making a new record.
  end;
  RecActDClassUpdateWindowSubset = true;
  return;
end;

global
function Boolean  RecActDClassRecurringTypeButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record ActVc Actr;

  res = true;
  GetWindowRecord(wn,Actr);
  switch (value) begin
    case kRecurringTypeDaily:
      Actr.RecurringWeekDay = 0;
      Actr.RecurringMonthDay = -1;
      Actr.RecurringMonth = -1;
    case kRecurringTypeWeekly:
      Actr.RecurringWeekDay = 1;
      Actr.RecurringMonthDay = -1;
      Actr.RecurringMonth = -1;
    case kRecurringTypeMonthly:
      Actr.RecurringWeekDay = 0;
      Actr.RecurringMonthDay = 1;
      Actr.RecurringMonth = -1;
    case kRecurringTypeYearly:
      Actr.RecurringWeekDay = 0;
      Actr.RecurringMonthDay = 1;
      Actr.RecurringMonth = -1;
  end;
  PutWindowRecord(wn,Actr);
  RecActDClassRecurringTypeButtonAction = res;
  return;
end;

global
function Boolean RecActDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = false;
  switch (fieldname) begin
    otherwise
      res = ActDClassAfterEditField(wn,fieldname,fn,rownr,changed);
  end;
  RecActDClassAfterEditField = res;
  return;
end;

global
function string 255 ActDClassOverrideClass(record ActVc Actr,Boolean newf)
begin
  string 255 res;
  
  if (Actr.TodoFlag==kTodoFlagProject) then begin
    res = "ProjActDClass";  
  end;
  ActDClassOverrideClass = res;
  return;
end;

global
function Boolean ProjActDClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  record ActVc Actr;
  
  if (WindowState(wn)==Rs_normal) then begin
    if (ReadMarkedRecord(wn,Actr)) then begin
      mwn = OpenWindow("ProjActDClass",1,0,"","",Actr);
    end;
  end;
  ProjActDClassOnOKWindow = true;
  return;
end;

global
function Boolean ProjActDClassOnEnterKey(var Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  Integer mwn;
  record ActVc Actr;
  
  res = true;
  if (WindowState(wn)==Rs_normal) then begin
    if (ReadMarkedRecord(wn,Actr)) then begin
      mwn = OpenWindow("ProjActDClass",1,0,"","",Actr);
      res = false;
    end;
  end;
  ProjActDClassOnEnterKey = res;
  return;
end;

global
function Boolean ProjActDClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record ActVc Actr;
  
  GetWindowRecord(wn,Actr);
  if (Actr.SerNr!=-1) then begin
    subsetname = Actr.SerNr;
  end else begin
    subsetname = -4232098; // very ugly... but a way to make sure not all activities are shown when making a new record.
  end;
  ProjActDClassUpdateWindowSubset = true;
  return;
end;

global
function Boolean ProjActDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = false;
  switch (fieldname) begin
    otherwise
      res = ActDClassAfterEditField(wn,fieldname,fn,rownr,changed);
  end;
  ProjActDClassAfterEditField = res;
  return;
end;

global
function Boolean ProjActDClassOnOpenWindow(Integer wn)
begin
  record ActVc PActr;
  Integer AcceptanceStatusFlag;
  array string 255 aspas;
  array LongInt aactnr;
  Integer i;
  array string 255 astate;
  array Integer acolnr;
  
  GetWindowRecord(wn,PActr);
  
  ActDClassOnOpenWindowRemote2(PActr,"ProjActVc",AcceptanceStatusFlag,aspas,aactnr,astate,acolnr);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  ClearStringList(wn);
  for (i=0;i<aspas.length;i=i+1) begin
    AddListRow2(wn,"subprojact",1,aactnr[i],i,acolnr[i]);
    AddListData(wn,"subprojact","textcolumn",aspas[i]);
    AddListData(wn,"subprojact","state",astate[i]);
  end;      
  ReRunWindowDef(wn);
  ProjActDClassOnOpenWindow = false;
  return;
end;

/*
global
procedure ProjActDClassOnWindowRecordChange(Integer wn)
begin
  record ActVc PActr;
  Integer AcceptanceStatusFlag;

  GetWindowRecord(wn,PActr);
//  ActDClassOnOpenWindowRemote(PActr,AcceptanceStatusFlag,aspas,aactnr);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  return;
end;
*/

global
updating procedure ActCancelApprovalRequest(Integer wn)
begin
  record ActVc Actr;
  Integer ApprovalStatusFlag;
  LongInt err;

  GetWindowRecord(wn,Actr);
  err = CancelApprovalRequest("ActVc",Actr.SerNr,ApprovalStatusFlag);
  if (err!=0) then begin
    MessageBox(err,"");
    goto LActCancelApprovalRequest;
  end;
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));  
LActCancelApprovalRequest:;
  return;
end;

global
updating procedure ProjActCancelApprovalRequest(Integer wn)
begin
  record ActVc PActr;
  Integer ApprovalStatusFlag;
  LongInt err;

  GetWindowRecord(wn,PActr);
  err = CancelApprovalRequest("ProjActVc",PActr.SerNr,ApprovalStatusFlag);
  if (err!=0) then begin
    MessageBox(err,"");
    goto LProjActCancelApprovalRequest;
  end;
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));  
LProjActCancelApprovalRequest:;
  return;
end;

global
updating procedure SendforAcceptanceActDsmExecute(Integer wn,string filename,string acceptanceby,string acceptancefyi)
begin
  Integer err,nwn;
  record ActVc PActr;
  Integer ApproverSelection,ApprovalStatusFlag;
  record RcVc RepSpec;
  
  GetWindowRecord(wn,PActr);
  if (WindowState(wn)!=Rs_normal) then begin
    if (WindowDoOK(wn,0)==false) then begin
      goto LSendforAcceptanceActDsmExecute;
    end;
  end;
//  PActr.AcceptanceBy = acceptanceby;
//  PActr.AcceptanceFYI = acceptancefyi;
  err = RequestApproval_ActVc(PActr,filename,RepSpec,ApprovalStatusFlag);
  ApproverSelection = RepSpec.ArtMode;
//  if ((ApproverSelection==kAcceptanceApproverSelectionManual) and (blank(PActr.AcceptanceBy))) then begin
  if (ApproverSelection==kAcceptanceApproverSelectionManual) then begin
    switch (err) begin  
      case 0:
        if (CountObjects(RepSpec.f12)==1) then begin
          RepSpec.f1 = RepSpec.f12;
        end;
        if (CountObjects(RepSpec.f11)==1) then begin
          RepSpec.f2 = RepSpec.f11;
        end;
        nwn = OpenWindow("SelectApproverWClass",0,wn,"","",RepSpec);
      otherwise
        MessageBox(err,"");
    end;
  end else begin
    switch (err) begin  
      case 0:
        PutWindowRecord(wn,PActr);
        if (WindowDoOK(wn,0)) then begin
        end;
        PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));
        MessageBox(37501,"");
      otherwise
        MessageBox(err,"");
    end;
  end;
LSendforAcceptanceActDsmExecute:;  
  return;
end;

global
updating procedure SendforAcceptanceProjActDsm()
begin
  SendforAcceptanceActDsmExecute(CurWindow,"ProjActVc","","");
  return;
end;

global
updating procedure SendforAcceptanceActDsm()
begin
  SendforAcceptanceActDsmExecute(CurWindow,"ActVc","","");
  return;
end;

global
function Boolean ProjActDClassListDblClick(Integer wn)
begin
  Integer nwn,sel;
  record ActVc Actr;
  
  if (WindowState(wn)==Rs_normal) then begin
    sel = SelectedDataListLine(wn);
    Actr.SerNr = StringToLongInt(GetListTag(wn,sel));
    if (ReadFirstMain(Actr,1,true)) then begin
      switch (Actr.TodoFlag) begin
        case kTodoFlagProject:
          nwn = OpenWindow("ProjActDClass",1,0,"","",Actr);
        otherwise
          nwn = OpenWindow("ActDClass",1,0,"","",Actr);
      end;
    end;
  end;
  ProjActDClassListDblClick = true;
  return;
end;

global
function Boolean ProjActDClassOnOKWindow(Integer wn)
begin
  Integer nwn,sel;
  record ActVc Actr;
  
  if (WindowState(wn)==Rs_normal) then begin
    sel = SelectedDataListLine(wn);
    Actr.SerNr = StringToLongInt(GetListTag(wn,sel));
    if (ReadFirstMain(Actr,1,true)) then begin
      switch (Actr.TodoFlag) begin
        case kTodoFlagProject:
          nwn = OpenWindow("ProjActDClass",1,0,"","",Actr);
        otherwise
          nwn = OpenWindow("ActDClass",1,0,"","",Actr);
      end;
    end;
  end;
  ProjActDClassOnOKWindow = true;
  return;
end;
