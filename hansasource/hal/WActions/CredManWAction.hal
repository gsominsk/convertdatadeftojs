external procedure IVOpenPrepExists(string);
remote procedure CredManSetDates(var record CredManVc);
remote updating function Integer RecordAction_raCredManToIV(var record IVVc,var record CredManEventVc,LongInt);
remote function Integer RecordAction_raCredManToIP(var record IPVc,LongInt,string);
remote function Boolean PasteCustInCredMan(var record CredManVc);
remote function Boolean CredManVc_PasteArtCode(var record CredManVc,Integer);
remote procedure CredManVc_PasteQuant(var record CredManVc,Integer);
remote procedure CredManVc_PastevRebate(var record CredManVc,Integer);
remote procedure CredManUpdateAndSumup(var record CredManVc,Integer,string);
remote procedure CredManVc_PasteCurncyCode(var record CredManVc);
remote procedure CredManVc_PasteType(var record CredManVc);

function Boolean CredManDClassArtCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record CredManVc CredManr;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManr);
    if (rownr>=0) then begin
      if (CredManVc_PasteArtCode(CredManr,rownr)) then begin
      end;
    end;
    PutWindowRecord(wn,CredManr);
  end;
  CredManDClassArtCodeEFAfter = true;
  return;
end;

function Boolean CredManDClassQuantEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record CredManVc CredManr;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManr);
    if (rownr>=0) then begin
      CredManVc_PasteQuant(CredManr,rownr);
    end;
    PutWindowRecord(wn,CredManr);
  end;
  CredManDClassQuantEFAfter = true;
  return;
end;

function Boolean CredManDClassvRebateEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record CredManVc CredManr;

  if (changedf) then begin  
    GetWindowRecord(wn,CredManr);
    if (rownr>=0) then begin
      CredManVc_PastevRebate(CredManr,rownr);
    end;
    PutWindowRecord(wn,CredManr);
  end;
  CredManDClassvRebateEFAfter = true;
  return;
end;

function Boolean CredManDClassDefaultEFAfter(Integer wn,Integer rownr,Boolean changedf,string fieldname)
begin
  record CredManVc CredManr;

  if (changedf) then begin
    GetWindowRecord(wn,CredManr);
    CredManUpdateAndSumup(CredManr,rownr,fieldname);
    PutWindowRecord(wn,CredManr);
  end;
  CredManDClassDefaultEFAfter = true;
  return;
end;

function Boolean CredManDClassstartDateEFAfter(Integer wn,Integer rownr,Boolean changedf,string fieldname)
begin
  record CredManVc CredManr;

  if (changedf) then begin
    GetWindowRecord(wn,CredManr);
    CredManSetDates(CredManr);
    PutWindowRecord(wn,CredManr);
  end;
  CredManDClassstartDateEFAfter = true;
  return;
end;

function Boolean CredManDClassTransDateEFAfter(Integer wn,Integer rownr,Boolean changedf,string fieldname)
begin
  record CredManVc CredManr;
  record CredManSetBlock CredManSetb;

  if (changedf) then begin
    GetWindowRecord(wn,CredManr);
    CredManVc_PasteCurncyCode(CredManr);
    PutWindowRecord(wn,CredManr);
  end;
  CredManDClassTransDateEFAfter = true;
  return;
end;

function Boolean CredManDClassCurncyCodeEFAfter(Integer wn,Integer rownr,Boolean changedf,string fieldname)
begin
  record CredManVc CredManr;
  record CredManSetBlock CredManSetb;

  if (changedf) then begin
    GetWindowRecord(wn,CredManr);
    CredManVc_PasteCurncyCode(CredManr);
    PutWindowRecord(wn,CredManr);
  end;
  CredManDClassCurncyCodeEFAfter = true;
  return;
end;

function Boolean CredManDClassTypeEFAfter(Integer wn,Integer rownr,Boolean changedf,string fieldname)
begin
  record CredManVc CredManr;
  record CredManSetBlock CredManSetb;

  if (changedf) then begin
    if (rownr<0) then begin
      GetWindowRecord(wn,CredManr);
      CredManVc_PasteType(CredManr);
      PutWindowRecord(wn,CredManr);
    end;
  end;
  CredManDClassTypeEFAfter = true;
  return;
end;

function Boolean CredManDClassFirstInvDateEFAfter(Integer wn,Integer rownr,Boolean changedf,string fieldname)
begin
  record CredManVc CredManr;

  if (changedf) then begin 
    GetWindowRecord(wn,CredManr);
    CredManUpdateAndSumup(CredManr,rownr,fieldname);
    PutWindowRecord(wn,CredManr);
  end;
  CredManDClassFirstInvDateEFAfter = true;
  return;
end;

function Boolean CredManDClassCustCodeEFAfter(Integer wn,Integer rownr,Boolean changedf,string fieldname)
begin
  record CredManVc CredManr;

  if (changedf) then begin 
    GetWindowRecord(wn,CredManr);
    PasteCustInCredMan(CredManr);
    PutWindowRecord(wn,CredManr);
  end;
  CredManDClassCustCodeEFAfter = true;
  return;
end;

global
function Boolean CredManDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "ArtCode": res = CredManDClassArtCodeEFAfter(wn,rownr,changed!=0);
    case "Quant": res = CredManDClassQuantEFAfter(wn,rownr,changed!=0);
    case "vRebate": res = CredManDClassvRebateEFAfter(wn,rownr,changed!=0);
    case "PriceList": res = CredManDClassDefaultEFAfter(wn,rownr,changed!=0,fieldname);
    case "RebCode": res = CredManDClassDefaultEFAfter(wn,rownr,changed!=0,fieldname);
    case "InvSum4": res = CredManDClassDefaultEFAfter(wn,rownr,changed!=0,fieldname);
    case "DepositSum": res = CredManDClassDefaultEFAfter(wn,rownr,changed!=0,fieldname);
    case "DepositPrc": res = CredManDClassDefaultEFAfter(wn,rownr,changed!=0,fieldname);
    case "InstalmentType": res = CredManDClassDefaultEFAfter(wn,rownr,changed!=0,fieldname);
    case "InstalmentMonths": res = CredManDClassDefaultEFAfter(wn,rownr,changed!=0,fieldname);
    case "IntRate": res = CredManDClassDefaultEFAfter(wn,rownr,changed!=0,fieldname);
    case "Sum": res = CredManDClassDefaultEFAfter(wn,rownr,changed!=0,fieldname);
    case "Price": res = CredManDClassDefaultEFAfter(wn,rownr,changed!=0,fieldname);
    case "TransDate": res = CredManDClassTransDateEFAfter(wn,rownr,changed!=0,fieldname);
    case "startDate": res = CredManDClassstartDateEFAfter(wn,rownr,changed!=0,fieldname);
    case "FirstInvDate": res = CredManDClassFirstInvDateEFAfter(wn,rownr,changed!=0,fieldname);
    case "CustCode": res = CredManDClassCustCodeEFAfter(wn,rownr,changed!=0,fieldname);
    case "CurncyCode": res = CredManDClassCurncyCodeEFAfter(wn,rownr,changed!=0,fieldname);
    case "Type": res = CredManDClassTypeEFAfter(wn,rownr,changed!=0,fieldname);
  end;
  CredManDClassAfterEditField = res;
  RETURN;
END;

global
updating function Boolean CredManDClassRateTypeButtonAfter(Integer wn,Boolean changedf)
begin       
  record CredManVc CredManr;
  Boolean res;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,CredManr);
  CredManUpdateAndSumup(CredManr,-1,"");
  PutWindowRecord(wn,CredManr);
  CredManDClassRateTypeButtonAfter = res;
  return;
end;

global
function Boolean CredManDClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record CredManVc CredManr;
  
  GetWindowRecord(wn,CredManr);
  subsetname = CredManr.SerNr;
  CredManDClassUpdateWindowSubset = true;
  return;
end;

global
procedure CredManDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin // Temporary fix for the RecordList
  saveOK = true;
  return;
end;
 
global
function Boolean CredManDClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  record CredManEventVc CredManEventr;
  
  if (WindowState(wn)==0) then begin
    if (ReadMarkedRecord(wn,CredManEventr)) then begin
      mwn = OpenWindow("CredManEventDClass",1,0,"","",CredManEventr);
    end;
  end;
  CredManDClassOnOKWindow = true;
  return;
end;

global 
function Boolean CredManDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record CredManVc CredManr;
  record CredManVc CredMan2r;
  row CredManVc CredManrw;
  Boolean res;
  Integer updatemode;

  res = true;
  updatemode = 2;//Rs_update
  if (WindowState(wn)==updatemode) then begin
    GetWindowRecord(wn,CredManr);
    GetPrevWindowRecord(wn,CredMan2r);
    if ((CredMan2r.Approved!=0) or (CredMan2r.OKFlag!=0)) then begin
      res = false;
    end;
    if (rownr>-1 and rownr<MatRowCnt(CredManr)) then begin
      MatRowGet(CredManr,rownr,CredManrw);
      if (CredManrw.ChargeType==0 and (CredManrw.InvoicedOn!=-1 or CredManrw.InvoicedSum!=0)) then begin
//        res = false;
      end;
    end;
  end;
  CredManDClassDeleteRowTest = res;
  return;
end;

global 
function Boolean CredManDClassInsertRowTest(Integer wn,Integer rownr)
begin
  record CredManVc CredManr;
  record CredManVc CredMan2r;
  Boolean res;

  GetWindowRecord(wn,CredManr);
  res = true;
  switch (WindowState(wn)) begin
    case 0://Rs_normal
      if ((CredManr.Approved!=0) or (CredManr.OKFlag!=0)) then begin res = false; end;
    case 1://Rs_insert
      res = true;
    case 2://Rs_update
      GetPrevWindowRecord(wn,CredMan2r);
      if ((CredMan2r.Approved!=0) or (CredMan2r.OKFlag!=0)) then begin res = false; end;
    otherwise
      res = false;
  end;
  CredManDClassInsertRowTest = res;
  return;
end;

global
function Boolean CredManDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record CredManVc CredManr;
  record CredManVc CredMan2r;
  row CredManVc CredManrw;
  Integer rwcnt;

  res = true;
  GetWindowRecord(wn,CredManr);
  rwcnt = MatRowCnt(CredManr);
  if (wnst==2) then begin//Rs_update
    GetPrevWindowRecord(wn,CredMan2r);
    if (CredMan2r.Approved!=0 or CredMan2r.OKFlag!=0) then begin
      switch (fieldname) begin
        case "LangCode": res = true;
        case "LastInvDate": res = true;
        otherwise res = false;
      end;
      if (rownr>=0) then begin
        switch (fieldname) begin
          case "Comment":
            res = true;
          case "ArtCode":
            res = false;
            if (rownr>-1 and rownr<rwcnt) then begin
              MatRowGet(CredManr,rownr,CredManrw);
              if (CredManrw.ChargeType==0 and CredManrw.InvoicedOn==-1 and CredManrw.InvoicedSum==0) then begin
                res = true;
              end;
            end;
          case "Quant":
            res = false;
            if (rownr>-1 and rownr<rwcnt) then begin
              MatRowGet(CredManr,rownr,CredManrw);
              if (CredManrw.ChargeType==0 and CredManrw.InvoicedOn==-1 and CredManrw.InvoicedSum==0) then begin
                res = true;
              end;
            end;
          case "Sum":
            res = false;
            if (rownr>-1 and rownr<rwcnt) then begin
              MatRowGet(CredManr,rownr,CredManrw);
              if (CredManrw.ChargeType==0 and CredManrw.InvoicedOn==-1 and CredManrw.InvoicedSum==0) then begin
                res = true;
              end;
            end;
          otherwise
            res = false;
        end;
      end;
    end;
  end;
  CredManDClassActiveEditField = res;
  return;
end;

global
function Boolean CredManDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record CredManVc CredManr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,CredManr);
    if (CredManr.Approved==0) then begin
      res = false;
    end;
    if (CredManr.OKFlag==0) then begin
//      res = CredManTestForAcceptance(CredManr);
    end;
  end;
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,CredManr);
    if (CredManr.Approved==0) then begin
      res = false;
    end;
    if (CredManr.OKFlag==0) then begin
//      res = CredManTestForAcceptance(CredManr);
    end;
  end;
  CredManDClassOKFlagButtonAction = res;
  RETURN;
END;

global
function Boolean CredManDClassApprovedButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record CredManVc CredManr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,CredManr);
    if (CredManr.Approved>1) then begin
      res = false;
    end;
    if (CredManr.OKFlag!=0) then begin
      res = false;
    end;
  end;
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,CredManr);
    if (CredManr.Approved>1) then begin
      res = false;
    end;
    if (CredManr.OKFlag!=0) then begin
      res = false;
    end;
  end;
  CredManDClassApprovedButtonAction = res;
  RETURN;
END;

global
function Boolean CredManDClassRateTypeButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record CredManVc CredManr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,CredManr);
    if (CredManr.Approved!=0 or CredManr.OKFlag!=0) then begin
      res = false;
    end;
  end;
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,CredManr);
    if (CredManr.Approved!=0 or CredManr.OKFlag!=0) then begin
      res = false;
    end;
  end;
  CredManDClassRateTypeButtonAction = res;
  RETURN;
END;

global
updating procedure InvoiceCredManDsm()
BEGIN
  record CredManVc CredManr;
  record CredManEventVc CredManEventr;
  record IVVc IVr;
  Integer wn,r,nwn;
  Integer normalstate;

  normalstate = 0;//Rs_normal
  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)==normalstate) then begin
    GetWindowRecord(wn,CredManr);
//    if ((CredManr.OKFlag!=0) and (CredManr.Approved!=0)) then begin
      if (UserCanAction("CredManToIV",true)) then begin
        r = RecordAction_raCredManToIV(IVr,CredManEventr,CredManr.SerNr);
        if (r!=-1) then begin
          if (MatRowCnt(IVr)!=0) then begin
            nwn = OpenWindow("IVDClass",1,0,"","",IVr);
            IVOpenPrepExists(IVr.CustCode);
          end else begin
            Beep;
          end;
        end else begin
          if (CredManEventr.SerNr>0) then begin
            nwn = OpenWindow("CredManEventDClass",1,0,"","",CredManEventr);
          end else begin
            Beep;
          end;
        end;
      end else begin
        MessageBox(1274,StringFromStringSet(3,"CredManToIV"));
      end;
//    end else begin
//      MessageBox(0,USetStr(20787));
//    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
updating procedure ReceiptCredManDsm()
BEGIN
  record CredManVc CredManr;
  record IPVc IPr;
  Integer wn,r,nwn;
  Integer normalstate;

  normalstate = 0;//Rs_normal
  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)==normalstate) then begin
    GetWindowRecord(wn,CredManr);
//    if ((CredManr.OKFlag!=0) and (CredManr.Approved!=0)) then begin
      if (UserCanAction("CredManToIV",true)) then begin
        r = RecordAction_raCredManToIP(IPr,CredManr.SerNr,CredManr.CustCode);
        if (r!=-1) then begin
//          if (MatRowCnt(IPr)!=0) then begin
            nwn = OpenWindow("CredManIPDClass",1,0,"","",IPr);
//          end else begin
//            Beep;
//          end;
        end else begin
          Beep;
        end;
      end else begin
        MessageBox(1274,StringFromStringSet(3,"CredManToIV"));
      end;
//    end else begin
//      MessageBox(0,USetStr(20787));
//    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
updating procedure ReceiptCredManLsm()
BEGIN
  record IPVc IPr;
  Integer wn,r,nwn;

  if (UserCanAction("CredManToIV",true)) then begin
    RecordNew(IPr);
    nwn = OpenWindow("CredManIPDClass",1,0,"","",IPr);
  end;
  RETURN;
END;

global
procedure OpenSubsysCredManDsm()
BEGIN
  Integer wn,nwn;
  record CredManVc CredManr;
  record IVVc IVr;
  record QTVc QTr;

  wn = CurWindow;
  GetWindowRecord(wn,CredManr);
  if (CredManr.IVNr!=0) begin
    IVr.SerNr = CredManr.IVNr;
    if (ReadFirstMain(IVr,1,true)) then begin
      nwn = OpenWindow("IVDClass",1,0,"","",IVr);
    end;
  end else begin
    QTr.SerNr = CredManr.QTNr;
    if (ReadFirstMain(QTr,1,true)) then begin
      nwn = OpenWindow("QTDClass",1,0,"","",QTr);
    end;
  end;
  RETURN;
END;

global
function Boolean CredManInfoDsm()
begin
  record RcVc RepSpec;
  record CredManVc CredManr;

  GetWindowRecord(CurWindow,CredManr);
  RepSpec.f1 = CredManr.SerNr;
  RepSpec.flags[0] = 0;
  RepSpec.flags[1] = CredManr.InstalmentType + 1;
  RepSpec.flags[2] = 1;
//  RepSpec.flags[3] = 1;
  RepSpec.Media = mtScreen;
  RepSpec.repname = "CredManInfoRn";
  RunReport(RepSpec,0);
  RETURN;
end;

