external procedure ConnectToCCTerminal();
external procedure ReprintLastCCSlip();
remote updating function LongInt IVCheckIfSaveAllowed(var record IVVc,record IVVc,LongInt,LongInt);
remote procedure IVVc_PasteRebCode(var record IVVc);
remote procedure IVCashVc_PasteRebCode(var record IVCashVc);
remote procedure RestAccVc_PasteRebCode(var record RestAccVc);
external procedure RestAccDClass_RefreshStringList(Integer,record RestAccVc);
external procedure SubCashRows_IVVc(record IVVc,Boolean,var val,var val);
external procedure DoMgrsDiscOverrideIVDsm(Integer,Integer);
external procedure WindowFieldGotoForTouchScreen(Integer,Integer,string,Boolean);
remote function Boolean IVVc_PasteSerialNr(var record IVVc,Integer,Boolean);
external updating procedure CorrectionIVsm();
remote procedure IVVc_PasteCUPNr(var record IVVc,Integer);
external updating function Boolean GSXResellerCancelAutoEnrollment(record GSXSettingsBlock,string,record IVVc,Integer,var string);
external updating function Boolean GSXResellerAutoEnrollment(record GSXSettingsBlock,string,record IVVc,Integer,var string);
external function Boolean GSXResellerWarrantyStatus(string,record IVVc,Integer,array string,integer,var record SVOSerVc,var record NotepadVc,var record NotepadVc,var string);
external function boolean GSXWarrantyStatus(string,string,date,array string,integer,var record SVOSerVc,var record NotepadVc,var record NotepadVc,var string);
external updating function boolean GSXResellerLogin(string,string,string,var string,var string);
external procedure OpenCashDrawer_IVVc(record IVVc);
external procedure TouchScreenXReading;
external procedure TouchScreenZReading;
external procedure POSMoneyInsm;
external procedure POSMoneyOutsm;
external procedure POSManagersAction(Integer,string);
external procedure RunReportOnServer(string);
external updating procedure OpenPOSSessionsm;
external updating procedure ClosePOSSessionsm;
external procedure IVCashCashupRnsm;
external procedure DisplayIVItem(record IVVc,Integer);
remote procedure IVVc_PastePayDeal(var record IVVc,string,string);
external procedure IVDClassToolIVReturn();
external updating procedure PrintIVReceiptDsm();
external function Boolean IVDClassPrint(Integer,Boolean);
external procedure IVDClassOpenCalendar();
external procedure IVDClassNewActivity();
external updating procedure CreateCreditNoteIVDsm();
external procedure TestVatMatrixIVDsmExecute(LongInt);
external updating procedure CreateMailFromIVDsm();
external procedure DoCLInFromIVD();
external procedure PrintProformaIVDsm();
external updating procedure PrintToFiscPrntIVDsm();
external procedure OpenTRFromIV();
external procedure IVInfoIVDsm();
external procedure AddInvoiceLineType(Integer,Integer ,Boolean);
external procedure RecalcIVSubtotal(var record IVVc);
external procedure HiddenLineIVDsm();
external procedure IVDClassOnWindowRecordChange(Integer);
external function Boolean IVDClassOnOverStrike(Integer,Integer);
external function Boolean IVDClassDeleteRowTest(Integer,Integer);
external procedure OpenNPTSPaymentTClass(Integer,LongInt,val,val,string);
external function Boolean TouchScreenLook();
remote updating function LongInt IVVcRecordCheck(record IVVc,record IVVc,LongInt,LongInt);
external updating procedure IVDClassTouchScreenButtonLogin();
remote function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean IVPrintReceipt(Integer,var record IVVc,var record IVVc,Integer,Boolean,Boolean,Integer,Integer);
remote function Integer CalculateLoyaltyPointsPayment_IVVc(record IVVc,val,var val,var val,var val);
external procedure CredCardIVsmExecute(string,string);
external procedure OpenDCPayTouchScreenDClass(Integer,Integer,LongInt,val,val,val,string,string,string);
external procedure OpenCCPayTouchScreenDClass(Integer,Integer,LongInt,val,val,val,string,string,string);
external procedure OpenCCPayTouchScreenDClassWithVAT(Integer,Integer,LongInt,val,val,val,string,string,string,val);
external procedure OpenChequePayTouchScreenDClass(Integer,Integer,LongInt,val,val,string,string,string);
external procedure OpenGiftVoucherSalesTouchScreenDClass(Integer,string,string);
external procedure OpenNPTSCashPaymentTClass(Integer,LongInt,val,val,string,string,string);
external procedure OpenGiftVoucherTouchScreenDClass(Integer,Integer,LongInt,val,val,string,string,string);
external procedure SetPOSWindowDisplay(string,string);
external procedure M4PadString(string,Integer,string,Boolean,var string);
remote procedure IVSumup(var record IVVc,Boolean);
external function integer GetSelectedPOSItemRowIndex(integer);
external procedure NPTSSearchItemExecute(Integer);
remote function Boolean IVVc_PasteQuantity(var record IVVc,Integer);
external procedure IVDClass_RefreshStringList(Integer,record IVVc);
external procedure IVCashDClass_RefreshStringList(Integer,record IVCashVc);
remote function Boolean IVVc_PasteArtCode(var record IVVc,Integer,var string,var string,Boolean,var Integer);
external function boolean POSButtonsForWindow(integer,var record POSButtonsVc);
external procedure ExtractObj(string,var Integer,var string);
external updating function Boolean DoXMLExport_IVVc(var record IVVc);

procedure NPTSIVOpenLClassOpenExecute(Integer wn)
begin
  record IVVc IVr;
  Integer nwn;
  
  if (ReadMarkedRecord(wn,IVr)) then begin
    CloseWindow(MotherWindow(wn));
//    CloseWindow(wn); 
    nwn = OpenWindow("IVDClass",1,0,"","",IVr);
  end;
  return;
end;

global 
procedure NPTSIVOpenLClassOpen()
begin
  Integer wn,nwn;
  
  wn = CurWindow;  
  NPTSIVOpenLClassOpenExecute(wn);
  return;
end;

global
function Boolean NPTSIVOpenLClassOnOKWindow(integer wn)
begin
  Boolean res,testf;
  string 255 WinSearchField;  

  WinSearchField = GetWindowString(wn,"WinSearchField");
  testf = true;
  switch (WindowState(wn)) begin
    case Rs_search: testf = false;
  end;
  if (testf) then begin
    NPTSIVOpenLClassOpenExecute(wn);
    res = false;
  end else begin
    res = true;
  end;
  NPTSIVOpenLClassOnOKWindow = res;
  return;
end;

function Integer HashTouchScreenPageCode(string tstr)
begin
  LongInt sum;
  Integer i,res;
  
 sum = 0;
  for (i=0;i<len(tstr);i=i+1) begin
    sum = sum + asc(Mid(tstr,i,1));
  end;
  res = BitAnd(sum,65536-1);
  HashTouchScreenPageCode = res;
  return;
end;

global
procedure IVDClassLevelTopExecute(Boolean rerunwdf)
begin
  Integer page,wn;
  
  wn = CurWindow;
  page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
  PutWindowString(wn,"touchscreenwindowpageprevious",page);  
  ActivateTile(wn,1);
  PutWindowString(wn,"touchscreenwindowpage",1)
  PutWindowString(wn,"touchscreenwindowpagestack",1);
  PutWindowString(wn,"touchscreenwindowprinterstack","*");
  if (rerunwdf) then begin
    ReRunWindowDef(wn);
  end;
  SetWindowSubset(wn,GetWindowSubset(wn));
  return;
end;

global
procedure IVDClassLevelTop()
begin
  IVDClassLevelTopExecute(true);
  return;
end;

global
procedure IVDClassLevelUp()
begin
  Integer page,wn,levelup;
  
  wn = CurWindow;
  levelup = StringToInt(GetWindowString(wn,"touchscreenwindowpageprevious"));  
  page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
  PutWindowString(wn,"touchscreenwindowpageprevious",levelup);  
  PutWindowString(wn,"touchscreenwindowpagestack",levelup);
  //touchscreenwindowprinterstack
  ActivateTile(wn,levelup);
  PutWindowString(wn,"touchscreenwindowpage",levelup);
  switch (GetWindowClass(wn)) begin
    case "IVDClass":
      ReRunWindowDef(wn);
  end;
  SetWindowSubset(wn,GetWindowSubset(wn));
  return;
end;

global
procedure IVDClassLevelDown()
begin
  /*
  Integer page,wn;
  
  wn = CurWindow;
  page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
  PutWindowString(wn,"touchscreenwindowpageprevious",page);
  page = page + 1;
  ActivateTile(wn,page);
  PutWindowString(wn,"touchscreenwindowpage",page);
  SetWindowSubset(wn,GetWindowSubset(wn));
  */
  return;
end;

global
procedure IVDClassGotoPage(string pagestr,string printer)
begin
  Integer page,wn,sline;
  string 255 stack;
  string 255 prstack;
  
  wn = CurWindow;
  page = StringToInt(pagestr);
  
  sline = SelectedListLine(wn);

  //page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
  stack = GetWindowString(wn,"touchscreenwindowpagestack");
  stack = stack & "," & page;
  PutWindowString(wn,"touchscreenwindowpagestack",stack);
  
  prstack = GetWindowString(wn,"touchscreenwindowprinterstack");
  if (printer=="") then begin
    prstack = prstack & ",*";
  end else begin
    prstack = prstack & "," & printer;
  end;
  PutWindowString(wn,"touchscreenwindowprinterstack",stack);
  
  //ActivateTile(wn,page);
  PutWindowString(wn,"touchscreenwindowpage",page);
  SetWindowSubset(wn,GetWindowSubset(wn));
  switch (GetWindowClass(wn)) begin
    case "IVDClass":
      ReRunWindowDef(wn);
  end;  
  SetSelectedListLine(wn,sline);
  return;
end;

global
function Boolean IVRowAlreadyVoided(var record IVVc IVr,Integer rownr)
begin
  Boolean res;
  row IVVc IVrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.VoidedRowNr==rownr) then begin
      res = true;
      goto LIVRowAlreadyVoided; 
    end;
  end;
LIVRowAlreadyVoided:;  
  IVRowAlreadyVoided = res;
  return;
end;

global
function Boolean IVDClassVoidRow(var record IVVc IVr,Integer rownr)
begin
  Boolean res;
  row IVVc IVrw;
  record LocalMachineBlock LMb;
  
  res = false;
  MatRowGet(IVr,rownr,IVrw);
  if (IVrw.stp==kInvoiceRowTypeNormal) then begin
    if (IVRowAlreadyVoided(IVr,rownr)==false) then begin
      BlockLoad(LMb);
      IVrw.ovst = 1;
      MatRowPut(IVr,rownr,IVrw);
      if (LMb.IncrementalReceiptPrinting!=0) then begin
        IVrw.ovst = 0;
        IVrw.stp = kInvoiceRowTypeVoid;
        IVrw.VoidedRowNr = rownr;
        IVrw.VoidedSign = CurrentUser;
        IVrw.Quant = -IVrw.Quant;
        MatRowPut(IVr,MatRowCnt(IVr),IVrw);
      end else begin
        ClearRow(IVr,IVrw,kInvoiceRowTypeUpdateMark);
        IVrw.ovst = 0;
        IVrw.stp = kInvoiceRowTypeUpdateMark;
        IVrw.VoidedRowNr = rownr;
        IVrw.VoidedSign = CurrentUser;
        MatRowPut(IVr,MatRowCnt(IVr),IVrw);
      end;
      IVSumup(IVr,true);
      res = true;
    end;
  end;
  IVDClassVoidRow = res;
  return;
end;

global
function Boolean IVDClasstouchscreenitemEFAfter(Integer wn,Integer pastewn,Boolean changedf)
begin  
  string 255 inwarning;
  record IVVc prevIVr;
  record IVVc IVr;
  row IVVc IVrw;
  string 255 location;
  Integer rownr;
  LongInt printrownr;
  record LocalMachineBlock LMb;
  Integer sernrf;
  Integer nwn;
  record RcVc RepSpec;
  boolean res;
  Integer suspended;
  
  res = true;
  
  if (changedf) then begin
    BlockLoad(LMb);
    suspended = StringToInt(GetWindowString(wn,"Suspended"));
    GetWindowRecord(wn,IVr);
    GetPrevWindowRecord(wn,prevIVr);
    if (IVr.OKFlag!=0) then begin goto LIVDClasstouchscreenitemEFAfter; end;
    if (IVr.Invalid!=0) then begin goto LIVDClasstouchscreenitemEFAfter; end;
    IVr.Suspended = suspended;
    ClearRow(IVr,IVrw,1);
    if (GetWindowString(wn,"ivcashcommandlastitemsernrf")=="true") then begin
      IVrw.SerialNr = GetWindowString(wn,"touchscreenitem");
    end else begin
      IVrw.ArtCode = GetWindowString(wn,"touchscreenitem");
    end;    
    rownr = MatRowCnt(IVr);
    MatRowPut(IVr,rownr,IVrw);
    if (GetWindowString(wn,"ivcashcommandlastitemsernrf")=="true") then begin
      if (IVVc_PasteSerialNr(IVr,rownr,TouchScreenLook)) then begin
        MatRowGet(IVr,rownr,IVrw);
        PutWindowString(wn,"touchscreenitemname",IVrw.Spec);
        PutWindowString(wn,"touchscreenitemqty",IVrw.Quant);
        PutWindowString(wn,"touchscreenitemprice",IVrw.Price);
        PutWindowRecord(wn,IVr);    
        IVDClass_RefreshStringList(wn,IVr);
        DisplayIVItem(IVr,rownr);
        PutWindowString(wn,"ivcashcommandlastitemsernrf","");
      end;
    end else begin
      if (IVVc_PasteArtCode(IVr,rownr,inwarning,inwarning,TouchScreenLook,sernrf)) then begin
        if (nonblank(inwarning)) then begin
          MessageBox(0,inwarning);
        end;
        MatRowGet(IVr,rownr,IVrw);
        IVrw.Quant = 1;
        MatRowPut(IVr,rownr,IVrw);
        IVVc_PasteQuantity(IVr,rownr);
        MatRowGet(IVr,rownr,IVrw);
        PutWindowString(wn,"touchscreenitemname",IVrw.Spec);
        PutWindowString(wn,"touchscreenitemqty",IVrw.Quant);
        PutWindowString(wn,"touchscreenitemprice",IVrw.Price);
        IVSumup(IVr,true);
  //      IVSumupSoftEditFields(wn,IVr);
        PutWindowRecord(wn,IVr);
        IVDClass_RefreshStringList(wn,IVr);
        DisplayIVItem(IVr,rownr);
  /*
        if (LMb.IncrementalReceiptPrinting!=0) then begin
          printrownr = StringToLongInt(GetWindowString(wn,"touchscreenitemlastrownr"));
          if (printrownr>=0) then begin
            if (IVCashPrintReceipt(wn,IVCashr,prevIVCashr,printrownr,false,false,LMb.IncrementalReceiptPrinting,WindowState(wn))) then begin
            end;
          end;
        end;
        PutWindowString(wn,"touchscreenitemlastrownr",rownr);
  */
        PutWindowString(wn,"ivcashcommandlastitemsernrf","");
        if (sernrf==1) or (sernrf==2)  then begin
          PutWindowString(wn,"ivcashcommandlastitemsernrf","true");
          RepSpec.long1 = rownr;
          res = false;
          if (pastewn>0) then begin
            // CloseWindow(pastewn);
            // nwn = 
            ReOpenWindow(pastewn,"SerialNoScanNPTSSClass",0,wn,"","",RepSpec);
          end else begin
            nwn = OpenWindow("SerialNoScanNPTSSClass",0,wn,"","",RepSpec);
          end;
          goto LIVDClasstouchscreenitemEFAfter;
        end;
      end;
    end;
  end;
  SetWindowNameArg(wn,IVrw.ArtCode & ":" & location);
  if (TouchScreenLook) begin
    //WindowFieldGoto(wn,IVr,-1,"ivcashcommand",false);
    WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",false); 
  end;
LIVDClasstouchscreenitemEFAfter:;  
  IVDClasstouchscreenitemEFAfter = true;
  return;
end;

global
procedure IVDClassTouchScreenLoyaltyCard()
begin
  Integer wn,mwn,line,rownr;
  record RcVc RepSpec;
  record IVVc IVr;
  string 255 tstr;
  Boolean testf;
  
  mwn = CurWindow;
  RecordClear(RepSpec);
  GetWindowRecord(mwn,IVr);
  testf = true;
  if (IVr.OKFlag!=0) then begin testf = false; end;
  if (IVr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    wn = OpenWindow("LoyalCardNPTSSClass",0,mwn,"","",RepSpec);
//    WindowFieldGoto(wn,RepSpec,-1,"f1",false);    
  end;
  return;
end;

global
procedure IVDClassTouchScreenReprint()
begin
  Integer wn;
  record IVVc IVr;
  record IVVc prevIVr;
  
  wn = CurWindow;
  if (UserCanAction("AllowNPTSReprint",UseAppStoreEnabler==true)==false) then begin
    POSManagersAction(wn,"Reprint");
    goto LIVDClassTouchScreenReprint;
  end;
  GetWindowRecord(wn,IVr);
  if (IVr.OKFlag!=0) then begin
    GetPrevWindowRecord(wn,prevIVr);
    IVPrintReceipt(wn,IVr,prevIVr,-1,false,false,0,WindowState(wn));
  end;
  OverrideLogout;
LIVDClassTouchScreenReprint:;
  return;  
end;

global 
procedure IVDClassTouchScreenOpenInvoices()
begin
  Integer wn,nwn;
  record IVVc IVr;
  record UserVc Userr;
  string 255 subset;

  Userr.Code = CurrentUser;
  ReadFirstMain(Userr,1,true);
  switch (Userr.limitedAccess) begin
    case 1: subset = Userr.Code;
    case 2: subset = Userr.SalesGroup;
  end;
  wn = CurWindow;
  nwn = OpenWindow("NPTSIVOpenLClass",1,wn,subset,"",IVr);  
  return;
end;

global 
procedure IVDClassTouchScreenXReading()
begin
  TouchScreenXReading;
  return;
end;

global 
procedure IVDClassTouchScreenZReading()
begin
  TouchScreenZReading;
  return;
end;

global 
procedure IVDClassTouchScreenAllInvoices()
begin
  Integer wn,nwn;
  record IVVc IVr;
  record UserVc Userr;
  string 255 subset;

  Userr.Code = CurrentUser;
  ReadFirstMain(Userr,1,true);
  switch (Userr.limitedAccess) begin
    case 1: subset = Userr.Code;
    case 2: subset = Userr.SalesGroup;
  end;
  wn = CurWindow;
  nwn = OpenWindow("IVLClass",1,wn,subset,"",IVr);  
  return;
end;

global
procedure IVDClassTouchScreenPasteButtonDo(integer butnr)
begin
  Integer i,rwcnt,wn,matrowix;
  record POSButtonsVc POSBr;
  row POSButtonsVc POSBrw;
  record IVVc prevIVr;
  record IVVc IVr;
  row IVVc IVrw;
  Boolean found;
  record RahaxiBlock Rahaxib;
  integer nwn;
  string 255 tag;
  record RcVc RepSpec;
  Integer line,rownr;
  string 255 tstr,t2;
  val ccval;
  val t,t1;
  transaction record RcVc gNPTSRepSpec;

  wn = CurWindow;
  DeselectWIndow(wn,true);
  GetWindowRecord(wn,IVr);
  
  found = POSButtonsForWindow(wn,POSBr);
  if (found) then begin
    rwcnt = MatRowCnt(POSBr);
    
    if (butnr>rwcnt) then begin
      goto LIVDClassTouchScreenPasteButtonDo;
    end;
    
    MatRowGet(POSBr,butnr-1,POSBrw);
    switch (POSBrw.ButtonType) begin
      case kPOSButtonTypeGotoPage:
        IVDClassGotoPage(POSBrw.Code,POSBrw.PrintGroupCode);
        goto LIVDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypOpenInvoices:
        IVDClassTouchScreenOpenInvoices;
        goto LIVDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeAllInvoices:
        IVDClassTouchScreenAllInvoices;
        goto LIVDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeReprintReceipt:
        IVDClassTouchScreenReprint;
        goto LIVDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeReprintLastCCSlip:
        ReprintLastCCSlip;
        goto LIVDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeConnectToCCTerminal:
        ConnectToCCTerminal;
        goto LIVDClassTouchScreenPasteButtonDo;
    end;
  end;
  
  switch (WindowState(wn)) begin
    case Rs_update:
      GetPrevWindowRecord(wn,prevIVr);
      if (prevIVr.OKFlag!=0) then begin
        goto LIVDClassTouchScreenPasteButtonDo;
      end;
      if (prevIVr.Invalid!=0) then begin 
        goto LIVDClassTouchScreenPasteButtonDo; 
      end;
    otherwise
      if (IVr.OKFlag!=0) then begin
        goto LIVDClassTouchScreenPasteButtonDo;
      end;
      if (IVr.Invalid!=0) then begin 
        goto LIVDClassTouchScreenPasteButtonDo; 
      end;
  end;
  if (found) then begin
    rwcnt = MatRowCnt(POSBr);
    
    if (butnr>rwcnt) then begin
      goto LIVDClassTouchScreenPasteButtonDo;
    end;
    
    MatRowGet(POSBr,butnr-1,POSBrw);
    switch (POSBrw.ButtonType) begin
      case kPOSButtonTypeItem:
        PutWindowString(wn,"touchscreenitem",POSBrw.Code);
        PutWindowString(wn,"touchscreenitemqty",1.00);
        DeselectWindow(wn,false);
        IVDClasstouchscreenitemEFAfter(wn,0,true);
        // WindowFieldGoto(wn,IVr,-1,"touchscreenitem",true);
        goto LIVDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeGotoPage:
        IVDClassGotoPage(POSBrw.Code,POSBrw.PrintGroupCode);
        goto LIVDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypePayment:
        BlockLoad(Rahaxib);
        switch (Rahaxib.TerminalType) begin
          case kLocalCCTerminalNone:
            // OpenCashPayTouchScreenDClass(wn,-1,IVr.SerNr,IVr.RetnValue,IVr.Sum4-IVr.TendValue,IVr.CurncyCode,POSBrw.Code,POSBrw.Label);
            OpenNPTSPaymentTClass(wn,IVr.SerNr,IVr.RetnValue,IVr.Sum4,IVr.CurncyCode);
        end;
        goto LIVDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeCashPayment:
        OpenNPTSCashPaymentTClass(wn,IVr.SerNr,IVr.RetnValue,IVr.Sum4,IVr.CurncyCode,POSBrw.Code,POSBrw.Label);
        goto LIVDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeGiftVoucherPayment:
//        OpenGiftVoucherTouchScreenDClass(wn,-1,IVr.SerNr,IVr.RetnValue,IVr.Sum4-IVr.TendValue,IVr.CurncyCode,POSBrw.Code,POSBrw.Label);
        OpenGiftVoucherTouchScreenDClass(wn,-1,IVr.SerNr,IVr.RetnValue,blankval,IVr.CurncyCode,POSBrw.Code,POSBrw.Label);
        goto LIVDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeGiftVoucherSales:
        OpenGiftVoucherSalesTouchScreenDClass(wn,POSBrw.Code,POSBrw.Label);
        goto LIVDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeChequePayment:
        OpenChequePayTouchScreenDClass(wn,-1,IVr.SerNr,IVr.RetnValue,blankval,IVr.CurncyCode,POSBrw.Code,POSBrw.Label);
        goto LIVDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeCreditCardPayment:
        BlockLoad(Rahaxib);
        switch (Rahaxib.TerminalType) begin
          case kLocalCCTerminalNone:
            OpenCCPayTouchScreenDClass(wn,-1,IVr.SerNr,IVr.Sum4,IVr.RetnValue,blankval,IVr.CurncyCode,POSBrw.Code,POSBrw.Label);
          case kLocalCCTerminalYomaniBanksys:
            CredCardIVsmExecute(POSBrw.Code,POSBrw.Label);
          case kLocalCCTerminalBambora:
            OpenCCPayTouchScreenDClassWithVAT(wn,-1,IVr.SerNr,IVr.Sum4,IVr.RetValue,IVr.Sum4,IVr.CurncyCode,POSBrw.Code,POSBrw.Label,IVr.Sum3);
          case kLocalCCTerminalPCEFTPOS:
            //fix for EFTPOS , but I guess it should for all types of CC payemnet //nk
            SubCashRows_IVVc(IVr,true,t,t1);
            /*
            rwcnt = MatRowCnt(IVr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(IVr,i,IVrw);
              switch (IVrw.stp) begin
                case kInvoiceRowTypeCreditCardPayment:
                  ccval = ccval + IVrw.Sum;
              end;
            end;
            if (ccval==0) then begin
              ccval = IVr.Sum4;
            end;
            */
//            OpenCCPayTouchScreenDClass(wn,-1,IVr.SerNr,ccval,IVr.RetnValue,IVr.Sum4,IVr.CurncyCode,POSBrw.Code,POSBrw.Label);
            OpenCCPayTouchScreenDClass(wn,-1,IVr.SerNr,t,-t,IVr.Sum4,IVr.CurncyCode,POSBrw.Code,POSBrw.Label);
          case kLocalCCTerminalIngenico6550:
            CredCardIVsmExecute(POSBrw.Code,POSBrw.Label);
          otherwise
            CredCardIVsmExecute("","");
        end;
        goto LIVDClassTouchScreenPasteButtonDo;
/*
      case kPOSButtonTypeCreditCardPaymentReversal:
        BlockLoad(Rahaxib);
        switch (Rahaxib.TerminalType) begin
          case kLocalCCTerminalNone:
            // OpenCCPayReversalTouchScreenDClass(wn,-1,IVr.SerNr,IVr.RetnValue,IVr.Sum4-IVr.TendValue,IVr.CurncyCode,POSBrw.Code,POSBrw.Label);
          case kLocalCCTerminalYomaniBanksys:
            CredCardReversalPOSPIVsmExecute(POSBrw.Code,POSBrw.Label);
          otherwise
            // CredCardReversalPOSPIVsm;
        end;
        goto LIVDClassTouchScreenPasteButtonDo;
*/
      case kPOSButtonTypeDebitCardPayment:
        BlockLoad(Rahaxib);
        switch (Rahaxib.TerminalType) begin
          case kLocalCCTerminalNone:
            OpenDCPayTouchScreenDClass(wn,-1,IVr.SerNr,IVr.Sum4,IVr.RetnValue,blankval,IVr.CurncyCode,POSBrw.Code,POSBrw.Label);
        end;
        goto LIVDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypePOSCommand:
/*
        if (UserCanAction("AllowNPTSIVRowsVoid",UseAppStoreEnabler==true)==false) then begin
          POSManagersAction(wn,"VoidRow");
          goto LIVDClassTouchScreenPasteButtonDo;
        end;
*/
        switch (SetFromString(323,POSBrw.Code)) begin
          case kPOSCommandsTypeVoidRow:
            nwn = OpenWindow("VoidNPTSSClass",0,wn,"","",RepSpec);  
        end;
        goto LIVDClassTouchScreenPasteButtonDo;
/*
      case kPOSButtonTypeVolumetricBarCodeScan:
        ReportDefaults(RepSpec,"VolBarCodeScanVClass");
        RepSpec.UsedOnly = wn;
        nwn = OpenWindow("VolBarcodeScanVClass",0,wn,"","",RepSpec);
        WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
        goto LIVDClassTouchScreenPasteButtonDo;
*/
      case kPOSButtonTypeCustomerSearch:
        ReportDefaults(RepSpec,"SearchCURClass");
        RepSpec.UsedOnly = wn;
        RepSpec.repname = "SearchCuRn";
        RepSpec.Media = mtScreen;
        RepSpec.flags[0] = 4;
        RepSpec.f12 = GetWindowFileName(wn);
        RecordCopy(gNPTSRepSpec,RepSpec);
        nwn = OpenWindow("NPTSSearchCURClass",0,wn,"","",gNPTSRepSpec);
        gNPTSRepSpec.UsedOnly = wn;
        gNPTSRepSpec.flags[0] = 4;
        PutWindowRecord(nwn,gNPTSRepSpec);
        WindowFieldGoto(nwn,gNPTSRepSpec,-1,"f1",true);
        goto LIVDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeSelectSalesman:
        // nwn = OpenWindow("UserNPTSSClass",0,wn,"","",RepSpec);
        WindowFieldGoto(wn,IVr,-1,"SalesMan",true);
        nwn = OpenWindow("EnterSalesmanNPTSOClass",1,wn,"","",RepSpec);
        goto LIVDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeLoyaltyCard:
        IVDClassTouchScreenLoyaltyCard;
        goto LIVDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeItemSearch:
        NPTSSearchItemExecute(wn);
        goto LIVDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeItemStatus:
        if (SelectedListLine(wn)<>-1) then begin
          matrowix = GetSelectedPOSItemRowIndex(wn);
          MatRowGet(IVr,matrowix,IVrw);
          RepSpec.UsedOnly = wn;
          RepSpec.f1 = IVrw.ArtCode;
          RepSpec.repname = "INInfoRn";
          RepSpec.Media = mtScreen;
          RunReport(RepSpec,0);
        end;
        goto LIVDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeOpenCashDrawer:
        OpenCashDrawer_IVVc(IVr);
        goto LIVDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeRunReportOnServer:
        RunReportOnServer(POSBrw.Code);
        goto LIVDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeCustomerSearchFiltered:
        ReportDefaults(RepSpec,"SearchCURClass");
        RepSpec.UsedOnly = wn;
        RepSpec.repname = "SearchCuRn";
        RepSpec.Media = mtScreen;
        RepSpec.flags[0] = 4;
        RepSpec.f12 = GetWindowFileName(wn);
        nwn = OpenWindow("NPTSSearchBFCURClass",0,wn,"","",RepSpec);
        WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
        goto LIVDClassTouchScreenPasteButtonDo;
    end;
  end;
LIVDClassTouchScreenPasteButtonDo:;
  return;
end;

global
procedure IVDClassTouchScreenPasteButton()
begin
  Integer butnr;
  string 255 tagstr;
  
  tagstr = PushButtonTag;
  butnr = StringToInt(tagstr);
  IVDClassTouchScreenPasteButtonDo(butnr)
end;

global
procedure IVDClassTouchScreenStackButtonExecute(string tag)
begin
  integer i,rwcnt,wn;
  string 60 ostr;
  string 60 prstr;
  Integer pos,prpos;
  string 255 stack;
  string 255 prstack;
  array string 255 stackarr;
  array string 255 prstackarr;
  longint stackend,sline;
  
  wn = CurWindow;
  
  //StopAlert("IVDClassTouchScreenStackButton, tag: " & tag);
  
  //page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
  stack = GetWindowString(wn,"touchscreenwindowpagestack");
  prstack = GetWindowString(wn,"touchscreenwindowprinterstack");
  
  stackend = 0;
  pos = 0;
  prpos = 0;
  ExtractObj(stack,pos,ostr);
  ExtractObj(prstack,prpos,prstr);
  
  while (nonblank(ostr)) begin
    stackarr[stackend] = ostr;
    prstackarr[stackend] = prstr;
    stackend = stackend + 1;
    ExtractObj(stack,pos,ostr);
    ExtractObj(prstack,prpos,prstr);
  end;
  
  stackend = stackend - 1;
  
  while ((stackend>0) and (stackarr[stackend]<>tag)) begin
    stackend = stackend - 1;
  end;
  
  stack = stackarr[0];
  prstack = prstackarr[0];
  
  for (i = 1; i<=stackend; i = i + 1) begin
    stack = stack & "," & stackarr[i];
    prstack = prstack & "," & prstackarr[i];
  end;
  
  sline = SelectedListLine(wn);
  
  PutWindowString(wn,"touchscreenwindowpagestack",stack);
  PutWindowString(wn,"touchscreenwindowprinterstack",prstack);
  
  PutWindowString(wn,"touchscreenwindowpage",stackarr[stackend]);
  SetWindowSubset(wn,GetWindowSubset(wn));
  ReRunWindowDef(wn);
  
  SetSelectedListLine(wn,sline);
  
  return;
end;

global
procedure IVDClassTouchScreenStackButton()
begin
  string 255 tag;

  tag = PushButtonTag;
  IVDClassTouchScreenStackButtonExecute(tag);
  return;
end;

global
procedure IVDClassPageTop()
begin
  IVDClassTouchScreenStackButtonExecute("1");
  return;
end;

global
procedure IVDClassTouchScreenAmendLine()
begin
  Integer wn,mwn,line,rownr;
  record RcVc RepSpec;
  record IVVc IVr;
  row IVVc IVrw;
  string 255 tstr,tagstr;
  Boolean testf;
  
  mwn = CurWindow;
  line = SelectedListLine(mwn);

  if (line>=0) then begin
/*
    if (UserCanAction("AllowAmendLine",UseAppStoreEnabler==true)==false) then begin
      POSManagersAction(mwn,"AmendLine");
      goto LIVDClassTouchScreenAmendLine;
    end;
*/
    RecordClear(RepSpec);
    tagstr = GetListTag(mwn,line);
    rownr = StringToInt(tagstr);
    if (rownr>=0) then begin
      GetWindowRecord(mwn,IVr);
      MatRowGet(IVr,rownr,IVrw);
      testf = true;
      if (IVr.OKFlag!=0) then begin testf = false; end;
      if (IVr.Invalid!=0) then begin testf = false; end;
//      if (IVrw.stp!=kInvoiceRowTypeNormal) and (IVrw.stp!=kInvoiceRowTypeHeader) then begin testf = false; end;
      if (IVrw.stp!=kInvoiceRowTypeNormal) and (IVrw.stp!=kInvoiceRowTypeDownpayment) then begin testf = false; end;
      if (IVrw.ovst!=0) then begin testf = false; end;
      if (testf) then begin
        RepSpec.AccStr = IVrw.ArtCode;
        RepSpec.f1 = IVrw.Spec;
        RepSpec.vals0 = IVrw.Quant;
        RepSpec.vals1 = IVrw.Price;
        RepSpec.vals2 = IVrw.vRebate;
        RepSpec.vals3 = IVrw.Sum;
        RepSpec.vals4 = IVrw.PriceFactor;
        RepSpec.CurncyCode = IVrw.CurncyCode;
        RepSpec.FirstAcc = IVrw.PayMode;
        RepSpec.long1 = rownr;
        RepSpec.f2 = IVrw.VATCode;
        RepSpec.f3 = IVrw.Location;
        RepSpec.long2 = IVrw.stp;
        wn = OpenWindow("AmendLineNPTSSClass",0,mwn,"","",RepSpec);
        PutWindowString(wn,"BasePrice",IVrw.BasePrice);  
        WindowFieldGoto(wn,RepSpec,-1,"vals0",false);    
      end;
    end;
  end;
LIVDClassTouchScreenAmendLine:;  
  return;
end;

global
updating procedure IVDClassTouchScreenVoidRow()
begin
  Integer wn,line,rownr;
  record IVVc IVr;
  record IVVc prevIVr;
  row IVVc IVrw;
  string 255 tstr,tag,t2;
  record LocalMachineBlock LMb;
  Integer wnst;
  LongInt printrownr;

  wn = CurWindow;
  line = SelectedListLine(wn);
  if (line>=0) then begin
/*
    if (UserCanAction("AllowNPTSIVRowsVoid",UseAppStoreEnabler==true)==false) then begin
      POSManagersAction(wn,"VoidRow");
      goto LIVDClassTouchScreenVoidRow;
    end;
*/
    tag = GetListTag(wn,line);
    rownr = StringToInt(tag);
    if (rownr>=0) then begin
      DeselectWIndow(wn,true);
      GetWindowRecord(wn,IVr);
      wnst = WindowState(wn);
      if (IVr.OKFlag!=0) then begin goto LIVDClassTouchScreenVoidRow; end;
      if (IVr.Invalid!=0) then begin goto LIVDClassTouchScreenVoidRow; end;
      if (IVDClassVoidRow(IVr,rownr)) then begin
        BlockLoad(LMb);
        PutWindowRecord(wn,IVr);    
        MatRowGet(IVr,rownr,IVrw);
        IVDClass_RefreshStringList(wn,IVr);
        tstr = ValToString(-IVrw.Quant,M4UVal,ThousandSeparator,DecimalSeparator,0) & "*" & ValToString(IVrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0);
        M4PadString(ValToString(IVrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),30-len(tstr)," ",true,t2);
        tstr = tstr & t2;  
        SetPOSWindowDisplay(IVrw.ArtCode & " " & IVrw.Spec,tstr);
        DeselectWindow(wn,false);
        if (WindowDoOK(wn,0)) then begin
/*
          GetWindowRecord(wn,IVr);
          printrownr = StringToLongInt(GetWindowString(wn,"touchscreenitemlastrownr"));
          if (printrownr>=0) then begin
            GetPrevWindowRecord(wn,prevIVr);
            if (IVPrintReceipt(wn,IVr,prevIVr,printrownr,false,false,LMb.IncrementalReceiptPrinting,wnst)) then begin
            end;
          end;
          PutWindowString(wn,"touchscreenitemlastrownr",MatRowCnt(IVr)-1);
*/
          //WindowFieldGoto(wn,IVr,-1,"ivcashcommand",false);
          WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",false); 
        end;
        OverrideLogout;
      end;
    end;
  end;
LIVDClassTouchScreenVoidRow:;  
  return;
end;

global
updating procedure IVDClassTouchScreenDeleteItem()
begin
  Integer wn,matrowix;
  record IVVc IVr;

  wn = CurWindow;
  if (SelectedListLine(wn)>=0) then begin
/*
    if (UserCanAction("AllowIVTSRowsDelete",UseAppStoreEnabler==true)==false) then begin
      POSManagersAction(wn,"DeleteItem");
      goto LIVDClassTouchScreenDeleteItem;
    end;
*/
    DeselectWIndow(wn,true);
    GetWindowRecord(wn,IVr);
    if (IVr.OKFlag!=0) then begin goto LIVDClassTouchScreenDeleteItem; end;
    if (IVr.Invalid!=0) then begin goto LIVDClassTouchScreenDeleteItem; end;

    matrowix = GetSelectedPOSItemRowIndex(wn);
    if (matrowix>=0) then begin
      if (IVDClassDeleteRowTest(wn,matrowix)) then begin
        IVDClassOnOverStrike(wn,matrowix);
        GetWindowRecord(wn,IVr);
  //      matrowix = GetSelectedPOSItemRowIndex(wn); // Why again? On windows, the selection is cleared between the calls to this function, can't figure out why.
        MatRowDelete(IVr,matrowix);
        IVSumup(IVr,true);
        PutWindowRecord(wn,IVr);

        if (GuiType==kGuiCocoa) then begin
          IVDClassOnWindowRecordChange(wn);
        end else begin
          IVDClass_RefreshStringList(wn,IVr);
        end;
        WindowDoOK(wn,0);
      end;
      //WindowFieldGoto(wn,IVr,-1,"ivcashcommand",false);
      WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",false); 
      SetPOSWindowDisplay("","");
      OverrideLogout;
    end;
  end;
LIVDClassTouchScreenDeleteItem:;  
  return;
end;

global
procedure IVDClassTouchScreenLoyaltyPointsBonusExecute()
begin
  Integer wn,mwn,line,rownr;
  record RcVc RepSpec;
  record IVVc IVr;
  string 255 tstr;
  Boolean testf;
  
  mwn = CurWindow;
  /*
  if (UserCanAction("AllowIVTSLoyaltyPointsBonus",UseAppStoreEnabler==true)==false) then begin
    POSManagersAction(mwn,"LoyaltyPointsBonus");
    goto LIVDClassTouchScreenLoyaltyPointsBonusExecute;
  end;
  */
  mwn = CurWindow;
  RecordClear(RepSpec);
  GetWindowRecord(mwn,IVr);
  testf = true;
  if (IVr.OKFlag!=0) then begin testf = false; end;
  if (IVr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    wn = OpenWindow("LoyaltyPointsBonusNPTSSClass",0,mwn,"","",RepSpec);
//    WindowFieldGoto(wn,RepSpec,-1,"vals0",false);    
  end;
//  OverrideLogout;
LIVDClassTouchScreenLoyaltyPointsBonusExecute:;  
  return;
end;

global
procedure IVDClassTouchScreenLoyaltyPointsPaymentExecute(string paymode)
begin
  Integer wn,mwn,line,rownr;
  record RcVc RepSpec;
  record IVVc IVr;
  row IVVc IVrw;
  Integer i,rwcnt;
  string 255 tstr;
  Boolean testf;
  val PointsBalance,totsumb1;
  Integer err;

  mwn = CurWindow;
  GetWindowRecord(mwn,IVr);
  if (blank(IVr.LoyaltyCardNr)) then begin
    MessageBox(26439,"");
    goto LIVDClassTouchScreenLoyaltyPointsPaymentExecute;
  end;
/*
  if (UserCanAction("AllowIVTSLoyaltyPayment",UseAppStoreEnabler==true)==false) then begin
    POSManagersAction(mwn,"LoyaltyPayment");
    goto LIVDClassTouchScreenLoyaltyPointsPaymentExecute;
  end;
*/
  RecordClear(RepSpec);
  testf = true;
  if (IVr.OKFlag!=0) then begin testf = false; end;
  if (IVr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    err = CalculateLoyaltyPointsPayment_IVVc(IVr,blankval,PointsBalance,RepSpec.vals0,totsumb1);
    if (err!=0) then begin
      MessageBox(err,"");
      goto LIVDClassTouchScreenLoyaltyPointsPaymentExecute;
    end;
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      switch (IVrw.stp) begin
        case kInvoiceRowTypeLoyaltyPointsPayment:
          PointsBalance = PointsBalance - IVrw.Points;
      end;
    end;
    RepSpec.FirstAcc = paymode;
    RepSpec.vals1 = PointsBalance;
    wn = OpenWindow("LoyaltyPaymentNPTSSClass",0,mwn,"","",RepSpec);
    WindowFieldGoto(wn,RepSpec,-1,"vals0",false);    
  end;
LIVDClassTouchScreenLoyaltyPointsPaymentExecute:;  
  return;
end;

global
updating procedure IVDClassTouchScreenLoyaltyPointsPayment()
begin
  integer i,wn,rwcnt;
  Boolean found;
  record POSButtonsVc POSBr;
  row POSButtonsVc POSBrw;

  wn = CurWindow;
  found = POSButtonsForWindow(wn,POSBr);

  if (found) then begin
    rwcnt = MatRowCnt(POSBr);
    for (i = 0; i<rwcnt; i = i + 1) begin
      MatRowGet(POSBr,i,POSBrw);
      switch (POSBrw.ButtonType) begin
        case kPOSButtonTypeLoyaltyPointsPayment:
          IVDClassTouchScreenLoyaltyPointsPaymentExecute(POSBrw.Code);
          i = rwcnt;
      end;
    end;
  end;
  return;
end;

global 
updating procedure IVDClassTouchScreenSaveInvoice()
begin
  Integer wn,nwn;
  record IVVc IVr;
  record IVVc prevIVr;
  record LocalMachineBlock LMb;
  Integer wnst;
  LongInt printrownr;

  wn = CurWindow;
  wnst = WindowState(wn);
  GetWindowRecord(wn,IVr);
  if (MatRowCnt(IVr)==0) then begin
    goto LIVDClassTouchScreenSaveInvoice;
  end;
  GetPrevWindowRecord(wn,prevIVr);
  BlockLoad(LMb);
  if (LMb.IncrementalReceiptPrinting!=0) then begin
    GetPrevWindowRecord(wn,prevIVr);      
    printrownr = StringToLongInt(GetWindowString(wn,"touchscreenitemlastrownr"));
    if (printrownr>=0) then begin
      IVPrintReceipt(wn,IVr,prevIVr,printrownr,false,false,LMb.IncrementalReceiptPrinting,wnst);
    end;
  end;
  IVr.Suspended = 1;
  PutWindowRecord(wn,IVr);
  if (WindowDoOK(wn,0)) then begin
    GetWindowRecord(wn,IVr);
    IVPrintReceipt(wn,IVr,prevIVr,-1,false,false,LMb.IncrementalReceiptPrinting,wnst);
    WindowDoNew(wn,0);
    PutWindowString(wn,"touchscreenitemlastrownr",-1);
  end;
LIVDClassTouchScreenSaveInvoice:;  
  return;
end;

global
procedure IVDClassTouchScreenLookupSerialNr()
begin
  Integer nwn,mwn,line,rownr;
  record RcVc RepSpec;
  record IVVc IVr;
  row IVVc IVrw;
  string 255 tagstr;
  Boolean testf,ivcashcommandlastitemsernrf;
  record INVc INr;
  
  mwn = CurWindow;
  ivcashcommandlastitemsernrf = StringToInt(GetWindowString(mwn,"ivcashcommandlastitemsernrf"))!=0;

  RecordClear(RepSpec);
  line = SelectedListLine(mwn);

  if (line>=0) then begin
    tagstr = GetListTag(mwn,line);
    rownr = StringToInt(tagstr);
    if (rownr>=0) then begin
      GetWindowRecord(mwn,IVr);
      MatRowGet(IVr,rownr,IVrw);
      testf = true;
      if (IVr.OKFlag!=0) then begin testf = false; end;
      if (IVr.Invalid!=0) then begin testf = false; end;
      if (IVrw.stp!=kInvoiceRowTypeNormal) and (IVrw.stp!=kInvoiceRowTypeStructuredItemComponent) then begin testf = false; end;
      if (IVrw.ovst!=0) then begin testf = false; end;
      if (testf) then begin
        if (ivcashcommandlastitemsernrf==false) then begin
          ReadFirstItem(IVrw.ArtCode,INr,true,false);
          ivcashcommandlastitemsernrf = INr.SerNrf!=0;
        end;
        if (ivcashcommandlastitemsernrf==false) then begin
          goto LIVDClassTouchScreenLookupSerialNr;
        end;
        PutWindowString(mwn,"ivcashcommandlastitemsernrf","true");
        RepSpec.long1 = rownr;
        nwn = OpenWindow("SerialNoScanNPTSSClass",0,mwn,"","",RepSpec);

//        nwn = OpenWindow("SerialNrSClass",1,mwn,"","",RepSpec);
//        PutWindowString(mwn,"ivcashcommand","");  
      end;
    end;
  end;
LIVDClassTouchScreenLookupSerialNr:;  
  return;
end;

global
updating procedure IVDClassTouchScreenFinishButtonRun(Boolean newf,Integer awnst)
begin
  Integer wn;
  LongInt printrownr,err;
  record IVVc IVr;
  record IVVc prevIVr;
  Boolean save_recordf,new_recordf;
  record LocalMachineBlock LMb;
  Integer wnst;
  val prevRetValue;
  string 255 tstr;
  record CashierDefBlock CDb;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  string 255 fromwclass;

  err = 0;
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,IVr);
  if (IVr.Invalid!=0) then begin 
    goto LIVDClassTouchScreenFinishButtonRun; 
  end;
  if (IVr.OKFlag!=0) then begin 
    goto LIVDClassTouchScreenFinishButtonRun; 
  end;
  BlockLoad(LMb);
  BlockLoad(CDb); 
  wnst = awnst;
  if (wnst==-1) then begin
    wnst = WindowState(wn);
  end;
  GetPrevWindowRecord(wn,prevIVr);
  if (RecordValid(prevIVr)==false) or (prevIVr.SerNr<=0) then begin
    RecordCopy(prevIVr,IVr);
  end;
  fromwclass = GetWindowString(wn,"touchscreenwindowFrom");
  printrownr = StringToLongInt(GetWindowString(wn,"touchscreenitemlastrownr"));
  if (printrownr>=0) then begin
    IVPrintReceipt(wn,IVr,prevIVr,printrownr,false,false,LMb.IncrementalReceiptPrinting,wnst);
  end;
  
  IVSumup(IVr,true);              
//  IVr.OKFlag = 1;
  err = IVCheckIfSaveAllowed(IVr,prevIVr,wnst,3);
//  SetRecordCheckVc("IVVc");
//  err = IVVcRecordCheck(IVr,prevIVr,wnst,3);
//carefull withthis one
//if u comenting out IVVcRecordCheck pls make code validatign Invoice
  if (err==0) then begin
    if (CDb.RequireReturnCustomer!=0) then begin
      if (IVr.OKFlag!=0) and (IVr.Sum4<0) then begin
        if (IVr.CustCode==CDb.DefCustCode) or (IVr.CustCode==LMb.DefCustCode) then begin
          MessageBox(21351,"");
          err = 21351;
        end;
      end;
    end;
  end;
  if (err==0 or RECORDCHECKLASTERRORNO==31412) then begin
    if (HasLocalization("HRV") and blank(IVr.RefStr)) then begin
      if (DoXMLExport_IVVc(IVr)==false) then begin
        PutWindowRecord(wn,IVr);
        OpenWindow("EnterRefStrDClass",0,wn,"","",RepSpec);
        err = 1;
      end;
    end;
  end;
  if (err==0) then begin
    if (IVPrintReceipt(wn,IVr,prevIVr,-1,true,true,LMb.IncrementalReceiptPrinting,wnst)==false) then begin
//      MessageBox(22165,"");
      err = 1;
      new_recordf = false;
    end;
  end;
  if (err==0) then begin
    IVr.OKFlag = 1;
    PutWindowRecord(wn,IVr);
    save_recordf = true;      
    new_recordf = newf;
    if (save_recordf) then begin
      if (WindowDoOK(wn,0)==false) then begin 
        IVr.OKFlag = 0;
        PutWindowRecord(wn,IVr);
        new_recordf = false;
      end;
    end;
  end;
  IVDClass_RefreshStringList(wn,IVr);
  prevRetValue = IVr.RetnValue;
  if (new_recordf) then begin
//    sleep(5);
    switch (fromwclass) begin
      case "NPTSIVCashDClass":
        CloseWindow(wn);

        wn = OpenWindow("NPTSIVCashDClass",1,0,"","",IVCashr);
        if (wn>0) then begin
          GetWindowRecord(wn,IVCashr);
          IVCashr.RetValue = prevRetValue;
          PutWindowString(wn,"touchscreenwindowpage",1);
          PutWindowString(wn,"touchscreenwindowpagestack","1");
          PutWindowString(wn,"touchscreenwindowprinterstack","*");
          PutWindowString(wn,"CustomerDisplayData_Line1","");
          PutWindowString(wn,"CustomerDisplayData_Line2","");    
          PutWindowString(wn,"touchscreenitemlastrownr",-1);
          tstr = USetStr(24172) & "  ";
          tstr = tstr & ValToString(prevRetValue,M4Val,ThousandSeparator,DecimalSeparator,0);
          SetPOSWindowDisplay("",tstr);
          PutWindowRecord(wn,IVCashr);
          IVCashDClass_RefreshStringList(wn,IVCashr);
          WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",false); 
        end;
      otherwise
        WindowDoNew(wn,0);
        GetWindowRecord(wn,IVr);
        IVr.RetnValue = prevRetValue;
        PutWindowString(wn,"touchscreenwindowpage",1);
        PutWindowString(wn,"touchscreenwindowpagestack","1");
        PutWindowString(wn,"touchscreenwindowprinterstack","*");
        PutWindowString(wn,"CustomerDisplayData_Line1","");
        PutWindowString(wn,"CustomerDisplayData_Line2","");    
        PutWindowString(wn,"touchscreenitemlastrownr",-1);
        tstr = USetStr(24172) & "  ";
        tstr = tstr & ValToString(prevRetValue,M4Val,ThousandSeparator,DecimalSeparator,0);
        SetPOSWindowDisplay("",tstr);
        PutWindowRecord(wn,IVr);
        IVDClass_RefreshStringList(wn,IVr);
     end;
//    ReRunWindowDef(wn);
  end;
LIVDClassTouchScreenFinishButtonRun:;  
  return;
end;

global
updating procedure IVDClassTouchScreenFinishButton()
begin
  IVDClassTouchScreenFinishButtonRun(true,-1);
  return;
end;

updating function Boolean IVDClassTouchScreenButton(record POSButtonsVc POSBr,row POSButtonsVc POSBrw)
begin
  Boolean res;
  
  switch (POSBrw.ButtonType) begin
    case kPOSButtonTypeFinish:
      IVDClassTouchScreenFinishButtonRun(true,-1);   
      res = true;
    case kPOSButtonTypeLookupSerialNr:
      IVDClassTouchScreenLookupSerialNr;
      res = true;
    case kPOSButtonTypeLogin:
      IVDClassTouchScreenButtonLogin;
      res = true;
    case kPOSButtonTypSaveInvoice:
      IVDClassTouchScreenSaveInvoice;
      res = true;
    case kPOSButtonTypeLoyaltyPointsPayment:
      IVDClassTouchScreenLoyaltyPointsPaymentExecute(POSBrw.Code);
      res = true;
    case kPOSButtonTypeLoyaltyPointsBonus:
      IVDClassTouchScreenLoyaltyPointsBonusExecute;
      res = true;
    case kPOSButtonTypeAmendLine:
      IVDClassTouchScreenAmendLine;
      res = true;
    case kPOSButtonTypeVoidRow:
      IVDClassTouchScreenVoidRow;
      res = true;
  end;
  IVDClassTouchScreenButton = res;
  return;
end;

function Boolean IVDClassPageFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Boolean res;
  record POSButtonsVc POSBr;
  Boolean testf,found;
  
  found = true;
  POSBr.WindowClass = "IVDClass";
  while (LoopMain(POSBr,1,found)) begin
    if (POSBr.WindowClass!="IVDClass") then begin
      found = false;
    end;
    if (found) then begin
      if (POSBr.KeyCode==keycode) then begin
        testf = true;
        if (POSBr.Modifiers==kKeyModifierNone and (shflag or ctrlflag)) then begin
          testf = false;
        end;
        if (POSBr.Modifiers==kKeyModifierShift and (shflag==false or ctrlflag)) then begin
          testf = false;
        end;
        if (POSBr.Modifiers==kKeyModifierCtrl and (shflag or ctrlflag==false)) then begin
          testf = false;
        end;
        if (POSBr.Modifiers==kKeyModifierCtrlShift and (shflag==false or ctrlflag==false)) then begin
          testf = false;
        end;
        if (testf) then begin
          IVDClassTouchScreenStackButtonExecute(POSBr.Page);
          res = true;
          goto LIVDClassPageFunctionKey;
        end;
      end;
    end;
  end;
LIVDClassPageFunctionKey:;    
  IVDClassPageFunctionKey = res;
  return;
end;

global
updating function Boolean IVDClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  boolean found,testf;
  integer i,wn,rwcnt;
  record POSButtonsVc POSBr;
  row POSButtonsVc POSBrw;
  Boolean res;
  
  wn = CurWindow;

  found = POSButtonsForWindow(wn,POSBr);
  if (found) then begin
    rwcnt = MatRowCnt(POSBr);
    for (i = 0; i<rwcnt; i = i + 1) begin
      MatRowGet(POSBr,i,POSBrw);
      if (POSBrw.KeyCode==keycode) then begin
        testf = true;
        if (POSBrw.Modifiers==kKeyModifierNone and (shflag or ctrlflag)) then begin
          testf = false;
        end;
        if (POSBrw.Modifiers==kKeyModifierShift and (shflag==false or ctrlflag)) then begin
          testf = false;
        end;
        if (POSBrw.Modifiers==kKeyModifierCtrl and (shflag or ctrlflag==false)) then begin
          testf = false;
        end;
        if (POSBrw.Modifiers==kKeyModifierCtrlShift and (shflag==false or ctrlflag==false)) then begin
          testf = false;
        end;
        if (testf) then begin
          if (IVDClassTouchScreenButton(POSBr,POSBrw)==false) then begin
            IVDClassTouchScreenPasteButtonDo(i+1);
            res = true;
          end;
          goto LIVDClassFunctionKey;
        end;
      end;
    end;
  end;
  if (IVDClassPageFunctionKey(keycode,shflag,ctrlflag)) then begin
    res = true;
    goto LIVDClassFunctionKey;
  end;
LIVDClassFunctionKey:;  
  IVDClassFunctionKey = res;
  return;
end;

global
function Boolean IVDClassListDoubleClick(Integer wn,Integer rownr)
begin
  integer sline,matrowix,res,nwn;
  string 255 tstr,t2,tag;
  record IVVc IVr;
  row IVVc IVrw;
  val t;
  Boolean testf;
  record INVc INr;

  sline = SelectedListLine(wn);
  if (sline<>-1) then begin
    tag = GetListTag(wn,sline);
    if ((tag==USetStr(24172)) or (tag==USetStr(24173)) or (tag==USetStr(24171))) then begin
      matrowix = -1;
    end else begin
      matrowix = StringToLongInt(tag);
    end;
  end else begin
    matrowix = -1;
  end;
  GetWindowRecord(wn,IVr);
  if (matrowix>=0) then begin
    MatRowGet(IVr,matrowix,IVrw);
    if (ReadFirstItem(IVrw.ArtCode,INr,true,false)) then begin
      nwn = OpenWindow("INDClass",0,wn,"","",INr);
    end;
  end;
  IVDClassListDoubleClick = false;
  return;
end;

global
procedure IVDClassTouchScreenEditItemRecord()
begin
  IVDClassListDoubleClick(CurWindow,-1);
  return;
end;

global
function Boolean IVDClassListClick(Integer wn,Integer rownr)
begin
  integer sline,matrowix,res;
  string 255 tstr,t2,tag;
  record IVVc IVr;
  row IVVc IVrw;
  val t;
  Boolean testf;
  /*
  record RcVc RepSpec;
  Integer nwn,line;

  if (TouchScreenLook) then begin      
    line = SelectedListLine(wn);
    if (line>=0) then begin
      if (IVCashDClassDeleteRowTest(wn,0)) then begin
        nwn = OpenWindow("TouchScreenRowFunctionsWClass",0,wn,"","",RepSpec);
      end;
    end;
  end;
  IVCashDClassListClick = true;
  */
  
  //IVCashDClassSpecificLevel(10); //This is test code to simulate a 'Utilities' page when an item is selected in the list.
  
  sline = SelectedListLine(wn);
  if (sline<>-1) then begin
    tag = GetListTag(wn,sline);
    if ((tag==USetStr(24172)) or (tag==USetStr(24173)) or (tag==USetStr(24171))) then begin
      matrowix = -1;
    end else begin
      matrowix = StringToLongInt(tag);
    end;
  end else begin
    matrowix = -1;
  end;
  GetWindowRecord(wn,IVr);
  if (matrowix>=0) then begin
    MatRowGet(IVr,matrowix,IVrw);
    switch (IVrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkInvoiceRowTypeNormal1;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal1:;
        tstr = ValToString(IVrw.Quant,M4UVal,ThousandSeparator,DecimalSeparator,0) & "*" & ValToString(IVrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0);
        M4PadString(ValToString(IVrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),30-len(tstr)," ",true,t2);
        tstr = tstr & t2;  
        SetPOSWindowDisplay(IVrw.ArtCode & " " & IVrw.Spec,tstr);
      case kInvoiceRowTypeCashPayment:
        tstr = IVrw.Spec & "  " & ValToString(IVrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0);
        SetPOSWindowDisplay(tstr,"");
      otherwise
        SetPOSWindowDisplay("","");
    end;
  end else begin
    testf = true;
    tstr = ""; t2 = "";
    if (tag==USetStr(24172)) then begin
      t = IVr.RetValue;
      if (t<0) then begin t = 0.00; testf = false; end;
      if (blank(t)) then begin t = 0.00; testf = false; end;
      tstr = USetStr(24172) & "  " & ValToString(t,M4Val,ThousandSeparator,DecimalSeparator,0);
    end;
    if (testf) then begin    
      SetPOSWindowDisplay(tstr,t2);
    end else begin
      SetPOSWindowDisplay("","");
    end;
  end;
  //PutWindowString(wn,"touchscreenselecteditemtag",tstr);
  IVDClassListClick = false;
  return;
end;

global
updating procedure ProceedMainSerialNrNPTSSClassExecute(Integer wn)
begin
  Integer mwn,rownr;
  record RcVc RepSpec;
  record IVVc IVr;
  record IVVc prevIVr;
  row IVVc IVrw;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  row IVCashVc IVCashrw;
  string 255 tstr,t2;
  
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    if (RepSpec.long1>=0) then begin
    switch (GetWindowFileName(mwn)) begin
      case "IVVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedMainSerialNrNPTSSClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedMainSerialNrNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedMainSerialNrNPTSSClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedMainSerialNrNPTSSClass;
            end;
        end;
        MatRowGet(IVr,RepSpec.long1,IVrw);
        IVrw.MotherNr = RepSpec.f1;
        IVrw.MotherSecondarySerialNr = RepSpec.f2;
        IVrw.MotherAlternateDeviceID = RepSpec.f3;
        MatRowPut(IVr,RepSpec.long1,IVrw);
        PutWindowRecord(mwn,IVr);
        IVDClass_RefreshStringList(mwn,IVr);
        WindowDoOK(mwn,0);
        CloseWindow(wn);
      case "IVCashVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedMainSerialNrNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedMainSerialNrNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedMainSerialNrNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedMainSerialNrNPTSSClass;
            end;
        end;
        MatRowGet(IVCashr,RepSpec.long1,IVCashrw);
        IVCashrw.MotherNr = RepSpec.f1;
        IVCashrw.MotherSecondarySerialNr = RepSpec.f2;
        IVCashrw.MotherAlternateDeviceID = RepSpec.f3;
        MatRowPut(IVCashr,RepSpec.long1,IVCashrw);
        PutWindowRecord(mwn,IVCashr);
        IVCashDClass_RefreshStringList(mwn,IVCashr);
        WindowDoOK(mwn,0);
        CloseWindow(wn);
    end;
    end;
  end;
LProceedMainSerialNrNPTSSClass:;  
  //WindowFieldGoto(mwn,IVr,-1,"ivcashcommand",true);
  WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false); 
  return;
end;

global
updating procedure ProceedMainSerialNrNPTSSClass()
begin  
  ProceedMainSerialNrNPTSSClassExecute(CurWindow);
  return;
end;

global
procedure IVDClassTouchScreenMainSerialNrExecute(LongInt rownr)
begin
  Integer wn,mwn,line;
  record RcVc RepSpec;
  record IVVc IVr;
  row IVVc IVrw;
  string 255 tstr;
  Boolean testf;
  
  mwn = CurWindow;
  RecordClear(RepSpec);
  RepSpec.long1 = rownr;
  if (RepSpec.long1<0) then begin
    RepSpec.long1 = GetSelectedPOSItemRowIndex(mwn);
  end;
  if (RepSpec.long1>=0) then begin
    GetWindowRecord(mwn,IVr);
    MatRowGet(IVr,RepSpec.long1,IVrw);
    testf = true;
    if (IVr.OKFlag!=0) then begin testf = false; end;
    if (IVr.Invalid!=0) then begin testf = false; end;
    if (RepSpec.long1<0) then begin testf = false; end;
    if (testf) then begin
      RepSpec.f1 = IVrw.MotherNr;
      RepSpec.f2 = IVrw.MotherSecondarySerialNr;
      RepSpec.f3 = IVrw.MotherAlternateDeviceID;
      wn = OpenWindow("MainSerialNrNPTSSClass",0,mwn,"","",RepSpec);
      WindowFieldGoto(wn,RepSpec,-1,"f1",false);    
    end;
  end;
  return;
end;

global
procedure IVDClassTouchScreenMainSerialNr()
begin
  IVDClassTouchScreenMainSerialNrExecute(-1);
  return;
end;

updating procedure AttachGSXNotesToSVOSer(record SVOSerVc SVOSerr,record NotepadVc csNotesr,record NotepadVc Notesr)
begin
  if (SizeTextCnt(csNotesr)>0) then begin
    CreateRecordLink(SVOSerr,CurrentCompany,csNotesr,CurrentCompany);
  end;
  if (SizeTextCnt(Notesr)>0) then begin
    CreateRecordLink(SVOSerr,CurrentCompany,Notesr,CurrentCompany);
  end;
  return;
end;

global
updating procedure IVDClassTouchScreenAppleWarrantyStatusCheck()
begin
  Integer wn,rownr;
  record IVVc IVr;
  row IVVc IVrw;
  string 255 tstr;
  Boolean testf,found;
  record ACPVc ACPr;
  record SVOSerVc SVOSerr;
  record INVc INr;
  record NotepadVc csNotesr,Notesr;
  array string 255 a_partNumbers;
  string 255 sessionID,errormsg;
  record GSXSettingsBlock GSb;
  date d;
  Boolean eligiblef,resellerstatusf;
  
  wn = CurWindow;
  rownr = GetSelectedPOSItemRowIndex(wn);
  GetWindowRecord(wn,IVr);
  testf = true;
  if (IVr.OKFlag!=0) then begin testf = false; end;
  if (IVr.Invalid!=0) then begin testf = false; end;
  if (rownr<0) then begin testf = false; end;
  if (testf) then begin
    MatRowGet(IVr,rownr,IVrw);
    ACPr.ArtCode = IVrw.ArtCode;
    if (ReadFirstMain(ACPr,1,true)==false) then begin
      MessageBox(23702,"");
      goto LIVDClassTouchScreenAppleWarrantyStatusCheck;
    end;
    if (blank(IVrw.MotherNr)) and (blank(IVrw.MotherSecondarySerialNr)) and (blank(IVrw.MotherAlternateDeviceID)) then begin
      MessageBox(23700,"");
      goto LIVDClassTouchScreenAppleWarrantyStatusCheck;
    end;
    SVOSerr.ItemCode = IVrw.ArtCode;
    SVOSerr.SerialNr = IVrw.MotherNr;
    found = ReadFirstMain(SVOSerr,2,true);
    if (found==false) then begin
      SVOSerr.SerialNr = IVrw.MotherNr;
      found = ReadFirstMain(SVOSerr,1,true);
    end;
    resellerstatusf = true;
    if (found==false) then begin
      RecordNew(SVOSerr);
      SVOSerr.ItemCode = ""; //IVrw.ArtCode; find item code of serial nr , but what in case of items we have not sold ? 
      SVOSerr.SerialNr = IVrw.MotherNr;
      INr.Code = SVOSerr.ItemCode;
      if (ReadFirstMain(INr,1,true)) then begin
        SVOSerr.ItemName = INr.Name;
      end;
      SVOSerr.CustCode = IVr.CustCode;
      SVOSerr.CustName = IVr.Addr0;
      //TODO: fill in all more of the basics (cost, sold date that we know about, etc)
    end else begin
      if (SVOSerr.CoverageEndDate>CurrentDate) and (blankdate(SVOSerr.ContractCoverageEndDate)) then begin
        eligiblef = true;
//        resellerstatusf = false; // we should be able to check status is eligible
      end;
      if (SVOSerr.CoverageEndDate<CurrentDate) and (nonblankdate(SVOSerr.CoverageEndDate)) and (blankdate(SVOSerr.ContractCoverageEndDate)) then begin
        eligiblef = false;
        resellerstatusf = false;
      end;
      if (blankdate(SVOSerr.CoverageEndDate)) and (SVOSerr.ContractCoverageEndDate<CurrentDate) and (nonblankdate(SVOSerr.ContractCoverageEndDate)) then begin
        eligiblef = false;
        resellerstatusf = false;
      end;
      if (nonblankdate(SVOSerr.CoverageEndDate)) and (nonblankdate(SVOSerr.ContractCoverageEndDate)) then begin
        if (SVOSerr.ContractCoverageEndDate<CurrentDate) then begin
          eligiblef = false;
          resellerstatusf = false;
        end;
        if (SVOSerr.ContractCoverageEndDate>CurrentDate) then begin
          eligiblef = true;
          resellerstatusf = false;
        end;
      end;
    end;
//686641
    if (resellerstatusf) then begin
      BlockLoad(GSb);
      if (GSXResellerLogin(GSb.AppleID,GSb.Password,GSb.AccountNo,sessionID,errormsg)) then begin
  //      if (GSXWarrantyStatus(sessionID,IVrw.MotherNr,d,a_partNumbers,0,SVOSerr,csNotesr,Notesr,errormsg)) then begin
        if (GSXResellerWarrantyStatus(sessionID,IVr,rownr,a_partNumbers,0,SVOSerr,csNotesr,Notesr,errormsg)) then begin
          RecordStore(SVOSerr,true);
          AttachGSXNotesToSVOSer(SVOSerr,csNotesr,Notesr);      
  
          if (SVOSerr.CoverageEndDate<CurrentDate) and (nonblankdate(SVOSerr.CoverageEndDate)) and (blankdate(SVOSerr.ContractCoverageEndDate)) then begin
            MessageBox(23704," " & SVOSerr.WarrantyStatus);
          end;
          if (blankdate(SVOSerr.CoverageEndDate)) and (SVOSerr.ContractCoverageEndDate<CurrentDate) and (nonblankdate(SVOSerr.ContractCoverageEndDate)) then begin
            MessageBox(23704," " & SVOSerr.WarrantyStatus);
          end;

          if (nonblankdate(SVOSerr.CoverageEndDate)) and (nonblankdate(SVOSerr.ContractCoverageEndDate)) then begin
            if (SVOSerr.ContractCoverageEndDate<CurrentDate) then begin
              MessageBox(23704," " & SVOSerr.WarrantyStatus);
            end;
            if (SVOSerr.ContractCoverageEndDate>CurrentDate) then begin
              MessageBox(23706," " & SVOSerr.WarrantyStatus);
            end;
          end;
          if (SVOSerr.CoverageEndDate>CurrentDate) and (blankdate(SVOSerr.ContractCoverageEndDate)) then begin
            MessageBox(23705,"");
          end;
        end else begin 
          MessageBox(0,errormsg);
        end;
  //    if (GSXLogout(sessionID)) then begin StopAlert("logout ok"); end;
      end else begin
        MessageBox(0,errormsg);
  //      IVrw.MotherNr = "";
  //      MatRowPut(IVr,rownr,IVrw);
  //      PutWindowRecord(wn,IVr);
  //      WindowDoOK(wn,0);
      end;
    end else begin
      if (eligiblef) then begin
        MessageBox(23706,"");
      end else begin
        MessageBox(23704,"");
      end;
    end;
  end;
  if (testf) then begin
  end;
LIVDClassTouchScreenAppleWarrantyStatusCheck:;
  return;
end;

global
updating procedure IVDClassTouchScreenAppleCreateAEOrder()
begin
  Integer wn,rownr;
  record IVVc IVr;
  row IVVc IVrw;
  string 255 tstr;
  Boolean testf,found;
  record ACPVc ACPr;
  record SVOSerVc SVOSerr;
  record INVc INr;
  record NotepadVc csNotesr,Notesr;
  array string 255 a_partNumbers;
  string 255 sessionID,errormsg;
  record GSXSettingsBlock GSb;
  date d;
  Boolean eligiblef,resellerstatusf;
  
  wn = CurWindow;
  rownr = GetSelectedPOSItemRowIndex(wn);
  GetWindowRecord(wn,IVr);
  testf = true;
  if (IVr.OKFlag!=0) then begin testf = false; end;
  if (IVr.Invalid!=0) then begin testf = false; end;
  if (rownr<0) then begin testf = false; end;
  if (testf) then begin
    MatRowGet(IVr,rownr,IVrw);
    if (IVrw.AEStatus==kGSXAutoEnrollmentSent) then begin
      MessageBox(23708,"");
      goto LIVDClassTouchScreenAppleCreateAEOrder;
    end;
    ACPr.ArtCode = IVrw.ArtCode;
    if (ReadFirstMain(ACPr,1,true)==false) then begin
      MessageBox(23702,"");
      goto LIVDClassTouchScreenAppleCreateAEOrder;
    end;
    if (blank(IVrw.MotherNr)) and (blank(IVrw.MotherSecondarySerialNr)) and (blank(IVrw.MotherAlternateDeviceID)) then begin
      MessageBox(23700,"");
      goto LIVDClassTouchScreenAppleCreateAEOrder;
    end;
    BlockLoad(GSb);
    SVOSerr.ItemCode = IVrw.ArtCode;
    SVOSerr.SerialNr = IVrw.MotherNr;
    found = ReadFirstMain(SVOSerr,2,true);
    if (found==false) then begin
      SVOSerr.SerialNr = IVrw.MotherNr;
      found = ReadFirstMain(SVOSerr,1,true);
    end;
    resellerstatusf = true;
    if (found==false) then begin
      RecordNew(SVOSerr);
      SVOSerr.ItemCode = ""; //IVrw.ArtCode; find item code of serial nr , but what in case of items we have not sold ? 
      SVOSerr.SerialNr = IVrw.MotherNr;
      INr.Code = SVOSerr.ItemCode;
      if (ReadFirstMain(INr,1,true)) then begin
        SVOSerr.ItemName = INr.Name;
      end;
      SVOSerr.CustCode = IVr.CustCode;
      SVOSerr.CustName = IVr.Addr0;
      //TODO: fill in all more of the basics (cost, sold date that we know about, etc)
    end else begin
      if (SVOSerr.CoverageEndDate>CurrentDate) and (blankdate(SVOSerr.ContractCoverageEndDate)) then begin
        eligiblef = true;
        resellerstatusf = false;
      end;
      if (SVOSerr.CoverageEndDate<CurrentDate) and (nonblankdate(SVOSerr.CoverageEndDate)) and (blankdate(SVOSerr.ContractCoverageEndDate)) then begin
        eligiblef = false;
        resellerstatusf = false;
      end;
      if (blankdate(SVOSerr.CoverageEndDate)) and (SVOSerr.ContractCoverageEndDate<CurrentDate) and (nonblankdate(SVOSerr.ContractCoverageEndDate)) then begin
        eligiblef = false;
        resellerstatusf = false;
      end;
      if (nonblankdate(SVOSerr.CoverageEndDate)) and (nonblankdate(SVOSerr.ContractCoverageEndDate)) then begin
        if (SVOSerr.ContractCoverageEndDate<CurrentDate) then begin
          eligiblef = false;
          resellerstatusf = false;
        end;
        if (SVOSerr.ContractCoverageEndDate>CurrentDate) then begin
          eligiblef = true;
          resellerstatusf = false;
        end;
      end;
    end;
    if (resellerstatusf) then begin
      if (GSXResellerLogin(GSb.AppleID,GSb.Password,GSb.AccountNo,sessionID,errormsg)) then begin
  //      if (GSXWarrantyStatus(sessionID,IVrw.MotherNr,d,a_partNumbers,0,SVOSerr,csNotesr,Notesr,errormsg)) then begin
        if (GSXResellerWarrantyStatus(sessionID,IVr,rownr,a_partNumbers,0,SVOSerr,csNotesr,Notesr,errormsg)) then begin
          RecordStore(SVOSerr,true);
          AttachGSXNotesToSVOSer(SVOSerr,csNotesr,Notesr);      
  
          if (SVOSerr.CoverageEndDate<CurrentDate) and (nonblankdate(SVOSerr.CoverageEndDate)) and (blankdate(SVOSerr.ContractCoverageEndDate)) then begin
            MessageBox(23704," " & SVOSerr.WarrantyStatus);
            eligiblef = false;
          end;
          if (blankdate(SVOSerr.CoverageEndDate)) and (SVOSerr.ContractCoverageEndDate<CurrentDate) and (nonblankdate(SVOSerr.ContractCoverageEndDate)) then begin
            MessageBox(23704," " & SVOSerr.WarrantyStatus);
            eligiblef = false;
          end;

          if (nonblankdate(SVOSerr.CoverageEndDate)) and (nonblankdate(SVOSerr.ContractCoverageEndDate)) then begin
            if (SVOSerr.ContractCoverageEndDate<CurrentDate) then begin
              MessageBox(23704," " & SVOSerr.WarrantyStatus);
              eligiblef = false;
            end;
            if (SVOSerr.ContractCoverageEndDate>CurrentDate) then begin
              MessageBox(23706," " & SVOSerr.WarrantyStatus);
              eligiblef = false;
            end;
          end;
          if (SVOSerr.CoverageEndDate>CurrentDate) and (blankdate(SVOSerr.ContractCoverageEndDate)) then begin
            MessageBox(23705,"");
            eligiblef = true;
          end;
        end else begin 
          MessageBox(0,errormsg);
          eligiblef = false;
        end;
        
      end;
    end else begin
      if (eligiblef==false) then begin
        MessageBox(23704,"");
      end;
    end;
    if (eligiblef) then begin
      if (GSXResellerLogin(GSb.AppleID,GSb.Password,GSb.AccountNo,sessionID,errormsg)) then begin
        if (GSXResellerAutoEnrollment(GSb,sessionID,IVr,rownr,errormsg)) then begin
          MatRowGet(IVr,rownr,IVrw);
          IVrw.AEStatus = kGSXAutoEnrollmentSent;
          MatRowPut(IVr,rownr,IVrw);
          PutWindowRecord(wn,IVr);
          WindowDoOK(wn,0);
          IVDClass_RefreshStringList(wn,IVr);
        end;
      end;
      MessageBox(0,errormsg);
    end;
  end;
LIVDClassTouchScreenAppleCreateAEOrder:;
  return;
end;

global
updating procedure IVDClassTouchScreenAppleCancelAEOrder()
begin
  Integer wn,rownr;
  record IVVc IVr;
  row IVVc IVrw;
  string 255 tstr;
  Boolean testf,found;
  record ACPVc ACPr;
  record SVOSerVc SVOSerr;
  record INVc INr;
  record NotepadVc csNotesr,Notesr;
  array string 255 a_partNumbers;
  string 255 sessionID,errormsg;
  record GSXSettingsBlock GSb;
  date d;
  
  wn = CurWindow;
  rownr = GetSelectedPOSItemRowIndex(wn);
  GetWindowRecord(wn,IVr);
  testf = true;
//  if (IVr.OKFlag!=0) then begin testf = false; end;
//  if (IVr.Invalid!=0) then begin testf = false; end;
  if (rownr<0) then begin testf = false; end;
  if (testf) then begin
    MatRowGet(IVr,rownr,IVrw);
    if (IVrw.AEStatus!=kGSXAutoEnrollmentSent) then begin
      MessageBox(23705,"");
      goto LIVDClassTouchScreenAppleCancelAEOrder;
    end;
    ACPr.ArtCode = IVrw.ArtCode;
    if (ReadFirstMain(ACPr,1,true)==false) then begin
      MessageBox(23702,"");
      goto LIVDClassTouchScreenAppleCancelAEOrder;
    end;
    if (blank(IVrw.MotherNr)) and (blank(IVrw.MotherSecondarySerialNr)) and (blank(IVrw.MotherAlternateDeviceID)) then begin
      MessageBox(23700,"");
      goto LIVDClassTouchScreenAppleCancelAEOrder;
    end;
    BlockLoad(GSb);
    SVOSerr.ItemCode = IVrw.ArtCode;
    SVOSerr.SerialNr = IVrw.MotherNr;
    found = ReadFirstMain(SVOSerr,2,true);
    if (found==false) then begin
      SVOSerr.SerialNr = IVrw.MotherNr;
      found = ReadFirstMain(SVOSerr,1,true);
    end;
    testf = false;
    if (found==false) then begin
      RecordNew(SVOSerr);
      SVOSerr.ItemCode = ""; //IVrw.ArtCode; find item code of serial nr , but what in case of items we have not sold ? 
      SVOSerr.SerialNr = IVrw.MotherNr;
      INr.Code = SVOSerr.ItemCode;
      if (ReadFirstMain(INr,1,true)) then begin
        SVOSerr.ItemName = INr.Name;
      end;
      SVOSerr.CustCode = IVr.CustCode;
      SVOSerr.CustName = IVr.Addr0;
      //TODO: fill in all more of the basics (cost, sold date that we know about, etc)
    end else begin
      if (SVOSerr.CoverageEndDate>CurrentDate) and (SVOSerr.ContractCoverageEndDate>CurrentDate) then begin
        testf = true;
      end;
      if (nonblank(SVOSerr.APPAgreementNumber)) then begin
        testf = true;
      end;
    end;
    if (testf==false) then begin
      if (GSXResellerLogin(GSb.AppleID,GSb.Password,GSb.AccountNo,sessionID,errormsg)) then begin
        if (GSXResellerWarrantyStatus(sessionID,IVr,rownr,a_partNumbers,0,SVOSerr,csNotesr,Notesr,errormsg)) then begin
          RecordStore(SVOSerr,true);
          AttachGSXNotesToSVOSer(SVOSerr,csNotesr,Notesr);
          if (SVOSerr.CoverageEndDate>CurrentDate) and (SVOSerr.ContractCoverageEndDate>CurrentDate) then begin
            testf = true;
          end;
          if (nonblank(SVOSerr.APPAgreementNumber)) then begin
            testf = true;
          end;
        end else begin 
          MessageBox(0,errormsg);
        end;        
      end;
    end;
    if (testf) then begin
      if (GSXResellerLogin(GSb.AppleID,GSb.Password,GSb.AccountNo,sessionID,errormsg)) then begin
        if (GSXResellerCancelAutoEnrollment(GSb,sessionID,IVr,rownr,errormsg)) then begin
          MatRowGet(IVr,rownr,IVrw);
          IVrw.AEStatus = kGSXAutoEnrollmentCancelled;
          MatRowPut(IVr,rownr,IVrw);
          PutWindowRecord(wn,IVr);
          WindowDoOK(wn,0);
          IVDClass_RefreshStringList(wn,IVr);
        end;
      end;
      MessageBox(0,errormsg);
    end else begin
      MessageBox(23704,"");
    end;
  end;
LIVDClassTouchScreenAppleCancelAEOrder:;
  return;
end;

global
updating procedure ProceedCommentLineNPTSSClassExecute(Integer wn)
begin
  Integer mwn,rownr;
  record RcVc RepSpec;
  record IVVc IVr;
  record IVVc prevIVr;
  row IVVc IVrw;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  row IVCashVc IVCashrw;
  
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    rownr = RepSpec.long1 + 1;
    switch (GetWindowFileName(mwn)) begin
      case "IVVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedHeaderLineNPTSSClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedHeaderLineNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedHeaderLineNPTSSClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedHeaderLineNPTSSClass;
            end;
        end;
        if (rownr<0) then begin rownr = MatRowCnt(IVr); end;
        
        ClearRow(IVr,IVrw,kInvoiceRowTypeNormal);
        IVrw.Spec = RepSpec.f1;
        MatRowInsert(IVr,rownr,IVrw);
        PutWindowRecord(mwn,IVr);
        IVDClass_RefreshStringList(mwn,IVr);
        CloseWindow(wn);
        //WindowFieldGoto(mwn,IVr,-1,"ivcashcommand",true);
        WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false); 
      case "IVCashVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedHeaderLineNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedHeaderLineNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedHeaderLineNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedHeaderLineNPTSSClass;
            end;
        end;
        if (rownr<0) then begin rownr = MatRowCnt(IVCashr); end;
        ClearRow(IVCashr,IVCashrw,kInvoiceRowTypeNormal);
        IVCashrw.Spec = RepSpec.f1;
        MatRowInsert(IVCashr,rownr,IVCashrw);
        PutWindowRecord(mwn,IVCashr);
        IVCashDClass_RefreshStringList(mwn,IVCashr);
        CloseWindow(wn);
        //WindowFieldGoto(mwn,IVCashr,-1,"ivcashcommand",true);
        WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false); 
    end;
  end;
LProceedHeaderLineNPTSSClass:;  
  return;
end;

global
updating procedure ProceedCommentLineNPTSSClass()
begin  
  ProceedCommentLineNPTSSClassExecute(CurWindow);
  return;
end;

global
updating procedure ProceedHeaderLineNPTSSClassExecute(Integer wn)
begin
  Integer mwn,rownr;
  record RcVc RepSpec;
  record IVVc IVr;
  record IVVc prevIVr;
  row IVVc IVrw;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  row IVCashVc IVCashrw;
  
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    rownr = RepSpec.long1;
    switch (GetWindowFileName(mwn)) begin
      case "IVVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedHeaderLineNPTSSClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedHeaderLineNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedHeaderLineNPTSSClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedHeaderLineNPTSSClass;
            end;
        end;
        if (rownr<0) then begin rownr = MatRowCnt(IVr); end;
        
        ClearRow(IVr,IVrw,kInvoiceRowTypeHeader);
        IVrw.Spec = RepSpec.f1;
        MatRowInsert(IVr,rownr,IVrw);
        PutWindowRecord(mwn,IVr);
        IVDClass_RefreshStringList(mwn,IVr);
        CloseWindow(wn);
        //WindowFieldGoto(mwn,IVr,-1,"ivcashcommand",true);
        WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false); 
      case "IVCashVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedHeaderLineNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedHeaderLineNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedHeaderLineNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedHeaderLineNPTSSClass;
            end;
        end;
        if (rownr<0) then begin rownr = MatRowCnt(IVCashr); end;
        ClearRow(IVCashr,IVCashrw,kInvoiceRowTypeHeader);
        IVCashrw.Spec = RepSpec.f1;
        MatRowInsert(IVCashr,rownr,IVCashrw);
        PutWindowRecord(mwn,IVCashr);
        IVCashDClass_RefreshStringList(mwn,IVCashr);
        CloseWindow(wn);
        //WindowFieldGoto(mwn,IVCashr,-1,"ivcashcommand",true);
        WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false); 
    end;
  end;
LProceedHeaderLineNPTSSClass:;  
  return;
end;

global
updating procedure ProceedHeaderLineNPTSSClass()
begin  
  ProceedHeaderLineNPTSSClassExecute(CurWindow);
  return;
end;

global
updating function boolean HeaderLineNPTSSClassOnOKWindow(integer wn)
begin
  ProceedHeaderLineNPTSSClassExecute(wn);
  HeaderLineNPTSSClassOnOKWindow = false;
  return;
end;

global
procedure IVDClassTouchScreenCommentLine()
begin
  Integer wn,mwn,line,rownr;
  record RcVc RepSpec;
  record IVVc IVr;
  string 255 tstr;
  Boolean testf;
  
  mwn = CurWindow;
  RecordClear(RepSpec);
  GetWindowRecord(mwn,IVr);
  testf = true;
  if (IVr.OKFlag!=0) then begin testf = false; end;
  if (IVr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    RepSpec.long1 = GetSelectedPOSItemRowIndex(mwn);
    wn = OpenWindow("CommentLineNPTSSClass",0,mwn,"","",RepSpec);
    WindowFieldGoto(wn,RepSpec,-1,"f1",false);    
  end;
  return;
end;

global
procedure IVDClassTouchScreenHeaderLine()
begin
  Integer wn,mwn,line,rownr;
  record RcVc RepSpec;
  record IVVc IVr;
  string 255 tstr;
  Boolean testf;
  
  mwn = CurWindow;
  RecordClear(RepSpec);
  GetWindowRecord(mwn,IVr);
  testf = true;
  if (IVr.OKFlag!=0) then begin testf = false; end;
  if (IVr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    RepSpec.long1 = GetSelectedPOSItemRowIndex(mwn);
    wn = OpenWindow("HeaderLineNPTSSClass",0,mwn,"","",RepSpec);
    WindowFieldGoto(wn,RepSpec,-1,"f1",false);    
  end;
  return;
end;

global
updating procedure ProceedSubtotalLineNPTSSClassExecute(Integer wn)
begin
  Integer mwn,rownr;
  record RcVc RepSpec;
  record IVVc IVr;
  record IVVc prevIVr;
  row IVVc IVrw;
  
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "IVVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedSubtotalLineNPTSSClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedSubtotalLineNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedSubtotalLineNPTSSClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedSubtotalLineNPTSSClass;
            end;
        end;
        if (RepSpec.long1<0) then begin goto LProceedSubtotalLineNPTSSClass; end;
        ClearRow(IVr,IVrw,9);
        IVrw.Spec = RepSpec.f1;
        MatRowInsert(IVr,RepSpec.long1,IVrw);
        RecalcIVSubtotal(IVr);
        PutWindowRecord(mwn,IVr);
        IVDClass_RefreshStringList(mwn,IVr);
        CloseWindow(wn);
        //WindowFieldGoto(mwn,IVr,-1,"ivcashcommand",true);
        WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false); 
    end;
  end;
LProceedSubtotalLineNPTSSClass:;  
  return;
end;

global
updating procedure ProceedSubtotalLineNPTSSClass()
begin  
  ProceedSubtotalLineNPTSSClassExecute(CurWindow);
  return;
end;

global
procedure IVDClassTouchScreenSubtotalLine()
begin
  Integer wn,mwn,line,rownr;
  record RcVc RepSpec;
  record IVVc IVr;
  string 255 tstr;
  Boolean testf;
  
  mwn = CurWindow;
  RecordClear(RepSpec);
  GetWindowRecord(mwn,IVr);
  testf = true;
  if (IVr.OKFlag!=0) then begin testf = false; end;
  if (IVr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    RepSpec.long1 = GetSelectedPOSItemRowIndex(mwn)+1;
    wn = OpenWindow("SubtotalLineNPTSSClass",0,mwn,"","",RepSpec);
    WindowFieldGoto(wn,RepSpec,-1,"f1",false);    
  end;
  return;
end;

global
procedure IVDClassTouchScreenHiddenLine()
begin
  Integer wn;
  record IVVc IVr;

  wn = CurWindow;
  AddInvoiceLineType(GetSelectedPOSItemRowIndex(wn)+1,10,false);
  GetWindowRecord(wn,IVr);
  IVDClass_RefreshStringList(wn,IVr);
  return;
end;

global
procedure IVDClassTouchScreenInvoiceStatus()
begin
  IVInfoIVDsm;
  return;
end;

global
procedure IVDClassTouchScreenOpenNLTransaction()
begin
  OpenTRFromIV;
  return;
end;

global
updating procedure IVDClassTouchScreenSendToFiscalDevice()
begin
  PrintToFiscPrntIVDsm;
  return;
end;

global
procedure IVDClassTouchScreenProformaInvoice()
begin
  PrintProformaIVDsm;
  return;
end;

global
procedure IVDClassTouchScreenOpenTaxMatrix()
begin
  TestVatMatrixIVDsmExecute(GetSelectedPOSItemRowIndex(CurWindow));
  return;
end;

global
procedure IVDClassTouchScreenManagerDiscountOverride()
begin
  Integer wn,matrowix;
  
  wn = CurWindow;
  matrowix = GetSelectedPOSItemRowIndex(wn);
  DoMgrsDiscOverrideIVDsm(wn,matrowix);
  return;
end;

global
updating procedure IVDClassTouchScreenCreateCreditEMail()
begin
  CreateMailFromIVDsm;
  return;
end;

global
updating procedure IVDClassTouchScreenCreateCreditNote()
begin
  CreateCreditNoteIVDsm;
  return;
end;

global
updating procedure IVDClassTouchScreenCreateCorrectionInvoice()
begin
  CorrectionIVsm;
  return;
end;

global
procedure IVDClassTouchScreenCreateCashin()
begin
  DoCLInFromIVD;
  return;
end;

global
updating procedure ProceedConnectToPrepaymentNPTSSClassExecute(Integer wn)
begin
  Integer mwn,rownr;
  record RcVc RepSpec;
  record IVVc IVr;
  record IVVc prevIVr;
  row IVVc IVrw;
  
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "IVVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedConnectToPrepaymentNPTSSClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedConnectToPrepaymentNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedConnectToPrepaymentNPTSSClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedConnectToPrepaymentNPTSSClass;
            end;
        end;

        rownr = MatRowCnt(IVr);
        ClearRow(IVr,IVrw,6);
        IVrw.Spec = USetStr(1288);
        IVrw.CUPNr = RepSpec.long1;
        MatRowPut(IVr,rownr,IVrw);
        IVVc_PasteCUPNr(IVr,rownr);
        PutWindowRecord(mwn,IVr);
        IVDClass_RefreshStringList(mwn,IVr);
        CloseWindow(wn);
        //WindowFieldGoto(mwn,IVr,-1,"ivcashcommand",true);
        WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false); 
    end;
  end;
LProceedConnectToPrepaymentNPTSSClass:;  
  return;
end;

global
updating procedure ProceedConnectToPrepaymentNPTSSClass()
begin  
  ProceedConnectToPrepaymentNPTSSClassExecute(CurWindow);
  return;
end;

global
updating function boolean ConnectToPrepaymentNPTSSClassOnOKWindow(integer wn)
begin
  ProceedConnectToPrepaymentNPTSSClassExecute(wn);
  ConnectToPrepaymentNPTSSClassOnOKWindow = false;
  return;
end;

global
procedure IVDClassTouchScreenConnectToPrepayment()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record IVVc IVr;
  Boolean testf;
  
  mwn = CurWindow;
  RecordClear(RepSpec);
  GetWindowRecord(mwn,IVr);
  testf = true;
  if (IVr.OKFlag!=0) then begin testf = false; end;
  if (IVr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    wn = OpenWindow("ConnectToPrepaymentNPTSSClass",0,mwn,"","",RepSpec);
    WindowFieldGoto(wn,RepSpec,-1,"long1",false);    
  end;
  return;
end;

global
updating procedure ProceedChangeTermsNPTSSClassExecute(Integer wn)
begin
  Integer mwn,rownr;
  record RcVc RepSpec;
  record IVVc IVr;
  record IVVc prevIVr;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  string 255 tstr;
  
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "IVCashVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeTermsNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeTermsNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeTermsNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeTermsNPTSSClass;
            end;
        end;
/*        
        if (IVCashr.PayDeal!=RepSpec.FirstAcc) then begin
          tstr = IVCashr.PayDeal;
          IVCashr.PayDeal = RepSpec.FirstAcc;
          IVCashVc_PastePayDeal(IVCashr,tstr,"");
        end;
*/        
        IVCashr.CustOrdNr = RepSpec.f1;
        IVCashr.OurContact = RepSpec.f2;
        IVCashr.ClientContact = RepSpec.f3;
        IVCashr.OfficialSerNr = RepSpec.f4;
        IVCashr.Location = RepSpec.LastAcc;
        IVCashr.LangCode = RepSpec.Language;
        IVCashr.Objects = RepSpec.ObjStr;
        PutWindowRecord(mwn,IVCashr);
        IVCashDClass_RefreshStringList(mwn,IVCashr);
        ReRunWindowDef(mwn);
        CloseWindow(wn);
        //WindowFieldGoto(mwn,IVCashr,-1,"ivcashcommand",true);
        WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false); 
      case "IVVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeTermsNPTSSClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeTermsNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeTermsNPTSSClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeTermsNPTSSClass;
            end;
        end;
        if (IVr.PayDeal!=RepSpec.FirstAcc) then begin
          tstr = IVr.PayDeal;
          IVr.PayDeal = RepSpec.FirstAcc;
          IVVc_PastePayDeal(IVr,tstr,"");
        end;
        IVr.CustOrdNr = RepSpec.f1;
        IVr.OurContact = RepSpec.f2;
        IVr.ClientContact = RepSpec.f3;
        IVr.OfficialSerNr = RepSpec.f4;
        IVr.Location = RepSpec.LastAcc;
        IVr.LangCode = RepSpec.Language;
        IVr.Objects = RepSpec.ObjStr;
        PutWindowRecord(mwn,IVr);
        IVDClass_RefreshStringList(mwn,IVr);
        ReRunWindowDef(mwn);
        CloseWindow(wn);
        //WindowFieldGoto(mwn,IVr,-1,"ivcashcommand",true);
        WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false); 
    end;
  end;
LProceedChangeTermsNPTSSClass:;  
  return;
end;

global
updating procedure ProceedChangeTermsNPTSSClass()
begin  
  ProceedChangeTermsNPTSSClassExecute(CurWindow);
  return;
end;

global
updating function boolean ChangeTermsNPTSSClassOnOKWindow(integer wn)
begin
  ProceedChangeTermsNPTSSClassExecute(wn);
  ChangeTermsNPTSSClassOnOKWindow = false;
  return;
end;

global
procedure IVDClassTouchScreenChangeTerms()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record IVVc IVr;
  Boolean testf;
  
  mwn = CurWindow;
  RecordClear(RepSpec);
  GetWindowRecord(mwn,IVr);
  testf = true;
  if (IVr.OKFlag!=0) then begin testf = false; end;
  if (IVr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    RepSpec.FirstAcc = IVr.PayDeal;
    RepSpec.f1 = IVr.CustOrdNr;
    RepSpec.f2 = IVr.OurContact;
    RepSpec.f3 = IVr.ClientContact;
    RepSpec.f4 = IVr.OfficialSerNr;
    RepSpec.LastAcc = IVr.Location;
    RepSpec.Language = IVr.LangCode;
    RepSpec.ObjStr = IVr.Objects;
    wn = OpenWindow("ChangeTermsNPTSSClass",0,mwn,"","",RepSpec);
    WindowFieldGoto(wn,RepSpec,-1,"f1",false);    
  end;
  return;
end;

global
updating procedure ProceedChangeAddressNPTSSClassExecute(Integer wn)
begin
  Integer mwn,rownr;
  record RcVc RepSpec;
  record IVVc IVr;
  record IVVc prevIVr;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  record RestAccVc RestAccr;
  record RestAccVc prevRestAccr;
  
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "IVCashVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
//              CloseWindow(wn);
//              goto LProceedChangeAddressNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeAddressNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
//              CloseWindow(wn);
//              goto LProceedChangeAddressNPTSSClass;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeAddressNPTSSClass;
            end;
        end;
        IVCashr.Addr0 = RepSpec.f6;
        IVCashr.Addr1 = RepSpec.f1;
        IVCashr.Addr2 = RepSpec.f2;
        IVCashr.Addr3 = RepSpec.f3;
        IVCashr.InvAddr3 = RepSpec.f4;
        IVCashr.InvAddr4 = RepSpec.f5;
        IVCashr.RegNr1 = RepSpec.f10;
        IVCashr.RegNr2 = RepSpec.f11;
        IVCashr.VATNr = RepSpec.f12;
        PutWindowRecord(mwn,IVCashr);
        if (RecordValid(prevIVCashr)) then begin
          if (prevIVCashr.OKFlag!=0) then begin
            WindowDoOk(mwn,0);
          end;
        end;
        IVCashDClass_RefreshStringList(mwn,IVCashr);
        ReRunWindowDef(mwn);
        CloseWindow(wn);
        //WindowFieldGoto(mwn,IVCashr,-1,"ivcashcommand",true);
        WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false); 
      case "IVVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeAddressNPTSSClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeAddressNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeAddressNPTSSClass;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeAddressNPTSSClass;
            end;
        end;
        IVr.Addr0 = RepSpec.f6;
        IVr.Addr1 = RepSpec.f1;
        IVr.Addr2 = RepSpec.f2;
        IVr.Addr3 = RepSpec.f3;
        IVr.InvAddr3 = RepSpec.f4;
        IVr.InvAddr4 = RepSpec.f5;
        IVr.VATNr = RepSpec.f12;
        PutWindowRecord(mwn,IVr);
        IVDClass_RefreshStringList(mwn,IVr);
        ReRunWindowDef(mwn);
        CloseWindow(wn);
        //WindowFieldGoto(mwn,IVr,-1,"ivcashcommand",true);
        WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false); 
      case "RestAccVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,RestAccr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevRestAccr);
//            if (prevRestAccr.OKFlag!=0) then begin
//              CloseWindow(wn);
//              goto LProceedChangeAddressNPTSSClass;
//            end;
            if (prevRestAccr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeAddressNPTSSClass;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevRestAccr);
//            if (prevRestAccr.OKFlag!=0) then begin
//              CloseWindow(wn);
//              goto LProceedChangeAddressNPTSSClass;
//            end;
            if (prevRestAccr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeAddressNPTSSClass;
            end;
        end;
        RestAccr.CUName = RepSpec.f6;
        RestAccr.Addr0 = RepSpec.f6;
        RestAccr.Addr1 = RepSpec.f1;
        RestAccr.Addr2 = RepSpec.f2;
        RestAccr.Addr3 = RepSpec.f3;
        RestAccr.InvAddr3 = RepSpec.f4;
        RestAccr.InvAddr4 = RepSpec.f5;
        RestAccr.VATNr = RepSpec.f12;
        PutWindowRecord(mwn,RestAccr);
        RestAccDClass_RefreshStringList(mwn,RestAccr);
        ReRunWindowDef(mwn);
        CloseWindow(wn);
        //WindowFieldGoto(mwn,RestAccr,-1,"ivcashcommand",true);
//      WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false); 
        
    end;
  end;
LProceedChangeAddressNPTSSClass:;  
  return;
end;

global
updating procedure ProceedChangeAddressNPTSSClass()
begin  
  ProceedChangeAddressNPTSSClassExecute(CurWindow);
  return;
end;

global
updating procedure ProceedChangeDiscountMatrixNPTSSClassExecute(Integer wn)
begin
  Integer mwn,rownr;
  record RcVc RepSpec;
  record IVVc IVr;
  record IVVc prevIVr;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  record RestAccVc RestAccr;
  record RestAccVc prevRestAccr;
  
  DeselectWindow(wn,true);
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    GetWindowRecord(wn,RepSpec);
    switch (GetWindowFileName(mwn)) begin
      case "IVCashVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVCashr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
//              CloseWindow(wn);
//              goto LProceedChangeDiscountMatrixNPTSSClassExecute;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeDiscountMatrixNPTSSClassExecute;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVCashr);
            if (prevIVCashr.OKFlag!=0) then begin
//              CloseWindow(wn);
//              goto LProceedChangeDiscountMatrixNPTSSClassExecute;
            end;
            if (prevIVCashr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeDiscountMatrixNPTSSClassExecute;
            end;
        end;
        IVCashr.RebCode = RepSpec.FirstAcc;
        IVCashVc_PasteRebCode(IVCashr);
        PutWindowRecord(mwn,IVCashr);
        if (RecordValid(prevIVCashr)) then begin
          if (prevIVCashr.OKFlag!=0) then begin
            WindowDoOk(mwn,0);
          end;
        end;
        IVCashDClass_RefreshStringList(mwn,IVCashr);
        ReRunWindowDef(mwn);
        CloseWindow(wn);
        //WindowFieldGoto(mwn,IVCashr,-1,"ivcashcommand",true);
        WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false); 
      case "IVVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeDiscountMatrixNPTSSClassExecute;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeDiscountMatrixNPTSSClassExecute;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeDiscountMatrixNPTSSClassExecute;
            end;
            if (prevIVr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeDiscountMatrixNPTSSClassExecute;
            end;
        end;
        IVr.RebCode = RepSpec.FirstAcc;
        IVVc_PasteRebCode(IVr);
        PutWindowRecord(mwn,IVr);
        IVDClass_RefreshStringList(mwn,IVr);
        ReRunWindowDef(mwn);
        CloseWindow(wn);
        //WindowFieldGoto(mwn,IVr,-1,"ivcashcommand",true);
        WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false); 
      case "RestAccVc":
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,RestAccr);
        switch (WindowState(mwn)) begin
          case Rs_update:
            GetPrevWindowRecord(mwn,prevRestAccr);
//            if (prevRestAccr.OKFlag!=0) then begin
//              CloseWindow(wn);
//              goto LProceedChangeDiscountMatrixNPTSSClassExecute;
//            end;
            if (prevRestAccr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeDiscountMatrixNPTSSClassExecute;
            end;
          case Rs_normal:
            GetWindowRecord(mwn,prevRestAccr);
//            if (prevRestAccr.OKFlag!=0) then begin
//              CloseWindow(wn);
//              goto LProceedChangeDiscountMatrixNPTSSClassExecute;
//            end;
            if (prevRestAccr.Invalid!=0) then begin
              CloseWindow(wn);
              goto LProceedChangeDiscountMatrixNPTSSClassExecute;
            end;
        end;
        RestAccr.RebCode = RepSpec.FirstAcc;
        RestAccVc_PasteRebCode(RestAccr);
        PutWindowRecord(mwn,RestAccr);
        RestAccDClass_RefreshStringList(mwn,RestAccr);
        ReRunWindowDef(mwn);
        CloseWindow(wn);
        //WindowFieldGoto(mwn,RestAccr,-1,"ivcashcommand",true);
//      WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false); 
        
    end;
  end;
LProceedChangeDiscountMatrixNPTSSClassExecute:;  
  return;
end;

global
updating procedure ProceedChangeDiscountMatrixNPTSSClass()
begin  
  ProceedChangeDiscountMatrixNPTSSClassExecute(CurWindow);
  return;
end;

global
updating function boolean ChangeAddressNPTSSClassOnOKWindow(integer wn)
begin
  ProceedChangeAddressNPTSSClassExecute(wn);
  ChangeAddressNPTSSClassOnOKWindow = false;
  return;
end;

global
procedure IVDClassTouchScreenChangeAddress()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record IVVc IVr;
  Boolean testf;
  
  mwn = CurWindow;
  RecordClear(RepSpec);
  GetWindowRecord(mwn,IVr);
  testf = true;
  if (IVr.OKFlag!=0) then begin testf = false; end;
  if (IVr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    RepSpec.f6 = IVr.Addr0;
    RepSpec.f1 = IVr.Addr1;
    RepSpec.f2 = IVr.Addr2;
    RepSpec.f3 = IVr.Addr3;
    RepSpec.f4 = IVr.InvAddr3;
    RepSpec.f5 = IVr.InvAddr4;
    RepSpec.f12 = IVr.VATNr;
    wn = OpenWindow("ChangeAddressNPTSIVCashSClass",0,mwn,"","",RepSpec);
    WindowFieldGoto(wn,RepSpec,-1,"f1",false);    
  end;
  return;
end;

global
procedure IVDClassTouchScreenChangeDiscountMatrix()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record IVVc IVr;
  Boolean testf;
  
  mwn = CurWindow;
  RecordClear(RepSpec);
  GetWindowRecord(mwn,IVr);
  testf = true;
  if (IVr.OKFlag!=0) then begin testf = false; end;
  if (IVr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    RepSpec.FirstAcc = IVr.RebCode;
    wn = OpenWindow("ChangeDiscountMatrixNPTSIVCashSClass",0,mwn,"","",RepSpec);
    WindowFieldGoto(wn,RepSpec,-1,"FirstAcc",false);    
  end;
  return;
end;

global
updating procedure IVDClassTouchScreenOpenSession()
begin
  OpenPOSSessionsm;
  return;
end;

global
updating procedure IVDClassTouchScreenCloseSession()
begin
  ClosePOSSessionsm;
  return;
end;

global
procedure IVDClassTouchScreenPutCashFloat()
begin
  POSMoneyInsm;
  return;
end;

global
procedure IVDClassTouchScreenGetCashFloat()
begin
  POSMoneyOutsm;
  return;
end;

global
procedure IVDClassTouchScreenCashupReport()
begin
  IVCashCashupRnsm;
  return;
end;

global
updating procedure IVDClassTouchScreenCreateActivity()
begin
  IVDClassNewActivity;
  return;
end;

global
procedure IVDClassTouchScreenOpenCalendar()
begin
  IVDClassOpenCalendar;
  return;
end;

global
procedure IVDClassTouchScreenReturn()
begin
  IVDClassToolIVReturn;
  return;
end;

global
updating procedure IVDClassTouchScreenPrint()
begin
  record IVVc IVr;

  PrintIVReceiptDsm;
//  if (WindowDoOK(CurWindow,0)) then begin
//    IVDClassPrint(CurWindow,false);
//  end;
  return;
end;

global
procedure IVDClassTouchScreenReturnReason()
begin
  Integer wn,mwn,line,rownr;
  record RcVc RepSpec;
  record IVVc IVr;
  string 255 tstr;
  Boolean testf;
  record StandProblemVc SPr;
  
  mwn = CurWindow;
  RecordClear(RepSpec);
  GetWindowRecord(mwn,IVr);
  testf = true;
  if (IVr.OKFlag!=0) then begin testf = false; end;
  if (IVr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    RepSpec.f1 = PushButtonTag;
    if (nonblank(RepSpec.f1)) then begin
      SPr.Code = RepSpec.f1;
      if (ReadFirstMain(SPr,1,true)) then begin
        RepSpec.f2 = SPr.Comment1;
      end;
    end;
    wn = OpenWindow("ReturnReasonNPTSSClass",0,mwn,"","",RepSpec);
    WindowFieldGoto(wn,RepSpec,-1,"f1",false);    
  end;
  return;
end;

global
procedure IVDClassTouchScreenEditCustomerRecord()
begin
  record CUVc CUr;
  record IVVc IVr;
  Integer wn,nwn;
  
  wn = CurWindow;
  GetWindowRecord(wn,IVr);
  CUr.Code = IVr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    nwn = OpenWindow("CUDClass",0,wn,"","",CUr);
  end;
  return;
end;

global
procedure IVDClassTouchScreenEditDate()
begin
  record IVVc IVr;
  Integer wn,nwn;
  record RcVc RepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,IVr);
  RepSpec.d1 = IVr.InvDate;
  nwn = OpenWindow("ChangeDateNPTSSClass",0,wn,"","",RepSpec);
  return;
end;
