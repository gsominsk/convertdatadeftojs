external function Boolean HasModCO();
remote function Integer IVTestApprovalStatus(record IVVc);
remote updating function LongInt CancelApprovalRequest(string,string,var Integer);
remote updating function Integer RequestApproval_IVVc(record IVVc,var record RcVc,var Integer);
external procedure SetupCustPS2Rn(string,var record RcVc);
remote function Boolean GetNextItemNr(var string);
remote function Boolean GetNextCustNr(var string);
external procedure ActVcRecordDefClient(var record ActVc);
external function string 255 LocalMachinePaymentMode(string,Integer,string,string,string);
remote updating function Boolean MakeActFromIV(var record IVVc,var record ActVc);
external function Integer TestEinvoiceinQueue(LongInt);
external function integer GetSelectedPOSItemRowIndex(integer);
external procedure WindowFieldGotoForTouchScreen(Integer,Integer,string,Boolean);
//external function Boolean GSXAutoEnrollment(string,record IVVc,Integer,var string);
external function boolean GSXWarrantyStatus(string,string,date,array string,integer,var record SVOSerVc,var record NotepadVc,var record NotepadVc,var string);
external updating function boolean GSXLogin(string,string,string,var string,var string);
external function Integer CountObjects(string);
external function string 255 POSCommandText(Integer,Boolean);
remote procedure SeparateVATIVForNoVAT(var record VATIVVc,var record VATIVVc);
remote function Boolean TestSeparateVATIVFromIVForNoVAT(record IVVc);
external function Integer OpenArtStat(Integer,record RcVc,Boolean);
external procedure OpenCCPayIngenicoOClass(Integer,string,string,LongInt,val,val,string);
external procedure OpenCCPayYomaniBanksysOClass(Integer,string,string,LongInt,val,val,string);
external procedure OpenCCPayVerifoneBanksysOClass(Integer,string,string,LongInt,val,val,string);
external function LongInt IVDefaultsClient(var record IVVc,record IVVc,LongInt,LongInt);
external function Boolean FindLocalSerialPortDevice(Integer,LongInt,string,var record LSerialPortDeviceVc);
external updating function Boolean IVVc_PrintToFiscalControlUnit(var record IVVc);
external function Integer TestVATIVCorrectionAllowed(record IVVc);
external function Boolean GetWHTaxRow(string,var row WHTaxBlock);
external function Boolean IVPrintReceipt(Integer,var record IVVc,var record IVVc,Integer,Boolean,Boolean,Integer,Integer);
external updating procedure IVVc_PrintToFiscalPrinter(var record IVVc,Boolean);
remote function Integer IVVc_CalcRetentionLine(var record IVVc,var val,var string,var string);
remote function Integer VIVc_CalcRetentionLine(var record IVVc,var val,var string,var string);
external function roundmode DefaultRoundMode();
external procedure OpenCashDrawer_IVVc(record IVVc);
remote procedure RestPMOtherPayRemote_RestAcc(var record RestAccVc,string,Integer);
remote procedure RestPMOtherPayRemote_IV(var record IVVc,string,Integer);
external procedure SubCashRows_IVVc(record IVVc,Boolean,var val,var val);
external procedure OpenCCPayRahaxiDClass(Integer,Integer,LongInt,val,val,string);
external procedure OpenCCPaySteriaDClass(Integer,Integer,LongInt,val,val,string);
external procedure RecalcIVSubtotal(var record IVVc);
remote updating function Integer RecordAction_raPasteInvInCOCUService(var record COCUServiceVc,var record IVVc,var record IVVc);
external procedure IVDchsum(var record IVVc,Integer);
external function Boolean IVDchrsum(var record IVVc,Integer);
remote function Integer CreateCreditNoteIV(record IVVc,Integer,var record IVVc,string,Boolean);
remote function Boolean CreateCredManIV(var record CredManVc,Boolean);
remote procedure ChequeIVsmRemote(var record IVVc,string,Integer);
remote procedure CashIVsmRemote(var record IVVc,string,Integer);
remote function Boolean AddRepaLine(var record IVVc,Boolean,Integer,var val);
external function Boolean TouchScreenLook();
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
remote updating function LongInt RecordAction_raPasteIVInFEIV(var record FEIVVc,LongInt);
remote updating function Integer UpdateTRVATIV(record IVVc,var record VATIVVc,Integer);
remote procedure RecalcDiscountIVD(var record IVVc);
remote procedure RecalculetWeightVolumeIVVc(var record IVVc,Boolean);
remote procedure IVDUpdatePrices(var record IVVc,Boolean);
remote updating procedure RraPasteInvInEDIInv(var record EDIIVVc,var LongInt);
remote updating function Integer RecordAction_raPasteInvInCO(var record COVc,var record IVVc);
external procedure RecordActionIV_Print(var record IVVc,string,string,Integer,Boolean);
external procedure RecActionIV_rlCashInOutDPrint(var record IVVc);
remote procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);
external procedure SendArtStat(string,string,string,val,val,val,Date,Integer);
external procedure CalcProc(val,val,var val);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external procedure GetRecepy(string,var string);
remote procedure IVSumup(var record IVVc,Boolean);
external procedure DisplayIVSubTotalAction(record IVVc);
remote function Boolean DoCLInFromIVDRemote(record IVVc,var record CLInVc);
remote function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
remote function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external updating function Boolean CCPayIVDWithCardDataAndPM(Integer,string,Integer,string);

global
procedure DoMgrsDiscOverrideIVDsm(Integer wn,Integer rownr)
begin
  Integer nwn,mwn;
  record RcVc RepSpec;
  record IVVc IVr;
  row IVVc IVrw;
  
  if (rownr>=0) then begin
    GetWindowRecord(wn,IVr);
    MatRowGet(IVr,rownr,IVrw);
    RepSpec.f1 = IVrw.ArtCode;
    RepSpec.AccStr = "";
    RepSpec.FirstAcc = "";
    RepSpec.long1 = WindowActiveRow(wn);
    nwn = OpenWindow("MgrsDiscOverrideOClass",0,wn,"","",RepSpec);
  end else begin
    MessageBox(0,USetStr(22057));
  end;
  return;
end;

global
procedure MgrsDiscOverrideIVDsm()
begin
  Integer wn;
  Integer rownr;
  
  wn = CurWindow;
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    DoMgrsDiscOverrideIVDsm(wn,rownr);
  end else begin
    MessageBox(0,USetStr(22057));
  end;
  return;
end;

global
procedure MgrsDiscOverrideIVCashDsm()
begin
  Integer wn,nwn,mwn;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer rownr;
  
  wn = CurWindow;
  GetWindowRecord(wn,IVCashr);
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    MatRowGet(IVCashr,WindowActiveRow(wn),IVCashrw);
    RepSpec.f1 = IVCashrw.ArtCode;
    RepSpec.AccStr = "";
    RepSpec.FirstAcc = "";
    RepSpec.long1 = WindowActiveRow(wn);
    nwn = OpenWindow("MgrsDiscOverrideOClass",0,wn,"","",RepSpec);
  end else begin
    MessageBox(0,USetStr(22057));
  end;
  return;
end;

global
updating function Boolean MgrsDiscOverrideOClassOnOKWindow(Integer wn)
begin
  Boolean closef,testf,dummyf;
  record RcVc RepSpec;
  record IVVc IVr;
  row IVVc IVrw;
  record UserVc Userr;
  integer rwcnt,mwn;
  val price,discountprice,t;
  string 255 errstr,tstr;
  record INVc INr;
  string 255 taxtemplatecode;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  record ORVc ORr;
  row ORVc ORrw;
  Time blankt;
  record QTVc QTr;
  row QTVc QTrw;
  
  GetWindowRecord(wn,RepSpec);
  mwn = MotherWindow(wn);
  switch (GetWindowClass(mwn)) begin
    case "IVDClass":
      GetWindowRecord(mwn,IVr);
      if (RepSpec.long1<0) then begin
        RepSpec.long1 = GetSelectedPOSItemRowIndex(mwn);
      end;
      rwcnt = MatRowCnt(IVr);
      if (RepSpec.long1>=0) and (RepSpec.long1<MatRowCnt(IVr)) then begin
        MatRowGet(IVr,RepSpec.long1,IVrw);
        if (IVrw.ArtCode==RepSpec.f1) then begin
          Userr.Code = RepSpec.AccStr;
          if (ReadFirstMain(Userr,1,true)) then begin
            if (CalcPassword(RepSpec.FirstAcc,Userr.Code,0)==Userr.DiscPassword) then begin
              testf = true;
              if (nonblank(Userr.MinPLCode)) then begin
                if (ReadFirstItem(IVrw.ArtCode,INr,true,true)) then begin
                  if (GetItemPriceDiscount3(IVrw.ArtCode,IVrw.Quant,INr,IVr.CurncyCode,
                                      IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,
                                      IVr.LangCode,IVr.CustCat,Userr.MinPLCode,IVr.RebCode,
                                      price,INr.Name,t,tstr,t,tstr,
                                      IVr.ExportFlag,dummyf,IVr.TransDate,IVr.TransTime,IVr.CustCode,true,dummyf,IVr.PayDeal,tstr,t,IVr.Region,"",taxtemplatecode)) then begin
                    discountprice = IVrw.Sum/IVrw.Quant;
                    if (price>discountprice) then begin 
                      errstr = discountprice;
                      errstr = errstr & USetStr(20111) & price;
                      MessageBox(20112,errstr);
                      testf = false;
                    end;
                  end;
                end;
              end;
              if (testf) then begin
                IVrw.DiscApprovedBy = Userr.Code;
                closef = true;
              end;
            end else begin
              MessageBox(2049,"");
              goto LMgrsDiscOverrideOClassOnOKWindow;
            end;
          end else begin 
            MessageBox(2049,"");
            goto LMgrsDiscOverrideOClassOnOKWindow;
          end;
        end;
        MatRowPut(IVr,RepSpec.long1,IVrw);
      end;
    case "IVCashDClass":
      GetWindowRecord(mwn,IVCashr);
      rwcnt = MatRowCnt(IVCashr);
      if (RepSpec.long1>=0) and (RepSpec.long1<MatRowCnt(IVCashr)) then begin
        MatRowGet(IVCashr,RepSpec.long1,IVCashrw);
        if (IVCashrw.ArtCode==RepSpec.f1) then begin
          Userr.Code = RepSpec.AccStr;
          if (ReadFirstMain(Userr,1,true)) then begin
            if (CalcPassword(RepSpec.FirstAcc,Userr.Code,0)==Userr.DiscPassword) then begin
              testf = true;
              if (nonblank(Userr.MinPLCode)) then begin
                if (ReadFirstItem(IVCashrw.ArtCode,INr,true,true)) then begin
                  if (GetItemPriceDiscount3(IVCashrw.ArtCode,IVCashrw.Quant,INr,IVCashr.CurncyCode,
                                      IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,
                                      IVCashr.LangCode,IVCashr.CustCat,Userr.MinPLCode,IVCashr.RebCode,
                                      price,INr.Name,t,tstr,t,tstr,
                                      0,dummyf,IVCashr.TransDate,IVCashr.TransTime,IVCashr.CustCode,true,dummyf,IVCashr.PayDeal,tstr,t,IVCashr.Region,"",taxtemplatecode)) then begin
                    discountprice = IVCashrw.Sum/IVCashrw.Quant;
                    if (price>discountprice) then begin 
                      errstr = discountprice;
                      errstr = errstr & USetStr(20111) & price;
                      MessageBox(20112,errstr);
                      testf = false;
                    end;
                  end;
                end;
              end;
              if (testf) then begin
                IVCashrw.DiscApprovedBy = Userr.Code;
                closef = true;
              end;
            end else begin
              MessageBox(2049,"");
              goto LMgrsDiscOverrideOClassOnOKWindow;
            end;
          end else begin 
            MessageBox(2049,"");
            goto LMgrsDiscOverrideOClassOnOKWindow;
          end;
        end;
        MatRowPut(IVCashr,RepSpec.long1,IVCashrw);
      end;
    case "ORDClass":
      GetWindowRecord(mwn,ORr);
      rwcnt = MatRowCnt(ORr);
      if (RepSpec.long1>=0) and (RepSpec.long1<MatRowCnt(ORr)) then begin
        MatRowGet(ORr,RepSpec.long1,ORrw);
        if (ORrw.ArtCode==RepSpec.f1) then begin
          Userr.Code = RepSpec.AccStr;
          if (ReadFirstMain(Userr,1,true)) then begin
            if (CalcPassword(RepSpec.FirstAcc,Userr.Code,0)==Userr.DiscPassword) then begin
              testf = true;
              if (nonblank(Userr.MinPLCode)) then begin
                if (ReadFirstItem(ORrw.ArtCode,INr,true,true)) then begin
                  if (GetItemPriceDiscount3(ORrw.ArtCode,ORrw.Quant,INr,ORr.CurncyCode,
                                      ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,
                                      ORr.LangCode,ORr.CustCat,Userr.MinPLCode,ORr.RebCode,
                                      price,INr.Name,t,tstr,t,tstr,
                                      ORr.ExportFlag,dummyf,ORr.OrdDate,blankt,ORr.CustCode,true,dummyf,ORr.PayDeal,tstr,t,ORr.Region,"",taxtemplatecode)) then begin
                    discountprice = ORrw.Sum/ORrw.Quant;
                    if (price>discountprice) then begin 
                      errstr = discountprice;
                      errstr = errstr & USetStr(20111) & price;
                      MessageBox(20112,errstr);
                      testf = false;
                    end;
                  end;
                end;
              end;
              if (testf) then begin
                ORrw.DiscApprovedBy = Userr.Code;
                closef = true;
              end;
            end else begin
              MessageBox(2049,"");
              goto LMgrsDiscOverrideOClassOnOKWindow;
            end;
          end else begin 
            MessageBox(2049,"");
            goto LMgrsDiscOverrideOClassOnOKWindow;
          end;
        end;
        MatRowPut(ORr,RepSpec.long1,ORrw);
      end;
    case "QTDClass":
      GetWindowRecord(mwn,QTr);
      rwcnt = MatRowCnt(QTr);
      if (RepSpec.long1>=0) and (RepSpec.long1<MatRowCnt(QTr)) then begin
        MatRowGet(QTr,RepSpec.long1,QTrw);
        if (QTrw.ArtCode==RepSpec.f1) then begin
          Userr.Code = RepSpec.AccStr;
          if (ReadFirstMain(Userr,1,true)) then begin
            if (CalcPassword(RepSpec.FirstAcc,Userr.Code,0)==Userr.DiscPassword) then begin
              testf = true;
              if (nonblank(Userr.MinPLCode)) then begin
                if (ReadFirstItem(QTrw.ArtCode,INr,true,true)) then begin
                  if (GetItemPriceDiscount3(QTrw.ArtCode,QTrw.Quant,INr,QTr.CurncyCode,
                                      QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,
                                      QTr.LangCode,QTr.CustCat,Userr.MinPLCode,QTr.RebCode,
                                      price,INr.Name,t,tstr,t,tstr,
                                      QTr.ExportFlag,dummyf,QTr.QTDate,blankt,QTr.CustCode,true,dummyf,QTr.PayDeal,tstr,t,QTr.Region,"",taxtemplatecode)) then begin
                    discountprice = QTrw.Sum/QTrw.Quant;
                    if (price>discountprice) then begin 
                      errstr = discountprice;
                      errstr = errstr & USetStr(20111) & price;
                      MessageBox(20112,errstr);
                      testf = false;
                    end;
                  end;
                end;
              end;
              if (testf) then begin
                QTrw.DiscApprovedBy = Userr.Code;
                closef = true;
              end;
            end else begin
              MessageBox(2049,"");
              goto LMgrsDiscOverrideOClassOnOKWindow;
            end;
          end else begin 
            MessageBox(2049,"");
            goto LMgrsDiscOverrideOClassOnOKWindow;
          end;
        end;
        MatRowPut(QTr,RepSpec.long1,QTrw);
      end;
  end;
LMgrsDiscOverrideOClassOnOKWindow:;
  if (closef) then begin
    switch (GetWindowClass(mwn)) begin
      case "IVDClass":
        PutWindowRecord(mwn,IVr);
      case "IVCashDClass":
        PutWindowRecord(mwn,IVCashr);
      case "ORDClass":
        PutWindowRecord(mwn,ORr);
      case "QTDClass":
        PutWindowRecord(mwn,QTr);
    end;
    CloseWindow(wn);
  end;
  MgrsDiscOverrideOClassOnOKWindow = false;
  return;
end;

global
updating procedure CorrectionIVsm()
begin
  record IVVc tmpIVr;
  record IVVc oldIVr;
  record IVVc IVCreditr;
  record IVVc IVr;
  row IVVc IVrw;
  row IVVc tmpIVrw;
  Integer wn,rwcnt,i,nwn;

  wn = CurWindow;

//  KeyPadEnter(wn);
  DeselectWindow(wn,false);  
  GetWindowRecord(wn,IVr);
  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
    if (IVr.OKFlag==0) then begin
      RecordCopy(oldIVr,IVr);
      rwcnt = MatRowCnt(IVr);
      ClearRow(IVr,IVrw,kInvoiceRowTypeNormal);
      IVrw.stp = kInvoiceRowTypeNormal;
      IVrw.Spec = USetStr(2078);
      MatRowInsert(IVr,1,IVrw);
      ClearRow(IVr,IVrw,kInvoiceRowTypeNormal);
      IVrw.stp = kInvoiceRowTypeNormal;
      IVrw.Spec = USetStr(2079);
      MatRowPut(IVr,rwcnt+1,IVrw);
      for (i=1;i<rwcnt;i=i+1) begin
        MatRowGet(oldIVr,i,IVrw);
        IVrw.stp = kInvoiceRowTypeCorrection;
        MatRowPut(IVr,rwcnt+1+i,IVrw);      
      end;
      if (IVr.CredInv!=-1) then begin
        tmpIVr.SerNr = IVr.CredInv;
        if (ReadFirstMain(tmpIVr,1,true)) then begin
          IVr.Location = tmpIVr.Location;
          rwcnt = MatRowCnt(IVr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVr,i,IVrw);
            if (IVrw.CreditedRow>=0) then begin
              MatRowGet(tmpIVr,IVrw.CreditedRow,tmpIVrw);
              IVrw.Location = tmpIVrw.Location;
            end else begin            
              if (nonblank(IVrw.Location)) then begin
                IVrw.Location = tmpIVr.Location;
              end;
            end;
            MatRowPut(IVr,i,IVrw);      
          end;
        end;
      end;
      IVSumup(IVr,true);
      PutWindowRecord(wn,IVr);  
      if (IVr.CredInv!=-1) then begin
        tmpIVr.CredInv = IVr.CredInv;
        if (ReadFirstKey("CredInv",tmpIVr,1,true)) then begin
          if (tmpIVr.SerNr!=IVr.SerNr) and (tmpIVr.SerNr!=-1) then begin
            MessageBox(2176,"");
          end;
        end;
      end;
    end;
  end else begin
    if ((IVr.OKFlag!=0) and (IVr.InvType!=kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales)) then begin
      if (CreateCreditNoteIV(IVr,kInvoiceTypeCredit,IVCreditr,"",true)==0) then begin
/*    
moved to CreateCreditNoteIV
        RecordCopy(oldIVr,IVCreditr);
        rwcnt = MatRowCnt(IVCreditr);
        ClearRow(IVCreditr,IVrw,1);
        IVrw.stp = kInvoiceRowTypeNormal;
        IVrw.Spec = USetStr(2078);
        MatRowInsert(IVCreditr,1,IVrw);
        ClearRow(IVCreditr,IVrw,11);
        IVrw.stp = kInvoiceRowTypeNormal;
        IVrw.Spec = USetStr(2079);
        MatRowPut(IVCreditr,rwcnt+1,IVrw);
        for (i=1;i<rwcnt;i=i+1) begin
          MatRowGet(oldIVr,i,IVrw);
          IVrw.stp = kInvoiceRowTypeCorrection;
          MatRowPut(IVCreditr,rwcnt+1+i,IVrw);      
        end;
        IVSumup(IVCreditr,true);
*/        
        if (IVCreditr.CredInv!=-1) then begin
          tmpIVr.CredInv = IVCreditr.CredInv;
          if (ReadFirstKey("CredInv",tmpIVr,1,true)) then begin
            if (tmpIVr.SerNr!=IVCreditr.SerNr) and (tmpIVr.SerNr!=-1) then begin
              MessageBox(2176,"");
            end;
          end;
        end;
        nwn = OpenWindow("IVDClass",1,0,"","",IVCreditr);
        if (WindowDoOK(nwn,0)) then begin
          UpdateBrowses("IVVc");
        end;
      end;
    end;
  end;
  return;
end;

global
function Boolean IVDClassSwitchRow(Integer wn,Integer rownr)
begin        
  record IVVc IVr;  
  row IVVc IVrw; 
  row IVVc IV2rw; 
  Integer i,rwcnt;
  Boolean res;
  val t,tproc,unitprdisc,s,rowsum;
  string 255 recepy;
  string 255 location;
  record TaxMatrixVc TMr;

  res = true;
  GetWindowRecord(wn,IVr);
  rwcnt = MatRowCnt(IVr);  
  if ((rownr<rwcnt) and (rownr>=0)) then begin
    MatRowGet(IVr,rownr,IVrw);
    if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
      location = IVrw.Location;
      if (blank(location)) then begin
        location = IVr.Location;
      end;
      t = IVrw.rowGP;
      s = MulRateToBase1(IVr.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
      UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
      FindSalesExVat(TMr,IVrw.VATCode,s,IVr.InclVAT,IVr.NoTAXonVAT,rowsum);
      unitprdisc = IVrw.Sum/IVrw.Quant;
      unitprdisc = Round(unitprdisc,DefaultRoundMode);
      recepy = IVrw.Recepy;
/*  This makes one extra call, I can see why but we need another solution
      if (blank(recepy)) then begin
        GetRecepy(IVrw.ArtCode,recepy);
      end;  
*/
      for (i=rownr+1;i<rwcnt;i=i+1) begin
        MatRowGet(IVr,i,IV2rw);
        switch (IV2rw.stp) begin
          case kInvoiceRowTypeStructuredItemComponent:
            if (IV2rw.MotherArtCode==IVrw.ArtCode) then begin
              t = t + IV2rw.rowGP;
            end;
          otherwise
            i = rwcnt;
        end;
      end;    
    end;
    CalcProc(rowsum,t,tproc);
    SendArtStat(IVrw.ArtCode,location,recepy,t,tproc,unitprdisc,IVr.TransDate,0);
  end;
  SetWindowNameArg(wn,IVrw.ArtCode & ":" & location);
  IVDClassSwitchRow = res;  
  return;
end;

global
procedure ItemStatusIVDsm()
begin
  Integer wn,nwn;
  Boolean testf;
  record RcVc RepSpec;
  
  wn = CurWindow;
  nwn = OpenArtStat(wn,RepSpec,true);
  testf = IVDClassSwitchRow(wn,WindowActiveRow(wn));
  return;
end;

global
procedure DoCLInFromIVD()
begin
  record IVVc IVr;
  record CLInVc CLInr;
  Integer wn,nwn;
  Integer normalstate;

  normalstate = 0;
  wn = CurWindow;
  if (WindowState(wn)==normalstate) then begin
    GetWindowRecord(wn,IVr)
    if (IVr.OKFlag!=0) then begin    
      if (DoCLInFromIVDRemote(IVr,CLInr)) then begin
        nwn = OpenWindow("CLInDClass",1,0,"","",CLInr);
      end else begin
        Beep;
      end;
    end else begin
      Beep;
    end;
  end else begin
    Beep;
  end;
  return;
end;

global
updating procedure VATCorrectionIVsm()
begin
  record IVVc IVr;
  record VATIVVc VATIVr;
  record VATIVVc VATIVnoVATr;
  Integer wn,nwn;
  Integer err;
  Boolean SeparateVATIVFromIVForNoVAT;
  record VATIVTBlock VATIVTb;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,IVr);
    if (IVr.OKFlag==0) then begin
      MessageBox(2072,"");
      goto LVATCorrectionIVsm;
    end;
    if (IVr.Invalid!=0) then begin
      MessageBox(1282,"");
      goto LVATCorrectionIVsm;
    end;
    if (IVr.ARonTR==0) then begin
      MessageBox(20938,"");
      goto LVATCorrectionIVsm;
    end;
    if (IVr.IPBookVAT!=0) then begin
      MessageBox(24071,"");
      goto LVATCorrectionIVsm;
    end;
    err = TestVATIVCorrectionAllowed(IVr);
    if (err!=0) then begin
      MessageBox(err,"");
      goto LVATCorrectionIVsm;
    end;
    err = UpdateTRVATIV(IVr,VATIVr,0);
    if (err==0) then begin
      if (MatRowCnt(VATIVr)>0) then begin
        BlockLoad(VATIVTb);
        if (VATIVTb.SeparateVATIVFromIVForNoVAT!=0) then begin
          SeparateVATIVFromIVForNoVAT = TestSeparateVATIVFromIVForNoVAT(IVr);
        end;
        if (SeparateVATIVFromIVForNoVAT) then begin
          SeparateVATIVForNoVAT(VATIVr,VATIVnoVATr);
          nwn = OpenWindow("VATIVDClass",1,0,"","",VATIVr);
          nwn = OpenWindow("VATIVDClass",1,0,"","",VATIVnoVATr);
        end else begin
          nwn = OpenWindow("VATIVDClass",1,0,"","",VATIVr);
        end;
      end;
    end else begin
      MessageBox(err,"");
    end;
  end;
LVATCorrectionIVsm:;  
  return;
end;

global
procedure PrintCashInOutIVDsm()
begin
  record IVVc IVr;
  Integer wn,nwn;
  Integer normalstate;

  normalstate = 0;
  wn = CurWindow;
  if (WindowState(wn)==normalstate) then begin
    GetWindowRecord(wn,IVr);
    RecActionIV_rlCashInOutDPrint(IVr);
  end;
  return;
end;

global
function Boolean IVDClassPrint(Integer wn,Boolean previewf)
begin
  record IVVc IVr;
  Integer normalmode,tf,err;
  string 20 docname;
  record LocalMachineBlock LMb;
  record LSerialPortDeviceVc LSPDr;
  record IVVc credIVr;
  Boolean testf,errf;

  BlockLoad(LMb); 
  normalmode = 0;//Rs_normal
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVr); 
  testf = true;
  if (PreviewFlag==false) then begin
    err = TestEinvoiceinQueue(IVr.SerNr);
  end;
  if (err!=0) then begin
    goto LIVDClassPrintErr;
  end;
  if (UserCanAction("PrintPreviewNotApproved",false)==false) then begin
    err = IVTestApprovalStatus(IVr);
  end;
LIVDClassPrintErr:;
  if (err!=0) then begin errf = true; end;
  if (err==22402) then begin
    if (IVr.OKFlag!=0) then begin
       errf = false;
    end;
  end;
  if (errf) then begin
    MessageBox(err,"");
    testf = false;
  end;
  if (testf) then begin
    docname = "InvForm";
    switch (IVr.InvType) begin
      case kInvoiceTypeCash: docname = "CashInvForm";
      case kInvoiceTypeCashInvoiceReceiptPRT: docname = "CashInvRecPRTForm";
      case kInvoiceTypeCredit: docname = "CredInvForm";
      case kInvoiceTypeInterest: docname = "IIInvForm";
      case kInvoiceTypeDebit: docname = "IIInvForm";
      case kInvoiceTypeCreditSpecialSales: docname = "CredInvForm";
    end;
    switch (IVr.InvType) begin
      case kInvoiceTypeCashInvoiceReceiptPRT:
        goto LkInvoiceTypeCash;
      case kInvoiceTypeCash:
LkInvoiceTypeCash:;      
        if (HasLocalization("SWE")) then begin
          if (FindLocalSerialPortDevice(kSerialPortDeviceClassFiscalControlUnit,kSerialPortDeviceModelFiscPrinterCLEANCASHTypeA,LMb.LocalMachineCode,LSPDr)) then begin  
            goto LIVDClassPrint;
          end else begin
            if (FindLocalSerialPortDevice(kSerialPortDeviceClassFiscalControlUnit,kSerialPortDeviceModelFiscPrinterCLEANCASHTypeC,LMb.LocalMachineCode,LSPDr)) then begin  
              goto LIVDClassPrint;
            end;
          end;
        end;
      case kInvoiceTypeCreditSpecialSales: goto LkInvoiceTypeCredit;
      case kInvoiceTypeCredit:
        LkInvoiceTypeCredit:;
        credIVr.SerNr = IVr.CredInv;
        if (ReadFirstMain(credIVr,1,true)) then begin
          if (credIVr.InvType==kInvoiceTypeCash) then begin
            if (HasLocalization("SWE")) then begin
              if (FindLocalSerialPortDevice(kSerialPortDeviceClassFiscalControlUnit,kSerialPortDeviceModelFiscPrinterCLEANCASHTypeA,LMb.LocalMachineCode,LSPDr)) then begin  
                goto LIVDClassPrint;
              end else begin
                if (FindLocalSerialPortDevice(kSerialPortDeviceClassFiscalControlUnit,kSerialPortDeviceModelFiscPrinterCLEANCASHTypeC,LMb.LocalMachineCode,LSPDr)) then begin  
                  goto LIVDClassPrint;
                end;
              end;
            end;
          end;
        end;
    end;
    if ((IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeNormalSpecialSales) or (IVr.InvType==kInvoiceTypeDownpayment)) then begin
      if (nonblank(IVr.PRCode)) then begin    
        docname = "ProjInvForm";
      end;
    end;
    if ((WindowState(wn)==normalmode) and (previewf==false)) then begin
      RecordActionIV_Print(IVr,"",docname,0,true);//RecidAction(rlIVLPrint,IVVc,recid,NIL);
    end else begin  
      tf = IVr.OKFlag;
      if (previewf==false) then begin
        IVr.OKFlag = 0;
      end else begin
        if (HasLocalization("POL")==false) then begin
          IVr.OKFlag = 1;
        end;
      end;
      if (PrintDocument(IVr,docname,true)) then begin end;
      IVr.OKFlag = tf;
    end;
  end;
LIVDClassPrint:; 
  IVDClassPrint = true;
  return;
end;

global
procedure IVInfoIVDsm()
begin
  record IVVc IVr;
  record RcVc RepSpec;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,IVr);
  RepSpec.repname = "IVInfoRn";
  RepSpec.long1 = IVr.SerNr;
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);
  return;
end;

global
procedure EIVStatIVDsm()
begin
  record IVVc IVr;
  record RcVc RepSpec;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,IVr);
  RepSpec.repname = "EIVStatRn";
  RepSpec.long1 = IVr.SerNr;
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);
  return;
end;

global
procedure PrintProformaIVDsm()
begin
  record IVVc IVr;
  Integer wn;
  record LocalMachineBlock LMb;
  record LSerialPortDeviceVc LSPDr;
  boolean printf;

  wn = CurWindow;
  GetWindowRecord(wn,IVr);
  printf = true;
  switch (IVr.InvType) begin
    case kInvoiceTypeCashInvoiceReceiptPRT:
      goto LkInvoiceTypeCash;
    case kInvoiceTypeCash:
LkInvoiceTypeCash:;    
      if (IVr.OKFlag==0) then begin
        if (HasLocalization("SWE")) then begin
          BlockLoad(LMb);
          if (FindLocalSerialPortDevice(kSerialPortDeviceClassFiscalControlUnit,kSerialPortDeviceModelFiscPrinterCLEANCASHTypeA,LMb.LocalMachineCode,LSPDr)) then begin  
            printf = false;
          end else begin
            if (FindLocalSerialPortDevice(kSerialPortDeviceClassFiscalControlUnit,kSerialPortDeviceModelFiscPrinterCLEANCASHTypeC,LMb.LocalMachineCode,LSPDr)) then begin  
              printf = false;
            end;
          end;
        end;
      end;
  end;
  if (printf) then begin
    if (PrintDocument(IVr,"Inv1Form",false)) then begin
    end;
  end;
  return;
end;

global
updating procedure COFromIVDsm()
begin
  record IVVc IVr;
  record IVVc newIVr;
  record COVc COr;
  record COCUServiceVc COCUServicer;
  record COCUServiceBlock COCUb;
  Integer wn,nwn;
  Integer r;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal and HasModCO) then begin
    GetWindowRecord(wn,IVr);
    COr.InvoiceNr = IVr.SerNr;
    if (UserCanAction("InvToCO",true)) then begin
      BlockLoad(COCUb);
      if (COCUb.BlockUsingStdCO==0) then begin
        r = RecordAction_raPasteInvInCO(COr,IVr);
        if (r!=-1) then begin
          if (MatRowCnt(COr)!=0) then begin
            nwn = OpenWindow("CODClass",1,0,"","",COr);
            UpdateBrowses("IVVc");
          end else begin
            Beep;
          end;
        end else begin
          Beep;
        end;
      end else begin
        r = RecordAction_raPasteInvInCOCUService(COCUServicer,IVr,newIVr);
        if (r!=-1) then begin
          nwn = OpenWindow("COCUServiceDClass",1,0,"","",COCUServicer);
          //if (MatRowCnt(newIVr)>0) then begin
          if (r==2) then begin 
            nwn = OpenWindow("IVDClass",1,0,"","",newIVr);
            UpdateBrowses("IVVc");
          end;
          UpdateBrowses("COCUServiceVc");
          UpdateBrowses("CUServiceVc");
        end else begin
          Beep;
        end;
      end;
    end else begin
      MessageBox(1274,StringFromStringSet(3,"InvToCO"));
    end;
  end else begin
    Beep;
  end;
  return;
end;

global
updating procedure DoEDIInvFromIVD()
begin
  record EDIIVVc EDIIVr;
  Integer wn,nwn;
  LongInt r;
  record IVVc IVr;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,IVr);
    if (IVr.Invalid==0) then begin
      EDIIVr.SerNr = IVr.SerNr;
      if (UserCanAction("IVToEDIInv",true)) then begin
        RraPasteInvInEDIInv(EDIIVr,r);//RecAction(raPasteInvInEDIInv,EDIIVVc,&EDIIVr,&r);
        if (r!=-1) then begin
          nwn = OpenWindow("EDIIVDClass",1,0,"","",EDIIVr);//is this the same ? nwn = OpenAndSetAccess("EDIIVVc","EDIIVDClass",0,&EDIIVr,true,0);
        end else begin
          Beep;
        end;
      end;
    end else begin
      MessageBox(1274,StringFromStringSet(3,"IVToEDIInv"));
    end;
  end else begin
    Beep;
  end;
  return;
end;

global 
procedure ConnectToPrepayIVDsm()
begin
  record IVVc IVr;
  row IVVc IVrw;
  Integer wn,rownr;
  
  wn = CurWindow;
  KeyPadEnter(wn);
  GetWindowRecord(wn,IVr);
  DeselectWindow(wn,false);
  if (IVr.OKFlag==0) then begin
    rownr = WindowActiveRow(wn);
    if (rownr<0) then begin rownr = 0; end;
    ClearRow(IVr,IVrw,kInvoiceRowTypePrepayment);
    IVrw.Spec = USetStr(1288);
    if (IVr.InvType==kInvoiceTypeDownpayment) then begin
      rownr = MatRowCnt(IVr);
      MatRowPut(IVr,rownr,IVrw);
    end else begin
      MatRowInsert(IVr,rownr,IVrw);
    end;
    PutWindowRecord(wn,IVr);
    WindowFieldGoto(wn,IVr,rownr,"CUPNr",true);
  end;
  return;
end;

global 
procedure UpdatePricesIVDsm()
begin
  record IVVc IVr;
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVr);
  if (IVr.OKFlag==0) then begin
    IVDUpdatePrices(IVr,false);
    PutWindowRecord(wn,IVr);
  end;
  return;
end;

global 
procedure CreateInstalmentsIVDsm()
begin
  record IVVc IVr;
  record RcVc RepSpec;
  Integer wn,nwn;
  
  wn = CurWindow;
  GetWindowRecord(wn,IVr);
  if (WindowState(wn)==0)then begin//Rs_normal
    nwn = OpenWindow("MakeInstalVClass",1,0,"","",RepSpec);
    DeselectWindow(nwn,false);
    RepSpec.repname = "MakeInstalMn";
    RepSpec.FirstVer = IVr.SerNr;
    RepSpec.long1 = -1;
    RepSpec.long2 = -1;
    RepSpec.vals0 = blankval;
    RepSpec.d1 = CurrentDate;
    PutWindowRecord(nwn,RepSpec);
    SelectWindow(nwn);
  end;
  return;
end;

global
procedure EditInstalmentIVDsm()
begin
  record IVVc IVr;
  record RcVc RepSpec;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,IVr);
  RepSpec.repname = "EditInstallRn";
  RepSpec.long1 = IVr.SerNr;
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);
  return;
end;

global 
procedure RecalcWeightIVDsm()
begin
  record IVVc IVr;
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)==0)then begin//Rs_normal
    GetWindowRecord(wn,IVr);
    if (IVr.OKFlag==0) then begin
      RecalculetWeightVolumeIVVc(IVr,true);
      PutWindowRecord(wn,IVr);
    end;
  end;
  return;
end;

global 
procedure RecalcDiscountIVDsm()
begin
  record IVVc IVr;
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVr);
  if (IVr.OKFlag==0) then begin
    RecalcDiscountIVD(IVr);
    PutWindowRecord(wn,IVr);
  end;
  return;
end;

global
procedure AddInvoiceLineType(Integer arownr,Integer t,Boolean firstf)
begin
  record IVVc IVr;
  row IVVc IVrw;
  Integer wn,rownr,rwcnt;
  
  wn = CurWindow;
  rownr = arownr;
  switch (t) begin
    case kInvoiceRowTypeCashPayment:
      DeselectWindow(wn,false);
    case kInvoiceRowTypeCreditCardPayment:
      DeselectWindow(wn,false);
  end;
  if (rownr<0) then begin
    rownr = WindowActiveRow(wn);
  end;
  GetWindowRecord(wn,IVr);
  if (IVr.OKFlag==0) then begin
    rwcnt = MatRowCnt(IVr);
    if (rownr==-1) then begin
      if (firstf) then begin
        rownr = 0;
      end else begin
        rownr = MatRowCnt(IVr);
      end;
    end else begin
      if (rownr>rwcnt) then begin
        rownr = rwcnt;
      end;
    end;
    ClearRow(IVr,IVrw,t);
    IVrw.Spec = "";
    switch (t) begin
      case kInvoiceRowTypeCashPayment:
        IVrw.PayMode = LocalMachinePaymentMode("",kInvoiceRowTypeCashPayment,IVrw.CurncyCode,IVr.MachineName,IVr.DrawerCode);
      case kInvoiceRowTypeCreditCardPayment:
        IVrw.PayMode = LocalMachinePaymentMode("",kInvoiceRowTypeCreditCardPayment,IVrw.CurncyCode,IVr.MachineName,IVr.DrawerCode);
    end;

    MatRowInsert(IVr,rownr,IVrw);
    PutWindowRecord(wn,IVr);
    switch (t) begin
      case kInvoiceRowTypeHeader:
        WindowFieldGoto(wn,IVr,rownr,"Spec",true);
      case kInvoiceRowTypeCashPayment:
        WindowFieldGoto(wn,IVr,rownr,"Sum",true);
        WindowFieldGoto(wn,IVr,rownr,"Spec",true);
      case kInvoiceRowTypeCreditCardPayment:
        WindowFieldGoto(wn,IVr,rownr,"Sum",true);
        WindowFieldGoto(wn,IVr,rownr,"Spec",true);
    end;
  end;
end;

global
procedure HiddenLineIVDsm()
begin
  if (UserCanAction("HiddenLine",true)) then begin
    AddInvoiceLineType(-1,kInvoiceRowTypeHidden,false);
  end;
  return;
end;

global
procedure HeaderLineIVDsm()
begin
  AddInvoiceLineType(-1,kInvoiceRowTypeHeader,true);
  return;
end;

global
procedure LicStartIVDsm()
begin
  AddInvoiceLineType(-1,kInvoiceRowTypeActivationDate,true);
  return;
end;

global
procedure CreditCardLineIVDsm()
begin
  AddInvoiceLineType(-1,kInvoiceRowTypeCreditCardPayment,false);
  return;
end;

global
procedure CashLineIVDsm()
begin
  AddInvoiceLineType(-1,kInvoiceRowTypeCashPayment,false);
  return;
end;


global
procedure SubTotalLineIVDsm()
begin
  record IVVc IVr;
  row IVVc IVrw;
  Integer wn,i,rwcnt,rownr;
  val pt;
  
  wn = CurWindow;
  rownr = WindowActiveRow(wn);
  if (WindowState(wn)==Rs_normal) then begin
    DoUpdate(wn);
  end;
  if (WindowState(wn)!=Rs_update and WindowState(wn)!=Rs_insert) then begin
    goto LSubTotalLineIVDsm;
  end;
  GetWindowRecord(wn,IVr);
  if (IVr.OKFlag==0) then begin
    rwcnt = MatRowCnt(IVr);
    if ((rownr==-1) or (rownr>rwcnt)) then begin
      rownr = rwcnt;
    end;
    ClearRow(IVr,IVrw,9);
    MatRowInsert(IVr,rownr,IVrw);
    RecalcIVSubtotal(IVr);
    PutWindowRecord(wn,IVr);
  end;
LSubTotalLineIVDsm:;  
  return;
end;

global 
procedure SwitchToBase1IVDsm()
begin
  record BaseCurBlock bascur;
  record IVVc IVr;
  row IVVc IVrw;
  Integer wn,i,rwcnt;
  val rowcost, rowgp;
  record CUVc CUr;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVr);
  if (IVr.InvType==kInvoiceTypeDownpayment) then begin
    MessageBox(20410,"");
    goto LSwitchToBase1IVDsm;
  end;
  BlockLoad(bascur);
  if (nonblank(CUr.CurncyCode)) then begin
    if (CUr.CurncyCode!=bascur.BaseCur1) then begin//cannot make invoice in other curncy than the one on customer card
      goto LSwitchToBase1IVDsm;
    end;
  end;  
  if (IVr.OKFlag==0) and (nonblank(IVr.CurncyCode)) and (IVr.CurncyCode!=bascur.BaseCur1) then begin
    CUr.Code = IVr.CustCode;
    ReadFirstMain(CUr,1,true);
    if (blank(CUr.CurncyCode)) or (CUr.CurncyCode!=IVr.CurncyCode) then begin
      rwcnt = MatRowCnt(IVr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVr,i,IVrw);
        if (nonblank(IVrw.Sum)) then begin
          switch (IVrw.stp) begin
            case kInvoiceRowTypeCorrection:              
              goto LSwitchToBase1IVDsmRowNormal;
            case kInvoiceRowTypeNormal:
LSwitchToBase1IVDsmRowNormal:;            
              rowcost = IVrw.BasePrice;
              rowgp = IVrw.rowGP;
              IVrw.Price = MulRateToBase1(IVr.CurncyCode,IVrw.Price,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
              MatRowPut(IVr,i,IVrw);
              if (IVDchrsum(IVr,i)) then begin
                IVDchsum(IVr,i);
              end; 
              MatRowGet(IVr,i,IVrw);
              IVrw.BasePrice = rowcost;
              IVrw.rowGP = rowgp;
              MatRowPut(IVr,i,IVrw);
            case kInvoiceRowTypeDownpayment:
//currency cannot be difrent , we do update downpayrecived assuming Invoice curncy is same as  Sales Order currency
//              IVrw.Sum = MulRateToBase1(IVr.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
//              MatRowPut(IVr,i,IVrw);
          end;
        end;
      end;
      IVr.CurncyCode = bascur.BaseCur1;
      IVr.FrRate = blankval;
      IVr.ToRateB1 = blankval;
      IVr.ToRateB2 = blankval;
      IVSumup(IVr,true);
      PutWindowRecord(wn,IVr);
    end;
  end;
LSwitchToBase1IVDsm:;
  return;
end;

global 
procedure RepaIVsm()
begin
  record IVVc IVr;
  Integer wn;
  val t;

  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVr);
  if (IVr.OKFlag==0) then begin
    if (AddRepaLine(IVr,TouchScreenLook,0,t)) then begin
      PutWindowRecord(wn,IVr);
    end;
  end;
  return;
end;

global 
updating procedure FirstEventIVDsm()
begin
  record FEIVVc FEIVr;
  record IVVc IVr;
  Integer wn,nwn;
  LongInt r;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    DeselectWindow(wn,false);
    GetWindowRecord(wn,IVr);
    if (IVr.OKFlag!=0) then begin
      r = RecordAction_raPasteIVInFEIV(FEIVr,IVr.SerNr);
      if (r==0) then begin
        nwn = OpenWindow("FEIVDClass",1,0,"","",FEIVr);
      end else begin
        Beep;
      end;
    end else begin
      Beep;
    end;
  end;
  return;
end;

procedure CashPaymentIVActiveField(Integer wn)
begin
  string 255 activefield;
  
  activefield = WindowActiveField(wn);
  if (blank(activefield)) then begin
    goto LCashPaymentIVActiveField;
  end;
  switch (activefield) begin
    case "InvDate":;
    case "PayDeal":;
    case "PayDate":;
    case "TransDate":;
    case "CustOrdNr":;
    case "OurContact":;
    case "LangCode":;
    case "ClientContact":;
    case "SalesMan":;
    case "Location":;
    otherwise 
      KeyPadEnter(wn);    
  end;
LCashPaymentIVActiveField:;  
  return;
end;

global 
procedure GCIVsm()
begin
  record IVVc IVr;
  record IVVc prevIVr;
  row IVVc IVrw;
  Integer wn,rownr;

  wn = CurWindow;
  CashPaymentIVActiveField(wn);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVr);
  switch (WindowState(wn)) begin
    case 0: //Rs_normal
      GetWindowRecord(wn,prevIVr); //Rs_update
      if (prevIVr.OKFlag!=0) then begin goto LGCIVsm; end;
    case 1: //Rs_insert
    case 2: 
      GetPrevWindowRecord(wn,prevIVr); //Rs_update
      if (prevIVr.OKFlag!=0) then begin goto LGCIVsm; end;
  end;
  ClearRow(IVr,IVrw,kInvoiceRowTypeGiftVoucherSold);  
  rownr = MatRowCnt(IVr);
  MatRowPut(IVr,rownr,IVrw);
  PutWindowRecord(wn,IVr);
  WindowFieldGoto(wn,IVr,rownr,"GCNr",true);
LGCIVsm:;  
  return;
end;

global 
procedure GCRIVsm(Integer btnNr)
begin
  record IVVc IVr;
  record IVVc prevIVr;
  row IVVc IVrw;
  Integer wn,rownr,rowstp;
  string 255 pmcode;

  wn = CurWindow;
  CashPaymentIVActiveField(wn);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVr);
  switch (WindowState(wn)) begin
    case 0: //Rs_normal
      GetWindowRecord(wn,prevIVr); //Rs_update
      if (prevIVr.OKFlag!=0) then begin goto LGCRIVsm; end;
    case 1: //Rs_insert
    case 2: 
      GetPrevWindowRecord(wn,prevIVr); //Rs_update
      if (prevIVr.OKFlag!=0) then begin goto LGCRIVsm; end;
  end;
  pmcode = GetWindowString(wn,"IVPMCode" & btnNr);
  rowstp = StringToInt(GetWindowString(wn,"IVrowstp" & btnNr));
  if (rowstp==0) then begin
    ClearRow(IVr,IVrw,kInvoiceRowTypeGiftVoucherPayment); 
  end else begin
    ClearRow(IVr,IVrw,rowstp); 
  end;
  rownr = MatRowCnt(IVr);
  MatRowPut(IVr,rownr,IVrw);
  PutWindowRecord(wn,IVr);
  WindowFieldGoto(wn,IVr,rownr,"GCNr",true);
LGCRIVsm:;  
  return;
end;

global
procedure GCRIVsm1()
begin
  GCRIVsm(1);
  return;
end;

global
procedure GCRIVsm2()
begin
  GCRIVsm(2);
  return;
end;

procedure CashIVsmExecute(integer btnNr)
begin
  record IVVc IVr;
  record IVVc prevIVr;
  row IVVc IVrw;
  Integer wn,rownr,rowstp;
  val fr,to1,to2,br1,br2;
  string 255 tstr,pmcode;
  record DefCashBlock DefCashRec;

  wn = CurWindow;
  CashPaymentIVActiveField(wn);  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVr);
  switch (WindowState(wn)) begin
    case 0: //Rs_normal
      GetWindowRecord(wn,prevIVr); //Rs_update
      if (prevIVr.OKFlag!=0) then begin goto LCashIVsm; end;
    case 1: //Rs_insert
    case 2: 
      GetPrevWindowRecord(wn,prevIVr); //Rs_update
      if (prevIVr.OKFlag!=0) then begin goto LCashIVsm; end;
  end;
  pmcode = GetWindowString(wn,"IVPMCode" & btnNr);
  rowstp = StringToInt(GetWindowString(wn,"IVrowstp" & btnNr));
  CashIVsmRemote(IVr,pmcode,rowstp);
  PutWindowRecord(wn,IVr);
  WindowFieldGoto(wn,IVr,MatRowCnt(IVr)-1,"Sum",true);
  DisplayIVSubTotalAction(IVr);
  if (IsWebClient) then begin
    SelectWindow(wn);
  end;
LCashIVsm:;  
  return;
end;

global
procedure CashIVsm()
begin
  CashIVsmExecute(1);
  return;
end;

global 
procedure CashIVsm1()
begin
  CashIVsmExecute(1);
  return;
end;

global 
procedure CashIVsm2()
begin
  CashIVsmExecute(2);
  return;
end;

global 
procedure ChequeIVsm(integer btnNr)
begin
  record IVVc IVr;
  record IVVc prevIVr;
  row IVVc IVrw;
  Integer wn,rownr,rowstp;
  val fr,to1,to2,br1,br2;
  string 255 tstr,pmcode;
  record DefCashBlock DefCashRec;

  wn = CurWindow;
  CashPaymentIVActiveField(wn);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVr);
  switch (WindowState(wn)) begin
    case 0: //Rs_normal
      GetWindowRecord(wn,prevIVr); //Rs_update
      if (prevIVr.OKFlag!=0) then begin goto LChequeIVsm; end;
    case 1: //Rs_insert
    case 2: 
      GetPrevWindowRecord(wn,prevIVr); //Rs_update
      if (prevIVr.OKFlag!=0) then begin goto LChequeIVsm; end;
  end;
  pmcode = GetWindowString(wn,"IVPMCode" & btnNr);
  rowstp = StringToInt(GetWindowString(wn,"IVrowstp" & btnNr));
  ChequeIVsmRemote(IVr,pmcode,rowstp);
  PutWindowRecord(wn,IVr);
  WindowFieldGoto(wn,IVr,MatRowCnt(IVr)-1,"Sum",true);
  DisplayIVSubTotalAction(IVr);
LChequeIVsm:;  
  return;
end;

global 
procedure ChequeIVsm1()
begin
  ChequeIVsm(1);
  return;
end;

global 
procedure ChequeIVsm2()
begin
  ChequeIVsm(2);
  return;
end;

global 
updating procedure CredCardIVsmDo(integer btnNr)
begin
  record IVVc IVr;
  record IVVc prevIVr;
  row IVVc IVrw;
  Integer wn,rownr,nwn;
  LongInt rowstp;
  val fr,to1,to2,br1,br2;
  val t,t1;  
  string 255 tstr,pmcode,pmcodelabel;
  record DefCashBlock DefCashRec;
  record RahaxiBlock Rahaxib; 

  BlockLoad(Rahaxib);
  wn = CurWindow;
  CashPaymentIVActiveField(wn);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVr);
  switch (WindowState(wn)) begin
    case 0: //Rs_normal
      GetWindowRecord(wn,prevIVr); //Rs_update
      if (prevIVr.OKFlag!=0) then begin goto LCredCardIVsmDo; end;
    case 1: //Rs_insert
    case 2: 
      GetPrevWindowRecord(wn,prevIVr); //Rs_update
      if (prevIVr.OKFlag!=0) then begin goto LCredCardIVsmDo; end;
  end;
  if (Rahaxib.TerminalType==kLocalCCTerminalNone) begin
    switch (WindowActiveField(wn)) begin
      otherwise
        BlockLoad(DefCashRec);
        pmcode = GetWindowString(wn,"IVPMCode" & btnNr);
        if (blank(pmcode)) then begin
          pmcode = GetWindowString(wn,"PMCode" & btnNr);
        end;
        if (blank(pmcode)) then begin
          pmcode =  DefCashRec.DefCCPayMode;
        end;
        rowstp = StringToLongInt(GetWindowString(wn,"rowstp" & btnNr));
        if (rowstp<0) then begin
          rowstp = StringToInt(GetWindowString(wn,"IVrowstp" & btnNr));
        end;
        if (CCPayIVDWithCardDataAndPM(wn,"",rowstp,pmcode)==false) then begin
          if (rowstp==0) then begin
            ClearRow(IVr,IVrw,kInvoiceRowTypeCreditCardPayment); 
          end else begin
            ClearRow(IVr,IVrw,rowstp); 
          end;
          tstr = IVrw.CurncyCode;
          GetFullCurncyRate(tstr,IVr.TransDate,fr,to1,to2,br1,br2);
          IVrw.CurncyCode = tstr;
          IVrw.FrRate = fr;
          IVrw.ToRateB1 = to1; 
          IVrw.ToRateB2 = to2;
          IVrw.BaseRate1 = br1;
          IVrw.BaseRate2 = br2;    
          IVrw.PayMode =  pmcode;
          rownr = MatRowCnt(IVr);
          MatRowPut(IVr,rownr,IVrw);
          PutWindowRecord(wn,IVr);
          WindowFieldGoto(wn,IVr,rownr,"Sum",true);
          DisplayIVSubTotalAction(IVr);
        end;
    end;
  end else begin
    SubCashRows_IVVc(IVr,true,t,t1);
    switch (Rahaxib.TerminalType) begin
      case kLocalCCTerminalRahaxi: OpenCCPayRahaxiDClass(wn,rownr,IVr.SerNr,IVr.RetnValue,t,IVr.CurncyCode);
      case kLocalCCTerminalSteriaCOM: OpenCCPaySteriaDClass(wn,rownr,IVr.SerNr,IVr.RetnValue,t,IVr.CurncyCode);
      case kLocalCCTerminalSteriaIP: OpenCCPaySteriaDClass(wn,rownr,IVr.SerNr,IVr.RetnValue,t,IVr.CurncyCode);
      case kLocalCCTerminalYomaniBanksys: 
        pmcode = GetWindowString(wn,"IVPMCode" & btnNr);
        if (blank(pmcode)) then begin
          pmcode = GetWindowString(wn,"PMCode" & btnNr);
        end;
        if (blank(pmcode)) then begin
          BlockLoad(DefCashRec);
          pmcode =  DefCashRec.DefCCPayMode;
        end;
        pmcodelabel = GetWindowString(wn,"IVPMCodeLabel" & btnNr);
        if (blank(pmcodelabel)) then begin
          pmcodelabel = GetWindowString(wn,"PMCodeLabel" & btnNr);
        end;
        OpenCCPayYomaniBanksysOClass(wn,pmcode,pmcodelabel,IVr.SerNr,IVr.RetnValue,t,IVr.CurncyCode);
      case kLocalCCTerminalIngenico6550: 
        pmcode = GetWindowString(wn,"IVPMCode" & btnNr);
        if (blank(pmcode)) then begin
          pmcode = GetWindowString(wn,"PMCode" & btnNr);
        end;
        if (blank(pmcode)) then begin
          BlockLoad(DefCashRec);
          pmcode =  DefCashRec.DefCCPayMode;
        end;
        pmcodelabel = GetWindowString(wn,"IVPMCodeLabel" & btnNr);
        if (blank(pmcodelabel)) then begin
          pmcodelabel = GetWindowString(wn,"PMCodeLabel" & btnNr);
        end;
        OpenCCPayIngenicoOClass(wn,pmcode,pmcodelabel,IVr.SerNr,IVr.RetnValue,t,IVr.CurncyCode);
      case kLocalCCTerminalVerifoneBanksys: 
        pmcode = GetWindowString(wn,"IVPMCode" & btnNr);
        if (blank(pmcode)) then begin
          pmcode = GetWindowString(wn,"PMCode" & btnNr);
        end;
        if (blank(pmcode)) then begin
          BlockLoad(DefCashRec);
          pmcode =  DefCashRec.DefCCPayMode;
        end;
        pmcodelabel = GetWindowString(wn,"IVPMCodeLabel" & btnNr);
        if (blank(pmcodelabel)) then begin
          pmcodelabel = GetWindowString(wn,"PMCodeLabel" & btnNr);
        end;
        OpenCCPayVerifoneBanksysOClass(wn,pmcode,pmcodelabel,IVr.SerNr,IVr.RetnValue,t,IVr.CurncyCode);
    end;
  end;
  if (IsWebClient) then begin
    SelectWindow(wn);
  end;
LCredCardIVsmDo:;  
  return;
end;

global 
procedure CredCardIVsmExecute(string paymode,string label)
begin
  record IVVc IVr;
  Integer wn,rownr;
  record RahaxiBlock Rahaxib; 

  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,IVr);
  BlockLoad(Rahaxib);
  if (Rahaxib.TerminalType==kLocalCCTerminalNone) then begin
    PutWindowString(wn,"ivcashcommand",POSCommandText(6,true));
    //WindowFieldGoto(wn,IVr,-1,"ivcashcommand",false);
    WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",false);
  end else begin
    switch (Rahaxib.TerminalType) begin
      case kLocalCCTerminalRahaxi: OpenCCPayRahaxiDClass(wn,1,IVr.SerNr,IVr.RetValue,IVr.Sum4,IVr.CurncyCode);
      case kLocalCCTerminalSteriaCOM: OpenCCPaySteriaDClass(wn,1,IVr.SerNr,IVr.RetValue,IVr.Sum4,IVr.CurncyCode);
      case kLocalCCTerminalSteriaIP: OpenCCPaySteriaDClass(wn,1,IVr.SerNr,IVr.RetValue,IVr.Sum4,IVr.CurncyCode);
      case kLocalCCTerminalYomaniBanksys: OpenCCPayYomaniBanksysOClass(wn,paymode,label,IVr.SerNr,IVr.RetValue,IVr.Sum4,IVr.CurncyCode);
      case kLocalCCTerminalIngenico6550: OpenCCPayIngenicoOClass(wn,paymode,label,IVr.SerNr,IVr.RetValue,IVr.Sum4,IVr.CurncyCode);
      case kLocalCCTerminalVerifoneBanksys: OpenCCPayVerifoneBanksysOClass(wn,paymode,label,IVr.SerNr,IVr.RetValue,IVr.Sum4,IVr.CurncyCode);
    end;
  end;
  return;
end;

global
updating procedure CredCardIVsm()
begin
  CredCardIVsmDo(0);
  return;
end;

global
updating procedure CredCardIVsm1()
begin
  CredCardIVsmDo(1);
  return;
end;

global
updating procedure CredCardIVsm2()
begin
  CredCardIVsmDo(2);
  return;
end;

global
procedure RestPMOtherIVsm()
begin
  Integer nwn;
  record RcVc RepSpec;
  
  nwn = OpenWindow("RestPMOtherPayVClass",1,CurWindow,"","",RepSpec);
  return;
end;

updating function Boolean IVFinish(Integer wn,var record IVVc IVr)
begin
  Integer nwn;
  Boolean res;
  record IVVc newIVr;
  record IVVc dummyIVr;

  res = false;
  if (IVr.OKFlag!=0) then begin goto LIVFinish; end;
  if (WindowState(wn)==Rs_normal) then begin
    PutWindowRecord(wn,IVr);
  end;
  IVSumup(IVr,true);
  IVr.OKFlag = 1;
  PutWindowRecord(wn,IVr);
  if (WindowDoOK(wn,0)) then begin
    GetWindowRecord(wn,IVr);
    UpdateBrowses("IVVc");
    OpenCashDrawer_IVVc(IVr);
    CloseWindow(wn);
    RecordNew(newIVr);
    IVDefaultsClient(newIVr,dummyIVr,1,1);
    nwn = OpenWindow("IVDClass",1,0,"","",newIVr);
    if (blank(newIVr.CustCode)) then begin
      WindowFieldGoto(nwn,newIVr,-1,"CustCode",true);
    end else begin
      SelectWindow(nwn);
      WindowFieldGoto(nwn,newIVr,0,"ArtCode",true);
    end;
    res = true;
  end else begin
    GetWindowRecord(wn,IVr);
    IVr.OKFlag = 0;
    PutWindowRecord(wn,IVr);
  end;
LIVFinish:;
  IVFinish = res;
  return;
end;

global
updating procedure IVFinishAndPrint()
begin
  Integer wn,wnst;
  record IVVc IVr,prevIVr;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVr);
  GetPrevWindowRecord(wn,prevIVr);
  wnst = WindowState(wn);
  if (IVr.OKFlag!=0) then begin
    IVPrintReceipt(wn,IVr,prevIVr,-1,true,false,0,wnst);
  end else begin    
    if (IVFinish(wn,IVr)) then begin
      IVPrintReceipt(wn,IVr,prevIVr,-1,true,true,0,wnst);
    end;
  end;
  return;
end;

global
updating procedure PrintToFiscPrntIVDsm()
begin
  Integer wn;
  record IVVc IVr;
  record IVVc oldIVr;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,IVr);
    if (UserCanAction("PrintToFiscPrnt",true)) then begin
      if (IVr.FiscalFlag!=0) then begin
/*      
        if (IVr.Prntdf!=0) then begin
          RecordCopy(oldIVr,IVr);
          IVr.Prntdf = 0;
          if (RecordUpdate(oldIVr,IVr,false)==0) then begin 
            RecordCopy(oldIVr,IVr);
          end;
        end;
*/        
        IVVc_PrintToFiscalPrinter(IVr,true);
        if (IVVc_PrintToFiscalControlUnit(IVr)) then begin
          PutWindowRecord(wn,IVr);
        end;
      end else begin
        if (IVVc_PrintToFiscalControlUnit(IVr)) then begin
          PutWindowRecord(wn,IVr);
        end;
      end;
    end else begin
      MessageBox(1274,StringFromStringSet(3,"PrintToFiscPrnt"));
    end;
  end else begin
    Beep;
  end;
  return;
end;

global
updating procedure CreateCreditNoteIVDsm()
begin
  record IVVc IVr;
  record IVVc IVCreditr;
  Integer wn,nwn;
  Integer normalstate;
  Integer res;
  record LocalMachineBlock LMb;

  normalstate = 0;//Rs_normal
  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)==normalstate) then begin
    GetWindowRecord(wn,IVr);
    if ((IVr.OKFlag!=0) and (IVr.InvType!=kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales)) then begin
      BlockLoad(LMb);
      res = CreateCreditNoteIV(IVr,kInvoiceTypeCredit,IVCreditr,LMb.DefReturnLocation,false);
      if (res==0) then begin
        if (TouchScreenInterface) then begin
          CloseWindow(wn);
          nwn = OpenWindow("IVDClass",1,0,"","",IVCreditr);
          WindowFieldGotoForTouchScreen(nwn,-1,"ivcashcommand",true);
        end else begin  
          nwn = OpenWindow("IVDClass",1,0,"","",IVCreditr);
        end;  
        if (WindowDoOK(nwn,0)) then begin
          UpdateBrowses("IVVc");
        end;
      end else begin
        MessageBox(res,"");
      end;
    end else begin
      MessageBox(12556,"");      
    end;
  end else begin
    MessageBox(20803,"");      
  end;
  return;
end;

global
updating procedure CreateDebitNoteIVDsm()
begin
  record IVVc IVr;
  record IVVc IVCreditr;
  Integer wn,nwn;
  Integer res;
  record LocalMachineBlock LMb;

  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,IVr);
    if ((IVr.OKFlag!=0) and (IVr.InvType!=kInvoiceTypeDebit) and (IVr.Invalid==0)) then begin
      BlockLoad(LMb);
      res = CreateCreditNoteIV(IVr,kInvoiceTypeDebit,IVCreditr,LMb.DefReturnLocation,false);
      if (res==0) then begin
        nwn = OpenWindow("IVDClass",1,0,"","",IVCreditr);
        if (WindowDoOK(nwn,0)) then begin
          UpdateBrowses("IVVc");
        end;
      end else begin
        MessageBox(res,"");
      end;
    end else begin
      MessageBox(12556,"");      
    end;
  end else begin
    MessageBox(20803,"");      
  end;
  return;
end;

global
updating procedure CreateCredManIVsm()
begin
  record IVVc IVr;
  record CredManVc CredManr;
  Integer wn,nwn;
  Integer normalstate;
  boolean res;

  normalstate = 0;//Rs_normal
  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)==normalstate) then begin
    GetWindowRecord(wn,IVr);
    CredManr.IVNr = IVr.SerNr;
    res = CreateCredManIV(CredManr,(IVr.OKFlag!=0) and (IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeNormalSpecialSales));
    if (res) then begin
      nwn = OpenWindow("CredManDClass",1,0,"","",CredManr);
    end else begin
      Beep;
    end;
  end else begin
    Beep;
  end;
  return;
end;

updating procedure RestPMOtherPayDsm(Integer wn,string pmcode,Integer rowstp)
begin
  Integer mwn;
  record IVVc IVr;
  record IVVc prevIVr;
  record RestAccVc RestAccr;
  record RestAccVc prevRestAccr;
  record RahaxiBlock Rahaxib; 
  Boolean donef;
  
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    BlockLoad(Rahaxib);
    switch (GetWindowFileName(mwn)) begin
      case "IVVc":
        CloseWindow(wn);      
        CashPaymentIVActiveField(mwn);
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,IVr);
        switch (WindowState(mwn)) begin
          case Rs_normal:
            GetWindowRecord(mwn,prevIVr);
            if (prevIVr.OKFlag!=0) then begin goto LRestPMOtherPayDsm; end;
          case Rs_insert:
          case Rs_update: 
            GetPrevWindowRecord(mwn,prevIVr); //Rs_update
            if (prevIVr.OKFlag!=0) then begin goto LRestPMOtherPayDsm; end;
        end;
        if (Rahaxib.TerminalType==kLocalCCTerminalNone) then begin
          switch (WindowActiveField(mwn)) begin
            otherwise
              switch (rowstp) begin
                case kInvoiceRowTypeCreditCardPayment:
                  donef = CCPayIVDWithCardDataAndPM(mwn,"",rowstp,pmcode);
              end;
              if (donef==false) then begin
                RestPMOtherPayRemote_IV(IVr,pmcode,rowstp);
                PutWindowRecord(mwn,IVr);
                switch (rowstp) begin
                  case kInvoiceRowTypeGiftVoucherPayment:
                    WindowFieldGoto(mwn,IVr,MatRowCnt(IVr)-1,"GCNr",true);
                  otherwise
                    WindowFieldGoto(mwn,IVr,MatRowCnt(IVr)-1,"Sum",true);                   
                end;
              end;
              DisplayIVSubTotalAction(IVr);
          end;
        end else begin
//Rahaxi/Steria
        end;
      case "RestAccVc":
        KeyPadEnter(wn);
        CloseWindow(wn);      
        DeselectWindow(mwn,false);
        GetWindowRecord(mwn,RestAccr);
        switch (WindowState(mwn)) begin
          case Rs_normal:
            GetWindowRecord(mwn,prevRestAccr); //Rs_update
            if (prevRestAccr.Closed!=0) then begin goto LRestPMOtherPayDsm; end;
          case Rs_insert:
          case Rs_update: 
            GetPrevWindowRecord(mwn,prevRestAccr);
            if (prevRestAccr.Closed!=0) then begin goto LRestPMOtherPayDsm; end;
        end;
        if (Rahaxib.TerminalType==kLocalCCTerminalNone) then begin
          switch (WindowActiveField(mwn)) begin
            otherwise
              RestPMOtherPayRemote_RestAcc(RestAccr,pmcode,rowstp);
              PutWindowRecord(mwn,RestAccr);
              WindowFieldGoto(mwn,RestAccr,MatRowCnt(RestAccr)-1,"Sum",true);
          end;
        end else begin
//Rahaxi/Steria
        end;
    end;
  end;
LRestPMOtherPayDsm:;  
  return;
end;

updating procedure RestPMOtherPayDsmDo(Integer i)
begin
  Integer wn;
  string 255 pmcode;
  Integer rowstp;
  
  wn = CurWindow;

  pmcode = GetWindowString(wn,"PMCode" & i);
  rowstp = StringToInt(GetWindowString(wn,"rowstp" & i));
  RestPMOtherPayDsm(wn,pmcode,rowstp);
  return;
end;

global
updating procedure RestPMOtherPayDsm1()
begin
  RestPMOtherPayDsmDo(1);
  return;
end;

global
updating procedure RestPMOtherPayDsm2()
begin
  RestPMOtherPayDsmDo(2);
  return;
end;

global
updating procedure RestPMOtherPayDsm3()
begin
  RestPMOtherPayDsmDo(3);
  return;
end;

global
updating procedure RestPMOtherPayDsm4()
begin
  RestPMOtherPayDsmDo(4);
  return;
end;

global
updating procedure RestPMOtherPayDsm5()
begin
  RestPMOtherPayDsmDo(5);
  return;
end;

global
updating procedure RestPMOtherPayDsm6()
begin
  RestPMOtherPayDsmDo(6);
  return;
end;

global
updating procedure RestPMOtherPayDsm7()
begin
  RestPMOtherPayDsmDo(7);
  return;
end;

global
updating procedure RestPMOtherPayDsm8()
begin
  RestPMOtherPayDsmDo(8);
  return;
end;

global
updating procedure RestPMOtherPayDsm9()
begin
  RestPMOtherPayDsmDo(9);
  return;
end;

global
updating procedure RestPMOtherPayDsm10()
begin
  RestPMOtherPayDsmDo(10);
  return;
end;

global
updating procedure RestPMOtherPayDsm11()
begin
  RestPMOtherPayDsmDo(11);
  return;
end;

global
updating procedure RestPMOtherPayDsm12()
begin
  RestPMOtherPayDsmDo(12);
  return;
end;

global
procedure RetentionLineIVDsm()
begin
  Integer wn,nwn;
  record RcVc RepSpec;
  record IVVc IVr;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVr);
  RepSpec.f1 = IVr.PRCode;
  nwn = OpenWindow("AddPRRetentionDClass",1,wn,"","",RepSpec);  
  return;
end;

global
updating function Boolean AddPRRetentionDClassOnOKWindow(Integer wn)
begin
  record IVVc IVr;
  row IVVc IVrw;
  record VIVc VIr;
  row VIVc VIrw;
  Integer rwcnt,err;
  val retentionv;
  string 255 retentionacc,retentionvatcode;
  record RcVc RepSpec;
  Integer mwn;
  
//  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);  
  if (blank(RepSpec.f1)) then begin
    err = 1232;
    goto LAddPRRetentionDClassOnOKWindow;
  end;
  
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    DeselectWindow(mwn,false);
    switch (GetWindowFileName(mwn)) begin
      case "IVVc":
        GetWindowRecord(mwn,IVr);
        if (IVr.OKFlag==0) then begin
          IVr.PRCode = RepSpec.f1;
          if (err==0) then begin
            err = IVVc_CalcRetentionLine(IVr,retentionv,retentionacc,retentionvatcode);
          end;
          if (err==0) then begin
            if (retentionv!=0) then begin
              rwcnt = MatRowCnt(IVr);
              ClearRow(IVr,IVrw,kInvoiceRowTypeRetention);
              IVrw.Spec = "";
              IVrw.Sum = retentionv;
              IVrw.SalesAcc = retentionacc;
              IVrw.VATCode = retentionvatcode;
              MatRowPut(IVr,rwcnt,IVrw);
              PutWindowRecord(mwn,IVr);
              if (WindowDoOK(mwn,0)) then begin
              end;        
            end;
          end;
        end;
      case "VIVc":
        GetWindowRecord(mwn,VIr);
        if (VIr.OKFlag==0) then begin
          if (err==0) then begin
            err = VIVc_CalcRetentionLine(VIr,retentionv,retentionacc,retentionvatcode);
          end;
          if (err==0) then begin
            rwcnt = MatRowCnt(VIr);
            ClearRow(VIr,VIrw,kInvoiceRowTypeRetention);
            VIrw.PRCode = RepSpec.f1;
            VIrw.Comment = "";
            VIrw.Sum = retentionv;
            VIrw.AccNumber = retentionacc;
            VIrw.VATCode = retentionvatcode;
//TaxTemplateCode            
            MatRowPut(VIr,rwcnt,VIrw);
            PutWindowRecord(mwn,VIr);
          end;
        end;
    end;
  end;
LAddPRRetentionDClassOnOKWindow:;
  if (err!=0) then begin
    MessageBox(err,"");
  end;
  CloseWindow(wn);
  AddPRRetentionDClassOnOKWindow = false;
  return;
end;

global
updating procedure AddPRRetentionDClassSave()
begin
  DeselectWindow(CurWindow,false);
  AddPRRetentionDClassOnOKWindow(CurWindow);
  return;
end;

global
procedure AddPRRetentionDClassCancel()
begin
  CloseWindow(CurWindow);
  return;
end;

global
updating function Boolean AddWithholdingVClassOnOKWindow(Integer wn)
begin
  record IVVc IVr;
  row IVVc IVrw;
  record VIVc VIr;
  row VIVc VIrw;
  Integer rwcnt,err;
  val retentionv;
  string 255 retentionacc;
  record RcVc RepSpec;
  Integer mwn;
  row WHTaxBlock WHTaxrw;
  
//  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);  
  if (blank(RepSpec.f1)) then begin
    err = 22032;
    goto LAddWithholdingVClassOnOKWindow;
  end;
  
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    DeselectWindow(mwn,false);
    GetWindowRecord(mwn,VIr);
    if (VIr.OKFlag==0) then begin
      if (err==0) then begin
        rwcnt = MatRowCnt(VIr);
        ClearRow(VIr,VIrw,kInvoiceRowTypeWithholdingTax);
        VIrw.WHTax = RepSpec.f1;
        VIrw.Comment = "";
        if (GetWHTaxRow(VIrw.WHTax,WHTaxrw)) then begin 
          if (HasLocalization("MEX")) then begin
            VIrw.AccNumber = WHTaxrw.TmpAccNumber;
          end else begin
            VIrw.AccNumber = WHTaxrw.AccNumber;
          end;
        end;
        MatRowPut(VIr,rwcnt,VIrw);
        PutWindowRecord(mwn,VIr);
        if (WindowDoOK(mwn,0)) then begin
        end;        
      end;
    end;
  end;
LAddWithholdingVClassOnOKWindow:;
  if (err!=0) then begin
    MessageBox(err,"");
  end;
  CloseWindow(wn);
  AddWithholdingVClassOnOKWindow = false;
  return;
end;

global
updating procedure AddWithholdingVlassSave()
begin
  DeselectWindow(CurWindow,false);
  AddWithholdingVClassOnOKWindow(CurWindow);
  return;
end;

global
procedure AddWithholdingVlassCancel()
begin
  CloseWindow(CurWindow);
  return;
end;

global
updating procedure RestPMOtherPayDsm13()
begin
  RestPMOtherPayDsmDo(13);
  return;
end;

global
updating procedure RestPMOtherPayDsm14()
begin
  RestPMOtherPayDsmDo(14);
  return;
end;

global
updating procedure RestPMOtherPayDsm15()
begin
  RestPMOtherPayDsmDo(15);
  return;
end;

global
updating procedure RestPMOtherPayDsm16()
begin
  RestPMOtherPayDsmDo(16);
  return;
end;

global
updating procedure RestPMOtherPayDsm17()
begin
  RestPMOtherPayDsmDo(17);
  return;
end;

global
updating procedure RestPMOtherPayDsm18()
begin
  RestPMOtherPayDsmDo(18);
  return;
end;

global
updating procedure RestPMOtherPayDsm19()
begin
  RestPMOtherPayDsmDo(19);
  return;
end;

global
updating procedure RestPMOtherPayDsm20()
begin
  RestPMOtherPayDsmDo(20);
  return;
end;

global
updating procedure RestPMOtherPayDsm21()
begin
  RestPMOtherPayDsmDo(21);
  return;
end;

global
updating procedure RestPMOtherPayDsm22()
begin
  RestPMOtherPayDsmDo(22);
  return;
end;

global
updating procedure RestPMOtherPayDsm23()
begin
  RestPMOtherPayDsmDo(23);
  return;
end;

global
updating procedure RestPMOtherPayDsm24()
begin
  RestPMOtherPayDsmDo(24);
  return;
end;

global
updating procedure RestPMOtherPayDsm25()
begin
  RestPMOtherPayDsmDo(25);
  return;
end;

global
procedure TestVatMatrixIVDsmExecute(LongInt arownr)
begin
  record TaxMatrixVc TMr;
  record IVVc IVr;
  row IVVc IVrw;
  longint nwn,wn,rowno;
  
  wn = CurWindow;
  GetWindowRecord(wn,IVr);
  rowno = arownr;
  if (rowno<0) then begin
    rowno = WindowActiveRow(wn);
  end;
  
  if (rowno>=0) then begin
    MatRowGet(IVr,rowno,IVrw);
    UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
  end else begin
    UnpackFieldMatrix(IVr,"TaxMatrix",TMr);
  end;
  
  nwn = OpenWindow("TaxMatrixVClass",0,wn,"","",TMr);
  PutWindowString(nwn,"TaxMatrixActiveRow",rowno);
  
  PutWindowRecord(nwn,TMr);
  PutWindowPrevRecord(nwn,TMr);
  SetWindowState(nwn,Rs_normal);
  
  return;
end;

global
procedure TestVatMatrixIVDsm()
begin
  TestVatMatrixIVDsmExecute(-1);
  return;
end;

global
updating procedure IVSendforAcceptanceIVDsmExecute(Integer wn,string acceptanceby,string acceptancefyi)
begin
  Integer err,nwn;
  record IVVc IVr;
  Integer ApproverSelection,ApprovalStatusFlag;
  record RcVc RepSpec;
  
  GetWindowRecord(wn,IVr);
  if (WindowState(wn)!=Rs_normal) then begin
    if (WindowDoOK(wn,0)==false) then begin
      goto LIVSendforAcceptanceIVDsm;
    end;
    GetWindowRecord(wn,IVr);
  end;
  IVr.AcceptanceBy = acceptanceby;
  IVr.AcceptanceFYI = acceptancefyi;
  err = RequestApproval_IVVc(IVr,RepSpec,ApprovalStatusFlag);
  ApproverSelection = RepSpec.ArtMode;
  if ((ApproverSelection==kAcceptanceApproverSelectionManual) and (blank(IVr.AcceptanceBy))) then begin
    switch (err) begin  
      case 0:
        if (CountObjects(RepSpec.f12)==1) then begin
          RepSpec.f1 = RepSpec.f12;
        end;
        if (CountObjects(RepSpec.f11)==1) then begin
          RepSpec.f2 = RepSpec.f11;
        end;
        nwn = OpenWindow("SelectApproverWClass",0,wn,"","",RepSpec);
      otherwise
        MessageBox(err,"");
    end;
  end else begin
    switch (err) begin  
      case 0:
        PutWindowRecord(wn,IVr);
        if (WindowDoOK(wn,0)) then begin
        end;
        PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));  
        CheckmarkBox(37501,"");
      otherwise
        MessageBox(err,"");
    end;
  end;
LIVSendforAcceptanceIVDsm:;  
  return;
end;

global
updating procedure IVSendforAcceptanceIVDsm()
begin
  IVSendforAcceptanceIVDsmExecute(CurWindow,"","");
  return;
end;

global
updating procedure IVCancelApprovalRequest(Integer wn)
begin
  record IVVc IVr;
  Integer ApprovalStatusFlag;
  LongInt err;

  GetWindowRecord(wn,IVr);
  err = CancelApprovalRequest("IVVc",IVr.SerNr,ApprovalStatusFlag);
  if (err!=0) then begin
    MessageBox(err,"");
    if (err!=37503) then begin
      goto LIVCancelApprovalRequest;
    end;
  end;
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));  
LIVCancelApprovalRequest:;
  return;
end;

/*
global
updating procedure GSXAutoEnrollmentIVDsm()
begin
  Integer wn,rownr;
  record GSXSettingsBlock GSb;
  record IVVc IVr;
  row IVVc IVrw;
  string 255 sessionID,errormsg;
  
  wn = CurWindow;
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    GetWindowRecord(wn,IVr);
  
    BlockLoad(GSb);
    if (GSXLogin(GSb.AppleID,GSb.Password,GSb.AccountNo,sessionID,errormsg)) then begin
      if (GSXAutoEnrollment(sessionID,IVr,rownr,errormsg)) then begin
        PutWindowRecord(wn,IVr);
//      WindowFieldGoto(wn,IVr,0,"PartNumber",true);
      end;
    end;
  
    if (nonblank(errormsg)) then begin
      MessageBox(0,errormsg);
    end;
  end;
  return;
end;
*/

updating procedure AttachGSXNotesToSVOSer(record SVOSerVc SVOSerr,record NotepadVc csNotesr,record NotepadVc Notesr)
begin
  if (SizeTextCnt(csNotesr)>0) then begin
    CreateRecordLink(SVOSerr,CurrentCompany,csNotesr,CurrentCompany);
  end;
  if (SizeTextCnt(Notesr)>0) then begin
    CreateRecordLink(SVOSerr,CurrentCompany,Notesr,CurrentCompany);
  end;
  return;
end;

global
updating procedure WarrantyStatusIVDsm()
begin
  record GSXSettingsBlock GSb;
  integer nwn,wn,rownr;
  date d;
  record SVOSerVc SVOSerr;
  record INVc INr;
  record IVVc IVr;
  row IVVc IVrw;
  record NotepadVc csNotesr,Notesr;
  array string 255 a_partNumbers;
  string 255 sessionID,errormsg;
  record ACPVc ACPr;
  
  wn = CurWindow;
  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVr);
  
  if (rownr<0) then begin
    goto LWarrantyStatusIVDsm;
  end;
  MatRowGet(IVr,rownr,IVrw);
  ACPr.ArtCode = IVrw.ArtCode;
  if (ReadFirstMain(ACPr,1,true)==false) then begin
    MessageBox(23702,"");
    goto LWarrantyStatusIVDsm;
  end;
  if (blank(IVrw.MotherNr)) and (blank(IVrw.MotherSecondarySerialNr)) and (blank(IVrw.MotherAlternateDeviceID)) then begin
    MessageBox(23700,"");
    goto LWarrantyStatusIVDsm;
  end;
  
  SVOSerr.ItemCode = IVrw.ArtCode;
  SVOSerr.SerialNr = IVrw.MotherNr;
  if (ReadFirstMain(SVOSerr,2,true)==false) then begin
    RecordNew(SVOSerr);
    SVOSerr.ItemCode = IVrw.ArtCode;
    SVOSerr.SerialNr = IVrw.MotherNr;
    INr.Code = SVOSerr.ItemCode;
    if (ReadFirstMain(INr,1,true)) then begin
      SVOSerr.ItemName = INr.Name;
    end;
    SVOSerr.CustCode = IVr.CustCode;
    SVOSerr.CustName = IVr.Addr0;
    //TODO: fill in all more of the basics (cost, sold date that we know about, etc)
  end;
  
  BlockLoad(GSb);
  if (GSXLogin(GSb.AppleID,GSb.Password,GSb.AccountNo,sessionID,errormsg)) then begin
    if (GSXWarrantyStatus(sessionID,IVrw.MotherNr,d,a_partNumbers,0,SVOSerr,csNotesr,Notesr,errormsg)) then begin
      RecordStore(SVOSerr,true);
      AttachGSXNotesToSVOSer(SVOSerr,csNotesr,Notesr);      
    end else begin 
      MessageBox(0,errormsg);
    end;
//    if (GSXLogout(sessionID)) then begin StopAlert("logout ok"); end;
  end else begin
    MessageBox(0,errormsg);
    IVrw.MotherNr = "";
    MatRowPut(IVr,rownr,IVrw);
    PutWindowRecord(wn,IVr);
  end;
LWarrantyStatusIVDsm:;
  return;
end;

global
updating procedure SignIVDsm()
begin
  record RcVc RepSpec;
  Integer nwn,wn;
  record IVVc IVr;
  
  wn = CurWindow;
  if (WindowState(wn)!=Rs_insert) then begin
    GetWindowRecord(wn,IVr);
    RepSpec.vals0 = IVr.Sum4;
    nwn = OpenWindow("SignatureWClass",1,wn,"","",RepSpec);
    PutWindowRecord(nwn,RepSpec); //Shouldn't be needed?
  end else begin
    Beep;
  end;
end;

global
updating procedure CreateActFromIVDsm()
begin
  record IVVc IVr;
  record ActVc Actr;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,IVr);  
    RecordNew(Actr);
    ActVcRecordDefClient(Actr);
    if (MakeActFromIV(IVr,Actr)) then begin
      nwn = OpenWindow("ActDClass",1,0,"","",Actr);
      SetRLink(wn,true);  
    end;
  end;
  return;
end;

global
updating procedure IVVcCreateActivity()
begin
  CreateActFromIVDsm;
  return;
end;

global  
procedure ORLastSPrsm()
begin
  record ORVc ORr;
  row ORVc ORrw;
  record RcVc RepSpec;
  Integer wn,rownr;
  
  wn = CurWindow;
  GetWindowRecord(wn,ORr);
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    MatRowGet(ORr,rownr,ORrw);
    ReportDefaults(RepSpec,"INLastSPriceRClass");  
    RepSpec.repname = "INLastSPriceRn";
    RepSpec.f1 = ORr.CustCode;
    RepSpec.f2 = ORrw.ArtCode;
    RepSpec.f3 = ORr.InvoiceToCode;
    RepSpec.vals0 = ORrw.Price;
    RepSpec.long1 = 5;
    RepSpec.ArtMode = 1;
    RepSpec.Media = 6;    
    RepSpec.UsedOnly = wn;
    RepSpec.FirstAcc = "ORVc";
    RepSpec.flags[0] = rownr;
    RunReport(RepSpec,1);
  end;  
  return;
end;


global  
procedure IVLastSPrsm()
begin
  record IVVc IVr;
  row IVVc IVrw;
  record RcVc RepSpec;
  Integer wn,rownr;
  
  wn = CurWindow;
  GetWindowRecord(wn,IVr);
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    MatRowGet(IVr,rownr,IVrw);
    ReportDefaults(RepSpec,"INLastSPriceRClass");  
    RepSpec.repname = "INLastSPriceRn";
    RepSpec.f1 = IVr.CustCode;
    RepSpec.f2 = IVrw.ArtCode;
    RepSpec.vals0 = IVrw.Price;
    RepSpec.long1 = 5;
    RepSpec.ArtMode = 2;
    RepSpec.Media = 6;    
    RepSpec.UsedOnly = wn;
    RepSpec.FirstAcc = "IVVc";
    RepSpec.flags[0] = rownr;
    RunReport(RepSpec,1);
  end;  
  return;
end;

global  
procedure IVCashLastSPrsm()
begin
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  record RcVc RepSpec;
  Integer wn,rownr;
  
  wn = CurWindow;
  GetWindowRecord(wn,IVCashr);
  rownr = WindowActiveRow(wn);
  if (rownr<=0) then begin
    rownr = GetSelectedPOSItemRowIndex(wn);
  end;
  if (rownr>=0) then begin
    MatRowGet(IVCashr,rownr,IVCashrw);
    ReportDefaults(RepSpec,"INLastSPriceRClass");  
    RepSpec.repname = "INLastSPriceRn";
    RepSpec.f1 = IVCashr.CustCode;
    RepSpec.f2 = IVCashrw.ArtCode;
    RepSpec.vals0 = IVCashrw.Price;
    RepSpec.long1 = 5;
    RepSpec.ArtMode = 3;
    RepSpec.Media = 6;    
    RepSpec.UsedOnly = wn;
    RepSpec.FirstAcc = "IVCashVc";
    RepSpec.flags[0] = rownr;
    RunReport(RepSpec,1);
  end;  
  return;
end;

global
procedure AddCustomerIVDsm()
begin
  record CUVc CUr;
  record IVVc IVr;
  Integer wn,nwn;
  
  RecordNew(CUr);
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,IVr);
  nwn = OpenWindow("CUDClass",0,CurWindow,"","",CUr);
  PutWindowString(nwn,"OperationMenuAction","AddContact");
  DeselectWindow(nwn,true);
  CUr.PayDeal = IVr.PayDeal;
  CUr.Name = IVr.Addr0;
  CUr.InvAddr0 = IVr.Addr1;
  CUr.InvAddr1 = IVr.Addr2;
  CUr.InvAddr2 = IVr.Addr3;
  CUr.InvAddr3 = IVr.InvAddr3;
  CUr.InvAddr4 = IVr.InvAddr4;
  if (blank(CUr.Code)) then begin
    GetNextCustNr(CUr.Code);
  end;
  PutWindowRecord(nwn,CUr);
  return;
end;

global
procedure AddItemIVDsm()
begin
  record INVc INr;
  record IVVc IVr;
  row IVVc IVrw;
  Integer wn,nwn,rownr;
  
  RecordNew(INr);
  wn = CurWindow;
  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,true);
  GetWindowRecord(wn,IVr);
  nwn = OpenWindow("INDClass",0,CurWindow,"","",INr);
  PutWindowString(nwn,"OperationMenuAction","AddItem");
  DeselectWindow(nwn,true);
  if (rownr>=0) then begin
    MatRowGet(IVr,rownr,IVrw);
    INr.Code = IVrw.ArtCode;
    INr.Name = IVrw.Spec;
    INr.SalesAcc = IVrw.SalesAcc;
    INr.VATCode = IVrw.VATCode;
    INr.TaxTemplateCode = IVrw.TaxTemplateCode;
    INr.UPrice1 = IVrw.Price;
    INr.InPrice = IVrw.BasePrice;
  end;
  if (blank(INr.Code)) then begin
    GetNextItemNr(INr.Code);
  end;
  PutWindowRecord(nwn,INr);
  return;
end;

global
procedure AddVATCodeIVDsm()
begin
  record VATCodeBlock VATCb;
  row VATCodeBlock VATCbrw;
  record IVVc IVr;
  row IVVc IVrw;
  Integer wn,nwn,rownr;

  wn = CurWindow;
  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,true);
  GetWindowRecord(wn,IVr);
  BlockLoad(VATCb);
  nwn = OpenWindow("VATCodeTClass",0,wn,"","",VATCb);
  PutWindowString(nwn,"OperationMenuAction","AddVATCode");
  DeselectWindow(nwn,true);
  if (rownr>=0) then begin
    MatRowGet(IVr,rownr,IVrw);
    ClearRow(VATCb,VATCbrw,1);
    VATCbrw.VATCode = IVrw.VATCode;
    rownr = MatRowCnt(VATCb);
    MatRowPut(VATCb,rownr,VATCbrw);
    PutWindowRecord(nwn,VATCb);
    WindowFieldGoto(nwn,VATCb,rownr,"ExVatpr",true);
  end;
  return;
end;

global
procedure CUStatusIVDsm()
begin
  record RcVc RepSpec;
  record IVVc IVr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,IVr);
  SetupCustPS2Rn(IVr.CustCode,RepSpec);
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);
  return;
end;

global
procedure ReprintIVDsm()
begin
  record RcVc RepSpec;
  record IVVc IVr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,IVr);
  RepSpec.f1 = IVr.SerNr;
  RepSpec.Media = mtPrinter;
  RepSpec.repname = "InvForm";
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.OnlyUnprntd = 2;
  RunReport(RepSpec,0);
  
  return;
end;