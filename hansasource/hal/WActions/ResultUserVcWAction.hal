global
procedure ResultUserSumup(var record ResultUserVc ResultUserr)
BEGIN
  ResultUserr.Chargeable = ResultUserr.chConsulting + ResultUserr.chProgramming + ResultUserr.chProjectMan + ResultUserr.chEducation;  
  if (ResultUserr.AvailExclSupp!=0) then begin
    ResultUserr.Chargebility = (ResultUserr.Chargeable/ResultUserr.AvailExclSupp)*100;
  end;
  ResultUserr.UsedonCustomers = ResultUserr.Chargeable + ResultUserr.Support + ResultUserr.FreeService;
  if (ResultUserr.AvailInclSupp!=0) then begin
    ResultUserr.Utilisation = (ResultUserr.UsedonCustomers/ResultUserr.AvailInclSupp)*100;
  end;
  ResultUserr.TotalSales = ResultUserr.LicensesNewCU + ResultUserr.LicensesNewCUPart + ResultUserr.LicensesOldCU + ResultUserr.LicensesOldCUPart + ResultUserr.ConsultingNewCU + ResultUserr.ConsultingNewCUPart + ResultUserr.ConsultingOldCU + ResultUserr.ConsultingOldCUPart;  
  ResultUserr.TurnoverNewCU = ResultUserr.LicensesNewCU + ResultUserr.ConsultingNewCU;
  ResultUserr.TurnoverNewCUPart = ResultUserr.LicensesNewCUPart + ResultUserr.ConsultingNewCUPart;
  ResultUserr.TurnoverOldCU = ResultUserr.LicensesOldCU + ResultUserr.ConsultingOldCU;
  ResultUserr.TurnoverOldCUPart = ResultUserr.LicensesOldCUPart + ResultUserr.ConsultingOldCUPart;
  RETURN;
END;

procedure ResultUserSumupWn(Integer wn,Boolean changedf)
BEGIN
  record ResultUserVc ResultUserr;
  
  if (changedf) then begin
    GetWindowRecord(wn,ResultUserr);
    ResultUserSumup(ResultUserr);
    PutWindowRecord(wn,ResultUserr);
  end;
  RETURN;
END;

global
function Boolean ResultUserDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record ResultUserVc ResultUserr;
  
  if (wnst!=2) then begin//Rs_update
    res = true;
  end else begin
    res = false;
    GetPrevWindowRecord(wn,ResultUserr);
    if (ResultUserr.OKFlag!=0) then begin
      switch (fieldname) begin
        case "Comment": res = true;
      end;
    end else begin
      res = true;
    end;
  end;
  ResultUserDClassActiveEditField = res;
  RETURN;
END;

function Boolean ResultUserDClassPersonEFAfter(Integer wn,Boolean changedf)
BEGIN
  Boolean res;
  record ResultUserVc ResultUserr;
  record UserVc Userr;
  
  if (changedf) then begin
    GetWindowRecord(wn,ResultUserr);
    Userr.Code = ResultUserr.Person;
    if (ReadFirstMain(Userr,1,true)) then begin
      ResultUserr.PersonName = Userr.Name;
      ResultUserr.PersonObjects = Userr.PersObjx;
    end;
    PutWindowRecord(wn,ResultUserr);
    res = true;
  end;
  ResultUserDClassPersonEFAfter = res;
  RETURN;
END;

global
function Boolean ResultUserDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "Person": res = ResultUserDClassPersonEFAfter(wn,changed!=0);
  end;
  ResultUserSumupWn(wn,changed!=0);
  ResultUserDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean ResultUserDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record ResultUserVc ResultUserr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,ResultUserr);
    if (ResultUserr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,ResultUserr);
    if (ResultUserr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  ResultUserDClassOKFlagButtonAction = res;
  RETURN;
END;
