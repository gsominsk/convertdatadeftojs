remote updating function Integer SelectFYIWClassOKRemote(record RcVc,var record ActVc);
external procedure WindowFieldGotoForTouchScreen(Integer,Integer,string,Boolean);
remote updating procedure SendforNextLevelManualApproval(record RcVc,record ActVc);
external updating procedure QTSendforAcceptanceQTDsmExecute(Integer,string,string);
external updating procedure LASendforAcceptanceLADsmExecute(Integer,string,string);
external updating procedure LTSendforAcceptanceLTDsmExecute(Integer,string,string);
external updating procedure TBBUSendforAcceptanceTBBUDsmExecute(Integer,string,string);
external updating procedure VISendforAcceptanceVIDsmExecute(Integer,string,string);
external updating procedure IVSendforAcceptanceIVDsmExecute(Integer,string,string);
external updating procedure IntORSendforAcceptanceIntORDsmExecute(Integer,string,string);
external updating procedure ORSendforAcceptanceORDsmExecute(Integer,string,string);
external updating procedure SDSendforAcceptanceSDDsmExecute(Integer,string,string);
external updating procedure PUSendforAcceptancePUDsmExecute(Integer,string,string);
external updating procedure OPSendforAcceptanceOPDsmExecute(Integer,string,string);
external updating procedure ExpSendforAcceptanceExpDsmExecute(Integer,string,string);
external updating procedure POSendforAcceptancePODsmExecute(Integer,string,string);
external function string 255 StringFromSysList(Integer,Integer);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
external procedure PasteFromSysList(Integer,Integer);
external procedure ExtractObj(string,var Integer,var string);
external procedure PasteFromWn(Integer,string);
external procedure PasteTagFromSysList(Integer);
external function val GetAcceptanceSum_SDVc(record SDVc);
external updating function Boolean CreateFYIAcceptanceTasks(Integer,string,string,string,val,string,string,record AcceptanceRulesVc,row AcceptanceRulesVc,string,string);

procedure RemoveExistingClassifications(string classifications,var string res)
BEGIN
  Integer pos;
  string 20 tstrclass;
  string 255 tstr;

  if (nonblank(classifications)) then begin
    tstr = res;
    res = "";
    pos = 0;
    ExtractObj(tstr,pos,tstrclass);
    while (nonblank(tstrclass)) begin
      if (SetInSet(tstrclass,classifications)==false) then begin
        if (nonblank(res)) then begin
          res = res & ",";
        end;
        res = res & tstrclass;
      end;
      ExtractObj(tstr,pos,tstrclass);
    end;
  end;  
  RETURN;
END;

global
procedure PasteFromTRObjS(Integer wn,Integer cutlen)
begin
  string 255 tstr,tstr2,classification;
  record RcVc RepSpec;
  Integer mwn;
  record CUVc CUr;
  record COCUServiceVc COCUServicer;
  
  mwn = MotherWindow(wn);
  if (GetWindowFileName(mwn)=="CUVc") begin
    GetWindowRecord(mwn,CUr);
    classification = CUr.Classification;
  end;
//  if (GetWindowFileName(mwn)=="COCUServiceVc") begin
//    GetWindowRecord(mwn,COCUServicer);
//    classification = COCUServicer.Classification;
//  end;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  tstr = "";
  if (nonblank(RepSpec.f1)) then begin
    if (nonblank(tstr)) then begin
      tstr = tstr & ",";
    end;
    tstr = tstr & RepSpec.f1;
  end;
  if (nonblank(RepSpec.f2)) then begin
    if (nonblank(tstr)) then begin
      tstr = tstr & ",";
    end;
    tstr = tstr & RepSpec.f2;
  end;
  if (nonblank(RepSpec.f3)) then begin
    if (nonblank(tstr)) then begin
      tstr = tstr & ",";
    end;
    tstr = tstr & RepSpec.f3;
  end;
  if (nonblank(RepSpec.f4)) then begin
    if (nonblank(tstr)) then begin
      tstr = tstr & ",";
    end;
    tstr = tstr & RepSpec.f4;
  end;
  if (nonblank(RepSpec.f5)) then begin
    if (nonblank(tstr)) then begin
      tstr = tstr & ",";
    end;
    tstr = tstr & RepSpec.f5;
  end;
  if (nonblank(RepSpec.AccStr)) then begin
    if (nonblank(tstr)) then begin
      tstr = tstr & ",";
    end;
    tstr = tstr & RepSpec.AccStr;
  end;
  if (nonblank(RepSpec.FirstAcc)) then begin
    if (nonblank(tstr)) then begin
      tstr = tstr & ",";
    end;
    tstr = tstr & RepSpec.FirstAcc;
  end;
  if (nonblank(RepSpec.ObjStr)) then begin
    if (nonblank(tstr)) then begin
      tstr = tstr & ",";
    end;
    tstr = tstr & RepSpec.ObjStr;
  end;
  if (nonblank(RepSpec.Stext)) then begin
    if (nonblank(tstr)) then begin
      tstr = tstr & ",";
    end;
    tstr = tstr & RepSpec.Stext;
  end;
  if (nonblank(RepSpec.LastAcc)) then begin
    if (nonblank(tstr)) then begin
      tstr = tstr & ",";
    end;
    tstr = tstr & RepSpec.LastAcc;
  end;
  if (nonblank(RepSpec.f6)) then begin
    if (nonblank(tstr)) then begin
      tstr = tstr & ",";
    end;
    tstr = tstr & RepSpec.f6;
  end;
  RemoveExistingClassifications(classification,tstr);
  PasteFromWn(wn,tstr);
  return;
end;

/*
global
function Boolean VATClassOnOKWindow(Integer wn)
begin
  integer i,j,cnt;
  record VAT2Block VAT2b;
  row VAT2Block VAT2rwi, VAT2rwj;
  boolean res;
  
  res = true;
  GetWindowRecord(wn,VAT2b);
  cnt = MatRowCnt(VAT2b);
  for(i=0;i<cnt;i=i+1) begin
    MatRowGet(VAT2b,i,VAT2rwi);
    if (VAT2rwi.DeclareBox!=0) then begin
      if (blank(VAT2rwi.Code) or VAT2rwi.Code=="." or blank(VAT2rwi.defstr)) then begin
        MessageBox(16640,"");
        res = false;
        goto LVATClassOnOKWindow;
      end;
      for(j=0;j<cnt;j=j+1) begin
        if (j!=i) then begin
          MatRowGet(VAT2b,j,VAT2rwj);
          if (VAT2rwj.DeclareBox==VAT2rwi.DeclareBox) then
          begin
            MessageBox(16641,"");
            res = false;
            goto LVATClassOnOKWindow;
          end;
        end;
      end;
    end;
  end;
LVATClassOnOKWindow:;
  VATClassOnOKWindow = res;
  return;
end;
*/
global
function Boolean ModulesSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-1);
  ModulesSClassOnOKWindow = false;
  return;
end;

global
function Boolean TTRFieldSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,100);
  TTRFieldSClassOnOKWindow = false;
  return;
end;

global
function Boolean VEBankAccSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-1);
  VEBankAccSClassOnOKWindow = false;
  return;
end;

global
function Boolean AssPRClSClassOnOKWindow(Integer wn)
begin
  PasteFromTRObjS(wn,1);
  AssPRClSClassOnOKWindow = false;
  return;
end;

global
function Boolean PRClBTSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  PRClBTSClassOnOKWindow = false;
  return;
end;

global
function Boolean TRObjSClassOnOKWindow(Integer wn)
begin
  PasteFromTRObjS(wn,1);
  TRObjSClassOnOKWindow = false;
  return;
end;

global
function Boolean CUClassSClassOnOKWindow(Integer wn)
begin
  PasteFromTRObjS(wn,1);
  CUClassSClassOnOKWindow = false;
  return;
end;

global
function Boolean HWCOCClassSClassOnOKWindow(Integer wn)
begin
  PasteFromTRObjS(wn,1);
  HWCOCClassSClassOnOKWindow = false;
  return;
end;

global
function Boolean DIClassSClassOnOKWindow(Integer wn)
begin
  PasteFromTRObjS(wn,1);
  DIClassSClassOnOKWindow = false;
  return;
end;

global
function Boolean ARInstSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  ARInstSClassOnOKWindow = false;
  return;
end;

global
function Boolean ARInstallSClassOnOKWindow(Integer wn)
begin
  LongInt Sel;
  string 255 tstr,invnr,instnr;
  Integer mwn,nwn,rownr;
  record IPVc IPr;
  row IPVc IPrw;
  Integer pos;
  
  Sel = SelectedListLine(wn);
  if (Sel>-1) then begin
    tstr = GetListString(wn,Sel);
    mwn = MotherWindow(wn);
    rownr = WindowActiveRow(mwn);
    if (rownr>=0) then begin
      pos = 0;
      ExtractObjWithSeparator(chr(9),tstr,true,pos,invnr);
      ExtractObjWithSeparator(chr(9),tstr,true,pos,instnr);
      GetWindowRecord(mwn,IPr);
      MatRowGet(IPr,rownr,IPrw);
      IPrw.InvoiceNr = StringToLongInt(invnr);
      MatRowPut(IPr,rownr,IPrw);
      PutWindowRecord(mwn,IPr);
      PasteFromWn(wn,instnr);
    end;
  end;
  ARInstallSClassOnOKWindow = false;
  return;
end;

global
function Boolean APInstSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  APInstSClassOnOKWindow = false;
  return;
end;

global
function Boolean APInstallSClassOnOKWindow(Integer wn)
begin
  LongInt Sel;
  string 255 tstr,invnr,instnr;
  Integer mwn,nwn,rownr;
  record OPVc OPr;
  row OPVc OPrw;
  Integer pos;
  
  Sel = SelectedListLine(wn);
  if (Sel>-1) then begin
    tstr = GetListString(wn,Sel);
    mwn = MotherWindow(wn);
    rownr = WindowActiveRow(mwn);
    if (rownr>=0) then begin
      pos = 0;
      ExtractObjWithSeparator(chr(9),tstr,true,pos,invnr);
      ExtractObjWithSeparator(chr(9),tstr,true,pos,instnr);
      GetWindowRecord(mwn,OPr);
      MatRowGet(OPr,rownr,OPrw);
      OPrw.VISerNr = StringToLongInt(invnr);
      MatRowPut(OPr,rownr,OPrw);
      PutWindowRecord(mwn,OPr);
      PasteFromWn(wn,instnr);
    end;
  end;
  APInstallSClassOnOKWindow = false;
  return;
end;

global
function Boolean ActTypeConseqSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  ActTypeConseqSClassOnOKWindow = false;
  return;
end;

global
function Boolean ReservationStatus2SClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  ReservationStatus2SClassOnOKWindow = false;
  return;
end;

global
function Boolean ActType3SClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  ActType3SClassOnOKWindow = false;
  return;
end;

global
function Boolean CClassBTSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  CClassBTSClassOnOKWindow = false;
  return;
end;

global
function Boolean HWCOClassBTSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  HWCOClassBTSClassOnOKWindow = false;
  return;
end;

global
function Boolean ObjBTSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  ObjBTSClassOnOKWindow = false;
  return;
end;

global
function Boolean DIClassBTSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  DIClassBTSClassOnOKWindow = false;
  return;
end;

global
function Boolean CourtesyTitlesSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-1);
  CourtesyTitlesSClassOnOKWindow = false;
  return;
end;

global
function Boolean BaggerSClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  record IVCashVc IVCashr;
  
  mwn = MotherWindow(wn);
  switch (GetWindowClass(mwn)) begin
    case "NPTSIVCashDClass":      
      GetWindowRecord(mwn,IVCashr);
      if (IVCashr.OKFlag==0) and (IVCashr.Invalid==0) then begin
        IVCashr.Bagger = StringFromSysList(wn,-2);
        PutWindowRecord(mwn,IVCashr);
        ReRunWindowDef(mwn);
        //WindowFieldGoto(mwn,IVCashr,-1,"ivcashcommand",false);
        WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false);
        CloseWindow(wn);
      end;
    otherwise
      PasteFromSysList(wn,-2);
  end;
  BaggerSClassOnOKWindow = false;
  return;
end;

global
function Boolean SupervisorSClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  record IVCashVc IVCashr;
  record RestAccVc RestAccr;
  
  mwn = MotherWindow(wn);
  switch (GetWindowClass(mwn)) begin
    case "NPTSIVCashDClass":      
      GetWindowRecord(mwn,IVCashr);
      if (IVCashr.OKFlag==0) and (IVCashr.Invalid==0) then begin
        IVCashr.Supervisor = StringFromSysList(wn,-2);
        PutWindowRecord(mwn,IVCashr);
        //WindowFieldGoto(mwn,IVCashr,-1,"ivcashcommand",false);
        WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false);
        CloseWindow(wn);
      end;
    case "RestAccDClass":      
      GetWindowRecord(mwn,IVCashr);
      if (RestAccr.Closed==0) then begin
//        RestAccr.Supervisor = StringFromSysList(wn,-2);
        PutWindowRecord(mwn,RestAccr);
        CloseWindow(wn);
      end;
    otherwise
      PasteFromSysList(wn,-2);
  end;
  SupervisorSClassOnOKWindow = false;
  return;
end;

/*
global
function Boolean SupervisorSClassListClick(Integer wn,Integer rownr)
begin
  SupervisorSClassOnOKWindow(wn);
  SupervisorSClassListClick = true;
  return;
end;
*/

global
updating function Boolean LangModeSClassOnOKWindow(Integer wn)
begin
  PasteTagFromSysList(wn);
  return;
end;

global
updating function Boolean ClientLangModeTClassOnOKWindow(Integer wn)
begin
  string 255 tstr;
  record RcVc RepSpec;
  Integer mwn;
  
  tstr = GetListTag(wn,SelectedListLine(wn));
  CloseWindow(wn);
  if (nonblank(tstr)) then begin
    SwitchUserInterfaceLanguage(tstr);
//    mwn = FindWindow("WelcomeWClass");
//    if (mwn>0) then begin
//      CloseWindow(mwn);
//      OpenWindow("WelcomeWClass",0,0,"","",RepSpec);
//    end;
  end;
  ClientLangModeTClassOnOKWindow = false;  
  return;
end;


global
function Boolean SpecialMenuFunSClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  
  mwn = MotherWindow(wn);
  if (mwn!=0) then begin
    PasteString(mwn,GetListTag(wn,SelectedListLine(wn)));
  end;
  CloseWindow(wn);
  
  SpecialMenuFunSClassOnOKWindow = false;
  return;
end;

//global
//function Boolean ApproversSClassOnOKWindow(Integer wn)
//begin
//  integer sline;
//  string 255 tstr;
//
//  sline = SelectedListLine(wn);
//  tstr = GetListTag(wn,sline);
//  PasteFromWn(wn,GetListTag(wn,sline));
//  ApproversSClassOnOKWindow = false;
//  return;
//end;

global
function Boolean ApproversSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-1);
  ApproversSClassOnOKWindow = false;
  return;
end;

global
function Boolean CUDocTypeSClassOnOKWindow(Integer wn)
begin
  integer sline;
  string 255 tstr;

  sline = SelectedListLine(wn);
  tstr = GetListTag(wn,sline);
  PasteFromWn(wn,GetListTag(wn,sline));
  CUDocTypeSClassOnOKWindow = false;
  return;
end;

function Integer VerifyApprover(string approvers)
begin
  Integer pos,err;
  string 255 approver;
  vector Boolean vappr;

  pos = 0;
  ExtractObj(approvers,pos,approver);
  while (nonblank(approver)) begin
    if (vappr[approver]) then begin
      err = 21331;
      goto LVerifyApprover;
    end;
    vappr[approver] = true;
    ExtractObj(approvers,pos,approver);
  end;
LVerifyApprover:;
  VerifyApprover = err;
  return;
end;

function Integer VerifyFYI(string FYIpersons)
begin
  Integer pos,err;
  string 255 FYIperson;
  vector Boolean vappr;

  pos = 0;
  ExtractObj(FYIpersons,pos,FYIperson);
  while (nonblank(FYIperson)) begin
    if (vappr[FYIperson]) then begin
      err = 21333;
      goto LVerifyFYI;
    end;
    vappr[FYIperson] = true;
    ExtractObj(FYIpersons,pos,FYIperson);
  end;
LVerifyFYI:;
  VerifyFYI = err;
  return;
end;

updating procedure SelectApproverWClassOKExecute(Integer wn)
begin
  Integer mwn,err;
  record RcVc RepSpec;
  record ActVc Actr;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);  
  mwn = MotherWindow(wn);
  if (blank(RepSpec.f1)) then begin
    MessageBox(1058,"");
    WindowFieldGoto(wn,RepSpec,-1,"f1",false);
    goto LSelectApproverWClassOK;
  end;
  if (SetInSet(RepSpec.f1,RepSpec.f12)==false) then begin
    MessageBox(21330,": " & RepSpec.f1);
    WindowFieldGoto(wn,RepSpec,-1,"f1",false);
    goto LSelectApproverWClassOK;
  end;
  err = VerifyApprover(RepSpec.f1);
  if (err!=0) then begin
    MessageBox(err,"");
    WindowFieldGoto(wn,RepSpec,-1,"f1",false);
    goto LSelectApproverWClassOK;
  end;
  err = VerifyFYI(RepSpec.f2);
  if (err!=0) then begin
    MessageBox(err,"");
    WindowFieldGoto(wn,RepSpec,-1,"f2",false);
    goto LSelectApproverWClassOK;
  end;  
  if (SetInSet(RepSpec.f2,RepSpec.f11)==false) then begin
    MessageBox(21330,": " & RepSpec.f2);
    WindowFieldGoto(wn,RepSpec,-1,"f2",false);
    goto LSelectApproverWClassOK;
  end;
  switch (RepSpec.ArtMode) begin
    case kNextApproversTypeNextLevel:
      switch (GetWindowFileName(mwn)) begin
        case "ActVc":
          GetWindowRecord(mwn,Actr);
          if (nonblank(RepSpec.f1)) then begin
            SendforNextLevelManualApproval(RepSpec,Actr);
          end;
        case "ExpVc":
          ExpSendforAcceptanceExpDsmExecute(mwn,RepSpec.f1,RepSpec.f2);
        case "IntORVc":
          IntORSendforAcceptanceIntORDsmExecute(mwn,RepSpec.f1,RepSpec.f2);
        case "IVVc":
          IVSendforAcceptanceIVDsmExecute(mwn,RepSpec.f1,RepSpec.f2);
        case "LeaveApplicationVc":
          LASendforAcceptanceLADsmExecute(mwn,RepSpec.f1,RepSpec.f2);
        case "LeaveTransferVc":
          LTSendforAcceptanceLTDsmExecute(mwn,RepSpec.f1,RepSpec.f2);
        case "OPVc":
          OPSendforAcceptanceOPDsmExecute(mwn,RepSpec.f1,RepSpec.f2);
        case "ORVc":
          ORSendforAcceptanceORDsmExecute(mwn,RepSpec.f1,RepSpec.f2);
        case "POVc":
          POSendforAcceptancePODsmExecute(mwn,RepSpec.f1,RepSpec.f2);
        case "PUVc":
          PUSendforAcceptancePUDsmExecute(mwn,RepSpec.f1,RepSpec.f2);
        case "QTVc":
          QTSendforAcceptanceQTDsmExecute(mwn,RepSpec.f1,RepSpec.f2);
        case "SDVc":
          SDSendforAcceptanceSDDsmExecute(mwn,RepSpec.f1,RepSpec.f2);
        case "TBBUVc":
          TBBUSendforAcceptanceTBBUDsmExecute(mwn,RepSpec.f1,RepSpec.f2);
        case "VIVc":
          VISendforAcceptanceVIDsmExecute(mwn,RepSpec.f1,RepSpec.f2);
      end;
    case kNextApproversTypeForward:
      switch (GetWindowFileName(mwn)) begin
        case "ActVc":
          GetWindowRecord(mwn,Actr);
          if (nonblank(RepSpec.f1)) then begin
            SendforNextLevelManualApproval(RepSpec,Actr);
          end;
      end;
  end;
  if (nonblank(RepSpec.f1)) or (RepSpec.UsedOnly!=1) then begin
    CloseWindow(wn);
  end;
LSelectApproverWClassOK:;
  return;
end;

global
updating procedure SelectApproverWClassOK()
begin
  Integer wn;

  wn = CurWindow;
  SelectApproverWClassOKExecute(wn);
  return;
end;

global
updating function Boolean SelectApproverWClassOnOKWindow(Integer wn)
begin
  boolean res;

  SelectApproverWClassOKExecute(wn);
  SelectApproverWClassOnOKWindow = res;
  return;
end;

global
procedure SelectApproverWClassCancel()
begin
  Integer wn;
  record RcVc RepSpec;
   
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  if (RepSpec.UsedOnly!=1) then begin
    CloseWindow(wn);
  end;
  return;
end;

global
function Boolean SelectApproverWClassOnClose(Integer wn,Integer wn2)
begin
  record RcVc RepSpec;
   
  GetWindowRecord(wn,RepSpec);
  SelectApproverWClassOnClose = RepSpec.UsedOnly==1;
  return;
end;

updating procedure SelectFYIWClassOKExecute(Integer wn)
begin
  Integer mwn,err;
  record RcVc RepSpec;
  record ActVc Actr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);  
  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,Actr);

  if (blank(RepSpec.f1)) then begin
    err = 21333;
    goto LSelectFYIWClassOK;
  end;  
  err = VerifyFYI(RepSpec.f1);
  if (err!=0) then begin goto LSelectFYIWClassOK; end;
    
  err = SelectFYIWClassOKRemote(RepSpec,Actr);
    
LSelectFYIWClassOK:;
  if (err!=0) then begin
    MessageBox(err,"");
    WindowFieldGoto(wn,RepSpec,-1,"f1",false);
  end else begin
    CloseWindow(wn);
  end;
end;

global
updating procedure SelectFYIWClassOK()
begin
  SelectFYIWClassOKExecute(CurWindow);
end;

global
updating function Boolean SelectFYIWClassOnOKWindow(Integer wn)
begin
  SelectFYIWClassOKExecute(wn);
  SelectFYIWClassOnOKWindow = false;
end;

global
procedure SelectFYIWClassCancel()
begin
  CloseWindow(CurWindow);
end;

global
function Boolean SelectFYIWClassOnClose(Integer wn,Integer wn2)
begin
  SelectFYIWClassOnClose = false;
end;

global
function Boolean MailTextRegisterSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-1);
  MailTextRegisterSClassOnOKWindow = false;
  return;
end;

global
function Boolean DistrictSClassOnOKWindow(Integer wn)
begin
  record DistrictVc Districtr;
  Boolean res;
  
  if (WindowState(wn)!=Rs_search) then begin
    if (ReadMarkedRecord(wn,Districtr)) then begin
      PasteFromWn(wn,Districtr.Comment);
      res = false;
    end;
  end else begin
    res = true;
  end;
  DistrictSClassOnOKWindow = res;
  return;
end;

global
function Boolean MunicipalitySClassOnOKWindow(Integer wn)
begin
  record MunicipalityVc Municipalityr;
  Boolean res;
  
  if (WindowState(wn)!=Rs_search) then begin
    if (ReadMarkedRecord(wn,Municipalityr)) then begin
      PasteFromWn(wn,Municipalityr.Comment);
      res = false;
    end;
  end else begin
    res = true;
  end;
  MunicipalitySClassOnOKWindow = res;
  return;
end;

global
function Boolean TelephonySoundInputSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,0);
  TelephonySoundInputSClassOnOKWindow = false;
  return;
end;

global
function Boolean TelephonySoundOutputSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,0);
  TelephonySoundOutputSClassOnOKWindow = false;
  return;
end;
