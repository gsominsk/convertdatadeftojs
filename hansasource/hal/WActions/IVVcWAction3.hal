external procedure AutomatedSalesOrderly(string);
remote procedure IVVc_PastevRebate(var record IVVc,Integer);
external function string 255 FindPOSCommandText(Integer);
external procedure WindowFieldGotoForTouchScreen(Integer,Integer,string,Boolean);
external procedure IVDClass_RefreshStringList(Integer,record IVVc);
external procedure RowCalculateTaxMatrix_IVVc(var record IVVc,Integer,row IVVc);
external procedure DisplayIVThankYouAction();
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external procedure SubCashRows_IVVc(record IVVc,Boolean,var val,var val);
external procedure CalcPrice(val,val,val,var val,Integer);
external procedure ReverseString(string,var string);
remote function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure RoundBelCash(string,var val);
external procedure CalcProc(val,val,var val);
external procedure SendArtStat(string,string,string,val,val,val,Date,Integer);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure RoundRowSum(string,string,string,var val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
remote function string 40 IVITDefaultRemote(string,string);
external function Boolean TestForMATVARINS(Integer);
remote updating function LongInt IVCheckIfSaveAllowed(var record IVVc,record IVVc,LongInt,LongInt);
external function Boolean TouchScreenLook();
external procedure ToolKeyPad_Numbers(string);
external function Boolean IVVc_PasteQuantity(var record IVVc,Integer);
external procedure IVVc_PasteItem(record IVVc,Integer,Integer);
remote procedure IVSumup(var record IVVc,Boolean);
external procedure SplitEclass(string,var Array string);
external function Boolean IVDClassInsertRowTest(Integer, Integer);
remote procedure IVVc_PasteInvDate(var record IVVc,record LocalMachineBlock,var Integer,var Integer);
remote function string 255 CurDrawerCode(string);
external procedure B1ToB2Val(val,val,val,var val);

global
function Boolean IVDClassInvalidButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record IVVc IVr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,IVr);
    if (IVr.Invalid!=0) then begin
      res = false;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,IVr);
    if (IVr.Invalid!=0) then begin
      res = false;
    end;
  end;  
  IVDClassInvalidButtonAction = res;
  RETURN;
END;

global
function Boolean IVDClassCreditedRowEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin  
  Integer res;
  record IVVc IVr;
  row IVVc IVrw;
  record IVVc orgIVr;
  Integer credrow;

  if (changedf) then begin  
    GetWindowRecord(wn,IVr);
    if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
      if (IVr.CredInv>0) then begin
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.CreditedRow>=0) then begin
          orgIVr.SerNr = IVr.CredInv;
          if (ReadFirstMain(orgIVr,1,true)) then begin
            credrow = IVrw.CreditedRow;
            MatRowGet(orgIVr,credrow,IVrw);
            IVrw.CreditedRow = credrow;
            MatRowPut(IVr,rownr,IVrw);
          end;
          PutWindowRecord(wn,IVr);
        end;
      end;
    end;
  end;
  IVDClassCreditedRowEFAfter = true;
  return;
end;

global
procedure IVDClassTileItems()
begin
  WindowDeactivateField(CurWindow);
  ActivateTile(CurWindow,1);
  return;
end;

global
procedure IVDClassTileItemsSet1()
begin
  WindowDeactivateField(CurWindow);
  ActivateTile(CurWindow,1);
  return;
end;

global
procedure IVDClassTileItemsSet2()
begin
  WindowDeactivateField(CurWindow);
  ActivateTile(CurWindow,2);
  return;
end;

global
procedure IVDClassTileItemsSet3()
begin
  WindowDeactivateField(CurWindow);
  ActivateTile(CurWindow,3);
  return;
end;

global
procedure IVDClassTileItemsSet4()
begin
  WindowDeactivateField(CurWindow);
  ActivateTile(CurWindow,4);
  return;
end;

global
procedure IVDClassTileItemsSet5()
begin
  WindowDeactivateField(CurWindow);
  ActivateTile(CurWindow,5);
  return;
end;

global
procedure IVDClassTileItemsSet6()
begin
  WindowDeactivateField(CurWindow);
  ActivateTile(CurWindow,6);
  return;
end;

global
procedure IVDClassTileItemsSet7()
begin
  WindowDeactivateField(CurWindow);
  ActivateTile(CurWindow,7);
  return;
end;

global
procedure IVDClassTileMoreItems()
begin
  WindowDeactivateField(CurWindow);
  ActivateTile(CurWindow,8);
  return;
end;

global
procedure IVDClassTileTerms()
begin
  WindowDeactivateField(CurWindow);
  ActivateTile(CurWindow,9);
  return;
end;

global
procedure IVDClassAddressTile()
begin
  WindowDeactivateField(CurWindow);
  ActivateTile(CurWindow,12);
  return;
end;

global
procedure IVDClassTileCurrency()
begin
  WindowDeactivateField(CurWindow);
  ActivateTile(CurWindow,10);
  return;
end;

global
procedure IVDClassTileCash()
begin
  WindowDeactivateField(CurWindow);
  ActivateTile(CurWindow,11);//?
  return;
end;

global
procedure IVDClassTileButtons()
begin
  WindowDeactivateField(CurWindow);
  ActivateTile(CurWindow,11);
  return;
end;

global
procedure IVDClassToolKeyPadDelete()
BEGIN
  KeyPadSelectAll(CurWindow);
  KeyPadDelete(CurWindow);
  RETURN;
END;  

global
function string 40 IVITDefault(string tstr)
BEGIN
  string 40 lsubset;
  record LocalMachineBlock LMr;
  record DIVc DIr;
      
// What, looping over DIVc in client?
//  lsubset = IVITDefaultRemote(tstr,CurMachineName);
  BlockLoad(LMr);
  if (nonblank(LMr.DefRestDisp)) then begin
    lsubset = LMr.DefRestDisp;
  end else begin
    DIr.Code = "";
    if (LoopMain(DIr,1,true)) then begin
      lsubset = DIr.Code;
    end;
  end;
  IVITDefault = lsubset;
  RETURN;
END;  
 
/*JAJ, remote*/ 
procedure slIVHAL(Integer wn)
BEGIN
  record IVVc IVr;
  record DIVc DIr;
  Boolean found;
  string 255 ckey,t2,tstr;

  ClearStringList(wn);
  found = true;
  ckey = "DICode:" & GetWindowSubset(wn);
  while (LoopKey(ckey,DIr,1,found)) begin
    tstr = DIr.Name & " ";
    tstr = tstr & DIr.colnr;
    SetListString(wn,len(tstr),tstr,false);
  end;
  PutWindowRecord(wn,IVr);
  RETURN;
END;          

global
procedure IVDClassToolUp()
BEGIN
  record IVVc IVr;
  record DIVc DIr;
  Array string 20 ac;
  string 255 lsubset;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,IVr);
  DIr.Code = GetWindowSubset(wn);
  if (ReadFirstMain(DIr,1,true)) then begin
    SplitEclass(DIr.DispGroups,ac);
    SetWindowSubset(wn,ac[0]);
    if (blank(GetWindowSubset(wn))) then begin
      lsubset = IVITDefault("");
      SetWindowSubset(wn,lsubset);      
    end;
  end;
  slIVHAL(wn);
  UpdateBrowses("INVc");
  PutWindowRecord(wn,IVr);
  RETURN;
END;  

global
procedure IVDClassToolFileDesktop()
BEGIN
  record IVVc IVr;
  Integer wn;
  string 255 lsubset;

  wn = CurWindow;
  GetWindowRecord(wn,IVr);
  lsubset = IVITDefault("");
  SetWindowSubset(wn,lsubset);      
  slIVHAL(wn);
  UpdateBrowses("INVc");
  PutWindowRecord(wn,IVr);
  RETURN;
END;  

procedure IVDClassToolKeyPadAdd()
BEGIN
  Integer wn,rownr;
  record INVc INr;
  record IVVc IVr;
  row IVVc IVrw;
  Boolean testf;
  Integer i,rwcnt;
  
  wn = CurWindow;
  if (WindowActiveField(wn)=="Quant") then begin testf = true; end;
  if (WindowActiveField(wn)=="Price") then begin testf = true; end;
  DeselectWindow(wn,false);
  if (ReadMarkedRecord(wn,INr)) then begin 
  end;
  WindowDeactivateField(wn);
  if (testf) then begin
    rownr = WindowActiveRow(wn);
    if (rownr>=0) then begin
      GetWindowRecord(wn,IVr);  
      MatRowGet(IVr,rownr,IVrw);
      if (nonblank(INr.Code)) then begin
        if (INr.Code!=IVrw.ArtCode) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        IVrw.Quant = IVrw.Quant + 1;
        MatRowPut(IVr,rownr,IVrw);
        IVVc_PasteQuantity(IVr,rownr);
        PutWindowRecord(wn,IVr);  
        goto LIVToolKeyPadAdd;
      end;
    end;
  end;
  if (nonblank(INr.Code)) then begin
    GetWindowRecord(wn,IVr);  
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.ArtCode==INr.Code) then begin
        rownr = i;
        goto L55IVToolKeyPadAdd;
      end;
    end;
    rownr = rwcnt;
L55IVToolKeyPadAdd:;  
    if (rownr==rwcnt) then begin
      ClearRow(IVr,IVrw,1);
      IVrw.ArtCode = INr.Code;
      MatRowPut(IVr,rownr,IVrw);
      PutWindowRecord(wn,IVr);  
      IVVc_PasteItem(IVr,rownr,wn);
    end else begin
      MatRowGet(IVr,rownr,IVrw);
      IVrw.Quant = IVrw.Quant + 1;
      MatRowPut(IVr,rownr,IVrw);
      IVVc_PasteQuantity(IVr,rownr);
      PutWindowRecord(wn,IVr);
    end;
    WindowFieldGotoForTouchScreen(wn,rownr,"Quant",true);
  end;
LIVToolKeyPadAdd:;  
  RETURN;
END;  

global
function Boolean IVDClassRLClick(Integer wn,Integer rownr)
begin
  record IVVc IVr;
  
  if (TouchScreenLook and IVDClassInsertRowTest(wn,0)) then begin // 030830, kyb, ugly fix
    IVDClassToolKeyPadAdd;
  end;
  
  IVDClassRLClick = true;
  return;
end;

global
procedure IVDClassToolKeyPad1()
BEGIN
  ToolKeyPad_Numbers("1");
  RETURN;
END;  

global
procedure IVDClassToolKeyPad2()
BEGIN
  ToolKeyPad_Numbers("2");
  RETURN;
END;  

global
procedure IVDClassToolKeyPad3()
BEGIN
  ToolKeyPad_Numbers("3");
  RETURN;
END;  

global
procedure IVDClassToolKeyPad4()
BEGIN
  ToolKeyPad_Numbers("4");
  RETURN;
END;  

global
procedure IVDClassToolKeyPad5()
BEGIN
  ToolKeyPad_Numbers("5");
  RETURN;
END;  

global
procedure IVDClassToolKeyPad6()
BEGIN
  ToolKeyPad_Numbers("6");
  RETURN;
END;  

global
procedure IVDClassToolKeyPad7()
BEGIN
  ToolKeyPad_Numbers("7");
  RETURN;
END;  

global
procedure IVDClassToolKeyPad8()
BEGIN
  ToolKeyPad_Numbers("8");
  RETURN;
END;  

global
procedure IVDClassToolKeyPad9()
BEGIN
  ToolKeyPad_Numbers("9");
  RETURN;
END;  

global
procedure IVDClassToolKeyPad0()
BEGIN
  ToolKeyPad_Numbers("0");
  RETURN;
END;  

global
procedure IVDClassToolKeyPad00()
BEGIN
  ToolKeyPad_Numbers("00");
  RETURN;
END;  

global
procedure IVDClassToolKeyPadPoint()
BEGIN
  ToolKeyPad_Numbers(DECIMALSEPARATOR); //## international
  RETURN;
END;  

global
procedure IVDClassToolKeyPadEnter()
BEGIN
  KeyPadEnter(CurWindow);
  RETURN;
END;  

global
procedure IVDClassToolKeyPadExact()
BEGIN
  Integer wn;
  record IVVc IVr;
  
  wn = CurWindow;
  KeyPadEnter(wn);
  GetWindowRecord(wn,IVr);
  WindowDeactivatefield(wn);
  IVSumup(IVr,true);  
  PutWindowRecord(wn,IVr);
  RETURN;
END;  

function Boolean IVDClassBeforeivcashcommandEditField(Integer wn)
begin
  Boolean res;

  if (nonblank(GetWindowNameArg(wn))) then begin
    if (TestForMATVARINS(wn)) then begin
    end;
  end;
  if (GetWindowString(wn,"ivcashcommandlastitemsernrf")=="true") then begin
    if (blank(GetWindowString(wn,"ivcashcommand"))) then begin
      PutWindowString(wn,"ivcashcommand",FindPOSCommandText(kPOSCommandsTypeSerialNr));
    end;
  end;
  IVDClassBeforeivcashcommandEditField = res;
  return;
end;

global
function Boolean IVDClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
begin
  Boolean res;
  Integer nwn;
  record IVVc IVr;
  row IVVc IVrw;
  record INVc INr;

  switch (fieldname) begin  
    case "Quant": 
      GetWindowRecord(wn,IVr);      
      MatRowGet(IVr,rownr,IVrw);
      if (IVrw.Quant==0) then begin
        if (TestForMATVARINS(wn)) then begin end;
      end;
    case "ArtCode": ;
    case "CustCode": 
      if (TouchScreenLook and GuiType!=kGuiiPhone and GuiType!=kGuiAndroid) then begin      
        GetWindowRecord(wn,IVr);      
        if (WindowState(wn)!=0) then begin
          nwn = OpenPasteWindow(wn,GetWindowPasteName(wn,fieldname),IVr.CustCode);
        end;
      end;
    case "SerialNr": 
      if (TouchScreenLook) then begin      
        if (WindowState(wn)!=0) then begin
          if (rownr>=0) then begin
            GetWindowRecord(wn,IVr);      
            MatRowGet(IVr,rownr,IVrw);
            if (ReadFirstItem(IVrw.ArtCode,INr,true,false)) then begin
              if (INr.SerNrf>0) then begin
                nwn = OpenPasteWindow(wn,GetWindowPasteName(wn,fieldname),"");
              end;
            end;
          end;
        end;
      end;
    case "ivcashcommand": 
      if (TouchScreenLook and GuiType!=kGuiiPhone and GuiType!=kGuiAndroid) then begin      
        res = IVDClassBeforeivcashcommandEditField(wn);
      end;
    otherwise
//      if (WindowActiveButton(wn)==0) then begin
/*
        if (TouchScreenLook and GuiType!=kGuiiPhone) then begin      
          if (WindowState(wn)!=0) then begin
            nwn = OpenPasteWindow(wn,GetWindowPasteName(wn,fieldname),IVr.CustCode);
          end;
        end;
*/
//      end;
  end;
  IVDClassBeforeEditField = res;
  RETURN;
END;

global
procedure IVDClassOpenCalendar()
BEGIN
  Integer nwn;
  record RcVc RepSpec;
  Date td;
  
  RepSpec.f1 = CurrentUser;
  td = CurrentDate;
  td.day = 1;
  RepSpec.sStartDate = td;
  td.day = DaysInMonth(td.year,td.month);
  RepSpec.sEndDate = td;
  nwn = OpenWindow("MonthWClass",0,0,"","",RepSpec);
  RETURN;
END;

global
procedure IVDClassNewActivity()
BEGIN
  record ActVc Actr;
  row ActVc Actrw;
  record IVVc IVr;
  row IVVc IVrw;
  Integer wn,nwn;
  Integer i,rwcnt;
    
  wn = CurWindow;
  if (WindowState(wn)!=0) then begin goto LIVDClassNewActivity; end;
  GetWindowRecord(wn,IVr);
  RecordNew(Actr);
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    Actrw.Text = IVrw.ArtCode;
    MatRowPut(Actr,MatRowCnt(Actr),Actrw);
  end;
  nwn = OpenWindow("ActDClass",0,0,"","",Actr);
LIVDClassNewActivity:;  
  RETURN;
END;

global
procedure IVDClassToolIVReturn()
BEGIN
  record IVVc IVr;
  record IVVc newIVr;
  row IVVc cashIVrw;
  row IVVc newIVrw;
  row IVVc IVrw;
  Integer i,rwcnt;
  Integer wn,nwn;
  Boolean foundcashf;
  val credcardv;
  val t,t2;
  integer err1,err2;
  record TaxMatrixVc TMr;
  record LocalMachineBlock LMb;

  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,IVr);
  
  SubCashRows_IVVc(IVr,true,t,t2);
/*
why not to return smthing on account ? 
  if (IVr.InvType!=kInvoiceTypeCash) and (t!=0) then begin 
    goto LIVDClassToolIVReturn; 
  end;
*/  
  if (IVr.OrderNr>0) then begin
    goto LIVDClassToolIVReturn; 
  end;
  if (IVr.OKFlag==0) then begin
    BlockLoad(LMb);
    if (HasLocalization("POL")) then begin
      IVr.FiscalFlag = 0;
    end;
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
        IVrw.Quant = -IVrw.Quant;
        IVrw.Sum = -IVrw.Sum;
        IVrw.rowGP = -IVrw.rowGP;
        RowCalculateTaxMatrix_IVVc(IVr,i,IVrw);
        MatRowPut(IVr,i,IVrw);
      end;
      if ((IVrw.stp==kInvoiceRowTypeGiftVoucherSold) or (IVrw.stp==kInvoiceRowTypeGiftVoucherPayment)) then begin
        MatRowDelete(IVr,i);
        rwcnt = MatRowCnt(IVr);
      end;
      if (IVrw.stp==kInvoiceRowTypeCreditCardPayment) then begin
        credcardv = credcardv + IVrw.Sum;
        IVrw.Sum = -IVrw.Sum;
        MatRowPut(IVr,i,IVrw);
      end;

      if (foundcashf==false) then begin
        if ((IVrw.stp==kInvoiceRowTypeCashPayment) or (IVrw.stp==kInvoiceRowTypeLoyaltyPointsPayment)) then begin
          CopyRow(IVr,IVrw,cashIVrw);
          cashIVrw.Sum = -t;
          MatRowDelete(IVr,i);
          rwcnt = MatRowCnt(IVr);
          i = i -1;
          foundcashf = true;
        end;
      end;
    end;
//    if (foundcashf) or (credcardv!=0) then begin //what if new window with just item created ? 
    if (true) then begin
      if (foundcashf) then begin
        cashIVrw.Sum = cashIVrw.Sum + credcardv;
        MatRowPut(IVr,MatRowCnt(IVr),cashIVrw);
      end;
      IVSumup(IVr,true);
      PutWindowRecord(wn,IVr);
      IVDClass_RefreshStringList(wn,IVr);
      WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",true);
    end else begin
      MessageBox(2074,"");
    end;
  end else begin
    RecordNew(newIVr);
    RecordCopy(newIVr,IVr);
    if (HasLocalization("POL")) then begin
      newIVr.FiscalFlag = 0;
    end;
    newIVr.OKFlag = 0;
    newIVr.SerNr = -1;
    newIVr.InvDate = CurrentDate;
    newIVr.MachineName = CurMachineName;
    newIVr.DrawerCode = CurDrawerCode(newIVr.MachineName);
//    newIVr.InvType = kInvoiceTypeCredit;
    IVVc_PasteInvDate(newIVr,LMb,err1,err2);
    
    rwcnt = MatRowCnt(newIVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowDelete(newIVr,i);
      rwcnt = MatRowCnt(newIVr);
      i = i - 1;
    end;
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,newIVrw);
      if (newIVrw.stp==kInvoiceRowTypeNormal) or (newIVrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
        newIVrw.Quant = -newIVrw.Quant;
        newIVrw.Sum = -newIVrw.Sum;
        newIVrw.rowGP = -newIVrw.rowGP;
        RowCalculateTaxMatrix_IVVc(newIVr,i,newIVrw);
        MatRowPut(newIVr,MatRowCnt(newIVr),newIVrw);
      end;
/*
      if (newIVrw.stp==kInvoiceRowTypeCreditCardPayment) then begin
        credcardv = credcardv + newIVrw.Sum;
        newIVrw.Sum = -newIVrw.Sum;
        MatRowPut(newIVr,MatRowCnt(newIVr),newIVrw);
      end;
      if (foundcashf==false) then begin
        if (newIVrw.stp==kInvoiceRowTypeCashPayment) then begin
          CopyRow(newIVr,newIVrw,cashIVrw);
          cashIVrw.Sum = -t;
          foundcashf = true;
        end;
      end;
*/
    end;
/*
    if (foundcashf) then begin
      cashIVrw.Sum = cashIVrw.Sum + credcardv;
      MatRowPut(newIVr,MatRowCnt(newIVr),cashIVrw);
    end;
*/
    
    if (MatRowCnt(newIVr)>0) then begin
      if (IVr.SerNr!=newIVr.SerNr) then begin
        ClearRow(newIVr,newIVrw,kInvoiceRowTypeCredit);    
        newIVrw.OrdRow = IVr.SerNr;
        MatRowPut(newIVr,MatRowCnt(newIVr),newIVrw);
      end;
    end;
    
    IVSumup(newIVr,true);
    CloseWindow(wn);
    if (SingleUserMode) then begin 
      newIVr.SerNr = NextSerNr("IVVc",newIVr.TransDate,"",true,newIVr.LangCode);
    end;
    nwn = OpenWindow("IVDClass",1,0,"","",newIVr);
    IVDClass_RefreshStringList(nwn,newIVr);
    WindowFieldGotoForTouchScreen(nwn,-1,"ivcashcommand",true);
  end;
LIVDClassToolIVReturn:;  
  RETURN;
END;

global
procedure IVDClassIVLCLASS()
BEGIN
  Integer nwn;
  record IVVc IVr;
  
  nwn = OpenWindow("IVLClass",0,0,"","",IVr);
  RETURN;
END;

global
procedure IVDchsum(var record IVVc IVp,Integer rownr)
BEGIN
  row IVVc IVrw;
  row IVVc IV2rw;
  val t,s,rowsum,tproc,unitprdisc;
  val qty,sum;
  string 255 location;
  record TaxMatrixVc TMr;
  val gp;
  Integer i,rwcnt;

  if (rownr>=0) then begin
    MatRowGet(IVp,rownr,IVrw);
  end;
  location = IVrw.Location;
  if (blank(location)) then begin
    location = IVp.Location;
  end;
  qty = IVrw.Quant;
  if ((IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeInterest) or (IVrw.stp==kInvoiceRowTypeCorrection) or (IVrw.stp==kInvoiceRowTypeMultiBuyDiscount)) then begin
    if (nonblank(IVrw.ArtCode)) then begin
      t = qty * IVrw.BasePrice;
      if (IVrw.PriceFactor!=0) then begin
        t = t/IVrw.PriceFactor;
      end;
      sum = IVrw.Sum;
      s = MulRateToBase1(IVp.CurncyCode,sum,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
      UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
      FindSalesExVat(TMr,IVrw.VATCode,s,IVp.InclVAT,IVp.NoTAXonVAT,rowsum);      
      IVrw.rowGP = rowsum - t;
    end else begin
      IVrw.rowGP = 0;
      IVrw.BasePrice = 0;
    end;
    if (rownr>=0) then begin
      MatRowPut(IVp,rownr,IVrw);
    end;
  end;
  if (rownr>=0) then begin
    MatRowGet(IVp,rownr,IVrw);
  end;
  unitprdisc = Round(IVrw.Sum / IVrw.Quant,DefaultRoundMode);
  if (rownr>=0) then begin
    MatRowPut(IVp,rownr,IVrw);
  end;
  gp = IVrw.rowGP;
  rwcnt = MatRowCnt(IVp);  
  for (i=rownr+1;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IV2rw);
    switch (IV2rw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        if (IV2rw.MotherArtCode==IVrw.ArtCode) then begin
          gp = gp + IV2rw.rowGP;
        end;
      otherwise
        i = rwcnt;
    end;
  end;    
  CalcProc(rowsum,gp,tproc);  
  SendArtStat(IVrw.ArtCode,location,IVrw.Recepy,gp,tproc,unitprdisc,IVp.TransDate,0);
  RETURN;
END;

global
function Boolean IVDchrsum(var record IVVc IVp,Integer rownr)
BEGIN
  row IVVc IVrw;
  val s,p,q,frv;
  Boolean res,frvchangedf,sumchangedf;
  record GeneralOptionBlock GOb;
  record BelRusCashBlock BelRusCashr;
  
  BlockLoad(GOb);
  MatRowGet(IVp,rownr,IVrw);
  if ((IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeInterest) or (IVrw.stp==kInvoiceRowTypeCorrection)) then begin
    p = IVrw.Price; 
    CalcPrice(IVrw.BasePrice,IVrw.PriceFactor,IVrw.vRebate,p,GOb.UseDiscount);
    IVrw.Price = p;  
    q = IVrw.Quant;
    if (IsStandardProduct) then begin
      if (blank(q)) then begin q = 1; end;
    end;
    CalcSum(q,IVrw.Price,IVrw.PriceFactor,IVrw.vRebate,s,GOb.UseDiscount);  
    if (HasLocalization("BLR")) then begin
      BlockLoad(BelRusCashr);
      if (SetInSet(IVp.PayDeal,BelRusCashr.CashPayTerm)) then begin
        RoundBelCash(IVp.CurncyCode,s);
      end else begin
        RoundRowSum(IVp.CurncyCode,IVp.PayDeal,"IVVc",s);
      end;
    end else begin
      RoundRowSum(IVp.CurncyCode,IVp.PayDeal,"IVVc",s);
    end;
    if (s!=IVrw.Sum) or ((s==0.00) and (blank(IVrw.Sum))) then begin
      sumchangedf = true;
    end;
    if (IVp.OrderNr>0) then begin
      if (IVrw.OrdRow>=0) then begin
        frv = IVrw.Quant*IVrw.FIFO;
        if (frv!=IVrw.FIFORowVal) then begin
          frvchangedf = true;
        end;
      end;
    end;
    if (sumchangedf) then begin
      IVrw.Sum = s;
      res = true;        
      RowCalculateTaxMatrix_IVVc(IVp,rownr,IVrw);
    end;
    if (frvchangedf) then begin
      IVrw.FIFORowVal = frv;
    end;
    if (frvchangedf or sumchangedf) then begin
      MatRowPut(IVp,rownr,IVrw);
    end;
  end;
  if (IVrw.Price==0) then begin res = true; end;
  IVDchrsum = res;
  RETURN;
END;

global
function Boolean IVDClassActiveFieldOnNew(Integer wn)
begin
  Boolean res;
  record CashierDefBlock CDb;
  record IVVc IVr;

  if (CompileType==ctiPhone or CompileType==ctiPad or CompileType==ctAndroidPhone or CompileType==ctAndroidTab) then begin
    res = true;
    goto LIVDClassActiveFieldOnNew;
  end;
  
  GetWindowRecord(wn,IVr);
  BlockLoad(CDb);
  switch (CDb.DefInvoiceField) begin
    case 0:
      if (TouchScreenLook) then begin    
/*
        if (nonblank(IVr.CustCode)) then begin
          WindowFieldGoto(wn,IVr,0,"ArtCode",true);
          res = true;
        end;
*/
        WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",true);
        res = true;
      end;
    case 1:
      WindowFieldGoto(wn,IVr,0,"ArtCode",true);
      res = true;
    case 2:
      WindowFieldGoto(wn,IVr,0,"SerialNr",true);
      res = true;
  end;
  
LIVDClassActiveFieldOnNew:;
  IVDClassActiveFieldOnNew = res;
  return;
end;

global
function Boolean IVDClassBasePriceEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;
  row IVVc IVrw;
  val t;

  if (changed!=0) and (rownr>=0) then begin  
    GetWindowRecord(wn,IVr);
    DeselectWindow(wn,false);
    MatRowGet(IVr,rownr,IVrw);
    B1ToB2Val(IVrw.BasePrice,IVr.BaseRate1,IVr.BaseRate2,t);
    IVrw.BasePriceB2 = t;
    MatRowPut(IVr,rownr,IVrw);
    switch (IVrw.stp) begin
      case 4: 
        if (IVDchrsum(IVr,rownr)) then begin
        end;
        IVDchsum(IVr,rownr);
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkInvoiceRowTypeNormal1;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal1:;
        if (IVDchrsum(IVr,rownr)) then begin
        end;
        IVDchsum(IVr,rownr);
      case 11: 
        if (IVDchrsum(IVr,rownr)) then begin
        end;
        IVDchsum(IVr,rownr);
    end;
    IVSumup(IVr,true);
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassBasePriceEFAfter = true;
  return;
end;

global
function Boolean IVDClassvRebateEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;

  if (changed!=0) and (rownr>=0) then begin  
    GetWindowRecord(wn,IVr);
    IVVc_PastevRebate(IVr,rownr);
    PutWindowRecord(wn,IVr);
    AutomatedSalesOrderly("HasPriceLists+Edit_IVVc");
  end;  
  IVDClassvRebateEFAfter = true;
  return;
end;
