remote procedure DropSHSumUp(var record DropSHVc);

procedure DADSumup(record DAVc DAr)
begin
  Integer i,rwcnt;
  row DAVc DArw;
  
  DAr.PayVal = blankval;
  rwcnt = MatRowCnt(DAr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(DAr,i,DArw);
    DAr.PayVal = DAr.PayVal + DArw.Compensation;;
  end;
  return;
end;

procedure DADchrsum(record DAVc DAr,Integer rownr)
begin  
  row DAVc DArw;
  val totrate;

  MatRowGet(DAr,rownr,DArw);
  totrate = DArw.BreakfastRate + DArw.LunchRate + DArw.DinnerRate;
  switch (DArw.Breakfast) begin
    case kDAMealProvided:
      DArw.BreakfastSum = (DArw.BreakfastRate*DArw.DailySum)/100;
    case kDAMealNotProvided:
      DArw.BreakfastSum = 0.00;
  end;
  switch (DArw.Lunch) begin
    case kDAMealProvided:
      DArw.LunchSum = (DArw.LunchRate*DArw.DailySum)/100;
    case kDAMealNotProvided:
      DArw.LunchSum = 0.00;
  end;
  switch (DArw.Dinner) begin
    case kDAMealProvided:
      DArw.DinnerSum = (DArw.DinnerRate*DArw.DailySum)/100;
    case kDAMealNotProvided:
      DArw.DinnerSum = 0.00;
  end;

  DArw.Compensation = DArw.DailySum - (DArw.BreakfastSum + DArw.LunchSum + DArw.DinnerSum);

//Trace("","DArw.Dinner " & DArw.Dinner & " DArw.DinnerSum " & DArw.DinnerSum & " DArw.Lunch " & DArw.Lunch & " DArw.LunchSum " & DArw.LunchSum & " DArw.Breakfast " & DArw.Breakfast & " DArw.BreakfastSum " & DArw.BreakfastSum & " DArw.Compensation " & DArw.Compensation);

//  DArw.Compensation = (DArw.BreakfastSum + DArw.LunchSum + DArw.DinnerSum)totrate;
  MatRowPut(DAr,rownr,DArw);
  return;
end;

function Boolean DADClassPersonEFAfter(Integer wn,Boolean changedf)
begin
  record DAVc DAr;
  record UserVc Userr;
  Boolean res;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,DAr);
    Userr.Code = DAr.Person;
    ReadFirstMain(Userr,1,true);
    DAr.Name = Userr.Name;
    PutWindowRecord(wn,DAr);    
  end;
  DADClassPersonEFAfter = res;
  return;
end;

function Boolean DADClassCountryEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record DAVc DAr;
  row DAVc DArw;
  record DARateVc DARr;
  Boolean res;
  val nrofmeals;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,DAr);
    MatRowGet(DAr,rownr,DArw);
    DARr.Country = DArw.Country;
    ReadFirstMain(DARr,1,true);
    DArw.DailySum = DARr.DailySum;
    switch (DAr.RateType) begin
      case kDARateTypePerMealType:
        DArw.BreakfastRate = DARr.BreakfastRate;
        DArw.LunchRate = DARr.LunchRate;
        DArw.DinnerRate = DARr.DinnerRate;
      case kDARateTypePerMealNumber:
        DArw.BreakfastRate = 0;
        DArw.LunchRate = 0;
        DArw.DinnerRate = 0;
        nrofmeals = DArw.Breakfast + DArw.Lunch + DArw.Dinner;
        switch (nrofmeals) begin
          case 1:
            DArw.BreakfastRate = DARr.OneMealRate;
          case 2:
            DArw.BreakfastRate = DARr.TwoMealsRate/2.00;
            DArw.LunchRate = DARr.TwoMealsRate/2.00;
          case 3:
            DArw.BreakfastRate = DARr.ThreeMealsRate/3.00;
            DArw.LunchRate = DARr.ThreeMealsRate/3.00;
            DArw.DinnerRate = DARr.ThreeMealsRate/3.00;
        end;
    end;
    MatRowPut(DAr,rownr,DArw);
    DADchrsum(DAr,rownr);
    DADSumup(DAr);
    PutWindowRecord(wn,DAr);    
  end;
  DADClassCountryEFAfter = res;
  return;
end;

function Boolean DADClassBreakfastEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record DAVc DAr;
  row DAVc DArw;
  record DARateVc DARr;
  Boolean res;
  val nrofmeals;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,DAr);
    MatRowGet(DAr,rownr,DArw);
    DARr.Country = DArw.Country;
    ReadFirstMain(DARr,1,true);
    switch (DAr.RateType) begin
      case kDARateTypePerMealNumber:
        DArw.BreakfastRate = 0;
        DArw.LunchRate = 0;
        DArw.DinnerRate = 0;
        nrofmeals = DArw.Breakfast + DArw.Lunch + DArw.Dinner;
        switch (nrofmeals) begin
          case 1:
            DArw.BreakfastRate = DARr.OneMealRate;
          case 2:
            if (DArw.Breakfast) then begin
              DArw.BreakfastRate = DARr.TwoMealsRate/2.00;
            end;
            if (DArw.Lunch) then begin
              DArw.LunchRate = DARr.TwoMealsRate/2.00;
            end;
            if (DArw.Dinner) then begin
              DArw.DinnerRate = DARr.TwoMealsRate/2.00;
            end;
          case 3:
            DArw.BreakfastRate = DARr.ThreeMealsRate/3.00;
            DArw.LunchRate = DARr.ThreeMealsRate/3.00;
            DArw.DinnerRate = DARr.ThreeMealsRate/3.00;
        end;
    end;
    MatRowPut(DAr,rownr,DArw);
    DADchrsum(DAr,rownr);
    DADSumup(DAr);
    PutWindowRecord(wn,DAr);    
  end;
  DADClassBreakfastEFAfter = res;
  return;
end;

function Boolean DADClassLunchEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record DAVc DAr;
  row DAVc DArw;
  Boolean res;
  val nrofmeals;
  record DARateVc DARr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,DAr);
    MatRowGet(DAr,rownr,DArw);
    DARr.Country = DArw.Country;
    ReadFirstMain(DARr,1,true);
    switch (DAr.RateType) begin
      case kDARateTypePerMealNumber:
        DArw.LunchRate = 0;
        nrofmeals = DArw.Breakfast + DArw.Lunch + DArw.Dinner;
        switch (nrofmeals) begin
          case 1:
            DArw.LunchRate = DARr.OneMealRate;
          case 2:
            if (DArw.Breakfast) then begin
              DArw.BreakfastRate = DARr.TwoMealsRate/2.00;
            end;
            if (DArw.Lunch) then begin
              DArw.LunchRate = DARr.TwoMealsRate/2.00;
            end;
            if (DArw.Dinner) then begin
              DArw.DinnerRate = DARr.TwoMealsRate/2.00;
            end;
          case 3:
            DArw.BreakfastRate = DARr.ThreeMealsRate/3.00;
            DArw.LunchRate = DARr.ThreeMealsRate/3.00;
            DArw.DinnerRate = DARr.ThreeMealsRate/3.00;
        end;
    end;

    MatRowPut(DAr,rownr,DArw);
    DADchrsum(DAr,rownr);
    DADSumup(DAr);
    PutWindowRecord(wn,DAr);    
  end;
  DADClassLunchEFAfter = res;
  return;
end;

function Boolean DADClassDinnerEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record DAVc DAr;
  row DAVc DArw;
  Boolean res;
  val nrofmeals;
  record DARateVc DARr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,DAr);
    MatRowGet(DAr,rownr,DArw);
    DARr.Country = DArw.Country;
    ReadFirstMain(DARr,1,true);
    switch (DAr.RateType) begin
      case kDARateTypePerMealNumber:
        DArw.DinnerRate = 0;
        nrofmeals = DArw.Breakfast + DArw.Lunch + DArw.Dinner;
        switch (nrofmeals) begin
          case 1:
            DArw.DinnerRate = DARr.OneMealRate;
          case 2:
            if (DArw.Breakfast) then begin
              DArw.BreakfastRate = DARr.TwoMealsRate/2.00;
            end;
            if (DArw.Lunch) then begin
              DArw.LunchRate = DARr.TwoMealsRate/2.00;
            end;
            if (DArw.Dinner) then begin
              DArw.DinnerRate = DARr.TwoMealsRate/2.00;
            end;
          case 3:
            DArw.BreakfastRate = DARr.ThreeMealsRate/3.00;
            DArw.LunchRate = DARr.ThreeMealsRate/3.00;
            DArw.DinnerRate = DARr.ThreeMealsRate/3.00;
        end;
    end;
    MatRowPut(DAr,rownr,DArw);
    DADchrsum(DAr,rownr);
    DADSumup(DAr);
    PutWindowRecord(wn,DAr);    
  end;
  DADClassDinnerEFAfter = res;
  return;
end;

global
function Boolean DADClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "Person": res = DADClassPersonEFAfter(wn,changed!=0);
    case "Country": res = DADClassCountryEFAfter(wn,rownr,changed!=0);
    case "Breakfast": res = DADClassBreakfastEFAfter(wn,rownr,changed!=0);
    case "Lunch": res = DADClassLunchEFAfter(wn,rownr,changed!=0);
    case "Dinner": res = DADClassDinnerEFAfter(wn,rownr,changed!=0);
  end;
  DADClassAfterEditField = res;
  return;
end;

global
function Boolean DADClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record DAVc DAr;
  row DAVc DArw;
  Boolean res;
  
  res = true;
  if (WindowState(wn)==Rs_update) then begin 
    GetPrevWindowRecord(wn,DAr);
    if (DAr.OKFlag!=0) then begin
      res = false;
    end;
  end;
  DADClassDeleteRowTest = res;
  return;
end;

global
function Boolean DADClassInsertRowTest(Integer wn,Integer rownr)
begin
  record DAVc DAr;
  row DAVc DArw;
  Boolean res;
  
  res = true;
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,DAr);
      if (DAr.OKFlag!=0) then begin res = false; end;
    case Rs_insert:
      res = true;
    case Rs_update:
      GetPrevWindowRecord(wn,DAr);
      if (DAr.OKFlag!=0) then begin res = false; end;
    otherwise
      res = false;
  end;
  DADClassInsertRowTest = res;
  return;
end;

global
function Boolean DADClassOnOverStrike(Integer wn,Integer rownr)
begin
  record DAVc DAr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,DAr);    
    PutWindowRecord(wn,DAr);   
  end;
  DADClassOnOverStrike = true;
  return;
end;

function Boolean DADClassButtonAction(string whichone,Integer wn,Integer value)
begin
  Boolean res;
  record DAVc DAr;
 
  res = true;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,DAr);
    if (DAr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
      if (UserCanAction("UnOKDA",false)) then begin
        res = true;
      end;
    end;
  end;  
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,DAr);
    if (DAr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  DADClassButtonAction = res;
  return;
end;

global
function Boolean DADClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  
  res = DADClassButtonAction("OKFlag",wn,value);
  DADClassOKFlagButtonAction = res;
  return;
end;

global
function Boolean DADClassRateTypeButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  
  res = DADClassButtonAction("RateType",wn,value);
  res = false;
  DADClassRateTypeButtonAction = res;
  return;
end;

global
function Boolean DADClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record DAVc DAr;
  record DAVc DA2r;
  Integer updatemode;
  string 200 tstr;
  
  res = true;
  GetWindowRecord(wn,DAr);
  switch (fieldname) begin
    case "BreakfastRate": res = false;
    case "LunchRate": res = false;
    case "DinnerRate": res = false;
  end;

  if (wnst==Rs_update) then begin
    GetPrevWindowRecord(wn,DA2r);
    if (DA2r.OKFlag!=0) then begin
      switch (fieldname) begin
        otherwise
          res = false;
      end;
    end;
  end;
  if (res) then begin
    if (rownr>=0) then begin
      switch (fieldname) begin
        otherwise
          if (DAr.OKFlag!=0) then begin
            res = false;
            if (changed!=0) then begin
              MessageBox(1067,tstr);
            end;
          end;
      end;
    end;
  end;
  DADClassActiveEditField = res;
  return;
end;

