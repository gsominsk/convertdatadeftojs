remote function Boolean ProdOrderSerNrChangeAllowed(LongInt);
remote procedure CreateProdFromProdOrder(record ProdOrderVc,var record ProdVc);
remote procedure ProdOrderVc_PasteItem(var record ProdOrderVc,Integer );
external procedure RecordActionProdOrder_Print(var record ProdOrderVc,string);
remote function Boolean PasteRecInProdOrder(var record ProdOrderVc);
remote function Boolean UpdateProdOrderWithNewMachine(var record ProdOrderVc,Boolean);
remote procedure CalcProdDuration(var record ProdOrderVc);

function Boolean ProdOrderDClassRecipeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  row ProdOrderVc ProdOrw;
  record ProdOrderVc ProdOr;
  Boolean res;
  
  res = true;

  if (changed!=0) then begin
    GetWindowRecord(wn,ProdOr);
    if (PasteRecInProdOrder(ProdOr)) then begin
      PutWindowRecord(wn,ProdOr);    
    end;
  end;

  ProdOrderDClassRecipeEFAfter = res;
  return;
end;

function Boolean ProdOrderDClassMachineEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  row ProdOrderVc ProdOrw;
  record ProdOrderVc ProdOr;
  Boolean res;
  
  res = true;

  if (changed!=0) then begin
    GetWindowRecord(wn,ProdOr);
    if (UpdateProdOrderWithNewMachine(ProdOr,true)) then begin
      PutWindowRecord(wn,ProdOr);    
    end else begin
      Beep;
    end;
  end;

  ProdOrderDClassMachineEFAfter = res;
  return;
end;

function Boolean ProdOrderDClassQtyEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  row ProdOrderVc ProdOrw;
  record ProdOrderVc ProdOr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,ProdOr);
/* Why??
    GetWindowRecord(wn,ProdOr);
    if (PasteRecInProdOrder(ProdOr)) then begin
      PutWindowRecord(wn,ProdOr);    
    end;
  end;
*/
    CalcProdDuration(ProdOr);
    PutWindowRecord(wn,ProdOr);
  end;
  ProdOrderDClassQtyEFAfter = res;
  return;
end;

function Boolean ProdOrderDClassItemEFAfter(Integer wn, Integer rownr,Boolean changedf)
begin
  row ProdOrderVc ProdOrw;
  record ProdOrderVc ProdOr;
  Boolean res;
  
  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,ProdOr);
    ProdOrderVc_PasteItem(ProdOr,rownr);
//    ProdSumup(Prodr);
    PutWindowRecord(wn,ProdOr);    
//    if (ProdDClassSwitchRow(wn,rownr)) then begin end;
  end;
  ProdOrderDClassItemEFAfter = res;
  return;
end;

global
function Boolean ProdOrderDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "Machine": res = ProdOrderDClassMachineEFAfter(wn,fn,rownr,changed);
    case "Recipe": res = ProdOrderDClassRecipeEFAfter(wn,fn,rownr,changed);
    case "Qty": res = ProdOrderDClassQtyEFAfter(wn,fn,rownr,changed);
    case "Item": res = ProdOrderDClassItemEFAfter(wn,rownr,changed!=0);
  end;
  
  ProdOrderDClassAfterEditField = res;
  
  return;
end;

global
function Boolean ProdOrderDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record ProdOrderVc ProdOrderr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,ProdOrderr);
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,ProdOrderr);
  end;  
  if (ProdOrderr.StatusFlag>2) then begin
    res = false;
  end;  
  ProdOrderDClassOKFlagButtonAction = res;
  RETURN;
END;

function Boolean TestProdOrderSerNrChange(record ProdOrderVc ProdOrderr)
begin
  Boolean res;
  
  res = ProdOrderSerNrChangeAllowed(ProdOrderr.SerNr);
  TestProdOrderSerNrChange = res;
  return;
end;

global
function Boolean ProdOrderDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record ProdOrderVc ProdOrderr;
  Integer insertmode,updatemode;

  res = true;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update  

  switch (wnst) begin
    case Rs_insert:
      res = true;
    otherwise
      GetPrevWindowRecord(wn,ProdOrderr);
      switch (fieldname) begin
        case "SerNr":
          if (ProdOrderr.StatusFlag>0) then begin
            res = false;
          end;
          if (res) then begin
            GetWindowRecord(wn,ProdOrderr);
            res = TestProdOrderSerNrChange(ProdOrderr);
          end;
        otherwise
          if (ProdOrderr.StatusFlag>2) then begin
            res = false;
          end;
      end;
  end;
/*
  if (WindowState(wn)!=insertmode) then begin
    if (fieldname=="SerNr") then begin
      res = false;
    end;
  end;
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,ProdOrderr);
    if (ProdOrderr.StatusFlag>2) then begin
      res = false;
    end;    
  end;
*/    
  ProdOrderDClassActiveEditField = res;
  return;
end;

global
function Boolean ProdOrderDClassUpdateTest(Integer wn)
BEGIN
  Boolean res;
  record ProdOrderVc ProdOrderr;
  
  res = true;
  GetWindowRecord(wn,ProdOrderr);
  if (ProdOrderr.StatusFlag>2) then begin res = false; end;
  ProdOrderDClassUpdateTest = res;
  RETURN;
END;

global
updating function Boolean MoveProdOrdVClassOnOKWindow(Integer wn)
BEGIN
  record RcVc RepSpec;
  record ProdOrderVc ProdOrderr;
  Integer mwn;
  
  mwn = MotherWindow(wn);
  GetWindowRecord(wn,RepSpec);
  RunMaintenance(RepSpec);
  CloseWindow(wn);
  UpdateBrowses("ProdOrderVc");
  if (mwn!=0) then begin
    ProdOrderr.SerNr = RepSpec.long1;
    if (ReadFirstMain(ProdOrderr,1,true)) then begin
      PutWindowRecord(mwn,ProdOrderr);
    end;
  end;
  MoveProdOrdVClassOnOKWindow = false;
  RETURN;
END;

global
updating procedure MoveProdOrdVClassRun()
begin
  DeselectWindow(CurWindow,false);
  if (MoveProdOrdVClassOnOKWindow(CurWindow)) then begin
  end;
  return;
end;

global
procedure MoveProdOrdDsm()
begin
  record ProdOrderVc ProdOrderr;
  Integer wn,wn2;
  record RcVc RepSpec;

  wn = CurWindow;
  if (WindowState(wn)==0)then begin
    GetWindowRecord(wn,ProdOrderr);
    ReportDefaults(RepSpec,"MoveProdOrdVClass");  
    wn2 = OpenWindow("MoveProdOrdVClass",0,wn,"","",RepSpec);
    DeselectWindow(wn2,false);
    RepSpec.repname = "MoveProdOrdMn";
    RepSpec.long1 = ProdOrderr.SerNr;
    RepSpec.long2 = ProdOrderr.QueuePos;
    PutWindowRecord(wn2,RepSpec);  
    GetWindowRecord(wn2,RepSpec);  
    SelectWindow(wn2);
  end else begin
    Beep;
  end;
  return;
end;

global
updating procedure PrintProdOrderL(Integer wn,Boolean previewf)
BEGIN
  record ProdOrderVc Prodr;
  Integer i;
  
  StartPrintDialogGroup;
  i = 1;
  while (GetRecordFromBrowse(Prodr,wn,i)) begin
    RecordActionProdOrder_Print(Prodr,previewf);
    i = i + 1;
  end;
  EndPrintDialogGroup;
  RETURN;
END;

global
procedure ProdOrdStatussm()
begin
  record RcVc RepSpec;
  Integer wn;
  Record ProdOrderVc ProdOrderr;
  Date td;

  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,ProdOrderr);  
  ReportDefaults(RepSpec,"ProdOrdRClass");
  RepSpec.repname = "ProdOrdRn";
  td.year = 1980;  td.month = 1; td.day = 1;
  RepSpec.sStartDate = td;
  td.year = 2030;  td.month = 12; td.day = 31;
  RepSpec.sEndDate = td;
  RepSpec.f1 = ProdOrderr.SerNr;  
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.flags[6] = 1;
  RepSpec.flags[7] = 1;
  RepSpec.ArtMode = 2;
  RepSpec.Media = mtScreen; 
  RunReport(RepSpec,0);
  RETURN;
END;

global
procedure NextProductionMsm()
begin
  record RcVc RepSpec;
  Integer wn;
  Record ProdOrderVc ProdOrderr;

  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,ProdOrderr);  
  ReportDefaults(RepSpec,"NextProductionRClass");
  RepSpec.repname = "NextProductionRn";
  RepSpec.f1 = ProdOrderr.SerNr;  
  RepSpec.Media = mtScreen; 
  RunReport(RepSpec,0);
  RETURN;
END;

global
procedure ProdOrdFinishBatchDsm()
begin
  Integer wn;
  Integer newwn;
  record ProdOrderVc ProdOr;
  record ProdVc Prodr;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin
    GetWindowRecord(wn,ProdOr);
    if ((ProdOr.StatusFlag>0) and (ProdOr.StatusFlag<3) and (nonblank(ProdOr.Machine) or nonblank(ProdOr.Routing))) then begin
      CreateProdFromProdOrder(ProdOr,Prodr);
      newwn = OpenWindow("ProdDClass",1,0,"","",Prodr);
      if (blank(ProdOr.Machine)) then begin
        MessageBox(2166,"");
      end;
    end;
  end;
  return;
end;
