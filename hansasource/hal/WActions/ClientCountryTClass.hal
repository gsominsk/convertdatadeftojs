external updating function Boolean ImportDefaultsOnServer2(string,Integer,Integer,string,string,string);
external updating procedure ResetLookupAddress();
external updating procedure StdCreateDefaultUser();
external updating procedure StdSetupNewDatabaseDefaults();
external updating procedure StdCreateRegisteredUser(string,Longint,Longint,string,string,string);
external updating procedure StoreCustomerHWAsync(Boolean);
external procedure SetProductTags();
external function Boolean IsEnterprise();
external function Boolean CheckAndImportFile(string);

function Boolean AddCountryIfExists2(Integer wn,string text,string tag,string folder,var Integer count,Boolean countf,var string firstcountry)
begin
  Boolean res;
  
  if (DirExists(folder)) then begin
    if (countf==false) then begin
      SetListStringAndTag(wn,0,text,tag);
    end;
    count = count + 1;
    if (blank(firstcountry)) then begin
      firstcountry = tag;
    end;
    res = true;
  end;
  
  AddCountryIfExists2 = res;
  return;
end;

procedure AddCountryIfExists(Integer wn,string text,string tag,var Integer count,Boolean countf,var string firstcountry)
begin
  string 255 tstr;
  
  if (WindowsMode==0) then begin
    if (AddCountryIfExists2(wn,text,tag,ResourceFolder & "/" & tag,count,countf,firstcountry)) then begin
      goto LAddCountryIfExists99;
    end;
  end;
  
  AddCountryIfExists2(wn,text,tag,ProgramFolder & "/" & tag,count,countf,firstcountry);
  
LAddCountryIfExists99:;
  return;
end;

global
function Integer AddOrCountCountries2(Integer wn,Boolean countf,var string firstcountry)
begin
  Integer count;
  firstcountry = "";
  AddCountryIfExists(wn,StringFromSet(542,vatAlgeria),"DZA",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatAngolan),"AGO",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatArgentinean),"ARG",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatAustralia),"AUS",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatAzerbaijan),"AZE",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatBahrain),"BHR",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatBelarusian),"BLR",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatBolivian),"BOL",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatBrazil),"BRA",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatCanada),"CAN",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatColombian),"COL",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatChilean),"CHL",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatChina),"CHN",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatCostaRican),"CRI",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatCroation),"HRV",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatCzech),"CZE",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatDanish),"DEN",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatEgypt),"EGY",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatEstonian),"EST",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatFinnish),"FIN",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatFrench),"FRA",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatGerman),"DEU",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatGuatemalean),"GTM",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatHonduran),"HND",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatHungarian),"HUN",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatIcelandic),"ISL",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatIndian),"IND",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatItalian),"ITA",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatJordan),"JOR",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatKenyan),"KEN",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatKuwait),"KWT",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatLebanon),"LBN",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatLatvian),"LVA",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatLithuanian),"LTU",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatMexican),"MEX",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatMozambican),"MOZ",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatNamibian),"NAM",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatNewZealand),"NZL",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatNicaraguan),"NIC",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatNorwegian),"NOR",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatOman),"OMN",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatPakistan),"PAK",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatPanamanian),"PAN",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatPhilippinian),"PHL",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatPolish),"POL",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatPortuguese),"PRT",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatRomanian),"ROU",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatQatar),"QAT",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatRussian),"RUS",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatSingaporean),"SGP",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatSalvadorian),"SLV",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatSaudiArabia),"SAU",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatSerbian),"SRB",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatSlovenian),"SVN",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatSAF),"ZAF",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatSpanish),"ESP",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatSwedish),"SWE",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatSyria),"SYR",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatUkrainian),"UKR",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatUAE),"ARE",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatEnglish),"GBR",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatUnitedStates),"USA",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatYemen),"YEM",count,countf,firstcountry);
  AddCountryIfExists(wn,StringFromSet(542,vatZimbabwean),"ZWE",count,countf,firstcountry);
  AddOrCountCountries2 = count;
  return;
end;

global
function Integer AddOrCountCountries(Integer wn,Boolean countf)
begin
  string 255 tstr;
  AddOrCountCountries = AddOrCountCountries2(wn,countf,tstr);
end;

global
function Integer CountCountries()
begin
  CountCountries = AddOrCountCountries(0,true);
  return;
end;

global
procedure AddCountries(Integer wn)
begin
  AddOrCountCountries(wn,false);
  return;
end;

global
updating function Boolean ClientCountryTClassOnOpenWindow(Integer wn)
begin
  AddCountries(wn);
  if (CountCountries==1) then begin
    SetSelectedListLine(wn,0);
    WindowDoOk(wn,0);
  end;

  ClientCountryTClassOnOpenWindow = false;
  return;
end;

updating procedure ReadCountryDbDef(Integer vatlaw)
begin
  string 255 country;

  country = StringFromSet(534,vatlaw);
  if (CheckAndImportFile(country & "/DBDEF.TXT")==false) then begin
    LogText(0,"Failed to import " & country & "/DBDEF.TXT");
  end;

  return;
end;

global
updating function Boolean ClientCountryTClassOnOKWindow(Integer wn)
begin
  string 255 tstr;
  record RcVc RepSpec;
  Integer mwn,nwn,vatlaw;
  record CYBlock cyr;
  record LocalLoginOptBlock LOb;
  string 255 welcomewin;
  record SelCountryBlock SCb;

  if (IsEnterprise and CompileType==ctNormal) then begin
    welcomewin = "DBUsageWClass";
  end else begin
    welcomewin = "NewInstallWClass";
  end;
  tstr = GetListTag(wn,SelectedListLine(wn));
  CloseWindow(wn);
  if (nonblank(tstr)) then begin
    vatlaw = SetFromString(534,tstr);
    ReadCountryDbDef(vatlaw);
    BlockLoad(cyr);
    cyr.VATLaw = SetFromString(534,tstr);
    BlockStore(cyr);
    BlockLoad(SCb);  
    SCb.SelCountry = tstr;
    SCb.VATLaw = SetFromString(534,tstr);
    BlockStore(SCb);
    SetProductVATLaw(SCb.VATLaw);
    SetProductTags;
    SetUserInterfaceLanguageFromCountry(tstr);
    mwn = FindWindow(welcomewin);
    if (mwn>0) then begin
      CloseWindow(mwn);
    end;
    if (TestEnablerFile("EnClientOnly")) then begin
      BlockLoad(LOb);
      nwn = OpenWindow("ServerAddressTClass",0,0,"","",RepSpec);
    end else begin
      RepSpec.flags[0] = 1;
      nwn = OpenWindow(welcomewin,0,0,"","",RepSpec);
      PutWindowString(nwn,"ClientCountryTClassVATLaw",cyr.VATLaw);
    end;
  end;
  ClientCountryTClassOnOKWindow = false;  
  return;
end;

global
updating procedure SetDefaultVATLaw(Integer wn)
begin
  record CYBlock CYb;
  record UserLanguageBlock ULb;
  string 255 tstr;
  
  AddOrCountCountries2(-1,true,tstr);
  
  //StopAlert("0.SetDefaultVATLaw " & tstr);
  
  BlockLoad(ULb);
  
  if (nonblank(ULb.Language)) then begin
    tstr = ULb.Language;
    SwitchUserInterfaceLanguage(tstr);
    //StopAlert("0b.SetDefaultVATLaw " & tstr);
  end else begin
  
    //StopAlert("1.SetDefaultVATLaw " & tstr);
  
    if (nonblank(tstr)) then begin
      BlockLoad(CYb);
      CYb.VATLaw = SetFromString(534,tstr);
      
      //StopAlert("2.SetDefaultVATLaw " & tstr);
      
      BlockStore(CYb);
      SetUserInterfaceLanguageFromCountry(tstr);
      PutWindowString(wn,"ClientCountryTClassVATLaw",CYb.VATLaw);
    end;
  end;
  
end;


global
function Boolean ClientCountrySClassOnOpenWindow(Integer wn)
begin
  SetListStringAndTag(wn,0,StringFromSet(542,vatAlgeria),StringFromSet(534,vatAlgeria));
  SetListStringAndTag(wn,0,StringFromSet(542,vatAngolan),StringFromSet(534,vatAngolan));
  SetListStringAndTag(wn,0,StringFromSet(542,vatArgentinean),StringFromSet(534,vatArgentinean));
  SetListStringAndTag(wn,0,StringFromSet(542,vatAustralia),StringFromSet(534,vatAustralia));
  SetListStringAndTag(wn,0,StringFromSet(542,vatAzerbaijan),StringFromSet(534,vatAzerbaijan));
  SetListStringAndTag(wn,0,StringFromSet(542,vatBahrain),StringFromSet(534,vatBahrain));
  SetListStringAndTag(wn,0,StringFromSet(542,vatBelarusian),StringFromSet(534,vatBelarusian));
  SetListStringAndTag(wn,0,StringFromSet(542,vatBolivian),StringFromSet(534,vatBolivian));
  SetListStringAndTag(wn,0,StringFromSet(542,vatBrazil),StringFromSet(534,vatBrazil));
  SetListStringAndTag(wn,0,StringFromSet(542,vatCanada),StringFromSet(534,vatCanada));
  SetListStringAndTag(wn,0,StringFromSet(542,vatChina),StringFromSet(534,vatChina));
  SetListStringAndTag(wn,0,StringFromSet(542,vatCostaRican),StringFromSet(534,vatCostaRican));
  SetListStringAndTag(wn,0,StringFromSet(542,vatCroation),StringFromSet(534,vatCroation));
  SetListStringAndTag(wn,0,StringFromSet(542,vatCzech),StringFromSet(534,vatCzech));
  SetListStringAndTag(wn,0,StringFromSet(542,vatDanish),StringFromSet(534,vatDanish));
  SetListStringAndTag(wn,0,StringFromSet(542,vatEgypt),StringFromSet(534,vatEgypt));
  SetListStringAndTag(wn,0,StringFromSet(542,vatEstonian),StringFromSet(534,vatEstonian));
  SetListStringAndTag(wn,0,StringFromSet(542,vatFinnish),StringFromSet(534,vatFinnish));
  SetListStringAndTag(wn,0,StringFromSet(542,vatFrench),StringFromSet(534,vatFrench));
  SetListStringAndTag(wn,0,StringFromSet(542,vatGerman),StringFromSet(534,vatGerman));
  SetListStringAndTag(wn,0,StringFromSet(542,vatGuatemalean),StringFromSet(534,vatGuatemalean));
  SetListStringAndTag(wn,0,StringFromSet(542,vatHonduran),StringFromSet(534,vatHonduran));
  SetListStringAndTag(wn,0,StringFromSet(542,vatHungarian),StringFromSet(534,vatHungarian));
  SetListStringAndTag(wn,0,StringFromSet(542,vatIcelandic),StringFromSet(534,vatIcelandic));
  SetListStringAndTag(wn,0,StringFromSet(542,vatIndian),StringFromSet(534,vatIndian));
  SetListStringAndTag(wn,0,StringFromSet(542,vatItalian),StringFromSet(534,vatItalian));
  SetListStringAndTag(wn,0,StringFromSet(542,vatJordan),StringFromSet(534,vatJordan));
  SetListStringAndTag(wn,0,StringFromSet(542,vatKenyan),StringFromSet(534,vatKenyan));
  SetListStringAndTag(wn,0,StringFromSet(542,vatKuwait),StringFromSet(534,vatKuwait));
  SetListStringAndTag(wn,0,StringFromSet(542,vatLatvian),StringFromSet(534,vatLatvian));
  SetListStringAndTag(wn,0,StringFromSet(542,vatLebanon),StringFromSet(534,vatLebanon));
  SetListStringAndTag(wn,0,StringFromSet(542,vatLithuanian),StringFromSet(534,vatLithuanian));
  SetListStringAndTag(wn,0,StringFromSet(542,vatMexican),StringFromSet(534,vatMexican));
  SetListStringAndTag(wn,0,StringFromSet(542,vatMozambican),StringFromSet(534,vatMexican));
  SetListStringAndTag(wn,0,StringFromSet(542,vatNamibian),StringFromSet(534,vatNamibian));
  SetListStringAndTag(wn,0,StringFromSet(542,vatNicaraguan),StringFromSet(534,vatNicaraguan));
  SetListStringAndTag(wn,0,StringFromSet(542,vatNewZealand),StringFromSet(534,vatNewZealand));
  SetListStringAndTag(wn,0,StringFromSet(542,vatNorwegian),StringFromSet(534,vatNorwegian));
  SetListStringAndTag(wn,0,StringFromSet(542,vatNorwegian),StringFromSet(534,vatNorwegian));
  SetListStringAndTag(wn,0,StringFromSet(542,vatOman),StringFromSet(534,vatOman));
  SetListStringAndTag(wn,0,StringFromSet(542,vatPakistan),StringFromSet(534,vatPakistan));
  SetListStringAndTag(wn,0,StringFromSet(542,vatPanamanian),StringFromSet(534,vatPanamanian));
  SetListStringAndTag(wn,0,StringFromSet(542,vatPhilippinian),StringFromSet(534,vatPhilippinian));
  SetListStringAndTag(wn,0,StringFromSet(542,vatPolish),StringFromSet(534,vatPolish));
  SetListStringAndTag(wn,0,StringFromSet(542,vatPortuguese),StringFromSet(534,vatPortuguese));
  SetListStringAndTag(wn,0,StringFromSet(542,vatQatar),StringFromSet(534,vatQatar));
  SetListStringAndTag(wn,0,StringFromSet(542,vatRomanian),StringFromSet(534,vatRomanian));
  SetListStringAndTag(wn,0,StringFromSet(542,vatRussian),StringFromSet(534,vatRussian));
  SetListStringAndTag(wn,0,StringFromSet(542,vatSingaporean),StringFromSet(534,vatSingaporean));
  SetListStringAndTag(wn,0,StringFromSet(542,vatSalvadorian),StringFromSet(534,vatSalvadorian));
  SetListStringAndTag(wn,0,StringFromSet(542,vatSaudiArabia),StringFromSet(534,vatSaudiArabia));
  SetListStringAndTag(wn,0,StringFromSet(542,vatSerbian),StringFromSet(534,vatSerbian));
  SetListStringAndTag(wn,0,StringFromSet(542,vatSlovenian),StringFromSet(534,vatSlovenian));
  SetListStringAndTag(wn,0,StringFromSet(542,vatSAF),StringFromSet(534,vatSAF));
  SetListStringAndTag(wn,0,StringFromSet(542,vatSpanish),StringFromSet(534,vatSpanish));
  SetListStringAndTag(wn,0,StringFromSet(542,vatSwedish),StringFromSet(534,vatSwedish));
  SetListStringAndTag(wn,0,StringFromSet(542,vatSyria),StringFromSet(534,vatSyria));
  SetListStringAndTag(wn,0,StringFromSet(542,vatUkrainian),StringFromSet(534,vatUkrainian));
  SetListStringAndTag(wn,0,StringFromSet(542,vatUAE),StringFromSet(534,vatUAE));
  SetListStringAndTag(wn,0,StringFromSet(542,vatEnglish),StringFromSet(534,vatEnglish));
  SetListStringAndTag(wn,0,StringFromSet(542,vatUnitedStates),StringFromSet(534,vatUnitedStates));
  SetListStringAndTag(wn,0,StringFromSet(542,vatYemen),StringFromSet(534,vatYemen));
  SetListStringAndTag(wn,0,StringFromSet(542,vatZimbabwean),StringFromSet(534,vatZimbabwean));
  SetListStringAndTag(wn,0,StringFromSet(542,vatSaudiArabia),StringFromSet(534,vatSaudiArabia));
  ClientCountrySClassOnOpenWindow = false;
  return;
end;

global
updating function Boolean ClientCountrySClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  string 60 tstr;

  mwn = MotherWindow(wn);
  tstr = GetListTag(wn,SelectedListLine(wn));
  CloseWindow(wn);
  PasteString(mwn,tstr);
  ClientCountrySClassOnOKWindow = false;  
  return;
end;

global
function Boolean ResetClientCountryOClassOnOpenWindow(Integer wn)
begin
//  ClientCountrySClassOnOpenWindow(wn);
  AddCountries(wn);
  ResetClientCountryOClassOnOpenWindow = false;
  return;
end;

global
updating function Boolean ResetClientCountryOClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  string 60 country;
  record CYBlock CYb;
  Boolean testf;
  string 255 custcode,custname,custemail,personname;
  Longint contract,CUCOEnabActSerNr;

  BlockLoad(CYb);
  mwn = MotherWindow(wn);
  country = GetListTag(wn,SelectedListLine(wn));
  CloseWindow(wn);
  CYb.VATLaw = SetFromString(534,country);
//same as part of StdSetupNewDatabase2  
  testf = ImportDefaultsOnServer2(country,CYb.VATLaw,0,"","1",BuildProductCode)==false;
  if (testf) then begin
    if (FileExists(ResourceFolder & "/" & country & "/DEFAULT.TXT")) then begin
      ReadNamedFile(ResourceFolder & "/" & country & "/DEFAULT.TXT");
      testf = false;
      if (FileExists(ResourceFolder & "/" & country & "/DEFAULT2.TXT")) then begin
        ReadNamedFile(ResourceFolder & "/" & country & "/DEFAULT2.TXT");
      end;
    end;
  end;
  if (CheckAndImportFile(country & "/STDCOA.TXT")==false) then begin
    CheckAndImportFile("STDCOA.TXT");
  end;
  CYb.VATLaw = SetFromString(534,country);
  BlockStore(CYb);

  SetUserInterfaceLanguageFromCountry(country);
  ReloadClientLangState;
  StdSetupNewDatabaseDefaults;
  SetProductTags;
  if (GetDownloadInfoCompDetails(custcode,contract,CUCOEnabActSerNr,custname,custemail,personname)) begin
    StdCreateRegisteredUser(custcode,contract,CUCOEnabActSerNr,custname,custemail,personname);
  end else begin
    StdCreateDefaultUser;
  end;
  if (HasLocalization("FIN")) then begin  //only FIN needs to get their own lookup, 
    ResetLookupAddress;
  end;  
  StoreCustomerHWAsync(true);
  ResetClientCountryOClassOnOKWindow = false;  
  return;
end;
