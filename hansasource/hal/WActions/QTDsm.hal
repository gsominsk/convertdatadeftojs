external function Boolean HasModTS();
remote updating function LongInt CancelApprovalRequest(string,string,var Integer);
remote updating function Integer RequestApproval_QTVc(record QTVc,var record RcVc,var Integer);
remote function Integer QTTestApprovalStatus(record QTVc);
remote function Boolean GetNextItemNr(var string);
remote function Boolean GetNextCustNr(var string);
external function string 40 ObjSClassPasteSpecialWindowClass(string);
external procedure ActVcRecordDefClient(var record ActVc);
external function val ValFromString(string,string,string);
remote updating function Integer RecordAction_raPasteQTInIVCash(var record IVCashVc,var record QTVc,var Integer,Boolean);
remote updating procedure ProformaQTForm(record RcVc);
external function Integer CountObjects(string);
remote function Integer CancelApprovalRequestAllowed(Integer,string,string,Integer,string);
external function Integer OpenArtStat(Integer,record RcVc,Boolean);
external function roundmode DefaultRoundMode();
external procedure RecalcQTSubtotal(var record QTVc);
remote function Boolean CreateCredManQT(var record CredManVc);
external procedure IVOpenPrepExists(string);
external procedure SetupCustPS2Rn(string,var record RcVc);
external updating procedure SMSWhenOR(record ORVc,Integer);
external procedure FindOTforAcc(string,var string);
external function string 40 DelAddrSClassSpecPName(string);
remote procedure QTDUpdatePrices(var record QTVc,Boolean);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
remote updating function Integer CreateTBBUFromQTD(var record QTVc,var record TBBUVc);
remote updating function Boolean MakeActFromQT(record QTVc,var record ActVc);
remote procedure RecalcDiscountQTD(var record QTVc);
remote procedure RecalculetWeightVolumeQTVc(var record QTVc);
remote updating function Integer CreateMailFromQTD(record QTVc,var record MailVc,var string,string);
external procedure CustMessages(string,string);
remote updating function Integer RecordAction_raPasteQTInInv(var record IVVc,var record QTVc,var Integer,Boolean);
remote updating function Integer RecordAction_raPasteQTInOrder(var record ORVc,var record QTVc,Boolean);
external updating procedure RecordActionQT_Print(var record QTVc,string,Boolean);
remote updating function Integer RecordAction_raPasteQTInProj(var record PRVc,var record QTVc);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external procedure CalcProc(val,val,var val);
external procedure SendArtStat(string,string,string,val,val,val,Date,Integer);
external updating procedure QTCreateHtmlFile(record QTVc,record MailVc);
remote function Boolean QTVc_AllowSales(record QTVc,var Integer,var LongInt);

global 
procedure UpdatePricesQTDsm()
BEGIN
  Integer wn;
  record QTVc QTr;
  Boolean readf;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin//normal
    readf = true;
  end;
    DeselectWindow(wn,false);
    GetWindowRecord(wn,QTr);
    QTDUpdatePrices(QTr,readf);
    PutWindowRecord(wn,QTr);  
  RETURN;
END;
            
global 
updating procedure CreateTBBUFromQTDsm()
BEGIN
  Integer wn,nwn,err;
  record QTVc QTr;
  record TBBUVc TBBUr;
  Boolean testf;
  
  wn = CurWindow;
  GetWindowRecord(wn,QTr);  
  if (nonblank(QTr.PRCode) and HasModTS) then begin
    if ((QTr.Closed==0) and (QTr.Rejected!=1)) then begin
      testf = true;
      err = QTTestApprovalStatus(QTr);
      if (err!=0) then begin
        MessageBox(err,"");
        testf = false;
      end;
      if (testf) then begin
        err = CreateTBBUFromQTD(QTr,TBBUr);
        if (err==0) then begin
          PutWindowRecord(wn,QTr);
          if (WindowDoOK(wn,0)) then begin
          end;
          nwn = OpenWindow("TBBUDClass",1,0,"","",TBBUr);
          UpdateBrowses("QTVc");
          UpdateBrowses("TBBUVc");
        end else begin
          MessageBox(err,"");
        end;
      end;
    end else begin
      Beep;
    end;
  end;      
  RETURN;
END;

global
procedure NextM4Number(string code,var string next)
BEGIN
  string 255 pre;
  string 255 suff,osuff;
  Integer i,j;
  val t;
  string 1 c;
  string 255 zerostr,tstr;
  
  for (i=len(code);i>0;i=i-1) begin
    c = Mid(code,i-1,1);
    if ((asc(c)<asc("0")) or (asc(c)>asc("9"))) then begin//if it is 0, next number for 0123 will be 124
      goto L10NextM4Number;
    end;
  end;
L10NextM4Number:;
  for (j=0;j<i;j=j+1) begin
    pre = pre & Mid(code,j,1);
  end;
  
  for (j=i;j<=len(code);j=j+1) begin
    suff = suff & Mid(code,j,1);
  end;

  for (i=1;i<len(suff);i=i+1) begin
    c = Mid(suff,i-1,1);
    if (c=="0") then begin
      zerostr = zerostr & "0";
    end else begin
      goto L22;
    end;
  end;    
L22:;    
  t = StringToVal(suff,M40Val);// this fails badly if roundoff is set not typical way, for exmaple with step 2.5
//  t = ValFromString(suff,"","");
  t = t + 1;
  osuff = suff;
  suff = ValToString(t,M40Val,"","",0);// this fails badly if roundoff is set not typical way
//  suff = ValToString(t,M4Val,"","",0);
//  suff = Left(suff,len(suff)-2);
  if (len(osuff)<len(zerostr & suff)) then begin
    zerostr = Left(zerostr,len(zerostr)-1);
  end;
  next = pre & zerostr & suff;
  if (next=="0") then begin next = "1"; end;
  RETURN;
END;

global
updating procedure CreatePRFromQT()
BEGIN
  Integer wn,nwn;
  record QTVc QTr;
  record PRVc PRr;
  Integer r;
  Boolean testf
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal and HasModTS) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,QTr);
    if (UserCanAction("QTToPR",true)) then begin
      testf = true;
      r = QTTestApprovalStatus(QTr);
      if (r!=0) then begin
        MessageBox(r,"");
        testf = false;
      end;
      if (testf) then begin
        r = RecordAction_raPasteQTInProj(PRr,QTr);
        if (r!=-1) then begin
          QTr.PRCode = PRr.Code;
          PutWindowRecord(wn,QTr);  
          if (WindowDoOK(wn,0)) then begin
          end;
          nwn = OpenWindow("PRDClass",1,0,"","",PRr);
          UpdateBrowses("PRVc");
        end else begin
          Beep;
        end;
      end;
    end else begin
      MessageBox(1274,StringFromStringSet(3,"QTToPR"));
    end;
  end;
  RETURN;
END;

procedure AddQTLineType(Integer t,Boolean firstf)
begin
  record QTVc QTr;
  row QTVc QTrw;
  Integer wn,rownr;
  string 20 tstr;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    DoUpdate(wn);
  end;
  if (WindowState(wn)!=Rs_update and WindowState(wn)!=Rs_insert) then begin
    goto LAddQTLineType;
  end;
  GetWindowRecord(wn,QTr);
  if ((QTr.Closed==0) and (QTr.Rejected==0)) then begin
    rownr = WindowActiveRow(wn);
//    DeselectWindow(wn,false);
    if (rownr==-1) then begin
      if (firstf) then begin
        rownr = 0;
      end else begin
        rownr = MatRowCnt(QTr);
      end;
    end else begin
      rownr = rownr;
    end;
    ClearRow(QTr,QTrw,t);
    QTrw.Spec = "";
    MatRowInsert(QTr,rownr,QTrw);
    PutWindowRecord(wn,QTr);
    switch (t) begin
      case 17:
        WindowFieldGoto(wn,QTr,rownr,"Spec",true);
    end;
  end;
LAddQTLineType:;  
  RETURN;
end;

global
procedure QTAddHidLine()
BEGIN
  if (UserCanAction("HiddenLine",true)) then begin
    AddQTLineType(kInvoiceRowTypeHidden,false);
  end;
  RETURN;
END;

global
procedure QTAddHeaderLine()
BEGIN
  AddQTLineType(17,true);
  RETURN;
END;

global
procedure QTStatusDsm()
BEGIN
  record RcVc RepSpec;
  record QTVc QTr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,QTr);
  RepSpec.f1 = QTr.SerNr;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.repname = "QTStatusRn";
  RepSpec.Media   = mtScreen;    
  RunReport(RepSpec,0);
  RETURN;
END;

global
updating function Boolean QTDClassPrint(Integer wn,Boolean previewf)
begin
  record QTVc QTr;
  Boolean testf;
  Integer err;
 
  testf = true;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,QTr); 
  if (UserCanAction("PrintPreviewNotApproved",false)==false) then begin
    err = QTTestApprovalStatus(QTr);
  end;
  if (err!=0) then begin
    MessageBox(err,"");
    testf = false;
  end;
  if (testf) then begin
    RecordActionQT_Print(QTr,false,true);
  end;
  QTDClassPrint = true;
  return;
end;

global
updating procedure PrintQTL(Integer wn,Boolean previewf)
BEGIN
  record QTVc QTr;
  Integer i,r;
  Boolean testf;
  
  StartPrintDialogGroup;
  i = 1;
  while (GetRecordFromBrowse(QTr,wn,i)) begin
    testf = true;
    r = QTTestApprovalStatus(QTr);
    if (r!=0) then begin
      MessageBox(r,"");
      testf = false;
    end;
    if (testf) then begin
      RecordActionQT_Print(QTr,previewf,true);
    end;
    i = i + 1;
  end;
  EndPrintDialogGroup;
  RETURN;
END;

global
updating procedure ORFromQTDsm()
begin
  record ORVc ORr;
  record QTVc QTr;
  Integer nwn,wn,rownr;
  LongInt r;
  Integer curcomp;
  Boolean testf;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,QTr);
    if (UserCanAction("QTToOrd",true)) then begin
      if ((QTr.Closed==0) and ((QTr.Rejected==0) or (QTr.Rejected==2)) and (QTr.OrderNr<=0)) then begin
        testf = true;
        r = QTTestApprovalStatus(QTr);
        if (r!=0) then begin
          MessageBox(r,"");
          testf = false;
        end;
        if (!QTVc_AllowSales(QTr,rownr,r)) then begin
          WindowFieldGoto(wn,QTr,rownr,"ArtCode",true); 
          MessageBox(r,"");
          testf = false;
        end;
        if (testf) then begin
          r = RecordAction_raPasteQTInOrder(ORr,QTr,false);
          if (r==0) then begin
            PutWindowRecord(wn,QTr);
            if (WindowDoOK(wn,0)) then begin
            end;
            curcomp = CurrentCompany;
            CreateRecordLink(QTr,curcomp,ORr,curcomp);  
            CreateRecordLink(ORr,curcomp,QTr,curcomp);  
            nwn = OpenWindow("ORDClass",1,0,"","",ORr);
            UpdateBrowses("ORVc");
            UpdateBrowses("QTVc");
            CustMessages("ORVc",ORr.CustCode);
            SMSWhenOR(ORr,2);  
          end else begin
            if (r!=-1) then begin
              MessageBox(r,"");
            end else begin
              Beep;
            end;
          end;
        end;
      end;  
    end else begin
      MessageBox(1274,StringFromStringSet(3,"QTToOrd"));
    end;
  end else begin
    Beep;
  end;
  return;
end;

global
updating procedure ORFromQTLsm()
BEGIN
  record ORVc ORr;
  record QTVc QTr;
  Integer nwn,wn;
  LongInt r;
  Boolean testf;

  wn = CurWindow;
  if (ReadMarkedRecord(wn,QTr)) then begin
    if (UserCanAction("QTToOrd",true)) then begin
        if ((QTr.Closed==0) and ((QTr.Rejected==0) or (QTr.Rejected==2)) and (QTr.OrderNr<=0)) then begin
        testf = true;
        r = QTTestApprovalStatus(QTr);
        if (r!=0) then begin
          MessageBox(r,"");
          testf = false;
        end;
        if (testf) then begin
          r = RecordAction_raPasteQTInOrder(ORr,QTr,true);
          if (r==0) then begin
            nwn = OpenWindow("ORDClass",1,0,"","",ORr);
            UpdateBrowses("ORVc");
            UpdateBrowses("QTVc");
            CustMessages("ORVc",ORr.CustCode);
          end else begin
            if (r!=-1) then begin
              MessageBox(r,"");
            end else begin
              Beep;
            end;
          end;
        end;
      end;  
    end else begin
      MessageBox(1274,StringFromStringSet(3,"QTToOrd"));
    end;
  end;
  RETURN;
END;

global
updating procedure IVFromQTDsm()
BEGIN
  record IVVc IVr;
  record QTVc QTr;
  Integer nwn,wn;
  Integer errcode;
  LongInt r;
  Boolean testf;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,QTr);
    if (UserCanAction("QTToIV",true)) then begin
      if ((QTr.Closed==0) and (QTr.Rejected!=1)) then begin
        testf = true;
        r = QTTestApprovalStatus(QTr);
        if (r!=0) then begin
          MessageBox(r,"");
          testf = false;
        end;
        if (testf) then begin
          r = RecordAction_raPasteQTInInv(IVr,QTr,errcode,false);
          if (r!=-1) then begin
            PutWindowRecord(wn,QTr);
            if (WindowDoOK(wn,0)) then begin
            end;
            nwn = OpenWindow("IVDClass",1,0,"","",IVr);
            UpdateBrowses("IVVc");
            UpdateBrowses("QTVc");
            CustMessages("QTVc",QTr.CustCode);
            IVOpenPrepExists(IVr.CustCode);
            if (errcode>0) then begin
              MessageBox(errcode,"");
            end;
          end else begin
            Beep;
          end;
        end;
      end;  
    end else begin
      MessageBox(1274,StringFromStringSet(3,"QTToIV"));
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
updating procedure IVFromQTLsm()
BEGIN
  record IVVc IVr;
  record QTVc QTr;
  Integer nwn,wn;
  Integer errcode;
  LongInt r;
  Boolean testf;

  wn = CurWindow;
  if (ReadMarkedRecord(wn,QTr)) then begin
    if (UserCanAction("QTToIV",true)) then begin
      if (QTr.Closed==0) then begin    
        testf = true;
        r = QTTestApprovalStatus(QTr);
        if (r!=0) then begin
          MessageBox(r,"");
          testf = false;
        end;
        if (testf) then begin
          r = RecordAction_raPasteQTInInv(IVr,QTr,errcode,true);
          if (r!=-1) then begin
            if (WindowDoOK(wn,0)) then begin
            end;
            nwn = OpenWindow("IVDClass",1,0,"","",IVr);
            UpdateBrowses("IVVc");
            UpdateBrowses("QTVc");
            CustMessages("QTVc",QTr.CustCode);
          end else begin
            Beep;
          end;
        end;
      end;  
    end else begin
      MessageBox(1274,StringFromStringSet(3,"QTToIV"));
    end;
  end;
  RETURN;
END;

global
updating procedure IVCashFromQTDsm()
BEGIN
  record IVCashVc IVCashr;
  record QTVc QTr;
  Integer nwn,wn;
  Integer errcode;
  LongInt r;
  Boolean testf;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,QTr);
    if (UserCanAction("QTToIVCash",true)) then begin
      if ((QTr.Closed==0) and (QTr.Rejected!=1)) then begin
        testf = true;
        if (testf) then begin
          r = RecordAction_raPasteQTInIVCash(IVCashr,QTr,errcode,false);
          if (r!=-1) then begin
            PutWindowRecord(wn,QTr);
            if (WindowDoOK(wn,0)) then begin
            end;
            nwn = OpenWindow("IVCashDClass",1,0,"","",IVCashr);
            UpdateBrowses("IVCashVc");
            UpdateBrowses("QTVc");
            CustMessages("QTVc",QTr.CustCode);
            if (errcode>0) then begin
              MessageBox(errcode,"");
            end;
          end else begin
            Beep;
          end;
        end;
      end;  
    end else begin
      MessageBox(1274,StringFromStringSet(3,"QTToIVCash"));
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
function Boolean QTDClassSwitchRow(Integer wn,Integer rownr)
BEGIN
  record QTVc QTr;
  row QTVc QTrw;
  row QTVc QT2rw; 
  Integer i,rwcnt;
  string 255 tstr,location,recepy;
  val t,tproc,unitprdisc;
  val rowsum,rowinbase;
  Boolean res;
  record TaxMatrixVc TMr;
  
  res = true;
  GetWindowRecord(wn,QTr);
  rwcnt = MatRowCnt(QTr);  
  if ((rownr<rwcnt) and (rownr>=0)) then begin
    MatRowGet(QTr,rownr,QTrw);
    location = QTr.Location;
    tstr = QTrw.ArtCode;
    t = QTrw.rowGP;
    rowinbase = MulRateToBase1(QTr.CurncyCode,QTrw.Sum,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
    UnpackRowFieldMatrix(QTrw,"TaxMatrix",TMr);
    FindSalesExVat(TMr,QTrw.VATCode,rowinbase,QTr.InclVAT,QTr.NoTAXonVAT,rowsum);
    unitprdisc = QTrw.Sum/QTrw.Quant;
    unitprdisc = Round(unitprdisc,DefaultRoundMode);
    recepy = QTrw.Recepy;
    for (i=rownr+1;i<rwcnt;i=i+1) begin
      MatRowGet(QTr,i,QT2rw);
      switch (QT2rw.stp) begin
        case kInvoiceRowTypeStructuredItemComponent:
          if (QT2rw.MotherArtCode==QTrw.ArtCode) then begin
            t = t + QT2rw.rowGP;
          end;
        otherwise
          i = rwcnt;
      end;
    end;    
//      if (blankstrp(recepy)) then GetRecepy(QTrw.ArtCode,recepy); This makes one extra call, I can see why but we need another solution
  end;
  CalcProc(rowsum,t,tproc);
  SendArtStat(tstr,location,recepy,t,tproc,unitprdisc,QTr.QTDate,1);
  SetWindowNameArg(wn,tstr & ":" & location);
  QTDClassSwitchRow = res;
  RETURN
END;


global
procedure ItemStatusQTDsm()
BEGIN
  Integer wn,nwn;
  Boolean testf;
  record RcVc RepSpec;
  
  wn = CurWindow;
  nwn = OpenArtStat(wn,RepSpec,true);
  RepSpec.UsedOnly = 1;
  PutWindowRecord(nwn,RepSpec);
  testf = QTDClassSwitchRow(wn,WindowActiveRow(wn));
  RETURN
END;

global 
updating procedure CreateMailFromQTDsm()
BEGIN
  Integer wn,nwn;
  record MailVc Mailr;
  record QTVc QTr;
  Integer err;
  string 255 tstr;
  string 255 docname;
  Boolean testf;

  wn = CurWindow;
  if (WindowState(wn)==0)then begin//Rs_normal
    testf = true;
    GetWindowRecord(wn,QTr);  
    err = QTTestApprovalStatus(QTr);
    if (err!=0) then begin
      MessageBox(err,"");
      testf = false;
    end;
    if (testf) then begin
      err = CreateMailFromQTD(QTr,Mailr,tstr,WindowFormName(wn));
      if (err!=0) then begin
        if (err>0) then begin
          MessageBox(err,": " & tstr);
        end;
      end else begin
        nwn = OpenWindow("MailDClass",1,0,"","",Mailr);
      end;
    end;
  end;
  RETURN;
END;

global
updating procedure CreateActFromQTDsm()
BEGIN
  record QTVc QTr;
  record ActVc Actr;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==0)then begin//Rs_normal
    GetWindowRecord(wn,QTr);
    RecordNew(Actr);
    ActVcRecordDefClient(Actr);
    if (MakeActFromQT(QTr,Actr)) then begin
      nwn = OpenWindow("ActDClass",1,0,"","",Actr);
      SetRlink(wn,true);
    end;
  end;
  RETURN;
END;

global
updating procedure QTVcCreateActivity()
begin
  CreateActFromQTDsm;
  return;
end;

global
procedure SubtotalQTDsm()
BEGIN
  record QTVc QTr;
  row QTVc QTrw;
  Integer wn,i,rwcnt,rownr;
  val pt;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    DoUpdate(wn);
  end;
  if (WindowState(wn)!=Rs_update and WindowState(wn)!=Rs_insert) then begin
    goto LSubtotalQTDsm;
  end;
  GetWindowRecord(wn,QTr);
  if (QTr.Rejected==0 and QTr.Closed==0) then begin
    rownr = WindowActiveRow(wn);
    WindowDeactivatefield(wn);
//    DeselectWindow(wn,false);
    rwcnt = MatRowCnt(QTr);
    if ((rownr==-1) or (rownr>rwcnt)) then begin
      rownr = rwcnt;
    end;
    ClearRow(QTr,QTrw,9);
    MatRowInsert(QTr,rownr,QTrw);
    RecalcQTSubtotal(QTr);
    PutWindowRecord(wn,QTr);
    WindowFieldGoto(wn,QTr,rownr,"Spec",false);
  end;
LSubtotalQTDsm:;  
  RETURN;
END;

global 
procedure RecalcWeightQTDsm()
BEGIN
  record QTVc QTr;
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)==0)then begin//Rs_normal
    GetWindowRecord(wn,QTr);
    if (QTr.Closed==0) then begin
      RecalculetWeightVolumeQTVc(QTr);
      PutWindowRecord(wn,QTr);
    end;
  end;
  RETURN;
END;

global 
procedure RecalcDiscountQTDsm()
BEGIN
  record QTVc QTr;
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)==0)then begin//Rs_normal
    GetWindowRecord(wn,QTr);
    if (QTr.Closed==0) then begin
      RecalcDiscountQTD(QTr);
      PutWindowRecord(wn,QTr);
    end;
  end;
  RETURN;
END;

procedure QTDClassSpecPasteNameObjects(Integer wn,var string psname)
begin
  record QTVc QTr;
  row QTVc QTrw;
  Integer rownr;
  string 200 typ;

  GetWindowRecord(wn,QTr);
  rownr = WindowActiveRow(wn);
  typ="";
  if (rownr>=0) then begin
    MatRowGet(QTr,rownr,QTrw);
    FindOTforAcc(QTrw.SalesAcc,typ);
  end else begin
    FindOTforAcc("",typ);
  end;
  if (nonblank(typ)) then begin
    psname = "TRObjSClass";
  end else begin    
    psname = ObjSClassPasteSpecialWindowClass("ObjSClass");
  end;
  return;
end;

procedure QTDClassSpecPasteNameArtCode(Integer wn,var string psname)
begin
  record QTVc QTr;
  Integer rownr;

  GetWindowRecord(wn,QTr);
  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,false);
  WindowFieldGoto(wn,QTr,rownr,"ArtCode",false);
  return;
end;

global
function string 40 QTDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 40 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "DelAddrCode": psname = DelAddrSClassSpecPName(defpsname);
    case "Objects": QTDClassSpecPasteNameObjects(wn,psname);
    case "ArtCode": QTDClassSpecPasteNameArtCode(wn,psname);
  end;
  QTDClassSpecPasteName = psname;
  return;
end;

global
procedure CUStatusQTDsm()
begin
  record RcVc RepSpec;
  record QTVc QTr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,QTr);
  SetupCustPS2Rn(QTr.CustCode,RepSpec);
  RepSpec.Media   = mtScreen;    
  RunReport(RepSpec,0);
  return;
end;

global
updating procedure CreateCredManQTsm()
BEGIN
  record QTVc QTr;
  record CredManVc CredManr;
  Integer wn,nwn,r;
  Integer normalstate;
  boolean res,testf;

  normalstate = 0;//Rs_normal
  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)==normalstate) then begin
    GetWindowRecord(wn,QTr);
    testf = true;
    r = QTTestApprovalStatus(QTr);
    if (r!=0) then begin
      MessageBox(r,"");
      testf = false;
    end;
    if (testf) then begin
      CredManr.QTNr = QTr.SerNr;
      res = CreateCredManQT(CredManr);
      if (res) then begin
        nwn = OpenWindow("CredManDClass",1,0,"","",CredManr);
      end else begin
        Beep;
      end;
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
updating procedure QTSendforAcceptanceQTDsmExecute(Integer wn,string acceptanceby,string acceptancefyi)
begin
  Integer err,nwn;
  record QTVc QTr;
  Integer ApproverSelection,ApprovalStatusFlag;
  record RcVc RepSpec;
  
  GetWindowRecord(wn,QTr);
  if (WindowState(wn)!=Rs_normal) then begin
    if (WindowDoOK(wn,0)==false) then begin
      goto LQTSendforAcceptanceQTDsm;
    end;
    GetWindowRecord(wn,QTr);
  end;
  QTr.AcceptanceBy = acceptanceby;
  QTr.AcceptanceFYI = acceptancefyi;
  err = RequestApproval_QTVc(QTr,RepSpec,ApprovalStatusFlag);
  ApproverSelection = RepSpec.ArtMode;
  if ((ApproverSelection==kAcceptanceApproverSelectionManual) and (blank(QTr.AcceptanceBy))) then begin
    switch (err) begin  
      case 0:
        if (CountObjects(RepSpec.f12)==1) then begin
          RepSpec.f1 = RepSpec.f12;
        end;
        if (CountObjects(RepSpec.f11)==1) then begin
          RepSpec.f2 = RepSpec.f11;
        end;
        nwn = OpenWindow("SelectApproverWClass",0,wn,"","",RepSpec);
      otherwise
        MessageBox(err,"");
    end;
  end else begin
    switch (err) begin  
      case 0:
        PutWindowRecord(wn,QTr);
        if (WindowDoOK(wn,0)) then begin
        end;
        PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));  
        CheckmarkBox(37501,"");
      otherwise
        MessageBox(err,"");
    end;
  end;
LQTSendforAcceptanceQTDsm:;  
  return;
end;

global
updating procedure QTSendforAcceptanceQTDsm()
begin
  QTSendforAcceptanceQTDsmExecute(CurWindow,"","");
  return;
end;

global
updating procedure QTCancelApprovalRequest(Integer wn)
begin
  record QTVc QTr;
  Integer ApprovalStatusFlag;
  LongInt err;

  GetWindowRecord(wn,QTr);
  err = CancelApprovalRequest("QTVc",QTr.SerNr,ApprovalStatusFlag);
  if (err!=0) then begin
    MessageBox(err,"");
    if (err!=37503) then begin
      goto LQTCancelApprovalRequest;
    end;
  end;
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));  
LQTCancelApprovalRequest:;
  return;
end;

global
procedure OpenVatMatrixQTDsm()
begin
  record TaxMatrixVc TMr;
  record QTVc QTr;
  row QTVc QTrw;
  longint nwn,wn,rowno;
  
  wn = CurWindow;
  GetWindowRecord(wn,QTr);
  rowno = WindowActiveRow(wn);
  
  if (rowno>=0) then begin
    MatRowGet(QTr,rowno,QTrw);
    UnpackRowFieldMatrix(QTrw,"TaxMatrix",TMr);
  end else begin
    UnpackFieldMatrix(QTr,"TaxMatrix",TMr);
  end;
  
  nwn = OpenWindow("TaxMatrixVClass",0,wn,"","",TMr);
  PutWindowString(nwn,"TaxMatrixActiveRow",rowno);
  
  PutWindowRecord(nwn,TMr);
  PutWindowPrevRecord(nwn,TMr);
  SetWindowState(nwn,Rs_normal);
  
  return;
end;

global
procedure HTSLicenceTermsPrint()
begin
  Integer wn;
  record MailVc Mailr;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,Mailr);
  PrintDocument(Mailr,"MailForm",false);
  return;
end;

global
updating procedure PrintProformaInvoiceQTDsm()
begin
  record QTVc QTr;
  Boolean tmpf;
  record RcVc RepSpec;

  if (WindowState(CurWindow)==Rs_normal) then begin
    GetWindowRecord(CurWindow,QTr);
    RepSpec.f1 = QTr.SerNr;
    if (blank(QTr.ProformaOfficialSerNr) and HasLocalization("PRT")==false) then begin
      MessageBox(21401,"");
    end else begin
      ProformaQTForm(RepSpec);
    end;
  end;
  return;
end;

global
updating procedure SignQTDsm()
begin
  record RcVc RepSpec;
  Integer nwn,wn;
  record QTVc QTr;
  
  wn = CurWindow;
  if (WindowState(wn)!=Rs_insert) then begin
    GetWindowRecord(wn,QTr);
    RepSpec.vals0 = QTr.SumOther;
    nwn = OpenWindow("SignatureWClass",1,wn,"","",RepSpec);
    PutWindowRecord(nwn,RepSpec); //Shouldn't be needed?
  end else begin
    Beep;
  end;
end;

global  
procedure QTLastSPrsm()
begin
  record QTVc QTr;
  row QTVc QTrw;
  record RcVc RepSpec;
  Integer wn,rownr;
  
  wn = CurWindow;
  GetWindowRecord(wn,QTr);
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    MatRowGet(QTr,rownr,QTrw);
    ReportDefaults(RepSpec,"INLastSPriceRClass");  
    RepSpec.repname = "INLastSPriceRn";
    RepSpec.f1 = QTr.CustCode;
    RepSpec.f2 = QTrw.ArtCode;
    RepSpec.vals0 = QTrw.Price;
    RepSpec.long1 = 5;
    RepSpec.ArtMode = 2;
    RepSpec.Media = 6;    
    RepSpec.UsedOnly = wn;
    RepSpec.FirstAcc = "QTVc";
    RepSpec.flags[0] = rownr;
    RunReport(RepSpec,1);
  end;  
  return;
end;

global
procedure MgrsDiscOverrideQTDsm()
begin
  Integer wn;
  Integer rownr;
  record RcVc RepSpec;
  record QTVc QTr;
  row QTVc QTrw;
  
  wn = CurWindow;
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    GetWindowRecord(wn,QTr);
    MatRowGet(QTr,rownr,QTrw);
    RepSpec.f1 = QTrw.ArtCode;
    RepSpec.AccStr = "";
    RepSpec.FirstAcc = "";
    RepSpec.long1 = WindowActiveRow(wn);
    OpenWindow("MgrsDiscOverrideOClass",0,wn,"","",RepSpec);
  end else begin
    MessageBox(0,USetStr(22057));
  end;
end;

global
procedure AddCustomerQTDsm()
begin
  record CUVc CUr;
  record QTVc QTr;
  Integer wn,nwn;
  
  RecordNew(CUr);
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,QTr);
  nwn = OpenWindow("CUDClass",0,CurWindow,"","",CUr);
  PutWindowString(nwn,"OperationMenuAction","AddContact");
  DeselectWindow(nwn,true);
  CUr.PayDeal = QTr.PayDeal;
  CUr.Name = QTr.Addr0;
  CUr.InvAddr0 = QTr.Addr1;
  CUr.InvAddr1 = QTr.Addr2;
  CUr.InvAddr2 = QTr.Addr3;
  CUr.InvAddr3 = QTr.InvAddr3;
  CUr.InvAddr4 = QTr.InvAddr4;
  if (blank(CUr.Code)) then begin
    GetNextCustNr(CUr.Code);
  end;
  PutWindowRecord(nwn,CUr);
  return;
end;

global
procedure AddItemQTDsm()
begin
  record INVc INr;
  record QTVc QTr;
  row QTVc QTrw;
  Integer wn,nwn,rownr;
  
  RecordNew(INr);
  wn = CurWindow;
  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,true);
  GetWindowRecord(wn,QTr);
  nwn = OpenWindow("INDClass",0,CurWindow,"","",INr);
  PutWindowString(nwn,"OperationMenuAction","AddItem");
  DeselectWindow(nwn,true);
  if (rownr>=0) then begin
    MatRowGet(QTr,rownr,QTrw);
    INr.Code = QTrw.ArtCode;
    INr.Name = QTrw.Spec;
    INr.SalesAcc = QTrw.SalesAcc;
    INr.VATCode = QTrw.VATCode;
    INr.TaxTemplateCode = QTrw.TaxTemplateCode;
    INr.UPrice1 = QTrw.Price;
    INr.InPrice = QTrw.BasePrice;
  end;
  if (blank(INr.Code)) then begin
    GetNextItemNr(INr.Code);
  end;
  PutWindowRecord(nwn,INr);
  return;
end;
