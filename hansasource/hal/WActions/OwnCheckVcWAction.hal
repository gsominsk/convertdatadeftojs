external procedure WarnFutureDate(Boolean,Date);
external function Boolean DateWarned(Date,string);
external function Boolean DateLocked(Date,string);
external function Boolean IsUnOKAllowed(string,Date);
external procedure RecordActionOwnCheck_Print(var record OwnCheckVc,string,Boolean);
remote updating function Boolean RecordAction_rlOwnCheckClear(var record OwnCheckVc);
remote Procedure AddCheckAccount(var string,Integer);

global
function Boolean OwnCheckDClassChkModeButtonAction(Integer wn,Integer fn)
begin 
  Boolean res;
  record OwnCheckVc OwnCheckr;

  res = true;
  if (WindowState(wn)!=0) then begin//Rs_normal
    GetWindowRecord(wn,OwnCheckr);

    switch (OwnCheckr.ChkMode) begin
      case 0 : AddCheckAccount(OwnCheckr.TempAccNr,3);
      case 1 : AddCheckAccount(OwnCheckr.TempAccNr,8);
    end;
    PutWindowRecord(wn,OwnCheckr);
  end;  
  OwnCheckDClassChkModeButtonAction = res;
  return;
end;

global
function Boolean OwnCheckDClassOpenfButtonAction(Integer wn,Integer ns)
begin
  Boolean res;
  record OwnCheckVc OwnCheckr;
  Integer os;
  
  res = false;
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,OwnCheckr);
      os = OwnCheckr.Openf;
    case Rs_insert:
      GetWindowRecord(wn,OwnCheckr);
      os = kCheckTypeRegistered;
    case Rs_update:
      GetPrevWindowRecord(wn,OwnCheckr);
      os = OwnCheckr.Openf;
  end;
  if (os==ns) then begin res = true; end;
    
  switch (os) begin
    case kCheckTypeRegistered:
      switch (ns) begin
        case kCheckTypeAccepted:
          if (HasLocalization("ARG")) then begin
            if (OwnCheckr.ChkMode!=2) then begin
              res = true; 
            end;
          end else begin
            res = true; 
          end;
        case kCheckTypeDeposited:
          if (HasLocalization("ARG")) then begin
            //nothing
          end else begin
            if (OwnCheckr.ChkMode==2) then begin
              res = true;
            end;
          end;
      end;
    case kCheckTypeAccepted: 
      if (ns==kCheckTypeDeposited) then begin res = true; end;
      if (ns==kCheckTypeCancelled) then begin res = true; end;
      if (ns==kCheckTypeBounced) then begin res = true; end;
  end;
  if (not res) then begin Beep; end;
  OwnCheckDClassOpenfButtonAction = res;
  return;
end;

function Boolean OwnCheckDClassVECodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record CUVc VEr;
  record OwnCheckVc OwnCheckr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,OwnCheckr);
    VEr.Code= OwnCheckr.VECode;
    if ReadFirstMain(VEr,1,true) then begin
      OwnCheckr.VEName = VEr.Name;
      OwnCheckr.VATNr = VEr.VATNr;
    end;
    PutWindowRecord(wn,OwnCheckr);
  end;  
  OwnCheckDClassVECodeEFAfter = res;
  Return;
End;

function Boolean OwnCheckDClassBankCodeEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record BankVc Bankr;
  record OwnCheckVc OwnCheckr;
  
  if (changedf) then begin
    GetWindowRecord(wn,OwnCheckr);
    Bankr.Code= OwnCheckr.BankCode;
    if ReadFirstMain(Bankr,1,true) then begin
      OwnCheckr.BankName = Bankr.Name;
      OwnCheckr.LangCode = Bankr.LangCode;
    end;
    PutWindowRecord(wn,OwnCheckr);
  end;  
  OwnCheckDClassBankCodeEFAfter = res;
  return;
end;

function Boolean OwnCheckDClassTransDateEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record OwnCheckVc OwnCheckr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,OwnCheckr);
    if (DateLocked(OwnCheckr.TransDate,"OwnCheckVc")) then begin
      MessageBox(1046,"");
    end else begin
      if (DateWarned(OwnCheckr.TransDate,"OwnCheckVc")) then begin
        MessageBox(1045,"");
      end;
    end;    
    WarnFutureDate(true,OwnCheckr.TransDate);
  end;
  OwnCheckDClassTransDateEFAfter = res;
  return;
end;

global
function Boolean OwnCheckDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "VECode": res = OwnCheckDClassVECodeEFAfter(wn,fn,rownr,changed);
    case "BankCode": res = OwnCheckDClassBankCodeEFAfter(wn,changed!=0);
    case "TransDate": res = OwnCheckDClassTransDateEFAfter(wn,changed!=0);
  end;
  OwnCheckDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean OwnCheckDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;  
  record OwnCheckVc OwnCheckr;

  if (changed!=0) then begin
    res = true;
    GetWindowRecord(wn,OwnCheckr);
    switch(fieldname) begin 
      case "SerNr": res = OwnCheckr.Openf==0;   
      case "TransDate": if (OwnCheckr.Openf>0) then begin res = false; end;
      case "CheckNr": if (OwnCheckr.Openf>0) then begin res = false; end;   
      case "EffectDate": if (OwnCheckr.Openf>0) then begin res = false; end;
      case "Amount": if (OwnCheckr.Openf>0) then begin res = false; end;
      case "CurncyCode": if (OwnCheckr.Openf>0) then begin res = false; end;
      case "VECode": if (OwnCheckr.Openf>0) then begin res = false; end;
      case "VEName": if (OwnCheckr.Openf>1) then begin res = false; end;
      case "ClearingDate": 
        switch (OwnCheckr.Openf) begin
          case kCheckTypeDeposited:
             if (UserCanAction("ChangeOwnCheckClearingDate",false)==false) then begin res = false; end;
          otherwise
            if (OwnCheckr.Openf>1) then begin res = false; end;
        end;
      case "BankAcc": if (OwnCheckr.Openf>0) then begin res = false; end;
      case "OrigAccNr": if (OwnCheckr.Openf>0) then begin res = false; end;
      case "TempAccNr": if (OwnCheckr.Openf>0) then begin res = false; end;
      case "TempObjects": if (OwnCheckr.Openf>0) then begin res = false; end;
      case "TargetAccNr": if (OwnCheckr.Openf>1) then begin res = false; end;
      case "TargetObjects": if (OwnCheckr.Openf>0) then begin res = false; end;
      case "ChkMode": if (OwnCheckr.Openf>0) then begin res = false; end;
      case "Comment": res = true;
      case "BankCode": res = OwnCheckr.Openf==0;   
      case "BankName": res = OwnCheckr.Openf==0;   
      case "VATNr": res = OwnCheckr.Openf==0;   
    end;
  end;  
  OwnCheckDClassActiveEditField = res;
  RETURN;
END;

global
updating procedure OpenOwnChkOKLsm()
BEGIN
  Integer wn,i;
  record OwnCheckVc OwnCheckr;

  wn = CurWindow;
  if (UserCanAction("IssueOwnChk",true)) then begin
    i = 1;
    while (GetRecordFromBrowse(OwnCheckr,wn,i)) begin  
      if (RecordAction_rlOwnCheckClear(OwnCheckr)) then begin
      end;
      i = i + 1;
    end;  
    UpdateBrowses("OwnCheckVc");
  end else begin
    MessageBox(1274,StringFromStringSet(3,"IssueOwnChk"));
  end;
  
  RETURN;
END;

global
procedure PrintOwnCheckL(Integer wn,Boolean previewf)
BEGIN
  record OwnCheckVc OwnCheckr;
  Integer i;
  
  StartPrintDialogGroup;
  i = 1;
  while (GetRecordFromBrowse(OwnCheckr,wn,i)) begin
    RecordActionOwnCheck_Print(OwnCheckr,previewf,true);
    i = i + 1;
  end;
  EndPrintDialogGroup;
  RETURN;
END;

global 
updating function Boolean CancelOwnCheckDsm()
begin
  Integer wn,i;
  record OwnCheckVc OwnCheckr;

  wn = CurWindow;
  i = 1;
  while (GetRecordFromBrowse(OwnCheckr,wn,i)) begin  
    OwnCheckr.Openf = 5;
    OwnCheckr.Invalid = 1;
    if recordstore(OwnCheckr,true) then begin end;
    i = i + 1;
  end;
  UpdateBrowses("OwnCheckVc");
  Return;
End;

global
procedure OpenOPFromOwnCheckDsm()
begin
  record OwnCheckVc OwnCheckr;
  record OPVc OPr;
  Integer wn,nwn;
  
  wn = CurWindow;
  GetWindowRecord(wn,OwnCheckr);
  if (OwnCheckr.Openf>0) then begin
    switch (OwnCheckr.ToFileName) begin
      case "OPVc":
        OPr.SerNr = OwnCheckr.ToNo;
        if (ReadFirstMain(OPr,1,true)) then begin
          nwn = OpenWindow("OPDClass",1,0,"","",OPr);
        end;
      otherwise
        OPr.SerNr = OwnCheckr.ToNo;
        if (ReadFirstMain(OPr,1,true)) then begin
          nwn = OpenWindow("OPDClass",1,0,"","",OPr);
        end;
    end;
  end;  
  Return;
End;

global
procedure OpenRegisterFromOwnCheckDsm()
begin
  record OwnCheckVc OwnCheckr;
  record OPVc OPr;
  record PPVc PPr;
  record CLOutVc CLOutr;
  Integer wn,nwn;
  
  wn = CurWindow;
  GetWindowRecord(wn,OwnCheckr);
  if (OwnCheckr.Openf>0) then begin
    switch (OwnCheckr.ToFileName) begin
      case "OPVc":
        OPr.SerNr = OwnCheckr.ToNo;
        if (ReadFirstMain(OPr,1,true)) then begin
          nwn = OpenWindow("OPDClass",1,0,"","",OPr);
        end;
      case "PPVc":
        PPr.SerNr = OwnCheckr.ToNo;
        if (ReadFirstMain(PPr,1,true)) then begin
          nwn = OpenWindow("PPDClass",1,0,"","",PPr);
        end;
      case "CLOutVc":
        CLOutr.SerNr = OwnCheckr.ToNo;
        if (ReadFirstMain(CLOutr,1,true)) then begin
          nwn = OpenWindow("CLOutDClass",1,0,"","",CLOutr);
        end;
      otherwise
        OPr.SerNr = OwnCheckr.ToNo;
        if (ReadFirstMain(OPr,1,true)) then begin
          nwn = OpenWindow("OPDClass",1,0,"","",OPr);
        end;
    end;
  end;  
  Return;
End;

global
procedure ChqDepDClassDsm()
begin
  record ChqDepVc Dep;
  record RcVc RepSpec;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,Dep);
 // if (Dep.OKFlag<>0) then begin  
    RepSpec.repname = "CompDepRn";
    RepSpec.long1   = Dep.SerNr;
    RepSpec.Media   = mtScreen;      //  mtPrinter
    RunReport(RepSpec,0);
 // end;  
  return;
end;
