remote function Boolean PasteAT2CodeInAT2Unit(var record AT2UnitVc,string);
external procedure FindFiscalYear(Date,var Date,var Date);

procedure PasteDprModel1(var record AT2UnitVc AT2Unitr)
BEGIN
  record DprModVc DprModr;
  Date FStartDate,FEndDate;

  DprModr.Code = AT2Unitr.Model1;
  if (ReadFirstMain(DprModr,1,true)) then begin
    switch (DprModr.DeprPeriod) begin
      case 0: 
        if (blankdate(AT2Unitr.StartingDate1)) then begin
          AT2Unitr.StartingDate1 = AddDay(AT2Unitr.PurchaseDate,-GetDay(AT2Unitr.PurchaseDate)+1);
          AT2Unitr.UsedFromDate = AT2Unitr.StartingDate1;
        end;
      case 1: ;
      case 2: 
        if (blankdate(AT2Unitr.StartingDate1)) then begin
          FindFiscalYear(CurrentDate,FStartDate,FEndDate);
          AT2Unitr.StartingDate1 = FStartDate;
          AT2Unitr.UsedFromDate = AT2Unitr.StartingDate1;
        end;
    end;
  end;
  RETURN;
END;
 
function Boolean AT2UnitDClassModel1EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record AT2UnitVc AT2Unitr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,AT2Unitr);
    PasteDprModel1(AT2Unitr);
    PutWindowRecord(wn,AT2Unitr);
  end;
  AT2UnitDClassModel1EFAfter = true;
  return;
end;

function Boolean AT2UnitDClassStartingDate1EFAfter(Integer wn,Integer changedf)
begin
  record AT2UnitVc AT2Unitr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,AT2Unitr);
    if (blankdate(AT2Unitr.UsedFromDate)) then begin
      AT2Unitr.UsedFromDate = AT2Unitr.StartingDate1;
    end;
    PutWindowRecord(wn,AT2Unitr);
  end;
  AT2UnitDClassStartingDate1EFAfter = true;
  return;
end;

procedure PasteDprModel2(var record AT2UnitVc AT2Unitr)
BEGIN
  record DprModVc DprModr;
  Date FStartDate,FEndDate;

  DprModr.Code = AT2Unitr.Model2;
  if (ReadFirstMain(DprModr,1,true)) then begin
    switch (DprModr.DeprPeriod) begin
      case 0: 
        if (blankdate(AT2Unitr.StartingDate2)) then begin      
          AT2Unitr.StartingDate2 = AddDay(AT2Unitr.PurchaseDate,-GetDay(AT2Unitr.PurchaseDate)+1);
        end;
      case 1: ;
      case 2: 
        if (blankdate(AT2Unitr.StartingDate2)) then begin    
          FindFiscalYear(CurrentDate,FStartDate,FEndDate);
          AT2Unitr.StartingDate2 = FStartDate;
        end;
    end;
  end;
  RETURN;
END;
 
function Boolean AT2UnitDClassModel2EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record AT2UnitVc AT2Unitr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,AT2Unitr);
    PasteDprModel2(AT2Unitr);
    PutWindowRecord(wn,AT2Unitr);
  end;
  AT2UnitDClassModel2EFAfter = true;
  return;
end;

function Boolean AT2UnitDClassVISerNrEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record AT2UnitVc ATUnitr;
  record VIVc VIr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,ATUnitr);
    VIr.SerNr = ATUnitr.VISerNr;
    if (ReadFirstMain(VIr,1,true)) then begin
      ATUnitr.VECode = VIr.VECode;
      ATUnitr.VEName = VIr.VEName;
      PutWindowRecord(wn,ATUnitr);
    end;
  end;
  AT2UnitDClassVISerNrEFAfter = res;
  return;
end;

function Boolean AT2UnitDClassVECodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record AT2UnitVc ATUnitr;
  record CUVc VEr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,ATUnitr);
    VEr.Code = ATUnitr.VECode;
    if (ReadFirstMain(VEr,1,true)) then begin
      ATUnitr.VEName = VEr.Name;
      PutWindowRecord(wn,ATUnitr);
    end;
  end;
  AT2UnitDClassVECodeEFAfter = res;
  return;
end;

function Boolean AT2UnitDClassDepCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record AT2UnitVc ATUnitr;
  record DepVc Depr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,ATUnitr);
    Depr.Code = ATUnitr.DepCode;
    if (ReadFirstMain(Depr,1,true)) then begin
      ATUnitr.DepName = Depr.Description;
      PutWindowRecord(wn,ATUnitr);
    end;
  end;
  AT2UnitDClassDepCodeEFAfter = res;
  return;
end;

function Boolean AT2UnitDClassAT2CodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record AT2UnitVc ATUnitr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,ATUnitr);
    if (PasteAT2CodeInAT2Unit(ATUnitr,WindEFStr(wn))) then begin
      PutWindowRecord(wn,ATUnitr);
    end;
  end;
  AT2UnitDClassAT2CodeEFAfter = res;
  return;
end;

function Boolean AT2UnitDClassSubsidyValEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record AT2UnitVc ATUnitr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,ATUnitr);
    ATUnitr.Subsidyf = 0;
    if (ATUnitr.SubsidyVal!=0) then begin ATUnitr.Subsidyf = 1; end;
    PutWindowRecord(wn,ATUnitr);
  end;
  AT2UnitDClassSubsidyValEFAfter = res;
  return;
end;


function Boolean AT2UnitDClassUsedFromDateEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record AT2UnitVc ATUnitr;
  record AT2AccBlock ATAccb;

  if (changedf) then begin  
    BlockLoad(ATAccb);
    GetWindowRecord(wn,ATUnitr);
    switch (ATAccb.SetAssetDepStartDate) begin
      case 0:
      case 1:
        ATUnitr.StartingDate1 = ATUnitr.UsedFromDate;
      case 2: 
        ATUnitr.StartingDate1 = AddMonth(ATUnitr.UsedFromDate,1);        
        ATUnitr.StartingDate1 = AddDay(ATUnitr.StartingDate1,-GetDay(ATUnitr.StartingDate1)+1);
      case 3: 
        ATUnitr.StartingDate1 = AddDay(ATUnitr.UsedFromDate,-GetDay(ATUnitr.UsedFromDate)+1);
    end;
    PutWindowRecord(wn,ATUnitr);
  end;
  AT2UnitDClassUsedFromDateEFAfter = res;
  return;
end;

global
function Boolean AT2UnitDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "Model1": res = AT2UnitDClassModel1EFAfter(wn,fn,rownr,changed);
    case "StartingDate1": res = AT2UnitDClassStartingDate1EFAfter(wn,changed);
    case "Model2": res = AT2UnitDClassModel2EFAfter(wn,fn,rownr,changed);
    case "VISerNr": res = AT2UnitDClassVISerNrEFAfter(wn,fn,rownr,changed);
    case "VECode": res = AT2UnitDClassVECodeEFAfter(wn,fn,rownr,changed);
    case "DepCode": res = AT2UnitDClassDepCodeEFAfter(wn,fn,rownr,changed);
    case "AT2Code": res = AT2UnitDClassAT2CodeEFAfter(wn,fn,rownr,changed);
    case "SubsidyVal": res = AT2UnitDClassSubsidyValEFAfter(wn,fn,rownr,changed);
    case "UsedFromDate": res = AT2UnitDClassUsedFromDateEFAfter(wn,changed!=0);
  end;
  AT2UnitDClassAfterEditField = res;
  RETURN;
END;
 
function Boolean AT2UnitDClassInventoryNrEFActive(Integer wn,Integer fn,Integer wnst,Integer rownr,Integer ef)
begin
  Boolean res;
  record AT2UnitVc AT2Unitr;
  record AT2UnitVc AT2Unit2r;
  
  res = true;
  if (wnst==2) then begin//updatemode Rs_update
    res = false;
  end;
  AT2UnitDClassInventoryNrEFActive = res;
  return;
end;

global
function Boolean AT2UnitDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = true;
  switch (fieldname) begin
    case "InventoryNr": res = AT2UnitDClassInventoryNrEFActive(wn,fn,wnst,rownr,changed);
  end;
  AT2UnitDClassActiveEditField = res;
  RETURN;
END;

global
procedure CreateAT2UnitTR()
BEGIN
  record AT2UnitVc ATUnitr;
  Integer wn,wn2;
  record RcVc RepSpec;

  wn = CurWindow;
  GetWindowRecord(wn,ATUnitr);
  ReportDefaults(RepSpec,"AT2PutinVClass");  
  wn2 = OpenWindow("AT2PutinVClass",1,0,"","",RepSpec);
  DeselectWindow(wn2,false);
  RepSpec.repname = "AT2PutinMn";
  RepSpec.f2 = ATUnitr.InventoryNr;
  PutWindowRecord(wn2,RepSpec);  
  SelectWindow(wn2);
  RETURN;
END;

global 
procedure PrintAT2InFormDsm()
begin
  record AT2UnitVc AT2Unitr;
  record RcVc RepSpec;
  Integer wn;
  Boolean res;

  wn = CurWindow;  
  GetWindowRecord(wn,AT2Unitr);
  res = PrintDocument(AT2Unitr,"AT2InForm",false);
  return;
end;