remote function boolean CalculateTaxReport(record RcVc,var record SMVc);
external function string 255 TimeStampStr();

function string 255 GetHerstellerID()
begin
  record EVATDeclBlock EVb;
  string 255 res;
  
  BlockLoad(EVb);
  if (EVb.TestMode==1) then begin
    res = "74931";
  end else begin
    res = "21727";
  end;
  GetHerstellerID = res;
  return;
end;

function string 255 GenerateUniqueFilename()
begin
  string 255 tstr;
  
  tstr = left(TimeStampStr(),14);
  tstr = tstr & GetCurTick;
  
  GenerateUniqueFilename = tstr;
  
  return;
end;

procedure SplitGermanAddress(record CYBlock CYb,var string street,var string postcode,var string city)
begin
  street = CYb.Addr0;
  if (len(CYb.Addr1)>5 and mid(CYb.Addr1,5,1)==" ") then begin
    postcode = left(CYb.Addr1,5);
    city = mid(CYb.Addr1,6,255);
  end else begin
    postcode = CYb.Addr1;
    city = CYb.Addr2;
  end;    
  
  return;
end;

procedure OutputXmlIndent(integer level,var Area a)
begin
  integer i;
  if (level>0) then begin
    for (i=0;i<level-1;i=i+1) begin
      AddTextToArea("  ",a);
    end;
  end;
  return;
end;

procedure OpenXmlTagWithAttr(string name,string attributes,var Area a)
begin
  transaction integer level;
  transaction boolean line;
  transaction boolean lastwastag;
  transaction string 255 gXmlOpenTag;

  if (nonblank(gXmlOpenTag)) then begin
    AddTextToArea("<" & gXmlOpenTag & ">",a);
    gXmlOpenTag = "";
  end;
  
  if (level==0) then begin
    level = 1;
  end else begin
    AddTextToArea(chr(13) & chr(10),a);
  end;
  OutputXmlIndent(level,a);

  gXmlOpenTag = name;
  
  if (nonblank(attributes)) then begin
    gXmlOpenTag = gXmlOpenTag & " " & attributes;
  end;

  level = level+1;
  line = false;
  lastwastag = true;
  return;
end;

procedure OpenXmlTag(string name,var Area a)
begin
  OpenXmlTagWithAttr(name,"",a);
  return;
end;

procedure CloseXmlTag(string name,var Area a)
begin
  transaction integer level;
  transaction boolean line;
  transaction boolean lastwastag;
  transaction string 255 gXmlOpenTag;

  level = level-1;
  if (line==true) then begin
    AddTextToArea(chr(13) & chr(10),a);
    OutputXmlIndent(level,a);  
  end;
  if (nonblank(gXmlOpenTag)) then begin
    AddTextToArea("<" & gXmlOpenTag & " />",a);
    gXmlOpenTag = "";
  end else begin
    AddTextToArea("</" & name & ">",a);
  end;
  line = true;
  lastwastag = true;
  return;
end;

procedure OutputXmlText(string txt,var Area a)
begin
  transaction integer level;
  transaction boolean line;
  transaction boolean lastwastag;
  transaction string 255 gXmlOpenTag;

  if (nonblank(gXmlOpenTag)) then begin
    AddTextToArea("<" & gXmlOpenTag & ">",a);
    gXmlOpenTag = "";
  end;
  AddTextToArea(txt,a);
  lastwastag = false;
  return;
end;

procedure GenerateNutzdatenHeader(string EmpfaengerId,string DatenLieferant,var Area a)
begin
  OpenXmlTagWithAttr("NutzdatenHeader","version=""10""",a);

  OpenXmlTag("NutzdatenTicket",a);
  OutputXmlText("1",a);
  CloseXmlTag("NutzdatenTicket",a);

  OpenXmlTagWithAttr("Empfaenger","id=""F""",a);
  OutputXmlText(EmpfaengerId,a);
  CloseXmlTag("Empfaenger",a);

  OpenXmlTag("Hersteller",a);

  OpenXmlTag("ProduktName",a);
  OutputXmlText(USetStr(1802),a);
  CloseXmlTag("ProduktName",a);

  OpenXmlTag("ProduktVersion",a);
  OutputXmlText(USetStr(901),a);
  CloseXmlTag("ProduktVersion",a);

  CloseXmlTag("Hersteller",a);

  OpenXmlTag("DatenLieferant",a);
  OutputXmlText(DatenLieferant,a);
  CloseXmlTag("DatenLieferant",a);
  
  CloseXmlTag("NutzdatenHeader",a);
  return;
end;

procedure GenerateDatenLieferant(string name,string street,string postcode,string city,var Area a)
begin
  OpenXmlTag("DatenLieferant",a);

  OpenXmlTag("Name",a);
  OutputXmlText(left(name,45),a);  
  CloseXmlTag("Name",a);

  OpenXmlTag("Strasse",a);
  OutputXmlText(left(street,30),a);
  CloseXmlTag("Strasse",a);

  OpenXmlTag("PLZ",a);
  OutputXmlText(left(postcode,12),a);
  CloseXmlTag("PLZ",a);

  OpenXmlTag("Ort",a);
  OutputXmlText(left(city,30),a);
  CloseXmlTag("Ort",a);

  CloseXmlTag("DatenLieferant",a);
  return;
end;

function boolean GetVarArrayValue(record SMVc vararray,string key,var val v)
begin
  row SMVc vr;
  integer j,cnt;
  boolean res;
  
  res = false;
  cnt = MatRowCnt(vararray);
  for (j=0;j<cnt and res==false;j=j+1) begin
    MatRowGet(vararray,j,vr);
    if (vr.AccNumber==key) then begin
      v = StringToVal(vr.Comment,M4Val);
      res = true;
    end;
  end;

  GetVarArrayValue = res;
  return;
end;

function boolean BothFieldsPresentOrAbsent(record SMVc vararray,string field1,string field2)
begin
  boolean res;
  val v;

  res = true;
  if (GetVarArrayValue(vararray,field1,v)) then begin
    if (GetVarArrayValue(vararray,field2,v)==false) then begin
      MessageBox(16654," " & field1 & ", " & field2);
      res = false;
    end;
  end;
  
  BothFieldsPresentOrAbsent = res;

  return;
end;

function boolean ValidateUVAValues(record SMVc vararray)
begin
  row SMVc vr;
  boolean res;
  val v;
  
  res = false;
  
  if (GetVarArrayValue(vararray,"K83",v)==false) then begin
    MessageBox(3167," K83");
    goto LValidateUVAValues;
  end;

  if (BothFieldsPresentOrAbsent(vararray,"K35","K36")==false) then begin goto LValidateUVAValues; end;
  if (BothFieldsPresentOrAbsent(vararray,"K76","K80")==false) then begin goto LValidateUVAValues; end;
  if (BothFieldsPresentOrAbsent(vararray,"K95","K98")==false) then begin goto LValidateUVAValues; end;
  if (BothFieldsPresentOrAbsent(vararray,"K73","K74")==false) then begin goto LValidateUVAValues; end;
  if (BothFieldsPresentOrAbsent(vararray,"K84","K85")==false) then begin goto LValidateUVAValues; end;

  res = true;
  
LValidateUVAValues:;

  ValidateUVAValues = res;
  return;
end;

function string 255 FormatUVAField(val v,integer field)
begin
  string 255 res;
  boolean decimalsf;
  val v1;
  
  decimalsf = false;
  switch (field) begin
    case 35:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 48:
    case 49:
    case 51:
    case 52:
    case 60:
    case 73:
    case 76:
    case 77:
    case 81:
    case 84:
    case 86:
    case 89:
    case 91:
    case 93:
    case 94:
    case 95:
    case 97:
    otherwise 
      decimalsf = true;
  end;
    
  if (decimalsf) then begin
    res = ValToString(v,M4Val,"",".",0);
  end else begin
    res = ValToString(v,M4Val,"",".",1);
  end;
  
  FormatUVAField = res;
  
  return;
end;

function boolean GenerateUmsatzsteuervoranmeldung(record RcVc RepSpec,string taxnumber,var Area a)
begin
  record SMVc vararray;
  row SMVc vr;
  integer i,j,cnt;
  string 255 fieldnr,periodstr;
  val v;
  boolean res;
  integer period;
  
  res = false;
  
  OpenXmlTag("Umsatzsteuervoranmeldung",a);
  
  OpenXmlTag("Jahr",a);
  OutputXmlText(DateToString(RepSpec.sStartDate,"YYYY"),a);
  CloseXmlTag("Jahr",a);
  
  period = GetMonth(RepSpec.sStartDate);
  if (GetMonth(RepSpec.sStartDate)!=GetMonth(RepSpec.sEndDate)) then begin
    switch (GetMonth(RepSpec.sStartDate)) begin
      case 1: period = 41;
      case 4: period = 42;
      case 7: period = 43;
      case 10: period = 44;
    end;
  end;
  
  if (period<10) then begin
    periodstr = "0" & period;
  end else begin
    periodstr = period;
  end;
  OpenXmlTag("Zeitraum",a);
  OutputXmlText(periodstr,a); //1-12 (monthly) or 41-44 (quarterly)
  CloseXmlTag("Zeitraum",a);
  
  OpenXmlTag("Steuernummer",a);
  OutputXmlText(taxnumber,a);
  CloseXmlTag("Steuernummer",a);
  
  OpenXmlTag("Kz09",a);
  OutputXmlText(GetHerstellerID,a);
  CloseXmlTag("Kz09",a);
  
  if (RepSpec.flags[10]==1) then begin
    OpenXmlTag("Kz10",a);
    OutputXmlText("1",a);
    CloseXmlTag("Kz10",a);
  end;

  if (RepSpec.flags[11]==1) then begin
    OpenXmlTag("Kz22",a);
    OutputXmlText("1",a); 
    CloseXmlTag("Kz22",a);
  end;

  if (RepSpec.flags[13]==1) then begin
    OpenXmlTag("Kz26",a);
    OutputXmlText("1",a);
    CloseXmlTag("Kz26",a);
  end;

  if (RepSpec.flags[12]==1) then begin
    OpenXmlTag("Kz29",a);
    OutputXmlText("1",a);
    CloseXmlTag("Kz29",a);
  end;

/*  
  if (CalculateTaxReport(RepSpec,vararray)) then begin
    if (ValidateUVAValues(vararray)) then begin
      for (i=30;i<=99;i=i+1) begin
        fieldnr = "";
        if (i<10) then begin fieldnr = "0"; end;
        fieldnr = fieldnr & i;
        
        if (GetVarArrayValue(vararray,"K" & fieldnr,v)) then begin
          OpenXmlTag("Kz" & fieldnr,a);
          OutputXmlText(FormatUVAField(v,i),a);
          CloseXmlTag("Kz" & fieldnr,a);
          res = true;
        end;
      end;
    end;
  end;
*/  
  CloseXmlTag("Umsatzsteuervoranmeldung",a);
  
  GenerateUmsatzsteuervoranmeldung = res;
  return;
end;

function boolean GenerateNutzdatenBody(record RcVc RepSpec,string taxnumber,string name,string street,string postcode,string city,var Area a)
begin
  boolean res;
  
  OpenXmlTag("Nutzdaten",a);
  
  OpenXmlTagWithAttr("Anmeldungssteuern","art=""UStVA"" version=""" & DateToString(CurrentDate,"YYYY") & "01""",a);

  GenerateDatenLieferant(name,street,postcode,city,a);

  OpenXmlTag("Erstellungsdatum",a);
  OutputXmlText(DateToString(CurrentDate,"YYYYMMDD"),a);
  CloseXmlTag("Erstellungsdatum",a);

  OpenXmlTag("Steuerfall",a);

  res = GenerateUmsatzsteuervoranmeldung(RepSpec,taxnumber,a);

  CloseXmlTag("Steuerfall",a);

  CloseXmlTag("Anmeldungssteuern",a);
  
  CloseXmlTag("Nutzdaten",a);
  
  GenerateNutzdatenBody = res;
  return;
end;

function boolean GenerateDatenTeilTag(record RcVc RepSpec,string EmpfaengerId,string taxnumber,string name,string street,string postcode,string city,var Area a)
begin
  boolean res;
  
  OpenXmlTag("DatenTeil",a);
  
  OpenXmlTag("Nutzdatenblock",a);
  
  GenerateNutzdatenHeader(EmpfaengerId,name,a);
  
  res = GenerateNutzdatenBody(RepSpec,taxnumber,name,street,postcode,city,a);
  res = true;
  
  CloseXmlTag("Nutzdatenblock",a);
  
  CloseXmlTag("DatenTeil",a);

  GenerateDatenTeilTag = res;
  return;
end;

function boolean CreateUVAFile(string id,record RcVc RepSpec)
begin
  boolean res;
  transaction boolean gFormattedXml;
  Area a;
  string 255 fname;
  record CYBlock CYb;
  string 255 street,postcode,city;
  boolean quarterf,monthlyf;
  
  res = false;

  if (GetDay(RepSpec.sStartDate)!=1) then begin
    MessageBox(16644,"");
    goto L99;
  end;

  if (GetDay(AddDay(RepSpec.sEndDate,1))!=1) then begin
    MessageBox(16644,"");
    goto L99;
  end;

  if (GetMonth(AddDay(AddMonth(RepSpec.sStartDate,3),-1))!=GetMonth(RepSpec.sEndDate)) then begin
    if (GetMonth(RepSpec.sStartDate)!=GetMonth(RepSpec.sEndDate)) then begin
      MessageBox(16651,"");
      goto L99;
    end;
  end else begin
    switch (GetMonth(RepSpec.sStartDate)) begin
      case 1:
      case 4:
      case 7:
      case 10:
      otherwise
        MessageBox(16652,"");
        goto L99;
    end;
  end;
  
  BlockLoad(CYb);
  
  if (len(CYb.VATNr)!=13 or mid(CYb.VATNr,4,1)!="0") then begin
//    MessageBox(16653,"");
//    goto L99;
  end;

  gFormattedXml = true;
  
  SplitGermanAddress(CYb,street,postcode,city);
  
  if (GenerateDatenTeilTag(RepSpec,left(CYb.VATNr,4),CYb.VATNr,CYb.CompName,street,postcode,city,a)) then begin
    fname = "tmp/" & id & ".xml";
    CreateFile(fname);
    CloseFile;
    WriteAreaToFile(a,fname,0);
  
    res = true;
  end;
  
L99:;
  CreateUVAFile = res;
  return;
end;

function boolean ReadUVAResponse(string fname)
begin
  boolean res;
  xml xmlreply;
  
  res = false;
  
  xmlreply = ParseXmlFile(fname);
  Delete_File(fname);

  if (XmlNodeExists(xmlreply,"Elster/DatenTeil/Nutzdatenblock/NutzdatenHeader/RC/Rueckgabe/Code")) then begin
    if (XmlGet(xmlreply,"Elster/DatenTeil/Nutzdatenblock/NutzdatenHeader/RC/Rueckgabe/Code")=="0") then begin
      MessageBox(16649," (TransferTicket=" & XmlGet(xmlreply,"Elster/TransferHeader/TransferTicket") & ")");
      res = true;
    end else begin
      MessageBox(16650," " & XmlGet(xmlreply,"Elster/DatenTeil/Nutzdatenblock/NutzdatenHeader/RC/Rueckgabe/Text"));
    end;
  end else begin
    MessageBox(16650," " & USetStr(14667));
  end;
  
  ReadUVAResponse = res;
  
  return;
end;

function boolean CallJavaAndSubmit(string id)
begin
  string 255 args;
  string 255 inname,outname;
  integer cnt;
  boolean testf,foundf,res;
  record EVATDeclBlock EVb;
  
  res = false;
  
  inname = "tmp/" & id & ".xml";
  outname = "tmp/" & id & ".resp.xml";

  if (FileExists(outname)) then begin
    Delete_File(outname);
  end;
  
  BlockLoad(EVb);
  if (EVb.TestMode==1) then begin
    args = "--test ";
  end else begin
    args = "";
  end;
  
  args = "-jar elster/HansaElster.jar " & args & inname & " " & outname;
  
  if (nonblank(EVb.JavaPath) and FileExists(EVb.JavaPath)) then begin
    RunProgram(EVb.JavaPath,args);

    cnt = 0;
    testf = true;
    foundf = false;
    while (testf) begin
      sleep(2);
      if (FileExists(outname)) then begin
        testf = false;
        foundf = true;
      end else begin
        cnt = cnt + 1;
        if (cnt>60) then begin
          MessageBox(16650," " & USetStr(20235));
          testf = false;
        end;
      end;
    end;
    
    Delete_File(inname);

    if (foundf) then begin
      res = ReadUVAResponse(outname);
    end;
  end else begin
//    Delete_File(inname);
    MessageBox(16655,"");
  end;
  
  CallJavaAndSubmit = res;
  return;
end;

global
procedure ExportAndSubmitPerVATGer(record RcVc RepSpec)
begin
  string 255 id;

//  if (FileExists("elster/HansaElster.jar")) then begin
    id = GenerateUniqueFilename;
Trace("id " & id,"");    
    if (CreateUVAFile(id,RepSpec)) then begin
      if (CallJavaAndSubmit(id)) then begin end;
    end;
//  end else begin
//    MessageBox(16656,"");
//  end;
  
  return;
end;

global
procedure PerVATGerRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record EVATDeclBlock EVb;
  Date sd,ed;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);

  BlockLoad(EVb);
  
  sd = CurrentDate;
  sd.day = 1;
  
  ed = AddMonth(sd,1);
  ed = AddDay(ed,-1);

  RepSpec.sStartDate = sd;
  RepSpec.sEndDate = ed;
  RepSpec.Period2Str = sd & ":" & ed;
  RepSpec.f1 = EVb.DefaultTaxRep;

  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure EVATSubmitPerVATGer()
begin
  integer wn;
  string 255 id;
  record RcVc RepSpec;
  Date sd,ed;

  wn = CurWindow;
  if (GetWindowClass(wn)=="PerVATGerRClass") then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,RepSpec);
  
    ExportAndSubmitPerVATGer(RepSpec);
    
    CloseWindow(wn);
  end;

  return;
end;