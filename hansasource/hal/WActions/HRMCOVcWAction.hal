remote updating function Boolean MakeActFromHRMCO(var record ActVc,record HRMCOVc);
external procedure ActVcRecordDefClient(var record ActVc);

function Boolean HRMCODClassEmployeeEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record HRMCOVc HRMCOr;
  record CUVc CUr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,HRMCOr);
    CUr.Code = HRMCOr.Employee;
    ReadFIrstMain(CUr,1,true);
    HRMCOr.Name = CUr.Name;
    HRMCOr.JobTitle = CUr.JobDesc;
    HRMCOr.LangCode = CUr.LangCode;
    PutWindowRecord(wn,HRMCOr);
  end;
  HRMCODClassEmployeeEFAfter = res;
  return;
end;

function Boolean HRMCODClassHRMCOSerNrEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record HRMCOVc HRMCOr;
  record HRMCOVc oldHRMCOr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,HRMCOr);
    oldHRMCOr.SerNr = HRMCOr.HRMCOSerNr;
    ReadFIrstMain(oldHRMCOr,1,true);
    HRMCOr.Employee = oldHRMCOr.Employee;
    HRMCOr.Name = oldHRMCOr.Name;
    HRMCOr.JobTitle = oldHRMCOr.JobTitle;
    PutWindowRecord(wn,HRMCOr);
  end;
  HRMCODClassHRMCOSerNrEFAfter = res;
  return;
end;

global
function Boolean HRMCODClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "Employee": res = HRMCODClassEmployeeEFAfter(wn,changed!=0);
    case "HRMCOSerNr": res = HRMCODClassHRMCOSerNrEFAfter(wn,changed!=0);
  end;
  HRMCODClassAfterEditField = res;
  return;
end;

global
function Boolean HRMCODClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record HRMCOVc HRMCOr;
  
  res = true;
  switch (wnst) begin
    case Rs_update:
      GetPrevWindowRecord(wn,HRMCOr);
      switch (fieldname) begin
        case "Reason":
          if (HRMCOr.TerminatedFlag!=0) then begin
            res = false;
          end;
        case "ReasonDetails":
          if (HRMCOr.TerminatedFlag!=0) then begin
            res = false;
          end;
        case "EndDate":
          if (HRMCOr.TerminatedFlag!=0) then begin
            res = false;
          end;
        otherwise
          if (HRMCOr.OKFlag!=0) then begin
            res = false;
          end;
      end;
  end;
  HRMCODClassActiveEditField = res;
  return;
end;

global
function Boolean HRMCODClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record HRMCOVc HRMCOr;
  Integer err;
 
  res = true;
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,HRMCOr);
      if (HRMCOr.OKFlag!=0) then begin
        res = false;
        if (UserCanAction("UnOKAll",false)) then begin
          res = true;
        end;
      end;
    case Rs_update:
      GetPrevWindowRecord(wn,HRMCOr);
      if (HRMCOr.OKFlag!=0) then begin
        res = false;
      end;
  end;  
  if (UserCanAction("HRMCOOK",true)==false) then begin
    res = false;
  end;
  HRMCODClassOKFlagButtonAction = res;
  return;
end;

global
function Boolean HRMCODClassTerminatedFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record HRMCOVc HRMCOr;
  Integer err;
 
  res = true;
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,HRMCOr);
      if (HRMCOr.TerminatedFlag!=0) then begin
        res = false;
        if (UserCanAction("UnOKAll",false)) then begin
          res = true;
        end;
      end;
    case Rs_update:
      GetPrevWindowRecord(wn,HRMCOr);
      if (HRMCOr.TerminatedFlag!=0) then begin
        res = false;
      end;
  end;  
  HRMCODClassTerminatedFlagButtonAction = res;
  return;
end;

global
procedure HRMCOChangeFromHRMCODsm()
begin
  Integer nwn;
  record HRMCOVc HRMCOr;
  record HRMCOChangeVc HRMCOCr;
  
  GetWindowRecord(CurWindow,HRMCOr);
  if (HRMCOr.OKFlag==0) then begin
    MessageBox(2069,"");
    goto LHRMCOChangeFromHRMCODsm;
  end;
  HRMCOCr.HRMCOSerNr = HRMCOr.SerNr;
  if (ReadLastKey("HRMCONrDate",HRMCOCr,1,true)) then begin
    HRMCOr.TrialEndDate = HRMCOCr.TrialEndDate;
    HRMCOr.Class = HRMCOCr.Class;
    HRMCOr.JobTitle = HRMCOCr.JobTitle;
    HRMCOr.Comment = HRMCOCr.Comment;
    HRMCOr.SalaryType = HRMCOCr.SalaryType;
    HRMCOr.GrossSalary = HRMCOCr.GrossSalary;
    HRMCOr.CurncyCode = HRMCOCr.CurncyCode;
    HRMCOr.DepCode = HRMCOCr.DepCode;
    HRMCOr.LeaveScheme = HRMCOCr.LeaveScheme;
  end;
  RecordNew(HRMCOCr);
  HRMCOCr.TransDate = CurrentDate;
  HRMCOCr.Employee = HRMCOr.Employee;
  HRMCOCr.Name = HRMCOr.Name;
  HRMCOCr.SalaryType = HRMCOr.SalaryType;
  HRMCOCr.GrossSalary = HRMCOr.GrossSalary;
  HRMCOCr.JobTitle = HRMCOr.JobTitle;
  HRMCOCr.DepCode = HRMCOr.DepCode;
  HRMCOCr.CurncyCode = HRMCOr.CurncyCode;
  HRMCOCr.LeaveScheme = HRMCOr.LeaveScheme;
  HRMCOCr.Class = HRMCOr.Class;
  HRMCOCr.HRMCOSerNr = HRMCOr.SerNr;
  nwn = OpenWindow("HRMCOChangeDClass",1,0,"","",HRMCOCr);
LHRMCOChangeFromHRMCODsm:;  
  return;
end;

global
function Boolean HRMCODClassListDblClick(Integer wn)
begin
  Integer nwn;
  record HRMCOVc HRMCOr;
  record HRMCOChangeVc HRMCOChanger;
  
  if (WindowState(wn)!=Rs_insert) then begin
    GetWindowRecord(wn,HRMCOr);
    if (ReadMarkedRecord(wn,HRMCOChanger)) then begin
      nwn = OpenWindow("HRMCOChangeDClass",1,0,"","",HRMCOChanger);    
    end;
  end;
  HRMCODClassListDblClick = true;
  return;
end;

global
function Boolean HRMCODClassOnOKWindow(Integer wn)
begin
  Integer nwn;
  record HRMCOVc HRMCOr;
  record HRMCOChangeVc HRMCOChanger;
  
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,HRMCOr);
    if (ReadMarkedRecord(wn,HRMCOChanger)) then begin
      nwn = OpenWindow("HRMCOChangeDClass",1,0,"","",HRMCOChanger);    
    end;
  end;
  HRMCODClassOnOKWindow = true;
  return;
end;  

global
function Boolean HRMCODClassOpenRecord(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record HRMCOVc HRMCOr;
  record CUVc CUr;
  Integer nwn;
  
  switch (fieldname) begin
    case "Employee":
      GetWindowRecord(wn,HRMCOr);  
      CUr.Code = HRMCOr.Employee;
      if (ReadFirstMain(CUr,1,true)) then begin
        nwn = OpenWindow("CUEmployeeDClass",0,0,"","",CUr);   
        res = true; 
      end;
  end;
  HRMCODClassOpenRecord = res;
  return;
end;

global
procedure HRMCOListHRMCODsm()
begin
  record RcVc RepSpec;
  record HRMCOVc HRMCOr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,HRMCOr);
  RecordNew(RepSpec);
  ReportDefaults(RepSpec,"HRMCOListRClass");
  RepSpec.f1 = HRMCOr.SerNr;
  RepSpec.sStartDate = HRMCOr.StartDate;
  if (blankdate(RepSpec.sStartDate)) then begin
    RepSpec.sStartDate = HRMCOr.TransDate;
  end;
  RepSpec.sEndDate = HRMCOr.EndDate;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
  RepSpec.ArtMode = 1;
  RepSpec.flags[0] = 3;
  RepSpec.flags[3] = 1;
  RepSpec.Media = mtScreen;  
  RepSpec.repname = "HRMCOListRn";
  RunReport(RepSpec,0);
  return;
end;

global
procedure HRMCODataHRMCODsm()
begin
  record RcVc RepSpec;
  record HRMCOVc HRMCOr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,HRMCOr);
  RecordNew(RepSpec);
  ReportDefaults(RepSpec,"HRMCODataRClass");
  RepSpec.f1 = HRMCOr.SerNr;
  RepSpec.sStartDate = HRMCOr.StartDate;
  if (blankdate(RepSpec.sStartDate)) then begin
    RepSpec.sStartDate = HRMCOr.TransDate;
  end;
  RepSpec.sEndDate = HRMCOr.EndDate;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
  RepSpec.Media = mtScreen;  
  RepSpec.repname = "HRMCODataRn";
  RunReport(RepSpec,0);
  return;
end;

global
function Boolean HRMCODClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record HRMCOVc HRMCOr;
  
  GetWindowRecord(wn,HRMCOr);
  if (HRMCOr.SerNr!=-1) then begin
    subsetname = HRMCOr.SerNr;
  end else begin
    subsetname = -4232098; 
  end;
  HRMCODClassUpdateWindowSubset = true;
  return;
end;

global
updating procedure HRMCOVcCreateActivity()
begin
  Integer wn,nwn;
  record ActVc Actr;
  record HRMCOVc HRMCOr;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,HRMCOr);
    RecordNew(Actr);
    ActVcRecordDefClient(Actr);
    if (MakeActFromHRMCO(Actr,HRMCOr)) then begin
      nwn = OpenWindow("ActDClass",1,0,"","",Actr);
      SetRLink(wn,true);  
    end;
  end;

  return;
end;
