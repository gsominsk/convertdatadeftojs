external procedure WarnFutureDate(Boolean,Date);
external function string 40 SerialNrSClassSpecPName(string);
remote function Boolean INTransferVc_PasteArtCode(var record INTransferVc,Integer,var string);
remote function Boolean INTransferVc_PasteSerialNr(var record INTransferVc,Integer);
external procedure INTransferSumUp(record INTransferVc);

global
procedure INTransferSumUp(record INTransferVc INTrar)
begin
  row INTransferVc INTrarw;
  Integer i,rwcnt;
  
  INTrar.SumQuant = BlankVal;
  rwcnt = MatRowCnt(INTrar);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(INTrar,i,INTrarw);
      INTrar.SumQuant = INTrar.SumQuant + INTrarw.Quant;
  end;
  if (INTrar.SumQuant==0) then begin
    INTrar.SumQuant = BlankVal;
  end;
  return;
end;

global 
function Boolean INTransferDClassArtCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record INTransferVc INTrar;
  row INTransferVc INTrarw;
  string 255 inwarning;
 
  GetWindowRecord(wn,INTrar);
  MatRowGet(INTrar,rownr,INTrarw);
  if ((changedf!=0) or ((blank(INTrarw.Spec)) and (nonblank(INTrarw.ArtCode)))) then begin
    GetWindowRecord(wn,INTrar);
    DeselectWindow(wn,false);
    if (INTransferVc_PasteArtCode(INTrar,rownr,inwarning)) then begin
      INTransferSumUp(INTrar);
      PutWindowRecord(wn,INTrar);
      if (nonblank(inwarning)) then begin
        MessageBox(0,inwarning);
      end;
    end else begin
      Beep;
    end;
  end;
  INTransferDClassArtCodeEFAfter = true;
  return;
end;

global 
function Boolean INTransferDClassSerialNrEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record INTransferVc INTrar;
  row INTransferVc INTrarw;
 
  GetWindowRecord(wn,INTrar);
  MatRowGet(INTrar,rownr,INTrarw);
  if ((changedf!=0) or ((blank(INTrarw.Spec)) and (nonblank(INTrarw.ArtCode)))) then begin
    GetWindowRecord(wn,INTrar);
    DeselectWindow(wn,false);
    if (INTransferVc_PasteSerialNr(INTrar,rownr)) then begin
      INTransferSumUp(INTrar);
      PutWindowRecord(wn,INTrar);
    end else begin
      Beep;
    end;
  end;
  INTransferDClassSerialNrEFAfter = true;
  return;
end;

global 
function Boolean INTransferDClassTransDateEFAfter(Integer wn,Boolean changedf)
begin
  record INTransferVc INTrar;
  
  if (changedf) then begin
    GetWindowRecord(wn,INTrar);
    WarnFutureDate(true,INTrar.TransDate);
    PutWindowRecord(wn,INTrar);
  end;
  INTransferDClassTransDateEFAfter = true;
  return;
end;

global 
function Boolean INTransferDClassQuantEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record INTransferVc INTrar;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,INTrar);
    DeselectWindow(wn,false);
    INTransferSumUp(INTrar);
    PutWindowRecord(wn,INTrar);
  end;
  INTransferDClassQuantEFAfter = true;
  return;
end;

global 
function Boolean INTransferDClassLocationEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record INTransferVc INTrar;
  row INTransferVc INTrow;
  record LocationVc Locr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,INTrar);
    DeselectWindow(wn,false);
    if (rownr<0) then begin
      Locr.Code = INTrar.Location;
      if (ReadFirstMain(Locr,1,true)) then begin
        if (nonblank(Locr.StockAcc)) then begin
          INTrar.CostAcc = Locr.StockAcc;
        end;
      end;
    end else begin
      if (rownr<MatRowCnt(INTrar)) then begin
        MatRowGet(INTrar,rownr,INTrow);
        if (INTrar.Location<>INTrow.Location) then begin
          Locr.Code = INTrow.Location;
          if (ReadFirstMain(Locr,1,true)) then begin
            if (nonblank(Locr.StockAcc)) then begin
              INTrow.CostAcc = Locr.StockAcc;
              MatRowPut(INTrar,rownr,INTrow);
            end;
          end;
        end else begin
          INTrow.CostAcc = INTrar.CostAcc;
        end;
      end;
    end;
    PutWindowRecord(wn,INTrar);
  end;
  INTransferDClassLocationEFAfter = true;
  return;
end;

global
function Boolean INTransferDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "TransDate": res = INTransferDClassTransDateEFAfter(wn,changed!=0);
    case "Quant": res = INTransferDClassQuantEFAfter(wn,fn,rownr,changed);
    case "ArtCode": res = INTransferDClassArtCodeEFAfter(wn,fn,rownr,changed);
    case "SerialNr": res = INTransferDClassSerialNrEFAfter(wn,fn,rownr,changed);
    case "Location": res = INTransferDClassLocationEFAfter(wn,fn,rownr,changed);
  end;
  INTransferDClassAfterEditField = res;
  RETURN;
END;

global
function string 40 INTransferDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "SerialNr": psname = SerialNrSClassSpecPName(defpsname);
  end;
  INTransferDClassSpecPasteName = psname;
  return;
end;

global
function Boolean INTransferDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record INTransferVc INTransferr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,INTransferr);    
    INTransferSumUp(INTransferr);
    PutWindowRecord(wn,INTransferr);    
  end;
  INTransferDClassOnOverStrike = true;
  RETURN;
END;
