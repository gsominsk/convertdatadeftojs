external function string 40 ObjSClassPasteSpecialWindowClass(string);
remote procedure CLInSumup(var record CLInVc);
remote function Integer CLInVc_PasteOrderNr(var record CLInVc,Integer);
remote function Integer CLInVc_PasteTransNr(var record CLInVc,Integer);
remote function Integer CLInVc_PasteTransOfficialSerNr(var record CLInVc,Integer);
remote function Integer CLInVc_PasteCUCode(var record CLInVc,string,Boolean);
remote procedure CLInVc_PasteCompany(var record CLInVc,integer,Boolean);
remote procedure CLInVc_PasteCorspCode(var record CLInVc,Integer);
remote procedure CLInVc_PasteTransDate(var record CLInVc);
remote procedure CLInVc_PastePayMode(var record CLInVc);
remote procedure CLInVc_PasteCurncyCode(var record CLInVc);
remote procedure CLInVc_PastePerson(var record CLInVc,Integer,string);
remote procedure CLInVc_PasteTotal(var record CLInVc);
remote procedure CLInVc_PasteVATCode(var record CLInVc);
remote procedure CLInVc_PasteNetVal(var record CLInVc);
external procedure RecordActionCashInCol_Print(var record CLInVc,string,Boolean);
external procedure RecordActionCashIn_Print(var record CLInVc,string,Boolean);
external procedure FindOTforAcc(string,var string);
external function Boolean GetPMRow(string,var row PMBlock);

global
function Boolean CLInDClassPrint(Integer wn,Boolean previewf)
BEGIN
  Boolean res;
  record CLInVc CLInr;
  Integer normalmode;
  record MainCLBlock MainCLRec;
  Integer form;
  
  normalmode = 0;//Rs_normal
  DeselectWindow(wn,false);
  GetWindowRecord(wn,CLInr);
  BlockLoad(MainCLRec);  
  if (MainCLRec.CashCollection!=0) then begin
    if (CLInr.ColFlag!=0) then begin
      form = 1;
    end;
  end;  
  if ((WindowState(wn)==normalmode) and (previewf==false)) then begin 
    switch (form) begin
      case 0:
        RecordActionCashIn_Print(CLInr,"",true);//RecLAction(wn,rlCashInDPrint);
      case 1:
        RecordActionCashInCol_Print(CLInr,"",true);//RecLAction(wn,rlCashInDPrint);      
    end;  
  end else begin
    switch (form) begin
      case 0:
        if (PrintDocument(CLInr,"CLInForm",previewf)) then begin end;
      case 1:
        if (PrintDocument(CLInr,"CLInColForm",previewf)) then begin end;
    end;  
  end;
  res = true;
  CLInDClassPrint = res;
  RETURN;
END;

global
function Boolean CLInDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record CLInVc CLInr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,CLInr);
    if (CLInr.OKFlag!=0) then begin
      res = false;
    end;
    if (UserCanAction("UnOKAll",false)) then begin
      res = true;
    end; 
    if (UserCanAction("OKCashIn",true)==false) then begin
      res = false; 
    end;  
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,CLInr);
    if (CLInr.OKFlag!=0) then begin
      res = false;
    end else begin  
      if (UserCanAction("OKCashIn",true)==false) then begin
        res = false;
      end;  
    end;
  end;  
  CLInDClassOKFlagButtonAction = res;
  RETURN;
END;

global
function Boolean CLInDClassColFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record CLInVc CLInr;
  Integer normalmode,updatemode;
  /*
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,CLInr);
  end;  
  if (WindowState(wn)==normalmode) then begin
    GetPrevWindowRecord(wn,CLInr);
  end;  
  */
  res = false;
  CLInDClassColFlagButtonAction = res;
  RETURN;
END;

function Boolean CLInDClassTotalEFActive(Integer wn,Integer wnst,string fieldname)
begin
  Boolean res;
  record CLInVc CLInr;
  record CLInVc CLOut2r;
  
  res = true;
  GetWindowRecord(wn,CLInr);
  if (wnst==2) then begin//updatemode
    GetPrevWindowRecord(wn,CLOut2r);
    if (CLOut2r.OKFlag!=0) then begin
      res = false;
    end;
  end;
  if (CLInr.ColFlag!=0) then begin
    res = false;
  end;
  if (MatRowCnt(CLInr)>0) then begin
    res = false;
  end;
  CLInDClassTotalEFActive = res;
  return;
end;
 
global
function Boolean CLInDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer ef)
BEGIN
  Boolean res;
  record CLInVc CLIn2r;
  record CLInVc CLInr;
  row CLInVc CLInrw;
  record MainCLBlock MainCLRec;
  
  switch (fieldname) begin
    case "SerNr":
      res = true;
      BlockLoad(MainCLRec);
      if (wnst==2) then begin
        if (MainCLRec.ChronologyforCLNo!=0) then begin res = false; end;
        GetPrevWindowRecord(wn,CLIn2r);
        if (CLIn2r.OKFlag!=0) then begin res = false; end;
      end;    
    case "TransDate": 
      res = true;
      BlockLoad(MainCLRec);
      if (MainCLRec.ChronologyforCLNo!=0) then begin res = false; end;
      if (wnst==2) then begin//updatemode
        GetPrevWindowRecord(wn,CLIn2r);
        if (CLIn2r.OKFlag!=0) then begin res = false; end;
      end;
    case "Total": res = CLInDClassTotalEFActive(wn,wnst,"Total");
    case "NetVal": res = CLInDClassTotalEFActive(wn,wnst,"NetVal");
    case "VATVal": res = CLInDClassTotalEFActive(wn,wnst,"VATVal");
    otherwise
      res = true;
      if (wnst==2) then begin//updatemode
        GetPrevWindowRecord(wn,CLIn2r);
        if (CLIn2r.OKFlag!=0) then begin
          switch (fieldname) begin
            case "Comment": res = true; 
            otherwise res = false; 
          end;
          goto LCLInDClassActiveEditField;
        end;
      end;  
      GetWindowRecord(wn,CLInr);
      if (rownr>=0) then begin
        MatRowGet(CLInr,rownr,CLInrw);
        switch (CLInrw.stp) begin
          case 1:
            if ((fieldname=="Company") or (fieldname=="OrderNr")) then begin
              res = false; 
              if (CLInrw.Type==4) or (CLInrw.Type==5) then begin
                res = true;
              end;
            end;
          case 2:
            res = false; 
            if (fieldname=="Sum") then begin
              res = true;
            end;
        end;
      end;                
  end;
LCLInDClassActiveEditField:;  
  CLInDClassActiveEditField = res;
  RETURN;
END;
 
function Boolean CLInDClassTotalEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record CLInVc CLInr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLInr);
    CLInVc_PasteTotal(CLInr);
    PutWindowRecord(wn,CLInr);
  end;
  CLInDClassTotalEFAfter = true;
  return;
end;

 
function Boolean CLInDClassVATCodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record CLInVc CLInr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLInr);
    CLInVc_PasteVATCode(CLInr);
    PutWindowRecord(wn,CLInr);
  end;
  CLInDClassVATCodeEFAfter = true;
  return;
end;
 
function Boolean CLInDClassNetValEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record CLInVc CLInr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLInr);
    CLInVc_PasteNetVal(CLInr);
    PutWindowRecord(wn,CLInr);
  end;
  CLInDClassNetValEFAfter = true;
  return;
end;

function Boolean CLInDClassPersonEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record CLInVc CLInr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLInr);
    CLInVc_PastePerson(CLInr,WindowState(wn),WindEFstr(wn));
    PutWindowRecord(wn,CLInr);
  end;
  CLInDClassPersonEFAfter = true;
  return;
end;

function Boolean CLInDClassCurncyCodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record CLInVc CLInr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLInr);
    CLInVc_PasteCurncyCode(CLInr);
    PutWindowRecord(wn,CLInr);
  end;
  CLInDClassCurncyCodeEFAfter = true;
  return;
end;

function Boolean CLInDClassPayModeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record CLInVc CLInr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLInr);
    CLInVc_PastePayMode(CLInr);
    PutWindowRecord(wn,CLInr);
  end;
  CLInDClassPayModeEFAfter = true;
  return;
end;

function Boolean CLInDClassTransDateEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record CLInVc CLInr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLInr);
    CLInVc_PasteTransDate(CLInr);
    PutWindowRecord(wn,CLInr);
  end;
  CLInDClassTransDateEFAfter = true;
  return;
end;

function Boolean CLInDClassCorspCodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record CLInVc CLInr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLInr);
    CLInVc_PasteCorspCode(CLInr,rownr);
    PutWindowRecord(wn,CLInr);
  end;
  CLInDClassCorspCodeEFAfter = true;
  return;
end;

function Boolean CLInDClassCUCodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record CLInVc CLInr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLInr);
    CLInVc_PasteCUCode(CLInr,WindEFstr(wn),true);
    PutWindowRecord(wn,CLInr);
  end;
  CLInDClassCUCodeEFAfter = true;
  return;
end;

function Boolean CLInDClassCompanyEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record CLInVc CLInr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLInr);
    CLInVc_PasteCompany(CLInr,rownr,true);
    PutWindowRecord(wn,CLInr);
  end;
  CLInDClassCompanyEFAfter = true;
  return;
end;

function Boolean CLInDClassTransNrEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record CLInVc CLInr;
  row CLInVc CLInrw;
  Integer err;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLInr);
    err = CLInVc_PasteTransNr(CLInr,rownr);
    switch (err) begin
      case 0: PutWindowRecord(wn,CLInr);
      case 1: MessageBox(1217,"");
      case 2: MessageBox(1218,"");
    end;
  end;
  CLInDClassTransNrEFAfter = true;
  return;
end;

function Boolean CLInDClassTransOfficialSerNrEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record CLInVc CLInr;
  row CLInVc CLInrw;
  Integer err;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLInr);
    err = CLInVc_PasteTransOfficialSerNr(CLInr,rownr);
    switch (err) begin
      case 0: PutWindowRecord(wn,CLInr);
      case 1: MessageBox(1217,"");
      case 2: MessageBox(1218,"");
    end;
  end;
  CLInDClassTransOfficialSerNrEFAfter = true;
  return;
end;

function Boolean CLInDClassOrderNrEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record CLInVc CLInr;
  row CLInVc CLInrw;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLInr);
    MatRowGet(CLInr,rownr,CLInrw);
    CLInrw.TransNr = CLInrw.OrderNr;  
    MatRowPut(CLInr,rownr,CLInrw);
    if (CLInVc_PasteOrderNr(CLInr,rownr)==0) then begin end;
    PutWindowRecord(wn,CLInr);
  end;
  CLInDClassOrderNrEFAfter = true;
  return;
end;

function Boolean CLInDClassTypeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record CLInVc CLInr;
  row CLInVc CLInrw;
  Integer typ;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLInr);
    MatRowGet(CLInr,rownr,CLInrw);
    typ = CLInrw.Type;
    ClearRow(CLInr,CLInrw,1);
    CLInrw.Type = typ;
    MatRowPut(CLInr,rownr,CLInrw);
    PutWindowRecord(wn,CLInr);
  end;
  CLInDClassTypeEFAfter = true;
  return;
end;

function Boolean CLInDClassSumEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record CLInVc CLInr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLInr);
    CLInSumup(CLInr);
    PutWindowRecord(wn,CLInr);
  end;
  CLInDClassSumEFAfter = true;
  return;
end;


global
function Boolean CLInDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "NetVal": res = CLInDClassNetValEFAfter(wn,rownr,changed);
    case "VATCode": res = CLInDClassVATCodeEFAfter(wn,rownr,changed);
    case "Total": res = CLInDClassTotalEFAfter(wn,rownr,changed);
    case "Person": res = CLInDClassPersonEFAfter(wn,rownr,changed);
    case "CurncyCode": res = CLInDClassCurncyCodeEFAfter(wn,rownr,changed);
    case "PayMode": res = CLInDClassPayModeEFAfter(wn,rownr,changed);
    case "TransDate": res = CLInDClassTransDateEFAfter(wn,rownr,changed);
    case "CorspCode": res = CLInDClassCorspCodeEFAfter(wn,rownr,changed);
    case "CUCode": res = CLInDClassCUCodeEFAfter(wn,rownr,changed);
    case "TransNr": res = CLInDClassTransNrEFAfter(wn,rownr,changed);
    case "TransOfficialSerNr": res = CLInDClassTransOfficialSerNrEFAfter(wn,rownr,changed);
    case "Sum": res = CLInDClassSumEFAfter(wn,rownr,changed);
    case "Company": res = CLInDClassCompanyEFAfter(wn,rownr,changed);
    case "OrderNr": res = CLInDClassOrderNrEFAfter(wn,rownr,changed);
    case "Type": res = CLInDClassTypeEFAfter(wn,rownr,changed);
  end;
  CLInDClassAfterEditField = res;
  RETURN;
END;

global
procedure PrintCLInL(Integer wn,Boolean previewf)
BEGIN
  record CLInVc CLInr;
  Integer i;
  
  StartPrintDialogGroup;
  i = 1;
  while (GetRecordFromBrowse(CLInr,wn,i)) begin
    RecordActionCashIn_Print(CLInr,previewf,true);
    i = i + 1;
  end;
  EndPrintDialogGroup;
  RETURN;
END;

procedure CLInDClassSpecPasteNameSerNr(Integer wn,var string psname)
BEGIN
  record CLInVc CLInr;
  row CLInVc CLInrw;
  Integer rownr;

  GetWindowRecord(wn,CLInr);
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    MatRowGet(CLInr,rownr,CLInrw);
  end;
  switch (CLInrw.Type) begin
    case 1: psname = "ARSClass";
    case 2: psname = "APSClass";
    case 4: psname = "ORSClass";
    case 5: psname = "OPPSClass";
    case 6: psname = "RegCheckSClass";
    otherwise psname = "";
  end;
  RETURN;
END;

procedure CLInDClassSpecPasteNameOrderNr(Integer wn,var string psname)
BEGIN
  record CLInVc CLInr;
  row CLInVc CLInrw;
  Integer rownr;

  GetWindowRecord(wn,CLInr);
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    MatRowGet(CLInr,rownr,CLInrw);
  end;
  switch (CLInrw.Type) begin
    case 4: psname = "OpenORSClass";
    case 5: psname = "POSClass";
    otherwise psname = "";
  end;
  RETURN;
END;

procedure CLInDClassSpecPasteNameCompany(Integer wn,var string psname)
BEGIN
  record CLInVc CLInr;
  row CLInVc CLInrw;
  Integer rownr;

  GetWindowRecord(wn,CLInr);
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    MatRowGet(CLInr,rownr,CLInrw);
  end;
  switch (CLInrw.Type) begin
    case 4: psname = "CUSClass";
    otherwise psname = "";
  end;
  RETURN;
END;

procedure CLInDClassSpecPasteNameObjects(Integer wn,var string psname)
BEGIN
  record CLInVc CLInr;
  Integer rownr;
  string 200 typ;
  row PMBlock PMrw;

  GetWindowRecord(wn,CLInr);
  rownr = WindowActiveRow(wn);
  typ="";
  if (rownr>=0) then begin
    if (GetPMRow(CLInr.PayMode,PMrw)) then begin end;
    FindOTforAcc(PMrw.AccNr,typ);
  end;
  if (nonblank(typ)) then begin
    psname = "TRObjSClass";
  end else begin    
    psname = ObjSClassPasteSpecialWindowClass("ObjSClass");
  end;
  RETURN;
END;

global
function string 40 CLInDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "TransNr": CLInDClassSpecPasteNameSerNr(wn,psname);
    case "Company": CLInDClassSpecPasteNameCompany(wn,psname);
    case "Objects": CLInDClassSpecPasteNameObjects(wn,psname);
    case "OrderNr": CLInDClassSpecPasteNameOrderNr(wn,psname);
  end;
  CLInDClassSpecPasteName = psname;
  return;
end;

global 
function Boolean CLInDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record CLInVc CLInr;
  Boolean res;

  res = true;
  if (WindowState(wn)==2) then begin//Rs_update
    GetPrevWindowRecord(wn,CLInr);    
    if (CLInr.OKFlag!=0) then begin res = false; end;
  end;
LCLInDClassDeleteRowTest:;  
  CLInDClassDeleteRowTest = res;
  return;
end;

global 
function Boolean CLInDClassInsertRowTest(Integer wn,Integer rownr)
begin
  record CLInVc CLInr;
  Boolean res;

  res = true;
  if (WindowState(wn)==2) then begin//Rs_update
    GetPrevWindowRecord(wn,CLInr);    
    if (CLInr.OKFlag!=0) then begin res = false; end;
  end;
LCLInDClassInsertRowTest:;  
  CLInDClassInsertRowTest = res;
  return;
end;

global
function Boolean CLInDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record CLInVc CLInr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,CLInr);    
    CLInSumup(CLInr);
    PutWindowRecord(wn,CLInr);    
  end;
  CLInDClassOnOverStrike = true;
  RETURN;
END;

global
function Boolean CLInDClassOpenRecord(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record CLInVc CLInr;
  row CLInVc CLInrw;
  Integer nwn,cht;
  string 255 tstr,thepm;
  record CUVc CUr;
  record VIVc VIr;
  
  switch (fieldname) begin
    case "Company":
      GetWindowRecord(wn,CLInr);  
      MatRowGet(CLInr,rownr,CLInrw);
      CUr.Code = CLInrw.Company;
      if (ReadFirstMain(CUr,1,true)) then begin
        nwn = OpenWindow("CUDClass",0,0,"","",CUr);    
      end;
  end;
  CLInDClassOpenRecord = res;
  return;
end;
