external procedure RoundRowSum(string,string,string,var val);
external function roundmode DefaultRoundMode();
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
remote function Boolean DateLocked(Date,string);
remote function Boolean DateWarned(Date,string);

 
function Boolean IntIVDClassArtCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin  
  record IntIVVc IntIVr;
  row IntIVVc IntIVrw;
  record INVc INr;
  record AccBlock ARAcc;
  
  if (changedf) then begin
    GetWindowRecord(wn,IntIVr);
    DeselectWindow(wn,false);
    MatRowGet(IntIVr,rownr,IntIVrw);
    INr.Code = IntIVrw.ArtCode;
    if (ReadFirstMain(INr,1,true)) then begin
    end;
    IntIVrw.Spec = INr.Name;
    IntIVrw.Price = INr.UPrice1;
    IntIVrw.VATCode = INr.VATCode;
    BlockLoad(ARAcc);
    IntIVrw.SalesAcc = ARAcc.IntDomSalesAcc;    
    MatRowPut(IntIVr,rownr,IntIVrw);
    PutWindowRecord(wn,IntIVr);
  end;
  IntIVDClassArtCodeEFAfter = true;
  return;
end;

procedure IntIVDchsum(record IntIVVc IntIVr,Integer rownr)
begin
  row IntIVVc IntIVrw;
  
  if (rownr>=0) then begin
    MatRowGet(IntIVr,rownr,IntIVrw);
    IntIVrw.Sum = IntIVrw.Quant*IntIVrw.Price;
//    IntIVrw.Sum = Round(IntIVrw.Sum,DefaultRoundMode);
    RoundRowSum("","","IntIVVc",IntIVrw.Sum);
    MatRowPut(IntIVr,rownr,IntIVrw);
  end;
  return;
end;

global  
procedure IntIVSumup(record IntIVVc IntIVr)
begin
  row IntIVVc IntIVrw;
  Integer i,rwcnt,vatcnt;
  record SMVc SMr;/*VATBaseRowType*/
  val s1,s2,s3,s4,taxsum;
  Integer rndtotal,roundvat;
  LongInt roundlines;
  
  SetupVATBase(SMr,vatcnt);
  rwcnt = MatRowCnt(IntIVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IntIVr,i,IntIVrw);
    s1 = s1 + IntIVrw.Sum;
    s4 = s4 + IntIVrw.Sum;
    AddVATBase(SMr,IntIVrw.VATCode,IntIVrw.Sum,blankval,vatcnt,0,0);
  end;
  CalcVATBaseVAT(SMr,0,0,vatcnt,s3,taxsum);  //  CalcVATBaseVAT(SMr,IVp.InclVAT,vatcnt,s3,taxsum);    
  IntIVr.Sum1 = Round(s1,DefaultRoundMode);
  IntIVr.Sum2 = Round(s2,DefaultRoundMode);
  IntIVr.Sum3 = Round(s3,DefaultRoundMode);
  IntIVr.Sum4 = Round(s4+s3,DefaultRoundMode);
  return;
end;
  
function Boolean IntIVDClassQuantEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin  
  record IntIVVc IntIVr;

  if (changedf) then begin  
    GetWindowRecord(wn,IntIVr);
    DeselectWindow(wn,false);
    IntIVDchsum(IntIVr,rownr);
    IntIVSumup(IntIVr);
    PutWindowRecord(wn,IntIVr);
  end;
  IntIVDClassQuantEFAfter = true;
  return;
end;

function Boolean IntIVDClassVATCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin  
  record IntIVVc IntIVr;

  if (changedf) then begin  
    GetWindowRecord(wn,IntIVr);
    DeselectWindow(wn,false);
    IntIVDchsum(IntIVr,rownr);
    IntIVSumup(IntIVr);
    PutWindowRecord(wn,IntIVr);
  end;
  IntIVDClassVATCodeEFAfter = true;
  return;
end;

function Boolean IntIVDClassPriceEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin  
  record IntIVVc IntIVr;

  if (changedf) then begin  
    GetWindowRecord(wn,IntIVr);
    DeselectWindow(wn,false);
    IntIVDchsum(IntIVr,rownr);
    IntIVSumup(IntIVr);
    PutWindowRecord(wn,IntIVr);
  end;
  IntIVDClassPriceEFAfter = true;
  return;
end;

function Boolean IntIVDClassSumEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin  
  record IntIVVc IntIVr;
  row IntIVVc IntIVrw;

  if (changedf) then begin  
    GetWindowRecord(wn,IntIVr);
    DeselectWindow(wn,false);
    MatRowGet(IntIVr,rownr,IntIVrw);
    IntIVrw.Price = IntIVrw.Sum/IntIVrw.Quant;
    MatRowPut(IntIVr,rownr,IntIVrw);
    IntIVDchsum(IntIVr,rownr);
    IntIVSumup(IntIVr);
    PutWindowRecord(wn,IntIVr);
  end;
  IntIVDClassSumEFAfter = true;
  return;
end;

function Boolean IntIVDClassSalesManEFAfter(Integer wn,Boolean changedf)
begin  
  record IntIVVc IntIVr;
  record UserVc Userr;
  string 255 efstr,tstr;

  if (changedf) then begin  
    GetWindowRecord(wn,IntIVr);
    DeselectWindow(wn,false);
    Userr.Code = IntIVr.SalesMan;
    if (ReadFirstMain(Userr,1,true)) then begin
      IntIVr.SalesGroup = Userr.SalesGroup;
      IntIVr.Name = Userr.Name;
    end;
    PutWindowRecord(wn,IntIVr);
  end;
  IntIVDClassSalesManEFAfter = true;
  return;
end;

function Boolean IntIVDClassTransDateEFAfter(Integer wn,Boolean changedf)
begin
  record IntIVVc IntIVr;
  
  if (changedf) then begin
    GetWindowRecord(wn,IntIVr);
    if (DateLocked(IntIVr.TransDate,"IntIVVc")) then begin
      MessageBox(1046,"");
    end else begin
      if (DateWarned(IntIVr.TransDate,"IntIVVc")) then begin
        MessageBox(1045,"");
      end;
    end;
  end;
  
  IntIVDClassTransDateEFAfter = true;
end;

global
function Boolean IntIVDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "Price": res = IntIVDClassPriceEFAfter(wn,rownr,changed!=0);
    case "Quant": res = IntIVDClassQuantEFAfter(wn,rownr,changed!=0);
    case "Sum": res = IntIVDClassSumEFAfter(wn,rownr,changed!=0);
    case "ArtCode": res = IntIVDClassArtCodeEFAfter(wn,rownr,changed!=0);
    case "VATCode": res = IntIVDClassVATCodeEFAfter(wn,rownr,changed!=0);
    case "SalesMan": res = IntIVDClassSalesManEFAfter(wn,changed!=0);
    case "TransDate": res = IntIVDClassTransDateEFAfter(wn,changed!=0);
  end;
  IntIVDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean IntIVDClassPrint(Integer wn,Boolean previewf)
BEGIN
  record IntIVVc IntIVr;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,IntIVr); 
  if (PrintDocument(IntIVr,"IntIVForm",previewf)) then begin end;
  IntIVDClassPrint = true;
  RETURN;
END;

global
function Boolean IntIVDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record IntIVVc IntIVr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,IntIVr);
    if (IntIVr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,IntIVr);
    if (IntIVr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  IntIVDClassOKFlagButtonAction = res;
  RETURN;
END;

global
function Boolean IntIVDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record IntIVVc IntIVr;
  
  GetWindowRecord(wn,IntIVr);
  switch (wnst) begin
    case Rs_insert:
      res = true;
    otherwise
      res = true;
      if (IntIVr.OKFlag!=0) then begin
        res = false;
      end;
  end;
  switch (fieldname) begin
    case "Comment": res = true;
  end;
  IntIVDClassActiveEditField = res;
  RETURN;
END;

global
function Boolean IntIVDClassOnOverStrike(Integer wn,Integer rownr)
begin
  record IntIVVc IntIVr;
  
  if (rownr>=0) then begin
    GetWindowRecord(wn,IntIVr);    
    IntIVSumup(IntIVr);
    PutWindowRecord(wn,IntIVr);    
  end;
  
  IntIVDClassOnOverStrike = true;
end;

global
function Boolean IntIVDClassExportFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record IntIVVc IntIVr;

  res = true;
  GetWindowRecord(wn,IntIVr);  
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,IntIVr);
    if (IntIVr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,IntIVr);
    if (IntIVr.OKFlag!=0) then begin
      res = false;
    end;
  end;    
  IntIVDClassExportFlagButtonAction = res;
  return;
end;
