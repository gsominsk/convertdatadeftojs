external procedure WarnFutureDate(Boolean,Date);
remote function Boolean PasteCust2InOffHire(var record OffHireVc,Boolean,var string);
remote function Boolean OffHireVc_PasteArtCode(var record OffHireVc,Integer,var string);
remote function Boolean OffHireVc_PasteSerialNr(var record OffHireVc,Integer);
remote procedure NewRentalCharge(Integer,var record RentChrgVc,Date,LongInt,LongInt,var string,string);
external procedure OffHireSumUp(var record OffHireVc);

global
procedure OffHireSumUp(var record OffHireVc Offhr)
begin
  row OffHireVc Offhrw;
  Integer i,rwcnt;
  
  Offhr.SumQuant = BlankVal;
  rwcnt = MatRowCnt(Offhr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Offhr,i,Offhrw);
    Offhr.SumQuant = Offhr.SumQuant + Offhrw.Quant;
  end;
  if (Offhr.SumQuant==0) then begin
    Offhr.SumQuant = BlankVal;
  end;
  return;
end;

global 
function Boolean OffHireDClassArtCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record OffHireVc Offhr;
  row OffHireVc Offhrw;
  string 255 inwarning;
 
  GetWindowRecord(wn,Offhr);
  MatRowGet(Offhr,rownr,Offhrw);
  if ((changedf!=0) or ((blank(Offhrw.Spec)) and (nonblank(Offhrw.ArtCode)))) then begin
    GetWindowRecord(wn,Offhr);
    DeselectWindow(wn,false);
    if (OffHireVc_PasteArtCode(Offhr,rownr,inwarning)) then begin
      OffHireSumUp(Offhr);
      PutWindowRecord(wn,Offhr);
      if (nonblank(inwarning)) then begin
          MessageBox(0,inwarning);
      end;
    end else begin
      Beep;
    end;
  end;
  OffHireDClassArtCodeEFAfter = true;
  return;
end;

global 
function Boolean OffHireDClassTransDateEFAfter(Integer wn,Boolean changedf)
begin
  record OffHireVc Offhr;
  row OffHireVc Offhrw;
  string 255 inwarning;
 
  if (changedf) then begin
    GetWindowRecord(wn,Offhr);
    WarnFutureDate(true,Offhr.TransDate);
  end;
  OffHireDClassTransDateEFAfter = true;
  return;
end;

global 
function Boolean OffHireDClassSerialNrEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record OffHireVc Offhr;
  row OffHireVc Offhrw;
 
  GetWindowRecord(wn,Offhr);
  MatRowGet(Offhr,rownr,Offhrw);
  if ((changedf!=0) or ((blank(Offhrw.Spec)) and (nonblank(Offhrw.ArtCode)))) then begin
    GetWindowRecord(wn,Offhr);
    DeselectWindow(wn,false);
    if (OffHireVc_PasteSerialNr(Offhr,rownr)) then begin
      OffHireSumUp(Offhr);
      PutWindowRecord(wn,Offhr);
    end else begin
      Beep;
    end;
  end;
  OffHireDClassSerialNrEFAfter = true;
  return;
end;

function Boolean OffHireDClassReturnedQtyEFAfter(integer wn,integer fn,integer rownr,integer changed)
begin
  record OffHireVc Offhr;
  row OffHireVc Offhrw;

  GetWindowRecord(wn,Offhr);
  MatRowGet(Offhr,rownr,Offhrw);
  if (changed!=0) then begin
    DeselectWindow(wn,false);
    Offhrw.Quant = Offhrw.ReturnedQty + Offhrw.ServiceQty + Offhrw.SoldQty + Offhrw.MissingQty + Offhrw.ScrapedQty;
    Offhrw.Status = 7;
    MatRowPut(Offhr,rownr,Offhrw);
    OffHireSumUp(Offhr);
    PutWindowRecord(wn,Offhr);
  end;
  OffHireDClassReturnedQtyEFAfter = true;
  return;
end;

function Boolean OffHireDClassServiceQtyEFAfter(integer wn,integer fn,integer rownr,integer changed)
begin
  record OffHireVc Offhr;
  row OffHireVc Offhrw;
  
  GetWindowRecord(wn,Offhr);
  MatRowGet(Offhr,rownr,Offhrw);
  if (changed!=0) then begin
    DeselectWindow(wn,false);
    Offhrw.ReturnedQty = Offhrw.Quant - (Offhrw.ServiceQty + Offhrw.SoldQty + Offhrw.MissingQty + Offhrw.ScrapedQty) ;
    Offhrw.Status = 7;
    MatRowPut(Offhr,rownr,Offhrw);
    OffHireSumUp(Offhr);
    PutWindowRecord(wn,Offhr);
  end;
  OffHireDClassServiceQtyEFAfter = true;
  return;
end;

function Boolean OffHireDClassSoldQtyEFAfter(integer wn,integer fn,integer rownr,integer changed)
begin
  record OffHireVc Offhr;
  row OffHireVc Offhrw;
  
    GetWindowRecord(wn,Offhr);
  MatRowGet(Offhr,rownr,Offhrw);
  if (changed!=0) then begin
    DeselectWindow(wn,false);
    Offhrw.ReturnedQty = Offhrw.Quant - (Offhrw.ServiceQty + Offhrw.SoldQty + Offhrw.MissingQty + Offhrw.ScrapedQty) ;
    Offhrw.Status = 7;
    MatRowPut(Offhr,rownr,Offhrw);
    OffHireSumUp(Offhr);
    PutWindowRecord(wn,Offhr);
  end;
  OffHireDClassSoldQtyEFAfter = true;
  return;
end;

function Boolean OffHireDClassMissingQtyEFAfter(integer wn,integer fn,integer rownr,integer changed)
begin
  record OffHireVc Offhr;
  row OffHireVc Offhrw;
  
  GetWindowRecord(wn,Offhr);
  MatRowGet(Offhr,rownr,Offhrw);
  if (changed!=0) then begin
    DeselectWindow(wn,false);
    Offhrw.ReturnedQty = Offhrw.Quant - (Offhrw.ServiceQty + Offhrw.SoldQty + Offhrw.MissingQty + Offhrw.ScrapedQty) ;
    Offhrw.Status = 7;
    MatRowPut(Offhr,rownr,Offhrw);
    OffHireSumUp(Offhr);
    PutWindowRecord(wn,Offhr);
  end;
  OffHireDClassMissingQtyEFAfter = true;
  return;
end;

function Boolean OffHireDClassScrapedQtyEFAfter(integer wn,integer fn,integer rownr,integer changed)
begin
  record OffHireVc Offhr;
  row OffHireVc Offhrw;
  
  GetWindowRecord(wn,Offhr);
  MatRowGet(Offhr,rownr,Offhrw);
  if (changed!=0) then begin
    DeselectWindow(wn,false);
    Offhrw.ReturnedQty = Offhrw.Quant - (Offhrw.ServiceQty + Offhrw.SoldQty + Offhrw.MissingQty + Offhrw.ScrapedQty) ;
    Offhrw.Status = 7;
    MatRowPut(Offhr,rownr,Offhrw);
    OffHireSumUp(Offhr);
    PutWindowRecord(wn,Offhr);
  end;
  OffHireDClassScrapedQtyEFAfter = true;
  return;
end;

global 
function Boolean OffHireDClassQuantEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record OffHireVc Offhr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,Offhr);
    DeselectWindow(wn,false);
    OffHireSumUp(Offhr);
    PutWindowRecord(wn,Offhr);
  end;
  OffHireDClassQuantEFAfter = true;
  return;
end;

function Boolean OffHireDClassCustCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record OffHireVc Offhr;
  string 255 warning;

  GetWindowRecord(wn,Offhr);    
  if ((changed!=0) or ((blank(Offhr.Addr0)) and (nonblank(Offhr.CustCode)))) then begin
    GetWindowRecord(wn,Offhr);    
    DeselectWindow(wn,false);
    if (PasteCust2InOffHire(Offhr,true,warning)) then begin
      PutWindowRecord(wn,Offhr);
      if (nonblank(warning)) then begin
        MessageBox(0,warning);
      end;
    end else begin
      Beep;
    end;
  end;
  OffHireDClassCustCodeEFAfter = true;
  return;
end;

global
function Boolean OffHireDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "Quant": res = OffHireDClassQuantEFAfter(wn,fn,rownr,changed);
    case "ArtCode": res = OffHireDClassArtCodeEFAfter(wn,fn,rownr,changed);
    case "SerialNr": res = OffHireDClassSerialNrEFAfter(wn,fn,rownr,changed);
    case "CustCode": res = OffHireDClassCustCodeEFAfter(wn,fn,rownr,changed);
    case "ReturnedQty": res = OffHireDClassReturnedQtyEFAfter(wn,fn,rownr,changed);
    case "ServiceQty": res = OffHireDClassServiceQtyEFAfter(wn,fn,rownr,changed);
    case "SoldQty": res = OffHireDClassSoldQtyEFAfter(wn,fn,rownr,changed);
    case "MissingQty": res = OffHireDClassMissingQtyEFAfter(wn,fn,rownr,changed);
    case "ScrapedQty": res = OffHireDClassScrapedQtyEFAfter(wn,fn,rownr,changed);
    case "TransDate": res = OffHireDClassTransDateEFAfter(wn,changed!=0);
  end;
  OffHireDClassAfterEditField = res;
  RETURN;
END;

global
procedure OffHireChargeDsm()
BEGIN
  record OffHireVc OffHirer;
  record RentChrgVc RentChrgr;
  string 255 warn;
  Integer wn;
  Integer nwn;
  
  wn = CurWindow;
  GetWindowRecord(wn,OffHirer);
  if (OffHirer.AgreementNr>0) then begin
    NewRentalCharge(3,RentChrgr,CurrentDate,OffHirer.SerNr,OffHirer.AgreementNr,warn,OffHirer.Site);
    nwn = OpenWindow("RentChrgDClass",1,0,"","",RentChrgr);
  end;
  RETURN;
END;

global
function Boolean OffHireVcEFActiveCheck(string fieldname,Integer wn,Integer wnst,Integer rownr)
BEGIN
  Boolean res;
  record OffHireVc OffHirer;
  Integer updatemode;

  updatemode = 2;//Rs_update
  res = true;
  if (wnst==updatemode) then begin
    GetWindowRecord(wn,OffHirer);
    if (OffHirer.OKFlag==1) then begin
      res = false;
    end;
    if (rownr<0) then begin
    switch (fieldname) begin
      case "Comment":
        res = true;
      case "LangCode":
        res = true;
      case "ClientContact":
        res = true;
    end;
    end;
  end;
  OffHireVcEFActiveCheck = res;
  RETURN;
END;

global
function Boolean OffHireDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer ef)
BEGIN
  Boolean res;
  
  res = OffHireVcEFActiveCheck(fieldname,wn,wnst,rownr);
  OffHireDClassActiveEditField = res;
  return;
end;

