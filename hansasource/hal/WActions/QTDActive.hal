remote function Integer QTApprovalStatus(record QTVc,var record AcceptanceRulesVc);
remote function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean  AllowCurChange(string,Boolean);
external function Boolean UserCanChangePendingRecord(Integer);

function Boolean QTApprovalStarted(record QTVc QTr)
begin
  Boolean res;
  record AcceptanceRulesVc Acptr;

  res = false;
  if (QTApprovalStatus(QTr,Acptr)>=kAcceptanceStatePending) then begin
    res = true;
  end;
  QTApprovalStarted = res;
  return;
end;


global
function Boolean QTDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record QTVc QTr;
  row QTVc QTrw;
  record INVc INr;
  Integer nwn;
  
  res = true;
  nwn = FindWindow("SelectApproverWClass");
  if (nwn>0) then begin
    if (MotherWindow(nwn)==wn) then begin
      res = false;
      goto LQTDClassActiveEditField;
    end;
  end;
  switch (wnst) begin
    case Rs_insert:
      GetWindowRecord(wn,QTr);
      if (QTr.Closed!=0) then begin
        res = false;
        goto LQTDClassActiveEditField;
      end;
      if (QTr.Rejected!=0) then begin
        res = false;
        goto LQTDClassActiveEditField;
      end;
    case Rs_update:
      GetPrevWindowRecord(wn,QTr);
      if (QTr.Closed!=0) then begin
        res = false;
      end;
      if (QTr.Rejected!=0) then begin
        res = false;
        goto LQTDClassActiveEditField;
      end;
  end;
  
  GetWindowRecord(wn,QTr);
  if (QTApprovalStarted(QTr) and UserCanChangePendingRecord(rownr)==false) then begin
    res = false;
    goto LQTDClassActiveEditField;
  end;
  
  if (blank(QTr.ProformaOfficialSerNr)) then begin
    switch (fieldname) begin
      case "rowGP": res = false;
      case "Invoiced": res = false;
      case "InvDate": res = false;
      case "Invd": res = false;
      case "RvrsVATCode": res = false;
      case "SerNr": 
        if (wnst!=Rs_insert) then begin//insertmode
          res = false;
        end;
        if (UserCanAction("AllowQTSerNrChange",true)==false) then begin res = false; end;
      case "FrRate": 
        res = AllowCurChange(QTr.CurncyCode,false);
      case "ToRateB1": 
        res = AllowCurChange(QTr.CurncyCode,false);
      case "ToRateB2": 
        res = AllowCurChange(QTr.CurncyCode,false);
      case "BaseRate1": 
        res = AllowCurChange(QTr.CurncyCode,true);
      case "BaseRate2": 
        res = AllowCurChange(QTr.CurncyCode,true);
      case "PriceList": 
        res = UserCanAction("ChangePrices",true);
      case "Price": 
        res = UserCanAction("ChangeUnitPrices",true);
      case "vRebate": 
        res = UserCanAction("ChangeUnitPrices",true);
      case "Spec": 
        if (HasLocalization("PRT")) then begin
          MatRowGet(QTr,rownr,QTrw);
          if (nonblank(QTrw.ArtCode)) then begin
            res = false;
          end;
        end else begin
          if (UserCanAction("ChangeQTItemSpec",true)==false) then begin res = false; end;
        end;
      case "BranchID": 
        res = UserCanAction("AllowQTBranchIDChange",false);
      case "Sum": 
        res = UserCanAction("ChangeUnitPrices",true);      
      case "MotherArtCode": res = false;
      case "RecipeQuant": res = false;
      case "Recepy": res = false;
      case "VATNr": res = HasLocalization("PRT")==false;
      case "Addr0": res = HasLocalization("PRT")==false;
      case "Addr1": res = HasLocalization("PRT")==false;
      case "Addr2": res = HasLocalization("PRT")==false;
      case "Addr3": res = HasLocalization("PRT")==false;
      case "InvAddr3": res = HasLocalization("PRT")==false;
      case "InvAddr4": res = HasLocalization("PRT")==false;
      case "InvCountry": res = HasLocalization("PRT")==false;

      case "ArtCode": 
        MatRowGet(QTr,rownr,QTrw);
        switch (QTrw.stp) begin
          case kInvoiceRowTypeStructuredItemComponent:
            res = false;
        end;
      case "Quant": 
        MatRowGet(QTr,rownr,QTrw);
        switch (QTrw.stp) begin
          case kInvoiceRowTypeStructuredItemComponent:
            res = false;
        end;
    end;
  end else begin
    res = false;
    switch (fieldname) begin
      case "QuoteClass": res = true;
      case "Priority": res = true;
      case "MakeContactDate": res = true;
      case "RejectDate": res = true;
      case "Probability": res = true;
    end;
  end;
LQTDClassActiveEditField:;  
  QTDClassActiveEditField = res;
  RETURN;
END;

global 
function Boolean QTDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record QTVc QTr;
  row QTVc QTrw;
  Boolean res,puf;
  record INVc INr;
  Integer i,rwcnt;

  res = true;
  if (rownr>-1) then begin
    GetWindowRecord(wn,QTr);
    MatRowGet(QTr,rownr,QTrw);
    if (QTrw.Invoiced>0) then begin
      res = false;
      MessageBox(1092,"");
      goto LQTDClassDeleteRowTest;
    end;
  end;
  switch (WindowState(wn)) begin
    case Rs_update:
      GetPrevWindowRecord(wn,QTr);    
    case Rs_insert:
      GetWindowRecord(wn,QTr);    
    case Rs_normal:
      GetWindowRecord(wn,QTr);    
  end;
  if (QTr.Rejected!=0) then begin
    res = false;
  end;
  if (QTApprovalStarted(QTr) and UserCanAction("ChangeRecordMatrixWhenPending",false)==false) then begin
    res = false;
  end;
  if (res) then begin
    MatRowGet(QTr,rownr,QTrw);
    switch (QTrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        res = false;
    end;
  end;
  if (res) then begin
    GetWindowRecord(wn,QTr);    
    MatRowGet(QTr,rownr,QTrw);
    if (QTrw.Quant!=0) then begin
      if (ReadFirstItem(QTrw.ArtCode,INr,false,false)) then begin
        if (INr.ItemType==kItemTypeStructured) then begin
          if (INr.ExplodeRec!=0) then begin
            rwcnt = MatRowCnt(QTr);
            i = rownr + 1;
            while (i<rwcnt) begin
              MatRowGet(QTr,i,QTrw); 
              if (QTrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
                MatRowDelete(QTr,i);
                puf = true;
              end else begin
                i = rwcnt;
              end;
            end;
          end;
        end;
      end;
    end;
    if (puf) then begin
      PutWindowRecord(wn,QTr);    
    end;
  end;
LQTDClassDeleteRowTest:;  
  QTDClassDeleteRowTest = res;
  return;
end;

/*
global 
function Boolean QTDClassInsertRowTest(Integer wn,Integer rownr)
begin
  Boolean res;
  record QTVc QTr;
  
  res = true;
  switch (WindowState(wn)) begin
    case Rs_update:
      GetPrevWindowRecord(wn,QTr);    
    case Rs_insert:
      GetWindowRecord(wn,QTr);    
    case Rs_normal:
      GetWindowRecord(wn,QTr);    
  end;
  if (QTr.Rejected==1) then begin
    res = false;
  end;
  QTDClassInsertRowTest = res;
  return;
end;
*/
global 
function Boolean QTDClassInsertRowTest(Integer wn,Integer rownr)
begin
  Boolean res;
  record QTVc QTr;
  row QTVc QTrw;
  
  res = true;
  switch (WindowState(wn)) begin
    case Rs_update:
      GetPrevWindowRecord(wn,QTr);    
    case Rs_insert:
      GetWindowRecord(wn,QTr);    
    case Rs_normal:
      GetWindowRecord(wn,QTr);    
  end;
  if (QTr.Rejected==1) then begin
    res = false;
  end;
  if (QTApprovalStarted(QTr) and UserCanAction("ChangeRecordMatrixWhenPending",false)==false) then begin
    res = false;
  end;
  if (res) then begin
    MatRowGet(QTr,rownr,QTrw);
    switch (QTrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        res = false;
    end;
  end;
  QTDClassInsertRowTest = res;
  return;
end;

global
function Boolean QTDClassExportFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
//vat zone should be as it is on customer card
//otherwise u can paste customer  , filled all, change vat zone and get crap
  res = false;
  QTDClassExportFlagButtonAction = res;
  RETURN;
END;
