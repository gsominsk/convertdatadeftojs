external function Integer OpenArtStat(Integer,record RcVc,Boolean);
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external procedure CalcPrice(val,val,val,var val,Integer);
external procedure SetupCustPS2Rn(string,var record RcVc);
external procedure MulM4ProcVal(val,val,var val);
external procedure CalcExtra(val,string,var val);
external procedure GetCurncyRoundoff(string,string,string,var roundmode,var roundmode,var roundmode);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external procedure RoundRowSum(string,string,string,var val);
remote procedure PreQTVc_PasteQTDate(var record PreQTVc);
external function Boolean TestForMATVARINS(Integer);
remote procedure PreQTVc_PasteCurncyCode(var record PreQTVc,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean GetPD(var record PDVc);
remote procedure PreQTVc_PasteSalesMan(var record PreQTVc,string,string);
remote function Boolean PreQTVc_PasteArtCode(var record PreQTVc,Integer,var string);
remote procedure PreQTVc_PasteQuant(var record PreQTVc,Integer,var Boolean);
external procedure SendArtStat(string,string,string,val,val,val,Date,Integer);
external procedure CalcProc(val,val,var val);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
remote function Boolean PasteCustInPreQT(var record PreQTVc,string,string,var string,Boolean);
external procedure CalcSum(val,val,val,val,var val,Integer);

global
procedure PreQTSumup(var record PreQTVc PreQTp)
BEGIN
  row PreQTVc PreQTrw;
  val s,s2,ms,ms2,temp;
  Integer i,rwcnt;
  roundmode roundlines,rndtotal,roundvat;
  record SMVc SMr;/*VATBaseRowType*/
  record SMVc SMTax2r;
  Integer vatcnt;  
  string 255 tstr;  
  val tax1sum,tax2sum;  
  val tax1reb;

  SetupVATBase(SMr,vatcnt);
  PreQTp.TotGP = blankval;
  rwcnt = MatRowCnt(PreQTp);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(PreQTp,i,PreQTrw);
    PreQTp.TotGP = PreQTp.TotGP + PreQTrw.rowGP;
    s = s + PreQTrw.Sum;
    s2 = s2 + MulRateToBase1(PreQTp.CurncyCode,PreQTrw.Sum,PreQTp.FrRate,PreQTp.ToRateB1,PreQTp.ToRateB2,PreQTp.BaseRate1,PreQTp.BaseRate2,DefaultCurRoundOff);
    AddVATBase(SMr,PreQTrw.VATCode,PreQTrw.Sum,tax1reb,vatcnt,PreQTp.InclVAT,0);
  end;
  CalcVATBaseVAT(SMr,PreQTp.InclVAT,0,vatcnt,ms,tax1sum);    
  GetCurncyRoundoff(PreQTp.CurncyCode,PreQTp.PayDeal,"PreQTVc",rndtotal,roundlines,roundvat);
  ms = Round(ms,roundvat);
    
  if ((PreQTp.ExportFlag==1) or (PreQTp.ExportFlag==2)) then begin
    if (PreQTp.InclVAT>0) then begin
      ms2 = s - ms;
    end else begin
      ms2 = s;
    end;  
    ms = blankval;
  end else begin
    if (PreQTp.InclVAT>0) then begin
      ms2 = s;
    end else begin
      ms2 = s + ms;    
    end;  
  end;
  ms2 = Round(ms2,rndtotal);
  if (PreQTp.DiscPerc!=blankval) then begin    
    MulM4ProcVal(PreQTp.DiscPerc,s,temp);
    PreQTp.DiscSum = temp;    
  end;  
  PreQTp.DiscSum = Round(PreQTp.DiscSum,DefaultRoundMode);

  PreQTp.Sum1 = s;
  PreQTp.Sum3 = ms;
  PreQTp.Sum4 = ms2;
  if (nonblank(PreQTp.CurncyCode)) then begin
    PreQTp.BaseSum4 = MulRateToBase1(PreQTp.CurncyCode,PreQTp.Sum4,PreQTp.FrRate,PreQTp.ToRateB1,PreQTp.ToRateB2,PreQTp.BaseRate1,PreQTp.BaseRate2,DefaultCurRoundOff);
  end;
  if (PreQTp.InclVAT==0) then begin
    temp = PreQTp.TotGP/s2;
  end else begin
    temp = PreQTp.TotGP/(s2-PreQTp.Sum3);
  end; 
  RETURN;
END;

global
function Boolean PreQTDchrsum(var record PreQTVc PreQTr,Integer rownr,Integer UseDiscount)
begin
  Boolean chsum;
  row PreQTVc PreQTrw;
  val s,v;

  chsum = false;
  MatRowGet(PreQTr,rownr,PreQTrw);
  CalcSum(PreQTrw.Quant,PreQTrw.Price,PreQTrw.PriceFactor,PreQTrw.vRebate,s,UseDiscount);
  RoundRowSum(PreQTr.CurncyCode,PreQTr.PayDeal,"PreQTVc",s);
  if (s<>PreQTrw.Sum) then begin
    PreQTrw.Sum = s;
    MatRowPut(PreQTr,rownr,PreQTrw);
    chsum = true;
  end;
  if (PreQTrw.Price==0) then begin chsum = true; end;
  PreQTDchrsum = chsum;
  return;
end;

global
procedure PreQTDchsum(record PreQTVc PreQTr,Integer rownr)
begin
  row PreQTVc PreQTrw;
  val t,s;
  val rowinbase;
  val tproc;
  val unitprdisc;
  string 60 location;
  record TaxMatrixVc TMr;

  if (rownr>=0) then begin
    MatRowGet(PreQTr,rownr,PreQTrw);
  end;
  PreQTr.TotGP = PreQTr.TotGP - PreQTrw.rowGP;
  location = "";
  unitprdisc = BlankVal;
  t = PreQTrw.Quant * PreQTrw.BasePrice;
  if (PreQTrw.PriceFactor<>0) then begin
    t = t / PreQTrw.PriceFactor;
  end;
  s  = MulRateToBase1(PreQTr.CurncyCode,PreQTrw.Sum,PreQTr.FrRate,PreQTr.ToRateB1,PreQTr.ToRateB2,PreQTr.BaseRate1,PreQTr.BaseRate2,DefaultCurRoundOff);
  FindSalesExVat(TMr,PreQTrw.VATCode,s,PreQTr.InclVAT,0,rowinbase);
  PreQTrw.rowGP = rowinbase - t;
  CalcProc(rowinbase,PreQTrw.rowGP,tproc);
  unitprdisc = Round(PreQTrw.Sum / PreQTrw.Quant,DefaultRoundMode);
  if (rownr>=0) then begin
    MatRowPut(PreQTr,rownr,PreQTrw);
  end;
  SendArtStat(PreQTrw.ArtCode,location,"",PreQTrw.rowGP,tproc,unitprdisc,PreQTr.QTDate,0);
  return;
end;
 
global
function Boolean PreQTDClassSwitchRow(Integer wn,Integer rownr)
BEGIN
  record PreQTVc PreQTr;
  row PreQTVc PreQTrw;
  Integer rwcnt;
  string 255 tstr,location,recepy;
  val t,tproc,unitprdisc;
  val rowsum,rowinbase;
  Boolean res;
  record TaxMatrixVc TMr;
  
  res = true;
  GetWindowRecord(wn,PreQTr);
  rwcnt = MatRowCnt(PreQTr);  
  if ((rownr<rwcnt) and (rownr>=0)) then begin
    MatRowGet(PreQTr,rownr,PreQTrw);
    location = "";
    tstr = PreQTrw.ArtCode;
    t = PreQTrw.rowGP;
    rowinbase = MulRateToBase1(PreQTr.CurncyCode,PreQTrw.Sum,PreQTr.FrRate,PreQTr.ToRateB1,PreQTr.ToRateB2,PreQTr.BaseRate1,PreQTr.BaseRate2,DefaultCurRoundOff);
    FindSalesExVat(TMr,PreQTrw.VATCode,rowinbase,PreQTr.InclVAT,0,rowsum);
    CalcProc(rowsum,t,tproc);
    unitprdisc = PreQTrw.Sum/PreQTrw.Quant;
    unitprdisc = Round(unitprdisc,DefaultRoundMode);
    recepy = "";
//      if (blankstrp(recepy)) then GetRecepy(PreQTrw.ArtCode,recepy); This makes one extra call, I can see why but we need another solution
  end;
  SendArtStat(tstr,location,recepy,t,tproc,unitprdisc,PreQTr.QTDate,0);
  SetWindowNameArg(wn,tstr & ":" & location);
  PreQTDClassSwitchRow = res;
  RETURN
END;

function Boolean PreQTDClassQuantEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record PreQTVc PreQTr;
  Boolean chsum;
  record ModuleBlock OptFeature;
  record GeneralOptionBlock GenOptRec;

  if (changedf!=0) then begin
    GetWindowRecord(wn,PreQTr);
    DeselectWindow(wn,false);
    BlockLoad(OptFeature);
    if (OptFeature.NoQtyDepPrices==0) then begin
      PreQTVc_PasteQuant(PreQTr,rownr,chsum);  
    end else begin
      BlockLoad(GenOptRec);
      chsum = PreQTDchrsum(PreQTr,rownr,GenOptRec.UseDiscount);
    end;
    if (chsum) then begin
      PreQTDchsum(PreQTr,rownr);
      PreQTSumup(PreQTr);
    end;    
    PutWindowRecord(wn,PreQTr);
  end;
  PreQTDClassQuantEFAfter = true;
  return;
end;          
 
function Boolean PreQTDClassBasePriceEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record PreQTVc PreQTr;

  if (changedf!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,PreQTr);
    PreQTDchsum(PreQTr,rownr);
    PreQTSumup(PreQTr);
    PutWindowRecord(wn,PreQTr);
  end;
  PreQTDClassBasePriceEFAfter = true;
  return;
end;

procedure PreQTVc_PastePrice(var record PreQTVc PreQTr,Integer rownr,var Boolean chsum)
BEGIN
  record GeneralOptionBlock GenOptRec;

  BlockLoad(GenOptRec);
  chsum = PreQTDchrsum(PreQTr,rownr,GenOptRec.UseDiscount);
  RETURN;
END;

function Boolean PreQTDClassPriceEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record PreQTVc PreQTr;
  Boolean chsum;

  if (changedf!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,PreQTr);
    PreQTVc_PastePrice(PreQTr,rownr,chsum);
    if (chsum) then begin
      PreQTDchsum(PreQTr,rownr);
      PreQTSumup(PreQTr);
    end;
    PutWindowRecord(wn,PreQTr);
  end;
  PreQTDClassPriceEFAfter = true;
  return;
end;

function Boolean PreQTDClassPriceFactorEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record PreQTVc PreQTr;
  record GeneralOptionBlock GenOptRec;

  if (changedf!=0) then begin
    BlockLoad(GenOptRec);
    DeselectWindow(wn,false);
    GetWindowRecord(wn,PreQTr);
    if (PreQTDchrsum(PreQTr,rownr,GenOptRec.UseDiscount)) then begin
      PreQTDchsum(PreQTr,rownr);
      PreQTSumup(PreQTr);
    end;
    PutWindowRecord(wn,PreQTr);
  end;
  PreQTDClassPriceFactorEFAfter = true;
  return;
end;
 
function Boolean PreQTDClassArtCodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record PreQTVc PreQTr;
  string 255 inwarning;

  if (changedf!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,PreQTr);
    if (PreQTVc_PasteArtCode(PreQTr,rownr,inwarning)) then begin
      if (nonblank(inwarning)) then begin
        MessageBox(0,inwarning);
      end;
/* I'm only calling this to get SendArtStat done, if you have a better way, please put it in */
      PreQTDchsum(PreQTr,rownr);
      PreQTSumup(PreQTr);
    end else begin
      Beep;
    end;
    PutWindowRecord(wn,PreQTr);
    if (PreQTDClassSwitchRow(wn,rownr)) then begin end;
  end;
  PreQTDClassArtCodeEFAfter = true;
  return;
end;

function Boolean PreQTDClassCustCodeEFAfter(Integer wn,Integer changedf)
begin
  record PreQTVc PreQTr;
  string 255 warntext;

  GetWindowRecord(wn,PreQTr);    
  if ((changedf!=0) or ((blank(PreQTr.Addr0)) and (nonblank(PreQTr.CustCode)))) then begin
    if (PasteCustInPreQT(PreQTr,PreQTr.CustCode,WindEFstr(wn),warntext,true)) then begin
      if (nonblank(warntext)) then begin
        MessageBox(0,warntext);
      end;
      PutWindowRecord(wn,PreQTr);    
    end else begin
      Beep;
    end;
  end; 
  PreQTDClassCustCodeEFAfter = true;
  return;
end;
 
function Boolean PreQTDClassSalesManEFAfter(Integer wn,Integer changedf)
begin
  record PreQTVc PreQTr;
  string 255 warntext;

  if (changedf!=0) then begin
    GetWindowRecord(wn,PreQTr);    
    PreQTVc_PasteSalesMan(PreQTr,PreQTr.SalesMan,WindEFstr(wn));
    PutWindowRecord(wn,PreQTr);    
  end; 
  PreQTDClassSalesManEFAfter = true;
  return;
end;
 
function Boolean PreQTDClassDiscPercEFAfter(Integer wn,Integer changedf)
begin
  record PreQTVc PreQTr;
  val t,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PreQTr);    
    MulM4ProcVal(PreQTr.DiscPerc,s,t);
    PreQTr.DiscSum = Round(PreQTr.DiscSum,DefaultRoundMode);
    PreQTr.Sum1 = s;
    if (blank(PreQTr.DiscPerc)) then begin
      PreQTr.DiscSum = blankval;
    end;
    PutWindowRecord(wn,PreQTr);    
  end; 
  PreQTDClassDiscPercEFAfter = true;
  return;
end;
 
function Boolean PreQTDClassQTDateEFAfter(Integer wn,Integer changedf)
begin
  record PreQTVc PreQTr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PreQTr);    
    PreQTVc_PasteQTDate(PreQTr);
    PutWindowRecord(wn,PreQTr);    
  end; 
  PreQTDClassQTDateEFAfter = true;
  return;
end;
 
function Boolean PreQTDClassCurncyCodeEFAfter(Integer wn,Integer changedf)
begin
  record PreQTVc PreQTr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PreQTr);    
    PreQTVc_PasteCurncyCode(PreQTr,WindEFstr(wn));
    PutWindowRecord(wn,PreQTr);    
  end; 
  PreQTDClassCurncyCodeEFAfter = true;
  return;
end;
 
function Boolean PreQTDClassFrRateEFAfter(Integer wn,Integer changedf)
begin
  record PreQTVc PreQTr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PreQTr);    
    PreQTr.BaseSum4 = MulRateToBase1(PreQTr.CurncyCode,PreQTr.Sum4,PreQTr.FrRate,PreQTr.ToRateB1,PreQTr.ToRateB2,PreQTr.BaseRate1,PreQTr.BaseRate2,DefaultCurRoundOff);
    PutWindowRecord(wn,PreQTr);    
  end; 
  PreQTDClassFrRateEFAfter = true;
  return;
end;

function Boolean PreQTDClassToRateB1EFAfter(Integer wn,Integer changedf)
begin
  record PreQTVc PreQTr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PreQTr);    
    PreQTr.BaseSum4 = MulRateToBase1(PreQTr.CurncyCode,PreQTr.Sum4,PreQTr.FrRate,PreQTr.ToRateB1,PreQTr.ToRateB2,PreQTr.BaseRate1,PreQTr.BaseRate2,DefaultCurRoundOff);
    PutWindowRecord(wn,PreQTr);    
  end; 
  PreQTDClassToRateB1EFAfter = true;
  return;
end;

function Boolean PreQTDClassToRateB2EFAfter(Integer wn,Integer changedf)
begin
  record PreQTVc PreQTr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PreQTr);    
    PreQTr.BaseSum4 = MulRateToBase1(PreQTr.CurncyCode,PreQTr.Sum4,PreQTr.FrRate,PreQTr.ToRateB1,PreQTr.ToRateB2,PreQTr.BaseRate1,PreQTr.BaseRate2,DefaultCurRoundOff);
    PutWindowRecord(wn,PreQTr);    
  end; 
  PreQTDClassToRateB2EFAfter = true;
  return;
end;

function Boolean PreQTDClassBaseRate1EFAfter(Integer wn,Integer changedf)
begin
  record PreQTVc PreQTr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PreQTr);    
    PreQTr.BaseSum4 = MulRateToBase1(PreQTr.CurncyCode,PreQTr.Sum4,PreQTr.FrRate,PreQTr.ToRateB1,PreQTr.ToRateB2,PreQTr.BaseRate1,PreQTr.BaseRate2,DefaultCurRoundOff);
    PutWindowRecord(wn,PreQTr);    
  end; 
  PreQTDClassBaseRate1EFAfter = true;
  return;
end;

function Boolean PreQTDClassBaseRate2EFAfter(Integer wn,Integer changedf)
begin
  record PreQTVc PreQTr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PreQTr);    
    PreQTr.BaseSum4 = MulRateToBase1(PreQTr.CurncyCode,PreQTr.Sum4,PreQTr.FrRate,PreQTr.ToRateB1,PreQTr.ToRateB2,PreQTr.BaseRate1,PreQTr.BaseRate2,DefaultCurRoundOff);
    PutWindowRecord(wn,PreQTr);    
  end; 
  PreQTDClassBaseRate2EFAfter = true;
  return;
end;

function Boolean PreQTDClassPayDealEFAfter(Integer wn,Integer changedf)
begin
  record PreQTVc PreQTr;
  record PDVc PDr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PreQTr);    
    if (blank(PreQTr.PriceList)) then begin
      PDr.Code = PreQTr.PayDeal;
      if (GetPD(PDr)) then begin
        PreQTr.PriceList = PDr.PriceList;
      end;
    end;    
    PutWindowRecord(wn,PreQTr);    
  end; 
  PreQTDClassPayDealEFAfter = true;
  return;
end;

function Boolean PreQTDClassPriceListEFAfter(Integer wn,Integer changedf)
begin
  record PreQTVc PreQTr;
  record PLDefVc PLDefr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PreQTr);    
    PLDefR.Code = PreQTr.PriceList;
    if (ReadFirstMain(PLDefR,1,true)) then begin
      PreQTr.InclVAT = PLDefR.InclVAT;
    end;
    PutWindowRecord(wn,PreQTr);    
  end; 
  PreQTDClassPriceListEFAfter = true;
  return;
end;

procedure PreQTVc_PastevRebate(var record PreQTVc PreQTr,Integer rownr,var Boolean chsum)
BEGIN
  record GeneralOptionBlock GenOptRec;

  BlockLoad(GenOptRec);
  chsum = PreQTDchrsum(PreQTr,rownr,GenOptRec.UseDiscount);
  return;
end;

function Boolean PreQTDClassvRebateEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record PreQTVc PreQTr;
  Boolean chsum;

  if (changedf!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,PreQTr);
    PreQTVc_PastevRebate(PreQTr,rownr,chsum);
    if (chsum) then begin
      PreQTDchsum(PreQTr,rownr);
      PreQTSumup(PreQTr);
    end;
    PutWindowRecord(wn,PreQTr);
  end;
  PreQTDClassvRebateEFAfter = true;
  return;
end;

function Boolean PreQTDClassVATCodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record PreQTVc PreQTr;
  row PreQTVc PreQTrw;

  if (changedf!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,PreQTr);  
    PreQTDchsum(PreQTr,rownr);
    PreQTSumup(PreQTr);
    PutWindowRecord(wn,PreQTr);
  end;
  PreQTDClassVATCodeEFAfter = true;
  return;
end;

procedure PreQTVc_PasteSum(var record PreQTVc PreQTr,Integer rownr)
BEGIN
  record GeneralOptionBlock GOb;
  row PreQTVc PreQTrw;
  val s,t,p;

  MatRowGet(PreQTr,rownr,PreQTrw);
  if ((PreQTrw.Quant!=0) and (PreQTrw.Price!=0)) then begin
    PreQTrw.vRebate = blankval;
    BlockLoad(GOb);    
    p = PreQTrw.Price; 
    CalcPrice(PreQTrw.BasePrice,PreQTrw.PriceFactor,PreQTrw.vRebate,p,GOb.UseDiscount);
    PreQTrw.Price = p;  
    CalcSum(PreQTrw.Quant,PreQTrw.Price,PreQTrw.PriceFactor,PreQTrw.vRebate,t,GOb.UseDiscount);
    RoundRowSum(PreQTr.CurncyCode,PreQTr.PayDeal,"PreQTVc",t); 
    s = PreQTrw.Sum;// /PreQTrw.Quant;not good
    s = t - s;
    s = s*100;
    s = s/t;
    PreQTrw.vRebate = Round(s,SetRoundModeD(1));
    if (PreQTrw.vRebate==0) then begin PreQTrw.vRebate = blankval; end;
    MatRowPut(PreQTr,rownr,PreQTrw);
  end;
  RETURN;
END;

function Boolean PreQTDClassSumEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record PreQTVc PreQTr;
  Boolean chsum;

  if (changedf!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,PreQTr);
    PreQTVc_PasteSum(PreQTr,rownr);
//    PreQTVc_PastevRebate(PreQTr,rownr,chsum);
    PreQTDchsum(PreQTr,rownr);
    PreQTSumup(PreQTr);
    PutWindowRecord(wn,PreQTr);
  end;
  PreQTDClassSumEFAfter = true;
  return;
end;

global
function Boolean PreQTDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "PriceList": res = PreQTDClassPriceListEFAfter(wn,changed);
    case "PayDeal": res = PreQTDClassPayDealEFAfter(wn,changed);
    case "FrRate": res = PreQTDClassFrRateEFAfter(wn,changed);
    case "ToRateB1": res = PreQTDClassToRateB1EFAfter(wn,changed);
    case "ToRateB2": res = PreQTDClassToRateB2EFAfter(wn,changed);
    case "BaseRate1": res = PreQTDClassBaseRate1EFAfter(wn,changed);
    case "BaseRate2": res = PreQTDClassBaseRate2EFAfter(wn,changed);
    case "CurncyCode": res = PreQTDClassCurncyCodeEFAfter(wn,changed);
    case "QTDate": res = PreQTDClassQTDateEFAfter(wn,changed);
    case "DiscPerc": res = PreQTDClassDiscPercEFAfter(wn,changed);
    case "SalesMan": res = PreQTDClassSalesManEFAfter(wn,changed);
    case "CustCode": res = PreQTDClassCustCodeEFAfter(wn,changed);
    case "ArtCode": res = PreQTDClassArtCodeEFAfter(wn,rownr,changed);
    case "Quant": res = PreQTDClassQuantEFAfter(wn,rownr,changed);
    case "BasePrice": res = PreQTDClassBasePriceEFAfter(wn,rownr,changed);
    case "Price": res = PreQTDClassPriceEFAfter(wn,rownr,changed);
    case "PriceFactor": res = PreQTDClassPriceFactorEFAfter(wn,rownr,changed);
    case "vRebate": res = PreQTDClassvRebateEFAfter(wn,rownr,changed);
    case "VATCode": res = PreQTDClassVATCodeEFAfter(wn,rownr,changed);
    case "Sum": res = PreQTDClassSumEFAfter(wn,rownr,changed);
  end;
  PreQTDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean PreQTDClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
BEGIN
  Boolean res;
  record PreQTVc PreQTr;
  row PreQTVc PreQTrw;

  switch (fieldname) begin  
    case "Quant":     
      GetWindowRecord(wn,PreQTr);      
      MatRowGet(PreQTr,rownr,PreQTrw);
      if (PreQTrw.Quant==0) then begin
        if (TestForMATVARINS(wn)) then begin end;
      end;
  end;
  PreQTDClassBeforeEditField = res;
  return;
end;

global
procedure ItemStatusPreQTDsm()
BEGIN
  Integer wn,nwn;
  Boolean testf;
  record RcVc RepSpec;
  
  wn = CurWindow;
  nwn = OpenArtStat(wn,RepSpec,false);
  testf = PreQTDClassSwitchRow(wn,WindowActiveRow(wn));
  RETURN
END;

global
procedure CUStatusPreQTDsm()
begin
  record RcVc RepSpec;
  record PreQTVc PreQTr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,PreQTr);
  SetupCustPS2Rn(PreQTr.CustCode,RepSpec);
  RepSpec.Media   = mtScreen;    
  RunReport(RepSpec,0);
  return;
end;
