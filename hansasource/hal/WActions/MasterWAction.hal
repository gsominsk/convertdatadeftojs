external function Boolean ProductInDemoMode();
external procedure MasterWClassMetroKPIsUpdate(Integer);
remote procedure MasterWClassOnOKWindowRemote(string,var record KPIDefVc);
external procedure KPIRunReport(record KPIDefVc);
external function Boolean HasKPIs();
remote procedure GetNumberOfUsers(var LongInt,var LongInt,var LongInt,var LongInt,var LongInt,var LongInt,var LongInt);
remote function LongInt CountConferences();
// remote updating function Boolean ChangePassword(record RcVc); // Doesn't exist...
external procedure OpenSignature(LongInt);
external procedure OpenAutoReply(LongInt);
external procedure OpenExtChat(string);
external procedure OpenPresentation(LongInt);
external function Boolean CurUserHasMailbox(var string);
external procedure FindUserMailboxName(string,var string,var string);
remote updating function Boolean RecordAction_raNoteFromArchive(var record NotepadVc,record RLinkVc,Integer);

/*  
global
updating procedure NoteFromMasterWsm()
BEGIN
  Integer wn,mwn,nwn,thewn;
  record RcVc RepSpec;
  record NotepadVc Noter;
  record RLinkVc Rlinkr;

  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  if (blank(RepSpec.f1)) then begin goto LNoteFromMasterWsm; end;
  Rlinkr.FromRecidStr = RepSpec.f1;
  mwn = MotherWindow(wn);
  thewn = mwn;
  if (thewn==0) then begin thewn = wn; end;
  RecordNew(Noter);
  if (RecordAction_raNoteFromArchive(Noter,Rlinkr,WindowCompanyNr(thewn))) then begin
    UpdateArchive(wn);
    nwn = OpenWindow("NotepadDClass",1,0,"","",Noter);
  end;
LNoteFromMasterWsm:;
  RETURN;
END;
*/

global
procedure NoteFromMasterWsm()
BEGIN
  Integer wn,mwn,nwn,thewn;
  record RcVc RepSpec;
  record NotepadVc Noter;

  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  if (blank(RepSpec.f1)) then begin goto LNoteFromMasterWsm; end;
  RecordNew(Noter);
  Noter.FromRecidStr = RepSpec.f1;
  mwn = MotherWindow(wn);
  thewn = mwn;
  if (thewn==0) then begin thewn = wn; end;
  Noter.CompanyNr = WindowCompanyNr(thewn);
  nwn = OpenWindow("NotepadDClass",1,mwn,"","",Noter);
LNoteFromMasterWsm:;
  RETURN;
END;

/*
global
updating procedure ArchiveFromMasterWsm()
BEGIN
  Integer wn,mwn,thewn;
  record RcVc RepSpec;
  record ArchiveVc Archiver;
  record RLinkVc Rlinkr;

  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  if (blank(RepSpec.f1)) then begin goto LArchiveFromMasterWsm; end;
  Rlinkr.FromRecidStr = RepSpec.f1;
  mwn = MotherWindow(wn);
  thewn = mwn;
  if (thewn==0) then begin thewn = wn; end;
  if (RecordAction_raArchiveFromArchive(Archiver,Rlinkr,WindowCompanyNr(thewn))) then begin
    UpdateArchive(wn);
  end;
LArchiveFromMasterWsm:;
  RETURN;
END;
*/

global
procedure ArchiveFromMasterWsm()
begin
  Integer wn,nwn;
  record RcVc RepSpec;
  record RcVc newRepSpec;

  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  if (blank(RepSpec.f1)) then begin goto LArchiveFromArchiveWsm; end;
  newRepSpec.f1 = RepSpec.f1;
  nwn = OpenWindow("CreateArchiveVClass",1,0,"","",newRepSpec);
  newRepSpec.f1 = RepSpec.f1;
  PutWIndowRecord(nwn,newRepSpec);
LArchiveFromArchiveWsm:;
  return;
end;

global
updating procedure OpenUS2Sm()
begin
  Integer wn,nwn;
  record UserVc USr;
  
  wn = CurWindow;
  USr.Code = CurrentUser;

  if (ReadFirstMain(USr,1,true)) then begin
    nwn = OpenWindow("US2DClass",1,wn,"","",USr);
  end;
  return;
end;

global
procedure US2DClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin
  duplOK = false;
  newOK = false;
  return;
end;

global
updating procedure ShowToLinksMasterWsm()
BEGIN
  Integer wn;
  record RcVc RepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  RepSpec.f2 = "-";
  PutWindowRecord(wn,RepSpec);
  UpdateArchive(wn);
  RETURN;
END;

global
procedure PresentationMasterWsm()
BEGIN
  Integer wn;
  string 60 confcode;
  LongInt mailboxnr;

  wn = CurWindow;
  if (CurUserHasMailbox(confcode)) then begin
    mailboxnr = StringToLongInt(confcode);
    OpenPresentation(mailboxnr);
  end;
  RETURN;
END;

global
procedure SignatureMasterWsm()
BEGIN
  Integer wn;
  string 60 confcode;
  LongInt mailboxnr;

  wn = CurWindow;
  if (CurUserHasMailbox(confcode)) then begin
    mailboxnr = StringToLongInt(confcode);
    OpenSignature(mailboxnr);
  end;
  RETURN;
END;

global
procedure AutoReplyMasterWsm()
BEGIN
  string 60 confcode;
  LongInt mailboxnr,cursermailboxnr;
  record MailVc Mailr;
  Integer wn;
  record ConfVc Confr;

  wn = CurWindow;
  mailboxnr = StringToLongInt(GetWindowSubset(wn));
  if (CurUserHasMailbox(confcode)) then begin
    cursermailboxnr = StringToLongInt(confcode);
    if (mailboxnr==cursermailboxnr) then begin
      OpenAutoReply(cursermailboxnr);
    end else begin
      Confr.SerNr = mailboxnr;
      if (ReadFirstMain(Confr,1,true)) then begin
//        if (Confr.Class!=kConfClassMailbox) then begin
          OpenAutoReply(Confr.SerNr);
//        end;
      end;
    end;
  end;
  RETURN;
END;

global
procedure ExtChatMasterWsm()
BEGIN
  string 200 confcode,mailboxname;

  FindUserMailboxName(CurrentUser,confcode,mailboxname);
  if (nonblank(mailboxname)) then begin
    OpenExtChat(mailboxname);
  end;
  RETURN;
END;

global
procedure ChangePasswdMasterWsm()
BEGIN
  Integer wn,nwn;
  record RcVc RepSpec;
  record UserVc Userr;

  wn = CurWindow;
  RepSpec.ObjStr = CurrentUser;
  Userr.Code = CurrentUser;
  ReadFirstMain(Userr,1,true);
  RepSpec.AccStr = "";
  RepSpec.FirstAcc = "";
  RepSpec.LastAcc = "";
  RepSpec.Notation = 0;
  RepSpec.ArtMode = 0;
  RepSpec.f1 = "DontQuiteOnCancel";
  if (Userr.NewPassWord!=0) then begin
    nwn = OpenWindow("ChngePasswordClass",0,wn,"","",RepSpec);
  end else begin
//    nwn = OpenWindow("ChngePasswordClass",0,wn,"","",RepSpec);
    nwn = OpenWindow("ChngePasswordNoOldClass",0,wn,"","",RepSpec);
  end;
  RETURN;
END;

global
procedure ChangeDiscPasswdMasterWsm()
begin
  Integer wn,nwn;
  record RcVc RepSpec;

  wn = CurWindow;
  RepSpec.ObjStr = CurrentUser;
  RepSpec.AccStr = "";
  RepSpec.FirstAcc = "";
  RepSpec.LastAcc = "";
  RepSpec.Notation = 0;
  RepSpec.ArtMode = 0;
  nwn = OpenWindow("ChngeDiscPasswordClass",0,wn,"","",RepSpec);
  return;
end;

function Boolean PasswordCorrect(Integer wn)
BEGIN
  Boolean res;
  record RcVc RepSpec;
  record PasswdSetBlock PasswdSetRec;
  Integer i,l;
  string 2 c;
  
  BlockLoad(PasswdSetRec);
  GetWindowRecord(wn,RepSpec);
    l = len(RepSpec.FirstAcc);
    if (PasswdSetRec.MinPasswdLen!=0) then begin
      if (l<PasswdSetRec.MinPasswdLen) then begin
        RepSpec.FirstAcc = "";
        RepSpec.LastAcc = "";
        MessageBox(1029,"");
        goto LPasswordCorrect;
      end;
    end;
    if (PasswdSetRec.CapitalInPasswd!=0) then begin
      for (i=0;i<=l;i=i+1) begin
        if ((asc(Mid(RepSpec.FirstAcc,i,1))<48) or (asc(Mid(RepSpec.FirstAcc,i,1))>57)) then begin
          c = Mid(RepSpec.FirstAcc,i,1);
//          Upr2String(c); why?
          if (Mid(RepSpec.FirstAcc,i,1)==c) then begin
            goto L88;          
          end;
        end;
      end;
      RepSpec.FirstAcc = "";
      RepSpec.LastAcc = "";
      MessageBox(1029,"");
      goto LPasswordCorrect;      
    end;
    if (PasswdSetRec.DigitInPasswd!=0) then begin
      for (i=0;i<=l;i=i+1) begin
        if ((asc(Mid(RepSpec.FirstAcc,i,1))>=48) and (asc(Mid(RepSpec.FirstAcc,i,1))<=57)) then begin
          goto L88;          
        end;
      end;
      RepSpec.FirstAcc = "";
      RepSpec.LastAcc = "";
      MessageBox(1029,"");
      goto LPasswordCorrect;      
    end;    
L88:;      
  res = true;
LPasswordCorrect:;  
  PasswordCorrect = res;
  RETURN;
END;

/*
must be in C beacause of small Letters, hal ain't understand them
global
updating function Boolean ChngePasswordClassOnOKWindow(Integer wn)
BEGIN
  Boolean closef;
  record RcVc RepSpec;
  
  GetWindowRecord(wn,RepSpec);
  if (PasswordCorrect(wn)) then begin
    closef = ChangePassword(RepSpec);
  end;
  if (closef) then begin
    CloseWindow(wn);
  end;
  ChngePasswordClassOnOKWindow = false;
  RETURN;
END;
*/

//Should be ModuleBlockCheck but it is called in more places than storing blocks from the interface
global
updating function Boolean ModulesTClassOnOKWindow(Integer wn)
BEGIN
  record ModuleBlock Moduler;
  Boolean res;
  LongInt nrofconf;
  LongInt mlboxes,cfrences,nrofusers;
  LongInt level1user,level2user,level3user,concurrent,singlefunc,singlefuncusers,bpusers;

  GetWindowRecord(wn,Moduler);
  res = true;
  GetNumberOfUsers(level1user,level2user,level3user,concurrent,singlefunc,singlefuncusers,bpusers);
  if (((Moduler.NumberOfUsers==-1) and (level3user>0+singlefuncusers)) or 
      ((Moduler.NumberOfUsers!=-1) and (level3user>Moduler.NumberOfUsers+singlefuncusers))) then begin
    MessageBox(1492,level3user);
    WindowFieldGoto(wn,Moduler,-1,"NumberOfUsers",true);
    res = false;
    goto LModuleBlockCheck;
  end;
  if (((Moduler.NamedBPUsers==-1) and (bpusers>0)) or ((Moduler.NamedBPUsers!=-1) and (bpusers>Moduler.NamedBPUsers))) then begin
    MessageBox(2296,bpusers);
    res = false;
    goto LModuleBlockCheck;
  end;
  if (((Moduler.Level1==-1) and (level1user>0)) or ((Moduler.Level1!=-1) and (level1user>Moduler.Level1))) then begin
    MessageBox(1492,level1user);
    res = false;
    goto LModuleBlockCheck;
  end;
  if (((Moduler.Level2==-1) and (level2user>0)) or ((Moduler.Level2!=-1) and (level2user>Moduler.Level2))) then begin
    MessageBox(1492,level2user);
    res = false;
    goto LModuleBlockCheck;
  end;
  if (((Moduler.Mailboxes==-1) and (concurrent>0)) or ((Moduler.Mailboxes!=-1) and (concurrent>Moduler.Mailboxes))) then begin
    MessageBox(1490,concurrent);
    res = false;
    goto LModuleBlockCheck;
  end;
  if (((Moduler.ThinClients==-1) and (singlefunc>0)) or ((Moduler.ThinClients!=-1) and (singlefunc>Moduler.ThinClients))) then begin
    MessageBox(1493,singlefunc);
    res = false;
    goto LModuleBlockCheck;
  end;
  cfrences = Moduler.Conferences;
  if (cfrences==-1) then begin cfrences = 0; end;
  nrofconf = CountConferences;
  if (nrofconf>cfrences) then begin
    MessageBox(1491,nrofconf);      
    WindowFieldGoto(wn,Moduler,-1,"Conferences",true);
    res = false;
    goto LModuleBlockCheck;
  end;
  if (GetProgramType!=typPOSStandalone and ((Moduler.OperatingSystem==0) or (Moduler.OperatingSystem>31))) then begin
    MessageBox(1771,"");
    WindowFieldGoto(wn,Moduler,-1,"OperatingSystem",true);
    res = false;
    goto LModuleBlockCheck;
  end;
  if (GetProgramType!=typPOSStandalone and ((Moduler.Hardware==0) or (Moduler.Hardware>31))) then begin
    MessageBox(1771,"");      
    WindowFieldGoto(wn,Moduler,-1,"Hardware",true);
    res = false;
    goto LModuleBlockCheck;
  end;
LModuleBlockCheck:;
  ModulesTClassOnOKWindow = res;
  RETURN;
END;

global
function Boolean HWMessageClassUpdateTest(Integer wn)
BEGIN
  Boolean res;
  
  res = false;
  HWMessageClassUpdateTest = res;
  RETURN;
END;

global
updating procedure HWMessageClassClosesm()
begin
  CloseWindow(CurWindow);
  return;
end;

global
updating procedure HWMessageClassBrowsesm()
begin
  Integer wn;
  record MailVc Mailr;
  
  wn = CurWindow;
  GetWindowRecord(wn,Mailr);
  OpenWebBrowser(Mailr.Identifier);
//  CloseWindow(wn);
  return;
end;

global
updating procedure HWMessageClassSavesm()
begin
  Integer wn;
  record MailVc Mailr;
  record MailVc Mail2r;
  row MailVc MArw;
  string 255 mailboxnr,tstr;
  Integer rwcnt,i;
  
  wn = CurWindow;
  GetWindowRecord(wn,Mail2r);
  RecordNew(Mailr);
  FindUserMailboxName(CurrentUser,mailboxnr,tstr);
  if (nonblank(tstr)) then begin
    MArw.RowTyp = 1;
    MArw.AddrCode = "noreply@hansaworld.com";
    MatRowPut(Mailr,0,MArw);
    MArw.RowTyp = 0;
    MArw.AddrCode = tstr;
    MatRowPut(Mailr,1,MArw);
    Mailr.Header = Mail2r.Header;
    rwcnt = LineTextCnt(Mail2r);
    for (i=0;i<rwcnt;i=i+1) begin
      tstr = LineTextGet(Mail2r,i);
      LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
    end;    
    Mailr.TransDate = CurrentDate;
    Mailr.TransTime = CurrentTime;
    Mailr.SendFlag = 1;
    Mailr.LockedFlag = 1;
    Mailr.SerNr = NextSerNr("MailVc",Mailr.TransDate,-1,false,"");
    if (RecordStore(Mailr,false)) then begin end;
    CloseWindow(wn);
  end;
  RETURN;
END;

global
Function Boolean MasterWClassOnOpenWindow(Integer wn)
begin  
  record RcVc RepSpec;
  
  SetWindowSubset(wn,CurrentUser);
  
  if (GuiType!=kGuiiPhone and GuiType!=kGuiAndroid and FindWindow("OpenWindowsHistoryOClass")<=0) then begin
    //OpenWindow("OpenWindowsHistoryOClass",1,0,"","",RepSpec);
  end;
  
  if (HasKPIs) then begin
  end else begin
    if (IsStandardProduct) then begin
      MasterWClassMetroKPIsUpdate(wn);
    end;
  end;
  
  MasterWClassOnOpenWindow = false;
  return;
end;

global
function Boolean MasterWClassOnOKWindow(Integer wn)
begin
  Integer nwn;
  record RcVc RepSpec;
  record KPIDefVc KPIr;
  Integer sel;

  if (HasKPIs) then begin
    if (ReadMarkedRecord(wn,KPIr)) then begin
      if (nonblank(KPIr.URL)) then begin
        switch (KPIr.OpenType) begin
          case kNavLinkOpenInline:
            nwn = OpenWindow("WebPageClass",1,0,KPIr.URL,"",RepSpec);
          case kNavLinkOpenExternal:
            OpenWebBrowser(KPIr.URL);
          end;
        end;
    end;
  end else begin
    if (IsStandardProduct) then begin
      sel = SelectedDataListLine(wn);
      if (sel>=0) then begin
        MasterWClassOnOKWindowRemote(GetListTag(wn,sel),KPIr);
        if (KPIr.SerNr>0) then begin
          KPIRunReport(KPIr);
        end;
      end;
    end;
  end;
  MasterWClassOnOKWindow = true;
  return;
end;
