external function Boolean ProjActDClassOnOpenWindow(Integer);
remote updating function Integer CreateActFromActDsm(record ActVc,var record ActVc);
remote updating procedure RejectActivity(var record ActVc,Boolean);
remote updating procedure ForwardActivity(var record ActVc,Boolean);
remote updating procedure ApproveActivity(var record ActVc,Boolean);
remote function Boolean ApprovalActvityAttachments(record ActVc,var Array record RLinkVc);
remote external function Boolean ReadAcceptanceRules(Integer,string,var record AcceptanceRulesVc);
remote updating function Boolean CreateInvitationAndSend(longint,var longint,var string);
remote procedure CreateInvitationAndSendRemote(longint);
external function string 255 GetGlobalUserMainCompanies(string);
external function Time TimeDiff(Time,Time);
remote procedure ActDEndActivityServer(var record ActVc);
remote updating function Boolean DelActivity(LongInt,var string,var LongInt);
remote updating function Integer RecordAction_raPasteActInWayList(var record WayListVc,var record ActVc);
external function Boolean GetFirstItem(var string,var record INVc);
external function Boolean ActDClassCUCodeEFAfter(Integer,Integer,Integer,Integer);
external function Boolean ActDClassItemCodeEFAfter(Integer,Integer,Integer,Integer);
external procedure ActVcRecordDefClient(var record ActVc);
external procedure In2Period(var string,var Date,var Date);
external procedure CustMessages(string,string);
remote updating function Integer RecordAction_raPasteActInOrder(var record ORVc,var record ActVc);
remote updating function Integer RecordAction_raPasteActInQT(var record QTVc,var record ActVc);
remote updating function LongInt LetFromActDsmRemote(record ActVc,var record LetVc,Boolean);
external procedure SetupCustPS2Rn(string,var record RcVc);
remote updating function LongInt MailFromActDsmRemote(record ActVc,var record MailVc,string);
external procedure FindUserMailboxName(string,var string,var string);
external function Boolean OpenContactRecord(string,string);
external outer function Boolean OuterActDClassOpenFromSerNrRecord(record ActVc);

procedure DoNewActivity(Integer wn,string username,LongInt mother,Integer atodoflag)
begin
  Integer nwn;
  record ActVc Actr,Act2r;
  Date sd;
  Date ed;
  Date td;
  record RcVc RepSpec;
  string 255 tstr;
  Integer caltimeflag;
  Integer todoflag; 
  Integer AccessLevel; 
  Integer oldcomp;
  string 255 usercrmcompanies;
  Boolean recurringf;
  
  oldcomp = CurrentCompany;
/*  
  if (GlobalUsersMainCompany>0) then begin // Only for Client code, is not set in the server
    if (GlobalUsersMainCompany!=CurrentCompany) then begin
      if (SetCompany(GlobalUsersMainCompany,false)) then begin
      end;
    end;
  end;
*/
  usercrmcompanies = GetGlobalUserMainCompanies(CurrentUser);
  if (nonblank(usercrmcompanies)) then begin
    if (SetInSet(CurrentCompany,usercrmcompanies)==false) then begin
      if (SetCompany(GlobalUsersMainCompany,false)) then begin
      end;
    end;
  end;

  caltimeflag = kCalTimeFlagNoshow;
  todoflag = atodoflag; 
  td = CurrentDate;
//  AccessLevel = UserRegisterAccess("ActVc");//VcAccessLevel("ActVc");
//  if ((AccessLevel==2) or (AccessLevel==5) or (AccessLevel==6)) then begin goto LDoNewActivity; end;
  if ((GetWindowClass(wn)=="MonthWClass") or
      (GetWindowClass(wn)=="HalfYearWClass")) then begin  
    GetWindowRecord(wn,RepSpec);
    sd = RepSpec.sStartDate;
    ed = RepSpec.sStartDate;
    tstr = RepSpec.f1;
    caltimeflag = kCalTimeFlagTime;
    todoflag = kTodoFlagCalendar;
  end;
  if (GetWindowClass(wn)=="WeekWClass") then begin
    GetWindowRecord(wn,RepSpec);
/*    
//    sd = RepSpec.sStartDate; // Why ???
//    ed = RepSpec.sEndDate;
//    td = sd;
*/
    tstr = RepSpec.f1;
    caltimeflag = kCalTimeFlagTime;
    todoflag = kTodoFlagCalendar;
  end;
  if (GetWindowClass(wn)=="DayWClass") then begin
    GetWindowRecord(wn,RepSpec);
    sd = RepSpec.sStartDate;
    ed = RepSpec.sStartDate;
    td = sd;
    tstr = RepSpec.f1;
    caltimeflag = kCalTimeFlagTime;
    todoflag = kTodoFlagCalendar;
  end;
  if (GetWindowClass(wn)=="ToDoWClass") then begin
    GetWindowRecord(wn,RepSpec);
    if (Actr.TodoFlag!=kTodoFlagRecurring) then begin
      sd = RepSpec.sStartDate;
      ed = RepSpec.sStartDate;
      td = sd;
      td = CurrentDate;
      ed = CurrentDate;
    end else begin
      td = "";
      ed = "";
    end;
    tstr = RepSpec.f1;
    caltimeflag = kCalTimeFlagNoshow;
    recurringf = RepSpec.flags[3]==kTodoFlagRecurring;
    if (recurringf) then begin
      todoflag = kTodoFlagRecurring; 
    end;
  end else begin  end;
  if (GetWindowClass(wn)=="ResMonWClass") then begin
    GetWindowRecord(wn,RepSpec);
    td = CurrentDate;
    ed = CurrentDate;
    tstr = RepSpec.f3;
    caltimeflag = kCalTimeFlagTime;
    todoflag = kTodoFlagCalendar;
  end;
  if (GetWindowClass(wn)=="RecActDClass") then begin
    recurringf = true;
    todoflag = kTodoFlagRecurring; 
  end;
  if (GetWindowClass(wn)=="RecActDClass") then begin
    todoflag = kTodoFlagProject; 
  end;
  
  if ((ProgramType==typFirstOffice) or 
      (ProgramType==typFirstOfficeSmall) or
      (ProgramType==typFirstOfficeCurrency) or
      (IsBooks) or (IsStandardProduct)) then begin
    caltimeflag = kCalTimeFlagTime;
  end;    
// this is how it should be 
//  nwn = OpenNamedView("ActDClass",0,NIL,true,0);
//  RecordNew(Actr);//that code is on server when server.hob in not present
  Actr.TodoFlag = todoflag;
  Actr.PrivateFlag = 0;
  Actr.Invalid = 0;
  ActVcRecordDefClient(Actr);    
  if (GetWindowClass(wn)=="DayWClass") or (GetWindowClass(wn)=="WeekWClass") then begin
    Actr.TransDate = td;
    if (nonblankdate(ed)) then begin
      Actr.EndDate = ed;
    end;
  end;
  if (Actr.TransDate>Actr.EndDate) then begin Actr.EndDate = Actr.TransDate; end;
  Actr.CalTimeFlag = caltimeflag;
  if (nonblank(tstr)) then begin Actr.MainPersons = tstr; end;
  Actr.Mother = mother;
  if (GetWindowClass(wn)=="ActDClass" or GetWindowClass(wn)=="ProjActDClass") then begin
    GetWindowRecord(wn,Act2r);
    if (blank(Actr.ActType)) then begin Actr.ActType = Act2r.ActType; end;
    if (blank(Actr.ActTypeComment)) then begin  Actr.ActTypeComment = Act2r.ActTypeComment; end;    
    if (blank(Actr.PRCode)) then begin Actr.PRCode = Act2r.PRCode; end;    
    if (blank(Actr.Contact)) then begin  Actr.Contact = Act2r.Contact; end;    
    if (blank(Actr.CUCode)) then begin Actr.CUCode = Act2r.CUCode; end;    
    if (blank(Actr.CUName)) then begin Actr.CUName = Act2r.CUName; end;    
    if (blank(Actr.Phone)) then begin  Actr.Phone = Act2r.Phone; end;    
  end;
  switch (todoflag) begin
    case kTodoFlagRecurring:
      nwn = OpenWindow("RecActDClass",1,0,"","",Actr);
    case kTodoFlagProject:
      nwn = OpenWindow("ProjActDClass",1,wn,"","",Actr);
    otherwise
      nwn = OpenWindow("ActDClass",1,wn,"","",Actr);
  end;

  WindowFieldGoto(nwn,Actr,-1,"Comment",true);
  //if (nwn!=0) then begin
  //  PutWindowRecord(nwn,Actr);
  //end;
  
LDoNewActivity:;
  ResetCompany(oldcomp);
  return;
end;

global
procedure NewActivityTool()
begin
  Integer wn;

  wn = CurWindow;
  DoNewActivity(wn,"",-1,kTodoFlagTodo);  
  return;
end;

global
procedure ActivityFromRecurringActivity(record ActVc templateActr)
begin
  Integer wn;
  record ActVc Actr;

  RecordCopy(Actr,templateActr);  
  Actr.SerNr = -1;
  Actr.UUID = StringToUUID("");
  Actr.RecurringType = kRecurringTypeNone;
  Actr.TodoFlag = kTodoFlagTodo;
  Actr.CalTimeFlag = kCalTimeFlagNoshow;
  ActVcRecordDefClient(Actr);    
  Actr.PlannedDate = templateActr.TransDate;
  Actr.PlannedTime = templateActr.PlannedTime;
  Actr.RecurringActSerNr = templateActr.SerNr;
  wn = OpenWindow("ActDClass",1,0,"","",Actr);
  return;
end;

global
function Boolean DayWClassCommandNew(Integer wn)
begin
  DoNewActivity(wn,"",-1,kTodoFlagCalendar);  
  DayWClassCommandNew = true;
  return;
end;

global
function Boolean WeekWClassCommandNew(Integer wn)
begin
  DoNewActivity(wn,"",-1,kTodoFlagCalendar);
  WeekWClassCommandNew = true;
  return;
end;

global
function Boolean MonthWClassCommandNew(Integer wn)
begin
  DoNewActivity(wn,"",-1,kTodoFlagCalendar);  
  MonthWClassCommandNew = true;
  return;
end;

global
procedure WeekWClassGregorian()
begin
  record RcVc RepSpec;
  Integer wn;
 
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  RepSpec.Custf = kCalendarGregorian;
  PutWindowRecord(wn,RepSpec);
  SetWindowTitle(wn);
  return;
end;

global
procedure WeekWClassHijri()
begin
  record RcVc RepSpec;
  Integer wn;
 
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  RepSpec.Custf = kCalendarHijri;
  PutWindowRecord(wn,RepSpec);
  SetWindowTitle(wn);
  return;
end;

global
procedure WeekWClassPersian()
begin
  record RcVc RepSpec;
  Integer wn;
 
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  RepSpec.Custf = kCalendarPersian;
  PutWindowRecord(wn,RepSpec);
  SetWindowTitle(wn);
  return;
end;

global
procedure MonthWClassGregorian()
begin
  record RcVc RepSpec;
  Integer wn;
 
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  RepSpec.Custf = kCalendarGregorian;
  PutWindowRecord(wn,RepSpec);
  SetWindowTitle(wn);
  return;
end;

global
procedure MonthWClassHijri()
begin
  record RcVc RepSpec;
  Integer wn;
 
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  RepSpec.Custf = kCalendarHijri;
  PutWindowRecord(wn,RepSpec);
  SetWindowTitle(wn);
  return;
end;

global
procedure MonthWClassPersian()
begin
  record RcVc RepSpec;
  Integer wn;
 
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  RepSpec.Custf = kCalendarPersian;
  PutWindowRecord(wn,RepSpec);
  SetWindowTitle(wn);
  return;
end;

global
procedure HalfYearWClassGregorian()
begin
  record RcVc RepSpec;
  Integer wn;
 
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  RepSpec.Custf = kCalendarGregorian;
  PutWindowRecord(wn,RepSpec);
  SetWindowTitle(wn);
  return;
end;

global
procedure HalfYearWClassHijri()
begin
  record RcVc RepSpec;
  Integer wn;
 
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  RepSpec.Custf = kCalendarHijri;
  PutWindowRecord(wn,RepSpec);
  SetWindowTitle(wn);
  return;
end;

global
procedure HalfYearWClassPersian()
begin
  record RcVc RepSpec;
  Integer wn;
 
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  RepSpec.Custf = kCalendarPersian;
  PutWindowRecord(wn,RepSpec);
  SetWindowTitle(wn);
  return;
end;


/*
global
procedure MonthWClassCalendar()
begin
  record RcVc RepSpec;
  Integer wn;
 
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  RepSpec.Custf = kCalendarPersian;
  PutWindowRecord(wn,RepSpec);
  SetWindowTitle(wn);
  return;
end;
*/

global
function Boolean HalfYearWClassCommandNew(Integer wn)
begin
  DoNewActivity(wn,"",-1,kTodoFlagCalendar);  
  HalfYearWClassCommandNew = true;
  return;
end;

global
function Boolean ToDoWClassCommandNew(Integer wn)
begin
  DoNewActivity(wn,"",-1,kTodoFlagTodo);  
  ToDoWClassCommandNew = true;
  return;
end;

global
function Boolean ConferenceWClassCommandNew(Integer wn)
begin
  record ConfVc Confr;
  Integer nwn;
  string 255 subsetname;
  
  RecordNew(Confr);
  nwn = OpenWindow("ConfDClass",1,wn,"","",Confr);
  if (nwn!=0) then begin
    GetWindowRecord(nwn,Confr);
    if (wn>0) then begin
      subsetname = GetWindowSubset(wn);
      if (blank(subsetname)) then begin
        Confr.Class = kConfClassMailbox;
        Confr.MotherConf = -1;
      end else  begin
        Confr.Class = kConfClassConference;
        Confr.MotherConf = StringToLongInt(subsetname);
      end;
    end;
    PutWindowRecord(nwn,Confr);
  end;
  ConferenceWClassCommandNew = true;
  return;
end;

global
updating procedure MailFromActDsm()
begin
  Integer wn,nwn;
  record ActVc Actr;
  record MailVc Mailr;
  string 255 tstr;

  wn = CurWindow;
  if (WindowState(wn)!=1) then begin
    GetWindowRecord(wn,Actr);  
    if (MailFromActDsmRemote(Actr,Mailr,WindowFormName(wn))==0) then begin
      nwn = OpenWindow("MailDClass",1,0,"","",Mailr);
    end;
  end;  
  return;
end;

global
updating procedure LetFromActDsm()
begin
  Integer wn,nwn;
  record ActVc Actr;
  record LetVc Letr;

  wn = CurWindow;
  if (WindowState(wn)!=1) then begin
    GetWindowRecord(wn,Actr);  
    if (LetFromActDsmRemote(Actr,Letr,false)==0) then begin
      nwn = OpenWindow("LetDClass",1,0,"","",Letr);
    end;
  end;  
  return;
end;

global
updating procedure LetWithQuoteFromActDsm()
begin
  Integer wn,nwn;
  record ActVc Actr;
  record LetVc Letr;

  wn = CurWindow;
  if (WindowState(wn)!=1) then begin
    GetWindowRecord(wn,Actr);  
    if (LetFromActDsmRemote(Actr,Letr,true)==0) then begin
      nwn = OpenWindow("LetDClass",1,0,"","",Letr);
    end;
  end;  
  return;
end;

global
updating procedure ORFromActDsm()
begin
  record ORVc ORr;
  record ActVc Actr;
  Integer nwn,wn;
  LongInt r;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,Actr);
//    if (UserModuleAccess("modSO")) then begin // Some products has the Order in another module...
//    if (UserCanAction("QTToOrd",true)) then begin
    if (nonblank(Actr.CUCode)) then begin
      r = RecordAction_raPasteActInOrder(ORr,Actr);
      if (r!=-1) then begin
        nwn = OpenWindow("ORDClass",1,0,"","",ORr);
        CloseWindow(wn);
        UpdateBrowses("ORVc");
        CustMessages("ORVc",ORr.CustCode);
      end else begin
        Beep;
      end;
    end else begin
      Beep;
    end;
//    end else begin
//      MessageBox(1274,"");
//    end;
  end else begin
    Beep;
  end;
  return;
end;

global
updating procedure QTFromActDsm()
begin
  record QTVc QTr;
  record ActVc Actr;
  Integer nwn,wn;
  LongInt r;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,Actr);
//    if (UserModuleAccess("modSO")) then begin // Some products has the Order in another module...
//    if (UserCanAction("QTToOrd",true)) then begin
    if (nonblank(Actr.CUCode)) then begin
      r = RecordAction_raPasteActInQT(QTr,Actr);
      if (r!=-1) then begin
        nwn = OpenWindow("QTDClass",1,0,"","",QTr);
        CloseWindow(wn);
        UpdateBrowses("QTVc");
        CustMessages("QTVc",QTr.CustCode);
      end else begin
        Beep;
      end;
    end else begin
      Beep;
    end;
//    end else begin
//      MessageBox(1274,"");
//    end;
  end else begin
    Beep;
  end;
  return;
end;

global
procedure CUStatusActDsm()
begin
  record ActVc Actr;
  record CUVc CUr;
  record RcVc RepSpec;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,Actr);
  if (nonblank(Actr.CUCode)) then begin
    CUr.Code = Actr.CUCode;
    if (ReadFirstMain(CUr,1,true)) then begin end;
    if (CUr.CUType!=0) then begin
      SetupCustPS2Rn(Actr.CUCode,RepSpec);
      RunReport(RepSpec,0);
    end;
  end;
  return;
end;

global
procedure HalfYearWClassOverview()
begin
  record RcVc RepSpec;
  Integer wn,nwn;

  wn = CurWindow;
  GetWindowRecord(wn,RepSpec)
//remove this line  RepSpec.sStartDate = AddMonth(CurrentDate,-1);    
  nwn = OpenWindow("HalfYearWClass",1,0,"","",RepSpec);
  return;
end;

global
procedure HalfYearWClassMonth()
begin
  record RcVc RepSpec;
  Integer wn,nwn;

  wn = CurWindow;
  GetWindowRecord(wn,RepSpec)
  RepSpec.sStartDate = AddDay(CurrentDate,-GetDay(CurrentDate)+1);    
  nwn = OpenWindow("MonthWClass",1,0,"","",RepSpec);
  return;
end;

global
procedure HalfYearWClassWeek()
begin
  record RcVc RepSpec;
  Integer wn,nwn;

  wn = CurWindow;
  GetWindowRecord(wn,RepSpec)
  RepSpec.sStartDate = CurrentDate;
  if (GetDateId(RepSpec.sStartDate)!=1) then begin
    RepSpec.sStartDate = AddDay(RepSpec.sStartDate,-GetDateId(RepSpec.sStartDate)+1);
  end;
  RepSpec.sEndDate = AddDay(RepSpec.sStartDate,6);
  nwn = OpenWindow("WeekWClass",1,0,"","",RepSpec);
  return;
end;

global
procedure HalfYearWClassDay()
begin
  record RcVc RepSpec;
  Integer wn,nwn;

  wn = CurWindow;
  GetWindowRecord(wn,RepSpec)
  RepSpec.sStartDate = CurrentDate;
  nwn = OpenWindow("DayWClass",1,0,"","",RepSpec);
  return;
end;

global 
updating procedure SendInvitationDsm()
begin
  // removed, refer to :SendInvitationDsm2
  
  return;
end;

// To replace  updating procedure SendInvitationDsm()
global 
procedure SendInvitationDsm2()
begin
  Boolean res;
  string 255 errorstr;
  longint errorcode;
  integer wn;
  record ActVc Actr;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,Actr);
    CreateInvitationAndSendRemote(Actr.SerNr);
  end else begin
    MessageBox(1356,errorstr);
  end;
  return;
end;

global
procedure ClientSideMessageRemote(longint errorcode,string messagestr)
begin
  MessageBox(errorcode,messagestr);
end;

global
procedure ActDClassCreateSubTask()
begin
  Integer wn;
  record ActVc Actr;
  
  wn = CurWindow;
  GetWindowRecord(wn,Actr);
  
  DoNewActivity(wn,"",Actr.SerNr,kTodoFlagTodo);
  //UpdateBrowses("ActVc");
  
  return;
end;

global
procedure ProjActDClassCreateSubProj()
begin
  Integer wn;
  record ActVc Actr;
  
  wn = CurWindow;
  GetWindowRecord(wn,Actr);
  
  DoNewActivity(wn,"",Actr.SerNr,kTodoFlagProject);
  //UpdateBrowses("ActVc");
  
  return;
end;

global
function Boolean ToDoWClassPrint(Integer wn,Boolean previewf)
begin
  record RcVc RepSpec;
  
  GetWindowRecord(wn,RepSpec);
  if (previewf==false) then begin
    RepSpec.Media = mtPrinter;
  end else begin
    RepSpec.Media = mtScreen;
  end;
  RepSpec.UsedOnly = 1;
  RepSpec.repname = "ActToDo2Rn";
  RunReport(RepSpec,0);
//  ActToDo2Rn(RepSpec);
  ToDoWClassPrint = true;
  RETURN;
end;

global
function Boolean DayWClassPrint(Integer wn,Boolean previewf)
begin
  record RcVc RepSpec;
  
  GetWindowRecord(wn,RepSpec);
  if (previewf==false) then begin
    RepSpec.Media = mtPrinter;
  end else begin
    RepSpec.Media = mtScreen;
  end;
  RepSpec.UsedOnly = 2;
  RepSpec.flags[1] = 0;
  RepSpec.flags[2] = 0;
  RepSpec.flags[3] = 3;
  RepSpec.flags[4] = 0;
  RepSpec.flags[5] = 0;
  RepSpec.repname = "ActToDo2Rn";
  RunReport(RepSpec,0);
//  ActToDo2Rn(RepSpec);
  DayWClassPrint = true;
  RETURN;
end;

global
function Boolean WeekWClassPrint(Integer wn,Boolean previewf)
begin
  record RcVc RepSpec;
  
  GetWindowRecord(wn,RepSpec);
  if (previewf==false) then begin
    RepSpec.Media = mtPrinter;
  end else begin
    RepSpec.Media = mtScreen;
  end;
  RepSpec.UsedOnly = 2;
  RepSpec.repname = "ActToDo2Rn";
  RepSpec.flags[1] = 0;
  RepSpec.flags[2] = 0;
  RepSpec.flags[3] = 0;
  RepSpec.flags[4] = 0;
  RepSpec.flags[5] = 0;
  RunReport(RepSpec,0);
 // ActToDo2Rn(RepSpec);
  WeekWClassPrint = true;
  RETURN;
end;

global
function Boolean MonthWClassPrint(Integer wn,Boolean previewf)
begin
  record RcVc RepSpec;
  
  GetWindowRecord(wn,RepSpec);
  if (previewf==false) then begin
    RepSpec.Media = mtPrinter;
  end else begin
    RepSpec.Media = mtScreen;
  end;
  RepSpec.UsedOnly = 2;
  RepSpec.repname = "ActToDo2Rn";
  RepSpec.flags[1] = 0;
  RepSpec.flags[2] = 0;
  RepSpec.flags[3] = 0;
  RepSpec.flags[4] = 0;
  RepSpec.flags[5] = 0;
  RunReport(RepSpec,0);
//  ActToDo2Rn(RepSpec);
  MonthWClassPrint = true;
  return;
end;

global
function Boolean ToDoWClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  record RcVc RepSpec; 
  Date td; 
  Boolean found;
  record ActVc Actr;
  string 255 index;
  
  res = false;
  switch (fieldname) begin
    case "Period2Str":
      GetWindowRecord(wn,RepSpec);
      In2Period(RepSpec.Period2Str,RepSpec.sStartDate,RepSpec.sEndDate);
      PutWindowRecord(wn,RepSpec);
    case "f1":
      GetWindowRecord(wn,RepSpec);

      index = "UserMain:" & RepSpec.f1;
      Actr.TodoFlag = 1;  
      td.year = 1980;
      td.month = 1;
      td.day = 1;
      Actr.TransDate = td;
      found = true;
      while (LoopKey(index,Actr,2,found)) begin
        if (Actr.TodoFlag!=1) then begin found = false; end;
        if (found) then begin
          goto LLoopEnd;
        end;;
      end;;
LLoopEnd:;  
      if (found) then begin
        if (nonblank(Actr.TransDate)) then begin
          RepSpec.sStartDate = Actr.TransDate;
        end;
        RepSpec.Period2Str = RepSpec.sStartDate & ":" & RepSpec.sEndDate;
      end;
      In2Period(RepSpec.Period2Str,RepSpec.sStartDate,RepSpec.sEndDate);
      PutWindowRecord(wn,RepSpec);
  end;

  ToDoWClassAfterEditField = res;
  return;
end;

global
procedure ToDoWSearchLsm()
begin
  Integer wn,nwn;
  record RcVc RepSpec;

  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);  
  nwn = OpenWindow("SearchToDoWRClass",0,wn,"","",RepSpec);
  DeselectWindow(nwn,false);
  RepSpec.Scaling = 1;
  RepSpec.Media = mtScreen;
  RepSpec.repname = "SearchToDoWRn";
  RepSpec.critname = "SearchToDoWRClass";
  PutWindowRecord(nwn,RepSpec);  
  WindowFieldGoto(nwn,RepSpec,-1,"f6",true);
  return;
end;

global
procedure ToDoWListLsm()
begin
  Integer wn,nwn;
  record RcVc RepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);  
  nwn = OpenWindow("ActToDo2RClass",0,wn,"","",RepSpec);
  DeselectWindow(nwn,false);
  RepSpec.Scaling = 1;
  RepSpec.Media = mtScreen;
  RepSpec.repname = "ActToDo2Rn";
  RepSpec.critname = "ActToDo2RClass";
  PutWindowRecord(nwn,RepSpec);  
  WindowFieldGoto(nwn,RepSpec,-1,"f6",true);
  return;
end;

global
procedure CopyToLocalCalendarDsm()
begin
  CopyToLocalCalendar;
  return;
END;

global
procedure ActDClassEditRow(integer wn,Integer rwn)
begin
  record ActVc Actr;
  row ActVc Actrw;
  record RcVc RepSpec;
  integer nwn;
  
  GetWindowRecord(wn,Actr);
  MatRowGet(Actr,rwn,Actrw);
  RepSpec.long1 = rwn;
  RepSpec.f1 = Actrw.TextCode;
  RepSpec.f2 = Actrw.Text;
  
  nwn = OpenWindow("ActRowDClass",0,wn,"","",RepSpec);
  
end;

global
procedure ActDClassAddRow(Integer wn,Integer rwn)
begin
  record ActVc Actr;
  row ActVc Actrw;

  GetWindowRecord(wn,Actr);
  MatRowGet(Actr,rwn,Actrw);
//  Actrw.stp = kInvoiceRowTypeNormal;
  MatRowPut(Actr,rwn,Actrw);
  PutWindowRecord(wn,Actr);
  ActDClassEditRow(wn,rwn);
  return;
end;

global
function boolean ActRowDClassOnOKWindow(Integer wn)
begin
  record RcVc RepSpec;
  record ActVc Actr;
  row ActVc ActRw;
  integer mwn;
  integer rwn;
  
  mwn = MotherWindow(wn);
  GetWindowRecord(wn,RepSpec);
  GetWindowRecord(mwn,Actr);
  rwn = RepSpec.long1;
  
  MatRowGet(Actr,rwn,Actrw);
  
  Actrw.TextCode = RepSpec.f1;
  Actrw.Text = RepSpec.f2;
  
  MatRowPut(Actr,rwn,Actrw);
  PutWindowRecord(mwn,Actr);
  
  ActRowDClassOnOKWindow = true;
end;

global
procedure ActDClassBarcodeData(Integer wn,string bcdata)
begin
  record INVc INr;
  record CUVc CUr;
  record ActVc Actr;
  record BarcodeVc BCr;
  
  BCr.Barcode = bcdata;
  
  if (ReadFirstMain(BCr,1,true)) then begin
    if (BCr.CustCode<>"") then begin
      CUr.Code = BCr.CustCode;
      if (ReadFirstMain(CUr,1,true)==false) then begin
        RecordClear(CUr);
      end;
    end;
  end;
  
  if (CUr.Code<>"") then begin
    if (GetFirstItem(bcdata,INr)==false) then begin
      StopAlert(USetStr(2292) & ": " & bcdata);
      goto LActDClassBarcodeData;
    end;
  end;
  
  GetWindowRecord(wn,Actr);
  
  if (CUr.Code<>"") then begin
    Actr.CUCode = CUr.Code;
    PutWindowRecord(wn,Actr);
    ActDClassCUCodeEFAfter(wn,-1,-1,1);
  end;
  
  GetWindowRecord(wn,Actr);
  
  if (INr.Code<>"") then begin
    Actr.ItemCode = INr.Code;
    PutWindowRecord(wn,Actr);
    ActDClassItemCodeEFAfter(wn,-1,-1,1);
  end;
    
LActDClassBarcodeData:;
  return;
end;

global
updating procedure AddToFavActTypeLsm()
begin
  record ActTypeVc ActTyper;
  record FavActTypeVc FATr;
  Integer wn,i,nwn;
  Boolean selected;
  
  wn = CurWindow;  
  i = 1;
  while (GetRecordFromBrowse(ActTyper,wn,i)) begin
    RecordNew(FATr);
    FATr.UserCode = CurrentUser;
    FATr.ActType = ActTyper.Code;
    FATr.ActTypeGr = ActTyper.ActTypeGr;
    FATr.Comment = ActTyper.Comment;
    RecordStore(FATr,true);
    selected = true;
    i = i + 1;
  end;  
  if (selected==false) then begin
    RecordNew(FATr);
    FATr.UserCode = CurrentUser;
    nwn = OpenWindow("FavActTypeDClass",1,0,"","",FATr);
    WindowFieldGoto(nwn,FATr,-1,"ActType",true);
  end;
  return;
end;

global
procedure OpenMainTaskActDsm()
begin
  Integer wn,nwn;
  record ActVc Actr;
  record ActVc mainActr;

  wn = CurWindow;  
  GetWindowRecord(wn,Actr);
  mainActr.SerNr = Actr.Mother;
  if (ReadFirstMain(mainActr,1,true)) then begin
    nwn = OpenWindow("ActDClass",1,0,"","",mainActr);
  end;
  return;
end;

global
procedure OpenMainProjActDsm()
begin
  Integer wn,nwn;
  record ActVc Actr;
  record ActVc mainActr;

  wn = CurWindow;  
  GetWindowRecord(wn,Actr);
  mainActr.SerNr = Actr.Mother;
  if (ReadFirstMain(mainActr,1,true)) then begin
    nwn = OpenWindow("ProjActDClass",1,0,"","",mainActr);
  end;
  return;
end;

global
procedure ProjActStatusDsm()
begin
  Integer wn;
  record ActVc Actr;
  record RcVc RepSpec;

  wn = CurWindow;  
  GetWindowRecord(wn,Actr);
  RepSpec.Media = mtScreen;
  RepSpec.f1 = Actr.SerNr;
  RepSpec.repname = "ActProjStatRn";
  RunReport(RepSpec,0);
  return;
end;

global
updating procedure DropActDClassOnActDClass(Integer frwn,Integer town)
begin
  record ActVc newActr;
  record ActVc Actr;
  record ActVc oldActr;
  record ActVc mainActr;
  Boolean testf;

  if (WindowState(frwn)!=Rs_normal) then begin
    goto LDropActDClassOnActDClass;
  end;
  if (WindowState(town)==Rs_insert) then begin
    goto LDropActDClassOnActDClass;
  end;
  testf = true;
  if (testf) then begin
    GetWindowRecord(frwn,Actr);
    ReadFirstMain(Actr,1,true)
    GetWindowRecord(town,mainActr);
    ReadFirstMain(mainActr,1,true)
    if (Actr.Mother<=0) and (mainActr.SerNr>0) then begin
      if (Actr.SerNr!=mainActr.SerNr) then begin
        RecordCopy(oldActr,Actr);
        Actr.Mother = mainActr.SerNr;
        RecordUpdate(oldActr,Actr,false);
      end;
    end;
  end;
LDropActDClassOnActDClass:;  
  return;
end;

global
updating procedure WayListFromActDsm()
begin
  record WayListVc WayListr;
  record ActVc Actr;
  Integer nwn,wn;
  LongInt r;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin //Rs_normal
    GetWindowRecord(wn,Actr);
    r = RecordAction_raPasteActInWayList(WayListr,Actr);
    if (r!=-1) then begin
      nwn = OpenWindow("WayListDClass",1,0,"","",WayListr);
    end else begin
      Beep;
    end;
  end else begin
    Beep;
  end;
  return;
end;

global
updating procedure SignActDsm()
begin
  record RcVc RepSpec;
  Integer nwn,wn;
  record ActVc Actr;
  
  wn = CurWindow;
  if (WindowState(wn)!=Rs_insert) then begin
    GetWindowRecord(wn,Actr);
    nwn = OpenWindow("SignatureWClass",1,wn,"","",RepSpec);
  end else begin
    Beep;
  end;
end;

function Boolean ActDClassOpenFromSerNrRecord(Integer wn)
begin
  Boolean res;
  record ActVc Actr;
  record ActVc theActr;
  record RLinkVc RLr;
  record POVc POr;
  record IVVc IVr;
  record TBBUVc TBBUr;
  record VIVc VIr;
  record ExpVc Expr;
  record IntORVc IntORr;
  record QTVc QTr;
  record ORVc ORr;
  record PUVc PUr;
  record SDVc SDr;
  record OPVc OPr;
  record LeaveApplicationVc LAr;
  record LeaveTransferVc LTr;
  
  res = false;
  GetWindowRecord(wn,Actr);
  if (Actr.TodoFlag!=kTodoFlagApproval) then begin
    goto LActDClassOpenFromSerNrRecord;
  end;
  if (ReadRecordLink(Actr,1,theActr,RLr)) then begin
    OpenWindow("ActDClass",0,0,"","",theActr);
    res = true;
    goto LActDClassOpenFromSerNrRecord;
  end;

  if (ReadRecordLink(Actr,1,POr,RLr)) then begin
    OpenWindow("PODClass",0,0,"","",POr);
    res = true;
    goto LActDClassOpenFromSerNrRecord;
  end;

  if (ReadRecordLink(Actr,1,PUr,RLr)) then begin
    OpenWindow("PUDClass",0,0,"","",PUr);
    res = true;
    goto LActDClassOpenFromSerNrRecord;
  end;
  if (ReadRecordLink(Actr,1,VIr,RLr)) then begin
    OpenWindow("VIDClass",0,0,"","",VIr);
    res = true;
    goto LActDClassOpenFromSerNrRecord;
  end;
  if (ReadRecordLink(Actr,1,OPr,RLr)) then begin
    OpenWindow("OPDClass",0,0,"","",OPr);
    res = true;
    goto LActDClassOpenFromSerNrRecord;
  end;
  if (ReadRecordLink(Actr,1,IntORr,RLr)) then begin
    OpenWindow("IntORDClass",0,0,"","",IntORr);
    res = true;
    goto LActDClassOpenFromSerNrRecord;
  end;
  if (ReadRecordLink(Actr,1,Expr,RLr)) then begin
    OpenWindow("ExpDClass",0,0,"","",Expr);
    res = true;
    goto LActDClassOpenFromSerNrRecord;
  end;
  if (ReadRecordLink(Actr,1,QTr,RLr)) then begin
    OpenWindow("QTDClass",0,0,"","",QTr);
    res = true;
    goto LActDClassOpenFromSerNrRecord;
  end;
  if (ReadRecordLink(Actr,1,ORr,RLr)) then begin
    OpenWindow("ORDClass",0,0,"","",ORr);
    res = true;
    goto LActDClassOpenFromSerNrRecord;
  end;
  if (ReadRecordLink(Actr,1,IVr,RLr)) then begin
    OpenWindow("IVDClass",0,0,"","",IVr);
    res = true;
    goto LActDClassOpenFromSerNrRecord;
  end;
  if (ReadRecordLink(Actr,1,SDr,RLr)) then begin
    OpenWindow("SDDClass",0,0,"","",SDr);
    res = true;
    goto LActDClassOpenFromSerNrRecord;
  end;
  if (ReadRecordLink(Actr,1,TBBUr,RLr)) then begin
    OpenWindow("TBBUDClass",0,0,"","",TBBUr);
    res = true;
    goto LActDClassOpenFromSerNrRecord;
  end;
  if (ReadRecordLink(Actr,1,LAr,RLr)) then begin
    OpenWindow("LeaveApplicationDClass",0,0,"","",LAr);
    res = true;
    goto LActDClassOpenFromSerNrRecord;
  end;
  if (ReadRecordLink(Actr,1,LTr,RLr)) then begin
    OpenWindow("LeaveTransferDClass",0,0,"","",LTr);
    res = true;
    goto LActDClassOpenFromSerNrRecord;
  end;
  if (OuterActDClassOpenFromSerNrRecord(Actr)) then begin
    res = true;
    goto LActDClassOpenFromSerNrRecord;
  end;
LActDClassOpenFromSerNrRecord:;
  ActDClassOpenFromSerNrRecord = res;
end;

global
function Boolean ActDClassOpenRecord(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record ActVc Actr;
  
  GetWindowRecord(wn,Actr);  
  switch (fieldname) begin
    case "Contact":
      res = OpenContactRecord(Actr.Contact,Actr.CUCode);
    case "FromSerNr":
      res = ActDClassOpenFromSerNrRecord(wn);
  end;
  ActDClassOpenRecord = res;
  return;
end;

global
updating procedure ActDClassDeleteSubTask()
begin
  Integer wn,sel;
  record ActVc PActr;
  record ActVc Actr;
  record ActVc fakeActr;
  string 255 tstr;
  LongInt error;
  
  wn = CurWindow;
  GetWindowRecord(wn,PActr);
  sel = SelectedDataListLine(wn);
  Actr.SerNr = StringToLongInt(GetListTag(wn,sel));
  if (ReadFirstMain(Actr,1,true)) then begin
    if (Actr.TodoFlag==kTodoFlagProject) then begin
      if (DelActivity(Actr.SerNr,tstr,error)==false) then begin 
        MessageBox(error,"");
      end else begin 
        UpdateBrowses("ToDoWClass");
        UpdateBrowses("ActVc");
        ProjActDClassOnOpenWindow(wn);
        PutWindowRecord(wn,PActr);
        WindowDoOK(wn,0);
      end;
    end;
  end;
  return;
end;

global
updating procedure ActDEndActivity()
begin
  Integer wn;
  record ActVc Actr;
  record CRMBlock CRMb;
    
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,Actr);
  BlockLoad(CRMb);
  if (Actr.OKFlag==0) then begin
    if (CRMb.ActTimeFromClient!=0) then begin
      Actr.EndDate = CurrentDate;
      Actr.EndTime = CurrentTime;
    end else begin
      ActDEndActivityServer(Actr);
    end;
    Actr.CostTime = TimeDiff(Actr.StartTime,Actr.EndTime);
    PutWindowRecord(wn,Actr);
    SelectWindow(wn);
    if (WindowDoOK(wn,0)) then begin
    end;
  end;
  return;
end;

global
updating procedure OpenTaskManagerOnLoginLsm()
begin
  record LocalLoginBlock LocalMachineLoginb;
  row LocalLoginBlock LocalMachineLoginrw;
  Integer rwcnt,i;
  
  BlockLoad(LocalMachineLoginb);
  rwcnt = MatRowCnt(LocalMachineLoginb);
  if(rwcnt>0) then begin
    for(i=0;i<rwcnt;i=i+1) begin
      MatRowGet(LocalMachineLoginb,i,LocalMachineLoginrw);
      if (LocalMachineLoginrw.OnLoginWindow==11 and LocalMachineLoginrw.Code==CurrentUser) then begin
        MatRowDelete(LocalMachineLoginb,i);
        goto LOpenTaskManagerOnLoginLsm;
      end;
    end;
    LocalMachineLoginrw.OnLoginWindow = StringToInt("11");
    LocalMachineLoginrw.Code = CurrentUser;
    MatRowPut(LocalMachineLoginb,rwcnt,LocalMachineLoginrw);
  end else begin
    LocalMachineLoginrw.OnLoginWindow = StringToInt("11");
    LocalMachineLoginrw.Code = CurrentUser;
    MatRowPut(LocalMachineLoginb,rwcnt,LocalMachineLoginrw);
  end;
LOpenTaskManagerOnLoginLsm:;
  BlockStore(LocalMachineLoginb);
  return;
end;

global
updating procedure ActDClassApproveActivity()
begin
  record ActVc Actr;
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,Actr);
  
  if (Actr.TodoFlag!=kTodoFlagApproval) then begin goto LActDClassApproveActivity; end;
  if (Actr.OKFlag!=0) then begin goto LActDClassApproveActivity; end;
  if (SetInSet(CurrentUser,Actr.MainPersons)==false) then begin goto LActDClassApproveActivity; end;
  ApproveActivity(Actr,false);
  PutWindowRecord(wn,Actr);
  WindowDoOK(wn,0);
  
LActDClassApproveActivity:;
end;

global
updating procedure ActDClassForwardActivity()
begin
  record ActVc Actr;
  record AcceptanceRulesVc Acptr;
  record ActTypeVc ATr;
  Integer wn;
  record POVc POr;
  Boolean found;
  record RLinkVc RLr;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,Actr);
  
  if (Actr.TodoFlag!=kTodoFlagApproval) then begin goto LActDClassForwardActivity; end;
  if (Actr.OKFlag!=0) then begin goto LActDClassForwardActivity; end;  
  if (SetInSet(CurrentUser,Actr.MainPersons)==false) then begin goto LActDClassForwardActivity; end;
  ForwardActivity(Actr,false);
  PutWindowRecord(wn,Actr);
  WindowDoOK(wn,0);
  
LActDClassForwardActivity:;
end;

global
updating procedure ActDClassRejectActivity()
begin
  record ActVc Actr;
  record AcceptanceRulesVc Acptr;
  record ActTypeVc ATr;
  Integer wn;
  record POVc POr;
  Boolean found;
  record RLinkVc RLr;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,Actr);
  
  if (Actr.TodoFlag!=kTodoFlagApproval) then begin goto LActDClassRejectActivity; end;
  if (Actr.OKFlag!=0) then begin goto LActDClassRejectActivity; end;
  if (SetInSet(CurrentUser,Actr.MainPersons)==false) then begin goto LActDClassRejectActivity; end;
  RejectActivity(Actr,false);
  PutWindowRecord(wn,Actr);
  WindowDoOK(wn,0);
  
LActDClassRejectActivity:;
end;

global
updating procedure ActDClassSendFYI()
begin
  record RcVc RepSpec;
  
  OpenWindow("SelectFYIWClass",0,CurWindow,"","",RepSpec);
end;

global
procedure ActDClassOpenApprovalRecord()
begin
  ActDClassOpenFromSerNrRecord(CurWindow);
end;

procedure ActDClassOpenApprovalAttachedFiles(record ActVc Actr)
begin
  record RLinkVc RLr;
  Boolean found,testf;
  vector Boolean vopenf;
  Integer compnr,attnr;
  record Attach2Vc Attachr;
  string 255 recid;
  
/*
  recid = BuildRecordIdStr(Actr,CurrentCompany);
  found = true;
  RLr.FromRecidStr = recidstr;
  while (LoopKey("MainKey",RLr,1,found)) begin
    if (RLr.FromRecidStr!=recidstr) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (RLr.ToRecidStr==skiprecidstr) then begin testf = false; end;
      if (vopenf[RLr.FromRecidStr]) then begin testf = false; end;
      if (testf) then begin
        OpenRecordLink(0,RLr.ToRecidStr,0);
        vopenf[RLr.ToRecidStr] = true;
      end;
    end;
  end;
*/
  attnr = 1;
  while (ReadRecordLink(Actr,attnr,Attachr,RLr)) begin
    OpenRecordLink(0,RLr.ToRecidStr,0);
    attnr = attnr + 1;
  end;
  
  return;
end;

global
procedure ActDClassOpenApprovalAttach()
begin
  record ActVc Actr;
  Array record RlinkVc aRLr;
  record RlinkVc RLr;
  Integer i;
  
  GetWindowRecord(CurWindow,Actr);
  if (Actr.TodoFlag!=kTodoFlagApproval) then begin
    goto LActDClassOpenApprovalAttach;
  end;
  if (ApprovalActvityAttachments(Actr,aRLr)) then begin
    for (i=0;i<aRLr.length;i=i+1) begin
      RLr = aRLr[i];
      OpenRecordLink(0,RLr.ToRecidStr,0);
    end;
  end;
//  if (true) then begin
//    ActDClassOpenApprovalAttachedFiles(Actr);
//  end;
LActDClassOpenApprovalAttach:;  
  return;
end;

global
updating procedure RemoveFavActTypeLsm()
begin
  record FavActTypeVc FATr;
  LongInt i;
  Integer wn;
  
  wn = CurWindow;
  i = 1;
  while (GetRecordFromBrowse(FATr,wn,i)) begin
    RecordDelete(FATr);
    i = i + 1;
  end;
  UpdateBrowses("FavActTypeVc");
end;

global
updating procedure ActVcCreateActivity()
begin
  Integer wn,nwn;
  record ActVc Actr;
  record ActVc wkfActr;

  wn = CurWindow;
  GetWindowRecord(wn,Actr);
  RecordNew(wkfActr);
  ActVcRecordDefClient(wkfActr);
  if (CreateActFromActDsm(Actr,wkfActr)==0) then begin
    nwn = OpenWindow("ActDClass",1,0,"","",wkfActr);
    SetRLink(wn,true);  
  end;
  return;
end;
