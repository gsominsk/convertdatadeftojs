external procedure ActVcRecordDefClient(var record ActVc);
remote updating function Boolean MakeActFromHRMPA(record HRMPAVc,var record ActVc);

function Boolean HRMPADClassPerfRatingEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record HRMPAVc HRMPAr;
  row HRMPAVc HRMPArw;
  record HRMPRVc HRMPRr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,HRMPAr);
    MatRowGet(HRMPAr,rownr,HRMPArw);
    HRMPRr.Code = HRMPArw.PerfRating;
    ReadFIrstMain(HRMPRr,1,true);
    HRMPArw.PerfRatingName = HRMPRr.Name;
    MatRowPut(HRMPAr,rownr,HRMPArw);
    PutWindowRecord(wn,HRMPAr);
  end;
  HRMPADClassPerfRatingEFAfter = res;
  return;
end;

function Boolean HRMPADClassPerfFactorEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record HRMPAVc HRMPAr;
  row HRMPAVc HRMPArw;
  record HRMPFVc HRMPFr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,HRMPAr);
    MatRowGet(HRMPAr,rownr,HRMPArw);
    HRMPFr.Code = HRMPArw.PerfFactor;
    ReadFIrstMain(HRMPFr,1,true);
    HRMPArw.PerfFactorName = HRMPFr.Name;
    MatRowPut(HRMPAr,rownr,HRMPArw);
    PutWindowRecord(wn,HRMPAr);
  end;
  HRMPADClassPerfFactorEFAfter = res;
  return;
end;

function Boolean HRMPADClassEmployeeEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record HRMPAVc HRMPAr;
  record CUVc CUr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,HRMPAr);
    CUr.Code = HRMPAr.Employee;
    ReadFIrstMain(CUr,1,true);
    HRMPAr.EmployeeName = CUr.Name;
    PutWindowRecord(wn,HRMPAr);
  end;
  HRMPADClassEmployeeEFAfter = res;
  return;
end;

function Boolean HRMPADClassInterviewerEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record HRMPAVc HRMPAr;
  record CUVc CUr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,HRMPAr);
    CUr.Code = HRMPAr.Interviewer;
    ReadFIrstMain(CUr,1,true);
    HRMPAr.InterviewerName = CUr.Name;
    PutWindowRecord(wn,HRMPAr);
  end;
  HRMPADClassInterviewerEFAfter = res;
  return;
end;

global
function Boolean HRMPADClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "Employee": res = HRMPADClassEmployeeEFAfter(wn,changed!=0);
    case "Interviewer": res = HRMPADClassInterviewerEFAfter(wn,changed!=0);
    case "PerfFactor": res = HRMPADClassPerfFactorEFAfter(wn,rownr,changed!=0);
    case "PerfRating": res = HRMPADClassPerfRatingEFAfter(wn,rownr,changed!=0);
  end;
  HRMPADClassAfterEditField = res;
  return;
end;

global
function Boolean HRMPADClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record HRMPAVc HRMPAr;
  
  res = true;
  switch (wnst) begin
    case Rs_update:
      GetPrevWindowRecord(wn,HRMPAr);
      if (HRMPAr.OKFlag!=0) then begin
        res = false;
      end;
  end;
  HRMPADClassActiveEditField = res;
  return;
end;

global
function Boolean HRMPADClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record HRMPAVc HRMPAr;
  Integer err;
 
  res = true;
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,HRMPAr);
      if (HRMPAr.OKFlag!=0) then begin
        res = false;
        if (UserCanAction("UnOKAll",false)) then begin
          res = true;
        end;
      end;
    case Rs_update:
      GetPrevWindowRecord(wn,HRMPAr);
      if (HRMPAr.OKFlag!=0) then begin
        res = false;
      end;
  end;  
  HRMPADClassOKFlagButtonAction = res;
  return;
end;

global
updating procedure ActFromHRMPADsm()
begin
  record HRMPAVc HRMPAr;
  record ActVc Actr;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//normal
    GetWindowRecord(wn,HRMPAr);
    RecordNew(Actr);
    ActVcRecordDefClient(Actr);    
    if (MakeActFromHRMPA(HRMPAr,Actr)) then begin
      nwn = OpenWindow("ActDClass",1,0,"","",Actr);
      SetRLink(wn,true);  
    end;
  end;
  return;
end;

global
updating procedure HRMPAVcCreateActivity()
begin
  ActFromHRMPADsm;
  return;
end;
