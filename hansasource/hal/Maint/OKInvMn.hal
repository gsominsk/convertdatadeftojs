external function Integer IVTestApprovalStatus(record IVVc);
external updating function Boolean RecordAction_rlIVLOK(var record IVVc,Boolean,var Integer);

global
updating function boolean DoOKInvMn(record RcVc RepSpec,Boolean singlef)
begin
  LongInt ifr,ito;
  record IVVc IVr;
  Boolean found,test;
  Boolean res;
  Integer flushcnt;
  
  res = false;

  ifr = FirstInRange(RepSpec.f1,10);
  ito = LastInRange(RepSpec.f1,10);
  IVr.SerNr = ifr;
  IVr.OKFlag = 0;
  found = true;
  while (LoopKey("OKFlag",IVr,2,found)) begin
    test = true;
    if (found) then begin
      if ((ito!=-1) and (IVr.SerNr>ito)) then begin      
        found = false;
      end;
      if (IVr.OKFlag<>0) then begin
        found = false;
      end;
    end;
    test = found;
    if (test) then begin
      test = IVTestApprovalStatus(IVr)==0;
    end;
    if (test) then begin
      if (RecordAction_rlIVLOK(IVr,false,flushcnt)) then begin
        res = true;
        if (singlef) then begin
          //LogText(0,"OKd invoice no. " & IVr.SerNr);
          UserTrace(IVr.SerNr,M4Long);
          goto DoLOKInvMn;
        end else begin
          StepBack(IVr);
        end;
      end;
    end;
    UserTrace(IVr.SerNr,M4Long);        
  end;
DoLOKInvMn:;
  DoOKInvMn = res;
  return;
end;

global
updating procedure OKInvMn(record RcVc RepSpec)
begin
  boolean retval;
  
  /* Erik asked to remov from maintenances
  if (UserCanAction("InvOK",true)==false) then begin
    MessageBox(1274,StringFromStringSet(3,"InvOK"));
    goto LOKInvMn;
  end;
  */
  
  retval = DoOKInvMn(RepSpec,false);
  
LOKInvMn:;
  return;
end;

global
procedure OKInvNSMn(record RcVc RepSpec)
begin
  LongInt loops;
  
  /*
  if (UserCanAction("InvOK",true)==false) then begin
    MessageBox(1274,StringFromStringSet(3,"InvOK"));
    goto LOKInvNSMn;
  end;
  */
  
  
  loops = 0;

  
  while (qupdating.DoOKInvMn(RepSpec,true)) begin
    //LogText(0,"loops = " & loops);
    //loops = loops + 1;
    //
  end;
  
LOKInvNSMn:;
  return;
end;