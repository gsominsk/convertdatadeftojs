external procedure CheckFlush(var Integer,Integer);
external function LongInt FindReservation(string,Date,Time);
external updating function Boolean JobToShopBask(var record JobVc,record ResTypeVc,record HotelBlock,Record RcVc);

global
function Boolean TimeIsEarlier(time a,time b)
begin
  val ta,tb;
  Boolean res;
  
  res = true;
  ta = TimeToVal(a);
  tb = TimeToVal(b);
  if (ta>tb) then begin
    res = false;
  end;
  TimeIsEarlier = res;
  return;
end;

global 
updating procedure UpdateCustAccMn(record RcVc RepSpec)
begin
  Record ResTypeVc ResTyper;
  Record ResVc Resr;
  Record JobVc Jobr;
  Boolean TsHr,testf;
  val qty,Discount;
  LongInt sernr,TransNumber,i,n;
  Date StartPoint,EndPoint;
  Time StartTime,EndTime;
  String 50 InvoiceItem,Comment,CustCode;
  LongInt Resnro;
  Date blankd;  
  record HotelBlock HotelSettings;
  Integer flushcnt;
  
  Blockload(HotelSettings); 
  TsHr = true;
  if (blank(RepSpec.f1)) then begin TsHr = false; end;
  if (BlankDate(RepSpec.sStartDate)) then begin TsHr = false; end;
  if (BlankTime(RepSpec.sStartTime)) then begin TsHr = false; end;
  Resr.Code = RepSpec.f2;
  while (LoopMain(Resr,1,TsHr)) begin
    testf = true;
    if (nonblank(RepSpec.f2)) then begin
      if (Resr.Code<>RepSpec.f2) then begin testf = false; end;
    end;
    ResTyper.Code = Resr.Type;
    if ReadFirstMain(ResTyper,1,true) then begin
      if (ResTyper.ChargeMethod<>0) then begin
        testf = false;
      end;
    end;  
    if (testf) then begin 
      sernr = FindReservation(Resr.Code,RepSpec.sStartDate,RepSpec.sStartTime);
      if (sernr<>-1) then begin
        Jobr.SerNr = sernr;
        if (ReadFirstMain(Jobr,1,true)) then begin 
          if (Jobr.ResStatus==RepSpec.f1) then begin
            if JobToShopBask(Jobr,ResTyper,HotelSettings,RepSpec) then begin end;
            CheckFlush(flushcnt,10);
          end;  
        end;
      end; 
    end; 
  end;
 return;
end;






