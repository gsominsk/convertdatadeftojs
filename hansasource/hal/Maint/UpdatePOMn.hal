external function Integer POApprovalStatus(record POVc,var record AcceptanceRulesVc);
external function Integer VIApprovalStatus(record VIVc,var record AcceptanceRulesVc);
external procedure CheckFlush(var Integer,Integer);
external procedure SetPOFlags(record POVc,Boolean);

procedure RecalcPOWithOneDropSH(record MainStockBlock MSb,var record POVc POr,record DropSHVc DropSHr)
begin
  Boolean pufound,updf;
  Integer i,rwcnt,orrwcnt;
  record INVc INr;
  row POVc POrw;
  row DropSHVc DropSHrw;
  
  pufound = true;
  rwcnt = MatRowCnt(DropSHr);
  orrwcnt = MatRowCnt(POr);
  
  if (DropSHr.POOrderNr==POr.SerNr) then begin
    for (i = 0; i<rwcnt; i = i + 1) begin
      MatRowGet(DropSHr,i,DropSHrw);
      if (POrw.ovst==0) then begin
        if ((DropSHrw.POOrdRow>=0) and (DropSHrw.POOrdRow<orrwcnt)) then begin
          MatRowGet(POr,DropSHrw.POOrdRow,POrw);
          updf = true;
          if (MSb.RecevPlainItems!=0) then begin
            INr.Code = POrw.ArtCode;
            if (ReadFirstMain(INr,1,true)) then begin
              if (INr.ItemType==0) or (INr.ItemType==3) then begin
                updf = false;
              end;
            end;
          end;
          
          if (updf) then begin
            POrw.Shipd1 = POrw.Shipd1 + DropSHrw.Ship;
            if (DropSHr.OKFlag<>0) then begin
              POrw.Shipd2 = POrw.Shipd2 + DropSHrw.Ship;
            end;
            MatRowPut(POr,DropSHrw.POOrdRow,POrw);
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure RecalcPOWithOnePU(record MainStockBlock MSb,var record POVc POr,record PUVc PUr)
begin
  Boolean pufound,updf;
  Integer i,rwcnt,orrwcnt;
  record INVc INr;
  row POVc POrw;
  row PUVc PUrw;
  
  pufound = true;
  rwcnt = MatRowCnt(PUr);
  orrwcnt = MatRowCnt(POr);
  
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(PUr,i,PUrw);
    if (POrw.ovst==0) then begin
      if ((PUrw.OrdRow>=0) and (PUrw.OrdRow<orrwcnt)) then begin
        if ((PUrw.PONr==-1 and PUr.PONr==POr.SerNr) or PUrw.PONr==POr.SerNr) then begin
          MatRowGet(POr,PUrw.OrdRow,POrw);
          updf = true;
          if (MSb.RecevPlainItems!=0) then begin
            INr.Code = POrw.ArtCode;
            if (ReadFirstMain(INr,1,true)) then begin
              if (INr.ItemType==0) or (INr.ItemType==3) then begin
                updf = false;
              end;
            end;
          end;
          
          if (updf) then begin
            POrw.Shipd1 = POrw.Shipd1 + PUrw.Quant;
            if (PUr.OKFlag<>0) then begin
              POrw.Shipd2 = POrw.Shipd2 + PUrw.Quant;
            end;
            MatRowPut(POr,PUrw.OrdRow,POrw);
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure RecalcPOWithOneVI(var record POVc POr,record VIVc VIr,record PUVc PUr)
begin
  Integer i,rwcnt,orrwcnt,approvalstate;
  row POVc POrw;
  row VIVc VIrw;
  row PUVc PUrw;
  Boolean treatf;
  record AcceptanceRulesVc Acptr;
  
  rwcnt = MatRowCnt(VIr);
  orrwcnt = MatRowCnt(POr);
  
  approvalstate = POApprovalStatus(VIr,Acptr);
  if ((VIr.Invalid==0) and ((approvalstate==kAcceptanceStateApproved) or (approvalstate==kAcceptanceStateNotRequired))) then begin
    rwcnt = MatRowCnt(VIr);
    
    for (i = 0; i<rwcnt; i = i + 1) begin
      MatRowGet(VIr,i,VIrw);
      if ((VIrw.OrdRow>=0) and (VIrw.OrdRow<orrwcnt)) then begin
        treatf = false;
        
        if (PUr.SerNr==-1) then begin
          treatf = true;
        end;
        
        if (PUr.SerNr<>-1 and PUr.SerNr==VIrw.PUNr and VIr.POSerNr<>POr.SerNr) then begin
          MatRowGet(PUr,VIrw.PURow,PUrw);
          if (PUrw.PONr==POr.SerNr) then begin
            treatf = true;
          end;
        end;
        
        if (treatf) then begin
          MatRowGet(POr,VIrw.OrdRow,POrw);
          if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
            POrw.Invd = POrw.Invd - VIrw.qty;
          end else begin
            POrw.Invd = POrw.Invd + VIrw.qty;
          end;  
          MatRowPut(POr,VIrw.OrdRow,POrw);
        end;
      end;
    end;
  end;
  
  return;
end;

procedure RecalcPOWithOneRetPU(record MainStockBlock MSb,var record POVc POr,record RetPUVc RetPUr)
begin
  Integer i,rwcnt,orrwcnt;
  row POVc POrw;
  row RetPUVc RetPUrw;
  Boolean treatf,updf;
  record INVc INr;
  
  rwcnt = MatRowCnt(RetPUr);
  orrwcnt = MatRowCnt(POr);
  
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(RetPUr,i,RetPUrw);
    if ((RetPUrw.OrdRow>=0) and (RetPUrw.OrdRow<orrwcnt)) then begin
      if ((RetPUrw.PONr==-1 and RetPUr.PONr==POr.SerNr) or RetPUrw.PONr==POr.SerNr) then begin
        MatRowGet(POr,RetPUrw.OrdRow,POrw);
        if (RetPUr.OKFlag<>0) then begin
          updf = true;
          if (MSb.RecevPlainItems!=0) then begin
            INr.Code = POrw.ArtCode;
            if (ReadFIrstMain(INr,1,true)) then begin
              if (INr.ItemType==0) or (INr.ItemType==3) then begin
                updf = false;
              end;
            end;
          end;
          if (updf) then begin
            POrw.Shipd1 = POrw.Shipd1 - RetPUrw.Quant;
            POrw.Shipd2 = POrw.Shipd2 - RetPUrw.Quant;
          end;
        end;
        MatRowPut(POr,RetPUrw.OrdRow,POrw);
      end;
    end;
  end;
  return;
end;

global
updating procedure RecalcPOMn(record RcVc RepSpec)
begin
  record POVc oldPOr;
  record POVc POr;
  record PUVc PUr;
  record DropSHVc DropSHr;
  record RetPUVc RetPUr;
  record VIVc VIr;
  row POVc POrw;
  row PUVc PUrw;
  row DropSHVc DropPUrw;
  row RetPUVc RetPUrw;
  row VIVc VIrw;
  LongInt fror,toor;
  Integer rwcnt,i,orrwcnt,cnt;
  Boolean found,shfound,testf,pufound,updf;
  string 60 keystr;
  record MainStockBlock MSb;
  record INVc INr;
  record VITBlock VITb;
  
  BlockLoad(MSb);
  BlockLoad(VITb);
  if (VITb.TransferItems!=2) then begin
    if (RepSpec.flags[1]!=0) then begin
      MessageBox(22077,"");
      goto LRecalcPOMn;
    end;
  end;
  fror = FirstInRange(RepSpec.f1,10);
  toor = LastInRange(RepSpec.f1,10);
  POr.SerNr = fror;
  found = true;
  while (LoopKey("SerNr",POr,1,found)) begin
    if (found) then begin
      if (nonblank(RepSpec.f1)) then begin
        if (POr.SerNr>toor) then begin
          found = false;
        end;
      end;
    end;
    testf = true;
    if (found==false) then begin
      testf = false;
    end;
    if (POr.Closed<>0) then begin
      if (RepSpec.ArtMode==0) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      RecordCopy(oldPOr,POr);
      orrwcnt = MatRowCnt(POr);
      for (i=0;i<orrwcnt;i=i+1) begin
        MatRowGet(POr,i,POrw);
        if (RepSpec.flags[0]<>0) then begin
          updf = true;
          if (MSb.RecevPlainItems!=0) then begin
            INr.Code = POrw.ArtCode;
            if (ReadFIrstMain(INr,1,true)) then begin
              if (INr.ItemType==0) or (INr.ItemType==3) then begin
                updf = false;
              end;
            end;
          end;
          if (updf) then begin
            POrw.Shipd1 = BlankVal;
            POrw.Shipd2 = BlankVal;
          end;
        end;
        if (RepSpec.flags[1]<>0) then begin
          POrw.Invd = BlankVal;
        end;
        MatRowPut(POr,i,POrw);
      end;
      if (RepSpec.flags[0]<>0) then begin
// find all shipments
        pufound = false;
        PUr.PONr = POr.SerNr;
        shfound = true;
        ResetLoop(PUr);
        
        while (LoopKey("PONr",PUr,1,shfound)) begin
          if (shfound) then begin
            if (PUr.PONr!=POr.SerNr) then begin
              shfound = false;
            end;
          end;
          if (shfound) then begin
            if (PUr.Invalid==0) then begin
              RecalcPOWithOnePU(MSb,POr,PUr);
            end;
          end;
        end;
        
        ResetLoop(PUr);
        RecordClear(PUr);
        while (LoopKey("RowPONr:" & POr.SerNr,PUr,1,shfound)) begin
          if (PUr.Invalid==0) then begin
            RecalcPOWithOnePU(MSb,POr,PUr);
          end;
        end;
        
        DropSHr.POOrderNr = POr.SerNr;
        shfound = true;
        ResetLoop(DropSHr);
        
        while (LoopKey("POOrderNr",DropSHr,1,shfound)) begin
          if (shfound) then begin
            if (DropSHr.POOrderNr!=POr.SerNr) then begin
              shfound = false;
            end;
          end;
          if (shfound) then begin
            if (DropSHr.Invalid==0) then begin
              RecalcPOWithOneDropSH(MSb,POr,DropSHr);
            end;
          end;
        end;

// find all Returned Goods 
        RetPUr.PONr = POr.SerNr;
        shfound = true;
        ResetLoop(RetPUr);
        while (LoopKey("PONr",RetPUr,1,shfound)) begin
          if (shfound) then begin
            if (RetPUr.PONr!=POr.SerNr) then begin
              shfound = false;
            end;
          end;
          
          if (shfound) then begin
            RecordClear(PUr);
            PUr.SerNr = -1;
            RecalcPOWithOneRetPU(MSb,POr,RetPUr);
          end;
        end;
        
        ResetLoop(RetPUr);
        RecordClear(RetPUr);
        while (LoopKey("RowPONr:" & POr.SerNr,RetPUr,1,true)) begin
          if (PUr.Invalid==0) then begin
            RecalcPOWithOneRetPU(MSb,POr,RetPUr);
          end;
        end;        
      end;
      
      if (RepSpec.flags[1]<>0) then begin
// find all invoices 
        VIr.POSerNr = POr.SerNr;
        shfound = true;
        ResetLoop(VIr);
        
        while (LoopKey("POSerNr",VIr,1,shfound)) begin
          if (shfound) then begin
            if (VIr.POSerNr!=POr.SerNr) then begin
              shfound = false;
            end;
          end;
          if (shfound) then begin
            RecordClear(PUr);
            PUr.SerNr = -1;
            RecalcPOWithOneVI(POr,VIr,PUr);
          end;
        end;
        
        ResetLoop(PUr);
        RecordClear(PUr);
        while (LoopKey("RowPONr:" & POr.SerNr,PUr,1,true)) begin
          if (PUr.Invalid==0) then begin
            ResetLoop(VIr);
            while (LoopKey("RowPUNr:" & PUr.SerNr,VIr,1,true)) begin
              RecalcPOWithOneVI(POr,VIr,PUr);
            end;
          end;
        end;
        
      end;
      SetPOFlags(POr,false);
      if (RecordUpdate(oldPOr,POr,false)==0) then begin
      end;
      CheckFlush(cnt,20);
      MaintTrace(POr.SerNr);
    end;
  end;
LRecalcPOMn:;  
  return;
end;

