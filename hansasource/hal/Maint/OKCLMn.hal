external procedure CheckFlush(var Integer,Integer);

updating procedure OKCLIn(string f1,var Integer flushcnt)
BEGIN
  record CLInVc oldCLInr;
  record CLInVc CLInr;
  Boolean TrHs,testf;
  LongInt frclin,toclin;

  frclin = FirstInRange(f1,10);
  toclin = LastInRange(f1,10);

  TrHs = true;
  CLInr.SerNr = frclin;
  while (LoopMain(CLInr,1,TrHs)) begin
    if (toclin>0) then begin
      if (CLInr.SerNr>toclin) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      RecordCopy(oldCLInr,CLInr);
      CLInr.OKFlag = 1;
      if (RecordUpdate(oldCLInr,CLInr,true)==0) then begin
      end;      
      CheckFlush(flushcnt,10);
    end;
  end;  
  RETURN;
END;

updating procedure OKCLOut(string f2,var Integer flushcnt)
BEGIN
  record CLOutVc oldCLOutr;
  record CLOutVc CLOutr;
  Boolean TrHs,testf;
  LongInt frclout,toclout;

  frclout = FirstInRange(f2,10);
  toclout = LastInRange(f2,10);

  TrHs = true;
  CLOutr.SerNr = frclout;
  while (LoopMain(CLOutr,1,TrHs)) begin
    if (toclout>0) then begin
      if (CLOutr.SerNr>toclout) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      RecordCopy(oldCLOutr,CLOutr);
      CLOutr.OKFlag = 1;
      if (RecordUpdate(oldCLOutr,CLOutr,true)==0) then begin
      end;      
      CheckFlush(flushcnt,10);
    end;
  end;  
  RETURN;
END;

global
updating procedure OKCLMn(record RcVc RepSpec)
BEGIN
  Integer flushcnt;

  if (RepSpec.flags[0]!=0) then begin
    OKCLIn(RepSpec.f1,flushcnt);
  end;  
  if (RepSpec.flags[1]!=0) then begin
    OKCLOut(RepSpec.f2,flushcnt);
  end;
  RETURN;
END;