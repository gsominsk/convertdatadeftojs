external procedure CheckFlush(var Integer,Integer);

updating function Boolean OKStockMovVc(record RcVc RepSpec,var Integer flushcnt)
BEGIN
  Boolean res;
  row StockMovVc StockMovrw;
  record StockMovVc StockMovr;
  record StockMovVc oldStockMovr;
  Boolean TrHs;
  Integer fn;
  string 255 tstr;
  Integer i,rwcnt;
  
  res = true;
  StockMovr.TransDate = RepSpec.sStartDate;
  TrHs = true;
  while (LoopKey("TransDate",StockMovr,1,TrHs)) begin
    if (StockMovr.TransDate>RepSpec.sEndDate) then begin TrHs = false; end;
    if (TrHs and (StockMovr.OKFlag==0)) then begin
      RecordCopy(oldStockMovr,StockMovr);
      if (RepSpec.flags[20]!=0) then begin
        rwcnt = MatRowCnt(StockMovr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(StockMovr,i,StockMovrw);
          StockMovrw.NewPrice = blankval;
          MatRowPut(StockMovr,i,StockMovrw);
        end;        
      end;
      StockMovr.OKFlag = 1;
      fn = RecordUpdate(oldStockMovr,StockMovr,true);
      CheckFlush(flushcnt,10);
      tstr = "StockMovVc." & StockMovr.SerNr;
      UserTrace(tstr,M4Str);      
      if (fn!=0) then begin
        res = false;
        goto LOKStockMovVc;      
      end;  
    end;
  end;
LOKStockMovVc:;  
  OKStockMovVc = res;
  RETURN;
END;

updating function Boolean OKSHVc(record RcVc RepSpec,var Integer flushcnt)
BEGIN
  Boolean res;
  record SHVc SHr;
  record SHVc oldSHr;
  Boolean TrHs;
  Integer fn;
  string 255 tstr;
  
  res = true;
  SHr.ShipDate = RepSpec.sStartDate;
  TrHs = true;
  while (LoopKey("ShipDate",SHr,1,TrHs)) begin
    if (SHr.ShipDate>RepSpec.sEndDate) then begin TrHs = false; end;
    if (TrHs and (SHr.OKFlag==0)) then begin
      RecordCopy(oldSHr,SHr);
      SHr.OKFlag = 1;
      fn = RecordUpdate(oldSHr,SHr,true);
      CheckFlush(flushcnt,10);
      tstr = "SHVc." & SHr.SerNr;
      UserTrace(tstr,M4Str);      
      if (fn!=0) then begin
        res = false;
        goto LOKSHVc;      
      end;  
    end;
  end;
LOKSHVc:;  
  OKSHVc = res;
  RETURN;
END;

updating function Boolean OKIVVc(record RcVc RepSpec,var Integer flushcnt)
BEGIN
  Boolean res;
  record IVVc IVr;
  record IVVc oldIVr;
  Boolean TrHs;
  Integer fn;
  string 255 tstr;
  
  res = true;
  IVr.TransDate = RepSpec.sStartDate;
  TrHs = true;
  while (LoopKey("TransDate",IVr,1,TrHs)) begin
    if (IVr.TransDate>RepSpec.sEndDate) then begin TrHs = false; end;
    if (TrHs and (IVr.OKFlag==0)) then begin
      RecordCopy(oldIVr,IVr);
      IVr.OKFlag = 1;
      fn = RecordUpdate(oldIVr,IVr,true);
      CheckFlush(flushcnt,10);
      tstr = "IVVc." & IVr.SerNr;
      UserTrace(tstr,M4Str);      
      if (fn!=0) then begin
        res = false;
        goto LOKIVVc;      
      end;  
    end;
  end;
LOKIVVc:;  
  OKIVVc = res;
  RETURN;
END;

updating function Boolean OKSDVc(record RcVc RepSpec,var Integer flushcnt)
BEGIN
  Boolean res;
  row SDVc SDrw;
  record SDVc SDr;
  record SDVc oldSDr;
  Boolean TrHs;
  Integer fn;
  string 255 tstr;
  Integer i,rwcnt;
  
  res = true;
  SDr.TransDate = RepSpec.sStartDate;
  TrHs = true;
  while (LoopKey("TransDate",SDr,1,TrHs)) begin
    if (SDr.TransDate>RepSpec.sEndDate) then begin TrHs = false; end;
    if (TrHs and (SDr.OKFlag==0)) then begin
      RecordCopy(oldSDr,SDr);
      if (RepSpec.flags[20]!=0) then begin
        rwcnt = MatRowCnt(SDr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(SDr,i,SDrw);
          SDrw.FIFO = blankval;
          SDrw.FIFORowVal = blankval;
          MatRowPut(SDr,i,SDrw);
        end;        
      end;
      SDr.OKFlag = 1;
      fn = RecordUpdate(oldSDr,SDr,true);
      CheckFlush(flushcnt,10);
      tstr = "SDVc." & SDr.SerNr;
      UserTrace(tstr,M4Str);      
      if (fn!=0) then begin
        res = false;
        goto LOKSDVc;      
      end;  
    end;
  end;
LOKSDVc:;  
  OKSDVc = res;
  RETURN;
END;

updating function Boolean OKPUVc(record RcVc RepSpec,var Integer flushcnt)
BEGIN
  Boolean res;
  record PUVc PUr;
  record PUVc oldPUr;
  Boolean TrHs;
  Integer fn;
  string 255 tstr;
  
  res = true;
  PUr.TransDate = RepSpec.sStartDate;
  TrHs = true;
  while (LoopKey("TransDate",PUr,1,TrHs)) begin
    if (PUr.TransDate>RepSpec.sEndDate) then begin TrHs = false; end;
    if (TrHs and (PUr.OKFlag==0)) then begin
      RecordCopy(oldPUr,PUr);
      PUr.OKFlag = 1;
      fn = RecordUpdate(oldPUr,PUr,true);
      CheckFlush(flushcnt,10);
      tstr = "PUVc." & PUr.SerNr;
      UserTrace(tstr,M4Str);      
      if (fn!=0) then begin
        res = false;
        goto LOKPUVc;      
      end;  
    end;
  end;
LOKPUVc:;  
  OKPUVc = res;
  RETURN;
END;

global
updating procedure OKStockMn(record RcVc RepSpec)
BEGIN
  Integer flushcnt;
  
 if (RepSpec.flags[0]!=0) then begin
   if (OKPUVc(RepSpec,flushcnt)==false) then begin goto LOKStockMn; end;
 end;
 if (RepSpec.flags[1]!=0) then begin
   if (OKStockMovVc(RepSpec,flushcnt)==false) then begin goto LOKStockMn; end;
 end;
 if (RepSpec.flags[2]!=0) then begin
   if (OKSDVc(RepSpec,flushcnt)==false) then begin goto LOKStockMn; end;
 end;
 if (RepSpec.flags[3]!=0) then begin
   if (OKIVVc(RepSpec,flushcnt)==false) then begin goto LOKStockMn; end;
 end;
 if (RepSpec.flags[4]!=0) then begin
   if (OKSHVc(RepSpec,flushcnt)==false) then begin goto LOKStockMn; end;
 end;
LOKStockMn:;  
  RETURN;
END;