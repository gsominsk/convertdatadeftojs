external function LongInt DateDiff(Date,Date);
external function roundmode SetRoundModeD(Integer);
external function val FindRentalPrice(record RentResVc,Date);
external function Date AddWorkingDays(Date,LongInt,string,string);
external function val HoursDiff(Date,Time,Date,Time);
external function LongInt DateDiff2(Date,Date);
external function LongInt CountWorkingDays(Date,Date,string,string);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure SetRentResDone(var record RentResVc);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);

updating function Boolean CreateAgreementCharge(var LongInt perdays,LongInt nrofdays,Date frdate,Date trdate,Date chargeend,
                                                record CUVc CUr,LongInt agreementnr,string curcode,string defsite,var record RentResVc RentResr,
                                                record AgreeTypeVc AgreeTyper,Integer perlength,Boolean firstdayofrental,
                                                row AdvPriceRecVc AdvPricerw,var val totsum,Boolean writef)
begin
  record RentChrgVc RentChrgr;
  record RentChrgVc RentChrg2r;
  record RentChrgVc oldRentChrgr;
  val factor,s;
  Boolean testf;
  string 20 custcode;
  string 10 countrycode;
  LongInt i,rwcnt,testi;
  val tv,tv2;
  Boolean res;
  Date todat,thefrdate;
  LongInt wrkdays;
  val invtogo;

  res = false;
  RecordNew(RentChrgr);
// Unfortunatly we have to charge the full Qty because we don't have any support for knowing how many came back and when...
// Any part returns or part deliveries should be handled using Operations - Create Continuing Reservation.
  if (RentResr.RecepyItem==0) then begin
    invtogo = RentResr.RentResDel; // No decimals, but that's fine I guess.
  end else begin
    invtogo = RentResr.RentQuant; // Since a Recepy List isn't beeing dispatched itself, the components does.
  end;
  if (invtogo==0) then begin
    goto LCreateAgreementCharge;
  end;
  rwcnt = 1;
  for (i=0;i<rwcnt;i=i+1) begin
    thefrdate = frdate;
    RentChrgr.SerNr = -1;
    if (firstdayofrental) then begin
      RentChrgr.FrDate = thefrdate;
    end else begin
      RentChrgr.FrDate = AddDay(thefrdate,0);
    end;
    switch (AgreeTyper.perType) begin
      case 1:
        todat = AddDay(thefrdate,nrofdays);
        todat = AddDay(todat,-1);
      otherwise
        todat = AddDay(thefrdate,perdays);
    end;
    RentChrgr.SubSerNr = i;
    RentChrgr.TransDate = trdate;
    RentChrgr.TransNr = RentResr.SerNr;
    RentChrgr.AgreementNr = agreementnr;
    RentChrgr.FileName = -1; // Actual Rental Charges 
    RentChrgr.OrigItem = RentResr.Code;
    RentChrgr.OrigSerialNr = RentResr.SerialNr;
    RentChrgr.Objects = RentResr.Objects;
    RentChrgr.CustOrdNr = RentResr.CustOrdNr;
    RentChrgr.Item = RentResr.InvItem;
    RentChrgr.Spec = RentResr.InvItemName;
    RentChrgr.ItemQuant = invtogo;

//Trace("thefrdate " & thefrdate & " todat " & todat," perdays " & perdays);

    if (RentResr.AdvPrActive==0) then begin
      if ((AgreeTyper.perType==0) and (perlength==1) and (AgreeTyper.ChargeBankHol>0)) then begin
        if (AgreeTyper.ChargeBankHol==2) then begin
          custcode = CUr.Code;
        end else begin
          custcode = "";
        end;
        if (nonblank(CUr.CountryCode)) then begin
          countrycode = CUr.CountryCode;
        end;
//        wrkdays = CountWorkingDays(AddDay(thefrdate,1),AddDay(todat,1),custcode,countrycode);
        wrkdays = CountWorkingDays(thefrdate,todat,custcode,countrycode);
        if (wrkdays==0) then begin
          if (DateDiff2(todat,thefrdate)>0) then begin
            res = true;
          end;
        end;
        RentChrgr.Quant = RentResr.InvQuant * wrkdays;
      end else begin
        RentChrgr.Quant = RentResr.InvQuant;
        if (AgreeTyper.perType==1) then begin
          RentChrgr.Quant = Round(DateDiff(todat,thefrdate)/30.00,SetRoundModeD(0)); // Need to divide by val to get result with decimals
        end;  
      end;
      if (perdays>nrofdays) then begin
        tv = nrofdays;
        tv2 = perdays;
        if (AgreeTyper.perType!=1) then begin 
          RentChrgr.Quant = Round(RentChrgr.Quant * (tv / tv2),SetRoundModeD(2));
        end;  
      end;
      if (nonblankdate(chargeend)) then begin
        if (todat>chargeend) then begin
          if (AgreeTyper.perType==0) then begin
            todat = chargeend;
          end;
          if (AgreeTyper.perType==1) then begin
            tv = perdays;
            tv2 = DateDiff2(chargeend,thefrdate);
            RentChrgr.Quant = Round(tv2 / tv,SetRoundModeD(2));
            todat = chargeend;
          end;
          perdays = DateDiff2(chargeend,thefrdate);
        end;
      end;
      RentChrgr.Price = FindRentalPrice(RentResr,thefrdate);
      RentChrgr.vRebate = RentResr.vRebate;
    end else begin // Advanced pricing
      if (AdvPricerw.PeriodType==0) then begin // Fixed
        RentChrgr.Quant = RentResr.InvQuant;
      end else begin // Running
        RentChrgr.Quant = RentResr.InvQuant * perdays;
      end;
      RentChrgr.Price = AdvPricerw.Price;
      RentChrgr.vRebate = AdvPricerw.vRebate;
      if (nonblank(AdvPricerw.Comment)) then begin
        RentChrgr.Spec = AdvPricerw.Comment;
      end;
    end;
    factor = BlankVal;
    CalcSum(RentChrgr.Quant * RentChrgr.ItemQuant,RentChrgr.Price,factor,RentChrgr.vRebate,s,0);
    RentChrgr.Sum = s;
    totsum = totsum + s;
    RentChrgr.ToDate = todat;
    RentChrgr.InvNr = -1;
    RentChrgr.RowNr = -1;
    RentChrgr.CurncyCode = curcode;
    RentChrgr.Site = RentResr.Site;
    if (blank(RentChrgr.Site)) then begin
      RentChrgr.Site = defsite;
    end;
    if (writef) then begin
      if (RentChrgr.Quant>0) then begin
        RecordCopy(RentChrg2r,RentChrgr);
        if (ReadFirstKey("FillUpCharge",RentChrg2r,9,true)) then begin
          RecordCopy(oldRentChrgr,RentChrg2r);
          RentChrg2r.Quant = RentChrg2r.Quant + RentChrgr.Quant;
          RentChrg2r.ToDate = todat;
          CalcSum(RentChrg2r.Quant*RentChrg2r.ItemQuant,RentChrg2r.Price,factor,RentChrg2r.vRebate,s,0);
          RentChrg2r.Sum = s;
          testi = RecordUpdate(oldRentChrgr,RentChrg2r,true);
        end else begin
          testf = RecordInsert(RentChrgr,true);
        end;
        res = true;
      end;
    end else begin
      res = true;
    end;
  end;
LCreateAgreementCharge:;
  CreateAgreementCharge = res;
  return;
end;

function Boolean FindChargeFromRentQT(LongInt AgreementNr,string item,var val price,var val reb)
begin
  record RentQTVc RentQTr;
  row RentQTVc RentQTrw;
  Integer i,rwcnt;
  Boolean res;
  
  res = false;
  price = 0;
  reb = 0;
  RentQTr.AgreementNr = AgreementNr;
  if (ReadFirstKey("AgreementNr",RentQTr,1,true)) then begin
    rwcnt = MatRowCnt(RentQTr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RentQTr,i,RentQTrw);
      if ((RentQTrw.ArtCode==item) and (RentQTrw.Type==2)) then begin
        price = RentQTrw.Sum;
        reb = RentQTrw.vRebate;
      end;
    end;
    res = true;
  end;
  FindChargeFromRentQT = res;
  return;
end;

updating function Boolean AddChargebleItems(Date trdate,LongInt agreenr,string custcode,string curcode,string defsite,var record RentResVc RentResr)
begin
  record CUVc CUr;
  record INVc INr;
  record RentChrgVc RentChrgr;
  row RentResVc RentResrw;
  Integer i,rwcnt;
  val factor,s;
  Boolean testf;
  string 20 curitemno;
  string 100 curitemname;
  string 20 salesacc,vatcode,tax2code,taxtemplatecode;
  val price,reb,cost,tax2prc,blval;
  Boolean calcprice;
  Date bldat;
  Boolean res;
  Boolean dummyf;
  Time blankt;

  res = false;
  rwcnt = MatRowCnt(RentResr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentResr,i,RentResrw);
    if ((RentResrw.Type==2) and ((RentResrw.Quant - RentResrw.Inv)>0)) then begin
      RecordNew(RentChrgr);
      RentChrgr.SerNr = -1;
      RentChrgr.FrDate = bldat;
      RentChrgr.ToDate = bldat;
      RentChrgr.TransDate = trdate;
      RentChrgr.TransNr = RentResr.SerNr;
      RentChrgr.AgreementNr = agreenr;
      RentChrgr.FileName = 5; // Chargeble Items
      RentChrgr.OrigItem = RentResr.Code;
      RentChrgr.OrigSerialNr = RentResr.SerialNr;
      RentChrgr.Objects = RentResr.Objects;
      RentChrgr.CustOrdNr = RentResr.CustOrdNr;
      RentChrgr.Item = RentResrw.ArtCode;
      RentChrgr.Spec = RentResrw.Spec;
      RentChrgr.ItemQuant = 1;
      RentChrgr.Quant = RentResrw.Quant - RentResrw.Inv;
      RentChrgr.Site = RentResr.Site;
      if (blank(RentChrgr.Site)) then begin
        RentChrgr.Site = defsite;
      end;
      CUr.Code = custcode;
      if (ReadFirstMain(CUr,1,true)==false) then begin
      end;
      INr.Code = RentResrw.ArtCode;
      if (GetItemPriceDiscount3(INr.Code,RentChrgr.Quant,INr,curcode,0,0,0,0,0,
            CUr.LangCode,CUr.CustCat,CUr.PLCode,CUr.RebCode,
            price,curitemname,reb,vatcode,cost,salesacc,
            CUr.ExportFlag,calcprice,CurrentDate,blankt,custcode,true,dummyf,CUr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then begin
        if (price==0) then begin price = BlankVal; end;
        if (reb==0) then begin reb = BlankVal; end;
        if (cost==0) then begin cost = BlankVal; end;
        RentChrgr.Price = price;
        RentChrgr.vRebate = reb;
      end;
      factor = BlankVal;
      if (FindChargeFromRentQT(RentResr.AgreementNr,RentResrw.ArtCode,price,reb)) then begin
        if (reb!=0) then begin
          RentChrgr.vRebate = reb;
        end;
        if (price!=0) then begin
          s = price;
          RentChrgr.vRebate = blval;
          RentChrgr.Price = Round(s / RentChrgr.Quant,SetRoundModeD(3));
        end else begin
          CalcSum(RentChrgr.Quant,RentChrgr.Price,factor,RentChrgr.vRebate,s,0);
        end;
      end else begin
        CalcSum(RentChrgr.Quant,RentChrgr.Price,factor,RentChrgr.vRebate,s,0);
      end;
      RentChrgr.Sum = s;
      RentChrgr.InvNr = -1;
      RentChrgr.RowNr = -1;
      RentChrgr.CurncyCode = curcode;
      testf = RecordInsert(RentChrgr,true);
      RentResrw.Inv = RentResrw.Inv + RentChrgr.Quant;
      if (RentResrw.Inv==0) then begin
        RentResrw.Inv = BlankVal;
      end;
      MatRowPut(RentResr,i,RentResrw);
      res = true;
    end;
  end;
  AddChargebleItems = res;
end;

function Boolean FindAdvPriceRow(record AdvPriceRecVc AdvPricer,Date thefrdate,var row AdvPriceRecVc AdvPricerw)
begin
  Boolean res;
  Integer i,rwcnt;
  
  res = false;
  rwcnt = MatRowCnt(AdvPricer);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(AdvPricer,i,AdvPricerw);
    if (DateInRange(thefrdate,AdvPricerw.StartDate,AdvPricerw.EndDate)) then begin
      res = true;
      goto LFindAdvPriceRow;
    end;
    if ((thefrdate>=AdvPricerw.StartDate) and (blankdate(AdvPricerw.EndDate))) then begin
      res = true;
      goto LFindAdvPriceRow;
    end;
  end;
  res = true; // I think it should always default to last row...
LFindAdvPriceRow:;
  FindAdvPriceRow = res;
  return;
end;

global
updating function val ChargeRentRes(LongInt agreenr,string custcode,string curcode,string defsite,var record RentResVc RentResr,record AdvPriceRecVc AdvPricer,Date todat,Boolean writef)
begin
  val res;
  record AgreeTypeVc AgreeTyper;
  record RentResVc oldRentResr;
  row AdvPriceRecVc AdvPricerw;
  record CUVc Cur;
  LongInt nrofdays,perdays,perlength,minqty;
  Boolean testf;
  Date frdat,thefrdat,thetodat;
  Boolean updatf;
  Date chargestart,chargeend;
  Boolean firstdayofrental;
  record RentControlBlock RCBr;
  string 20 lcustcode;

  res = 0;
  testf = true;
  BlockLoad(RCBr);
  if (nonblankdate(RentResr.StartInvoicing)) then begin
    chargestart = RentResr.StartInvoicing;
  end else begin
    chargestart = RentResr.TransDate;
  end;
  if (nonblankdate(RentResr.EndInvoicing)) then begin
    chargeend = RentResr.EndInvoicing;
  end else begin
    chargeend = RentResr.EndDate;
  end;
  firstdayofrental = false;
  frdat = AddDay(RentResr.LastChargeDate,1);
  if (blankdate(frdat)) then begin
    frdat = chargestart;
    firstdayofrental = true;
  end;
  if (blank(RentResr.InvItem)) then begin
    testf = false;
  end;
  if (RentResr.InvQuant==0) then begin
    testf = false;
  end;
  if (nonblankdate(chargeend)) then begin
    if (chargeend<frdat) then begin
      testf = false;
    end;
  end;
  AgreeTyper.Code = RentResr.AgreeType;
  if (ReadFirstMain(AgreeTyper,1,true)==false) then begin
    testf = false;
  end;
  if (RentResr.AdvPrActive==0) then begin
    if (AgreeTyper.perType==3) then begin
      if (RentResr.Done==0) then begin
        testf = false;
      end;
    end;
    minqty = 0;
    if (AgreeTyper.MinChargeQty>0) then begin
      minqty = AgreeTyper.MinChargeQty;
    end;
  end;

  if (testf) then begin
    nrofdays = DateDiff2(todat,frdat);
    if (RentResr.AdvPrActive==0) then begin
// This is original code, which is not taking BankHolidays into account
/*
      if ((minqty>0) and (minqty>DateDiff2(chargeend,chargestart))) then begin
        if (RentResr.Done==0) then begin
          testf = false;
        end else begin
          nrofdays = minqty;
          chargeend = AddDay(chargestart,nrofdays);
        end;
      end;
*/

// This is TopCon code. Quite similar,including BankHolidays
      if (nonblankdate(chargeend)) then begin
        if ((minqty>0) and (minqty>DateDiff2(chargeend,chargestart))) then begin
          if (RentResr.Done==0) then begin
            testf = false;
          end else begin
            nrofdays = minqty;
            if (AgreeTyper.ChargeBankHol==2) then begin
              lcustcode = CUr.Code;
            end else begin
              lcustcode = "";
            end;
            chargeend = AddWorkingDays(chargestart,nrofdays,lcustcode,CUr.CountryCode);
            if (RCBr.ChargeForFirstDay!=0) then begin
              chargeend = AddWorkingDays(chargeend,-1,lcustcode,CUr.CountryCode);
            end;
            nrofdays = DateDiff2(chargeend,chargestart);
          end;
        end;
      end;

    end;
    if (testf) then begin
      if (RentResr.AdvPrActive==0) then begin
        perlength = AgreeTyper.perLength;
        if (perlength<1) then begin
          perlength = 1;
        end;
        if (AgreeTyper.perType==0) then begin // Days
          perdays = perlength;
        end;
        if (AgreeTyper.perType==1) then begin // Months
          //nk
          //thetodat = AddDay(AddMonth(frdat,perlength),-1);
          thetodat = AddDay(todat,1);
          perdays = DateDiff2(thetodat,frdat);
        end;
/*
        if (AgreeTyper.perType==2) then begin // Hours
          perdays = 1;
        end;
*/
        if (AgreeTyper.perType==3) then begin // Fixed price
          thetodat = chargeend;
          perdays = DateDiff2(thetodat,frdat);
        end;
      end else begin
        if (FindAdvPriceRow(AdvPricer,frdat,AdvPricerw)) then begin
          if (AdvPricerw.PeriodType==0) then begin // Fixed
             perdays = DateDiff2(AdvPricerw.EndDate,AdvPricerw.StartDate);
             if (perdays>nrofdays) then begin
               nrofdays = perdays;
             end;
          end else begin // Running
             perdays = 1;
          end;
        end;
      end;
      thefrdat = frdat;
      updatf = false;
      Cur.Code = custcode;
      if (ReadFirstMain(CUr,1,true)==false) then begin
        CUr.CountryCode = "";
      end;
      RecordCopy(oldRentResr,RentResr);
/*      
      if (RentResr.AdvPrActive==0) then begin // This entire piece of code should be possible to remove....
        if (firstdayofrental) then begin
          if (RCBr.ChargeForFirstDay!=0) then begin
            if (CreateAgreementCharge(perdays,nrofdays,thefrdat,thefrdat,chargeend,CUr,agreenr,curcode,defsite,RentResr,AgreeTyper,perlength,firstdayofrental,AdvPricerw,res,writef)) then begin
              RentResr.LastChargeDate = chargeend;
              updatf = true;
            end;
          end;
        end;
      end;
*/      

      if (nrofdays > 0) then begin

//Trace("","nrofdays " & nrofdays & " perdays " & perdays & " thefrdat " & thefrdat & " todat " & todat);          

//        while ((nrofdays>=perdays) and (perdays>0) and (thefrdat<=todat)) begin
        while ((perdays>0) and (thefrdat<=todat)) begin

//Trace("30.nrofdays " & nrofdays ," perdays " & perdays & " thefrdat " & thefrdat & " todat " & todat);

          if ((blankdate(chargeend)) or (thefrdat<chargeend)) then begin
            if (CreateAgreementCharge(perdays,nrofdays,thefrdat,thefrdat,chargeend,CUr,agreenr,curcode,defsite,RentResr,AgreeTyper,perlength,firstdayofrental,AdvPricerw,res,writef)) then begin
              if (AgreeTyper.perType==1) then begin
                thefrdat = AddDay(thefrdat,nrofdays);
              end else begin
                thefrdat = AddDay(thefrdat,perdays);
              end;
              RentResr.LastChargeDate = AddDay(thefrdat,-1);
              updatf = true;
            end;
            nrofdays = nrofdays - perdays;

//Trace("31.nrofdays " & nrofdays ," perdays " & perdays & " thefrdat " & thefrdat & " thetodat " & thetodat);

            if (RentResr.AdvPrActive==0) then begin
              if (AgreeTyper.perType==1) then begin
//Trace("321.nrofdays " & nrofdays ," perdays " & perdays & " thefrdat " & thefrdat & " thetodat " & thetodat);
                thetodat = AddDay(AddMonth(thefrdat,perlength),-1);
                perdays = DateDiff2(thetodat,thefrdat);

//Trace("322.nrofdays " & nrofdays ," perdays " & perdays & " thefrdat " & thefrdat & " thetodat " & thetodat);

              end;
            end else begin
              if (FindAdvPriceRow(AdvPricer,thefrdat,AdvPricerw)) then begin
                if (AdvPricerw.PeriodType==0) then begin // Fixed
                  perdays = DateDiff2(AdvPricerw.EndDate,AdvPricerw.StartDate);
                  if (perdays>nrofdays) then begin
                    nrofdays = perdays;
                  end;
                end else begin // Running
                  if (AdvPricerw.PeriodUnit==0) then begin // day
                    perdays = 1;
                  end else begin // month
                    perdays = DateDiff2(AdvPricerw.EndDate,AdvPricerw.StartDate);
                    if (perdays>nrofdays) then begin
                      nrofdays = perdays;
                    end;
                  end;
                end;
              end;
            end;
            if (updatf==false) then begin
              thefrdat = AddDay(thefrdat,perdays);
            end;
          end else begin
            perdays = 0;
          end;
        end;
      end;
      if (writef) then begin
        if (AddChargebleItems(frdat,agreenr,custcode,curcode,defsite,RentResr)) then begin
          updatf = true;
        end;
        if (updatf) then begin
          SetRentResDone(RentResr);
          if (RecordUpdate(oldRentResr,RentResr,false)<>0) then begin
          end;
        end;
      end;
    end;
  end;
  ChargeRentRes = res;
  return;
end;

global
updating procedure ChargeAgreementMn(record RcVc RepSpec)
begin
  record AgreementVc Agreementr;
  record RentResVc RentResr;
  record AdvPriceRecVc AdvPricer;
  LongInt fragr,toagr;
  Boolean foundf,testf;
  Boolean agrfoundf,agrtestf;
  Date todat;
  val s;

  todat = RepSpec.d1;
  if (blankdate(todat)) then begin
    todat = CurrentDate;
  end;
  fragr = FirstInRange(RepSpec.f1,10);
  toagr = LastInRange(RepSpec.f1,10);
  agrfoundf = true;
  Agreementr.SerNr = fragr;
  while (LoopMain(Agreementr,1,agrfoundf)) begin
    agrtestf = true;
    if (nonblank(RepSpec.f1)) then begin
      if (Agreementr.SerNr>toagr) then begin
        agrfoundf = false;
      end;
    end;
    if (agrfoundf==false) then begin
      agrtestf = false;
    end;
    if (Agreementr.OKFlag==0) then begin
      agrtestf = false;
    end;
    if (Agreementr.AgreeStatus!=0) then begin
      agrtestf = false;
    end;
    if (agrtestf) then begin
      ResetLoop(RentResr);
      foundf = true;
      RentResr.AgreementNr = Agreementr.SerNr;
      while(LoopKey("AgreementNr",RentResr,1,foundf)) begin
        if (RentResr.AgreementNr<>Agreementr.SerNr) then begin
          foundf = false;
        end;
        testf = true;
        if (foundf==false) then begin
          testf = false;
        end;
        if (RepSpec.flags[1]!=0) then begin
          if (RentResr.Done==0) then begin
            testf = false;
          end;
        end;
        if (testf) then begin
          AdvPricer.SerNr = RentResr.SerNr;
          AdvPricer.FileName = "RentResVc";
          AdvPricer.RowNr = -1;
          if (ReadFirstMain(AdvPricer,3,true)==false) then begin
            RecordNew(AdvPricer);
          end;
          s = s + ChargeRentRes(Agreementr.SerNr,Agreementr.CustCode,Agreementr.CurncyCode,Agreementr.Site,RentResr,AdvPricer,todat,true);
        end;
      end;
    end;
  end;
  return;
end;

global
updating procedure TimedChargeAgree()
begin
  record RcVc RepSpec;

  ReportDefaults(RepSpec,"ChargeAgreementVClass");  
  RepSpec.flags[29] = 1234;
  RepSpec.d1 = CurrentDate;
  ChargeAgreementMn(RepSpec);
  return;
end;
