/* RelbuildHALRulesMn.hal */
external procedure StripSpace(var string,string);
external function Boolean FindStringInString(string,string);

function integer TestClientServer(string filename)
begin
  integer res;
  area a;
  Longint l,cnt,pos,counter;
  string 255 tstr;

  res = 1;
  if (FileExists(filename)) then begin
    counter = 0;
    SetAreaZeroSize(a);
    AddFileToArea(filename,a,false);
    cnt = CountLinesInArea(a);
    for (l=0;l<cnt;l=l+1) begin
      if (counter >= 19) then begin
         l = cnt;
      end;
      tstr = GetLineFromArea(a,l);
      StripSpace(tstr,tstr);
      if (InString(LowerCase(tstr),"<halrule>" & "server-only" & "</halrule>")) then begin
        res = 0;
        l = cnt;
      end;
      counter = counter + 1;
    end;
  end;
  TestClientServer = res;
  return;
end;

global
updating procedure RebuildHALRulesMn(record RcVc RepSpec)
begin
  record HALRulesVc HALRulesr;
  row HALRulesVc HALRulesrw;
  string 255 filename,folder,datadefstr,tstr;
  string 255 tmpstr,tstr2;
  Integer i,filecnt,rownr;
  boolean skiplinef,skipsectionf,dohalpatchf,dohalcustf;
  Longint l,cnt,pos;
  area a;
  array string 255 sourcelines,halrules;

  if (DirExists("halcust")) then begin
    dohalcustf = true;
  end;

  if (DirExists("halpatch")) then begin
    dohalpatchf = true;
  end;

  if (dohalcustf or dohalpatchf) then begin
    while (LoopMain(HALRulesr,1,true)) begin
      RecordDelete(HALRulesr);
      StepBack(HALRulesr);
    end;
  end else begin
    goto LLRebuildHALRulesMn;
  end;

  datadefstr = "halcust/datadef.hal";
  if (FileExists(datadefstr)) then begin
    SetAreaZeroSize(a);
    AddFileToArea(datadefstr,a,false);
    cnt = CountLinesInArea(a);
    for (l=0;l<cnt;l=l+1) begin
      skiplinef = false;
      tstr = GetLineFromArea(a,l);
      StripSpace(tstr,tstr);
      if (left(tstr,2)=="//") then begin
        skiplinef = true;
      end;
      if (FindStringInString(left(tstr,2),"/*") and FindStringInString(right(tstr,3),"*/")) then begin
        skiplinef = true;
        skipsectionf = false;
        goto LLRebuildHALRulesMn01;
      end;
      if (left(tstr,2)=="/*") then begin
        skipsectionf = true;
      end;
      if (FindStringInString(right(tstr,3),"*/") and FindStringInString(left(tstr,2),"/*")==false) then begin
        skipsectionf = false;
      end;
LLRebuildHALRulesMn01:;
      if (skiplinef==false and skipsectionf==false) then begin
        if (InString(LowerCase(tstr),"sourcefile(")) then begin
          pos = -1;
          GetNextSubstring(tstr,pos,"""",tmpstr);
          GetNextSubstring(tstr,pos,"""",tmpstr);
          sourcelines[sourcelines.length] = tmpstr;
        end;
      end;
    end;
  end;

  if (dohalcustf) then begin
    folder = "halcust";
    filecnt = CountFilesInDir(folder);
    for (i = 0; i<filecnt; i = i + 1) begin
      filename = GetFileNameInDir(folder,i);
      if (LowerCase(right(filename,4))==".hal") then begin
        if (FindStringInString(right(folder,2),"/")  or FindStringInString(right(folder,3),"\\")) then begin
          tstr = folder & filename;
        end else begin
          tstr = folder & "/" & filename;
        end;
        halrules[halrules.length] = tstr;
      end;
    end;
  end;

  if (dohalpatchf) then begin
    folder = "halpatch";
    filecnt = CountFilesInDir(folder);
    for (i = 0; i<filecnt; i = i + 1) begin
      filename = GetFileNameInDir(folder,i);
      if (LowerCase(right(filename,4))==".hal") then begin
        if (FindStringInString(right(folder,2),"/")  or FindStringInString(right(folder,3),"\\")) then begin
          tstr = folder & filename;
        end else begin
          tstr = folder & "/" & filename;
        end;
        halrules[halrules.length] = tstr;
      end;
    end;
  end;

  for (l = 0; l<sourcelines.length; l = l + 1) begin
    folder = sourcelines[l];
    filecnt = CountFilesInDir(folder);
    for (i = 0; i<filecnt; i = i + 1) begin
      filename = GetFileNameInDir(folder,i);
      if (LowerCase(right(filename,4))==".hal") then begin
        if (FindStringInString(right(folder,2),"/")  or FindStringInString(right(folder,3),"\\")) then begin
          tstr = folder & filename;
        end else begin
          if (GuiType==kGuiWindowsDesktop or GuiType==kGuiMetro) then begin
            tstr = folder & "\\" & filename;
          end else begin
            tstr = folder & "/" & filename;
          end;
        end;
        halrules[halrules.length] = tstr;
      end;
    end;
  end;

  for (l = 0; l<halrules.length; l = l + 1) begin
    RecordNew(HALRulesr);
    HALRulesr.Filename = halrules[l];
    HALRulesr.FileOnClient = TestClientServer(halrules[l]);
    RecordInsert(HALRulesr,true);
  end;
LLRebuildHALRulesMn:;
  return;
end;
