external procedure IPPastePayMode(var record IPVc);external function Boolean PasteInvIn2IPr(var record IPVc,Integer,Date,var val,Boolean,var Boolean);procedure NewIP(record RcVc RepSpec,var record IPVc IPr)begin  RecordNew(IPr);  if (nonblank(RepSpec.FirstAcc)) then begin    IPr.PayMode = RepSpec.FirstAcc;    IPPastePayMode(IPr);  end;  if (nonblankdate(RepSpec.RegDate)) then begin    IPr.TransDate = RepSpec.RegDate;  end;  return;end;updating procedure StoreIP(var record IPVc IPr)begin  IPr.SerNr = NextSerNr("IPVc",IPr.TransDate,-1,false,"");              RecordStore(IPr,false)  return;end;updating procedure AddIVtoIP(record RcVc RepSpec,record IVVc IVr,var record IPVc IPr)begin  Integer rownr;  val chk;  Boolean installmentf;  row IPVc IPrw;  if (MatRowCnt(IPr)>298) then begin    StoreIP(IPr);    NewIP(RepSpec,IPr);  end;  rownr = MatRowCnt(IPr);  ClearRow(IPr,IPrw,1);  IPrw.InvoiceNr = IVr.SerNr;  MatRowPut(IPr,rownr,IPrw);  PasteInvIn2IPr(IPr,rownr,IPr.TransDate,chk,false,installmentf);    return;end;globalupdating procedure CreateIPMn(record RcVc RepSpec)begin  record ARVc ARr;  record IVVc IVr;  record CUVc CUr;  Boolean found,testf;  string 255 index;  string 255 frcu,tocu;  Integer keys;  record IPVc IPr;  NewIP(RepSpec,IPr);  frcu = FirstInRange(RepSpec.f1,20);  tocu = LastInRange(RepSpec.f1,20);  index = "DueDate";  keys = 1;  if (nonblank(RepSpec.f1)) then begin    index = "CustDue";    keys = 2;  end;  ARr.CustCode = frcu;  ARr.DueDate = RepSpec.sStartDate;  found = true;  while (LoopKey(index,ARr,keys,found)) begin    if (nonblank(RepSpec.f1)) then begin      if (ARr.CustCode>tocu) then begin found = false; end;    end;    if (nonblankdate(RepSpec.sEndDate)) then begin      if (ARr.DueDate>RepSpec.sEndDate) then begin found = false; end;    end;    if (found) then begin      testf = true;      if (nonblank(RepSpec.CurncyCode)) then begin        if (ARr.ARCurncyCode!=RepSpec.CurncyCode) then begin testf = false; end;      end;      if (testf) then begin        IVr.SerNr = ARr.InvoiceNr;        testf = ReadFirstMain(IVr,1,true);        if (nonblank(RepSpec.AccStr)) then begin          if (IVr.PayDeal!=RepSpec.AccStr) then begin testf = false; end;        end;        if (IVr.InvType!=kInvoiceTypeNormal) then begin testf = false; end;      end;      if (testf) then begin        CUr.Code = IVr.CustCode;        ReadFirstMain(CUr,1,true);        if (nonblank(RepSpec.LastAcc)) then begin          if (CUr.CustCat!=RepSpec.LastAcc) then begin testf = false; end;        end;        if (nonblank(RepSpec.f4)) then begin          if (SetInSet(RepSpec.f4,CUr.Classification)==false) then begin            testf = false;          end;        end;      end;      if (testf) then begin        AddIVtoIP(RepSpec,IVr,IPr);      end;    end;  end;  if (MatRowCnt(IPr)>0) then begin    StoreIP(IPr);  end;LCreateIPMn:;  returnend;