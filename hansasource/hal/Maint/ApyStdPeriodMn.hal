external procedure CheckFlush(var Integer,Integer);
external function LongInt DateDiff(Date,Date);

// f1 code of std period
// f2 person to apply to
// d1 start date



global
updating procedure DoApyStdPeriodMn(Integer todof,string pcode,string toperson,Date dstdate,Date strd,Date endd)
begin
  record ActVc Actr;
  record ActVc Act2r;
  string 60 ukey;
  Boolean foundf;
  Boolean xres;
  LongInt dta;
  LongInt enddta;
  Integer flushcnt;

  foundf = true;
  
  Actr.TransDate = strd;
  Actr.TodoFlag = todof;
  ukey = "UserMain:" & pcode;
        
  while (LoopKey(ukey,Actr,3,foundf)) begin
    if (SetInSet(pcode,Actr.MainPersons)==false) then begin
      if (SetInSet(pcode,Actr.CCPersons)==false) then begin
        goto L99;
      end else begin
        goto L88;
      end;
    end;
    if ((Actr.TodoFlag<>todof) or DateInRange(Actr.TransDate,strd,endd)==false) then begin
      goto L99;
    end;
    if (Actr.Invalid!=0) then begin goto L88; end;
    if (Actr.PrivateFlag!=0) then begin goto L88; end;
    RecordDuplicate(Act2r,Actr);
    Act2r.TransDate = Actr.TransDate;
    Act2r.EndDate = Actr.EndDate;
    dta = DateDiff(Act2r.TransDate,strd);
    enddta = DateDiff(Act2r.EndDate,strd);
    Act2r.MainPersons = toperson;
    Act2r.TransDate = AddDay(dstdate,dta);
    if (Act2r.TodoFlag==kTodoFlagTodo or Act2r.TodoFlag==kTodoFlagTimedTodo) then begin
      Act2r.EndDate   = Act2r.TransDate;
    end else begin
      Act2r.EndDate   = AddDay(dstdate,enddta);
    end;
    Act2r.OKFlag = 0;
    Act2r.SerNr     = NextSerNr("ActVc",Act2r.TransDate,-1,false,"");
    xres = RecordStore(Act2r,false);
L88:;    
  end;
L99:;
  return;
end;

global
updating procedure ApyStdPeriodMn(Record RcVc RepSpec)
begin
  Date dstdate;
  LongInt i;
  LongInt perlen;
  record StdPeriodVc stdperr;
  record UserVc Userr;
  
// long1
  dstdate = RepSpec.d1;

  stdperr.Code = RepSpec.f1;
    
  if (ReadFirstMain(stdperr,1,true)) then begin
  Userr.Code = RepSpec.f2;
  if (ReadFirstMain(Userr,1,true)) then begin
  if (dstdate>stdperr.StartDate) then begin//if it is in and You apply stnd period to the past (or rather before start date of StdPeriodVc ,never ending loop)
    perlen = DateDiff(stdperr.EndDate,stdperr.StartDate) + 1;
    for (i=0; i<RepSpec.long1; i = i + 1) begin
      DoApyStdPeriodMn(kTodoFlagCalendar,stdperr.Person,RepSpec.f2,dstdate,stdperr.StartDate,stdperr.EndDate);
      /* non timed to-do */
//    DoApyStdPeriodMn(kTodoFlagTodo,stdperr.Person,RepSpec.f2,dstdate,stdperr.StartDate,stdperr.EndDate);
//      DoApyStdPeriodMn(kTodoFlagTimedTodo,stdperr.Person,RepSpec.f2,dstdate,stdperr.StartDate,stdperr.EndDate);
//      DoApyStdPeriodMn(kTodoFlagBanner,stdperr.Person,RepSpec.f2,dstdate,stdperr.StartDate,stdperr.EndDate);
//      DoApyStdPeriodMn(kTodoFlagWorkHours,stdperr.Person,RepSpec.f2,dstdate,stdperr.StartDate,stdperr.EndDate);
      dstdate = AddDay(dstdate,perlen);
    end;
  end;
  end;
  end;
  return;
end;
// RcType