external procedure CheckFlush(var Integer,Integer);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external procedure SetSalesMan(var string,string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean GetPM(string,var string,var string);
external function Boolean CLOutforVIExists(LongInt,string,var LongInt);

updating procedure StoreCLOutVI(LongInt cloutsernr,LongInt vinr,string filename,var Integer flushcnt)
BEGIN
  record CLOutVIVc CLOutVIr;
  
  CLOutVIr.CLOutNr = cloutsernr;
  CLOutVIr.SerNr = vinr;
  CLOutVIr.FileName = filename;
  if (RecordStore(CLOutVIr,false)) then begin end;
  CheckFlush(flushcnt,10);
  RETURN;
END;

procedure CreateCLOut(var record CLOutVc CLOutr,string person,Date d1,string paymode)
BEGIN
  val frrate,to1,to2,br1,br2;
  record MainCLBlock MainCLRec;
  string 255 tstr;
  string 5 crncy;

  BlockLoad(MainCLRec);
  CLOutr.TransDate = d1;
  if (blankdate(CLOutr.TransDate)) then begin
    CLOutr.TransDate = CurrentDate;
  end;  
  CLOutr.PayMode = paymode;
  if (GetPM(CLOutr.PayMode,tstr,tstr)==false) then begin
    CLOutr.PayMode = "";
  end;  
  if (blank(CLOutr.PayMode)) then begin
    CLOutr.PayMode = MainCLRec.DefPM;
    if (GetPM(CLOutr.PayMode,tstr,tstr)==false) then begin
      CLOutr.PayMode = "";
    end;  
  end;  
  CLOutr.CorspCode = MainCLRec.DefCorspCode;
  SetSalesMan(tstr,person);
  CLOutr.Person = tstr;  
  crncy = CLOutr.CurncyCode;
  GetFullCurncyRate(crncy,CLOutr.TransDate,frrate,to1,to2,br1,br2);
  CLOutr.CurncyCode = crncy;
  CLOutr.FrRate = frrate;
  CLOutr.ToRateB1 = to1; 
  CLOutr.ToRateB2 = to2;
  CLOutr.BaseRate1 = br1;
  CLOutr.BaseRate2 = br2;
  CLOutr.ColFlag = 1;
  RETURN;
END;

global
updating procedure ColCLOutMn(record RcVc RepSpec)
BEGIN
  record VIVc firstVIr;
  record VIVc VIr;
  record CLOutVc oldCLOutr;
  record CLOutVc CLOutr;
  record CUVc VEr;
  Boolean TrHs,testf,firstf,vef;
  LongInt clout;
  string 20 frve,tove;
  LongInt frinv,toinv;
  val totpayval,totnetval,totvatval,t,n,v;
  string 20 lastve,crncy;
  Array LongInt cloutvinr;
  Integer i,vicnt,flushcnt;
  record MainCLBlock MainCLRec;
  val frrate,to1,to2,br1,br2;
  
  BlockLoad(MainCLRec);  
  if ((blank(MainCLRec.DefPM)) or (blank(MainCLRec.DefCorspCode))) then begin
    goto LColCLOutMn;
  end;
  frve = FirstInRange(RepSpec.f1,20);
  tove = LastInRange(RepSpec.f1,20);
  frinv = FirstInRange(RepSpec.f2,10);
  toinv = LastInRange(RepSpec.f2,10);
  
  vef = true;
  firstf = true;
  RecordNew(CLOutr);
  TrHs = true;
  VIr.InvType = kInvoiceTypeCash;
  while (LoopKey("InvType",VIr,1,TrHs)) begin
    if (VIr.InvType!=kInvoiceTypeCash) then begin
      TrHs = false;
    end;
    if (TrHs) then begin    
      testf = true;
      if (nonblank(RepSpec.f1)) then begin
        if (VIr.VECode<frve) then begin testf = false; end;
        if (VIr.VECode>tove) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.f2)) then begin
        if (VIr.SerNr<frinv) then begin testf = false; end;
        if (VIr.SerNr>toinv) then begin testf = false; end;
      end;
      if (DateInRange(VIr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
        testf = false;
      end;
      if (testf) then begin
        if (CLOutforVIExists(VIr.SerNr,"VIVc",clout)) then begin     
          testf = false;
        end;
      end;  
      if (testf) then begin
        if (firstf) then begin
          RecordCopy(firstVIr,VIr);
          CreateCLOut(CLOutr,RepSpec.FirstAcc,RepSpec.d1,VIr.PayDeal);
          CLOutr.SerNr = NextSerNr("CLOutVc",CLOutr.TransDate,-1,false,CLOutr.LangCode);
          if (CLOutr.SerNr>0) then begin
            if (RecordStore(CLOutr,false)) then begin   
              CheckFlush(flushcnt,10);
              RecordCopy(oldCLOutr,CLOutr);
            end else begin
              goto LColCLOutMn;
            end; 
            firstf = false;
          end else begin
            goto LColCLOutMn;
          end;
        end;
        cloutvinr[vicnt] = VIr.SerNr;
        vicnt = vicnt + 1;
        t = VIr.PayVal;
        v = VIr.VATVal;
        if (v==0) then begin
          v = VIr.CalcVATVal;
        end;
        n = t - v;
        if (nonblank(RepSpec.CurncyCode)) then begin
          CurValToOtherCur(CLOutr.TransDate,VIr.CurncyCode,VIr.PayVal,RepSpec.CurncyCode,t,DefaultCurRoundOff);
          CurValToOtherCur(CLOutr.TransDate,VIr.CurncyCode,n,RepSpec.CurncyCode,n,DefaultCurRoundOff);
          CurValToOtherCur(CLOutr.TransDate,VIr.CurncyCode,v,RepSpec.CurncyCode,v,DefaultCurRoundOff);
          CLOutr.CurncyCode = RepSpec.CurncyCode;
          crncy = CLOutr.CurncyCode;
          GetFullCurncyRate(crncy,CLOutr.TransDate,frrate,to1,to2,br1,br2);
          CLOutr.CurncyCode = crncy;
          CLOutr.FrRate = frrate;
          CLOutr.ToRateB1 = to1; 
          CLOutr.ToRateB2 = to2;
          CLOutr.BaseRate1 = br1;
          CLOutr.BaseRate2 = br2;
        end else begin
          CLOutr.CurncyCode = VIr.CurncyCode;
          CLOutr.FrRate = VIr.FrRate;
          CLOutr.ToRateB1 = VIr.ToRateB1; 
          CLOutr.ToRateB2 = VIr.ToRateB2;
          CLOutr.BaseRate1 = VIr.BaseRate1;
          CLOutr.BaseRate2 = VIr.BaseRate2;
        end;
        totpayval = totpayval + t;
        totnetval = totnetval + n;
        totvatval = totvatval + v;
        if ((nonblank(lastve)) and (lastve!=VIr.VECode)) then begin
          vef = false;
        end;
        lastve = VIr.VECode;
      end;  
    end;  
  end;  
  if (vef) then begin
    CLOutr.CUCode = firstVIr.VECode;
    CLOutr.CUName = firstVIr.VEName;
    VEr.Code = CLOutr.CUCode;
    if (ReadFirstMain(VEr,1,true)) then begin
      CLOutr.Addr0 = VEr.InvAddr1;
      CLOutr.Addr1 = VEr.InvAddr2;
      CLOutr.Addr2 = VEr.InvAddr3;
      CLOutr.Addr3 = VEr.InvAddr3;
      CLOutr.Addr4 = VEr.InvAddr4;
    end;  
  end;
  CLOutr.Total = totpayval;
  CLOutr.NetVal = totpayval;
//  CLOutr.VATVal = totvatval;
  if (RecordUpdate(oldCLOutr,CLOutr,true)==0) then begin
    for (i=0;i<vicnt;i=i+1) begin
      StoreCLOutVI(CLOutr.SerNr,cloutvinr[i],"VIVc",flushcnt);
    end;  
  end;
LColCLOutMn:;  
  RETURN;
END;
