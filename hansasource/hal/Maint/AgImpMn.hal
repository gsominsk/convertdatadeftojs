external procedure CheckFlush(var Integer,Integer);
external function val HoursDiff(Date,Time,Date,Time);


updating procedure NewAgenda(string person,Date td,string actctype,Integer j,var Integer flushcnt)
begin
  Record ActVc Actr;
  Boolean Res;
  Integer Dummy; 

  Recordnew(Actr);
  Actr.TodoFlag      = 1;
  Actr.MainPersons   = person;
  Actr.Comment       = USetStr(10250+j);
  Actr.ActType       = actctype;
  Actr.StartTime     = "09:00";
  Actr.TransDate     = td;
  Actr.PrioLevel     = 9;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  res = RecordStore(Actr,true);
  CheckFlush(flushcnt,10);
  return;
end;

procedure SetFlags(record RcVc RepSpec,var Array Integer flags)
BEGIN
  flags[0] = 0;
  flags[1] = RepSpec.flags[1];
  flags[2] = RepSpec.flags[2];
  flags[3] = RepSpec.flags[3];
  flags[4] = RepSpec.flags[4];
  flags[5] = RepSpec.flags[5];
  flags[6] = RepSpec.flags[6];
  flags[7] = RepSpec.flags[7];
  flags[8] = RepSpec.flags[8];
  flags[9] = RepSpec.flags[9];
  flags[10] = RepSpec.flags[10];
  RETURN;
END;

global
updating procedure AgImpMn(record RcVc RepSpec)
begin
  Record CheckVc Chq;
  Boolean Res;
  Integer j,i,parameter,Scope;
  Date DueDate;
  String 10 person;
  String 50 Desc;
  Array Integer flags;
  Integer flushcnt;

  SetFlags(RepSpec,flags);
  if (RepSpec.flags[20]==1) then begin
    Scope = 12;
  end else begin
    Scope = 6;
  end;
  
  person = RepSpec.f1;
  if (nonblank(person)) then begin
    for (i=1;i<=10;i=i+1) begin//10 flags with the same purpose
      if (flags[i]<>0) then begin
  	    DueDate = AddDay( AddDay(Currentdate,-1*Getday(Currentdate)),parameter);
	    for (j=0;j<Scope;j=j+1) begin
 		   NewAgenda(person,DueDate,RepSpec.FirstAcc,j,flushcnt);
		   DueDate = AddMonth(DueDate,1);
	    end;
	  end;
	end;

 end;
 return;
end;