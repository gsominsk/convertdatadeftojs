external function val GetCUTurnover(record CUVc,string,string,string,Date,Date,string,string,string,string);
external procedure CheckFlush(var Integer,Integer);

function boolean RemClass(string custclass,var string  oldstring)
begin
  boolean res;
  integer i,l,fr,tt;
  string 1 onesymbol;
  string 5 klass;
  string 100 newstring;

  l = Len(oldstring);
  fr = 0;
  res = false;
  tt = 1;
  for (i=1;i<=l;i=i+1) begin
    if (Mid(oldstring,i,1)=="," or i==l) then begin
      if tt<>0 then begin
        klass = Mid(oldstring,fr,tt);
        if klass <> custclass then begin
          if blank(newstring) then begin
            newstring = klass;
          end else begin
            newstring = newstring & "," & klass;
          end;  
        end else begin
          res = true;    
        end;
        fr = i+1;
        tt = 0;
      end;
    end else begin
      tt = tt +1;  
    end;
  end;
  oldstring = newstring;
  RemClass = res;
  return;
end;

function boolean  FindQty(string customer,string item,date fromdate, date todate)
begin
  val qty;
  boolean res;
  record ICSVc ICSr;

  ICSr.CustCode = customer;
  ICSr.ArtCode  = item;
  ResetLoop(ICSr);
  qty = 0;
  res = true;
  if ReadFirstMain(ICSr,2,true) then begin
    qty = GetTurnover(ICSr,"quant",fromdate,todate);
  end;
  if (qty==0) then begin
    res = false;
  end;
  FindQty = res;      
  return;
end;

global
updating procedure CustUpMn(record RcVc RepSpec)  
begin
  record CUVc CUr;
  record CUVc oldCUr;
  string 20 frcust,tocust;
  string 100 classif,newstr;
  boolean TrHs,test,res,TrHs1;
  integer error;
  record INVc INr;
  Integer flushcnt;
  val s;

  frcust = FirstInRange(RepSpec.f1,20);
  tocust = LastInRange(RepSpec.f1,20);

  if nonblank(RepSpec.f4) then begin
    CUr.Code = frcust;
    ResetLoop(CUr);  
    TrHs = true;
    while (LoopMain(CUr,1,TrHs)) begin
      test = true;
      if nonblank(tocust) then begin
        if (CUr.Code>tocust) then begin
          test = false;        
        end;
      end;
      if (RepSpec.flags[1]>0) then begin
        //item group test
        if (nonblank(RepSpec.f3) and test) then begin
          INr.Group = RepSpec.f3;
          TrHs1 = true;
          ResetLoop(INr);
          while (LoopKey("Group",INr,1,TrHs1)) begin
            if (INr.Group==RepSpec.f3) then begin
              test = FindQty(CUr.Code,INr.Code,RepSpec.sStartDate,RepSpec.sEndDate);
              if (test) then begin
                TrHs1 = false;
              end;
            end else begin
              TrHs1 = false;
            end;
          end;
          if (RepSpec.flags[1]==2) then begin
            if (test) then begin 
              test = false;
            end else begin
              test = true;
            end;
          end;
        end;
        //item test
        if (nonblank(RepSpec.f2) and test) then begin
          test = FindQty(CUr.Code,RepSpec.f2,RepSpec.sStartDate,RepSpec.sEndDate);
          if (RepSpec.flags[1]==2) then begin
            if (test) then begin 
              test = false;
            end else begin
              test = true;
            end;
          end;
        end;
      end;
      if (test) then begin  
        if (nonblank(RepSpec.vals0)) then begin
          s = GetCUTurnover(CUr,"","","salesexclvat",RepSpec.sStartDate,RepSpec.sEndDate,"","","","");
          if (s<RepSpec.vals0) then begin
            test = false;
          end;
        end;
        if (nonblank(RepSpec.CurncyCode)) then begin
          if (CUr.CurncyCode!=RepSpec.CurncyCode) then begin
            test = false;
          end;
        end;
      end;
      if (test) then begin
//add
        if (RepSpec.flags[0]==1) then begin
          if (SetInSet(RepSpec.f4,CUr.Classification)==false) then begin
            RecordCopy(oldCUr,CUr);
            classif = CUr.Classification;
            if blank( CUr.Classification) then begin
              CUr.Classification = RepSpec.f4;
            end else begin
              CUr.Classification = classif & "," & RepSpec.f4;
            end;  
            error = RecordUpdate(oldCUr,CUr,false);
            CheckFlush(flushcnt,10);
            MaintTrace(CUr.Code);
          end;  
        end;
//remove 
        if (RepSpec.flags[0]==0 and nonblank(CUr.Classification)) then begin      
          if (SetInSet(RepSpec.f4,CUr.Classification)==true) then begin
            newstr = CUr.Classification;
            if (RemClass(RepSpec.f4,newstr)) then begin
              RecordCopy(oldCUr,CUr);
              CUr.Classification = newstr;
              error = RecordUpdate(oldCUr,CUr,false);
              CheckFlush(flushcnt,10);
              MaintTrace(CUr.Code);
            end;
          end;
        end;
      end;      
    end;
  end;  
  return;
end;
