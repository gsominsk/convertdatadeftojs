// This file is probably not needed....
global
function Integer InLateCostUpdatedArray(Array Integer aIntYc,Array LongInt aSerNr,Array Integer atrupdated,Integer atrcnt,Integer IntYc,LongInt SerNr)
BEGIN
  Integer res;
  Integer i;
  
  for (i=0;i<atrcnt;i=i+1) begin
    if ((aIntYc[i]==IntYc) and (aSerNr[i]==SerNr)) then begin
      res = atrupdated[i];
      goto LInLateCostUpdatedArray;
    end;
  end;
LInLateCostUpdatedArray:;  
  InLateCostUpdatedArray = res;
  RETURN;
END;

global
procedure AddToLateCostUpdatedArray(Array Integer aIntYc,Array LongInt aSerNr,Array Integer atrupdated,var Integer atrcnt,
                                    Integer IntYc,LongInt SerNr,Integer trupdated)
BEGIN
  Integer i;
  
  for (i=0;i<atrcnt;i=i+1) begin
    if ((aIntYc[i]==IntYc) and (aSerNr[i]==SerNr)) then begin
      goto LAddToLateCostUpdatedArray;
    end;
  end;
  aIntYc[atrcnt] = IntYc;      
  aSerNr[atrcnt] = SerNr;      
  atrupdated[atrcnt] = trupdated;      
  atrcnt = atrcnt + 1;
LAddToLateCostUpdatedArray:;
  RETURN;
END;

global
function Boolean LateCostAlreadyUpdated(string artcode,Integer IntYc,LongInt TransNr,Integer rownr,Integer FromIntYc,LongInt FromTransNr,Integer FromRowNr,Integer type)
BEGIN
  Boolean res;
  record StockUsedVc Stockr;
  
  Stockr.ArtCode = artcode;
  Stockr.IntYc = IntYc;
  Stockr.TransNr = TransNr;
  Stockr.RowNr = rownr;
  Stockr.Recepy = "";
  Stockr.RecRowNr = -1;
  Stockr.FromIntYc = FromIntYc;
  Stockr.FromTransNr = FromTransNr;
  Stockr.FromRowNr = FromRowNr;
  Stockr.Type = type;
  res = ReadFirstMain(Stockr,0,true);
  LateCostAlreadyUpdated = res;
  RETURN;
END;
