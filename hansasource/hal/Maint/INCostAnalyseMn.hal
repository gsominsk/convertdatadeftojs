external procedure UpdateSRFIFO(record SRVc);
external function Boolean SRVc_PasteArtCode(var record SRVc,Integer,Boolean,var string);
external function Boolean INCostAnalyseTest(record RcVc,record INVc,Integer,string,string,var val,var val);
external procedure SRSumUp(var record SRVc);

updating procedure SaveSR(record SRVc SRr)
begin
  SRr.SerNr = NextSerNr("SRVc",SRr.TransDate,-1,false,""); 
  if (SRr.SerNr>0) and (MatRowCnt(SRr)>0) then begin
    UpdateSRFIFO(SRr);
    SRSumUp(SRr);
    RecordStore(SRr,false);
  end;           
  return;
end;
      
global
updating procedure INCostAnalyseMn(record RcVc RepSpec)
begin
  record INVc INr;
  Boolean found,testf;
  string 255 keystr,tstr;
  Integer sorting,rownr;
  string 255 frin,toin;
  val diff,instock;
  record SRVc SRr;
  row SRVc SRrw;
  
  RecordNew(SRr);
  frin = FirstInRange(RepSpec.f1,20);
  toin = LastInRange(RepSpec.f1,20);
  sorting = 0;
  keystr = "Code";
  INr.Code = frin;
  if (blank(RepSpec.f1)) and (nonblank(RepSpec.FirstAcc)) then begin
    sorting = 1;
    keystr = "Group";
    INr.Group = RepSpec.FirstAcc;
  end;
  found = true;
  while (LoopKey(keystr,INr,1,found)) begin
    switch (sorting) begin
      case 0:
        if (nonblank(RepSpec.f1)) then begin
          if (INr.Code>toin) then begin found = false; end;
        end;
      case 1:
        if (INr.Group!=RepSpec.FirstAcc) then begin
          found = false;
        end;
    end;
    if (found) then begin
      testf = INCostAnalyseTest(RepSpec,INr,sorting,frin,toin,diff,instock);
      if (instock<=0) then begin testf = false; end;
      if (testf) then begin
        rownr = MatRowCnt(SRr);
        ClearRow(SRr,SRrw,1);
        SRrw.ArtCode = INr.Code;
        MatRowPut(SRr,rownr,SRrw);
        if (SRVc_PasteArtCode(SRr,rownr,true,tstr)) then begin
        end;
        if (rownr>=200) then begin
          SaveSR(SRr);
          RecordNew(SRr);
        end;
      end;
    end;
  end;
  SaveSR(SRr);
  return;
end;