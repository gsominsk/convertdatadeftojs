external function Integer SMVc_AddRoundOffRow(var record SMVc,Boolean,Date,val,var val);
external procedure CheckFlush(var Integer,Integer);
external function Integer CountObjects(string);
external procedure SMSumup(var record SMVc);
external procedure GetCategoryNLAccounts(Integer,string,var string,var string,var string,var string,var string,var string,var string,var string,var string,var string,
                                         var string,var string,var string,var string);
external function Boolean GetAccName(string,var string,Integer);
external procedure AddSMRow(record SMVc,Date,string,string,string,string,val,Boolean,Boolean ,var val);
external procedure OneAT2UnitDeprCalculation(Integer,Integer,Integer,Boolean,Date,Date,string,var val,var val,var val,var val,var string,val,val,Boolean);
external function Boolean GetInventoryNrWrofDate(string,var Date);

function Boolean GetLastDprData(string InventoryNr,var val newstartval,var val newstartval2,var val newresval)
BEGIN
  record AT2DprVc Dpr;
  Boolean res;
  
  res = false;
  Dpr.InventoryNr = InventoryNr;
  if (ReadLastKey("InventoryNr",Dpr,1,true)) then begin
    res = true;
    newstartval = Dpr.StartVal;
    newstartval2 = Dpr.StartVal2;
    newresval = Dpr.ResVal;
  end;
  GetLastDprData = res; 
  RETURN;        
END;

function Boolean GetLastOfficialDprData(string InventoryNr,var val newstartval,var val newstartval2,var val newresval)
BEGIN
  record AT2DprVc Dpr;
  Boolean res,TrHs;
  
  res = false;
  Dpr.InventoryNr = InventoryNr;
  TrHs = true;
  while (LoopBackKey("InventoryNr",Dpr,1,TrHs)) begin
    if (Dpr.InventoryNr!=InventoryNr) then begin TrHs = false; end;
    if (TrHs) then begin
      if (nonblank(Dpr.LegalCode)) then begin
        res = true;
        newstartval = Dpr.StartVal;
        newstartval2 = Dpr.StartVal2;
        newresval = Dpr.ResVal;
      end;  
    end;  
  end;
  GetLastOfficialDprData = res; 
  RETURN;        
END;

procedure InflationCoefMul(record RcVc RepSpec,var record AT2DprVc ATDpr,Date PurchaseDate,var val infcoef)
BEGIN
  record ATCoeffVc ATCoeffr;
  row ATCoeffVc ATCoeffrw;
  row ATCoeffVc ATCoeffrw2;
  Integer i,rwcnt;
  Boolean found;
  
  infcoef = 1;
  ATCoeffr.TransDate = RepSpec.d1;
  if (ReadLastMain(ATCoeffr,1,false)) then begin
    if (ATCoeffr.TransDate<=RepSpec.d1) then begin
      rwcnt = MatRowCnt(ATCoeffr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(ATCoeffr,i,ATCoeffrw);
        MatRowGet(ATCoeffr,i+1,ATCoeffrw2);
        if ((PurchaseDate>=ATCoeffrw.CoeffDate) and (PurchaseDate<ATCoeffrw2.CoeffDate)) then begin
          infcoef = ATCoeffrw.CoeffVal;
          i = rwcnt;
          found = true;
        end;
      end;  
      if (!found) then begin
        MatRowGet(ATCoeffr,0,ATCoeffrw);
        infcoef = ATCoeffrw.CoeffVal;
      end;
    end;
  end;
  RETURN;
END;

updating procedure DoRevalSMRussia(record RcVc RepSpec,record AT2UnitVc ATr,string revacc,val revcoef,val infcoef,val newpurval,string LegalCode,var LongInt smsernr,Date td,var Integer flushcnt)
BEGIN
  record SMVc SMr;
  record AT2Vc ATCatr;
  record DprModVc DMr;
  record AccBlock AccRec;
  string 10 costacc,depracc,assetacc,revdepr1acc,capcorr1acc;
  string 60 accname,objstr,dmcode,asset1objstr,depr1objstr,cost1objstr,asset2objstr,depr2objstr,cost2objstr,AT2Class,revdepr1objects,capcorr1objects;
  val invdprbef,invdprv;
  val TotSum,t,svp;
  val oldpurval,oldpurval2,olddpr,newdpr,purchval;
  Integer dprtd,tst;
  record InvBalVc InvBalr;

  InvBalr.InventoryNr = ATr.InventoryNr;
  if (ReadFirstMain(InvBalr,1,true)) then begin end;
  smsernr = -1;
  if (RepSpec.flags[7]==0) then begin
    oldpurval = ATr.PurchVal;
    purchval = ATr.PurchVal;
  end else begin
    oldpurval = ATr.FiscalVal;
    purchval = ATr.FiscalVal;
  end;
  if (RepSpec.flags[3]==1) then begin
    if (GetLastDprData(ATr.InventoryNr,oldpurval,oldpurval2,t)) then begin 
      switch (RepSpec.flags[1]) begin
        case 1:
          oldpurval = oldpurval2;
      end;
    end;
  end;
  if (RepSpec.flags[3]==2) then begin
    if (GetLastOfficialDprData(ATr.InventoryNr,oldpurval,oldpurval2,t)) then begin 
      switch (RepSpec.flags[1]) begin
        case 1:
          oldpurval = oldpurval2;
      end;
    end;
  end;
  svp = oldpurval;
  OneAT2UnitDeprCalculation(RepSpec.Comparison,RepSpec.flags[3],RepSpec.flags[1],false,RepSpec.sStartDate,RepSpec.sEndDate,ATr.InventoryNr,invdprbef,invdprv,t,t,accname,svp,ATr.ResVal,false);
  olddpr = invdprv + invdprbef;
  svp = newpurval;
  OneAT2UnitDeprCalculation(RepSpec.Comparison,RepSpec.flags[3],RepSpec.flags[1],false,RepSpec.sStartDate,RepSpec.sEndDate,ATr.InventoryNr,invdprbef,t,t,invdprv,accname,svp,ATr.ResVal,false);
  newdpr = invdprv + invdprbef;
//  OneAT2UnitDeprCalculation2(RepSpec,ATr.InventoryNr,invdprbef,invdprv,dmcode);  
  ATCatr.Code = ATr.AT2Code;
  if (ReadFirstMain(ATCatr,1,true)) then begin    
    RecordNew(SMr);
      
    AT2Class = ATr.AT2Class;
    if (blank(AT2Class)) then begin
      AT2Class = ATCatr.AT2Class;
    end;
    GetCategoryNLAccounts(RepSpec.flags[1],AT2Class,assetacc,costacc,depracc,objstr,asset1objstr,depr1objstr,cost1objstr,asset2objstr,depr2objstr,cost2objstr,revdepr1acc,revdepr1objects,capcorr1acc,capcorr1objects);
    
    if (GetAccName(assetacc,accname,60)) then begin
      AddSMRow(SMr,td,assetacc,objstr,"-1",accname,(newpurval-oldpurval)*InvBalr.CurQuant,false,true,TotSum);
    end else begin
      goto LDoRevalSMRussia;
    end;
    if (GetAccName(revacc,accname,60)) then begin
      AddSMRow(SMr,td,revacc,objstr,"-1",accname,(newpurval-oldpurval)*InvBalr.CurQuant,false,false,TotSum);
    end else begin
      goto LDoRevalSMRussia;
    end;             

    if (GetAccName(revacc,accname,60)) then begin
      AddSMRow(SMr,td,revacc,objstr,"-1",accname,(newdpr-olddpr)*InvBalr.CurQuant,false,true,TotSum);
    end else begin
      goto LDoRevalSMRussia;
    end;
    if (GetAccName(depracc,accname,60)) then begin
      AddSMRow(SMr,td,depracc,objstr,"-1",accname,(newdpr-olddpr)*InvBalr.CurQuant,false,false,TotSum);
    end else begin
      goto LDoRevalSMRussia;
    end;       
    
    SMr.TransDate = td;
    if (TotSum!=0) then begin
      if (SMVc_AddRoundOffRow(SMr,true,td,TotSum,TotSum)==0) then begin
      end;
    end;
    if (SMr.SerNr==-1) then begin
      SMr.SerNr = NextSerNr("SMVc",SMr.TransDate,-1,false,"");  
    end;
    if (MatRowCnt(SMr)>0) then begin
      SMr.Comment = LegalCode & "; " & ATr.InventoryNr;
      SMSumup(SMr);
      if (RecordInsert(SMr,false)) then begin 
        smsernr = SMr.SerNr;
      end;
      CheckFlush(flushcnt,10);
    end;        
  end;
LDoRevalSMRussia:;  
  RETURN;
END;

updating procedure DoRevalSMPort(record RcVc RepSpec,record AT2UnitVc ATr,string revacc,val revcoef,val infcoef,val newpurval,string LegalCode)
BEGIN
  record SMVc SMr;
  record AT2Vc ATCatr;
  record DprModVc DMr;
  record AccBlock AccRec;
  string 10 costacc,depracc,assetacc,revdepr1acc,capcorr1acc;
  string 60 accname,objstr,dmcode,asset1objstr,depr1objstr,cost1objstr,asset2objstr,depr2objstr,cost2objstr,AT2Class,revdepr1objects,capcorr1objects;
  Date td;
  val invdprbef,invdprv;
  val TotSum,t;
  val yearnr,svp,purchval;
  Integer dprtd,tst;
  record InvBalVc InvBalr;

  InvBalr.InventoryNr = ATr.InventoryNr;
  if (ReadFirstMain(InvBalr,1,true)) then begin end;
  if (RepSpec.flags[7]==0) then begin
    purchval = ATr.PurchVal;
  end else begin
    purchval = ATr.FiscalVal;
  end;
  svp = -1;//what the hell 
  OneAT2UnitDeprCalculation(RepSpec.Comparison,RepSpec.flags[3],RepSpec.flags[1],false,RepSpec.sStartDate,RepSpec.sEndDate,ATr.InventoryNr,invdprbef,invdprv,t,t,accname,svp,ATr.ResVal,false);

//  OneAT2UnitDeprCalculation2(RepSpec,ATr.InventoryNr,invdprbef,invdprv,dmcode);  
  ATCatr.Code = ATr.AT2Code;
  if (ReadFirstMain(ATCatr,1,true)) then begin    
    RecordNew(SMr);
      
    AT2Class = ATr.AT2Class;
    if (blank(AT2Class)) then begin
      AT2Class = ATCatr.AT2Class;
    end;
    GetCategoryNLAccounts(RepSpec.flags[1],AT2Class,assetacc,costacc,depracc,objstr,asset1objstr,depr1objstr,cost1objstr,asset2objstr,depr2objstr,cost2objstr,revdepr1acc,revdepr1objects,capcorr1acc,capcorr1objects);
    
    if (GetAccName(assetacc,accname,60)) then begin
      AddSMRow(SMr,td,assetacc,objstr,"-1",accname,newpurval*InvBalr.CurQuant,false,true,TotSum);
    end else begin
      goto LDoRevalSMPort;
    end;
    if (GetAccName(revacc,accname,60)) then begin
      AddSMRow(SMr,td,revacc,objstr,"-1",accname,newpurval*InvBalr.CurQuant,false,false,TotSum);
    end else begin
      goto LDoRevalSMPort;
    end;
    if (GetAccName(revacc,accname,60)) then begin
      t = invdprbef*revcoef;
      if (infcoef!=0) then begin
        t = t*infcoef;
      end;  
      AddSMRow(SMr,td,revacc,objstr,"-1",accname,t*InvBalr.CurQuant,false,true,TotSum);
    end else begin
      goto LDoRevalSMPort;
    end;
    if (GetAccName(depracc,accname,60)) then begin
      AddSMRow(SMr,td,depracc,objstr,"-1",accname,t*InvBalr.CurQuant,false,false,TotSum);
    end else begin
      goto LDoRevalSMPort;
    end;
    if ((purchval-invdprbef)==0) then begin
      DMr.Code = dmcode;
      if (ReadFirstMain(DMr,1,true)) then begin
        yearnr = 100/DMr.DeprPerc;
        tst = CountObjects(yearnr);
      end;    
      dprtd = GetYear(ATr.EndDate) - GetYear(ATr.PurchaseDate)+1;
      t = 1.00/dprtd;
      t = newpurval*t;
      t = yearnr*t;
      tst = CountObjects(t);
      t = newpurval-t;
      tst = CountObjects(t);
      if (GetAccName(depracc,accname,60)) then begin
        AddSMRow(SMr,td,depracc,objstr,"-1",accname,t*InvBalr.CurQuant,false,true,TotSum);
      end else begin
        goto LDoRevalSMPort;
      end;
      if (GetAccName(revacc,accname,60)) then begin
        AddSMRow(SMr,td,revacc,objstr,"-1",accname,t*InvBalr.CurQuant,false,false,TotSum);
      end else begin
        goto LDoRevalSMPort;
      end;
    end; 
    if (TotSum!=0) then begin
      if (SMVc_AddRoundOffRow(SMr,true,td,t*InvBalr.CurQuant,TotSum)!=0) then begin
        goto LDoRevalSMPort;
      end;
    end;
    if (SMr.SerNr==-1) then begin
      SMr.SerNr = NextSerNr("SMVc",SMr.TransDate,-1,false,"");  
    end;
    SMr.TransDate = CurrentDate;
    if (MatRowCnt(SMr)>0) then begin
      SMr.Comment = LegalCode & " " & ATr.InventoryNr;
      SMSumup(SMr);
      if (RecordInsert(SMr,false)) then begin end;
    end;        
  end;
LDoRevalSMPort:;
  RETURN;
END;

updating procedure CreateNewReval(record RcVc RepSpec,record AT2UnitVc ATr,string revacc,val revcoef,val newpurval,val newpurval2,val newresval,string LegalCode,LongInt revfactnr,var Integer flushcnt)
BEGIN
  record AT2DprVc ATDpr;
  record AT2DprVc oldATDpr;
  val infcoef,purchval;
  LongInt smsernr;

  if (RepSpec.flags[7]==0) then begin
    purchval = ATr.PurchVal;
  end else begin
    purchval = ATr.FiscalVal;
  end;
  RecordNew(ATDpr);
  ATDpr.InventoryNr = ATr.InventoryNr;
  ATDpr.Description = ATr.Description;
  ATDpr.Comment = USetStr(18590);
  ATDpr.TransDate = RepSpec.d1;
  
  ATDpr.StartingDate1 = RepSpec.d1;//AddDay(RepSpec.d1,-GetDay(RepSpec.d1)+1);
  ATDpr.StartingDate2 = RepSpec.d1;//AddDay(RepSpec.d1,-GetDay(RepSpec.d1)+1);
  
  oldATDpr.TransDate = ATDpr.TransDate;
  oldATDpr.InventoryNr = ATDpr.InventoryNr;
  if (ReadFirstKey("DateInventoryNr",oldATDpr,2,true)==false) then begin  
    ATDpr.Model1 = ATr.Model1;
    ATDpr.Model2 = ATr.Model2;
    ATDpr.StartVal = newpurval;
    ATDpr.StartVal2 = newpurval2;
    ATDpr.ResVal = newresval;
    ATDpr.NonFiscalCostVal = (newpurval-purchval)*revcoef;
    ATDpr.NonFiscalCostVal = ATDpr.NonFiscalCostVal/100;
    ATDpr.LegalCode = LegalCode;
    ATDpr.AT2Code = ATr.AT2Code;
    ATDpr.ModSerNr = revfactnr;
    if (ATDpr.SerNr<=0) then begin
      ATDpr.SerNr = NextSerNr("AT2DprVc",ATDpr.TransDate,-1,false,"");
    end;
    if (ATDpr.SerNr>0) then begin
      if (RepSpec.flags[4]==1) then begin
        InflationCoefMul(RepSpec,ATDpr,ATr.PurchaseDate,infcoef);      
        ATDpr.StartVal = (ATDpr.StartVal*infcoef);
        ATDpr.StartVal2 = (ATDpr.StartVal2*infcoef);
        ATDpr.ResVal = (ATDpr.ResVal*infcoef);
        ATDpr.NonFiscalCostVal = (ATDpr.NonFiscalCostVal*infcoef);
        DoRevalSMPort(RepSpec,ATr,revacc,revcoef,infcoef,ATDpr.StartVal,LegalCode);
      end;  
      if (RepSpec.flags[4]==2) then begin
        InflationCoefMul(RepSpec,ATDpr,ATr.PurchaseDate,infcoef);      
        ATDpr.StartVal = (ATDpr.StartVal*infcoef);
        ATDpr.StartVal2 = (ATDpr.StartVal2*infcoef);
        DoRevalSMRussia(RepSpec,ATr,revacc,revcoef,infcoef,ATDpr.StartVal,LegalCode,smsernr,ATDpr.TransDate,flushcnt);
        if (smsernr!=-1) then begin
          ATDpr.Comment = smsernr;
        end;  
      end;      
      if (RecordInsert(ATDpr,false)) then begin end;      
      CheckFlush(flushcnt,10);
    end;
  end;  
  RETURN;
END;

updating procedure AT2RevalPerAsset(record RcVc RepSpec,string InventoryNr,LongInt AT2RevSerNr,var Integer flushcnt)
BEGIN
  record AT2UnitVc ATr;
  record AT2RevVc AT2Revr;
  row AT2RevVc AT2Revrw;
  Integer i,rwcnt;
  Boolean testf;
  val newpurval,newpurval2,newresval,oldpurval,oldpurval2,oldresval;
  record AT2DprVc LastDpr;
  Date wrofdate;
    
  ATr.InventoryNr = InventoryNr;
  if (ReadFirstMain(ATr,1,true)) then begin
    AT2Revr.SerNr = AT2RevSerNr;
    if (ReadFirstMain(AT2Revr,1,true)) then begin
      rwcnt = MatRowCnt(AT2Revr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(AT2Revr,i,AT2Revrw);
        testf = true;
        if (DateInRange(ATr.PurchaseDate,AT2Revrw.StartDate,AT2Revrw.EndDate)==false) then begin 
          testf = false; 
        end;
        if (ATr.Activef!=0) then begin testf = false; end;
        if (GetInventoryNrWrofDate(ATr.InventoryNr,wrofdate)) then begin testf = false; end;
        
        if (testf) then begin
/*        
          LastDpr.InventoryNr = InventoryNr;
          if (ReadLastKey("InventoryNr",LastDpr,1,true)) then begin
            newpurval = AT2Revrw.Coefficient*LastDpr.StartVal;
            newresval = AT2Revrw.Coefficient*LastDpr.ResVal;
          end else begin        
            newpurval = AT2Revrw.Coefficient*ATr.PurchVal;
            newresval = AT2Revrw.Coefficient*ATr.ResVal;          
          end;  
*/   
          if (RepSpec.flags[7]==0) then begin
            oldpurval = ATr.PurchVal;
          end else begin
            oldpurval = ATr.FiscalVal;
          end;
          oldresval = ATr.ResVal;
          if (RepSpec.flags[3]==1) then begin
            if (GetLastDprData(ATr.InventoryNr,oldpurval,oldpurval2,oldresval)) then begin 
            end;
          end;
          if (RepSpec.flags[3]==2) then begin
            if (GetLastOfficialDprData(ATr.InventoryNr,oldpurval,oldpurval2,oldresval)) then begin 
            end;
          end;
          newpurval = AT2Revrw.Coefficient*oldpurval;
          newpurval2 = AT2Revrw.Coefficient*oldpurval2;
          newresval = AT2Revrw.Coefficient*oldresval;          
          CreateNewReval(RepSpec,ATr,AT2Revr.Account,AT2Revrw.RevPerc,newpurval,newpurval2,newresval,AT2Revr.LegalCode,AT2Revr.SerNr,flushcnt);
        end;
      end;  
    end;
    MaintTrace(ATr.InventoryNr);    
  end;
  RETURN;
END;

updating procedure AT2RevalPerCategory(record RcVc RepSpec,string category,LongInt AT2RevSerNr,var Integer flushcnt)
BEGIN
  record AT2Vc ATCatr;
  record AT2UnitVc ATr;
  Boolean found,testf;
  
  ATCatr.Code = category;
  if (ReadFirstMain(ATCatr,1,true)) then begin
    found = true;
    ATr.AT2Code = category;
    while (LoopKey("AT2Code",ATr,1,found)) begin
      if (ATr.AT2Code!=category) then begin found = false; end;
      if (found) then begin
        AT2RevalPerAsset(RepSpec,ATr.InventoryNr,AT2RevSerNr,flushcnt);
      end;
    end;
  end;  
  RETURN;
END;

global
updating procedure AT2ReevalMn(record RcVc RepSpec)
BEGIN
  Boolean found;
  record AT2RevListVc Listr;
  row AT2RevListVc Listrw;
  Integer i,rwcnt;
  Integer flushcnt;
  
  found = true;
  if (nonblankdate(RepSpec.d1)) then begin
    Listr.TransDate = RepSpec.d1;
    
    if (ReadFirstKey("TransDate",Listr,1,true)) then begin
      rwcnt = MatRowCnt(Listr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Listr,i,Listrw);
        if (Listrw.CodeType==0) then begin
          AT2RevalPerCategory(RepSpec,Listrw.InventoryNr,Listrw.AT2RevSerNr,flushcnt);
        end;
        if (Listrw.CodeType==1) then begin
          AT2RevalPerAsset(RepSpec,Listrw.InventoryNr,Listrw.AT2RevSerNr,flushcnt);
        end;
      end;
    end;
  end;
  RETURN;
END;
