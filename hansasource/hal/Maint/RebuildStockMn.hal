external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external updating procedure FixTempLocOKNr(Integer);
external updating procedure RebuildReservations();
external updating procedure SRUpdateStock(record SRVc,Boolean);
external updating procedure SRUpdateItemHist2(record SRVc,Boolean,record TempStockVc,Boolean);
external updating procedure SRUpdateCostPrice(record SRVc);
external updating procedure ArchiveItemHistVc2(record RegArchiveDetailVc,record MainStockBlock,Boolean,record TempStockVc,Boolean);
external updating procedure ArchiveUpdateStockVc(record RegArchiveDetailVc);
external updating procedure IVUpdateCostPrice(record IVVc);
external updating procedure StockMovUpdateItemHist_In(record StockMovVc,string,string,record MainStockBlock,record SerNrTrackBlock,row StockMovVc,Boolean,Integer,record INVc);
external updating procedure StockMovUpdateItemHistory_Out2(record StockMovVc,string,record MainStockBlock,record SerNrTrackBlock,row StockMovVc,Boolean,Integer,record INVc,record TempStockVc,Boolean);
external updating procedure StockMovUpdateStockTo(record StockMovVc,string,row StockMovVc,record MainStockBlock,record LocationVc,Boolean,Boolean,Boolean,Boolean);
external updating procedure StockMovUpdateStockFrom(record StockMovVc,string,row StockMovVc,record MainStockBlock,record LocationVc,Boolean,Boolean,Boolean,Boolean);
external function Boolean ShouldItemUpdateStock(string);
external updating procedure StockMovUpdateCostPrice(record StockMovVc,record StockMovVc);
external updating procedure ProdUpdateCostPrice(record ProdVc,Boolean);
external updating procedure ProdOperationUpdateCostPrice(record ProdOperationVc);
external updating procedure RetUpdateCostPrice(record RetVc);
external updating procedure RetPUUpdateCostPrice(record RetPUVc);
external updating procedure PurUpdateCostPrice(record PUVc,Boolean);
external updating procedure IVCashUpdateStock(record IVCashVc);
external updating procedure IVCashUpdateItemHist2(record IVCashVc,Integer,record TempStockVc,Boolean);
external updating procedure UpdateProdOperationOut(record ProdOperationVc,Boolean);
external updating procedure ProdOperationUpdateItemHistory2(record ProdOperationVc,record TempStockVc,Boolean);
external updating procedure StockTakeUpdateItemHist2(record StockTakeVc,record TempStockVc,Boolean);
external updating procedure StockTakeUpdateInstock(record StockTakeVc);
external updating procedure RetUpdateStock2(record RetVc,Boolean,Boolean,vector val,record TempStockVc,Boolean);
external updating procedure SHUpdateInShipment(record SHVc,Boolean,record SHVc,Boolean,Boolean);
external updating procedure SHUpdateStock2(record SHVc,Boolean,Boolean,record TempStockVc,Boolean);
external updating procedure StockMovUpdateStock(record StockMovVc,record StockMovVc,Boolean,Boolean,Boolean);
external updating procedure WSUpdateStockTool2(record WSVc,Boolean,Boolean,record TempStockVc,Boolean);
external updating procedure IVUpdateStock2(record IVVc,Boolean,record TempStockVc,Boolean);
external updating procedure SDUpdateStock2(record SDVc,Boolean,record TempStockVc,Boolean);
external updating procedure RetPUUpdateStock(record RetPUVc,Boolean,Boolean);
external updating procedure PurUpdateStock2(record PUVc,Boolean,record TempStockVc,Boolean);
external updating procedure UpdateProdOrd(record ProdOrderVc,Boolean,val);
external updating procedure UpdateOrdOut(record ORVc,Boolean,Boolean);
external updating procedure INTransferUpdateStock(var record INTransferVc,Boolean,Boolean);
external updating procedure UpdatePOOut(record POVc,Boolean,Boolean);
external updating procedure UpdateProdOut(record ProdVc,Boolean,Boolean);
external updating procedure IVUpdateItemHist2(record IVVc,record TempStockVc,Boolean);
external updating procedure RetPUUpdateItemHist2(record RetPUVc,record TempStockVc,Boolean);
external updating procedure ProdUpdateItemHistory2(record ProdVc,record ProdVc,record TempStockVc,Boolean);
external updating procedure WSUpdateItemHistory2(record WSVc,record TempStockVc,Boolean);
external updating procedure StockMovUpdateItemHist2(record StockMovVc,record StockMovVc,record TempStockVc,Boolean);
external updating procedure RetUpdateItemHist2(record RetVc,record TempStockVc,Boolean);
external updating procedure INTransferUpdateItemHist2(record INTransferVc,Boolean,record TempStockVc,Boolean);
external updating procedure SHUpdateItemHist2(record SHVc,record TempStockVc,Boolean);
external updating procedure SDUpdateItemHist2(record SDVc,record TempStockVc,Boolean);
external updating procedure PurUpdateItemHist2(record PUVc,record TempStockVc,Boolean);
external updating procedure DispatchUpdateIntINrs2(record DispatchVc,Boolean,Boolean,record TempStockVc,Boolean);
external updating procedure InternMovUpdateINrs(record InternMovVc,Boolean,Boolean);
external updating procedure OffHireUpdateIntINrs2(record OffHireVc,Boolean,Boolean,record TempStockVc,Boolean);
external updating procedure QualConUpdateINrs2(record QualConVc,record TempStockVc,Boolean);
//external procedure CheckFlush(var Integer,Integer);

/*
function Boolean TestArtCode_ProdVc(record ProdVc Prodr)
begin
  Boolean res;
  Integer i,rwcnt;
  row ProdVc Prodrw;
  
  rwcnt = MatRowCnt(Prodr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Prodr,i,Prodrw);
    if (Prodrw.Item=="10102") then begin
      res = true;
      goto LTestArtCode_ProdVc;
    end;
  end;
LTestArtCode_ProdVc:;  
  TestArtCode_ProdVc = res;
  return;
end;

function Boolean TestArtCode_PUVc(record PUVc PUr)
begin
  Boolean res;
  Integer i,rwcnt;
  row PUVc PUrw;
  
  rwcnt = MatRowCnt(PUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PUr,i,PUrw);
    if (PUrw.ArtCode=="10102") then begin
      res = true;
      goto LTestArtCode_PUVc;
    end;
  end;
LTestArtCode_PUVc:;  
  TestArtCode_PUVc = res;
  return;
end;

function Boolean TestArtCode_IVVc(record IVVc IVr)
begin
  Boolean res;
  Integer i,rwcnt;
  row IVVc IVrw;
  
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.ArtCode=="10102") then begin
      res = true;
      goto LTestArtCode_IVVc;
    end;
  end;
LTestArtCode_IVVc:;  
  TestArtCode_IVVc = res;
  return;
end;

function Boolean TestArtCode_SHVc(record SHVc SHr)
begin
  Boolean res;
  Integer i,rwcnt;
  row SHVc SHrw;
  
  rwcnt = MatRowCnt(SHr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SHr,i,SHrw);
    if (SHrw.ArtCode=="10102") then begin
      res = true;
      goto LTestArtCode_SHVc;
    end;
  end;
LTestArtCode_SHVc:;  
  TestArtCode_SHVc = res;
  return;
end;

function Boolean TestArtCode_SDVc(record SDVc SDr)
begin
  Boolean res;
  Integer i,rwcnt;
  row SDVc SDrw;
  
  rwcnt = MatRowCnt(SDr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SDr,i,SDrw);
    if (SDrw.ArtCode=="10102") then begin
      res = true;
      goto LTestArtCode_SDVc;
    end;
  end;
LTestArtCode_SDVc:;  
  TestArtCode_SDVc = res;
  return;
end;

function Boolean TestArtCode_SRVc(record SRVc SRr)
begin
  Boolean res;
  Integer i,rwcnt;
  row SRVc SRrw;
  
  rwcnt = MatRowCnt(SRr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SRr,i,SRrw);
    if (SRrw.ArtCode=="10102") then begin
      res = true;
      goto LTestArtCode_SRVc;
    end;
  end;
LTestArtCode_SRVc:;  
  TestArtCode_SRVc = res;
  return;
end;

function Boolean TestArtCode_RetVc(record RetVc Retr)
begin
  Boolean res;
  Integer i,rwcnt;
  row RetVc Retrw;
  
  rwcnt = MatRowCnt(Retr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Retr,i,Retrw);
    if (Retrw.ArtCode=="10102") then begin
      res = true;
      goto LTestArtCode_RetVc;
    end;
  end;
LTestArtCode_RetVc:;  
  TestArtCode_RetVc = res;
  return;
end;

function Boolean TestArtCode_RetPUVc(record RetPUVc RetPUr)
begin
  Boolean res;
  Integer i,rwcnt;
  row RetPUVc RetPUrw;
  
  rwcnt = MatRowCnt(RetPUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RetPUr,i,RetPUrw);
    if (RetPUrw.ArtCode=="10102") then begin
      res = true;
      goto LTestArtCode_RetPUVc;
    end;
  end;
LTestArtCode_RetPUVc:;  
  TestArtCode_RetPUVc = res;
  return;
end;

function Boolean TestArtCode_WSVc(record WSVc WSr)
begin
  Boolean res;
  Integer i,rwcnt;
  row WSVc WSrw;
  
  rwcnt = MatRowCnt(WSr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(WSr,i,WSrw);
    if (WSrw.ArtCode=="10102") then begin
      res = true;
      goto LTestArtCode_WSVc;
    end;
  end;
LTestArtCode_WSVc:;  
  TestArtCode_WSVc = res;
  return;
end;

function Boolean TestArtCode_INTransferVc(record INTransferVc INTransferr)
begin
  Boolean res;
  Integer i,rwcnt;
  row INTransferVc INTransferrw;
  
  rwcnt = MatRowCnt(INTransferr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(INTransferr,i,INTransferrw);
    if (INTransferrw.ArtCode=="10102") then begin
      res = true;
      goto LTestArtCode_INTransferVc;
    end;
  end;
LTestArtCode_INTransferVc:;  
  TestArtCode_INTransferVc = res;
  return;
end;

function Boolean TestArtCode_StockMovVc(record StockMovVc StockMovr)
begin
  Boolean res;
  Integer i,rwcnt;
  row StockMovVc StockMovrw;
  
  rwcnt = MatRowCnt(StockMovr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(StockMovr,i,StockMovrw);
    if (StockMovrw.ArtCode=="10102") then begin
      res = true;
      goto LTestArtCode_StockMovVc;
    end;
  end;
LTestArtCode_StockMovVc:;  
  TestArtCode_StockMovVc = res;
  return;
end;

function Boolean TestArtCode_POVc(record POVc POr)
begin
  Boolean res;
  Integer i,rwcnt;
  row POVc POrw;
  
  rwcnt = MatRowCnt(POr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POr,i,POrw);
    if (POrw.ArtCode=="10102") then begin
      res = true;
      goto LTestArtCode_POVc;
    end;
  end;
LTestArtCode_POVc:;  
  TestArtCode_POVc = res;
  return;
end;

function Boolean TestArtCode_ORVc(record ORVc ORr)
begin
  Boolean res;
  Integer i,rwcnt;
  row ORVc ORrw;
  
  rwcnt = MatRowCnt(ORr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORr,i,ORrw);
    if (ORrw.ArtCode=="10102") then begin
      res = true;
      goto LTestArtCode_ORVc;
    end;
  end;
LTestArtCode_ORVc:;  
  TestArtCode_ORVc = res;
  return;
end;

function Boolean TestArtCode_ProdOrdVc(record ProdOrderVc ProdOrdr)
begin
  Boolean res;
  Integer i,rwcnt;
  row ProdOrderVc ProdOrdrw;
  
  rwcnt = MatRowCnt(ProdOrdr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ProdOrdr,i,ProdOrdrw);
    if (ProdOrdrw.Item=="10102") then begin
      res = true;
      goto LTestArtCode_ProdOrdVc;
    end;
  end;
LTestArtCode_ProdOrdVc:;  
  TestArtCode_ProdOrdVc = res;
  return;
end;
*/

procedure AddTempStockRows(record TempStockVc TSr,record ItemHistVc firstIHr)
begin
  record ItemHistVc IHr;
  Boolean found;
  row TempStockVc TSrw;
  
  found = true;
  IHr.FileName = firstIHr.FileName;
  IHr.TransNr = firstIHr.TransNr;
  while (LoopKey("FNTransNr",IHr,2,found)) begin
    if (IHr.FileName!=firstIHr.FileName) then begin found = false; end;
    if (IHr.TransNr!=firstIHr.TransNr) then begin found = false; end;
    if (found) then begin
      ClearRow(TSr,TSrw,1);
      TSrw.ArtCode = IHr.ArtCode;
      TSrw.Row = IHr.Row;
      TSrw.PrimaryCostModel = IHr.PrimaryCostModel;
      TSrw.QueuedCostModel = IHr.QueuedCostModel;
      TSrw.FIFOPerLocation = IHr.FIFOPerLocation;
      TSrw.ItemType = IHr.ItemType;
      TSrw.FIFOPerSerialNr = IHr.FIFOPerSerialNr;
      TSrw.NoNLCostOnShip = IHr.NoNLCostOnShip;
      TSrw.WAPerLocation = IHr.WAPerLocation;
      TSrw.WABase2 = IHr.WABase2;
      TSrw.UpdWeightAvFromRetPU = IHr.UpdWeightAvFromRetPU;
      TSrw.UpdWeightAvFromRet = IHr.UpdWeightAvFromRet;
      TSrw.StockAffectf = IHr.StockAffectf;
      MatRowPut(TSr,MatRowCnt(TSr),TSrw);
    end;
  end;
  return;
end;

updating function Boolean AddtoTemp(record ItemHistVc IHr,string filename,LongInt transnr,Date transdate,val locoknr,string location,Integer okstatus,Integer invalid,Integer recweight,var Integer cnt,Boolean skipifexistf)
begin
  record TempStockVc TSr;
  record TempStockVc oldTSr;
  Boolean res,lskipifexistf;
  
  lskipifexistf = false;
  if (skipifexistf) then begin
    oldTSr.FileName = filename;
    oldTSr.TransNr = transnr;
    oldTSr.TransDate = transdate;
    if (ReadFirstKey("FileName",oldTSr,3,true)) then begin
      lskipifexistf = true;
      res = true;
    end;
  end;
/*  
if (filename=="PUVc" and transnr==23000) then begin
Trace("lskipifexistf " & lskipifexistf," skipifexistf " & skipifexistf);
end;  
*/
  if (lskipifexistf==false) then begin
    TSr.FileName = filename;
    TSr.TransNr = transnr;
    TSr.TransDate = transdate;
    TSr.LocOKNr = locoknr;
    TSr.Location = location;
    TSr.Invalid = invalid;
    TSr.OKStatus = okstatus;

// to the row    
/*
    TSr.PrimaryCostModel = IHr.PrimaryCostModel;
    TSr.QueuedCostModel = IHr.QueuedCostModel;
    TSr.FIFOPerLocation = IHr.FIFOPerLocation;
    TSr.ItemType = IHr.ItemType;
    TSr.FIFOPerSerialNr = IHr.FIFOPerSerialNr;
    TSr.NoNLCostOnShip = IHr.NoNLCostOnShip;
    TSr.WAPerLocation = IHr.WAPerLocation;
    TSr.WABase2 = IHr.WABase2;
    TSr.UpdWeightAvFromRetPU = IHr.UpdWeightAvFromRetPU;
    TSr.UpdWeightAvFromRet = IHr.UpdWeightAvFromRet;
    TSr.StockAffectf = IHr.StockAffectf;
*/

    if (IHr.SerNr>0) then begin
      AddTempStockRows(TSr,IHr);
    end;

//    
    TSr.RecordWeight = recweight;
    res = RecordInsert(TSr,true);
    //CheckFlush(cnt,20);
  end;
  AddtoTemp = res;
  return;
end;

updating function LongInt FillupTempIV(var Integer cnt,Boolean skipifexistf)
begin
  record IVVc IVr;
  Boolean foundf;
  LongInt missed;
  Date td;
  record ItemHistVc dummyIHr;
  
  missed = 0;
  IVr.SerNr = -1;
  foundf = true;
  while (LoopMain(IVr,1,foundf)) begin
    if (IVr.OKFlag!=0) then begin
      if (AddToTemp(dummyIHr,"IVVc",IVr.SerNr,IVr.TransDate,IVr.LocOKNr,IVr.Location,1,IVr.Invalid,100,cnt,skipifexistf)==false) then begin
        missed = missed + 1;
      end;      
      if (IVr.Invalid!=0) then begin
        td = IVr.InvalidDate;
        if (blankdate(td)) then begin
          td = IVr.TransDate;
        end;
        if (AddToTemp(dummyIHr,"IVVcInvalidated",IVr.SerNr,td,IVr.InvalidLocOKNr,IVr.Location,1,0,100,cnt,skipifexistf)==false) then begin
          missed = missed + 1;
        end;      
      end;
    end;
  end;
  FillupTempIV = missed;
  return;
end;

updating function LongInt FillupTempSH(var Integer cnt,Boolean skipifexistf)
begin
  record SHVc SHr;
  Boolean foundf;
  LongInt missed;
  record ItemHistVc dummyIHr;
  
  missed = 0;
  SHr.SerNr = -1;
  foundf = true;
  while (LoopMain(SHr,1,foundf)) begin
    if (AddToTemp(dummyIHr,"SHVc",SHr.SerNr,SHr.ShipDate,SHr.LocOKNr,SHr.Location,SHr.OKFlag,0,100,cnt,skipifexistf)==false) then begin
      missed = missed + 1;
    end;
  end;
  FillupTempSH = missed;
  return;
end;

updating function LongInt FillupTempPU(var Integer cnt,Boolean skipifexistf)
begin
  record PUVc PUr;
  Boolean foundf;
  LongInt missed;
  record ItemHistVc dummyIHr;
  
  missed = 0;
  PUr.SerNr = -1;
  foundf = true;
  while (LoopMain(PUr,1,foundf)) begin
    if ((PUr.OKFlag!=0) and (PUr.Invalid==0)) then begin
      if (AddToTemp(dummyIHr,"PUVc",PUr.SerNr,PUr.TransDate,PUr.LocOKNr,PUr.Location,1,0,10,cnt,skipifexistf)==false) then begin
        missed = missed + 1;
      end;
    end;
  end;
  FillupTempPU = missed;
  return;
end;

updating function LongInt FillupTempStockMov(var Integer cnt,Boolean manystockmovrecsf,Boolean skipifexistf)
begin
  record StockMovVc StockMovr;
  Boolean foundf;
  LongInt missed;
  record ItemHistVc dummyIHr;
  
  missed = 0;
  StockMovr.SerNr = -1;
  foundf = true;
  while (LoopMain(StockMovr,1,foundf)) begin
    if (StockMovr.OKFlag!=0) or (StockMovr.SentOKFlag!=0) then begin
      if (manystockmovrecsf) then begin
        if (nonblank(StockMovr.ThrouLocation)) then begin
          if (StockMovr.SentOKFlag!=0) then begin
            if (AddToTemp(dummyIHr,"StockMov1Vc",StockMovr.SerNr,StockMovr.SentTransDate,StockMovr.FrLocOKNr,StockMovr.FrLocation,StockMovr.SentOKFlag,0,30,cnt,skipifexistf)==false) then begin
              missed = missed + 1;
            end;
          end;
        end else begin
          if (StockMovr.OKFlag!=0) then begin
            if (AddToTemp(dummyIHr,"StockMov1Vc",StockMovr.SerNr,StockMovr.TransDate,StockMovr.FrLocOKNr,StockMovr.FrLocation,StockMovr.OKFlag,0,30,cnt,skipifexistf)==false) then begin
              missed = missed + 1;
            end;
          end;
        end;
        if (nonblank(StockMovr.ThrouLocation)) then begin
          if (StockMovr.SentOKFlag!=0) then begin
            if (AddToTemp(dummyIHr,"StockMov2Vc",StockMovr.SerNr,StockMovr.SentTransDate,StockMovr.ToThrouLocOKNr,StockMovr.ThrouLocation,StockMovr.SentOKFlag,0,30,cnt,skipifexistf)==false) then begin
              missed = missed + 1;
            end;
          end;
          if (StockMovr.OKFlag!=0) then begin
            if (AddToTemp(dummyIHr,"StockMov3Vc",StockMovr.SerNr,StockMovr.TransDate,StockMovr.FrThrouLocOKNr,StockMovr.ThrouLocation,StockMovr.OKFlag,0,30,cnt,skipifexistf)==false) then begin
              missed = missed + 1;
            end;
          end;
        end;
        if (StockMovr.OKFlag!=0) then begin
          if (AddToTemp(dummyIHr,"StockMov4Vc",StockMovr.SerNr,StockMovr.TransDate,StockMovr.ToLocOKNr,StockMovr.ToLocation,StockMovr.OKFlag,0,30,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;
      end else begin
        if (AddToTemp(dummyIHr,"StockMovVc",StockMovr.SerNr,StockMovr.TransDate,StockMovr.FrLocOKNr,StockMovr.FrLocation,StockMovr.OKFlag,0,30,cnt,skipifexistf)==false) then begin
          missed = missed + 1;
        end;
      end;
    end;
  end;
  FillupTempStockMov = missed;
  return;
end;

updating function LongInt FillupTempSD(var Integer cnt,Boolean skipifexistf)
begin
  record SDVc SDr;
  Boolean foundf;
  LongInt missed;
  record ItemHistVc dummyIHr;
  
  missed = 0;
  SDr.SerNr = -1;
  foundf = true;
  while (LoopMain(SDr,1,foundf)) begin
    if (SDr.OKFlag!=0) then begin
      if (AddToTemp(dummyIHr,"SDVc",SDr.SerNr,SDr.TransDate,SDr.LocOKNr,SDr.Location,1,0,100,cnt,skipifexistf)==false) then begin
        missed = missed + 1;
      end;
    end;
  end;
  FillupTempSD = missed;
  return;
end;

updating function LongInt FillupTempSR(var Integer cnt,Boolean skipifexistf)
begin
  record SRVc SRr;
  Boolean foundf;
  LongInt missed;
  record ItemHistVc dummyIHr;
  
  missed = 0;
  SRr.SerNr = -1;
  foundf = true;
  while (LoopMain(SRr,1,foundf)) begin
    if (SRr.OKFlag!=0) then begin
      if (AddToTemp(dummyIHr,"SRVc",SRr.SerNr,SRr.TransDate,SRr.LocOKNr,SRr.Location,1,0,100,cnt,skipifexistf)==false) then begin
        missed = missed + 1;
      end;
    end;
  end;
  FillupTempSR = missed;
  return;
end;

updating function LongInt FillupTempRet(var Integer cnt,Boolean skipifexistf)
begin
  record RetVc Retr;
  Boolean foundf;
  LongInt missed;
  record ItemHistVc dummyIHr;
  
  missed = 0;
  Retr.SerNr = -1;
  foundf = true;
  while (LoopMain(Retr,1,foundf)) begin
    if (Retr.OKFlag!=0) then begin
      if (AddToTemp(dummyIHr,"RetVc",Retr.SerNr,Retr.TransDate,Retr.LocOKNr,Retr.Location,1,0,100,cnt,skipifexistf)==false) then begin
        missed = missed + 1;
      end;
    end;
  end;
  FillupTempRet = missed;
  return;
end;

updating function LongInt FillupTempRetPU(var Integer cnt,Boolean skipifexistf)
begin
  record RetPUVc RetPUr;
  Boolean foundf;
  LongInt missed;
  record ItemHistVc dummyIHr;
  
  missed = 0;
  RetPUr.SerNr = -1;
  foundf = true;
  while (LoopMain(RetPUr,1,foundf)) begin
    if (RetPUr.OKFlag!=0) then begin
      if (AddToTemp(dummyIHr,"RetPUVc",RetPUr.SerNr,RetPUr.TransDate,RetPUr.LocOKNr,RetPUr.Location,1,0,20,cnt,skipifexistf)==false) then begin
        missed = missed + 1;
      end;
    end;
  end;
  FillupTempRetPU = missed;
  return;
end;

updating function LongInt FillupTempINTransfer(var Integer cnt,Boolean skipifexistf)
begin
  record INTransferVc INTransferr;
  Boolean foundf;
  LongInt missed;
  record ItemHistVc dummyIHr;
  
  missed = 0;
  INTransferr.SerNr = -1;
  foundf = true;
  while (LoopMain(INTransferr,1,foundf)) begin
    if (INTransferr.OKFlag!=0) then begin
      if (AddToTemp(dummyIHr,"INTransferVc",INTransferr.SerNr,INTransferr.TransDate,INTransferr.LocOKNr,INTransferr.Location,1,0,100,cnt,skipifexistf)==false) then begin
        missed = missed + 1;
      end;
    end;
  end;
  FillupTempINTransfer = missed;
  return;
end;

updating function LongInt FillupTempWS(var Integer cnt,Boolean skipifexistf)
begin
  record WSVc WSr;
  Boolean foundf;
  LongInt missed;
  record ItemHistVc dummyIHr;
  
  missed = 0;
  WSr.SerNr = -1;
  foundf = true;
  while (LoopMain(WSr,1,foundf)) begin
    if (WSr.OKFlag!=0) and (WSr.UpdStockFlag!=0) then begin
      if (AddToTemp(dummyIHr,"WSVc",WSr.SerNr,WSr.TransDate,WSr.LocOKNr,WSr.Location,1,0,100,cnt,skipifexistf)==false) then begin
        missed = missed + 1;
      end;
    end;
  end;
  FillupTempWS = missed;
  return;
end;

updating function LongInt FillupTempProd(var Integer cnt,Boolean skipifexistf)
begin
  record ProdVc Prodr;
  Boolean foundf;
  LongInt missed;
  record ItemHistVc dummyIHr;
  
  missed = 0;
  Prodr.SerNr = -1;
  foundf = true;
  while (LoopMain(Prodr,1,foundf)) begin
    if (AddToTemp(dummyIHr,"ProdVc",Prodr.SerNr,Prodr.ProdDate,Prodr.LocOKNr,Prodr.Location,Prodr.PRStatusFlag,0,10,cnt,skipifexistf)==false) then begin
      missed = missed + 1;
    end;
  end;
  FillupTempProd = missed;
  return;
end;

updating function LongInt FillupTempProdOperation(var Integer cnt,Boolean skipifexistf)
begin
  record ProdOperationVc ProdOpr;
  Boolean foundf;
  LongInt missed;
  record ItemHistVc dummyIHr;
  
  missed = 0;
  ProdOpr.SerNr = -1;
  foundf = true;
  while (LoopMain(ProdOpr,1,foundf)) begin
    if (AddToTemp(dummyIHr,"ProdOperationVc",ProdOpr.SerNr,ProdOpr.ProdDate,ProdOpr.LocOKNr,ProdOpr.Location,ProdOpr.PRStatusFlag,0,10,cnt,skipifexistf)==false) then begin
      missed = missed + 1;
    end;
  end;
  FillupTempProdOperation = missed;
  return;
end;

updating function LongInt FillupTempProdOrder(var Integer cnt,Boolean skipifexistf)
begin
  record ProdOrderVc ProdOrderr;
  Boolean foundf;
  LongInt missed;
  record ItemHistVc dummyIHr;
  
  missed = 0;
  ProdOrderr.SerNr = -1;
  foundf = true;
  while (LoopMain(ProdOrderr,1,foundf)) begin
    if (AddToTemp(dummyIHr,"ProdOrderVc",ProdOrderr.SerNr,ProdOrderr.StartDate,0,"",1,0,200,cnt,skipifexistf)==false) then begin
      missed = missed + 1;
    end;
  end;
  FillupTempProdOrder = missed;
  return;
end;

updating function LongInt FillupTempOR(var Integer cnt,Boolean skipifexistf)
begin
  record ORVc ORr;
  Boolean foundf;
  LongInt missed;
  record ItemHistVc dummyIHr;
  
  missed = 0;
  ORr.SerNr = -1;
  foundf = true;
  while (LoopMain(ORr,1,foundf)) begin
    if (AddToTemp(dummyIHr,"ORVc",ORr.SerNr,ORr.OrdDate,0,"",1,0,200,cnt,skipifexistf)==false) then begin
      missed = missed + 1;
    end;
  end;
  FillupTempOR = missed;
  return;
end;

updating function LongInt FillupTempStockTake(var Integer cnt,Boolean skipifexistf)
begin
  record StockTakeVc StockTaker;
  Boolean foundf;
  LongInt missed;
  record ItemHistVc dummyIHr;
  
  missed = 0;
  StockTaker.SerNr = -1;
  foundf = true;
  while (LoopMain(StockTaker,1,foundf)) begin
    if (AddToTemp(dummyIHr,"StockTakeVc",StockTaker.SerNr,StockTaker.TransDate,0,"",1,0,200,cnt,skipifexistf)==false) then begin
      missed = missed + 1;
    end;
  end;
  FillupTempStockTake = missed;
  return;
end;

updating function LongInt FillupTempDispatch(var Integer cnt,Boolean skipifexistf)
begin
  record DispatchVc Dispatchr;
  Boolean foundf;
  LongInt missed;
  record ItemHistVc dummyIHr;
  
  missed = 0;
  Dispatchr.SerNr = -1;
  foundf = true;
  while (LoopMain(Dispatchr,1,foundf)) begin
    if (AddToTemp(dummyIHr,"DispatchVc",Dispatchr.SerNr,Dispatchr.TransDate,0,"",Dispatchr.OKFlag,0,200,cnt,skipifexistf)==false) then begin
      missed = missed + 1;
    end;
  end;
  FillupTempDispatch = missed;
  return;
end;

updating function LongInt FillupTempOffHire(var Integer cnt,Boolean skipifexistf)
begin
  record OffHireVc OffHirer;
  Boolean foundf;
  LongInt missed;
  record ItemHistVc dummyIHr;
  
  missed = 0;
  OffHirer.SerNr = -1;
  foundf = true;
  while (LoopMain(OffHirer,1,foundf)) begin
    if (AddToTemp(dummyIHr,"OffHireVc",OffHirer.SerNr,OffHirer.TransDate,0,"",OffHirer.OKFlag,0,200,cnt,skipifexistf)==false) then begin
      missed = missed + 1;
    end;
  end;
  FillupTempOffHire = missed;
  return;
end;

updating function LongInt FillupTempInternMov(var Integer cnt,Boolean skipifexistf)
begin
  record InternMovVc InternMovr;
  Boolean foundf;
  LongInt missed;
  record ItemHistVc dummyIHr;
  
  missed = 0;
  InternMovr.SerNr = -1;
  foundf = true;
  while (LoopMain(InternMovr,1,foundf)) begin
    if (AddToTemp(dummyIHr,"InternMovVc",InternMovr.SerNr,InternMovr.TransDate,0,"",InternMovr.OKFlag,0,200,cnt,skipifexistf)==false) then begin
      missed = missed + 1;
    end;
  end;
  FillupTempInternMov = missed;
  return;
end;

updating function LongInt FillupTempQualCon(var Integer cnt,Boolean skipifexistf)
begin
  record QualConVc QualConr;
  Boolean foundf;
  LongInt missed;
  record ItemHistVc dummyIHr;
  
  missed = 0;
  QualConr.SerNr = -1;
  foundf = true;
  while (LoopMain(QualConr,1,foundf)) begin
    if (AddToTemp(dummyIHr,"QualConVc",QualConr.SerNr,QualConr.AnalyseDate,0,"",1,0,200,cnt,skipifexistf)==false) then begin
      missed = missed + 1;
    end;
  end;
  FillupTempQualCon = missed;
  return;
end;


updating function LongInt FillupTempPO(var Integer cnt,Boolean skipifexistf)
begin
  record POVc POr;
  Boolean foundf;
  LongInt missed;
  record ItemHistVc dummyIHr;
  
  missed = 0;
  POr.SerNr = -1;
  foundf = true;
  while (LoopMain(POr,1,foundf)) begin
    if (AddToTemp(dummyIHr,"POVc",POr.SerNr,POr.TransDate,0,"",1,0,200,cnt,skipifexistf)==false) then begin
      missed = missed + 1;
    end;
  end;
  FillupTempPO = missed;
  return;
end;

updating function LongInt FillupTempIVCash(var Integer cnt,Boolean skipifexistf)
begin
  record IVCashVc IVCashr;
  Boolean foundf;
  LongInt missed;
  record ItemHistVc dummyIHr;
  
  missed = 0;
  IVCashr.SerNr = -1;
  foundf = true;
  while (LoopMain(IVCashr,1,foundf)) begin
    if ((IVCashr.OKFlag!=0) and (IVCashr.UpdStockFlag!=0) and (IVCashr.Invalid==0)) then begin
      if (AddToTemp(dummyIHr,"IVCashVc",IVCashr.SerNr,IVCashr.TransDate,0,IVCashr.Location,1,0,100,cnt,skipifexistf)==false) then begin
        missed = missed + 1;
      end;
    end;
  end;
  FillupTempIVCash = missed;
  return;
end;

updating function LongInt FillupTempRegArchive(var Integer cnt,Boolean skipifexistf,var Date ignoredate)
begin
  record RegArchiveDetailVc RegArchiveDetailr;
  Boolean foundf;
  LongInt missed;
  record ItemHistVc dummyIHr;
  
  missed = 0;
  RegArchiveDetailr.FileName = "ItemHistVc";
  foundf = true;
  while (LoopKey("FindDuplicates",RegArchiveDetailr,1,foundf)) begin
    if (RegArchiveDetailr.FileName!="ItemHistVc") then begin
      foundf = false;
    end;
    if (foundf) then begin
      if (AddToTemp(dummyIHr,"RegArchiveDetailVc",RegArchiveDetailr.SerNr,RegArchiveDetailr.TransDate,0,RegArchiveDetailr.KeyTwo,1,0,100,cnt,skipifexistf)==false) then begin
        missed = missed + 1;
      end;
      ignoredate = RegArchiveDetailr.TransDate;
    end;
  end;
  FillupTempRegArchive = missed;
  return;
end;

global
updating procedure EmptyTempStock(Boolean calcwaf)
begin
  record TempStockVc TSr;
  
  if (calcwaf==false) then begin
    ResetLoop(TSr);
    while (LoopMain(TSr,1,true)) begin
      RecordDelete(TSr);
      StepBack(TSr);
    end;
  end;
  return;
end;

updating function LongInt EmptyItemHist(Boolean calcwaf)
begin
  record ItemHistVc IHr;
  record ItemStatusVc ISr;
  record WeigAvVc WAr;
  
  ResetLoop(IHr);
  while (LoopMain(IHr,1,true)) begin
    RecordDelete(IHr);
    StepBack(IHr);
  end;
  ResetLoop(ISr);
  while (LoopMain(ISr,1,true)) begin
    RecordDelete(ISr);
    StepBack(ISr);
  end;
  if (calcwaf) then begin
    ResetLoop(WAr);
    while (LoopMain(WAr,1,true)) begin
      RecordDelete(WAr);
      StepBack(WAr);
    end;  
  end;
  EmptyItemHist = 0;
  return;
end;

function Boolean InvalidatedTempStockExists(string filename,LongInt transnr)
begin
  record TempStockVc TSr;
  Boolean res;
  
  TSr.FileName = filename;
  TSr.TransNr = transnr;

  res = ReadFirstKey("FileName",TSr,2,true);
  if (res) then begin
    res = TSr.Invalid!=0;
  end;
  InvalidatedTempStockExists = res;
  return;
end;

global
updating function LongInt FillTempStockWithItemHist(Integer Chronology,Boolean skipifexistf,Date startd,Boolean overwritemanystockmovrecsf)
begin
  LongInt missed;
  Integer cnt;
  record ItemHistVc IHr;
  record PUVc PUr;
  record RetPUVc RetPUr;
  record StockMovVc StockMovr;
  record IVVc IVr;
  record IVCashVc IVCashr;
  record SHVc SHr;
  record SDVc SDr;
  record SRVc SRr;
  record RetVc Retr;
  record WSVc WSr;
  record DispatchVc Dispatchr;
  record ProdVc Prodr;
  record ProdOperationVc ProdOpr;
  record INTransferVc INTransferr;
  record StockTakeVc StockTaker;
  record OffHireVc OffHirer;
  record InternMovVc InternMovr;
  record QualConVc QualConr;
  val locoknr;
  Boolean manystockmovrecsf,found;
  record ORVc ORr;
  record POVc POr;
  record ProdOrderVc ProdOrderr;
  string 255 index;

  switch (Chronology) begin
    case 1: 
//      locoknr = IHr.SerNrPerLoc;
      locoknr = IHr.SerNr;
    case 2: 
      locoknr = IHr.SerNr; manystockmovrecsf = true;
    otherwise 
      locoknr = IHr.SerNr;
  end;
  if (overwritemanystockmovrecsf) then begin
    manystockmovrecsf = overwritemanystockmovrecsf;
  end;
  index = "SerNr";
  if (nonblankdate(startd)) then begin
    index = "TransDate";
    IHr.TransDate = startd;
  end;
  found = true;
  missed = 0;
  while (LoopKey(index,IHr,1,found)) begin
    if (nonblankdate(startd)) then begin
      if (IHr.TransDate<startd) then begin found = false; end;
    end;
    if (found) then begin
    switch (Chronology) begin
      case 1: locoknr = IHr.SerNrPerLoc;
      otherwise locoknr = IHr.SerNr;
    end;

    switch (IHr.FileName) begin
      case "PUVc":
        PUr.SerNr = IHr.TransNr;
        if (ReadFirstMain(PUr,1,true)) then begin
          if (AddToTemp(IHr,"PUVc",PUr.SerNr,PUr.TransDate,locoknr,PUr.Location,PUr.OKFlag,0,10,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;
      case "RetPUVc":
        RetPUr.SerNr = IHr.TransNr;
        if (ReadFirstMain(RetPUr,1,true)) then begin
          if (AddToTemp(IHr,"RetPUVc",RetPUr.SerNr,RetPUr.TransDate,locoknr,RetPUr.Location,RetPUr.OKFlag,0,20,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;
      case "StockMovVc":
        StockMovr.SerNr = IHr.TransNr;
        if (ReadFirstMain(StockMovr,1,true)) then begin
          if (manystockmovrecsf) then begin
            if (IHr.Qty<0) then begin
              if (IHr.Location==StockMovr.FrLocation) then begin
                if (nonblank(StockMovr.ThrouLocation)) then begin
                  if (AddToTemp(IHr,"StockMov1Vc",StockMovr.SerNr,StockMovr.SentTransDate,locoknr,StockMovr.FrLocation,StockMovr.SentOKFlag,0,30,cnt,skipifexistf)==false) then begin
                    missed = missed + 1;
                  end;
                end else begin
                  if (AddToTemp(IHr,"StockMov1Vc",StockMovr.SerNr,StockMovr.TransDate,locoknr,StockMovr.FrLocation,StockMovr.OKFlag,0,30,cnt,skipifexistf)==false) then begin
                    missed = missed + 1;
                  end;
                end;
              end;
              if (IHr.Location==StockMovr.ThrouLocation) then begin
                if (AddToTemp(IHr,"StockMov3Vc",StockMovr.SerNr,StockMovr.TransDate,locoknr,StockMovr.ThrouLocation,StockMovr.OKFlag,0,30,cnt,skipifexistf)==false) then begin
                  missed = missed + 1;
                end;
              end;
            end else begin
              if (IHr.Location==StockMovr.ThrouLocation) then begin
                if (AddToTemp(IHr,"StockMov2Vc",StockMovr.SerNr,StockMovr.SentTransDate,locoknr,StockMovr.ThrouLocation,StockMovr.SentOKFlag,0,30,cnt,skipifexistf)==false) then begin
                  missed = missed + 1;
                end;
              end;
              if (IHr.Location==StockMovr.ToLocation) then begin
                if (AddToTemp(IHr,"StockMov4Vc",StockMovr.SerNr,StockMovr.TransDate,locoknr,StockMovr.ToLocation,StockMovr.OKFlag,0,30,cnt,skipifexistf)==false) then begin
                  missed = missed + 1;
                end;
              end;
            end;
            
          end else begin
            if (AddToTemp(IHr,"StockMovVc",StockMovr.SerNr,StockMovr.TransDate,locoknr,StockMovr.FrLocation,1,0,30,cnt,skipifexistf)==false) then begin
              missed = missed + 1;
            end;
          end;
        end;
      case "ProdVc":
        Prodr.SerNr = IHr.TransNr;
        if (ReadFirstMain(Prodr,1,true)) then begin
          if (AddToTemp(IHr,"ProdVc",Prodr.SerNr,Prodr.ProdDate,locoknr,Prodr.Location,Prodr.PRStatusFlag,0,10,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;
      case "ProdOperationVc":
        ProdOpr.SerNr = IHr.TransNr;
        if (ReadFirstMain(ProdOpr,1,true)) then begin
          if (AddToTemp(IHr,"ProdOperationVc",ProdOpr.SerNr,ProdOpr.ProdDate,locoknr,ProdOpr.Location,Prodr.PRStatusFlag,0,10,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;
      case "IVVc":
        IVr.SerNr = IHr.TransNr;
        if (ReadFirstMain(IVr,1,true)) then begin
          if (InvalidatedTempStockExists(IHr.FileName,IHr.TransNr)==false) then begin
            if (AddToTemp(IHr,"IVVc",IVr.SerNr,IVr.TransDate,locoknr,IVr.Location,IVr.OKFlag,IVr.Invalid,100,cnt,skipifexistf)==false) then begin
              missed = missed + 1;
            end;
          end else begin
            if (AddToTemp(IHr,"IVVcInvalidated",IVr.SerNr,IVr.InvalidDate,locoknr,IVr.Location,IVr.OKFlag,0,100,cnt,skipifexistf)==false) then begin
              missed = missed + 1;
            end;      
          end;
        end;
      case "IVCashVc":
        IVCashr.SerNr = IHr.TransNr;
        if (ReadFirstMain(IVCashr,1,true)) then begin
          if (AddToTemp(IHr,"IVCashVc",IVCashr.SerNr,IVCashr.TransDate,locoknr,IVCashr.Location,IVCashr.OKFlag,0,100,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;
      case "SHVc":
        SHr.SerNr = IHr.TransNr;
        if (ReadFirstMain(SHr,1,true)) then begin
          if (AddToTemp(IHr,"SHVc",SHr.SerNr,SHr.ShipDate,locoknr,SHr.Location,SHr.OKFlag,0,100,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;
      case "SDVc":
        SDr.SerNr = IHr.TransNr;
        if (ReadFirstMain(SDr,1,true)) then begin
          if (AddToTemp(IHr,"SDVc",SDr.SerNr,SDr.TransDate,locoknr,SDr.Location,SDr.OKFlag,0,100,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;
      case "SRVc":
        SRr.SerNr = IHr.TransNr;
        if (ReadFirstMain(SRr,1,true)) then begin
          if (AddToTemp(IHr,"SRVc",SRr.SerNr,SRr.TransDate,locoknr,SRr.Location,SRr.OKFlag,0,100,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;
      case "WSVc":
        WSr.SerNr = IHr.TransNr;
        if (ReadFirstMain(WSr,1,true)) then begin
          if (AddToTemp(IHr,"WSVc",WSr.SerNr,WSr.TransDate,locoknr,WSr.Location,WSr.OKFlag,0,100,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;
      case "DispatchVc":
        Dispatchr.SerNr = IHr.TransNr;
        if (ReadFirstMain(Dispatchr,1,true)) then begin
          if (AddToTemp(IHr,"DispatchVc",Dispatchr.SerNr,Dispatchr.TransDate,locoknr,Dispatchr.Location,Dispatchr.OKFlag,0,200,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;
      case "RetVc":
        Retr.SerNr = IHr.TransNr;
        if (ReadFirstMain(Retr,1,true)) then begin
          if (AddToTemp(IHr,"RetVc",Retr.SerNr,Retr.TransDate,locoknr,Retr.Location,Retr.OKFlag,0,100,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;
      case "INTransferVc":
        INTransferr.SerNr = IHr.TransNr;
        if (ReadFirstMain(INTransferr,1,true)) then begin
          if (AddToTemp(IHr,"INTransferVc",INTransferr.SerNr,INTransferr.TransDate,locoknr,INTransferr.Location,INTransferr.OKFlag,0,100,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;
        
      case "Fut2ProdInVc":
        Prodr.SerNr = IHr.TransNr;
        if (ReadFirstMain(Prodr,1,true)) then begin
          if (AddToTemp(IHr,"ProdVc",Prodr.SerNr,Prodr.StartDate,0,"",1,0,200,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;
      case "Fut2ProdOutVc":
        Prodr.SerNr = IHr.TransNr;
        if (ReadFirstMain(Prodr,1,true)) then begin
          if (AddToTemp(IHr,"ProdVc",Prodr.SerNr,Prodr.StartDate,0,"",1,0,200,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;
      case "Fut2ProdOrderInVc":
        ProdOrderr.SerNr = IHr.TransNr;
        if (ReadFirstMain(ProdOrderr,1,true)) then begin
          if (AddToTemp(IHr,"ProdOrderVc",ProdOrderr.SerNr,ProdOrderr.StartDate,locoknr,"",1,0,200,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;
      case "Fut2ProdOrderOutVc":
        ProdOrderr.SerNr = IHr.TransNr;
        if (ReadFirstMain(ProdOrderr,1,true)) then begin
          if (AddToTemp(IHr,"ProdOrderVc",ProdOrderr.SerNr,ProdOrderr.StartDate,locoknr,"",1,0,200,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;
      case "Fut3ORVc":
        ORr.SerNr = IHr.TransNr;
        if (ReadFirstMain(ORr,1,true)) then begin
          if (AddToTemp(IHr,"ORVc",ORr.SerNr,ORr.OrdDate,locoknr,ORr.Location,1,0,200,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;
      case "Fut1POVc":
        POr.SerNr = IHr.TransNr;
        if (ReadFirstMain(POr,1,true)) then begin
          if (AddToTemp(IHr,"POVc",POr.SerNr,POr.TransDate,locoknr,POr.Location,1,0,200,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;        
      case "StockTakeVc":
        StockTaker.SerNr = IHr.TransNr;
        if (ReadFirstMain(StockTaker,1,true)) then begin
          if (AddToTemp(IHr,"StockTakeVc",StockTaker.SerNr,StockTaker.TransDate,locoknr,StockTaker.Location,1,0,200,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;
      case "OffHireVc":
        OffHirer.SerNr = IHr.TransNr;
        if (ReadFirstMain(OffHirer,1,true)) then begin
          if (AddToTemp(IHr,"OffHireVc",OffHirer.SerNr,OffHirer.TransDate,locoknr,OffHirer.Location,OffHirer.OKFlag,0,200,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;
      case "InternMovVc":
        InternMovr.SerNr = IHr.TransNr;
        if (ReadFirstMain(InternMovr,1,true)) then begin
          if (AddToTemp(IHr,"InternMovVc",InternMovr.SerNr,InternMovr.TransDate,locoknr,IHr.Location,InternMovr.OKFlag,0,200,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;
      case "QualConVc":
        QualConr.SerNr = IHr.TransNr;
        if (ReadFirstMain(QualConr,1,true)) then begin
          if (AddToTemp(IHr,"QualConVc",QualConr.SerNr,QualConr.AnalyseDate,locoknr,IHr.Location,1,0,200,cnt,skipifexistf)==false) then begin
            missed = missed + 1;
          end;
        end;
    end;
LSKIP:;    
    end;
  end;
  return;
end;

updating procedure ItemHistIV(record TempStockVc TSr,Boolean calcwaf,Boolean inalidatedf,Boolean usetmpstkf)
begin
  record IVVc IVr;
  
  IVr.SerNr = TSr.TransNr;
  if (ReadFirstMain(IVr,1,true)) then begin
    if (inalidatedf==false) then begin
      IVr.Invalid = 0;
    end;
    IVUpdateStock2(IVr,false,TSr,usetmpstkf);
    if (calcwaf) and (IVr.Invalid!=0) then begin
      IVUpdateCostPrice(IVr);
    end;
    IVUpdateItemHist2(IVr,TSr,usetmpstkf);
  end;
  return;
end;

updating procedure ItemHistSH(record TempStockVc TSr,Boolean usetmpstkf)
begin
  record SHVc SHr;
  record SHVc SH2r;
  
  SHr.SerNr = TSr.TransNr;
  if (ReadFirstMain(SHr,1,true)) then begin
    if (SHr.OKFlag!=0) then begin
      SHUpdateItemHist2(SHr,TSr,usetmpstkf);
      SHUpdateStock2(SHr,true,false,TSr,usetmpstkf);
    end else begin
      SHUpdateInShipment(SHr,true,SH2r,false,false);
    end;
  end;
  return;
end;

updating procedure ItemHistPU(record TempStockVc TSr,Boolean calcwaf,Boolean usetmpstkf)
begin
  record PUVc PUr;
  
  PUr.SerNr = TSr.TransNr;
  if (ReadFirstMain(PUr,1,true)) then begin
    PurUpdateStock2(PUr,false,TSr,usetmpstkf);
    if (calcwaf) then begin
      PurUpdateCostPrice(PUr,false);
      PurUpdateCostPrice(PUr,true);
    end;
    PurUpdateItemHist2(PUr,TSr,usetmpstkf);
  end;
  return;
end;

updating procedure ItemHistStockMov(record TempStockVc TSr,Boolean calcwaf,Boolean usetmpstkf)
begin
  record StockMovVc StockMovr;
  record StockMovVc prevStockMovr;
  
  StockMovr.SerNr = TSr.TransNr;
  if (ReadFirstMain(StockMovr,1,true)) then begin
    StockMovUpdateStock(StockMovr,prevStockMovr,true,true,false);
    if (calcwaf) then begin
      StockMovUpdateCostPrice(StockMovr,prevStockMovr);
    end;
    StockMovUpdateItemHist2(StockMovr,prevStockMovr,TSr,usetmpstkf);
  end;
  return;
end;

updating procedure ItemHistStockMov1(record TempStockVc TSr,record MainStockBlock MSb,Boolean usetmpstkf)
begin
  record StockMovVc StockMovr;
  record StockMovVc prevStockMovr;
  row StockMovVc StockMovrw;
  Integer i,rwcnt;
  record LocationVc toLocr;
  record SerNrTrackBlock SNrb;
  record INVc INr;
  
  BlockLoad(SNrb);
  StockMovr.SerNr = TSr.TransNr;
  if (ReadFirstMain(StockMovr,1,true)) then begin    
    rwcnt = MatRowCnt(StockMovr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(StockMovr,i,StockMovrw);
      if (ShouldItemUpdateStock(StockMovrw.ArtCode)) then begin
        if (StockMovrw.SentQuant!=0) then begin
          toLocr.Code = StockMovr.ThrouLocation;
          ReadFirstMain(toLocr,1,true);
          StockMovUpdateStockFrom(StockMovr,StockMovr.FrLocation,StockMovrw,MSb,toLocr,true,true,true,false);
        end else begin
          if (StockMovrw.Quant!=0) then begin
            toLocr.Code = StockMovr.ToLocation;
            ReadFirstMain(toLocr,1,true);
            StockMovUpdateStockFrom(StockMovr,StockMovr.FrLocation,StockMovrw,MSb,toLocr,false,true,true,false);
          end;
        end;
      end;
    end;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(StockMovr,i,StockMovrw);
      ReadFirstItem(StockMovrw.ArtCode,INr,true,false);
      if (StockMovrw.SentQuant!=0) then begin
        StockMovUpdateItemHistory_Out2(StockMovr,StockMovr.FrLocation,MSb,SNrb,StockMovrw,true,i,INr,TSr,usetmpstkf);
      end else begin
        if (StockMovrw.Quant!=0) then begin
          StockMovUpdateItemHistory_Out2(StockMovr,StockMovr.FrLocation,MSb,SNrb,StockMovrw,false,i,INr,TSr,usetmpstkf);
        end;
      end;
    end;    
  end;
  return;
end;

updating procedure ItemHistStockMov2(record TempStockVc TSr,Boolean calcwaf,record MainStockBlock MSb)
begin
  record StockMovVc StockMovr;
  record StockMovVc prevStockMovr;
  row StockMovVc StockMovrw;
  Integer i,rwcnt;
  record LocationVc toLocr;
  record SerNrTrackBlock SNrb;
  record INVc INr;

  BlockLoad(SNrb);  
  StockMovr.SerNr = TSr.TransNr;
  if (ReadFirstMain(StockMovr,1,true)) then begin
    rwcnt = MatRowCnt(StockMovr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(StockMovr,i,StockMovrw);
      if (ShouldItemUpdateStock(StockMovrw.ArtCode)) then begin
        if (StockMovrw.SentQuant!=0) then begin
          toLocr.Code = StockMovr.ThrouLocation;
          ReadFirstMain(toLocr,1,true);
          StockMovUpdateStockTo(StockMovr,StockMovr.ThrouLocation,StockMovrw,MSb,toLocr,true,true,true,false);
        end;
      end;
    end;
    if (calcwaf) then begin
      StockMovr.OKFlag = 0;
      StockMovUpdateCostPrice(StockMovr,prevStockMovr);
    end;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(StockMovr,i,StockMovrw);
      if (StockMovrw.SentQuant!=0) then begin
        ReadFirstItem(StockMovrw.ArtCode,INr,true,false);
        StockMovUpdateItemHist_In(StockMovr,StockMovr.FrLocation,StockMovr.ThrouLocation,MSb,SNrb,StockMovrw,true,i,INr);
      end;
    end;        
  end;
  return;
end;

updating procedure ItemHistStockMov3(record TempStockVc TSr,record MainStockBlock MSb,Boolean usetmpstkf)
begin
  record StockMovVc StockMovr;
  record StockMovVc prevStockMovr;
  row StockMovVc StockMovrw;
  Integer i,rwcnt;
  record LocationVc toLocr;
  record SerNrTrackBlock SNrb;
  record INVc INr;
  
  BlockLoad(SNrb);
  StockMovr.SerNr = TSr.TransNr;
  if (ReadFirstMain(StockMovr,1,true)) then begin
    toLocr.Code = StockMovr.ToLocation;
    ReadFirstMain(toLocr,1,true);
    rwcnt = MatRowCnt(StockMovr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(StockMovr,i,StockMovrw);
      if (ShouldItemUpdateStock(StockMovrw.ArtCode)) then begin
        if (StockMovrw.Quant!=0) then begin
          StockMovUpdateStockFrom(StockMovr,StockMovr.ThrouLocation,StockMovrw,MSb,toLocr,false,true,true,false);
        end;
      end;
    end;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(StockMovr,i,StockMovrw);
      if (StockMovrw.Quant!=0) then begin
        ReadFirstItem(StockMovrw.ArtCode,INr,true,false);
        StockMovUpdateItemHistory_Out2(StockMovr,StockMovr.ThrouLocation,MSb,SNrb,StockMovrw,false,i,INr,TSr,usetmpstkf);
      end;
    end;
  end;
  return;
end;

updating procedure ItemHistStockMov4(record TempStockVc TSr,Boolean calcwaf,record MainStockBlock MSb)
begin
  record StockMovVc StockMovr;
  record StockMovVc prevStockMovr;
  row StockMovVc StockMovrw;
  Integer i,rwcnt;
  record LocationVc toLocr;
  record SerNrTrackBlock SNrb;
  record INVc INr;

  BlockLoad(SNrb);  
  StockMovr.SerNr = TSr.TransNr;
  if (ReadFirstMain(StockMovr,1,true)) then begin
    rwcnt = MatRowCnt(StockMovr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(StockMovr,i,StockMovrw);
      if (ShouldItemUpdateStock(StockMovrw.ArtCode)) then begin
        toLocr.Code = StockMovr.ToLocation;
        ReadFirstMain(toLocr,1,true);
        StockMovUpdateStockTo(StockMovr,StockMovr.ToLocation,StockMovrw,MSb,toLocr,false,true,true,false);
      end;
    end;
    if (calcwaf) then begin
      RecordCopy(prevStockMovr,StockMovr);
      prevStockMovr.SentOKFlag = 1;
      prevStockMovr.OKFlag = 0;
      StockMovUpdateCostPrice(StockMovr,prevStockMovr);
    end;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(StockMovr,i,StockMovrw);
      ReadFirstItem(StockMovrw.ArtCode,INr,true,false);
      if (nonblank(StockMovr.ThrouLocation)) then begin
        StockMovUpdateItemHist_In(StockMovr,StockMovr.ThrouLocation,StockMovr.ToLocation,MSb,SNrb,StockMovrw,false,i,INr);
      end else begin
        StockMovUpdateItemHist_In(StockMovr,StockMovr.FrLocation,StockMovr.ToLocation,MSb,SNrb,StockMovrw,false,i,INr);
      end;
    end;    
  end;
  return;
end;

updating procedure ItemHistSD(record TempStockVc TSr,Boolean usetmpstkf)
begin
  record SDVc SDr;
  
  SDr.SerNr = TSr.TransNr;
  if (ReadFirstMain(SDr,1,true)) then begin
    SDUpdateItemHist2(SDr,TSr,usetmpstkf);
    SDUpdateStock2(SDr,false,TSr,usetmpstkf);
  end;
  return;
end;

updating procedure ItemHistSR(record TempStockVc TSr,Boolean calcwaf,Boolean usetmpstkf)
begin
  record SRVc SRr;
  
  SRr.SerNr = TSr.TransNr;
  if (ReadFirstMain(SRr,1,true)) then begin
    SRUpdateStock(SRr,false);
    SRUpdateItemHist2(SRr,false,TSr,usetmpstkf);
    if (calcwaf) or (true) then begin
      SRUpdateCostPrice(SRr);
    end;
    SRUpdateItemHist2(SRr,true,TSr,usetmpstkf);
  end;
  return;
end;

updating procedure ItemHistRet(record TempStockVc TSr,Boolean calcwaf,Boolean usetmpstkf)
begin
  record RetVc Retr;
  vector val dummy_retvc;
  
  Retr.SerNr = TSr.TransNr;
  if (ReadFirstMain(Retr,1,true)) then begin
    RetUpdateStock2(Retr,false,true,dummy_retvc,TSr,usetmpstkf);
    if (calcwaf) then begin
      RetUpdateCostPrice(Retr);    
    end;
    RetUpdateItemHist2(Retr,TSr,usetmpstkf);
  end;
  return;
end;

updating procedure ItemHistRetPU(record TempStockVc TSr,Boolean calcwaf,Boolean usetmpstkf)
begin
  record RetPUVc RetPUr;
  
  RetPUr.SerNr = TSr.TransNr;
  if (ReadFirstMain(RetPUr,1,true)) then begin
    if (calcwaf) then begin
      RetPUUpdateCostPrice(RetPUr);
    end;
    RetPUUpdateStock(RetPUr,false,usetmpstkf);
    RetPUUpdateItemHist2(RetPUr,TSr,usetmpstkf);
  end;
  return;
end;

updating procedure ItemHistINTransfer(record TempStockVc TSr,Boolean usetmpstkf)
begin
  record INTransferVc INTransferr;
  
  INTransferr.SerNr = TSr.TransNr;
  if (ReadFirstMain(INTransferr,1,true)) then begin
    INTransferUpdateItemHist2(INTransferr,true,TSr,usetmpstkf);
    INTransferUpdateStock(INTransferr,true,false);
  end;
  return;
end;

updating procedure ItemHistProd(record TempStockVc TSr,record MainStockBlock MSb,Boolean calcwaf,Boolean usetmpstkf)
begin
  record ProdVc Prodr;
  record ProdVc prevProdr;
  
  Prodr.SerNr = TSr.TransNr;
  if (ReadFirstMain(Prodr,1,true)) then begin
    UpdateProdOut(Prodr,true,(Prodr.PRStatusFlag!=3) and (Prodr.PRStatusFlag!=5));
    if (((Prodr.PRStatusFlag==3) or (Prodr.PRStatusFlag==5))) then begin
      if (calcwaf) then begin
        ProdUpdateCostPrice(Prodr,false);
      end;
      ProdUpdateItemHistory2(Prodr,prevProdr,TSr,usetmpstkf);
    end;
  end;
  return;
end;

updating procedure ItemHistProdOperation(record TempStockVc TSr,record MainStockBlock MSb,Boolean calcwaf,Boolean usetmpstkf)
begin
  record ProdOperationVc ProdOpr;
  record ProdOperationVc prevProdOpr;
  
  ProdOpr.SerNr = TSr.TransNr;
  if (ReadFirstMain(ProdOpr,1,true)) then begin
    UpdateProdOperationOut(ProdOpr,true);
    if (ProdOpr.PRStatusFlag==3) or (ProdOpr.PRStatusFlag==5) then begin
      if (calcwaf) then begin
        ProdOperationUpdateCostPrice(ProdOpr);
      end;
      ProdOperationUpdateItemHistory2(ProdOpr,TSr,usetmpstkf);
    end;
  end;
  return;
end;

updating procedure ItemHistProdOrder(record TempStockVc TSr)
begin
  record ProdOrderVc ProdOrderr;
  
  ProdOrderr.SerNr = TSr.TransNr;
  if (ReadFirstMain(ProdOrderr,1,true)) then begin
    UpdateProdOrd(ProdOrderr,true,blankval);//JArek ? 
  end;
  return;
end;

updating procedure ItemHistWS(record TempStockVc TSr,Boolean usetmpstkf)
begin
  record WSVc WSr;
  
  WSr.SerNr = TSr.TransNr;
  if (ReadFirstMain(WSr,1,true)) then begin
    WSUpdateItemHistory2(WSr,TSr,usetmpstkf);
    WSUpdateStockTool2(WSr,false,false,TSr,usetmpstkf);
  end;
  return;
end;

updating procedure ItemHistOR(record TempStockVc TSr,record MainStockBlock MSb)
begin
  record ORVc ORr;
  
  ORr.SerNr = TSr.TransNr;
  if (ReadFirstMain(ORr,1,true)) then begin
    UpdateOrdOut(ORr,true,true);//Jarek ?
  end;
  return;
end;

updating procedure ItemHistPO(record TempStockVc TSr,record MainStockBlock MSb)
begin
  record POVc POr;
  
  POr.SerNr = TSr.TransNr;
  if (ReadFirstMain(POr,1,true)) then begin
    UpdatePOOut(POr,true,false);//Jarek ? 
  end;
  return;
end;

updating procedure ItemHistStockTake(record TempStockVc TSr,record MainStockBlock MSb,Boolean usetmpstkf)
begin
  record StockTakeVc StockTaker;
  
  StockTaker.SerNr = TSr.TransNr;
  if (ReadFirstMain(StockTaker,1,true)) then begin
    StockTakeUpdateItemHist2(StockTaker,TSr,usetmpstkf);
    StockTakeUpdateInstock(StockTaker);
  end;
  return;
end;

updating procedure ItemHistDispatch(record TempStockVc TSr,record MainStockBlock MSb,Boolean usetmpstkf)
begin
  record DispatchVc Dispatchr;
  
  Dispatchr.SerNr = TSr.TransNr;
  if (ReadFirstMain(Dispatchr,1,true)) then begin
    DispatchUpdateIntINrs2(Dispatchr,false,true,TSr,usetmpstkf);
  end;
  return;
end;

updating procedure ItemHistOffHire(record TempStockVc TSr,record MainStockBlock MSb,Boolean usetmpstkf)
begin
  record OffHireVc OffHirer;
  
  OffHirer.SerNr = TSr.TransNr;
  if (ReadFirstMain(OffHirer,1,true)) then begin
    OffHireUpdateIntINrs2(OffHirer,false,true,TSr,usetmpstkf);
  end;
  return;
end;

updating procedure ItemHistInternMov(record TempStockVc TSr,record MainStockBlock MSb)
begin
  record InternMovVc InternMovr;
  
  InternMovr.SerNr = TSr.TransNr;
  if (ReadFirstMain(InternMovr,1,true)) then begin
    InternMovUpdateINrs(InternMovr,false,true);
  end;
  return;
end;

updating procedure ItemHistQualCon(record TempStockVc TSr,record MainStockBlock MSb,Boolean usetmpstkf)
begin
  record QualConVc QualConr;
  
  QualConr.SerNr = TSr.TransNr;
  if (ReadFirstMain(QualConr,1,true)) then begin
    QualConUpdateINrs2(QualConr,TSr,usetmpstkf);
  end;
  return;
end;

updating procedure ItemHistIVCash(record TempStockVc TSr,record MainStockBlock MSb,Boolean usetmpstkf)
begin
  record IVCashVc IVCashr;
  string 200 location;
  
  IVCashr.SerNr = TSr.TransNr;
  if (ReadFirstMain(IVCashr,1,true)) then begin
    IVCashUpdateItemHist2(IVCashr,0,TSr,usetmpstkf);
    IVCashUpdateStock(IVCashr);
  end;
  return;
end;

updating procedure ItemHistRegArchive(record TempStockVc TSr,record MainStockBlock MSb,Boolean usetmpstkf)
begin
  record RegArchiveDetailVc RegArchiveDetailr;
  string 200 location;
  
  RegArchiveDetailr.SerNr = TSr.TransNr;
  if (ReadFirstMain(RegArchiveDetailr,1,true)) then begin
    ArchiveItemHistVc2(RegArchiveDetailr,MSb,true,TSr,usetmpstkf);
    ArchiveUpdateStockVc(RegArchiveDetailr);
  end;
  return;
end;

/* Record weight (meaning, if they come on the same day, this is the order it will use between each type of record)
PUVc          10
RetPUVc       20
StockMovVc    30
ProdVc        40
SHVc         100
RetVc        100
WSVc         100
SDVc         100
SRVc         100
INTransferVc 100
IVVc         100
IVCashVc     100
ProdOrderVc  200
ORVc         200
POVc         200
*/


global
updating procedure RebuildStockMn(record RcVc RepSpec)
begin
  record MainStockBlock MSb;
  record TempStockVc TSr;
  LongInt missed;
  LongInt r;
  LongInt totr;
  Integer cnt;
  LongInt nexttick;
  LongInt nowtick;
  record ItemHistVc IHr;
  string 255 index;
  Boolean fillitemhistf,chronologyperlocf,manystockmovrecsf,skipifexistf;
  Integer segments;
  Date ignoredate,blankd;
  Boolean testf,calcwaf,usetmpstkf,delf;
  
  SetDatabaseToUnsafeMode;
  
  calcwaf = RepSpec.flags[2]!=0;
  calcwaf = true;
  BlockLoad(MSb);
  if ((CountRecords("ItemHistVc")>0) and (RepSpec.flags[1]==0))then begin
    goto LRebuildStockMn;
  end;
  MaintTrace("Emptying Item History");
  EmptyTempStock(false);

  chronologyperlocf = false;
  fillitemhistf = true;
  index = "TransDate";
  segments = 1;
  
  skipifexistf = false;
  usetmpstkf = false;
  if (RepSpec.flags[2]!=0) then begin
    if (CountRecords("ItemHistVc")>0) then begin
      switch (MSb.Chronology) begin
        case 1:// Chronology per location
          usetmpstkf = true;
        //the order is Item History records numbers, isnt it ? 
//          missed = EmptyItemHist(calcwaf);
//          index = "LocationLocOKNr";
//          segments = 2;

          missed = FillTempStockWithItemHist(MSb.Chronology,usetmpstkf,blankd,false);
          missed = EmptyItemHist(calcwaf);
          index = "LocOKNr";
          segments = 1;
          
          fillitemhistf = false;
          manystockmovrecsf = true;
        case 2:// Chronology per company
          usetmpstkf = true;
          missed = FillTempStockWithItemHist(MSb.Chronology,usetmpstkf,blankd,false);
          missed = EmptyItemHist(calcwaf);
          fillitemhistf = false;
          manystockmovrecsf = true;
          index = "LocOKNr";
          segments = 1;
        otherwise
          usetmpstkf = true;
          missed = FillTempStockWithItemHist(MSb.Chronology,usetmpstkf,blankd,true);
          missed = EmptyItemHist(calcwaf);
          fillitemhistf = false;
//          manystockmovrecsf = false;
          manystockmovrecsf = true;
          index = "LocOKNr";
//if u use other index then SDVc with date before PUVc Item Hist record will have no source
//make PUVc dated 31/12/2014, make SDVc BACKdated 10/12/2014
          segments = 1;
      end;
    end else begin    //after update only
      switch (MSb.Chronology) begin
        case 1:// Chronology per location
          index = "LocationLocOKNr";
//          index = "LocOKNr";
          segments = 1;
          manystockmovrecsf = true;
        case 2:// Chronology per all locations
          index = "LocOKNr";
          segments = 1;
          manystockmovrecsf = true;
        otherwise
          index = "LocOKNr";
          segments = 1;
          manystockmovrecsf = true;
      end;      
    end;
  end;
  manystockmovrecsf = true;
  
  if (fillitemhistf) then begin
    missed = EmptyItemHist(calcwaf);
  
    MaintTrace("Building Temporary History");
    missed = missed + FillupTempIV(cnt,skipifexistf);
    missed = missed + FillupTempSH(cnt,skipifexistf);
    missed = missed + FillupTempPU(cnt,skipifexistf);
    missed = missed + FillupTempStockMov(cnt,manystockmovrecsf,skipifexistf);
    missed = missed + FillupTempSD(cnt,skipifexistf);
    missed = missed + FillupTempSR(cnt,skipifexistf);
    missed = missed + FillupTempRet(cnt,skipifexistf);
    missed = missed + FillupTempRetPU(cnt,skipifexistf);
    missed = missed + FillupTempINTransfer(cnt,skipifexistf);
    missed = missed + FillupTempProd(cnt,skipifexistf);
    missed = missed + FillupTempProdOperation(cnt,skipifexistf);
    missed = missed + FillupTempWS(cnt,skipifexistf);
    missed = missed + FillupTempProdOrder(cnt,skipifexistf);
    missed = missed + FillupTempOR(cnt,skipifexistf);
    missed = missed + FillupTempPO(cnt,skipifexistf);
    missed = missed + FillupTempStockTake(cnt,skipifexistf);
    missed = missed + FillupTempDispatch(cnt,skipifexistf);
    missed = missed + FillupTempOffHire(cnt,skipifexistf);
    missed = missed + FillupTempInternMov(cnt,skipifexistf);
    missed = missed + FillupTempQualCon(cnt,skipifexistf);
    missed = missed + FillupTempIVCash(cnt,skipifexistf);
    missed = missed + FillupTempRegArchive(cnt,skipifexistf,ignoredate);
    if (CountRecords("ItemHistVc")<=0) then begin
      if (index!="TransDate") then begin
        FixTempLocOKNr(MSb.Chronology);
      end;
    end;
  end else begin
    missed = missed + FillupTempOR(cnt,true);
    missed = missed + FillupTempPO(cnt,true);
    missed = missed + FillupTempProdOrder(cnt,true);
    missed = missed + FillupTempQualCon(cnt,true);
  end;
//StopAlert("index " & index);  
  
  r = CountRecords("TempStockVc");
  totr = r;
  MaintTrace("Building Item History: " & r & " left of " & totr);
  nexttick = GetCurTick() + 10000;

  ResetLoop(TSr);
  if (RepSpec.flags[2]!=0) then begin
    while (LoopKey(index,TSr,segments,true)) begin
      testf = true;
      if (nonblankdate(ignoredate)) then begin
        if (TSr.TransDate<=ignoredate) then begin
          if (TSr.FileName!="RegArchiveDetailVc") then begin
            testf = false;
          end;
        end;
      end;
      if (testf) then begin
        switch (TSr.FileName) begin
          case "DispatchVc":   ItemHistDispatch(TSr,MSb,usetmpstkf);
          case "InternMovVc":  ItemHistInternMov(TSr,MSb);
          case "IVCashVc":     ItemHistIVCash(TSr,MSb,usetmpstkf);
          case "INTransferVc": ItemHistINTransfer(TSr,usetmpstkf);
          case "IVVc":         ItemHistIV(TSr,calcwaf,false,usetmpstkf);
          case "IVVcInvalidated":  ItemHistIV(TSr,calcwaf,true,usetmpstkf);
          case "OffHireVc":    ItemHistOffHire(TSr,MSb,usetmpstkf);
          case "ORVc":         ItemHistOR(TSr,MSb);
          case "POVc":         ItemHistPO(TSr,MSb);
          case "ProdVc":       ItemHistProd(TSr,MSb,calcwaf,usetmpstkf);
          case "ProdOperationVc": ItemHistProdOperation(TSr,MSb,calcwaf,usetmpstkf);
          case "ProdOrderVc":  ItemHistProdOrder(TSr);
          case "PUVc":         ItemHistPU(TSr,calcwaf,usetmpstkf);
          case "QualConVc":    ItemHistQualCon(TSr,MSb,usetmpstkf);
          case "RegArchiveDetailVc": ItemHistRegArchive(TSr,MSb,usetmpstkf);
          case "RetVc":        ItemHistRet(TSr,calcwaf,usetmpstkf);
          case "RetPUVc":      ItemHistRetPU(TSr,calcwaf,usetmpstkf);
          case "SDVc":         ItemHistSD(TSr,usetmpstkf);
          case "SHVc":         ItemHistSH(TSr,usetmpstkf);
          case "SRVc":         ItemHistSR(TSr,calcwaf,usetmpstkf);
          case "StockMovVc":   ItemHistStockMov(TSr,calcwaf,usetmpstkf);
          case "StockMov1Vc":  ItemHistStockMov1(TSr,MSb,usetmpstkf);
          case "StockMov2Vc":  ItemHistStockMov2(TSr,calcwaf,MSb);
          case "StockMov3Vc":  ItemHistStockMov3(TSr,MSb,usetmpstkf);
          case "StockMov4Vc":  ItemHistStockMov4(TSr,calcwaf,MSb);
          case "StockTakeVc":  ItemHistStockTake(TSr,MSb,usetmpstkf);
          case "WSVc":         ItemHistWS(TSr,usetmpstkf);
        end;
      end;

      RecordDelete(TSr);
      StepBack(TSr);

 
  //    CheckFlush(cnt,20);
      r = r - 1;
    
      nowtick = GetCurTick();
    
      if (nowtick>nexttick) then begin
        MaintTrace("Building Item History: " & r & " left of " & totr);
        nexttick = nowtick + 10000;
      end;
          
    end;    
  end else begin

    while (LoopKey(index,TSr,segments,true)) begin
      testf = true;
      if (nonblankdate(ignoredate)) then begin
        if (TSr.TransDate<=ignoredate) then begin
          if (TSr.FileName!="RegArchiveDetailVc") then begin
            testf = false;
          end;
        end;
      end;
      if (testf) then begin
        delf = false;
        switch (TSr.FileName) begin
          case "DispatchVc":   ItemHistDispatch(TSr,MSb,usetmpstkf); delf = true;
          case "IVCashVc":     ItemHistIVCash(TSr,MSb,usetmpstkf); delf = true;
          case "InternMovVc":  ItemHistInternMov(TSr,MSb); delf = true;
          case "INTransferVc": ItemHistINTransfer(TSr,usetmpstkf); delf = true;
          case "IVVcInvalidated":  ItemHistIV(TSr,calcwaf,true,usetmpstkf); delf = true;
          case "IVVc":         ItemHistIV(TSr,calcwaf,false,usetmpstkf); delf = true;
          case "OffHireVc":    ItemHistOffHire(TSr,MSb,usetmpstkf); delf = true;
          case "ORVc":         ItemHistOR(TSr,MSb); delf = true;
          case "POVc":         ItemHistPO(TSr,MSb); delf = true;
          case "ProdOperationVc": ItemHistProdOperation(TSr,MSb,calcwaf,usetmpstkf); delf = true;
          case "ProdOrderVc":  ItemHistProdOrder(TSr); delf = true;
          case "ProdVc":       ItemHistProd(TSr,MSb,calcwaf,usetmpstkf); delf = true;
          case "PUVc":         ItemHistPU(TSr,calcwaf,usetmpstkf); delf = true;
          case "QualConVc":    ItemHistQualCon(TSr,MSb,usetmpstkf); delf = true;
          case "RegArchiveDetailVc": ItemHistRegArchive(TSr,MSb,usetmpstkf); delf = true;
          case "RetVc":        ItemHistRet(TSr,calcwaf,usetmpstkf); delf = true;
          case "RetPUVc":      ItemHistRetPU(TSr,calcwaf,usetmpstkf); delf = true;
          case "SDVc":         ItemHistSD(TSr,usetmpstkf); delf = true;
          case "SHVc":         ItemHistSH(TSr,usetmpstkf); delf = true;
          case "SRVc":         ItemHistSR(TSr,calcwaf,usetmpstkf); delf = true;
          case "StockMovVc":   ItemHistStockMov(TSr,calcwaf,usetmpstkf); delf = true;
          case "StockMov1Vc":  ItemHistStockMov1(TSr,MSb,usetmpstkf); delf = true;
          case "StockMov2Vc":  ItemHistStockMov2(TSr,calcwaf,MSb); delf = true;
          case "StockMov3Vc":  ItemHistStockMov3(TSr,MSb,usetmpstkf); delf = true;
          case "StockMov4Vc":  ItemHistStockMov4(TSr,calcwaf,MSb); delf = true;
          case "StockTakeVc":  ItemHistStockTake(TSr,MSb,usetmpstkf); delf = true;
          case "WSVc":         ItemHistWS(TSr,usetmpstkf); delf = true;
        end;
      end;
      if (delf) then begin
        RecordDelete(TSr);     
        StepBack(TSr);
      end;
      r = r - 1;
    
      nowtick = GetCurTick();
    
      if (nowtick>nexttick) then begin
        MaintTrace("Building Item History: " & r & " left of " & totr);
        nexttick = nowtick + 10000;
      end;    
    end;

/*  
this is for sure crap, you cannot calculate WA for today and put its value into past, like
10 years back

    while (LoopKey(index,TSr,segments,true)) begin
      testf = true;
      if (nonblankdate(ignoredate)) then begin
        if (TSr.TransDate<=ignoredate) then begin
          if (TSr.FileName!="RegArchiveDetailVc") then begin
            testf = false;
          end;
        end;
      end;
      if (testf) then begin
        delf = false;
        switch (TSr.FileName) begin
          case "IVVcInvalidated":  ItemHistIV(TSr,calcwaf,true,usetmpstkf); delf = true;
          case "PUVc":         ItemHistPU(TSr,calcwaf,usetmpstkf); delf = true;
          case "StockMovVc":   ItemHistStockMov(TSr,calcwaf,usetmpstkf); delf = true;
//          case "StockMov1Vc":  ItemHistStockMov1(TSr,MSb,usetmpstkf); delf = true;
          case "StockMov2Vc":  ItemHistStockMov2(TSr,calcwaf,MSb); delf = true;
//          case "StockMov3Vc":  ItemHistStockMov3(TSr,MSb,usetmpstkf); delf = true;
          case "StockMov4Vc":  ItemHistStockMov4(TSr,calcwaf,MSb); delf = true;
          case "RetVc":        ItemHistRet(TSr,calcwaf,usetmpstkf); delf = true;
          case "ProdVc":       ItemHistProd(TSr,MSb,calcwaf,usetmpstkf); delf = true;
          case "ProdOperationVc": ItemHistProdOperation(TSr,MSb,calcwaf,usetmpstkf); delf = true;
          case "OffHireVc":    ItemHistOffHire(TSr,MSb,usetmpstkf); delf = true;
          case "InternMovVc":  ItemHistInternMov(TSr,MSb); delf = true;
          case "RegArchiveDetailVc": ItemHistRegArchive(TSr,MSb,usetmpstkf); delf = true;
        end;
      end;
      if (delf) then begin
        RecordDelete(TSr);     
        StepBack(TSr);
      end;
      r = r - 1;
    
      nowtick = GetCurTick();
    
      if (nowtick>nexttick) then begin
        MaintTrace("Building Item History: " & r & " left of " & totr);
        nexttick = nowtick + 10000;
      end;    
    end;

    TSr.TransDate = "";
    ResetLoop(TSr);
    while (LoopKey(index,TSr,segments,true)) begin
      testf = true;
      if (nonblankdate(ignoredate)) then begin
        if (TSr.TransDate<=ignoredate) then begin
          if (TSr.FileName!="RegArchiveDetailVc") then begin
            testf = false;
          end;
        end;
      end;
      if (testf) then begin
        switch (TSr.FileName) begin
          case "IVVc":         ItemHistIV(TSr,calcwaf,false,usetmpstkf);
          case "SHVc":         ItemHistSH(TSr,usetmpstkf);
          case "StockMov1Vc":  ItemHistStockMov1(TSr,MSb,usetmpstkf);
          case "StockMov3Vc":  ItemHistStockMov3(TSr,MSb,usetmpstkf);
          case "SDVc":         ItemHistSD(TSr,usetmpstkf);
          case "SRVc":         ItemHistSR(TSr,calcwaf,usetmpstkf);
          case "RetPUVc":      ItemHistRetPU(TSr,calcwaf,usetmpstkf);
          case "INTransferVc": ItemHistINTransfer(TSr,usetmpstkf);
          case "WSVc":         ItemHistWS(TSr,usetmpstkf);
          case "ProdOrderVc":  ItemHistProdOrder(TSr);
          case "ORVc":         ItemHistOR(TSr,MSb);
          case "POVc":         ItemHistPO(TSr,MSb);
          case "StockTakeVc":  ItemHistStockTake(TSr,MSb,usetmpstkf);
          case "DispatchVc":   ItemHistDispatch(TSr,MSb,usetmpstkf);
          case "QualConVc":    ItemHistQualCon(TSr,MSb,usetmpstkf);
          case "IVCashVc":     ItemHistIVCash(TSr,MSb,usetmpstkf);
        end;
      end;

      RecordDelete(TSr);
      StepBack(TSr);

 
      r = r - 1;
    
      nowtick = GetCurTick();
    
      if (nowtick>nexttick) then begin
        MaintTrace("Building Item History: " & r & " left of " & totr);
        nexttick = nowtick + 10000;
      end;    
    end;
*/    
  end;
  
  
  RebuildReservations;
  if (CountRecords("ItemHistVc")<=0) then begin // If only normal items, make at least one IHr...
    RecordNew(IHr);
    IHr.ArtCode = " ";
    IHr.FileName = "BlankVc";
    IHr.StockAffectf = 0;
    IHr.TransNr = -1;
    IHr.TransDate = CurrentDate;
    IHr.FIFODate = CurrentDate;
    IHr.SerNr = NextSerNr("ItemHistVc",IHr.TransDate,-1,false,"");    
    if (RecordStore(IHr,true)) then begin end;;
  end;
  if (missed>0) then begin
    MessageBox(0,"Records skipped = " & missed);
  end;
LRebuildStockMn:;
  
  SetDatabaseToSafeMode;
  
  return;
end;
