external procedure MoveAsteriskFileInPlace(string,string,string);

function string 255 MakeLineIfNonBlank(string statstr,string teststr)
begin
  string 255 res;
  if (nonblank(teststr)) then begin
    res = statstr & teststr & chr(10);
  end;
  MakeLineIfNonBlank = res;
  return;
end;

procedure AddOneTrunk(record SipTrunk2Vc SipTrunkr,var area outarea)
begin
  string 255 tstr;
/*
  AddTextToArea("; " & SipTrunkr.SipTrunkName & chr(10),outarea);
  tstr = "[" & SipTrunkr.SipTrunkName & "]" & chr(10);

  switch (SipTrunkr.Type) begin
    case kAsteriskPeerTypePeer:
      tstr = tstr & "type=peer" & chr(10);
    case kAsteriskPeerTypeFriend:
      tstr = tstr & "type=friend" & chr(10);
    case kAsteriskPeerTypeUser:
      tstr = tstr & "type=user" & chr(10);
  end;

  tstr = tstr & MakeLineIfNonBlank("peername=",SipTrunkr.UserName);
  if (SipTrunkr.RegisterType!=kAsteriskRegisterTypeSipRegisterLine) then begin
    tstr = tstr & "secret=" & SipTrunkr.Password & chr(10);
  end;
  tstr = tstr & MakeLineIfNonBlank("host=",SipTrunkr.Host);
  if (SipTrunkr.Port!=5060) then begin
    tstr = tstr & "port=" & SipTrunkr.Port & chr(10);
  end;
  tstr = tstr & "disallow=all" & chr(10);
  tstr = tstr & "allow=ulaw" & chr(10);
  tstr = tstr & "allow=alaw" & chr(10);
  tstr = tstr & "qualify=yes" & chr(10);
  tstr = tstr & "canreinvite=no" & chr(10);
  if (SipTrunkr.RegisterType==kAsteriskRegisterTypeRegisterContext) then begin
    tstr = tstr & "registersip=yes" & chr(10);
  end;
  tstr = tstr & MakeLineIfNonBlank("fromdomain=",SipTrunkr.FromDomain);
  tstr = tstr & MakeLineIfNonBlank("fromuser=",SipTrunkr.FromUser);
  tstr = tstr & MakeLineIfNonBlank("context=",SipTrunkr.Context);
  tstr = tstr & MakeLineIfNonBlank("defaultuser=",SipTrunkr.DefaultUser);
  if (SipTrunkr.Natf) then begin
    tstr = tstr & "nat=yes" & chr(10);
  end else begin
    tstr = tstr & "nat=no" & chr(10);
  end;
  tstr = tstr & chr(10);
  AddTextToArea(tstr,outarea);
  */
  return;
end;

procedure AddOneRegister(record SipTrunk2Vc SipTrunkr,var area outarea)
begin
  string 255 tstr;
  row SipTrunk2Vc SipTrunkrw;
  Integer i,rwcnt;
/*
  rwcnt = MatRowCnt(SipTrunkr);

  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SipTrunkr,i,SipTrunkrw);
    tstr = "register => " & SipTrunkrw.UserName;
    if (nonblank(SipTrunkrw.Password)) then begin
      tstr = tstr & ":" & SipTrunkrw.Password;
      if (nonblank(SipTrunkrw.AuthUserName)) then begin
        tstr = tstr & ":" & SipTrunkrw.AuthUserName;
      end;
    end;
    tstr = tstr & "@" & SipTrunkr.Host;
    if (SipTrunkr.Port!=5060) then begin
      tstr = tstr & ":" & SipTrunkr.Port;
    end;
    if (nonblank(SipTrunkrw.Extension)) then begin
      tstr = tstr & "/" & SipTrunkrw.Extension;
    end;
    tstr = tstr & chr(10);
    AddTextToArea(tstr,outarea);
  end;
*/
  return;
end;


global
procedure AsteriskSIPTrunkMn(record RcVc RepSpec)
begin
  record SipTrunk2Vc SipTrunkr;
  Integer i,rwcnt;
  Boolean found,testf,createdf;
  area outarea,sipregisterarea,trunkarea;
  string 255 fname;
  Time t;
/*

  AddTextToArea(";sip-trunks-hansaworld.conf generated by HansaWorld" & chr(10) & chr(10),outarea);

  found = true;
  SipTrunkr.PBXConnection = RepSpec.f1;
  while (LoopKey("PBXConnection",SipTrunkr,1,found)) begin
    if (found) then begin
      testf = false;
      if (SipTrunkr.Closedf==0) then begin
        if (RepSpec.f1=="") then begin
          testf = true;
        end;
        if (SipTrunkr.PBXConnection==RepSpec.f1) then begin
          testf = true;
        end;
      end;
      if (testf) then begin
        createdf = true;
        if (SipTrunkr.RegisterType==kAsteriskRegisterTypeSipRegisterLine) then begin
          AddOneRegister(SipTrunkr,sipregisterarea);
        end;
        AddOneTrunk(SipTrunkr,trunkarea);
      end;
    end;
  end;

  if (createdf) then begin
    if (GetAreaLength(sipregisterarea)>0) then begin
      AddTextToArea("" & chr(10),sipregisterarea);
      AddAreaToArea(sipregisterarea,outarea);
    end;
    AddAreaToArea(trunkarea,outarea);
    fname = CreateTempFile("sip-trunks-hansaworld",".conf");
    AddTextToArea("" & chr(10),outarea);
    WriteAreaToFile(outarea,fname,0);
    MoveAsteriskFileInPlace(RepSpec.f1,fname,"sip-trunks-hansaworld.conf");
  end;
  t = CurrentTime;
  t.second = t.second + 10;
  NewTimedTask("ReloadAsterisk","Reload Asterisk with delay","ReloadAsterisk",fname & ":" & RepSpec.f1 & ":chan_sip.so",CurrentDate,t,CurrentTime,"");
*/
  return;
end;
