external function Boolean ItemInItemGroupOrClass(string,string,string);
external procedure ExtractObj(string,var Integer,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean SetInSet2(string,string);//vg

procedure FindContract(record RcVc RepSpec,string CustCode, var boolean found, var boolean nocontr)
begin
  record COVc COr;
  row COVc COrw;
  integer i, rwcnt;
  boolean TrHs,testf;
  integer noofcontr; 
  record INVc INr;
  
  found = false;
  if (nonblank(RepSpec.f2)) or (nonblank(RepSpec.FirstAcc)) or (nonblank(RepSpec.f7)) then begin
    TrHs = true;  
  end;
  COr.CustCode = CustCode;
  while (LoopKey("CustCode",COr,1,TrHs)) begin
    if (TrHs) then begin
      if (COr.CustCode <> CustCode) then begin
         TrHs = false; 
      end;
    end; 
    if (TrHs) then begin
      noofcontr = noofcontr + 1;
      rwcnt = MatRowCnt(COr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(COr,i,COrw);
        testf = true;
        if (nonblank(RepSpec.f2)) then begin
          if (COrw.ArtCode!=RepSpec.f2) then begin
            testf = false;
          end;
        end;
        if (testf and (nonblank(RepSpec.FirstAcc) or (nonblank(RepSpec.f7)))) then begin
          testf = ItemInItemGroupOrClass(COrw.ArtCode,RepSpec.FirstAcc,RepSpec.f7);
        end;
        if (testf) then begin 
          found = true;
          goto L88;
        end;
      end; // for   
    end;  //TrHs
  end; //while
  if (noofcontr <> 0) then begin
    nocontr = true;
  end;
L88:;
  return;
end;

procedure FindQuotation(record RcVc RepSpec,string CustCode,var Boolean found)
begin
  record QTVc QTr;
  row QTVc QTrw;
  Integer i, rwcnt;
  Boolean TrHs,testf;
  record INVc INr;
  string 255 index;
  Integer keys;
  
  found = false;
  if (nonblank(RepSpec.f2)) or (nonblank(RepSpec.FirstAcc)) or (nonblank(RepSpec.f7)) then begin
    TrHs = true;  
  end;
  QTr.CustCode = CustCode;
  if (RepSpec.flags[10]==0) then begin
    QTr.QTDate = RepSpec.sStartDate;
    index = "CustDate";
    keys = 2;
  end else begin
    keys = 1;
    index = "CustCode";
  end;
  while (LoopKey(index,QTr,keys,TrHs)) begin
    if (TrHs) then begin
      if (QTr.CustCode!=CustCode) then begin
         TrHs = false; 
      end;
      if (RepSpec.flags[10]==0) then begin
        if (QTr.QTDate>RepSpec.sEndDate) then begin
          TrHs = false; 
        end;
      end;
    end; 
    if (TrHs) then begin
      rwcnt = MatRowCnt(QTr);
      for (i=0;i<rwcnt;i=i+1) begin
        testf = true;
        MatRowGet(QTr,i,QTrw);
        if (nonblank(RepSpec.f2)) then begin
          if (QTrw.ArtCode!=RepSpec.f2) then begin
            testf = false;
          end;
        end;
        if (testf and (nonblank(RepSpec.FirstAcc) or (nonblank(RepSpec.f7)))) then begin
          testf = ItemInItemGroupOrClass(QTrw.ArtCode,RepSpec.FirstAcc,RepSpec.f7);
        end;
        if (testf) then begin
          found = true;
          goto LFindQuotation;
        end;
      end; // for   
    end;  //TrHs
  end; //while
LFindQuotation:;
  return;
end;

procedure FindOrder(record RcVc RepSpec,string CustCode,var Boolean found)
begin
  record ORVc ORr;
  row ORVc ORrw;
  Integer i, rwcnt;
  Boolean TrHs,testf;
  record INVc INr;
  string 255 index;
  Integer keys;

  found = false;
  if (nonblank(RepSpec.f2)) or (nonblank(RepSpec.FirstAcc)) or (nonblank(RepSpec.f7)) then begin
    TrHs = true;  
  end;
  ORr.CustCode = CustCode;
  if (RepSpec.flags[10]==0) then begin
    ORr.OrdDate = RepSpec.sStartDate;
    index = "CustDate";
    keys = 2;
  end else begin
    keys = 1;
    index = "CustCode";
  end;
  while (LoopKey(index,ORr,2,TrHs)) begin
    if (TrHs) then begin
      if (ORr.CustCode!=CustCode) then begin
        TrHs = false; 
      end;
      if (RepSpec.flags[10]==0) then begin
        if (ORr.OrdDate>RepSpec.sEndDate) then begin
          TrHs = false; 
        end;
      end;
    end; 
    if (TrHs) then begin
      rwcnt = MatRowCnt(ORr);
      for (i=0;i<rwcnt;i=i+1) begin
        testf = true;
        MatRowGet(ORr,i,ORrw);
        if (nonblank(RepSpec.f2)) then begin
          if (ORrw.ArtCode!=RepSpec.f2) then begin
            testf = false;
          end;
        end;
        if (testf and (nonblank(RepSpec.FirstAcc) or (nonblank(RepSpec.f7)))) then begin
          testf = ItemInItemGroupOrClass(ORrw.ArtCode,RepSpec.FirstAcc,RepSpec.f7);
        end;        
        if (testf) then begin
          found = true;
          goto LFindOrder;
        end;
      end; // for   
    end;  //TrHs
  end; //while
LFindOrder:;
  return;
end;

procedure FindInvoice(record RcVc RepSpec,string CustCode,var Boolean found)
begin
  record IVVc IVr;
  row IVVc IVrw;
  Integer i, rwcnt;
  Boolean TrHs,testf,test2f;
  record INVc INr;
  string 255 index;
  Integer keys;

  found = false;
  if (nonblank(RepSpec.f2)) or (nonblank(RepSpec.FirstAcc)) or (nonblank(RepSpec.f7)) then begin
    TrHs = true;  
  end;
  IVr.CustCode = CustCode;
  if (RepSpec.flags[10]==0) then begin
    IVr.InvDate = RepSpec.sStartDate;
    index = "CustDate";
    keys = 2;
  end else begin
    keys = 1;
    index = "CustDate";
  end;
  while (LoopKey(index,IVr,keys,TrHs)) begin
    if (TrHs) then begin
      if (IVr.CustCode!=CustCode) then begin
        TrHs = false; 
      end;
    end; 
    if (RepSpec.flags[10]==0) then begin
      if (DateInRange(IVr.InvDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      testf = true;
      if (IVr.OKFlag==0) then begin testf = false; end;
      if (IVr.Invalid!=0) then begin testf = false; end;
      if (DateInRange(IVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;
      if (testf) then begin
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          test2f = true;
          MatRowGet(IVr,i,IVrw);
          if (nonblank(RepSpec.f2)) then begin
            if (IVrw.ArtCode!=RepSpec.f2) then begin
              test2f = false;
              goto LFindInvoice;
            end;
          end;
          if (test2f and (nonblank(RepSpec.FirstAcc) or (nonblank(RepSpec.f7)))) then begin
            test2f = ItemInItemGroupOrClass(IVrw.ArtCode,RepSpec.FirstAcc,RepSpec.f7);
          end;                  
          if (test2f) then begin
            found = true;
            goto LFindInvoice;
          end;
        end; // for
      end;   
    end;  //TrHs
  end; //while
LFindInvoice:;
  return;
end;

procedure FindActivity(record RcVc RepSpec,string CustCode,var Boolean found)
begin
  record ActVc Actr;
  Integer keys;
  Boolean actfoundf,testf;

  Actr.CUCode = CustCode;
  keys = 1;
  if (RepSpec.flags[10]==0) then begin
    Actr.TransDate = RepSpec.sStartDate;    
    keys = 2;
  end;
  actfoundf = true;
  while (LoopKey("CUCode",Actr,keys,actfoundf)) begin
    testf = true;
    if (Actr.CUCode!=CustCode) then begin
      actfoundf = false;
    end;
    if (RepSpec.flags[10]==0) then begin
      if (Actr.EndDate>RepSpec.sEndDate) then begin
        actfoundf = false;
      end;
    end;
    if (nonblank(RepSpec.ObjType)) then begin      
      if (RepSpec.ObjType!=Actr.ActType) then begin
        testf = false;
      end;
    end;
/*    
    if (nonblank(RepSpec.TransStr)) then begin      
      if (RepSpec.TransStr==Actr.ActType) then begin
        testf = false;
      end;
    end;
*/    
    if (actfoundf) and (testf) then begin
      found = true;
      goto LFindActivity;
    end;
  end;
LFindActivity:;  
  return;
end;

global
procedure CheckFlush(var Integer cnt,Integer max)
BEGIN
  cnt = cnt + 1;
  if (cnt>max) then begin
//    DBFlush;
//    DBHold;
    cnt = 0;
  end;
  RETURN;
END;

global 
updating procedure NoSalesMn(Record RcVc RepSpec)
begin
  record CUVc CUr;
  record CUVc CU2r;
  record ICSVc ICSp;
  record INVc INr;
  string 255 tstr,ckey;
  boolean TrHs,testf,itemfound,found,res,nocontr;
  integer rw,count;
  integer cnt, max;
  val t;
  string 20 frcu,tocu;
  Integer pos;
  record CClassVc CClassr;
  
  max = 25;
  if (blank(RepSpec.f6)) then begin
    MessageBox(21446,"");
    goto L99;
  end;
  pos = 0;
  ExtractObj(RepSpec.f6,pos,tstr);
  while (nonblank(tstr)) begin
    CClassr.Code = tstr;
    if (ReadFirstMain(CClassr,1,true)==false) then begin
      goto L99;
    end;
    ExtractObj(RepSpec.f6,pos,tstr);
  end;  
  
  if (blank(RepSpec.f2)) and (blank(RepSpec.FirstAcc)) and (blank(RepSpec.ObjType)) and (blank(RepSpec.f7)) then begin
    goto L99;
  end;
  frcu = FirstInRange(RepSpec.f5,20);
  tocu = LastInRange(RepSpec.f5,20);
  TrHs = true;
  if (nonblank(RepSpec.f5)) then begin
    CUr.Code = frcu;
    ckey = "Code";
  end else begin
    CUr.CustCat = RepSpec.f1;
    ckey = "Group";
  end;
  while LoopKey(ckey,CUr,1,TrHs) begin
    if (nonblank(RepSpec.f5)) then begin
      if (CUr.Code<frcu) then begin TrHs = false; end;
      if (CUr.Code>tocu) then begin TrHs = false; end;
    end else begin
      if (nonblank(RepSpec.f1)) then begin
        if (CUr.CustCat <> RepSpec.f1) then begin
          TrHs = false;  
        end;  
      end;
    end;
    if (TrHs) then begin
      testf = true;
      if (CUr.blockedFlag <> 0) then begin
        testf = false;
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (RepSpec.f3 <> CUr.SalesMan) then begin
          testf = false;
        end;
      end;     
      if (nonblank(RepSpec.f4)) then begin 
        if ((SetInSet2(RepSpec.f4,CUr.Classification)) == false) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.f1)) then begin
        if (CUr.CustCat <> RepSpec.f1) then begin
          testf = false;  
        end;  
      end;
      if (nonblank(RepSpec.f5)) then begin 
        if (CUr.Code<frcu) then begin testf = false; end;
        if (CUr.Code>tocu) then begin testf = false; end;
      end;
      if (testf) then begin
        testf = false;
        if (CUr.CUType!=0) then begin testf = true; end;      
        if (RepSpec.flags[0]!=0) then begin
          if (CUr.VEType!=0) then begin testf = true; end;      
        end;
        if (RepSpec.flags[1]!=0) then begin
          if ((CUr.CUType==0) and (CUr.VEType==0) and (CUr.GuestType==0) and (CUr.DealerType==0) and (CUr.EmployeeType==0)) then begin testf = true; end;      
        end;
        if (RepSpec.flags[2]!=0) then begin
          if (CUr.GuestType!=0) then begin testf = true; end;      
        end;
        if (RepSpec.flags[3]!=0) then begin
          if (CUr.DealerType!=0) then begin testf = true; end;      
        end;
      end;
      if (testf) then begin
        switch (RepSpec.ArtMode) begin
          case 0:
            itemfound = false;
            nocontr = true;
            if (nonblank(RepSpec.f2)) then begin
              ICSp.ArtCode = RepSpec.f2;
              ICSp.CustCode = CUr.Code;
              itemfound = ReadFirstMain(ICSp,2,false);
              if (ICSp.ArtCode<>RepSpec.f2) then begin
                itemfound = false;
              end;
              if (ICSp.CustCode<>CUr.Code) then begin
                itemfound = false;
              end;
              if (itemfound and (nonblank(RepSpec.FirstAcc) or (nonblank(RepSpec.f7)))) then begin
                itemfound = ItemInItemGroupOrClass(RepSpec.f2,RepSpec.FirstAcc,RepSpec.f7);
              end;   
              if (RepSpec.flags[4]==0) then begin
                if (itemfound==true) then begin
                  t = GetTurnover(ICSp,"quant",RepSpec.sStartDate,RepSpec.sEndDate);
                  if (t==0) then begin
                    itemfound = false;
                  end;
                end;
              end;
            end;  
            if (itemfound==false) then begin
              FindInvoice(RepSpec,CUr.Code,itemfound);
            end;
          case 1:
            itemfound = false;
            nocontr = false;
            FindContract(RepSpec,CUr.Code,itemfound,nocontr);
          case 2:
            itemfound = false;
            nocontr = true;
            FindQuotation(RepSpec,CUr.Code,itemfound);
          case 3:
            itemfound = false;
            nocontr = true;
            FindOrder(RepSpec,CUr.Code,itemfound);
          case 4:
            itemfound = false;
            nocontr = true;
            FindActivity(RepSpec,CUr.Code,itemfound);
        end;
        switch (RepSpec.Comparison) begin
          case 1:
            testf = true;
            switch (RepSpec.ArtMode) begin
              case 0:
                if (itemfound) then begin
                  testf = false;
                end;
              case 1:
                if (itemfound) then begin
                  testf = false;
                end;
                if (nocontr==false) then begin
                  testf = false;
                end;
              case 2:
                if (itemfound) then begin
                  testf = false;
                end;
              case 3:
                if (itemfound) then begin
                  testf = false;
                end;
              case 4:
                if (itemfound) then begin
                  testf = false;
                end;
            end;
            if (testf) then begin
              testf = false;
              if ((SetInSet(RepSpec.f6,CUr.Classification)) == false) then begin
                testf = true;
              end;
              if (testf) then begin
                tstr = CUr.Classification;
                if (blank(tstr)) then begin
                  tstr = RepSpec.f6;        
                end else begin
                  tstr = tstr & "," & RepSpec.f6;
                end;
                RecordCopy(CU2r,CUr);
                CUr.Classification = tstr;
                MaintTrace(CUr.Code); 
                if (RecordUpdate(CU2r,CUr,false)==0) then begin end;
              end;
            end; 
          case 0:
            if (itemfound) then begin
              testf = false;
              if ((SetInSet(RepSpec.f6,CUr.Classification)) == false) then begin
                testf = true;
              end;
              if (testf) then begin
                RecordCopy(CU2r,CUr);
                if (nonblank(RepSpec.f6)) then begin
                  tstr = CUr.Classification;
                  if (blank(tstr)) then begin
                    tstr = RepSpec.f6;        
                  end else begin
                    tstr = tstr & "," & RepSpec.f6;
                  end;
                  CUr.Classification = tstr;
                end;
                MaintTrace(CUr.Code); 
                if (RecordUpdate(CU2r,CUr,false)==0) then begin end;
              end;
            end; 
        end;
      end; 
    end; 
 end; 
  L99:;
  return;
end;  
