external function string 255 FindINObjects(string,string);
external procedure CheckFlush(var Integer,Integer);
external updating procedure SetPositionStatus(string,Integer);
external procedure FindPositionValue(string,string,var val,var val,var val);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);

global
function string 60 FindSerialNrAtPosition(string artcode,string position)
BEGIN
  string 60 res;
  record ItemHistVc IHr;
  
  IHr.Position = position;
  IHr.ArtCode = artcode;
  if (ReadFirstKey("Position",IHr,2,true)) then begin end;
  res = IHr.SerialNr;
  FindSerialNrAtPosition = res;
  RETURN;
END;

function string 20 FindFreePositionInPalletArea(record INVc INr,string PalletArea,record LocationVc Locr,Array string apos,Array string aitem,Array val aqty,var Integer acnt)
BEGIN
  string 20 res;
  Integer i;
  record POSVc Posr;
  Boolean TrHs,testf;
  val t;

  TrHs = true;
  if (nonblank(PalletArea)) then begin
    Posr.Location = Locr.Code;
    Posr.LocArea = PalletArea;
//    Posr.PickOrder = 999999;
    while (LoopKey("LocArea",Posr,2,TrHs)) begin
      if (Posr.Location!=Locr.Code) then begin TrHs = false; end;
      if (Posr.LocArea!=PalletArea) then begin TrHs = false; end;
      if (TrHs) then begin
        testf = true;
        if (Posr.Closed!=0) then begin testf = false; end;
        if (testf) then begin
          for (i=0;i<acnt;i=i+1) begin
            if ((apos[i]==Posr.Code) and (aitem[i]==INr.Code)) then begin
              t = aqty[i] + 1;
              testf = true;
              if ((t*INr.Width)>Posr.Width) then begin
                testf = false;
              end;
              if ((t*INr.Height)>Posr.Height) then begin
                testf = false;
              end;
              if ((t*INr.Depth)>Posr.Depth) then begin
                testf = false;
              end;
              if (testf) then begin
                aqty[i] = aqty[i] + 1;
                res = Posr.Code;
                goto LFindFreePositionInPalletArea;
              end;
            end;
            if (apos[i]==Posr.Code) then begin
              goto LNEXTPOS;
            end;
          end;
          res = Posr.Code;
          goto LADDNEWROW;
        end;
LNEXTPOS:;      
      end;
    end;
  end else begin

    Posr.Status = 0;
    while (LoopKey("Status",Posr,1,TrHs)) begin
      if (Posr.Status!=0) then begin TrHs = false; end;
      testf = true;
      if (Posr.Closed!=0) then begin testf = false; end;
      if (TrHs and testf) then begin
        testf = true;
        if (Posr.LocArea==Locr.WHMPalletArea) then begin testf = false; end;
        if (Posr.LocArea==Locr.WHMPickArea) then begin testf = false; end;
        if (Posr.Code==Locr.WHMDefPUPosCode) then begin testf = false; end;
        if (Posr.Code==Locr.WHMDefProdPosCode) then begin testf = false; end;
        if (testf) then begin
          for (i=0;i<acnt;i=i+1) begin
            if ((apos[i]==Posr.Code) and (aitem[i]==INr.Code)) then begin
              t = aqty[i] + 1;
              testf = true;
              if ((t*INr.Width)>Posr.Width) then begin
                testf = false;
              end;
              if ((t*INr.Height)>Posr.Height) then begin
                testf = false;
              end;
              if ((t*INr.Depth)>Posr.Depth) then begin
                testf = false;
              end;
              if (testf) then begin
                aqty[i] = aqty[i] + 1;
                res = Posr.Code;
                goto LFindFreePositionInPalletArea;
              end;
            end;
            if (apos[i]==Posr.Code) then begin
              goto LNEXTPOS2;
            end;
          end;
          res = Posr.Code;
          goto LADDNEWROW;
        end;
LNEXTPOS2:;      
      end;
    end;
  end;  
LADDNEWROW:;
  if (nonblank(res)) then begin
    apos[acnt] = Posr.Code;
    aitem[acnt] = INr.Code;
    aqty[acnt] = 1;
    acnt = acnt + 1;
  end;
LFindFreePositionInPalletArea:;  
  FindFreePositionInPalletArea = res;
  RETURN;
END;

updating procedure SaveStockMov(var record StockMovVc StockMovr,string location,var Integer flushcnt)
BEGIN
  if (MatRowCnt(StockMovr)>0) then begin
    StockMovr.TransDate = CurrentDate;
    StockMovr.SerNr = NextSerNr("StockMovVc",StockMovr.TransDate,-1,false,"");
    StockMovr.ToForkLiftQue = 1;          
    if (StockMovr.SerNr>=0) then begin
      if (RecordStore(StockMovr,false)) then begin end;
      CheckFlush(flushcnt,10);
    end;
    RecordNew(StockMovr);    
    StockMovr.FrLocation = location;
    StockMovr.ToLocation = location;
  end;  
  RETURN;
END;

global
updating procedure MoveEmptyPalletsMn(record RcVc RepSpec)
BEGIN
  record StockMovVc StockMovr;
  row StockMovVc StockMovrw;
  Integer sorting;
  Boolean TrHs,testf;
  Integer i,rwcnt;
  record LocationVc Locr;
  record PISVc PISr;
  record POSVc Posr;
  record INVc INr;
  Integer keys;
  string 20 keystr,bufforarea;
  Array string 20 apos;
  Array string 20 aitem;
  Array val aqty;
  Integer acnt;
  val instock,instock2,instockmov;
  Integer flushcnt;
  Boolean emptypositionareafullf;
  
  if (blank(RepSpec.f2)) then begin 
    goto LMoveEmptyPalletsMn; 
  end;
  RecordNew(StockMovr);
  StockMovr.FrLocation = RepSpec.f2;
  StockMovr.ToLocation = RepSpec.f2;
  Locr.Code = StockMovr.ToLocation;
  ReadFirstMain(Locr,1,true);
  if (blank(Locr.WHMPalletArea)) then begin 
    MessageBox(1395,"");
    goto LMoveEmptyPalletsMn; 
  end;

  TrHs = true;
  if (nonblank(RepSpec.f1)) then begin
    keystr = "Position";
    keys = 2;
  end else begin
    keystr = "LocPosition";
    keys = 1;
  end;
  PISr.Position = RepSpec.f1;
  PISr.Location = RepSpec.f2;
  while (LoopKey(keystr,PISr,keys,TrHs)) begin
    if (nonblank(RepSpec.f1)) then begin
      if (PISr.Position!=RepSpec.f1) then begin TrHs = false; end;
    end;
    if (nonblank(RepSpec.f2)) then begin
      if (PISr.Location!=RepSpec.f2) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      testf = true;
      if (PISr.LeftQty!=1) then begin testf = false; end;
      if (testf) then begin        
        FindPositionValue(PISr.Position,RepSpec.f2,instock,instock2,instockmov);
        if ((instock-instockmov)!=1) then begin testf = false; end;
      end;
      if (testf) then begin        
        Posr.Code = PISr.Position;
        if (ReadFirstMain(Posr,1,true)==false) then begin testf = false; end;
//        if (Posr.LocArea==Locr.WHMPalletArea) then begin testf = false; end;//if not enough in empty pallet area move to buffor area
      end;
      if (testf) then begin
        if (ReadFirstItem(PISr.ArtCode,INr,true,true)) then begin
          ClearRow(StockMovr,StockMovrw,1);
          StockMovrw.Coefficient = INr.UnitCoefficient;
          StockMovrw.ArtCode = INr.Code;
          StockMovrw.Quant = 1;
          StockMovrw.Spec = INr.Name;
          StockMovrw.BasePrice = INr.UPrice1;
          StockMovrw.Objects = FindINObjects(INr.Objects,INr.Group);
          StockMovrw.UnitXval = INr.Width;
          StockMovrw.UnitYval = INr.Height;
          StockMovrw.UnitZval = INr.Depth;
          StockMovrw.FrPosCode = PISr.Position;
          if (emptypositionareafullf==false) then begin
            StockMovrw.ToPosCode = FindFreePositionInPalletArea(INr,Locr.WHMPalletArea,Locr,apos,aitem,aqty,acnt);
//          SetPositionStatus(StockMovrw.ToPosCode,2);should not be set , only height should be checked
          end;
          if (blank(StockMovrw.ToPosCode)) then begin
            emptypositionareafullf = true;
/*should not move from one position to another, just to pallet stock*/            
//            StockMovrw.ToPosCode = FindFreePositionInPalletArea(INr,"",WHMRec,apos,aitem,aqty,acnt);
//            SetPositionStatus(StockMovrw.ToPosCode,2);//should be set for not PalletArea
          end;
          StockMovrw.SerialNr = FindSerialNrAtPosition(StockMovrw.ArtCode,StockMovrw.FrPosCode);
          if (nonblank(StockMovrw.ToPosCode)) then begin
            MatRowPut(StockMovr,rwcnt,StockMovrw);          
            SaveStockMov(StockMovr,RepSpec.f2,flushcnt);
          end else begin
            RecordNew(StockMovr);
            StockMovr.FrLocation = RepSpec.f2;
            StockMovr.ToLocation = RepSpec.f2;
          end;    
        end;
      end;
    end;
  end;
LMoveEmptyPalletsMn:;  
  RETURN;
END;