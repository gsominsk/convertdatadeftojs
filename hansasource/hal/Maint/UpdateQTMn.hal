external function string 255 FillupTaxMatrix(Integer,string,string,string,string,string,var record TaxMatrixVc);
external procedure CalcPrice(val,val,val,var val,Integer);
external procedure CheckFlush(var Integer,Integer);
external procedure ExtractObj(string,var Integer,var string);
external procedure QTSumup(var record QTVc);
external procedure QTGetCalcItemPrice(record INVc,record ORVc,Integer,var val);
external function Boolean PasteCustInQT(var record QTVc,string,string,var string,Boolean);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure RemoveOldCustObjects(string,var string);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
global
updating procedure UpdateQTMn(record RcVc RepSpec)
begin
  record QTVc oldQTr;
  record QTVc QTr;
  row QTVc QTrw;
  record INVc INr;
  LongInt frqt,toqt;
  string 20 frcc,tocc;
  string 255 tstr;
  Integer rwcnt,i;
  Boolean savef;
  Boolean found,testf;
  record GeneralOptionBlock GenOptr;
  string 100 curitemname;
  string 20 salesacc,vatcode,tax2code,taxtemplatecode;
  val price,reb,cost,qty,instock,t1,tax2prc;
  Boolean calcpricef;
  Integer flushcnt;
  Boolean dummyf;
  record TaxMatrixVc TMr;
  Time blankt;

  BlockLoad(GenOptr);
  frqt = FirstInRange(RepSpec.f2,10);
  toqt = LastInRange(RepSpec.f2,10);
  frcc = FirstInRange(RepSpec.f1,20);
  tocc = LastInRange(RepSpec.f1,20);

  QTr.SerNr = frqt;
  found = true;

  while (LoopKey("SerNr",QTr,1,found)) begin
    if (nonblank(RepSpec.f2)) then begin
      if (QTr.SerNr>toqt) then begin found = false; end;
    end;
    if (found) then begin
      savef = false;
      testf = true;
      rwcnt = MatRowCnt(QTr);
      if (nonblank(RepSpec.AccStr)) then begin
        testf = false;
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(QTr,i,QTrw);
          if (QTrw.ArtCode==RepSpec.AccStr) then begin testf = true; end;
        end;
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (RepSpec.f3<>QTr.QuoteClass) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.f1)) then begin
        if ((QTr.CustCode<frcc) or (QTr.CustCode>tocc)) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        RecordCopy(oldQTr,QTr);
        if (RepSpec.flags[3]<>0) then begin
          tstr = QTr.Objects;
          RemoveOldCustObjects(QTr.CustCode,tstr);
          QTr.Objects = tstr;
          if (PasteCustInQT(QTr,QTr.CustCode,"",tstr,false)) then begin
          end;
        end;
        savef = true;
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(QTr,i,QTrw);
          if (RepSpec.flags[0]<>0) then begin
            if (GetItemPriceDiscount3(QTrw.ArtCode,QTrw.Quant,INr,QTr.CurncyCode,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,
                QTr.LangCode,QTr.CustCat,QTr.PriceList,QTr.RebCode,
                price,curitemname,reb,vatcode,cost,salesacc,
                QTr.ExportFlag,calcpricef,QTr.QTDate,blankt,QTr.CustCode,false,dummyf,QTr.PayDeal,tax2code,tax2prc,QTr.Region,QTr.Location,taxtemplatecode)) then begin
              QTrw.TaxTemplateCode = FillupTaxMatrix(0,QTr.BranchID,QTr.CustCode,QTr.CustCat,QTr.DelAddrCode,taxtemplatecode,TMr);
              QTrw.Price = price;
              QTrw.vRebate = reb;
              QTrw.BasePrice = cost;
              QTrw.Spec = curitemname;
              QTrw.VATCode = vatcode;
              QTrw.SalesAcc = salesacc;
              savef = true;
              price = QTrw.Price; 
              CalcPrice(QTrw.BasePrice,QTrw.PriceFactor,QTrw.vRebate,price,GenOptr.UseDiscount);
              QTrw.Price = price;  
              CalcSum(QTrw.Quant,QTrw.Price,QTrw.PriceFactor,QTrw.vRebate,price,GenOptr.UseDiscount);
              QTrw.Sum = price;
              if (calcpricef) then begin
                QTGetCalcItemPrice(INr,QTr,i,t1);
              end;
            end;
          end;
          MatRowPut(QTr,i,QTrw);
        end;
        if (savef) then begin
          QTSumup(QTr);
          if (RecordUpdate(oldQTr,QTr,false)==0) then begin
          end;
          CheckFlush(flushcnt,10);
        end;
      end;
    end;
    MaintTrace(QTr.SerNr);
  end;
  return;
end;
