
procedure BuildThisArchive(string afromfolder,string basnam,string extension,Boolean exeasfolder,string tofolder,string archivename)
begin
  string 255 exetoadd;
  string 255 exetoadd2;
  string 255 fromfolder;
  
  exetoadd = basnam & extension;
  exetoadd2 = "StandardERP" & extension;
  
  fromfolder = afromfolder;
  if (right(fromfolder,1)!="/" or right(fromfolder,1)!="\\") then begin
    fromfolder = fromfolder & "/";
  end;
  
  BeginArchiveToFile(tofolder & "/" & archivename);
  if (exeasfolder) then begin
    if (DirExists(fromfolder & exetoadd2)) then begin
      AddArchiveDir(exetoadd,fromfolder & exetoadd2);
    end else begin
      if (DirExists(fromfolder & exetoadd)) then begin
        AddArchiveDir(exetoadd,fromfolder & exetoadd);
      end else begin
        StopAlert("Failed to find either " & exetoadd & " or " & exetoadd2 & "!");
      end;
    end;
  end else begin
    if (FileExists(fromfolder & exetoadd2)) then begin
      AddArchiveFile(exetoadd,fromfolder & exetoadd2);
    end else begin
      if (FileExists(fromfolder & exetoadd)) then begin
        AddArchiveFile(exetoadd,fromfolder & exetoadd);
        if (basnam=="HansaRaama") then begin // 6.2 clients will look for HansaWorld.EXE, 7.0 clients will look for HansaRaama.EXE/app, so we add both
          exetoadd = "HansaWorld" & extension;
          if (FileExists(fromfolder & exetoadd)) then begin
            AddArchiveFile(exetoadd,fromfolder & exetoadd);
          end;
        end;
      end else begin
        StopAlert("Failed to find either " & exetoadd & " or " & exetoadd2 & "!");
      end;
    end;
  end;

  // Standard Accounts now use macosx.ha for autoupdate, so we need both exectutables
  if (exetoadd=="HansaWorld.app") then begin
    if (FileExists(fromfolder & "Books.app")) then begin
      AddArchiveDir("Books.app",fromfolder & "Books.app");
    end;
  end;

  AddArchiveDir("hob",fromfolder & "hob");
  AddArchiveDir("ps",fromfolder & "ps");
  AddArchiveDir("wine",fromfolder & "wine");
  BeginArchiveDir("Attach");   EndArchiveDir;
  BeginArchiveDir("Backup");   EndArchiveDir;
  BeginArchiveDir("halcust");  EndArchiveDir;
  BeginArchiveDir("halpatch"); EndArchiveDir;
  BeginArchiveDir("tmp");      EndArchiveDir;
  AddArchiveFile("DBDEF.TXT",fromfolder & "DBDEF.TXT");
  AddArchiveFile("DEFAULT.TXT",fromfolder & "DEFAULT.TXT");
  AddArchiveFile("DEFAULT2.TXT",fromfolder & "DEFAULT2.TXT");
  AddArchiveFile("AUTOUPDATEIMPORT.TXT",fromfolder & "AUTOUPDATEIMPORT.TXT");
  AddArchiveFile("EnNewMail",fromfolder & "EnNewMail");
  AddArchiveFile("EnWine",fromfolder & "EnWine");
  AddArchiveFile("EnAsEn",fromfolder & "EnAsEn");
  AddArchiveFile("EnForceMirror",fromfolder & "EnForceMirror");
  AddArchiveFile("EnHTMLReport",fromfolder & "EnHTMLReport");
  AddArchiveFile("EnPC",fromfolder & "EnPC");
  AddArchiveFile("EnSrc",fromfolder & "EnSrc");
  AddArchiveFile("EnStoreSimulator",fromfolder & "EnStoreSimulator");
  AddArchiveFile("EnWindowTags",fromfolder & "EnWindowTags");
  AddArchiveFile("EnabNoBo",fromfolder & "EnabNoBo");
  AddArchiveFile("EnabTestEn",fromfolder & "EnabTestEn");
  AddArchiveFile("Boo.HtmlEditor.Shared.dll",fromfolder & "Boo.HtmlEditor.Shared.dll");
  AddArchiveFile("ColorPicker.dll",fromfolder & "ColorPicker.dll");
  AddArchiveFile("HtmlAgilityPack.dll",fromfolder & "HtmlAgilityPack.dll");
  AddArchiveFile("antlr3c.dll",fromfolder & "antlr3c.dll");
  AddArchiveFile("avcodec-53.dll",fromfolder & "avcodec-53.dll");
  AddArchiveFile("avutil-51.dll",fromfolder & "avutil-51.dll");
  AddArchiveFile("bellesip.dll",fromfolder & "bellesip.dll");
  AddArchiveFile("bzrtp.dll",fromfolder & "bzrtp.dll");
  AddArchiveFile("cunit.dll",fromfolder & "cunit.dll");
  AddArchiveFile("gsm.dll",fromfolder & "gsm.dll");
  AddArchiveFile("intl.dll",fromfolder & "intl.dll");
  AddArchiveFile("linphone.dll",fromfolder & "linphone.dll");
  AddArchiveFile("mediastreamer_base.dll",fromfolder & "mediastreamer_base.dll");
  AddArchiveFile("mediastreamer_voip.dll",fromfolder & "mediastreamer_voip.dll");
  AddArchiveFile("oldphone.wav",fromfolder & "oldphone.wav");
  AddArchiveFile("opus.dll",fromfolder & "opus.dll");
  AddArchiveFile("ortp.dll",fromfolder & "ortp.dll");
  AddArchiveFile("polarssl.dll",fromfolder & "polarssl.dll");
  AddArchiveFile("speex.dll",fromfolder & "speex.dll");
  AddArchiveFile("speexdsp.dll",fromfolder & "speexdsp.dll");
  AddArchiveFile("sqlite3.dll",fromfolder & "sqlite3.dll");
  AddArchiveFile("srtp.dll",fromfolder & "srtp.dll");
  AddArchiveFile("swresample-0.dll",fromfolder & "swresample-0.dll");
  AddArchiveFile("swscale-2.dll",fromfolder & "swscale-2.dll");
  AddArchiveFile("xml2.dll",fromfolder & "xml2.dll");
  AddArchiveFile("zlib.dll",fromfolder & "zlib.dll");
  AddArchiveFile("EnNoWinNewLook",fromfolder & "EnNoWinNewLook");
  EndArchive;
  return;
end;

procedure BuildServerArchive(string folder)
begin
  BeginArchiveToFile(folder & "/server.ha");
  AddArchiveDir("","clientmp/server");
  BeginArchiveDir("updateclients"); EndArchiveDir;
  BeginArchiveDir("updateclients/clients/"); EndArchiveDir;
  AddArchiveFile("updateclients/clients/windows.ha",folder & "/windows.ha");
  AddArchiveFile("updateclients/clients/windowsnet.ha",folder & "/windowsnet.ha");
  AddArchiveFile("updateclients/clients/macosx.ha",folder & "/macosx.ha");
  AddArchiveFile("updateclients/clients/books.ha",folder & "/books.ha");
  AddArchiveFile("updateclients/clients/wince.ha",folder & "/wince.ha");
  AddArchiveFile("updateclients/clients/linuxxt.ha",folder & "/linuxxt.ha");
  AddArchiveFile("updateclients/clients/win98.ha",folder & "/win98.ha");
  AddArchiveFile("updateclients/clients/hansaraamawindowsnet.ha",folder & "/hansaraamawindowsnet.ha");
  AddArchiveFile("updateclients/clients/hansaraamawin.ha",folder & "/hansaraamawin.ha");
  AddArchiveFile("updateclients/clients/hansaraamaosx.ha",folder & "/hansaraamaosx.ha");
  AddArchiveFile("updateclients/clients/linuxwine.ha",folder & "/linuxwine.ha");
  EndArchive;
  return;
end;

global
updating procedure MakeAutoClientsMn(record RcVc RepSpec)
begin
  if (DirExists(RepSpec.f1)==false) then begin
    MessageBox(32501," " & RepSpec.f1);
    goto LMakeAutoClientsMn;
  end;
  if (RepSpec.flags[1]) then begin
    BuildThisArchive("clientmp/windows","HansaWorld",".EXE",false,RepSpec.f1,"windows.ha");
  end;
  if (RepSpec.flags[10]) then begin
    BuildThisArchive("clientmp/windowsnet","HansaWorld",".EXE",false,RepSpec.f1,"windowsnet.ha");
  end;
  if (RepSpec.flags[3]) then begin
    BuildThisArchive("clientmp/macosx","HansaWorld",".app",true,RepSpec.f1,"macosx.ha");
  end;
  if (RepSpec.flags[4]) then begin
    BuildThisArchive("clientmp/books","Books",".app",true,RepSpec.f1,"books.ha");
  end;
  if (RepSpec.flags[2]) then begin
    BuildThisArchive("clientmp/wince","HansaWorld",".EXE",false,RepSpec.f1,"wince.ha");
  end;
  if (RepSpec.flags[5]) then begin
    BuildThisArchive("clientmp/linuxxt","HansaWorld","",false,RepSpec.f1,"linuxxt.ha");
  end;
  if (RepSpec.flags[6]) then begin
    BuildThisArchive("clientmp/win98","HansaWorld",".EXE",false,RepSpec.f1,"win98.ha");
  end;
  if (RepSpec.flags[11]) then begin
    BuildThisArchive("clientmp/hansaraamawindowsnet","HansaRaama",".EXE",false,RepSpec.f1,"hansaraamawindowsnet.ha");
  end;
  if (RepSpec.flags[7]) then begin
    BuildThisArchive("clientmp/hansaraamawin","HansaRaama",".EXE",false,RepSpec.f1,"hansaraamawin.ha");
  end;
  if (RepSpec.flags[8]) then begin
    BuildThisArchive("clientmp/hansaraamaosx","HansaRaama",".app",true,RepSpec.f1,"hansaraamaosx.ha");
  end;
  if (RepSpec.flags[9]) then begin
    BuildServerArchive(RepSpec.f1);
  end;
  if (RepSpec.flags[12]) then begin
    BuildThisArchive("clientmp/linuxwine","HansaWorld",".EXE",false,RepSpec.f1,"linuxwine.ha");
  end;
LMakeAutoClientsMn:;
  return;
end;

procedure MakeAutoClientIfExists(string fromfolder,string basnam,string extension,Boolean exeasfolder,string tofolder,string archivename)
begin
  if (DirExists(fromfolder)) then begin
    BuildThisArchive(fromfolder,basnam,extension,exeasfolder,tofolder,archivename);
  end;
end;

global
procedure MakeAutoClientsServer()
begin
  string 255 destination;
  
  destination = "updateclients";
  MakeAutoClientIfExists("clientmp/windows","HansaWorld",".EXE",false,destination,"windows.ha");
  MakeAutoClientIfExists("clientmp/windowsnet","HansaWorld",".EXE",false,destination,"windowsnet.ha");
  MakeAutoClientIfExists("clientmp/macosx","HansaWorld",".app",true,destination,"macosx.ha");
  MakeAutoClientIfExists("clientmp/books","Books",".app",true,destination,"books.ha");
  MakeAutoClientIfExists("clientmp/wince","HansaWorld",".EXE",false,destination,"wince.ha");
  MakeAutoClientIfExists("clientmp/linuxxt","HansaWorld","",false,destination,"linuxxt.ha");
  MakeAutoClientIfExists("clientmp/win98","HansaWorld",".EXE",false,destination,"win98.ha");
  MakeAutoClientIfExists("clientmp/hansaraamawindowsnet","HansaRaama",".EXE",false,destination,"hansaraamawindowsnet.ha");
  MakeAutoClientIfExists("clientmp/hansaraamawin","HansaRaama",".EXE",false,destination,"hansaraamawin.ha");
  MakeAutoClientIfExists("clientmp/hansaraamaosx","HansaRaama",".app",true,destination,"hansaraamaosx.ha");
  MakeAutoClientIfExists("clientmp/linuxwine","HansaWorld",".EXE",false,destination,"linuxwine.ha");
  //BuildServerArchive(destination);
end;
