external updating function Integer CreateMailFromOPD(record OPVc,var record MailVc,var string,string,string);
external procedure SplitEclass(string,var Array string);
external function Integer SclassInEclass(Array string,string);

global
updating procedure OPEmailMn(record RcVc RepSpec)
begin
  string 255 tstr;
  Boolean found,testf;
  Array string 20 ac;
  record OPVc OPr;
  row OPVc OPrw;
  Integer i,rwcnt,err;
  record CUVc VEr;
  record MailVc Mailr,OldMailr;
  vector Boolean vef;
  
  OPr.SerNr = RepSpec.long1;
  if (ReadFirstMain(OPr,1,true)==false) then begin
    goto LOPEmailMn;
  end;
  SplitEclass(RepSpec.f4,ac);
  rwcnt = MatRowCnt(OPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OPr,i,OPrw);
    if (vef[OPrw.VECode]==false) then begin
      vef[OPrw.VECode] = true;
      testf = true;
      VEr.Code = OPrw.VECode;
      testf = ReadFirstMain(VEr,1,true);
      if (testf) then begin
        if (VEr.VEType==0) then begin testf = false; end;
        if (nonblank(RepSpec.f1) and (RepSpec.f1!=VEr.Code)) then begin testf = false; end;
        if (nonblank(RepSpec.f2) and (RepSpec.f2!=VEr.VECat)) then begin testf = false; end;
        if (nonblank(RepSpec.f4)) then begin
          if (SclassInEclass(ac,VEr.Classification)==0) then begin testf = false; end;
        end;
        if (blank(VEr.eMail)) then begin testf = false; end;
      end;      
      if (testf) then begin
        RecordNew(Mailr);
        err = CreateMailFromOPD(OPr,Mailr,tstr,VEr.Code,"OPDForm");
        if (err==0 and Mailr.SendFlag!=1) then begin 
          if (RepSpec.flags[0]!=0) then begin 
            RecordCopy(OldMailr,Mailr);
            Mailr.SendFlag = 1;
            RecordUpdate(oldMailr,Mailr,true);           
          end; 
        end; 
      end;
    end;
  end;
LOPEmailMn:;  
  return;
end;