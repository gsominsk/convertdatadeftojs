external function string 60 AddObjectToObjectList(string,string);
external procedure AddWithholdingTaxesRows_IVVc(var record IVVc);
external procedure AddPerceptionTaxesRows_IVVc(var record IVVc);
external function string 255 FindNextLegalSerNr(record IVVc,string);
external procedure PasteOrdInInv2(record ORVc,record IVVc,record XSVc,var Array record XSrsVc,var Integer);
external procedure PasteGroupORInInv(record ORVc,record IVVc);
external procedure IVSumup(var record IVVc,Boolean);
external function LongInt GetCurUserLastNr(string);
external function Boolean PasteOrdInInv(var record IVVc,record ORVc,Boolean,string,record RcVc,var val,Boolean,Boolean,Boolean,var Integer,Boolean,array record XSrsVc,var Integer);
external procedure SetORFlags(record ORVc);

updating procedure UpdateOR(record IVVc IVp,record ORVc ORp,record ORVc oldORp,Integer rows2)
BEGIN
  Integer i,orcnt,rwcnt;
  row IVVc IVrw;
  row ORVc ORrw;
  
  rwcnt = MatRowCnt(IVp);
  orcnt = MatRowCnt(ORp);
  for (i=rows2;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
      if (IVrw.OrdRow!=-1) then begin
        if (IVrw.OrdRow<orcnt) then begin
          MatRowGet(ORp,IVrw.OrdRow,ORrw);
          ORrw.Invd = ORrw.Invd + IVrw.Quant;
          MatRowPut(ORp,IVrw.OrdRow,ORrw);
        end;
      end;
    end;
  end;
  SetORFlags(ORp);
  if (RecordUpdate(oldORp,ORp,false)==0) then begin
  end;
  RETURN;
END;

updating procedure SaveCreatedIV(record RcVc RepSpec,record CUVc CUp,var record IVVc IVp,var array LongInt linkorder,var Integer numord,record XSVc XSp,array record XSrsVc aXSrsr,var Integer axsrscnt,Boolean xsf,string special,var Integer cntp)
BEGIN
  LongInt newnr;
  record ORVc ORr;
  record SRBlock SRRec;
  string 255 langstr,tstr;
  Boolean testf;
  record IVVc IVr2;
  record IVVc oldIVr;
  row IVVc IVrw;
  Integer i,rwcnt;
  Integer j;
  record XSrsVc XSrsr;
  
  langstr = IVp.LangCode;
  if (nonblank(special)) then begin
    langstr = special;
  end;
  IVp.GroupInv = 1;
  BlockLoad(SRRec);
  if (IVp.SerNr<=0) then begin
    newnr = GetCurUserLastNr("IVVc");
    if (newnr==-1) then begin
      newnr = SRRec.LastInvNr;
    end;
    IVp.SerNr = NextSerNr("IVVc",CurrentDate,newnr,false,special); 
//    IVp.OfficialSerNr = FindNextLegalSerNr(IVp,CUp.Classification); //POSN
  end;
  AddPerceptionTaxesRows_IVVc(IVp);
  AddWithholdingTaxesRows_IVVc(IVp);
  IVSumup(IVp,true);
  if (MatRowCnt(IVp)>0) then begin
    IVp.UpdStockFlag = RepSpec.flags[1];
    RecordCopy(IVr2,IVp);
    if (RecordInsert(IVp,false))  then begin
// Fix to get the OrdRow set, RecordInsert makes sure they are empty....
      for (j=0;j<numord;j=j+1) begin
        ORr.SerNr = linkorder[j];
        if ReadFirstMain(ORr,1,true) then begin
          CreateRecordLink(IVp,CurrentCompany,ORr,CurrentCompany);  
          CreateRecordLink(ORr,CurrentCompany,IVp,CurrentCompany);  
        end; 
        linkorder[j] = -1;
      end;  
      numord = 0;
      RecordCopy(oldIVr,IVp);
      rwcnt = MatRowCnt(IVr2);
      for (i=0;i<numord;i=i+1) begin
        MatRowGet(IVr2,i,IVrw);
        MatRowPut(IVp,i,IVrw);
      end;
      if (RecordUpdate(oldIVr,IVp,false)==0) then begin end;
      cntp = cntp + 1;
      if (cntp>1) then begin // Every second Invoice Storage should flush the 
//        DBFlush;
//        DBHold;
        cntp = 0;
      end;
      if (xsf) then begin
        XSp.SerNr = IVp.SerNr;
        XSp.FileName = "IVVc";
        if (RecordStore(XSp,false))  then begin
        end;
        for (i=0;i<axsrscnt;i=i+1) begin
          XSrsr = aXSrsr[i];
          XSrsr.ToSerNr = IVp.SerNr;
          RecordStore(XSrsr,false);
        end;
      end;
    end;
  end;
  axsrscnt = 0;
  RETURN;
END;

procedure FindLastServiceDeliveryDate(LongInt orsernr,var Date lastservdeldate)
BEGIN
  record SHVc lastSHr;

  lastSHr.OrderNr = orsernr;
  lastSHr.SerNr = 2147483647;
  if (ReadLastKey("OrderKey",lastSHr,2,false)) then begin
    if (lastSHr.OrderNr==orsernr) then begin
      if (lastSHr.ShipDate>lastservdeldate) then begin
        lastservdeldate = lastSHr.ShipDate;
      end;
    end;
  end;
  RETURN;
END;

updating procedure CUGroupInvOneInvoiceRowPerOrderRow(record RcVc RepSpec,record CUVc CUp,Boolean moreinfo,var Integer cnt)
BEGIN
  record MainStockBlock MainStockRec;
  record ORVc oldORr;
  record ORVc ORr;
  record IVVc IVr; 
  record XSVc fakeXSr;
  row IVVc IVrw;
  Boolean found;
  LongInt ordnr;
  Integer rows;
  Integer orcnt;
  string 255 tstr,t2;
  Boolean testf,notoneinvoicvef;
  Integer rows2;
  string 20 lastcu;
  Integer AllowInvBeforeShip;
  val orsum;
  Date lastservdeldate;
  array LongInt linkorder;
  Integer numord;
  record OrdSettBlock OSb;
  Integer err;
  Array record XSrsVc aXSrsr;
  Integer axsrscnt;

  numord = 0;
  BlockLoad(MainStockRec);
  BlockLoad(OSb);
  RecordNew(IVr);
  IVr.Objects = "";
  IVr.UpdStockFlag = 0;
  ORr.OSFlag = 1;
  ORr.InvoiceToCode = CUp.Code;
  ORr.SerNr = -1;
  found = true;
  while (LoopKey("InvoiceCode",ORr,2,found)) begin
    RecordCopy(oldORr,ORr);
    if (found) then begin
      if (ORr.OSFlag!=1) then begin found =false; end;
      if (nonblank(ORr.InvoiceToCode)) then begin
        if (ORr.InvoiceToCode!=CUp.Code) then begin found = false; end;
      end else begin
        if (ORr.CustCode!=CUp.Code) then begin found = false; end;
      end;
    end;
    AllowInvBeforeShip = ORr.InvBeforeShip;
    if (AllowInvBeforeShip==0) then begin
//      AllowInvBeforeShip = MainStockRec.AllowInvBeforeShip;// not correct
    end;
    testf = true;
    if (found) then begin
      if ((ORr.InvFlag==1) and (AllowInvBeforeShip==0)) then begin testf = false; end;
      if (ORr.InvFlag==2) then begin testf = false; end;
      if (nonblank(RepSpec.f2)) then begin
        if (ORr.OrderClass!=RepSpec.f2) then begin testf = false; end;
      end;
    end;
    if (found==false) then begin testf = false; end;
    if (testf) then begin
      ordnr = ORr.SerNr;
      if (IsRecordLocked(ORr)) then begin // This is not too late, I think. Should be tested 
        goto L77CUGroupInv;
      end;
      FindLastServiceDeliveryDate(ORr.SerNr,lastservdeldate);
      notoneinvoicvef = true; 
      orcnt = MatRowCnt(ORr);
      if ((orcnt+5)>190) then begin notoneinvoicvef = false; end;
      rows = MatRowCnt(IVr);      
      rows2 = rows;
      if (((rows+orcnt+5)>190) or (notoneinvoicvef==false) or
          (ORr.PayDeal!=IVr.PayDeal)) then begin 
        IVr.OrderNr = -1;
        IVr.SVONr = -1;
        IVr.UpdStockFlag = RepSpec.flags[1];
        IVr.SerNr = -1;      
        IVr.ServiceDelDate = lastservdeldate;
        SaveCreatedIV(RepSpec,CUp,IVr,linkorder,numord,fakeXSr,aXSrsr,axsrscnt,false,RepSpec.AccStr,cnt);
        RecordNew(IVr);
        rows  = 0;
        rows2 = 0;
      end;
      if (notoneinvoicvef) then begin
      if (RepSpec.flags[3]==0) then begin    
        if (OSb.IVBasedOnSH==0) then begin
          ClearRow(IVr,IVrw,1);
          IVrw.Spec = " ";
          MatRowPut(IVr,rows,IVrw);
          ClearRow(IVr,IVrw,1);
          tstr = USetStr(1816);
          tstr = tstr & " " & ordnr;
          tstr = tstr & " / ";
          tstr = tstr & USetStr(2354);
          tstr = tstr & " ";
          tstr = tstr & ORr.CustCode;
          tstr = tstr & ", ";
          tstr = tstr & ORr.Addr0;
          if (nonblank(ORr.CustOrdNr)) then begin
            tstr = tstr & " / ";
            tstr = tstr & ORr.CustOrdNr;
          end;
          IVrw.Spec = tstr;
          MatRowPut(IVr,rows+1,IVrw);
          if (moreinfo) then begin
            rows = MatRowCnt(IVr);
            ClearRow(IVr,IVrw,1);
            tstr = USetStr(1812);
            if (nonblank(ORr.ShipAddr0)) then begin
              tstr = tstr & ORr.ShipAddr0;
              if (nonblank(ORr.ShipAddr1)) then begin
                tstr = tstr & ", ";
              end;
              tstr = tstr & ORr.ShipAddr1;
              if (nonblank(ORr.ShipAddr2)) then begin
                tstr = tstr & ", ";
              end;
              tstr = tstr & ORr.ShipAddr2;
              if (nonblank(ORr.ShipAddr3)) then begin
                tstr = tstr & ", ";
              end;
              tstr = tstr & ORr.ShipAddr3;
            end else begin
              tstr = tstr & ORr.Addr1;
              if (nonblank(ORr.Addr2)) then begin
                tstr = tstr & ", ";
              end;
              tstr = tstr & ORr.Addr2;
              if (nonblank(ORr.Addr3)) then begin
                tstr = tstr & ", ";
              end;
              tstr = tstr & ORr.Addr3;
              if (nonblank(ORr.InvAddr3)) then begin
                tstr = tstr & ", ";
              end;
              tstr = tstr & ORr.InvAddr3;
            end;
            IVrw.Spec = tstr;
            MatRowPut(IVr,rows,IVrw);
          end;
        end;
      end;
      end;
      testf = PasteOrdInInv(IVr,ORr,true,lastcu,RepSpec,orsum,false,false,true,err,true,aXSrsr,axsrscnt);
      linkorder[numord] = ORr.SerNr;
      numord = numord + 1;
      IVr.LangCode = CUp.LangCode;
      if (notoneinvoicvef) then begin
        if (RepSpec.flags[3]==0) then begin    
          if (orsum!=0) then begin
            rows = MatRowCnt(IVr);
            ClearRow(IVr,IVrw,1);
            IVrw.Spec = "----------";
            MatRowPut(IVr,rows,IVrw);
            ClearRow(IVr,IVrw,1);
            IVrw.Spec = USetStr(2368) & ": ";
            IVrw.Spec = IVrw.Spec & orsum;
            MatRowPut(IVr,rows+1,IVrw);
          end;
        end;  
      end;  
      linkorder[numord] = ORr.SerNr;
      numord = numord + 1;
      UpdateOR(IVr,ORr,oldORr,rows2);
L77CUGroupInv:;
      if (nonblank(ORr.InvoiceToCode)) then begin
        lastcu = ORr.InvoiceToCode;
      end else begin
        lastcu = ORr.CustCode;
      end;
    end;
    UserTrace(ORr.SerNr,M4Long);                
  end;
  IVr.OrderNr = -1;
  IVr.SVONr = -1;
  IVr.UpdStockFlag = RepSpec.flags[1];
  IVr.SerNr = -1;
  IVr.ServiceDelDate = lastservdeldate;
  SaveCreatedIV(RepSpec,CUp,IVr,linkorder,numord,fakeXSr,aXSrsr,axsrscnt,true,RepSpec.AccStr,cnt);
  RETURN;
END;

updating procedure CUGroupInvOneInvoiceRowPerOrder(record RcVc RepSpec,record CUVc CUp,var Integer cnt)
BEGIN
  record XSVc XSr;
  record ORVc oldORr;
  record ORVc ORr;
  Boolean found;
  record IVVc IVr; 
  record IVVc IV2r; 
  LongInt ordnr;
  Integer rwcnt,i,rwcnt2;
  Integer rows;
  row IVVc IVrw;
  row IVVc IV2rw;
  string 255 tstr,t2;
  Boolean testf;
  Integer AllowInvBeforeShip;
  record MainStockBlock MainStockRec;
  Date lastservdeldate;
  array LongInt linkorder;
  Integer numord;
  record XSrsVc XSrsr;
  Array record XSrsVc aXSrsr;
  Integer axsrscnt;
  
  numord = 0;
  BlockLoad(MainStockRec);
  RecordClear(XSr);
  XSr.FileName = "IVVc";
  XSr.SerNr = -1;
  RecordNew(IVr);
  IVr.Objects = "";
  IVr.UpdStockFlag = 0;
  ORr.OSFlag = 1;
  ORr.InvoiceToCode = CUp.Code;
  ORr.SerNr = -1;
  found = true;
  while (LoopKey("InvoiceCode",ORr,2,found)) begin
    RecordCopy(oldORr,ORr);
    if (found) then begin
      if (ORr.OSFlag!=1) then begin found =false; end;
      if (nonblank(ORr.InvoiceToCode)) then begin
        if (ORr.InvoiceToCode!=CUp.Code) then begin found = false; end;
      end else begin
        if (ORr.CustCode!=CUp.Code) then begin found = false; end;
      end;
    end;
    AllowInvBeforeShip = ORr.InvBeforeShip;
    if (AllowInvBeforeShip==0) then begin
//      AllowInvBeforeShip = MainStockRec.AllowInvBeforeShip;//not correct
    end;
    testf = true;
    if (found) then begin
      if ((ORr.InvFlag==1) and (AllowInvBeforeShip==0)) then begin testf = false; end;
      if (ORr.InvFlag==2) then begin testf = false; end;
      if (nonblank(RepSpec.f2)) then begin
        if (ORr.OrderClass!=RepSpec.f2) then begin testf = false; end;
      end;
    end;
    if (found==false) then begin testf = false; end;
    if (testf) then begin
      if (IsRecordLocked(ORr)) then begin
        goto L77CUGroupInvOnInvoiceRowPerOrder;
      end;      
//## break if different payment terms
      FindLastServiceDeliveryDate(ORr.SerNr,lastservdeldate);
      if (blank(IVr.CustCode)) then begin
        PasteGroupORInInv(ORr,IVr);
      end;      
      ordnr = ORr.SerNr;
      rows = MatRowCnt(IVr);      
      RecordCopy(IV2r,IVr);//only header should be copied
      rwcnt = MatRowCnt(IV2r);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowDelete(IV2r,i);
        rwcnt = MatRowCnt(IV2r);
        i = i-1;
      end;      
      PasteOrdInInv2(ORr,IV2r,XSr,aXSrsr,axsrscnt);
      IVr.LangCode = CUp.LangCode;
      rwcnt2 = MatRowCnt(IV2r);
      for (i=0;i<rwcnt2;i=i+1) begin
        MatRowGet(IV2r,i,IV2rw);
        if (IV2rw.Sum!=0) then begin
          rwcnt = MatRowCnt(IVr);
          ClearRow(IVr,IVrw,1);
          tstr = USetStr(1816) & " " & ordnr;
          tstr = tstr & " / ";
          tstr = tstr & USetStr(2354);
          tstr = tstr & " ";
          tstr = tstr & ORr.CustCode;
          if (nonblank(ORr.CustOrdNr)) then begin
            tstr = tstr & " / ";
            tstr = tstr & ORr.CustOrdNr;
          end;
          tstr = tstr & ", ";
          tstr = tstr & ORr.Addr0;
          IVrw.Spec = tstr;
          IVrw.Sum = IV2rw.Sum;
          IVrw.VATCode = IV2rw.VATCode;
          IVrw.RvrsVATCode = IV2rw.RvrsVATCode;
          IVrw.SalesAcc = IV2rw.SalesAcc;
          IVrw.Perceptions = 1;
          IVrw.OrdNr = ORr.SerNr;
          IVrw.OrdRow = -2;
          IVrw.Objects = AddObjectToObjectList(IVrw.Objects,ORr.Objects);        
          MatRowPut(IVr,rwcnt,IVrw);
        end;
      end;     
      linkorder[numord] = ORr.SerNr;
      numord = numord + 1; 
      SetORFlags(ORr);
      if (RecordUpdate(oldORr,ORr,false)==0) then begin
      end;
      cnt = cnt + 1;
      if (cnt>5) then begin
//        DBFlush;
//        DBHold;
      end;
L77CUGroupInvOnInvoiceRowPerOrder:;
    end;
    UserTrace(ORr.SerNr,M4Long);                
  end;
  IVr.OrderNr = -1;
  IVr.SVONr = -1;
  IVr.UpdStockFlag = RepSpec.flags[1];
  IVr.SerNr = -1;
  IVr.ServiceDelDate = lastservdeldate;
  SaveCreatedIV(RepSpec,CUp,IVr,linkorder,numord,XSr,aXSrsr,axsrscnt,true,"",cnt);
  RETURN;
END;

updating procedure CUGroupInv3(record RcVc RepSpec,record CUVc CUp,Integer cnt)
BEGIN
  record ORVc oldORr;
  record ORVc ORr;
  Boolean found;
  record IVVc IVr; 
  record XSVc fakeXSr;
  LongInt ordnr;
  Integer rows;
  Integer orcnt;
  row IVVc IVrw;
  string 255 tstr,t2;
  Boolean testf,notoneinvoicvef;
  Integer rows2;
  string 20 lastcu;
  val orsum;
  Date lastservdeldate;
  array LongInt linkorder;
  Integer numord;
  Integer err;
  Array record XSrsVc aXSrsr;
  Integer axsrscnt;

  numord = 0;
  RecordNew(IVr);
  IVr.UpdStockFlag = 0;
  ORr.OSFlag = 1;
  ORr.CustCode = CUp.Code;
  ORr.SerNr = -1;
  found = true;
  while (LoopKey("OSCU",ORr,2,found)) begin
    RecordCopy(oldORr,ORr);
    if (found) then begin
      if (ORr.OSFlag!=1) then begin found =false; end;
      if (ORr.CustCode!=CUp.Code) then begin found = false; end;
    end;
    testf = true;
    if (found) then begin
      if (ORr.InvFlag==1) then begin testf = false; end;
      if (ORr.InvFlag==2) then begin testf = false; end;
      if (nonblank(RepSpec.f2)) then begin
        if (ORr.OrderClass!=RepSpec.f2) then begin testf = false; end;
      end;
    end;
    if (found==false) then begin testf = false; end;
    if (testf) then begin
      if (CUp.Code!=ORr.CustCode) then begin
        IVr.OrderNr = -1;
        IVr.UpdStockFlag = 0;
        IVr.SerNr = -1;
        IVr.SVONr = -1;        
        IVr.ServiceDelDate = lastservdeldate;
        SaveCreatedIV(RepSpec,CUp,IVr,linkorder,numord,fakeXSr,aXSrsr,axsrscnt,false,RepSpec.AccStr,cnt);
        RecordNew(IVr);
      end;
      ordnr = ORr.SerNr;
      if (IsRecordLocked(ORr)) then begin // This is not too late, I think. Should be tested
        goto L77CUGroupInv3;
      end;
      FindLastServiceDeliveryDate(ORr.SerNr,lastservdeldate);
      notoneinvoicvef = true; 
      orcnt = MatRowCnt(ORr);
      if ((orcnt+5)>190) then begin notoneinvoicvef = false; end;
      rows = MatRowCnt(IVr);      
      rows2 = rows;
      if (((rows+orcnt+5)>190) or (notoneinvoicvef==false) or
          (ORr.PayDeal!=IVr.PayDeal)) then begin           
        IVr.OrderNr = -1;
        IVr.UpdStockFlag = 0;
        IVr.SerNr = -1;
        IVr.SVONr = -1;              
        IVr.ServiceDelDate = lastservdeldate;
        SaveCreatedIV(RepSpec,CUp,IVr,linkorder,numord,fakeXSr,aXSrsr,axsrscnt,false,RepSpec.AccStr,cnt);
        RecordNew(IVr);
        rows  = 0;
        rows2 = 0;
      end;      
      if (notoneinvoicvef) then begin        
        ClearRow(IVr,IVrw,1);
        IVrw.Spec = " ";
        MatRowPut(IVr,rows,IVrw);
        ClearRow(IVr,IVrw,1);
        tstr = USetStr(1816) & " " & ordnr;
        tstr = tstr & " / ";
        tstr = tstr & USetStr(2354);
        tstr = tstr & " ";
        tstr = tstr & ORr.CustCode;
        tstr = tstr & ", ";
        tstr = tstr & ORr.Addr0;
        if (nonblank(ORr.CustOrdNr)) then begin
          tstr = tstr & " / ";
          tstr = tstr & ORr.CustOrdNr;
        end;
        IVrw.Spec = tstr;
        MatRowPut(IVr,rows+1,IVrw);
      end;  
      testf = PasteOrdInInv(IVr,ORr,true,lastcu,RepSpec,orsum,false,false,true,err,true,aXSrsr,axsrscnt);
      linkorder[numord] = ORr.SerNr;
      numord = numord + 1;
      IVr.LangCode = CUp.LangCode;
      if (RepSpec.flags[2]!=0) then begin
        if (notoneinvoicvef) then begin      
          rows = MatRowCnt(IVr);
          ClearRow(IVr,IVrw,1);
          IVrw.Spec = "----------";
          MatRowPut(IVr,rows,IVrw);
          ClearRow(IVr,IVrw,1);
          IVrw.Spec = USetStr(2368);
          IVrw.Spec = IVrw.Spec & ": ";
          IVrw.Spec = IVrw.Spec & ORr.Sum1;
          MatRowPut(IVr,rows+1,IVrw);
        end;  
      end;
      linkorder[numord] = ORr.SerNr;
      numord = numord + 1;
      UpdateOR(IVr,ORr,oldORr,rows2);
L77CUGroupInv3:;
    end;
    if (nonblank(ORr.InvoiceToCode)) then begin
      lastcu = ORr.InvoiceToCode;
    end else begin
      lastcu = ORr.CustCode;
    end;    
    UserTrace(ORr.SerNr,M4Long);                    
  end;
  IVr.OrderNr = -1;
  IVr.SVONr = -1;
  IVr.UpdStockFlag = RepSpec.flags[1];
  IVr.SerNr = -1;
  IVr.ServiceDelDate = lastservdeldate;
  SaveCreatedIV(RepSpec,CUp,IVr,linkorder,numord,fakeXSr,aXSrsr,axsrscnt,false,RepSpec.AccStr,cnt);
  RETURN;
END;

global
updating procedure GroupInvoiceMn(record RcVc RepSpec)
BEGIN
  record CUVc CUr;
  string 20 frcc,tocc;
  Boolean TrHs,testf;
  Integer cnt;
  
  cnt = 0;
  frcc = FirstInRange(RepSpec.f1,20);
  tocc = LastInRange(RepSpec.f1,20);
  CUr.Code = frcc;
  TrHs = true;
  while (LoopMain(CUr,1,TrHs)) begin
    if (TrHs) then begin
      if (nonblank(tocc)) then begin
        if (CUr.Code>tocc) then begin
          TrHs = false;
        end;
      end;
    end;
    if (TrHs) then begin
      testf = true;      
      if (nonblank(RepSpec.f3)) then begin
        if (CUr.CustCat!=RepSpec.f3) then begin testf = false; end;
      end;
      if (CUr.CUType==0) then begin testf = false; end;      
      if (CUr.OnHoldFlag!=0) then begin testf = false; end;      
      if (CUr.blockedFlag!=0) then begin testf = false; end;      
      if (RepSpec.flags[5]!=0) then begin
        if (CUr.GroupInv==0) then begin testf = false; end;
      end;
      if (testf) then begin
        switch (RepSpec.ArtMode) begin
          case 0: CUGroupInvOneInvoiceRowPerOrderRow(RepSpec,CUr,false,cnt);
          case 1: CUGroupInvOneInvoiceRowPerOrder(RepSpec,CUr,cnt);
          case 2: CUGroupInv3(RepSpec,CUr,cnt);
          case 3: CUGroupInvOneInvoiceRowPerOrderRow(RepSpec,CUr,true,cnt);
        end;
      end;
    end;
  end;  
  RETURN;
END;
