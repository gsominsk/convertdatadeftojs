external procedure CheckFlush(var Integer,Integer);
external procedure ExtractObj(string,var Integer,var string);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external procedure SetSalesMan(var string,string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean GetPM(string,var string,var string);
external function Boolean CLInforIVExists(LongInt,string,var LongInt);

updating procedure StoreCLInIV(LongInt clinsernr,LongInt ivnr,string filename,var Integer flushcnt)
BEGIN
  record CLInIVVc CLInIVr;
  
  CLInIVr.CLInNr = clinsernr;
  CLInIVr.SerNr = ivnr;
  CLInIVr.FileName = filename;
  if (RecordStore(CLInIVr,false)) then begin end;
  CheckFlush(flushcnt,10);
  RETURN;
END;

procedure CreateCLIn(var record CLInVc CLInr,string person,Date d1,string paymode)
BEGIN
  val frrate,to1,to2,br1,br2;
  string 255 tstr;
  string 5 crncy;
  record MainCLBlock MainCLRec;

  BlockLoad(MainCLRec);
  CLInr.TransDate = d1;
  if (blankdate(CLInr.TransDate)) then begin
    CLInr.TransDate = CurrentDate;
  end;  
  CLInr.PayMode = paymode;
  if (GetPM(CLInr.PayMode,tstr,tstr)==false) then begin
    CLInr.PayMode = "";
  end;  
  if (blank(CLInr.PayMode)) then begin
    CLInr.PayMode = MainCLRec.DefPM;
    if (GetPM(CLInr.PayMode,tstr,tstr)==false) then begin
      CLInr.PayMode = "";
    end;  
  end;  
  CLInr.CorspCode = MainCLRec.DefCorspCode;
  SetSalesMan(tstr,person);
  CLInr.Person = tstr;  
  crncy = CLInr.CurncyCode;
  GetFullCurncyRate(crncy,CLInr.TransDate,frrate,to1,to2,br1,br2);
  CLInr.CurncyCode = crncy;
  CLInr.FrRate = frrate;
  CLInr.ToRateB1 = to1; 
  CLInr.ToRateB2 = to2;
  CLInr.BaseRate1 = br1;
  CLInr.BaseRate2 = br2;
  CLInr.ColFlag = 1;
  RETURN;
END;

global
updating procedure ColCLInMn(record RcVc RepSpec)
BEGIN
  record IVVc firstIVr;
  record IVVc IVr;
  record CLInVc oldCLInr;
  record CLInVc CLInr;
  Boolean TrHs,testf,firstf,custf;
  LongInt clin;
  string 20 frcu,tocu;
  LongInt frinv,toinv;
  val totsum4,t;
  string 20 lastcu;
  Array LongInt clinivnr;
  Integer i,ivcnt;
  Boolean commaf;
  Array LongInt ivnrs;
  Integer ivnrcnt,ivnrcnti,pos,flushcnt;
  record MainCLBlock MainCLRec;
  val frrate,to1,to2,br1,br2;
  string 10 crncy;

  BlockLoad(MainCLRec);  
  if ((blank(MainCLRec.DefPM)) or (blank(MainCLRec.DefCorspCode))) then begin
    goto LColCLInMn;
  end;
  for (i=0;i<len(RepSpec.f2);i=i+1) begin
    if (Mid(RepSpec.f2,i,1)==",") then begin
      commaf = true;
      goto LBREAK;
    end;
  end;
LBREAK:; 
  frcu = FirstInRange(RepSpec.f1,20);
  tocu = LastInRange(RepSpec.f1,20);
  if (commaf) then begin
    pos = 0;    
    ExtractObj(RepSpec.f2,pos,lastcu);
    while (nonblank(lastcu)) begin
      ivnrs[ivnrcnt] = FirstInRange(lastcu,10);
      ivnrcnt = ivnrcnt + 1;
      ExtractObj(RepSpec.f2,pos,lastcu);
    end;
  end;
  custf = true;
  firstf = true;
  RecordNew(CLInr);
  ivnrcnti = 0;
LAGAIN:;  
  if (commaf) then begin
    RepSpec.f2 = ivnrs[ivnrcnti];
  end;
  frinv = FirstInRange(RepSpec.f2,10);
  toinv = LastInRange(RepSpec.f2,10);
  TrHs = true;
  IVr.InvType = kInvoiceTypeCash;
  IVr.SerNr = frinv;
  ResetLoop(IVr);
  while (LoopKey("InvType",IVr,2,TrHs)) begin
    if (IVr.InvType!=kInvoiceTypeCash) then begin
      TrHs = false;
    end;
    if (TrHs) then begin    
      testf = true;
      if (nonblank(RepSpec.f1)) then begin
        if (IVr.CustCode<frcu) then begin testf = false; end;
        if (IVr.CustCode>tocu) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.f2)) then begin
        if (IVr.SerNr<frinv) then begin testf = false; end;
        if (IVr.SerNr>toinv) then begin testf = false; end;
      end;
      if (DateInRange(IVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
        testf = false;
      end;
      if (testf) then begin
        if (CLInforIVExists(IVr.SerNr,"IVVc",clin)) then begin     
          testf = false;
        end;
      end;  
      if (testf) then begin
        if (firstf) then begin
          RecordCopy(firstIVr,IVr);
          CreateCLIn(CLInr,RepSpec.FirstAcc,RepSpec.d1,IVr.PayDeal);
          CLInr.SerNr = NextSerNr("CLInVc",CLInr.TransDate,-1,false,CLInr.LangCode);
          if (CLInr.SerNr>0) then begin
            if (RecordStore(CLInr,false)) then begin   
              CheckFlush(flushcnt,10);
              RecordCopy(oldCLInr,CLInr);
            end else begin
              goto LColCLInMn;
            end; 
           firstf = false;
          end else begin
            goto LColCLInMn;
          end;
        end;
        clinivnr[ivcnt] = IVr.SerNr;
        ivcnt = ivcnt + 1;
        t = IVr.Sum4;        
        if (nonblank(RepSpec.CurncyCode)) then begin
          CurValToOtherCur(CLInr.TransDate,IVr.CurncyCode,IVr.Sum4,RepSpec.CurncyCode,t,DefaultCurRoundOff);
          CLInr.CurncyCode = RepSpec.CurncyCode;
          crncy = CLInr.CurncyCode;
          GetFullCurncyRate(crncy,CLInr.TransDate,frrate,to1,to2,br1,br2);
          CLInr.CurncyCode = crncy;
          CLInr.FrRate = frrate;
          CLInr.ToRateB1 = to1; 
          CLInr.ToRateB2 = to2;
          CLInr.BaseRate1 = br1;
          CLInr.BaseRate2 = br2;
        end else begin
          CLInr.CurncyCode = IVr.CurncyCode;
          CLInr.FrRate = IVr.FrRate;
          CLInr.ToRateB1 = IVr.ToRateB1; 
          CLInr.ToRateB2 = IVr.ToRateB2;
          CLInr.BaseRate1 = IVr.BaseRate1;
          CLInr.BaseRate2 = IVr.BaseRate2;
        end;
        totsum4 = totsum4 + t;
        if ((nonblank(lastcu)) and (lastcu!=IVr.CustCode)) then begin
          custf = false;
        end;
        lastcu = IVr.CustCode;
      end;  
    end;  
  end;
  if (commaf) then begin
    if (ivnrcnti<ivnrcnt) then begin
      ivnrcnti = ivnrcnti + 1;
      goto LAGAIN;
    end;  
  end;  
  if (custf) then begin
    CLInr.CUCode = firstIVr.CustCode;
    CLInr.CUName = firstIVr.Addr0;
    CLInr.Addr0 = firstIVr.Addr1;
    CLInr.Addr1 = firstIVr.Addr2;
    CLInr.Addr2 = firstIVr.Addr3;
    CLInr.Addr3 = firstIVr.InvAddr3;
    CLInr.Addr4 = firstIVr.InvAddr4;  
  end;
  CLInr.Total = totsum4;
  if (RecordUpdate(oldCLInr,CLInr,true)==0) then begin
    for (i=0;i<ivcnt;i=i+1) begin
      StoreCLInIV(CLInr.SerNr,clinivnr[i],"IVVc",flushcnt);
    end;  
  end else begin
    RecordDelete(oldCLInr);
  end;
LColCLInMn:;  
  RETURN;
END;
