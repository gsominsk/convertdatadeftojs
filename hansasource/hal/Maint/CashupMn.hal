external function Boolean TransInFiscal(Date);
//external procedure GetIVCashData(Date,time,Date,time,string,string,var vector val,var array string,var array string,var array string,var array string,var array string,var array string,var array string,var array string);
//external procedure GetCashData(Date,time,Date,time,string,string,var vector val);
external procedure CashSumup(record CashVc);
external function Boolean IsSessionOpen(string,string,Date,Time);
external procedure FindTimeOfLastPOSBalance(var Date,var Time,string,string,var val,var val);
external procedure DoTheCashup(Integer,Integer,Integer,Integer,Integer,Integer,Integer,Date,Date,Time,Time,string,string,string,Integer,Boolean,Boolean,
                      var val,var val,var val,var array string,var array val,var array val,var array val,var Integer,var val,var val,var array string,var array val,Integer,var record SMVc,
                      var array string,var array string,var array val,var array val,var array val,var array val,var array val,var array val,var array val,var Integer,
                      var array string,var array string,var array val,var array val,var array val,var array val,var array val,var array val,var array val,var Integer,
                      var array string,var array string,var array val,var array val,var array val,var array val,var array val,var array val,var array val,var Integer,
                      var record SMVc,var vector val,var Date);


function Boolean FindStartTimeOfLastPOSSession(var Date dfr,var Time tfr,string machine,string drawer)
begin
  Boolean res;
  record POSEventVc POSEventr;
  Boolean foundf,testf;

  POSEventr.MachineName = machine;
  POSEventr.Drawer = drawer;
  POSEventr.TransDate = dfr;
  POSEventr.TransTime = tfr;
  foundf = true;
  while (LoopBackKey("MachineName",POSEventr,4,foundf))  begin
    if (POSEventr.MachineName!=machine) then begin
      foundf = false;
    end;
    if (POSEventr.Drawer!=drawer) then begin
      foundf = false;
    end;
    if (POSEventr.TransDate>dfr) then begin
      foundf = false;
    end;
    if (foundf) then begin
      testf = true;
      if (POSEventr.Event!=1) then begin testf = false; end;
      if (testf) then begin
        dfr = POSEventr.TransDate;
        tfr = POSEventr.TransTime;
        foundf = false;
        res = true;
      end;
    end;
  end;
  FindStartTimeOfLastPOSSession = res;
  return;
end;

procedure BuildMachineDrawerCombinations(string selmachine,string seldrawer,var array string amachine,var array string adrawer,var Integer amdcnt)
begin
  record LocalMachineVc LocalMachiner;
  record DrawerVc Drawerr;
  Boolean dfoundf,lfoundf;
  
  lfoundf = true;
  LocalMachiner.Code = selmachine;
  while (LoopMain(LocalMachiner,1,lfoundf)) begin
    if (nonblank(selmachine)) then begin
      if (LocalMachiner.Code!=selmachine) then begin
        lfoundf = false;
      end;
    end;
    if (lfoundf) then begin
      ResetLoop(Drawerr);
      dfoundf = true;
      Drawerr.Code = seldrawer;
      while (LoopMain(Drawerr,1,dfoundf)) begin
        if (nonblank(seldrawer)) then begin
          if (Drawerr.Code!=seldrawer) then begin
            dfoundf = false;
          end;
        end;
        if (dfoundf) then begin
          amachine[amdcnt] = LocalMachiner.Code;
          adrawer[amdcnt] = Drawerr.Code;
          amdcnt = amdcnt + 1;
        end;
      end;
    end;
  end;
  if (amdcnt==0) then begin
    amachine[amdcnt] = selmachine;
    adrawer[amdcnt] = seldrawer;
    amdcnt = amdcnt + 1;
  end;
  return;
end;

global
function Val GetPOSBalance(Date dat,Time tim,string machine,string drawer)
begin
  val res,totin,totout;
  array string 20 aitcode;
  array val aitsum;
  array val aitvat;
  array val aitqty;
  array string 20 avatcode;
  array val avatsum;
  val totsum,totvat,avatcnt;
  Integer aitcnt;
  record SMVc SMr;
  array string 20 aitcodetot;
  array string 20 aitcrncytot;
  array val aitsumtot,aitsumb1tot,aitnrtot,aitstartbaltot,aitstartbalb1tot,aitvattot,aitsumb1outtot;
  Integer aitcnttot;
  array string 20 atrsfitcodetot;
  array string 20 atrsfitcrncytot;
  array val atrsfitsumtot,atrsfitsumb1tot,atrsfitnrtot,atrsfitstartbaltot,atrsfitstartbalb1tot,atrsfitvattot,atrsfitsumb1outtot;
  Integer atrsfitcnttot;

  array string 20 aitcodesum;
  array string 20 aitcrncysum;
  array val aitsumsum,aitsumb1sum,aitnrsum,aitstartbalsum,aitstartbalb1sum,aitvatsum,aitsumb1outsum;
  Integer aitcntsum;
  Date ReportingDate;
  record CashierDefBlock CDb;
  Date d;
  Time t;
  record SMVc CountSMr;
  val bal,accsales;
  vector val vstatussum;
  
  BlockLoad(CDb);  
  d = dat;
  t = AddSeconds(tim,-1);
  if (CDb.StartFromLastPOSBal!=0) then begin
    FindTimeOfLastPOSBalance(d,t,machine,drawer,bal,accsales);
  end else begin
    if (FindStartTimeOfLastPOSSession(d,t,machine,drawer)==false) then begin
      FindTimeOfLastPOSBalance(d,t,machine,drawer,bal,accsales);
    end;
  end;
  DoTheCashup(0,1,1,1,0,1,0,d,dat,t,tim,
              machine,drawer,"",0,false,false,res,totin,totout,aitcode,aitsum,aitvat,aitqty,aitcnt,totsum,totvat,avatcode,avatsum,avatcnt,SMr,
              aitcodetot,aitcrncytot,aitsumtot,aitsumb1tot,aitnrtot,aitstartbaltot,aitstartbalb1tot,aitvattot,aitsumb1outtot,aitcnttot,
              atrsfitcodetot,atrsfitcrncytot,atrsfitsumtot,atrsfitsumb1tot,atrsfitnrtot,atrsfitstartbaltot,atrsfitstartbalb1tot,atrsfitvattot,atrsfitsumb1outtot,atrsfitcnttot,
              aitcodesum,aitcrncysum,aitsumsum,aitsumb1sum,aitnrsum,aitstartbalsum,aitstartbalb1sum,aitvatsum,aitsumb1outsum,aitcntsum,
              CountSMr,vstatussum,ReportingDate);
  GetPOSBalance = res;
  return;
end;

global
function Val GetAccSales(Date dat,Time tim,string machine,string drawer)
begin
  date lbdat;
  time lbtim;
  val bal,accsales;
  vector val Data;
  Integer i,cnt;
  array string 100 aPM,aIT,aMI,aSM,aCC,aDC,aBC,aRE;
  string 255 salesman;
  record CashierDefBlock CDb;
  
  BlockLoad(CDb);  
  lbdat = dat;
  lbtim = AddSeconds(tim,-1);
  if (CDb.StartFromLastPOSBal!=0) then begin
    FindTimeOfLastPOSBalance(lbdat,lbtim,machine,drawer,bal,accsales);
  end else begin
    if (FindStartTimeOfLastPOSSession(lbdat,lbtim,machine,drawer)==false) then begin
      FindTimeOfLastPOSBalance(lbdat,lbtim,machine,drawer,bal,accsales);
    end;
  end;
  
  lbtim = AddSeconds(lbtim,1);
  
  salesman = "";
//  outer.GetIVCashData(lbdat,lbtim,dat,tim,salesman,machine,Data,aPM,aIT,aMI,aSM,aCC,aDC,aBC,aRE);
//  outer.GetCashData(lbdat,lbtim,dat,tim,salesman,machine,Data);
//crashes if in and no halcust
    
  GetAccSales = accsales + Data["X2"] + Data["X4"] + Data["X5"] + Data["X7"] - Data["X9"] - Data["X36"] - Data["X38"] - Data["X40"] - Data["X13"];
  return;
end;

function val AddWriteOff(record CashVc CashWriteOffr,string pmcode,val t)
begin
  val res;
  row CashVc Cashrw;
  Integer i,rwcnt;
  
  res = t;
  rwcnt = MatRowCnt(CashWriteOffr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CashWriteOffr,i,Cashrw);
    if (Cashrw.PMCode==pmcode) then begin
      res = res - Cashrw.Amount;
    end;
  end;
  AddWriteOff = res;
  return;
end;

global
updating procedure RunTheCashupMn(string pmachine,string pdrawer,string ppmcode,Date pdat,Time ptim,Integer pdetail,Integer prestcash,Integer pposcash,Integer pslcash,Integer pinclroomtabs,Integer pinclrecpts)
BEGIN
  val bal,totin,totout,accsales;
  array string 20 aitcode;
  array val aitsum;
  array val aitvat;
  array val aitqty;
  array string 20 avatcode;
  array val avatsum;
  val totsum,totvat;
  Integer i,aitcnt,avatcnt;
  record ITVc ITr;
  record POSEventVc PEr;
  record POSEventVc lPEr;
  record CashVc CashINr;
  record CashVc CashWriteOffr;
  record CashVc CashOUTr;
  record SMVc CountSMr;
  row CashVc Cashrw;
  row SMVc SMrw;
  record POSBalanceVc POSBalancer;
  record POSBalanceVc oldPOSBalancer;
  record VATCodeBlock VATCodeBlockr;
  row VATCodeBlock VATCodeBlockrw;
  record SMVc SMr;
  array string 20 aitcodetot;
  array string 20 aitcrncytot;
  array val aitsumtot,aitsumb1tot,aitnrtot,aitstartbaltot,aitstartbalb1tot,aitvattot,aitsumb1outtot;
  Integer aitcnttot;
  array string 20 atrsfitcodetot;
  array string 20 atrsfitcrncytot;
  array val atrsfitsumtot,atrsfitsumb1tot,atrsfitnrtot,atrsfitstartbaltot,atrsfitstartbalb1tot,atrsfitvattot,atrsfitsumb1outtot;
  Integer atrsfitcnttot;
  Date ReportingDate;

  array string 20 aitcodesum;
  array string 20 aitcrncysum;
  array val aitsumsum,aitsumb1sum,aitnrsum,aitstartbalsum,aitstartbalb1sum,aitvatsum,aitsumb1outsum;
  Integer aitcntsum;
  val DBTTRSv;


  array string 20 amachine;
  array string 20 adrawer;
  Integer amdi,amdcnt;
  Integer rwcnt;
  Date dfr;
  Time tfr;
  string 30 machine,drawer;
  val t;
  Boolean addposbalf,storef;
  vector val vstatussum;
  record CashierDefBlock CDb;
  
  BlockLoad(CDb);  
  amdcnt = 0;
  BuildMachineDrawerCombinations(pmachine,pdrawer,amachine,adrawer,amdcnt);
  for (amdi=0; amdi<amdcnt; amdi=amdi+1) begin
    machine = amachine[amdi];
    drawer = adrawer[amdi];
    totsum = 0;
    totvat = 0;
    aitcnt = 0;
    while (LoopMain(ITr,1,true)) begin
      aitcode[aitcnt] = ITr.Code;    
      aitcnt = aitcnt + 1;
    end;
    BlockLoad(VATCodeBlockr);
    avatcnt = MatRowCnt(VATCodeBlockr);
    for (i=0; i<avatcnt; i=i+1) begin
      MatRowGet(VATCodeBlockr,i,VATCodeBlockrw);
      avatcode[i] = VATCodeBlockrw.VATCode;
    end;
    for (i=0; i<aitcnttot; i=i+1) begin
      aitcodetot[i] = "";
      aitsumtot[i] = 0;
      aitsumb1tot[i] = 0;
      aitnrtot[i] = 0;
      aitstartbaltot[i] = 0;
      aitstartbalb1tot[i] = 0;
      aitsumb1outtot[i] = 0;
      aitvattot[i] = 0;
    end;
    aitcnttot = 0;

    if (IsSessionOpen(machine,drawer,pdat,ptim)) then begin
      RecordNew(PEr);
      PEr.MachineName = machine;
      PEr.Drawer = drawer;
      PEr.Event = 2;
      PEr.TransDate = pdat;
      PEr.TransTime = AddSeconds(ptim,-1);
      storef = true;
      lPEr.Drawer = PEr.Drawer;
      if (ReadLastKey("Drawer",lPEr,1,true)) then begin
        if (lPEr.Drawer==PEr.Drawer) then begin
          if (lPEr.Event==PEr.Event) then begin
            storef = false;
          end;
        end;
      end;
      if (PEr.SerNr<=0) then begin
        PEr.SerNr = NextSerNr("POSEventVc",PEr.TransDate,-1,true,"");
      end;
      if (PEr.SerNr<=0) then begin
        storef = false;
      end;
      if (storef) then begin
        if (RecordInsert(PEr,true)) then begin
        end;
      end;
    end;

    dfr = pdat;
    tfr = ptim;

    
    if (CDb.StartFromLastPOSBal!=0) then begin
      FindTimeOfLastPOSBalance(dfr,tfr,machine,drawer,bal,accsales);
    end else begin
      if (FindStartTimeOfLastPOSSession(dfr,tfr,machine,drawer)==false) then begin
        FindTimeOfLastPOSBalance(dfr,tfr,machine,drawer,bal,accsales);
      end;
    end;

    DoTheCashup(pdetail,prestcash,pposcash,pslcash,pinclroomtabs,pinclrecpts,0,dfr,pdat,tfr,ptim,
                machine,drawer,ppmcode,0,false,false,bal,totin,totout,aitcode,aitsum,aitvat,aitqty,aitcnt,totsum,totvat,avatcode,avatsum,avatcnt,SMr,
                aitcodetot,aitcrncytot,aitsumtot,aitsumb1tot,aitnrtot,aitstartbaltot,aitstartbalb1tot,aitvattot,aitsumb1outtot,aitcnttot,
                atrsfitcodetot,atrsfitcrncytot,atrsfitsumtot,atrsfitsumb1tot,atrsfitnrtot,atrsfitstartbaltot,atrsfitstartbalb1tot,atrsfitvattot,atrsfitsumb1outtot,atrsfitcnttot,
                aitcodesum,aitcrncysum,aitsumsum,aitsumb1sum,aitnrsum,aitstartbalsum,aitstartbalb1sum,aitvatsum,aitsumb1outsum,aitcntsum,
                CountSMr,vstatussum,ReportingDate);
    RecordNew(CashINr);
    CashINr.TransDate = pdat;
    CashINr.TransTime = AddSeconds(ptim,-1);
    CashINr.Total = blankval;
    CashINr.SkipUpdatTime = 0;
    CashINr.MachineName = machine;
    CashINr.Drawer = drawer;
    CashINr.Event = 1;
    CashINr.OKFlag = 1;
    RecordCopy(CashOUTr,CashINr);
    CashOUTr.OKFlag = 1;
    CashOUTr.Event = 0;
    RecordCopy(CashWriteOffr,CashINr);
    CashWriteOffr.Event = 2;
      /*
    vg: the maintenance creates Cash Write Off instead of Cash out, may be it is necessary to change 
    logic for variables CashWriteOffr and CashOUTr? 
    */
  
    rwcnt = MatRowCnt(CountSMr);
    for (i = 0; i<rwcnt; i = i + 1) begin
      MatRowGet(CountSMr,i,SMrw);
      Cashrw.PMCode = SMrw.Objects;
      t = SMrw.CredVal - SMrw.DebVal;
      if (t!=0) then begin
        Cashrw.Amount = t;
        MatRowPut(CashWriteOffr,MatRowCnt(CashWriteOffr),Cashrw);
      end;
    end;
    if (MatRowCnt(CashWriteOffr)>0) then begin
      CashSumup(CashWriteOffr);
      CashWriteOffr.SerNr = NextSerNr("CashVc",CashWriteOffr.TransDate,-1,true,"");
      if (RecordInsert(CashWriteOffr,true)) then begin
      end;
    end;
    addposbalf = false;
    for (i=0;i<aitcnttot;i=i+1) begin
      t = aitsumb1tot[i];
      if (t==0) then begin
        t = aitsumtot[i];
      end;
      if (nonblank(aitcodetot[i])) or ((t - aitvattot[i])!=0) then begin
        addposbalf = true;
        Cashrw.PMCode = aitcodetot[i];
//        t = AddWriteOff(CashWriteOffr,Cashrw.PMCode,(aitsumtot[i] - aitvattot[i]) - (atrsfitsumtot[i] - atrsfitvattot[i]));
        if (aitsumb1tot[i]!=0) then begin
          t = AddWriteOff(CashWriteOffr,Cashrw.PMCode,(aitsumb1tot[i] - aitvattot[i]));
        end else begin
          t = AddWriteOff(CashWriteOffr,Cashrw.PMCode,(aitsumtot[i] - aitvattot[i]));
        end;
        if (Cashrw.PMCode=="DBTTRS") then begin
          DBTTRSv = DBTTRSv + t;
        end;
        if (t>0) then begin
          Cashrw.Amount = t;
          if (Cashrw.Amount!=0) then begin
            MatRowPut(CashOUTr,MatRowCnt(CashOUTr),Cashrw);
          end;
        end else begin
          Cashrw.Amount = -t;
          if (Cashrw.Amount!=0) then begin
            MatRowPut(CashINr,MatRowCnt(CashINr),Cashrw);
          end;
        end;
      end;
      if (atrsfitsumtot[i]!=0) then begin
        addposbalf = true;
      end;
    end;
    if (MatRowCnt(CashOUTr)>0) then begin
      CashSumup(CashOUTr);
      CashOUTr.SerNr = NextSerNr("CashVc",CashOUTr.TransDate,-1,true,"");
      if (RecordInsert(CashOUTr,true)) then begin
      end;
      addposbalf = true;
    end;
    if (MatRowCnt(CashINr)>0) then begin
      CashSumup(CashINr);
      CashINr.SerNr = NextSerNr("CashVc",CashINr.TransDate,-1,true,"");
      if (RecordInsert(CashINr,true)) then begin
      end;
      addposbalf = true;
    end;
    if (addposbalf) then begin
      RecordNew(POSBalancer);
      POSBalancer.TransDate = pdat;
      POSBalancer.TransTime = ptim;
      POSBalancer.MachineName = machine;
      POSBalancer.Drawer = drawer;
      POSBalancer.ReportingDate = ReportingDate;
//      POSBalancer.Bal = DBTTRSv + GetPOSBalance(POSBalancer.TransDate,POSBalancer.TransTime,POSBalancer.MachineName,POSBalancer.Drawer);
      POSBalancer.Bal = GetPOSBalance(POSBalancer.TransDate,POSBalancer.TransTime,POSBalancer.MachineName,POSBalancer.Drawer);
      POSBalancer.AccSales = GetAccSales(POSBalancer.TransDate,POSBalancer.TransTime,POSBalancer.MachineName,POSBalancer.Drawer);
      POSBalancer.SerNr = NextSerNr("POSBalanceVc",POSBalancer.TransDate,-1,true,"");
      
      if (RecordInsert(POSBalancer,true)) then begin
      end;
      RecordCopy(oldPOSBalancer,POSBalancer);
      POSBalancer.NLTransDone = 1;
      if (RecordUpdate(oldPOSBalancer,POSBalancer,true)==0) then begin
      end;
    end;
  end;

  RETURN;
END;

global
updating procedure CashupMn(record RcVc RepSpec)
begin
  if (TransInFiscal(CurrentDate)==false) then begin
    MessageBox(1075,"");
    goto LCashupMn;
  end;
  RunTheCashupMn(RepSpec.f1,RepSpec.f4,RepSpec.f5,RepSpec.d1,RepSpec.sStartTime,RepSpec.ArtMode,RepSpec.flags[1],RepSpec.flags[2],RepSpec.flags[3],RepSpec.flags[4],RepSpec.flags[8]);
LCashupMn:;  
  return;
end;


