external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure AddEuroCurncySmRow(var record SMVc,Date,string,string,string,string,val,Boolean,Boolean,var val,string,
                                      val,val,val,val,val,val,val);
external function Boolean GetAccName(string,var string,Integer);
external procedure MulM4ProcVal(val,val,var val);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure ConvertSalesAcc(var string,Integer);
external updating function Boolean SaveSim(record SMVc);
external updating function Boolean RecordAction_rlIVLOK(var record IVVc,Boolean,var Integer);

procedure AddIVSMAccrualRow(record SMVc SMp,record IVVc IVp,row IVVc IVrwp)
BEGIN
  record AutSimPerVc ASPr;
  row AutSimPerVc ASPrw;  
  Integer rwcnt,i;
  Date pdat;
  LongInt months,days;
  val totsum,totsum2,t;
  string 255 tstr;
  string 10 ivraccno;
  val trev,rs,tvat,t1;
  record AccBlock ARAccRec;
  Boolean dc1,dc2;

  ASPr.Code = IVrwp.PeriodCode;
  if (ReadFirstMain(ASPr,1,true)) then begin  
    switch (IVp.InvType) begin
      case kInvoiceTypeNormal:
        dc1 = true;
        dc2 = false;
      case kInvoiceTypeCashInvoiceReceiptPRT:
        dc1 = true;
        dc2 = false;
      case kInvoiceTypeCash:
        dc1 = true;
        dc2 = false;
      case kInvoiceTypeCredit:
        dc1 = false;
        dc2 = true;
      case kInvoiceTypeNormalSpecialSales:
        dc1 = true;
        dc2 = false;
      case kInvoiceTypeCreditSpecialSales:
        dc1 = false;
        dc2 = true;
      otherwise
        dc1 = true;
        dc2 = false;
    end;
    ivraccno = ASPr.PrelAcc;
    ConvertSalesAcc(ivraccno,IVp.ExportFlag);  
    BlockLoad(ARAccRec);      
    trev = IVrwp.Sum;
    MulVATIV(IVrwp.VATCode,trev,tvat,t1,IVp.InclVAT,IVp.NoTAXonVAT);
    if (IVp.InclVAT!=0) then begin
      if (ARAccRec.RevInclVAT==0) then begin trev = trev - tvat; end;
    end;
    if (IVp.InclVAT==0) then begin
      if (ARAccRec.RevInclVAT!=0) then begin trev = trev + tvat; end;
    end;  
    rs = MulRateToBase1(IVp.CurncyCode,trev,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
    rwcnt = MatRowCnt(ASPr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ASPr,i,ASPrw);
      if (blank(ASPrw.Months)) then begin
        months = 0;
      end else begin
        months = StringToLongInt(ASPrw.Months);
      end;
      if (blank(ASPrw.Days)) then begin
        days = 0;
      end else begin
        days = StringToLongInt(ASPrw.Days);
      end;
      pdat = IVp.TransDate;
      if (days!=0) then begin 
        pdat = AddDay(pdat,-GetDay(pdat) + 1);
      end;
      pdat = AddMonth(pdat,months);
      if (days>0) then begin pdat = AddDay(pdat,days-1); end;
      if (days<0) then begin pdat = AddDay(pdat,days); end;
      tstr = "";
      if (ASPrw.calc=="=") then begin
        t = rs - totsum;
      end else begin
        tstr = ASPrw.calc;
        if (Mid(tstr,len(tstr)-1,1)=="%") then begin
          tstr = Left(tstr,len(tstr)-1);
        end;
        MulM4ProcVal(StringToVal(tstr,M4Val),rs,t);
      end;
      if (GetAccName(ivraccno,tstr,60)) then begin end;
      AddEuroCurncySmRow(SMp,pdat,ivraccno,IVrwp.Objects,IVrwp.VATCode,tstr,t,false,dc1,totsum,IVp.CurncyCode,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,trev,blankval);
      if (GetAccName(IVrwp.SalesAcc,tstr,60)) then begin end;
      AddEuroCurncySmRow(SMp,pdat,IVrwp.SalesAcc,IVrwp.Objects,IVrwp.VATCode,tstr,t,false,dc2,totsum2,IVp.CurncyCode,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,trev,blankval);
    end;
  end;  
  RETURN;
END;

updating procedure AddIVRowToAccrualSM(record IVVc IVp,row IVVc IVrwp,Array string aAutSimCode,Array LongInt aSMSerNr,var Integer acnt)
BEGIN
  record SMVc oldSMr;
  record SMVc SMr;
  Integer i;
  
  for (i=0;i<acnt;i=i+1) begin
    if (aAutSimCode[i]==IVrwp.PeriodCode) then begin      
      SMr.SerNr = aSMSerNr[i];
      if (ReadFirstMain(SMr,1,true)) then begin  
        if (MatRowCnt(SMr)<250) then begin      
          RecordCopy(oldSMr,SMr);
          AddIVSMAccrualRow(SMr,IVp,IVrwp);  
          if (RecordUpdate(oldSMr,SMr,false)==0) then begin            
          end;
          goto LAddIVRowToAccrualSM;
        end else begin
          goto L88AddIVRowToAccrualSM;
        end; 
      end;        
    end;
  end;
L88AddIVRowToAccrualSM:;  
  RecordNew(SMr);
  AddIVSMAccrualRow(SMr,IVp,IVrwp);
  if (MatRowCnt(SMr)>0) then begin
    SMr.FileName = "IVVc";
    SMr.TransNr = IVp.SerNr;
    if (SaveSim(SMr)) then begin end;
    aSMSerNr[acnt] = SMr.SerNr;
    aAutSimCode[acnt] = IVrwp.PeriodCode;
    acnt = acnt + 1;
  end;  
LAddIVRowToAccrualSM:;  
  RETURN;
END;

updating procedure AddIVToAccrualSM(record IVVc IVp,Array string aAutSimCode,Array LongInt aSMSerNr,var Integer acnt)
BEGIN
  row IVVc IVrw;
  Integer i,rwcnt;

  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (nonblank(IVrw.PeriodCode)) then begin
      AddIVRowToAccrualSM(IVp,IVrw,aAutSimCode,aSMSerNr,acnt);
    end;
  end;  
  RETURN;
END;

global
updating procedure OKCOInvMn(record RcVc RepSpec)
BEGIN
  LongInt ifr,ito;
  record COIVVc COIVr;
  record IVVc IVr;
  Boolean found;
  Array string 10 aAutSimCode;
  Array LongInt aSMSerNr;
  Integer acnt;
  Integer flushcnt;
  /* Erik asked to remov from maintenances
  if (UserCanAction("InvOK",true)==false) then begin
    MessageBox(1274,StringFromStringSet(3,"InvOK"));
    goto LOKCOInvMn;
  end;
  */
  ifr = FirstInRange(RepSpec.f1,10);
  ito = LastInRange(RepSpec.f1,10);
  found = true;
  COIVr.Type = 0;
  COIVr.IVNr = ifr;
  while (LoopKey("IVNr",COIVr,2,found)) begin
    if (found) then begin
      if (COIVr.Type!=0) then begin
        found = false;
      end;
      if ((ito!=-1) and (COIVr.IVNr>ito)) then begin
        found = false;
      end;
    end;
    if (found) then begin
      IVr.SerNr = COIVr.IVNr;
      if (ReadFirstMain(IVr,1,true)) then begin
        if (IVr.OKFlag==0) then begin
          if (RecordAction_rlIVLOK(IVr,false,flushcnt)) then begin      
            AddIVToAccrualSM(IVr,aAutSimCode,aSMSerNr,acnt);
          end;
        end;  
      end;
    end;    
    UserTrace(IVr.SerNr,M4Long);        
  end;    
LOKCOInvMn:;
  RETURN;
END;
