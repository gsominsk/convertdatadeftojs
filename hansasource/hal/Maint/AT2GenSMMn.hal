external updating procedure AT2DeprStoreSimulation(record SMVc);
external procedure CheckFlush(var Integer,Integer);
external procedure AT2DeprCalculation(record RcVc,Integer,var val,var val,var val,var val,var val,var val,var val,var val,var val);
external function Boolean GetAccName(string,var string,Integer);
external procedure AddSMRow(record SMVc,Date,string,string,string,string,val,Boolean,Boolean ,var val);
external procedure GetCategoryNLAccounts(Integer,string,var string,var string,var string,var string,var string,var string,var string,var string,var string,var string,
                                         var string,var string,var string,var string);
external procedure SMSumup(var record SMVc);

external function Integer SMVc_AddRoundOffRow(var record SMVc,Boolean,Date,val,var val);

global
procedure PrintSMRecord(record SMVc SMr,Integer type)
BEGIN
  row SMVc SMrw;
  Integer i,rwcnt;
  string 255 dblstr;
 
  StartFormat(15);
  OutLongInt(0,0,SMr.SerNr,false);
  OutDate(100,0,SMr.TransDate,false);
  OutString(200,0,SMr.RefStr,false);
  switch (type)  begin
    case 1: dblstr = "DblAT2UnitVc";
  end;
  OutString(280,dblstr,SMr.Comment,false);
  OutString(1,0,SMr.Sign,true);
  EndFormat;
  
  rwcnt = MatRowCnt(SMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    StartFormat(15);
    OutString(20,0,SMrw.AccNumber,false);
    OutString(80,0,SMrw.Objects,false);
    OutString(170,0,SMrw.Comment,false);
    OutVal(380,0,SMrw.DebVal,M4Val,true);
    OutVal(460,0,SMrw.CredVal,M4Val,true);
    OutString(480,0,SMrw.VATCode,true);
    EndFormat;
  end;
  Black_Divider(300,480);
  StartFormat(15);
  OutVal(380,0,SMr.DSum,M4Val,true);
  OutVal(460,0,SMr.CSum,M4NegVal,true);
  EndFormat;    
  Gray_Divider(0,1);
  RETURN;
END;

global
updating procedure AT2DeprStoreSMRecord(record RcVc RepSpec,var record SMVc SMr,var string commentstr,record DBLockBlock DBLb,var Integer flushcnt)
BEGIN
  string 255 tstr;
  
  if (SMr.TransDate<=DBLb.TRLock) then begin 
    RecordNew(SMr);
    commentstr = "";
    goto LStoreSMRecord; 
  end;
  if (SMr.SerNr<=0) then begin
    SMr.SerNr = NextSerNr("SMVc",SMr.TransDate,-1,false,"");  
  end;
  if (SMr.SerNr>0) then begin
    SMSumup(SMr);

    SMr.Comment = USetStr(9649);
    SMr.Comment = SMr.Comment & ": " & RepSpec.sStartDate;
    SMr.Comment = SMr.Comment & ":" & RepSpec.sEndDate;
    if (RepSpec.flags[6]!=0) then begin
      SMr.Comment = SMr.Comment & " ";
      SMr.Comment = SMr.Comment & commentstr;
    end;
    if (RecordInsert(SMr,false)) then begin end;
    RecordNew(SMr);
    commentstr = "";
  end;
LStoreSMRecord:;  
  RETURN;
END;

global
procedure AddSMDprRowRows(record RcVc RepSpec,record AT2UnitVc ATUnitr,val invdprv,val invrevdprv,Integer mode,var record SMVc SMr,var string commentstr)
begin
  record AT2Vc ATCatr;
  string 10 costacc,depracc,assetacc,revdepr1acc,capcorr1acc;
  string 60 accname,objstr,asset1objstr,depr1objstr,cost1objstr,asset2objstr,depr2objstr,cost2objstr,commonobjstr,AT2Class,revdepr1objects,capcorr1objects;
  Date td;
  val TotSum,t;
  record DBLockBlock DBLb;
  LongInt oldnr;
  Integer flushcnt;
  val linvdprv;
  string 255 tstr;
  
  BlockLoad(DBLb);
  if (invdprv!=0) then begin
    ATCatr.Code = ATUnitr.AT2Code;
    if (ReadFirstMain(ATCatr,1,true)) then begin    end;
    AT2Class = ATUnitr.AT2Class;
    if (blank(AT2Class)) then begin
      AT2Class = ATCatr.AT2Class;
    end;    
    if (nonblank(AT2Class)) then begin
      if (RepSpec.flags[6]!=0) then begin
        oldnr = SMr.SerNr;
        RecordNew(SMr);
        SMr.SerNr = oldnr + 1;
      end;
      GetCategoryNLAccounts(RepSpec.flags[1],AT2Class,assetacc,costacc,depracc,commonobjstr,asset1objstr,depr1objstr,cost1objstr,asset2objstr,depr2objstr,cost2objstr,revdepr1acc,revdepr1objects,capcorr1acc,capcorr1objects);
      if (blank(costacc) or blank(depracc)) then begin
        goto LAddSMDprRowRows;
      end;
      linvdprv = invdprv;
      if (nonblank(revdepr1acc)) then begin
        linvdprv = linvdprv - invrevdprv;
      end;
      objstr = commonobjstr;
      if ((nonblank(objstr)) and (nonblank(ATUnitr.Objects))) then begin
        objstr = objstr & ",";
      end;
      objstr = objstr & ATUnitr.Objects;   
      if (RepSpec.flags[1]==0) then begin
        if ((nonblank(objstr)) and (nonblank(cost1objstr))) then begin
          objstr = objstr & ",";
        end;
        objstr = objstr & cost1objstr;      
      end else begin
        if ((nonblank(objstr)) and (nonblank(cost2objstr))) then begin
          objstr = objstr & ",";
        end;
        objstr = objstr & cost2objstr;      
      end;
      if (GetAccName(costacc,accname,60)) then begin
        AddSMRow(SMr,td,costacc,objstr,"",accname,linvdprv,true,true,TotSum);        
      end;    
      if (GetAccName(depracc,accname,60)) then begin
        objstr = commonobjstr;
        if ((nonblank(objstr)) and (nonblank(ATUnitr.Objects))) then begin
          objstr = objstr & ",";
        end;
        objstr = objstr & ATUnitr.Objects;      
        if (RepSpec.flags[1]==0) then begin
          if ((nonblank(objstr)) and (nonblank(depr1objstr))) then begin
            objstr = objstr & ",";
          end;
          objstr = objstr & depr1objstr;      
        end else begin
          if ((nonblank(objstr)) and (nonblank(depr2objstr))) then begin
            objstr = objstr & ",";
          end;
          objstr = objstr & depr2objstr;      
        end;
        AddSMRow(SMr,td,depracc,objstr,"",accname,linvdprv,true,false,TotSum);        
      end;  
      if (invrevdprv!=0) then begin
        if (GetAccName(revdepr1acc,accname,60)) then begin
          objstr = commonobjstr;
          if ((nonblank(objstr)) and (nonblank(ATUnitr.Objects))) then begin
            objstr = objstr & ",";
          end;
          objstr = objstr & ATUnitr.Objects;      
          if (RepSpec.flags[1]==0) then begin
            if ((nonblank(objstr)) and (nonblank(revdepr1objects))) then begin
              objstr = objstr & ",";
            end;
            objstr = objstr & revdepr1objects;      
          end else begin
            if ((nonblank(objstr)) and (nonblank(revdepr1objects))) then begin
              objstr = objstr & ",";
            end;
            objstr = objstr & revdepr1objects;      
          end;
          AddSMRow(SMr,td,revdepr1acc,objstr,"",accname,invrevdprv,true,false,TotSum);        
        end;
        if (GetAccName(capcorr1acc,accname,60)) then begin
          objstr = commonobjstr;
          if ((nonblank(objstr)) and (nonblank(ATUnitr.Objects))) then begin
            objstr = objstr & ",";
          end;
          objstr = objstr & ATUnitr.Objects;      
          if (RepSpec.flags[1]==0) then begin
            if ((nonblank(objstr)) and (nonblank(capcorr1objects))) then begin
              objstr = objstr & ",";
            end;
            objstr = objstr & capcorr1objects;      
          end else begin
            if ((nonblank(objstr)) and (nonblank(capcorr1objects))) then begin
              objstr = objstr & ",";
            end;
            objstr = objstr & capcorr1objects;      
          end;
          AddSMRow(SMr,td,capcorr1acc,objstr,"",accname,invrevdprv,true,true,TotSum);        
        end;
      end;
      
     if (TotSum!=0) then begin
        if (SMVc_AddRoundOffRow(SMr,true,td,TotSum,TotSum)==0) then begin
        end;
      end;
      SMr.TransDate = RepSpec.d1;
      if (blankdate(SMr.TransDate)) then begin
        SMr.TransDate = CurrentDate;
      end;
      if (RepSpec.flags[6]!=0) then begin      
        SMr.Comment = ATUnitr.InventoryNr;
        if (SMr.SerNr<=0) then begin
          SMr.SerNr = NextSerNr("SMVc",SMr.TransDate,-1,false,"");  
        end;
        if (mode==0) then begin
          if (MatRowCnt(SMr)>0) then begin
            if (SMr.SerNr>0) then begin
              SMSumup(SMr);             
              SMr.Comment = USetStr(9649);
              SMr.Comment = SMr.Comment & ": " & RepSpec.sStartDate;
              SMr.Comment = SMr.Comment & ":" & RepSpec.sEndDate;
              if (RepSpec.flags[6]!=0) then begin
                SMr.Comment = SMr.Comment & " ";
                SMr.Comment = SMr.Comment & ATUnitr.InventoryNr;
              end;
              qupdating.AT2DeprStoreSimulation(SMr);
//              if (RecordInsert(SMr,false)) then begin end;
            end;  
          end;  
        end;  
        if (mode==2) then begin      
          if (MatRowCnt(SMr)>0) then begin 
            SMSumup(SMr);             
            PrintSMRecord(SMr,1);
          end;  
        end;  
      end else begin
        if (mode==0) then begin
          if (MatRowCnt(SMr)>=296) then begin
            commentstr = commentstr & ATUnitr.InventoryNr;
            qupdating.AT2DeprStoreSMRecord(RepSpec,SMr,commentstr,DBLb,flushcnt);
          end;
        end;
      end;
    end;  
  end;
LAddSMDprRowRows:;
  RETURN;
END;

global
updating procedure AT2GenSMMn(var record RcVc RepSpec)
BEGIN    
  val totinitdprval,totpurchval,totstartval,totdprbef,totdprv,totresval,totwrofsum,totrevbef,totthestartval;
  
  RepSpec.ArtMode = 1;
  AT2DeprCalculation(RepSpec,0,totinitdprval,totpurchval,totstartval,totdprbef,totdprv,totresval,totwrofsum,totrevbef,totthestartval);

  RETURN;
END;

