external function Integer GetIntYc(Date);
external procedure CheckFlush(var Integer,Integer);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external procedure AddEuroCurncyNomARTrRow(record TRVc,string,string,string,string,val,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,string,LongInt,Integer,val,Date,LongInt,Boolean,string,string,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external function Boolean GetAccName(string,var string,Integer);
external procedure AddEuroCurncyNomTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,val,LongInt,Boolean,string,string,string,Integer);
external procedure GetAccBalance(string,string,Date,record ObjBalVc,Integer,Integer,Integer,string,Integer,var val);
external function Boolean GetObjBal(string,string,var record ObjBalVc);
external updating procedure SaveTrans(record TRVc);
external procedure TRSumup(var record TRVc,var val);
external procedure MockObjFromVATCode(string,var string);
external function Boolean AccInRange(string,string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);

updating procedure SaveNLRateTrans(Date d1,record TRVc gTRp,LongInt nrseries,var Integer flushcnt)
BEGIN
  Integer rwcnt;
  val v;
  
  rwcnt = MatRowCnt(gTRp);
  if (rwcnt>0) then begin
    if (nonblankdate(d1)) then begin
      gTRp.TransDate = d1;
    end else begin
      gTRp.TransDate = CurrentDate;
    end;
    gTRp.Comment = USetStr(36300);
    gTRp.IntYc = GetIntYc(gTRp.TransDate);
    gTRp.RegDate = CurrentDate;
    gTRp.Number = NextSerNr("TRVc",gTRp.TransDate,nrseries,false,"");
    TRSumup(gTRp,v);
    SaveTrans(gTRp);
    CheckFlush(flushcnt,10);
    RecordNew(gTRp);
  end;
  RETURN;
END;

updating procedure NLRateMnOld(record RcVc RepSpec)
BEGIN
  Integer rwcnt;
  val Bb,Cb,Db,Diff,Diff2;
  val fr,to1,to2,br1,br2;
  record AccVc Accr;
  Boolean Vws;
  Boolean testf;
  string 255 RU,tstr;
  record ObjBalVc ObjBalr;
  record ObjBalVc CurObjBalr;
  Boolean Objbals;
  Boolean CurObjbals;
  record NLRateBlock NLRb;
  val DiffSum;
  val totsum,d,bv;
  val temp,baserate1,baserate2;
  string 20 curncy;
  record TRVc gTRp;
  Date nild;
  record BaseCurBlock BCb;
  Integer flushcnt;
  
  bv = blankval;
  BlockLoad(BCb);
  BlockLoad(NLRb);
  if (blankdate(RepSpec.d1)) then begin
    RepSpec.d1 = CurrentDate;
  end;
  GetFullCurncyRate(curncy,RepSpec.d1,temp,temp,temp,baserate1,baserate2);
  RecordNew(gTRp);
  Accr.AccNumber = "";
  Vws = true;
  while (LoopMain(Accr,1,Vws)) begin
    testf = true;
    if (nonblank(RepSpec.AccStr)) then begin
      if (AccInRange(Accr.AccNumber,RepSpec.AccStr)==false) then begin
        testf = false;
        goto L77;
      end;
    end;
    if (Accr.GroupAcc!=0) then begin goto L77; end;
    if (blank(Accr.Curncy)) then begin goto L77; end;
    if (Accr.Curncy==BCb.BaseCur1) then begin goto L77; end;
    if (Accr.Curncy==BCb.BaseCur2) then begin goto L77; end;
    if (Accr.AccType>=3) then begin goto L77; end;
    MockObjFromVATCode(Accr.Curncy,RU);
    Objbals = GetObjBal(Accr.AccNumber,"",ObjBalr);
    CurObjbals = GetObjBal(Accr.AccNumber,RU,CurObjBalr);
    if ((Accr.AccType==0) or (Accr.AccType==1) or (Accr.AccType==2)) then begin
      GetAccBalance(Accr.AccNumber,"",RepSpec.d1,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,0,RepSpec.CurncyCode,0,Bb);
      GetAccBalance(Accr.AccNumber,"",RepSpec.d1,CurObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,2,RepSpec.CurncyCode,0,Cb);
    end;
    if (testf) then begin
      GetFullCurncyRate(Accr.Curncy,RepSpec.d1,fr,to1,to2,br1,br2);
      Db = MulRateToBase1(Accr.Curncy,Cb,fr,to1,to2,br1,br2,DefaultCurRoundOff);
      Diff = Db - Bb;
      if (NLRb.Limit!=0) then begin          
        d = Diff;
        if (d<0) then begin d = -d; end;
        if (d<NLRb.Limit) then begin goto L40; end;
      end;
      DiffSum = DiffSum + Diff;        
      rwcnt = MatRowCnt(gTRp);
      if (rwcnt>=199) then begin
        SaveNLRateTrans(RepSpec.d1,gTRp,-1,flushcnt);
      end;
      if (Diff>=0) then begin
        AddEuroCurncyNomTrRow(gTRp,Accr.AccNumber,"","",Accr.Comment,Diff,false,true,totsum, Accr.Curncy,bv,bv,bv,baserate1,baserate2,0,bv,bv,-1,false,"","","",0);
        if (GetAccName(NLRb.RateGainAcc,tstr,60)==false) then begin goto L40; end;
        AddEuroTrRow(gTRp,NLRb.RateGainAcc,"","",tstr,Diff,baserate1,baserate2,false,false,totsum,false,"","","");
      end else begin
        Diff = -Diff;
        AddEuroCurncyNomTrRow(gTRp,Accr.AccNumber,"","",Accr.Comment,Diff,false,false,totsum,Accr.Curncy,bv,bv,bv,baserate1,baserate2,0,bv,bv,-1,false,"","","",0);

//        Diff2 = MulRateToBase2(BCb.BaseCur1,Diff,bv,bv,bv,baserate1,baserate2,DefaultCurRoundOff);
//        AddEuroCurncyNomARTrRow(gTRp,Accr.AccNumber,"","",Accr.Comment,Diff,Diff2,false,false,totsum,Accr.Curncy,bv,bv,bv,baserate1,baserate2,Diff,bv,"",-1,0,bv,nild,-1,"","","");
        
        if (GetAccName(NLRb.RateLossAcc,tstr,60)==false) then begin goto L40; end;
        AddEuroTrRow(gTRp,NLRb.RateLossAcc,"","",tstr,Diff,baserate1,baserate2,false,true,totsum,false,"","","");
      end;
L40:;
    end;
L77:;
    UserTrace(Accr.AccNumber,M4Code);            
  end;  
  SaveNLRateTrans(RepSpec.d1,gTRp,-1,flushcnt);
  RETURN;
END;

function Boolean IsNotUedARPrepayment(LongInt TransNr)
begin
  Boolean res;
  record IPVc IPr;
  row IPVc IPrw;
  record ARPayHistVc ARPHr;
  Boolean found;
  Integer i,rwcnt;
  
  IPr.SerNr = TransNr;
  if (ReadFirstMain(IPr,1,true)) then begin
    rwcnt = MatRowCnt(IPr);
    for (i=0;i<rwcnt;i=i+1) begin
    end;
  end;
  if (found) then begin
    ARPHr.SerNr = TransNr;
    while (LoopKey("SerNr",ARPHr,1,found)) begin
      if (ARPHr.SerNr!=TransNr) then begin found = false; end;
      if (found) then begin
      end;
    end;
  end;
  IsNotUedARPrepayment = res;
  return;
end;

updating procedure FindAccountRateDiffrence(string accnumber,Integer type,string basecur1,string basecur2,Date d1,val limit,LongInt nrseries,var record TRVc gTRp,var record TRVc grevTRp,var Integer flushcnt,
                                            string RateGainAcc,string RateLossAcc,val baserate1,val baserate2,Boolean basecur2f)
BEGIN
  Boolean TrHs,testf;
  record MainVc Mainr;
  record TRVc TRr;
  row TRVc TRrw;
  Integer i,rwcnt;
  Integer trcnt;  
  val fr,to1,to2,br1,br2;
  val curv,basev,basevd1,d,diff,diff2;
  record AccVc Accr;
  val totsum,bv,openv,openbasev;
  string 255 tstr;
  Date td,nild;
  record BaseCurBlock BCb;
  record ARVc ARr;
  record APVc APr;
  
  BlockLoad(BCb);  
  Mainr.AccNumber = accnumber;
//  Mainr.TransDate = accnumber;
  TrHs = true;
  while (LoopMain(Mainr,1,TrHs)) begin
    if (Mainr.AccNumber!=accnumber) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;      
/*          
      if (testf) then begin
        switch (Mainr.IntYc) begin
          case OPYc://On acount ? 
            testf = false;
          case IPYc://On acount ? 
            testf = false;
          case IVYc:
            ARr.InvoiceNr = Mainr.TransNr;
            if (ReadFirstMain(ARr,1,true)==false) then begin
              testf = false;
            end;
            openv = ARr.RVal; 
            openbasev = ARr.BookRVal; 
          case VIYc:
            APr.SerNr = Mainr.TransNr;
            if (ReadFirstMain(APr,1,true)==false) then begin
              testf = false;
            end;
            openv = -APr.RVal; 
            openbasev = -APr.BookRVal; 
        end;
      end;
*/                    
      if (nonblankdate(d1)) then begin
        if (TRr.TransDate>d1) then begin testf = false; end;
      end;
      if (testf) then begin
        TRr.Number = Mainr.TransNr;
        TRr.IntYc = Mainr.IntYc;
        if (ReadFirstMain(TRr,2,true)) then begin
          rwcnt = MatRowCnt(TRr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(TRr,i,TRrw);
            if ((TRrw.ovst==0) and (TRrw.stp==1)) then begin
              testf = true;
              if (TRrw.AccNumber!=accnumber) then begin testf = false; end;
              if (basecur2f==false) then begin
                if (TRrw.Curncy==basecur1) then begin testf = false; end;
                if (TRrw.Curncy==basecur2) then begin testf = false; end;
              end;
              if (testf) then begin
                curv = TRrw.CurDebVal - TRrw.CurCredVal;
                if (curv==0) then begin
                  if (basecur2f) then begin
                    curv = TRrw.DebVal2 - TRrw.CredVal2;
                  end;
                end;
                if (curv!=0) then begin
                  curv = curv - openv;
                end;
                basev = TRrw.DebVal - TRrw.CredVal;
                basev = basev - openbasev;
                if (curv!=0) then begin
                  GetFullCurncyRate(TRrw.Curncy,d1,fr,to1,to2,br1,br2);
                  basevd1 = MulRateToBase1(TRrw.Curncy,curv,fr,to1,to2,br1,br2,DefaultCurRoundOff);
                  diff = basev - basevd1;
                  if (limit!=0) then begin          
                    d = diff;
                    if (d<0) then begin d = -d; end;
                    if (d<limit) then begin goto LSKIPROW; end;
                  end;

                  if (diff!=0) then begin
                    Accr.AccNumber = accnumber;
                    if (ReadFirstMain(Accr,1,true)) then begin
                      trcnt = MatRowCnt(gTRp);
                      if (trcnt>=399) then begin
                        SaveNLRateTrans(d1,gTRp,nrseries,flushcnt);
                        td = d1;
                        td.month = td.month + 1;
                        td.day = 1;
                        SaveNLRateTrans(td,grevTRp,nrseries,flushcnt);
                      end;
                      if (diff>=0) then begin

                        diff2 = MulRateToBase2(BCb.BaseCur1,diff,bv,bv,bv,baserate1,baserate2,DefaultCurRoundOff);
                        AddEuroCurncyNomARTrRow(gTRp,Accr.AccNumber,"","",Accr.Comment,diff,diff2,true,false,totsum,TRrw.Curncy,bv,bv,bv,baserate1,baserate2,0,bv,"",-1,0,bv,nild,-1,false,"","","");


  //                      AddEuroCurncyNomTrRow(gTRp,Accr.AccNumber,"","",Accr.Comment,diff,true,true,totsum,TRrw.Curncy,bv,bv,bv,baserate1,baserate2,0,bv,bv,-1,false,"","","",0);
  //                      AddEuroTrRow(gTRp,Accr.AccNumber,"","",Accr.Comment,diff,baserate1,baserate2,true,true,totsum,false,"","","");
                        if (GetAccName(RateLossAcc,tstr,60)==false) then begin goto LSKIPROW; end;
                        AddEuroTrRow(gTRp,RateLossAcc,"","",tstr,diff,baserate1,baserate2,true,true,totsum,false,"","","");
                        if (type==1) then begin
                          AddEuroTrRow(grevTRp,Accr.AccNumber,"","",Accr.Comment,diff,baserate1,baserate2,true,true,totsum,false,"","","");
                          if (GetAccName(RateGainAcc,tstr,60)==false) then begin goto LSKIPROW; end;
                          AddEuroTrRow(grevTRp,RateGainAcc,"","",tstr,diff,baserate1,baserate2,true,false,totsum,false,"","","");
                        end;
                      end else begin
                        diff = -diff;
                        diff2 = MulRateToBase2(BCb.BaseCur1,diff,bv,bv,bv,baserate1,baserate2,DefaultCurRoundOff);
                        AddEuroCurncyNomARTrRow(gTRp,Accr.AccNumber,"","",Accr.Comment,diff,diff2,true,true,totsum,TRrw.Curncy,bv,bv,bv,baserate1,baserate2,0,bv,"",-1,0,bv,nild,-1,false,"","","");
                      
  //                      AddEuroCurncyNomTrRow(gTRp,Accr.AccNumber,"","",Accr.Comment,diff,true,false,totsum,TRrw.Curncy,bv,bv,bv,baserate1,baserate2,0,bv,bv,-1,false,"","","",0);
  //                      AddEuroTrRow(gTRp,Accr.AccNumber,"","",Accr.Comment,diff,baserate1,baserate2,true,false,totsum,false,"","","");
                        if (GetAccName(RateGainAcc,tstr,60)==false) then begin goto LSKIPROW; end;
                        AddEuroTrRow(gTRp,RateGainAcc,"","",tstr,diff,baserate1,baserate2,true,false,totsum,false,"","","");
                        if (type==1) then begin
                          AddEuroTrRow(grevTRp,Accr.AccNumber,"","",Accr.Comment,diff,baserate1,baserate2,true,false,totsum,false,"","","");
                          if (GetAccName(RateLossAcc,tstr,60)==false) then begin goto LSKIPROW; end;
                          AddEuroTrRow(grevTRp,RateLossAcc,"","",tstr,diff,baserate1,baserate2,true,true,totsum,false,"","","");
                        end;
                      end;
                    end;
                  end;

                end;
              end;
            end;
LSKIPROW:;          
          end;
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure NLRate(record RcVc RepSpec)
BEGIN
  record NLRateBlock NLRb;
  record BaseCurBlock BCb;
  val temp,baserate1,baserate2;
  Boolean TrHs;
  record NLRateVc NLRater;
  row NLRateVc NLRaterw;
  Integer i,rwcnt;
  Integer flushcnt;
  string 10 frcc,tocc;
  string 10 RateGainAcc,RateLossAcc;
  string 20 curncy;
  record TRVc gTRp;
  record TRVc grevTRp;
  Date td;

  RecordNew(gTRp);
  RecordNew(grevTRp);
  BlockLoad(NLRb);
  BlockLoad(BCb);
  if (blankdate(RepSpec.d1)) then begin
    RepSpec.d1 = CurrentDate;
  end;
  GetFullCurncyRate(curncy,RepSpec.d1,temp,temp,temp,baserate1,baserate2);
  frcc = FirstInRange(RepSpec.f1,10);
  tocc = LastInRange(RepSpec.f1,10);
  NLRater.Code = frcc;
  TrHs = true;
  while (LoopMain(NLRater,1,TrHs)) begin
    if (nonblank(RepSpec.f1)) then begin 
      if (NLRater.Code>tocc) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RateGainAcc = NLRater.RateGainAcc;
      if (blank(RateGainAcc)) then begin RateGainAcc = NLRb.RateGainAcc; end;
      RateLossAcc = NLRater.RateLossAcc;
      if (blank(RateLossAcc)) then begin RateLossAcc = NLRb.RateLossAcc; end;
      rwcnt = MatRowCnt(NLRater);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(NLRater,i,NLRaterw);
        FindAccountRateDiffrence(NLRaterw.AccNumber,NLRaterw.Type,BCb.BaseCur1,BCb.BaseCur2,RepSpec.d1,NLRater.Limit,NLRater.NrSeries,gTRp,grevTRp,flushcnt,RateGainAcc,RateLossAcc,baserate1,baserate2,RepSpec.flags[0]!=0);
      end;
    end;
  end;
  SaveNLRateTrans(RepSpec.d1,gTRp,NLRater.NrSeries,flushcnt);
  td = RepSpec.d1;
  td.month = td.month + 1;
  td.day = 1;
  SaveNLRateTrans(td,grevTRp,NLRater.NrSeries,flushcnt);
  RETURN;
END;

global
updating procedure NLRateMn(record RcVc RepSpec)
BEGIN
  if (CountRecords("NLRateVc")>0) then begin
    NLRate(RepSpec);
  end else begin
    NLRateMnOld(RepSpec);
  end;
  RETURN;
END;
