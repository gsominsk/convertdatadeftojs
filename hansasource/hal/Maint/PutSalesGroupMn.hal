external function string 20 FindJobCustomerCode(record JobVc);

updating procedure PutSalesGroup_CUVc()
BEGIN
  Integer flushcnt;
  Boolean found,testf;
  record CUVc CUr;
  record CUVc oldCUr;
  record UserVc Userr;
  
  found = true;
  while (LoopMain(CUr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(CUr.SalesGroup)) then begin testf = false; end; 
      if (testf) then begin
        RecordCopy(oldCUr,CUr);
        Userr.Code = CUr.SalesMan;
        if (ReadFirstMain(Userr,1,true)) then begin
        end;
        CUr.SalesGroup = Userr.SalesGroup;
        if (RecordUpdate(oldCUr,CUr,false)==0) then begin end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure PutSalesGroup_IVVc()
BEGIN
  Integer flushcnt;
  Boolean found,testf;
  record CUVc CUr;
  record IVVc IVr;
  record IVVc oldIVr;
  record UserVc Userr;
  
  found = true;
  while (LoopMain(IVr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(IVr.SalesGroup)) then begin testf = false; end; 
      if (testf) then begin
        CUr.Code = IVr.CustCode;
        if (ReadFirstMain(CUr,1,true)) then begin
          RecordCopy(oldIVr,IVr);
          if (blank(IVr.SalesGroup)) then begin 
            IVr.SalesGroup = CUr.SalesGroup;
            if (blank(IVr.SalesGroup)) then begin
              Userr.Code = IVr.SalesMan;
              if (ReadFirstMain(Userr,1,true)) then begin
              end;
              IVr.SalesGroup = Userr.SalesGroup;
            end;
            if (RecordUpdate(oldIVr,IVr,false)==0) then begin end;
          end; 
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure PutSalesGroup_IntIVVc()
BEGIN
  Integer flushcnt;
  Boolean found,testf;
  record UserVc Userr;
  record IntIVVc IntIVr;
  record IntIVVc oldIntIVr;
  
  found = true;
  while (LoopMain(IntIVr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(IntIVr.SalesGroup)) then begin testf = false; end; 
      if (testf) then begin
        Userr.Code = IntIVr.SalesMan;
        if (ReadFirstMain(Userr,1,true)) then begin
          RecordCopy(oldIntIVr,IntIVr);
          if (blank(IntIVr.SalesGroup)) then begin 
            IntIVr.SalesGroup = Userr.SalesGroup;
            if (RecordUpdate(oldIntIVr,IntIVr,false)==0) then begin end;
          end; 
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure PutSalesGroup_VATIVVc()
BEGIN
  Integer flushcnt;
  Boolean found,testf;
  record CUVc CUr;
  record VATIVVc VATIVr;
  record VATIVVc oldVATIVr;
  record UserVc Userr;
  
  found = true;
  while (LoopMain(VATIVr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(VATIVr.SalesGroup)) then begin testf = false; end; 
      if (testf) then begin
        CUr.Code = VATIVr.CustCode;
        if (ReadFirstMain(CUr,1,true)) then begin
          RecordCopy(oldVATIVr,VATIVr);
          if (blank(VATIVr.SalesGroup)) then begin 
            VATIVr.SalesGroup = CUr.SalesGroup;
            if (blank(VATIVr.SalesGroup)) then begin
              Userr.Code = VATIVr.SalesMan;
              if (ReadFirstMain(Userr,1,true)) then begin
              end;
              VATIVr.SalesGroup = Userr.SalesGroup;
            end;
            if (RecordUpdate(oldVATIVr,VATIVr,false)==0) then begin end;
          end; 
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure PutSalesGroup_FEIVVc()
BEGIN
  Integer flushcnt;
  Boolean found,testf;
  record CUVc CUr;
  record FEIVVc FEIVr;
  record FEIVVc oldFEIVr;
  record UserVc Userr;
  
  found = true;
  while (LoopMain(FEIVr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(FEIVr.SalesGroup)) then begin testf = false; end; 
      if (testf) then begin
        CUr.Code = FEIVr.CustCode;
        if (ReadFirstMain(CUr,1,true)) then begin
          RecordCopy(oldFEIVr,FEIVr);
          if (blank(FEIVr.SalesGroup)) then begin 
            FEIVr.SalesGroup = CUr.SalesGroup;
            if (blank(FEIVr.SalesGroup)) then begin
              Userr.Code = FEIVr.SalesMan;
              if (ReadFirstMain(Userr,1,true)) then begin
              end;
              FEIVr.SalesGroup = Userr.SalesGroup;
            end;
            if (RecordUpdate(oldFEIVr,FEIVr,false)==0) then begin end;
          end; 
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure PutSalesGroup_PRVc()
BEGIN
  Integer flushcnt;
  Boolean found,testf;
  record CUVc CUr;
  record PRVc PRr;
  record PRVc oldPRr;
  record UserVc Userr;
  
  found = true;
  while (LoopMain(PRr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(PRr.SalesGroup)) then begin testf = false; end; 
      if (testf) then begin
        CUr.Code = PRr.CustCode;
        if (ReadFirstMain(CUr,1,true)) then begin
          RecordCopy(oldPRr,PRr);
          if (blank(PRr.SalesGroup)) then begin 
            PRr.SalesGroup = CUr.SalesGroup;
            if (blank(PRr.SalesGroup)) then begin
              Userr.Code = PRr.PrSalesMan;
              if (ReadFirstMain(Userr,1,true)) then begin
              end;
              PRr.SalesGroup = Userr.SalesGroup;
            end;
            if (RecordUpdate(oldPRr,PRr,false)==0) then begin end;
          end; 
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure PutSalesGroup_PIVc()
BEGIN
  Integer flushcnt;
  Boolean found,testf;
  record CUVc CUr;
  record PIVc PIr;
  record PIVc oldPIr;
  
  found = true;
  while (LoopMain(PIr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(PIr.SalesGroup)) then begin testf = false; end; 
      if (testf) then begin
        CUr.Code = PIr.VECode;
        if (ReadFirstMain(CUr,1,true)) then begin
          RecordCopy(oldPIr,PIr);
          if (blank(PIr.SalesGroup)) then begin 
            PIr.SalesGroup = CUr.SalesGroup;
            if (RecordUpdate(oldPIr,PIr,false)==0) then begin end;
          end; 
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure PutSalesGroup_VIVc()
BEGIN
  Integer flushcnt;
  Boolean found,testf;
  record CUVc CUr;
  record VIVc VIr;
  record VIVc oldVIr;
  record UserVc Userr;
  
  found = true;
  while (LoopMain(VIr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(VIr.SalesGroup)) then begin testf = false; end; 
      if (testf) then begin
        CUr.Code = VIr.VECode;
        if (ReadFirstMain(CUr,1,true)) then begin
          RecordCopy(oldVIr,VIr);
          if (blank(VIr.SalesGroup)) then begin 
            VIr.SalesGroup = CUr.SalesGroup;
            if (blank(VIr.SalesGroup)) then begin
              Userr.Code = VIr.SalesMan;
              if (ReadFirstMain(Userr,1,true)) then begin
              end;
              VIr.SalesGroup = Userr.SalesGroup;
            end;
            if (RecordUpdate(oldVIr,VIr,false)==0) then begin end;
          end; 
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure PutSalesGroup_FEVIVc()
BEGIN
  Integer flushcnt;
  Boolean found,testf;
  record CUVc CUr;
  record FEVIVc FEVIr;
  record FEVIVc oldFEVIr;
  record UserVc Userr;
  
  found = true;
  while (LoopMain(FEVIr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(FEVIr.SalesGroup)) then begin testf = false; end; 
      if (testf) then begin
        CUr.Code = FEVIr.VECode;
        if (ReadFirstMain(CUr,1,true)) then begin
          RecordCopy(oldFEVIr,FEVIr);
          if (blank(FEVIr.SalesGroup)) then begin 
            FEVIr.SalesGroup = CUr.SalesGroup;
            if (blank(FEVIr.SalesGroup)) then begin
              Userr.Code = FEVIr.SalesMan;
              if (ReadFirstMain(Userr,1,true)) then begin
              end;
              FEVIr.SalesGroup = Userr.SalesGroup;
            end;
            if (RecordUpdate(oldFEVIr,FEVIr,false)==0) then begin end;
          end; 
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure PutSalesGroup_VATVIVc()
BEGIN
  Integer flushcnt;
  Boolean found,testf;
  record CUVc CUr;
  record VATVIVc VATVIr;
  record VATVIVc oldVATVIr;
  record UserVc Userr;
  
  found = true;
  while (LoopMain(VATVIr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(VATVIr.SalesGroup)) then begin testf = false; end; 
      if (testf) then begin
        CUr.Code = VATVIr.VECode;
        if (ReadFirstMain(CUr,1,true)) then begin
          RecordCopy(oldVATVIr,VATVIr);
          if (blank(VATVIr.SalesGroup)) then begin 
            VATVIr.SalesGroup = CUr.SalesGroup;
            if (blank(VATVIr.SalesGroup)) then begin
              Userr.Code = VATVIr.SalesMan;
              if (ReadFirstMain(Userr,1,true)) then begin
              end;
              VATVIr.SalesGroup = Userr.SalesGroup;
            end;
            if (RecordUpdate(oldVATVIr,VATVIr,false)==0) then begin end;
          end; 
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure PutSalesGroup_TSVc()
BEGIN
  Integer flushcnt;
  Boolean found,testf;
  record UserVc Userr;
  record TSVc TSr;
  record TSVc oldTSr;
  
  found = true;
  while (LoopMain(TSr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(TSr.SalesGroup)) then begin testf = false; end; 
      if (testf) then begin
        Userr.Code = TSr.SalesMan;
        if (ReadFirstMain(Userr,1,true)) then begin
          RecordCopy(oldTSr,TSr);
          if (blank(TSr.SalesGroup)) then begin 
            TSr.SalesGroup = Userr.SalesGroup;
            if (RecordUpdate(oldTSr,TSr,false)==0) then begin end;
          end; 
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure PutSalesGroup_POVc()
BEGIN
  Integer flushcnt;
  Boolean found,testf;
  record CUVc CUr;
  record POVc POr;
  record POVc oldPOr;
  record UserVc Userr;
  
  found = true;
  while (LoopMain(POr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(POr.SalesGroup)) then begin testf = false; end; 
      if (testf) then begin
        CUr.Code = POr.VECode;
        if (ReadFirstMain(CUr,1,true)) then begin
          RecordCopy(oldPOr,POr);
          if (blank(POr.SalesGroup)) then begin 
            POr.SalesGroup = CUr.SalesGroup;
            if (blank(POr.SalesGroup)) then begin
              Userr.Code = POr.SalesMan;
              if (ReadFirstMain(Userr,1,true)) then begin
              end;
              POr.SalesGroup = Userr.SalesGroup;
            end;
            if (RecordUpdate(oldPOr,POr,false)==0) then begin end;
          end; 
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure PutSalesGroup_POCOVc()
BEGIN
  Integer flushcnt;
  Boolean found,testf;
  record CUVc CUr;
  record POCOVc POCOr;
  record POCOVc oldPOCOr;
  record UserVc Userr;
  
  found = true;
  while (LoopMain(POCOr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(POCOr.SalesGroup)) then begin testf = false; end; 
      if (testf) then begin
        CUr.Code = POCOr.VECode;
        if (ReadFirstMain(CUr,1,true)) then begin
          RecordCopy(oldPOCOr,POCOr);
          if (blank(POCOr.SalesGroup)) then begin 
            POCOr.SalesGroup = CUr.SalesGroup;
            if (blank(POCOr.SalesGroup)) then begin
              Userr.Code = POCOr.SalesMan;
              if (ReadFirstMain(Userr,1,true)) then begin
              end;
              POCOr.SalesGroup = Userr.SalesGroup;
            end;
            if (RecordUpdate(oldPOCOr,POCOr,false)==0) then begin end;
          end; 
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure PutSalesGroup_ORVc()
BEGIN
  Integer flushcnt;
  Boolean found,testf;
  record CUVc CUr;
  record ORVc ORr;
  record ORVc oldORr;
  record UserVc Userr;
  
  found = true;
  while (LoopMain(ORr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(ORr.SalesGroup)) then begin testf = false; end; 
      if (testf) then begin
        CUr.Code = ORr.CustCode;
        if (ReadFirstMain(CUr,1,true)) then begin
          RecordCopy(oldORr,ORr);
          if (blank(ORr.SalesGroup)) then begin 
            ORr.SalesGroup = CUr.SalesGroup;
            if (blank(ORr.SalesGroup)) then begin
              Userr.Code = ORr.SalesMan;
              if (ReadFirstMain(Userr,1,true)) then begin
              end;
              ORr.SalesGroup = Userr.SalesGroup;
            end;
            if (RecordUpdate(oldORr,ORr,false)==0) then begin end;
          end; 
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure PutSalesGroup_ExpVc()
BEGIN
  Integer flushcnt;
  Boolean found,testf;
  record UserVc Userr;
  record ExpVc Expr;
  record ExpVc oldExpr;
  
  found = true;
  while (LoopMain(Expr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(Expr.SalesGroup)) then begin testf = false; end; 
      if (testf) then begin
        Userr.Code = Expr.Person;
        if (ReadFirstMain(Userr,1,true)) then begin
          RecordCopy(oldExpr,Expr);
          if (blank(Expr.SalesGroup)) then begin 
            Expr.SalesGroup = Userr.SalesGroup;
            if (RecordUpdate(oldExpr,Expr,false)==0) then begin end;
          end; 
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure PutSalesGroup_QTVc()
BEGIN
  Integer flushcnt;
  Boolean found,testf;
  record CUVc CUr;
  record QTVc QTr;
  record QTVc oldQTr;
  record UserVc Userr;
  
  found = true;
  while (LoopMain(QTr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(QTr.SalesGroup)) then begin testf = false; end; 
      if (testf) then begin
        CUr.Code = QTr.CustCode;
        if (ReadFirstMain(CUr,1,true)) then begin
          RecordCopy(oldQTr,QTr);
          if (blank(QTr.SalesGroup)) then begin 
            QTr.SalesGroup = CUr.SalesGroup;
            if (blank(QTr.SalesGroup)) then begin
              Userr.Code = QTr.SalesMan;
              if (ReadFirstMain(Userr,1,true)) then begin
              end;
              QTr.SalesGroup = Userr.SalesGroup;
            end;
            if (RecordUpdate(oldQTr,QTr,false)==0) then begin end;
          end; 
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure PutSalesGroup_TBBUVc()
BEGIN
  Integer flushcnt;
  Boolean found,testf;
  record CUVc CUr;
  record TBBUVc TBBUr;
  record TBBUVc oldTBBUr;
  record UserVc Userr;
  
  found = true;
  while (LoopMain(TBBUr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(TBBUr.SalesGroup)) then begin testf = false; end; 
      if (testf) then begin
        CUr.Code = TBBUr.CustCode;
        if (ReadFirstMain(CUr,1,true)) then begin
          RecordCopy(oldTBBUr,TBBUr);
          if (blank(TBBUr.SalesGroup)) then begin 
            TBBUr.SalesGroup = CUr.SalesGroup;
            if (blank(TBBUr.SalesGroup)) then begin
              Userr.Code = TBBUr.SalesMan;
              if (ReadFirstMain(Userr,1,true)) then begin
              end;
              TBBUr.SalesGroup = Userr.SalesGroup;
            end;
            if (RecordUpdate(oldTBBUr,TBBUr,false)==0) then begin end;
          end; 
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure PutSalesGroup_SVOVc()
BEGIN
  Integer flushcnt;
  Boolean found,testf;
  record CUVc CUr;
  record SVOVc SVOr;
  record SVOVc oldSVOr;
  record UserVc Userr;
  
  found = true;
  while (LoopMain(SVOr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(SVOr.SalesGroup)) then begin testf = false; end; 
      if (testf) then begin
        CUr.Code = SVOr.CustCode;
        if (ReadFirstMain(CUr,1,true)) then begin
          RecordCopy(oldSVOr,SVOr);
          if (blank(SVOr.SalesGroup)) then begin 
            SVOr.SalesGroup = CUr.SalesGroup;
            if (blank(SVOr.SalesGroup)) then begin
              Userr.Code = SVOr.SalesMan;
              if (ReadFirstMain(Userr,1,true)) then begin
              end;
              SVOr.SalesGroup = Userr.SalesGroup;
            end;
            if (RecordUpdate(oldSVOr,SVOr,false)==0) then begin end;
          end; 
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure PutSalesGroup_WOVc()
BEGIN
  Integer flushcnt;
  Boolean found,testf;
  record CUVc CUr;
  record WOVc WOr;
  record WOVc oldWOr;
  record UserVc Userr;
  
  found = true;
  while (LoopMain(WOr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(WOr.SalesGroup)) then begin testf = false; end; 
      if (testf) then begin
        CUr.Code = WOr.CustCode;
        if (ReadFirstMain(CUr,1,true)) then begin
          RecordCopy(oldWOr,WOr);
          if (blank(WOr.SalesGroup)) then begin 
            WOr.SalesGroup = CUr.SalesGroup;
            if (blank(WOr.SalesGroup)) then begin
              Userr.Code = WOr.EMCode;
              if (ReadFirstMain(Userr,1,true)) then begin
              end;
              WOr.SalesGroup = Userr.SalesGroup;
            end;
            if (RecordUpdate(oldWOr,WOr,false)==0) then begin end;
          end; 
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure PutSalesGroup_WSVc()
BEGIN
  Integer flushcnt;
  Boolean found,testf;
  record CUVc CUr;
  record WSVc WSr;
  record WSVc oldWSr;
  record UserVc Userr;
  
  found = true;
  while (LoopMain(WSr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(WSr.SalesGroup)) then begin testf = false; end; 
      if (testf) then begin
        CUr.Code = WSr.CustCode;
        if (ReadFirstMain(CUr,1,true)) then begin
          RecordCopy(oldWSr,WSr);
          if (blank(WSr.SalesGroup)) then begin 
            WSr.SalesGroup = CUr.SalesGroup;
            if (blank(WSr.SalesGroup)) then begin
              Userr.Code = WSr.EMCode;
              if (ReadFirstMain(Userr,1,true)) then begin
              end;
              WSr.SalesGroup = Userr.SalesGroup;
            end;
            if (RecordUpdate(oldWSr,WSr,false)==0) then begin end;
          end; 
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure PutSalesGroup_JobVc()
BEGIN
  Integer flushcnt;
  Boolean found,testf;
  record CUVc CUr;
  record JobVc Jobr;
  record JobVc oldJobr;
  record UserVc Userr;
  
  found = true;
  while (LoopMain(Jobr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(Jobr.SalesGroup)) then begin testf = false; end; 
      if (testf) then begin
        CUr.Code = FindJobCustomerCode(Jobr);
        if (ReadFirstMain(CUr,1,true)) then begin
          RecordCopy(oldJobr,Jobr);
          if (blank(Jobr.SalesGroup)) then begin 
            Jobr.SalesGroup = CUr.SalesGroup;
            if (blank(Jobr.SalesGroup)) then begin
              Userr.Code = Jobr.SalesMan;
              if (ReadFirstMain(Userr,1,true)) then begin
              end;
              Jobr.SalesGroup = Userr.SalesGroup;
            end;
            if (RecordUpdate(oldJobr,Jobr,false)==0) then begin end;
          end; 
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure PutSalesGroup_RestAccVc()
BEGIN
  Integer flushcnt;
  Boolean found,testf;
  record CUVc CUr;
  record RestAccVc RestAccr;
  record RestAccVc oldRestAccr;
  
  found = true;
  while (LoopMain(RestAccr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(RestAccr.SalesGroup)) then begin testf = false; end; 
      if (testf) then begin
        CUr.Code = RestAccr.CUCode;
        if (ReadFirstMain(CUr,1,true)) then begin
          RecordCopy(oldRestAccr,RestAccr);
          if (blank(RestAccr.SalesGroup)) then begin 
            RestAccr.SalesGroup = CUr.SalesGroup;
            if (RecordUpdate(oldRestAccr,RestAccr,false)==0) then begin end;
          end; 
        end;
      end;
    end;
  end;
  RETURN;
END;

global
updating procedure PutSalesGroupMn(record RcVc RepSpec)
BEGIN
  record ModuleBlock Mb;
  
  BlockLoad(Mb);
  if (Mb.ExternalUser==0) then begin
    goto LPutSalesGroupMn;
  end;
  PutSalesGroup_CUVc;
  PutSalesGroup_IVVc;
  PutSalesGroup_IntIVVc;
  PutSalesGroup_FEIVVc;
  PutSalesGroup_VATIVVc;
  PutSalesGroup_VIVc;
  PutSalesGroup_VATVIVc;
  PutSalesGroup_FEVIVc;
  
  PutSalesGroup_PRVc;
  PutSalesGroup_TBBUVc;
  PutSalesGroup_TSVc;

  PutSalesGroup_POVc;
  PutSalesGroup_POCOVc;
  PutSalesGroup_PIVc;

  PutSalesGroup_ORVc;
  PutSalesGroup_ExpVc;
  PutSalesGroup_QTVc;

  PutSalesGroup_SVOVc;
  PutSalesGroup_WOVc;
  PutSalesGroup_WSVc;

  PutSalesGroup_JobVc;
  PutSalesGroup_RestAccVc;  
  
 LPutSalesGroupMn:; 
  RETURN;
END;
