external procedure CalcPrice(val,val,val,var val,Integer);
external procedure CheckFlush(var Integer,Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external procedure COSumup(var record COVc);

function Boolean PastCust2inCO(var record COVc COp,Boolean updatall,var string warntext)
BEGIN
  Boolean found;
  record CUVc CUr;
  record INVc INr;
  val x,pr,bal,limit;
  val t;
  val frrate,to1,to2,br1,br2;
  record FreightBlock FreightRec;
  string 255 tstr;
  string 10 crncy;
  record GeneralOptionBlock GenOptRec;

  BlockLoad(GenOptRec);
  CUr.Code = COp.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    found = true;
    COp.Addr0 = CUr.Name;
    COp.Addr1 = CUr.InvAddr0;
    COp.Addr2 = CUr.InvAddr1;
    COp.Addr3 = CUr.InvAddr2;
    COp.InvAddr3 = CUr.InvAddr3;
    COp.InvAddr4 = CUr.InvAddr4;
    COp.ClientContact = CUr.Person;
    COp.CustCat = CUr.CustCat;
    COp.Objects = CUr.Objects;
    COp.CurncyCode = CUr.CurncyCode;
    //SetSalesMan(tstr,CUr.SalesMan);
    COp.SalesMan = tstr;
    COp.LangCode = CUr.LangCode;
    COp.ShipDeal = CUr.ShipDeal;
    COp.ShipMode = CUr.ShipMode;
    COp.Department = CUr.Department;
    COp.PriceList = CUr.PLCode;
    COp.RebCode = CUr.RebCode;
    COp.CustVATCode = CUr.VATCode;
    COp.Phone = CUr.Phone;
    COp.Fax = CUr.Fax;
    tstr = "";
    COp.Sorting = CUr.Sorting;
    if (nonblank(CUr.DelAddr0)) then begin
      COp.ShipAddr0 = CUr.Name;
      COp.ShipAddr1 = CUr.DelAddr0;
      COp.ShipAddr2 = CUr.DelAddr1;
      COp.ShipAddr3 = CUr.DelAddr2;
      COp.DelAddr3 = CUr.DelAddr3;
      COp.DelAddr4 = CUr.DelAddr4;
    end else begin
      COp.ShipAddr0 = "";
      COp.ShipAddr1 = "";
      COp.ShipAddr2 = "";
      COp.ShipAddr3 = "";
      COp.DelAddr3 = "";
      COp.DelAddr4 = "";
    end;

    COp.ShipDeal = "";
    COp.ShipMode = "";
    COp.VATNr = CUr.VATNr;
    COp.ExportFlag = CUr.ExportFlag;
    COp.PayDeal = CUr.PayDeal;
    COp.InvComment = CUr.OrderComment;
    if (updatall) then begin
      COp.InvoiceToCode = CUr.InvoiceToCode;    
     // PasteCUCODefVal(COp);     
      BlockLoad(FreightRec);
      COp.FrItem = FreightRec.FrItem;
      COp.FrGPPercent = FreightRec.FrGPPercent;
      INr.Code = COp.FrItem;
      if (ReadFirstMain(INr,1,true)) then begin
        COp.FrVATCode = CUr.VATCode;
        if (blank(COp.FrVATCode)) then begin
      //  GetItemVATCode(COp.FrItem,COp.ExportFlag,tstr,true);
          COp.FrVATCode = tstr;
        end;
       // GetItemSalesAcc(COp.FrItem,COp.ExportFlag,tstr);
        COp.FrSalesAcc = tstr;
        COp.FrBase = INr.UPrice1;
      end else begin
        COp.FrItem = "";
        COp.FrGPPercent = blankval;
        COp.FrBase = blankval;
        COp.FrPrice = blankval;
        COp.FrGP = blankval;
        COp.FrVATCode = "";
        COp.FrSalesAcc = "";
      end;       
      crncy = COp.CurncyCode;
      //GetFullCurncyRate(crncy,COp.CODate,frrate,to1,to2,br1,br2);
      //COp.CurncyCode = crncy;
      //COp.FrPrice = DivRateToBase1(COp.CurncyCode,COp.FrBase,COp.FrRate,COp.ToRateB1,COp.ToRateB2,COp.BaseRate1,COp.BaseRate2,DefaultCurRoundOff);
      x = 1;
      pr = 100;
      pr = pr - COp.FrGPPercent;
      //CalcSum(x,COp.FrBase,0,pr,t,GenOptRec.UseDiscount);
     // COSumup(COp);
      if (nonblank(CUr.WarnText1)) then begin
        warntext = CUr.WarnText1;
      end;
    end;
  end;
  PastCust2inCO = found;
  RETURN;
END;

function Boolean AddCORow(var record COVc COp,Integer rownr,string toitem,Integer UseDiscount, val Quantity)
BEGIN
  Boolean found;
  Boolean calcpricef;
  record INVc INr;
  val t,s,rowsum,price,vreb,baseprice,tax2prc,p;
  row COVc COrwp;
  string 255 curitemname,salesacc,vatcode,tax2code,taxtemplatecode;
  Boolean dummyf;
  record TaxMatrixVc TMr;
  Time blankt;

  calcpricef = false;
  COrwp.ArtCode = toitem;
  COrwp.Price = blankval;
  COrwp.vRebate = blankval;  
   
  if (GetItemPriceDiscount3(COrwp.ArtCode,COrwp.Quant,INr,COp.CurncyCode,
                            COp.FrRate,COp.ToRateB1,COp.ToRateB2,COp.BaseRate1,COp.BaseRate2,
                            COp.LangCode,COp.CustCat,COp.PriceList,COp.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            COp.ExportFlag,calcpricef,COp.CODate,blankt,COp.CustCode,true,dummyf,COp.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then begin  
    COrwp.Price = price;
    COrwp.Spec = curitemname;
    COrwp.vRebate = vreb;
    COrwp.VATCode = vatcode;
    COrwp.BasePrice = baseprice;
    COrwp.SalesAcc = salesacc;
    COrwp.ArtCode = INr.Code;
    COrwp.Quant = Quantity;
    if (nonblank(COp.CustVATCode)) then begin COrwp.VATCode = COp.CustVATCode; end;
    p = COrwp.Price; 
    CalcPrice(COrwp.BasePrice,COrwp.PriceFactor,COrwp.vRebate,p,UseDiscount);
    COrwp.Price = p;  
    CalcSum(COrwp.Quant,COrwp.Price,COrwp.PriceFactor,COrwp.vRebate,t,UseDiscount);
    COrwp.Sum = t;
    t = COrwp.Quant*COrwp.BasePrice;
    s = MulRateToBase1(COp.CurncyCode,COrwp.Sum,COp.FrRate,COp.ToRateB1,COp.ToRateB2,COp.BaseRate1,COp.BaseRate2,DefaultCurRoundOff);
    FindSalesExVat(TMr,COrwp.VATCode,s,COp.InclVAT,COp.NoTAXonVAT,rowsum);    
    COrwp.rowGP = rowsum - t;
  end;
  MatRowPut(COp,rownr,COrwp);
  AddCORow = true;  
  RETURN;
END;

function LongInt CheckIsContract(string cucode)
BEGIN
  record COVc COr;
  LongInt res;
  String 60 ckey;

  ckey = "CustCode";
  while(LoopKey(ckey,COr,1,true)) begin
    if (COr.CustCode == cucode) then begin
      res = -1;  
    end;
    res = COr.CustCode;
  end;
  CheckIsContract = res;
  RETURN;
END;

global
updating function LongInt CreateCO(record RcVc RepSpec)
BEGIN
 record COVc COr, COrNew;
 record CUVc CUr;
 record CODefValBlock CODefr;
 String 20 fromcust;
 String 20 tocust;
 String 20 class;
 String 50 comment;
 Integer rownr,flushcnt;
 String 255 warning;
 Boolean TrHs,testf, stop;
 
 warning = "";
 testf = true;
 rownr = 0;
 BlockLoad(CODefr);
 fromcust = FirstInRange(RepSpec.f1,20);
 tocust = LastInRange(RepSpec.f1,20);
 class = FirstInRange(RepSpec.ObjStr,20);
 comment = LastInRange(RepSpec.ObjStr,50);
 TrHs = true;
 CUr.Code = fromcust;
 ResetLoop(CUr);
 while(LoopMain(CUr,1,TrHs)) begin
   if (nonblank(RepSpec.f1)) then begin
      if (CUr.Code>tocust) then begin
        TrHs = false;
      end;
    end;
    testf = true;
    if (TrHs==false) then begin
      testf = false;
    end;
    COr.CustCode = CUr.Code;
    if (ReadFirstKey("CustCode",COr,1,true)) then begin
      testf = false;
    end;
    if (testf) then begin
      RecordNew(COrNew);
      COrNew.CustCode = CUr.Code;
      rownr = 0;
      if(PastCust2inCO(COrNew,false,warning)) then begin 
        if (nonblank(RepSpec.f3) and (RepSpec.f3 == CUr.CustCat)) then begin
          if (nonblank(RepSpec.f4)) then begin
            if(AddCORow(COrNew, rownr, RepSpec.f4, 0, RepSpec.vals0)) then begin
              rownr = rownr + 1;
            end;
          end;
          if (nonblank(RepSpec.f5)) then begin
            if(AddCORow(COrNew, rownr, RepSpec.f5, 0, RepSpec.vals1)) then begin 
              rownr = rownr + 1;
            end;
          end;
        end;
        if (nonblank(RepSpec.f2)) then begin 
          if(SetInSet(RepSpec.f2, CUr.Classification)) then begin
            if(AddCORow(COrNew, rownr, RepSpec.f6, 0, RepSpec.vals2)) then begin 
              rownr = rownr + 1;
            end;
          end;  
        end;
        COrNew.SerNr = NextSerNr("COVc",COrNew.CODate,-1,false,"");
        if (nonblank(comment)) then begin COrNew.InvComment = comment; end; //Comment on contract
         if (nonblank(RepSpec.d1)) then begin COrNew.startDate = RepSpec.d1; end; //Start Date
        if (nonblank(RepSpec.d2)) then begin COrNew.endDate = RepSpec.d2; end; //End Date
        if (nonblank(RepSpec.RegDate)) then begin COrNew.CODate = RepSpec.RegDate; end; //Date of Contract
        if (nonblank(RepSpec.flags[0])) then begin COrNew.Accepted = RepSpec.flags[0]; end; //OK'd
        if (nonblank(RepSpec.flags[1])) then begin COrNew.OKFlag = RepSpec.flags[1]; end; //Accepted
        COrNew.perType = CODefr.perType;
        COrNew.perLength = CODefr.perLength;
        COrNew.invDtype = CODefr.invDtype;
        COrNew.invDays = CODefr.invDays;
        COrNew.normalFactor = CODefr.normalFactor;
        COrNew.ContractClass = CODefr.ContractClass;
        if (nonblank(class)) then begin COrNew.ContractClass = class; end; //class on contract
      end;   
      COSumup(COrNew);
      if (MatRowCnt(COrNew)>0) then begin
        if(RecordStore(COrNew,true)) then begin  end;
        CheckFlush(flushcnt,10);
      end;
    end;
  end;
  RETURN;
END;


// How does this work, it can't be a function, it is a procedure....
global
updating function CreateCOMn(record RcVc RepSpec)
BEGIN
  LongInt res;
    res = CreateCO(RepSpec);
  RETURN;
END;

