external procedure CheckFlush(var Integer,Integer);

global
procedure LookUpChqAcnt(Integer Nro,var string AcNr)
begin
   Record CheckTargetAccBlock chqacnts;
   Integer rows,j,comp;
   Row CheckTargetAccBlock chqacntsrw;
   
   AcNr = "";
   Blockload(chqacnts);
   rows = MatRowCnt(chqacnts);
   for (j=0;j<rows;j=j+1) begin
       MatRowGet(chqacnts,j,chqacntsrw);
       comp = chqacntsrw.TargetTyp;
          if (comp == Nro) then begin
             AcNr = chqacntsrw.AccNr;
          end;
   end;
   return;
end;

updating procedure NewOwnCheque(String ChqNro,Integer State,String Target,String Objects,var Integer flushcnt)
begin
  Record OwnCheckVc Chq1;
  Boolean Res;
  String 20 AcNro;
  String 60 Desc;
  Date bdate;					  // a blank date

  Recordnew(Chq1);  // Generates new sernr automatically, Not any more, Karl
  chq1.TransDate        = bdate;
  chq1.CheckNr          = ChqNro;
  chq1.Openf            = 0;              
  chq1.TargetAccNr      = Target;
  chq1.TargetObjects    = Objects;
  AcNro = ""; 
  if (State == 0) then begin
      LookUpChqAcnt(8,AcNro);   // pagare
  end else begin
      LookUpChqAcnt(3,AcNro);	  // cheque
  end;
  chq1.TempAccNr        = AcNro;
  chq1.ChkMode          = State;  
  Res = RecordStore(chq1,true);
  CheckFlush(flushcnt,10);
  return;
end;

global
updating procedure GenOwnChk2Mn(record RcVc RepSpec)
begin
  Record CheckVc Chq;
  Boolean Res;
  LongInt j,Cant;
  String 30 ChkNumber,Target;
  Integer flushcnt;

  Cant = RepSpec.long1;
  ChkNumber = RepSpec.f1;
  Target = RepSpec.f2;

  if (nonblank(Target) and (nonblank(ChkNumber)) and (Cant > 0)) then begin
    for (j=0;j<Cant;j=j+1) begin
      if (j>0) then begin
        ChkNumber = NextStrNumber(ChkNumber,true);
      end;
      NewOwnCheque(ChkNumber,RepSpec.flags[1],Target,RepSpec.f3,flushcnt);
      Res = RecordStore(Chq,true);
      CheckFlush(flushcnt,10);
    end;
  end;

  Return;
end;

