external procedure CheckFlush(var Integer,Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external procedure CalcSum2(val,val,val,val,var val,Integer);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure PUSumUp(var record PUVc);
external procedure CalcExtra(val,string,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);

updating function
Boolean PrelPUInPU(record PUVc PUp,Integer maxrows,var Integer flushcnt)//not used
BEGIN
  Boolean res;
  Integer i,rwcnt;
  row PUVc PUrw;
  row POVc POrw;
  record POSettingBlock POSetRec;
  record SysFormatBlock SysFormatRec;
  record PIVc PIr;
  val remn;
  record POVc POr;
//  record POVc POp;
  Integer nrwcnt;
  record INVc INr;
  val t1,p,totqty,v2,t,v1;
  val frrate,torate1,torate2,baserate1,baserate2;
  string 255 extra;
  Boolean DropPOToPULink,found;
  val fr,to1,to2,br1,br2;
  string 5 curcode;
  LongInt ponr;
  string 60 sz,msk,mskrep;
  record GeneralOptionBlock GenOptRec;
  string 200 varsubset;

  BlockLoad(GenOptRec);
  res = true;
  POr.SerNr = PUp.PONr;
  if (ReadFirstMain(POr,1,true)==false) then begin
    res = false;
    goto LPrelPUInPU;
  end;
  BlockLoad(POSetRec);
  BlockLoad(SysFormatRec);
  if (POr.Closed!=0) then begin 
    res = false;
    goto LPrelPUInPU;  
  end;
  PUp.PONr = POr.SerNr;
  PUp.POCOSerNr = POr.POCOSerNr;
  PUp.VECode = POr.VECode;
  PUp.VEName = POr.Addr0;
  PUp.CurncyCode = POr.CurncyCode;
  PUp.Location = POr.Location;
  PUp.Objects = POr.Objects;
  if (((POr.BaseRate1!=0) and (POr.BaseRate2!=0)) or
      ((POr.ToRateB1!=0) or (POr.ToRateB2!=0))) then begin
    PUp.FrRate = POr.FrRate;
    PUp.ToRateB1 = POr.ToRateB1;
    PUp.ToRateB2 = POr.ToRateB2;
    PUp.BaseRate1 = POr.BaseRate1;
    PUp.BaseRate2 = POr.BaseRate2;
  end else begin
    curcode = PUp.CurncyCode;
    GetFullCurncyRate(curcode,PUp.TransDate,fr,to1,to2,br1,br2);
    PUp.CurncyCode = curcode;
    PUp.FrRate = fr;
    PUp.ToRateB1 = to1; 
    PUp.ToRateB2 = to2;
    PUp.BaseRate1 = br1;
    PUp.BaseRate2 = br2;
  end;
  rwcnt = MatRowCnt(POr);
  PUp.InclVAT = POr.InclVAT;
  nrwcnt = 0;
  totqty = blankval;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POr,i,POrw);
    totqty = totqty + POrw.Quant;
  end;
  CalcExtra(POr.Sum1,POr.CostPerUnit,v2);
  v2 = v2/totqty;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POr,i,POrw);
    if (blank(POrw.ArtCode)) then begin goto L44SKIPWROW; end;
    if (POrw.Quant==0) then begin goto L44SKIPWROW; end;
    remn = POrw.Quant - POrw.Shipd2;
    if (remn<=0) then begin goto L44SKIPWROW; end;// SetM4ZeroVal(&remn);
    if (ReadFirstItem(POrw.ArtCode,INr,true,false)==false) then begin goto L44SKIPWROW; end;
    if (nrwcnt>=maxrows) then begin
      ponr = PUp.PONr;
      nrwcnt = 0;
      PUSumUp(PUp);
      if (RecordStore(PUp,false)) then begin end;//RecordInsert(PUVc,PUp);
      CheckFlush(flushcnt,10);
//      CreateNewPU(PUp,&POr,ponr);
    end;
    if (INr.SerNrf==1) then begin
    end else begin
      ClearRow(PUp,PUrw,1);
      PUrw.ArtCode = POrw.ArtCode;
      PUrw.Objects = POrw.Objects;
      PUrw.Coefficient = INr.UnitCoefficient;
      if (POr.SetZeroPUQuant!=0) then begin
         PUrw.Quant = 0;
      end else begin
        PUrw.Quant = remn;
      end;
      PUrw.Spec = POrw.Spec;
      PUrw.SerialNr = "";
      p = POrw.Price;
      if (POrw.PIFactor!=0) then begin
        p = p/POrw.PIFactor;
      end;
      CalcSum(1,p,0,POrw.vRebate,t,GenOptRec.UseDiscount);
      PUrw.UPrice = t;
      if (INr.PriceFactor!=0) then begin
        p = p/INr.PriceFactor;
      end;
      CalcSum2(1,p,0,POrw.vRebate,t,0);
      PUrw.UPrice = t;
      PUrw.Extra = ValToString(INr.ExtraCost,M45Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
      PUrw.CostPrice = blankval;
      PUrw.OrdRow = i;
      if (DropPOToPULink==false) then begin
        if (FindItemVAR(POrw.ArtCode,sz,msk,mskrep,varsubset)) then begin
//          if (CorrectItemVAR(POrw.ArtCode,extra,NIL,true)==false) then begin
            DropPOToPULink = true;
            PUp.PONr = -1;
//          end;
        end;
      end;
      if (DropPOToPULink) then begin
        PUrw.OrdRow = -1;
      end;
      extra = "";
      PIr.ItemCode = POrw.ArtCode;
      PIr.Location = POr.Location;
      PIr.VECode = POr.VECode;
      PIr.VEItemCode = POrw.VEArtCode;
      found = ReadFirstMain(PIr,3,true);
      if (found) then begin
        if (nonblank(POr.Location)) then begin
          PIr.ItemCode = POrw.ArtCode;
          PIr.Location = "";
          PIr.VECode = POr.VECode;
          PIr.VEItemCode = POrw.VEArtCode;
          found = ReadFirstMain(PIr,3,true);
        end;
      end;
      if (found) then begin
        extra = PIr.PurchaseCost;
      end;
/*    
      if (nonblankstrp(POp->CurncyCode)) then begin
        if (((M4ValBlankTest(&POp->BaseRate1)==0) and (M4ValBlankTest(&POp->BaseRate2)==0)) or
          ((M4ValBlankTest(&POp->ToRateB1)==0) or (M4ValBlankTest(&POp->ToRateB2)==0))) then begin
          CopyM4Val(&frrate,&POp->FrRate);
          CopyM4Val(&torate1,&POp->ToRateB1);
          CopyM4Val(&torate2,&POp->ToRateB2);
          CopyM4Val(&baserate1,&POp->BaseRate1);
          CopyM4Val(&baserate2,&POp->BaseRate2);
        end else begin
          GetFullCurncyRate(PUp->CurncyCode,&CurrentDate,&frrate,&torate1,&torate2,&baserate1,&baserate2);
        end;
        MulBaseRate(POp->CurncyCode,&PUrw.UPrice,&frrate,&torate1,&torate2,&baserate1,&baserate2,&t,NIL,5);
        CalcExtra(&t,extra,&v1);
      end else begin
        CalcExtra(&PUrw.UPrice,extra,&v1);
      end;
        M4ValRound(&v1,5,&v1);
        M4ToStr(&v1,M4Val,PUrw.CustomsCost);
        M4ValRound(&v2,5,&v2);
        CopyM4Val(&PUrw.ShipCost,&v2);
        M4ToStr(&INr.ExtraCost,M45Val,PUrw.Extra);
        SetM4ValBlank(&PUrw.CostPrice);
        PUCalcCostPrice(PUrw.ArtCode,&PUrw.UPrice,PUp->InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUp->CurncyCode,
                        &PUp->FrRate,&PUp->ToRateB1,&PUp->ToRateB2,&PUp->BaseRate1,&PUp->BaseRate2,
                        &PUrw.ShipCost,&PUrw.RowCost1,&PUrw.RowCost2,&PUrw.RowCost3,&PUrw.RowCost4,&PUrw.RowCost5,
                        PUrw.CustomsCost,&PUrw.CostPrice,&PUrw.Quant,&PUrw.Sum,PUrw.VATCode);
  */
      PUrw.VEItemCode = POrw.VEArtCode;
      PUrw.VARList = POrw.VARList;
      if (POSetRec.TransAccObjToPU!=0) then begin
        PUrw.Objects = POrw.Objects;
        PUrw.CostAcc = POrw.CostAcc;
      end;
      PUrw.UnitXval = INr.Width;
      PUrw.UnitYval = INr.Height;
      PUrw.UnitZval = INr.Depth;
      MatRowPut(PUp,nrwcnt,PUrw);
      nrwcnt = nrwcnt + 1;
    end;
L44SKIPWROW:;
  end;
  PUSumUp(PUp);
LPrelPUInPU:;
  PrelPUInPU = res;
  RETURN;
END;

global
procedure PrelPUGenPUMn(record RcVc RepSpec)
BEGIN
  record PrelPUVc PrelPUr;
  row PrelPUVc PrelPUrw;
  Integer i,rwcnt;
  
  PrelPUr.SerNr = FirstInRange(RepSpec.f1,10);
  if (ReadFirstMain(PrelPUr,1,true)) then begin
    if (PrelPUr.PONr!=-1) then begin
//      PrelPUInPU();
    end else begin
      rwcnt = MatRowCnt(PrelPUr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(PrelPUr,i,PrelPUrw);
//        PastePORowInPU();
      end;
    end;
  end;
  RETURN;
END;
