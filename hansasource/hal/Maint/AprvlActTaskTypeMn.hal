external function Boolean ReadAcceptanceRulesForFileName(string,string,string,var record AcceptanceRulesVc);

global
updating procedure AprvlActTaskTypeMn(record RcVc RepSpec)
begin
  record ActVc Actr;
  record ActVc oldActr;
  Boolean found,testf;
  record AcceptanceRulesVc Acptr;
  record AprvlActMaintBlock AAMb;
  
  BlockLoad(AAMb);
  if (AAMb.Done!=0) then begin
    goto LAprvlActTaskTypeMn;
  end;
  found = true;
  while (LoopKey("FromFileName",Actr,1,found)) begin
    if (found) then begin
      testf = true;
      if (blank(Actr.FromFileName)) then begin testf = false; end;
      if (blank(Actr.FromSerNr)) then begin testf = false; end;
      if (testf) then begin
        if (Actr.TodoFlag==kTodoFlagTodo) then begin
          RecordCopy(oldActr,Actr);
          testf = true;
          switch (Actr.FromFileName) begin
            case "POVc":
            case "PUVc":
            case "VIVc":
            case "OPVc":
            case "ExpVc":
            case "IntORVc":
            case "QTVc":
            case "ORVc":
            case "IVVc":
            case "SDVc":
            case "TBBUVc":
            case "LeaveApplicationVc":
            case "LeaveTransferVc":
            case "HMTravelLogVc":
            case "MarginExceptVc":
            case "ProjActVc":
            case "ActVc":
            otherwise
              testf = false;
          end;
          if (testf) then begin
            if (ReadAcceptanceRulesForFileName(Actr.FromFileName,Actr.FromSerNr,Actr.CUCode,Acptr)==false) then begin
              testf = false;
            end;
          end;
          if (testf) then begin 
            testf = false;
            if (Actr.ActType==Acptr.AcceptanceActType) then begin testf = true; end;

            if (Actr.ActResult==Acptr.AcceptedActType) then begin testf = true; end;
            if (Actr.ActResult==Acptr.RejectedActType) then begin testf = true; end;
            if (Actr.ActResult==Acptr.CancelledActType) then begin testf = true; end;
            if (Actr.ActResult==Acptr.NotNeededActType) then begin testf = true; end;
            if (Actr.ActResult==Acptr.ForwardedActType) then begin testf = true; end;

            if (blank(Actr.ActResult)) then begin
              if (Actr.OKFlag!=0) then begin testf = false; end;
              if (Actr.ActType!=Acptr.AcceptanceActType) then begin testf = false; end;
            end;            
            if (Actr.ActType==Acptr.FYIActType) then begin testf = false; end;
            if (Actr.ActType==Acptr.AbsentActType) then begin testf = false; end;
          end;
          if (testf) then begin 
            Actr.TodoFlag = kTodoFlagApproval;
            RecordUpdate(oldActr,Actr,false);
          end;
        end;
      end;
    end;
  end;
  AAMb.Done = 1;
  BlockStore(AAMb);
LAprvlActTaskTypeMn:;  
  return;
end;