external procedure GetCloudServerData(var array record LocalCloudServerVc);
external procedure CopyLCSDataToRCS(record LocalCloudServerVc,record RemoteCloudServerVc);


global
updating procedure GetDataFromCN(record CloudNodeVc CNr)
begin
  string 255 cnurl;
  record CloudNodeVc OldCNr;
  LongInt stat,i;
  array record LocalCloudServerVc csarr;
  record LocalCloudServerVc LCSr;
  record RemoteCloudServerVc RCSr;
  record RemoteCloudServerVc OldRCSr;
  
  cnurl = CNr.HostName & ":" & CNr.SSLPort;
  stat = CallService(cnurl).GetCloudServerData(csarr);
  
  switch (stat) begin
    case kCallServiceOK:
      // nothing
    case kCallServiceCommError:
      LogText(0,"UCFN: got comm error from: " & CNr.Code);
      goto LGetDataFromCN;
    case kCallServiceAuthError:
      LogText(0,"UCFN: got auth error from: " & CNr.Code);
      goto LGetDataFromCN;
    case kCallServiceParamError:
      LogText(0,"UCFN: got param error from: " & CNr.Code);
      goto LGetDataFromCN;
    case kCallServiceNoFuncError:
      LogText(0,"UCFN: got no service error from: " & CNr.Code);
      goto LGetDataFromCN;
  end;
  
  LogText(0,"UCFN: got " & csarr.length & " records from " & CNr.Code);
  
  for (i = 0; i<csarr.length; i = i + 1) begin
    LCSr = csarr[i];
    RCSr.UUID = LCSr.UUID;
    
    if (ReadFirstMain(RCSr,1,true)) then begin
      RecordCopy(OldRCSr,RCSr);
      CopyLCSDataToRCS(LCSr,RCSr);
      RCSr.Controller = CNr.Code;
      RecordUpdate(OldRCSr,RCSr,true);
    end else begin
      CopyLCSDataToRCS(LCSr,RCSr);
      RCSr.UUID = LCSr.UUID;
      RCSr.Controller = CNr.Code;
      RecordInsert(RCSr,false);
    end;
  end;
  
  // add garbage collection for "unfound" RCS records
  
LGetDataFromCN:;
  return;
end;

global
updating procedure ASPUpdCtrlFromNodesMn(record RcVc RepSpec)
begin
  record CloudNodeVc CNr;
  
  while (LoopMain(CNr,1,true)) begin
    GetDataFromCN(CNr);
  end;
end;
