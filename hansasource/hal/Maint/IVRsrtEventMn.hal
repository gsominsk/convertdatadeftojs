external procedure IVSumup(var record IVVc,Boolean);
external procedure AddWithholdingTaxesRows_IVVc(var record IVVc);
external procedure AddPerceptionTaxesRows_IVVc(var record IVVc);
external function Boolean IVDchrsum(var record IVVc,Integer);
external procedure CalcSum(val,val,val,val,var val,Integer);
external function val FindVAT(string,val,Integer,Integer);
external function string 20 GetTax2Acc(string);
external procedure GetTaxesDiscounts(string,Date,string,string,var val,var val);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean PasteCust2InInv(var record IVVc,record LocalMachineBlock,string,Boolean,var string,var string,var string,var string,var string);

procedure ConsolidateIVr(record IVVc IVr,var record IVVc resIVr)
begin
  Row IVVc IVrw;
  Row IVVc resIVrw;
  Integer rwcnt,i;
  Integer resrwcnt,resi;
  Boolean treatedf;
  
  RecordCopy(resIVr,IVr);
  rwcnt = MatRowCnt(IVr);
  while (MatRowCnt(resIVr)>0) begin
    MatRowDelete(resIVr,0);
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    resrwcnt = MatRowCnt(resIVr);
    MatRowGet(IVr,i,IVrw);
    treatedf = false;
    for (resi=0;resi<resrwcnt;resi=resi+1) begin
      MatRowGet(resIVr,resi,resIVrw);
      if ((IVrw.Price!=0) and (IVrw.Quant!=0)) then begin
        if ((nonblank(resIVrw.ArtCode)) and (IVrw.ArtCode==resIVrw.ArtCode) and (IVrw.Price==resIVrw.Price) and (IVrw.vRebate==resIVrw.vRebate) and (IVrw.Spec==resIVrw.Spec)) then begin
          resIVrw.Quant = resIVrw.Quant + IVrw.Quant;
          MatRowPut(resIVr,resi,resIVrw);
          if (IVDchrsum(resIVr,resi)) then begin end;
          treatedf = true;
        end;
      end;
    end;
    if (treatedf==false) then begin
      MatRowPut(resIVr,resrwcnt,IVrw);
    end;
  end;
  return;
end;

updating procedure UpdateShopBaskRecordsWithIVNr(LongInt ivnr,LongInt reventnr,row RsrtEventVc RErw)
begin
  record ShopBaskVc ShopBaskr;
  record ShopBaskVc oSBr;
  record ShopBaskVc dauShopBaskr;
  Boolean found,founddaughter,testf;

  found = true;
  ShopBaskr.OwnerSerNr = reventnr;
  ShopBaskr.Owner = kShopBaskOwnerRsrtEvent;
  while (LoopKey("OwnerSerNr",ShopBaskr,2,found)) begin
    if (ShopBaskr.OwnerSerNr!=reventnr) then begin
      found = false;
    end;
    if (ShopBaskr.Owner!=kShopBaskOwnerRsrtEvent) then begin
      found = false;      
    end;
    if (found) then begin
      testf = true;
      if (ShopBaskr.Destination!=kShopBaskDestinationInvoice) then begin testf = false; end;
      if (ShopBaskr.DestinationNr!=-1) then  begin testf = false; end;
      if (nonblank(RErw.CustCode)) then begin
        if (ShopBaskr.CUCode!=RErw.CustCode) then  begin testf = false; end;
      end;
      if (ShopBaskr.DestinationNr>0) then begin testf = false; end;
      if (testf) then begin
        RecordCopy(oSBr,ShopBaskr);
        ShopBaskr.DestinationNr = ivnr;
        if (RecordUpdate(oSBr,ShopBaskr,false)) then begin
        
          ResetLoop(dauShopBaskr);
          founddaughter = true;
          dauShopBaskr.BaskNo = ShopBaskr.SerNr;
          while (LoopKey("BaskNo",dauShopBaskr,1,founddaughter)) begin
            if (dauShopBaskr.BaskNo!=ShopBaskr.SerNr) then begin
              founddaughter = false;
            end;
            if (founddaughter) then begin
              testf = true;
              if (dauShopBaskr.Destination!=kShopBaskDestinationInvoice) then begin testf = false; end;
              if (dauShopBaskr.DestinationNr!=-1) then  begin testf = false; end;
              if (nonblank(RErw.CustCode)) then begin
                if (dauShopBaskr.CUCode!=RErw.CustCode) then  begin testf = false; end;
              end;
              if (dauShopBaskr.Owner!=kShopBaskOwnerRsrtEvent) then begin testf = false; end;
              if (testf) then begin
                RecordCopy(oSBr,dauShopBaskr);
                dauShopBaskr.DestinationNr = ivnr;
                RecordUpdate(oSBr,dauShopBaskr,false);
              end;
            end;
          end;
          
        end;
      end;
    end;
  end;

  return;
end;

updating function LongInt CreateInvoice(record RsrtEventVc REr,row RsrtEventVc RErw)
begin
  LongInt res;
  record IVVc incomingIVr;
  record IVVc IVr;
  row IVVc IVrw;
  record INVc INr;
  string 255 warning,errstr,prepstr,invdatewarn,transdatewarn;
  record ShopBaskVc ShopBaskr;
  Boolean found,testf,addpricef;
  val t,s,price,reb,baseprice,temp,tax2prc,tax2reb;
  string 255 salesacc,vatcode,tax2code,tax2acc,spec,taxtemplatecode;
  Boolean calcprice;
  Boolean pritemf,dummyf;
  record GeneralOptionBlock GOb;
  record LocalMachineBlock LMb;
  
  BlockLoad(GOb);
  RecordNew(IVr);
  IVr.CustCode = RErw.CustCode;
  if (PasteCust2InInv(IVr,LMb,"",true,warning,errstr,prepstr,invdatewarn,transdatewarn)) then begin
  end;
  found = true;
  ShopBaskr.OwnerSerNr = REr.SerNr;
  ShopBaskr.Owner = kShopBaskOwnerRsrtEvent;
  while (LoopKey("OwnerSerNr",ShopBaskr,2,found)) begin
    if (ShopBaskr.OwnerSerNr!=REr.SerNr) then begin
      found = false;
    end;
    if (ShopBaskr.Owner!=kShopBaskOwnerRsrtEvent) then begin
      found = false;      
    end;
    if (found) then begin
      testf = true;
      if (ShopBaskr.Destination!=kShopBaskDestinationInvoice) then begin testf = false; end;
      if (ShopBaskr.DestinationNr!=-1) then  begin testf = false; end;
      if (nonblank(RErw.CustCode)) then begin
        if (ShopBaskr.CUCode!=RErw.CustCode) then  begin testf = false; end;
      end;
      if (testf) then begin
        if (ReadFirstItem(ShopBaskr.ItemCode,INr,true,false)) then begin
          ClearRow(IVr,IVrw,1);
          IVrw.stp = kInvoiceRowTypeNormal;
          IVrw.OrdRow = ShopBaskr.SerNr;
//              IVrw.CUPNr = ShopBaskr.DownPayIVSerNr;
          IVrw.ArtCode = ShopBaskr.ItemCode;
          IVrw.Quant = ShopBaskr.Qty;
          if (GetItemPriceDiscount3(IVrw.ArtCode,IVrw.Quant,INr,IVr.CurncyCode,
                        IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,
                        IVr.LangCode,IVr.CustCat,IVr.PriceList,IVr.RebCode,
                        price,spec,reb,vatcode,baseprice,salesacc,IVr.ExportFlag,calcprice,IVr.TransDate,IVr.TransTime,IVr.CustCode,true,dummyf,IVr.PayDeal,tax2code,tax2prc,IVr.Region,IVr.Location,taxtemplatecode)) then begin

            IVrw.Price = price;
            if (blank(ShopBaskr.Comment)) then begin
              IVrw.Spec = spec;
            end else begin
              IVrw.Spec = ShopBaskr.Comment;
            end;
            IVrw.ExciseNr = ShopBaskr.TransDate;
            IVrw.VATCode = vatcode;
            IVrw.Perceptions = INr.Perceptions;
            IVrw.BasePrice = baseprice;
            IVrw.SalesAcc = salesacc;
            GetTaxesDiscounts(IVr.CustCode,IVr.TransDate,IVrw.VATCode,tax2code,t,tax2reb);
            if (IVr.NoTax2==0) then begin
              IVrw.TAX2Code = tax2code;
              IVrw.TAX2Prc = tax2prc;
              IVrw.TAX2Reb = tax2reb;
              IVrw.TAX2Acc = GetTax2Acc(IVrw.TAX2Code);
            end;
          end;
          addpricef = true;
          if (ShopBaskr.PriceInCur!=0) then begin
            if (IVr.CurncyCode==ShopBaskr.CurncyCode) then begin          
              addpricef = false;
              IVrw.Price = ShopBaskr.PriceInCur;
            end else begin
            end;
          end;
          if (addpricef) then begin
            if (ShopBaskr.Price<>0) then begin
              if (ShopBaskr.InclVAT==IVr.InclVAT) then begin
                IVrw.Price = ShopBaskr.Price;
              end else begin
                if (IVr.InclVAT!=0) then begin
                  t = FindVAT(IVrw.VATCode,ShopBaskr.Price,IVr.InclVAT,IVr.NoTAXonVAT); // Used to be 0 in the C code
  //                    IVrw.Price = ShopBaskr.Price + t;
  //this cannot be corect, shoping basket has price incl vat and y to add vat again ? 
                  IVrw.Price = ShopBaskr.Price;
                end else begin
  //no support for prices not incl VAT                  
                end;
              end;
            end;
          end;
          if (blank(ShopBaskr.Discount)) then begin
            IVrw.vRebate = reb;
          end else begin
            IVrw.vRebate = ShopBaskr.Discount;
          end;
          if ((ShopBaskr.SortingAtTop==3) or (ShopBaskr.SortingAtTop==4)) then begin
            IVrw.vRebate = 100;
          end;
          CalcSum(IVrw.Quant,IVrw.Price,IVrw.PriceFactor,IVrw.vRebate,price,GOb.UseDiscount);
          IVrw.Sum = price;
          IVrw.Objects = ShopBaskr.Objects;
          MatRowPut(IVr,MatRowCnt(IVr),IVrw);
        end;
      end;
    end;
  end;

  

  RecordCopy(incomingIVr,IVr);
  RecordClear(IVr);
  ConsolidateIVr(incomingIVr,IVr);
  AddPerceptionTaxesRows_IVVc(IVr);
  AddWithholdingTaxesRows_IVVc(IVr);
  IVSumup(IVr,true);
  
  IVr.SerNr = NextSerNr("IVVc",IVr.TransDate,"",false,"");
  if (IVr.SerNr>0) then begin
    if (MatRowCnt(IVr)>0) then begin
      if (RecordStore(IVr,false)) then begin
        CreateRecordLink(IVr,CurrentCompany,REr,CurrentCompany);  
        CreateRecordLink(REr,CurrentCompany,IVr,CurrentCompany);          
        UpdateShopBaskRecordsWithIVNr(IVr.SerNr,REr.SerNr,RErw);
        res = IVr.SerNr;
      end;
    end;
  end;
  CreateInvoice = res;
  return;
end;

procedure UpdateRsrtEventWithIVNr(record RsrtEventVc REr,LongInt IVNr,string CustCode)
begin
  row RsrtEventVc RErw;
  Integer i,rwcnt;

  rwcnt = MatRowCnt(REr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(REr,i,RErw);
    switch (RErw.Invoicing) begin
      case kResortEventInvoiceable:
        if (RErw.CustCode==CustCode) and (RErw.IVNr<=0) then begin
          RErw.IVNr = IVNr;
          MatRowPut(REr,i,RErw);
        end;
    end;
  end;
  return;
end;

updating procedure UpdateRsrtEventPackageWithIVNr(record RsrtEventVc motherREr,LongInt SequenceNr,LongInt IVNr,string CustCode)
begin
  record RsrtEventVc oREr;
  record RsrtEventVc REr;
  row RsrtEventVc RErw;
  Integer i,rwcnt;
  record RsrtEventHistVc REHr;
  Boolean found,updf;
  
  found = true;
  REHr.SequenceNr = SequenceNr;
  while (LoopKey("SequenceNr",REHr,1,true)) begin
    if (REHr.SequenceNr!=SequenceNr) then begin found = false; end;
    if (found) then begin    
      REr.SerNr = REHr.EventNr;
      if (ReadFirstMain(REHr,1,true)) then begin
        RecordCopy(oREr,REr);
        updf = false;
        rwcnt = MatRowCnt(REr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(REr,i,RErw);
          switch (RErw.Invoicing) begin
            case kResortEventInvoiceable:
              if (RErw.CustCode==CustCode) and (RErw.IVNr<=0) and (RErw.SequenceNr==SequenceNr) then begin
                RErw.IVNr = IVNr;
                MatRowPut(REr,i,RErw);
                updf = true;
              end;
          end;
        end;
        if (updf) then begin
          RecordUpdate(oREr,REr,false);
        end;
      end;
    end;
  end;
  return;
end;

global
updating function Boolean IVRsrtEventMn_Run(var record RcVc RepSpec,Boolean singlef)
begin
  LongInt frre,tore;
  Boolean res,found,testf;
  record RsrtEventVc oREr;
  record RsrtEventVc REr;
  row RsrtEventVc RErw;
  Integer i,rwcnt;
  Integer ai,acnt;
  vector Boolean aalreadyinvoicedf;
    
  frre = FirstInRange(RepSpec.f1,10);
  tore = LastInRange(RepSpec.f1,10);
  
  found = true;
  SetLoopPosition(REr,RepSpec.long2);
  REr.SerNr = frre;
  while (LoopMain(REr,1,found)) begin
    if (nonblank(RepSpec.f1)) then begin
      if (REr.SerNr>tore) then begin found = false; end;
    end;
    if (found) then begin
      testf = true;
      if (testf) then begin
        RecordCopy(oREr,REr);
        rwcnt = MatRowCnt(REr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(REr,i,RErw);
          switch (RErw.Invoicing) begin
            case kResortEventInvoiceable:
              if (aalreadyinvoicedf[RErw.CustCode]==false) then begin
                RErw.IVNr = CreateInvoice(REr,RErw);
                aalreadyinvoicedf[RErw.CustCode] = true;  
                if (RErw.IVNr>0) then begin
                  MatRowPut(REr,i,RErw);
                  UpdateRsrtEventWithIVNr(REr,RErw.IVNr,RErw.CustCode);
                  RecordUpdate(oREr,REr,false);
                  UpdateRsrtEventPackageWithIVNr(REr,RErw.SequenceNr,RErw.IVNr,RErw.CustCode);
                end;
              end;
          end;
        end;
        res = true;
        if (singlef) then begin
          RepSpec.long2 = GetLoopPosition(REr);
          goto LIVRsrtEventMn_Run;
        end;
      end;
    end;
  end;
LIVRsrtEventMn_Run:;  
  IVRsrtEventMn_Run = res;
  return;
end;

global
updating procedure IVRsrtEventMn(record RcVc RepSpec)
begin  
  if (blank(RepSpec.f1)) then begin
    goto LIVRsrtEventMn;
  end;
//IVRsrtEventMn_Run(RepSpec);
  while (qupdating.IVRsrtEventMn_Run(RepSpec,true)) begin
  end;
LIVRsrtEventMn:;  
  return;
end;