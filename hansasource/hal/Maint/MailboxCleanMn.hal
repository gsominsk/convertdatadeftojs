external procedure DoSetMailAddrStatus(record MailVc,LongInt,Integer);
//external procedure CheckFlush(var Integer,Integer);

procedure FindUserMailboxName(string usercode,var string mailboxcode,var string tstr)
BEGIN
  record ConfVc Confr;

  tstr = "";
  mailboxcode = "";
  if (blank(usercode)) then begin goto LFindUserMailboxName; end;
  Confr.AddrCode = usercode;
  if (ReadFirstKey("AddrCode",Confr,1,true)) then begin
    tstr = Confr.AddrName;
    mailboxcode = Confr.SerNr;
  end;
LFindUserMailboxName:;
  RETURN;
END;

updating procedure SetReadFlagHAL(LongInt sernr,Integer accode,var Integer flushcnt)
BEGIN
  record MailReadVc mrr;
  record MailReadVc locmrr;
  string 60 mailboxcode,mailboxname;  
  LongInt l;

  mrr.mailSerNr = sernr;
  FindUserMailboxName(CurrentUser,mailboxcode,mailboxname);
  mrr.mailBoxNr = StringToLongInt(mailboxcode);
  mrr.accode = accode;
  mrr.fDate = CurrentDate;
  mrr.fTime = CurrentTime;
  if (accode==0) then begin
//    OnReadMail();
  end;
  RecordCopy(locmrr,mrr);
  if (ReadFirstKey("accode",locmrr,5,true)==false) then begin // Why 2.... So if one has deleted the mail, nobody else should be allowed to??
    if (RecordStore(mrr,false)) then begin
    end;
//    CheckFlush(flushcnt,10);
  end;
  RETURN;
END;

function Boolean TriedBefore(LongInt sernr,var array LongInt al,var LongInt acnt)
begin
  LongInt i;
  Boolean res;
  
  res = false;
  for (i=0;i<acnt;i=i+1) begin
    if (al[i]==sernr) then begin
      res = true;
    end;
  end;
  if (res==false) then begin
  end;
  al[acnt] = sernr;
  acnt = acnt + 1;
  TriedBefore = res;
  return;
end;

global
updating procedure RemoveUpdateHistory(record MailVc Mailr)
begin
  record MailReadVc mrr;
  string 60 mailboxcode,mailboxname;  
  
  mrr.mailSerNr = Mailr.SerNr;
  FindUserMailboxName(CurrentUser,mailboxcode,mailboxname);
  mrr.mailBoxNr = StringToLongInt(mailboxcode);
  mrr.accode = 3;
  mrr.fDate = CurrentDate;
  mrr.fTime = CurrentTime;
  if (ReadFirstKey("userCode",mrr,5,false)) then begin
    if ((mrr.mailSerNr==Mailr.SerNr) and (mrr.mailBoxNr==StringToLongInt(mailboxcode)) and 
        (mrr.accode==3) and (mrr.fDate==CurrentDate)) then begin
      RecordDelete(mrr);
    end;
  end;
  return;
end;

updating procedure EmptyThisMailbox(record ConfVc Confr,var Integer flushcnt)
BEGIN
  record MailVc Mailr;
  record MailVc oldMailr;
  String 200 ckey;
  Boolean foundf;
  array LongInt al;
  LongInt acnt;
  
  acnt = 0;
  foundf = true;
  ckey = "UserSer:" & Confr.SerNr;
  while (LoopKey(ckey,Mailr,1,foundf)) begin
/* old code
    SetReadFlagHal(Mailr.SerNr,1,flushcnt);
    MailKeyDelete(Mailr,Confr.SerNr);
    StepBack(Mailr);
*/
    RecordCopy(OldMailr,Mailr);
    DoSetMailAddrStatus(Mailr,Confr.SerNr,kMailStatusDeleted);
    if (RecordUpdate(OldMailr,Mailr,false)==0) then begin end;
    RemoveUpdateHistory(Mailr);
    StepBack(Mailr);

    if (TriedBefore(Mailr.SerNr,al,acnt)) then begin
      foundf = false;
    end;
  end;
  RETURN;
END;

global
updating procedure MailboxCleanMn(record RcVc RepSpec)
BEGIN
  record ConfVc Confr;
  Boolean Accs;
  Boolean testf;
  Integer flushcnt;
  
  if (blank(RepSpec.f1)) then begin
    MessageBox(19115,"");
    goto LMailboxCleanMn;
  end;
  Confr.AddrName = RepSpec.f1;
  Accs = true;
  while (LoopKey("AddrName",Confr,1,Accs)) begin
    testf = true;
    if (RepSpec.f1!="*") then begin
      if (Confr.AddrName!=RepSpec.f1) then begin
        Accs = false;
      end;
    end;
    if (Accs==false) then begin testf = false; end;
    if (testf) then begin
      EmptyThisMailbox(Confr,flushcnt);
    end;
    UserTrace(Confr.SerNr,M4Long);                                      
  end;
LMailboxCleanMn:;
  RETURN;
END;

function Boolean MailNewerThan(record Attach2Vc Attachr,Date thedat)
BEGIN
  record MailVc Mailr;
  record RLinkVc RLr;
  Integer mailnr;
  Boolean res,firstf;
  
  res = true;
  firstf = true;
  mailnr = 1;
  while (ReadRecordToLink(Attachr,mailnr,Mailr,RLr)) begin
    if (firstf) then begin
      res = false;
      firstf = false;
    end;
    if (Mailr.TransDate>thedat) then begin
      res = true;
      goto LMailOlderThan;
    end;
    mailnr = mailnr + 1;
  end;
LMailOlderThan:;
  MailNewerThan = res;
  RETURN;
END;

global
updating procedure ClearAttachMn(record RcVc RepSpec)
BEGIN
  record Attach2Vc Attachr;
  Boolean foundf,testf;

  Attachr.SerNr = -1;
  foundf = true;
  while (LoopMain(Attachr,1,foundf)) begin
    testf = foundf;
    if (Attachr.FileName!=RepSpec.f1) then begin
      testf = false;
    end;
    if (testf) then begin
      if (nonblankdate(RepSpec.d1)) then begin
        if (MailNewerThan(Attachr,RepSpec.d1)) then begin
          testf = false;
        end;
      end;
    end;
    if (testf) then begin
      RecordRemove(Attachr);
      StepBack(Attachr);
    end;
  end;
  RETURN;
END;

