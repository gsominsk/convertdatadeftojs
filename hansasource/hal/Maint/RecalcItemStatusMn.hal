external updating procedure ProdOperationUpdateSerialNr(record ProdOperationVc,Boolean);
external updating procedure INTransferUpdateSerialNr(record INTransferVc,Boolean,Boolean,Boolean);
external updating procedure ProdUpdateSerialNr(record ProdVc,record ProdVc,Boolean);
external updating procedure SHUpdateInShipment(record SHVc,Boolean,record SHVc,Boolean,Boolean);
external updating procedure UpdateInstock(string,string,string,string,date,val,val,val,val,val,val,val,val,val);
external updating procedure UpdatePOFromPURows(record PUVc,Boolean,record PUVc,Boolean,Boolean);
external updating function Boolean UpdatePOFromPU(record PUVc,record PUVc,Boolean);
external updating procedure StockMovUpdateSerialNr(record StockMovVc,record StockMovVc,Boolean);
external updating procedure UpdateInStockMovFromStockMov(record StockMovVc,Boolean);
external updating procedure RetUpdateSerialNr(record RetVc,Boolean);
external updating procedure RetPUUpdateSerialNr(record RetPUVc,Boolean);
external updating procedure PurUpdateSerialNr(record PUVc,Boolean,Boolean);
external updating procedure SetStockReserveQty(string,string,string,val,Boolean);
external updating procedure SDUpdateSerialNr(record SDVc,Boolean,Boolean);
external updating procedure SHUpdateSerialNr(record SHVc,Boolean,Boolean);
external updating procedure IVUpdateSerialNr(record IVVc,Boolean,Boolean);
external updating procedure WSUpdateSerialNr(record WSVc,Boolean,Boolean);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean ShouldItemUpdateStock(string);
external function Boolean ExpandStructItem(string,string,val,var record SHVc);
external updating procedure UpdatePosition(string,string,string,val,val,val);
external updating procedure SHUpdateStock(record SHVc,Boolean,Boolean);
external updating procedure StockMovUpdateStock(record StockMovVc,record StockMovVc,Boolean,Boolean,Boolean);
external updating procedure IVUpdateStock(record IVVc,Boolean);
external updating procedure RetUpdateStock(record RetVc,Boolean,Boolean,vector val);
external updating procedure UpdatePOOut(record POVc,Boolean,Boolean);
external updating procedure WSUpdateStockTool(record WSVc,Boolean,Boolean);
external updating procedure SRUpdateStock(record SRVc,Boolean);
external updating procedure SDUpdateStock(record SDVc,Boolean);
external updating procedure RetPUUpdateStock(record RetPUVc,Boolean,Boolean);
external updating procedure PurUpdateStock(record PUVc,Boolean);
external updating procedure UpdateProdOut(record ProdVc,Boolean,Boolean);
external updating procedure UpdateProdOrd2(record ProdOrderVc,Boolean,val,Boolean);
external updating procedure UpdateProdOperationOut(record ProdOperationVc,Boolean);
external updating procedure UpdateOrdOut(record ORVc,Boolean,Boolean);
external updating procedure INTransferUpdateStock(var record INTransferVc,Boolean,Boolean);

updating procedure INTransferVcs()
begin
  record INTransferVc INTransferr;
  Boolean found;
  
  while (LoopMain(INTransferr,1,true)) begin
    if (INTransferr.OKFlag!=0) then begin
      INTransferUpdateSerialNr(INTransferr,true,true,false);
      INTransferUpdateStock(INTransferr,true,false);
    end;
  end;
  return;
end;

updating procedure ORVcs()
begin
  record ORVc ORr;
  record ORVc OR2r;
  Boolean found;
  
  while (LoopMain(ORr,1,true)) begin
    if (ORr.Closed!=0) then begin
//      RecordCopy(OR2r,ORr);
//      OR2r.Closed = 0;
//      UpdateOrdOut(OR2r,false,true);
//      UpdateOrdOut(ORr,true,true);

      UpdateOrdOut(ORr,true,false);
    end else begin
      UpdateOrdOut(ORr,true,false);
    end;
  end;
  return;
end;

updating procedure ProdOperationVcs()
begin
  record ProdOperationVc ProdOperationr;
  Boolean found;
  
  while (LoopMain(ProdOperationr,1,true)) begin
    UpdateProdOperationOut(ProdOperationr,true);
    ProdOperationUpdateSerialNr(ProdOperationr,false);
  end;
  return;
end;

updating procedure ProdOrderVcs()
begin
  record ProdOrderVc ProdOrdr;
  Boolean found;
  
  while (LoopMain(ProdOrdr,1,true)) begin
    UpdateProdOrd2(ProdOrdr,true,blankval,false);
  end;
  return;
end;

updating procedure ProdVcs()
begin
  record ProdVc Prodr;
  record ProdVc dummyProdr;
  Boolean found;
  
  while (LoopMain(Prodr,1,true)) begin
    UpdateProdOut(Prodr,true,(Prodr.PRStatusFlag!=3) and (Prodr.PRStatusFlag!=5));
    ProdUpdateSerialNr(Prodr,dummyProdr,false);
  end;
  return;
end;

updating procedure PUVcs()
begin
  record PUVc PUr;
  row PUVc PUrw;
  Integer i,rwcnt;
  string 255 location;
  string 255 thelocation;
  Boolean found,poinheaderf,pofound;
  val q2,q,t,t2,t3;
  record MainStockBlock MSb;
  record POVc POr;
  row POVc POrw;
  
  BlockLoad(MSb);
  while (LoopMain(PUr,1,true)) begin
    if (PUr.OKFlag!=0) and (PUr.Invalid==0) then begin
      PurUpdateStock(PUr,false);
      PurUpdateSerialNr(PUr,false,false);

/*      
done in UpdatePOOut
PU doesnt know how many times and how much qty has been received in total
      if (PUr.PONr!=-1) then begin
        POr.SerNr = PUr.PONr;
        poinheaderf = ReadFirstMain(POr,1,true);
        pofound = poinheaderf;
//        switch (POr.OrderType) begin
//          case kOrderTypeDropShip:
//            goto LSkipPOUpdatePUVcs;
//        end;
      end;
      
      location = PUr.Location;
      if (blank(location)) then begin
        location = MSb.MainStock;
      end;
      rwcnt = MatRowCnt(PUr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(PUr,i,PUrw);
        if (poinheaderf==false) then begin 
          pofound = false;         
          if (PUrw.PONr!=-1) then begin
            pofound = ReadFirstMain(POr,1,true);
          end;
        end;
        if (pofound) then begin
          if (PUrw.OrdRow>=0) then begin
            MatRowGet(POr,PUrw.OrdRow,POrw);
            if (POrw.stp==1) and (POrw.ovst==0) then begin
              t2 = blankval;
              t3 = blankval;
              if (PUrw.Quant)
              t2 = -PUrw.Quant;
              if ((t2!=0) or (t3!=0)) then begin
                UpdateInstock("PUVc",PUr.SerNr,PUrw.ArtCode,location,POr.TransDate,t,t,t,t3,t2,t,t,t,t);
              end;
            end;
            
          end;
        end;
LSkipPOUpdateRowPUVcs:;        
      end;
LSkipPOUpdatePUVcs:;        
*/
      
      /*
      location = PUr.Location;
      if (blank(location)) then begin
        location = MSb.MainStock;
      end;
      rwcnt = MatRowCnt(PUr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(PUr,i,PUrw);
        if (blank(PUrw.Location)) then begin
          thelocation = location;
        end else begin
          thelocation = PUrw.Location;
        end;
        q = PUrw.Quant;
        switch (PUrw.ovst) begin
          case 0:
             q = PUrw.Quant;
             t2 = PUrw.Quant;
             if (ShouldItemUpdateStock(PUrw.ArtCode)==false) then begin t2 = blankval; end;
             if (MSb.UnitConvCalc==0) then begin
               q2 = t2*PUrw.Coefficient;
             end else begin
               q2 = t2/PUrw.Coefficient;
            end;
            if (blank(PUrw.PosCode)) then begin
              if (nonblank(PUrw.ToPosCode)) then begin
                UpdatePosition(PUrw.ArtCode,thelocation,PUrw.ToPosCode,t2,q2,t);
              end;
            end else begin
              UpdatePosition(PUrw.ArtCode,thelocation,PUrw.PosCode,t2,q2,t);
            end;
        end;
      end;
      */
    end;
  end;
  return;
end;

updating procedure RetPUVcs()
begin
  record RetPUVc RetPUr;
  Boolean found;
  
  while (LoopMain(RetPUr,1,true)) begin
    if (RetPUr.OKFlag!=0) then begin
      RetPUUpdateStock(RetPUr,false,true);
      RetPUUpdateSerialNr(RetPUr,false);
    end;
  end;
  return;
end;

updating procedure SDVcs()
begin
  record SDVc SDr;
  Boolean found;
  
  while (LoopMain(SDr,1,true)) begin
    if (SDr.OKFlag!=0) then begin
      SDUpdateStock(SDr,false);
      SDUpdateSerialNr(SDr,false,true);
    end;
  end;
  return;
end;

updating procedure SRVcs()
begin
  record SRVc SRr;
  Boolean found;
  
  while (LoopMain(SRr,1,true)) begin
    if (SRr.OKFlag!=0) then begin
      SRUpdateStock(SRr,false);
    end;
  end;
  return;
end;

updating procedure WSVcs()
begin
  record WSVc WSr;
  Boolean found;
  
  while (LoopMain(WSr,1,true)) begin
    WSUpdateStockTool(WSr,false,false);
    if (WSr.OKFlag!=0) then begin
      WSUpdateSerialNr(WSr,false,true);
    end;
  end;
  return;
end;

updating procedure POVcs()
begin
  record POVc POr;
  Boolean found;
  
  while (LoopMain(POr,1,true)) begin
    UpdatePOOut(POr,true,true);
  end;
  return;
end;

updating procedure RetVcs()
begin
  record RetVc Retr;
  row RetVc Retrw;
  Integer i,rwcnt;
  string 255 location;
  record MainStockBlock MSb;
  Boolean found;
  record INVc INr;
  val q2;
  vector val vgrecalcitemstat_retvc;
  LongInt lastordnr;
  
  BlockLoad(MSb);
  while (LoopKey("OrdNr",Retr,1,true)) begin
    if (Retr.OKFlag!=0) then begin
      if (lastordnr!=Retr.OrdNr) then begin
//        ClearVector(vgrecalcitemstat_retvc);
      end;
      RetUpdateStock(Retr,false,true,vgrecalcitemstat_retvc);
      RetUpdateSerialNr(Retr,false);      
      lastordnr = Retr.OrdNr;
    end;
  end;
  return;
end;

updating procedure IVVcs()
begin
  record IVVc IVr;
  Boolean found;
  
  while (LoopMain(IVr,1,true)) begin
    if (IVr.OKFlag!=0) then begin
      if (IVr.Invalid==0) then begin
        if (IVr.UpdStockFlag!=0) then begin
          IVUpdateStock(IVr,false);
          IVUpdateSerialNr(IVr,false,true);
        end;
      end;
    end;
  end;
  return;
end;

updating procedure StockMovVcs()
begin
  record StockMovVc StockMovr;
  record StockMovVc prevStockMovr;
  Boolean found;
  
  while (LoopMain(StockMovr,1,true)) begin
    StockMovUpdateStock(StockMovr,prevStockMovr,true,false,false);
    StockMovUpdateSerialNr(StockMovr,prevStockMovr,false);
    UpdateInStockMovFromStockMov(StockMovr,false);
  end;
  return;
end;

updating procedure SHVcs()
begin
  record SHVc SHr;
  record SHVc dummySHr;
  Boolean found;
  
  while (LoopMain(SHr,1,true)) begin
    if (SHr.OKFlag!=0) then begin
      SHUpdateStock(SHr,true,false);
      SHUpdateSerialNr(SHr,false,true);
    end else begin
      SHUpdateInShipment(SHr,true,dummySHr,false,false);
    end;
//updating procedure UpdateInShipment(string ac,string location,Date transdat,val q)
  end;
  return;
end;

updating procedure StockReservVcs()
begin
  record StockReservVc StockReservr;
  Boolean found;
  
  while (LoopMain(StockReservr,1,true)) begin
    if (StockReservr.Donef==0) then begin
      SetStockReserveQty(StockReservr.ArtCode,StockReservr.SerialNr,StockReservr.FromLocation,StockReservr.Quant-StockReservr.QuantDone,true);
    end;
  end;
  return;
end;

global
updating procedure RecalcItemStatusMn(record RcVc RepSpec)
begin
  record ItemStatusVc ISr;
  record PISVc PISr;
  Boolean found;
  record SerBalVc SBr;
  transaction string 255 gRuniningMaint;
  
//  SetDatabaseToUnsafeMode;

//CanOKStockRecord  
  gRuniningMaint = "RecalcItemStatusMn";
  found = true;
  while (LoopMain(ISr,1,found)) begin
    RecordDelete(ISr);
    StepBack(ISr);
  end;
  found = true;
  while (LoopMain(PISr,1,found)) begin
    RecordDelete(PISr);
    StepBack(PISr);
  end;
  found = true;
  while (LoopMain(SBr,1,found)) begin
    RecordDelete(SBr);
    StepBack(SBr);
  end;
  MaintTrace("INTransferVc");
  INTransferVcs;
  MaintTrace("POVc");
  POVcs;
  MaintTrace("ORVc");
  ORVcs;
  MaintTrace("ProdOperationVc");
  ProdOperationVcs;
  MaintTrace("ProdOrderVc");
  ProdOrderVcs;
  MaintTrace("ProdVc");
  ProdVcs;
  MaintTrace("PUVc");
  PUVcs;
  MaintTrace("RetPUVc");
  RetPUVcs;
  MaintTrace("SDVc");
  SDVcs;
  MaintTrace("SRVc");
  SRVcs;
  MaintTrace("WSVc");
  WSVcs;
  MaintTrace("RetVc");
  RetVcs;
  MaintTrace("IVVc");
  IVVcs;
  MaintTrace("StockMocVc");
  StockMovVcs;
  MaintTrace("SHVc");
  SHVcs;
  MaintTrace("StockReservVc");
  StockReservVcs;
  
//  SetDatabaseToSafeMode;
  gRuniningMaint = "";
  return;
end;