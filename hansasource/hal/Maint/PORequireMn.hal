external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean GetItemPurchasePriceDiscount(string,string,Date,string,string,val,string,string,string,string,Integer,Boolean,val,val,val,val,val,
         var record INVc,var record PIVc,var Boolean,var val,var string,var val,var string,var string,var Boolean,var string);
external updating function LongInt POVcRecordUpdate(var record POVc,record POVc,LongInt,LongInt);
external function Boolean CheckVARSubsets(record VARVc,string,string);
external procedure ExtractObj(string,var Integer,var string);
external function Integer FindYVars(string,string,string);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external procedure DivPIFactor(val,val,var val);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external procedure POMultiLineText(record POVc,record INVc,string,Integer);
external procedure GetINCostAcc(record INVc,var string);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure RoundRowSum(string,string,string,var val);
external function Boolean GetFirstItem(var string,var record INVc);
external procedure POSumup(var record POVc );
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external function string 255 FindINObjects(string,string);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function Boolean PasteVEInPO(var record POVc,Boolean);
external function Boolean GetFirstPurchaseItem2(string,string,string,var record PIVc);
external function Integer DateGetIntMonth(Date);
external Function Boolean FindPOQantity(record INVc,record ItemStatusVc,Boolean,string,record PIVc,var val,var val,var val,val,Boolean,Boolean,Boolean);

global
procedure PasteINinPO(var record POVc POr,string location,Integer rownr)
BEGIN
  Boolean itemfound,chsum,pifound;
  row POVc POrw;
  row POVc PO2rw;
  record INVc INr;
  record PIVc PIr;
  row PIVc PIrw;
  val price,t;
  string 255 tstr,costacc;
  Integer rwcnt,i;
  record GeneralOptionBlock GenOptRec;
  val reb;
  string 255 descstr,vatcode,purchacc,taxtemplatecode;
  Boolean nomoreremotecalls;
  
  if (rownr<0) then begin goto LPasteINinPO; end;
  BlockLoad(GenOptRec);  
  MatRowGet(POr,rownr,POrw);   
  tstr = POrw.ArtCode; 

  itemfound = GetItemPurchasePriceDiscount(POr.VECode,POr.Location,POr.TransDate,POr.CurncyCode,POrw.ArtCode,POrw.Quant,
                                   POr.LangCode,"","",POr.RebCode,POr.ExportFlag,true,
                                   POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,
                                   INr,PIr,pifound,price,descstr,reb,vatcode,purchacc,nomoreremotecalls,taxtemplatecode);

  
  POrw.ArtCode = tstr;
  if (itemfound) then begin
    POrw.PriceFactor = INr.PriceFactor;
  end else begin
    POrw.PriceFactor = blankval;
  end;
  if (pifound) then begin
    price = PIr.PurPrice;
    if (PIr.CurncyCode!=POr.CurncyCode) then begin
      t = MulWithRateToBase1(PIr.CurncyCode,POr.TransDate,PIr.PurPrice,DefaultCurRoundOff);
      price = DivRateToBase1(POr.CurncyCode,t,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,DefaultCurRoundOff);      
    end;
    vatcode = "";;
    GetItemVATCode(POrw.ArtCode,POr.ExportFlag,vatcode,false); 
    POrw.Price = price;
    POrw.VEArtCode = PIr.VEItemCode;
    POrw.Spec = PIr.Comment;
    POrw.VATCode = vatcode;
    if (itemfound) then begin 
      if (blank(POrw.Objects)) then begin
       POrw.Objects = FindINObjects(INr.Objects,INr.Group);
      end;
    end;    
    POrw.PIFactor = PIr.PIFactor;
    DivPIFactor(POrw.Quant,POrw.PIFactor,t);
    POrw.VEQuant = t;
    INr.Code = POrw.ArtCode;    
    rwcnt = MatRowCnt(PIr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PIr,i,PIrw);
      ClearRow(POr,PO2rw,1);
      PO2rw.Spec = PIrw.Text;
      MatRowInsert(POr,rownr+i+1,PO2rw);
    end;
  end else begin  
    if (itemfound) then begin
      price = DivRateToBase1(POr.CurncyCode,INr.InPrice,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,DefaultCurRoundOff);

      vatcode = "";
      GetItemVATCode(POrw.ArtCode,POr.ExportFlag,vatcode,false);            
      if (GetItemNameStr(1,tstr,POr.LangCode,INr.Name,INr.Code)) then begin end;
      POrw.Price = price;
      POrw.VEArtCode = "";
      POrw.Spec = tstr;
      POMultiLineText(POr,INr,POr.LangCode,rownr);
      POrw.VATCode = vatcode;
      POrw.PIFactor = blankval;
      POrw.VEQuant = POrw.Quant;
      INr.Code = POrw.ArtCode;
    end;
  end;    
  POrw.Objects = FindINObjects(INr.Objects,INr.Group);
  POrw.CostAcc = purchacc;
  MatRowPut(POr,rownr,POrw);  
  if (true) then begin
    MatRowGet(POr,rownr,POrw);  
    CalcSum(POrw.VEQuant,POrw.Price,POrw.PriceFactor,POrw.vRebate,t,GenOptRec.UseDiscount);
    RoundRowSum(POr.CurncyCode,POr.PayDeal,"POVc",t);
    if (t!=POrw.Sum) then begin
      chsum = true;
      POrw.Sum = t;
      MatRowPut(POr,rownr,POrw);  
    end;
    chsum = true;
  end;  
  if (chsum) then begin
    POSumup(POr);
  end;  
LPasteINinPO:;  
  RETURN;          
END;          

function Boolean FindPOforVECode(string vecode,var record POVc resPOp,var Array LongInt posernrs,var Integer ponr)
BEGIN
  Integer i;
  Boolean found;
  record POVc POr;
  
  if (ponr==-1) then begin
    RecordNew(resPOp);
    resPOp.VECode = vecode;
    if (PasteVEInPO(resPOp,false)) then begin end;
  end else begin
    for (i=0;i<=ponr;i=i+1) begin
      POr.SerNr = posernrs[i];
      if (ReadFirstMain(POr,1,true)) then begin 
        if (MatRowCnt(POr)<100) then begin
          if (POr.VECode==vecode) then begin
            found = true;  
            i = ponr+1;        
          end;  
        end;  
      end;      
    end;
    if (found) then begin
      RecordCopy(resPOp,POr);
    end else begin
      RecordNew(resPOp);
      resPOp.VECode = vecode;
      if (PasteVEInPO(resPOp,false)) then begin end;
    end;
  end;
  FindPOforVECode = found;
  RETURN;
END;

updating procedure AddToPO(string artcode,string location,string avecode,string qtystr,var Array LongInt posernrs,var Integer ponr,record POSettingBlock POSb)
BEGIN
  record POVc POr;
  record POVc oldPOr;
  row POVc POrw;
  Integer rwcnt;
  record PIVc PIr;
  Boolean found;
  string 20 vecode;

  if (GetFirstPurchaseItem2(artcode,location,avecode,PIr)) then begin
    vecode = PIr.VECode;
  end else begin
    vecode = POSb.DefaultSupplier;
  end;
  found = FindPOforVECode(vecode,POr,posernrs,ponr);
  if (found) then begin
    RecordCopy(oldPOr,POr);    
  end;  
  rwcnt = MatRowCnt(POr);
  ClearRow(POr,POrw,1);
  POrw.ArtCode = artcode;
  POrw.Quant = StringToVal(qtystr,M4Qty);
  MatRowPut(POr,rwcnt,POrw);  
  PasteINinPO(POr,location,rwcnt);
  if (found) then begin
    if (RecordUpdate(oldPOr,POr,false)==0) then begin 
      POVcRecordUpdate(POr,oldPOr,-1,-1);
    end;
  end else begin
    POr.SerNr = NextSerNr("POVc",POr.TransDate,-1,false,"");
    if (RecordStore(POr,false)) then begin
      ponr = ponr + 1;
      posernrs[ponr] = POr.SerNr;
    end;
  end;
  RETURN;
END;

updating procedure AddOneItemData(record RcVc RepSpec,string itemcode,record INVc INr,string vecode,Boolean varf,Date startdate,Date enddate,record POSettingBlock POSb,var Array LongInt posernrs,var Integer ponr)
begin
  record ItemStatusVc ISr;  
  val onord,instock,delinwards,theorystock,periodusage,sugorqty,minpord,months,t,minlevel,predictedsales,prodord; 
  val t1,normpoqty;
  Boolean found,printf;
  record PIVc PIr;
  Boolean pifound;
  Integer keys;
  string 255 ckey;

  pifound = GetFirstPurchaseItem2(INr.Code,RepSpec.LastAcc,vecode,PIr);
  if (RepSpec.flags[2]!=0) then begin
    if (pifound==false) then begin
      goto LProcessOneItemData;
    end;
  end;

  minpord = blankval;
  onord = blankval;
  instock = blankval;
  delinwards = blankval;
  normpoqty = blankval;
  prodord = blankval;
  if (varf) then begin
    ISr.Code = itemcode;
    ISr.Variety = Right(INr.Code,len(INr.Code)-len(itemcode));
    ISr.Location = RepSpec.LastAcc;
    keys = 3;
    ckey = "CodeVariety";
  end else begin
    ISr.Code = INr.Code;
    ISr.Location = RepSpec.LastAcc;
    keys = 2;
    ckey = "Code";
  end;
  if (ReadFirstKey(ckey,ISr,keys,true)) then begin
    onord = ISr.OrddOut;     
    instock = ISr.Instock; 
    delinwards = ISr.POUnOKQty;    
//          prodord = ISr.ProdOrd;    
  end;
  periodusage = GetTurnover(INr,"quant",startdate,enddate);
  theorystock = instock + delinwards - onord - prodord;
  months = DateGetIntMonth(enddate)-DateGetIntMonth(startdate)+1;
  if (pifound) then begin
    minpord = PIr.MinPOQty;
    normpoqty = PIr.NormPOQty;
  end;       
  predictedsales = periodusage/months;
  predictedsales = predictedsales*RepSpec.vals0;
  printf = true;
  if (RepSpec.flags[0]!=0) then begin
    if ((minpord==0) and (onord==0) and (instock==0) and (delinwards==0) and (periodusage==0)) then begin
      printf = false;
    end;
  end;
  if (printf==true) then begin
    if (RepSpec.flags[1]==1) then begin
      found = FindPOQantity(INr,ISr,varf,RepSpec.LastAcc,PIr,t1,sugorqty,minlevel,predictedsales,false,true,true);
    end else begin
      found = FindPOQantity(INr,ISr,varf,RepSpec.LastAcc,PIr,t1,sugorqty,minlevel,0,false,true,true);
    end;
  end;
  if (sugorqty>0) then begin
    AddToPO(INr.Code,RepSpec.LastAcc,vecode,sugorqty,posernrs,ponr,POSb);
  end;    
LProcessOneItemData:;
  return;
end;

updating procedure AddOneVarietyGroupRequirements(string group,string itsz,record RcVc RepSpec,record INVc INr,string vecode,string subsets,string mask,Date startdate,Date enddate,record POSettingBlock POSb,var Array LongInt posernrs,var Integer ponr)
begin
  record VARVc VARr;
  Boolean found,testf;
  Integer insz;
  string 255 artcode,itemcode,itemname;

  itemcode = INr.Code;
  itemname = INr.Name;
  if (itsz!=".") then begin
    insz = StringToInt(itsz);
  end;
  found = true;
  VARr.VARGCode = group;
  while (LoopKey("VARGCode",VARr,1,found)) begin
    if (VARr.VARGCode!=group) then begin
      found = false;
    end;
    if (found) then begin
      if (itsz!=".") then begin
        artcode = itemcode & VARr.Code;
      end else begin
        artcode = itemcode & itsz & VARr.Code;
      end;      
      INr.Code = artcode;
      INr.Name = itemname & ", " & VARr.Comment;
      testf = true;
      if (nonblank(subsets)) then begin
        if (CheckVARSubsets(VARr,subsets,mask)==false) then begin
          testf = false;
        end;
      end;    
      if (testf) then begin
        AddOneItemData(RepSpec,itemcode,INr,vecode,true,startdate,enddate,POSb,posernrs,ponr);
      end;
    end;
  end;
  return;
end;

updating procedure AddTwoVarietiesGroupRequirements(string group1,string group2,record RcVc RepSpec,record INVc INr,string vecode,string subsets,string mask,Date startdate,Date enddate,record POSettingBlock POSb,var Array LongInt posernrs,var Integer ponr)
begin
  record VARVc VARr1;
  Boolean found1,testf;
  record VARVc VARr2;
  Boolean found2;
  record VARGVc VARGr;
  Integer insz1,insz2;
  string 255 artcode,artcode1,itemcode,itemname,itsz1,itsz2,subsettotest;

  itemcode = INr.Code;
  itemname = INr.Name;
  found1 = true;
  VARr1.VARGCode = group1;
  while (LoopKey("VARGCode",VARr1,1,found1)) begin
    if (VARr1.VARGCode!=group1) then begin
      found1 = false;
    end;
    if (found1) then begin
      VARGr.Code = VARr1.VARGCode;
      ReadFIrstMain(VARGr,1,true);
      itsz1 = VARGr.VarSize;
      if (itsz1!=".") then begin
        insz1 = StringToInt(itsz1);
      end;
      if (itsz1!=".") then begin
        artcode = itemcode & VARr1.Code;
      end else begin
        artcode = itemcode & itsz1 & VARr1.Code;
      end;      
      artcode1 = artcode;
      testf = true;
      if (nonblank(subsets)) then begin
        if (CheckVARSubsets(VARr1,subsets,mask)==false) then begin
          testf = false;
        end;
      end;
      
      if (testf) then begin
        ResetLoop(VARr2);
        found2 = true;
        VARr2.VARGCode = group2;
        while (LoopKey("VARGCode",VARr2,1,found2)) begin
          if (VARr2.VARGCode!=group2) then begin
            found2 = false;
          end;
          if (found2) then begin  
            artcode = artcode1;
            VARGr.Code = VARr2.VARGCode;
            ReadFIrstMain(VARGr,1,true);
            itsz2 = VARGr.VarSize;
            if (itsz2!=".") then begin
              insz2 = StringToInt(itsz2);
            end;
            if (itsz2!=".") then begin
              artcode = artcode & VARr2.Code;
            end else begin
              artcode = artcode & itsz2 & VARr2.Code;
            end;      
            INr.Code = artcode;
            INr.Name = itemname & ", "  & VARr1.Comment & ", " & VARr2.Comment;
            testf = true;
            if (nonblank(subsets)) then begin
              if (CheckVARSubsets(VARr2,subsets,mask)==false) then begin
                testf = false;
              end;
            end;
            if (testf) then begin
              AddOneItemData(RepSpec,itemcode,INr,vecode,true,startdate,enddate,POSb,posernrs,ponr);
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

updating procedure AddThreeVarietiesGroupRequirements(string group1,string group2,string group3,record RcVc RepSpec,record INVc INr,string vecode,string subsets,string mask,Date startdate,Date enddate,record POSettingBlock POSb,var Array LongInt posernrs,var Integer ponr)
begin
  record VARVc VARr1;
  Boolean found1;
  record VARVc VARr2;
  Boolean found2;
  record VARVc VARr3;
  Boolean found3,testf;
  record VARGVc VARGr;
  Integer insz1,insz2,insz3;
  string 255 artcode,artcode1,artcode2,itemcode,itemname,itsz1,itsz2,itsz3;
  string 255 varname1,varname2,varname3;

  itemcode = INr.Code;
  itemname = INr.Name;
  found1 = true;
  VARr1.VARGCode = group1;
  while (LoopKey("VARGCode",VARr1,1,found1)) begin
    if (VARr1.VARGCode!=group1) then begin
      found1 = false;
    end;
    if (found1) then begin
      VARGr.Code = VARr1.VARGCode;
      ReadFIrstMain(VARGr,1,true);
      itsz1 = VARGr.VarSize;
      if (itsz1!=".") then begin
        insz1 = StringToInt(itsz1);
      end;
      if (itsz1!=".") then begin
        artcode = itemcode & VARr1.Code;
      end else begin
        artcode = itemcode & itsz1 & VARr1.Code;
      end;      
      artcode1 = artcode;
      testf = true;
      if (nonblank(subsets)) then begin
        if (CheckVARSubsets(VARr1,subsets,mask)==false) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        ResetLoop(VARr2);
        found2 = true;
        VARr2.VARGCode = group2;
        while (LoopKey("VARGCode",VARr2,1,found2)) begin
          if (VARr2.VARGCode!=group2) then begin
            found2 = false;
          end;
          if (found2) then begin  
            artcode = artcode1;
            VARGr.Code = VARr2.VARGCode;
            ReadFIrstMain(VARGr,1,true);
            itsz2 = VARGr.VarSize;
            if (itsz2!=".") then begin
              insz2 = StringToInt(itsz2);
            end;
            if (itsz2!=".") then begin
              artcode = artcode & VARr2.Code;
            end else begin
              artcode = artcode & itsz2 & VARr2.Code;
            end;      
            artcode2 = artcode;

            testf = true;
            if (nonblank(subsets)) then begin
              if (CheckVARSubsets(VARr2,subsets,mask)==false) then begin
                testf = false;
              end;
            end;
            if (testf) then begin
              ResetLoop(VARr3);
              found3 = true;
              VARr3.VARGCode = group3;
              while (LoopKey("VARGCode",VARr3,1,found3)) begin
                if (VARr3.VARGCode!=group3) then begin
                  found3 = false;
                end;
                if (found3) then begin
                  artcode = artcode2;
                  VARGr.Code = VARr3.VARGCode;
                  ReadFIrstMain(VARGr,1,true);
                  itsz2 = VARGr.VarSize;
                  if (itsz2!=".") then begin
                    insz2 = StringToInt(itsz2);
                  end;
                  if (itsz2!=".") then begin
                    artcode = artcode & VARr3.Code;
                  end else begin
                    artcode = artcode & itsz2 & VARr3.Code;
                  end;      
                  INr.Code = artcode;
                  INr.Name = itemname & ", "  & VARr1.Comment & ", " & VARr2.Comment & ", " & VARr3.Comment;
                  testf = true;
                  if (nonblank(subsets)) then begin
                    if (CheckVARSubsets(VARr3,subsets,mask)==false) then begin
                      testf = false;
                    end;
                  end;
                  if (testf) then begin
                    AddOneItemData(RepSpec,itemcode,INr,vecode,true,startdate,enddate,POSb,posernrs,ponr);
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

updating procedure AddVarietiesRequirements(record RcVc RepSpec,record INVc INr,string vecode,Date startdate,Date enddate,record POSettingBlock POSb,var Array LongInt posernrs,var Integer ponr)
begin
  string 255 itsz,mask,subsets,mskrep,xpos,ypos,zpos,tstr;
  Integer nrofy,pos,i,cnt;
  Array string 20 ac;

  FindItemVAR(INr.Code,itsz,mask,mskrep,subsets);
  cnt = 0;
  pos = 0;
  for (i=0;i<20;i=i+1) begin
    ExtractObj(mask,pos,tstr);
    if (nonblank(tstr)) then begin
      ac[i] = tstr;
      cnt = cnt + 1;
    end else begin
      i = 20;
    end;
  end;
  if (cnt>0) then begin xpos = ac[0]; end;
  if (cnt>1) then begin ypos = ac[1]; end;
  if (cnt>2) then begin zpos = ac[2]; end;

  nrofy = FindYVars(ypos,subsets,mask);

  switch (cnt) begin
    case 1: AddOneVarietyGroupRequirements(xpos,itsz,RepSpec,INr,vecode,subsets,mask,startdate,enddate,POSb,posernrs,ponr);
    case 2: AddTwoVarietiesGroupRequirements(xpos,ypos,RepSpec,INr,vecode,subsets,mask,startdate,enddate,POSb,posernrs,ponr);
    case 3: AddThreeVarietiesGroupRequirements(xpos,ypos,zpos,RepSpec,INr,vecode,subsets,mask,startdate,enddate,POSb,posernrs,ponr);
  end;

  return;
end;

updating procedure OneItemData(record RcVc RepSpec,record INVc INr,string vecode,Date startdate,Date enddate,record POSettingBlock POSb,var Array LongInt posernrs,var Integer ponr)
begin
  Boolean varf;
  string 255 itsz,mask,subsets,mskrep;

  if (RepSpec.flags[3]!=0) then begin 
    varf = FindItemVAR(INr.Code,itsz,mask,mskrep,subsets);
    if (varf) then begin
      AddVarietiesRequirements(RepSpec,INr,vecode,startdate,enddate,POSb,posernrs,ponr);
    end else begin
      AddOneItemData(RepSpec,INr.Code,INr,vecode,varf,startdate,enddate,POSb,posernrs,ponr);
    end;
  end else begin
    AddOneItemData(RepSpec,INr.Code,INr,vecode,varf,startdate,enddate,POSb,posernrs,ponr);
  end;
  return;
end;

updating procedure PORequirePerSupplier(record RcVc RepSpec)
begin
  Boolean found,foundpi,testf,newvef;
  record INVc INr;
  record PIVc PIr;
  record CUVc VEr;
  string 255 index;
  string 20 frin,toin; 
  string 255 frve,tove;
  Date enddate,startdate;
  Integer sort;
  Integer ponr;
  record POSettingBlock POSb;
  Array LongInt posernrs;
  
  ponr = -1;
  BlockLoad(POSb);
  enddate = RepSpec.sEndDate;
  enddate = AddDay(enddate,-GetDay(enddate)+DaysInMonth(GetYear(enddate),GetMonth(enddate)));
  
  startdate = RepSpec.sStartDate;
  startdate = AddDay(startdate,-GetDay(startdate)+1);
  
  frin = FirstInRange(RepSpec.f1,20);
  toin = LastInRange(RepSpec.f1,20);
  frve = FirstInRange(RepSpec.f2,20);
  tove = LastInRange(RepSpec.f2,20);
  sort = 0;
  index = "Code";
  if (blank(RepSpec.f2)) then begin 
    if (nonblank(RepSpec.AccStr)) then begin
      index = "VECat";
      sort = 1;
      VEr.VECat = RepSpec.AccStr;
    end;
  end;
  found = true;
  VEr.Code = frve;
  while (LoopKey(index,VEr,1,found)) begin
    switch (sort) begin
      case 0:
        if (nonblank(RepSpec.f2)) then begin
          if (VEr.Code>tove) then begin found = false; end;
        end;
      case 1:
        if (nonblank(RepSpec.AccStr)) then begin
          if (VEr.VECat!=RepSpec.AccStr) then begin found = false; end;
        end;
    end;
    if (found) then begin
      testf = true;
      if (nonblank(RepSpec.AccStr)) then begin
        if (VEr.VECat!=RepSpec.AccStr) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (SetInSet(RepSpec.f3,VEr.Classification)==false) then begin testf = false; end;
      end;
      if (testf) then begin
        newvef = true;
        foundpi = true;
        ResetLoop(PIr);
        PIr.VECode = VEr.Code;
        PIr.ItemCode = frin;
        while (LoopKey("Vendor",PIr,2,foundpi)) begin
          if (PIr.VECode!=VEr.Code) then begin foundpi = false; end;
          if (nonblank(RepSpec.f1)) then begin
            if (PIr.ItemCode>toin) then begin found = false; end;
          end;
          if (foundpi) then begin
            testf = true;
            if (PIr.DefaultChoice==0) then begin testf = false; end;
            if (testf) then begin
              testf = ReadFirstItem(PIr.ItemCode,INr,true,false);
            end;
            if (testf) then begin
              if (nonblank(RepSpec.FirstAcc)) then begin
                if (INr.Group!=RepSpec.FirstAcc) then begin
                  testf = false;
                end;
              end;
              if (INr.Terminated!=0) then begin testf = false; end;
              if (INr.ItemType!=1) then begin testf = false; end;
              if (RepSpec.flags[0]==0) then begin
                if (INr.InclItemFreight!=0) then begin testf = false; end;
              end;
            end;
            if (testf) then begin
              if (newvef) then begin
                newvef = false;
              end;
              OneItemData(RepSpec,INr,VEr.Code,startdate,enddate,POSb,posernrs,ponr);
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

global
updating procedure PORequireMn(record RcVc RepSpec)
begin
  record INVc INr;
  record ItemStatusVc ISr;  
  Boolean TrHs,testf;
  string 20 frin,toin; 
  val onord,instock,delinwards,theorystock,periodusage,sugorqty,months,prodord,predictedsales; 
  Date enddate,startdate;
  string 20 vecode;
  Integer ponr;
  Array LongInt posernrs;
  record POSettingBlock POSb;
  val minlevel,t1;
  record PIVc PIr;
  Boolean found,pifound,vef;
 
  vef = nonblank(RepSpec.f2) or nonblank(RepSpec.AccStr) or nonblank(RepSpec.f3);
 
  if (vef) then begin
    PORequirePerSupplier(RepSpec);
  end else begin
    BlockLoad(POSb);
    ponr = -1;
    enddate = RepSpec.sEndDate;
    enddate = AddDay(enddate,-GetDay(enddate)+DaysInMonth(GetYear(enddate),GetMonth(enddate)));
  
    startdate = RepSpec.sStartDate;
    startdate = AddDay(startdate,-GetDay(startdate)+1);
  
    frin = FirstInRange(RepSpec.f1,20);
    toin = LastInRange(RepSpec.f1,20);
  
    TrHs = true;
    INr.Code = frin;
    while (LoopMain(INr,1,TrHs)) begin
      if (nonblank(RepSpec.f1)) then begin
        if (INr.Code>toin) then begin TrHs = false; end;
      end;
      if (TrHs) then begin
        testf = true;
        if (nonblank(RepSpec.FirstAcc)) then begin
          if (INr.Group!=RepSpec.FirstAcc) then begin
            testf = false;
          end;
        end;
        if (INr.ItemType!=1) then begin testf = false; end;
        if (testf) then begin
          OneItemData(RepSpec,INr,"",startdate,enddate,POSb,posernrs,ponr);
        end;
        MaintTrace(INr.Code);
      end;
    end;
  end;
  return;
end;

  