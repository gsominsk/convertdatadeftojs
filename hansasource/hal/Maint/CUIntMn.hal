external function roundmode SetRoundModeD(Integer);
external procedure IVVc_CalculatePayDate(var record IVVc);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external procedure CalcPrice(val,val,val,var val,Integer);
external function string 255 FindNextLegalSerNr(record IVVc,string);
external procedure CheckFlush(var Integer,Integer);
external function Integer GetIntYc(Date);
external procedure HTCusts(string, string, var string);
external procedure HT2Per(Date, Date , var string);
external function Boolean GetDateIRInt(string,Date,record IRVc,var Date,string);
external procedure CalcInt2(Boolean,val,LongInt,val,var val);
external updating function Integer RemLevelOneUp(LongInt,Integer,Boolean);
external function string 255 CreateInvoiceNumber(LongInt,string);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function LongInt DateDiff(Date,Date);
external procedure MulM4ProcVal(val,val,var val);
external function Boolean GetRebate(record INVc,var val,var val,string,string,var val,var Boolean,Date);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external procedure GetItemSalesAcc(string,Integer,var string);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure PastePDInInv(var record IVVc,string,Boolean);
external function Boolean PasteCustInInv(var record IVVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure IVSumup(var record IVVc,Boolean);

procedure IntRepInvoice(record IVVc IVr,Integer com,record IIBlock IIRec)
begin
  row IVVc IVrw;
  string 255 tstr,t2;
  Integer i,rwcnt;
  val qty,sum1,sum3;
  record IVVc IV2r;

  qty = 0;
  StartFormat(15);
  OutString(0,0,CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr),false);
  tstr = "";
  if (IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeNormalSpecialSales) then begin
    tstr = USetStr(1803);
  end;
  if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
    tstr = USetStr(1804);
  end;
  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
    tstr = USetStr(1805);
  end;
  if (IVr.InvType==kInvoiceTypeInterest) then begin
    tstr = USetStr(1810);
  end;
  if (IVr.InvType==kInvoiceTypeDebit) then begin
    tstr = USetStr(23250);
  end;
  if (IVr.InvType==kInvoiceTypePrepayment) then begin
    tstr = USetStr(1876);
  end;
  if (IVr.InvType==kInvoiceTypeDownpayment) then begin
    tstr = USetStr(1818);
  end;
  OutString(50,0,tstr,false);
  OutDate(130,0,IVr.InvDate,false);
  OutDate(220,0,IVr.PayDate,false);
  //OutString(270,0,IVr.pdComment,false);
  OutLongInt(350,0,IVr.OrderNr,false);
  EndFormat;
  StartFormat(15);
  OutString(50,0,IVr.CustCode,false);
  OutString(220,0,IVr.Addr0,false);
  EndFormat;
  StartFormat(15);
  OutString(50,0,IVr.CustCat,false);
  OutString(220,0,IVr.Addr1,false);
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(50,0,IVr.OurContact,false);
  OutString(220,0,IVr.Addr2,false);
  EndFormat;
  if (IVr.Addr3<>"") then begin
    StartFormat(15);
    OutString(220,0,IVr.Addr3,false);
    EndFormat;
  end;
  if (IVr.ClientContact<>"") then begin
    StartFormat(15);
    OutString(220,0,IVr.ClientContact,false);
    EndFormat;
  end;
  if (IVr.CurncyCode<>"") then begin
    StartFormat(15);
    OutString(460,0,IVr.CurncyCode,true);
    EndFormat;
  end;
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp==3) then begin
      StartFormat(15);
      t2 = USetStr(1807);
      tstr = IVrw.OrdRow;
      t2 = t2 & tstr;
      OutString(130,0,t2,false);
      EndFormat;
    end;
    if ((IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==4) or (IVrw.stp==kInvoiceRowTypeVoid)) then begin
      if (IVrw.stp==kInvoiceRowTypeVoid) then begin
        IVrw.Quant = -IVrw.Quant;
        IVrw.Sum = -IVrw.Sum;
      end;
      StartFormat(15);
      if (IVrw.ArtCode!=IIRec.FeeItem) then begin
        qty = qty + IVrw.Quant;
      end;
      IV2r.SerNr = StringToLongInt(IVrw.ArtCode);
      if (ReadFirstMain(IV2r,1,true)) then begin
        OutStringID(20,"DblIVVc",IVrw.ArtCode,false,IVr.SerNr);
      end else begin 
        OutString(20,0,IVrw.ArtCode,false);
      end;
      OutVal(104,0,IVrw.Quant,M4UVal,true);
      OutString(110,0,IVrw.Spec,false);
      if (IVrw.BasePrice!=0) then begin
        OutVal(350,0,IVrw.BasePrice,M423Val,true);
      end else begin
        OutVal(350,0,IVrw.Price,M423Val,true);
      end;
      OutVal(380,0,IVrw.vRebate,M41Val,true);
      OutVal(460,0,IVrw.Sum,M4Val,true);
      OutString(480,0,IVrw.VATCode,true);
      EndFormat;
    end;
    if (IVrw.stp==5) then begin
      StartFormat(15);
      OutString(20,0,USetStr(4869),false);
      OutString(130,0,IVrw.Spec,false);
      OutVal(460,0,IVrw.Sum,M4Val,true);
      OutString(480,0,IVrw.VATCode,true);
      EndFormat;
    end;
  end;
  if (IVr.FrPrice<>0) then begin
    StartFormat(15);
    OutString(20,0,IVr.FrItem,false);
    OutString(104,0,"1",true);
    OutVal(350,0,IVr.FrPrice,M4Val,true);
    OutVal(460,0,IVr.FrPrice,M4Val,true);
    OutString(480,0,IVr.FrVATCode,true);
    EndFormat;
  end;
  Black_Divider(380,460);
  StartFormat(15);
  if (IVr.ExportFlag!=0) then begin
    OutString(20,0,USetStr(2367),false);
  end;
  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
    sum1 = -IVr.Sum1;
    sum3 = -IVr.Sum3;
  end else begin
    sum1 = IVr.Sum1;
    sum3 = IVr.Sum3;
  end;
  OutString(70,0,USetStr(11312),false);
  OutString(150,0,USetStr(3185),false);
  OutString(230,0,USetStr(6707),false);
  if (IVr.TAX1Sum!=blankval) then begin
    OutString(320,0,"TAX",true);    
  end;
  OutVal(460,0,sum1,M4Val,true);//280
  EndFormat;
  StartFormat(15);
  OutVal(104,0,qty,M4UVal,true);
  OutString(150,0,IVr.Objects,false);
  OutVal(230,0,sum3,M4Val,false);
  if (IVr.TAX1Sum!=blankval) then begin
    OutVal(320,0,IVr.TAX1Sum,M4Val,true);
  end;
  EndFormat;
  if (com<>0) then begin
    if (nonblank(IVr.InvComment)) then begin
      StartFormat(15);
      OutString(0,0,IVr.InvComment,false);
      EndFormat;
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  EndFormat;
  return;
end;

procedure CalcIntDueDays(Integer IncLeapYear,Boolean notduedatef,Date DueDate,Date todtp,var LongInt intdays,var LongInt leapintdays)
begin
  LongInt latedays;
  Date sd,ed;
  Integer year;

  leapintdays = 0;
  intdays = 0;
  
  latedays = DateDiff(DueDate,todtp);
  if (notduedatef) then begin
    latedays = latedays - 1;
  end;  
  if (IncLeapYear==0) then begin
    intdays = -latedays;
  end else begin
    sd = DueDate;
    ed = sd; ed.month = 12; ed.day = 31;

    year = DueDate.year;
    while (year<=todtp.year) begin
      if (ed>todtp) then begin
        ed = todtp;
      end;
      latedays = DateDiff(sd,ed);
      if (notduedatef) then begin
        latedays = latedays - 1;
      end;     
      if (latedays<0) then begin
        if (IsLeapYear(ed.year)) then begin
          leapintdays = leapintdays - latedays;
        end else begin
          intdays = intdays - latedays;
        end;
      end;
      sd = AddDay(ed,1);
      ed = sd; ed.month = 12; ed.day = 31;
      year = year + 1;
    end;
  end;
  return;
end;

updating procedure AddIntRow(record IIBlock IIRec,record IVVc intIVp,Date DueDate,val RVal,LongInt InvoiceNr,Date orginvduedate,Date todtp,LongInt amaxintdays,Integer aexport,val intrate,Integer repmode,Boolean notduedatef,Boolean irf,
                             var val totintb1sum,roundmode rm)
BEGIN
  row IVVc IVrw;
  LongInt intdays,latedays,leapintdays;
  string 255 tstr;
  val intsum,t;
  val rs;
  Integer rwcnt,remlev;
  
  if ((InvoiceNr<=0) or (blankdate(DueDate))) then begin goto LAddIntRow; end;
  remlev = -1;
  CalcIntDueDays(IIRec.IncLeapYear,notduedatef,DueDate,todtp,intdays,leapintdays);
  if (intdays<=0) and (leapintdays<=0) then begin
    goto LAddIntRow;
  end;  

  if (IIRec.Int2Model==0) then begin
    if ((intdays+leapintdays)>amaxintdays) then begin intdays = amaxintdays; end;
  end;
  switch (IIRec.IntModel) begin
    case 0:
      if (intdays>0) then begin
        CalcInt2(false,RVal,intdays,intrate,intsum);
      end;
      if (leapintdays>0) then begin
        CalcInt2(true,RVal,leapintdays,intrate,t);
        intsum = intsum + t;
      end;
    case 1:
      if (intdays>0) then begin
        CalcInt2(false,RVal,intdays,intrate,intsum);
      end;
      if (leapintdays>0) then begin
        CalcInt2(true,RVal,leapintdays,intrate,t);
        intsum = intsum + t;
      end;
    case 2:
      if (intdays>0) then begin
        MulM4ProcVal(intrate,RVal,intsum);        
      end;
  end;
  if ((intdays+leapintdays)<IIRec.MinDays) then begin
    goto LAddIntRow;
  end;
  rs = MulRateToBase1(intIVp.CurncyCode,intsum,intIVp.FrRate,intIVp.ToRateB1,intIVp.ToRateB2,intIVp.BaseRate1,intIVp.BaseRate2,DefaultCurRoundOff);

//  if (rs<IIRec.MinInt) then begin  //DONE on  Invoice Total
//    goto LAddIntRow;
//  end;
  if (intIVp.PayDate<CurrentDate) then begin
    intIVp.PayDate = CurrentDate;
  end;
/*
  if (IIRec.InclNotDue==0) then begin       
    if (intIVp.PayDate<CurrentDate) then begin
      goto LAddIntRow;
    end;
  end;
*/  
// What does InclNotDue actually do?
  if ((intsum>0) or (IIRec.InclNotDue!=0)) then begin
    if (intsum>0) then begin
      if (latedays<0) then begin
        remlev = RemLevelOneUp(InvoiceNr,repmode,IIRec.IncreaseRem!=0);
      end;
    end;
    rwcnt = MatRowCnt(intIVp);
    ClearRow(intIVp,IVrw,4);
    IVrw.ArtCode = InvoiceNr;
    IVrw.Spec = orginvduedate;
    if (irf) then begin
      IVrw.Spec = DueDate;
    end else begin
      IVrw.Spec = orginvduedate;
    end;
    IVrw.Quant = intdays+leapintdays;
    IVrw.vRebate = intrate;
    IVrw.Sum = Round(intsum,rm);
    GetItemSalesAcc(IIRec.ArtCode,aexport,tstr);
    IVrw.SalesAcc = tstr;
    GetItemVATCode(IIRec.ArtCode,aexport,tstr,true);
    IVrw.VATCode = tstr;
    IVrw.OrdRow = remlev;
    IVrw.BasePrice = RVal;
    MatRowPut(intIVp,rwcnt,IVrw);
    totintb1sum = totintb1sum + rs;
  end;
LAddIntRow:;
  RETURN;
END;

procedure PasteItemInInv(record IVVc IVp,record INVc INp,Integer rownr,Integer UseDiscount)
BEGIN
  row IVVc IVrw;
  string 255 tstr;
  val price,t;
  Boolean staff;

  MatRowGet(IVp,rownr,IVrw);
  IVrw.ArtCode = INp.Code;
  if (GetItemNameStr(1,tstr,IVp.LangCode,INp.Name,INp.Code)) then begin end;
  IVrw.Spec = tstr;
  price = INp.UPrice1;
  GetItemVATCode(INp.Code,IVp.ExportFlag,tstr,true);
  IVrw.VATCode = tstr;
  GetItemSalesAcc(INp.Code,IVp.ExportFlag,tstr);
  IVrw.SalesAcc = tstr;  
  IVrw.Price = DivRateToBase1(IVp.CurncyCode,price,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);          
  IVrw.BasePrice = INp.InPrice + INp.ExtraCost;
  if (GetRebate(INp,IVrw.Price,IVrw.Quant,IVp.CustCat,IVp.RebCode,t,staff,IVp.InvDate)) then begin end;
  IVrw.vRebate = t;
  IVrw.PriceFactor = INp.PriceFactor;
  price = IVrw.Price; 
  CalcPrice(IVrw.BasePrice,IVrw.PriceFactor,IVrw.vRebate,price,UseDiscount);
  IVrw.Price = price;  
  CalcSum(IVrw.Quant,IVrw.Price,IVrw.PriceFactor,IVrw.vRebate,t,UseDiscount);
  IVrw.Sum = t;
  MatRowPut(IVp,rownr,IVrw);
  RETURN;
END;

procedure InsertFeeItem(record IIBlock IIRec,record IVVc IVp)
BEGIN
  record GeneralOptionBlock GenOptr;
  record INVc INr;
  row IVVc IVblankrw;
  row IVVc IVrw;
  val rs,t,price;
  Integer rows;
  Integer rwcnt;
  
  BlockLoad(GenOptr);
  IVSumup(IVp,true);
  rs = MulRateToBase1(IVp.CurncyCode,IVp.Sum4,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
  if (IVp.Sum4<=0) then begin
    goto LInsertFeeItem;
  end;
  if (nonblank(IIRec.FeeItem)) then begin
    INr.Code = IIRec.FeeItem;
    if (ReadFirstMain(INr,1,true)) then begin
      rwcnt = MatRowCnt(IVp);
      rows = 2;
      MatRowGet(IVp,rwcnt-1,IVblankrw);
      if (IVblankrw.Spec==" ") then begin rows = 1; end;
      if (rows==2) then begin
        ClearRow(IVp,IVblankrw,1);
        IVblankrw.Spec = " ";
        MatRowPut(IVp,rwcnt,IVblankrw);
        rwcnt = rwcnt + 1;
      end;
      ClearRow(IVp,IVrw,1);
      MatRowPut(IVp,rwcnt,IVrw);
      PasteItemInInv(IVp,INr,rwcnt,GenOptr.UseDiscount);
      MatRowGet(IVp,rwcnt,IVrw);
      IVrw.Quant = 1;
      price = IVrw.Price; 
      CalcPrice(IVrw.BasePrice,IVrw.PriceFactor,IVrw.vRebate,price,GenOptr.UseDiscount);
      IVrw.Price = price;  
      CalcSum(IVrw.Quant,IVrw.Price,IVrw.PriceFactor,IVrw.vRebate,t,GenOptr.UseDiscount);
      IVrw.Price = t;
      IVrw.Sum = t;
      MatRowPut(IVp,rwcnt,IVrw);
    end;
  end;
LInsertFeeItem:;
  RETURN;
END;

procedure SetupIntInvoice(record RcVc RepSpec,record IIBlock IIRec,record CUVc CUp,var record IVVc IVp,Date fromdtp,Date todtp,var LongInt invnr)
BEGIN
  string 255 t1,t2;
  string 255 tstr;
  record SRBlock SRRec;
  val fr,to1,to2,br1,br2;
  Date blankd;
  string 10 curncy;
   
  BlockLoad(SRRec);
  IVp.InvType = kInvoiceTypeInterest;
  if (blankdate(RepSpec.RegDate)) then begin
    IVp.InvDate = CurrentDate;
  end else begin
    IVp.InvDate = RepSpec.RegDate;
  end;
  IVp.NoTAXonVAT = 0;
  IVp.TransDate = IVp.InvDate;
  curncy = CUp.CurncyCode;
  GetFullCurncyRate(curncy,IVp.TransDate,fr,to1,to2,br1,br2);
  IVp.CurncyCode = curncy;
  IVp.FrRate = fr;
  IVp.ToRateB1 = to1;
  IVp.ToRateB2 = to2;
  IVp.BaseRate1 = br1;
  IVp.BaseRate2 = br2;
  IVp.Prntdf = 0;
  IVp.OrderNr = -1;
  IVp.SVONr = -1;
  IVp.OKFlag = 0;
  IVp.Objects = "";
  IVp.OurContact = "";
  IVp.InvComment = "";
  IVp.Sum0 = blankval;
  IVp.Sum1 = blankval;
  IVp.Sum2 = blankval;
  IVp.Sum3 = blankval;
  IVp.Sum4 = blankval;
  IVp.InclVAT = 0;
  IVp.CustCode = CUp.Code;
  if (PasteCustInInv(IVp)) then begin
  end;
  if (invnr==-1) then begin
    invnr = NextSerNr("IVVc",IVp.TransDate,SRRec.LastIntNr,true,IVp.LangCode);
  end else begin
    invnr = invnr + 1;
  end;
  IVp.SerNr = invnr;
  if (IVp.SerNr==-1) then begin
    IVp.SerNr = NextSerNr("IVVc",IVp.TransDate,SRRec.LastIntNr,true,IVp.LangCode);
  end;
  SRRec.LastIntNr = IVp.SerNr;
  if (nonblank(IIRec.PayDeal)) then begin
    IVp.PayDeal = IIRec.PayDeal;
  end;
  PastePDInInv(IVp,"",true);
  if (blankdate(IVp.PayDate)) then begin IVp.PayDate = IVp.InvDate; end;
  IVp.LastRemndr = -1;
  IVp.LastRemDate = blankd;
  IVp.SalesMan = RepSpec.FirstAcc;
  if (nonblank(RepSpec.AccStr)) then begin
    IVp.ARAcc = RepSpec.AccStr;
  end;
  RETURN;
END;

procedure FindAndReduceCredits(var record IVVc IVr)
begin
  record IVVc credIVr;
  Boolean foundf;
  
  foundf = true;
  credIVr.CredInv = IVr.SerNr;
  while(LoopKey("CredInv",credIVr,1,foundf)) begin
    if (credIVr.CredInv!=IVr.SerNr) then begin
      foundf = false;
    end;
    if (foundf) then begin
      IVr.Sum4 = IVr.Sum4 - credIVr.Sum4;
    end;
  end;
  return;
end;

function val PrepaidAmount(record IVVc IVp)
BEGIN
  row IVVc IVrw;
  Integer i,rwcnt;
  val res;
  
  rwcnt = MatRowCnt(IVp);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (IVrw.stp==6) then begin
      res = res + IVrw.Sum;
    end;
  end;
  PrepaidAmount = res;
  RETURN;
END;

updating procedure FindAndAddRecipts(record RcVc RepSpec,record IVVc intIVp,record IVVc IVr,record BaseCurBlock BCb,record IIBlock IIRec,val cuintratp,var Date lfromdtp,Date todtp,Integer repmode,var Integer rwcnt)
begin
  record IPrsVc IPrsr;
  record IPVc IP2r;
  row IPVc IPrw;
  row IPVc IP2rw;
  Date paydate;
  Boolean foundf,irf;
  string 255 intcode;
  Integer iprwcnt,i,j;
  val intrate,ov,t;
  LongInt lmaxintdays;
  record IRVc IRr;
  row IRVc IRrw;
  Boolean irfound;
  Date td,blankd;
  record PurgeTRVc PurgeTRr;
  record TRVc TRr;
  row TRVc TRrw;
  record CLInVc CLInr;
  row CLInVc CLInrw;
  record ARVc ARr;
  val totintb1sum;
  record IntVc Intr;
  Boolean intcodefoundf;
  val curov;
  Integer ii,irwcnt;
  roundmode rm;

  rm = SetRoundModeD(2);
  lmaxintdays = DateDiff(todtp,lfromdtp)+1;
  if (nonblank(IVr.IntCode)) then begin
    Intr.Code = IVr.IntCode;
  end else begin
    Intr.Code = IIRec.IntCode;
  end;
  intcodefoundf = ReadFirstMain(Intr,1,true);
  if (intcodefoundf) then begin
    rm = SetRoundModeD(Intr.RndTotal);
  end;
  switch (IIRec.IntModel) begin
    case 0:
      intrate = StringToVal(IVr.IntCode,M4Val);
    otherwise
      if (cuintratp!=0) then begin
        intrate = cuintratp;
      end else begin
        intrate = IIRec.IntRate;
      end;
  end;
  switch (IIRec.Int2Model) begin
    case 1:
      ARr.InvoiceNr = IVr.SerNr;
      if (ReadFirstMain(ARr,1,true)) then begin goto LFindAndAddRecipts; end;
  end;
  ov = IVr.Sum4 - PrepaidAmount(IVr);
  foundf = true;
  IPrsr.IVNr = IVr.SerNr;
  IPrsr.TransDate = RepSpec.d1;
//  IPrsr.TransType = kIPrsTransTypeReceipt;, not only receipts paying invoices
  while (LoopKey("IVKeyCustDate",IPrsr,2,foundf)) begin
    if (IPrsr.IVNr!=IVr.SerNr) then begin foundf = false; end;
    if (IPrsr.TransDate>RepSpec.d2) then begin foundf = false; end;
    if (foundf) then begin
      switch (IPrsr.TransType) begin
        case kIPrsTransTypeInvoice: ;
        case kIPrsTransTypeReceipt:
          if ((rwcnt<199) and (ov>0)) then begin          
            IP2r.SerNr = IPrsr.TransNr;
            if (ReadFirstMain(IP2r,1,true)) then begin
              if (IP2r.RejectedFlag==0) then begin
                iprwcnt = MatRowCnt(IP2r);
                for (i=0;i<iprwcnt;i=i+1) begin
                  MatRowGet(IP2r,i,IPrw);
                  if ((IPrw.ovst==0) and (IPrw.stp==1) and (IPrw.PayDate==IPrsr.CustDate) and (IPrw.InvoiceNr==IPrsr.IVNr)) then begin
                    for (j=i+1;j<iprwcnt;j=j+1) begin
                      MatRowGet(IP2r,j,IP2rw);
                      if ((IP2rw.ovst==0) and ((IP2rw.stp==1) or (IP2rw.stp==5) or (IP2rw.stp==6)) and (IP2rw.PayDate==IPrsr.CustDate) and (IP2rw.InvoiceNr==IPrsr.IVNr)) then begin
                        ov = ov - IP2rw.InvVal;
                      end;
                    end;
                    if (DateInRange(IPrsr.TransDate,RepSpec.d1,RepSpec.d2)) then begin
                      paydate = IPrw.PayDate;
                      if (blankdate(paydate)) then begin
                        paydate = IPrsr.TransDate;
                      end;
                      if (paydate>todtp) then begin
                        paydate = todtp;
                      end; 
// Take a moment and think about how this should work, then you add the functionallity. How it used to work was not at all.....
                      irf = false;
                      if (intcodefoundf) then begin
                        ResetLoop(IRr);
                        irfound = true;
                        while (irfound) begin 
                          irfound = GetDateIRInt(Intr.Code,lfromdtp,IRr,td,"");
                          if (lfromdtp>todtp) then begin 
                            irfound = false; 
                          end;
                          if (lfromdtp>paydate) then begin 
                            irfound = false; 
                          end;
                          if (irfound) then begin
                            irwcnt = MatRowCnt(IRr);
                            if (irwcnt>0) then begin
                              intrate = 0;
                              for (ii=0;ii<irwcnt;ii=ii+1) begin
                                MatRowGet(IRr,ii,IRrw);
                                if (ov<=IRrw.limit) then begin
                                  intrate = IRrw.rate;
                                  ii = irwcnt;
                                end;
                                if (ii==(irwcnt-1)) then begin
                                  intrate = IRrw.rate;
                                end;
                              end;
                              if (blankdate(td)) then begin
                                td = todtp;
                              end;
                              if (td>paydate) then begin
                                td = paydate;
                              end;
                              AddIntRow(IIRec,intIVp,lfromdtp,ov,IVr.SerNr,IVr.PayDate,td,lmaxintdays,intIVp.ExportFlag,IRrw.rate,repmode,true,intcodefoundf,totintb1sum,rm);
                              rwcnt = rwcnt + 1;
                              lfromdtp = AddDay(td,1);
                              td = blankd;
                              irf = true;
                            end;
                          end;
                        end;
                      end;
                      if (irf==false) then begin
                        if (IVr.CurncyCode!=intIVp.CurncyCode) then begin
                          CurValToOtherCur(IVr.InvDate,IVr.CurncyCode,ov,intIVp.CurncyCode,curov,DefaultCurRoundOff);
                          AddIntRow(IIRec,intIVp,lfromdtp,curov,IVr.SerNr,IVr.PayDate,paydate,lmaxintdays,intIVp.ExportFlag,intrate,repmode,true,intcodefoundf,totintb1sum,rm);
                        end else begin
                          AddIntRow(IIRec,intIVp,lfromdtp,ov,IVr.SerNr,IVr.PayDate,paydate,lmaxintdays,intIVp.ExportFlag,intrate,repmode,true,intcodefoundf,totintb1sum,rm);
                        end;
                        if (paydate>IVr.PayDate) then begin
                          lfromdtp = AddDay(paydate,1);
                        end;
                        rwcnt = rwcnt + 1;
                      end;
                    end; // DateInRange
                    ov = ov - IPrw.InvVal;
                  end;
                end;
              end;
            end;
          end;
        case kIPrsTransTypePurgeNLTransaction:
          if ((rwcnt<199) and (ov>0)) then begin          
            PurgeTRr.Number = IPrsr.TransNr;
            PurgeTRr.IntYc = GetIntYc(IPrsr.TransDate);
            PurgeTRr.TransRow = IPrsr.TransRow;
            if (ReadFirstMain(PurgeTRr,3,true)) then begin
              if ((PurgeTRr.TransDate==IPrsr.CustDate) and (PurgeTRr.SerNr==IPrsr.IVNr)) then begin
                if (DateInRange(IPrsr.TransDate,RepSpec.d1,RepSpec.d2)) then begin
                  paydate = PurgeTRr.TransDate;
                  if (blankdate(paydate)) then begin
                    paydate = IPrsr.TransDate;
                  end;
                  if (paydate>todtp) then begin
                    paydate = todtp;
                  end; 
                  irf = false;
                  if (intcodefoundf) then begin
                    ResetLoop(IRr);
                    irfound = true;
                    while (irfound) begin 
                      irfound = GetDateIRInt(Intr.Code,lfromdtp,IRr,td,"");
                      if (lfromdtp>todtp) then begin 
                        irfound = false; 
                      end;
                      if (lfromdtp>paydate) then begin 
                        irfound = false; 
                      end;
                      if (irfound) then begin
                        irwcnt = MatRowCnt(IRr);
                        if (irwcnt>0) then begin
                          intrate = 0;
                          for (ii=0;ii<irwcnt;ii=ii+1) begin
                            MatRowGet(IRr,ii,IRrw);
                            if (ov<=IRrw.limit) then begin
                              intrate = IRrw.rate;
                              ii = irwcnt;
                            end;
                            if (ii==(irwcnt-1)) then begin
                              intrate = IRrw.rate;
                            end;
                          end;
                          if (blankdate(td)) then begin
                            td = todtp;
                          end;
                          if (td>paydate) then begin
                            td = paydate;
                          end;
                          AddIntRow(IIRec,intIVp,lfromdtp,ov,IVr.SerNr,IVr.PayDate,td,lmaxintdays,intIVp.ExportFlag,IRrw.rate,repmode,true,intcodefoundf,totintb1sum,rm);
                          rwcnt = rwcnt + 1;
                          lfromdtp = AddDay(td,1);
                          td = blankd;
                          irf = true;
                        end;
                      end;
                    end;
                  end;
                  if (irf==false) then begin
                    if (IVr.CurncyCode!=intIVp.CurncyCode) then begin
                      CurValToOtherCur(IVr.InvDate,IVr.CurncyCode,ov,intIVp.CurncyCode,curov,DefaultCurRoundOff);
                      AddIntRow(IIRec,intIVp,lfromdtp,curov,IVr.SerNr,IVr.PayDate,paydate,lmaxintdays,intIVp.ExportFlag,intrate,repmode,true,intcodefoundf,totintb1sum,rm);
                    end else begin
                      AddIntRow(IIRec,intIVp,lfromdtp,ov,IVr.SerNr,IVr.PayDate,paydate,lmaxintdays,intIVp.ExportFlag,intrate,repmode,true,intcodefoundf,totintb1sum,rm);
                    end;
                    if (paydate>IVr.PayDate) then begin
                      lfromdtp = AddDay(paydate,1);
                    end;
                    rwcnt = rwcnt + 1;
                  end;
                end; // DateInRange
                ov = ov - (PurgeTRr.CredVal-PurgeTRr.DebVal);
              end;
            end;
          end;
        case kIPrsTransTypeNLTransaction: // Perhaps we should write code for N/L transactions in the future
          if ((rwcnt<199) and (ov>0)) then begin          
            TRr.Number = IPrsr.TransNr;
            TRr.IntYc = GetIntYc(IPrsr.TransDate);
            if (ReadFirstMain(TRr,2,true)) then begin
                iprwcnt = MatRowCnt(TRr);
                for (i=0;i<iprwcnt;i=i+1) begin
                  MatRowGet(TRr,i,TRrw);
                  if ((TRrw.ovst==0) and (TRrw.stp==1) and (TRr.TransDate==IPrsr.CustDate) and (TRrw.SerNr==IPrsr.IVNr)) then begin
                    if (DateInRange(IPrsr.TransDate,RepSpec.d1,RepSpec.d2)) then begin
                      paydate = TRr.TransDate;
                      if (blankdate(paydate)) then begin
                        paydate = IPrsr.TransDate;
                      end;
                      if (paydate>todtp) then begin
                        paydate = todtp;
                      end; 
                      irf = false;
                      if (intcodefoundf) then begin
                        ResetLoop(IRr);
                        irfound = true;
                        while (irfound) begin 
                          irfound = GetDateIRInt(Intr.Code,lfromdtp,IRr,td,"");
                          if (lfromdtp>todtp) then begin 
                            irfound = false; 
                          end;
                          if (lfromdtp>paydate) then begin 
                            irfound = false; 
                          end;
                          if (irfound) then begin
                            irwcnt = MatRowCnt(IRr);
                            if (irwcnt>0) then begin
                              intrate = 0;
                              for (ii=0;ii<irwcnt;ii=ii+1) begin
                                MatRowGet(IRr,ii,IRrw);
                                if (ov<=IRrw.limit) then begin
                                  intrate = IRrw.rate;
                                  ii = irwcnt;
                                end;
                                if (ii==(irwcnt-1)) then begin
                                  intrate = IRrw.rate;
                                end;
                              end;
                              if (blankdate(td)) then begin
                                td = todtp;
                              end;
                              if (td>paydate) then begin
                                td = paydate;
                              end;
                              AddIntRow(IIRec,intIVp,lfromdtp,ov,IVr.SerNr,IVr.PayDate,td,lmaxintdays,intIVp.ExportFlag,IRrw.rate,repmode,true,intcodefoundf,totintb1sum,rm);
                              rwcnt = rwcnt + 1;
                              lfromdtp = AddDay(td,1);
                              td = blankd;
                              irf = true;
                            end;
                          end;
                        end;
                      end;
                      if (irf==false) then begin
                        if (IVr.CurncyCode!=intIVp.CurncyCode) then begin
                          CurValToOtherCur(IVr.InvDate,IVr.CurncyCode,ov,intIVp.CurncyCode,curov,DefaultCurRoundOff);
                          AddIntRow(IIRec,intIVp,lfromdtp,curov,IVr.SerNr,IVr.PayDate,paydate,lmaxintdays,intIVp.ExportFlag,intrate,repmode,true,intcodefoundf,totintb1sum,rm);
                        end else begin
                          AddIntRow(IIRec,intIVp,lfromdtp,ov,IVr.SerNr,IVr.PayDate,paydate,lmaxintdays,intIVp.ExportFlag,intrate,repmode,true,intcodefoundf,totintb1sum,rm);
                        end;
                        if (paydate>IVr.PayDate) then begin
                          lfromdtp = AddDay(paydate,1);
                        end;
                        rwcnt = rwcnt + 1;
                      end;
                    end; // DateInRange
                    ov = ov - (TRrw.CredVal-TRrw.DebVal);
                  end;
                end;

            end;
          end;
          
        case kIPrsTransTypeCashIn: 
          if ((rwcnt<199) and (ov>0)) then begin          
            if (DateInRange(IPrsr.TransDate,RepSpec.d1,RepSpec.d2)) then begin
              CLInr.SerNr = IPrsr.TransNr;
              if (ReadFirstMain(CLInr,2,true)) then begin
                rwcnt = MatRowCnt(CLInr);
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(CLInr,i,CLInrw);
                  if ((CLInrw.Type==1) and (CLInrw.TransNr==IPrsr.IVNr)) then begin
                    if (CLInr.CUCode==IPrsr.CustCode) then begin
                    
                      paydate = CLInr.TransDate;
                      if (blankdate(paydate)) then begin
                        paydate = IPrsr.TransDate;
                      end;
                      if (paydate>todtp) then begin
                        paydate = todtp;
                      end; 
                      irf = false;
                      if (intcodefoundf) then begin
                        ResetLoop(IRr);
                        irfound = true;
                        while (irfound) begin 
                          irfound = GetDateIRInt(Intr.Code,lfromdtp,IRr,td,"");
                          if (lfromdtp>todtp) then begin 
                            irfound = false; 
                          end;
                          if (lfromdtp>paydate) then begin 
                            irfound = false; 
                          end;
                          if (irfound) then begin
                            irwcnt = MatRowCnt(IRr);
                            if (irwcnt>0) then begin
                              intrate = 0;
                              for (ii=0;ii<irwcnt;ii=ii+1) begin
                                MatRowGet(IRr,ii,IRrw);
                                if (ov<=IRrw.limit) then begin
                                  intrate = IRrw.rate;
                                  ii = irwcnt;
                                end;
                                if (ii==(irwcnt-1)) then begin
                                  intrate = IRrw.rate;
                                end;
                              end;                              
                              if (blankdate(td)) then begin
                                td = todtp;
                              end;
                              if (td>paydate) then begin
                                td = paydate;
                              end;
                              AddIntRow(IIRec,intIVp,lfromdtp,ov,IVr.SerNr,IVr.PayDate,td,lmaxintdays,intIVp.ExportFlag,intrate,repmode,true,intcodefoundf,totintb1sum,rm);
                              rwcnt = rwcnt + 1;
                              lfromdtp = AddDay(td,1);
                              td = blankd;
                              irf = true;
                            end;
                          end;
                        end;
                      end;
                      if (irf==false) then begin
                        if (IVr.CurncyCode!=intIVp.CurncyCode) then begin
                          CurValToOtherCur(IVr.InvDate,IVr.CurncyCode,ov,intIVp.CurncyCode,curov,DefaultCurRoundOff);
                          AddIntRow(IIRec,intIVp,lfromdtp,curov,IVr.SerNr,IVr.PayDate,paydate,lmaxintdays,intIVp.ExportFlag,intrate,repmode,true,intcodefoundf,totintb1sum,rm);
                        end else begin
                          AddIntRow(IIRec,intIVp,lfromdtp,ov,IVr.SerNr,IVr.PayDate,paydate,lmaxintdays,intIVp.ExportFlag,intrate,repmode,true,intcodefoundf,totintb1sum,rm);
                        end;
                        if (paydate>IVr.PayDate) then begin
                          lfromdtp = AddDay(paydate,1);
                        end;
                        rwcnt = rwcnt + 1;
                      end;
                      ov = ov - CLInrw.Sum;                                          
                    end;                    
                  end;
                end;
              end;
            end;                      
          end;                    
          
      end;
    end;
  end;
  if (ov>0) then begin
    CurValToOtherCur(intIVp.InvDate,IVr.CurncyCode,ov,intIVp.CurncyCode,ov,DefaultCurRoundOff);
    if (IIRec.Int2Model==0) then begin
      paydate = RepSpec.d2;
      
      if (intcodefoundf) then begin
        ResetLoop(IRr);
        irf = false;
        irfound = true;
        while (irfound) begin 
          irfound = GetDateIRInt(Intr.Code,lfromdtp,IRr,td,"");
          if (lfromdtp>todtp) then begin 
            irfound = false; 
          end;
          if (irfound) then begin
            irwcnt = MatRowCnt(IRr);
            if (irwcnt>0) then begin
              intrate = 0;
              for (ii=0;ii<irwcnt;ii=ii+1) begin
                MatRowGet(IRr,ii,IRrw);
                if (ov<=IRrw.limit) then begin
                  intrate = IRrw.rate;
                  ii = irwcnt;
                end;
                if (ii==(irwcnt-1)) then begin
                  intrate = IRrw.rate;
                end;
              end;
              if (blankdate(td)) then begin
                td = todtp;
              end;
              if (td>RepSpec.d2) then begin
                td = RepSpec.d2;
              end;
//              AddIntRow(IIRec,intIVp,lfromdtp,ov,IVr.SerNr,IVr.PayDate,td,lmaxintdays,intIVp.ExportFlag,intrate,repmode,lfromdtp!=AddDay(IVr.PayDate,1),intcodefoundf,rm);

              AddIntRow(IIRec,intIVp,lfromdtp,ov,IVr.SerNr,IVr.PayDate,td,lmaxintdays,intIVp.ExportFlag,intrate,repmode,true,intcodefoundf,totintb1sum,rm);
              rwcnt = rwcnt + 1;
              lfromdtp = AddDay(td,1);
              td = blankd;
              irf = true;
            end;
          end;
        end;
      end else begin      
        AddIntRow(IIRec,intIVp,lfromdtp,ov,IVr.SerNr,IVr.PayDate,paydate,lmaxintdays,intIVp.ExportFlag,intrate,repmode,true,intcodefoundf,totintb1sum,rm);
        lfromdtp = PayDate;
        rwcnt = rwcnt + 1;
      end;
    end;
  end;
//  if (totintb1sum<IIRec.MinInt) then begin
//    rwcnt = MatRowCnt(intIVp);
//    for (i=0;i<rwcnt;i=i+1) begin
//      MatRowDelete(intIVp,i);
//      i = i-1;
 //   end;
//  end;  
LFindAndAddRecipts:;  
  return;
end;

updating procedure CustMIntAtPayment(record RcVc RepSpec,record BaseCurBlock BCb,record IIBlock IIRec,record CUVc CUp,var record IVVc intIVp,Date fromdtp,Date todtp,Integer repmode)
begin
  record IVVc IVr;
  row IVVc IVrw;
  Boolean TrHs,testf;
  val fr,to1,to2,br1,br2,rs;
  Integer rwcnt;
  Date lfromdtp,oldInvoicePayDate;
  string 255 tstr;
  
  lfromdtp = fromdtp;
  if (nonblank(CUp.CurncyCode)) then begin
    if (intIVp.CurncyCode!=CUp.CurncyCode) then begin
      intIVp.CurncyCode = CUp.CurncyCode;
      GetFullCurncyRate(intIVp.CurncyCode,intIVp.InvDate,fr,to1,to2,br1,br2);
      intIVp.FrRate = fr;
      intIVp.ToRateB1 = to1;
      intIVp.ToRateB2 = to2;
      intIVp.BaseRate1 = br1;
      intIVp.BaseRate2 = br2;
    end;
  end;
  TrHs = true;
  IVr.CustCode = CUp.Code;
  IVr.InvDate = RepSpec.sStartDate;
  while (LoopKey("CustDate",IVr,2,TrHs)) begin
    if (IVr.CustCode!=CUp.Code) then begin TrHs = false; end;
    if (IVr.InvDate>RepSpec.sEndDate) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if ((IVr.InvType!=kInvoiceTypeNormal and IVr.InvType!=kInvoiceTypeNormalSpecialSales) and (IVr.InvType!=kInvoiceTypeDownpayment)) then begin testf = false; end;
      if (IVr.Invalid!=0) then begin testf = false; end;
      if (IVr.OKFlag==0) then begin testf = false; end;
      if (IVr.NoInterestFlag!=0) then begin testf = false; end;
      if (RepSpec.flags[2]!=0) then begin
        if (IVr.InvType==kInvoiceTypeInterest) then begin testf = false; end;
      end;
      if (testf) then begin
        switch (RepSpec.flags[3]) begin
          case 0:
          case 1:
            oldInvoicePayDate = IVr.PayDate;
            IVVc_CalculatePayDate(IVr);
        end;
        FindAndReduceCredits(IVr);
        if (IIRec.Int2Model==0) then begin
          lfromdtp = AddDay(IVr.PayDate,1);//has to start from Due date
          if (lfromdtp<RepSpec.d1) then begin
            lfromdtp = RepSpec.d1;
          end;
        end else begin
          lfromdtp = AddDay(IVr.PayDate,1);
//this must be from due date, d1 and d2 it is paid in period
//so if one have invoice 
//PayDate = 31/03/2003, and it was Paid on 01/08/03
//we run report for d1=01/01/2003 to d2=30/06/2003 nothing shown
//we run report for d1=01/07/2003 to d2=31/09/2003 we should start from paydate and end on 01/08/03
        end;
        FindAndAddRecipts(RepSpec,intIVp,IVr,BCb,IIRec,CUp.IntRate,lfromdtp,todtp,repmode,rwcnt);
        switch (RepSpec.flags[3]) begin
          case 0:
          case 1:
            IVr.PayDate = oldInvoicePayDate;
        end;
      end;
    end;
  end;
  if (MatRowCnt(intIVp)>0) then begin
    if (RepSpec.flags[1]==1) then begin
      ClearRow(intIVp,IVrw,1);
      if (IIRec.Int2Model==0) then begin
        tstr = USetStr(1169) & " ";
      end else begin
        tstr = USetStr(11311) & " ";
      end;
      tstr = tstr & fromdtp;
      tstr = tstr & " - ";
      tstr = tstr & todtp;
      IVrw.Spec = tstr;
      MatRowInsert(intIVp,0,IVrw);
    end;
  end;
  return;
end;

updating procedure CustMakeInt(record RcVc RepSpec,record BaseCurBlock BCb,record IIBlock IIRec,record CUVc CUp,Date fromdtp,Date todtp,Integer repmode,var LongInt invnr)
begin
  record IVVc IVr;
  val rs;
  Boolean invnrf;

  invnrf = true;
  SetupIntInvoice(RepSpec,IIRec,CUp,IVr,fromdtp,todtp,invnr);
  CustMIntAtPayment(RepSpec,BCb,IIRec,CUp,IVr,fromdtp,todtp,repmode);
  IVSumup(IVr,true);
  rs = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
  if (rs>=IIRec.MinInt) then begin
    InsertFeeItem(IIRec,IVr);
    IVSumup(IVr,true);
    if (IVr.Sum4>0) then begin
      if (IVr.SerNr!=-1) then begin
        switch (repmode) begin
          case 0:
//            IVr.OfficialSerNr = FindNextLegalSerNr(IVr,CUp.Classification);//POSN
            if (RecordInsert(IVr,false)) then begin end;
          case 1:
            IntRepInvoice(IVr,1,IIRec);
        end;
        invnrf = false;
      end else begin
        switch (repmode) begin
          case 0:
            MessageBox(1747,"");
        end;
      end;
    end;
  end;
  if (invnrf) then begin
    invnr = invnr - 1;
  end;
  return;
end;

updating procedure CUInt(record RcVc RepSpec,Integer repmode)
begin
  record IIBlock IIRec;
  record CUVc CUr;
  Boolean TrHs;
  val sum1;
  string 255 frcc,tocc;
  LongInt invnr;
  record BaseCurBlock BCb;
  
  BlockLoad(IIRec);
  frcc = FirstInRange(RepSpec.f1,20);
  tocc = LastInRange(RepSpec.f1,20);  
  if ((blankdate(RepSpec.d1)) or
      (blankdate(RepSpec.d2)) or
      (RepSpec.d1>=RepSpec.d2)) then
  begin
    MessageBox(1142,"");
    goto LCUIntMn;
  end;

  CUr.Code = frcc;
  TrHs = true;
  while (LoopMain(CUr,1,TrHs)) begin
    if (TrHs) then begin
      if (nonblank(tocc)) then begin
        if (CUr.Code>tocc) then begin
          TrHs = false;
        end;
      end;
    end;
    if (TrHs) then begin
      if (blank(RepSpec.f3) or (RepSpec.f3==CUr.CustCat)) then begin
        if (CUr.InterestFlag!=0) then begin
          CustMakeInt(RepSpec,BCb,IIRec,CUr,RepSpec.d1,RepSpec.d2,repmode,invnr);
        end;
      end;
    end;
    if (repmode==0) then begin
      MaintTrace(CUr.Code);    
    end;
  end;
LCUIntMn:;
  RETURN;
END;

global
updating procedure CUIntMn(record RcVc RepSpec)
BEGIN
  CUInt(RepSpec,0);
  RETURN;
END;

global
updating procedure CUIntRn(record RcVc RepSpec)
BEGIN
  string 255 tstr,t2;
  string 20 frcc,tocc;
  Integer rw;

  frcc = FirstInRange(RepSpec.f1,20);
  tocc = LastInRange(RepSpec.f1,20);  
  
  StartReportJob(USetStr(11310));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,t2);
  tstr = USetStr(11313) & t2;
  Header(rw,tstr,1);
  rw = rw + 1;
  HTCusts(frcc,tocc,tstr);
  Header(rw,tstr,0);
  HT2Per(RepSpec.d1,RepSpec.d2,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;
  CUInt(RepSpec,1);
  EndJob;
  RETURN;
END;