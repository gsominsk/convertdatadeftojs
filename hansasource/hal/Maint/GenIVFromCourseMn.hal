external procedure IVVc_PastePriceList(var record IVVc);
external function Boolean PasteCustInInv(var record IVVc);
external procedure AddRowToInvoice(var record IVVc,record CourseEventVc,row CourseEventVc);
external procedure AddWithholdingTaxesRows_IVVc(var record IVVc);
external procedure AddPerceptionTaxesRows_IVVc(var record IVVc);
external function Boolean IVVc_PasteArtCode(var record IVVc,Integer,var string,var string,Boolean,var Integer);
external function Boolean IVDchrsum(var record IVVc,Integer);
external procedure IVDchsum(var record IVVc,Integer);
external procedure IVSumup(var record IVVc,Boolean);


updating  
procedure AddHotelToInvoice(LongInt InvoiceNo, val Nights, val price, string hotel)
begin
  record IVVc IVr;
  row IVVc IVrw;
  record IVVc oldIVr;
  boolean found;
  string 255 inwarning;  
  Integer sernrf;
 
  record ResVc Hotelr;
  integer i,rwcnt;
  IVr.SerNr = InvoiceNo;
  if (ReadFirstMain(IVr,1,true)) then begin 
    if (IVr.OKFlag<> 0) then begin
      goto LAddHotelToInvoice;
    end;
    Hotelr.Code = hotel;
    if (ReadFirstMain(Hotelr,1,true)) then begin end;
    RecordCopy(oldIVr,IVr);
    rwcnt = MatRowCnt(IVr);
    ClearRow(IVr,IVrw,1);
    IVrw.stp = kInvoiceRowTypeNormal;
    IVrw.Spec = " ";
    MatRowPut(IVr,rwcnt,IVrw);
    rwcnt = rwcnt + 1;

    ClearRow(IVr,IVrw,1);
    IVrw.stp = kInvoiceRowTypeNormal;
    IVrw.Spec = Hotelr.Name;
    MatRowPut(IVr,rwcnt,IVrw);
    rwcnt = rwcnt + 1;

    ClearRow(IVr,IVrw,1);
    IVrw.stp = kInvoiceRowTypeNormal;
    IVrw.ArtCode = Hotelr.Code; // What item should be used here! This is not correct right now.
    IVrw.Quant = Nights;  
    MatRowPut(IVr,rwcnt,IVrw);
    if (IVVc_PasteArtCode(IVr,rwcnt,inwarning,inwarning,false,sernrf)) then begin end;  
    MatRowGet(IVr,rwcnt,IVrw);  
    IVrw.Price = price;
    MatRowPut(IVr,rwcnt,IVrw);
    if (IVDchrsum(IVr,rwcnt)) then begin
      IVDchsum(IVr,rwcnt);
    end;  
    AddPerceptionTaxesRows_IVVc(IVr);
    AddWithholdingTaxesRows_IVVc(IVr);
    IVSumup(IVr,true);    

    if (RecordUpdate(oldIVr,IVr,false)==0) then begin end;
  end;
  LAddHotelToInvoice:;
return;
end;


updating 
procedure AddToInvoice(record CourseEventVc CourseEventr, row CourseEventVc CourseEventrw,var longint inv_sernr)
begin
  record IVVc IVr,old_IVr;
  row IVVc IVrw;
  boolean found_invoice,foundf,testf;
  integer rwcnt;
  string 255 inwarning;  
  Integer sernrf;
  string 255 warning,errstr,prepstr,invdatewarn,transdatewarn;
  

  // find the last invoice that is not OK:ed
  found_invoice = false;
  foundf = true;
  IVr.SVONr = CourseEventr.SerNr;
  while(LoopBackKey("SVONr",IVr,1,foundf)) begin
    testf = true;
    if (IVr.SVONr <> CourseEventr.SerNr) then begin
      foundf = false;
    end; 
    if (IVr.CustCode <>CourseEventrw.CustCode) then begin
      testf = false;
    end;
    if (IVr.OKFlag == 1) then begin
      testf = false;
    end;
    if (foundf == false) then begin
      testf = false;
    end;
    if (testf) then begin
      found_invoice = true;
      goto LBreakSVONrLoop;
    end;
  end;
LBreakSVONrLoop:;
  
  if (not found_invoice) then begin
    // create new invoice
    RecordNew(IVr);
    IVr.CustCode = CourseEventrw.CustCode;
    IVr.SVONr = CourseEventr.SerNr;
    if (PasteCustInInv(IVr)) then begin end;
    IVr.PriceList = CourseEventr.PriceList;
    IVVc_PastePriceList(IVr);
    rwcnt = 0;
    ClearRow(IVr,IVrw,1);        
    IVrw.stp = kInvoiceRowTypeNormal;
    IVrw.Spec = USetStr(17002) & ": " & CourseEventr.CourseName;
    MatRowPut(IVr,rwcnt,IVrw);
    IVrw.Spec = USetStr(16746) & ": " & CourseEventr.TransDate;
    if (CourseEventr.TransDate <> CourseEventr.EndDate) then begin
      IVrw.Spec = IVrw.Spec & " : " & CourseEventr.EndDate;
    end;
    MatRowPut(IVr,rwcnt,IVrw);
  end else begin
    RecordCopy(old_IVr,IVr);
  end;
  AddRowToInvoice(IVr,CourseEventr,CourseEventrw);
  if (not found_invoice) then begin
    if (MatRowCnt(IVr)>0)  then begin
      IVr.SerNr = NextSerNr("IVVc",IVr.TransDate,-1,false,"");            
      if (IVr.SerNr>0) then begin
        if (RecordInsert(IVr,false)) then begin end;
      end;
    end;  
  end else begin
    if (RecordUpdate(old_IVr,IVr,false)==0) then begin end;
  end;
  LAddToInvoice:;
  inv_sernr = IVr.SerNr; 
  return;
end;

updating 
procedure InvoiceCourseEvent(record RcVc RepSpec,record CourseEventVc CourseEventr)
begin
  record CourseEventVc old_CourseEventr;
  row CourseEventVc CourseEventrw;
  integer i,rwcnt;
  string 20 item_code,price_list;
  longint inv_sernr;
  boolean updated,test,tofinish;
  val invd;
  
  RecordCopy(old_CourseEventr,CourseEventr);
  rwcnt = MatRowCnt(CourseEventr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CourseEventr,i,CourseEventrw);
    item_code = CourseEventrw.ItemCode;
    if (blank(item_code)) then begin
      item_code = CourseEventr.ItemCode;
    end;
    price_list = CourseEventrw.PriceListRow;
    if (blank(price_list)) then begin
      price_list = CourseEventr.PriceList;
    end;
    test = true;
    if nonblank(RepSpec.f2) then begin 
      if (RepSpec.f2!=CourseEventrw.CustCode) then begin 
        test = false;
      end;
    end;
    if (test==true) and (CourseEventrw.InvoiceNo <=0) and (CourseEventrw.Status==kCourseEventPaticipantStatusPaying) then begin
      inv_sernr = -1;
      AddToInvoice(CourseEventr,CourseEventrw,inv_sernr)
      invd = invd + CourseEventrw.Price;
      if (inv_sernr != -1) then begin
        CourseEventrw.InvoiceNo = inv_sernr;
        MatRowPut(CourseEventr,i,CourseEventrw);
        updated = true;
      end;
      if (nonblank(CourseEventrw.Hotel)) and (CourseEventrw.InvoiceNo >0) then begin
        AddHotelToInvoice(CourseEventrw.InvoiceNo,CourseEventrw.Nights,
        CourseEventrw.HotelPrice,CourseEventrw.Hotel);
        invd = invd + (CourseEventrw.HotelPrice * CourseEventrw.Nights);
      end;
    end;
  end;    
  if (updated) then begin
    CourseEventr.LastTransferDate = CurrentDate;
    rwcnt = MatRowCnt(CourseEventr);
    CourseEventr.InvoicedSum = 0;
    invd = 0;
    tofinish = true;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CourseEventr,i,CourseEventrw);
      if (CourseEventrw.InvoiceNo > 0) then begin
        invd = invd + CourseEventrw.Price;
      end;
      if (CourseEventrw.InvoiceNo<=0) and (CourseEventrw.Status==kCourseEventPaticipantStatusPaying) then begin
        tofinish = false;
      end;  
    end;
    CourseEventr.InvoicedSum = invd; 
    if tofinish then begin 
      CourseEventr.StatusFlag = 1;
    end;
    if (RecordUpdate(old_CourseEventr,CourseEventr,false)==0) then begin end;
  end;  
  return;
end;  
  

global
updating procedure GenIVFromCourseMn(record RcVc RepSpec)
BEGIN
  record CourseEventVc CourseEventr;
  boolean TrHs,test;
  
  /*if (blank(RepSpec.f1)) then begin
    MessageBox(0,"You must specify course event!");
    goto LGenIVFromCourseMn;
  end;
  */
  
  if (nonblank(RepSpec.f1)) then begin
    CourseEventr.SerNr = RepSpec.f1;
    if (ReadFirstMain(CourseEventr,1,true)) then begin
      if (CourseEventr.StatusFlag==0) then begin 
        InvoiceCourseEvent(RepSpec,CourseEventr);
      end;
    end; 
    goto LGenIVFromCourseMn;
  end;  
  
  if (nonblank(RepSpec.f3)) then begin
    CourseEventr.CourseCode = RepSpec.f3;
    TrHs = true;
    while (LoopKey("CourseCode",CourseEventr,1,TrHs)) begin
      test = true;
      if (CourseEventr.CourseCode!=RepSpec.f3) then begin 
        test = false;
        TrHs = false;
      end;
      if (CourseEventr.StatusFlag!=0) then begin 
        test = false;
      end;
      if (DateInRange(CourseEventr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin 
        test = false;
      end;  
      if test then begin 
        InvoiceCourseEvent(RepSpec,CourseEventr);
      end;
    end; 
    goto LGenIVFromCourseMn;
  end;
  
  CourseEventr.TransDate = RepSpec.sStartDate;
  TrHs = true;
  while (LoopKey("TransDate",CourseEventr,1,TrHs)) begin
    test = true;
    if (CourseEventr.StatusFlag!=0) then begin 
      test = false;
    end;
    if (DateInRange(CourseEventr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin 
      test = false;
      TrHs = false;
    end;  
    if test then begin 
      InvoiceCourseEvent(RepSpec,CourseEventr);
    end;
  end; 
   
LGenIVFromCourseMn:;  
  RETURN;
END;

