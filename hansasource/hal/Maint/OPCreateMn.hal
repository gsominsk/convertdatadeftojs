external function Boolean SetInSet2(string,string);
external procedure OPVc_PasteRecVal(var record OPVc,Integer);
external function Boolean PasteInvIn2OPr(var record OPVc,Integer,Date,Integer,val,var string,Boolean,var Boolean);
external procedure CheckFlush(var Integer,Integer);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external procedure PastePMInOP(var record OPVc);
external procedure GetBaseCurncy(Integer,var string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure OPSumup(var record OPVc,Boolean);
external function Boolean GetPMCurrency(string,var string);

function Boolean CheckInstalments(record RcVc RepSpec,LongInt VISerNr,val sum,val max,var Date paydate,var Boolean testfp)
begin
  Boolean res,testf,foundf;
  record APInstallVc APInstallr;
  val t,instsum;
  
  res = false;
  testfp = false;
  foundf = true;
  APInstallr.VISerNr = VISerNr;
  APInstallr.DueDate = RepSpec.d1;
  while (LoopMain(APInstallr,2,foundf)) begin
    if (APInstallr.VISerNr!=VISerNr) then begin
      foundf = false;
    end;
    if (foundf) then begin
      res = true;
      if (nonblankdate(RepSpec.d1)) then begin
        if (RepSpec.d1>APInstallr.DueDate) then begin
          foundf = false;
        end;
      end;
      if (nonblankdate(RepSpec.d2)) then begin
        if (RepSpec.d2<APInstallr.DueDate) then begin
          foundf = false;
        end;
      end;
      if (foundf) then begin
        testf = true;
        if (RepSpec.flags[3]==0) then begin
          if (APInstallr.RVal<=0) then begin
            testf = false;
          end;
        end;
        if (testf) then begin
          if (nonblank(RepSpec.f3)) then begin
            instsum = instsum + APInstallr.RVal;
            if (RepSpec.flags[6]==0) then begin
              t = sum + instsum;
              if (t>max) then begin
                testf = false;
              end;
            end else begin
              t = max - sum - instsum;
              if (t<0) then begin
                testf = false;
              end;
            end;
          end;
        end;
        if (testf) then begin
          paydate = APInstallr.DueDate;
          testfp = true;
          goto LCheckInstalments;
        end;
      end;
    end;
  end;
  
LCheckInstalments:;
  if (res==false) then begin
    testfp = true;
  end;
  CheckInstalments = res;
end;

procedure AddInstalments(var record OPVc OPr,record RcVc RepSpec,LongInt VISerNr,var val sum,val max)
begin
  Boolean testf,foundf;
  record APInstallVc APInstallr;
  row OPVc OPrw;
  Integer rwcnt;
  val t,chk;
  string 255 warning;
  Boolean instf;
  
  foundf = true;
  APInstallr.VISerNr = VISerNr;
  APInstallr.DueDate = RepSpec.d1;
  while (LoopMain(APInstallr,2,foundf)) begin
    if (APInstallr.VISerNr!=VISerNr) then begin
      foundf = false;
    end;
    if (nonblankdate(RepSpec.d1)) then begin
      if (RepSpec.d1>APInstallr.DueDate) then begin
        foundf = false;
      end;
    end;
    if (nonblankdate(RepSpec.d2)) then begin
      if (RepSpec.d2<APInstallr.DueDate) then begin
        foundf = false;
      end;
    end;
    if (foundf) then begin
      testf = true;
      if (RepSpec.flags[3]==0) then begin
        if (APInstallr.RVal<=0) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        if (nonblank(RepSpec.f3)) then begin
          if (RepSpec.flags[6]==0) then begin
            t = sum + APInstallr.RVal;
            if (t>max) then begin
              testf = false;
            end;
          end else begin
            t = max - sum;
            if (t<0) then begin
              testf = false;
            end;
          end;
        end;
      end;
      if (testf) then begin
        rwcnt = MatRowCnt(OPr);
        ClearRow(OPr,OPrw,1);
        OPrw.VISerNr = VISerNr;
        OPrw.InstNr = APInstallr.InstallNr;
        MatRowPut(OPr,rwcnt,OPrw);
        PasteInvIn2OPr(OPr,rwcnt,OPr.TransDate,RepSpec.flags[1],chk,warning,true,instf);
        MatRowGet(OPr,rwcnt,OPrw);
        t = max - sum;
        if (t<APInstallr.RVal) then begin
          MatRowGet(OPr,rwcnt,OPrw);
          OPrw.RecVal = t;
          MatRowPut(OPr,rwcnt,OPrw);
          OPVc_PasteRecVal(OPr,rwcnt);
        end;
        sum = sum + APInstallr.RVal;
      end;
    end;
  end;
end;

global
updating procedure OPCreateMn(record RcVc RepSpec)
begin
  record APVc APr;
  record OPVc OPr;
  record CUVc VEr;
  record VIVc VIr;
  row OPVc OPrw;
  Boolean found;
  Integer rwcnt;
  Boolean testf;
  val reb2,payv;
  string 200 t1,t2;
  string 200 frs,tos;
  val sum,max,t;
  Date oldpaydate;
  Boolean payinited,instf;
  Date appaydate;
  string 20 ckey;
  string 20 curncy,bankcurncy;
  string 20 oldvecode;
  val fr,to1,to2,br1,br2;
  Integer cnt;
  val chk;
  string 200 warning;

  rwcnt = 0;
  if ((RepSpec.flags[2]==0) and (RepSpec.flags[1]==0)) then begin
    if (blankdate(RepSpec.RegDate)) then begin
      MessageBox(1124,"");
      goto LOPCreateMn;
    end;
  end;
  curncy = RepSpec.f2;
  if (blank(curncy)) then begin
    GetBaseCurncy(1,curncy);
  end;
  GetFullCurncyRate(curncy,RepSpec.d1,fr,to1,to2,br1,br2);
  if (GetPMCurrency(RepSpec.FirstAcc,bankcurncy)) then begin end;
  payinited = false;
  sum = BlankVal;
  if (blank(RepSpec.f3)) then begin
    max = 1000000000.00;
  end else begin
    max = StringToVal(RepSpec.f3,M4Val);
  end;
  frs = FirstInRange(RepSpec.f1,10);
  tos = LastInRange(RepSpec.f1,10);
  if (RepSpec.flags[1]<>0) then begin
    ckey = "RebDate";
    APr.RebDate = RepSpec.d1;
  end else begin
    ckey = "DueDate";
    APr.DueDate = RepSpec.d1;
  end;
  if (RepSpec.flags[4]<>0) then begin
    ckey = "VECode";
    APr.VECode = frs;
  end;
  if (RepSpec.flags[5]<>0) then begin
    ckey = "VECode";
    APr.VECode = frs;
  end;
  oldvecode = "";
  found = true;
  while (LoopKey(ckey,APr,1,found)) begin
    testf = true;
    if (found) then begin
      if (RepSpec.flags[1]<>0) then begin
        appaydate = APr.RebDate;
      end else begin
        appaydate = APr.DueDate;
      end;
      instf = CheckInstalments(RepSpec,APr.SerNr,sum,max,appaydate,testf);
      if (instf==false) then begin
        if (nonblankdate(RepSpec.d1)) then begin
          if (RepSpec.d1>appaydate) then begin
            testf = false;
          end;
        end;
        if (nonblankdate(RepSpec.d2)) then begin
          if (RepSpec.d2<appaydate) then begin
            testf = false;
          end;
        end;
      end;
      if (nonblank(frs)) then begin
        if (frs>APr.VECode) then begin
          testf = false;
        end;
      end;
      if (nonblank(tos)) then begin
        if (tos<APr.VECode) then begin
          testf = false;
        end;
      end;
      if (nonblank(curncy)) then begin
        if (curncy<>APr.CurncyCode) and (nonblank(APr.CurncyCode)) then begin        
          testf = false;
        end;
      end;
      if (blank(curncy)) then begin
        if (nonblank(APr.CurncyCode)) then begin
          testf = false;
        end;
      end;
      if (instf==false) then begin
        if (RepSpec.flags[3]==0) then begin
          if (APr.RVal<=0) then begin
            testf = false;
          end;
        end;
      end;
      if (testf) then begin
        VEr.Code = APr.VECode;
        ReadFirstMain(VEr,1,true);
        if (nonblank(RepSpec.LastAcc)) then begin
          if (VEr.VECat!=RepSpec.LastAcc) then begin testf = false; end;
        end;
        if (nonblank(RepSpec.f4)) then begin
          testf = (SetinSet2(RepSpec.f4,VEr.Classification));
        end;
        if (instf==false) then begin
          if (nonblank(RepSpec.f3)) then begin
            if (RepSpec.flags[6]==0) then begin
              t = sum + APr.RVal;
              if (t>max) then begin
                testf = false;
              end;
            end else begin
              t = max - sum;
              if (t<0) then begin
                testf = false;
              end;
            end;
          end;
        end;
      end;
      if (testf) then begin
        VIr.SerNr = APr.SerNr;
        if (ReadFirstMain(VIr,1,true)) then begin
          if (VIr.Closed<>0) then begin
            testf = false;
          end;
        end;
      end;
      if (testf) then begin
        if (payinited) then begin
        if (((RepSpec.flags[2]<>0) and (appaydate<>oldpaydate)) or
            ((RepSpec.flags[4]<>0) and (oldvecode<>APr.VECode)) or
            (rwcnt>190)) then begin
          if (rwcnt>0) then begin
            OPSumup(OPr,false);
            if (OPr.CurPayVal>0) then begin
              if (OPr.SerNr==-1) then begin
                OPr.SerNr = NextSerNr("OPVc",OPr.TransDate,-1,false,"");
              end;
              if (RecordInsert(OPr,false)) then begin end;
              payinited = false;
              CheckFlush(cnt,10);
            end;
          end;
        end;
        end;
        if (payinited==false) then begin
          RecordNew(OPr);
          if ((RepSpec.flags[2]<>0) or (RepSpec.flags[1]<>0)) then begin
            if (BlankDate(RepSpec.RegDate)) then begin
              OPr.PayDate = appaydate;
            end else begin
              OPr.PayDate = RepSpec.RegDate;
            end;
          end else begin
            OPr.PayDate = RepSpec.RegDate;
          end;
          OPr.TransDate = OPr.PayDate;
          OPr.SerNr = NextSerNr("OPVc",OPr.TransDate,-1,false,"");
          OPr.PayMode = RepSpec.FirstAcc;
          PastePMInOP(OPr);
          rwcnt = 0;
          oldpaydate = appaydate;
          oldvecode = APr.VECode;
          payinited = true;
        end;
        if (instf) then begin
          AddInstalments(OPr,RepSpec,APr.SerNr,sum,max);
        end else begin
          ClearRow(OPr,OPrw,1);
          OPrw.VISerNr = APr.SerNr;
          MatRowPut(OPr,rwcnt,OPrw);
          if (PasteInvIn2OPr(OPr,rwcnt,OPr.TransDate,RepSpec.flags[1],chk,warning,false,instf)) then begin
          end;
          MatRowGet(OPr,rwcnt,OPrw);
          t = max - sum;
          if (t<APr.RVal) then begin
            MatRowGet(OPr,rwcnt,OPrw);
            OPrw.RecVal = t;
            MatRowPut(OPr,rwcnt,OPrw);
            OPVc_PasteRecVal(OPr,rwcnt);
          end;
          
          sum = sum + APr.RVal;
        end;
        rwcnt = MatRowCnt(OPr);
      end;
    end;
  end;
  if (payinited) then begin
    if (rwcnt>0) then begin
      OPSumup(OPr,false);
      if (OPr.CurPayVal>0) then begin
        if (OPr.SerNr==-1) then begin
          OPr.SerNr = NextSerNr("OPVc",OPr.TransDate,-1,false,"");
        end;
        if (RecordInsert(OPr,false)) then begin end;
        CheckFlush(cnt,10);
      end;
    end;
  end;
LOPCreateMn:;
  return;
end;

