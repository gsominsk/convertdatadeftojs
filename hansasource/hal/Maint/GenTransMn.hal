external updating function LongInt DropSHVcRecordCheck(var record DropSHVc,record DropSHVc,LongInt,LongInt);
external updating function LongInt RetPUVcRecordCheck(var record RetPUVc,record RetPUVc,LongInt,LongInt);
external procedure CheckFlush(var Integer,Integer);
external updating procedure InvalidateTR(Integer,LongInt);
external updating function LongInt VATVIVcRecordCheck(var record VATVIVc,record VATVIVc,LongInt,LongInt);
external updating function LongInt VATIVVcRecordCheck(var record VATIVVc,record VATIVVc,LongInt,LongInt);
external updating function LongInt RetVcRecordCheck(var record RetVc,record RetVc,LongInt,LongInt);
external updating function LongInt SDVcRecordCheck(var record SDVc,record SDVc,LongInt,LongInt);
external updating function LongInt SRVcRecordCheck(var record SRVc,record SRVc,LongInt,LongInt);
external updating function LongInt CLOutVcRecordCheck(var record CLOutVc,record CLOutVc,LongInt,LongInt);
external updating function LongInt CLInVcRecordCheck(var record CLInVc,record CLInVc,LongInt,LongInt);
external updating function LongInt ExpVcRecordCheck(var record ExpVc,record ExpVc,LongInt,LongInt);
external updating function LongInt SHVcRecordCheck(var record SHVc,record SHVc,LongInt,LongInt);
external updating function LongInt OPVcRecordCheck(record OPVc,record OPVc,LongInt,LongInt);
external updating function LongInt PPVcRecordCheck(var record PPVc,record PPVc,LongInt,LongInt);
external updating function LongInt VIVcRecordCheck(record VIVc,record VIVc,LongInt,LongInt);
external updating function LongInt StockMovVcRecordCheck(var record StockMovVc,record StockMovVc,LongInt,LongInt);
external updating function LongInt PUVcRecordCheck(var record PUVc,record PUVc,LongInt,LongInt);
external updating function LongInt IPVcRecordCheck(var record IPVc,record IPVc,LongInt,LongInt);
external updating function LongInt IVVcRecordCheck(record IVVc,record IVVc,LongInt,LongInt);
external updating function LongInt INTransferVcRecordCheck(var record INTransferVc,record INTransferVc,LongInt,LongInt);
external updating function LongInt ProdVcRecordCheck(var record ProdVc,record ProdVc,LongInt,LongInt);
external updating function LongInt WSVcRecordCheck(var record WSVc,record WSVc,LongInt,LongInt);
external updating function LongInt AT2WrofVcRecordCheck(record AT2WrofVc,record AT2WrofVc,LongInt,LongInt);
external updating function LongInt IntIVVcRecordCheck(record IntIVVc,record IntIVVc,LongInt,LongInt);
external updating function LongInt CheckVcRecordCheck(var record CheckVc,record CheckVc,LongInt,LongInt);
external updating function LongInt OwnCheckVcRecordCheck(var record OwnCheckVc,record OwnCheckVc,LongInt,LongInt);
external updating function LongInt CredManVcRecordCheck(var record CredManVc,record CredManVc,LongInt,LongInt);
external updating function LongInt ProdOperationVcRecordCheck(var record ProdOperationVc,record ProdOperationVc,LongInt,LongInt);

updating procedure VATVIVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record VATVIVc VATVIr;
  record VATVIVc oldVATVIr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  VATVIr.SerNr = afr;
  TrHs = true;
  while (LoopMain(VATVIr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (VATVIr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldVATVIr,VATVIr);
      oldVATVIr.OKFlag = 0;
      if (VATVIVcRecordCheck(VATVIr,oldVATVIr,updatemode,0)==0) then begin
        if (VATVIr.Invalid!=0) then begin
          InvalidateTR(VATVIYc,VATVIr.SerNr);
        end;
      end else begin
LogText(0,"Create N/L Transaction failed for Purchase Invoice VAT Correction " & VATVIr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(VATVIr.SerNr,M4Long);
  end;
  RETURN;
END; 

updating procedure VATIVVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record VATIVVc VATIVr;
  record VATIVVc oldVATIVr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  VATIVr.SerNr = afr;
  TrHs = true;
  while (LoopMain(VATIVr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (VATIVr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldVATIVr,VATIVr);
      oldVATIVr.OKFlag = 0;
      if (VATIVVcRecordCheck(VATIVr,oldVATIVr,updatemode,0)==0) then begin
        if (VATIVr.Invalid!=0) then begin
          InvalidateTR(VATIVYc,VATIVr.SerNr);
        end;
      end else begin
LogText(0,"Create N/L Transaction failed for Sales Invoice VAT Correction " & VATIVr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(VATIVr.SerNr,M4Long);
  end;
  RETURN;
END; 

updating procedure RetVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record RetVc Retr;
  record RetVc oldRetr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  Retr.SerNr = afr;
  TrHs = true;
  while (LoopMain(Retr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (Retr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldRetr,Retr);
      oldRetr.OKFlag = 0;
      if (RetVcRecordCheck(Retr,oldRetr,updatemode,0)==0) then begin
      end else begin
LogText(0,"Create N/L Transaction failed for Return Goods " & Retr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(Retr.SerNr,M4Long);
  end;
  RETURN;
END; 

updating procedure SDVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record SDVc SDr;
  record SDVc oldSDr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  SDr.SerNr = afr;
  TrHs = true;
  while (LoopMain(SDr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (SDr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldSDr,SDr);
      oldSDr.OKFlag = 0;
      if (SDVcRecordCheck(SDr,oldSDr,updatemode,0)==0) then begin
      end else begin
LogText(0,"Create N/L Transaction failed for Stock Depreciation " & SDr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(SDr.SerNr,M4Long);
  end;
  RETURN;
END; 

updating procedure CLOutVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record CLOutVc CLOutr;
  record CLOutVc oldCLOutr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  CLOutr.SerNr = afr;
  TrHs = true;
  while (LoopMain(CLOutr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (CLOutr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldCLOutr,CLOutr);
      oldCLOutr.OKFlag = 0;
      if (CLOutVcRecordCheck(CLOutr,oldCLOutr,updatemode,0)==0) then begin
        if (CLOutr.Invalid!=0) then begin
          InvalidateTR(CLOutYc,CLOutr.SerNr);
        end;
      end else begin
LogText(0,"Create N/L Transaction failed for Cash Out " & CLOutr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(CLOutr.SerNr,M4Long);
  end;
  RETURN;
END; 

updating procedure CLInVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record CLInVc CLInr;
  record CLInVc oldCLInr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  CLInr.SerNr = afr;
  TrHs = true;
  while (LoopMain(CLInr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (CLInr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) and (CLInr.Invalid==0) then begin
      RecordCopy(oldCLInr,CLInr);
      oldCLInr.OKFlag = 0;
      if (CLInVcRecordCheck(CLInr,oldCLInr,updatemode,0)==0) then begin
        if (CLInr.Invalid!=0) then begin
          InvalidateTR(CLInYc,CLInr.SerNr);
        end;
      end else begin
LogText(0,"Create N/L Transaction failed for Cash In " & CLInr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(CLInr.SerNr,M4Long);
  end;
  RETURN;
END; 

updating procedure ExpVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record ExpVc Expr;
  record ExpVc oldExpr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  Expr.SerNr = afr;
  TrHs = true;
  while (LoopMain(Expr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (Expr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      if (Expr.Invalid==0) then begin 
        RecordCopy(oldExpr,Expr);
        oldExpr.OKFlag = 0;
        if (ExpVcRecordCheck(Expr,oldExpr,updatemode,0)==0) then begin
          if (Expr.Invalid!=0) then begin
            InvalidateTR(ExpYc,Expr.SerNr);
          end;
        end else begin
LogText(0,"Create N/L Transaction failed for Expense " & Expr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
        end;
        CheckFlush(flushcnt,10);
      end;
    end;
    UserTrace(Expr.SerNr,M4Long);
  end;
  RETURN;
END; 

updating procedure SHVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record SHVc SHr;
  record SHVc oldSHr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  SHr.SerNr = afr;
  TrHs = true;
  while (LoopMain(SHr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (SHr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldSHr,SHr);
      oldSHr.OKFlag = 0;
      if (SHVcRecordCheck(SHr,oldSHr,updatemode,0)==0) then begin
      end else begin
LogText(0,"Create N/L Transaction failed for Delivery " & SHr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(SHr.SerNr,M4Long);
  end;
  RETURN;
END; 

updating procedure OPVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record OPVc OPr;
  record OPVc oldOPr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  OPr.SerNr = afr;
  TrHs = true;
  while (LoopMain(OPr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (OPr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldOPr,OPr);
      oldOPr.DoneFlag = 0;
      if (OPVcRecordCheck(OPr,oldOPr,updatemode,0)==0) then begin
        if (OPr.Invalid!=0) then begin
          InvalidateTR(OPYc,OPr.SerNr);
        end;
      end else begin
LogText(0,"Create N/L Transaction failed for Payment " & OPr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(OPr.SerNr,M4Long);
  end;
  RETURN;
END; 

updating procedure PPVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record PPVc PPr;
  record PPVc oldPPr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  PPr.SerNr = afr;
  TrHs = true;
  while (LoopMain(PPr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (PPr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) and (PPr.Invalid==0) then begin
      RecordCopy(oldPPr,PPr);
      oldPPr.DoneFlag = 0;
      if (PPVcRecordCheck(PPr,oldPPr,updatemode,0)==0) then begin
        if (PPr.Invalid!=0) then begin
          InvalidateTR(PPYc,PPr.SerNr);
        end;
      end else begin
LogText(0,"Create N/L Transaction failed for Personnel Payment " & PPr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(PPr.SerNr,M4Long);
  end;
  RETURN;
END; 

updating procedure VIVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record VIVc VIr;
  record VIVc oldVIr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  VIr.SerNr = afr;
  TrHs = true;
  while (LoopMain(VIr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (VIr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldVIr,VIr);
      oldVIr.OKFlag = 0;
      if (VIVcRecordCheck(VIr,oldVIr,updatemode,0)==0) then begin
        if (VIr.Invalid!=0) then begin
          InvalidateTR(VIYc,VIr.SerNr);
        end;
      end else begin
LogText(0,"Create N/L Transaction failed for Purchase Invoice " & VIr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(VIr.SerNr,M4Long);
  end;
  RETURN;
END; 

updating procedure StockMovVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record StockMovVc StockMovr;
  record StockMovVc oldStockMovr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  StockMovr.SerNr = afr;
  TrHs = true;
  while (LoopMain(StockMovr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (StockMovr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldStockMovr,StockMovr);
      oldStockMovr.OKFlag = 0;
      oldStockMovr.SentOKFlag = 0;
      if (StockMovVcRecordCheck(StockMovr,oldStockMovr,updatemode,0)==0) then begin
      end else begin
LogText(0,"Create N/L Transaction failed for Stock Movement " & StockMovr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(StockMovr.SerNr,M4Long);
  end;
  RETURN;
END; 

updating procedure PUVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record PUVc PUr;
  record PUVc oldPUr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  PUr.SerNr = afr;
  TrHs = true;
  while (LoopMain(PUr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (PUr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldPUr,PUr);
      oldPUr.OKFlag = 0;
      if (PUVcRecordCheck(PUr,oldPUr,updatemode,0)==0) then begin
      end else begin
LogText(0,"Create N/L Transaction failed for Goods Receipt " & PUr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(PUr.SerNr,M4Long);
  end;
  RETURN;
END; 

updating procedure SRVcGenTrans(LongInt afr,LongInt ato)
begin
  Boolean TrHs;
  record SRVc SRr;
  record SRVc oldSRr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  SRr.SerNr = afr;
  TrHs = true;
  while (LoopMain(SRr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (SRr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldSRr,SRr);
      oldSRr.OKFlag = 0;
      if (SRVcRecordCheck(SRr,oldSRr,updatemode,0)==0) then begin
      end else begin
LogText(0,"Create N/L Transaction failed for Stock Reveluation " & SRr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(SRr.SerNr,M4Long);
  end;
  return;
end; 

updating procedure DropSHVcGenTrans(LongInt afr,LongInt ato)
begin
  Boolean TrHs;
  record DropSHVc DropSHr;
  record DropSHVc oldDropSHr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  DropSHr.SerNr = afr;
  TrHs = true;
  while (LoopMain(DropSHr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (DropSHr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldDropSHr,DropSHr);
      oldDropSHr.OKFlag = 0;
      if (DropSHVcRecordCheck(DropSHr,oldDropSHr,updatemode,0)==0) then begin
      end else begin
LogText(0,"Create N/L Transaction failed for Drop Shipment " & DropSHr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(DropSHr.SerNr,M4Long);
  end;
  return;
end; 

updating procedure RetPUVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record RetPUVc RetPUr;
  record RetPUVc oldRetPUr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  RetPUr.SerNr = afr;
  TrHs = true;
  while (LoopMain(RetPUr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (RetPUr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldRetPUr,RetPUr);
      oldRetPUr.OKFlag = 0;
      if (RetPUVcRecordCheck(RetPUr,oldRetPUr,updatemode,0)==0) then begin
      end else begin
LogText(0,"Create N/L Transaction failed for Return Goods " & RetPUr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(RetPUr.SerNr,M4Long);
  end;
  RETURN;
END; 

updating procedure ProdVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record ProdVc Prodr;
  record ProdVc oldProdr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  Prodr.SerNr = afr;
  TrHs = true;
  while (LoopMain(Prodr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (Prodr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldProdr,Prodr);
      oldProdr.PRStatusFlag = 0;
      if (ProdVcRecordCheck(Prodr,oldProdr,updatemode,0)==0) then begin
      end else begin
LogText(0,"Create N/L Transaction failed for Production " & Prodr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(Prodr.SerNr,M4Long);
  end;
  RETURN;
END; 

updating procedure WSVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record WSVc WSr;
  record WSVc oldWSr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  WSr.SerNr = afr;
  TrHs = true;
  while (LoopMain(WSr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (WSr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldWSr,WSr);
      oldWSr.OKFlag = 0;
      if (WSVcRecordCheck(WSr,oldWSr,updatemode,0)==0) then begin
      end else begin
LogText(0,"Create N/L Transaction failed for Work Sheet " & WSr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(WSr.SerNr,M4Long);
  end;
  RETURN;
END; 

updating procedure AT2WrofVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record AT2WrofVc AT2Wrofr;
  record AT2WrofVc oldAT2Wrofr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  AT2Wrofr.SerNr = afr;
  TrHs = true;
  while (LoopMain(AT2Wrofr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (AT2Wrofr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldAT2Wrofr,AT2Wrofr);
      oldAT2Wrofr.OKFlag = 0;
      if (AT2WrofVcRecordCheck(AT2Wrofr,oldAT2Wrofr,updatemode,0)==0) then begin
        if (AT2Wrofr.Invalid!=0) then begin
          InvalidateTR(AT2WrofYc,AT2Wrofr.SerNr);
        end;
      end else begin
LogText(0,"Create N/L Transaction failed for Asset Writeof " & AT2Wrofr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(AT2Wrofr.SerNr,M4Long);
  end;
  RETURN;
END; 

updating procedure CheckVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record CheckVc Checkr;
  record CheckVc oldCheckr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  Checkr.SerNr = afr;
  TrHs = true;
  while (LoopMain(Checkr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (Checkr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldCheckr,Checkr);
      oldCheckr.Openf = 0;
      if (CheckVcRecordCheck(Checkr,oldCheckr,updatemode,0)==0) then begin
        if (Checkr.Invalid!=0) then begin
          InvalidateTR(CheckYc,Checkr.SerNr);
        end;
      end else begin
LogText(0,"Create N/L Transaction failed for Check " & Checkr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(Checkr.SerNr,M4Long);
  end;
  RETURN;
END; 

updating procedure OwnCheckVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record OwnCheckVc OwnCheckr;
  record OwnCheckVc oldOwnCheckr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  OwnCheckr.SerNr = afr;
  TrHs = true;
  while (LoopMain(OwnCheckr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (OwnCheckr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldOwnCheckr,OwnCheckr);
      oldOwnCheckr.Openf = 0;
      if (OwnCheckVcRecordCheck(OwnCheckr,oldOwnCheckr,updatemode,0)==0) then begin
        if (OwnCheckr.Invalid!=0) then begin
          InvalidateTR(OwnCheckYc,OwnCheckr.SerNr);
        end;
      end else begin
LogText(0,"Create N/L Transaction failed for Own Check " & OwnCheckr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(OwnCheckr.SerNr,M4Long);
  end;
  RETURN;
END; 

updating procedure IntIVVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record IntIVVc IntIVr;
  record IntIVVc oldIntIVr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  IntIVr.SerNr = afr;
  TrHs = true;
  while (LoopMain(IntIVr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (IntIVr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldIntIVr,IntIVr);
      oldIntIVr.OKFlag = 0;
      if (IntIVVcRecordCheck(IntIVr,oldIntIVr,updatemode,0)==0) then begin
        if (IntIVr.Invalid!=0) then begin
          InvalidateTR(IntIVYc,IntIVr.SerNr);
        end;
      end else begin
LogText(0,"Create N/L Transaction failed for Internal Invoice " & IntIVr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(IntIVr.SerNr,M4Long);
  end;
  RETURN;
END; 

updating procedure IPVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record IPVc IPr;
  record IPVc oldIPr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  IPr.SerNr = afr;
  TrHs = true;
  while (LoopMain(IPr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (IPr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldIPr,IPr);
      oldIPr.OKFlag = 0;
      if (IPVcRecordCheck(IPr,oldIPr,updatemode,0)==0) then begin
        if (IPr.Invalid!=0) then begin
          InvalidateTR(IPYc,IPr.SerNr);
        end;
      end else begin
LogText(0,"Create N/L Transaction failed for Receipt " & IPr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(IPr.SerNr,M4Long);
  end;
  RETURN;
END; 

global
updating procedure IVVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record IVVc IVr;
  record IVVc oldIVr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  IVr.SerNr = afr;
  TrHs = true;
  while (LoopMain(IVr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (IVr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldIVr,IVr);
      oldIVr.OKFlag = 0;
      if (IVVcRecordCheck(IVr,oldIVr,updatemode,0)==0) then begin
        if (IVr.Invalid!=0) then begin
          InvalidateTR(IVYc,IVr.SerNr);
        end;
      end else begin
LogText(0,"Create N/L Transaction failed for Invoice " & IVr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(IVr.SerNr,M4Long);
  end;
  RETURN;
END; 

updating procedure INTransferVcGenTrans(LongInt afr,LongInt ato)
BEGIN
  Boolean TrHs;
  record INTransferVc INTransferr;
  record INTransferVc oldINTransferr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  INTransferr.SerNr = afr;
  TrHs = true;
  while (LoopMain(INTransferr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (INTransferr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldINTransferr,INTransferr);
      oldINTransferr.OKFlag = 0;
      if (INTransferVcRecordCheck(INTransferr,oldINTransferr,updatemode,0)==0) then begin
      end else begin
LogText(0,"Create N/L Transaction failed for Stock Transfer " & INTransferr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(INTransferr.SerNr,M4Long);
  end;
  RETURN;
END; 

updating procedure CredManVcGenTrans(LongInt afr,LongInt ato)
begin
  Boolean TrHs;
  record CredManVc CredManr;
  record CredManVc oldCredManr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  CredManr.SerNr = afr;
  TrHs = true;
  while (LoopMain(CredManr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (CredManr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldCredManr,CredManr);
      oldCredManr.OKFlag = 0;
      if (CredManVcRecordCheck(CredManr,oldCredManr,updatemode,0)==0) then begin
      end else begin
LogText(0,"Create N/L Transaction failed for Credit Man " & CredManr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(CredManr.SerNr,M4Long);
  end;
  return;
end; 

updating procedure ProdOperationVcGenTrans(LongInt afr,LongInt ato)
begin
  Boolean TrHs;
  record ProdOperationVc POr;
  record ProdOperationVc oldPOr;
  LongInt updatemode;
  Integer flushcnt;

  updatemode = 2;
  POr.SerNr = afr;
  TrHs = true;
  while (LoopMain(POr,1,TrHs)) begin
    if (ato!=-1) then begin
        if (POr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordCopy(oldPOr,POr);
      oldPOr.PRStatusFlag = 0;
      if (ProdOperationVcRecordCheck(POr,oldPOr,updatemode,0)==0) then begin
      end else begin
LogText(0,"Create N/L Transaction failed for Prod Operation " & POr.SerNr & " RECORDCHECKLASTERRORNO " & RECORDCHECKLASTERRORNO);
      end;
      CheckFlush(flushcnt,10);
    end;
    UserTrace(POr.SerNr,M4Long);
  end;
  return;
end; 

global
updating procedure GenTransMn(record RcVc RepSpec)
BEGIN
  LongInt afr,ato;
  
  afr = FirstInRange(RepSpec.f1,10);
  ato = LastInRange(RepSpec.f1,10);
  switch (RepSpec.flags[0]) begin
    case 0:  IVVcGenTrans(afr,ato);
    case 1:  IPVcGenTrans(afr,ato);
    case 2:  PUVcGenTrans(afr,ato);
    case 3:  StockMovVcGenTrans(afr,ato);
    case 4:  VIVcGenTrans(afr,ato);
    case 5:  PPVcGenTrans(afr,ato);
    case 6:  OPVcGenTrans(afr,ato);
    case 7:  SHVcGenTrans(afr,ato);
    case 8:  ExpVcGenTrans(afr,ato);
    case 9:  CLInVcGenTrans(afr,ato);
    case 10: CLOutVcGenTrans(afr,ato);
    case 11: SDVcGenTrans(afr,ato);
    case 13: RetVcGenTrans(afr,ato);
    case 14: VATVIVcGenTrans(afr,ato);
    case 15: VATIVVcGenTrans(afr,ato);
    case 16: INTransferVcGenTrans(afr,ato);
    case 17: RetPUVcGenTrans(afr,ato);
    case 18: ProdVcGenTrans(afr,ato);
    case 19: WSVcGenTrans(afr,ato);

    case 20: AT2WrofVcGenTrans(afr,ato);
    case 21: CheckVcGenTrans(afr,ato);
    case 22: OwnCheckVcGenTrans(afr,ato);
    case 23: IntIVVcGenTrans(afr,ato);
    case 24: CredManVcGenTrans(afr,ato);
//    case 25: IntIVVcGenTrans(afr,ato);
    case 26: ProdOperationVcGenTrans(afr,ato);
    case 27: SRVcGenTrans(afr,ato);
    case 28: DropSHVcGenTrans(afr,ato);
  end;
  RETURN;
END;