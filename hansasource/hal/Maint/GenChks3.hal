external procedure CheckFlush(var Integer,Integer);
external Procedure LookUpChqAcnt(Integer,var string);

updating procedure NewOwnCheque3(String ChqNro,Integer State,string Origin,String Target,String Objects,String Temp,string bankaccount,String LangCode,string BankCode,var Integer flushcnt)
begin
  Record OwnCheckVc OwnCheckr;
  Boolean Res;
  String 20 AcNro;
  String 60 Desc;
  Date bdate;            // a blank date
  Record AccVc Accr;
  record BankVc Bankr;

  Recordnew(OwnCheckr); 
  //OwnCheckr.TransDate        = CurrentDate;
  OwnCheckr.TransDate        = bdate;
  OwnCheckr.CheckNr          = ChqNro;
  OwnCheckr.Openf            = 0;              
  OwnCheckr.OrigAccNr        = Origin;
  OwnCheckr.TargetAccNr      = Target;
  OwnCheckr.TargetObjects    = Objects;
  OwnCheckr.BankCode    = BankCode;
  Accr.AccNumber = OwnCheckr.TargetAccNr;
  if (ReadFirstMain(Accr,1,true)) then begin 
    OwnCheckr.CurncyCode = Accr.Curncy;
  end;
  Bankr.Code = OwnCheckr.BankCode;
  if (ReadFirstMain(Bankr,1,true)) then begin 
    OwnCheckr.BankName = Bankr.Name;
    OwnCheckr.LangCode = Bankr.LangCode;
  end;
  

  AcNro = ""; 
  if nonblank(Temp) then begin
    AcNro = Temp;
  end else begin
    if (State == 0) then begin
      LookUpChqAcnt(8,AcNro);     // pagare
    end else begin
      LookUpChqAcnt(3,AcNro);    // cheque
    end;
  end;

  OwnCheckr.TempAccNr        = AcNro;
  OwnCheckr.ChkMode          = State; 
  OwnCheckr.BankAcc          = bankaccount;
  if (nonblank(LangCode)) then begin
    OwnCheckr.LangCode       = LangCode;
  end;
  //OwnCheckr.SerNr = NextSerNr("OwnCheckVc",OwnCheckr.TransDate ,-1,false,LangCode); 
  OwnCheckr.SerNr = NextSerNr("OwnCheckVc",CurrentDate,-1,false,LangCode);  

  if (OwnCheckr.SerNr>0) then begin
    Res = RecordStore(OwnCheckr,false);
  end;
  return;
end;

global
updating procedure GenOwnChk3Mn(record RcVc RepSpec)
begin
  Record CheckVc Chq;
  Boolean Res;
  LongInt i,j,Cant,StartNumber,length,nr;
  String 30 ChkNumber,Target,tstr,a,EnCabez,Numbers,ResNumber;
  Integer flushcnt;

  if blank(RepSpec.long1) then begin
    goto L99;
  end;
  Cant = RepSpec.long1;
  Target = RepSpec.f2;
  length  = len(RepSpec.f1);
  
  for (j=0;j<length;j=j+1) begin
    a = mid(RepSpec.f1,j,1);  
    if ( (asc(a) >= 48) and (asc(a) <= 57) ) then begin
      goto Lout;
    end;
  end;
Lout:;
  
  Numbers = mid(RepSpec.f1,j,100);
  length = len(Numbers);
  StartNumber = Numbers;
  EnCabez = left(RepSpec.f1,j);

  if (nonblank(Target) and (StartNumber > 0) and (Cant > 0)) then begin
    for (j=0;j<Cant;j=j+1) begin
      i =  (StartNumber + j);
      tstr = i;
      nr = length - len(tstr);
      if (nr > 0) then begin
        ResNumber = left(Numbers,nr) & tstr;
      end else begin
        ResNumber = tstr;
      end;
      ChkNumber = EnCabez & ResNumber;
      NewOwnCheque3(ChkNumber,RepSpec.flags[1],RepSpec.LastAcc,Target,RepSpec.f3,RepSpec.AccStr,RepSpec.f4,RepSpec.f5,RepSpec.FirstAcc,flushcnt);
      Res = RecordStore(Chq,true);
    end;
  end;
L99:;  
  Return;
end;

