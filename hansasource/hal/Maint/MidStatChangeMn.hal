external updating procedure RunTheCashupMn(string,string,string,Date,Time,Integer,Integer,Integer,Integer,Integer,Integer);
external procedure MidStatChangeDefaults(var record RcVc);
external procedure SplitEclass(string,var Array string);
external procedure CheckFlush(var Integer,Integer);
external function Integer GetIntYc(Date);
external function LongInt DateDiff(Date,Date);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external function Boolean GetAccName(string,var string,Integer);
external function LongInt FindReservation(string,Date,Time);
external updating function Boolean JobToShopBask(var record JobVc,record ResTypeVc,record HotelBlock,Record RcVc);
external updating procedure StoreInShopBask(Integer,LongInt,String,String,Val,Val,Val,String,String,LongInt,String,Boolean,string,string,longint,string,val,val,val,val,val);
external updating procedure CreateNLWIPTrans(record JobVc,var record TRVc,var val,Boolean,var Integer,Boolean);
external updating procedure SaveTrans(record TRVc);
external procedure SwapDCTrans(Integer,var record TRVc);

updating procedure SendRepetitiveItemsToShopBask(record JobVc Jobr,Boolean doflush,var Integer flushcnt)
begin
  integer i,rows;
  Record RepItemsVc RepItemsr;
  Row RepItemsVc RepItemsrw;

  RepItemsr.SerNr = Jobr.SerNr;
  if readfirstmain(RepItemsr,1,true) then begin
    rows = MatRowCnt(RepItemsr);
    for(i=0;i<rows;i=i+1) begin
      MatRowGet(RepItemsr,i,RepItemsrw);
      StoreInShopBask(2,RepItemsr.SerNr,RepItemsrw.Item,RepItemsrw.CUName,RepItemsrw.Qty,RepItemsrw.Price,blankval,RepItemsrw.CUCode,Jobr.Objects,-1,"",true,"","",-1,Jobr.CurncyCode,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
      if (doflush) then begin
        CheckFlush(flushcnt,10);
      end;
    end;
  end;
  return;
end;

updating 
procedure DayLateToNoShow(date gdate,Boolean doflush,var Integer flushcnt)
begin
  Record HotelBlock HotelBlockr;  
  Record JobVc Jobr;
  Record JobVc oldJobr;
  Boolean foundf;
  Date sDate;

  BlockLoad(HotelBlockr);
  if (HotelBlockr.NoOfDaysToNoShow>0) then begin
    sDate = AddDay(gdate,-HotelBlockr.NoOfDaysToNoShow);
    foundf = true;
    Jobr.TransDate = sDate;
    while LoopKey("TransDate",Jobr,1,foundf) begin
      if (Jobr.TransDate<>sDate) then begin
        foundf = false;
      end else begin
        if (HotelBlockr.DefSt==Jobr.ResStatus) then begin
          RecordCopy(oldJobr,Jobr);
          Jobr.ResStatus = HotelBlockr.NoshowStatus;
          Jobr.ResCode = "";
          if (RecordUpdate(oldJobr,Jobr,false)==0) then begin end;
          if (doflush) then begin
            CheckFlush(flushcnt,10);
          end;
        end;
      end;
    end;  
  end;  
  return;
end;

procedure AddChecklistMessasges(record ActVc Actr,string resmes)
begin
  record ResMesVc ResMesr;
  row ResMesVc ResMesrw;
  row ActVc Actrw;
  Record OBTypeVc OBTyper;
  Integer i,rwcnt;

  ResMesr.Code = resmes;
  if ReadFirstMain(ResMesr,1,true) then begin
    rwcnt = MatRowCnt(ResMesr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ResMesr,i,ResMesrw); 
      Actrw.TextCode   = ResMesrw.TextCode;
      OBTyper.Code = ResMesrw.TextCode;
      if ReadFirstMain(OBTyper,1,true) then begin
        Actrw.Text  = OBTyper.Comment;
      end;
      MatRowPut(Actr,i,Actrw); 
    end;
  end;  
  return;
end;

function Boolean CheckIfCleanActivitiesCreateed(record ActVc newActr,string cleaningtype,string rescode)
begin
  Boolean res;
  string 20 ckey;
  record ActVc Actr;
  Boolean TrHs,testf;
  
  RecordCopy(Actr,newActr);
  ckey = "ResourceMain:" & rescode;
  TrHs = true;
  while (LoopKey(ckey,Actr,2,TrHs)) begin
    if (TrHs) then begin
      testf = true;
      if (Actr.TransDate!=newActr.TransDate) then begin TrHs = false; end;
      if (SetInSet(rescode,Actr.Resources)==false) then begin TrHs = false; end;
      if (Actr.ActType!=cleaningtype) then begin testf = false; end;
    end;
    if (TrHs and testf) then begin    
      res = true; 
      TrHs = true;
    end;
  end;
  CheckIfCleanActivitiesCreateed = res;
  return;
end;


updating procedure CreateCleanActivities(record JobVc Jobr,Date d,Time t,string cleaningtype,string cleanresult,string resmes,
                                         Boolean changesheetf,Boolean doflush,var Integer flushcnt,Integer CreateCleanAct)
begin
  record ActVc Actr;
  record ActTypeVc ATyper;
  record HouseKeepingBlock HKr;
  record CalDispGroupBlock DGr;
  row CalDispGroupBlock DGrw;
  Array string 20 ac;
  Integer i,rwcnt;
  Integer diff;
  
  if (nonblank(cleaningtype)) then begin
    BlockLoad(HKr);
    BlockLoad(DGr);
    rwcnt = MatRowCnt(DGr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(DGr,i,DGrw);
      if (DGrw.Code==HKr.CleanerDispGr) then begin
        SplitEclass(DGrw.DefStr,ac);
        i = rwcnt;
      end;
    end;
    RecordNew(Actr);
    Actr.TransDate = d;
    Actr.StartTime = t;
    Actr.EndDate = d;
    Actr.TodoFlag = 0;
    Actr.CalTimeFlag = 1;
    Actr.ActType = cleaningtype;
    Actr.ActResult = cleanresult;
    Actr.Resources = Jobr.ResCode;
    Actr.MainPersons = "";
    i = 0;
    if (CreateCleanAct==2) then begin
      while (nonblank(ac[i])) begin
        if (nonblank(Actr.MainPersons)) then begin
          Actr.MainPersons = Actr.MainPersons & ",";
        end;
        Actr.MainPersons = Actr.MainPersons & ac[i];
        i = i + 1;
      end;
    end;
    ATyper.Code = cleaningtype;
    if (ReadFirstMain(ATyper,1,true)) then begin
      Actr.Comment = ATyper.Comment & " ";
    end;
    Actr.Comment = Actr.Comment & Jobr.ResCode;
    if (CheckIfCleanActivitiesCreateed(Actr,cleaningtype,Jobr.ResCode)) then begin
      goto LCreateCleanActivities;
    end;
    Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
    if (nonblank(resmes)) then begin
      AddChecklistMessasges(Actr,resmes);
    end;    
    if (RecordStore(Actr,false)) then begin end;
    if (doflush) then begin
      CheckFlush(flushcnt,10);
    end;
    if (changesheetf) then begin
      diff = DateDiff(d,Jobr.TransDate);
// Needs setting for changing sheets....
      if (diff>1) then begin
        if (Mod(diff,3)==0) then begin
          Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
          Actr.Comment = USetStr(12930) & Jobr.ResCode;
          if (RecordStore(Actr,false)) then begin end;
          if (doflush) then begin
            CheckFlush(flushcnt,10);
          end;
        end;
      end;
    end;
  end;
LCreateCleanActivities:;  
  return;
end;

updating procedure UpdateCheckOutDates(string chinstat,string rescode,Date thedat,Boolean doflush,var Integer flushcnt)
begin
  record JobVc Jobr;
  record JobVc oldJobr;
  Boolean foundf;
  Boolean testf;
  
  foundf = true;
  Jobr.ResStatus = chinstat;
  while (LoopKey("ResStatus",Jobr,1,foundf)) begin
    if (Jobr.ResStatus!=chinstat) then begin
      foundf = false;
    end;
    testf = true;
    if (foundf==false) then begin
      testf = false;
    end;
    if (nonblank(rescode)) then begin
      if (Jobr.ResCode!=rescode) then begin
        testf = false;
      end;
    end;
    if (Jobr.EndDate>=thedat) then begin
      testf = false;
    end;
    if (testf) then begin
      RecordCopy(oldJobr,Jobr);
      Jobr.EndDate = thedat;
      if (RecordUpdate(oldJobr,Jobr,false)==0) then begin end;
      if (doflush) then begin
        CheckFlush(flushcnt,10);
      end;
    end;
  end;
  return;
end;

global
updating procedure MidStatChangeMn(record RcVc RepSpec)
begin
  record ResTypeVc ResTyper;
  record HouseKeepingBlock HKr;
  record HotelBlock Hotelsettings;
  record NightMaintBlock NMr;
  record TRVc TRr;
  row TRVc TRrw;
  Integer i,rwcnt;
  Record ResVc Resr;
  Record JobVc Jobr;
  Record JobVc oldJobr;
  Boolean TsHr,testf;
  val qty;
  val temp,baserate1,baserate2;
  LongInt sernr;
  string 200 tstr;
  string 20 curncy;
  val TotSump;
  Time bt;
  Integer flushcnt;
  Boolean doflush;

  doflush = true;
  if (RepSpec.flags[29]==1234) then begin
    doflush = false;
  end;
  TotSump = 0;
  BlockLoad(Hotelsettings);   
  BlockLoad(HKr);
  BlockLoad(NMr);
  RecordNew(TRr);
  TsHr = true;
  if (BlankDate(RepSpec.sStartDate)) then begin TsHr = false; end;
  if (BlankTime(RepSpec.sStartTime)) then begin TsHr = false; end;
  if (nonblank(RepSpec.f2)) then begin
    Resr.Code = RepSpec.f2;
  end;
  UpdateCheckOutDates(HotelSettings.ChInSt,RepSpec.f2,RepSpec.sStartDate,doflush,flushcnt);
  while (LoopMain(Resr,1,TsHr)) begin
    testf = true;
    if (nonblank(RepSpec.f2)) then begin
      if (Resr.Code<>RepSpec.f2) then begin testf = false; end;
    end;
    if (testf) then begin 
      MaintTrace(Resr.Code);    
      sernr = FindReservation(Resr.Code,RepSpec.sStartDate,RepSpec.sStartTime);
      if (sernr==-1) then begin
        sernr = FindReservation(Resr.Code,RepSpec.sStartDate,bt);//for todays checkins
      end;
      if (sernr<>-1) then begin
        ResetLoop(Jobr);
        Jobr.SerNr = sernr;
        if (ReadFirstMain(Jobr,1,true)) then begin
          if (Jobr.ResStatus==HotelSettings.ChInSt) then begin
            if (RepSpec.flags[0]==1) then begin
              Resr.ResStatus = Hotelsettings.ToResStatus;
              if RecordStore(Resr,true) then begin end;
              if (doflush) then begin
                CheckFlush(flushcnt,10);
              end;
            end;
            if (RepSpec.flags[1]==1) then begin
              ResTyper.Code = Resr.Type;
              if ReadFirstMain(ResTyper,1,true) then begin
                if (ResTyper.ChargeMethod==0) then begin
                  if (JobToShopBask(Jobr,ResTyper,HotelSettings,RepSpec)) then begin end;
                  if (doflush) then begin
                    CheckFlush(flushcnt,10);
                  end;
                end;
              end;
            end;
            if (RepSpec.flags[2]==1) then begin
              SendRepetitiveItemsToShopBask(Jobr,doflush,flushcnt);
            end; 
            if (RepSpec.flags[6]>0) then begin
              CreateCleanActivities(Jobr,AddDay(RepSpec.sStartDate,0),RepSpec.sStartTime,HKr.CleaningType,HKr.CleanResultType,"",true,doflush,flushcnt,RepSpec.flags[6]);//it cannot be +1,it will come from current day +/-
              if (Jobr.EndDate==RepSpec.sStartDate) then begin//checkout
                CreateCleanActivities(Jobr,AddDay(RepSpec.sStartDate,0),RepSpec.sStartTime,HKr.CleanTypeCheckout,HKr.CleanResultType,HKr.MessCheckout,false,doflush,flushcnt,RepSpec.flags[6]);
              end;
            end;
            if (RepSpec.flags[8]==1) then begin
              TRr.Comment = NMr.TransComment;
              TRr.TransDate = AddDay(RepSpec.sStartDate,0);
              CreateNLWIPTrans(Jobr,TRr,TotSump,doflush,flushcnt,true);
            end;
          end else begin//for todays checkins
            if (RepSpec.flags[6]>0) then begin
              CreateCleanActivities(Jobr,AddDay(RepSpec.sStartDate,0),RepSpec.sStartTime,HKr.CleanTypeCheckin,HKr.CleanResultType,HKr.MessCheckin,false,doflush,flushcnt,RepSpec.flags[6]);
            end;
          end;
        end;
      end; 
    end; 
  end;
  if (RepSpec.flags[8]==1) then begin
    rwcnt = MatRowCnt(TRr);
    if (rwcnt>0) then begin
      curncy = "";
      GetFullCurncyRate(curncy,TRr.TransDate,temp,temp,temp,baserate1,baserate2);
      if (TotSump!=0) then begin
        if (GetAccName(HotelSettings.ResBridgeAcc,tstr,60)==true) then begin end;
        AddEuroTrRow(TRr,HotelSettings.ResBridgeAcc,"","",tstr,TotSump,baserate1,baserate2,true,false,TotSump,false,"","","");
      end;

      TRr.TransDate = AddDay(TRr.TransDate,0);
      TRr.IntYc = GetIntYc(TRr.TransDate);
      SwapDCTrans(0,TRr);
      TRr.Number = NextSerNr("TRVc",TRr.TransDate,-1,false,"");
      TRr.IntYc = GetIntYc(TRr.TransDate);
      SaveTrans(TRr);

      TRr.TransDate = AddDay(TRr.TransDate,1);
      SwapDCTrans(0,TRr);
      TRr.Number = NextSerNr("TRVc",TRr.TransDate,-1,false,"");
      TRr.IntYc = GetIntYc(TRr.TransDate);
      SaveTrans(TRr);
    end;
  end;
  if (RepSpec.flags[9]==1) then begin
    RunTheCashupMn("","","",RepSpec.sStartDate,RepSpec.sStartTime,0,1,1,1,0,1);
  end;
  if (RepSpec.flags[3]==1) then begin
    DayLateToNoShow(RepSpec.sStartDate,doflush,flushcnt);
  end;
  return;
end;

global
updating procedure MidnightHotel()
begin
  record RcVc RepSpec;

  ReportDefaults(RepSpec,"MidStatChangeVClass");  
  MidStatChangeDefaults(RepSpec);
  RepSpec.flags[29] = 1234;
  MidStatChangeMn(RepSpec);
  return;
end;
