external function string 255 DateToStr(Date);
external procedure PurgeTRExtYc(record PurgeTRVc,var string);
external function boolean AddEMailRecipients(var record MailVc,string,string,integer);
external function Integer SclassInEclass(Array string,string);
external procedure SplitEclass(string,var Array string);
external procedure ResolveMailboxNumber(var row MailVc);
external function Boolean CheckIfTransactionsInPeriod_CUPer(record RcVc,record CUVc);
external function Integer SclassInEclass(Array string,string);
external function roundmode GetTotalRoundMode(record RoundBlock);
external function roundmode SetRoundModeD(Integer);
external function Boolean PasteActTypeInAct(string,var record ActVc);
external function LongInt YearsOld(Date);
external function LongInt DateDiff(Date,Date);
external function integer GetPersonsInJob(Record JobVc);
external function integer GetRoomsInJob(Record JobVc);
external procedure GetEvents(Record JobVc,Boolean,var string);
external function Boolean GetPD(var record PDVc);
external procedure SetupVATBase(var record SMVc,var Integer);
external function string 255 CreateInvoiceNumber(LongInt,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure GetIPPrepaymentAmount(record IVVc ,string,val ,var val ,val ,Integer ,string,var string);
external procedure IVVc_GetPrePaidAmount(record IVVc,var val);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external procedure FindAllPrepayLosses(string,Date,val,LongInt,val,var val,record IVVc,LongInt,LongInt,Boolean,record BaseCurBlock,val,string);
external function Integer TypeOfCurncy(var string,var Integer);
external procedure TRExtYc(record TRVc,var string);
external function Integer GetIntYc(Date);
external procedure ExportTRBegin(Integer);
external procedure ExportTREnd(Integer);
external procedure ExportTD(Integer,string,string,Boolean,Integer,Boolean,string);
external procedure ExportHTMLBegin();
external procedure ExportHTMLEnd();
external procedure ExportHEADBegin();
external procedure ExportHEADEnd();
external procedure ExportMETA(string);
external procedure ExportTITLE(string);
external procedure ExportBODYBegin(Integer,Integer);
external procedure ExportBODYEnd();
external procedure ExportTABLEBegin(Integer,Integer,string,string,string,string,string);
external procedure ExportTABLEEnd(Integer);
external procedure FindUserMailboxName(string,var string,var string);
external procedure CUGetStartBalance(record CUVc,string,string,Date,var val,Boolean);
external procedure GetCurUser(var record UserVc);
external procedure MailTextRow(string,string,string,var row MailTextVc,var Integer);

updating function LongInt MakeActFromSubSys_MailVcHTML(var record MailVc Mailp, record CUVc CUr)
begin
  record ActTypeGrVc ATGRr;
  record ActTypeVc ATr;
  record ASTBlock ASTRec;
  record UserVc USr;
  record ActVc Actr;
  Boolean savef;
  Integer curcomp;
  LongInt res;

  curcomp = CurrentCompany;
  GetCurUser(USr);
  BlockLoad(ASTRec);
  RecordNew(Actr);
/* Need to find the Customer and Contact with this from address
  Actr.CUCode = Mailp.CustCode;
  CUr.Code = Mailp.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    Actr.Phone = CUr.Phone;
  end;
  Actr.Contact = Mailp.ClientContact;
  Actr.CUName = Mailp.Addr0;
*/
  Actr.TransDate = CurrentDate;
  Actr.OKFlag = ASTRec.MailDone;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  Actr.ActType = ASTRec.Mails;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  Actr.Comment = Mailp.Header;
  Actr.MainPersons = USr.Code;
  Actr.TodoFlag = 1;
  Actr.OKFlag = 0; 
  Actr.CUCode = CUr.Code;
  Actr.CUName = CUr.Name;
  Actr.Contact = CUr.Person;
  Actr.Phone = CUr.Phone;
  savef = true;
  if (savef) then begin 
    ATr.Code = Actr.ActType;
    if (ReadFirstMain(ATr,1,true)) then begin
      Actr.ItemCode = ATr.ItemCode;
      ATGRr.Code = ATr.ActTypeGr;
      if (ReadFirstMain(ATGRr,1,true)) then begin
        Actr.CalTimeFlag = ATGRr.DefTimeFlag;
      end;
    end;  
    if (RecordStore(Actr,false)) then begin
      CreateRecordLink(Actr,curcomp,Mailp,curcomp);  
      CreateRecordLink(Mailp,curcomp,Actr,curcomp);  
      res = Actr.SerNr;
    end;
  end;  
  MakeActFromSubSys_MailVcHTML = res;
  
  return;
end;

updating function LongInt CreateMailActHTML(record CUVc CUr, var record MailVc Mailr)
begin
  LongInt res;

  if (IsRecordLocked(Mailr)==false) then begin
    if (ReadFirstMain(Mailr,0,true)) then begin end;  
    res = MakeActFromSubSys_MailVcHTML(Mailr, CUr);
  end;
  CreateMailActHTML = res;
  return;
end;

procedure CustHeadHTML(record CUVc CUp,val startbalp,Integer inbase)
begin
  string 60 curncy;
  
  //StartFormat(15);
  //EndFormat;
  //StartFormat(15);
  
  /*ExportTABLEBegin(2,0,"","","1","1","645");
  ExportTRBegin(3);
  ExportSizedTD(0,"150","","",false,1,false,USetStr(3184));
  ExportSizedTD(200,"1","","",false,1,false,"Trans. Type");
  ExportSizedTD(200,"1","","",false,1,false,"Number");
  ExportTREnd(6);
  ExportTABLEEnd(4);
  
  ExportTRBegin(6);
  ExportSizedTD(0,"20","","",false,1,false,USetStr(3184));
  ExportSizedTD(0,"280","","",false,1,false,"Trans. Type");
  ExportSizedTD(0,"100","","",false,1,false,"Number");
  ExportSizedTD(0,"100","","",false,1,false,"Debit");
  ExportSizedTD(0,"100","","",false,1,false,"Credit");
  //t=instock-onorder;          
  ExportSizedTD(0,"100","","",false,1,false,"Balance");
  
  //ExportSizedTD(0,"10%","","",false,3,false,sugg);
  ExportTREnd(6);
  
  /*OutString(0,0,CUp.Code,false);
  OutString(2,0,CUp.Name,false);
  //EndFormat;
  //Gray_Divider(0,1);
  //StartFormat(15);
  OutString(0,0,USetStr(3184),false);
  OutString(90,0,USetStr(2435),false);
  OutString(140,0,USetStr(2436),false);
  OutString(3,0,USetStr(2490),true);
  OutString(4,0,USetStr(2491),true);
  if (inbase==0) then begin
    OutString(420,0,USetStr(3201),true);
  end;
  if ((nonblank(CUp.CurncyCode)) and (inbase==1)) then begin
    OutString(1,0,CUp.CurncyCode,true);
  end else begin
    GetBaseCurncy(1,curncy);
    OutString(1,0,curncy,true);
  end;
  //EndFormat;
  Gray_Divider(0,1);
  //StartFormat(15);
  OutString(6,0,USetStr(2492),false);
  OutVal(1,0,startbalp,M4Val,true);
  //EndFormat;*/
  return;
end;

procedure ExportSizedTD(Integer spaces,string width,string align,string colspan,Boolean strongf,Integer fontsize,Boolean boldf,string text)
begin
  string 255 tstr;
  
  tstr = "<td";
  
  if (nonblank(align)) then begin 
    tstr = tstr & " align=""" & align & """";
  end;
  
  if (nonblank(width)) then begin
    tstr = tstr & " width=""" & width & """";
  end;
  
  if (nonblank(colspan)) then begin 
    tstr = tstr & " colspan=""" & colspan & """";
  end;
  
  tstr = tstr & ">";
  
  if (strongf) then begin
    tstr = tstr & "<strong>";
  end;
  
  if (fontsize>=0) then begin 
    tstr = tstr & "<font face=""Arial"" size=""" & fontsize & """>";
  end;
  
  if (boldf) then begin
    tstr = tstr & "<b>";
  end;
  
  if (nonblank(text)) then begin 
    tstr = tstr & text;
  end;
  
  if (boldf) then begin
    tstr = tstr & "</b>";
  end;
  
  if (fontsize>=0) then begin 
    tstr = tstr & "</font>";
  end;
  
  if (strongf) then begin
    tstr = tstr & "</strong>";
  end;
  
  ExportPadString("",spaces," ",false);
  ExportPadString(tstr,len(tstr),"",false);
  ExportPadString("</td>",5,"",false);
  ExportPadString(chr(13),1,"",false);
  
  return;
end;

procedure CustListTransCLInHTML(record RcVc RepSpec,record IPrsVc IPrsr,record CUVc CUp,var val balp,var val SumCredit)
BEGIN
  record CLInVc CLInr;
  row CLInVc CLInrw;
  Integer tcnt,trwcnt;
  val tmp,cuscurval;
  val v,v2;
  string 255 tstr;
  record RoundBlock Rb;
  
  BlockLoad(Rb);
  v = blankval;
  v2 = blankval;
  CLInr.SerNr = IPrsr.TransNr;
  if (ReadFirstMain(CLInr,1,true)) then begin
    if (CLInr.Invalid!=0) then begin goto LCustListTransCLIn; end;
    trwcnt = MatRowCnt(CLInr);
    for (tcnt=0;tcnt<trwcnt;tcnt=tcnt+1) begin
      MatRowGet(CLInr,tcnt,CLInrw);
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,CLInr.Objects)==false) then begin goto L11; end;
      end;        
      if ((CLInrw.Type==1) and (CLInrw.TransNr!=-1)) then begin
        v = blankval;
        if (CLInrw.Sum!=0)then begin              
          if (CLInrw.TransNr==IPrsr.IVNr) then begin
            if (CLInr.TransDate==IPrsr.TransDate) then begin
              if (CLInr.CUCode==CUp.Code) then begin
                v = CLInrw.Sum;
                cuscurval = MulRateToBase1(CLInr.CurncyCode,v,CLInr.FrRate,CLInr.ToRateB1,CLInr.ToRateB2,CLInr.BaseRate1,CLInr.BaseRate2,GetTotalRoundMode(Rb));
                if (RepSpec.flags[2]==0) then begin
                  v = cuscurval;
                end else begin
                  if (CLInr.CurncyCode==CUp.CurncyCode) then begin
                    cuscurval = v;
                  end;
                end;
                balp = balp - cuscurval;
                SumCredit = SumCredit + cuscurval;
              end;
            end;
          end;
          if (v!=0) then begin
            tstr = USetStr(1193);         
            ExportTRBegin(6);
            ExportTD(8,"left","",false,2,false,IPrsr.TransDate);
            ExportTD(8,"left","",false,2,false,tstr);
            tstr = CLInr.SerNr;
            if (IPrsr.IVNr>0) then begin
              tstr = tstr & " (";
              tstr = tstr & IPrsr.IVNr;
              tstr = tstr & " )";
            end;
            ExportTD(8,"left","10",false,2,false,tstr);
            ExportTD(8,"right","",false,2,false,v);
            ExportTD(8,"right","",false,2,false,balp);
            ExportTREnd(6); 
          end;
        end;
      end;
      if ((CLInrw.Type==4) and (CLInrw.TransNr!=-1)) then begin
        v = blankval;
        if (CLInrw.Sum!=0) then begin
          if (IPrsr.IVNr==-1) then begin
            if (CLInr.TransDate==IPrsr.TransDate) then begin
              if (CLInrw.Company==CUp.Code) then begin
                v = CLInrw.Sum;
                cuscurval = MulRateToBase1(CLInr.CurncyCode,v,CLInr.FrRate,CLInr.ToRateB1,CLInr.ToRateB2,CLInr.BaseRate1,CLInr.BaseRate2,GetTotalRoundMode(Rb));
                if (RepSpec.flags[2]==0) then begin
                  v = cuscurval;
                end else begin
                  if (CLInr.CurncyCode==CUp.CurncyCode) then begin
                    cuscurval = v;
                  end;
                end;
                balp = balp - cuscurval;
                SumCredit = SumCredit + cuscurval;
              end;
            end;
          end;
          if (v!=0) then begin
            tstr = USetStr(2497);         
            ExportTRBegin(6);
            ExportTD(8,"left","",false,2,false,IPrsr.TransDate);
            ExportTD(8,"left","",false,2,false,tstr);
            tstr = CLInr.SerNr;
            tstr = tstr & " (";
            tstr = tstr & IPrsr.IVNr;
            tstr = tstr & " )";
            ExportTD(8,"left","10",false,2,false,tstr);
            ExportTD(8,"right","",false,2,false,v);
            ExportTD(8,"right","",false,2,false,balp);
            ExportTREnd(6); 
          end;
        end;
      end;
L11:;
    end;
  end;
LCustListTransCLIn:;
  return;
end;

procedure CustListTransCLOutHTML(record RcVc RepSpec,record IPrsVc IPrsr,record CUVc CUp,var val balp,var val SumDebet)
BEGIN
  record CLOutVc CLOutr;
  row CLOutVc CLOutrw;
  Integer tcnt,trwcnt;
  val tmp,cuscurval;
  val v,v2;
  string 255 tstr;
  record RoundBlock Rb;
  
  BlockLoad(Rb);
  v = blankval;
  v2 = blankval;
  CLOutr.SerNr = IPrsr.TransNr;
  if (ReadFirstMain(CLOutr,1,true)) then begin
    if (CLOutr.Invalid!=0) then begin goto L44; end;
    trwcnt = MatRowCnt(CLOutr);
    for (tcnt=0;tcnt<trwcnt;tcnt=tcnt+1) begin
      MatRowGet(CLOutr,tcnt,CLOutrw);
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,CLOutr.Objects)==false) then begin goto L12; end;
      end;        
      if ((CLOutrw.Type==1) and (CLOutrw.TransNr!=-1)) then begin
        v = blankval;
        if (CLOutrw.Sum!=0) then begin              
          if (CLOutrw.TransNr==IPrsr.IVNr) then begin
            if (CLOutr.TransDate==IPrsr.TransDate) then begin
              if (CLOutr.CUCode==CUp.Code) then begin
                v = CLOutrw.Sum;
                cuscurval = MulRateToBase1(CLOutr.CurncyCode,v,CLOutr.FrRate,CLOutr.ToRateB1,CLOutr.ToRateB2,CLOutr.BaseRate1,CLOutr.BaseRate2,GetTotalRoundMode(Rb));
                if (RepSpec.flags[2]==0) then begin
                  v = cuscurval;
                end else begin
                  if (CLOutr.CurncyCode==CUp.CurncyCode) then begin
                    cuscurval = v;
                  end;
                end;
                balp = balp + cuscurval;
                SumDebet = SumDebet + cuscurval;
              end;
            end;
          end;
          if (v!=0) then begin
            tstr = USetStr(1194);         
            ExportTRBegin(6);
            ExportTD(8,"left","",false,2,false,IPrsr.TransDate);
            ExportTD(8,"left","",false,2,false,tstr);
            tstr = CLOutr.SerNr;
            tstr = tstr & " (";
            tstr = tstr & IPrsr.IVNr;
            tstr = tstr & " )";
            ExportTD(8,"left","10",false,2,false,tstr);
            ExportTD(8,"right","",false,2,false,v);
            ExportTD(8,"right","",false,2,false,balp);
            ExportTREnd(6); 
          end;
        end;
      end;      
L12:;               
    end;   
  end;
L44:;
  RETURN;
END;

updating procedure CustListTransHTML(record RcVc RepSpec,record CUVc CUp,var val balp,var val TotSumDebet,var val TotSumCredit,var record SMVc CurTotalsr, record MailVc Mailr)
begin
  record IVVc IVr;
  record IPVc IPr;
  record IPrsVc IPrsr;
  record IPrsVc OldIPrsr;
  record BaseCurBlock bascur;
  record IVVc IV2r;
  record PurgeTRVc PurgeTRr;
  record TRVc TRr;
  row TRVc TRrw;
  row IVVc IVrw;
  Boolean cash;
  row IPVc IPrw;
  Boolean custout,found;
  val v,SumDebet,SumCredit;
  Integer i,rwcnt;
  val startbal;
  val t,woff,cdisc,fee;
  val cuscurval,prepv;
  string 255 tstr;
  LongInt prepayno;
  string 255 ckey,t2,cuperlastprepcur;
  val lossv,totgain,totloss;
  string 60 curncy;
  Integer tcnt,trwcnt,typeofcur,oldstyle;
  val tmp,v2,basecurval;
  val frrate,torate1,torate2,baserate1,baserate2;
  Boolean negrec;
  record CYBlock CompRec;
  string 255 fname;
  Integer a;
  //record CUVc CUr;
  record RoundBlock Rb;
  
  BlockLoad(Rb);
  BlockLoad(bascur);
  BlockLoad(CompRec);
  startbal = balp;
  custout = false;
  if (balp!=0) then begin custout = true; end;
  if (RepSpec.flags[1]==0) then begin custout = true; end;
  if (custout) then begin
    fname = USetStr(2480) & ".html";
//    fname = "CUPerEmailMn" & ".html";
    
    CreateFile(fname);
//    CloseFile;
//    if (OpenExportFile(fname,true)) then begin
//    end;
    ExportHTMLBegin;
    ExportHEADBegin;
    ExportMETA("UTF-8");  
    
    ExportTITLE(USetStr(2480) & " " & DateToStr(CurrentDate));
    ExportHEADEnd;
    ExportBODYBegin(50,50);
    ExportTABLEBegin(4,0,"","","2","2","100%");
    ExportTRBegin(6);
    ExportTD(8,"left","",true,4,true,CompRec.CompName);
    ExportTD(8,"left","",true,1,true,CompRec.CompName);
    ExportTD(8,"","",false,-1,false,"");
    ExportTD(8,"right","",true,4,true,USetStr(2480));
    ExportTREnd(6);
    ExportTABLEEnd(4);
    
    ExportTABLEBegin(4,0,"","","1","1","800");
    ExportTRBegin(6);
    ExportSizedTD(8,"150","","",false,1,false,USetStr(11443) & " " & CompRec.Phone);
    ExportSizedTD(8,"150","","",false,1,false,CompRec.Addr0);
    ExportSizedTD(8,"150","","",false,1,false,"Date: " & DateToStr(CurrentDate));
    ExportTREnd(6);
    ExportTRBegin(6);
    ExportSizedTD(8,"150","","",false,1,false,USetStr(11444) & " " & CompRec.Fax);
    ExportSizedTD(8,"150","","",false,1,false,CompRec.Addr1);
    ExportSizedTD(8,"150","","",false,1,false,"Customer No: " & CUp.Code);
    ExportTREnd(6);
    ExportTRBegin(6);
    ExportSizedTD(8,"150","","",false,1,false,USetStr(11445) & " " & CompRec.OrgNr);
    ExportSizedTD(8,"150","","",false,1,false,CompRec.Addr2);
    ExportSizedTD(8,"150","","",false,1,false,"Period: " & DateToStr(RepSpec.sStartDate) & " : " & DateToStr(RepSpec.sEndDate));
    ExportTREnd(6);
    ExportTRBegin(6);
    ExportSizedTD(8,"150","","",false,1,false,"");
    ExportSizedTD(8,"150","","",false,1,false,CompRec.Addr4);
    ExportSizedTD(8,"150","","",false,1,false,"");
    ExportTREnd(6);
    ExportTABLEEnd(4);
      
    ExportTABLEBegin(4,0,"","","1","1","750");
    ExportTRBegin(6);
    ExportSizedTD(8,"250","","",false,1,false,"Customer ");
    ExportSizedTD(8,"100","","",false,2,true,"Note");
    ExportTREnd(6);
    ExportTRBegin(6);
    ExportSizedTD(8,"250","","",false,2,false,CUp.Name);
    ExportSizedTD(8,"100","","",false,1,false,USetStr(11446));
    ExportTREnd(6);
    ExportTRBegin(6);
    ExportSizedTD(8,"250","","",false,2,false,"");
    ExportSizedTD(8,"100","","",false,1,false,USetStr(11447));
    ExportTREnd(6);
    
    if (nonblank(CUp.InvAddr0)) then begin
      ExportTRBegin(6);
      ExportSizedTD(8,"250","","",false,2,false,CUp.InvAddr0);
      ExportSizedTD(8,"100","","",false,1,false,USetStr(11448) & " " & DateToStr(RepSpec.sEndDate));
      ExportTREnd(6);
    end;
    
    ExportTRBegin(6);
    ExportSizedTD(8,"250","","",false,2,false,CUp.InvAddr1);
    ExportSizedTD(8,"100","","",false,1,false,"");
    ExportTREnd(6);
    
    if (nonblank(CUp.InvAddr2)) then begin
      ExportTRBegin(6);
      ExportSizedTD(8,"250","","",false,2,false,CUp.InvAddr2);
      ExportSizedTD(8,"100","","",false,1,false,"");
      ExportTREnd(6);
    end;
    
    if (nonblank(CUp.InvAddr3)) then begin
      ExportTRBegin(6);
      ExportSizedTD(8,"250","","",false,2,false,CUp.InvAddr3);
      ExportSizedTD(8,"100","","",false,1,false,"");
      ExportTREnd(6);
    end;
    
    if (nonblank(CUp.InvAddr4)) then begin
      ExportTRBegin(6);
      ExportSizedTD(8,"250","","",false,2,false,CUp.InvAddr4);
      ExportTREnd(6);
    end;
    
    ExportTABLEEnd(4);
    
    ExportTABLEBegin(4,0,"","","1","1","100%");
    ExportTRBegin(6);
    ExportTD(8,"right","",true,1,true,USetStr(11449));
    ExportTD(8,"right","",true,2,true, balp);
    ExportTREnd(6);
    ExportTABLEEnd(4);
    
    ExportTABLEBegin(4,0,"","","1","1","100%");
    ExportTRBegin(6);
    ExportTD(8,"left","",false,2,false,"<hr>");
    ExportTREnd(6);
    ExportTABLEEnd(4);
    
    ExportTABLEBegin(4,0,"","","2","2","100%");
    ExportTRBegin(6);
    ExportTD(8,"left","",false,1,false,USetStr(11450));
    ExportTD(8,"left","",false,1,false,USetStr(11451));
    tstr = CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr);
    ExportTD(8,"left","",false,1,false,USetStr(11452));
    ExportTD(8,"right","",false,1,false,USetStr(11453));
    ExportTD(8,"right","",false,1,false,USetStr(11454));
    ExportTD(8,"right","",false,1,false,USetStr(11455));
    ExportTREnd(6); 
  end;
  
  RecordNew(OldIPrsr);
  IPrsr.CustCode = CUp.Code;
  if (RepSpec.flags[5]==1) then begin
    IPrsr.CustDate = RepSpec.sStartDate;
    ckey = "MainKey";
  end else begin
    IPrsr.TransDate = RepSpec.sStartDate;
    ckey = "CustTransKey";
  end;
  found = true;
  while (LoopKey(ckey,IPrsr,2,found)) begin
    if (IPrsr.CustCode!=CUp.Code) then begin
      found = false;
    end;  
    if (found) then begin
      if (RepSpec.flags[5]==1) then begin
        if (IPrsr.CustDate>RepSpec.sEndDate) then begin found = false; end;
      end else begin
        if (IPrsr.TransDate>RepSpec.sEndDate) then begin found = false; end;
      end;
    end;      
    if (found) then begin
      if (custout==false) then begin
        CustHeadHTML(CUp,balp,RepSpec.flags[2]);
        custout = true;
      end;
      lossv = 0;                                       
      if (IPrsr.TransType==kIPrsTransTypeInvoice) then begin
        IVr.SerNr = IPrsr.TransNr;
        if (ReadFirstMain(IVr,1,true)) then begin end;
        if (nonblank(RepSpec.ObjStr)) then begin
          if (SetInSet(RepSpec.ObjStr,IVr.Objects)==false) then begin goto L44; end;
        end;  
        if (IVr.Invalid!=0) then begin goto L44; end;
        if (IVr.InvType==kInvoiceTypePrepayment) then begin goto L44; end;
        if ((IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeNormalSpecialSales) or (IVr.InvType==kInvoiceTypeInterest) or (IVr.InvType==kInvoiceTypeDownpayment)) then begin
          v = IVr.Sum4;
          cuscurval = MulRateToBase1(IVr.CurncyCode,v,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,SetRoundModeD(2));
          if (RepSpec.flags[2]==0) then begin
            v = cuscurval;
          end else begin
            if (IVr.CurncyCode==CUp.CurncyCode) then begin
              cuscurval = v;
            end;  
          end;
          GetIPPrepaymentAmount(IVr,bascur.BaseCur1,cuscurval,lossv,IVr.Sum4,RepSpec.flags[2],CUp.CurncyCode,cuperlastprepcur);
//crashes maintanance cause of transaction string 10 cuperlastprepcur
          if (RepSpec.flags[2]==0) then begin
            cuscurval = cuscurval + lossv;
          end else begin
            if (IVr.CurncyCode<>CUp.CurncyCode) then begin
              cuscurval = cuscurval + lossv;
            end;  
          end;
          balp = balp + cuscurval;
          SumDebet = SumDebet + cuscurval;
          if ((RepSpec.flags[2]==0) or (lossv!=0)) then begin
            if (lossv<0) then begin
              totloss = totloss + lossv;
              SumCredit = SumCredit - lossv;
            end else begin
              totgain = totgain + lossv;
              SumDebet = SumDebet + lossv;
            end;
            balp = balp + lossv;              
          end;
            
          ExportTRBegin(6);
          ExportTD(8,"left","",false,2,false,DateToStr(IVr.InvDate));
          ExportTD(8,"left","",false,2,false,USetStr(2485));
          tstr = CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr);
          ExportTD(8,"left","",false,2,false,tstr);
          ExportTD(8,"right","",false,2,false,v);
          ExportTD(8,"right","",false,2,false,lossv);
          ExportTD(8,"right","",false,2,false,balp);
          ExportTREnd(6);             

// I don't think we should be printing them here plus the loss is beeing calculated when the Receipt takes place
//   which might look a bit wierd if the period starts after the Receipt
          //end;
        end;
        if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
          v = IVr.Sum4;
          cuscurval = MulRateToBase1(IVr.CurncyCode,v,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,SetRoundModeD(2));
          if (RepSpec.flags[2]==0) then begin
            v = cuscurval;
          end else begin
            if (IVr.CurncyCode==CUp.CurncyCode) then begin
              cuscurval = v;
            end;  
          end;
          SumDebet = SumDebet + cuscurval;
          SumCredit = SumCredit + cuscurval;

          ExportTRBegin(6);
          ExportTD(8,"left","",false,2,false,DateToStr(IVr.InvDate));
          ExportTD(8,"right","",false,2,false,USetStr(2488));
          tstr = CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr);
          ExportTD(8,"left","",false,2,false,tstr);
          ExportTD(8,"right","",false,2,false,v);
          IVVc_GetPrePaidAmount(IVr,prepv);
          v = v - prepv;
          SumCredit = SumCredit - prepv;
          balp = balp + prepv;
          ExportTD(8,"right","",false,2,false,v);
          ExportTD(8,"right","",false,2,false,balp);
          ExportTREnd(6); 

        end;
        if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
          if (negrec==false)then begin
            IV2r.SerNr = IVr.CredInv;
            cash = false;
            if (ReadFirstMain(IV2r,1,true)) then begin
              if (IV2r.InvType==kInvoiceTypeCash or IV2r.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin cash = true; end;
            end;
            frrate = IVr.FrRate;
            torate1 = IVr.ToRateB1;
            torate2 = IVr.ToRateB2;
            baserate1 = IVr.BaseRate1;
            baserate2 = IVr.BaseRate2;
            if (IVr.CredInv<>-1) then begin
              IV2r.SerNr = IVr.CredInv;
              if (ReadFirstMain(IV2r,1,true)) then begin
                frrate = IV2r.FrRate;
                torate1 = IV2r.ToRateB1;
                torate2 = IV2r.ToRateB2;
                baserate1 = IV2r.BaseRate1;
                baserate2 = IV2r.BaseRate2;
              end;
            end;        
            v = IVr.Sum4;
            cuscurval = MulRateToBase1(IVr.CurncyCode,v,frrate,torate1,torate2,baserate1,baserate2,SetRoundModeD(2));
            if (RepSpec.flags[2]==0) then begin
              v = cuscurval;
            end else begin
              if (IVr.CurncyCode==CUp.CurncyCode) then begin
                cuscurval = v;
              end;  
            end;
            if (cash==false) then begin
              balp = balp - cuscurval;
              SumCredit = SumCredit + cuscurval;
            end else begin
              SumCredit = SumCredit + cuscurval;
              SumDebet = SumDebet + cuscurval;
            end;
            
            ExportTRBegin(6);
            ExportTD(8,"left","",false,2,false,DateToStr(IVr.InvDate));
            ExportTD(8,"left","",false,2,false,USetStr(2487));
            tstr = CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr);
            if (IV2r.SerNr!=-1) then begin
              tstr = tstr & " (";
              tstr = tstr & IV2r.SerNr;
              tstr = tstr & " )";
            end;
            ExportTD(8,"left","",false,2,false,tstr);
            ExportTD(8,"right","",false,2,false,"");
            ExportTD(8,"right","",false,2,false,v);
            ExportTD(8,"right","",false,2,false,balp);
            ExportTREnd(6); 
          end;
          negrec = false;
        end;
      end;
    end;  
    
    if (IPrsr.TransType==kIPrsTransTypeReceipt) then begin
      if (nonblank(RepSpec.ObjStr)) then begin goto L44; end;
      IPr.SerNr = IPrsr.TransNr;
      if (ReadFirstMain(IPr,1,true)) then begin
        curncy = "";
        if (IPr.RejectedFlag!=0) then begin goto L44; end;
        if (IPr.OKFlag==0) then begin
          goto L55;
        end;  
        v = blankval;
        woff = blankval;
        fee = blankval;
        cdisc = blankval;
        rwcnt = MatRowCnt(IPr);
        prepayno = -1;
        for (i=0; i<rwcnt;i=i+1) begin
          MatRowGet(IPr,i,IPrw);
          if (blankdate(IPrw.PayDate) or (IPrw.PayDate==IPrsr.CustDate)) then begin
            lossv = 0;
            if (RepSpec.flags[3]==0) then begin
              if (IPrw.InvoiceNr==IPrsr.IVNr) then begin
                if (IPr.TransDate==IPrsr.TransDate) then begin
                  if (IPrw.CustCode==CUp.Code) then begin
                    curncy = IPrw.InvCurncy;
                    t = IPrw.InvVal;
                    cuscurval = IPrw.InvVal;
                    IVr.SerNr = IPrw.InvoiceNr;
                    if (ReadFirstMain(IVr,1,true)) then begin
                      basecurval = MulWithRateToBase1(IPrw.InvCurncy,IPr.TransDate,IPrw.InvVal,SetRoundModeD(2));
                    end else begin
                      basecurval = MulWithRateToBase1(IPrw.InvCurncy,IPr.TransDate,IPrw.InvVal,SetRoundModeD(2));
                    end;
                    if ((bascur.BaseCur1==IPrw.BankCurncy) and (IPrw.BankCurncy<>IPrw.InvCurncy)) then begin
                      basecurval = IPrw.BankVal;
                    end;

              if (RepSpec.flags[2]==0) then begin
                cuscurval = basecurval;
                t = cuscurval;
                if (IPrw.InvoiceNr!=-1) then begin                                             
                  if (IPrw.stp!=7) then begin                 
                    FindAllPrepayLosses(IPrw.InvCurncy,IPr.TransDate,IPrw.InvVal,IPrw.CUPNr,cuscurval,lossv,IVr,IPrw.InvoiceNr,-1,false,bascur,IPrw.B1BankVal,IPrw.BankCurncy);
                    lossv = cuscurval - lossv;
                    if (lossv>0) then begin
                      totloss = totloss + lossv;
                    end else begin
                      totgain = totgain - lossv;
                    end;
                    cuscurval = t;
                  end;
                end else begin
                  if (IPrw.InvCurncy==CUp.CurncyCode) or (IPrw.InvCurncy==bascur.BaseCur1) then begin
                    cuscurval = t;
                  end else begin
                    FindAllPrepayLosses(IPrw.InvCurncy,IPr.TransDate,IPrw.InvVal,IPrw.CUPNr,cuscurval,lossv,IVr,IPrw.InvoiceNr,IPr.SerNr,true,bascur,IPrw.B1BankVal,IPrw.BankCurncy);
                    lossv = cuscurval - lossv;
                    if (IPrw.CUPNr!=-1) then begin                   
                      lossv = cuscurval - lossv;
                      if (lossv<0) then begin//(lossv>0)
                        totloss = totloss + lossv;
                      end else begin
                        totgain = totgain - lossv;
                      end;                
                    end else begin
                      lossv = 0;
                    end;
                  end;
                end;
              end else begin
                if (IPrw.InvCurncy==CUp.CurncyCode) or (IPrw.InvCurncy==bascur.BaseCur1) then begin
                  cuscurval = t;
                end else begin
                  t = cuscurval;
//if is was here, payments in base curncy didnt work,  FindAllPrepayLosses
                  if (IPrw.InvoiceNr!=-1) then begin  
                    if (IPrw.stp!=7) then begin                 
                      FindAllPrepayLosses(IPrw.InvCurncy,IPr.TransDate,IPrw.InvVal,IPrw.CUPNr,cuscurval,lossv,IVr,IPrw.InvoiceNr,-1,false,bascur,IPrw.B1BankVal,IPrw.BankCurncy);
                      v2 = cuscurval;
                      lossv = basecurval - lossv;
                      if (lossv>0) then begin
                        totloss = totloss + lossv;
                      end else begin
                        totgain = totgain - lossv;
                      end;
                      cuscurval = v2;
                    end;
                  end else begin
                    FindAllPrepayLosses(IPrw.InvCurncy,IPr.TransDate,IPrw.InvVal,IPrw.CUPNr,cuscurval,lossv,IVr,IPrw.InvoiceNr,IPr.SerNr,true,bascur,IPrw.B1BankVal,IPrw.BankCurncy);
                    lossv = basecurval - lossv;
                    if (IPrw.CUPNr!=-1) then begin                   
                      lossv = basecurval - lossv;
                      if (lossv<0) then begin//(lossv>0)
                        totloss = totloss + lossv;
                      end else begin
                        totgain = totgain - lossv;
                      end;                
                    end else begin
                      lossv = 0;
                    end;
                    
                  end;
                end;

              end;                    
                    
                    if (IPrw.stp!=7) then begin
                      balp = balp - cuscurval;
                      balp = balp + lossv;
                      SumCredit = SumCredit + cuscurval;
                      SumCredit = SumCredit - lossv;
                    end;
                    prepayno = IPrw.CUPNr;
                    if (IPrw.stp==1) then begin
                      v = v + t;
                    end;
                    if (IPrw.stp==5) then begin
                      cdisc = cdisc + t;
                    end;
                    if (IPrw.stp==6) then begin
                      woff = woff + t;
                    end;
                    if (IPrw.stp==7) then begin
                      fee = fee + t;
                    end;
                  end;
                end;
              end;
            end;
            if (RepSpec.flags[3]==1) then begin /* Is this Used at all ??? I haven't updated this */
              if (IPrw.InvoiceNr==IPrsr.IVNr) then begin
                if (IPr.TransDate==IPrsr.TransDate) then begin
                  if (IPrw.CustCode==CUp.Code) then begin
                    curncy = IPrw.InvCurncy;
                    t = IPrw.InvVal;
                    cuscurval = IPrw.InvVal;
                    IVr.SerNr = IPrw.InvoiceNr;
                    if (ReadFirstMain(IVr,1,true)) then begin
                      cuscurval = MulRateToBase1(IVr.CurncyCode,IPrw.InvVal,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,SetRoundModeD(2));
                    end;
                    if (RepSpec.flags[2]==0) then begin
                      if ((bascur.BaseCur1==IPrw.BankCurncy) and (IPrw.BankCurncy<>IPrw.InvCurncy)) then begin
                        cuscurval = IPrw.BankVal;
                      end;
                      t = cuscurval;
                    end else begin
                      if (IPrw.InvCurncy==CUp.CurncyCode) then begin
                        cuscurval = t;
                      end;  
                    end;
                    if (IPrw.stp!=7) then begin
                      balp = balp - cuscurval;
                      SumCredit = SumCredit + cuscurval;
                    end;
                    prepayno = IPrw.CUPNr;
                    if (IPrw.stp==1) then begin
                      v = v + t;
                    end;  
                    if (IPrw.stp==5) then begin
                      cdisc = cdisc + t;
                    end;  
                    if (IPrw.stp==6) then begin
                      woff = woff + t;
                    end;  
                    if (IPrw.stp==7) then begin
                      fee = fee + t;
                    end;  
                  end;
                end;
              end;
            end;
          end;       
        end;
        if (v!=0) then begin
          tstr = USetStr(2486);
          if (IPrsr.IVNr==-1) then begin
            t2 = USetStr(2497);
            if (nonblank(t2)) then begin
              tstr = t2;
            end;
          end;
          
          ExportTRBegin(6);
          ExportTD(8,"left","",false,2,false,IPrsr.TransDate,);
          ExportTD(8,"left","",false,2,false,tstr);
          tstr = IPr.SerNr;
          if (prepayno!=-1) or (IPrsr.IVNr!=-1) then begin
            tstr = tstr & " (";
            if (IPrsr.IVNr==-1) then begin
              t2 = prepayno;
            end else begin
              t2 = IPrsr.IVNr;
            end;  
            if (prepayno==-1) and (IPrsr.IVNr==-1) then begin t2 = ""; end;
            tstr = tstr & t2;
            tstr = tstr & " )";
          end;
          ExportTD(8,"left","",false,2,false,tstr);
          ExportTD(8,"right","",false,2,false,"");
          if (lossv==0) then begin lossv = blankval; end;
          if(v<0)then begin
            negrec = true;
          end;
          ExportTD(8,"right","",false,2,false,v);
          ExportTD(8,"right","",false,2,false,balp);
          ExportTREnd(6); 
        end;
        if (woff!=0) then begin
          ExportTRBegin(6);
          ExportTD(8,"left","",false,2,false,USetStr(2451));
          ExportTD(8,"left","",false,2,false," ");
          ExportTD(8,"left","",false,2,false,"");
          ExportTD(8,"left","",false,2,false,"");
          ExportTD(8,"right","",false,2,false,woff);
          ExportTD(8,"right","",false,2,false,balp);
          ExportTREnd(6); 
        end;
        if (cdisc!=0) then begin
          ExportTRBegin(6);
          ExportTD(8,"left","",false,2,false,USetStr(2449));
          ExportTD(8,"left","",false,2,false," ");
          ExportTD(8,"left","",false,2,false,"");
          ExportTD(8,"left","",false,2,false,"");
          ExportTD(8,"right","",false,2,false,cdisc);
          ExportTD(8,"right","",false,2,false,balp);
          ExportTREnd(6); 
        end;
      end;
    end;
      if (IPrsr.TransType==kIPrsTransTypeNLTransaction) then begin
        v = blankval;
        v2 = blankval;
        TRr.Number = IPrsr.TransNr;
        TRr.IntYc = GetIntYc(IPrsr.TransDate);
        if (ReadFirstMain(TRr,2,true)) then begin
          trwcnt = MatRowCnt(TRr);
          for (tcnt=0;tcnt<trwcnt;tcnt=tcnt+1) begin
            MatRowGet(TRr,tcnt,TRrw);
            if (nonblank(RepSpec.ObjStr)) then begin
              if (SetInSet(RepSpec.ObjStr,TRrw.Objects)==false) then begin goto L11; end;
            end;
            if (TRrw.CompCode!=CUp.Code) then begin
              goto L11;
            end;  
            if ((TRrw.Typ==1) and (TRrw.SerNr==-1) and (IPrsr.IVNr==-1)) then begin
              if (TRrw.DebVal!=0) then begin
                v = TRrw.DebVal;
                cuscurval = TRrw.DebVal;
                if (TRrw.CurDebVal!=0) then begin
                  v = TRrw.CurDebVal;
                  cuscurval = MulRateToBase1(TRrw.Curncy,v,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,SetRoundModeD(2));
                  if (RepSpec.flags[2]==0) then begin
                    v = cuscurval;
                  end else begin
                    if (TRrw.Curncy==CUp.CurncyCode) then begin
                      cuscurval = v;
                    end;  
                  end;
                end else begin
                  typeofcur = TypeOfCurncy(TRrw.Curncy,oldstyle);   
                end;
                balp = balp + cuscurval;
                SumDebet = SumDebet + cuscurval;
                ExportTRBegin(6);
                ExportTD(8,"left","",false,2,false,DateToStr(TRr.TransDate));
                ExportTD(8,"left","",false,2,false,USetStr(2530));
                ExportTD(8,"left","",false,2,false,TRr.Number);
                ExportTD(8,"right","",false,2,false,v);
                ExportTD(8,"right","",false,2,false,balp);
                ExportTREnd(6); 
              end;                    
              if (TRrw.CredVal!=0) then begin
                v = TRrw.CredVal;
                cuscurval = TRrw.CredVal;
                if (TRrw.CurCredVal!=0) then begin
                  v = TRrw.CurCredVal;
                  cuscurval = MulRateToBase1(TRrw.Curncy,v,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,SetRoundModeD(2));
                  if (RepSpec.flags[2]==0) then begin
                    v = cuscurval;
                  end else begin
                    if (TRrw.Curncy==CUp.CurncyCode) then begin
                      cuscurval = v;
                    end;  
                  end;
                end else begin
                  typeofcur = TypeOfCurncy(TRrw.Curncy,oldstyle);   
                end;
                balp = balp - cuscurval;
                SumCredit = SumCredit + cuscurval;
                ExportTRBegin(6);
                ExportTD(8,"left","",false,2,false,DateToStr(TRr.TransDate));
                ExportTD(8,"left","",false,2,false,USetStr(2530));
                TRExtYc(TRr,tstr);
                ExportTD(8,"left","",false,2,false,tstr);
                ExportTD(8,"left","",false,2,false," ");
                ExportTD(8,"right","",false,2,false,v);
                ExportTD(8,"right","",false,2,false,balp);
                ExportTREnd(6); 
              end; 
            end;
            if ((TRrw.Typ==1) and (TRrw.SerNr!=-1)) then begin
              v = blankval;
              if (TRrw.DebVal!=0)then begin
                v = blankval;
                if (RepSpec.flags[3]==0) then begin
                  if (TRrw.SerNr==IPrsr.IVNr) then begin
                    if (TRr.TransDate==IPrsr.TransDate) then begin
                      if (TRrw.CompCode==CUp.Code) then begin
                        tmp = TRrw.DebVal;
                        cuscurval = TRrw.DebVal;
                        if (TRrw.CurDebVal!=0) then begin
                          tmp = TRrw.CurDebVal;
                          cuscurval = MulRateToBase1(TRrw.Curncy,tmp,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,SetRoundModeD(2));
                          tmp = cuscurval;
                        end else begin
                          typeofcur = TypeOfCurncy(TRrw.Curncy,oldstyle);   
                          if (RepSpec.flags[2]==1) then begin
                            if (typeofcur==2) then begin
                              tmp = TRrw.DebVal2;
                              if (TRrw.Curncy==CUp.CurncyCode) then begin
                                cuscurval = TRrw.DebVal2;
                              end;  
                            end;
                          end else begin
                            if (typeofcur==2) then begin
                              IVr.SerNr = TRrw.SerNr;
                              if (ReadFirstMain(IVr,1,true)) then begin
                                tmp = MulRateToBase1(TRrw.Curncy,TRrw.DebVal2,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,SetRoundModeD(2));
                                cuscurval = tmp;
                              end;
                            end;
                          end;
                        end;
                        balp = balp + cuscurval;
                        SumDebet = SumDebet + cuscurval;
                        v = v + tmp;
                      end;
                    end;
                  end;
                end;
                if (RepSpec.flags[3]==1) then begin
                  if (TRrw.SerNr==IPrsr.IVNr) then begin
                    if (TRr.TransDate!=IPrsr.TransDate) then begin
                      if (TRrw.CompCode==CUp.Code) then begin
                        tmp = TRrw.DebVal;
                        cuscurval = TRrw.DebVal;
                        if (TRrw.CurDebVal!=0) then begin
                          tmp = TRrw.CurDebVal;
                          cuscurval = MulRateToBase1(TRrw.Curncy,tmp,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,SetRoundModeD(2));
                          if (RepSpec.flags[2]==0) then begin
                            tmp = cuscurval;
                          end else begin
                            if (TRrw.Curncy==CUp.CurncyCode) then begin
                              cuscurval = tmp;
                            end;  
                          end;
                        end else begin
                          typeofcur = TypeOfCurncy(TRrw.Curncy,oldstyle);   
                          if (RepSpec.flags[2]==1) then begin
                            if (typeofcur==2) then begin
                              tmp = TRrw.DebVal2;
                              if (TRrw.Curncy==CUp.CurncyCode) then begin
                                cuscurval = TRrw.DebVal2;
                              end;  
                            end;
                          end else begin
                            if (typeofcur==2) then begin
                              IVr.SerNr = TRrw.SerNr;
                              if (ReadFirstMain(IVr,1,true)) then begin
                                tmp = MulRateToBase1(TRrw.Curncy,TRrw.DebVal2,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,SetRoundModeD(2));
                                cuscurval = tmp;
                              end;
                            end;
                          end;
                        end;
                        balp = balp + cuscurval;
                        SumDebet = SumDebet + cuscurval;
                        v = v + tmp;
                      end;
                    end;
                  end;
                end;
              end;              
              if (v!=0) then begin
                tstr = USetStr(2530);               
                TRExtYc(TRr,t2);
                if (IPrsr.IVNr!=-1) then begin
                  t2 = t2 & " (";
                  t2 = t2 & IPrsr.IVNr;
                  t2 = t2 & " )";
                end;
                ExportTRBegin(6);
                ExportTD(8,"left","",false,2,false,IPrsr.TransDate);
                ExportTD(8,"left","",false,2,false,tstr);
                TRExtYc(TRr,tstr);
                ExportTD(8,"left","",false,2,false,tstr);
                ExportTD(8,"right","",false,2,false,v);
                ExportTD(8,"right","",false,2,false,balp);
                ExportTREnd(6); 
              end;               
              v = blankval;
              if (TRrw.CredVal!=0)then begin              
                if (RepSpec.flags[3]==0) then begin
                  if (TRrw.SerNr==IPrsr.IVNr) then begin
                    if (TRr.TransDate==IPrsr.TransDate) then begin
                      if (TRrw.CompCode==CUp.Code) then begin
                        tmp = TRrw.CredVal;
                        cuscurval = TRrw.CredVal;
                        if (TRrw.CurCredVal!=0) then begin
                          tmp = TRrw.CurCredVal;
                          cuscurval = MulRateToBase1(TRrw.Curncy,tmp,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,SetRoundModeD(2));
                          if (RepSpec.flags[2]==0) then begin
                            tmp = cuscurval;
                          end else begin
                            if (TRrw.Curncy==CUp.CurncyCode) then begin 
                              cuscurval = tmp;
                            end;  
                          end;
                        end else begin
                          typeofcur = TypeOfCurncy(TRrw.Curncy,oldstyle);   
                          if (RepSpec.flags[2]==1) then begin
                            if (typeofcur==2) then begin
                              tmp = TRrw.CredVal2;
                              if (TRrw.Curncy==CUp.CurncyCode) then begin
                                cuscurval = TRrw.CredVal2;
                              end;
                            end;
                          end;
                        end;
                        balp = balp - cuscurval;
                        SumCredit = SumCredit + cuscurval;
                        v = v + tmp;
                      end;
                    end;
                  end;
                end;
                if (RepSpec.flags[3]==1) then begin
                  if (TRrw.SerNr==IPrsr.IVNr) then begin
                    if (TRr.TransDate==IPrsr.TransDate) then begin
                      if (TRrw.CompCode==CUp.Code) then begin
                        tmp = TRrw.CredVal;
                        cuscurval = TRrw.CredVal;
                        if (TRrw.CurCredVal!=0) then begin
                          tmp = TRrw.CurCredVal;
                            cuscurval = MulRateToBase1(TRrw.Curncy,tmp,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,SetRoundModeD(2));
                          if (RepSpec.flags[2]==0) then begin
                            tmp = cuscurval;
                          end else begin
                            if (TRrw.Curncy==CUp.CurncyCode) then begin
                              cuscurval = tmp;
                            end;  
                          end;
                        end else begin
                          typeofcur = TypeOfCurncy(TRrw.Curncy,oldstyle);   
                          if (RepSpec.flags[2]==1) then begin
                            if (typeofcur==2) then begin
                              tmp = TRrw.CredVal2;
                              if (TRrw.Curncy==CUp.CurncyCode) then begin
                                cuscurval = TRrw.CredVal2;
                              end;  
                            end;

                          end;
                        end;
                        balp = balp - cuscurval;
                        SumCredit = SumCredit + cuscurval;
                        v = v + tmp;
                      end;
                    end;
                  end;
                end;
               if (v!=0) then begin
                  tstr = USetStr(2530);               
                  TRExtYc(TRr,t2);
                  ExportTRBegin(6);
                  ExportTD(8,"left","",false,2,false,IPrsr.TransDate);
                  ExportTD(8,"left","",false,2,false,tstr);
                  TRExtYc(TRr,tstr);
                  tstr = tstr & " (";
                  tstr = tstr & IPrsr.IVNr;
                  tstr = tstr & " )";
                  ExportTD(8,"left","",false,2,false,tstr);
                  ExportTD(8,"left","",false,2,false,"");
                  ExportTD(8,"right","",false,2,false,v);
                  ExportTD(8,"right","",false,2,false,balp);
                  ExportTREnd(6); 
                end;
              end;
            end;
L11:;               
          end;   
        end;
L44:;
      end;

      if (IPrsr.TransType==kIPrsTransTypePurgeNLTransaction) then begin
        v = blankval;
        v2 = blankval;
        PurgeTRr.Number = IPrsr.TransNr;
        PurgeTRr.IntYc = GetIntYc(IPrsr.TransDate);
        PurgeTRr.TransRow = IPrsr.TransRow;
        if (ReadFirstMain(PurgeTRr,3,true)) then begin
          if (nonblank(RepSpec.ObjStr)) then begin
            if (SetInSet(RepSpec.ObjStr,PurgeTRr.Objects)==false) then begin goto L111; end;
          end;
          if (PurgeTRr.CompCode!=CUp.Code) then begin
            goto L111;
          end;  
          if ((PurgeTRr.Typ==1) and (PurgeTRr.SerNr==-1) and (IPrsr.IVNr==-1)) then begin
            if (PurgeTRr.DebVal!=0) then begin
              v = PurgeTRr.DebVal;
              cuscurval = PurgeTRr.DebVal;
              if (PurgeTRr.CurDebVal!=0) then begin
                v = PurgeTRr.CurDebVal;
                cuscurval = MulRateToBase1(PurgeTRr.Curncy,v,PurgeTRr.FrRate,PurgeTRr.ToRateB1,PurgeTRr.ToRateB2,PurgeTRr.BaseRate1,PurgeTRr.BaseRate2,SetRoundModeD(2));
                if (RepSpec.flags[2]==0) then begin
                  v = cuscurval;
                end else begin
                  if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
                    cuscurval = v;
                  end;  
                end;
              end else begin
                typeofcur = TypeOfCurncy(PurgeTRr.Curncy,oldstyle);   
              end;
              balp = balp + cuscurval;
              SumDebet = SumDebet + cuscurval;
              ExportTRBegin(6);
              ExportTD(8,"left","",false,2,false,PurgeTRr.TransDate);
              ExportTD(8,"left","",false,2,false,USetStr(2530));
              ExportTD(8,"left","",false,2,false,PurgeTRr.Number);
              ExportTD(8,"right","",false,2,false,v);
              ExportTD(8,"right","",false,2,false,balp);
              ExportTREnd(6); 
            end;                    
            if (PurgeTRr.CredVal!=0) then begin
              v = PurgeTRr.CredVal;
              cuscurval = PurgeTRr.CredVal;
              if (PurgeTRr.CurCredVal!=0) then begin
                v = PurgeTRr.CurCredVal;
                cuscurval = MulRateToBase1(PurgeTRr.Curncy,v,PurgeTRr.FrRate,PurgeTRr.ToRateB1,PurgeTRr.ToRateB2,PurgeTRr.BaseRate1,PurgeTRr.BaseRate2,SetRoundModeD(2));
                if (RepSpec.flags[2]==0) then begin
                  v = cuscurval;
                end else begin
                  if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
                    cuscurval = v;
                  end;  
                end;
              end else begin
                typeofcur = TypeOfCurncy(PurgeTRr.Curncy,oldstyle);   
              end;
              balp = balp - cuscurval;
              SumCredit = SumCredit + cuscurval;
              ExportTRBegin(6);
              ExportTD(8,"left","",false,2,false,PurgeTRr.TransDate);
              ExportTD(8,"left","",false,2,false,USetStr(2530));
              TRExtYc(PurgeTRr,tstr);
              ExportTD(8,"left","",false,2,false,tstr);
              ExportTD(8,"left","",false,2,false," ");
              ExportTD(8,"right","",false,2,false,v);
              ExportTD(8,"right","",false,2,false,balp);
              ExportTREnd(6); 
            end; 
          end;
          if ((PurgeTRr.Typ==1) and (PurgeTRr.SerNr!=-1)) then begin
            v = blankval;
            if (PurgeTRr.DebVal!=0)then begin
              v = blankval;
              if (RepSpec.flags[3]==0) then begin
                if (PurgeTRr.SerNr==IPrsr.IVNr) then begin
                  if (PurgeTRr.TransDate==IPrsr.TransDate) then begin
                    if (PurgeTRr.CompCode==CUp.Code) then begin
                      tmp = PurgeTRr.DebVal;
                      cuscurval = PurgeTRr.DebVal;
                      if (PurgeTRr.CurDebVal!=0) then begin
                        tmp = PurgeTRr.CurDebVal;
                        cuscurval = MulRateToBase1(PurgeTRr.Curncy,tmp,PurgeTRr.FrRate,PurgeTRr.ToRateB1,PurgeTRr.ToRateB2,PurgeTRr.BaseRate1,PurgeTRr.BaseRate2,SetRoundModeD(2));
                        tmp = cuscurval;
                      end else begin
                        typeofcur = TypeOfCurncy(PurgeTRr.Curncy,oldstyle);   
                        if (RepSpec.flags[2]==1) then begin
                          if (typeofcur==2) then begin
                            tmp = PurgeTRr.DebVal2;
                            if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
                              cuscurval = PurgeTRr.DebVal2;
                            end;  
                          end;
                        end else begin
                          if (typeofcur==2) then begin
                            IVr.SerNr = PurgeTRr.SerNr;
                            if (ReadFirstMain(IVr,1,true)) then begin
                              tmp = MulRateToBase1(PurgeTRr.Curncy,PurgeTRr.DebVal2,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,SetRoundModeD(2));
                              cuscurval = tmp;
                            end;
                          end;
                        end;
                      end;
                      balp = balp + cuscurval;
                      SumDebet = SumDebet + cuscurval;
                      v = v + tmp;
                    end;
                  end;
                end;
              end;
              if (RepSpec.flags[3]==1) then begin
                if (PurgeTRr.SerNr==IPrsr.IVNr) then begin
                  if (PurgeTRr.TransDate!=IPrsr.TransDate) then begin
                    if (PurgeTRr.CompCode==CUp.Code) then begin
                      tmp = PurgeTRr.DebVal;
                      cuscurval = PurgeTRr.DebVal;
                      if (PurgeTRr.CurDebVal!=0) then begin
                        tmp = PurgeTRr.CurDebVal;
                        cuscurval = MulRateToBase1(PurgeTRr.Curncy,tmp,PurgeTRr.FrRate,PurgeTRr.ToRateB1,PurgeTRr.ToRateB2,PurgeTRr.BaseRate1,PurgeTRr.BaseRate2,SetRoundModeD(2));
                        if (RepSpec.flags[2]==0) then begin
                          tmp = cuscurval;
                        end else begin
                          if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
                            cuscurval = tmp;
                          end;  
                        end;
                      end else begin
                        typeofcur = TypeOfCurncy(PurgeTRr.Curncy,oldstyle);   
                        if (RepSpec.flags[2]==1) then begin
                          if (typeofcur==2) then begin
                            tmp = PurgeTRr.DebVal2;
                            if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
                              cuscurval = PurgeTRr.DebVal2;
                            end;  
                          end;
                        end else begin
                          if (typeofcur==2) then begin
                            IVr.SerNr = PurgeTRr.SerNr;
                            if (ReadFirstMain(IVr,1,true)) then begin
                              tmp = MulRateToBase1(PurgeTRr.Curncy,PurgeTRr.DebVal2,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,SetRoundModeD(2));
                              cuscurval = tmp;
                            end;
                          end;
                        end;
                      end;
                      balp = balp + cuscurval;
                      SumDebet = SumDebet + cuscurval;
                      v = v + tmp;
                    end;
                  end;
                end;
              end;
            end;              
            if (v!=0) then begin
              tstr = USetStr(2530);               
              PurgeTRExtYc(PurgeTRr,t2);
              if (IPrsr.IVNr!=-1) then begin
                t2 = t2 & " (";
                t2 = t2 & IPrsr.IVNr;
                t2 = t2 & " )";
              end;
              ExportTRBegin(6);
              ExportTD(8,"left","",false,2,false,IPrsr.TransDate);
              ExportTD(8,"left","",false,2,false,tstr);
              PurgeTRExtYc(PurgeTRr,tstr);
              ExportTD(8,"left","",false,2,false,tstr);
              ExportTD(8,"right","",false,2,false,v);
              ExportTD(8,"right","",false,2,false,balp);
              ExportTREnd(6); 
            end;               
            v = blankval;
            if (PurgeTRr.CredVal!=0)then begin              
              if (RepSpec.flags[3]==0) then begin
                if (PurgeTRr.SerNr==IPrsr.IVNr) then begin
                  if (PurgeTRr.TransDate==IPrsr.TransDate) then begin
                    if (PurgeTRr.CompCode==CUp.Code) then begin
                      tmp = PurgeTRr.CredVal;
                      cuscurval = PurgeTRr.CredVal;
                      if (PurgeTRr.CurCredVal!=0) then begin
                        tmp = PurgeTRr.CurCredVal;
                        cuscurval = MulRateToBase1(PurgeTRr.Curncy,tmp,PurgeTRr.FrRate,PurgeTRr.ToRateB1,PurgeTRr.ToRateB2,PurgeTRr.BaseRate1,PurgeTRr.BaseRate2,SetRoundModeD(2));
                        if (RepSpec.flags[2]==0) then begin
                          tmp = cuscurval;
                        end else begin
                          if (PurgeTRr.Curncy==CUp.CurncyCode) then begin 
                            cuscurval = tmp;
                          end;  
                        end;
                      end else begin
                        typeofcur = TypeOfCurncy(PurgeTRr.Curncy,oldstyle);   
                        if (RepSpec.flags[2]==1) then begin
                          if (typeofcur==2) then begin
                            tmp = PurgeTRr.CredVal2;
                            if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
                              cuscurval = PurgeTRr.CredVal2;
                            end;
                          end;
                        end;
                      end;
                      balp = balp - cuscurval;
                      SumCredit = SumCredit + cuscurval;
                      v = v + tmp;
                    end;
                  end;
                end;
              end;
              if (RepSpec.flags[3]==1) then begin
                if (PurgeTRr.SerNr==IPrsr.IVNr) then begin
                  if (PurgeTRr.TransDate==IPrsr.TransDate) then begin
                    if (PurgeTRr.CompCode==CUp.Code) then begin
                      tmp = PurgeTRr.CredVal;
                      cuscurval = PurgeTRr.CredVal;
                      if (PurgeTRr.CurCredVal!=0) then begin
                        tmp = PurgeTRr.CurCredVal;
                          cuscurval = MulRateToBase1(PurgeTRr.Curncy,tmp,PurgeTRr.FrRate,PurgeTRr.ToRateB1,PurgeTRr.ToRateB2,PurgeTRr.BaseRate1,PurgeTRr.BaseRate2,SetRoundModeD(2));
                        if (RepSpec.flags[2]==0) then begin
                          tmp = cuscurval;
                        end else begin
                          if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
                            cuscurval = tmp;
                          end;  
                        end;
                      end else begin
                        typeofcur = TypeOfCurncy(PurgeTRr.Curncy,oldstyle);   
                        if (RepSpec.flags[2]==1) then begin
                          if (typeofcur==2) then begin
                            tmp = PurgeTRr.CredVal2;
                            if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
                              cuscurval = PurgeTRr.CredVal2;
                            end;  
                          end;

                        end;
                      end;
                      balp = balp - cuscurval;
                      SumCredit = SumCredit + cuscurval;
                      v = v + tmp;
                    end;
                  end;
                end;
              end;
             if (v!=0) then begin
                tstr = USetStr(2530);               
                PurgeTRExtYc(PurgeTRr,t2);
                ExportTRBegin(6);
                ExportTD(8,"left","",false,2,false,IPrsr.TransDate);
                ExportTD(8,"left","",false,2,false,tstr);
                PurgeTRExtYc(PurgeTRr,tstr);
                tstr = tstr & " (";
                tstr = tstr & IPrsr.IVNr;
                tstr = tstr & " )";
                ExportTD(8,"left","",false,2,false,tstr);
                ExportTD(8,"left","",false,2,false,"");
                ExportTD(8,"right","",false,2,false,v);
                ExportTD(8,"right","",false,2,false,balp);
                ExportTREnd(6); 
              end;
            end;
          end;
L111:;               
        end;
L441:;
      end;
            
      if (IPrsr.TransType==kIPrsTransTypeCashIn) then begin
        CustListTransCLInHTML(RepSpec,IPrsr,CUp,balp,SumCredit);
      end;    
      if (IPrsr.TransType==kIPrsTransTypeCashOut) then begin
        CustListTransCLOutHTML(RepSpec,IPrsr,CUp,balp,SumDebet);
      end;    
L55:;
  end;
  
  if (custout) then begin
    TotSumDebet = TotSumDebet + SumDebet;
    TotSumCredit = TotSumCredit + SumCredit;
    v = SumDebet - SumCredit;
    ExportTRBegin(6);
    ExportTD(8,"left","6",false,2,false,"<hr>");
    ExportTREnd(6);        
        
    ExportTRBegin(6);
    ExportTD(8,"left","",false,2,false,USetStr(3192));
    ExportTD(8,"left","",false,2,false," ");
    ExportTD(8,"left","",false,2,false," ");
    ExportTD(8,"right","",false,2,false,SumDebet);
    ExportTD(8,"right","",false,2,false,SumCredit);
    if ((totloss>0) or (totgain<0)) then begin
      ExportTD(8,"left","",false,2,false,USetStr(3201) & " " & bascur.BaseCur1);
      if (totgain<0) then begin
        totloss = -totgain;
      end;
      ExportTD(8,"left","",false,2,false,totloss);
    end;
    if ((totgain>0) or (totloss<0)) then begin
      ExportTD(8,"left","",false,2,false,USetStr(3201) & " " & bascur.BaseCur1);
      if (totloss<0) then begin
        totgain = -totloss;
      end;
      ExportTD(8,"left","",false,2,false,totloss);
    end;
    
    ExportTREnd(6); 
    ExportTRBegin(6);
    ExportTD(8,"left","",false,2,false,USetStr(3194));
    ExportTD(8,"left","",false,2,false,v);
    ExportTREnd(6); 
    
    ExportTRBegin(6);
    ExportTD(8,"left","",false,2,false,USetStr(3195));
    ExportTD(8,"left","",false,2,false,"");
    ExportTD(8,"left","",false,2,false,"");
    ExportTD(8,"left","",false,2,false,"");
    ExportTD(8,"left","",false,2,false,"");
    ExportTD(8,"right","",false,2,false,balp);
    ExportTREnd(6); 
  end;
  
  ExportTABLEEnd(4);
  ExportBODYEnd;
  ExportHTMLEnd;
  
  /*
  for(a=0;a<10000;a=a+1)begin // Why would you possibly want to do this???
    ExportPadString(" ",1,"",false);
  end;
  */
  CloseFile;
  if (RecordLinkFile(fname,0,Mailr,CurrentCompany)) then begin end;
  Delete_File(fname);
  /*
  if ((RepSpec.flags[2]==1) and (nonblank(CUp.CurncyCode))) then begin
    curncy = CUp.CurncyCode;
  end else begin
    GetBaseCurncy(1,curncy);
  end;
  AddCurTotalsRow(curncy,startbal,v,balp,CurTotalsr);
  */
  return;
end;

updating procedure PeriodicCustCreateHtmlFile(record RcVc RepSpec)
begin
  record MailVc Mailr,OldMailr;
  record CYBlock CompRec;
  string 255 fname;
  record CSVc CSr;
  Boolean stfound;
  val sum1,StartBal,EndBal,DiffBal;
  val TotStartBal,TotCustBal,v;
  val TotSumDebet,TotSumCredit;
  record SMVc CurTotalsr;  //addcurencytotals
  record ActVc Actr;
  Boolean res; 
  row MailVc MArw;
  record CUVc CUr;
  Integer i,rwcnt; 
  string 255 mailboxnr,tstr; 
  String 255 custstart, custend;
  Boolean TrHs, testf;
  row MailTextVc MTrw;
  record LTxtVc LTxtr;
  Integer IgnoreRecordDetails;
  Boolean added;
  
  res = true;
  SetFileOnServer(true);
  BlockLoad(CompRec);
  
  if (nonblank(RepSpec.f1))then begin
    custstart = FirstInRange(RepSpec.f1,20);
    custend = LastInRange(RepSpec.f1,20);
  end;
  
  if(nonblank(RepSpec.f1))then begin
    CUr.Code = custstart;
  end else begin
    ResetLoop(CUr);
  end;
  
  TrHs = true;
  while (LoopMain(CUr,1,TrHs)) begin
    testf = true;
    if (nonblank(RepSpec.f1)) then begin
      if (CUr.Code>custend) then begin
        TrHs = false;
        testf = false;
      end;
      
      if (CUr.Code<custstart) then begin
        testf = false;
      end;
    end;
    
    if (nonblank(RepSpec.f3) and (RepSpec.f3!=CUr.CustCat)) then begin testf = false; end;
    if (CUr.CUType==0) then begin 
      testf = false; 
    end;
    if (blank(CUr.eMail)) then begin testf = false; end;
    if (testf) then begin
     CSr.CustCode = CUr.Code;
      stfound = ReadFirstMain(CSr,1,true);
      if (stfound==true) then begin
        CUGetStartBalance(CUr,"balance",RepSpec.CurncyCode,RepSpec.sStartDate,StartBal,true);
        EndBal = GetBalance(CUr,"balance",RepSpec.sEndDate);
        DiffBal = EndBal - StartBal;
      end else begin
        StartBal = 0;
        EndBal = 0;
        DiffBal = 0;
      end;
      TotStartBal = TotStartBal + StartBal;
      if (RepSpec.flags[1]!=0) then begin
        if ((StartBal==0) and (DiffBal==0) and (EndBal==0)) then begin 
          goto L33; 
        end;
      end;    
      RecordNew(Mailr);
      tstr = USetStr(2480);     
      
      FindUserMailboxName(CurrentUser,mailboxnr,tstr);
      /*
      if (blank(tstr)) then begin
        res = 2289;
        warning = CurrentUser;
        goto LCreateMailFromIVD;
      end;  
      */
      
      MArw.RowTyp = 1;
      MArw.AddrCode = tstr;
      MatRowPut(Mailr,0,MArw);
      if (AddEMailRecipients(Mailr,CUr.Code,CUr.eMail,kMailPeriodicCustStatement)==true) then begin 
      end;
      MailTextRow("",StringFromSet(514,kMailPeriodicCustStatement),CUr.LangCode,MTrw,IgnoreRecordDetails);
      
      if (nonblank(MTrw.Header)) then begin  
        Mailr.Header = MTrw.Header & ": " & CUr.Code;
      end else begin
        Mailr.Header = USetStr(2480) & ": " & CUr.Code;
      end;
      
      if (nonblank(MTrw.FirstTxt)) then begin
        LTxtr.Code = MTrw.FirstTxt;
        if (ReadFirstMain(LTxtr,1,true)) then begin
          Mailr.HtmlFlag = LTxtr.HtmlFlag;
        end;
      end;
      if (Mailr.HtmlFlag==0) then begin
        if (nonblank(MTrw.LastTxt)) then begin
          LTxtr.Code = MTrw.LastTxt;
          if (ReadFirstMain(LTxtr,1,true)) then begin
            Mailr.HtmlFlag = LTxtr.HtmlFlag;
          end;
        end;
      end;
      
      Mailr.TransDate = CurrentDate;
      Mailr.SerNr = NextSerNr("MailVc",Mailr.TransDate,-1,false,"");
      
      RecordStore(Mailr,false);
      RecordCopy(OldMailr,Mailr);
      
      added = false;
      if (nonblank(MTrw.FirstTxt)) then begin
        LTxtr.Code = MTrw.FirstTxt;
        if (ReadFirstMain(LTxtr,1,true)) then begin
          if (Mailr.HtmlFlag==0) then begin
            rwcnt = LineTextCnt(LTxtr);
            for (i=0;i<rwcnt;i=i+1) begin
              tstr = LineTextGet(LTxtr,i);
              LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
            end;
          AddCRToText(Mailr);
          end else begin
            if (LTxtr.HtmlFlag==0) then begin
              AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
            end else begin
              AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
            end;
          end;
          added = true;
        end;
      end;
      if (added==false) then begin
        tstr = USetStr(11442);
        if (Mailr.HtmlFlag==0) then begin
          LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
        end else begin
          RecordClear(Ltxtr);
          LineTextPut(Ltxtr,0,tstr);
          AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
        end;
      end;
      
      if (nonblank(MTrw.LastTxt)) then begin
        LTxtr.Code = MTrw.LastTxt;
        if (ReadFirstMain(LTxtr,1,true)) then begin
          if (Mailr.HtmlFlag==0) then begin
            rwcnt = LineTextCnt(LTxtr);
            for (i=0;i<rwcnt;i=i+1) begin
              tstr = LineTextGet(LTxtr,i);
              LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
            end;
            AddCRToText(Mailr);
          end else begin
            if (LTxtr.HtmlFlag==0) then begin
              AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
            end else begin
              AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
            end;
          end;
        end;
      end;
      
      if (RepSpec.flags[11]!=0) then begin
        Mailr.SendFlag = 1;
      end;
      RecordUpdate(OldMailr,Mailr,true);
      
      CustListTransHTML(RepSpec,CUr,StartBal,TotSumDebet,TotSumCredit,CurTotalsr, Mailr);
    //Mailr.SendFlag = 1;
      Actr.SerNr = CreateMailActHTML(CUr,Mailr);
L33:;      
    end;
  end;
  SetFileOnServer(false);  
  return;
end;

global
updating function Boolean CUPerEmailMn_Run(var record RcVc RepSpec,string FromSystem)
begin
  Boolean res;
  record MailVc Mailr,OldMailr;
  row MailVc Mailrw;
  string 255 fname;
  record RcVc theRepSpec;
  record CUVc CUr;
  Boolean CUs;
  string 255 frcc,tocc;
  string 255 a,b;
  val TotSum;
  Boolean skip;
  Boolean skip2;
  Array string 20 ac;
  record BaseCurBlock BCb;
  Boolean notfullmonthf;
  Boolean TrHs,testf;
  val StartBal,EndBal,DiffBal;
  row MailTextVc MTrw;
  record LTxtVc LTxtr;
  Integer IgnoreRecordDetails;
  string 255 tstr;
  Boolean added;
  Integer i,rwcnt;

  SplitEclass(RepSpec.f4,ac);
  BlockLoad(BCb);
  notfullmonthf = GetDay(RepSpec.sStartDate)!=1;
  frcc = FirstInRange(RepSpec.f1,20);
  tocc = LastInRange(RepSpec.f1,20);  
  if (blankdate(RepSpec.d1)) then begin
    RepSpec.d1 = RepSpec.sEndDate;
  end;
  CUr.Code = frcc;
  TrHs = true;
  SetLoopPosition(CUr,RepSpec.long1);
  while (LoopMain(CUr,1,TrHs)) begin
    if (nonblank(tocc)) then begin
      if (CUr.Code>tocc) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      testf = true;    
      if (CUr.CUType==0) then begin testf = false; end;
      if (nonblank(RepSpec.f3) and (RepSpec.f3!=CUr.CustCat)) then begin testf = false; end;
      if (nonblank(RepSpec.f4)) then begin
        if (SclassInEclass(ac,CUr.Classification)==0) then begin testf = false; end;
      end;
      if (blank(CUr.eMail)) then begin testf = false; end;
      if (testf) then begin

        RecordCopy(theRepSpec,RepSpec);
        theRepSpec.f1 = CUr.Code;
        RecordNew(Mailr);

        ClearRow(Mailr,Mailrw,1);
        Mailrw.RowTyp = kMailRowTypeFrom;
        Mailrw.AddrCode = FromSystem;
        ResolveMailboxNumber(Mailrw);
        MatRowPut(Mailr,0,Mailrw);
        if (AddEMailRecipients(Mailr,CUr.Code,CUr.eMail,kMailPeriodicCustStatement)==true) then begin 
        end;
        
        MailTextRow("",StringFromSet(514,kMailPeriodicCustStatement),CUr.LangCode,MTrw,IgnoreRecordDetails);
        
        if (nonblank(MTrw.Header)) then begin  
          Mailr.Header = MTrw.Header & ": " & CUr.Code;
        end else begin
          Mailr.Header = USetStr(2480) & ": " & CUr.Code;
        end;
        
        if (nonblank(MTrw.FirstTxt)) then begin
          LTxtr.Code = MTrw.FirstTxt;
          if (ReadFirstMain(LTxtr,1,true)) then begin
            Mailr.HtmlFlag = LTxtr.HtmlFlag;
          end;
        end;
        if (Mailr.HtmlFlag==0) then begin
          if (nonblank(MTrw.LastTxt)) then begin
            LTxtr.Code = MTrw.LastTxt;
            if (ReadFirstMain(LTxtr,1,true)) then begin
              Mailr.HtmlFlag = LTxtr.HtmlFlag;
            end;
          end;
        end;
        
        Mailr.TransDate = CurrentDate;
        Mailr.SerNr = NextSerNr("MailVc",Mailr.TransDate,-1,false,"");
        
        RecordInsert(Mailr,true);
        RecordCopy(OldMailr,Mailr);
        
        added = false;
        if (nonblank(MTrw.FirstTxt)) then begin
          LTxtr.Code = MTrw.FirstTxt;
          if (ReadFirstMain(LTxtr,1,true)) then begin
            if (Mailr.HtmlFlag==0) then begin
              rwcnt = LineTextCnt(LTxtr);
              for (i=0;i<rwcnt;i=i+1) begin
                tstr = LineTextGet(LTxtr,i);
                LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
              end;
              AddCRToText(Mailr);
            end else begin
              if (LTxtr.HtmlFlag==0) then begin
                AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
              end else begin
                AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
              end;
            end;
            added = true;
          end;
        end;
        if (added==false) then begin
          tstr = USetStr(11442);
          if (Mailr.HtmlFlag==0) then begin
            LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
          end else begin
            RecordClear(Ltxtr);
            LineTextPut(Ltxtr,0,tstr);
            AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
          end;
        end;
        
        if (nonblank(MTrw.LastTxt)) then begin
          LTxtr.Code = MTrw.LastTxt;
          if (ReadFirstMain(LTxtr,1,true)) then begin
            if (Mailr.HtmlFlag==0) then begin
              rwcnt = LineTextCnt(LTxtr);
              for (i=0;i<rwcnt;i=i+1) begin
                tstr = LineTextGet(LTxtr,i);
                LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
              end;
              AddCRToText(Mailr);
            end else begin
              if (LTxtr.HtmlFlag==0) then begin
                AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
              end else begin
                AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
              end;
            end;
          end;
        end;
        
        fname = "tmp/" & Mailr.Header & "-" & CUr.Code & ".pdf";
        SetDocumentFilename(fname);
        SetMedia(mtPdf);
        theRepSpec.repname = "CuPerForm";
        PrintDocument(theRepSpec,"CuPerForm",false);
        if (FileExists(fname)) then begin
          RecordLinkFile(fname,0,Mailr,CurrentCompany);
          if (RepSpec.flags[11]!=0) then begin
            Mailr.SendFlag = 1;
          end;
          RecordUpdate(OldMailr,Mailr,true);
        end else begin
          RecordDelete(Mailr);
        end;
        
        SetDocumentFilename("");    
        Delete_File(fname);

        res = true;
        CUs = false;
        RepSpec.long1 = GetLoopPosition(CUr);

      end;
    end;
  end;

  CUPerEmailMn_Run = res;
  return;
end;

procedure PeriodicCustCreatePDF(record RcVc RepSpec)
begin
  record MailSettingsBlock MSb;
  string 255 mailboxnr,FromSystem;
  
  BlockLoad(MSb);
  FindUserMailboxName(CurrentUser,mailboxnr,FromSystem);
  if (blank(FromSystem)) then begin
    FromSystem = MSb.FromSystem;
  end;
  if (blank(FromSystem)) then begin
    goto LPeriodicCustCreatePDF;
  end;
  while (qupdating.CUPerEmailMn_Run(RepSpec,FromSystem)) begin
  end;
LPeriodicCustCreatePDF:;  
  return;
end;

global
updating procedure CUPerEmailMn(record RcVc RepSpec)
begin
  switch (RepSpec.flags[28]) begin
    case 0: PeriodicCustCreateHtmlFile(RepSpec);
    case 1: PeriodicCustCreatePDF(RepSpec);
  end;
  return;
end;