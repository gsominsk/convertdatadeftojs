external procedure IVVc_PastePayDeal(var record IVVc,string,string);
external updating procedure UpdateOrderFromProj(record TBIVVc,Boolean);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external procedure ExtractObj(string,var Integer,var string);
external function string 60 AddObjectToObjectList(string,string);
external procedure MulM4ProcVal(val,val,var val);
external procedure IVVc_PasteCurncyCode(var record IVVc,string,Integer,Boolean,Boolean);
external procedure AddWithholdingTaxesRows_IVVc(var record IVVc);
external procedure AddPerceptionTaxesRows_IVVc(var record IVVc);
external procedure GetARAcc(string,var string);
external procedure CalcSum(val,val,val,val,var val,Integer);
external function LongInt DateDiff(Date,Date);
external function string 255 FindNextLegalSerNr(record IVVc,string);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function Integer TypeOfCurncy(var string,var Integer);
external procedure IVSumup(var record IVVc,Boolean);
external updating procedure ProInvTBIVVc(record RcVc,record PRVc,var record IVVc,record TBBUVc,record XSVc,
                       Integer,Integer,Boolean,Boolean,Boolean,record GeneralOptionBlock,
                       Integer,Integer,Integer,var Integer,var Integer,var val,var val,
                       Array string,Array string,Array string,Array string,
                       Array string,Array string,Array Integer,Array Integer,var Integer,
                       var Array Date,var Array Integer,var Integer,Integer,Integer,var Boolean,
                       var vector val,var Array string,var Array string,var Integer,
                       var Array record TBIVVc,var Integer);
external procedure GetItemSalesAcc(string,Integer,var string);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external procedure GetEmplName(string,var string);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external function Boolean PasteCustInInv(var record IVVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external updating procedure UpdatePRFromIV(record IVVc,Boolean,record IVVc,Boolean);
external updating function Integer PRDownPayInvoice(record RcVc,var record IVVc,var record PRVc);
external updating procedure UpdatePRRetRow(record PRVc,LongInt,val,Boolean);
external procedure IVVc_PasteSalesMan(var record IVVc,string);

global
procedure RecalcProjectInvoice(record IVVc IVp,string prcurncy)
BEGIN
  Integer i,rwcnt;
  row IVVc IVrw;
  val fr,to1,to2,br1,br2;
  val s,pr;
  record GeneralOptionBlock GOb;

  BlockLoad(GOb);
  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (IVrw.Price!=0) or (IVrw.Sum!=0) then begin
      GetFullCurncyRate(IVp.CurncyCode,IVp.TransDate,fr,to1,to2,br1,br2);
      IVp.FrRate = fr;
      IVp.ToRateB1 = to1;
      IVp.ToRateB2 = to2;
      IVp.BaseRate1 = br1;
      IVp.BaseRate2 = br2;      
      pr = IVrw.Price;
      CurValToOtherCur(IVp.TransDate,prcurncy,IVrw.Price,IVp.CurncyCode,IVrw.Price,DefaultCurRoundOff);
      if (pr!=0) then begin
        CalcSum(IVrw.Quant,IVrw.Price,IVrw.PriceFactor,IVrw.vRebate,s,GOb.UseDiscount);  
        IVrw.Sum = s;
      end else begin
      CurValToOtherCur(IVp.TransDate,prcurncy,IVrw.Sum,IVp.CurncyCode,IVrw.Sum,DefaultCurRoundOff);
      end;
      MatRowPut(IVp,i,IVrw);
    end;
  end;
  IVSumup(IVp,true);  
  RETURN;
END;

procedure NewInvoice(record RcVc RepSpec,var record IVVc IVp,record PRVc PRp,record CUVc CUr)
BEGIN
  record IIBlock IIRec;
  record AccBlock ARAccb;
  record BaseCurBlock BaseCurRec;
  val fr,to1,to2,br1,br2;
  string 5 crncy;
  string 255 tstr;
 
  RecordNew(IVp);
  BlockLoad(ARAccb);
  BlockLoad(IIRec);
  BlockLoad(BaseCurRec);
  IVp.SerNr = -1;
  IVp.InvType = kInvoiceTypeNormal;
  if (nonblankdate(RepSpec.d2)) then begin
    IVp.InvDate = RepSpec.d2;
    IVp.TransDate = RepSpec.d2;
  end else begin
    IVp.InvDate = CurrentDate;
    IVp.TransDate = CurrentDate;
  end;
  IVp.SerNr = NextSerNr("IVVc",IVp.TransDate,-1,false,IVp.LangCode);
  IVp.CustCat = "";
  IVp.Prntdf = 0;
  IVp.OrderNr = -1;
  IVp.SVONr = -1;
  IVp.CredInv = -1;
  IVp.CredMark = "";
  IVp.ExportFlag = 0;
  IVp.OKFlag = 0;
  IVp.IntCode = IIRec.IntRate;
  IVp.InclVAT = ARAccb.BasePriceInclVAT;
  IVp.NoTAXonVAT = ARAccb.NoTAXonVAT;
  IVp.TotalwoTAX = ARAccb.TotalwoTAX;
  IVp.PriceList = "";
  IVp.PayDeal = "";
  IVp.InvComment = "";
  IVp.CurncyCode = "";
  IVp.CurncyCode = crncy;
  GetFullCurncyRate(crncy,IVp.TransDate,fr,to1,to2,br1,br2);
  crncy = IVp.CurncyCode;
  IVp.FrRate = fr;
  IVp.ToRateB1 = to1;
  IVp.ToRateB2 = to2;
  IVp.BaseRate1 = br1;
  IVp.BaseRate2 = br2;  
  IVp.LastRemndr = -1;
  IVp.OurContact = PRp.LeaderName;
  IVp.ClientContact = PRp.Contact;
  IVp.Sum0 = blankval;
  IVp.Sum1 = blankval;
  IVp.Sum2 = blankval;
  IVp.Sum3 = blankval;
  IVp.Sum4 = blankval;
  IVp.UpdStockFlag = 0;
  IVp.FrItem = "";
  IVp.OrgCust = "";
  IVp.FrObjects = "";
  IVp.FrBase = blankval;
  IVp.FrPrice = blankval;
  IVp.FrGP = blankval;
  IVp.FrGPPercent = blankval;
  IVp.Objects = PRp.Objects;
  IVp.CurncyCode = PRp.CurncyCode;
  if (blank(PRp.CurncyCode)) then begin
    IVp.CurncyCode = BaseCurRec.BaseCur1;  
  end;
  IVVc_PasteCurncyCode(IVp,IVp.CurncyCode,-1,true,true);  
  if (nonblank(PRp.PrSalesMan)) then begin
    IVp.SalesMan = PRp.PrSalesMan;
    IVVc_PasteSalesMan(IVp,"");
  end;
  IVp.Region = CUr.Region;
  IVp.NoTax1 = CUr.NoTax1;
  IVp.NoTax2 = CUr.NoTax2;
  IVp.DeliverySiteCode = PRp.DeliverySiteCode;
  IVp.WorkSiteNumber = PRp.WorkSiteNumber;
  RETURN;
END;

global
function Boolean BuildBudget(string pr,record TBBUVc TBBUp,Array Integer uarr,var Integer uarrcnt)
BEGIN
  Integer rwcnt,i;
  row TBBUVc TBBUrw;  
  Boolean res;

  TBBUp.PRCode = pr;
  if (ReadFirstMain(TBBUp,1,true)) then begin
    res = true;
    rwcnt = MatRowCnt(TBBUp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TBBUp,i,TBBUrw);
      if (nonblank(TBBUrw.ArtCode)) then begin
        uarr[i] = 0;
      end else begin
        uarr[i] = -1;
      end;
    end;
  end;
  uarrcnt = rwcnt-1;
  BuildBudget = res;
  RETURN;
END;

// Almost the same as PRNewInvoice...
global
procedure TBPRNewInvoice(var record IVVc IVp,record PRVc PRp)
BEGIN
  record IIBlock IIRec;
  record AccBlock ARAccRec;
  record BaseCurBlock BaseCurRec;
  val fr,to1,to2,br1,br2;
  string 5 crncy;
  string 255 tstr;
  record CUVc CUr;
 
  RecordNew(IVp);
  BlockLoad(ARAccRec);
  BlockLoad(IIRec);
  BlockLoad(BaseCurRec);
  IVp.SerNr = -1;
  IVp.InvType = kInvoiceTypeNormal;
  IVp.InvDate = CurrentDate;
  IVp.TransDate = CurrentDate;
  IVp.SerNr = NextSerNr("IVVc",IVp.TransDate,-1,false,IVp.LangCode);
  IVp.CustCat = "";
  IVp.Prntdf = 0;
  IVp.OrderNr = -1;
  IVp.SVONr = -1;
  IVp.CredInv = -1;
  IVp.CredMark = "";
  IVp.ExportFlag = 0;
  IVp.OKFlag = 0;
  IVp.IntCode = IIRec.IntRate;
  IVp.InclVAT = 0;
  IVp.ARAcc = ARAccRec.ARAcc;
  IVp.PriceList = "";
  IVp.PayDeal = "";
  IVp.InvComment = "";
  IVp.CurncyCode = "";
  IVp.CurncyCode = crncy;
  GetFullCurncyRate(crncy,IVp.TransDate,fr,to1,to2,br1,br2);
  crncy = IVp.CurncyCode;
  IVp.FrRate = fr;
  IVp.ToRateB1 = to1;
  IVp.ToRateB2 = to2;
  IVp.BaseRate1 = br1;
  IVp.BaseRate2 = br2;  
  IVp.LastRemndr = -1;
  IVp.OurContact = PRp.LeaderName;
  IVp.ClientContact = PRp.Contact;
  IVp.Sum0 = blankval;
  IVp.Sum1 = blankval;
  IVp.Sum2 = blankval;
  IVp.Sum3 = blankval;
  IVp.Sum4 = blankval;
  IVp.UpdStockFlag = ARAccRec.InvUpdStock;
  IVp.FrItem = "";
  IVp.OrgCust = "";
  IVp.FrObjects = "";
  IVp.FrBase = blankval;
  IVp.FrPrice = blankval;
  IVp.FrGP = blankval;
  IVp.FrGPPercent = blankval;
  IVp.Objects = PRp.Objects;
  IVp.CustVATCode = ARAccRec.VATCodeDom;  
  IVp.CurncyCode = PRp.CurncyCode;
  if (blank(PRp.CurncyCode)) then begin
    IVp.CurncyCode = BaseCurRec.BaseCur1;  
  end;
  IVVc_PasteCurncyCode(IVp,IVp.CurncyCode,-1,true,true);  
  CUr.Code = IVp.CustCode;
  ReadFirstMain(CUr,1,true);
  IVp.Region = CUr.Region;
  IVp.NoTax1 = CUr.NoTax1;
  IVp.NoTax2 = CUr.NoTax2;
  RETURN;
END;

function Boolean PRNewInvoice(var record IVVc IVp,record RcVc RepSpec,record PRVc PRp,record CUVc CUr,
                       Boolean realinv,record SRBlock SRRec)
BEGIN
  Boolean res;
  string 255 tstr,saveobj,obj;
  val fr,to1,to2,br1,br2;
  record AccBlock ARAccb;
  Integer pos;
  
  res = true;
  RecordNew(IVp);
  NewInvoice(RepSpec,IVp,PRp,CUr);
  if (CUr.IntRate!=0) then begin
    IVp.IntCode = CUr.IntRate;
  end;
  IVp.InvType = kInvoiceTypeNormal;
  IVp.PRCode = PRp.Code;
  IVp.Prntdf = 0;
  IVp.OrderNr = -1;
  IVp.SVONr = -1;
  IVp.OKFlag = 0;
  IVp.InvComment = "";
  IVp.Sum0 = blankval;
  IVp.Sum1 = blankval;
  IVp.Sum2 = blankval;
  IVp.Sum3 = blankval;
  IVp.Sum4 = blankval;
//  IVp.InclVAT = 0; it is set in NewInvoice
  if (realinv==true) then begin
    IVp.SerNr = NextSerNr("IVVc",IVp.TransDate,-1,false,"");
    SRRec.LastInvNr = IVp.SerNr;
  end;
  if (realinv) then begin
    if (IVp.SerNr==-1) then begin 
      res = false;
      goto LPRNewInvoice; 
    end;
  end;
  if (nonblank(CUr.InvoiceToCode)) then begin
    IVp.CustCode = CUr.InvoiceToCode;
    IVp.OrgCust = CUr.Code;
  end else begin
    IVp.CustCode = CUr.Code;
  end;
  GetARAcc(IVp.CustCode,IVp.ARAcc);
  saveobj = IVp.Objects;
  if (PasteCustInInv(IVp)) then begin end;
  if (blank(IVp.ARAcc)) then begin
    BlockLoad(ARAccb);
    IVp.ARAcc = ARAccb.ARAcc;
  end;
  IVp.ClientContact = PRp.Contact;
  if (nonblank(PRp.LangCode)) then begin
    IVp.LangCode = PRp.LangCode;
  end;
  if (nonblank(PRp.PayDeal)) then begin
    IVp.PayDeal = PRp.PayDeal;
    IVVc_PastePayDeal(IVp,"","");
  end;
  if (nonblank(PRp.CustOrdNr)) then begin
    IVp.CustOrdNr = PRp.CustOrdNr;
  end;
  GetFullCurncyRate(IVp.CurncyCode,IVp.InvDate,fr,to1,to2,br1,br2);
  IVp.FrRate = fr;
  IVp.ToRateB1 = to1;
  IVp.ToRateB2 = to2;
  IVp.BaseRate1 = br1;
  IVp.BaseRate2 = br2;  
  if (nonblank(IVp.Objects)) then begin
    if (nonblank(saveobj)) then begin
      pos = 0;
      ExtractObj(saveobj,pos,obj);
      while (nonblank(obj)) begin
        IVp.Objects = AddObjectToObjectList(IVp.Objects,obj);        
        ExtractObj(saveobj,pos,obj);
      end;
    end;
  end else begin
    IVp.Objects = saveobj;
  end;
LPRNewInvoice:;  
  PRNewInvoice = res;  
  RETURN;
END;

function Boolean NoDateSet(Array Integer aRowNo,Integer alinecnt,Integer rownr)
begin
  Integer i;
  Boolean res;
  
  res = true;
  for (i=0;i<alinecnt;i=i+1) begin
    if (aRowNo[i]==rownr) then begin
      res = false;
      i = alinecnt;
    end;
  end;
  NoDateSet = res;
  return;
end;

function Boolean FindNextDate(Array Date aEvDat,Integer alinecnt,var Date firstd)
begin
  Integer i;
  Boolean res;
  Date closest;
  LongInt diff,sdiff;

  res = false;
  sdiff = 100000;
  for (i=0;i<alinecnt;i=i+1) begin
    diff = DateDiff(aEvDat[i],firstd);
    if ((diff>0) and (diff<sdiff)) then begin
      sdiff = diff;
      closest = aEvDat[i];
      res = true;
    end;
  end;
  if (sdiff!=100000) then begin
    firstd = closest;
  end;
  FindNextDate = res;
  return;
end;

function Boolean FindFirstDate(Array Date aEvDat,Integer alinecnt,var Date firstd)
begin
  Integer i;
  Boolean res;

  res = false;
  for (i=0;i<alinecnt;i=i+1) begin
    if (blankdate(firstd)) then begin
      firstd = aEvDat[i];
    end;
    if (firstd>aEvDat[i]) then begin
      firstd = aEvDat[i];
    end;
    res = true;
  end;
  FindFirstDate = res;
  return;
end;

procedure FindLastDate(Array Date aEvDat,Integer alinecnt,var Date lastd)
begin
  Integer i;

  for (i=0;i<alinecnt;i=i+1) begin
    if (blankdate(lastd)) then begin
      lastd = aEvDat[i];
    end;
    if (lastd<aEvDat[i]) then begin
      lastd = aEvDat[i];
    end;
  end;
  return;
end;

// Sorts all events per day and adds a date in the matrix before all items of that day
procedure ResortProjInv(var record IVVc IVp,Array Date aEvDat,Array Integer aRowNo,Integer alinecnt)
begin
  record IVVc locIVr;
  row IVVc IVrw;
  Integer i,j,rwcnt;
  Date firstd;

  if (FindFirstDate(aEvDat,alinecnt,firstd)) then begin
    RecordCopy(locIVr,IVp);
    rwcnt = MatRowCnt(locIVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowDelete(IVp,0);
    end;
    for (i=0;i<rwcnt;i=i+1) begin
      if (NoDateSet(aRowNo,alinecnt,i)) then begin
        MatRowGet(locIVr,i,IVrw);
        MatRowPut(IVp,MatRowCnt(IVp),IVrw);
      end;
    end;
    for (i=0;i<rwcnt;i=i+1) begin
      ClearRow(IVp,IVrw,1);
      IVrw.Spec = " ";
//      MatRowPut(IVp,MatRowCnt(IVp),IVrw);
      IVrw.Spec = firstd;
      MatRowPut(IVp,MatRowCnt(IVp),IVrw);
      for (j=0;j<rwcnt;j=j+1) begin
        if (aEvDat[j]==firstd) then begin
          MatRowGet(locIVr,aRowNo[j],IVrw);
          MatRowPut(IVp,MatRowCnt(IVp),IVrw);
        end;
      end;
      if (FindNextDate(aEvDat,alinecnt,firstd)==false) then begin
        i = rwcnt;
      end;
    end;
  end;
  return;
end;

global
updating procedure MakeProjectInvoice2(record RcVc RepSpec,record PRVc PRp,record IVVc IVp,record XSVc XSp,Boolean realinv,
                              Boolean detailf,Boolean asBudgeted,Boolean buildon,Boolean reportf,
                              var val suminvdp,var val sumbudp,var val sumtb,var val sumpb,var val sumact,
                              var Boolean budfound,var record TBBUVc oldTBBUr,var record TBBUVc TBBUr,
                              var vector val vwipcost,var Array string awipacc,var Array string awipbalacc,var Integer awipacccnt,
                              var Array record TBIVVc aupdTBIVr,var Integer aupdacnt)
BEGIN
  record GeneralOptionBlock GenOptr;
  record ProjectBlock PRb;
  record SRBlock SRRec;
  record CUVc CUr;
  row IVVc IVrw;
  row TBBUVc TBBUrw;
  val t,tv2;
  Integer rwcnt,i;
  Integer line;
  Integer rownr;
  Integer firstrow;
  Integer ivrows;
  Integer uarracnt;
  Array Integer uarr;
  Boolean space;
  string 255 saveobj;
  string 255 tstr;
  val theprivsum;
  val fr,to1,to2,br1,br2;
  Array string 20 aProject;
  Array string 20 aItem;
  Array string 5 aGroup;
  Array string 5 aEMCode;
  Array Integer aItemType;
  Array Integer aFinished;
  Array string 2 aVATCode;
  Array string 10 aSalesAcc;
  Array Date aEvDat;
  Array Integer aRowNo;
  Integer alinecnt;
  Integer acnt;
  val tc;
  Integer ivrwcnt,oldstyle;
  Date firstd,lastd;
  Boolean projectheaderf,testf;
  record PRAccBlock PRAb;
  row PRVc PRrw;
    
  BlockLoad(GenOptr);
  BlockLoad(SRRec);
  suminvdp = blankval;
  sumbudp = blankval;
  sumpb = 0;
  sumtb = 0;
  sumact = 0;
  ivrows = 0;
  alinecnt = 0;
  projectheaderf = true;
  CUr.Code = PRp.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin end;
  IVp.ExportFlag = CUr.ExportFlag;
  budfound = BuildBudget(PRp.Code,TBBUr,uarr,uarracnt);
  RecordCopy(oldTBBUr,TBBUr);
  if (buildon==false) then begin  
    if (PRNewInvoice(IVp,RepSpec,PRp,CUr,realinv,SRRec)==false) then begin goto LMakeProjectInvoice2; end;
  end;
  firstrow = MatRowCnt(IVp);
  rownr = firstrow;  
  BlockLoad(PRb);
  
  ivrows = rownr;  

//Time
  ProInvTBIVVc(RepSpec,PRp,IVp,TBBUr,XSp,
               3,PRp.InvoiceTime,detailf,realinv,asBudgeted,GenOptr,
               PRp.TimeAvgQtyOnInv,PRp.TimeAvgPriOnInv,-1,ivrows,line,sumtb,theprivsum,
               aProject,aItem,aGroup,aEMCode,aVATCode,aSalesAcc,aItemType,aFinished,acnt,
               aEvDat,aRowNo,alinecnt,PRb.NoFixedPrUntilStarted,PRb.InvoiceasFixedBudget,projectheaderf,vwipcost,awipacc,awipbalacc,awipacccnt,
               aupdTBIVr,aupdacnt);

//Purchase
  ProInvTBIVVc(RepSpec,PRp,IVp,TBBUr,XSp,
               0,PRp.InvoicePurch,detailf,realinv,asBudgeted,GenOptr,
               PRp.PurcAvgQtyOnInv,PRp.PurcAvgPriOnInv,-1,ivrows,line,sumpb,theprivsum,
               aProject,aItem,aGroup,aEMCode,aVATCode,aSalesAcc,aItemType,aFinished,acnt,
               aEvDat,aRowNo,alinecnt,PRb.NoFixedPrUntilStarted,PRb.InvoiceasFixedBudget,projectheaderf,vwipcost,awipacc,awipbalacc,awipacccnt,
               aupdTBIVr,aupdacnt);

//Material
  ProInvTBIVVc(RepSpec,PRp,IVp,TBBUr,XSp,
               5,PRp.InvoiceMaterial,detailf,realinv,asBudgeted,GenOptr,
               PRp.PurcAvgQtyOnInv,PRp.PurcAvgPriOnInv,-1,ivrows,line,sumpb,theprivsum,
               aProject,aItem,aGroup,aEMCode,aVATCode,aSalesAcc,aItemType,aFinished,acnt,
               aEvDat,aRowNo,alinecnt,PRb.NoFixedPrUntilStarted,PRb.InvoiceasFixedBudget,projectheaderf,vwipcost,awipacc,awipbalacc,awipacccnt,
               aupdTBIVr,aupdacnt);

//Stocked Items 
  ProInvTBIVVc(RepSpec,PRp,IVp,TBBUr,XSp,
               1,PRp.InvoiceStock,detailf,realinv,asBudgeted,GenOptr,
               PRp.PurcAvgQtyOnInv,PRp.PurcAvgPriOnInv,-1,ivrows,line,sumpb,theprivsum,
               aProject,aItem,aGroup,aEMCode,aVATCode,aSalesAcc,aItemType,aFinished,acnt,
               aEvDat,aRowNo,alinecnt,PRb.NoFixedPrUntilStarted,PRb.InvoiceasFixedBudget,projectheaderf,vwipcost,awipacc,awipbalacc,awipacccnt,
               aupdTBIVr,aupdacnt);

  if (PRp.ItemPerDay!=0) then begin
    ResortProjInv(IVp,aEvDat,aRowNo,alinecnt);
  end;
  if (realinv) then begin
    if (PRp.PeriodOnInv!=0) then begin
      if (FindFirstDate(aEvDat,alinecnt,firstd)) then begin
        FindLastDate(aEvDat,alinecnt,lastd);
        ClearRow(IVp,IVrw,1);
        IVrw.Spec = USetStr(1169) & firstd & " - " & lastd;
        if (MatRowCnt(IVp)>1) then begin
          MatRowInsert(IVp,1,IVrw);
        end;
      end;
    end;
  end;

  if (RepSpec.flags[7]==0) then begin
      rwcnt = MatRowCnt(IVp);
      t = PRp.DownPaySent + PRp.DownPayRedcd;
      t = -t;
      if (t!=0) then begin    
        ivrwcnt = MatRowCnt(IVp);
        ClearRow(IVp,IVrw,5);
        IVrw.Sum = t;
        GetItemSalesAcc(PRb.Item,IVp.ExportFlag,tstr);
        IVrw.SalesAcc = tstr;
        GetItemVATCode(PRb.Item,IVp.ExportFlag,tstr,true);
        IVrw.VATCode = tstr;
        if (nonblank(IVp.CustVATCode)) then begin
          IVrw.VATCode = IVp.CustVATCode;
        end;
        IVrw.Spec = USetStr(4847);
        MatRowPut(IVp,ivrwcnt,IVrw);
        IVSumup(IVp,true);                          
        if (theprivsum>=0) then begin
          tc = -theprivsum;
          if (tc<t) then begin
            tc = t; 
          end;
          IVrw.Sum = tc;
          PRp.DownPayRedcd = PRp.DownPayRedcd + tc;
          IVrw.CuAccCode = PRp.Code;//We need to know it for group invocing
        end;
        MatRowPut(IVp,ivrwcnt,IVrw);
      end;
  end;
  //think about wip
LMakeProjectInvoice2:;
  rwcnt = MatRowCnt(IVp);
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(IVp,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypeNormal) then begin
      if (nonblank(IVrw.Quant) and IVrw.Quant==0) then begin
        MatRowDelete(IVp,i);
        i = i - 1;
        rwcnt = rwcnt - 1;
      end;
    end;
  end;
  
  IVSumup(IVp,true);

  if (true) then begin    
    BlockLoad(PRAb);
    rwcnt = MatRowCnt(PRp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PRp,i,PRrw);
      if (PRrw.RowType==1) then begin
        testf = true;
        if (nonblank(PRrw.PRStage)) then begin
          if (PRrw.PRStage!=PRp.PRStage) then begin
            testf = false;
          end;
        end;
        if (testf) then begin
          ivrwcnt = MatRowCnt(IVp);
          ClearRow(IVp,IVrw,kInvoiceRowTypeRetention);
          IVrw.Spec = USetStr(4897);
          if (reportf) then begin
            tv2 = -(PRp.RetSum - PRp.RetInvd);
          end else begin
            if (IVp.InclVAT!=0) then begin
              MulM4ProcVal(StringToVal(PRrw.ValStr,M4Val),IVp.Sum1-IVp.Sum3,tv2);
            end else begin
              MulM4ProcVal(StringToVal(PRrw.ValStr,M4Val),IVp.Sum1,tv2);
            end;
          end;
          IVrw.Sum = -tv2;
          if (PRp.MaxRetSum>0) then begin
            if (tv2>(PRp.MaxRetSum-(PRp.RetSum + PRp.RetInvd))) then begin
              IVrw.Sum = -(PRp.MaxRetSum - (PRp.RetSum + PRp.RetInvd) );
            end;
          end;
          IVrw.SalesAcc = PRAb.RetentionAcc;
          IVrw.VATCode = PRAb.RetentionVATCode;
          IVrw.CuAccCode = PRp.Code;//We need to know it for group invocing
          MatRowPut(IVp,ivrwcnt,IVrw);          
        end;
      end;
    end;
    IVSumup(IVp,true);
  end;
  testf = false;
  if (nonblank(CUr.InvoiceToCode)) then begin
    CUr.Code = CUr.InvoiceToCode;
    if (ReadFirstMain(CUr,1,true)) then begin
    end;
  end;
  IVp.InvCountry = CUr.CountryCode;  
  //TODO: 7.1: Paste the Country Name in InvCountryName Fields
  if (PRp.CurncyCode!=CUr.CurncyCode) then begin
    testf = true;
  end;
  if (testf) then begin
    i = TypeOfCurncy(CUr.CurncyCode,oldstyle);
    if ((i==0) or (i==2)) then begin
      IVp.CurncyCode = CUr.CurncyCode;
      RecalcProjectInvoice(IVp,PRp.CurncyCode);
    end;
  end;
  RETURN;
END;

function Boolean SavePrInvoice(record IVVc IVp,string branchid)
BEGIN
  row IVVc IVrw;
  Integer rwcnt,i;
  Boolean res;
  record CUVc CUr;
  record QTVc QTr;
  
  CUr.Code = IVp.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin end;
  rwcnt = MatRowCnt(IVp);
  if (rwcnt==0) then begin goto LSavePrInvoice; end;
//  IVp.OfficialSerNr = FindNextLegalSerNr(IVp,CUr.Classification);                  //POSN
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (((IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent)) and (IVrw.Sum!=0)) then begin
      res = true;
      goto LSavePrInvoice;
    end;
  end;
LSavePrInvoice:;
  if (res) then begin
    AddPerceptionTaxesRows_IVVc(IVp);
    AddWithholdingTaxesRows_IVVc(IVp);
    IVSumup(IVp,true);
    if (HasLocalization("ARG")) then begin 
      IVp.BranchID = branchid;
      if (blank(IVp.BranchID) and IVp.QTNr>0) then begin
        QTr.SerNr = IVp.QTNr;
        if (ReadFirstMain(QTr,1,true)) then begin
          IVp.BranchID = QTr.BranchID;
        end;
      end;
    end;
  end;
  SavePrInvoice = res;
  RETURN;
END;

updating procedure AddPRIVWIPs(string prcode,record IVVc IVr,vector val vwipcost,Array string awipacc,Array string awipbalacc,var Integer awipacccnt)
begin
  Integer i;
  record PRIVWIPVc PRIVWIPr;

  if (IVr.SerNr!=0) then begin
    for (i=0;i<awipacccnt;i=i+1) begin
      if (nonblank(awipacc[i])) and (vwipcost[awipacc[i]]!=0) then begin
        RecordClear(PRIVWIPr);
        PRIVWIPr.InvNr = IVr.SerNr;
        PRIVWIPr.PRCode = prcode;
        PRIVWIPr.WIPAcc = awipacc[i];
        PRIVWIPr.WIPBalAcc = awipbalacc[i];
        PRIVWIPr.Sum = vwipcost[awipacc[i]];
        PRIVWIPr.SerNr = NextSerNr("PRIVWIPVc",IVr.TransDate,-1,false,"");
        if (PRIVWIPr.SerNr!=0) then begin
          if (RecordStore(PRIVWIPr,false)) then begin end;        
        end;
      end;    
    end;  
  end;
  awipacccnt = 0;
  return;
end;

updating procedure UpdateProjectTransactions(Array record TBIVVc aupdTBIVr,var Integer aupdacnt,LongInt InvNr,Date TransDate)
begin
  Integer i;
  record TBIVVc oldTBIVr;
  record TBIVVc TBIVr;
  
  for (i=0;i<aupdacnt;i=i+1) begin
    RecordCopy(oldTBIVr,aupdTBIVr[i]);
    RecordCopy(TBIVr,aupdTBIVr[i]);
    TBIVr.Invoice = InvNr;
    TBIVr.InvDate = TransDate;
    UpdateOrderFromProj(TBIVr,false);
    if (RecordUpdate(oldTBIVr,TBIVr,true)==0) then begin
    end;
  end;
  aupdacnt = 0;
  return;
end;

global
updating procedure GenProInvoices(var record RcVc RepSpec,Boolean maintf)
BEGIN
  record PRVc PRr;
  record IVVc IVr;
  record IVVc IV2r;
  record IVVc fakeIVr;
  string 255 frcc,tocc;
  Boolean found;
  string 255 oldcust;
  Boolean oldcustf;
  Boolean testf;
  val t;
  record XSVc XSr;
  string 20 keystr;
  Boolean asBudgeted;
  Integer flushcnt;
  Boolean budfound;
  record TBBUVc oldTBBUr,TBBUr;
  vector val vwipcost;
  Array string 10 awipacc;
  Array string 10 awipbalacc;
  Integer awipacccnt;
  Array record TBIVVc aupdTBIVr;
  Integer i,aupdacnt;

  Array record TBBUVc aTBBUr;
  Array record TBBUVc aoldTBBUr;
  Integer aupdtbbucnt;
  
  frcc = FirstInRange(RepSpec.f1,20);
  tocc = LastInRange(RepSpec.f1,20);
  PRr.CustCode = frcc;
  keystr = "CustCode";
  if (nonblank(RepSpec.f2)) then begin
    keystr = "Code";
    PRr.Code = RepSpec.f2;
    PRr.CustCode = "";
  end;
  found = true;
  while (LoopKey(keystr,PRr,1,found)) begin
    if (found) then begin
      if (nonblank(RepSpec.f2)) then begin
        if (RepSpec.f2!=PRr.Code) then begin found = false; end;
      end else begin
        if ((nonblank(tocc)) and (PRr.CustCode>tocc)) then begin found = false; end;
      end;
    end;
    if (found) then begin
      testf = true;
      if (PRr.StopInvoicing!=0) then begin testf = false; end;
      if (PRr.Terminated==1) then begin testf = false; end;//to match report
//      if (nonblankstrp(RepSpec.f2)) then begin
//        if ((nonblankstrp(frcc)) and (strpcomp(PRr.CustCode,frcc)<0)) then testf = false;
//        if ((nonblankstrp(tocc)) and (strpcomp(PRr.CustCode,tocc)>0)) then testf = false;
//      end;
      if ((nonblank(RepSpec.f2)) and (RepSpec.f2!=PRr.Code)) then begin testf = false; end;
      if (nonblank(RepSpec.FirstAcc) and (RepSpec.FirstAcc!=PRr.PRClass)) then begin testf = false; end;
      if (nonblank(RepSpec.LastAcc) and (RepSpec.LastAcc!=PRr.Leader)) then begin testf = false; end;
      if (nonblankdate(PRr.NoInvBefore)) then begin
        if (blankdate(RepSpec.d1)) then begin
          if (PRr.NoInvBefore>CurrentDate) then begin testf = false; end;
        end else begin
          if (PRr.NoInvBefore>RepSpec.d1) then begin testf = false; end;
        end;
      end;
      if (testf) then begin
        if (RepSpec.flags[5]!=0) then begin          
          MakeProjectInvoice2(RepSpec,PRr,IV2r,XSr,false,false,false,false,false,t,t,t,t,t,budfound,oldTBBUr,TBBUr,vwipcost,awipacc,awipbalacc,awipacccnt,aupdTBIVr,aupdacnt);
          aoldTBBUr[aupdtbbucnt] = oldTBBUr;
          aTBBUr[aupdtbbucnt] = TBBUr;
          aupdtbbucnt = aupdtbbucnt + 1;
          if ((blank(IV2r.Sum4)) and (MatRowCnt(IV2r)<1)) then begin testf = false; end;
        end;
      end;
      if (RepSpec.flags[10]==1) then begin
        if (PRr.Terminated!=0) then begin
          testf = false;
        end;
      end;
      if (RepSpec.flags[10]==2) then begin
        if (PRr.Terminated!=2) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        oldcustf = true;
        if (oldcust!=PRr.CustCode) then begin oldcustf = false; end;
        if (RepSpec.flags[5]==0) then begin oldcustf = false; end;
        if (RepSpec.flags[20]==1) then begin asBudgeted = true; end;
        if (oldcustf==false) then begin
          if (SavePrInvoice(IVr,RepSpec.f6)) then begin          
            if (RecordStore(IVr,true)) then begin
              UpdateProjectTransactions(aupdTBIVr,aupdacnt,IVr.SerNr,IVr.TransDate); 
              if (budfound) then begin
                if (RepSpec.flags[5]!=0) then begin  
                  for (i=0;i<aupdtbbucnt;i=i+1) begin
                    if (RecordUpdate(aoldTBBUr[i],aTBBUr[i],true)==0) then begin
                    end;
                  end;
                  aupdtbbucnt = 0;
                end else begin
                  if (RecordUpdate(oldTBBUr,TBBUr,true)==0) then begin
                  end;
                end;
              end;
            end;
            XSr.FileName = "IVVc";
            XSr.SerNr = IVr.SerNr;
            if (MatRowCnt(XSr)>0) then begin
              if (RecordInsert(XSr,false)) then begin end;
            end;
            AddPRIVWIPs(PRr.Code,IVr,vwipcost,awipacc,awipbalacc,awipacccnt);
            RecordNew(XSr); 
            UpdatePRFromIV(IVr,true,fakeIVr,false);
          end;
        end;
        MakeProjectInvoice2(RepSpec,PRr,IVr,XSr,true,false,asBudgeted,oldcustf,false,t,t,t,t,t,budfound,oldTBBUr,TBBUr,vwipcost,awipacc,awipbalacc,awipacccnt,aupdTBIVr,aupdacnt);
        oldcust = PRr.CustCode;
      end;
    end;
    UserTrace(PRr.Code,M4Code);        
  end;
  if (SavePrInvoice(IVr,RepSpec.f6)) then begin
    if (RecordStore(IVr,true)) then begin 
      UpdateProjectTransactions(aupdTBIVr,aupdacnt,IVr.SerNr,IVr.TransDate); 
      if (budfound) then begin
        if (RepSpec.flags[5]!=0) then begin  
          for (i=0;i<aupdtbbucnt;i=i+1) begin
            if (RecordUpdate(aoldTBBUr[i],aTBBUr[i],true)==0) then begin
            end;
          end;
        end else begin
          if (RecordUpdate(oldTBBUr,TBBUr,true)==0) then begin
          end;
        end;
      end;
    end;
    XSr.FileName = "IVVc";
    XSr.SerNr = IVr.SerNr;
    if (MatRowCnt(XSr)>0) then begin
      if (RecordInsert(XSr,false)) then begin end;
    end;
    AddPRIVWIPs(PRr.Code,IVr,vwipcost,awipacc,awipbalacc,awipacccnt);
    RecordNew(XSr); 
    RepSpec.LastVer = IVr.SerNr;
  end;
  RETURN;
END;

updating procedure GenProDownpaymentInvoices(record RcVc RepSpec)
BEGIN
  record IVVc IVr;
  record PRVc PRr;
  Boolean found,testf;
  string 20 frcc,tocc;
  string 20 keystr;
  Integer keys;
  Integer flushcnt;
  
  frcc = FirstInRange(RepSpec.f1,20);
  tocc = LastInRange(RepSpec.f1,20);
  if (nonblank(RepSpec.f2)) then begin
    PRr.Code = RepSpec.f2;
    keystr = "Code";
    keys = 1;
  end else begin
    PRr.CustCode = frcc;
    keystr = "CustCode";
    keys = 1;
  end;
  found = true;
  while (LoopKey(keystr,PRr,keys,found)) begin
    if (nonblank(RepSpec.f2)) then begin
      if (RepSpec.f2!=PRr.Code) then begin found = false; end;
    end else begin
      if ((nonblank(tocc)) and (PRr.CustCode>tocc)) then begin found = false; end;
    end;
    if (found) then begin
      testf = true;
      if (PRr.StopInvoicing!=0) then begin testf = false; end;
      if ((nonblank(RepSpec.f2)) and (RepSpec.f2!=PRr.Code)) then begin testf = false; end;
      if (nonblank(RepSpec.FirstAcc) and (RepSpec.FirstAcc!=PRr.PRClass)) then begin testf = false; end;
      if (nonblank(RepSpec.LastAcc) and (RepSpec.LastAcc!=PRr.Leader)) then begin testf = false; end;
      if (nonblankdate(PRr.NoInvBefore)) then begin
        if (PRr.NoInvBefore>CurrentDate) then begin testf = false; end;
      end;
      if (testf) then begin
        RecordNew(IVr);
        if (PRDownPayInvoice(RepSpec,IVr,PRr)==0) then begin
        end;
      end;
    end;
    UserTrace(PRr.Code,M4Code);        
  end;
  RETURN;
END;  

global
updating procedure ProInvMn(record RcVc RepSpec)
BEGIN
  switch (RepSpec.ArtMode) begin
    case 0: GenProInvoices(RepSpec,true);
    case 1: GenProDownpaymentInvoices(RepSpec);
  end;
  RETURN;
END;

