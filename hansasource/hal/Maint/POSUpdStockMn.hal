external function Boolean SDVc_ExplodeRecepy(record INVc,val,record SDVc,string,Integer);
external function roundmode SetRoundModeD(Integer);
external procedure FindStockValueInclStockReserv(LongInt,string,string,string,var record ItemStatusVc,var val);
external function string 60 AddObjectToObjectList(string,string);
external procedure ReadLastINSer(string,var string);
external function string 255 NextSerialNumber(string,string,record SerNrTrackBlock);
external function string 255 FindINObjects(string,string);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure SDSumUp(var record SDVc);
external function Boolean GetFirstPurchaseItem2(string,string,string,var record PIVc);
external procedure CalculatePURowSum(val,val,string,var val,val,
                                     val,val,val,val,val,
                                     string,var val,Boolean,string,
                                     val,val,val,val,val);
external procedure GetINCostAcc(record INVc,var string);

external procedure PUSumUp(var record PUVc);
external procedure PUCalcCostPrice(string,val,Integer,Integer,string,string,
                          val,val,val,val,val,
                          val,val,val,val,val,val,
                          string,var val,val,var val,string,Integer);
external function Boolean SDVc_PasteQty(var record SDVc,Integer);
external function Boolean SDVc_PasteArtCode(var record SDVc,Integer,Integer,var string,var string);
external function Integer PUVc_PasteQuant(var record PUVc,Integer);
external function Boolean PUVc_PasteArtCode(var record PUVc,Integer,var string,var string);
external function Boolean GetCOSAcc(string,string,string,record AccBlock,record INVc,Integer,Boolean,Integer,var string,var string);

forward updating procedure POSUpdateAddtoPU(record RcVc,var record PUVc,LongInt,string,string,record INVc,string,val,string,record AccBlock,record CostAccBlock,var vector string,var vector val);
            
updating procedure UpdateIVsWithStockRecordNr(string fromfilename,LongInt transnr)
begin
  record TempVc Tmpr;
  Boolean found;
  record IVCashVc oldIVCashr;
  record IVCashVc IVCashr;
  
  found = true;
  Tmpr.FromFileName = fromfilename;
  while (LoopKey("FromFileName",Tmpr,1,found)) begin
    if (Tmpr.FromFileName!=fromfilename) then begin found = false; end;
    if (found) then begin
      IVCashr.SerNr = Tmpr.TransNr;
      if (ReadFirstMain(IVCashr,1,true)) then begin
        oldIVCashr = IVCashr;
        switch (Tmpr.FromFileName) begin
          case "SDVc": IVCashr.SDNr = transnr;
          case "PUVc": IVCashr.PUNr = transnr;
        end;
        RecordUpdate(oldIVCashr,IVCashr,false);
      end;
      RecordDelete(Tmpr);
      StepBack(Tmpr);
    end;
  end;
  return;
end;
                          
updating procedure SaveSD(record RcVc RepSpec,var record SDVc SDr)
begin
  record SDVc OldSDr;
  string 10 Location;
  
  if (MatRowCnt(SDr)>0) then begin
    Location = SDr.Location;
    SDr.TransDate = CurrentDate;
    SDr.SerNr = NextSerNr("SDVc",SDr.TransDate,-1,false,"");  
    SDr.Comment = USetStr(17810) & " ";
    SDr.Comment = SDr.Comment & USetStr(17811) & " ";
    SDr.Comment = SDr.Comment & RepSpec.FirstAcc & " ";
    SDr.Comment = SDr.Comment & USetStr(17812) & " ";
    SDr.Comment = SDr.Comment & RepSpec.sStartDate & "-";
    SDr.Comment = SDr.Comment & RepSpec.sEndDate;
    SDSumUp(SDr);
    if (RecordStore(SDr,false)) then begin
      UpdateIVsWithStockRecordNr("SDVc",SDr.SerNr);
      if (RepSpec.flags[1]!=0) then begin
        RecordCopy(OldSDr,SDr);
        SDr.OKFlag = 1;
        RecordUpdate(OldSDr,SDr,true);
      end;
    end;
    RecordNew(SDr);
    SDr.Location = Location;
  end;
  
  return;
end;

updating procedure SavePU(record RcVc RepSpec,var record PUVc PUr)
begin
  record PUVc OldPUr;
  string 10 Location;
  
  if (MatRowCnt(PUr)>0) then begin
    Location = PUr.Location;
    PUr.TransDate = RepSpec.RegDate;
    PUr.SerNr = NextSerNr("PUVc",PUr.TransDate,-1,false,"");  
    PUr.Comment = USetStr(17810) & " ";
    PUr.Comment = PUr.Comment & USetStr(17811) & " ";
    PUr.Comment = PUr.Comment & RepSpec.FirstAcc & " ";
    PUr.Comment = PUr.Comment & USetStr(17812) & " ";
    PUr.Comment = PUr.Comment & RepSpec.sStartDate & "-";
    PUr.Comment = PUr.Comment & RepSpec.sEndDate;
    if (RecordStore(PUr,false)) then begin
      UpdateIVsWithStockRecordNr("PUVc",PUr.SerNr);
      if (RepSpec.flags[0]!=0) then begin
        RecordCopy(OldPUr,PUr);
        PUr.OKFlag = 1;
        RecordUpdate(OldPUr,PUr,true);
      end;
    end;  
    RecordNew(PUr);
    PUr.Location = Location;
  end;
  
  return;
end;

procedure SDPasteArtCode(var record SDVc SDr,record INVc INr,Integer rwcnt)
begin
  row SDVc SDrw;
  string 10 costacc;
  
  if (true) then begin
    ClearRow(SDr,SDrw,1);
    SDrw.ArtCode = INr.Code;
    if ((INr.ItemType==2) and (nonblank(INr.Recepy))) then begin
      SDrw.Recepy = INr.Recepy;
    end else begin
      SDrw.Recepy = "";
    end;  
    SDrw.Coefficient = INr.UnitCoefficient;
    SDrw.ArtCode = INr.Code;
    SDrw.Spec = INr.Name;
    SDrw.BasePrice = INr.UPrice1;
    SDrw.Objects = FindINObjects(INr.Objects,INr.Group);
    GetINCostAcc(INr,costacc);
    SDrw.CostAcc = costacc;
    MatRowPut(SDr,rwcnt,SDrw);
  end;
  return;            
end;

procedure SDPasteQty(var record SDVc SDr,record INVc INr,Integer rwcnt,val diff)
begin
  row SDVc SDrw;
  
  MatRowGet(SDr,rwcnt,SDrw);
  SDrw.Qty = diff;
  if ((INr.ExplodeRec!=0) and (nonblank(SDrw.Recepy))) then begin
    MatRowGet(SDr,rwcnt,SDrw);
    SDrw.Recepy = "";
  end;              
  MatRowPut(SDr,rwcnt,SDrw);
  return;            
end;
            
function Boolean AddToExistingSDRow(var record SDVc SDr,record INVc INr,string artcode,string costacc,val quant,string serialnr)
begin
  Boolean res;
  Integer i,rwcnt;
  row SDVc SDrw;
  Boolean testf;
  
  if (nonblank(serialnr)) then begin
    res = false;
    goto LAddToExistingSDRow;
  end;
  if (INr.SerNrf==2) and (INr.DonotRequireBatchNrOnIVCash!=0) then begin
    goto LAddToExistingSDRow;
  end;
  rwcnt = MatRowCnt(SDr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SDr,i,SDrw);
    testf = true;
    if (SDrw.ArtCode!=artcode) then begin testf = false; end;
    if (SDrw.CostAcc!=costacc) then begin testf = false; end;
    if (testf) then begin
      SDrw.Qty = SDrw.Qty + quant;
      MatRowPut(SDr,i,SDrw);
      SDVc_PasteQty(SDr,i);
      res = true;
      goto LAddToExistingSDRow;
    end;
  end;
LAddToExistingSDRow:;  
  AddToExistingSDRow = res;
  return;
end;
    
function Boolean AddBatchNrTrackedItemToSDRow(var record SDVc SDr,string artcode,string serialnr,string costacc,val qty)
begin
  Boolean res;
  Integer i,rwcnt;
  row SDVc SDrw;
  
  rwcnt = MatRowCnt(SDr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SDr,i,SDrw);
    if ((artcode==SDrw.ArtCode) and (serialnr==SDrw.SerialNr) and (costacc==SDrw.CostAcc)) then begin
      SDrw.Qty = SDrw.Qty + qty;
      MatRowPut(SDr,i,SDrw);
      res = true;
    end;
  end;
  AddBatchNrTrackedItemToSDRow = res;
  return;
end;
            
updating procedure POSUpdStockAddtoSD(record RcVc RepSpec,Boolean splitf,LongInt SDNr,var record SDVc SDr,string custcode,string objects,record INVc INr,string artcode,val quant,string serialnr,record AccBlock ARb,record CostAccBlock CAb,
                                      var vector string vartcodelastsdserialnr,var vector val vqtylastpuserialnr,var record PUVc PUr,var vector string vartcodelastpuserialnr,var vector val vqtylastpuserialnr)
begin
  Integer rownr;
  row SDVc SDrw;
  string 255 costacc,tstr;
  record SerBalVc SBr;
  Boolean found,testf;
  val remqty;
  record SplitINVc SplitINr;
  record ItemStatusVc ISr;
  val prevsd,prevpu,stockreservq,splitq;
  Integer j,t;
  row SDVc SD2rw;
  row PUVc PUrw;
  record SDVc recSDr;
  row SDVc recSDrw;
  Integer i,rwcnt;
  
  if (SDNr>0) then begin
    goto LPOSUpdStockAddtoSD;
  end;
  rownr = MatRowCnt(SDr);
  if (splitf) then begin
    if (INr.SerNrf==0) then begin
      SplitINr.ToArtCode = artcode;
      if (ReadFirstKey("ToArtCode",SplitINr,1,true)) then begin
        prevsd = quant;

        for (j=0;j<rownr;j=j+1) begin
          MatRowGet(SDr,j,SD2rw);
          testf = true;
          if (SD2rw.ArtCode!=SDrw.ArtCode) then begin testf = false; end;
/*          
          if (INr.SerNrf!=0) then begin
            if (SD2rw.SerialNr!=SDrw.SerialNr) then begin testf = false; end;
          end;
*/          
          if (testf) then begin
            prevsd = prevsd + SD2rw.Qty;
          end;
        end;
        for (j=0;j<MatRowCnt(PUr);j=j+1) begin
          MatRowGet(PUr,j,PUrw);
          testf = true;
          if (PUrw.ArtCode!=SDrw.ArtCode) then begin testf = false; end;
/*          
          if (INr.SerNrf!=0) then begin
            if (SD2rw.SerialNr!=SDrw.SerialNr) then begin testf = false; end;
          end;
*/          
          if (testf) then begin
            prevpu = prevpu + PUrw.Quant;
          end;
        end;

        FindStockValueInclStockReserv(-1,artcode,"",SDr.Location,ISr,stockreservq);
        if ((ISr.Instock+prevpu)<(prevsd+stockreservq)) then begin
          splitq = Round((Quant/SplitINr.Factor)+0.49999,SetRoundModeD(0));
          POSUpdStockAddtoSD(RepSpec,true,SDNr,SDr,custcode,objects,INr,SplitINr.FromArtCode,splitq,"",ARb,CAb,vartcodelastsdserialnr,vqtylastpuserialnr,PUr,vartcodelastpuserialnr,vqtylastpuserialnr);
          POSUpdateAddtoPU(RepSpec,PUr,-1,custcode,objects,INr,artcode,SplitINr.Factor*splitq,"",ARb,CAb,vartcodelastpuserialnr,vqtylastpuserialnr);
        end;
      end;
    end;
  end;
  rownr = MatRowCnt(SDr);

  if (rownr>=200) then begin
    SaveSD(RepSpec,SDr);
    rownr = 0;
  end;
  GetCOSAcc("",custcode,SDr.Location,ARb,INr,CAb.ItemGroupAccounts,false,0,costacc,tstr);
  if (AddToExistingSDRow(SDr,INr,artcode,costacc,quant,serialnr)==false) then begin
    if (blank(serialnr)) then begin
      if (INr.SerNrf==2) and (INr.DonotRequireBatchNrOnIVCash!=0) then begin
        remqty = quant;
        SBr.Item = INr.Code;
        SBr.Location = SDr.Location;
        SBr.Serial = vartcodelastsdserialnr[INr.Code];
        found = true;
        while (LoopKey("MainKey",SBr,2,found)) begin
          if (SBr.Item!=INr.Code) then begin found = false; end;
          if (SBr.Location!=SDr.Location) then begin found = false; end;
          if (remqty<=0) then begin found = false; end;
          if (found) then begin
            if (SBr.Quant!=0) then begin
              testf = true;
              if (SBr.Serial<vartcodelastsdserialnr[INr.Code]) then begin testf = false; end;
              if (SBr.Quant<=vqtylastpuserialnr[INr.Code & ":" & SBr.Serial]) then begin testf = false; end;
              if (testf) then begin
                if (remqty>=(SBr.Quant-vqtylastpuserialnr[INr.Code & ":" & SBr.Serial])) then begin
                  SDrw.Qty = SBr.Quant - vqtylastpuserialnr[INr.Code & ":" & SBr.Serial];
                end else begin
                  SDrw.Qty = remqty;
                end;
                if (AddBatchNrTrackedItemToSDRow(SDr,artcode,SBr.Serial,costacc,SDrw.Qty)==false) then begin       
                  ClearRow(SDr,SDrw,1);
                  SDrw.ArtCode = artcode;
                  SDrw.SerialNr = SBr.Serial;
                  MatRowPut(SDr,rownr,SDrw);
                  SDVc_PasteArtCode(SDr,rownr,1,tstr,tstr);
                  MatRowGet(SDr,rownr,SDrw);
                  SDrw.CostAcc = costacc;
                  SDrw.Objects = AddObjectToObjectList(SDrw.Objects,objects);        
                  if (remqty>=(SBr.Quant-vqtylastpuserialnr[INr.Code])) then begin
                    SDrw.Qty = SBr.Quant - vqtylastpuserialnr[INr.Code];
                  end else begin
                    SDrw.Qty = remqty;
                  end;
                  MatRowPut(SDr,rownr,SDrw);
                  SDVc_PasteQty(SDr,rownr);
                end;
                rownr = MatRowCnt(SDr);
                remqty = remqty - SDrw.Qty;
              end;
              vartcodelastsdserialnr[INr.Code] = SBr.Serial;
              vqtylastpuserialnr[INr.Code & ":" & SBr.Serial] = vqtylastpuserialnr[INr.Code & ":" & SBr.Serial] + SDrw.Qty;
            end;
          end;
        end;
        if (remqty>0) then begin
          ClearRow(SDr,SDrw,1);
          SDrw.ArtCode = artcode;
          SDrw.SerialNr = "";
          MatRowPut(SDr,rownr,SDrw);
          SDVc_PasteArtCode(SDr,rownr,1,tstr,tstr);
          MatRowGet(SDr,rownr,SDrw);
          SDrw.CostAcc = costacc;
          SDrw.Objects = AddObjectToObjectList(SDrw.Objects,objects);        
          SDrw.Qty = remqty;
          MatRowPut(SDr,rownr,SDrw);
          SDVc_PasteQty(SDr,rownr);
        end;
      end else begin
        if (INr.ItemType==kItemTypeStructured) then begin
          RecordClear(recSDr);
          if (SDVc_ExplodeRecepy(INr,quant,recSDr,INr.Recepy,0)) then begin
            rwcnt = MatRowCnt(recSDr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(recSDr,i,recSDrw);
              if (nonblank(recSDrw.ArtCode)) then begin
                ClearRow(SDr,SDrw,1);
                SDrw.ArtCode = recSDrw.ArtCode;
                SDrw.SerialNr = "";
                MatRowPut(SDr,rownr,SDrw);
                SDVc_PasteArtCode(SDr,rownr,1,tstr,tstr);
                MatRowGet(SDr,rownr,SDrw);
                SDrw.CostAcc = costacc;
                SDrw.Objects = AddObjectToObjectList(SDrw.Objects,objects);        
                SDrw.Qty = recSDrw.Qty;
                MatRowPut(SDr,rownr,SDrw);
                SDVc_PasteQty(SDr,rownr);
                rownr = rownr + 1;
              end;
            end;
          end;
        end else begin
          ClearRow(SDr,SDrw,1);
          SDrw.ArtCode = artcode;
          SDrw.SerialNr = serialnr;
          MatRowPut(SDr,rownr,SDrw);
          SDVc_PasteArtCode(SDr,rownr,1,tstr,tstr);
          MatRowGet(SDr,rownr,SDrw);
          SDrw.CostAcc = costacc;
          SDrw.Objects = AddObjectToObjectList(SDrw.Objects,objects);        
          SDrw.Qty = quant;
          MatRowPut(SDr,rownr,SDrw);
          SDVc_PasteQty(SDr,rownr);
        end;
      end;
    end else begin
      if (INr.ItemType==kItemTypeStructured) then begin
        RecordClear(recSDr);
        if (SDVc_ExplodeRecepy(INr,quant,recSDr,INr.Recepy,0)) then begin
          rwcnt = MatRowCnt(recSDr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(recSDr,i,recSDrw);
            if (nonblank(recSDrw.ArtCode)) then begin
              ClearRow(SDr,SDrw,1);
              SDrw.ArtCode = recSDrw.ArtCode;
              SDrw.SerialNr = "";
              MatRowPut(SDr,rownr,SDrw);
              SDVc_PasteArtCode(SDr,rownr,1,tstr,tstr);
              MatRowGet(SDr,rownr,SDrw);
              SDrw.CostAcc = costacc;
              SDrw.Objects = AddObjectToObjectList(SDrw.Objects,objects);        
              SDrw.Qty = recSDrw.Qty;
              MatRowPut(SDr,rownr,SDrw);
              SDVc_PasteQty(SDr,rownr);
              rownr = rownr + 1;
            end;
          end;
        end;
      end else begin
        ClearRow(SDr,SDrw,1);
        SDrw.ArtCode = artcode;
        SDrw.SerialNr = serialnr;
        MatRowPut(SDr,rownr,SDrw);
        SDVc_PasteArtCode(SDr,rownr,1,tstr,tstr);
        MatRowGet(SDr,rownr,SDrw);
        SDrw.CostAcc = costacc;
        SDrw.Objects = AddObjectToObjectList(SDrw.Objects,objects);        
        SDrw.Qty = quant;
        MatRowPut(SDr,rownr,SDrw);
        SDVc_PasteQty(SDr,rownr);
      end;
    end;
  end;
LPOSUpdStockAddtoSD:;
  return;
end;

procedure PUPasteArtCode(var record PUVc PUr,record INVc INr,Integer rwcnt)
begin
  record CostAccBlock CostAccRec;
  record PIVc PIr;
  row PUVc PUrw;
  val p;
  string 10 costacc;
  
  ClearRow(PUr,PUrw,1);  
  if (INr.ItemType==1) then begin
    if (GetFirstPurchaseItem2(PUrw.ArtCode,PUr.Location,PUr.VECode,PIr)) then begin
      PUrw.UPrice = PIr.PurPrice;
      p = PIr.PurPrice;
      if (PIr.PIFactor!=0) then begin
        p = p/PUrw.PIFactor;
      end;
      PUrw.PIFactor = PIr.PIFactor;
    end else begin
      PUrw.Spec = INr.Name;
      PUrw.UPrice = INr.InPrice;
      p = INr.InPrice;
      if (INr.PriceFactor!=0) then begin
        p = p/INr.PriceFactor;
      end;
      p = DivRateToBase1(PUr.CurncyCode,p,PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,DefaultCurRoundOff);
      PUrw.PIFactor = INr.PriceFactor;
    end;        
    PUrw.Coefficient = INr.UnitCoefficient;
    PUrw.ArtCode = INr.Code;
    PUrw.Spec = INr.Name;
    PUrw.Objects = FindINObjects(INr.Objects,INr.Group);
    PUrw.UPrice = p;
    PUrw.BasePrice = INr.UPrice1;
    PUrw.Extra = INr.ExtraCost;    
    GetINCostAcc(INr,costacc);
    PUrw.CredAcc = costacc;
    MatRowPut(PUr,rwcnt,PUrw);
  end;
  return;
end;

procedure PUPasteQty(var record PUVc PUr,record INVc INr,Integer rwcnt,val diff)
begin
  row PUVc PUrw;
  val p,c;
  
  MatRowGet(PUr,rwcnt,PUrw);
  PUrw.Quant = -diff;
  PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
                  PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                  PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                  PUrw.CustomsCost,p,PUrw.Quant,c,PUrw.VATCode,PUr.ExportFlag);

  PUrw.CostPrice = p;                                        
  PUrw.Sum = c;                                        
  CalculatePURowSum(PUrw.Quant,PUrw.UPrice,PUrw.Extra,c,PUrw.ShipCost,
                    PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                    PUrw.CustomsCost,p,false,PUr.CurncyCode,
                    PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2);
                                     
  PUrw.Sum = p;
  MatRowPut(PUr,rwcnt,PUrw);
  return;            
end;

function Boolean AddToExistingPURow(var record PUVc PUr,string artcode,string costacc,val quant,string serialnr)
begin
  Boolean res;
  Integer i,rwcnt;
  row PUVc PUrw;
  Boolean testf;
  
  if (nonblank(serialnr)) then begin
    res = false;
    goto LAddToExistingPURow;
  end;
  rwcnt = MatRowCnt(PUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PUr,i,PUrw);
    testf = true;
    if (PUrw.ArtCode!=artcode) then begin testf = false; end;
    if (PUrw.CostAcc!=costacc) then begin testf = false; end;
    if (PUrw.CostAcc!=costacc) then begin testf = false; end;
    if (testf) then begin
      PUrw.Quant = PUrw.Quant + quant;
      MatRowPut(PUr,i,PUrw);
      PUVc_PasteQuant(PUr,i);
      res = true;
      goto LAddToExistingPURow;
    end;
  end;
LAddToExistingPURow:;  
  AddToExistingPURow = res;
  return;
end;
            
updating procedure POSUpdateAddtoPU(record RcVc RepSpec,var record PUVc PUr,LongInt PUNr,string custcode,string objects,record INVc INr,string artcode,val quant,string serialnr,record AccBlock ARb,record CostAccBlock CAb,
                                    var vector string vartcodelastpuserialnr,var vector val vqtylastpuserialnr)
begin
  Integer rownr;
  row PUVc PUrw;
  string 255 tstr;
  string 255 costacc,nextserialnr;
  record SerNrTrackBlock SNrb;
  
  if (PUNr>0) then begin
    goto LPOSUpdateAddtoPU;
  end;
  rownr = MatRowCnt(PUr);
  if (rownr>=199) then begin
    SavePU(RepSpec,PUr);
    rownr = 0;
  end;
  GetCOSAcc("",custcode,PUr.Location,ARb,INr,CAb.ItemGroupAccounts,false,0,costacc,tstr);
  if (AddToExistingPURow(PUr,artcode,costacc,quant,serialnr)==false) then begin
    ClearRow(PUr,PUrw,1);
    PUrw.ArtCode = artcode;
    PUrw.SerialNr = serialnr;
    if (blank(PUrw.SerialNr)) then begin
      if (INr.SerNrf==2) and (INr.DonotRequireBatchNrOnIVCash!=0) then begin
        BlockLoad(SNrb);
        if (blank(vartcodelastpuserialnr[INr.Code])) then begin
          ReadLastINSer(INr.Code,nextserialnr);
        end;
        nextserialnr = NextSerialNumber(INr.Code,nextserialnr,SNrb);
        vartcodelastpuserialnr[INr.Code] = nextserialnr;
      end;
    end;
    MatRowPut(PUr,rownr,PUrw);
    PUVc_PasteArtCode(PUr,rownr,tstr,tstr);
    MatRowGet(PUr,rownr,PUrw);
    PUrw.Quant = quant;
    PUrw.CredAcc = costacc;
    PUrw.Objects = AddObjectToObjectList(PUrw.Objects,objects);        
    MatRowPut(PUr,rownr,PUrw);
    PUVc_PasteQuant(PUr,rownr);
  end;
LPOSUpdateAddtoPU:;
  return;
end;

updating procedure IVCashOneInvoice(record RcVc RepSpec,record IVCashVc IVCashr,var record SDVc SDr,var record PUVc PUr,var Integer flushcnt,record AccBlock ARb,record CostAccBlock CAb,
                                    var vector string vartcodelastsdserialnr,var vector string vartcodelastpuserialnr,var vector val vqtylastpuserialnr)
begin
  record INVc INr;
  Integer i,rwcnt;
  row IVCashVc IVCashrw;
  Boolean puf,sdf;
  record TempVc Tmpr;

  rwcnt = MatRowCnt(IVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    if (IVCashrw.ovst==0) then begin
    switch (IVCashrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkInvoiceRowTypeNormal;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal:;
        if (ReadFirstItem(IVCashrw.ArtCode,INr,true,true)) then begin
          if ((INr.ItemType==kItemTypeStocked) or INr.ItemType==kItemTypeStructured) then begin            
            if (IVCashrw.Quant<0) then begin
              POSUpdateAddtoPU(RepSpec,PUr,IVCashr.PUNr,IVCashr.CustCode,IVCashr.Objects,INr,IVCashrw.ArtCode,-IVCashrw.Quant,IVCashrw.SerialNr,ARb,CAb,vartcodelastpuserialnr,vqtylastpuserialnr);
              puf = true;
            end else begin
              if (IVCashr.InvType==kPOSInvoiceTypeCredit) then begin
                POSUpdateAddtoPU(RepSpec,PUr,IVCashr.PUNr,IVCashr.CustCode,IVCashr.Objects,INr,IVCashrw.ArtCode,IVCashrw.Quant,IVCashrw.SerialNr,ARb,CAb,vartcodelastpuserialnr,vqtylastpuserialnr);
                puf = true;
              end else begin
                POSUpdStockAddtoSD(RepSpec,true,IVCashr.SDNr,SDr,IVCashr.CustCode,IVCashr.Objects,INr,IVCashrw.ArtCode,IVCashrw.Quant,IVCashrw.SerialNr,ARb,CAb,vartcodelastsdserialnr,vqtylastpuserialnr,PUr,vartcodelastpuserialnr,vqtylastpuserialnr);
                sdf = true;
              end;
            end;
          end;
        end;
/*        
      case kInvoiceRowTypeVoid:
        if (ReadFirstItem(IVCashrw.ArtCode,INr,true,true)) then begin
          if (INr.ItemType==1) then begin
            if (IVCashrw.Quant>0) then begin
              POSUpdateAddtoPU(RepSpec,PUr,IVCashr.PUNr,IVCashr.CustCode,IVCashr.Objects,INr,IVCashrw.ArtCode,IVCashrw.Quant,IVCashrw.SerialNr,ARb,CAb,vartcodelastpuserialnr,vqtylastpuserialnr);
              puf = true;
            end else begin
              POSUpdStockAddtoSD(RepSpec,SDr,IVCashr.CustCode,IVCashr.Objects,INr,IVCashrw.ArtCode,-IVCashrw.Quant,IVCashrw.SerialNr,ARb,CAb,vartcodelastsdserialnr,vqtylastpuserialnr,PUr,vartcodelastpuserialnr,vqtylastpuserialnr);
              sdf = true;
            end;
          end;
        end;
*/        
      case kInvoiceRowTypeSplitItem:
        if (ReadFirstItem(IVCashrw.ArtCode,INr,true,true)) then begin
          if (INr.ItemType==kItemTypeStocked) then begin
            if (IVCashrw.Quant<0) then begin
              POSUpdateAddtoPU(RepSpec,PUr,IVCashr.PUNr,IVCashr.CustCode,IVCashr.Objects,INr,IVCashrw.ArtCode,-IVCashrw.Quant,IVCashrw.SerialNr,ARb,CAb,vartcodelastpuserialnr,vqtylastpuserialnr);
              puf = true;
            end else begin
              if (IVCashr.InvType==kPOSInvoiceTypeCredit) then begin
                POSUpdateAddtoPU(RepSpec,PUr,IVCashr.PUNr,IVCashr.CustCode,IVCashr.Objects,INr,IVCashrw.ArtCode,IVCashrw.Quant,IVCashrw.SerialNr,ARb,CAb,vartcodelastpuserialnr,vqtylastpuserialnr);
                puf = true;
              end else begin
                POSUpdStockAddtoSD(RepSpec,false,IVCashr.SDNr,SDr,IVCashr.CustCode,IVCashr.Objects,INr,IVCashrw.ArtCode,IVCashrw.Quant,IVCashrw.SerialNr,ARb,CAb,vartcodelastsdserialnr,vqtylastpuserialnr,PUr,vartcodelastpuserialnr,vqtylastpuserialnr);
                sdf = true;
              end;
            end;
          end;
        end;
        if (ReadFirstItem(IVCashrw.SplitArtCode,INr,true,true)) then begin
          if (INr.ItemType==1) then begin
            if (IVCashrw.SplitQuant<0) then begin
              POSUpdStockAddtoSD(RepSpec,false,IVCashr.SDNr,SDr,IVCashr.CustCode,IVCashr.Objects,INr,IVCashrw.SplitArtCode,-IVCashrw.SplitQuant,IVCashrw.SerialNr,ARb,CAb,vartcodelastsdserialnr,vqtylastpuserialnr,PUr,vartcodelastpuserialnr,vqtylastpuserialnr);
              sdf = true;
            end else begin
              POSUpdateAddtoPU(RepSpec,PUr,IVCashr.PUNr,IVCashr.CustCode,IVCashr.Objects,INr,IVCashrw.SplitArtCode,IVCashrw.SplitQuant,IVCashrw.SerialNr,ARb,CAb,vartcodelastpuserialnr,vqtylastpuserialnr);
              puf = true;
            end;
          end;
        end;
    end;
    end;
  end;
  if (puf and IVCashr.PUNr<0) then begin
    Tmpr.TransDate = CurrentDate;
    Tmpr.SerNr = NextSerNr("TempVc",Tmpr.TransDate,-1,false,"");  
    Tmpr.FileName = "IVCashVc";
    Tmpr.TransNr = IVCashr.SerNr;
    Tmpr.FromFileName = "PUVc";
    RecordStore(Tmpr,true);
  end;
  if (sdf and IVCashr.SDNr<0) then begin
    Tmpr.TransDate = CurrentDate;
    Tmpr.SerNr = NextSerNr("TempVc",Tmpr.TransDate,-1,false,"");  
    Tmpr.FileName = "IVCashVc";
    Tmpr.TransNr = IVCashr.SerNr;
    Tmpr.FromFileName = "SDVc";
    RecordStore(Tmpr,true);
  end;
  return;
end;

updating procedure IVCashOneLocation(record RcVc RepSpec,var Integer flushcnt,string Location,record AccBlock ARb,record CostAccBlock CAb)
begin
  record IVCashVc IVCashr;
  record SDVc SDr;
  record PUVc PUr;
  Boolean TrHs,testf;
  LongInt posnr;
  vector string 255 vartcodelastsdserialnr;
  vector string 255 vartcodelastpuserialnr;
  vector val vqtylastpuserialnr;
  
  RecordNew(SDr);
  RecordNew(PUr);
  posnr = FirstInRange(RepSpec.f1,20);
  SDr.Location = Location;
  PUr.Location = Location;
  ResetLoop(IVCashr);
  IVCashr.Location = Location;
  IVCashr.TransDate = RepSpec.sStartDate;
  TrHs = true;
  while (LoopKey("Location",IVCashr,2,TrHs)) begin
    if (IVCashr.Location!=Location) then begin
      TrHs = false;
    end;
    if (IVCashr.TransDate>RepSpec.sEndDate) then begin
      TrHs = false;
    end;
    testf = TrHs;
    if (RepSpec.FirstAcc!="*") then begin
      if (IVCashr.LocalMachineCode!=RepSpec.FirstAcc) then begin
        testf = false;
      end;
    end;
    if (IVCashr.OKFlag==0) then begin testf = false; end;
    if (IVCashr.Invalid!=0) then begin testf = false; end;
    if (nonblank(RepSpec.f1)) then begin
      if (IVCashr.SerNr!=posnr) then begin testf = false; end;
    end;
    if (testf) then begin
      IVCashOneInvoice(RepSpec,IVCashr,SDr,PUr,flushcnt,ARb,CAb,vartcodelastsdserialnr,vartcodelastpuserialnr,vqtylastpuserialnr);
    end;
  end;
  SaveSD(RepSpec,SDr);
  SavePU(RepSpec,PUr);
  
  return;
end;

updating procedure IVCashLoop(record RcVc RepSpec,var Integer flushcnt)
begin
  record LocationVc Locationr;
  record AccBlock ARb;
  record CostAccBlock CAb;
  
  BlockLoad(ARb);
  BlockLoad(CAb);
  IVCashOneLocation(RepSpec,flushcnt,"",ARb,CAb);
  while (LoopMain(Locationr,1,true)) begin
    IVCashOneLocation(RepSpec,flushcnt,Locationr.Code,ARb,CAb);
  end;
  
  return;
end;

updating procedure IVCashOneLocationClearStock(record RcVc RepSpec,string Location)
begin
  record IVCashVc IVCashr;
  record IVCashVc oldIVCashr;
  Boolean TrHs,testf;
  record SDVc SDr;
  record PUVc PUr;
  
  ResetLoop(IVCashr);
  IVCashr.Location = Location;
  IVCashr.TransDate = RepSpec.sStartDate;
  TrHs = true;
  while (LoopKey("Location",IVCashr,2,TrHs)) begin
    if (IVCashr.Location!=Location) then begin
      TrHs = false;
    end;
    if (IVCashr.TransDate>RepSpec.sEndDate) then begin
      TrHs = false;
    end;
    testf = TrHs;
    if (RepSpec.FirstAcc!="*") then begin
      if (IVCashr.LocalMachineCode!=RepSpec.FirstAcc) then begin
        testf = false;
      end;
    end;
    if (IVCashr.OKFlag==0) then begin testf = false; end;
    if (IVCashr.Invalid!=0) then begin testf = false; end;
    if (IVCashr.SDNr<0) and (IVCashr.PUNr<0) then begin testf = false; end;
    if (testf) then begin
      if (IVCashr.SDNr>0) then begin
        SDr.SerNr = IVCashr.SDNr;
        if (ReadFirstMain(SDr,1,true)) then begin
          if (SDr.OKFlag!=0) then begin testf = false; end;
        end;
      end;
      if (IVCashr.PUNr>0) then begin
        PUr.SerNr = IVCashr.PUNr;
        if (ReadFirstMain(PUr,1,true)) then begin
          if (PUr.OKFlag!=0) then begin testf = false; end;
        end;
      end;
    end;
    if (testf) then begin
      RecordCopy(oldIVCashr,IVCashr);
      IVCashr.SDNr = -1;
      IVCashr.PUNr = -1;
      RecordUpdate(oldIVCashr,IVCashr,false);
    end;
  end;
  return;
end;

updating procedure ClearStockLoop(record RcVc RepSpec)
begin
  record LocationVc Locationr;
  
  IVCashOneLocationClearStock(RepSpec,"");
  while (LoopMain(Locationr,1,true)) begin
    IVCashOneLocationClearStock(RepSpec,Locationr.Code);
  end;
  
  return;
end;

global
updating procedure POSClearStockMn(record RcVc RepSpec)
begin  
  RepSpec.RegDate = CurrentDate;
  ClearStockLoop(RepSpec);  
  return;
end;

global
updating procedure POSUpdStockMn(record RcVc RepSpec)
begin
  Integer flushcnt;
  
  RepSpec.RegDate = CurrentDate;
  switch (RepSpec.ArtMode) begin
    case 1:
      ClearStockLoop(RepSpec);  
    otherwise
      IVCashLoop(RepSpec,flushcnt);
  end;  
  return;
end;

