external function string 255 FindINObjects(string,string);
external procedure CheckFlush(var Integer,Integer);
external updating procedure SetPositionStatus(string,Integer);
external function string 60 FindSerialNrAtPosition(string,string);
external function Boolean StockMovVc_PasteQuant(var record StockMovVc,Integer);
external function Integer CheckPosition(string,string,Integer,val,val,val);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);

function Boolean FindItemAtPickArea(string pickarea,string artcode,string location)
BEGIN  
  Boolean res;
  record PISVc PISr;
  record PosVc Posr;
  Boolean TrHs,found,testf;

  TrHs = true;
  Posr.Location = location;
  Posr.LocArea = pickarea;
//  Posr.PickOrder = 999999;
  while (LoopKey("LocArea",Posr,2,TrHs)) begin
    if (Posr.Location!=location) then begin TrHs = false; end;
    if (Posr.LocArea!=pickarea) then begin TrHs = false; end;
    testf = true;
    if (Posr.Status!=0) then begin testf = false; end;    
    if (TrHs and testf) then begin
      ResetLoop(PISr);
      PISr.ArtCode = artcode;
      PISr.Position = Posr.Code;
      found = true;
      while (LoopKey("ArtCode",PISr,2,found)) begin
        if (PISr.ArtCode!=artcode) then begin found = false; end;
        if (PISr.Position!=Posr.Code) then begin found = false; end;
        if (found) then begin
          res = true;
          goto LFindItemAtPickArea;
        end;
      end;
    end;
  end;
LFindItemAtPickArea:;
  FindItemAtPickArea = res;  
  RETURN;
END;

global
function string 20 FindFreePositionInPickArea(string pickarea,record INVc INr,val qty,string location,Array string apos,var Integer acnt)
BEGIN
  string 20 res;
  Integer i;
  record PosVc Posr;
  Boolean TrHs,testf;
  val t;

  TrHs = true;
  Posr.Location = location;
  Posr.LocArea = pickarea;
//  Posr.PickOrder = 999999;
  while (LoopKey("LocArea",Posr,2,TrHs)) begin
    testf = true;
    if (Posr.Location!=location) then begin TrHs = false; end;
    if (Posr.LocArea!=pickarea) then begin TrHs = false; end;
    if (Posr.Status!=0) then begin testf = false; end;
    if (Posr.Closed!=0) then begin testf = false; end;    
    if (TrHs and testf) then begin
      for (i=0;i<acnt;i=i+1) begin
        if (apos[i]==Posr.Code) then begin
          goto LNEXTPOSITION;
        end;
      end;
      testf = false;
      i = CheckPosition(Posr.Code,location,1,INr.PalletWidth,INr.PalletHeight,INr.PalletDepth);      
      if (i==0) then begin testf = true; end;
      if (testf) then begin
        res = Posr.Code;
        apos[acnt] = Posr.Code;
        acnt = acnt + 1;
        goto LFindFreePositionInPickArea;
      end;      
LNEXTPOSITION:;
    end;
  end;
LFindFreePositionInPickArea:;
  FindFreePositionInPickArea = res;
  RETURN;
END;

global
function string 20 FindUsedPositionInPickAreaNoCheck(string pickarea,string location)
BEGIN
  string 20 res;
  record PosVc Posr;
  Boolean TrHs,testf;
  val t;

  TrHs = true;
  Posr.Location = location;
  Posr.LocArea = pickarea;
//  Posr.PickOrder = 999999;
  while (LoopKey("LocArea",Posr,2,TrHs)) begin
    testf = true;
    if (Posr.Location!=location) then begin TrHs = false; end;
    if (Posr.LocArea!=pickarea) then begin TrHs = false; end;
    if (Posr.Status!=1) then begin testf = false; end;
    if (TrHs and testf) then begin
      testf = true;
      if (testf) then begin
        res = Posr.Code;
        goto LFindUsedPositionInPickAreaNoCheck;
      end;      
    end;
  end;
LFindUsedPositionInPickAreaNoCheck:;
  FindUsedPositionInPickAreaNoCheck = res;
  RETURN;
END;

updating procedure SaveStockMov(var record StockMovVc StockMovr,string location,var Integer flushcnt)
BEGIN
  if (MatRowCnt(StockMovr)>0) then begin
    StockMovr.TransDate = CurrentDate;
    StockMovr.SerNr = NextSerNr("StockMovVc",StockMovr.TransDate,-1,false,"");
    StockMovr.ToForkLiftQue = 1;          
    if (StockMovr.SerNr>=0) then begin
      if (RecordStore(StockMovr,false)) then begin end;
      CheckFlush(flushcnt,10);
    end;
    RecordNew(StockMovr);    
    StockMovr.FrLocation = location;
    StockMovr.ToLocation = location;
  end;  
  RETURN;
END;

global
updating procedure MoveToPickAreaMn(record RcVc RepSpec)
BEGIN
  record StockMovVc StockMovr;
  row StockMovVc StockMovrw;
  Integer sorting;
  Boolean TrHs,testf;
  Integer i,rwcnt;
  record PISVc PISr;
  record PosVc Posr;
  record INVc INr;
  string 20 lastartcode,topos;
  Array string 20 apos;
  Integer acnt;
  string 20 frart,toart,pickarea;
  Integer flushcnt;
  record LocationVc Locr;
  Integer palletcnt;
  
  if (blank(RepSpec.f3)) then begin 
    goto LMoveToPickAreaMn; 
  end;
  palletcnt = 1;
  RecordNew(StockMovr);
  StockMovr.FrLocation = RepSpec.f3;
  StockMovr.ToLocation = RepSpec.f3;
  Locr.Code = StockMovr.ToLocation;
  ReadFirstMain(Locr,1,true);
  frart = FirstInRange(RepSpec.f1,20);
  toart = LastInRange(RepSpec.f1,20);
  TrHs = true;
  PISr.ArtCode = frart;
  while (LoopKey("ArtCode",PISr,1,TrHs)) begin
    if (nonblank(RepSpec.f1)) then begin
      if (PISr.ArtCode>toart) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      testf = true;
      if (PISr.LeftQty==0) then begin testf = false; end;
      if (nonblank(RepSpec.f2)) then begin
        if (PISr.Position!=RepSpec.f2) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (PISr.Location!=RepSpec.f3) then begin testf = false; end;
      end;
      if (nonblank(lastartcode)) then begin
        if (PISr.ArtCode==lastartcode) then begin 
          if (palletcnt>INr.PalletsInPickArea) then begin
            testf = false; 
          end;
        end else begin
          palletcnt = 1;
        end;
      end;
      if (testf) then begin        
        Posr.Code = PISr.Position;
        if (ReadFirstMain(Posr,1,true)==false) then begin testf = false; end;
        if (ReadFirstItem(PISr.ArtCode,INr,true,true)) then begin end;
        pickarea = INr.PickArea;
        if (blank(pickarea)) then begin pickarea = Locr.WHMPickArea; end;
        if (blank(pickarea)) then begin testf = false; end;
        if (Posr.LocArea==pickarea) then begin testf = false; end;
        if (Posr.LocArea==Locr.WHMDeliveryArea) then begin testf = false; end;
        if (Posr.LocArea==Locr.WHMPalletArea) then begin testf = false; end;
        if (Posr.Code==Locr.WHMDeliveryPosCode) then begin testf = false; end;
        if (Posr.Code==Locr.WHMWraperPosCode) then begin testf = false; end;
        if (Posr.Code==Locr.WHMDefPUPosCode) then begin testf = false; end;
        if (Posr.Code==Locr.WHMDefProdPosCode) then begin testf = false; end;
        if ((INr.PalletWidth==0) and (INr.PalletHeight==0) and (INr.PalletDepth==0)) then begin testf = false; end;
        if (Posr.Status!=1) then begin testf = false; end;    
        if (Posr.Closed!=0) then begin testf = false; end;    
      end;
      if (testf) then begin        
        testf = !FindItemAtPickArea(pickarea,PISr.ArtCode,PISr.Location);
      end;
      if (testf) then begin
        palletcnt = palletcnt + 1;
        lastartcode = PISr.ArtCode;
          ClearRow(StockMovr,StockMovrw,1);
          StockMovrw.Coefficient = INr.UnitCoefficient;
          StockMovrw.ArtCode = INr.Code;
          StockMovrw.Quant = PISr.LeftQty;
          StockMovrw.Spec = INr.Name;
          StockMovrw.BasePrice = INr.UPrice1;
          StockMovrw.Objects = FindINObjects(INr.Objects,INr.Group);
          StockMovrw.UnitXval = INr.Width;
          StockMovrw.UnitYval = INr.Height;
          StockMovrw.UnitZval = INr.Depth;
          StockMovrw.FrPosCode = PISr.Position;          
          StockMovrw.ToPosCode = FindFreePositionInPickArea(pickarea,INr,PISr.LeftQty,RepSpec.f3,apos,acnt);
          SetPositionStatus(StockMovrw.ToPosCode,2);
          MatRowPut(StockMovr,rwcnt,StockMovrw);   
          if (StockMovVc_PasteQuant(StockMovr,rwcnt)) then begin end;
          if (MatRowCnt(StockMovr)>rwcnt) then begin
            topos = StockMovrw.ToPosCode;
            MatRowGet(StockMovr,rwcnt+1,StockMovrw);   
            StockMovrw.ToPosCode = topos;
            StockMovrw.SerialNr = FindSerialNrAtPosition(StockMovrw.ArtCode,StockMovrw.FrPosCode);
            MatRowPut(StockMovr,rwcnt+1,StockMovrw);   
          end;
          SaveStockMov(StockMovr,RepSpec.f3,flushcnt);
      end;
    end;
  end;
LMoveToPickAreaMn:;  
  RETURN;
END;