external function Date DateFromString(string,string);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function string 255 TaxTemplateVATCodeOnTRRows(record TaxMatrixVc,string);
external function Integer PostTaxMatrix_IVVc(var record TRVc,record AccBlock,record VATCodeBlock,record IVVc,string,val,val,val,val,val,Boolean,Boolean,Integer,var val);
external function Boolean UseTaxTemplatesforTaxCalc();
external function string 5 AddVATCodeToVATAccRows(string);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external function Boolean CheckTTRPerRow(string,string,string,Boolean,var string,Integer);
external procedure RoundVATSum(string,string,string,var val);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external function string 255 GetHotelWIPAccount(record INVc);
external procedure Base1ToOther(var string,val,val,val,val,val,val,var val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure RowCalculateTaxMatrix_IVVc(var record IVVc,Integer,row IVVc);
external procedure IVDchsum(var record IVVc,Integer);
external function string 255 FillupTaxMatrix(Integer,string,string,string,string,string,var record TaxMatrixVc);
external procedure AddWithholdingTaxesRows_IVVc(var record IVVc);
external procedure AddPerceptionTaxesRows_IVVc(var record IVVc);
external function string 20 GetTax2Acc(string);
external procedure GetTaxesDiscounts(string,Date,string,string,var val,var val);
external procedure GetARAcc(string,var string);
external function string 20 FindJobCustomerCode(record JobVc);
external procedure ExtractObj(string,var Integer,var string);
external procedure BuildFolioLists(record JobVc,var record RcVc);
external procedure JobCust2Array(record JobVc,var Array string,var Array string);
external procedure GetCustAndBasket(string,var string,var LongInt);
external function string 255 FindINObjects(string,string);
external function Boolean IVDchrsum(var record IVVc,Integer);
external function string 255 FindNextLegalSerNr(record IVVc,string);
external procedure CheckFlush(var Integer,Integer);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external procedure AddEuroCurncyTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,LongInt,Boolean,string);
external function Boolean GetAccName(string,var string,Integer);
external function val FindVAT(string,val,Integer,Integer);
external function Boolean PasteCustInInv(var record IVVc);
external procedure GetBaseCurncy(Integer,var string);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure IVSumup(var record IVVc,Boolean);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);

// Silly function..... Easier to do if we knew where each line should be kept.
procedure SortAddOfItemToInvoice(var record IVVc IVr,Integer rwcnt,row IVVc IVrw,record TaxMatrixVc TMr,Integer addtop,record ResUsageVc ResUsager)
begin
  row IVVc IVrw2;
  Integer i,j;
  Boolean addedf;
  Integer rownr;

  if (addtop==1) then begin // Charges row
    rownr = 0;
    MatRowInsert(IVr,rownr,IVrw);
  end else begin
    addedf = false;
    j = 0;
    for (i=j;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw2);
      if (IVrw2.ExciseNr>IVrw.ExciseNr) then begin
        MatRowInsert(IVr,i,IVrw);
        rownr = i;
        addedf = true;
        i = rwcnt;
      end;
    end;
    if (addedf==false) then begin
      MatRowPut(IVr,rwcnt,IVrw);
      rownr = rwcnt;
    end;
  end;

  MatRowGet(IVr,rownr,IVrw);  
  PackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
  RowCalculateTaxMatrix_IVVc(IVr,rownr,IVrw);
  MatRowPut(IVr,rownr,IVrw);  
  IVDchsum(IVr,rownr);
//  IVDchrsum(IVr,rownr);
  return;
end;

procedure AddGuestNamesRows_IVVc(var record IVVc IVp,record JobVc Jobp,integer ShopBaskpSorting)
begin
  Integer i,rwcnt,rwcnt2;
  row IVVc IVrw;
  row JobVc JobVrw
  rwcnt = MatRowCnt(Jobp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Jobp,i,JobVrw);
    if (nonblank(JobVrw.GuestCode) and nonblank(JobVrw.CUName)) then begin
      ClearRow(IVp,IVrw,kInvoiceRowTypeNormal);
      IVrw.Spec = USetStr(10206) & " " & JobVrw.CUName;
      if (ShopBaskpSorting==1) then begin
        rwcnt2 = rwcnt2 + 1;
      end else begin
        rwcnt2 = MatRowCnt(IVp);
      end;
      MatRowInsert(IVp,rwcnt2,IVrw);
      rwcnt = rwcnt + 1;
    end;
  end;
  return;
end;

procedure ConsolidateDupGuestNamesRows_IVVc(var record IVVc IVp,record RcVc RepSpec)
begin
  Integer i,j,rwcnt,rwcnt2;
  row IVVc IVrw,IVrw2;
  boolean testf;

  if (RepSpec.flags[1]==1) then begin
    for (i=0;i<MatRowCnt(IVp);i=i+1) begin
      testf = false;
      MatRowGet(IVp,i,IVrw);
      if (blank(IVrw.ArtCode) and blank(IVrw.Quant)) then begin
        testf = true;
      end;
      if (testf) then begin
        for (j=i+1;j<MatRowCnt(IVp);j=j+1) begin
          MatRowGet(IVp,j,IVrw2);
          if (blank(IVrw2.ArtCode) and blank(IVrw2.Quant)) then begin
            if (nonblank(IVrw2.Spec) and nonblank(IVrw.Spec)) then begin
              if (IVrw2.Spec==IVrw.Spec) then begin
                MatRowDelete(IVp,j);
                j = j - 1;
                goto LConsolidateDupGuestNamesRows_IVVc;
              end;
            end;
          end;
          if (nonblank(IVrw2.Quant) and nonblank(IVrw2.ArtCode)) then begin
            j = MatRowCnt(IVp);
          end;
LConsolidateDupGuestNamesRows_IVVc:;
        end;
        testf = false;
      end;
    end;
  end;
  return;
end;

procedure AmendInvoiceRowComment(record JobPriceVc JPr,var row IVVc resIVrw)
begin
  row JobPriceVc JPrw;
  Integer i,rwcnt;
  Date sd,ed;
  Date prevsd,preved;
  string 255 tstr,perstr;
  record SysFormatBlock SFb;
  
  BlockLoad(SFb);
  rwcnt = MatRowCnt(JPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(JPr,i,JPrw);
    if (JPrw.ArtCode==resIVrw.ArtCode) then begin
      sd = JPrw.StayDay;
      ed = JPrw.StayDay;
      tstr = Left(resIVrw.Spec,len(resIVrw.Spec)-23);
      perstr = Right(resIVrw.Spec,len(resIVrw.Spec)-len(tstr));
      prevsd = DateFromString(Left(perstr,10),"YYYY-MM-DD");
      preved = DateFromString(Right(perstr,10),"YYYY-MM-DD");
      if (sd>prevsd and blankdate(prevsd)==false) then begin sd = prevsd; end;
      if (ed<preved and blankdate(preved)==false) then begin ed = preved; end;
      resIVrw.Spec = tstr & sd  & " - " & ed;
    end;
  end;
  return;
end;

procedure ConsolidateInvoice(record JobVc Jobp,record IVVc IVr,var record IVVc resIVr)
begin
  row IVVc IVrw;
  row IVVc resIVrw;
  Integer rwcnt,i;
  Integer resrwcnt,resi;
  Boolean treatedf;
  record JobPriceVc JPr;

  JPr.RecType = 0;
  JPr.SerNr = Jobp.SerNr;
  JPr.RowNr = 0;
  ReadFirstMain(JPr,3,true);
  
  RecordCopy(resIVr,IVr);
  rwcnt = MatRowCnt(IVr);
  while (MatRowCnt(resIVr)>0) begin
    MatRowDelete(resIVr,0);
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    resrwcnt = MatRowCnt(resIVr);
    MatRowGet(IVr,i,IVrw);
    treatedf = false;
    for (resi=0;resi<resrwcnt;resi=resi+1) begin
      MatRowGet(resIVr,resi,resIVrw);
      if ((IVrw.Price!=0) and (IVrw.Quant!=0)) then begin
//        if ((nonblank(resIVrw.ArtCode)) and (IVrw.ArtCode==resIVrw.ArtCode) and (IVrw.Price==resIVrw.Price) and (IVrw.BasePrice==resIVrw.BasePrice) and (IVrw.vRebate==resIVrw.vRebate) and (IVrw.Spec==resIVrw.Spec) and (IVrw.VATCode==resIVrw.VATCode)) then begin
        if ((nonblank(resIVrw.ArtCode)) and (IVrw.ArtCode==resIVrw.ArtCode) and (IVrw.Price==resIVrw.Price) and (IVrw.BasePrice==resIVrw.BasePrice) and (IVrw.vRebate==resIVrw.vRebate) and (IVrw.VATCode==resIVrw.VATCode)) then begin
          resIVrw.Quant = resIVrw.Quant + IVrw.Quant;
          AmendInvoiceRowComment(JPr,resIVrw);
          MatRowPut(resIVr,resi,resIVrw);
          if (IVDchrsum(resIVr,resi)) then begin end;
          treatedf = true;
        end;
      end;
    end;
    if (treatedf==false) then begin
      MatRowPut(resIVr,resrwcnt,IVrw);
    end;
  end;
  return;
end;

global
procedure BuildIVFromJobShopBask(var record IVVc incomingIVp,record JobVc Jobp,string lCustCode,Boolean nocustf,Boolean prelbookedf,Boolean allfolios,Integer ArtMode,record RcVc RepSpec)
begin
  record IVVc IVp;
  record ShopBaskVc ShopBaskp;
  record CCatVc CCatp;
  record INVc INr;
  row IVVc IVrw;
  string 60 ckey;
  Boolean Accs;
  Boolean found;
  Integer rwcnt,i;
  Boolean calcprice,addpricef;
  Boolean doit;
  Date tpd;
  val t,t1,tipv,vatv;
  val reb,price,basep,tax2prc,tax2reb;
  string 100 spec;
  string 20 vatcod,tax2code,taxtemplatecode;
  string 20 salesacc,location;
  record GeneralOptionBlock GenOptRec;
  record ResUsageVc ResUsager;
  Integer keys;
  record HotelBlock Hotelb;
  Boolean dummyf;
  string 20 CustCode;
  LongInt baskno;
  record TaxMatrixVc TMr;
  record AccVc Accr;
  record DownPayBlock DPb;
  
  GetCustAndBasket(lCustCode,CustCode,baskno);
  RecordCopy(IVp,incomingIVp);
  BlockLoad(Hotelb);   
  BlockLoad(GenOptRec);
  rwcnt = MatRowCnt(IVp);
  Accs = false;
  found = false;
  ResUsager.Code = Jobp.ResUsage;
  if (ReadFirstMain(ResUsager,1,true)==false) then begin
    ResUsager.AddDateToMatrix = 0;
  end;
  ckey = "OwnerSerNrDate";
  ShopBaskp.OwnerSerNr = Jobp.SerNr;
  ShopBaskp.Owner = kShopBaskOwnerReservation;
  ShopBaskp.DestinationNr = -1;
  keys = 4;
  Accs = true;
  while (LoopKey(ckey,ShopBaskp,keys,Accs)) begin
    if (ShopBaskp.OwnerSerNr!=Jobp.SerNr) then begin Accs = false; end;
    if (ShopBaskp.Owner!=kShopBaskOwnerReservation) then  begin Accs = false; end;
    if (ShopBaskp.DestinationNr!=-1) then  begin Accs = false; end;
    if (Accs) then begin
      if (ShopBaskp.Owner==kShopBaskOwnerReservation) then begin
        if (ShopBaskp.Destination==kShopBaskDestinationInvoice) then begin
          doit = false;
          if ((prelbookedf) or ((nocustf==true) and (blank(ShopBaskp.CUCode)))) then begin
            doit = true;
          end else begin
            if ((ShopBaskp.CUCode==CustCode) and ((ShopBaskp.BaskNo==baskno) or (allfolios))) then begin
              doit = true;
            end;
          end;
          if (ShopBaskp.ValueIsTip==1) then begin
            tipv = StringToVal(IVp.Sorting,M4Val);
            if (ShopBaskp.PriceInCur!=0) then begin
              if (IVp.CurncyCode==ShopBaskp.CurncyCode) then begin              
                tipv = tipv + ShopBaskp.PriceInCur;
              end;
            end else begin
              tipv = tipv + ShopBaskp.Price;
            end;
            IVp.Sorting = tipv;
            doit = false;
          end;
          if (doit) then begin
            INr.Code = ShopBaskp.ItemCode;
            if (ReadFirstMain(INr,1,true)) then begin
              ClearRow(IVp,IVrw,1);
              IVrw.vRebate = BlankVal;
              if (ShopBaskp.Price<0) then begin
                IVrw.stp = kInvoiceRowTypeDownpayment;
              end else begin
                IVrw.stp = kInvoiceRowTypeNormal;
              end;
              IVrw.OrdRow = ShopBaskp.SerNr;
              IVrw.CUPNr = ShopBaskp.DownPayIVSerNr;
              IVrw.ArtCode = ShopBaskp.ItemCode;
              IVrw.Quant = ShopBaskp.Qty;
              IVrw.BasePrice = ShopBaskp.BasePrice;
              IVrw.ResUsage = ShopBaskp.ResUsage;
              reb = blankval;
              location = IVrw.Location;
              if (blank(location)) then begin
                location = IVp.Location;
              end;
              if (GetItemPriceDiscount3(IVrw.ArtCode,IVrw.Quant,INr,IVp.CurncyCode,
                            IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,
                            IVp.LangCode,IVp.CustCat,IVp.PriceList,IVp.RebCode,
                            price,spec,reb,vatcod,basep,salesacc,IVp.ExportFlag,calcprice,IVp.TransDate,IVp.TransTime,IVp.CustCode,true,dummyf,IVp.PayDeal,tax2code,tax2prc,IVp.Region,location,taxtemplatecode)) then begin
                IVrw.TaxTemplateCode = FillupTaxMatrix(0,IVp.BranchID,IVp.CustCode,IVp.CustCat,IVp.DelAddrCode,taxtemplatecode,TMr);
                IVrw.Price = price;
                if (IVrw.stp==kInvoiceRowTypeDownpayment) then begin 
                  IVrw.Price = -ShopBaskp.Price;
                end; 
                if (blank(ShopBaskp.Comment)) then begin
                  IVrw.Spec = spec;
                end else begin
                  IVrw.Spec = ShopBaskp.Comment;
                end;
                IVrw.ExciseNr = ShopBaskp.TransDate;
                if (IVrw.stp==kInvoiceRowTypeDownpayment) then begin 
                  if (blank(INr.VATCode)) then begin 
                    BlockLoad(DPb);
                    vatcod = DPb.VATCode;
                  end;                 
                end; 
                IVrw.VATCode = vatcod;
                if (INr.InPrice==0) then begin
                  MulVATIV(IVrw.VATCode,IVrw.BasePrice,vatv,t1,IVp.InclVAT,IVp.NoTAXonVAT);
                  IVrw.BasePrice = IVrw.BasePrice - vatv;
                end else begin
                  IVrw.BasePrice = INr.InPrice;
                end;
                IVrw.Perceptions = INr.Perceptions;
                if (IVrw.BasePrice==0) then begin
                  IVrw.BasePrice = basep;
                end;
/*
                if (ShopBaskp.PrelBooked!=0) then begin
                  IVrw.SalesAcc = Hotelb.ResBridgeAcc;
                end;
*/
                if (prelbookedf) then begin
                  IVrw.SalesAcc = GetHotelWIPAccount(INr);
                end;
                if (blank(IVrw.SalesAcc)) then begin
                  IVrw.SalesAcc = salesacc;
                end;
                Accr.AccNumber = IVrw.SalesAcc;
                ReadFirstMain(Accr,1,true);
                IVrw.PeriodCode = Accr.PeriodCode;
                GetTaxesDiscounts(IVp.CustCode,IVp.TransDate,IVrw.VATCode,tax2code,t,tax2reb);
                if (IVp.NoTax2==0) then begin
                  IVrw.TAX2Code = tax2code;
                  IVrw.TAX2Prc = tax2prc;
                  IVrw.TAX2Reb = tax2reb;
                  IVrw.TAX2Acc = GetTax2Acc(IVrw.TAX2Code);
                end;
              end;
              addpricef = true;
              if (ShopBaskp.PriceInCur!=0) then begin
                if (IVp.CurncyCode==ShopBaskp.CurncyCode) then begin              
                  addpricef = false;
                  IVrw.Price = ShopBaskp.PriceInCur;
                end else begin
                end;
              end;
              if (addpricef) then begin
                if (blank(ShopBaskp.Price)==false) then begin //if u need check for bad price pls make sure it is blank when saving to basket
                  if (ShopBaskp.InclVAT==IVp.InclVAT) then begin
                    if (ShopBaskp.CurncyCode!=IVp.CurncyCode) then begin
                      IVrw.Price = MulRateToBase1(ShopBaskp.CurncyCode,ShopBaskp.Price,ShopBaskp.FrRate,ShopBaskp.ToRateB1,ShopBaskp.ToRateB2,ShopBaskp.BaseRate1,ShopBaskp.BaseRate2,DefaultCurRoundOff);
                      Base1ToOther(IVp.CurncyCode,IVrw.Price,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,t,DefaultCurRoundOff);
                      IVrw.Price = t;
                    end else begin
                      IVrw.Price = ShopBaskp.Price;
                    end;
                  end else begin
                    if (IVp.InclVAT!=0) then begin
                      t = FindVAT(IVrw.VATCode,ShopBaskp.Price,IVp.InclVAT,IVp.NoTAXonVAT);
                      if (ShopBaskp.CurncyCode!=IVp.CurncyCode) then begin
                        IVrw.Price = MulRateToBase1(ShopBaskp.CurncyCode,ShopBaskp.Price,ShopBaskp.FrRate,ShopBaskp.ToRateB1,ShopBaskp.ToRateB2,ShopBaskp.BaseRate1,ShopBaskp.BaseRate2,DefaultCurRoundOff);
                        Base1ToOther(IVp.CurncyCode,IVrw.Price,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,t,DefaultCurRoundOff);
                        IVrw.Price = t;
                      end else begin
                        IVrw.Price = ShopBaskp.Price;
                      end;
                    end else begin
  //no support for prices not incl VAT                  
                    end;
                  end;
                end;
              end;
              if (blank(ShopBaskp.Discount)) then begin
//                IVrw.vRebate = reb;//we have all data in ShopBask, we cannot override it, what if we changed discount after they were charged ? 
              end else begin
                IVrw.vRebate = ShopBaskp.Discount;
              end;
              if (((ShopBaskp.SortingAtTop==3) or (ShopBaskp.SortingAtTop==4)) and (ResUsager.AddNegateItems==0)) then begin
                IVrw.vRebate = 100;
              end;
              CalcSum(IVrw.Quant,IVrw.Price,IVrw.PriceFactor,IVrw.vRebate,t,GenOptRec.UseDiscount);
              IVrw.Sum = t;
              IVrw.Objects = ShopBaskp.Objects;
              SortAddOfItemToInvoice(IVp,rwcnt,IVrw,TMr,ShopBaskp.SortingAtTop,ResUsager);
              rwcnt = rwcnt + 1;
              if (RepSpec.flags[1]==1) then begin 
                AddGuestNamesRows_IVVc(IVp,Jobp,ShopBaskp.SortingAtTop);
              end;
              if ((ResUsager.AddNegateItems!=0) and (nonblank(ShopBaskp.NegateItem))) then begin
//                ClearRow
                IVrw.SalesAcc = "";
                IVrw.ArtCode = ShopBaskp.NegateItem;
                reb = blankval;
                location = IVrw.Location;
                if (blank(location)) then begin
                  location = IVp.Location;
                end;
                if (GetItemPriceDiscount3(IVrw.ArtCode,IVrw.Quant,INr,IVp.CurncyCode,
                            IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,
                            IVp.LangCode,IVp.CustCat,IVp.PriceList,IVp.RebCode,
                            price,spec,reb,vatcod,basep,salesacc,IVp.ExportFlag,calcprice,IVp.TransDate,IVp.TransTime,IVp.CustCode,true,dummyf,IVp.PayDeal,tax2code,tax2prc,IVp.Region,location,taxtemplatecode)) then begin
                  IVrw.TaxTemplateCode = FillupTaxMatrix(0,IVp.BranchID,IVp.CustCode,IVp.CustCat,IVp.DelAddrCode,taxtemplatecode,TMr);
                  if (blank(ShopBaskp.Comment)) then begin
                    if (nonblank(ResUsager.NegateComment)) then begin
                      IVrw.Spec = ResUsager.NegateComment;
                    end else begin
                      IVrw.Spec = spec;
                    end;
                  end else begin
                    IVrw.Spec = ShopBaskp.Comment;
                  end;
                  IVrw.VATCode = vatcod;
                  IVrw.BasePrice = basep;
                  if (prelbookedf) then begin
                    IVrw.SalesAcc = GetHotelWIPAccount(INr);
                  end;
                  if (blank(IVrw.SalesAcc)) then begin
                    IVrw.SalesAcc = salesacc;
                  end;
                end;
                IVrw.Price = -IVrw.Price;
                IVrw.vRebate = BlankVal;
//                IVrw.Quant = 1.00;//ShopBaskp.Qty , must be same as the "original" put in basket
                CalcSum(IVrw.Quant,IVrw.Price,IVrw.PriceFactor,IVrw.vRebate,price,GenOptRec.UseDiscount);
                IVrw.Price = BlankVal;
                IVrw.BasePrice = BlankVal;
                IVrw.Sum = price;
                SortAddOfItemToInvoice(IVp,rwcnt,IVrw,TMr,ShopBaskp.SortingAtTop,ResUsager);                
                rwcnt = rwcnt + 1;
                if (RepSpec.flags[1]==1) then begin 
                  AddGuestNamesRows_IVVc(IVp,Jobp,ShopBaskp.SortingAtTop);
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  if (ArtMode==2) then begin
    ConsolidateInvoice(Jobp,IVp,incomingIVp);
  end else begin
    RecordCopy(incomingIVp,IVp);
  end;
  AddPerceptionTaxesRows_IVVc(incomingIVp);
  AddWithholdingTaxesRows_IVVc(incomingIVp);
  IVSumup(incomingIVp,true);
  return;
end;

global
procedure BuildIVFromShopBask3(var record IVVc IVp,record JobVc Jobp,string lCustCode,Boolean nocustf,Boolean prelbookedf,Boolean allfolios,Integer ArtMode,record RcVc RepSpec)
begin
  record JobVc Job2p;
  Boolean Accs;
  string 60 ckey;
  Boolean anocustf;
  string 20 CustCode;
  LongInt baskno;

  GetCustAndBasket(lCustCode,CustCode,baskno);
  IVp.Objects = Jobp.Objects;
  BuildIVFromJobShopBask(IVp,Jobp,lCustCode,nocustf,prelbookedf,allfolios,ArtMode,RepSpec);
  if (Jobp.GroupWillNotPay==0) then begin
    Accs = true;
    ckey = "Mother:" & Jobp.SerNr;
    while (LoopKey(ckey,Job2p,1,Accs)) begin
      if (Job2p.Mother!=Jobp.SerNr) then begin Accs = false; end;
      if (Accs) then begin
        if (Job2p.GroupWillNotPay==0) then begin
          anocustf = nocustf;
          if (CustCode<>Job2p.CUCode) then begin anocustf = false; end;
          BuildIVFromShopBask3(IVp,Job2p,lCustCode,anocustf,prelbookedf,allfolios,ArtMode,RepSpec);
        end;
      end;
    end;
  end;
  return;
end;

global
procedure BuildIVFromShopBask2(var record IVVc IVp,record JobVc Jobp,string lCustCode,Boolean nocustf,Boolean prelbookedf,Boolean allfolios,Integer ArtMode)
begin
  record RcVc RepSpec;
  
  BuildIVFromShopBask3(IVp,Jobp,lCustCode,nocustf,prelbookedf,allfolios,ArtMode,RepSpec);
  return;
end;

global
procedure BuildIVFromShopBask(var record IVVc IVp,record JobVc Jobp,string lCustCode,Boolean nocustf,Boolean prelbookedf,Boolean allfolios)
begin
  BuildIVFromShopBask2(IVp,Jobp,lCustCode,nocustf,prelbookedf,allfolios,0);
  return;
end;


global
procedure SetupIVFromShopBask2(var record IVVc IVp,Integer InclVAT,string pricelist,string resusage,string lCustCode,
                              string curncy,val fr,val tob1,val tob2,val br1,val br2)
begin
  record PLDefVc PLDefR;
  Record ResUsageVc ResUsager;
  row IVVc IVrw;
  string 20 CustCode;
  LongInt baskno;
  record AccBlock ARb;

  GetCustAndBasket(lCustCode,CustCode,baskno);
  RecordNew(IVp);
  IVp.CustCode = CustCode;
  if (PasteCustInInv(IVp)) then begin end;

  if (nonblank(pricelist)) then begin
    IVp.PriceList = pricelist;
  end;
  IVp.InclVAT = InclVAT;
  if (IVp.InclVAT==kBasePriceSystemDefault) then begin
    BlockLoad(ARb);
    
    IVp.InclVAT = ARb.BasePriceInclVAT;
  end;
  PLDefR.Code = IVp.PriceList;
  if (ReadFirstMain(PLDefR,1,true)) then begin
    IVp.InclVAT = PLDefR.InclVAT;
  end;
  IVp.CurncyCode = curncy;
  IVp.FrRate = fr;
  IVp.ToRateB1 = tob1;
  IVp.ToRateB2 = tob2;
  IVp.BaseRate1 = br1;
  IVp.BaseRate2 = br2;
  ResUsager.Code = resusage;
  return;
end;

global
procedure SetupIVFromShopBask(var record IVVc IVp,string pricelist,string resusage,string lCustCode,
                              string curncy,val fr,val tob1,val tob2,val br1,val br2)
begin
  SetupIVFromShopBask2(IVp,kBasePriceSystemDefault,pricelist,resusage,lCustCode,curncy,fr,tob1,tob2,br1,br2);
  return;
end;


updating procedure UpdateShopBaskets(record JobVc Jobp,LongInt invnr,string lCustCode,Boolean nocustf,Boolean prelbookedf,Boolean allfolios,Boolean doflush,var Integer flushcnt)
begin
  record ShopBaskVc ShopBaskp;
  record ShopBaskVc ShopBask2p;
  LongInt recid;
  Boolean Accs;
  string 60 ckey;
  Boolean doit;
  Integer res;
  Integer keys;
  Boolean testf;
  string 20 CustCode;
  LongInt baskno;

  GetCustAndBasket(lCustCode,CustCode,baskno);
  if ((invnr!=-1) and (prelbookedf==false)) then begin
LU22:;
    ckey = "OwnerSerNr";
    ShopBaskp.OwnerSerNr = Jobp.SerNr;
    ShopBaskp.Owner = kShopBaskOwnerReservation;
    ShopBaskp.DestinationNr = -1;
    keys = 3;
    ResetLoop(ShopBaskp);
    Accs = true;
    while (LoopKey(ckey,ShopBaskp,keys,Accs)) begin
      if (ShopBaskp.OwnerSerNr!=Jobp.SerNr) then begin Accs = false; end;
      if (ShopBaskp.Owner!=kShopBaskOwnerReservation) then  begin Accs = false; end;
      if (ShopBaskp.DestinationNr!=-1) then  begin Accs = false; end;
      if (Accs) then begin
        if (ShopBaskp.Destination==kShopBaskDestinationInvoice) then begin
          doit = false;
          if ((nocustf==true) and (blank(ShopBaskp.CUCode))) then begin
            doit = true;
          end else begin
            if ((ShopBaskp.CUCode==CustCode) and ((ShopBaskp.BaskNo==baskno) or (allfolios))) then begin
              doit = true;
            end;
          end;
          if (doit) then begin
            RecordCopy(ShopBask2p,ShopBaskp);
            ShopBaskp.DestinationNr = invnr;
            res = RecordUpdate(ShopBask2p,ShopBaskp,false);
            if (doflush) then begin
              CheckFlush(flushcnt,10);
            end;
            goto LU22;
          end;
        end;
      end;
    end;
  end;
  return;
end;

global
updating procedure UpdateJobShopBask(record JobVc Jobp,LongInt invnr,string lCustCode,Boolean nocustf,Boolean prelbookedf,Boolean allfolios,Boolean doflush,var Integer flushcnt)
begin
  record JobVc Job2p;
  Boolean Accs;
  Boolean anocustf;
  string 60 ckey;
  string 20 CustCode;
  LongInt baskno;

  GetCustAndBasket(lCustCode,CustCode,baskno);
  UpdateShopBaskets(Jobp,invnr,lCustCode,nocustf,prelbookedf,allfolios,doflush,flushcnt);
  if (Jobp.GroupWillNotPay==0) then begin
    Accs = true;
    ckey = "Mother:" & Jobp.SerNr;
    while (LoopKey(ckey,Job2p,1,Accs)) begin
      if (Job2p.Mother!=Jobp.SerNr) then begin Accs = false; end;
      if (Accs) then begin
        if (Job2p.GroupWillNotPay==0) then begin
          anocustf = nocustf;
          if (CustCode<>Job2p.CUCode) then begin anocustf = false; end;
          UpdateJobShopBask(Job2p,invnr,lCustCode,anocustf,prelbookedf,allfolios,doflush,flushcnt);
        end;
      end;
    end;
  end;
  return;
end;

procedure AddPrepaymentRow(record RcVc RepSpec,record IVVc IVp,LongInt JobNr)
BEGIN
  Integer rwcnt;
  record ARPayVc ARPayr;
  Boolean found,testf;
  Date startdate,enddate;
  row IVVc IVrw;
  string 20 curcode;
  Integer keys;
  
  keys = 2;
  if (RepSpec.UsedOnly==1) then begin
    if (blank(RepSpec.Stext)) then begin
      goto LAddPrepaymentRow;
    end;
  end else begin
    keys = 1;
  end;  
  startdate = StringToDate(FirstInRange(RepSpec.Stext,10));
  enddate = StringToDate(LastInRange(RepSpec.Stext,10));
  rwcnt = MatRowCnt(IVp);  
  found = true;
  ARPayr.CustCode = IVp.CustCode;
  ARPayr.PayDate = startdate;
  while (LoopKey("CustPay",ARPayr,keys,found)) begin
    if (ARPayr.CustCode!=IVp.CustCode) then begin
      found = false;
    end;
    if (RepSpec.UsedOnly==1) then begin
      if (ARPayr.PayDate>enddate) then begin
        found = false;
      end;
    end;  
    GetBaseCurncy(1,curcode);    
    testf = true;    
    if (ARPayr.CurncyCode!=IVp.CurncyCode) then begin
      if ((blank(ARPayr.CurncyCode)) or (blank(IVp.CurncyCode))) then begin
        if (ARPayr.CurncyCode!=curcode) then begin    
         if (IVp.CurncyCode!=curcode) then begin    
            testf = false;
          end;  
        end;
      end;  
    end;
    if (JobNr<>ARPayr.CUPNr) then begin
      testf = false;
    end;
    if (found and testf) then begin
      ClearRow(IVp,IVrw,6);
      IVrw.CUPNr = ARPayr.CUPNr;
      IVrw.Spec = USetStr(7812);
      IVrw.Price = ARPayr.VATVal;
      IVrw.Sum = ARPayr.RVal;
      IVrw.BasePrice = ARPayr.BookRVal;
      MatRowInsert(IVp,0,IVrw);
    end;
  end;  
  IVSumup(IVp,true);  
LAddPrepaymentRow:;  
  return;
end;

updating procedure BuildIVFromShopBaskPre(record RcVc RepSpec,var record IVVc IVp,record JobVc Jobp,string custcode,Boolean nocustf,var Integer preadded)
begin  
  SetupIVFromShopBask2(IVp,Jobp.InclVAT,Jobp.PriceList,Jobp.ResUsage,custcode,Jobp.CurncyCode,Jobp.FrRate,Jobp.ToRateB1,Jobp.ToRateB2,Jobp.BaseRate1,Jobp.BaseRate2);
  preadded = MatRowCnt(IVp);
  if nonblank(RepSpec.f3) then begin
    IVp.Addr0 = RepSpec.f3;
  end;
  return;
end;

updating procedure BuildIVFromShopBaskWithPrepayments(record RcVc RepSpec,var record IVVc IVp,record JobVc Jobp,string custcode,Boolean nocustf,Boolean allfolios)
begin  
  BuildIVFromShopBask3(IVp,Jobp,custcode,nocustf,false,allfolios,RepSpec.ArtMode,RepSpec);
  AddPrepaymentRow(RepSpec,IVp,Jobp.SerNr);
  return;
end;

procedure RecalculateHotelInvoice(record IVVc IVp,string rsrvcurncy)
begin
  Integer i,rwcnt;
  row IVVc IVrw;
  val fr,to1,to2,br1,br2;
  val s,pr;
  record GeneralOptionBlock GOb;

  BlockLoad(GOb);
  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (IVrw.Price!=0) or (IVrw.Sum!=0) then begin
      GetFullCurncyRate(IVp.CurncyCode,IVp.TransDate,fr,to1,to2,br1,br2);
      IVp.FrRate = fr;
      IVp.ToRateB1 = to1;
      IVp.ToRateB2 = to2;
      IVp.BaseRate1 = br1;
      IVp.BaseRate2 = br2;      
      pr = IVrw.Price;
      CurValToOtherCur(IVp.TransDate,rsrvcurncy,IVrw.Price,IVp.CurncyCode,IVrw.Price,DefaultCurRoundOff);
      if (pr!=0) then begin
        CalcSum(IVrw.Quant,IVrw.Price,IVrw.PriceFactor,IVrw.vRebate,s,GOb.UseDiscount);  
        IVrw.Sum = s;
      end else begin
        CurValToOtherCur(IVp.TransDate,rsrvcurncy,IVrw.Sum,IVp.CurncyCode,IVrw.Sum,DefaultCurRoundOff);
      end;
      RowCalculateTaxMatrix_IVVc(IVp,i,IVrw);
      MatRowPut(IVp,i,IVrw);
      IVDchsum(IVp,i)
    end;
  end;
  IVSumup(IVp,true);  
  return;
end;

global
updating procedure StoreIVFromJobShopBask(var record RcVc RepSpec,var record IVVc IVp,record JobVc Jobp,string lCustCode,Boolean nocustf,Integer preadded)
begin
  Integer i,rwcnt;
  Boolean res;
  string 255 tstr,lastdate;
  row IVVc IVrw;
  val tipv;
  record CUVc CUr;
  string 20 CustCode;
  LongInt baskno;
  record HotelBlock Hotelb;
  string 255 rsrvcurncy;

  BlockLoad(Hotelb);
  GetCustAndBasket(lCustCode,CustCode,baskno);
  rwcnt = MatRowCnt(IVp);
  if (rwcnt>preadded) then begin
/* They can print the field ExciseNr
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVp,i,IVrw);
      if (IVrw.ExciseNr!=lastdate) then begin
        IVrw.Spec = IVrw.ExciseNr & ":   " & IVrw.Spec;
        MatRowPut(IVp,i,IVrw);
        lastdate = IVrw.ExciseNr;
      end;
    end;
*/
    tipv = StringToVal(IVp.Sorting,M4Val);
    IVp.Sorting = USetStr(10488) & tipv;
    IVp.InvComment = USetStr(9082) & ": " & Jobp.ResCode;
    IVp.SerNr = NextSerNr("IVVc",IVp.TransDate,-1,false,IVp.LangCode);  
    CUr.Code = CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin end;
//    IVp.OfficialSerNr = FindNextLegalSerNr(IVp,CUr.Classification); //POSN
    IVp.JobNr = Jobp.SerNr;
    GetARAcc(IVp.CustCode,IVp.ARAcc);    
    if (IVp.SerNr!=-1) then begin
      if (nonblank(Hotelb.InvCurncy)) and (Hotelb.InvCurncy!=IVp.CurncyCode) then begin
        rsrvcurncy = IVp.CurncyCode;
        IVp.CurncyCode = Hotelb.InvCurncy; 
        RecalculateHotelInvoice(IVp,rsrvcurncy); 
      end;
      res = RecordInsert(IVp,false);
      if (res) then begin
        CreateRecordLink(IVp,CurrentCompany,Jobp,CurrentCompany);  
        CreateRecordLink(Jobp,CurrentCompany,IVp,CurrentCompany);  
      end;
      RepSpec.long2 = IVp.SerNr;
    end;
  end;
  return;
end;

// Moved FindJobCustomerCode and FindJobCustomerName to HotelTools.hal

updating procedure BuildTheInvoice(record RcVc RepSpec,record JobVc Jobr,string lCustCode,var Integer flushcnt)
begin
  record IVVc IVp;
  Boolean nocustf,foundf,testf;
  Boolean doflush;
  Boolean allfolios;
  Integer preadded;

  allfolios = false;
  nocustf = false;
  doflush = true;
  if (RepSpec.flags[29]==1234) then begin
    doflush = false;
  end;
  BuildIVFromShopBaskPre(RepSpec,IVp,Jobr,lCustCode,nocustf,preadded);
  BuildIVFromShopBaskWithPrepayments(RepSpec,IVp,Jobr,lCustCode,nocustf,allfolios);
  if (RepSpec.flags[1]==1 and RepSpec.ArtMode==2) then begin 
    ConsolidateDupGuestNamesRows_IVVc(IVp,RepSpec);
  end;    
  StoreIVFromJobShopBask(RepSpec,IVp,Jobr,lCustCode,nocustf,preadded);
  UpdateJobShopBask(Jobr,IVp.SerNr,lCustCode,nocustf,false,allfolios,doflush,flushcnt);
  return;
end;

global
updating procedure GenResInvMn(var record RcVc RepSpec)
begin
  record JobVc Jobr;
  Integer flushcnt;
  record RcVc lRepSpec;
  Array string 20 Aclist;
  Array string 60 Aclistname;
  string 255 tstr,t2,t3;
  LongInt lastnr;
  Integer apos,pos;

  Jobr.SerNr = RepSpec.long1;
  if (ReadFirstMain(Jobr,1,true)) then begin
    JobCust2Array(Jobr,Aclist,Aclistname);
    BuildFolioLists(Jobr,lRepSpec);
    pos = 0;
    while (nonblank(Aclist[pos])) begin
      if (nonblank(RepSpec.f1)) then begin
        if (Aclist[pos]==RepSpec.f1) then begin
          BuildTheInvoice(RepSpec,Jobr,Aclist[pos],flushcnt);
        end;
      end else begin
        BuildTheInvoice(RepSpec,Jobr,Aclist[pos],flushcnt);
      end;
      switch (pos) begin
        case 0: t2 = lRepSpec.f3;
        case 1: t2 = lRepSpec.f4;
        case 2: t2 = lRepSpec.f5;
        case 3: t2 = lRepSpec.f6;
      end;
      apos = 0;
      ExtractObj(t2,apos,t3);
      while (nonblank(t3)) begin
        lastnr = StringToLongInt(t3);
        if (lastnr>0) then begin
          if (nonblank(RepSpec.f1)) then begin
            if ((Aclist[pos]==RepSpec.f1) or (Aclist[pos] & "." & lastnr==RepSpec.f1)) then begin
              BuildTheInvoice(RepSpec,Jobr,Aclist[pos] & "." & lastnr,flushcnt);
            end;
          end else begin
            BuildTheInvoice(RepSpec,Jobr,Aclist[pos] & "." & lastnr,flushcnt);
          end;
        end;
        ExtractObj(t2,apos,t3);
      end;
      pos = pos + 1;
    end;  
  end;
  return;
end;

global
updating procedure GenResInv2Mn(record RcVc RepSpec)
begin
  record JobVc Jobp;
  record IVVc IVp;
  record IVVc oldIVp;
  Boolean nocustf,foundf,firstf,testf;
  string 60 thef1,index;
  Integer res;
  Integer flushcnt;
  Boolean doflush;
  Boolean allfolios;
  Integer preadded;
  record CUVc CUr;

  allfolios = false;
  doflush = true;
  nocustf = false;
  firstf = true;
  if (nonblank(RepSpec.f1)) then begin
    CUr.Code = RepSpec.f1;
    if (ReadFirstMain(CUr,1,true)) then begin 
      testf = true;
      thef1 = CUr.Code;
    end; 
  end;
  if (testf) then begin 
    BuildIVFromShopBaskPre(RepSpec,IVp,Jobp,thef1,nocustf,preadded);
    Jobp.TransDate = RepSpec.sStartDate;
    foundf = true;
    index = "TransDate";
    if (RepSpec.long1>0) then begin
      index = "SerNr";
    end;
    while (LoopKey(index,Jobp,1,foundf)) begin
      if (RepSpec.long1>0) then begin
        if (Jobp.SerNr!=RepSpec.long1) then begin foundf = false; end;
      end else begin
        if (DateInRange(Jobp.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
          foundf = false;
        end;
      end;
      if (foundf) then begin
        testf = true;
        if (testf) then begin
          thef1 = RepSpec.f1;
          BuildIVFromShopBaskWithPrepayments(RepSpec,IVp,Jobp,thef1,nocustf,allfolios);
          if (firstf) then begin
            if (MatRowCnt(IVp)>0) then begin
              StoreIVFromJobShopBask(RepSpec,IVp,Jobp,thef1,nocustf,preadded);
              RecordCopy(oldIVp,IVp);
              firstf = false;
            end;
          end;
          UpdateJobShopBask(Jobp,IVp.SerNr,thef1,nocustf,false,allfolios,doflush,flushcnt);
        end;
      end;
    end;
    if (firstf==false) then begin
      if (MatRowCnt(IVp)>0) then begin
        if (RepSpec.flags[1]==1 and RepSpec.ArtMode==2) then begin 
          ConsolidateDupGuestNamesRows_IVVc(IVp,RepSpec);
        end;        
        res = RecordUpdate(oldIVp,IVp,false);
      end;
    end;
  end;
  return;
end;

global
updating procedure CreateNLWIPTrans(record JobVc Jobr,var record TRVc TRr,var val TotSump,Boolean doflush,var Integer flushcnt,Boolean wipf)
begin
  record IVVc IVr;
  row IVVc IVrw;
  Integer i,rwcnt;
  Boolean nocustf,foundf,testf;
  string 60 thef1;
  string 200 tstr,objstr;
  val nilv,rowsum,rs;
  Boolean allfolios,UseTaxTemplatesforTaxCalcf;
  record TaxMatrixVc TMr;
  Array record TaxMatrixVc aTMr;
  record SMVc VATr;
  row SMVc VATrw;
  Integer vcrwcnt;
  record VATCodeBlock VATCodeb;
  row VATCodeBlock VATCoderw;
  record RoundBlock Roundb;
  record AccBlock ARb;
  val tvat,tax1val,vatbase,totsum;
  string 255 SalesVATAcc,taccnumber;

  allfolios = false;
  nilv = -1;
  nocustf = false;
  thef1 = FindJobCustomerCode(Jobr);
  if (nonblank(thef1)) then begin
    BlockLoad(VATCodeb);
    BlockLoad(Roundb);
    BlockLoad(ARb);
    UseTaxTemplatesforTaxCalcf = UseTaxTemplatesforTaxCalc;
    SetupIVFromShopBask2(IVr,Jobr.InclVAT,Jobr.PriceList,Jobr.ResUsage,thef1,Jobr.CurncyCode,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
    BuildIVFromShopBask(IVr,Jobr,thef1,nocustf,true,allfolios);
    UpdateJobShopBask(Jobr,IVr.SerNr,thef1,nocustf,true,allfolios,doflush,flushcnt);
    SetupVATBase(VATr,vcrwcnt);  
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,blankval,vcrwcnt,IVr.InclVAT,IVr.NoTAXonVAT);
      UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
      FindSalesExVat(TMr,IVrw.VATCode,IVrw.Sum,IVr.InclVAT,IVr.NoTAXonVAT,rowsum);    
      if (GetAccName(IVrw.SalesAcc,tstr,60)==true) then begin end;
      rs = MulRateToBase1(IVr.CurncyCode,rowsum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
      AddEuroCurncyTrRow(TRr,IVrw.SalesAcc,IVrw.Objects,TaxTemplateVATCodeOnTRRows(TMr,IVrw.VATCode),tstr,rs,true,wipf,totsum,
                         IVr.CurncyCode,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,rowsum,nilv,-1,false,"");
    end;
    if (ARb.VATUseObj!=0) then begin
      objstr = IVr.Objects;
    end;
    if (UseTaxTemplatesforTaxCalcf) then begin
      PostTaxMatrix_IVVc(TRr,ARb,VATCodeb,IVr,objstr,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,false,true,1,totsum);
    end else begin
      vcrwcnt = MatRowCnt(VATCodeb);
      for (i=0;i<vcrwcnt;i=i+1) begin
        MatRowGet(VATCodeb,i,VATCoderw);
        MatRowGet(VATr,i,VATrw);
        if (VATrw.DebVal!=0) then begin 
          switch (Roundb.VATCalcWay) begin
            case 0:    
              MulVATIV(VATCoderw.VATCode,VATrw.DebVal,tvat,tax1val,IVr.InclVAT,IVr.NoTAXonVAT);
            case 1:
              tvat = VATrw.CredVal2;
              tax1val = VATrw.CurCredVal;
          end;       
          vatbase = VATrw.DebVal;
          RoundVATSum(IVr.CurncyCode,IVr.PayDeal,"IVVc",tvat);
          tvat = MulRateToBase1(IVr.CurncyCode,tvat,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          tax1val = MulRateToBase1(IVr.CurncyCode,tax1val,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          vatbase = MulRateToBase1(IVr.CurncyCode,vatbase,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);

          SalesVATAcc = VATCoderw.HotelWIPAcc;
          if (blank(SalesVATAcc)) then begin
            SalesVATAcc = VATCoderw.SalesVATAcc;
          end;
          if (CheckTTRPerRow("IVVc",SalesVATAcc,objstr,false,taccnumber,0)) then begin end;
          if (GetAccName(SalesVATAcc,tstr,60)==true) then begin end;
          AddEuroTrRow(TRr,SalesVATAcc,objstr,AddVATCodeToVATAccRows(VATCoderw.VATCode),tstr,tvat,IVr.BaseRate1,IVr.BaseRate2,true,wipf,totsum,false,taccnumber,"","");
        end;
      end;
    end;
  end;
  TotSump = TotSump + MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
  return;
end;

