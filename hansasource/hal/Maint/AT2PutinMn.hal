external function Integer TRVc_AddRoundOffRow(var record TRVc,val,val,string,Boolean,Boolean,Boolean,val,var val);
external updating procedure UpdateATTransRecArray(record TRVc,array string,array val,integer,integer);
external procedure CheckFlush(var Integer,Integer);
external function Boolean TransInFiscal(Date);
external procedure GetCategoryNLAccounts(Integer,string,var string,var string,var string,var string,var string,var string,var string,var string,var string,var string,
                                         var string,var string,var string,var string);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external function Boolean GetAccName(string,var string,Integer);
external procedure TRSumup(var record TRVc,var val);
external function Integer GetIntYc(Date);

function
Boolean AddToNLTrans(record RcVc RepSpec,record AT2UnitVc ATUnitr,record AccBlock SLAccRec,record AT2AccBlock AT2Ab,var record TRVc TRr,val base1,val base2)
BEGIN
  record AT2Vc ATCatr;
  string 10 costacc,depracc,assetacc,capinvacc,revdepr1acc,capcorr1acc;
  string 60 accname,objstr,blanks,asset1objstr,depr1objstr,cost1objstr,asset2objstr,depr2objstr,cost2objstr,commonobjstr,AT2Class,revdepr1objects,capcorr1objects;
  val TotSum,purchval;
  Boolean res;
  
  capinvacc = RepSpec.FirstAcc;
  if (blank(capinvacc)) then begin
    capinvacc = AT2Ab.CapInvAcc;
  end;
  res = false;
  ATCatr.Code = ATUnitr.AT2Code;
  if (ReadFirstMain(ATCatr,1,true)) then begin
    AT2Class = ATUnitr.AT2Class;
    if (blank(AT2Class)) then begin
      AT2Class = ATCatr.AT2Class;
    end;
    GetCategoryNLAccounts(RepSpec.flags[1],AT2Class,assetacc,costacc,depracc,commonobjstr,asset1objstr,depr1objstr,cost1objstr,asset2objstr,depr2objstr,cost2objstr,revdepr1acc,revdepr1objects,capcorr1acc,capcorr1objects);
    purchval = ATUnitr.PurchVal;   
    if (RepSpec.flags[1]==1) then begin
      if (ATUnitr.PurchVal2>0) then begin
        purchval = ATUnitr.PurchVal2;
      end;
    end;
    if (GetAccName(assetacc,accname,60)==false) then begin 
      res = false;
      goto LAddToNLTrans; 
    end;
    objstr = commonobjstr;
    if ((nonblank(objstr)) and (nonblank(ATUnitr.Objects))) then begin
      objstr = objstr & ",";
    end;
    objstr = objstr & ATUnitr.Objects;    
    if (RepSpec.flags[1]==0) then begin
      if ((nonblank(objstr)) and (nonblank(asset1objstr))) then begin
        objstr = objstr & ",";
      end;
      objstr = objstr & asset1objstr;          
    end else begin
      if ((nonblank(objstr)) and (nonblank(asset2objstr))) then begin
        objstr = objstr & ",";
      end;
      objstr = objstr & asset2objstr;          
    end;
    AddEuroTrRow(TRr,assetacc,objstr,blanks,accname,purchval*ATUnitr.Quantity,base1,base2,true,true,TotSum,false,"","","");
    if (GetAccName(capinvacc,accname,60)==false) then begin 
      res = false;
      goto LAddToNLTrans; 
    end;
    AddEuroTrRow(TRr,capinvacc,blanks,blanks,accname,purchval*ATUnitr.Quantity,base1,base2,true,false,TotSum,false,"","","");
    if (TotSum!=0) then begin
      if (TRVc_AddRoundOffRow(TRr,base1,base2,"",false,false,false,TotSum,TotSum)!=0) then begin 
        res = false;
        goto LAddToNLTrans; 
      end;
    end;
    res = true;
  end;
LAddToNLTrans:;
  AddToNLTrans = res;  
  RETURN;
END;

global
updating procedure AT2PutinMn(record RcVc RepSpec)
BEGIN    
  array string 20 atunits;
  array val atvals;
  integer size;
  record AT2UnitVc ATUnitr;
  record AT2UnitVc oldATUnitr;
  record BaseERVc BERr;
  record TRVc TRr;
  record AccBlock SLAccRec;
  record AT2AccBlock AT2Ab;
  Boolean TrHs,testf;
  val base1,base2,dsum,csum,t;
  string 30 frinv,toinv;
  Integer flushcnt;

  BlockLoad(AT2Ab);
  if (blank(AT2Ab.CapInvAcc) and blank(RepSpec.FirstAcc)) then begin goto LAT2PutinMn; end;  
  BlockLoad(SLAccRec);
  RecordNew(TRr);
  TRr.TransDate = CurrentDate;
  if (nonblankdate(RepSpec.d1)) then begin  
    TRr.TransDate = RepSpec.d1;
  end;  
  base1 = 100;
  base2 = 100;
  BERr.Date = TRr.TransDate;
  if (ReadLastMain(BERr,1,false)) then begin
    base1 = BERr.Rate1;
    base2 = BERr.Rate2;
  end;
  frinv = FirstInRange(RepSpec.f2,30);
  toinv = LastInRange(RepSpec.f2,30);
  TrHs = true;
  ATUnitr.InventoryNr = frinv;
  while (LoopMain(ATUnitr,1,TrHs)) begin
    if (nonblank(RepSpec.f2)) then begin
      if (ATUnitr.InventoryNr>toinv) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.f1)) then begin 
        if (RepSpec.f1!=ATUnitr.AT2Code) then begin
          testf = false; 
        end;
      end;
      if (nonblank(RepSpec.AccStr)) then begin 
        if (RepSpec.AccStr!=ATUnitr.DepCode) then begin
          testf = false; 
        end;
      end;
      if (nonblankdate(ATUnitr.StartingDate1)) then begin testf = false; end;
      if (testf) then begin
        if (AddToNLTrans(RepSpec,ATUnitr,SLAccRec,AT2Ab,TRr,base1,base2)) then begin
          RecordCopy(oldATUnitr,ATUnitr);
          if (nonblankdate(RepSpec.d1)) then begin  
            ATUnitr.StartingDate1 = RepSpec.d1;
            ATUnitr.StartingDate2 = RepSpec.d1;
          end else begin          
            ATUnitr.StartingDate1 = TRr.TransDate;//CurrentDate
            ATUnitr.StartingDate2 = TRr.TransDate;//CurrentDate
          end;  
          atunits[size] = ATUnitr.InventoryNr;
          atvals[size] = ATUnitr.PurchVal*ATUnitr.Quantity;
          size = size + 1;
          if (RecordUpdate(oldATUnitr,ATUnitr,true)==0) then begin end;
          CheckFlush(flushcnt,10);
        end;
        if (MatRowCnt(TRr)>200) then begin
          if (TransInFiscal(TRr.TransDate)==false) then begin
            goto LAT2PutinMn;
          end;  
          TRr.Number = NextSerNr("TRVc",TRr.TransDate,-1,false,"");  
          TRr.IntYc = GetIntYc(TRr.TransDate);
          t = -1;
          TRSumup(TRr,t);
//          TRr.DSum = dsum;
//          TRr.CSum = csum;
//          TRr.DiffVal = TRr.DSum + TRr.CSum;
          TRr.Comment = "AT2PutinMn"; 
          if (TRr.DiffVal==0) then begin
            if (RecordInsert(TRr,false)) then begin end;
            CheckFlush(flushcnt,10);
            UpdateATTransRecArray(TRr,atunits,atvals,size,2);
          end;  
          RecordNew(TRr);
          TRr.TransDate = CurrentDate;
          if (nonblankdate(RepSpec.d1)) then begin  
            TRr.TransDate = RepSpec.d1;
          end;            
        end;
      end;       
    end;
  end;
  if (MatRowCnt(TRr)>0) then begin
    if (TransInFiscal(TRr.TransDate)==false) then begin
      goto LAT2PutinMn;
    end;  
    TRr.Number = NextSerNr("TRVc",TRr.TransDate,-1,false,"");  
    TRr.IntYc = GetIntYc(TRr.TransDate);                
    t = -1;
    UpdateATTransRecArray(TRr,atunits,atvals,size,2);
    TRSumup(TRr,t);
//    TRr.DSum = dsum;
//    TRr.CSum = csum;
//    TRr.DiffVal = TRr.DSum + TRr.CSum;
    TRr.Comment = RepSpec.f4; 
    if (TRr.DiffVal==0) then begin
      if (RecordInsert(TRr,false)) then begin end;
    end;  
  end;
LAT2PutinMn:;  
  RETURN;
END;
