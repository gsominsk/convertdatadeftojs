external procedure CheckFlush(var Integer,Integer);
external procedure Base1ToOther(var string,val,val,val,val,val,val,var val,roundmode);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);

global
updating procedure NLAddRateMn(record RcVc RepSpec)
BEGIN
  record TRVc TRr;
  record TRVc oldTRr;
  row TRVc TRrw;
  Integer rwcnt,i;
  Boolean foundf,testf,savef;
  record BaseCurBlock bascur;
  val fr,to1,to2,br1,br2,temp;
  Integer flushcnt;

  BlockLoad(bascur);
  foundf = true;
  if (RepSpec.flags[1]==0) then begin foundf = false; end;
  TRr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",TRr,1,foundf)) begin
    RecordCopy(oldTRr,TRr);
    testf = true;
    savef = false;
    if (TRr.TransDate>RepSpec.sEndDate) then begin foundf = false; end;
    if (foundf==false) then begin testf = false; end;
    if (testf) then begin
      rwcnt = MatRowCnt(TRr);
      for (i=0;i<rwcnt;i=i+1) begin
         MatRowGet(TRr,i,TRrw);
         if (RepSpec.flags[1]!=0) then begin
           if (blank(TRrw.Curncy)) then begin
             TRrw.Curncy = bascur.BaseCur1;
             if (nonblank(TRrw.Curncy)) then begin savef = true; end;
           end;
           GetFullCurncyRate(TRrw.Curncy,TRr.TransDate,fr,to1,to2,br1,br2);
           if (blank(TRrw.BaseRate1)) then begin
             TRrw.BaseRate1 = br1;
             if (nonblank(TRrw.BaseRate1)) then begin savef = true; end;
           end;
           if (blank(TRrw.BaseRate2)) then begin
             TRrw.BaseRate2 = br2;
             if (nonblank(TRrw.BaseRate2)) then begin savef = true; end;
           end;
           if (blank(TRrw.FrRate)) then begin
             TRrw.FrRate = fr;
             if (nonblank(TRrw.FrRate)) then begin savef = true; end;
           end;
           if (blank(TRrw.ToRateB1)) then begin
             TRrw.ToRateB1 = to1;
             if (nonblank(TRrw.ToRateB1)) then begin savef = true; end;
           end;
           if (blank(TRrw.ToRateB2)) then begin
             TRrw.ToRateB2 = to2;
             if (nonblank(TRrw.ToRateB2)) then begin savef = true; end;
           end;
           if (nonblank(TRrw.DebVal)) then begin
             if (blank(TRrw.DebVal2)) then begin
               temp = TRrw.BaseRate1/TRrw.BaseRate2;
               TRrw.DebVal2 = TRrw.DebVal/temp;
               if (nonblank(TRrw.DebVal2)) then begin savef = true; end;
               if ((TRrw.Curncy!=bascur.BaseCur1) and (TRrw.Curncy!=bascur.BaseCur2)) then begin
                 if (blank(TRrw.CurDebVal)) then begin
                   Base1ToOther(TRrw.Curncy,TRrw.DebVal,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,temp,DefaultCurRoundOff);
                   TRrw.CurDebVal = temp;
                   if (nonblank(TRrw.CurDebVal)) then begin savef = true; end;
                 end;
               end;
             end;
           end;
           if (nonblank(TRrw.CredVal)) then begin
             if (blank(TRrw.CredVal2)) then begin
               temp = TRrw.BaseRate1/TRrw.BaseRate2;
               TRrw.CredVal2 = TRrw.CredVal/temp;
               if (nonblank(TRrw.CredVal2)) then begin savef = true; end;
               if ((TRrw.Curncy!=bascur.BaseCur1) and (TRrw.Curncy!=bascur.BaseCur2)) then begin
                 if (blank(TRrw.CurCredVal)) then begin
                   Base1ToOther(TRrw.Curncy,TRrw.CredVal,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,temp,DefaultCurRoundOff);
                   TRrw.CurCredVal = temp;
                   if (nonblank(TRrw.CurCredVal)) then begin savef = true; end;
                 end;
               end;
             end;
           end;
           if (savef) then begin
             MatRowPut(TRr,i,TRrw);
           end;
         end;
      end;
      if (savef) then begin
        if (RecordUpdate(oldTRr,TRr,false)==0) then begin end;
        CheckFlush(flushcnt,10);
      end;
    end;
    UserTrace(TRr.Number,M4Long);            
  end;
  RETURN;
END;