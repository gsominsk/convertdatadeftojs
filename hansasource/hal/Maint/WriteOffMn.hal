external function Boolean GetPMCurrency(string,var string);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external function LongInt DateDiff(Date,Date);
external procedure IPSumup(var record IPVc);

updating procedure AddARtoIP(record IPVc IPp,record ARVc ARp,record SRBlock SRRec,record AccBlock ARAccb,record BaseCurBlock BCb,string code,string comment)
BEGIN
  Integer rwcnt,i;
  row IPVc IPrw;
  string 255 bankcurncy;
  val t;
  record IVVc IVr;

  IPp.TransDate = CurrentDate;
  IPp.RegDate = CurrentDate;
  rwcnt = MatRowCnt(IPp);
  if (rwcnt>90) then begin
    IPp.SerNr = NextSerNr("IPVc",IPp.TransDate,SRRec.LastPayNr,false,"");
    IPp.PayMode = code;
    IPp.Comment = comment;
    IPSumup(IPp);
    if (RecordInsert(IPp,false)) then begin end;
    RecordNew(IPp);
    IPSumup(IPp);
    IPp.SerNr = -1;
    rwcnt = 0;
  end;
  i = rwcnt;
  ClearRow(IPp,IPrw,1);
  IPrw.stp = 1;
  IPrw.ovst = 0;
  IPrw.WriteOffAcc = ARAccb.WriteOffLossAcc;
  if (blank(IPrw.WriteOffAcc)) then begin
    IPrw.WriteOffAcc = ARAccb.CredAcc;
  end;
  IPrw.InvoiceNr = ARp.InvoiceNr;
  IPrw.CustCode = ARp.CustCode;
  IPrw.PayDate = CurrentDate;
  IPrw.CustName = ARp.CustName;
  IPrw.InvCurncy = ARp.ARCurncyCode;
  IPrw.BankCurncy = ARp.ARCurncyCode;
  IPrw.RecCurncy = ARp.ARCurncyCode;
  IPrw.InvVal = 0;
  IPrw.BankVal = 0;
  IPrw.RecVal = 0;
  IPrw.latedays = DateDiff(ARp.DueDate,CurrentDate);
  MatRowPut(IPp,i,IPrw);
  i = rwcnt + 1;
  ClearRow(IPp,IPrw,kReceiptRowTypeWriteoff);
  IPrw.stp = kReceiptRowTypeWriteoff;
  IPrw.ovst = 0;
  IPrw.InvoiceNr = ARp.InvoiceNr;
  IPrw.CustCode = ARp.CustCode;
  IPrw.PayDate = CurrentDate;
  IPrw.CustName = ARp.CustName;
  IPrw.InvCurncy = ARp.ARCurncyCode;
  IPrw.RecCurncy = ARp.ARCurncyCode;
  if (GetPMCurrency(IPp.PayMode,bankcurncy)) then begin end;
  IPrw.BankCurncy = bankcurncy;
  if (blank(IPrw.BankCurncy)) then begin
    IPrw.BankCurncy = BCb.BaseCur1;
  end;
  IVr.SerNr = ARp.InvoiceNr;
  ReadFirstMain(IVr,1,true);
  if (bankcurncy!=IPrw.InvCurncy) then begin
    CurValToOtherCur(IVr.TransDate,IPrw.InvCurncy,ARp.RVal,bankcurncy,t,DefaultCurRoundOff);
    IPrw.BankVal = t;
  end else begin
    IPrw.BankVal = ARp.RVal;
  end;
  IPrw.RecVal = ARp.RVal;
  IPrw.InvVal = ARp.RVal;
  IPrw.latedays = DateDiff(ARp.DueDate,CurrentDate);
  MatRowPut(IPp,i,IPrw);
  RETURN;
END;

global
updating procedure WriteOffMn(record RcVc RepSpec)
BEGIN
  record IPVc IPr;
  record ARVc ARr;
  Boolean found;
  string 20 frcc,tocc;
  LongInt friv,toiv;
  Boolean testf;
  LongInt latedays;
  Integer rwcnt;
  record SRBlock SRRec;
  record PMBlock PMRec;
  record BaseCurBlock BCb;
  record AccBlock ARAccb;
  row PMBlock pmrp;
  string 5 code;
  string 255 comment;
  val posv,negv;

  BlockLoad(BCb);
  BlockLoad(PMRec);
  BlockLoad(SRRec);
  BlockLoad(ARAccb);
  rwcnt = MatRowCnt(PMRec);
  if (rwcnt>0) then begin
    MatRowGet(PMRec,0,pmrp);
    code = pmrp.Code;
    comment = pmrp.Comment;
  end;
  posv = RepSpec.vals0;
  negv = -RepSpec.vals0;
  frcc = FirstInRange(RepSpec.f1,20);
  tocc = LastInRange(RepSpec.f1,20);
  friv = FirstInRange(RepSpec.f3,10);
  toiv = LastInRange(RepSpec.f3,10);
  ARr.InvoiceNr = friv;
  found = true;
  while (LoopMain(ARr,1,found)) begin
    if (nonblank(RepSpec.f3)) then begin
      if (ARr.InvoiceNr<friv) then begin found = false; end;
      if (ARr.InvoiceNr>toiv) then begin found = false; end;
    end;
    testf = true;
    if (found==false) then begin testf = false; end;
    if (testf) then begin
      if (nonblank(RepSpec.f1)) then begin
        if (ARr.CustCode<frcc) then begin testf = false; end;
        if (ARr.CustCode>tocc) then begin testf = false; end;
      end;
      if (RepSpec.long1!=-1) then begin
        latedays = DateDiff(CurrentDate,ARr.DueDate);
        if (latedays<=RepSpec.long1) then begin testf = false; end;
      end;
      if (RepSpec.vals0!=0) then begin
        if (ARr.BookRVal<0) then begin
          if (negv>=ARr.BookRVal) then begin testf = false; end;
        end else begin
          if (posv<=ARr.BookRVal) then begin testf = false; end;
        end;
      end;
    end;
    if (testf) then begin
      AddARtoIP(IPr,ARr,SRRec,ARAccb,BCb,code,comment);
    end;
    UserTrace(ARr.InvoiceNr,M4Long);        
  end;
  rwcnt = MatRowCnt(IPr);
  if (rwcnt>0) then begin
    IPr.TransDate = CurrentDate;
    IPr.RegDate = CurrentDate;
    IPr.SerNr = NextSerNr("IPVc",IPr.TransDate,SRRec.LastPayNr,false,"");
    IPr.PayMode = code;
    IPr.Comment = comment;
    IPSumup(IPr);
    if (RecordInsert(IPr,false)) then begin end;
  end;
  RETURN;
END;