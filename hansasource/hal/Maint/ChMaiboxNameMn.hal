external function Boolean FindUserInMailbox(string,var string,var LongInt);
external procedure ResolveMailboxNumber(var row MailVc);
external procedure StripEndingSpaces(var string);

function Boolean MailboxIsEmpty(string addrname)
begin
  Boolean res;
  string 255 ckey;
  string 60 confcode;
  LongInt nr;

  res = false;
  if (FindUserInMailbox(addrname,confcode,nr)==false) then begin
  end;
  ckey = "UserSer:" & nr;
  if (RecordsInIndex("MailVc",ckey)==0) then begin
    res = true;
  end;
  MailboxIsEmpty = res;
  return;
end;

updating procedure UpdateMailHistory(record MailVc Mailr,LongInt oldmailboxnr,LongInt newmailboxnr)
begin
  record MailReadVc mrr;
  record MailReadVc oldmrr;
  Boolean found,testf;
  
  if (newmailboxnr<0) then begin
    goto LUpdateMailHistory;
  end;
  found = true;
  mrr.mailSerNr = Mailr.SerNr;
  while (LoopMain(mrr,1,found)) begin
    if (found) then begin
      if (mrr.mailSerNr!=Mailr.SerNr) then begin found = false; end;
    end;  
    if (found) then begin
      testf = true;
      if (mrr.mailBoxNr!=oldmailboxnr) then begin
        testf = false;
      end;
      if (testf) then begin
        RecordCopy(oldmrr,mrr);
        mrr.mailBoxNr = newmailboxnr;
        RecordUpdate(oldmrr,mrr,true);
      end;
    end;
  end;
LUpdateMailHistory:;  
  return;
end;

function string 255 GetClearAddr(string addr)
begin
  Integer pos,pos2;
  string 255 actname,res;

  pos = InString(addr,"<");
  pos2 = InString(addr,">");
  if (pos>0) then begin
    actname = left(addr,pos-1);
    StripEndingSpaces(actname);
    res = actname;
  end else begin
    res = addr;
  end;

  GetClearAddr = res;
  return;
end;

global
updating procedure ChMaiboxNameMn(record RcVc RepSpec)
BEGIN
  record MailVc Mailr;
  row MailVc Mailrw;
  Boolean TrHs,changedf;
  string 20 ckey;
  string 60 confcode,confcode2;
  string 60 confname;
  LongInt nr,nr2,oldmailboxnr,newmailboxnr;
  Integer i,rwcnt;
//  LongInt mailcnt;
  record ConfVc fromConfr;
  record ConfVc toConfr;
  
  if ((blank(RepSpec.f1)) or (blank(RepSpec.f2))) then begin
    goto LChMaiboxNameMn;
  end;
  
  if (RepSpec.f1==RepSpec.f2) then begin
    goto LChMaiboxNameMn;
  end;
  
  if (RepSpec.flags[1]==0) then begin
    if (MailboxIsEmpty(RepSpec.f2)==false) then begin
      goto LChMaiboxNameMn;
    end;
  end;
  if (FindUserInMailbox(RepSpec.f1,confcode,nr)==false) then begin
    goto LChMaiboxNameMn;
  end;
  if (FindUserInMailbox(RepSpec.f2,confcode2,nr2)==false) then begin
    goto LChMaiboxNameMn;
  end;
//  mailcnt = 0;
  ckey = "UserTime:";
  ckey = ckey & confcode;
  TrHs = true;
  while (LoopKey(ckey,Mailr,1,TrHs)) begin
    if (TrHs) then begin
      changedf = false;
      rwcnt = MatRowCnt(Mailr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Mailr,i,Mailrw);
        if (GetClearAddr(Mailrw.AddrCode)==RepSpec.f1) then begin
          ResolveMailboxNumber(Mailrw);
          oldmailboxnr = Mailrw.Mailbox;
          Mailrw.AddrCode = RepSpec.f2;
          ResolveMailboxNumber(Mailrw);
          newmailboxnr = Mailrw.Mailbox;
          MatRowPut(Mailr,i,Mailrw);
          changedf = true;
        end;        
      end;
      if (changedf) then begin    
        if (RecordStore(Mailr,true)) then begin
          UpdateMailHistory(Mailr,oldmailboxnr,newmailboxnr);
          StepBack(Mailr);
        end;
        UserTrace(Mailr.Header,M4Str);
      end;
    end;
  end;
  fromConfr.SerNr = StringToLongInt(nr);
  ReadFirstMain(fromConfr,1,true);
  toConfr.SerNr = StringToLongInt(nr2);
  ReadFirstMain(toConfr,1,true);

  CopyRecordLinks(fromConfr,toConfr);  
  
LChMaiboxNameMn:;  
  RETURN;
END;