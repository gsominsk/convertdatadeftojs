external procedure CheckFlush(var Integer,Integer);
external function Boolean GetObjBal(string,string,var record ObjBalVc);
external procedure GetAccStartBalance3(var val,string,string,Date,var record ObjBalVc,Integer,Integer,string);


global
updating procedure RecLoanIntMn(record RcVc RepSpec)
BEGIN
 record CuAccVc CuAccr;
 record ObjBalVc ObjBalr;
 record CUVc CUr;
 row CuAccVc CuAccrw;
 Integer i,rwcnt;
 LongInt BlankLong;
 val CurBal,diff,instnr,t1;
 Boolean testf,TrHs,stopf;
 Date sd;
 string 20 frcu,tocu,frloan,toloan;
 Integer flushcnt;
  
 BlankLong = -1;
 t1 = 1;
 frcu = FirstInRange(RepSpec.f1,20);
 tocu = LastInRange(RepSpec.f1,20);
 frloan = FirstInRange(RepSpec.f2,20);
 toloan = LastInRange(RepSpec.f2,20);

 CuAccr.CUCode = frcu;
 CuAccr.Code = frloan;
 TrHs = true;
 while (LoopKey("CUCode",CuAccr,2,TrHs)) begin
   if (nonblank(RepSpec.f1)) then begin
     if (CuAccr.CUCode>tocu) then begin
       TrHs = false;
     end;
   end;
   if (nonblank(RepSpec.f2)) then begin
     if (CuAccr.Code>toloan) then begin
       TrHs = false;
     end;
   end;
   if (TrHs) then begin
     testf = true;
   instnr = CuAccr.InstNr; 
   rwcnt = MatRowCnt(CuAccr);
   if (rwcnt==0) then begin
     testf = false;
   end;
   if (testf) then begin
     stopf = false;
     for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(CuAccr,i,CuAccrw);
        if (stopf==false) then begin
          if (CuAccrw.InvNr==BlankLong) then begin
            sd = CuAccrw.PlanDate;
            stopf = true;
          end;
        end;
     end;
     if (nonblankdate(sd)==false) then begin 
       testf = false; 
     end;
     if (GetObjBal(CuAccr.MainAcc,CuAccr.Objects,ObjBalr)==false) then begin
       testf = false;
     end;
     GetAccStartBalance3(CurBal,CuAccr.MainAcc,CuAccr.Objects,sd,ObjBalr,0,0,"");
     if (CurBal==0) then begin 
       testf = false; 
     end;
     if (testf) then begin
       stopf = false;
       if (RepSpec.flags[0]==0) then begin       
         for (i=0;i<rwcnt;i=i+1) begin
          if (stopf==false) then begin
            MatRowGet(CuAccr,i,CuAccrw);
            if (CuAccrw.InvNr<>BlankLong) then begin
              instnr = instnr - t1;
            end else begin
              if (instnr<>0) then begin
                diff = CurBal/instnr;    
                CuAccrw.ValStr = diff;
                MatRowPut(CuAccr,i,CuAccrw);
                instnr = instnr - t1;
                CurBal = CurBal - diff;
              end else begin
                stopf = true;;
              end;
            end;
          end;  
         end;
       end;
         if (RepSpec.flags[0]==1) then begin
           record IRVc IRr;
           row IRVc IRrw;
           val p,interest,tmp;
           Integer ircnt;
   
           interest = 1;     
           IRr.Code = CuAccr.IntCode;
           IRr.startDate = CuAccr.TransDate;
           if (ReadFirstMain(IRr,2,true)) then begin
              ircnt = MatRowCnt(IRr);     
              if (ircnt>0) then begin
                MatRowGet(IRr,0,IRrw);
                interest = IRrw.rate;
                interest = interest/100;
              end;  
           end;   
           tmp = interest + t1;
           p = tmp;
           ircnt = CuAccr.InstNr;
           for (i=1;i<ircnt;i=i+1) begin
             p = tmp * p;
           end;   
           p = t1/p;
           p = t1 - p;
           p = interest/p;
           p = p * CurBal;   
           for (i=0;i<rwcnt;i=i+1) begin
            if (stopf==false) then begin
                MatRowGet(CuAccr,i,CuAccrw);
                if (CuAccrw.InvNr!=-1) then begin
                  val t;
         
                  instnr = instnr - t1;
                  t = StringToVal(CuAccrw.ValStr,M4Val);
                  CurBal = CurBal - t;
                end else begin
                  if (instnr<>0) then begin
                    tmp = CurBal* interest;   
                    diff = p - tmp;                    
                    CuAccrw.ValStr = diff;
                    MatRowPut(CuAccr,i,CuAccrw);
                    instnr = instnr - t1;
                    CurBal = CurBal - diff;
                  end else begin
                    stopf = true;
                  end;
                end;
              end;  
           end; 
       end;       
       stopf = RecordStore(CuAccr,true);
       CheckFlush(flushcnt,10);
     end;  
   end;
   end; 
 end; 
 EndJob; 
 RETURN;
END;
