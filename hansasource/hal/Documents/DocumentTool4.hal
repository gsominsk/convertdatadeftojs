external procedure GetCurncyComment(string,var string);
external function Boolean FindCustomerRelation(string,string,var record CUVc);
external function Date FindDueDateInAccPeriod(Date);
external procedure GetSerRange(string,LongInt,var LongInt,var LongInt);
external function LongInt DateDiff(Date,Date);
external function Boolean GetPD(var record PDVc);
external procedure GetUserAccessGroup(string,var string);

global
function Boolean FindFormcode(Integer OKFlag,Integer Typ)
BEGIN
  Boolean res;
  
  res = true;
  switch (Typ) begin
    case 1: if (OKFlag==0) then begin res = false; end;
    case 2: if (OKFlag!=0) then begin res = false; end;
  end;
  FindFormcode = res;
  RETURN;
END;

global
function Boolean Getformcode(Integer rowno,Integer defintdocnr,string defformcode,string defusergroup,string deflangcode,
                             LongInt defsernr,LongInt sernr,string defprintgroupcode,
                             string vclangcode,Integer intdocnr,string vcname,var string resfromcode)
BEGIN
  Boolean res;
  Boolean langtest,sertest,intnrtest,usergrtest;
  LongInt serstart,serend;
  string 5 usergroup;
  
  langtest = false;
  sertest = false;
  intnrtest = false;
  usergrtest = false;
  
  if (blank(defformcode)) then begin goto LGetformcode; end;
  
  GetUserAccessGroup(CurrentUser,usergroup);
  GetSerRange(vcname,sernr,serstart,serend);
//  StopAlert("defsernr1 " & defsernr & " serstart " & serstart & " serend " & serend);
  if (intdocnr==defintdocnr) then begin intnrtest = true; end;
  if ((intdocnr==1) and (defintdocnr==-1)) then begin intnrtest = true; end;
  if ((defsernr==-1) or
      ((defsernr>=serstart) and (defsernr<=serend))) then begin
    sertest = true;
  end;
  if (vclangcode==deflangcode) then begin
    langtest = true;
  end;
/*  
make sequence of documents print invoice,
put language on invoice print it, 
I changed the code befor calling Getformcode
  if (((blank(deflangcode)) and (intdocnr==1)) or 
      (vclangcode==deflangcode)) then begin
    langtest = true;
  end;
*/  
  if ((blank(defusergroup)) or 
      (SetInSet(defusergroup,usergroup))) then begin
    usergrtest = true;
  end;
  if (langtest and sertest and intnrtest and usergrtest) then begin
    SetPrinter(defprintgroupcode);  
    resfromcode = defformcode;
    res = true;
  end;
LGetformcode:
  Getformcode = res;
  RETURN;
END;

global
function Boolean GetformcodeWithPrintGroupCode(Integer rowno,Integer defintdocnr,string defformcode,string defusergroup,string deflangcode,
                             LongInt defsernr,string defprintgroupcode,
                             LongInt sernr,string printgroupcode,string vclangcode,Integer intdocnr,string vcname,var string resfromcode)
BEGIN
  Boolean res;
  Boolean langtest,sertest,intnrtest,usergrtest,printgroupcodetest;
  LongInt serstart,serend;
  string 5 usergroup;
  
  langtest = false;
  sertest = false;
  intnrtest = false;
  usergrtest = false;
  printgroupcodetest = false;
  
  GetUserAccessGroup(CurrentUser,usergroup);
  GetSerRange(vcname,sernr,serstart,serend);
//  StopAlert("defsernr1 " & defsernr & " serstart " & serstart & " serend " & serend);
  if (intdocnr==defintdocnr) then begin intnrtest = true; end;
  if ((intdocnr==1) and (defintdocnr==-1)) then begin intnrtest = true; end;
  if ((defsernr==-1) or
      ((defsernr>=serstart) and (defsernr<=serend))) then begin
    sertest = true;
  end;
  if (vclangcode==deflangcode) then begin
    langtest = true;
  end;
/*  
make sequence of documents print invoice,
put language on invoice print it, 
I changed the code befor calling Getformcode
  if (((blank(deflangcode)) and (intdocnr==1)) or 
      (vclangcode==deflangcode)) then begin
    langtest = true;
  end;
*/  
  if ((blank(defusergroup)) or 
      (usergroup==defusergroup)) then begin
    usergrtest = true;
  end;
  if ((blank(defprintgroupcode)) or 
      (printgroupcode==defprintgroupcode)) then begin
    printgroupcodetest = true;
  end;
  if (langtest and sertest and intnrtest and usergrtest and printgroupcodetest) then begin
    SetPrinter(defprintgroupcode);  
    resfromcode = defformcode;
    res = true;
  end;
  GetformcodeWithPrintGroupCode = res;
  RETURN;
END;

global
function Integer CountNrofItemsSH(record SHVc SHr)
BEGIN
  Integer res;
  Integer i,j,rwcnt;
  row SHVc SHrw;
  row SHVc SH2rw;

  rwcnt = MatRowCnt(SHr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SHr,i,SHrw);
    for (j=0;j<i;j=j+1) begin
      MatRowGet(SHr,j,SH2rw);
      if (SHrw.ArtCode==SH2rw.ArtCode) then begin
        goto LCountNrofItemsSH;
      end;
    end;
    res = res + 1;
LCountNrofItemsSH:;      
  end;  
  CountNrofItemsSH = res;
  RETURN;
END;

global
function Integer CountNrofItemsProdOperation(record ProdOperationVc ProdOpr)
BEGIN
  Integer res;
  Integer i,j,rwcnt;
  row ProdOperationVc ProdOprw;
  row ProdOperationVc ProdOp2rw;

  rwcnt = MatRowCnt(ProdOpr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ProdOpr,i,ProdOprw);
    for (j=0;j<i;j=j+1) begin
      MatRowGet(ProdOpr,j,ProdOp2rw);
      if (ProdOprw.Item==ProdOp2rw.Item) then begin
        goto LCountNrofItemsProdOperation;
      end;
    end;
    res = res + 1;
LCountNrofItemsProdOperation:;      
  end;  
  CountNrofItemsProdOperation = res;
  RETURN;
END;

global
function Integer CountNrofItemsStockMovement(record StockMovVc StockMovr)
begin
  Integer res;
  Integer i,j,rwcnt;
  row StockMovVc StockMovrrw;
  row StockMovVc StockMovr2rw;

  rwcnt = MatRowCnt(StockMovr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(StockMovr,i,StockMovrrw);
    for (j=0;j<i;j=j+1) begin
      MatRowGet(StockMovr,j,StockMovr2rw);
      if (StockMovrrw.ArtCode==StockMovr2rw.ArtCode) then begin
        goto LCountNrofItemsStockMovement;
      end;
    end;
    res = res + 1;
LCountNrofItemsStockMovement:;      
  end;  
  CountNrofItemsStockMovement = res;
  RETURN;
END;

global
function Integer CountNrofItemsIV(record IVVc IVr)
BEGIN
  Integer res;
  Integer i,j,rwcnt;
  row IVVc IVrw;
  row IVVc IV2rw;

  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    for (j=0;j<i;j=j+1) begin
      MatRowGet(IVr,j,IV2rw);
      if (IVrw.ArtCode==IV2rw.ArtCode) then begin
        goto LCountNrofItemsIV;
      end;
    end;
    res = res + 1;
LCountNrofItemsIV:;      
  end;  
  CountNrofItemsIV = res;
  RETURN;
END;

global
function Integer CountNrofItemsOR(record ORVc ORr)
BEGIN
  Integer res;
  Integer i,j,rwcnt;
  row ORVc ORrw;
  row ORVc OR2rw;

  rwcnt = MatRowCnt(ORr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORr,i,ORrw);
    for (j=0;j<i;j=j+1) begin
      MatRowGet(ORr,j,OR2rw);
      if (ORrw.ArtCode==OR2rw.ArtCode) then begin
        goto LCountNrofItemsOR;
      end;
    end;
    res = res + 1;
LCountNrofItemsOR:;      
  end;  
  CountNrofItemsOR = res;
  RETURN;
END;

global
procedure CalcDueDate(string paydeal,Date tdp,var Date resp)
BEGIN
  record PDVc PDr;
  LongInt restdays;
  
  resp = tdp;
  PDr.Code = paydeal;
  if (GetPD(PDr)) then begin  
    resp = AddDay(tdp,PDr.pdays);
    switch (PDr.PDType) begin
      case 4:
        resp = tdp;
        resp = AddMonth(resp,1);
        if (PDr.pdays==0) then begin
          resp = AddMonth(resp,1);
        end;
        resp = AddDay(resp,-GetDay(resp) + 1);
        restdays = DateDiff(resp,tdp);
        if (PDr.pdays>=0) then begin
          restdays = restdays - 1;
        end;
        restdays = PDr.pdays + restdays;
        resp = AddDay(tdp,restdays);
      case 6:
        resp = FindDueDateInAccPeriod(tdp);
        if (PDr.pdays>0) then begin
          resp = AddDay(resp,PDr.pdays);
        end;
    end;    
  end;  
  RETURN;
END;

global
function Integer SetDateOrder(string langcode)
BEGIN
  Integer res;
  Integer vatl;
  record CYBlock CompYear;
  record SysFormatBlock SysFormatRec;

  BlockLoad(CompYear);
  BlockLoad(SysFormatRec);  
  res = SysFormatRec.dateOrder;
  if (nonblank(CompYear.LangCode)) then begin
    if (CompYear.LangCode==langcode) then begin
/* KSZ:: why did we have this?? makes no sense 
      if (HasLocalization("LVA")) then begin
        res = 3;//LangLatvian
      end;
*/
    end;
  end;
  SetDateOrder = res;
  RETURN;
END;

// Moved FindCustomerRelation to CUVcWactionTool.hal

global
procedure GetContactTitle(string custcode,string contact,var string res)
BEGIN
  record CUVc CUr;
  
  res = "";
  if (FindCustomerRelation(custcode,contact,CUr)) then begin
    res = CUr.Title;
  end else begin
    CUr.Code = custcode;
    if (ReadFirstMain(CUr,1,true)) then begin
      if (CUr.Person==contact) then begin
        res = CUr.Title;
      end;
    end;
  end;
  RETURN;
END;

global
procedure SetFaxInfo(string clientcontact,string addr,string faxno,string docname)
BEGIN
  record CYBlock CYr;
  BlockLoad(CYr);
  
  SetFaxContact(clientcontact);
  SetFaxAddress(CYr.CompName);
 // SetFaxAddress(addr);
  SetFaxNumber(faxno);
  SetFaxDocName(docname);
  RETURN;
END;

global
procedure IVSetFax(record CUVc CUr,record IVVc IVr)
BEGIN
  record CUVc ContactCUr;
  string 50 contact,addr,faxno;
  
  contact = IVr.ClientContact;
  addr = IVr.Addr0;
  faxno = IVr.Fax;
  if (blank(contact)) then begin
    contact = CUr.Person;
  end;
  if (blank(addr)) then begin
    addr = CUr.InvAddr0;
  end;
  if (blank(faxno)) then begin
    faxno = CUr.Fax;
  end;
  if ((blank(contact)) or (blank(addr)) or (blank(faxno))) then begin
    if (FindCustomerRelation(IVr.CustCode,IVr.ClientContact,ContactCUr)) then begin
      if (blank(contact)) then begin
        contact = ContactCUr.Name;
      end;
      if (blank(addr)) then begin
        addr = ContactCUr.InvAddr0;
      end;
      if (blank(faxno)) then begin
        faxno = ContactCUr.Fax;
      end;
    end;
  end;
  SetFaxInfo(contact,addr,faxno,USetStr(1808));  
  RETURN;
END;

global
procedure ORSetFax(record CUVc CUr,record ORVc ORr)
BEGIN
  record CUVc ContactCUr;
  string 50 contact,addr,faxno;
  
  contact = ORr.CustContact;
  addr = ORr.Addr0;
  faxno = ORr.Fax;
  if (blank(contact)) then begin
    contact = CUr.Person;
  end;
  if (blank(addr)) then begin
    addr = CUr.InvAddr0;
  end;
  if (blank(faxno)) then begin
    faxno = CUr.Fax;
  end;
  if ((blank(contact)) or (blank(addr)) or (blank(faxno))) then begin
    if (FindCustomerRelation(ORr.CustCode,ORr.CustContact,ContactCUr)) then begin
      if (blank(contact)) then begin
        contact = ContactCUr.Name;
      end;
      if (blank(addr)) then begin
        addr = ContactCUr.InvAddr0;
      end;
      if (blank(faxno)) then begin
        faxno = ContactCUr.Fax;
      end;
    end;
  end;
  SetFaxInfo(contact,addr,faxno,USetStr(1816));  
  RETURN;
END;

global
procedure COSetFax(record CUVc CUr,record COVc COr)
BEGIN
  record CUVc ContactCUr;
  string 50 contact,addr,faxno;
  
  contact = COr.ClientContact;
  addr = COr.Addr0;
  faxno = COr.Fax;
  if (blank(contact)) then begin
    contact = CUr.Person;
  end;
  if (blank(addr)) then begin
    addr = CUr.InvAddr0;
  end;
  if (blank(faxno)) then begin
    faxno = CUr.Fax;
  end;
  if ((blank(contact)) or (blank(addr)) or (blank(faxno))) then begin
    if (FindCustomerRelation(COr.CustCode,COr.ClientContact,ContactCUr)) then begin
      if (blank(contact)) then begin
        contact = ContactCUr.Name;
      end;
      if (blank(addr)) then begin
        addr = ContactCUr.InvAddr0;
      end;
      if (blank(faxno)) then begin
        faxno = ContactCUr.Fax;
      end;
    end;
  end;
  SetFaxInfo(contact,addr,faxno,USetStr(1816));  
  RETURN;
END;

global
procedure PUSetFax(record CUVc VEr,record PUVc PUr)
BEGIN
  string 60 contact,addr,faxno;
  
  contact = "";
  addr = PUr.VEName;
  faxno = ""; // No fax 
  if (blank(contact)) then begin
    contact = VEr.Person;
  end;
  if (blank(addr)) then begin
    addr = VEr.InvAddr0;
  end;
  if (blank(faxno)) then begin
    faxno = VEr.Fax;
  end;
  SetFaxInfo(contact,addr,faxno,USetStr(1816));  
  RETURN;
END;

global
procedure QTSetFax(record CUVc CUr,record QTVc QTr)
BEGIN
  record CUVc ContactCUr;
  string 50 contact,addr,faxno;
  
  contact = QTr.CustContact;
  addr = QTr.Addr0;
  faxno = QTr.Fax;
  if (blank(contact)) then begin
    contact = CUr.Person;
  end;
  if (blank(addr)) then begin
    addr = CUr.InvAddr0;
  end;
  if (blank(faxno)) then begin
    faxno = CUr.Fax;
  end;
  if ((blank(contact)) or (blank(addr)) or (blank(faxno))) then begin
    if (FindCustomerRelation(QTr.CustCode,QTr.CustContact,ContactCUr)) then begin
      if (blank(contact)) then begin
        contact = ContactCUr.Name;
      end;
      if (blank(addr)) then begin
        addr = ContactCUr.InvAddr0;
      end;
      if (blank(faxno)) then begin
        faxno = ContactCUr.Fax;
      end;
    end;
  end;
  SetFaxInfo(contact,addr,faxno,USetStr(1820));  
  RETURN;
END;

global
procedure OYSetFax(record CUVc CUr,record OYVc OYr)
begin
  record CUVc ContactCUr;
  string 50 contact,addr,faxno;
  
  contact = OYr.CustContact;
  addr = OYr.Addr0;
  faxno = OYr.Fax;
  if (blank(contact)) then begin
    contact = CUr.Person;
  end;
  if (blank(addr)) then begin
    addr = CUr.InvAddr0;
  end;
  if (blank(faxno)) then begin
    faxno = CUr.Fax;
  end;
  if ((blank(contact)) or (blank(addr)) or (blank(faxno))) then begin
    if (FindCustomerRelation(OYr.CustCode,OYr.CustContact,ContactCUr)) then begin
      if (blank(contact)) then begin
        contact = ContactCUr.Name;
      end;
      if (blank(addr)) then begin
        addr = ContactCUr.InvAddr0;
      end;
      if (blank(faxno)) then begin
        faxno = ContactCUr.Fax;
      end;
    end;
  end;
  SetFaxInfo(contact,addr,faxno,USetStr(1820));  
  return;
end;

global
procedure LetSetFax(record CUVc CUr,record LetVc Letr)
BEGIN
  record CUVc ContactCUr;
  string 50 contact,addr,faxno;
  
  contact = Letr.Contact;
  addr = Letr.Name;
  faxno = Letr.Fax;
  if (blank(contact)) then begin
    contact = CUr.Person;
  end;
  if (blank(addr)) then begin
    addr = CUr.Name;
  end;
  if (blank(faxno)) then begin
    faxno = CUr.Fax;
  end;
  if ((blank(contact)) or (blank(addr)) or (blank(faxno))) then begin
    if (FindCustomerRelation(Letr.CustCode,Letr.Contact,ContactCUr)) then begin
      if (blank(contact)) then begin
        contact = ContactCUr.Name;
      end;
      if (blank(addr)) then begin
        addr = ContactCUr.Name;
      end;
      if (blank(faxno)) then begin
        faxno = ContactCUr.Fax;
      end;
    end;
  end;
  SetFaxInfo(contact,addr,faxno,USetStr(1838));  
  RETURN;
END;

global
procedure ActSetFax(record CUVc CUr,record ActVc Actr)
BEGIN
  record CUVc ContactCUr;
  string 50 contact,addr,faxno;
  
  contact = Actr.Contact;
  addr = Actr.CUName;
  if (blank(contact)) then begin
    contact = CUr.Person;
  end;
  if (blank(addr)) then begin
    addr = CUr.InvAddr0;
  end;
  if (blank(faxno)) then begin
    faxno = CUr.Fax;
  end;
  if ((blank(contact)) or (blank(addr)) or (blank(faxno))) then begin
    if (FindCustomerRelation(Actr.CUCode,Actr.Contact,ContactCUr)) then begin
      if (blank(contact)) then begin
        contact = ContactCUr.Name;
      end;
      if (blank(addr)) then begin
        addr = ContactCUr.InvAddr0;
      end;
      if (blank(faxno)) then begin
        faxno = ContactCUr.Fax;
      end;
    end;
  end;
  SetFaxInfo(contact,addr,faxno,USetStr(1845));  
  RETURN;
END;

global
procedure RussianPayVal(var string res,val vp,Integer CutDecimals)
BEGIN
  string 255 tstr;

  tstr = ValToString(vp,M4Val,"","",CutDecimals);
  res = Left(tstr,len(tstr)-2) & "-" & Right(tstr,2);
  RETURN;
END;

global
procedure BielrussianPayVal(var string res,val vp,Integer CutDecimals)
BEGIN
  res = ValToString(vp,M4Val,"","",CutDecimals);
  res = Left(res,len(res)-2) & "=";
  RETURN;
END;

global
procedure PrintCurrencyCode(string formfield,string acurrency)
begin
  string 255 currency;
  
  currency = acurrency;  
  if (blank(currency)) then begin
    record BaseCurBlock BCb;
    
    BlockLoad(BCb);
    currency = BCb.BaseCur1;
  end;
  OUTFORMFIELD(formfield,currency);
  return;
end;

global
procedure PrintCurrencyName(string formfield,string acurrency)
begin
  string 255 currency,tstr;
  
  currency = acurrency;  
  if (blank(currency)) then begin
    record BaseCurBlock BCb;
    
    BlockLoad(BCb);
    currency = BCb.BaseCur1;
  end;
  GetCurncyComment(currency,tstr);
  OUTFORMFIELD(formfield,tstr);
  return;
end;
