external updating procedure StorePOSJournalInvoiceEntry(string,string,string,string,string,LongInt,Integer);
external procedure PrintCurrencyCode(string,string);
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external function Boolean UseTaxTemplatesforTaxCalc();
external procedure GetVATRowFromBlock(string,record VATCodeBlock,var row VATCodeBlock);
external procedure InvVat(Integer,Integer,Integer,Integer,string,val,var val,var val,var val,var val,var val);
external procedure GetUserName(string,var string);
external function roundmode GetTotalRoundMode(record RoundBlock);
external function roundmode GetVATRoundMode(record RoundBlock);
external procedure GetVATText(string,var string);
external function Boolean GetVATincl(string,var val,var Integer);
external function Boolean GetVAT2(string,var val,var Integer,Integer);
external function roundmode GetVATRoundModeRB();
external function roundmode DefaultRoundMode();
external function roundmode SetRoundModeD(Integer);
external procedure GetFieldArgument(record DocVc,Integer,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure ValToText(val,Integer,string,string,var string);
external procedure SelectUnitText(string,string,var string);
external procedure OutAddress(string,string,string,string,string,string,string);
external function string 255 MakeCroatianControlCode(date,time,string,string,string,val);
external procedure RestAccToKitchenOrder(record RestAccVc,var record KitchenOrderVc);
external procedure RestAccSumup(var record RestAccVc,string);
external procedure PrintValueInclZero(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external procedure GetPayDealText(string,string,var string);
external procedure GetCreditCardType(string,var string);
external procedure PrintValue(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external function Boolean Getformcode(Integer,Integer,string,string,string,LongInt,LongInt,string,string,Integer,string,var string);
external function Boolean GetformcodeWithPrintGroupCode(Integer,Integer,string,string,string,LongInt,string,LongInt,string,string,Integer,string,var string);
external procedure GetLangNr(string,var record LangNrVc);
external function Integer NumberofDocumentPages(string,Integer);
external procedure CommonDocumentFields(record RcVc);
external procedure GetVATproc(string,Integer,var val);

procedure PrintTaxMatrix_RestAccVc(record RestAccVc RestAccr,record DocVc Docr,record LangNrVc LangNrr,record SysFormatBlock SFb)
begin
  record TaxMatrixVc TMr;
  row TaxMatrixVc TMrw;
  Integer i,rwcnt;
  row VATCodeBlock VATCbrw;
  record VATCodeBlock VATCodeb;
  val t;
  Integer valtyp;
  string 255 tstr;

  BlockLoad(VATCodeb);
  UnpackFieldMatrix(RestAccr,"TaxMatrix",TMr);
  rwcnt = MatRowCnt(TMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TMr,i,TMrw);
    GetVATRowFromBlock(TMrw.VATCode,VATCodeb,VATCbrw);
    OUTFORMFIELD("F_MOMSKODTOTAL",TMrw.VATCode);    
    OUTFORMFIELD("F_VATCOMMENT",VATCbrw.Comment);

//    GetVATproc(TMrw.VATCode,0,t);
    PrintValueInclZero("F_VATEXCLPRC",TMrw.VATRate,M4Val,LangNrr,SFb,false);    
    if (FIELDINFORM("F_VATBASE")) then begin
      valtyp = M4Val;
      GetFieldArgument(Docr,F_VATBASE,tstr);
      if (tstr=="-") then begin
        valtyp = M4NegVal;
      end;
      PrintValueInclZero("F_VATBASE",TMrw.BaseSum,valtyp,LangNrr,SFb,false);
    end;    
    if (FIELDINFORM("F_VATVAL")) then begin
      valtyp = M4Val;
      GetFieldArgument(Docr,F_VATVAL,tstr);
      if (tstr=="-") then begin
        valtyp = M4NegVal;
      end;
      PrintValueInclZero("F_VATVAL",TMrw.VATSum,valtyp,LangNrr,SFb,false);
    end;
  end;
  return;
end;

procedure PrintBarTab_PaymentRow(row RestAccVc Tabrw,record LangNrVc LangNrr,record SysFormatBlock SysFormatb)
begin
  string 255 tstr;

  switch (Tabrw.stp) begin
    case kInvoiceRowTypeGiftVoucherPayment:
//      OUTFORMFIELD("F_ROWNAME",USetStr(8113));
//      OUTFORMFIELD("F_SPECIFIKATION",Tabrw.Spec);      
      OUTFORMFIELD("F_GCNr",Tabrw.GCNr);
//      PrintValue("F_SUMMA",Tabrw.Sum,M4Val,LangNrr,SysFormatb,false);          

      OUTFORMFIELD("F_PAYMODEROW",USetStr(8113));
      OUTFORMFIELD("F_PAYMODESUMTEXT",Tabrw.Spec);      
      PrintValue("F_PAYMODESUMAMOUNT",Tabrw.Sum,M4Val,LangNrr,SysFormatb,false);          
    case kInvoiceRowTypeLoyaltyPointsPayment:
      OUTFORMFIELD("F_PAYMODEROW",USetStr(19300));
      OUTFORMFIELD("F_PAYMODESUMTEXT",Tabrw.Spec);      
      PrintValue("F_PAYMODESUMAMOUNT",Tabrw.Sum,M4Val,LangNrr,SysFormatb,false);          
    case kInvoiceRowTypeCashPayment:
//      OUTFORMFIELD("F_ROWNAME",USetStr(8114));
//      OUTFORMFIELD("F_SPECIFIKATION",Tabrw.Spec);
      PrintCurrencyCode("F_RECCURENCY",Tabrw.CurncyCode);
//      PrintValue("F_SUMMA",Tabrw.Sum,M4Val,LangNrr,SysFormatb,false);          

      OUTFORMFIELD("F_PAYMODEROW",USetStr(8114));
      OUTFORMFIELD("F_PAYMODESUMTEXT",Tabrw.Spec);      
      PrintValue("F_PAYMODESUMAMOUNT",Tabrw.Sum,M4Val,LangNrr,SysFormatb,false);          
    case kInvoiceRowTypeCreditCardPayment:
//      OUTFORMFIELD("F_ROWNAME",USetStr(8109));
//      OUTFORMFIELD("F_SPECIFIKATION",Tabrw.Spec);
      OUTFORMFIELD("F_CREDCARDROW",Tabrw.CreditCard);  
      if (FIELDINFORM("F_CREDCARDTYPEROW")) then begin
        GetCreditCardType(Tabrw.CreditCard,tstr);
        OUTFORMFIELD("F_CREDCARDTYPEROW",tstr);
      end;  
      OUTFORMFIELD("F_AUTHORIZATIONROW",Tabrw.AuthorizationCode);        
//      PrintValue("F_SUMMA",Tabrw.Sum,M4Val,LangNrr,SysFormatb,false);          

      OUTFORMFIELD("F_PAYMODEROW",USetStr(8109));
      OUTFORMFIELD("F_PAYMODESUMTEXT",Tabrw.Spec);      
      PrintValue("F_PAYMODESUMAMOUNT",Tabrw.Sum,M4Val,LangNrr,SysFormatb,false);          
  end;

  return;
end;      

procedure PrintRestAccRows(record RcVc RepSpec,record RestAccVc Tabr,record SysFormatBlock SysFormatb,record LangNrVc LangNrr,string formcode,Boolean readf)
begin
  Integer i,rwcnt,InclVAT,vatcnt,valtyp,rn,NoTAXonVAT,ExportFlag;
  row RestAccVc Tabrw;
  string 255 tstr;
  val v,t,t2,temp,mRate,vatval,vatv,totvatval,totrowtot,totvatbase,t1,vatbase,vattot,vatinclprc,vatexclprc;
  Boolean testf,negamountf,UseTaxTemplatesforTaxCalcf;
  record StandProblemVc StPr;
  record MainStockBlock MSb;
  record INVc INr;
  record DocVc Docr;
  record RoundBlock Roundb; 
  record SysFormatBlock SFb;
  record SMVc VATr;
  row SMVc VATrw;
  val vatprc,vatval2,vatexclprc2,vatinclprc2,rowtax;

  Docr.Code = formcode;
  if (ReadFirstMain(Docr,1,true)) then begin
  end;  
  
  ExportFlag = kExportFlagDomestic;
  NoTAXonVAT = 0;     // To be implemented still. // NoTAXonVAT = Tabr.NoTAXonVAT
  InclVAT = Tabr.InclVAT;   // To be implemented still.
  negamountf = false; // no credit bar tab rows defined.
  
  BlockLoad(SFb);  
  BlockLoad(Roundb);
  BlockLoad(SFb);
  BlockLoad(MSb);  
  UseTaxTemplatesforTaxCalcf = UseTaxTemplatesforTaxCalc;
  
  if (readf) then begin
    ReadFirstMain(Tabr,1,true);
  end;
  rwcnt = MatRowCnt(Tabr);
  if (UseTaxTemplatesforTaxCalcf==false) then begin
    SetupVATBase(VATr,vatcnt);
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Tabr,i,Tabrw);
    if (UseTaxTemplatesforTaxCalcf==false) then begin
      AddVATBase(VATr,Tabrw.VATCode,Tabrw.Sum,blankval,vatcnt,InclVAT,0);
    end;
    InvVat(Tabrw.stp,InclVAT,NoTAXonVAT,ExportFlag,Tabrw.VATCode,Tabrw.Sum,vatprc,vatval2,vatexclprc2,vatinclprc2,rowtax);
    switch (Tabrw.stp) begin
      case kInvoiceRowTypeNormal:
        testf = true;
        switch (RepSpec.repname) begin
          case "RestAccKitchenForm":
            if (Tabrw.AlreadyPrintedToKitchen!=0) then begin testf = false; end;
//            if (Tabrw.ovst!=0) then begin testf = false; end;            
          case "RestAccForm":
//            if (Tabrw.AlreadyPrinted!=0) then begin testf = false; end;
            if (Tabrw.ovst!=0) then begin testf = false; end;
          otherwise
            if (Tabrw.AlreadyPrinted!=0) then begin testf = false; end;
        end;
        if (blank(Tabrw.Spec)) then begin testf = false; end;
        if (testf) then begin
          RecordClear(INr);
          INr.Code = Tabrw.ArtCode;
          if (ReadFirstItem(Tabrw.ArtCode,INr,true,true)) then begin
          end;        
          StPr.Code = Tabrw.StandProblemCode;
          ReadFirstMain(StPr,1,true);
          OUTFORMFIELD("F_ROWNR",i+1); 
          OUTFORMFIELD("F_ARTNR",Tabrw.ArtCode);
          OUTFORMFIELD("F_ANTAL",Tabrw.Quant);
          if (Tabrw.ovst!=0) then begin 
            OUTFORMFIELD("F_SPECIFIKATION",USetStr(33705) & " " & Tabrw.Spec);
          end else begin
            OUTFORMFIELD("F_SPECIFIKATION",Tabrw.Spec);
          end;
          OUTFORMFIELD("F_ROWPRICE",Tabrw.Price);
          PrintValueInclZero("F_BELOPP",Tabrw.Sum,M4Val,LangNrr,SFb,negamountf);
          if (FIELDINFORM("F_APRIS")) then begin  //unit price
            GetFieldArgument(Docr,F_APRIS,tstr);
            if (nonblank(tstr)) then begin
              t = Round(Tabrw.Price,SetRoundModeD(StringToInt(tstr)));
              PrintValueInclZero("F_APRIS",t,M423Val,LangNrr,SFb,negamountf);
            end else begin
              if (Roundb.Discount==0) then begin
                t = Round(Tabrw.Price,SetRoundModeD(3));
              end else begin
                t = Round(Tabrw.Price,DefaultRoundMode);
              end;
              PrintValueInclZero("F_APRIS",t,M423Val,LangNrr,SFb,negamountf);
            end;  
          end;
          if (FIELDINFORM("F_ROWBASE")) then begin
            MulVATIV(Tabrw.VATCode,Tabrw.Sum,t,t2,InclVAT,0);
            if (InclVAT!=0) then begin            
              v = Tabrw.Sum - t;
            end else begin
              v = Tabrw.Sum;
            end;
            GetFieldArgument(Docr,F_ROWBASE,tstr);
            if (blank(v)) then begin v = blankval; end;          
            if (nonblank(tstr)) then begin
              if (blank(Tabrw.Sum)) then begin v = blankval; end;          
              PrintValueInclZero("F_ROWBASE",Round(v,SetRoundModeD(StringToInt(tstr))),M45Val,LangNrr,SFb,negamountf);
            end else begin
              if (blank(Tabrw.Sum)) then begin v = blankval; end;          
              PrintValueInclZero("F_ROWBASE",v,M4Val,LangNrr,SFb,negamountf);
            end;
          end;                
          if (FIELDINFORM("F_ENHET")) then begin
            SelectUnitText(Tabr.LangCode,INr.Unittext,tstr);    
            OUTFORMFIELD("F_ENHET",tstr);   
          end;          
//          temp = (Tabrw.Price * Tabrw.Quant);
//          OUTFORMFIELD("F_SUMMA",temp); // Why is F_SUMMA used here??? F_SUMMA is not used for row sum in any other record, it's used for the total sum of all rows...
          GetVATproc(Tabrw.VATCode,0,mRate);
          OUTFORMFIELD("F_REASON",Tabrw.StandProblemCode);
          OUTFORMFIELD("F_REASONTEXT",StPr.ShortDesc);
          OUTFORMFIELD("F_MOMSKOD",Tabrw.VATCode);
          PrintValue("F_ROWTOT",Tabrw.Sum,M4Val,LangNrr,SFb,negamountf);
          PrintValue("F_RABATT",Tabrw.vRebate,M4Val,LangNrr,SysFormatb,false);
          EndFormRow;
        end;
      case kInvoiceRowTypeVoid:
        testf = true;
        switch (RepSpec.repname) begin
          case "RestAccKitchenForm":
            if (Tabrw.AlreadyPrintedToKitchen!=0) then begin testf = false; end;
          case "RestAccForm":
            testf = false;
          otherwise
            if (Tabrw.AlreadyPrinted!=0) then begin testf = false; end;
        end;
        if (blank(Tabrw.Spec)) then begin testf = false; end;
        if (testf) then begin
          StPr.Code = Tabrw.StandProblemCode;
          ReadFirstMain(StPr,1,true);
          OUTFORMFIELD("F_ROWNAME",USetStr(1216));
          OUTFORMFIELD("F_ROWNR",i+1); 
          OUTFORMFIELD("F_ARTNR",Tabrw.ArtCode);
          OUTFORMFIELD("F_ANTAL",Tabrw.Quant);
          OUTFORMFIELD("F_SPECIFIKATION",Tabrw.Spec);
          OUTFORMFIELD("F_ROWPRICE",Tabrw.Price);
//          temp = (Tabrw.Price * Tabrw.Quant);
//          OUTFORMFIELD("F_SUMMA",temp); // Why is F_SUMMA used here??? F_SUMMA is not used for row sum in any other record, it's used for the total sum of all rows...
          PrintValue("F_ROWTOT",Tabrw.Sum,M4Val,LangNrr,SFb,negamountf);
          PrintValue("F_RABATT",Tabrw.vRebate,M4Val,LangNrr,SysFormatb,false);
          GetVATproc(Tabrw.VATCode,0,mRate);
          EndFormRow;
        end;
      otherwise
        PrintBarTab_PaymentRow(Tabrw,LangNrr,SysFormatb);
    end;
    tstr = "";
    if (HasLocalization("POL")) then begin
      if (nonblank(Tabrw.Sum)) then begin
        if (nonblank(vatinclprc2)) then begin
          if ((vatinclprc2==0) and (nonblank(vatexclprc2))) then begin
            tstr = USetStr(8111);
          end;
        end;
        if ((vatinclprc2==0) and (nonblank(vatinclprc2))) then begin
          if (blank(vatexclprc2)) then begin
            tstr = USetStr(8110);
          end;
        end;
      end;
      if (blank(tstr)) then begin
        tstr = ValToString(vatexclprc2,M4UVal,SFb.thousSep,SFb.decimalPt,LangNrr.CutDecimals);
      end;
      if (blank(tstr)) then begin
        tstr = USetStr(1244);
      end;
      OUTFORMFIELD("F_ROWVATEXCLPRC",tstr);    
    end else begin
      if (nonblank(Tabrw.Sum)) then begin
        if (blank(tstr)) then begin
          tstr = ValToString(vatexclprc2,M4UVal,SFb.thousSep,SFb.decimalPt,LangNrr.CutDecimals);
        end;
        if (blank(tstr)) then begin
          tstr = USetStr(1244);
        end else begin
          tstr = tstr & "%";
        end;
        OUTFORMFIELD("F_ROWVATEXCLPRC",tstr);
      end;
    end;
    if (blank(vatprc)) then begin
      PrintValue("F_ROWVATPRC",0,M4Val,LangNrr,SFb,negamountf);
    end else begin
      PrintValueInclZero("F_ROWVATPRC",vatprc,M4Val,LangNrr,SFb,negamountf);
    end;  
    if (nonblank(Tabrw.ArtCode)) then begin
      if (FIELDINFORM("F_ROWVATVAL")) then begin
        if (true) then begin//nonblank(vatval2)
          tstr = "";
          GetFieldArgument(Docr,F_ROWVATVAL,tstr);
          if (nonblank(tstr)) then begin
            PrintValueInclZero("F_ROWVATVAL",Round(vatval2,SetRoundModeD(StringToInt(tstr))),M45Val,LangNrr,SFb,negamountf);
          end else begin
            if (blank(vatprc)) then begin 
              PrintValueInclZero("F_ROWVATVAL",0,M4Val,LangNrr,SFb,negamountf);
            end else begin
              PrintValueInclZero("F_ROWVATVAL",vatval2,M4Val,LangNrr,SFb,negamountf);
            end;
          end;
        end;
      end;
    end;          
  end;
  if (UseTaxTemplatesforTaxCalcf==false) then begin
    for (i=0;i<vatcnt;i=i+1) begin
      MatRowGet(VATr,i,VATrw);
      MulVATIV(VATrw.VATCode,VATrw.DebVal,vatv,t1,InclVAT,0);
      if (vatv!=0) or (nonblank(VATrw.DebVal)) then begin
        vatval = Round(vatv,GetVATRoundModeRB);
        totvatval = totvatval + vatval;
        totvatbase = totvatbase + VATrw.DebVal;
        totrowtot = totrowtot + VATrw.DebVal;    
        if (InclVAT>0) then begin
          totvatbase = totvatbase - vatval;
          vatbase = VATrw.DebVal - vatval;
          vattot = VATrw.DebVal;
        end else begin
          totrowtot = totrowtot + vatval;
          vatbase = VATrw.DebVal;
          vattot = VATrw.DebVal + vatval;
        end;
        if (FIELDINFORM("F_VATBASE")) then begin
          valtyp = M4Val;
          GetFieldArgument(Docr,F_VATBASE,tstr);
          if (tstr=="-") then begin
            valtyp = M4NegVal;
          end;
          PrintValueInclZero("F_VATBASE",vatbase,valtyp,LangNrr,SFb,false);
        end;
        PrintValueInclZero("F_SUMMAMEDMOMS",VATrw.DebVal,valtyp,LangNrr,SFb,false);
        if (FIELDINFORM("F_VATVAL")) then begin
          valtyp = M4Val;
          GetFieldArgument(Docr,F_VATVAL,tstr);
          if (tstr=="-") then begin
            valtyp = M4NegVal;
          end;
          PrintValueInclZero("F_VATVAL",vatval,valtyp,LangNrr,SFb,false);
        end;
        if (FIELDINFORM("F_VATTOT")) then begin
          valtyp = M4Val;
          GetFieldArgument(Docr,F_VATTOT,tstr);
          if (tstr=="-") then begin
            valtyp = M4NegVal;
          end;
          PrintValueInclZero("F_VATTOT",vattot,valtyp,LangNrr,SFb,false);
        end;

        GetVATproc(VATrw.VATCode,0,t);
        PrintValue("F_VATEXCLPRC",t,M4Val,LangNrr,SFb,false);    
        if (HasLocalization("POL")) then begin
          tstr = "";
          if (GetVAT2(VATrw.VATCode,vatexclprc,rn,0)) then begin
          end;
          if (GetVATincl(VATrw.VATCode,vatinclprc,rn)) then begin
          end;
          if (nonblank(vatbase)) then begin
            if (nonblank(vatinclprc)) then begin
              if ((vatinclprc==0) and (nonblank(vatexclprc))) then begin
                tstr = USetStr(8111);
              end;
            end;
            if ((vatinclprc==0) and (nonblank(vatinclprc))) then begin
              if (blank(vatexclprc)) then begin
                tstr = USetStr(8110);
              end;
            end;
          end;
          if (blank(tstr)) then begin
            tstr = ValToString(vatexclprc,M4UVal,SFb.thousSep,SFb.decimalPt,LangNrr.CutDecimals);
          end;
          if (blank(tstr)) then begin
            tstr = USetStr(1244);
          end;
          OUTFORMFIELD("F_VATPRC",tstr);    
        end else begin
          tstr = ValToString(t,M4Val,SFb.thousSep,SFb.decimalPt,LangNrr.CutDecimals);
          if (blank(tstr)) then begin
            tstr = USetStr(1244);
          end;
          OUTFORMFIELD("F_VATPRC",tstr);
        end;
        GetVATText(VATrw.VATCode,tstr);
        OUTFORMFIELD("F_VATCOMMENT",tstr);
          
      end;
    end;
  end else begin
    PrintTaxMatrix_RestAccVc(Tabr,Docr,LangNrr,SFb);
  end;
  totvatval = Round(totvatval,GetVATRoundMode(Roundb));
  totvatbase = Round(totvatbase,GetTotalRoundMode(Roundb));
  totrowtot = Round(totrowtot,GetTotalRoundMode(Roundb));
  PrintValueInclZero("F_TOTVATVAL",totvatval,M4Val,LangNrr,SFb,false);
  PrintValueInclZero("F_TOTVATBASE",totvatbase,M4Val,LangNrr,SFb,false);
  PrintValueInclZero("F_TOTROWTOT",totrowtot,M4Val,LangNrr,SFb,false);  

  return;
end;

procedure CalcSubtotWithoutDisc(record RestAccVc Tabr,var val res)
begin
  row RestAccVc Tabrw;  
  Integer i,rwcnt;
  
  res = 0;
  rwcnt = MatRowCnt(Tabr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Tabr,i,Tabrw);
    if (Tabrw.stp==1) then begin
      res = res + Tabrw.Quant*Tabrw.Price;
    end;  
  end;    
  return;
end;

procedure PrintRestAccExecute(record RcVc RepSpec,record SysFormatBlock SFb,record LangNrVc LangNrr,string formcode,record RestAccVc Tabr,Boolean readf)
begin
  record UserVc User;
  record CUVc CUr;
  record PDVc PDr;
  string 255 tstr;
  record LocationVc Locr;
  record BaseCurBlock BCb;
  val t;
  row LegalInvNrBlock LINrbrw;
  
  BlockLoad(BCb);
  CommonDocumentFields(RepSpec);
  NumberofDocumentPages(formcode,MatRowCnt(Tabr));
  OUTFORMFIELD("F_TRANSNR",Tabr.SerNr);
  OUTFORMFIELD("F_SALESGROUP",Tabr.SalesGroup);
  
  OUTFORMFIELD("F_TABLE",Tabr.CustCode);
  OUTFORMFIELD("F_WAITER",Tabr.Cashier);
  User.Code = Tabr.Cashier;
  if readfirstmain(User,1,true) then begin
    OUTFORMFIELD("F_WAITERNAME",User.Name);
  end;

  OUTFORMFIELD("F_REPORTINGDATE",Tabr.ReportingDate);
  OUTFORMFIELD("F_TRANSDATE",Tabr.TransDate);
  OUTFORMFIELD("F_TRANSTIME",Tabr.TransTime);
  OUTFORMFIELD("F_ROOM",Tabr.Resource);
  OUTFORMFIELD("F_COMMENT",Tabr.Comment);
  OUTFORMFIELD("F_MACHINE",Tabr.MachineName);
  OUTFORMFIELD("F_KUNDNR",Tabr.CUCode);   //Customer No
  OUTFORMFIELD("F_KUNDNAMN",Tabr.CUName);  //Customers Name
  CUr.Code = Tabr.CUCode;
  if (ReadFirstMain(CUr,1,true)) then begin
  end;
  OUTFORMFIELD("F_KUNDTEL",CUr.Phone);   //Customers Telephone Number
  OUTFORMFIELD("F_KUNDFAX",CUr.Fax);     //Customers Fax Number
  OUTFORMFIELD("F_GUESTCODE",Tabr.GuestCode);
  OUTFORMFIELD("F_GUESTNAME",Tabr.GuestName);
  OUTFORMFIELD("F_CLASS",Tabr.Class);
  OUTFORMFIELD("F_BRANCH",Tabr.BranchID);
  OUTFORMFIELD("F_LOYALTYCARD",Tabr.LoyaltyCardNr);
  if (Tabr.KitchenOrdNr>0) then begin
    OUTFORMFIELD("F_ORDERNUMMER",Tabr.KitchenOrdNr);
  end;

  if (FIELDINFORM("F_VILLKOR")) then begin
    GetPayDealText(Tabr.PayDeal,"",tstr);
    OUTFORMFIELD("F_VILLKOR",tstr);
  end;

  PrintValueInclZero("F_SUMMA",Tabr.Sum1,M4Val,LangNrr,SFb,false);
  PrintValueInclZero("F_MOMS",Tabr.Sum3,M4Val,LangNrr,SFb,false);
  PrintValueInclZero("F_ATTBETALA",Tabr.Sum4,M4Val,LangNrr,SFb,false);
  PrintValueInclZero("F_NETTO",Tabr.Sum4-Tabr.Sum3,M4Val,LangNrr,SFb,false);

  PrintValue("F_CHANGE",Tabr.RetValue,M4Val,LangNrr,SFb,false);
  PrintValue("F_TIP",Tabr.TipValue,M4Val,LangNrr,SFb,false);
  if (FieldInForm("F_CROATIANCONTROLCODE")) then begin
    OUTFORMFIELD("F_CROATIANCONTROLCODE",MakeCroatianControlCode(Tabr.TransDate,Tabr.TransTime,Tabr.SerNr,Tabr.Location,Tabr.TerminalID,Tabr.Sum4));
  end;
  if (nonblank(Tabr.OfficialSerNr2)) then begin
    OUTFORMFIELD("F_OFFICIALSERNO",Tabr.OfficialSerNr2);
  end else begin
    OUTFORMFIELD("F_OFFICIALSERNO",Tabr.OfficialSerNr);
  end;
  if (nonblank(Tabr.OfficialSerNr)) then begin
    GetLegalInvNrRow(Tabr.OfficialSerNr,LINrbrw);
    if (HasLocalization("BOL,HRV,SVN")) then begin
      OUTFORMFIELD("F_OFFICIALSERNOWITHOUTSERIE",StringToLongInt(Right(Tabr.OfficialSerNr,len(Tabr.OfficialSerNr)-len(LINrbrw.Serie))));
    end else begin
      OUTFORMFIELD("F_OFFICIALSERNOWITHOUTSERIE",Right(Tabr.OfficialSerNr,len(Tabr.OfficialSerNr)-len(LINrbrw.Serie)));
    end;
  end;
  OUTFORMFIELD("F_REFSTR",Tabr.RefStr);
  OUTFORMFIELD("F_LOCATION",Tabr.Location);
  Locr.Code = Tabr.Location;
  ReadFirstMain(Locr,1,true);
  OUTFORMFIELD("F_LOCATIONNAME",Locr.Name);
  OUTFORMFIELD("F_LOCCONTACT",Locr.Contact);
  OUTFORMFIELD("F_LOCPHONE",Locr.Phone);
  OUTFORMFIELD("F_LOCFAX",Locr.Fax);
  OUTFORMFIELD("F_LOCEMAIL",Locr.Email);
  OutAddress("F_LOCADDRESS","",Locr.Addr0,Locr.Addr1,Locr.Addr2,Locr.Addr3,Locr.Addr4);
  OUTFORMFIELD("F_PRINTDATE",Tabr.PrintDate);
  if (nonblank(Tabr.OfficialSerNr2)) then begin
    OUTFORMFIELD("F_OFFICIALSERNO",Tabr.OfficialSerNr2);
  end else begin
    OUTFORMFIELD("F_OFFICIALSERNO",Tabr.OfficialSerNr);
  end;
  OUTFORMFIELD("F_OFFICIALSERNO2",Tabr.OfficialSerNr2);  
  if (Tabr.Prntdf!=0) then begin
//    if (Tabr.OKFlag!=0) then begin
      OUTFORMFIELD("F_DUPLICATE",USetStr(18632) & " " & CurrentDate);
//    end;
  end;  
  if (FIELDINFORM("F_ATTBETALATEXT")) then begin
    t = Tabr.Sum4;
//   SubPrePayments(IVr,t,t1);
    ValToText(t,M4Val,BCb.BaseCur1,Tabr.LangCode,tstr);
    OUTFORMFIELD("F_ATTBETALATEXT",tstr);  
  end;
  if (FIELDINFORM("F_CURUSERNAME")) then begin
    GetUserName(CurrentUser,tstr);
    OUTFORMFIELD("F_CURUSERNAME",tstr);
  end;
  if (FIELDINFORM("F_KUNDMOMSNR")) then begin
    if (nonblank(Tabr.VATNr)) then begin 
      OUTFORMFIELD("F_KUNDMOMSNR",Tabr.VATNr);
    end else begin
      OUTFORMFIELD("F_KUNDMOMSNR",CUr.VATNr);
    end;
  end;
  OutAddress("F_ADRESS",Tabr.Addr0,Tabr.Addr1,Tabr.Addr2,Tabr.Addr3,Tabr.InvAddr3,Tabr.InvAddr4);
  OUTFORMFIELD("F_ADDR1",Tabr.Addr0);
  OUTFORMFIELD("F_ADDR2",Tabr.Addr1);
  OUTFORMFIELD("F_ADDR3",Tabr.Addr2);
  OUTFORMFIELD("F_ADDR4",Tabr.Addr3);
  OUTFORMFIELD("F_INVADDR3",Tabr.InvAddr3);
  OUTFORMFIELD("F_INVADDR4",Tabr.InvAddr4);
  
  OUTFORMFIELD("F_REGNUMBER1",Tabr.RegNr1);
  OUTFORMFIELD("F_REGNUMBER2",Tabr.RegNr2);
  OUTFORMFIELD("F_LOCATION",Tabr.Location); 
  OUTFORMFIELD("F_REFERENSNUMMER",Tabr.RefStr);
  OUTFORMFIELD("F_TAXADMINSERVICESEAL",Tabr.TaxAdminServSeal);

  if (FIELDINFORM("F_SUBTOTALWITHOUTDISCOUNT")) or (FIELDINFORM("F_TOTALDISCOUNT")) then begin
    CalcSubtotWithoutDisc(Tabr,t);
    tstr = ValToString(t,M4Val,SFb.thousSep,SFb.decimalPt,LangNrr.CutDecimals);
    OUTFORMFIELD("F_SUBTOTALWITHOUTDISCOUNT",tstr);
    tstr = ValToString(t-Tabr.Sum1,M4Val,SFb.thousSep,SFb.decimalPt,LangNrr.CutDecimals);
    OUTFORMFIELD("F_TOTALDISCOUNT",tstr);
  end;
  
  PrintRestAccRows(RepSpec,Tabr,SFb,LangNrr,formcode,readf);
  CloseForm;        

  if (Tabr.Closed==0) then begin
    if (Tabr.Prntdf==0) then begin
      queued.StorePOSJournalInvoiceEntry(CurrentUser,Tabr.MachineName,Tabr.DrawerCode,Tabr.TerminalID,"RestAccVc",Tabr.SerNr,kPOSActionPrintProformaInvoice);
    end else begin
      queued.StorePOSJournalInvoiceEntry(CurrentUser,Tabr.MachineName,Tabr.DrawerCode,Tabr.TerminalID,"RestAccVc",Tabr.SerNr,kPOSActionPrintProformaInvoice);
    end;
  end else begin
    if (Tabr.Prntdf==0) then begin
      queued.StorePOSJournalInvoiceEntry(CurrentUser,Tabr.MachineName,Tabr.DrawerCode,Tabr.TerminalID,"RestAccVc",Tabr.SerNr,kPOSActionPrintInvoice);
    end else begin
      queued.StorePOSJournalInvoiceEntry(CurrentUser,Tabr.MachineName,Tabr.DrawerCode,Tabr.TerminalID,"RestAccVc",Tabr.SerNr,kPOSActionPrintInvoiceCopy);
    end;
  end;

  return;
end;

procedure AddToTabArray(var Array string aprintgroupcode,var Array record RestAccVc aTabr,var Integer acnt,record RestAccVc Tabr,row RestAccVc Tabrw)
begin
  Integer ai;
  
  for (ai=0;ai<acnt;ai=ai+1) begin
    if (Tabrw.PrintGroupCode==aprintgroupcode[ai]) then begin
      MatRowPut(aTabr[ai],MatRowCnt(aTabr[ai]),Tabrw);
      goto LAddToTabArray;
    end;
  end;
  aprintgroupcode[acnt] = Tabrw.PrintGroupCode;
  aTabr[acnt] = Tabr;
  MatRowPut(aTabr[acnt],MatRowCnt(aTabr[acnt]),Tabrw);
  acnt = acnt + 1;
LAddToTabArray:;  
  return;
end;

procedure PrintRestAcc(record RcVc RepSpec,record SysFormatBlock SysFormatb,record LangNrVc LangNrr,string formcode,record RestAccVc Tabr,Boolean splitf,string defprintgroupcode,Boolean readf)
begin
  Array string 255 aprintgroupcode;
  Array record RestAccVc aTabr;
  row RestAccVc Tabrw;
  Integer ai,acnt;
  Integer i,rwcnt;
  Boolean testf;

  if (splitf) then begin
    rwcnt = MatRowCnt(Tabr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Tabr,i,Tabrw);
      testf = true;
      if (Tabrw.AlreadyPrinted!=0) then begin testf = false; end;
      if (formcode=="RestAccForm") then begin
        if (Tabrw.ovst!=0) then begin testf = false; end;
        if (Tabrw.stp==kInvoiceRowTypeVoid) then begin testf = false; end;
      end;
      if (testf) then begin
        AddToTabArray(aprintgroupcode,aTabr,acnt,Tabr,Tabrw);
      end;
    end;
    for (ai=0;ai<acnt;ai=ai+1) begin
      RestAccSumup(aTabr[ai],"");
      if (blank(aprintgroupcode[ai])) then begin
        SetPrinter(defprintgroupcode);  
      end else begin
        SetPrinter(aprintgroupcode[ai]);  
      end;
      PrintRestAccExecute(RepSpec,SysFormatb,LangNrr,formcode,aTabr[ai],readf);
    end;
  end else begin
    PrintRestAccExecute(RepSpec,SysFormatb,LangNrr,formcode,Tabr,readf);
  end;
  return;
end;

global
procedure DoRestAccForm(record RcVc RepSpec,record RestAccVc Tabr)
begin
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Integer i,rwcnt;
  string 255 tstr;
  val t,temp;
  record LangNrVc LangNrr;
  record SysFormatBlock SysFormatb;
  Boolean printf;
  Integer intdocnr;
  string 30 formcode;
    
  GetLangNr("",LangNrr);
  BlockLoad(SysFormatb);
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoRestAccForm;
  end;
  if (MatRowCnt(Tabr)==0) then begin
    goto LDoRestAccForm;
  end;
  rwcnt = MatRowCnt(FDr);
  intdocnr = 1;
  printf = true;
  while (printf) begin  
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,Tabr.SerNr,FDrw.PrintGroupCode,
                      "",intdocnr,"RestAccVc",formcode)) then
      begin
        goto LBREAK;
      end;
    end;
LBREAK:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin  
        PrintRestAcc(RepSpec,SysFormatb,LangNrr,FDrw.FPCode,Tabr,false,FDrw.PrintGroupCode,true);
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoRestAccForm:;  
  return;  
end;     
 
global
procedure DoRestAccCancelForm(record RcVc RepSpec,record RestAccVc Tabr)
begin
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Integer i,rwcnt;
  string 255 tstr;
  val t,temp;
  record LangNrVc LangNrr;
  record SysFormatBlock SysFormatb;
  Boolean printf;
  Integer intdocnr;
  string 30 formcode;
    
  GetLangNr("",LangNrr);
  BlockLoad(SysFormatb);
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoRestAccCancelForm;
  end;
  if (MatRowCnt(Tabr)==0) then begin
    goto LDoRestAccCancelForm;
  end;
  rwcnt = MatRowCnt(FDr);
  intdocnr = 1;
  printf = true;
  while (printf) begin  
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,Tabr.SerNr,FDrw.PrintGroupCode,
                      "",intdocnr,"RestAccVc",formcode)) then
      begin
        goto LBREAK2;
      end;
    end;
LBREAK2:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin  
         PrintRestAcc(RepSpec,SysFormatb,LangNrr,FDrw.FPCode,Tabr,true,FDrw.PrintGroupCode,true);
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoRestAccCancelForm:;  
  return;  
end;     
 
global
procedure DoRestAccFireOrderForm(record RcVc RepSpec,record RestAccVc Tabr)
begin
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Integer i,rwcnt;
  string 255 tstr;
  val t,temp;
  record LangNrVc LangNrr;
  record SysFormatBlock SysFormatb;
  Boolean printf;
  Integer intdocnr;
  string 30 formcode;
    
  GetLangNr("",LangNrr);
  BlockLoad(SysFormatb);
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoRestAccFireOrderForm;
  end;
  if (MatRowCnt(Tabr)==0) then begin
    goto LDoRestAccFireOrderForm;
  end;
  rwcnt = MatRowCnt(FDr);
  intdocnr = 1;
  printf = true;
  while (printf) begin  
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,Tabr.SerNr,FDrw.PrintGroupCode,
                      "",intdocnr,"RestAccVc",formcode)) then
      begin
        goto LBREAK3;
      end;
    end;
LBREAK3:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin  
         PrintRestAcc(RepSpec,SysFormatb,LangNrr,FDrw.FPCode,Tabr,true,FDrw.PrintGroupCode,true);
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoRestAccFireOrderForm:;  
  return;  
end;     

global
procedure DoRestAccGuestBillForm(record RcVc RepSpec,record RestAccVc Tabr)
begin
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Integer i,rwcnt;
  string 255 tstr;
  val t,temp;
  record LangNrVc LangNrr;
  record SysFormatBlock SysFormatb;
  Boolean printf;
  Integer intdocnr;
  string 30 formcode;
    
  GetLangNr("",LangNrr);
  BlockLoad(SysFormatb);
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoRestAccGuestBillForm;
  end;
  if (MatRowCnt(Tabr)==0) then begin
    goto LDoRestAccGuestBillForm;
  end;
  rwcnt = MatRowCnt(FDr);
  intdocnr = 1;
  printf = true;
  while (printf) begin  
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,Tabr.SerNr,FDrw.PrintGroupCode,
                      "",intdocnr,"RestAccVc",formcode)) then
      begin
        goto LBREAK4;
      end;
    end;
LBREAK4:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin  
         PrintRestAcc(RepSpec,SysFormatb,LangNrr,FDrw.FPCode,Tabr,false,FDrw.PrintGroupCode,true);
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoRestAccGuestBillForm:;  
  return;  
end;     
 
global
procedure DoRestAccReceiptForm(record RcVc RepSpec,record RestAccVc Tabr)
begin
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Integer i,rwcnt;
  string 255 tstr;
  val t,temp;
  record LangNrVc LangNrr;
  record SysFormatBlock SysFormatb;
  Boolean printf;
  Integer intdocnr;
  string 30 formcode;
    
  GetLangNr("",LangNrr);
  BlockLoad(SysFormatb);
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoRestAccReceiptForm;
  end;
  if (MatRowCnt(Tabr)==0) then begin
    goto LDoRestAccReceiptForm;
  end;
  rwcnt = MatRowCnt(FDr);
  intdocnr = 1;
  printf = true;
  while (printf) begin  
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,Tabr.SerNr,FDrw.PrintGroupCode,
                      "",intdocnr,"RestAccVc",formcode)) then
      begin
        goto LBREAK5;
      end;
    end;
LBREAK5:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin  
         PrintRestAcc(RepSpec,SysFormatb,LangNrr,FDrw.FPCode,Tabr,false,FDrw.PrintGroupCode,true);
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoRestAccReceiptForm:;  
  return;  
end;     

/*
procedure BuildTabArray(record RestAccVc mainTabr,record RestITVc RestITr,array record RestAccVc aTabr,array string aformcode,var Integer aformcnt)
begin
  Integer maintabi,maintabrwcnt,tabrwcnt;
  row RestAccVc mainTabrw;
  row RestAccVc tmpTabrw;
  Integer rai,rarwcnt;
  Integer formi;
  row RestITVc RestITrw;
  record INVc INr;
  record RestAccVc tmpTabr;
  
  rarwcnt = MatRowCnt(RestITr);
  maintabrwcnt = MatRowCnt(mainTabr);
  for (maintabi=0;maintabi<maintabrwcnt;maintabi=maintabi+1) begin
    MatRowGet(mainTabr,maintabi,mainTabrw);
    if (mainTabrw.AlreadyPrinted==0) then begin
      ReadFirstItem(mainTabrw.ArtCode,INr,true,true);
      for (rai=0;rai<rarwcnt;rai=rai+1) begin
        MatRowGet(RestITr,rai,RestITrw);
        if (SetInSet(RestITrw.ITCode,INr.DispGroups)) then begin
        
          for (formi=0;formi<aformcnt;formi=formi+1) begin
            if (aformcode[formi]==RestITrw.FormCode) then begin
              tmpTabr = aTabr[formi];
              goto LInFormArray1;
            end;
          end;
          RecordCopy(tmpTabr,mainTabr);
          tabrwcnt = MatRowCnt(tmpTabr);
          while (tabrwcnt>0) begin
            MatRowDelete(tmpTabr,0);
            tabrwcnt = tabrwcnt - 1;
          end;
  LInFormArray1:;
          CopyRow(mainTabr,mainTabrw,tmpTabrw);
          MatRowPut(tmpTabr,MatRowCnt(tmpTabr),tmpTabrw);
          
          for (formi=0;formi<aformcnt;formi=formi+1) begin
            if (aformcode[formi]==RestITrw.FormCode) then begin
              aTabr[formi] = tmpTabr;
              goto LInFormArray2;
            end;
          end;
          aformcode[aformcnt] = RestITrw.FormCode;
          aTabr[aformcnt] = tmpTabr;
          aformcnt = aformcnt + 1;
  LInFormArray2:;
        end;
      end;
    end;
  end;
  return;
end;

procedure PrintTabs(record RcVc RepSpec,record SysFormatBlock SysFormatb,record LangNrVc LangNrr,array record RestAccVc aTabr,array string aformcode,var Integer aformcnt,string defprintgroupcode)
begin
  Integer formi;
  record RestAccVc tmpTabr;

  for (formi=0;formi<aformcnt;formi=formi+1) begin
    tmpTabr = aTabr[formi];
    if (OpenForm(aformcode[formi])) then begin  
      PrintRestAcc(RepSpec,SysFormatb,LangNrr,aformcode[formi],tmpTabr,defprintgroupcode);
      CloseForm;        
    end else begin
      MessageBox(1546,aformcode[formi]);
    end;
  end;
  return;
end;

global
procedure DoRestAccKitchenForm(record RcVc RepSpec,record RestAccVc Tabr)
begin
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Integer i,rwcnt;
  string 255 tstr;
  val t,temp;
  record LangNrVc LangNrr;
  record SysFormatBlock SysFormatb;
  Boolean printf;
  Integer intdocnr;
  string 30 formcode;
  record RestITVc RestITr;  //ITCode
  array record RestAccVc aTabr;
  array string 20 aformcode;
  Integer aformcnt;

  GetLangNr("",LangNrr);
  BlockLoad(SysFormatb);
  RestITr.Code = Tabr.MachineName;
  if (ReadFirstMain(RestITr,1,true)) then begin
    BuildTabArray(Tabr,RestITr,aTabr,aformcode,aformcnt);
    PrintTabs(RepSpec,SysFormatb,LangNrr,aTabr,aformcode,aformcnt);
  end else begin
    FDr.repname = RepSpec.repname;
    FDr.shortname = RepSpec.shortname;
    if (ReadFirstMain(FDr,1,true)==false) then begin
      MessageBox(1624, " " & USetStr(1623));
      goto LDoRestAccKitchenForm;
    end;
    rwcnt = MatRowCnt(FDr);
    intdocnr = 1;
    printf = true;
    while (printf) begin  
      formcode = "";
      for (i=rwcnt-1;i>=0;i=i-1) begin
        MatRowGet(FDr,i,FDrw);
        if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,Tabr.SerNr,FDrw.PrintGroupCode,
                        "",intdocnr,"RestAccVc",formcode)) then
        begin
          goto LBREAK6;
        end;
      end;
  LBREAK6:;
      if (nonblank(formcode)) then begin
        if (OpenForm(formcode)) then begin  
          PrintRestAcc(RepSpec,SysFormatb,LangNrr,FDrw.FPCode,Tabr);
          CloseForm;        
        end else begin
          printf = false;
          MessageBox(1546,formcode);
        end;
      end else begin
        printf = false;
        if (intdocnr==1) then begin
          MessageBox(1624, " " & USetStr(1623));
        end;
      end;
      intdocnr = intdocnr + 1;
    end;
  end;
LDoRestAccKitchenForm:;  
  return;  
end;     

*/

procedure BuildTabArray(record RestAccVc mainTabr,var Array record RestAccVc aTabr,array string aprintgroupcode,var Integer aprintgroupcodecnt)
begin
  row RestAccVc mainTabrw;
  row RestAccVc mainTab2rw;
  Integer pi;
  Integer i,j,rwcnt;
  record RestAccVc lTabr;

  rwcnt = MatRowCnt(mainTabr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(mainTabr,i,mainTabrw);
    if (nonblank(mainTabrw.PrintGroupCode)) then begin
      for (pi=0;pi<aprintgroupcodecnt;pi=pi+1) begin
        if (aprintgroupcode[pi]==mainTabrw.PrintGroupCode)  then begin
          goto LPrintGroupCodeExists;
        end;
      end;
      aprintgroupcode[aprintgroupcodecnt] = mainTabrw.PrintGroupCode;
      aprintgroupcodecnt = aprintgroupcodecnt + 1;
LPrintGroupCodeExists:;      
    end;
  end;
  aprintgroupcode[aprintgroupcodecnt] = "";
  aprintgroupcodecnt = aprintgroupcodecnt + 1;
  
  for (pi=0;pi<aprintgroupcodecnt;pi=pi+1) begin
    RecordCopy(lTabr,mainTabr);
    while (MatRowCnt(lTabr)>0) begin
      MatRowDelete(lTabr,0);
    end;
    aTabr[pi] = lTabr;
  end;

  for (pi=0;pi<aprintgroupcodecnt;pi=pi+1) begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(mainTabr,i,mainTabrw);
      if (mainTabrw.stp==1) then begin
        if (aprintgroupcode[pi]==mainTabrw.PrintGroupCode)  then begin
          RecordCopy(lTabr,aTabr[pi]);
          if (mainTabrw.ovst!=0) then begin
            for (j=i;j<rwcnt;j=j+1) begin
              MatRowGet(mainTabr,j,mainTab2rw);
              if (mainTab2rw.VoidedRowNr==i) then begin
                mainTabrw.StandProblemCode = mainTab2rw.StandProblemCode;
                j = rwcnt;
              end;
            end;           
          end;
          MatRowPut(lTabr,MatRowCnt(lTabr),mainTabrw);
          aTabr[pi] = lTabr;
        end;
      end;
    end;
  end;
  return;
end;

function Integer CountBarTabRows(record RestAccVc Tabr)
begin 
  Integer cnt;
  Integer i,rwcnt;
  row RestAccVc Tabrw;
  
  rwcnt = MatRowCnt(Tabr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Tabr,i,Tabrw);
    if (Tabrw.AlreadyPrintedToKitchen==0) then begin
      cnt = cnt + 1;
    end;
  end;
  CountBarTabRows = cnt;
  return;
end;

global
updating procedure TransferRestAccToKitchenOrder(record RestAccVc RAr)
begin
  record KitchenOrderVc KOr;

  RestAccToKitchenOrder(RAr,KOr);
  if (MatRowCnt(KOr)>0) then begin
    RecordStore(KOr,false);
  end;
  return;
end;

global
procedure DoRestAccKitchenForm(record RcVc RepSpec,record RestAccVc Tabr)
begin
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Integer i,rwcnt;
  string 255 tstr;
  val t,temp;
  record LangNrVc LangNrr;
  record SysFormatBlock SysFormatb;
  Boolean printf;
  Integer intdocnr;
  string 30 formcode;
  array string 20 aprintgroupcode;
  Integer aprintgroupcodecnt;
  Array record RestAccVc aTabr;
  Integer pi;
  record RestAccVc lTabr;
  transaction Integer gTransferRestAccToKitchenOrder;

  gTransferRestAccToKitchenOrder = RepSpec.flags[11];
  gTransferRestAccToKitchenOrder = Tabr.SplitQty; //until PrintDocumentWithSpec is fixed
  GetLangNr("",LangNrr);
  BlockLoad(SysFormatb);
  if (gTransferRestAccToKitchenOrder!=0) then begin
    queued.TransferRestAccToKitchenOrder(Tabr);//qupdating
  end;
  
  BuildTabArray(Tabr,aTabr,aprintgroupcode,aprintgroupcodecnt);
//    PrintTabs(RepSpec,SysFormatb,LangNrr,aTabr,aformcode,aformcnt);
  
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoRestAccKitchenForm;
  end;
  if (MatRowCnt(Tabr)==0) then begin
    goto LDoRestAccKitchenForm;
  end;
  rwcnt = MatRowCnt(FDr);
  for (pi=0;pi<aprintgroupcodecnt;pi=pi+1) begin
    RecordCopy(lTabr,aTabr[pi]);
    if (CountBarTabRows(lTabr)>0) then begin
      printf = true;
      intdocnr = 1;
      while (printf) begin  
        formcode = "";
        for (i=rwcnt-1;i>=0;i=i-1) begin
          MatRowGet(FDr,i,FDrw);
          if (GetformcodeWithPrintGroupCode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,FDrw.PrintGroupCode,Tabr.SerNr,aprintgroupcode[pi],
                          "",intdocnr,"RestAccVc",formcode)) then
          begin
            goto LBREAK7;
          end;
        end;
    LBREAK7:;
        if (nonblank(formcode)) then begin
          if (OpenForm(formcode)) then begin  
            PrintRestAcc(RepSpec,SysFormatb,LangNrr,FDrw.FPCode,lTabr,false,FDrw.PrintGroupCode,false);
          end else begin
            printf = false;
            MessageBox(1546,formcode);
          end;
        end else begin
          printf = false;
          if (intdocnr==1) then begin
            MessageBox(1624, " " & USetStr(1623));
          end;
        end;
        intdocnr = intdocnr + 1;
      end;
    end;
  end;
LDoRestAccKitchenForm:;  
  gTransferRestAccToKitchenOrder = 0;
  return;  
end;     
