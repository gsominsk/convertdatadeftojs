external procedure PrintCurrencyCode(string,string);
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external procedure GetMonthText(string,Date,var string);
external procedure GetDateMonthInWords(Date,var string);
external function Integer NumberofDocumentPages(string,Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure PrintValue(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external procedure CommonDocumentFields(record RcVc);
external procedure GetLangNr(string,var record LangNrVc);
external function Boolean Getformcode(Integer,Integer,string,string,string,LongInt,LongInt,string,string,Integer,string,var string);


procedure DoPrintInStaPuForm(record RcVc RepSpec,string InStaVATNr,string InStaCompName,string InStaAddr0,string InStaAddr1,string InStaAddr2,
                           string InStaAddr3,string InStaAddr4,Array string aInSrwCountryOrigCode,string InStaUSName,
                           Date InStaPrintDate,Date InStaStartDate,Date InStaEndDate,Integer InStarwcnt,val InStatotsum,
                           Array string aInSrwCommodity,Array string aInSrwArtEKNCode,Array string aInSrwShipMode,Array string aInSrwShipDeal,Array string aInSrwCountryCode,
                           Array string aInSrwArtCode,Array string aInSrwTraderRef,Array string aInSrwUnittext,
                           Array val aInSrwQuant,Array string aInSrwCur,Array val aInSrwSum,Array val aInSrwWeight,
                           Array LongInt aInSrwconsignno,Array Integer aInSrwTransType,Array val aInStatValSrwSum,Array val aInStatValSrwB1Sum,
                           Array val aInSrwSumB1,Integer acnt)
BEGIN
  Integer i;
  record SysFormatBlock SysFormatRec;
  record LangNrVc LangNrr;
  record ShipDealVc ShipDealr;
  string 60 shipdealcomment;
  integer type;
  roundmode roundcnt;
  val totstatval,totSumB1;
  string 255 tstr;
  Integer k;
  
  GetLangNr("",LangNrr);  
  BlockLoad(SysFormatRec);
  for (i=0;i<acnt;i=i+1) begin
    OUTFORMFIELD("F_ARTNR",aInSrwArtCode[i]);
    OUTFORMFIELD("F_ITEMTYPE",aInSrwTraderRef[i]);
    OUTFORMFIELD("F_EKNCODE",aInSrwArtEKNCode[i]);
    OUTFORMFIELD("F_ARTNR2",aInSrwCommodity[i]);
    OUTFORMFIELD("F_COUNTRYOFORIGIN",aInSrwCountryOrigCode[i]);
    OUTFORMFIELD("F_INVLEVSATT",aInSrwShipMode[i]);
    OUTFORMFIELD("F_INVLEVVILLK",aInSrwShipDeal[i]);
    ShipDealr.Code = aInSrwShipDeal[i];
    shipdealcomment = "";
    if (ReadFirstMain(ShipDealr,1,true)) then begin
      shipdealcomment = ShipDealr.Comment;
    end;
    OUTFORMFIELD("F_COMMENT",shipdealcomment);
    OUTFORMFIELD("F_COUNTRYCODE",aInSrwCountryCode[i]);
    OUTFORMFIELD("F_ENHET",aInSrwUnittext[i]);
    OUTFORMFIELD("F_TRANSNR",aInSrwconsignno[i]);
    OUTFORMFIELD("F_FAKTURATYP",aInSrwTransType[i]);
    if (aInSrwTransType[i]==16) then begin 
      k  = -1;
    end else begin 
      k = 1;  
    end;  
    OUTFORMFIELD("F_INQTY",i+1);
    if (RepSpec.flags[6]==0) then begin
      type = M4Val;
      roundcnt = DefaultCurRoundOff;
    end else begin
      type = M4UVal;
      roundcnt = SetRoundModeD(0);
    end;
    PrintValue("F_WEIGHT",Round(aInSrwWeight[i],roundcnt),type,LangNrr,SysFormatRec,false);
    if (aInSrwWeight[i]==0 or RepSPec.flags[7]==0) then begin
      PrintValue("F_ANTAL",Round(aInSrwQuant[i],roundcnt),type,LangNrr,SysFormatRec,false); 
    end;
    PrintValue("F_BELOPP",Round(aInSrwSum[i],roundcnt),type,LangNrr,SysFormatRec,false);   
    PrintCurrencyCode("F_VALUTA",aInSrwCur[i]);
    OUTFORMFIELD("F_FOBVALFORR",aInStatValSrwSum[i]);//
    OUTFORMFIELD("F_FOBVALLOCAL",aInStatValSrwB1Sum[i]);//
    totstatval = totstatval + aInStatValSrwB1Sum[i]*k;
    OUTFORMFIELD("F_BASE1ROWTOT",aInSrwSumB1[i]);
    totSumB1 = totSumB1 + aInSrwSumB1[i];
    EndFormRow;
  end;
//  OUTFORMFIELD("F_COMMREGNO",InStaVATNr); printed in common doucment fields
//  OUTFORMFIELD("F_EGETNAMN",InStaCompName);
  OUTFORMFIELD("F_ADDR1",InStaAddr0);
  OUTFORMFIELD("F_ADDR2",InStaAddr1);
  OUTFORMFIELD("F_ADDR3",InStaAddr2);
  OUTFORMFIELD("F_INVADDR3",InStaAddr3);
  OUTFORMFIELD("F_INVADDR4",InStaAddr4);
  OUTFORMFIELD("F_PRODDATE",InStaPrintDate);
  OUTFORMFIELD("F_KOLLI",acnt);
  OUTFORMFIELD("F_TRANSDATUM",InStaStartDate);  // F_DATUM is a common field that always prints current date...
  OUTFORMFIELD("F_ENDDATE",InStaEndDate);
  OUTFORMFIELD("F_FROMCONTACT",InStaUSName);
  OUTFORMFIELD("F_TOTINQTY",InStarwcnt);
  GetDateMonthInWords(RepSpec.sStartDate,tstr);
  OUTFORMFIELD("F_DATEMONTHINWORDS",tstr);
  GetMonthText("",RepSpec.sStartDate,tstr);
  OUTFORMFIELD("F_DATEMONTHTEXT",tstr);
  OUTFORMFIELD("F_DATEDAY",GetDay(RepSpec.sStartDate));
  OUTFORMFIELD("F_DATEMONTH",GetMonth(RepSpec.sStartDate));
  OUTFORMFIELD("F_DATEYEAR",GetYear(RepSpec.sStartDate));
  
  PrintValue("F_TOTSUM",InStatotsum,M4Val,LangNrr,SysFormatRec,false);
  PrintValue("F_TOTFOBVALLOCAL",totstatval,M4Val,LangNrr,SysFormatRec,false);
  PrintValue("F_BASE1SUMMA",totSumB1,M4Val,LangNrr,SysFormatRec,false);
  RETURN;
END;


procedure PrintInStaPuForm(record RcVc RepSpec,
                         string InStaVATNr,string InStaCompName,string InStaAddr0,string InStaAddr1,string InStaAddr2,
                         string InStaAddr3,string InStaAddr4,Array string aInSrwCountryOrigCode,string InStaUSName,
                         Date InStaPrintDate,Date InStaStartDate,Date InStaEndDate,Integer InStarwcnt,val InStatotsum,
                         Array string aInSrwCommodity,Array string aInSrwArtEKNCode,Array string aInSrwShipMode,Array string aInSrwShipDeal,Array string aInSrwCountryCode,
                         Array string aInSrwArtCode,Array string aInSrwTraderRef,Array string aInSrwUnittext,
                         Array val aInSrwQuant,Array string aInSrwCur,Array val aInSrwSum,Array val aInSrwWeight,
                         Array LongInt aInSrwconsignno,Array Integer aInSrwTransType,Array val aInStatValSrwSum,Array val aInStatValSrwB1Sum,
                         Array val aInSrwSumB1,Integer acnt)
BEGIN
  Integer i,rwcnt;  
  Boolean printf;
  Integer intdocnr;
  string 30 formcode;
  record FormDefVc FDr;
  row FormDefVc FDrw;
  
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LPrintInStaPuForm;
  end;
  rwcnt = MatRowCnt(FDr);
  intdocnr = 1;
  printf = true;
  while (printf) begin  
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,-1,FDrw.PrintGroupCode,
                      "",intdocnr,"",formcode)) then
      begin
        goto LBREAKInStaPu;
      end;
    end;
LBREAKInStaPu:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin
        CommonDocumentFields(RepSpec);
        NumberofDocumentPages(formcode,acnt);
        DoPrintInStaPuForm(RepSpec,InStaVATNr,InStaCompName,InStaAddr0,InStaAddr1,InStaAddr2,
                         InStaAddr3,InStaAddr4,aInSrwCountryOrigCode,InStaUSName,InStaPrintDate,InStaStartDate,InStaEndDate,InStarwcnt,InStatotsum,
                         aInSrwCommodity,aInSrwArtEKNCode,aInSrwShipMode,aInSrwShipDeal,aInSrwCountryCode,
                         aInSrwArtCode,aInSrwTraderRef,aInSrwUnittext,aInSrwQuant,aInSrwCur,aInSrwSum,
                         aInSrwWeight,aInSrwconsignno,aInSrwTransType,aInStatValSrwSum,aInStatValSrwB1Sum,aInSrwSumB1,acnt);
        CloseForm;
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
   end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LPrintInStaPuForm:;  
  RETURN;
END;
                      

procedure AddInStaRow(Array string aInSrwCommodity,Array string aInSrwArtEKNCode,Array string aInSrwShipMode,Array string aInSrwShipDeal,Array string aInSrwCountryCode,Array string aInSrwCountryOrigCode,
                      Array string aInSrwArtCode,Array string aInSrwTraderRef,Array val aInSrwQuant,Array string aInSrwCur,Array val aInSrwSum,
                      Array val aInSrwWeight,Array string aInSrwUnittext,Array LongInt aInSrwconsignno,Array Integer aInSrwTransType,Array val aInStatValSrwSum,Array val aInStatValSrwb1Sum,
                      Array val aInSrwSumB1,var Integer acnt,
                      Integer invtype,string commodity,string commodity2,string shipmode,string shipdeal,string country,string origcountry,string artcode,
                      string artname,val weight,string unit,Integer curtype,val qp,val qp2,string currency,val sump,val statval,val statvalb1,val sumb1)
BEGIN
  aInSrwCommodity[acnt] = commodity;
  aInSrwArtEKNCode[acnt] = commodity2;
  aInSrwShipMode[acnt] = shipmode;
  aInSrwShipDeal[acnt] = shipdeal;
  aInSrwCountryCode[acnt] = country;
  aInSrwCountryOrigCode[acnt] = origcountry;
  aInSrwArtCode[acnt] = artcode;
  aInSrwTraderRef[acnt] = artname;
  if (invtype!=kInvoiceTypeCredit) then begin
    aInSrwQuant[acnt] = qp2;
    aInSrwSum[acnt] = sump;
    aInSrwWeight[acnt] = qp * weight;
    aInSrwSumB1[acnt] = sumb1;
  end else begin
    aInSrwQuant[acnt] = -qp2;
    aInSrwSum[acnt] = -sump;
    aInSrwWeight[acnt] = -qp * weight;
    aInSrwSumB1[acnt] = -sumb1;
  end;  
  aInSrwUnittext[acnt] = unit;
  aInSrwCur[acnt] = currency;
  aInSrwconsignno[acnt] = 1;
  aInSrwTransType[acnt] = curtype;
  aInStatValSrwSum[acnt] = statval;
  aInStatValSrwB1Sum[acnt] = statvalb1;
  acnt = acnt + 1;
  RETURN;
END;

function string 255 CountryOfOrgfromPU(record VIVc VIr,row VIVc VIrw)
begin
  string 255 res;
  record PUVc PUr;
  row PUVc PUrw;
  record POVc POr;
  row POVc POrw;
  Boolean pof,pufound;
  LongInt PONr;
  Integer i,rwcnt;
  
  if ((VIrw.PUNr>0) and (VIrw.PURow>=0)) then begin
    PUr.SerNr = VIrw.PUNr;
    if (ReadFirstMain(PUr,1,true)) then begin
      if (MatRowCnt(PUr)>VIrw.PURow) then begin
        MatRowGet(PUr,VIrw.PURow,PUrw);
        res = PUrw.CountryOfOrg;
      end;
    end;
  end else begin
    if (VIrw.PONr>0) then begin
      PUr.SerNr = VIrw.PONr;
      pof = ReadFirstMain(POr,1,true);
      PONr = VIrw.PONr;
    end else begin   
      if (VIr.POSerNr>0) then begin
        PUr.SerNr = VIr.POSerNr;
        pof = ReadFirstMain(POr,1,true);
        PONr = VIr.POSerNr;
      end;
    end;
    if (pof) then begin
      PUr.PONr = PONr;
      pufound = true;
      while (LoopKey("PONr",PUr,1,pufound)) begin
        if (PUr.PONr!=PONr) then begin pufound = false; end;
        if (pufound) then begin
          rwcnt = MatRowCnt(PUr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(PUr,i,PUrw);
            if (PUrw.OrdRow==VIrw.OrdRow) then begin
              res = PUrw.CountryOfOrg;
              goto LCountryOfOrgfromPU;
            end;
          end;
        end;
      end;

      ResetLoop(PUr);
      pufound = true;
      while (LoopKey("RowPONr:" & PONr,PUr,1,pufound)) begin
        if (pufound) then begin
          rwcnt = MatRowCnt(PUr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(PUr,i,PUrw);
            if (PUrw.OrdRow==VIrw.OrdRow) then begin
              res = PUrw.CountryOfOrg;
              goto LCountryOfOrgfromPU;
            end;
          end;
        end;
      end;
    end;
  end;
LCountryOfOrgfromPU:;  
  CountryOfOrgfromPU = res;
  return;
end;

global
procedure DoInStaPuForm(record RcVc Dummyr,record RcVc RepSpec)
BEGIN
  record INVc INr;
  record ShipDealVc ShipDr;
  record CountryVc Cntrr;
  record DMVc DMr;
  record VIVc VIr;
  record POVc POr;
  record CUVc VEr;
  record SourceVc Sourcer;
  row VIVc VIrw;  
  record CYBlock CYb;
  Date InStaPrintDate;
  Date InStaStartDate;
  Date InStaEndDate;
  string 60 InStaCompName;
  string 60 InStaAddr0;
  string 60 InStaAddr1;
  string 60 InStaAddr2;
  string 60 InStaAddr3;
  string 60 InStaAddr4;
  string 20 InStaVATNr;
  string 10 unit;
  Integer InStarwcnt;
  val InStatotsum;
  string 60 InStaUSName;
  LongInt afr,ato;
  string 20 frit,toit;
  string 20 fritgr,toitgr;
  string 60 origcountry;
  Boolean TrHs,testf,rowexistf;
  Integer i,j,rwcnt,rwcnt2,curtype;
  val t,qty,weight,sv,svb1;
  string 5 InStaCountry;
  Array string 20 aInSrwArtCode;
  Array string 60 aInSrwTraderRef;
  Array string 20 aInSrwCommodity;
  Array string 20 aInSrwArtEKNCode;
  Array string 5 aInSrwShipMode;
  Array string 5 aInSrwShipDeal;
  Array string 5 aInSrwCountryCode;
  Array string 60 aInSrwCountryOrigCode;
  Array string 5 aInSrwCur;
  Array string 10 aInSrwUnittext;
  Array val aInSrwWidth;
  Array val aInSrwHeight;
  Array val aInSrwDepth;
  Array val aInSrwWeight;
  Array val aInSrwQuant;
  Array val aInSrwSum;
  Array val aInStatValSrwSum;
  Array val aInStatValSrwB1Sum;
  Array LongInt aInSrwconsignno;
  Array Integer aInSrwTransType;
  Array val aInSrwSumB1;
  Integer acnt;
  string 20 shipmode,shipdeal;
  val sumb1;
  record IntrastatVIBlock IntrastatVIb;

  BlockLoad(CYb);
  BlockLoad(IntrastatVIb);
  frit = FirstInRange(RepSpec.f1,20);
  toit = LastInRange(RepSpec.f1,20);
  afr = FirstInRange(RepSpec.f2,10);
  ato = LastInRange(RepSpec.f2,10);
  fritgr = FirstInRange(RepSpec.f3,10);
  toitgr = LastInRange(RepSpec.f3,10);
  InStaCompName = CYb.CompName;
  InStaCountry = CYb.CountryCode;
  InStaAddr0 = CYb.Addr0;
  InStaAddr1 = CYb.Addr1;
  InStaAddr2 = CYb.Addr2;
  InStaAddr3 = CYb.Addr3;
  InStaAddr4 = CYb.Addr4;
  InStaVATNr = CYb.VATNr;
  InStaUSName = RepSpec.LastAcc;
  InStatotsum = blankval;
  InStaPrintDate = CurrentDate;
  InStaStartDate = RepSpec.sStartDate;
  InStaEndDate = RepSpec.sEndDate;
  InStarwcnt = 0;
  TrHs = true;
  VIr.SerNr = afr;
  while (LoopMain(VIr,1,TrHs)) begin
    if (ato!=-1) then begin
      if (VIr.SerNr>ato) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      testf = true;
      if (VIr.OKFlag==0) then begin testf = false; end;
      if (VIr.Invalid!=0) then begin testf = false; end;
      if (VIr.TransDate<RepSpec.sStartDate) then begin testf = false; end;
      if (VIr.TransDate>RepSpec.sEndDate) then begin testf = false; end;
      if (RepSpec.flags[4]==1) then begin
//        if (INr.ItemType==0) then begin goto LSkipDoInStaPuForm; end;//What ?
      end;
      if (RepSpec.flags[5]==1) then begin
//        if (INr.ItemType==3) then begin goto LSkipDoInStaPuForm; end;//What ?
      end;
      if (testf) then begin
//tsp        testf = false;
        if (RepSpec.flags[1]!=1) then begin
          if (VIr.ExportFlag==0) then begin testf = false; end;      
        end;
        if (RepSpec.flags[2]!=1) then begin
          if (VIr.ExportFlag==1) or (VIr.ExportFlag==3) then begin testf = false; end;      
        end;
        if (RepSpec.flags[3]!=1) then begin
          if (VIr.ExportFlag==2) or (VIr.ExportFlag==4) then begin testf = false; end;      
        end;        
      end;
      if (testf) then begin
        VEr.Code = VIr.VECode;
        if (ReadFirstMain(VEr,1,true)==false) then begin goto L12DoInStaPuForm; end;
        if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin  
          curtype = 16;
        end else begin
          curtype = 10;
        end;
        if nonblank(VIr.POSerNr) then begin
          POr.SerNr = VIr.POSerNr;
          if (ReadFirstMain(POr,1,true)==false) then begin goto L13DoInStaPuForm; end;
          if nonblank(POr.ShipDeal) then begin
            shipmode = POr.ShipMode;
            shipdeal = POr.ShipDeal;
          end else begin
            shipmode = VEr.VEShipMode;
            shipdeal = VEr.VEShipDeal;
          end;
        end else begin
L13DoInStaPuForm:;
          shipmode = VEr.VEShipMode;
          shipdeal = VEr.VEShipDeal;
        end;
        rwcnt = MatRowCnt(VIr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(VIr,i,VIrw);
          testf = true;
          if (nonblank(RepSpec.f1)) then begin
            if (VIrw.Item<frit) then begin testf = false; end;
            if (VIrw.Item>toit) then begin testf = false; end;
          end;  
          if (testf) then begin
            INr.Code = VIrw.Item;
            if (VIrw.stp==1) then begin
              if (ReadFirstMain(INr,1,true)==false) then begin goto L12DoInStaPuForm; end;
            end else begin
              goto LSkipDoInStaPuForm;
            end;
            if (nonblank(RepSpec.f3)) then begin
              if (INr.Group<fritgr) then begin goto LSkipDoInStaPuForm; end;
              if (INr.Group>toitgr) then begin goto LSkipDoInStaPuForm; end;
            end;  
            if (RepSpec.flags[4]==1) then begin
              if (INr.ItemType==0) then begin goto LSkipDoInStaPuForm; end;
            end;
            if (RepSpec.flags[5]==1) then begin
              if (INr.ItemType==3) then begin goto LSkipDoInStaPuForm; end;
            end;
            rowexistf = false;
            origcountry = "";
            if (IntrastatVIb.CountryOfOrgfromPU!=0) then begin
              origcountry = CountryOfOrgfromPU(VIr,VIrw);
            end else begin
              Sourcer.Code = INr.DefaultSource;
              if (ReadFirstMain(Sourcer,1,true)) then begin
                origcountry = Sourcer.Addr2;
              end;
            end;
            if (RepSpec.flags[8]==1) then begin
              for (j=0;j<acnt;j=j+1) begin
                if (nonblank(INr.EKNCode) and (INr.EKNCode==aInSrwArtEKNCode[j])) then begin
                  if ((shipmode==aInSrwShipMode[j]) and (shipdeal==aInSrwShipDeal[j]) and (VIr.CurncyCode==aInSrwCur[j])) then begin
                    if ((VEr.CountryCode==aInSrwCountryCode[j]) and (origcountry==aInSrwCountryOrigCode[j]) and (aInSrwTransType[j]==curtype)) then begin
                      rowexistf = true;
                      goto L11DoInStaPuForm;
                    end;   
                  end;
                end;
              end;                   
            end else begin
              for (j=0;j<acnt;j=j+1) begin
                if ((INr.EUCodex==aInSrwCommodity[j]) and (VIrw.Item==aInSrwArtCode[j])) then begin
                  if ((shipmode==aInSrwShipMode[j]) and (shipdeal==aInSrwShipDeal[j]) and (VIr.CurncyCode==aInSrwCur[j])) then begin
                    if ((VEr.CountryCode==aInSrwCountryCode[j]) and (origcountry==aInSrwCountryOrigCode[j]) and (aInSrwTransType[j]==curtype)) then begin
                      rowexistf = true;
                      goto L11DoInStaPuForm;
                    end;   
                  end;
                end;
              end;                   
            end;
L11DoInStaPuForm:;
            sv = VIrw.Sum/(VIr.PayVal-VIr.CalcVATVal);
            sv = Round(sv*VIr.StatVal,DefaultRoundMode);
            svb1 = MulRateToBase1(VIr.CurncyCode,sv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
            sumb1 = MulRateToBase1(VIr.CurncyCode,VIrw.Sum,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
            if (rowexistf==false) then begin
              InStarwcnt = InStarwcnt + 1;
              if (nonblank(INr.Unittext2) and (INr.UnitCoefficient>0)) then begin
                unit = INr.Unittext2;
                qty = VIrw.qty*INr.UnitCoefficient;
              end else begin
                unit = INr.Unittext;
                qty = VIrw.qty;
              end;
              AddInStaRow(aInSrwCommodity,aInSrwArtEKNCode,aInSrwShipMode,aInSrwShipDeal,aInSrwCountryCode,aInSrwCountryOrigCode,
                      aInSrwArtCode,aInSrwTraderRef,aInSrwQuant,aInSrwCur,aInSrwSum,
                      aInSrwWeight,aInSrwUnittext,aInSrwconsignno,aInSrwTransType,aInStatValSrwSum,aInStatValSrwB1Sum,aInSrwSumB1,acnt,
                      VIr.InvType,INr.EUCodex,INr.EKNCode,shipmode,shipdeal,VEr.CountryCode,origcountry,VIrw.Item,
                      INr.Name,INr.Weight,unit,curtype,VIrw.qty,qty,VIr.CurncyCode,VIrw.Sum,sv,svb1,sumb1);
            end else begin
              if (nonblank(INr.Unittext2) and (INr.UnitCoefficient>0)) then begin
                qty = VIrw.qty*INr.UnitCoefficient;
              end else begin
                qty = VIrw.qty;
              end;
              if (VIr.InvType!=kInvoiceTypeCredit and VIr.InvType!=kInvoiceTypeCreditSpecialSales) then begin
                aInSrwQuant[j] = aInSrwQuant[j] + qty;
                aInSrwSum[j] = aInSrwSum[j] + VIrw.Sum;
                aInSrwSumB1[j] = aInSrwSumB1[j] + sumb1;
                aInSrwWeight[j] = aInSrwWeight[j] + VIrw.qty * INr.Weight;
              end else begin
                aInSrwQuant[j] = aInSrwQuant[j] - qty;
                aInSrwSum[j] = aInSrwSum[j] - VIrw.Sum;
                aInSrwSumB1[j] = aInSrwSumB1[j] - sumb1;
                aInSrwWeight[j] = aInSrwWeight[j] - VIrw.qty * INr.Weight;
              end;  
              aInSrwconsignno[j] = aInSrwconsignno[j] + 1;
              aInStatValSrwSum[j] = aInStatValSrwSum[j] + sv;
              aInStatValSrwB1Sum[j] = aInStatValSrwB1Sum[j] + svb1;
            end;
            if (VIr.InvType!=kInvoiceTypeCredit and VIr.InvType!=kInvoiceTypeCreditSpecialSales) then begin
              InStatotsum = InStatotsum + VIrw.Sum;//MulRateToBase1(VIr.CurncyCode,VIrw.Sum,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
            end else begin
              InStatotsum = InStatotsum - VIrw.Sum;//MulRateToBase1(VIr.CurncyCode,VIrw.Sum,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
            end;
          end;//testf
LSkipDoInStaPuForm:;          
        end;//for
L12DoInStaPuForm:;        
      end;//testf
    end;
  end;
  PrintInStaPuForm(RepSpec,InStaVATNr,InStaCompName,InStaAddr0,InStaAddr1,InStaAddr2,
                 InStaAddr3,InStaAddr4,aInSrwCountryOrigCode,InStaUSName,InStaPrintDate,InStaStartDate,InStaEndDate,InStarwcnt,InStatotsum,
                 aInSrwCommodity,aInSrwArtEKNCode,aInSrwShipMode,aInSrwShipDeal,aInSrwCountryCode,
                 aInSrwArtCode,aInSrwTraderRef,aInSrwUnittext,aInSrwQuant,aInSrwCur,aInSrwSum,
                 aInSrwWeight,aInSrwconsignno,aInSrwTransType,aInStatValSrwSum,aInStatValSrwB1Sum,aInSrwSumB1,acnt);
  RETURN;
END;

global
procedure InStaPuForm(record RcVc RepSpec)
BEGIN
  Boolean tmpf;
  
  tmpf = PrintDocument(RepSpec,"InStaPuForm",false);
  RETURN;
END;

