external function val MulWithRateToBase1(var string,Date,val,roundmode);
external function Integer GetIntYc(Date);
external procedure AddARSRw2(Array Integer,Array string,Array string,Array LongInt,Array LongInt,
                    Array Date,Array Date,
                    Array string,Array val,Array val,Array string,var Integer,
                    Integer,string,string,Date,Date,val,val,string,string,Boolean);
                    
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);

procedure AddToIPArray(Array LongInt aipnr,var Integer acnt,LongInt ipnr)
begin
  Integer i;
  
  for (i=0;i<acnt;i=i+1) begin
    if (aipnr[i]==ipnr) then begin goto LAddToIPArray; end;
  end;
  aipnr[acnt] = ipnr;
  acnt = acnt + 1;
LAddToIPArray:;  
  return;
end;

global
procedure DocCustListTransIP(record RcVc RepSpec,record IPrsVc IPrsr,record CUVc CUp,var val balp,Array Integer aRwtype,Array string aInvoiceNr,Array LongInt alatedays,Array LongInt aRemndr,Array Date aInvDate,Array Date aDueDate,Array string aCurncyCode,Array val aIntVal,Array val aRVal,Array string aCustOrdNo,var Integer acnt,
                             Array LongInt aipnr,var Integer aipcnt)
begin
  record IPVc IPr;
  row IPVc IPrw;
  Integer i,rwcnt;
  val v;
  Boolean testf;
  string 255 tstr;
  val cuscurvaltot,cuscurval;
  record IVVc IVr;
  Date blankd;
  Array string 255 aOfficialSerNo;

  v = blankval;
  IPr.SerNr = IPrsr.TransNr;
  if (RepSpec.flags[8]!=0) then begin
    for (i=0;i<aipcnt;i=i+1) begin
      if (aipnr[i]==IPr.SerNr) then begin 
        goto LDocCustListTransIP;
      end;
    end;
  end;

  if (ReadFirstMain(IPr,1,true)) then begin
    if (IPr.RejectedFlag==0) then begin
    rwcnt = MatRowCnt(IPr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IPr,i,IPrw);
      v = blankval;
      testf = false;
      if ((blankdate(IPrw.PayDate)) or (IPrw.PayDate==IPrsr.CustDate)) then begin
        testf = true;
      end;
      if ((IPrw.stp!=1) and (IPrw.stp!=5) and (IPrw.stp!=6) and (IPrw.stp!=7)) then begin
        testf = false;
      end;
      if (nonblank(RepSpec.CurncyCode)) then begin
        if (IPrw.InvCurncy!=RepSpec.CurncyCode) then begin testf = false; end;
      end;

      if (testf) then begin
        if (RepSpec.flags[8]!=0) then begin
          AddToIPArray(aipnr,aipcnt,IPr.SerNr);
        end;
        cuscurvaltot = blankval;
        IVr.SerNr = IPrw.InvoiceNr;
        if (ReadFirstMain(IVr,1,true)) then begin end;
        if ((IPrw.ovst==0)) then begin//and (IPrw.stp==1) what about all special rows?
            switch (RepSpec.ArtMode) begin
              case 0:
                testf = true;
                if (RepSpec.flags[8]==0) then begin
                  if (IPrw.InvoiceNr!=IPrsr.IVNr) then begin testf = false; end;
                end;
                if (testf) then begin
                  if (IPr.TransDate==IPrsr.TransDate) then begin
                    if (IPrw.PayDate==IPrsr.CustDate) then begin
                      if (IPrw.CustCode==CUp.Code) then begin
                      if (IPrw.stp!=7) then begin
                        v = v + IPrw.InvVal;
                        if (IVr.CurncyCode==CUp.CurncyCode) then begin
                          cuscurval = IPrw.InvVal;
                        end else begin
                          cuscurval = MulRateToBase1(IVr.CurncyCode,IPrw.InvVal,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                        end;
                        cuscurvaltot = cuscurvaltot + cuscurval;
                      end;
                      end;
                    end;
                  end;
                end;
              case 1:
                testf = true;
                if (RepSpec.flags[8]==0) then begin
                  if (IPrw.InvoiceNr!=IPrsr.IVNr) then begin testf = false; end;
                end;
                if (testf) then begin
                  if (IPr.TransDate==IPrsr.TransDate) then begin
                    if (IPrw.PayDate==IPrsr.CustDate) then begin
                      if (IPrw.CustCode==CUp.Code) then begin
                      if (IPrw.stp!=7) then begin
                        v = v + IPrw.InvVal;
                        if (IPrw.InvoiceNr>0) then begin
                          if (IVr.CurncyCode==CUp.CurncyCode) then begin
                            cuscurval = IPrw.InvVal;
                          end else begin
                            cuscurval = MulRateToBase1(IVr.CurncyCode,IPrw.InvVal,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                          end;
                        end else begin
                          if (IPrw.InvCurncy==CUp.CurncyCode) then begin
                            cuscurval = IPrw.InvVal;
                          end else begin
                            cuscurval = MulWithRateToBase1(IPrw.InvCurncy,IPr.TransDate,IPrw.InvVal,DefaultCurRoundOff);
                          end;
                        end;
                        cuscurvaltot = cuscurvaltot + cuscurval;                        
                      end;
                      end;
                    end;
                  end;
                  
                end;
          end;
          tstr = IPr.SerNr;
          if (RepSpec.flags[8]==0) then begin
            if (IPrw.InvoiceNr>0) then begin
              tstr = tstr & " (";
              tstr = tstr & IPrw.InvoiceNr;
              tstr = tstr & ")";
            end else begin
              if (IPrw.CUPNr>0) then begin
                tstr = tstr & " (";
                tstr = tstr & IPrw.CUPNr;
                tstr = tstr & ")";
              end;
            end;
          end;
        end;
      end;

      if (v!=0) then begin
        if (IPrw.InvoiceNr!=-1) then begin
          balp = balp - cuscurvaltot;
          v = -v;
          AddARSRw2(aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,
                    aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt,
                    6,tstr,"",IPrsr.TransDate,blankd,v,-cuscurvaltot,IPrw.InvCurncy,"",RepSpec.flags[8]!=0);
        end else begin
          balp = balp - cuscurvaltot;
          v = -v;
          AddARSRw2(aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,
                    aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt,
                    7,tstr,"",IPrsr.TransDate,blankd,v,-cuscurvaltot,IPrw.InvCurncy,"",RepSpec.flags[8]!=0);
        end;
      end;
    end;
    end;
  end;
LDocCustListTransIP:;  
  return;
end;

global
procedure DocCustListTransCredMan(record IPrsVc IPrsr,record CUVc CUp,var val balp,Array Integer aRwtype,Array string aInvoiceNr,Array LongInt alatedays,Array LongInt aRemndr,Array Date aInvDate,Array Date aDueDate,Array string aCurncyCode,Array val aIntVal,Array val aRVal,Array string aCustOrdNo,var Integer acnt)
begin
  record CredManVc CredManr;
  val v;
  Boolean testf;
  string 255 tstr;
  val cuscurvaltot,cuscurval;
  record IVVc IVr;
  Date blankd;
  Array string 255 aOfficialSerNo;

  v = blankval;
  CredManr.SerNr = IPrsr.TransNr;
  if (ReadFirstMain(CredManr,1,true)) then begin
    if (CredManr.Invalid==0) then begin
      v = blankval;
      cuscurvaltot = blankval;
      IVr.SerNr = CredManr.IVNr;
      if (ReadFirstMain(IVr,1,true)) then begin
        v = v + CredManr.InvSum4;
        if (IVr.CurncyCode==CUp.CurncyCode) then begin
          cuscurval = CredManr.InvSum4;
        end else begin
          cuscurval = MulRateToBase1(CredManr.CurncyCode,CredManr.InvSum4,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2,DefaultCurRoundOff);
        end;
        cuscurvaltot = cuscurvaltot + cuscurval;
        tstr = CredManr.SerNr;
        tstr = tstr & " (";
        tstr = tstr & CredManr.IVNr;
        tstr = tstr & ")";
      end;
      if (v!=0) then begin
        if (IPrsr.IVNr!=-1) then begin
          balp = balp - cuscurvaltot;
          v = -v;
          AddARSRw2(aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,
                    aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt,
                    10,tstr,"",IPrsr.TransDate,blankd,v,-cuscurvaltot,CredManr.CurncyCode,"",false);
        end;
      end;
    end;
  end;
LDocCustListTransCredMan:;  
  return;
end;

global
procedure DocCustListTransTR(record IPrsVc IPrsr,record CUVc CUp,var val balp,Array Integer aRwtype,Array string aInvoiceNr,Array LongInt alatedays,Array LongInt aRemndr,Array Date aInvDate,Array Date aDueDate,Array string aCurncyCode,Array val aIntVal,Array val aRVal,Array string aCustOrdNo,var Integer acnt)
begin
  record TRVc TRr;
  row TRVc TRrw;
  Integer i,rwcnt;
  val cuscurvaltot,cuscurval,v;
  Date blankd;
  Array string 255 aOfficialSerNo;
  
  TRr.Number = IPrsr.TransNr;
  TRr.IntYc = GetIntYc(IPrsr.TransDate);
  if (ReadFirstMain(TRr,2,true)) then begin
    rwcnt = MatRowCnt(TRr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TRr,i,TRrw);
      if ((TRrw.Typ==1) and (TRrw.SerNr==-1) and (IPrsr.IVNr==-1)) then begin
        if (TRrw.CompCode==IPrsr.CustCode) then begin
          if (TRrw.DebVal!=0) then begin
            v = TRrw.DebVal;
            cuscurval = TRrw.DebVal;
            if (TRrw.CurDebVal!=0) then begin
              v = TRrw.CurDebVal;
              cuscurval = MulRateToBase1(TRrw.Curncy,v,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
              if (TRrw.Curncy==CUp.CurncyCode) then begin
                cuscurval = v;
              end;
            end;
            cuscurvaltot = cuscurvaltot + cuscurval;
          end;
          if (TRrw.CredVal!=0) then begin
            v = TRrw.CredVal;
            cuscurval = TRrw.CredVal;
            if (TRrw.CurCredVal!=0) then begin
              v = TRrw.CurCredVal;
              cuscurval = MulRateToBase1(TRrw.Curncy,v,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
              if (TRrw.Curncy==CUp.CurncyCode) then begin
                cuscurval = v;
              end;
            end;
            cuscurvaltot = cuscurvaltot - cuscurval;
            v = -v;
          end;
        end;
      end;
      if ((TRrw.Typ==1) and (TRrw.SerNr!=-1)) then begin
        if (TRrw.SerNr==IPrsr.IVNr) then begin
          if (TRrw.CompCode==IPrsr.CustCode) then begin
            if (TRrw.DebVal!=0) then begin
              v = TRrw.DebVal;
              cuscurval = TRrw.DebVal;
              if (TRrw.CurDebVal!=0) then begin
                v = TRrw.CurDebVal;
                cuscurval = MulRateToBase1(TRrw.Curncy,v,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
                if (TRrw.Curncy==CUp.CurncyCode) then begin
                  cuscurval = v;
                end;
              end;
              cuscurvaltot = cuscurvaltot + cuscurval;
            end;
            if (TRrw.CredVal!=0) then begin
              v = TRrw.CredVal;
              cuscurval = TRrw.CredVal;
              if (TRrw.CurCredVal!=0) then begin
                v = TRrw.CurCredVal;
                cuscurval = MulRateToBase1(TRrw.Curncy,v,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
                if (TRrw.Curncy==CUp.CurncyCode) then begin
                  cuscurval = v;
                end;
              end;
              cuscurvaltot = cuscurvaltot - cuscurval;
              v = -v;
            end;
          end;
        end;
      end;
    end;
    if (v!=0) then begin
      if (IPrsr.IVNr!=-1) then begin
        balp = balp + cuscurvaltot;
      end else begin
        balp = balp + v;
      end;
      AddARSRw2(aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,
                aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt,
                8,TRr.Number,"",IPrsr.TransDate,blankd,v,cuscurvaltot,TRrw.Curncy,"",false);
    end;
  end;
  return;
end;

global
procedure DocCustListTransPurgeTR(record IPrsVc IPrsr,record CUVc CUp,var val balp,Array Integer aRwtype,Array string aInvoiceNr,Array LongInt alatedays,Array LongInt aRemndr,Array Date aInvDate,Array Date aDueDate,Array string aCurncyCode,Array val aIntVal,Array val aRVal,Array string aCustOrdNo,var Integer acnt)
begin
  record PurgeTRVc PurgeTRr;
  Integer i,rwcnt;
  val cuscurvaltot,cuscurval,v;
  Date blankd;
  Array string 255 aOfficialSerNo;
  
  PurgeTRr.Number = IPrsr.TransNr;
  PurgeTRr.IntYc = GetIntYc(IPrsr.TransDate);
  PurgeTRr.TransRow = IPrsr.TransRow;
  if (ReadFirstMain(PurgeTRr,3,true)) then begin

      if ((PurgeTRr.Typ==1) and (PurgeTRr.SerNr==-1) and (IPrsr.IVNr==-1)) then begin
        if (PurgeTRr.CompCode==IPrsr.CustCode) then begin
          if (PurgeTRr.DebVal!=0) then begin
            v = PurgeTRr.DebVal;
            cuscurval = PurgeTRr.DebVal;
            if (PurgeTRr.CurDebVal!=0) then begin
              v = PurgeTRr.CurDebVal;
              cuscurval = MulRateToBase1(PurgeTRr.Curncy,v,PurgeTRr.FrRate,PurgeTRr.ToRateB1,PurgeTRr.ToRateB2,PurgeTRr.BaseRate1,PurgeTRr.BaseRate2,DefaultCurRoundOff);
              if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
                cuscurval = v;
              end;
            end;
            cuscurvaltot = cuscurvaltot + cuscurval;
          end;
          if (PurgeTRr.CredVal!=0) then begin
            v = PurgeTRr.CredVal;
            cuscurval = PurgeTRr.CredVal;
            if (PurgeTRr.CurCredVal!=0) then begin
              v = PurgeTRr.CurCredVal;
              cuscurval = MulRateToBase1(PurgeTRr.Curncy,v,PurgeTRr.FrRate,PurgeTRr.ToRateB1,PurgeTRr.ToRateB2,PurgeTRr.BaseRate1,PurgeTRr.BaseRate2,DefaultCurRoundOff);
              if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
                cuscurval = v;
              end;
            end;
            cuscurvaltot = cuscurvaltot - cuscurval;
            v = -v;
          end;
        end;
      end;
      if ((PurgeTRr.Typ==1) and (PurgeTRr.SerNr!=-1)) then begin
        if (PurgeTRr.SerNr==IPrsr.IVNr) then begin
          if (PurgeTRr.CompCode==IPrsr.CustCode) then begin
            if (PurgeTRr.DebVal!=0) then begin
              v = PurgeTRr.DebVal;
              cuscurval = PurgeTRr.DebVal;
              if (PurgeTRr.CurDebVal!=0) then begin
                v = PurgeTRr.CurDebVal;
                cuscurval = MulRateToBase1(PurgeTRr.Curncy,v,PurgeTRr.FrRate,PurgeTRr.ToRateB1,PurgeTRr.ToRateB2,PurgeTRr.BaseRate1,PurgeTRr.BaseRate2,DefaultCurRoundOff);
                if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
                  cuscurval = v;
                end;
              end;
              cuscurvaltot = cuscurvaltot + cuscurval;
            end;
            if (PurgeTRr.CredVal!=0) then begin
              v = PurgeTRr.CredVal;
              cuscurval = PurgeTRr.CredVal;
              if (PurgeTRr.CurCredVal!=0) then begin
                v = PurgeTRr.CurCredVal;
                cuscurval = MulRateToBase1(PurgeTRr.Curncy,v,PurgeTRr.FrRate,PurgeTRr.ToRateB1,PurgeTRr.ToRateB2,PurgeTRr.BaseRate1,PurgeTRr.BaseRate2,DefaultCurRoundOff);
                if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
                  cuscurval = v;
                end;
              end;
              cuscurvaltot = cuscurvaltot - cuscurval;
              v = -v;
            end;
          end;
        end;
      end;

    if (v!=0) then begin
      if (IPrsr.IVNr!=-1) then begin
        balp = balp + cuscurvaltot;
      end else begin
        balp = balp + v;
      end;
      AddARSRw2(aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,
                aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt,
                8,PurgeTRr.Number,"",IPrsr.TransDate,blankd,v,cuscurvaltot,PurgeTRr.Curncy,"",false);
    end;
  end;
  return;
end;

global
procedure DocCustListTransIV(record RcVc RepSpec,record IPrsVc IPrsr,record CUVc CUp,var val balp,Array Integer aRwtype,Array string aInvoiceNr,Array string aOfficialSerNo,Array LongInt alatedays,Array LongInt aRemndr,Array Date aInvDate,Array Date aDueDate,Array string aCurncyCode,Array val aIntVal,Array val aRVal,Array string aCustOrdNo,var Integer acnt)
begin
  record IVVc IVr;
  record IVVc IV2r;
  row IVVc IVrw;
  Integer rwcnt,i;
  val cuscurval,v,sum4;
  Boolean cash;
  string 255 tstr;
  Date blankd;
  
  IVr.SerNr = IPrsr.TransNr;
  if (ReadFirstMain(IVr,1,true)) then begin end;
  if (IVr.Invalid!=0) then begin goto LDocCustListTransIV; end;          
  if (nonblank(RepSpec.CurncyCode)) then begin
    if (IVr.CurncyCode!=RepSpec.CurncyCode) then begin goto LDocCustListTransIV; end;
  end;
//  if (IVr.CurncyCode==CUp.CurncyCode) then begin
  if (nonblank(RepSpec.CurncyCode) and IVr.CurncyCode==RepSpec.CurncyCode) or (blank(RepSpec.CurncyCode) and IVr.CurncyCode==CUp.CurncyCode) then begin
    cuscurval = IVr.Sum4;
  end else begin
    cuscurval = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
  end;    
  sum4 = IVr.Sum4;
  switch (IVr.InvType) begin
    case kInvoiceTypeCash:
      AddARSRw2(aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,
                aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt,
                IVr.InvType,IVr.SerNr,IVr.OfficialSerNr,IVr.InvDate,blankd,IVr.Sum4,IVr.Sum4,IVr.CurncyCode,IVr.CustOrdNr,false);
    case kInvoiceTypeCashInvoiceReceiptPRT:
      AddARSRw2(aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,
                aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt,
                IVr.InvType,IVr.SerNr,IVr.OfficialSerNr,IVr.InvDate,blankd,IVr.Sum4,IVr.Sum4,IVr.CurncyCode,IVr.CustOrdNr,false);
    case kInvoiceTypeCreditSpecialSales: 
      goto LkInvoiceTypeCredit;
    case kInvoiceTypeCredit:
LkInvoiceTypeCredit:;
      cash = false;
      IV2r.SerNr = IVr.CredInv;
      if (ReadFirstMain(IV2r,1,true)) then begin
        if (IV2r.InvType==kInvoiceTypeCash or IV2r.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin cash = true; end;
      end;
      if (cash==false) then begin
        balp = balp - cuscurval;
      end;
      tstr = IVr.SerNr;
      if (IVr.CredInv>0) then begin
        tstr = tstr & " (";
        tstr = tstr & IVr.CredInv;
        tstr = tstr & ")";
      end;
      v = -IVr.Sum4;
      if (cash) then begin
        AddARSRw2(aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,
                  aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt,
                  -3,tstr,IVr.OfficialSerNr,IVr.InvDate,blankd,v,-IVr.Sum4,IVr.CurncyCode,IVr.CustOrdNr,false);
      end else begin
        AddARSRw2(aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,
                  aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt,
                  IVr.InvType,tstr,IVr.OfficialSerNr,IVr.InvDate,blankd,v,-cuscurval,IVr.CurncyCode,IVr.CustOrdNr,false);
      end;

      v = 0;
      rwcnt = MatRowCnt(IVr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVr,i,IVrw);
        switch (IVrw.stp) begin
          case 14: v = v - IVrw.Sum;
          case 15: v = v - MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
          case 16: v = v - IVrw.Sum;
        end;
      end;
      if ((IVr.RetnValue>0 and IVr.Sum4>0) or (IVr.RetnValue<0 and IVr.Sum4<0)) then begin
        v = v + IVr.RetnValue;      
      end;
      v = -v;
      if (v!=0) then begin
        balp = balp + v;

        AddARSRw2(aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,
                  aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt,
                  IVr.InvType,IVr.SerNr,IVr.OfficialSerNr,IVr.InvDate,IVr.PayDate,v,v,IVr.CurncyCode,IVr.CustOrdNr,false); // Always base......
      end;

    otherwise
      balp = balp + cuscurval;
      AddARSRw2(aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,
                aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt,
                IVr.InvType,IVr.SerNr,IVr.OfficialSerNr,IVr.InvDate,IVr.PayDate,sum4,cuscurval,IVr.CurncyCode,IVr.CustOrdNr,false);
      v = 0;
      rwcnt = MatRowCnt(IVr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVr,i,IVrw);
        switch (IVrw.stp) begin
          case kInvoiceRowTypeGiftVoucherPayment: v = v - IVrw.Sum;
          case kInvoiceRowTypeCashPayment: v = v - MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
          case kInvoiceRowTypeCreditCardPayment: v = v - IVrw.Sum;
/*
SL>>Periodic customer statement- Show Fwd Balance>>Document and Report
prepayment ampunt is shown with receipt
          case kInvoiceRowTypePrepayment: 
            if (RepSpec.flags[10]!=0) then begin
              v = v - IVrw.Sum;
            end;
*/
        end;
      end;

      if ((IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeNormalSpecialSales) or (IVr.InvType==kInvoiceTypeInterest) or (IVr.InvType==kInvoiceTypeDownpayment)) then begin
        if ((IVr.RetnValue>0 and IVr.Sum4>0) or (IVr.RetnValue<0 and IVr.Sum4<0)) then begin
          v = v + IVr.RetnValue;      
        end;
      end;

      if (v!=0) then begin
        balp = balp + v;
        AddARSRw2(aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,
                  aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt,
                  IVr.InvType,IVr.SerNr,IVr.OfficialSerNr,IVr.InvDate,IVr.PayDate,v,v,IVr.CurncyCode,IVr.CustOrdNr,false); // Always base......
      end;
  end;
LDocCustListTransIV:; 
  return;
end;

global
procedure DocCustListTransBalanceIV(val unpaid,record IPrsVc IPrsr,record CUVc CUp,var val balp,Array Integer aRwtype,Array string aInvoiceNr,Array string aOfficialSerNo,Array LongInt alatedays,Array LongInt aRemndr,Array Date aInvDate,Array Date aDueDate,Array string aCurncyCode,Array val aIntVal,Array val aRVal,Array string aCustOrdNo,var Integer acnt)
begin
  record IVVc IVr;
  record IVVc IV2r;
  row IVVc IVrw;
  Integer rwcnt,i;
  val cuscurval,v,sum4;
  Boolean cash;
  string 255 tstr;
  Date blankd;
  
  IVr.SerNr = IPrsr.TransNr;
  if (ReadFirstMain(IVr,1,true)) then begin end;
  if (IVr.Invalid!=0) then begin goto LDocCustListTransBalanceIV; end;          
  if (IVr.CurncyCode==CUp.CurncyCode) then begin
    cuscurval = unpaid;
  end else begin
    cuscurval = MulRateToBase1(IVr.CurncyCode,unpaid,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
  end;
  sum4 = unpaid;
  
  if ((IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeNormalSpecialSales) or (IVr.InvType==kInvoiceTypeInterest) or 
      (IVr.InvType==kInvoiceTypeDownpayment) or ((IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) and (IVr.CredInv<0))) then begin
    balp = balp + cuscurval;
    
    AddARSRw2(aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,
              aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt,
              IVr.InvType,IVr.SerNr,IVr.OfficialSerNr,IVr.InvDate,IVr.PayDate,sum4,cuscurval,IVr.CurncyCode,IVr.CustOrdNr,false);
    
    balp = balp + v;
    
  /* 
    AddARSRw2(aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,
              aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt,
              IVr.InvType,IVr.SerNr,IVr.InvDate,IVr.PayDate,v,balp,IVr.CurncyCode,IVr.CustOrdNr,false); // Always base......
   */
  end;
LDocCustListTransBalanceIV:; 
  return;
end;
