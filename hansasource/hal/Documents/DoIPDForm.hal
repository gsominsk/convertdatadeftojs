external procedure PrintCurrencyCode(string,string);
external procedure PortugueseFormFields(Integer);
external function string 255 GetOffSerNrIVJournalID(LongInt,string,string);
external procedure CalcIVTotalsFromIP(array LongInt,vector val,record DocVc,record RoundBlock,record LangNrVc,record SysFormatBlock);
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external function Integer PMCheckType(string,var string,var string);
external procedure OutAddress(string,string,string,string,string,string,string);
external function Boolean FindFormcode(Integer,Integer);
external function Boolean GetPaymentModeDoc(string,var string);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external procedure IVVATPart(LongInt,val,var val);
external function Boolean GetPMTAX(string,var val);
external function Integer GetCheck(string,string,LongInt,var string,var string,var string,var val,var Date,var Date);
external function Boolean GetPM(string,var string,var string);

external procedure ValToText(val,Integer,string,string,var string);
external procedure RoundRowSum(string,string,string,var val);
external procedure PrintNote(record NotepadVc);
external procedure GetMonthText(string,Date,var string);
external procedure GetFieldArgument(record DocVc,Integer,var string);
external function Integer NumberofDocumentPages(string,Integer);
external function Boolean Getformcode(Integer,Integer,string,string,string,LongInt,LongInt,string,string,Integer,string,var string);
external procedure PrintValue(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external procedure GetLangNr(string,var record LangNrVc);
external procedure CommonDocumentFields(record RcVc);


procedure IPPrintNote(record IPVc IPr,string argumentstr)
BEGIN
  record NotepadVc Noter;
  record RLinkVc RLr;
  Integer notenr;

  notenr = 1;
  while (ReadRecordLink(IPr,notenr,Noter,RLr)) begin
    if ((argumentstr==RLr.Comment) or (blank(argumentstr))) then begin
      PrintNote(Noter);
      goto LIPPrintNote;
    end;
    notenr = notenr + 1;
  end;
LIPPrintNote:;  
  RETURN;
END;

procedure GetPMBankAccName(string macc,var string bankname,var string banknr)
BEGIN
  Integer i,rwcnt;
  record PMBlock PMRec;
  row PMBlock pmrw;
  
  bankname = "";
  banknr = "";
  BlockLoad(PMRec);
  rwcnt = MatRowCnt(PMRec);
  for (i=0 ;i<rwcnt;i=i+1) begin
    MatRowGet(PMRec,i,pmrw);
    if (pmrw.Code==macc) then begin
      banknr = pmrw.BankNr;
      bankname = pmrw.BankName;
      goto LGetPMBankAccName;
    end;
  end;
LGetPMBankAccName:;
  RETURN;
END;

procedure InsertTempInArray(var array string aTempStr,var array val aTempVal,var Integer acnt,string iTempStr,val iTempVal,boolean consolidate2)
begin
  integer i;
  boolean foundf,consolidate;
  
  foundf = false;
  consolidate = consolidate2;
  if (consolidate==true) then begin 
    for (i=0;i<=acnt;i=i+1) begin
      if (aTempStr[i]==iTempStr) then begin 
        aTempVal[i] = aTempVal[i] + iTempVal;
        foundf = true;
        goto LInsertTempInArray02;
      end;
    end;
  end;  
  if (consolidate==false or foundf==false) then begin 
    for (i=acnt;i>0;i=i-1) begin
      if (aTempStr[i-1]>iTempStr) then begin
        aTempStr[i] = aTempStr[i-1];
        aTempVal[i] = aTempVal[i-1];
      end else begin
        aTempStr[i] = iTempStr;
        aTempVal[i] = iTempVal;
        goto LInsertTempInArray;
      end; 
    end;   
    aTempStr[0] = iTempStr;
    aTempVal[0] = iTempVal;
  LInsertTempInArray:;
    acnt = acnt +1;
  end;    
LInsertTempInArray02:;
  return;
end;

function 
Boolean PrintReceipt(record RcVc RepSpec,string formcode,record IPVc IPr,record CUVc CUr,record SysFormatBlock SysFormatRec,record LangNrVc LangNrr,
                     string IPDrBankAcc,string IPDrBankName,string IPDrBankNr1,string IPDrBankNr2,string IPDrCustCode,
                     string IPDrCustName,string IPDrInvCurncy,string IPDrBankCurncy,string IPDrRecCurncy,string IPDrSWIFT,string IPDrRefStr,
                     val IPDrInvVal,val IPDrInvValB1,val IPDrBankVal,val IPDrRecVal,val IPDrBase1Val,val SettlementVal,val IPDrRebVal,val IPDrVATVal,val IPDrRebVATVal,
                     Array Integer IVRecpstp,Array string IVRecpInvCurncy,Array string IVRecpBankCurncy,Array string IVRecpRecCurncy,Array string IVRecpComment,Array string IVRecpPayMode,Array string IVRecpAccount,
                     Array LongInt IVRecpInvoiceNr,Array LongInt IVRecpChequeNr,Array Date IVRecpInvDate,
                     Array val IVRecpInvVal,Array val IVRecpBankVal,Array val IVRecpRecVal,Array val IVRecpBase1Val,Array val IVRecpInvOutstand,
                     Array string IVRecpRecpOfficialSerNr,Integer IVRecpcnt,
                     Array Integer aChequeType,Array LongInt aChequeNr,Array val aChequeTot,var Integer aChcnt,
                     Array string aPayMode,Array val aPayModeTot,var Integer apmcnt)
BEGIN
  Boolean res;
  record DocVc Docr;
  string 255 tstr,t2,fldarg,bankname,curncy,oldCheque;
  Integer i,gchk,j;
  val t,v,openv,totinvoutstand;
  Date td,regdate;
  record ModuleBlock MBr;
  record BaseCurBlock BCb;
  array string 255 achequeNum;
  record OwnCheckVc OwnCheckr;
  record CheckVc Checkr;
  row LegalInvNrBlock LINrbrw;
  record RoundBlock RoundRec; 
  array LongInt aIVr;
  vector val v_IVrReceiveVal;
  record IVVc IVr;
  
  BlockLoad(MBr);
  BlockLoad(BCb);
  if (OpenForm(formcode)) then begin  
    if (IPr.OKFlag==0) then begin
      if (MBr.NoTestprintEnabler==0) then begin
        FormWaterMark(1117,-1);
      end;
    end;
    if ((IPr.OKFlag!=0) and (IPr.Invalid==0)) then begin
      if (IPr.Prntdf!=0) then begin
        FormWaterMark(1118,-1);
      end;
    end else begin
      if (IPr.Prntdf!=0) then begin
        FormWaterMark(1118,-1);
      end;
    end;
    if (IPr.Invalid!=0) then begin
      FormWaterMark(1400,-1);
    end;
    if (HasLocalization("ARG")==false) then begin
      ClearArray(aChequeNr);
      ClearArray(aChequeTot);
      aChcnt = 0;
      ClearArray(aPayMode);
      ClearArray(aPayModeTot);
      apmcnt = 0;
    end;
    res = true;
    CommonDocumentFields(RepSpec);
    NumberofDocumentPages(formcode,MatRowCnt(IPr));
    Docr.Code = formcode;
    if (ReadFirstMain(Docr,1,true)) then begin
    end;
    if (FIELDINFORM("F_NOTE")) then begin
      GetFieldArgument(Docr,F_NOTE,fldarg);
      IPPrintNote(IPr,fldarg);
    end;
    if (HasLocalization("ARG")) then begin
      OUTFORMFIELD("F_OFFICIALSERNOHEAD",IPr.OfficialSerNr);
    end;
    if (HasLocalization("PRT")) then begin
      PortugueseFormFields(28282);
      GetLegalInvNrRow(IPr.OfficialSerNr,LINrbrw);
      OUTFORMFIELD("F_OFFICIALSERNOHEAD",GetOffSerNrIVJournalID(IPr.SerNr,"IPVc",IPr.OfficialSerNr) & " " &  Left(IPr.OfficialSerNr,len(IPr.OfficialSerNrSerie)) & "/" & Right(IPr.OfficialSerNr,len(IPr.OfficialSerNr)-len(IPr.OfficialSerNrSerie)));
      OUTFORMFIELD("F_OFFICIALSERNO2",IPr.OfficialSerNr2);    
      if (IPr.IPBookVAT!=0) then begin 
        OUTFORMFIELD("F_IPBOOKVAT",USetStr(19123));
      end;
    end;  
    OutFormField("F_DATEDAY",GetDay(IPr.TransDate));
    OutFormField("F_DATEYEAR",GetYear(IPr.TransDate));
    OutFormField("F_DATEMONTH",GetMonth(IPr.TransDate));
    GetMonthText("",IPr.TransDate,tstr);
    OUTFORMFIELD("F_DATEMONTHTEXT",tstr);
    OUTFORMFIELD("F_REGDATUM",USetStr(2780+GetMonth(IPr.TransDate)));
    OutFormField("F_REFERENSNUMMER",IPr.RecNumber);
    OutFormField("F_UTBETNR",IPr.SerNr);
    OutFormField("F_SERNR",IPr.SerNr);
    OutFormField("F_TRANSDATUM",IPr.TransDate);
    OUTFORMFIELD("F_TRANSDATUMHIJRI",ConvertDate(kCalendarGregorian,IPr.TransDate,kCalendarHijri));
    OutFormField("F_KOMMENTAR2",IPr.Comment);

    OUTFORMFIELD("F_KUNDMOMSNR",CUr.VATNr);
    OUTFORMFIELD("F_BANKACC",CUr.BankAccount);
    OUTFORMFIELD("F_VARTKUNDNR",CUr.Code);
    OUTFORMFIELD("F_LEVNAMN",CUr.Name);
    OutAddress("F_LEVADRESS",CUr.Name,CUr.InvAddr0,CUr.InvAddr1,CUr.InvAddr2,CUr.InvAddr3,CUr.InvAddr4);
    OUTFORMFIELD("F_SPECLEV",CUr.Comment);

    OUTFORMFIELD("F_REFSTR",IPDrRefStr);
    if (FIELDINFORM("F_TOTALDISCOUNT")) then begin
      t = IPDrRebVal - IPDrRebVATVal;
      RoundRowSum(IPDrRecCurncy,IVRecpPayMode[i],"IPVc",t);
      PrintValue("F_TOTALDISCOUNT",t,M4Val,LangNrr,SysFormatRec,false);
    end;
    if (FIELDINFORM("F_VATTOT")) then begin
      t = IPDrVATVal;
      RoundRowSum(IPDrRecCurncy,IVRecpPayMode[i],"IPVc",t);
      PrintValue("F_VATTOT",t,M4Val,LangNrr,SysFormatRec,false);
    end;
    if (FIELDINFORM("F_TOTVATBASE")) then begin
      t = IPDrRebVATVal;
      RoundRowSum(IPDrRecCurncy,IVRecpPayMode[i],"IPVc",t);
      PrintValue("F_TOTVATBASE",t,M4Val,LangNrr,SysFormatRec,false);
    end;
    if (FIELDINFORM("F_SUMMA")) then begin
      t = IPDrRecVal - IPDrRebVal - IPDrVATVal;
      PrintValue("F_SUMMA",t,M4Val,LangNrr,SysFormatRec,false);
    end;
//    if (IPDrInvVal>0 or HasLocalization("PRT")) then begin
      PrintValue("F_ATTBETALA",IPDrInvVal,M4Val,LangNrr,SysFormatRec,false);
//    end else begin
//      OUTFORMFIELD("F_ATTBETALA",USetStr(1216));
//    end;
    if (FIELDINFORM("F_ATTBETALATEXT")) then begin
      ValToText(IPDrInvVal,M4Val,IPDrInvCurncy,CUr.LangCode,tstr);
      OUTFORMFIELD("F_ATTBETALATEXT",tstr);
    end;
    if (FIELDINFORM("F_ATTBETALATEXTBASE1")) then begin
      ValToText(IPDrInvValB1,M4Val,BCb.BaseCur1,CUr.LangCode,tstr);
      OUTFORMFIELD("F_ATTBETALATEXTBASE1",tstr);
    end;
    PrintValue("F_BASE1BETALA",IPDrBase1Val,M4Val,LangNrr,SysFormatRec,false);
    PrintValue("F_KASSARABATT",SettlementVal,M4Val,LangNrr,SysFormatRec,false);
    PrintValue("F_AMOUNTWITHOUTDISCSUM",IPDrInvVal + SettlementVal,M4Val,LangNrr,SysFormatRec,false);
    OUTFORMFIELD("F_KUNDNR",IPDrCustCode);
    OUTFORMFIELD("F_KOMMENTAR",IPDrCustName);
    OUTFORMFIELD("F_TILLGIRO",IPDrBankAcc);
    OUTFORMFIELD("F_TILLBANK",IPDrBankName);
    OUTFORMFIELD("F_TOBANKNR1",IPDrBankNr1);
    OUTFORMFIELD("F_TOBANKNR2",IPDrBankNr2);
    PrintCurrencyCode("F_VALUTA",IPDrInvCurncy);
    OUTFORMFIELD("F_SWIFT",IPDrSWIFT);
    if (GetPM(IPr.PayMode,t2,tstr)) then begin
      OUTFORMFIELD("F_PAYMODE",tstr);
    end;
//    for (i=0;i<=IVRecpcnt;i=i+1) begin
    for (i=0;i<=IVRecpcnt;i=i+1) begin
      PrintCurrencyCode("F_RECCURENCY",IVRecpRecCurncy[i]);
      PrintCurrencyCode("F_BANKCURENCY",IVRecpBankCurncy[i]);
      PrintValue("F_BANKVALUE",IVRecpBankVal[i],M4Val,LangNrr,SysFormatRec,false);
      PrintValue("F_RECVALUE",IVRecpRecVal[i],M4Val,LangNrr,SysFormatRec,false);
      GetPMBankAccName(IVRecpPayMode[i],tstr,bankname);
      OUTFORMFIELD("F_FRANBANK",tstr);
      OUTFORMFIELD("F_BANKNAME2",bankname);// F_EGENBANKKOD is taken from Cympany info
      if (IVRecpInvoiceNr[i]==-1) then begin
        OUTFORMFIELD("F_INVOICENR","");
      end else begin
        OUTFORMFIELD("F_INVOICENR",IVRecpInvoiceNr[i]);
      end;
      if (HasLocalization("PRT")) then begin
        IVr.SerNr = IVRecpInvoiceNr[i];
        ReadFirstMain(IVr,1,true);
        OUTFORMFIELD("F_OFFICIALSERNO",GetOffSerNrIVJournalID(IVr.SerNr,"IVVc",IVr.OfficialSerNr) & " " &  Left(IVr.OfficialSerNr,len(IVr.OfficialSerNrSerie)) & "/" & Right(IVr.OfficialSerNr,len(IVr.OfficialSerNr)-len(IPr.OfficialSerNrSerie)));
      end else begin
        OUTFORMFIELD("F_OFFICIALSERNO",IVRecpRecpOfficialSerNr[i]);      
      end;
      OUTFORMFIELD("F_INVDATE",IVRecpInvDate[i]);
      OUTFORMFIELD("F_INVDATEHIJRI",ConvertDate(kCalendarGregorian,IVRecpInvDate[i],kCalendarHijri));
      switch (IVRecpstp[i]) begin
        case kReceiptRowTypeSettlementDiscount:
          OUTFORMFIELD("F_COMMENT",USetStr(19120));
        case kReceiptRowTypeWriteoff:
          OUTFORMFIELD("F_COMMENT",USetStr(19121));
        case kReceiptRowTypeBankFee:
          OUTFORMFIELD("F_COMMENT",USetStr(19122));
        otherwise
          OUTFORMFIELD("F_COMMENT",IVRecpComment[i]);
      end;
      PrintValue("F_AMOUNT",IVRecpInvVal[i],M4Val,LangNrr,SysFormatRec,false);
      PrintValue("F_INVOUTSTAND",IVRecpInvOutstand[i],M4Val,LangNrr,SysFormatRec,false);      
      totinvoutstand = totinvoutstand + IVRecpInvOutstand[i];
      t = MulWithRateToBase1(IPDrInvCurncy,IPr.TransDate,IVRecpInvOutstand[i],DefaultCurRoundOff);
      PrintValue("F_INVOUTSTANDBASE1",t,M4Val,LangNrr,SysFormatRec,false);      
            
      openv = IVRecpInvOutstand[i] - IVRecpRecVal[i];
//       if (IVRecpInvoiceNr[i]>0) then begin
//         for (j=0;j<i;j=j+1) begin
//           if (IVRecpInvoiceNr[j]==IVRecpInvoiceNr[i]) then begin
//             openv = openv - IVRecpRecVal[j];
//           end;
//         end;
//       end;
      t = MulWithRateToBase1(IPDrInvCurncy,IPr.TransDate,openv,DefaultCurRoundOff);
      PrintValue("F_INVOPENBASE1",t,M4Val,LangNrr,SysFormatRec,false);
      PrintValue("F_INVOPEN",openv,M4Val,LangNrr,SysFormatRec,false);

      if (HasLocalization("ARG")==false) then begin
        gchk = GetCheck(IPr.PayMode,IVRecpPayMode[i],IVRecpChequeNr[i],tstr,bankname,curncy,t,td,regdate);
        OUTFORMFIELD("F_CHECKNR",tstr);
        OUTFORMFIELD("F_BANKNAME",bankname);
        OUTFORMFIELD("F_EFFECTDATE",td);
        OUTFORMFIELD("F_DATUM",regdate);
        PrintValue("F_CHEQUETOTAL",t,M4Val,LangNrr,SysFormatRec,false);
        if (nonblank(tstr)) then begin 
          InsertTempInArray(achequeNum,aChequeTot,aChcnt,tstr,t,false);
        end; 
      end;
      
      fldarg = IVRecpPayMode[i];
      if (blank(fldarg)) then begin 
        fldarg = IPr.PayMode; 
      end;
      if (GetPM(fldarg,t2,tstr)) then begin
        OUTFORMFIELD("F_PAYMODEROW",tstr);
      end;
      
      tstr = IVRecpPayMode[i];
      if (blank(tstr)) then begin tstr = IPr.PayMode; end;
      if (GetPMTAX(tstr,t)) then begin end;
      PrintValue("F_PAYMODETAXPERC",t,M4Prcnt,LangNrr,SysFormatRec,false);
      v = t * IVRecpRecVal[i];
      v = v/100;
      PrintValue("F_PAYMODETAXTOTAL",v,M4Val,LangNrr,SysFormatRec,false);
      v = t * IVRecpRecVal[i];
      v = v/100;
      v = v + IVRecpRecVal[i];
      PrintValue("F_PAYMODETAXVAL",v,M4Val,LangNrr,SysFormatRec,false);
      if (IVRecpInvoiceNr[i]>0) then begin  
        aIVr[aIVr.length] = IVRecpInvoiceNr[i];
        if (SettlementVal!=0) then begin
          v_IVrReceiveVal[IVRecpInvoiceNr[i]] = IVRecpRecVal[i] + IVRecpInvOutstand[i] + SettlementVal;  
        end else begin
          v_IVrReceiveVal[IVRecpInvoiceNr[i]] = v_IVrReceiveVal[IVRecpInvoiceNr[i]] + IVRecpRecVal[i];
        end;
      end;
      EndFormRow;
    end;
    if (HasLocalization("ARG")) then begin
      for (i=0;i<=aChcnt;i=i+1) begin
        if (aChequeNr[i]>0) then begin
        switch (aChequeType[i]) begin
          case kPayModeTypeOwnCheque:
            OwnCheckr.SerNr = aChequeNr[i];
            ReadFirstMain(OwnCheckr,1,true);
            OUTFORMFIELD("F_CHECKNR",OwnCheckr.CheckNr);
            OUTFORMFIELD("F_BANKNAME",OwnCheckr.BankName);
            OUTFORMFIELD("F_EFFECTDATE",OwnCheckr.EffectDate);
            OUTFORMFIELD("F_DATECREATED",OwnCheckr.TransDate);
            PrintValue("F_CHEQUETOTAL",aChequeTot[i],M4Val,LangNrr,SysFormatRec,false);
          case kPayModeTypeCheque:
            Checkr.SerNr = aChequeNr[i];
            ReadFirstMain(Checkr,1,true);
            OUTFORMFIELD("F_CHECKNR",Checkr.CheckNr);
            OUTFORMFIELD("F_BANKNAME",Checkr.BankName);
            OUTFORMFIELD("F_EFFECTDATE",Checkr.EffectDate);
            OUTFORMFIELD("F_DATECREATED",Checkr.TransDate);
            PrintValue("F_CHEQUETOTAL",aChequeTot[i],M4Val,LangNrr,SysFormatRec,false);
        end;  
        end;
      end; 
    end else begin
      if (FIELDINFORM("F_CHEQUETOTAL2") or FIELDINFORM("F_CHECKNR2")) then begin
        for (i=0;i<=aChcnt;i=i+1) begin
          if (achequeNum[i]!=oldCheque) then begin 
            oldCheque = achequeNum[i];
            OUTFORMFIELD("F_CHECKNR2",oldCheque);
            PrintValue("F_CHEQUETOTAL2",aChequeTot[i],M4Val,LangNrr,SysFormatRec,false);
          end;  
        end;
      end;    
    end;    
    if (FIELDINFORM("F_PAYMODE2A") or FIELDINFORM("F_PAYMODETOTAL2")) then begin
      for (i=0;i<=apmcnt;i=i+1) begin
        if (GetPM(aPayMode[i],fldarg,tstr)==false) then begin
        end;          
        OUTFORMFIELD("F_PAYMODE2A",tstr);
        PrintValue("F_PAYMODETOTAL2",aPayModeTot[i],M4Val,LangNrr,SysFormatRec,false);
      end;    
    end;
    if (HasLocalization("PRT")) then begin 
      BlockLoad(RoundRec);
      CalcIVTotalsFromIP(aIVr,v_IVrReceiveVal,Docr,RoundRec,LangNrr,SysFormatRec);
    end;
    CloseForm;
/*
    if (FIELDINFORM("F_RECCURENCY")) then begin
      for (i=0;i<=IVRecpcnt;i=i+1) begin
        OUTFORMFIELD("F_RECCURENCY",IVRecpRecCurncy[i]);
      end;
    end;
    if (FIELDINFORM("F_BANKCURENCY")) then begin
      for (i=0;i<=IVRecpcnt;i=i+1) begin
        OUTFORMFIELD("F_BANKCURENCY",IVRecpBankCurncy[i]);
      end;
    end;
    if (FIELDINFORM("F_BANKVALUE")) then begin
      for (i=0;i<=IVRecpcnt;i=i+1) begin
        PrintValue("F_BANKVALUE",IVRecpBankVal[i],M4Val,LangNrr,SysFormatRec,false);
      end;
    end;
    if (FIELDINFORM("F_RECVALUE")) then begin
      for (i=0;i<=IVRecpcnt;i=i+1) begin
        PrintValue("F_RECVALUE",IVRecpRecVal[i],M4Val,LangNrr,SysFormatRec,false);
      end;
    end;
    if ((FIELDINFORM("F_FRANBANK")) or (FIELDINFORM("F_EGENBANKKOD"))) then begin
      for (i=0;i<=IVRecpcnt;i=i+1) begin
        GetPMBankAccName(IVRecpPayMode[i],tstr,bankname);
        OUTFORMFIELD("F_FRANBANK",tstr);
        OUTFORMFIELD("F_EGENBANKKOD",bankname);
      end;
    end;
    if (FIELDINFORM("F_INVOICENR")) then begin
      for (i=0;i<=IVRecpcnt;i=i+1) begin
        OUTFORMFIELD("F_INVOICENR",IVRecpInvoiceNr[i]);
      end;
    end;
    if (FIELDINFORM("F_INVDATE")) then begin
      for (i=0;i<=IVRecpcnt;i=i+1) begin
        OUTFORMFIELD("F_INVDATE",IVRecpInvDate[i]);
      end;
    end;
    if (FIELDINFORM("F_COMMENT")) then begin
      for (i=0;i<=IVRecpcnt;i=i+1) begin
        switch (IVRecpstp[i]) begin
          case kReceiptRowTypeSettlementDiscount:
            OUTFORMFIELD("F_COMMENT",USetStr(19120));
          case kReceiptRowTypeWriteoff:
            OUTFORMFIELD("F_COMMENT",USetStr(19121));
          case kReceiptRowTypeBankFee:
            OUTFORMFIELD("F_COMMENT",USetStr(19122));
          otherwise
            OUTFORMFIELD("F_COMMENT",IVRecpComment[i]);
        end;
      end;
    end;
    if (FIELDINFORM("F_AMOUNT")) then begin
      for (i=0;i<=IVRecpcnt;i=i+1) begin
        PrintValue("F_AMOUNT",IVRecpInvVal[i],M4Val,LangNrr,SysFormatRec,false);
      end;
    end;
    if (FIELDINFORM("F_INVOUTSTAND")) then begin
      for (i=0;i<=IVRecpcnt;i=i+1) begin
        PrintValue("F_INVOUTSTAND",IVRecpInvOutstand[i],M4Val,LangNrr,SysFormatRec,false);
      end;
    end;
    if (FIELDINFORM("F_INVOUTSTAND")) then begin
      for (i=0;i<=IVRecpcnt;i=i+1) begin
        t = MulWithRateToBase1(IPDrInvCurncy,IPr.TransDate,IVRecpInvOutstand[i],DefaultCurRoundOff);
        PrintValue("F_INVOUTSTAND",t,M4Val,LangNrr,SysFormatRec,false);
      end;
    end;
    if (FIELDINFORM("F_INVOPENBASE1")) then begin
      for (i=0;i<=IVRecpcnt;i=i+1) begin
        t = MulWithRateToBase1(IPDrInvCurncy,IPr.TransDate,IVRecpInvOutstand[i]-IVRecpRecVal[i],DefaultCurRoundOff);
        PrintValue("F_INVOPENBASE1",t,M4Val,LangNrr,SysFormatRec,false);
      end;
    end;
    if (FIELDINFORM("F_INVOPEN")) then begin
      for (i=0;i<=IVRecpcnt;i=i+1) begin
        PrintValue("F_INVOPEN",IVRecpInvOutstand[i]-IVRecpRecVal[i],M4Val,LangNrr,SysFormatRec,false);
      end;
    end;
    if (FIELDINFORM("F_CHEQUENR")) then begin
      for (i=0;i<=IVRecpcnt;i=i+1) begin
        OUTFORMFIELD("F_COMMENT",IVRecpChequeNr[i]);
      end;
    end;
    if ((FIELDINFORM("F_CHECKNR")) or (FIELDINFORM("F_BANKNAME")) or (FIELDINFORM("F_EFFECTDATE"))
        or (FIELDINFORM("F_CHEQUETOTAL")))  then begin
      for (i=0;i<=IVRecpcnt;i=i+1) begin
        gchk = GetCheck(IPr.PayMode,IVRecpPayMode[i],IVRecpChequeNr[i],tstr,bankname,curncy,t,td);
        OUTFORMFIELD("F_CHECKNR",tstr);
        OUTFORMFIELD("F_BANKNAME",bankname);
        OUTFORMFIELD("F_EFFECTDATE",td);
        PrintValue("F_CHEQUETOTAL",t,M4Val,LangNrr,SysFormatRec,false);
      end;
    end;
    if (FIELDINFORM("F_PAYMODEROW")) then begin
      for (i=0;i<=IVRecpcnt;i=i+1) begin
        OUTFORMFIELD("F_PAYMODEROW",IVRecpPayMode[i]);
      end;
    end;
    if ((FIELDINFORM("F_PAYMODETAXPERC")) or (FIELDINFORM("F_PAYMODETAXTOTAL")) or (FIELDINFORM("F_PAYMODETAXVAL"))) then begin
      for (i=0;i<=IVRecpcnt;i=i+1) begin
        tstr = IVRecpPayMode[i];
        if (blank(tstr)) then begin tstr = IPr.PayMode; end;
        if (GetPMTAX(tstr,t)) then begin
        end;
        PrintValue("F_PAYMODETAXPERC",t,M4Prcnt,LangNrr,SysFormatRec,false);
        v = t * IVRecpRecVal[i];
        v = v/100;
        PrintValue("F_PAYMODETAXTOTAL",v,M4Val,LangNrr,SysFormatRec,false);
        v = t * IVRecpRecVal[i];
        v = v/100;
        v = v + IVRecpRecVal[i];
        PrintValue("F_PAYMODETAXVAL",v,M4Val,LangNrr,SysFormatRec,false);
      end;
    end;
    if (FIELDINFORM("F_PAYMODEROW")) then begin
      for (i=0;i<=IVRecpcnt;i=i+1) begin
        OUTFORMFIELD("F_PAYMODEROW",IVRecpPayMode[i]);
      end;
    end;
*/    
  end;
  PrintReceipt = res;
  RETURN;
END;                         

procedure IPDPasteBank(var string IPDpBankName,var string IPDpBankNr1,var string IPDpBankNr2,var string IPDpSWIFT)
BEGIN
  record BankVc BKr;
  
  BKr.Code = IPDpBankName;
  if (ReadFirstMain(BKr,1,true)) then begin
    IPDpBankName = BKr.Name;
    IPDpBankNr1 = BKr.Nr1;
    IPDpBankNr2 = BKr.Nr2;
    IPDpSWIFT = BKr.SWIFT;
  end;
  RETURN;
END;                         

procedure FindInvOutstand(record IPVc IPp,LongInt InvoiceNr,Integer rownr,var val InvOutstandp)
BEGIN
  Integer i,rwcnt;
  row IPVc IPrw;

  InvOutstandp = 0;
  rwcnt = MatRowCnt(IPp);
  for (i=0 ; i<rownr; i=i+1) begin
    MatRowGet(IPp,i,IPrw);
    if (IPrw.InvoiceNr==InvoiceNr) then begin
      InvOutstandp = InvOutstandp + (IPrw.InvOutstand - IPrw.RecVal);
    end;
  end;  
  RETURN;
END;

function Boolean PrintIPD(record RcVc RepSpec,string formcode,record IPVc argIPp,string arg1)
BEGIN
  Boolean res;
  row IPVc IPrw;
  row IPVc IP2rw;
  record IVVc IVr;
  record CUVc CUr;
  Integer i,j,rwcnt;
  Boolean IVs,CUs;
  string 30 IPDrBankAcc;
  string 60 IPDrBankName;
  string 20 IPDrBankNr1;
  string 20 IPDrBankNr2;
  string 20 IPDrCustCode;
  string 60 IPDrCustName;
  string 5 IPDrInvCurncy;
  val IPDrInvVal,IPDrInvValB1;
  string 5 IPDrBankCurncy;
  val IPDrBankVal;
  string 5 IPDrRecCurncy;
  val IPDrRecVal;
  val IPDrBase1Val;
  val SettlementVal;
  string 60 IPDrSWIFT;
  string 20 IPDrRefStr;
  val IPDrRebVal;
  val IPDrVATVal;
  val IPDrRebVATVal;
  
  Array string 20 CUArrpCode;
  Array string 20 CUArrpInvoiceNr;
  Array Date CUArrpInvDate;
  Array Date CUArrpDueDate;
  Array Integer CUArrpInvType;

  Array LongInt IVRecpInvoiceNr;
  Array string 5 IVRecpInvCurncy;
  Array val IVRecpInvVal;
  Array Date IVRecpInvDate;
  Array string 60 IVRecpComment;
  Array string 5 IVRecpBankCurncy;
  Array val IVRecpBankVal;
  Array string 2 IVRecpPayMode;
  Array LongInt IVRecpChequeNr;
  Array string 5 IVRecpRecCurncy;
  Array val IVRecpRecVal;
  Array val IVRecpBase1Val;
  Array string 10 IVRecpAccount;
  Array val IVRecpInvOutstand;
  Array string 255 IVRecpRecpOfficialSerNr;
  Array Integer IVRecpstp;
  
  Integer rownr;
  LongInt curChNr;
  val t;
  record SysFormatBlock SysFormatRec;
  record LangNrVc LangNrr;

  string 255 paymode,tstr;
  record IPVc IPp;
  vector Boolean vIVSerNr;
  vector Boolean vChequeNr;

  Array Integer aChequeType;
  Array LongInt aChequeNr;
  Array val aChequeRecVal;
  Integer achcnt;
  Array val aChequeTot;

  Array string 255 aPayMode;
  Array val aPayModeTot;
  Integer apmcnt;  
  val ChequeVal;

  GetLangNr("",LangNrr);  
  BlockLoad(SysFormatRec);

  RecordCopy(IPp,argIPp);
  if (RepSpec.flags[1]!=0) then begin
    while (MatRowCnt(IPp)>0) begin
      MatRowDelete(IPp,0);
    end;
    
    rwcnt = MatRowCnt(argIPp);
    for (i=0;i<rwcnt;i=i+1) begin
      ChequeVal = 0;
      MatRowGet(argIPp,i,IPrw);
      if (IPrw.ChequeNr>0) then begin
        ChequeVal = IPrw.RecVal;
      end;
      paymode = IPrw.PayMode;
      if (blank(paymode)) then begin
        paymode = IPp.PayMode;
      end;
      InsertTempInArray(aPayMode,aPayModeTot,apmcnt,paymode,IPrw.InvVal,true); 
      if (IPrw.InvoiceNr>0) then begin
        if (vIVSerNr[IPrw.InvoiceNr]==false) then begin
          for (j=i+1;j<rwcnt;j=j+1) begin
            MatRowGet(argIPp,j,IP2rw);
            if (IP2rw.InvoiceNr==IPrw.InvoiceNr) then begin
              IPrw.InvVal = IPrw.InvVal + IP2rw.InvVal;
              IPrw.BankVal = IPrw.BankVal + IP2rw.BankVal;
              IPrw.RecVal = IPrw.RecVal + IP2rw.RecVal;
            end;
          end;
          vIVSerNr[IPrw.InvoiceNr] = true;
          MatRowPut(IPp,MatRowCnt(IPp),IPrw);
        end;
      end else begin
        MatRowPut(IPp,MatRowCnt(IPp),IPrw);
      end;
      if (IPrw.ChequeNr>0) then begin
        if (vChequeNr[IPrw.ChequeNr]==false) then begin
          paymode = IPrw.PayMode;
          if (blank(paymode)) then begin
            paymode = IPp.PayMode;
          end;
          for (j=i+1;j<rwcnt;j=j+1) begin
            MatRowGet(argIPp,j,IP2rw);
            if (IP2rw.ChequeNr==IPrw.ChequeNr) then begin
              aChequeTot[achcnt] = aChequeTot[achcnt] + IP2rw.InvVal;
            end;
          end;
          aChequeType[achcnt] = PMCheckType(paymode,tstr,tstr);
          aChequeNr[achcnt] = IPrw.ChequeNr;
          aChequeTot[achcnt] = aChequeTot[achcnt] + ChequeVal;
          vChequeNr[IPrw.ChequeNr] = true;

          achcnt = achcnt + 1;
        end;
      end;
    end;
  end;
 
  curChNr = FirstInRange(arg1,10);
  rwcnt = MatRowCnt(IPp);
  for (i=0 ; i<rwcnt; i=i+1) begin
    MatRowGet(IPp,i,IPrw);
    CUArrpCode[i] = "";
    if (IPrw.ovst==0) then begin
      IVr.SerNr = IPrw.InvoiceNr;
      CUArrpCode[i] = IPrw.CustCode;
      IVs = ReadFirstMain(IVr,1,true);
      if (IVs) then begin
        if (IVr.Invalid!=0) then begin
          IVs = false;
        end;
      end;
      if (IVs) then begin
        CUArrpCode[i] = IVr.CustCode;
        CUArrpInvDate[i] = IVr.InvDate;
      end;
    end;
  end;
  for (i=0 ; i<rwcnt; i=i+1) begin
    MatRowGet(IPp,i,IPrw);
    if (IPrw.ovst==0) then begin
      if (blank(CUArrpCode[i])) then begin goto L77PrintIPD; end;
      if (HasLocalization("PRT")) then begin
        if (IPrw.stp==kReceiptRowTypeBankFee) then begin  goto L77PrintIPD; end;
      end;
      for (j=0;j<i;j=j+1) begin
        if (CUArrpCode[j]==CUArrpCode[i]) then begin goto L77PrintIPD; end;
      end;
      if (curChNr>0) then begin IPrw.ChequeNr = curChNr; end;
      rownr = 0;
      IVRecpInvoiceNr[rownr] = IPrw.InvoiceNr;
      IVr.SerNr = IPrw.InvoiceNr;
      IVs = ReadFirstMain(IVr,1,true);
      IVRecpstp[rownr] = IPrw.stp;
      IVRecpRecpOfficialSerNr[rownr] = IVr.OfficialSerNr;            
      IVRecpInvOutstand[rownr] = IPrw.InvOutstand;
      IVRecpInvVal[rownr] = IPrw.InvVal;
      IVRecpRecVal[rownr] = IPrw.RecVal;
      IVRecpBankVal[rownr] = IPrw.BankVal;
      IVRecpInvCurncy[rownr] = IPrw.InvCurncy;
      IVRecpRecCurncy[rownr] = IPrw.RecCurncy;
      IVRecpBankCurncy[rownr] = IPrw.BankCurncy;
      IVRecpBase1Val[rownr] = MulWithRateToBase1(IPrw.InvCurncy,IPp.TransDate,IPrw.InvVal,DefaultCurRoundOff);
      IPDrBase1Val = IPDrBase1Val + IVRecpBase1Val[rownr];
      IVRecpInvDate[rownr] = CUArrpInvDate[i];
      IVRecpComment[rownr] = IPrw.CustName;
      if (nonblank(IPrw.PayMode)) then begin
        IVRecpPayMode[rownr] = IPrw.PayMode;
      end else begin
        IVRecpPayMode[rownr] = IPp.PayMode;
      end;
      IVRecpChequeNr[rownr] = IPrw.ChequeNr;
      IPDrInvVal = IPrw.InvVal;
      IPDrInvValB1 = MulWithRateToBase1(IPrw.InvCurncy,IPp.TransDate,IPrw.InvVal,DefaultCurRoundOff);
      IPDrBankVal = IPrw.BankVal;
      IPDrRecVal = IPrw.RecVal;
      IPDrRebVal = blankval;
      if (IPrw.stp==kReceiptRowTypeSettlementDiscount) then begin
        IPDrRebVal = IPrw.RecVal;
      end;      
      IPDrVATVal = blankval;
      IPDrRebVATVal = blankval;
      switch (IPrw.stp) begin
        case kReceiptRowTypeSettlementDiscount:
          IVVATPart(IPrw.InvoiceNr,IPrw.RecVal,IPDrRebVATVal);        
        otherwise
          IVVATPart(IPrw.InvoiceNr,IPrw.RecVal,IPDrVATVal);        
      end;
      IPDrInvCurncy = IPrw.InvCurncy;
      IPDrRecCurncy = IPrw.RecCurncy;
      IPDrBankCurncy = IPrw.BankCurncy;
      for (j=i+1;j<rwcnt;j=j+1) begin
        if (CUArrpCode[j]==CUArrpCode[i]) then begin          
          MatRowGet(IPp,j,IP2rw);          
          if (HasLocalization("PRT")) then begin
            if (IP2rw.stp==kReceiptRowTypeSettlementDiscount or IP2rw.stp==kReceiptRowTypeWriteoff or IP2rw.stp==kReceiptRowTypeBankFee) then begin
              SettlementVal = SettlementVal + IP2rw.RecVal;
              goto L77PrintIPD2; 
            end;
          end;
          IVVATPart(IP2rw.InvoiceNr,IP2rw.RecVal,t);
          switch (IP2rw.stp) begin
            case kReceiptRowTypeSettlementDiscount:
              if (HasLocalization("PRT")) then begin
              end else begin
//                IPDrInvVal = IPDrInvVal - IP2rw.InvVal;
                IPDrRebVATVal = IPDrRebVATVal + t;
//                IPDrInvValB1 = IPDrInvValB1 + MulWithRateToBase1(IP2rw.InvCurncy,IPp.TransDate,IP2rw.InvVal,DefaultCurRoundOff);
                IPDrRebVal = IPDrRebVal + IP2rw.RecVal;
              end;
            case kReceiptRowTypeBankFee:
              IPDrInvVal = IPDrInvVal - IP2rw.InvVal;
              IPDrInvValB1 = IPDrInvValB1 - MulWithRateToBase1(IP2rw.InvCurncy,IPp.TransDate,IP2rw.InvVal,DefaultCurRoundOff);
              IPDrBankVal = IPDrBankVal - IP2rw.BankVal;
              IPDrRecVal = IPDrRecVal - IP2rw.RecVal;
            otherwise
              if (IP2rw.stp==kReceiptRowTypeWriteoff and HasLocalization("PRT")) then begin
              end else begin
                IPDrVATVal = IPDrVATVal + t;
                IPDrInvVal = IPDrInvVal + IP2rw.InvVal;
                IPDrInvValB1 = IPDrInvValB1 + MulWithRateToBase1(IP2rw.InvCurncy,IPp.TransDate,IP2rw.InvVal,DefaultCurRoundOff);
                IPDrBankVal = IPDrBankVal + IP2rw.BankVal;
                IPDrRecVal = IPDrRecVal + IP2rw.RecVal;
              end;
          end;          
          IPDrInvCurncy = IP2rw.InvCurncy;
          IPDrRecCurncy = IP2rw.RecCurncy;
          IPDrBankCurncy = IP2rw.BankCurncy;
          rownr = rownr + 1;
          IVRecpInvoiceNr[rownr] = IP2rw.InvoiceNr;
          IVr.SerNr = IP2rw.InvoiceNr;
          IVs = ReadFirstMain(IVr,1,true);
          IVRecpRecpOfficialSerNr[rownr] = IVr.OfficialSerNr;
          IVRecpInvOutstand[rownr] = IP2rw.InvOutstand;
          switch (IP2rw.stp) begin
            case kReceiptRowTypeSettlementDiscount: 
              FindInvOutstand(IPp,IP2rw.InvoiceNr,j,t);
              IVRecpInvOutstand[rownr] = t;
          end;
          IVRecpstp[rownr] = IP2rw.stp;
          IVRecpInvVal[rownr] = IP2rw.InvVal;
          IVRecpRecVal[rownr] = IP2rw.RecVal;
          IVRecpBankVal[rownr] = IP2rw.BankVal;
          IVRecpInvCurncy[rownr] = IP2rw.InvCurncy;
          IVRecpRecCurncy[rownr] = IP2rw.RecCurncy;
          IVRecpBankCurncy[rownr] = IP2rw.BankCurncy;
          IVRecpInvDate[rownr] = CUArrpInvDate[j];
          IVRecpComment[rownr] = IP2rw.CustName;
          if (curChNr>0) then begin IP2rw.ChequeNr = curChNr; end;
          IVRecpBase1Val[rownr] = MulWithRateToBase1(IP2rw.InvCurncy,IPp.TransDate,IP2rw.InvVal,DefaultCurRoundOff);
          switch (IP2rw.stp) begin
            case kReceiptRowTypeSettlementDiscount: 
              if (HasLocalization("PRT")==false) then begin
                SettlementVal = SettlementVal + IVRecpBase1Val[rownr];
              end;
            otherwise
              IPDrBase1Val = IPDrBase1Val + IVRecpBase1Val[rownr];
          end;
          if (nonblank(IP2rw.PayMode)) then begin
            IVRecpPayMode[rownr] = IP2rw.PayMode;
          end else begin
            IVRecpPayMode[rownr] = IPp.PayMode;
          end;
          IVRecpChequeNr[rownr] = IP2rw.ChequeNr;
L77PrintIPD2:;
          MatRowPut(IPp,j,IP2rw);
        end;
      end;
      CUr.Code = CUArrpCode[i];
      CUs = ReadFirstMain(CUr,1,true);
      IPDrRefStr = IPp.RecNumber;
      IPDrBankName = CUr.AccOperator;
      IPDPasteBank(IPDrBankName,IPDrBankNr1,IPDrBankNr2,IPDrSWIFT);
      IPDrCustCode = IPrw.CustCode;
      IPDrCustName = IPrw.CustName;
      res = PrintReceipt(RepSpec,formcode,IPp,CUr,SysFormatRec,LangNrr,
                         IPDrBankAcc,IPDrBankName,IPDrBankNr1,IPDrBankNr2,IPDrCustCode,
                         IPDrCustName,IPDrInvCurncy,IPDrBankCurncy,IPDrRecCurncy,IPDrSWIFT,IPDrRefStr,
                         IPDrInvVal,IPDrInvValB1,IPDrBankVal,IPDrRecVal,IPDrBase1Val,SettlementVal,IPDrRebVal,IPDrVATVal,IPDrRebVATVal,
                         IVRecpstp,IVRecpInvCurncy,IVRecpBankCurncy,IVRecpRecCurncy,IVRecpComment,IVRecpPayMode,IVRecpAccount,
                         IVRecpInvoiceNr,IVRecpChequeNr,IVRecpInvDate,
                         IVRecpInvVal,IVRecpBankVal,IVRecpRecVal,IVRecpBase1Val,IVRecpInvOutstand,IVRecpRecpOfficialSerNr,rownr,
                         aChequeType,aChequeNr,aChequeTot,achcnt,aPayMode,aPayModeTot,apmcnt);
                         
       if (curChNr>0) then begin curChNr = curChNr + 1; end;
    end;
L77PrintIPD:; 
    MatRowPut(IPp,i,IPrw);
  end;
  PrintIPD = res;
  RETURN;
END;

global
procedure DoIPDForm(record RcVc RepSpec,record IPVc IPr)
BEGIN
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Integer i,rwcnt;
  Boolean printf;
  Integer intdocnr;
  string 30 formcode,langcode,langcod2;

  if (HasLocalization("ARG")) then begin
    RepSpec.flags[1] = 1;
  end;
  langcode = "";
  langcod2 = IPr.PayMode;
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoIPDForm;
  end;
  rwcnt = MatRowCnt(FDr);
  intdocnr = 1;
  printf = true;
  while (printf) begin  
LFINDFORMCOCEIP:;
    formcode = "";
    if (GetPaymentModeDoc(IPr.PayMode,formcode)==false) then begin
      for (i=rwcnt-1;i>=0;i=i-1) begin
        MatRowGet(FDr,i,FDrw);
        if (FindFormcode(IPr.OKFlag,FDrw.Typ)) then begin 
          if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,IPr.SerNr,FDrw.PrintGroupCode,
                          langcode,intdocnr,"IPVc",formcode)) then
          begin
            goto LBREAKIP;
          end;      
        end;
      end;
      if (nonblank(langcod2)) then begin
        langcode = langcod2;
        langcod2 = "";
        goto LFINDFORMCOCEIP;
      end;      
    end else begin
      printf = false;
    end;   
LBREAKIP:;
    if (nonblank(formcode)) then begin
      if (PrintIPD(RepSpec,formcode,IPr,"")) then begin  
        if (IPr.OKFlag!=0) then begin
          IPr.Prntdf = 1;
        end;
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoIPDForm:;  
  RETURN;
END;