external procedure PrintCurrencyCode(string,string);
external function Integer PMCheckType(string,var string,var string);
external procedure OutAddress(string,string,string,string,string,string,string);
external function Boolean FindFormcode(Integer,Integer);
external function val MulWithRateToBase2(var string,Date,val,roundmode);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external procedure PrintNote(record NotepadVc);
external function Integer GetCheck(string,string,LongInt,var string,var string,var string,var val,var Date,var Date);
external procedure RussianPaymentNr(LongInt,var string);
external procedure BielrussianPayVal(var string,val,Integer);
external function Boolean GetVAT2(string,var val,var Integer,Integer);
external function Boolean GetPM(string,var string,var string);
external procedure GetFieldArgument(record DocVc,Integer,var string);
external procedure Val2ToText(string,val,Integer,string,string,var string);
external procedure ValToText(val,Integer,string,string,var string);
external procedure RussianPayVal(var string,val,Integer);
external function Integer NumberofDocumentPages(string,Integer);
external function Boolean Getformcode(Integer,Integer,string,string,string,LongInt,LongInt,string,string,Integer,string,var string);
external procedure GetMonthText(string,Date,var string);
external procedure PrintValue(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external procedure GetLangNr(string,var record LangNrVc);
external procedure CommonDocumentFields(record RcVc);

procedure PrintWithholdingCertificateNos(LongInt OPSerNr)
BEGIN
  record WHCertificateVc WHCertificater;
  Boolean found;
  string 255 tstr;
  
  found = true;
  WHCertificater.OPNr = OPSerNr;
  while (LoopKey("OPNr",WHCertificater,1,found)) begin
    if (WHCertificater.OPNr!=OPSerNr) then begin found = false; end;
    if (found) then begin
      if (nonblank(tstr)) then begin
        tstr = tstr & ",";
      end;
      tstr = tstr & WHCertificater.WHTaxSerNr;
    end;
  end;
  OutFormField("F_WITHHOLDINGCERTIFICATENOS",tstr);
  RETURN;
END;

procedure OPPrintNote(record OPVc OPr,string argumentstr)
BEGIN
  record NotepadVc Noter;
  record RLinkVc RLr;
  Integer notenr;

  notenr = 1;
  while (ReadRecordLink(OPr,notenr,Noter,RLr)) begin
    if ((argumentstr==RLr.Comment) or (blank(argumentstr))) then begin
      PrintNote(Noter);
      goto LOPPrintNote;
    end;
    notenr = notenr + 1;
  end;
LOPPrintNote:;  
  RETURN;
END;
/*
procedure PrintAmountInTextField(record DocVc Docr,val v,string curncy,string langcode,Integer typ)
BEGIN      
  Integer i,rwcnt;
  string 255 fldarg,tstr;
  row DocVc Docrw;
  
  rwcnt = MatRowCnt(Docr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Docr,i,Docrw);
    if (Docrw.unitType==4) then begin//field
      if (Docrw.fieldSetNr==F_AMOUNTINTEXT) then begin
        tstr = "";
        fldarg = Docrw.unitText;
        Val2ToText(fldarg,v,typ,curncy,langcode,tstr);
        OUTFORMFIELD("F_AMOUNTINTEXT",tstr);
      end;
    end;
  end;
  RETURN;
END;
*/
procedure  GetStrP(string src,string sep,integer pos,var string res)
begin
  integer ln,i,cp;
  boolean testf;
  string 1 cs;
  ln=len(src);
  cp=0;
  res="";
  if (pos==0) then begin
    testf=true;
  end else begin
    testf=false;
  end;
  while (i<ln) and (cp<=pos) begin
    cs=mid(src,i,1);
    if (cs==sep) then begin
      cp=cp+1;
      if (cp==pos) then begin
        testf=true;
      end else begin
        testf=false;
      end;
    end;
    if (testf) and (cs<>sep) then begin
      res=res & cs;
    end;
    i=i+1;
  end;
  return;
end;

procedure PrintAmountInTextField(string fldstr,record DocVc Docr,val v,string curncy,string langcode,Integer typ)
BEGIN      
  Integer i,rwcnt;
  string 255 fldarg,tstr;
  
  switch (fldstr) begin
    case "F_AMOUNTINTEXTCENTS": fldarg = "3";
    case "F_AMOUNTINTEXTUNITS": fldarg = "4";
    case "F_AMOUNTINTEXTTENS": fldarg = "5";
    case "F_AMOUNTINTEXTHUNDREDS": fldarg = "6";
    case "F_AMOUNTINTEXTTHOUSANDS": fldarg = "7";
    case "F_AMOUNTINTEXTTENTHOUSANDS": fldarg = "8";
    case "F_AMOUNTINTEXTHUDREDTHOUSANDS": fldarg = "9";
    case "F_AMOUNTINTEXTMILLIONS": fldarg = "10";
    case "F_AMOUNTINTEXTTENMILLIONS": fldarg = "11";
    case "F_AMOUNTINTEXTHUDREDMILLIONS": fldarg = "12";
  end;
  Val2ToText(fldarg,v,typ,curncy,langcode,tstr);
  OUTFORMFIELD(fldstr,tstr);
  RETURN;
END;

procedure InsertTempInArray(var array string aTempStr,var array val aTempVal,var Integer acnt,string iTempStr,val iTempVal,boolean consolidate2)
begin
  integer i;
  boolean foundf,consolidate;
  
  foundf = false;
  consolidate = consolidate2;
  if (consolidate==true) then begin 
    for (i=0;i<=acnt;i=i+1) begin
      if (aTempStr[i]==iTempStr) then begin 
        aTempVal[i] = aTempVal[i] + iTempVal;
        foundf = true;
        goto LInsertTempInArray02;
      end;
    end;
  end;  
  if (consolidate==false or foundf==false) then begin 
    for (i=acnt;i>0;i=i-1) begin
      if (aTempStr[i-1]>iTempStr) then begin
        aTempStr[i] = aTempStr[i-1];
        aTempVal[i] = aTempVal[i-1];
      end else begin
        aTempStr[i] = iTempStr;
        aTempVal[i] = iTempVal;
        goto LInsertTempInArray;
      end; 
    end;   
    aTempStr[0] = iTempStr;
    aTempVal[0] = iTempVal;
  LInsertTempInArray:;
    acnt = acnt +1;
  end;    
LInsertTempInArray02:;
  return;
end;

function Boolean PrintPaymentPerS(record RcVc RepSpec,string formcode,record OPVc OPr,record CUVc VEr,record SysFormatBlock SysFormatRec,record LangNrVc LangNrr,
                              string OPDrBankName,string OPDrBankNr1,string OPDrBankNr2,string OPDrSWIFT,string OPDrBankAddress0,string OPDrBankAddress1,string OPDrBankAddress2,
                              string OPDrBankAcc,string OPDrComment,string OPDrInvoiceNr,Array string VIPaypRefStr,string OPDrPInvCurncy,string OPDrBankCurncy,string OPDrRecCurncy,
                              val OPDrPInvVal,val OPDrBankVal,val OPDrRecVal,val OPDrBase1Val,
                              Array string VIPaypInvoiceNr,Array string VIPaypBankAcc,Array string VIPaypComment,Array string VIPaypVATCode,Array string VIPaypPayMode,
                              Array string VIPaypPInvCurncy,Array string VIPaypBankCurncy,Array string VIPaypRecCurncy,Array string VIPaypAccount,
                              Array Date VIPaypInvDate,Array Date VIPaypDueDate,Array LongInt VIPaypChequeNr,Array LongInt VIPaypSerNr,Array Integer VIPaypInvType,
                              Array val VIPaypVATVal,Array val VIPaypPInvVal,Array val VIPaypBankVal,Array val VIPaypRecVal,Array val VIPaypBase1Val,
                              Array val VIPaypSettDiscRecVal,Array val VIPaypSettDiscBankVal,
                              Integer VIPaypcnt,Array string VIPWithHoldTAXNo,
                              Array Integer aChequeType,Array LongInt aChequeNr,Array val aChequeTot,var Integer aChcnt,
                              Array string aPayMode,Array val aPayModeTot,var Integer apmcnt)
BEGIN
  Boolean res;
  record DocVc Docr;
  string 255 tstr,fldarg,bankname,curncy,oldCheque,oldPayMode;
  Integer i,gchk;
  val t;
  Date td,regdate;
  record ModuleBlock MBr;
  val VIPaypSettDiscRecTotVal,VIPaypSettDiscBankTotVal;
  val VIPaypBankInclDiscTot,VIPaypRecInclDiscTot,VIPMatWithHoldingTot;
  record APVc APr;
  Array string 255 aChequeNum;
  record OwnCheckVc OwnCheckr;
  record CheckVc Checkr;
  record BaseCurBlock BCb;

  BlockLoad(BCb);
  BlockLoad(MBr);
  if (OpenForm(formcode)) then begin    
    if (OPr.OrderedFlag==0) then begin
      if (MBr.NoTestprintEnabler==0) then begin
        FormWaterMark(1117,-1);
      end;
    end;
    if (HasLocalization("ARG")==false) then begin
      ClearArray(aChequeNr);
      ClearArray(aChequeTot);
      aChcnt = 0;
      ClearArray(aPayMode);
      ClearArray(aPayModeTot);
      apmcnt = 0;
    end;
    res = true;
    CommonDocumentFields(RepSpec);
    NumberofDocumentPages(formcode,MatRowCnt(OPr));
    Docr.Code = formcode;
    if (ReadFirstMain(Docr,1,true)) then begin
    end;
    OutFormField("F_DOCTYPE",USetStr(15999));
    OutFormField("F_DATEDAY",GetDay(OPr.TransDate));
    OutFormField("F_DATEYEAR",GetYear(OPr.TransDate));
    OutFormField("F_DATEMONTH",GetMonth(OPr.TransDate));
    GetMonthText(VEr.LangCode,OPr.TransDate,tstr);
    OUTFORMFIELD("F_DATEMONTHTEXT",tstr);
    OUTFORMFIELD("F_REFERENSNUMMER",OPr.PayNumber);
    OUTFORMFIELD("F_FRANBANK",OPr.BankName);
    OUTFORMFIELD("F_FRANGIRO",OPr.BankAcc);
    OUTFORMFIELD("F_UTBETNR",OPr.SerNr);
    OutFormField("F_SERNR",OPr.SerNr);
    if (FIELDINFORM("F_RUSPAYNR")) then begin
      RussianPaymentNr(OPr.SerNr,tstr);
      OUTFORMFIELD("F_RUSPAYNR",tstr);
    end;
    OUTFORMFIELD("F_UTBETDATUM",OPr.PayDate);
    OUTFORMFIELD("F_REGDATUM",OPr.PayDate);
    OUTFORMFIELD("F_TRANSDATUM",OPr.TransDate);
    
    OUTFORMFIELD("F_VARTKUNDNR",VEr.VECustID);
    OUTFORMFIELD("F_LEVNAMN",VEr.Name);
    OUTFORMFIELD("F_LEVERANTOR",VEr.Code);
    OUTFORMFIELD("F_REGNUMBER1",VEr.RegNr1);
    OUTFORMFIELD("F_REGNUMBER2",VEr.RegNr2);
    OUTFORMFIELD("F_LEVVATNR",VEr.VATNr);
    OutAddress("F_LEVADRESS",VEr.Name,VEr.InvAddr0,VEr.InvAddr1,VEr.InvAddr2,VEr.InvAddr3,VEr.InvAddr4);
    OUTFORMFIELD("F_LEVADRESS2",VEr.Name);
    OUTFORMFIELD("F_LEVADRESS2",VEr.InvAddr0);
    OUTFORMFIELD("F_LEVADRESS2",VEr.InvAddr1);
    OUTFORMFIELD("F_LEVADRESS2",VEr.InvAddr2);
    OUTFORMFIELD("F_LEVADRESS2",VEr.InvAddr3);
    OUTFORMFIELD("F_LEVADRESS2",VEr.InvAddr4);
    OUTFORMFIELD("F_SPECLEV",VEr.Comment);
    OUTFORMFIELD("F_ANACODE",VEr.ANACode);
    OUTFORMFIELD("F_LEVFAX",VEr.Fax);
    OUTFORMFIELD("F_LEVPHONE",VEr.Phone);
    
    PrintValue("F_BANKTOTAL",OPDrBase1Val,M4Val,LangNrr,SysFormatRec,false);
    PrintValue("F_TOTSUM",OPDrBankVal,M4Val,LangNrr,SysFormatRec,false);
    OUTFORMFIELD("F_KOMMENTAR",OPDrComment);
    OUTFORMFIELD("F_SWIFT",OPDrSWIFT);
    OUTFORMFIELD("F_TILLGIRO",OPDrBankAcc);
    OUTFORMFIELD("F_TILLBANK",OPDrBankName);
    OUTFORMFIELD("F_TOBANKNR1",OPDrBankNr1);
    OUTFORMFIELD("F_TOBANKNR2",OPDrBankNr2);
    OUTFORMFIELD("F_BANKADDRESS0",OPDrBankAddress0);
    OUTFORMFIELD("F_BANKADDRESS1",OPDrBankAddress1);
    OUTFORMFIELD("F_BANKADDRESS2",OPDrBankAddress2);
    PrintCurrencyCode("F_VALUTA",OPDrPInvCurncy);
    if (FIELDINFORM("F_ATTBETALATEXT")) then begin
      ValToText(OPDrPInvVal,M4Val,OPDrPInvCurncy,VEr.LangCode,tstr);
      OUTFORMFIELD("F_ATTBETALATEXT",tstr);
    end;
    if (FIELDINFORM("F_ATTBETALATEXTBASE1")) then begin
      t = MulWithRateToBase1(OPDrPInvCurncy,OPr.TransDate,OPDrPInvVal,DefaultCurRoundOff);
      ValToText(t,M4Val,BCb.BaseCur1,VEr.LangCode,tstr);
      OUTFORMFIELD("F_ATTBETALATEXTBASE1",tstr);
    end;
    if (FIELDINFORM("F_ATTBETALATEXTBASE2")) then begin
      t = MulWithRateToBase2(OPDrPInvCurncy,OPr.TransDate,OPDrPInvVal,DefaultCurRoundOff);
      ValToText(t,M4Val,BCb.BaseCur2,VEr.LangCode,tstr);
      OUTFORMFIELD("F_ATTBETALATEXTBASE2",tstr);
    end;
    if (FIELDINFORM("F_TOTSUMINTEXT")) then begin
      ValToText(OPDrBankVal,M4Val,OPDrBankCurncy,VEr.LangCode,tstr);
      OUTFORMFIELD("F_TOTSUMINTEXT",tstr);
    end;
    t = MulWithRateToBase1(OPDrPInvCurncy,OPr.TransDate,OPDrPInvVal,DefaultCurRoundOff);
    PrintValue("F_ATTBETALABASE1",t,M4Val,LangNrr,SysFormatRec,false);
    t = MulWithRateToBase2(OPDrPInvCurncy,OPr.TransDate,OPDrPInvVal,DefaultCurRoundOff);
    PrintValue("F_ATTBETALABASE2",t,M4Val,LangNrr,SysFormatRec,false);

    if (FIELDINFORM("F_AMOUNTINTEXT")) then begin
      PrintAmountInTextField("F_AMOUNTINTEXT",Docr,OPDrPInvVal,OPDrPInvCurncy,VEr.LangCode,M4Val);
    end;
    if (FIELDINFORM("F_AMOUNTINTEXTCENTS")) then begin
      PrintAmountInTextField("F_AMOUNTINTEXTCENTS",Docr,OPDrPInvVal,OPDrPInvCurncy,VEr.LangCode,M4Val);
    end;
    if (FIELDINFORM("F_AMOUNTINTEXTUNITS")) then begin
      PrintAmountInTextField("F_AMOUNTINTEXTUNITS",Docr,OPDrPInvVal,OPDrPInvCurncy,VEr.LangCode,M4Val);
    end;
    if (FIELDINFORM("F_AMOUNTINTEXTTENS")) then begin
      PrintAmountInTextField("F_AMOUNTINTEXTTENS",Docr,OPDrPInvVal,OPDrPInvCurncy,VEr.LangCode,M4Val);
    end;
    if (FIELDINFORM("F_AMOUNTINTEXTHUNDREDS")) then begin
      PrintAmountInTextField("F_AMOUNTINTEXTHUNDREDS",Docr,OPDrPInvVal,OPDrPInvCurncy,VEr.LangCode,M4Val);
    end;
    if (FIELDINFORM("F_AMOUNTINTEXTTHOUSANDS")) then begin
      PrintAmountInTextField("F_AMOUNTINTEXTTHOUSANDS",Docr,OPDrPInvVal,OPDrPInvCurncy,VEr.LangCode,M4Val);
    end;
    if (FIELDINFORM("F_AMOUNTINTEXTTENTHOUSANDS")) then begin
      PrintAmountInTextField("F_AMOUNTINTEXTTENTHOUSANDS",Docr,OPDrPInvVal,OPDrPInvCurncy,VEr.LangCode,M4Val);
    end;
    if (FIELDINFORM("F_AMOUNTINTEXTHUDREDTHOUSANDS")) then begin
      PrintAmountInTextField("F_AMOUNTINTEXTHUDREDTHOUSANDS",Docr,OPDrPInvVal,OPDrPInvCurncy,VEr.LangCode,M4Val);
    end;
    if (FIELDINFORM("F_AMOUNTINTEXTMILLIONS")) then begin
      PrintAmountInTextField("F_AMOUNTINTEXTMILLIONS",Docr,OPDrPInvVal,OPDrPInvCurncy,VEr.LangCode,M4Val);
    end;
    if (FIELDINFORM("F_AMOUNTINTEXTTENMILLIONS")) then begin
      PrintAmountInTextField("F_AMOUNTINTEXTTENMILLIONS",Docr,OPDrPInvVal,OPDrPInvCurncy,VEr.LangCode,M4Val);
    end;
    if (FIELDINFORM("F_AMOUNTINTEXTHUDREDMILLIONS")) then begin
      PrintAmountInTextField("F_AMOUNTINTEXTHUDREDMILLIONS",Docr,OPDrPInvVal,OPDrPInvCurncy,VEr.LangCode,M4Val);
    end;

    OUTFORMFIELD("F_PAYMODE",OPr.PayMode);
    OUTFORMFIELD("F_FAKTURANR",OPDrInvoiceNr);
    if (OPDrPInvVal>0) then begin
      PrintValue("F_ATTBETALA",OPDrPInvVal,M4Val,LangNrr,SysFormatRec,false);
    end else begin
      OUTFORMFIELD("F_ATTBETALA",USetStr(1216));
    end;
    
    if (FIELDINFORM("F_ATTBETALARUS")) then begin
      if (OPDrPInvVal>0) then begin
        RussianPayVal(tstr,OPDrPInvVal,LangNrr.CutDecimals);
        OUTFORMFIELD("F_ATTBETALARUS",tstr);
      end else begin
        OUTFORMFIELD("F_ATTBETALARUS",USetStr(1216));
      end;
    end;
    for (i=0;i<=VIPaypcnt;i=i+1) begin
      if (FIELDINFORM("F_REFSTR")) then begin
        OUTFORMFIELD("F_REFSTR",VIPaypRefStr[i]);
      end;
      if (FIELDINFORM("F_RECCURENCY")) then begin
        PrintCurrencyCode("F_RECCURENCY",VIPaypRecCurncy[i]);
      end;
      if (FIELDINFORM("F_BANKCURENCY")) then begin
        PrintCurrencyCode("F_BANKCURENCY",VIPaypBankCurncy[i]);
      end;
//      OutFormField("F_PREPAYNUMBER",VIPaypPrepayNr[i]);
      if (FIELDINFORM("F_BANKVALUE")) then begin
        PrintValue("F_BANKVALUE",VIPaypBankVal[i],M4Val,LangNrr,SysFormatRec,false);
      end;
      if (FIELDINFORM("F_RECVALUE")) then begin
        PrintValue("F_RECVALUE",VIPaypRecVal[i],M4Val,LangNrr,SysFormatRec,false);
      end;
      if (FIELDINFORM("F_BANKACC")) then begin
        OUTFORMFIELD("F_BANKACC",VIPaypBankAcc[i]);
      end;
      if (FIELDINFORM("F_FAKTTYP")) then begin
        OUTFORMFIELD("F_FAKTTYP",VIPaypInvType[i]);
      end;
      if (FIELDINFORM("F_FAKTURANUMMER")) then begin
        OUTFORMFIELD("F_FAKTURANUMMER",VIPaypSerNr[i]);
      end;
      if (FIELDINFORM("F_INVOICENR")) then begin
        OUTFORMFIELD("F_INVOICENR",VIPaypInvoiceNr[i]);
      end;
      if (FIELDINFORM("F_INVDATE")) then begin
        OUTFORMFIELD("F_INVDATE",VIPaypInvDate[i]);
      end;
      if (FIELDINFORM("F_DUEDATE")) then begin
        OUTFORMFIELD("F_DUEDATE",VIPaypDueDate[i]);
      end;
      if (FIELDINFORM("F_COMMENT")) then begin
        OUTFORMFIELD("F_COMMENT",VIPaypComment[i]);
      end;
      if (FIELDINFORM("F_AMOUNT")) then begin
        PrintValue("F_AMOUNT",VIPaypPInvVal[i],M4Val,LangNrr,SysFormatRec,false);
      end;
      if (FIELDINFORM("F_AMOUNTRUS")) then begin
        RussianPayVal(tstr,VIPaypPInvVal[i],LangNrr.CutDecimals);
        OUTFORMFIELD("F_AMOUNTRUS",tstr);
      end;
      if (FIELDINFORM("F_AMOUNTBIELRUS")) then begin
        BielrussianPayVal(tstr,VIPaypPInvVal[i],LangNrr.CutDecimals);
        OUTFORMFIELD("F_AMOUNTBIELRUS",tstr);
      end;
      if (FIELDINFORM("F_MOMS")) then begin
        PrintValue("F_MOMS",VIPaypVATVal[i],M4Val,LangNrr,SysFormatRec,false);
      end;
      if (FIELDINFORM("F_MOMSRUS")) then begin
        RussianPayVal(tstr,VIPaypVATVal[i],LangNrr.CutDecimals);
        OUTFORMFIELD("F_MOMSRUS",tstr);
      end;
      if (FIELDINFORM("F_ROWVATPRC")) then begin
        if (GetVAT2(VIPaypVATCode[i],t,gchk,0)) then begin
        end;
        PrintValue("F_ROWVATPRC",t,M4Val,LangNrr,SysFormatRec,false);
      end;
      if (FIELDINFORM("F_CHEQUENR")) then begin
        if (VIPaypChequeNr[i]>0) then begin
          OUTFORMFIELD("F_CHEQUENR",VIPaypChequeNr[i]);
        end;
      end;
      if (FIELDINFORM("F_PAYMODEROW")) then begin
        if (GetPM(VIPaypPayMode[i],fldarg,tstr)==false) then begin
        end;
        OUTFORMFIELD("F_PAYMODEROW",tstr);
      end;
      if (HasLocalization("ARG")==false) then begin
        if ((FIELDINFORM("F_CHECKNR")) or (FIELDINFORM("F_BANKNAME")) or (FIELDINFORM("F_EFFECTDATE")) 
            or (FIELDINFORM("F_CHEQUETOTAL")) or FIELDINFORM("F_CHEQUETOTAL2") or FIELDINFORM("F_CHECKNR2")) then begin
          gchk = GetCheck(OPr.PayMode,VIPaypPayMode[i],VIPaypChequeNr[i],tstr,bankname,curncy,t,td,regdate);
          OUTFORMFIELD("F_CHECKNR",tstr);
          OUTFORMFIELD("F_BANKNAME",bankname);
          OUTFORMFIELD("F_EFFECTDATE",td);
          OUTFORMFIELD("F_REGDATUM",regdate);
          PrintValue("F_CHEQUETOTAL",t,M4Val,LangNrr,SysFormatRec,false);
          if (nonblank(tstr)) then begin 
            InsertTempInArray(aChequeNum,aChequeTot,aChcnt,tstr,t,false);
          end; 
        end;
        InsertTempInArray(aPayMode,aPayModeTot,apmcnt,VIPaypPayMode[i],VIPaypPInvVal[i],true); 
      end;
      
      PrintValue("F_KASSARABATT",VIPaypSettDiscRecVal[i],M4Val,LangNrr,SysFormatRec,false);
      PrintValue("F_KASSARABATT_2",VIPaypSettDiscBankVal[i],M4Val,LangNrr,SysFormatRec,false);

      PrintValue("F_BELOPP",VIPaypSettDiscBankVal[i]+VIPaypBankVal[i],M4Val,LangNrr,SysFormatRec,false);
      PrintValue("F_ROWTOT",VIPaypSettDiscRecVal[i]+VIPaypRecVal[i],M4Val,LangNrr,SysFormatRec,false);
      
      VIPaypSettDiscRecTotVal = VIPaypSettDiscRecTotVal + VIPaypSettDiscRecVal[i];
      VIPaypSettDiscBankTotVal = VIPaypSettDiscBankTotVal + VIPaypSettDiscBankVal[i];
      
      VIPaypBankInclDiscTot = VIPaypBankInclDiscTot + VIPaypSettDiscBankVal[i] + VIPaypBankVal[i];
      VIPaypRecInclDiscTot = VIPaypRecInclDiscTot + VIPaypSettDiscRecVal[i] + VIPaypRecVal[i];
      
      if (nonblank(VIPWithHoldTAXNo[i])) then begin 
        VIPMatWithHoldingTot = VIPMatWithHoldingTot + VIPaypBankVal[i];
      end;
      
      APr.SerNr = VIPaypSerNr[i];
      if (ReadFirstMain(APr,1,true)) then begin
        PrintValue("F_INVOUTSTAND",APr.RVal,M4Val,LangNrr,SysFormatRec,false);
      end;
      
      EndFormRow;
    end;
    if (HasLocalization("ARG")) then begin
      if ((FIELDINFORM("F_CHECKNR")) or (FIELDINFORM("F_BANKNAME")) or (FIELDINFORM("F_EFFECTDATE")) 
          or (FIELDINFORM("F_CHEQUETOTAL")) or FIELDINFORM("F_CHEQUETOTAL2") or FIELDINFORM("F_CHECKNR2")) then begin
        for (i=0;i<=aChcnt;i=i+1) begin
          if (aChequeNr[i]>0) then begin
          switch (aChequeType[i]) begin
            case kPayModeTypeOwnCheque:
              OwnCheckr.SerNr = aChequeNr[i];
              ReadFirstMain(OwnCheckr,1,true);
              OUTFORMFIELD("F_CHECKNR",OwnCheckr.CheckNr);
              OUTFORMFIELD("F_BANKNAME",OwnCheckr.BankName);
              OUTFORMFIELD("F_EFFECTDATE",OwnCheckr.EffectDate);
              OUTFORMFIELD("F_DATECREATED",OwnCheckr.TransDate);
              PrintValue("F_CHEQUETOTAL",aChequeTot[i],M4Val,LangNrr,SysFormatRec,false);
            case kPayModeTypeCheque:
              Checkr.SerNr = aChequeNr[i];
              ReadFirstMain(Checkr,1,true);
              OUTFORMFIELD("F_CHECKNR",Checkr.CheckNr);
              OUTFORMFIELD("F_BANKNAME",Checkr.BankName);
              OUTFORMFIELD("F_EFFECTDATE",Checkr.EffectDate);
              OUTFORMFIELD("F_DATECREATED",Checkr.TransDate);
              PrintValue("F_CHEQUETOTAL",aChequeTot[i],M4Val,LangNrr,SysFormatRec,false);
          end;  
          end;
        end;    
      end;
    end else begin
      if ((FIELDINFORM("F_CHEQUETOTAL2") or FIELDINFORM("F_CHECKNR2"))) then begin
        for (i=0;i<=aChcnt;i=i+1) begin
          if (aChequeNum[i]!=oldCheque) then begin 
            oldCheque = aChequeNum[i];
            OUTFORMFIELD("F_CHECKNR2",oldCheque);
            PrintValue("F_CHEQUETOTAL2",aChequeTot[i],M4Val,LangNrr,SysFormatRec,false);
          end;  
        end;    
      end;
    end;
    if (FIELDINFORM("F_PAYMODE2A") or FIELDINFORM("F_PAYMODETOTAL2")) then begin
      for (i=0;i<=apmcnt;i=i+1) begin
        if (GetPM(aPayMode[i],fldarg,tstr)==false) then begin
        end;          
        OUTFORMFIELD("F_PAYMODE2A",tstr);
        PrintValue("F_PAYMODETOTAL2",aPayModeTot[i],M4Val,LangNrr,SysFormatRec,false);
      end;    
    end;
    if (OPDrPInvVal>0) then begin
      PrintValue("F_ATTBETALA2",OPDrPInvVal-VIPMatWithHoldingTot,M4Val,LangNrr,SysFormatRec,false);
    end else begin
      OUTFORMFIELD("F_ATTBETALA2",USetStr(1216));
    end;    
    if (VIPMatWithHoldingTot>0) then begin
      PrintValue("F_TOTWITHHELDTAX",VIPMatWithHoldingTot,M4Val,LangNrr,SysFormatRec,false);
    end else begin
      OUTFORMFIELD("F_TOTWITHHELDTAX",USetStr(1216));
    end; 
        
    PrintValue("F_SETDISCTOT",VIPaypSettDiscRecTotVal,M4Val,LangNrr,SysFormatRec,false);
    PrintValue("F_SETDISCTOT_2",VIPaypSettDiscBankTotVal,M4Val,LangNrr,SysFormatRec,false);

    PrintValue("F_TOTROWTOT",VIPaypBankInclDiscTot,M4Val,LangNrr,SysFormatRec,false);
    PrintValue("F_ROWSUMTOTAL",VIPaypRecInclDiscTot,M4Val,LangNrr,SysFormatRec,false);

    if (FIELDINFORM("F_WITHHOLDINGCERTIFICATENOS")) then begin
      PrintWithholdingCertificateNos(OPr.SerNr);
    end;
    if (FIELDINFORM("F_DOCVATREPVAL")) then begin
      t = blankval;
      for (i=0;i<=VIPaypcnt;i=i+1) begin
        t = t + VIPaypVATVal[i];
      end;
      PrintValue("F_DOCVATREPVAL",t,M4Val,LangNrr,SysFormatRec,false);
    end;    
    if (FIELDINFORM("F_NOTE")) then begin
      GetFieldArgument(Docr,F_NOTE,tstr);
      OPPrintNote(OPr,tstr);
    end;
    if (FIELDINFORM("101")) then begin //Russian tax payment,  hardcoded ???
      if (OPr.SortCode=="01") then begin
        OUTFORMFIELD("101",OPr.SortCode);
        GetStrP(OPDrComment,";",0,tstr);
        OUTFORMFIELD("104",tstr);
        GetStrP(OPDrComment,";",1,tstr);
        OUTFORMFIELD("105",tstr);
        GetStrP(OPDrComment,";",2,tstr);
        OUTFORMFIELD("106",tstr);
        GetStrP(OPDrComment,";",3,tstr);
        OUTFORMFIELD("107",tstr);
        GetStrP(OPDrComment,";",4,tstr);
        OUTFORMFIELD("108",tstr);
        GetStrP(OPDrComment,";",5,tstr);
        OUTFORMFIELD("109",tstr);
        GetStrP(OPDrComment,";",6,tstr);
        OUTFORMFIELD("110",tstr);
      end;  
    end;
    CloseForm;
  end;
  PrintPaymentPerS = res;
  RETURN;
END;

procedure PasteBank(var string OPDpBankName,var string OPDpBankNr1,var string OPDpBankNr2,var string OPDpSWIFT,var string OPDpBankAddress0,
                    var string OPDpBankAddress1,var string OPDpBankAddress2)
BEGIN
  record BankVc BKr;
  
  BKr.Code = OPDpBankName;
  if (ReadFirstMain(BKr,1,true)) then begin
    OPDpBankName = BKr.Name;
    OPDpBankNr1 = BKr.Nr1;
    OPDpBankNr2 = BKr.Nr2;
    OPDpSWIFT = BKr.SWIFT;    
    OPDpBankAddress0 = BKr.Address0;
    OPDpBankAddress1 = BKr.Address1;
    OPDpBankAddress2 = BKr.Address2;
  end;
  RETURN;
END;

procedure AddToCommaStr(var string a,string b,Integer maxlen)
BEGIN
  LongInt al,bl;
  LongInt commal;
  
  commal = 0;
  bl = len(b);
  if (bl>0) then begin
    al = len(a);
    if (al>0) then begin commal = 1; end;
    if ((al+bl+commal)<=maxlen) then begin
      if (al>0) then begin a = a & ","; end;
      a = a & b;
    end;
  end;
  RETURN;
END;

/*
procedure AddToCheckArray(LongInt ChequeNr,val RecVal,Array LongInt aChequeNr,Arrar val aChequeNrVal,var Integer achcnt)
begin
  Integer i;
  
  for (i=0;i<achcnt;i=i+1) begin
    if (ChequeNr==aChequeNr[i]) then begin
      aChequeNrVal[i] = aChequeNrVal[i] + RecVal;
      goto LAddToCheckArray;
    end;
  end;
  aChequeNr[achcnt] = ChequeNr;
  aChequeNrVal[achcnt] = RecVal;
  achcnt = achcnt + 1;
LAddToCheckArray:;  
  return;
end;
*/

function Boolean PrintOPDPerSupplier(record RcVc RepSpec,string formcode,record OPVc argOPp,string arg1,Boolean inonego,Integer vers)
BEGIN
  Boolean res;
  Integer i,j,rwcnt;
  record VIVc VIr;
  record CUVc VEr;
  row OPVc OPrw;
  row OPVc OP2rw;
  Boolean VIs,VEs;
  string 60 OPDrBankAcc;
  string 60 OPDrBankName;
  string 20 OPDrBankNr1;
  string 20 OPDrBankNr2;
  string 200 OPDrComment;
  string 255 OPDrInvoiceNr;
  string 5 OPDrPInvCurncy;
  val OPDrPInvVal;
  string 5 OPDrBankCurncy;
  val OPDrBankVal;
  string 5 OPDrRecCurncy;
  val OPDrRecVal;
  val OPDrBase1Val;
  string 60 OPDrSWIFT;
  string 60 OPDrBankAddress0;
  string 60 OPDrBankAddress1;
  string 60 OPDrBankAddress2;        
  
  Array string 20 VIPaypRefStr;
  Array string 20 origVEArrpCode;
  Array string 20 VEArrpCode;
  Array string 20 VEArrpInvoiceNr;
  Array Date VEArrpInvDate;
  Array Date VEArrpDueDate;
  Array Integer VEArrpInvType; 
   
  Array string 20 VIPaypInvoiceNr;
  Array string 30 VIPaypBankAcc;
  Array Date VIPaypInvDate;
  Array Date VIPaypDueDate;
  Array string 200 VIPaypComment;
  Array val VIPaypVATVal;
  Array string 2 VIPaypVATCode;
  Array string 2 VIPaypPayMode;
  Array LongInt VIPaypChequeNr;
  Array string 5 VIPaypPInvCurncy;
  Array val VIPaypPInvVal;
  Array string 5 VIPaypBankCurncy;
  Array val VIPaypBankVal;
  Array string 5 VIPaypRecCurncy;
  Array val VIPaypRecVal;
  Array LongInt VIPaypSerNr;
  Array string 10 VIPaypAccount;
  Array Integer VIPaypInvType;
  Array val VIPaypBase1Val;      
  Integer rownr;
  LongInt curChNr;
  record SysFormatBlock SysFormatRec;
  record LangNrVc LangNrr;
  Array string 30 VIRefNo;
  Array string 60 OPBankacc;
  Array val VIPaypSettDiscRecVal;
  Array val VIPaypSettDiscBankVal;
  transaction record RcVc gOP2DFormRepSpec;
  string 255 paymode,tstr;

  Array Integer aChequeType;
  Array LongInt aChequeNr;
  Array val aChequeRecVal;
  Integer achcnt;
  Array val aChequeTot;

  Array string 30 VIPWithHoldTAXNo;
  record OPVc OPp;
  vector Boolean vVISerNr;
  vector Boolean vChequeNr;

  Array string 255 aPayMode;
  Array val aPayModeTot;
  Integer apmcnt;
  val ChequeVal;

  GetLangNr("",LangNrr);  
  BlockLoad(SysFormatRec);

  curChNr = FirstInRange(gOP2DFormRepSpec.f2,10);
  RecordCopy(OPp,argOPp);
  if (RepSpec.flags[1]!=0) then begin
    ChequeVal = 0;
    while (MatRowCnt(OPp)>0) begin
      MatRowDelete(OPp,0);
    end;
    
    rwcnt = MatRowCnt(argOPp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(argOPp,i,OPrw);
      if (OPrw.ChequeNr>0) then begin
        ChequeVal = OPrw.RecVal;
      end;
      paymode = OPrw.PayMode;
      if (blank(paymode)) then begin
        paymode = OPp.PayMode;
      end;
      InsertTempInArray(aPayMode,aPayModeTot,apmcnt,paymode,OPrw.PInvVal,true); 
      if (OPrw.VISerNr>0) then begin
        if (vVISerNr[OPrw.VISerNr]==false) then begin
          for (j=i+1;j<rwcnt;j=j+1) begin
            MatRowGet(argOPp,j,OP2rw);
            if (OP2rw.VISerNr==OPrw.VISerNr) then begin
              OPrw.PInvVal = OPrw.PInvVal + OP2rw.PInvVal;
              OPrw.BankVal = OPrw.BankVal + OP2rw.BankVal;
              OPrw.RecVal = OPrw.RecVal + OP2rw.RecVal;
            end;
          end;
          vVISerNr[OPrw.VISerNr] = true;
          MatRowPut(OPp,MatRowCnt(OPp),OPrw);
        end;
      end else begin
        MatRowPut(OPp,MatRowCnt(OPp),OPrw);
      end;
      if (OPrw.ChequeNr>0) then begin
        if (vChequeNr[OPrw.ChequeNr]==false) then begin
          paymode = OPrw.PayMode;
          if (blank(paymode)) then begin
            paymode = OPp.PayMode;
          end;
          for (j=i+1;j<rwcnt;j=j+1) begin
            MatRowGet(argOPp,j,OP2rw);
            if (OP2rw.ChequeNr==OPrw.ChequeNr) then begin
              aChequeTot[achcnt] = aChequeTot[achcnt] + OP2rw.PInvVal;
            end;
          end;
          aChequeType[achcnt] = PMCheckType(paymode,tstr,tstr);
          aChequeNr[achcnt] = OPrw.ChequeNr;
          aChequeTot[achcnt] = aChequeTot[achcnt] + ChequeVal;
          vChequeNr[OPrw.ChequeNr] = true;

          achcnt = achcnt + 1;
        end;
      end;
    end;
  end;
  rwcnt = MatRowCnt(OPp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OPp,i,OPrw);
    VEArrpCode[i] = "";
    if (nonblank(RepSpec.f3)) then begin
      if (OPrw.VECode!=RepSpec.f3) then begin goto L66PrintOPDPerSupplier; end;
    end;
    if (OPrw.ovst==0) then begin
      VIr.SerNr = OPrw.VISerNr;
      VIs = ReadFirstMain(VIr,1,true);
      origVEArrpCode[i] = OPrw.VECode;
      VEArrpCode[i] = OPrw.VECode;
      if (VIr.Invalid!=0) then begin VIs = false; end;
      if (VIs) then begin
        if (nonblank(VIr.VEFactoring)) then begin
          VEArrpCode[i] = VIr.VEFactoring; 
// What?? We use the VEArrpCode to find the proper Supplier later.
//factoring supplier paying so he should get receipt
//          VEArrpCode[i] = VIr.VECode;
        end else begin
          VEArrpCode[i] = VIr.VECode;
        end;
        VEArrpInvoiceNr[i] = VIr.InvoiceNr;
        VEArrpInvDate[i] = VIr.InvDate;
        VEArrpDueDate[i] = VIr.DueDate;
        VIRefNo[i] = "";
        OPBankacc[i] = "";
        if (inonego==false) then begin
          VIRefNo[i] = VIr.RefStr;
          OPBankacc[i] = OPrw.BankAcc;
        end;
      end;
    end;
L66PrintOPDPerSupplier:;
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OPp,i,OPrw);
    if ((OPrw.ovst==0) and (OPrw.stp==1)) then begin
      if (blank(VEArrpCode[i])) then begin goto L77PrintOPDPerSupplier; end;
      for (j=0;j<i;j=j+1) begin
        if ((VEArrpCode[j]==VEArrpCode[i]) and (VIRefNo[j]==VIRefNo[i]) and (OPBankacc[j]==OPBankacc[i])) then begin goto L77PrintOPDPerSupplier; end;
      end;
      if ((curChNr>0) and (OPrw.ChequeNr==-1)) then begin 
        OPrw.ChequeNr = curChNr;
      end;
      for (j=0;j<rwcnt;j=j+1) begin
        VIPaypInvoiceNr[j] = "";
      end;
//      AddToCheckArray(OPrw.ChequeNr,OPrw.RecVal,aChequeNr,aChequeRecVal,achcnt);
      rownr = 0;
      VIPaypInvoiceNr[rownr] = VEArrpInvoiceNr[i];
      VIPaypBankAcc[rownr] = OPrw.BankAcc;
      VIPaypSerNr[rownr] = OPrw.VISerNr;
      VIr.SerNr = OPrw.VISerNr;
      if (ReadFirstMain(VIr,1,true)) then begin end;;
      VIPaypInvType[rownr] = VIr.InvType;
      VIPaypPInvVal[rownr] = OPrw.PInvVal;
      VIPaypBankVal[rownr] = OPrw.BankVal;
      VIPaypRecVal[rownr] = OPrw.RecVal;
      VIPaypBankCurncy[rownr] = OPrw.BankCurncy;
      VIPaypPInvCurncy[rownr] = OPrw.PInvCurncy;
      VIPaypRecCurncy[rownr] = OPrw.RecCurncy;
      VIPaypBase1Val[rownr] = MulWithRateToBase1(OPrw.PInvCurncy,OPp.TransDate,OPrw.PInvVal,DefaultCurRoundOff);
      OPDrBase1Val = OPDrBase1Val + VIPaypBase1Val[rownr];
      VIPaypDueDate[rownr] = VEArrpDueDate[i];
      VIPaypInvDate[rownr] = VEArrpInvDate[i];
      VIPaypComment[rownr] = OPrw.Comment;
      VIPaypVATVal[rownr] = OPrw.VATVal;
      VIPaypVATCode[rownr] = OPrw.VATCode;
      if (nonblank(OPrw.PayMode)) then begin
        VIPaypPayMode[rownr] = OPrw.PayMode;
      end else begin
        VIPaypPayMode[rownr] = OPp.PayMode;
      end;
      VIPaypChequeNr[rownr] = OPrw.ChequeNr;
      VIPaypRefStr[rownr] = VIr.RefStr;
      VIPaypSettDiscRecVal[rownr] = blankval;
      VIPaypSettDiscBankVal[rownr] = blankval;
      OPDrPInvVal = OPrw.PInvVal;
      OPDrBankVal = OPrw.BankVal;
      OPDrRecVal = OPrw.RecVal;      
      OPDrPInvCurncy = OPrw.PInvCurncy;
      OPDrRecCurncy = OPrw.RecCurncy;
      OPDrBankCurncy = OPrw.BankCurncy;
      OPDrInvoiceNr = "";
      AddToCommaStr(OPDrInvoiceNr,VEArrpInvoiceNr[i],255);
      for (j=i+1;j<rwcnt;j=j+1) begin
        if ((VEArrpCode[j]==VEArrpCode[i]) and (VIRefNo[j]==VIRefNo[i]) and (OPBankacc[j]==OPBankacc[i])) then begin
          MatRowGet(OPp,j,OP2rw);
          switch (OP2rw.stp) begin
            case 1:
              OPDrPInvVal = OPDrPInvVal + OP2rw.PInvVal;
              OPDrBankVal = OPDrBankVal + OP2rw.BankVal;
              OPDrRecVal = OPDrRecVal + OP2rw.RecVal;
              OPDrPInvCurncy = OP2rw.PInvCurncy;
              OPDrRecCurncy = OP2rw.RecCurncy;
              OPDrBankCurncy = OP2rw.BankCurncy;
              
              AddToCommaStr(OPDrInvoiceNr,VEArrpInvoiceNr[j],255);
              rownr = rownr + 1;
              VIPaypSerNr[rownr] = OP2rw.VISerNr;
              VIr.SerNr = OP2rw.VISerNr;
              if (ReadFirstMain(VIr,1,true)) then begin end;
              VIPaypInvType[rownr] = VIr.InvType;
              VIPaypRefStr[rownr] = VIr.RefStr;

              VIPaypPInvVal[rownr] = OP2rw.PInvVal;
              VIPaypRecVal[rownr] = OP2rw.RecVal;
              VIPaypBankVal[rownr] = OP2rw.BankVal;
              VIPaypPInvCurncy[rownr] = OP2rw.PInvCurncy;
              VIPaypRecCurncy[rownr] = OP2rw.RecCurncy;
              VIPaypBankCurncy[rownr] = OP2rw.BankCurncy;
              VIPaypInvoiceNr[rownr] = VEArrpInvoiceNr[j];
              VIPaypBankAcc[rownr] = OP2rw.BankAcc;
              VIPaypDueDate[rownr] = VEArrpDueDate[j];
              VIPaypInvDate[rownr] = VEArrpInvDate[j];
              VIPaypComment[rownr] = OP2rw.Comment;
              if ((curChNr>0) and (OP2rw.ChequeNr==-1)) then begin 
                OP2rw.ChequeNr = curChNr;
              end;
              VIPaypBase1Val[rownr] = MulWithRateToBase1(OP2rw.PInvCurncy,OPp.TransDate,OP2rw.PInvVal,DefaultCurRoundOff);
              OPDrBase1Val = OPDrBase1Val + VIPaypBase1Val[rownr];
              VIPaypVATVal[rownr] = OP2rw.VATVal;
              VIPaypVATCode[rownr] = OP2rw.VATCode;
              if (nonblank(OP2rw.PayMode)) then begin
                VIPaypPayMode[rownr] = OP2rw.PayMode;
              end else begin
                VIPaypPayMode[rownr] = OPp.PayMode;
              end;
              VIPaypChequeNr[rownr] = OP2rw.ChequeNr;
              VIPWithHoldTAXNo[rownr] = OP2rw.WHTax;
              MatRowPut(OPp,j,OP2rw);
            case 5:
              VIPaypSettDiscRecVal[rownr] = VIPaypSettDiscRecVal[rownr] + OP2rw.RecVal;
              VIPaypSettDiscBankVal[rownr] = VIPaypSettDiscBankVal[rownr] + OP2rw.BankVal;
          end;
        end;
      end;
      VIr.SerNr = OPrw.VISerNr;
      VIs = ReadFirstMain(VIr,1,true);
      VEr.Code = VEArrpCode[i];//origVEArrpCode ? 
      VEs = ReadFirstMain(VEr,1,true);
      OPDrBankAcc = OPrw.BankAcc;
      OPDrBankName = VEr.AccOperator;
      PasteBank(OPDrBankName,OPDrBankNr1,OPDrBankNr2,OPDrSWIFT,OPDrBankAddress0,OPDrBankAddress1,OPDrBankAddress2);
      OPDrComment = OPrw.Comment;
      if (vers==1) then begin
        res = PrintPaymentPerS(RepSpec,formcode,OPp,VEr,SysFormatRec,LangNrr,
                          OPDrBankName,OPDrBankNr1,OPDrBankNr2,OPDrSWIFT,OPDrBankAddress0,OPDrBankAddress1,OPDrBankAddress2,
                          OPDrBankAcc,OPDrComment,OPDrInvoiceNr,VIPaypRefStr,OPDrPInvCurncy,OPDrBankCurncy,OPDrRecCurncy,
                          OPDrPInvVal,OPDrBankVal,OPDrRecVal,OPDrBase1Val,
                          VIPaypInvoiceNr,VIPaypBankAcc,VIPaypComment,VIPaypVATCode,VIPaypPayMode,
                          VIPaypPInvCurncy,VIPaypBankCurncy,VIPaypRecCurncy,VIPaypAccount,
                          VIPaypInvDate,VIPaypDueDate,VIPaypChequeNr,VIPaypSerNr,VIPaypInvType,
                          VIPaypVATVal,VIPaypPInvVal,VIPaypBankVal,VIPaypRecVal,VIPaypBase1Val,VIPaypSettDiscRecVal,VIPaypSettDiscBankVal,rownr,VIPWithHoldTAXNo,
                          aChequeType,aChequeNr,aChequeTot,achcnt,aPayMode,aPayModeTot,apmcnt);

      end else begin
        res = PrintPaymentPerS(RepSpec,formcode,OPp,VEr,SysFormatRec,LangNrr,
                          OPDrBankName,OPDrBankNr1,OPDrBankNr2,OPDrSWIFT,OPDrBankAddress0,OPDrBankAddress1,OPDrBankAddress2,
                          OPDrBankAcc,OPDrComment,OPDrInvoiceNr,VIPaypRefStr,OPDrPInvCurncy,OPDrBankCurncy,OPDrRecCurncy,
                          OPDrPInvVal,OPDrBankVal,OPDrRecVal,OPDrBase1Val,
                          VIPaypInvoiceNr,VIPaypBankAcc,VIPaypComment,VIPaypVATCode,VIPaypPayMode,
                          VIPaypPInvCurncy,VIPaypBankCurncy,VIPaypRecCurncy,VIPaypAccount,
                          VIPaypInvDate,VIPaypDueDate,VIPaypChequeNr,VIPaypSerNr,VIPaypInvType,
                          VIPaypVATVal,VIPaypPInvVal,VIPaypBankVal,VIPaypRecVal,VIPaypBase1Val,VIPaypSettDiscRecVal,VIPaypSettDiscBankVal,rownr,VIPWithHoldTAXNo,
                          aChequeType,aChequeNr,aChequeTot,achcnt,aPayMode,aPayModeTot,apmcnt);
      end;
      if (curChNr>0) then begin 
        curChNr = curChNr + 1; 
        RepSpec.f2 = curChNr;//not working
        gOP2DFormRepSpec.f2 = curChNr;
      end;
    end;
L77PrintOPDPerSupplier:; 
    MatRowPut(OPp,i,OPrw);
  end;
  PrintOPDPerSupplier = res;
  RETURN;
END;

global
function Boolean GetPaymentModeDoc(string PayMode,var string docname)
BEGIN
  Integer i,rwcnt;
  record PMBlock PMRec;
  row PMBlock pmrw;
  Boolean res;

  docname = "";
  if (blank(PayMode)) then begin goto LGetPaymentModeDoc; end;
  BlockLoad(PMRec);
  rwcnt = MatRowCnt(PMRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PMRec,i,pmrw);
    if (pmrw.Code==PayMode) then begin
      if (nonblank(pmrw.DocName)) then begin
        docname = pmrw.DocName;
        res = true;
      end;
      goto LGetPaymentModeDoc;
    end;
  end;
LGetPaymentModeDoc:;
  GetPaymentModeDoc = res;
  RETURN;
END;

function Boolean PrintPayment(record RcVc RepSpec,string formcode,record OPVc OPr)
BEGIN
  Boolean res;
  Integer i,rwcnt,gchk;
  row OPVc OPrw;
  record ModuleBlock MBr;
  record DocVc Docr;
  record CUVc VEr;
  string 255 tstr,fldarg;
  val OPDrBase1Val,OPDrRebVal;
  record SysFormatBlock SysFormatRec;
  record LangNrVc LangNrr;
  record BankVc BKr;
  record VIVc VIr;
  val t;
  record APVc APr;
  record OwnCheckVc OwnChqr;
  
  if (OpenForm(formcode)) then begin  
    GetLangNr("",LangNrr);  
    BlockLoad(SysFormatRec);
    BlockLoad(MBr);  
    if (OPr.OrderedFlag==0) then begin
      if (MBr.NoTestprintEnabler==0) then begin
        FormWaterMark(1117,-1);
      end;
    end;
    res = true;
    CommonDocumentFields(RepSpec);
    NumberofDocumentPages(formcode,MatRowCnt(OPr));
    Docr.Code = formcode;
    if (ReadFirstMain(Docr,1,true)) then begin
    end;

    OutFormField("F_DATEDAY",GetDay(OPr.TransDate));
    OutFormField("F_DATEYEAR",GetYear(OPr.TransDate));
    OutFormField("F_DATEMONTH",GetMonth(OPr.TransDate));
    GetMonthText(VEr.LangCode,OPr.TransDate,tstr);
    OutFormField("F_DATEMONTHTEXT",tstr);
    OutFormField("F_REFERENSNUMMER",OPr.PayNumber);
    OutFormField("F_FRANBANK",OPr.BankName);
    OutFormField("F_FRANGIRO",OPr.BankAcc);
    OutFormField("F_UTBETNR",OPr.SerNr);
    OutFormField("F_SERNR",OPr.SerNr);
    if (FIELDINFORM("F_RUSPAYNR")) then begin
      RussianPaymentNr(OPr.SerNr,tstr);
      OutFormField("F_RUSPAYNR",tstr);
    end;
    OutFormField("F_UTBETDATUM",OPr.PayDate);
    OutFormField("F_REGDATUM",OPr.PayDate);
    OutFormField("F_TRANSDATUM",OPr.TransDate);

    rwcnt = MatRowCnt(OPr);
    for (i=0 ; i<rwcnt; i=i+1) begin
      MatRowGet(OPr,i,OPrw);
      VEr.Code = OPrw.VECode;
      if (ReadFirstMain(VEr,1,true)) then begin end;
      APr.SerNr = OPrw.VISerNr;
      ReadFirstMain(APr,1,true);
      OwnChqr.SerNr = OPrw.ChequeNr;
      ReadFirstMain(OwnChqr,1,true);

      OUTFORMFIELD("F_CHECKNR",OwnChqr.CheckNr);
      OUTFORMFIELD("F_BANKNAME",OwnChqr.BankName);
      OUTFORMFIELD("F_EFFECTDATE",OwnChqr.EffectDate);
      OUTFORMFIELD("F_REGDATUM",OwnChqr.TransDate);
      
      OutFormField("F_VARTKUNDNR",VEr.VECustID);
      OutFormField("F_LEVNAMN",VEr.Name);
      OutFormField("F_LEVERANTOR",VEr.Code);
      OutFormField("F_REGNUMBER1",VEr.RegNr1);
      OutFormField("F_REGNUMBER2",VEr.RegNr2);
      OutFormField("F_LEVVATNR",VEr.VATNr);
      OutAddress("F_LEVADRESS",VEr.Name,VEr.InvAddr0,VEr.InvAddr1,VEr.InvAddr2,VEr.InvAddr3,VEr.InvAddr4);
      OutFormField("F_LEVADRESS2",VEr.Name);
      OutFormField("F_LEVADRESS2",VEr.InvAddr0);
      OutFormField("F_LEVADRESS2",VEr.InvAddr1);
      OutFormField("F_LEVADRESS2",VEr.InvAddr2);
      OutFormField("F_LEVADRESS2",VEr.InvAddr3);
      OutFormField("F_LEVADRESS2",VEr.InvAddr4);
      OutFormField("F_SPECLEV",VEr.Comment);
      OutFormField("F_ANACODE",VEr.ANACode);

      OPDrBase1Val = OPDrBase1Val + MulWithRateToBase1(OPrw.PInvCurncy,OPr.TransDate,OPrw.PInvVal,DefaultCurRoundOff);
      OutFormField("F_TILLGIRO",OPrw.BankAcc);
      BKr.Code = VEr.AccOperator;
      if (ReadFirstMain(BKr,1,true)) then begin end;
      OutFormField("F_PREPAYNUMBER",OPrw.PrepayNr);
      OutFormField("F_KOMMENTAR",OPrw.Comment);
      OutFormField("F_SWIFT",BKr.SWIFT);
      OutFormField("F_TILLBANK",BKr.Name);
      OutFormField("F_TOBANKNR1",BKr.Nr1);
      OutFormField("F_TOBANKNR2",BKr.Nr2);
      OutFormField("F_BANKADDRESS0",BKr.Address0);
      OutFormField("F_BANKADDRESS1",BKr.Address1);
      OutFormField("F_BANKADDRESS2",BKr.Address2);
      PrintCurrencyCode("F_VALUTA",OPrw.PInvCurncy);
      if (FIELDINFORM("F_ATTBETALATEXT")) then begin
        ValToText(OPrw.PInvVal,M4Val,OPrw.PInvCurncy,VEr.LangCode,tstr);
        OutFormField("F_ATTBETALATEXT",tstr);
      end;
      if (FIELDINFORM("F_ATTBETALATEXTBASE1")) then begin
        t = MulWithRateToBase1(OPrw.PInvCurncy,OPr.TransDate,OPrw.PInvVal,DefaultCurRoundOff);
        ValToText(t,M4Val,OPrw.PInvCurncy,VEr.LangCode,tstr);
        OutFormField("F_ATTBETALATEXTBASE1",tstr);
      end;
      t = MulWithRateToBase1(OPrw.PInvCurncy,OPr.TransDate,OPrw.PInvVal,DefaultCurRoundOff);
      PrintValue("F_ATTBETALABASE1",t,M4Val,LangNrr,SysFormatRec,false);
      t = MulWithRateToBase2(OPrw.PInvCurncy,OPr.TransDate,OPrw.PInvVal,DefaultCurRoundOff);
      PrintValue("F_ATTBETALABASE2",t,M4Val,LangNrr,SysFormatRec,false);
      if (FIELDINFORM("F_AMOUNTINTEXT")) then begin
        PrintAmountInTextField("F_AMOUNTINTEXT",Docr,OPrw.PInvVal,OPrw.PInvCurncy,VEr.LangCode,M4Val);
      end;
      if (FIELDINFORM("F_AMOUNTINTEXTCENTS")) then begin
        PrintAmountInTextField("F_AMOUNTINTEXTCENTS",Docr,OPrw.PInvVal,OPrw.PInvCurncy,VEr.LangCode,M4Val);
      end;
      if (FIELDINFORM("F_AMOUNTINTEXTUNITS")) then begin
        PrintAmountInTextField("F_AMOUNTINTEXTUNITS",Docr,OPrw.PInvVal,OPrw.PInvCurncy,VEr.LangCode,M4Val);
      end;
      if (FIELDINFORM("F_AMOUNTINTEXTTENS")) then begin
        PrintAmountInTextField("F_AMOUNTINTEXTTENS",Docr,OPrw.PInvVal,OPrw.PInvCurncy,VEr.LangCode,M4Val);
      end;
      if (FIELDINFORM("F_AMOUNTINTEXTHUNDREDS")) then begin
        PrintAmountInTextField("F_AMOUNTINTEXTHUNDREDS",Docr,OPrw.PInvVal,OPrw.PInvCurncy,VEr.LangCode,M4Val);
      end;
      if (FIELDINFORM("F_AMOUNTINTEXTTHOUSANDS")) then begin
        PrintAmountInTextField("F_AMOUNTINTEXTTHOUSANDS",Docr,OPrw.PInvVal,OPrw.PInvCurncy,VEr.LangCode,M4Val);
      end;
      if (FIELDINFORM("F_AMOUNTINTEXTTENTHOUSANDS")) then begin
        PrintAmountInTextField("F_AMOUNTINTEXTTENTHOUSANDS",Docr,OPrw.PInvVal,OPrw.PInvCurncy,VEr.LangCode,M4Val);
      end;
      if (FIELDINFORM("F_AMOUNTINTEXTHUDREDTHOUSANDS")) then begin
        PrintAmountInTextField("F_AMOUNTINTEXTHUDREDTHOUSANDS",Docr,OPrw.PInvVal,OPrw.PInvCurncy,VEr.LangCode,M4Val);
      end;
      if (FIELDINFORM("F_AMOUNTINTEXTMILLIONS")) then begin
        PrintAmountInTextField("F_AMOUNTINTEXTMILLIONS",Docr,OPrw.PInvVal,OPrw.PInvCurncy,VEr.LangCode,M4Val);
      end;
      if (FIELDINFORM("F_AMOUNTINTEXTTENMILLIONS")) then begin
        PrintAmountInTextField("F_AMOUNTINTEXTTENMILLIONS",Docr,OPrw.PInvVal,OPrw.PInvCurncy,VEr.LangCode,M4Val);
      end;
      if (FIELDINFORM("F_AMOUNTINTEXTHUDREDMILLIONS")) then begin
        PrintAmountInTextField("F_AMOUNTINTEXTHUDREDMILLIONS",Docr,OPrw.PInvVal,OPrw.PInvCurncy,VEr.LangCode,M4Val);
      end;
      PrintValue("F_INVOUTSTAND",APr.RVal,M4Val,LangNrr,SysFormatRec,false);
      VIr.SerNr = OPrw.VISerNr;
      if (ReadFirstMain(VIr,1,true)) then begin end;
      OutFormField("F_FAKTURANR",VIr.InvoiceNr);
      if (OPrw.PInvVal>0) then begin
        PrintValue("F_ATTBETALA",OPrw.PInvVal,M4Val,LangNrr,SysFormatRec,false);
      end else begin
        OutFormField("F_ATTBETALA",USetStr(1216));
      end;
      if (FIELDINFORM("F_ATTBETALARUS")) then begin
        if (OPrw.PInvVal>0) then begin
          RussianPayVal(tstr,OPrw.PInvVal,LangNrr.CutDecimals);
          OutFormField("F_ATTBETALARUS",tstr);
        end else begin
          OutFormField("F_ATTBETALARUS",USetStr(1216));
        end;
      end;
      if (FIELDINFORM("F_REFSTR")) then begin
        OUTFORMFIELD("F_REFSTR",VIr.RefStr);
      end;
      if (FIELDINFORM("F_RECCURENCY")) then begin
        PrintCurrencyCode("F_RECCURENCY",OPrw.RecCurncy);
      end;
      if (FIELDINFORM("F_BANKCURENCY")) then begin
        PrintCurrencyCode("F_BANKCURENCY",OPrw.BankCurncy);
      end;
      if (FIELDINFORM("F_BANKVALUE")) then begin
        PrintValue("F_BANKVALUE",OPrw.BankVal,M4Val,LangNrr,SysFormatRec,false);
      end;
      if (FIELDINFORM("F_RECVALUE")) then begin
        PrintValue("F_RECVALUE",OPrw.RecVal,M4Val,LangNrr,SysFormatRec,false);
      end;
      if (FIELDINFORM("F_BANKACC")) then begin
        OUTFORMFIELD("F_BANKACC",OPrw.BankAcc);
      end;
      if (FIELDINFORM("F_FAKTTYP")) then begin
        OUTFORMFIELD("F_FAKTTYP",VIr.InvType);
      end;
      if (FIELDINFORM("F_FAKTURANUMMER")) then begin
        OUTFORMFIELD("F_FAKTURANUMMER",OPrw.VISerNr);
      end;
      if (FIELDINFORM("F_INVOICENR")) then begin
        OUTFORMFIELD("F_INVOICENR",VIr.InvoiceNr);
      end;
      if (FIELDINFORM("F_INVDATE")) then begin
        OUTFORMFIELD("F_INVDATE",VIr.InvDate);
      end;
      if (FIELDINFORM("F_DUEDATE")) then begin
        OUTFORMFIELD("F_DUEDATE",VIr.DueDate);
      end;
      if (FIELDINFORM("F_COMMENT")) then begin
        OUTFORMFIELD("F_COMMENT",OPrw.Comment);
      end;
      if (FIELDINFORM("F_AMOUNT")) then begin
        PrintValue("F_AMOUNT",OPrw.PInvVal,M4Val,LangNrr,SysFormatRec,false);
      end;
      if (FIELDINFORM("F_AMOUNTRUS")) then begin
        RussianPayVal(tstr,OPrw.PInvVal,LangNrr.CutDecimals);
        OUTFORMFIELD("F_AMOUNTRUS",tstr);
      end;
      if (FIELDINFORM("F_AMOUNTBIELRUS")) then begin
        BielrussianPayVal(tstr,OPrw.PInvVal,LangNrr.CutDecimals);
        OUTFORMFIELD("F_AMOUNTBIELRUS",tstr);
      end;
      if (FIELDINFORM("F_MOMS")) then begin
        PrintValue("F_MOMS",OPrw.VATVal,M4Val,LangNrr,SysFormatRec,false);
      end;
      if (FIELDINFORM("F_MOMSRUS")) then begin
        RussianPayVal(tstr,OPrw.VATVal,LangNrr.CutDecimals);
        OUTFORMFIELD("F_MOMSRUS",tstr);
      end;
      if (FIELDINFORM("F_ROWVATPRC")) then begin
        if (GetVAT2(OPrw.VATCode,t,gchk,0)) then begin
        end;
        PrintValue("F_ROWVATPRC",t,M4Val,LangNrr,SysFormatRec,false);
      end;
      if (FIELDINFORM("F_CHEQUENR")) then begin
        if (OPrw.ChequeNr>0) then begin
          OUTFORMFIELD("F_CHEQUENR",OPrw.ChequeNr);
        end;
      end;
      if (FIELDINFORM("F_PAYMODEROW")) then begin
        tstr = OPrw.PayMode;
        if (blank(tstr)) then begin
          tstr = OPr.PayMode;
        end;
        if (GetPM(tstr,fldarg,tstr)==false) then begin
        end;
        OUTFORMFIELD("F_PAYMODEROW",tstr);
      end;
      OUTFORMFIELD("F_OURREF",OPrw.BankRefStr);
      OUTFORMFIELD("F_VARREFERENS",OPrw.rkPayNumber);
      EndFormRow;      
    end;
    OUTFORMFIELD("F_PAYMODE",OPr.PayMode);
    PrintValue("F_BANKTOTAL",OPDrBase1Val,M4Val,LangNrr,SysFormatRec,false);
    OUTFORMFIELD("F_NROFFINV",rwcnt-1);
    OUTFORMFIELD("F_CURUSER",CurrentUser);
    CloseForm;
  end;
  PrintPayment = res;
  RETURN;
END;

function Boolean PrintOPD(record RcVc RepSpec,string formcode,record OPVc OPp,string arg1,Boolean inonego,Integer vers)
BEGIN
  Boolean res;
  transaction string 255 gCreateMailFromOPDVECode;
  
  if (blank(RepSpec.f3)) then begin
    RepSpec.f3 = gCreateMailFromOPDVECode;
  end;
  if (RepSpec.flags[0]==0) then begin
    res = PrintOPDPerSupplier(RepSpec,formcode,OPp,arg1,inonego,vers);
  end else begin
    res = PrintPayment(RepSpec,formcode,OPp);
  end;
  PrintOPD = res;
  RETURN;
END;

global
updating procedure DoOPDForm(record RcVc RepSpec,record OPVc OPr)
BEGIN
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Integer i,rwcnt;
  Boolean printf,langf;
  Integer intdocnr;
  string 30 formcode,langcode,langcod2;
  Boolean inonego;

  if (HasLocalization("ARG")) then begin
    RepSpec.flags[1] = 1;
  end;
  langcode = OPr.LangCode;
  langcod2 = OPr.PayMode;
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoOPDForm;
  end;
  if (OPr.Invalid!=0) then begin
    MessageBox(1282,"");
    goto LDoOPDForm;
  end;
  rwcnt = MatRowCnt(FDr);
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(FDr,i,FDrw);
    if (FDrw.LangCode==langcode) then begin
      i = -1;
      langf = true;
    end;
  end;
  if (langf==false) then begin langcode = ""; end;  

  intdocnr = 1;
  printf = true;
  inonego = true;
  if (HasLocalization("NOR")) then begin
    inonego = false;
  end;
  while (printf) begin  
LFINDFORMCOCEOP:;
    formcode = "";
    if (GetPaymentModeDoc(OPr.PayMode,formcode)==false) then begin
      for (i=rwcnt-1;i>=0;i=i-1) begin
        MatRowGet(FDr,i,FDrw);
        if (FindFormcode(OPr.DoneFlag,FDrw.Typ)) then begin 
          if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,OPr.SerNr,FDrw.PrintGroupCode,
                        langcode,intdocnr,"OPVc",formcode)) then
          begin
            goto LBREAKOP;
          end;
        end;
      end;
      if (nonblank(langcod2)) then begin
        langcode = langcod2;
        langcod2 = "";
        goto LFINDFORMCOCEOP;
      end;  
    end else begin
      printf = false;
    end;
LBREAKOP:;
    if (nonblank(formcode)) then begin
      if (PrintOPD(RepSpec,formcode,OPr,"",inonego,1)) then begin
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoOPDForm:;  
  RETURN;
END;

global
updating procedure DoOP2DForm(record RcVc RepSpec,var record OPVc OPr)
BEGIN
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Integer i,rwcnt;
  Boolean printf,langf;
  Integer intdocnr;
  string 30 formcode,langcode,langcod2;
  Boolean inonego;

  langcode = OPr.LangCode;
  langcod2 = OPr.PayMode;
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoOP2DForm;
  end;
  if (OPr.Invalid!=0) then begin
    MessageBox(1282,"");
    goto LDoOP2DForm;
  end;
  rwcnt = MatRowCnt(FDr);
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(FDr,i,FDrw);
    if (FDrw.LangCode==langcode) then begin
      i = -1;
      langf = true;
    end;
  end;
  if (langf==false) then begin langcode = ""; end;  
  intdocnr = 1;
  printf = true;
  inonego = true;
  if (HasLocalization("NOR")) then begin
    inonego = false;
  end;
  while (printf) begin  
LFINDFORMCOCEOP2:;
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (FindFormcode(OPr.DoneFlag,FDrw.Typ)) then begin 
        if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,OPr.SerNr,FDrw.PrintGroupCode,
                        langcode,intdocnr,"OPVc",formcode)) then
        begin
          goto LBREAKOP2;
        end;
      end;
    end;
    if (nonblank(langcod2)) then begin
      langcode = langcod2;
      langcod2 = "";
      goto LFINDFORMCOCEOP2;
    end;  
LBREAKOP2:;
    if (nonblank(formcode)) then begin
      if (PrintOPD(RepSpec,formcode,OPr,"",inonego,2)) then begin
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoOP2DForm:;  
  RETURN;
END;
