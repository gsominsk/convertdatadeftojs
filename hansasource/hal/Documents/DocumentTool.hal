external function Boolean ProductInDemoMode();
external procedure GetFieldArgument(record DocVc,Integer,var string);
external procedure OutAddress(string,string,string,string,string,string,string);
external procedure GetCurUser(var record UserVc);
external procedure GetLangNr(string,var record LangNrVc);
external function Boolean GetPD(var record PDVc);
external procedure HT2Per(Date, Date , var string);
external procedure GlobalVIE999(record LangNrVc,Integer,Integer,var string,Integer,string);
external procedure OutAddressBrazil(string,string,string,string,string,string,string);

procedure InvCopyType(record DocVc Docr,var string res)
BEGIN
  Integer DocCopyNr;
  
  res = "";    
  switch (DocCopyNr) begin
    case 1: res = Docr.extext0;
    case 2: res = Docr.extext1;
    case 3: res = Docr.extext2;
    case 4: res = Docr.extext3;
    case 5: res = Docr.extext4;
  end;
  RETURN;
END;

global
procedure CommonDocumentFields2(record RcVc RepSpec,string bankcode)
begin
  record CYBlock CYb;
  record BankVc Bankr;
  
  BlockLoad(CYb);
  Bankr.Code = bankcode;
  ReadFirstMain(Bankr,1,true);
  if (nonblank(Bankr.Nr2)) then begin
    OUTFORMFIELD("F_OWNBANKACC2",Bankr.Nr2);
  end else begin
    OUTFORMFIELD("F_OWNBANKACC2",CYb.Bank1);
  end;
  if (nonblank(Bankr.Name)) then begin
    OUTFORMFIELD("F_OWNBANKNAME2",Bankr.Name);
  end else begin
    OUTFORMFIELD("F_OWNBANKNAME2",CYb.BankName);
  end;
  return;
end;

global
function string 255 ConvertPhoneNumber(string phoneno,string argstr)
begin
  string 255 res;

  switch (argstr) begin
    case "N":
      res = NormalizePhoneNumber(phoneno);
    otherwise
      res = phoneno;
  end;
  ConvertPhoneNumber = res;
  return;
end;

global
procedure PrintCountryCode(string formfield,string CountryCode)
begin
  record CountryVc Countryr;
  
  Countryr.Code = CountryCode;
  ReadFirstMain(Countryr,1,true);
  if (nonblank(Countryr.ISOCode)) then begin
    OUTFORMFIELD(formfield,Countryr.ISOCode);
  end else begin
    OUTFORMFIELD(formfield,CountryCode);
  end;
  return;
end;

global
procedure CommonDocumentFields(record RcVc RepSpec)
BEGIN
  record CYBlock CompYear;
  record BankVc Bankr;
  string 255 tstr,argstr;
  Boolean testf;
  record DocVc Docr;

  Docr.Code = RepSpec.repname;
  ReadFirstMain(Docr,1,true);
  BlockLoad(CompYear);
  OUTFORMFIELD("F_EGENEMAIL",CompYear.emailAddr);
  OUTFORMFIELD("F_EGENWWWADDRESS",CompYear.wwwAddr);
//  OUTFORMFIELD("F_LEDTEXT",fldarg); 
//  InvCopyType(Docr,tstr);//still in C
//  OUTFORMFIELD("F_KOPIETYP",tstr);
  OUTFORMFIELD("F_EGETNAMN",CompYear.CompName);
  OUTFORMFIELD("F_BUSINESSNAME",CompYear.BusinessName);
  GetFieldArgument(Docr,F_EGENTEL,argstr);
  if (nonblank(argstr)) then begin
    OUTFORMFIELD("F_EGENTEL",ConvertPhoneNumber(CompYear.Phone,argstr));
  end else begin
    OUTFORMFIELD("F_EGENTEL",CompYear.Phone);
  end;
  OUTFORMFIELD("F_EGENFAX",CompYear.Fax);
  OUTFORMFIELD("F_EGENBG",CompYear.Bank1);
  OUTFORMFIELD("F_EGENPG",CompYear.Bank2);
  OUTFORMFIELD("F_EGENBANKKOD",CompYear.BankCode);
  OUTFORMFIELD("F_EGETORGNR",CompYear.OrgNr);
  OUTFORMFIELD("F_EGETMOMSNR",CompYear.VATNr);
  OUTFORMFIELD("F_EGENGLN",CompYear.GLN);
  PrintCountryCode("F_EGENCOUNTRYCODE",CompYear.CountryCode);
  if (HasLocalization("BRA")) then begin
    OutAddressBrazil("F_EGENADRESS",CompYear.CompName,CompYear.Addr0,CompYear.Addr1,CompYear.Addr2,CompYear.Addr3,CompYear.Addr4);
  end else begin
    OutAddress("F_EGENADRESS",CompYear.CompName,CompYear.Addr0,CompYear.Addr1,CompYear.Addr2,CompYear.Addr3,CompYear.Addr4);
  end;
  OutAddress("F_EGENADRESS2",CompYear.Addr0,CompYear.Addr1,CompYear.Addr2,CompYear.Addr3,CompYear.Addr4,"");
  OUTFORMFIELD("F_PRODUCTNAME",USetStr(1802));
  OUTFORMFIELD("F_DATUM",CurrentDate);
  OUTFORMFIELD("F_TID",CurrentTime);
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  OUTFORMFIELD("F_PERIOD",tstr);
  OUTFORMFIELD("F_HOMECOMMUN",CompYear.HomeCommunity);
  OUTFORMFIELD("F_COMMREGNO",CompYear.OrgNr2);
  OUTFORMFIELD("F_MANAGER",CompYear.Manager);
  OUTFORMFIELD("F_CHIEFACCOUNTAT",CompYear.ChiefAccountant);    
  OUTFORMFIELD("F_OWNLINEOFBUSINESS",CompYear.LineOfBusiness);    
  OUTFORMFIELD("F_OWNSHARECAPITAL",CompYear.ShareCapital);    
  OUTFORMFIELD("F_OWNANACODE",CompYear.ANACode); 
  OUTFORMFIELD("F_OWNSORTCODE",CompYear.SortCode); 
  OUTFORMFIELD("F_SHORTUNDERLINE","_______________");
  Bankr.Code = CompYear.BankName;
  if (ReadFirstMain(Bankr,1,true)) then begin
    OUTFORMFIELD("F_OWNBANKCODE",CompYear.BankName);
    OUTFORMFIELD("F_OWNBANKCLEARING",Bankr.Nr1);
    OUTFORMFIELD("F_OWNBANKACC",Bankr.Nr2);
    OUTFORMFIELD("F_OWNBANKNAME",Bankr.Name);
    OUTFORMFIELD("F_OWNBANKSWIFT",Bankr.SWIFT);
    OUTFORMFIELD("F_OWNBANKSORTING",Bankr.Sorting);
    OUTFORMFIELD("F_OWNBANKCORRPACC",Bankr.CorrspAcc);
    OUTFORMFIELD("F_OWNBANKADDRESS0",Bankr.Address0);
    OUTFORMFIELD("F_OWNBANKADDRESS1",Bankr.Address1);
    OUTFORMFIELD("F_OWNBANKADDRESS2",Bankr.Address2);
    OUTFORMFIELD("F_OWNBANKADDRESS3",Bankr.Address3);
    OUTFORMFIELD("F_OWNBANKADDRESS4",Bankr.Address4);
    OUTFORMFIELD("F_OWNBANKADDRESS",Bankr.Address0);
    OUTFORMFIELD("F_OWNBANKADDRESS",Bankr.Address1);
    OUTFORMFIELD("F_OWNBANKADDRESS",Bankr.Address2);
    OUTFORMFIELD("F_OWNBANKADDRESS",Bankr.Address3);
    OUTFORMFIELD("F_OWNBANKADDRESS",Bankr.Address4);
  end;
  testf = true;
  if (RepSpec.repname=="CashInvForm") then begin testf = false; end;
  if (RepSpec.repname=="CashInvRecPRTForm") then begin testf = false; end;
  if (RepSpec.repname=="CredInvForm") then begin testf = false; end;
  if (RepSpec.repname=="IIInvForm") then begin testf = false; end;
  if (RepSpec.repname=="IntIVForm") then begin testf = false; end;
  if (RepSpec.repname=="InvForm") then begin testf = false; end;
  if (RepSpec.repname=="Inv1Form") then begin testf = false; end;
  if (RepSpec.repname=="ProjInvForm") then begin testf = false; end;
  if (testf) then begin
    OUTFORMFIELD("F_VALIDINVOICE",USetStr(23401));
  end;
  OUTFORMFIELD("F_OMRCODE","");
  if (ProductInDemoMode) then begin
    OUTFORMFIELD("F_TRAININGDOCUMENT",USetStr(23357));
    OUTFORMFIELD("F_DEMOCOMPANY",USetStr(23358));
  end;
  RETURN;
END;
  
function Boolean GetShipModeStr(record DMVc DMr,Integer tnr,string langcod2,string deftext,var string resstr)
begin
  Boolean res;
  Integer i,rwcnt;
  row DMVc DMrw;
  Integer hcnt;
  String 5 langcode;
  Boolean hitf;
  
  res = false;
  hcnt = 0;
  langcode = langcod2;
  if (nonblank(langcode)) then begin
    hitf = false;
    rwcnt = MatRowCnt(DMr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(DMr,i,DMrw);
      if (langcode==DMrw.LangCode) then begin
        hitf = true;
      end;
    end;
    if (hitf==false) then begin
      langcode = "";
    end;
  end;
  resstr = deftext;
  if (blank(langcode)) then begin 
    hcnt = hcnt + 1; 
  end;
  if ((hcnt==1) and (tnr==1)) then begin
    res = true;
  end else begin
    rwcnt = MatRowCnt(DMr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(DMr,i,DMrw);
      if (langcode==DMrw.LangCode) then begin
        hcnt = hcnt + 1;
        if (hcnt==tnr) then begin
          resstr = DMrw.Text;
          res = true;
          i = rwcnt;
        end;
      end;
    end;
  end;
  GetShipModeStr = res;   
  return;
end;

global
procedure GetShipModeText(string a,string langcode,var string res)
BEGIN
  record DMVc DMr;
  
  res = "";
  DMr.Code = a;
  if (ReadFirstMain(DMr,1,true)) then begin
    if (GetShipModeStr(DMr,1,langcode,DMr.Comment,res)) then begin
    end;
  end;
  RETURN;
END;

global
procedure GetShipDealText(string a,string langcode,var string res)
BEGIN
  record ShipDealVc ShipDealr;
  
  res = "";
  ShipDealr.Code = a;
  if (ReadFirstMain(ShipDealr,1,true)) then begin
    if (GetShipModeStr(ShipDealr,1,langcode,ShipDealr.Comment,res)) then begin
    end;
  end;
  RETURN;
END;

function Boolean GetPayDealStr(record PDVc PDr,Integer tnr,string langcod2,string deftext,var string resstr)
begin
  Boolean res;
  Integer i,rwcnt;
  row PDVc PDrw;
  Integer hcnt;
  String 5 langcode;
  Boolean hitf;
  
  res = false;
  hcnt = 0;
  langcode = langcod2;
  if (nonblank(langcode)) then begin
    hitf = false;
    rwcnt = MatRowCnt(PDr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PDr,i,PDrw);
      if (langcode==PDrw.LangCode) then begin
        hitf = true;
      end;
    end;
    if (hitf==false) then begin
      langcode = "";
    end;
  end;
  resstr = deftext;
  if (blank(langcode)) then begin 
    hcnt = hcnt + 1; 
  end;
  if ((hcnt==1) and (tnr==1)) then begin
    res = true;
  end else begin
    rwcnt = MatRowCnt(PDr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PDr,i,PDrw);
      if (langcode==PDrw.LangCode) then begin
        hcnt = hcnt + 1;
        if (hcnt==tnr) then begin
          resstr = PDrw.Text;
          res = true;
          i = rwcnt;
        end;
      end;
    end;
  end;
  GetPayDealStr = res;   
  return;
end;

global
procedure GetInterestPrc(var string res)
BEGIN
  record IIBlock IIRec;
  
  BlockLoad(IIRec);
  res = IIRec.IntRate; 
  RETURN;
END;

global
procedure GetUnitStr(string ac,string langcode,var string res)
BEGIN
  record INVc INr;
  record UnitVc UNr;
  row UnitVc UNrw;
  Integer rwcnt,i;
 
  res = ""; 
  INr.Code = ac;
  if (ReadFirstMain(INr,1,true)) then begin
    if (nonblank(langcode)) then begin
      UNr.Code = INr.Unittext;
      if (ReadFirstMain(UNr,1,true)) then begin
        rwcnt = MatRowCnt(UNr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(UNr,i,UNrw);
          if (UNrw.LangCode==langcode) then begin
             res = UNrw.Text;
             goto LGetUnitStr;
          end;      
        end;
      end; 
    end;   
    res = INr.Unittext;
  end;  
LGetUnitStr:;  
  RETURN;
END;

global
procedure BuildKSerno(LongInt serno,string itemcode,var string res)
begin
  string 255 tstr;
  
  res = "";
  tstr = serno;
  if ((Mid(itemcode,0,1)=="K") or (Mid(itemcode,0,1)=="k")) then begin
    res = "K-";
  end;  
  res = res & tstr;
  return;
end;

function Integer Get3Val(string tstr,Integer pos)
begin
  Integer res;
  Integer i,l;
  Integer sp;
  string 255 astr;
  Integer al;

  al = 0;
  l = len(tstr);
  sp = l - pos + 1;
  for (i=0;i<3;i=i+1) begin
    if (((i+sp)>=1) and ((i+sp)<=l)) then begin
      astr = astr & Mid(tstr,i+sp-1,1);//astr[++al] = tstr[i+sp];
      al = al + 1;
    end;
  end;
  astr = Left(astr,al);
  res = StringToInt(astr);
  Get3Val = res;
  return;
end;

procedure GetMinorCurncyName(Integer decval,Integer specialcur,Integer russdten,Integer russdone,string minorcurtext,string minorcurtext1,
                             string minorcurtext2,var string res)
BEGIN
  switch (specialcur) begin
    case 1:
      res = minorcurtext2;
      if ((russdten>10) and (russdten<20)) then begin
        res = minorcurtext2;
      end else begin
        switch (russdone) begin
          case 1:
            res = minorcurtext;
          case 2:
            res = minorcurtext1;
          case 3: 
            res = minorcurtext1;
          case 4:
            res = minorcurtext1;
          otherwise
            res = minorcurtext2;
        end;        
      end;
    otherwise
      if (decval==1) then begin
        res = minorcurtext;
      end else begin
        if (decval>=2 and decval<=4) then begin
          res = minorcurtext1;
        end else begin
          res = minorcurtext2;
        end;
      end;
  end;
  RETURN;
END;

procedure GetCurncyValueInTextName(Integer specialcur,Integer russten,Integer russone,string curtext,string curtext1,
                                   string curtext2,var string res)
BEGIN
  res = "";
  switch (specialcur) begin
    case 0:
      res = curtext2;
      switch (russone) begin
        case 1:
          res = curtext; 
        case 2:
          res = curtext1;
        case 3: 
          res = curtext1;
        case 4:
          res = curtext1;
        otherwise
          res = curtext2; 
      end;                
    case 1:
      res = curtext2;
      if ((russten>10) and (russten<20)) then begin
        res = curtext2;
      end else begin
        switch (russone) begin
          case 1:
            res = curtext; 
          case 2:
            res = curtext1;
          case 3: 
            res = curtext1;
          case 4:
            res = curtext1;
          otherwise
            res = curtext2; 
        end;        
    end;
  end;  
  RETURN;
END;

procedure GlobalRus999(record LangNrVc LangNrr,Integer n,Integer kind,var string res,Integer curgender)
BEGIN
  row LangNrVc LNrw; 
  Integer a,b,c,temp;
  Integer rwcnt;
  string 255 tstr;
  Boolean testf;
  
  a = (n/100)*100;
  b = ((n-a)/10)*10;
  c = (n-a-b);
  rwcnt = MatRowCnt(LangNrr);
  res = "";
  if (a>=100) then begin
    temp = a/100;
    switch(temp) begin
      case 1: res = res & LangNrr.Houn1; 
      case 2: res = res & LangNrr.Houn2; 
      case 3: res = res & LangNrr.Houn3; 
      case 4: res = res & LangNrr.Houn4; 
      case 5: res = res & LangNrr.Houn5; 
      case 6: res = res & LangNrr.Houn6; 
      case 7: res = res & LangNrr.Houn7; 
      case 8: res = res & LangNrr.Houn8; 
      case 9: res = res & LangNrr.Houn9; 
    end;
  end;
  temp = b + c;
  if ((temp>=1) and (temp<=99)) then begin
    if (a>=100) then begin
      res = res & " ";
      res = res & LangNrr.MainPart;
    end;
    if (kind==-1) then begin
      res = res & " ";
      res = res & LangNrr.DeciPart;
    end;
    if (rwcnt>=temp) then begin
      MatRowGet(LangNrr,temp-1,LNrw);
      if (nonblank(res)) then begin
        res = res & " ";
      end;  
      if (curgender==0) then begin
        tstr = LNrw.ValText;
      end else begin
        tstr = LNrw.ValTextF;
      end;  
      switch (kind) begin
        case 1:
          tstr = LNrw.ValTextF;
      end;  
      res = res & tstr;
    end;
  end else begin
    if ((kind==-1) and (temp==0)) then begin
      if (nonblank(LangNrr.Zero)) then begin
        res = res & " ";
        res = res & LangNrr.DeciPart;
        res = res & " ";
        res = res & LangNrr.Zero;
      end;
    end;
  end;
  if (kind==1) then begin
    testf = false;
    if (a+b+c==0) then begin
      testf = true;
    end;  
    if ((c==1) and (b!=10)) then begin
      if (nonblank(res)) then begin
        res = res & " ";
      end;  
      res = res & LangNrr.Thou1;
      testf = true;           
    end;
    if ((c>=2) and (c<=4) and (b!=10)) then begin
      if (nonblank(res)) then begin
        res = res & " ";
      end;  
      res = res & LangNrr.Thou4;
      testf = true;           
    end;
    if (testf==false) then begin
      if (nonblank(res)) then begin
        res = res & " ";
      end;  
      res = res & LangNrr.Thou9;
    end;
  end;
  if (kind==2) then begin
    testf = false;
    if (a+b+c==0) then begin 
      testf = true;
    end;  
    if ((c==1) and (b!=10)) then begin
      if (nonblank(res)) then begin
        res = res & " ";
      end;  
      res = res & LangNrr.Mill1;
      testf = true;           
    end;
    if ((c>=2) and (c<=4) and (b!=10)) then begin
      if (nonblank(res)) then begin
        res = res & " ";
      end;  
      res = res & LangNrr.Mill4;
      testf = true;           
    end;
    if (testf==false) then begin
      if (nonblank(res)) then begin
        res = res & " ";
      end;  
      res = res & LangNrr.Mill9;
    end;     
  end;
  if (kind==3) then begin
    testf = false;
    if (a+b+c==0) then begin 
      testf = true;
    end;  
    if ((c==1) and (b!=10)) then begin
      if (nonblank(res)) then begin
        res = res & " ";
      end;  
      res = res & LangNrr.Bill1;
      testf = true;           
    end;
    if ((c>=2) and (c<=4) and (b!=10)) then begin
      if (nonblank(res)) then begin
        res = res & " ";
      end;  
      res = res & LangNrr.Bill4;
      testf = true;           
    end;
    if (testf==false) then begin
      if (nonblank(res)) then begin
        res = res & " ";
      end;  
      res = res & LangNrr.Bill9;
    end;      
  end;
  RETURN;
END;

procedure GlobalLit2999(record LangNrVc LangNrr,Integer n,Integer kind,var string res,Integer curgender)
BEGIN
  row LangNrVc LNrw; 
  Integer a,b,c,temp;
  Integer rwcnt;
  string 255 tstr;
  Boolean testf,tenf;
  
  a = (n/100)*100;
  b = ((n-a)/10)*10;
  c = (n-a-b);
  rwcnt = MatRowCnt(LangNrr);
  res = "";
  if (a>=100) then begin
    temp = a/100;
    switch(temp) begin
      case 1: res = res & LangNrr.Houn1;
      case 2: res = res & LangNrr.Houn2;
      case 3: res = res & LangNrr.Houn3;
      case 4: res = res & LangNrr.Houn4;
      case 5: res = res & LangNrr.Houn5;
      case 6: res = res & LangNrr.Houn6;
      case 7: res = res & LangNrr.Houn7;
      case 8: res = res & LangNrr.Houn8;
      case 9: res = res & LangNrr.Houn9;
    end;
  end;
  temp = b + c;
  if ((temp>=1) and (temp<=99)) then begin
    if (a>=100) then begin
      res = res & " ";
      res = res & LangNrr.MainPart;
    end;
    if (kind==-1) then begin
      res = res & " ";
      res = res & LangNrr.DeciPart;
    end;
    if (rwcnt>=temp) then begin
      MatRowGet(LangNrr,temp-1,LNrw);
      if (nonblank(res)) then begin
        res = res & " ";
      end;  
      if (curgender==0) then begin
        tstr = LNrw.ValText;
      end else begin
        tstr = LNrw.ValTextF;
      end;  
      res = res & tstr;
    end;
  end else begin
    if ((kind==-1) and (temp==0)) then begin
      if (nonblank(LangNrr.Zero)) then begin
        res = res & " ";
        res = res & LangNrr.DeciPart;
        res = res & " ";
        res = res & LangNrr.Zero;
      end;
    end;
  end;
  if (kind==1) then begin
    testf = false;
    if (a+b+c==0) then begin 
      testf = true;
    end;  
    if ((c==1) and (b!=10)) then begin
      if (nonblank(res)) then begin
        res = res & " ";
      end;  
      res = res & LangNrr.Thou1;
      testf = true;           
    end;
    if (testf==false) then begin
      if ((c>=2) and (c<=4) and (b!=10)) then begin
        if (nonblank(res)) then begin
          res = res & " ";
        end;  
        res = res & LangNrr.Thou4;
        testf = true;           
      end;    
    end;  
    if (testf==false) then begin
      if ((((b+c)>=11) and ((b+c)<=19)) or ( ((a/100)>0) and ( (((b+c)>=10) and ((b+c)<=19)) or (b+c==0)) ) or (Mod(b+c,10)==0)) then begin
        if (nonblank(res)) then begin
          res = res & " ";
        end;  
        res = res & LangNrr.Thou10;
        testf = true;           
      end;
    end;  
    if (testf==false) then begin
      if (nonblank(res)) then begin
        res = res & " ";
      end;  
      res = res & LangNrr.Thou9;
    end;
  end;
  if (kind==2) then begin
    testf = false;
    if (a+b+c==0) then begin 
      testf = true;
    end;  
    if ((c==1) and (b!=10)) then begin
        if (nonblank(res)) then begin
          res = res & " ";
        end;  
        res = res & LangNrr.Mill1;
        testf = true;           
    end;
    if (testf==false) then begin
      if ((c>=2) and (c<=4) and (b!=10)) then begin
        if (nonblank(res)) then begin
          res = res & " ";
        end;  
        res = res & LangNrr.Mill4;
        testf = true;           
      end;
    end;      
    if (testf==false) then begin
      if ((((b+c)>=11) and ((b+c)<=19)) or  ( ((a/100)>0) and ( (((b+c)>=10) and ((b+c)<=19)) or (b+c==0)) ) or (Mod(b+c,10)==0)) then begin
        if (nonblank(res)) then begin
          res = res & " ";
        end;  
        res = res & LangNrr.Mill10;
        testf = true;           
      end;
    end;  
    if (testf==false) then begin
      if (nonblank(res)) then begin
         res = res & " ";
      end;  
      res = res & LangNrr.Mill9;
    end;  
  end;
  if (kind==3) then begin
    testf = false;
    if (a+b+c==0) then begin 
      testf = true;
    end;  
    if ((c==1) and (b!=10)) then begin
      if (nonblank(res)) then begin
         res = res & " ";
      end;  
      res = res & LangNrr.Bill1;
      testf = true;           
    end;
    if (testf==false) then begin    
      if ((c>=2) and (c<=4) and (b!=10)) then begin
        if (nonblank(res)) then begin
           res = res & " ";
        end;  
        res = res & LangNrr.Bill4;
        testf = true;           
      end;
    end;
    if (testf==false) then begin    
      if ((((b+c)>=11) and ((b+c)<=19)) or  ( ((a/100)>0) and ( (((b+c)>=10) and ((b+c)<=19)) or (b+c==0)) ) or (Mod(b+c,10)==0)) then begin
        if (nonblank(res)) then begin
           res = res & " ";
        end;  
        res = res & LangNrr.Bill10;
        testf = true;           
      end;
    end;  
    if (testf==false) then begin
      if (nonblank(res)) then begin
         res = res & " ";
      end;  
      res = res & LangNrr.Bill9;
    end;      
  end;
  RETURN;
END;

procedure GlobalPOR999(record LangNrVc LangNrr,Integer n,Integer kind,var string res,Integer curgender)
BEGIN

  row LangNrVc LNrw; 
  Integer a,b,c,temp;
  Integer rwcnt;
  string 255 tstr;
  
  a = (n/100)*100;
  b = ((n-a)/10)*10;
  c = (n-a-b);
  rwcnt = MatRowCnt(LangNrr);
  res = "";
  if (a>=100) then begin
    temp = a/100;
    switch(temp) begin
      case 1: 
        tstr = LangNrr.Houn1;
        if ((b==0) and (c==0)) then begin
          if (nonblank(LangNrr.Houn1Single)) then begin
            tstr = LangNrr.Houn1Single;
          end;
        end;
        res = res & tstr;     
      case 2: res = res & LangNrr.Houn2; 
      case 3: res = res & LangNrr.Houn3; 
      case 4: res = res & LangNrr.Houn4; 
      case 5: res = res & LangNrr.Houn5; 
      case 6: res = res & LangNrr.Houn6; 
      case 7: res = res & LangNrr.Houn7; 
      case 8: res = res & LangNrr.Houn8; 
      case 9: res = res & LangNrr.Houn9; 
    end;
  end;
  temp = b + c;
  if ((temp>=1) and (temp<=99)) then begin
    if (a>=100) then begin // We cant solve if it is 20020 it will say Twenty thousand twenty, not Twenty thousand AND twenty
      res = res & " ";
      res = res & LangNrr.MainPart;
    end;
    if (kind==-1) then begin
      res = res & " ";
      res = res & LangNrr.DeciPart;
    end;
    if ((kind!=1) or ((a!=0) or (b!=0) or (c!=1))) then begin
      if (rwcnt>=temp) then begin
        MatRowGet(LangNrr,temp-1,LNrw);
        if (nonblank(res)) then begin
          res = res & " ";
        end;  
        if (curgender==0) then begin
          res = res & LNrw.ValText;
        end else begin
          res = res & LNrw.ValTextF;
        end;  
      end;    
    end;
  end else begin
/* //AP
    if (temp==0) and (Mod(a,100)!=0) then begin    
      switch (kind) begin
        case -1:
          if (nonblank(LangNrr.Zero)) then begin
            res = res & " ";
            res = res & LangNrr.DeciPart;
            res = res & " ";
            res = res & LangNrr.Zero;
          end;
        case 0:
          if (nonblank(LangNrr.Zero)) then begin
            res = res & LangNrr.Zero;
          end;
      end;
    end;
*/  //AP
  end;

  if (kind==1) then begin
    if (a+b+c==1) then begin
      if (nonblank(res)) then begin        
        res = res & " ";
      end;
      res = res & LangNrr.Thou1;
    end else begin
      if ((c>=2) and (c<=4) and (b!=10)) then begin
        if (nonblank(res)) then begin
          res = res & " ";
        end;  
        res = res & LangNrr.Thou4;
      end else begin
        if (a+b+c!=0) then begin
          if (nonblank(res)) then begin
            res = res & " ";
          end;  
          res = res & LangNrr.Thou9;
        end;
      end;
    end;
  end;
  if (kind==2) then begin
    if (a+b+c==1) then begin
      if (nonblank(res)) then begin
        res = res & " ";
      end;  
      res = res & LangNrr.Mill1;
    end else begin
      if ((c>=2) and (c<=4) and (b!=10)) then begin
        if (nonblank(res)) then begin
          res = res & " ";
        end;  
        res = res & LangNrr.Mill4;
      end else begin
        if (a+b+c!=0) then begin
          if (nonblank(res)) then begin
            res = res & " ";
          end;  
          res = res & LangNrr.Mill9;
        end;
      end;
    end;
  end;
  if (kind==3) then begin
//AP
    if (a+b+c==1) then begin
      if (nonblank(res)) then begin
        res = res & " ";
      end;  
      res = res & LangNrr.Bill1;
    end else begin
      if ((c>=2) and (c<=4) and (b!=10)) then begin
        if (nonblank(res)) then begin
          res = res & " ";
        end;  
        res = res & LangNrr.Bill4;
      end else begin
        if (a+b+c!=0) then begin
          if (nonblank(res)) then begin
            res = res & " ";
          end;  
          res = res & LangNrr.Bill9;
        end;
      end;
    end;
  end;
//AP  
  RETURN;
END;

procedure Global999(record LangNrVc LangNrr,Integer n,Integer kind,var string res,Integer curgender,string StrOut)
BEGIN
  row LangNrVc LNrw; 
  Integer a,b,c,temp;
  Integer rwcnt;
  string 255 tstr;
  
  a = (n/100)*100;
  b = ((n-a)/10)*10;
  c = (n-a-b);
  rwcnt = MatRowCnt(LangNrr);
  res = "";
  if (a>=100) then begin
    temp = a/100;
    switch(temp) begin
      case 1: 
        tstr = LangNrr.Houn1;
        if ((b==0) and (c==0)) then begin
          if (nonblank(LangNrr.Houn1Single)) then begin
            tstr = LangNrr.Houn1Single;
          end;
        end;
        res = res & tstr;     
      case 2: res = res & LangNrr.Houn2; 
      case 3: res = res & LangNrr.Houn3; 
      case 4: res = res & LangNrr.Houn4; 
      case 5: res = res & LangNrr.Houn5; 
      case 6: res = res & LangNrr.Houn6; 
      case 7: res = res & LangNrr.Houn7; 
      case 8: res = res & LangNrr.Houn8; 
      case 9: res = res & LangNrr.Houn9; 
    end;
  end;
  temp = b + c;
//StopAlert("a " & a & " b " & b & " c " & c & " temp " & temp);
  if ((temp>=1) and (temp<=99)) then begin
//    if (a>=100) then begin /* We cant solve if it is 20020 it will say Twenty thousand twenty, not Twenty thousand AND twenty */
//StopAlert("StrOut " & StrOut & " temp " & temp & " res " & res & " kind " & kind);
    if (kind!=-1) then begin
      if (nonblank(res) or nonblank(StrOut))then begin//I think we can solve it this way// or (kind==0) 
        res = res & " ";
        res = res & LangNrr.MainPart;
      end;
    end;
//    end;
    if (kind==-1) then begin
      res = res & " ";
      res = res & LangNrr.DeciPart;
    end;
    if (rwcnt>=temp) then begin
      MatRowGet(LangNrr,temp-1,LNrw);
      if (nonblank(res)) then begin
        res = res & " ";
      end;  
      if (curgender==0) then begin
        res = res & LNrw.ValText;
      end else begin
        res = res & LNrw.ValTextF;
      end;  
    end;
  end else begin
    if (temp==0) and ((Mod(a,100)!=0))  then begin    //or (a==0) is zero needed here ?, for exmple 42000?    
      switch (kind) begin
        case -1:
          if (nonblank(LangNrr.Zero)) then begin
            res = res & " ";
            res = res & LangNrr.DeciPart;
            res = res & " ";
            res = res & LangNrr.Zero;
          end;
        case 0:
          if (nonblank(LangNrr.Zero)) then begin
            res = res & LangNrr.Zero;
          end;
      end;
    end else begin
      switch (kind) begin
        case -1:
          if (nonblank(LangNrr.Zero)) then begin
            res = res & " ";
            res = res & LangNrr.DeciPart;
            res = res & " ";
            res = res & LangNrr.Zero;
          end;
      end;
    end;
  end;
  if (kind==1) then begin
    if (a+b+c==1) then begin
      if (nonblank(res)) then begin
        res = res & " ";
      end;
      res = res & LangNrr.Thou1;
    end else begin
      if ((c>=2) and (c<=4) and (b!=10)) then begin
        if (nonblank(res)) then begin
          res = res & " ";
        end;  
        res = res & LangNrr.Thou4;
      end else begin
        if (a+b+c!=0) then begin
          if (nonblank(res)) then begin
            res = res & " ";
          end;  
          res = res & LangNrr.Thou9;
        end;
      end;
    end;
  end;
  if (kind==2) then begin
    if (a+b+c==1) then begin
      if (nonblank(res)) then begin
        res = res & " ";
      end;  
      res = res & LangNrr.Mill1;
    end else begin
      if ((c>=2) and (c<=4) and (b!=10)) then begin
        if (nonblank(res)) then begin
          res = res & " ";
        end;  
        res = res & LangNrr.Mill4;
      end else begin
        if (a+b+c!=0) then begin
          if (nonblank(res)) then begin
            res = res & " ";
          end;  
          res = res & LangNrr.Mill9;
        end;
      end;
    end;
  end;
  if (kind==3) then begin
    if (a+b+c==1) then begin
      if (nonblank(res)) then begin
        res = res & " ";
      end;  
      res = res & LangNrr.Bill1;
    end else begin
      if ((c>=2) and (c<=4) and (b!=10)) then begin
        if (nonblank(res)) then begin
          res = res & " ";
        end;  
        res = res & LangNrr.Bill4;
      end else begin
        if (a+b+c!=0) then begin
          if (nonblank(res)) then begin
            res = res & " ";
          end;  
          res = res & LangNrr.Bill9;
        end;
      end;
    end;
  end;
  RETURN;
END;

procedure GlobalValToText(record LangNrVc LangNrr,string curcode,Integer curgender,Integer minorcurgender,string curtext,string curtext1,
                          string curtext2,string minorcurtext,string minorcurtext1,string minorcurtext2,val np,var string StrOut,
                          string curncy,string lang,Boolean forced,Boolean nodec,Integer CutDecimals)
BEGIN
  string 255 tempstr;
  string 2 t2;
  Integer bilval;
  Integer milval;
  Integer thuval;
  Integer oneval;
  Integer decval;
  Boolean otsepf;
  Integer curcodever;
  Integer specialcur,subtrahend;
  Integer russone,russten,russdone,russdten;
//  Integer vatRussian,vatLithuanian,vatUkrainian;
  record SysFormatBlock SysFormatRec;
  roundmode rnd;
  
  BlockLoad(SysFormatRec);
//  vatRussian = 32;
//  vatUkrainian = 45;//vg
//  vatLithuanian = 24;  
  specialcur = 0;
  StrOut = "";
//  if (((strPCeq(curcode,"RUB")) or (strPCeq(curcode,"RUR")) or (blankstrp(curcode))) and (GetVATLaw()==vatRussian)) then
//    specialcur =  1;
/*not needed very likely*/
    
  if (HasLocalization("RUS,UKR")) then begin
    specialcur =  1;
  end;  
  if (HasLocalization("LTU")) then begin
//    LithuanianValToText(LangNrr,np,StrOut,curcode);
//    goto L88;
/*not needed very likely*/
    specialcur =  2;
  end;
  if (LangNrr.LangCode=="POR") then begin
    specialcur = 3;
  end;
  if (LangNrr.LangCode=="VIE") then begin
    specialcur = 4;
  end;
  curcodever = LangNrr.CurCodeVer;
  if (forced) then begin
    curcodever = 1;
  end;  
  rnd = DefaultValRoundoff;
  subtrahend = 2;
  if (rnd.decimals==0) then begin
    subtrahend = 3;
  end;
  tempstr = ValToString(np,M4Val,"",SysFormatRec.decimalPt,0);      
  bilval = Get3Val(tempstr,15+(rnd.decimals-subtrahend));
  milval = Get3Val(tempstr,12+(rnd.decimals-subtrahend));
  thuval = Get3Val(tempstr,9+(rnd.decimals-subtrahend));
  oneval = Get3Val(tempstr,6+(rnd.decimals-subtrahend));
  decval = Get3Val(tempstr,2+(rnd.decimals-subtrahend));
  russten = Get3Val(tempstr,5+(rnd.decimals-subtrahend));
  russone = Get3Val(tempstr,4+(rnd.decimals-subtrahend));
  russdten = Get3Val(tempstr,2+(rnd.decimals-subtrahend));
  russdone = Get3Val(tempstr,1+(rnd.decimals-subtrahend));
  if (curcodever==1) then begin
    StrOut = curtext;
    StrOut = StrOut & " ";
  end;
  if (bilval!=0) then begin
    goto Lbv;
  end;   
  if (milval!=0) then begin
    goto Lmv;
  end;  
  if (thuval!=0) then begin
    goto Ltv;
  end;  
Lbv:
  switch (specialcur) begin
    case 4: GlobalVIE999(LangNrr,bilval,3,tempstr,curgender,StrOut);
    case 3: GlobalPOR999(LangNrr,bilval,3,tempstr,curgender);
    case 2: GlobalLit2999(LangNrr,bilval,3,tempstr,curgender);
    case 1: GlobalRus999(LangNrr,bilval,3,tempstr,curgender);
    otherwise  Global999(LangNrr,bilval,3,tempstr,curgender,StrOut);
  end;
  if ((np!=1000) and (np!=1000000)) then begin    
    StrOut = StrOut & tempstr;
  end;
  if (nonblank(StrOut)) then begin
    StrOut = StrOut & " ";
  end;  
Lmv:
  switch (specialcur) begin
    case 4: GlobalVIE999(LangNrr,milval,2,tempstr,curgender,StrOut);
    case 3: GlobalPOR999(LangNrr,milval,2,tempstr,curgender);
    case 2: GlobalLit2999(LangNrr,milval,2,tempstr,curgender);
    case 1: GlobalRus999(LangNrr,milval,2,tempstr,curgender);
    otherwise Global999(LangNrr,milval,2,tempstr,curgender,StrOut);
  end;
  StrOut = StrOut & tempstr;
  if (nonblank(StrOut)) then begin
    StrOut = StrOut & " ";
  end;  
Ltv:

  switch (specialcur) begin
    case 4: GlobalVIE999(LangNrr,thuval,1,tempstr,curgender,StrOut);
    case 3: GlobalPOR999(LangNrr,thuval,1,tempstr,curgender);
    case 2: GlobalLit2999(LangNrr,thuval,1,tempstr,curgender);
    case 1: GlobalRus999(LangNrr,thuval,1,tempstr,curgender);
    otherwise  Global999(LangNrr,thuval,1,tempstr,curgender,StrOut);
  end;
  StrOut = StrOut & tempstr;
  if (nonblank(StrOut)) then begin
    StrOut = StrOut & " ";
  end;  
Lov:
  switch (specialcur) begin
    case 4: GlobalVIE999(LangNrr,oneval,0,tempstr,curgender,StrOut);
    case 3: GlobalPOR999(LangNrr,oneval,0,tempstr,curgender);
    case 2: GlobalLit2999(LangNrr,oneval,0,tempstr,curgender);
    case 1: GlobalRus999(LangNrr,oneval,0,tempstr,curgender);
    otherwise  Global999(LangNrr,oneval,0,tempstr,curgender,StrOut);
  end;
  if (blank(tempstr)) then begin
    if (np==0) then begin
      tempstr = LangNrr.Zero;
    end;
  end;
//StopAlert("StrOut " & StrOut & " tempstr " & tempstr);  
  StrOut = StrOut & tempstr;
  if (curcodever==0) then begin
    StrOut = StrOut & " ";
    GetCurncyValueInTextName(specialcur,russten,russone,curtext,curtext1,curtext2,tempstr);      
    if (blank(tempstr)) then begin    
      tempstr = curtext; 
    end;
    StrOut = StrOut & tempstr;
  end;
  tempstr = "";  

  if ((nodec==false) or (decval>0)) and (CutDecimals==0) then begin // can't change this, it will then change for all, check the nodec checkbox
    if (LangNrr.MinorInText==0) then begin
      StrOut = StrOut & " ";
      StrOut = StrOut & LangNrr.DeciPart;
      tempstr = decval;
      StrOut = StrOut & " ";
//      if (specialcur>0) then begin//should be OK for others, if not we need to add latvian here
        if ((decval>=0) and (decval<9)) then begin
          StrOut = StrOut & "0";
        end;
//      end;
      StrOut = StrOut & tempstr;
    end else begin
      switch (specialcur) begin      
        case 4: GlobalVIE999(LangNrr,decval,-1,tempstr,curgender,StrOut);
        case 3: GlobalPOR999(LangNrr,decval,-1,tempstr,curgender);
        case 1: GlobalRus999(LangNrr,decval,-1,tempstr,minorcurgender);
        otherwise  Global999(LangNrr,decval,-1,tempstr,minorcurgender,StrOut);
      end;
      StrOut = StrOut & tempstr;
    end;
    StrOut = StrOut & " ";    
    tempstr = minorcurtext;
    switch (russdone) begin
      case 1:
        tempstr = minorcurtext;
      case 2:
        tempstr = minorcurtext1;
      case 3: 
        tempstr = minorcurtext1;
      case 4:
        tempstr = minorcurtext1;
      otherwise
        tempstr = minorcurtext2;
    end;            
    GetMinorCurncyName(decval,specialcur,russdten,russdone,minorcurtext,minorcurtext1,minorcurtext2,tempstr);      
    if ((specialcur == 3) and (decval == 0)) then begin
      tempstr = "";
    end; 
    StrOut = StrOut & tempstr;
  end;
  StrOut = StrOut & " ";
  StrOut = StrOut & LangNrr.EndText;
L88GlobalValToText:;
  t2 = Left(StrOut,1);
  tempstr = Right(StrOut,len(StrOut)-1);
  StrOut = UpperCase(t2) & tempstr;
LGlobalValToText:;
  RETURN;
END;

global
procedure ValToText(val p,Integer t,string curncy,string lang,var string res)
BEGIN
  record LangNrVc LangNrr;
  record CurncyCodeVc ccr;
  record BaseCurBlock bcr;
  record UserVc Userr;
  record CYBlock cyr;
  val lp;
  Boolean forced;
  Boolean nodecs;
  row CurncyCodeVc ccrw;
  Integer rwcnt,i;
  Integer curgender,minorcurgender;
  string 255 curtext,curtext1,curtext2,minorcurtext,minorcurtext1,minorcurtext2;

  if (p<0) then begin
    lp = -p;
  end else begin
    lp = p;
  end;
  BlockLoad(cyr);
  BlockLoad(bcr);
  RecordClear(LangNrr);
  RecordClear(ccr);
  res = "";
  ccr.CurncyCode = curncy;
  if (ReadFirstMain(ccr,1,true)==false) then begin
    ccr.CurncyCode = bcr.BaseCur1;
    if (ReadFirstMain(ccr,1,true)==false) then begin
      ccr.CurText = "";
      ccr.MinorCurText = "";
    end;
  end;
  LangNrr.LangCode = lang;
  if (ReadFirstMain(LangNrr,1,true)==false) then begin
    GetCurUser(Userr);
    LangNrr.LangCode = Userr.LangCode;
    if (ReadFirstMain(LangNrr,1,true)==false) then begin
      LangNrr.LangCode = cyr.LangCode;
      if (ReadFirstMain(LangNrr,1,true)==false) then begin
        goto LValToText;
      end;
    end;  
  end;

  curgender = ccr.CurGender;
  minorcurgender = ccr.MinorCurGender;
  curtext = ccr.CurText;
  curtext1 = ccr.CurText1;
  curtext2 = ccr.CurText2;
  minorcurtext = ccr.MinorCurText;
  minorcurtext1 = ccr.MinorCurText1;
  minorcurtext2 = ccr.MinorCurText2;

  rwcnt = MatRowCnt(ccr);//should return 0 if currency isn't found
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ccr,i,ccrw);
    if (nonblank(ccrw.LangCode) and ccrw.LangCode==LangNrr.LangCode) then begin
      curgender = ccrw.RowCurGender;
      minorcurgender = ccrw.RowMinorCurGender;
      curtext = ccrw.RowCurText;
      curtext1 = ccrw.RowCurText1;
      curtext2 = ccrw.RowCurText2;
      minorcurtext = ccrw.RowMinorCurText;
      minorcurtext1 = ccrw.RowMinorCurText1;
      minorcurtext2 = ccrw.RowMinorCurText2;
      i = rwcnt;
    end;
  end;

  if (blank(lp)) then begin
    goto LValToText;
  end;  
  if (t==M40Val) then begin
    forced = false;
    nodecs = true;
  end;  
  if (t==M4Val) then begin
    forced = false;
    nodecs = false;
  end;  
  if (t==M4UVal) then begin// Has nothing to do with the actual UVal
    forced = true;
    nodecs = false;
  end;
  if (LangNrr.CutDecimals<>0) then begin
    nodecs = true;
  end;
  GlobalValToText(LangNrr,ccr.CurncyCode,curgender,minorcurgender,curtext,curtext1,curtext2,minorcurtext,minorcurtext1,minorcurtext2,lp,res,curncy,lang,forced,nodecs,LangNrr.CutDecimals);
LValToText:;
  RETURN;
END;

global
procedure PrintValToTextBaseCur(val vp,Integer t,string lang,Integer bcur,var string res)
BEGIN
  record BaseCurBlock BaseCurRec;
  
  BlockLoad(BaseCurRec);
  switch (bcur) begin
    case 1: ValToText(vp,t,BaseCurRec.BaseCur1,lang,res); 
    case 2: ValToText(vp,t,BaseCurRec.BaseCur2,lang,res); 
  end;  
  RETURN;
END;

global
procedure IntToText(string lang,Integer i,var string res)
BEGIN
  record LangNrVc LangNrr;
  record CYBlock cyr;
  string 10 langcode;

  BlockLoad(cyr);  
  
  res = "";
  langcode = "";
  langcode = lang;
  LangNrr.LangCode = langcode;
  if (ReadFirstMain(LangNrr,1,true)==false) then begin
    LangNrr.LangCode = cyr.LangCode;
    if (ReadFirstMain(LangNrr,1,true)==false) then begin goto LIntToText; end;
  end;  
  Global999(LangNrr,i,0,res,0,res); 
LIntToText:;  
  RETURN;
END;

procedure ZeroToText(string lang,var string res)
BEGIN
  record LangNrVc LangNrr;
  record CYBlock cyr;
  string 10 langcode;

  BlockLoad(cyr);
  res = "";
  langcode = lang;
  LangNrr.LangCode = langcode;
  if (ReadFirstMain(LangNrr,1,true)==false) then begin
    LangNrr.LangCode = cyr.LangCode;
    if (ReadFirstMain(LangNrr,1,true)==false) then begin
      goto LZeroToText;
    end;  
  end;
  res = LangNrr.Zero;
LZeroToText:;
  RETURN;
END;

global
procedure Val2ToText(string fldarg,val p,Integer t,string curncy,string lang,var string res)
BEGIN
  val temp;
  string 255 tempstr;
  Integer onepos;
  Integer intval;
  Integer slen;
  record SysFormatBlock SysFormatRec;
  record LangNrVc LangNrr;
  
  GetLangNr(lang,LangNrr);        
  BlockLoad(SysFormatRec);
  res = "";
  if (nonblank(fldarg)) then begin
    tempstr = ValToString(p,t,"",SysFormatRec.decimalPt,0);      
    onepos = StringToInt(fldarg);
    switch (onepos) begin
      case 3:
        intval = Get3Val(tempstr,2);
      otherwise
        slen = len(tempstr);
        if (onepos>slen) then begin
          ZeroToText(lang,res);
          goto LVal2ToText;
        end;
        if (onepos<1) then begin
          goto LVal2ToText;
        end;          
        onepos = slen - onepos;
        intval = asc(Mid(tempstr,onepos,1))-asc("0");
    end;
    temp = intval;
    if (temp==0) then begin
      ZeroToText(lang,res);
    end else begin
      IntToText(lang,intval,res);      
//      ValToText(temp,M40Val,curncy,lang,res);// we don't want pounds, just the number
    end;  
  end else begin
    ValToText(p,t,curncy,lang,res);
     if (nonblank(res)) then begin
//       LowerCase(res);
     end;  
  end;
LVal2ToText:;
  RETURN;
END;
