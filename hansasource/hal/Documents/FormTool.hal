external function roundmode SetRoundModeD(Integer);

global
procedure PrintValue(string fieldname,val vp,Integer typ,record LangNrVc LangNrr,record SysFormatBlock SysFormatRec,Boolean negf)
BEGIN
  string 255 tstr;
  val v;
  
  v = vp;
  if (v!=0) then begin
    if (negf) then begin v = -v; end;
    tstr = ValToString(v,typ,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
    OUTFORMFIELD(fieldname,tstr);  
  end;
  RETURN;
END;

global
procedure PrintFormulaDiscount(string fieldname,string vp,record LangNrVc LangNrr,record SysFormatBlock SFb,Boolean negf)
begin
  string 255 tstr;
  val v;
  
  tstr = vp;
  if (nonblank(v)) then begin
    if (InString(tstr,"+")>=0 or InString(tstr,"*")>=0) then begin
      OutFormField(fieldname,tstr);  
    end else begin
      if (Mid(tstr,len(tstr)-1,1)=="%") then begin
        tstr = Left(tstr,len(tstr)-1);
      end;
      v = EvalToVal(tstr);
      if (negf) then begin v = -v; end;
      PrintValue(fieldname,v,M41Val,LangNrr,SFb,false);
    end;
  end;
  return;
end;

global
function string 255 FormulaDiscountString(string vreb)
begin
  string 255 res;
  val v;

  res = vreb; 
  if (InString(res,"+")>=0 or InString(res,"*")>=0) then begin
    res = vreb;
  end else begin
    if (Mid(res,len(res)-1,1)=="%") then begin
      res = Left(res,len(res)-1);
    end;
    v = EvalToVal(res);
    res = ValToString(v,M41Val,ThousandSeparator,DEcimalSeparator,0);
  end;
  FormulaDiscountString = res;
  return;
end;


global
procedure PrintValueInclZero(string fieldname,val vp,Integer typ,record LangNrVc LangNrr,record SysFormatBlock SFb,Boolean negf)
begin
  string 255 tstr;
  val v;
  
  v = vp;
  if (nonblank(v)) then begin
    if (negf) then begin v = -v; end;
    tstr = ValToString(v,typ,SFb.thousSep,SFb.decimalPt,LangNrr.CutDecimals);
    OUTFORMFIELD(fieldname,tstr);  
  end;
  return;
end;

global
procedure PrintValueInclZeroWithSign(string currency,string fieldname,val vp,Integer typ,record LangNrVc LangNrr,record SysFormatBlock SysFormatRec,Boolean negf)
begin
  string 255 tstr;
  record CurncyCodeVc CurncyCoder;
  val v;
  
  v = vp;
  if (nonblank(v)) then begin
    if (negf) then begin v = -v; end;
    tstr = ValToString(v,typ,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
    CurncyCoder.CurncyCode = currency;
    if ReadFirstMain(CurncyCoder,1,true) then begin 
      if nonblank(CurncyCoder.CurText) then begin 
        tstr = CurncyCoder.CurText & tstr;
      end;
    end;
    OUTFORMFIELD(fieldname,tstr);  
  end;
  return;
end;

global
procedure PrintLongInt(string fieldname,LongInt value)
begin
  if (value!=-1) then begin
    OUTFORMFIELD(fieldname,value);
  end;
  return;
end;

function Boolean srlWOLPrint(record WOVc WOp,string arg1,Boolean orgflag)
BEGIN
  Boolean res;
  Boolean previewf;

  if (orgflag) then begin
    WOp.Prntdf = 0;
  end;  
  if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;      
  if (PrintDocument(WOp,"WOForm",previewf)) then begin
    WOp.Prntdf = 1;
    res = true;
  end;
  srlWOLPrint = res;
  RETURN;
END;

global
updating procedure RecordActionWO_Print(var record WOVc WOp,string arg1,Boolean readf)
BEGIN
  record WOVc oldWOr;
  
  if (readf) then begin
    if (ReadFirstMain(WOp,0,true)) then begin end;  
  end;
  RecordCopy(oldWOr,WOp);
  if (srlWOLPrint(WOp,arg1,false)) then begin
    if (RecordUpdate(oldWOr,WOp,false)==0) then begin
    end;
  end;
  RETURN;
END;

function Boolean srlJobLPrint(record JobVc Jobp,string arg1,string theformcode)
BEGIN
  Boolean res;
  Boolean previewf;
  
  if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;      
  if (PrintDocument(Jobp,theformcode,previewf)) then begin
//    Jobp.Prntdf = 1;
    res = true;
  end;
  srlJobLPrint = res;
  RETURN;
END;

global
updating procedure RecordActionJob_Print(var record JobVc Jobp,string arg1,Boolean readf)
BEGIN
  record JobVc oldJobr;
  
  if (readf) then begin
    if (ReadFirstMain(Jobp,0,true)) then begin end;  
  end;
  RecordCopy(oldJobr,Jobp);
  if (srlJobLPrint(Jobp,arg1,"JobForm")) then begin
    if (RecordUpdate(oldJobr,Jobp,false)==0) then begin
    end;
  end;
  RETURN;
END;

global
updating procedure RecordActionJob1_Print(var record JobVc Jobp,string arg1,Boolean readf)
BEGIN
  record JobVc oldJobr;
  
  if (readf) then begin
    if (ReadFirstMain(Jobp,0,true)) then begin end;  
  end;
  RecordCopy(oldJobr,Jobp);
  if (srlJobLPrint(Jobp,arg1,"Job1Form")) then begin
    if (RecordUpdate(oldJobr,Jobp,false)==0) then begin
    end;
  end;
  RETURN;
END;

global
updating procedure RecordActionJob2_Print(var record JobVc Jobp,string arg1,Boolean readf)
BEGIN
  record JobVc oldJobr;
  
  if (readf) then begin
    if (ReadFirstMain(Jobp,0,true)) then begin end;  
  end;
  RecordCopy(oldJobr,Jobp);
  if (srlJobLPrint(Jobp,arg1,"Job2Form")) then begin
    if (RecordUpdate(oldJobr,Jobp,false)==0) then begin
    end;
  end;
  RETURN;
END;

global
updating procedure RecordActionJob3_Print(var record JobVc Jobp,string arg1,Boolean readf)
BEGIN
  record JobVc oldJobr;
  
  if (readf) then begin
    if (ReadFirstMain(Jobp,0,true)) then begin end;  
  end;
  RecordCopy(oldJobr,Jobp);
  if (srlJobLPrint(Jobp,arg1,"Job3Form")) then begin
    if (RecordUpdate(oldJobr,Jobp,false)==0) then begin
    end;
  end;
  RETURN;
END;

function Boolean srlSVOLPrint(record SVOVc SVOp,string arg1)
BEGIN
  Boolean res;
  Boolean previewf;
  
  if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;      
  if (PrintDocument(SVOp,"SVOForm",previewf)) then begin
//    SVOp.Prntdf = 1;
    res = true;
  end;
  srlSVOLPrint = res;
  RETURN;
END;

global
updating procedure RecordActionSVO_Print(var record SVOVc SVOp,string arg1,Boolean readf)
BEGIN
  record SVOVc oldSVOr;
  
  if (readf) then begin
    if (ReadFirstMain(SVOp,0,true)) then begin end;  
  end;
  RecordCopy(oldSVOr,SVOp);
  if (srlSVOLPrint(SVOp,arg1)) then begin
    if (RecordUpdate(oldSVOr,SVOp,false)==0) then begin
    end;
  end;
  RETURN;
END;

function Boolean srlCustomsLPrint(record CustomsVc Customsp,string arg1)
BEGIN
  Boolean res;
  Boolean previewf;
  
  if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;      
  if (PrintDocument(Customsp,"CustomsForm",previewf)) then begin
    res = true;
  end;
  srlCustomsLPrint = res;
  RETURN;
END;

global
updating procedure RecordActionCustoms_Print(var record CustomsVc Customsp,string arg1,Boolean readf)
BEGIN
  record CustomsVc oldCustomsr;
  
  if (readf) then begin
    if (ReadFirstMain(Customsp,0,true)) then begin end;  
  end;
  RecordCopy(oldCustomsr,Customsp);
  if (srlCustomsLPrint(Customsp,arg1)) then begin
    if (RecordUpdate(oldCustomsr,Customsp,false)==0) then begin
    end;
  end;
  RETURN;
END;

function Boolean srlCourseEventLPrint(record CourseEventVc CourseEventp,string arg1)
begin
  Boolean res;
  Boolean previewf;
  
  if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;      
  if (PrintDocument(CourseEventp,"CourseEventForm",previewf)) then begin
    res = true;
  end;
  srlCourseEventLPrint = res;
  return;
end;

global
updating procedure RecordActionCourseEvent_Print(var record CourseEventVc CourseEventp,string arg1,Boolean readf)
begin
  record CourseEventVc oldCourseEventp;
  
  if (readf) then begin
    if (ReadFirstMain(CourseEventp,0,true)) then begin end;  
  end;
  RecordCopy(oldCourseEventp,CourseEventp);
  if (srlCourseEventLPrint(CourseEventp,arg1)) then begin
//    if (RecordUpdate(oldCourseEventp,CourseEventp,false)==0) then begin
//    end;
  end;
  return;
end;

function Boolean srlPOQTLPrint(record POQTVc POQTp,string arg1)
BEGIN
  Boolean res;
  Boolean previewf;
  
  if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;      
  if (PrintDocument(POQTp,"POQTForm",previewf)) then begin
    res = true;
  end;
  srlPOQTLPrint = res;
  RETURN;
END;

global
updating procedure RecordActionPOQT_Print(var record POQTVc POQTp,string arg1,Boolean readf)
BEGIN
  record POQTVc oldPOQTr;
  
  if (readf) then begin
    if (ReadFirstMain(POQTp,0,true)) then begin end;  
  end;
  RecordCopy(oldPOQTr,POQTp);
  if (srlPOQTLPrint(POQTp,arg1)) then begin
    if (RecordUpdate(oldPOQTr,POQTp,false)==0) then begin
    end;
  end;
  RETURN;
END;

function Boolean srlIntORLPrint(record IntORVc IntORp,string arg1)
BEGIN
  Boolean res;
  Boolean previewf;
  
  if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;      
  if (PrintDocument(IntORp,"IntORForm",previewf)) then begin
    res = true;
  end;
  srlIntORLPrint = res;
  RETURN;
END;

global
updating procedure RecordActionIntOR_Print(var record IntORVc IntORp,string arg1,Boolean readf)
BEGIN
  record IntORVc oldIntORr;
  
  if (readf) then begin
    if (ReadFirstMain(IntORp,0,true)) then begin end;  
  end;
  RecordCopy(oldIntORr,IntORp);
  if (srlIntORLPrint(IntORp,arg1)) then begin
    if (RecordUpdate(oldIntORr,IntORp,false)==0) then begin
    end;
  end;
  RETURN;
END;

function Boolean srlPOLPrint(var record POVc POp,string arg1)
BEGIN
  Boolean res;
  Boolean previewf;
  string 20 repname;
  
  repname = "POForm";
  if (nonblank(arg1)) then begin
    if (arg1=="POForm") then begin
      goto L88;
    end;
    if (arg1=="PORemForm") then begin
      repname = "PORemForm";
      goto L88;
    end;
    if (arg1=="POConfForm") then begin
      repname = "POConfForm";
      goto L88;
    end;
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
L88:;
  end;  
  if (PrintDocument(POp,repname,previewf)) then begin
    POp.Printdf = 1;
    res = true;
  end;
  srlPOLPrint = res;
  RETURN;
END;

global
updating procedure RecordActionPO_Print(var record POVc POp,string arg1,Boolean readf)
BEGIN
  record POVc oldPOr;
  
  if (readf) then begin
    if (ReadFirstMain(POp,0,true)) then begin end;  
  end;
  RecordCopy(oldPOr,POp);
  if (srlPOLPrint(POp,arg1)) then begin
    if (RecordUpdate(oldPOr,POp,false)==0) then begin
    end;
  end;
  RETURN;
END;

function Boolean srlOwnCheckLPrint(var record OwnCheckVc OwnCheckp,string arg1)
BEGIN
  Boolean res;
  Boolean previewf;

 if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;      
  if (PrintDocument(OwnCheckp,"OwnChkForm",previewf)) then begin
    res = true;
  end;   
  srlOwnCheckLPrint = res;
  RETURN;
END;


global
procedure RecordActionOwnCheck_Print(var record OwnCheckVc OwnCheckp,string arg1,Boolean readf)
BEGIN  
  if (readf) then begin
    if (ReadFirstMain(OwnCheckp,0,true)) then begin end;  
  end;
  if (srlOwnCheckLPrint(OwnCheckp,arg1)) then begin
  end;
  RETURN;
END;

function Boolean srlQTLPrint(var record QTVc QTp,string arg1)
BEGIN
  Boolean res;
  Boolean previewf;

 if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;      
  if (PrintDocument(QTp,"QTForm",previewf)) then begin
    res = true;
  end;   
  srlQTLPrint = res;
  RETURN;
END;


global
updating procedure RecordActionQT_Print(var record QTVc QTp,string arg1,Boolean readf)
BEGIN
  record QTVc oldQTr;
  
  if (readf) then begin
    if (ReadFirstMain(QTp,0,true)) then begin end;  
  end;
  RecordCopy(oldQTr,QTp);
  if (srlQTLPrint(QTp,arg1)) then begin
    if (RecordUpdate(oldQTr,QTp,false)==0) then begin
    end;
  end;
  return;
end;

function Boolean srlOYLPrint(var record OYVc OYp,string arg1)
begin
  Boolean res;
  Boolean previewf;

 if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;      
  if (PrintDocument(OYp,"OYForm",previewf)) then begin
    res = true;
  end;   
  srlOYLPrint = res;
  return;
end;

global
updating procedure RecordActionOY_Print(var record OYVc OYp,string arg1,Boolean readf)
begin
  record OYVc oldOYr;
  
  if (readf) then begin
    if (ReadFirstMain(OYp,0,true)) then begin end;  
  end;
  RecordCopy(oldOYr,OYp);
  if (srlOYLPrint(OYp,arg1)) then begin
    if (RecordUpdate(oldOYr,OYp,false)==0) then begin
    end;
  end;
  return;
end;

function Boolean srlSHLPrint(var record SHVc SHp,string arg1)
BEGIN
  Boolean res,testf;
  Boolean previewf;
  string 20 repname;

 if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;
  testf = true;    
  if (HasLocalization("PRT")) then begin
    if (SHp.OKFlag==0) then begin
      testf = false;
      MessageBox(23637,"");
    end;
  end;
  if (testf) then begin  
    if (SHp.OKFlag!=0) then begin
      repname = "Sh1Form";
    end else begin
      repname = "Sh2Form";
    end;    
    if (PrintDocument(SHp,repname,previewf)) then begin
      if (previewf==false) then begin
        if (SHp.Prntdf==0) then begin
          res = true;
        end;  
        SHp.Prntdf = 1;
      end;
    end;   
  end;
  srlSHLPrint = res;
  RETURN;
END;

global
updating procedure SetStockMovPrntdf(record StockMovVc SMr)
begin
  record StockMovVc oldSMr;

  if (ReadFirstMain(SMr,1,true)) then begin
    RecordCopy(oldSMr,SMr);
    SMr.Prntdf = 1;
    if (RecordUpdate(oldSMr,SMr,false)==0) then begin
    end;
  end;
  return;
end;

global
updating procedure SetAgreementPrntdf(LongInt sernr)
begin
  record AgreementVc Agreementr;
  record AgreementVc oldAgreementr;
  Integer err;

  Agreementr.SerNr = sernr;
  if (ReadFirstMain(Agreementr,1,true)) then begin
    if (Agreementr.Prntdf==0) then begin
      RecordCopy(oldAgreementr,Agreementr);
      Agreementr.Prntdf = 1;
      err = RecordUpdate(oldAgreementr,Agreementr,false);
    end;
  end;
  return;
end;

global
updating procedure RecordActionSH_Print(var record SHVc SHp,string arg1,Boolean readf,Integer onlyunpr)
BEGIN
  record SHVc oldSHr;
  
  if (readf) then begin
    if (ReadFirstMain(SHp,0,true)) then begin end;  
  end;
  RecordCopy(oldSHr,SHp);
  if (onlyunpr==2) then begin
    SHp.Prntdf = 0;
  end;
  if (srlSHLPrint(SHp,arg1)) then begin
    if (RecordUpdate(oldSHr,SHp,false)==0) then begin
    end;
  end;
  RETURN;
END;

function Boolean acFLabLPrint(record SHVc SHp)
BEGIN
  Boolean res;
  record AutoActionBlock AutoActionRec;
  record RcVc RepSpec;

  res = true;
  BlockLoad(AutoActionRec);
  RepSpec.Media = mtPrinter;
  RepSpec.f1 = SHp.SerNr;
  RepSpec.ArtMode = AutoActionRec.FreightPrinting - 1;
  RepSpec.repname = "SHLabForm";
  res = PrintDocument(RepSpec,"SHLabForm",false);
  acFLabLPrint = res;
  RETURN;
END;

global
updating procedure RecordActionSH_rlFLabLPrint(var record SHVc SHp)
BEGIN
  record SHVc oldSHr;
  
  RecordCopy(oldSHr,SHp);
  if (acFLabLPrint(SHp)) then begin
    if (RecordUpdate(oldSHr,SHp,false)==0) then begin
    end;
  end;
  RETURN;
END;

global
function Boolean PRTransAvail(record RcVc RepSpec,string prcode,Date sdp,Date edp)
begin
  Boolean res,found,testf;
  record PErsVc PErsr;
  record TSVc TSr;
  row TSVc TSrw;
  Integer i,rwcnt;

  PErsr.Date = sdp;
  PErsr.TSSerNr = -1;
  found = true;
  while (LoopMain(PErsr,3,found)) begin
    if (found) then begin
      testf = true;
      if (PErsr.FileName!="TSVc") then begin testf = false; end;
      if ((nonblankdate(sdp)) and (PErsr.Date<sdp)) then begin testf = false; end;
      if ((nonblankdate(edp)) and (PErsr.Date>edp)) then begin testf = false; end;
      if (PErsr.PRCode!=prcode) then begin testf = false; end;
    end;
    if (testf) then begin
      TSr.SerNr = PErsr.TSSerNr;
      if (ReadFirstMain(TSr,1,true)) then begin
        rwcnt = MatRowCnt(TSr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(TSr,i,TSrw);
          if ((TSrw.EMCode==PErsr.Person) and (TSrw.date==PErsr.Date)) then begin
            if ((blank(RepSpec.f2)) or (TSrw.PRCode==RepSpec.f2)) then begin
              if ((TSrw.ArtCode==PErsr.Item) and (TSrw.PRCode==PErsr.PRCode)) then begin
                res = true;
                goto LPRTransAvail;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
LPRTransAvail:;  
  PRTransAvail = res;
  RETURN;
END;

function Boolean srlCOLPrint(record COVc COp,string arg1,Boolean readf)
BEGIN
  Boolean res;
  Boolean previewf;
  
  if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;  
  if (readf) then begin
    if (ReadFirstMain(COp,0,true)) then begin end;  
  end;      
  if (PrintDocument(COp,"ContractForm",previewf)) then begin
    res = true;
  end;
  srlCOLPrint = res;
  RETURN;
END;

global
procedure RecordActionCO_Print(var record COVc COp,string arg1,Boolean readf)
BEGIN
  if (srlCOLPrint(COp,arg1,readf)) then begin
  end;
  RETURN;
END;

function Boolean srlPrelPULPrint(record PrelPUVc PrelPUp,string arg1)
BEGIN
  Boolean res;
  Boolean previewf;
  
  if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;      
  if (PrintDocument(PrelPUp,"PrelPUForm",previewf)) then begin
    res = true;
  end;
  srlPrelPULPrint = res;
  RETURN;
END;

global
procedure RecordActionPrelPU_Print(var record PrelPUVc PrelPUp,string arg1)
BEGIN
  if (ReadFirstMain(PrelPUp,0,true)) then begin end;  
  if (srlPrelPULPrint(PrelPUp,arg1)) then begin
  end;
  RETURN;
END;

function Boolean srlWSLPrint(record WSVc WSp,string arg1)
BEGIN
  Boolean res;
  Boolean previewf;
  
  if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;      
  if (PrintDocument(WSp,"WSForm",previewf)) then begin
    res = true;
  end;
  srlWSLPrint = res;
  RETURN;
END;

global
procedure RecordActionWS_Print(var record WSVc WSp,string arg1)
BEGIN
  if (ReadFirstMain(WSp,0,true)) then begin end;  
  if (srlWSLPrint(WSp,arg1)) then begin
  end;
  RETURN;
END;

function Boolean srlPRLPrint(record PRVc PRp,string arg1)
BEGIN
  Boolean res;
  Boolean previewf;
  
  if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;      
  if (PrintDocument(PRp,"ProjectInfoForm",previewf)) then begin
    res = true;
  end;
  srlPRLPrint = res;
  RETURN;
END;

global
procedure RecordActionPR_Print(var record PRVc PRp,string arg1)
BEGIN
  if (ReadFirstMain(PRp,0,true)) then begin end;  
  if (srlPRLPrint(PRp,arg1)) then begin
  end;
  RETURN;
END;

function Boolean srlTSLPrint(record TSVc TSp,string arg1)
BEGIN
  Boolean res;
  Boolean previewf;
  
  if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;      
  if (PrintDocument(TSp,"TimeSheetForm",previewf)) then begin
    res = true;
  end;
  srlTSLPrint = res;
  RETURN;
END;

global
procedure RecordActionTS_Print(var record TSVc TSp,string arg1)
BEGIN
  if (ReadFirstMain(TSp,0,true)) then begin end;  
  if (srlTSLPrint(TSp,arg1)) then begin
  end;
  RETURN;
END;

function Boolean srlPOCOLPrint(record POCOVc POCOp,string arg1)
BEGIN
  Boolean res;
  Boolean previewf;
  
  if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;      
  if (ReadFirstMain(POCOp,0,true)) then begin end;  
  if (PrintDocument(POCOp,"POCOForm",previewf)) then begin
    res = true;
  end;
  srlPOCOLPrint = res;
  RETURN;
END;

global
procedure RecordActionPOCO_Print(var record POCOVc POCOp,string arg1)
BEGIN
  if (srlPOCOLPrint(POCOp,arg1)) then begin
  end;
  RETURN;
END;

global
procedure RecordActionTBBU_Print(var record TBBUVc TBBUp,string arg1)
BEGIN  
  Boolean previewf;
  
  if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;  
  if (ReadFirstMain(TBBUp,0,true)) then begin end;        
  if (PrintDocument(TBBUp,"TBBudgetForm",previewf)) then begin end;
  RETURN;
END;

global
procedure SetRowStyle(record Docvc Docr,string filename,Integer rowtype,string itemcode,val sum)
begin
  switch (rowtype) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkInvoiceRowTypeNormal;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal:;      
      if ((nonblank(itemcode)) or (sum!=0)) then begin
        if (nonblank(Docr.ItemlineStyle)) then begin
          SetFormStyle(Docr.ItemlineStyle,Docr.ItemlineHeight);
        end;
      end else begin
        if (nonblank(Docr.DescriptionStyle)) then begin
          SetFormStyle(Docr.DescriptionStyle,Docr.DescriptionHeight);
        end;
      end;
    case kInvoiceRowTypeCredit:
      if (nonblank(Docr.CreditInvStyle)) then begin
        SetFormStyle(Docr.CreditInvStyle,Docr.CreditInvHeight);
      end;
    case kInvoiceRowTypeDownpayment:
      if (nonblank(Docr.PrepaymentStyle)) then begin
        SetFormStyle(Docr.PrepaymentStyle,Docr.PrepaymentHeight);
      end;
    case kInvoiceRowTypePrepayment:
      if (nonblank(Docr.PrepaymentStyle)) then begin
        SetFormStyle(Docr.PrepaymentStyle,Docr.PrepaymentHeight);
      end;
    case kInvoiceRowTypeSubtotal:
      if (nonblank(Docr.SubTotalStyle)) then begin
        SetFormStyle(Docr.SubTotalStyle,Docr.SubTotalHeight);
      end;
    case kInvoiceRowTypeHeader:
      if (nonblank(Docr.HeaderStyle)) then begin
        SetFormStyle(Docr.HeaderStyle,Docr.HeaderHeight);
      end;
    case kInvoiceRowTypeWithholdingTax:
      if (nonblank(Docr.WtihholdingStyle)) then begin
        SetFormStyle(Docr.WtihholdingStyle,Docr.WtihholdingHeight);
      end;
    case kInvoiceRowTypeMultiBuyDiscount:
      if (nonblank(Docr.MultiBuyRebStyle)) then begin
        SetFormStyle(Docr.MultiBuyRebStyle,Docr.MultiBuyRebHeight);
      end;
  end;
  return;
end;
