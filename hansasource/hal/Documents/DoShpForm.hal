external function string 255 GetOffSerNrIVJournalID(LongInt,string,string);
external procedure PrintInvoiceToBankData(string,record BankVc,string);
external procedure PrintBankData(string);
external procedure PrintValueInclZero(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external function string 255 SAFTHashControl(string);
external procedure GetCustomsDeclarationNumber(string,LongInt,LongInt,string,string,Integer,var string);
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure SetupVATBase(var record SMVc,var Integer);
external function string 255 GetJwl_CustomerName(string);
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external procedure PrintPersonsCustomerDetails(string);
external procedure OutAddress(string,string,string,string,string,string,string);
external function string 255 GetVarietyComment(string,string);
external function Boolean FindFormcode(Integer,Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure PrintValue(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external procedure GetFieldArgument(record DocVc,Integer,var string);
external procedure SelectUnitText(string,string,var string);
external procedure SetFaxInfo(string,string,string,string);
external procedure SerialNrSDimensions(string,string,var val,var val,var val);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure GetVATdouble(string,var val,var val,Integer);
external function Boolean Getformcode(Integer,Integer,string,string,string,LongInt,LongInt,string,string,Integer,string,var string);
external function Integer NumberofDocumentPages(string,Integer);
external procedure GetLangNr(string,var record LangNrVc);
external procedure CommonDocumentFields(record RcVc);
external procedure IntToText(string,Integer,var string);
external function Integer CountNrofItemsSH(record SHVc);
external procedure RussianPaymentNr(LongInt,var string);
external procedure ValToText(val,Integer,string,string,var string);
external procedure LongDateTimeToStr(Date,var string);
external procedure GetShipModeText(string,string,var string);
external procedure BuildKSerno(LongInt,string,var string);
external procedure GetShipDealText(string,string,var string);
external procedure GetPayDealText(string,string,var string);
external procedure CalcFraktField(LongInt,string,var string);
external procedure GetLocationName(string,var string);
external procedure GetLocationContact(string,var string);
external procedure GetLocationPhone(string,var string);
external procedure GetLocationFax(string,var string);
external procedure GetLocationEmail(string,var string);
external procedure GetLocationAddress(string,Integer,var string);
external procedure Val2ToText(string,val,Integer,string,string,var string);
external procedure GetItemCommodityCode(string,var string);
external procedure GetAlternativeItemCode(string,var string);
external procedure BC39(string,var string);
external procedure ItemBC39(string,var string);
external procedure ItemBCEAN(string,var string);
external procedure ItemBCEAN13(string,var string);
external procedure GetBullet(var string);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure GetDefaultSupplierAddress(string,string,Integer,var string);
external function Boolean GetPurchaseItem(string,string,var record PIVc);
external function Boolean GetVAT2(string,var val,var Integer,Integer);
external function Boolean GetVATincl(string,var val,var Integer);
external function Boolean ExpandStructItem(string,string,val,var record SHVc);
external procedure Mul2VAT(string,val,var val,var val,Integer);
external procedure GetShipValue(record SHVc,record ORVc,var val,var val);

global
procedure PrintFreightPaid(string ShipDeal)
begin
  record ShipDealVc Shipr;
  
  Shipr.Code = ShipDeal;
  if (ReadFirstMain(Shipr,1,true)) then begin
    if (Shipr.FreightPaid==0) then begin
      OUTFORMFIELD("F_WEPAYFREIGHT","X");
      OUTFORMFIELD("F_THEYPAYFREIGHT","");
    end else begin
      OUTFORMFIELD("F_WEPAYFREIGHT","");
      OUTFORMFIELD("F_THEYPAYFREIGHT","X");
    end;
  end;
  return;
end;

global
procedure SetConversionFields(record INVc INr,val qtyp,var val qtyconv1,var val qtyconv2,var val qtyconv3)
BEGIN
  val tmpqty,tmpqty2,tmpqty3;
  LongInt l;
  
  qtyconv1 = blankval;
  qtyconv2 = blankval;
  qtyconv3 = blankval;
  if (INr.Conversion1!=0) then begin
    l = qtyp/INr.Conversion1;
    qtyconv1 = l;
    tmpqty2 = qtyconv1*INr.Conversion1; 
    tmpqty = qtyp - tmpqty2;
    if (INr.Conversion2!=0) then begin
      l = tmpqty/INr.Conversion2;
      qtyconv2 = l;
      tmpqty3 = qtyconv2*INr.Conversion2;
      tmpqty = tmpqty - tmpqty3;
    end;
    qtyconv3 = tmpqty;
  end;
  RETURN;
END;

function
Boolean CheckDigit(string tstr,Integer i)
BEGIN
  Boolean resf;
  Integer a;
  
  a = asc(Mid(tstr,i,1));
  if ((a>=asc("0")) and (a<=asc("9"))) then begin
    resf = true;
  end; 
  CheckDigit = resf;
  RETURN;
END; 

global
procedure SplitAddress(string addr,var string pnr,var string town)
BEGIN
  string 255 t2,tstr;
  Integer i,cp;

  pnr = "";
  tstr = addr;
  cp = 0;
  for (i=0;i<len(tstr);i=i+1) begin
    if (CheckDigit(tstr,i)==false) then begin
      cp = i;
      goto L22;
    end;
  end;
L22:;
  if (cp>0) then begin
    t2 = Left(tstr,cp);
  end else begin
    t2 = " ";
  end;  
  pnr = t2;
  tstr = addr;
  t2 = Right (tstr,len(tstr) - (cp+1));  
  town = t2;  
  RETURN;
END;

procedure SHVat(Integer stp,Integer incvat,Integer NoTAXonVAT,Integer exportflag,string vatcode,val rowsump,
                var val vatprcp,var val vatvalp,var val vatexclprc,var val vatinclprc,var val rowtaxp)
BEGIN
  Integer rn;
  val tax1;
  
  vatprcp = blankval;
  vatvalp = blankval;
  vatexclprc = blankval;
  vatinclprc = blankval;
  rowtaxp = blankval;
  if (stp==1) then begin
    switch (incvat) begin
      case 0:
        if ((exportflag==0) or (exportflag==3) or (exportflag==4)) then begin
//          Mul2VAT(vatcode,rowsump,vatvalp,vatprcp,incvat);
          GetVATdouble(vatcode,vatprcp,tax1,incvat);
          MulVATIV(vatcode,rowsump,vatvalp,rowtaxp,incvat,NoTAXonVAT);
          if (GetVAT2(vatcode,vatexclprc,rn,0)) then begin
          end;
          if (GetVATincl(vatcode,vatinclprc,rn)) then begin
          end;
        end;
        vatprcp = vatexclprc; // We always want to print the excl vat percentage, printing the incl is silly, cause that's just a calculation number
      otherwise 
        Mul2VAT(vatcode,rowsump,vatvalp,vatprcp,incvat);
        if (GetVAT2(vatcode,vatexclprc,rn,0)) then begin
        end;
        if (GetVATincl(vatcode,vatinclprc,rn)) then begin
        end;
        vatprcp = vatexclprc;
    end;
  end;
  RETURN;
END;

procedure AddToHazLevel(var Array string hazlevcode,var Array string hazlevcomment,var Array val hazlevweight,var Array val hazlevolume,var Integer hazlevcnt,record INVc INr,val ship)
BEGIN
  record HazLevVc HazLevr;
  Integer i;
  
  for(i=0;i<hazlevcnt;i=i+1) begin
    if (hazlevcode[i]==INr.HazLevCode) then begin
      hazlevweight[i] = hazlevweight[i] + ship*INr.Weight;
      hazlevolume[i] = hazlevolume[i] + ship*INr.Volume;
      goto LAddToHazLevel;
    end;
  end;
  HazLevr.Code = INr.HazLevCode;
  if (ReadFirstMain(HazLevr,1,true)) then begin
    hazlevcode[hazlevcnt] = INr.HazLevCode;
    hazlevcomment[hazlevcnt] = HazLevr.Comment;
    hazlevweight[hazlevcnt] = ship*INr.Weight*HazLevr.WeightCoefficient;
    hazlevolume[hazlevcnt] = ship*INr.Volume;
    hazlevcnt = hazlevcnt + 1;
  end;
LAddToHazLevel:;
  RETURN;
END;

procedure PrintHazLevRows(Array string hazlevcode,Array string hazlevcomment,Array val hazlevweight,Array val hazlevolume,Integer hazlevcnt)
BEGIN
  Integer i;
  val totw,totv;
  
  for(i=0;i<hazlevcnt;i=i+1) begin
    if (FIELDINFORM("F_HAZLEVCODE")) then begin
      OUTFORMFIELD("F_HAZLEVCODE",hazlevcode[i]);
    end;
    if (FIELDINFORM("F_HAZLEVSPEC")) then begin
      OUTFORMFIELD("F_HAZLEVSPEC",hazlevcomment[i]);
    end;
    if (FIELDINFORM("F_HAZLEVWEIGHT")) then begin
      OUTFORMFIELD("F_HAZLEVWEIGHT",hazlevweight[i]);
    end;
    if (FIELDINFORM("F_HAZLEVVOLUME")) then begin
      OUTFORMFIELD("F_HAZLEVVOLUME",hazlevolume[i]);
    end;
    totw = totw + hazlevweight[i];
    totv = totv + hazlevolume[i];
    OUTFORMFIELD("F_TOTHAZLEVWEIGHT",totw);
    OUTFORMFIELD("F_TOTHAZLEVVOLUME",totv);
  end;
  RETURN;
END;

procedure FillInItemStuff(var record INVc INr)
begin
  record INVc IN2r;
  record RecVc Recr;
  row RecVc recrw;
  Integer i,rwcnt;
  Boolean countweight,countvolume;

  if (INr.Weight==0) then begin
    countweight = true;
  end;
  if (INr.Volume==0) then begin
    countvolume = true;
  end;
  if (countvolume and countweight) then begin
    Recr.Code = INr.Recepy;
    if (ReadFirstMain(Recr,1,true)) then begin
      rwcnt = MatRowCnt(Recr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Recr,i,Recrw);
        if (Recrw.InQty!=0) then begin
          IN2r.Code = Recrw.Item;
          if (ReadFirstMain(IN2r,1,true)) then begin
            if (countweight) then begin
              INr.Weight = INr.Weight + IN2r.Weight;
            end;
            if (countvolume) then begin
              INr.Volume = INr.Volume + IN2r.Volume;
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

function
Integer CountDeliveryRows(record SHVc SHr)
begin
  Integer i,rwcnt;
  row SHVc SHVc;
  
  rwcnt = MatRowCnt(SHr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SHr,i,SHVc);
    if (SHVc.stp==kInvoiceRowTypeHidden) then begin
      rwcnt = i;
    end;
  end;
  CountDeliveryRows = rwcnt;
  return;
end;

procedure PrintSHRows(record RcVc RepSpec,record SHVc SHr,record SysFormatBlock SysFormatRec,
                      record ORVc ORr,var val totqty,var val totprice,var val totvolume,var val totweight,var val totfifo,var val totvat,
                      var Array string hazlevcode,var Array string hazlevcomment,var Array val hazlevweight,var Array val hazlevolume,var Integer hazlevcnt,
                      record LangNrVc LangNrr,var val tots,var val totwovat)
BEGIN
  Integer i,rwcnt,rownr;
  row SHVc SHrw;
  row ORVc ORrw;
  string 255 tstr,location;
  val t,rowsum;
  record INVc INr;
  val vatprc,vatval,vatexclprc,vatinclprc,rowtax;
  val qtyconv1,qtyconv2,qtyconv3;
  val sunitx,sunity,sunitz;
  record PIVc PIr;
  record GeneralOptionBlock GenOptRec;
  record MinPerLocVc MinPerLocr;
  record PosVc Posr;
  record SMVc VATr;
  Integer vatcnt;
  val tottax1sum;
  record MainStockBlock MSb;
  record TaxMatrixVc TMr;

  SetupVATBase(VATr,vatcnt);
  BlockLoad(MSb);  
  BlockLoad(GenOptRec);  
  rwcnt = CountDeliveryRows(SHr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SHr,i,SHrw);
      if (ReadFirstItem(SHrw.ArtCode,INr,true,true)) then begin
      end;
      OUTFORMFIELD("F_CUSTARTNR",SHrw.CustArtCode);
      if (HasLocalization("PRT")==false) then begin
        OUTFORMFIELD("F_BASPRIS",SHrw.BasePrice);
        OUTFORMFIELD("F_EXCISE",SHrw.ExciseNr);
      end;
      BuildKSerno(SHr.SerNr,SHrw.ArtCode,tstr);
      OUTFORMFIELD("F_KFAKTURANR",tstr);
      if (FIELDINFORM("F_COMMODITYCODE")) then begin
        GetItemCommodityCode(SHrw.ArtCode,tstr);
        OUTFORMFIELD("F_COMMODITYCODE",tstr);
      end;  
      if (FIELDINFORM("F_ALTERNATIVECODE")) then begin
        GetAlternativeItemCode(SHrw.ArtCode,tstr);
        OUTFORMFIELD("F_ALTERNATIVECODE",tstr);
      end;  
      if (FIELDINFORM("F_CUSTOMSDECLNUMBER")) then begin
        GetCustomsDeclarationNumber("SHVc",SHr.SerNr,i,SHrw.ArtCode,SHrw.SerialNr,0,tstr);
        OUTFORMFIELD("F_CUSTOMSDECLNUMBER",tstr);
      end;
      if (FIELDINFORM("F_COUNTRYOFORIGIN")) then begin
        GetCustomsDeclarationNumber("SHVc",SHr.SerNr,i,SHrw.ArtCode,SHrw.SerialNr,1,tstr);
        OUTFORMFIELD("F_COUNTRYOFORIGIN",tstr);
      end;
      if (FIELDINFORM("F_CUSTOMSDECLDATE")) then begin
        GetCustomsDeclarationNumber("SHVc",SHr.SerNr,i,SHrw.ArtCode,SHrw.SerialNr,3,tstr);
        OUTFORMFIELD("F_CUSTOMSDECLDATE",tstr);
      end;
      OUTFORMFIELD("F_SOURCE",SHrw.Source);
      OUTFORMFIELD("F_ROWDELIVERYDATE",SHrw.DespatchRowDate);
      OUTFORMFIELD("F_ROWDELIVERYTIME",SHrw.DespatchRowTime);
      OUTFORMFIELD("F_LEVANTAL",ValToString(SHrw.Ship,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals));
      OUTFORMFIELD("F_ORDANTAL",ValToString(SHrw.Ordered,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals));
      t = SHrw.Ordered - SHrw.Ship;
      if (t<=0) then begin
        t = blankval;
      end;
      OUTFORMFIELD("F_RESTANTAL",ValToString(StringToVal(t,M4UVal),M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals));
  		if (MSb.UnitConvCalc==0) then begin
        tstr = ValToString(t*INr.UnitCoefficient,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
		  end else begin
        tstr = ValToString(t/INr.UnitCoefficient,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
  		end;
      OUTFORMFIELD("F_RESTANTAL2",tstr);      
  		if (MSb.UnitConvCalc==0) then begin
        tstr = ValToString(SHrw.Ship*INr.UnitCoefficient,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
		  end else begin
        tstr = ValToString(SHrw.Ship/INr.UnitCoefficient,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
  		end;
      OUTFORMFIELD("F_LEVANTAL2",tstr);
  		if (MSb.UnitConvCalc==0) then begin
        tstr = ValToString(SHrw.Ordered*INr.UnitCoefficient,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
		  end else begin
        tstr = ValToString(SHrw.Ordered/INr.UnitCoefficient,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
  		end;
      OUTFORMFIELD("F_ORDANTAL2",tstr);


      if (FIELDINFORM("F_ARTNRBC39")) then begin
        ItemBC39(SHrw.ArtCode,tstr);
        OUTFORMFIELD("F_ARTNRBC39",tstr);
      end;  
      if (FIELDINFORM("F_ARTNRBCEAN")) then begin
        ItemBCEAN(SHrw.ArtCode,tstr);
        OUTFORMFIELD("F_ARTNRBCEAN",tstr);
      end;  
      if (FIELDINFORM("F_ARTNRBCEAN13")) then begin
        ItemBCEAN13(SHrw.ArtCode,tstr);      
        OUTFORMFIELD("F_ARTNRBCEAN13",tstr);
      end;  
      if (FIELDINFORM("F_SERIENRBC39")) then begin
        BC39(SHrw.SerialNr,tstr);      
        OUTFORMFIELD("F_SERIENRBC39",tstr);
      end;  
      OUTFORMFIELD("F_ROWLOCATION",SHrw.Location);
      if (FIELDINFORM("F_ARTNR")) then begin
        if (SHrw.OrdRow==-2) then begin
          GetBullet(tstr);
          tstr = SHrw.ArtCode;
        end else begin
          tstr = SHrw.ArtCode;
        end;        
        OUTFORMFIELD("F_ARTNR",tstr);
      end;  
      if (FIELDINFORM("F_ARTNR2")) then begin
        if (SHrw.OrdRow==-2) then begin
          GetBullet(tstr);
          tstr = SHrw.ArtCode;
        end else begin
          tstr = SHrw.ArtCode;
        end;        
        OUTFORMFIELD("F_ARTNR2",tstr);
      end;        
      OUTFORMFIELD("F_ARTCODEVARIETIES",GetVarietyComment(SHrw.ArtCode,INr.Code));
      OUTFORMFIELD("F_ARTCODENOVARIETIES",INr.Code);
      tstr = ValToString(SHrw.FIFO,M423Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
      if (HasLocalization("PRT")==false) then begin
        OUTFORMFIELD("F_FIFO",tstr);
        OUTFORMFIELD("F_SUMFIFO",SHrw.FIFORowVal);
      end;
      totfifo = totfifo + SHrw.FIFORowVal;
      OUTFORMFIELD("F_BESTBEFORE",SHrw.BestBefore);
      OUTFORMFIELD("F_ROWOBJECT",SHrw.Objects);
      OUTFORMFIELD("F_SERIENR",SHrw.SerialNr);
      OUTFORMFIELD("F_RECEPY",SHrw.Recepy);
      OUTFORMFIELD("F_SPECIFIKATION",SHrw.Spec);
      OUTFORMFIELD("F_PICKINGAREA",INr.PickArea);
      if (SHrw.OrdRow>=0) then begin
        MatRowGet(ORr,SHrw.OrdRow,ORrw);
      end else begin
        ClearRow(ORr,ORrw,1);
      end;
      AddVATBase(VATr,ORrw.VATCode,ORrw.Sum,ORrw.TAX1Reb,vatcnt,ORr.InclVAT,ORr.NoTAXonVAT);
      if (HasLocalization("PRT")==false) then begin
        OUTFORMFIELD("F_RABATT",ORrw.vRebate);
        OUTFORMFIELD("F_APRIS",ORrw.Price);
      end;
      UnpackRowFieldMatrix(ORrw,"TaxMatrix",TMr);
      CalcSum(SHrw.Ship,ORrw.Price,ORrw.PriceFactor,ORrw.vRebate,rowsum,GenOptRec.UseDiscount);
      totprice = totprice + rowsum;
      totqty = totqty + SHrw.Ship;
      if (HasLocalization("PRT")==false) then begin
        if (nonblank(SHrw.ArtCode)) then begin
          OUTFORMFIELD("F_ROWPRICE",rowsum);
        end;
      end;
      SHVat(1,ORr.InclVAT,ORr.NoTAXonVAT,ORr.ExportFlag,ORrw.VATCode,rowsum,vatprc,vatval,vatexclprc,vatinclprc,rowtax);
      if (HasLocalization("PRT")==false) then begin
        if (FIELDINFORM("F_APRISEXCLVAT") or FIELDINFORM("F_ROWSUMWITHOUTVAT")) then begin
          FindSalesExVat(TMr,ORrw.VATCode,ORrw.Price,ORr.InclVAT,ORr.NoTAXonVAT,t);
          PrintValueInclZero("F_APRISEXCLVAT",t,M423Val,LangNrr,SysFormatRec,false);
          if (ORr.InclVAT==0) then begin
            PrintValueInclZero("F_ROWSUMWITHOUTVAT",rowsum,M423Val,LangNrr,SysFormatRec,false);
          end else begin
            PrintValueInclZero("F_ROWSUMWITHOUTVAT",rowsum-vatval,M423Val,LangNrr,SysFormatRec,false);
          end;
        end;
      end;
    
      if (ORr.InclVAT==2) then begin
        rowsum = rowsum - vatval;
      end;
      if (ORr.InclVAT==1) then begin
        rowsum = rowsum - vatval - rowtax;
      end;
      rowsum = Round(rowsum,DefaultRoundMode);
      if (HasLocalization("PRT")==false) then begin
        OUTFORMFIELD("F_BELOPP",rowsum);
      end;
      totwovat = totwovat + rowsum;  
      t = vatval + rowsum + rowtax;      
      tots=tots+t;
      tstr = ValToString(t,M423Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
      if (HasLocalization("PRT")==false) then begin
        OUTFORMFIELD("F_ROWSUMTOTAL",tstr);
      end;
      t = vatval + rowsum;
      tstr = ValToString(t,M423Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
      if (HasLocalization("PRT")==false) then begin
        OUTFORMFIELD("F_ROWSUMWITHVAT",tstr);
        OUTFORMFIELD("F_ROWVATVAL",vatval);
//      totvat = totvat + vatval;//calculated below
        OUTFORMFIELD("F_ROWVATPRC",vatprc);
        if (FIELDINFORM("F_ROWTOT")) then begin
          if (ORr.InclVAT==0) then begin
            t = rowsum + vatval;
          end;  
          if ((vatval==blankval) and (rowsum==blankval)) then begin
            tstr = "";
          end else begin
            tstr = t;
          end;
          OUTFORMFIELD("F_ROWTOT",tstr);
        end;  
        OUTFORMFIELD("F_RADSUMMAMEDMOMS",rowsum+vatval);
      end;
      t = vatval/SHrw.Ship;
      t = t + ORrw.Price;
      t = Round(t,DefaultRoundMode);
      if (HasLocalization("PRT")==false) then begin
        OUTFORMFIELD("F_SUMMAMEDMOMS",t);
      end;
      location = SHrw.Location;
      if (blank(location)) then begin location = SHr.Location; end;
      if nonblank(SHrw.ArtCode) then begin
        if (FIELDINFORM("F_ARTNRLEV")) then begin
          if (GetPurchaseItem(SHrw.ArtCode,location,PIr)) then begin
            OUTFORMFIELD("F_ARTNRLEV",SHrw.ArtCode);
          end;
        end;
        if (FIELDINFORM("F_ANTALLEV")) then begin
          if (GetPurchaseItem(SHrw.ArtCode,location,PIr)) then begin
            OUTFORMFIELD("F_ANTALLEV",ValToString(StringToVal(SHrw.Ship,M4UVal),M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals));
          end;
        end;
        if (INr.ItemType==2) then begin
          FillInItemStuff(INr);
        end;
        if (blank(INr.Weight)) then begin
          t = blankval;
        end else begin
          t = SHrw.Ship*INr.Weight;
        end;
        if (nonblank(SHrw.ArtCode)) then begin
          OUTFORMFIELD("F_ROWWEIGHT",t);
        end;
        if (blank(INr.Volume)) then begin
          t = blankval;
        end else begin
          t = SHrw.Ship*INr.Volume;
        end;
        OUTFORMFIELD("F_ROWVOLUME",t);
        totvolume = totvolume + SHrw.Ship*INr.Volume;
        totweight = totweight + SHrw.Ship*INr.Weight;
        if (nonblank(SHrw.ArtCode)) then begin
          SelectUnitText(SHr.LangCode,INr.Unittext,tstr);    
          OUTFORMFIELD("F_ENHET",tstr);
        end;
        OUTFORMFIELD("F_EUCODE",INr.EUCodex);
        SetConversionFields(INr,SHrw.Ship,qtyconv1,qtyconv2,qtyconv3);      
        PrintValue("F_CONVERSION1",qtyconv1,M4UVal,LangNrr,SysFormatRec,false);
        PrintValue("F_CONVERSION2",qtyconv2,M4UVal,LangNrr,SysFormatRec,false);
        PrintValue("F_CONVERSION3",qtyconv3,M4UVal,LangNrr,SysFormatRec,false);
        PrintValue("F_CONVERSIONVAL1",INr.Conversion1,M4UVal,LangNrr,SysFormatRec,false);
        PrintValue("F_CONVERSIONVAL2",INr.Conversion2,M4UVal,LangNrr,SysFormatRec,false);
//      PrintValue("F_CONVERSIONVAL3",qtyconv3,M4UVal,LangNrr,SysFormatRec,false);

        OUTFORMFIELD("F_ROWPACKAGES",SHrw.RowPackages);
        OUTFORMFIELD("F_ROWPACKTEXT",SHrw.PackageDesc);
        if (SHrw.Ship!=blankval) then begin
          tstr = INr.Unittext;
        end else begin
          tstr = "";
        end;
        OUTFORMFIELD("F_ENHETLEV",tstr);
        if (SHrw.Ordered!=blankval) then begin
          tstr = INr.Unittext;
        end else begin
          tstr = "";
        end;
        OUTFORMFIELD("F_ENHETORD",tstr);
        OUTFORMFIELD("F_SHELFCODE",INr.InvCode);
        OUTFORMFIELD("F_ITEMLOCATION",INr.Department);
        OUTFORMFIELD("F_WIDTH",INr.Width);
        OUTFORMFIELD("F_HEIGHT",INr.Height);
        OUTFORMFIELD("F_DEPTH",INr.Depth);
        OUTFORMFIELD("F_WEIGHT",INr.Weight);
        SerialNrSDimensions(SHrw.ArtCode,SHrw.SerialNr,sunitx,sunity,sunitz);      
        OUTFORMFIELD("F_SWIDTH",sunitx);
        OUTFORMFIELD("F_SHEIGHT",sunity);
        OUTFORMFIELD("F_SDEPTH",sunitz);
        OUTFORMFIELD("F_VOLUME",INr.Volume);
        OUTFORMFIELD("F_BARCODE",INr.BarCode);
        GetDefaultSupplierAddress(SHrw.ArtCode,location,0,tstr);
        OUTFORMFIELD("F_LEVADDR1",tstr);
        GetDefaultSupplierAddress(SHrw.ArtCode,location,1,tstr);
        OUTFORMFIELD("F_LEVADDR2",tstr);
        GetDefaultSupplierAddress(SHrw.ArtCode,location,2,tstr);
        OUTFORMFIELD("F_LEVADDR3",tstr);
        if ((FIELDINFORM("F_HAZLEVCODE")) or (FIELDINFORM("F_HAZLEVSPEC")) or (FIELDINFORM("F_HAZLEVWEIGHT")) or (FIELDINFORM("F_HAZLEVVOLUME"))) then begin
          if (nonblank(INr.HazLevCode)) then begin
            AddToHazLevel(hazlevcode,hazlevcomment,hazlevweight,hazlevolume,hazlevcnt,INr,SHrw.Ship);      
          end;
        end;  
        if ((FIELDINFORM("F_POSITIONCODE")) or (FIELDINFORM("F_POSITIONNAME")) or (FIELDINFORM("F_MINSTOCKPERLOC"))) then begin
          MinPerLocr.ItemCode = SHrw.ArtCode;
          MinPerLocr.Location = SHr.Location;
          if (ReadFirstMain(MinPerLocr,2,true)) then begin
            Posr.Code = MinPerLocr.Position;
            OUTFORMFIELD("F_MINSTOCKPERLOC",MinPerLocr.MinLevel);
            if (ReadFirstMain(Posr,1,true)) then begin
              OUTFORMFIELD("F_POSITIONCODE",Posr.Code);
              OUTFORMFIELD("F_POSITIONNAME",Posr.Comment);
            end;
          end;
        end;      
        if (nonblank(SHrw.ArtCode)) then begin
          rownr = rownr + 1;
          OUTFORMFIELD("F_ROWNR",rownr);      
        end;      
      end;
      EndFormRow;
  end;  
  CalcVATBaseVAT(VATr,ORr.InclVAT,ORr.NoTAXonVAT,vatcnt,totvat,tottax1sum);
  RETURN;
END;

procedure PrintShipment(record RcVc RepSpec,record SHVc SHr,string formcode)
BEGIN
  record CUVc CUr;
  record CUVc InvoiceToCUr;
  record ORVc ORr;
  record DocVc Docr;
  string 255 tstr,tstr1;
  string 255 t1,t2;
  val t,tv,totprice,totfifo,totvat,totvolume,totweight,totqty,totwovat,tots;
  Integer shi,shrwcnt;
  row SHVc SHrw;
  record SysFormatBlock SysFormatRec;
  Array string 20 hazlevcode;
  Array string 60 hazlevcomment;
  Array val hazlevweight;
  Array val hazlevolume;
  Integer hazlevcnt;
  record LangNrVc LangNrr;
  row LegalInvNrBlock LINrbrw;
  record BankVc Bankr;
  record eShipTaxAuthReplyVc eSTARr;
  
  GetLangNr(SHr.LangCode,LangNrr);
  BlockLoad(SysFormatRec);
  CommonDocumentFields(RepSpec);
  if (SHr.OKFlag==0) then begin
    OUTFORMFIELD("F_DOCTYPE",USetStr(23460));
  end else begin
    OUTFORMFIELD("F_DOCTYPE",USetStr(23457));
  end;
  CUr.Code = SHr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    SetFaxInfo(CUr.Person,CUr.Name,CUr.Fax,USetStr(1820));
  end;        
  ORr.SerNr = SHr.OrderNr;
  if (ReadFirstMain(ORr,1,true)) then begin
  end;  
  Docr.Code = formcode;
  if (ReadFirstMain(Docr,1,true)) then begin
  end;
  if (HasLocalization("PRT")) then begin    
    if (CUr.CustType==1) then begin
      OUTFORMFIELD("F_CUSTTYPE",USetStr(23361));
    end;
    eSTARr.FileName = "SHVc";
    eSTARr.TransNr = SHr.SerNr;
    ReadLastKey("FNTransNr",eSTARr,2,true);
    OUTFORMFIELD("F_ATDocCodeID",eSTARr.TaxAdminServSeal);
    
    if (FIELDINFORM("F_TAXSUM")) then begin
      ValToText(SHr.TAX1Sum,M4Val,"",SHr.LangCode,tstr);
      OUTFORMFIELD("F_TAXSUM",tstr);
    end;
  end;
  if (FIELDINFORM("F_NROFITEMSINTEXT")) then begin
    IntToText(SHr.LangCode,CountNrofItemsSH(SHr),tstr);
    OUTFORMFIELD("F_NROFITEMSINTEXT",tstr);        
  end;  
  if (FIELDINFORM("F_RUSPAYNR")) then begin
    RussianPaymentNr(SHr.SerNr,tstr);
    OUTFORMFIELD("F_RUSPAYNR",tstr);
  end;  
  OUTFORMFIELD("F_REGNUMBER1",CUr.RegNr1);
  OUTFORMFIELD("F_REGNUMBER2",CUr.RegNr2);
  OUTFORMFIELD("F_VATNR",CUr.VATNr);
/*  
  OUTFORMFIELD("F_FROMADRESS",CUr.Name);
  OUTFORMFIELD("F_FROMADRESS",CUr.InvAddr0);
  OUTFORMFIELD("F_FROMADRESS",CUr.InvAddr1);
  OUTFORMFIELD("F_FROMADRESS",CUr.InvAddr2);
  OUTFORMFIELD("F_FROMADRESS",CUr.InvAddr3);
  OUTFORMFIELD("F_FROMADRESS",CUr.InvAddr4);
*/  
  OutAddress("F_FROMADRESS",CUr.Name,CUr.InvAddr0,CUr.InvAddr1,CUr.InvAddr2,CUr.InvAddr3,CUr.InvAddr4);
  OUTFORMFIELD("F_KUNDMOMSNR",CUr.VATNr);
  OUTFORMFIELD("F_DEPARTMENT",CUr.Department);
  OUTFORMFIELD("F_KUNDFRAKTNR",CUr.FreightNr);
  OUTFORMFIELD("F_ACCOUNTOPERATOR",CUr.AccOperator);
  OUTFORMFIELD("F_MOBILE",CUr.Mobile);
  OUTFORMFIELD("F_ANACODE",CUr.ANACode);
  OutAddress("F_LEVADRESS",ORr.ShipAddr0,ORr.ShipAddr1,ORr.ShipAddr2,ORr.ShipAddr3,ORr.DelAddr3,ORr.DelAddr4);
  OUTFORMFIELD("F_ORDDATUM",ORr.OrdDate);
/*  
  OUTFORMFIELD("F_POSTADRESS",ORr.Addr0);
  OUTFORMFIELD("F_POSTADRESS",ORr.Addr1);
  OUTFORMFIELD("F_POSTADRESS",ORr.Addr2);
  OUTFORMFIELD("F_POSTADRESS",ORr.Addr3);
  OUTFORMFIELD("F_POSTADRESS",ORr.InvAddr3);
  OUTFORMFIELD("F_POSTADRESS",ORr.InvAddr4);
*/
  OutAddress("F_POSTADRESS",ORr.Addr0,ORr.Addr1,ORr.Addr2,ORr.Addr3,ORr.InvAddr3,ORr.InvAddr4);

  OUTFORMFIELD("F_VARREFERENS",ORr.OurContact);
  OUTFORMFIELD("F_ERREFERENS",ORr.CustContact);
  OUTFORMFIELD("F_SALJARE",ORr.SalesMan);
  PrintPersonsCustomerDetails(ORr.SalesMan);
  OUTFORMFIELD("F_PLANLEVDATUM",ORr.PlanShip);
  OUTFORMFIELD("F_SHIPTERM",ORr.ShipDeal);
  if (FIELDINFORM("F_SHIPTERMTEXT")) then begin
    GetShipDealText(ORr.ShipDeal,ORr.LangCode,tstr);
    OUTFORMFIELD("F_SHIPTERMTEXT",tstr);
  end;  
  PrintFreightPaid(ORr.ShipDeal);
  if (FIELDINFORM("F_VILLKOR")) then begin
    GetPayDealText(ORr.PayDeal,ORr.LangCode,tstr);
    OUTFORMFIELD("F_VILLKOR",tstr);
  end;
  OUTFORMFIELD("F_KUNDORDNR",ORr.CustOrdNr);
  OUTFORMFIELD("F_ORDERCOMMENT",ORr.Comment);
  OUTFORMFIELD("F_KUNDFAX",ORr.Fax);
  OUTFORMFIELD("F_KUNDTEL",ORr.Phone);
  OUTFORMFIELD("F_SORTING",SHr.Sorting);
  OUTFORMFIELD("F_ORCOTYPE",SHr.ORCOType);
  OUTFORMFIELD("F_TRANSPORTNR",SHr.TransportNumber);

  Bankr.Code = CUr.AccOperator;
  ReadFirstMain(Bankr,1,true);
  OUTFORMFIELD("F_ACCOUNTOPERATORNAME",Bankr.Name);
  OUTFORMFIELD("F_BANKCORRPACC",Bankr.CorrspAcc);
  OUTFORMFIELD("F_BANKSWIFT",Bankr.SWIFT);
  if (nonblank(CUr.BankAccount)) then begin
    OUTFORMFIELD("F_BANKACC",CUr.BankAccount);
  end else begin
    OUTFORMFIELD("F_BANKACC",Bankr.Nr2);
  end;

  PrintInvoiceToBankData(CUr.BankAccount,Bankr,ORr.InvoiceToCode);
  PrintBankData(ORr.BankCode);
  OUTFORMFIELD("F_PLANSENTDATE",SHr.PlanSendDate);
  OUTFORMFIELD("F_PLANSENTTIME",SHr.PlanSendTime);
  OUTFORMFIELD("F_PLANARRIVALDATE",SHr.PlanArrDate);
  OUTFORMFIELD("F_PLANARRIVALTime",SHr.PlanArrTime);
  OUTFORMFIELD("F_LEVDATUM",SHr.ShipDate);
  OUTFORMFIELD("F_LEVDATUMHIJRI",ConvertDate(kCalendarGregorian,SHr.ShipDate,kCalendarHijri));
  LongDateTimeToStr(SHr.ShipDate,tstr);
  OUTFORMFIELD("F_LEVDATUMLONG",tstr);
  OUTFORMFIELD("F_LEVNUMMER",SHr.SerNr);
  OUTFORMFIELD("F_ORDNUMMER",SHr.OrderNr);
  OUTFORMFIELD("F_KUNDNR",SHr.CustCode);
  OUTFORMFIELD("F_KUNDNAMN",SHr.Addr0);
  if (SHr.Check2==0) then begin
    OutAddress("F_ADRESS",SHr.Addr0,SHr.Addr1,SHr.Addr2,SHr.Addr3,SHr.DelAddr3,SHr.DelAddr4);
  end else begin
    OutAddress("F_ADRESS",ORr.Addr0,ORr.Addr1,ORr.Addr2,ORr.Addr3,ORr.InvAddr3,ORr.InvAddr4);
  end;
  OUTFORMFIELD("F_LEVSATT",SHr.ShipMode);
  if (FIELDINFORM("F_LEVSATTTEXT")) then begin
    GetShipModeText(SHr.ShipMode,SHr.LangCode,tstr);
    OUTFORMFIELD("F_LEVSATTTEXT",tstr);
  end;

  if (SHr.Check2!=0) then begin
    OutAddress("F_AVSADRESS",ORr.Addr0,ORr.Addr1,ORr.Addr2,ORr.Addr3,ORr.InvAddr3,ORr.InvAddr4);
  end else begin
    OutAddress("F_AVSADRESS",SHr.Addr0,SHr.Addr1,SHr.Addr2,SHr.Addr3,SHr.DelAddr3,SHr.DelAddr4);
  end;
  
  if (SHr.Check2!=0) then begin
    tstr = ORr.Addr0;
  end else begin
    tstr = SHr.Addr0;
  end;
  OUTFORMFIELD("F_AVSNAME",tstr);
  
  if (SHr.Check2!=0) then begin
    tstr = ORr.Addr1;
  end else begin
    tstr = SHr.Addr1;
  end;
  OUTFORMFIELD("F_AVSADRESS1",tstr);
  if (SHr.Check2!=0) then begin
    tstr = ORr.Addr2;
  end else begin
    tstr = SHr.Addr2;
  end;
  OUTFORMFIELD("F_AVSADRESS2",tstr);
  if (SHr.Check2!=0) then begin
    tstr = ORr.Addr3;
  end else begin
    tstr = SHr.Addr3;
  end;
  OUTFORMFIELD("F_AVSADRESS3",tstr);
  if (SHr.Check2!=0) then begin
    tstr = ORr.InvAddr3;
  end else begin
    tstr = SHr.DelAddr3;
  end;
  OUTFORMFIELD("F_AVSADRESS4",tstr);
  if (SHr.Check2!=0) then begin
    tstr = ORr.InvAddr4;
  end else begin
    tstr = SHr.DelAddr4;
  end;
  OUTFORMFIELD("F_AVSADRESS5",tstr);
  if (nonblank(ORr.InvoiceToCode)) then begin
    InvoiceToCUr.Code = ORr.InvoiceToCode;
    if (ReadFirstMain(InvoiceToCUr,1,true)) then begin
    end;        
    OutAddress("F_FAKTADRESS",InvoiceToCUr.Name,InvoiceToCUr.InvAddr0,InvoiceToCUr.InvAddr1,InvoiceToCUr.InvAddr2,InvoiceToCUr.InvAddr3,InvoiceToCUr.InvAddr4);

    OUTFORMFIELD("F_FAKTURATILL",InvoiceToCUr.Name);
    OUTFORMFIELD("F_ANACODEINVOICETO",InvoiceToCUr.ANACode);
    OUTFORMFIELD("F_KUNDMOMSNRINVOICETO",InvoiceToCUr.VATNr);
  end else begin
    OutAddress("F_FAKTADRESS",ORr.Addr0,ORr.Addr1,ORr.Addr2,ORr.Addr3,ORr.InvAddr3,ORr.InvAddr4);
    OUTFORMFIELD("F_ANACODEINVOICETO",CUr.ANACode);
    OUTFORMFIELD("F_KUNDMOMSNRINVOICETO",CUr.VATNr);
  end;
  OUTFORMFIELD("F_SAFTHASHCONTROL",SAFTHashControl(SHr.Hash));
  if (HasLocalization("PRT")) then begin
    OUTFORMFIELD("F_OFFICIALSERNO",GetOffSerNrIVJournalID(SHr.SerNr,"SHVc",SHr.OfficialSerNr) & " " & SHr.OfficialSerNrSerie & "/" & Right(SHr.OfficialSerNr,len(SHr.OfficialSerNr)-len(SHr.OfficialSerNrSerie)));
  end else begin
    OUTFORMFIELD("F_OFFICIALSERNO",SHr.OfficialSerNr);
  end;
  if (nonblank(SHr.OfficialSerNr)) then begin
    GetLegalInvNrRow(SHr.OfficialSerNr,LINrbrw);
    if (HasLocalization("BOL,HRV,SVN")) then begin
      OUTFORMFIELD("F_OFFICIALSERNOWITHOUTSERIE",StringToLongInt(Right(SHr.OfficialSerNr,len(SHr.OfficialSerNr)-len(LINrbrw.Serie))));
    end else begin
      OUTFORMFIELD("F_OFFICIALSERNOWITHOUTSERIE",Right(SHr.OfficialSerNr,len(SHr.OfficialSerNr)-len(LINrbrw.Serie)));
    end;
  end;
  tstr = GetJwl_CustomerName(SHr.CustCode);
  OUTFORMFIELD("F_KUNDNAMNJWL",tstr);
  OUTFORMFIELD("F_ADRESS1",SHr.Addr1);
  OUTFORMFIELD("F_ADRESS2",SHr.Addr2);
  OUTFORMFIELD("F_ADRESS3",SHr.Addr3);
  OUTFORMFIELD("F_DELADDR3",SHr.DelAddr3);
  OUTFORMFIELD("F_DELADDR4",SHr.DelAddr4);
  OUTFORMFIELD("F_FREIGHTCOMP",SHr.FreightCompany);
  OUTFORMFIELD("F_FREIGHTCOMPREGNO",SHr.FreightCompanyRegNr);
  OUTFORMFIELD("F_TRUCKINFO",SHr.TruckInfo);
  OUTFORMFIELD("F_DRIVER",SHr.Driver);
  OUTFORMFIELD("F_CMRTEXT",SHr.CMRText);
  if (SHr.Check1!=0) then begin
    tstr = "X";
  end else begin
    tstr = "";
  end;
  OUTFORMFIELD("F_TELAVISERINGX",tstr);
  if (SHr.Check2!=0) then begin
    tstr = "X";
  end else begin
    tstr = "";
  end;
  OUTFORMFIELD("F_CUSTADDRESSX",tstr);
  if (SHr.Check1!=0) then begin
    if (blank(SHr.Comment)) then begin
      tstr = ORr.Phone;
    end else begin
      tstr = SHr.Comment;
    end;
  end else begin
    tstr = "";
  end;
  OUTFORMFIELD("F_TELAVISERINGTEL",tstr);
  if (SHr.Check1!=0) then begin
    tstr = ORr.CustContact;
  end else begin
    tstr = "";
  end;
  OUTFORMFIELD("F_TELAVISERINGCONTACT",tstr);
  if (nonblank(SHr.Addr3)) then begin
    t2 = SHr.Addr3;
  end else begin
    if (nonblank(SHr.Addr2)) then begin
      t2 = SHr.Addr2;
    end else begin
      t2 = SHr.Addr1;
    end;
  end;
  SplitAddress(t2,t1,tstr);
  OUTFORMFIELD("F_ORT",tstr);
  if (nonblank(SHr.Addr3)) then begin
    tstr = SHr.Addr3;
  end else begin
    if (nonblank(SHr.Addr2)) then begin
      tstr = SHr.Addr2;
    end else begin
      tstr = SHr.Addr1;
    end;
  end;
  OUTFORMFIELD("F_ORTMEDPOSTNR",tstr);
  if (nonblank(SHr.Addr3)) then begin
    t2 = SHr.Addr3;
  end else begin
    if (nonblank(SHr.Addr2)) then begin
      t2 = SHr.Addr2;
    end else begin
      t2 = SHr.Addr1;
    end;
  end;
  SplitAddress(t2,tstr,t1);
  OUTFORMFIELD("F_PNR",tstr);
  if (FIELDINFORM("F_LOCATIONNAME")) then begin
    GetLocationName(SHr.Location,tstr);
    OUTFORMFIELD("F_LOCATIONNAME",tstr);
  end;  
  if (FIELDINFORM("F_LOCCONTACT")) then begin
    GetLocationContact(SHr.Location,tstr);
    OUTFORMFIELD("F_LOCCONTACT",tstr);
  end;  
  if (FIELDINFORM("F_TOCONTACT")) then begin
    GetLocationContact(SHr.Location,tstr);
    OUTFORMFIELD("F_TOCONTACT",tstr);
  end;  
  if (FIELDINFORM("F_LOCPHONE")) then begin
    GetLocationPhone(SHr.Location,tstr);
    OUTFORMFIELD("F_LOCPHONE",tstr);
  end;  
  if (FIELDINFORM("F_LOCFAX")) then begin
    GetLocationFax(SHr.Location,tstr);
    OUTFORMFIELD("F_LOCFAX",tstr);
  end;  
  if (FIELDINFORM("F_LOCEMAIL")) then begin
    GetLocationEmail(SHr.Location,tstr);
    OUTFORMFIELD("F_LOCEMAIL",tstr);
  end;  
  if (FIELDINFORM("F_LOCADDRESS")) then begin
    GetLocationAddress(SHr.Location,1,tstr);
    OUTFORMFIELD("F_LOCADDRESS",tstr);
    GetLocationAddress(SHr.Location,2,tstr);
    OUTFORMFIELD("F_LOCADDRESS",tstr);
    GetLocationAddress(SHr.Location,3,tstr);
    OUTFORMFIELD("F_LOCADDRESS",tstr);
    GetLocationAddress(SHr.Location,4,tstr);
    OUTFORMFIELD("F_LOCADDRESS",tstr);
    GetLocationAddress(SHr.Location,5,tstr);
    OUTFORMFIELD("F_LOCADDRESS",tstr);
  end;  
  if (FIELDINFORM("F_PACKAGESNR")) then begin
    t = 0;
    shrwcnt = MatRowCnt(SHr);
    for (shi=0;shi<shrwcnt;shi=shi+1) begin
      MatRowGet(SHr,shi,SHrw);
      t = t + SHrw.RowPackages;
    end;    
    tstr = ValToString(t,M4UVal,"",".",0);
    OUTFORMFIELD("F_PACKAGESNR",tstr);
  end;  
  if (FIELDINFORM("F_FRAKTSEDELNR")) then begin
    GetFieldArgument(Docr,F_FRAKTSEDELNR,tstr1);
    CalcFraktField(SHr.OrderNr,tstr1,tstr);
    OUTFORMFIELD("F_FRAKTSEDELNR",tstr);
  end;
  OUTFORMFIELD("F_FROMCITY",SHr.FromCity);
  OUTFORMFIELD("F_TOCITY",SHr.ToCity);
  OUTFORMFIELD("F_FROMDOCK",SHr.FromDock);
  OUTFORMFIELD("F_TODOCK",SHr.ToDock);
  OUTFORMFIELD("F_TRANSDIREKTIV",SHr.TransportDirect);
  OUTFORMFIELD("F_COMMENT",SHr.Comment);
  OUTFORMFIELD("F_KOLLI",SHr.Packages);
  OUTFORMFIELD("F_LOCATION",SHr.Location);
  OUTFORMFIELD("F_LEVADR234",SHr.Addr1);
  OUTFORMFIELD("F_LEVADR234",SHr.Addr2);
  OUTFORMFIELD("F_LEVADR234",SHr.Addr3);
  OUTFORMFIELD("F_LEVADR234",SHr.DelAddr3);
  OUTFORMFIELD("F_LEVADR234",SHr.DelAddr4);
  OUTFORMFIELD("F_OBJECT",SHr.Objects);
  PrintSHRows(RepSpec,SHr,SysFormatRec,ORr,totqty,totprice,totvolume,totweight,totfifo,totvat,hazlevcode,hazlevcomment,hazlevweight,hazlevolume,hazlevcnt,LangNrr,tots,totwovat);
  OUTFORMFIELD("F_TOTWEIGHT",SHr.TotWeight);
  OUTFORMFIELD("F_TOTVOLUME",SHr.TotVolume);
  if (HasLocalization("PRT")==false) then begin
    OUTFORMFIELD("F_TOTPRICE",totprice);
    OUTFORMFIELD("F_TOTFIFO",totfifo);
    OUTFORMFIELD("F_MOMS",totvat);
    OUTFORMFIELD("F_VATTOT",totvat);
    OUTFORMFIELD("F_ORDERTOTAL",ORr.Sum4);
    if (ORr.InclVAT>0) then begin
      t = ORr.Sum4 - ORr.Sum3;
    end else begin
      t = ORr.Sum1;
    end;  
    PrintValueInclZero("F_VATTYPETOTALSUM",t,M4Val,LangNrr,SysFormatRec,false);
  
    if (FIELDINFORM("F_VATINTEXT")) then begin
      ValToText(totvat,M4Val,ORr.CurncyCode,SHr.LangCode,tstr);
      OUTFORMFIELD("F_VATINTEXT",tstr);
    end;  
  end;
  OUTFORMFIELD("F_CALCTOTVOLUME",totvolume);
  OUTFORMFIELD("F_CALCTOTWEIGHT",totweight);
  OUTFORMFIELD("F_TOTQTY",totqty);
 
  if (HasLocalization("PRT")==false) then begin
    OUTFORMFIELD("F_SUMMA",totwovat);
    OUTFORMFIELD("F_TOTSUM",tots);
    if (FIELDINFORM("F_ATTBETALATEXT")) then begin
      GetShipValue(SHr,ORr,tv,t);
      ValToText(t,M4Val,ORr.CurncyCode,SHr.LangCode,tstr);
      OUTFORMFIELD("F_ATTBETALATEXT",tstr);
    end;  
    if (FIELDINFORM("F_ATTBETALA")) then begin
      GetShipValue(SHr,ORr,tv,t);
      OUTFORMFIELD("F_ATTBETALA",t);
    end;  
  end;
  if ((FIELDINFORM("F_HAZLEVCODE")) or (FIELDINFORM("F_HAZLEVSPEC")) or (FIELDINFORM("F_HAZLEVWEIGHT")) or (FIELDINFORM("F_HAZLEVVOLUME"))) then begin
    PrintHazLevRows(hazlevcode,hazlevcomment,hazlevweight,hazlevolume,hazlevcnt);
  end;  
LPrintShipment:;  
  RETURN;
END;

procedure SummarizeComponents(var record SHVc SH2p)
BEGIN
  record INVc INr;
  record SHVc locSHr;
  row SHVc SHrw,SH2rw;
  Integer i,rwcnt,j,shrwcnt;

  RecordCopy(locSHr,SH2p);
  rwcnt = MatRowCnt(SH2p);
  while (rwcnt>0) begin
    MatRowDelete(SH2p,0);
    rwcnt = rwcnt - 1;
  end;
  rwcnt = MatRowCnt(SH2p);
  shrwcnt = 0;
  rwcnt = MatRowCnt(locSHr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(locSHr,i,SHrw);
    if (ReadFirstItem(SHrw.ArtCode,INr,true,true)) then begin 
      if (INr.ItemType==2) then begin goto LBREAKSumm; end;
    end;
    for (j=0;j<shrwcnt;j=j+1) begin
      MatRowGet(SH2p,j,SH2rw);
      if ((SHrw.ArtCode==SH2rw.ArtCode) and (SHrw.Location==SH2rw.Location) and 
          (SHrw.SerialNr==SH2rw.SerialNr)) then begin
        SHrw.Ordered = SHrw.Ordered + SH2rw.Ordered;
        SHrw.Ship = SHrw.Ship + SH2rw.Ship;
        if (SHrw.InStock>SH2rw.InStock) then begin
          SHrw.InStock = SH2rw.InStock;
        end;
        MatRowPut(SH2p,j,SHrw);                     
        goto LBREAKSumm;
      end;
    end;
    MatRowPut(SH2p,shrwcnt,SHrw);
    shrwcnt = shrwcnt + 1;
LBREAKSumm:;      
  end;
  RETURN;
END;

procedure ExpandShipment(string repname,Integer flags1,record SHVc SHp,var record SHVc resSHp)
BEGIN
  record SHVc locSHr;
  Integer i,sh1rows,sh2rows,sh3rows;
  row SHVc SH1rw;
  row SHVc SH2rw;
  row SHVc SH3rw;
  Boolean isstruct;
  Integer j,rwcnt;
  record StructPrintBlock SPr;
  Boolean expand;
  
  BlockLoad(SPr);
  expand = false;
  if (repname=="Sh3Form") then begin expand = false; end;
  if (repname=="Sh2Form") then begin
    if (SPr.PickingPrint==0) then begin expand = true; end;
  end;  
  if (repname=="Sh1Form") then begin
    if (SPr.ShipmentPrint==0) then begin expand = true; end;
  end;  
  RecordCopy(resSHp,SHp);
  if (expand==false) then begin
    goto LExpandShipment;
  end;
  rwcnt = MatRowCnt(resSHp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(resSHp,i,SH1rw);
    ClearRow(resSHp,SH1rw,1);//check it
    MatRowPut(resSHp,i,SH1rw);
  end;
  sh2rows = 0;
  isstruct = false;
  sh1rows = MatRowCnt(SHp);
  for (i=0;i<sh1rows;i=i+1) begin
    MatRowGet(SHp,i,SH1rw);
    MatRowPut(resSHp,sh2rows,SH1rw);
    RecordClear(locSHr);
    isstruct = ExpandStructItem(SH1rw.ArtCode,SH1rw.Recepy,SH1rw.Ship,locSHr);
    if (isstruct) then begin
      SH1rw.Ship = blankval;  // do not ship the main item 
      SH1rw.Recepy = "_";
      MatRowPut(resSHp,sh2rows,SH1rw);
    end;
    sh2rows = sh2rows + 1;
    if (isstruct) then begin
      sh3rows = MatRowCnt(locSHr);
      for (j=0;j<sh3rows;j=j+1) begin
        MatRowGet(locSHr,j,SH2rw);
        SH2rw.OrdRow = -2;  // meens it is a structure item expanded 
        SH2rw.Ordered = blankval;
        SH2rw.Recepy = "";
        MatRowPut(resSHp,sh2rows,SH2rw);
        sh2rows = sh2rows + 1;
      end;
    end;
  end;
//  if ((SPr.ComponentsSum!=0) or (flags1!=0)) then begin
  if (SPr.ComponentsSum!=0) then begin
    SummarizeComponents(resSHp);
  end;  
LExpandShipment:;
  RETURN;
END;

global
procedure DoSh1Form(record RcVc RepSpec,record SHVc SHr)
BEGIN
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Integer i,rwcnt;
  Boolean printf,langf;
  Integer intdocnr;
  string 30 formcode,langcode,langcod2;
  record SHVc resSHr;
  record ModuleBlock MBr;

  BlockLoad(MBr);
  langcode = SHr.LangCode;
  langcod2 = SHr.ShipMode;
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoSh1Form;
  end;
  rwcnt = MatRowCnt(FDr);
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(FDr,i,FDrw);
    if (FDrw.LangCode==langcode) then begin
      i = -1;
      langf = true;
    end;
  end;
  if (langf==false) then begin langcode = ""; end;
  intdocnr = 1;
  printf = true;
  if (SHr.Prntdf!=0) then begin
    if (UserCanAction("DisallowPrintCopy",false)) then begin
      MessageBox(1274,StringFromStringSet(3,"DisallowPrintCopy"));
      printf = false;
    end;
  end;
  while (printf) begin  
LFINDFORMCOCESH1:;
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (FindFormcode(SHr.OKFlag,FDrw.Typ)) then begin 
        if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,SHr.SerNr,FDrw.PrintGroupCode,
                        langcode,intdocnr,"SHVc",formcode)) then
        begin
          goto LBREAKSH1;
        end;
      end;
    end;
    if (nonblank(langcod2)) then begin
      langcode = langcod2;
      langcod2 = "";
      goto LFINDFORMCOCESH1;
    end;  
LBREAKSH1:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin    
        if (MBr.NoTestprintEnabler==0) then begin
          if (SHr.OKFlag==0) then begin
            FormWaterMark(1117,-1);
            printf = false;
          end;
          if (SHr.OKFlag!=0) then begin
            if (SHr.Prntdf!=0) then begin
              FormWaterMark(1118,-1);
              printf = false;
            end;
          end;
        end;
        ExpandShipment(RepSpec.repname,RepSpec.flags[1],SHr,resSHr);
//        SummarizeComponents(resSHr);,setting
        PrintShipment(RepSpec,resSHr,formcode);
        NumberofDocumentPages(FDrw.FPCode,MatRowCnt(resSHr));
        CloseForm;
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoSh1Form:;  
  return;
end;

procedure SortShipmentRows(var record SHVc SHr)
begin
  Integer i,rwcnt;
  row SHVc SHrw;
  record INVc INr;
  string 255 lastinvcode,lastitemcode;
  record PickingListBlock PLb;
  
  BlockLoad(PLb);
  if (PLb.PickingOrder==kPickingListPickingOrderDefault) then begin
    goto LSortShipmentRows;
  end;
  rwcnt = MatRowCnt(SHr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SHr,i,SHrw);
    if (nonblank(SHrw.ArtCode)) then begin
      ReadFirstItem(SHrw.ArtCode,INr,true,true);
      SHrw.VARList = INr.InvCode;
      lastinvcode = INr.InvCode;
      lastitemcode = SHrw.ArtCode;
      MatRowPut(SHr,i,SHrw);
    end;
    if (blank(SHrw.VARList)) then begin
      SHrw.VARList = lastinvcode & "_" & lastitemcode;
      MatRowPut(SHr,i,SHrw);
    end;
  end;
  SortRows(SHr,"VARList",true);
LSortShipmentRows:;  
  return;
end;

global
procedure DoSh2Form(record RcVc RepSpec,record SHVc SHr)
begin
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Integer i,rwcnt;
  Boolean printf,langf;
  Integer intdocnr;
  string 30 formcode,langcode,langcod2;
  record SHVc resSHr;

  langcode = SHr.LangCode;
  langcod2 = SHr.ShipMode;
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoSh2Form;
  end;
  rwcnt = MatRowCnt(FDr);
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(FDr,i,FDrw);
    if (FDrw.LangCode==langcode) then begin
      i = -1;
      langf = true;
    end;
  end;
  if (langf==false) then begin langcode = ""; end;
  intdocnr = 1;
  printf = true;
  while (printf) begin  
LFINDFORMCOCESH2:;
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (FindFormcode(SHr.OKFlag,FDrw.Typ)) then begin 
        if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,SHr.SerNr,FDrw.PrintGroupCode,
                        langcode,intdocnr,"SHVc",formcode)) then
        begin
          goto LBREAKSH2;
        end;
      end;
    end;
    if (nonblank(langcod2)) then begin
      langcode = langcod2;
      langcod2 = "";
      goto LFINDFORMCOCESH2;
    end;  
LBREAKSH2:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin    
          ExpandShipment(RepSpec.repname,RepSpec.flags[1],SHr,resSHr);
          SortShipmentRows(resSHr);
          PrintShipment(RepSpec,resSHr,formcode);
          NumberofDocumentPages(FDrw.FPCode,MatRowCnt(resSHr));
          CloseForm;
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoSh2Form:;  
  RETURN;
END;

global
procedure DoSh3Form(record RcVc RepSpec,record SHVc SHr)
BEGIN
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Integer i,rwcnt;
  Boolean printf,langf;
  Integer intdocnr;
  string 30 formcode,langcode,langcod2;
  record SHVc resSHr;

  langcode = SHr.LangCode;
  langcod2 = SHr.ShipMode;
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoSh3Form;
  end;
  rwcnt = MatRowCnt(FDr);
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(FDr,i,FDrw);
    if (FDrw.LangCode==langcode) then begin
      i = -1;
      langf = true;
    end;
  end;
  if (langf==false) then begin langcode = ""; end;
  intdocnr = 1;
  printf = true;
  while (printf) begin  
LFINDFORMCOCESH3:;
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (FindFormcode(SHr.OKFlag,FDrw.Typ)) then begin 
        if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,SHr.SerNr,FDrw.PrintGroupCode,
                        langcode,intdocnr,"SHVc",formcode)) then
        begin
          goto LBREAKSH3;
        end;
      end;
    end;
    if (nonblank(langcod2)) then begin
      langcode = langcod2;
      langcod2 = "";
      goto LFINDFORMCOCESH3;
    end;  
LBREAKSH3:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin  
          ExpandShipment(RepSpec.repname,RepSpec.flags[1],SHr,resSHr);
//          SummarizeComponents(resSHr);//setting
          PrintShipment(RepSpec,resSHr,formcode);
          NumberofDocumentPages(FDrw.FPCode,MatRowCnt(resSHr));
          CloseForm;
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoSh3Form:;  
  RETURN;
END;

