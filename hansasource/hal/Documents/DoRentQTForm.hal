external procedure PrintCurrencyCode(string,string);
external updating procedure SetAgreementPrntdf(LongInt);
external function roundmode DefaultRoundMode();
external function roundmode SetRoundModeD(Integer);
external procedure PrintPersonsCustomerDetails(string);
external procedure OutAddress(string,string,string,string,string,string,string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure PrintValue(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external procedure QTSetFax(record CUVc,record RentQTVc);
external procedure GetFieldArgument(record DocVc,Integer,var string);
external procedure SelectUnitText(string,string,var string);
external procedure GetShipModeText(string,string,var string);
external function Boolean Getformcode(Integer,Integer,string,string,string,LongInt,LongInt,string,string,Integer,string,var string);
external function Integer NumberofDocumentPages(string,Integer);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure GetLangNr(string,var record LangNrVc);
external procedure ItemBC39(string,var string);
external procedure ItemBCEAN(string,var string);
external procedure ItemBCEAN13(string,var string);
external procedure GetPayDealText(string,string,var string);
external procedure GetUserEmail(string,var string);
external procedure GetShipDealText(string,string,var string);
external procedure GetUserName(string,var string);
external procedure GetItemCommodityCode(string,var string);
external procedure GetAlternativeItemCode(string,var string);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure BuildKSerno(LongInt,string,var string);
external procedure CommonDocumentFields(record RcVc);
external procedure Mul2VAT(string,val,var val,var val,Integer);
external function Boolean GetVAT2(string,var val,var Integer,Integer);
external function Boolean GetVATincl(string,var val,var Integer);
external procedure ValToText(val,Integer,string,string,var string);
external procedure PrintNote(record NotepadVc);
external procedure GetVATdouble(string,var val,var val,Integer);
external procedure PrintSiteInformation(string,string);
external procedure PrintLocationInformation(string);
external procedure PrintFreightPaid(string);

procedure PrintRentQTText(record RentQTVc RentQTr,Boolean newlin)
BEGIN
  Integer i,rwcnt;
  string 255 tstr;
  
  rwcnt = LineTextCnt(RentQTr);
  for (i=0;i<rwcnt;i=i+1) begin
    tstr = LineTextGet(RentQTr,i);
    OUTFORMFIELD("F_TEXT",tstr);
    if (newlin) then begin
      EndFormRow;
    end;
  end;  
  return;
end;

function val FindCustIntRate(string custcode)
begin
  record IIBlock IIRec;
  record CUVc CUr;
  val res;
  
  BlockLoad(IIRec);
  res = IIRec.IntRate;
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (CUr.IntRate!=0) then begin
      res = CUr.IntRate;
    end;
  end;
  FindCustIntRate = res;
  return;
end;

global
function val FindRentQTTotWeight(record RentQTVc RentQTr)
begin
  record INVc INr;
  row RentQTVc RentQTrw;  
  Integer i,rwcnt;
  val res;
  
  res = 0;
  rwcnt = MatRowCnt(RentQTr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentQTr,i,RentQTrw);
    if (ReadFirstItem(RentQTrw.ArtCode,INr,true,true)) then begin
      res = res + (RentQTrw.Quant * INr.Weight);
    end;
  end;
  FindRentQTTotWeight = res;
  return;
end;

global
function val FindRentQTSumRent(record RentQTVc RentQTr)
begin
  row RentQTVc RentQTrw;  
  Integer i,rwcnt;
  val res;
  
  res = 0;
  rwcnt = MatRowCnt(RentQTr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentQTr,i,RentQTrw);
    if (RentQTrw.Type==0) then begin
      res = res + RentQTrw.Sum;
    end;
  end;
  FindRentQTSumRent = res;
  return;
end;

global
function val FindRentQTSumCharge(record RentQTVc RentQTr)
begin
  record INVc INr;
  row RentQTVc RentQTrw;  
  Integer i,rwcnt;
  val res;
  Boolean addf;
  
  res = 0;
  rwcnt = MatRowCnt(RentQTr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentQTr,i,RentQTrw);
    if (RentQTrw.Type==2) then begin
      addf = false;
      if (ReadFirstItem(RentQTrw.ArtCode,INr,true,true)) then begin
        if ((INr.ItemType==1) or (INr.ItemType==2)) then begin
          addf = true;
        end;
      end;
      if (addf) then begin
        res = res + RentQTrw.Sum;
      end;
    end;
  end;
  FindRentQTSumCharge = res;
  return;
end;

global
function val FindRentQTSumChargePlain(record RentQTVc RentQTr)
begin
  record INVc INr;
  row RentQTVc RentQTrw;  
  Integer i,rwcnt;
  val res;
  Boolean addf;
  
  res = 0;
  rwcnt = MatRowCnt(RentQTr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentQTr,i,RentQTrw);
    if (RentQTrw.Type==2) then begin
      addf = false;
      if (ReadFirstItem(RentQTrw.ArtCode,INr,true,true)) then begin
        if (INr.ItemType==0) then begin
          addf = true;
        end;
      end;
      if (addf) then begin
        res = res + RentQTrw.Sum;
      end;
    end;
  end;
  FindRentQTSumChargePlain = res;
  return;
end;

// Not really correct, should get the price through GetItemPriceDiscount.....
global
function val FindRentQTSumFreebies(record RentQTVc RentQTr)
begin
  record INVc INr;
  row RentQTVc RentQTrw;  
  Integer i,rwcnt;
  val res;
  
  res = 0;
  rwcnt = MatRowCnt(RentQTr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentQTr,i,RentQTrw);
    if (RentQTrw.Type==1) then begin
      res = res + RentQTrw.Sum;
      if (ReadFirstItem(RentQTrw.ArtCode,INr,true,true)) then begin
        res = res + (RentQTrw.Quant * INr.UPrice1);
      end;
    end;
  end;
  FindRentQTSumFreebies = res;
  return;
end;

global
function val FindRentQTSumService(record RentQTVc RentQTr)
begin
  record INVc INr;
  row RentQTVc RentQTrw;  
  Integer i,rwcnt;
  val res;
  Boolean addf;
  
  res = 0;
  rwcnt = MatRowCnt(RentQTr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentQTr,i,RentQTrw);
    if (RentQTrw.Type==2) then begin
      addf = false;
      if (ReadFirstItem(RentQTrw.ArtCode,INr,true,true)) then begin
        if (INr.ItemType==3) then begin
          addf = true;
        end;
      end;
      if (addf) then begin
        res = res + RentQTrw.Sum;
      end;
    end;
  end;
  FindRentQTSumService = res;
  return;
end;

procedure RentQTPrintNote(record RentQTVc RentQTr,string argumentstr)
BEGIN
  record NotepadVc Noter;
  record RLinkVc RLr;
  Integer notenr;

  notenr = 1;
  while (ReadRecordLink(RentQTr,notenr,Noter,RLr)) begin
    if ((argumentstr==RLr.Comment) or (blank(argumentstr))) then begin
      PrintNote(Noter);
      goto LRentQTPrintNote;
    end;
    notenr = notenr + 1;
  end;
LRentQTPrintNote:;  
  RETURN;
END;

procedure CalcSubtotWithoutDisc(record RentQTVc RentQTr,var val res)
BEGIN
  row RentQTVc RentQTrw;  
  Integer i,rwcnt;
  
  res = 0;
  rwcnt = MatRowCnt(RentQTr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentQTr,i,RentQTrw);
    res = res + RentQTrw.Quant*RentQTrw.Price;
  end;    
  RETURN;        
END;

procedure PrintRentQTRows(record RcVc RepSpec,record RentQTVc RentQTr,record LangNrVc LangNrr,record SysFormatBlock SysFormatRec)
BEGIN
  Integer i,rwcnt,rownr;
  row RentQTVc RentQTrw;
  string 255 tstr;
  val t,t1;
  record INVc INr;
  val vatprc,vatval,vatexclprc,vatinclprc;
  record GeneralOptionBlock GenOptRec;
  record MainStockBlock MSb;
  Boolean testf;

  BlockLoad(GenOptRec);
  BlockLoad(MSb);
  rwcnt = MatRowCnt(RentQTr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentQTr,i,RentQTrw);
    testf = true;
    if (RepSpec.flags[3]) then begin
      if ((RentQTrw.Type==0) and (RentQTrw.InvItem=="") and (RentQTrw.Sum==BlankVal)) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      INr.Code = RentQTrw.ArtCode;
      if (ReadFirstMain(INr,1,true)) then begin
      end;
      OUTFORMFIELD("F_ARTNR",RentQTrw.ArtCode);
      OUTFORMFIELD("F_ARTNR2",RentQTrw.ArtCode);
      OUTFORMFIELD("F_RABATT",RentQTrw.vRebate);
      OUTFORMFIELD("F_MOMSKOD",RentQTrw.VATCode);
      OUTFORMFIELD("F_UNITCODE",INr.Unittext);
      GetItemCommodityCode(RentQTrw.ArtCode,tstr);
      OUTFORMFIELD("F_COMMODITYCODE",tstr);
      GetAlternativeItemCode(RentQTrw.ArtCode,tstr);
      OUTFORMFIELD("F_ALTERNATIVECODE",tstr);
      if (FIELDINFORM("F_ARTNRBC39")) then begin
        ItemBC39(RentQTrw.ArtCode,tstr);
        OUTFORMFIELD("F_ARTNRBC39",tstr);
      end;  
      if (FIELDINFORM("F_ARTNRBCEAN")) then begin
        ItemBCEAN(RentQTrw.ArtCode,tstr);
        OUTFORMFIELD("F_ARTNRBCEAN",tstr);
      end;  
      if (FIELDINFORM("F_ARTNRBCEAN13")) then begin
        ItemBCEAN13(RentQTrw.ArtCode,tstr);      
        OUTFORMFIELD("F_ARTNRBCEAN13",tstr);
      end;  
      OUTFORMFIELD("F_SPECIFIKATION",RentQTrw.Spec);
      tstr = ValToString(RentQTrw.Sum,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
      OUTFORMFIELD("F_BELOPP",tstr);
      tstr = ValToString(RentQTrw.Quant,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
      OUTFORMFIELD("F_ANTAL",tstr);

  		if (MSb.UnitConvCalc==0) then begin
        tstr = ValToString(RentQTrw.Quant*INr.UnitCoefficient,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
		  end else begin
        tstr = ValToString(RentQTrw.Quant/INr.UnitCoefficient,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
  		end;
      OUTFORMFIELD("F_ANTAL2",tstr);
      tstr = ValToString(RentQTrw.Price,M423Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
      OUTFORMFIELD("F_APRIS",tstr);
      if (INr.PriceFactor==blankval) then begin
        tstr = "";
      end else begin
        tstr = INr.PriceFactor;
      end;
      OUTFORMFIELD("F_PRICEFACTOR",tstr);
      if (INr.PriceFactor!=blankval) then begin
        t = RentQTrw.Price/INr.PriceFactor;
      end else begin
        t = RentQTrw.Price;
      end;
      tstr = ValToString(t,M423Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
      OUTFORMFIELD("F_UNITPRICE",tstr);      
      if (FIELDINFORM("F_ENHET")) then begin
        SelectUnitText(RentQTr.LangCode,INr.Unittext,tstr);
        OUTFORMFIELD("F_ENHET",tstr);
      end;  
      OUTFORMFIELD("F_VOLUME",INr.Volume);      
      OUTFORMFIELD("F_WIDTH",INr.Width);      
      OUTFORMFIELD("F_HEIGHT",INr.Height);      
      OUTFORMFIELD("F_DEPTH",INr.Depth);      
      OUTFORMFIELD("F_WEIGHT",INr.Weight);      
      OUTFORMFIELD("F_ROWWEIGHT",RentQTrw.Quant*INr.Weight);      
      OUTFORMFIELD("F_ROWVOLUME",RentQTrw.Quant*INr.Volume);  
      tstr = -RentQTrw.vRebate;
      if (nonblank(tstr)) then begin
        tstr = tstr & "%";
      end;
      OUTFORMFIELD("F_RABATTSPEC",tstr);      
      OUTFORMFIELD("F_AMOUNTROUNDED",Round(RentQTrw.Sum,SetRoundModeD(0)));      
/*
      t = RentQTrw.Sum*RentQTr.DiscPerc;
      t = t/100;
      OUTFORMFIELD("F_DIFFROWVALUE",t);      
*/
      if (nonblank(RentQTrw.ArtCode)) then begin
        rownr = rownr + 1;
        OUTFORMFIELD("F_ROWNR",rownr);      
      end;  
      CalcSum(1,RentQTrw.Price,INr.PriceFactor,RentQTrw.vRebate,t,GenOptRec.UseDiscount);
      tstr = ValToString(t,M423Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);      
      if (t==0) then begin
        t = blankval;
      end;
      OUTFORMFIELD("F_ROWPRICEREBATE",t);         
      t = MulRateToBase1(RentQTr.CurncyCode,RentQTrw.Price,RentQTr.FrRate,RentQTr.ToRateB1,RentQTr.ToRateB2,RentQTr.BaseRate1,RentQTr.BaseRate2,DefaultCurRoundOff);
      if (t==0) then begin
        t = blankval;
      end;
      OUTFORMFIELD("F_PRICEBASECURNCY1",t);      
      t = MulRateToBase2(RentQTr.CurncyCode,RentQTrw.Price,RentQTr.FrRate,RentQTr.ToRateB1,RentQTr.ToRateB2,RentQTr.BaseRate1,RentQTr.BaseRate2,DefaultCurRoundOff);
      if (t==0) then begin
        t = blankval;
      end;
      OUTFORMFIELD("F_PRICEBASECURNCY2",t);
      t = MulRateToBase1(RentQTr.CurncyCode,RentQTrw.Sum,RentQTr.FrRate,RentQTr.ToRateB1,RentQTr.ToRateB2,RentQTr.BaseRate1,RentQTr.BaseRate2,DefaultCurRoundOff);
      if (t==0) then begin
        t = blankval;
      end;
      OUTFORMFIELD("F_ROWPRICEBASECURNCY1",t);
      t = MulRateToBase2(RentQTr.CurncyCode,RentQTrw.Sum,RentQTr.FrRate,RentQTr.ToRateB1,RentQTr.ToRateB2,RentQTr.BaseRate1,RentQTr.BaseRate2,DefaultCurRoundOff);
      if (t==0) then begin
        t = blankval;
      end;
      OUTFORMFIELD("F_ROWPRICEBASECURNCY2",t);
      BuildKSerno(RentQTr.SerNr,RentQTrw.ArtCode,tstr);
      OUTFORMFIELD("F_KFAKTURANR",tstr);
/*
      QTVat(RentQTrw.stp,RentQTr.InclVAT,RentQTr.ExportFlag,RentQTrw.VATCode,RentQTrw.Sum,vatprc,vatval,vatexclprc,vatinclprc);
      if (FIELDINFORM("F_BASE1ROWVATVAL")) then begin
        t = MulRateToBase1(RentQTr.CurncyCode,vatval,RentQTr.FrRate,RentQTr.ToRateB1,RentQTr.ToRateB2,RentQTr.BaseRate1,RentQTr.BaseRate2,DefaultCurRoundOff);
        if (t==0) then begin
          t = blankval;
        end;
        OUTFORMFIELD("F_BASE1ROWVATVAL",t);    
      end;
      if (FIELDINFORM("F_BASE2ROWVATVAL")) then begin
        t = MulRateToBase2(RentQTr.CurncyCode,vatval,RentQTr.FrRate,RentQTr.ToRateB1,RentQTr.ToRateB2,RentQTr.BaseRate1,RentQTr.BaseRate2,DefaultCurRoundOff);
        if (t==0) then begin
          t = blankval;
        end;
        OUTFORMFIELD("F_BASE2ROWVATVAL",t);    
      end;
      if (FIELDINFORM("F_DIFFTOTVALUE")) then begin
        if (RentQTrw.Sum!=blankval) then begin
          t = vatexclprc*RentQTr.DiscPerc;
          t = t/100;
          if (t==0) then begin
            t = blankval;
          end;
          tstr = t;
          if (blank(tstr)) then begin
            tstr = USetStr(1244);
          end;  
          OUTFORMFIELD("F_DIFFTOTVALUE",tstr);
        end;
      end;
*/
      MulVATIV(RentQTrw.VATCode,RentQTrw.Sum,t,t1,RentQTr.InclVAT,0);
      OUTFORMFIELD("F_ROWTAXVAL",t1);    
      OUTFORMFIELD("F_ROWVATVAL",t);
      t1 = t + RentQTrw.Sum + t1;          
      OUTFORMFIELD("F_ROWSUMTOTAL",t1);    
      t = t + RentQTrw.Sum;          
      OUTFORMFIELD("F_ROWSUMWITHVAT",t);    
      GetVATdouble(RentQTrw.VATCode,t,t1,RentQTr.InclVAT);
      PrintValue("F_ROWVATPRC",t,M4Val,LangNrr,SysFormatRec,false);
      EndFormRow;
    end;
  end;  
LPrintQuotationRows:;  
  RETURN;
END;

global
procedure DoRentQTForm(record RcVc RepSpec,record RentQTVc RentQTr)
BEGIN
  record FormDefVc FDr;
  row FormDefVc FDrw;
  record AgreeTypeVc AgreeTyper;
  Integer i,rwcnt;
  record LangNrVc LangNrr;
  record CUVc CUr;
  string 255 tstr;
  record IIBlock IIRec;
  val t;
  record SysFormatBlock SysFormatRec;
  record DocVc Docr;
  record PRVc PRr;
  record AgreementVc Agreementr;
  
  Boolean printf,langf;
  Integer intdocnr;
  string 30 formcode,langcode;
    
  BlockLoad(SysFormatRec);  
  BlockLoad(IIRec);
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto L99;
  end;
  rwcnt = MatRowCnt(FDr);
  langcode = RentQTr.LangCode;
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(FDr,i,FDrw);
    if (FDrw.LangCode==langcode) then begin
      i = -1;
      langf = true;
    end;
  end;
  if (langf==false) then begin langcode = ""; end;
  GetLangNr(RentQTr.LangCode,LangNrr);
  Agreementr.SerNr = RentQTr.AgreementNr;
  ReadFirstMain(Agreementr,1,true);
  if (RepSpec.OnlyUnprntd==2) then begin
    Agreementr.Prntdf = 0;
  end;
  intdocnr = 1;
  printf = true;
  while (printf) begin  
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,RentQTr.SerNr,FDrw.PrintGroupCode,
                      langcode,intdocnr,"RentQTVc",formcode)) then
      begin
        goto LBREAK;
      end;
    end;
LBREAK:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin
          Docr.Code = formcode;
          if (ReadFirstMain(Docr,1,true)) then begin
          end;
          CommonDocumentFields(RepSpec);          
          NumberofDocumentPages(formcode,MatRowCnt(RentQTr));
          CUr.Code = RentQTr.CustCode;
          if (ReadFirstMain(CUr,1,true)) then begin
          end;
          PrintPersonsCustomerDetails(RentQTr.SalesMan);
          PrintRentQTText(RentQTr,false);
          PrintFreightPaid(RentQTr.ShipDeal);
          if (RepSpec.flags[29]!=0) then begin
            if (Agreementr.Prntdf==0) then begin
              OUTFORMFIELD("F_COPYTYPE",USetStr(18630));
            end else begin
              OUTFORMFIELD("F_COPYTYPE",USetStr(18631));
            end;
          end;
          if (Agreementr.OKFlag!=0) then begin
            if (Agreementr.Prntdf!=0) then begin
              FormWaterMark(1118,-1);
            end;
          end;
          OUTFORMFIELD("F_KUNDNAMN",RentQTr.Addr0);        
          OUTFORMFIELD("F_COMMENT",RentQTr.InvComment);        
          OUTFORMFIELD("F_OFFERTDATUM",RentQTr.TransDate);        
          OUTFORMFIELD("F_NUMMER",RentQTr.SerNr);        
          OUTFORMFIELD("F_KUNDNR",RentQTr.CustCode);        
          GetUserEmail(RentQTr.SalesMan,tstr);       
          OUTFORMFIELD("F_EMAIL",tstr);        
          OUTFORMFIELD("F_AVSNAME",RentQTr.ShipAddr0);        
          OUTFORMFIELD("F_AVSADRESS1",RentQTr.ShipAddr1);        
          OUTFORMFIELD("F_AVSADRESS2",RentQTr.ShipAddr2);        
          OUTFORMFIELD("F_AVSADRESS3",RentQTr.ShipAddr3);        
          OUTFORMFIELD("F_AVSADRESS4",RentQTr.DelAddr3);        
          OUTFORMFIELD("F_AVSADRESS5",RentQTr.DelAddr4); 
          if (FIELDINFORM("F_VILLKOR")) then begin
            GetPayDealText(RentQTr.PayDeal,RentQTr.LangCode,tstr);
            OUTFORMFIELD("F_VILLKOR",tstr);
          end;                   
          OUTFORMFIELD("F_VARREFERENS",RentQTr.OurContact);        
          OUTFORMFIELD("F_ERREFERENS",RentQTr.ClientContact);        
          OUTFORMFIELD("F_LEVSATT",RentQTr.ShipMode); 
          if (FIELDINFORM("F_LEVSATTTEXT")) then begin
            GetShipModeText(RentQTr.ShipMode,RentQTr.LangCode,tstr);
            OUTFORMFIELD("F_LEVSATTTEXT",tstr);
          end;
          OUTFORMFIELD("F_SALJARE",RentQTr.SalesMan);        
          PrintCurrencyCode("F_VALUTA",RentQTr.CurncyCode);
          OUTFORMFIELD("F_SHIPTERM",RentQTr.ShipDeal);        
          if (FIELDINFORM("F_SHIPTERMTEXT")) then begin
            GetShipDealText(RentQTr.ShipDeal,RentQTr.LangCode,tstr);
            OUTFORMFIELD("F_SHIPTERMTEXT",tstr);
          end;  
          if (FIELDINFORM("F_SALJARNAMN")) then begin
            GetUserName(RentQTr.SalesMan,tstr);
            OUTFORMFIELD("F_SALJARNAMN",tstr);
          end;  
          OUTFORMFIELD("F_ADRESSATT",RentQTr.Addr0);
          OUTFORMFIELD("F_ADRESSATT",RentQTr.ClientContact);
          OUTFORMFIELD("F_ADRESSATT",RentQTr.Addr1);
          OUTFORMFIELD("F_ADRESSATT",RentQTr.Addr2);
          OUTFORMFIELD("F_ADRESSATT",RentQTr.Addr3);
          OUTFORMFIELD("F_ADRESSATT",RentQTr.InvAddr3);
          OUTFORMFIELD("F_ADRESSATT",RentQTr.InvAddr4);
          OutAddress("F_ADRESS",RentQTr.Addr0,RentQTr.Addr1,RentQTr.Addr2,RentQTr.Addr3,RentQTr.InvAddr3,RentQTr.InvAddr4);
          OutAddress("F_LEVADRESS",RentQTr.ShipAddr0,RentQTr.ShipAddr1,RentQTr.ShipAddr2,RentQTr.ShipAddr3,RentQTr.DelAddr3,RentQTr.DelAddr4);
          OUTFORMFIELD("F_ADRESSNAMN",RentQTr.Addr0);
          OUTFORMFIELD("F_ADDR1",RentQTr.ClientContact);
          OUTFORMFIELD("F_ADDR2",RentQTr.Addr1);
          OUTFORMFIELD("F_ADDR3",RentQTr.Addr2);
          OUTFORMFIELD("F_ADDR4",RentQTr.Addr3);
          OUTFORMFIELD("F_INVADDR3",RentQTr.InvAddr3);
          OUTFORMFIELD("F_INVADDR4",RentQTr.InvAddr4);
          if (blank(RentQTr.Fax)) then begin
            tstr = CUr.Fax;
          end else begin
            tstr = RentQTr.Fax;
          end;  
          OUTFORMFIELD("F_KUNDFAX",tstr);
          if (blank(RentQTr.Phone)) then begin
            tstr = CUr.Phone;
          end else begin
            tstr = RentQTr.Phone;
          end;  
          OUTFORMFIELD("F_KUNDTEL",tstr);
          PrintSiteInformation(RentQTr.Site,RentQTr.CustCode);
          PrintLocationInformation(RentQTr.Location);
          if (FIELDINFORM("F_NOTE")) then begin
            GetFieldArgument(Docr,F_NOTE,tstr);
            RentQTPrintNote(RentQTr,tstr);
          end;
          tstr = ValToString(RentQTr.Sum1,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
          OUTFORMFIELD("F_SUMMA",tstr);      
          tstr = ValToString(RentQTr.Sum3,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
          OUTFORMFIELD("F_MOMS",tstr);      
          tstr = ValToString(RentQTr.Sum4,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
          OUTFORMFIELD("F_ATTBETALA",tstr);       
          if (FIELDINFORM("F_ATTBETALATEXT")) then begin
            ValToText(RentQTr.Sum4,M4Val,RentQTr.CurncyCode,RentQTr.LangCode,tstr);
            OUTFORMFIELD("F_ATTBETALATEXT",tstr);        
          end;
          if (FIELDINFORM("F_AMOUNTINTEXT")) then begin
            ValToText(RentQTr.Sum4,M4Val,RentQTr.CurncyCode,RentQTr.LangCode,tstr);
            OUTFORMFIELD("F_AMOUNTINTEXT",tstr);        
          end;
          if (FIELDINFORM("F_BASE1SUMMA")) then begin
            t = MulRateToBase1(RentQTr.CurncyCode,RentQTr.Sum4,RentQTr.FrRate,RentQTr.ToRateB1,RentQTr.ToRateB2,RentQTr.BaseRate1,RentQTr.BaseRate2,DefaultCurRoundOff);
            tstr = ValToString(t,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
            OUTFORMFIELD("F_BASE1SUMMA",tstr);
          end;
          if (FIELDINFORM("F_BASE2SUMMA")) then begin
            t = MulRateToBase2(RentQTr.CurncyCode,RentQTr.Sum4,RentQTr.FrRate,RentQTr.ToRateB1,RentQTr.ToRateB2,RentQTr.BaseRate1,RentQTr.BaseRate2,DefaultCurRoundOff);
            tstr = ValToString(t,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
            OUTFORMFIELD("F_BASE2SUMMA",tstr);
          end;
//          OUTFORMFIELD("F_AMOUNTWITHOUTDISCSUM",RentQTr.Sum4-RentQTr.DiscSum);        
          OUTFORMFIELD("F_NETTO",Round(RentQTr.Sum1 - RentQTr.Sum3,DefaultRoundMode));
          OUTFORMFIELD("F_NETTOROUNDED",Round(RentQTr.Sum1 - RentQTr.Sum3,SetRoundModeD(0)));
          if (FIELDINFORM("F_SUBTOTALWITHOUTDISCOUNT")) then begin
            CalcSubtotWithoutDisc(RentQTr,t);
            tstr = ValToString(t,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
            OUTFORMFIELD("F_SUBTOTALWITHOUTDISCOUNT",t);
            tstr = ValToString(t-RentQTr.Sum1,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
            OUTFORMFIELD("F_TOTALDISCOUNT",tstr);
          end;
          OUTFORMFIELD("F_TAXSUM",RentQTr.TAX1Sum);
          if (RentQTr.InclVAT==0) then begin
            t = RentQTr.Sum3+RentQTr.Sum1;
          end else begin
            t = RentQTr.Sum1;
          end;
          OUTFORMFIELD("F_SUBTOTALWITHVAT",t);          

          OUTFORMFIELD("F_STARTDATUM",RentQTr.startDate);
          OUTFORMFIELD("F_ENDDATE",RentQTr.endDate);
          PrintRentQTRows(RepSpec,RentQTr,LangNrr,SysFormatRec);
          OUTFORMFIELD("F_GILTIGTDATUM",RentQTr.ValidUntilDate);
          AgreeTyper.Code = RentQTr.AgreeType;
          if (ReadFirstMain(AgreeTyper,1,true)==false) then begin
            AgreeTyper.Comment = "";
          end;
          if (nonblank(AgreeTyper.Comment)) then begin
            OUTFORMFIELD("F_CHARGESCODE",AgreeTyper.Comment);
          end else begin
            OUTFORMFIELD("F_CHARGESCODE",AgreeTyper.Code);
          end;
          OUTFORMFIELD("F_ACTTYPE",AgreeTyper.Code);
          OUTFORMFIELD("F_ACTTYPECOMMENT",AgreeTyper.Comment);  
          OUTFORMFIELD("F_TOTWEIGHT",FindRentQTTotWeight(RentQTr));
          OUTFORMFIELD("F_SUMPRIS",FindRentQTSumRent(RentQTr));
          OUTFORMFIELD("F_SUMSTOCKED",FindRentQTSumCharge(RentQTr));
          OUTFORMFIELD("F_SUMOTHER",FindRentQTSumFreebies(RentQTr));
          OUTFORMFIELD("F_SUMTIME",FindRentQTSumService(RentQTr));
          OUTFORMFIELD("F_SUMMATERIAL",FindRentQTSumChargePlain(RentQTr));
          OUTFORMFIELD("F_RATE",FindCustIntRate(RentQTr.CustCode));
          OUTFORMFIELD("F_AGREEMENT",RentQTr.AgreementNr);
          OUTFORMFIELD("F_CLASS",RentQTr.QuoteClass);
//          QTSetFax(CUr,RentQTr);
          CloseForm;
          queued.SetAgreementPrntdf(RentQTr.AgreementNr);
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
L99:;
  RETURN;
END;
