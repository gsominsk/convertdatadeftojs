external procedure CUGetStartBalance(record CUVc,string,string,Date,var val,Boolean);
external procedure YcToStr(Integer,var string);
external function Integer GetIntYc(Date);
external function Integer TypeOfCurncy(var string,var Integer);
//external function Integer DefaultCurRoundOff();
external procedure BeginCurncyTotals(var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external procedure PrintPrepaymentsNrsIP(Integer,record RcVc,string,Boolean,Integer,Integer);
external function string 255 CreateInvoiceNumber(LongInt,string);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function LongInt DateDiff(Date,Date);
external procedure OneARSFormOpenOnDate(record RcVc,record CUVc,Integer,var val,var Integer,var Integer);
external procedure CustAged(record CUVc,Date,Date,Date,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val,boolean);
external procedure GetBaseCurncy(Integer,var string);
external procedure PrintARSForm2(record RcVc,record CUVc,
                                val,val,val,val,val,val,val,val,
                                Integer,Integer,
                                val,val,val,val,val,val,val,val,val,
                                val,val,val,val,val,val,val,val,val,val,
                                Array Integer,Array string,Array LongInt,Array LongInt,
                                Array Date,Array Date,Array val,Array val,Array val,Array val,
                                Array string,Array string,Array string,Array string,Integer);
external procedure CalcInt2(Boolean,val,LongInt,val,var val);
external function Integer RemLevelOneUpQueued(LongInt,Integer,Boolean,Boolean);
external procedure GetOnAccBalance(record RcVc,string,string,Boolean,Integer,var val,var val,var val,var val,var val,var val,var val,record SMVc,
                   Array string,Array val,var Integer);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Integer SclassInEclass(Array string,string);
external procedure HTObj(string,var string);
external procedure HTInvSel(Integer, var string);
external procedure HTCustCat(string,var string);
external procedure HTCusts(string, string, var string);
external procedure SplitEclass(string,var Array string);

procedure AddARSRowInstallments(Array Integer aRwtype,Array string aInvoiceNr,Array string aRecNr,Array LongInt alatedays,Array LongInt aRemndr,
                    Array Date aInvDate,Array Date aDueDate,Array val aIntVal,Array val aRVal,Array val aRValCur,Array val aSum4,
                    Array string aVEInvNo,Array string aCurncyCode,var Integer acnt,
                    record RcVc RepSpec,record CUVc CUp,LongInt maxintdays,record ARInstallVc ARIp,record IVVc IVp,var val intvp,
                    record IIBlock IIRec)
BEGIN
  LongInt intdays;
  val t;
  Date blankd;
  val intrate;
  
  intrate = IIRec.IntRate;
  if (CUp.IntRate!=0) then begin
    intrate = CUp.IntRate;
  end;
  if (IIRec.IntModel==0) then begin
    t = StringToVal(IVp.IntCode,M4Val);
    if (t!=0) then begin
      intrate = t;
    end;
  end;
  aRwtype[acnt] = IVp.InvType;
  aInvoiceNr[acnt] = ARIp.InvoiceNr;
  aInvDate[acnt] = IVp.InvDate;
  aDueDate[acnt] = ARIp.DueDate;
  aRVal[acnt] = ARIp.BookRVal;
  aRValCur[acnt] = ARIp.RVal;
  aSum4[acnt] = IVp.Sum4;
  alatedays[acnt] = DateDiff(ARIp.DueDate,RepSpec.d1);
  aIntVal[acnt] = blankval;
  aCurncyCode[acnt] = ARIp.ARCurncyCode;
  if (HasLocalization("DEN")) then begin
    if (maxintdays!=-1) then begin
      intdays = -alatedays[acnt];
      if (intdays>maxintdays) then begin intdays = maxintdays; end;
      if (intdays>0) then begin
        CalcInt2(false,aRVal[acnt],intdays,intrate,t);
        aIntVal[acnt] = t;
      end;
    end;
  end else begin
    intdays = -alatedays[acnt];
    if (intdays>0) then begin
      if ((IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales) and (IVp.InvType!=kInvoiceTypeInterest)) then begin
        t = MulRateToBase1(ARIp.ARCurncyCode,aRVal[acnt],IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
        CalcInt2(false,t,intdays,intrate,t);
        aIntVal[acnt] = t;
      end;
    end;
  end;
  if (RepSpec.flags[2]==1) then begin
    if (IVp.LastRemndr==-1) then begin
      aRemndr[acnt] = 1;
    end else begin
      aRemndr[acnt] = IVp.LastRemndr + 1;
    end;
  end else begin
    aRemndr[acnt] = IVp.LastRemndr;
  end;
  if (ARIp.ARCurncyCode==CUp.CurncyCode) then begin
    intvp = aIntVal[acnt];
  end else begin
    if (blank(CUp.CurncyCode)) then begin
      intvp = MulRateToBase1(ARIp.ARCurncyCode,aIntVal[acnt],IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
    end else begin
      intvp = DivRateToBase1(CUp.CurncyCode,aIntVal[acnt],IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
    end;
  end;   
  if ((CUp.InterestFlag==0) or (IVp.NoInterestFlag!=0)) then begin
    intvp = blankval;
    aIntVal[acnt] = blankval;
  end;  
  acnt = acnt + 1;
  RETURN;
END;

procedure AddARSInstallments(Array Integer aRwtype,Array string aInvoiceNr,Array string aRecNr,Array LongInt alatedays,Array LongInt aRemndr,
                    Array Date aInvDate,Array Date aDueDate,Array val aIntVal,Array val aRVal,Array val aRValCur,Array val aSum4,
                    Array string aVEInvNo,Array string aCurncyCode,var Integer acnt,
                    record RcVc RepSpec,record CUVc CUp,LongInt maxintdays,record IVVc IVp,var val intv,
                    record IIBlock IIRec)
BEGIN
  record ARInstallVc ARIr;
  Boolean TrHs;
  
  ARIr.InvoiceNr = IVp.SerNr;
  TrHs = true;
  while (LoopMain(ARIr,1,TrHs)) begin
    if (ARIr.InvoiceNr!=IVp.SerNr) then begin TrHs = false; end;
    if (TrHs) then begin
      AddARSRowInstallments(aRwtype,aInvoiceNr,aRecNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRValCur,aSum4,aVEInvNo,aCurncyCode,acnt,
                RepSpec,CUp,maxintdays,ARIr,IVp,intv,IIRec);
    end;
  end;  
  RETURN;
end;

global
procedure AddARSRow(Array Integer aRwtype,Array string aInvoiceNr,Array string aRecNr,Array LongInt alatedays,Array LongInt aRemndr,
                    Array Date aInvDate,Array Date aDueDate,Array val aIntVal,Array val aRVal,Array val aRValCur,Array val aSum4,
                    Array string aVEInvNo,Array string aCurncyCode,Array string aOfficialSerNo,var Integer acnt,
                    record RcVc RepSpec,record CUVc CUp,LongInt maxintdays,record ARVc ARp,record IVVc IVp,var val intvp)
BEGIN
  LongInt intdays;
  record IIBlock IIRec;
  val t;
  Date blankd;
  string 255 recnr;
  record IPrsVc IPrsr;
  record TRVc TRr;
  record PurgeTRVc PurgeTRr;

  BlockLoad(IIRec);
  if (IVp.InstallmentInv!=0 and RepSpec.flags[19]!=0) then begin
    AddARSInstallments(aRwtype,aInvoiceNr,aRecNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRValCur,aSum4,aVEInvNo,aCurncyCode,acnt,
                       RepSpec,CUp,maxintdays,IVp,intvp,IIRec);
    goto LAddARSRow;
  end;

  IPrsr.IVNr = ARp.InvoiceNr;
  IPrsr.TransType = kIPrsTransTypeInvoice;
  if (ReadFirstKey("IVKey",IPrsr,2,true)) then begin
    recnr = ARp.InvoiceNr;
  end else begin
    IPrsr.IVNr = ARp.InvoiceNr;
    IPrsr.TransType = kIPrsTransTypeNLTransaction;
    if (ReadFirstKey("IVKey",IPrsr,2,true)) then begin
      TRr.Number = IPrsr.TransNr;
      TRr.IntYc = GetIntYc(IPrsr.TransDate);                
      if (ReadFirstMain(TRr,2,true)) then begin
        YcToStr(TRr.IntYc,recnr);     
        recnr = recnr & "." & TRr.Number;
      end;
    end else begin
      IPrsr.IVNr = ARp.InvoiceNr;
      IPrsr.TransType = kIPrsTransTypePurgeNLTransaction;
      if (ReadFirstKey("IVKey",IPrsr,2,true)) then begin
        PurgeTRr.Number = IPrsr.TransNr;
        PurgeTRr.IntYc = GetIntYc(IPrsr.TransDate);                
        if (ReadFirstMain(PurgeTRr,2,true)) then begin
          YcToStr(PurgeTRr.IntYc,recnr);     
          recnr = recnr & "." & PurgeTRr.Number;
        end;
      end;
    end;
  end;

  aRwtype[acnt] = IVp.InvType;
  aInvoiceNr[acnt] = ARp.InvoiceNr;
  aRecNr[acnt] = recnr;
  aInvDate[acnt] = IVp.InvDate;
  aDueDate[acnt] = ARp.DueDate;
  if (blankdate(aDueDate[acnt])) then begin
    aDueDate[acnt] = IVp.PayDate;
  end;
  aRVal[acnt] = ARp.BookRVal;
  aRValCur[acnt] = ARp.RVal;
  if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
    aSum4[acnt] = -IVp.Sum4;
  end else begin
    aSum4[acnt] = IVp.Sum4;
  end;
  alatedays[acnt] = DateDiff(ARp.DueDate,RepSpec.d1);
  aIntVal[acnt] = blankval;
  aOfficialSerNo[acnt] = IVp.OfficialSerNr;
  if (RepSpec.flags[4]!=0) then begin
    aCurncyCode[acnt] = ARp.ARCurncyCode;
  end;
  if (HasLocalization("DEN")) then begin
    if (maxintdays!=-1) then begin
      intdays = -alatedays[acnt];
      if (intdays>maxintdays) then begin intdays = maxintdays; end;
      if (intdays>0) then begin
        CalcInt2(false,aRVal[acnt],intdays,IIRec.IntRate,t);
        aIntVal[acnt] = t;
      end;
    end;
  end else begin
    intdays = -alatedays[acnt];
    if (intdays>0) then begin
      if ((IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales) and (IVp.InvType!=kInvoiceTypeInterest)) then begin
        t = MulRateToBase1(ARp.ARCurncyCode,aRVal[acnt],IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
        CalcInt2(false,t,intdays,IIRec.IntRate,t);
        aIntVal[acnt] = t;
      end;
    end;
  end;
  if (RepSpec.flags[2]==1) then begin
    if (IVp.LastRemndr==-1) then begin
      aRemndr[acnt] = IVp.LastRemndr + 2;
    end else begin
      aRemndr[acnt] = IVp.LastRemndr + 1;
    end;
  end else begin
    aRemndr[acnt] = IVp.LastRemndr;
  end;
  if (ARp.ARCurncyCode==CUp.CurncyCode) then begin
   intvp = aIntVal[acnt];
  end else begin
    if (blank(CUp.CurncyCode)) then begin
      intvp = MulRateToBase1(ARp.ARCurncyCode,aIntVal[acnt],IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
    end else begin
      intvp = DivRateToBase1(CUp.CurncyCode,aIntVal[acnt],IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
    end;
  end;
  if ((CUp.InterestFlag==0) or (IVp.NoInterestFlag!=0)) then begin
    intvp = blankval;
    aIntVal[acnt] = blankval;
  end;  
  acnt = acnt + 1;
LAddARSRow:;  
  RETURN;
END;

function Integer CompCUTurnover(record CUVc CUr,val vals0,Date sd,Date ed)
BEGIN
  Integer res;
  val t;
  
  if (nonblank(CUr.CurncyCode)) then begin
    t = GetTurnover(CUr,"salesinclvat",sd,ed);
  end else begin
    t = GetTurnover(CUr,"balance",sd,ed);
  end;
  if (t>vals0) then begin
    res = 1;
  end else begin
    res = -1;
  end;
  CompCUTurnover = res;
  RETURN;
END;

function Boolean CheckIVNr(string cucode,LongInt minivnr)
BEGIN
  Boolean res;
  Boolean TrHs;
  record IVVc IVr;
  LongInt ivnr;
  
  ivnr = 0;
  TrHs = true;
  IVr.CustCode = cucode;
  while (LoopKey("CustCode",IVr,1,TrHs)) begin
    if (IVr.CustCode!=cucode) then begin TrHs = false; end;
    if (TrHs) then begin
      ivnr = ivnr + 1;
      if (ivnr>=minivnr) then begin 
        res = true; 
        goto LCheckIVNr;
      end;
    end;
  end;
LCheckIVNr:;  
  CheckIVNr = res;
  RETURN;
END;

procedure PintARSHeader(record RcVc RepSpec,string frcc,string tocc,string a,string b)
BEGIN
  Integer rw;
  string 255 tstr;

  rw = 1;
  HTCusts(frcc,tocc,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTInvSel(RepSpec.flags[0],tstr);
  Header(rw,tstr,0);
  HTCustCat(RepSpec.f3,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.ObjStr)) then begin
    HTObj(RepSpec.ObjStr,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f2)) then begin
    if (blank(a) and blank(b)) then begin
    end else begin
      tstr = USetStr(4908) & " ";
      tstr = tstr & a;
      if (a!=b) then begin
        tstr = tstr & " : ";
        tstr = tstr & b;
      end;
    end;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblankdate(RepSpec.d1)) then begin
    Header(rw,RepSpec.d1,1);
    rw = rw + 1;
  end else begin
  end;
  RETURN;
END;

procedure PrintHeaderLine(record RcVc RepSpec)
BEGIN
  SetRepCol(2,60);
  SetRepCol(3,288);
  SetRepCol(4,384);
  SetRepCol(5,293);
  SetRepCol(6,140);
  SetRepCol(9,221);
  StartFormat(15);
  OutString(0,0,USetStr(2542),false);
  OutString(120,0,USetStr(2543),false);
  OutString(200,0,USetStr(2544),false);
  if (RepSpec.flags[0]==2) then begin
    OutString(260,0,USetStr(2545),false);
  end else begin
    OutString(280,0,USetStr(2545),false);
  end;;
  OutString(390,0,USetStr(2546),true);
  OutString(1,0,USetStr(2548),true);
  EndFormat;
  if (nonblank(RepSpec.f2)) then begin
    StartFormat(15);
    OutString(120,0,USetStr(4908),false);
    EndFormat;
  end;
  RETURN;
END;

global
procedure ARSrList(record RcVc RepSpec,record CUVc CUp,val ARSSum,val ARSOnAccBal,val ARSIntSum,val s0,val s1,val s16,val s31,val s61,val s91,val s121,val s151,
                   Array Integer aRwtype,Array string aInvoiceNr,Array string aRecNr,Array LongInt alatedays,Array LongInt aRemndr,
                   Array Date aInvDate,Array Date aDueDate,Array val aIntVal,Array val aRVal,Array val aRValCur,Array val aSum4,
                   Array string aVEInvNo,Array string aCurncyCode,Array string aOfficialSerNo,Integer acnt,var Integer custcnt,var Integer totinvcnt)
BEGIN
  Integer i;
  Boolean testf;
  string 255 tstr;
  val arsum;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt;
  Boolean printedcuf;
  record AgedBlock Ab;
  Integer oldstyle;
  Integer invcnt;
  
  invcnt = 0;
  BlockLoad(Ab);
  BeginCurncyTotals(curcnt);
  for (i=0;i<acnt;i=i+1) begin
    testf = true;
    if (testf) then begin
      if (!printedcuf) then begin
        if (RepSpec.flags[5]!=1) then begin
          Gray_Divider(0,1);
          OutString(0,0,CUp.Code,false);
          OutString(100,0,CUp.Name,false);
          if (RepSpec.flags[4]==1) then begin  
            OutString(1,0,CUp.CurncyCode,true);
          end;
          EndFormat;
          StartFormat(15);
          OutString(0,0,CUp.Phone,false);
          OutString(120,0,CUp.Fax,false);
          OutString(240,0,CUp.SalesMan,false);
          EndFormat;
        end;
        printedcuf = true;
      end;
      switch (aRwtype[i]) begin
        case 10:
        case 0:
        otherwise
          invcnt = invcnt + 1;
      end;
      if (RepSpec.flags[5]==0) then begin
        StartFormat(15);
        if (RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel) then begin
          if (RepSpec.flags[15]!=0) then begin
            OutString(80,0,"",false);
          end else begin
            OutString(80,0,"",false);
            OutString(80,0,"",false);
          end;
        end;
        if (RepSpec.flags[15]!=0) then begin
          OutString(80,0,aOfficialSerNo[i],false);
        end;
        switch (aRwtype[i]) begin
          case 10:
            OutString(200,"DblIPVc",aInvoiceNr[i],false);
          case 0:
            OutStringID(200,"DblTrans2",CreateInvoiceNumber(aInvoiceNr[i],aOfficialSerNo[i]),false,aRecNr[i]);
          otherwise
            OutString(200,"DblCustPS2",CreateInvoiceNumber(aInvoiceNr[i],aOfficialSerNo[i]),false);
        end;
        if (RepSpec.flags[0]==2) then begin
          OutDate(260,0,aDueDate[i],false);
        end else begin
          OutDate(280,0,aDueDate[i],false);
        end;
        if (Ab.ShowDelayDays!=0) then begin
          if (alatedays[i]<0) then begin
            OutLongInt(390,0,-alatedays[i],true);      
          end else begin
            OutLongInt(390,0,0,true);      
          end;
        end else begin      
          if (alatedays[i]==-1) then begin
            OutString(390,0,alatedays[i],true);      
          end else begin
            OutLongInt(390,0,alatedays[i],true);      
          end;
        end;
        if (RepSpec.flags[4]==0) then begin
          OutVal(480,0,aRVal[i],M4Val,true);
        end else begin
          if (TypeOfCurncy(CUp.CurncyCode,oldstyle)!=1) then begin
            if (oldstyle==0) then begin
              OutVal(440,0,aRValCur[i],M4Val,true);
              OutString(480,0,aCurncyCode[i],true);
            end else begin
              OutVal(440,0,aRValCur[i],M4Val,true);
              OutString(480,0,aCurncyCode[i],true);
            end;
          end else begin
            if (aCurncyCode[i]!=CUp.CurncyCode) then begin
              OutVal(440,0,aRValCur[i],M4Val,true);
              OutString(480,0,aCurncyCode[i],true);
            end else begin
              OutVal(480,0,aRVal[i],M4Val,true);
            end;
          end;        
        end;
/*        
        if ((aCurncyCode[i]!=CUp.CurncyCode) and (RepSpec.flags[4]==1)) then begin
          OutVal(440,0,aRValCur[i],M4Val,true);
          OutString(480,0,aCurncyCode[i],true);
        end else begin
          OutVal(480,0,aRVal[i],M4Val,true);
        end;
*/        
        EndFormat;
      end;
      if (RepSpec.flags[4]==0) then begin
        AddCurncyTotals(acur,av1,curcnt,"",aRVal[i]);
      end else begin
        AddCurncyTotals(acur,av1,curcnt,aCurncyCode[i],aRValCur[i]);
      end;
    end;
  end;
  arsum = ARSSum;
  if (ARSOnAccBal!=0) then begin
    if (!printedcuf) then begin
      if (RepSpec.flags[5]!=1) then begin
        Gray_Divider(0,1);
        OutString(0,0,CUp.Code,false);
        OutString(100,0,CUp.Name,false);
        if (RepSpec.flags[4]==1) then begin  
          OutString(1,0,CUp.CurncyCode,true);
        end;
        EndFormat;
        StartFormat(15);
        OutString(0,0,CUp.Phone,false);
        OutString(120,0,CUp.Fax,false);
        OutString(240,0,CUp.SalesMan,false);
        EndFormat;
      end;
      printedcuf = true;
    end;
    if (RepSpec.flags[4]==0) then begin
      AddCurncyTotals(acur,av1,curcnt,"",ARSOnAccBal);
    end else begin
      AddCurncyTotals(acur,av1,curcnt,CUp.CurncyCode,ARSOnAccBal);
    end;
    if (RepSpec.flags[5]==0) then begin
      StartFormat(15);
      OutString(200,0,USetStr(11857),false);
      OutVal(1,0,ARSOnAccBal,M4Val,true);
      EndFormat;
    end;
    arsum = arsum + ARSOnAccBal;
    if (RepSpec.flags[14]!=0 and RepSpec.flags[5]==0) then begin
      if (RepSpec.flags[4]==0) then begin
        PrintPrepaymentsNrsIP(RepSpec.flags[4],RepSpec,CUp.Code,nonblankdate(RepSpec.d1),200,1);
      end else begin
        PrintPrepaymentsNrsIP(RepSpec.flags[4],RepSpec,CUp.Code,nonblankdate(RepSpec.d1),200,440);
      end;
    end;
  end;
  if (printedcuf) then begin
    if (RepSpec.flags[5]==0) then begin
      Black_Divider(370,1);
      PrintCurncyTotals(acur,av1,av2,av3,curcnt,480,-1,-1,320,false,RepSpec.PocketPC);
    end;
    if (RepSpec.flags[5]==2) then begin
      StartFormat(15);
      EndFormat;
      StartFormat(15);
      OutString(380,0,USetStr(2552),true);
      OutString(1,0,USetStr(2567),true);
      EndFormat;
      Black_Divider(310,1);
      StartFormat(15);
      OutLongInt(380,0,invcnt,true);
      OutString(420,0,acur[0],false);
      OutVal(1,0,av1[0],M4Val,true);
      EndFormat;
    end;
    custcnt = custcnt + 1;
  end;
  totinvcnt = totinvcnt + invcnt;
/*  
  StartFormat(15);
  switch (GetVATLaw) begin
    case 7://vatDanish
      OutVal(360,0,ARSIntSum,M4Val,true);
  end;
  OutVal(1,0,arsum,M4Val,true);
  EndFormat;
*/  
  return;
end;

global
procedure OneARSFormOpen(record RcVc RepSpec,record CUVc CUp,Integer reportmode,var val balp,var Integer custcnt,var Integer invcnt)
begin
  record ARVc ARr;
  record IVVc IVr;
  Integer rwcnt;
  Boolean TrHs;
  val ARSSum;
  val ARSIntSum;
  val ARSSumNotLate;
  val ARSSumLate;
  Integer ARSLateCount;
  Integer ARSNotLateCount;
  val ARSARSum;
  val ARSsact,ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151;
  val ARSSumod,ARSsactod,ARSs0od,ARSs1od,ARSs16od,ARSs31od,ARSs61od,ARSs91od,ARSs121od,ARSs151od;
  val ARSStartBal;
  val ARSOnAccBal,ARSOnAccBalb1;
  val intv;
  LongInt latedays,maxintdays;
  Boolean testf;
  val rval,rval2;
  val fr,to1,to2,br1,br2;
  Boolean onaccf;
  record SMVc CurTotalsr;
  val sumbooked,sumnow,sumcurncy,sumdiff;
  Integer remlev;
  Array Integer aRwtype;
  Array string 255 aInvoiceNr;
  Array string 255 aRecNr;
  Array LongInt alatedays;
  Array LongInt aRemndr;
  Array Date aInvDate;
  Array Date aDueDate;
  Array val aIntVal;
  Array val aRVal;
  Array val aRValCur;
  Array val aSum4;
  Array string 20 aVEInvNo;
  Array string 5 aCurncyCode;
  Array string 100 aOfficialSerNo;
  Array string 50 aCustOrdNo;
  Integer acnt;
  string 10 basecur1;
  Date bd;
  Array string 10 debaccs;
  Array val debbal;
  Integer debcnt;
  Boolean remlevf,notfullmonthf;
  record CSVc CSr;
  
  ARSsactod = 0.00;
/*
done queued
  if ((reportmode==0) and (RepSpec.flags[2]==1)) then begin
    if (CUp.RemndrFlag!=0) then begin
      DBHold;
    end;
  end;
*/  
  GetBaseCurncy(1,basecur1);
  if (blank(CUp.CurncyCode)) then begin
    CUp.CurncyCode = basecur1;
  end;
  if (nonblankdate(RepSpec.d1)) then begin
    maxintdays = DateDiff(CurrentDate,RepSpec.d1);
  end else begin
    maxintdays = -1;
  end;
  GetFullCurncyRate(CUp.CurncyCode,CurrentDate,fr,to1,to2,br1,br2);
  if (RepSpec.repname!="ARSForm") then begin
    notfullmonthf = GetDay(RepSpec.sStartDate)!=1;
    CSr.CustCode = CUp.Code;
    if (ReadFirstMain(CSr,1,true)) then begin
      if (notfullmonthf) then begin
        CUGetStartBalance(CUp,"balance","",AddDay(RepSpec.sStartDate,0),ARSStartBal,true);//need to exclude start day, which is done inside CUGetStartBalance
      end else begin
        CUGetStartBalance(CUp,"balance","",RepSpec.sStartDate,ARSStartBal,true);
      end;
    end;
  end;    
  rwcnt = 0;
  GetOnAccBalance(RepSpec,CUp.Code,CUp.CurncyCode,false,RepSpec.flags[4],ARSOnAccBalB1,rval2,ARSOnAccBal,sumbooked,sumnow,sumcurncy,sumdiff,CurTotalsr,debaccs,debbal,debcnt);//ObjStr
  if (ARSOnAccBalB1==0) then begin
    ARSOnAccBal = 0;
  end;

  if (RepSpec.flags[4]==0) then begin ARSOnAccBal = ARSOnAccBalB1; end;
  if (CUp.Code!=ARr.CustCode) then begin
    if (ARSOnAccBal!=0) then begin onaccf = true; end;
  end;
  ARr.InvoiceNr = 0;
  ARr.CustCode = CUp.Code;
  TrHs = true;
//  SetLoopPosition(ARr,RepSpec.long2);
  while (LoopKey("CustCode",ARr,2,TrHs)) begin
    testf = true;
    if (TrHs) then begin
      if (CUp.Code!=ARr.CustCode) then begin TrHs = false; end;
    end;
    if (TrHs==false) then begin testf = false; end;
    if (testf) then begin    
      IVr.SerNr = ARr.InvoiceNr;
      if (ReadFirstMain(IVr,1,true)) then begin end;
      if (IVr.Invalid!=0) then begin goto L20OneARSFormOpen; end;
      if ((IVr.DisputedFlag!=0) and (RepSpec.flags[11]!=0)) then begin
        goto L20OneARSFormOpen;
      end;
      if (RepSpec.flags[12]!=0) then begin
        if (IVr.NoRemndrFlag!=0) then begin
          goto L20OneARSFormOpen;
        end;
        if (CUp.RemndrFlag==0) then begin
          goto L20OneARSFormOpen;
        end;
      end;
      if ((IVr.NoColectionFlag!=0) and (RepSpec.flags[13]!=0)) then begin
        goto L20OneARSFormOpen;
      end;
      if ((IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) and (RepSpec.flags[9]==0)) then begin
        goto L20OneARSFormOpen;
      end;
      if ((IVr.InvType!=kInvoiceTypeDownpayment) and (RepSpec.flags[10]!=0)) then begin
        goto L20OneARSFormOpen;
      end;
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,IVr.Objects)==false) then begin
          goto L20OneARSFormOpen;
        end;
      end;
      if (nonblankdate(ARr.DueDate)) then begin
        latedays = DateDiff(ARr.DueDate,RepSpec.d1);
      end else begin
        latedays = DateDiff(IVr.PayDate,RepSpec.d1);
      end;
      if (RepSpec.Comparison!=0) then begin
        if ((-latedays)<RepSpec.Comparison) then begin goto L20OneARSFormOpen; end;
      end;
      if (RepSpec.flags[4]==0) then begin
        ARr.RVal = MulRateToBase1(IVr.CurncyCode,ARr.RVal,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
      end;
      remlevf = false;
      if ((RepSpec.flags[0]==0) or (latedays<0)) then begin
        if (IVr.CurncyCode==CUp.CurncyCode) then begin
          rval = ARr.RVal;
        end else begin
          if (blank(CUp.CurncyCode)) or (CUp.CurncyCode==basecur1) then begin
            rval = ARr.RVal;
          end else begin
            rval = DivRateToBase1(CUp.CurncyCode,ARr.BookRVal,fr,to1,to2,br1,br2,DefaultCurRoundOff);
          end;
        end;
        switch (RepSpec.flags[0]) begin
          case 0:
            if (IVr.CurncyCode==CUp.CurncyCode) then begin
              ARSSum = ARSSum + rval;
            end else begin
              if (blank(CUp.CurncyCode)) or (CUp.CurncyCode==basecur1) then begin
                if (RepSpec.flags[4]==0) then begin
                  ARSSum = ARSSum + rval;
                end else begin
                  ARSSum = ARSSum + MulRateToBase1(IVr.CurncyCode,rval,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                end;
              end else begin
                ARSSum = ARSSum + rval;
              end;
            end;
            if (latedays>-1) then begin//-2???
              if (RepSpec.flags[4]==0) then begin
                ARSSumNotLate = ARSSumNotLate + MulRateToBase1(IVr.CurncyCode,rval,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);;
              end else begin                
                ARSSumNotLate = ARSSumNotLate + rval;
              end;
              ARSNotLateCount = ARSNotLateCount + 1;
              AddARSRow(aRwtype,aInvoiceNr,aRecNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRValCur,aSum4,aVEInvNo,aCurncyCode,aOfficialSerNo,acnt,
                        RepSpec,CUp,maxintdays,ARr,IVr,intv);
              ARSIntSum = ARSIntSum + intv;
            end else begin
              if (RepSpec.flags[4]==0) then begin
                ARSSumLate = ARSSumLate + MulRateToBase1(IVr.CurncyCode,rval,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);;
              end else begin                
                ARSSumLate = ARSSumLate + rval;
              end;
              ARSLateCount = ARSLateCount + 1;
              remlevf = (reportmode==0) and (RepSpec.flags[2]!=0) and (CUp.RemndrFlag!=0);
              AddARSRow(aRwtype,aInvoiceNr,aRecNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRValCur,aSum4,aVEInvNo,aCurncyCode,aOfficialSerNo,acnt,
                        RepSpec,CUp,maxintdays,ARr,IVr,intv);
              ARSIntSum = ARSIntSum + intv;
            end;
          case 2:
            if (latedays<=-1) then begin//-2???
              if (IVr.CurncyCode==CUp.CurncyCode) then begin
                ARSSum = ARSSum + rval;
              end else begin
                if (blank(CUp.CurncyCode)) or (CUp.CurncyCode==basecur1) then begin
                  if (RepSpec.flags[4]==0) then begin
                    ARSSum = ARSSum + rval;
                  end else begin
                    ARSSum = ARSSum + MulRateToBase1(IVr.CurncyCode,rval,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                  end;
                end else begin
                  ARSSum = ARSSum + rval;
                end;
              end;
              if (RepSpec.flags[4]==0) then begin
                ARSSumLate = ARSSumLate + MulRateToBase1(IVr.CurncyCode,rval,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);;
              end else begin                
                ARSSumLate = ARSSumLate + rval;
              end;
              ARSLateCount = ARSLateCount + 1;
              remlevf = (reportmode==0) and (RepSpec.flags[2]!=0);
              if (reportmode==0) then begin
                if (RepSpec.flags[2]!=0) then begin
                  remlevf = true;
                end;
              end;
              AddARSRow(aRwtype,aInvoiceNr,aRecNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRValCur,aSum4,aVEInvNo,aCurncyCode,aOfficialSerNo,acnt,
                        RepSpec,CUp,maxintdays,ARr,IVr,intv);
              ARSIntSum = ARSIntSum + intv;
            end;
        end;
//        RepSpec.long2 = GetLoopPosition(ARr);
      end;
      if (remlevf) then begin
        remlev = RemLevelOneUpQueued(ARr.InvoiceNr,reportmode,true,false);
      end;
    end;
L20OneARSFormOpen:;
  end;
//prepayments here 

//Move above to another function that is qupdating
//Move below to another function 

  if (RepSpec.flags[14]!=0) then begin 
  end;
  CustAged(CUp,CurrentDate,bd,bd,ARSARSum,ARSsact,ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151,RepSpec.flags[17]);
  CustAged(CUp,RepSpec.d1,bd,RepSpec.d1,ARSSumod,ARSsactod,ARSs0od,ARSs1od,ARSs16od,ARSs31od,ARSs61od,ARSs91od,ARSs121od,ARSs151od,RepSpec.flags[17]);
  if (nonblank(CUp.CurncyCode)) then begin
    ARSARSum = ARSARSum + ARSOnAccBal;
  end else begin
    ARSARSum = ARSARSum + ARSOnAccBalB1;
  end;
  testf = true;
  if (RepSpec.flags[1]==1) then begin
//    if (ARSARSum==0) then begin
    if (blank(ARSARSum)) then begin//invoices + credit Invoices might give 0
      testf = false;
    end;
  end;
  if (onaccf==true) then begin testf = true; end;
  if (nonblank(RepSpec.vals2)) then begin
    if (ARSARSum<=RepSpec.vals2) then begin testf = false; end;
  end;
  if (RepSpec.flags[16]!=0) then begin
    if (acnt==0) then begin testf = false; end;
  end;
          
  if (testf) then begin
    switch (reportmode) begin
      case 0: 
        PrintARSForm2(RepSpec,CUp,ARSSum,ARSOnAccBal,ARSOnAccBalb1,ARSIntSum,ARSSumLate,ARSARSum,ARSStartBal,ARSSumNotLate,ARSLateCount,ARSNotLateCount,
                      ARSsact,ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151,
                      ARSSumod,ARSsactod,ARSs0od,ARSs1od,ARSs16od,ARSs31od,ARSs61od,ARSs91od,ARSs121od,ARSs151od,
                      aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRValCur,aSum4,aVEInvNo,aCurncyCode,aOfficialSerNo,aCustOrdNo,acnt);
      case 1: 
        balp = balp + ARSOnAccBal;        
        ARSrList(RepSpec,CUp,ARSSum,ARSOnAccBal,ARSIntSum,ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151,aRwtype,aInvoiceNr,aRecNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRValCur,aSum4,aVEInvNo,aCurncyCode,aOfficialSerNo,acnt,custcnt,invcnt); 
    end;
  end;
  balp = balp + ARSSum;
  return;
end;

global
procedure DoARSFunction(record RcVc RepSpec,Integer reportmode)
begin
  record CUVc CUr;
  Boolean CUs;
  string 255 frcc,tocc;
  string 255 a,b;
  val TotSum;
  Boolean skip;
  Boolean skip2;
  Array string 20 ac;
  Date d1;
  Integer custcnt,invcnt;
  
  custcnt = 0;
  invcnt = 0;
  d1 = RepSpec.d1;
  SplitEclass(RepSpec.f4,ac);
  frcc = FirstInRange(RepSpec.f1,20);
  tocc = LastInRange(RepSpec.f1,20);
  a = FirstInRange(RepSpec.f2,20);
  b = LastInRange(RepSpec.f2,20);
  if (reportmode==1) then begin
    StartReportJob(USetStr(2541));    
     PintARSHeader(RepSpec,frcc,tocc,a,b);
    EndHeader;
    if (RepSpec.flags[5]!=1) then begin
      PrintHeaderLine(RepSpec);
    end;
  end;
  if (blankdate(RepSpec.d1)) then begin
    RepSpec.d1 = CurrentDate;
  end;
  CUr.Code = frcc;
  CUs = true;
  while (LoopMain(CUr,1,CUs)) begin
    skip2 = false;
    if (nonblank(tocc)) then begin
      if (CUr.Code<frcc) then begin CUs = false; end;
      if (CUr.Code>tocc) then begin CUs = false; end;
    end;
    if (nonblank(RepSpec.f4)) then begin
      if (SclassInEclass(ac,CUr.Classification)==0) then begin skip2 = true; end;
    end;
/*    
checked per Invoice , not per customer
    if (nonblank(RepSpec.ObjStr)) then begin
      if (SetInSet(RepSpec.ObjStr,CUr.Objects)==false) then begin skip2 = true; end;
    end;
*/    
    if (nonblank(RepSpec.f2)) then begin
      if (nonblank(b)) then begin
        if (CUr.SalesMan>b) then begin skip2 = true; end;
        if (CUr.SalesMan<a) then begin skip2 = true; end;
      end;
      if (blank(b)) then begin
        if (CUr.SalesMan!=a) then begin skip2 = true; end;
      end;
    end;
    if (RepSpec.vals0!=0) then begin
//      if (CompCUTurnover(CUr,RepSpec.vals0,RepSpec.sStartDate,RepSpec.sEndDate)<0) then begin skip2 = true; end;
    end;
    if (RepSpec.long1!=-1) then begin
      if (CheckIVNr(CUr.Code,RepSpec.long1)==false) then begin skip2 = true; end;
    end;
    if (CUr.CUType==0) then begin skip2 = true; end;
    if (CUs==false) then begin skip2 = true; end;
    if (skip2==false) then begin
      if (blank(RepSpec.f3) or (RepSpec.f3==CUr.CustCat)) then begin
        skip = false;
        if (RepSpec.flags[3]==1) then begin
          if (CUr.RemndrFlag==0) then begin skip = true; end;
        end;
        if (nonblank(RepSpec.LastAcc)) then begin
          if (RepSpec.LastAcc<>CUr.MainPartner) then begin
            skip = true;
          end;
        end;
        if (skip==false) then begin
          if (blankdate(d1)) then begin
            OneARSFormOpen(RepSpec,CUr,reportmode,TotSum,custcnt,invcnt);
//qupdating    for document                    
          end else begin
            OneARSFormOpenOnDate(RepSpec,CUr,reportmode,TotSum,custcnt,invcnt);
          end;
        end;
      end;
    end;
  end;
  if (reportmode==1) then begin
    Gray_Divider(0,1);
    if (RepSpec.flags[5]!=2) then begin
      StartFormat(15);
      EndFormat;
      StartFormat(15);
      OutString(270,0,USetStr(2552),true);
      OutString(380,0,USetStr(2553),true);
      OutString(1,0,USetStr(2567),true);
      EndFormat;
      Black_Divider(200,1);
      StartFormat(15);
      OutLongInt(270,0,invcnt,true);
      OutLongInt(380,0,custcnt,true);
      OutVal(1,0,TotSum,M4Val,true);
      EndFormat;
    end;
    EndJob;
  end;
  return;
end;

global
procedure ARS2Rn(record RcVc RepSpec)
begin
  DoARSFunction(RepSpec,1);
  return;
end;
