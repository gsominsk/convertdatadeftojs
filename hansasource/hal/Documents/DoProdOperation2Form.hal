external procedure SetConversionFields(record INVc,val,var val,var val,var val);
external function Integer CountNrofItemsProdOperation(record ProdOperationVc);
external function string 255 GetVarietyComment(string,string);
external function Boolean FindFormcode(Integer,Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure PrintValue(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external procedure PrintLongInt(string,LongInt);
external procedure GetFieldArgument(record DocVc,Integer,var string);
external procedure SelectUnitText(string,string,var string);
external procedure SerialNrSDimensions(string,string,var val,var val,var val);
external function Boolean Getformcode(Integer,Integer,string,string,string,LongInt,LongInt,string,string,Integer,string,var string);
external function Integer NumberofDocumentPages(string,Integer);
external procedure GetLangNr(string,var record LangNrVc);
external procedure CommonDocumentFields(record RcVc);
external procedure IntToText(string,Integer,var string);
external procedure RussianPaymentNr(LongInt,var string);
external procedure ValToText(val,Integer,string,string,var string);
external procedure LongDateTimeToStr(Date,var string);
external procedure BuildKSerno(LongInt,string,var string);
external procedure GetItemCommodityCode(string,var string);
external procedure GetAlternativeItemCode(string,var string);
external procedure BC39(string,var string);
external procedure ItemBC39(string,var string);
external procedure ItemBCEAN(string,var string);
external procedure ItemBCEAN13(string,var string);
external function Boolean GetPurchaseItem(string,string,var record PIVc);

procedure PrintProdOperationRows(record RcVc RepSpec,record ProdOperationVc ProdOpr,record SysFormatBlock SFb,
                                 record LangNrVc LangNrr,
                                 var val totqty,var val totvolume,var val totweight,var val totfifo)
begin
  Integer i,rwcnt,rownr;
  row ProdOperationVc ProdOprw;  
  string 255 tstr;
  val t,rowsum;
  record INVc INr;
  record PIVc PIr;
  record CUVc VEr;
  val vatprc,vatval,vatexclprc,vatinclprc,rowtax;
  val qtyconv1,qtyconv2,qtyconv3;
  val sunitx,sunity,sunitz;

  rwcnt = MatRowCnt(ProdOpr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ProdOpr,i,ProdOprw);
    if (ProdOprw.InQty>0) then begin
    if (ReadFirstItem(ProdOprw.Item,INr,true,true)) then begin
    end;
    PrintValue("F_INQTY",ProdOprw.InQty,M4UVal,LangNrr,SFb,false);
    PrintValue("F_OUTQTY",ProdOprw.OutQty,M4UVal,LangNrr,SFb,false);
    BuildKSerno(ProdOpr.SerNr,ProdOprw.Item,tstr);
    OUTFORMFIELD("F_KFAKTURANR",tstr);
    if (FIELDINFORM("F_COMMODITYCODE")) then begin
      GetItemCommodityCode(ProdOprw.Item,tstr);
      OUTFORMFIELD("F_COMMODITYCODE",tstr);
    end;  
    if (FIELDINFORM("F_ALTERNATIVECODE")) then begin
      GetAlternativeItemCode(ProdOprw.Item,tstr);
      OUTFORMFIELD("F_ALTERNATIVECODE",tstr);
    end;
    if (FIELDINFORM("F_ARTNRBC39")) then begin
      ItemBC39(ProdOprw.Item,tstr);
      OUTFORMFIELD("F_ARTNRBC39",tstr);
    end;  
    if (FIELDINFORM("F_ARTNRBCEAN")) then begin
      ItemBCEAN(ProdOprw.Item,tstr);
      OUTFORMFIELD("F_ARTNRBCEAN",tstr);
    end;  
    if (FIELDINFORM("F_ARTNRBCEAN13")) then begin
      ItemBCEAN13(ProdOprw.Item,tstr);      
      OUTFORMFIELD("F_ARTNRBCEAN13",tstr);
    end;  
    if (FIELDINFORM("F_SERIENRBC39")) then begin
      BC39(ProdOprw.SerialNr,tstr);      
      OUTFORMFIELD("F_SERIENRBC39",tstr);
    end;        
    OUTFORMFIELD("F_ARTNR",ProdOprw.Item);
    OUTFORMFIELD("F_ARTCODEVARIETIES",GetVarietyComment(ProdOprw.Item,INr.Code));      
    OUTFORMFIELD("F_ARTCODENOVARIETIES",INr.Code);
    PrintValue("F_FIFO",ProdOprw.ItemCost,M45Val,LangNrr,SFb,false);
    PrintValue("F_SUMFIFO",ProdOprw.InQty*ProdOprw.ItemCost,M45Val,LangNrr,SFb,false);
    OUTFORMFIELD("F_SERIENR",ProdOprw.SerialNr);
    OUTFORMFIELD("F_SPECIFIKATION",ProdOprw.Comment);
    OUTFORMFIELD("F_MATERIAL",ProdOprw.Material);
    totfifo = totfifo + ProdOprw.FIFORowVal;
    totqty = totqty + ProdOprw.InQty;
     
    RecordClear(PIr);
    RecordClear(VEr);
    if nonblank(ProdOprw.Item) then begin
      if (GetPurchaseItem(ProdOprw.Item,ProdOpr.Location,PIr)) then begin
      end;
      VEr.Code = PIr.VECode;
      ReadFirstMain(VEr,1,true);      
    end;
    if nonblank(ProdOprw.Item) then begin
      if (FIELDINFORM("F_ARTNRLEV")) then begin
        OUTFORMFIELD("F_ARTNRLEV",PIr.VEItemCode);
      end;
      if (FIELDINFORM("F_ANTALLEV")) then begin
        OUTFORMFIELD("F_ANTALLEV",ValToString(StringToVal(ProdOprw.InQty,M4UVal),M4UVal,SFb.thousSep,SFb.decimalPt,LangNrr.CutDecimals));
      end;
      if (blank(INr.Weight)) then begin
        t = blankval;
      end else begin
        t = ProdOprw.InQty*INr.Weight;
      end;
      if (nonblank(ProdOprw.Item)) then begin
        OUTFORMFIELD("F_ROWWEIGHT",t);
      end;
      if (blank(INr.Volume)) then begin
        t = blankval;
      end else begin
        t = ProdOprw.InQty*INr.Volume;
      end;
      OUTFORMFIELD("F_ROWVOLUME",t);
      totvolume = totvolume + ProdOprw.InQty*INr.Volume;
      totweight = totweight + ProdOprw.InQty*INr.Weight;
      if (nonblank(ProdOprw.Item)) then begin
        SelectUnitText(ProdOpr.LangCode,INr.Unittext,tstr);    
        OUTFORMFIELD("F_ENHET",tstr);
      end;
      OUTFORMFIELD("F_EUCODE",INr.EUCodex);
      
      SetConversionFields(INr,ProdOprw.InQty,qtyconv1,qtyconv2,qtyconv3);      
      PrintValue("F_CONVERSION1",qtyconv1,M4UVal,LangNrr,SFb,false);
      PrintValue("F_CONVERSION2",qtyconv2,M4UVal,LangNrr,SFb,false);
      PrintValue("F_CONVERSION3",qtyconv3,M4UVal,LangNrr,SFb,false);
      PrintValue("F_CONVERSIONVAL1",INr.Conversion1,M4UVal,LangNrr,SFb,false);
      PrintValue("F_CONVERSIONVAL2",INr.Conversion2,M4UVal,LangNrr,SFb,false);

      if (ProdOprw.InQty!=blankval) then begin
        tstr = INr.Unittext;
      end else begin
        tstr = "";
      end;
      OUTFORMFIELD("F_ENHETLEV",tstr);
      OUTFORMFIELD("F_SHELFCODE",INr.InvCode);
      OUTFORMFIELD("F_ITEMLOCATION",INr.Department);
      OUTFORMFIELD("F_WIDTH",INr.Width);
      OUTFORMFIELD("F_HEIGHT",INr.Height);
      OUTFORMFIELD("F_DEPTH",INr.Depth);
      OUTFORMFIELD("F_WEIGHT",INr.Weight);
      SerialNrSDimensions(ProdOprw.Item,ProdOprw.SerialNr,sunitx,sunity,sunitz);      
      OUTFORMFIELD("F_SWIDTH",sunitx);
      OUTFORMFIELD("F_SHEIGHT",sunity);
      OUTFORMFIELD("F_SDEPTH",sunitz);
      OUTFORMFIELD("F_VOLUME",INr.Volume);
      OUTFORMFIELD("F_BARCODE",INr.BarCode);
      
      OUTFORMFIELD("F_LEVNR",VEr.Code);
      OUTFORMFIELD("F_LEVNAMN",VEr.Name);
      OUTFORMFIELD("F_LEVADDR1",VEr.InvAddr0);
      OUTFORMFIELD("F_LEVADDR2",VEr.InvAddr1);
      OUTFORMFIELD("F_LEVADDR3",VEr.InvAddr2);
      
      if (nonblank(ProdOprw.Item)) then begin
        rownr = rownr + 1;
        OUTFORMFIELD("F_ROWNR",rownr);      
      end;      
    end;
    EndFormRow;
    end;
  end;  
  return;
end;

procedure PrintProdOperation(record RcVc RepSpec,record ProdOperationVc ProdOpr,string formcode)
begin
  record DocVc Docr;
  string 255 tstr,tstr1;
  string 255 t1,t2;
  row ProdOperationVc ProdOprw;
  record SysFormatBlock SFb;
  record LangNrVc LangNrr;
  val totfifo,totvolume,totweight,totqty,tots;
  
  GetLangNr(ProdOpr.LangCode,LangNrr);
  BlockLoad(SFb);
  CommonDocumentFields(RepSpec);

  Docr.Code = formcode;
  if (ReadFirstMain(Docr,1,true)) then begin
  end;

  if (FIELDINFORM("F_NROFITEMSINTEXT")) then begin
    IntToText(ProdOpr.LangCode,CountNrofItemsProdOperation(ProdOpr),tstr);
    OUTFORMFIELD("F_NROFITEMSINTEXT",tstr);        
  end;  
  if (FIELDINFORM("F_RUSPAYNR")) then begin
    RussianPaymentNr(ProdOpr.SerNr,tstr);
    OUTFORMFIELD("F_RUSPAYNR",tstr);
  end;  
  OUTFORMFIELD("F_SERNR",ProdOpr.SerNr);
  
//  OUTFORMFIELD("F_SORTING",ProdOpr.Sorting);

  OUTFORMFIELD("F_STARTDATE",ProdOpr.StartDate);
  OUTFORMFIELD("F_STARTTIME",ProdOpr.StartTime);
  OUTFORMFIELD("F_PRODDATE",ProdOpr.ProdDate);
  OUTFORMFIELD("F_ENDTIME",ProdOpr.EndTime);
  LongDateTimeToStr(ProdOpr.ProdDate,tstr);
  OUTFORMFIELD("F_LEVDATUMLONG",tstr);
  PrintLongInt("F_ORDNUMMER",ProdOpr.ProdOrdNr);
  PrintLongInt("F_PRODNR",ProdOpr.ProdNr);
  PrintLongInt("F_PLANNEDDAYS",ProdOpr.PlanDurDays);
  OUTFORMFIELD("F_PLANNEDTIME",ProdOpr.PlanDurTime);
  PrintValue("F_TOTQTY",ProdOpr.Qty,M4Qty,LangNrr,SFb,false);
  PrintValue("F_ACTUALQTY",ProdOpr.ActualQty,M4Qty,LangNrr,SFb,false);
  PrintLongInt("F_SEQUENCE",ProdOpr.Sequence);
  PrintLongInt("F_SUBSEQUENCE",ProdOpr.SubSequence);

  PrintProdOperationRows(RepSpec,ProdOpr,SFb,LangNrr,totqty,totvolume,totweight,totfifo);
  OUTFORMFIELD("F_TOTFIFO",totfifo);
  OUTFORMFIELD("F_CALCTOTVOLUME",totvolume);
  OUTFORMFIELD("F_CALCTOTWEIGHT",totweight);
  OUTFORMFIELD("F_TOTANTAL",totqty); 
  OUTFORMFIELD("F_TOTSUM",tots);
  return;
end;

global
procedure DoProdOperation2Form(record RcVc RepSpec,record ProdOperationVc ProdOpr)
begin
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Integer i,rwcnt;
  Boolean printf,langf;
  Integer intdocnr;
  string 30 formcode,langcode,langcod2;

  langcode = ProdOpr.LangCode;
//  langcod2 = ProdOpr.ShipMode;
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoProdOperation2Form;
  end;
  rwcnt = MatRowCnt(FDr);
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(FDr,i,FDrw);
    if (FDrw.LangCode==langcode) then begin
      i = -1;
      langf = true;
    end;
  end;
  if (langf==false) then begin langcode = ""; end;
  intdocnr = 1;
  printf = true;
  while (printf) begin  
LFINDFORMCOCEProdOperation2:;
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (FindFormcode(ProdOpr.PRStatusFlag,FDrw.Typ)) then begin 
        if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,ProdOpr.SerNr,FDrw.PrintGroupCode,
                        langcode,intdocnr,"ProdOperationVc",formcode)) then
        begin
          goto LBREAKProdOperation2;
        end;
      end;
    end;
/*    
    if (nonblank(langcod2)) then begin
      langcode = langcod2;
      langcod2 = "";
      goto LFINDFORMCOCEProdOperation2;
    end;  
*/    
LBREAKProdOperation2:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin  
          NumberofDocumentPages(FDrw.FPCode,MatRowCnt(ProdOpr));
          PrintProdOperation(RepSpec,ProdOpr,formcode);
          CloseForm;
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoProdOperation2Form:;  
  return;
end;

