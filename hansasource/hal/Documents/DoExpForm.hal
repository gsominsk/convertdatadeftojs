external procedure PrintCurrencyCode(string,string);
external procedure PrintTAXAuthID(string,string,LongInt,Date);
external function Boolean FindFormcode(Integer,Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean GetPM(string,var string,var string);
external procedure GetAcc2StartBalance(string,string,Date,Integer,Integer,var val,string,Integer);
external procedure GetFieldArgument(record DocVc,Integer,var string);
external procedure Val2ToText(string,val,Integer,string,string,var string);
external procedure GetMonthText(string,Date,var string);
external procedure GetFullCurncyRateText(Boolean,var string,val,val,val,val,val);
external procedure GetUserName(string,var string);
external procedure PrintValue(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external procedure GetLangNr(string,var record LangNrVc);
external procedure CommonDocumentFields(record RcVc);
external function Integer NumberofDocumentPages(string,Integer);
external function Boolean Getformcode(Integer,Integer,string,string,string,LongInt,LongInt,string,string,Integer,string,var string);

procedure AddPayModeExtraRow(record PPVc PPp,val tp,Array string bPayMode,Array string bPayModeText,
                             Array val bSum,Array val bBaseSum,Array string bCurncyCode,var Integer bcnt)
BEGIN
  Integer i;
  string 255 tstr,t2;
  val t;
  
  t = MulRateToBase1(PPp.CurncyCode,tp,PPp.FrRate,PPp.ToRateB1,PPp.ToRateB2,PPp.BaseRate1,PPp.BaseRate2,DefaultCurRoundOff);
  for (i=0;i<bcnt;i=i+1) begin
    if ((bPayMode[i]==PPp.PayMode) and (bCurncyCode[i]==PPp.CurncyCode)) then begin
      bBaseSum[i] = bBaseSum[i] + t;
      bSum[i] = bSum[i] + tp;
      goto LAddPayModeExtraRow;
    end;
  end;
  if (GetPM(PPp.PayMode,t2,tstr)==false) then begin
  end;    
  bPayMode[bcnt] = PPp.PayMode;
  bPayModeText[bcnt] = tstr;
  bCurncyCode[bcnt] = PPp.CurncyCode;
  bSum[bcnt] = tp;
  bBaseSum[bcnt] = t;
  bcnt = bcnt + 1;
LAddPayModeExtraRow:;
  RETURN;
END;


procedure AddPayModeExtraCLRow(record CLOutVc CLOutr,val tp,Array string bPayMode,Array string bPayModeText,
                             Array val bSum,Array val bBaseSum,Array string bCurncyCode,var Integer bcnt)
BEGIN
  Integer i;
  string 255 tstr,t2;
  val t;
  
  t = MulRateToBase1(CLOUtr.CurncyCode,tp,CLOUtr.FrRate,CLOUtr.ToRateB1,CLOutr.ToRateB2,CLOutr.BaseRate1,CLOutr.BaseRate2,DefaultCurRoundOff);
  for (i=0;i<bcnt;i=i+1) begin
    if ((bPayMode[i]==CLOutr.PayMode) and (bCurncyCode[i]==CLOutr.CurncyCode)) then begin
      bBaseSum[i] = bBaseSum[i] + t;
      bSum[i] = bSum[i] + tp;
      goto LAddPayModeCLExtraRow;
    end;
  end;
  if (GetPM(CLOutr.PayMode,t2,tstr)==false) then begin
  end;    
  bPayMode[bcnt] = CLOUtr.PayMode;
  bPayModeText[bcnt] = tstr;
  bCurncyCode[bcnt] = CLOutr.CurncyCode;
  bSum[bcnt] = tp;
  bBaseSum[bcnt] = t;
  bcnt = bcnt + 1;
LAddPayModeCLExtraRow:;
  RETURN;
END;

procedure AddPayModeExtraCLInRow(record CLINVc CLInr,val tp,Array string bPayMode,Array string bPayModeText,
                             Array val bSum,Array val bBaseSum,Array string bCurncyCode,var Integer bcnt)
BEGIN
  Integer i;
  string 255 tstr,t2;
  val t;
  
  t = MulRateToBase1(CLINr.CurncyCode,tp,CLINr.FrRate,CLInr.ToRateB1,CLINr.ToRateB2,CLInr.BaseRate1,CLInr.BaseRate2,DefaultCurRoundOff);
  t = -t;
  for (i=0;i<bcnt;i=i+1) begin
    if ((bPayMode[i]==CLInr.PayMode) and (bCurncyCode[i]==CLInr.CurncyCode)) then begin
      bBaseSum[i] = bBaseSum[i] + t;
      bSum[i] = bSum[i] + tp;
      goto LAddPayModeCLInExtraRow;
    end;
  end;
  if (GetPM(CLInr.PayMode,t2,tstr)==false) then begin
  end;    
  bPayMode[bcnt] = CLInr.PayMode;
  bPayModeText[bcnt] = tstr;
  bCurncyCode[bcnt] = CLInr.CurncyCode;
  bSum[bcnt] = tp;
  bBaseSum[bcnt] = t;
  bcnt = bcnt + 1;
LAddPayModeCLInExtraRow:;
  RETURN;
END;


procedure FindLastExpDate(string person,LongInt sernr,var Date tdp,var LongInt lastppnr,Date expdp)
BEGIN
  record ExpVc Expr;
  Boolean found;
  string 200 thekey;
  
  lastppnr = -1;
//  tdp = AddMonth(expdp,-GetMonth(expdp)-1); // Made no sense....
  tdp = AddMonth(expdp,-2); // Is what previous line said, but still makes no sense...why 2 months back??
  tdp = AddDay(tdp,-GetDay(tdp)+1);
  Expr.TransDate = expdp;
  Expr.Person = person;
  thekey = "TransDate:" & person;
  found = true;
  while (LoopBackKey(thekey,Expr,2,found)) begin
    if (found) then begin
      tdp = AddDay(Expr.TransDate,1);
      lastppnr = Expr.PPOKNr;   
      goto LFindLastExpDate;     
    end;
  end;
LFindLastExpDate:;
  if (tdp>expdp) then begin
    tdp = expdp;
  end;
  RETURN;
END;

procedure GetAccountCurncy(string personacc,var string acccurncy)
BEGIN
  record AccVc Accr;
   
  acccurncy = "";
  Accr.AccNumber = personacc; 
  if (ReadFirstMain(Accr,1,true)) then begin
    acccurncy = Accr.Curncy;
  end;
  RETURN;
END;

procedure  SetupExpPersPayRows(record RcVc RepSpec,record CLInVc CLInp,string person,LongInt sernr,Date tdp,LongInt ppoknr,string curncycode,
                               Array string bPayMode,Array string bPayModeText,Array val bSum,Array val bBaseSum,Array string bCurncyCode,var Integer bcnt)
BEGIN
  record UserVc USr;
  record PPrsVc PPrsr;
  record PPVc PPr;
  record CLOUtVc CLOutr;
  record CLINVc CLINr;
  record ExpVc Expr;
  row PPVc PPrw;
  string 5 personacc,acccurncy;
  string 20 objstr;
  Boolean TrHs,testf;
  LongInt lastppnr;
  Integer i,rwcnt;
  Date td;
  val t;

  USr.Code = person; 
  if (ReadFirstMain(USr,1,true)) then begin
    personacc = USr.PersAcc; 
    objstr = USr.PersObjx; 
  end;  
  RecordClear(CLInp);
  FindLastExpDate(person,sernr,td,lastppnr,tdp);
  GetAccountCurncy(personacc,acccurncy);
  if (RepSpec.flags[0]==1) then begin
    if (acccurncy==curncycode) then begin
      RepSpec.CurncyCode = curncycode;
    end else begin
      goto LSetupExpPersPayRows;
    end;
  end;  
  GetAcc2StartBalance(personacc,objstr,td,0,0,t,"",0);
  CLInp.Total = t;
  TrHs = true;
  PPrsr.Person = person;
  PPrsr.TransDate = td;
  while (LoopMain(PPrsr,2,TrHs)) begin
    if (TrHs) then begin
      testf = true;
      if (PPrsr.Person!=person) then begin TrHs = false; end;
      if (PPrsr.TransDate>tdp) then begin TrHs = false; end;
      if (PPrsr.TransNr==sernr) then begin testf = false; end;
//      if (PPrsr.PPOKNr>=ppoknr) then begin testf = false; end;
      if (testf and TrHs) then begin
        switch (PPrsr.TransType) begin
          case 0:
            Expr.SerNr = PPrsr.TransNr;
            if (ReadFirstMain(Expr,1,true)) then begin  
              if (RepSpec.flags[0]==1) then begin
                if (acccurncy!=Expr.CurncyCode) then begin
                  goto LSetupExpPersPayRows;
                end;
              end;            
              if (RepSpec.flags[0]==0) then begin
                t = MulRateToBase1(Expr.CurncyCode,Expr.PayVal,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,DefaultCurRoundOff);
              end else begin
                t = Expr.PayVal;
              end;
              CLInp.Total = CLInp.Total - t;
            end;
          case 1:
            PPr.SerNr = PPrsr.TransNr;
            if (ReadFirstMain(PPr,1,true)) then begin  
              if (RepSpec.flags[0]==1) then begin
                if (acccurncy!=PPr.CurncyCode) then begin
                  goto LSetupExpPersPayRows;
                end;
              end;   
//              if (PPr.PPOKNr<lastppnr) then begin//(lastppnr==BlankM4Long) or
                rwcnt = MatRowCnt(PPr);
                for (i=0; i<rwcnt; i=i+1) begin
                  MatRowGet(PPr,i,PPrw);
                  if (PPrw.Person==person) then begin
                    if (RepSpec.flags[0]==0) then begin
                      t = MulRateToBase1(PPr.CurncyCode,PPrw.PayVal,PPr.FrRate,PPr.ToRateB1,PPr.ToRateB2,PPr.BaseRate1,PPr.BaseRate2,DefaultCurRoundOff);
                    end else begin
                      t = PPrw.PayVal;
                    end;
                    CLInp.Total = CLInp.Total + t;
                  end;
                end;  
//              end;  
            end;  
        case 2:
          CLOutr.SerNr = PPrsr.TransNr;
          if (ReadFirstMain(CLOutr,1,true)) then begin  
            if (RepSpec.flags[0]==1) then begin
              if (acccurncy!=CLOutr.CurncyCode) then begin
                goto LSetupExpPersPayRows;
              end;
            end;                            
            if (CLOutr.Person==person) then begin
              if (RepSpec.flags[0]==0) then begin
                t = MulRateToBase1(CLOutr.CurncyCode,CLOutr.NetVal,CLOutr.FrRate,CLOutr.ToRateB1,CLOUtr.ToRateB2,CLOutr.BaseRate1,CLOutr.BaseRate2,DefaultCurRoundOff);
              end else begin
                t = CLOutr.NetVal; 
              end;
              CLInp.Total = CLInp.Total + t;
            end;
          end; 
        case 3:
          CLINr.SerNr = PPrsr.TransNr;
          if (ReadFirstMain(CLINr,1,true)) then begin  
            if (RepSpec.flags[0]==1) then begin
              if (acccurncy!=CLINr.CurncyCode) then begin
                goto LSetupExpPersPayRows;
              end;
            end;                            
            if (CLINr.Person==person) then begin
              if (RepSpec.flags[0]==0) then begin
                t = MulRateToBase1(CLInr.CurncyCode,CLINr.NetVal,CLINr.FrRate,CLINr.ToRateB1,CLINr.ToRateB2,CLINr.BaseRate1,CLINr.BaseRate2,DefaultCurRoundOff);
              end else begin
                t = CLINr.NetVal; 
              end;
              CLInp.Total = CLInp.Total - t;
            end;
          end; 
        end;    
      end;
    end;  
  end;
  TrHs = true;
  Resetloop(PPrsr);  
  PPrsr.Person = person;
  PPrsr.TransDate = td;
//  PPrsr.PPOKNr = lastppnr;
  while (LoopMain(PPrsr,2,TrHs)) begin
    testf = true;
    if (PPrsr.Person!=person) then begin TrHs = false; end;
    if (PPrsr.TransDate>tdp) then begin TrHs = false; end;
//    if (PPrsr.PPOKNr>ppoknr) then begin testf = false; end;
    if (TrHs and testf) then begin
      switch (PPrsr.TransType) begin
        case 1:
          PPr.SerNr = PPrsr.TransNr;
          if (ReadFirstMain(PPr,1,true)) then begin  
            if (RepSpec.flags[0]==1) then begin
              if (acccurncy!=PPr.CurncyCode) then begin
                goto LSetupExpPersPayRows;
              end;
            end;                            
            rwcnt = MatRowCnt(PPr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(PPr,i,PPrw);
              if (PPrw.Person==person) then begin
                AddPayModeExtraRow(PPr,PPrw.PayVal,bPayMode,bPayModeText,bSum,bBaseSum,bCurncyCode,bcnt);
                if (RepSpec.flags[0]==0) then begin
                  t = MulRateToBase1(PPr.CurncyCode,PPrw.PayVal,PPr.FrRate,PPr.ToRateB1,PPr.ToRateB2,PPr.BaseRate1,PPr.BaseRate2,DefaultCurRoundOff);
                end else begin
                  t = PPrw.PayVal; 
                end;
                CLInp.NetVal = CLInp.NetVal + t;
              end;
            end;
          end;
/* I don't think they should be added to this total....
it shuld
*/
        case 2:
          CLOutr.SerNr = PPrsr.TransNr;
          if (ReadFirstMain(CLOutr,1,true)) then begin  
            if (RepSpec.flags[0]==1) then begin
              if (acccurncy!=CLOutr.CurncyCode) then begin
                goto LSetupExpPersPayRows;
              end;
            end;                            
            if (CLOUtr.Person==person) then begin
              AddPayModeExtraCLRow(CLOutr,CLOutr.NetVal,bPayMode,bPayModeText,bSum,bBaseSum,bCurncyCode,bcnt);
              if (RepSpec.flags[0]==0) then begin
                t = MulRateToBase1(CLOutr.CurncyCode,CLOutr.NetVal,CLOutr.FrRate,CLOutr.ToRateB1,CLOUtr.ToRateB2,CLOutr.BaseRate1,CLOutr.BaseRate2,DefaultCurRoundOff);
              end else begin
                t = CLOutr.NetVal; 
              end;
              CLInp.NetVal = CLInp.NetVal + t;
            end;
          end; 
        case 3:
          CLINr.SerNr = PPrsr.TransNr;
          if (ReadFirstMain(CLINr,1,true)) then begin  
            if (RepSpec.flags[0]==1) then begin
              if (acccurncy!=CLINr.CurncyCode) then begin
                goto LSetupExpPersPayRows;
              end;
            end;                            
            if (CLINr.Person==person) then begin
              AddPayModeExtraCLInRow(CLInr,-CLINr.NetVal,bPayMode,bPayModeText,bSum,bBaseSum,bCurncyCode,bcnt);
              if (RepSpec.flags[0]==0) then begin
                t = MulRateToBase1(CLInr.CurncyCode,CLINr.NetVal,CLINr.FrRate,CLINr.ToRateB1,CLINr.ToRateB2,CLINr.BaseRate1,CLINr.BaseRate2,DefaultCurRoundOff);
              end else begin
                t = CLINr.NetVal; 
              end;
              CLInp.NetVal = CLInp.NetVal - t;
            end;
          end; 
      end;
    end;  
  end;
LSetupExpPersPayRows:;  
  RETURN;
END;

global
procedure FindPurchVATAcc(string vatcode,var string acccode)
BEGIN
  Integer i,rwcnt;
  record VATCodeBlock VATCodeRec;
  row VATCodeBlock vcrw;
  
  acccode = "";
  BlockLoad(VATCodeRec);
  rwcnt = MatRowCnt(VATCodeRec);
  if (rwcnt==0) then begin goto LFindPurchVATAcc; end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATCodeRec,i,vcrw);
    if (vcrw.VATCode==vatcode) then begin
      acccode = vcrw.PurchVATAcc;
      goto LFindPurchVATAcc;
    end;
  end;
LFindPurchVATAcc:;
  RETURN;
END;

procedure AddExpAccRow(LongInt sernr,string costacc,val tp,
                       Array LongInt aSerNr,Array string aAccount,Array val aSum,var Integer acnt)
BEGIN
  Integer i;
  
  if (blank(costacc)) then begin
    goto LAddExpAccRow;
  end;
  for (i=0;i<acnt;i=i+1) begin
    if (costacc==aAccount[i]) then begin
      aSum[i] = aSum[i] + tp;
      goto LAddExpAccRow;
    end;
  end;
  aSerNr[acnt] = sernr;
  aAccount[acnt] = costacc;
  aSum[acnt] = tp;
  acnt = acnt + 1;
LAddExpAccRow:;
  RETURN;
END;

procedure PrintExp(record RcVc RepSpec,record ExpVc Expr,string formcode)
BEGIN
  record DocVc Docr;
  row ExpVc Exprw;
  Integer i,rwcnt;
  string 255 tstr,fldarg;
  val t,tcur;
  record SysFormatBlock SysFormatRec;
  record LangNrVc LangNrr;
  record UserVc Userr;
  record CUVc VEr;
  record INVc INr;
  record PRVc PRr;
  Array LongInt aSerNr;
  Array string 10 aAccount;
  Array val aSum;
  Integer acnt;
  record CLInVc CLInr;
  Array string 2 bPayMode;
  Array string 100 bPayModeText;
  Array val bSum;
  Array val bBaseSum;
  Array string 2 bCurncyCode;
  Integer bcnt;
  LongInt lastppnr;
  Date td;
  val totqty,totperspayment;

  GetLangNr("",LangNrr);  
  BlockLoad(SysFormatRec);
  Userr.Code = Expr.Person;
  if (ReadFirstMain(Userr,1,true)) then begin
  end;
  Docr.Code = formcode;
  if (ReadFirstMain(Docr,1,true)) then begin
  end;
  OUTFORMFIELD("F_DOCTYPE",USetStr(23471));
  PrintValue("F_NROFFOTH",Expr.NrofRecs,M4UVal,LangNrr,SysFormatRec,false);
  OUTFORMFIELD("F_FAKTSIGN",Expr.OKSign);
  GetUserName(Expr.OKSign,tstr);  
  OUTFORMFIELD("F_FAKTSIGN",tstr);
  GetFullCurncyRateText(true,tstr,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2);
  OUTFORMFIELD("F_RATE",tstr);
  OUTFORMFIELD("F_SERNR",Expr.SerNr);
  OUTFORMFIELD("F_TRANSDATE",Expr.TransDate);
  OUTFORMFIELD("F_EFFECTDATE",Expr.DocDate);
  OUTFORMFIELD("F_PERSON",Expr.Person);
  PrintValue("F_SUMMAEJMOMS",Expr.PayVal-Expr.CalcVATVal,M4Val,LangNrr,SysFormatRec,false);
  OutFormField("F_DATEDAY",GetDay(Expr.TransDate));
  OutFormField("F_DATEYEAR",GetYear(Expr.TransDate));
  OutFormField("F_DATEMONTH",GetMonth(Expr.TransDate));
  GetMonthText("",Expr.TransDate,tstr);
  OUTFORMFIELD("F_DATEMONTHTEXT",tstr);
  OUTFORMFIELD("F_SIGNATURE",Expr.Sign);
  PrintValue("F_AMOUNT",Expr.PayVal,M4Val,LangNrr,SysFormatRec,false);
  PrintValue("F_AMOUNTROUNDED",Expr.PayVal,M4NegVal,LangNrr,SysFormatRec,false);
  t = MulRateToBase1(Expr.CurncyCode,Expr.PayVal,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,DefaultCurRoundOff);
  PrintValue("F_AMOUNTRUS",t,M4Val,LangNrr,SysFormatRec,false);
  if (FIELDINFORM("F_AMOUNTINTEXT")) then begin
    GetFieldArgument(Docr,F_AMOUNTINTEXT,fldarg);
    Val2ToText(fldarg,Expr.PayVal,M4Val,Expr.CurncyCode,"",tstr);
    OUTFORMFIELD("F_AMOUNTINTEXT",tstr);
  end;
  if (FIELDINFORM("F_AMOUNTINTEXTBASECUR1")) then begin
    t = MulRateToBase1(Expr.CurncyCode,Expr.PayVal,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,DefaultCurRoundOff);
    GetFieldArgument(Docr,F_AMOUNTINTEXTBASECUR1,fldarg);
    Val2ToText(fldarg,t,M4Val,Expr.CurncyCode,"",tstr);
    OUTFORMFIELD("F_AMOUNTINTEXTBASECUR1",tstr);
  end;
  if (FieldInForm("F_TAXAUTHID")) then begin
    PrintTAXAuthID(F_TAXAUTHID,Expr.TaxAuthID,Expr.SerNr,Expr.TransDate);
  end;
  PrintValue("F_TOTVATVAL",Expr.CalcVATVal,M4Val,LangNrr,SysFormatRec,false);
  PrintCurrencyCode("F_VALUTA",Expr.CurncyCode);
  PrintValue("F_EXTRAKOSTNAD",Userr.CostPrHour,M4Val,LangNrr,SysFormatRec,false);
  PrintValue("F_PRIS",Userr.PricePrHour,M4Val,LangNrr,SysFormatRec,false);
  OUTFORMFIELD("F_GRUPP",Userr.JobGroup);
  OUTFORMFIELD("F_BESKRIVNING",Userr.Job);
  OUTFORMFIELD("F_BANKACC",Userr.BankAcc);
  OUTFORMFIELD("F_EGENBANKKOD",Userr.BankName);
  OUTFORMFIELD("F_PERSONID",Userr.IDCode);
  OUTFORMFIELD("F_KOMMENTAR",Expr.Name);
  OUTFORMFIELD("F_PERSNAME",Userr.Name);
  OUTFORMFIELD("F_PERSONACCOUNT",Userr.PersAcc);
  OUTFORMFIELD("F_OBJECT",Userr.PersObjx);
  OUTFORMFIELD("F_PERSONSPEC",Userr.Spec);
  OUTFORMFIELD("F_DEPARTMENT",Userr.Department);
  FindLastExpDate(Userr.Code,Expr.SerNr,td,lastppnr,Expr.TransDate);
  GetAcc2StartBalance(Userr.PersAcc,Userr.PersObjx,td,0,0,t,"",0);
  PrintValue("F_USERSTARTBAL",t,M4Val,LangNrr,SysFormatRec,false);


  PrintValue("F_TOTALBASE",Expr.BasePayVal,M4Val,LangNrr,SysFormatRec,false);
  PrintValue("F_BASE1VATTOT",Expr.BaseCalcVATVal,M4Val,LangNrr,SysFormatRec,false);
  PrintValue("F_TOTALAMOUNT",Expr.BasePayVal-Expr.BaseCalcVATVal,M4Val,LangNrr,SysFormatRec,false);
  
  rwcnt = MatRowCnt(Expr);
  OUTFORMFIELD("F_TOTANTAL",rwcnt+1);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Expr,i,Exprw);
    switch (Exprw.stp) begin
      case kExpenseRowTypeNormal:
        OUTFORMFIELD("F_ORDERDATE",Exprw.ExpDate);
        OUTFORMFIELD("F_NUMMER",Exprw.DocNr);//   OUTFORMFIELD("F_PLANSHIP",Exprw.DocNr);
        OUTFORMFIELD("F_SERIENR",Exprw.Identifier);
        OUTFORMFIELD("F_SALESACC",Exprw.AccNumber);
        OUTFORMFIELD("F_ROWOBJECT",Exprw.Objects);
        OUTFORMFIELD("F_DESCRIPTION",Exprw.Comment);
        PrintValue("F_SALESINCVAT",Exprw.Sum,M4Val,LangNrr,SysFormatRec,false);
        if (FIELDINFORM("F_BASE1ROWBASE")) then begin
           t = MulRateToBase1(Expr.CurncyCode,Exprw.Sum,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,DefaultCurRoundOff);
           PrintValue("F_BASE1ROWBASE",t,M4Val,LangNrr,SysFormatRec,false);
        end;
        PrintValue("F_ROWVATVAL",Exprw.VATSum,M4Val,LangNrr,SysFormatRec,false);
        PrintValue("F_ROWVATEXCLPRC",Exprw.Sum-Exprw.VATSum,M4Val,LangNrr,SysFormatRec,false);
        PrintValue("F_BASE1ROWTOT",Exprw.BaseSum,M4Val,LangNrr,SysFormatRec,false);
        PrintValue("F_BASE1ROWVATVAL",Exprw.BaseVATSum,M4Val,LangNrr,SysFormatRec,false);
        PrintValue("F_BASE1SUMMA",Exprw.BaseSum-Exprw.BaseVATSum,M4Val,LangNrr,SysFormatRec,false);
        OUTFORMFIELD("F_TRANSROW",i+1);
        OUTFORMFIELD("F_MOMSKOD",Exprw.VATCode);
        OUTFORMFIELD("F_PROJECT",Exprw.PRCode);
        OUTFORMFIELD("F_ARTNR",Exprw.Item);
        OUTFORMFIELD("F_ARTNR2",Exprw.Item);
        if (FIELDINFORM("F_SPECIFIKATION")) then begin
          INr.Code = Exprw.Item;
          if (ReadFirstMain(INr,1,true)) then begin
            OUTFORMFIELD("F_SPECIFIKATION",INr.Name);
          end;
        end;
        PrintValue("F_ANTAL",Exprw.qty,M4Qty,LangNrr,SysFormatRec,false);
        totqty = totqty + Exprw.qty;
        if (FIELDINFORM("F_PROJECTNAME")) then begin
          PRr.Code = Exprw.PRCode;
          if (ReadFirstMain(PRr,1,true)) then begin
            OUTFORMFIELD("F_PROJECTNAME",PRr.Name);
          end;
        end;
        OUTFORMFIELD("F_LEVERANTOR",Exprw.VECode);
        if ((FIELDINFORM("F_LEVNAMN")) or (FIELDINFORM("F_LEVVATNR"))) then begin
          if (nonblank(Exprw.VEName)) then begin
            OUTFORMFIELD("F_LEVNAMN",Exprw.VEName);
          end;
          VEr.Code = Exprw.VECode;
          if (ReadFirstMain(VEr,1,true)) then begin
            if (blank(Exprw.VEName)) then begin
              OUTFORMFIELD("F_LEVNAMN",VEr.Name);
            end;
            OUTFORMFIELD("F_LEVVATNR",VEr.VATNr);
          end;
        end;
    
        AddExpAccRow(Expr.SerNr,Exprw.AccNumber,Exprw.Sum-Exprw.VATSum,aSerNr,aAccount,aSum,acnt);
        FindPurchVATAcc(Exprw.VATCode,tstr);
        AddExpAccRow(Expr.SerNr,tstr,Exprw.VATSum,aSerNr,aAccount,aSum,acnt);        
      case kExpenseRowTypePersonnelPayment:
        if (nonblank(Exprw.Comment)) then begin
          OUTFORMFIELD("F_DESCRIPTION",Exprw.Comment);
        end else begin
          OUTFORMFIELD("F_DESCRIPTION",USetStr(1835));
        end;
        PrintValue("F_SALESINCVAT",Exprw.Sum,M4Val,LangNrr,SysFormatRec,false);
        totperspayment = totperspayment + Exprw.Sum;
    end;
    EndFormRow;
  end;
  PrintValue("F_PAYMENTROWSTOTAL",totperspayment,M4Val,LangNrr,SysFormatRec,false);
  PrintValue("F_DIFF",Expr.PayVal-totperspayment,M4Val,LangNrr,SysFormatRec,false);

  
  OUTFORMFIELD("F_TOTQTY",totqty);
  SetupExpPersPayRows(RepSpec,CLInr,Expr.Person,Expr.SerNr,Expr.TransDate,Expr.PPOKNr,Expr.CurncyCode,
                      bPayMode,bPayModeText,bSum,bBaseSum,bCurncyCode,bcnt);
  if (CLInr.Total>0) then begin  
    OUTFORMFIELD("F_USERENDBALSTRING",USetStr(7835));
  end else begin
    OUTFORMFIELD("F_USERENDBALSTRING",USetStr(7836));
  end;
  PrintValue("F_TOTSUM",CLInr.Total,M4Val,LangNrr,SysFormatRec,false); // +CLInr.NetVal
  PrintValue("F_SUMMA",CLInr.NetVal,M4Val,LangNrr,SysFormatRec,false);
  PrintValue("F_STARTBAL",CLInr.Total,M4Val,LangNrr,SysFormatRec,false);
  if (RepSpec.flags[0]==0) then begin
    t = MulRateToBase1(Expr.CurncyCode,Expr.PayVal,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,DefaultCurRoundOff);
  end else begin
    t = Expr.PayVal;
  end;
  PrintValue("F_ENDBAL",CLInr.Total-t,M4Val,LangNrr,SysFormatRec,false); // +CLInr.NetVal
  if (FIELDINFORM("F_PAYMODEROW")) then begin
    for (i=0;i<bcnt;i=i+1) begin
      OUTFORMFIELD("F_PAYMODEROW",bPayModeText[i]);
    end;
  end;
  if (FIELDINFORM("F_FAKTBELOPP")) then begin
    for (i=0;i<bcnt;i=i+1) begin
      PrintValue("F_FAKTBELOPP",bSum[i],M4Val,LangNrr,SysFormatRec,false);
    end;
  end;
  if (FIELDINFORM("F_BASE1ROWTOT")) then begin
    for (i=0;i<bcnt;i=i+1) begin
      PrintValue("F_BASE1ROWTOT",bBaseSum[i],M4Val,LangNrr,SysFormatRec,false);
    end;
  end;
  if (FIELDINFORM("F_ITEMNAME")) then begin
    for (i=0;i<bcnt;i=i+1) begin
      OUTFORMFIELD("F_ITEMNAME",bCurncyCode[i]);
    end;
  end;
  if (FIELDINFORM("F_COSTACCOUNT")) then begin
    for (i=0;i<acnt;i=i+1) begin
      if (aSum[i]!=0) then begin
        OUTFORMFIELD("F_COSTACCOUNT",aAccount[i]);
      end;
    end;
  end;
  if (FIELDINFORM("F_PURCHVAL")) then begin
    for (i=0;i<acnt;i=i+1) begin
      PrintValue("F_PURCHVAL",aSum[i],M4Val,LangNrr,SysFormatRec,false);
    end;
  end;
  RETURN;
END;

global
procedure DoExpForm(record RcVc RepSpec,record ExpVc Expr)
BEGIN
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Integer i,rwcnt;
  Boolean printf;
  Integer intdocnr;
  string 30 formcode;

  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoExpForm;
  end;
  rwcnt = MatRowCnt(FDr);
  intdocnr = 1;
  printf = true;
  while (printf) begin  
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (FindFormcode(Expr.OKFlag,FDrw.Typ)) then begin 
        if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,Expr.SerNr,FDrw.PrintGroupCode,
                        "",intdocnr,"ExpVc",formcode)) then
        begin
          goto LBREAKExp;
        end;
      end;
    end;
LBREAKExp:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin
        CommonDocumentFields(RepSpec);
        NumberofDocumentPages(formcode,MatRowCnt(Expr));          
        PrintExp(RepSpec,Expr,formcode);
        CloseForm;
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoExpForm:;  
  RETURN;
END;
