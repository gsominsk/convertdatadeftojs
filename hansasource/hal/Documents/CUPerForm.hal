external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure SubCashRows_IVVc(record IVVc,Boolean,var val,var val);
external procedure SubPrePayments(record IVVc,var val,var val);
external function Integer SclassInEclass(Array string,string);
external procedure SplitEclass(string,var Array string);
external procedure DocCustListTransIV(record RcVc,record IPrsVc,record CUVc,var val,Array Integer,Array string,Array string,Array LongInt,Array LongInt,Array Date,Array Date,Array string,Array val,Array val,Array string,var Integer);
external procedure DocCustListTransPurgeTR(record IPrsVc,record CUVc,var val,Array Integer,Array string,Array LongInt,Array LongInt,Array Date,Array Date,Array string,Array val,Array val,Array string,var Integer);
external procedure DocCustListTransTR(record IPrsVc,record CUVc,var val,Array Integer,Array string,Array LongInt,Array LongInt,Array Date,Array Date,Array string,Array val,Array val,Array string,var Integer);
external procedure DocCustListTransIP(record RcVc,record IPrsVc,record CUVc,var val,Array Integer,Array string,Array LongInt,Array LongInt,Array Date,Array Date,Array string,Array val,Array val,Array string,var Integer,
                             Array LongInt,var Integer);
external procedure DocCustListTransCredMan(record IPrsVc,record CUVc,var val,Array Integer,Array string,Array LongInt,Array LongInt,Array Date,Array Date,Array string,Array val,Array val,Array string,var Integer);
external function Integer NumberofDocumentPages(string,Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure CommonDocumentFields(record RcVc);
external procedure DoPrintARSForm2(record RcVc,record CUVc,
                         val,val,val,val,val,val,val,val,
                         Integer,Integer,
                         val,val,val,val,val,val,val,val,val,
                         val,val,val,val,val,val,val,val,val,val,
                         Array Integer,Array string,Array LongInt,Array LongInt,
                         Array Date,Array Date,Array val,Array val,Array val,Array val,
                         Array string,Array string,Array string,Array string,Integer);
external procedure CustAged(record CUVc,Date,Date,Date,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val,boolean);
external function Boolean Getformcode(Integer,Integer,string,string,string,LongInt,LongInt,string,string,Integer,string,var string);
external procedure CUGetStartBalance(record CUVc,string,string,Date,var val,Boolean);
external procedure GetOnAccBalance(record RcVc,string,string,Boolean,Integer,var val,var val,var val,var val,var val,var val,var val,record SMVc,
                   Array string,Array val,var Integer);

external procedure ARRnGetInvBalance(record IVVc,var Date,Integer,var val,var val,var LongInt);
external procedure DocCustListTransBalanceIV(val,record IPrsVc,record CUVc,var val,Array Integer,Array string,Array string,Array LongInt,Array LongInt,Array Date,Array Date,Array string,Array val,Array val,Array string,var Integer);

procedure PrintCuPerForm(record RcVc RepSpec,record CUVc CUp,
                   val ARSSum,val ARSOnAccBal,val ARSOnAccBalb1,val ARSIntSum,val ARSSumLate,val ARSARSum,val ARSStartBal,val ARSSumNotLate,
                   Integer ARSLateCount,Integer ARSNotLateCount,
                   val ARSsact,val ARSs0,val ARSs1,val ARSs16,val ARSs31,val ARSs61,val ARSs91,val ARSs121,val ARSs151,
                   val ARSARSumod,val ARSsactod,val ARSs0od,val ARSs1od,val ARSs16od,val ARSs31od,val ARSs61od,val ARSs91od,val ARSs121od,val ARSs151od,
                   Array Integer aRwtype,Array string aInvoiceNr,Array LongInt alatedays,Array LongInt aRemndr,
                   Array Date aInvDate,Array Date aDueDate,Array val aIntVal,Array val aRVal,Array val aRValCur,
                   Array string aCurncyCode,Array string aOfficialSerNo,Array string aCustOrdNo,Integer acnt)
BEGIN
  Integer i,rwcnt;  
  Boolean printf,langf;
  Integer intdocnr;
  string 30 formcode,langcode;
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Array string 20 aVEInvNo;
  Array val aSum4;

  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LPrintCuPerForm;
  end;
  rwcnt = MatRowCnt(FDr);
  langcode = CUp.LangCode;
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(FDr,i,FDrw);
    if (FDrw.LangCode==langcode) then begin
      i = -1;
      langf = true;
    end;
  end;
  if (langf==false) then begin langcode = ""; end;
  intdocnr = 1;
  printf = true;
  while (printf) begin  
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,-1,FDrw.PrintGroupCode,
                      langcode,intdocnr,"",formcode)) then
      begin
        goto LBREAKCuPer;
      end;
    end;
LBREAKCuPer:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin
        CommonDocumentFields(RepSpec);
        NumberofDocumentPages(formcode,acnt);
        DoPrintARSForm2(RepSpec,CUp,ARSSum,ARSOnAccBal,ARSOnAccBalb1,ARSIntSum,ARSSumLate,ARSARSum,ARSStartBal,ARSSumNotLate,ARSLateCount,ARSNotLateCount,
                       ARSsact,ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151,
                       ARSARSumod,ARSsactod,ARSs0od,ARSs1od,ARSs16od,ARSs31od,ARSs61od,ARSs91od,ARSs121od,ARSs151od,
                       aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRValCur,aSum4,aVEInvNo,aCurncyCode,aOfficialSerNo,
                       aCustOrdNo,acnt);
        CloseForm;
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
  end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LPrintCuPerForm:;  
  RETURN;
END;

global
procedure AddARSRw2(Array Integer aRwtype,Array string aInvoiceNr,Array string aOfficialSerNo,Array LongInt alatedays,Array LongInt aRemndr,
                    Array Date aInvDate,Array Date aDueDate,
                    Array string aCurncyCode,Array val aIntVal,Array val aRVal,Array string aCustOrdNo,var Integer acnt,
                    Integer invtyp,string idnr,string offsernr,Date idt,Date ddt,val hvp,val tvp,string currency,string custordno,
                    Boolean sumipf)
BEGIN  
  Integer i;
  
  if (sumipf) then begin
    if (invtyp==kInvoiceTypeDownpayment) then begin
      for (i=0;i<acnt;i=i+1) begin
        if (aRwtype[i]==invtyp) and (aInvoiceNr[i]==idnr) and (aCurncyCode[i]==currency) and (aInvDate[i]==idt) then begin
          aRVal[i] = aRVal[i] + tvp;
          aIntVal[i] = aIntVal[i] + hvp;
          goto LAddARSRw2;
        end;
      end;
    end;
  end;
  aRwtype[acnt] = invtyp;
  aInvoiceNr[acnt] = idnr;
  aInvDate[acnt] = idt;
  aDueDate[acnt] = ddt;
  aCurncyCode[acnt] = currency;  
  aIntVal[acnt] = hvp;
  aRVal[acnt] = tvp;
  aCustOrdNo[acnt] = custordno;
  alatedays[acnt] = -1;
  aRemndr[acnt] = -1;
  aOfficialSerNo[acnt] = offsernr;
  acnt = acnt + 1;
LAddARSRw2:;  
  RETURN;
END;

procedure DocCustListTransCLOut(record RcVc RepSpec,record IPrsVc IPrsr,record CUVc CUp,var val balp,Array Integer aRwtype,Array string aInvoiceNr,Array LongInt alatedays,Array LongInt aRemndr,Array Date aInvDate,Array Date aDueDate,Array string aCurncyCode,Array val aIntVal,Array val aRVal,Array string aCustOrdNo,var Integer acnt)
begin
  record CLOutVc CLOutr;
  row CLOutVc CLOutrw;
  Integer i,rwcnt;
  val cuscurval;
  val v;
  Date blankd;
  Array string 255 aOfficialSerNo;
        
  v = blankval;
  CLOutr.SerNr = IPrsr.TransNr;
  if (ReadFirstMain(CLOutr,1,true)) then begin
    if (CLOutr.Invalid!=0) then begin goto LDocCustListTransCLOut; end;
    if (nonblank(RepSpec.CurncyCode)) then begin
      if (CLOutr.CurncyCode!=RepSpec.CurncyCode) then begin goto LDocCustListTransCLOut; end;
    end;
    rwcnt = MatRowCnt(CLOutr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CLOutr,i,CLOutrw);
      if (IPrsr.IVNr>0) then begin
      if ((CLOutrw.Type==1) and (CLOutrw.TransNr!=-1)) then begin
        v = blankval;
        if (CLOutrw.Sum!=0)then begin              
          if (CLOutrw.TransNr==IPrsr.IVNr) then begin
            if (CLOutr.TransDate==IPrsr.TransDate) then begin
              if (CLOutr.CUCode==IPrsr.CustCode) then begin
                v = CLOutrw.Sum;
                cuscurval = MulRateToBase1(CLOutr.CurncyCode,v,CLOutr.FrRate,CLOutr.ToRateB1,CLOutr.ToRateB2,CLOutr.BaseRate1,CLOutr.BaseRate2,DefaultCurRoundOff);
                if (CLOutr.CurncyCode==CUp.CurncyCode) then begin
                  cuscurval = v;
                end;
                balp = balp + cuscurval;
                if (v!=0) then begin
                  AddARSRw2(aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt,6,CLOutr.SerNr,"",IPrsr.TransDate,blankd,v,cuscurval,CLOutr.CurncyCode,"",false);
                end;
              end;
            end;
          end;
        end;
      end;      
      end;      
      if ((CLOutrw.Type==5) and (CLOutrw.TransNr!=-1)) then begin
        v = blankval;
        if (CLOutrw.Sum!=0) then begin              
          if (IPrsr.IVNr!=-1) then begin
            if (CLOutr.TransDate==IPrsr.TransDate) then begin
              if (CLOutrw.Company==IPrsr.CustCode) then begin
                v = CLOutrw.Sum;
                cuscurval = MulRateToBase1(CLOutr.CurncyCode,v,CLOutr.FrRate,CLOutr.ToRateB1,CLOutr.ToRateB2,CLOutr.BaseRate1,CLOutr.BaseRate2,DefaultCurRoundOff);
                if (CLOutr.CurncyCode==CUp.CurncyCode) then begin
                  cuscurval = v;
                end;
                balp = balp + cuscurval;
                AddARSRw2(aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,
                        aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt,
                        7,CLOutr.SerNr,"",IPrsr.TransDate,blankd,v,cuscurval,CLOutr.CurncyCode,"",false);
              end;
            end;
          end;
        end;
      end;      
    end;   
  end;
LDocCustListTransCLOut:;  
  return;
end;  

procedure DocCustListTransCLIn(record RcVc RepSpec,record IPrsVc IPrsr,record CUVc CUp,var val balp,Array Integer aRwtype,Array string aInvoiceNr,Array LongInt alatedays,Array LongInt aRemndr,Array Date aInvDate,Array Date aDueDate,Array string aCurncyCode,Array val aIntVal,Array val aRVal,Array string aCustOrdNo,var Integer acnt)
BEGIN
  record CLInVc CLInr;
  row CLInVc CLInrw;
  Integer i,rwcnt;
  val cuscurval;
  val v;
  Date blankd;
  Array string 255 aOfficialSerNo;
          
  v = blankval;
  CLInr.SerNr = IPrsr.TransNr;
  if (ReadFirstMain(CLInr,1,true)) then begin
    if (CLInr.Invalid!=0) then begin goto LDocCustListTransCLIn; end;
    if (nonblank(RepSpec.CurncyCode)) then begin
      if (CLInr.CurncyCode!=RepSpec.CurncyCode) then begin goto LDocCustListTransCLIn; end;
    end;
    rwcnt = MatRowCnt(CLInr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CLInr,i,CLInrw);
      if ((CLInrw.Type==1) and (CLInrw.TransNr!=-1)) then begin
        v = blankval;
        if (CLInrw.Sum!=0)then begin              
          if (CLInrw.TransNr==IPrsr.IVNr) then begin
            if (CLInr.TransDate==IPrsr.TransDate) then begin
              if (CLInr.CUCode==IPrsr.CustCode) then begin
                v = CLInrw.Sum;
                cuscurval = MulRateToBase1(CLInr.CurncyCode,v,CLInr.FrRate,CLInr.ToRateB1,CLInr.ToRateB2,CLInr.BaseRate1,CLInr.BaseRate2,DefaultCurRoundOff);
                if (CLInr.CurncyCode==CUp.CurncyCode) then begin
                  cuscurval = v;
                end;
                balp = balp - cuscurval;
              end;
            end;
          end;
          if (v!=0) then begin
            v = -v;
            AddARSRw2(aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,
                        aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt,
                        7,CLInr.SerNr,"",IPrsr.TransDate,blankd,v,-cuscurval,CLInr.CurncyCode,"",false);
          end;
        end;
      end;
      if ((CLInrw.Type==4) and (CLInrw.TransNr!=-1)) then begin
        v = blankval;
        if (CLInrw.Sum!=0) then begin              
          if (IPrsr.IVNr==-1) then begin
            if (CLInr.TransDate==IPrsr.TransDate) then begin
              if (CLInrw.Company==CUp.Code) then begin
                v = CLInrw.Sum;
                cuscurval = MulRateToBase1(CLInr.CurncyCode,v,CLInr.FrRate,CLInr.ToRateB1,CLInr.ToRateB2,CLInr.BaseRate1,CLInr.BaseRate2,DefaultCurRoundOff);
                cuscurval = v;
                balp = balp - cuscurval;
              end;
            end;
          end;
          if (v!=0) then begin
            v = - v;
            AddARSRw2(aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,
                        aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt,
                        7,CLInr.SerNr,"",IPrsr.TransDate,blankd,v,-cuscurval,CLInr.CurncyCode,"",false);
          end;          
        end;
      end;     
    end;   
  end;
LDocCustListTransCLIn:;
  return;
END;  

procedure CustOnAccBal(record CUVc CUr,date baldate,var val bal,var val balb1)
BEGIN
  record RcVc RepSpec;
  val sum,sum2,rval,sumbooked,sumnow,sumincur,sumdiff;
  record SMVc CurTotalsr;
  Array string 10 debaccs;
  Array val debbal;
  Integer debcnt;
  
  sum = 0;
  if (blankdate(baldate))then begin
    RepSpec.d1 = CurrentDate;
  end else begin
    RepSpec.d1 = baldate;
  end;
  RepSpec.ArtMode = 1; // Otherwise the sum does not reflect the On Account Bal.
  GetOnAccBalance(RepSpec,CUr.Code,CUr.CurncyCode,true,1,sum,sum2,rval,sumbooked,sumnow,sumincur,sumdiff,CurTotalsr,debaccs,debbal,debcnt);
  bal = rval;
  balb1 = sum;
  RETURN;
END;

procedure CustListTrF(record RcVc RepSpec,record BaseCurBlock BCb,record CUVc CUp,var val balp)
BEGIN
  record IPrsVc IPrsr;
  val ARSSum;
  val ARSIntSum;
  val ARSSumNotLate;
  val ARSSumLate;
  Integer ARSLateCount;
  Integer ARSNotLateCount;
  val ARSARSum;
  val ARSsact,ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151;
  val ARSARSumod,ARSsactod,ARSs0od,ARSs1od,ARSs16od,ARSs31od,ARSs61od,ARSs91od,ARSs121od,ARSs151od;
  val ARSStartBal;
  val ARSOnAccBal,ARSOnAccBalb1;
  Boolean found,testf;
  Array Integer aRwtype;
  Array string 50 aInvoiceNr;
  Array LongInt alatedays;
  Array LongInt aRemndr;
  Array Date aInvDate;
  Array Date aDueDate;
  Array string 10 aCurncyCode;
  Array string 100 aOfficialSerNo;
  Array string 50 aCustOrdNo;
  Array val aIntVal;
  Array val aRVal;
  Array val aRValCur;
  Integer acnt;
  Integer aipcnt,aipi;
  Array LongInt aipnr;
  record RcVc orgRepSpec;
  Date td;
  val fakebalp;
  val t,rval,rvalb1;
  LongInt latedays;
  boolean printinv;
  record IVVc IVr;
  record IPVc IPr;
  row IPVc IPrw;
  record ARPayVc ARPr;
  Integer i,rwcnt;
  date baldate;
  val fr,to1,to2,br1,br2;
  vector Boolean vaddedf;
  
  ARSsact = 0;
  ARSsactod = 0;
  ARSStartBal = balp; 

  if (RepSpec.flags[10]!=0) then begin
    RecordCopy(orgRepSpec,RepSpec);
    RepSpec.sEndDate = AddDay(RepSpec.sStartDate,-1);
    td.year = 1980; td.month = 1; td.day = 1;
    RepSpec.sStartDate = td;
    IPrsr.CustCode = CUp.Code;
    IPrsr.TransDate = RepSpec.sStartDate;
    found = true;
    baldate = RepSpec.sEndDate;
    
    while (LoopKey("CustTransKey",IPrsr,2,found)) begin
      if (found) then begin
        if (IPrsr.CustCode!=CUp.Code) then begin
          found = false;
        end;
      end;
      if (found) then begin
        if (IPrsr.TransDate>RepSpec.sEndDate) then begin found = false; end;
      end;
      if (found) then begin
        switch (IPrsr.TransType) begin
          case kIPrsTransTypeInvoice:
           printinv = true;
           IVr.SerNr = IPrsr.TransNr;
           if (ReadFirstMain(IVr,1,true)) then begin 
             rval = blankval;
             rvalb1 = blankval;
             if ((IVr.InvType!=kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales) and (IVr.InvType!=kInvoiceTypeCash and IVr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT)) then begin
               rval = IVr.Sum4;
               if (nonblank(IVr.CurncyCode)) then begin
                 rvalb1 = IVr.BaseSum4;
               end;
               if (rvalb1==0) then begin
                 rvalb1 = rval;
               end;
             end;
             if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
               if (IVr.CredInv==-1) then begin
                 rval = -IVr.Sum4;
                 if (nonblank(IVr.CurncyCode)) then begin
                   rvalb1 = -IVr.BaseSum4;
                 end;
                 if (rvalb1==0) then begin
                   rvalb1 = rval;
                 end;
               end else begin
                 rval = blankval;
                 rvalb1 = blankval;
               end;    
             end;
             if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
               rval = blankval;
               rvalb1 = blankval;
             end;        
             if (IVr.TransDate>baldate) then begin          
               rval = blankval;
               rvalb1 = blankval;
             end else begin
               ARRnGetInvBalance(IVr,baldate,IVr.InvType,rval,rvalb1,latedays);
               SubPrePayments(IVr,rval,rvalb1);
               SubCashRows_IVVc(IVr,false,rval,rvalb1);          
             end;         
             if (rval==0) then begin
               printinv = false;
             end;
             if (printinv==true) then begin 
               DocCustListTransBalanceIV(rval,IPrsr,CUp,fakebalp,aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
//               DocCustListTransIV(RepSpec,IPrsr,CUp,fakebalp,aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
             end; 
           end;  
         case kIPrsTransTypeReceipt:
            IPr.SerNr = IPrsr.TransNr;
            if (ReadFirstMain(IPr,1,true)) then begin
              rwcnt = MatRowCnt(IPr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(IPr,i,IPrw);
                if (IPrw.InvoiceNr<0) and (vaddedf[IPr.SerNr]==false) then begin
                  vaddedf[IPr.SerNr] = true;
                  if (IPrw.CUPNr>0) then begin
                    ARPr.CUPNr = IPrw.CUPNr; 
                    if (ReadFirstMain(ARPr,1,true)) then begin
                      if ((blank(CUp.CurncyCode)) or (CUp.CurncyCode==BCb.BaseCur1)) then begin          
                        ARSStartBal = ARSStartBal - ARPr.BookRVal;
                      end else begin
                        ARSStartBal = ARSStartBal - ARPr.RVal;
                      end;
                    end;
                  end else begin              
                    t = IPrw.InvVal;
                    if ((blank(CUp.CurncyCode)) or (CUp.CurncyCode==BCb.BaseCur1)) then begin          
                      if (IPrw.B1BankVal!=0) then begin
                        t = IPrw.B1BankVal;
                      end else begin
                        GetFullCurncyRate(CUp.CurncyCode,IPr.TransDate,fr,to1,to2,br1,br2);
                        t = MulRateToBase1(CUp.CurncyCode,t,fr,to1,to2,br1,br2,DefaultCurRoundOff);
                      end;
                    end;
                    ARSStartBal = ARSStartBal - t;
                  end;
                end;
              end;
            end;
         
//            DocCustListTransIP(RepSpec,IPrsr,CUp,fakebalp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt,aipnr,aipcnt);
         /*
          case kIPrsTransTypePurgeNLTransaction:
            ?
          case kIPrsTransTypeNLTransaction:
            DocCustListTransTR(IPrsr,CUp,fakebalp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
          case kIPrsTransTypeCashIn:
            DocCustListTransCLIn(IPrsr,CUp,fakebalp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
          case kIPrsTransTypeCashOut:
            DocCustListTransCLOut(IPrsr,CUp,fakebalp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
          case kIPrsTransTypeReverseCustomerPrepayment:
            DocCustListTransCLOut(IPrsr,CUp,fakebalp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
          case kIPrsTransTypeCredMan:
            DocCustListTransCredMan(IPrsr,CUp,fakebalp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
          */
        end;
      end;
    end;
    RecordCopy(RepSpec,orgRepSpec);
  end;
  
  ResetLoop(IPrsr);
  IPrsr.CustCode = CUp.Code;
  IPrsr.TransDate = RepSpec.sStartDate;
  found = true;
  while (LoopKey("CustTransKey",IPrsr,2,found)) begin
    if (found) then begin
      if (IPrsr.CustCode!=CUp.Code) then begin
        found = false;
      end;
    end;
    if (found) then begin
      if (IPrsr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    end;
    if (found) then begin
      switch (IPrsr.TransType) begin
        case kIPrsTransTypeInvoice:
          DocCustListTransIV(RepSpec,IPrsr,CUp,balp,aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
        case kIPrsTransTypeReceipt:
          DocCustListTransIP(RepSpec,IPrsr,CUp,balp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt,aipnr,aipcnt);
        case kIPrsTransTypePurgeNLTransaction:
          DocCustListTransPurgeTR(IPrsr,CUp,balp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
        case kIPrsTransTypeNLTransaction:
          DocCustListTransTR(IPrsr,CUp,balp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
        case kIPrsTransTypeCashIn:
          DocCustListTransCLIn(RepSpec,IPrsr,CUp,balp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
        case kIPrsTransTypeCashOut:
          DocCustListTransCLOut(RepSpec,IPrsr,CUp,balp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
        case kIPrsTransTypeReverseCustomerPrepayment:
          DocCustListTransCLOut(RepSpec,IPrsr,CUp,balp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
        case kIPrsTransTypeCredMan:
          DocCustListTransCredMan(IPrsr,CUp,balp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
      end;
    end;
  end;
  CustAged(CUp,CurrentDate,RepSpec.sStartDate,RepSpec.sEndDate,ARSARSum,ARSsact,ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151,RepSpec.flags[17]);
  CustAged(CUp,RepSpec.d1,RepSpec.sStartDate,RepSpec.sEndDate,ARSARSumod,ARSsactod,ARSs0od,ARSs1od,ARSs16od,ARSs31od,ARSs61od,ARSs91od,ARSs121od,ARSs151od,RepSpec.flags[17]);
  CustOnAccBal(CUp,RepSpec.d1,ARSOnAccBal,ARSOnAccBalb1);
  if (nonblank(CUp.CurncyCode)) then begin
    ARSARSum = ARSARSum + ARSOnAccBal; //balance should include on Acc
  end else begin
    ARSARSum = ARSARSum + ARSOnAccBalb1; //balance should include on Acc
  end;
  ARSSum = balp;
  switch (RepSpec.flags[1]) begin
    case 0:
      PrintCuPerForm(RepSpec,CUp,ARSSum,ARSOnAccBal,ARSOnAccBalb1,ARSIntSum,ARSSumLate,ARSARSum,ARSStartBal,ARSSumNotLate,ARSLateCount,ARSNotLateCount,
                     ARSsact,ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151,
                     ARSARSumod,ARSsactod,ARSs0od,ARSs1od,ARSs16od,ARSs31od,ARSs61od,ARSs91od,ARSs121od,ARSs151od,
                     aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRValCur,aCurncyCode,aOfficialSerNo,aCustOrdNo,acnt); 
    case 1:
      if (acnt>0) or (ARSSum!=0) then begin
        PrintCuPerForm(RepSpec,CUp,ARSSum,ARSOnAccBal,ARSOnAccBalb1,ARSIntSum,ARSSumLate,ARSARSum,ARSStartBal,ARSSumNotLate,ARSLateCount,ARSNotLateCount,
                       ARSsact,ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151,
                       ARSARSumod,ARSsactod,ARSs0od,ARSs1od,ARSs16od,ARSs31od,ARSs61od,ARSs91od,ARSs121od,ARSs151od,
                       aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRValCur,aCurncyCode,aOfficialSerNo,aCustOrdNo,acnt); 
      end;
    case 2:
      if (ARSARSum!=0 or ARSARSumod!=0) then begin
        PrintCuPerForm(RepSpec,CUp,ARSSum,ARSOnAccBal,ARSOnAccBalb1,ARSIntSum,ARSSumLate,ARSARSum,ARSStartBal,ARSSumNotLate,ARSLateCount,ARSNotLateCount,
                       ARSsact,ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151,
                       ARSARSumod,ARSsactod,ARSs0od,ARSs1od,ARSs16od,ARSs31od,ARSs61od,ARSs91od,ARSs121od,ARSs151od,
                       aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRValCur,aCurncyCode,aOfficialSerNo,aCustOrdNo,acnt); 
      end;
  end;
  
  return;
end;

procedure DocCustList_PrintDataForInvoice(record RcVc RepSpec,LongInt IVSerNr,record CUVc CUp,var val balp,Array Integer aRwtype,Array string aInvoiceNr,Array string aOfficialSerNo,Array LongInt alatedays,Array LongInt aRemndr,Array Date aInvDate,Array Date aDueDate,Array string aCurncyCode,Array val aIntVal,Array val aRVal,Array string aCustOrdNo,var Integer acnt)
begin
  record IPrsVc IPrsr;
  Boolean found,testf;
  string 60 ckey;
  record IVVc IVr;
  Array LongInt aipnr;
  Integer aipcnt;
  
  IVr.SerNr = IVSerNr;
  if (ReadFirstMain(IVr,1,true)==false) then begin goto LDocCustList_PrintDataForInvoice; end;
  if (IVr.Invalid!=0) then begin goto LDocCustList_PrintDataForInvoice; end;        
  if (IVr.InvType==kInvoiceTypePrepayment) then begin goto LDocCustList_PrintDataForInvoice; end;        
  
  IPrsr.IVNr = IVSerNr;
  IPrsr.TransDate = RepSpec.sStartDate;
  ckey = "IVKeyTransDate";
  IPrsr.CustCode = CUp.Code;
  IPrsr.TransType = kIPrsTransTypeInvoice;
  found = true;
  while (LoopKey(ckey,IPrsr,3,found)) begin
    if (IPrsr.IVNr!=IVSerNr) then begin found = false; end;  
    if (IPrsr.CustCode!=CUp.Code) then begin found = false; end;  
    if (found) then begin
      if (IPrsr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    end;  
    if (found) then begin
      testf = true;
      if (IPrsr.IVNr==IPrsr.TransNr) then begin
        if (IPrsr.TransType<kIPrsTransTypeReceipt) then begin testf = false; end;  
      end;
      if (testf) then begin
        switch (IPrsr.TransType) begin
          case kIPrsTransTypeInvoice:
            DocCustListTransIV(RepSpec,IPrsr,CUp,balp,aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
          case kIPrsTransTypeReceipt:
            DocCustListTransIP(RepSpec,IPrsr,CUp,balp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt,aipnr,aipcnt);
          case kIPrsTransTypePurgeNLTransaction:
            DocCustListTransPurgeTR(IPrsr,CUp,balp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
          case kIPrsTransTypeNLTransaction:
            DocCustListTransTR(IPrsr,CUp,balp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
          case kIPrsTransTypeCashIn:
            DocCustListTransCLIn(RepSpec,IPrsr,CUp,balp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
          case kIPrsTransTypeCashOut:
            DocCustListTransCLOut(RepSpec,IPrsr,CUp,balp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
          case kIPrsTransTypeReverseCustomerPrepayment:
            DocCustListTransCLOut(RepSpec,IPrsr,CUp,balp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
          case kIPrsTransTypeCredMan:
            DocCustListTransCredMan(IPrsr,CUp,balp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
        end;
      end;
    end;
  end;
LDocCustList_PrintDataForInvoice:;  
  return;
end;

procedure CustListTrF_SortOnInvoice(record RcVc RepSpec,record CUVc CUp,var val balp)
begin
  record IPrsVc IPrsr;
  val ARSSum;
  val ARSIntSum;
  val ARSSumNotLate;
  val ARSSumLate;
  Integer ARSLateCount;
  Integer ARSNotLateCount;
  val ARSARSum;
  val ARSsact,ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151;
  val ARSARSumod,ARSsactod,ARSs0od,ARSs1od,ARSs16od,ARSs31od,ARSs61od,ARSs91od,ARSs121od,ARSs151od;
  val ARSStartBal;
  val ARSOnAccBal,ARSOnAccBalb1;
  Boolean found,testf;
  Array Integer aRwtype;
  Array string 50 aInvoiceNr;
  Array LongInt alatedays;
  Array LongInt aRemndr;
  Array Date aInvDate;
  Array Date aDueDate;
  Array string 10 aCurncyCode;
  Array string 100 aOfficialSerNo;
  Array string 50 aCustOrdNo;
  Array val aIntVal;
  Array val aRVal;
  Array val aRValCur;
  Integer acnt;
  Integer aipcnt,aipi;
  Array LongInt aipnr;

  ARSStartBal = balp; 
  IPrsr.CustCode = CUp.Code;
  IPrsr.TransDate = RepSpec.sStartDate;
  found = true;
  while (LoopKey("CustTransKey",IPrsr,2,found)) begin
    if (found) then begin
      if (IPrsr.CustCode!=CUp.Code) then begin
        found = false;
      end;
    end;
    if (found) then begin
      if (IPrsr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    end;
    if (found) then begin
      switch (IPrsr.TransType) begin
        case kIPrsTransTypeInvoice:
          if (IPrsr.IVNr==IPrsr.TransNr) then begin
            DocCustListTransIV(RepSpec,IPrsr,CUp,balp,aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
            DocCustList_PrintDataForInvoice(RepSpec,IPrsr.TransNr,CUp,balp,aRwtype,aInvoiceNr,aOfficialSerNo,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
          end;
        case kIPrsTransTypeReceipt:
          if (IPrsr.IVNr<=0) then begin
            DocCustListTransIP(RepSpec,IPrsr,CUp,balp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt,aipnr,aipcnt);
          end;
        case kIPrsTransTypePurgeNLTransaction:
          if (IPrsr.IVNr<=0) then begin
            DocCustListTransPurgeTR(IPrsr,CUp,balp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
          end;
        case kIPrsTransTypeNLTransaction:
          if (IPrsr.IVNr<=0) then begin
            DocCustListTransTR(IPrsr,CUp,balp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
          end;
        case kIPrsTransTypeCashIn:
          if (IPrsr.IVNr<=0) then begin
            DocCustListTransCLIn(RepSpec,IPrsr,CUp,balp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
          end;
        case kIPrsTransTypeCashOut:
          if (IPrsr.IVNr<=0) then begin
            DocCustListTransCLOut(RepSpec,IPrsr,CUp,balp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
          end;
        case kIPrsTransTypeReverseCustomerPrepayment:
          DocCustListTransCLOut(RepSpec,IPrsr,CUp,balp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
        case kIPrsTransTypeCredMan:
          DocCustListTransCredMan(IPrsr,CUp,balp,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aCurncyCode,aIntVal,aRVal,aCustOrdNo,acnt);
      end;
    end;
  end;
  CustAged(CUp,CurrentDate,RepSpec.sStartDate,RepSpec.sEndDate,ARSARSum,ARSsact,ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151,RepSpec.flags[17]);
  CustAged(CUp,RepSpec.d1,RepSpec.sStartDate,RepSpec.sEndDate,ARSARSumod,ARSsactod,ARSs0od,ARSs1od,ARSs16od,ARSs31od,ARSs61od,ARSs91od,ARSs121od,ARSs151od,RepSpec.flags[17]);
  CustOnAccBal(CUp,RepSpec.d1,ARSOnAccBal,ARSOnAccBalb1);
  
  ARSSum = balp;
  if (RepSpec.flags[1]==0) then begin
    PrintCuPerForm(RepSpec,CUp,ARSSum,ARSOnAccBal,ARSOnAccBalb1,ARSIntSum,ARSSumLate,ARSARSum,ARSStartBal,ARSSumNotLate,ARSLateCount,ARSNotLateCount,
                   ARSsact,ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151,
                   ARSARSumod,ARSsactod,ARSs0od,ARSs1od,ARSs16od,ARSs31od,ARSs61od,ARSs91od,ARSs121od,ARSs151od,
                   aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRValCur,aCurncyCode,aOfficialSerNo,aCustOrdNo,acnt); 
  end else begin
    if (ARSARSum!=0) then begin
      PrintCuPerForm(RepSpec,CUp,ARSSum,ARSOnAccBal,ARSOnAccBalb1,ARSIntSum,ARSSumLate,ARSARSum,ARSStartBal,ARSSumNotLate,ARSLateCount,ARSNotLateCount,
                     ARSsact,ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151,
                     ARSARSumod,ARSsactod,ARSs0od,ARSs1od,ARSs16od,ARSs31od,ARSs61od,ARSs91od,ARSs121od,ARSs151od,
                     aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRValCur,aCurncyCode,aOfficialSerNo,aCustOrdNo,acnt); 
    end;
  end;
  return;
end;

global
procedure DoCuPerForm(record RcVc Dummyr,record RcVc RepSpec)
begin
  record CUVc CUr;
  record CSVc CSr;
  Boolean TrHs,stfound,testf;
  val sum1;
  val StartBal,blankv;
  string 255 frcc,tocc,currency;
  val v;
  Boolean notfullmonthf;
  record BaseCurBlock BCb;
  Array string 20 ac;

  SplitEclass(RepSpec.f4,ac);
  BlockLoad(BCb);
  notfullmonthf = GetDay(RepSpec.sStartDate)!=1;
  frcc = FirstInRange(RepSpec.f1,20);
  tocc = LastInRange(RepSpec.f1,20);  
  if (blankdate(RepSpec.d1)) then begin
//    RepSpec.d1 = RepSpec.sEndDate;//statement date end of period must be worng , 
    RepSpec.d1 = CurrentDate;
  end;
  CUr.Code = frcc;
  TrHs = true;
  while (LoopMain(CUr,1,TrHs)) begin
    if (nonblank(tocc)) then begin
      if (CUr.Code>tocc) then begin
        TrHs = false;
      end;
    end;
    testf = true;    
    if (CUr.CUType==0) then begin testf = false; end;
    if (nonblank(RepSpec.f4)) then begin
      if (SclassInEclass(ac,CUr.Classification)==0) then begin testf = false; end;
    end;  
    if (nonblank(RepSpec.ObjStr)) then begin
      if (SetInSet(RepSpec.ObjStr,CUr.Objects)==false) then begin testf = false; end;
    end;  
    if (nonblank(RepSpec.LastAcc)) then begin
      if (RepSpec.LastAcc<>CUr.MainPartner) then begin
        testf = false;
      end;
    end;
    if (TrHs and testf) then begin
      StartBal = blankval;
      if (blank(RepSpec.f3) or (RepSpec.f3==CUr.CustCat)) then begin
        CSr.CustCode = CUr.Code;
        stfound = ReadFirstMain(CSr,1,true);
//        if (RepSpec.flags[10]!=0) then begin
//          stfound = false;
//        end;        
        if (stfound==true) then begin  
          if (nonblank(CUr.CurncyCode)) then begin
            currency = RepSpec.CurncyCode;
            if (blank(currency)) then begin
              currency = CUr.CurncyCode;
            end;
            if (notfullmonthf) then begin
              CUGetStartBalance(CUr,"salesinclvat",currency,RepSpec.sStartDate,StartBal,false);
              CUGetStartBalance(CUr,"paidvalue",currency,RepSpec.sStartDate,v,false);  
              StartBal = StartBal + v;
            end else begin
              CUGetStartBalance(CUr,"salesinclvat",currency,RepSpec.sStartDate,StartBal,currency==BCb.BaseCur1);
              CUGetStartBalance(CUr,"paidvalue",currency,RepSpec.sStartDate,v,currency==BCb.BaseCur1);  
              StartBal = StartBal + v;
            end;
          end else begin
            if (notfullmonthf) then begin
              CUGetStartBalance(CUr,"balance",RepSpec.CurncyCode,RepSpec.sStartDate,StartBal,true);
            end else begin      
              CUGetStartBalance(CUr,"balance",RepSpec.CurncyCode,RepSpec.sStartDate,StartBal,true);
            end;
          end else begin
            StartBal = 0;
            v = 0;
          end;
        end;
        if (RepSpec.flags[10]!=0) then begin
          RepSpec.vals2 = StartBal;
          StartBal = blankv;
        end;           
        if (RepSpec.flags[9]==0) then begin
          CustListTrF(RepSpec,BCb,CUr,StartBal);
        end else begin
          CustListTrF_SortOnInvoice(RepSpec,CUr,StartBal);
        end;
      end;
    end;
  end;
  RETURN;
END;

global
procedure CuPerForm(record RcVc RepSpec)
BEGIN
  Boolean tmpf;
  
  if (RepSpec.wholemonthf==0) then begin
//    MessageBox(1163,"");
//    goto LCuPerForm;
  end;
  tmpf = PrintDocument(RepSpec,"CuPerForm",false);
LCuPerForm:;
  RETURN;
END;
