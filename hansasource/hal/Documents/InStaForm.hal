external procedure PrintCurrencyCode(string,string);
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external procedure GetMonthText(string,Date,var string);
external procedure GetDateMonthInWords(Date,var string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure PrintValue(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external procedure CommonDocumentFields(record RcVc);
external procedure GetLangNr(string,var record LangNrVc);
external function Boolean Getformcode(Integer,Integer,string,string,string,LongInt,LongInt,string,string,Integer,string,var string);
external function Integer NumberofDocumentPages(string,Integer);

procedure DoPrintInStaForm(record RcVc RepSpec,string InStaVATNr,string InStaCompName,string InStaAddr0,string InStaAddr1,string InStaAddr2,
                           string InStaAddr3,string InStaAddr4,Array string aInSrwCountryOrigCode,string InStaUSName,
                           Date InStaPrintDate,Date InStaStartDate,Date InStaEndDate,Integer InStarwcnt,val InStatotsum,
                           Array string aInSrwCommodity,Array string aInSrwArtEKNCode,Array string aInSrwShipMode,Array string aInSrwShipDeal,Array string aInSrwCountryCode,
                           Array string aInSrwArtCode,Array string aInSrwTraderRef,Array string aInSrwUnittext,
                           Array val aInSrwQuant,Array string aInSrwCur,Array val aInSrwSum,Array val aInSrwWeight,
                           Array LongInt aInSrwconsignno,Array Integer aInSrwTransType,Array val aInStatValSrwSum,Array val aInStatValSrwB1Sum,
                           Array val aInSrwSumB1,Integer acnt)
BEGIN
  Integer i;
  record SysFormatBlock SysFormatRec;
  record LangNrVc LangNrr;
  record ShipDealVc ShipDealr;
  string 60 shipdealcomment;
  integer type;
  roundmode roundcnt;
  val totstatval,totSumB1;
  string 255 tstr;
  
  GetLangNr("",LangNrr);
  BlockLoad(SysFormatRec);
  for (i=0;i<acnt;i=i+1) begin
    OUTFORMFIELD("F_ARTNR",aInSrwArtCode[i]);
    OUTFORMFIELD("F_ITEMTYPE",aInSrwTraderRef[i]);
    OUTFORMFIELD("F_EKNCODE",aInSrwArtEKNCode[i]);
    OUTFORMFIELD("F_ARTNR2",aInSrwCommodity[i]);
    OUTFORMFIELD("F_COUNTRYOFORIGIN",aInSrwCountryOrigCode[i]);
    OUTFORMFIELD("F_INVLEVSATT",aInSrwShipMode[i]);
    ShipDealr.Code = aInSrwShipDeal[i];
    shipdealcomment = "";
    if (ReadFirstMain(ShipDealr,1,true)) then begin
      shipdealcomment = ShipDealr.Comment;
    end;
    OUTFORMFIELD("F_COMMENT",shipdealcomment);
    OUTFORMFIELD("F_INVLEVVILLK",aInSrwShipDeal[i]);
    OUTFORMFIELD("F_COUNTRYCODE",aInSrwCountryCode[i]);
    OUTFORMFIELD("F_ENHET",aInSrwUnittext[i]);
    OUTFORMFIELD("F_TRANSNR",aInSrwconsignno[i]);
    OUTFORMFIELD("F_FAKTURATYP",aInSrwTransType[i]);
    OUTFORMFIELD("F_INQTY",i+1);
    if (RepSpec.flags[6]==0) then begin
      type = M4Val;
      roundcnt = DefaultCurRoundOff;
    end else begin
      type = M4UVal;
      roundcnt = SetRoundModeD(0);
    end;
    PrintValue("F_WEIGHT",round(aInSrwWeight[i],roundcnt),type,LangNrr,SysFormatRec,false);
    if (aInSrwWeight[i]==0 or RepSPec.flags[7]==0) then begin
      PrintValue("F_ANTAL",round(aInSrwQuant[i],roundcnt),type,LangNrr,SysFormatRec,false); 
    end;
    PrintValue("F_BELOPP",round(aInSrwSum[i],roundcnt),type,LangNrr,SysFormatRec,false);   
    
    PrintCurrencyCode("F_VALUTA",aInSrwCur[i]);
    OUTFORMFIELD("F_FOBVALFORR",aInStatValSrwSum[i]);//
    OUTFORMFIELD("F_FOBVALLOCAL",aInStatValSrwB1Sum[i]);//
    totstatval = totstatval + aInStatValSrwB1Sum[i];
    OUTFORMFIELD("F_BASE1ROWTOT",aInSrwSumB1[i]);
    totSumB1 = totSumB1 + aInSrwSumB1[i];
    EndFormRow;
  end;
  OUTFORMFIELD("F_COMMREGNO",InStaVATNr);
  OUTFORMFIELD("F_EGETNAMN",InStaCompName);
  OUTFORMFIELD("F_ADDR1",InStaAddr0);
  OUTFORMFIELD("F_ADDR2",InStaAddr1);
  OUTFORMFIELD("F_ADDR3",InStaAddr2);
  OUTFORMFIELD("F_INVADDR3",InStaAddr3);
  OUTFORMFIELD("F_INVADDR4",InStaAddr4);
  OUTFORMFIELD("F_PRODDATE",InStaPrintDate);
  OUTFORMFIELD("F_KOLLI",acnt);
  OUTFORMFIELD("F_TRANSDATUM",InStaStartDate);  // F_DATUM is a common field that always prints current date...
  OUTFORMFIELD("F_ENDDATE",InStaEndDate);
  OUTFORMFIELD("F_FROMCONTACT",InStaUSName);
  OUTFORMFIELD("F_TOTINQTY",InStarwcnt);
  PrintValue("F_TOTSUM",InStatotsum,M4Val,LangNrr,SysFormatRec,false);
  PrintValue("F_TOTFOBVALLOCAL",totstatval,M4Val,LangNrr,SysFormatRec,false);
  PrintValue("F_BASE1SUMMA",totSumB1,M4Val,LangNrr,SysFormatRec,false);
  GetDateMonthInWords(RepSpec.sStartDate,tstr);
  OUTFORMFIELD("F_DATEMONTHINWORDS",tstr);
  GetMonthText("",RepSpec.sStartDate,tstr);
  OUTFORMFIELD("F_DATEMONTHTEXT",tstr);
  OUTFORMFIELD("F_DATEDAY",GetDay(RepSpec.sStartDate));
  OUTFORMFIELD("F_DATEMONTH",GetMonth(RepSpec.sStartDate));
  OUTFORMFIELD("F_DATEYEAR",GetYear(RepSpec.sStartDate));
  RETURN;
END;

procedure PrintInStaForm(record RcVc RepSpec,
                         string InStaVATNr,string InStaCompName,string InStaAddr0,string InStaAddr1,string InStaAddr2,
                         string InStaAddr3,string InStaAddr4,Array string aInSrwCountryOrigCode,string InStaUSName,
                         Date InStaPrintDate,Date InStaStartDate,Date InStaEndDate,Integer InStarwcnt,val InStatotsum,
                         Array string aInSrwCommodity,Array string aInSrwArtEKNCode,Array string aInSrwShipMode,Array string aInSrwShipDeal,Array string aInSrwCountryCode,
                         Array string aInSrwArtCode,Array string aInSrwTraderRef,Array string aInSrwUnittext,
                         Array val aInSrwQuant,Array string aInSrwCur,Array val aInSrwSum,Array val aInSrwWeight,
                         Array LongInt aInSrwconsignno,Array Integer aInSrwTransType,Array val aInStatValSrwSum,Array val aInStatValSrwB1Sum,
                         Array val aInSrwSumB1,Integer acnt)

BEGIN
  Integer i,rwcnt;  
  Boolean printf;
  Integer intdocnr;
  string 30 formcode;
  record FormDefVc FDr;
  row FormDefVc FDrw;
  
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LPrintInStaForm;
  end;
  rwcnt = MatRowCnt(FDr);
  intdocnr = 1;
  printf = true;
  
  while (printf) begin  
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,-1,FDrw.PrintGroupCode,
                      "",intdocnr,"",formcode)) then
      begin
        goto LBREAKInSta;
      end;
    end;
LBREAKInSta:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin
        CommonDocumentFields(RepSpec);
        NumberofDocumentPages(formcode,acnt);
        
        DoPrintInStaForm(RepSpec,InStaVATNr,InStaCompName,InStaAddr0,InStaAddr1,InStaAddr2,
                         InStaAddr3,InStaAddr4,aInSrwCountryOrigCode,InStaUSName,InStaPrintDate,InStaStartDate,InStaEndDate,InStarwcnt,InStatotsum,
                         aInSrwCommodity,aInSrwArtEKNCode,aInSrwShipMode,aInSrwShipDeal,aInSrwCountryCode,
                         aInSrwArtCode,aInSrwTraderRef,aInSrwUnittext,aInSrwQuant,aInSrwCur,aInSrwSum,
                         aInSrwWeight,aInSrwconsignno,aInSrwTransType,aInStatValSrwSum,aInStatValSrwB1Sum,aInSrwSumB1,acnt);
        CloseForm;
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LPrintInStaForm:;  
  RETURN;
END;
                      

procedure AddInStaRow(Array string aInSrwCommodity,Array string aInSrwArtEKNCode,Array string aInSrwShipMode,Array string aInSrwShipDeal,Array string aInSrwCountryCode,Array string aInSrwCountryOrigCode,
                      Array string aInSrwArtCode,Array string aInSrwTraderRef,Array val aInSrwQuant,Array string aInSrwCur,Array val aInSrwSum,
                      Array val aInSrwWeight,Array string aInSrwUnittext,Array LongInt aInSrwconsignno,Array Integer aInSrwTransType,Array val aInStatValSrwSum,
                      Array val aInStatValSrwB1Sum,Array val aInSrwSumB1,var Integer acnt,
                      Integer invtype,string commodity,string commodity2,string shipmode,string shipdeal,string country,string origcountry,string artcode,
                      string artname,val weight,string unit,Integer curtype,val qp,val qp2,string currency,val sump,val statval,val statvalb1,val sumb1)
BEGIN
  aInSrwCommodity[acnt] = commodity;
  aInSrwArtEKNCode[acnt] = commodity2;
  aInSrwShipMode[acnt] = shipmode;
  aInSrwShipDeal[acnt] = shipdeal;
  aInSrwCountryCode[acnt] = country;
  aInSrwCountryOrigCode[acnt] = origcountry;
  aInSrwArtCode[acnt] = artcode;
  aInSrwTraderRef[acnt] = artname;
  if (invtype!=kInvoiceTypeCredit and invtype!=kInvoiceTypeCreditSpecialSales) then begin
    aInSrwQuant[acnt] = qp2;
    aInSrwSum[acnt] = sump;
    aInSrwWeight[acnt] = qp * weight;
    aInSrwSumB1[acnt] = sumb1;
    aInStatValSrwSum[acnt] = statval;
    aInStatValSrwB1Sum[acnt] = statvalb1;
  end else begin
    aInSrwQuant[acnt] = -qp2;
    aInSrwSum[acnt] = -sump;
    aInSrwWeight[acnt] = -qp * weight;
    aInSrwSumB1[acnt] = -sumb1;
    aInStatValSrwSum[acnt] = -statval;
    aInStatValSrwB1Sum[acnt] = -statvalb1;
  end;  
  aInSrwUnittext[acnt] = unit;
  aInSrwCur[acnt] = currency;
  aInSrwconsignno[acnt] = 1;
  aInSrwTransType[acnt] = curtype;
  acnt = acnt + 1;
  RETURN;
END;

global
procedure DoInStaForm(record RcVc Dummyr,record RcVc RepSpec)
BEGIN
  record INVc INr;
  record ShipDealVc ShipDr;
  record CountryVc Cntrr;
  record DMVc DMr;
  record IVVc IVr;
  record CUVc CUr;
  record SourceVc Sourcer;
  row IVVc IVrw;  
  record CYBlock CompInfoRec;
  record BaseCurBlock BaseCurRec;
  Date InStaPrintDate;
  Date InStaStartDate;
  Date InStaEndDate;
  string 60 InStaCompName;
  string 60 InStaAddr0;
  string 60 InStaAddr1;
  string 60 InStaAddr2;
  string 60 InStaAddr3;
  string 60 InStaAddr4;
  string 20 InStaVATNr;
  string 10 unit;
  Integer InStarwcnt;
  val InStatotsum;
  string 60 InStaUSName;
  LongInt afr,ato;
  string 20 frit,toit;
  string 20 fritgr,toitgr;
  string 60 origcountry;
  string 5 curren;
  Boolean TrHs,testf,rowexistf;
  Integer i,j,rwcnt,rwcnt2,curtype; 
  val t,qty,weight,sv,svb1,sumb1;
  string 5 InStaCountry;
  Array string 20 aInSrwArtCode; 
  Array string 20 aInSrwArtEKNCode; 
  Array string 60 aInSrwTraderRef;       
  Array string 20 aInSrwCommodity;
  Array string 5 aInSrwShipMode;
  Array string 5 aInSrwShipDeal;
  Array string 5 aInSrwCountryCode;
  Array string 60 aInSrwCountryOrigCode;
  Array string 5 aInSrwCur;
  Array string 10 aInSrwUnittext;  
  Array val aInSrwWidth;
  Array val aInSrwHeight;
  Array val aInSrwDepth;
  Array val aInSrwWeight;
  Array val aInSrwQuant;
  Array val aInSrwSum;
  Array LongInt aInSrwconsignno;
  Array Integer aInSrwTransType;  
  Array val aInStatValSrwSum;
  Array val aInStatValSrwB1Sum;
  Array val aInSrwSumB1;
  Integer acnt;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  
  BlockLoad(CompInfoRec);
  BlockLoad(BaseCurRec);
  frit = FirstInRange(RepSpec.f1,20);
  toit = LastInRange(RepSpec.f1,20);
  afr = FirstInRange(RepSpec.f2,10);
  ato = LastInRange(RepSpec.f2,10);
  fritgr = FirstInRange(RepSpec.f3,10);
  toitgr = LastInRange(RepSpec.f3,10);
  InStaCompName = CompInfoRec.CompName;
//  InStaCountry = CompInfoRec.CountryCode;  
  InStaAddr0 = CompInfoRec.Addr0;
  InStaAddr1 = CompInfoRec.Addr1;
  InStaAddr2 = CompInfoRec.Addr2;
  InStaAddr3 = CompInfoRec.Addr3;
  InStaAddr4 = CompInfoRec.Addr4;
  InStaVATNr = CompInfoRec.VATNr;
  InStaUSName = RepSpec.LastAcc;
  InStatotsum = blankval;
  InStaPrintDate = CurrentDate;
  InStaStartDate = RepSpec.sStartDate;
  InStaEndDate = RepSpec.sEndDate;
  InStarwcnt = 0;
  TrHs = true;
  IVr.SerNr = afr;
  while (LoopMain(IVr,1,TrHs)) begin
    if (ato!=-1) then begin
      if (IVr.SerNr>ato) then begin TrHs = false; end;
    end;  
    if (TrHs) then begin
      testf = true;
      if (IVr.OKFlag==0) then begin testf = false; end;
      if (IVr.Invalid!=0) then begin testf = false; end;
      if (IVr.TransDate<RepSpec.sStartDate) then begin testf = false; end;
      if (IVr.TransDate>RepSpec.sEndDate) then begin testf = false; end;
      if (RepSpec.flags[1]!=1) then begin
        if (IVr.ExportFlag==0) then begin testf = false; end;      
      end;
      if (RepSpec.flags[2]!=1) then begin
        if (IVr.ExportFlag==1) or (IVr.ExportFlag==3) then begin testf = false; end;      
      end;
      if (RepSpec.flags[3]!=1) then begin
        if (IVr.ExportFlag==2) or (IVr.ExportFlag==4) then begin testf = false; end;      
      end;
      if (testf) then begin
        CUr.Code = IVr.CustCode;
        if (ReadFirstMain(CUr,1,true)==false) then begin goto L12DoInStaForm; end;
        if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin  
          curtype = 16;
        end else begin
          curtype = 10;
        end;
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          testf = true;
          if (nonblank(RepSpec.f1)) then begin
            if (IVrw.ArtCode<frit) then begin testf = false; end;
            if (IVrw.ArtCode>toit) then begin testf = false; end;
          end;  
          if (testf) then begin
            switch (IVrw.stp) begin
              case kInvoiceRowTypeCorrection:
                IVrw.Quant = -IVrw.Quant;
                IVrw.Sum = -IVrw.Sum;
            end;
            INr.Code = IVrw.ArtCode;
            if (ReadFirstMain(INr,1,true)==false) then begin goto LSkipDoInStaForm; end;
            if (nonblank(RepSpec.f3)) then begin
              if (INr.Group<fritgr) then begin goto LSkipDoInStaForm; end;
              if (INr.Group>toitgr) then begin goto LSkipDoInStaForm; end;
            end;  
            if (RepSpec.flags[4]==1) then begin
              if (INr.ItemType==0) then begin goto LSkipDoInStaForm; end;
            end;
            if (RepSpec.flags[5]==1) then begin
              if (INr.ItemType==3) then begin goto LSkipDoInStaForm; end;
            end;
            Sourcer.Code = INr.DefaultSource;
            origcountry = "";
            if (ReadFirstMain(Sourcer,1,true)) then begin
              origcountry = Sourcer.Addr2;
            end;
            rowexistf = false;
            if (RepSpec.flags[8]==1) then begin
              for (j=0;j<acnt;j=j+1) begin
                if (nonblank(INr.EKNCode) and (INr.EKNCode==aInSrwArtEKNCode[j])) then begin
                  if ((IVr.ShipMode==aInSrwShipMode[j]) and (IVr.ShipDeal==aInSrwShipDeal[j]) and (IVr.CurncyCode==aInSrwCur[j])) then begin
                    if ((CUr.CountryCode==aInSrwCountryCode[j]) and (origcountry==aInSrwCountryOrigCode[j]) and (aInSrwTransType[j]==curtype)) then begin
                      rowexistf = true;
                      goto L11DoInStaForm;
                    end;
                  end;
                end;
              end;
            end else begin
              for (j=0;j<acnt;j=j+1) begin
                if ((INr.EUCodex==aInSrwCommodity[j]) and (IVrw.ArtCode==aInSrwArtCode[j])) then begin
                  if ((IVr.ShipMode==aInSrwShipMode[j]) and (IVr.ShipDeal==aInSrwShipDeal[j]) and (IVr.CurncyCode==aInSrwCur[j])) then begin
                    if ((CUr.CountryCode==aInSrwCountryCode[j]) and (origcountry==aInSrwCountryOrigCode[j]) and (aInSrwTransType[j]==curtype)) then begin
                      rowexistf = true;
                      goto L11DoInStaForm;
                    end;   
                  end;
                end;                                 
              end;
            end;
L11DoInStaForm:;                
            sv = IVrw.Sum/IVr.Sum1;
            sv = Round(sv*IVr.StatVal,DefaultRoundMode);
            svb1 = MulRateToBase1(IVr.CurncyCode,sv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            sumb1 = MulRateToBase1(IVr.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            if (rowexistf==false) then begin
              InStarwcnt = InStarwcnt + 1;
              if (nonblank(INr.Unittext2) and (INr.UnitCoefficient>0)) then begin
                unit = INr.Unittext2;
                qty = IVrw.Quant*INr.UnitCoefficient;
              end else begin
                unit = INr.Unittext;
                qty = IVrw.Quant;
//                weight = INr.Weight;
              end;
              AddInStaRow(aInSrwCommodity,aInSrwArtEKNCode,aInSrwShipMode,aInSrwShipDeal,aInSrwCountryCode,aInSrwCountryOrigCode,
                      aInSrwArtCode,aInSrwTraderRef,aInSrwQuant,aInSrwCur,aInSrwSum,
                      aInSrwWeight,aInSrwUnittext,aInSrwconsignno,aInSrwTransType,aInStatValSrwSum,aInStatValSrwB1Sum,aInSrwSumB1,acnt,
                      IVr.InvType,INr.EUCodex,INr.EKNCode,IVr.ShipMode,IVr.ShipDeal,CUr.CountryCode,origcountry,IVrw.ArtCode,
                      INr.Name,INr.Weight,unit,curtype,IVrw.Quant,qty,IVr.CurncyCode,IVrw.Sum,sv,svb1,sumb1);
            end else begin
              if (nonblank(INr.Unittext2) and (INr.UnitCoefficient>0)) then begin
                qty = IVrw.Quant*INr.UnitCoefficient;
              end else begin
                qty = IVrw.Quant;
              end;
              if (IVr.InvType!=kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales) then begin            
                aInSrwQuant[j] = aInSrwQuant[j] + qty;
                aInSrwSum[j] = aInSrwSum[j] + IVrw.Sum;
                aInSrwSumB1[j] = aInSrwSumB1[j] + sumb1;
                aInSrwWeight[j] = aInSrwWeight[j] + IVrw.Quant * INr.Weight;
                aInStatValSrwSum[j] = aInStatValSrwSum[j] + sv;
                aInStatValSrwB1Sum[j] = aInStatValSrwB1Sum[j] + svb1;
                InStatotsum = InStatotsum + IVrw.Sum;
              end else begin
                aInSrwQuant[j] = aInSrwQuant[j] - qty;
                aInSrwSum[j] = aInSrwSum[j] - IVrw.Sum;
                aInSrwSumB1[j] = aInSrwSumB1[j] - sumb1;
                aInSrwWeight[j] = aInSrwWeight[j] - IVrw.Quant * INr.Weight;
                aInStatValSrwSum[j] = aInStatValSrwSum[j] - sv;
                aInStatValSrwB1Sum[j] = aInStatValSrwB1Sum[j] - svb1;
                InStatotsum = InStatotsum - IVrw.Sum;
              end;  
              aInSrwconsignno[j] = aInSrwconsignno[j] + 1;
            end;
          end;//testf
LSkipDoInStaForm:;
        end;//for
L12DoInStaForm:;
      end;//testf
    end;
  end;
  if (RepSpec.flags[0]!=0) then begin
    curren = BaseCurRec.BaseCur1;
    TrHs = true;
    IVCashr.SerNr = afr;
    while (LoopMain(IVCashr,1,TrHs)) begin
      if (ato!=-1) then begin
        if (IVCashr.SerNr>ato) then begin TrHs = false; end;
      end;  
      if (TrHs) then begin
        testf = true;
        if (IVCashr.OKFlag==0) then begin testf = false; end;
        if (IVCashr.Invalid!=0) then begin testf = false; end;
        if (IVCashr.TransDate<RepSpec.sStartDate) then begin testf = false; end;
        if (IVCashr.TransDate>RepSpec.sEndDate) then begin testf = false; end;
        if (testf) then begin
          CUr.Code = IVCashr.CustCode;
          if (ReadFirstMain(CUr,1,true)==false) then begin goto L12DoInStaForm2; end;

  //      if (IVCashr.InvType==kInvoiceTypeCredit or IVCashr.InvType==kInvoiceTypeCreditSpecialSales) then begin  
  //        curtype = 16;
  //      end else begin
  //        curtype = 10;
  //      end;

          curtype = 111; //because there is no InvType in IVCashVc
          rwcnt = MatRowCnt(IVCashr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVCashr,i,IVCashrw);
            testf = true;
            if (nonblank(RepSpec.f1)) then begin
              if (IVCashrw.ArtCode<frit) then begin testf = false; end;
              if (IVCashrw.ArtCode>toit) then begin testf = false; end;
            end;  
            if (testf) then begin
              INr.Code = IVCashrw.ArtCode;
              if (ReadFirstMain(INr,1,true)==false) then begin goto LSkipDoInStaForm2; end;
              if (nonblank(RepSpec.f3)) then begin
                if (INr.Group<fritgr) then begin goto LSkipDoInStaForm2; end;
                if (INr.Group>toitgr) then begin goto LSkipDoInStaForm2; end;
              end;  
              if (RepSpec.flags[4]==1) then begin
                if (INr.ItemType==0) then begin goto LSkipDoInStaForm; end;
              end;
              if (RepSpec.flags[5]==1) then begin
                if (INr.ItemType==3) then begin goto LSkipDoInStaForm; end;
              end;
              rowexistf = false;
              origcountry = "";
              Sourcer.Code = INr.DefaultSource;
              if (ReadFirstMain(Sourcer,1,true)) then begin
                origcountry = Sourcer.Addr2;
              end;
              if (RepSpec.flags[8]==1) then begin
                for (j=0;j<acnt;j=j+1) begin
                  if (nonblank(INr.EKNCode) and (INr.EKNCode==aInSrwArtEKNCode[j])) then begin
                    if ((""==aInSrwShipMode[j]) and (""==aInSrwShipDeal[j]) and (curren==aInSrwCur[j])) then begin
                      if ((CUr.CountryCode==aInSrwCountryCode[j]) and (origcountry==aInSrwCountryOrigCode[j]) and (aInSrwTransType[j]==curtype)) then begin
                        rowexistf = true;
                        goto L11DoInStaForm2;
                      end;   
                    end;
                  end;                   
                end;
              end else begin
                for (j=0;j<acnt;j=j+1) begin
                  if ((INr.EUCodex==aInSrwCommodity[j]) and (IVCashrw.ArtCode==aInSrwArtCode[j])) then begin
                    if ((""==aInSrwShipMode[j]) and (""==aInSrwShipDeal[j]) and (curren==aInSrwCur[j])) then begin
                      if ((CUr.CountryCode==aInSrwCountryCode[j]) and (origcountry==aInSrwCountryOrigCode[j]) and (aInSrwTransType[j]==curtype)) then begin
                        rowexistf = true;
                        goto L11DoInStaForm2;
                      end;   
                    end;
                  end;                   
                end;
              end;  
L11DoInStaForm2:;           
              sv = IVCashrw.Sum/IVCashr.Sum1;
              sv = Round(sv*IVCashr.StatVal,DefaultRoundMode);
              svb1 = MulRateToBase1(IVCashr.CurncyCode,sv,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
              sumb1 = MulRateToBase1(IVCashr.CurncyCode,IVCashrw.Sum,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
              if (rowexistf==false) then begin
                InStarwcnt = InStarwcnt + 1;
                if (nonblank(INr.Unittext2) and (INr.UnitCoefficient>0)) then begin
                  unit = INr.Unittext2;
                  qty = IVCashrw.Quant*INr.UnitCoefficient;
                end else begin
                  unit = INr.Unittext;
                  qty = IVCashrw.Quant;
                end;
                AddInStaRow(aInSrwCommodity,aInSrwArtEKNCode,aInSrwShipMode,aInSrwShipDeal,aInSrwCountryCode,aInSrwCountryOrigCode,
                        aInSrwArtCode,aInSrwTraderRef,aInSrwQuant,aInSrwCur,aInSrwSum,
                        aInSrwWeight,aInSrwUnittext,aInSrwconsignno,aInSrwTransType,aInStatValSrwSum,aInStatValSrwB1Sum,aInSrwSumB1,acnt, 
                        1,INr.EUCodex,INr.EKNCode,"","",CUr.CountryCode,origcountry,IVCashrw.ArtCode,
                        INr.Name,INr.Weight,unit,curtype,IVCashrw.Quant,qty,IVCashr.CurncyCode,IVCashrw.Sum,sv,svb1,sumb1);
              end else begin
                if (nonblank(INr.Unittext2) and (INr.UnitCoefficient>0)) then begin
                  if (INr.AlcPrc>0) then begin
                    weight = INr.Weight*INr.UnitCoefficient;
                  end else begin
                    weight = INr.Weight;
                  end;
                  qty = IVCashrw.Quant*INr.UnitCoefficient;
                end else begin
                  qty = IVCashrw.Quant;
                  weight = INr.Weight;
                end;
                aInSrwQuant[j] = aInSrwQuant[j] + qty;
                aInSrwSum[j] = aInSrwSum[j] + IVCashrw.Sum;
                aInSrwSumB1[j] = aInSrwSumB1[j] + sumb1;
                aInSrwWeight[j] = aInSrwWeight[j] + qty * weight;
                aInSrwconsignno[j] = aInSrwconsignno[j] + 1;
                aInStatValSrwSum[j] = aInStatValSrwSum[j] + sv;
                aInStatValSrwB1Sum[j] = aInStatValSrwB1Sum[j] + svb1;                
              end;
              InStatotsum = InStatotsum + IVCashrw.Sum;
            end;//testf
LSkipDoInStaForm2:;          
          end;//for
L12DoInStaForm2:;        
        end;//testf
      end;
    end;
  end;
  
  PrintInStaForm(RepSpec,InStaVATNr,InStaCompName,InStaAddr0,InStaAddr1,InStaAddr2,
                 InStaAddr3,InStaAddr4,aInSrwCountryOrigCode,InStaUSName,InStaPrintDate,InStaStartDate,InStaEndDate,InStarwcnt,InStatotsum,
                 aInSrwCommodity,aInSrwArtEKNCode,aInSrwShipMode,aInSrwShipDeal,aInSrwCountryCode,
                 aInSrwArtCode,aInSrwTraderRef,aInSrwUnittext,aInSrwQuant,aInSrwCur,aInSrwSum,
                 aInSrwWeight,aInSrwconsignno,aInSrwTransType,aInStatValSrwSum,aInStatValSrwB1Sum,aInSrwSumB1,acnt);
  RETURN;
END;

global
procedure InStaForm(record RcVc RepSpec)
BEGIN
  Boolean tmpf;
  
  tmpf = PrintDocument(RepSpec,"InStaForm",false);
  RETURN;
END;
