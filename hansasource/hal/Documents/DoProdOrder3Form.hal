external procedure GetCurUser(var record UserVc);
external procedure GetMonthText(string,Date,var string);
external updating function Integer RecordAction_raPastePRInStockMov(var record StockMovVc,var record ProdVc,Boolean);
external procedure SetConversionFields(record INVc,val,var val,var val,var val);
external function Integer CountNrofItemsStockMovement(record StockMovVc);
external function string 255 GetVarietyComment(string,string);
external function Boolean FindFormcode(Integer,Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure PrintValue(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external procedure GetFieldArgument(record DocVc,Integer,var string);
external procedure SelectUnitText(string,string,var string);
external procedure SerialNrSDimensions(string,string,var val,var val,var val);
external function Boolean Getformcode(Integer,Integer,string,string,string,LongInt,LongInt,string,string,Integer,string,var string);
external function Integer NumberofDocumentPages(string,Integer);
external procedure GetLangNr(string,var record LangNrVc);
external procedure CommonDocumentFields(record RcVc);
external procedure IntToText(string,Integer,var string);
external procedure RussianPaymentNr(LongInt,var string);
external procedure ValToText(val,Integer,string,string,var string);
external procedure LongDateTimeToStr(Date,var string);
external procedure BuildKSerno(LongInt,string,var string);
external procedure GetItemCommodityCode(string,var string);
external procedure GetAlternativeItemCode(string,var string);
external procedure BC39(string,var string);
external procedure ItemBC39(string,var string);
external procedure ItemBCEAN(string,var string);
external procedure ItemBCEAN13(string,var string);
external procedure GetDefaultSupplierAddress(string,string,Integer,var string);
external function Boolean GetPurchaseItem(string,string,var record PIVc);

procedure PrintProdOperationRows(record RcVc RepSpec,record StockMovVc StockMovr,record SysFormatBlock SFb,
                                 record LangNrVc LangNrr,
                                 var val totqty,var val totvolume,var val totweight,var val totfifo)
begin
  Integer i,rwcnt,rownr;
  row StockMovVc StockMovrw;  
  string 255 tstr;
  val t,rowsum;
  record INVc INr;
  record PIVc PIr;
  val vatprc,vatval,vatexclprc,vatinclprc,rowtax;
  val qtyconv1,qtyconv2,qtyconv3;
  val sunitx,sunity,sunitz;
  record CUVc VEr;

  rwcnt = MatRowCnt(StockMovr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(StockMovr,i,StockMovrw);
    if (StockMovrw.OrdQuant>0) then begin
      if (ReadFirstItem(StockMovrw.ArtCode,INr,true,true)) then begin
      end;
      PrintValue("F_ORDQTY",StockMovrw.OrdQuant,M4UVal,LangNrr,SFb,false);
      PrintValue("F_ANTAL",StockMovrw.Quant,M4UVal,LangNrr,SFb,false);
      BuildKSerno(StockMovr.SerNr,StockMovrw.ArtCode,tstr);
      OUTFORMFIELD("F_KFAKTURANR",tstr);
      if (FIELDINFORM("F_COMMODITYCODE")) then begin
        GetItemCommodityCode(StockMovrw.ArtCode,tstr);
        OUTFORMFIELD("F_COMMODITYCODE",tstr);
      end;  
      if (FIELDINFORM("F_ALTERNATIVECODE")) then begin
        GetAlternativeItemCode(StockMovrw.ArtCode,tstr);
        OUTFORMFIELD("F_ALTERNATIVECODE",tstr);
      end;
      if (FIELDINFORM("F_ARTNRBC39")) then begin
        ItemBC39(StockMovrw.ArtCode,tstr);
        OUTFORMFIELD("F_ARTNRBC39",tstr);
      end;  
      if (FIELDINFORM("F_ARTNRBCEAN")) then begin
        ItemBCEAN(StockMovrw.ArtCode,tstr);
        OUTFORMFIELD("F_ARTNRBCEAN",tstr);
      end;  
      if (FIELDINFORM("F_ARTNRBCEAN13")) then begin
        ItemBCEAN13(StockMovrw.ArtCode,tstr);      
        OUTFORMFIELD("F_ARTNRBCEAN13",tstr);
      end;  
      if (FIELDINFORM("F_SERIENRBC39")) then begin
        BC39(StockMovrw.SerialNr,tstr);      
        OUTFORMFIELD("F_SERIENRBC39",tstr);
      end;        
      OUTFORMFIELD("F_ARTNR",StockMovrw.ArtCode);
      OUTFORMFIELD("F_ARTCODEVARIETIES",GetVarietyComment(StockMovrw.ArtCode,INr.Code));      
      OUTFORMFIELD("F_ARTCODENOVARIETIES",INr.Code);
      PrintValue("F_FIFO",StockMovrw.OldPrice,M45Val,LangNrr,SFb,false);
      PrintValue("F_SUMFIFO",StockMovrw.FIFORowVal,M45Val,LangNrr,SFb,false);
      OUTFORMFIELD("F_SERIENR",StockMovrw.SerialNr);
      OUTFORMFIELD("F_SPECIFIKATION",StockMovrw.Spec);
      totfifo = totfifo + StockMovrw.FIFORowVal;
      totqty = totqty + StockMovrw.Quant;
       
      RecordClear(PIr);
      RecordClear(VEr);
      if nonblank(StockMovrw.ArtCode) then begin
        if (GetPurchaseItem(StockMovrw.ArtCode,StockMovr.FrLocation,PIr)) then begin
        end;
        VEr.Code = PIr.VECode;
        ReadFirstMain(VEr,1,true);      
      end;
      if nonblank(StockMovrw.ArtCode) then begin
        if (FIELDINFORM("F_ARTNRLEV")) then begin
          OUTFORMFIELD("F_ARTNRLEV",PIr.VEItemCode);
        end;
        if (FIELDINFORM("F_ANTALLEV")) then begin
          OUTFORMFIELD("F_ANTALLEV",ValToString(StockMovrw.Quant,M4UVal,SFb.thousSep,SFb.decimalPt,LangNrr.CutDecimals));
        end;
        if (blank(INr.Weight)) then begin
          t = blankval;
        end else begin
          t = StockMovrw.Quant*INr.Weight;
        end;
        if (nonblank(StockMovrw.ArtCode)) then begin
          OUTFORMFIELD("F_ROWWEIGHT",t);
        end;
        if (blank(INr.Volume)) then begin
          t = blankval;
        end else begin
          t = StockMovrw.Quant*INr.Volume;
        end;
        OUTFORMFIELD("F_ROWVOLUME",t);
        totvolume = totvolume + StockMovrw.Quant*INr.Volume;
        totweight = totweight + StockMovrw.Quant*INr.Weight;
        if (nonblank(StockMovrw.ArtCode)) then begin
          SelectUnitText("",INr.Unittext,tstr);    
          OUTFORMFIELD("F_ENHET",tstr);
        end;
        OUTFORMFIELD("F_EUCODE",INr.EUCodex);
        
        SetConversionFields(INr,StockMovrw.OrdQuant,qtyconv1,qtyconv2,qtyconv3);      
        PrintValue("F_CONVERSION1",qtyconv1,M4UVal,LangNrr,SFb,false);
        PrintValue("F_CONVERSION2",qtyconv2,M4UVal,LangNrr,SFb,false);
        PrintValue("F_CONVERSION3",qtyconv3,M4UVal,LangNrr,SFb,false);
        PrintValue("F_CONVERSIONVAL1",INr.Conversion1,M4UVal,LangNrr,SFb,false);
        PrintValue("F_CONVERSIONVAL2",INr.Conversion2,M4UVal,LangNrr,SFb,false);

        if (nonblank(StockMovrw.OrdQuant)) then begin
          tstr = INr.Unittext;
        end else begin
          tstr = "";
        end;
        OUTFORMFIELD("F_ENHETLEV",tstr);
        OUTFORMFIELD("F_SHELFCODE",INr.InvCode);
        OUTFORMFIELD("F_ITEMLOCATION",INr.Department);
        OUTFORMFIELD("F_WIDTH",INr.Width);
        OUTFORMFIELD("F_HEIGHT",INr.Height);
        OUTFORMFIELD("F_DEPTH",INr.Depth);
        OUTFORMFIELD("F_WEIGHT",INr.Weight);
        SerialNrSDimensions(StockMovrw.ArtCode,StockMovrw.SerialNr,sunitx,sunity,sunitz);      
        OUTFORMFIELD("F_SWIDTH",sunitx);
        OUTFORMFIELD("F_SHEIGHT",sunity);
        OUTFORMFIELD("F_SDEPTH",sunitz);
        OUTFORMFIELD("F_VOLUME",INr.Volume);
        OUTFORMFIELD("F_BARCODE",INr.BarCode);
        OUTFORMFIELD("F_LEVNR",VEr.Code);
        OUTFORMFIELD("F_LEVNAMN",VEr.Name);
        OUTFORMFIELD("F_LEVADDR1",VEr.InvAddr0);
        OUTFORMFIELD("F_LEVADDR2",VEr.InvAddr1);
        OUTFORMFIELD("F_LEVADDR3",VEr.InvAddr2);

        if (nonblank(StockMovrw.ArtCode)) then begin
          rownr = rownr + 1;
          OUTFORMFIELD("F_ROWNR",rownr);      
        end;      
      end;
      EndFormRow;
    end;
  end;  
  return;
end;

procedure PrintStockMovement(record RcVc RepSpec,record StockMovVc StockMovr,string formcode)
begin
  record DocVc Docr;
  string 255 tstr,tstr1;
  string 255 t1,t2;
  record SysFormatBlock SFb;
  record LangNrVc LangNrr;
  val totfifo,totvolume,totweight,totqty,tots;
  record LocationVc FromLocr;
  record LocationVc ToLocr;
  record LocationVc ViaLocr;
  record MainStockBlock MainStockRec;
  record UserVc Userr;
  
  GetLangNr("",LangNrr);
  BlockLoad(SFb);
  CommonDocumentFields(RepSpec);

  Docr.Code = formcode;
  if (ReadFirstMain(Docr,1,true)) then begin
  end;

  if (FIELDINFORM("F_RUSPAYNR")) then begin
    RussianPaymentNr(StockMovr.SerNr,tstr);
    OUTFORMFIELD("F_RUSPAYNR",tstr);
  end;  
  if (blank(StockMovr.FrLocation)) then begin
    FromLocr.Code = MainStockRec.MainStock;
  end else begin
    FromLocr.Code = StockMovr.FrLocation;
  end;
  if (blank(StockMovr.ToLocation)) then begin
    ToLocr.Code = MainStockRec.MainStock;
  end else begin
    ToLocr.Code = StockMovr.ToLocation;
  end;
  if (ReadFirstMain(FromLocr,1,true)) then begin end;
  if (ReadFirstMain(ToLocr,1,true)) then begin end;
  if nonblank(StockMovr.ThrouLocation) then begin
    ViaLocr.Code = StockMovr.ThrouLocation;
    if (ReadFirstMain(ViaLocr,1,true)) then begin end;
    OUTFORMFIELD("F_VIALOCATION",StockMovr.ThrouLocation);
    OUTFORMFIELD("F_VIANAME",ViaLocr.Name);
    OUTFORMFIELD("F_VIAPHONE",ViaLocr.Phone);
    OUTFORMFIELD("F_VIAFAX",ViaLocr.Fax);
    OUTFORMFIELD("F_VIACONTACT",ViaLocr.Contact);
    OUTFORMFIELD("F_VIAADRESS",ViaLocr.Addr0);
    OUTFORMFIELD("F_VIAADRESS",ViaLocr.Addr1);
    OUTFORMFIELD("F_VIAADRESS",ViaLocr.Addr2);
    OUTFORMFIELD("F_VIAADRESS",ViaLocr.Addr3);
    OUTFORMFIELD("F_VIAADRESS",ViaLocr.Addr4);  
    OUTFORMFIELD("F_VIAEMAIL",ViaLocr.Email);  
  end;  
  OUTFORMFIELD("F_LEVDATUM",StockMovr.TransDate);
  OUTFORMFIELD("F_LEVNUMMER",StockMovr.SerNr);
  OUTFORMFIELD("F_COMMENT",StockMovr.Comment);
  OUTFORMFIELD("F_FROMLOCATION",StockMovr.FrLocation);
  OUTFORMFIELD("F_TOLOCATION",StockMovr.ToLocation);
  
  OUTFORMFIELD("F_FROMNAME",FromLocr.Name);
  OUTFORMFIELD("F_FROMPHONE",FromLocr.Phone);
  OUTFORMFIELD("F_FROMFAX",FromLocr.Fax);
  OUTFORMFIELD("F_FROMCONTACT",FromLocr.Contact);
  OUTFORMFIELD("F_FROMADRESS",FromLocr.Addr0);
  OUTFORMFIELD("F_FROMADRESS",FromLocr.Addr1);
  OUTFORMFIELD("F_FROMADRESS",FromLocr.Addr2);
  OUTFORMFIELD("F_FROMADRESS",FromLocr.Addr3);
  OUTFORMFIELD("F_FROMADRESS",FromLocr.Addr4);
  OUTFORMFIELD("F_TONAME",ToLocr.Name);
  OUTFORMFIELD("F_TOPHONE",ToLocr.Phone);
  OUTFORMFIELD("F_TOFAX",ToLocr.Fax);
  OUTFORMFIELD("F_TOCONTACT",ToLocr.Contact);
  OUTFORMFIELD("F_TOADRESS",ToLocr.Addr0);
  OUTFORMFIELD("F_TOADRESS",ToLocr.Addr1);
  OUTFORMFIELD("F_TOADRESS",ToLocr.Addr2);
  OUTFORMFIELD("F_TOADRESS",ToLocr.Addr3);
  OUTFORMFIELD("F_TOADRESS",ToLocr.Addr4);        
  OUTFORMFIELD("F_FREIGHTCOMPCODE",StockMovr.FreightCode);
  OUTFORMFIELD("F_FREIGHTCOMP",StockMovr.FreightCompany); 
  OUTFORMFIELD("F_FREIGHTCOMPREGNO",StockMovr.FreightCompanyRegNr);
  OUTFORMFIELD("F_TRUCKINFO",StockMovr.TruckInfo); 
  OUTFORMFIELD("F_DRIVER",StockMovr.Driver); 
  OUTFORMFIELD("F_CMRTEXT",StockMovr.CMRText);

  OUTFORMFIELD("F_FROMPOSITION",StockMovr.FrPos);
  OUTFORMFIELD("F_TOPOSITION",StockMovr.ToPos);
  OUTFORMFIELD("F_SENTTRANSDATE",StockMovr.SentTransDate);
  OUTFORMFIELD("F_DATEDAY",GetDay(StockMovr.TransDate));  
  OUTFORMFIELD("F_DATEMONTH",GetMonth(StockMovr.TransDate));  
  GetMonthText("",StockMovr.TransDate,tstr);
  OUTFORMFIELD("F_DATEMONTHTEXT",tstr);  
  OUTFORMFIELD("F_DATEYEAR",GetYear(StockMovr.TransDate));  
  GetCurUser(Userr);
  OUTFORMFIELD("F_PERSON",Userr.Name);
  
  PrintProdOperationRows(RepSpec,StockMovr,SFb,LangNrr,totqty,totvolume,totweight,totfifo);
  OUTFORMFIELD("F_TOTFIFO",totfifo);
  OUTFORMFIELD("F_CALCTOTVOLUME",totvolume);
  OUTFORMFIELD("F_CALCTOTWEIGHT",totweight);
  OUTFORMFIELD("F_TOTQTY",totqty); 
  OUTFORMFIELD("F_TOTSUM",tots);
  return;
end;

global
updating procedure DoProdOrder3Form(record RcVc RepSpec,record ProdVc Prodr)
begin
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Integer i,rwcnt;
  Boolean printf,langf;
  Integer intdocnr;
  string 30 formcode,langcode,langcod2;
  record StockMovVc StockMovr;

  if (UserCanAction("PRToStockMov",true)) then begin
    if (RecordAction_raPastePRInStockMov(StockMovr,Prodr,true)<0) then begin  
    end;
  end else begin
    MessageBox(1274,StringFromStringSet(3,"PRToStockMov"));
  end;
  if (MatRowCnt(StockMovr)<=0) then begin
    goto LDoProdOrder3Form;
  end;
  langcode = Prodr.LangCode;
//  langcod2 = Prodr.ShipMode;
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoProdOrder3Form;
  end;
  rwcnt = MatRowCnt(FDr);
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(FDr,i,FDrw);
    if (FDrw.LangCode==langcode) then begin
      i = -1;
      langf = true;
    end;
  end;
  if (langf==false) then begin langcode = ""; end;
  intdocnr = 1;
  printf = true;
  while (printf) begin  
LFINDFORMCOCEProdOperation3:;
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (FindFormcode(Prodr.PRStatusFlag,FDrw.Typ)) then begin 
        if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,Prodr.SerNr,FDrw.PrintGroupCode,
                        langcode,intdocnr,"ProdVc",formcode)) then
        begin
          goto LBREAKProdOperation3;
        end;
      end;
    end;
/*    
    if (nonblank(langcod2)) then begin
      langcode = langcod2;
      langcod2 = "";
      goto LFINDFORMCOCEProdOperation3;
    end;  
*/    
LBREAKProdOperation3:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin  
//
          NumberofDocumentPages(FDrw.FPCode,MatRowCnt(StockMovr));
          OUTFORMFIELD("F_PRODNR",Prodr.SerNr);
          OUTFORMFIELD("F_ROUTING",Prodr.Routing);
          PrintStockMovement(RepSpec,StockMovr,formcode);
          CloseForm;
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoProdOrder3Form:;  
  return;
end;

