external outer procedure DoInvFormCustomizedFields(record IVVc,record DocVc,record SysFormatBlock,record RoundBlock,record LangNrVc,Boolean);

external function string 50 TimeToString(time,string,boolean);
external function string 255 SVNIVDigitalSeal(record IVVc,Integer);
external procedure PrintPremiseData();
external function Date FindTaxAuthIDLimitDateBOL(record IVVc);
external procedure PrintCurrencyCode(string,string);
external function string 255 MexEInvQRCode(string,val,string);
external procedure PortugueseFormFields(Integer);
external function string 255 GetOffSerNrIVJournalID(LongInt,string,string);
external function Date DateFromString(string,string);
external function string 100 FindNumberAfterSymbol(string,integer,string,boolean);
external function Boolean IsVATAssert(record IVVc);
external procedure PrintCountryCode(string,string);
external procedure PrintOrgCustBankData(string);
external function string 255 MakeCroatianControlCode(date,time,string,string,string,val);
external updating procedure SetPrintedFlag_IVVc2(LongInt,Boolean);
external procedure FindTaxAdminServiceChain(record IVVc,var Area);
external procedure PUCalcPerc(val,string,var val);
external function Boolean GetPD(var record PDVc);
external procedure GetWORMDocumentInfo(Integer,string,var string,var string,var string,var string);
external function string 60 AddObjectToObjectList(string,string);
external procedure PrintLoyaltyCard(record LangNrVc,string,string,val,val,LongInt,string);
external function string 255 FindOriginalChainDigitalSeal(record IVVc,var Area);
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external procedure PrintValueInclZeroWithSign(string,string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external function string 255 GetJwl_CustomerName(string);
external function roundmode GetVATRoundMode(record RoundBlock);
external function roundmode GetTotalRoundMode(record RoundBlock);
external function roundmode SetRoundModeD(Integer);
external procedure CommonDocumentFields2(record RcVc,string);
external procedure PrintBankData(string);
external procedure CreateEpsonPVNumber(LongInt,var string);
external procedure PrintTAXAuthIDToDate(string,record IVVc);
external procedure RebPayHalf_IV(record IVVc,record RoundBlock,Integer,var string);
external procedure RebPay_IV(record IVVc,record RoundBlock,Integer,Boolean,var val);
external procedure PrintTAXAuthIDControlCode(string,record IVVc);
external procedure PrintTAXAuthID(string,string,LongInt,Date);
external procedure GetDateMonthInWords(Date,var string);
external procedure PrintFreightInfo(string);
external procedure PrintTransactionOnDocument(Integer,LongInt);
external procedure PrintDownPaymentData(record IVVc,record DocVc,record RoundBlock,record LangNrVc,record SysFormatBlock,Boolean);
external function Boolean FindCustomerRelation(string,string,var record CUVc);
external procedure RebPay2(record IVVc,record RoundBlock,Integer,Boolean,var string);
external procedure PrintUserDefinedCustomerFields(string,string,string,string,string,Date,Date,Date,val,val,val);
external procedure OutAddress(string,string,string,string,string,string,string);
external procedure PrintValueInclZero(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external function string 255 CreateInvoiceNumber(LongInt,string);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure IVSetFax(record CUVc,record IVVc);
external procedure PrintFINREF(record IVVc,record DocVc);
external procedure SumNoDownPay(record IVVc,var val,var val,var val,var val,var val,var val);
external procedure SubPrePayments(record IVVc,var val,var val);
external procedure RemoveSepFromStr(string,var string);
external procedure PrintPurchVal(record IVVc,record LangNrVc,record SysFormatBlock);
external procedure PrintSiteInformation(string,string);
external procedure PrintInvoiceRows2(record RcVc,record IVVc,record DocVc,record RoundBlock,record LangNrVc,record SysFormatBlock,
                                    var val,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val,Boolean,Integer);
external procedure CalcIVTotals(record IVVc,record DocVc,record RoundBlock,record LangNrVc,record SysFormatBlock);
external procedure PrintValue(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external procedure CreateKIDNoCheck(string,LongInt,var string);
external procedure CreateKIDCheckNor(val,LongInt,var string);
external procedure CreateKIDCode(string,LongInt,var string);
external procedure InvoiceType(Integer,var string);
external procedure GetFindCustBalance(string,LongInt,var val,var val,var val,var val,Integer,Integer,Integer,Integer,Integer,Integer,Boolean,var Boolean);
external procedure GetMonthText(string,Date,var string);
external procedure GetUserEmail(string,var string);
external procedure GetCreditCardType(string,var string);
external procedure GetCountryName(string,string,var string);
external procedure PrintNote(record NotepadVc);
external procedure GetFieldArgument(record DocVc,Integer,var string);
external procedure GetContactTitle(string,string,var string);
external function Integer SetDateOrder(string);
external procedure LongDateToStr(Date,Integer,var string);
external procedure PrintValToTextBaseCur(val,Integer,string,Integer,var string);
external procedure GetUserName(string,var string);
external procedure GetFullCurncyRateText(Boolean,var string,val,val,val,val,val);
external procedure GetObjectText(string,var string);
external procedure Val2ToText(string,val,Integer,string,string,var string);
external procedure CalcFraktField(LongInt,string,var string);
external procedure BuildKSerno(LongInt,string,var string);
external procedure ValToText(val,Integer,string,string,var string);
external procedure GetShipDealText(string,string,var string);
external procedure GetShipModeText(string,string,var string);
external procedure GetPayDealText(string,string,var string);
external procedure RussianPaymentNr(LongInt,var string);
external procedure CommonDocumentFields(record RcVc);
external function Integer NumberofDocumentPages(string,Integer);
external procedure GetLangNr(string,var record LangNrVc);
external procedure IntToText(string,Integer,var string);
external function Integer CountNrofItemsIV(record IVVc);
external function Integer CountInvoiceRows(record IVVc);
external procedure PrintDeliveriesNos(LongInt,LongInt,var string);
external procedure PrintBranchData(string);
external procedure ReservationDetailsToInv(record HotelBlock,record JobVc,var record IVVc);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure RecalcIVSubtotal(var record IVVc);
external function string 255 SAFTHashControl(string);
external function string 255 CreateInternationalCreditorReference(string);
external function string 50 CreateBrazilEInvoiceId(record IVVc);
external function string 255 OfficialNumberReformatFromSeries(string,string,string);

procedure RebVal(record IVVc ivrp,record RoundBlock RoundRec,Integer base,var string res)
BEGIN
  val tv,t100;
  record AccBlock atr;
  
  res = "";
  BlockLoad(atr);
  if (ivrp.pdvrebt!=0) then begin
    t100 = 100;
    if (atr.DiscCashVAT!=0) then begin
      tv = t100 - ivrp.pdvrebt;
      tv = tv*ivrp.Sum1;
      tv = tv/100;
      tv = Round(tv,GetTotalRoundMode(RoundRec));
      tv = ivrp.Sum1 - tv;
    end else begin
      tv = t100 - ivrp.pdvrebt;
      tv = tv*ivrp.Sum4;
      tv = tv/100;
      tv = Round(tv,GetTotalRoundMode(RoundRec));
      tv = ivrp.Sum4 - tv;
    end;
    switch (base) begin
      case 0: 
      case 1: tv = MulRateToBase1(ivrp.CurncyCode,tv,ivrp.FrRate,ivrp.ToRateB1,ivrp.ToRateB2,ivrp.BaseRate1,ivrp.BaseRate2,DefaultCurRoundOff);
      case 2: tv = MulRateToBase2(ivrp.CurncyCode,tv,ivrp.FrRate,ivrp.ToRateB1,ivrp.ToRateB2,ivrp.BaseRate1,ivrp.BaseRate2,DefaultCurRoundOff);
    end;
    res = tv;
  end;
  RETURN;
END;

procedure RebVAT(record IVVc ivrp,record RoundBlock RoundRec,var val res)
BEGIN
  val tv,t100;
  record AccBlock ARAccb;
  
  BlockLoad(ARAccb);
  res = BlankVal;
  if (ivrp.pdvrebt!=0) then begin
    t100 = 100;
    tv = t100 - ivrp.pdvrebt;
    tv = tv*ivrp.Sum3;
    tv = tv/100;
    tv = Round(tv,GetTotalRoundMode(RoundRec));
    res = tv;
  end else begin
    res = ivrp.Sum3;
  end;
  RETURN;
END;

procedure RebVAT2(record IVVc ivrp,record RoundBlock RoundRec,var val res)
BEGIN
  if (ivrp.pdvrebt!=0) then begin
    RebVAT(ivrp,RoundRec,res);
    res = ivrp.Sum3-res;
  end else begin
    res = 0;
  end;
  RETURN;
END;

/*
what when someone pays ? 
procedure PrintInstallment(record IVVc IVp,Integer type)
BEGIN
  record ARInstallVc ARIr;
  Boolean TrHs;
  
  if (IVp.InstallmentInv!=0) then begin
    ARIr.InvoiceNr = IVp.SerNr;
    TrHs = true;
    while (LoopMain(ARIr,1,TrHs)) begin
      if (ARIr.InvoiceNr!=IVp.SerNr) then begin TrHs = false; end;
      if (TrHs) then begin
        switch (type) begin
          case 1:
            OUTFORMFIELD("F_INSTALLMENTDATE",ARIr.DueDate);
          case 2:
            OUTFORMFIELD("F_INSTALLMENTSUM",ARIr.RVal);
        end;
      end;
    end;  
  end;
  RETURN;
END;
*/

procedure PrintInstallment(record IVVc IVp,Integer type)
BEGIN
  record InstallmentVc Intr;
  row InstallmentVc Insrw;
  record PDVc PDr;
  record PDVc crPDr;
  string 20 linstcode;
  record IVVc origIVr;
  Date tdr,tdp,lasttdr;
  Integer rwcnt,i;
  record JobVc Jobr;  
  val totsumcur,totsumb1,rval,bookrval,sum,t;
  
//similar code to IVCalcInstallment
  PDr.Code = IVp.PayDeal;
  if (GetPD(PDr)) then begin
    linstcode = PDr.Installment;
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
      origIVr.SerNr = IVp.CredInv;
      if (ReadFirstMain(origIVr,1,true)) then begin 
        crPDr.Code = origIVr.PayDeal;
        if (GetPD(crPDr)) then begin    
          linstcode = crPDr.Installment;
        end;
      end;
    end;

    lasttdr = IVp.InvDate;
    Intr.Code = linstcode;
    if (ReadFirstMain(Intr,1,true)) then begin

      rwcnt = MatRowCnt(Intr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Intr,i,Insrw);
        switch (Insrw.Type) begin
          case 0: 
          case 1: 
            tdr = lasttdr;
          case 2:
            tdr = tdp;
            if (IVp.JobNr>0) then begin
              Jobr.SerNr = IVp.JobNr;
              if (ReadFirstMain(Jobr,1,true)) then begin
                tdr = Jobr.TransDate;
              end;
            end;
        end;
        if (Insrw.Months!=-1) then begin
          tdr = AddMonth(tdr,Insrw.Months);
        end;
        if (Insrw.Days!=-1) then begin
          tdr = AddDay(tdr,Insrw.Days);
        end;
        if (tdr<IVp.InvDate) then begin
          tdr = lasttdr;
        end;
        lasttdr = tdr;

        if (i==(rwcnt-1)) then begin
          rval = Round(IVp.Sum4 - totsumcur,SetRoundModeD(2));
          sum = MulRateToBase1(IVp.CurncyCode,IVp.Sum4,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
          bookrval = Round(sum - totsumb1,SetRoundModeD(2));
        end else begin
          PUCalcPerc(IVp.Sum4,Insrw.Prc,t);
          rval = Round(t,SetRoundModeD(2));
          sum = MulRateToBase1(IVp.CurncyCode,IVp.Sum4,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
          PUCalcPerc(sum,Insrw.Prc,t);
          bookrval = Round(t,SetRoundModeD(2));
        end;

        totsumcur = totsumcur + rval;
        totsumb1 = totsumb1 + bookrval;

        switch (type) begin
          case 1:
            OUTFORMFIELD("F_INSTALLMENTDATE",tdr);
          case 2:
            OUTFORMFIELD("F_INSTALLMENTSUM",rval);
        end;
      end;
    end;
  end;
  RETURN;
END;

procedure CCSlipPrintNote(string formfield,record NotepadVc Noter)
BEGIN
  Integer i,rwcnt;
  string 255 tstr;
  
  rwcnt = LineTextCnt(Noter);
  for (i=0;i<rwcnt;i=i+1) begin
    tstr = LineTextGet(Noter,i);
    OUTFORMFIELD(formfield,tstr);    
  end;  
  RETURN;
END;

procedure CCSlipNotePrintNote(string formfield,record IVVc IVr,string argumentstr)
begin
  record CouponVc Couponr;
  record NotepadVc Noter;
  record RLinkVc RLr;
  Integer notenr;
  Boolean found;

  Couponr.IVNr = IVr.SerNr;
  Couponr.OriginType = 0;
  found = true;
  while (LoopKey("OriginType",Couponr,2,found)) begin
    if (Couponr.IVNr!=IVr.SerNr) then begin found = false; end;
    if (Couponr.OriginType!=0) then begin found = false; end;
    if (found) then begin
      notenr = 1;
      while (ReadRecordLink(Couponr,notenr,Noter,RLr)) begin
        if ((argumentstr==Noter.Classification) or (blank(argumentstr))) then begin
          CCSlipPrintNote(formfield,Noter);
          goto LCCSlipNotePrintNote;
        end;
        notenr = notenr + 1;
      end;
    end;
LCCSlipNotePrintNote:;  
  end;
  return;
end;

procedure IVPrintNote(record IVVc IVr,string argumentstr)
BEGIN
  record NotepadVc Noter;
  record RLinkVc RLr;
  Integer notenr;

  notenr = 1;
  while (ReadRecordLink(IVr,notenr,Noter,RLr)) begin
    if ((argumentstr==RLr.Comment) or (blank(argumentstr))) then begin
      PrintNote(Noter);
      goto LIVPrintNote;
    end;
    notenr = notenr + 1;
  end;
LIVPrintNote:;  
  RETURN;
END;

procedure PrintCuAccNo(record IVVc IVr)
BEGIN
  row IVVc IVrw;
  Integer i,rwcnt;

  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if ((IVrw.stp==7) or (IVrw.stp==8)) then begin
      if (nonblank(IVrw.CuAccCode)) then begin
        OUTFORMFIELD("F_CUACCNO",IVrw.CuAccCode);  
        goto LPrintCuAccNo;
      end;
    end;
  end;      
LPrintCuAccNo:;  
  RETURN;        
END;

function val GetRowSum(row IVVc IVrw)
begin
  val res;
  
  switch (IVrw.stp) begin
    case kInvoiceRowTypeSubtotal: ;
  otherwise 
    res = IVrw.Sum;
  end;
  GetRowSum = res;
  return;
end;

procedure RemoveHiddenLines(var record IVVc IVr)
begin
  row IVVc IVrw;
  integer i,rowcnt;
  longint delcnt;
  boolean foundf;
  
  rowcnt = MatRowCnt(IVr);
  while (true) begin
    if (foundf==false) then begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.stp==kInvoiceRowTypeHidden) then begin
        foundf = true;
        delcnt = rowcnt-i;
      end else begin
        i = i+1;
        if (i==rowcnt) then begin
          goto LRemoveHiddenLines;
        end;
      end;
    end else begin
      MatRowDelete(IVr,i);
      delcnt = delcnt-1;
    end;
    if (delcnt==0) then begin
      goto LRemoveHiddenLines;
    end;
  end;
  
LRemoveHiddenLines:;
  return;
end;

procedure MoveGroupToBottom(var record IVVc IVr,string GroupToMove)
begin
  row IVVc IVrw;
  integer i, insertix;
  boolean foundf;
  
  insertix = MatRowCnt(IVr);
  i = insertix-1;
  while (i>=0) begin
    MatRowGet(IVr,i,IVrw);
    if ((IVrw.Comment==GroupToMove) and (i==insertix-1)) then begin //Group already at bottom. Don't continue
      i = -1;
    end else begin
      if (IVrw.Comment==GroupToMove) then begin
        MatRowInsert(IVr,insertix,IVrw);
        MatRowDelete(IVr,i);
        insertix = insertix-1;
        foundf = true;
      end;
      if ((foundf==true) and (IVrw.Comment<>GroupToMove)) then begin //Finished with group section? Don't continue.
        i = -1;
      end else begin
        i = i-1;
      end;
    end;
  end;
  
  return;
end;

procedure DoAddGroupSubTotals(var record IVVc IVr,string group,string desc,string sysgroup,var integer ix)
begin
  row IVVc IVrw;
  
  if (group==sysgroup) then begin
    goto LDoAddGroupSubTotals;
  end;
  ClearRow(IVr,IVrw,kInvoiceRowTypeHeader); //Add empty row
  IVrw.Comment = group;
  MatRowInsert(IVr,ix,IVrw);
  ClearRow(IVr,IVrw,kInvoiceRowTypeSubtotal); //Add sub total row
  IVrw.Comment = group;
  IVrw.Spec = USetStr(16094) & ": " & desc;
  MatRowInsert(IVr,ix,IVrw);
  ix = ix+2;
LDoAddGroupSubTotals:;
  return;
end;

procedure AddGroupSubTotals(var record IVVc IVr,string sysgroup)
begin
  integer i;
  row IVVc IVrw,NewIVrw;
  string 255 group,desc;
  
  for (i=0;i<MatRowCnt(IVr);i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    //Have we reached a new group? If so, add sub total to previous group
    if (group<>IVrw.Comment) then begin
      if nonblank(group) then begin
        DoAddGroupSubTotals(IVr,group,desc,sysgroup,i);
      end;
      desc = IVrw.Spec;
    end;
    group = IVrw.Comment;
  end;
  DoAddGroupSubTotals(IVr,group,desc,sysgroup,i); //Add sub total for last group
  RecalcIVSubtotal(IVr);
  return;
end;

procedure SortByGroup(var record IVVc IVr)
begin
  record ITVc ITr;
  record INVc INr;
  row IVVc IVrw,GroupIVrw;
  longint insertix;
  integer i,rowcnt,rowstomove;
  string 255 group,desc,othergroup,systemgroup;

  othergroup = USetStr(14306);
  systemgroup = USetStr(16235);
  RemoveHiddenLines(IVr);
  rowstomove = MatRowCnt(IVr);
  while (rowstomove>0) begin
    MatRowGet(IVr,MatRowCnt(IVr)-1,IVrw);      
    //Get the relevant item group
    if ((IVrw.stp==kInvoiceRowTypeSubtotal) or (IVrw.stp==kInvoiceRowTypeHeader)) then begin          
      group = "";
    end else begin
      if (IVrw.stp==kInvoiceRowTypeNormal) then begin
        ITr.Code = "";
        if (ReadFirstItem(IVrw.ArtCode,INr,false,false)) then begin
          ITr.Code = INr.Group;
          if (ReadFirstMain(ITr,1,true)==false) then begin
            ITr.Code = "";
          end else begin
            group = INr.Group;
            desc = ITr.Comment;
          end;
        end;
        if blank(ITr.Code) then begin
          group = othergroup;
          desc = othergroup;
        end;
      end else begin            
        group = systemgroup; //Used to group rows that must be listed seperately, at the end of the invoice
        desc = "";
      end;
    end;
    //Move row to correct group
    if blank(group) then begin
      MatRowDelete(IVr,MatRowCnt(IVr)-1);
    end else begin
      IVrw.Comment = group;
      rowcnt = MatRowCnt(IVr);
      for (i=0;i<(rowcnt-rowstomove);i=i+1) begin
        MatRowGet(IVr,i,GroupIVrw);
        if (GroupIVrw.Comment==group) then begin
          insertix = i+1;
          goto LMoveRowToGroup;
        end;
      end;          
      ClearRow(IVr,GroupIVrw,kInvoiceRowTypeHeader);
      GroupIVrw.Comment = group;
      GroupIVrw.Spec = desc;
      MatRowInsert(IVr,0,GroupIVrw);
      insertix = 1;
LMoveRowToGroup:;
      MatRowInsert(IVr,insertix,IVrw);
      MatRowDelete(IVr,MatRowCnt(IVr)-1);
      rowstomove = rowstomove-1;
    end;
  end;
  MoveGroupToBottom(IVr,othergroup);  //Will be 2nd last group
  MoveGroupToBottom(IVr,systemgroup); //Will be last group
  AddGroupSubTotals(IVr,systemgroup); //Create sub totals, ignore 'System' group
  return;
end;

procedure PrepareInvoiceLayout(record RcVc RepSpec,record IVVc CurIVr,var record IVVc IVr)
begin
  record HotelBlock Hotelb;
  record JobVc Jobr;
  record ResUsageVc ResUsager;
  row IVVc IVrw,FirstIVrw,SumIVrw,GroupIVrw,tempIVrw,ResUsageIVrw;
  integer i,rowcnt,groupix;
  string 255 lastgroup,desc,systemgroup;
  boolean foundf;
  val sum;
  
  IVr = CurIVr;
  if nonblank(IVr.JobNr) then begin
    Jobr.SerNr = IVr.JobNr; 
    ReadFirstMain(Jobr,1,True);
  end;
  rowcnt = MatRowCnt(IVr);
  if (rowcnt<1) then begin
    goto LPrepareInvoiceLayout;
  end;
  
  switch RepSpec.flags[15] begin
    case 1: //By Item Group
      SortByGroup(IVr);
    case 2: //By Item Group - Single Row
      SortByGroup(IVr);
      systemgroup = USetStr(16235);
      i = 0;
      while (i<MatRowCnt(IVr)) begin
        MatRowGet(IVr,i,IVrw);
        if (lastgroup<>IVrw.Comment) then begin
          if (IVrw.Comment<>systemgroup) then begin
            groupix = i;
            MatRowGet(IVr,groupix,tempIVrw);
            ClearRow(IVr,GroupIVrw,kInvoiceRowTypeNormal);
            GroupIVrw.ArtCode = tempIVrw.Comment;
            GroupIVrw.Spec = tempIVrw.Spec;
            GroupIVrw.Quant = 1;
            MatRowPut(IVr,groupix,GroupIVrw);
            lastgroup = IVrw.Comment;
            i = i+1;
          end else begin
            i = i+1; //Leave 'System Group' in tact...
          end;
        end else begin
          MatRowGet(IVr,i,IVrw);
          GroupIVrw.Sum = GroupIVrw.Sum+GetRowSum(IVrw);
          GroupIVrw.Price = GroupIVrw.Sum;
          MatRowPut(IVr,groupix,GroupIVrw);
          MatRowDelete(IVr,i);
        end;
      end;
    case 3: //By Room Package
      i = 0;
      ClearRow(IVr,ResUsageIVrw,kInvoiceRowTypeNormal);
      while (i<MatRowCnt(IVr)) begin      
        MatRowGet(IVr,i,IVrw);
        if (nonblank(IVrw.ResUsage)) then begin
          if (blank(ResUsageIVrw.Comment)) then begin
            ResUsager.Code = IVrw.ResUsage;
            ResUsageIVrw.Quant = 1;
            ResUsageIVrw.ArtCode = ResUsager.Code;
            if (ReadFirstMain(ResUsager,1,true)) then begin
              ResUsageIVrw.Spec = ResUsager.Comment;
            end else begin
              ResUsageIVrw.Spec = USetStr(8149) & " " & USetStr(18224);
            end;
          end;
          ResUsageIVrw.Sum = ResUsageIVrw.Sum+GetRowSum(IVrw);
          MatRowDelete(IVr,i);
        end else begin
          i = i+1;
        end;
      end;
      if (nonblank(ResUsageIVrw.ArtCode)) then begin
        MatRowInsert(IVr,0,ResUsageIVrw);
      end;
    case 4: //Single Row
      MatRowGet(IVr,0,FirstIVrw);
      ClearRow(IVr,SumIVrw,kInvoiceRowTypeNormal);
      SumIVrw.ArtCode = USetStr(12010);
      SumIVrw.Quant = 1;
      SumIVrw.Spec = USetStr(8935);      
      while (MatRowCnt(IVr)>0) begin      
        MatRowGet(IVr,0,IVrw);
        SumIVrw.Sum = SumIVrw.Sum+GetRowSum(IVrw);
        MatRowDelete(IVr,0);
      end;
      SumIVrw.Price = SumIVrw.Sum;
      MatRowPut(IVr,0,SumIVrw);
      BlockLoad(Hotelb);
      if (Jobr.SerNr<>-1) then begin
        ReservationDetailsToInv(Hotelb,Jobr,IVr);
      end;
  otherwise
    case 0: goto LPrepareInvoiceLayout;  //None - Detail
  end;
  
LPrepareInvoiceLayout:;
  return;
end;

function string 255 FindDeliveriesOfficialSerNr(record IVVc IVr,record ORVc ORr)
begin
  string 255 res;
  Integer i,rwcnt;
  record OrdSettBlock OSb;
  record SHVc SHr;
  row SHVc SHrw;
  Integer shrow,shrwcnt;
  row IVVc IVrw;
  Boolean found,testf;
    
  BlockLoad(OSb);
  if (OSb.IVBasedOnSH!=0) and (IVr.OrderNr>0) then begin
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.OrdRow>=0) then begin
        ResetLoop(SHr);
        SHr.OrderNr = IVr.OrderNr;
        while (LoopKey("OrderKey",SHr,1,found)) begin
          if (SHr.OrderNr!=IVr.OrderNr) then begin found = false; end;
          if (found) then begin
            testf = true;
            if (SHr.OKFlag==0) then begin testf = false; end;
            if (testf) then begin
              shrwcnt = MatRowCnt(SHr);
              for (shrow=0;shrow<shrwcnt;shrow=shrow+1) begin
                MatRowGet(SHr,shrow,SHrw);
                if (SHrw.OrdRow==IVrw.OrdRow) then begin
                  res = AddObjectToObjectList(res,SHr.OfficialSerNr);        
                  found = false;
                  shrow = shrwcnt;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  FindDeliveriesOfficialSerNr = res;
  return;
end;

function string 255 EncodeCAEBarcode(string barcode)
begin
  string 255 res,tstr,tstr2;
  Integer i,l,c;
  
  tstr = barcode;
  l = Len(tstr);
  if (Mod(l,2)==1) then begin
    tstr = "0" & tstr;
    l = l + 1;
  end;
  
  res = "Ë";
  for (i=0;i<l;i=i+2) begin
    tstr2 = Mid(tstr,i,2);
    c = StringToInt(tstr2);
    res = res & Chr(c + 33);
  end;
  res = res & "Ì";
  
  EncodeCAEBarcode = res;
end;

global
function string 255 CAEBarcode(Integer InvType,string OfficialSerNr,string CAE,Date CAEExpiry)
begin
  string 255 res;
  string 255 branch,type,docnrstart,docnrend;
  record CYBlock CYb;
  Integer i;
  LongInt s1,s2;
  
  BlockLoad(CYb);
  GetWORMDocumentInfo(InvType,OfficialSerNr,type,branch,docnrstart,docnrend);
  res = StripNonDigits(CYb.VATNr) & type & branch & CAE & DateToString(CAEExpiry,"YYYYMMDD");
  s1 = 0;
  for (i=1;i<len(res);i=i+2) begin
    s1 = s1 + (asc(Mid(res,i,1))-48);
  end;
  s2 = 0;
  for (i=0;i<len(res);i=i+2) begin
    s2 = s2 + (asc(Mid(res,i,1))-48);
  end;
  s1 = s1 + s2;
  s1 = MOD(s1,10);
  s2 = 10 - s1;
  if (s2==10) then begin s2 = 0; end;
  res = res & s2;
  CAEBarcode = res;
  return;
end;

global
procedure PrintInvoice(record RcVc RepSpec,record IVVc IVr,string formcode,string langcode)
BEGIN
  record SysFormatBlock SysFormatRec;
  record LangNrVc LangNrr;
  record CUVc CUr;
  record LocationVc Locr;
  record CUVc InvoiceToCUr;
  record CUVc OrderingCUr;
  record CUVc VEr;
  record PRVc PRr;
  record ORVc ORr;
  record SHVc lastSHr;
  record IIBlock IIRec;
  record DocVc Docr;
  row IVVc IVrw;
  Integer i,rwcnt,rwcnt2;
  Integer tmp;
  string 255 tstr,tstr1;
  val v,t,t1,t2,t3,t4;
  val totinprice,totweight,totnetweight,totvolume,totcombase2sum,totqty,totqty2,totfifo,totcombase2vat,totwithh,totnormwinttax,totnormwithvatprc;
  val totdiscount;
  Date td;
  record RoundBlock RoundRec; 
  Integer valtyp; 
  record JobVc Jobr;
  record CUVc CUContactr;
  record AccBlock ARAccRec;
  Boolean negamountf,found,limitdaysf,testf;
  record IVVc orgIVr;
  Integer pages;
  record OffSerNrIVVc OffSNIVr;  
  record BankVc Bankr;
  row LegalInvNrBlock LINrbrw;
  Area orgchaina;
  LongInt al,posa;
  record IVVc NewIVr;
  val PointsSpent;
  record BrazilEInvTypeVc BEInvTyper;
  record StandProblemVc SPr;
  record CYBlock CYb;
  boolean tstr3;
  string 60 VatNr,MOOfficialSerNr,Disc;
  string 255 importval,impvalb1,impvalb2;
  val importvalb1,importvalb2;
  record CountryVc Countryr;
  record CUVc ContactCUr;
  record UserVc Userr;

  BlockLoad(CYb);
  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales or IVr.InvType==kInvoiceTypeDebit or IVr.InvType==kInvoiceTypeInterest) then begin
    if (IVr.CredInv>0) then begin
      orgIVr.SerNr = IVr.CredInv;
      if (ReadFirstMain(orgIVr,1,true)) then begin
      end;
    end;
  end;
  BlockLoad(RoundRec);
  BlockLoad(SysFormatRec);  
  BlockLoad(ARAccRec);
  negamountf = (ARAccRec.PrintNegAmountsCredNote!=0 and (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales));
  GetLangNr(IVr.LangCode,LangNrr);
  Docr.Code = formcode;
  if (ReadFirstMain(Docr,1,true)) then begin
  end;
  CommonDocumentFields(RepSpec);    
  CommonDocumentFields2(RepSpec,IVr.BankCode);    
  rwcnt2 = CountInvoiceRows(IVr);
  pages = NumberofDocumentPages(formcode,rwcnt2);
  Locr.Code = IVr.Location;
  if (ReadFirstMain(Locr,1,true)) then begin
  end;
  CUr.Code = IVr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
  end;
  PRr.Code = IVr.PRCode;
  if (ReadFirstMain(PRr,1,true)) then begin
  end;
  ORr.SerNr = IVr.OrderNr;
  if (ReadFirstMain(ORr,1,true)) then begin
  end;
  if (nonblank(IVr.OrgCust)) then begin
    OrderingCUr.Code = IVr.OrgCust;
    ReadFirstMain(OrderingCUr,1,true);
  end;
  if (ORr.SerNr>0) then begin
    lastSHr.OrderNr = ORr.SerNr;
    lastSHr.SerNr = 2147483647;
    if (ReadLastKey("OrderKey",lastSHr,2,false)) then begin
      if (lastSHr.OrderNr!=ORr.SerNr) then begin
        RecordClear(lastSHr);
      end;
    end;
  end else begin
    RecordClear(lastSHr);
  end;
  if (HasLocalization("PRT") and (CUr.CustType==1)) then begin    
    OUTFORMFIELD("F_CUSTTYPE",USetStr(23361));
  end;
  
  
  if (IVr.Prntdf==0) then begin
    OUTFORMFIELD("F_COPYTYPE",USetStr(18630));
  end else begin
    OUTFORMFIELD("F_COPYTYPE",USetStr(18631));
  end;
  if (FIELDINFORM("F_ORDEROFFICIALSERNO")) then begin
    if (ORr.SerNr>0) then begin
      OUTFORMFIELD("F_ORDEROFFICIALSERNO",ORr.OfficialSerNr);
    end;
  end;
  if (IVr.Prntdf!=0) then begin
    if (IVr.OKFlag!=0) then begin
      OUTFORMFIELD("F_DUPLICATE",USetStr(18632) & " " & CurrentDate);
    end;
  end;
  
  if (FIELDINFORM("F_TRANSPORTNR")) then begin
    OUTFORMFIELD("F_TRANSPORTNR",lastSHr.TransportNumber);
  end;  
  if (FIELDINFORM("F_DELIVERYOFFICIALSERNO")) then begin
    tstr = FindDeliveriesOfficialSerNr(IVr,ORr);
    if (blank(tstr)) then begin
      if (lastSHr.SerNr>0) then begin
        OUTFORMFIELD("F_DELIVERYOFFICIALSERNO",lastSHr.OfficialSerNr);
      end;
    end else begin
        OUTFORMFIELD("F_DELIVERYOFFICIALSERNO",tstr);
    end;
  end;

  OUTFORMFIELD("F_FISCALDEVICESEQNO",IVr.FiscalDeviceSeqNr);   
  if (FIELDINFORM("F_PURCHINVNO")) then begin
    if (IVr.VINr>0)  then begin
      OUTFORMFIELD("F_PURCHINVNO",IVr.VINr);
    end;
  end;  
  if (FieldInForm("F_CROATIANCONTROLCODE")) then begin
    OUTFORMFIELD("F_CROATIANCONTROLCODE",MakeCroatianControlCode(IVr.InvDate,IVr.TransTime,IVr.SerNr,IVr.Location,IVr.TerminalID,IVr.Sum4));
  end;
  tstr = IVr.CustCode & "-";
  tstr = tstr & IVr.SerNr;
  if (FieldInForm("F_TAXAUTHID")) then begin
    PrintTAXAuthID(F_TAXAUTHID,IVr.TaxAuthID,IVr.SerNr,IVr.TransDate);
  end;
  if (FieldInForm("F_TAXAUTHIDCC")) then begin
    PrintTAXAuthIDControlCode(F_TAXAUTHIDCC,IVr);
  end;
  OUTFORMFIELD("F_PRINTDATE",IVr.PrintDate);
  if (FieldInForm("F_TAXAUTHIDTODATE")) then begin
    PrintTAXAuthIDToDate(F_TAXAUTHIDTODATE,IVr);
  end;
  OUTFORMFIELD("F_REFSTR",IVr.RefStr);
  if (nonblank(IVr.OfficialSerNr)) then begin
    if (HasLocalization("BOL")) then begin
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) or (IVr.InvType==kInvoiceTypeDebit) then begin
        tstr = FindNumberAfterSymbol(orgIVr.OfficialSerNr,2,"-",false);
        OUTFORMFIELD("F_BOLORGOFFICIALNUMBER",tstr);
      end;
      tstr = FindNumberAfterSymbol(IVr.OfficialSerNr,2,"-",false);
      OUTFORMFIELD("F_BOLOFFICIALNUMBER",tstr);
    end;
    GetLegalInvNrRow(IVr.OfficialSerNr,LINrbrw);
    OUTFORMFIELD("F_LEGALINVNOAPPROVALNO",LINrbrw.ApprovalNr);
    OUTFORMFIELD("F_LEGALINVNOAPPROVALYEAR",LINrbrw.ApprovalYear);
    OUTFORMFIELD("F_LEGALINVNOCERTIFICATENO",LINrbrw.CertificateNr);
    if (HasLocalization("BOL")) then begin
      tstr = FindOriginalChainDigitalSeal(IVr,orgchaina);
      if (FieldInForm("F_DIGITALSEAL")) then begin
        while (len(tstr)>0) begin
          i = len(tstr);
          if (i>128) then begin
            i = 128;
          end;
          OUTFORMFIELD("F_DIGITALSEAL",left(tstr,i));
          tstr = right(tstr,len(tstr)-i);
        end;
      end;
      if (FieldInForm("F_ORIGINALCHAIN")) then begin
        al = GetAreaLength(orgchaina);
        posa = 0;
        while (posa<al) begin
          tstr = GetStringFromArea(orgchaina,posa,128);
          OUTFORMFIELD("F_ORIGINALCHAIN",tstr);
          posa = posa + len(tstr);
        end;          
      end;
      if (FieldInForm("F_TAXADMINSERVICECHAIN")) then begin
        FindTaxAdminServiceChain(IVr,orgchaina);
        al = GetAreaLength(orgchaina);
        posa = 0;
        while (posa<al) begin
          tstr = GetStringFromArea(orgchaina,posa,128);
          OUTFORMFIELD("F_TAXADMINSERVICECHAIN",tstr);
          posa = posa + len(tstr);
        end;          
      end;
    end;
    if (HasLocalization("MEX")) then begin
      if (FieldInForm("F_TAXADMINSERVICECHAIN")) then begin
        FindTaxAdminServiceChain(IVr,orgchaina);
        al = GetAreaLength(orgchaina);
        posa = 0;
        while (posa<al) begin
          tstr = GetStringFromArea(orgchaina,posa,110);
          OUTFORMFIELD("F_TAXADMINSERVICECHAIN",tstr);
          posa = posa + len(tstr);
        end;          
      end;
      if (FieldInForm("F_DIGITALSEAL")) then begin
        OUTFORMFIELD("F_DIGITALSEAL",IVr.TaxAdminReceiptNr);
      end;
    end;
    OUTFORMFIELD("F_TAXADMINSERVICECERTIFICATENO",IVr.TaxAdminServCertificateNr);
    OUTFORMFIELD("F_TAXADMINSERVICESIGNATURETIMESTAMP",IVr.TaxAdminServSignatureTimeStamp);
    OUTFORMFIELD("F_TAXADMINSERVICESEAL",IVr.TaxAdminServSeal);
    OUTFORMFIELD("F_TAXADMINSERVICERECEIPTNR",IVr.TaxAdminReceiptNr);
    OUTFORMFIELD("F_OFFICIALSERNOSERIE",left(IVr.OfficialSerNr,len(LINrbrw.Serie)));
    if (HasLocalization("BOL,HRV,SVN")) then begin
      OUTFORMFIELD("F_OFFICIALSERNOWITHOUTSERIE",StringToLongInt(Right(IVr.OfficialSerNr,len(IVr.OfficialSerNr)-len(LINrbrw.Serie))));
    end else begin
      OUTFORMFIELD("F_OFFICIALSERNOWITHOUTSERIE",Right(IVr.OfficialSerNr,len(IVr.OfficialSerNr)-len(LINrbrw.Serie)));
    end;
  end;  
  tstr = GetJwl_CustomerName(IVr.CustCode);
  OUTFORMFIELD("F_KUNDNAMNJWL",tstr);  
  OUTFORMFIELD("F_SLOVENIANREF",tstr); 
  if (IVr.InclVAT==0) then begin
    t = IVr.Sum3+IVr.Sum1;
  end else begin
    t = IVr.Sum1;
  end;
  PrintValueInclZero("F_SUBTOTALWITHVAT",t,M4Val,LangNrr,SysFormatRec,negamountf);
  PrintValue("F_TAXSUM",IVr.TAX1Sum,M4Val,LangNrr,SysFormatRec,negamountf);
  PrintValue("F_TAXSUM2",IVr.TAX2Sum,M4Val,LangNrr,SysFormatRec,negamountf);
  if (FieldINFORM("F_RUSPAYNR")) then begin
    RussianPaymentNr(IVr.SerNr,tstr);
    OUTFORMFIELD("F_RUSPAYNR",tstr);
  end;    
  if (FIELDINFORM("F_CREDITEDINVOICENR")) then begin
    if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
      tstr = USetStr(1807);
      tstr = tstr & CreateInvoiceNumber(IVr.CredInv,IVr.CredOfficialSerNr);
      OUTFORMFIELD("F_CREDITEDINVOICENR",tstr);
    end;
  end;
  if (FIELDINFORM("F_CREDITEDINVOICEDATE")) then begin
    if (IVr.CredInv!=-1) then begin
      OUTFORMFIELD("F_CREDITEDINVOICEDATE",orgIVr.TransDate);
    end;
  end;
  if (FIELDINFORM("F_CREDITEDINVOICEINVDATE")) then begin
    if (IVr.CredInv!=-1) then begin
      OUTFORMFIELD("F_CREDITEDINVOICEINVDATE",orgIVr.InvDate);
    end;
  end;
  if (FIELDINFORM("F_CREDITEDINVOICESRVDATE")) then begin
    if (IVr.CredInv!=-1) then begin
      if (nonblankdate(orgIVr.ServiceDelDate)) then begin
        OUTFORMFIELD("F_CREDITEDINVOICESRVDATE",orgIVr.ServiceDelDate);
      end else begin
        OUTFORMFIELD("F_CREDITEDINVOICESRVDATE",orgIVr.InvDate);
      end;
    end;
  end;
  if (HasLocalization("PRT")) then begin
    if (FIELDINFORM("F_ORGINVOFFICIALSERNO") and IVr.CredInv!=-1) then begin
      OUTFORMFIELD("F_ORGINVOFFICIALSERNO",GetOffSerNrIVJournalID(orgIVr.SerNr,"IVVc",orgIVr.OfficialSerNr) & " " & orgIVr.OfficialSerNrSerie & "/" & Right(orgIVr.OfficialSerNr,len(orgIVr.OfficialSerNr)-len(orgIVr.OfficialSerNrSerie)));
    end else begin
      OUTFORMFIELD("F_ORGINVOFFICIALSERNO",IVr.CredOfficialSerNr);
    end;
  end else begin
    if (FIELDINFORM("F_ORGINVOFFICIALSERNO")) then begin
      if (nonblank(IVr.CredOfficialSerNr)) then begin
        OUTFORMFIELD("F_ORGINVOFFICIALSERNO",IVr.CredOfficialSerNr);
      end else begin  
        OUTFORMFIELD("F_ORGINVOFFICIALSERNO",orgIVr.OfficialSerNr);
      end;
    end;
  end;
  if (FIELDINFORM("F_ORGTAXAUTHID")) then begin
    if (IVr.CredInv!=-1) then begin
      PrintTAXAuthID(F_ORGTAXAUTHID,orgIVr.TaxAuthID,orgIVr.SerNr,orgIVr.TransDate);
    end;
  end;
  if (FieldInForm("F_ORGTAXAUTHIDCC")) then begin
    if (IVr.CredInv!=-1) then begin
      PrintTAXAuthIDControlCode(F_ORGTAXAUTHIDCC,orgIVr);
    end;
  end;
  if (FieldInForm("F_ORGTAXAUTHIDTODATE")) then begin
    if (IVr.CredInv!=-1) then begin
      PrintTAXAuthIDToDate(F_ORGTAXAUTHIDTODATE,IVr);
    end;
  end;
  
  if (FieldInForm("F_ORGRATE")) then begin
    if (IVr.CredInv!=-1) then begin
      GetFullCurncyRateText(true,tstr,orgIVr.FrRate,orgIVr.ToRateB1,orgIVr.ToRateB2,orgIVr.BaseRate1,IVr.BaseRate2);
      OUTFORMFIELD("F_ORGRATE",tstr);
    end;
  end;
  if (FieldInForm("F_ORGBASERATE")) then begin
    if (IVr.CredInv!=-1) then begin
      GetFullCurncyRateText(false,tstr,orgIVr.FrRate,orgIVr.ToRateB1,orgIVr.ToRateB2,orgIVr.BaseRate1,orgIVr.BaseRate2);
      OUTFORMFIELD("F_ORGBASERATE",tstr);
    end;
  end;
  if (FIELDINFORM("F_ORGBASE1BETALA")) then begin
    t = MulRateToBase1(orgIVr.CurncyCode,orgIVr.Sum4,orgIVr.FrRate,orgIVr.ToRateB1,orgIVr.ToRateB2,orgIVr.BaseRate1,orgIVr.BaseRate2,DefaultCurRoundOff);
    valtyp = M4Val;
    GetFieldArgument(Docr,F_ORGBASE1BETALA,tstr);
    if (tstr=="-") then begin
      valtyp = M4NegVal;
    end;
    PrintValueInclZero("F_ORGBASE1BETALA",t,valtyp,LangNrr,SysFormatRec,negamountf);
  end;
  if (FIELDINFORM("F_ORGINVATTBETALA")) then begin
    GetFieldArgument(Docr,F_ORGATTBETALA,tstr);
    if (nonblank(tstr)) then begin
      t = Round(orgIVr.Sum4,SetRoundModeD(StringToInt(tstr)));
      PrintValueInclZero("F_ORGINVATTBETALA",t,M45Val,LangNrr,SysFormatRec,negamountf);
    end else begin
      PrintValueInclZero("F_ORGINVATTBETALA",orgIVr.Sum4,M4Val,LangNrr,SysFormatRec,negamountf);
    end;
  end;  

  
  if (FIELDINFORM("F_TOPAYTOPAYBACK")) then begin
    if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
      if (IVr.Sum4<0) then begin
        PrintValueInclZero("F_TOPAYTOPAYBACK",IVr.Sum4,M4NegVal,LangNrr,SysFormatRec,negamountf);
      end else begin
        PrintValueInclZero("F_TOPAYTOPAYBACK",IVr.Sum4,M4Val,LangNrr,SysFormatRec,negamountf);
      end;
    end;
  end;  
  if (FIELDINFORM("F_TOPAYTOPAYBACKTEXT")) then begin
    if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
      if (IVr.Sum4<0) then begin
        OUTFORMFIELD("F_TOPAYTOPAYBACKTEXT",USetStr(2082));
      end else begin
        OUTFORMFIELD("F_TOPAYTOPAYBACKTEXT",USetStr(2083));
      end;
    end;
  end;  
  if (FIELDINFORM("F_PRICETEXT")) then begin
    if (IVr.InclVAT!=0) then begin
      OUTFORMFIELD("F_PRICETEXT",USetStr(2067));
    end else begin
      OUTFORMFIELD("F_PRICETEXT",USetStr(2068));
    end;
  end;  
  if (FIELDINFORM("F_NOTE")) then begin
    GetFieldArgument(Docr,F_NOTE,tstr);
    IVPrintNote(IVr,tstr);
  end;
  if (FIELDINFORM("F_CCSLIPNOTE")) then begin
    GetFieldArgument(Docr,F_CCSLIPNOTE,tstr);
    CCSlipNotePrintNote("F_CCSLIPNOTE",IVr,tstr);
  end;
  if (FIELDINFORM("F_CCSLIPNOTE2")) then begin
    GetFieldArgument(Docr,F_CCSLIPNOTE2,tstr);
    CCSlipNotePrintNote("F_CCSLIPNOTE2",IVr,tstr);
  end;

  PrintValue("F_RECVALUE",IVr.RecValue,M4Val,LangNrr,SysFormatRec,negamountf);
  PrintValue("F_RETVALUE",IVr.RetValue,M4Val,LangNrr,SysFormatRec,negamountf);
  if (FIELDINFORM("F_PURCHVAL")) then begin
    PrintPurchVal(IVr,LangNrr,SysFormatRec);
  end;
  if (FIELDINFORM("F_CUACCNO")) then begin
    PrintCuAccNo(IVr);
  end;
  PrintUserDefinedCustomerFields(CUr.UserStr1,CUr.UserStr2,CUr.UserStr3,CUr.UserStr4,CUr.UserStr5,CUr.UserDate1,CUr.UserDate2,CUr.UserDate3,CUr.UserVal1,CUr.UserVal2,CUr.UserVal3);
  if (FIELDINFORM("F_COUNTRYNAME")) then begin
    GetCountryName(CUr.CountryCode,IVr.LangCode,tstr);
    OUTFORMFIELD("F_COUNTRYNAME",tstr);
  end;
  OUTFORMFIELD("F_CREDCARD",IVr.CreditCard);  
  if (FIELDINFORM("F_CREDCARDTYPE")) then begin
    GetCreditCardType(IVr.CreditCard,tstr);
    OUTFORMFIELD("F_CREDCARDTYPE",tstr);
  end;  
  OUTFORMFIELD("F_AUTHORIZATION",IVr.AuthorizationCode);  
  OUTFORMFIELD("F_PLANSENTDATE",IVr.PlanSendDate);
  OUTFORMFIELD("F_PLANSENTTIME",IVr.PlanSendTime);
  OUTFORMFIELD("F_PLANARRIVALDATE",IVr.PlanArrDate);
  OUTFORMFIELD("F_PLANARRIVALTime",IVr.PlanArrTime);
  OUTFORMFIELD("F_DATEDAY",GetDay(IVr.TransDate));  
  OUTFORMFIELD("F_DATEMONTH",GetMonth(IVr.TransDate));  
  GetMonthText(IVr.LangCode,IVr.TransDate,tstr);
  OUTFORMFIELD("F_DATEMONTHTEXT",tstr);  
  OUTFORMFIELD("F_DATEYEAR",GetYear(IVr.TransDate));  
  GetDateMonthInWords(IVr.TransDate,tstr);
  OUTFORMFIELD("F_DATEMONTHINWORDS",tstr);
  OUTFORMFIELD("F_FROMADRESS",CUr.Name);        
  OUTFORMFIELD("F_FROMADRESS",CUr.InvAddr0);
  OUTFORMFIELD("F_FROMADRESS",CUr.InvAddr1);
  OUTFORMFIELD("F_FROMADRESS",CUr.InvAddr2);  
  OUTFORMFIELD("F_FROMADRESS",CUr.InvAddr3);  
  OUTFORMFIELD("F_FROMADRESS",CUr.InvAddr4);  
  OUTFORMFIELD("F_BANKACC",CUr.BankAccount);
  OUTFORMFIELD("F_ANACODE",CUr.ANACode);
  PrintCountryCode("F_CUCOUNTRYCODE",CUr.CountryCode)
  OUTFORMFIELD("F_ACCOUNTOPERATOR",CUr.AccOperator);
  Countryr.Code = IVr.InvCountry;
  ReadFirstMain(Countryr,1,true);
  OUTFORMFIELD("F_COUNTRYISOCODE",Countryr.ISOCode);
  Bankr.Code = CUr.AccOperator;
  ReadFirstMain(Bankr,1,true);
  OUTFORMFIELD("F_ACCOUNTOPERATORNAME",Bankr.Name);
  OUTFORMFIELD("F_BANKCORRPACC",Bankr.CorrspAcc);
  OUTFORMFIELD("F_FROMADRESS",CUr.CountryCode);  
  PrintValue("F_AMOUNTWITHOUTDISCSUM",IVr.Sum4-IVr.DiscSum,M4Val,LangNrr,SysFormatRec,negamountf);
  PrintValue("F_DISCSUM",IVr.DiscSum,M4Val,LangNrr,SysFormatRec,negamountf);
  PrintValue("F_DISCPERC",IVr.DiscPerc,M4Val,LangNrr,SysFormatRec,negamountf);
  OUTFORMFIELD("F_PROJEKTNUMMER",IVr.PRCode);  
  OUTFORMFIELD("F_PROJECTNAME",PRr.Name);  
  OUTFORMFIELD("F_CLASS",PRr.PRClass);  
  OUTFORMFIELD("F_LEDARE",PRr.Leader);  
  OUTFORMFIELD("F_LEDARE2",PRr.Leader2);  
  OUTFORMFIELD("F_LEDARE3",PRr.Leader3);  
  OUTFORMFIELD("F_LEDARE4",PRr.Leader4);  
  OUTFORMFIELD("F_LEDARE5",PRr.Leader5);  
  OUTFORMFIELD("F_NAMN",PRr.LeaderName);  
  OUTFORMFIELD("F_NAMN2",PRr.Leader2Name);  
  OUTFORMFIELD("F_NAMN3",PRr.Leader3Name);  
  OUTFORMFIELD("F_NAMN4",PRr.Leader4Name);  
  OUTFORMFIELD("F_NAMN5",PRr.Leader5Name);  
  OUTFORMFIELD("F_TOCONTACT",PRr.Contact);  
  if (FIELDINFORM("F_INSTALLMENTDATE")) then begin
    PrintInstallment(IVr,1);
  end;  
  if (FIELDINFORM("F_INSTALLMENTSUM")) then begin
    PrintInstallment(IVr,2);
  end;  
  OUTFORMFIELD("F_COMMENT",PRr.Desc0);  
  OUTFORMFIELD("F_COMMENT",PRr.Desc1);  
  OUTFORMFIELD("F_COMMENT",PRr.Desc2);  
  OUTFORMFIELD("F_PROJECTTEXT",PRr.Text0);  
  OUTFORMFIELD("F_PROJECTTEXT",PRr.Text1);  
  OUTFORMFIELD("F_PROJECTTEXT",PRr.Text2);  
  OUTFORMFIELD("F_PROJECTTEXT",PRr.Text3);  
  OUTFORMFIELD("F_PROJECTTEXT",PRr.Text4);  
  OUTFORMFIELD("F_PROJECTTEXT",PRr.Text5);  
  OUTFORMFIELD("F_PROJECTTEXT",PRr.Text6);  
  OUTFORMFIELD("F_PROJECTTEXT",PRr.Text7);  
  OUTFORMFIELD("F_PROJECTTEXT",PRr.Text8);  
  OUTFORMFIELD("F_PROJECTTEXT",PRr.Text9);  
  OUTFORMFIELD("F_TEXT",PRr.Text0);  
  OUTFORMFIELD("F_TEXT",PRr.Text1);  
  OUTFORMFIELD("F_TEXT",PRr.Text2);  
  OUTFORMFIELD("F_TEXT",PRr.Text3);  
  OUTFORMFIELD("F_TEXT",PRr.Text4);  
  OUTFORMFIELD("F_TEXT",PRr.Text5);  
  OUTFORMFIELD("F_TEXT",PRr.Text6);  
  OUTFORMFIELD("F_TEXT",PRr.Text7);  
  OUTFORMFIELD("F_TEXT",PRr.Text8);  
  OUTFORMFIELD("F_TEXT",PRr.Text9);  
  OUTFORMFIELD("F_ARGINVNUMBER",CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr));  
  if (HasLocalization("PRT")) then begin
    tstr = USetStr(17250);
    switch (IVr.InvType) begin
      case kInvoiceTypeNormal: tstr = USetStr(17250);
      case kInvoiceTypeCash: tstr = USetStr(17251);
      case kInvoiceTypeCashInvoiceReceiptPRT: tstr = USetStr(17269);
      case kInvoiceTypeCredit: tstr = USetStr(17252);
      case kInvoiceTypeInterest: tstr = USetStr(17253);
      case kInvoiceTypeDebit: tstr = USetStr(17253);
      case kInvoiceTypeNormalSpecialSales: tstr = USetStr(17250);
      case kInvoiceTypeCreditSpecialSales: tstr = USetStr(17252);
    end;
    GetLegalInvNrRow(IVr.OfficialSerNr,LINrbrw);
    OUTFORMFIELD("F_OFFICIALSERNO",tstr & " " & OfficialNumberReformatFromSeries(IVr.OfficialSerNr,IVr.OfficialSerNrSerie,"/"));
  end else begin
    if (nonblank(IVr.OfficialSerNr2)) then begin
      OUTFORMFIELD("F_OFFICIALSERNO",IVr.OfficialSerNr2);
    end else begin
      OUTFORMFIELD("F_OFFICIALSERNO",IVr.OfficialSerNr);
    end;
  end;
  OUTFORMFIELD("F_OFFICIALSERNO2",IVr.OfficialSerNr2);
  if (IVr.IPBookVAT!=0) then begin 
    OUTFORMFIELD("F_IPBOOKVAT",USetStr(19123));
  end;
  found = true;
  OffSNIVr.IVNr = IVr.SerNr;
  while (LoopMain(OffSNIVr,1,found)) begin
    if (OffSNIVr.IVNr!=IVr.SerNr) then begin found = false; end;
    if (found) then begin
      OUTFORMFIELD("F_OFFICIALSERNOPERPAGE",OffSNIVr.OfficialSerNr);
    end;
  end;  
  
  OUTFORMFIELD("F_CAE",IVr.CAE);
  OUTFORMFIELD("F_CAEEXPIRY",IVr.CAEExpiry);
  OUTFORMFIELD("F_CAEASTARTDATE",IVr.CAEAStartDate);
  OUTFORMFIELD("F_CAEAENDDATE",IVr.CAEAExpiryDate);
  OUTFORMFIELD("F_CAEBARCODE",CAEBarcode(IVr.InvType,IVr.OfficialSerNr,IVr.CAE,IVr.CAEExpiry));
  OUTFORMFIELD("F_CAEBARCODEENCODED",CAEBarcode(IVr.InvType,IVr.OfficialSerNr,IVr.CAE,IVr.CAEExpiry));
  CreateEpsonPVNumber(IVr.SerNr,tstr);
  OUTFORMFIELD("F_EPSONINVNR",tstr);
  if (blank(IVr.VATNr)) then begin
    tstr = CUr.VATNr;      
  end else begin
    tstr = IVr.VATNr;      
  end; 
  if (HasLocalization("MEX")) then begin
    OUTFORMFIELD("F_MEXQRCODE",MexEInvQRCode(tstr,IVr.Sum4,IVr.OfficialSerNr));
  end;
  OUTFORMFIELD("F_RFREFERENCE",CreateInternationalCreditorReference(IVr.CustCode & IVr.SerNr));
  OUTFORMFIELD("F_ADRESSATT",IVr.Addr0);  
  OUTFORMFIELD("F_ADRESSATT",IVr.ClientContact);  
  OUTFORMFIELD("F_ADRESSATT",IVr.Addr1);  
  OUTFORMFIELD("F_ADRESSATT",IVr.Addr2);  
  OUTFORMFIELD("F_ADRESSATT",IVr.Addr3);  
  OUTFORMFIELD("F_ADRESSATT",IVr.InvAddr3);  
  OUTFORMFIELD("F_ADRESSATT",IVr.InvAddr4);
  if (FIELDINFORM("F_SALDO")) then begin
    GetFindCustBalance(IVr.CustCode,-1,t1,t,t2,t3,0,0,0,0,0,0,false,limitdaysf);
    PrintValue("F_SALDO",t-t3,M4Val,LangNrr,SysFormatRec,negamountf);
  end;
  if (blank(IVr.RegNr1)) then begin
    OUTFORMFIELD("F_REGNUMBER1",CUr.RegNr1);      
  end else begin
    OUTFORMFIELD("F_REGNUMBER1",IVr.RegNr1);      
  end;
  OUTFORMFIELD("F_REGNUMBER2",CUr.RegNr2);  
  if (blank(IVr.Phone)) then begin
    OUTFORMFIELD("F_KUNDTEL",CUr.Phone);      
  end else begin
    OUTFORMFIELD("F_KUNDTEL",IVr.Phone);      
  end;      
  if (blank(IVr.Fax)) then begin
    OUTFORMFIELD("F_KUNDFAX",CUr.Fax);      
  end else begin
    OUTFORMFIELD("F_KUNDFAX",IVr.Fax);      
  end;      
  OUTFORMFIELD("F_CUSTOMEREMAIL",CUr.eMail);  
  OUTFORMFIELD("F_MOBILE",CUr.Mobile);
  
  testf = true;
  if (HasLocalization("PRT")) then begin
    if (CUr.VATNr=="999999990" or IVr.VATNr=="999999990") then begin
      OUTFORMFIELD("F_KUNDMOMSNR","XXXXXXXXX");      
      testf = false;
    end;
  end;
  if (testf) then begin
    if (blank(IVr.VATNr)) then begin
      OUTFORMFIELD("F_KUNDMOMSNR",CUr.VATNr);      
    end else begin
      OUTFORMFIELD("F_KUNDMOMSNR",IVr.VATNr);      
    end;
  end;      

  Userr.Code = IVr.SalesMan;
  ReadFirstMain(Userr,1,true);
  OUTFORMFIELD("F_SALJARE",IVr.SalesMan);
  OUTFORMFIELD("F_SALJARNAMN",Userr.Name);
  OUTFORMFIELD("F_EMAIL",Userr.emailAddr);
  if (HasLocalization("SVN")) then begin
    ContactCUr.Code = Userr.CustCode;//salesman
    ReadFirstMain(ContactCUr,1,true);

    tstr1 = SVNIVDigitalSeal(IVr,0);
    OUTFORMFIELD("F_DIGITALSEAL",tstr1);
    
    tstr = HexStringToDecimalString(tstr1);
    tstr = tstr & StripNonDigits(ContactCUr.VATNr);//CYb.VATNr
    tstr = tstr & DateToString(IVr.TransDate,"YYMMDD") & TimeToString(IVr.TransTime,"HHMMSS",false);

    posa = 0;
    for (i=0;i<len(tstr);i=i+1) begin
      posa = posa + asc(Mid(tstr,i,1)) - asc("0");  //48;
    end;  
    posa = Mod(posa,10);
    tstr = tstr & posa;
    
    GetFieldArgument(Docr,F_SVNINVOICEBARCODE128,tstr1);
    tmp = StringToInt(tstr1);
    if (tmp>0) then begin
      rwcnt = len(tstr)/tmp;
      if (rwcnt==3) then begin
        tstr1 = Mid(tstr,0,20);
        OUTFORMFIELD("F_SVNINVOICEBARCODE128","41" & tstr1);
        tstr1 = Mid(tstr,20,20);
        OUTFORMFIELD("F_SVNINVOICEBARCODE128","42" & tstr1);
        tstr1 = Mid(tstr,40,20);
        OUTFORMFIELD("F_SVNINVOICEBARCODE128","43" & tstr1);
      end;
      if (rwcnt==4) then begin
        tstr1 = Mid(tstr,0,15);
        OUTFORMFIELD("F_SVNINVOICEBARCODE128","441" & tstr1);
        tstr1 = Mid(tstr,15,15);
        OUTFORMFIELD("F_SVNINVOICEBARCODE128","442" & tstr1);
        tstr1 = Mid(tstr,30,15);
        OUTFORMFIELD("F_SVNINVOICEBARCODE128","443" & tstr1);
        tstr1 = Mid(tstr,45,15);
        OUTFORMFIELD("F_SVNINVOICEBARCODE128","444" & tstr1);
      end;
    end else begin
      OUTFORMFIELD("F_SVNINVOICEBARCODE128",tstr);
    end;
    OUTFORMFIELD("F_SVNINVOICEQRCODE",tstr);
    
  end;  
  
  OUTFORMFIELD("F_ORDERCOMMENT",ORr.Comment);  
  OUTFORMFIELD("F_PLANSHIP",ORr.PlanShip);  
  OUTFORMFIELD("F_ORDERTOTQTY",ORr.TotQty);  
  OUTFORMFIELD("F_ORDERROWSNR",MatRowCnt(ORr));  
  GetFullCurncyRateText(false,tstr,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2);
  OUTFORMFIELD("F_ORDERBASERATE",tstr);
  if (FIELDINFORM("F_FRAKTSEDELNR")) then begin
    GetFieldArgument(Docr,F_FRAKTSEDELNR,tstr1);
    CalcFraktField(IVr.OrderNr,tstr1,tstr);
    OUTFORMFIELD("F_FRAKTSEDELNR",tstr);
  end;
  if (FIELDINFORM("F_IFCASHDISCOUNT")) then begin
    RebVal(IVr,RoundRec,0,tstr);
    if (nonblank(tstr)) then begin
      GetFieldArgument(Docr,F_IFCASHDISCOUNT,tstr);
    end;
    OUTFORMFIELD("F_IFCASHDISCOUNT",tstr);
  end;
  if (FIELDINFORM("F_IFCASHDISCOUNT2")) then begin
    RebVal(IVr,RoundRec,2,tstr);
    if (nonblank(tstr)) then begin
      GetFieldArgument(Docr,F_IFCASHDISCOUNT2,tstr);
    end;
    OUTFORMFIELD("F_IFCASHDISCOUNT2",tstr);
  end;
  OUTFORMFIELD("F_RECIPIENTGLN",IVr.RecipientGLN);
  OUTFORMFIELD("F_GOODSRECIPIENTGLN",IVr.DelRecipientGLN);
  OUTFORMFIELD("F_LOCATION",IVr.Location);  
  OUTFORMFIELD("F_LOCATIONNAME",Locr.Name);  
  OUTFORMFIELD("F_LOCCONTACT",Locr.Contact);  
  OUTFORMFIELD("F_LOCPHONE",Locr.Phone);  
  OUTFORMFIELD("F_LOCFAX",Locr.Fax);  
  OUTFORMFIELD("F_LOCEMAIL",Locr.Email);  
  OUTFORMFIELD("F_LOCADDRESS",Locr.Addr0);  
  OUTFORMFIELD("F_LOCADDRESS",Locr.Addr1);  
  OUTFORMFIELD("F_LOCADDRESS",Locr.Addr2);  
  OUTFORMFIELD("F_LOCADDRESS",Locr.Addr3);  
  OUTFORMFIELD("F_LOCADDRESS",Locr.Addr4);  
  OUTFORMFIELD("F_INVCOMMENT",IVr.InvComment);  
  OUTFORMFIELD("F_CUSTCOMMENT",CUr.Comment);
  InvoiceType(IVr.InvType,tstr); //TODO: this function is not returning proper invoice type description
  OUTFORMFIELD("F_FAKTTYP",tstr);
  OUTFORMFIELD("F_FAKTURATYP",tstr);
  LongDateToStr(IVr.InvDate,SetDateOrder(IVr.LangCode),tstr);
  OUTFORMFIELD("F_FAKTURADATUM",tstr);
  OUTFORMFIELD("F_FAKTURADATUMHIJRI",ConvertDate(kCalendarGregorian,IVr.InvDate,kCalendarHijri));
  LongDateToStr(IVr.TransDate,SetDateOrder(IVr.LangCode),tstr);
  OUTFORMFIELD("F_TRANSDATE",tstr);
  OUTFORMFIELD("F_TRANSTIME",IVr.TransTime);
  OUTFORMFIELD("F_TRANSDATEHIJRI",ConvertDate(kCalendarGregorian,IVr.TransDate,kCalendarHijri));
  LongDateToStr(IVr.PayDate,SetDateOrder(IVr.LangCode),tstr);
  OUTFORMFIELD("F_FORFALLODATUM",tstr);
  OUTFORMFIELD("F_FORFALLODATUMHIJRI",ConvertDate(kCalendarGregorian,IVr.PayDate,kCalendarHijri));
  LongDateToStr(IVr.ServiceDelDate,SetDateOrder(IVr.LangCode),tstr);
  OUTFORMFIELD("F_SERVICEDELDATE",tstr);
  OUTFORMFIELD("F_FAKTURANUMMER",IVr.SerNr);  
  if (IVr.SVONr==-1) then begin
    tstr = "";
  end else begin
    tstr = IVr.SVONr;
  end;
  OUTFORMFIELD("F_ORDNUMMER",tstr);  
  if (IVr.OrderNr==-1) then begin
    tstr = "";
  end else begin
    tstr = IVr.OrderNr;
  end;
  OUTFORMFIELD("F_ORDERNUMMER",tstr);  
  if (IVr.SVONr==-1) then begin
    tstr = "";
  end else begin
    tstr = IVr.SVONr;
  end;
  OUTFORMFIELD("F_SVONR",tstr);
  OUTFORMFIELD("F_SERVICEORDER",tstr);
  OUTFORMFIELD("F_REFERENSNUMMER",IVr.CalcFinRef);
  OUTFORMFIELD("F_DEPARTMENT",CUr.Department);
  testf = true;
  if (HasLocalization("PRT")) then begin
    if (IVr.InvType==kInvoiceTypeCash /*or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT*/) then begin
      testf = false;
    end;
  end;
  if (testf) then begin
    OUTFORMFIELD("F_KUNDNR",IVr.CustCode);
    OUTFORMFIELD("F_KUNDNAMN",IVr.Addr0);
    OutAddress("F_ADRESS",IVr.Addr0,IVr.Addr1,IVr.Addr2,IVr.Addr3,IVr.InvAddr3,IVr.InvAddr4);
    OUTFORMFIELD("F_ADDR2",IVr.Addr1);
    OUTFORMFIELD("F_ADDR3",IVr.Addr2);
    OUTFORMFIELD("F_ADDR4",IVr.Addr3);
    OUTFORMFIELD("F_INVADDR3",IVr.InvAddr3);
    OUTFORMFIELD("F_INVADDR4",IVr.InvAddr4);
  end;
  
  OUTFORMFIELD("F_BRAZILEINVID",CreateBrazilEInvoiceId(IVr));
  if (nonblank(IVr.BrazilEInvType)) then begin
    BEInvTyper.Code = IVr.BrazilEInvType;
    if (ReadFirstMain(BEInvTyper,1,true)) then begin
      OUTFORMFIELD("F_BRAZILEINVDIR",BEInvTyper.InvDir);
      OUTFORMFIELD("F_BRAZILEINVOPNAT",BEInvTyper.Spec);
    end;
  end;

  OUTFORMFIELD("F_TERMINALID",IVr.TerminalID);
  OUTFORMFIELD("F_MACHINE",IVr.MachineName);

  if (FIELDINFORM("F_VILLKOR")) then begin
    GetPayDealText(IVr.PayDeal,IVr.LangCode,tstr);
    OUTFORMFIELD("F_VILLKOR",tstr);
  end;
  OUTFORMFIELD("F_VARREFERENS",IVr.OurContact);
  OUTFORMFIELD("F_ERREFERENS",IVr.ClientContact);
  if (FindCustomerRelation(IVr.CustCode,IVr.ClientContact,CUContactr)) then begin
    OUTFORMFIELD("F_TITLE",CUContactr.Title);    
    OUTFORMFIELD("F_SALUTATION1",CUContactr.Salutation1);
    OUTFORMFIELD("F_SALUTATION2",CUContactr.Salutation2);
    OUTFORMFIELD("F_SALUTATION3",CUContactr.Salutation3);
  end else begin
    OUTFORMFIELD("F_TITLE",CUr.Title);    
    OUTFORMFIELD("F_SALUTATION1",CUr.Salutation1);
    OUTFORMFIELD("F_SALUTATION2",CUr.Salutation2);
    OUTFORMFIELD("F_SALUTATION3",CUr.Salutation3);
  end;
  OUTFORMFIELD("F_OBJECT",IVr.Objects);
  if (FIELDINFORM("F_OBJEKTTEXT")) then begin
    GetObjectText(IVr.Objects,tstr);
    OUTFORMFIELD("F_OBJEKTTEXT",tstr);
  end;
  OUTFORMFIELD("F_FAKTHUVUD",IVr.InvComment);
  PrintCurrencyCode("F_VALUTA",IVr.CurncyCode);
  OUTFORMFIELD("F_CURUSER",CurrentUser);
  if (FIELDINFORM("F_CURUSERNAME")) then begin
    GetUserName(CurrentUser,tstr);
    OUTFORMFIELD("F_CURUSERNAME",tstr);
  end;  
  GetFullCurncyRateText(true,tstr,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2);
  OUTFORMFIELD("F_RATE",tstr);
  GetFullCurncyRateText(false,tstr,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2);
  OUTFORMFIELD("F_BASERATE",tstr);
  if (blank(IVr.OrgCust)) then begin
    OUTFORMFIELD("F_ORGCUSTNR",ORr.CustCode);      
    OUTFORMFIELD("F_KUNDMOMSNRORGCUST",ORr.VATNr);      
  end else begin
    OUTFORMFIELD("F_ORGCUSTNR",IVr.OrgCust);      
    OUTFORMFIELD("F_KUNDMOMSNRORGCUST",OrderingCUr.VATNr);      
  end;      
  if (blank(IVr.OrgCust)) then begin
    OUTFORMFIELD("F_ORGCUSTNAME",ORr.Addr0);      
  end else begin
    OUTFORMFIELD("F_ORGCUSTNAME",IVr.Addr0);      
  end;      
  OUTFORMFIELD("F_POSTADRESS",ORr.Addr0);
  OUTFORMFIELD("F_POSTADRESS",ORr.Addr1);
  OUTFORMFIELD("F_POSTADRESS",ORr.Addr2);
  OUTFORMFIELD("F_POSTADRESS",ORr.Addr3);
  OUTFORMFIELD("F_POSTADRESS",ORr.InvAddr3);
  OUTFORMFIELD("F_POSTADRESS",ORr.InvAddr4);
  if ((IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeNormalSpecialSales) or (IVr.InvType==kInvoiceTypeDownpayment)) then begin
    OUTFORMFIELD("F_RANTASATS",IVr.IntCode);
  end;
  if (blank(IVr.ShipAddr0)) then begin
    OUTFORMFIELD("F_INLEVADRESS3",IVr.Addr0);      
  end else begin
    OUTFORMFIELD("F_INLEVADRESS3",IVr.ShipAddr0);      
  end;      
  if (blank(IVr.ShipAddr0)) then begin
    OUTFORMFIELD("F_INLEVADRESS4",IVr.Addr1);
  end else begin
    OUTFORMFIELD("F_INLEVADRESS4",IVr.ShipAddr1);
  end;      
  if (blank(IVr.ShipAddr0)) then begin
    OUTFORMFIELD("F_INLEVADRESS5",IVr.Addr2);
  end else begin
    OUTFORMFIELD("F_INLEVADRESS5",IVr.ShipAddr2);
  end;      
  if (blank(IVr.ShipAddr0)) then begin
    OUTFORMFIELD("F_INLEVADRESS6",IVr.Addr3);
  end else begin
    OUTFORMFIELD("F_INLEVADRESS6",IVr.ShipAddr3);
  end;      
  if (blank(IVr.ShipAddr0)) then begin
    OUTFORMFIELD("F_DELADDR3",IVr.InvAddr3);
  end else begin
    OUTFORMFIELD("F_DELADDR3",IVr.DelAddr3);
  end;      
  if (blank(IVr.ShipAddr0)) then begin
    OUTFORMFIELD("F_DELADDR4",IVr.InvAddr4);
  end else begin
    OUTFORMFIELD("F_DELADDR4",IVr.DelAddr4);
  end;      
  if (HasLocalization("PRT")==false) then begin
    OutAddress("F_INLEVADRESS",IVr.ShipAddr0,IVr.ShipAddr1,IVr.ShipAddr2,IVr.ShipAddr3,IVr.DelAddr3,IVr.DelAddr4);
  end else begin
    if (blank(IVr.PlanSendDate) or blank(IVr.PlanSendTime)) then begin
      OUTFORMFIELD("F_INLEVADRESS","");
    end else begin
      if (blank(IVr.ShipAddr1) or blank(IVr.ShipAddr0)) then begin
        OutAddress("F_INLEVADRESS",IVr.Addr0,IVr.Addr1,IVr.Addr2,IVr.Addr3,IVr.InvAddr3,IVr.InvAddr4);
      end else begin
        OutAddress("F_INLEVADRESS",IVr.ShipAddr0,IVr.ShipAddr1,IVr.ShipAddr2,IVr.ShipAddr3,IVr.DelAddr3,IVr.DelAddr4);
      end;
    end;
  end;
  OUTFORMFIELD("F_INVLEVSATT",IVr.ShipMode);
  OUTFORMFIELD("F_INVLEVVILLK",IVr.ShipDeal);
  if (FIELDINFORM("F_INVLEVVILLKTEXT")) then begin
    GetShipDealText(IVr.ShipDeal,IVr.LangCode,tstr);
    OUTFORMFIELD("F_INVLEVVILLKTEXT",tstr);
  end;
  OUTFORMFIELD("F_ORDLEVADRESS",ORr.ShipAddr0);
  OUTFORMFIELD("F_ORDLEVADRESS",ORr.ShipAddr1);
  OUTFORMFIELD("F_ORDLEVADRESS",ORr.ShipAddr2);
  OUTFORMFIELD("F_ORDLEVADRESS",ORr.ShipAddr3);
  OUTFORMFIELD("F_ORDLEVADRESS",ORr.DelAddr3);
  OUTFORMFIELD("F_ORDLEVADRESS",ORr.DelAddr4);
  OUTFORMFIELD("F_FAKTURATILL",CUr.Name);
  OUTFORMFIELD("F_FAKTURATILL",CUr.InvAddr0);
  OUTFORMFIELD("F_FAKTURATILL",CUr.InvAddr1);
  OUTFORMFIELD("F_FAKTURATILL",CUr.InvAddr2);
  OUTFORMFIELD("F_FAKTURATILL",CUr.InvAddr3);
  OUTFORMFIELD("F_FAKTURATILL",CUr.InvAddr4);
  OUTFORMFIELD("F_ORDDATUM",ORr.OrdDate);
  OUTFORMFIELD("F_KUNDORDNR",ORr.CustOrdNr);
  OUTFORMFIELD("F_KUNDORDNRFROMINV",IVr.CustOrdNr);
  if (blank(IVr.BankCode)) then begin
    PrintBankData(CUr.Bank);
  end else begin
    PrintBankData(IVr.BankCode);
  end;
  PrintOrgCustBankData(IVr.OrgCust);
  if (IVr.QTNr>0) then begin
    OUTFORMFIELD("F_QUOTENR",IVr.QTNr);
  end;

  OUTFORMFIELD("F_RECEIPTINFO",IVr.ReceiptInfo);

  PrintPremiseData;
  PrintBranchData(IVr.BranchID);
  PrintSiteInformation(IVr.DelAddrCode,IVr.CustCode);
  OUTFORMFIELD("F_SHIPTERM",IVr.ShipDeal);
  if (FIELDINFORM("F_SHIPTERMTEXT")) then begin
    GetShipDealText(IVr.ShipDeal,IVr.LangCode,tstr);
    OUTFORMFIELD("F_SHIPTERMTEXT",tstr);
  end;
  OUTFORMFIELD("F_DANREFNUMBER",IVr.PriceList);
  if (RepSpec.flags[15]==0) then begin
    PrintInvoiceRows2(RepSpec,IVr,Docr,RoundRec,LangNrr,SysFormatRec,totdiscount,totinprice,totweight,totnetweight,totvolume,totcombase2sum,totqty,totqty2,totfifo,totcombase2vat,totwithh,totnormwinttax,totnormwithvatprc,PointsSpent,negamountf,MatRowCnt(IVr));
  end else begin
    PrepareInvoiceLayout(RepSpec,IVr,NewIVr); //If layout option is selected, prepare invoice (copy,reformat) and print
    PrintInvoiceRows2(RepSpec,NewIVr,Docr,RoundRec,LangNrr,SysFormatRec,totdiscount,totinprice,totweight,totnetweight,totvolume,totcombase2sum,totqty,totqty2,totfifo,totcombase2vat,totwithh,totnormwinttax,totnormwithvatprc,PointsSpent,negamountf,MatRowCnt(NewIVr));
  end;
  PrintDownPaymentData(IVr,Docr,RoundRec,LangNrr,SysFormatRec,negamountf);
  PrintTransactionOnDocument(IVYc,IVr.SerNr);
  tstr = "";
  if (MatRowCnt(IVr)>0) then begin
    MatRowGet(IVr,0,IVrw);
    tstr = IVrw.ArtCode;
    if (FIELDINFORM("F_KFAKTURANR")) then begin
      BuildKSerno(IVr.SerNr,IVrw.ArtCode,tstr);
      OUTFORMFIELD("F_KFAKTURANR",tstr);
    end;
  end;
  if (FIELDINFORM("F_KID")) then begin
    CreateKIDCode(IVr.CustCode,IVr.SerNr,tstr);
    OUTFORMFIELD("F_KID",tstr);
  end;
  if (FIELDINFORM("F_KIDCHECK")) then begin
    CreateKIDCheckNor(IVr.Sum4,IVr.SerNr,tstr);
    OUTFORMFIELD("F_KIDCHECK",tstr);
  end;
  if (FIELDINFORM("F_KIDNOCHECK")) then begin
    CreateKIDNoCheck(IVr.CustCode,IVr.SerNr,tstr);
    OUTFORMFIELD("F_KIDNOCHECK",tstr);
  end;
  if (FIELDINFORM("F_LEVSATT")) then begin
    if (nonblank(lastSHr.ShipMode)) then begin
      OUTFORMFIELD("F_LEVSATT",lastSHr.ShipMode);
    end else begin
      OUTFORMFIELD("F_LEVSATT",IVr.ShipMode);
    end;
  end;
  if (FIELDINFORM("F_LEVSATTTEXT")) then begin
    if (nonblank(lastSHr.ShipMode)) then begin
      GetShipModeText(lastSHr.ShipMode,IVr.LangCode,tstr);
      OUTFORMFIELD("F_LEVSATTTEXT",tstr);
    end else begin
      GetShipModeText(IVr.ShipMode,IVr.LangCode,tstr);
      OUTFORMFIELD("F_LEVSATTTEXT",tstr);
    end;
  end;
  if (lastSHr.SerNr==-1) then begin
    tstr = "";
  end else begin
    tstr = lastSHr.SerNr;
  end;  
  OUTFORMFIELD("F_LEVNR",tstr);
  OUTFORMFIELD("F_LEVDATUM",lastSHr.ShipDate);
  PrintValue("F_TOTQTY2",totqty2,M45Val,LangNrr,SysFormatRec,negamountf);
  if (lastSHr.SerNr!=-1) then begin
//    OUTFORMFIELD("F_LEVADRESS",lastSHr.Addr0);
//    OUTFORMFIELD("F_LEVADRESS",lastSHr.Addr1);
//    OUTFORMFIELD("F_LEVADRESS",lastSHr.Addr2);
//    OUTFORMFIELD("F_LEVADRESS",lastSHr.Addr3);
//    OUTFORMFIELD("F_LEVADRESS",lastSHr.DelAddr3);
//    OUTFORMFIELD("F_LEVADRESS",lastSHr.DelAddr4);
    OutAddress("F_LEVADRESS",lastSHr.Addr0,lastSHr.Addr1,lastSHr.Addr2,lastSHr.Addr3,lastSHr.DelAddr3,lastSHr.DelAddr4);
  end else begin
//    OUTFORMFIELD("F_LEVADRESS",IVr.ShipAddr0);
//    OUTFORMFIELD("F_LEVADRESS",IVr.ShipAddr1);
//    OUTFORMFIELD("F_LEVADRESS",IVr.ShipAddr2);
//    OUTFORMFIELD("F_LEVADRESS",IVr.ShipAddr3);
//    OUTFORMFIELD("F_LEVADRESS",IVr.DelAddr3);
//    OUTFORMFIELD("F_LEVADRESS",IVr.DelAddr4);
    OutAddress("F_LEVADRESS",IVr.ShipAddr0,IVr.ShipAddr1,IVr.ShipAddr2,IVr.ShipAddr3,IVr.DelAddr3,IVr.DelAddr4);
  end;
  if (blank(IVr.ShipAddr0)) then begin
    OutAddress("F_INLEVADRESS2",IVr.Addr0,IVr.Addr1,IVr.Addr2,IVr.Addr3,IVr.InvAddr3,IVr.InvAddr4);
  end else begin
    OutAddress("F_INLEVADRESS2",IVr.ShipAddr0,IVr.ShipAddr1,IVr.ShipAddr2,IVr.ShipAddr3,IVr.DelAddr3,IVr.DelAddr4);
  end;
  OUTFORMFIELD("F_DELSITECODE",IVr.DeliverySiteCode);
  OUTFORMFIELD("F_WORKSITENR",IVr.WorkSiteNumber);
  if (blank(IVr.OrgCust)) then begin
    if (lastSHr.SerNr!=-1) then begin
/*    
      OUTFORMFIELD("F_ORGCUSTNAMEADRESS",lastSHr.Addr0);
      OUTFORMFIELD("F_ORGCUSTNAMEADRESS",lastSHr.Addr1);
      OUTFORMFIELD("F_ORGCUSTNAMEADRESS",lastSHr.Addr2);
      OUTFORMFIELD("F_ORGCUSTNAMEADRESS",lastSHr.Addr3);
      OUTFORMFIELD("F_ORGCUSTNAMEADRESS",lastSHr.DelAddr3);
      OUTFORMFIELD("F_ORGCUSTNAMEADRESS",lastSHr.DelAddr4);
*/      
      OutAddress("F_ORGCUSTNAMEADRESS",lastSHr.Addr0,lastSHr.Addr1,lastSHr.Addr2,lastSHr.Addr3,lastSHr.DelAddr3,lastSHr.DelAddr4);
    end;
  end else begin
/*  
    OUTFORMFIELD("F_ORGCUSTNAMEADRESS",ORr.Addr0);
    OUTFORMFIELD("F_ORGCUSTNAMEADRESS",ORr.Addr1);
    OUTFORMFIELD("F_ORGCUSTNAMEADRESS",ORr.Addr2);
    OUTFORMFIELD("F_ORGCUSTNAMEADRESS",ORr.Addr3);
    OUTFORMFIELD("F_ORGCUSTNAMEADRESS",ORr.InvAddr3);
    OUTFORMFIELD("F_ORGCUSTNAMEADRESS",ORr.InvAddr4);
*/    
    if (ORr.SerNr>0) then begin
      OutAddress("F_ORGCUSTNAMEADRESS",ORr.Addr0,ORr.Addr1,ORr.Addr2,ORr.Addr3,ORr.InvAddr3,ORr.InvAddr4);
    end else begin
      OutAddress("F_ORGCUSTNAMEADRESS",OrderingCUr.Name,OrderingCUr.InvAddr0,OrderingCUr.InvAddr1,OrderingCUr.InvAddr2,OrderingCUr.InvAddr3,OrderingCUr.InvAddr4);
    end;
  end;
  if (FIELDINFORM("F_KASSADATUM")) then begin
    if ((IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeNormalSpecialSales) or (IVr.InvType==kInvoiceTypeDownpayment)) then begin
      if (IVr.pdvrebt!=0) then begin
        OUTFORMFIELD("F_KASSADATUM",AddDay(IVr.InvDate,IVr.pdrdays));
      end;
    end;
  end;
  if (FIELDINFORM("F_KASSADATUM_2")) then begin
    if ((IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeNormalSpecialSales) or (IVr.InvType==kInvoiceTypeDownpayment)) then begin
      if (IVr.pdvrebt2!=0) then begin
        OUTFORMFIELD("F_KASSADATUM_2",AddDay(IVr.InvDate,IVr.pdrdays2));
      end;
    end;
  end;
  if (FIELDINFORM("F_DELIVERIESNR")) then begin
    PrintDeliveriesNos(IVr.SerNr,IVr.OrderNr,tstr);
    OUTFORMFIELD("F_DELIVERIESNR",tstr);
  end;
  PrintValue("F_COMBASE2VAT",Round(totcombase2vat,GetVATRoundMode(RoundRec)),M45Val,LangNrr,SysFormatRec,negamountf);
  GetContactTitle(IVr.CustCode,IVr.ClientContact,tstr);
//  OUTFORMFIELD("F_TITLE",tstr);    use some other field if u need it
  PrintValue("F_DISCSUM",IVr.DiscSum,M4Val,LangNrr,SysFormatRec,negamountf);
  PrintValue("F_COMBASE2SUM",totcombase2sum,M4Val,LangNrr,SysFormatRec,negamountf);
  PrintValue("F_TOTFIFO",totfifo,M4Val,LangNrr,SysFormatRec,negamountf);
  if (FIELDINFORM("F_VATINTEXT")) then begin
    Val2ToText("",IVr.Sum3,M4Val,IVr.CurncyCode,IVr.LangCode,tstr);
    OUTFORMFIELD("F_VATINTEXT",tstr);
  end;
  if (FIELDINFORM("F_BASE1SUMMA")) then begin
    t = MulRateToBase1(IVr.CurncyCode,IVr.Sum1,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    valtyp = M4Val;
    GetFieldArgument(Docr,F_BASE1SUMMA,tstr);
    if (tstr=="-") then begin
      valtyp = M4NegVal;
    end;
    PrintValue("F_BASE1SUMMA",t,valtyp,LangNrr,SysFormatRec,negamountf);
  end;
  if (FIELDINFORM("F_BASE1MOMS")) then begin
    t = MulRateToBase1(IVr.CurncyCode,IVr.Sum3,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    valtyp = M4Val;
    GetFieldArgument(Docr,F_BASE1MOMS,tstr);
    if (tstr=="-") then begin
      valtyp = M4NegVal;
    end;
    PrintValue("F_BASE1MOMS",t,valtyp,LangNrr,SysFormatRec,negamountf);
  end;
  if (FIELDINFORM("F_BASE1BETALA")) then begin
    t = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    valtyp = M4Val;
    GetFieldArgument(Docr,F_BASE1BETALA,tstr);
    if (tstr=="-") then begin
      valtyp = M4NegVal;
    end;
    PrintValueInclZero("F_BASE1BETALA",t,valtyp,LangNrr,SysFormatRec,negamountf);
  end;
  if (FIELDINFORM("F_BASE2SUMMA")) then begin
    t = MulRateToBase2(IVr.CurncyCode,IVr.Sum1,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    valtyp = M4Val;
    GetFieldArgument(Docr,F_BASE2SUMMA,tstr);
    if (tstr=="-") then begin
      valtyp = M4NegVal;
    end;
    PrintValueInclZero("F_BASE2SUMMA",t,valtyp,LangNrr,SysFormatRec,negamountf);
  end;
  if (FIELDINFORM("F_BASE2MOMS")) then begin
    t = MulRateToBase2(IVr.CurncyCode,IVr.Sum3,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    valtyp = M4Val;
    GetFieldArgument(Docr,F_BASE2MOMS,tstr);
    if (tstr=="-") then begin
      valtyp = M4NegVal;
    end;
    PrintValue("F_BASE2MOMS",Round(t,GetVATRoundMode(RoundRec)),valtyp,LangNrr,SysFormatRec,negamountf);
  end;
  if (FIELDINFORM("F_BASE2BETALA")) then begin
    t = MulRateToBase2(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    valtyp = M4Val;
    GetFieldArgument(Docr,F_BASE2BETALA,tstr);
    if (tstr=="-") then begin
      valtyp = M4NegVal;
    end;
    PrintValue("F_BASE2BETALA",t,valtyp,LangNrr,SysFormatRec,negamountf);
  end;
  
  PrintValue("F_REVERSEVATAMOUNT",IVr.RvrsVAT,M4Val,LangNrr,SysFormatRec,negamountf);
  if (blank(IVr.RvrsVAT)==false) then begin
    if (HasLocalization("POL")) then begin
      OUTFORMFIELD("F_REVERSEVATTEXT",USetStr(39371));
    end;
    if (HasLocalization("LTU")) then begin
      if (nonblank(IVr.RvrsVAT) and blank(IVr.Sum3)) then begin
        OUTFORMFIELD("F_REVERSEVATTEXT",USetStr(39371));
      end;
    end;
    if (HasLocalization("GBR")) then begin
      if (nonblank(IVr.RvrsVAT) and blank(IVr.Sum3)) then begin
        if (IVr.InvType==kInvoiceTypeCredit) then begin
          OUTFORMFIELD("F_REVERSEVATTEXT",USetStr(39373));
        end else begin
          OUTFORMFIELD("F_REVERSEVATTEXT",USetStr(39372));
        end;
      end else begin
        if (IVr.InvType==kInvoiceTypeCredit) then begin
          OUTFORMFIELD("F_REVERSEVATTEXT",USetStr(39375));
        end else begin
          OUTFORMFIELD("F_REVERSEVATTEXT",USetStr(39374));
        end;
      end;
    end;
  end;

  PrintValue("F_AVRUNDNING",IVr.Sum0,M4Val,LangNrr,SysFormatRec,negamountf);
  PrintValue("F_SUMFREIGHT",IVr.Sum1-IVr.FrPrice,M4Val,LangNrr,SysFormatRec,negamountf);
  PrintValue("F_TAX1",IVr.TAX1Sum,M4Val,LangNrr,SysFormatRec,negamountf);
  PrintValue("F_SUMMAMOMS",IVr.Sum4-IVr.Sum3,M4Val,LangNrr,SysFormatRec,negamountf);
  PrintValue("F_FRAKT",IVr.FrPrice,M4Val,LangNrr,SysFormatRec,negamountf);
//  PrintValue("F_SUMMAEJMOMS",IVr.Sum2,M4Val,LangNrr,SysFormatRec,negamountf); // What is Sum2?? Using this field for something on row that actually prints something :)
  PrintValue("F_TOPAYEXCLFREIGHT",IVr.Sum1-IVr.FrPrice+IVr.Sum3,M4Val,LangNrr,SysFormatRec,negamountf);
  tstr = ValToString(IVr.Sum4,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
  if (negamountf) then begin
    OUTFORMFIELD("F_ATTBETALAFIXED","-" & Left(tstr,len(tstr)-3));
  end else begin
    OUTFORMFIELD("F_ATTBETALAFIXED",Left(tstr,len(tstr)-3));
  end;
  if (FIELDINFORM("F_ATTBETALATEXT")) then begin
    t = IVr.Sum4;
    SubPrePayments(IVr,t,t1);
    ValToText(t,M4Val,IVr.CurncyCode,IVr.LangCode,tstr);
    OUTFORMFIELD("F_ATTBETALATEXT",tstr);  
  end;
  PrintValue("F_TOTQTY",totqty,M4Qty,LangNrr,SysFormatRec,negamountf);
  if (FIELDINFORM("F_NROFITEMSINTEXT")) then begin
    IntToText(IVr.LangCode,CountNrofItemsIV(IVr),tstr);
    OUTFORMFIELD("F_NROFITEMSINTEXT",tstr);  
  end; 
  if (FIELDINFORM("F_QTYINTEXT")) then begin
    IntToText(IVr.LangCode,totqty,tstr);
    OUTFORMFIELD("F_QTYINTEXT",tstr);  
  end;  
  PrintValue("F_TOTALNOWITHHOLDING",IVr.Sum4-totwithh,M4Val,LangNrr,SysFormatRec,negamountf);  
  PrintValue("F_TOTALINTERNALTAXES",totnormwinttax,M4Val,LangNrr,SysFormatRec,negamountf);  
  PrintValue("F_TOTALVATPERCEPTIONS",totnormwithvatprc,M4Val,LangNrr,SysFormatRec,negamountf);  
  PrintValue("F_TOTALINCLVAT",IVr.Sum1-IVr.Sum2+IVr.Sum3,M4Val,LangNrr,SysFormatRec,negamountf);
  PrintValue("F_TOTALNONVAT",IVr.Sum4-IVr.Sum1-IVr.Sum2+IVr.Sum3,M4Val,LangNrr,SysFormatRec,negamountf);
  if (FIELDINFORM("F_AMOUNTINTEXT")) then begin
    GetFieldArgument(Docr,F_AMOUNTINTEXT,tstr);
    Val2ToText(tstr,IVr.Sum4,M4Val,IVr.CurncyCode,IVr.LangCode,tstr);
    OUTFORMFIELD("F_AMOUNTINTEXT",tstr);
  end;
  if (FIELDINFORM("F_AMOUNTINTEXTBASECUR1")) then begin
    t = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    PrintValToTextBaseCur(t,M4Val,IVr.LangCode,1,tstr);
    OUTFORMFIELD("F_AMOUNTINTEXTBASECUR1",tstr);  
  end;  
  if (FIELDINFORM("F_AMOUNTINTEXTBASECUR2")) then begin
    t = MulRateToBase2(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    PrintValToTextBaseCur(t,M4Val,IVr.LangCode,2,tstr);
    OUTFORMFIELD("F_AMOUNTINTEXTBASECUR2",tstr);  
  end;  
  if ((IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeNormalSpecialSales) or (IVr.InvType==kInvoiceTypeDownpayment)) then begin
    if (FIELDINFORM("F_KASSABETALA")) then begin
      RebPay_IV(IVr,RoundRec,0,false,t);
//      OUTFORMFIELD("F_KASSABETALA",t);  
      PrintValue("F_KASSABETALA",t,M4Val,LangNrr,SysFormatRec,negamountf);
    end;
    if (FIELDINFORM("F_KASSABETALA1")) then begin
      RebPay_IV(IVr,RoundRec,1,false,t);
      OUTFORMFIELD("F_KASSABETALA1",t);  
    end;
    if (FIELDINFORM("F_KASSABETALA2")) then begin
      RebPay_IV(IVr,RoundRec,2,false,t);
      OUTFORMFIELD("F_KASSABETALA2",t);  
    end;
    if (FIELDINFORM("F_KASSARABATT")) then begin
      RebPay_IV(IVr,RoundRec,0,true,t);
//      OUTFORMFIELD("F_KASSARABATT",t);  
      PrintValue("F_KASSARABATT",t,M4Val,LangNrr,SysFormatRec,negamountf);
    end;
    if (FIELDINFORM("F_KASSARABATT1")) then begin
      RebPay_IV(IVr,RoundRec,1,true,t);
      OUTFORMFIELD("F_KASSARABATT1",t);  
    end;
    if (FIELDINFORM("F_KASSARABATT2")) then begin
      RebPay_IV(IVr,RoundRec,2,true,t);
      OUTFORMFIELD("F_KASSARABATT2",t);  
    end;
    if (FIELDINFORM("F_SETDISCTOT")) then begin
      RebPay_IV(IVr,RoundRec,0,false,t);
      OUTFORMFIELD("F_SETDISCTOT",t);  
    end;

    if (FIELDINFORM("F_KASSARABATT_2")) then begin
      RebPay2(IVr,RoundRec,0,true,tstr);
      OUTFORMFIELD("F_KASSARABATT_2",tstr);  
    end;
    if (FIELDINFORM("F_KASSARABATT1_2")) then begin
      RebPay2(IVr,RoundRec,1,true,tstr);
      OUTFORMFIELD("F_KASSARABATT1_2",tstr);  
    end;
    if (FIELDINFORM("F_KASSARABATT2_2")) then begin
      RebPay2(IVr,RoundRec,2,true,tstr);
      OUTFORMFIELD("F_KASSARABATT2_2",tstr);  
    end;
    if (FIELDINFORM("F_SETDISCTOT_2")) then begin
      RebPay2(IVr,RoundRec,0,false,tstr);
      OUTFORMFIELD("F_SETDISCTOT_2",tstr);  
    end;

    if (FIELDINFORM("F_DISCVAT")) then begin
      RebVAT(IVr,RoundRec,t1);
      PrintValue("F_DISCVAT",t1,M4Val,LangNrr,SysFormatRec,negamountf);
    end;
    if (FIELDINFORM("F_SUMCOMMISSION")) then begin
      RebVAT2(IVr,RoundRec,t1);
      PrintValue("F_SUMCOMMISSION",t1,M4Val,LangNrr,SysFormatRec,negamountf);
    end;
    if (FIELDINFORM("F_TOPAYHALFCASHDISC")) then begin
      RebPayHalf_IV(IVr,RoundRec,0,tstr);
      OUTFORMFIELD("F_TOPAYHALFCASHDISC",tstr);  
    end;
  end;
  CalcIVTotals(IVr,Docr,RoundRec,LangNrr,SysFormatRec);
  PrintValue("F_TOTVOLUME",totvolume,M4Qty,LangNrr,SysFormatRec,negamountf);
  PrintValue("F_TOTWEIGHT",totweight,M4Qty,LangNrr,SysFormatRec,negamountf);
  PrintValue("F_TOTNETWEIGHT",totnetweight,M4Qty,LangNrr,SysFormatRec,negamountf);
  PrintValue("F_DISCSUMTOT",totdiscount,M4Val,LangNrr,SysFormatRec,negamountf);
  t = MulRateToBase1(IVr.CurncyCode,totdiscount,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
  PrintValue("F_DISCSUMTOTBC1",t,M4Val,LangNrr,SysFormatRec,negamountf);
  t = MulRateToBase2(IVr.CurncyCode,totdiscount,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
  PrintValue("F_DISCSUMTOTBC2",t,M4Val,LangNrr,SysFormatRec,negamountf);
  if (IVr.Sum4<0) then begin
    tstr = USetStr(1567);
  end else begin
    tstr = USetStr(1566);
  end;
  OUTFORMFIELD("F_POSNEGTEXT",tstr);  
  tstr = ValToString(IVr.Sum4,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
  RemoveSepFromStr(tstr,tstr1);
  OUTFORMFIELD("F_ATTBETALAWITHOUTSEP",Left(tstr1,len(tstr1)-2));  
  if (FIELDINFORM("F_MOMS")) then begin
    GetFieldArgument(Docr,F_MOMS,tstr);
    if (nonblank(tstr)) then begin
      t = Round(IVr.Sum3,SetRoundModeD(StringToInt(tstr)));
      PrintValueInclZeroWithSign(IVr.CurncyCode,"F_MOMSWITHCURNCYSIGN",t,M45Val,LangNrr,SysFormatRec,negamountf);
      PrintValueInclZero("F_MOMS",t,M45Val,LangNrr,SysFormatRec,negamountf);
    end else begin
      PrintValueInclZeroWithSign(IVr.CurncyCode,"F_MOMSWITHCURNCYSIGN",IVr.Sum3,M4Val,LangNrr,SysFormatRec,negamountf);
      PrintValueInclZero("F_MOMS",IVr.Sum3,M4Val,LangNrr,SysFormatRec,negamountf);
    end;
  end;  
  if (FIELDINFORM("F_ATTBETALA")) then begin
    GetFieldArgument(Docr,F_ATTBETALA,tstr);
    if (nonblank(tstr)) then begin
      t = Round(IVr.Sum4,SetRoundModeD(StringToInt(tstr)));
      PrintValueInclZero("F_ATTBETALA",t,M45Val,LangNrr,SysFormatRec,negamountf);
    end else begin
      PrintValueInclZero("F_ATTBETALA",IVr.Sum4,M4Val,LangNrr,SysFormatRec,negamountf);
    end;
  end;  
  if (FIELDINFORM("F_ATTBETALASIGNARG")) then begin
    valtyp = M4Val;
    GetFieldArgument(Docr,F_ATTBETALASIGNARG,tstr);
    if (tstr=="-") then begin
      valtyp = M4NegVal;
    end;
    PrintValueInclZero("F_ATTBETALASIGNARG",IVr.Sum4,valtyp,LangNrr,SysFormatRec,negamountf);
  end;
  
  if (FIELDINFORM("F_TOPAY")) or (FIELDINFORM("F_TOPAYBC2")) then begin
    t = IVr.Sum4;
    SubPrePayments(IVr,t,t1);
    PrintValueInclZero("F_TOPAY",t,M4Val,LangNrr,SysFormatRec,negamountf);
    t = MulRateToBase2(IVr.CurncyCode,t,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    PrintValueInclZero("F_TOPAYBC2",t,M4Val,LangNrr,SysFormatRec,negamountf);
  end;  
  
  if (FIELDINFORM("F_PREPAID")) then begin
    t = IVr.Sum4;
    SubPrePayments(IVr,t,t1);
    t = IVr.Sum4 - t;
    PrintValue("F_PREPAID",t,M4Val,LangNrr,SysFormatRec,negamountf);
  end;  
  if ((FIELDINFORM("F_ORGSUMMA")) or (FIELDINFORM("F_ORGATTBETALA")) or (FIELDINFORM("F_ORGMOMS")) or 
      (FIELDINFORM("F_DOWNPAYSENT")) or (FIELDINFORM("F_DOWNPAYSENTVAT")) or (FIELDINFORM("F_DOWNPAYSENTWITHOUTVAT"))) then begin
    SumNoDownPay(IVr,t,v,t1,t2,t3,t4);
    PrintValueInclZero("F_ORGSUMMA",t,M4Val,LangNrr,SysFormatRec,negamountf);
    PrintValueInclZero("F_ORGMOMS",t1,M4Val,LangNrr,SysFormatRec,negamountf);
    PrintValueInclZero("F_ORGATTBETALA",t2,M4Val,LangNrr,SysFormatRec,negamountf);
    PrintValue("F_DOWNPAYSENT",t3+t4,M4Val,LangNrr,SysFormatRec,negamountf);
    PrintValue("F_DOWNPAYSENTVAT",t4,M4Val,LangNrr,SysFormatRec,negamountf);
    if (IVr.InclVAT==0) then begin
      PrintValue("F_DOWNPAYSENTWITHOUTVAT",t3,M4Val,LangNrr,SysFormatRec,negamountf);
    end else begin
      PrintValue("F_DOWNPAYSENTWITHOUTVAT",t3,M4Val,LangNrr,SysFormatRec,negamountf);
    end;
  end;   
  if (IVr.InclVAT>0) then begin
    t = IVr.Sum1;
  end else begin
//    t = IVr.Sum1 - IVr.Sum2; why - sum2, sum2 contains some starnge numbers when proice< 0.10 used
    t = IVr.Sum1;
  end; 
  t = t - IVr.FrPrice;
  PrintValue("F_SUMMAMOMSPLIKTEJFRAKT",t,M4Val,LangNrr,SysFormatRec,negamountf);
  if (IVr.InclVAT>0) then begin
    t = IVr.Sum4 - IVr.Sum3 - IVr.Sum2;
  end else begin
    t = IVr.Sum1 - IVr.Sum2;
  end;  
  PrintValueInclZero("F_SUMMAMOMSPLIKTIGT",t,M4Val,LangNrr,SysFormatRec,negamountf);

  if (IVr.InclVAT>0) then begin
    t = IVr.Sum4 - IVr.Sum3;
  end else begin
    t = IVr.Sum1;
  end;  
  PrintValueInclZero("F_VATTYPETOTALSUM",t,M4Val,LangNrr,SysFormatRec,negamountf);

  if (FIELDINFORM("F_SUMMA")) then begin
    GetFieldArgument(Docr,F_SUMMA,tstr);
    if (nonblank(tstr)) then begin
      t = Round(IVr.Sum1,SetRoundModeD(StringToInt(tstr)));
      PrintValueInclZero("F_SUMMA",t,M45Val,LangNrr,SysFormatRec,negamountf);
    end else begin
      PrintValueInclZero("F_SUMMA",IVr.Sum1,M4Val,LangNrr,SysFormatRec,negamountf);
    end;
  end;
  tstr = Right(IVr.Sum4,2);
  OUTFORMFIELD("F_ATTBETALAFRAC",tstr);  
  
  Jobr.SerNr  = IVr.JobNr;
  if (ReadFirstMain(Jobr,1,true)) then begin
  end;
  OUTFORMFIELD("F_CHECKIN",Jobr.TransDate); 
  OUTFORMFIELD("F_CHECKOUT",Jobr.EndDate); 
  OUTFORMFIELD("F_RESNAME",Jobr.CUName); 
  OUTFORMFIELD("F_SAFTHASHCONTROL",SAFTHashControl(IVr.Hash));

  if (HasLocalization("PRT")) then begin
    tstr = USetStr(17250);
    switch (IVr.InvType) begin
      case kInvoiceTypeNormal: tstr = USetStr(17250);
      case kInvoiceTypeCash: tstr = USetStr(17251);
      case kInvoiceTypeCashInvoiceReceiptPRT: tstr = USetStr(17269);
      case kInvoiceTypeCredit: tstr = USetStr(17252);
      case kInvoiceTypeInterest: tstr = USetStr(17253);
      case kInvoiceTypeDebit: tstr = USetStr(17253);
      case kInvoiceTypeNormalSpecialSales: tstr = USetStr(17250);
      case kInvoiceTypeCreditSpecialSales: tstr = USetStr(17252);
    end;
    if (IsVATAssert(IVr)==true) then begin 
      switch (IVr.InvType) begin
        case kInvoiceTypeNormal: tstr = USetStr(17267);
        case kInvoiceTypeCredit: tstr = USetStr(17266);
        case kInvoiceTypeNormalSpecialSales: tstr = USetStr(17267);
        case kInvoiceTypeCreditSpecialSales: tstr = USetStr(17266);
      end;
    end; 
    switch (IVr.Status) begin
      case 4:
        tstr = USetStr(23355) & "-" & tstr & "M " & IVr.OfficialSerNr2;
      case 5:
        tstr = USetStr(23355) & "-" & tstr & "D " & tstr & " " & IVr.OfficialSerNr2;
      otherwise
        tstr = "";
    end;
    OUTFORMFIELD(F_SAFTCOPYOFORIGINALDOCUMENT,tstr);
  end;
  switch (IVr.InvType) begin
    case kInvoiceTypeCredit:
      PortugueseFormFields(23451);
    case kInvoiceTypeCashInvoiceReceiptPRT:
      if (HasLocalization("PRT")) then begin
        if (IVr.TransDate<=DateFromString("31.12.2012","DD.MM.YYYY")) then begin
          PortugueseFormFields(23452);
        end else begin
          PortugueseFormFields(23473);
        end;
      end else begin
        PortugueseFormFields(23452);
      end;
    case kInvoiceTypeCash:
      if (HasLocalization("PRT")) then begin
        if (IVr.TransDate<=DateFromString("31.12.2012","DD.MM.YYYY")) then begin
          PortugueseFormFields(23452);
        end else begin
          PortugueseFormFields(23463);
        end;
      end else begin
        PortugueseFormFields(23452);
      end;
    case kInvoiceTypeInterest:
      PortugueseFormFields(23453);
    case kInvoiceTypeDebit:
      PortugueseFormFields(23453);
    otherwise
      PortugueseFormFields(23450);
  end;
  if (nonblank(IVr.Reason)) then begin  
    OUTFORMFIELD("F_REASON",IVr.Reason);
    if (FIELDINFORM("F_REASONTEXT")) then begin
      SPr.Code = IVr.Reason;
      if (ReadFirstMain(SPr,1,true)) then begin 
        OUTFORMFIELD("F_REASONTEXT",SPr.Comment1);
        OUTFORMFIELD("F_REASONTEXT",SPr.Comment2);
        OUTFORMFIELD("F_REASONTEXT",SPr.Comment3);
      end;
    end;  
  end;  
  if (FIELDINFORM("F_GLOBALTRANSPORTNR")) then begin
    OUTFORMFIELD("F_GLOBALTRANSPORTNR",IVr.GlobalTransportNr);
  end;
  if (FIELDINFORM("F_GLOBALTRANSPORTDATE")) then begin
    OUTFORMFIELD("F_GLOBALTRANSPORTDATE",IVr.GlobalTransportDate);
  end;
  
  if (HasLocalization("BOL")) then begin
    td = FindTaxAuthIDLimitDateBOL(IVr);
    OUTFORMFIELD("F_LEGALLIMITDATEBOL",td);
    importvalb1 = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    importvalb2 = MulRateToBase2(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    importval = ValToString(IVr.Sum4,M4Val,"",".",0);
    impvalb1 = ValToString(importvalb1,M4Val,"",".",0);
    impvalb2 = ValToString(importvalb2,M4Val,"",".",0);
    
    VatNr = IVr.VATNr;
    if (blank(VatNr)) then begin
      VatNr = "0";
    end;
    
    Disc = totdiscount;
    if (totdiscount==0) then begin
      Disc = "0";
    end;
    
    GetLegalInvNrRow(IVr.OfficialSerNr,LINrbrw);
    MOOfficialSerNr = Right(IVr.OfficialSerNr,len(IVr.OfficialSerNr)-len(LINrbrw.Serie));
  
    OUTFORMFIELD("F_QRCODE",CYb.VATNr & "|" & MOOfficialSerNr  & "|" & IVr.TaxAuthID & "|" & IVr.TransDate & "|" & importval & "|" & importval & "|" & IVr.TaxAuthIDCC & "|" & VATNr & "|0|0|0|" & Disc);
    OUTFORMFIELD("F_QRCODEB1",CYb.VATNr & "|" & MOOfficialSerNr  & "|" & IVr.TaxAuthID & "|" & IVr.TransDate & "|" & impvalb1 & "|" & impvalb1 & "|" & IVr.TaxAuthIDCC & "|" & VATNr & "|0|0|0|" & Disc);
    OUTFORMFIELD("F_QRCODEB2",CYb.VATNr & "|" & MOOfficialSerNr  & "|" & IVr.TaxAuthID & "|" & IVr.TransDate & "|" & impvalb2 & "|" & impvalb2 & "|" & IVr.TaxAuthIDCC & "|" & VATNr & "|0|0|0|" & Disc);
  end;
    
  PrintLoyaltyCard(LangNrr,IVr.LoyaltyCardNr,IVr.LCMLevel,IVr.Points,PointsSpent,IVr.SerNr,"IVVc");

  OutFormImage(IVr);
  PrintFINREF(IVr,Docr);
  IVSetFax(CUr,IVr);
  PrintFreightInfo(IVr.FreightCode);
  DoInvFormCustomizedFields(IVr,Docr,SysFormatRec,RoundRec,LangNrr,negamountf);
  if (PreviewFlag==false) then begin
    transaction Boolean gIVCreateAndAttachPdf;
    queued.SetPrintedFlag_IVVc2(IVr.SerNr,gIVCreateAndAttachPdf==false);
  end;
LPrintInvoice:;  
  RETURN;
END;

