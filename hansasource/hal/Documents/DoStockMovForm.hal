external function string 255 GetOffSerNrIVJournalID(LongInt,string,string);
external procedure OutAddress(string,string,string,string,string,string,string);
external function string 255 SAFTHashControl(string);
external procedure GetFieldArgument(record DocVc,Integer,var string);
external procedure PrintNote(record NotepadVc);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure GetMonthText(string,Date,var string);
external procedure GetCurUser(var record UserVc);
external procedure ValToText(val,Integer,string,string,var string);
external function Boolean FindFormcode(Integer,Integer);
external procedure SetConversionFields(record INVc,val,var val,var val,var val);
external procedure PrintValue(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external procedure BC39(string,var string);
external procedure ItemBC39(string,var string);
external procedure ItemBCEAN(string,var string);
external procedure ItemBCEAN13(string,var string);
external procedure RussianPaymentNr(LongInt,var string);
external procedure CommonDocumentFields(record RcVc);
external function Boolean Getformcode(Integer,Integer,string,string,string,LongInt,LongInt,string,string,Integer,string,var string);
external function Integer NumberofDocumentPages(string,Integer);
external procedure GetLangNr(string,var record LangNrVc);
external procedure PrintCountryCode(string,string);
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external function string 255 OfficialNumberReformatFromSeries(string,string,string);

procedure StockMovPrintNote(record StockMovVc StockMovr,string argumentstr)
begin
  record NotepadVc Noter;
  record RLinkVc RLr;
  Integer notenr;

  notenr = 1;
  while (ReadRecordLink(StockMovr,notenr,Noter,RLr)) begin
    if ((argumentstr==RLr.Comment) or (blank(argumentstr))) then begin
      PrintNote(Noter);
      goto LStockMovPrintNote;
    end;
    notenr = notenr + 1;
  end;
LStockMovPrintNote:;  
  return;
end;

procedure PrintStockMovRows2(record RcVc RepSpec,record StockMovVc StockMovr,record LangNrVc LangNrr,record SysFormatBlock SysFormatRec,
                             record MainStockBlock MSb,var val totbasprice,var val totinprice,var val totprice,
                             var val totqty,var val totweight,var val totvolume,var val totordweight)
BEGIN
  record INVc INr;
  row StockMovVc StockMovrw;
  Integer i,rwcnt,rownr;
  val qtyconv1,qtyconv2,qtyconv3;
  string 255 tstr;
  
  totbasprice = blankval;
  totinprice = blankval;
  totprice = blankval;
  totqty = blankval;
  totweight = blankval;
  totvolume = blankval;
  totordweight = blankval;
  rwcnt = MatRowCnt(StockMovr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(StockMovr,i,StockMovrw);
    if (ReadFirstItem(StockMovrw.ArtCode,INr,true,true)) then begin end;
    SetConversionFields(INr,StockMovrw.Quant,qtyconv1,qtyconv2,qtyconv3);      
    OUTFORMFIELD("F_CONVERSION1",qtyconv1);
    OUTFORMFIELD("F_CONVERSION2",qtyconv2);
    OUTFORMFIELD("F_CONVERSION3",qtyconv3);
    PrintValue("F_CONVERSIONVAL1",INr.Conversion1,M4UVal,LangNrr,SysFormatRec,false);
    PrintValue("F_CONVERSIONVAL2",INr.Conversion2,M4UVal,LangNrr,SysFormatRec,false);
    OUTFORMFIELD("F_COMMODITYCODE",INr.EUCodex);
    OUTFORMFIELD("F_ALTERNATIVECODE",INr.AlternativeCode);
    OUTFORMFIELD("F_ENHET",INr.Unittext);
    OUTFORMFIELD("F_SHELFCODE",INr.InvCode);
    if (HasLocalization("PRT")==false) then begin
      PrintValue("F_BASPRIS",INr.UPrice1,M423Val,LangNrr,SysFormatRec,false);
    end;
    PrintValue("F_WIDTH",INr.Width,M4Qty,LangNrr,SysFormatRec,false);
    PrintValue("F_HEIGHT",INr.Height,M4Qty,LangNrr,SysFormatRec,false);
    PrintValue("F_DEPTH",INr.Depth,M4Qty,LangNrr,SysFormatRec,false);
    PrintValue("F_WEIGHT",INr.Weight,M4Qty,LangNrr,SysFormatRec,false);
    PrintValue("F_VOLUME",INr.Volume,M4Qty,LangNrr,SysFormatRec,false);
    PrintValue("F_ROWWEIGHT",StockMovrw.Quant*INr.Weight,M4Qty,LangNrr,SysFormatRec,false);
    totweight = totweight + StockMovrw.Quant*INr.Weight;
    PrintValue("F_ROWVOLUME",StockMovrw.Quant*INr.Volume,M4Qty,LangNrr,SysFormatRec,false);
    totvolume = totvolume + StockMovrw.Quant*INr.Volume;
    PrintValue("F_ORDROWWEIGHT",StockMovrw.OrdQuant*INr.Weight,M4Qty,LangNrr,SysFormatRec,false);
    totordweight = totordweight + StockMovrw.OrdQuant*INr.Weight;
    if (HasLocalization("PRT")==false) then begin
      PrintValue("F_SUMBASPRIS",StockMovrw.Quant*INr.UPrice1,M4Val,LangNrr,SysFormatRec,false);
      PrintValue("F_SUMFIFO",StockMovrw.FIFORowVal,M45Val,LangNrr,SysFormatRec,false);
    end;
    totbasprice = totbasprice + StockMovrw.Quant*INr.UPrice1;
    
    if (FIELDINFORM("F_ARTNRBC39")) then begin
      ItemBC39(StockMovrw.ArtCode,tstr);
      OUTFORMFIELD("F_ARTNRBC39",tstr);
    end;  
    if (FIELDINFORM("F_ARTNRBCEAN")) then begin
      ItemBCEAN(StockMovrw.ArtCode,tstr);
      OUTFORMFIELD("F_ARTNRBCEAN",tstr);
    end;  
    if (FIELDINFORM("F_ARTNRBCEAN13")) then begin
      ItemBCEAN13(StockMovrw.ArtCode,tstr);    
      OUTFORMFIELD("F_ARTNRBCEAN13",tstr);
    end;  
    if (FIELDINFORM("F_SERIENRBC39")) then begin
      BC39(StockMovrw.SerialNr,tstr);    
      OUTFORMFIELD("F_SERIENRBC39",tstr);
    end;  
    OUTFORMFIELD("F_ARTNR",StockMovrw.ArtCode);
    OUTFORMFIELD("F_ARTNR2",StockMovrw.ArtCode);
    OUTFORMFIELD("F_SERIENR",StockMovrw.SerialNr);
    OUTFORMFIELD("F_SPECIFIKATION",StockMovrw.Spec);
    PrintValue("F_ANTAL",StockMovrw.Quant,M4UVal,LangNrr,SysFormatRec,false);

    if (MSb.UnitConvCalc==0) then begin
      PrintValue("F_ANTAL2",StockMovrw.Quant*StockMovrw.Coefficient,M4UVal,LangNrr,SysFormatRec,false);
    end else begin
      PrintValue("F_ANTAL2",StockMovrw.Quant/StockMovrw.Coefficient,M4UVal,LangNrr,SysFormatRec,false);
    end;

    totqty = totqty + StockMovrw.Quant;
    if (HasLocalization("PRT")==false) then begin
      PrintValue("F_PRIS",StockMovrw.NewPrice,M45Val,LangNrr,SysFormatRec,false);
    end;
    totprice = totprice + StockMovrw.Quant*StockMovrw.NewPrice;
    if (HasLocalization("PRT")==false) then begin
      PrintValue("F_ROWPRICE",StockMovrw.BasePrice,M45Val,LangNrr,SysFormatRec,false);
      PrintValue("F_BELOPP",StockMovrw.Quant*StockMovrw.BasePrice,M45Val,LangNrr,SysFormatRec,false);
    end;
    totinprice = totinprice + StockMovrw.Quant*StockMovrw.BasePrice;
    if (HasLocalization("PRT")==false) then begin
      PrintValue("F_SUMPRIS",StockMovrw.Quant*StockMovrw.NewPrice,M45Val,LangNrr,SysFormatRec,false);
    end;
    PrintValue("F_ORDQTY",StockMovrw.OrdQuant,M4UVal,LangNrr,SysFormatRec,false);
    PrintValue("F_SENTQTY",StockMovrw.SentQuant,M4UVal,LangNrr,SysFormatRec,false);
    if (HasLocalization("PRT")==false) then begin
      PrintValue("F_SENTPRICE",StockMovrw.SentNewPrice,M45Val,LangNrr,SysFormatRec,false);
      PrintValue("F_SENTSUM",StockMovrw.SentQuant*StockMovrw.SentNewPrice,M4Val,LangNrr,SysFormatRec,false);
      PrintValue("F_SENTOLDPRICE",StockMovrw.SentOldPrice,M4Val,LangNrr,SysFormatRec,false);
    end;
    OUTFORMFIELD("F_FROMPOSITIONROW",StockMovrw.FrPosCode);
    OUTFORMFIELD("F_TOPOSITIONROW",StockMovrw.ToPosCode);
    if (HasLocalization("PRT")==false) then begin
      OUTFORMFIELD("F_SENTEXTRACOST",StockMovrw.SentExtraSCost);
      OUTFORMFIELD("F_EXTRAKOSTNAD",StockMovrw.ExtraSCost);
//      PrintValue("F_EXTRAKOSTNAD",StockMovrw.ExtraSCost,M4Val,LangNrr,SysFormatRec,false);
    end;
    if (nonblank(StockMovrw.ArtCode)) then begin
      rownr = rownr + 1;
      OUTFORMFIELD("F_ROWNR",rownr);      
    end;
    EndFormRow;
  end;
  RETURN;
END;

procedure PrintStockMovRows(record RcVc RepSpec,record StockMovVc StockMovr,record LangNrVc LangNrr,record SysFormatBlock SysFormatRec,
                            record MainStockBlock MSb,
                            var val totbasprice,var val totinprice,var val totprice,var val totqty,var val totweight,var val totvolume)
begin
  val totordweight;
  
  PrintStockMovRows2(RepSpec,StockMovr,LangNrr,SysFormatRec,MSb,totbasprice,totinprice,totprice,totqty,totweight,totvolume,totordweight);
end;

global
procedure DoStockMovForm(record RcVc RepSpec,record StockMovVc StockMovr)
BEGIN
  record UserVc Userr;
  record FormDefVc FDr;
  row FormDefVc FDrw;
  record SysFormatBlock SysFormatRec;
  record LangNrVc LangNrr;
  Integer i,rwcnt;
  record LocationVc FromLocr;
  record LocationVc ToLocr;
  record LocationVc ViaLocr;
  record MainStockBlock MainStockRec;
  val totbasprice,totinprice,totprice,totqty,totweight,totvolume,totordweight;
  string 255 tstr;
  Integer OKFlag;
  record StockMovVc realStockMovr;
  record DocVc Docr;
  Boolean printf;
  Integer intdocnr;
  string 30 formcode;
  record StandProblemVc SPr;
  record ModuleBlock MBr;
  record CUVc CUr;
  record ORVc ORr;
  record eShipTaxAuthReplyVc eSTARr;
  row LegalInvNrBlock LINrbrw;
    
  realStockMovr.SerNr = StockMovr.SerNr;
  if (ReadFirstMain(realStockMovr,1,true)) then begin end;//for some reason we change OKFlag status in ivdclassprint
  BlockLoad(MainStockRec);
  BlockLoad(SysFormatRec);  
  BlockLoad(MBr);  
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto L99;
  end;
  rwcnt = MatRowCnt(FDr);
  GetLangNr("",LangNrr);
  OKFlag = realStockMovr.OKFlag;
  if (OKFlag==0) then begin
//    OKFlag = realStockMovr.OrdFlag;
  end;
  if (OKFlag==0) then begin
    OKFlag = realStockMovr.SentOKFlag;
  end;
  intdocnr = 1;
  printf = true;
  while (printf) begin  
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (FindFormcode(OKFlag,FDrw.Typ)) then begin 
        if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,StockMovr.SerNr,FDrw.PrintGroupCode,
                        "",intdocnr,"StockMovVc",formcode)) then
        begin
          goto LBREAKStockMov;
        end;
      end;
    end;
LBREAKStockMov:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin
        CommonDocumentFields(RepSpec);
        NumberofDocumentPages(FDrw.FPCode,MatRowCnt(StockMovr));
//        OUTFORMFIELD("F_DOCTYPE",USetStr(23459));        
        OUTFORMFIELD("F_DOCTYPE",StringFromSet(564,StockMovr.StockMovType));        
        Docr.Code = formcode;
        if (ReadFirstMain(Docr,1,true)) then begin
        end;
        if (FIELDINFORM("F_RUSPAYNR")) then begin
          RussianPaymentNr(StockMovr.SerNr,tstr);
          OUTFORMFIELD("F_RUSPAYNR",tstr);
        end;  
        if (blank(StockMovr.FrLocation)) then begin
          FromLocr.Code = MainStockRec.MainStock;
        end else begin
          FromLocr.Code = StockMovr.FrLocation;
        end;
        if (blank(StockMovr.ToLocation)) then begin
          ToLocr.Code = MainStockRec.MainStock;
        end else begin
          ToLocr.Code = StockMovr.ToLocation;
        end;
        if (ReadFirstMain(FromLocr,1,true)) then begin end;
        if (ReadFirstMain(ToLocr,1,true)) then begin end;
        if nonblank(StockMovr.ThrouLocation) then begin
          ViaLocr.Code = StockMovr.ThrouLocation;
          if (ReadFirstMain(ViaLocr,1,true)) then begin end;
          OUTFORMFIELD("F_VIALOCATION",StockMovr.ThrouLocation);
          OUTFORMFIELD("F_VIANAME",ViaLocr.Name);
          OUTFORMFIELD("F_VIAPHONE",ViaLocr.Phone);
          OUTFORMFIELD("F_VIAFAX",ViaLocr.Fax);
          OUTFORMFIELD("F_VIACONTACT",ViaLocr.Contact);
          OUTFORMFIELD("F_VIAEMAIL",ViaLocr.Email);  
          OutAddress("F_VIAADRESS",ViaLocr.Addr0,ViaLocr.Addr1,ViaLocr.Addr2,ViaLocr.Addr3,ViaLocr.Addr4,"");
        end;  
        OUTFORMFIELD("F_LEVDATUM",StockMovr.TransDate);
        OUTFORMFIELD("F_PLANSENTTIME",StockMovr.PlanSendTime);
        OUTFORMFIELD("F_PLANSENTDATE",StockMovr.PlanSendDate);
        OUTFORMFIELD("F_LEVNUMMER",StockMovr.SerNr);
        OUTFORMFIELD("F_COMMENT",StockMovr.Comment);
        OUTFORMFIELD("F_FROMLOCATION",StockMovr.FrLocation);
        OUTFORMFIELD("F_TOLOCATION",StockMovr.ToLocation);
        
        OUTFORMFIELD("F_FROMNAME",FromLocr.Name);
        OUTFORMFIELD("F_FROMPHONE",FromLocr.Phone);
        OUTFORMFIELD("F_FROMFAX",FromLocr.Fax);
        OUTFORMFIELD("F_FROMCONTACT",FromLocr.Contact);
        OutAddress("F_FROMADRESS",FromLocr.Addr0,FromLocr.Addr1,FromLocr.Addr2,FromLocr.Addr3,FromLocr.Addr4,"");
        OUTFORMFIELD("F_TONAME",ToLocr.Name);
        OUTFORMFIELD("F_TOPHONE",ToLocr.Phone);
        OUTFORMFIELD("F_TOFAX",ToLocr.Fax);
        OUTFORMFIELD("F_TOCONTACT",ToLocr.Contact);
        OutAddress("F_TOADRESS",ToLocr.Addr0,ToLocr.Addr1,ToLocr.Addr2,ToLocr.Addr3,ToLocr.Addr4,"");
        OUTFORMFIELD("F_FREIGHTCOMPCODE",StockMovr.FreightCode);
        OUTFORMFIELD("F_FREIGHTCOMP",StockMovr.FreightCompany); 
        OUTFORMFIELD("F_FREIGHTCOMPREGNO",StockMovr.FreightCompanyRegNr);
        OUTFORMFIELD("F_TRUCKINFO",StockMovr.TruckInfo); 
        OUTFORMFIELD("F_DRIVER",StockMovr.Driver); 
        OUTFORMFIELD("F_CMRTEXT",StockMovr.CMRText);
        OUTFORMFIELD("F_REASON",StockMovr.Reason);
        OutAddress("F_POSTADRESS",StockMovr.FrAddr0,StockMovr.FrAddr1,StockMovr.FrAddr2,StockMovr.FrAddr3,StockMovr.FrAddr4,"");
        OutAddress("F_ORDLEVADRESS",StockMovr.ThrouAddr0,StockMovr.ThrouAddr1,StockMovr.ThrouAddr2,StockMovr.ThrouAddr3,StockMovr.ThrouAddr4,"");
        OutAddress("F_LEVADRESS",StockMovr.ToAddr0,StockMovr.ToAddr1,StockMovr.ToAddr2,StockMovr.ToAddr3,StockMovr.ToAddr4,"");
        if (FIELDINFORM("F_REASONTEXT")) then begin
          SPr.Code = StockMovr.Reason;
          if (ReadFirstMain(SPr,1,true)) then begin end;
          OUTFORMFIELD("F_REASONTEXT",SPr.Comment1);
          OUTFORMFIELD("F_REASONTEXT",SPr.Comment2);
          OUTFORMFIELD("F_REASONTEXT",SPr.Comment3);
        end;  
        if (FIELDINFORM("F_NOTE")) then begin
          GetFieldArgument(Docr,F_NOTE,tstr);
          StockMovPrintNote(StockMovr,tstr);
        end;
        PrintStockMovRows2(RepSpec,StockMovr,LangNrr,SysFormatRec,MainStockRec,totbasprice,totinprice,totprice,totqty,totweight,totvolume,totordweight);
        if (HasLocalization("PRT")==false) then begin
          PrintValue("F_TOTALINPRICE",totinprice,M45Val,LangNrr,SysFormatRec,false);
          PrintValue("F_TOTBASPRIS",totbasprice,M45Val,LangNrr,SysFormatRec,false);
          PrintValue("F_TOTPRIS",totprice,M45Val,LangNrr,SysFormatRec,false);
        end;
        PrintValue("F_TOTQTY",totqty,M45Val,LangNrr,SysFormatRec,false);
        PrintValue("F_TOTVOLUME",totvolume,M4Qty,LangNrr,SysFormatRec,false);
        PrintValue("F_TOTWEIGHT",totweight,M4Qty,LangNrr,SysFormatRec,false);
        PrintValue("F_ORDTOTWEIGHT",totordweight,M4Qty,LangNrr,SysFormatRec,false);
        OUTFORMFIELD("F_FROMPOSITION",StockMovr.FrPos);
        OUTFORMFIELD("F_TOPOSITION",StockMovr.ToPos);
        OUTFORMFIELD("F_SENTTRANSDATE",StockMovr.SentTransDate);
        OUTFORMFIELD("F_DATEDAY",GetDay(StockMovr.TransDate));  
        OUTFORMFIELD("F_DATEMONTH",GetMonth(StockMovr.TransDate));  
        GetMonthText("",StockMovr.TransDate,tstr);
        OUTFORMFIELD("F_DATEMONTHTEXT",tstr);  
        OUTFORMFIELD("F_DATEYEAR",GetYear(StockMovr.TransDate));  
        GetCurUser(Userr);
        OUTFORMFIELD("F_PERSON",Userr.Name);
        if (FIELDINFORM("F_ATTBETALATEXT")) then begin//jzs
          ValToText(totprice,M4Val,StockMovr.CurncyCode,"",tstr);
          OUTFORMFIELD("F_ATTBETALATEXT",tstr);        
        end;            
        OUTFORMFIELD("F_SAFTHASHCONTROL",SAFTHashControl(StockMovr.Hash));
        if (HasLocalization("PRT")) then begin
          GetLegalInvNrRow(StockMovr.OfficialSerNr,LINrbrw);
          switch (StockMovr.StockMovType) begin
            case kStockMovTypeNormal:
              OUTFORMFIELD("F_OFFICIALSERNO","MOVST" & " " & OfficialNumberReformatFromSeries(StockMovr.OfficialSerNr,StockMovr.OfficialSerNrSerie,"/"));        
            case kStockMovTypeOwnGoodsTransport:
              OUTFORMFIELD("F_OFFICIALSERNO","MOVGA" & " " & OfficialNumberReformatFromSeries(StockMovr.OfficialSerNr,StockMovr.OfficialSerNrSerie,"/"));        
            case kStockMovTypeConsigment:
              OUTFORMFIELD("F_OFFICIALSERNO","MOVGC" & " " & OfficialNumberReformatFromSeries(StockMovr.OfficialSerNr,StockMovr.OfficialSerNrSerie,"/"));        
            case kStockMovTypeThirdEntGoodsTransport:
              OUTFORMFIELD("F_OFFICIALSERNO","MOVGT" & " " & OfficialNumberReformatFromSeries(StockMovr.OfficialSerNr,StockMovr.OfficialSerNrSerie,"/"));        
            case kStockMovTypeGlobalTransport:
              OUTFORMFIELD("F_OFFICIALSERNO","MOVGL" & " " & OfficialNumberReformatFromSeries(StockMovr.OfficialSerNr,StockMovr.OfficialSerNrSerie,"/"));        
          end;
        end else begin
          OUTFORMFIELD("F_OFFICIALSERNO",StockMovr.OfficialSerNr);
        end;
        if (StockMovr.Prntdf==0) then begin
          OUTFORMFIELD("F_COPYTYPE",USetStr(18630));
        end else begin
          OUTFORMFIELD("F_COPYTYPE",USetStr(18631));
        end;
        OUTFORMFIELD("F_TYPE",StringFromSet(564,StockMovr.StockMovType));
        if (StockMovr.OrderNr>0) then begin
          OUTFORMFIELD("F_ORDERNUMMER",StockMovr.OrderNr);
          ORr.SerNr = StockMovr.OrderNr;
          ReadFirstMain(ORr,1,true);
          CUr.Code = ORr.CustCode;
          ReadFirstMain(CUr,1,true);
          OUTFORMFIELD("F_KUNDNAMN",ORr.Addr0);
          OUTFORMFIELD("F_KUNDMOMSNR",ORr.VATNr); 
          PrintCountryCode("F_CUCOUNTRYCODE",CUr.CountryCode);     
          if (HasLocalization("PRT")) then begin    
            if (CUr.CustType==1) then begin
              OUTFORMFIELD("F_CUSTTYPE",USetStr(23361));
            end;
          end;
          OutAddress("F_INLEVADRESS",ORr.ShipAddr0,ORr.ShipAddr1,ORr.ShipAddr2,ORr.ShipAddr3,ORr.DelAddr3,ORr.DelAddr4);
        end;
        if (HasLocalization("PRT")) then begin    
          eSTARr.FileName = "StockMovVc";
          eSTARr.TransNr = StockMovr.SerNr;
          ReadLastKey("FNTransNr",eSTARr,2,true);
          OUTFORMFIELD("F_ATDocCodeID",eSTARr.TaxAdminServSeal);
        end;
        if ((StockMovr.OKFlag!=0) or (StockMovr.SentOKFlag!=0)) then begin
          if (StockMovr.Prntdf!=0) then begin
            if (MBr.NoTestprintEnabler==0) then begin
              FormWaterMark(1118,-1);
            end;
          end;
        end;
        CloseForm;
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
L99:;
  RETURN;
END;
