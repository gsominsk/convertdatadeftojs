external function Integer VATCalcRule(string);
external function Boolean UseTaxTemplatesforTaxCalc();
external procedure GetVATRowFromBlock(string,record VATCodeBlock,var row VATCodeBlock);
external function val FindVAT(string,val,Integer,Integer);
external function roundmode GetVATRoundModeRB();
external function roundmode GetVATRoundMode(record RoundBlock);
external function roundmode GetTotalRoundMode(record RoundBlock);
external function roundmode GetVATRoundMode(record RoundBlock);
external function roundmode DefaultRoundMode();
external procedure GetVATText(string,var string);
external function Boolean GetVAT2(string,var val,var Integer,Integer);
external function Boolean GetVATincl(string,var val,var Integer);
external procedure GetVATproc(string,Integer,var val);
external function Integer ITType(string);
external procedure GetFieldArgument(record DocVc,Integer,var string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external procedure PrintValue(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external procedure PrintValueInclZero(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external procedure CashDiscVAT(val,val,record RoundBlock,var val);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure PrintInvoice(record RcVc,record IVVc,string,string);
external function Boolean Getformcode(Integer,Integer,string,string,string,LongInt,LongInt,string,string,Integer,string,var string);
external function Boolean FindFormcode(Integer,Integer);
external function Boolean GetPM(string,var string,var string);

procedure PrintTaxMatrix_IVVc(record IVVc IVr,record DocVc Docr,record LangNrVc LangNrr,record SysFormatBlock SFb,Boolean negamountf)
begin
  record TaxMatrixVc TMr;
  row TaxMatrixVc TMrw;
  Integer i,rwcnt;
  row VATCodeBlock VATCbrw;
  record VATCodeBlock VATCodeb;
  val t;
  Integer valtyp;
  string 255 tstr;

  BlockLoad(VATCodeb);
  UnpackFieldMatrix(IVr,"TaxMatrix",TMr);
  rwcnt = MatRowCnt(TMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TMr,i,TMrw);
    GetVATRowFromBlock(TMrw.VATCode,VATCodeb,VATCbrw);
    OUTFORMFIELD("F_MOMSKODTOTAL",TMrw.VATCode);    
    OUTFORMFIELD("F_VATCOMMENT",VATCbrw.Comment);

//    GetVATproc(TMrw.VATCode,0,t);
    PrintValueInclZero("F_VATEXCLPRC",TMrw.VATRate,M4Val,LangNrr,SFb,negamountf);    

    if (FIELDINFORM("F_VATBASE")) then begin
      valtyp = M4Val;
      GetFieldArgument(Docr,F_VATBASE,tstr);
      if (tstr=="-") then begin
        valtyp = M4NegVal;
      end;
      PrintValueInclZero("F_VATBASE",TMrw.BaseSum,valtyp,LangNrr,SFb,negamountf);
    end;    
    if (FIELDINFORM("F_VATVAL")) then begin
      valtyp = M4Val;
      GetFieldArgument(Docr,F_VATVAL,tstr);
      if (tstr=="-") then begin
        valtyp = M4NegVal;
      end;
      PrintValueInclZero("F_VATVAL",TMrw.VATSum,valtyp,LangNrr,SFb,negamountf);
    end;

/*
  ArrayField(CalcBase,M4Set,453,0);
*/    
  end;
  return;
end;

procedure CalculatePayModesAmounts(record IVVc IVr,var vector val vpaymodes,var vector string ivpaymode)
begin
  Integer i,rwcnt;
  row IVVc IVrw;

  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    switch (IVrw.stp) begin
      case kInvoiceRowTypeCashPayment:
        vpaymodes[kInvoiceRowTypeCashPayment] = vpaymodes[kInvoiceRowTypeCashPayment] + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
        ivpaymode[kInvoiceRowTypeCashPayment] = IVrw.PayMode;
      case kInvoiceRowTypeCreditCardPayment:
        vpaymodes[kInvoiceRowTypeCreditCardPayment] = vpaymodes[kInvoiceRowTypeCreditCardPayment] + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
        ivpaymode[kInvoiceRowTypeCreditCardPayment] = IVrw.PayMode;
      case kInvoiceRowTypeChequePayment:
        vpaymodes[kInvoiceRowTypeChequePayment] = vpaymodes[kInvoiceRowTypeChequePayment] + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
        ivpaymode[kInvoiceRowTypeCreditCardPayment] = IVrw.PayMode;
      case kInvoiceRowTypeGiftVoucherPayment:
        vpaymodes[kInvoiceRowTypeGiftVoucherPayment] = vpaymodes[kInvoiceRowTypeGiftVoucherPayment] + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
        ivpaymode[kInvoiceRowTypeGiftVoucherPayment] = IVrw.PayMode;
      case kInvoiceRowTypeLoyaltyPointsPayment:
        vpaymodes[kInvoiceRowTypeLoyaltyPointsPayment] = vpaymodes[kInvoiceRowTypeLoyaltyPointsPayment] + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
        ivpaymode[kInvoiceRowTypeLoyaltyPointsPayment] = IVrw.PayMode;
    end;
  end;
  return;
end;

procedure PrintPayModes(vector val vpaymodes,vector string ivpaymode,record SysFormatBlock SysFormatRec,record LangNrVc LangNrr)
begin
  string 100 accstr,tstr;
  
  if (nonblank(vpaymodes[kInvoiceRowTypeCashPayment])) then begin
    GetPM(ivpaymode[kInvoiceRowTypeCashPayment],accstr,tstr);  
    OUTFORMFIELD("F_PAYMODESUMTEXT",tstr);
    tstr = ValToString(vpaymodes[kInvoiceRowTypeCashPayment],M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
    OUTFORMFIELD("F_PAYMODESUMAMOUNT",tstr);
  end;
  if (nonblank(vpaymodes[kInvoiceRowTypeCreditCardPayment])) then begin
    GetPM(ivpaymode[kInvoiceRowTypeCreditCardPayment],accstr,tstr);  
    OUTFORMFIELD("F_PAYMODESUMTEXT",tstr);
    tstr = ValToString(vpaymodes[kInvoiceRowTypeCreditCardPayment],M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
    OUTFORMFIELD("F_PAYMODESUMAMOUNT",tstr);
  end;
  if (nonblank(vpaymodes[kInvoiceRowTypeChequePayment])) then begin
    GetPM(ivpaymode[kInvoiceRowTypeChequePayment],accstr,tstr);  
    OUTFORMFIELD("F_PAYMODESUMTEXT",tstr);
    tstr = ValToString(vpaymodes[kInvoiceRowTypeChequePayment],M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
    OUTFORMFIELD("F_PAYMODESUMAMOUNT",tstr);
  end;
  if (nonblank(vpaymodes[kInvoiceRowTypeGiftVoucherPayment])) then begin
    GetPM(ivpaymode[kInvoiceRowTypeGiftVoucherPayment],accstr,tstr);  
    OUTFORMFIELD("F_PAYMODESUMTEXT",tstr);
    tstr = ValToString(vpaymodes[kInvoiceRowTypeGiftVoucherPayment],M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
    OUTFORMFIELD("F_PAYMODESUMAMOUNT",tstr);
  end;
  if (nonblank(vpaymodes[kInvoiceRowTypeLoyaltyPointsPayment])) then begin
    GetPM(ivpaymode[kInvoiceRowTypeLoyaltyPointsPayment],accstr,tstr);  
    OUTFORMFIELD("F_PAYMODESUMTEXT",tstr);
    tstr = ValToString(vpaymodes[kInvoiceRowTypeLoyaltyPointsPayment],M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
    OUTFORMFIELD("F_PAYMODESUMAMOUNT",tstr);
  end;
  return;
end;

global
procedure CalcIVTotals(record IVVc IVr,record DocVc Docr,record RoundBlock RoundRec,record LangNrVc LangNrr,record SysFormatBlock SysFormatRec)
BEGIN
  row IVVc IVrw;
  Integer i,rwcnt,vatcnt;
  record SMVc VATr;
  row SMVc VATrw;
  record SMVc VATWDr;
  row SMVc VATWDrw;
  record SMVc VATSkipCalcr;
  row SMVc VATSCrw;
  val vatv,t1,t,v;
  val vatval,vatbase,vattot,cdiscvat;
  val totreb,totdisc;
  val totcost,totsubtotwdisc,totvatval,totvatbase,totrowtot,totskipcalcvatval;
  string 255 tstr;
  string 255 str;
  Integer valtyp;
  val totgoods,tottrans,totpack,totdiscnopack;
  Integer rn;
  val vatexclprc,vatinclprc;
  val totgcr,totcc,totcash;
  record AccBlock ARAccRec;
  Boolean negamountf,UseTaxTemplatesforTaxCalcf;
  record CUVc CUr;
  vector val vpaymodes;
  vector string 10 ivpaymode;

  BlockLoad(ARAccRec);
  UseTaxTemplatesforTaxCalcf = UseTaxTemplatesforTaxCalc;
  CUr.Code = IVr.CustCode;
  ReadFirstMain(CUr,1,true);
  negamountf = (ARAccRec.PrintNegAmountsCredNote!=0 and (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales));
  RecordClear(VATr);
  RecordClear(VATWDr);
  SetupVATBase(VATr,vatcnt);          
  SetupVATBase(VATWDr,vatcnt);          
  SetupVATBase(VATSkipCalcr,vatcnt);          
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.ovst==0) and ((IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeInterest)) then begin      
/*    
    if ((IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeInterest) or (IVrw.stp==kInvoiceRowTypeVoid)) then begin      
      if (IVrw.stp==kInvoiceRowTypeVoid) then begin
        IVrw.Quant = -IVrw.Quant;
        IVrw.Sum = -IVrw.Sum;
      end;
*/      
      switch (ITType(IVrw.ArtCode)) begin
        case 0: 
          totgoods = totgoods + IVrw.Sum;
          totdiscnopack = totdiscnopack + (IVrw.Quant*IVrw.Price - IVrw.Sum);
        case 1: 
          tottrans = tottrans + IVrw.Sum;
          totdiscnopack = totdiscnopack + (IVrw.Quant*IVrw.Price - IVrw.Sum);
        case 2: totpack = totpack + IVrw.Sum;
      end;
      totsubtotwdisc = totsubtotwdisc + IVrw.Quant*IVrw.Price;
      totcost = totcost + IVrw.Quant*IVrw.BasePrice;
      totreb = totreb + (IVrw.Quant*IVrw.Price - IVrw.Sum);
      if (VATCalcRule(IVrw.VATCode)!=kVATCalcRuleSkip) then begin
        if (nonblank(IVrw.RvrsVATCode)) then begin
          AddVATBase(VATr,IVrw.RvrsVATCode,IVrw.Sum,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);      
          AddVATBase(VATWDr,IVrw.RvrsVATCode,IVrw.Sum,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);
        end else begin
          AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);      
          AddVATBase(VATWDr,IVrw.VATCode,IVrw.Sum,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);
        end;
      end else begin
        if (nonblank(IVrw.RvrsVATCode)) then begin
          AddVATBase(VATSkipCalcr,IVrw.RvrsVATCode,IVrw.Sum,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);      
        end else begin
          AddVATBase(VATSkipCalcr,IVrw.VATCode,IVrw.Sum,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);      
        end;
      end;
      if (IVrw.vRebate!=0) then begin
        if (IVrw.stp==kInvoiceRowTypeVoid) then begin
          totdisc = totdisc - (IVrw.Quant*IVrw.Price - IVrw.Sum);        
        end else begin
          totdisc = totdisc + (IVrw.Quant*IVrw.Price - IVrw.Sum);        
        end;
      end;
    end;      
    switch (IVrw.stp) begin
      case kInvoiceRowTypeDownpayment:
        AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);
      case kInvoiceRowTypeGiftVoucherPayment:
        totgcr = totgcr + IVrw.Sum;
      case kInvoiceRowTypeCashPayment:
        totcash = totcash + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
      case kInvoiceRowTypeLoyaltyPointsPayment:
        totcash = totcash + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
      case kInvoiceRowTypeChequePayment:
        totcash = totcash + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
      case kInvoiceRowTypeCreditCardPayment:
        totcc = totcc + IVrw.Sum;
      case kInvoiceRowTypeCorrection:
        totsubtotwdisc = totsubtotwdisc - IVrw.Quant*IVrw.Price;
        totcost = totcost - IVrw.Quant*IVrw.BasePrice;
        if (VATCalcRule(IVrw.VATCode)!=kVATCalcRuleSkip) then begin
          AddVATBase(VATr,IVrw.VATCode,-IVrw.Sum,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);
          AddVATBase(VATWDr,IVrw.VATCode,-IVrw.Sum,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);
        end else begin
          AddVATBase(VATSkipCalcr,IVrw.VATCode,IVrw.Sum,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);      
        end;
    end;
  end;
  AddVATBase(VATr,IVr.FrVATCode,IVr.FrPrice,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);
  AddVATBase(VATWDr,IVr.FrVATCode,IVr.FrPrice,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);

  if (UseTaxTemplatesforTaxCalcf==false) then begin
  for (i=0;i<vatcnt;i=i+1) begin
    MatRowGet(VATr,i,VATrw);    
    MatRowGet(VATWDr,i,VATWDrw);    
    MatRowGet(VATSkipCalcr,i,VATSCrw);    
    switch (RoundRec.VATCalcWay) begin
      case 0:
        MulVATIV(VATrw.VATCode,VATrw.DebVal,vatv,t1,IVr.InclVAT,IVr.NoTAXonVAT);
      case 1:
        vatv = VATrw.CredVal2;
        t1 = VATrw.CurCredVal;
    end;
    if (vatv!=0) or (nonblank(VATrw.DebVal)) then begin
    vatval = Round(vatv,GetVATRoundModeRB);
    totvatval = totvatval + vatval;
    totvatbase = totvatbase + VATrw.DebVal;
    totrowtot = totrowtot + VATrw.DebVal;    
    if (IVr.InclVAT>0) then begin
      totvatbase = totvatbase - vatval;
      vatbase = VATrw.DebVal - vatval;
      vattot = VATrw.DebVal;
    end else begin
      totrowtot = totrowtot + vatval;
      vatbase = VATrw.DebVal;
      vattot = VATrw.DebVal + vatval;
    end;
    CashDiscVAT(vatval,IVr.pdvrebt,RoundRec,cdiscvat);
    OUTFORMFIELD("F_MOMSKODTOTAL",VATrw.VATCode);    
    if (FIELDINFORM("F_VATBASE")) then begin
      valtyp = M4Val;
      GetFieldArgument(Docr,F_VATBASE,tstr);
      if (tstr=="-") then begin
        valtyp = M4NegVal;
      end;
      PrintValueInclZero("F_VATBASE",vatbase,valtyp,LangNrr,SysFormatRec,negamountf);
    end;    
    if (FIELDINFORM("F_VATBASEWITHOUTDOWNPAY")) then begin
      valtyp = M4Val;
      GetFieldArgument(Docr,F_VATBASEWITHOUTDOWNPAY,tstr);
      if (tstr=="-") then begin
        valtyp = M4NegVal;
      end;
      PrintValueInclZero("F_VATBASEWITHOUTDOWNPAY",VATWDrw.DebVal,valtyp,LangNrr,SysFormatRec,negamountf);
    end;    
    PrintValueInclZero("F_SUMMAMEDMOMS",VATrw.DebVal,valtyp,LangNrr,SysFormatRec,negamountf);
    if (FIELDINFORM("F_VATVAL")) then begin
      valtyp = M4Val;
      GetFieldArgument(Docr,F_VATVAL,tstr);
      if (tstr=="-") then begin
        valtyp = M4NegVal;
      end;
//      PrintValue("F_VATVAL",vatval,valtyp,LangNrr,SysFormatRec,negamountf);
      PrintValueInclZero("F_VATVAL",vatval,valtyp,LangNrr,SysFormatRec,negamountf);
    end;
    if (FIELDINFORM("F_VATVALWITHOUTDOWNPAY")) then begin
      MulVATIV(VATrw.VATCode,VATWDrw.DebVal,vatv,t1,IVr.InclVAT,IVr.NoTAXonVAT);
      valtyp = M4Val;
      GetFieldArgument(Docr,F_VATVALWITHOUTDOWNPAY,tstr);
      if (tstr=="-") then begin
        valtyp = M4NegVal;
      end;
      PrintValueInclZero("F_VATVALWITHOUTDOWNPAY",vatv,valtyp,LangNrr,SysFormatRec,negamountf);
    end;
    if (FIELDINFORM("F_VATTOT")) then begin
      valtyp = M4Val;
      GetFieldArgument(Docr,F_VATTOT,tstr);
      if (tstr=="-") then begin
        valtyp = M4NegVal;
      end;
      PrintValueInclZero("F_VATTOT",vattot,valtyp,LangNrr,SysFormatRec,negamountf);
    end;
    if (FIELDINFORM("F_SECCOMMISSION")) then begin
      valtyp = M4Val;
      GetFieldArgument(Docr,F_SECCOMMISSION,tstr);
      if (tstr=="-") then begin
        valtyp = M4NegVal;
      end;
      PrintValue("F_SECCOMMISSION",cdiscvat,valtyp,LangNrr,SysFormatRec,negamountf);
    end;
    if (nonblank(vatval)) then begin
    if (FIELDINFORM("F_BASE1VATVAL")) then begin
      t = MulRateToBase1(IVr.CurncyCode,vatval,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,GetVATRoundMode(RoundRec));
      valtyp = M4Val;
      GetFieldArgument(Docr,F_BASE1VATVAL,tstr);
      if (tstr=="-") then begin
        valtyp = M4NegVal;
      end;
      PrintValueInclZero("F_BASE1VATVAL",Round(t,GetVATRoundMode(RoundRec)),valtyp,LangNrr,SysFormatRec,negamountf);
    end;
    if (FIELDINFORM("F_BASE2VATVAL")) then begin
      t = MulRateToBase2(IVr.CurncyCode,vatval,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,GetVATRoundMode(RoundRec));
      valtyp = M4Val;
      GetFieldArgument(Docr,F_BASE2VATVAL,tstr);
      if (tstr=="-") then begin
        valtyp = M4NegVal;
      end;
      PrintValueInclZero("F_BASE2VATVAL",Round(t,GetVATRoundMode(RoundRec)),valtyp,LangNrr,SysFormatRec,negamountf);
    end;    
    end;
    if (nonblank(vatbase)) then begin
    if (FIELDINFORM("F_BASE1VATBASE")) then begin
      t = MulRateToBase1(IVr.CurncyCode,vatbase,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,GetVATRoundMode(RoundRec));
      valtyp = M4Val;
      GetFieldArgument(Docr,F_BASE1VATBASE,tstr);
      if (tstr=="-") then begin
        valtyp = M4NegVal;
      end;
      PrintValueInclZero("F_BASE1VATBASE",Round(t,GetVATRoundMode(RoundRec)),valtyp,LangNrr,SysFormatRec,negamountf);
    end;
    if (FIELDINFORM("F_BASE2VATBASE")) then begin
      t = MulRateToBase2(IVr.CurncyCode,vatbase,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,GetVATRoundMode(RoundRec));
      valtyp = M4Val;
      GetFieldArgument(Docr,F_BASE2VATBASE,tstr);
      if (tstr=="-") then begin
        valtyp = M4NegVal;
      end;
      PrintValueInclZero("F_BASE2VATBASE",Round(t,GetVATRoundMode(RoundRec)),valtyp,LangNrr,SysFormatRec,negamountf);
    end;
    end;
    if (nonblank(vattot)) then begin
    if (FIELDINFORM("F_BASE1VATTOT")) then begin
      t = MulRateToBase1(IVr.CurncyCode,vattot,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,GetVATRoundMode(RoundRec));
      valtyp = M4Val;
      GetFieldArgument(Docr,F_BASE1VATTOT,tstr);
      if (tstr=="-") then begin
        valtyp = M4NegVal;
      end;
      PrintValueInclZero("F_BASE1VATTOT",Round(t,GetVATRoundMode(RoundRec)),valtyp,LangNrr,SysFormatRec,negamountf);
    end;
    if (FIELDINFORM("F_BASE2VATTOT")) then begin
      t = MulRateToBase2(IVr.CurncyCode,vattot,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,GetVATRoundMode(RoundRec));
      valtyp = M4Val;
      GetFieldArgument(Docr,F_BASE2VATTOT,tstr);
      if (tstr=="-") then begin
        valtyp = M4NegVal;
      end;
      PrintValueInclZero("F_BASE2VATTOT",Round(t,GetVATRoundMode(RoundRec)),valtyp,LangNrr,SysFormatRec,negamountf);
    end;    
    end;
    GetVATproc(VATrw.VATCode,0,t);
    PrintValue("F_VATEXCLPRC",t,M4Val,LangNrr,SysFormatRec,negamountf);    
    if (HasLocalization("POL")) then begin//vatPolish
      tstr = "";
      if (GetVAT2(VATrw.VATCode,vatexclprc,rn,0)) then begin
      end;
      if (GetVATincl(VATrw.VATCode,vatinclprc,rn)) then begin
      end;
      if (nonblank(vatbase)) then begin
        if (nonblank(vatinclprc)) then begin
          if ((vatinclprc==0) and (nonblank(vatexclprc))) then begin
            tstr = USetStr(8111);
          end;
        end;
        if ((vatinclprc==0) and (nonblank(vatinclprc))) then begin
          if (blank(vatexclprc)) then begin
            tstr = USetStr(8110);
          end;
        end;
      end;
      if (blank(tstr)) then begin
        tstr = ValToString(vatexclprc,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
      end;
      if (blank(tstr)) then begin
        tstr = USetStr(1244);
      end;
      OUTFORMFIELD("F_VATPRC",tstr);    
    end else begin
      tstr = ValToString(t,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
      if (blank(tstr)) then begin
        tstr = USetStr(1244);
      end;
      OUTFORMFIELD("F_VATPRC",tstr);
    end;
    GetVATText(VATrw.VATCode,str);
    OUTFORMFIELD("F_VATCOMMENT",str);
    end;
    if (VATCalcRule(VATrw.VATCode)==kVATCalcRuleSkip) then begin
      switch (RoundRec.VATCalcWay) begin
        case 0:
          MulVATIV(VATSCrw.VATCode,VATSCrw.DebVal,vatv,t1,IVr.InclVAT,IVr.NoTAXonVAT);
        case 1:
          vatv = VATSCrw.CredVal2;
          t1 = VATSCrw.CurCredVal;
      end;
      if (vatv!=0) or (nonblank(VATSCrw.DebVal)) then begin
        totskipcalcvatval = totskipcalcvatval + vatv;
      end;
    end;
  end;
  end else begin
    PrintTaxMatrix_IVVc(IVr,Docr,LangNrr,SysFormatRec,negamountf);
  end;
  
  if (FIELDINFORM("F_TOTALGOODS")) then begin
    PrintValue("F_TOTALGOODS",totgoods,M4Val,LangNrr,SysFormatRec,negamountf);
  end;        
  if (FIELDINFORM("F_TOTTRANSPORT")) then begin
    PrintValue("F_TOTTRANSPORT",tottrans,M4Val,LangNrr,SysFormatRec,negamountf);
  end;        
  if (FIELDINFORM("F_TOTPACKAGES")) then begin
    PrintValue("F_TOTPACKAGES",totpack,M4Val,LangNrr,SysFormatRec,negamountf);
  end;        
  if (FIELDINFORM("F_SUBTOTALWITHOUTPACKAGES")) then begin
    PrintValue("F_SUBTOTALWITHOUTPACKAGES",totgoods + tottrans,M4Val,LangNrr,SysFormatRec,negamountf);
  end;        
  if (FIELDINFORM("F_TOTALDISCOUNTNOPACK")) then begin
    PrintValue("F_TOTALDISCOUNTNOPACK",totdiscnopack,M4Val,LangNrr,SysFormatRec,negamountf);
  end;        
  if ((FIELDINFORM("F_SUBTOTALWITHOUTDISCOUNT")) or (FIELDINFORM("F_TOTALCOST"))) then begin
    PrintValueInclZero("F_SUBTOTALWITHOUTDISCOUNT",totsubtotwdisc,M4Val,LangNrr,SysFormatRec,negamountf);
    PrintValueInclZero("F_TOTALCOST",totcost,M4Val,LangNrr,SysFormatRec,negamountf);
  end;        
  totskipcalcvatval = Round(totskipcalcvatval,GetVATRoundMode(RoundRec));
  totvatval = Round(totvatval,GetVATRoundMode(RoundRec));
  totvatbase = Round(totvatbase,GetTotalRoundMode(RoundRec));
  totrowtot = Round(totrowtot,GetTotalRoundMode(RoundRec));

  if (FIELDINFORM("F_TOTSKIPCALCVATVAL")) then begin
    valtyp = M4Val;
    GetFieldArgument(Docr,F_TOTSKIPCALCVATVAL,tstr);
    if (tstr=="-") then begin
      valtyp = M4NegVal;
    end;
    PrintValueInclZero("F_TOTSKIPCALCVATVAL",totskipcalcvatval,valtyp,LangNrr,SysFormatRec,negamountf);
  end;
  if (FIELDINFORM("F_TOTVATVAL")) then begin
    valtyp = M4Val;
    GetFieldArgument(Docr,F_TOTVATVAL,tstr);
    if (tstr=="-") then begin
      valtyp = M4NegVal;
    end;
    PrintValueInclZero("F_TOTVATVAL",totvatval,valtyp,LangNrr,SysFormatRec,negamountf);
  end;
  if (FIELDINFORM("F_TOTVATBASE")) then begin
    valtyp = M4Val;
    GetFieldArgument(Docr,F_TOTVATBASE,tstr);
    if (tstr=="-") then begin
      valtyp = M4NegVal;
    end;
    PrintValueInclZero("F_TOTVATBASE",totvatbase,valtyp,LangNrr,SysFormatRec,negamountf);
  end;
  if (FIELDINFORM("F_TOTROWTOT")) then begin
    valtyp = M4Val;
    GetFieldArgument(Docr,F_TOTROWTOT,tstr);
    if (tstr=="-") then begin
      valtyp = M4NegVal;
    end;
    PrintValueInclZero("F_TOTROWTOT",totrowtot,valtyp,LangNrr,SysFormatRec,negamountf);
  end;

  if (FIELDINFORM("F_REBTEXT")) then begin
    if (totreb!=0) then begin
      GetFieldArgument(Docr,F_REBTEXT,tstr);
      OutFormField("F_REBTEXT",tstr);
    end;
  end;
  PrintValue("F_TOTALDISCOUNT",totdisc,M4Val,LangNrr,SysFormatRec,negamountf);

  if (CUr.AgeStatus==2) then begin
    PrintValue("F_TOTALDISCOUNTFORPENSIONERE",totdisc,M4Val,LangNrr,SysFormatRec,negamountf);
  end;

  t = MulRateToBase2(IVr.CurncyCode,totdisc,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
  PrintValue("F_TOTALDISCOUNTINBASE2",t,M4Val,LangNrr,SysFormatRec,negamountf);
  PrintValue("F_GCRTOTAL",totgcr,M4Val,LangNrr,SysFormatRec,negamountf);
  PrintValue("F_CCTOTAL",totcc,M4Val,LangNrr,SysFormatRec,negamountf);
  PrintValue("F_CASHVALUE",totcash,M4Val,LangNrr,SysFormatRec,negamountf);
  PrintValue("F_PAYMENTROWSTOTAL",totgcr+totcc+totcash,M4Val,LangNrr,SysFormatRec,negamountf);

  if (FIELDINFORM("F_CASHBACK")) then begin
    if (IVr.OKFlag==0) then begin
      GetFieldArgument(Docr,F_CASHBACK,tstr);
      if (tstr=="-") then begin
        PrintValue("F_CASHBACK",-IVr.RetnValue,M4Val,LangNrr,SysFormatRec,negamountf);
      end else begin
        PrintValue("F_CASHBACK",IVr.RetnValue,M4Val,LangNrr,SysFormatRec,negamountf);
      end;
    end;
  end;
  CalculatePayModesAmounts(IVr,vpaymodes,ivpaymode);
  PrintPayModes(vpaymodes,ivpaymode,SysFormatRec,LangNrr);
  RETURN;        
END;

global
procedure CalcIVTotalsFromIP(array LongInt aIVr,vector val v_IVrReceiveVal,record DocVc Docr,record RoundBlock RoundRec,record LangNrVc LangNrr,record SysFormatBlock SysFormatRec)
BEGIN
  record IVVc IVr;  
  row IVVc IVrw;
  Integer i,rwcnt,vatcnt;
  record SMVc VATr;
  row SMVc VATrw;
  record SMVc VATWDr;
  row SMVc VATWDrw;
  record SMVc VATSkipCalcr;
  row SMVc VATSCrw;
  val vatv,t1,t,v,t2;
  val vatval,vatbase,vattot,cdiscvat;
  val totreb,totdisc;
  val totcost,totsubtotwdisc,totvatval,totvatbase,totrowtot,totskipcalcvatval;
  string 255 tstr;
  string 255 str;
  Integer valtyp;
  val totgoods,tottrans,totpack,totdiscnopack;
  Integer rn;
  val vatexclprc,vatinclprc;
  val totgcr,totcc,totcash,PartialPayValPerc;
  record AccBlock ARAccRec;
  Boolean negamountf,UseTaxTemplatesforTaxCalcf;
  record CUVc CUr;
  vector val vpaymodes;
  vector string 10 ivpaymode;
  LongInt inv;
  vector val v_F_VATVAL,v_F_VATBASE,v_F_BASE1VATVAL,v_F_BASE1VATBASE;
  vector Boolean v_ivf;

  BlockLoad(ARAccRec);
  UseTaxTemplatesforTaxCalcf = UseTaxTemplatesforTaxCalc;
  CUr.Code = IVr.CustCode;
  ReadFirstMain(CUr,1,true);
  negamountf = (ARAccRec.PrintNegAmountsCredNote!=0 and (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales));
  RecordClear(VATr);
  RecordClear(VATWDr);
  SetupVATBase(VATr,vatcnt);          
  SetupVATBase(VATWDr,vatcnt);          
  SetupVATBase(VATSkipCalcr,vatcnt);          
  ClearVector(v_F_VATVAL);
  ClearVector(v_F_VATBASE);
  ClearVector(v_F_BASE1VATVAL);
  ClearVector(v_F_BASE1VATBASE);
  
  for (inv=0;inv<aIVr.length;inv=inv+1) begin
    IVr.SerNr = aIVr[inv];
    if (ReadFirstMain(IVr,1,true)==false or IVr.SerNr==-1) then begin goto LLCalcIVTotals01; end;
    if (v_ivf[IVr.SerNr]) then begin goto LLCalcIVTotals01; end;
    v_ivf[IVr.SerNr] = true;
    totvatval = 0;
    totvatbase = 0;    
    if (v_IVrReceiveVal[IVr.SerNr]>0 and v_IVrReceiveVal[IVr.SerNr]<IVr.Sum4)  then begin 
      PartialPayValPerc = v_IVrReceiveVal[IVr.SerNr] / IVr.Sum4;
    end else begin
       PartialPayValPerc = 1; 
    end;
/*    
    if ((HasLocalization("PRT")) and v_IVrReceiveVal[IVr.SerNr]<IVr.Sum4)  then begin 
      PartialPayValPerc = v_IVrReceiveVal[IVr.SerNr] / IVr.Sum4;
    end else begin
      PartialPayValPerc = 1; 
    end;
*/
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.ovst==0) and ((IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeInterest)) then begin      
  /*    
      if ((IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeInterest) or (IVrw.stp==kInvoiceRowTypeVoid)) then begin      
        if (IVrw.stp==kInvoiceRowTypeVoid) then begin
          IVrw.Quant = -IVrw.Quant;
          IVrw.Sum = -IVrw.Sum;
        end;
  */    
        IVrw.Sum = IVrw.Sum * PartialPayValPerc;
        switch (ITType(IVrw.ArtCode)) begin
          case 0: 
            totgoods = totgoods + IVrw.Sum;
            totdiscnopack = totdiscnopack + (IVrw.Quant*IVrw.Price - IVrw.Sum);
          case 1: 
            tottrans = tottrans + IVrw.Sum;
            totdiscnopack = totdiscnopack + (IVrw.Quant*IVrw.Price - IVrw.Sum);
          case 2: 
            totpack = totpack + IVrw.Sum;
        end;
        totsubtotwdisc = totsubtotwdisc + IVrw.Quant*IVrw.Price;
        totcost = totcost + IVrw.Quant*IVrw.BasePrice;
        totreb = totreb + (IVrw.Quant*IVrw.Price - IVrw.Sum);
        if (VATCalcRule(IVrw.VATCode)!=kVATCalcRuleSkip) then begin
          AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);      
          AddVATBase(VATWDr,IVrw.VATCode,IVrw.Sum,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);
        end else begin
          AddVATBase(VATSkipCalcr,IVrw.VATCode,IVrw.Sum,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);      
        end;
        if (IVrw.vRebate!=0) then begin
          if (IVrw.stp==kInvoiceRowTypeVoid) then begin
            totdisc = totdisc - (IVrw.Quant*IVrw.Price - IVrw.Sum);        
          end else begin
            totdisc = totdisc + (IVrw.Quant*IVrw.Price - IVrw.Sum);        
          end;
        end;
      end;      
      if (IVrw.stp==kInvoiceRowTypeCorrection) then begin
        totsubtotwdisc = totsubtotwdisc - IVrw.Quant*IVrw.Price;
        totcost = totcost - IVrw.Quant*IVrw.BasePrice;
        if (VATCalcRule(IVrw.VATCode)!=kVATCalcRuleSkip) then begin
          AddVATBase(VATr,IVrw.VATCode,-IVrw.Sum,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);
          AddVATBase(VATWDr,IVrw.VATCode,-IVrw.Sum,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);
        end else begin
          AddVATBase(VATSkipCalcr,IVrw.VATCode,IVrw.Sum,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);      
        end;
      end;
      if (IVrw.stp==kInvoiceRowTypeDownpayment) then begin
        AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);
      end;
      if (IVrw.stp==kInvoiceRowTypeGiftVoucherPayment) then begin
        totgcr = totgcr + IVrw.Sum;
      end;
      if (IVrw.stp==kInvoiceRowTypeCashPayment) then begin
        totcash = totcash + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
      end;
      if (IVrw.stp==kInvoiceRowTypeLoyaltyPointsPayment) then begin
        totcash = totcash + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
      end;
      if (IVrw.stp==kInvoiceRowTypeChequePayment) then begin
        totcash = totcash + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
      end;
      if (IVrw.stp==kInvoiceRowTypeCreditCardPayment) then begin
        totcc = totcc + IVrw.Sum;
      end;
    end;    
    AddVATBase(VATr,IVr.FrVATCode,IVr.FrPrice,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);
    AddVATBase(VATWDr,IVr.FrVATCode,IVr.FrPrice,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);

    if (UseTaxTemplatesforTaxCalcf==false) then begin
      for (i=0;i<vatcnt;i=i+1) begin
        MatRowGet(VATr,i,VATrw);    
        MatRowGet(VATWDr,i,VATWDrw);    
        MatRowGet(VATSkipCalcr,i,VATSCrw);    
        switch (RoundRec.VATCalcWay) begin
          case 0:
            MulVATIV(VATrw.VATCode,VATrw.DebVal,vatv,t1,IVr.InclVAT,IVr.NoTAXonVAT);
          case 1:
            vatv = VATrw.CredVal2;
            t1 = VATrw.CurCredVal;
        end;
        if (vatv!=0) or (nonblank(VATrw.DebVal)) then begin
          vatval = vatv;

          totvatval = totvatval + vatval;
          totvatbase = totvatbase + VATrw.DebVal;
          //totrowtot = totrowtot + VATrw.DebVal;    
          if (IVr.InclVAT>0) then begin
            totvatbase = totvatbase - vatval;
            vatbase = VATrw.DebVal - vatval;
            vattot = VATrw.DebVal;
          end else begin
            //totrowtot = totrowtot + vatval;
            vatbase = VATrw.DebVal;
            vattot = VATrw.DebVal + vatval;
          end;
          v_F_VATVAL[VATrw.VATCode] =  vatval;  //Round(vatval,GetVATRoundModeRB);
          v_F_VATBASE[VATrw.VATCode] = vatbase;

//          vatval = Round(vatv,GetVATRoundModeRB);
          t = MulRateToBase1(IVr.CurncyCode,vatval,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,GetVATRoundMode(RoundRec));
          v_F_BASE1VATVAL[VATrw.VATCode] = t;
          t = MulRateToBase1(IVr.CurncyCode,vatbase,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,GetVATRoundMode(RoundRec));
          v_F_BASE1VATBASE[VATrw.VATCode] = t;
        end;
      end;
    end else begin 
  //    PrintTaxMatrix_IVVc(IVr,Docr,LangNrr,SysFormatRec,negamountf);      
    end;
LLCalcIVTotals01:;
  end;
  
  for (i=0;i<vatcnt;i=i+1) begin
    MatRowGet(VATr,i,VATrw);    
    MatRowGet(VATWDr,i,VATWDrw);    
    MatRowGet(VATSkipCalcr,i,VATSCrw);    
    if (nonblank(VATrw.DebVal) and nonblank(VATrw.VATCode)) then begin
      if (FIELDINFORM("F_VATVAL_CODE_IN")) then begin
        OUTFORMFIELD("F_VATVAL_CODE_IN",VATrw.VATCode);
      end;   
      if (FIELDINFORM("F_VATVAL")) then begin
        valtyp = M4Val;
        GetFieldArgument(Docr,F_VATVAL,tstr);
        if (tstr=="-") then begin
          valtyp = M4NegVal;
        end;
        PrintValueInclZero("F_VATVAL",v_F_VATVAL[VATrw.VATCode],valtyp,LangNrr,SysFormatRec,negamountf);
      end;   
      if (FIELDINFORM("F_VATBASE")) then begin
        valtyp = M4Val;
        GetFieldArgument(Docr,F_VATBASE,tstr);
        if (tstr=="-") then begin
          valtyp = M4NegVal;
        end;
        PrintValueInclZero("F_VATBASE",v_F_VATBASE[VATrw.VATCode],valtyp,LangNrr,SysFormatRec,negamountf);
      end;
      t2 = 0;
      if (IVr.ExportFlag==0 and HasLocalization("PRT")) then begin
        if (FIELDINFORM("F_BASE1VATVAL")) then begin
          valtyp = M4Val;
          GetFieldArgument(Docr,F_BASE1VATVAL,tstr);
          if (tstr=="-") then begin
            valtyp = M4NegVal;
          end;
          PrintValueInclZero("F_BASE1VATVAL",V_F_BASE1VATVAL[VATrw.VATCode],valtyp,LangNrr,SysFormatRec,negamountf);
        end;
      end else begin
        if(HasLocalization("PRT")) then begin
          if (FIELDINFORM("F_BASE1VATVAL")) then begin
            PrintValueInclZero("F_BASE1VATVAL",t2,M4Val,LangNrr,SysFormatRec,negamountf);
          end;
        end else begin
          if (FIELDINFORM("F_BASE1VATVAL")) then begin
            valtyp = M4Val;
            GetFieldArgument(Docr,F_BASE1VATVAL,tstr);
            if (tstr=="-") then begin
              valtyp = M4NegVal;
            end;
            PrintValueInclZero("F_BASE1VATVAL",Round(V_F_BASE1VATVAL[VATrw.VATCode],GetVATRoundMode(RoundRec)),valtyp,LangNrr,SysFormatRec,negamountf);
          end;
        end;
      end;
      if (FIELDINFORM("F_BASE1VATBASE")) then begin
        t = MulRateToBase1(IVr.CurncyCode,vatbase,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,GetVATRoundMode(RoundRec));
        valtyp = M4Val;
        GetFieldArgument(Docr,F_BASE1VATBASE,tstr);
        if (tstr=="-") then begin
          valtyp = M4NegVal;
        end;
        PrintValueInclZero("F_BASE1VATBASE",Round(v_F_BASE1VATBASE[VATrw.VATCode],GetVATRoundMode(RoundRec)),valtyp,LangNrr,SysFormatRec,negamountf);
      end;
      GetVATproc(VATrw.VATCode,0,t);
      if (HasLocalization("POL")) then begin//vatPolish
        tstr = "";
        if (GetVAT2(VATrw.VATCode,vatexclprc,rn,0)) then begin
        end;
        if (GetVATincl(VATrw.VATCode,vatinclprc,rn)) then begin
        end;
        if (nonblank(vatbase)) then begin
          if (nonblank(vatinclprc)) then begin
            if ((vatinclprc==0) and (nonblank(vatexclprc))) then begin
              tstr = USetStr(8111);
            end;
          end;
          if ((vatinclprc==0) and (nonblank(vatinclprc))) then begin
            if (blank(vatexclprc)) then begin
              tstr = USetStr(8110);
            end;
          end;
        end;
        if (blank(tstr)) then begin
          tstr = ValToString(vatexclprc,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
        end;
        if (blank(tstr)) then begin
          tstr = USetStr(1244);
        end;
        OUTFORMFIELD("F_VATPRC",tstr);    
      end else begin
        tstr = ValToString(t,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
        if (blank(tstr)) then begin
          tstr = USetStr(1244);
        end;
        OUTFORMFIELD("F_VATPRC",tstr);
      end;
      GetVATText(VATrw.VATCode,str);
      OUTFORMFIELD("F_VATCOMMENT",str);
      EndFormRow;
    end;
  end;  

  totvatval = Round(totvatval,GetVATRoundMode(RoundRec));
  totvatbase = Round(totvatbase,GetTotalRoundMode(RoundRec));
  totrowtot = Round(totrowtot,GetTotalRoundMode(RoundRec));

  if (FIELDINFORM("F_TOTVATVAL")) then begin
   valtyp = M4Val;
   GetFieldArgument(Docr,F_TOTVATVAL,tstr);
   if (tstr=="-") then begin
     valtyp = M4NegVal;
   end;
   PrintValueInclZero("F_TOTVATVAL",totvatval,valtyp,LangNrr,SysFormatRec,negamountf);
  end;
  if (FIELDINFORM("F_TOTVATBASE")) then begin
   valtyp = M4Val;
   GetFieldArgument(Docr,F_TOTVATBASE,tstr);
   if (tstr=="-") then begin
     valtyp = M4NegVal;
   end;
   PrintValueInclZero("F_TOTVATBASE",totvatbase,valtyp,LangNrr,SysFormatRec,negamountf);
  end;
  RETURN;        
END;

function Boolean PrintInvoiceWatermarks(record IVVc IVr,Boolean testprintoutf,LongInt onpage)
BEGIN
  record ModuleBlock MBr;
  Boolean res;

  res = true;
  BlockLoad(MBr);
  if (MBr.NoTestprintEnabler==0) then begin
    if ((IVr.OKFlag==0) and (testprintoutf)) then begin
      FormWaterMark(1117,onpage);
    end;
    if ((IVr.OKFlag!=0) and (IVr.Invalid==0)) then begin
      if (IVr.Prntdf!=0) then begin
        FormWaterMark(1118,onpage);
      end;
    end;
  end;
  if (IVr.Invalid!=0) then begin
    FormWaterMark(1400,onpage);
    res = false;
  end;
  PrintInvoiceWatermarks = res;
  RETURN;
END;
        
function Integer InvoiceRowFields(Integer fieldSetNr)
BEGIN
  Integer res,fldno;

  res = 0;
  switch (fieldSetNr) begin
    case F_ARTNR: res = 1;
  end;
  InvoiceRowFields = res;
  RETURN;
END;

function Integer OldFormMatField(string formtype,Integer fieldSetNr)
BEGIN
  Integer res;
  
  switch (formtype) begin
    case "InvForm": res = InvoiceRowFields(fieldSetNr);
  end;
  OldFormMatField = res;
  RETURN;
END;

procedure SetFormRowFields(string formcode,string formtype)
BEGIN
  record DocVc Docr;
  row DocVc Docrw;
  Integer i,rwcnt;

  Docr.Code = formcode;
  if (ReadFirstMain(Docr,1,true)) then begin
    rwcnt = MatRowCnt(Docr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Docr,i,Docrw);
      if (Docrw.formatNr==0) then begin
        Docrw.formatNr = OldFormMatField(formtype,Docrw.fieldSetNr);
//        StopAlert("format= " & Docrw.formatNr & " set " & Docrw.fieldSetNr);
        MatRowPut(Docr,i,Docrw);
      end;
    end;
  end;
  RETURN;
END;

global
procedure DoInvForm(record RcVc RepSpec,record IVVc IVr)
BEGIN
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Boolean printf,langf;
  Integer intdocnr;
  string 30 formcode,langcode,langcod2;
  Integer i,rwcnt;
  record IVVc realIVr;

  realIVr.SerNr = IVr.SerNr;
  if (ReadFirstMain(realIVr,1,true)) then begin end;//for some reason we change OKFlag status in ivdclassprint
  langcode = IVr.LangCode;
  langcod2 = IVr.ShipMode;
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoInvForm;
  end;
  rwcnt = MatRowCnt(FDr);
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(FDr,i,FDrw);
    if (FDrw.LangCode==langcode) then begin
      i = -1;
      langf = true;
    end;
  end;
  if (langf==false) then begin langcode = ""; end;  
  intdocnr = 1;
  printf = true;
  if (IVr.Prntdf!=0) then begin
    if (UserCanAction("DisallowPrintCopy",false)) then begin
      MessageBox(1274,StringFromStringSet(3,"DisallowPrintCopy"));
      printf = false;
    end;
  end;
  while (printf) begin  
LFINDFORMCOCEInv:;
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (FindFormcode(realIVr.OKFlag,FDrw.Typ)) then begin
        if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,IVr.SerNr,FDrw.PrintGroupCode,
                        langcode,intdocnr,"IVVc",formcode)) then
        begin
          goto LInvBREAK;
        end;
      end;
    end;
    if (nonblank(langcod2)) then begin
      langcode = langcod2;
      langcod2 = "";
      goto LFINDFORMCOCEInv;
    end;  
LInvBREAK:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin
        printf = PrintInvoiceWatermarks(IVr,true,-1);
        PrintInvoice(RepSpec,IVr,formcode,langcode);
        CloseForm;
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoInvForm:;  
  RETURN;
END;

global
procedure DoInv1Form(record RcVc RepSpec,record IVVc IVr)
BEGIN
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Boolean printf,langf;
  Integer intdocnr;
  string 30 formcode,langcode,langcod2;
  Integer i,rwcnt;
  record IVVc realIVr;
    
  realIVr.SerNr = IVr.SerNr;
  if (ReadFirstMain(realIVr,1,true)) then begin end;//for some reason we change OKFlag status in ivdclassprint
  langcode = IVr.LangCode;
  langcod2 = IVr.ShipMode;
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoInv1Form;
  end;
  rwcnt = MatRowCnt(FDr);
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(FDr,i,FDrw);
    if (FDrw.LangCode==langcode) then begin
      i = -1;
      langf = true;
    end;
  end;
  if (langf==false) then begin langcode = ""; end;
  intdocnr = 1;
  printf = true;
  while (printf) begin  
LFINDFORMCOCEInv1:;
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (FindFormcode(realIVr.OKFlag,FDrw.Typ)) then begin
        if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,IVr.SerNr,FDrw.PrintGroupCode,
                        langcode,intdocnr,"IVVc",formcode)) then
        begin
          goto LInv1BREAK;
        end;
      end;
    end;
    if (nonblank(langcod2)) then begin
      langcode = langcod2;
      langcod2 = "";
      goto LFINDFORMCOCEInv1;
    end;  
LInv1BREAK:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin
        printf = PrintInvoiceWatermarks(IVr,false,-1);
        PrintInvoice(RepSpec,IVr,formcode,langcode);
        CloseForm;
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoInv1Form:;  
  RETURN;
END;

global
procedure DoProjInvForm(record RcVc RepSpec,record IVVc IVr)
BEGIN
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Boolean printf,langf;
  Integer intdocnr;
  string 30 formcode,langcode,langcod2;
  Integer i,rwcnt;
  record IVVc realIVr;
    
  realIVr.SerNr = IVr.SerNr;
  if (ReadFirstMain(realIVr,1,true)) then begin end;//for some reason we change OKFlag status in ivdclassprint
  langcode = IVr.LangCode;
  langcod2 = IVr.ShipMode;
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoProjInvForm;
  end;
  rwcnt = MatRowCnt(FDr);
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(FDr,i,FDrw);
    if (FDrw.LangCode==langcode) then begin
      i = -1;
      langf = true;
    end;
  end;
  if (langf==false) then begin langcode = ""; end;
  intdocnr = 1;
  printf = true;
  if (IVr.Prntdf!=0) then begin
    if (UserCanAction("DisallowPrintCopy",false)) then begin
      MessageBox(1274,StringFromStringSet(3,"DisallowPrintCopy"));
      printf = false;
    end;
  end;
  while (printf) begin  
LFINDFORMCOCEProjInv:;
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (FindFormcode(realIVr.OKFlag,FDrw.Typ)) then begin
        if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,IVr.SerNr,FDrw.PrintGroupCode,
                        langcode,intdocnr,"IVVc",formcode)) then
        begin
          goto LProjInvBREAK;
        end;
      end;
    end;
    if (nonblank(langcod2)) then begin
      langcode = langcod2;
      langcod2 = "";
      goto LFINDFORMCOCEProjInv;
    end;  
LProjInvBREAK:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin
        printf = PrintInvoiceWatermarks(IVr,true,-1);
        PrintInvoice(RepSpec,IVr,formcode,langcode);
        CloseForm;
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoProjInvForm:;  
  RETURN;
END;

global
procedure DoCashInvForm(record RcVc RepSpec,record IVVc IVr)
BEGIN
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Boolean printf,langf;
  Integer intdocnr;
  string 30 formcode,langcode,langcod2;
  Integer i,rwcnt;
  record IVVc realIVr;
  record AccBlock ARAccb;
    
  realIVr.SerNr = IVr.SerNr;
  if (ReadFirstMain(realIVr,1,true)) then begin end;//for some reason we change OKFlag status in ivdclassprint    
  langcode = IVr.LangCode;
  langcod2 = IVr.ShipMode;
  BlockLoad(ARAccb);
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoCashInvForm;
  end;
  rwcnt = MatRowCnt(FDr);
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(FDr,i,FDrw);
    if (FDrw.LangCode==langcode) then begin
      i = -1;
      langf = true;
    end;
  end;
  if (langf==false) then begin langcode = ""; end;
  intdocnr = 1;
  printf = true;
  if (IVr.Prntdf!=0) then begin
    if (UserCanAction("DisallowPrintCopy",false)) then begin
      MessageBox(1274,StringFromStringSet(3,"DisallowPrintCopy"));
      printf = false;
    end;
  end;
  while (printf) begin  
LFINDFORMCOCECashInv:;
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (FindFormcode(realIVr.OKFlag,FDrw.Typ)) then begin
        if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,IVr.SerNr,FDrw.PrintGroupCode,
                        langcode,intdocnr,"IVVc",formcode)) then
        begin
          goto LCashInvBREAK;
        end;
      end;
    end;
    if (nonblank(langcod2)) then begin
      langcode = langcod2;
      langcod2 = "";
      goto LFINDFORMCOCECashInv;
    end;  
LCashInvBREAK:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin
        if (ARAccb.CashSalesToFiscalControlUnit==0) then begin
          printf = PrintInvoiceWatermarks(IVr,true,-1);
        end else begin
          printf = PrintInvoiceWatermarks(IVr,true,1);
        end;
        PrintInvoice(RepSpec,IVr,formcode,langcode);
        CloseForm;
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoCashInvForm:;  
  RETURN;
END;

global
procedure DoCashInvRecPRTForm(record RcVc RepSpec,record IVVc IVr)
BEGIN
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Boolean printf,langf;
  Integer intdocnr;
  string 30 formcode,langcode,langcod2;
  Integer i,rwcnt;
  record IVVc realIVr;
  record AccBlock ARAccb;
    
  realIVr.SerNr = IVr.SerNr;
  if (ReadFirstMain(realIVr,1,true)) then begin end;//for some reason we change OKFlag status in ivdclassprint    
  langcode = IVr.LangCode;
  langcod2 = IVr.ShipMode;
  BlockLoad(ARAccb);
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoCashInvRecPRTForm;
  end;
  rwcnt = MatRowCnt(FDr);
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(FDr,i,FDrw);
    if (FDrw.LangCode==langcode) then begin
      i = -1;
      langf = true;
    end;
  end;
  if (langf==false) then begin langcode = ""; end;
  intdocnr = 1;
  printf = true;
  while (printf) begin  
LFINDFORMCOCECashInvRec:;
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (FindFormcode(realIVr.OKFlag,FDrw.Typ)) then begin
        if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,IVr.SerNr,FDrw.PrintGroupCode,
                        langcode,intdocnr,"IVVc",formcode)) then
        begin
          goto LCashInvRecBREAK;
        end;
      end;
    end;
    if (nonblank(langcod2)) then begin
      langcode = langcod2;
      langcod2 = "";
      goto LFINDFORMCOCECashInvRec;
    end;  
LCashInvRecBREAK:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin
        if (ARAccb.CashSalesToFiscalControlUnit==0) then begin
          printf = PrintInvoiceWatermarks(IVr,true,-1);
        end else begin
          printf = PrintInvoiceWatermarks(IVr,true,1);
        end;
        PrintInvoice(RepSpec,IVr,formcode,langcode);
        CloseForm;
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoCashInvRecPRTForm:;  
  RETURN;
END;

global
procedure DoCredInvForm(record RcVc RepSpec,record IVVc IVr)
BEGIN
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Boolean printf,langf;
  Integer intdocnr;
  string 30 formcode,langcode,langcod2;
  Integer i,rwcnt;
  record IVVc realIVr;
  record IVVc orgIVr;
  record AccBlock ARAccb;
    
  realIVr.SerNr = IVr.SerNr;
  if (ReadFirstMain(realIVr,1,true)) then begin end;//for some reason we change OKFlag status in ivdclassprint        
  langcode = IVr.LangCode;
  langcod2 = IVr.ShipMode;
  BlockLoad(ARAccb);
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoCredInvForm;
  end;
  rwcnt = MatRowCnt(FDr);
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(FDr,i,FDrw);
    if (FDrw.LangCode==langcode) then begin
      i = -1;
      langf = true;
    end;
  end;
  if (langf==false) then begin langcode = ""; end;
  intdocnr = 1;
  printf = true;
  if (IVr.Prntdf!=0) then begin
    if (UserCanAction("DisallowPrintCopy",false)) then begin
      MessageBox(1274,StringFromStringSet(3,"DisallowPrintCopy"));
      printf = false;
    end;
  end;
  while (printf) begin  
LFINDFORMCOCECredInv:;
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (FindFormcode(realIVr.OKFlag,FDrw.Typ)) then begin
        if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,IVr.SerNr,FDrw.PrintGroupCode,
                        langcode,intdocnr,"IVVc",formcode)) then
        begin
          goto LCredInvBREAK;
        end;
      end;
    end;
    if (nonblank(langcod2)) then begin
      langcode = langcod2;
      langcod2 = "";
      goto LFINDFORMCOCECredInv;
    end;  
LCredInvBREAK:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin
        if (ARAccb.CashSalesToFiscalControlUnit==0) then begin
          printf = PrintInvoiceWatermarks(IVr,true,-1);
        end else begin
          if (IVr.CredInv>0) then begin
            orgIVr.SerNr = IVr.CredInv;
            if (ReadFirstMain(orgIVr,1,true)) then begin
              if (orgIVr.InvType!=kInvoiceTypeCash and orgIVr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) then begin
                printf = PrintInvoiceWatermarks(IVr,true,-1);
              end else begin
                printf = PrintInvoiceWatermarks(IVr,true,1);
              end;
            end else begin
              printf = PrintInvoiceWatermarks(IVr,true,-1);
            end;
          end else begin
            printf = PrintInvoiceWatermarks(IVr,true,1);
          end;
        end;
        PrintInvoice(RepSpec,IVr,formcode,langcode);
        CloseForm;
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoCredInvForm:;  
  RETURN;
END;

global
procedure DoIIInvForm(record RcVc RepSpec,record IVVc IVr)
BEGIN
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Boolean printf,langf;
  Integer intdocnr;
  string 30 formcode,langcode,langcod2;
  Integer i,rwcnt;
  record IVVc realIVr;
    
  realIVr.SerNr = IVr.SerNr;
  if (ReadFirstMain(realIVr,1,true)) then begin end;//for some reason we change OKFlag status in ivdclassprint        
  langcode = IVr.LangCode;
  langcod2 = IVr.ShipMode;
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoIIInvForm;
  end;
  rwcnt = MatRowCnt(FDr);
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(FDr,i,FDrw);
    if (FDrw.LangCode==langcode) then begin
      i = -1;
      langf = true;
    end;
  end;
  if (langf==false) then begin langcode = ""; end;
  intdocnr = 1;
  printf = true;
  while (printf) begin  
LFINDFORMCOCEIIInv:;
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (FindFormcode(realIVr.OKFlag,FDrw.Typ)) then begin
        if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,IVr.SerNr,FDrw.PrintGroupCode,
                        langcode,intdocnr,"IVVc",formcode)) then
        begin
          goto LIIInvBREAK;
        end;
      end;
    end;
    if (nonblank(langcod2)) then begin
      langcode = langcod2;
      langcod2 = "";
      goto LFINDFORMCOCEIIInv;
    end;  
LIIInvBREAK:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin
        printf = PrintInvoiceWatermarks(IVr,true,-1);
        PrintInvoice(RepSpec,IVr,formcode,langcode);
        CloseForm;
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoIIInvForm:;  
  RETURN;
END;
