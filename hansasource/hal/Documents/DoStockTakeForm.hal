external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external function Integer NumberofDocumentPages(string,Integer);
external function val GetStockQty(string,string,Date,Boolean);
external procedure CommonDocumentFields(record RcVc);
external function Boolean Getformcode(Integer,Integer,string,string,string,LongInt,LongInt,string,string,Integer,string,var string);

procedure FindLastST(record RcVc RepSpec,string item,Date fromdate,var Date lastdatep,var val unitsp, var val unitprice)
BEGIN
  record ItemHistVc IHr;
  record StockTakeVc StockTaker;
  row StockTakeVc StockTakerw;
  Boolean TrHs,testf;
  Integer rwcnt,i,keys;
  val t;
  Integer slen;
  record MainStockBlock MainStockRec;

  BlockLoad(MainStockRec);
  lastdatep = AddYear(lastdatep,-GetYear(lastdatep));
//  if (RepSpec.flags[3]==0) then begin
    IHr.ArtCode = item;
    IHr.TransDate = CurrentDate;
    keys = 2;
    if (RepSpec.flags[3]!=0) then begin    
      keys = 2;
    end;
    TrHs = true;
    unitprice= 0;
    while (LoopBackKey("ArtCode",IHr,keys,TrHs)) begin
      if (IHr.ArtCode<>item) then begin TrHs = false; end;
      if (IHr.TransDate<fromdate) then begin
        TrHs = false;
      end;
      if (TrHs) then begin
        if (IHr.Invalid==0) then begin
        if (IHr.FileName=="StockTakeVc") then begin
          StockTaker.SerNr = IHr.TransNr;
          if (ReadFirstMain(StockTaker,1,true)) then begin
            rwcnt = MatRowCnt(StockTaker);
//            if (IHr.Row<=rwcnt) then begin
//            for (i=0;i<rwcnt;i=i+1) begin
//              MatRowGet(StockTaker,i,StockTakerw);
            if ((IHr.Row<rwcnt) and (IHr.Row>-1)) then begin
              MatRowGet(StockTaker,IHr.Row,StockTakerw);
              testf = true;
              if (item!=StockTakerw.ArtCode) then begin testf = false; end;
              if (nonblank(RepSpec.AccStr)) then begin
                if (nonblank(StockTakerw.Location)) then begin
                  if (StockTakerw.Location<>RepSpec.AccStr) then begin testf = false; end;
                end else begin
                  if (nonblank(StockTaker.Location)) then begin
                    if (StockTaker.Location<>RepSpec.AccStr) then begin testf = false; end;
                  end else begin
                    if (MainStockRec.MainStock<>RepSpec.AccStr) then begin testf = false; end;
                  end;
                end;
              end;
              if (IHr.Invalid!=0) then begin testf = false; end;
              if (testf) then begin
                if (StockTaker.TransDate<>lastdatep) then begin
                  t = 0;
                  t = StockTakerw.Qty + t;
                  unitprice = unitprice + StockTakerw.BasePrice;
                end else begin
                  t = StockTakerw.Qty + t;
                  unitprice = unitprice + StockTakerw.BasePrice;
                end;
                lastdatep = StockTaker.TransDate;
//                TrHs = false;//if many serianl numbers for one item then we stop in the middle of it
              end;
            end;
          end;
        end;
        end;
      end;   
    end;  
L99:;
  unitsp = t;
  RETURN;
END;

procedure STCompOneItem(record RcVc RepSpec,record INVc INr,var Boolean itemoutf,var val inp,var val inq2p,var val countp,var val stocksum,var val countsum,var val diffsum,var integer linecnt)
BEGIN
  Boolean plhit;
  val instock,instock2,units,diff;
  Date dat1,laststdate;
  string 60 sz,msk,mskrep;
  string 200 varsubset;
  val uprice;
  val t;
  Boolean varf;
  Boolean TrHs,testf;
  record ItemStatusVc ISr;
  Integer keys;
  record INVc IN2r;
  
  itemoutf = true;
  plhit = true;
  if (INr.ItemType==1) then begin
    if (FindItemVAR(INr.Code,sz,msk,mskrep,varsubset)) then begin varf = true; end;
    if (varf) then begin

      TrHs = true;
      ResetLoop(ISr);
      ISr.Code = INr.Code;
      keys = 1;
      if (nonblank(RepSpec.AccStr)) then begin
        ISr.Location = RepSpec.AccStr;
        keys = 2;
      end;
      while (LoopMain(ISr,keys,TrHs)) begin    
        if (ISr.Code!=INr.Code) then begin TrHs = false; end;
        if (nonblank(RepSpec.AccStr)) then begin
          if (ISr.Location!=RepSpec.AccStr) then begin
            TrHs = false;
          end;
        end;
        testf = true;
        if (nonblank(RepSpec.AccStr)) then begin
          if (ISr.Location==";;;") then begin
            testf = false;
          end;
        end else begin
          if (ISr.Location!=";;;") then begin
            testf = false;
          end;
        end;
        if (TrHs==false) then begin testf = false; end;
        if (testf) then begin
          if (ReadFirstItem(ISr.Code & ISr.Variety,IN2r,true,true)) then begin

            FindLastST(RepSpec,ISr.Code & ISr.Variety,RepSpec.RegDate,laststdate,units,uprice);    
            dat1 = laststdate;
            if (RepSpec.flags[3]==3) then begin
              if (blankdate(dat1)) then begin
                goto LSTCompOneItem;
              end;
            end;
            if (nonblankdate(RepSpec.RegDate)) then begin
              if (RepSpec.RegDate<>dat1) then begin dat1 = RepSpec.RegDate; end;
            end;  
            if (blankdate(dat1)) then begin dat1 = CurrentDate; end;
            instock = GetStockQty(ISr.Code & ISr.Variety,RepSpec.AccStr,dat1,false);
            instock2 = GetStockQty(ISr.Code & ISr.Variety,RepSpec.AccStr,dat1,true);
//            if ((blankdate(laststdate)) or (units==0)) then begin
            if (blankdate(laststdate)) then begin
              switch (RepSpec.flags[3]) begin    
                case 1:
                  instock = 0;
                  instock2 = 0;
                case 2:
                  units = 0;
              end;
            end;  
            diff = units - instock;
            if (RepSpec.ArtMode==0) then begin
              if (instock <> 0 or units<>0) then begin
                OUTFORMFIELD("F_ARTNR",ISr.Code & ISr.Variety);
                OUTFORMFIELD("F_SPECIFIKATION",IN2r.Name);
                OUTFORMFIELD("F_ENHET",INr.Unittext);
                OUTFORMFIELD("F_TRANSDATUM",dat1); // F_DATUM is a common field that always prints current date...
                OUTFORMFIELD("F_INSTOCK",instock);
                OUTFORMFIELD("F_SUMSTOCKED",instock*INr.WeighedAvPrice);
                OUTFORMFIELD("F_SUMPRIS",units*INr.WeighedAvPrice);
                OUTFORMFIELD("F_SUMMQTY",units);
                OUTFORMFIELD("F_DIFF",diff);
                OUTFORMFIELD("F_PRIS",INr.WeighedAvPrice);
                OUTFORMFIELD("F_APRIS",uprice);
                EndFormRow;
                linecnt = linecnt +1;
                stocksum = stocksum + instock*INr.WeighedAvPrice;
                countsum = countsum + units*INr.WeighedAvPrice;
                inp = instock + inp;
                inq2p = instock2 + inq2p;
                countp = units + countp;
              end;
            end;

          end;
        end;
      end;  

    end else begin
      FindLastST(RepSpec,INr.Code,RepSpec.RegDate,laststdate,units,uprice);    
      dat1 = laststdate;
      if (RepSpec.flags[3]==3) then begin
        if (blankdate(dat1)) then begin
          goto LSTCompOneItem;
        end;
      end;
      if (nonblankdate(RepSpec.RegDate)) then begin
        if (RepSpec.RegDate<>dat1) then begin dat1 = RepSpec.RegDate; end;
      end;  
      if (blankdate(dat1)) then begin dat1 = CurrentDate; end;
      instock = GetStockQty(INr.Code,RepSpec.AccStr,dat1,false);
      instock2 = GetStockQty(INr.Code,RepSpec.AccStr,dat1,true);
//      if ((blankdate(dat1)) or (units==0)) then begin
      if (blankdate(laststdate)) then begin
        switch (RepSpec.flags[3]) begin    
          case 1:
            instock = 0;
            instock2 = 0;
          case 2:
            units = 0;
        end;
      end;  
      diff = units - instock;
      if (RepSpec.ArtMode==0) then begin
        if (instock <> 0 or units<>0) then begin
          OUTFORMFIELD("F_ARTNR",INr.Code);
          OUTFORMFIELD("F_SPECIFIKATION",INr.Name);
          OUTFORMFIELD("F_ENHET",INr.Unittext);
          OUTFORMFIELD("F_TRANSDATUM",dat1); // F_DATUM is a common field that always prints current date...
          OUTFORMFIELD("F_INSTOCK",instock);
          OUTFORMFIELD("F_SUMSTOCKED",instock*INr.WeighedAvPrice);
          OUTFORMFIELD("F_SUMPRIS",units*INr.WeighedAvPrice);
          OUTFORMFIELD("F_SUMMQTY",units);
          OUTFORMFIELD("F_DIFF",diff);
          OUTFORMFIELD("F_PRIS",INr.WeighedAvPrice);
          OUTFORMFIELD("F_APRIS",uprice);
          EndFormRow;
          linecnt = linecnt +1;
          stocksum = stocksum + instock*INr.WeighedAvPrice;
          countsum = countsum + units*INr.WeighedAvPrice;
          inp = instock + inp;
          inq2p = instock2 + inq2p;
          countp = units + countp;
        end;
      end;
    end;
  end;
LSTCompOneItem:;  
  RETURN;
END;

procedure STLoopIN(record RcVc RepSpec,var val instock,var val instock2,var val counted,var val stocksum,var val countsum,var val diffsum,var integer linecnt)
BEGIN
  string 255 ckey;
  Integer keys;
  string 255 lastgroup;
  Boolean itemout,testf;
  record INVc INr;
  string 255 fromart,toart;
  string 255 frcc,tocc;
  Boolean TrHs;

  itemout = false;
  fromart = FirstInRange(RepSpec.f1,20);
  toart = LastInRange(RepSpec.f1,20);
  frcc = FirstInRange(RepSpec.f3,20);
  tocc = LastInRange(RepSpec.f3,20);
  INr.Code = fromart;
  ckey = "Code";
  keys = 1;  
  TrHs = true;
  while (LoopKey(ckey,INr,keys,TrHs)) begin
    testf = true;
    if (TrHs) then begin
      if (nonblank(RepSpec.f3)) then begin
        if (INr.Group>tocc) then begin
          if (RepSpec.flags[2]==1) then begin
            TrHs = false;
          end else begin
            testf = false;
          end;
        end;
      end;
    end;        
    if (TrHs) then begin
      if (nonblank(toart)) then begin
        if (INr.Code>toart) then begin
          if (RepSpec.flags[2]==0) then begin
            TrHs = false;
          end else begin
            testf = false;
          end;
        end;
      end;
    end;        
    if (TrHs) then begin
      if (nonblank(RepSpec.f3)) then begin
        if (INr.Group<frcc) then begin
          testf = false;
        end;
      end;
    end;      
    if (TrHs==false) then begin testf = false; end;
    if (testf) then begin
      STCompOneItem(RepSpec,INr,itemout,instock,instock2,counted,stocksum,countsum,diffsum,linecnt);
    end;
  end;  
  RETURN;
END;

procedure PrintStockTake(record RcVc RepSpec,var integer linecnt)
begin
  record StockTakeVc StockTaker;
  row StockTakeVc StockTakerw;
  val instock,instock2,counted;
  val stocksum,countsum,diffsum;
  
  STLoopIN(RepSpec,instock,instock2,counted,stocksum,countsum,diffsum,linecnt);
  OUTFORMFIELD("F_COUNTSUM",countsum);
  OUTFORMFIELD("F_TOTDIFF",stocksum-countsum);
  OUTFORMFIELD("F_TOTFIFO",stocksum);
  OUTFORMFIELD("F_COUNTSUMTOT",counted);
  OUTFORMFIELD("F_TOTINSTOCK",instock);
  return;
end;

procedure PrintStockTakeRecord(record StocktakeVc StockTaker)
begin
  row StockTakeVc StockTakerw;
  Integer i,rwcnt;
  record INVc INr;
  val instock,instock2,counted,units,diff;
  val stocksum,countsum,diffsum;
  val totinstock,totinstock2;
  
  rwcnt = MatRowCnt(StockTaker);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(StockTaker,i,StockTakerw);
    ReadFirstItem(StockTakerw.ArtCode,INr,true,false);

    OUTFORMFIELD("F_ARTNR",StockTakerw.ArtCode);
    OUTFORMFIELD("F_SPECIFIKATION",INr.Name);
    OUTFORMFIELD("F_ENHET",INr.Unittext);
    OUTFORMFIELD("F_TRANSDATUM",StockTaker.TransDate);
    instock = GetStockQty(StockTakerw.ArtCode,StockTaker.Location,StockTaker.TransDate,false);
    instock2 = GetStockQty(StockTakerw.ArtCode,StockTaker.Location,StockTaker.TransDate,true);
    units = StockTakerw.Qty;
    OUTFORMFIELD("F_INSTOCK",instock);
    OUTFORMFIELD("F_SUMSTOCKED",instock*INr.WeighedAvPrice);
    OUTFORMFIELD("F_SUMPRIS",units*INr.WeighedAvPrice);
    OUTFORMFIELD("F_SUMMQTY",units);
    diff = units - instock;
    OUTFORMFIELD("F_DIFF",diff);
    OUTFORMFIELD("F_PRIS",INr.WeighedAvPrice);
    OUTFORMFIELD("F_APRIS",StockTakerw.BasePrice);
    EndFormRow;
    stocksum = stocksum + instock*INr.WeighedAvPrice;
    countsum = countsum + units*INr.WeighedAvPrice;
    totinstock = totinstock + instock;
    totinstock2 = totinstock2 + instock2;
    counted = counted + units;
  end;
  OUTFORMFIELD("F_COUNTSUM",countsum);
  OUTFORMFIELD("F_TOTDIFF",stocksum-countsum);
  OUTFORMFIELD("F_TOTFIFO",stocksum);
  OUTFORMFIELD("F_COUNTSUMTOT",counted);
  OUTFORMFIELD("F_TOTINSTOCK",totinstock);
  return;
end;

global
procedure DoStockTakeForm(record RcVc RepSpec,record StocktakeVc StockTaker)
BEGIN
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Boolean printf;
  Integer intdocnr;
  string 30 formcode;
  Integer i,rwcnt,linecnt;
    
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoStockTakeForm;
  end;
  rwcnt = MatRowCnt(FDr);
  intdocnr = 1;
  printf = true;
  while (printf) begin  
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,-1,FDrw.PrintGroupCode,
                      "",intdocnr,"StockTakeVc",formcode)) then
      begin
        goto LBREAK;
      end;
    end;
LBREAK:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin
        CommonDocumentFields(RepSpec);
        NumberofDocumentPages(formcode,linecnt);
        if (RepSpec.long1>0) then begin
          PrintStockTakeRecord(StockTaker);
        end else begin
          PrintStockTake(RepSpec,linecnt);
        end;
        CloseForm;
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1546,formcode);
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoStockTakeForm:;
  RETURN;
END;

