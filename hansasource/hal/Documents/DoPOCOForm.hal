external procedure PrintCurrencyCode(string,string);
external function roundmode GetVATRoundMode(record RoundBlock);
external function roundmode SetRoundModeD(Integer);
external procedure OutAddress(string,string,string,string,string,string,string);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure InvVat(Integer,Integer,Integer,Integer,string,val,var val,var val,var val,var val,var val);
external function Boolean GetPurchaseItem(string,string,var record PIVc);
external procedure SelectUnitText(string,string,var string);
external procedure SelectUnitText(string,string,var string);
external procedure BCEAN(string,var string);
external procedure BC39(string,var string);
external procedure ItemBCEAN13(string,var string);
external procedure ItemBCEAN(string,var string);
external procedure ItemBC39(string,var string);
external procedure PrintValue(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external procedure GetShipDealText(string,string,var string);
external procedure GetShipModeText(string,string,var string);
external procedure GetPayDealText(string,string,var string);
external procedure GetLangNr(string,var record LangNrVc);
external procedure GetFieldArgument(record DocVc,Integer,var string);
external procedure ValToText(val,Integer,string,string,var string);
external function Boolean GetPD(var record PDVc);
external procedure CommonDocumentFields(record RcVc);
external function Integer NumberofDocumentPages(string,Integer);
external function Boolean Getformcode(Integer,Integer,string,string,string,LongInt,LongInt,string,string,Integer,string,var string);

procedure PrintPOCO(record RcVc RepSpec,record POCOVc POCOr,string formcode)
BEGIN
  record LangNrVc LangNrr;
  record SysFormatBlock SysFormatRec;
  record IIBlock IIRec;
  record CUVc VEr;
  record CUVc FactoringVEr;
  record PDVc PDr;
  record INVc INr;
  record PIVc PIr;
  record DocVc Docr;
  row POCOVc POCOrw;
  string 255 tstr;
  Integer i,rwcnt;
  val t,totweight,totvolume;
  val vatprc,vatval,vatexclprc,vatinclprc,rowtax;
  record RoundBlock RoundRec;  
  
  GetLangNr(POCOr.LangCode,LangNrr);
  BlockLoad(RoundRec);
  BlockLoad(IIRec);
  BlockLoad(SysFormatRec);  
  CommonDocumentFields(RepSpec);    
  NumberofDocumentPages(formcode,MatRowCnt(POCOr));
  VEr.Code = POCOr.VECode;
  if (ReadFirstMain(VEr,1,true)) then begin
  end;
  Docr.Code = formcode;
  if (ReadFirstMain(Docr,1,true)) then begin
  end;
  FactoringVEr.Code = POCOr.VEFactoring;
  if (ReadFirstMain(FactoringVEr,1,true)) then begin
  end;
  OUTFORMFIELD("F_FAKTURATILL",FactoringVEr.Name);
  OUTFORMFIELD("F_FAKTURATILL",FactoringVEr.InvAddr0);
  OUTFORMFIELD("F_FAKTURATILL",FactoringVEr.InvAddr1);
  OUTFORMFIELD("F_FAKTURATILL",FactoringVEr.InvAddr2);
  OUTFORMFIELD("F_FAKTURATILL",FactoringVEr.InvAddr3);
  OUTFORMFIELD("F_FAKTURATILL",FactoringVEr.InvAddr4);
  OUTFORMFIELD("F_LEVPHONE",VEr.Phone);
  OUTFORMFIELD("F_LEVFAX",VEr.Fax);
  OUTFORMFIELD("F_LEVVATNR",VEr.VATNr);
  OUTFORMFIELD("F_EGETKUNDNR",VEr.VECustID);
  if (FIELDINFORM("F_PAYTERMTEXT")) then begin
    PDr.Code = POCOr.PayDeal;
    if (GetPD(PDr)) then begin
    end;
    OUTFORMFIELD("F_PAYTERMTEXT",PDr.pdComment);
  end;
  OUTFORMFIELD("F_ADRESSNAMN",POCOr.Addr0);
  OUTFORMFIELD("F_ORDERDATE",POCOr.TransDate);
  if (POCOr.SerNr!=-1) then begin
    tstr = POCOr.SerNr;
  end else begin
    tstr = "";
  end;
  OUTFORMFIELD("F_SERNR",tstr);
  if (FIELDINFORM("F_SUMMA")) then begin
    GetFieldArgument(Docr,F_SUMMA,tstr);
    if (nonblank(tstr)) then begin
      tstr = ValToString(Round(POCOr.Sum1,SetRoundModeD(StringToInt(tstr))),M45Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
    end else begin
      tstr = ValToString(POCOr.Sum1,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
    end;
    OUTFORMFIELD("F_SUMMA",tstr);
  end;
  if (FIELDINFORM("F_MOMS")) then begin
    GetFieldArgument(Docr,F_MOMS,tstr);
    if (nonblank(tstr)) then begin
      tstr = ValToString(Round(POCOr.Sum3,SetRoundModeD(StringToInt(tstr))),M45Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
    end else begin
      tstr = ValToString(POCOr.Sum3,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
    end;
    OUTFORMFIELD("F_MOMS",tstr);
  end;
  if (FIELDINFORM("F_ATTBETALA")) then begin
    GetFieldArgument(Docr,F_ATTBETALA,tstr);
    if (nonblank(tstr)) then begin
      tstr = ValToString(Round(POCOr.Sum4,SetRoundModeD(StringToInt(tstr))),M45Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
    end else begin
      tstr = ValToString(POCOr.Sum4,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
    end;
    OUTFORMFIELD("F_ATTBETALA",tstr);
  end;
  if (FIELDINFORM("F_ATTBETALATEXT")) then begin
    ValToText(POCOr.Sum4,M4Val,POCOr.CurncyCode,POCOr.LangCode,tstr);
    OUTFORMFIELD("F_ATTBETALATEXT",tstr);  
  end;
  OUTFORMFIELD("F_COMMENT",POCOr.Comment1);
  OUTFORMFIELD("F_COMMENT",POCOr.Comment2);
  OUTFORMFIELD("F_COMMENT",POCOr.Comment3);
  OUTFORMFIELD("F_COMMENT",POCOr.Comment4);
  OUTFORMFIELD("F_LEVNR",POCOr.VECode);
  OUTFORMFIELD("F_REFERENSNUMMER",POCOr.Reference);
  OutAddress("F_ADRESS",POCOr.Addr0,POCOr.Addr1,POCOr.Addr2,POCOr.Addr3,POCOr.InvAddr3,POCOr.InvAddr4);
  OutAddress("F_LEVADRESS",POCOr.ShipAddr0,POCOr.ShipAddr1,POCOr.ShipAddr2,POCOr.ShipAddr3,POCOr.DelAddr3,POCOr.DelAddr4);
  if (FIELDINFORM("F_VILLKOR")) then begin
    GetPayDealText(POCOr.PayDeal,POCOr.LangCode,tstr);
    OUTFORMFIELD("F_VILLKOR",tstr);
  end;
  OUTFORMFIELD("F_VARREFERENS",POCOr.OurContact);
  OUTFORMFIELD("F_CONTACTEMAIL",VEr.eMail);
  OUTFORMFIELD("F_ERREFERENS",POCOr.VEContact);
//  OUTFORMFIELD("F_PLANLEVDATUM",POCOr.PlanShip);
  OUTFORMFIELD("F_LEVSATT",POCOr.ShipMode);
  if (FIELDINFORM("F_LEVSATTTEXT")) then begin
    GetShipModeText(POCOr.ShipMode,POCOr.LangCode,tstr);
    OUTFORMFIELD("F_LEVSATTTEXT",tstr);
  end;
  PrintCurrencyCode("F_VALUTA",POCOr.CurncyCode);
  OUTFORMFIELD("F_SHIPTERM",POCOr.ShipDeal);
  if (FIELDINFORM("F_SHIPTERMTEXT")) then begin
    GetShipDealText(POCOr.ShipDeal,POCOr.LangCode,tstr);
    OUTFORMFIELD("F_SHIPTERMTEXT",tstr);
  end;
  PrintValue("F_RANTASATS",IIRec.IntRate,M4Val,LangNrr,SysFormatRec,false);
  OUTFORMFIELD("F_LOCATION",POCOr.Location);  
  OUTFORMFIELD("F_SALJARE",POCOr.SalesMan);
  OUTFORMFIELD("F_ORDERKLASS",POCOr.POClass);
  OUTFORMFIELD("F_PLANLEVDATUM",POCOr.PlanShipDate);
  OUTFORMFIELD("F_PERSON",POCOr.OKPersons);
//Sign
//SalesGroup
  rwcnt = MatRowCnt(POCOr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POCOr,i,POCOrw);
    INr.Code = POCOrw.ArtCode;
    if (ReadFirstMain(INr,1,true)) then begin
    end;
    if (FIELDINFORM("F_ARTNRBC39")) then begin
      ItemBC39(POCOrw.ArtCode,tstr);
      OUTFORMFIELD("F_ARTNRBC39",tstr);
    end;  
    if (FIELDINFORM("F_ARTNRBCEAN")) then begin
      ItemBCEAN(POCOrw.ArtCode,tstr);
      OUTFORMFIELD("F_ARTNRBCEAN",tstr);
    end;  
    if (FIELDINFORM("F_ARTNRBCEAN13")) then begin
      ItemBCEAN13(POCOrw.ArtCode,tstr);      
      OUTFORMFIELD("F_ARTNRBCEAN13",tstr);
    end;  
    if (FIELDINFORM("F_LEVARTNRBC39")) then begin
      BC39(POCOrw.VEArtCode,tstr);      
      OUTFORMFIELD("F_LEVARTNRBC39",tstr);
    end;  
    if (FIELDINFORM("F_LEVARTNRBCEAN")) then begin
      BCEAN(POCOrw.VEArtCode,tstr);      
      OUTFORMFIELD("F_LEVARTNRBCEAN",tstr);
    end;  
    OUTFORMFIELD("F_SPECIFIKATION",POCOrw.Spec);
    PrintValue("F_VARTANTAL",POCOrw.Quant,M4UVal,LangNrr,SysFormatRec,false);    
    PrintValue("F_BELOPP",POCOrw.Sum,M4Val,LangNrr,SysFormatRec,false);
    PrintValue("F_ANTAL",POCOrw.VEQuant,M4UVal,LangNrr,SysFormatRec,false);
    PrintValue("F_APRIS",POCOrw.Price,M423Val,LangNrr,SysFormatRec,false);
    OUTFORMFIELD("F_ARTNR",POCOrw.ArtCode);
    OUTFORMFIELD("F_ARTNR2",POCOrw.ArtCode);
    OUTFORMFIELD("F_LEVARTNR",POCOrw.VEArtCode);
    PrintValue("F_RABATT",POCOrw.vRebate,M4Val,LangNrr,SysFormatRec,false);
    OUTFORMFIELD("F_MOMSKOD",POCOrw.VATCode);
    PrintValue("F_PRICEFACTOR",POCOrw.PriceFactor,M4UVal,LangNrr,SysFormatRec,false);
    if (POCOrw.PriceFactor!=0) then begin
      t = POCOrw.Price/POCOrw.PriceFactor;
    end else begin
      t = POCOrw.Price;
    end;
    PrintValue("F_UNITPRICE",t,M423Val,LangNrr,SysFormatRec,false);
    SelectUnitText(POCOr.LangCode,INr.Unittext,tstr);    
    OUTFORMFIELD("F_ENHET",tstr);
    if (FIELDINFORM("F_ENHETLEV")) then begin        
      tstr = "";
      if (GetPurchaseItem(POCOrw.ArtCode,POCOr.Location,PIr)) then begin
        SelectUnitText(VEr.LangCode,PIr.VEUnit,tstr);
      end;  
      OUTFORMFIELD("F_ENHETLEV",tstr);
    end;  
    PrintValue("F_VOLUME",INr.Volume,M4Qty,LangNrr,SysFormatRec,false);
    PrintValue("F_WIDTH",INr.Width,M4Qty,LangNrr,SysFormatRec,false);
    PrintValue("F_HEIGHT",INr.Height,M4Qty,LangNrr,SysFormatRec,false);
    PrintValue("F_DEPTH",INr.Depth,M4Qty,LangNrr,SysFormatRec,false);
    PrintValue("F_WEIGHT",INr.Weight,M4Qty,LangNrr,SysFormatRec,false);
    InvVat(1,POCOr.InclVAT,0,POCOr.ExportFlag,POCOrw.VATCode,POCOrw.Sum,vatprc,vatval,vatexclprc,vatinclprc,rowtax);
    t = MulRateToBase1(POCOr.CurncyCode,vatval,POCOr.FrRate,POCOr.ToRateB1,POCOr.ToRateB2,POCOr.BaseRate1,POCOr.BaseRate2,DefaultCurRoundOff);
    PrintValue("F_BASE1ROWVATVAL",Round(t,GetVATRoundMode(RoundRec)),M4Val,LangNrr,SysFormatRec,false);
    t = MulRateToBase2(POCOr.CurncyCode,vatval,POCOr.FrRate,POCOr.ToRateB1,POCOr.ToRateB2,POCOr.BaseRate1,POCOr.BaseRate2,DefaultCurRoundOff);
    PrintValue("F_BASE2ROWVATVAL",Round(t,GetVATRoundMode(RoundRec)),M4Val,LangNrr,SysFormatRec,false);
    PrintValue("F_ROWVATVAL",vatval,M4Val,LangNrr,SysFormatRec,false);
    OUTFORMFIELD("F_ROWOBJECT",POCOrw.Objects);
    OUTFORMFIELD("F_COSTACCOUNT",POCOrw.CostAcc);
    OUTFORMFIELD("F_PLANSHIPROW",POCOrw.PlanShipRow);
    OUTFORMFIELD("F_ROWDOCSTR",POCOrw.Comment);
    OUTFORMFIELD("F_ORDANTAL",ValToString(POCOrw.Ordered,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals));
    totweight = totweight + INr.Weight;
    totvolume = totvolume + INr.Volume;
    EndFormRow;
//PIFactor
  end;  
  PrintValue("F_SUMMAEJMOMS",POCOr.Sum2,M4Val,LangNrr,SysFormatRec,false);
  PrintValue("F_TOTALINCLVAT",POCOr.Sum1-POCOr.Sum2+POCOr.Sum3,M4Val,LangNrr,SysFormatRec,false);
  PrintValue("F_TOTALNONVAT",POCOr.Sum4-POCOr.Sum1-POCOr.Sum2+POCOr.Sum3,M4Val,LangNrr,SysFormatRec,false);

  OUTFORMFIELD("F_OBJECT",POCOr.Objects);
  PrintValue("F_TOTWEIGHT",totweight,M4Qty,LangNrr,SysFormatRec,false);
  PrintValue("F_TOTVOLUME",totvolume,M4Qty,LangNrr,SysFormatRec,false);
  RETURN;
END;

global
procedure DoPOCOForm(record RcVc RepSpec,record POCOVc POCOr)
BEGIN
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Boolean printf,langf;
  Integer intdocnr;
  string 30 formcode,langcode;
  Integer i,rwcnt;
    
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoPOCOForm;
  end;
  rwcnt = MatRowCnt(FDr);
  langcode = POCOr.LangCode;
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(FDr,i,FDrw);
    if (FDrw.LangCode==langcode) then begin
      i = -1;
      langf = true;
    end;
  end;
  if (langf==false) then begin langcode = ""; end;
  intdocnr = 1;
  printf = true;
  while (printf) begin  
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,POCOr.SerNr,FDrw.PrintGroupCode,
                      langcode,intdocnr,"POCOVc",formcode)) then
      begin
        goto LBREAKPOCO;
      end;
    end;
LBREAKPOCO:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin
        PrintPOCO(RepSpec,POCOr,formcode);
        CloseForm;
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoPOCOForm:;  
  RETURN;
END;
