external function Boolean HasContactClassification();
external procedure AddCurncyTotalsToTotalCurncyTotals(array string,array val,array val,array val,Integer,array string,array val,array val,array val,var Integer);
external function Integer GetIntYc(Date);
external procedure YcToStr(Integer,var string);
external function Boolean SetInSet2(string,string);
external procedure ClassTypef(string,string,var Boolean);
external procedure HTCustClass(string,var string);
external procedure HTCustClassType(string,var string);
external procedure BeginCurncyTotals(var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external procedure PrintPrepaymentsNrsOP(record RcVc,Boolean,string,Boolean,Integer,Integer);
external function string 255 CreateInvoiceNumber(LongInt,string);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function LongInt DateDiff(Date,Date);
external updating procedure OneAPSFormOpenOnDate(record RcVc,record CUVc,Integer,var val,var val,var val);
external procedure VendAged(record CUVc,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val);
external procedure APGetOnAccBalance(record RcVc,record CUVc,Boolean,var val,var val,var val,var val,var val,var val,var val,
                   Array string,Array val,var Integer,Array string,Array val,var Integer);
external procedure GetBaseCurncy(Integer,var string);
external procedure PrintAPSForm(record RcVc,record CUVc,
                                val,val,val,val,val,val,val,val,val,
                                Integer,Integer,
                                val,val,val,val,val,val,val,val,
                                Array Integer,Array LongInt,Array LongInt,Array LongInt,
                                Array Date,Array Date,Array val,Array val,Array val,Array val,Array val,
                                Array string,Array string,Integer);
external procedure CalcInt2(Boolean,val,LongInt,val,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure HTObj(string,var string);
external procedure HTInvSel(Integer, var string);
external procedure HTSuppGroup(string,var string);
external procedure HTVends(string, string, var string);

procedure AddAPSRow(Array Integer aRwtype,Array LongInt aInvoiceNr,Array string aRecNr,Array LongInt alatedays,Array LongInt aRemndr,
                    Array Date aInvDate,Array Date aDueDate,Array val aIntVal,Array val aRVal,array val aRVAT,Array val aSum4,
                    Array string aVEInvNo,Array string aCurncyCode,var Integer acnt,
                    record RcVc RepSpec,record CUVc VEp,LongInt maxintdays,record APVc APp,record VIVc VIp,var val intvp)
BEGIN
  LongInt intdays;
  record IIBlock IIRec;
  Date blankd;
  val t;
  string 255 recnr;
  record OPrsVc OPrsr;
  record PurgeTRVc PurgeTRr;
  record TRVc TRr;
  record BaseCurBlock BCb;
  
  BlockLoad(IIRec);
  BlockLoad(BCb);
  OPrsr.VINr = APp.SerNr;
  OPrsr.TransType = kOPrsTransTypeInvoice;
  if (ReadFirstKey("VIKey",OPrsr,2,true)) then begin
    recnr = APp.SerNr;
  end else begin
    OPrsr.VINr = APp.SerNr;
    OPrsr.TransType = kOPrsTransTypeNLTransaction;
    if (ReadFirstKey("VIKey",OPrsr,2,true)) then begin
      TRr.Number = OPrsr.TransNr;
      TRr.IntYc = GetIntYc(OPrsr.TransDate);                
      if (ReadFirstMain(TRr,2,true)) then begin
        YcToStr(TRr.IntYc,recnr);     
        recnr = recnr & "." & TRr.Number;
      end;
    end else begin
      OPrsr.VINr = APp.SerNr;
      OPrsr.TransType = kOPrsTransTypePurgeNLTransaction;
      if (ReadFirstKey("VIKey",OPrsr,2,true)) then begin
        PurgeTRr.Number = OPrsr.TransNr;
        PurgeTRr.IntYc = GetIntYc(OPrsr.TransDate);                
        if (ReadFirstMain(PurgeTRr,2,true)) then begin
          YcToStr(PurgeTRr.IntYc,recnr);     
          recnr = recnr & "." & PurgeTRr.Number;
        end;
      end;
    end;
  end;

  aRwtype[acnt] = VIp.InvType;
  aInvoiceNr[acnt] = APp.SerNr;
  aRecNr[acnt] = recnr;
  aVEInvNo[acnt] = VIp.InvoiceNr;
  aInvDate[acnt] = VIp.InvDate;
  aDueDate[acnt] = APp.DueDate;
  aRVal[acnt] = APp.RVal;
  if (RepSpec.flags[4]==0) then begin
    VIp.PayVal = MulRateToBase1(VIp.CurncyCode,VIp.PayVal,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,DefaultCurRoundOff);
  end;
  aSum4[acnt] = VIp.PayVal;
  if (nonblank(VIp.VATVal)) then begin // Yes, should be Full VAT value
    aRVAT[acnt] = VIp.VATVal;
  end else begin
    aRVAT[acnt] = VIp.CalcVATVal;
  end;
  alatedays[acnt] = DateDiff(APp.DueDate,RepSpec.d1);
  aIntVal[acnt] = blankval;
  if (RepSpec.flags[4]!=0) then begin
    aCurncyCode[acnt] = APp.CurncyCode;
  end else begin
    aCurncyCode[acnt] = BCb.BaseCur1;
  end;
  if (HasLocalization("DEN")) then begin
    if (maxintdays!=-1) then begin
      intdays = -alatedays[acnt];
      if (intdays>maxintdays) then begin intdays = maxintdays; end;
      if (intdays>0) then begin
        CalcInt2(false,aRVal[acnt],intdays,IIRec.IntRate,t);
        aIntVal[acnt] = t;
      end;
    end;
  end else begin
    intdays = -alatedays[acnt];
    if (intdays>0) then begin
      if ((VIp.InvType!=kInvoiceTypeCredit and VIp.InvType!=kInvoiceTypeCreditSpecialSales) and (VIp.InvType!=kInvoiceTypeInterest)) then begin
        t = MulRateToBase1(APp.CurncyCode,aRVal[acnt],VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,DefaultCurRoundOff);
        CalcInt2(false,t,intdays,IIRec.IntRate,t);
        aIntVal[acnt] = t;
      end;
    end;
  end;
  if (APp.CurncyCode==VEp.VECurncyCode) then begin
   intvp = aIntVal[acnt];
  end else begin
    if (blank(VEp.VECurncyCode)) then begin
      intvp = MulRateToBase1(APp.CurncyCode,aIntVal[acnt],VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,DefaultCurRoundOff);
    end else begin
      intvp = DivRateToBase1(VEp.VECurncyCode,aIntVal[acnt],VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,DefaultCurRoundOff);
    end;
  end;
  acnt = acnt + 1;
  RETURN;
END;
  
function Integer CompVETurnover(record CUVc VEp,val vals0,Date sd,Date ed)
BEGIN
  Integer res;
  val t;
  record VEVc oldVEr;
  
  oldVEr.Code = VEp.Code;
  if (nonblank(VEp.VECurncyCode)) then begin
    t = GetTurnover(VEp,"vesalesinclvat",sd,ed);
  end else begin
    t = GetTurnover(VEp,"vebalance",sd,ed);
  end;
  if (t>vals0) then begin
    res = 1;
  end else begin
    res = -1;
  end;
  CompVETurnover = res;
  RETURN;
END;

function Boolean CheckVINr(string vecode,LongInt minvinr)
BEGIN
  Boolean res;
  Boolean TrHs;
  record VIVc VIr;
  LongInt vinr;
  
  vinr = 0;
  TrHs = true;
  VIr.VECode = vecode;
  while (LoopKey("VECode",VIr,1,TrHs)) begin
    if (VIr.VECode!=vecode) then begin TrHs = false; end;
    if (TrHs) then begin
      vinr = vinr + 1;
      if (vinr>=minvinr) then begin 
        res = true; 
        goto LCheckVINr;
      end;
    end;
  end;
LCheckVINr:;  
  CheckVINr = res;
  RETURN;
END;

procedure PintAPSHeader(record RcVc RepSpec,string frve,string tove,string a,string b)
BEGIN
  Integer rw;
  string 255 tstr;

  rw = 1;
  HTVends(frve,tove,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTInvSel(RepSpec.flags[0],tstr);
  Header(rw,tstr,0);
  HTSuppGroup(RepSpec.f3,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.ObjStr)) then begin
    HTObj(RepSpec.ObjStr,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f2)) then begin
    if (blank(a) and blank(b)) then begin
    end else begin
      tstr = USetStr(4908) & " ";
      tstr = tstr & a;
      if (a!=b) then begin
        tstr = tstr & " : ";
        tstr = tstr & b;
      end;
    end;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (HasContactClassification) then begin
    HTCustClass(RepSpec.f4,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end; 
    HTCustClassType(RepSpec.f5,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  tstr = RepSpec.d1;
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end; 
  RETURN;
END;

procedure PrintHeaderLine(record RcVc RepSpec)
BEGIN
  SetRepCol(2,60);
  SetRepCol(3,288);
  SetRepCol(4,384);
  SetRepCol(5,293);
  SetRepCol(6,140);
  SetRepCol(9,221);
  StartFormat(15);
  OutString(0,0,USetStr(10801),false);
  OutString(100,0,USetStr(10802),false);
  OutString(150,0,USetStr(10803),false);
  OutString(250,0,USetStr(10804),false);
  OutString(340,0,USetStr(10805),true);
  if (RepSpec.flags[14]!=0) then begin
    OutString(390,0,USetStr(10807),true);
  end;
  OutString(1,0,USetStr(10806),true);
  EndFormat;
  if (nonblank(RepSpec.f2)) then begin
    StartFormat(15);
    OutString(120,0,USetStr(4908),false);
    EndFormat;
  end;
  RETURN;
END;

global
procedure APSrList(record RcVc RepSpec,record CUVc VEp,val ARSSum,val ARSOnAccBal,val ARSOnAccBalb1,val ARSIntSum,val s0,val s1,val s16,val s31,val s61,val s91,val s121,val s151,
                   Array Integer aRwtype,Array LongInt aInvoiceNr,Array string aRecNr,Array LongInt alatedays,Array LongInt aRemndr,
                   Array Date aInvDate,Array Date aDueDate,Array val aIntVal,Array val aRVal,Array val aRVAT,Array val aSum4,
                   Array string aVEInvNo,Array string aCurncyCode,Integer acnt,
                   Array string aonacccur,Array val aonaccv1,Integer onacccurcnt)
BEGIN
  Integer i;
  Boolean testf;
  string 255 tstr,basecur1;
  val arsum;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt;
  Boolean printedcuf;
  record AgedBlock Ab;
  array val avonacc2;
  array val avonacc3;
  
  BlockLoad(Ab);
  BeginCurncyTotals(curcnt);
  AddCurncyTotalsToTotalCurncyTotals(aonacccur,aonaccv1,avonacc2,avonacc3,onacccurcnt,acur,av1,av2,av3,curcnt);
  GetBaseCurncy(1,basecur1);
  for (i=0;i<acnt;i=i+1) begin
    testf = true;
    if (testf) then begin
      if (!printedcuf) then begin
        Gray_Divider(0,1);
        StartFormat(15);
        OutString(0,"DblCUVc",VEp.Code,false);
        OutString(100,0,VEp.Name,false);
        if (RepSpec.flags[4]==1) then begin  
          OutString(1,0,VEp.VECurncyCode,true);
        end;
        EndFormat;
        StartFormat(15);
        OutString(0,0,VEp.Phone,false);
        OutString(120,0,VEp.Fax,false);
        OutString(240,0,VEp.SalesMan,false);
        EndFormat;
        printedcuf = true;
      end;
      if (RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel) then begin
        OutString(0,0,"",false);
        OutString(0,0,"",false);
      end;
      StartFormat(15);
      tstr = CreateInvoiceNumber(aInvoiceNr[i],"");
      if (nonblank(aVEInvNo[i])) then begin
        tstr = tstr & "(";
        tstr = tstr & aVEInvNo[i];
        tstr = tstr & ")";
      end;
      switch (aRwtype[i]) begin
        case 0:
          OutStringID(150,"DblTrans2",tstr,false,aRecNr[i]);
        otherwise  
          OutString(150,"DblVePerVI",tstr,false);
      end;
      OutDate(250,0,aDueDate[i],false);
      if (Ab.ShowDelayDays!=0) then begin
        if (alatedays[i]<0) then begin
          OutLongInt(340,0,-alatedays[i],true);      
        end else begin
          OutLongInt(340,0,0,true);      
        end;
      end else begin      
        if (alatedays[i]==-1) then begin
          OutString(340,0,alatedays[i],true);      
        end else begin
          OutLongInt(340,0,alatedays[i],true);      
        end;
      end;
      if (RepSpec.flags[14]!=0) then begin
        OutVal(390,0,aRVAT[i],M4Val,true);
      end;
      if ((aCurncyCode[i]!=VEp.VECurncyCode) and (RepSpec.flags[4]==1)) then begin
        OutVal(440,0,aRVal[i],M4Val,true);
        OutString(480,0,aCurncyCode[i],true);
      end else begin
        OutVal(480,0,aRVal[i],M4Val,true);
      end;
      EndFormat;
      if (RepSpec.flags[4]==1) then begin
        AddCurncyTotals(acur,av1,curcnt,aCurncyCode[i],aRVal[i]);
      end else begin
        if (aCurncyCode[i]!=VEp.VECurncyCode) and (VEp.VECurncyCode!=basecur1) then begin
          AddCurncyTotals(acur,av1,curcnt,aCurncyCode[i],aRVal[i]);
        end else begin
          AddCurncyTotals(acur,av1,curcnt,"",aRVal[i]);
        end;
      end;
      
      if (RepSpec.flags[14]!=0) then begin
        AddCurncyTotals(acur,av2,curcnt,aCurncyCode[i],aRVAT[i]);
      end;
    end;
  end;
  arsum = ARSSum;
  if (ARSOnAccBal!=0) then begin
    if (!printedcuf) then begin
      Gray_Divider(0,1);
      StartFormat(15);
      OutString(0,"DblCUVc",VEp.Code,false);
      OutString(100,0,VEp.Name,false);
      if (RepSpec.flags[4]==1) then begin  
        OutString(1,0,VEp.VECurncyCode,true);
      end;
      EndFormat;
      StartFormat(15);
      OutString(0,0,VEp.Phone,false);
      OutString(120,0,VEp.Fax,false);
      OutString(240,0,VEp.SalesMan,false);
      EndFormat;
      printedcuf = true;
    end;
    StartFormat(15);
    OutString(200,0,USetStr(11857),false);
    if (RepSpec.flags[4]!=0) then begin
      OutVal(1,0,ARSOnAccBal,M4Val,true);
      arsum = arsum + ARSOnAccBal;
    end else begin
      OutVal(1,0,ARSOnAccBalb1,M4Val,true);
      arsum = arsum + ARSOnAccBalb1;
    end;
    EndFormat;
    if (RepSpec.flags[13]!=0) then begin
      if (RepSpec.flags[2]==0) then begin
        PrintPrepaymentsNrsOP(RepSpec,RepSpec.flags[4]!=0,VEp.Code,nonblankdate(RepSpec.d1),300,440);
      end else begin
        PrintPrepaymentsNrsOP(RepSpec,RepSpec.flags[4]!=0,VEp.Code,nonblankdate(RepSpec.d1),300,1);
      end;
    end;            
  end;
  if (printedcuf) then begin
    Black_Divider(370,1);
  end;
  if (RepSpec.flags[4]!=0) then begin
    PrintCurncyTotals(acur,av2,av1,av3,curcnt,390,480,-1,320,false,RepSpec.PocketPC);
  end else begin
    if (arsum!=0) then begin
      StartFormat(15);
       OutVal(1,0,arsum,M4Val,true);
      EndFormat;
    end;
  end;
  RETURN;
END;

updating procedure OneAPSFormOpen(record RcVc RepSpec,record CUVc VEp,Integer reportmode,var val balp,var val balpb1,var val vatp)
BEGIN
  record APVc APr;
  record VIVc VIr;
  Integer rwcnt;
  Boolean TrHs;
  val ARSSum,ARSSumb1;
  val ARSIntSum;
  val ARSSumNotLate;
  val ARSSumLate;
  Integer ARSLateCount;
  Integer ARSNotLateCount;
  val ARSARSum;
  val ARSsact,ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151;
  val ARSStartBal;
  val ARSOnAccBal;
  val ARSOnAccBalb1;
  val intv;
  LongInt latedays,maxintdays;
  Boolean testf;
  val rval,rvalb1,rval2;
  val fr,to1,to2,br1,br2;
  Boolean onaccf;
  record SMVc CurTotalsr;
  val sumbooked,sumnow,sumcurncy,sumdiff;
  Integer remlev;
  Array Integer aRwtype;
  Array LongInt aInvoiceNr;
  Array LongInt alatedays;
  Array LongInt aRemndr;
  Array Date aInvDate;
  Array Date aDueDate;
  Array val aIntVal;
  Array val aRVal;
  Array val aRVAT;
  Array val aSum4;
  Array val aDebVal;
  Array string 20 aVEInvNo;
  Array string 5 aCurncyCode;
  Array string 255 aRecNr;
  Integer acnt;
  string 10 basecur1;
  val vatbc;
  Array string 10 credaccs;
  Array val credbal;
  Integer credcnt;
  array val av1;
  array string 20 acur;
  Integer curcnt;
  
  GetBaseCurncy(1,basecur1);
  if (blank(VEp.VECurncyCode)) then begin
    VEp.VECurncyCode = basecur1;
  end;
  if (nonblankdate(RepSpec.d1)) then begin
    maxintdays = DateDiff(CurrentDate,RepSpec.d1);
  end else begin
    maxintdays = -1;
  end;
  GetFullCurncyRate(VEp.VECurncyCode,CurrentDate,fr,to1,to2,br1,br2);
  rwcnt = 0;
  APGetOnAccBalance(RepSpec,VEp,false,ARSOnAccBalb1,rval2,ARSOnAccBal,sumbooked,sumnow,sumcurncy,sumdiff,credaccs,credbal,credcnt,acur,av1,curcnt);//ObjStr
  if (VEp.Code!=APr.VECode) then begin
    if (ARSOnAccBal!=0) then begin onaccf = true; end;
  end;
  APr.SerNr = 0;
  APr.VECode = VEp.Code;
  TrHs = true;
  while (LoopKey("VECode",APr,2,TrHs)) begin
    testf = true;
    if (TrHs) then begin
      if (VEp.Code!=APr.VECode) then begin TrHs = false; end;
    end;
    if (TrHs==false) then begin testf = false; end;
    if (testf) then begin    
      VIr.SerNr = APr.SerNr;
      if (ReadFirstMain(VIr,1,true)) then begin end;
      if (VIr.Invalid!=0) then begin goto L20OneAPSFormOpen; end;
      if (reportmode==0) then begin
        if ((VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) and (RepSpec.flags[9]==0)) then begin
          goto L20OneAPSFormOpen;
        end;
      end;
      if (reportmode==1) then begin
        if (nonblank(RepSpec.ObjStr)) then begin
          if (SetInSet(RepSpec.ObjStr,VIr.Objects)==false) then begin
            goto L20OneAPSFormOpen;
          end;
        end;
      end;
      latedays = DateDiff(APr.DueDate,RepSpec.d1);
      if (RepSpec.Comparison!=0) then begin
        if ((-latedays)<RepSpec.Comparison) then begin goto L20OneAPSFormOpen; end;
      end;
      if (nonblank(VIr.VATVal)) then begin
        vatbc = MulRateToBase1(VIr.CurncyCode,VIr.VATVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
      end else begin
        vatbc = MulRateToBase1(VIr.CurncyCode,VIr.CalcVATVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
      end;        
      if (RepSpec.flags[4]==0) then begin
        APr.RVal = MulRateToBase1(VIr.CurncyCode,APr.RVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
        VIr.VATVal = vatbc;
      end;
      if (RepSpec.flags[5]!=0) then begin
        if (RepSpec.flags[4]==0) then begin
          APr.RVal = APr.RVal - MulRateToBase1(VIr.CurncyCode,VIr.HoldSum,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
        end else begin
          APr.RVal = APr.RVal - VIr.HoldSum;
        end;
        APr.BookRVal = APr.BookRVal - MulRateToBase1(VIr.CurncyCode,VIr.HoldSum,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
        if (VIr.InvType!=kInvoiceTypeCredit and VIr.InvType!=kInvoiceTypeCreditSpecialSales) then begin
          if (APr.RVal<0) then begin
            APr.RVal = 0;
          end;
          if (APr.BookRVal<0) then begin
            APr.BookRVal = 0;
          end;
        end;
        if (VIr.Closed!=0) then begin
          APr.RVal = 0;
          APr.BookRVal = 0;
        end;
      end;
      if ((RepSpec.flags[0]==0) or (latedays<0)) then begin
        if (VIr.CurncyCode==VEp.VECurncyCode) then begin
          rval = APr.RVal;
          rvalb1 = APr.BookRVal;
        end else begin
          if (blank(VEp.VECurncyCode)) or (VEp.VECurncyCode==basecur1) then begin
            rval = APr.BookRVal;
            rvalb1 = APr.BookRVal;
          end else begin
            rval = DivRateToBase1(VEp.VECurncyCode,APr.BookRVal,fr,to1,to2,br1,br2,DefaultCurRoundOff);
            rvalb1 = rval;
          end;
        end;
        switch (RepSpec.flags[0]) begin
          case 0:
            ARSSum = ARSSum + rval;
            ARSSumb1 = ARSSumb1 + rvalb1;
            if (latedays>-1) then begin//-2???
              ARSSumNotLate = ARSSumNotLate + rval;
              ARSNotLateCount = ARSNotLateCount + 1;
              AddAPSRow(aRwtype,aInvoiceNr,aRecNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRVAT,aSum4,aVEInvNo,aCurncyCode,acnt,
                        RepSpec,VEp,maxintdays,APr,VIr,intv);
              ARSIntSum = ARSIntSum + intv;
              vatp = vatp + vatbc;
            end else begin
              ARSSumLate = ARSSumLate + rval;
              ARSLateCount = ARSLateCount + 1;
              AddAPSRow(aRwtype,aInvoiceNr,aRecNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRVAT,aSum4,aVEInvNo,aCurncyCode,acnt,
                        RepSpec,VEp,maxintdays,APr,VIr,intv);                        
              ARSIntSum = ARSIntSum + intv;
              vatp = vatp + vatbc;
            end;
          case 2:
            if (latedays<=-1) then begin//-2???
              ARSSum = ARSSum + rval;
              ARSSumb1 = ARSSumb1 + rvalb1;
              ARSSumLate = ARSSumLate + rval;
              ARSLateCount = ARSLateCount + 1;
              AddAPSRow(aRwtype,aInvoiceNr,aRecNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRVAT,aSum4,aVEInvNo,aCurncyCode,acnt,
                        RepSpec,VEp,maxintdays,APr,VIr,intv);
              ARSIntSum = ARSIntSum + intv;
              vatp = vatp + vatbc;
            end;
        end;
      end;
    end;
L20OneAPSFormOpen:;
  end;
  VendAged(VEp,ARSARSum,ARSsact,ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151);
  ARSARSum = ARSARSum + ARSOnAccBal;
  ARSs0 = ARSs0 + ARSOnAccBal;
  testf = true;
  if (RepSpec.flags[1]==1) then begin
    if (ARSARSum==0) then begin
      testf = false;
    end;
  end;
  if (RepSpec.flags[16]!=0) then begin
    if (acnt==0) then begin testf = false; end;
  end;
//  if ((onaccf==true) and (reportmode==1)) then begin testf = true; end;
  if (onaccf==true) then begin testf = true; end;
  if (testf) then begin
    switch (reportmode) begin
      case 0: 
          PrintAPSForm(RepSpec,VEp,ARSSum,ARSOnAccBal,ARSOnAccBalb1,ARSSumb1,ARSIntSum,ARSSumLate,ARSARSum,ARSStartBal,ARSSumNotLate,ARSLateCount,ARSNotLateCount,
                       ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRVAT,aSum4,aDebVal,aVEInvNo,aCurncyCode,acnt); 
//        UpdateVEBal(VEp->Code,&ARSr.ARSum,&CurrentDate); is it needed        
      case 1: 
        APSrList(RepSpec,VEp,ARSSum,ARSOnAccBal,ARSOnAccBalb1,ARSIntSum,ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151,aRwtype,aInvoiceNr,aRecNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,aRVal,aRVAT,aSum4,aVEInvNo,aCurncyCode,acnt,acur,av1,curcnt); 
    end;
  end;
  balpb1 = balpb1 + ARSOnAccBalb1;
  balpb1 = balpb1 + ARSSumb1;

  balp = balp + ARSOnAccBal;
  balp = balp + ARSSum;
  RETURN;
END;

global
updating procedure DoAPSForms(record RcVc RepSpec,Integer reportmode)
BEGIN
  record CUVc VEr;
  Boolean VEs,manycurf;
  string 255 frve,tove;
  string 255 a,b,lastcrncy;
  val TotSum,TotSumB1,TotVat;
  Boolean skip;
  Boolean skip2;
  Array string 20 ac;
  Date d1;
  
  d1 = RepSpec.d1;  
  frve = FirstInRange(RepSpec.f1,20);
  tove = LastInRange(RepSpec.f1,20);
  a = FirstInRange(RepSpec.f2,20);
  b = LastInRange(RepSpec.f2,20);
  if (reportmode==1) then begin
    StartReportJob(USetStr(10800));    
     PintAPSHeader(RepSpec,frve,tove,a,b);
    EndHeader;
    PrintHeaderLine(RepSpec);
  end;
  if (blankdate(RepSpec.d1)) then begin
    RepSpec.d1 = CurrentDate;
  end;  
  VEr.Code = frve;
  VEs = true;
  while (LoopMain(VEr,1,VEs)) begin
    skip2 = false;
    if (nonblank(tove)) then begin
      if (VEr.Code>tove) then begin VEs = false; end;
    end;
    if (nonblank(RepSpec.f2)) then begin
      if (nonblank(b)) then begin
        if (VEr.SalesMan>b) then begin skip2 = true; end;
        if (VEr.SalesMan<a) then begin skip2 = true; end;
      end;
      if (blank(b)) then begin
        if (VEr.SalesMan!=a) then begin skip2 = true; end;
      end;
    end;
    if (VEs==false) then begin skip2 = true; end;
    if (VEr.VEType==0) then begin skip2 = true; end;
    if (skip2==false) then begin
      if (RepSpec.vals0!=0) then begin// this is too slow
//        if (CompVETurnover(VEr,RepSpec.vals0,RepSpec.sStartDate,RepSpec.sEndDate)<0) then begin skip2 = true; end;
      end;
      if (RepSpec.long1!=-1) then begin
       if (CheckVINr(VEr.Code,RepSpec.long1)==false) then begin skip2 = true; end;
      end;
    end;
    if (skip2==false) then begin
      if (nonblank(RepSpec.f4)) then begin
        if (SetInSet2(RepSpec.f4,VEr.Classification)==false) then begin
          skip2 = true;
        end;
      end;
      if (nonblank(RepSpec.f5)) then begin
        if (skip2==false) then begin
          skip2 = false;
          ClassTypef(RepSpec.f5,VEr.Classification,skip2);
          skip2 = !skip2;
        end;
      end;
    end;
    if (skip2==false) then begin
      if (blank(RepSpec.f3) or (RepSpec.f3==VEr.VECat)) then begin
        skip = false;
        if (skip==false) then begin
          if (blankdate(d1)) then begin
            OneAPSFormOpen(RepSpec,VEr,reportmode,TotSum,TotSumB1,TotVat);
          end else begin
            OneAPSFormOpenOnDate(RepSpec,VEr,reportmode,TotSum,TotSumB1,TotVat);
          end;
          if (lastcrncy!=VEr.VECurncyCode) and nonblank(lastcrncy) then begin
            manycurf = true;
          end;
          lastcrncy = VEr.VECurncyCode;
        end;
      end;
    end;
  end;
  if (reportmode==1) then begin
    Gray_Divider(0,1);
    StartFormat(15);
     if (RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel) then begin
       OutString(0,0,"",false);
       OutString(0,0,"",false);
       OutString(0,0,"",false);
       OutString(0,0,"",false);
       OutString(0,0,"",false);
     end;
     if (RepSpec.flags[14]!=0) then begin
       OutVal(390,0,TotVat,M4Val,true);
     end;
     if (manycurf or RepSpec.flags[4]==0) then begin
       OutVal(480,0,TotSumB1,M4Val,true);
      end else begin
       OutVal(480,0,TotSum,M4Val,true);
      end;
    EndFormat;
    EndJob;
  end;
  RETURN;
END;

global
updating procedure APS2Rn(record RcVc RepSpec)
begin
  DoAPSForms(RepSpec,1);
  return;
end;
