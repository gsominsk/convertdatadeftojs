external function roundmode DefaultRoundMode();
external function Boolean FindFormcode(Integer,Integer);
external function Boolean Getformcode(Integer,Integer,string,string,string,LongInt,LongInt,string,string,Integer,string,var string);
external procedure CommonDocumentFields(record RcVc);
external function Boolean GetLastDprStartVal(Integer,string,val,var val,var val);
external procedure GetAC2Accounts(Integer,Integer,string,string,var string);
external procedure GetDprModDescription(string,var string);
external procedure GetDepreciationPrc(string,var val);
external function Boolean GetInventoryNrWrofDate(string,var Date);
external procedure GetInventoryNrWrofComment(string,var string);
external procedure GetInventoryNrWrofNumber(string,var LongInt);
external procedure OneAT2UnitDeprCalculation(Integer,Integer,Integer,Boolean,Date,Date,string,var val,var val,var val,var val,var string,val,val,Boolean);
external procedure GetUserName(string, var string);
external procedure GetMonthText(string,date, var string);
external procedure GetUserJob(string, var string);

function Boolean LastDpr(string InventoryNr,Date dat,var record AT2DprVc Dpr)
begin
  Boolean res;
  Boolean TrHs;
  record InvrsVc Invrsr;
  
  TrHs = true;
  Invrsr.InventoryNr = InventoryNr;
  Invrsr.FileName = "AT2DprVc";
  Invrsr.TransDate = dat;
  while (LoopBackKey("FileName",Invrsr,3,TrHs)) begin
    if (Invrsr.InventoryNr!=InventoryNr) then begin TrHs = false; end;
    if (Invrsr.FileName!="AT2DprVc") then begin TrHs = false; end;
    if (Invrsr.TransDate>dat) then begin TrHs = false; end;
    if (TrHs) then begin
      Dpr.SerNr = Invrsr.TransNr;
      if (ReadFirstMain(Dpr,1,true)) then begin
        TrHs = false;
        res = true;
      end;
    end;    
  end;
  LastDpr = res;
  return;
end;

procedure GetResponsiblePerson(record AT2unitVc ATUnitr,var string ucode)
begin
  record AT2TakeVc ATTaker;
  record InvrsVc invrsr;
  
  row AT2TakeVc ATTakerw;
  boolean Trhs;
  string 255 tstr,res;
  
  Invrsr.FileName = "AT2TakeVc";
  Invrsr.InventoryNr = ATUnitr.InventoryNr;
  TrHs = true;
  res = ATUnitr.RespPerson;
  while (LoopBackKey("FileName",Invrsr,1,trhs)) begin
    if (Invrsr.FileName!="AT2TakeVc") then begin
      TrHs = false;
    end;
    if (Invrsr.InventoryNr!=ATUnitr.InventoryNr) then begin
      trHs = false;
    end;
    if (Trhs) then begin
      if (Invrsr.LegalCode != "") then begin
        res = Invrsr.LegalCode;
        TrHs = false;
      end;
    end;
  end;
  ucode = res;
  return;
end;

procedure GetClassDescr(string code, var string res)
begin
  record AC2Block AC2bl;
  row AC2Block ACrw;
  integer rw,rwc;
  blockload(AC2bl);
  rwc = matrowcnt(AC2bl);
  for (rw = 0; rw< rwc; rw = rw +1) begin
    matrowget(AC2bl,rw,ACrw);
    if (ACrw.Code == code) then begin
      res = ACrw.Comment;
      rw = rwc; 
    end;
  end;
return;
end;

procedure CalcDeprVal(record AT2UnitVc AT2Unitr,var val res,var date ed,integer model,val resval,integer type)
BEGIN
  record AT2AccBlock AT2AccRec;
  Date sd;
  val tdprv,dprv;
  val t;

  blockload(AT2AccRec);
  res = blankval;
//  if (GetInventoryNrWrofDate(AT2Unitr.InventoryNr,ed)) then begin end;
  if (type == 0) then begin  
    ed = AddDay(ed,-1);
    ed = AddDay(ed,-GetDay(ed) + DaysInMonth(GetYear(ed),GetMonth(ed)));
  end;
  if (model==0) then begin
    sd = AT2Unitr.StartingDate1;
  end else begin  
    sd = AT2Unitr.StartingDate2;
  end;  
 
  if (type == 1) then begin
    ed = AddDay(sd,DaysInMonth(GetYear(ed),GetMonth(ed))-1);
  end;
  if (type==2) then begin
    ed = AddMonth(sd,12);
    ed = AddDay(ed,-1);
  end;
  if (blankdate(sd)) or (blankdate(ed)) then begin
    goto LEND;
  end;
  if (model==0) then begin 
    OneAT2UnitDeprCalculation(0,0,model,false,sd,ed,AT2Unitr.InventoryNr,dprv,tdprv,t,t,AT2Unitr.Model1,resval,AT2Unitr.ResVal,false);
  end else begin
    OneAT2UnitDeprCalculation(0,0,model,false,sd,ed,AT2Unitr.InventoryNr,dprv,tdprv,t,t,AT2Unitr.Model2,resval,AT2Unitr.ResVal,false);
  end;
//  StopAlert(dprv);
  res = tdprv;// + dprv;
  //res = blankval;
LEND:;  
  RETURN;
END;

procedure PrintAssetTransHistory(record AT2UnitVc ATUnitr)
begin
  record AT2TransVc AT2Transr;
  val resval1;
  boolean TrHs;
  boolean testf;
  resval1 = ATUnitr.PurchVal - AtUnitr.InitDeprVal1;
//  resval2 = ATUnitr.PurchVal - AtUnitr.InitDeprVal2;
  
  AT2Transr.InventoryNr = ATunitr.InventoryNr;
  TrhS = true;
  while (loopKey("TransDate",AT2Transr,1,Trhs)) begin
    testf = true;
    if (AT2Transr.InventoryNr != ATUnitr.InventoryNr) then begin
      //TrHs = false;
      testf = false;
    end;
    if (testf) then begin
      OUTFORMFIELD("F_TRANSDATE",AT2Transr.TransDate);
      OUTFORMFIELD("F_SUMMA",AT2Transr.Sum);
      OUTFORMFIELD("F_TRANSNR",AT2Transr.TransNr);
      OUTFORMFIELD("F_RESDEPR",resval1);
      switch (AT2Transr.Type) begin
        case 0:  OUTFORMFIELD("F_DOCTYPE",USetStr(16371));
          resval1 = resval1 - AT2Transr.Sum;
        case 1:  OUTFORMFIELD("F_DOCTYPE",USetStr(16372));
          resval1 = resval1 - AT2Transr.Sum;
        case 2:  OUTFORMFIELD("F_DOCTYPE",USetStr(16373));
      end;
      if (AT2Transr.Type==2) then begin
        OUTFORMFIELD("F_PUTINUSENR",AT2Transr.TransNr);
        OUTFORMFIELD("F_PUTINUSEDATE",AT2Transr.TransDate);
      end;
      if (AT2Transr.Type ==1) then begin
        OUTFORMFIELD("F_WROFDATE",AT2Transr.TransDate);
        OUTFORMFIELD("F_WROFNR",AT2Transr.TransNr);
        OUTFORMFIELD("F_WROFAMOUNT",AT2Transr.Sum);
      end;
     endformrow; 
    end;
  end;
return;
end;


procedure InsertInArray(var array integer type,var array longint sernr,var array date docdate,integer instype,longint inssernr,date insdate,var integer size)
begin
  integer i;
  
  for (i = size; i >0;i  = i -1) begin
    if (docdate[i-1] > insdate) then begin
      type[i] = type[i-1];
      sernr[i] = sernr[i-1];
      docdate[i] = docdate[i-1];
    end
    else begin
      type[i] = instype;
      sernr[i] = inssernr;
      docdate[i] = insdate;
      goto LExit;
    end;  
  end;
  type[0] = instype;
  sernr[0] = inssernr;
  docdate[0] = insdate;
LExit:;
  size = size +1;
return;
end;

procedure fillAssetHistory(record AT2UnitVc At2Unitr,var array integer type,var array longint sernr,var array date docdate,var integer size)
begin
  record InvrsVc Invrsr;
  record At2TransVc AT2Transr;
 
  boolean TrHs;
  
  TrHs = true; 
  Invrsr.InventoryNr = AT2unitr.InventoryNr;
  
  while  (LoopMain(Invrsr,1,trhs)) begin
    if (Invrsr.InventoryNr != AT2Unitr.InventoryNr) then begin
      TrHs = false;
    end;
    if (trhs) then begin
      InsertInArray(type,sernr,docdate,0,Invrsr.TransNr,Invrsr.TransDate,size);
    end;
  end; 

  AT2Transr.InventoryNr = AT2Unitr.InventoryNr;
  TrHs = true;
  while (LoopMain(AT2Transr,1,true)) begin
    if (AT2Transr.InventoryNr != AT2Unitr.InventoryNr) then begin
      Trhs = false;
    end;
    if (trhs) then begin
      InsertInArray(type,sernr,docdate,1,AT2Transr.TransNr,At2Transr.TransDate,size);
    end;
  end;
  
return;
end;


procedure PrintAssetHistory(record AT2UnitVc ATUnitr,var val endval,var val endval2)
begin

  array integer type;
  array longint sernrs;
  array date docdate;
  integer size;  
  record AT2TransVc At2Transr;
  record AT2DprVc AT2Dprr;
  record AT2DprVc prevDpr;
  record InvrsVc Invrsr;
  date startdate,cd,ed;
  string 50 sernr,atacc;
  string 255 tstr;
  string 100 docstr;
  val curval,curval2,curval0,t,t2,res,prevval0,prevval1,revval,startval;
  boolean TrHs,testf;
  integer i;
  
  Invrsr.InventoryNr = ATunitr.InventoryNr;
  TrhS = true;
  curval = ATUnitr.PurchVal-ATUnitr.InitDeprVal1;
  curval2 = ATUnitr.PurchVal-ATUnitr.InitDeprVal2;
  curval0 = ATUnitr.PurchVal-ATUnitr.InitDeprVal1;;
  startdate = ATunitr.StartingDate1;
  cd = startdate;
  sernr = ATUnitr.SerialNr;
  
//  GetAC2Accounts(0,0,ATUnitr.AT2Code,atacc);
//  GetDepreciationPrc(ATUnitr.Model1,t);
 // GetDepreciationPrc(ATUnitr.Model2,t2);
  size = 0;
  FillAssetHistory(ATUnitr,type,sernrs,docdate,size);
  
  for (i = 0; i < size; i = i +1) begin
  //  OUTFORMFIELD("F_ROWTEST",sernrs[i]);
  //  endFormrow;
  end;
  prevval0 =0;
  prevval1 =0;

  if (ATUnitr.NewUsedf==1) then begin
    OUTFORMFIELD("F_ROWSTARTVAL",ATUnitr.PurchVal);
    OUTFORMFIELD("F_CURROWSTARTVAL",ATUnitr.PurchVal);
    OUTFORMFIELD("F_ROWSTARTDATE",startdate);
    OUTFORMFIELD("F_ROWSERIALNO",sernr);
    OUTFORMFIELD("F_ROWDEPARTMENT",ATUnitr.DepCode);
    OUTFORMFIELD("F_ROWATACC",atacc);
    OUTFORMFIELD("F_ROWINVNR",ATUnitr.InventoryNr);
    OUTFORMFIELD("F_ROWDEPRVAL1",ATUnitr.InitDeprVal1); 
    OUTFORMFIELD("F_ROWDEPRVAL2",ATUnitr.InitDeprVal2); 
    OUTFORMFIELD("F_ROWCURVAL1",curval);
    OUTFORMFIELD("F_ROWCURVAL2",curval2);
    OUTFORMFIELD("F_ROWCALCVAL",curval0);
    endformrow;    
  end;
  for (i = 0; i < size; i= i +1) begin
    revval = 0;
    cd = docdate[i];
    t = 0;
    t2 = 0;
    revval = blankval;
    curval = blankval;
    curval2 = blankval;
    curval0 = blankval;
    OUTFORMFIELD("F_CURROWSTARTVAL",curval);
    OUTFORMFIELD("F_CURROWSTARTVAL2",curval2);
    if (type[i] ==0) then begin
      Invrsr.InventoryNr = ATUnitr.InventoryNr;
      if (ReadFirstMain(Invrsr,1,true)) then begin
        if (Invrsr.FileName=="AT2DprVc" or Invrsr.FileName=="AT2DprRepVc") then begin
          docstr = USetStr(16370);
          AT2Dprr.InventoryNr = ATUnitr.InventoryNr;
          AT2Dprr.SerNr = sernrs[i];
          if (ReadFirstMain(AT2Dprr,1,true)) then begin
//          if (readfirstkey("InventoryNr",AT2Dprr,2,true)) then begin
          if (nonblankdate(AT2Dprr.StartingDate1)) then begin
              startdate = AT2Dprr.StartingDate1;
            end;
            if (nonblank(AT2Dprr.StartVal)) then begin            
              if (LastDpr(ATUnitr.InventoryNr,AddDay(startdate,-1),prevDpr)) then begin
                curval =  curval + AT2Dprr.StartVal - prevDpr.StartVal;
                curval2 =  curval2 + AT2Dprr.StartVal - prevDpr.StartVal;
                curval0 =  curval0 + AT2Dprr.StartVal - prevDpr.StartVal;
                revval = AT2Dprr.StartVal - prevDpr.StartVal;
              end else begin               
                curval =  curval + AT2Dprr.StartVal - ATUnitr.PurchVal;
                curval2 =  curval2 + AT2Dprr.StartVal - ATUnitr.PurchVal;
                curval0 =  curval0 + AT2Dprr.StartVal - ATUnitr.PurchVal;
                revval = AT2Dprr.StartVal - ATUnitr.PurchVal;
              end;
            end;
          end;
        end;      
      end;
    end else begin
      At2Transr.TransNr = sernrs[i];
      At2transr.InventoryNr = ATUnitr.InventoryNr;
      if (readfirstmain(At2Transr,2,true)) then begin
        switch (AT2Transr.Type) begin
          case 0: docstr = USetStr(16371);                  
                  t = AT2Transr.Sum;
                  t2 = AT2transr.Sum2;
          case 1: docstr = USetStr(16372);
          case 2: docstr = USetStr(16373);
        end;
      end;      
    end;
  
    ed = docdate[i];
    
    
//    CalcDeprVal(ATUnitr,res,ed,0,curval0,0);
//    t = res - prevval0;
    curval = curval - t;
    OUTFORMFIELD("F_ROWDEPRVAL1",t); 
    
///    CalcDeprVal(ATUnitr,res,ed,1,curval0,0);
   
//    t = res - prevval1;
    curval2 = curval2 - t2;

    OUTFORMFIELD("F_ROWDEPRVAL2",t2); 
    if (revval>0) then begin
      OUTFORMFIELD("F_REVALVALUEPOS",revval);
      OUTFORMFIELD("F_REVALVALUENEG",0.00);
    end else begin
      OUTFORMFIELD("F_REVALVALUEPOS",0.00);
      OUTFORMFIELD("F_REVALVALUENEG",-revval);
    end;
      OUTFORMFIELD("F_ROWCURVAL1",curval);
      OUTFORMFIELD("F_ROWCURVAL2",curval2);
      OUTFORMFIELD("F_ROWCALCVAL",curval0);
      OUTFORMFIELD("F_ROWDOCSTR",docstr);
      OUTFORMFIELD("F_ROWDOCNR",sernrs[i]);
      OUTFORMFIELD("F_ROWDOCDATE",cd);
      OUTFORMFIELD("F_ROWSTARTVAL",ATUnitr.PurchVal);
      OUTFORMFIELD("F_ROWSTARTDATE",startdate);
      OUTFORMFIELD("F_ROWSERIALNO",sernr);
      OUTFORMFIELD("F_ROWDEPARTMENT",ATUnitr.DepCode);
      OUTFORMFIELD("F_ROWATACC",atacc);
      OUTFORMFIELD("F_INVENTORYNR",ATUnitr.InventoryNr);
      EndFormRow;
  end;
  endval = curval0;
  endval2 = curval2;
  return;
end;

global
procedure DoAT2Form(record RcVc RepSpec,record AT2UnitVc AT2Unitr)
BEGIN
  record DepVc Depr;
  record CUVc CUr;
  record AT2Vc AT2r;
  record FormDefVc FDr;
  row FormDefVc FDrw;
  val endval,endval2;
  Integer i,rwcnt;
  string 255 tstr,AT2Class;
  val t,t2;
  Date td,ed;
  LongInt tl;
  Integer months,years;
  Boolean printf;
  Integer intdocnr;
  string 30 formcode;
  record UserVc Userr;
    
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoAT2Form;
  end;
  rwcnt = MatRowCnt(FDr);
  intdocnr = 1;
  printf = true;
  while (printf) begin  
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,-1,FDrw.PrintGroupCode,
                      "",intdocnr,"AT2UnitVc",formcode)) then
      begin
        goto LBREAK;
      end;
    end;
LBREAK:;
    if (nonblank(formcode)) then begin  
      if (OpenForm(formcode)) then begin
        CommonDocumentFields(RepSpec);
        if (FIELDINFORM("F_REVALUATEDVALUE")) then begin
          if (GetLastDprStartVal(0,AT2Unitr.InventoryNr,AT2Unitr.PurchVal,t,t2)) then begin 
          end;
          OUTFORMFIELD("F_REVALUATEDVALUE",t);
        end;  
        Depr.Code = AT2Unitr.DepCode;
        if (ReadFirstMain(Depr,1,true)) then begin
          OUTFORMFIELD("F_DEPNAME",Depr.Description);
          OUTFORMFIELD("F_DEPADDRESS",Depr.Addr0);
          OUTFORMFIELD("F_DEPADDRESS",Depr.Addr1);
          OUTFORMFIELD("F_DEPADDRESS",Depr.Addr2);
          OUTFORMFIELD("F_DEPADDRESS",Depr.Addr3);
          OUTFORMFIELD("F_DEPADDRESS",Depr.Addr4);
          OUTFORMFIELD("F_DEPADDRESS",Depr.Addr5);
        end;
        OUTFORMFIELD("F_FIXASSETCODE",AT2Unitr.InventoryNr);
        OUTFORMFIELD("F_FIXASSETNAME",AT2Unitr.Description);
        OUTFORMFIELD("F_PURCHVAL",AT2Unitr.PurchVal);
        OUTFORMFIELD("F_ENDDATE",AT2Unitr.EndDate);
        OUTFORMFIELD("F_DEPARTMENT",AT2Unitr.DepCode);
        if (blank(AT2Unitr.Quantity)) then begin
          OUTFORMFIELD("F_ANTAL",1.00);
        end else begin
          OUTFORMFIELD("F_ANTAL",AT2Unitr.Quantity);
        end;
        if (FIELDINFORM("F_ASSETACC")) then begin
          GetAC2Accounts(0,0,AT2Unitr.AT2Code,AT2Unitr.AT2Class,tstr);
          OUTFORMFIELD("F_ASSETACC",tstr);
        end;  
        AT2Class = AT2unitr.AT2Class;
        AT2r.Code = AT2unitr.AT2Code;
        if (ReadFirstMain(AT2r,1,true)) then begin
          OUTFORMFIELD("F_FIXASSETGROUP",AT2r.Code);
          if (blank(AT2Class)) then begin AT2Class = AT2r.AT2Class; end;
          OUTFORMFIELD("F_FIXASSETCLASS",AT2Class);
          GetClassDescr(AT2Class,tstr);
          OUTFORMFIELD("F_FIXASSETCLASSNAME",tstr);
          
          OUTFORMFIELD("F_FIXASSETGROUPNAME",AT2r.Description);
        end;
        if (FIELDINFORM("F_DEPRCODE")) then begin
          GetAC2Accounts(0,1,AT2Unitr.AT2Code,AT2Unitr.AT2Class,tstr);
          OUTFORMFIELD("F_DEPRCODE",tstr);
        end;  
        if (FIELDINFORM("F_COSTACCOUNT")) then begin
          GetAC2Accounts(0,2,AT2Unitr.AT2Code,AT2Unitr.AT2Class,tstr);
          OUTFORMFIELD("F_COSTACCOUNT",tstr);
        end;  
        OUTFORMFIELD("F_OBJECT",AT2Unitr.Objects);
        OUTFORMFIELD("F_PURCHASEDATE",AT2Unitr.PurchaseDate);
        OUTFORMFIELD("F_PRODDATE",AT2Unitr.ProdDate);
        if (FIELDINFORM("F_KOMMENTAR")) then begin
          GetDprModDescription(AT2Unitr.Model1,tstr);
          OUTFORMFIELD("F_KOMMENTAR",tstr);
        end;  
        OUTFORMFIELD("F_MODEL1",AT2Unitr.Model1);
        OUTFORMFIELD("F_MODEL2",AT2Unitr.Model2);
        if (FIELDINFORM("F_DEPRPRC")) then begin
          GetDepreciationPrc(AT2Unitr.Model1,t);
          OUTFORMFIELD("F_DEPRPRC",t);
        end;          
        OUTFORMFIELD("F_PRODDATE",AT2Unitr.Model1);
        OUTFORMFIELD("F_PRODACTIONDATEYEAR",GetYear(AT2Unitr.ProdDate));
        months = 100 / t * 12;
        years = 100 / t;
        OUTFORMFIELD("F_PERIODMONTH",months);
        OUTFORMFIELD("F_PERIODYEAR",years);

        GetDprModDescription(AT2Unitr.Model2,tstr);
        OUTFORMFIELD("F_KOMMENTAR2",tstr);
        OUTFORMFIELD("F_DEPRPRCMONTH",Round(t/12,DefaultRoundMode));
        GetDepreciationPrc(AT2Unitr.Model2,t);
        OUTFORMFIELD("F_DEPRPRC2",t);
        OUTFORMFIELD("F_DEPRPRC2MONTH",t/12);
        OUTFORMFIELD("F_PRODUCTIONDATEYEAR",GetYear(AT2Unitr.ProdDate));
        if (FIELDINFORM("F_WROFDATE")) then begin
          if (GetInventoryNrWrofDate(AT2Unitr.InventoryNr,td)) then begin end;
          OUTFORMFIELD("F_WROFDATE",td);
        end;          
        if (FIELDINFORM("F_WROFNUMBER")) then begin
          GetInventoryNrWrofNumber(AT2Unitr.InventoryNr,tl);
          OUTFORMFIELD("F_WROFNUMBER",tl);
        end;          
        if (FIELDINFORM("F_WROFCOMMENT")) then begin
          GetInventoryNrWrofComment(AT2Unitr.InventoryNr,tstr);
          OUTFORMFIELD("F_WROFCOMMENT",tstr);
        end;          
        OUTFORMFIELD("F_WARRANTY",AT2Unitr.WarrantyNr);
        OUTFORMFIELD("F_SERIALNR",AT2Unitr.SerialNr);
        GetResponsiblePerson(AT2Unitr,tstr);
        Userr.Code = tstr;
        if (ReadFirstMain(Userr,1,true)) then begin
        end;
        OUTFORMFIELD("F_PERSNAME",Userr.Name);
        if (FieldInForm("F_RESPONSIBLEPERSON")) then begin
          OUTFORMFIELD("F_RESPONSIBLEPERSON",tstr);
        end; 
        OUTFORMFIELD("F_LEVERANTOR",AT2Unitr.VECode);
        OUTFORMFIELD("F_LEVNAMN",AT2Unitr.VEName);
        OUTFORMFIELD("F_REGDATUM",AT2Unitr.UsedFromDate);
        OUTFORMFIELD("F_FAKTNR",AT2Unitr.VEInvoiceNr);
        OUTFORMFIELD("F_STARTDATUM",AT2Unitr.StartingDate1);
        OUTFORMFIELD("F_COMMENT",AT2Unitr.AT2Code);
        OUTFORMFIELD("F_SPECIFIKATION",AT2Unitr.Comment);
        OUTFORMFIELD("F_OBJECT",AT2Unitr.Objects);
        OUTFORMFIELD("F_FAKTURANR",AT2Unitr.VISerNr);
        OUTFORMFIELD("F_RESVAL",AT2Unitr.ResVal);
        OUTFORMFIELD("F_USEDFROM",AT2Unitr.UsedFromDate);
        PrintAssetHistory(AT2Unitr,endval,endval2);
        PrintAssetTransHistory(AT2Unitr);
        ed = CurrentDate;
        t = endval / months;
        OUTFORMFIELD("F_DEPRMONTH",t);
        OUTFORMFIELD("F_DEPRYEAR",t);

        CalcDeprVal(AT2Unitr,t,ed,1,endval2,2);
        OUTFORMFIELD("F_DEPRYEAR2",t);
        OUTFORMFIELD("F_DEPRVAL",t);
        
        OUTFORMFIELD("F_DOCUMENTNO",RepSpec.f5);
        if (FieldInForm("F_DATEYEAR")) then begin
          OUTFORMFIELD("F_DATEYEAR", GetYear(RepSpec.d1));
        end;
        if (FieldInForm("F_DATEDAY")) then begin
          OUTFORMFIELD("F_DATEDAY", GetDay(RepSpec.d1));
        end;
        if (FieldInForm("F_DATEMONTHTEXT")) then begin
          GetMonthText(FDrw.LangCode,RepSpec.d1, tstr);
          OUTFORMFIELD("F_DATEMONTHTEXT",tstr);
        end;
        if (FieldInForm("F_DATEYEAR2")) then begin
          OUTFORMFIELD("F_DATEYEAR2", GetYear(RepSpec.d2));
        end;
        if (FieldInForm("F_DATEDAY2")) then begin
          OUTFORMFIELD("F_DATEDAY2",GetDay(RepSpec.d2));
        end;
        if (FieldInForm("F_DATEMONTHTEXT2")) then begin
          GetMonthText(FDrw.LangCode,RepSpec.d2, tstr);
          OUTFORMFIELD("F_DATEMONTHTEXT2",tstr);
        end;
        if (FieldInForm("F_COMMMEMBER1")) then begin
          GetUserName(RepSpec.f2, tstr);
          OUTFORMFIELD("F_COMMMEMBER1",tstr);
          GetUserJob(RepSpec.f2, tstr);
          OUTFORMFIELD("F_MEMBER1JOB",tstr);
        end;
        if (FieldInForm("F_COMMMEMBER2")) then begin
          GetUserName(RepSpec.f3,tstr);
          OUTFORMFIELD("F_COMMMEMBER2",tstr);
          GetUserJob(RepSpec.f3, tstr);
          OUTFORMFIELD("F_MEMBER2JOB",tstr);
        end;
        if (FieldInForm("F_COMMMEMBER3")) then begin
          GetUserName(RepSpec.f4,tstr);
          OUTFORMFIELD("F_COMMMEMBER3",tstr);
          GetUserJob(RepSpec.f4, tstr);
          OUTFORMFIELD("F_MEMBER3JOB",tstr);
        end;
        CloseForm;        
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoAT2Form:;  
  RETURN;  
END;     
 
