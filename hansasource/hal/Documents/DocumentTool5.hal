external procedure OutAddress(string,string,string,string,string,string,string);
external procedure PrintValue(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);

global
procedure TRGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record TRSerBlock TRSerr;
  row TRSerBlock TRSerrw;
  Integer i,rwcnt;
  
  BlockLoad(TRSerr);
  rwcnt = MatRowCnt(TRSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TRSerr,i,TRSerrw);
    if ((defsernr>=TRSerrw.TSerStart) and (defsernr<=TRSerrw.TSerEnd)) then begin
      serstart = TRSerrw.TSerStart;
      serend = TRSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure IntIVGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record IntIVSerBlock IntIVSerr;
  row IntIVSerBlock IntIVSerrw;
  Integer i,rwcnt;
  
  BlockLoad(IntIVSerr);
  rwcnt = MatRowCnt(IntIVSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IntIVSerr,i,IntIVSerrw);
    if ((defsernr>=IntIVSerrw.TSerStart) and (defsernr<=IntIVSerrw.TSerEnd)) then begin
      serstart = IntIVSerrw.TSerStart;
      serend = IntIVSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure QTGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record QTSerBlock QTSerr;
  row QTSerBlock QTSerrw;
  Integer i,rwcnt;
  
  BlockLoad(QTSerr);
  rwcnt = MatRowCnt(QTSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(QTSerr,i,QTSerrw);
    if ((defsernr>=QTSerrw.TSerStart) and (defsernr<=QTSerrw.TSerEnd)) then begin
      serstart = QTSerrw.TSerStart;
      serend = QTSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure IVGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record IVSerBlock IVSerr;
  row IVSerBlock IVSerrw;
  Integer i,rwcnt;
  
  BlockLoad(IVSerr);
  rwcnt = MatRowCnt(IVSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVSerr,i,IVSerrw);
    if ((defsernr>=IVSerrw.TSerStart) and (defsernr<=IVSerrw.TSerEnd)) then begin
      serstart = IVSerrw.TSerStart;
      serend = IVSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure VATIVGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record VATIVSerBlock VATIVSerr;
  row VATIVSerBlock VATIVSerrw;
  Integer i,rwcnt;
  
  BlockLoad(VATIVSerr);
  rwcnt = MatRowCnt(VATIVSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATIVSerr,i,VATIVSerrw);
    if ((defsernr>=VATIVSerrw.TSerStart) and (defsernr<=VATIVSerrw.TSerEnd)) then begin
      serstart = VATIVSerrw.TSerStart;
      serend = VATIVSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure VATVIGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record VATVISerBlock VATVISerr;
  row VATVISerBlock VATVISerrw;
  Integer i,rwcnt;
  
  BlockLoad(VATVISerr);
  rwcnt = MatRowCnt(VATVISerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATVISerr,i,VATVISerrw);
    if ((defsernr>=VATVISerrw.TSerStart) and (defsernr<=VATVISerrw.TSerEnd)) then begin
      serstart = VATVISerrw.TSerStart;
      serend = VATVISerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure ORGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record ORSerBlock ORSerr;
  row ORSerBlock ORSerrw;
  Integer i,rwcnt;
  
  BlockLoad(ORSerr);
  rwcnt = MatRowCnt(ORSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORSerr,i,ORSerrw);
    if ((defsernr>=ORSerrw.TSerStart) and (defsernr<=ORSerrw.TSerEnd)) then begin
      serstart = ORSerrw.TSerStart;
      serend = ORSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure OPGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record OPSerBlock OPSerr;
  row OPSerBlock OPSerrw;
  Integer i,rwcnt;
  
  BlockLoad(OPSerr);
  rwcnt = MatRowCnt(OPSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OPSerr,i,OPSerrw);
    if ((defsernr>=OPSerrw.TSerStart) and (defsernr<=OPSerrw.TSerEnd)) then begin
      serstart = OPSerrw.TSerStart;
      serend = OPSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure IPGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record IPSerBlock IPSerr;
  row IPSerBlock IPSerrw;
  Integer i,rwcnt;
  
  BlockLoad(IPSerr);
  rwcnt = MatRowCnt(IPSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IPSerr,i,IPSerrw);
    if ((defsernr>=IPSerrw.TSerStart) and (defsernr<=IPSerrw.TSerEnd)) then begin
      serstart = IPSerrw.TSerStart;
      serend = IPSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure TSGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record TSSerBlock TSSerr;
  row TSSerBlock TSSerrw;
  Integer i,rwcnt;
  
  BlockLoad(TSSerr);
  rwcnt = MatRowCnt(TSSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TSSerr,i,TSSerrw);
    if ((defsernr>=TSSerrw.TSerStart) and (defsernr<=TSSerrw.TSerEnd)) then begin
      serstart = TSSerrw.TSerStart;
      serend = TSSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure ExpGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record ExpSerBlock ExpSerr;
  row ExpSerBlock ExpSerrw;
  Integer i,rwcnt;
  
  BlockLoad(ExpSerr);
  rwcnt = MatRowCnt(ExpSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ExpSerr,i,ExpSerrw);
    if ((defsernr>=ExpSerrw.TSerStart) and (defsernr<=ExpSerrw.TSerEnd)) then begin
      serstart = ExpSerrw.TSerStart;
      serend = ExpSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure PPGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record PPersSerBlock PPSerr;
  row PPersSerBlock PPSerrw;
  Integer i,rwcnt;
  
  BlockLoad(PPSerr);
  rwcnt = MatRowCnt(PPSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PPSerr,i,PPSerrw);
    if ((defsernr>=PPSerrw.TSerStart) and (defsernr<=PPSerrw.TSerEnd)) then begin
      serstart = PPSerrw.TSerStart;
      serend = PPSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure CLInGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record CLInSerBlock CLInSerr;
  row CLInSerBlock CLInSerrw;
  Integer i,rwcnt;
  
  BlockLoad(CLInSerr);
  rwcnt = MatRowCnt(CLInSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CLInSerr,i,CLInSerrw);
    if ((defsernr>=CLInSerrw.TSerStart) and (defsernr<=CLInSerrw.TSerEnd)) then begin
      serstart = CLInSerrw.TSerStart;
      serend = CLInSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;
procedure CLOutGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record CLOutSerBlock CLOutSerr;
  row CLOutSerBlock CLOutSerrw;
  Integer i,rwcnt;
  
  BlockLoad(CLOutSerr);
  rwcnt = MatRowCnt(CLOutSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CLOutSerr,i,CLOutSerrw);
    if ((defsernr>=CLOutSerrw.TSerStart) and (defsernr<=CLOutSerrw.TSerEnd)) then begin
      serstart = CLOutSerrw.TSerStart;
      serend = CLOutSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure SHGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record SHSerBlock SHSerr;
  row SHSerBlock SHSerrw;
  Integer i,rwcnt;
  
  BlockLoad(SHSerr);
  rwcnt = MatRowCnt(SHSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SHSerr,i,SHSerrw);
    if ((defsernr>=SHSerrw.TSerStart) and (defsernr<=SHSerrw.TSerEnd)) then begin
      serstart = SHSerrw.TSerStart;
      serend = SHSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure PUGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record PUSerBlock PUSerr;
  row PUSerBlock PUSerrw;
  Integer i,rwcnt;
  
  BlockLoad(PUSerr);
  rwcnt = MatRowCnt(PUSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PUSerr,i,PUSerrw);
    if ((defsernr>=PUSerrw.TSerStart) and (defsernr<=PUSerrw.TSerEnd)) then begin
      serstart = PUSerrw.TSerStart;
      serend = PUSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure AT2WrofGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record AT2WrofSerBlock AT2WrofSerr;
  row AT2WrofSerBlock AT2WrofSerrw;
  Integer i,rwcnt;
  
  BlockLoad(AT2WrofSerr);
  rwcnt = MatRowCnt(AT2WrofSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(AT2WrofSerr,i,AT2WrofSerrw);
    if ((defsernr>=AT2WrofSerrw.TSerStart) and (defsernr<=AT2WrofSerrw.TSerEnd)) then begin
      serstart = AT2WrofSerrw.TSerStart;
      serend = AT2WrofSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure RetGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record RetSerBlock RetSerr;
  row RetSerBlock RetSerrw;
  Integer i,rwcnt;
  
  BlockLoad(RetSerr);
  rwcnt = MatRowCnt(RetSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RetSerr,i,RetSerrw);
    if ((defsernr>=RetSerrw.TSerStart) and (defsernr<=RetSerrw.TSerEnd)) then begin
      serstart = RetSerrw.TSerStart;
      serend = RetSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure SDGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record SDSerBlock SDSerr;
  row SDSerBlock SDSerrw;
  Integer i,rwcnt;
  
  BlockLoad(SDSerr);
  rwcnt = MatRowCnt(SDSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SDSerr,i,SDSerrw);
    if ((defsernr>=SDSerrw.TSerStart) and (defsernr<=SDSerrw.TSerEnd)) then begin
      serstart = SDSerrw.TSerStart;
      serend = SDSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure StockMovGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record StockMovSerBlock StockMovSerr;
  row StockMovSerBlock StockMovSerrw;
  Integer i,rwcnt;
  
  BlockLoad(StockMovSerr);
  rwcnt = MatRowCnt(StockMovSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(StockMovSerr,i,StockMovSerrw);
    if ((defsernr>=StockMovSerrw.TSerStart) and (defsernr<=StockMovSerrw.TSerEnd)) then begin
      serstart = StockMovSerrw.TSerStart;
      serend = StockMovSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure CustomsGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record CustomsSerBlock CustomsSerr;
  row CustomsSerBlock CustomsSerrw;
  Integer i,rwcnt;
  
  BlockLoad(CustomsSerr);
  rwcnt = MatRowCnt(CustomsSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CustomsSerr,i,CustomsSerrw);
    if ((defsernr>=CustomsSerrw.TSerStart) and (defsernr<=CustomsSerrw.TSerEnd)) then begin
      serstart = CustomsSerrw.TSerStart;
      serend = CustomsSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure CheckGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record CheckSerBlock CheckSerr;
  row CheckSerBlock CheckSerrw;
  Integer i,rwcnt;
  
  BlockLoad(CheckSerr);
  rwcnt = MatRowCnt(CheckSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CheckSerr,i,CheckSerrw);
    if ((defsernr>=CheckSerrw.TSerStart) and (defsernr<=CheckSerrw.TSerEnd)) then begin
      serstart = CheckSerrw.TSerStart;
      serend = CheckSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure OwnCheckGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record OwnCheckSerBlock OwnCheckSerr;
  row OwnCheckSerBlock OwnCheckSerrw;
  Integer i,rwcnt;
  
  BlockLoad(OwnCheckSerr);
  rwcnt = MatRowCnt(OwnCheckSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OwnCheckSerr,i,OwnCheckSerrw);
    if ((defsernr>=OwnCheckSerrw.TSerStart) and (defsernr<=OwnCheckSerrw.TSerEnd)) then begin
      serstart = OwnCheckSerrw.TSerStart;
      serend = OwnCheckSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure AT2TakeGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record AT2TakeSerBlock AT2TakeSerr;
  row AT2TakeSerBlock AT2TakeSerrw;
  Integer i,rwcnt;
  
  BlockLoad(AT2TakeSerr);
  rwcnt = MatRowCnt(AT2TakeSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(AT2TakeSerr,i,AT2TakeSerrw);
    if ((defsernr>=AT2TakeSerrw.TSerStart) and (defsernr<=AT2TakeSerrw.TSerEnd)) then begin
      serstart = AT2TakeSerrw.TSerStart;
      serend = AT2TakeSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure AT2DprGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record AT2DprSerBlock AT2DprSerr;
  row AT2DprSerBlock AT2DprSerrw;
  Integer i,rwcnt;
  
  BlockLoad(AT2DprSerr);
  rwcnt = MatRowCnt(AT2DprSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(AT2DprSerr,i,AT2DprSerrw);
    if ((defsernr>=AT2DprSerrw.TSerStart) and (defsernr<=AT2DprSerrw.TSerEnd)) then begin
      serstart = AT2DprSerrw.TSerStart;
      serend = AT2DprSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure AT2RevSerGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record AT2RevSerBlock AT2RevSerSerr;
  row AT2RevSerBlock AT2RevSerSerrw;
  Integer i,rwcnt;
  
  BlockLoad(AT2RevSerSerr);
  rwcnt = MatRowCnt(AT2RevSerSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(AT2RevSerSerr,i,AT2RevSerSerrw);
    if ((defsernr>=AT2RevSerSerrw.TSerStart) and (defsernr<=AT2RevSerSerrw.TSerEnd)) then begin
      serstart = AT2RevSerSerrw.TSerStart;
      serend = AT2RevSerSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure LateCostGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record LateCostSerBlock LateCostSerr;
  row LateCostSerBlock LateCostSerrw;
  Integer i,rwcnt;
  
  BlockLoad(LateCostSerr);
  rwcnt = MatRowCnt(LateCostSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LateCostSerr,i,LateCostSerrw);
    if ((defsernr>=LateCostSerrw.TSerStart) and (defsernr<=LateCostSerrw.TSerEnd)) then begin
      serstart = LateCostSerrw.TSerStart;
      serend = LateCostSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure RetPUGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record RetPUSerBlock RetPUSerr;
  row RetPUSerBlock RetPUSerrw;
  Integer i,rwcnt;
  
  BlockLoad(RetPUSerr);
  rwcnt = MatRowCnt(RetPUSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RetPUSerr,i,RetPUSerrw);
    if ((defsernr>=RetPUSerrw.TSerStart) and (defsernr<=RetPUSerrw.TSerEnd)) then begin
      serstart = RetPUSerrw.TSerStart;
      serend = RetPUSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure StockTakeGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record StockTakeSerBlock StockTakeSerr;
  row StockTakeSerBlock StockTakeSerrw;
  Integer i,rwcnt;
  
  BlockLoad(StockTakeSerr);
  rwcnt = MatRowCnt(StockTakeSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(StockTakeSerr,i,StockTakeSerrw);
    if ((defsernr>=StockTakeSerrw.TSerStart) and (defsernr<=StockTakeSerrw.TSerEnd)) then begin
      serstart = StockTakeSerrw.TSerStart;
      serend = StockTakeSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure WayListGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record WayListSerBlock WayListSerr;
  row WayListSerBlock WayListSerrw;
  Integer i,rwcnt;
  
  BlockLoad(WayListSerr);
  rwcnt = MatRowCnt(WayListSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(WayListSerr,i,WayListSerrw);
    if ((defsernr>=WayListSerrw.TSerStart) and (defsernr<=WayListSerrw.TSerEnd)) then begin
      serstart = WayListSerrw.TSerStart;
      serend = WayListSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure IntORGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record IntORSerBlock IntORSerr;
  row IntORSerBlock IntORSerrw;
  Integer i,rwcnt;
  
  BlockLoad(IntORSerr);
  rwcnt = MatRowCnt(IntORSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IntORSerr,i,IntORSerrw);
    if ((defsernr>=IntORSerrw.TSerStart) and (defsernr<=IntORSerrw.TSerEnd)) then begin
      serstart = IntORSerrw.TSerStart;
      serend = IntORSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure POGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record POSerBlock POSerr;
  row POSerBlock POSerrw;
  Integer i,rwcnt;
  
  BlockLoad(POSerr);
  rwcnt = MatRowCnt(POSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POSerr,i,POSerrw);
    if ((defsernr>=POSerrw.TSerStart) and (defsernr<=POSerrw.TSerEnd)) then begin
      serstart = POSerrw.TSerStart;
      serend = POSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure POCQStatGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record POCQStatSerBlock POCQStatSerr;
  row POCQStatSerBlock POCQStatSerrw;
  Integer i,rwcnt;
  
  BlockLoad(POCQStatSerr);
  rwcnt = MatRowCnt(POCQStatSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POCQStatSerr,i,POCQStatSerrw);
    if ((defsernr>=POCQStatSerrw.TSerStart) and (defsernr<=POCQStatSerrw.TSerEnd)) then begin
      serstart = POCQStatSerrw.TSerStart;
      serend = POCQStatSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure POQTGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record POQTSerBlock POQTSerr;
  row POQTSerBlock POQTSerrw;
  Integer i,rwcnt;
  
  BlockLoad(POQTSerr);
  rwcnt = MatRowCnt(POQTSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POQTSerr,i,POQTSerrw);
    if ((defsernr>=POQTSerrw.TSerStart) and (defsernr<=POQTSerrw.TSerEnd)) then begin
      serstart = POQTSerrw.TSerStart;
      serend = POQTSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure SPLGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record SPLSerBlock SPLSerr;
  row SPLSerBlock SPLSerrw;
  Integer i,rwcnt;
  
  BlockLoad(SPLSerr);
  rwcnt = MatRowCnt(SPLSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SPLSerr,i,SPLSerrw);
    if ((defsernr>=SPLSerrw.TSerStart) and (defsernr<=SPLSerrw.TSerEnd)) then begin
      serstart = SPLSerrw.TSerStart;
      serend = SPLSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure ProdGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record ProdSerBlock ProdSerr;
  row ProdSerBlock ProdSerrw;
  Integer i,rwcnt;
  
  BlockLoad(ProdSerr);
  rwcnt = MatRowCnt(ProdSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ProdSerr,i,ProdSerrw);
    if ((defsernr>=ProdSerrw.TSerStart) and (defsernr<=ProdSerrw.TSerEnd)) then begin
      serstart = ProdSerrw.TSerStart;
      serend = ProdSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure FEIVGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record FEIVSerBlock FEIVSerr;
  row FEIVSerBlock FEIVSerrw;
  Integer i,rwcnt;
  
  BlockLoad(FEIVSerr);
  rwcnt = MatRowCnt(FEIVSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(FEIVSerr,i,FEIVSerrw);
    if ((defsernr>=FEIVSerrw.TSerStart) and (defsernr<=FEIVSerrw.TSerEnd)) then begin
      serstart = FEIVSerrw.TSerStart;
      serend = FEIVSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure FEVIGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record FEVISerBlock FEVISerr;
  row FEVISerBlock FEVISerrw;
  Integer i,rwcnt;
  
  BlockLoad(FEVISerr);
  rwcnt = MatRowCnt(FEVISerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(FEVISerr,i,FEVISerrw);
    if ((defsernr>=FEVISerrw.TSerStart) and (defsernr<=FEVISerrw.TSerEnd)) then begin
      serstart = FEVISerrw.TSerStart;
      serend = FEVISerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure GCGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record GCSerBlock GCSerr;
  row GCSerBlock GCSerrw;
  Integer i,rwcnt;
  
  BlockLoad(GCSerr);
  rwcnt = MatRowCnt(GCSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(GCSerr,i,GCSerrw);
    if ((defsernr>=GCSerrw.TSerStart) and (defsernr<=GCSerrw.TSerEnd)) then begin
      serstart = GCSerrw.TSerStart;
      serend = GCSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure LetGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record LetSerBlock LetSerr;
  row LetSerBlock LetSerrw;
  Integer i,rwcnt;
  
  BlockLoad(LetSerr);
  rwcnt = MatRowCnt(LetSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LetSerr,i,LetSerrw);
    if ((defsernr>=LetSerrw.TSerStart) and (defsernr<=LetSerrw.TSerEnd)) then begin
      serstart = LetSerrw.TSerStart;
      serend = LetSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure SMGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record SMSerBlock SMSerr;
  row SMSerBlock SMSerrw;
  Integer i,rwcnt;
  
  BlockLoad(SMSerr);
  rwcnt = MatRowCnt(SMSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMSerr,i,SMSerrw);
    if ((defsernr>=SMSerrw.TSerStart) and (defsernr<=SMSerrw.TSerEnd)) then begin
      serstart = SMSerrw.TSerStart;
      serend = SMSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure IVCashGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record IVCashSerBlock IVCashSerr;
  row IVCashSerBlock IVCashSerrw;
  Integer i,rwcnt;
  
  BlockLoad(IVCashSerr);
  rwcnt = MatRowCnt(IVCashSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashSerr,i,IVCashSerrw);
    if ((defsernr>=IVCashSerrw.TSerStart) and (defsernr<=IVCashSerrw.TSerEnd)) then begin
      serstart = IVCashSerrw.TSerStart;
      serend = IVCashSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

procedure ProdOrdGetSerRange(LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN
  record ProdOrdSerBlock ProdOrdSerr;
  row ProdOrdSerBlock ProdOrdSerrw;
  Integer i,rwcnt;
  
  BlockLoad(ProdOrdSerr);
  rwcnt = MatRowCnt(ProdOrdSerr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ProdOrdSerr,i,ProdOrdSerrw);
    if ((defsernr>=ProdOrdSerrw.TSerStart) and (defsernr<=ProdOrdSerrw.TSerEnd)) then begin
      serstart = ProdOrdSerrw.TSerStart;
      serend = ProdOrdSerrw.TSerEnd;
      i = rwcnt;
    end;
  end;
  RETURN;
END;

global
procedure GetSerRange(string vcname,LongInt defsernr,var LongInt serstart,var LongInt serend)
BEGIN

  switch (vcname) begin
    case "AT2DprVc": AT2DprGetSerRange(defsernr,serstart,serend);
    case "AT2RevSerVc": AT2RevSerGetSerRange(defsernr,serstart,serend);
    case "AT2TakeVc": AT2TakeGetSerRange(defsernr,serstart,serend);
    case "AT2WrofVc": AT2WrofGetSerRange(defsernr,serstart,serend);
    case "CLInVc": CLInGetSerRange(defsernr,serstart,serend);
    case "CLOutVc": CLOutGetSerRange(defsernr,serstart,serend);
    case "CheckVc": CheckGetSerRange(defsernr,serstart,serend);
    case "CustomsVc": CustomsGetSerRange(defsernr,serstart,serend);
    case "ExpVc": ExpGetSerRange(defsernr,serstart,serend);
    case "FEIVVc": FEIVGetSerRange(defsernr,serstart,serend);
    case "FEVIVc": CustomsGetSerRange(defsernr,serstart,serend);
    case "GCVc": CustomsGetSerRange(defsernr,serstart,serend);
    case "IntORVc": IntORGetSerRange(defsernr,serstart,serend);
    case "IPVc": IPGetSerRange(defsernr,serstart,serend);
    case "IVVc": IVGetSerRange(defsernr,serstart,serend);
    case "IVCashVc": CustomsGetSerRange(defsernr,serstart,serend);
    case "LateCostVc": LateCostGetSerRange(defsernr,serstart,serend);
    case "LetVc": CustomsGetSerRange(defsernr,serstart,serend);
    case "OPVc": OPGetSerRange(defsernr,serstart,serend);
    case "ORVc": ORGetSerRange(defsernr,serstart,serend);
    case "OwnCheckVc": OwnCheckGetSerRange(defsernr,serstart,serend);
    case "POVc": POGetSerRange(defsernr,serstart,serend);
    case "POCQStatVc": CustomsGetSerRange(defsernr,serstart,serend);
    case "POQTVc": POQTGetSerRange(defsernr,serstart,serend);
    case "PPVc": PPGetSerRange(defsernr,serstart,serend);
    case "ProdVc": ProdGetSerRange(defsernr,serstart,serend);
    case "ProdOrdVc": CustomsGetSerRange(defsernr,serstart,serend);
    case "PUVc": PUGetSerRange(defsernr,serstart,serend);    
    case "QTVc": QTGetSerRange(defsernr,serstart,serend);
    case "RetVc": RetGetSerRange(defsernr,serstart,serend);
    case "RetPUVc": RetPUGetSerRange(defsernr,serstart,serend);
    case "SDVc": SDGetSerRange(defsernr,serstart,serend);
    case "SHVc": SHGetSerRange(defsernr,serstart,serend);
    case "SMVc": CustomsGetSerRange(defsernr,serstart,serend);
    case "SPLVc": SPLGetSerRange(defsernr,serstart,serend);
    case "StockMovVc": StockMovGetSerRange(defsernr,serstart,serend);
    case "StockTakeVc": StockTakeGetSerRange(defsernr,serstart,serend);
    case "TRVc": TRGetSerRange(defsernr,serstart,serend);
    case "TSVc": TSGetSerRange(defsernr,serstart,serend);
    case "WayListVc": WayListGetSerRange(defsernr,serstart,serend);
    case "VATIVVc": VATIVGetSerRange(defsernr,serstart,serend);
    case "VATVIVc": VATVIGetSerRange(defsernr,serstart,serend);
    case "IntIVVc": IntIVGetSerRange(defsernr,serstart,serend);
  end;
  RETURN;
END;

global
procedure PrintPersonsCustomerDetails(string usercode)
begin
  record UserVc Userr;
  record CUVc CUr;
  
  Userr.Code = usercode;
  if (ReadFirstMain(Userr,1,true)) then begin
    CUr.Code = Userr.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      OUTFORMFIELD("F_USERCUSTADDRESS",CUr.InvAddr0);
      OUTFORMFIELD("F_USERCUSTADDRESS",CUr.InvAddr1);
      OUTFORMFIELD("F_USERCUSTADDRESS",CUr.InvAddr2);
      OUTFORMFIELD("F_USERCUSTPHONE",CUr.Phone);
      OUTFORMFIELD("F_USERCUSTMOBILE",CUr.Mobile);
      OUTFORMFIELD("F_USERCUSTFAX",CUr.Fax);
    end;
  end;
  return;
end;

global
procedure PrintSignature(string usercode)
begin
  record UserVc Userr;
  record CUVc ContactCUr;
  
  Userr.Code = usercode;
  if (ReadFirstMain(Userr,1,true)) then begin
    OUTFORMFIELD("F_SIGNATURE",usercode);
    ContactCUr.Code = Userr.CustCode;
    if (ReadFirstMain(ContactCUr,1,true)) then begin
      OUTFORMFIELD("F_SIGNNAME",ContactCUr.Name);
      OUTFORMFIELD("F_SIGNPHONE",ContactCUr.Phone);
      OUTFORMFIELD("F_SIGNEMAIL",ContactCUr.eMail);
      OUTFORMFIELD("F_SIGNFAX",ContactCUr.Fax);
      OUTFORMFIELD("F_SIGNMOBILE",ContactCUr.Mobile);
    end;
  end;
  return;
end;

global
procedure PrintBranchData(string BranchID)
begin
  record CUVc CUr;
  
  CUr.Code = BranchID;
  if (ReadFirstMain(CUr,1,true)) then begin
    OUTFORMFIELD("F_BRANCHADRESS",CUr.Name);
    OUTFORMFIELD("F_BRANCHADRESS",CUr.InvAddr0);
    OUTFORMFIELD("F_BRANCHADRESS",CUr.InvAddr1);
    OUTFORMFIELD("F_BRANCHADRESS",CUr.InvAddr2);
    OUTFORMFIELD("F_BRANCHADRESS",CUr.InvAddr3);
    OUTFORMFIELD("F_BRANCHADRESS",CUr.InvAddr4);

    OUTFORMFIELD("F_BRANCHCONTACT",CUr.Person);
    OUTFORMFIELD("F_BRANCHPHONE",CUr.Phone);
    OUTFORMFIELD("F_BRANCHEMAIL",CUr.eMail);
    OUTFORMFIELD("F_BRANCHFAX",CUr.Fax);
    OUTFORMFIELD("F_BRANCHWWW",CUr.wwwAddr);

    OUTFORMFIELD("F_BRANCHBANKACC",CUr.BankAccount);
    OUTFORMFIELD("F_BRANCHBANKACC2",CUr.Bank);
    OUTFORMFIELD("F_BRANCHACCOPERATOR",CUr.AccOperator);
    OUTFORMFIELD("F_BRANCHIBAN",CUr.IBANCode);

    OUTFORMFIELD("F_BRANCHREGNUMBER1",CUr.RegNr1);
    OUTFORMFIELD("F_BRANCHREGNUMBER2",CUr.RegNr2);
  end;
  return;
end;

global
procedure PrintPremiseData()
begin
  record CYABlock CYAb;
  
  BlockLoad(CYAb);
  OUTFORMFIELD("F_PREMISECODE",CYAb.MainPremiseCode);
  OUTFORMFIELD("F_PREMISENAME",CYAb.MainPremiseName);
  OutAddress("F_PREMISEADDRESS",CYAb.MainPremiseName,CYAb.MainPremiseAddr0,CYAb.MainPremiseAddr1,CYAb.MainPremiseAddr2,CYAb.MainPremiseAddr3,CYAb.MainPremiseAddr4);
  OUTFORMFIELD("F_PREMISEADDRESS1",CYAb.MainPremiseAddr0);
  OUTFORMFIELD("F_PREMISEADDRESS2",CYAb.MainPremiseAddr1);
  OUTFORMFIELD("F_PREMISEADDRESS3",CYAb.MainPremiseAddr2);
  OUTFORMFIELD("F_PREMISEADDRESS4",CYAb.MainPremiseAddr3);
  OUTFORMFIELD("F_PREMISEADDRESS5",CYAb.MainPremiseAddr4);
  OUTFORMFIELD("F_PREMISEVATNR",CYAb.MainPremiseVATNr);
  OUTFORMFIELD("F_PREMISEREGNR",CYAb.MainPremiseOrgNr);
  OUTFORMFIELD("F_PREMISECADASTRALNR",CYAb.MainPremiseCadastralNr);
  OUTFORMFIELD("F_PREMISECADASTRALBLDNR",CYAb.MainPremiseCadastralBldNr);
  OUTFORMFIELD("F_PREMISECADASTRALBLDSCTNR",CYAb.MainPremiseCadastralBldSctNr);
  return;
end;

global
procedure PrintLoyaltyCard(record LangNrVc LangNrr,string card,string clevel,val points,val pointsspent,LongInt docnr,string doctype)
begin 
  record SysFormatBlock SysFormatRec;
  record PointsHistVc PointsHistr;
  record LoyaltyCardVc LoyaltyCardr;
  val lbalance;
  
  BlockLoad(SysFormatRec);
  OUTFORMFIELD("F_LOYALTYCARD",card); 
  OUTFORMFIELD("F_LMCARDLEVEL",clevel); 
  PrintValue("F_POINTS",points,M4Val,LangNrr,SysFormatRec,false);
  LoyaltyCardr.SerNr = card;
  if (ReadFirstMain(LoyaltyCardr,1,true)) then begin 
    OUTFORMFIELD("F_POINTSTO",LoyaltyCardr.PointsTo);
  end;
  PointsHistr.TransNr  = docnr;
  PointsHistr.FileName = doctype;
  if (ReadFirstKey("TransNr",PointsHistr,2,true)) then begin 
    PrintValue("F_POINTSSTARTBAL",PointsHistr.FWBalance,M4Val,LangNrr,SysFormatRec,false);
    lbalance = PointsHistr.FWBalance + points - pointsspent;
    PrintValue("F_POINTSENDBAL",lbalance,M4Val,LangNrr,SysFormatRec,false);
    // we have already in DoInvForm and DoInvCashForm
    //OUTFORMFIELD("F_LOCATION",PointsHistr.Location); 
  end;
  return;
end;

global
function string 255 OMRCode(integer pagenr,boolean lastpage)
begin
  string 255 res;
  integer seqnr;
  
  res = "  ___  " & chr(13) & chr(10); //Start mark
  if (lastpage) then begin
    res = res & "  ___  ";   //Insert mark
  end;
  res = res & chr(13) & chr(10);
  
  seqnr = Mod(pagenr-1,8);
  if (BitAnd(seqnr,4)==4) then begin
    res = res & "  ___  ";   //Sequence check 4
  end;
  res = res & chr(13) & chr(10);
  if (BitAnd(seqnr,2)==2) then begin
    res = res & "  ___  ";   //Sequence check 2
  end;
  res = res & chr(13) & chr(10);
  if (BitAnd(seqnr,1)==1) then begin
    res = res & "  ___  ";   //Sequence check 1
  end;
  res = res & chr(13) & chr(10);
  
  OMRCode = res;
  return;
end;
