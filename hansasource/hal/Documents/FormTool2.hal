external procedure FindNextRestAccVcOfficialSerialNr2(var record RestAccVc);
remote function Integer TestReadFlagHAL(LongInt,LongInt);
remote updating procedure SetReadFlagHal(LongInt,Integer);
external procedure FindUserMailboxName(string,var string,var string);

updating function Boolean acMailLPrint(record MailVc Mailp,Boolean previewf)
BEGIN
  Boolean res;
  string 255 mailboxnr,tstr;

  FindUserMailboxName(CurrentUser,mailboxnr,tstr);
  if (TestReadFlagHAL(Mailp.SerNr,StringToLongInt(mailboxnr))==0) then begin
    if (PrintDocument(Mailp,"MailForm",previewf)) then begin 
      SetReadFlagHal(Mailp.SerNr,7);  
      res = true;
    end;
  end;
  acMailLPrint = res;
  RETURN;
END;

global
updating procedure RecordActionMail_Print(var record MailVc Mailp,string arg1)
BEGIN  
  Boolean previewf;
  record MailVc oldMailr;
  
  if (ReadFirstMain(Mailp,0,true)) then begin end;  
  RecordCopy(oldMailr,Mailp);
  if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;        
  if (acMailLPrint(Mailp,previewf)) then begin
/*
    if (RecordUpdate(oldMailr,Mailp,true)==0) then begin
    end;
*/
  end;
  RETURN;
END;

global
updating procedure RecordActionLet_Print(var record LetVc Letp,string arg1)
BEGIN  
  Boolean previewf;
  record LetVc oldLetr;
  
  if (ReadFirstMain(Letp,0,true)) then begin end;  
  RecordCopy(oldLetr,Letp);
  if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;    
  if (PrintDocument(Letp,"LetForm",previewf)) then begin       
  end;
  if (Letp.Printdf==0) then begin
    RecordCopy(Letp,oldLetr);
    Letp.Printdf = 1;
    if (RecordUpdate(oldLetr,Letp,false)==0) then begin
    end;
  end;
  RETURN;
END;

// ----------- New from Argentina -------------
function
Boolean srlProfileLPrint(var record CUVc Profilep,string arg1)
Begin
  Boolean res;
  Boolean previewf;

  if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;      
  if (PrintDocument(Profilep,"GuestDocForm",previewf)) then begin
    res = true;
  end;
  srlProfileLPrint = res;
  Return;
end;

global
updating
procedure RecordActionProfile_Print(var record CUVc Profilep,string arg1,Boolean readf)
BEGIN
  record CUVc oldProfiler;
  
  if (readf) then begin
    if (ReadFirstMain(Profilep,0,true)) then begin end;  
  end;
  RecordCopy(oldProfiler,Profilep);
  if (srlProfileLPrint(Profilep,arg1)) then begin
    if (RecordUpdate(oldProfiler,Profilep,false)==0) then begin
    end;
  end;  
  RETURN;
END; 

global
function Boolean srlRestAccLPrint(var record RestAccVc RestAccp,string arg1,string form)
begin
  Boolean res,printToKitchenf;
  Boolean previewf;
  row RestAccVc RestAccrw;
  Integer i,rwcnt;
  record RcVc RepSpec;
  string 255 oldOfficialSerNr;
  transaction Integer gTransferRestAccToKitchenOrder;
  val sq;
  
  SetMedia(mtPrinter);
  if (form=="RestAccKitchenForm") then begin 
    printToKitchenf = true;
  end;
  if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;      
  if (blankdate(RestAccp.PrintDate) and printToKitchenf==false and previewf==false and form!="RestAccKitchenForm") then begin
    RestAccp.PrintDate = CurrentDate;
    res = true;
  end;
  if (HasLocalization("POL") and printToKitchenf==false) then begin
    if (blank(RestAccp.OfficialSerNr2)) then begin 
      FindNextRestAccVcOfficialSerialNr2(RestAccp);
      res = true;
    end;
  end;  

  if ((RestAccp.Closed!=1) and (previewf==false) and (printToKitchenf==false)) then begin 
    res = false;
    goto LLsrlRestAccLPrint;
  end;
  RepSpec.flags[11] = gTransferRestAccToKitchenOrder;
  sq = RestAccp.SplitQty;
  RestAccp.SplitQty = gTransferRestAccToKitchenOrder;//until PrintDocumentWithSpec is fixed
//  if (PrintDocumentWithSpec(RestAccp,form,previewf,RepSpec)) then begin
  if (PrintDocument(RestAccp,form,previewf)) then begin
    rwcnt = MatRowCnt(RestAccp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RestAccp,i,RestAccrw);
      if (form=="RestAccKitchenForm") then begin
        RestAccrw.AlreadyPrintedToKitchen = 1;
      end else begin
        RestAccrw.AlreadyPrinted = 1;
      end;      
      MatRowPut(RestAccp,i,RestAccrw);
    end;
    if (blankdate(RestAccp.PrintDate) and printToKitchenf==false and previewf==false and form!="RestAccKitchenForm") then begin
      RestAccp.PrintDate = CurrentDate;
    end;    
    res = true;
  end;
  RestAccp.SplitQty = sq;
LLsrlRestAccLPrint:;
  srlRestAccLPrint = res;
  return;
end;

global
updating procedure RecordActionRestAcc_Print(var record RestAccVc RestAccp,string arg1,string form,Boolean readf)
begin
  record RestAccVc oldRestAccr;
  
  if (readf) then begin
    if (ReadFirstMain(RestAccp,0,true)) then begin end;  
  end;
  RecordCopy(oldRestAccr,RestAccp);
  if (srlRestAccLPrint(RestAccp,arg1,form)) then begin
    if (RecordUpdate(oldRestAccr,RestAccp,false)==0) then begin
    end;
  end;
  return;
end;

function 
Boolean srlExcursionLPrint(record ExcursionVc Excursionp,string arg1)
BEGIN
  Boolean res;
  Boolean previewf;
  
  if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;      
  if (PrintDocument(Excursionp,"ExcurDocForm",previewf)) then begin
//    Excursionp.Prntdf = 1;
    res = true;
  end;
  srlExcursionLPrint = res;
  RETURN;
END;

global
updating procedure RecordActionExcursion_Print(var record ExcursionVc Excursionp,string arg1,Boolean readf)
BEGIN
  record ExcursionVc oldExcursionr;
  
  if (readf) then begin
    if (ReadFirstMain(Excursionp,0,true)) then begin end;  
  end;
  RecordCopy(oldExcursionr,Excursionp);
  if (srlExcursionLPrint(Excursionp,arg1)) then begin
    if (RecordUpdate(oldExcursionr,Excursionp,false)==0) then begin
    end;
  end;
  RETURN;
END;

function 
Boolean srlTransferLPrint(record TransferVc Transferp,string arg1)
BEGIN
  Boolean res;
  Boolean previewf;
  
  if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;      
  if (PrintDocument(Transferp,"TransferDocForm",previewf)) then begin
//    Transferp.Prntdf = 1;
    res = true;
  end;
  srlTransferLPrint = res;
  RETURN;
END;

global
updating procedure RecordActionTransfer_Print(var record TransferVc Transferp,string arg1,Boolean readf)
BEGIN
  record TransferVc oldTransferr;
  
  if (readf) then begin
    if (ReadFirstMain(Transferp,0,true)) then begin end;  
  end;
  RecordCopy(oldTransferr,Transferp);
  if (srlTransferLPrint(Transferp,arg1)) then begin
    if (RecordUpdate(oldTransferr,Transferp,false)==0) then begin
    end;
  end;
  RETURN;
END;

global
function string 255 GetJwl_CustomerName(string customer)
begin
  string 255 tstr;
  record CUVc CUr;
  
  CUr.Code = customer;
  if ReadFirstMain(CUr,1,true) then begin
    tstr = CUr.Salutation1 & " " &  CUr.Salutation2 & " " & CUr.Salutation3 & " " &  CUr.ANACode;
  end;
  GetJwl_CustomerName = tstr;
  return;
end;  

global
function string 255 FindAllowedLanguages(string langcode)
begin
  string 255 res;
  record LangBlock Lb;
  row LangBlock Lbrw;
  Integer i,rwcnt;
  
  BlockLoad(Lb);
  rwcnt = MatRowCnt(Lb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Lb,i,Lbrw);
    if (langcode==Lbrw.Code) then begin
      res = Lbrw.AllowedLangCodes;
      i = rwcnt;
    end;
  end;
  FindAllowedLanguages = res;
  return;
end;  
