external procedure PrintCurrencyCode(string,string);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure BeginCurncyTotals(var Integer);
//external function Integer DefaultCurRoundOff();
external procedure PrintValueInclZero(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external procedure OutAddress(string,string,string,string,string,string,string);
external function Boolean FindFormcode(Integer,Integer);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external function LongInt DateDiff(Date,Date);
external function Integer NumberofDocumentPages(string,Integer);
external procedure CommonDocumentFields(record RcVc);
external procedure ShortInvType(Integer,var string);
external procedure FaktText(Integer,LongInt,var string);
external procedure GetRemFee(var val);
external procedure SumAged(Date,Integer,Integer,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean Getformcode(Integer,Integer,string,string,string,LongInt,LongInt,string,string,Integer,string,var string);
external procedure GetBaseCurncy(Integer,var string);
external procedure CreateKIDNoCheck(string,LongInt,var string);
external procedure CreateKIDCheckNor(val,LongInt,var string);
external procedure CreateKIDCode(string,LongInt,var string);
external procedure InvoiceType(Integer,var string);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external procedure GetLangNr(string,var record LangNrVc);
external procedure PrintValue(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external updating procedure DoAPSForms(record RcVc,Integer);

procedure SetZeroAged(var val s0,var val s1,var val s2,var val s3,var val s4,var val s5,var val s6,var val s7)
begin
  s0 = 0;
  s1 = 0;
  s2 = 0;
  s3 = 0;
  s4 = 0;
  s5 = 0;
  s6 = 0;
  s7 = 0;
  return;
end;

global
procedure VendAged(record CUVc VEp,var val ARSum,var val sact,var val s0,var val s1,var val s16,var val s31,var val s61,var val s91,var val s121,var val s151)
begin
  record APVc APr;
  Boolean TrHs;
  LongInt latedays;
  val rval;
  val fr,to1,to2,br1,br2;
  Boolean testf;
  
  GetFullCurncyRate(VEp.VECurncyCode,CurrentDate,fr,to1,to2,br1,br2);
  ARSum = 0;
  SetZeroAged(s0,s1,s16,s31,s61,s91,s121,s151);  
  APr.VECode = VEp.Code;
  APr.SerNr = 0;
  TrHs = true;
  while (LoopKey("VECode",APr,2,TrHs)) begin
    testf = true;
    if (TrHs) then begin
      if (VEp.Code!=APr.VECode) then begin TrHs = false; end;
    end;
    if (TrHs==false) then begin testf = false; end;
    if (testf) then begin    
      latedays = DateDiff(APr.DueDate,CurrentDate);
      if (APr.CurncyCode==VEp.VECurncyCode) then begin
        rval = APr.RVal;
      end else begin
        if (blank(VEp.VECurncyCode)) then begin
          rval = APr.BookRVal;
        end else begin
          rval = DivRateToBase1(VEp.VECurncyCode,APr.BookRVal,fr,to1,to2,br1,br2,DefaultCurRoundOff);
        end;
      end;
      ARSum = ARSum + rval;
      SumAged(CurrentDate,latedays,0,rval,sact,s0,s1,s16,s31,s61,s91,s121,s151);
    end;
  end;
  return;
end;

procedure GetReference(LongInt transnr,Integer type,var string res)
BEGIN
  record VIVc VIr;
  
  res = "";
  switch (type) begin
    case 1:  // Invoice 
      VIr.SerNr = transnr;
      if (ReadFirstMain(VIr,1,true)) then begin
        res = VIr.RefStr;
      end;
    case 2:  // Cash 
      VIr.SerNr = transnr;
      if (ReadFirstMain(VIr,1,true)) then begin
        res = VIr.RefStr;
      end;
    case 3:  // Credit 
      VIr.SerNr = transnr;
      if (ReadFirstMain(VIr,1,true)) then begin
        res = VIr.RefStr;
      end;
    case 4:  // Interest 
      VIr.SerNr = transnr;
      if (ReadFirstMain(VIr,1,true)) then begin
        res = VIr.RefStr;
      end;
  end;
  RETURN;
END;

procedure GetComment(LongInt transnr,Integer type,var string res)
BEGIN
  record VIVc VIr;
  record OPVc OPr;
  
  res = "";
  switch (type) begin
    case 6:  // receipt 
      OPr.SerNr = transnr;
      if (ReadFirstMain(OPr,1,true)) then begin
        res = OPr.BankName;
      end;
    case 7:  // On Account receipt 
      OPr.SerNr = transnr;
      if (ReadFirstMain(OPr,1,true)) then begin
        res = OPr.BankName;
      end;
    case 1:  // Invoice 
      VIr.SerNr = transnr;
      if (ReadFirstMain(VIr,1,true)) then begin
        res = VIr.Comment;
      end;
    case 2:  // Cash 
      VIr.SerNr = transnr;
      if (ReadFirstMain(VIr,1,true)) then begin
        res = VIr.Comment;
      end;
    case 3:  // Credit 
      VIr.SerNr = transnr;
      if (ReadFirstMain(VIr,1,true)) then begin
        res = VIr.Comment;
      end;
    case 4:  // Interest 
      VIr.SerNr = transnr;
      if (ReadFirstMain(VIr,1,true)) then begin
        res = VIr.Comment;
      end;
  end;
  RETURN;
END;

function string 255 NumberSeriesComment_VIVc(LongInt sernr)
BEGIN
  string 255 res;
  record VISerBlock VISerb;
  row VISerBlock VISerw;
  Integer i,rwcnt;

  BlockLoad(VISerb);
  rwcnt = MatRowCnt(VISerb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VISerb,i,VISerw);
    if ((sernr>=VISerw.TSerStart) and (sernr<=VISerw.TSerEnd)) then begin
      res = VISerw.TSerCom;
      goto LNumberSeriesComment_VIVc;
    end;
  end;
LNumberSeriesComment_VIVc:;  
  NumberSeriesComment_VIVc = res;
  RETURN;
END;

function string 255 NumberSeriesComment_OPVc(LongInt sernr)
BEGIN
  string 255 res;
  record OPSerBlock OPSerb;
  row OPSerBlock OPSerw;
  Integer i,rwcnt;

  BlockLoad(OPSerb);
  rwcnt = MatRowCnt(OPSerb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OPSerb,i,OPSerw);
    if ((sernr>=OPSerw.TSerStart) and (sernr<=OPSerw.TSerEnd)) then begin
      res = OPSerw.TSerCom;
      goto LNumberSeriesComment_OPVc;
    end;
  end;
LNumberSeriesComment_OPVc:;  
  NumberSeriesComment_OPVc = res;
  RETURN;
END;

function string 255 FindNumberSeriesComment(Integer type,LongInt sernr)
BEGIN
  string 255 res;
  
  switch (type) begin
    case 1:
      res = NumberSeriesComment_VIVc(sernr);
    case 2:
      res = NumberSeriesComment_VIVc(sernr);
    case 3:
      res = NumberSeriesComment_VIVc(sernr);
    case 4:
      res = NumberSeriesComment_VIVc(sernr);     
    case 6: 
      res = NumberSeriesComment_OPVc(sernr);
    case 7:
      res = NumberSeriesComment_OPVc(sernr);      
  end;
  FindNumberSeriesComment = res;
  RETURN;
END;

global
procedure DoPrintAPSForm(record RcVc RepSpec,record CUVc VEp,
                   val ARSSum,val ARSOnAccBal,val ARSOnAccBalb1,val ARSSumb1,val ARSIntSum,val ARSSumLate,val ARSARSum,val ARSStartBal,val ARSSumNotLate,
                   Integer ARSLateCount,Integer ARSNotLateCount,
                   val ARSs0,val ARSs1,val ARSs16,val ARSs31,val ARSs61,val ARSs91,val ARSs121,val ARSs151,
                   Array Integer aRwtype,Array LongInt aInvoiceNr,Array LongInt alatedays,Array LongInt aRemndr,
                   Array Date aInvDate,Array Date aDueDate,Array val aIntVal,Array val aRVal,Array val aRVAT,Array val aSum4,Array val aDebVal,
                   Array string aVEInvNo,Array string aCurncyCode,Integer acnt)
BEGIN
  Integer i;
  string 255 tstr;
  val v,t;
  record SysFormatBlock SFb;
  record LangNrVc LangNrr;
  Integer maxrem;
  record AgedBlock Ab;
  array string 20 acur;
  array val av1;
  Integer curcnt;

  BlockLoad(Ab);
  GetLangNr("",LangNrr);  
  BlockLoad(SFb);
  BeginCurncyTotals(curcnt);
  for (i=0;i<acnt;i=i+1) begin
    if (aDebVal[i]!=0) then begin
      AddCurncyTotals(acur,av1,curcnt,aCurncyCode[i],-aDebVal[i]);
    end else begin  
      AddCurncyTotals(acur,av1,curcnt,aCurncyCode[i],aRVal[i]);
    end;  

    PrintValue("F_FAKTBELOPP",aSum4[i],M4Val,LangNrr,SFb,false);
    OUTFORMFIELD("F_FAKTURANR",aVEInvNo[i]);
    OUTFORMFIELD("F_FAKTNR",aInvoiceNr[i]);
    OUTFORMFIELD("F_KOMMENTAR",FindNumberSeriesComment(aRwtype[i],aInvoiceNr[i]));
    OUTFORMFIELD("F_FAKTDAG",aInvDate[i]);
    OUTFORMFIELD("F_FORFALLODATUM",aDueDate[i]);    
    if (Ab.ShowDelayDays!=0) then begin
      if (alatedays[i]<0) then begin
        OUTFORMFIELD("F_FORSENAT",-alatedays[i]);
      end else begin
        OUTFORMFIELD("F_FORSENAT",0);
      end;
    end else begin      
      OUTFORMFIELD("F_FORSENAT",alatedays[i]);
    end;
    OUTFORMFIELD("F_PAMINNELSENR",aRemndr[i]);
    PrintValue("F_RANTA",aIntVal[i],M4Val,LangNrr,SFb,false);
    PrintValueInclZero("F_SALDO",aRVal[i],M4Val,LangNrr,SFb,false);
    PrintValue("F_RECVALUE",aRVal[i],M4Val,LangNrr,SFb,false);
    OUTFORMFIELD("F_TRANSNR",aInvoiceNr[i]);
    PrintCurrencyCode("F_VALUTA",aCurncyCode[i]);
    ShortInvType(aRwtype[i],tstr)
    OUTFORMFIELD("F_FAKTTYP",tstr);
    InvoiceType(aRwtype[i],tstr)
    OUTFORMFIELD("F_FAKTURATYP",tstr);
    GetComment(aInvoiceNr[i],aRwtype[i],tstr)
    OUTFORMFIELD("F_COMMENT",tstr);
    GetReference(aInvoiceNr[i],aRwtype[i],tstr)
    OUTFORMFIELD("F_OURREF",tstr);
    if (FIELDINFORM("F_KID")) then begin
      CreateKIDCode(VEp.Code,aInvoiceNr[i],tstr);
      OUTFORMFIELD("F_KID",tstr);
    end;
    if (FIELDINFORM("F_KIDCHECK")) then begin
      CreateKIDCheckNor(aRVal[i],aInvoiceNr[i],tstr);
      OUTFORMFIELD("F_KIDCHECK",tstr);
    end;
    if (FIELDINFORM("F_KIDNOCHECK")) then begin
      CreateKIDNoCheck(VEp.Code,aInvoiceNr[i],tstr);
      OUTFORMFIELD("F_KIDNOCHECK",tstr);
    end;        
    if ((aRwtype[i]==-3) or (aRwtype[i]==2)) then begin
      if (aIntVal[i]<0) then begin
        t = -aIntVal[i];
      end else begin
        t = aIntVal[i];
      end;
      PrintValue("F_DEBVAL",t,M4Val,LangNrr,SFb,false);
      PrintValue("F_CREDVAL",t,M4Val,LangNrr,SFb,false);
    end else begin
      PrintValue("F_DEBVAL",aIntVal[i],M4DVal,LangNrr,SFb,false);
      PrintValue("F_CREDVAL",t,M4CVal,LangNrr,SFb,false);
    end;    
    FaktText(aRwtype[i],aInvoiceNr[i],tstr);
    OUTFORMFIELD("F_FAKTTEXT",tstr);
    PrintValue("F_CREDVALROW",aSum4[i],M4Val,LangNrr,SFb,false);
    PrintValue("F_DEBVALROW",aDebVal[i],M4Val,LangNrr,SFb,false);
    EndFormRow;
  end;  
  if (FIELDINFORM("F_ACCBALPERCURRENCY")) then begin
    for (i=0;i<curcnt;i=i+1) begin
      OUTFORMFIELD("F_ACCBALCURRENCY",acur[i]);
      PrintValueInclZero("F_ACCBALPERCURRENCY",av1[i],M4Val,LangNrr,SFb,false);
    end;
  end;
  if (FIELDINFORM("F_ACCBAL")) then begin
    t = blankval;
    for (i=0;i<acnt;i=i+1) begin
      if (aCurncyCode[i]==VEp.VECurncyCode) then begin
        v = aRVal[i];
      end else begin
        if (blank(VEp.VECurncyCode)) then begin
          v = MulWithRateToBase1(aCurncyCode[i],CurrentDate,aRVal[i],DefaultCurRoundOff);
        end else begin
          CurValToOtherCur(CurrentDate,aCurncyCode[i],aRVal[i],VEp.VECurncyCode,v,DefaultCurRoundOff);
        end;
      end;
      switch (aRwtype[i]) begin
        case 1: t = t + v;
        case 2: t = t + v;
        case 4: t = t + v;
        case 3: 
          if (RepSpec.flags[7]!=0) then begin
            t = t + v;
          end else begin
            t = t - v;
          end;
      end;
    end;
    PrintValue("F_ACCBAL",t,M4Val,LangNrr,SFb,false);
  end;
  if (FIELDINFORM("F_DEBETPERIOD")) then begin
    t = blankval;
    for (i=0;i<acnt;i=i+1) begin
      switch (aRwtype[i]) begin
        case 1: t = t + aIntVal[i];
        case 2: t = t + aIntVal[i];
        case 3: t = t + aIntVal[i];
        case 4: t = t + aIntVal[i];
      end;
    end;
    PrintValue("F_DEBETPERIOD",t,M4Val,LangNrr,SFb,false);
  end;
  if (FIELDINFORM("F_CREDITPERIOD")) then begin
    t = blankval;
    for (i=0;i<acnt;i=i+1) begin
      switch (aRwtype[i]) begin
        case 2: t = t + aIntVal[i];
        case 6: t = t - aIntVal[i];
        case 7: t = t - aIntVal[i];
      end;
    end;
    PrintValue("F_CREDITPERIOD",t,M4Val,LangNrr,SFb,false);
  end;
  if (FIELDINFORM("F_DEBETPERIODNOCASH")) then begin
    t = blankval;
    for (i=0;i<acnt;i=i+1) begin
      switch (aRwtype[i]) begin
        case 1: t = t + aIntVal[i];
        case 3: t = t + aIntVal[i];
        case 4: t = t + aIntVal[i];
      end;
    end;
    PrintValue("F_DEBETPERIODNOCASH",t,M4Val,LangNrr,SFb,false);
  end;
  if (FIELDINFORM("F_CREDITPERIODNOCASH")) then begin
    t = blankval;
    for (i=0;i<acnt;i=i+1) begin
      switch (aRwtype[i]) begin
        case 6: t = t - aIntVal[i];
        case 7: t = t - aIntVal[i];
      end;
    end;
    PrintValue("F_CREDITPERIODNOCASH",t,M4Val,LangNrr,SFb,false);
  end;
  if (FIELDINFORM("F_TURNPERIOD")) then begin
    t = blankval;
    for (i=0;i<acnt;i=i+1) begin
      switch (aRwtype[i]) begin
        case 1: t = t + aIntVal[i];
        case 4: t = t + aIntVal[i];
        case 3: t = t + aIntVal[i];
      end;
    end;
    PrintValue("F_TURNPERIOD",t,M4Val,LangNrr,SFb,false);
  end;

  if ((FIELDINFORM("F_INTERESTFEE")) or (FIELDINFORM("F_SUMPLUSFEE")) or (FIELDINFORM("F_SUMPLUSRANTAPLUSFEE"))) then begin
    GetRemFee(t);
    PrintValue("F_INTERESTFEE",t,M4Val,LangNrr,SFb,false);
    PrintValue("F_SUMPLUSFEE",ARSSum + t,M4Val,LangNrr,SFb,false);
    PrintValue("F_SUMPLUSRANTAPLUSFEE",ARSSum + ARSIntSum + t,M4Val,LangNrr,SFb,false);
  end;
  OUTFORMFIELD("F_LEVERANTOR",VEp.Code);
  OUTFORMFIELD("F_LEVNAMN",VEp.Name);
  OUTFORMFIELD("F_LEVFAX",VEp.Fax);
  OUTFORMFIELD("F_LEVPHONE",VEp.Phone);
  OUTFORMFIELD("F_LEVVATNR",VEp.VATNr);
  OUTFORMFIELD("F_VEREGNUMBER1",VEp.RegNr1);
  OUTFORMFIELD("F_VEREGNUMBER2",VEp.RegNr2);

  OutAddress("F_ADRESS",VEp.Name,VEp.InvAddr0,VEp.InvAddr1,VEp.InvAddr2,VEp.InvAddr3,VEp.InvAddr4);

  OUTFORMFIELD("F_ADDR1",VEp.InvAddr0);
  OUTFORMFIELD("F_ADDR2",VEp.InvAddr1);
  OUTFORMFIELD("F_ADDR3",VEp.InvAddr2);
  OUTFORMFIELD("F_INVADDR3",VEp.InvAddr3);
  OUTFORMFIELD("F_INVADDR4",VEp.InvAddr4);

  OUTFORMFIELD("F_KUNDNR",VEp.Code);
  OUTFORMFIELD("F_KUNDNAMN",VEp.Name);
  OUTFORMFIELD("F_KUNDFAX",VEp.Fax);
  OUTFORMFIELD("F_KUNDTEL",VEp.Phone);
  OUTFORMFIELD("F_KUNDMOMSNR",VEp.VATNr);
  OUTFORMFIELD("F_REGNUMBER1",VEp.RegNr1);
  OUTFORMFIELD("F_REGNUMBER2",VEp.RegNr2);
  
  OUTFORMFIELD("F_KONTAKT",VEp.Person);
  if (nonblank(VEp.VECurncyCode)) then begin
    tstr = VEp.VECurncyCode;
  end else begin
    GetBaseCurncy(1,tstr);
  end;
  OUTFORMFIELD("F_KUNDVALUTA",tstr);

  PrintValue("F_SUMMA",ARSSum,M4Val,LangNrr,SFb,false);
  PrintValue("F_RANTESUMMA",ARSIntSum,M4Val,LangNrr,SFb,false);
  PrintValue("F_SUMMAPLUSRANTA",ARSSum + ARSIntSum,M4Val,LangNrr,SFb,false);
  PrintValue("F_FORSENATPLUSRANTA",ARSSumLate + ARSIntSum,M4Val,LangNrr,SFb,false);
  PrintValue("F_AGEDTOTAL",ARSARSum,M4Val,LangNrr,SFb,false);
  PrintValue("F_STARTBAL",ARSStartBal,M4Val,LangNrr,SFb,false);
  PrintValue("F_CHANGEPERIOD",ARSSum - ARSStartBal,M4Val,LangNrr,SFb,false);
  PrintValue("F_AGED0",ARSs0,M4Val,LangNrr,SFb,false);
  PrintValue("F_AGED1",ARSs1,M4Val,LangNrr,SFb,false);
  PrintValue("F_AGED2",ARSs16,M4Val,LangNrr,SFb,false);
  PrintValue("F_AGED3",ARSs31,M4Val,LangNrr,SFb,false);
  PrintValue("F_AGED4",ARSs61,M4Val,LangNrr,SFb,false);
  PrintValue("F_AGED5",ARSs91,M4Val,LangNrr,SFb,false);
  PrintValue("F_AGED6",ARSs121,M4Val,LangNrr,SFb,false);
  PrintValue("F_AGED7",ARSs151,M4Val,LangNrr,SFb,false);
  PrintValue("F_SUMMAFORSENAT",ARSSumLate,M4Val,LangNrr,SFb,false);
  PrintValue("F_SUMMAEJFORSENAT",ARSSumNotLate,M4Val,LangNrr,SFb,false);
  if (RepSpec.flags[4]!=0) then begin
    PrintValue("F_ONACC",ARSOnAccBal,M4Val,LangNrr,SFb,false);
    PrintValueInclZero("F_TOTSUM",ARSSum + ARSOnAccBal,M4Val,LangNrr,SFb,false);  
  end else begin
    PrintValue("F_ONACC",ARSOnAccBalb1,M4Val,LangNrr,SFb,false);
    PrintValueInclZero("F_TOTSUM",ARSSumb1 + ARSOnAccBalb1,M4Val,LangNrr,SFb,false);  
  end;
  PrintValueInclZero("F_TOTPLUSONACC",ARSSum + ARSIntSum + ARSOnAccBal,M4Val,LangNrr,SFb,false);
//  PrintValueInclZero("F_TOTSUM",ARSSum + ARSOnAccBal,M4Val,LangNrr,SFb,false);  
  OUTFORMFIELD("F_STARTDATE",RepSpec.d1);
  OUTFORMFIELD("F_RANTEFRANDAG",RepSpec.d1);
  OUTFORMFIELD("F_ANTALFORSENAT",ARSNotLateCount);
  OUTFORMFIELD("F_ANTALEJFORSENAT",ARSLateCount);
  RETURN;
END;

global
procedure PrintAPSForm(record RcVc RepSpec,record CUVc VEp,
                   val ARSSum,val ARSOnAccBal,val ARSOnAccBalb1,val ARSSumb1,val ARSIntSum,val ARSSumLate,val ARSARSum,val ARSStartBal,val ARSSumNotLate,
                   Integer ARSLateCount,Integer ARSNotLateCount,
                   val ARSs0,val ARSs1,val ARSs16,val ARSs31,val ARSs61,val ARSs91,val ARSs121,val ARSs151,
                   Array Integer aRwtype,Array LongInt aInvoiceNr,Array LongInt alatedays,Array LongInt aRemndr,
                   Array Date aInvDate,Array Date aDueDate,Array val aIntVal,Array val aRVal,Array val aRVAT,Array val aSum4,Array val aDebVal,
                   Array string aVEInvNo,Array string aCurncyCode,Integer acnt)
BEGIN
  Integer i,rwcnt;  
  Boolean printf,langf;
  Integer intdocnr;
  string 30 formcode,langcode;
  record FormDefVc FDr;
  row FormDefVc FDrw;

  langcode = VEp.LangCode;
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LPrintAPSForm;
  end;
  rwcnt = MatRowCnt(FDr);
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(FDr,i,FDrw);
    if (FDrw.LangCode==langcode) then begin
      i = -1;
      langf = true;
    end;
  end;
  if (langf==false) then begin langcode = ""; end;
  intdocnr = 1;
  printf = true;
  while (printf) begin  
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,-1,FDrw.PrintGroupCode,
                      langcode,intdocnr,"",formcode)) then
      begin
        goto LBREAKAPS;
      end;
    end;
LBREAKAPS:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin
        CommonDocumentFields(RepSpec);
        NumberofDocumentPages(FDrw.FPCode,acnt);
        DoPrintAPSForm(RepSpec,VEp,ARSSum,ARSOnAccBal,ARSOnAccBalb1,ARSSumb1,ARSIntSum,ARSSumLate,ARSARSum,ARSStartBal,ARSSumNotLate,ARSLateCount,ARSNotLateCount,
                       ARSs0,ARSs1,ARSs16,ARSs31,ARSs61,ARSs91,ARSs121,ARSs151,aRwtype,aInvoiceNr,alatedays,aRemndr,aInvDate,aDueDate,aIntVal,
                       aRVal,aRVAT,aSum4,aDebVal,aVEInvNo,aCurncyCode,acnt);
        CloseForm;
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
  end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LPrintAPSForm:;  
  RETURN;
END;

global
updating procedure DoAPSForm(record RcVc Dummyr,record RcVc RepSpec)
BEGIN
  DoAPSForms(RepSpec,0);
  RETURN;
END;

global
updating procedure APSForm(record RcVc RepSpec)
BEGIN
  Boolean tmpf;
  
  tmpf = PrintDocument(RepSpec,"APSForm",false);
  RETURN;
END;
