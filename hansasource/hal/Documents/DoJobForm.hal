external procedure PrintCurrencyCode(string,string);
external procedure GetFullCurncyRateText(Boolean,var string,val,val,val,val,val);
external procedure PrintLongInt(string,LongInt);
external procedure PrintValueInclZero(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external function roundmode DefaultRoundMode();
external function Boolean FindResourceItem(String,String,LongInt,var String,var String,Date,var val,var string);
external procedure GetFieldArgument(record DocVc,Integer,var string);
external procedure PrintNote(record NotepadVc);
external procedure OutAddress(string,string,string,string,string,string,string);
external procedure GetLangNr(string,var record LangNrVc);
external procedure PrintValue(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external procedure GetPayDealText(string,string,var string);
external function LongInt DateDiff(Date,Date);
external function Boolean Getformcode(Integer,Integer,string,string,string,LongInt,LongInt,string,string,Integer,string,var string);
external procedure CommonDocumentFields(record RcVc);
external function Integer NumberofDocumentPages(string,Integer);
external procedure GetUserName(string,var string);
external function Boolean IsCancelState(String);
external function integer GetPersonsInJob(Record JobVc);
external function integer GetRoomsInJob(Record JobVc);
external procedure GetEvents(Record JobVc,Boolean,var string);
external function val NumberOfStayDays(Date,Date,Time,Time,Integer);
external function LongInt YearsOld(Date);
external procedure PrintBranchData(string);
external function integer GetGuestsInJob(record JobVc);

procedure PrintJobStdText(string LTxtCode)
BEGIN
  Integer i,rwcnt;
  string 255 tstr;
  record LTxtVc LTxtr
  
  LTxtr.Code = LTxtCode;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    rwcnt = LineTextCnt(LTxtr);
    for (i=0;i<rwcnt;i=i+1) begin
      tstr = LineTextGet(LTxtr,i);
      OUTFORMFIELD("F_TEXT",tstr);
//      EndFormRow;
    end;
  end;
  RETURN;
END;

global
function string 255 GetObservTypeName(Integer type)
begin
  string 255 tstr;
  
  switch (Type) begin
    case 0: tstr = USetStr(10207);
    case 1: tstr = USetStr(10207);
    case 2: tstr = USetStr(10209);
    case 6: tstr = USetStr(10209);
    case 3: tstr = USetStr(10210);
    case 4: tstr = USetStr(10210);
    case 5: tstr = USetStr(10211);
  end;
  GetObservTypeName = tstr;
  return;
end;

procedure PrintObservations(record JobVc Jobr)
BEGIN
  Boolean TrHs;
  record GuestObserVc GuestObserr;
  row JobVc Jobrw;
  Integer i,rwcnt;

  rwcnt = MatRowCnt(Jobr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatrowGet(Jobr,i,Jobrw);
    ResetLoop(GuestObserr);
    TrHs = true;
    GuestObserr.Guest = Jobrw.GuestCode;
    while LoopKey("Guest",GuestObserr,1,TrHs) begin
      if (GuestObserr.Guest <> Jobrw.GuestCode) then begin
        TrHs = false;
      end else begin
        OUTFORMFIELD("F_OBSTYPE",GetObservTypeName(GuestObserr.Type));
        OUTFORMFIELD("F_OBSGUEST",GuestObserr.Person);
        OUTFORMFIELD("F_OBSDATE",GuestObserr.TransDate);
        OUTFORMFIELD("F_OBSCOMMENT",GuestObserr.Comment);
      end;
    end;
  end;
  RETURN;
END;

procedure PrintJobNote(record JobVc Jobr,string argumentstr)
BEGIN
  record NotepadVc Noter;
  record RLinkVc RLr;
  Integer notenr;

  notenr = 1;
  while (ReadRecordLink(Jobr,notenr,Noter,RLr)) begin
    if ((argumentstr==RLr.Comment) or (blank(argumentstr))) then begin
      PrintNote(Noter);
      goto LPrintJobNote;
    end;
    notenr = notenr + 1;
  end;
LPrintJobNote:;  
  RETURN;
END;

/*
procedure PrintJobText(record JobVc Jobr)
BEGIN
  Integer i,rwcnt;
  string 255 tstr;
  
  rwcnt = LineTextCnt(Jobr);
  for (i=0;i<rwcnt;i=i+1) begin
    tstr = LineTextGet(Jobr,i);
    OUTFORMFIELD("F_NOTE",tstr);
  end;  
  RETURN;
END;
*/
procedure PrintSubJob(record RcVc RepSpec,record JobVc MotherJobr)
BEGIN
  record JobVc Jobr;
  Boolean TrHs;
  string 255 keystr,cclassd,tstr,pricerules;
  record INVc INr;
  val t;
  record ReservationStatusVc RSr;
  Integer typ;
  LongInt NoOfGuests;
    
  keystr = "Mother:";
  keystr = keystr & MotherJobr.SerNr;
  TrHs = true;
  while (LoopKey(keystr,Jobr,1,TrHs)) begin
    if (Jobr.Mother!=MotherJobr.SerNr) then begin
      TrHs = false;
    end;  
    if (TrHs) then begin
      OUTFORMFIELD("F_SUBRESNR",Jobr.SerNr);
      OUTFORMFIELD("F_SUBRESNAME",Jobr.ResName);
      OUTFORMFIELD("F_SUBRESCODE",Jobr.ResCode);
      OUTFORMFIELD("F_SUBRESSTARTTIME",Jobr.StartTime);
      OUTFORMFIELD("F_SUBRESENDTIME",Jobr.EndTime);
      OUTFORMFIELD("F_SUBRESSTARTDATE",Jobr.TransDate);
      OUTFORMFIELD("F_SUBRESENDDATE",Jobr.EndDate);
      OUTFORMFIELD("F_SUBRESSTATUS",Jobr.ResStatus);
      RSr.Code = Jobr.ResStatus;
      ReadFirstMain(RSr,1,true);
      OUTFORMFIELD("F_SUBRESSTATUSTEXT",RSr.Comment);
      OUTFORMFIELD("F_SUBCUSTCODE",Jobr.CUCode);
      OUTFORMFIELD("F_SUBCUSTNAME",Jobr.CUName);      
      NoOfGuests = GetGuestsInJob(Jobr);
      OUTFORMFIELD("F_SUBQTYCONV",NoOfGuests);

      FindResourceItem(Jobr.Type,Jobr.ResUsage,NoOfGuests,tstr,pricerules,Jobr.TransDate,t,cclassd);
      INr.Code = tstr;
      ReadFirstMain(INr,1,true);
      OUTFORMFIELD("F_SUBRESITEMNAME",INr.Name);
//      EndFormRow;
    end;
  end;
  RETURN;
END;

procedure PrintJobRows(record RcVc RepSpec,record JobVc Jobr)
BEGIN
  Integer i,rwcnt;
  row JobVc Jobrw;
  string 255 tstr;
  record CUVc Guestr;
  
  rwcnt = MatRowCnt(Jobr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Jobr,i,Jobrw);
    OUTFORMFIELD("F_ORGCUSTNR",Jobrw.CUCode);
    OUTFORMFIELD("F_ORGCUSTNAME",Jobrw.CUName);
    OUTFORMFIELD("F_GUESTCODE",Jobrw.GuestCode);
    Guestr.Code = Jobrw.GuestCode;
    if (ReadFirstMain(Guestr,1,true)) then begin
    end;
    OUTFORMFIELD("F_GUESTNAME",Guestr.Name);
    OUTFORMFIELD("F_GUESTNATIONALITY",Guestr.Nationality);
    OUTFORMFIELD("F_GUESTAGE",YearsOld(Guestr.BirthDate));
    OUTFORMFIELD("F_PRICELISTROW",Jobrw.PriceList);
    OUTFORMFIELD("F_TRANSROW",i+1);          
    OUTFORMFIELD("F_ROOM",Jobr.ResCode);          
    EndFormRow;    
  end;  
  RETURN;
END;

procedure GetResUsageText(string resusage,var string res)
BEGIN
  record ResUsageVc ResUsager;
  
  res = "";
  ResUsager.Code = resusage;
  if (ReadFirstMain(ResUsager,1,true)) then begin
    res = ResUsager.Comment;
  end;
  RETURN;
END;

procedure PrintAllJobRows(record RcVc RepSpec,record JobVc MotherJobr)
begin
  record JobVc Jobr;
  Boolean TrHs;
  string 255 keystr;
    
  PrintJobRows(RepSpec,MotherJobr);  
  keystr = "Mother:";
  keystr = keystr & MotherJobr.SerNr;
  TrHs = true;
  while (LoopKey(keystr,Jobr,1,TrHs)) begin
    if (Jobr.Mother!=MotherJobr.SerNr) then begin
      TrHs = false;
    end;  
    if (TrHs) then begin
      if (not IsCancelState(Jobr.ResStatus)) then begin
        PrintJobRows(RepSpec,Jobr);  
      end;  
    end;
  end;
 
  return;
end;

procedure PrintTheJobForm(record RcVc RepSpec,record SysFormatBlock SFb,record LangNrVc LangNrr,record DocVc Docr,string formcode,record JobVc Jobr,Integer whichone)
begin
  val t;
  Integer tmp;
  string 255 tstr;
  record CUVc CUr;
  record ResUsageVc ResUsage;

  NumberofDocumentPages(formcode,MatRowCnt(Jobr));
  if (whichone==2) then begin
    OUTFORMFIELD("F_DOCTYPE",USetStr(25591));
  end else begin
    OUTFORMFIELD("F_DOCTYPE",USetStr(25590));
  end;
  OUTFORMFIELD("F_SERNR",Jobr.SerNr);
  OUTFORMFIELD("F_BOOKORIGIN",Jobr.BookOrigin);
  OUTFORMFIELD("F_REFERENSNUMMER",Jobr.RefStr);
  OUTFORMFIELD("F_VISITPURPOSE",Jobr.VisitPurpose);
  OUTFORMFIELD("F_RESUSAGE",Jobr.ResUsage);
  OUTFORMFIELD("F_QTYCONV",GetGuestsInJob(Jobr));
  OUTFORMFIELD("F_PRICELIST",Jobr.PriceList);
  OUTFORMFIELD("F_RESOURCE",Jobr.ResCode);
  OUTFORMFIELD("F_RESOURCENAME",Jobr.ResName);
  OUTFORMFIELD("F_RESOURCETYPE",Jobr.Type);
  OUTFORMFIELD("F_OBJECT",Jobr.Objects);
  OUTFORMFIELD("F_CHECKIN",Jobr.TransDate);
  OUTFORMFIELD("F_STARTDATUM",Jobr.TransDate);
  OUTFORMFIELD("F_STARTDATE",Jobr.TransDate);
  OUTFORMFIELD("F_STARTTIME",Jobr.StartTime);
  OUTFORMFIELD("F_ENDTIME",Jobr.EndTime);
  OUTFORMFIELD("F_SIGNATURE",Jobr.SalesMan);
  GetUserName(Jobr.SalesMan,tstr);
  OUTFORMFIELD("F_SALJARNAMN",tstr);
  OUTFORMFIELD("F_ENDDATE",Jobr.EndDate);
  OUTFORMFIELD("F_CHECKOUT",Jobr.EndDate);
  OUTFORMFIELD("F_TRANSDATE",Jobr.RegDate);
  OUTFORMFIELD("F_PARTNERCONTACT",Jobr.CustContact);
  OUTFORMFIELD("F_COMMENT",Jobr.Comment);
  OUTFORMFIELD("F_RESSTATUS",Jobr.ResStatus);
  OUTFORMFIELD("F_AGENT",Jobr.Source);
  OUTFORMFIELD("F_AGENTNAME",Jobr.SourceName);
  OUTFORMFIELD("F_PRINTDATE",CurrentDate);
  t = GetGuestsInJob(Jobr);
  if (t==0) then begin
    t = 1;
  end;
  PrintValue("F_SUMPRIS",Round(Jobr.TotalSum4/t,DefaultRoundMode),M4Val,LangNrr,SFb,false);
  CUr.Code = Jobr.Source;
  if (ReadFirstMain(CUr,1,true)) then begin end;
  OUTFORMFIELD("F_AGENTCONTACT",CUr.Person);
  tmp = NumberOfStayDays(Jobr.TransDate,Jobr.EndDate,Jobr.StartTime,Jobr.EndTime,1);
  OUTFORMFIELD("F_NIGHTS",tmp); tmp = 0;
  tmp = GetPersonsInJob(Jobr);
  OUTFORMFIELD("F_PAXS",tmp);
  tmp = GetRoomsInJob(Jobr);
  OUTFORMFIELD("F_ROOMS",tmp);
  tmp = 0;
  GetEvents(Jobr,true,tstr);
  OUTFORMFIELD("F_INFLIGHT",tstr); tstr = "";
  GetEvents(Jobr,true,tstr);
  OUTFORMFIELD("F_OUTFLIGHT",tstr);  tstr = "";
  OUTFORMFIELD("F_KUNDNR",Jobr.CUCode);
  OUTFORMFIELD("F_KUNDNAMN",Jobr.CUName);
  CUr.Code = Jobr.CUCode;
  if (ReadFirstMain(CUr,1,true)) then begin
  end;
  OUTFORMFIELD("F_KONTAKT",CUr.Person);
  OUTFORMFIELD("F_KUNDFAX",CUr.Fax);
  OUTFORMFIELD("F_KUNDTEL",CUr.Phone);
  OUTFORMFIELD("F_CUSTOMEREMAIL",CUr.eMail);
  OUTFORMFIELD("F_MOBILE",CUr.Mobile);
  OUTFORMFIELD("F_WWW",CUr.wwwAddr);
  OutAddress("F_ADRESS",CUr.Name,CUr.InvAddr0,CUr.InvAddr1,CUr.InvAddr2,CUr.InvAddr3,CUr.InvAddr4);          
  OUTFORMFIELD("F_ADDR2",CUr.InvAddr0);
  OUTFORMFIELD("F_ADDR3",CUr.InvAddr1);
  OUTFORMFIELD("F_ADDR4",CUr.InvAddr2);
  OUTFORMFIELD("F_INVADDR3",CUr.InvAddr3);
  OUTFORMFIELD("F_INVADDR4",CUr.InvAddr4);
  OutAddress("F_ADRESSATT",CUr.Name,CUr.Person,CUr.InvAddr0,CUr.InvAddr1,CUr.InvAddr2,CUr.InvAddr3);
  if nonblank(CUr.InvAddr4) then begin
    OUTFORMFIELD("F_ADRESSATT",CUr.InvAddr4);
  end;
  PrintBranchData(Jobr.BranchID);
  if (FIELDINFORM("F_VILLKOR")) then begin
    GetPayDealText(CUr.PayDeal,CUr.LangCode,tstr);
    OUTFORMFIELD("F_VILLKOR",tstr);
  end;
  OUTFORMFIELD("F_ROWPACKAGES",Jobr.ResUsage);
  if (FieldInForm("F_ROWPACKTEXT")) then begin
    ResUsage.Code = Jobr.ResUsage;
    if (ReadFirstMain(ResUsage,1,true)) then begin
      OUTFORMFIELD("F_ROWPACKTEXT",ResUsage.Comment);
    end;
  end;
  PrintValue("F_AGREEDPRICE",Jobr.AgreedPrice,M4Val,LangNrr,SFb,false);
  OUTFORMFIELD("F_AGREEDDISCOUNT",Jobr.AgreedDiscount);
  PrintValue("F_PRIS",Jobr.PLPrice,M4Val,LangNrr,SFb,false);
  PrintValue("F_SUMMA",Jobr.Sum4,M4Val,LangNrr,SFb,false);
  PrintValue("F_ORDERTOTAL",Jobr.TotalSum4,M4Val,LangNrr,SFb,false);
  PrintValue("F_ROWVATVAL",Jobr.VatSum,M4Val,LangNrr,SFb,false);
  PrintValue("F_MOMS",Jobr.TotalVatSum,M4Val,LangNrr,SFb,false);
//          OUTFORMFIELD("F_DOWNPAYSENT",Jobr.TotalSum4*HotelSetttings.DownPercent/100);
// we don't know how much has been prepaid
  OUTFORMFIELD("F_RESUSAGE",Jobr.ResUsage);
  GetResUsageText(Jobr.ResUsage,tstr);
  OUTFORMFIELD("F_RESUSAGETEXT",tstr);
  PrintLongInt("F_NOOFADULTS",Jobr.Persons);
  PrintLongInt("F_NOOFCHILDREN",Jobr.Children);
  PrintCurrencyCode("F_VALUTA",Jobr.CurncyCode);
  if (FIELDINFORM("F_RATE")) then begin
    GetFullCurncyRateText(true,tstr,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);        
    OUTFORMFIELD("F_RATE",tstr);
  end;  

  PrintJobStdText(Jobr.LTxtCode);
  PrintObservations(Jobr);
  PrintSubJob(RepSpec,Jobr);
//          PrintSugestedProgram(Jobr.SerNr);       
  PrintAllJobRows(RepSpec,Jobr);
//          PrintJobRows(RepSpec,Jobr);
  if (FIELDINFORM("F_NOTE")) then begin
    GetFieldArgument(Docr,F_NOTE,tstr);
    PrintJobNote(Jobr,tstr);
  end;
//          PrintJobText(Jobr);
  return;
end;

procedure Combined_ConfirmBookingRow(record JobVc Jobr,var record IVVc resIVr)
begin
  row IVVc resIVrw;
  
  ClearRow(resIVr,resIVrw,1);
  resIVrw.stp = 1;
  resIVrw.OrdRow = Jobr.SerNr;
  resIVrw.SerialNr = Jobr.RefStr;
  resIVrw.Quant = Jobr.NrOfDays;
  resIVrw.Price = Jobr.PLPrice;
  resIVrw.Sum = resIVrw.Quant*resIVrw.Price;

  resIVrw.FIFO = Jobr.Sum4;
  resIVrw.Spec = USetStr(25570) & " " & Jobr.SerNr & ":";
  resIVrw.Spec = resIVrw.Spec & " " & Jobr.NrOfDays & " " & USetStr(25571);
  resIVrw.Spec = resIVrw.Spec & " " & Jobr.PLPrice & "/" & USetStr(25571);
  MatRowPut(resIVr,MatRowCnt(resIVr),resIVrw);
  return;
end;

procedure Combined_CustomerRow(record JobVc Jobr,var record IVVc resIVr)
begin
  row IVVc resIVrw;
  
  ClearRow(resIVr,resIVrw,1);
  resIVrw.stp = 2;
  resIVrw.Spec = Jobr.CUName & ", " & USetStr(25572);
  resIVrw.Spec = resIVrw.Spec & " " & Jobr.TransDate;
  resIVrw.Spec = resIVrw.Spec & " " & Jobr.StartTime;
  resIVrw.Spec = resIVrw.Spec & ", " & USetStr(25572);
  resIVrw.Spec = resIVrw.Spec & " " & Jobr.EndDate;
  resIVrw.Spec = resIVrw.Spec & " " & Jobr.EndTime;
  resIVrw.Spec = resIVrw.Spec & " " & USetStr(25574) & ":";
  resIVrw.Spec = resIVrw.Spec & " " & Jobr.Persons;
  resIVrw.Spec = resIVrw.Spec & " " & USetStr(25575) & ":";
  resIVrw.Spec = resIVrw.Spec & " " & Jobr.Children;
  MatRowPut(resIVr,MatRowCnt(resIVr),resIVrw);
  return;
end;

procedure Combined_RoomTypeRow(record JobVc Jobr,var record IVVc resIVr)
begin
  row IVVc resIVrw;
  record ResTypeVc RTr;
  record ResVc Roomr;
  record ResLocVc RLr;
  record ResUsageVc RoomPackr;
  
  RTr.Code = Jobr.Type;
  ReadFirstMain(RTr,1,true);
  Roomr.Code = Jobr.ResCode;
  ReadFirstMain(Roomr,1,true);
  RLr.Code = Roomr.ResLoc;
  ReadFirstMain(RLr,1,true);
  RoomPackr.Code = Jobr.ResUsage;
  ReadFirstMain(RoomPackr,1,true);
  ClearRow(resIVr,resIVrw,1);
  resIVrw.stp = 3;
  resIVrw.Spec = USetStr(25576);
  resIVrw.Spec = resIVrw.Spec & " " & RTr.Comment;
  resIVrw.Spec = resIVrw.Spec & " " & RLr.Comment;
  resIVrw.Spec = resIVrw.Spec & " " & RoomPackr.Comment;
  if (blank(Jobr.RefStr)) then begin
    resIVrw.Spec = resIVrw.Spec & " " & USetStr(25577) & " " & Jobr.RefStr;
  end;
  MatRowPut(resIVr,MatRowCnt(resIVr),resIVrw);
  return;
end;

procedure Combined_GuestRow(row JobVc Jobrw,var record IVVc resIVr)
begin
  row IVVc resIVrw;
  record CUVc CUr;
    
  CUr.Code = Jobrw.CUCode;
  ReadFirstMain(CUr,1,true);
  ClearRow(resIVr,resIVrw,1);
  resIVrw.stp = 4;
  resIVrw.Spec = USetStr(25578) & ": " & Jobrw.GuestCode;
  resIVrw.Spec = resIVrw.Spec & " " & CUr.Nationality;
  MatRowPut(resIVr,MatRowCnt(resIVr),resIVrw);
  return;
end;

procedure Combined_AditionalItemsRow(record JobVc Jobr,var record IVVc resIVr)
begin
  row IVVc resIVrw;
  Boolean found,firstf,testf;
  record ShopBaskVc ShopBaskr;

  firstf = true;
  found = true;
  ShopBaskr.OwnerSerNr = Jobr.SerNr;
  ShopBaskr.Owner = kShopBaskOwnerReservation;
  while (LoopKey("OwnerSerNr",ShopBaskr,2,found)) begin
    if (ShopBaskr.OwnerSerNr!=Jobr.SerNr) then begin found = false; end;
    if (ShopBaskr.Owner!=kShopBaskOwnerReservation) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (ShopBaskr.Price<0) then begin testf = false; end;
      if (testf) then begin
        ClearRow(resIVr,resIVrw,1);
        resIVrw.stp = 5;
        if (firstf) then begin
          resIVrw.Spec = USetStr(25579) & ": ";
          firstf = false;
        end;
        resIVrw.Spec = resIVrw.Spec & ShopBaskr.Qty;
        resIVrw.Spec = resIVrw.Spec & " " & ShopBaskr.Comment;
        if (ShopBaskr.PriceInCur!=0) then begin
          resIVrw.Spec = resIVrw.Spec & " " & ShopBaskr.PriceInCur;
          resIVrw.Spec = resIVrw.Spec & " " & ShopBaskr.Qty*ShopBaskr.PriceInCur;
        end else begin
          resIVrw.Spec = resIVrw.Spec & " " & ShopBaskr.Price;
          resIVrw.Spec = resIVrw.Spec & " " & ShopBaskr.Qty*ShopBaskr.Price;
        end;
        resIVrw.FIFO = ShopBaskr.Qty*ShopBaskr.Price;
        MatRowPut(resIVr,MatRowCnt(resIVr),resIVrw);
      end;
    end;
  end;
  return;
end;

procedure Combined_DowpaymentInvoices(record JobVc Jobr,var record IVVc resIVr)
begin
  record IVVc IVr;
  record ARVc ARr;
  Boolean found;
  row IVVc resIVrw;
  
  found = true;
  IVr.JobNr = Jobr.SerNr;
  while (LoopKey("JobNr",IVr,1,found)) begin
    if (IVr.JobNr!=Jobr.SerNr) then begin found = false; end;
    if (found) then begin
      resIVrw.stp = 6;
      resIVrw.Spec = USetStr(25580) & " " & Jobr.SerNr;
      resIVrw.Spec = resIVrw.Spec & " " & USetStr(25581) & " " & IVr.SerNr;
      ARr.InvoiceNr = IVr.SerNr;
      ReadFirstMain(ARr,1,true);
      resIVrw.FIFO = IVr.Sum4;
      resIVrw.FIFORowVal = IVr.Sum4 - ARr.RVal;
      MatRowPut(resIVr,MatRowCnt(resIVr),resIVrw);
    end;    
  end;
  return;
end;

procedure Combined_SubReservation(record JobVc subJobr,var record IVVc resIVr)
begin
  row JobVc Jobrw;
  Integer i,rwcnt;

  Combined_ConfirmBookingRow(subJobr,resIVr);
  Combined_CustomerRow(subJobr,resIVr);
  Combined_RoomTypeRow(subJobr,resIVr);
  rwcnt = MatRowCnt(subJobr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(subJobr,i,Jobrw);
    Combined_GuestRow(Jobrw,resIVr);
  end;
  Combined_AditionalItemsRow(subJobr,resIVr);
  return;
end;

procedure PrepareReservation(record JobVc Jobr,var record IVVc resIVr)
begin
  row JobVc Jobrw;
  Integer i,rwcnt;
  Boolean found;
  record JobVc subJobr;
  
  RecordClear(resIVr);
  Combined_ConfirmBookingRow(Jobr,resIVr);
  Combined_CustomerRow(Jobr,resIVr);
  Combined_RoomTypeRow(Jobr,resIVr);
  rwcnt = MatRowCnt(Jobr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Jobr,i,Jobrw);
    Combined_GuestRow(Jobrw,resIVr);
  end;
  Combined_AditionalItemsRow(Jobr,resIVr);
  found = true;
  subJobr.Mother = Jobr.SerNr;
  while (LoopKey("MotherKey",subJobr,1,found)) begin
    if (subJobr.Mother!=Jobr.SerNr) then begin found = false; end;
    if (found) then begin
      Combined_SubReservation(subJobr,resIVr);
    end;
  end;
  Combined_DowpaymentInvoices(Jobr,resIVr);
  ResetLoop(subJobr);
  found = true;
  subJobr.Mother = Jobr.SerNr;
  while (LoopKey("MotherKey",subJobr,1,found)) begin
    if (subJobr.Mother!=Jobr.SerNr) then begin found = false; end;
    if (found) then begin
      Combined_DowpaymentInvoices(subJobr,resIVr);
    end;
  end;
  return;
end;

procedure PrintTheCombinedJobForm(record RcVc RepSpec,record SysFormatBlock SFb,record LangNrVc LangNrr,record DocVc Docr,string formcode,record IVVc IVr)
begin
  row IVVc IVrw;
  Integer i,rwcnt;
  val bal;
  
  NumberofDocumentPages(formcode,MatRowCnt(IVr));          
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    OUTFORMFIELD("F_BESKRIVNING",IVrw.Spec);
    switch (IVrw.stp) begin
      case 5:
        goto LPrintTheCombinedJobForm_stp1;
      case 6:
        goto LPrintTheCombinedJobForm_stp1;
      case 1:
LPrintTheCombinedJobForm_stp1:;      
        PrintValueInclZero("F_DEBVAL",IVrw.FIFO,M4Val,LangNrr,SFb,false);
        PrintValueInclZero("F_CREDVAL",IVrw.FIFORowVal,M4Val,LangNrr,SFb,false);
        bal = bal + IVrw.FIFO;
        bal = bal - IVrw.FIFORowVal;
        PrintValueInclZero("F_SALDO",bal,M4Val,LangNrr,SFb,false);
    end;  
    EndFormRow;
  end;
  return;
end;

procedure DoTheJobForm(record RcVc RepSpec,record JobVc Jobr,Integer whichone)
BEGIN
  record FormDefVc FDr;
  record FormDefVc FD1r;
  record FormDefVc FD2r;
  record FormDefVc FD3r;
  row FormDefVc FDrw;
  record DocVc Docr;
  record HotelBlock HotelSetttings;
  Integer i,rwcnt;
  string 255 tstr;
  Boolean printf,langf;
  Integer intdocnr;
  string 30 formcode,langcode;
  record SysFormatBlock SysFormatRec;
  record LangNrVc LangNrr;
  LongInt tmp;
  record ReservationStatusVc RSr;
  record IVVc IVr;
    
  Blockload(HotelSetttings);
  switch (whichone) begin
    case 0:
      FDr.repname = RepSpec.repname;
      FDr.shortname = RepSpec.shortname;
      if (ReadFirstMain(FDr,1,true)==false) then begin
        MessageBox(1624, " " & USetStr(1623));
        goto LDoTheJobForm;
      end;
      rwcnt = MatRowCnt(FDr);
    case 1:
      FD1r.repname = RepSpec.repname;
      FD1r.shortname = RepSpec.shortname;
      if (ReadFirstMain(FD1r,1,true)==false) then begin
        MessageBox(1624, " " & USetStr(1623));
        goto LDoTheJobForm;
      end;
      rwcnt = MatRowCnt(FD1r);
    case 2:
      FD2r.repname = RepSpec.repname;
      FD2r.shortname = RepSpec.shortname;
      if (ReadFirstMain(FD2r,1,true)==false) then begin
        MessageBox(1624, " " & USetStr(1623));
        goto LDoTheJobForm;
      end;
      rwcnt = MatRowCnt(FD2r);
    case 3:
      FD3r.repname = RepSpec.repname;
      FD3r.shortname = RepSpec.shortname;
      if (ReadFirstMain(FD3r,1,true)==false) then begin
        MessageBox(1624, " " & USetStr(1623));
        goto LDoTheJobForm;
      end;
      rwcnt = MatRowCnt(FD3r);
  end;
  BlockLoad(SysFormatRec);
  langcode = Jobr.LangCode;
  GetLangNr(langcode,LangNrr);
  for (i=rwcnt-1;i>=0;i=i-1) begin
    switch (whichone) begin
      case 0: MatRowGet(FDr,i,FDrw);
      case 1: MatRowGet(FD1r,i,FDrw);
      case 2: MatRowGet(FD2r,i,FDrw);
      case 3: MatRowGet(FD3r,i,FDrw);
    end;
    if (FDrw.LangCode==langcode) then begin
      i = -1;
      langf = true;
    end;
  end;
  if (langf==false) then begin langcode = ""; end;
  intdocnr = 1;
  printf = true;
  if (whichone==0) then begin
    RSr.Code = Jobr.ResStatus;
    if (ReadFirstMain(RSr,1,true)==false) then begin
      RSr.DocName = "";
    end;
  end else begin
    RSr.DocName = "";
  end;
  while (printf) begin  
    formcode = "";
    if (blank(RSr.DocName)) then begin
      for (i=rwcnt-1;i>=0;i=i-1) begin
        switch (whichone) begin
          case 0: MatRowGet(FDr,i,FDrw);
          case 1: MatRowGet(FD1r,i,FDrw);
          case 2: MatRowGet(FD2r,i,FDrw);
          case 3: MatRowGet(FD3r,i,FDrw);
        end;
        if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,Jobr.SerNr,FDrw.PrintGroupCode,
                        langcode,intdocnr,"JobVc",formcode)) then
        begin
          goto LBREAK;
        end;
      end;
    end else begin
      formcode = RSr.DocName;
    end;
LBREAK:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin
        Docr.Code = formcode;
        if (ReadFirstMain(Docr,1,true)) then begin
        end;
        CommonDocumentFields(RepSpec);
        if (RepSpec.flags[0]==0) then begin
          PrintTheJobForm(RepSpec,SysFormatRec,LangNrr,Docr,FDrw.FPCode,Jobr,whichone);
        end else begin
          PrepareReservation(Jobr,IVr);
          PrintTheCombinedJobForm(RepSpec,SysFormatRec,LangNrr,Docr,FDrw.FPCode,IVr);
        end;
        CloseForm;        
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    if (nonblank(RSr.DocName)) then begin
      printf = false;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoTheJobForm:;  
  RETURN;  
END;     
 
global
procedure DoJobForm(record RcVc RepSpec,record JobVc Jobr)
BEGIN
  DoTheJobForm(RepSpec,Jobr,0);
  RETURN;  
END;     

global
procedure DoJob1Form(record RcVc RepSpec,record JobVc Jobr)
BEGIN
  DoTheJobForm(RepSpec,Jobr,1);
  RETURN;  
END;     

global
procedure DoJob2Form(record RcVc RepSpec,record JobVc Jobr)
BEGIN
  DoTheJobForm(RepSpec,Jobr,2);
  RETURN;  
END;     

global
procedure DoJob3Form(record RcVc RepSpec,record JobVc Jobr)
BEGIN
  DoTheJobForm(RepSpec,Jobr,3);
  RETURN;  
END;     

