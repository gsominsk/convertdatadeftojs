external function Boolean HasContactClassification();
external function Boolean HasCategories();
external procedure HTLevCat(string,var string);
external procedure HTCustClass(string,var string);
external function Boolean ContactInGroupClass(string,string,string,string,string,string);
external procedure HTValuesIn(Integer,var string);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure BeginCurncyTotals(var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external procedure HTDetailLevel(Integer, var string);
external procedure HTOKF(Integer,Integer, var string);
external procedure HT2Per(Date,Date,var string);

function
Boolean DateInTheRange(Date check,Date start,Date enddate)
BEGIN
  Boolean res;

  res = true;
  if (nonblankdate(start)) then begin
    if (check<start) then begin res = false; end;
  end;
  if (nonblankdate(enddate)) then begin
    if (check>enddate) then begin res = false; end;
  end;
  DateInTheRange = res;
  RETURN;
END;

procedure PrintOverview(var array string acur,var array val av2,var Integer curcnt,record RcVc RepSpec,record CLOutVc COr,var val tot)
BEGIN
  val nv,tv,vv;
  
  nv = COr.NetVal;
  vv = COr.VATVal;
  tv = COr.Total;
  if (RepSpec.basecurncy==1) then begin
    nv = MulRateToBase1(COr.CurncyCode,COr.NetVal,COr.FrRate,COr.ToRateB1,COr.ToRateB2,COr.BaseRate1,COr.BaseRate2,DefaultCurRoundOff);
    vv = MulRateToBase1(COr.CurncyCode,COr.VATVal,COr.FrRate,COr.ToRateB1,COr.ToRateB2,COr.BaseRate1,COr.BaseRate2,DefaultCurRoundOff);
    tv = MulRateToBase1(COr.CurncyCode,COr.Total,COr.FrRate,COr.ToRateB1,COr.ToRateB2,COr.BaseRate1,COr.BaseRate2,DefaultCurRoundOff);
  end;  
  if (RepSpec.basecurncy==2) then begin
    nv = MulRateToBase2(COr.CurncyCode,COr.NetVal,COr.FrRate,COr.ToRateB1,COr.ToRateB2,COr.BaseRate1,COr.BaseRate2,DefaultCurRoundOff);
    vv = MulRateToBase2(COr.CurncyCode,COr.VATVal,COr.FrRate,COr.ToRateB1,COr.ToRateB2,COr.BaseRate1,COr.BaseRate2,DefaultCurRoundOff);
    tv = MulRateToBase2(COr.CurncyCode,COr.Total,COr.FrRate,COr.ToRateB1,COr.ToRateB2,COr.BaseRate1,COr.BaseRate2,DefaultCurRoundOff);
  end;  
  StartFormat(15);
  OutStringOvst(0,"DblCLOutVc",COr.SerNr,false,COr.Invalid);
  OutDate(60,0,COr.TransDate,false);
  OutString(140,0,COr.CUCode,false);
  OutVal(250,0,nv,M4Val,true);
  OutVal(320,0,vv,M4Val,true);  
  OutVal(420,0,tv,M4Val,true);
  if (RepSpec.basecurncy==0) then begin
    OutString(1,0,COr.CurncyCode,true);//currency
    AddCurncyTotals(acur,av2,curcnt,COr.CurncyCode,COr.Total);
  end else begin  
    tot = tot + tv;
  end;  
  EndFormat;
  RETURN;
END;

procedure RepCLOut(var array string acur,var array val av2,var Integer curcnt,record RcVc RepSpec,record CLOutVc COr, var val total)
BEGIN
  PrintOverview(acur,av2,curcnt,RepSpec,COr,total);
  StartFormat(15);
  OutString(0,0,COr.Person,false);
  EndFormat;    
  StartFormat(15);
  OutString(0,0,COr.PayMode,false);
  OutString(50,0,COr.CorspCode,false);
  OutString(100,0,COr.CorspComment,false);
  if (COr.OKFlag==0) then begin
    OutString(400,0,USetStr(2366),false);
  end;  
  EndFormat;    
  StartFormat(15);
  OutString(0,0,COr.CUCode,false);
  OutString(100,0,COr.CUName,false);
  OutString(400,0,COr.RefStr,false);
  EndFormat;    
  if (nonblank(COr.Addr0)) then begin
    StartFormat(15);
    OutString(0,0,COr.Addr0,false);
    EndFormat;        
  end;  
  if (nonblank(COr.Addr1)) then begin
    StartFormat(15);
    OutString(0,0,COr.Addr1,false);
    EndFormat;    
  end;  
  if (nonblank(COr.Addr2)) then begin  
    StartFormat(15);
    OutString(0,0,COr.Addr2,false);
    EndFormat;    
  end;  
  if (nonblank(COr.Comment)) then begin  
    StartFormat(15);
    OutString(0,0,COr.Comment,false);
    EndFormat;    
  end;  
  RETURN;
END;

global
procedure CLOutJRn(record RcVc RepSpec)
BEGIN
  record CLOutVc COr;
  row CLOutVc COrw;
  LongInt afr,ato;
  Boolean TrHs,testf;
  string 20 frcu,tocu;
  Integer rw;
  string 255 tstr;
  val total;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt;
  Integer i,rwcnt;
  
  BeginCurncyTotals(curcnt);
  StartReportJob(USetStr(8420));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
  HTDetailLevel(RepSpec.ArtMode,tstr);
  Header(rw,tstr,0);
  HTOKF(RepSpec.flags[1],RepSpec.flags[2],tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.f1)) then begin
    Header(rw,RepSpec.f1,1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.f2)) then begin  //object in header
    tstr = USetStr(8687);
    tstr = tstr & ":";
    tstr = tstr & RepSpec.f2; 
    Header(rw,tstr,1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.f3)) then begin
   tstr = USetStr(8424);//JNW was Location, should be Supplier
   tstr = tstr & " ";
   tstr = tstr & RepSpec.f3;
   Header(rw,tstr,1);
   rw = rw + 1;
  end;
  if (HasCategories) then begin
    HTLevCat(RepSpec.f4,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasContactClassification) then begin
    HTCustClass(RepSpec.f5,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;  
   if (RepSpec.flags[3]==0) then begin
    tstr = USetStr(8413);
  end;
  if (RepSpec.flags[3]==1) then begin
    tstr = USetStr(8412);
  end;
  if (RepSpec.flags[3]==2) then begin
    tstr = USetStr(8411);
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
  if ((RepSpec.flags[10]==1) and (RepSpec.flags[11]==1) and (RepSpec.flags[12]==1) and (RepSpec.flags[13]==1) and (RepSpec.flags[14]==1) and (RepSpec.flags[15]==1) and (RepSpec.flags[16]==1)) then begin
    tstr = USetStr(8414);
  end else begin
    tstr = "";
    if (RepSpec.flags[10]==1) then begin
      tstr = USetStr(1834);
    end;
    if (RepSpec.flags[11]==1) then begin
      if nonblank(tstr) then begin
        tstr = tstr & ",";
      end;
      tstr = tstr & USetStr(11056);
    end;  
    if (RepSpec.flags[12]==1) then begin
      if nonblank(tstr) then begin
        tstr = tstr & ",";
      end;
      tstr = tstr & USetStr(8297);
    end; 
    if (RepSpec.flags[13]==1) then begin
      if nonblank(tstr) then begin
        tstr = tstr & ",";
      end;
      tstr = tstr & USetStr(1835);
    end; 
    if (RepSpec.flags[14]==1) then begin
      if nonblank(tstr) then begin
        tstr = tstr & ",";
      end;
      tstr = tstr & USetStr(8428);
    end; 
    if (RepSpec.flags[15]==1) then begin
      if nonblank(tstr) then begin
        tstr = tstr & ",";
      end;
      tstr = tstr & USetStr(8429);
    end;
    if (RepSpec.flags[16]==1) then begin
      if nonblank(tstr) then begin
        tstr = tstr & ",";
      end;
      tstr = tstr & USetStr(8477);
    end;
    if (RepSpec.flags[17]==1) then begin
      if nonblank(tstr) then begin
        tstr = tstr & ",";
      end;
      tstr = tstr & USetStr(1873);
    end;
    tstr = USetStr(8415) & tstr;
  end;
  HTValuesIn(RepSpec.basecurncy,tstr);
  Header(rw,tstr,0);
  rw = rw + 1;
  EndHeader;
  if (RepSpec.ArtMode==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(8426),false);
    OutString(60,0,USetStr(8425),false);
    OutString(140,0,USetStr(8424),false);
    OutString(250,0,USetStr(8409),true);
    OutString(320,0,USetStr(8408),true);
    OutString(420,0,USetStr(8427),true);
    if (RepSpec.basecurncy==0) then begin
      OutString(1,0,USetStr(6699),true); //currency
    end;  
    EndFormat;
  end;
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
    OutString(0,0,USetStr(8426),false);
    OutString(60,0,USetStr(8425),false);
    OutString(140,0,USetStr(8424),false);
    OutString(250,0,USetStr(8409),true);
    OutString(320,0,USetStr(8408),true);
    OutString(420,0,USetStr(8427),true);
    if (RepSpec.basecurncy==0) then begin
      OutString(1,0,USetStr(6699),true); //currency
    end;  
    EndFormat;
  end;
  if (RepSpec.ArtMode==0) then begin
    Gray_Divider(0,1);
  end;    
  afr = FirstInRange(RepSpec.f1,20);
  ato = LastInRange(RepSpec.f1,20);  
  frcu = FirstInRange(RepSpec.f3,20);
  tocu = LastInRange(RepSpec.f3,20);
  
  COr.SerNr = afr;
  TrHs = true;
  while (LoopMain(COr,1,TrHs)) begin
      if (ato<>-1) then begin
       if (COr.SerNr>ato) then begin
          TrHs = false;
       end; 
      end;          
   if (TrHs) then begin
    testf = true;
    if (nonblank(RepSpec.f3)) begin
       if (COr.CUCode<frcu) then begin testf = false; end;
       if (COr.CUCode>tocu) then begin testf = false; end;
    end;
    if ((nonblank(RepSpec.f2)) and (SetInSet(RepSpec.f2,COr.Objects)==false)) then begin testf = false; end;
    if (DateInTheRange(COr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;

    if ((RepSpec.flags[1]==0) and (COr.OKFlag==0)) then begin testf = false; end;
    if ((RepSpec.flags[2]==0) and (COr.OKFlag<>0)) then begin testf = false; end;
    if ((nonblank(RepSpec.TransStr)) and (RepSpec.TransStr!=COr.CorspCode)) then begin testf = false; end;
    if (RepSpec.flags[3]==0) then begin
      if (COr.Invalid!=0) then begin testf = false; end;
    end;
    if (RepSpec.flags[3]==2) then begin
      if (COr.Invalid==0) then begin testf = false; end;
    end;  
    if (testf) then begin 
      testf = ContactInGroupClass(COr.CUCode,RepSpec.f4,RepSpec.f5,"SUPP","","");    
    end;
    if testf then begin
      if ((RepSpec.flags[10]==0) or (RepSpec.flags[11]==0) or (RepSpec.flags[12]==0) or (RepSpec.flags[13]==0) or (RepSpec.flags[14]==0) or (RepSpec.flags[15]==0) and (RepSpec.flags[16]==0) and (RepSpec.flags[17]==0)) then begin
        testf = false;
        rwcnt = MatRowCnt(COr);
        if (RepSpec.flags[10]==1) then begin
          if (rwcnt==0) then begin testf = true; end;
        end;
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(COr,i,COrw);
          switch (COrw.Type) begin
            case 0:
              if (RepSpec.flags[10]==1) then begin
                testf = true;
                i = rwcnt;
              end; 
            case 1:
              if (RepSpec.flags[11]==1) then begin
                testf = true;
                i = rwcnt;
              end;  
            case 2:
              if (RepSpec.flags[12]==1) then begin
                testf = true;
                i = rwcnt;
              end; 
            case 3:
              if (RepSpec.flags[13]==1) then begin
                testf = true;
                i = rwcnt;
              end; 
            case 4:
              if (RepSpec.flags[14]==1) then begin
                testf = true;
                i = rwcnt;
              end; 
            case 5:
              if (RepSpec.flags[15]==1) then begin
                testf = true;
                i = rwcnt;
              end;
            case 6:
              if (RepSpec.flags[16]==1) then begin
                testf = true;
                i = rwcnt;
              end; 
            case 7:
              if (RepSpec.flags[17]==1) then begin
                testf = true;
                i = rwcnt;
              end;    
          end;  
        end;    
      end;
    end;
    if (testf) then  begin
      if (RepSpec.ArtMode==1) then begin
        Gray_Divider(0,1);
        RepCLOut(acur,av2,curcnt,RepSpec,COr, total);
      end;
      if (RepSpec.ArtMode==0) then begin
        PrintOverview(acur,av2,curcnt,RepSpec,COr,total);
      end;
    end;
   end;
  end;
  Gray_Divider(350,1);
  if (RepSpec.basecurncy==0) then begin  
    PrintCurncyTotals(acur,av1,av2,av3,curcnt,-1,480,-1,400,true,RepSpec.PocketPC);
  end else begin
    StartFormat(15);
     OutVal(420,0,total,M4Val,true);
    EndFormat;
  end;  
  EndJob;
  RETURN;
END;
