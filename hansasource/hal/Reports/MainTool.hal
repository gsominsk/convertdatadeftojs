external function val MulWithRateToBase2(var string,Date,val,roundmode);
external procedure PrintMainHeaders(record RcVc,var Boolean,Array Boolean,Array string,Array string,Array LongInt,Boolean);
external function Integer TypeOfCurncy(var string,var Integer);
external function Boolean  EobjInEobj(string,string);
external procedure GetObjs(string,string,var string);
external procedure HForm(record RcVc,record AccVc,val,val,val,Boolean);
external procedure RForm3(record RcVc,record TRVc,record AccVc,record BaseCurBlock,Integer,Date,Integer,string,var Integer,var val,record SMVc,Integer,string,var val,var val,var val,var val,var val,Boolean,var array string,var array val,var array val,var array val,var Integer);
external procedure FBForm(record RcVc,record FBVc,Integer,record AccVc,string,string,var val,var val,string,string,var Integer,var val,record SMVc,Integer,var val,var val,var val,var val,var val,Boolean,var array string,var array val,var array val,var array val,var Integer);
external procedure RADForm(record RcVc,record RegArchiveDetailVc,record AccVc,string,string,var val,var val,string,string,var Integer,var val,record SMVc,Integer,var val,var val,var val,var val,var val,Boolean,var array string,var array val,var array val,var array val,var Integer);
external procedure SetCorspAccs(record TRVc,Integer,string,Boolean,var string);

function
Boolean RateDiffExists(record TRVc TRp,row TRVc TRrp)
BEGIN
  Boolean res;
  val dv,cv,tb;
  string 20 tstr;

  res = true;
  if (Trrp.DebVal!=0) then begin
    dv = Trrp.DebVal2;
    cv = MulWithRateToBase2(tstr,TRp.TransDate,Trrp.DebVal,DefaultCurRoundOff);
  end else begin
    dv = Trrp.CredVal2;
    cv = MulWithRateToBase2(tstr,TRp.TransDate,Trrp.CredVal,DefaultCurRoundOff);
  end;
  tb = dv - cv;
  if (tb==0) then begin
    res = false;
  end;
  RateDiffExists = res;
  RETURN;
END;

global
procedure ReadTrRow(record RcVc RepSpec,record TRVc TRp,record BaseCurBlock BCb,string objstr,var Integer OldTransMonthp,var val mainosp,
                    record SMVc vatshp,Integer basecurncy,string curncy,var Boolean FirstTrans,
                    var val CurBal,var val TotSumDebetCur,var val TotSumCreditCur,var val SumDebet,var val SumCredit,var LongInt TransCnt,
                    var Boolean headeroutf,Array Boolean mhrheaderf,Array string mhrvc,Array string mhrckey,Array LongInt mhrLLoop,
                    record AccVc Accp,Boolean printf,var array string acur,var array val av1,var array val av2,var array val av3,var Integer curcnt)
BEGIN
  row TRVc TRrw;
  Integer i,rwcnt;
  string 255 tstr;
  string 255 objs;
  string 255 corspaccs;
  Boolean first,dcflag;
  val sv;
  Integer tmp;
  string 200 loccurncy;
  
//  accp = MainLoopAccp(mhp);
  loccurncy = curncy;
  first = true;  
  rwcnt = MatRowCnt(TRp);
  for (i=0;i<rwcnt; i=i+1) begin
    MatRowGet(TRp,i,TRrw);
    if (nonblank(RepSpec.f2)) then begin
      switch (RepSpec.flags[25]) begin
        case 0:
          if (RepSpec.f2!=TRrw.ReconCode) then begin 
            goto L22ReadTrRow;
          end;
        case 1:
          if (RepSpec.f2==TRrw.ReconCode) then begin
            goto L22ReadTrRow;
          end;
      end;  
    end;
    if (TRrw.stp==1) then begin
        if (((RepSpec.flags[21]==1) and (TRrw.Reconsf==0)) or 
            ((RepSpec.flags[22]==1) and (TRrw.Reconsf==1))) then begin            
          if ((RepSpec.flags[24]==0) or (RateDiffExists(TRp,TRrw))) then begin
//          if ((RepSpec.flags[24]==0) or (false)) then begin
          if (blank(curncy) or (curncy==TRrw.Curncy)) then begin
          if (TRrw.AccNumber==Accp.AccNumber) then begin
            corspaccs = "";
            dcflag = true;
            if ((nonblank(curncy)) and (TypeOfCurncy(loccurncy,tmp)==0)) then begin
              sv = TRrw.CurDebVal - TRrw.CurCredVal;
            end else begin
              sv = TRrw.DebVal - TRrw.CredVal;
            end;
            if (sv<0) then begin dcflag = false; end;
            if (RepSpec.flags[3]!=0) then begin
              SetCorspAccs(TRp,rwcnt,Accp.AccNumber,dcflag,corspaccs);
            end;
            objs = TRrw.Objects;
            if (nonblank(RepSpec.ObjType)) then begin
              GetObjs(RepSpec.ObjType,TRrw.Objects,objs);
            end;
            if ((TRrw.ovst==0) or (RepSpec.flags[1]!=0)) then begin            
              if ((blank(objstr) or (EobjInEobj(objstr,TRrw.Objects)))) then begin              
              if ((blank(RepSpec.f3) or (EobjInEobj(RepSpec.f3,TRrw.Objects)==false))) then begin              
                if (blank(RepSpec.ObjType) or (RepSpec.flags[2]!=0 or nonblank(objs))) then begin
                  tstr = TRp.Comment & TRrw.Comment;
                  if (blank(RepSpec.Stext)) or (InString(tstr,RepSpec.Stext)!=0) then begin
                    if (blank(RepSpec.f1) or (RepSpec.f1==TRrw.VATCode)) then begin
                      PrintMainHeaders(RepSpec,headeroutf,mhrheaderf,mhrvc,mhrckey,mhrLLoop,printf);
                      if (FirstTrans) then begin
                        HForm(RepSpec,Accp,CurBal,TotSumDebetCur,TotSumCreditCur,printf);
                        FirstTrans = false;
                      end;
                      if (RepSpec.flags[3]!=0) then begin objs = corspaccs; end;
                      RForm3(RepSpec,TRp,Accp,BCb,i,TRp.TransDate,TRrw.ovst,objs,
                             OldTransMonthp,mainosp,vatshp,basecurncy,curncy,CurBal,
                             SumDebet,SumCredit,TotSumDebetCur,TotSumCreditCur,printf,
                             acur,av1,av2,av3,curcnt);
                      TransCnt = TransCnt + 1;
                    end;
                  end;  
                end;
              end;
              end;
            end;                  
          end;
          end;
          end;
        end;
    end else begin
//no speclines in Mainlists    
    end;
L22ReadTrRow:;
  end;
  RETURN;
END;

global
procedure ReadTrR2(record RcVc RepSpec,record TRVc TRp,record BaseCurBlock BCb,string objstr,Date dp,var Integer OldTransMonthp,
                   var val mainosp,record SMVc vatshp,Integer basecurncy,string curncy,
                   var Boolean FirstTrans,val CurBal,val TotSumDebetCur,val TotSumCreditCur,var val SumDebet,var val SumCredit,var LongInt TransCnt,
                   var Boolean headeroutf,Array Boolean mhrheaderf,Array string mhrvc,Array string mhrckey,Array LongInt mhrLLoop,
                   record AccVc Accp,Boolean printf,var array string acur,var array val av1,var array val av2,var array val av3,var Integer curcnt)
BEGIN
  row TRVc TRrw;
  Integer i,rwcnt;
  string 255 tstr;
  Integer LastRow;
  
//  accp = MainLoopAccp(mhp);
  LastRow = 0; 
  rwcnt = MatRowCnt(TRp);
  for (i = rwcnt-1 ; i>=0; i=i-1) begin
    MatRowGet(TRp,i,TRrw);
    if (TRrw.stp==2) begin
      if (dp==TRrw.OldTransDate) then begin
        LastRow = i;
        goto L11TrR2;
      end;
    end;
  end;
L11TrR2:;
  for (i = 0 ; i<LastRow; i=i+1) begin
    MatRowGet(TRp,i,TRrw);
    if (TRrw.stp==1) begin
    if (nonblank(RepSpec.f2)) then begin
      switch (RepSpec.flags[25]) begin
        case 0:
          if (RepSpec.f2!=TRrw.ReconCode) then begin
            goto L22ReadTrR2;
          end;
        case 1:
          if (RepSpec.f2==TRrw.ReconCode) then begin
            goto L22ReadTrR2;
          end;
      end;  
    end;
      if (((RepSpec.flags[21]==1) and (TRrw.Reconsf==0)) or 
            ((RepSpec.flags[22]==1) and (TRrw.Reconsf==1))) then begin
        if (blank(curncy) or (curncy==TRrw.Curncy)) then begin
        if (TRrw.AccNumber==Accp.AccNumber) then begin
          if ((TRrw.ovst==0) or (RepSpec.flags[1]!=0)) then begin
            if ((blank(objstr) or (EobjInEobj(objstr,TRrw.Objects)==true))) then begin
            if ((blank(RepSpec.f3) or (EobjInEobj(RepSpec.f3,TRrw.Objects)==false))) then begin              
              tstr = TRp.Comment & TRrw.Comment;
              if (InString(tstr,RepSpec.Stext)!=0) then begin
                if (blank(RepSpec.f1) or (RepSpec.f1==TRrw.VATCode)) then begin
                  PrintMainHeaders(RepSpec,headeroutf,mhrheaderf,mhrvc,mhrckey,mhrLLoop,printf);
                  if (FirstTrans) then begin
                    HForm(RepSpec,Accp,CurBal,TotSumDebetCur,TotSumCreditCur,printf);
                    FirstTrans = false;
                  end;
                  RForm3(RepSpec,TRp,Accp,BCb,i,dp,1,"",
                         OldTransMonthp,mainosp,vatshp,basecurncy,curncy,CurBal,
                         SumDebet,SumCredit,TotSumDebetCur,TotSumCreditCur,printf,
                         acur,av1,av2,av3,curcnt);
                  TransCnt = TransCnt + 1;
                end;
              end;
            end;
            end;
          end;  
        end;
        end;    
      end;
    end else begin
//no speclines in Mainlists     
    end;
L22ReadTrR2:;
  end;
LReadTrR2:;
  RETURN;
END;

global
procedure ReadFBRow(record RcVc RepSpec,record FBVc FBp,string objstr,var Integer OldTransMonthp,var val mainosp,
                    record SMVc vatshp,Integer basecurncy,string curncy,var Boolean FirstTrans,
                    var val CurBal,val TotSumDebetCur,val TotSumCreditCur,var val SumDebet,var val SumCredit,var LongInt TransCnt,
                    var Boolean headeroutf,Array Boolean mhrheaderf,Array string mhrvc,Array string mhrckey,Array LongInt mhrLLoop,
                    record AccVc Accp,Boolean printf,
                    var array string acur,var array val av1,var array val av2,var array val av3,var Integer curcnt)
BEGIN
  row FBVc FBrw;
  Integer i,rwcnt;
  string 255 tstr;
  string 255 objs;
  string 255 corspaccs;
  Boolean first,dcflag,testf;
  val blankv;
  
//  accp = MainLoopAccp(mhp);
  first = true;
  testf = false;
  rwcnt = MatRowCnt(FBp);
  for (i = 0 ; i<rwcnt; i=i+1) begin
    MatRowGet(FBp,i,FBrw);
    if (FBrw.AccNumber==Accp.AccNumber) then begin
      corspaccs = "";
      dcflag = true;
      if (FBrw.DebVal==blankv) then begin dcflag = false; end;
      objs = "";
      if (nonblank(RepSpec.ObjType)) then begin
        GetObjs(RepSpec.ObjType,FBp.Objects,objs);
      end;
      if (blank(objs)) then begin objs = objstr; end;
      if (blank(objs)) then begin
        if (blank(RepSpec.ObjType)) then begin
          if (blank(FBp.Objects)) then begin testf = true; end;
          if (blank(objs)) then begin testf = true; end;
        end;  
      end else begin
        if (blank(RepSpec.ObjStr)) then begin
          testf = true;
        end else begin
          if (EobjInEobj(objs,FBp.Objects)==true) then begin testf = true; end;
        end;
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (EobjInEobj(RepSpec.f3,FBp.Objects)) then begin testf = false; end;
      end;
      if (nonblank(curncy)) then begin
        if (curncy!=FBrw.CurncyCode) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
// I have no idea what flags[2) does (Including unspecified), but I don't think it is needed in Forward Balance 
        tstr = FBp.Comment & FBrw.Comment;
        if (InString(tstr,RepSpec.Stext)!=0) then begin
          if (blank(RepSpec.f1)) then begin
            PrintMainHeaders(RepSpec,headeroutf,mhrheaderf,mhrvc,mhrckey,mhrLLoop,printf);
            if (FirstTrans) then begin
              HForm(RepSpec,Accp,CurBal,TotSumDebetCur,TotSumCreditCur,printf);
              FirstTrans = false;
            end;
            if (RepSpec.flags[3]!=0) then begin objs = corspaccs; end;
            FBForm(RepSpec,FBp,i,Accp,curncy,FBrw.Comment,FBrw.DebVal,FBrw.CredVal,
                   objs,"",OldTransMonthp,mainosp,vatshp,basecurncy,
                   CurBal,SumDebet,SumCredit,TotSumDebetCur,TotSumCreditCur,printf,
                   acur,av1,av2,av3,curcnt);
            TransCnt = TransCnt + 1;
          end;
        end;
      end;
    end;
  end;
  RETURN;
END;

global
procedure ReadRADRecord(record RcVc RepSpec,record RegArchiveDetailVc RADr,string objstr,var Integer OldTransMonthp,var val mainosp,
                    record SMVc vatshp,Integer basecurncy,string curncy,var Boolean FirstTrans,
                    var val CurBal,val TotSumDebetCur,val TotSumCreditCur,var val SumDebet,var val SumCredit,
                    var Boolean headeroutf,Array Boolean mhrheaderf,Array string mhrvc,Array string mhrckey,Array LongInt mhrLLoop,
                    record AccVc Accp,Boolean printf,
                    var array string acur,var array val av1,var array val av2,var array val av3,var Integer curcnt)
BEGIN
  string 255 tstr;
  string 255 objs;
  string 255 corspaccs;
  Boolean first,dcflag,testf;
  val blankv;
  
//  accp = MainLoopAccp(mhp);
  first = true;
  testf = false;
    if (RADr.KeyOne==Accp.AccNumber) then begin
      corspaccs = "";
      dcflag = true;
      if (RADr.dv==blankv) then begin dcflag = false; end;
      objs = "";
      if (nonblank(RepSpec.ObjType)) then begin
        GetObjs(RepSpec.ObjType,RADr.KeyTwo,objs);
      end;
      if (blank(objs)) then begin objs = objstr; end;
      if (blank(objs)) then begin
        if (blank(RepSpec.ObjType)) then begin
          if (blank(RADr.KeyTwo)) then begin testf = true; end;
        end;  
      end else begin
        if (EobjInEobj(objs,RADr.KeyTwo)==true) then begin testf = true; end;
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (EobjInEobj(RepSpec.f3,RADr.KeyTwo)) then begin testf = false; end;
      end;
      if (nonblank(curncy)) then begin
        if (curncy!=RADr.ColName) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        tstr = RADr.Comment;
        if (InString(tstr,RepSpec.Stext)!=0) then begin
          if (blank(RepSpec.f1)) then begin
            PrintMainHeaders(RepSpec,headeroutf,mhrheaderf,mhrvc,mhrckey,mhrLLoop,printf);
            if (FirstTrans) then begin
              HForm(RepSpec,Accp,CurBal,TotSumDebetCur,TotSumCreditCur,printf);
              FirstTrans = false;
            end;
            if (RepSpec.flags[3]!=0) then begin objs = corspaccs; end;
            RADForm(RepSpec,RADr,Accp,curncy,RADr.Comment,RADr.dv,RADr.cv,
                   objs,"",OldTransMonthp,mainosp,vatshp,basecurncy,
                   CurBal,SumDebet,SumCredit,TotSumDebetCur,TotSumCreditCur,printf,
                   acur,av1,av2,av3,curcnt);
          end;
        end;
      end;
    end;
  RETURN;
END;

