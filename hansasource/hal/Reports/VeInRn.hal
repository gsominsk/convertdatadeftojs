external function Boolean IsEnterprise();
external function Boolean ContactInGroupClass2(string,string,string,string,string,string,string);
external procedure HTSuppGroup(string,var string);
external function Boolean HasContactClassification();
external function Boolean HasItemClassification();
external function Boolean HasMultiCurrency();
external function roundmode DefaultRoundMode();
external procedure HTVendClass(string,var string);
external procedure HTItemClass(string,var string);
external procedure HT2Per(Date, Date , var string);
external procedure HTSupplier(string, var string);
external procedure HTArts(string, string, var string);
external procedure PUSumUp(var record PUVc);
external procedure HTCustClass(string,var string);
external procedure HTCustClassType(string,var string);
external function Boolean SetInSet2(string,string);
external procedure ItemClassTypef(string,string,var Boolean);
external procedure ClassTypef(string,string,var Boolean);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure OutEmpty(record RcVc,Integer);

procedure AddFindRowAddRetPU(Integer ArtMode,record RetPUVc RetPUp,row RetPUVc RetPUrwp,var record PUVc PUAcump,Integer unitconvcalc)
BEGIN
  row PUVc PUAcumrw;
  Integer i,rwcnt;
  Boolean found;
  val two,temp,temp2,t;

  two = 2;
  rwcnt = MatRowCnt(PUAcump);
  for (i = 0;i<rwcnt;i=i+1) begin
    MatRowGet(PUAcump,i,PUAcumrw);
    if (ArtMode==1) then begin
      if ((RetPUrwp.ArtCode==PUAcumrw.ArtCode) and
          (RetPUrwp.SerialNr==PUAcumrw.SerialNr) and
          ((StringToLongInt(PUAcumrw.VARList)==RetPUp.PUNr) or (blank(PUAcumrw.VARList)))) then begin
        PUAcumrw.Quant = PUAcumrw.Quant - RetPUrwp.Quant;
        if (RetPUrwp.Coefficient==blankval) then begin
          t = RetPUrwp.Quant;
        end else begin
          if (unitconvcalc==0) then begin
            t = RetPUrwp.Quant*RetPUrwp.Coefficient;
          end else begin
            t = RetPUrwp.Quant/RetPUrwp.Coefficient;
          end;
        end;
        PUAcumrw.Coefficient = PUAcumrw.Coefficient - t;
        MatRowPut(PUAcump,i,PUAcumrw);
        found = true;
        goto L33FindRowAddPU;
      end;
    end else begin
      if (RetPUrwp.ArtCode==PUAcumrw.ArtCode) and ((StringToLongInt(PUAcumrw.VARList)==RetPUp.PUNr) or (blank(PUAcumrw.VARList))) then begin
        PUAcumrw.Quant = PUAcumrw.Quant - RetPUrwp.Quant;
        if (RetPUrwp.Coefficient==blankval) then begin
          t = RetPUrwp.Quant;
        end else begin
          if (unitconvcalc==0) then begin
            t = RetPUrwp.Quant*RetPUrwp.Coefficient;
          end else begin
            t = RetPUrwp.Quant/RetPUrwp.Coefficient;
          end;
        end;
        PUAcumrw.Coefficient = PUAcumrw.Coefficient - t;
        PUAcumrw.CostPrice = PUAcumrw.CostPrice - RetPUrwp.FIFO;
        PUAcumrw.CostPrice = PUAcumrw.CostPrice/two;
        MatRowPut(PUAcump,i,PUAcumrw);
        found = true;
        goto L33FindRowAddPU;
      end;
    end;
  end;
L33FindRowAddPU:;
  if (found==false) then begin
    PUAcumrw.ArtCode = RetPUrwp.ArtCode;
    PUAcumrw.Spec = RetPUrwp.Spec;
    PUAcumrw.SerialNr = RetPUrwp.SerialNr;
    PUAcumrw.CostPrice = -RetPUrwp.FIFO;
    PUAcumrw.Quant = -RetPUrwp.Quant;
    PUAcumrw.VARList = RetPUp.PUNr;
    if (RetPUrwp.Coefficient==blankval) then begin
      t = RetPUrwp.Quant;
    end else begin
      if (unitconvcalc==0) then begin
        t = RetPUrwp.Quant*RetPUrwp.Coefficient;
      end else begin
        t = RetPUrwp.Quant/RetPUrwp.Coefficient;
      end;
    end;
    PUAcumrw.Coefficient = -t;
    MatRowPut(PUAcump,rwcnt,PUAcumrw);    
  end;
  RETURN;
END;

procedure FindRowAddRetPU(Integer ArtMode,Integer unitconvcalc,LongInt PUNr,Integer PURow,var record PUVc PUAcump)
BEGIN
  record RetPUVc RetPUr;
  row RetPUVc RetPUrw;
  Boolean found;
  string 255 ckey;
  

  ckey = "RowPURow:" & PURow;
  ResetLoop(RetPUr);
  found = true;
  RetPUr.PUNr = PUNr;
  while (LoopKey(ckey,RetPUr,2,found)) begin
    if (RetPUr.PUNr!=PUNr) then begin found = false; end;
    if (found) then begin
      if (PURow>=0) then begin
        MatRowGet(RetPUr,PURow,RetPUrw);
        AddFindRowAddRetPU(ArtMode,RetPUr,RetPUrw,PUAcump,unitconvcalc);
      end;
    end;
  end;  
  RETURN;
END;

global
procedure FindRowAddPU(Integer ArtMode,record PUVc PUp,var record PUVc PUAcump,Integer rownr,Integer unitconvcalc,Boolean mergevars)
BEGIN
  row PUVc PUrwp;
  row PUVc PUAcumrw;
  Integer i,rwcnt;
  Boolean found;
  val two,temp,temp2,t;
  string 255 rowart;
  Integer dotpos;
  
  MatRowGet(PUp,rownr,PUrwp);
  rowart = PUrwp.ArtCode;
  if (mergevars) then begin
    dotpos = InString(rowart,".");
    if (dotpos>0) then begin
      rowart = left(rowart,dotpos - 1);
    end;
  end;
  
  two = 2;
  rwcnt = MatRowCnt(PUAcump);
  for (i = 0;i<rwcnt;i=i+1) begin
    MatRowGet(PUAcump,i,PUAcumrw);
    if (ArtMode==1) then begin
      if ((rowart==PUAcumrw.ArtCode) and
          (PUrwp.SerialNr==PUAcumrw.SerialNr) and
          (PUrwp.UPrice==PUAcumrw.UPrice) and
          (PUrwp.ShipCost==PUAcumrw.ShipCost) and
          (PUrwp.CustomsCost==PUAcumrw.CustomsCost) and
          (PUrwp.Extra==PUAcumrw.Extra) and
          (PUrwp.CostPrice==PUAcumrw.CostPrice)) then begin
        PUAcumrw.Quant = PUAcumrw.Quant + PUrwp.Quant;
        if (PUrwp.Coefficient==blankval) then begin
          t = PUrwp.Quant;
        end else begin
          if (unitconvcalc==0) then begin
            t = PUrwp.Quant*PUrwp.Coefficient;
          end else begin
            t = PUrwp.Quant/PUrwp.Coefficient;
          end;
        end;
        PUAcumrw.Coefficient = PUAcumrw.Coefficient + t;
        MatRowPut(PUAcump,i,PUAcumrw);
        found = true;
        FindRowAddRetPU(ArtMode,unitconvcalc,PUp.SerNr,rownr,PUAcump);
        goto L33FindRowAddPU;
      end;
    end else begin
      if (rowart==PUAcumrw.ArtCode) then begin
        PUAcumrw.Quant = PUAcumrw.Quant + PUrwp.Quant;
        if (PUrwp.Coefficient==blankval) then begin
          t = PUrwp.Quant;
        end else begin
          if (unitconvcalc==0) then begin
            t = PUrwp.Quant*PUrwp.Coefficient;
          end else begin
            t = PUrwp.Quant/PUrwp.Coefficient;
          end;
        end;
        PUAcumrw.Coefficient = PUAcumrw.Coefficient + t;
        PUAcumrw.UPrice = PUAcumrw.UPrice + PUrwp.UPrice;
        PUAcumrw.UPrice = PUAcumrw.UPrice/two;
        PUAcumrw.ShipCost = PUAcumrw.ShipCost + PUrwp.ShipCost;
        PUAcumrw.ShipCost = PUAcumrw.ShipCost/two;
        temp = StringToVal(PUAcumrw.CustomsCost,M4UVal);
        temp2 = StringToVal(PUrwp.CustomsCost,M4UVal);
        temp = temp + temp2;
        temp = temp + two;
        PUAcumrw.CustomsCost = temp;
        temp = StringToVal(PUAcumrw.Extra,M4UVal);
        temp2 = StringToVal(PUrwp.Extra,M4UVal);
        temp = temp + temp2;
        temp = temp + two;
        PUAcumrw.Extra = temp;
        PUAcumrw.CostPrice = PUAcumrw.CostPrice + PUrwp.CostPrice;
        PUAcumrw.CostPrice = PUAcumrw.CostPrice/two;
        MatRowPut(PUAcump,i,PUAcumrw);
        found = true;
        FindRowAddRetPU(ArtMode,unitconvcalc,PUp.SerNr,rownr,PUAcump);
        goto L33FindRowAddPU;
      end;
    end;
  end;
L33FindRowAddPU:;
  if (found==false) then begin
    PUAcumrw.ArtCode = rowart;
    PUAcumrw.Spec = PUrwp.Spec;
    PUAcumrw.SerialNr = PUrwp.SerialNr;
    PUAcumrw.UPrice = PUrwp.UPrice;
    PUAcumrw.ShipCost = PUrwp.ShipCost;
    PUAcumrw.CustomsCost = PUrwp.CustomsCost;
    PUAcumrw.Extra = PUrwp.Extra;
    PUAcumrw.CostPrice = PUrwp.CostPrice;
    PUAcumrw.Quant = PUrwp.Quant;
    PUAcumrw.VARList = PUp.SerNr;
    if (PUrwp.Coefficient==blankval) then begin
      t = PUrwp.Quant;
    end else begin
      if (unitconvcalc==0) then begin
        t = PUrwp.Quant*PUrwp.Coefficient;
      end else begin
        t = PUrwp.Quant/PUrwp.Coefficient;
      end;
    end;
    PUAcumrw.Coefficient = t;
    MatRowPut(PUAcump,rwcnt,PUAcumrw);   
    FindRowAddRetPU(ArtMode,unitconvcalc,PUp.SerNr,rownr,PUAcump);
  end;
  RETURN;
END;

function
Boolean AddToPurchase(record RcVc RepSpec,var record PUVc PUp,var record PUVc PU2p,string fromi,string toi,string fromit,string toit,Integer unitconvcalc)
BEGIN
  record INVc INr;
  row PUVc PUrw;
  Integer i,rwcnt,dotpos,dot2pos;
  Boolean chrange;
  Boolean res;
  
  chrange = true;
  rwcnt = MatRowCnt(PUp);
  for (i = 0;i<rwcnt;i=i+1) begin
    chrange = true;
    MatRowGet(PUp,i,PUrw);
    if ((PUrw.ovst!=0) or (PUrw.stp==3)) then begin
      goto LSKIPPUROW;
    end;
    
    if (nonblank(RepSpec.f1)) then begin
      dotpos = InString(toi,".");
      dot2pos = InString(PUrw.ArtCode,".");
      
      if (dotpos>0) then begin
        if (PUrw.ArtCode<fromi) then begin chrange = false; end;
        if (PUrw.ArtCode>toi) then begin chrange = false; end;
      end else begin
        if (dot2pos<=0) then begin dot2pos = len(PUrw.ArtCode) + 1; end;
        if (left(PUrw.ArtCode,dot2pos - 1)<fromi) then begin chrange = false; end;
        if (left(PUrw.ArtCode,dot2pos - 1)>toi) then begin chrange = false; end;
      end;
    end;
    
    if (ReadFirstItem(PUrw.ArtCode,INr,true,true)) then begin end;
    if (nonblank(RepSpec.f3)) then begin      
      if (INr.Group<fromit) then begin chrange = false; end;
      if (INr.Group>toit) then begin chrange = false; end;
    end;  
    if (nonblank(RepSpec.f4)) then begin
      if (SetInSet2(RepSpec.f4,INr.DispGroups)==false) then begin
        chrange = false;
      end;
    end;
    if (nonblank(RepSpec.f5)) then begin
      if (chrange==true) then begin
        chrange = false;
        ItemClassTypef(RepSpec.f5,INr.DispGroups,chrange);
      end;
    end;
    if (chrange) then begin
      FindRowAddPU(RepSpec.ArtMode,PUp,PU2p,i,unitconvcalc,RepSpec.flags[5]<>1);
      res = true;
    end;
  end;
LSKIPPUROW:;  
  AddToPurchase = res;
  RETURN;
END;

procedure PrintPurchase(record RcVc RepSpec,record PUVc PUp,var val tp)
BEGIN
  Integer i,rwcnt;
  row PUVc PUrw;
  val unitsum,t;
  Integer rowtoprint;
  string 255 itemtoprint;

  StartFormat(15);
  OutString(0,0,PUp.VECode,false);
  OutString(100,0,PUp.VEName,false);
  if (HasMultiCurrency) then begin
    OutString(350,0,PUp.CurncyCode,true);
  end;
  EndFormat;
  Gray_Divider(0,1);
  PUSumUp(PUp);
  rwcnt = MatRowCnt(PUp);
LBEGINPP:;
  rowtoprint = -1;
  itemtoprint = "";
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PUp,i,PUrw);
    if (nonblank(PUrw.ArtCode)) then begin
      if (blank(itemtoprint)) then begin
        itemtoprint = PUrw.ArtCode;
      end;  
      if (itemtoprint>=PUrw.ArtCode) then begin
        rowtoprint = i;
        itemtoprint = PUrw.ArtCode;
      end;
    end;
  end;
  if (rowtoprint!=-1) then begin
    MatRowGet(PUp,rowtoprint,PUrw);
    t = PUrw.Quant*PUrw.UPrice;
    unitsum = unitsum + t;
    StartFormat(15);
    OutString(0,0,PUrw.ArtCode,false);
    if (RepSpec.flags[3]!=0) then begin
      OutString(2,0,PUrw.Spec,false);
    end;  
    if (RepSpec.ArtMode==1) then begin
      OutVal(8,0,PUrw.Quant,M4UVal,true);
      if (RepSpec.flags[4]!=0) then  begin
        OutVal(9,0,PUrw.Coefficient,M4UVal,true);
        PUp.ToRateB1 = PUp.ToRateB1 + PUrw.Coefficient;
      end;
      OutString(3,0,PUrw.SerialNr,false);
      OutVal(4,0,PUrw.UPrice,M45Val,true);
      if (IsEnterprise) then begin
        OutVal(5,0,PUrw.ShipCost,M4UVal,true);
        OutString(6,0,PUrw.CustomsCost,true);
        OutStringAdjust(7,0,PUrw.Extra,true,M4Val);
      end;
      OutValBiDi(1,0,PUrw.CostPrice,M45Val,true,520);
    end else begin
      if (RepSpec.flags[4]!=0) then begin
        OutVal(9,0,PUrw.Coefficient,M4UVal,true);
        PUp.ToRateB1 = PUp.ToRateB1 + PUrw.Coefficient;
      end;
      OutString(3,0,PUrw.SerialNr,false);
      OutVal(4,0,PUrw.Quant,M4UVal,true);
      OutVal(6,0,PUrw.CostPrice,M45Val,true);
      OutValBiDi(1,0,t,M45Val,true,520);
    end;
    EndFormat;
    PUrw.ArtCode = "";
    MatRowPut(PUp,rowtoprint,PUrw);
    goto LBEGINPP;
  end;
  Black_Divider(130,480);
  StartFormat(15);
  OutEmpty(RepSpec,2);
  if (RepSpec.ArtMode==1) then begin
    OutVal(8,0,PUp.SumQuant,M4UVal,true);
    OutEmpty(RepSpec,1);
    if (RepSpec.flags[4]!=0) then begin
      OutEmpty(RepSpec,1);
    end;
    t = unitsum;
    OutVal(4,0,PUp.SumCostPrice/PUp.SumQuant,M45Val,true);
    if (IsEnterprise) then begin
      OutVal(5,0,PUp.ShipCost,M4UVal,true);
      OutVal(6,0,PUp.CustomsCost,M4UVal,true);
      OutVal(7,0,PUp.ExtraCost,M4UVal,true);
    end;
    OutValBiDi(1,0,PUp.SumCostPrice,M45Val,true,520);
  end else begin
    if (RepSpec.flags[4]!=0) then begin
      OutVal(9,0,PUp.ToRateB1,M4UVal,true);
      OutEmpty(RepSpec,1);
    end else begin
      OutEmpty(RepSpec,1);
    end;  
    OutVal(4,0,PUp.SumQuant,M4UVal,true);
    t = PUp.SumCostPrice/PUp.SumQuant;
    OutVal(6,0,t,M45Val,true);
    OutValBiDi(1,0,PUp.SumCostPrice,M45Val,true,520);
  end;
  EndFormat;
  tp = tp + t;
  RETURN;
END;

global
procedure VeInRn(record RcVc RepSpec)
BEGIN
  record PUVc PUr;
  record CUVc VEr;
  record PUVc PU2r;
  val totunitsum,totfreight,totcustoms,totextra,totqty,totqty2;
  val t,totsum;
  string 255 tstr;
  string 255 frin,toin;
  string 255 vfr,vto;
  string 255 itfr,itto;
  Boolean TrHs;
  Boolean testf;
  Integer rw;
  Boolean firstf;
  Boolean printf;
  record MainStockBlock MSb;
  
  RepSpec.ArtMode = 1;//tmp until Overview is fixed
  BlockLoad(MSb);
  firstf = true;
//In this report ToRateB1 is quantity2
  frin = FirstInRange(RepSpec.f1,20);
  toin = LastInRange(RepSpec.f1,20);
  vfr = FirstInRange(RepSpec.f2,20);
  vto = LastInRange(RepSpec.f2,20);
  itfr = FirstInRange(RepSpec.f3,20);
  itto = LastInRange(RepSpec.f3,20);
  
  StartReportJob(USetStr(2618));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw, tstr, 1);
  rw = rw + 1;
  HTSupplier(RepSpec.f2,tstr);
  if (nonblank(tstr)) then begin
    Header(rw, tstr, 1);
    rw = rw + 1;
  end;  
  HTArts(frin,toin,tstr);  
  if (nonblank(tstr)) then begin  
    Header(rw, tstr, 1);
    rw = rw + 1;
  end;  
  if (HasItemClassification) then begin
    HTItemClass(RepSpec.f4,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end; 
  end;
  HTSuppGroup(RepSpec.f9,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (HasContactClassification) then begin
    HTCustClassType(RepSpec.f5,tstr);
    if (nonblank(tstr)) then begin
      if nonblank(RepSpec.f5) then begin
        tstr = USetStr(2593) & " " & tstr;
      end;
      Header(rw,tstr,1);
      rw = rw + 1;
    end;  
    HTVendClass(RepSpec.f6,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end; 
    HTCustClassType(RepSpec.LastAcc,tstr);
    if (nonblank(tstr)) then begin
      if nonblank(RepSpec.LastAcc) then begin
        tstr = USetStr(2605) & " " & tstr;
      end;  
      Header(rw,tstr,1);
      rw = rw + 1;
    end;  
  end;  
  EndHeader;
  SetRepCol(2,50);
  SetRepCol(3,200);
  SetRepColBiDi(4,292,332);
  SetRepColBiDi(5,333,373);
  SetRepColBiDi(6,377,417);
  SetRepColBiDi(7,420,460);
  SetRepColBiDi(8,170,220);
  SetRepColBiDi(9,185,235);
  StartFormat(15);
  OutString(0,0,USetStr(2605),false);
  OutString(2,0,USetStr(2606),false);
  OutEmpty(RepSpec,1);
  OutString(3,0,USetStr(2612),false);
  if (RepSpec.ArtMode==1) then begin
    OutStringAdjust(4,0,USetStr(2613),true,M4Val);
    if (IsEnterprise) then begin
      OutStringAdjust(5,0,USetStr(2614),true,M4Val);
      OutStringAdjust(6,0,USetStr(2615),true,M4Val);
      OutStringAdjust(7,0,USetStr(2616),true,M4Val);
    end;
    OutStringAdjustBiDi(1,0,USetStr(2617),true,M4Val,520);
  end else begin
    OutStringAdjust(5,0,USetStr(2620),true,M4Val);
    OutStringAdjust(7,0,USetStr(2617),true,M4Val);
    OutStringAdjustBiDi(1,0,USetStr(2619),true,M4Val,520);
  end;
  EndFormat;
  printf = false;
  PUr.VECode = vfr;
  PU2r.VECode = "";
  TrHs = true;
  testf = true;
  while (LoopKey("VECode",PUr,1,TrHs)) begin
    if (nonblank(RepSpec.f2)) then begin
      if (PUr.VECode>vto) then begin
        TrHs = false;
      end;
    end;    
    if (TrHs) then begin
      testf = true;
      if (DateInRange(PUr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;
      if (PUr.OKFlag!=0) then begin
        if (RepSpec.flags[1]==0) then begin testf = false; end;
      end else begin
        if (RepSpec.flags[2]==0) then begin testf = false; end;
      end;
      if (PUr.Invalid!=0) then begin testf = false; end;
      if (nonblank(RepSpec.AccStr) or nonblank(RepSpec.Stext)) then begin
        VEr.Code = PUr.VECode;
        if (ReadFirstMain(VEr,1,true)) then begin
          if (nonblank(RepSpec.AccStr)) then begin
            if (RepSpec.AccStr!=VEr.SalesMan) then begin testf = false; end;
          end;
          if (nonblank(RepSpec.Stext)) then begin
            if (RepSpec.Stext!=VEr.SalesGroup) then begin testf = false; end;
          end;
        end else begin
          testf = false;
        end;
      end;
      if (testf) then begin
        testf = ContactInGroupClass2(PUr.VECode,RepSpec.f9,RepSpec.f6,RepSpec.LastAcc,"SUPP","","");
      end;
      if (testf) then begin
        t = blankval;
        if (PU2r.VECode!=PUr.VECode) then begin
          if (firstf==false) then begin
            if (printf) then begin
              Gray_Divider(0,1);
              PrintPurchase(RepSpec,PU2r,t);
              totsum = totsum + PU2r.SumCostPrice;
              totunitsum = totunitsum + t;
              totqty = totqty + PU2r.SumQuant;
              totqty2 = totqty2 + PU2r.ToRateB1;
              totfreight = totfreight + PU2r.ShipCost;
              totcustoms = totcustoms + PU2r.CustomsCost;
              totextra = totextra + PU2r.ExtraCost;
              printf = false;
            end;
          end else begin
            firstf = false;
          end;
          RecordNew(PU2r);
          PU2r.VECode = PUr.VECode;
          PU2r.VEName = PUr.VEName;
          PU2r.CurncyCode = PUr.CurncyCode;
          PU2r.ShipCost = blankval;
          PU2r.CustomsCost = blankval;
          PU2r.ExtraCost = blankval;
          PU2r.SumCostPrice = blankval;
          PU2r.SumQuant = blankval;
          PU2r.ToRateB1 = blankval;
        end;
        if (AddToPurchase(RepSpec,PUr,PU2r,frin,toin,itfr,itto,MSb.UnitConvCalc)) then begin
          printf = true;
        end else begin
//          printf = false; // Not sure about this fix....
        end;
      end;
    end;
  end;
  if ((firstf==false) and (MatRowCnt(PU2r)>0)) then begin
    PrintPurchase(RepSpec,PU2r,t);
    totsum = totsum + PU2r.SumCostPrice;
    totunitsum = totunitsum + t;
    totqty2 = totqty2 + PU2r.ToRateB1;
    totqty = totqty + PU2r.SumQuant;
    totfreight = totfreight + PU2r.ShipCost;
    totcustoms = totcustoms + PU2r.CustomsCost;
    totextra = totextra + PU2r.ExtraCost;
  end;
  totunitsum = Round(totunitsum,DefaultRoundMode);
  totsum = Round(totsum,DefaultRoundMode);
  Gray_Divider(0,1);
  StartFormat(15);
  OutEmpty(RepSpec,2);
  if (RepSpec.ArtMode==1) then begin
    OutVal(8,0,totqty,M4UVal,true);
    if (RepSpec.flags[4]!=0) then begin
      OutVal(9,0,totqty2,M4UVal,true);
      OutEmpty(RepSpec,1);
    end else begin
      OutEmpty(RepSpec,1);
    end;  
    OutVal(4,0,totsum/totqty,M4Val,true);
    if (IsEnterprise) then begin
      OutVal(5,0,totfreight,M4UVal,true);
      OutVal(6,0,totcustoms,M4UVal,true);
      OutVal(7,0,totextra,M4UVal,true);
    end else begin
      OutEmpty(RepSpec,3);
    end;
    OutValBiDi(1,0,totsum,M4Val,true,520);
  end else begin
    if (RepSpec.flags[4]!=0) then begin
      OutVal(9,0,totqty2,M4UVal,true);
      OutEmpty(RepSpec,1);
    end else begin
      OutEmpty(RepSpec,1);
    end;  
    OutVal(4,0,totqty,M4Qty,true);
    OutValBiDi(1,0,totsum,M4Val,true,520);
  end;
  EndFormat;
  EndJob;
  RETURN;
END;
