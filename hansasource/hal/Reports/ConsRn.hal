//checked 22.03.2001 by nk
// Crashes ! GETACCTURNOVER not found. global  GETACCTURNOVER in TrialRn.hal is not found.
// Object selection did not work. Fixed

external procedure FindAccSD(Date,var Date,var Boolean);
external function Boolean GetAccName(string,var string,Integer);
external procedure GetAccStartBalance(string,string,Date,record ObjBalVc,Integer,Integer,string,Integer,var val);
external procedure GetAccBalance(string,string,Date,record ObjBalVc,Integer,Integer,Integer,string,Integer,var val);
external procedure GetAccTurnover(string,string,Date,Date,record ObjBalVc,string,Integer,Integer,Integer,var val,var val);
external function Boolean GetOwnerPrc(Date,var Date,var val);
external procedure MulM4OneRate(val,val,var val,roundmode,Boolean);


function
Boolean AddRatenCons(record AccVc Accp,Date bdp,var val sump)
BEGIN
  Boolean res;
  Date ed;
  val prc;

  res = true;
  if (GetOwnerPrc(bdp,ed,prc)) then begin end;
  if (Accp.Conspr!=0) then begin
    MulM4OneRate(sump,prc,sump,DefaultCurRoundOff,true);
  end;
  AddRatenCons = res;
  RETURN;
END;

procedure PrintRow(string account,string consobj,string accname,val sump,Boolean debf,var val totsump)
BEGIN
  StartFormat(15);
  OutString(0,0,account,false);
  OutString(2,0,accname,false);
  OutString(3,0,consobj,false);
  if (debf) then begin
    OutVal(4,0,sump,M4DVal,true);
    totsump = totsump + sump;
  end else begin
    OutVal(5,0,sump,M4CVal,true);
    totsump = totsump + sump;
  end;
  EndFormat;
  RETURN;
END;

global
procedure ConsRn(var record RcVc RepSpec)
BEGIN
  record AccVc Accr;
  record ObjBalVc ObjBalr;
  record CYBlock CompYear;
  record ConsolidationBlock cr;
  string 255 frob,toob,tstr,account;
  val Pb,Sb,Eb,totsum,sum,t;
  Date sd,AccumStartDate;
  Boolean Vws,debf;
  Boolean ObjBals,testf,resUseAccum;

  BlockLoad(CompYear);
  BlockLoad(cr);
  resUseAccum = false;
  RepSpec.basecurncy = cr.ConsCrncy;
  RepSpec.FirstAcc = FirstInRange(RepSpec.AccStr,10);
  RepSpec.LastAcc = LastInRange(RepSpec.AccStr,10);
  
  //nk frob = FirstInRange(RepSpec.AccStr,20);
  //nk toob = LastInRange(RepSpec.AccStr,20);
  frob = FirstInRange(RepSpec.ObjStr,20);
  toob = LastInRange(RepSpec.ObjStr,20);
  
  StartReportJob(USetStr(7320));
  EndHeader;
  SetRepCol(2,80);
  SetRepCol(3,220);
  SetRepCol(4,400);
  SetRepCol(5,480);
  StartFormat(15);
  OutString(0,0,USetStr(7321),false);
  OutString(2,0,USetStr(7322),false);
  OutString(3,0,USetStr(7323),false);
  OutString(4,0,USetStr(7324),true);
  OutString(5,0,USetStr(7325),true);
  EndFormat;
  Gray_Divider(0,1);
  FindAccSD(RepSpec.sStartDate,AccumStartDate,resUseAccum);
  Vws = true;
  while (LoopMain(Accr,1,Vws)) begin
    testf = false;
    Eb = 0;
    Sb = 0;
    Pb = 0;
    ObjBalr.AccNumber = Accr.AccNumber;
    ObjBalr.Object = RepSpec.ObjStr;
    ObjBals = ReadFirstMain(ObjBalr,2,true);  
    if (RepSpec.UsedOnly==0) then begin ObjBals = true; end;
    if (ObjBals) then begin
      testf = true;
      if (nonblank(RepSpec.FirstAcc) and (RepSpec.FirstAcc>ObjBalr.AccNumber)) then begin testf = false; end;
      if (nonblank(RepSpec.LastAcc) and (RepSpec.LastAcc<ObjBalr.AccNumber)) then begin testf = false; end;
      if (nonblank(RepSpec.ObjStr) and (frob>ObjBalr.Object)) then begin testf = false; end;
      if (nonblank(RepSpec.ObjStr) and (toob<ObjBalr.Object)) then begin testf = false; end;
      if ((Accr.blockedFlag!=0) or (Accr.GroupAcc!=0)) then begin testf = false; end;
    end;
    if (testf) then begin
      if (nonblank(Accr.ConsAccNumber)) then begin
        account = Accr.ConsAccNumber;
        if (GetAccName(account,tstr,60)==false) then begin
          tstr = "";
        end;  
      end else begin
        account = Accr.AccNumber;
        tstr = Accr.Comment;
      end;
      debf = true;
      if ((Accr.AccType==3) or (Accr.AccType==4)) then begin
          if (resUseAccum==true) then begin
            sd = AddDay(RepSpec.sStartDate,-1);
            t = blankval;
            GetAccTurnover(Accr.AccNumber,RepSpec.ObjStr,AccumStartDate,sd,ObjBalr,RepSpec.CurncyCode,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,t,Sb);
            GetAccTurnover(Accr.AccNumber,RepSpec.ObjStr,AccumStartDate,RepSpec.sEndDate,ObjBalr,RepSpec.CurncyCode,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,t,Eb);
            Pb = Eb - Sb;
          end else begin
            Sb = 0;
            t = blankval;
            GetAccTurnover(Accr.AccNumber,RepSpec.ObjStr,RepSpec.sStartDate,RepSpec.sEndDate,ObjBalr,RepSpec.CurncyCode,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,t,Eb);
            Pb = Eb - Sb;
          end;
          if (RepSpec.AccSpec==0) then begin
            sum = Eb;
          end;  
          if (RepSpec.AccSpec==1) then begin
            sum = Pb;
          end;  
          if (RepSpec.AccSpec==2) then begin
            sum = Pb;
          end;  

          if (AddRatenCons(Accr,RepSpec.sEndDate,sum)) then begin end;
          if (sum<0) then begin debf = false; end;
          PrintRow(account,RepSpec.f2,tstr,sum,debf,totsum);
      end;
      if ((Accr.AccType==0) or (Accr.AccType==1) or (Accr.AccType==2)) then begin
          GetAccStartBalance(Accr.AccNumber,RepSpec.ObjStr,RepSpec.sStartDate,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.CurncyCode,RepSpec.IncDaughter,Sb);
          GetAccBalance(Accr.AccNumber,RepSpec.ObjStr,RepSpec.sEndDate,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,0,RepSpec.CurncyCode,RepSpec.IncDaughter,Eb);
          Pb = Eb - Sb;
          if (RepSpec.AccSpec==0) then begin
            sum = Eb;
          end;  
          if (RepSpec.AccSpec==1) then begin
            sum = Pb;
          end;  
          if (RepSpec.AccSpec==2) then begin
            sum = Eb;
          end;
          if (AddRatenCons(Accr,RepSpec.sEndDate,sum)) then begin end;
          if (sum<0) then begin debf = false; end;
          PrintRow(account,RepSpec.f2,tstr,sum,debf,totsum);
      end;
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(7325),false);
  OutVal(5,0,totsum,M4Val,true);
  EndFormat;
  EndJob;
  RETURN;
END;
