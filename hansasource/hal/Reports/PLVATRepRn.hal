external procedure AddVATBaseVATRepTM(var record SMVc,record TaxMatrixVc,Integer,Integer,string,val,val,val,val,val);
external function Boolean UseTaxTemplatesforTaxCalc();
external function roundmode GetVATRoundModeRB();
external function roundmode DefaultRoundMode();
external procedure GetVATText(string,var string);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure SLVATInternalInvoices(record SMVc,record SMVc,record RcVc,Date,Date,var LongInt,Integer,Boolean);
external procedure AddExpToVATArray(record ExpVc,row ExpVc,var record SMVc,Integer,Integer,record BaseCurBlock);
external procedure AddTRToVATArray(record TRVc,var record SMVc,Integer,val,Integer,record BaseCurBlock,Boolean);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val FindVAT(string,val,Integer,Integer);
external procedure ExpSumup(record ExpVc,var val);
external function Integer MakeTransFromExp(record TRVc,record ExpVc,Boolean);
external procedure HT2Per(Date, Date , var string);
external procedure GetVATdouble(string,var val,var val,Integer);
external function Boolean ProperVATPeriod(record RcVc);

function Integer CountRows(record SMVc VATr)
BEGIN
  row SMVc VATrw;
  Integer i,vatcnt;
  Integer res;
  
  vatcnt = MatRowCnt(VATr);
  for (i=0;i<vatcnt;i=i+1) begin
    MatRowGet(VATr,i,VATrw);
    if (VATrw.CredVal!=0) then begin
      res = res + 1;
    end;
  end;
  CountRows = res;
  RETURN;
END;

procedure CalcVAT(record SMVc VATr,Integer inclvat,val vivatval,Boolean calcvatf)
BEGIN
  Integer i,vatcnt;
  val t,lv,totvat;
  row SMVc VATrw;
  record RoundBlock RoundRec;
  
  BlockLoad(RoundRec);
  vatcnt = MatRowCnt(VATr);
  for (i=0;i<vatcnt;i=i+1) begin
    MatRowGet(VATr,i,VATrw); 
    if (VATrw.CredVal!=0) then begin           
      switch (RoundRec.VATCalcWay) begin
        case 0:
          if (calcvatf==false) then begin
            t = -VATrw.DebVal;
            if (VATrw.DebVal<0) then begin
              VATrw.DebVal = -VATrw.DebVal;
            end;
          end else begin
            lv = VATrw.CredVal;
            if (lv<0) then begin
              lv = -VATrw.CredVal;
            end;
            t = FindVAT(VATrw.VATCode,lv,inclvat,0);
            t = Round(t,GetVATRoundModeRB);
            if (VATrw.CredVal<0) then begin
              t = -t;
            end;
            VATrw.DebVal = t;
          end;
        case 1:
//          t = -VATrw.DebVal; why -?
          t = VATrw.DebVal;
//why to change the sign for credit notes ?           
//          if (VATrw.DebVal<0) then begin
//            VATrw.DebVal = -VATrw.DebVal;
//          end;
        //already calculated
      end;
/*//this
      if (vivatval<0) then begin
        totvat = totvat - t;
      end else begin
        totvat = totvat + t;
      end;
*/      
      totvat = totvat + t;
      MatRowPut(VATr,i,VATrw);
    end;
  end;
  if (nonblank(vivatval)) then begin
  if (totvat!=vivatval) then begin
    for (i=0;i<vatcnt;i=i+1) begin
      MatRowGet(VATr,i,VATrw);
      if ((VATrw.CurCredVal!=0) and (VATrw.CredVal!=0)) then begin
        VATrw.DebVal = VATrw.DebVal + (vivatval-totvat);
        MatRowPut(VATr,i,VATrw);
        goto LCalcVAT;
      end;
    end;
  end;  
  end;
LCalcVAT:;  
/*
  for (i=0;i<vatcnt;i=i+1) begin
    MatRowGet(VATr,i,VATrw);     
    VATrw.DebVal = MulRateToBase1(VATrw.CurncyCode,VATrw.DebVal,VATrw.FrRate,VATrw.ToRateB1,VATrw.ToRateB2,VATrw.BaseRate1,VATrw.BaseRate2,DefaultCurRoundOff);
    VATrw.CredVal = MulRateToBase1(VATrw.CurncyCode,VATrw.CredVal,VATrw.FrRate,VATrw.ToRateB1,VATrw.ToRateB2,VATrw.BaseRate1,VATrw.BaseRate2,DefaultCurRoundOff);
    MatRowPut(VATr,i,VATrw);     
  end;
*/  
  RETURN;
END;


procedure PrintHeaderRow(record RcVc RepSpec)
BEGIN
  StartFormat(15);
   if (RepSpec.flags[12]!=0) then begin
     OutString(80,0,USetStr(10660),true);
     OutString(90,0,USetStr(10680),false);
   end else begin
     OutString(5,0,USetStr(10660),true);
   end;
   OutString(6,0,USetStr(10661),true);
   OutString(7,0,USetStr(10662),true);
   OutString(8,0,USetStr(10663),true);
   OutString(1,0,USetStr(10669),true);
  EndFormat;
  if (RepSpec.flags[12]!=0) then begin
    Gray_Divider(40,1);
  end else begin
    Gray_Divider(4,1);
  end;
  RETURN;
END;

procedure PrintHeader1(record RcVc RepSpec)
BEGIN
  string 255 tstr;
  
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(1,tstr,1);
  RETURN;
END;

procedure PrintHeader2()
BEGIN
  SetRepCol(2,30);
  SetRepCol(3,50);
  SetRepCol(4,120);
  SetRepCol(5,200);
  SetRepCol(6,280);
  SetRepCol(7,320);
  SetRepCol(8,400);
  StartFormat(15);
   OutString(0,0,USetStr(10651),false);
   OutString(3,0,USetStr(10652),false);
   OutString(4,0,USetStr(10653),false);
   OutString(5,0,USetStr(10654),false);
   OutString(6,0,USetStr(10656),false);
  EndFormat;
  StartFormat(15);
   OutString(2,0,USetStr(10652),false);
   OutString(4,0,USetStr(10657),false);
   OutString(5,0,USetStr(10658),false);
   OutString(6,0,USetStr(10659),false);
  EndFormat;
  Gray_Divider(0,1);
  RETURN;
END;

function Date FindFirstOPDate(LongInt invnr)
BEGIN
  Date res;
  record OPrsVc OPrsr;
  record OPVc OPr;
  
  OPrsr.VINr = invnr;
  OPrsr.TransType = 1;
  if (ReadFirstKey("VIKey",OPrsr,2,true)) begin
    OPr.SerNr = OPrsr.TransNr;
    if (ReadFirstMain(OPr,1,true)) then begin
      res = OPr.TransDate;
    end;
  end;  
  FindFirstOPDate = res;
  RETURN;
END;

function
Boolean PrintVATVIData(record RcVc RepSpec,var LongInt lpnr,var Integer inclvat,Integer nr,record VATVIVc VATVIr)
BEGIN
  record CUVc VEr;
  Boolean res;
  Date firstopdate;
  row VATVIVc VATVIrw;
  Integer i,rwcnt;
  val vatv,vatprc,tax1;
  string 255 tstr;
  record VIVc VIr;
  
  VIr.SerNr = VATVIr.VINr;
  if (ReadFirstMain(VIr,1,true)) then begin
  end;
  
    switch (nr) begin
      case 0:
        if (VATVIr.TransDate<RepSpec.sStartDate) then begin
          goto LPrintVATVIData;
        end;
/*      
        if (VATVIr.TransDate==VATVIr.VITransDate) then begin
          goto LPrintVATVIData;
        end;
*/        
      case 1:
        if (DateInRange(VATVIr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)) then begin
          if (VATVIr.TransDate!=VATVIr.VITransDate) then begin
            goto LPrintVATVIData;
          end;
        end;
/*      
        if (VATVIr.TransDate!=VATVIr.VITransDate) then begin
          goto LPrintVATVIData;
        end;
*/        
    end;
    res = true;
    inclvat = 0;
    VEr.Code = VATVIr.VECode;
    if (ReadFirstMain(VEr,1,true)) then begin
    end;
    if (RepSpec.flags[14]!=0) and (RepSpec.Media==mtFile) then begin
      StartFormat(15);
      OutLongInt(0,0,lpnr,false);
      OutLongInt(30,0,VATVIr.VINr,false);
      OutString(60,0,VATVIr.InvoiceNr,false);
      OutDate(90,0,VATVIr.VIInvDate,false);
      OutDate(120,0,VATVIr.TransDate,false);
      OutDate(150,0,VATVIr.TransDate,false);
      OutString(180,0,"",false);//VATVIr.Sorting
      OutLongInt(210,0,VATVIr.ExportFlag,false);
      OutVal(240,0,VATVIr.PayVal,M4Val,true);
      OutString(270,0,VATVIr.VECode,false);
      OutString(300,0,VATVIr.VEName,false);
      OutString(330,0,VEr.VATNr,false);      
      OutString(360,0,VEr.InvAddr0,false);
      if (nonblank(VIr.Addr1)) then begin
        OutString(360,0,VIr.Addr1,false);
      end else begin
        OutString(360,0,VEr.InvAddr1,false);
      end;
      if (nonblank(VIr.Addr2)) then begin
        OutString(360,0,VIr.Addr2,false);
      end else begin
        OutString(360,0,VEr.InvAddr2,false);
      end;
      if (nonblank(VIr.Addr3)) then begin
        OutString(360,0,VIr.Addr3,false);
      end else begin
        OutString(360,0,VEr.InvAddr3,false);
      end;      
      if (nonblank(VIr.InvAddr4)) then begin
        OutString(360,0,VIr.InvAddr4,false);
      end else begin
        OutString(360,0,VEr.InvAddr4,false);
      end;      
      OutString(390,0,VEr.CountryCode,false);      
      OutString(420,0,"",false);//Receiving Date
      OutString(450,0,"",false);//Customs decl nr
      EndFormat;      
      rwcnt = MatRowCnt(VATVIr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(VATVIr,i,VATVIrw);
        StartFormat(15);
         OutString(0,0,VATVIrw.VATCode,false);
         GetVATText(VATVIrw.VATCode,tstr);
         OutString(40,0,tstr,false);
         MulVATIV(VATVIrw.VATCode,VATVIrw.Sum,vatv,tax1,1,0);    
         OutVal(80,0,VATVIrw.Sum-vatv,M4Val,true);
         GetVATdouble(VATVIrw.VATCode,vatprc,tax1,1);
         OutVal(120,0,vatprc,M4Val,true);
         OutVal(160,0,vatv,M4Val,true);
         OutVal(200,0,VATVIrw.Sum,M4Val,true);
        EndFormat;
      end;
      lpnr = lpnr + 1;
    end else begin
      if (RepSpec.ArtMode==1) then begin
        firstopdate = FindFirstOPDate(VATVIr.VINr);
        StartFormat(15);
        OutLongInt(0,0,lpnr,false);
        OutString(3,"DblVIVc",VATVIr.VINr,false);
        OutDateID(4,"DblVATVIVcID",VATVIr.TransDate,false,VATVIr.SerNr);
        OutString(5,0,VATVIr.VECode,false);
        OutString(6,0,VATVIr.VEName,false);
        EndFormat;
        StartFormat(15);
         OutString(2,0,VATVIr.InvoiceNr,false);
         OutDate(4,0,VATVIr.VIInvDate,false);
         OutString(5,0,VATVIr.VATNr,false);
         if (nonblank(VIr.Addr1)) then begin
           OutString(6,0,VIr.Addr1,false);
         end else begin
           OutString(6,0,VEr.InvAddr0,false);
         end;
        EndFormat;
        if (nonblank(VIr.Addr2)) then begin
          StartFormat(15);
           OutDate(4,0,firstopdate,false);
           OutString(6,0,VIr.Addr2,false);
          EndFormat;
        end else begin
          if (nonblank(VEr.InvAddr1)) then begin
            StartFormat(15);
             OutDate(4,0,firstopdate,false);
             OutString(6,0,VEr.InvAddr1,false);
            EndFormat;
          end;
        end;
        if (nonblank(VIr.Addr3)) then begin
          StartFormat(15);
           OutString(6,0,VIr.Addr3,false);
          EndFormat;
        end else begin
          if (nonblank(VEr.InvAddr2)) then begin
            StartFormat(15);
             OutDate(4,0,firstopdate,false);
             OutString(6,0,VEr.InvAddr2,false);
            EndFormat;
          end;
        end;
        if (nonblank(VIr.InvAddr3)) then begin
          StartFormat(15);
           OutString(6,0,VIr.InvAddr3,false);
          EndFormat;
        end else begin
          if (nonblank(VEr.InvAddr3)) then begin
            StartFormat(15);
             OutString(6,0,VEr.InvAddr3,false);
            EndFormat;
          end;
        end;
        if (nonblank(VIr.InvAddr4)) then begin
          StartFormat(15);
           OutString(6,0,VIr.InvAddr4,false);
          EndFormat;
        end else begin
          if (nonblank(VEr.InvAddr4)) then begin
            StartFormat(15);
             OutString(6,0,VEr.InvAddr4,false);
            EndFormat;
          end;
        end;
        lpnr = lpnr + 1;
        StartFormat(10);
        EndFormat;
        if (RepSpec.flags[12]!=0) then begin
          Gray_Divider(40,1);
        end else begin
          Gray_Divider(4,1);
        end;
      end;
    end;
LPrintVATVIData:;  
  PrintVATVIData = res;
  RETURN;
END;

procedure PrintVIData(record RcVc RepSpec,record VIVc VIr,record TRVc VATVITRr,var LongInt lpnr,var Integer inclvat,var val vivatval,var Boolean firstvif,Boolean vatcommentf)
BEGIN
  record CUVc VEr;
  Date td,firstopdate;
  val vatv,vatprc,tax1;
  row VIVc VIrw;
  string 255 tstr;
  Integer i,rwcnt;
  
  vivatval = blankval;
  VEr.Code = VIr.VECode;
  if (ReadFirstMain(VEr,1,true)) then begin
  end;
  if (RepSpec.flags[14]!=0) and (RepSpec.Media==mtFile) then begin  
    StartFormat(15);
    OutLongInt(0,0,lpnr,false);
    OutLongInt(30,0,VIr.SerNr,false);
    OutString(60,0,VIr.InvoiceNr,false);
    if (RepSpec.flags[16]!=0) then begin
      OutDate(90,0,VIr.ServiceDelDate,false);
    end else begin
      OutDate(90,0,VIr.InvDate,false);
    end;
    OutDate(120,0,VIr.TransDate,false);
    OutDate(150,0,VIr.TransDate,false);
    OutString(180,0,"",false);//VIr.Sorting
    OutLongInt(210,0,VIr.ExportFlag,false);
    OutVal(240,0,VIr.PayVal,M4Val,true);
    OutString(270,0,VIr.VECode,false);
    OutString(300,0,VIr.VEName,false);
    OutString(330,0,VEr.VATNr,false);    
    if (nonblank(VIr.Addr1)) then begin
      OutString(360,0,VIr.Addr1,false);
    end else begin
      OutString(360,0,VEr.InvAddr0,false);
    end;
    if (nonblank(VIr.Addr2)) then begin
      OutString(360,0,VIr.Addr2,false);
    end else begin
      OutString(360,0,VEr.InvAddr1,false);
    end;
    if (nonblank(VIr.Addr3)) then begin
      OutString(360,0,VIr.Addr3,false);
    end else begin
      OutString(360,0,VEr.InvAddr2,false);
    end;
    if (nonblank(VIr.InvAddr3)) then begin
      OutString(360,0,VIr.InvAddr3,false);
    end else begin
      OutString(360,0,VEr.InvAddr3,false);
    end;    
    OutString(390,0,VEr.CountryCode,false);    
    OutDate(420,0,VIr.RcvDate,false);
    OutString(450,0,VIr.Comment,false);    //customs decl
    EndFormat;    
    rwcnt = MatRowCnt(VIr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(VIr,i,VIrw);
      if (VIrw.stp==1) then begin
      StartFormat(15);
       OutString(0,0,VIrw.VATCode,false);
       GetVATText(VIrw.VATCode,tstr);
       OutString(40,0,tstr,false);
       MulVATIV(VIrw.VATCode,VIrw.Sum,vatv,tax1,1,VIr.NoTAXonVAT);
       OutVal(80,0,VIrw.Sum-vatv,M4Val,true);
       GetVATdouble(VIrw.VATCode,vatprc,tax1,1);
       OutVal(120,0,vatprc,M4Val,true);
       OutVal(160,0,vatv,M4Val,true);
       OutVal(200,0,VIrw.Sum,M4Val,true);
      EndFormat;
      end;
    end;
    lpnr = lpnr + 1;
  end else begin
    if (firstvif) then begin
      StartFormat(15);
      OutString(0,0,USetStr(10697),false);
      EndFormat;
      Gray_Divider(0,1);
      firstvif = false;
    end;
    inclvat = 0;
    firstopdate = FindFirstOPDate(VIr.SerNr);
    StartFormat(15);
    OutLongIntOvst(0,0,lpnr,false,VIr.Invalid);
    OutLongIntOvst(3,"DblVIVc",VIr.SerNr,false,VIr.Invalid);
    if (RepSpec.flags[16]!=0) then begin
      td = VIr.ServiceDelDate;
    end else begin
      td = VIr.TransDate;
    end;
    if (VATVITRr.Number>0) then begin
      td = VATVITRr.TransDate;
    end;    
    OutDateOvst(4,0,td,false,VIr.Invalid);
    OutStringOvst(5,0,VIr.VECode,false,VIr.Invalid);
    OutStringOvst(6,0,VIr.VEName,false,VIr.Invalid);
    EndFormat;
    StartFormat(15);
     OutStringOvst(2,0,VIr.InvoiceNr,false,VIr.Invalid);
     OutDateOvst(4,0,VIr.InvDate,false,VIr.Invalid);
     OutStringOvst(5,0,VIr.VATNr,false,VIr.Invalid);

     if (nonblank(VIr.Addr1)) then begin
       OutStringOvst(6,0,VIr.Addr1,false,VIr.Invalid);
     end else begin
       OutStringOvst(6,0,VEr.InvAddr0,false,VIr.Invalid);
     end;
    EndFormat;
    if (nonblank(VIr.Addr2)) then begin
      StartFormat(15);
       OutDateOvst(4,0,firstopdate,false,VIr.Invalid);
       OutStringOvst(6,0,VIr.Addr2,false,VIr.Invalid);
      EndFormat;
    end else begin
      if (nonblank(VEr.InvAddr1)) then begin
        StartFormat(15);
         OutDateOvst(4,0,firstopdate,false,VIr.Invalid);
         OutStringOvst(6,0,VEr.InvAddr1,false,VIr.Invalid);
        EndFormat;
      end;
    end;
    if (nonblank(VIr.Addr3)) or (nonblankdate(VIr.RcvDate)) then begin
      StartFormat(15);
       OutDateOvst(4,0,VIr.RcvDate,false,VIr.Invalid);
       if (nonblank(VIr.Addr3)) then begin
         OutStringOvst(6,0,VIr.Addr3,false,VIr.Invalid);
       end else begin
         OutStringOvst(6,0,VEr.InvAddr2,false,VIr.Invalid);
       end;
      EndFormat;
    end else begin
      StartFormat(15);
       OutStringOvst(6,0,VEr.InvAddr2,false,VIr.Invalid);
      EndFormat;
    end;
    if (nonblank(VIr.InvAddr3)) then begin
      StartFormat(15);
       OutString(6,0,VIr.InvAddr3,false);
      EndFormat;
    end else begin
      if (nonblank(VEr.InvAddr3)) then begin
        StartFormat(15);
         OutString(6,0,VEr.InvAddr3,false);
        EndFormat;
      end;
    end;
    if (nonblank(VIr.InvAddr4)) then begin
      StartFormat(15);
       OutString(6,0,VIr.InvAddr4,false);
      EndFormat;
    end else begin
      if (nonblank(VEr.InvAddr4)) then begin
        StartFormat(15);
         OutString(6,0,VEr.InvAddr4,false);
        EndFormat;
      end;
    end;
    lpnr = lpnr + 1;
    StartFormat(10);
    EndFormat;
    if (vatcommentf) then begin
      Gray_Divider(40,1);
    end else begin
      Gray_Divider(4,1);
    end;
    vivatval = -VIr.VATVal;
    if (vivatval==blankval) then begin
//      vivatval = -VIr.CalcVATVal;
    end;
  end;
  RETURN;
END;

procedure PrintVATArray(record RcVc RepSpec,record SMVc VATr,Boolean sumf,Boolean skipzerovatf,Boolean UseTaxTemplatesforTaxCalcf)
BEGIN
  row SMVc VATrw;
  Integer rwcnt,i;
  Boolean testf,firstf;
  val totvat,totvatbase,cv,dv;

  firstf = true;
  rwcnt = MatRowCnt(VATr);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(VATr,i,VATrw);
    testf = false;
    if ((VATrw.DebVal!=blankval) or (VATrw.CredVal!=blankval)) then begin
      testf = true;
    end;
    if (RepSpec.flags[0]!=0) then begin
      testf = true;
    end;
    if (skipzerovatf) then begin
      if (VATrw.DebVal==0) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      if (firstf) then begin
        PrintHeaderRow(RepSpec);
        firstf = false;
      end;
      StartFormat(15);
       if (RepSpec.flags[12]!=0) then begin
         OutStringOvst(80,0,VATrw.VATCode,true,VATrw.RowSimStat);
         OutStringOvst(90,0,VATrw.Comment,false,VATrw.RowSimStat);
       end else begin
         OutStringOvst(5,0,VATrw.VATCode,true,VATrw.RowSimStat);
       end;
       cv = MulRateToBase1(VATrw.CurncyCode,VATrw.CredVal,VATrw.FrRate,VATrw.ToRateB1,VATrw.ToRateB2,VATrw.BaseRate1,VATrw.BaseRate2,DefaultCurRoundOff);
       OutValOvst(6,0,cv,M4Val,true,VATrw.RowSimStat);
       OutValOvst(7,0,VATrw.CurCredVal,M4Val,true,VATrw.RowSimStat);
       dv = MulRateToBase1(VATrw.CurncyCode,VATrw.DebVal,VATrw.FrRate,VATrw.ToRateB1,VATrw.ToRateB2,VATrw.BaseRate1,VATrw.BaseRate2,DefaultCurRoundOff);
       OutValOvst(8,0,dv,M4Val,true,VATrw.RowSimStat);
       OutValOvst(1,0,cv+dv,M4Val,true,VATrw.RowSimStat);
      EndFormat;
      if (sumf) then begin
        if (UseTaxTemplatesforTaxCalcf) then begin
          totvat = totvat + dv;
          if (blank(VATrw.ExtraComment)) then begin
            totvatbase = totvatbase + cv;
          end else begin
            totvatbase = totvatbase + StringToVal(VATrw.ExtraComment,M4Val);
          end;
        end else begin
          totvat = totvat + dv;
          totvatbase = totvatbase + cv;
        end;
      end else begin
        AddToAccumulator(0,dv);
        AddToAccumulator(1,cv);
        AddToAccumulator(2,dv);
        AddToAccumulator(3,cv);
        if (RepSpec.Media==mtPrinter) then begin
          StartFooter(45,true);
           Black_Divider(0,1);
           OutString(200,0,USetStr(2412),false)
           OutAccumulator(380,4,M4Val,true);
           OutAccumulator(1,5,M4Val,true);
           OutString(200,0,USetStr(2413),false)
           OutAccumulator(380,0,M4Val,true);
           OutAccumulator(1,1,M4Val,true);
           ClearAccumulator(0);
           ClearAccumulator(1);
           OutString(200,0,USetStr(2414),false)
           OutAccumulator(380,2,M4Val,true);
           OutAccumulator(1,3,M4Val,true);
           CopyAccumulator(4,2);
           CopyAccumulator(5,3);
          EndFooter;    
        end;
      end;
    end;
  end;
  if ((sumf) and ((totvat!=0) or (totvatbase!=0))) then begin
    if (RepSpec.flags[12]!=0) then begin
      Gray_Divider(40,1);
    end else begin
      Gray_Divider(4,1);
    end;
    StartFormat(15);
     OutVal(6,0,totvatbase,M4Val,true);
     OutVal(8,0,totvat,M4Val,true);
     OutVal(1,0,totvat+totvatbase,M4Val,true);
    EndFormat;
  end;
  RETURN;
END;

procedure SetupVATArray(var record SMVc VATr,Integer NoVAT)
BEGIN
  row SMVc SMrw;
  Integer rwcnt,i;
  record VATCodeBlock VATRec;
  row VATCodeBlock VATrw;
  
  BlockLoad(VATRec);  
  rwcnt = MatRowCnt(VATRec);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(VATRec,i,VATrw);
    switch (NoVAT) begin
      case 0: ;
      case 1: if (VATrw.ExcludeFromOfficial==2) then begin goto LSetupVATArray; end;
      case 2: if (VATrw.ExcludeFromOfficial!=2) then begin goto LSetupVATArray; end;
    end;
    SMrw.AccNumber = VATrw.PurchVATAcc;
    SMrw.VATCode = VATrw.VATCode;
    SMrw.Comment = VATrw.Comment;
    SMrw.DebVal = blankval;
    SMrw.DebVal2 = blankval;
    SMrw.CredVal = blankval;
    SMrw.CredVal2 = blankval;
    if (VATrw.IncVatpr!=blankval) then begin
      SMrw.CurCredVal = VATrw.IncVatpr;
    end else begin
      SMrw.CurCredVal = VATrw.ExVatpr;
    end;
    MatRowPut(VATr,i,SMrw);
LSetupVATArray:;    
  end;
  RETURN;
END;

procedure AddVATToVATArray(record SMVc VATInr,var record SMVc TotVATr)
BEGIN
  Integer i,vatcnt;
  row SMVc VATInrw;
  row SMVc TotVATrw;
  
  vatcnt = MatRowCnt(TotVATr);
  for (i=0;i<vatcnt;i=i+1) begin
    MatRowGet(VATInr,i,VATInrw);
    MatRowGet(TotVATr,i,TotVATrw);
    TotVATrw.CurCredVal = VATInrw.CurCredVal;
    TotVATrw.VATCode = VATInrw.VATCode;
    TotVATrw.CredVal = TotVATrw.CredVal + MulRateToBase1(VATInrw.CurncyCode,VATInrw.CredVal,VATInrw.FrRate,VATInrw.ToRateB1,VATInrw.ToRateB2,VATInrw.BaseRate1,VATInrw.BaseRate2,DefaultCurRoundOff);
    TotVATrw.DebVal = TotVATrw.DebVal + MulRateToBase1(VATInrw.CurncyCode,VATInrw.DebVal,VATInrw.FrRate,VATInrw.ToRateB1,VATInrw.ToRateB2,VATInrw.BaseRate1,VATInrw.BaseRate2,DefaultCurRoundOff);
    MatRowPut(TotVATr,i,TotVATrw);
  end;
  RETURN;
END;

procedure PrintExpData(record RcVc RepSpec,Integer exportflag,record ExpVc Expr,row ExpVc Exprw,var Integer inclvat,var LongInt lpnr,
                       record SMVc VATr,record BaseCurBlock BCb,var string lastvecode,
                       record SMVc ExpVATr,record SMVc TotVATr,record SMVc PeriodVATr,var Boolean printexpf,var Boolean printexpdataf)
BEGIN
  record CUVc VEr;
  Boolean found,lpnrf;
  
  if (nonblank(Exprw.DocNr)) then begin
    lpnrf = true;
    inclvat = 0;
    VEr.Code = Exprw.VECode;
    if (ReadFirstMain(VEr,1,true)) then begin end;
    found = true;    
    switch (exportflag) begin
      case 0: 
        if (VEr.ExportFlag!=0) then begin found = false; end;
        if (RepSpec.flags[7]==0) then begin 
          if (VEr.ExportFlag==0) then begin found = false; end;
        end;
      case 1: 
        if ((VEr.ExportFlag!=1) and (VEr.ExportFlag!=3)) then begin found = false; end;
        if (RepSpec.flags[8]==0) then begin 
          if ((VEr.ExportFlag==1) or (VEr.ExportFlag==3)) then begin found = false; end;
        end;
      case 2: 
        if ((VEr.ExportFlag!=2) and (VEr.ExportFlag!=4)) then begin found = false; end;
        if (RepSpec.flags[9]==0) then begin 
          if ((VEr.ExportFlag==2) or (VEr.ExportFlag==4)) then begin found = false; end;
        end;
    end;
    if (found) then begin
      if (lastvecode!="ZZZZZZZZZZZZZZZZZZZZ") then begin
        if (RepSpec.ArtMode==1) then begin
          if (Expr.Invalid==0) then begin
            AddVATToVATArray(VATr,ExpVATr);
            AddVATToVATArray(VATr,TotVATr);
            AddVATToVATArray(VATr,PeriodVATr);
          end;        
          PrintVATArray(RepSpec,VATr,false,false,UseTaxTemplatesforTaxCalc);
          RecordNew(VATr);
          SetupVATArray(VATr,0);
          printexpf = true;
        end;
      end;
    
      if (RepSpec.ArtMode==1) then begin
        if (printexpdataf) then begin
          StartFormat(10);
          EndFormat;
          if (RepSpec.flags[12]!=0) then begin
            Gray_Divider(40,1);
          end else begin
            Gray_Divider(4,1);
          end;
      
          StartFormat(15);
          OutLongIntOvst(0,0,lpnr,false,Expr.Invalid);
          OutLongIntOvst(3,"DblExpVc",Expr.SerNr,false,Expr.Invalid);
          OutDateOvst(4,0,Expr.TransDate,false,Expr.Invalid);
          if (found) then begin
            OutStringOvst(5,0,VEr.Code,false,Expr.Invalid);
            OutStringOvst(6,0,VEr.Name,false,Expr.Invalid);
          end;
          EndFormat;
          lpnrf = false;
          lpnr = lpnr + 1;
        end;
      end;
      
    end;
    if (found) then begin
//StopAlert("found " & found & " Exprw.VECode " & Exprw.VECode & " lastvecode " & lastvecode);
      AddExpToVATArray(Expr,Exprw,VATr,inclvat,Expr.Invalid,BCb);
      if (printexpdataf) then begin
        if (RepSpec.ArtMode==1) then begin
          StartFormat(15);
           if (lpnrf) then begin
             OutLongIntOvst(0,0,lpnr,false,Expr.Invalid);
           end;
           OutStringOvst(4,0,Exprw.DocNr,false,Expr.Invalid);
           OutStringOvst(5,0,VEr.VATNr,false,Expr.Invalid);
             OutStringOvst(6,0,VEr.InvAddr0,false,Expr.Invalid);
/*             
           if (lpnrf) then begin
             OutStringOvst(6,0,VEr.InvAddr0,false,Expr.Invalid);
           end else begin
             OutStringOvst(6,0,Exprw.Comment,false,Expr.Invalid);
           end;         
*/           
          EndFormat;    
          if (nonblank(VEr.InvAddr1)) then begin
            StartFormat(15);
             OutStringOvst(6,0,VEr.InvAddr1,false,Expr.Invalid);
            EndFormat;    
          end;
          if (nonblank(VEr.InvAddr2)) then begin
            StartFormat(15);
             OutStringOvst(6,0,VEr.InvAddr2,false,Expr.Invalid);
            EndFormat;    
          end;
          if (nonblank(VEr.InvAddr3)) then begin
            StartFormat(15);
             OutStringOvst(6,0,VEr.InvAddr3,false,Expr.Invalid);
            EndFormat;    
          end;
          if (nonblank(VEr.InvAddr4)) then begin
            StartFormat(15);
             OutStringOvst(6,0,VEr.InvAddr4,false,Expr.Invalid);
            EndFormat;    
          end;
        end;
      end;
    end;
  end;
  lastvecode = Exprw.VECode;
  RETURN;
END;

procedure AddVATToVATArray2(string assetvatcode,record SMVc VATInr,var record SMVc TotVATr,var record SMVc AssetTotVATr)
BEGIN
  Integer i,vatcnt;
  row SMVc VATInrw;
  row SMVc TotVATrw;
  Boolean assetf;
  
  vatcnt = MatRowCnt(TotVATr);
  for (i=0;i<vatcnt;i=i+1) begin
    MatRowGet(VATInr,i,VATInrw);
    assetf = false;
    if (nonblank(assetvatcode)) then begin
      if (Left(VATInrw.VATCode,1)==assetvatcode) then begin
        assetf = true;
      end;
    end;
    if (assetf) then begin
      MatRowGet(AssetTotVATr,i,TotVATrw);
      TotVATrw.CurCredVal = VATInrw.CurCredVal;
      TotVATrw.VATCode = VATInrw.VATCode;
      TotVATrw.CredVal = TotVATrw.CredVal + MulRateToBase1(VATInrw.CurncyCode,VATInrw.CredVal,VATInrw.FrRate,VATInrw.ToRateB1,VATInrw.ToRateB2,VATInrw.BaseRate1,VATInrw.BaseRate2,DefaultCurRoundOff);
      TotVATrw.DebVal = TotVATrw.DebVal + MulRateToBase1(VATInrw.CurncyCode,VATInrw.DebVal,VATInrw.FrRate,VATInrw.ToRateB1,VATInrw.ToRateB2,VATInrw.BaseRate1,VATInrw.BaseRate2,DefaultCurRoundOff);
      MatRowPut(AssetTotVATr,i,TotVATrw);
    end else begin
      MatRowGet(TotVATr,i,TotVATrw);
      TotVATrw.CurCredVal = VATInrw.CurCredVal;
      TotVATrw.VATCode = VATInrw.VATCode;
      TotVATrw.CredVal = TotVATrw.CredVal + MulRateToBase1(VATInrw.CurncyCode,VATInrw.CredVal,VATInrw.FrRate,VATInrw.ToRateB1,VATInrw.ToRateB2,VATInrw.BaseRate1,VATInrw.BaseRate2,DefaultCurRoundOff);
      TotVATrw.DebVal = TotVATrw.DebVal + MulRateToBase1(VATInrw.CurncyCode,VATInrw.DebVal,VATInrw.FrRate,VATInrw.ToRateB1,VATInrw.ToRateB2,VATInrw.BaseRate1,VATInrw.BaseRate2,DefaultCurRoundOff);
      MatRowPut(TotVATr,i,TotVATrw);
    end;
  end;
  RETURN;
END;

function
val FindVATBase(string vatc,val vval,Integer inclvat)
BEGIN
  val res;
  val drval;
  
  GetVATdouble(vatc,drval,res,InclVAT);
  switch (InclVAT) begin
    case 0:
      drval = vval*100/drval;       						
    case 1:
      drval = vval*100/drval;       						
  end;  
  res = drval;
  res = Round(res,DefaultRoundMode);  
  FindVATBase = res;
  RETURN;
END;

function Boolean IsInvoiceCredited(record VATVIVc VATVIr)
BEGIN
  Boolean res;
  record VIVc VIr;
  
  if (VATVIr.InvType==kInvoiceTypeCredit or VATVIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
    res = true;
  end else begin
    VIr.SerNr = VATVIr.VINr;
    if (ReadFirstMain(VIr,1,true)) then begin
      if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        res = true;
      end;
    end;
  end;
  IsInvoiceCredited = res;
  RETURN;
END;

procedure VIAddVATTRToVATArray(record VATVIVc VATVIr,var record SMVc VATr,Integer inclvat,val vivatval)
BEGIN
  row VATVIVc VATVIrw;
  row SMVc VATrw;
  Integer i,rwcnt;
  Integer vi,vatcnt;
  val v,lv,t;
  val totvat;
  
  vatcnt = MatRowCnt(VATr);
  rwcnt = MatRowCnt(VATVIr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATVIr,i,VATVIrw);
//    v = MulRateToBase1(VATVIr.CurncyCode,VATVIrw.Sum,VATVIr.FrRate,VATVIr.ToRateB1,VATVIr.ToRateB2,VATVIr.BaseRate1,VATVIr.BaseRate2,DefaultCurRoundOff);    
    v = VATVIrw.Sum;
    if (IsInvoiceCredited(VATVIr)) then begin
      v = -v;
    end;
    for (vi=0;vi<vatcnt;vi=vi+1) begin
      MatRowGet(VATr,vi,VATrw);
      if (VATVIrw.VATCode==VATrw.VATCode) then begin
        if (v<0) then begin
          lv = -v;
        end else begin
          lv = v;
        end;
        t = FindVAT(VATVIrw.VATCode,lv,inclvat,0);
        if (v<0) then begin
          t = -t;
        end;
        VATrw.CredVal = VATrw.CredVal + v;
        VATrw.DebVal = VATrw.DebVal + t;
        totvat = totvat + t;
        VATrw.CurncyCode = VATVIr.CurncyCode;
        VATrw.FrRate = VATVIr.FrRate;
        VATrw.ToRateB1 = VATVIr.ToRateB1;
        VATrw.ToRateB2 = VATVIr.ToRateB2;
        VATrw.BaseRate1 = VATVIr.BaseRate1;
        VATrw.BaseRate2 = VATVIr.BaseRate2;          
        VATrw.RowSimStat = VATVIr.Invalid;          
        MatRowPut(VATr,vi,VATrw);
        goto LVIAddVATTRToVATArrayBreak;
      end;
    end;    
LVIAddVATTRToVATArrayBreak:;    
  end;
  if (totvat!=vivatval) then begin
    for (vi=0;vi<vatcnt;vi=vi+1) begin
      MatRowGet(VATr,vi,VATrw);
      if ((VATrw.CurCredVal!=0) and (VATrw.CredVal!=0) and (vivatval!=0)) then begin
        VATrw.DebVal = VATrw.DebVal - (vivatval-totvat);
        VATrw.RowSimStat = VATVIr.Invalid;          
//        VATrw.DebVal = VATrw.DebVal + (vivatval-totvat);
        MatRowPut(VATr,vi,VATrw);
        goto LVIAddVATTRToVATArray;
      end;
    end;
  end;
LVIAddVATTRToVATArray:;  
  CalcVAT(VATr,inclvat,vivatval,true);
  RETURN;
END;

global
procedure AddIntIVToVIVATArray(record IntIVVc IntIVr,var record SMVc VATr,Integer invalid,Boolean UseTaxTemplatesforTaxCalcf)
BEGIN
  row IntIVVc IntIVrw;
  row SMVc VATrw;
  Integer i,rwcnt;
  Integer vi,vatcnt;
  val v,lv,t;
  val totvat;
  Boolean testf,ratef;
  record TaxMatrixVc TMr;
  
  vatcnt = MatRowCnt(VATr);
  rwcnt = MatRowCnt(IntIVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IntIVr,i,IntIVrw);
    ratef = true;
    if (UseTaxTemplatesforTaxCalcf)  then begin
      if (blank(IntIVrw.TaxTemplateCode)) then begin goto LAddIntIVToVATArrayBreak; end;
    end else begin
      if (blank(IntIVrw.VATCode)) then begin goto LAddIntIVToVATArrayBreak; end;
    end;
//    v = MulRateToBase1(IntIVr.CurncyCode,IntIVrw.Sum,IntIVr.FrRate,IntIVr.ToRateB1,IntIVr.ToRateB2,IntIVr.BaseRate1,IntIVr.BaseRate2,DefaultCurRoundOff);
    if (UseTaxTemplatesforTaxCalcf)  then begin
      UnpackRowFieldMatrix(IntIVrw,"TaxMatrix",TMr);
//      AddVATBaseVATRepTM(VATr,TMr,1,IntIVr.Invalid,IntIVr.CurncyCode,IntIVr.FrRate,IntIVr.ToRateB1,IntIVr.ToRateB2,IntIVr.BaseRate1,IntIVr.BaseRate2);
    end else begin

      v = IntIVrw.Sum;
      for (vi=0;vi<vatcnt;vi=vi+1) begin
        MatRowGet(VATr,vi,VATrw);
        testf = true;
        if (IntIVrw.stp!=1) then begin testf = false; end;
        if (UseTaxTemplatesforTaxCalcf)  then begin
        end else begin
          if (IntIVrw.VATCode!=VATrw.VATCode) then begin testf = false; end;
        end;
        if (testf) then begin
          if (testf) then begin
            if (v<0) then begin
              lv = -v;
            end else begin
              lv = v;
            end;
            t = FindVAT(IntIVrw.VATCode,lv,0,0);
            t = Round(t,GetVATRoundModeRB);
            if (v<0) then begin
              t = -t;
            end;
            VATrw.CredVal = VATrw.CredVal + Round(v,DefaultRoundMode);
            VATrw.DebVal = VATrw.DebVal + t;
            VATrw.RowSimStat = invalid;
/*            
            VATrw.CurncyCode = IntIVr.CurncyCode;
            if (ratef) then begin
              VATrw.FrRate = IntIVr.FrRate;
              VATrw.ToRateB1 = IntIVr.ToRateB1;
              VATrw.ToRateB2 = IntIVr.ToRateB2;
              VATrw.BaseRate1 = IntIVr.BaseRate1;
              VATrw.BaseRate2 = IntIVr.BaseRate2;          
            end;
*/            
            MatRowPut(VATr,vi,VATrw);
            totvat = totvat + t;
          end;
          goto LAddIntIVToVATArrayBreak;
        end;
      end; 
    end;   
LAddIntIVToVATArrayBreak:;    
  end;
  RETURN;
END;

function val CalculatePaymentSum(LongInt invnr,string vatcode)
begin
  val res;
  record OPrsVc OPrsr;
  record OPVc OPr;
  row OPVc OPrw;
  Integer i,rwcnt;
  Boolean found,testf;
  
  found = true;
  OPrsr.VINr = invnr;
  OPrsr.TransType = kOPrsTransTypePayment;
  while (LoopKey("VIKey",OPrsr,2,found)) begin
    if (OPrsr.VINr!=invnr) then begin found = false; end;
    if (OPrsr.TransType!=kOPrsTransTypePayment) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (testf) then begin
        OPr.SerNr = OPrsr.TransNr;
        if (ReadFirstMain(OPr,1,true)) then begin
          rwcnt = MatRowCnt(OPr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(OPr,i,OPrw);
            if (OPrw.VATCode==vatcode) then begin
              res = res + (OPrw.PInvVal-OPrw.VATVal);
            end;
          end;
        end;
      end;
    end;
  end;
  CalculatePaymentSum = res;
  return;
end;

procedure AddVIToVATArray(record VIVc VIr,var record SMVc VATr,Integer inclvat,val vivatval,Integer invalid,record BaseCurBlock BCb,Boolean calcvatf,Boolean UseTaxTemplatesforTaxCalcf)
BEGIN
  row VIVc VIrw;
  row SMVc VATrw;
  Integer i,rwcnt;
  Integer vi,vatcnt;
  val v,lv,t;
  val totvat;
  Boolean testf,ratef,lcalcvatf;
  record TaxMatrixVc TMr;
  
  lcalcvatf = calcvatf; 
  vatcnt = MatRowCnt(VATr);
  rwcnt = MatRowCnt(VIr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIr,i,VIrw);
    ratef = true;
    if (UseTaxTemplatesforTaxCalcf)  then begin
      if (blank(VIrw.TaxTemplateCode)) then begin goto LAddVIToVATArrayBreak; end;
    end else begin
      if (blank(VIrw.VATCode)) then begin goto LAddVIToVATArrayBreak; end;
    end;
//    v = MulRateToBase1(VIr.CurncyCode,VIrw.Sum,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
    if (UseTaxTemplatesforTaxCalcf)  then begin
      UnpackRowFieldMatrix(VIrw,"TaxMatrix",TMr);
      AddVATBaseVATRepTM(VATr,TMr,VIr.InvType,VIr.Invalid,VIr.CurncyCode,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2);
    end else begin
      v = VIrw.Sum;
      if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        v = -v;
      end;
      for (vi=0;vi<vatcnt;vi=vi+1) begin
        MatRowGet(VATr,vi,VATrw);
        testf = true;
        if (VIrw.stp!=1) then begin testf = false; end;
        if (UseTaxTemplatesforTaxCalcf)  then begin
        end else begin
          if (VIrw.VATCode!=VATrw.VATCode) then begin testf = false; end;
        end;
        if (testf) then begin
          if (testf) then begin
            if (v<0) then begin
              lv = -v;
            end else begin
              lv = v;
            end;
            if (VIrw.VATVal!=0) then begin
              if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                t = -VIrw.VATVal;
              end else begin
                t = VIrw.VATVal;
              end;
              lcalcvatf = false;
            end else begin
              t = FindVAT(VIrw.VATCode,lv,inclvat,0);
              t = Round(t,GetVATRoundModeRB);
              if (v<0) then begin
                t = -t;
              end;
            end;
            VATrw.CredVal = VATrw.CredVal + Round(v,DefaultRoundMode);
            VATrw.DebVal = VATrw.DebVal + t;
            VATrw.RowSimStat = invalid;
            VATrw.CurncyCode = VIr.CurncyCode;
            if (ratef) then begin
              VATrw.FrRate = VIr.FrRate;
              VATrw.ToRateB1 = VIr.ToRateB1;
              VATrw.ToRateB2 = VIr.ToRateB2;
              VATrw.BaseRate1 = VIr.BaseRate1;
              VATrw.BaseRate2 = VIr.BaseRate2;          
            end;
            MatRowPut(VATr,vi,VATrw);
            totvat = totvat + t;
          end;
          goto LAddVIToVATArrayBreak;
        end;
      end; 
    end;   
LAddVIToVATArrayBreak:;    
  end;
  if (lcalcvatf) then begin
  if (nonblank(vivatval)) then begin
  if (totvat!=vivatval) then begin
    for (vi=0;vi<vatcnt;vi=vi+1) begin
      MatRowGet(VATr,vi,VATrw);
      if ((VATrw.CurCredVal!=0) and (VATrw.CredVal!=0)) then begin
        VATrw.DebVal = VATrw.DebVal - (vivatval-totvat);
        VATrw.RowSimStat = invalid;
        MatRowPut(VATr,vi,VATrw);
        goto LAddVIToVATArray;
      end;
    end;
  end;
  end;
  end;
LAddVIToVATArray:;  
  if (lcalcvatf) then begin
    CalcVAT(VATr,inclvat,vivatval,calcvatf);
  end;
  RETURN;
END;

function 
Boolean CheckVATVIExists(record RcVc RepSpec,LongInt number,Date startdate,Date enddate,var record TRVc VATVITRr)
BEGIN
  record VATVIVc VATVIr;
  record TRVc TRr;
  Boolean res;
  
  VATVITRr = TRr;
  
  VATVIr.VINr = number;
  if (ReadFirstKey("VINr",VATVIr,1,true)) then begin  
    TRr.Number = VATVIr.SerNr;
    TRr.IntYc = VATVIYc;
    if (ReadFirstMain(TRr,2,true)) then begin
      if (DateInRange(TRr.TransDate,startdate,enddate)) then begin
        RecordCopy(VATVITRr,TRr);
//        res = true;
      end;
    end else begin
      res = true;
    end;
  end else begin
    res = true;
  end;
  CheckVATVIExists = res;
  RETURN;
END;

function Boolean PaymentInPeriod(record VIVc VIr,Date startdate,Date enddate)
begin
  Boolean res,found;
  record OPrsVc OPrsr;
  record OPVc OPr;  
  
  res = false;
  OPrsr.VINr = VIr.SerNr;
  OPrsr.TransType = 1;
  OPrsr.TransDate = startdate;
  found = true;
  while (LoopKey("VIDateKey",OPrsr,3,found)) begin
    if (OPrsr.VINr!=VIr.SerNr) then begin found = false; end;
    if (OPrsr.TransType!=1) then begin found = false; end;
    if (OPrsr.TransDate>enddate) then begin found = false; end;
    if (found) then begin
      res = true;
      found = false;
    end;
  end;  
  PaymentInPeriod = res;
  return;
end;

procedure PLVATPayments(record SMVc TotVATr,record SMVc AssetTotVATr,record SMVc PeriodVATr,record RcVc RepSpec,Date startdate,Date enddate,var LongInt lpnr,Integer exportflag,Integer NoVAT,
                        record SMVc TotVATNor,record SMVc PeriodVATNor,Boolean UseTaxTemplatesforTaxCalcf)
begin
  record VIVc VIr;
  record OPrsVc OPrsr;
  record OPVc OPr;
  row OPVc OPrw;
  Integer i,rwcnt;
  Boolean found,testf;
  record SMVc VATr;
  record SMVc VATNor;
  record SMVc VIVATr;
  record SMVc VIVATNor;
  record SMVc DummyVATr;
  record TRVc VATVITRr;
  Integer inclvat;
  Boolean firstvif;
  vector Boolean vinvoiceprntdf;
  record BaseCurBlock BCb;
  val vivatval;

  BlockLoad(BCb);
  found = true;
  OPrsr.TransDate = startdate;
  while (LoopKey("TransDate",OPrsr,2,found)) begin
    if (DateInRange(OPrsr.TransDate,startdate,enddate)==false) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (OPrsr.TransType!=kOPrsTransTypePayment) then begin testf = false; end;
      if (OPrsr.VINr<=0) then begin testf = false; end;
      if (testf) then begin
        OPr.SerNr = OPrsr.TransNr;
        if (ReadFirstMain(OPr,1,true)) then begin
          rwcnt = MatRowCnt(OPr);
          if (nonblank(RepSpec.AccStr)) then begin
            testf = false;
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(OPr,i,OPrw);
              if (OPrw.VATCode!=RepSpec.AccStr) then begin
                testf = true;
                i = rwcnt;
              end;
            end;
          end;
          if (testf) then begin
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(OPr,i,OPrw);
              testf = true;
              if (OPrw.VISerNr<=0) then begin testf = false; end;
              if (vinvoiceprntdf[OPrw.VISerNr]) then begin testf = false; end;
              if (testf) then begin
                vinvoiceprntdf[OPrw.VISerNr] = true;
                VIr.SerNr = OPrw.VISerNr;
                if (ReadFirstMain(VIr,1,true)) then begin
                  if (VIr.OPBookVAT==0) then begin testf = false; end;
                  switch (exportflag) begin
                    case 0: 
                      if (VIr.ExportFlag!=0) then begin testf = false; end;
                      if (RepSpec.flags[7]==0) then begin 
                        if (VIr.ExportFlag==0) then begin testf = false; end;
                      end;
                    case 1: 
                      if ((VIr.ExportFlag!=1) and (VIr.ExportFlag!=3)) then begin testf = false; end;
                      if (RepSpec.flags[8]==0) then begin 
                        if ((VIr.ExportFlag==1) or (VIr.ExportFlag==3)) then begin testf = false; end;
                      end;
                    case 2: 
                      if ((VIr.ExportFlag!=2) and (VIr.ExportFlag!=4)) then begin testf = false; end;
                      if (RepSpec.flags[9]==0) then begin 
                        if ((VIr.ExportFlag==2) or (VIr.ExportFlag==4)) then begin testf = false; end;
                      end;
                  end;

                  if (testf) then begin
                    if (NoVAT!=0) then begin
                      RecordNew(VATr);
                      SetupVATArray(VATr,1);
                      RecordNew(VATNor);
                      SetupVATArray(VATNor,2);
                    end else begin
                      RecordNew(VATr);
                      SetupVATArray(VATr,0);
                    end;
                    if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin//this
                      AddVIToVATArray(VIr,VATr,inclvat,-VIr.VATVal,VIr.Invalid,BCb,true,UseTaxTemplatesforTaxCalcf);
                      if (NoVAT!=0) then begin
                        AddVIToVATArray(VIr,VATNor,inclvat,-VIr.VATVal,VIr.Invalid,BCb,true,UseTaxTemplatesforTaxCalcf);
                      end;
                    end else begin
                      AddVIToVATArray(VIr,VATr,inclvat,VIr.VATVal,VIr.Invalid,BCb,true,UseTaxTemplatesforTaxCalcf);
                      if (NoVAT!=0) then begin
                        AddVIToVATArray(VIr,VATNor,inclvat,VIr.VATVal,VIr.Invalid,BCb,true,UseTaxTemplatesforTaxCalcf);
                      end;
                    end;
                    if (CountRows(VATr)>0) then begin
                      if (RepSpec.ArtMode==1) then begin
                        PrintVIData(RepSpec,VIr,VATVITRr,lpnr,inclvat,vivatval,firstvif,RepSpec.flags[12]!=0);
                      end;
                      if (VIr.Invalid==0) then begin
                        AddVATToVATArray(VATr,PeriodVATr);
                        AddVATToVATArray2(RepSpec.FirstAcc,VATr,TotVATr,AssetTotVATr);
                        AddVATToVATArray(VATr,VIVATr);
                        if (NoVAT!=0) then begin
                          AddVATToVATArray(VATNor,PeriodVATNor);
                          AddVATToVATArray2(RepSpec.FirstAcc,VATNor,TotVATNor,DummyVATr);
                          AddVATToVATArray(VATNor,VIVATNor);
                        end;
                      end;
                      if (RepSpec.ArtMode==1) then begin
                        if (NoVAT!=0) then begin
                          PrintVATArray(RepSpec,VATr,true,false,UseTaxTemplatesforTaxCalc);
                          PrintVATArray(RepSpec,VATNor,true,false,UseTaxTemplatesforTaxCalc);
                        end else begin
                          PrintVATArray(RepSpec,VATr,true,false,UseTaxTemplatesforTaxCalc);
                        end;
                        Gray_Divider(0,1);
                      end;
                    end;
                  end;
                  
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;


procedure PLVATInvoices(record SMVc TotVATr,record SMVc AssetTotVATr,record SMVc PeriodVATr,record RcVc RepSpec,Date startdate,Date enddate,var LongInt lpnr,Integer exportflag,Integer NoVAT,
                        record SMVc TotVATNor,record SMVc PeriodVATNor,Boolean UseTaxTemplatesforTaxCalcf)
BEGIN
  record TRVc TRr;
  record TRVc VATVITRr;
  record SMVc VATr;
  record VIVc VIr;
  Boolean TrHs,testf,test2f,firstvif;
  Integer inclvat;
  val vivatval;
  LongInt friv,toiv;
  record BaseCurBlock BCb;
  record SMVc VIVATr;
  string 20 ckey;
  record SMVc VATNor;
  record SMVc VIVATNor;
  record SMVc DummyVATr;
  record APAccBlock APAccb;
  record VATVIVc VATVIr;
  record APVc APr;

  firstvif = true;
  BlockLoad(BCb);
  BlockLoad(APAccb);
  if (NoVAT!=0) then begin
    SetupVATArray(VIVATr,1);
    SetupVATArray(VIVATNor,2);
  end else begin
    SetupVATArray(VIVATr,0);
  end;
  friv = FirstInRange(RepSpec.f1,10);
  toiv = LastInRange(RepSpec.f1,10);
  switch (RepSpec.flags[6]) begin
    case 0: 
      ckey = "TransDate";
      if (RepSpec.flags[16]!=0) then begin
        ckey = "ServiceDelDate";
      end;
    case 1: 
      ckey = "InvDate";
      if (RepSpec.flags[16]!=0) then begin
        ckey = "ServiceDelDate";
      end;
    case 2: ckey = "SerNr";
  end;
  TrHs = true;
  VIr.SerNr = -1;
  VIr.TransDate = startdate;
  while (LoopKey(ckey,VIr,1,TrHs)) begin
    switch (RepSpec.flags[6]) begin
      case 0:
        if (RepSpec.flags[16]!=0) then begin
          if (VIr.ServiceDelDate>enddate) then begin TrHs = false; end;
        end else begin
          if (VIr.TransDate>enddate) then begin TrHs = false; end;
        end;
      case 1:
        if (RepSpec.flags[16]!=0) then begin
          if (VIr.ServiceDelDate>enddate) then begin TrHs = false; end;
        end else begin
          if (VIr.InvDate>enddate) then begin TrHs = false; end;
        end;
      case 2:
        if (nonblank(RepSpec.f1)) then begin
          if (VIr.SerNr>toiv) then begin TrHs = false; end;
        end;
    end;
    if (TrHs) then begin
      testf = false;
      if (RepSpec.flags[16]!=0) then begin
        if (DateInRange(VIr.ServiceDelDate,startdate,enddate)) then begin
          testf = true;
        end;
      end else begin
        if (DateInRange(VIr.TransDate,startdate,enddate)) then begin
          testf = true;
        end;
      end;
      if (RepSpec.flags[15]!=0) then begin
        if (nonblankdate(VIr.RcvDate)) then begin
          if (DateInRange(VIr.RcvDate,startdate,enddate)==false) then begin
            testf = false;
          end;
        end;
      end;
      if (RepSpec.flags[16]!=0) then begin
        if (DateInRange(VIr.ServiceDelDate,startdate,enddate)==false) then begin
          testf = false;
        end;
      end;
      
      if (nonblank(RepSpec.f1)) then begin
        if (VIr.SerNr<friv) then begin
          testf = false;
        end;
        if (VIr.SerNr>toiv) then begin
          testf = false;
        end;
      end;      
      if (testf) then begin
        if (CheckVATVIExists(RepSpec,VIr.SerNr,startdate,enddate,VATVITRr)==false) then begin
          testf = false;
        end;
      end;
      if (true) then begin
        if (VIr.OKFlag==0) then begin
          testf = false;
        end;
      end;
      switch (exportflag) begin
        case 0: 
          if (VIr.ExportFlag!=0) then begin testf = false; end;
          if (RepSpec.flags[7]==0) then begin 
            if (VIr.ExportFlag==0) then begin testf = false; end;
          end;
        case 1: 
          if ((VIr.ExportFlag!=1) and (VIr.ExportFlag!=3)) then begin testf = false; end;
          if (RepSpec.flags[8]==0) then begin 
            if ((VIr.ExportFlag==1) or (VIr.ExportFlag==3)) then begin testf = false; end;
          end;
        case 2: 
          if ((VIr.ExportFlag!=2) and (VIr.ExportFlag!=4)) then begin testf = false; end;
          if (RepSpec.flags[9]==0) then begin 
            if ((VIr.ExportFlag==2) or (VIr.ExportFlag==4)) then begin testf = false; end;
          end;
      end;
      if (testf) then begin
        if (APAccb.OPBookVAT!=0) then begin
//          testf = PaymentInPeriod(VIr,startdate,enddate);
        end;
      end;
      if (testf) then begin
        VATVIr.VINr = VIr.SerNr;
        if (ReadFirstKey("VINr",VATVIr,1,true)) then begin
          test2f = true;
          if (VATVIr.OKFlag==0) then begin
            test2f = false;
          end;
          if (test2f) then begin
            if (VATVIr.TransDate<VIr.TransDate) then begin
              testf = false;
            end;
          end;
        end;
      end;
      if (testf) then begin
        if (VIr.OPBookVAT!=0) then begin
//          APr.SerNr = VIr.SerNr;
//          ReadFirstMain(APr,1,true);
//          if (APr.RVal>=VIr.PayVal) then begin testf = false; end;
          testf = false;
        end;
      end;
      if (testf) then begin
        if (NoVAT!=0) then begin
          RecordNew(VATr);
          SetupVATArray(VATr,1);
          RecordNew(VATNor);
          SetupVATArray(VATNor,2);
        end else begin
          RecordNew(VATr);
          SetupVATArray(VATr,0);
        end;
        if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin//this
          AddVIToVATArray(VIr,VATr,inclvat,-VIr.VATVal,VIr.Invalid,BCb,true,UseTaxTemplatesforTaxCalcf);
          if (NoVAT!=0) then begin
            AddVIToVATArray(VIr,VATNor,inclvat,-VIr.VATVal,VIr.Invalid,BCb,true,UseTaxTemplatesforTaxCalcf);
          end;
        end else begin
          AddVIToVATArray(VIr,VATr,inclvat,VIr.VATVal,VIr.Invalid,BCb,true,UseTaxTemplatesforTaxCalcf);
          if (NoVAT!=0) then begin
            AddVIToVATArray(VIr,VATNor,inclvat,VIr.VATVal,VIr.Invalid,BCb,true,UseTaxTemplatesforTaxCalcf);
          end;
        end;
        if (CountRows(VATr)>0) then begin
          if (RepSpec.ArtMode==1) then begin
            PrintVIData(RepSpec,VIr,VATVITRr,lpnr,inclvat,vivatval,firstvif,RepSpec.flags[12]!=0);
          end;
          if (VIr.Invalid==0) then begin
            AddVATToVATArray(VATr,PeriodVATr);
            AddVATToVATArray2(RepSpec.FirstAcc,VATr,TotVATr,AssetTotVATr);
            AddVATToVATArray(VATr,VIVATr);
            if (NoVAT!=0) then begin
              AddVATToVATArray(VATNor,PeriodVATNor);
              AddVATToVATArray2(RepSpec.FirstAcc,VATNor,TotVATNor,DummyVATr);
              AddVATToVATArray(VATNor,VIVATNor);
            end;
          end;
          if (RepSpec.ArtMode==1) then begin
            if (NoVAT!=0) then begin
              PrintVATArray(RepSpec,VATr,true,false,UseTaxTemplatesforTaxCalc);
              PrintVATArray(RepSpec,VATNor,true,false,UseTaxTemplatesforTaxCalc);
            end else begin
              PrintVATArray(RepSpec,VATr,true,false,UseTaxTemplatesforTaxCalc);
            end;
            Gray_Divider(0,1);
          end;
        end;
      end;
    end;
  end;
  if (NoVAT!=0) then begin
    PrintVATArray(RepSpec,VIVATr,true,false,UseTaxTemplatesforTaxCalc);
    PrintVATArray(RepSpec,VIVATNor,true,false,UseTaxTemplatesforTaxCalc);
  end else begin
    PrintVATArray(RepSpec,VIVATr,true,false,UseTaxTemplatesforTaxCalc);
  end;
  Gray_Divider(0,4);
  RETURN;
END;

function Boolean IsOrigVIinReportPeriod(record RcVc RepSpec,LongInt vatvinr)
BEGIN
  Boolean res;
  record VATVIVc VATVIr;
  
  res = true;
  VATVIr.SerNr = vatvinr;
  if (ReadFirstMain(VATVIr,1,true)) then begin
//    if (DateInRange(VATVIr.VITransDate,RepSpec.sStartDate,RepSpec.sEndDate)) then begin
    if (VATVIr.VITransDate>RepSpec.sEndDate) then begin
      res = false;
    end;
    if (VATVIr.OKFlag==0) then begin
      res = false;
    end;
  end;
  IsOrigVIinReportPeriod = res;
  RETURN;
END;

procedure PLVATCorrections(record SMVc TotVATr,record SMVc AssetTotVATr,record SMVc PeriodVATr,record RcVc RepSpec,Date startdate,Date enddate,var LongInt lpnr,Integer nr,Integer exportflag,
                           Integer NoVAT,record SMVc TotVATNor,record SMVc PeriodVATNor)
BEGIN
  record SMVc VATr;
  record VATVIVc VATVIr;
  Boolean TrHs,testf;
  Integer inclvat;
  LongInt friv,toiv;
  string 20 ckey;
  record SMVc VATNor;
  record SMVc DummyVATr;

  friv = FirstInRange(RepSpec.f1,10);
  toiv = LastInRange(RepSpec.f1,10);
  switch (RepSpec.flags[6]) begin
    case 0: ckey = "TransDate";
    case 1: ckey = "VIInvDate";
    case 2: ckey = "SerNr";
  end;
  VATVIr.SerNr = -1;
  TrHs = true;
  VATVIr.TransDate = startdate;
  while (LoopKey(ckey,VATVIr,1,TrHs)) begin
    if (TrHs) then begin
      testf = false;
      if (DateInRange(VATVIr.TransDate,startdate,enddate)) then begin
        testf = true;
      end;
      if (nonblank(RepSpec.f1)) then begin
        if (VATVIr.SerNr<friv) then begin
          testf = false;
        end;
        if (VATVIr.SerNr>toiv) then begin
          testf = false;
        end;
      end;  
      if (nr!=0) then begin  
        if (IsOrigVIinReportPeriod(RepSpec,VATVIr.SerNr)==false) then begin
          testf = false;
        end;
      end;
      if (nr!=1) then begin
        if (VATVIr.VITransDate==VATVIr.TransDate) then begin
          testf = false;
        end;
      end;      
      switch (exportflag) begin
        case 0: 
          if (VATVIr.ExportFlag!=0) then begin testf = false; end;
          if (RepSpec.flags[7]==0) then begin 
            if (VATVIr.ExportFlag==0) then begin testf = false; end;
          end;
        case 1: 
          if ((VATVIr.ExportFlag!=1) and (VATVIr.ExportFlag!=3)) then begin testf = false; end;
          if (RepSpec.flags[8]==0) then begin 
            if ((VATVIr.ExportFlag==1) or (VATVIr.ExportFlag==3)) then begin testf = false; end;
          end;
        case 2: 
          if ((VATVIr.ExportFlag!=2) and (VATVIr.ExportFlag!=4)) then begin testf = false; end;
          if (RepSpec.flags[9]==0) then begin 
            if ((VATVIr.ExportFlag==2) or (VATVIr.ExportFlag==4)) then begin testf = false; end;
          end;
      end;
      if (VATVIr.OKFlag==0) then begin
        testf = false;
      end;
      if (testf) then begin
        if (NoVAT!=0) then begin
          RecordNew(VATr);
          SetupVATArray(VATr,1);
          RecordNew(VATNor);
          SetupVATArray(VATNor,2);
        end else begin
          RecordNew(VATr);
          SetupVATArray(VATr,0);
        end;
        if (PrintVATVIData(RepSpec,lpnr,inclvat,nr,VATVIr)) then begin
          if (VATVIr.InvType==kInvoiceTypeCredit or VATVIr.InvType==kInvoiceTypeCreditSpecialSales) then begin//this
            VIAddVATTRToVATArray(VATVIr,VATr,inclvat,-VATVIr.VATVal);
            if (NoVAT!=0) then begin
              VIAddVATTRToVATArray(VATVIr,VATNor,inclvat,-VATVIr.VATVal);
            end;
          end else begin
            VIAddVATTRToVATArray(VATVIr,VATr,inclvat,VATVIr.VATVal);
            if (NoVAT!=0) then begin
              VIAddVATTRToVATArray(VATVIr,VATNor,inclvat,VATVIr.VATVal);
            end;
          end;
          if (VATVIr.Invalid==0) then begin
            if (NoVAT!=0) then begin
              AddVATToVATArray(VATr,PeriodVATr);
              AddVATToVATArray2(RepSpec.FirstAcc,VATr,TotVATr,AssetTotVATr);
              AddVATToVATArray(VATNor,PeriodVATNor);
              AddVATToVATArray2(RepSpec.FirstAcc,VATNor,TotVATNor,DummyVATr);
            end else begin
              AddVATToVATArray(VATr,PeriodVATr);
              AddVATToVATArray2(RepSpec.FirstAcc,VATr,TotVATr,AssetTotVATr);
            end;
          end;
          if (RepSpec.ArtMode==1) then begin
            PrintVATArray(RepSpec,VATr,true,false,UseTaxTemplatesforTaxCalc);
            if (NoVAT!=0) then begin
              PrintVATArray(RepSpec,VATNor,true,false,UseTaxTemplatesforTaxCalc);
            end;
            Gray_Divider(0,1);
          end;
        end;
      end;
    end;
  end;  
  RETURN;
END;

procedure PrepareExpense(record ExpVc Expr,record ExpVc tmpExpr)
BEGIN
  row ExpVc Exprw;
  row ExpVc tmpExprw;
  Integer i,rwcnt,j;
  Integer tmpi;
  Array string 200 adocnr;
  Integer acnt,ai;
  Boolean testf;
  
  RecordCopy(tmpExpr,Expr);  
  rwcnt = MatRowCnt(tmpExpr);
  while (rwcnt>0) begin
    MatRowDelete(tmpExpr,0);
    rwcnt = rwcnt - 1;
  end;
  rwcnt = MatRowCnt(Expr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Expr,i,Exprw);
    if (nonblank(Exprw.VATCode)) then begin
      if (blank(Exprw.DocNr)) then begin
        MatRowPut(tmpExpr,tmpi,Exprw);
        tmpi = tmpi + 1;
      end else begin
        testf = true;
        for (ai=0;ai<acnt;ai=ai+1) begin
          if (adocnr[ai]==Exprw.DocNr) then begin
            testf = false;
            ai = acnt;
          end;
        end;
        if (testf) then begin
          MatRowPut(tmpExpr,tmpi,Exprw);
          tmpi = tmpi + 1;
          adocnr[acnt] = Exprw.DocNr;
          acnt = acnt + 1;
          for (j=i+1;j<rwcnt;j=j+1) begin
            MatRowGet(Expr,j,tmpExprw);
            if (tmpExprw.DocNr==Exprw.DocNr) then begin
              MatRowPut(tmpExpr,tmpi,tmpExprw);
              tmpi = tmpi + 1;
            end;
          end;
        end;
      end;
    end;
  end;
  RETURN;
END;

procedure ExpRecords(record SMVc TotVATr,record SMVc PeriodVATr,record RcVc RepSpec,Date startdate,Date enddate,Integer exportflag)
BEGIN
  Boolean TrHs,testf,printexpf,printexpdataf;
  record SMVc VATr;
  record SMVc ExpVATr;
  record SMVc TotExpVATr;
  record ExpVc Expr;
  row ExpVc Exprw;
  record ExpVc tmpExpr;
  record TRVc TRr;
  record TRVc tmpTRr;
  row TRVc tmpTRrw;
  LongInt frexp,toexp,lpnr;
  record BaseCurBlock BCb;
  Integer inclvat,res;
  Integer i,rwcnt;
  string 20 lastvecode,lastdocnr;

  lpnr = 1;
  BlockLoad(BCb);
  SetupVATArray(TotExpVATr,0);
  frexp = FirstInRange(RepSpec.f1,10);
  toexp = LastInRange(RepSpec.f1,10);
  StartFormat(15);
   OutString(0,0,USetStr(10670),false);
  EndFormat;
  
  TrHs = true;
  Expr.TransDate = startdate;
  while (LoopKey("TransDate",Expr,1,TrHs)) begin
    if (TrHs) then begin
      testf = false;
      if (DateInRange(Expr.TransDate,startdate,enddate)) then begin
        testf = true;
      end;
    end;
    if (Expr.OKFlag==0) then begin testf = false; end;
    if (testf) then begin
      lastvecode = "ZZZZZZZZZZZZZZZZZZZZ";
      printexpf = false;
      printexpdataf = true;
      RecordNew(VATr);
      RecordNew(ExpVATr);
      SetupVATArray(ExpVATr,0);
      RecordNew(VATr);
      SetupVATArray(VATr,0);
      PrepareExpense(Expr,tmpExpr);
      rwcnt = MatRowCnt(tmpExpr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(tmpExpr,i,Exprw);
        if (nonblank(Exprw.VATCode)) then begin
          if (lastvecode!="ZZZZZZZZZZZZZZZZZZZZ") then begin
            if (nonblank(Exprw.VECode)) then begin
              if (lastvecode==Exprw.VECode) and ((blank(Exprw.DocNr)) or (lastdocnr==Exprw.DocNr)) then begin
                printexpdataf = false;
              end else begin
                printexpdataf = true;
              end;
            end;
          end;
          PrintExpData(RepSpec,exportflag,tmpExpr,Exprw,inclvat,lpnr,VATr,BCb,lastvecode,ExpVATr,TotVATr,PeriodVATr,printexpf,printexpdataf);
          lastdocnr = Exprw.DocNr;
        end;
      end;
      if (RepSpec.ArtMode==1) then begin
        PrintVATArray(RepSpec,VATr,false,false,UseTaxTemplatesforTaxCalc);
      end;
      if (tmpExpr.Invalid==0) then begin
        AddVATToVATArray(VATr,ExpVATr);
        AddVATToVATArray(ExpVATr,TotExpVATr);
        AddVATToVATArray(VATr,TotVATr);
        AddVATToVATArray(VATr,PeriodVATr);
      end;
      if (printexpf) then begin
        if (RepSpec.ArtMode==1) then begin
          PrintVATArray(RepSpec,ExpVATr,false,false,UseTaxTemplatesforTaxCalc);
        end;
        Gray_Divider(0,1);
      end;
    end;
  end;
  PrintVATArray(RepSpec,TotExpVATr,true,false,UseTaxTemplatesforTaxCalc);
  Gray_Divider(0,4);
  RETURN;
END;

procedure PLVATRecords(record SMVc TotVATr,record SMVc AssetTotVATr,record RcVc RepSpec,Date startdate,Date enddate,Integer nr,Integer exportflag,Integer NoVAT,
                       record SMVc TotVATNor,Boolean UseTaxTemplatesforTaxCalcf)
BEGIN
  Boolean TrHs;
  record SMVc PeriodVATr;
  record SMVc PeriodVATNor;
  LongInt lpnr;

  if (NoVAT!=0) then begin
    RecordNew(PeriodVATr);
    SetupVATArray(PeriodVATr,1);
    RecordNew(PeriodVATNor);
    SetupVATArray(PeriodVATNor,2);
  end else begin
    RecordNew(PeriodVATr);
    SetupVATArray(PeriodVATr,0);
  end;
  StartFormat(15);
   OutString(0,0,USetStr(10664+nr),false);
  EndFormat; 
  Gray_Divider(0,4);
  lpnr = 1;
  PLVATCorrections(TotVATr,AssetTotVATr,PeriodVATr,RepSpec,startdate,enddate,lpnr,nr,exportflag,NoVAT,TotVATNor,PeriodVATNor);
  if (nr==1) then begin
    PLVATInvoices(TotVATr,AssetTotVATr,PeriodVATr,RepSpec,startdate,enddate,lpnr,exportflag,NoVAT,TotVATNor,PeriodVATNor,UseTaxTemplatesforTaxCalcf);
    PLVATPayments(TotVATr,AssetTotVATr,PeriodVATr,RepSpec,startdate,enddate,lpnr,exportflag,NoVAT,TotVATNor,PeriodVATNor,UseTaxTemplatesforTaxCalcf);
    RepSpec.flags[11] = 1;
    SLVATInternalInvoices(TotVATr,PeriodVATr,RepSpec,startdate,enddate,lpnr,exportflag,false);
    if (RepSpec.flags[3]==0) then begin
      ExpRecords(TotVATr,PeriodVATr,RepSpec,RepSpec.sStartDate,RepSpec.sEndDate,exportflag);
    end;
  end;
  StartFormat(15);
  switch (nr) begin
   case 0:
     OutString(0,0,USetStr(10669) & " " & USetStr(10664+nr),false);
   case 1:
     OutString(0,0,USetStr(10669) & " " & USetStr(10664+nr),false);
   case 2:
     OutString(0,0,USetStr(10669) & " " & USetStr(10664+nr),false);
  end;
  EndFormat;
  if (NoVAT!=0) then begin
    PrintVATArray(RepSpec,PeriodVATr,true,false,UseTaxTemplatesforTaxCalc);
    PrintVATArray(RepSpec,PeriodVATNor,true,false,UseTaxTemplatesforTaxCalc);
  end else begin
    PrintVATArray(RepSpec,PeriodVATr,true,false,UseTaxTemplatesforTaxCalc);
  end;
  Black_Divider(0,1);
  RETURN;
END;

procedure PLVATRepRnRun(record RcVc RepSpec,Integer NoVAT)
BEGIN
  Date sd,ed;
  record SMVc TotVATr;
  record SMVc NextPerVATr;
  record SMVc AssetTotVATr;
  record SMVc AssetNextPerVATr;
  Date blankd;
  record SMVc TotVATNor;
  record SMVc NextPerVATNor;
  record SMVc TotTotVATr;
  Boolean UseTaxTemplatesforTaxCalcf,printtotf;

  UseTaxTemplatesforTaxCalcf = UseTaxTemplatesforTaxCalc;
  RecordNew(TotTotVATr);
  SetupVATArray(TotTotVATr,1);  

  StartFormat(15);
  OutString(0,0,USetStr(10697),false);
  EndFormat;
  RecordNew(TotVATr);
  RecordNew(NextPerVATr);
  if (NoVAT!=0) then begin
    SetupVATArray(TotVATr,1);  
    SetupVATArray(TotVATNor,2);  
    SetupVATArray(NextPerVATr,1);  
    SetupVATArray(NextPerVATNor,2);  
  end else begin
    SetupVATArray(TotVATr,0);  
    SetupVATArray(NextPerVATr,0);  
  end;
  SetupVATArray(AssetTotVATr,NoVAT);  
  SetupVATArray(AssetNextPerVATr,NoVAT);  
  PLVATRecords(TotVATr,AssetTotVATr,RepSpec,RepSpec.sStartDate,RepSpec.sEndDate,0,0,NoVAT,TotVATNor,UseTaxTemplatesforTaxCalcf);    
  PLVATRecords(TotVATr,AssetTotVATr,RepSpec,RepSpec.sStartDate,RepSpec.sEndDate,1,0,NoVAT,TotVATNor,UseTaxTemplatesforTaxCalcf);
  sd = AddDay(RepSpec.sEndDate,1);
  ed = blankd;
  PLVATRecords(NextPerVATr,AssetNextPerVATr,RepSpec,sd,ed,2,0,NoVAT,NextPerVATNor,UseTaxTemplatesforTaxCalcf);  
  StartFormat(15);
   OutString(0,0,USetStr(10667),false);
  EndFormat;
  Gray_Divider(0,1);
  if (NoVAT!=0) then begin
    PrintVATArray(RepSpec,TotVATr,true,false,UseTaxTemplatesforTaxCalc);
    PrintVATArray(RepSpec,TotVATNor,true,false,UseTaxTemplatesforTaxCalc);
  end else begin
    PrintVATArray(RepSpec,TotVATr,true,false,UseTaxTemplatesforTaxCalc);
  end;
  AddVATToVATArray(TotVATr,TotTotVATr);
  PrintVATArray(RepSpec,AssetTotVATr,true,false,UseTaxTemplatesforTaxCalc);
  StartFormat(15);
   OutString(0,0,USetStr(10671),false);
  EndFormat;
  PrintVATArray(RepSpec,TotVATr,true,true,UseTaxTemplatesforTaxCalc);


  if (RepSpec.flags[8]!=0) then begin
    StartFormat(15);
    EndFormat;
    StartFormat(15);
    OutString(0,0,USetStr(10698),false);
    EndFormat;
    Gray_Divider(0,1);
    RecordNew(TotVATr);
    RecordNew(NextPerVATr);
    SetupVATArray(TotVATr,NoVAT);  
    SetupVATArray(NextPerVATr,NoVAT);  
    PLVATRecords(TotVATr,AssetTotVATr,RepSpec,RepSpec.sStartDate,RepSpec.sEndDate,0,1,NoVAT,TotVATNor,UseTaxTemplatesforTaxCalcf);    
    PLVATRecords(TotVATr,AssetTotVATr,RepSpec,RepSpec.sStartDate,RepSpec.sEndDate,1,1,NoVAT,TotVATNor,UseTaxTemplatesforTaxCalcf);
    sd = AddDay(RepSpec.sEndDate,1);
    ed = blankd;
    PLVATRecords(NextPerVATr,AssetNextPerVATr,RepSpec,sd,ed,2,1,NoVAT,TotVATNor,UseTaxTemplatesforTaxCalcf);  
    StartFormat(15);
     OutString(0,0,USetStr(10667),false);
    EndFormat;
    Gray_Divider(0,1);
    PrintVATArray(RepSpec,TotVATr,true,false,UseTaxTemplatesforTaxCalc);
    PrintVATArray(RepSpec,AssetTotVATr,true,false,UseTaxTemplatesforTaxCalc);
    StartFormat(15);
     OutString(0,0,USetStr(10671),false);
    EndFormat;
    PrintVATArray(RepSpec,TotVATr,true,true,UseTaxTemplatesforTaxCalc);
    AddVATToVATArray(TotVATr,TotTotVATr);
    printtotf = true;
  end;
  if (RepSpec.flags[9]!=0) then begin
    StartFormat(15);
    EndFormat;
    StartFormat(15);
    OutString(0,0,USetStr(10699),false);
    EndFormat;
    RecordNew(TotVATr);
    RecordNew(NextPerVATr);
    SetupVATArray(TotVATr,NoVAT);  
    SetupVATArray(NextPerVATr,NoVAT);  
    PLVATRecords(TotVATr,AssetTotVATr,RepSpec,RepSpec.sStartDate,RepSpec.sEndDate,0,2,NoVAT,TotVATNor,UseTaxTemplatesforTaxCalcf);    
    PLVATRecords(TotVATr,AssetTotVATr,RepSpec,RepSpec.sStartDate,RepSpec.sEndDate,1,2,NoVAT,TotVATNor,UseTaxTemplatesforTaxCalcf);
    sd = AddDay(RepSpec.sEndDate,1);
    ed = blankd;
    PLVATRecords(NextPerVATr,AssetNextPerVATr,RepSpec,sd,ed,2,2,NoVAT,TotVATNor,UseTaxTemplatesforTaxCalcf);  
    StartFormat(15);
     OutString(0,0,USetStr(10667),false);
    EndFormat;
    Gray_Divider(0,1);
    PrintVATArray(RepSpec,TotVATr,true,false,UseTaxTemplatesforTaxCalc);
    PrintVATArray(RepSpec,AssetTotVATr,true,false,UseTaxTemplatesforTaxCalc);
    StartFormat(15);
     OutString(0,0,USetStr(10671),false);
    EndFormat;
    PrintVATArray(RepSpec,TotVATr,true,true,UseTaxTemplatesforTaxCalc);
    AddVATToVATArray(TotVATr,TotTotVATr);
    printtotf = true;
  end;

  PrintVATArray(RepSpec,AssetTotVATr,true,true,UseTaxTemplatesforTaxCalc);
  if (printtotf) then begin
    StartFormat(15);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(10674),false);
    EndFormat;
    Gray_Divider(0,1);
    PrintVATArray(RepSpec,TotTotVATr,true,false,UseTaxTemplatesforTaxCalc);
    StartFormat(15);
     OutString(0,0,USetStr(10671),false);
    EndFormat;
    PrintVATArray(RepSpec,TotTotVATr,true,true,UseTaxTemplatesforTaxCalc);
  end;
  return;
end;

global
procedure PLVATRepRn(record RcVc RepSpec)
BEGIN
  
//  if (ProperVATPeriod(RepSpec)==false) then begin
//    MessageBox(10693,"");
//    goto LPLVATRepRn;
//  end;
  StartReportJob(USetStr(10650));
  PrintHeader1(RepSpec);
  EndHeader;
  PrintHeader2;
  
  PLVATRepRnRun(RepSpec,RepSpec.flags[13]);
  EndJob;
LPLVATRepRn:;
  RETURN;
END;

//__________________

