external function boolean SalesGroupExistWithinUsersList(string,string);
external procedure HTItemClass(string,var string);
external function Boolean SetInSet2(string,string);
external function val TaxMatrixVATTotal(record TaxMatrixVc);
external function Boolean UseTaxTemplatesforTaxCalc();
external procedure GetVATRow(string,var row VATCodeBlock);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external function Boolean HasModSO();
external function Boolean HasObjects();

external procedure GetVATRowFromBlock(string,record VATCodeBlock,var row VATCodeBlock);
external procedure HT2Per2(Integer, Date, Date , var string);
external function Boolean HasMultiCurrency();
external function val FindVAT(string,val,Integer,Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure Split2Str2(string,var string,var string,Integer);
external function string 255 CreateInvoiceNumber(LongInt,string);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure BeginCurncyTotals(var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external procedure PrintCurncyTotalsToFile(array string,array val,array val,array val,Integer,Integer,Integer,
                                  Integer,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);

external procedure HTInv(string, var string);
external procedure HTDetailLevel(Integer, var string);
external procedure HTInvTypes(Integer,Integer,Integer,Integer, var string);
external procedure HTOKF(Integer,Integer, var string);
external procedure HTSaleMan(string,var string);
external procedure HTCustCat(string,var string);
external procedure HTLocations(string, string, var string);
external procedure HTObj(string,var string);
external procedure HTCustClass(string,var string);
external procedure HTCustClassType(string,var string);
external procedure ClassTypef(string,string,var boolean);
external procedure HT2Per(Date, Date , var string);
external function Integer TypeOfCurncy(var string,var Integer);
external procedure GetFullCurncyRateText(Boolean,var string,val,val,val,val,val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);

function string 255 GetRateAsText(string curncycode,Date td)
begin
  Integer oldstyle;
  string 255 res;
  val from,to1,to2,base1,base2;

  GetFullCurncyRate(curncycode,td,from,to1,to2,base1,base2);  
  if (TypeOfCurncy(curncycode,oldstyle)==0) then begin
    GetFullCurncyRateText(true,res,from,to1,to2,base1,base2);
  end else begin
    GetFullCurncyRateText(false,res,from,to1,to2,base1,base2);
  end;
  GetRateAsText = res;
  return;
end;

function string 255 GetRateText(string curncycode,val from,val to1,val to2,val base1,val base2)
begin
  Integer oldstyle;
  string 255 res;
  
  if (TypeOfCurncy(curncycode,oldstyle)==0) then begin
    GetFullCurncyRateText(true,res,from,to1,to2,base1,base2);
  end else begin
    GetFullCurncyRateText(false,res,from,to1,to2,base1,base2);
  end;
  GetRateText = res;
  return;
end;

procedure HTOT(string objcode,var string tstr)
begin
  record OTVc OTr;

  OTr.Code = objcode;
  if (ReadFirstMain(OTr,1,true)) then begin
    tstr = USetStr(3016);
    tstr = tstr & OTr.Code;
    if (nonblank(OTr.Comment)) then begin
      tstr = tstr & "  ";
      tstr = tstr & OTr.Comment;
    end;
  end;
  return;
end;

procedure PrintInvListTotals(string BaseCur1,string BaseCur2,Integer bc1pos,val bc1ivtot,val bc2ivtot,val bc1exvattot,val bc2exvattot)
begin
  Gray_Divider(290,1);
  StartFormat(15);
  OutString(290,0,USetStr(2357),false);
  OutVal(bc1pos,0,bc1exvattot,M4Val,true);
  OutVal(460,0,bc1ivtot,M4Val,true);
  OutString(465,0,BaseCur1,false);
  EndFormat;
  if (BaseCur1<>BaseCur2) then begin
    StartFormat(15);
    OutString(290,0,USetStr(2357),false);
    OutVal(bc1pos,0,bc2exvattot,M4Val,true);
    OutVal(460,0,bc2ivtot,M4Val,true);
    OutString(465,0,BaseCur2,false);
    EndFormat;
  end;
  return;
end;

procedure PrintInvoiceHeader(record RcVc RepSpec,record IVVc IVr,var LongInt runnr)
begin
  string 255 tstr;
  
  StartFormat(15);
//  OutLongInt(0,0,runnr,false);
  runnr = runnr + 1;
  OutString(0,"DblCustPS2",CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr),false);
  tstr = "";
  if (IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeNormalSpecialSales) then begin
    tstr = USetStr(1803);
  end;
  if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
    tstr = USetStr(1804);
  end;
  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
    tstr = USetStr(1805);
  end;
  if (IVr.InvType==kInvoiceTypeInterest) then begin
    tstr = USetStr(1810);
  end;
  if (IVr.InvType==kInvoiceTypeDebit) then begin
    tstr = USetStr(23250);
  end;
  if (IVr.InvType==kInvoiceTypePrepayment) then begin
    tstr = USetStr(1806);
  end;
  if (IVr.InvType==kInvoiceTypeDownpayment) then begin
    tstr = USetStr(1818);
  end;
  OutString(70,0,tstr,false);
  OutDate(150,0,IVr.InvDate,false);
  OutDate(220,0,IVr.PayDate,false);
  OutDate(290,0,IVr.TransDate,false);
  OutLongInt(350,0,IVr.OrderNr,false);
  if (IVr.OKFlag==0) then begin
    OutString(480,0,USetStr(2366),true);
  end;
  EndFormat;
  StartFormat(15);
  OutString(70,0,IVr.CustCode,false);
  if (RepSpec.flags[16]!=0) then begin
    if (nonblank(IVr.OfficialSerNr)) then begin
      OutString(150,0,IVr.OfficialSerNr,false);
    end;
  end;
  OutString(220,0,IVr.Addr0,false);
  if (HasMultiCurrency) then begin 
    OutString(460,0,IVr.CurncyCode,false);
  end;
  EndFormat;
  StartFormat(15);
  OutString(70,0,IVr.CustCat,false);
  OutString(220,0,IVr.Addr1,false);
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(70,0,IVr.OurContact,false);
  OutString(220,0,IVr.Addr2,false);
  EndFormat;
  if (nonblank(IVr.Addr3)) then begin
    StartFormat(15);
    OutString(70,0,USetStr(3504),false);
    OutString(220,0,IVr.Addr3,false);
    EndFormat;
  end;
  if (IVr.ClientContact<>"") then begin
    StartFormat(15);
    OutString(220,0,IVr.ClientContact,false);
    EndFormat;
  end;
/*  
  if (IVr.CurncyCode<>"") then begin
    StartFormat(15);
    OutString(460,0,IVr.CurncyCode,true);
    EndFormat;
  end;
*/  
  return;
end;

procedure RepInvoice(record RcVc RepSpec,record AccBlock ARb,record DownPayBlock DPb,record IVVc IVr,Integer com,string stext,string items,string rwobjects,string vatcodes,var val bc1ivtot,var val bc2ivtot,
                     var val bc1exvattot,var val bc2exvattot,var LongInt runnr,
                     Array string acur,Array val av1,Array val av2,Integer curcnt)
begin
  row IVVc IVrw;
  string 255 tstr,t2;
  Integer i,rwcnt;
  val qty,sum1,sum3;
  string 20 frit,toit;
  string 20 frin,toin;
  Boolean invheaderprntdf;  
  record INVc INr;
  Boolean testf;
  val s1,s3;
  string 255 frsacc,tosacc;
  record TaxMatrixVc TMr;
  record SMVc VATr;
  row SMVc VATrw;
  Integer vcnt;
  val vatv,t1;
  
  frin = FirstInRange(items,20);
  toin = LastInRange(items,20);
  frit = FirstInRange(stext,20);
  toit = LastInRange(stext,20);
  frsacc = FirstInRange(RepSpec.f7,10);
  tosacc = LastInRange(RepSpec.f7,10);
  qty = 0;


  SetupVATBase(VATr,vcnt);
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypeSubtotal) then begin goto LSKIPIVROW; end;
    if (IVrw.stp==kInvoiceRowTypeGiftVoucherPayment) then begin goto LSKIPIVROW; end;
    if (IVrw.stp==kInvoiceRowTypeCashPayment) then begin goto LSKIPIVROW; end;
    if (IVrw.stp==kInvoiceRowTypeCreditCardPayment) then begin goto LSKIPIVROW; end;
    if (IVrw.stp==kInvoiceRowTypeChequePayment) then begin goto LSKIPIVROW; end;
    testf = true;
    if (nonblank(items)) then begin
      testf = false;
      if (IVrw.ArtCode>=frin) and (IVrw.ArtCode<=toin) then begin 
        testf = true;    
      end;
    end;
    if (testf) then begin
      if (nonblank(Stext)) then begin
        testf = false;
        if (ReadFirstItem(IVrw.ArtCode,INr,true,true)) then begin
          if (INr.Group>=frit) then begin 
            if (INr.Group<=toit) then begin
              testf = true;
            end;
          end;
        end;
      end;
      if (testf and nonblank(RepSpec.Comment)) then begin
        testf = false;
        if (ReadFirstItem(IVrw.ArtCode,INr,true,true)) then begin
          if SetInSet2(RepSpec.Comment,INr.DispGroups) then begin          
            testf = true;
          end;
        end;
      end;
    end;
    if (testf and nonblank(rwobjects)) then begin
      testf = false;
      if (SetInSet2(rwobjects,IVrw.Objects)) then begin 
        testf = true;    
      end;
    end;
    if (testf) then begin
      testf = false;
      if (SetInSet2(vatcodes,IVrw.VATCode)) then begin 
        testf = true;    
      end;
    end;
    if (testf) then begin
      if (nonblank(RepSpec.f7)) then begin
        if (IVrw.SalesAcc<frsacc) or (IVrw.SalesAcc>tosacc) then begin
          testf = false;
        end; 
      end;
    end;
    if (testf==false) then begin goto LSKIPIVROW; end;
    AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,blankval,vcnt,IVr.InclVAT,IVr.NoTAXonVAT);
    s1 = 0;
    s3 = 0;
    if (invheaderprntdf==false) then begin
      PrintInvoiceHeader(RepSpec,IVr,runnr);
      invheaderprntdf = true;
    end;
    if (IVrw.stp==kInvoiceRowTypeCredit) then begin
      StartFormat(15);
      t2 = USetStr(1807);
      tstr = CreateInvoiceNumber(IVrw.OrdRow,IVrw.CredOfficialSerNr);
      t2 = t2 & tstr;
      OutString(130,0,t2,false);
      EndFormat;
    end;    
    if ((IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeCorrection) or (IVrw.stp==kInvoiceRowTypeInterest)) then begin
      s1 = IVrw.Sum;
      if (UseTaxTemplatesforTaxCalc)  then begin
        UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
        s3 = TaxMatrixVATTotal(TMr);
      end else begin
        s3 = FindVAT(IVrw.VATCode,IVrw.Sum,IVr.InclVAT,IVr.NoTAXonVAT);
      end;
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) and (IVrw.stp!=kInvoiceRowTypeCorrection) then begin
        s1 = -s1;
        s3 = -s3;
        IVrw.Quant = -IVrw.Quant;
      end;
      StartFormat(15);
      qty = qty + IVrw.Quant;
      OutString(20,0,IVrw.ArtCode,false);
      OutValBiDi(104,0,IVrw.Quant,M4UVal,true,139);
      OutString(110,0,IVrw.Spec,false);
      OutVal(350,0,IVrw.Price,M423Val,true);
      OutVal(380,0,IVrw.vRebate,M41Val,true);
      OutVal(460,0,s1,M4Val,true);
      OutString(480,0,IVrw.VATCode,true);
      EndFormat;
    end;
    if (IVrw.stp==kInvoiceRowTypeDownpayment) then begin
      StartFormat(15);
      OutString(20,0,USetStr(4869),false);
      OutString(130,0,IVrw.Spec,false);
      OutVal(460,0,s1,M4Val,true);
      OutString(480,0,IVrw.VATCode,true);
      EndFormat;
      s1 = IVrw.Sum;
      s3 = FindVAT(IVrw.VATCode,IVrw.Sum,IVr.InclVAT,IVr.NoTAXonVAT);
    end;
    if (ARb.BookVATOnlyFromDownpayment!=0) and (DPb.DetailsOnIV!=0) then begin
      if (IVr.InvType==kInvoiceTypeDownPayment) then begin
        sum1 = sum1 + blankval;
        sum3 = sum3 + s3;
      end else begin
      end;
    end else begin
      sum1 = sum1 + s1;
      sum3 = sum3 + s3;
    end;
LSKIPIVROW:;    
  end;
  for (i=0;i<vcnt;i=i+1) begin
    MatRowGet(VATr,i,VATrw);
    MulVATIV(VATrw.VATCode,VATrw.DebVal,vatv,t1,IVr.InclVAT,IVr.NoTAXonVAT);
    if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
      VATrw.DebVal = -VATrw.DebVal;
      vatv = -vatv;
    end;
    if (IVr.InclVAT==0) then begin
      AddCurncyTotals(acur,av1,curcnt,IVr.CurncyCode,VATrw.DebVal+vatv);
      AddCurncyTotals(acur,av2,curcnt,IVr.CurncyCode,VATrw.DebVal);
    end else begin
      AddCurncyTotals(acur,av1,curcnt,IVr.CurncyCode,VATrw.DebVal);
      AddCurncyTotals(acur,av2,curcnt,IVr.CurncyCode,VATrw.DebVal-vatv);
    end;
  end;

  if (invheaderprntdf) then begin
    if (IVr.FrPrice<>0) then begin
      StartFormat(15);
      OutString(20,0,IVr.FrItem,false);
      OutString(104,0,"1",true);
      OutVal(350,0,IVr.FrPrice,M4Val,true);
      OutVal(460,0,IVr.FrPrice,M4Val,true);
      OutString(480,0,IVr.FrVATCode,true);
      EndFormat;
    end;
    Black_Divider(380,460);
    StartFormat(15);
    if (IVr.ExportFlag!=0) then begin
      OutString(20,0,USetStr(2367),false);
    end;
/*    
    if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
      sum1 = -IVr.Sum1;
      sum3 = -IVr.Sum3;
    end else begin
      sum1 = IVr.Sum1;
      sum3 = IVr.Sum3;
    end;
*/    
    OutString(70,0,USetStr(2645),false);
    if (HasObjects) then begin
      OutString(150,0,USetStr(3185),false);
    end;
    OutString(230,0,USetStr(6707),false);
    if (IVr.TAX1Sum!=blankval) then begin
      OutString(320,0,"TAX",true);    
    end;
    OutVal(460,0,sum1,M4Val,true);//280   
    EndFormat;
    StartFormat(15);
    OutValBiDi(104,0,qty,M4UVal,true,139);
    if (HasObjects) then begin
      OutString(150,0,IVr.Objects,false);
    end;
    OutValBiDi(230,0,sum3,M4Val,false,316);
    if (IVr.TAX1Sum!=blankval) then begin
      OutVal(320,0,IVr.TAX1Sum,M4Val,true);
    end;
    EndFormat;
    if (com<>0) then begin
      if (nonblank(IVr.InvComment)) then begin
        StartFormat(15);
        OutString(0,0,IVr.InvComment,false);
        EndFormat;
      end;
    end;
  end;
  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
    bc1exvattot = bc1exvattot - MulRateToBase1(IVr.CurncyCode,IVr.Sum4-IVr.Sum3,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    bc2exvattot = bc2exvattot - MulRateToBase2(IVr.CurncyCode,IVr.Sum4-IVr.Sum3,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);

    bc1ivtot = bc1ivtot - MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    bc2ivtot = bc2ivtot - MulRateToBase2(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
  end else begin
    bc1exvattot = bc1exvattot + MulRateToBase1(IVr.CurncyCode,IVr.Sum4-IVr.Sum3,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    bc2exvattot = bc2exvattot + MulRateToBase2(IVr.CurncyCode,IVr.Sum4-IVr.Sum3,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);

    bc1ivtot = bc1ivtot + MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    bc2ivtot = bc2ivtot + MulRateToBase2(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
  end;
  return;
end;

procedure CalculateInvoiceSum(record RcVc RepSpec,record IVVc IVr)
begin
  Integer i,rwcnt;
  row IVVc IVrw;
  Boolean testf;
  record INVc INr;
  string 20 frit,toit;
  string 20 frin,toin;
  string 255 frsacc,tosacc;
  val s1,s3;
  
  IVr.Sum1 = blankval;
  IVr.Sum3 = blankval;
  IVr.Sum4 = blankval;
  frin = FirstInRange(RepSpec.f10,20);
  toin = LastInRange(RepSpec.f10,20);
  frit = FirstInRange(RepSpec.Stext,20);
  toit = LastInRange(RepSpec.Stext,20);
  frsacc = FirstInRange(RepSpec.f7,10);
  tosacc = LastInRange(RepSpec.f7,10);
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypeSubtotal) then begin goto LSKIPIVROW_CalculateInvoiceSum; end;
    if (IVrw.stp==kInvoiceRowTypeLoyaltyPointsPayment) then begin goto LSKIPIVROW_CalculateInvoiceSum; end;
    if (IVrw.stp==kInvoiceRowTypeGiftVoucherPayment) then begin goto LSKIPIVROW_CalculateInvoiceSum; end;
    if (IVrw.stp==kInvoiceRowTypeCashPayment) then begin goto LSKIPIVROW_CalculateInvoiceSum; end;
    if (IVrw.stp==kInvoiceRowTypeCreditCardPayment) then begin goto LSKIPIVROW_CalculateInvoiceSum; end;
    if (IVrw.stp==kInvoiceRowTypeChequePayment) then begin goto LSKIPIVROW_CalculateInvoiceSum; end;
    testf = true;
    if (nonblank(RepSpec.f10)) then begin
      testf = false;
      if (IVrw.ArtCode>=frin) and (IVrw.ArtCode<=toin) then begin 
        testf = true;    
      end;
    end;
    if (testf) then begin
      if (nonblank(RepSpec.Stext)) then begin
        testf = false;
        if (ReadFirstItem(IVrw.ArtCode,INr,true,true)) then begin
          if (INr.Group>=frit) then begin 
            if (INr.Group<=toit) then begin
              testf = true;
            end;
          end;
        end;
      end;
      if (testf and nonblank(RepSpec.Comment)) then begin
        testf = false;
        if (ReadFirstItem(IVrw.ArtCode,INr,true,true)) then begin
          if SetInSet2(RepSpec.Comment,INr.DispGroups) then begin          
            testf = true;
          end;
        end;
      end;
    end;
    if (testf) then begin
      if (nonblank(RepSpec.f7)) then begin
        if (IVrw.SalesAcc<frsacc) or (IVrw.SalesAcc>tosacc) then begin
          testf = false;
        end; 
      end;
    end;
    if (testf==false) then begin goto LSKIPIVROW_CalculateInvoiceSum; end;
    s1 = 0;
    s3 = 0;
    if ((IVrw.stp==1) or (IVrw.stp==4)) then begin
      s1 = IVrw.Sum;
      s3 = FindVAT(IVrw.VATCode,IVrw.Sum,IVr.InclVAT,IVr.NoTAXonVAT);
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        s1 = -s1;
        s3 = -s3;
      end;
    end;
    if (IVrw.stp==5) then begin
      s1 = IVrw.Sum;
      s3 = FindVAT(IVrw.VATCode,IVrw.Sum,IVr.InclVAT,IVr.NoTAXonVAT);
    end;
    IVr.Sum1 = IVr.Sum1 + s1;
    IVr.Sum3 = IVr.Sum3 + s3;
    if (IVr.InclVAT!=0) then begin
      IVr.Sum4 = IVr.Sum4 + s1;
    end else begin
      IVr.Sum4 = IVr.Sum4 + s1 + s3;
    end;
LSKIPIVROW_CalculateInvoiceSum:;    
  end;
  return;
end;

function val CashRowsAmount(record IVVc IVr)
begin
  val res;
  row IVVc IVrw;
  Integer i,rwcnt;
  

  if ((IVr.RetnValue>0 and IVr.Sum4>0) or (IVr.RetnValue<0 and IVr.Sum4<0)) then begin
    res = res - IVr.RetnValue;
  end;  
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    switch (IVrw.stp) begin
      case 16: res = res + IVrw.Sum;
      case 15: res = res + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
      case 14: res = res + IVrw.Sum;
    end;
  end;
  CashRowsAmount = res;
  return;
end;

function Boolean IsInvoiceAfectingSLReport(record IVVc IVr)
begin
  Boolean res;
  record IVVc creditedIVr;
  val bal
  
  res = true;
  switch (IVr.InvType) begin
    case kInvoiceTypeCashInvoiceReceiptPRT:
      res = false;
    case kInvoiceTypeCash:
      res = false;
    case kInvoiceTypeCreditSpecialSales: goto LkInvoiceTypeCredit;
    case kInvoiceTypeCredit:
LkInvoiceTypeCredit:;
      if (IVr.CredInv>0) then begin
        creditedIVr.SerNr = IVr.CredInv;
        if (ReadFirstMain(creditedIVr,1,true)) then begin
          if (creditedIVr.InvType==kInvoiceTypeCash or creditedIVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
            res = false;
          end;
        end;
      end;
    case kInvoiceTypeInterest:
    otherwise      
  end;
  if (res) then begin
    bal = IVr.Sum4 - CashRowsAmount(IVr);
    if (bal==0) then begin
      res = false;
    end;
  end;
  IsInvoiceAfectingSLReport = res;
  return;
end;

global
procedure InvoiceRn(record RcVc RepSpec)
begin
  record IVVc IVr;
  record IVVc IV2r;
  record CUVc CUr;
  record ObjVc OBr;
  record TRVc TRr;
  record ORVc ORr;
  record BaseCurBlock bascur;
  record MainStockBlock MainStockRec;
  record AccBlock ARb;
  record DownPayBlock DPb;
  val iv,TotSum, ivnvat, TotSum2,TotSumVAT,ivvat;
  val bc1iv,bc2iv,bc1ivtot,bc2ivtot;
  val bc1exvat,bc2exvat,bc1exvattot,bc2exvattot;
  String 255 tstr;
  String 20 mykey;
  Boolean Accs,TrHs,testf;
  vector Boolean testrowf;
  Boolean curncyflag;
  Boolean datesort,downpaymentf;
  Boolean overviewpervatcodef;
  Integer rw;
  LongInt afr,ato;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt;
  array val invav1;
  array val invav2;
  array val invav3;
  array string 20 invacur;
  Integer invcurcnt;
  string 255 froffic,tooffic;
  record INVc INr;
  string 20 frit,toit;
  Integer i,rwcnt;
  row IVVc IVrw;
  string 255 location;
  LongInt runnr;
  string 255 frdebacc,todebacc;
  string 255 frsacc,tosacc;
  record GCSVc GCSr;
  LongInt totinv;
  record SMVc VATr;
  row SMVc VATrw;
  row VATCodeBlock VATbrw;
  Integer vcnt;
  val totv,vatv,t1;
  string 255 frin,toin;
  record COCUServiceVc COCUSr;

  RepSpec.sStartDate2 = FirstInRange(RepSpec.Period2Str2,10);
  RepSpec.sEndDate2 = LastInRange(RepSpec.Period2Str2,10);
  totinv = 0;
  runnr = 1;
  Split2Str2(RepSpec.f6,froffic,tooffic,40);  
  BlockLoad(DPb);
  BlockLoad(ARb);
  BlockLoad(bascur);
  BlockLoad(MainStockRec);
  StartReportJob(USetStr(2351));
  bc1ivtot = 0;
  bc2ivtot = 0;
  rw = 1;
  if (RepSpec.PocketPC == 0) then begin
    HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
    HT2Per2(3505,RepSpec.sStartDate2,RepSpec.sEndDate2,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
    if (RepSpec.ArtMode==2) then begin
      tstr = USetStr(2328);
    end else begin
      if (RepSpec.ArtMode==4) then begin
        tstr = USetStr(1159);
      end else begin
        HTDetailLevel(RepSpec.ArtMode,tstr);
      end;
    end;
    Header(rw,tstr,0);
    HTInv(RepSpec.f1,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
    if (RepSpec.f2<>"") then begin
      tstr = USetStr(1113);
      tstr = tstr & RepSpec.f2;
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    if (IsBooks==false) then begin
      HTInvTypes(RepSpec.flags[3],RepSpec.flags[4],RepSpec.flags[5],RepSpec.flags[6],tstr);
    end else begin
      HTInvTypes(RepSpec.flags[3],RepSpec.flags[4],RepSpec.flags[5],0,tstr);
    end;
    Header(rw,tstr,1);
    rw = rw + 1;
    HTOKF(RepSpec.flags[1],RepSpec.flags[2],tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
    if (RepSpec.AccStr<>"") then begin
      HTSaleMan(RepSpec.AccStr,tstr);
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    if (RepSpec.ObjStr<>"") then begin
      HTObj(RepSpec.ObjStr,tstr);
//      tstr = RepSpec.ObjStr;
      Header(rw,tstr,1);
      rw = rw + 1;
    end else begin
      if (RepSpec.ObjType<>"") then begin
        HTOT(RepSpec.ObjType,tstr);
        Header(rw,tstr,1);
        rw = rw + 1;
      end;
    end;
    if (nonblank(RepSpec.f11)) then begin 
      tstr = USetStr(3507) & RepSpec.f11;
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    if (nonblank(RepSpec.f13)) then begin 
      tstr = USetStr(7379) & ": " & RepSpec.f13;
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    if (nonblank(RepSpec.f4)) then begin
      HTCustClass(RepSpec.f4,tstr);
      if (nonblank(tstr)) then begin
        Header(rw,tstr,1);
        rw = rw + 1;
      end;
    end;
    if (nonblank(RepSpec.f3)) then begin
      HTCustCat(RepSpec.f3,tstr);
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    if (nonblank(RepSpec.Comment)) then begin
      HTItemClass(RepSpec.Comment,tstr);
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    if (nonblank(RepSpec.f5)) then begin
      HTCustClassType(RepSpec.f5,tstr);
      if (nonblank(tstr)) then begin
        Header(rw,tstr,1);
        rw = rw + 1;
      end; 
    end;
    if (nonblank(RepSpec.LastAcc)) then begin
      HTLocations(RepSpec.LastAcc,RepSpec.LastAcc,tstr);
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end else begin
    rw = rw + 1;
    HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
    Header(rw,tstr,0);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f12)) then begin 
    tstr = USetStr(3508) & ": " & RepSpec.f12;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  EndHeader;

  if (HasLocalization("ITA") and IsStandardProduct) then begin
    overviewpervatcodef = RepSpec.flags[15]!=0;
  end;
  
  curncyflag = false;
  TotSum = 0;
  TotSum2 = 0;
  SetRepCol(2,430);
  SetRepColBiDi(3,400,440);
  SetRepColBiDi(4,460,500);
  SetRepColBiDi(5,360,400);
  SetRepColBiDi(6,420,450);
  if ((RepSpec.ArtMode==0) or (RepSpec.ArtMode==3)) then begin
    if (RepSpec.PocketPC == 0) then begin
      if (overviewpervatcodef) then begin
        SetRepColBiDi(4,360,400);
        SetRepColBiDi(5,250,290);
        SetRepColBiDi(6,310,340);
      end;
      StartFormat(15);
      OutString(0,0,USetStr(2352),false);//0
      if (RepSpec.flags[16]!=0 and RepSpec.flags[10]!=3) then begin
        OutString(60,0,USetStr(3509),false);
        OutString(120,0,USetStr(2353),false);
        if (overviewpervatcodef) then begin
          OutString(170,0,USetStr(2358),false);
        end else begin
          OutString(170,0,USetStr(2354),false);
          OutString(305,0,USetStr(2358),false);
        end;
      end else begin
        OutString(60,0,USetStr(2353),false);//60
        OutString(110,0,USetStr(2354),false);//110
        if (overviewpervatcodef) then begin
          OutString(170,0,USetStr(2358),false);//280
        end else begin
          OutString(285,0,USetStr(2358),false);//280
        end;
      end;
      if (RepSpec.flags[15]!=0) then begin
        OutStringAdjust(5,0,USetStr(2328),true,M4Val);
        OutStringAdjust(6,0,USetStr(2329),true,M4Val);
        OutStringAdjust(4,0,USetStr(2356),true,M4Val);
        if (overviewpervatcodef) then begin
          OutString(390,0,USetStr(3506),false);
        end;
      end else begin
        OutStringAdjust(3,0,USetStr(2328),true,M4Val);
        OutStringAdjust(4,0,USetStr(2329),true,M4Val);
      end;
      EndFormat;
    end else begin
      StartFormat(15)
      OutString(0,0,USetStr(2352),false);//0
      OutString(100,0,USetStr(2354),false);//110
      OutString(440,0,USetStr(2328),true);
      EndFormat;
    end;
  end;

  if (RepSpec.ArtMode==4) then begin
    if (RepSpec.PocketPC == 0) then begin
      StartFormat(15);
      OutString(0,0,USetStr(2352),false);
      if (RepSpec.flags[16]!=0 and RepSpec.flags[10]!=3) then begin
        OutString(60,0,USetStr(3509),false);
        OutString(115,0,USetStr(2353),false);
        OutString(170,0,USetStr(2354),false);
        OutString(305,0,USetStr(2358),false);
      end else begin
        OutString(60,0,USetStr(2353),false);
        OutString(115,0,USetStr(2354),false);
        OutString(280,0,USetStr(2358),false);
      end;
      if (RepSpec.flags[15]!=0) then begin
        OutStringAdjust(5,0,USetStr(2328),true,M4Val);
        OutStringAdjust(6,0,USetStr(2329),true,M4Val);
        OutStringAdjust(4,0,USetStr(2356),true,M4Val);
      end else begin
        OutStringAdjust(3,0,USetStr(2328),true,M4Val);
        OutStringAdjust(4,0,USetStr(2329),true,M4Val);
      end;
      EndFormat;
    end else begin
      StartFormat(15)
      OutString(0,0,USetStr(2352),false);//0
      OutString(100,0,USetStr(2354),false);//110
      OutString(440,0,USetStr(2328),true);
      EndFormat;
    end;
  end;
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
//    OutString(0,0,USetStr(3503),false);//0
    OutString(0,0,USetStr(2352),false);//0
    OutString(150,0,USetStr(2353),false);//150
    OutString(220,0,USetStr(2370),false);//220
    OutString(290,0,USetStr(3502),false);//220
    if (HasModSO) then begin
      OutString(350,0,USetStr(2584),false);//350
    end;
    EndFormat;
  end;
  frit = FirstInRange(RepSpec.Stext,20);
  toit = LastInRange(RepSpec.Stext,20);
  frin = FirstInRange(RepSpec.f10,20);
  toin = LastInRange(RepSpec.f10,20);
  afr = FirstInRange(RepSpec.f1,20);
  ato = LastInRange(RepSpec.f1,20);
  frsacc = FirstInRange(RepSpec.f7,10);
  tosacc = LastInRange(RepSpec.f7,10);
  frdebacc = FirstInRange(RepSpec.f8,10);
  todebacc = LastInRange(RepSpec.f8,10);
  BeginCurncyTotals(curcnt);
  BeginCurncyTotals(invcurcnt);
  IVr.TransDate = RepSpec.sStartDate;
  IVr.InvDate = RepSpec.sStartDate;
  IVr.SerNr = afr;
  if (RepSpec.flags[10]==0) then begin 
    mykey = "TransDate";
  end;
  if (RepSpec.flags[10]==1) then begin
    mykey = "SerNr";
  end;
  if (RepSpec.flags[10]==2) then begin
    mykey = "Location";
  end;
  if (RepSpec.flags[10]==3) then begin
    mykey = "OfficialSerNrDate";
    IVr.SerNr = -1;
    IVr.OfficialSerNr = froffic;
  end;
  if (RepSpec.flags[10]==4) then begin 
    mykey = "InvDate";
  end;
  if (RepSpec.flags[10]==5) then begin 
    mykey = "OfficialSerNr";
  end;
/*
  datesort = false;
  if (blank(RepSpec.f1)) then begin
    datesort = true;
  end;
  if (datesort) then begin
    IVr.TransDate = RepSpec.sStartDate;
    mykey = "TransDate";
  end else begin
    IVr.SerNr = afr;
    mykey = "SerNr";
  end;
*/
  Gray_Divider(0,1);
  TrHs = true;  
  while (LoopKey(mykey,IVr,1,TrHs)) begin
    iv = 0;
    ivnvat = 0;
    ivvat = 0;
    if (RepSpec.flags[10]==0) then begin
      if (IVr.TransDate>RepSpec.sEndDate)  then begin
        TrHs = false;
      end;
    end;
    if (RepSpec.flags[10]==1) then begin
      if (ato<>-1) then begin
        if (IVr.SerNr>ato) then begin
          TrHs = false;
        end;
      end;      
    end;
    if (RepSpec.flags[10]==2) then begin
      if (nonblank(RepSpec.LastAcc)) then begin
        if (RepSpec.LastAcc<>IVr.Location) then begin
          TrHs = false;
        end;
      end;
    end;
    if (RepSpec.flags[10]==3) then begin
      if (nonblank(RepSpec.f6)) then begin
        if (IVr.OfficialSerNr>tooffic) then begin
          TrHs = false;
        end;
      end;
    end;
    if (RepSpec.flags[10]==4) then begin
      if (IVr.InvDate>RepSpec.sEndDate)  then begin
        TrHs = false;
      end;
    end;
    if (RepSpec.flags[10]==5) then begin
      if (nonblank(RepSpec.f6)) then begin
        if (IVr.OfficialSerNr>tooffic) then begin
          TrHs = false;
        end;
      end;
    end;
    if (TrHs) then begin
      testf = true;
      totv = blankval;
      SetupVATBase(VATr,vcnt);      
      if (nonblank(RepSpec.TransStr)) then begin
        if (RepSpec.TransStr<>IVr.PayDeal) then begin
          testf = false;
        end;
      end;
      if (testf and nonblank(RepSpec.f2)) then begin
        if (RepSpec.f2!=IVr.CustCode) then begin
          if (RepSpec.flags[18]!=0) then begin
            if (RepSpec.f2!=IVr.OrgCust) then begin
              testf = false;
            end;
          end else begin
            testf = false;
          end;
        end;
      end;
      if (testf and ((nonblank(RepSpec.f3)) or (nonblank(RepSpec.f4)) or (nonblank(RepSpec.f5)) or (nonblank(RepSpec.f9)))) then begin
        CUr.Code = IVr.CustCode;
        if (ReadFirstMain(CUr,1,true)) then begin
          if (nonblank(RepSpec.f3)) then begin
            if (RepSpec.f3<>CUr.CustCat) then begin
              testf = false;
            end;
          end;
          if (nonblank(RepSpec.f4)) then begin
            if (SetInSet(RepSpec.f4,CUr.Classification)==false) then begin
              testf = false;
            end;
          end;
          if (nonblank(RepSpec.f9)) then begin
            if (RepSpec.f9<>CUr.MainPartner) then begin
              testf = false;
            end;
          end;
          if (nonblank(RepSpec.f5)) then begin
            if (testf) then begin
              testf = false;
              ClassTypef(RepSpec.f5,CUr.Classification,testf);
            end;
          end;
        end;
      end;
      if (testf and nonblank(RepSpec.AccStr)) then begin
        if (SetInSet(RepSpec.AccStr,IVr.SalesMan)==false) then begin testf = false; end;
      end;
      if (testf and nonblank(RepSpec.f14) and nonblank(IVr.SalesMan)) then begin
        testf = SalesGroupExistWithinUsersList(RepSpec.f14,IVr.SalesMan);
      end;      
      if (testf and nonblank(RepSpec.f8)) then begin
        if (IVr.ARAcc<frdebacc) or (IVr.ARAcc>todebacc) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        if ((RepSpec.flags[10]!=0) and (RepSpec.flags[10]!=4)) then begin
          if (IVr.TransDate<RepSpec.sStartDate)  then begin
            testf = false;
          end;
          if (IVr.TransDate>RepSpec.sEndDate)  then begin
            testf = false;
          end;
        end;
        if (RepSpec.flags[10]!=1) then begin
          if (afr>-1) then begin
            if (IVr.SerNr<afr) then begin
              testf = false;
            end;
          end;
          if (ato<>-1) then begin
            if (IVr.SerNr>ato) then begin
              testf = false;
            end;
          end;
        end;
        if (testf) then begin
          if (RepSpec.flags[10]!=2) then begin
            if (nonblank(RepSpec.LastAcc)) then begin
              testf = false;
              rwcnt = MatRowCnt(IVr);                        
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(IVr,i,IVrw);
                location = IVrw.Location;
                if (blank(location)) then begin
                  location = IVr.Location;
                end;
                if (blank(location)) then begin
                  location = MainStockRec.MainStock;
                end;
                if (RepSpec.LastAcc==location) then begin
                  testf = true;
                  i = rwcnt;
                end;
              end;
            end;
          end;
        end;
      end;
      if (nonblank(RepSpec.f6)) then begin
        if (IVr.OfficialSerNr<froffic) then begin testf = false; end;
        if (IVr.OfficialSerNr>tooffic) then begin testf = false; end;
      end;      
      if (IVr.OKFlag==0) then begin
        if (RepSpec.flags[1]==0) then begin
          testf = false;
        end;
      end;
      if (IVr.OKFlag<>0) then begin
        if (RepSpec.flags[2]==0) then begin
          testf = false;
        end;
      end;
      if (RepSpec.flags[20]!=0) then begin
        if (IVr.Sum4!=0) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        if (RepSpec.flags[21]!=0) then begin
          if (IVr.COCUSerNr<0) then begin
            testf = false;
          end else begin
            COCUSr.SerNr = IVr.COCUSerNr;
            if (ReadFirstMain(COCUSr,1,true)) then begin
               if (blank(COCUSr.VECode)) then begin testf = false; end;
            end else begin
              testf = false;
            end;
          end;
        end;
      end;
      // Why is this needed? Oh, well, I add test for InvDate as well...
      if (RepSpec.flags[10]==4) then begin
        if (DateInRange(IVr.InvDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
          testf = false;
        end;
      end else begin
        if (DateInRange(IVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
          testf = false;
        end;
      end;
      if (testf and RepSpec.flags[19]!=0) then begin
        if (IsInvoiceAfectingSLReport(IVr)==false) then begin
          testf = false;
        end;
      end else begin
        if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
          if (RepSpec.flags[4]==0) then begin
            testf = false;
          end;
        end;
        if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
          if (RepSpec.flags[5]==0) then begin
            testf = false;
          end;
        end;
        if (IVr.InvType==kInvoiceTypeInterest) then begin
          if (RepSpec.flags[6]==0) then begin
            testf = false;
          end;
        end;
        if ((IVr.InvType<>kInvoiceTypeCash and IVr.InvType<>kInvoiceTypeCashInvoiceReceiptPRT) and (IVr.InvType<>kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales) and (IVr.InvType<>kInvoiceTypeInterest)) then begin
          if (RepSpec.flags[3]==0) then begin
            testf = false;
          end;
        end;
      end;
      if (RepSpec.flags[14]==0) then begin
        if (IVr.Invalid<>0) then begin testf = false; end;
      end;
      if (RepSpec.flags[13]!=0) then begin
        if (IVr.FiscalFlag==0) then begin testf = false; end;
      end;
      if (RepSpec.flags[17]!=0) then begin
        if (IVr.Prntdf!=0) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.vals0)) then begin
        if (IVr.BaseSum4<RepSpec.vals0) then begin testf = false; end;
      end;
      if (testf) then begin
        if (len(RepSpec.Period2Str2)>1) then begin
          if (IVr.InvType==kInvoiceTypeCredit) or (IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
            if (IVr.CredInv>0) then begin
              IV2r.SerNr = IVr.CredInv;
              if (ReadFirstMain(IV2r,1,true)) then begin
                if (DateInRange(IV2r.TransDate,RepSpec.sStartDate2,RepSpec.sEndDate2)==false) then begin
                  testf = false;
                end;
              end else begin
                testf = false;
              end;
            end else begin
              testf = false;
            end;
          end;
        end;
      end;
      if (testf) then begin
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,IVr.Objects)==false) then begin
          testf = false;
        end;
      end else begin
        if ((testf==true) and (nonblank(RepSpec.ObjType))) then begin
          testf = false;
          OBr.OTCode = RepSpec.ObjType;
          OBr.Code = "";
          Accs = true;
          ResetLoop(OBr);
          while (LoopKey("OTCode",OBr,1,Accs)) begin
            if ((Accs==true) and (RepSpec.ObjType==OBr.OTCode)) then begin              
              if (SetInSet(OBr.Code,IVr.Objects)==true) then begin
                testf = true;
                Accs = false;
              end;
            end;
          end; 
        end;
      end;
      end;
      if (testf) then begin
        if (nonblank(RepSpec.f3)) then begin          
          CUr.Code = IVr.CustCode;
          if (ReadFirstMain(CUr,1,true)) then begin
            if (CUr.CustCat<>RepSpec.f3) then begin
              testf = false;
            end;
          end else begin
            testf = false;
          end;
        end;
      end;
      if (nonblank(RepSpec.f12)) then begin 
        if (IVr.OrgCust!=RepSpec.f12) then begin 
          testf = false;
        end;
      end;
      if (testf) then begin
        if (RepSpec.flags[7]==1) then begin
          if (IVr.DisputedFlag==1) then begin
            testf = false;
          end;
        end;
      end;
      if (testf) then begin
        if (RepSpec.flags[7]==2) then begin
          if (IVr.DisputedFlag<>1) then begin
            testf = false;
          end;
        end;
      end;
      if (testf) then begin
       if (nonblank(RepSpec.FirstAcc)) then begin
          if (RepSpec.FirstAcc<>IVr.PRCode) then begin
            testf = false;
          end;
        end;
      end;
      if (IVr.InvType==kInvoiceTypePrepayment) then begin testf = false; end;
      if (RepSpec.ArtMode==1 or RepSpec.ArtMode==0 or RepSpec.ArtMode==4) then begin
        if (testf) then begin
          if (nonblank(RepSpec.Stext) or nonblank(RepSpec.f10) or nonblank(RepSpec.f11) or nonblank(RepSpec.f13) or nonblank(RepSpec.Comment)) then begin
            testrowf["Item"] = false;
            testrowf["ItemGroup"] = false;
            testrowf["DispGroups"] = false;
            testrowf["RowObject"] = false;
            testrowf["VATCode"] = false;
            rwcnt = MatRowCnt(IVr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(IVr,i,IVrw);
              testrowf["TESTALL"] = true;              
              if (nonblank(RepSpec.f10)) then begin
                if (IVrw.ArtCode>=frin) and (IVrw.ArtCode<=toin) then begin 
                  testrowf["Item"] = true;
                end else begin
                  testrowf["TESTALL"] = false;
                end;
              end;
              if (nonblank(RepSpec.Stext)) then begin
                if (ReadFirstItem(IVrw.ArtCode,INr,true,true)) then begin
                  if (INr.Group>=frit) then begin 
                    if (INr.Group<=toit) then begin
                      testrowf["ItemGroup"] = true;
                    end else begin
                      testrowf["TESTALL"] = false;
                    end;
                  end;
                end; 
              end;
              if (nonblank(RepSpec.Comment)) then begin
                if (ReadFirstItem(IVrw.ArtCode,INr,true,true)) then begin
                  if SetInSet2(RepSpec.Comment,INr.DispGroups) then begin
                    testrowf["DispGroups"] = true;
                  end else begin
                    testrowf["TESTALL"] = false;
                  end;
                end; 
              end;
              if (nonblank(RepSpec.f11)) then begin
                if (SetInSet2(RepSpec.f11,IVrw.Objects)) then begin
                  testrowf["RowObject"] = true;
                end else begin
                  testrowf["TESTALL"] = false;
                end; 
              end;
              if (nonblank(RepSpec.f13)) then begin
                if (SetInSet2(RepSpec.f13,IVrw.VATCode)) then begin
                  testrowf["VATCode"] = true;
                end else begin
                  testrowf["TESTALL"] = false;                
                end; 
              end;
              if (testrowf["TESTALL"]) then begin 
                if (testrowf["Item"] or testrowf["ItemGroup"] or testrowf["DispGroups"] or testrowf["RowObject"] or testrowf["VATCode"]) then begin
                  if (RepSpec.ArtMode!=1) then begin
                    AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,blankval,vcnt,IVr.InclVAT,IVr.NoTAXonVAT);
                    totv = totv + IVrw.Sum;
                  end;
                end;
              end;
            end;
            if (nonblank(RepSpec.f10)) then begin
              if (testrowf["Item"]==false) then begin  testf = false;  end;
            end;
            if (nonblank(RepSpec.Stext)) then begin
              if (testrowf["ItemGroup"]==false) then begin testf = false; end;
            end;
            if (nonblank(RepSpec.Comment)) then begin
              if (testrowf["DispGroups"]==false) then begin testf = false; end;
            end;
            if (nonblank(RepSpec.f13)) then begin
              if (testrowf["VATCode"]==false) then begin testf = false; end;
            end;
            if (nonblank(RepSpec.f11)) then begin
              if (testrowf["RowObject"]==false) then begin testf = false; end;
            end;
            if (testf) then begin
              if (RepSpec.ArtMode!=1) then begin
                CalcVATBaseVAT(VATr,IVr.InclVAT,IVr.NoTAXonVAT,vcnt,vatv,t1);
                IVr.Sum3 = vatv;
                if (IVr.InclVAT==0) then begin
                  IVr.Sum4 = totv + vatv;
                  IVr.Sum1 = totv;
                end else begin
                  IVr.Sum4 = totv;
                  IVr.Sum1 = totv;
                end;
              end;
            end;            
          end;
          if (blank(IVr.Sum4)) then begin 
            testf = false;
          end; 
        end;
        if (testf) then begin
          if (nonblank(RepSpec.f7)) then begin
            testf = false;
            rwcnt = MatRowCnt(IVr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(IVr,i,IVrw);
              if (IVrw.SalesAcc>=frsacc) and (IVrw.SalesAcc<=tosacc) then begin 
                testf = true;              
                i = rwcnt;
              end; 
            end;
          end;
        end;        
      end;
/* No more strings in the RcTypep to choose from
      if (testf) then begin
        if (nonblank(RepSpec.Stext)) then begin
          if (IVr.OrderNr>-1) then begin
            ORr.SerNr = IVr.OrderNr;
            if (ReadFirstMain(ORr,1,true)) then begin
              if (ORr.OrderClass!=RepSpec.Stext) then begin
                testf = false;
              end;
            end else begin
              testf = false;
            end;
          end else begin
            testf = false;
          end;
        end;
      end;
*/
      if (testf) then begin
        if ((RepSpec.ArtMode==0) or (RepSpec.ArtMode==4)) then begin
          switch (GCSr.FileName) begin
            case "IVVc":
              GCSr.FileName = "IVVc";
              GCSr.InvSerNr = IVr.SerNr;
              if (ReadFirstKey("InvSerNr",GCSr,2,true)) then begin
                CalculateInvoiceSum(RepSpec,IVr);
              end;
            otherwise
              GCSr.FileName = "IVVc";
              GCSr.InvSerNr = IVr.SerNr;
              if (ReadFirstKey("InvSerNr",GCSr,2,true)) then begin
                CalculateInvoiceSum(RepSpec,IVr);
              end;
          end;        
          if (ARb.BookVATOnlyFromDownpayment!=0) and (DPb.DetailsOnIV!=0) then begin
            switch (IVr.InvType) begin
              case kInvoiceTypeDownpayment:
                iv = IVr.Sum3;
                ivnvat = IVr.Sum3;
                ivvat = Blankval;
              case kInvoiceTypeCreditSpecialSales:
                goto LkInvoiceTypeCredit1;
              case kInvoiceTypeCredit:
LkInvoiceTypeCredit1:;              
                iv = IVr.Sum4 - IVr.TAX1Sum;
                ivnvat = IVr.Sum1;
                ivvat = IVr.Sum3;
                if (IVr.InclVAT!=0) then begin
                  ivnvat = ivnvat - IVr.Sum3;
                end;
                ivnvat = -ivnvat;
                iv = -iv;
                ivvat = -ivvat;
              otherwise
                rwcnt = MatRowCnt(IVr);
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(IVr,i,IVrw);
                  if (IVrw.stp==kInvoiceRowTypeDownpayment) then begin
                    downpaymentf = true;
                    i = rwcnt;
                  end;
                end;
                if (downpaymentf) then begin
                  rwcnt = MatRowCnt(IVr);
                  for (i=0;i<rwcnt;i=i+1) begin
                    MatRowGet(IVr,i,IVrw);
                    if (IVrw.stp==kInvoiceRowTypeNormal) then begin
                      iv = iv + IVrw.Sum;
                      ivnvat = ivnvat + IVrw.Sum;
                      ivvat = ivvat + IVrw.Sum;
                    end;
                  end;
                end else begin
                  iv = IVr.Sum4 - IVr.TAX1Sum;
                  ivnvat = IVr.Sum1;
                  ivvat = IVr.Sum3;
                end;
            end;
          end else begin
            iv = IVr.Sum4 - IVr.TAX1Sum;
            ivnvat = IVr.Sum1;
            ivvat = IVr.Sum3;
            if (IVr.InclVAT!=0) then begin
              ivnvat = ivnvat - IVr.Sum3;
            end;
            switch (IVr.InvType) begin
              case kInvoiceTypeCredit:
                ivnvat = -ivnvat;
                iv = -iv;
                ivvat = -ivvat;
            end;
          end;
                            
          TotSum = TotSum + iv;
          TotSum2 = TotSum2 + ivnvat;
        end;
        if (nonblank(IVr.CurncyCode)) then begin
          curncyflag = true;
        end;
        if (IVr.Invalid==0) then begin
          AddCurncyTotals(acur,av1,curcnt,IVr.CurncyCode,ivnvat);
          AddCurncyTotals(acur,av2,curcnt,IVr.CurncyCode,iv);
        end else begin
          AddCurncyTotals(invacur,invav1,invcurcnt,IVr.CurncyCode,ivnvat);
          AddCurncyTotals(invacur,invav2,invcurcnt,IVr.CurncyCode,iv);
        end;
        if ((RepSpec.flags[12]==1) or (RepSpec.ArtMode==4)) then begin
          RecordCopy(IV2r,IVr);
          if ((IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) and (IVr.CredInv>0)) then begin
            IV2r.SerNr = IVr.CredInv;
            if (ReadFirstMain(IV2r,1,true)==false) then begin
              RecordCopy(IV2r,IVr);
            end;
          end;
          bc1iv = MulRateToBase1(IV2r.CurncyCode,iv,IV2r.FrRate,IV2r.ToRateB1,IV2r.ToRateB2,IV2r.BaseRate1,IV2r.BaseRate2,DefaultCurRoundOff);
          bc2iv = MulRateToBase2(IV2r.CurncyCode,iv,IV2r.FrRate,IV2r.ToRateB1,IV2r.ToRateB2,IV2r.BaseRate1,IV2r.BaseRate2,DefaultCurRoundOff);
          bc1ivtot = bc1ivtot + bc1iv;
          bc2ivtot = bc2ivtot + bc2iv;
          bc1exvat = MulRateToBase1(IV2r.CurncyCode,ivnvat,IV2r.FrRate,IV2r.ToRateB1,IV2r.ToRateB2,IV2r.BaseRate1,IV2r.BaseRate2,DefaultCurRoundOff);
          bc2exvat = MulRateToBase2(IV2r.CurncyCode,ivnvat,IV2r.FrRate,IV2r.ToRateB1,IV2r.ToRateB2,IV2r.BaseRate1,IV2r.BaseRate2,DefaultCurRoundOff);
          bc1exvattot = bc1exvattot + bc1exvat;
          bc2exvattot = bc2exvattot + bc2exvat;
        end;
        if (RepSpec.ArtMode==1) then begin
          RepInvoice(RepSpec,ARb,DPb,IVr,RepSpec.flags[11],RepSpec.Stext,RepSpec.f10,RepSpec.f11,RepSpec.f13,bc1ivtot,bc2ivtot,bc1exvattot,bc2exvattot,runnr,acur,av1,av2,curcnt);
          Gray_Divider(0,1);
        end;
        if (RepSpec.ArtMode==0)  then begin
          if (RepSpec.PocketPC == 0) then begin
            if (overviewpervatcodef) then begin
              SetupVATBase(VATr,vcnt);
              rwcnt = MatRowCnt(IVr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(IVr,i,IVrw);
                testf = true;
                if (IVrw.stp==kInvoiceRowTypeSubtotal) then begin testf = false; end;
                if (IVrw.stp==kInvoiceRowTypeGiftVoucherPayment) then begin testf = false; end;
                if (IVrw.stp==kInvoiceRowTypeCashPayment) then begin testf = false; end;
                if (IVrw.stp==kInvoiceRowTypeCreditCardPayment) then begin testf = false; end;
                if (IVrw.stp==kInvoiceRowTypeChequePayment) then begin testf = false; end;
                if (testf) then begin
                  if (nonblank(RepSpec.f10)) then begin
                    testf = false;
                    if (IVrw.ArtCode>=frin) and (IVrw.ArtCode<=toin) then begin 
                      testf = true;              
                    end;
                  end;
                  if (nonblank(RepSpec.Stext)) then begin
                    testf = false;
                    if (ReadFirstItem(IVrw.ArtCode,INr,true,true)) then begin
                      if (INr.Group>=frit) then begin 
                        if (INr.Group<=toit) then begin
                          testf = true;
                        end;
                      end;
                    end;
                  end;
                  if (testf and nonblank(RepSpec.Comment)) then begin
                    testf = false;
                    if (ReadFirstItem(IVrw.ArtCode,INr,true,true)) then begin
                      if SetInSet2(RepSpec.Comment,INr.DispGroups) then begin          
                        testf = true;
                      end;
                    end;
                  end;
                  if (testf and nonblank(RepSpec.f11)) then begin
                    testf = false;
                    if (SetInSet2(RepSpec.f11,IVrw.Objects)) then begin
                      testf = true;              
                    end;
                  end;   
                  if (testf and nonblank(RepSpec.f13)) then begin
                    testf = false;
                    if (SetInSet2(RepSpec.f13,IVrw.VATCode)) then begin
                      testf = true;              
                    end;
                  end;   
                end;
                if (testf) then begin
                  if (nonblank(RepSpec.f7)) then begin
                    if (IVrw.SalesAcc<frsacc) or (IVrw.SalesAcc>tosacc) then begin
                      testf = false;
                    end; 
                  end;
                end;
                if (testf) then begin
                  AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,blankval,vcnt,IVr.InclVAT,IVr.NoTAXonVAT);
                end;
              end;
              for (i=0;i<vcnt;i=i+1) begin
                MatRowGet(VATr,i,VATrw);
                if (blank(VATrw.DebVal)==false) then begin
                  StartFormat(15);
                  if (RepSpec.flags[10]==3) then begin
                    if (nonblank(IVr.OfficialSerNr)) then begin
                      OutStringOvst(0,0,IVr.OfficialSerNr,false,IVr.Invalid);
                    end else begin
                      OutStringOvst(0,"DblCustPS2",CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr),false,IVr.Invalid);
                    end;
                  end else begin
                    OutStringOvst(0,"DblCustPS2",CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr),false,IVr.Invalid);
                  end;
                  OutDate(60,0,IVr.InvDate,false);
                  OutStringCut(110,170,0,IVr.Addr0,false,0);
                  tstr = "";
                  if (IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeNormalSpecialSales) then begin
                    tstr = USetStr(2361);
                  end;
                  if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
                    tstr = USetStr(2363);
                  end;
                  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                    tstr = USetStr(2362);
                  end;
                  if (IVr.InvType==kInvoiceTypeInterest) then begin
                    tstr = USetStr(2364);
                  end;
                  OutString(170,0,tstr,false);
  
                  OutVal(5,0,VATrw.DebVal,M4Val,true);
                  MulVATIV(VATrw.VATCode,VATrw.DebVal,vatv,t1,IVr.InclVAT,IVr.NoTAXonVAT);
                  if (IVr.InclVAT>0) then begin
                    OutVal(6,0,VATrw.DebVal,M4Val,true);
                  end else begin
                    OutVal(6,0,VATrw.DebVal+vatv,M4Val,true);
                  end;
                  OutVal(4,0,vatv,M4Val,true);            
                  if (HasMultiCurrency) then begin 
                    OutString(365,0,IVr.CurncyCode,false);
                  end;
                  GetVATRow(VATrw.VATCode,VATbrw);
                  OutString(390,0,VATbrw.Comment,false);
                  EndFormat;
                end;
              end;
            end else begin
              tstr = "";
              switch (IVr.InvType) begin
                case kInvoiceTypeNormal: tstr = USetStr(2361);
                case kInvoiceTypeNormalSpecialSales: tstr = USetStr(2361);
                case kInvoiceTypeCash: tstr = USetStr(2363);
                case kInvoiceTypeCashInvoiceReceiptPRT: tstr = USetStr(2363);
                case kInvoiceTypeCredit: tstr = USetStr(2362);
                case kInvoiceTypeCreditSpecialSales: tstr = USetStr(2362);
                case kInvoiceTypeInterest: tstr = USetStr(2364);
              end;
              StartFormat(15);
              if (RepSpec.flags[16]!=0 and RepSpec.flags[10]!=3) then begin
                OutStringOvst(0,"DblCustPS2",IVr.SerNr,false,IVr.Invalid);
                OutStringOvst(60,0,IVr.OfficialSerNr,false,IVr.Invalid);
                OutDate(120,0,IVr.InvDate,false);
                OutStringCut(170,270,0,IVr.Addr0,false,0);
                OutString(305,0,tstr,false);
              end else begin
                if (RepSpec.flags[10]==3) then begin
                  if (nonblank(IVr.OfficialSerNr)) then begin
                    OutStringOvst(0,0,IVr.OfficialSerNr,false,IVr.Invalid);
                  end else begin
                    OutStringOvst(0,"DblCustPS2",CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr),false,IVr.Invalid);
                  end;
                end else begin
                  OutStringOvst(0,"DblCustPS2",CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr),false,IVr.Invalid);
                end;
                OutDate(60,0,IVr.InvDate,false);
                OutStringCut(110,220,0,IVr.Addr0,false,0);
                OutString(285,0,tstr,false);
              end;
              if (RepSpec.flags[15]!=0) then begin
                OutVal(5,0,ivnvat,M4Val,true);
                OutVal(6,0,iv,M4Val,true);
                OutVal(4,0,ivvat,M4Val,true);            
              end else begin
                OutVal(3,0,ivnvat,M4Val,true);
                OutVal(4,0,iv,M4Val,true);
              end;
              if (HasMultiCurrency) then begin 
                OutString(465,0,IVr.CurncyCode,false);
              end;
              EndFormat;
            end;
            if (IVr.Invalid==0) then begin
              AddCurncyTotals(acur,av3,curcnt,IVr.CurncyCode,ivvat);
            end else begin
              AddCurncyTotals(invacur,invav3,invcurcnt,IVr.CurncyCode,ivvat);
            end;
          end else begin
            StartFormat(15);
            OutString(0,"DblCustPS2",CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr),false);
            OutString(100,0,Left(IVr.Addr0,16),false);
            OutVal(430,0,ivnvat,M4Val,true);
            if (HasMultiCurrency) then begin 
              OutString(465,0,IVr.CurncyCode,true);
            end;
            EndFormat;
          end;
        end;
          if (RepSpec.ArtMode==4) then begin
            tstr = "";
            switch (IVr.InvType) begin
              case kInvoiceTypeNormal: tstr = USetStr(2361);
              case kInvoiceTypeNormalSpecialSales: tstr = USetStr(2361);
              case kInvoiceTypeCash: tstr = USetStr(2363);
              case kInvoiceTypeCashInvoiceReceiptPRT: tstr = USetStr(2363);
              case kInvoiceTypeCredit: tstr = USetStr(2362);
              case kInvoiceTypeCreditSpecialSales: tstr = USetStr(2362);
              case kInvoiceTypeInterest: tstr = USetStr(2364);
            end;
            StartFormat(15);
            if (RepSpec.flags[16]!=0 and RepSpec.flags[10]!=3) then begin
              OutStringOvst(0,"DblCustPS2",IVr.SerNr,false,IVr.Invalid);
              OutStringOvst(60,0,IVr.OfficialSerNr,false,IVr.Invalid);
              OutDate(120,0,IVr.InvDate,false);
              OutStringCut(175,295,0,IVr.Addr0,false,0);
              OutString(305,0,tstr,false);
            end else begin
              OutString(0,"DblCustPS2",CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr),false);
              OutDate(60,0,IVr.InvDate,false);
              OutStringCut(115,275,0,IVr.Addr0,false,0);
              OutString(280,0,tstr,false);
            end;
            if (RepSpec.flags[15]!=0) then begin
              OutVal(5,0,ivnvat,M4Val,true);
              OutVal(6,0,iv,M4Val,true);
              OutVal(4,0,iv-ivnvat,M4Val,true);            
            end else begin
              OutVal(3,0,ivnvat,M4Val,true);
              OutVal(4,0,iv,M4Val,true);
            end;
            if (HasMultiCurrency) then begin 
              OutString(465,0,IVr.CurncyCode,false);
            end;
            EndFormat;
            StartFormat(15);
            if (RepSpec.flags[16]!=0) then begin
              OutString(12,0,IVr.OfficialSerNr,false);
            end;
            if (HasMultiCurrency) then begin 
              OutString(130,0,IVr.CurncyCode,false);
            end;
            tstr = GetRateText(IVr.CurncyCode,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2);
            OutString(160,0,tstr,false);
            ivnvat = MulRateToBase1(IVr.CurncyCode,ivnvat,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            if (HasMultiCurrency) then begin 
              if (RepSpec.flags[15]!=0) then begin
                OutVal(5,0,ivnvat,M4Val,true);
                OutVal(6,0,bc1iv,M4Val,true);
                OutString(465,0,bascur.BaseCur1,false);
              end;
              if (RepSpec.flags[15]==0) then begin
                OutVal(3,0,ivnvat,M4Val,true);
                OutVal(4,0,bc1iv,M4Val,true);
                OutString(465,0,bascur.BaseCur1,false);
              end;
            end;
            EndFormat;
            StartFormat(10);
            EndFormat;
          end;
        if (RepSpec.ArtMode==3) then begin
          StartFormat(15);
          OutString(0,"DblCustPS2",CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr),false);
          OutDate(60,0,IVr.InvDate,false);
          OutString(120,0,IVr.Addr0,false);
//          OpM44o(120,295,0,&IVr.Addr0,M4Str,false,false);
          tstr = "";
          if (IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeNormalSpecialSales) then begin
            tstr = USetStr(2361);
          end;
          if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
            tstr = USetStr(2363);
          end;
          if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
            tstr = USetStr(2362);
          end;
          if (IVr.InvType==kInvoiceTypeInterest) then begin
            tstr = USetStr(2364);
          end;
          OutString(280,0,tstr,false);
          OutVal(4,0,iv,M4Val,true);
          if (HasMultiCurrency) then begin 
            OutString(465,0,IVr.CurncyCode,true);
          end;
          EndFormat;          
          TRr.IntYc = 201;/*IVYc*/
          TRr.Number = IVr.SerNr;
          if (ReadFirstMain(TRr,2,true)) then begin            
          end else begin
          end;
        end;
        totinv = totinv + 1;
      end;
    end;
  end;
  
  if (RepSpec.ArtMode==0) then begin
    Gray_Divider(0,1);
    if (RepSpec.flags[15]==1) then begin
      if (overviewpervatcodef) then begin
        PrintCurncyTotals(acur,av1,av2,av3,curcnt,5,6,4,170,true,RepSpec.PocketPC);
      end else begin
        PrintCurncyTotals(acur,av1,av2,av3,curcnt,5,6,4,270,true,RepSpec.PocketPC);
      end;
    end;
    if (RepSpec.flags[15]==0) then begin
      if (RepSpec.Media==mtFile) then begin
        PrintCurncyTotalsToFile(acur,av1,av2,av3,curcnt,3,270,0,400,0,460,0,-1,true,RepSpec.PocketPC);
      end else begin
        PrintCurncyTotals(acur,av1,av2,av3,curcnt,3,4,-1,270,true,RepSpec.PocketPC);
      end;
    end;
    if (RepSpec.flags[14]!=0) then begin
      if (RepSpec.flags[15]!=0) then begin
        PrintCurncyTotals(invacur,invav1,invav2,invav3,invcurcnt,5,6,4,270,true,RepSpec.PocketPC);
      end else begin
        PrintCurncyTotals(invacur,invav1,invav2,invav3,invcurcnt,3,4,-1,270,true,RepSpec.PocketPC);
      end;
    end;
    if (RepSpec.flags[12]==1) then begin
      PrintInvListTotals(bascur.BaseCur1,bascur.BaseCur2,400,bc1ivtot,bc2ivtot,bc1exvattot,bc2exvattot);
    end;
  end;
  if (RepSpec.ArtMode==3)  then begin
    Gray_Divider(0,1);
    PrintCurncyTotals(acur,av1,av2,av3,curcnt,-1,455,-1,300,true,RepSpec.PocketPC);
    if (RepSpec.flags[12]==1) then begin
      PrintInvListTotals(bascur.BaseCur1,bascur.BaseCur2,380,bc1ivtot,bc2ivtot,bc1exvattot,bc2exvattot);
    end;
  end;
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
    OutStringAdjust(380,0,USetStr(2328),true,M4Val);
    OutStringAdjust(460,0,USetStr(2329),true,M4Val);
    EndFormat;
    PrintCurncyTotals(acur,av2,av1,av3,curcnt,380,460,-1,290,true,RepSpec.PocketPC);
    if (RepSpec.flags[12]==1) then begin
      PrintInvListTotals(bascur.BaseCur1,bascur.BaseCur2,380,bc1ivtot,bc2ivtot,bc1exvattot,bc2exvattot);
    end;
  end;
  if (RepSpec.ArtMode==4) then begin
    Gray_Divider(0,1);
    if (RepSpec.flags[15]==1) then begin
      PrintCurncyTotals(acur,av1,av2,av3,curcnt,400,420,455,270,true,RepSpec.PocketPC);
    end;
    if (RepSpec.flags[15]==0) then begin
      
      PrintCurncyTotals(acur,av1,av2,av3,curcnt,3,4,-1,270,true,RepSpec.PocketPC);
    end;

    if (RepSpec.flags[12]==1) then begin
      PrintInvListTotals(bascur.BaseCur1,bascur.BaseCur2,3,bc1ivtot,bc2ivtot,bc1exvattot,bc2exvattot);
    end;
  end;
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(270,0,USetStr(26560),false);
  OutLongInt(455,0,totinv,true);
  EndFormat;

  EndJob;
  return;
end;
