external function Boolean CheckifAT2UnitSold(string,Date);
external function Boolean CheckAssetDepMatch(string,string,record RcVc,var Date);
external function Boolean CheckAssetCatMatch(string,string,string);
external procedure OneInventoryNrDepreciation(record AT2UnitVc,Integer,Integer,Date,Date,Integer,Integer,Integer,Integer,Integer,
                                              Integer,Integer,
                                              var val,var val,var val,var val,var val,var val,var val,var val,var val,var val,
                                              var val,var val,var val);
external procedure HTOBJ(string,var string);
external procedure HTClasses(string,string,var string);
external procedure HT2Per(Date, Date , var string);
external procedure HTModel(Integer,var string);
external procedure HTValuesPerMonth(Integer,var string);
external procedure HTInventoryNrs(string,string,var string);

procedure PrinTaxDeprHeader(record RcVc RepSpec)
begin      
  Integer rw;
  string 255 tstr;
  string 30 frinv,toinv;
  
  frinv = FirstInRange(RepSpec.f2,30);    
  toinv = LastInRange(RepSpec.f2,30);    
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw, tstr, 1);
  rw = rw + 1;
  HTModel(RepSpec.flags[1],tstr);
  Header(rw, tstr, 0);
  HTInventoryNrs(frinv,toinv,tstr);
  Header(rw, tstr, 1);
  rw = rw + 1;
  HTValuesPerMonth(RepSpec.Comparison,tstr);
  Header(rw, tstr, 0);
  if (nonblank(RepSpec.f1)) then begin
    tstr = USetStr(7111);
    tstr = tstr & " ";
    tstr = tstr & RepSpec.f1;
    Header(rw, tstr, 1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.AccStr)) then begin
    tstr = USetStr(7117);
    tstr = tstr & " ";
    tstr = tstr & RepSpec.AccStr;
    Header(rw, tstr, 1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.f3)) then begin
    HTClasses(RepSpec.f3,RepSpec.f3,tstr);
    Header(rw, tstr, 1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.ObjStr)) then begin
    HTOBJ(RepSpec.ObjStr,tstr);
    Header(rw, tstr, 1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.vals0)) then begin
    tstr = "5 x " & USetStr(19471) & " = " & ValToString(5*RepSpec.vals0,M4Val,ThousandSeparator,DecimalSeparator,0);
    Header(rw, tstr, 1);
    rw = rw + 1;
  end;  
  return;
end;

procedure PrintClassData(record RcVc RepSpec,string class,var vector val vtotvalues,var vector val vtotcol)
begin
  record AT2UnitVc ATUnitr;
  Boolean found,testf;
  val invdprv,invdprbef,purchval,wrofsum,wrofdeprsum,invrevdprv,invrevdprbef,thestartval,revbef;
  val assetqty,fwdassetqty,startval,wrofqty,col7,col8;
  vector val vclvalues;
  string 30 frinv,toinv;
  string 20 frcat,tocat,frNLClass,toNLClass;
  Date movddate;
  record DprModVc DMr;
  Date UsedFromDate;
 
  frinv = FirstInRange(RepSpec.f2,20);    
  toinv = LastInRange(RepSpec.f2,20);    
  frcat = FirstInRange(RepSpec.f1,20);    
  tocat = LastInRange(RepSpec.f1,20);    
  found = true;
  ATUnitr.AT2Class = class;
  ATUnitr.InventoryNr = frinv;
  while (LoopKey("AT2Class",ATUnitr,2,found)) begin
    if (ATUnitr.AT2Class!=class) then begin found = false; end;
    if (nonblank(RepSpec.f2)) then begin      
      if (ATUnitr.InventoryNr>toinv) then begin found = false; end;
    end;  
    if (found) then begin
      testf = true;
      if (nonblank(RepSpec.f1)) then begin      
        if (ATUnitr.AT2Code<frcat) then begin testf = false; end;
        if (ATUnitr.AT2Code>tocat) then begin testf = false; end;
      end;  
      if (testf) then begin
        if (CheckAssetCatMatch(ATUnitr.AT2Code,ATUnitr.AT2Class,RepSpec.f3)==false) then begin testf = false; end;
      end;
      if (testf) then begin
        if (nonblank(RepSpec.AccStr)) then begin      
          if (CheckAssetDepMatch(ATUnitr.InventoryNr,ATUnitr.DepCode,RepSpec,movddate)==false) then begin testf = false; end;
        end;  
      end;
      if (nonblank(RepSpec.ObjStr)) then begin      
        if (SetInSet(RepSpec.ObjStr,ATUnitr.Objects)==false) then begin testf = false; end;
      end;  
      if (RepSpec.flags[4]!=0) then begin
        if (ATUnitr.Activef!=0) then begin
          testf = false;
        end;
      end;
      if (RepSpec.flags[5]!=0) then begin
        if (testf) then begin
          if (CheckifAT2UnitSold(ATUnitr.InventoryNr,RepSpec.sEndDate)) then begin
            testf = false;
          end;
        end;
      end;
      if (testf) then begin      
        wrofsum = blankval;
        wrofdeprsum = blankval;
        purchval = blankval;
        startval = blankval;
        invdprv = blankval;
        invdprbef = blankval;
        invrevdprv = blankval;
        invrevdprbef = blankval;
        assetqty = blankval;
        fwdassetqty = blankval;
        thestartval = blankval;
        OneInventoryNrDepreciation(ATUnitr,0,0,RepSpec.sStartDate,RepSpec.sEndDate,
                                   RepSpec.flags[1],RepSpec.flags[7],RepSpec.flags[3],RepSpec.Comparison,2,
                                   0,0,
                                   wrofqty,wrofsum,wrofdeprsum,purchval,startval,invdprv,invdprbef,invrevdprv,invrevdprbef,revbef,fwdassetqty,assetqty,thestartval);
        UsedFromDate = ATUnitr.UsedFromDate;
        if (blankdate(UsedFromDate)) then begin
          UsedFromDate = ATUnitr.StartingDate1;
        end;
/*        
  StartFormat(15);    
   OutString(0,0,ATUnitr.InventoryNr,false);
   OutString(100,0,invdprbef,false);
   OutString(200,0,wrofsum,false);
   OutString(300,0,wrofdeprsum,false);
  EndFormat;
*/
        if (DateInRange(UsedFromDate,RepSpec.sStartDate,RepSpec.sEndDate)) then begin
          vclvalues["PUTINUSEPURVAL"] = vclvalues["PUTINUSEPURVAL"] + ATUnitr.Quantity*ATUnitr.PurchVal;
        end else begin
          vclvalues["FWDBALPURVAL"] = vclvalues["FWDBALPURVAL"] + ATUnitr.Quantity*ATUnitr.PurchVal;
          vclvalues["FWDBALDPRVAL"] = vclvalues["FWDBALDPRVAL"] + invdprbef;
        end;
        vclvalues["DISPOSALS"] = vclvalues["DISPOSALS"] + (wrofsum - wrofdeprsum);

        if (wrofdeprsum<=0) then begin
          vclvalues["DPRVAL"] = vclvalues["DPRVAL"] + invdprv;
        end;
        if (DMr.DeprPerc<=0) then begin
          DMr.Code = ATUnitr.Model1;
          if (ReadFirstMain(DMr,1,true)) then begin end;
        end;
      end;
    end;
  end;
  col8 = vclvalues["FWDBALPURVAL"]-vclvalues["FWDBALDPRVAL"]+vclvalues["PUTINUSEPURVAL"]-vclvalues["DISPOSALS"]-vclvalues["DPRVAL"];
  col7 = vclvalues["DPRVAL"];
  if (RepSpec.vals0!=0) then begin
    if (col8<5*RepSpec.vals0) then begin
      col8 = 0;
      col7 = vclvalues["FWDBALPURVAL"]-vclvalues["FWDBALDPRVAL"]+vclvalues["PUTINUSEPURVAL"]-vclvalues["DISPOSALS"];
    end;
  end;
  StartFormat(15);    
   if (blank(class)) then begin
     OutString(0,0,USetStr(19469),false);
   end else begin
     OutString(0,0,class,false);
   end;
   OutVal(2,0,vclvalues["FWDBALPURVAL"]-vclvalues["FWDBALDPRVAL"],M4Val,true);
   OutVal(3,0,vclvalues["PUTINUSEPURVAL"],M4Val,true);
   OutVal(4,0,vclvalues["DISPOSALS"],M4Val,true);
   OutVal(5,0,vclvalues["FWDBALPURVAL"]-vclvalues["FWDBALDPRVAL"]+vclvalues["PUTINUSEPURVAL"]-vclvalues["DISPOSALS"],M4Val,true);
   OutVal(6,0,DMr.DeprPerc,M4Val,true);
   OutVal(9,0,col7,M4Val,true);   
   OutVal(1,0,col8,M4Val,true);
  EndFormat;
  
  vtotvalues["FWDBALPURVAL"] = vtotvalues["FWDBALPURVAL"] + vclvalues["FWDBALPURVAL"];
  vtotvalues["FWDBALDPRVAL"] = vtotvalues["FWDBALDPRVAL"] + vclvalues["FWDBALDPRVAL"];
  vtotvalues["PUTINUSEPURVAL"] = vtotvalues["PUTINUSEPURVAL"] + vclvalues["PUTINUSEPURVAL"];
  vtotvalues["DISPOSALS"] = vtotvalues["DISPOSALS"] + vclvalues["DISPOSALS"];
  vtotvalues["DPRVAL"] = vtotvalues["DPRVAL"] + vclvalues["DPRVAL"];
  vtotcol[8] = vtotcol[8] + col8;
  vtotcol[7] = vtotcol[7] + col7;
  return;
end;

global
procedure TaxDeprRn(record RcVc RepSpec)
begin
  record AC2Block AC2b;
  row AC2Block AC2brw;
  Integer i,rwcnt;
  Boolean testf;
  string 255 frcl,tocl;
  vector val vtotvalues;
  vector val vtotcol;
  
  BlockLoad(AC2b);
  StartReportJob(USetStr(19460));
  PrinTaxDeprHeader(RepSpec);
  EndHeader;
  frcl = FirstInRange(RepSpec.f3,20);    
  tocl = LastInRange(RepSpec.f3,20);    

  SetRepCol(2,120);
  SetRepCol(3,180);
  SetRepCol(4,240);
  SetRepCol(5,300);
  SetRepCol(6,360);
  SetRepCol(9,420);
  StartFormat(15);    
   OutString(0,0,USetStr(19461),false);
   OutString(2,0,USetStr(19462),true);
   OutString(3,0,USetStr(19463),true);
   OutString(4,0,USetStr(19464),true);
   OutString(5,0,USetStr(19465),true);
   OutString(6,0,USetStr(19466),true);
   OutString(9,0,USetStr(19467),true);
   OutString(1,0,USetStr(19468),true);
  EndFormat;
  Gray_Divider(0,1);
  rwcnt = MatRowCnt(AC2b);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(AC2b,i,AC2brw);
    testf = true;
    if (nonblank(RepSpec.f3)) then begin
      if (AC2brw.Code<frcl) then begin testf = false; end;
      if (AC2brw.Code>tocl) then begin testf = false; end;
    end;
    if (testf) then begin
      PrintClassData(RepSpec,AC2brw.Code,vtotvalues,vtotcol);
    end;
  end;
  PrintClassData(RepSpec,"",vtotvalues,vtotcol);
  Gray_Divider(0,1);
  StartFormat(15);    
   OutString(0,0,USetStr(19470),false);
   OutVal(2,0,vtotvalues["FWDBALPURVAL"]-vtotvalues["FWDBALDPRVAL"],M4Val,true);
   OutVal(3,0,vtotvalues["PUTINUSEPURVAL"],M4Val,true);
   OutVal(4,0,vtotvalues["DISPOSALS"],M4Val,true);
   OutVal(5,0,vtotvalues["FWDBALPURVAL"]-vtotvalues["FWDBALDPRVAL"]+vtotvalues["PUTINUSEPURVAL"]-vtotvalues["DISPOSALS"],M4Val,true);
   OutVal(9,0,vtotcol[7],M4Val,true);
//   OutVal(1,0,vtotvalues["FWDBALPURVAL"]-vtotvalues["FWDBALDPRVAL"]+vtotvalues["PUTINUSEPURVAL"]-vtotvalues["DISPOSALS"]-vtotvalues["DPRVAL"],M4Val,true);
   OutVal(1,0,vtotcol[8],M4Val,true);
  EndFormat;
  EndJob;
  return;
end;