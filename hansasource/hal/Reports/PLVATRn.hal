external function roundmode GetVATRoundModeRB();
external function roundmode DefaultRoundMode();
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure VATBaseMulRate(record SMVc,string,val,val,val,val,val,Integer);
external procedure AddVATVat(var record SMVc,string,val,Integer);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure HTOKF(Integer,Integer, var string);
external procedure HTLevCat(string, var string);
external procedure HTInv(string,var string);
external procedure HTInvLTypes(Integer,Integer,var string);
external procedure HT2Per(Date, Date , var string);
external procedure SetupVATBase(var record SMVc,var Integer);
external function val FindVAT(string,val,Integer,Integer);

procedure FindVATExVatpr(string VATCode,var val ExVatpr)
BEGIN
  record VATCodeBlock VATr;
  row VATCodeBlock VATrw;
  Integer i,rwcnt;
  
  BlockLoad(VATr);
  rwcnt = MatRowCnt(VATr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATr,i,VATrw);
    if (VATCode==VATrw.VATCode) then begin
      ExVatpr = VATrw.ExVatpr;
      goto LFindVATExVatpr;
    end;
  end;
LFindVATExVatpr:;  
  RETURN;
END;

procedure AddActualVATVat(var record SMVc SMr,string vatcode,val t,Integer vatcnt)
BEGIN
  row SMVc SMrw;
  Integer i;
  
  for (i=0; i<vatcnt; i=i+1) begin
    MatRowGet(SMr,i,SMrw);          
    if (SMrw.VATCode==VATCode) then begin
      SMrw.CredVal2 = SMrw.CredVal2 + t;
      MatRowPut(SMr,i,SMrw);
      goto LAddActualVATVat;
    end;
  end;      
LAddActualVATVat:;
  RETURN;
END;

procedure AddActualVATBase(var record SMVc SMr,string vatcode,val t,val vatval,Integer vatcnt,Integer InclVAT)
BEGIN
  row SMVc SMrw;
  Integer i;
  record RoundBlock RoundRec;
  val vatv,tax1;
  
  BlockLoad(RoundRec);
  for (i=0; i<vatcnt; i=i+1) begin
    MatRowGet(SMr,i,SMrw);          
    if (SMrw.VATCode==VATCode) then begin
      SMrw.DebVal2 = SMrw.DebVal2 + t;
      if (vatval!=0) then begin
        SMrw.CredVal2 = SMrw.CredVal2 + vatval;
      end else begin
//        MulVATIV(vatcode,t,vatv,tax1,InclVAT,0);
//        vatv = Round(vatv,DefaultRoundMode);        
//        SMrw.CredVal2 = SMrw.CredVal2 + vatval;
//        tax1 = Round(tax1,DefaultRoundMode);
//        SMrw.CurCredVal = SMrw.CurCredVal + tax1;
      end;
      MatRowPut(SMr,i,SMrw);
      goto LAddActualVATBase;
    end;
  end;      
LAddActualVATBase:;
  RETURN;
END;

procedure PrintVCRline(record RcVc RepSpec,string vatcode,string comment,val vbvalp,val vbvalp2,val vatval,Integer InclVAT,var val sump,Integer negval)
BEGIN
  val t,t1,t2,vatv;
  Integer i,rwcnt;
  val vb,vv;
  

  t = FindVAT(vatcode,vbvalp,InclVAT,0); 
  t = Round(t,GetVATRoundModeRB);
  if (InclVAT>0) then begin
    vatv = vbvalp - t;
  end;  
  if (sump!=0) then begin
    t = sump;
  end else begin
    sump = t;
  end;  
  if (RepSpec.flags[9]==0) then begin
    if ((t==0) and (vbvalp==0) and (vbvalp2==0)) then begin
      goto LPrintVCRline;
    end;
  end;  
  StartFormat(15);
  OutString(120,0,vatcode,false);
  OutString(160,0,comment,false);


  t2 = vbvalp + vbvalp2 + t + vatval;

//StopAlert( " t2 " & t2 & " vbvalp " & vbvalp & " vbvalp2 " & vbvalp2 & " vatval " & vatval & " t " & t);

  FindVATExVatpr(vatcode,t1);  

  if (negval <> 1) then begin
    OutVal(260,0,t2,M4Val,true);
    OutVal(340,0,vbvalp+vbvalp2,M4Val,true);
    OutVal(400,0,t1,M4Val,true);
    OutVal(480,0,t+vatval,M4Val,true);
  end else begin
    OutVal(260,0,-t2,M4Val,true);
    OutVal(340,0,-(vbvalp+vbvalp2),M4Val,true);
    OutVal(400,0,t1,M4Val,true);
    OutVal(480,0,-(t+vatval),M4Val,true);
  end;  
  EndFormat;
LPrintVCRline:;
  RETURN;
END;

procedure AddPaymentsVAT(record VIVc VIr,record SMVc VATTmpr,Integer locvatcnt,record SMVc VATTotr,Integer totvatcnt,Date startdate,Date enddate,
                         var val novcsum,var Boolean rowtestf,var val tmpPayVal,var Date paydate)
begin
  Integer i,oprwcnt;
  Integer j,virwcnt;
  row VIVc VIrw;
  record OPrsVc OPrsr;
  Boolean found;
  record OPVc OPr;
  row OPVc OPrw;
  val tnv,v,vv;
  
  paydate = "";
  virwcnt = MatRowCnt(VIr);  
  OPrsr.VINr = VIr.SerNr;
  OPrsr.TransType = 1;
  OPrsr.TransDate = startdate;
  found = true;
  while (LoopKey("VIDateKey",OPrsr,3,found)) begin
    if (OPrsr.VINr!=VIr.SerNr) then begin found = false; end;
    if (OPrsr.TransType!=1) then begin found = false; end;
    if (OPrsr.TransDate>enddate) then begin found = false; end;
    if (found) then begin
      OPr.SerNr = OPrsr.TransNr;
      if (ReadFirstMain(OPr,1,true)) then begin
        paydate = OPr.TransDate;
        oprwcnt = MatRowCnt(opr);  
        for (i=0;i<oprwcnt;i=i+1) begin
          MatRowGet(OPr,i,OPrw);
          for (j=0;j<virwcnt;j=j+1) begin
            MatRowGet(VIr,j,VIrw);
            tnv = VIrw.Sum*(OPrw.PInvVal/VIr.PayVal);
            v = MulRateToBase1(VIr.CurncyCode,tnv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);              
            if (nonblank(VIrw.VATCode)) then begin
              if (VIrw.VATVal!=0) then begin
                AddActualVATBase(VATTmpr,VIrw.VATCode,tnv,VIrw.VATVal,locvatcnt,VIr.NoTAXonVAT);
                vv = MulRateToBase1(VIr.CurncyCode,VIrw.VATVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);              
                AddActualVATBase(VATTotr,VIrw.VATCode,v,vv,totvatcnt,VIr.NoTAXonVAT);
              end else begin
                AddVATBase(VATTmpr,VIrw.VATCode,tnv,blankval,locvatcnt,0,VIr.NoTAXonVAT);
                AddVATBase(VATTotr,VIrw.VATCode,v,blankval,totvatcnt,0,VIr.NoTAXonVAT);
              end;
              rowtestf = true;
            end else begin
              novcsum = novcsum + VIrw.Sum;
            end;
          end;
          tmpPayVal = tmpPayVal + OPrw.PInvVal;
        end;
      end;
    end;
  end;
  return;
end;              

global
procedure PLVATRn(record RcVc RepSpec)
BEGIN
  record VIVc VIr;
  row VIVc VIrw;  
  record CUVc VEr;
  record OPrsVc OPrsr;
  record SMVc VATTotr;
  record SMVc VATTmpr;
  row SMVc VATrw;
  Boolean TrHs;
  Boolean vefound,testf,rowtestf;
  string 255 tstr;
  string 255 ckey;
  LongInt afr,ato,transcnt;
  Integer i,rwcnt,datesort;
  Integer firstvcode,keys;
  Integer totvatcnt,locvatcnt,rw;
  Integer locvatactcnt;
  val totnovcsum,totvval,totnvval;
  val svatval,tmpVATVal;
  val vbsum,totsum;
  val novcsum,t,t1;
  val v,tmpPayVal;
  record APAccBlock APAccb;
  Integer OPBookVAT;
  Date paydate;

  BlockLoad(APAccb);
  transcnt = 0;
  SetupVATBase(VATTotr,totvatcnt);
  afr = FirstInRange(RepSpec.f1,10);
  ato = LastInRange(RepSpec.f1,10);    
  if (RepSpec.flags[7]!=0) then begin
    datesort = 1;
  end;  
  StartReportJob(USetStr(5220));
   rw = 1;    
   HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   HTInvLTypes(RepSpec.flags[5],RepSpec.flags[6],tstr);
   Header(rw,tstr,0);   
   HTInv(RepSpec.f1,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   HTLevCat(RepSpec.f3,tstr);
   if (nonblank(RepSpec.f3)) then begin
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
   HTOKF(RepSpec.flags[2],RepSpec.flags[1],tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
  EndHeader;
  StartFormat(15);
  OutString(0,0,USetStr(5221),false);
  OutString(80,0,USetStr(5222),false);
  OutString(160,0,USetStr(5223),false);
  OutString(240,0,USetStr(5224),false);
  EndFormat;
  StartFormat(15);
  OutString(15,0,USetStr(5232),false);
  OutString(80,0,USetStr(5225),false);
  OutString(160,0,USetStr(5226),false);
  OutString(240,0,USetStr(5227),false);
  EndFormat;
  if (datesort!=0) then begin
    OPrsr.VINr= afr;
    OPrsr.TransType = -1;
    OPrsr.TransNr = afr;
    OPrsr.TransDate = RepSpec.sStartDate;
    keys = 4;
    ckey = "VIKey";
    
    ckey = "TransDate";
    VIr.TransDate = RepSpec.sStartDate;
    VIr.SerNr = afr;
    keys = 2;
  end else begin
    OPrsr.VINr = afr;
    keys = 1;
    ckey = "VIKey";

    ckey = "SerNr";
    VIr.SerNr = afr;
    keys = 1;
  end;
  Gray_Divider(0,1);
  TrHs = true;
  while (LoopKey(ckey,VIr,keys,TrHs)) begin
//    switch (OPrsr.TransType) begin
//      case 0: 
/*
        if (datesort==0) then begin
          if (ato!=-1) then begin
             if (OPrsr.VINr>ato) then begin
               TrHs = false;
             end;
          end;
        end;
        VIr.SerNr = OPrsr.TransNr;
        if (ReadFirstMain(VIr,1,true)==false) then begin goto L11; end;
*/        
        if (datesort!=0) then begin
          if (VIr.TransDate>RepSpec.sEndDate) then begin
            TrHs = false;
          end;
        end;
        if (ato!=-1) then begin
          if (VIr.SerNr>ato) then begin
            TrHs = false;
          end;
        end;
        if (TrHs) then begin
          testf = true;
          switch (VEr.OPBookVAT) begin
            case 1:
              OPBookVAT = 1;
            case 2:
              OPBookVAT = 0;
            otherwise
              OPBookVAT = APAccb.OPBookVAT;
          end;
          if (OPBookVAT==0) then begin
            if (DateInRange(VIr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin 
              testf = false;
            end;
          end;
          if (afr!=-1) then begin
            if (VIr.SerNr<afr) then begin testf = false; end;
          end; 
          if (ato!=-1) then begin
            if (VIr.SerNr>ato) then begin testf = false; end;
          end; 
          if (RepSpec.flags[1]==0) then begin
            if (VIr.OKFlag!=0) then begin testf = false; end;
          end; 
          if (RepSpec.flags[2]==0) then begin
            if (VIr.OKFlag==0) then begin testf = false; end;
          end; 
          if (RepSpec.flags[5]==0) then begin
            if (VIr.InvType!=kInvoiceTypeCredit and VIr.InvType!=kInvoiceTypeCreditSpecialSales) then begin testf = false; end;
          end; 
          if (RepSpec.flags[6]==0) then begin
            if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin testf = false; end;
          end; 
          VEr.Code = VIr.VECode;
          vefound = ReadFirstMain(VEr,1,true);
          if (testf) then begin
            if (nonblank(RepSpec.f3)) then begin
              if (RepSpec.f3!=VEr.VECat) then begin testf = false; end;
            end;
          end;
          if (VIr.Invalid!=0) then begin testf = false; end;
          if (testf) then begin
            svatval = blankval;
            SetupVATBase(VATTmpr,locvatcnt);
            rowtestf = false;
            novcsum = blankval;
            tmpPayVal = blankval;
            if (OPBookVAT!=0) then begin
              AddPaymentsVAT(VIr,VATTmpr,locvatcnt,VATTotr,totvatcnt,RepSpec.sStartDate,RepSpec.sEndDate,novcsum,rowtestf,tmpPayVal,paydate);
            end else begin
              rwcnt = MatRowCnt(VIr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(VIr,i,VIrw);
                if (VIrw.stp==1) then begin
                  if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin 
                    VIrw.Sum = - VIrw.Sum;
                  end;  
                  if (nonblank(VIrw.VATCode)) then begin
                    v = MulRateToBase1(VIr.CurncyCode,VIrw.Sum,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
                    if (VIrw.VATVal!=0) then begin
                      AddActualVATBase(VATTmpr,VIrw.VATCode,VIrw.Sum,VIrw.VATVal,locvatcnt,VIr.NoTAXonVAT);
                      t = MulRateToBase1(VIr.CurncyCode,VIrw.VATVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
                      AddActualVATBase(VATTotr,VIrw.VATCode,v,t,totvatcnt,VIr.NoTAXonVAT);                    
                    end else begin
                      AddVATBase(VATTmpr,VIrw.VATCode,VIrw.Sum,blankval,locvatcnt,0,VIr.NoTAXonVAT);
                      AddVATBase(VATTotr,VIrw.VATCode,v,blankval,totvatcnt,0,VIr.NoTAXonVAT);
                    end;
                    rowtestf = true;
                  end else begin
                    novcsum = novcsum + VIrw.Sum;
                  end;
                end;
              end;
            end;
            novcsum = svatval;        
            for (i=0;i<locvatcnt;i=i+1) begin
              MatRowGet(VATTmpr,i,VATrw);
              if (VATrw.DebVal!=0) then begin
                MulVATIV(VATrw.VATCode,VATrw.DebVal,t,t1,0,VIr.NoTAXonVAT);
                t = Round(t,GetVATRoundModeRB);
                AddVATVat(VATTmpr,VATrw.VATCode,t,locvatcnt);
                if (t!=0) then begin
                  if (VIr.ExportFlag!=2) then begin
                    svatval = svatval + t;
                    firstvcode = i;
                  end;
                end;
              end;
              if (VATrw.DebVal2!=0) then begin
                t = Round(VATrw.CredVal2,DefaultRoundMode);
                if (t!=0) then begin
                  if (VIr.ExportFlag!=2) then begin
                    svatval = svatval + t;
                    firstvcode = i;
                  end;
                end;
              end;
            end;
            if (VIr.VATVal!=0) then begin
              MatRowGet(VATTmpr,firstvcode,VATrw);
              if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                svatval = VIr.VATVal + svatval;
              end else begin
                svatval = VIr.VATVal - svatval;
              end;
              AddActualVATVat(VATTmpr,VATrw.VATCode,svatval,locvatcnt);
              AddActualVATVat(VATTotr,VATrw.VATCode,svatval,locvatcnt);
            end;

            if (rowtestf) then begin
              VATBaseMulRate(VATTmpr,VIr.CurncyCode,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,
                             VIr.BaseRate1,VIr.BaseRate2,locvatcnt);
                if (novcsum!=0) then begin
                  novcsum = MulRateToBase1(VIr.CurncyCode,novcsum,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,
                                        VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
                end;
                Gray_Divider(0,1);
                transcnt = transcnt + 1;
                StartFormat(15);
                OutLongInt(0,"DblVIVc",VIr.SerNr,false);
                if (OPBookVAT!=0) then begin
                  OutDate(80,0,paydate,false);
                end else begin
                  OutDate(80,0,VIr.TransDate,false);
                end;
                OutString(160,0,VIr.VECode,false);
                OutString(240,0,VIr.VEName,false);
                EndFormat;
                tstr = VEr.InvAddr0;
                if (nonblank(VEr.InvAddr1)) then begin
                  tstr = tstr & ", ";
                  tstr = tstr & VEr.InvAddr1;
                end;
                if (nonblank(VEr.InvAddr2)) then begin
                  tstr = tstr & ", ";
                  tstr = tstr & VEr.InvAddr2;
                end;
                StartFormat(15);
                OutString(15,0,VIr.InvoiceNr,false);
                OutDate(80,0,VIr.InvDate,false);
                OutString(160,0,VEr.VATNr,false);
                OutString(240,0,tstr,false);
                EndFormat;
                if (HasLocalization("ROU")) then begin//vatRomanian
                  val vval,nvval;
                  Boolean vatflag;

                  for (i=0;i<locvatcnt;i=i+1) begin
                    MatRowGet(VATTmpr,i,VATrw);
                    if (VATrw.DebVal!=0) then begin
//                      and  (M4ValZeroTest(&vcrp[i].ExVatpr)==0)) then
                      vatflag = true;
                    end;
                  end;
                  if (vatflag) then begin
                    vval = VIr.PayVal;
                    nvval = blankval;
                  end else begin
                    vval = blankval;
                    nvval = VIr.PayVal;
                  end;
                  totvval = totvval + vval;
                  totnvval = totnvval + nvval;
                  StartFormat(15);
                  OutLongInt(15,0,transcnt,false);
                  OutVal(200,0,vval,M4Val,true);
                  OutVal(300,0,nvval,M4Val,true);
                  EndFormat;
                end;
                StartFormat(10);
                EndFormat;
                StartFormat(15);
                OutString(120,0,USetStr(5208),false);
                OutString(340,0,USetStr(5209),true);
                OutString(400,0,USetStr(5210),true);
                OutString(480,0,USetStr(5211),true);
                EndFormat;
                Gray_Divider(120,480);
                for (i=0;i<locvatcnt;i=i+1) begin
                  MatRowGet(VATTmpr,i,VATrw);
                  t = 0;
                  //we have to calculate from positive value in it is credit invoice, othewise
                  //we get rounding problem: 
                  //total amount 2767.13 VAT 17.5 % vat amount 412.13
                  //credit total amount -2767.13 VAT 17.5 % vat amount -412.12, but it has to be 412.13 
                  if (VATrw.DebVal<0) or (VATrw.DebVal2<0) then begin

                    PrintVCRline(RepSpec,VATrw.VATCode,VATrw.Comment,-VATrw.DebVal,-VATrw.DebVal2,-VATrw.CredVal2,0,t,1);
                  end else begin
                    PrintVCRline(RepSpec,VATrw.VATCode,VATrw.Comment,VATrw.DebVal,VATrw.DebVal2,VATrw.CredVal2,0,t,0);
                  end;  
                end;
                totnovcsum = totnovcsum + novcsum;
                Gray_Divider(120,480);
                switch (VEr.OPBookVAT) begin
                  case 1:
                    OPBookVAT = 1;
                  case 2:
                    OPBookVAT = 0;
                  otherwise
                    OPBookVAT = APAccb.OPBookVAT;
                end;
                if (OPBookVAT!=0) then begin
                  CalcVATBaseVAT(VATTmpr,0,0,locvatcnt,tmpVATVal,t1);
                end else begin
                  if (VIr.VATVal!=0) then begin
                    tmpVATVal = VIr.VATVal;
                  end else begin
                    tmpVATVal = VIr.CalcVATVal;
                  end;
                  tmpPayVal = VIr.PayVal;
                end;
                StartFormat(15);
                OutString(340,0,USetStr(5233),false);
                if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                  OutVal(480,0,tmpVATVal,M4NegVal,true);
                end else begin
                  OutVal(480,0,tmpVATVal,M4Val,true);
                end;
                EndFormat;
                StartFormat(15);
                OutString(340,0,USetStr(5234),false);
                if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                  OutVal(480,0,tmpPayVal,M4NegVal,true);
                end else begin
                  OutVal(480,0,tmpPayVal,M4Val,true);
                end;
                EndFormat;
            end;
          end;
          
        end;
//    end;    
L11:;    
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  EndFormat;  
  StartFormat(15);
  OutString(120,0,USetStr(5208),false);
  OutString(340,0,USetStr(5209),true);
  OutString(400,0,USetStr(5210),true);
  OutString(480,0,USetStr(5211),true);
  EndFormat;  
  Gray_Divider(0,1);
  vbsum = blankval;
  totsum = blankval;
  for (i=0;i<totvatcnt;i=i+1) begin
    MatRowGet(VATTotr,i,VATrw);
    t = 0;
    if (VATrw.DebVal<0) then begin
      PrintVCRline(RepSpec,VATrw.VATCode,VATrw.Comment,-VATrw.DebVal,-VATrw.DebVal2,-VATrw.CredVal2,0,t,1);
      totsum = totsum - t;
    end else begin
      PrintVCRline(RepSpec,VATrw.VATCode,VATrw.Comment,VATrw.DebVal,VATrw.DebVal2,VATrw.CredVal2,0,t,0);
      totsum = totsum + t;
    end;
    vbsum = vbsum + VATrw.DebVal;
  end;
  Gray_Divider(120,480);
  StartFormat(15);
  OutVal(340,0,vbsum,M4Val,true);
  OutVal(480,0,totsum,M4Val,true);
  EndFormat;
  totsum = totsum + vbsum;
  StartFormat(15);
  OutVal(480,0,totsum,M4Val,true);
  EndFormat;
  EndJob;
  RETURN;
END;