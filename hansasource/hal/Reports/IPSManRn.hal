external procedure HT2Per(Date, Date , var string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);


procedure PrintFirstRow(record IVVc IVr,integer WithoutVat)
begin
  val basesum;
  
  StartFormat(15);
  OutString(0,"DblCustPS2",IVr.SerNr,false);
  OutString(2,0,IVr.InvDate,false);
  OutString(4,0,IVr.CustCode,false);
  OutString(6,0,IVr.Addr0,false);
  OutString(1,0,IVr.SalesMan,true);
  EndFormat;
  StartFormat(15);     
  OutString(2,0,USetStr(9666) & ":",false);
  OutString(6,0,IVr.CurncyCode,false);
  if (WithoutVat==1) then begin
    if (IVr.InclVAT!=1) then begin
      OutVal(8,0,IVr.Sum1,M4Val,true);
      basesum = MulRateToBase1(IVr.CurncyCode,IVr.Sum1,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    end else begin
      OutVal(8,0,IVr.Sum4-IVr.Sum3,M4Val,true);
      basesum = MulRateToBase1(IVr.CurncyCode,IVr.Sum4-IVr.Sum3,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    end;  
  end else begin
    OutVal(8,0,IVr.Sum4,M4Val,true);
    basesum = IVr.BaseSum4;
  end;    
  OutVal(1,0,basesum,M4Val,true);
  EndFormat;
  Gray_divider(0,1);
  return;
end;

global 
procedure IPSalesManRn(record RcVc RepSpec)
begin
  String 255 tstr;
  Record IVVc IVr;
  Row IVVc IVrw;
  Record IPrsVc IPrsr,IPrsr2;
  Record IPVc IPr;
  Row IPVc IPrw;
  Record SMVc SMr;//as array
  Row SMVc SMrw,SMrw1;
  Integer SMmax,SMcr;
  Date d1,d2;
  Boolean testf, TrHs,TrHs2,FirstRow,SMFound,fflag;
  Integer amr,i,rw,rwcnt;
  longint prnr,LastRec;
  Val s1,s2,cv;
  array longint invoices;
  longint maxar,j;
  val frrate,torate1,torate2,baserate1,baserate2;
        
  d1 = RepSpec.sStartDate;
  d2 = RepSpec.sEndDate;
 
 //----------------Header----------------------
  rw=1; 
  StartReportJob(USetStr(9655));
  HT2Per(d1,d2,tstr);
  Header(rw,tstr,1);
  rw=rw+1;
  if (nonblank(RepSpec.f1)) then begin
  tstr = USetStr(9656) & ": " & RepSpec.f1; 
  Header(rw,tstr,1);
  rw=rw+1;  
  end;
  if (nonblank(RepSpec.ObjStr)) then begin
  tstr = USetStr(9657) & ": " & RepSpec.ObjStr; 
  Header(rw,tstr,1);
  rw=rw+1;  
  end;
    
  EndHeader; 
   
  SetRepCol(2,50);
  SetRepCol(4,115);
  SetRepCol(6,180);  
  SetRepCol(7,270);  
  SetRepCol(8,360);
  
  StartFormat(15);
  OutString(0,0,USetStr(9658),false);
  OutString(2,0,USetStr(9659),false);
  OutString(4,0,USetStr(9660),false);
  OutString(6,0,USetStr(9661),false);
  OutString(1,0,USetStr(9656),true);
  EndFormat;
  StartFormat(18);
  OutString(6,0,USetStr(9662),false);
  OutString(8,0,USetStr(9663),true);
  OutString(1,0,USetStr(9664),true);
  EndFormat;

  Black_divider(0,1);

//--------------

  IPrsr.TransDate = d1;
//  IPrsr.TransType = 1;
  TrHs = true;
  SMMax = 0;
  RecordNew(SMr); 
  
  maxar = 0;
  while (LoopKey("TransDate",IPrsr,1,TrHs)) begin  //Main
    if (IPrsr.TransDate>d2) then begin
      TrHs = false;
    end else begin
      if (IPrsr.IVNr>0) then begin
        fflag = false;    
        for (j=0;j<maxar;j=j+1) begin
          if (IPrsr.IVNr==invoices[j]) then begin
            fflag = true;
            j = maxar;
          end;
        end;
        if (fflag==false) then begin
          invoices[maxar] = IPrsr.IVNr;
          maxar = maxar + 1;
        end;
      end;
    end;
  end;       
      
  for (j=0;j<maxar;j=j+1) begin        
    //-----------------Invoice block
    IVr.SerNr = invoices[j];
    testf = true;
    if (ReadFirstMain(IVr,1,true)) then begin
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,IVr.Objects)==false) then begin
          testf = false;
          rwcnt = MatRowCnt(IVr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVr,i,IVrw);
            if (SetInSet(RepSpec.ObjStr,IVrw.Objects)) then begin
              testf = true;
            end;
          end;
        end;
      end;   
      if (nonblank(RepSpec.f1)) then begin
        if (SetInSet(RepSpec.f1,IVr.SalesMan)==false) then begin testf = false; end;
      end;      
      if (testf) then begin
        FirstRow = true;
        s1 = 0;
        s2 = 0;
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          if (IVrw.stp==kInvoiceRowTypePrepayment) then begin
            if (FirstRow) then begin
              PrintFirstRow(IVr,RepSpec.flags[1]);
              Firstrow = false;
            end;
            cv = MulRateToBase1(IVr.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            StartFormat(15);
            OutString(0,0,USetStr(7812),false);
            OutString(6,0,IVr.CurncyCode,false);
            OutVal(8,0,IVrw.Sum,M4Val,true);
            OutVal(1,0,cv,M4Val,true);
            EndFormat;
          end;          
        end;
      end;
      
      //-------------------receipt block--------------
      if (testf) then begin  
        IPrsr2.IVNr = IVr.SerNr;
        IPrsr2.TransType = 1;
        ResetLoop(IPrsr2); 
        TrHs2 = true;   
        prnr = 0;
        while (LoopKey("IVKey",IPrsr2,2,TrHs2)) begin  //Main2
          if (IPrsr2.IVNr>IVr.SerNr or IPrsr2.TransType==kIPrsTransTypeInvoice) then begin               
            TrHs2 = false;
          end else begin
            if (IPrsr2.TransNr!=prnr) then begin  //??
              prnr = IPrsr2.TransNr;
              IPr.SerNr = IPrsr2.TransNr;
              ResetLoop(IPr); 
              if (ReadFirstMain(IPr,1,true)) then begin
                amr = MatrowCnt(IPr);
                for (i=0;i<amr;i=i+1) begin
                  MatRowGet(IPr,i,IPrw);
                  if (IPrw.InvoiceNr==IVr.SerNr and IPr.TransDate>=d1 and IPr.TransDate<=d2) then begin
                    if (FirstRow) then begin
                      PrintFirstRow(IVr,RepSpec.flags[1]);
                      Firstrow = false;
                    end;
                    GetFullCurncyRate(IPrw.BankCurncy,IPr.TransDate,frrate,torate1,torate2,baserate1,baserate2);
                    cv = MulRateToBase1(IPrw.BankCurncy,IPrw.BankVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
                    StartFormat(15);
                    OutString(0,0,USetStr(9667),false);
                    OutLongInt(2,"DblCuPerIP",IPr.SerNr,false);
                    OutDate(4,0,IPrw.PayDate,false);
                    OutString(6,0,IPrw.RecCurncy,false);
                    OutVal(8,0,IPrw.RecVal,M4Val,true);
                    OutVal(1,0,cv,M4Val,true);
                    EndFormat;
                  end;
                end;//for
              end; 
            end;
          end;//else
        end;//while
        if (Firstrow==False) then begin
          Gray_divider(100,1);
          StartFormat(20);
          if (RepSpec.flags[1]==1) then begin
            OutString(6,0,USetStr(9668) & " " & USetStr(14348),false);
            if (IVr.InclVAT!=1) then begin
              s1 = IVr.Sum1;
            end else begin
              s1 = IVr.Sum4 - IVr.Sum3;
            end;  
            s2 = MulRateToBase1(IVr.CurncyCode,s1,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          end else begin
            OutString(6,0,USetStr(9668),false);
            s1 = IVr.Sum4;
            s2 = MulRateToBase1(IVr.CurncyCode,s1,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          end;  
          OutVal(8,0,s1,M4Val,true);
          if (RepSpec.flags[1]==1) then begin
            OutVal(1,0,s2,M4Val,true);
          end;  
          EndFormat; 
          Black_divider(0,1);
         //salesman sums
          SMFound = False;
          if (SMMax>0) then begin   
            for (SMcr=0;SMcr<SMmax;SMcr=SMcr+1) begin
              MatRowGet(SMr,SMcr,SMrw);
              if (SMrw.Objects==IVr.SalesMan and SMrw.CurncyCode==IVr.CurncyCode) then begin
                SMFound = True;
                SMrw.DebVal = SMrw.DebVal + s1;
                MatRowPut(SMr,SMcr,SMrw); 
              end;  
            end;
          end;
          if (SMFound==false) then begin
            SMrw.Objects = IVr.SalesMan;
            SMrw.CurncyCode = IVr.CurncyCode;
            SMrw.DebVal = s1;
            MatRowPut(SMr,SMMax,SMrw); 
            SMMax = SMMax + 1;
          end;   
        end;
      end; //if (receip block)
    end;
  end;

  for (i=0;i<SMmax-1;i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    for (j=1;j<SMmax;j=j+1) begin
      MatRowGet(SMr,j,SMrw1);
      if (SMrw1.Objects<SMrw.Objects or (SMrw1.Objects==SMrw.Objects and SMrw1.CurncyCode<SMrw.CurncyCode)) then begin
        MatRowPut(SMr,j,SMrw);
        MatRowPut(SMr,i,SMrw1);
        MatRowGet(SMr,i,SMrw);
      end;
    end;
  end;
  
  StartFormat(15);OutString(2,0," ",false);EndFormat;
  StartFormat(15);
  OutString(4,0,USetStr(9665),false);
  EndFormat;  
  Black_divider(2,1); 
  StartFormat(15);
  OutString(2,0,USetStr(9656),false);
  OutString(4,0,USetStr(9662),false);
  OutString(7,0,USetStr(9666),true);
  EndFormat; 
  Black_divider(2,1);    
  for (SMcr=0;SMcr<SMmax;SMcr=SMcr+1) begin
    MatRowGet(SMr,SMcr,SMrw);
    StartFormat(15);
    OutString(2,0,SMrw.Objects,false);
    OutString(4,0,SMrw.CurncyCode,false);
    OutVal(7,0,SMrw.DebVal,M4Val,true);
    EndFormat;
    Gray_divider(2,1);         
  end;

  EndJob;
  return;
end;
