external function string 60 AddObjectToObjectList(string,string);
external procedure PurgeTRExtYc(record PurgeTRVc,var string);
external function Boolean CheckIfIVOpen(Date,record IVVc,string,var val,Boolean,Boolean);
external procedure CUPerCustHeader(record RcVc,Integer,record CUVc,val,Integer,Integer,Integer);
external function roundmode DefaultRoundMode();
external procedure CUPer_PrintReceipt(record RcVc,record IPVc,record CUVc,record BaseCurBlock,
                             record IPrsVc,Array LongInt,var Integer,
                             var val,var val,var val,var val,var val,Integer,Integer,Integer,
                             var string,var string,var vector Boolean);
external procedure GetARAcc(string,var string);
external procedure CustListTransCLIn(record RcVc,record IPrsVc,record CUVc,var val,var val,var val,var val,Integer,Integer,Integer,
                                     var string,var string,var vector Boolean);
external procedure CustListTransCLOut(record RcVc,record IPrsVc,record CUVc,var val,var val,Integer,Integer,var string,var string,var vector Boolean);
external procedure CustListTransCredMan(record RcVc,record IPrsVc,record CUVc,var val,var val,Integer,Integer);
external procedure TRExtYc(record TRVc,var string);
external function Integer TypeOfCurncy(var string,var Integer);
external function Integer GetIntYc(Date);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external procedure BeginCurncyTotals(var Integer);
external function string 255 CreateInvoiceNumber(LongInt,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);

// moved CustListTransCLOut to CUPerTool2.hal

global
procedure GetIPPrepaymentAmount(record IVVc IVp,string basecur1,val cuscurvalp,var val lossvp,val curvalp,Integer incur,string cucurcode,var string cuperlastprepcur)
BEGIN
  record ARPayHistVc ARPayHistr;
  row IVVc IVrw;
  Integer i,rwcnt;
  val t,curv;
  LongInt lastcupno;
  Boolean foundf,onecurf;
  val cvp;
  val thesum,sumthesum;
  val bases,realbases;  
//  transaction string 10 cuperlastprepcur;//global variable crashes when export

  cvp = curvalp;
  lastcupno = -1;
  lossvp = blankval;
  rwcnt = MatRowCnt(IVp);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if ((IVrw.stp==kInvoiceRowTypePrepayment) and (IVrw.CUPNr<>lastcupno)) then begin
      thesum = IVrw.Sum;
      curv = BlankVal;
      realbases = BlankVal;
      bases = BlankVal;
      sumthesum = blankval;
      ARPayHistr.CUPNr = IVrw.CUPNr;
      ARPayHistr.FileName = "IPVc";
      onecurf = true;
      foundf = true;
      ResetLoop(ARPayHistr);
      while (LoopMain(ARPayHistr,2,foundf)) begin
        if ((ARPayHistr.CUPNr<>IVrw.CUPNr) or (ARPayHistr.FileName<>"IPVc")) then begin foundf = false; end;
        if (foundf) then begin
          if (nonblank(cuperlastprepcur)) then begin
            if (ARPayHistr.CurncyCode!=cuperlastprepcur) then begin   
              onecurf = false;
            end;
          end;
          if ((cvp>ARPayHistr.Val) and (thesum>ARPayHistr.Val)) then begin
            cvp = cvp - ARPayHistr.Val;
            thesum = IVrw.Sum - sumthesum;
            if (ARPayHistr.Val>thesum) then begin
            end else begin
              thesum = ARPayHistr.Val;
            end;
            sumthesum = sumthesum + thesum;
            curv = curv + ARPayHistr.Val;
            bases = bases + MulRateToBase1(IVp.CurncyCode,ARPayHistr.Val,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
            realbases = realbases + (ARPayHistr.BookVal*thesum)/ARPayHistr.Val;
// should thesum be converted to ARPayHistr curency ? 
          end else begin
            cvp = cvp - IVrw.Sum;
            curv = curv + ARPayHistr.Val;
            thesum = IVrw.Sum - sumthesum;
            if (ARPayHistr.Val>thesum) then begin
            end else begin
              thesum = ARPayHistr.Val;
            end;
            sumthesum = sumthesum + thesum;
            bases = bases + MulRateToBase1(IVp.CurncyCode,thesum,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
            realbases = realbases + (ARPayHistr.BookVal*thesum)/ARPayHistr.Val;
//StopAlert("realbases " & realbases & " ARPayHistr.BookVal " & ARPayHistr.BookVal & " thesum " & thesum & " ARPayHistr.Val " & ARPayHistr.Val);
            foundf = false;
          end;
          cuperlastprepcur = ARPayHistr.CurncyCode;
        end;
      end;
      ResetLoop(ARPayHistr);
      ARPayHistr.CUPNr = IVrw.CUPNr;
      ARPayHistr.FileName = "CLInVc";
      foundf = true;
      ResetLoop(ARPayHistr);
      while (LoopMain(ARPayHistr,2,foundf)) begin
        if ((ARPayHistr.CUPNr<>IVrw.CUPNr) or (ARPayHistr.FileName<>"CLInVc")) then begin foundf = false; end;
        if (foundf) then begin
          if (nonblank(cuperlastprepcur)) then begin
            if (ARPayHistr.CurncyCode!=cuperlastprepcur) then begin   
              onecurf = false;
            end;
          end;
          if ((cvp>ARPayHistr.Val) and (thesum>ARPayHistr.Val)) then begin
            cvp = cvp - ARPayHistr.Val;
            thesum = IVrw.Sum - sumthesum;
            if (ARPayHistr.Val>thesum) then begin
            end else begin
              thesum = ARPayHistr.Val;
            end;
            sumthesum = sumthesum + thesum;
            curv = curv + ARPayHistr.Val;
            bases = bases + MulRateToBase1(IVp.CurncyCode,ARPayHistr.Val,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
            realbases = realbases + (ARPayHistr.BookVal*thesum)/ARPayHistr.Val;
// should thesum be converted to ARPayHistr curency ? 
          end else begin
            cvp = cvp - IVrw.Sum;
            curv = curv + ARPayHistr.Val;
            thesum = IVrw.Sum - sumthesum;
            if (ARPayHistr.Val>thesum) then begin
            end else begin
              thesum = ARPayHistr.Val;
            end;
            sumthesum = sumthesum + thesum;
            bases = bases + MulRateToBase1(IVp.CurncyCode,thesum,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
            realbases = realbases + (ARPayHistr.BookVal*thesum)/ARPayHistr.Val;
            foundf = false;
          end;
          cuperlastprepcur = ARPayHistr.CurncyCode;
        end;
      end;

      if (onecurf) then begin
        thesum = IVrw.Sum;
      end else begin
        thesum = (IVrw.Sum*realbases)/curv;
      end;
      lossvp = lossvp - Round(bases-realbases,DefaultRoundMode); // bases-thesum, makes no sense....
      if (incur!=0) then begin
        if (cucurcode==IVp.CurncyCode) then begin
          lossvp = 0;
        end;
      end;
      if (lossvp==0) then begin
        lossvp = blankval;
      end;
      lastcupno = IVrw.CUPNr;
    end;
  end;  
  RETURN;
END;

global
procedure IVVc_GetPrePaidAmount(record IVVc IVp,var val prepvp)
BEGIN
  row IVVc IVrw;
  Integer i,rwcnt;
  
  prepvp = blankval;
  rwcnt = MatRowCnt(IVp);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (IVrw.stp==6) then begin
      prepvp = prepvp + IVrw.Sum;
    end;
  end;
  RETURN;
END;

global
procedure CUPer_PrintInvoice(record RcVc RepSpec,LongInt IVSerNr,record CUVc CUp,record BaseCurBlock bascur,
                             var val balp,var val SumDebet,var val SumCredit,var val totloss,var val totgain,
                             Integer pos1,Integer pos2,var string cuperlastprepcur,Integer fwdbalinvoices,
                             var string statmentcurrency,var string remainingcurrencies,vector Boolean vreportedcurncy)
BEGIN
  val v,cashv,cuscurval,lossv,prepv;
  row IVVc IVrw;
  Integer i,rwcnt;
  string 255 tstr;
  record IVVc IVr;
  record IVVc IV2r;
  Boolean cash;
  val frrate,torate1,torate2,baserate1,baserate2;
  val opensum;

  IVr.SerNr = IVSerNr;
  if (ReadFirstMain(IVr,1,true)==false) then begin goto LCUPer_PrintInvoice; end;
  if (RepSpec.flags[2]!=0) then begin
    if (nonblank(RepSpec.CurncyCode)) then begin
      if (IVr.CurncyCode!=RepSpec.CurncyCode) then begin goto LCUPer_PrintInvoice; end;
    end;
/*    
CURRENCIES-TODO      
    if (nonblank(statmentcurrency)) then begin
      if (IVr.CurncyCode!=statmentcurrency) then begin 
        if (vreportedcurncy[IVr.CurncyCode]==false) then begin
          remainingcurrencies = AddObjectToObjectList(remainingcurrencies,IVr.CurncyCode);        
        end;
        goto LCUPer_PrintInvoice; 
      end;
    end else begin
      statmentcurrency = IVr.CurncyCode;
    end;    
*/    
  end;
/*  
  vreportedcurncy[statmentcurrency] = true;
*/  
  if (nonblank(RepSpec.ObjStr)) then begin
    if (SetInSet(RepSpec.ObjStr,IVr.Objects)==false) then begin goto LCUPer_PrintInvoice; end;
  end;  
  if (IVr.Invalid!=0) then begin goto LCUPer_PrintInvoice; end;        
  if (IVr.InvType==kInvoiceTypePrepayment) then begin goto LCUPer_PrintInvoice; end;        
  if (nonblank(RepSpec.FirstAcc)) then begin
    if (IVr.ARAcc!=RepSpec.FirstAcc) then begin
      goto LCUPer_PrintInvoice;
    end;
  end;
  if (fwdbalinvoices==1) then begin
    if (CheckIfIVOpen(RepSpec.sEndDate,IVr,"",opensum,true,false)==false) then begin
      goto LCUPer_PrintInvoice;
    end;
  end;
  if ((IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeNormalSpecialSales) or (IVr.InvType==kInvoiceTypeInterest) or (IVr.InvType==kInvoiceTypeDownpayment) or (IVr.InvType==kInvoiceTypeDebit)) then begin
    v = IVr.Sum4;
/*    
change does not increase invoice values
    if ((IVr.RetnValue>0 and IVr.Sum4>0) or (IVr.RetnValue<0 and IVr.Sum4<0)) then begin
      v = v + IVr.RetnValue;
    end;
*/    
    cashv = 0;
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      switch (IVrw.stp) begin
        case 14: cashv = cashv + IVrw.Sum;
        case 15: cashv = cashv + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
        case 16: cashv = cashv + IVrw.Sum;
      end;
    end;
    if ((IVr.RetnValue>0 and IVr.Sum4>0) or (IVr.RetnValue<0 and IVr.Sum4<0)) then begin
      cashv = cashv - IVr.RetnValue;
    end;

    cuscurval = MulRateToBase1(IVr.CurncyCode,v,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    if (RepSpec.flags[2]==0) then begin
      v = cuscurval;
    end else begin
      if (IVr.CurncyCode==CUp.CurncyCode) then begin
        cuscurval = v;              
      end;
/*CURRENCIES-TODO    
      if (IVr.CurncyCode==statmentcurrency) then begin
        cuscurval = v;
      end;
*/      
    end;

    GetIPPrepaymentAmount(IVr,bascur.BaseCur1,cuscurval,lossv,IVr.Sum4,RepSpec.flags[2],CUp.CurncyCode,cuperlastprepcur);
    if (cashv==0) then begin
      cashv = blankval;
    end;
    if (RepSpec.flags[2]==0) then begin
      balp = balp + cuscurval;
    end else begin
      if (blank(CUp.CurncyCode)) then begin
        balp = balp + cuscurval;
      end else begin
        balp = balp + cuscurval;
      end;
    end;
    balp = balp - cashv;
    SumDebet = SumDebet + cuscurval + lossv;
    SumCredit = SumCredit + cashv;
    if (RepSpec.ArtMode==1) then begin
      if (lossv!=0) then begin//            if ((RepSpec.flags[2]==0) and (lossv!=0)) then begin
        if (lossv<0) then begin
          totloss = totloss - lossv;
//          SumDebet = SumDebet + lossv;
        end else begin
          totgain = totgain + lossv;
//          SumCredit = SumCredit + lossv;
        end;
        balp = balp + lossv;              
      end;
      StartFormat(15);
      OutDate(0,0,IVr.InvDate,false);
      OutString(pos1,0,USetStr(2485),false);
      if (RepSpec.flags[15]!=0) then begin
        OutString(pos1,0,IVr.OfficialSerNr,false);
      end;
      tstr = CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr);
      OutString(pos2,"DblCustPS2",tstr,false);
      OutVal(3,0,v,M4Val,true);
      if (RepSpec.flags[2]==1) then begin 
        OutString(7,0,IVr.CurncyCode,false); 
        OutVal(4,0,cashv,M4Val,true);
      end else begin
        OutVal(4,0,cashv,M4Val,true);
        if (lossv==0) then begin lossv = blankval; end;
        OutVal(420,0,lossv,M4Val,true);
      end;            
      if (RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel) or (RepSpec.Media==mtClipboard) then begin
        OutString(8,0,"",true);
      end;
      OutVal(9,0,balp,M4Val,true);
      EndFormat;
// I don't think we should be printing them here plus the loss is beeing calculated when the Receipt takes place
//   which might look a bit wierd if the period starts after the Receipt
    end;
  end;
  if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
    v = IVr.Sum4;
    cuscurval = MulRateToBase1(IVr.CurncyCode,v,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    if (RepSpec.flags[2]==0) then begin
      v = cuscurval;
    end else begin
      if (IVr.CurncyCode==CUp.CurncyCode) then begin
        cuscurval = v;
      end;  
/*CURRENCIES-TODO    
      if (IVr.CurncyCode==statmentcurrency) then begin
        cuscurval = v;
      end;  
*/      
    end;
    SumDebet = SumDebet + cuscurval;
    SumCredit = SumCredit + cuscurval;
    if (RepSpec.ArtMode==1) then begin
      StartFormat(15);
      OutDate(0,0,IVr.InvDate,false);
      OutString(pos1,0,USetStr(2488),false);
      if (RepSpec.flags[15]!=0) then begin
        OutString(pos1,0,IVr.OfficialSerNr,false);
      end;
      tstr = CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr);
      OutString(pos2,"DblCustPS2",tstr,false);            
      OutVal(3,0,v,M4Val,true);
      if (RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel) or (RepSpec.Media==mtClipboard) then begin
        OutString(4,0,"",true);
      end;
      if (RepSpec.flags[2]==1) then begin
        OutString(7,0,IVr.CurncyCode,false);
      end;  
      IVVc_GetPrePaidAmount(IVr,prepv);
      v = v - prepv;
      SumCredit = SumCredit - prepv;
      balp = balp + prepv;
      OutVal(4,0,v,M4Val,true);
      if (RepSpec.flags[2]==1) then begin
        OutString(8,0,IVr.CurncyCode,false);
      end;  
      OutVal(9,0,balp,M4Val,true);
      EndFormat;
    end;
  end;
  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
    IV2r.SerNr = IVr.CredInv;
    cash = false;
    if (ReadFirstMain(IV2r,1,true)) then begin
      if (IV2r.InvType==kInvoiceTypeCash or IV2r.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin cash = true; end;
    end;
    frrate = IVr.FrRate;
    torate1 = IVr.ToRateB1;
    torate2 = IVr.ToRateB2;
    baserate1 = IVr.BaseRate1;
    baserate2 = IVr.BaseRate2;
    if (IVr.CredInv<>-1) then begin
       IV2r.SerNr = IVr.CredInv;
       if (ReadFirstMain(IV2r,1,true)) then begin
         frrate = IV2r.FrRate;
         torate1 = IV2r.ToRateB1;
         torate2 = IV2r.ToRateB2;
         baserate1 = IV2r.BaseRate1;
         baserate2 = IV2r.BaseRate2;
       end;
    end;        
    v = IVr.Sum4;
    if ((IVr.RetnValue>0 and IVr.Sum4>0) or (IVr.RetnValue<0 and IVr.Sum4<0)) then begin
//            v = v + IVr.RetnValue;
    end;
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      switch (IVrw.stp) begin
        case 14: cash = true;
        case 15: cash = true;
        case 16: cash = true;
//        case 14: v = v - IVrw.Sum;
//        case 15: v = v - MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
//        case 16: v = v - IVrw.Sum;
      end;
    end;

    cuscurval = MulRateToBase1(IVr.CurncyCode,v,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
    if (RepSpec.flags[2]==0) then begin
      v = cuscurval;
    end else begin
      if (IVr.CurncyCode==CUp.CurncyCode) then begin
        cuscurval = v;
      end;  
/*CURRENCIES-TODO    
      if (IVr.CurncyCode==statmentcurrency) then begin
        cuscurval = v;
      end;  
*/      
    end;
    if (RepSpec.flags[7]!=0) then begin
      if (cash==false) then begin
        balp = balp - cuscurval;
        SumDebet = SumDebet - cuscurval;
      end else begin
        SumCredit = SumCredit + cuscurval;
        SumDebet = SumDebet + cuscurval;
      end;
    end else begin
      if (cash==false) then begin
        balp = balp - cuscurval;
        SumCredit = SumCredit + cuscurval;
      end else begin
        SumCredit = SumCredit + cuscurval;
        SumDebet = SumDebet + cuscurval;
      end;
    end;
    if (RepSpec.ArtMode==1) then begin
      StartFormat(15);
      OutDate(0,0,IVr.InvDate,false);
      OutString(pos1,0,USetStr(2487),false);
      if (RepSpec.flags[15]!=0) then begin
        OutString(pos1,0,IVr.OfficialSerNr,false);
      end;
      if (IVr.VINr>0) then begin
        OutLongInt(140,"DblVIVc",IVr.VINr,false);
      end else begin
        tstr = CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr);
        if (IV2r.SerNr!=-1) then begin
          tstr = tstr & " (";
          tstr = tstr & CreateInvoiceNumber(IV2r.SerNr,IV2r.OfficialSerNr);
          tstr = tstr & " )";
        end;
        OutString(pos2,"DblCustPS2",tstr,false);
      end;
      if (cash) then begin
        OutVal(3,0,v,M4Val,true);
        if (RepSpec.flags[2]==1) then begin
          OutString(7,0,IVr.CurncyCode,false);
        end;  
      end;
      if (RepSpec.flags[7]!=0) then begin
        OutVal(3,0,v,M4NegVal,true);
        if (RepSpec.flags[2]==1) then begin
          OutString(7,0,IVr.CurncyCode,false);
        end;  
        if (RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel) or (RepSpec.Media==mtClipboard) then begin
          OutString(4,0,"",true);
        end;
      end else begin
        if (RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel) or (RepSpec.Media==mtClipboard) then begin
          OutString(3,0,"",true);
          OutString(3,0,"",true);
        end;
        OutVal(4,0,v,M4Val,true);
        if (RepSpec.flags[2]==1) then begin
          OutString(8,0,IVr.CurncyCode,false);
        end;  
      end;
      OutVal(9,0,balp,M4Val,true);
      EndFormat;
    end;
  end;  
LCUPer_PrintInvoice:;    
  RETURN;
END;

global
procedure CUPer_PrintPurgeTransaction(record RcVc RepSpec,record CUVc CUp,record IPrsVc IPrsr,
                             var val balp,var val SumDebet,var val SumCredit,var val totloss,var val totgain,
                             Integer pos1,Integer pos2)
BEGIN
  val v,v2,cuscurval,tmp;
  record PurgeTRVc PurgeTRr;
  Integer tcnt,trwcnt;
  Integer typeofcur,oldstyle;
  string 255 tstr,t2;
  record IVVc IVr;

  v = blankval;
  v2 = blankval;

  PurgeTRr.Number = IPrsr.TransNr;
  PurgeTRr.IntYc = GetIntYc(IPrsr.TransDate);
  PurgeTRr.TransRow = IPrsr.TransRow;
  if (ReadFirstMain(PurgeTRr,3,true)) then begin

    if (nonblank(RepSpec.ObjStr)) then begin
      if (SetInSet(RepSpec.ObjStr,PurgeTRr.Objects)==false) then begin goto L111; end;
    end;
    if (PurgeTRr.CompCode!=CUp.Code) then begin
      goto L111;
    end;  
    if ((PurgeTRr.Typ==1) and (PurgeTRr.SerNr==-1) and (IPrsr.IVNr==-1)) then begin
      if (PurgeTRr.DebVal!=0) then begin
        v = PurgeTRr.DebVal;
        cuscurval = PurgeTRr.DebVal;
        if (nonblank(PurgeTRr.CurDebVal)) then begin
          v = PurgeTRr.CurDebVal;
          if (v!=0) then begin
            cuscurval = MulRateToBase1(PurgeTRr.Curncy,v,PurgeTRr.FrRate,PurgeTRr.ToRateB1,PurgeTRr.ToRateB2,PurgeTRr.BaseRate1,PurgeTRr.BaseRate2,DefaultCurRoundOff);
          end;
          if (RepSpec.flags[2]==0) then begin
            v = cuscurval;
          end else begin
            if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
              cuscurval = v;
            end;  
          end;
        end else begin
          typeofcur = TypeOfCurncy(PurgeTRr.Curncy,oldstyle);   
          if (RepSpec.flags[2]==1) then begin
            if (typeofcur==2) then begin
              v = PurgeTRr.DebVal2;
              if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
                cuscurval = PurgeTRr.DebVal2;
              end;  
            end;
          end;
        end;
        balp = balp + cuscurval;
        SumDebet = SumDebet + cuscurval;
        if (RepSpec.ArtMode==1) then begin
          StartFormat(15);
          OutDate(0,0,PurgeTRr.TransDate,false);
          OutString(pos1,0,USetStr(2530),false);
          PurgeTRExtYc(PurgeTRr,tstr);
          OutString(pos2,"DBLTrans",tstr,false);
          OutVal(3,0,v,M4Val,true);
          if (RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel) or (RepSpec.Media==mtClipboard) then begin
            OutString(4,0,"",true);
          end;
          if (RepSpec.flags[2]==1) then begin
            OutString(7,0,PurgeTRr.Curncy,false);
          end;  
          OutVal(9,0,balp,M4Val,true);
          EndFormat;
        end;
      end;                    
      if (PurgeTRr.CredVal!=0) then begin
        v = PurgeTRr.CredVal;
        cuscurval = PurgeTRr.CredVal;
        if (nonblank(PurgeTRr.CurCredVal)) then begin
          v = PurgeTRr.CurCredVal;
          if (v!=0) then begin
//              cuscurval = MulRateToBase1(PurgeTRr.Curncy,v,PurgeTRr.FrRate,PurgeTRr.ToRateB1,PurgeTRr.ToRateB2,PurgeTRr.BaseRate1,PurgeTRr.BaseRate2,DefaultCurRoundOff);
//we decided on NL tarsancgtion about amount
          end;
          if (RepSpec.flags[2]==0) then begin
            v = cuscurval;
          end else begin
            if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
              cuscurval = v;
            end;  
          end;
        end else begin
          typeofcur = TypeOfCurncy(PurgeTRr.Curncy,oldstyle);   
          if (RepSpec.flags[2]==1) then begin
            if (typeofcur==2) then begin
              v = PurgeTRr.CredVal2;
              if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
                cuscurval = PurgeTRr.CredVal2;
              end;  
            end;
          end;
        end;
        balp = balp - cuscurval;
        SumCredit = SumCredit + cuscurval;
        if (RepSpec.ArtMode==1) then begin
          StartFormat(15);
          OutDate(0,0,PurgeTRr.TransDate,false);
          OutString(pos1,0,USetStr(2530),false);
          PurgeTRExtYc(PurgeTRr,tstr);
          OutString(pos2,"DblTrans",tstr,false);
          OutString(3,0,"",true);
          OutVal(4,0,v,M4Val,true);
          if (RepSpec.flags[2]==1) then begin
            OutString(8,0,PurgeTRr.Curncy,false);
          end;  
          OutVal(9,0,balp,M4Val,true);
          EndFormat;
        end;
      end;         
    end;
    if ((PurgeTRr.Typ==1) and (PurgeTRr.SerNr!=-1)) then begin
      v = blankval;
      if (PurgeTRr.DebVal!=0)then begin
        v = blankval;
        if (RepSpec.flags[3]==0) then begin
          if (PurgeTRr.SerNr==IPrsr.IVNr) then begin
            if (PurgeTRr.TransDate==IPrsr.TransDate) then begin
              if (PurgeTRr.CompCode==CUp.Code) then begin
                tmp = PurgeTRr.DebVal;
                cuscurval = PurgeTRr.DebVal;
                if (nonblank(PurgeTRr.CurDebVal)) then begin
                  tmp = PurgeTRr.CurDebVal;
                  if (tmp!=0) then begin
                    cuscurval = MulRateToBase1(PurgeTRr.Curncy,tmp,PurgeTRr.FrRate,PurgeTRr.ToRateB1,PurgeTRr.ToRateB2,PurgeTRr.BaseRate1,PurgeTRr.BaseRate2,DefaultCurRoundOff);
                  end;
                  if (RepSpec.flags[2]==0) then begin
                    tmp = cuscurval;
                    if (tmp==0) then begin
                      tmp = PurgeTRr.DebVal;
                    end;
                  end else begin
                    if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
                      cuscurval = tmp;
                    end;  
                  end;
                  if (cuscurval==0) then begin
                    cuscurval = PurgeTRr.DebVal;
                  end;
                end else begin
                  typeofcur = TypeOfCurncy(PurgeTRr.Curncy,oldstyle);   
                  if (RepSpec.flags[2]==1) then begin
                    if (typeofcur==2) then begin
                      tmp = PurgeTRr.DebVal2;
                      if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
                        cuscurval = PurgeTRr.DebVal2;
                      end;  
                    end;
                  end else begin
                    if (typeofcur==2) then begin
                      IVr.SerNr = PurgeTRr.SerNr;
                      if (ReadFirstMain(IVr,1,true)) then begin
                        tmp = MulRateToBase1(PurgeTRr.Curncy,PurgeTRr.DebVal2,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                        cuscurval = tmp;
                      end;
                    end;
                  end;
                end;
                balp = balp + cuscurval;
                SumDebet = SumDebet + cuscurval;
                v = v + tmp;
              end;
            end;
          end;
        end;
        if (RepSpec.flags[3]==1) then begin
          if (PurgeTRr.SerNr==IPrsr.IVNr) then begin
            if (PurgeTRr.TransDate!=IPrsr.TransDate) then begin
              if (PurgeTRr.CompCode==CUp.Code) then begin
                tmp = PurgeTRr.DebVal;
                cuscurval = PurgeTRr.DebVal;
                if (PurgeTRr.CurDebVal!=0) then begin
                  tmp = PurgeTRr.CurDebVal;
                  if (tmp!=0) then begin
                    cuscurval = MulRateToBase1(PurgeTRr.Curncy,tmp,PurgeTRr.FrRate,PurgeTRr.ToRateB1,PurgeTRr.ToRateB2,PurgeTRr.BaseRate1,PurgeTRr.BaseRate2,DefaultCurRoundOff);
                  end;
                  if (RepSpec.flags[2]==0) then begin
                    tmp = cuscurval;
                  end else begin
                    if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
                      cuscurval = tmp;
                    end;  
                  end;
                end else begin
                  typeofcur = TypeOfCurncy(PurgeTRr.Curncy,oldstyle);   
                  if (RepSpec.flags[2]==1) then begin
                    if (typeofcur==2) then begin
                      tmp = PurgeTRr.DebVal2;
                      if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
                        cuscurval = PurgeTRr.DebVal2;
                      end;  
                    end;
                  end else begin
                    if (typeofcur==2) then begin
                      IVr.SerNr = PurgeTRr.SerNr;
                      if (ReadFirstMain(IVr,1,true)) then begin
                        tmp = MulRateToBase1(PurgeTRr.Curncy,PurgeTRr.DebVal2,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                        cuscurval = tmp;
                      end;
                    end;
                  end;
                end;
                balp = balp + cuscurval;
                SumDebet = SumDebet + cuscurval;
                v = v + tmp;
              end;
            end;
          end;
        end;
      end;              
      if (nonblank(v)) then begin
        if (RepSpec.ArtMode==1) then begin             
          tstr = USetStr(2530);               
          PurgeTRExtYc(PurgeTRr,t2);
          if (IPrsr.IVNr!=-1) then begin
            t2 = t2 & " (";
            t2 = t2 & IPrsr.IVNr;
            t2 = t2 & " )";
          end;
          StartFormat(15);
          OutDate(0,0,IPrsr.TransDate,false);
          OutString(pos1,0,tstr,false);
          PurgeTRExtYc(PurgeTRr,tstr);
          OutString(pos2,"DblTrans",tstr,false);
          OutVal(3,0,v,M4Val,true);
          if (RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel) or (RepSpec.Media==mtClipboard) then begin
            OutString(4,0,"",true);
          end;
          if (RepSpec.flags[2]==1) then begin
            OutString(7,0,PurgeTRr.Curncy,false);
          end;  
          OutVal(9,0,balp,M4Val,true);
          EndFormat;
        end;
      end;               
      v = blankval;
      if (PurgeTRr.CredVal!=0)then begin              
        if (RepSpec.flags[3]==0) then begin
          if (PurgeTRr.SerNr==IPrsr.IVNr) then begin
            if (PurgeTRr.TransDate==IPrsr.TransDate) then begin
              if (PurgeTRr.CompCode==CUp.Code) then begin
                tmp = PurgeTRr.CredVal;
                cuscurval = PurgeTRr.CredVal;
                if (nonblank(PurgeTRr.CurCredVal)) then begin
                  tmp = PurgeTRr.CurCredVal;

//*                          IVr.SerNr = PurgeTRr.SerNr;
//*                          if (ReadFirstMain(IVr,1,true)) then begin
//*                            cuscurval = MulRateToBase1(IVr.CurncyCode,tmp,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
//*                          end else begin 

                    cuscurval = MulRateToBase1(PurgeTRr.Curncy,tmp,PurgeTRr.FrRate,PurgeTRr.ToRateB1,PurgeTRr.ToRateB2,PurgeTRr.BaseRate1,PurgeTRr.BaseRate2,DefaultCurRoundOff);
                    if (cuscurval==tmp) then begin cuscurval = PurgeTRr.CredVal; end;
//cuscurval is always Base 1 unless CUstomer in curency and that is dealt few line below, sometimes there is no rates in line but there is curnecy and base 1 value in transction rows
//                          end;
                  if (RepSpec.flags[2]==0) then begin
                     tmp = cuscurval;
                  end else begin
                    if (PurgeTRr.Curncy==CUp.CurncyCode) then begin 
                      cuscurval = tmp;
                    end;  
                  end;
                end else begin
                  typeofcur = TypeOfCurncy(PurgeTRr.Curncy,oldstyle);   
                  if (RepSpec.flags[2]==1) then begin
                    if (typeofcur==2) then begin
                      tmp = PurgeTRr.CredVal2;
                      if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
                        cuscurval = PurgeTRr.CredVal2;
                      end;
                    end;
                  end;
                end;
                balp = balp - cuscurval;
                SumCredit = SumCredit + cuscurval;
                v = v + tmp;
              end;
            end;
          end;
        end;
        if (RepSpec.flags[3]==1) then begin
          if (PurgeTRr.SerNr==IPrsr.IVNr) then begin
            if (PurgeTRr.TransDate==IPrsr.TransDate) then begin
              if (PurgeTRr.CompCode==CUp.Code) then begin
                tmp = PurgeTRr.CredVal;
                cuscurval = PurgeTRr.CredVal;
                if (nonblank(PurgeTRr.CurCredVal)) then begin
                  tmp = PurgeTRr.CurCredVal;
                  cuscurval = MulRateToBase1(PurgeTRr.Curncy,tmp,PurgeTRr.FrRate,PurgeTRr.ToRateB1,PurgeTRr.ToRateB2,PurgeTRr.BaseRate1,PurgeTRr.BaseRate2,DefaultCurRoundOff);
                  if (RepSpec.flags[2]==0) then begin
                    tmp = cuscurval;
                  end else begin
                    if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
                      cuscurval = tmp;
                    end;  
                  end;
                end else begin
                  typeofcur = TypeOfCurncy(PurgeTRr.Curncy,oldstyle);   
                  if (RepSpec.flags[2]==1) then begin
                    if (typeofcur==2) then begin
                      tmp = PurgeTRr.CredVal2;
                      if (PurgeTRr.Curncy==CUp.CurncyCode) then begin
                        cuscurval = PurgeTRr.CredVal2;
                      end;  
                    end;
                  end;
                end;
                balp = balp - cuscurval;
                SumCredit = SumCredit + cuscurval;
                v = v + tmp;
              end;
            end;
          end;
        end;
        if (nonblank(v)) then begin
          if (RepSpec.ArtMode==1) then begin
            tstr = USetStr(2530);               
            PurgeTRExtYc(PurgeTRr,t2);
            StartFormat(15);
            OutDate(0,0,IPrsr.TransDate,false);
            OutString(pos1,0,tstr,false);
            PurgeTRExtYc(PurgeTRr,tstr);
            tstr = tstr & " (";
            tstr = tstr & IPrsr.IVNr;
            tstr = tstr & " )";
            OutString(pos2,"DblTrans",tstr,false);
            OutVal(4,0,v,M4Val,true);
            if (RepSpec.flags[2]==1) then begin
              OutString(8,0,PurgeTRr.Curncy,false);
            end;  
            OutVal(9,0,balp,M4Val,true);
            EndFormat;
          end;
        end;
      end;
    end;
L111:;               
  end;
  RETURN;
END;

global
procedure CUPer_PrintTransaction(record RcVc RepSpec,record CUVc CUp,record IPrsVc IPrsr,
                             var val balp,var val SumDebet,var val SumCredit,var val totloss,var val totgain,
                             Integer pos1,Integer pos2,var string statmentcurrency,var string remainingcurrencies,vector Boolean vreportedcurncy)
BEGIN
  val v,v2,cuscurval,tmp;
  record TRVc TRr;
  row TRVc TRrw;
  Integer tcnt,trwcnt;
  Integer typeofcur,oldstyle;
  string 255 tstr,t2;
  record IVVc IVr;
  Boolean ivf;

  v = blankval;
  v2 = blankval;

  TRr.Number = IPrsr.TransNr;
  TRr.IntYc = GetIntYc(IPrsr.TransDate);
  if (ReadFirstMain(TRr,2,true)) then begin
    trwcnt = MatRowCnt(TRr);
    for (tcnt=0;tcnt<trwcnt;tcnt=tcnt+1) begin
      MatRowGet(TRr,tcnt,TRrw);
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,TRrw.Objects)==false) then begin goto L11; end;
      end;
      if (TRrw.CompCode!=CUp.Code) then begin
        goto L11;
      end;  
      if (nonblank(RepSpec.CurncyCode)) then begin
        if (TRrw.Curncy!=RepSpec.CurncyCode) then begin goto L11; end;
      end;
      if ((TRrw.Typ==1) and (TRrw.SerNr==-1) and (IPrsr.IVNr==-1)) then begin
        if (TRrw.DebVal!=0) then begin
          v = TRrw.DebVal;
          cuscurval = TRrw.DebVal;
          if (nonblank(TRrw.CurDebVal)) then begin
            v = TRrw.CurDebVal;
            if (v!=0) then begin
              cuscurval = MulRateToBase1(TRrw.Curncy,v,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
            end;
            if (RepSpec.flags[2]==0) then begin
              v = cuscurval;
            end else begin
              if (TRrw.Curncy==CUp.CurncyCode) then begin
                cuscurval = v;
              end;  
            end;
          end else begin
            typeofcur = TypeOfCurncy(TRrw.Curncy,oldstyle);   
            if (RepSpec.flags[2]==1) then begin
              if (typeofcur==2) then begin
                v = TRrw.DebVal2;
                if (TRrw.Curncy==CUp.CurncyCode) then begin
                  cuscurval = TRrw.DebVal2;
                end;  
              end;
            end;
          end;
          balp = balp + cuscurval;
          SumDebet = SumDebet + cuscurval;
          if (RepSpec.ArtMode==1) then begin
            StartFormat(15);
            OutDate(0,0,TRr.TransDate,false);
            OutString(pos1,0,USetStr(2530),false);
            TRExtYc(TRr,tstr);
            OutString(pos2,"DBLTrans",tstr,false);
            OutVal(3,0,v,M4Val,true);
            if (RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel) or (RepSpec.Media==mtClipboard) then begin
              OutString(4,0,"",true);
            end;
            if (RepSpec.flags[2]==1) then begin
              OutString(7,0,TRrw.Curncy,false);
            end;  
            OutVal(9,0,balp,M4Val,true);
            EndFormat;
          end;
        end;                    
        if (TRrw.CredVal!=0) then begin
          v = TRrw.CredVal;
          cuscurval = TRrw.CredVal;
          if (nonblank(TRrw.CurCredVal)) then begin
            v = TRrw.CurCredVal;
            if (v!=0) then begin
//              cuscurval = MulRateToBase1(TRrw.Curncy,v,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
//we decided on NL tarsancgtion about amount
            end;
            if (RepSpec.flags[2]==0) then begin
              v = cuscurval;
            end else begin
              if (TRrw.Curncy==CUp.CurncyCode) then begin
                cuscurval = v;
              end;  
            end;
          end else begin
            typeofcur = TypeOfCurncy(TRrw.Curncy,oldstyle);   
            if (RepSpec.flags[2]==1) then begin
              if (typeofcur==2) then begin
                v = TRrw.CredVal2;
                if (TRrw.Curncy==CUp.CurncyCode) then begin
                  cuscurval = TRrw.CredVal2;
                end;  
              end;
            end;
          end;
          balp = balp - cuscurval;
          SumCredit = SumCredit + cuscurval;
          if (RepSpec.ArtMode==1) then begin
            StartFormat(15);
            OutDate(0,0,TRr.TransDate,false);
            OutString(pos1,0,USetStr(2530),false);
            TRExtYc(TRr,tstr);
            OutString(pos2,"DblTrans",tstr,false);
            OutString(3,0,"",true);
            OutVal(4,0,v,M4Val,true);
            if (RepSpec.flags[2]==1) then begin
              OutString(8,0,TRrw.Curncy,false);
            end;  
            OutVal(9,0,balp,M4Val,true);
            EndFormat;
          end;
        end;         
      end;
      if ((TRrw.Typ==1) and (TRrw.SerNr!=-1)) then begin
        v = blankval;
        if (TRrw.DebVal!=0)then begin
          v = blankval;
          if (RepSpec.flags[3]==0) then begin
            if (TRrw.SerNr==IPrsr.IVNr) then begin
              if (TRr.TransDate==IPrsr.TransDate) then begin
                if (TRrw.CompCode==CUp.Code) then begin
                  IVr.SerNr = TRrw.SerNr;
                  ivf = ReadFirstMain(IVr,1,true);
                  if (RepSpec.flags[2]!=0) then begin
                    if (nonblank(RepSpec.CurncyCode)) then begin
                      if (IVr.CurncyCode!=RepSpec.CurncyCode) then begin goto L11; end;
                    end;
/*    
CURRENCIES-TODO                      
                    if (nonblank(statmentcurrency)) then begin
                      if (IVr.CurncyCode!=statmentcurrency) then begin 
                        if (vreportedcurncy[IVr.CurncyCode]==false) then begin
                          remainingcurrencies = AddObjectToObjectList(remainingcurrencies,IVr.CurncyCode);        
                        end;
                        goto L11; 
                      end;
                    end else begin
                      statmentcurrency = IVr.CurncyCode;
                    end;    
*/                    
                  end;
/*    
CURRENCIES-TODO  
                  vreportedcurncy[statmentcurrency] = true;
*/
                  tmp = TRrw.DebVal;
                  cuscurval = TRrw.DebVal;
                  if (nonblank(TRrw.CurDebVal)) then begin
                    tmp = TRrw.CurDebVal;
                    if (tmp!=0) then begin
                      cuscurval = MulRateToBase1(TRrw.Curncy,tmp,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
                    end;
                    if (RepSpec.flags[2]==0) then begin
                      tmp = cuscurval;
                      if (tmp==0) then begin
                        tmp = TRrw.DebVal;
                      end;
                    end else begin
                      if (TRrw.Curncy==CUp.CurncyCode) then begin
                        cuscurval = tmp;
                      end;  
                    end;
                    if (cuscurval==0) then begin
                      cuscurval = TRrw.DebVal;
                    end;
                  end else begin
                    typeofcur = TypeOfCurncy(TRrw.Curncy,oldstyle);   
                    if (RepSpec.flags[2]==1) then begin
                      if (typeofcur==2) then begin
                        tmp = TRrw.DebVal2;
                        if (TRrw.Curncy==CUp.CurncyCode) then begin
                          cuscurval = TRrw.DebVal2;
                        end;  
                      end;
                    end else begin
                      if (typeofcur==2) then begin
                        if (ivf) then begin
                          tmp = MulRateToBase1(TRrw.Curncy,TRrw.DebVal2,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                          cuscurval = tmp;
                        end;
                      end;
                    end;
                  end;
                  balp = balp + cuscurval;
                  SumDebet = SumDebet + cuscurval;
                  v = v + tmp;
                end;
              end;
            end;
          end;
          if (RepSpec.flags[3]==1) then begin
            if (TRrw.SerNr==IPrsr.IVNr) then begin
              if (TRr.TransDate!=IPrsr.TransDate) then begin
                if (TRrw.CompCode==CUp.Code) then begin
                  tmp = TRrw.DebVal;
                  cuscurval = TRrw.DebVal;
                  if (TRrw.CurDebVal!=0) then begin
                    tmp = TRrw.CurDebVal;
                    if (tmp!=0) then begin
                      cuscurval = MulRateToBase1(TRrw.Curncy,tmp,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
                    end;
                    if (RepSpec.flags[2]==0) then begin
                      tmp = cuscurval;
                    end else begin
                      if (TRrw.Curncy==CUp.CurncyCode) then begin
                        cuscurval = tmp;
                      end;  
                    end;
                  end else begin
                    typeofcur = TypeOfCurncy(TRrw.Curncy,oldstyle);   
                    if (RepSpec.flags[2]==1) then begin
                      if (typeofcur==2) then begin
                        tmp = TRrw.DebVal2;
                        if (TRrw.Curncy==CUp.CurncyCode) then begin
                          cuscurval = TRrw.DebVal2;
                        end;  
                      end;
                    end else begin
                      if (typeofcur==2) then begin
                        IVr.SerNr = TRrw.SerNr;
                        if (ReadFirstMain(IVr,1,true)) then begin
                          tmp = MulRateToBase1(TRrw.Curncy,TRrw.DebVal2,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                          cuscurval = tmp;
                        end;
                      end;
                    end;
                  end;
                  balp = balp + cuscurval;
                  SumDebet = SumDebet + cuscurval;
                  v = v + tmp;
                end;
              end;
            end;
          end;
        end;              
        if (nonblank(v)) then begin
          if (RepSpec.ArtMode==1) then begin             
            tstr = USetStr(2530);               
            TRExtYc(TRr,t2);
            if (IPrsr.IVNr!=-1) then begin
              t2 = t2 & " (";
              t2 = t2 & IPrsr.IVNr;
              t2 = t2 & " )";
            end;
            StartFormat(15);
            OutDate(0,0,IPrsr.TransDate,false);
            OutString(pos1,0,tstr,false);
            TRExtYc(TRr,tstr);
            OutString(pos2,"DblTrans",tstr,false);
            OutVal(3,0,v,M4Val,true);
            if (RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel) or (RepSpec.Media==mtClipboard) then begin
              OutString(4,0,"",true);
            end;
            if (RepSpec.flags[2]==1) then begin
              OutString(7,0,TRrw.Curncy,false);
            end;  
            OutVal(9,0,balp,M4Val,true);
            EndFormat;
          end;
        end;               
        v = blankval;
        if (TRrw.CredVal!=0)then begin              
          if (RepSpec.flags[3]==0) then begin
            if (TRrw.SerNr==IPrsr.IVNr) then begin
              if (TRr.TransDate==IPrsr.TransDate) then begin
                if (TRrw.CompCode==CUp.Code) then begin
                  tmp = TRrw.CredVal;
                  cuscurval = TRrw.CredVal;
                  if (nonblank(TRrw.CurCredVal)) then begin
                    tmp = TRrw.CurCredVal;

//*                          IVr.SerNr = TRrw.SerNr;
//*                          if (ReadFirstMain(IVr,1,true)) then begin
//*                            cuscurval = MulRateToBase1(IVr.CurncyCode,tmp,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
//*                          end else begin 

                      cuscurval = MulRateToBase1(TRrw.Curncy,tmp,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
                      if (cuscurval==tmp) then begin cuscurval = TRrw.CredVal; end;
//cuscurval is always Base 1 unless CUstomer in curency and that is dealt few line below, sometimes there is no rates in line but there is curnecy and base 1 value in transction rows
//                          end;
                    if (RepSpec.flags[2]==0) then begin
                       tmp = cuscurval;
                    end else begin
                      if (TRrw.Curncy==CUp.CurncyCode) then begin 
                        cuscurval = tmp;
                      end;  
                    end;
                  end else begin
                    typeofcur = TypeOfCurncy(TRrw.Curncy,oldstyle);   
                    if (RepSpec.flags[2]==1) then begin
                      if (typeofcur==2) then begin
                        tmp = TRrw.CredVal2;
                        if (TRrw.Curncy==CUp.CurncyCode) then begin
                          cuscurval = TRrw.CredVal2;

//*                              end else begin
//*                                IVr.SerNr = TRrw.SerNr;
//*                                if (ReadFirstMain(IVr,1,true)) then begin
//*                                  cuscurval = MulRateToBase1(IVr.CurncyCode,TRrw.CredVal2,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
//*                                end;

                        end;
                      end;

//*                          end else begin
//*                            if (typeofcur==2) then begin
//*                              IVr.SerNr = TRrw.SerNr;
//*                              if (ReadFirstMain(IVr,1,true)) then begin
//*                                tmp = MulRateToBase1(IVr.CurncyCode,TRrw.CredVal2,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
//*                                cuscurval = tmp;
//*                              end;
//*                            end;

                    end;
                  end;
                  balp = balp - cuscurval;
                  SumCredit = SumCredit + cuscurval;
                  v = v + tmp;
                end;
              end;
            end;
          end;
          if (RepSpec.flags[3]==1) then begin
            if (TRrw.SerNr==IPrsr.IVNr) then begin
              if (TRr.TransDate==IPrsr.TransDate) then begin
                if (TRrw.CompCode==CUp.Code) then begin
                  tmp = TRrw.CredVal;
                  cuscurval = TRrw.CredVal;
                  if (nonblank(TRrw.CurCredVal)) then begin
                    tmp = TRrw.CurCredVal;

//*                          IVr.SerNr = TRrw.SerNr;
//*                          if (ReadFirstMain(IVr,1,true)) then begin
//*                            cuscurval = MulRateToBase1(IVr.CurncyCode,tmp,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
//*                          end else begin 

                      cuscurval = MulRateToBase1(TRrw.Curncy,tmp,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
//                          end;
                    if (RepSpec.flags[2]==0) then begin
                      tmp = cuscurval;
                    end else begin
                      if (TRrw.Curncy==CUp.CurncyCode) then begin
                        cuscurval = tmp;
                      end;  
                    end;
                  end else begin
                    typeofcur = TypeOfCurncy(TRrw.Curncy,oldstyle);   
                    if (RepSpec.flags[2]==1) then begin
                      if (typeofcur==2) then begin
                        tmp = TRrw.CredVal2;
                        if (TRrw.Curncy==CUp.CurncyCode) then begin
                          cuscurval = TRrw.CredVal2;
                        end;  
                      end;

//*                          end else begin
//*                            if (typeofcur==2) then begin
//*                              IVr.SerNr = TRrw.SerNr;
//*                              if (ReadFirstMain(IVr,1,true)) then begin
//*                                tmp = MulRateToBase1(TRrw.Curncy,TRrw.CredVal2,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
//*                                cuscurval = tmp;
//*                              end;
//*                      end;
  
                    end;
                  end;
                  balp = balp - cuscurval;
                  SumCredit = SumCredit + cuscurval;
                  v = v + tmp;
                end;
              end;
            end;
          end;
          if (nonblank(v)) then begin
            if (RepSpec.ArtMode==1) then begin
              tstr = USetStr(2530);               
              TRExtYc(TRr,t2);
              StartFormat(15);
              OutDate(0,0,IPrsr.TransDate,false);
              OutString(pos1,0,tstr,false);
              TRExtYc(TRr,tstr);
              tstr = tstr & " (";
              tstr = tstr & IPrsr.IVNr;
              tstr = tstr & " )";
              OutString(pos2,"DblTrans",tstr,false);
              OutVal(4,0,v,M4Val,true);
              if (RepSpec.flags[2]==1) then begin
                OutString(8,0,TRrw.Curncy,false);
              end;  
              OutVal(9,0,balp,M4Val,true);
              EndFormat;
            end;
          end;
        end;
      end;
L11:;               
    end;   
  end;
  RETURN;
END;

global
procedure CUPer_PrintDataForInvoice(record RcVc RepSpec,LongInt IVSerNr,record CUVc CUp,record BaseCurBlock bascur,
                             var val balp,var val SumDebet,var val SumCredit,var val totloss,var val totgain,
                             Integer pos1,Integer pos2,Integer fwdbalinvoices,
                             var string statmentcurrency,var string remainingcurrencies,vector Boolean vreportedcurncy)
BEGIN
  record IPrsVc IPrsr;
  Boolean found,testf;
  string 60 ckey;
  record IPVc IPr;
  Array LongInt aipnr;
  Integer acnt;
  record IVVc IVr;
  Integer cnt;
  string 255 cuperlastprepcur;

  IVr.SerNr = IVSerNr;
  if (ReadFirstMain(IVr,1,true)==false) then begin goto LCUPer_PrintDataForInvoice; end;
  if (RepSpec.flags[2]!=0) then begin
    if (nonblank(RepSpec.CurncyCode)) then begin
      if (IVr.CurncyCode!=RepSpec.CurncyCode) then begin goto LCUPer_PrintDataForInvoice; end;
    end;
/*    
CURRENCIES-TODO
    if (nonblank(statmentcurrency)) then begin
      if (IVr.CurncyCode!=statmentcurrency) then begin 
        if (vreportedcurncy[IVr.CurncyCode]==false) then begin
          remainingcurrencies = AddObjectToObjectList(remainingcurrencies,IVr.CurncyCode);        
        end;
        goto LCUPer_PrintDataForInvoice; 
      end;
    end else begin
      statmentcurrency = IVr.CurncyCode;
    end;    
*/    
  end;
/*
CURRENCIES-TODO
  vreportedcurncy[statmentcurrency] = true;
*/
  if (nonblank(RepSpec.ObjStr)) then begin
    if (SetInSet(RepSpec.ObjStr,IVr.Objects)==false) then begin goto LCUPer_PrintDataForInvoice; end;
  end;  
  if (IVr.Invalid!=0) then begin goto LCUPer_PrintDataForInvoice; end;        
  if (IVr.InvType==kInvoiceTypePrepayment) then begin goto LCUPer_PrintDataForInvoice; end;        

  IPrsr.IVNr = IVSerNr;
  if (RepSpec.flags[5]==1) then begin
    IPrsr.CustDate = RepSpec.sStartDate;
    ckey = "IVKeyCustDate";
  end else begin
    IPrsr.TransDate = RepSpec.sStartDate;
    ckey = "IVKeyTransDate";
  end;  
  IPrsr.CustCode = CUp.Code;
  IPrsr.TransType = kIPrsTransTypeInvoice;
  found = true;
  ResetLoop(IPrsr);
  while (LoopKey(ckey,IPrsr,3,found)) begin
    if (IPrsr.IVNr!=IVSerNr) then begin found = false; end;  
    if (IPrsr.CustCode!=CUp.Code) then begin found = false; end;  
    if (found) then begin
     if (RepSpec.flags[5]==1) then begin
        if (IPrsr.CustDate>RepSpec.sEndDate) then begin found = false; end;
      end else begin
        if (IPrsr.TransDate>RepSpec.sEndDate) then begin found = false; end;
      end;
    end;  
    if (found) then begin
      testf = true;
      if (IPrsr.IVNr==IPrsr.TransNr) then begin
        if (IPrsr.TransType<kIPrsTransTypeReceipt) then begin testf = false; end;  
      end;
      if (testf) then begin
        cnt = cnt + 1;        
        switch (IPrsr.TransType) begin
          case kIPrsTransTypeInvoice:
            CUPer_PrintInvoice(RepSpec,IPrsr.TransNr,CUp,bascur,balp,SumDebet,SumCredit,totloss,totgain,pos1,pos2,cuperlastprepcur,fwdbalinvoices,statmentcurrency,remainingcurrencies,vreportedcurncy);
          case kIPrsTransTypeReceipt:
            if (nonblank(RepSpec.ObjStr)) then begin goto L555; end;
            IPr.SerNr = IPrsr.TransNr;
            if (ReadFirstMain(IPr,1,true)) then begin
              if (IPr.RejectedFlag!=0) then begin goto L555; end;
              if (RepSpec.flags[4]==1) then begin
                if (IPr.ReceivedFlag==0) then begin
                   if (IPr.OKFlag==0) then begin
                     goto L555;
                   end;
                 end;    
              end else begin
                if (IPr.OKFlag==0) then begin
                  goto L555;
                end;  
              end;
              CUPer_PrintReceipt(RepSpec,IPr,CUp,bascur,IPrsr,aipnr,acnt,balp,SumDebet,SumCredit,totloss,totgain,pos1,pos2,fwdbalinvoices,statmentcurrency,remainingcurrencies,vreportedcurncy);
    //  PrintCurncyTotals(ipacur,ipav1,ipav2,ipav3,ipcurcnt,4,480,-1,300,false,RepSpec.PocketPC);
            end;
          case kIPrsTransTypePurgeNLTransaction:
            CUPer_PrintPurgeTransaction(RepSpec,CUp,IPrsr,balp,SumDebet,SumCredit,totloss,totgain,pos1,pos2);
          case kIPrsTransTypeNLTransaction:
            CUPer_PrintTransaction(RepSpec,CUp,IPrsr,balp,SumDebet,SumCredit,totloss,totgain,pos1,pos2,statmentcurrency,remainingcurrencies,vreportedcurncy);
          case kIPrsTransTypeCashIn:
            CustListTransCLIn(RepSpec,IPrsr,CUp,balp,SumCredit,totloss,totgain,pos1,pos2,fwdbalinvoices,statmentcurrency,remainingcurrencies,vreportedcurncy);
          case kIPrsTransTypeCashOut:
            CustListTransCLOut(RepSpec,IPrsr,CUp,balp,SumDebet,pos1,pos2,statmentcurrency,remainingcurrencies,vreportedcurncy);
          case kIPrsTransTypeReverseCustomerPrepayment:
            CustListTransCLOut(RepSpec,IPrsr,CUp,balp,SumDebet,pos1,pos2,statmentcurrency,remainingcurrencies,vreportedcurncy);
          case kIPrsTransTypeCredMan:
            CustListTransCredMan(RepSpec,IPrsr,CUp,balp,SumDebet,pos1,pos2);
        end;
      end;
L555:;      
    end;
  end;
LCUPer_PrintDataForInvoice:;  
  if (cnt>0) then begin
    Gray_Divider(0,1);
  end;
  RETURN;
END;
