
external function Boolean IsCancelState(String);
external procedure HT2Per(Date, Date , var string);
external function integer GetPersonsInJob(Record JobVc);
external function integer GetRoomsInJob(Record JobVc);


Function Boolean ChannelStatSelect(Record RcVc RepSpec,Record JobVc Jobr,var Boolean foundf)
begin 
  Boolean sel;
  Record ResVc Roomr;
  
  sel = false;
  if (Jobr.TransDate > RepSpec.sEndDate) then begin
    foundf = false;
  end else begin   
    if ((RepSpec.flags[3]==1) or (Jobr.Mother==-1)) then begin
      if ((RepSpec.flags[2]==1) or (not IsCancelState(Jobr.ResStatus))) then begin 
        if ((RepSpec.f4==Jobr.Type) or (blank(RepSpec.f4))) then begin
          Roomr.Code = Jobr.ResCode;
          if readfirstmain(Roomr,1,true) then begin
            if ((RepSpec.f1==Roomr.Class) or (blank(RepSpec.f1))) then begin
              if ((RepSpec.f2==Roomr.ResLoc) or (blank(RepSpec.f2))) then begin
                sel = true;
              end;     
            end;
          end else begin
            if (blank(RepSpec.f1) and blank(RepSpec.f1) and blank(RepSpec.f1)) then begin
              sel = true;
            end else begin
              sel = false;
            end;  
          end;
        end;  
      end;
    end;
  end;
  ChannelStatSelect = sel;
  return;
end;  


procedure AddToMem(var record ProdVc Mem,String ItemCode,String ItemName,Val Cant)
begin
  Row ProdVc Memrow;
  Integer rows,j;
  Boolean found;

  rows = MatRowCnt(Mem);
  for (j=0;j<rows;j=j+1) begin
    MatRowGet(Mem,j,Memrow);
    if (Memrow.Item==ItemCode) then begin
      Memrow.InQty    = Memrow.InQty + Cant;
      MatRowPut(Mem,j,Memrow);
      found = true;  j = rows;
    end;
    if (Memrow.Item > ItemCode) then begin
      ClearRow(Mem,Memrow,1);
      Memrow.Item     = ItemCode;
      Memrow.Comment  = ItemName;
      Memrow.InQty    = Cant;
      MatRowInsert(Mem,j,Memrow);
      found = true; j = rows;
    end;
  end;
  if (not found) then begin
    ClearRow(Mem,Memrow,1);
    Memrow.Item     = ItemCode;
    Memrow.Comment  = ItemName;
    Memrow.InQty    = Cant;
    MatRowPut(Mem,rows,Memrow);
  end;
  return;
end;

procedure GetChannelName(String Code,var String tstr)
begin
  Record BookOrgBlock bobr; 
  row BookOrgBlock bobrw; 
  Integer rows,j;

  tstr = "";
  blockload(bobr);
  rows = MatRowCnt(bobr);
  for (j=0;j<rows;j=j+1) begin 
    MatRowGet(bobr,j,bobrw);
    if (bobrw.Code==Code) then begin
      tstr = bobrw.Name;
      j = rows;
    end;
  end;
  return;
end;

global
procedure ChannelStatRn(Record RcVc RepSpec)
begin
  boolean foundf;
  String 255 tstr;
  Integer rw,rows,j,tr1,tmp;
  Record JobVc Jobr;
  record ProdVc Mem;
  row ProdVc Memrw;
  
  recordNew(Mem);
  foundf = true;
  tr1 = 0;
  
  StartReportJob(USetStr(12050));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;

  SetRepCol(2,65);
  SetRepCol(3,175);
  SetRepCol(4,240);
  SetRepCol(5,380);
  SetRepCol(6,420);
  SetRepCol(7,480);
  
  StartFormat(15);
  OutString(0,0,USetStr(12051),false);
  OutString(2,0,USetStr(12052),false);
  OutString(3,0,"",true);
  OutString(4,0,USetStr(12053),true);
  OutString(5,0,"",true);
  OutString(6,0,"",true); 
  OutString(7,0,"",true);
  EndFormat;
  Gray_Divider(0,1);
  
  Jobr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",Jobr,1,foundf)) begin
    if ChannelStatSelect(RepSpec,Jobr,foundf) then begin
      switch (RepSpec.flags[5]) begin 
        case 0 : tmp = GetRoomsInJob(Jobr);
        case 1 : tmp = GetPersonsInJob(Jobr);
        case 2 : tmp = 1;
      end;
      AddToMem(Mem,Jobr.BookOrigin,"",tmp);
    end;
  end;
  
  rows = MatRowCnt(Mem);
  for (j=0;j<rows;j=j+1) begin 
    MatRowGet(Mem,j,Memrw);
    StartFormat(15);
    OutString(0,0,Memrw.Item,false);
    GetChannelName(Memrw.Item,tstr);
    OutString(2,0,tstr,false);  
    OutString(4,0,Memrw.InQty,true);  
    EndFormat;
    tr1 = tr1  +  Memrw.InQty;
  end;   
  
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(12144),false);
  OutVal(4,0,tr1,M4Val,true); 
  EndFormat;
  EndJob;
  return;
end;
