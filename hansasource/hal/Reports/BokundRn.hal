external procedure PrintTrrCurrency(string,val,val,Integer,val,val,val,val,val);
external procedure ToStrTRCode(var string,Integer,LongInt);
external procedure AddToVATSum(record SMVc,string,val);
external function string 255 CreateInvoiceNumber(LongInt,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure AddEuroCurncyTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,LongInt,Boolean,string);
external procedure HT2Per(Date, Date , var string);
external function Integer MakeTransFromIV(var record TRVc,var record SMVc,record IVVc,Boolean,Boolean);

procedure FormTrr(record RcVc RepSpec,Integer tpos,record TRVc TRr,Integer trrow,var val transump,record SMVc SMvatr,var LongInt TransCount,Boolean printf,Boolean inclqtyf)
BEGIN
  string 255 tstr,tstr2;
  record AccVc Accr;
  row AccVc Accrw;
  row SMVc SMrw;
  row TRVc TRrw;
  Integer i,rwcnt;  
  Boolean Accs;
  val sv;

  MatRowGet(TRr,trrow,TRrw);
  if (printf) then begin
    StartFormat(15);
  end;
  if (TRrw.stp==1) then begin
    Accr.AccNumber = TRrw.AccNumber;
    Accs = ReadFirstMain(Accr,1,true);
    tstr = Accr.Comment;
    if (nonblank(TRrw.Comment)) then begin
      tstr2 = Left(Accr.Comment,len(TRrw.Comment));
      if (TRrw.Comment<>tstr2) then begin tstr = TRrw.Comment; end;
      if (nonblank(RepSpec.Language)) then begin           
        rwcnt = MatRowCnt(Accr);
        for (i=0; i<rwcnt; i=i+1) begin
          MatRowGet(Accr,i,Accrw);
          if (Accrw.LangCode==RepSpec.Language) then begin
            if (nonblank(Accrw.Text)) then begin
              tstr = Accrw.Text;
            end;  
            i = rwcnt;               
          end;
        end;  
      end;                  
    end;
    if (TRrw.ovst==0) then begin
      TransCount = TransCount + 1;
  	  if (RepSpec.basecurncy==0) then begin
        transump = TRrw.DebVal + transump;
      end else begin
        transump = TRrw.DebVal2 + transump;
      end;  
    end;
    if (printf) then begin
      OutStringovst(0,0,TRrw.AccNumber,false,TRrw.ovst);
      OutStringovst(60,0,TRrw.Objects,false,TRrw.ovst);
	    OutStringovst(tpos,0,Left(tstr,20),false,TRrw.ovst);
	  end;
	  if (RepSpec.basecurncy==0) then begin
        if (printf) then begin
          OutValovst(360,0,TRrw.DebVal,M4Val,true,TRrw.ovst);
          OutValovst(440,0,TRrw.CredVal,M4Val,true,TRrw.ovst);
          if (inclqtyf) then begin
            OutValovst(470,0,TRrw.Qty,M4Val,true,TRrw.ovst);
          end;
          if (TRrw.ovst==0) then begin
            AddToAccumulator(0,TRrw.DebVal);
            AddToAccumulator(1,TRrw.CredVal);
            AddToAccumulator(2,TRrw.DebVal);
            AddToAccumulator(3,TRrw.CredVal);
          end;
        end else begin
          if (TRrw.ovst==0) then begin
            AddToAccumulator(4,TRrw.DebVal);
            AddToAccumulator(5,TRrw.CredVal);
            AddToAccumulator(2,TRrw.DebVal);
            AddToAccumulator(3,TRrw.CredVal);
          end;
        end;
      end else begin
        if (printf) then begin
          OutValovst(360,0,TRrw.DebVal2,M4Val,true,TRrw.ovst);
          OutValovst(440,0,TRrw.CredVal2,M4Val,true,TRrw.ovst);
          if (inclqtyf) then begin
            OutValovst(470,0,TRrw.Qty,M4Val,true,TRrw.ovst);
          end;
          if (TRrw.ovst==0) then begin
            AddToAccumulator(0,TRrw.DebVal2);
            AddToAccumulator(1,TRrw.CredVal2);      
            AddToAccumulator(2,TRrw.DebVal2);
            AddToAccumulator(3,TRrw.CredVal2);
          end;
        end else begin
          if (TRrw.ovst==0) then begin
            AddToAccumulator(4,TRrw.DebVal2);
            AddToAccumulator(5,TRrw.CredVal2);
            AddToAccumulator(2,TRrw.DebVal2);
            AddToAccumulator(3,TRrw.CredVal2);
          end;
        end;
      end;  
	  if (RepSpec.flags[29]==0) then begin
        if (printf) then begin
          OutStringovst(1,0,TRrw.VATCode,true,TRrw.ovst);
        end;
      end;    
    if (TRrw.ovst==0) then begin    
   	  if (RepSpec.basecurncy==0) then begin          
        sv = TRrw.DebVal - TRrw.CredVal;
      end else begin
        sv = TRrw.DebVal2 - TRrw.CredVal2;
      end;  
      AddToVATSum(SMvatr,TRrw.VATCode,sv);
    end;
  end;  
  if (TRrw.stp==2) then begin
    if (printf) then begin
      tstr = USetStr(3062);
      tstr = tstr & TRrw.Sign;
      OutString(20,0,USetStr(3063),false);
      OutDate(150,0,TRrw.UpdDate,false);
      OutString(280,0,tstr,true);
      if (TRrw.OldTransDate<>TRr.TransDate) then begin
        OutString(420,0,USetStr(3064),true);
        OutDate(1,0,TRrw.OldTransDate,true);
      end;
    end;
  end;
  if (TRrw.stp==3) then begin
    if (printf) then begin
      ToStrTRCode(tstr,TRrw.CorrYc,TRrw.CorrNr);
      OutString(20,0,USetStr(3065),false);
      OutString(150,0,tstr,false);
      OutString(200,0,USetStr(3066),false);
      OutDate(280,0,TRrw.CorrDate,false);
    end;
  end;
  if (TRrw.stp==4) then begin
    if (printf) then begin
      ToStrTRCode(tstr,TRrw.CorrYc,TRrw.CorrNr);
      OutString(20,0,USetStr(3067),false);
      OutString(150,0,tstr,false);
    end;
  end;
  if (printf) then begin
    EndFormat;
    PrintTrrCurrency(Trrw.Curncy,Trrw.CurDebVal,Trrw.CurCredVal,Trrw.ovst,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2);
  end;
  RETURN;
END;

global
procedure BokundRn(record RcVc RepSpec)
BEGIN
  record IVVc IVr;
  record TRVc TRTotr;
  Boolean TrHs,dcf;
  Integer rwcnt,i,rw;
  row TRVc TRrw;
  val TotSum;
  LongInt ifr,ito;
  val v,t;
  val debsum,credsum;
  val invsum;
  string 255 tstr;  
  record SMVc SMvatr;
//  Integer vatPolish;
  record TRVc gTRp;
  record SMVc gSMp;
  val sv,nilv,svcur;        
  Boolean tmpf,testf;  
  LongInt TransCount;
  
  rw = 1;
  TransCount = 0;
//  vatPolish = 25;
  RecordNew(SMvatr);
  RecordNew(TRTotr);
  RecordNew(gTRp);
  RecordNew(gSMp);
  ifr = FirstInRange(RepSpec.f1,10);
  ito = LastInRange(RepSpec.f1,10);
  StartReportJob(USetStr(2740));   
   rw = 1; 
   HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   if (RepSpec.ArtMode==1) then begin
     tstr = USetStr(1159);
   end;          
   if (RepSpec.ArtMode==0) then begin
     tstr = USetStr(1160);
   end;  
   Header(rw,tstr,0);
  EndHeader;
  SetRepCol(2,80);
  if (RepSpec.ArtMode==1) then begin
    SetRepCol(3,288);
    SetRepCol(4,384);
  end else begin
    SetRepCol(3,288);
    SetRepCol(4,384);
  end;
  SetRepCol(5,465);
  SetRepCol(8,413);
  SetRepCol(9,221);
  if (RepSpec.flags[6]==1) then begin
    SetRepCol(6,190);
  end else begin
    SetRepCol(6,130);
  end;  
  if ((nonblank(RepSpec.ObjType)==false) or (RepSpec.flags[3]!=0)) then begin
    SetRepCol(6,200);
  end;
  SetRepCol(7,140);

  switch (RepSpec.ArtMode) begin
    case 0: // detailed 
      StartFormat(15);
      OutString(0,0,USetStr(2741),false);
      OutString(60,0,USetStr(2742),false);
      OutString(140,0,USetStr(2743),false);
      EndFormat;
      StartFormat(15);
      OutString(20,0,USetStr(2744),false);
      OutString(60,0,USetStr(2748),false);
      OutString(360,0,USetStr(2745),true);
      OutString(440,0,USetStr(2746),true);
      if (RepSpec.flags[0]!=0) then begin
        OutString(470,0,USetStr(2700),true);
      end;
      EndFormat;
    case 1: // overview 
      StartFormat(15);
      OutString(0,0,USetStr(2741),false);
      OutString(60,0,USetStr(2742),false);
      OutString(140,0,USetStr(2743),false);
      OutString(1,0,USetStr(2747),true);
      EndFormat;
  end;
  Gray_Divider(0,1);

  IVr.TransDate = RepSpec.sStartDate;
  IVr.SerNr = ifr;
  TrHs = true;
  while (LoopKey("TransDate",IVr,2,TrHs)) begin
    if (TrHs) then begin
      if (nonblankdate(RepSpec.sEndDate)) then begin
        if (IVr.TransDate>RepSpec.sEndDate) then begin
          TrHs = false;
        end;
      end;    
    end;    
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.f1)) then begin
        if (IVr.SerNr<ifr) then begin
          testf = false;
        end;
        if (IVr.SerNr>ito) then begin
          testf = false;
        end;
      end;
      if (IVr.OKFlag==0) then begin 
        testf = false;
      end;  
      if (IVr.Invalid!=0) then begin 
        testf = false;
      end;  
      if (IVr.InvType==kInvoiceTypePrepayment) then begin
        testf = false;
      end;  
      if (testf) then begin
        StartFormat(15);
        tstr = CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr);
        OutString(0,"DblIVVc",tstr,false);
        OutDate(60,0,IVr.TransDate,false);
        OutString(140,0,IVr.CustCode,false);
        OutString(240,0,IVr.Addr0,false);
        if (HasLocalization("POL")) then begin
          OutString(480,0,IVr.VATNr,true);
        end;
        if (RepSpec.ArtMode==1) then begin
          t = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);          
          if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
            t = -t;
          end;  
          OutVal(1,0,t,M4Val,true);
          invsum = invsum + t;
        end;
        EndFormat;        
        if (RepSpec.ArtMode!=1) then begin
          if (HasLocalization("POL")) then begin
            if (nonblank(IVr.Addr1)) then begin
              StartFormat(15);
              OutString(240,0,IVr.Addr1,false);
              EndFormat;
            end;
            if (nonblank(IVr.Addr2)) then begin
              StartFormat(15);
              OutString(240,0,IVr.Addr2,false);
              EndFormat;
            end;
            if (nonblank(IVr.Addr3)) then begin
              StartFormat(15);
              OutString(240,0,IVr.Addr3,false);
              EndFormat;
            end;
          end;
        end;
        tmpf = false;
        if (RepSpec.flags[0]!=0) then begin
          tmpf = true;
        end;
        if (MakeTransFromIV(gTRp,gSMp,IVr,true,tmpf)==0) then begin
          rwcnt = MatRowCnt(gTRp);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(gTRp,i,TRrw);
            if (RepSpec.ArtMode==0) then begin
              FormTrr(RepSpec,200,gTRp,i,v,SMvatr,TransCount,true,tmpf);
            end;
            sv = TRrw.DebVal - TRrw.CredVal;
            svcur = TRrw.CurDebVal - TRrw.CurCredVal;
            if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
              TRrw.Qty = -TRrw.Qty;
            end;
            if (sv>=0) then begin
              dcf = true;
            end else begin
              dcf = false;
              sv = -sv;
              svcur = -svcur;
            end;
            AddEuroCurncyTrRow(TRTotr,TRrw.AccNumber,TRrw.Objects,"",TRrw.Comment,
                               sv,true,dcf,TotSum,TRrw.Curncy,
                               TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,svcur,TRrw.Qty,-1,false,"");
          end;
        end;        
        if (RepSpec.ArtMode==0) then begin
          Gray_Divider(0,1);
        end;  
      end;
    end;
LSKIP20:;
  end;
  if (invsum!=0) then begin
    Black_Divider(400,480);
    StartFormat(15);
    OutVal(480,0,invsum,M4Val,true);
    EndFormat;
  end;
  StartFormat(25);
  EndFormat;
  Gray_Divider(0,1);
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
    EndFormat;
    StartFormat(15);
    OutString(0,0,USetStr(2744),false);
    OutString(60,0,USetStr(2748),false);
    OutString(360,0,USetStr(2745),true);
    OutString(440,0,USetStr(2746),true);
    if (RepSpec.flags[0]!=0) then begin
      OutString(440,0,USetStr(2700),true);
    end;
    EndFormat;
    Gray_Divider(0,1);
  end;
  rwcnt = MatRowCnt(TRTotr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TRTotr,i,TRrw);
    FormTrr(RepSpec,200,TRTotr,i,v,SMvatr,TransCount,true,tmpf);
    if ((TRrw.ovst==0) and (TRrw.stp==1)) then begin
      credsum = credsum + TRrw.CredVal;
      debsum = debsum + TRrw.DebVal;
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
   OutVal(360,0,debsum,M4DVal,true);
   OutVal(440,0,credsum,M4DVal,true);
  EndFormat;
  EndJob;
  RETURN;
END;
