external function Integer CountObjects(string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);

global
function boolean FindItemSt(string salesman,string item,var val totval, var val totqty, var val totgp,date sDate,date eDate)
begin
  record IUSVc IUSr;
  boolean res;
  Boolean foundf;
  
  res = false;
  IUSr.UserCode = salesman;
  IUSr.ArtCode = item;
  foundf = ReadFirstMain(IUSr,2,false);
  if (Left(IUSr.ArtCode,len(item))<>item) then begin
    foundf = false;
  end;
  if (IUSr.UserCode<>salesman) then begin
    foundf = false;
  end;
  if (foundf) then begin
    IUSr.ArtCode = item;
    totgp = GetTurnover(IUSr,"grossprofit",sDate,eDate);
    totqty = GetTurnover(IUSr,"quant",sDate,eDate);
    totval = GetTurnover(IUSr,"salesexclvat",sDate,eDate);
    if totqty<> 0 then begin
      res = true;
    end;
  end;
  FindItemSt = res;
  return;
end;

global
function Boolean FindItemStSlow(record RcVc RepSpec,string salesman,string item,var val totval, var val totqty, var val totgp)
BEGIN
  boolean res,found,test,testf1,testf;
  record ItemHistVc IHr;
  record IVVc IVr;
  record CUVc CUr;
  integer i, rwcnt;
  row IVVc IVrw;
  string 5 fromcustcat,tocustcat;
  string 20 fromcust, tocust,index;
  LongInt friv,toiv;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  val nrofsalesman;
  
  friv = FirstInRange(RepSpec.f3,20);
  toiv = LastInRange(RepSpec.f3,20);
  
  fromcustcat = FirstInRange(RepSpec.LastAcc,5);
  tocustcat = LastInRange(RepSpec.LastAcc,5);
  
  fromcust = FirstInRange(RepSpec.ObjStr,20);
  tocust = LastInRange(RepSpec.ObjStr,20);
   
  ResetLoop(IHr);
  IHr.TransDate = RepSpec.sStartDate;
  IHr.ArtCode = item;
  totqty = 0;
  totval = 0;
  totgp = 0;
  found = true;
  res = false;
  while LoopKey("ArtCode",IHr,2,found) begin
    test = true;
    if item <> IHr.ArtCode then begin
      test = false;
      found = false;
    end;
    if IHr.FileName <> "IVVc"  then begin
      test = false;
    end;
    if (nonblankdate(RepSpec.sEndDate)) then begin  
      if IHr.TransDate > RepSpec.sEndDate then begin
        test = false;
        found = false;
      end;
    end;
    if (IHr.Invalid!=0) then begin test = false; end;
    if test then begin
       IVr.SerNr = IHr.TransNr;
       if ReadFirstMain(IVr,1,false) then begin          
          if (IVr.Invalid == 0) then begin
            testf1 = true;
            if nonblank(RepSpec.f3) then begin
              if (IVr.SerNr<friv) or (IVr.SerNr>toiv) then begin
                testf1 = false;
              end;
            end; 
            if nonblank(RepSpec.ObjStr) then begin
              if (IVr.CustCode<fromcust) or (IVr.CustCode>tocust) then begin
                testf1 = false;
              end;
            end;
            if nonblank(RepSpec.LastAcc) then begin
              CUr.Code = IVr.CustCode;
              if ReadFirstMain(CUr,1,true) then begin
                if (CUr.CustCat<fromcustcat) or (CUr.CustCat>tocustcat) then begin
                  testf1 = false;
                end;
              end;
            end;       
            if (nonblank(salesman)) then begin
              if (SetInSet(salesman,IVr.SalesMan)==false) then begin testf1 = false; end;
            end;
            if  testf1 then begin          
                rwcnt = MatRowCnt(IVr);
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(IVr,i,IVrw);
                  if (IVrw.stp==kInvoiceRowTypeNormal or IVrw.stp==kInvoiceRowTypeStructuredItemComponent) and (i==IHr.Row) then begin
                    if (IVrw.ArtCode==item & IHr.Variety) then begin
                      nrofsalesman = CountObjects(IVr.SalesMan);
                      if (nrofsalesman==0) then begin nrofsalesman = 1;  end;                      
                      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                        totqty = totqty - IVrw.Quant;
                        totval = totval - IVrw.Quant* (IVrw.BasePrice / nrofsalesman) - (IVrw.rowGP/nrofsalesman);
                        //totval = totval - MulRateToBase1(IVr.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                        totgp = totgp - (IVrw.rowGP / nrofsalesman);
                      end else begin
                        totqty = totqty + IVrw.Quant;
                        totval = totval + IVrw.Quant* (IVrw.BasePrice / nrofsalesman) + (IVrw.rowGP/nrofsalesman);
                        //totval = totval + MulRateToBase1(IVr.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                        totgp = totgp + (IVrw.rowGP / nrofsalesman);
                      end;
                    end;
                  end;
                end;
              end; 
          end; //Invalid
       end;// ReadFirst
    end;//test  
  end;  

  index = "ArtCode:" & item;
  IVCashr.TransDate = RepSpec.sStartDate;
  found = true;
  while (LoopKey(index,IVCashr,1,found)) begin
    if (DateInRange(IVCashr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (IVCashr.Invalid!=0) then begin testf = false; end;
      if (testf) then begin
        if (nonblank(RepSpec.f3)) then begin
          if (IVCashr.SerNr<friv) or (IVCashr.SerNr>toiv) then begin
            testf = false;
          end;
        end; 
        if (nonblank(RepSpec.ObjStr)) then begin
          if (IVCashr.CustCode<fromcust) or (IVCashr.CustCode>tocust) then begin
            testf = false;
          end;
        end;
        if (nonblank(RepSpec.LastAcc)) then begin
          CUr.Code = IVCashr.CustCode;
          if (ReadFirstMain(CUr,1,true)) then begin
            if (CUr.CustCat<fromcustcat) or (CUr.CustCat>tocustcat) then begin
              testf = false;
            end;
          end;
        end;       
        if (nonblank(salesman)) then begin
          if (SetInSet(salesman,IVCashr.SalesMan)==false) then begin testf = false; end;
        end;
        if (testf) then begin
          nrofsalesman = CountObjects(IVCashr.SalesMan);
          if (nrofsalesman==0) then begin nrofsalesman = 1;  end;          
          rwcnt = MatRowCnt(IVCashr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVCashr,i,IVCashrw);
            if (IVCashrw.stp==kInvoiceRowTypeNormal or IVCashrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
              if (IVCashrw.ArtCode==item & IHr.Variety) then begin
                totqty = totqty + IVCashrw.Quant;
                totval = totval + IVCashrw.Quant*(IVCashrw.BasePrice / nrofsalesman) + (IVCashrw.rowGP/nrofsalesman);
                //totval = totval + MulRateToBase1(IVCashr.CurncyCode,IVCashrw.Sum,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
                totgp = totgp + (IVCashrw.rowGP / nrofsalesman);
              end;
            end;
          end;
        end;
      end;
    end;
  end;

 if totqty <> 0 then begin 
    res = true;   
  end;
  FindItemStSlow = res;   
  return;
end;

global
procedure OutLineText (string text1)
BEGIN
    StartFormat(15);
    OutString(5,0,text1,false);
    OutString(6,0,USetStr(2326),false);
    OutString(7,0,USetStr(2620),true);
    OutString(8,0,USetStr(2425),true);
    OutString(9,0,USetStr(3555),true);
    EndFormat;
RETURN;
END; 

global  
procedure OutLine (string code, string name, val tqty, val tval, val tgp)
BEGIN
  StartFormat(15);
  OutString(3,0,code,false);
  OutString(4,0,name,false);
  OutVal(7,0,tqty,M4Qty,true);
  OutVal(8,0,tval,M4Val,true);
  OutVal(9,0,tgp,M4Val,true);
  EndFormat;
RETURN;
END;
