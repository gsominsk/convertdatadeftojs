#ifdef HAL
external procedure AddProjValue(Boolean,Boolean,var val,val,val,val);

global
procedure FindBudgetSum(string pr,string item,string em,Array Integer uarr,Integer uarracnt,var val resp)
BEGIN
  Integer rwcnt,i;
  row TBBUVc TBBUrw;
  record TBBUVc TBBUr;
  
  resp = blankval;
  TBBUr.PRCode = pr;
  if (ReadFirstMain(TBBUr,1,true)==false) then begin 
    goto L991; 
  end;
  rwcnt = MatRowCnt(TBBUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUr,i,TBBUrw);    
    if (item==TBBUrw.ArtCode) then begin
//      if ((em==TBBUrw.EMCode) or (blank(TBBUrw.EMCode))) then begin 
//what if AM made work assigned to SJ ? 
      if (true) then begin
        if (TBBUrw.BudType<>3) then begin          
          if (uarr[i]==0) then begin
            resp = resp + TBBUrw.Sum;
            uarr[i] = 1;
          end;
        end;
      end;  
    end;
  end;
L991:;  
  RETURN;
END;

global
procedure FindBudgetRow(string pr,string item,string em,Integer type,var Date dtp,var Integer budtype)
BEGIN
  Integer rwcnt,i;
  row TBBUVc TBBUrw;  
  record TBBUVc TBBUr;
  
  dtp = AddYear(dtp,-GetYear(dtp));
  TBBUr.PRCode = pr;
  if (ReadFirstMain(TBBUr,1,true)==false) then begin 
    goto L992; 
  end;  
  
  switch (type) begin
    case 0: budtype = TBBUr.BudTime;
    case 5: budtype = TBBUr.BudMaterial;
    case 1: budtype = TBBUr.BudStocked;
    otherwise budtype = TBBUr.BudOther;
  end; 
  rwcnt = MatRowCnt(TBBUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUr,i,TBBUrw);
    if (item==TBBUrw.ArtCode) then begin    
      if (type==3) then begin
        if (blank(TBBUrw.EMCode) or (em==TBBUrw.EMCode)) then begin
          dtp = TBBUrw.InvAfter;
          goto L992;            
        end;
      end else begin
        dtp = TBBUrw.InvAfter;
        goto L992;          
      end;    
    end;  
  end;
L992:;  
  RETURN;
END;

global
procedure GetPRClassName(string aclass,var string tstr)
BEGIN
  record PRClassBlock PRClRec;
  row PRClassBlock prrw;
  Integer i,rwcnt;

  BlockLoad(PRClRec);
  tstr = "";
  rwcnt = MatRowCnt(PRClRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PRClRec,i,prrw);
    if (aclass==prrw.Code) then begin
      tstr = prrw.Comment;
      goto L993;
    end; 
  end;
L993:;  
  RETURN;
END;

global
procedure ProjectHeader(record RcVc RepSpec,record PRVc PRr,Integer head)
BEGIN
  string 255 tstr;

  StartFormat(15);
  OutString(20,0,USetStr(4822),false);
  OutString(100,"DblPRVc",PRr.Code,false);
  OutString(200,0,PRr.Name,false);
  EndFormat;
  StartFormat(15);
  OutString(20,0,USetStr(4823),false);
  OutString(100,"DblCUVc",PRr.CustCode,false);
  OutString(200,0,PRr.CustName,false);
  EndFormat;
  StartFormat(15);
  OutString(20,0,USetStr(4849),false);
  OutString(100,0,PRr.Leader,false);
  OutString(200,0,PRr.LeaderName,false);
  EndFormat;
  if (nonblank(PRr.PRClass)) then begin
    StartFormat(15);
    OutString(20,0,USetStr(4850),false);
    OutString(100,0,PRr.PRClass,false);
    GetPRClassName(PRr.PRClass,tstr);
    OutString(200,0,tstr,false);
    EndFormat;
  end;
  /*
  if (PRr.MaxRetSum>0) then begin
    StartFormat(15);
    OutString(200,0,USetStr(4873),false);//Retenton
    OutVal(330,0,PRr.MaxRetSum,M4Val,true);
    EndFormat;
  end;
  */
  Gray_Divider(0,1);
  StartFormat(10);
  EndFormat;
  if (head==1) then begin
    StartFormat(15);
    OutString(20,0,USetStr(4853),false);
    OutString(80,0,USetStr(4854),false);
    OutString(135,0,USetStr(4855),true);
    if (RepSpec.flags[12]==1) then begin OutString(145,0,USetStr(4866),false); end;
    if (RepSpec.flags[11]==1) then begin OutString(300,0,USetStr(4856),true); end;
    OutString(330,0,USetStr(4859),true);
    OutString(385,0,USetStr(4857),true);
    OutString(455,0,USetStr(4858),true);
    EndFormat;
    Gray_Divider(0,1);
  end;
  if (head==2) then begin
    StartFormat(15);
    OutString(20, 0,USetStr(4853),false);
    OutString(100,0,USetStr(4866),false);
    OutString(350,0,USetStr(4857),true);
    OutString(450,0,USetStr(4858),true);
    EndFormat;
    Gray_Divider(0,1);
  end;
  if (head==3) then begin
    StartFormat(15);
    OutString(20, 0,USetStr(4853),false);
    OutString(80,0,USetStr(4854),false);
    if (RepSpec.flags[12]==1) then begin OutString(125,0,USetStr(4866),false); end;
    if (RepSpec.flags[11]==1) then begin OutString(290,0,USetStr(4856),true); end;
    OutString(370,0,USetStr(4857),true);
    OutString(450,0,USetStr(4858),true);
    EndFormat;
    Gray_Divider(0,1);
  end;
  RETURN;
END;

global
procedure FindInvoiceMethod(LongInt sernr,string pr,string item,string em,var val sump,Date dtp,Integer type,var record TBBUVc MR2p,var Integer methodp,var val invpricep,
                           val apric,var val invapric,val qty,var val invqty,val discount,var val invdiscount,val costprice,var val invcostprice,
                           var string tbburowcomment,Boolean readtbbf)
BEGIN
  Integer rwcnt,i;
  record TBBUVc TBBr;

  record TBBUVc tmpTBBUr;
  row TBBUVc TBBUrw;
  record INVc INr;
  Integer rownr;
  Boolean testf;
  
  rownr = -1;
  invpricep = sump;
  invqty = qty;
  invapric = apric;  

  invdiscount = discount;  
  invcostprice = costprice;  
  if (readtbbf) then begin
    tmpTBBUr.PRCode = pr;
    if (ReadFirstMain(tmpTBBUr,1,true)) then begin
      RecordCopy(TBBr,tmpTBBUr);
    end else begin
      goto L234;
    end;  
  end else begin
    RecordCopy(TBBr,MR2p);
  end;

  if (type==1) then begin
    methodp = TBBr.BudStocked;
  end;
  if (type==3) then begin
    methodp = TBBr.BudTime;
  end;
  if (type==5) then begin
    methodp = TBBr.BudMaterial;
  end;
  if ((type<>1) and (type<>3) and (type<>5)) then begin
    methodp = TBBr.BudOther;
  end;
  rwcnt = MatRowCnt(TBBr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBr,i,TBBUrw);
    if (item==TBBUrw.ArtCode) then begin
      testf = true;
      if (type==5) then begin
        testf = false;
        INr.Code = TBBUrw.ArtCode;
        if (ReadFirstMain(INr,1,true)) then begin
          if (INr.ItemMaterial<>0) then begin testf = true; end;
        end;
      end;
      if (testf) then begin
        if ((blank(TBBUrw.EMCode)) or (em==TBBUrw.EMCode)) then begin
          if (TBBUrw.BudType<>3) then begin
            rownr = i;
            goto L234;
          end;
        end;
      end;
    end;
  end;
L234:;
  tbburowcomment = TBBUrw.Comment;
  if (rownr<>-1) then begin
    MatRowGet(TBBr,rownr,TBBUrw);
    if (TBBUrw.BudType<>3) then begin
      if (TBBUrw.BudType<>0) then begin
        methodp = TBBUrw.BudType - 1;
        if (methodp==1) then begin // fixed budget 
          if (TBBUrw.Invoiced<=0) then begin
            if (nonblankdate(TBBUrw.InvAfter)) then begin
              if (dtp>TBBUrw.InvAfter) then begin
                if (sernr<>-1) then begin
                  TBBUrw.Invoiced = sernr;
                end;  
                invpricep = TBBUrw.Sum;
                invqty = TBBUrw.Qty;
                invapric = TBBUrw.Price;
                invdiscount = TBBUrw.Discount;
                invcostprice = TBBUrw.Cost;
              end else begin
                invpricep = blankval;
                invapric = blankval;
                invqty = blankval;
                invdiscount = blankval;
                invcostprice = blankval;
              end;
            end else begin
              if (sernr<>-1) then begin
                TBBUrw.Invoiced = sernr;
              end;  
              invpricep = TBBUrw.Sum;
              invqty = TBBUrw.Qty;
              invapric = TBBUrw.Price;
              invdiscount = TBBUrw.Discount;
              invcostprice = TBBUrw.Cost;
            end;
          end else begin
            invpricep = blankval;
            invapric = blankval;
            invqty = blankval;
            invdiscount = blankval;
            invcostprice = blankval;
          end;
        end;
      end else begin
        if (methodp==1) then begin
          if (TBBUrw.Invoiced<=0) then begin
            if (nonblankdate(TBBUrw.InvAfter)) then begin
              if (dtp>TBBUrw.InvAfter) then begin
                if (sernr<>-1) then begin
                  TBBUrw.Invoiced = sernr;
                end;  
                invpricep = TBBUrw.Sum;
                invqty = TBBUrw.Qty;
                invapric = TBBUrw.Price;                
                invdiscount = TBBUrw.Discount;
                invcostprice = TBBUrw.Cost;
              end else begin
                invpricep = blankval;
                invapric = blankval;
                invqty = blankval;
                invdiscount = blankval;
                invcostprice = blankval;
              end;
            end else begin
              if (sernr<>-1) then begin
                TBBUrw.Invoiced = sernr;
              end;  
              invpricep = TBBUrw.Sum;
              invqty = TBBUrw.Qty;
              invapric = TBBUrw.Price;                
              invdiscount = TBBUrw.Discount;
              invcostprice = TBBUrw.Cost;
            end;
          end else begin
            invpricep = blankval;
            invapric = blankval;
            invqty = blankval;
            invdiscount = blankval;
            invcostprice = blankval;
          end;
        end else begin
        // running budget do nothing 
        end;
      end;
    end;
    if (readtbbf) then begin
      MatRowPut(TBBr,rownr,TBBUrw);
    end else begin
      MatRowPut(TBBr,rownr,TBBUrw);
      RecordCopy(MR2p,TBBr);
    end;
  end else begin
    // we did not find this item in the budget so we ignore it for fixed price 
    if (methodp==1) then begin
      invpricep = blankval;
      invapric = blankval;
      invqty = blankval;
    end;
  end;
  RETURN;  
END;

global
procedure FindInvoice2Method(string pr,string item,string em,Date dtp,Integer type,var record TBBUVc TBBr,var Integer methodp,Boolean readtbbf)
BEGIN
  val invprice,invqty,invapric;
  val sum,qty,price,t;
  string 255 tbburowcomment;
  
  FindInvoiceMethod(-1,pr,item,em,sum,dtp,type,TBBr,methodp,invprice,price,invapric,qty,invqty,t,t,t,t,tbburowcomment,readtbbf);
  
  RETURN;
END;

global
procedure GetProjectStats(string prcode,Boolean amounts,Boolean cost,var val budgetp,var val invoicedp,var val invablep)
BEGIN
  record TBIVVc TBIVr;
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  Boolean found;
  Integer i,rwcnt;
  Integer budtp;
  Boolean budfound;
  
  TBBUr.PRCode = prcode;
  budfound = ReadFirstMain(TBBUr,1,true);
  TBIVr.PRCode = prcode;
  found = true;
  while (LoopMain(TBIVr,1,found)) begin
    if (TBIVr.PRCode<>prcode) then begin found = false; end;
    if (found) then begin
      budtp = 0; // here : 0 - running, 1 - fixed 
      if (budfound) then begin
        FindInvoice2Method(prcode,TBIVr.ArtCode,TBIVr.EMCode,CurrentDate,TBIVr.ItemType,TBBUr,budtp,false);
      end;
      if (budtp==0) then begin
        if (TBIVr.Invoice==-1) then begin
          AddProjValue(amounts,false,invablep,TBIVr.Sum,TBIVr.CostPrice,TBIVr.Qty);
        end else begin
          if (blank(TBBUr.CurncyCode)) then begin
            AddProjValue(amounts,false,invoicedp,TBIVr.Sum,TBIVr.CostPrice,TBIVr.Qty);
          end else begin
            AddProjValue(amounts,false,invoicedp,TBIVr.SumInCur,TBIVr.CostPriceInCur,TBIVr.Qty);
          end;
        end;
      end;
    end;
  end;
  if (budfound) then begin
    rwcnt = MatRowCnt(TBBUr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TBBUr,i,TBBUrw);
      if (TBBUrw.stp==1) then begin
      budtp = TBBUrw.BudType;
      if (budtp==0) then begin
        if (TBBUrw.ItemType==1) then begin
          budtp = TBBUr.BudStocked + 1; 
        end;
        if (TBBUrw.ItemType==3) then begin
          budtp = TBBUr.BudTime + 1;
        end;        
        if (TBBUrw.ItemType==5) then begin
          budtp = TBBUr.BudMaterial + 1;
        end;
        if ((TBBUrw.ItemType<>1) and (TBBUrw.ItemType<>3) and (TBBUrw.ItemType<>5)) then begin
          budtp = TBBUr.BudOther+1;
        end;
      end;
      if (budtp==1) then begin// here : 1 - running, 2 - fixed 
          AddProjValue(amounts,false,budgetp,TBBUrw.Sum,TBBUrw.Cost,TBBUrw.Qty);
      end;
      if (budtp==2) then begin
          if ((CurrentDate<=TBBUrw.InvAfter) or (blankdate(TBBUrw.InvAfter))) then begin
            if (TBBUrw.Invoiced<=0) then begin
              AddProjValue(amounts,false,invablep,TBBUrw.Sum,TBBUrw.Cost,TBBUrw.Qty);
            end else begin
              AddProjValue(amounts,false,invoicedp,TBBUrw.Sum,TBBUrw.Cost,TBBUrw.Qty);
            end;
          end;
          AddProjValue(amounts,false,budgetp,TBBUrw.Sum,TBBUrw.Cost,TBBUrw.Qty);
      end;
      if (budtp==3) then begin
      end;
      end;
    end;
  end;  
  RETURN;
END;

global
procedure PRSumDownPay(record PRVc PRp,var val valp,var val totp,Date invdatep,var string comment,var Boolean endp)
BEGIN
  row PRVc PRrw;
  Integer i,rwcnt;
  val t;
  Boolean endf;
  
  endf = false;
  valp = 0;
  totp = 0;
  rwcnt = MatRowCnt(PRp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PRp,i,PRrw);
    if (PRrw.ValStr=="=") then begin
      if (comment<>"") then begin
        comment = PRrw.Comment;
      end;  
      endf = true;
    end else begin
      if (PRrw.PlanDate<=invdatep) then begin
        t = StringToVal(PRrw.ValStr,M4Val);
        valp = valp + t;
        if (comment<>"") then begin
          comment = PRrw.Comment;
        end;  
      end;
    end;
  end;
  if (endf) then begin
    valp = PRp.DownPaySent + PRp.DownPayRedcd;
    valp = -valp;
  end;
  endp = endf;
  RETURN;  
END;

#endif
