#ifdef HAL
external function boolean CheckItemGroupClassification(string,string,string);
external procedure HTItemClass(string,var string);
external procedure BeginCurncyTotals(var Integer);



global
procedure OverShippedRn(record RcVc RepSpec)
begin
  record ORVc ORr;
  row ORVc ORrw;
  record FBVc ORSr;
  row FBVc ORSrw;
  Boolean TrHs,testf,item;
  Integer i,rwcnt;
  string 255 frgr,togr;
  val TotSum,TotQty,TotLev,TotNotLev,TotInv;
  LongInt afr,ato;  
  Integer j,jrwcnt;
  record IVVc IVr;
  record SHVc SHr;
  row SHVc SHrw;
  row IVVc IVrw;
  row ORVc OR2rw;
  record RetVc Retr;
  row RetVc Retrw;
  Boolean shfound,ivfound;
  string 255 tstr;
  Integer rw;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt;
  val totorder,totship,totinvd;
  
  rw = 1;
  afr = FirstInRange(RepSpec.f1,20);
  ato = LastInRange(RepSpec.f1,20);
  frgr = FirstInRange(RepSpec.f3,20);
  togr = LastInRange(RepSpec.f3,20);
  BeginCurncyTotals(curcnt);
  StartReportJob(USetStr(3521));
  if (nonblank(RepSpec.f1)) then begin
     tstr = USetStr(3524);
     tstr = tstr & " ";
     tstr = tstr & RepSpec.f1;
     Header(rw,tstr,1);
     rw = rw + 1;
   end; 
    if (nonblank(RepSpec.LastAcc)) then begin
     tstr = USetStr(3523);
     tstr = tstr & " ";
     tstr = tstr & RepSpec.LastAcc;
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
   if (nonblank(RepSpec.f3)) then begin
     tstr = USetStr(3528);
     tstr = tstr & " ";
     tstr = tstr & RepSpec.f3;
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
   if (nonblank(RepSpec.f8)) then begin 
      HTItemClass(RepSpec.f8,tstr);
      Header(rw,tstr,1);  
      rw = rw + 1;  
    end;
   if (nonblank(RepSpec.f2)) then begin
    tstr = USetStr(3527);
    tstr = tstr & " ";
    tstr = tstr & RepSpec.f2;
    Header(rw,tstr,1);
    rw = rw + 1;
   end;
  
  EndHeader;
  StartFormat(15);
  OutString(0,0,USetStr(3522),false);
  OutString(80,0,USetStr(3523),false);
  OutString(320,0,USetStr(3524),true);
  OutString(400,0,USetStr(3525),true);
  OutString(480,0,USetStr(3526),true);
  EndFormat;
  Gray_Divider(0,1);
  ORr.SerNr = afr;
  TrHs = true;
  while (LoopMain(ORr,1,TrHs)) begin
    if (TrHs) then begin
        if (ato<>-1) then begin
          if (ORr.SerNr>ato) then begin
           TrHs = false;
          end;
        end;   
    end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.f2) and (RepSpec.f2<>ORr.CustCode)) then begin testf = false; end;      
      if (testf) then begin 
        RecordNew(ORSr);             
        jrwcnt = MatRowCnt(ORr);
        for (j = 0 ; j<jrwcnt ;j=j+1) begin
          MatRowGet(ORr,j,OR2rw);
          ORSrw.DebVal = 0;      
          ORSrw.Comment = OR2rw.ArtCode;
          ORSrw.CurncyCode = OR2rw.stp;
          ORSrw.DebVal = ORSrw.DebVal + OR2rw.Quant;//order
          MatRowPut(ORSr,j,ORSrw);
        end;
//                    FindAllShipments 
          jrwcnt = MatRowCnt(ORSr);
          for (j = 0 ; j<jrwcnt ;j=j+1) begin        
            MatRowGet(ORSr,j,ORSrw);
            ORSrw.Deb2Val = 0;          
            ORSrw.CurDebVal = 0;          
            MatRowPut(ORSr,j,ORSrw);
          end;
          SHr.OrderNr = ORr.SerNr;
          shfound = true;
          ResetLoop(SHr);
          while (LoopKey("OrderKey",SHr,1,shfound)) begin
            if (shfound) then begin
              if (SHr.OrderNr<>ORr.SerNr) then begin
                shfound = false;
              end;
            end;    
            if (shfound) then begin          
              jrwcnt = MatRowCnt(SHr);
              for (j = 0 ; j<jrwcnt ;j=j+1) begin            
                MatRowGet(SHr,j,SHrw);
                if (SHrw.OrdRow>-1) then begin
                  MatRowGet(ORSr,SHrw.OrdRow,ORSrw);
                  item = true;
                  if ((ORSrw.Comment<>RepSpec.LastAcc) and (nonblank(RepSpec.LastAcc))) then begin item = false; end;  
                  //if (CheckItemGroup(frgr,togr,ORSrw.Comment)==false) then begin item = false; end;
                  if (CheckItemGroupClassification(ORSrw.Comment,RepSpec.f3,RepSpec.f8)==false) then begin item = false; end; 
                  if (item) then begin
                    ORSrw.Deb2Val = ORSrw.Deb2Val + SHrw.Ship;//shipped
                    MatRowPut(ORSr,SHrw.OrdRow,ORSrw);
                  end;  
                end;
              end;
            end;
          end;

          Retr.OrdNr = ORr.SerNr;
          shfound = true;
          ResetLoop(Retr);
          while (LoopKey("OrdNr",Retr,1,shfound)) begin
            if (shfound) then begin
              if (Retr.OrdNr<>ORr.SerNr) then begin
                shfound = false;
              end;
            end;    
            if (shfound) then begin          
              jrwcnt = MatRowCnt(Retr);
              for (j = 0 ; j<jrwcnt ;j=j+1) begin            
                MatRowGet(Retr,j,Retrw);
                if (Retrw.OrdRow>-1) then begin
                  MatRowGet(ORSr,Retrw.OrdRow,ORSrw);
                  item = true;
                  if ((ORSrw.Comment<>RepSpec.LastAcc) and (nonblank(RepSpec.LastAcc))) then begin item = false; end;  
                  if (CheckItemGroupClassification(ORSrw.Comment,RepSpec.f3,RepSpec.f8)==false) then begin item = false; end; 
                  if (item) then begin
                    ORSrw.Deb2Val = ORSrw.Deb2Val - Retrw.Quant;//returned
                    MatRowPut(ORSr,Retrw.OrdRow,ORSrw);
                  end;  
                end;
              end;
            end;
          end;

//                    FindAllInvoices 
          IVr.OrderNr = ORr.SerNr;
          ivfound = true;
          ResetLoop(IVr);        
          while (LoopKey("OrderNr",IVr,1,ivfound)) begin
            if (ivfound) then begin
              if (IVr.OrderNr<>ORr.SerNr) then begin
                ivfound = false;
              end;
            end;    
            if (ivfound) then begin
              testf = true;
              if (IVr.Invalid!=0)  then begin testf = false; end;
              if (testf) then begin
                jrwcnt = MatRowCnt(IVr);
                for (j = 0 ; j<jrwcnt ;j=j+1) begin
                  MatRowGet(IVr,j,IVrw);
                  if ((IVrw.stp==1) and (IVrw.OrdRow<>-1)) then begin
                    MatRowGet(ORSr,IVrw.OrdRow,ORSrw);
                    item = true;                  
                    if ((ORSrw.Comment<>RepSpec.LastAcc) and (nonblank(RepSpec.LastAcc))) then begin item = false; end;  
                    if (CheckItemGroupClassification(ORSrw.Comment,RepSpec.f3,RepSpec.f8)==false) then begin item = false; end; 
                    if (item) then begin
                      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                        ORSrw.CurDebVal = ORSrw.CurDebVal - IVrw.Quant;//invoiced
                      end else begin
                        ORSrw.CurDebVal = ORSrw.CurDebVal + IVrw.Quant;//invoiced
                      end;
                      MatRowPut(ORSr,IVrw.OrdRow,ORSrw);
                    end;
                  end;  
                end;  
              end;
            end;
          end;
      end;      
      jrwcnt = MatRowCnt(ORSr);      
      if (jrwcnt>0 and testf) then begin
        for (j = 0 ; j<jrwcnt ;j=j+1) begin
          MatRowGet(ORSr,j,ORSrw);
          if ((ORSrw.Deb2Val>ORSrw.DebVal) or (ORSrw.CurDebVal>ORSrw.DebVal)) then begin
            MatRowGet(ORr,j,ORrw);
            StartFormat(15);
            OutLongInt(0,"DblORVc",ORr.SerNr,false);
            OutString(80,0,ORrw.ArtCode,false);
            OutVal(320,0,ORSrw.DebVal,M4Val,true);
            OutVal(400,0,ORSrw.Deb2Val,M4Val,true);
            OutVal(480,0,ORSrw.CurDebVal,M4Val,true);
            EndFormat;
            totorder = totorder + ORSrw.DebVal;
            totship = totship + ORSRw.Deb2Val;
            totinvd = totinvd + ORSrw.CurDebVal;
          end;          
        end;
      end;
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  OutVal(320,0,totorder,M4Val,true);
  OutVal(400,0,totship,M4Val,true);
  OutVal(480,0,totinvd,M4Val,true);
  EndJob;
  RETURN;
end;
#endif
