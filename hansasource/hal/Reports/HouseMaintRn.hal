external function val HoursDiff(Date,Time,Date,Time);

global
procedure HouseMaintRn(record RcVc RepSpec)
begin
    record RLinkVc RLr;
   Integer i,alen;
   record ActVc Actr,ActrLinked;
   Boolean TsHr,Skip;
   Integer p1,p2,p3,p4,p5,p6,p7,p8,p9,pA,pB;
   Integer keys;
   String 20 mykey;
   String 20 tstr,tstr1;
   Val hdiff,AvgRespTime,tt,htaken,AvgSolvTime;
   array Integer iar;

   // Positions
   p1= 0;
   p2= 70;
   p3= 110;
   p4= 180;
   p5= 270;
   p6= 320;
   p7= 400;  
   p8= 480;  

   // Get parameters & Init
   tt = 0;
   alen = 0;
   AvgRespTime = 0;
   AvgSolvTime = 0;
   TsHr = true;
   
   StartReportJob(USetStr(10270));
   EndHeader;

   StartFormat(15);
   OutString(p1,0,USetStr(10271),false);
   OutString(p3,0,USetStr(10272),false);
   OutString(p5,0,USetStr(10273),true);
   OutString(p6,0,USetStr(10274),false);  
   OutString(p7,0,USetStr(10272),false);  
   OutString(p8,0,USetStr(10272),true);  
   EndFormat;
   OutString(p1,0,USetStr(10276),false);
   OutString(p2,0,USetStr(10277),false);
   OutString(p3,0,USetStr(10276),false);
   OutString(p4,0,USetStr(10277),false);
   OutString(p5,0,USetStr(10277),true);  
   OutString(p6,0,USetStr(10278),false);  
   OutString(p7,0,USetStr(10278),false);  
   OutString(p8,0,USetStr(10283),true);  
   EndFormat;
  
   Gray_Divider(0,1);
   
   Actr.TransDate=RepSpec.sStartDate;  
   while (LoopKey("TransDate",Actr,1,TsHr)) begin

     Skip = false;
     If ((Actr.TransDate>RepSpec.sEndDate)) then begin
       Skip = true;
       TsHr = false;
     end;
     if ((RepSpec.f2 <> Actr.ActType) and (not Blank(RepSpec.f2))) then begin
       Skip = true;
     end;
     if ((RepSpec.f1 <> Actr.MainPersons) and (not Blank(RepSpec.f1))) then begin
       Skip = true;
     end;

      If (not Skip) then begin

         StartFormat(15);         
         if (ReadRecordLink(Actr,1,ActrLinked,RLr)) then begin
           OutDate(p1,0,ActrLinked.TransDate,false);
           OutString(p2,0,ActrLinked.StartTime,false);    
           hdiff = HoursDiff(ActrLinked.TransDate,ActrLinked.StartTime,Actr.TransDate,Actr.StartTime);
         end;
         OutDate(p3,0,Actr.TransDate,false);
         OutString(p4,0,Actr.StartTime,false);
         OutVal(p5,0,hdiff,M4Val,true);
         OutString(p6,0,ActrLinked.MainPersons,false);
         OutString(p7,0,Actr.MainPersons,false);
         htaken = HoursDiff(Actr.EndDate,Actr.EndTime,Actr.TransDate,Actr.StartTime);
         OutVal(p8,0,htaken,M4Val,true);
         
         if (RepSpec.flags[1]==1) then begin
           StartFormat(15);  
           OutString(p1,0,Actr.Comment,false);
           OutString(p5,0,USetStr(10282) & ": " & Actr.Resources,true);
           OutString(p6,0,Actr.ActType & " --> " & Actr.ActResult ,false);
           EndFormat;
         end;
         tt = tt + 1;
         AvgRespTime = AvgRespTime + hdiff;
         AvgSolvTime = AvgSolvTime + htaken;         
      End;

   end;

  AvgRespTime = (AvgRespTime/tt);
  AvgSolvTime = (AvgSolvTime/tt);
  // Footer
  StartFormat(15);
  EndFormat;
  EndFormat;
  OutString(p1,0,USetStr(10279),false);
  OutVal(p5,0,tt,M4Val,true);
  OutString(p1,0,USetStr(10280),false);
  OutVal(p5,0,AvgRespTime,M4Val,true);
  OutString(p1,0,USetStr(10281),false);
  OutVal(p5,0,AvgSolvTime,M4Val,true);
  EndFormat;
  EndJob;
  return;
end;
