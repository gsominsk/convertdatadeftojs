external procedure HTCusts(string, string, var string);
external procedure HT2Per(Date, Date , var string);
external procedure HTOrder(LongInt, LongInt, var string);

procedure PrintPrepayments(LongInt ORSerNr)
begin
  record ARPayHistVc ARPHr;
  Boolean found,testf,headerf;
  
  headerf = true;
  found = true;
  ARPHr.OrderNr = ORSerNr;
  while (LoopKey("OrderNr",ARPHr,1,found)) begin
    if (ARPHr.OrderNr!=ORSerNr) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (ARPHr.FileName!="IPVc") then begin testf = false; end;
      if (testf) then begin
        if (headerf) then begin
          headerf = false;
          Gray_Divider(15,1);
          StartFormat(15);
           OutString(3,0,USetStr(31110),false);
          EndFormat;
          StartFormat(15);
           OutString(3,0,USetStr(31103),false);
           OutString(4,0,USetStr(31104),false);
           OutString(8,0,USetStr(31107),true);
           OutString(1,0,USetStr(31106),true);
          EndFormat;
          Gray_Divider(15,1);
        end;
        StartFormat(15);
         OutStringID(3,"DblIPVcID",ARPHr.CUPNr,false,ARPHr.SerNr);
         OutDate(4,0,ARPHr.TransDate,false);
         OutVal(8,0,ARPHr.VATVal,M4Val,true);
         OutVal(1,0,ARPHr.Val,M4Val,true);
        EndFormat;
      end;
    end;
  end;
  return;
end;

procedure PrintInvoices(LongInt ORSerNr)
begin
  record IVVc IVr;
  row IVVc IVrw;
  Integer i,rwcnt;
  record ARVc ARr;
  Boolean found,testf,headerf;
  val prepayv;
  
  headerf = true;
  found = true;
  IVr.OrderNr = ORSerNr;
  while (LoopKey("OrderNr",IVr,1,found)) begin
    if (IVr.OrderNr!=ORSerNr) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (testf) then begin
        prepayv = blankval;
        ARr.InvoiceNr = IVr.SerNr;
        ReadFirstMain(ARr,1,true);
/*        
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          if (IVrw.stp==kInvoiceRowTypePrepayment) then begin
            prepayv = prepayv + IVrw.Sum;
          end;
        end;
*/        
        if (headerf) then begin
          headerf = false;
          Gray_Divider(2,1);
          StartFormat(15);
           OutString(3,0,USetStr(31109),false);
          EndFormat;
          StartFormat(15);
           OutString(3,0,USetStr(31103),false);
           OutString(4,0,USetStr(31104),false);
           OutString(7,0,USetStr(31108),true);
           OutString(8,0,USetStr(31107),true);
           OutString(1,0,USetStr(31106),true);
          EndFormat;
          Gray_Divider(2,1);
        end;
        StartFormat(15);
         OutLongInt(3,"DblIVVc",IVr.SerNr,false);
         OutDate(4,0,IVr.TransDate,false);
         OutVal(7,0,IVr.Sum4-ARr.RVal,M4Val,true);
         OutVal(8,0,IVr.Sum3,M4Val,true);
         OutVal(1,0,IVr.Sum4,M4Val,true);
        EndFormat;
      end;
    end;
  end;
  return;
end;

function val OrderPaidAmount(LongInt ORSerNr)
begin
  val res,prepayv;
  record ARPayHistVc ARPHr;
  Boolean found,testf;  
  record IVVc IVr;
  row IVVc IVrw;
  Integer i,rwcnt;
  record ARVc ARr;
  
  found = true;
  ARPHr.OrderNr = ORSerNr;
  while (LoopKey("OrderNr",ARPHr,1,found)) begin
    if (ARPHr.OrderNr!=ORSerNr) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (ARPHr.FileName!="IPVc") then begin testf = false; end;
      if (testf) then begin
        res = res + ARPHr.Val;
      end;
    end;
  end;

  found = true;
  IVr.OrderNr = ORSerNr;
  while (LoopKey("OrderNr",IVr,1,found)) begin
    if (IVr.OrderNr!=ORSerNr) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (testf) then begin
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          if (IVrw.stp==kInvoiceRowTypePrepayment) then begin
            prepayv = prepayv + IVrw.Sum;
          end;
        end;
        ARr.InvoiceNr = IVr.SerNr;
        ReadFirstMain(ARr,1,true);
        res = res + (IVr.Sum4 - ARr.RVal - prepayv);
      end;
    end;
  end;
   
  OrderPaidAmount = res;
  return;
end;

global
procedure ORPayStatusRn(record RcVc RepSpec)
begin
  Integer rw;
  string 255 tstr,index,frcu,tocu;
  LongInt fror,toor;
  record ORVc ORr;
  Boolean found,testf;
  string 255 lastcustcode;
  val paidv;
  val cutotorv,cuoutstanding;
  val totorv,totoutstanding;
  
  frcu = FirstInRange(RepSpec.f1,20);
  tocu = LastInRange(RepSpec.f1,20);
  fror = FirstInRange(RepSpec.f2,10);
  toor = LastInRange(RepSpec.f2,10);
  rw = 1;
  StartReportJob(USetStr(31100));
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTCusts(frcu,tocu,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTOrder(fror,toor,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;
  ORr.CustCode = frcu;
  switch (RepSpec.flags[0]) begin
    case 0:
      SetRepCol(2,12);
      SetRepCol(3,20);
      SetRepCol(4,100);
      SetRepCol(7,320);
      SetRepCol(8,400);
      index = "CustDate";
      StartFormat(15);
       OutString(0,0,USetStr(31111),false);
       OutString(4,0,USetStr(31112),false);
      EndFormat;
      Gray_Divider(0,1);
    case 1:
      index = "SerNr";
      SetRepCol(2,0);
      SetRepCol(3,20);
      SetRepCol(4,100);
      SetRepCol(7,320);
      SetRepCol(8,400);
      StartFormat(15);
       OutString(2,0,USetStr(31103),false);
       OutString(4,0,USetStr(31104),false);
       OutString(170,0,USetStr(31111),false);
       OutString(8,0,USetStr(31107),true);
       OutString(1,0,USetStr(31106),true);
      EndFormat;
  end;
  Gray_Divider(0,1);
  found = true;  
  while (LoopKey(index,ORr,1,found)) begin
    switch (RepSpec.flags[0]) begin
      case 0:
        if (nonblank(RepSpec.f1)) then begin
          if (ORr.CustCode>tocu) then begin found = false; end;
        end;
      case 1:
        if (nonblank(RepSpec.f2)) then begin
          if (ORr.SerNr<fror) then begin found = false; end;
          if (ORr.SerNr>toor) then begin found = false; end;
        end;
    end;
    if (found) then begin
      testf = true;
      switch (RepSpec.flags[0]) begin
        case 0:
          if (nonblank(RepSpec.f2)) then begin
            if (ORr.SerNr<fror) then begin testf = false; end;
            if (ORr.SerNr>toor) then begin testf = false; end;
          end;
        case 1:
          if (nonblank(RepSpec.f1)) then begin
            if (ORr.CustCode<frcu) then begin testf = false; end;
            if (ORr.CustCode>tocu) then begin testf = false; end;
          end;
      end;
      if (DateInRange(ORr.OrdDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
        testf = false;
      end;
      if (testf) then begin
        testf = false;
        paidv = OrderPaidAmount(ORr.SerNr);
        if (RepSpec.flags[1]!=0) then begin
          if (paidv==0) then begin testf = true; end;
        end;
        if (RepSpec.flags[2]!=0) then begin
          if (paidv!=0) and (paidv<ORr.Sum4) then begin testf = true; end;
        end;
        if (RepSpec.flags[3]!=0) then begin
          if (paidv>=ORr.Sum4) then begin testf = true; end;
        end;
      end;
      if (testf) then begin
        switch (RepSpec.flags[0]) begin
          case 0:
            if (lastcustcode!=ORr.CustCode) then begin
              if (nonblank(lastcustcode)) then begin
                if (cutotorv!=0) then begin
                  StartFormat(15);
                   OutString(2,0,USetStr(31101),false);
                   OutVal(8,0,cuoutstanding,M4Val,true);
                   OutVal(1,0,cutotorv,M4Val,true);
                  EndFormat;
                  Black_Divider(0,1);
                end;
                cutotorv = blankval;
                cuoutstanding = blankval;
              end;
              StartFormat(15);
               OutString(0,"DblCUVc",ORr.CustCode,false);
               OutString(4,0,ORr.Addr0,false);
              EndFormat;
              StartFormat(15);
               OutString(2,0,USetStr(31103),false);
               OutString(4,0,USetStr(31104),false);
               OutString(8,0,USetStr(31105),true);
               OutString(1,0,USetStr(31106),true);
              EndFormat;
              Gray_Divider(0,1);
            end;
            StartFormat(15);
             OutLongInt(2,"DblORVc",ORr.SerNr,false);
             OutDate(4,0,ORr.OrdDate,false);
             OutVal(8,0,ORr.Sum4-paidv,M4Val,true);
             cuoutstanding = cuoutstanding + (ORr.Sum4-paidv);
             OutVal(1,0,ORr.Sum4,M4Val,true);
            EndFormat;
            PrintPrepayments(ORr.SerNr);
            PrintInvoices(ORr.SerNr);
            Gray_Divider(2,1);
            StartFormat(5);
            EndFormat;
          case 1:
            StartFormat(15);
             OutLongInt(2,"DblORVc",ORr.SerNr,false);
             OutDate(4,0,ORr.OrdDate,false);
             OutString(170,0,ORr.Addr0,false);
             paidv = OrderPaidAmount(ORr.SerNr);
             OutVal(8,0,ORr.Sum4-paidv,M4Val,true);
             cuoutstanding = cuoutstanding + (ORr.Sum4-paidv);
             OutVal(1,0,ORr.Sum4,M4Val,true);
            EndFormat;
            PrintPrepayments(ORr.SerNr);
            PrintInvoices(ORr.SerNr);
            Gray_Divider(2,1);
        end;
        lastcustcode = ORr.CustCode;
        cutotorv = cutotorv + ORr.Sum4;
        totorv = totorv + ORr.Sum4;
        totoutstanding = totoutstanding + (ORr.Sum4-paidv);
      end;
    end;
  end;
  switch (RepSpec.flags[0]) begin
    case 0:
      if (cutotorv!=0) then begin
        StartFormat(15);
         OutString(2,0,USetStr(31101),false);
         OutVal(8,0,cuoutstanding,M4Val,true);
         OutVal(1,0,cutotorv,M4Val,true);
        EndFormat;
        Black_Divider(0,1);
      end;
  end;
  StartFormat(15);
   OutString(0,0,USetStr(31102),false);
   OutVal(8,0,totoutstanding,M4Val,true);
   OutVal(1,0,totorv,M4Val,true);
  EndFormat;
  EndJob;
  return;
end;