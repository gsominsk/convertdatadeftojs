external function string 255 FormatLinkToStructForBrowser(longint,boolean,string,boolean);
forward procedure WebShowStructuresContainingPage(string,var array Longint,Integer);
external function string 255 GetLinkToStruct(LongInt,boolean);

procedure AddNodeToArray(longint sernr,var array longint nodelist)
begin
  integer i;
  for (i=0;i<nodelist.length;i=i+1) begin
    if (nodelist[i]==sernr) then begin
      goto LAddNodeToArray;
    end;
  end;
  nodelist[nodelist.length] = sernr;

LAddNodeToArray:;
  return;
end;

procedure FindNodesShowingWebPage(string page,var array Longint nodelist)
begin
  record WebNGStructVc WSr;
  boolean testf;
  
  if (nonblank(page)) then begin
    testf = true;
    WSr.WebPage = page;
    while (LoopKey("WebPage",WSr,1,testf)) begin
      if (WSr.WebPage!=page) then begin
        testf = false;
      end;
      if (testf) then begin
        AddNodeToArray(WSr.SerNr,nodelist);
      end;
    end;
  end;
  
  return;
end;

function string 255 GetHostNameForTesting()
begin
  record ProgramStatusBlock PSb;
  record WebNGTestBlock WTb;
  string 255 res;
  
  BlockLoad(WTb);
  if (nonblank(WTb.LinkHost)) begin
    res = WTb.LinkHost;
    if (InString(res,"://")==0) then begin
      res = "http://" & res;
    end;
  end else begin
    BlockLoad(PSb);
    res = "http://localhost";
    if (nonblank(PSb.httpPort) and PSb.httpPort!=80) then begin
      res = res & ":" & PSb.httpPort;
    end;
  end;
  
  GetHostNameForTesting = res;
  return;
end;

function string 255 GetLinkToStructBrowser(Longint sernr)
begin
  string 255 host,url;
  
  host = GetHostNameForTesting;
  url = GetLinkToStruct(sernr,false);
  GetLinkToStructBrowser = host & url;
  return;
end;

global
procedure WebShowStructuresContainingPage(string page,var array Longint nodelist,Integer level)
begin
  record WebNGPageVc WPr;
  Boolean TrHs;
  
  if (nonblank(page) and level<10) then begin
    FindNodesShowingWebPage(page,nodelist);
    WPr.TemplatePage = page;
    TrHs = true;
    while (LoopKey("TemplatePage",WPr,1,TrHs)) begin
      if (WPr.TemplatePage!=page) then begin
        TrHs = false;
      end else begin
        WebShowStructuresContainingPage(WPr.Code,nodelist,level+1);
      end;
    end;
  end;
  
  return;
end;

procedure ShowResults(Longint strnum,string page,array Longint nodelist)
begin
  Integer i;
  string 255 tstr;
  
  StartFormat(15)
  OutString(0,0,USetStr(strnum) & " " & page,false);
  EndFormat;
  StartFormat(1)
  Gray_divider(0,1);
  EndFormat;
  for (i=0;i<nodelist.length;i=i+1) begin
    StartFormat(15);
    tstr = GetLinkToStructBrowser(nodelist[i]);
    OutStringID(0,"DblOpenNodeInWeb2",tstr,false,tstr);
    EndFormat;
  end;
  StartFormat(15)
  EndFormat;

  return;
end;

procedure ShowResults2(Longint strnum,string page,array Longint nodelist)
begin
  Integer i;
  vector Boolean vnode;
  record WebNGStructVc WSr;
  string 255 tstr;
  
  StartFormat(15)
  OutString(0,0,USetStr(strnum) & " " & page,false);
  EndFormat;
  StartFormat(1)
  Gray_divider(0,1);
  EndFormat;

  for (i=0;i<nodelist.length;i=i+1) begin
    vnode[nodelist[i]] = true;
  end;
  
  while (LoopMain(WSr,1,true)) begin
    if (vnode[WSr.SerNr]==false) then begin
      StartFormat(15);
      tstr = GetLinkToStructBrowser(WSr.SerNr);
      OutStringID(0,"DblOpenNodeInWeb2",tstr,false,tstr);
      EndFormat;
    end;
  end;

  return;
end;

global
procedure UsedWebPageListRn(record RCVc RepSpec)
begin
  array Longint nodelist;
  
  StartReportJob(USetStr(38630));
  
  EndHeader;
  
  if (nonblank(RepSpec.f1)) then begin
    WebShowStructuresContainingPage(RepSpec.f1,nodelist,0);
    ShowResults(38631,RepSpec.f1,nodelist);
  end;
  if (nonblank(RepSpec.f2)) then begin
    ClearArray(nodelist);
    WebShowStructuresContainingPage(RepSpec.f2,nodelist,0);
    ShowResults2(38632,RepSpec.f2,nodelist);
  end;
  
  EndJob;
  
  return;
end;