global
procedure GetMyAccountStatus(var val l,var val bal,var val totm,var val onaccs,var Date lastupdate)
begin
  Boolean TrHs,testf;
  record FunctionUsageVc FunctionUsager;
  record RegisterDefinitionVc RegisterDefinitionr;
  record SmartAppVc SmartAppr;
  string 200 comment;
  string 200 thekey;
  LongInt regcnt;
  record SmartAppLocalBlock SmartAppLocalb;
  val tmp;

  BlockLoad(SmartAppLocalb);
  l = 0;
  bal = 0;
  totm = 0;
  Gray_Divider(0,1);
  TrHs = true;
  while (LoopMain(FunctionUsager,1,TrHs)) begin
    if (TrHs) then begin
      testf = true;
      if (testf) then begin
        SmartAppr.UUID = FunctionUsager.App;
        if (ReadFirstKey("UUID",SmartAppr,1,true)) then begin
          comment = SmartAppr.Name;
        end else begin
          comment = USetStr(11858);
        end;
        if (blank(comment)) then begin
          RegisterDefinitionr.Name = FunctionUsager.SpecFeature;
          thekey = "MainKey:" & FunctionUsager.App;
          if (ReadFirstKey(thekey,RegisterDefinitionr,1,true)) then begin
            comment = RegisterDefinitionr.Description;
          end;
        end;
        regcnt = 0;
        if (FunctionUsager.Approved==0) then begin
          RegisterDefinitionr.Name = "";
          thekey = "MainKey:" & FunctionUsager.App;
          ResetLoop(RegisterDefinitionr);
          while (LoopKey(thekey,RegisterDefinitionr,1,true)) begin
            regcnt = regcnt + 1;
          end;
        end;
        if (regcnt<=0) then begin
          regcnt = 1;
        end;
        tmp = regcnt * FunctionUsager.ApxSum;
        StartFormat(15);
        OutString(0,0,comment,false);
        OutVal(2,0,tmp,M4Val,true);
        OutDate(1,0,FunctionUsager.CanUseUntil,true);
        EndFormat;
        l = l + 1;
        totm = totm + tmp;
        if (CurrentDate>FunctionUsager.CanUseUntil) then begin
          bal = bal + tmp;
        end;
      end;
    end;
  end;
  onaccs = SmartAppLocalb.OnAccSum;
  bal = SmartAppLocalb.SugSum;
  lastupdate = SmartAppLocalb.LastUpdate;
  return;
end;

global
procedure MyAccountDetailsRn(record RcVc RepSpec)
BEGIN
  val l,bal,totm,onaccs;
  Date lastupdate;
  
  StartReportJob(USetStr(11850));  
  EndHeader;
  SetRepCol(2,250);
  StartFormat(15);
  OutString(0,0,USetStr(11851),false);
  OutString(2,0,USetStr(11852),true);
  OutString(1,0,USetStr(11853),true);
  EndFormat;
  GetMyAccountStatus(l,totm,bal,onaccs,lastupdate);
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(11854),false);
  OutLongInt(1,0,l,true);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(11855),false);
  OutVal(1,0,totm,M4Val,true);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(11856),false);
  OutVal(1,0,bal,M4Val,true);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(11857),false);
  OutVal(1,0,onaccs,M4Val,true);
  EndFormat;
  EndJob;
  RETURN;
END;