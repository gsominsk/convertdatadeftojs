external function boolean CheckItemGroupClassification(string,string,string);
external procedure HTItemClass(string,var string);
external procedure HTOKF(Integer,Integer, var string);
external function Boolean CheckPlanShip(string,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure BeginCurncyTotals(var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external procedure FindSalesExVat(record TaxMatrixVc,string, val,Integer,Integer,var val);
external procedure HTOrder(LongInt,LongInt,var string);
external function Boolean InvableOrder(record ORVc);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure HTOrdStatus(integer, integer, integer, integer,var string);
external procedure HTArtSel(string,string, var string);
external procedure HTSaleMan(string, var string); 
external procedure HTObj(string,var string);
external procedure RepStock(record ORVc,Boolean,Boolean,string,string,var val,Boolean,record RcVc);
external function Boolean CheckPlanShipRows(string,record ORVc);

global
procedure InvableRn(record RcVc RepSpec)
BEGIN
  record ORVc ORr;
  record INVc INr;  
  row ORVc ORrw;
  Boolean TrHs;
  val t,t2,iv;
  val TotSum;
  Boolean testf;
  Integer i,rwcnt;
  Boolean item;
  string 255 frgr,togr;
  val TotQty,TotLev,TotNotLev,TotInv;
  LongInt afr,ato;
  val gp,TotGP,rowsumv,rowinbasev,totrws,orrowsum;
  string 255 tstr;
  Integer rw;
  record MainStockBlock MainStockRec;
  record GeneralOptionBlock GenOptRec;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt;
  record TaxMatrixVc TMr;

  BlockLoad(GenOptRec);
  item = false;
  TotSum = 0;
  TotGP = 0;
  totrws = 0;
  BlockLoad(MainStockRec);
  afr = FirstInRange(RepSpec.f1,20);
  ato = LastInRange(RepSpec.f1,20);
  frgr = FirstInRange(RepSpec.f3,20);
  togr = LastInRange(RepSpec.f3,20);
  BeginCurncyTotals(curcnt);
 
  StartReportJob(USetStr(5600));
  if (RepSpec.PocketPC == 0) then begin
    rw = 1;
    HTOrder(afr,ato,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
    HTOrdStatus(RepSpec.flags[2],RepSpec.flags[3],RepSpec.flags[4],0,tstr);
    Header(rw,tstr,0);
    tstr = USetStr(1177);
    Header(rw,tstr,1);
    rw = rw + 1;
    if (nonblank(RepSpec.LastAcc) or nonblank(RepSpec.f3)) then begin
      HTArtSel(RepSpec.LastAcc,RepSpec.f3,tstr);
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    if (nonblank(RepSpec.f8)) then begin 
      HTItemClass(RepSpec.f8,tstr);
      Header(rw,tstr,1);  
      rw = rw + 1;  
    end;
    if (nonblank(RepSpec.f2)) then begin
      tstr = USetStr(1113);
      tstr = tstr & RepSpec.f2;
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    HTOKF(RepSpec.flags[2],RepSpec.flags[3],tstr);
    Header(rw,tstr,0);
    HTSaleMan(RepSpec.AccStr,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;  
    if (nonblank(RepSpec.FirstAcc)) then begin
      tstr = USetStr(1825);
      tstr = tstr & RepSpec.FirstAcc;
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    if (RepSpec.flags[1]==1) then begin
      tstr = USetStr(2665);
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    if (nonblank(RepSpec.ObjStr)) then begin
      HTObj(RepSpec.ObjStr,tstr);
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    if (nonblank(RepSpec.f5)) then begin
      tstr = USetStr(2768);
      tstr = tstr & ": " & RepSpec.f5;
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;   
  EndHeader;
  SetRepCol(2,404);
  SetRepCol(3,520-(2*96));
  SetRepCol(4,540-(3*96));
  SetRepCol(5,430);
  if (RepSpec.PocketPC == 0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(2622),false);
    OutString(60,0,USetStr(2623),false);
    OutString(140,0,USetStr(2624),false);
    OutString(320,0,USetStr(5401),true);
    OutString(450,0,USetStr(2627),true);
    EndFormat;
  end else begin
    StartFormat(15);
    OutString(0,0,USetStr(2622),false);
    OutString(100,0,USetStr(2624),false);
    OutString(440,0,USetStr(2627),true);
    EndFormat;
  end;
  ORr.SerNr = afr;
  ORr.OSFlag = 1;
  if (RepSpec.ArtMode==0) then begin
    Gray_Divider(0,1);
  end;  
  TrHs = true;
  while (LoopKey("OSFlag",ORr,2,TrHs)) begin
    if (TrHs) then begin
      if (ato<>-1) then begin
        if (ORr.SerNr>ato) then begin
          TrHs = false;
        end;
      end;   
    end;
    if (TrHs) then begin
      testf = false;      
      if (ORr.InvFlag<2) then begin testf = true; end;
      if (ORr.InvBeforeShip!=0) then begin testf = true; end;
      if (nonblank(RepSpec.f2) and (RepSpec.f2<>ORr.CustCode)) then begin testf = false; end;
      if ((nonblank(RepSpec.AccStr)) and (RepSpec.AccStr<>ORr.SalesMan)) then begin testf = false; end;
      if ((nonblank(RepSpec.FirstAcc)) and (RepSpec.FirstAcc<>ORr.OrderClass)) then begin testf = false; end;
      if ((nonblank(RepSpec.f5)) and (RepSpec.f5<>ORr.Location)) then begin 
        testf = false; 
      end;
     if (nonblank(RepSpec.Stext)) then begin
        if (CheckPlanShipRows(RepSpec.Stext,ORr)==false) then begin testf = false; end;
      end;  
      if ((nonblank(RepSpec.ObjStr)) and (SetInSet(RepSpec.ObjStr,ORr.Objects)==false)) then begin testf = false; end;
      if (nonblank(RepSpec.f4)) then begin
        if (RepSpec.f4<> ORr.SalesGroup) then begin
           testf = false;
        end;
      end;   
      if ((ORr.Closed==1) and (RepSpec.flags[1]==0)) then begin 
        testf = false;
      end;
      if (ORr.OKFlag==0) then begin
        if (RepSpec.flags[2]==0) then begin testf = false; end;
      end;
      if (ORr.OKFlag!=0) then begin
        if (RepSpec.flags[3]==0) then begin testf = false; end;
      end;      

      if (testf) then begin
        if (InvableOrder(ORr)==false) then begin testf = false; end;
      end;
      item = false;
      if ((testf) and ((nonblank(RepSpec.LastAcc)) or (nonblank(RepSpec.f3)) or (nonblank(RepSpec.f8)))) then begin
        rwcnt = MatRowCnt(ORr);
        for (i = 0 ; i<rwcnt ;i=i+1) begin
          MatRowGet(ORr,i,ORrw);
          if (ORrw.stp==1) then begin
              if (nonblank(RepSpec.LastAcc)) then begin
                if (ORrw.ArtCode==RepSpec.LastAcc) then begin
                  item = true;
                  goto L30;
                end;
              end;
              if (CheckItemGroupClassification(ORrw.ArtCode,RepSpec.f3,RepSpec.f8)==false) then begin 
                item = true;
                goto L30;
              end;
          end;
        end;
L30:;
      end;
      if (((nonblank(RepSpec.LastAcc)) or (nonblank(RepSpec.f3)) or (nonblank(RepSpec.f8))) and (item==false)) then begin 
        testf = false; 
      end;
      if (testf) then begin       
        rwcnt = MatRowCnt(ORr);
        iv = 0;
        gp = 0;
        orrowsum = 0;
        for (i=0 ;i<=rwcnt-1 ;i=i+1) begin
          MatRowGet(ORr,i,ORrw);
          if (ORrw.stp==1) then begin
              if (CheckItemGroupClassification(ORrw.ArtCode,RepSpec.f3,RepSpec.f8)==false) then begin 
                goto LSKIPROW;
              end;
              if (nonblank(RepSpec.LastAcc)) then begin
                if (ORrw.ArtCode!=RepSpec.LastAcc) then begin
                  goto LSKIPROW;
                end;
              end;
              if ((nonblank(RepSpec.f5)) and (nonblank(ORrw.Location))) then begin 
                if (ORrw.Location!=RepSpec.f5) then begin
                  goto LSKIPROW;
                end;
              end;              
              if (nonblank(RepSpec.Stext)) then begin
                if (nonblankdate(ORrw.PlanShipRow)) then begin
                  if (CheckPlanShip(RepSpec.Stext,ORrw.PlanShipRow)==false) then begin 
                    goto LSKIPROW;
                  end;
                end else begin
                  if (CheckPlanShip(RepSpec.Stext,ORr.PlanShip)==false) then begin 
                    goto LSKIPROW;
                  end;
                end;
              end;
              UnpackRowFieldMatrix(ORrw,"TaxMatrix",TMr);
              if (RepSpec.Comparison==1) then begin
                if (ORr.InvBeforeShip<>0) then begin
                  t = ORrw.Quant - ORrw.Invd;
                end else begin
                  t = ORrw.Shipd2 - ORrw.Invd;
                end;                
                CalcSum(t,ORrw.Price,ORrw.PriceFactor,ORrw.vRebate,t2,GenOptRec.UseDiscount);
                iv = iv + t2;
                t = t * ORrw.BasePrice; 
                rowinbasev = MulRateToBase1(ORr.CurncyCode,t2,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,DefaultCurRoundOff);
                FindSalesExVat(TMr,ORrw.VATCode,rowinbasev,ORr.InclVAT,ORr.NoTAXonVAT,rowsumv);
                t2 = rowsumv - t;
                orrowsum = rowsumv + orrowsum;
                gp = gp + t2;
              end else begin
                if (ORr.InvBeforeShip<>0) then begin
                  t = ORrw.Quant - ORrw.Invd;
                end else begin
                  t = ORrw.Shipd2 - ORrw.Invd;
                end;  
                CalcSum(t,ORrw.Price,ORrw.PriceFactor,ORrw.vRebate,t2,GenOptRec.UseDiscount);
                iv = iv + t2;
                t = t * ORrw.BasePrice;
                rowinbasev = MulRateToBase1(ORr.CurncyCode,t2,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,DefaultCurRoundOff);
                FindSalesExVat(TMr,ORrw.VATCode,rowinbasev,ORr.InclVAT,ORr.NoTAXonVAT,rowsumv);
                t2 = rowsumv - t;
                orrowsum = rowsumv + orrowsum;
                gp = gp + t2;
              end;
LSKIPROW:;              
          end;
        end;
        TotSum = TotSum + iv;
        TotGP = TotGP + gp;
        totrws = orrowsum + totrws;
        AddCurncyTotals(acur,av1,curcnt,ORr.CurncyCode,iv);
        if (RepSpec.ArtMode==1) then begin
            Gray_Divider(0,1);
            RepStock(ORr,true,false,frgr,togr,t,false,RepSpec);
        end;
        if (RepSpec.ArtMode==0) then begin
          if (orrowsum!=0) then begin
            if (RepSpec.PocketPC == 0) then begin
              StartFormat(15);
              OutLongInt(0,"DblORVc",ORr.SerNr,false);
              OutDate(60,0,ORr.OrdDate,false);
              OutString(140,0,ORr.Addr0,false);
              orrowsum = gp / orrowsum;
              orrowsum = orrowsum * 100;
              OutVal(320,0,gp,M4Val,true);
              OutString(330,0,"" & orrowsum & "%",false);
              OutVal(450,0,iv,M4Val,true);
              OutString(480,0,ORr.CurncyCode,true);
              EndFormat;
            end else begin
              StartFormat(15);
              OutLongInt(0,"DblORVc",ORr.SerNr,false);
              OutString(100,0,Left(ORr.Addr0,15),false);
              OutVal(440,0,iv,M4Val,true);
              OutString(480,0,ORr.CurncyCode,true);
              EndFormat;
            end;
          end;
        end;
        if (RepSpec.ArtMode==2) then begin
            rwcnt = MatRowCnt(ORr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(ORr,i,ORrw);
              if (blank(RepSpec.LastAcc) or (RepSpec.LastAcc==ORrw.ArtCode)) then begin
                testf = true;
                if (CheckItemGroupClassification(ORrw.ArtCode,RepSpec.f3,RepSpec.f8)==false) then begin 
                  testf = false;
                end;  
                if (testf) then begin
                  StartFormat(15);
                  OutLongInt(0,"DblORVc",ORr.SerNr,false);
                  OutDate(50,0,ORr.OrdDate,false);
                  OutString(110,0,ORr.PlanShip,false);
                  OutString(175,0,ORrw.ArtCode,false);
                  t = ORrw.Quant - ORrw.Invd;
                  OutVal(270,0,t,M4UVal,true);
                  t2 = t * ORrw.Price;
                  OutVal(320,0,ORrw.Price,M4Val,true);
                  OutVal(450,0,t2,M4Val,true);
                  OutString(480,0,ORr.CurncyCode,true);
                  EndFormat;
                  TotQty = TotQty + t;
                end;
              end;
            end;
        end;
      end;
    end;
  end;
  Gray_Divider(0,1);
  if (RepSpec.ArtMode==2) then begin
    StartFormat(15);
    OutVal(270,0,TotQty,M4UVal,true);
    EndFormat;
    Gray_Divider(0,1);
  end;
  if (RepSpec.PocketPC == 0) then begin
    StartFormat(15);
    orrowsum = TotGP / totrws;
    orrowsum = orrowsum * 100;
    OutVal(320,0,TotGP,M4Val,true);
    OutString(330,0,"" & orrowsum & "%",false);
    EndFormat;
  end;
  PrintCurncyTotals(acur,av1,av2,av3,curcnt,450,-1,-1,140,true,RepSpec.PocketPC);
  EndJob;
  RETURN;  
END;
