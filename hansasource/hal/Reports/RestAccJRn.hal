external procedure HTOT(string,var string);external procedure HTSaleMan(string,var string);external procedure HTCustCat(string,var string);external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);external procedure SetupVATBase(var record SMVc,var Integer);external procedure HTClasses(string,string,var string);external procedure HTBranchIDs(string,string,var string);external procedure HT2Per(Date, Date , var string);function Boolean RestAccHasPaymentMode(record RestAccVc RestAccr,string PaymentMode)begin  Boolean res;  row RestAccVc RestAccrw;  Integer i,rwcnt;/*    if (RestAccr.PayDeal==PaymentMode or RestAccr.PayDeal2==PaymentMode) then begin    res = true;  end;*/    if (!res) then begin    rwcnt = MatRowCnt(RestAccr);    for (i=0;i<rwcnt;i=i+1) begin      MatRowGet(RestAccr,i,RestAccrw);      if (RestAccrw.PayMode==PaymentMode) then begin        res = true;        i = rwcnt;      end;    end;  end;    RestAccHasPaymentMode = res;  return;end;globalprocedure RestAccJRn(record RcVc RepSpec)begin  Integer rw;  string 255 tstr,frbr,tobr;  Boolean found,testf,Accs;   record RestAccVc RAr;  row RestAccVc RArw;  Integer i,rwcnt,vatcnt;  string 255 index;  LongInt frbt,tobt,btcnt;  val tiv,tev;  record SMVc VATr;  row SMVc VATrw;  val qty;  record CUVc CUr;  record ObjVc OBr;    frbt = FirstInRange(RepSpec.f1,20);  tobt = LastInRange(RepSpec.f1,20);  frbr = FirstInRange(RepSpec.f2,20);  tobr = LastInRange(RepSpec.f2,20);  StartReportJob(USetStr(19600));  rw = 1;  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);  Header(rw,tstr,1);  rw = rw + 1;  HTClasses(RepSpec.LastAcc,RepSpec.LastAcc,tstr);  Header(rw,tstr,0);   HTBranchIDs(frbr,tobr,tstr);  Header(rw,tstr,1);  rw = rw + 1;   if (RepSpec.AccStr<>"") then begin    HTSaleMan(RepSpec.AccStr,tstr);    Header(rw,tstr,1);    rw = rw + 1;  end;  if (RepSpec.ObjStr<>"") then begin    tstr = RepSpec.ObjStr;    Header(rw,tstr,1);    rw = rw + 1;  end else begin    if (RepSpec.ObjType<>"") then begin      HTOT(RepSpec.ObjType,tstr);      Header(rw,tstr,1);      rw = rw + 1;    end;  end;  if (RepSpec.f4<>"") then begin    tstr = USetStr(1113);    tstr = tstr & RepSpec.f4;    Header(rw,tstr,1);    rw = rw + 1;  end;  if (nonblank(RepSpec.f3)) then begin    HTCustCat(RepSpec.f3,tstr);    Header(rw,tstr,1);    rw = rw + 1;  end;  if nonblank(RepSpec. FirstAcc) then begin    tstr = USetStr(9840) & RepSpec.FirstAcc;    Header(rw,tstr,1);    rw = rw + 1;  end;  EndHeader;    switch (RepSpec.ArtMode) begin    case 0:      SetRepCol(2,60);      SetRepCol(3,125);      SetRepCol(9,420);      StartFormat(15);      OutString(0,0,USetStr(19605),false);      OutString(2,0,USetStr(19606),false);      OutString(3,0,USetStr(19607),false);      if (ProgramType==typStdBar) or (ProgramType==typStdRestaurant) then begin        OutString(1,0,USetStr(19608),true);      end else begin        OutString(9,0,USetStr(19608),true);        OutString(1,0,USetStr(19609),true);      end;      EndFormat;    case 1:      SetRepCol(2,60);      SetRepCol(3,125);      SetRepCol(9,420);      StartFormat(15);      OutString(0,0,USetStr(19605),false);      OutString(2,0,USetStr(19611),false);      OutString(3,0,USetStr(19606),false);      EndFormat;  end;  Gray_Divider(0,1);  btcnt = 0;  found = true;  if (nonblank(RepSpec.f1)) then begin    index = "SerNr";    RAr.SerNr = frbt;  end else begin    switch (RepSpec.flags[0]) begin      case 0:        index = "ReportingDate";        RAr.ReportingDate = RepSpec.sStartDate;      otherwise        index = "TransDate";        RAr.TransDate = RepSpec.sStartDate;    end;  end;  if (blank(index)) then begin    goto LRestAccJRn;  end;  while (LoopKey(index,RAr,1,found)) begin    switch (index) begin      case "SerNr":        if (RAr.SerNr>tobt) then begin found = false; end;      case "ReportingDate":        if (DateInRange(RAr.ReportingDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin found = false; end;      case "TransDate":        if (DateInRange(RAr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin found = false; end;    end;    if (found) then begin      testf = true;      switch (RepSpec.flags[0]) begin        case 0:          if (DateInRange(RAr.ReportingDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;        case 1:          if (DateInRange(RAr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;      end;      if (nonblank(RepSpec.Stext)) then begin        if (RepSpec.Stext!=RAr.CustCode) then begin testf = false; end;      end;      if (nonblank(RepSpec.LastAcc)) then begin        if (RepSpec.LastAcc!=RAr.Class) then begin testf = false; end;      end;      if (nonblank(RepSpec.f2)) then begin        if (RepSpec.f2!=RAr.BranchID) then begin testf = false; end;      end;      if (RepSpec.flags[1]==0) then begin        if (RAr.Closed==0) then begin testf = false; end;      end;      if (RepSpec.flags[2]==0) then begin        if (RAr.Closed!=0) then begin testf = false; end;      end;      if (nonblank(RepSpec.f5)) then begin        if (RepSpec.f5!=RAr.CUCode) then begin          testf = false;        end;      end;      if (nonblank(RepSpec.AccStr)) then begin        if (RepSpec.AccStr!=RAr.Cashier) then begin          testf = false;        end;      end;      if ((nonblank(RepSpec.f3)) or (nonblank(RepSpec.f4))) then begin        CUr.Code = RAr.CUCode;        if (ReadFirstMain(CUr,1,true)) then begin          if (nonblank(RepSpec.f3)) then begin            if (RepSpec.f3!=CUr.CustCat) then begin              testf = false;            end;          end;          if (nonblank(RepSpec.f4)) then begin            if (SetInSet(RepSpec.f4,CUr.Classification)==false) then begin              testf = false;            end;          end;        end;      end;      if (nonblank(RepSpec.FirstAcc)) then begin      	if (RAr.MachineName!=RepSpec.FirstAcc) then begin      		testf = false;      	end;      end;	            switch (RepSpec.flags[3]) begin        case 0: if (RAr.Invalid!=0) then begin testf = false; end;        case 1: if (RAr.Invalid==0) then begin testf = false; end;        case 2: ;      end;      if (testf) then begin        if (nonblank(RepSpec.ObjStr)) then begin          if (SetInSet(RepSpec.ObjStr,RAr.Objects)==false) then begin            testf = false;          end;        end else begin          if ((testf==true) and (nonblank(RepSpec.ObjType))) then begin            testf = false;            OBr.OTCode = RepSpec.ObjType;            OBr.Code = "";            Accs = true;            ResetLoop(OBr);            while (LoopKey("OTCode",OBr,1,Accs)) begin              if ((Accs==true) and (RepSpec.ObjType==OBr.OTCode)) then begin                              if (SetInSet(OBr.Code,RAr.Objects)==true) then begin                  testf = true;                  Accs = false;                end;              end;            end;           end;        end;      end;      if (testf) then begin        if (nonblank(RepSpec.TransStr)) then begin          if (RestAccHasPaymentMode(RAr,RepSpec.TransStr)==false) then begin            testf = false;          end;        end;      end;                 if (testf) then begin        switch (RepSpec.ArtMode) begin          case 0:            StartFormat(15);            OutString(0,"DblRestAccVc",RAr.SerNr,false);            switch (RepSpec.flags[0]) begin              case 0:                OutDate(2,0,RAr.ReportingDate,false);              case 1:                OutDate(2,0,RAr.TransDate,false);            end;            OutString(3,0,RAr.CUCode,false);            OutValBiDi(9,0,RAr.Sum4,M4Val,true,460);            OutValBiDi(1,0,RAr.Sum4-RAr.Sum3,M4Val,true,517);            EndFormat;          case 1:            qty = blankval;            SetupVATBase(VATr,vatcnt);                      StartFormat(15);            OutString(0,"DblRestAccVc",RAr.SerNr,false);            OutDate(2,0,RAr.ReportingDate,false);            OutDate(3,0,RAr.TransDate,false);            EndFormat;            rwcnt = MatRowCnt(RAr);            for (i=0;i<rwcnt;i=i+1) begin              MatRowGet(RAr,i,RArw);              if (RArw.ovst==0) then begin                switch (RArw.stp) begin                                    case kInvoiceRowTypeStructuredItemComponent:                    goto LkInvoiceRowTypeNormal;                  case kInvoiceRowTypeNormal:LkInvoiceRowTypeNormal:;                                      AddVATBase(VATr,RArw.VATCode,RArw.Sum,blankval,vatcnt,1,0);                    qty = qty + RArw.Quant;                    StartFormat(15);                     OutString(15,0,RArw.ArtCode,false);                     OutVal(104,0,RArw.Quant,M4UVal,true);                     OutString(110,0,RArw.Spec,false);                     if (ProgramType==typStdBar) or (ProgramType==typStdRestaurant) then begin                       OutVal(350,0,RArw.Quant*RArw.Price,M423Val,true);                     end else begin                       OutVal(350,0,RArw.Price,M423Val,true);                     end;                     OutVal(380,0,RArw.vRebate,M41Val,true);                     OutVal(460,0,RArw.Sum,M4Val,true);                     OutString(480,0,RArw.VATCode,true);                    EndFormat;                end;              end;            end;            Black_Divider(70,104);            Black_Divider(280,350);            if (ProgramType==typStdBar) or (ProgramType==typStdRestaurant) then begin              StartFormat(15);              OutVal(104,0,qty,M4UVal,true);              OutVal(350,0,RAr.Sum4,M4Val,true);              EndFormat;            end else begin              StartFormat(15);              OutVal(104,0,qty,M4UVal,true);              OutVal(350,0,RAr.Sum4,M4Val,true);              EndFormat;/*            StartFormat(15);            OutString(70,0,USetStr(2645),false);            OutString(150,0,USetStr(3185),false);            OutString(230,0,USetStr(6707),false);            OutVal(460,0,RAr.Sum4,M4Val,true);            OutVal(104,0,qty,M4UVal,true);            OutString(150,0,RAr.Objects,false);            OutValBiDi(230,0,RAr.Sum3,M4Val,false,330);            EndFormat;*/            end;             Gray_Divider(0,1);        end;        tiv = tiv + RAr.Sum4;        tev = tev + RAr.Sum4-RAr.Sum3;        btcnt = btcnt + 1;      end;    end;  end;  Gray_Divider(0,1);  if (RepSpec.ArtMode==1) then begin    StartFormat(15);    OutString(9,0,USetStr(2329),true);    OutString(1,0,USetStr(2328),true);    EndFormat;  end;  StartFormat(15);  OutValBiDi(9,0,tiv,M4Val,true,460);  OutValBiDi(1,0,tev,M4Val,true,517);  EndFormat;  StartFormat(15);  OutString(3,0,USetStr(19610),false);  OutLongInt(9,0,btcnt,true);  EndFormat;LRestAccJRn:;  EndJob;  return;end;