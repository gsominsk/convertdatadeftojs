external procedure B1ToB2Val(val,val,val,var val);
external function roundmode DefaultRoundMode();
external procedure AutoObj(var string);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function Integer TypeOfCurncy(var string,var Integer);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure NoDupObjs(string,var string);
external procedure GetBaseCurncy(Integer,var string);

global
procedure AddEuroCurncyNomARTrRow2(record TRVc TRp,string acc,string objs,string vatcod,string comm,val valv,val valv2,Boolean accf,
             Boolean dcflag,var val totsump,string curncy,val frrate,val torate1,val torate2,val baserate1,val baserate2,
             val curval,val nomval,string CompCode,LongInt SerNr,Integer Typ,val qp,Date duep,LongInt insertrownr,
             Boolean negamf,string taccnumber,string tfilename,string tcode,string rvrsvatcode)
BEGIN
  row TRVc TRrw;
  Integer i,rwcnt,typeofcur;
  Integer oldstyle;
  Boolean found,curflag,rowfoundf;
  string 255 objects,comment,tstr;
  string 20 localcurncy;
  val b1sv,b2sv,csv;
  val temp,base2val;
  val localcurval,blankv;
  record CYBlock TRb;

  BlockLoad(TRb);
  curflag = false;
  if (curncy<>"") then begin
    localcurncy = curncy;
  end else begin
  end;  
  if (curval<>-1) then begin//NIL
    localcurval = curval;
  end else begin
  end;  
  typeofcur = TypeOfCurncy(localcurncy,oldstyle);   
  if (typeofcur==0) begin// Foreign Curncy 
    if (curncy<>"") then begin curflag = true; end;
    if (blank(valv2)) then begin
      base2val = MulRateToBase2(localcurncy,localcurval,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      if (base2val==0) then begin
        B1ToB2Val(valv,baserate2,baserate1,base2val);
      end;
    end else begin
      base2val = valv2;
    end;
  end;
  if (typeofcur==1) begin// Base Curncy 1 
    if (valv==0) then begin
      base2val = localcurval;
    end else begin
      if (blank(valv2)) then begin
        base2val = MulRateToBase2(localcurncy,valv,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
        if (base2val==0) then begin
          B1ToB2Val(valv,baserate2,baserate1,base2val);
        end;
      end else begin
        base2val = valv2;
      end;
    end;  
  end;
  if (typeofcur==2) begin// Base Curncy 2 
    if (blank(valv2)) then begin
      base2val = localcurval;
      if (blank(base2val)) then begin//      if (base2val==0) then begin   must be wrong
        B1ToB2Val(valv,baserate2,baserate1,base2val);
      end;
    end else begin
      base2val = valv2;
    end;
  end;

  if (typeofcur==3) begin// Blank Currency, old style 
    base2val = blankval;
    localcurval = blankval;
  end;


  GetBaseCurncy(2,tstr);
  if (blank(tstr)) then begin
    base2val = blankval;
  end;

  if ((valv==0) and (base2val==0) and (localcurval==0)) then begin goto LAddEuroCurncyNomARTrRow; end;
  if (blank(acc)) then begin goto LAddEuroCurncyNomARTrRow; end;
  if (oldstyle>0) then begin base2val = blankv; end;
  if (objs<>"") then begin
    NoDupObjs(objs,objects);
    AutoObj(objects);
  end;
  if (comm<>"") then begin
    comment = comm;
  end;
  found = false;
  rwcnt = MatRowCnt(TRp);
  if (CompCode<>"") then begin 
    i = rwcnt;
    goto L15;
  end;

  if (accf) then begin
    for (i=rwcnt-1; i>=0;i=i-1) begin
      MatRowGet(TRp,i,TRrw);
      if (curflag) then begin
        if (TRrw.Curncy<>localcurncy) then begin goto L11; end;
        if (frrate<>-1) then begin //NIL
          if (TRrw.FrRate<>frrate) then begin goto L11; end;
        end;  
        if (torate1<>-1) then begin //NIL
          if (TRrw.ToRateB1<>torate1) then begin goto L11; end;
        end;  
        if (torate2<>-1) then begin //NIL
          if (TRrw.ToRateB2<>torate2) then begin goto L11; end;
        end;  
      end;
      if ((acc==TRrw.AccNumber) and
          ((objects==TRrw.Objects) or (objs=="NIL")) and
          ((comment==TRrw.Comment) or (comm=="NIL")) and
          (vatcod==TRrw.VATCode) and (rvrsvatcode==TRrw.RvrsVATCode) and (TRrw.ovst==0)) then begin 
        rowfoundf = true;
        goto L22TR; 
      end;
L11:;
    end;
    i = rwcnt;
  end else begin
    i = rwcnt;
  end;  
L15:;
  ClearRow(TRp,TRrw,1);
  TRrw.stp = 1;
  TRrw.ovst = 0;
  TRrw.AccNumber = acc;
  TRrw.Objects = objects;
  TRrw.Comment = comment;
  TRrw.VATCode = vatcod;
  TRrw.RvrsVATCode = rvrsvatcode;
  if (curncy<>"") then begin
    TRrw.Curncy = localcurncy;
  end else begin
  end;  
  if ((baserate1==-1) or (baserate2==-1)) then begin//NIL
    tstr = TRrw.Curncy;
    GetFullCurncyRate(tstr,TRp.TransDate,temp,temp,temp,TRrw.BaseRate1,TRrw.BaseRate2);
    TRrw.Curncy = tstr;
  end else begin
    TRrw.BaseRate1 = baserate1;
    TRrw.BaseRate2 = baserate2;
  end;
  if (curflag) then begin
    if (frrate<>-1) then begin TRrw.FrRate = frrate; end;//NIL
    if (torate1<>-1) then begin TRrw.ToRateB1 = torate1; end;//NIL
    if (torate2<>-1) then begin TRrw.ToRateB2 = torate2; end;//NIL
  end;
  if (CompCode<>"") then begin
    TRrw.Typ = Typ;
    TRrw.CompCode = CompCode;
    TRrw.SerNr = SerNr;
    if (nonblankdate(duep)) then begin TRrw.DueDate = duep; end;
  end else begin
    TRrw.Typ = Typ;
    TRrw.CompCode = "";
    TRrw.SerNr = -1;
  end;
L22TR:;
  if (qp<>-1) then begin
    TRrw.Qty = TRrw.Qty + qp;
  end;
  b1sv = TRrw.DebVal - TRrw.CredVal;
  b2sv = TRrw.DebVal2 - TRrw.CredVal2;
  csv = TRrw.CurDebVal - TRrw.CurCredVal;
  if (dcflag) then begin
    totsump = totsump + valv;
    b1sv = b1sv + valv;
    b2sv = b2sv + base2val;
    csv = csv + localcurval;
  end else begin
    totsump = totsump - valv;
    b1sv = b1sv - valv;
    b2sv = b2sv - base2val;
    csv = csv - localcurval;
  end;  
  if (b1sv<>0) then begin
    if (TRb.NegativeAmounts!=0) and (negamf) then begin
      if (b1sv>=0) then begin
        TRrw.CredVal = -b1sv;
        TRrw.CredVal2 = -b2sv;
        TRrw.DebVal = blankv;
        TRrw.DebVal2 = blankv;
      end else begin
        TRrw.CredVal = blankv;
        TRrw.CredVal2 = blankv;
        TRrw.DebVal = b1sv;
        TRrw.DebVal2 = b2sv;
      end;
    end else begin
      if (b1sv>=0) then begin
        TRrw.DebVal = b1sv;
        TRrw.CredVal = blankv;
      end else begin
        TRrw.DebVal = blankv;
        TRrw.CredVal = -b1sv;
      end;
      if (b2sv>=0) then begin
        TRrw.DebVal2 = b2sv;
        TRrw.CredVal2 = blankv;
      end else begin
        TRrw.DebVal2 = blankv;
        TRrw.CredVal2 = -b2sv;
      end;
    end;
  end else begin // A Base2 trans only 
    if (TRb.NegativeAmounts!=0) and (negamf) then begin
      if (b2sv>=0) then begin
        TRrw.CredVal = -b1sv;
        TRrw.CredVal2 = -b2sv;
        TRrw.DebVal = blankv;
        TRrw.DebVal2 = blankv;
      end else begin
        TRrw.CredVal = blankv;
        TRrw.CredVal2 = blankv;
        TRrw.DebVal = b1sv;
        TRrw.DebVal2 = b2sv;
      end;
    end else begin
      if (b1sv>=0) then begin
        TRrw.DebVal = b1sv;
        TRrw.CredVal = blankv;
      end else begin
        TRrw.DebVal = blankv;
        TRrw.CredVal = -b1sv;
      end;
      if (b2sv>=0) then begin
        TRrw.DebVal2 = b2sv;
        TRrw.CredVal2 = blankv;
      end else begin
        TRrw.DebVal2 = blankv;
        TRrw.CredVal2 = -b2sv;
      end;
    end;
  end;
  if (curflag) then begin
    if (TRb.NegativeAmounts!=0) and (negamf) then begin
      if (csv>0) then begin
        TRrw.CurCredVal = -csv;
        TRrw.CurDebVal = blankv;
        TRrw.DebVal = blankv;
        TRrw.DebVal2 = blankv;
// Special rounding when a Currency value is there, NONE of the basecurrencies CAN be zero 
        if (oldstyle==0) then begin
          if (TRrw.CredVal==0) then begin TRrw.CredVal = -0.01; end;;
          if (TRrw.CredVal==0) then begin TRrw.CredVal2 = -0.01; end;
        end;
      end;
      if (csv<0) then begin
        TRrw.CurCredVal = blankv;
        TRrw.CredVal = blankv;
        TRrw.CredVal2 = blankv;
        TRrw.CurDebVal = csv;
        if (oldstyle==0) then begin
          if (TRrw.DebVal==0) then begin TRrw.DebVal = -0.01; end;
          if (TRrw.DebVal2==0) then begin TRrw.DebVal2 = -0.01; end;
        end;
      end;
      if (csv==0) then begin
        if (TRrw.DebVal>0) then begin
          TRrw.CurDebVal = csv;
        end;
        if (TRrw.CredVal>0) then begin
          TRrw.CurCredVal = csv;
        end;
      end;
    end else begin
      if (csv>0) then begin
        TRrw.CurDebVal = csv;
        TRrw.CurCredVal = blankv;
        TRrw.CredVal = blankv;
        TRrw.CredVal2 = blankv;
// Special rounding when a Currency value is there, NONE of the basecurrencies CAN be zero 
        if (oldstyle==0) then begin
          if (TRrw.DebVal==0) then begin TRrw.DebVal = 0.01; end;;
          if (TRrw.DebVal2==0) then begin TRrw.DebVal2 = 0.01; end;
        end;
      end;
      if (csv<0) then begin
        TRrw.CurDebVal = blankv;
        TRrw.DebVal = blankv;
        TRrw.DebVal2 = blankv;
        TRrw.CurCredVal = -csv;
        if (oldstyle==0) then begin
          if (TRrw.CredVal==0) then begin TRrw.CredVal = 0.01; end;
          if (TRrw.CredVal2==0) then begin TRrw.CredVal2 = 0.01; end;
        end;
      end;
      if (csv==0) then begin
        if (TRrw.DebVal>0) then begin
          TRrw.CurDebVal = csv;
        end;
        if (TRrw.CredVal>0) then begin
          TRrw.CurCredVal = csv;
        end;
      end;
    end;
  end;
  if (oldstyle>0) then begin
    if (TRrw.DebVal2==0)  then begin TRrw.DebVal2 = blankv; end;
    if (TRrw.CredVal2==0) then begin TRrw.CredVal2 = blankv; end;
  end;
  if (nomval<>-1) then begin//NIL
    if (dcflag) then begin
      TRrw.NomVal = TRrw.NomVal + nomval;
    end else begin
      TRrw.NomVal = TRrw.NomVal - nomval;
    end;
  end;
  TRrw.TAccNumber = taccnumber;
  TRrw.TFromFileName = tfilename;
  TRrw.TFromCode = tcode;
  if (insertrownr!=-1) then begin    
    if (rowfoundf) then begin
      if ((TRrw.DebVal==0) and (TRrw.CredVal==0) and (TRrw.DebVal2==0) and (TRrw.CredVal2==0)) then begin
        MatRowDelete(TRp,i);
      end else begin
        MatRowPut(TRp,i,TRrw);
      end;
    end else begin
      MatRowInsert(TRp,insertrownr,TRrw);
    end;
  end else begin
    if ((TRrw.DebVal==0) and (TRrw.CredVal==0) and (TRrw.DebVal2==0) and (TRrw.CredVal2==0)) then begin
      MatRowDelete(TRp,i);
    end else begin
      MatRowPut(TRp,i,TRrw);
    end;
  end;
LAddEuroCurncyNomARTrRow:;
  RETURN;
END;

global
procedure AddEuroCurncyNomARTrRow(record TRVc TRp,string acc,string objs,string vatcod,string comm,val valv,val valv2,Boolean accf,
             Boolean dcflag,var val totsump,string curncy,val frrate,val torate1,val torate2,val baserate1,val baserate2,
             val curval,val nomval,string CompCode,LongInt SerNr,Integer Typ,val qp,Date duep,LongInt insertrownr,
             Boolean negamf,string taccnumber,string tfilename,string tcode)
begin
  AddEuroCurncyNomARTrRow2(TRp,acc,objs,vatcod,comm,valv,valv2,accf,
             dcflag,totsump,curncy,frrate,torate1,torate2,baserate1,baserate2,
             curval,nomval,CompCode,SerNr,Typ,qp,duep,insertrownr,
             negamf,taccnumber,tfilename,tcode,"");
  return;
end;

global
procedure AddEuroCurncyNomTrRow(record TRVc TRp,string acc,string objs,string vatcod,string comm,val valv,Boolean accf,
           Boolean dcflag,var val totsump,string curncy,val frrate,val torate1,val torate2,val baserate1,val baserate2,
           val curval,val nomval,val qp,LongInt insertrownr,Boolean negamf,string taccnumber,string tfilename,string tcode,Integer typ)
BEGIN
  Date nild;
  
  AddEuroCurncyNomARTrRow(TRp,acc,objs,vatcod,comm,valv,blankval,accf,dcflag,totsump,curncy,frrate,torate1,torate2,baserate1,baserate2,
                          curval,nomval,"",-1,typ,qp,nild,insertrownr,negamf,taccnumber,tfilename,tcode);
  RETURN;                        
END;

global
procedure AddEuroCurncyTrRow2(record TRVc TRp,string acc,string objs,string vatcod,string rvrsvatcod,string comm,val valv,Boolean accf,Boolean dcflag,
                            var val totsump,string curncy,val frrate,val torate1,val torate2,val baserate1,val baserate2,val curval,
                            val qp,LongInt insertrownr,Boolean negamf,string taccnumber)
begin
  val nilv,nomval,valv2;
  Date nild;
  string 255 CompCode,tfilename,tcode;
  LongInt SerNr;
  Integer Typ;
  Date duep;
  
  nilv = -1;
  AddEuroCurncyNomARTrRow2(TRp,acc,objs,vatcod,comm,valv,valv2,accf,
             dcflag,totsump,curncy,frrate,torate1,torate2,baserate1,baserate2,
             curval,nomval,CompCode,SerNr,Typ,qp,duep,insertrownr,
             negamf,taccnumber,tfilename,tcode,rvrsvatcod);
  return;
end;

global
procedure AddEuroCurncyTrRow(record TRVc TRp,string acc,string objs,string vatcod,string comm,val valv,Boolean accf,Boolean dcflag,
                            var val totsump,string curncy,val frrate,val torate1,val torate2,val baserate1,val baserate2,val curval,
                            val qp,LongInt insertrownr,Boolean negamf,string taccnumber)
BEGIN
  val nilv;
  
  nilv = -1;
  AddEuroCurncyNomTrRow(TRp,acc,objs,vatcod,comm,valv,accf,dcflag,totsump,curncy,frrate,torate1,torate2,baserate1,baserate2,curval,nilv,qp,insertrownr,negamf,taccnumber,"","",0);
  RETURN;
END;

global
procedure AddEuroCurncyTrRowType(record TRVc TRp,string acc,string objs,string vatcod,string comm,val valv,Boolean accf,Boolean dcflag,
                            var val totsump,string curncy,val frrate,val torate1,val torate2,val baserate1,val baserate2,val curval,
                            val qp,LongInt insertrownr,Boolean negamf,string taccnumber,Integer typ)
BEGIN
  val nilv;
  
  nilv = -1;
  AddEuroCurncyNomTrRow(TRp,acc,objs,vatcod,comm,valv,accf,dcflag,totsump,curncy,frrate,torate1,torate2,baserate1,baserate2,curval,nilv,qp,insertrownr,negamf,taccnumber,"","",typ);
  RETURN;
END;

global
procedure GetVATCodeSalesVatAcc(string vatcode,var string vatacc)
BEGIN
  record VATCodeBlock VATRec;
  row VATCodeBlock vatrw;
  Integer i,rwcnt;
  record AccBlock ARb;

  BlockLoad(ARb);  
  BlockLoad(VATRec);  
  vatacc = "";  
  rwcnt = MatRowCnt(VATRec);  
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATRec,i,vatrw);
    if (vatrw.VATCode==vatcode) then begin 
      vatacc = vatrw.SalesVATAcc;
      if (ARb.PostIVVATonVATCorr!=0) then begin
        vatacc = vatrw.CorSalesVATAcc;
      end;
      i = rwcnt;
    end;  
  end;  
  RETURN;
END;

global
procedure AddSMRow(record SMVc SMp,Date tdp,string acc,string objs,string vatcod,string comm,val inval,
                   Boolean accf,Boolean dcflag,var val totsump)
BEGIN
  Integer i,rwcnt;
  Boolean found;
  string 60 objects;
  row SMVc SMrw;
  val sv;
  val linval;
  
  if (inval==0) then begin goto LAddSMRow; end;
  if (blank(acc)) then begin goto LAddSMRow; end;
  linval = Round(inval,DefaultRoundMode);
  if (objs!="-1") then begin
    NoDupObjs(objs,objects);
    AutoObj(objects);
  end;
  found = false;
  rwcnt = MatRowCnt(SMp);
  if (accf) then begin
    for (i=0; i<rwcnt;i=i+1) begin
      MatRowGet(SMp,i,SMrw);
      if ((acc==SMrw.AccNumber) and ((objects==SMrw.Objects) or (objs=="-1")) and (vatcod==SMrw.VATCode)) then begin 
        goto L22AddSMRow; 
      end;
    end;
  end else begin
   i = rwcnt;
  end; 
  ClearRow(SMp,SMrw,1);
  
  SMrw.AccNumber = acc;
  SMrw.Objects = objects;
  if (comm!="-1") then begin
    SMrw.Comment = comm;
  end;  
  if (vatcod!="-1") then begin
    SMrw.VATCode = vatcod;
  end;  
//  SetM4ValBlank(&SMrw.DebVal);
//  SetM4ValBlank(&SMrw.CredVal);
L22AddSMRow:;
  if (dcflag) then begin
    totsump = totsump + linval;
    sv = linval;
  end else begin
    totsump = totsump - linval;
    sv = -linval;
  end;
  if (sv>=0) then begin
    SMrw.DebVal = SMrw.DebVal + sv;
  end else begin
    SMrw.CredVal = SMrw.CredVal - sv;
  end;  
  sv = SMrw.DebVal - SMrw.CredVal;
  if (sv>=0) then begin
    SMrw.DebVal = sv;
    SMrw.CredVal = blankval;
  end else begin
    SMrw.DebVal = blankval;
    SMrw.CredVal = -sv;
  end;
  if (nonblankdate(tdp)) then begin
    if (tdp!=SMp.TransDate) then begin
      SMrw.TransDate = tdp;
    end;  
  end;    
  MatRowPut(SMp,i,SMrw);
LAddSMRow: ;
  RETURN;
END;

// This should do same as function above...
procedure AddSMRowLocal(var record SMVc SMp,Date tdp,string acc,string objs,string vatcod,string comm,
                   val valv,Boolean accf,Boolean dcflag,var val totsump,val curval,
                   string curncy,val frrate,val torate1,val torate2,val baserate1,val baserate2)
BEGIN
  Integer i,rwcnt;
  Boolean found;
  string 255 objects,localcurncy;
  row SMVc SMrw;
  val sv;
  Integer typeofcur;  
  Integer oldstyle;
  val localcurval,base2val;
  Boolean curflag;
  
  if (valv==0) then begin goto LAddSMRow; end;
  if (blank(acc)) then begin goto LAddSMRow; end;
  if (nonblank(objs)) then begin
    NoDupObjs(objs,objects);
    AutoObj(objects);
  end;
  
  found = false;
  rwcnt = MatRowCnt(SMp);
  if (accf) then begin
    for (i=0; i<rwcnt;i=i+1) begin
      MatRowGet(SMp,i,SMrw);
      if ((acc==SMrw.AccNumber) and
          ((objects==SMrw.Objects) or (objs=="NIL")) and
          (vatcod==SMrw.VATCode)) then begin goto L22SM; end;
    end;
  end else begin
    i = rwcnt;
  end;  
  localcurncy = curncy;
  localcurval = curval;
  
  ClearRow(SMp,SMrw,1);
  SMrw.AccNumber = acc;
  SMrw.Objects = objects;
  if (comm!="") then begin
    SMrw.Comment = comm;
  end;  
  SMrw.VATCode = vatcod;
  SMrw.DebVal = blankval;
  SMrw.CredVal = blankval;
  SMrw.CurncyCode = curncy;
  SMrw.FrRate = frrate;
  SMrw.ToRateB1 = torate1;
  SMrw.ToRateB2 = torate2;
  SMrw.BaseRate1 = baserate1;
  SMrw.BaseRate2 = baserate2;
  
  curflag = false;
  typeofcur = TypeOfCurncy(localcurncy,oldstyle);   
  if (typeofcur==0) begin// Foreign Curncy 
    if (nonblank(localcurncy)) then begin curflag = true; end;
    base2val = MulRateToBase2(localcurncy,localcurval,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
  end;
  if (typeofcur==1) begin// Base Curncy 1 
    base2val = MulRateToBase2(localcurncy,localcurval,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
  end;  
  if (typeofcur==2) begin// Base Curncy 2 
    if (nonblank(localcurncy)) then begin curflag = true; end;
    base2val = MulRateToBase2(localcurncy,localcurval,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
  end;
L22SM:
  if (dcflag) then begin
    totsump = totsump + valv;
    sv = valv;
  end else begin
    totsump = totsump - valv;
    sv = -valv;
  end;
  if (sv>=0) then begin
    SMrw.DebVal = SMrw.DebVal + sv;
  end else begin
    SMrw.CredVal = SMrw.CredVal - sv;
  end;
  sv = SMrw.DebVal - SMrw.CredVal;  
  if (sv>=0) then begin
    SMrw.DebVal = sv;
    SMrw.CredVal = blankval;
    SMrw.DebVal2 = base2val;
    SMrw.CredVal2 = blankval;
    if (curflag) then begin
      SMrw.CurCredVal = blankval;
      SMrw.CurDebVal = localcurval;
    end;
  end else begin
    SMrw.DebVal = blankval;
    SMrw.CredVal = -sv;
    SMrw.DebVal2 = blankval;
    SMrw.CredVal2 = base2val;
    if (curflag) then begin
      SMrw.CurCredVal = localcurval;
      SMrw.CurDebVal = blankval;
    end;
  end;

  if (nonblankdate(tdp)) then begin
//    if (tdp!=SMp.TransDate) then begin//why all rows exept 2 first?
      SMrw.TransDate = tdp;
//    end;
  end;    
  
  MatRowPut(SMp,i,SMrw);
LAddSMRow:;
  RETURN;
END;

global
procedure AddEuroCurncySmRow(var record SMVc SMp,Date td,string acc,string objs,string vatcod,string comm,val valv,
                             Boolean accf,Boolean dcflag,var val totsump,string curncy,
                             val frrate,val torate1,val torate2,val baserate1,val baserate2,
                             val curval,val qp)
BEGIN
  AddSMRowLocal(SMp,td,acc,objs,vatcod,comm,valv,accf,dcflag,totsump,curval,curncy,frrate,torate1,torate2,baserate1,baserate2);
  RETURN;
END;
