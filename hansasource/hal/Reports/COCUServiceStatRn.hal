external function string 255 GetNextValue(var string);
external function string 255 AddStr(string,string,string);

procedure PrintHeader(record RcVc RepSpec)
begin
  Integer rw;
  string 255 tstr;
  
  rw = 1;
  Header(rw,USetStr(26459) & ": " & RepSpec.d1,1);
  
  if (NonBlank(RepSpec.f2)) then begin
    rw = rw + 1;
    Header(rw,USetStr(26451) & ": " & RepSpec.f2,1);
  end;
  
  if (RepSpec.flags[4]!=0) then begin
    tstr = USetStr(26460);
  end else begin
    tstr = USetStr(26461) & ": " & StringFromSet(310,RepSpec.flags[3]);
  end;
  rw = rw + 1;
  Header(rw,tstr,1);
  
  if (RepSpec.IncDaughter!=0) then begin
    tstr = USetStr(26462);
  end else begin
    tstr = USetStr(26463) & ": " & RepSpec.f1;
  end;
  rw = rw + 1;
  Header(rw,tstr,1);
  
  tstr = "";
  if (RepSpec.flags[0]!=0) then begin tstr = AddStr(tstr,USetStr(26455),", "); end;
  if (RepSpec.flags[5]!=0) then begin tstr = AddStr(tstr,USetStr(26456),", "); end;
  if (RepSpec.flags[1]!=0) then begin tstr = AddStr(tstr,USetStr(26457),", "); end;
  if (RepSpec.flags[6]!=0) then begin tstr = AddStr(tstr,USetStr(26458),", "); end;
  if (NonBlank(tstr)) then begin
    rw = rw + 1;
    Header(rw,USetStr(26464) & ": " & tstr,1);
  end;
  
  tstr = StringFromStringSet(254,RepSpec.f3);
  tstr = AddStr(tstr,StringFromStringSet(254,RepSpec.f4),", ");
  tstr = AddStr(tstr,StringFromStringSet(254,RepSpec.f5),", ");
  tstr = AddStr(tstr,StringFromStringSet(254,RepSpec.f6),", ");
  tstr = AddStr(tstr,StringFromStringSet(254,RepSpec.f7),", ");
  if (NonBlank(tstr)) then begin
    rw = rw + 1;
    Header(rw,USetStr(26465) & ": " & tstr,1);
  end;
  
  tstr = StringFromStringSet(254,RepSpec.f8);
  tstr = AddStr(tstr,StringFromStringSet(254,RepSpec.f9),", ");
  tstr = AddStr(tstr,StringFromStringSet(254,RepSpec.f10),", ");
  tstr = AddStr(tstr,StringFromStringSet(254,RepSpec.f11),", ");
  tstr = AddStr(tstr,StringFromStringSet(254,RepSpec.f12),", ");
  if (NonBlank(tstr)) then begin
    rw = rw + 1;
    Header(rw,USetStr(26466) & ": " & tstr,1);
  end;
  
  return;
end;

procedure AddFunction(string FunctionName,val FunctionQty,var Array string aFunctionName,var Array val aFunctionQty)
begin
  Integer i;
  
  if (NonBlank(FunctionName)) then begin
    while (NonBlank(aFunctionName[i]) and aFunctionName[i]!=FunctionName) begin
      i = i + 1;
    end;
    if (Blank(aFunctionName[i])) then begin
      aFunctionName[i] = FunctionName;
      aFunctionQty[i] = FunctionQty;
    end else begin
      aFunctionQty[i] = aFunctionQty[i] + FunctionQty;
    end;
  end;
  
  return;
end;

procedure PrintCompany(record RcVc RepSpec,string CompName,LongInt COCOunt,Array string aFunctionName,Array val aFunctionQty)
begin
  Integer i;
  
  StartFormat(15);
  OutString(0,0,CompName,false);
  EndFormat;
  Black_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(26467),false);
  OutLongInt(1,0,COCount,true);
  EndFormat;
  i = 0;
  while (NonBlank(aFunctionName[i])) begin
    if (mod(i,5)==0) then begin
      Gray_Divider(0,1);
    end;
    StartFormat(15);
    OutStringID(0,"DblCOCUServStatCust",StringFromStringSet(254,aFunctionName[i]),false,aFunctionName[i]);
    OutVal(1,0,aFunctionQty[i],M4UVal,true);
    EndFormat;
    i = i + 1;
  end;
  Black_Divider(0,1);
  StartFormat(15);
  EndFormat;

  return;
end;

function Boolean ValidateCOCUService(record RcVc RepSpec,record COCUServiceVc COCUServicer)
begin
  Boolean res;
  
  res = true;
  
  if (COCUServicer.OKFlag!=0 and COCUServicer.Accepted!=0) then begin
    if (RepSpec.d1<COCUServicer.startDate) then begin
      res = false;
    end;
    if (NonBlankDate(COCUServicer.endDate) and RepSpec.d1>COCUServicer.endDate) then begin
      res = false;
    end;
  end;
  if (NonBlank(RepSpec.f2)) then begin
    if (!SetInSet(COCUServicer.Class,RepSpec.f2)) then begin
      res = false;
    end;
  end;
  if (RepSpec.flags[4]==0) then begin
    if (COCUServicer.ProgType!=RepSpec.flags[3]) then begin
      res = false;
    end;
  end;
  if (COCUServicer.OKFlag!=0 and RepSpec.flags[0]==0) then begin
    res = false;
  end;
  if (COCUServicer.OKFlag==0 and RepSpec.flags[5]==0) then begin
    res = false;
  end;
  if (COCUServicer.Accepted!=0 and RepSpec.flags[1]==0) then begin
    res = false;
  end;
  if (COCUServicer.Accepted==0 and RepSpec.flags[6]==0) then begin
    res = false;
  end;
  
  ValidateCOCUService = res;
  return;
end;

function Boolean ValidateCUService(record RcVc RepSpec,record CUServiceVc CUServicer,record COCUServiceVc COCUServicer)
begin
  Boolean res;
  string 255 InclFunctions,ExclFunctions;
  
  InclFunctions = AddStr(InclFunctions,RepSpec.f3,",");
  InclFunctions = AddStr(InclFunctions,RepSpec.f4,",");
  InclFunctions = AddStr(InclFunctions,RepSpec.f5,",");
  InclFunctions = AddStr(InclFunctions,RepSpec.f6,",");
  InclFunctions = AddStr(InclFunctions,RepSpec.f7,",");
  ExclFunctions = AddStr(ExclFunctions,RepSpec.f8,",");
  ExclFunctions = AddStr(ExclFunctions,RepSpec.f9,",");
  ExclFunctions = AddStr(ExclFunctions,RepSpec.f10,",");
  ExclFunctions = AddStr(ExclFunctions,RepSpec.f11,",");
  ExclFunctions = AddStr(ExclFunctions,RepSpec.f12,",");
  
  res = true;
  if (RepSpec.d1<CUServicer.StartDate) then begin
    res = false;
  end;
  // if product type not enterprise and contract status is accepted and not oked, then it should be counted in
  if (COCUServicer.ProgType==typHansaWorld or COCUServicer.ProgType==typStandardERP or COCUServicer.ProgType==typPurplesoftERP or COCUServicer.ProgType==typOBSHousing or COCUServicer.ProgType==typPAYYAPERP or COCUServicer.ProgType==typRussianStandard or COCUServicer.Accepted==0 or COCUServicer.OKFlag!=0) then begin
    if (NonBlankDate(CUServicer.EndDate) and RepSpec.d1>CUServicer.EndDate) then begin
      res = false;
    end;
  end;
  if (NonBlank(InclFunctions)) then begin
    if (!SetInSet(CUServicer.Function,InclFunctions)) then begin
      res = false;
    end;
  end;
  if (NonBlank(ExclFunctions)) then begin
    if (SetInSet(CUServicer.Function,ExclFunctions)) then begin
      res = false;
    end;
  end;
  if (CUServicer.Closed!=0) then begin
    res = false;
  end;
  
  ValidateCUService = res;
  return;
end;

function Boolean DoCompany(record RcVc RepSpec,string CompName,var LongInt TotalCOCOunt,var Array string aTotalFunctionName,var Array val aTotalFunctionQty)
begin
  record COCUServiceVc COCUServicer;
  record CUServiceVc CUServicer;
  LongInt COCount;
  Boolean testf,TrHs;
  string 255 ckey;
  Array string 255 aFunctionName;
  Array val aFunctionQty;
  Integer i;
  
  COCount = 0;
  while (LoopMain(COCUServicer,1,true)) begin
    testf = ValidateCOCUService(RepSpec,COCUServicer);
    if (testf) then begin
      COCount = COCount + 1;
      ResetLoop(CUServicer);
      TrHs = true;
      ckey = "COCUMasterPackageSerNr:" & COCUServicer.SerNr;
      CUServicer.Closed = 0;
      while (LoopKey(ckey,CUServicer,1,TrHs)) begin
        if (CUServicer.Closed!=0) then begin
          TrHs = false;
        end;
        testf = TrHs;
        if (!ValidateCUService(RepSpec,CUServicer,COCUServicer)) then begin
          testf = false;
        end;
        if (testf) then begin
          AddFunction(CUServicer.Function,CUServicer.PackageQty * CUServicer.IncludeQty,aFunctionName,aFunctionQty);
        end;
      end;
    end;
  end;
  
  if (COCount>0) then begin
    if (RepSpec.flags[2]==0) then begin
      PrintCompany(RepSpec,CompName,COCOunt,aFunctionName,aFunctionQty);
    end;
    TotalCOCOunt = TotalCOCOunt + COCount;
    i = 0;
    while (NonBlank(aFunctionName[i])) begin
      AddFunction(aFunctionName[i],aFunctionQty[i],aTotalFunctionName,aTotalFunctionQty);
      i = i + 1;
    end;
  end;
  
  DoCompany = COCount>0;
  return;
end;

procedure DoCompanyCust(record RcVc RepSpec,string CompName)
begin
  record COCUServiceVc COCUServicer;
  record CUServiceVc CUServicer;
  Boolean TrHs,testf,printf;
  val TotalQty,TotalSum;
  
  CUServicer.Function = RepSpec.f3;
  TrHs = true;
  while (LoopKey("Function",CUServicer,1,TrHs)) begin
    if (CUServicer.Function!=RepSpec.f3) then begin
      TrHs = false;
    end;
    testf = TrHs;
    if (testf) then begin
      COCUServicer.SerNr = CUServicer.COCUServiceNr;
      ReadFirstMain(COCUServicer,1,true);
      if (!ValidateCOCUService(RepSpec,COCUServicer)) then begin
        testf = false;
      end;
      if (!ValidateCUService(RepSpec,CUServicer,COCUServicer)) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      if (!printf) then begin
        StartFormat(15);
        OutString(0,0,CompName,false);
        EndFormat;
        Black_Divider(0,1);
        StartFormat(15);
        OutString(0,0,USetStr(26468),false);
        OutString(60,0,USetStr(26469),false);
        OutString(120,0,USetStr(26470),false);
        OutString(180,0,USetStr(26471),false);
        OutString(400,0,USetStr(26472),true);
        OutString(1,0,USetStr(26473),true);
        EndFormat;
        Gray_Divider(0,1);
        printf = true;
      end;
      StartFormat(15);
      OutLongint(0,"DblCOCUServiceVc",CUServicer.COCUServiceNr,false);
      OutLongint(60,"DblCUServiceVc",CUServicer.SerNr,false);
      OutString(120,0,CUServicer.CustCode,false);
      OutString(180,0,CUServicer.CustName,false);
      OutVal(400,0,CUServicer.PackageQty * CUServicer.IncludeQty,M4UVal,true);
      OutVal(1,0,CUServicer.TotChargePrice,M4Val,true);
      EndFormat;
      TotalQty = TotalQty + CUServicer.PackageQty * CUServicer.IncludeQty;
      TotalSum = TotalSum + CUServicer.TotChargePrice;
    end;
  end;
  
  if (printf) then begin
    Black_Divider(0,1);
    StartFormat(15);
    OutVal(400,0,TotalQty,M4UVal,true);
    OutVal(1,0,TotalSum,M4Val,true);
    EndFormat;
    StartFormat(15);
    EndFormat;
  end;
  
  return;
end;

global
procedure COCUServiceStatRn(record RcVc RepSpec)
begin
  record CompaniesBlock Compb;
  row CompaniesBlock Comprw;
  Integer i,rwcnt,oldcomp;
  string 255 Companies,Company;
  Array string 255 aTotalFunctionName;
  Array val aTotalFunctionQty;
  LongInt TotalCOCOunt,TotalCompCount;
  
  BlockLoad(Compb);
  if (BlankDate(RepSpec.d1)) then begin
    RepSpec.d1 = CurrentDate;
  end;
  if (Blank(RepSpec.f1)) then begin
    MatRowGet(Compb,CurrentCompany-1,Comprw);
    RepSpec.f1 = Comprw.CompCode;
  end;
  TotalCOCOunt = 0;
  TotalCompCount = 0;
  
  StartReportJob(USetStr(26474));
  PrintHeader(RepSpec);
  EndHeader;
  
  oldcomp = CurrentCompany;
  rwcnt = MatRowCnt(Compb);
  if (RepSpec.IncDaughter) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Compb,i,Comprw);
      if (SetCompanyCode(Comprw.CompCode,false)) then begin
        switch (RepSpec.ArtMode) begin
          case 0:
            if (DoCompany(RepSpec,Comprw.CompName,TotalCOCOunt,aTotalFunctionName,aTotalFunctionQty)) then begin
              TotalCompCount = TotalCompCount + 1;
            end;
          case 1:
            DoCompanyCust(RepSpec,Comprw.CompName);
        end;
      end;
    end;
  end else begin
    Companies = RepSpec.f1;
    Company = GetNextValue(Companies);
    while (NonBlank(Company)) begin
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Compb,i,Comprw);
        if (Comprw.CompCode==Company) then begin
          if (SetCompanyCode(Comprw.CompCode,false)) then begin
            switch (RepSpec.ArtMode) begin
              case 0:
                if (DoCompany(RepSpec,Comprw.CompName,TotalCOCOunt,aTotalFunctionName,aTotalFunctionQty)) then begin
                  TotalCompCount = TotalCompCount + 1;
                end;
              case 1:
                DoCompanyCust(RepSpec,Comprw.CompName);
            end;
          end;
          i = rwcnt;
        end;
      end;
      Company = GetNextValue(Companies);
    end;
  end;
  
  if (TotalCompCount>1 or RepSpec.flags[2]==1) then begin
    PrintCompany(RepSpec,USetStr(26475),TotalCOCOunt,aTotalFunctionName,aTotalFunctionQty);
  end;
  
  if (oldcomp!=CurrentCompany) then begin
    ResetCompany(oldcomp);
  end;
  
  EndJob;
  return;
end;
