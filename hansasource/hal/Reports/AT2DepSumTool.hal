procedure FindNextMovementDate2(string InventoryNr,var Date resd)
BEGIN
  record InvrsVc Invrsr;
  record AT2TakeVc ATTaker;
  Boolean found,testf;

  found = true;
  Invrsr.FileName = "AT2TakeVc";
  Invrsr.InventoryNr = InventoryNr;  
  while (LoopKey("FileName",Invrsr,2,found)) begin
    if (Invrsr.InventoryNr!=InventoryNr) then begin found = false; end;
    if (Invrsr.FileName!="AT2TakeVc") then begin found = false; end;
    if (found) then begin
      testf = true;
      ATTaker.SerNr = Invrsr.TransNr;
      if (ReadFirstMain(ATTaker,1,true)==false) then begin testf = false; end;  
      if (ATTaker.PhysCheckf!=0) then begin testf = false; end;      
      if (testf) then begin
        resd = Invrsr.TransDate;
        found = false;
      end;  
    end;
  end;
  RETURN;
END;

procedure FindNextMovementDate(record InvrsVc Invrsr,var Date resd)
BEGIN
  record InvrsVc tmpInvrsr;
  record AT2TakeVc ATTaker;
  Boolean found,testf;

  SetLoopPosition(tmpInvrsr,GetLoopPosition(Invrsr));
  found = true;
  tmpInvrsr.FileName = "AT2TakeVc";
  tmpInvrsr.InventoryNr = Invrsr.InventoryNr;  
  while (LoopKey("FileName",tmpInvrsr,2,found)) begin
    if (tmpInvrsr.InventoryNr!=Invrsr.InventoryNr) then begin found = false; end;
    if (tmpInvrsr.FileName!="AT2TakeVc") then begin found = false; end;
    testf = true;
    if (GetLoopPosition(Invrsr)==GetLoopPosition(tmpInvrsr)) then begin
      testf = false;
    end;
    if (found and testf) then begin
      testf = true;
      ATTaker.SerNr = tmpInvrsr.TransNr;
      if (ReadFirstMain(ATTaker,1,true)==false) then begin testf = false; end;  
      if (ATTaker.PhysCheckf!=0) then begin testf = false; end;      
      if (testf) then begin
        resd = tmpInvrsr.TransDate;
        found = false;
      end;  
    end;
  end;
  RETURN;
END;

procedure FindPrevMovementDate(record InvrsVc Invrsr,var Date resd)
BEGIN
  record InvrsVc tmpInvrsr;
  record AT2TakeVc ATTaker;
  Boolean found,testf;

  SetLoopPosition(tmpInvrsr,GetLoopPosition(Invrsr));
  found = true;
  tmpInvrsr.FileName = "AT2TakeVc";
  tmpInvrsr.InventoryNr = Invrsr.InventoryNr;  
  while (LoopBackKey("FileName",tmpInvrsr,2,found)) begin
    if (tmpInvrsr.InventoryNr!=Invrsr.InventoryNr) then begin found = false; end;
    if (tmpInvrsr.FileName!="AT2TakeVc") then begin found = false; end;
    testf = true;
    if (GetLoopPosition(Invrsr)==GetLoopPosition(tmpInvrsr)) then begin
      testf = false;
    end;
    if (found and testf) then begin
      testf = true;
      ATTaker.SerNr = tmpInvrsr.TransNr;
      if (ReadFirstMain(ATTaker,1,true)==false) then begin testf = false; end;  
      if (ATTaker.PhysCheckf!=0) then begin testf = false; end;      
      if (testf) then begin
        resd = tmpInvrsr.TransDate;
        found = false;
      end;  
    end;
  end;
  RETURN;
END;

global
procedure GetMovementDates(record RcVc RepSpec,record AT2UnitVc ATUnitr,string depcode,var Date prevmovd,var Date thisdepd,var Date nextmovd)
BEGIN 
  record InvrsVc Invrsr; 
  record AT2TakeVc ATTaker;
  row AT2TakeVc ATTakerw;
  Boolean TrHs,testf,findnextdf;
  Date blankd;

//  prevmovd = ATUnitr.PurchaseDate;
//  thisdepd = ATUnitr.PurchaseDate;
//  nextmovd = ATUnitr.PurchaseDate;
  prevmovd = blankd;
  thisdepd = ATUnitr.PurchaseDate;
  nextmovd = blankd;
  findnextdf = true;
  TrHs = true;
  Invrsr.InventoryNr = ATUnitr.InventoryNr;
  Invrsr.FileName = "AT2TakeVc";
  while (LoopBackKey("FileName",Invrsr,2,TrHs)) begin
    if (Invrsr.InventoryNr!=ATUnitr.InventoryNr) then begin TrHs = false; end;
    if (Invrsr.FileName!="AT2TakeVc") then begin TrHs = false; end;
    testf = true;
    if (Invrsr.Department!=depcode) then begin testf = false; end;
    if (TrHs and testf) then begin
      ATTaker.SerNr = Invrsr.TransNr;
      if (ReadFirstMain(ATTaker,1,true)) then begin    
        if (ATTaker.PhysCheckf!=0) then begin testf = false; end;
      end else begin
        testf = false;
      end;
      if (testf) then begin 
        thisdepd = ATTaker.TransDate;
        FindNextMovementDate(Invrsr,nextmovd);
        if (nextmovd==ATUnitr.PurchaseDate) then begin
//          nextmovd = RepSpec.sEndDate;
        end;
        FindPrevMovementDate(Invrsr,prevmovd);
        if (blankdate(prevmovd)) then begin
          prevmovd = ATUnitr.PurchaseDate;
        end;
        TrHs = false;        
        findnextdf = false;
      end;
    end;
  end;
  if (findnextdf) then begin
    FindNextMovementDate2(ATUnitr.InventoryNr,nextmovd);
    if (nextmovd==ATUnitr.PurchaseDate) then begin
//      nextmovd = RepSpec.sEndDate;
    end;
  end;
  RETURN;
END;

global
procedure GetLastDpr(record AT2UnitVc ATUnitr,Date cd,var Date revald,var val resv)
BEGIN 
  record AT2DprVc AT2Dpr;
  Date blankd;
  Boolean TrHs;

  revald = blankd;
  resv = blankval;
  AT2Dpr.InventoryNr = ATUnitr. InventoryNr;
  AT2Dpr.TransDate = cd;
  if (ReadLastKey("DateInventoryNr",AT2Dpr,2,false)) then begin
    if (AT2Dpr.InventoryNr==ATUnitr.InventoryNr) then begin
      revald = AT2Dpr.TransDate;
      resv = AT2Dpr.StartVal;
    end;
  end;
  if (resv!=0) then begin
    TrHs = true;
    while (LoopBackKey("DateInventoryNr",AT2Dpr,2,TrHs)) begin
      if (AT2Dpr.InventoryNr!=ATUnitr.InventoryNr) then begin
        TrHs = false;
      end;
      if (TrHs) then begin
        if (resv!=AT2Dpr.StartVal) then begin
          TrHs = false;
        end else begin
          revald = AT2Dpr.TransDate;
        end;
      end;
    end;
  end;
  RETURN;
END;

global
procedure GetWrofDate(record AT2UnitVc ATUnitr,var Date wrofd,var Boolean wrof)
BEGIN 
  record AT2WrofVc ATWrofr;
  record InvrsVc Invrsr; 
  Date blankd;

  wrofd = blankd;
  Invrsr.InventoryNr = ATUnitr.InventoryNr;
  Invrsr.FileName = "AT2WrofVc";
  if (ReadFirstKey("FileName",Invrsr,2,true)) then begin 
    ATWrofr.SerNr = Invrsr.TransNr;
    if (ReadFirstMain(ATWrofr,1,true)) then begin
      wrofd = ATWrofr.TransDate;
      wrof = ATWrofr.Writeoff==1;
    end;  
  end;      
  RETURN;
END;

global
procedure FindDprInPeriod(record AT2UnitVc ATUnitr,Date sd,Date enddate,var Date revald,var val resv)
BEGIN 
  record AT2DprVc AT2Dpr;
  Date blankd,ed;
  Boolean TrHs;

  ed = enddate;
//  ed = AddDay(enddate,-1);
  revald = blankd;
  resv = blankval;
  AT2Dpr.InventoryNr = ATUnitr. InventoryNr;
  AT2Dpr.TransDate = ed;
  if (ReadLastKey("DateInventoryNr",AT2Dpr,2,false)) then begin
    if (AT2Dpr.InventoryNr==ATUnitr.InventoryNr) then begin
      revald = AT2Dpr.TransDate;
      resv = AT2Dpr.StartVal;
    end;
  end;
  RETURN;
END;

global
procedure FindInvNrMovements(string InventoryNr,string unitdepcode,string depcode,Date purchd,var Date prevmovd,var Date curmovd,var Date nextmovd,Boolean checkdepf)
BEGIN
  record InvrsVc tmpInvrsr;
  record InvrsVc Invrsr;
  record AT2TakeVc ATTaker;
  row AT2TakeVc ATTakerw;
  Boolean TrHs,found,firstf,flag,testf;
/*    
        StartFormat(15);
         OutString(0,0,"JJ0",false);
         OutString(100,0,InventoryNr,false);
         OutString(200,0,depcode,false);
        EndFormat;
*/        
  flag = true;
  firstf = true;
  TrHs = true;
  prevmovd = purchd;
  Invrsr.InventoryNr = InventoryNr;
  Invrsr.FileName = "AT2TakeVc";
  while (LoopKey("FileName",Invrsr,2,TrHs)) begin
    if (Invrsr.InventoryNr!=InventoryNr) then begin TrHs = false; end;
    if (Invrsr.FileName!="AT2TakeVc") then begin TrHs = false; end;
    testf = true;
    ATTaker.SerNr = Invrsr.TransNr;
    if (ReadFirstMain(ATTaker,1,true)) then begin    
      if (ATTaker.PhysCheckf!=0) then begin testf = false; end;
    end else begin
      testf = false;
    end;      
    if (TrHs and testf) then begin        
      if (firstf) then begin
        RecordCopy(tmpInvrsr,Invrsr);
        firstf = false;        
      end;  
      if (Invrsr.Department==depcode) then begin            
        firstf = true;      
        flag = false;
          if (Invrsr.Row<MatRowCnt(ATTaker)) then begin
            MatRowGet(ATTaker,Invrsr.Row,ATTakerw);
            curmovd = ATTaker.TransDate;            
          end;          
          prevmovd = purchd;
          FindPrevMovementDate(Invrsr,prevmovd);
          FindNextMovementDate(Invrsr,nextmovd);       
      end;
    end;  
  end;
  if (flag) then begin
    testf = true;
    if (tmpInvrsr.InventoryNr!=InventoryNr) then begin testf = false; end;
    if (checkdepf) then begin
      if ((tmpInvrsr.Department!=depcode) and (unitdepcode!=depcode)) then begin testf = false; end;  
    end;  
    
    if (testf) then begin
      curmovd = purchd;
      nextmovd = tmpInvrsr.TransDate;
    end; 
    if (firstf) then begin
      if (((checkdepf) and (unitdepcode==depcode)) or (checkdepf==false))  then begin
        curmovd = purchd;
      end;
    end; 
  end;
  
  RETURN;
END;
