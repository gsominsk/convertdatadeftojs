external procedure FindTargetTimeOverView(record RcVc,string,var val,string,string,string);
external function val FindTargetTimeForTypes(record RcVc,string,string);
external function val GetCostUser(string,Date);

procedure PrintResultForCompany(Integer mothercomp,string daughtercompcode,record RcVc RepSpec,Date sStartDate,Date sEndDate,string jobgroup,string CompCode,string CompName,
          var LongInt totleads,var LongInt totuserno,var val totsales,var val totchargeable,var val totusedoncust,var val totturnover,
          var val totprofit,var val totprevprofit,var val totsalestarg,var val totalltarg,var val totprc)
BEGIN
  record ResultUserVc ResultUserr;
  record ResultUserVc prevResultUserr;
  record ResultUserVc prevprevResultUserr;
  record UserVc Userr;
  Boolean TrHs,compprintedf;
  LongInt meet,leads,userno;
  val sales,profit,prevprofit,prevprevprofit;
  LongInt coleads;
  val cosales,cochargeable,cousedoncust,coturnover,coprofit,coprevprofit;
  val usercosted,usercostlm,usercostlm2;
  record MonthlyUserSetVc MonthlyUserSetr;
  val salestarg,alltarg;
  Date td;
  val cosalestarg,coalltarg,coprc;
  
  userno = 0;
  coleads = 0;
  TrHs = true;
  Userr.JobGroup = jobgroup;
  while (LoopKey("JobGroup",Userr,1,TrHs)) begin
    if (nonblank(jobgroup)) then begin
      if (Userr.JobGroup!=jobgroup) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      ResultUserr.Person = Userr.Code;
      ResultUserr.Month = GetMonth(sStartDate);
      if (ReadFirstKey("PersonMonth",ResultUserr,2,true)) then begin
        if (compprintedf==false) then begin
          StartFormat(15);
           OutString(0,0,CompCode,false);
           OutString(100,0,CompName,false);
          EndFormat;
          Gray_Divider(0,200);
          compprintedf = true;          
        end;
        MonthlyUserSetr.Person = Userr.Code;
        if (ReadFirstMain(MonthlyUserSetr,1,true)) then begin
        end;
        if (SetCompany(mothercomp,false)) then begin
          salestarg = FindTargetTimeForTypes(RepSpec,Userr.Code,MonthlyUserSetr.chConsulting);
          FindTargetTimeOverView(RepSpec,Userr.Code,alltarg,"","","");

          usercosted = GetCostUser(Userr.Code,sEndDate);
          td = AddMonth(sEndDate,-1);
          td = AddDay(td,-GetDay(td) + DaysInMonth(GetYear(td),GetMonth(td)));        
          usercostlm = GetCostUser(Userr.Code,td);

          td = AddMonth(sEndDate,-2);
          td = AddDay(td,-GetDay(td) + DaysInMonth(GetYear(td),GetMonth(td)));        
          usercostlm2 = GetCostUser(Userr.Code,td);
        end;
        if (SetCompanyCode(daughtercompcode,false)) then begin end;

        prevResultUserr.Person = Userr.Code;
        prevResultUserr.Month = GetMonth(sStartDate)-1;
        if (ReadFirstKey("PersonMonth",prevResultUserr,2,true)) then begin
        end;
        prevprevResultUserr.Person = Userr.Code;
        prevprevResultUserr.Month = GetMonth(sStartDate)-2;
        if (ReadFirstKey("PersonMonth",prevprevResultUserr,2,true)) then begin
        end;

        sales = ResultUserr.ConsultingOldCU + ResultUserr.LicensesOldCU;
        profit = ResultUserr.TotalSales;
        profit = profit - 2*usercosted*(salestarg/alltarg); 
        prevprofit = prevResultUserr.TotalSales;

        prevprofit = prevprofit - 2*usercostlm*(salestarg/alltarg);

        prevprevprofit = prevprevResultUserr.TotalSales;
        prevprevprofit = prevprevprofit - 2*usercostlm2*(salestarg/alltarg);
        prevprofit = prevprofit + prevprevprofit;

        StartFormat(15);
         OutString(0,0,Userr.Name,false);
         OutVal(2,0,salestarg/alltarg,M4Val,false);
         OutVal(3,0,ResultUserr.Chargeable,M4Val,true);
         OutVal(4,0,ResultUserr.UsedonCustomers,M4Val,true);
         OutVal(5,0,sales,M4Val,true);
         OutLongInt(6,0,ResultUserr.NewLeads,true);
         OutVal(7,0,ResultUserr.TotalSales,M4Val,true);
         OutVal(8,0,profit,M4Val,true);
         OutVal(1,0,profit+prevprofit,M4Val,true);
        EndFormat;
        cochargeable = cochargeable + ResultUserr.Chargeable;
        cousedoncust = cousedoncust + ResultUserr.UsedonCustomers;
        cosales = cosales + sales;
        coleads = coleads + ResultUserr.NewLeads;
        coturnover = coturnover + ResultUserr.TotalSales;
        coprofit = coprofit + profit;
        coprevprofit = coprevprofit + prevprofit;
        cosalestarg = cosalestarg + salestarg;
        coalltarg = coalltarg + alltarg;
        coprc = coprc + (salestarg/alltarg);
        userno = userno + 1;
      end;
    end;
  end;
  if (compprintedf) then begin
    Gray_Divider(0,1);
    StartFormat(15);
     OutString(0,0,USetStr(14440),false);
     OutVal(2,0,coprc,M4Val,false);
     OutVal(3,0,cochargeable,M4Val,true);
     OutVal(4,0,cousedoncust,M4Val,true);
     OutVal(5,0,cosales,M4Val,true);
     OutLongInt(6,0,coleads,true);
     OutVal(7,0,coturnover,M4Val,true);
     OutVal(8,0,coprofit,M4Val,true);
     OutVal(1,0,coprofit+coprevprofit,M4Val,true);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(14441),false);
     OutVal(2,0,cosalestarg/coalltarg,M4Val,false);
     OutVal(3,0,cochargeable/userno,M4Val,true);
     OutVal(4,0,cousedoncust/userno,M4Val,true);
     OutVal(5,0,cosales/userno,M4Val,true);
     OutLongInt(6,0,coleads/userno,true);
     OutVal(7,0,coturnover/userno,M4Val,true);
     OutVal(8,0,coprofit/userno,M4Val,true);
     OutVal(1,0,(coprofit+coprevprofit)/userno,M4Val,true);
    EndFormat;
    totchargeable = totchargeable + cochargeable;
    totusedoncust = totusedoncust + cousedoncust;
    totsales = totsales + cosales;
    totleads = totleads + coleads;
    totturnover = totturnover + coturnover;
    totprofit = totprofit + coprofit;
    totprevprofit = totprevprofit + coprevprofit;
    totuserno = totuserno + userno;
    totsalestarg = totsalestarg + cosalestarg;
    totalltarg = totalltarg + coalltarg;
    totprc = totprc + coprc;
  end;
  RETURN;
END;

global
procedure MonthConsultResRn(record RcVc RepSpec)
BEGIN
  record DaughterCompBlock DaughterCompRec;
  row DaughterCompBlock DaughterComprw;
  Integer oldcomp,di,drwcnt;
  Boolean testf;
  LongInt totleads,totuserno;
  val totsales,totchargeable,totusedoncust,totturnover,totprofit,totprevprofit;
  val totsalestarg,totalltarg,totprc;

  totuserno = 0;
  totleads = 0;

  StartReportJob(USetStr(14430));
  EndHeader;
  SetRepCol(2,100);
  SetRepCol(3,170);
  SetRepCol(4,210);
  SetRepCol(5,270);
  SetRepCol(6,310);
  SetRepCol(7,370);
  SetRepCol(8,420);
  StartFormat(15);
   OutString(0,0,USetStr(14431),false);
   OutString(2,0,USetStr(14432),false);
   OutString(3,0,USetStr(14433),true);
   OutString(4,0,USetStr(14434),true);
   OutString(5,0,USetStr(14435),true);
   OutString(6,0,USetStr(14436),true);
   OutString(7,0,USetStr(14437),true);
   OutString(8,0,USetStr(14438),true);
   OutString(1,0,USetStr(14439),true);
  EndFormat;
  Gray_Divider(0,1);
  oldcomp = CurrentCompany;  
  BlockLoad(DaughterCompRec);
  drwcnt = MatRowCnt(DaughterCompRec);
  for (di=0;di<drwcnt;di=di+1) begin
    MatRowGet(DaughterCompRec,di,DaughterComprw);
    if (nonblank(RepSpec.FirstAcc)) then begin 
      if (RepSpec.FirstAcc==DaughterComprw.CompCode) then begin
        testf = true;
      end;
    end else begin
      testf = true;
    end;
    if (testf) then begin
      if (SetCompanyCode(DaughterComprw.CompCode,false)) then begin
        PrintResultForCompany(oldcomp,DaughterComprw.CompCode,RepSpec,RepSpec.sStartDate,RepSpec.sEndDate,RepSpec.TransStr,DaughterComprw.CompCode,DaughterComprw.CompName,
                              totleads,totuserno,totsales,totchargeable,totusedoncust,totturnover,totprofit,totprevprofit,totsalestarg,totalltarg,totprc);
      end;
      ResetCompany(oldcomp);
    end;
  end;
  StartFormat(15);
  EndFormat;
  StartFormat(15);
   OutString(0,0,USetStr(14442),false);
   OutVal(2,0,totprc,M4Val,false);
   OutVal(3,0,totchargeable,M4Val,true);
   OutVal(4,0,totusedoncust,M4Val,true);
   OutVal(5,0,totsales,M4Val,true);
   OutLongInt(6,0,totleads,true);
   OutVal(7,0,totturnover,M4Val,true);
   OutVal(8,0,totprofit,M4Val,true);
   OutVal(1,0,totprofit+totprevprofit,M4Val,true);
  EndFormat;
  StartFormat(15);
   OutString(0,0,USetStr(14443),false);
   OutVal(2,0,totsalestarg/totalltarg,M4Val,false);
   OutVal(3,0,totchargeable/totuserno,M4Val,true);
   OutVal(4,0,totusedoncust/totuserno,M4Val,true);
   OutVal(5,0,totsales/totuserno,M4Val,true);
   OutLongInt(6,0,totleads/totuserno,true);
   OutVal(7,0,totturnover/totuserno,M4Val,true);
   OutVal(8,0,totprofit/totuserno,M4Val,true);
   OutVal(1,0,(totprofit+totprevprofit)/totuserno,M4Val,true);
  EndFormat;
  
  EndJob;
  RETURN;
END;