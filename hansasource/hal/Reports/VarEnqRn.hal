external function Integer FindYVars(string,string,string);
external function Boolean CheckVARSubsets(record VARVc,string,string);
external function Boolean ItemHasVarieties(string,string,Boolean);
external function val GetStockQty(string,string,Date,Boolean);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external procedure ExtractObj(string,var Integer,var string);
external procedure HT2Per(Date, Date , var string);


Function val GetSoldQty(string item,string location,date sdate,date edate)
begin
  val res;
  record ItemHistVc IHr;
  boolean TrHs,testf;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
    
  res = 0;
  IHr.ArtCode = item;
  IHr.TransDate = sdate;
  TrHs = true;
  while (LoopKey("ArtCode",IHr,2,TrHs)) begin
    testf=true;
    if (IHr.ArtCode<>item) then begin
      testf=false;TrHs=false;
    end;
    if (IHr.TransDate>edate) then begin
      testf = false; TrHs = false;
    end;   
    if (IHr.StockAffectf<>1) then begin testf = false; end;
    if (IHr.ItemType!=kItemTypeStocked) then begin testf = false; end;
    if (IHr.Location<>location) then begin testf = false; end;
    if not(IHr.FileName=="IVVc"  or IHr.FileName=="SHVc" or IHr.FileName=="RetVc") then begin
      testf = false;
    end;
    if (IHr.Invalid!=0) then begin testf = false; end;
    if (testf) then begin
      res = res - IHr.Qty;
    end;
  end;
  
  TrHs = true;
  IVCashr.TransDate = sdate;
  while (LoopKey("ArtCode:" & item,IVCashr,1,TrHs)) begin
    if (IVCashr.TransDate>edate) then begin
      TrHs = false;
    end;   
    if (TrHs) then begin
      testf = true;
      if (testf) then begin
        rwcnt = MatRowCnt(IVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVCashr,i,IVCashrw);
          if (IVCashrw.ArtCode==item) and (IVCashrw.ovst==0) then begin
            if (IVCashrw.stp==kInvoiceRowTypeNormal) or (IVCashrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
              res = res + IVCashrw.Quant;
            end;
          end;
        end;
      end;
    end;
  end;
  GetSoldQty = res;
  return;
end;

function Integer ExtractVARSubsets(string ostr,var Integer pos,var string rstr)
BEGIN
  Integer semicolon;
  string 1 c1;

  rstr = "";
L47:;
  if (pos>len(ostr)) then begin semicolon = 1; goto L999; end;
  c1 = Mid(ostr,pos,1); 
  pos = pos + 1;
  if ((c1==",") or (c1==".") or (c1==";")) then begin
    if (c1==";") then begin
      semicolon = 1;
    end;
    if (len(rstr)==0) then begin 
      goto L47; 
    end;
    goto L888;
  end;
  if ((len(rstr)<20)) then begin 
    rstr = rstr & c1;
  end;
  goto L47;
L888:;
  if (pos>len(ostr)) then begin semicolon = 1; goto L999; end;
  c1 = Mid(ostr,pos,1);  
  pos = pos + 1;
  if ((c1==",") or (c1==".") or (c1==";")) then begin goto L888; end;
  pos = pos - 1;
L999:;
  ExtractVARSubsets = semicolon;
  RETURN;
END;

Function
val FindVARVal(Array string items,Array val itemqty,Integer strcnt,string incode,string xpos,string xposgr,string ypos,string yposgr,string zpos)
begin
  record VARGVc VARGr;
  string 60 varstr;
  string 60 emptystr;
  Integer i;
  val qty;
  
  qty = BlankVal;
  emptystr = "                                                            ";
  VARGr.Code = xposgr;
  if (ReadFirstMain(VARGr,1,true)) then begin
    if ((VARGr.VarSize>="0") and (VARGr.VarSize<="9")) then begin
      varstr = xpos;
      if (blank(xpos)) then begin
        varstr = Left(emptystr,StringToInt(VARGr.VarSize));
      end;
    end else begin
      varstr = xpos;
      if ((nonblank(ypos)) or (nonblank(zpos))) then begin
        varstr = varstr & VARGr.VarSize;
      end;
    end;
  end;
  VARGr.Code = yposgr;
  if (ReadFirstMain(VARGr,1,true)) then begin
    if ((VARGr.VarSize>="0") and (VARGr.VarSize<="9")) then begin
      varstr = varstr & ypos;
      if (blank(ypos)) then begin
        varstr = varstr & Left(emptystr,StringToInt(VARGr.VarSize));
      end;
    end else begin
      varstr = varstr & ypos;
      if (nonblank(zpos)) then begin
        varstr = varstr & VARGr.VarSize;
      end;
    end;
  end;
  varstr = varstr & zpos;
  for (i=0;i<strcnt;i=i+1) begin
    if (ItemHasVarieties(items[i],varstr,true)) then begin
      qty = qty + itemqty[i];
    end;
  end;
  FindVARVal = qty;
  return;
end;

procedure PrintVARItemMsk1(record INVc INr,Array string items,Array val itemqty,Integer strcnt,string xpos)
begin
  record VARVc VARr;
  Boolean foundf;
  Integer i;

  Gray_Divider(0,1);
  foundf = true;
  VARr.VARGCode = xpos;
  while (LoopKey("VARGCode",VARr,1,foundf)) begin
    if (VARr.VARGCode<>xpos) then begin
      foundf = false;
    end;
    if (foundf) then begin
      StartFormat(15);
      OutString(0,0,VARr.Code,false);
      OutString(50,0,VARr.Comment,false);
      OutString(300,0,FindVARVal(items,itemqty,strcnt,INr.Code,VARr.Code,VARr.VARGCode,"","",""),true);
      EndFormat;
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  EndFormat;
  return;
end;

procedure PrintVARItemMsk2(record INVc INr,Array string items,Array val itemqty,Integer strcnt,string xpos,string ypos,string zpos,Integer nrofy,Boolean printf,string varsubset,string msk,Integer all)
begin
  record VARVc VARr;
  record VARVc VAR2r;
  record VARVc VAR3r;
  Boolean foundf,foundf2;
  Boolean firstf,testf,test2f;
  Integer i;
  val rowcolval;
  Boolean secondprinted;

  if (printf) then begin
    Gray_Divider(0,1);
  end;
  foundf = true;
  firstf = true;
  VARr.VARGCode = xpos;
  while (LoopKey("VARGCode",VARr,1,foundf)) begin
    if (VARr.VARGCode<>xpos) then begin
      foundf = false;
    end;
    if (foundf) then begin
      testf = true;
      foundf2 = true;
      VAR2r.VARGCode = ypos;
      ResetLoop(VAR2r);
      if (nonblank(varsubset)) then begin
        if (CheckVARSubsets(VARr,varsubset,msk)==false) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
      i = 1;
      foundf2 = true;
      secondprinted = false;
      while (LoopKey("VARGCode",VAR2r,1,foundf2)) begin
        if (VAR2r.VARGCode<>ypos) then begin
          foundf2 = false;
        end;
        if (foundf2) then begin
          test2f = true;
          if (nonblank(varsubset)) then begin
            if (CheckVARSubsets(VAR2r,varsubset,msk)==false) then begin
              test2f = false;
            end;
          end;
          if (test2f) then begin
            if (firstf) then begin
              if (secondprinted==false) then begin
                StartFormat(15);
                secondprinted = true;
              end;
              OutString(((400/nrofy)*i)+80,0,VAR2r.Comment,true);
            end else begin
              rowcolval = FindVARVal(items,itemqty,strcnt,INr.Code,VARr.Code,VARr.VARGCode,VAR2r.Code,VAR2r.VARGCode,zpos);
              if ((rowcolval<>0) or (all==1)) then begin
                if (secondprinted==false) then begin
                  StartFormat(15);
                  OutString(0,0,VARr.Comment,false);
                  secondprinted = true;
                end;
                OutString(((400/nrofy)*i)+80,0,rowcolval,true);
              end;
            end;
            i = i + 1;
          end;
        end;
      end;
      if (secondprinted) then begin
        EndFormat;
      end;
      if (firstf) then begin
        StepBack(VARr);
        firstf = false;
      end;
      end;
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  EndFormat;
  return;
end;

procedure PrintVARItemMsk3(record INVc INr,Array string items,Array val itemqty,Integer strcnt,string xpos,string ypos,string zpos,Integer nrofy,string varsubset,string msk,Integer all)
begin
  record VARVc VARr;
  Boolean foundf;
  Integer i;

  Gray_Divider(0,1);
  foundf = true;
  VARr.VARGCode = zpos;
  while (LoopKey("VARGCode",VARr,1,foundf)) begin
    if (VARr.VARGCode<>zpos) then begin
      foundf = false;
    end;
    if (foundf) then begin
        StartFormat(15);
        OutString(0,0,VARr.Comment,false);
        EndFormat;
        Gray_Divider(0,1);
        PrintVARItemMsk2(INr,items,itemqty,strcnt,xpos,ypos,VARr.Code,nrofy,false,varsubset,msk,all);
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  EndFormat;
  return;
end;

procedure PrintItemVarReport(record INVc INr,string flocation,string llocation,Integer all,record RcVc RepSpec)
begin
  record MainStockBlock mst;
  record ItemStatusVc ISr;
  Array string 20 ac;
  Array string 20 items;
  Array val itemqty;
  Boolean varf,foundf,testf;
  string 20 xpos,ypos;
  Integer pos,i,cnt,isrs;
  Integer nrofy;
  string 60 sz,msk,mskrep,curitem;
  string 30 tstr;
  string 200 varsubset;
  date wdate;
  val tot;

  wdate = CurrentDate;
  BlockLoad(mst);
  foundf = true;
  isrs = 0;
  ISr.Code = INr.Code;
  curitem = ISr.Code;
  tot=0;
  while (LoopMain(ISr,1,foundf)) begin  
    if (curitem<>ISr.Code & ISr.Variety) then begin 
      isrs = isrs + 1;
      curitem = ISr.Code & ISr.Variety;
    end;       
    testf = true;
    if (ISr.Code!=INr.Code) then begin
      foundf = false;testf = false;
    end;
    if (nonblank(flocation)) then begin
      if (flocation>ISr.Location) or (llocation<ISr.Location) then begin
        testf = false; 
      end;
    end;
    if (ISr.Location==";;;") then begin
      testf = false;
    end;
    if (testf) then begin
      items[isrs] = ISr.Code & ISr.Variety;
      if (RepSpec.flags[1]==0) then begin 
        itemqty[isrs] = itemqty[isrs] + GetStockQty(ISr.Code & ISr.Variety,ISr.Location,wdate,false);
      end else begin
        itemqty[isrs] = itemqty[isrs] + GetSoldQty(ISr.Code & ISr.Variety,ISr.Location,RepSpec.sStartDate,RepSpec.sEndDate); //?
//        itemqty[isrs] = itemqty[isrs] + GetSoldQty(ISr.Code & ISr.Variety,ISr.Location,RepSpec.sStartDate,RepSpec.sEndDate);
      end;
    end;
  end;
  varf = false;
  if (FindItemVAR(INr.Code,sz,msk,mskrep,varsubset)) then begin
    varf = true;
  end;
  if (varf) then begin
    cnt = 0;
    xpos = "";
    ypos = "";
    pos = 0;
    for (i = 0 ; i<20 ; i=i+1) begin
      ExtractObj(mskrep,pos,tstr);
      if (nonblank(tstr)) then begin
        ac[i] = tstr;
        cnt = cnt + 1;
      end else begin
        i = 20;
      end;
    end;
    if (cnt>0) then begin xpos = ac[0]; end;
    if (cnt>1) then begin ypos = ac[1]; end;
    switch (cnt) begin
      case 1:
        PrintVARItemMsk1(INr,items,itemqty,isrs,xpos);
      case 2:
        nrofy = FindYVars(xpos,varsubset,msk);
        PrintVARItemMsk2(INr,items,itemqty,isrs,ypos,xpos,"",nrofy,true,varsubset,msk,all);
      otherwise
        nrofy = FindYVars(xpos,varsubset,msk);
        pos = 2;
        while (pos<cnt) begin
          PrintVARItemMsk3(INr,items,itemqty,isrs,xpos,ypos,ac[pos],nrofy,varsubset,msk,all);
          pos = pos + 1;
        end;
    end;
  end;
  for (i=0;i<isrs;i=i+1) begin
    tot = tot + itemqty[i];
  end;
  StartFormat(30);
  OutString(180,0,USetStr(12711) & ": ",true);
  OutVal(190,0,tot,M4Val,false);
  EndFormat;
  return;
end;

global
procedure VarEnqRn(record RcVc RepSpec)
begin
  boolean TrHs,TrHs1,testf,testf1;
  string 255 tstr; 
  integer rw;
  string 10 floc,lloc,wloc;
  date sdate,edate;
  record LocationVc Locationr;
  record INVc INr;
  record PIVc PIr;
  string 20 item;
    
  sdate = RepSpec.sStartDate;
  edate = RepSpec.sEndDate;
  floc = FirstInRange(RepSpec.f2,10);
  lloc = LastInRange(RepSpec.f2,10);
 
  rw = 1;
  StartReportJob(USetStr(12700));
  if (RepSpec.flags[1]==0) then begin
    tstr = USetStr(12701);
  end else begin
    HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
    tstr = USetStr(12702) & tstr;
  end;
  Header(rw,tstr,1);
  rw=rw+1;
  if (nonblank(RepSpec.f4)) then begin
		tstr = USetStr(12703) & RepSpec.f4;
		Header(rw,tstr,1);
		rw = rw + 1;
  end;
  if (nonblank(RepSpec.f5)) then begin
		tstr=USetStr(12704) & RepSpec.f5;
		Header(rw,tstr,1);
		rw = rw + 1;
  end;
  if (blank(RepSpec.f2)) then begin
    tstr = USetStr(12705);
  end else begin
    tstr = USetStr(12706) & RepSpec.f2;
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader; 
  StartFormat(15);
  OutString(0,0,USetStr(12712),false);
  OutString(120,0,USetStr(12713),false);
  OutString(1,0,USetStr(12708),true); 
  EndFormat;
  Gray_Divider(0,1);

  item="";
  if (nonblank(RepSpec.f4)) then begin
    item = RepSpec.f4;
  end else begin
    if (nonblank(RepSpec.f5)) then begin
      PIr.VEItemCode = RepSpec.f5; 
      if (ReadFirstKey("VEItemCode",PIr,1,true)) then begin
        item = PIr.ItemCode;
      end;
    end;
  end;
  
  if (item=="") then begin 
    StartFormat(15);
    OutString(0,0,USetStr(12707),false);
    EndFormat;
    Goto LEnd;
  end;
  
  
  INr.Code = item;
  testf = ReadFirstMain(INr,1,true);
 
  StartFormat(15);
  OutString(0,"DblINVc",INr.Code,false);
  OutString(120,0,INr.Name,false);
  OutVal(1,0,INr.UPrice1,M4Val,true);
//  tstr = INr.UPrice1;
//  OutString(1,0,USetStr(12708) & ": " & tstr,true); 
  EndFormat;
  
  PIr.DefaultChoice = 1;
  PIr.ItemCode = item;
  if (ReadFirstKey("DefaultChoice",PIr,2,true)) then begin
		StartFormat(25);
		OutString(0,0,UsetStr(12709) & PIr.VEItemCode,false);
		OutString(340,0,UsetStr(12710) ,true);
	  OutString(350,"DblVEVc",PIr.VECode,false);
		EndFormat;
  end;


  if (RepSpec.flags[2]==1) then begin
    Locationr.Code = floc;
    TrHs = true;
    While (LoopMain(Locationr,1,TrHs)) begin
      if (nonblank(RepSpec.f2)) and (lloc<Locationr.Code) then begin
        TrHs = false;
      end else begin
        wloc = Locationr.Code;
        Black_Divider(0,1);  
        StartFormat(15);
        OutString(0,0,USetStr(12706),false);
        OutString(100,0,wloc,false);
        EndFormat;
        Gray_Divider(0,1);
        PrintItemVarReport(INr,wloc,wloc,1,RepSpec); 
      end;    
    end;
  end else begin
    PrintItemVarReport(INr,floc,lloc,1,RepSpec);
  end;
  
 LEnd:;
  EndJob;
  return;
end;