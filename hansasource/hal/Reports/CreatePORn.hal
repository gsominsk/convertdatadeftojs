external function Boolean FindPOQantity(record INVc,record ItemStatusVc,Boolean,string,record PIVc,var val,var val,var val,val,Boolean,Boolean,Boolean);
external procedure GetStockValue(string,string,var record ItemStatusVc);
external procedure HTVends(string, string, var string);
external procedure HTDetailLevel(Integer, var string);
external procedure HTArtSel(string,string,var string);
external procedure HTLocations(string, string, var string);
external procedure HTSort1(Integer, var string);
external procedure GetItemGroupDescription(string,var string);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external function Boolean FindPItem(string,string,var record PIVc,string,Integer);
external procedure FindStockValue(string,string,var record ItemStatusVc);
external procedure FindMinLevel(var val, string, string,Boolean);


/*
global
function Boolean FindPOQty(string vecode,record INVc INp,var record ItemStatusVc ISp,string location,record PIVc PIp,var val t1p,var val t2p,Integer match)
BEGIN
  Boolean res;
  val t,t2;
  val minlevel;
  record POSettingBlock POset;
  
  BlockLoad(POset);
  FindMinLevel(minlevel,location,INp.Code,false);
  if (minlevel == 0) then begin
    minlevel = INp.MinLevel;
  end;
  
  FindStockValue(INp.Code,location,ISp);
  t = ISp.Instock - ISp.OrddOut;
  t1p = t + ISp.POUnOKQty;
  t1p = t1p - ISp.ProdOrd;
  t2p = blankval;
  
  //if (t1p<INp.MinLevel) then begin
    //t2p = INp.MinLevel - t1p;
  //end;
  
  if (t1p<minlevel) then begin
    t2p = minlevel - t1p;
  end;
  
  
  res = FindPItem(INp.Code,PIp,vecode,match);
  if (res) then begin
    if (t2p>0) then begin
      if (PIp.NormPOQty!=0) then begin
        if (PIp.NormPOQty>t2p) then begin t2p = PIp.NormPOQty; end;
      end;
      if (PIp.MinPOQty!=0) then begin
        if (PIp.MinPOQty>t2p) then begin t2p = blankval; end;
      end;
    end;
  end;
  if (res) then begin
    if (POset.UseNormOrdMult!=0) then begin
      if (t2p>PIp.NormPOQty) then begin
        t = t2p/PIp.NormPOQty;
        t2 = 0.5;
        t = t + t2;
        t = Round(t,0);
        t2p = t*PIp.NormPOQty;
      end;
    end;
    
      if (PIp.MinPOQty<>0) then begin
        if (PIp.MinPOQty>t2p) then begin
          t2p = blankval;//Purchasing sugestion does this
//          t2p = PIp.MinPOQty;
        end;
      end;
      
  end;
  FindPOQty = res;
  RETURN;
END;
*/

global
procedure CreatePORn(record RcVc RepSpec)
BEGIN
  record PIVc PIr;
  record INVc INr;
  record ItemStatusVc ISr;
  record ITVc ITp;
  Boolean itemout,testf;
  Boolean pifound,TrHs,pifound1;
  Integer rw,keys;
  val t,t1,t2;
  string 255 tstr;
  string 5 vatc;
  string 255 fromart,toart;
  string 255 frcc,tocc;
  string 255 lastgroup;
  string 255 ckey;
  string 255 namestr;
  val minlevel;

  fromart = FirstInRange(RepSpec.f1,20);
  toart = LastInRange(RepSpec.f1,20);
  frcc = FirstInRange(RepSpec.f3,20);
  tocc = LastInRange(RepSpec.f3,20);  
  itemout = false;
  StartReportJob(USetStr(2349));
   rw = 1;
   HTVends(RepSpec.f2,RepSpec.f2,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   HTDetailLevel(RepSpec.ArtMode,tstr);
   Header(rw,tstr,0);
   if ((nonblank(RepSpec.f2)) and (RepSpec.flags[1]==1)) then begin
     tstr = USetStr(5055);
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
   HTArtSel(RepSpec.f1,RepSpec.f3,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   if (nonblank(RepSpec.FirstAcc)) then begin
     HTLocations(RepSpec.FirstAcc,RepSpec.FirstAcc,tstr);
     Header(rw,tstr,0);
   end;
   HTSort1(RepSpec.flags[2],tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
  EndHeader;
  SetRepCol(2,70);
  // SetRepCol(3,288);
  // SetRepCol(4,384);
  SetRepCol(3,260);
  SetRepCol(4,310);
  SetRepCol(5,350);
  SetRepCol(6,400);
  SetRepCol(7,210);
  SetRepCol(8,450);  
  StartFormat(15);
  OutString(0,0,USetStr(2325),false);
  OutString(2,0,USetStr(2326),false);
  OutString(7,0,USetStr(5579),true);
  OutString(3,0,USetStr(2342),true);
  OutString(4,0,USetStr(2343),true);
  OutString(5,0,USetStr(2348),true);
  OutString(6,0,USetStr(2347),true);
  OutString(8,0,USetStr(11770),true);
  OutString(1,0,USetStr(2334),true);
  EndFormat;
  if (RepSpec.flags[2]==0) then begin
    INr.Code = fromart;
    ckey = "Code";
    keys = 1;
  end;
  if (RepSpec.flags[2]==1) then begin
    INr.Group = frcc;
    INr.Code = fromart;
    ckey = "Group";
    keys = 2;
  end;
  if (RepSpec.flags[2]==2) then begin
    INr.Name = "";
    ckey = "Name";
    keys = 1;
  end;
  Gray_Divider(0,1);
  TrHs = true;
  while (LoopKey(ckey,INr,keys,TrHs)) begin    
    testf = true;
    if (nonblank(RepSpec.AccStr)) then begin
      if (INr.Department!=RepSpec.AccStr) then begin
        testf = false;
      end;
    end;    
    if (INr.ItemType!=1) then begin testf = false; end;
    if (RepSpec.flags[2]==0) then begin
      if (TrHs) then begin
        if (nonblank(tocc)) then begin
          if (INr.Group>tocc) then begin          
              testf = false;
          end;
        end;
      end;        
      if (TrHs) then begin
        if (nonblank(frcc)) then begin
          if (INr.Group<frcc) then begin
            testf = false;
          end;
        end;
      end;      
      if (TrHs) then begin
        if (nonblank(toart)) then begin
          if (INr.Code>toart) then begin
            TrHs = false;
          end;
        end;
      end;      
    end;          
    if (RepSpec.flags[2]==1) then begin
      if (TrHs) then begin
        if (nonblank(tocc)) then begin
          if (INr.Group>tocc) then begin
            TrHs = false;
          end;
        end;
      end;      
      if (TrHs) then begin
        if (nonblank(toart)) then begin
          if (INr.Code>toart) then begin
            testf = false;
          end;
        end;
      end;      
      if (TrHs) then begin
        if (nonblank(fromart)) then begin
          if (INr.Code<fromart) then begin
            testf = false;
          end;
        end;
      end;
    end;              
    if (RepSpec.flags[2]==2) then begin
      if (TrHs) then begin
        if (nonblank(tocc)) then begin
          if (INr.Group>tocc) then begin
            testf = false;
          end;
        end;
      end;      
      if (TrHs) then begin
        if (nonblank(frcc)) then begin
          if (INr.Group<frcc) then begin
            testf = false;
          end;
        end;
      end;      
      if (TrHs) then begin
        if (nonblank(toart)) then begin
          if (INr.Code>toart) then begin
            testf = false;
          end;
        end;
      end;      
      if (TrHs) then begin
        if (nonblank(fromart)) then begin
          if (INr.Code<fromart) then begin
            testf = false;
          end;
        end;
      end;      
    end;    
    if (INr.Terminated!=0) then begin
      testf = false;
    end;
    if (TrHs==false) then begin testf = false; end;
    if (testf) then begin
      if (GetItemNameStr(1,namestr,RepSpec.Stext,INr.Name,INr.Code)) then begin end;    
      if (RepSpec.flags[2]==1) then begin
        if (lastgroup!=INr.Group) then begin
          if (itemout==true) then begin
            Gray_Divider(0,1);
          end;  
          StartFormat(15);
          OutString(20,0,INr.Group,false);
          GetItemGroupDescription(INr.Group,tstr);
          OutString(100,0,tstr,false);
          EndFormat;
          Gray_Divider(0,1);
          lastgroup = INr.Group;
        end;
      end;
      itemout = true;
      GetItemVATCode(INr.Code,0,vatc,true);
      if (nonblank(RepSpec.f2)) then begin
        pifound1 = FindPItem(INr.Code,RepSpec.FirstAcc,PIr,RepSpec.f2,1);
      end else begin
        pifound1 = FindPItem(INr.Code,RepSpec.FirstAcc,PIr,RepSpec.f2,0);
      end;
      minlevel = 0;
      FindMinLevel(minlevel,RepSpec.FirstAcc,INr.Code,false);
      if (minlevel == 0) then begin
        minlevel = INr.MinLevel;
      end;	
      if (pifound1==false) then begin
        pifound = false;
        if (RepSpec.flags[4]==1) then begin
          if nonblank(RepSpec.f2) then begin
            PIr.ItemCode = INr.Code;
            PIr.VECode = RepSpec.f2;
            pifound1 = ReadFirstMain(PIr,2,true);
          end else begin
            pifound1 = true;
          end;      
        end;
      end;  
      GetStockValue(INr.Code,RepSpec.FirstAcc,ISr);
      t2 = ISr.Instock - ISr.OrddOut + ISr.POUnOKQty - ISr.ProdOrd;
      if (pifound1==true) then begin    
        pifound = FindPOQantity(INr,ISr,false,RepSpec.FirstAcc,PIr,t1,t2,minlevel,0,false,true,true);
/*
all this is done in FindPOQantity
        if (t2<minlevel) then begin
          t2 = minlevel - t2;
        end;
        if (t2<t1) then begin//if sugg is smaller than (instock - onorder)
          t2 = 0;
        end;
        if (t2<>0) then begin
          pifound = true;
        end;
*/        
      end;  
      if (pifound1) then begin
        if ((RepSpec.flags[3]==0) or (ISr.Instock!=0) or (ISr.OrddOut!=0) or (ISr.POUnOKQty!=0) or (ISr.ProdOrd!=0)) then begin
          StartFormat(15);
          OutString(0,"DblINVc",INr.Code,false);
          if ((nonblank(PIr.Comment)) and pifound1) then begin 
            tstr = PIr.Comment; 
          end else begin
            tstr = namestr;
          end;
          if (blank(RepSpec.f2)) then begin
            tstr = tstr & " / ";
            tstr = tstr & PIr.VECode;
          end;
          OutString(2,0,tstr,false);
          OutVal(7,0,minlevel,M4UVal,true);
          OutVal(3,0,ISr.Instock,M4UVal,true);
          OutVal(4,0,ISr.OrddOut,M4UVal,true);
          t = ISr.Instock - ISr.OrddOut;
          OutVal(5,0,t,M4UVal,true);
          OutVal(6,0,ISr.POUnOKQty,M4UVal,true);
          OutVal(8,0,ISr.ProdOrd,M4UVal,true);
          OutVal(1,0,t2,M4UVal,true);
          EndFormat;
        end;
      end;
    end;
  end;
  Gray_Divider(0,1);
  EndJob; 
  RETURN;
END;
