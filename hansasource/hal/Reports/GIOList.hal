//WSListRn.hal
external procedure HT2Per(Date, Date, var string);
/*
external procedure HTInOut(longint, longint, var string);
external procedure HTOrder(LongInt, LongInt, var string);
*/
external procedure HTDetailLevel(integer, var string);
external procedure HTCusts(string, string, var string);
external procedure HTPers(string ,var string);

procedure HTInOut(LongInt a, LongInt b, var string res)
begin
  string 255 tstr;

  if (a==-1 and b==-1) then begin
   res = USetStr(7630);
  end else begin
   if (a==b) then begin
    res = USetStr(7631);
   end else begin
    res = USetStr(7631);
   end;
   res = res & a;
   if (a<>b) then begin
    res = res & " : ";
    res = res & b;
   end;
  end;
return;
end;

procedure HTOrder(LongInt a, LongInt b, var string res)
begin
  string 255 tstr;

  if (a==-1 and b==-1) then begin
   res = USetStr(1823);
  end else begin
   if (a==b) then begin
    res = USetStr(1822);
   end else begin
    res = USetStr(1821);
   end;
   res = res & a;
   if (a<>b) then begin
    res = res & " : ";
    res = res & b;
   end;
  end;
return;
end;

procedure RepInOut(record SVGMVc SVGMp)
begin
  Integer i,rwcnt;
  Row SVGMVc SVGMrw;

  StartFormat(15);
  OutLongInt(0,0,SVGMp.SerNr,false);
  OutDate(130,0,SVGMp.TransDate,false);
  OutString(200,0,SVGMp.EMName,false);
  OutString(450,0,SVGMp.SVONr,true);
  EndFormat;
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(50,0,SVGMp.CustCode,false);
  OutString(200,0,SVGMp.Addr0,false);
  EndFormat;
  if (nonblank(SVGMp.CustContact)) then begin
   StartFormat(15);
   OutString(200,0,SVGMp.CustContact,false);      /* er referens */
   EndFormat;
  end;
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(20,0,USetStr(5107),false);
  OutString(124,0,USetStr(5108),true);
  OutString(200,0,USetStr(5109),true);
  OutString(300,0,USetStr(5110),false);
  OutString(400,0,USetStr(8204),true);
  OutString(460,0,USetStr(8205),true);
  EndFormat;
  rwcnt = MatRowCnt(SVGMp);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
   MatRowGet(SVGMp,i,SVGMrw);
   StartFormat(15);
   OutString(20,0,SVGMrw.ArtCode,false);
   OutVal(124,0,SVGMrw.InQuant,M4UVal,true);
   OutVal(200,0,SVGMrw.OutQuant,M4UVal,true);
   OutString(300,0,SVGMrw.SerialNr,false);
   OutVal(400,0,SVGMrw.CostPrice,M45Val,true);
   OutVal(460,0,SVGMrw.SalesPrice,M45Val,true);
   EndFormat;
  end;
  Black_Divider(280,460);
  StartFormat(15);
  OutVal(400,0,SVGMp.SumCostVal,M45Val,true);
  OutVal(460,0,SVGMp.SumSalesVal,M45Val,true);
  EndFormat;
  return;
end;


global
procedure GIOListRn(record RcVc RepSpec)
begin
  record SVGMVc SVGMr;
  Boolean TrHs;
  Boolean testf;
  val iv;
  LongInt afr;
  LongInt ato;
  string 255 tstr;
  Integer rw;
  LongInt frso;
  LongInt toso;
  string 20 frc,toc;
  

  frso = FirstInRange(RepSpec.f3,30);
  toso =  LastInRange(RepSpec.f3,30);

  afr = FirstInRange(RepSpec.f1,30);
  ato =  LastInRange(RepSpec.f1,30);
  rw = 1;

  StartReportJob(USetStr(7623));
    HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTInOut(afr,ato,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (nonblank(RepSpec.f2)) then begin
    frc = FirstInRange(RepSpec.f2,20);
    toc = LastInRange(RepSpec.f2,20);
    HTCusts(frc,toc,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (RepSpec.ArtMode==2) then begin
    tstr = USetStr(5127);
  end else begin
    HTDetailLevel(RepSpec.ArtMode,tstr);
  end;
  Header(rw,tstr,0);

  if ((RepSpec.flags[1]==0) and (RepSpec.flags[3]==0)) then begin
    tstr = USetStr(1139);
    end;
  if RepSpec.flags[1]==0 then begin
    tstr = USetStr(1138);
  end;
  if RepSpec.flags[3]==0 then begin
    tstr = USetStr(1137);
  end;
  if ((RepSpec.flags[1]==0) or (RepSpec.flags[3]==0)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.TransStr)) then begin
    HTPers(RepSpec.TransStr,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f3)) then begin
    HTOrder(frso,toso,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  EndHeader;
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
  OutString(0,0,USetStr(2562),false);
  OutString(130,0,USetStr(2563),false);
  OutString(200,0,USetStr(8201),false);
  OutString(450,0,USetStr(7632),true);
  EndFormat;
  end;
  if (RepSpec.ArtMode==0) then begin
  StartFormat(15);
  OutString(0,0,USetStr(2562),false);
  OutString(60,0,USetStr(2563),false);
  OutString(140,0,USetStr(8199),false);
  OutString(440,0,USetStr(7783),true);
  EndFormat;
  end; 
  SVGMr.SerNr = afr;
  if (RepSpec.ArtMode==0) then begin
   Gray_Divider(0,1);
  end;
  TrHs = true;
  while (LoopMain(SVGMr,1,TrHs)) begin
  if (ato <> -1) then begin
    if (SVGMr.SerNr > ato) then begin
    TrHs = false;
    end;
  end;
   if (TrHs) then begin
    testf = false;
    // status control
    if (RepSpec.flags[2]==1) then begin // OKed 
      if (SVGMr.OKFlag<>0) then begin
       testf = true;
      end;
    end;
    if (RepSpec.flags[1]==1) then begin // Not OKed 
      if (SVGMr.OKFlag==0) then begin
       testf = true;
      end;
    end;
    if (nonblank(RepSpec.f2) and (RepSpec.f2 <> SVGMr.CustCode)) then begin
      testf = false;
    end;
    if (nonblank(RepSpec.TransStr)) then begin
      if (RepSpec.TransStr <>  SVGMr.EMCode) then begin
       testf = false;
      end;
    end;
    if ((SVGMr.TransDate < RepSpec.sStartDate) or (SVGMr.TransDate > RepSpec.sEndDate)) then begin
      testf = false;
    end;
    if (nonblank(RepSpec.f3)) then begin
       if (toso <> -1) then begin
        if (SVGMr.SVONr > toso) then begin
          testf = false;
        end;
       end;
       if (SVGMr.SVONr < frso) then begin
        testf = false;
       end;
     end;

    if (testf) then begin
      if (RepSpec.ArtMode==1) then begin
        Gray_Divider(0,1);
        RepInOut(SVGMr);
      end;
      if (RepSpec.ArtMode==0) then begin
        StartFormat(15);
        OutString(0,0,SVGMr.SerNr,false);
        OutDate(60,0,SVGMr.TransDate,false);
        OutString(140,0,SVGMr.Addr0,false);
        OutString(440,0,SVGMr.SVONr,true);
        EndFormat;
      end;
    end;
   end;
  end;

  Gray_Divider(0,1);
  EndJob;
return;
end;
