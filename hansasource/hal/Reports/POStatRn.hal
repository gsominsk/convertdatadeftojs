external procedure HTSuppGroup(string,var string);
external procedure HTVendClass(string,var string);
external function Boolean ContactInGroupClass2(string,string,string,string,string,string,string);
external function Boolean ReadAcceptanceRules(Integer,string,var record AcceptanceRulesVc);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure DivPIFactor(val,val,var val);
external procedure BeginCurncyTotals(var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure HTPOrdStatus(Integer, Integer, Integer, var string, var string);
external procedure HTOT(string ,var string);
external procedure HTOBJ(string,var string);
external procedure HT2Per(Date, Date , var string);
external procedure HTCustClassType(string,var string);
external function Boolean SetInSet2(string,string);
external procedure ClassTypef(string,string,var Boolean);
external function Boolean CheckTodoAcessAct(record ActVc,string);

global
procedure PrintApprovalAcivity(record AcceptanceRulesVc Acptr,record ActVc Actr,var Boolean firstf)
begin
  Boolean testf;
  record ActTypeVc ActTyper;
  
  testf = true;
  if (Actr.ActType==Acptr.FYIActType) then begin testf = false; end;
  if (Actr.TodoFlag!=kTodoFlagApproval) then begin testf = false; end;
  if (testf) then begin 
    testf = false;
    if (Actr.ActType==Acptr.AcceptanceActType) then begin testf = true; end;
    if (Actr.ActType==Acptr.FYIActType) then begin testf = true; end;
    if (Actr.ActType==Acptr.AcceptedActType) then begin testf = true; end;
    if (Actr.ActType==Acptr.RejectedActType) then begin testf = true; end;
    if (Actr.ActType==Acptr.NotNeededActType) then begin testf = true; end;
    if (Actr.ActType==Acptr.CancelledActType) then begin testf = true; end;
    if (Actr.ActType==Acptr.ForwardedActType) then begin testf = true; end;
  end;
  if (testf) then begin
    testf = CheckTodoAcessAct(Actr,CurrentUser);
  end;
  if (testf) then begin
    if (firstf) then begin
       Black_Divider(0,1);
       StartFormat(15);
       EndFormat; 
       StartFormat(15);
       OutString(0,0,USetStr(28340),false);
       EndFormat;
       StartFormat(15);
       OutString(0,0,USetStr(28341),false);
       OutString(80,0,USetStr(28342),false);
       OutString(150,0,USetStr(28343),false);
       OutString(350,0,USetStr(28344),false);
       EndFormat;
       Gray_Divider(0,1);
       firstf = false;
     end;

     StartFormat(15);
     OutDateID(0,"DblActVc",Actr.TransDate,false,Actr.SerNr);
     OutString(80,0,Actr.MainPersons,false);
     if (blank(Actr.ActResult)) or (Actr.OKFlag==0) then begin
       OutString(150,0,USetStr(28345),false);
     end else begin
       ActTyper.Code = Actr.ActResult;
       ReadFirstMain(ActTyper,1,true);
       OutString(150,0,ActTyper.Comment,false);
       OutDate(350,0,Actr.EndDate,false);
     end;
     EndFormat;
  end;
  return;
end;

global
procedure POPrintApprovalActivities(record POVc POr)
begin
  record ActVc Actr;
  record AcceptanceRulesVc Acptr;
  Integer actnr;
  record RLinkVc RLr;
  Boolean firstf;

  ReadAcceptanceRules(kAcceptancePO,POr.VECode,Acptr);
  actnr = 1;
  while (ReadRecordLink(POr,actnr,Actr,RLr)) begin
    PrintApprovalAcivity(Acptr,Actr,firstf);      
    actnr = actnr + 1;
  end;
  return;
end;

procedure PrintPrePayments(LongInt ordno)
begin
  record OPPVc OPPr;
  record APPayHistVc APPayHistr;
  Boolean foundf,testf;
  val pptot;
  string 60 keyname,dblstr;
  Boolean mainkey;
  val bv;
  Boolean printheader;
/*  
  mainkey = true;
  APPayHistr.OrderNr = ordno;
  if (ReadFirstKey("OrderNr",APPayHistr,1,true)) then begin
    keyname = "OrderNr";
    mainkey = false;
  end;
  if (mainkey) then begin
    keyname = "MainKey";
  end;
*/
  keyname = "OrderNr";//always order no, otherwise prepayments for other customer pop up in order status
  APPayHistr.VEPNr = ordno;
  APPayHistr.OrderNr = ordno;
  foundf = true;
  ResetLoop(APPayHistr);
  while (LoopKey(keyname,APPayHistr,1,foundf)) begin
    if (mainkey) then begin
      if (APPayHistr.VEPNr<>ordno) then begin
        foundf=false;
      end;
    end else begin
      if (APPayHistr.OrderNr<>ordno) then begin
        foundf=false;
      end;
    end;
    if (foundf) then begin
      if (APPayHistr.FileName=="OPVc") or (APPayHistr.FileName=="CLOutVc") or (APPayHistr.FileName=="CLInVc") then begin
        if (printheader==false) then begin 
          StartFormat(15);
          EndFormat;
          StartFormat(15);
          OutString(0,0,USetStr(2574),false);
          EndFormat;
          StartFormat(15);
          OutString(0,0,USetStr(2352),false);
          OutString(60,0,USetStr(2353),false);
          OutString(130,0,USetStr(4004),false);
          OutString(250,0,USetStr(2575),false);
          OutString(350,0,USetStr(2576),false);
          OutStringAdjustBiDi(1,0,USetStr(2577),true,M4Val,520);
          EndFormat;
          Gray_Divider(0,1);
          printheader = true;
        end;
        StartFormat(15);
        switch (APPayHistr.FileName) begin
          case "OPVc": dblstr = "DblOPVc"; bv = APPayHistr.BookVal;
          case "CLOutVc": dblstr = "DblCLOutVc"; bv = APPayHistr.BookVal;
          case "CLInVc": dblstr = "DblCLInVc"; bv = -APPayHistr.BookVal;
        end;
        OutString(0,dblstr,APPayHistr.SerNr,false);
        OutDate(60,0,APPayHistr.TransDate,false);
        OutString(130,0,APPayHistr.VECode,false);     
        OutString(250,0,APPayHistr.Val,false);
        OutString(350,0,APPayHistr.CurncyCode,false)       
        OutStringAdjustBiDi(1,0,bv,true,M4Val,520);
        EndFormat;
        pptot = pptot + bv;
      end;    
    end;     
  end;
/*  
  if (mainkey==false) then begin
    ResetLoop(APPayHistr);
    APPayHistr.VEPNr = ordno;
    foundf = true;
    while (LoopKey("VEPNr",APPayHistr,1,foundf)) begin
      if (APPayHistr.VEPNr<>ordno) then begin
        foundf=false;
      end;
      if (APPayHistr.OrderNr>0) then begin
        testf=false;
      end;
      if (foundf and testf) then begin
        if (APPayHistr.FileName=="OPVc") or (APPayHistr.FileName=="CLOutVc") or (APPayHistr.FileName=="CLInVc") then begin
          StartFormat(15);
          switch (APPayHistr.FileName) begin
            case "OPVc": dblstr = "DblOPVc"; bv = APPayHistr.BookVal;
            case "CLOutVc": dblstr = "DblCLOutVc"; bv = APPayHistr.BookVal;
            case "CLInVc": dblstr = "DblCLInVc"; bv = -APPayHistr.BookVal;
          end;
          OutString(0,dblstr,APPayHistr.SerNr,false);
          OutDate(60,0,APPayHistr.TransDate,false);
          OutString(130,0,APPayHistr.VECode,false);     
          OutString(250,0,APPayHistr.Val,false);
          OutString(350,0,APPayHistr.CurncyCode,false)       
          OutString(1,0,bv,true);
          EndFormat;
          pptot = pptot + bv;
        end;    
      end;     
    end;
  end;
*/
  if (pptot<>0) then begin
    Gray_Divider(0,1);

    StartFormat(15);
    OutString(0,0,UsetStr(2357),false);
    OutStringAdjustBiDi(1,0,pptot,true,M4Val,520);
    EndFormat;      
    pptot = 0;
    keyname = "OrderNr";
    if (mainkey) then begin
      keyname = "SerNr";
    end;
    OPPr.OrderNr = ordno;
    foundf = true;
    while (LoopKey(keyname,OPPr,1,foundf)) begin
      if (mainkey) then begin
        if (OPPr.SerNr!=ordno) then begin foundf = false; end;
      end else begin
        if (OPPr.OrderNr!=ordno) then begin foundf = false; end;
      end;
      if (foundf) then begin
        pptot = pptot + OPPr.BookRVal;
      end;
    end; 
/*    
    if (mainkey==false) then begin
      ResetLoop(OPPr);
      OPPr.SerNr = ordno;
      foundf = true;
      while (LoopKey("SerNr",OPPr,1,foundf)) begin
        if (OPPr.SerNr!=ordno) then begin foundf = false; end;
        testf=true;
        if (APPayHistr.OrderNr>0) then begin
          testf=false;
        end;
        if (foundf and testf) then begin
          pptot = pptot + OPPr.BookRVal;
        end;
      end; 
    end;
*/
    StartFormat(15);
    OutString(0,0,UsetStr(7825),false);
    OutStringAdjustBiDi(1,0,pptot,true,M4Val,520);
    EndFormat;  
  end;
  if (printheader) then begin 
    StartFormat(30);
    EndFormat; 
  end;   
  return;
end;

function val GetRcvd(record POVc POr, Date effective, string Artcode)
BEGIN
  record PUVc PUr;
  row PUVc PUrw;
  integer rwcnt,i;
  boolean TrHs2;
  val shipd;
  
  shipd = 0;
  ResetLoop(PUr);
  PUr.PONr = POr.SerNr;
  TrHs2 = true;
  while (LoopKey("PONr",PUr,1,TrHs2)) begin
    if (PUr.PONr <> POr.SerNr) then begin
      TrHs2 = false;
    end;
    if (TrHs2) then begin
      if (PUr.TransDate<=effective and (PUr.OKFlag<>0))then begin
        rwcnt = MatRowCnt(PUr);
        for(i=0;i<rwcnt;i=i+1) begin
          MatRowGet(PUr,i,PUrw);
          if (PUrw.ovst==0) then begin
            if (PUrw.ArtCode==ArtCode) then begin
              shipd = shipd + PUrw.Quant; 
            end;
          end;
        end;
      end;
    end;
  end;  //TrHs2
  GetRcvd = shipd;
  RETURN;
END;

function val GetInvd(record POVc POr, Date effective , string Artcode)
BEGIN
  record VIVc VIr;
  row VIVc VIrw;
  integer rwcnt, i;
  boolean TrHs2;
  val invd;
  
  invd = 0;

  ResetLoop(VIr);
  VIr.POSerNr = POr.SerNr;
  TrHs2 = true;
  while (LoopKey("POSerNr",VIr,1,TrHs2)) begin
    if (VIr.POSerNr<>POr.SerNr) then begin
      TrHs2 = false;
    end;
    if (TrHs2) then begin    
      if (VIr.TransDate <= effective and (VIr.OKFlag<>0)) then begin
        rwcnt = MatRowCnt(VIr);
        for(i=0;i<rwcnt;i=i+1) begin
          MatRowGet(VIr,i,VIrw);
          if (VIrw.Item == ArtCode) then begin
            invd = invd + VIrw.qty;
            if (VIrw.qty==0) then begin
              invd = invd + 1;
            end;  
          end;
        end;
      end;
    end;
  end;  //TrHs2
  GetInvd = invd;
  RETURN;
END;

global
procedure CalcAccrual(record POVc POr,integer i, Date effective, var val shipd, var val invd, var val accrued, var boolean itemf, var boolean headf, val k,val l)
BEGIN
  row POVc POrw;
  
  shipd = 0;
  invd = 0;
  accrued = 0;
  itemf = false;

  MatRowGet(POr,i,POrw);
  shipd = GetRcvd(POr, effective, POrw.ArtCode);
  invd = GetInvd(POr, effective, POrw.ArtCode);
  if (invd <> shipd or blank(POrw.Quant)) then begin
    accrued = shipd - invd;
    itemf = true;
  end;
  if (invd <> shipd or blank(POrw.Quant)) and l == 0 then begin
    headf = true;
  end;
  RETURN;
END;

global 
procedure POStatRn(record RcVc RepSpec)
BEGIN
  record POVc POr;
  record PUVc PUr;
  record VIVc VIr;
  record ObjVc OBr;
  record SMVc SMr;
  record SMVc SM2r;
  record AccVc Accr;
  record INVc INr;
  record ITVc ITr;
  record RetPUVc RetPUr;
  record DropSHVc DropSHr;
  row DropSHVc DropSHrw;
  record CUVc VEr;
  row POVc POrw;
  row PUVc PUrw;
  row VIVc VIrw;
  row RetPUVc RetPUrw;
  row SMVc SMrw;
  row SMVc SM2rw;
  Boolean TrHs,TrHs2,found,testf;
  LongInt afr,ato;
  string 60 frcu,tocu, tstr, tstr2, obj, AccNr, AccName;
  Integer rw,i,rwcnt, l,k, SMrwcnt, SM2rwcnt, j, accrwcnt;
  val value, totval, totval2, accum, acctot, shipd, invd, accrued,t;
  Boolean firstf, Accs, itemfound, itemf, headf;
  Integer curcnt;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  string 60 keystr,keystr2;
  record UnitVc Unitr;

  BeginCurncyTotals(curcnt);
  rw = 1;
  accum = 0;
  firstf = true;
  itemf = false;
  afr = FirstInRange(RepSpec.f1,30);
  ato = LastInRange(RepSpec.f1,30);
  frcu = FirstInRange(RepSpec.f2,20);
  tocu = LastInRange(RepSpec.f2,20);
  StartReportJob(USetStr(8645));
  
  if (repspec.flags[4]==0) then begin
    HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  end else begin
    tstr=USetStr(8644) & ": " & repspec.f1;
  end;
  
  Header(rw,tstr,1);
  HTPOrdStatus(RepSpec.ArtMode,RepSpec.flags[1],RepSpec.flags[3],tstr, tstr2);
  if (repspec.flags[4]==0) then begin
    Header(rw+1,tstr,0);
    Header(rw+1,tstr2,1);
  end else begin
    Header(rw+1,tstr,1);
  end;
  
  if (nonblank(RepSpec.ObjStr)) then begin
    HTOBJ(RepSpec.ObjStr,tstr);
    Header(rw+2,tstr,1);
  end else begin
    if (nonblank(RepSpec.ObjType)) then begin
      HTOT(RepSpec.ObjType,tstr);
      Header(rw+2,tstr,1);
    end;
  end;
  if (nonblankdate(RepSpec.RegDate)) then begin
    Header(rw+2, USetStr(8652) & RepSpec. RegDate,1);
  end;
  HTSuppGroup(RepSpec.f9,tstr);
  if (nonblank(tstr)) then begin
    Header(rw+2,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f4)) then begin
    HTVendClass(RepSpec.f4,tstr);
    if (nonblank(tstr)) then begin
      Header(rw+2,tstr,0);
      rw = rw + 1;
    end;
  end; 
  if (nonblank(RepSpec.f5)) then begin
    HTCustClassType(RepSpec.f5,tstr);
    if (nonblank(tstr)) then begin
      Header(rw+2,tstr,0);
      rw = rw + 1;
    end; 
  end;  
  EndHeader;
  SetRepCol(2,404);
  SetRepCol(3,520-(2*96));
  SetRepCol(4,540-(3*96));
  SetRepCol(5,430);
  POr.SerNr = afr;
  if (RepSpec.ArtMode==3) then begin
    TrHs = false;
  end else begin
    TrHs = true;
  end;
  while (LoopMain(POr,1,TrHs)) begin
    testf = true; 
    if (POr.Closed  == 1) and (RepSpec.flags[1] == 0) then begin
      testf = false;
    end;
    if (POr.OKFlag == 0) and (RepSpec.flags[3] == 0) then begin
      testf = false;
    end;
    if (nonblank(RepSpec.f1)) then begin
      if (POr.SerNr>ato) then begin
        TrHs = false;
      end;
    end;
    if (POr.TransDate<RepSpec.sStartDate) then begin
      testf = false;
    end;
    if (POr.TransDate>RepSpec.sEndDate) then begin
      testf = false;
    end;
    if (nonblank(RepSpec.f2)) then begin
      if (POr.VECode>tocu) then begin
        testf = false;
      end;
      if (POr.VECode<frcu) then begin
        testf = false;
      end;
    end;
    if (nonblank(RepSpec.ObjStr)) then begin
      if (SetInSet(RepSpec.ObjStr,POr.Objects)==false) then begin
        testf = false;
      end;
    end else begin
      if ((testf==true) and (nonblank(RepSpec.ObjType))) then begin
        testf = false;
        OBr.OTCode = RepSpec.ObjType;
        OBr.Code = "";
        Accs = true;
        ResetLoop(OBr);
        while (LoopKey("OTCode",OBr,1,Accs)) begin
          if ((Accs==true) and (RepSpec.ObjType==OBr.OTCode)) then begin              
            if (SetInSet(OBr.Code,POr.Objects)==true) then begin
              testf = true;
              Accs = false;
            end;
          end;
        end; 
      end;
    end;
    if (testf) then begin
      testf = ContactInGroupClass2(POr.VECode,RepSpec.f9,RepSpec.f4,RepSpec.f5,"SUPP","","");
    end;
    if (TrHs==false) then begin
      testf = false;
    end;
    if (testf) then begin
      if (firstf==false) then begin
        StartFormat(15);
        EndFormat;
        Black_Divider(0,1);
        StartFormat(15);
        EndFormat;
      end;
      firstf = false;
      if (RepSpec.ArtMode <> 2) then begin
        StartFormat(15);
        OutString(0,0,USetStr(8644),false);
        EndFormat;
        StartFormat(15);
        OutString(0,0,USetStr(2622),false);
        OutString(70,0,USetStr(2623),false);
        OutString(180,0,USetStr(4004),true);
        OutString(350,0,USetStr(3321),false);
        OutString(480,0,USetStr(2638),true);
        EndFormat;
        Gray_Divider(0,1);
        StartFormat(15);
        OutLongInt(0,"DblPOVc",POr.SerNr,false);
        OutDate(70,0,POr.TransDate,false);
        OutString(180,0,POr.VECode,true);
        OutString(200,0,POr.Addr0,false);
        OutString(350,0,POr.Objects,false);
        OutString(480,0,POr.PlanShip,true);
        EndFormat;
        if (RepSpec.ArtMode == 1) then begin
          if (nonblank(POr.Addr1)) then begin
            StartFormat(15);
            OutString(200,0,POr.Addr1,false);
            EndFormat;
          end;
          if (nonblank(POr.Addr2)) then begin
            StartFormat(15);
            OutString(200,0,POr.Addr2,false);
            EndFormat;
          end;
          if (nonblank(POr.Addr3)) then begin
            StartFormat(15);
            OutString(200,0,POr.Addr3,false);
            EndFormat;
          end;
        end;
      end;
      if (RepSpec.ArtMode <> 2) then begin
        StartFormat(10);
        EndFormat;
        StartFormat(15);
        OutStringAdjustBiDi(250,0,USetStr(5501),true,M4Val,290);
        OutStringAdjustBiDi(310,0,USetStr(5548),true,M4Val,350);
        OutStringAdjustBiDi(370,0,USetStr(4827),true,M4Val,410);
        OutString(400,0,USetStr(3321),false);
        EndFormat;
      end;
      value = 0;
      totval = 0;
      rwcnt = MatRowCnt(POr);
      for(i=0;i<rwcnt;i=i+1) begin
        MatRowGet(POr,i,POrw);
        if (RepSpec.ArtMode <> 2) then begin
          StartFormat(15);
          OutString(15,0,POrw.ArtCode,false);
          OutString(95,0,POrw.Spec,false);
          OutValBiDi(250,0,POrw.Quant,M4UVal,true,290);
          OutValBiDi(310,0,POrw.Shipd2,M4UVal,true,350);
          OutValBiDi(370,0,POrw.Invd,M4UVal,true,410);
          OutString(400,0,POrw.Objects,false);
          //obj = POr.Objects & " " & POrw.Objects;
          //OutString(400,0,obj,false);
          EndFormat;
        end;
      end;
      if (totval <> 0) then begin
        StartFormat (15);
        Black_Divider(320,350);
        OutValBiDi(350,0,totval,M4UVal,true,390);  //row totals
        EndFormat;
      end;
      if (RepSpec.ArtMode == 2) then begin
        accrued = 0;
        totval2 = 0;
        l = 0;
        rwcnt = MatRowCnt(POr);
        for(i=0;i<rwcnt;i=i+1) begin
          headf = false;
          itemf = false;
          MatRowGet(POr,i,POrw);
            if (nonblankdate(RepSpec.RegDate)) then begin
              CalcAccrual (POr, i, RepSpec.RegDate, shipd, invd, accrued, itemf, headf, k, l);
            end else begin            
              if (POrw.Invd <> POrw.Shipd2 or blank(POrw.Quant)) and l == 0 then begin
                headf = true;
              end;
            end;
            if (headf) then begin
            l = 1;
            
            StartFormat(15);
            OutString(0,0,USetStr(8644),false);
            EndFormat;
            StartFormat(15);
            OutString(0,0,USetStr(2622),false);
            OutString(70,0,USetStr(2623),false);
            OutString(180,0,USetStr(4004),true);
            OutString(350,0,USetStr(3321),false);
            OutString(480,0,USetStr(2638),true);
            EndFormat;
      
            Gray_Divider(0,1);
            StartFormat(15);
            OutLongInt(0,"DblPOVc",POr.SerNr,false);
            OutDate(70,0,POr.TransDate,false);
            OutString(180,0,POr.VECode,true);
            OutString(200,0,POr.Addr0,false);
            OutString(350,0,POr.Objects,false);
            OutString(480,0,POr.PlanShip,true);
            EndFormat;
            StartFormat(5);
            OutString(20,0,USetStr(8333),false);
            EndFormat; 
            StartFormat(15);
            OutStringAdjustBiDi(180,0,USetStr(5501),true,M4Val,220);
            OutStringAdjustBiDi(220,0,USetStr(8647),true,M4Val,260);
            OutStringAdjustBiDi(260,0,USetStr(2633),true,M4Val,300);
            OutStringAdjustBiDi(300,0,USetStr(8648),true,M4Val,340);
            OutStringAdjustBiDi(340,0,USetStr(7591),true,M4Val,380);
            OutString(405,0,USetStr(4036),true);
            OutString(410,0,USetStr(3321),false);
            EndFormat;
          end;
          if (nonblankdate(RepSpec.RegDate)) then begin
            CalcAccrual (POr, i, RepSpec.RegDate, shipd, invd, accrued, itemf, headf, k, l);
          end else begin            
            if ((POrw.Invd <> POrw.Shipd2) or blank(POrw.Quant)) then begin
              shipd = POrw.Shipd2;
              invd = POrw.Invd;
              if (POr.InvBeforePU!=0) then begin
                if (shipd!=0) then begin
                  accrued = shipd - invd;
                end else begin
                  accrued = POrw.Quant - invd;
                end;
              end else begin
                accrued = shipd - invd;
              end;
              itemf = true;
            end;
          end;
          if (itemf) then begin
              StartFormat(15);
              OutString(0,0,POrw.ArtCode,false);
              OutString(64,0,POrw.Spec,false);
              OutValBiDi(180,0,POrw.Quant,M4UVal,true,220);
              OutValBiDi(220,0,shipd,M4UVal,true,260);
              OutValBiDi(260,0,invd,M4UVal,true,300);
              OutValBiDi(300,0,accrued,M4UVal,true,340);
              t = 1;
              if (nonblank(POrw.VEUnit)) then begin
                Unitr.Code = POrw.VEUnit;
                ReadFirstMain(Unitr,1,true);
                if (Unitr.QtyFact!=0) then begin
                  t = Unitr.QtyFact;
                end;
              end;
              if (POrw.VEQuant!=0) then begin
                accrued = (accrued*POrw.VEQuant)/POrw.Quant;
              end;

              value = accrued * (POrw.Price/t);

              OutValBiDi(340,0,value,M4UVal,true,380);
              OutString(400,0,POrw.CostAcc,true);
              OutString(410,0,POrw.Objects,false);
              //obj = POr.Objects & " " & POrw.Objects;
              //OutString(420,0,obj,false);
//              totval2 = totval2 + MulRateToBase1(POr.CurncyCode,value,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,DefaultCurRoundOff);
              accum = accum + MulRateToBase1(POr.CurncyCode,value,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,DefaultCurRoundOff);
              totval2 = totval2 + value;
              EndFormat;
              AddCurncyTotals(acur,av1,curcnt,POr.CurncyCode,value);
          end;
        end;
      end;  
      if (totval2 <> 0) then begin
        StartFormat (15);
        Black_Divider(310,340);
        OutValBiDi(340,0,totval2,M4UVal,true,380);  //row totals
        EndFormat;
      end else begin
   /*TM>>KH Sorry but this is a shabby way to prevent rule printing when there is no data*/
        firstf = true;
      end;
     //StartFormat(15);
      //EndFormat;

      firstf = true;
      ResetLoop(PUr);
      PUr.PONr = POr.SerNr;
      TrHs2 = true;
      while (LoopKey("PONr",PUr,1,TrHs2)) begin
        if (PUr.PONr<>POr.SerNr) then begin
          TrHs2 = false;
        end;
        if (TrHs2) then begin
          if (RepSpec.ArtMode == 1) then begin
            if (firstf) then begin
              Black_Divider(0,1);
              StartFormat(15);
              EndFormat; 
              StartFormat(15);
              OutString(0,0,USetStr(1828),false);
              EndFormat;
              StartFormat(15);
              OutString(0,0,USetStr(2622),false);
              OutString(60,0,USetStr(2623),false);
              OutString(130,0,USetStr(4004),false);
              OutString(200,0,USetStr(2586),false);
              EndFormat;
              Gray_Divider(0,1);
              firstf = false;
            end;
            StartFormat(15);
            OutLongInt(0,"DblPU",PUr.SerNr,false);
            OutDate(60,0,PUr.TransDate,false);
            OutString(130,0,PUr.VECode,false);
            OutString(200,0,PUr.VEName,false);
            OutString(430,0,PUr.Location,false);
            EndFormat;
            StartFormat(15);
            OutStringAdjustBiDi(250,0,USetStr(5501),true,M4Val,290);
            OutStringAdjustBiDi(310,0,USetStr(8640),true,M4Val,350);
            OutStringAdjustBiDi(370,0,USetStr(8641),true,M4Val,410);
            OutStringAdjustBiDi(420,0,USetStr(8642),true,M4Val,460);
            OutString(425,0,USetStr(7583),false);
            EndFormat;
            rwcnt = MatRowCnt(PUr);
            for(i=0;i<rwcnt;i=i+1) begin
              MatRowGet(PUr,i,PUrw);
              if (PUrw.ovst==0) then begin
                StartFormat(15);
                OutString(15,0,PUrw.ArtCode,false);
                OutString(95,0,PUrw.Spec,false);
                OutValBiDi(250,0,PUrw.Quant,M4Qty,true,290);
                OutValBiDi(310,0,PUrw.UPrice,M4Val,true,350);
                OutValBiDi(370,0,PUrw.CostPrice,M4Val,true,410);
                OutValBiDi(420,0,PUrw.Sum,M4Val,true,460);
                OutString(425,0,PUrw.SerialNr,false);
                EndFormat;
              end;
            end;
            StartFormat(15);
            EndFormat;
          end;
        end;
      end;
      RecordClear(PUr);
      ResetLoop(PUr);
      TrHs2 = true;
      keystr = "RowPONr:" & POr.SerNr;
      while (LoopKey(keystr,PUr,1,TrHs2)) begin
        if (TrHs2) then begin
          if (PUr.PONr<=0) then begin
          if (RepSpec.ArtMode == 1) then begin
            if (firstf) then begin
              Black_Divider(0,1);
              StartFormat(15);
              EndFormat; 
              StartFormat(15);
              OutString(0,0,USetStr(1828),false);
              EndFormat;
              StartFormat(15);
              OutString(0,0,USetStr(2622),false);
              OutString(60,0,USetStr(2623),false);
              OutString(130,0,USetStr(4004),false);
              OutString(200,0,USetStr(2586),false);
              EndFormat;
              Gray_Divider(0,1);
              firstf = false;
            end;
            StartFormat(15);
            OutLongInt(0,"DblPU",PUr.SerNr,false);
            OutDate(60,0,PUr.TransDate,false);
            OutString(130,0,PUr.VECode,false);
            OutString(200,0,PUr.VEName,false);
            OutString(430,0,PUr.Location,false);
            EndFormat;
            StartFormat(15);
            OutStringAdjustBiDi(250,0,USetStr(5501),true,M4Val,290);
            OutStringAdjustBiDi(310,0,USetStr(8640),true,M4Val,350);
            OutStringAdjustBiDi(370,0,USetStr(8641),true,M4Val,410);
            OutStringAdjustBiDi(420,0,USetStr(8642),true,M4Val,460);
            OutString(425,0,USetStr(7583),false);
            EndFormat;
          end;
          rwcnt = MatRowCnt(PUr);
          for(i=0;i<rwcnt;i=i+1) begin
            MatRowGet(PUr,i,PUrw);
            if (PUrw.ovst==0) and (PUrw.PONr==POr.SerNr) then begin
              if (RepSpec.ArtMode==1) then begin
                StartFormat(15);
                OutString(15,0,PUrw.ArtCode,false);
                OutString(95,0,PUrw.Spec,false);
                OutValBiDi(250,0,PUrw.Quant,M4Qty,true,290);
                OutValBiDi(310,0,PUrw.UPrice,M4Val,true,350);
                OutValBiDi(370,0,PUrw.CostPrice,M4Val,true,410);
                OutValBiDi(420,0,PUrw.Sum,M4Val,true,460);
                OutString(425,0,PUrw.SerialNr,false);
                EndFormat;
//                i = rwcnt;
              end;
            end;
          end;
          if (RepSpec.ArtMode == 1) then begin
            StartFormat(15);
            EndFormat;
          end;
          end;
        end;
      end;      
      firstf = true;
      if (RepSpec.ArtMode == 1) then begin
      end;
      ResetLoop(RetPUr);
      RetPUr.PONr = POr.SerNr;
      TrHs2 = true;
      while (LoopKey("PONr",RetPUr,1,TrHs2)) begin
        if (RetPUr.PONr<>POr.SerNr) then begin
          TrHs2 = false;
        end;
        if (TrHs2) then begin
          if (RepSpec.ArtMode == 1) then begin
            if (firstf) then begin
              Black_Divider(0,1);
              StartFormat(15);
              EndFormat; 
              StartFormat(15);
              OutString(0,0,USetStr(2057),false);
              EndFormat;
              StartFormat(15);
              OutString(0,0,USetStr(2622),false);
              OutString(60,0,USetStr(2584),false);
              OutString(130,0,USetStr(4004),false);
              OutString(200,0,USetStr(2586),false);
              EndFormat;
              Gray_Divider(0,1);
              firstf = false;
            end;
            StartFormat(15);
            OutLongInt(0,"DblRetPU",RetPUr.SerNr,false);
            OutDate(60,0,RetPUr.TransDate,false);
            OutString(130,0,RetPUr.VECode,false);
            OutString(200,0,RetPUr.VEName,false);
            OutString(430,0,RetPUr.Location,false);
            EndFormat;
            StartFormat(15);
            OutStringAdjustBiDi(250,0,USetStr(5501),true,M4Val,290);
            OutStringAdjustBiDi(310,0,USetStr(8640),true,M4Val,350);
            OutStringAdjustBiDi(420,0,USetStr(8642),true,M4Val,460);
            OutString(425,0,USetStr(7583),false);
            EndFormat;
          end;
          if (RepSpec.ArtMode==1) then begin
            rwcnt = MatRowCnt(RetPUr);
            for(i=0;i<rwcnt;i=i+1) begin
              MatRowGet(RetPUr,i,RetPUrw);
              StartFormat(15);
              OutString(15,0,RetPUrw.ArtCode,false);
              OutString(95,0,RetPUrw.Spec,false);
              OutValBiDi(250,0,RetPUrw.Quant,M4Qty,true,290);
              OutValBiDi(310,0,RetPUrw.FIFO,M4Val,true,350);
              OutValBiDi(420,0,RetPUrw.FIFORowVal,M4Val,true,460);
              OutString(425,0,RetPUrw.SerialNr,false);
              EndFormat;
            end;
            StartFormat(15);
            EndFormat;
          end;
        end;
      end;  //TrHs2
      RecordClear(RetPUr);
      ResetLoop(RetPUr);
      TrHs2 = true;
      keystr = "RowPONr:" & POr.SerNr;
      while (LoopKey(keystr,RetPUr,1,TrHs2)) begin
        if (TrHs2) then begin
          if (RetPUr.PONr<=0) then begin
            if (RepSpec.ArtMode==1) then begin
             if (firstf) then begin
                Black_Divider(0,1);
                StartFormat(15);
                EndFormat; 
                StartFormat(15);
                OutString(0,0,USetStr(2057),false);
                EndFormat;
                StartFormat(15);
                OutString(0,0,USetStr(2622),false);
                OutString(60,0,USetStr(2584),false);
                OutString(130,0,USetStr(4004),false);
                OutString(200,0,USetStr(2586),false);
                EndFormat;
                Gray_Divider(0,1);
                firstf = false;
              end;
              StartFormat(15);
              OutLongInt(0,"DblRetPU",RetPUr.SerNr,false);
              OutDate(60,0,RetPUr.TransDate,false);
              OutString(130,0,RetPUr.VECode,false);
              OutString(200,0,RetPUr.VEName,false);
              OutString(430,0,RetPUr.Location,false);
              EndFormat;
              StartFormat(15);
              OutStringAdjustBiDi(250,0,USetStr(5501),true,M4Val,290);
              OutStringAdjustBiDi(310,0,USetStr(8640),true,M4Val,350);
              OutStringAdjustBiDi(420,0,USetStr(8642),true,M4Val,460);
              OutString(425,0,USetStr(7583),false);
              EndFormat;
            end;
            if (RepSpec.ArtMode==1) then begin
              rwcnt = MatRowCnt(RetPUr);
              for(i=0;i<rwcnt;i=i+1) begin
                MatRowGet(RetPUr,i,RetPUrw);
                StartFormat(15);
                OutString(15,0,RetPUrw.ArtCode,false);
                OutString(95,0,RetPUrw.Spec,false);
                OutValBiDi(250,0,RetPUrw.Quant,M4Qty,true,290);
                OutValBiDi(310,0,RetPUrw.FIFO,M4Val,true,350);
                OutValBiDi(420,0,RetPUrw.FIFORowVal,M4Val,true,460);
                OutString(425,0,RetPUrw.SerialNr,false);
                EndFormat;
              end;
              StartFormat(15);
              EndFormat;
            end;
          end;
        end;
      end;  //TrHs2

      firstf = true;
      RecordClear(VIr);
      ResetLoop(VIr);
      VIr.SerNr = -1;
      found = true;
      keystr = "RowPONr:" & POr.SerNr;
      while (LoopKey(keystr,VIr,1,found)) begin
        if (found) then begin
          if (VIr.POSerNr<=0) then begin
            if (RepSpec.ArtMode==1) then begin
              if (firstf) then begin
                Black_Divider(0,1);
                StartFormat(15);
                EndFormat;
                StartFormat(15);
                EndFormat;  
                StartFormat(15);
                OutString(0,0,USetStr(8643),false);
                EndFormat;
                StartFormat(15);
                OutString(0,0,USetStr(2622),false);
                OutString(130,0,USetStr(2623),false);
                OutString(200,0,USetStr(4004),false);
                OutString(300,0,USetStr(2586),false);
                OutString(440,0,USetStr(2584),true);
                EndFormat;
                Gray_Divider(0,1);
                firstf = false;
              end;
              StartFormat(15);
              OutLongInt(0,"DblVIVc",VIr.SerNr,false);
              OutDate(130,0,VIr.TransDate,false);
              OutString(210,0,VIr.VECode,false);
              OutString(300,0,VIr.VEName,false);
              OutString(440,0,VIr.POSerNr,false);
              EndFormat;
              StartFormat(15);
              OutStringAdjustBiDi(300,0,USetStr(5501),true,M4Val,340);
              OutStringAdjustBiDi(370,0,USetStr(2425),true,M4Val,410);
              OutString(440,0,USetStr(2502),false);
              EndFormat;
              rwcnt = MatRowCnt(VIr);
              for(i=0;i<rwcnt;i=i+1) begin
                MatRowGet(VIr,i,VIrw);
                if (VIrw.PONr==POr.SerNr) then begin
                  StartFormat(15);
                  OutString(15,0,VIrw.Item,false);
                  OutString(95,0,VIrw.Comment,false);
                  OutValBiDi(300,0,VIrw.qty,M4Qty,true,340);
                  OutValBiDi(370,0,VIrw.Sum,M4Val,true,410);
                  OutString(440,0,VIrw.AccNumber,false);
                  EndFormat;
                end;
              end;
            end;
          end;                
        end;              
      end;  //found

      ResetLoop(VIr);
      VIr.POSerNr = POr.SerNr;
      TrHs2 = true;
      while (LoopKey("POSerNr",VIr,1,TrHs2)) begin
        if (VIr.POSerNr<>POr.SerNr) then begin
          TrHs2 = false;
        end;
        if (TrHs2) then begin
          if (RepSpec.ArtMode == 1) then begin
            if (firstf) then begin
              Black_Divider(0,1);
              StartFormat(15);
              EndFormat;
              StartFormat(15);
              EndFormat;  
              StartFormat(15);
              OutString(0,0,USetStr(8643),false);
              EndFormat;
              StartFormat(15);
              OutString(0,0,USetStr(2622),false);
              OutString(130,0,USetStr(2623),false);
              OutString(200,0,USetStr(4004),false);
              OutString(300,0,USetStr(2586),false);
              OutString(440,0,USetStr(2584),true);
              EndFormat;
              Gray_Divider(0,1);
              firstf = false;
            end;
            StartFormat(15);
            OutLongIntOvst(0,"DblVIVc",VIr.SerNr,false,VIr.Invalid);
              switch (VIr.InvType) begin
                case kInvoiceTypeCredit:
                  OutString(70,0,USetStr(16025),false);
                case kInvoiceTypeCreditSpecialSales:
                  OutString(70,0,USetStr(16025),false);
              end;
            OutDateOvst(130,0,VIr.TransDate,false,VIr.Invalid);
            OutStringOvst(210,0,VIr.VECode,false,VIr.Invalid);
            OutStringOvst(300,0,VIr.VEName,false,VIr.Invalid);
            OutStringOvst(440,0,VIr.POSerNr,false,VIr.Invalid);
            EndFormat;
            StartFormat(15);
            OutStringAdjustBiDi(300,0,USetStr(5501),true,M4Val,340);
            OutStringAdjustBiDi(370,0,USetStr(2425),true,M4Val,410);
            OutString(440,0,USetStr(2502),false);
            EndFormat;
            rwcnt = MatRowCnt(VIr);
            for(i=0;i<rwcnt;i=i+1) begin
              MatRowGet(VIr,i,VIrw);
              StartFormat(15);
              OutStringOvst(15,0,VIrw.Item,false,VIr.Invalid);
              OutStringOvst(95,0,Left(VIrw.Comment,25),false,VIr.Invalid);
              OutValOvstBiDi(300,0,VIrw.qty,M4Qty,true,VIr.Invalid,340);
              OutValOvstBiDi(370,0,VIrw.Sum,M4Val,true,VIr.Invalid,410);
              OutStringOvst(440,0,VIrw.AccNumber,false,VIr.Invalid);
              EndFormat;
            end;
          end;
        end;
      end;  //TrHs2

      firstf = true;
      ResetLoop(DropSHr);
      DropSHr.POOrderNr = POr.SerNr;
      found = true;
      while (LoopKey("POOrderNr",DropSHr,1,found)) begin
        if (DropSHr.POOrderNr!=POr.SerNr) then begin found = false; end;
        if (found) then begin
          if (RepSpec.ArtMode==1) then begin
            if (firstf) then begin
              Black_Divider(0,1);
              StartFormat(15);
              EndFormat;
              StartFormat(15);
              EndFormat;  
              StartFormat(15);
              OutString(0,0,USetStr(8653),false);
              EndFormat;
              StartFormat(15);
              OutString(0,0,USetStr(2622),false);
              OutString(130,0,USetStr(2623),false);
              OutString(200,0,USetStr(4923),false);
              OutString(300,0,USetStr(2586),false);
              OutString(440,0,USetStr(2584),true);
              EndFormat;
              Gray_Divider(0,1);
              firstf = false;
            end;

            StartFormat(15);
            OutLongInt(0,"DblDropSHVc",DropSHr.SerNr,false);
            OutDate(130,0,DropSHr.ShipDate,false);
            OutString(210,0,DropSHr.CustCode,false);
            OutString(300,0,DropSHr.Addr0,false);
            OutString(440,0,DropSHr.POOrderNr,false);
            EndFormat;
            StartFormat(15);
            OutStringAdjustBiDi(300,0,USetStr(5501),true,M4Val,340);
            OutStringAdjustBiDi(370,0,USetStr(2425),true,M4Val,410);
            EndFormat;
            rwcnt = MatRowCnt(DropSHr);
            for(i=0;i<rwcnt;i=i+1) begin
              MatRowGet(DropSHr,i,DropSHrw);
              StartFormat(15);
              OutString(15,0,DropSHrw.ArtCode,false);
              OutString(95,0,DropSHrw.Spec,false);
              OutValBiDi(300,0,DropSHrw.Ship,M4Qty,true,340);
              OutValBiDi(370,0,DropSHrw.Ship*DropSHrw.CostPrice,M4Val,true,410);
              OutString(440,0,DropSHrw.COSAcc,false);
              EndFormat;
            end;
          end;
        end;              
      end;  //found
      PrintPrePayments(POr.SerNr);
      POPrintApprovalActivities(POr);
    end;//testf
  end;//end while
  /* TM */
  if (RepSpec.ArtMode == 3) then begin
    TrHs = true;
  end;
  acctot = 0;
  while (LoopMain(POr,1,TrHs)) begin
    testf = true; 
    if (POr.Closed  == 1) and (RepSpec.flags[1] == 0) then begin
      testf = false;
    end;
    if (POr.OKFlag == 0) and (RepSpec.flags[3] == 0) then begin
      testf = false;
    end;
    if (nonblank(RepSpec.f1)) then begin
      if (POr.SerNr>ato) then begin
        TrHs = false;
      end;
    end;
    if (POr.TransDate<RepSpec.sStartDate) then begin
      testf = false;
    end;
    if (POr.TransDate>RepSpec.sEndDate) then begin
      testf = false;
    end;
    if (nonblank(RepSpec.f2)) then begin
      if (POr.VECode>tocu) then begin
        testf = false;
      end;
      if (POr.VECode<frcu) then begin
        testf = false;
      end;
    end;
    if (nonblank(RepSpec.ObjStr)) then begin
      if (SetInSet(RepSpec.ObjStr,POr.Objects)==false) then begin
        testf = false;
      end;
    end else begin
      if ((testf==true) and (nonblank(RepSpec.ObjType))) then begin
        testf = false;
        OBr.OTCode = RepSpec.ObjType;
        OBr.Code = "";
        Accs = true;
        ResetLoop(OBr);
        while (LoopKey("OTCode",OBr,1,Accs)) begin
          if ((Accs==true) and (RepSpec.ObjType==OBr.OTCode)) then begin              
            if (SetInSet(OBr.Code,POr.Objects)==true) then begin
              testf = true;
              Accs = false;
            end;
          end;
        end; 
      end;
    end;
    if (TrHs==false) then begin
      testf = false;
    end;
    if (testf) then begin
      if (firstf  ==  true) then begin
        StartFormat(15); 
        OutString(0,0,USetStr(2502),false);
        OutString(90,0,USetStr(2504),false);
        OutString(240,0,USetStr(2512),false);
        OutString(460,0,USetStr(3142),true);
        EndFormat;
        Gray_Divider(0,1);
      end;
      firstf = false;
      value = 0;
      AccNr = "";
      rwcnt = MatRowCnt(POr);
      for(i=0;i<rwcnt;i=i+1) begin
        itemf = false;
         MatRowGet(POr,i,POrw);
          If nonblankdate(RepSpec.RegDate) then begin
            CalcAccrual (POr, i, RepSpec.RegDate, shipd, invd, accrued, itemf, headf, k, l);
          end else begin
            if ((POrw.Invd <> POrw.Shipd2)) or blank(POrw.Quant) then begin
              shipd = POrw.Shipd2;
              invd = POrw.Invd;
              accrued = shipd-invd;
              itemf = true;
            end;
          end;
          if (itemf) then begin
           itemfound = false;
          if (POrw.CostAcc <> "") then begin
            AccNr = POrw.CostAcc;
          end else begin
            AccNr = "9999";
          end;            
          Accr.AccNumber = AccNr;
          if (ReadFirstMain(Accr,1,true)) then begin
            AccName = Accr.Comment;
            if (AccName == "") then begin
              AccName = USetStr(8649);
            end;
          end else begin
              AccName = USetStr(8651) & AccNr & USetStr(8650);
              AccNr = "9999";
          end;
          SMrwcnt = MatRowCnt(SMr);
          for (j=0;j<SMrwcnt;j=j+1) begin
            MatRowGet(SMr,j,SMrw);
            if ((SMrw.AccNumber == AccNr) and (SMrw.Objects == POrw.Objects)) then begin
              value = (accrued) * POrw.Price;
              AddCurncyTotals(acur,av1,curcnt,POr.CurncyCode,value);
              value = MulRateToBase1(POr.CurncyCode,value,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,DefaultCurRoundOff);
              SMrw.DebVal = SMrw.DebVal + value;
              acctot = acctot + value;
              MatRowPut(SMr,j,SMrw);
              itemfound = true;
            end;
          end;
          if (itemfound == false) then begin
            SMrw.AccNumber = AccNr;
            SMrw.Comment = AccName;
            SMrw.Objects = POrw.Objects;
            value = (accrued) * POrw.Price;
            DivPIFactor(value,POrw.PIFactor,value);
            AddCurncyTotals(acur,av1,curcnt,POr.CurncyCode,value);
            value = MulRateToBase1(POr.CurncyCode,value,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,DefaultCurRoundOff);
            SMrw.DebVal = value;
            acctot = acctot + value;
            MatRowPut(SMr,SMrwcnt,SMrw);
          end;
        end;
      end;
    end;//testf
  end;//end while 
  TrHs = true;
  ResetLoop(Accr);
  Accr.AccNumber = "";
  while (LoopMain(Accr,1,TrHs)) begin
    SMrwcnt = MatRowCnt(SMr);
    for (j=0;j<SMrwcnt;j=j+1) begin
      MatRowGet(SMr,j,SMrw);
      if (SMrw.AccNumber == Accr.AccNumber) then begin
        SM2rwcnt = MatRowCnt(SM2r);
        SM2rw.AccNumber = SMrw.AccNumber;
        SM2rw.Comment = SMrw.Comment;
        SM2rw.Objects = SMrw.Objects;
        SM2rw.DebVal = SMrw.DebVal;
        MatRowPut(SM2r,SM2rwcnt,SM2rw);
      end;
    end;
  end;
  SMrwcnt = MatRowCnt(SM2r);
  for (j=0;j<SMrwcnt;j=j+1) begin
    MatRowGet(SM2r,j,SMrw);
    StartFormat(15);
    If nonblankdate(RepSpec.RegDate) then begin
      OutString(0,0,SMrw.AccNumber,false);
    end else begin
      OutString(0,"POCommitDetail",SMrw.AccNumber,false);
    end;
    OutString(90,0,SMrw.Comment,false);
    OutString(240,0,SMrw.Objects,false);
    OutValBiDi(460,0,SMrw.DebVal,M4Val,true,500);
    EndFormat;
  end;
  StartFormat(15);
  Black_Divider(0,1);
  EndFormat;
  if (RepSpec.ArtMode == 2) then begin
    StartFormat(15);
    OutString(40,0,USetStr(8334),false);
    OutValBiDi(190,0,accum,M4Val,true,230);
    EndFormat;    
    PrintCurncyTotals(acur,av1,av2,av3,curcnt,190,-1,-1,40,false,RepSpec.PocketPC);
  end;
  if (RepSpec.ArtMode == 3) then begin
    StartFormat(15);
    OutString(40,0,USetStr(8334),false);
    OutValBiDi(190,0,acctot,M4Val,true,230);
    EndFormat;
    PrintCurncyTotals(acur,av1,av2,av3,curcnt,190,-1,-1,40,false,RepSpec.PocketPC);
  end;
  EndJob;
  RETURN;
END;
