external function Boolean HasContactClassification();
external function Boolean WrapAndPrint(Integer,string,Integer);
external procedure HTCustClass(string,var string);
external procedure HTCustClassType(string,var string);
external function Boolean SetInSet2(string,string);
external procedure ClassTypef(string,string,var Boolean);

global
procedure VERn(record RcVc RepSpec)
begin
  record CUVc VEr;
  Boolean TrHs;
  String 255 tstr;
  String 20 fromsup;
  String 20 tosup;
  String 20 mykey;
  Integer vecnt;
  Integer keys;
  Integer rw;
  Boolean testf;

  vecnt = 0;
  rw = 1;
  fromsup = FirstInRange(RepSpec.f1,30);
  tosup = LastInRange(RepSpec.f1,30);
  StartReportJob(USetStr(4021));
  if ((blank(fromsup)) and (blank(tosup))) then begin
    if (RepSpec.f2=="") then begin
       tstr = USetStr(1212);
    end;
  end else begin
    tstr = USetStr(1213);
    tstr = tstr & fromsup;
    if (fromsup<>tosup) then begin
      tstr = tstr & " : " & tosup;
    end;
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
  if (RepSpec.flags[0]==0) then begin
    tstr = USetStr(1160);
  end else begin
    tstr = USetStr(4039);
  end;
  Header(rw,tstr,0);
  if (RepSpec.f2<>"") then begin
    tstr = USetStr(1226);
    tstr = tstr & RepSpec.f2;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (RepSpec.flags[1]==0) then begin
    tstr = USetStr(1187);
  end;
  if (RepSpec.flags[1]==1) then begin
    tstr = USetStr(1189);
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
  if (HasContactClassification) then begin
    HTCustClass(RepSpec.f4,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end; 
    HTCustClassType(RepSpec.f5,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end; 
  end;
  EndHeader;
  SetRepCol(2,80);
  SetRepCol(3,280);
  if (RepSpec.flags[0]==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(4022),false);
    OutString(2,0,USetStr(4023),false);
    OutString(3,0,USetStr(4024),false);
    EndFormat;
    StartFormat(15);
    OutString(2,0,USetStr(4025),false);
    EndFormat;
  end;
  if (RepSpec.flags[0]==1) then begin
    StartFormat(15);
    OutString(0,0,USetStr(4022),false);
    OutString(2,0,USetStr(4026),false);
    OutString(1,0,USetStr(4027),true);
    EndFormat;
  end;
  if (RepSpec.flags[1]==1) then begin
    VEr.Name = fromsup;
    VEr.Code = "";
    mykey = "Name";
    keys = 2;
  end else begin
    VEr.Code = fromsup;
    mykey = "Code";
    keys = 1;
  end;
  Gray_Divider(0,1);
  TrHs = true;
  while (LoopKey(mykey,VEr,keys,TrHs)) begin
    testf = true;
    if (TrHs) then begin
       if (nonblank(RepSpec.f2))  then begin 
         if(RepSpec.f2<>VEr.VECat) then begin
           testf=false;
         end;
       end;
     end;
     if (TrHs) then begin
       if (nonblank(RepSpec.f4)) then begin
         if (SetInSet2(RepSpec.f4,VEr.Classification)==false) then begin
           testf = false;
         end;
       end;
       if (nonblank(RepSpec.f5)) then begin
         if (testf) then begin
           testf = false;
           ClassTypef(RepSpec.f5,VEr.Classification,testf);
         end;
       end;
     end;
     if (TrHs) then begin
       if (nonblank(tosup))  then begin 
         if (RepSpec.flags[1]==1) then begin
           if(VEr.Code>tosup) then begin
             testf=false;
           end;
           if(VEr.Code<fromsup) then begin
             testf=false;
           end;
         end else begin
           if (nonblank(tosup))  then begin 
             if(VEr.Code>tosup) then begin
               TrHs=false;
             end;
           end;
         end;  
       end;
     end;
     if (VEr.VEType==0) then begin
       testf = false;
     end;
     if (TrHs==false) then begin
       testf = false;
     end;  
     if (testf) then begin
       vecnt = vecnt + 1;
       if (RepSpec.flags[0]==0) then begin
          StartFormat(15);
          OutString(0,"DblCUVc",VEr.Code,false);
          OutString(2,0,VEr.Name,false);
          OutString(3,0,VEr.Person,false);
          EndFormat;
          StartFormat(15);
          OutString(2,0,VEr.InvAddr0,false);
          if nonblank(VEr.Phone) then begin
            tstr = USetStr(4028);
            tstr = tstr & VEr.Phone;
            OutString(3,0,tstr,false);
          end;
          EndFormat;
          StartFormat(15);
          OutString(2,0,VEr.InvAddr1,false);
          if nonblank(VEr.Fax) then begin
            tstr = USetStr(4029);
            tstr = tstr & VEr.Fax;
            OutString(3,0,tstr,false);
          end;
          EndFormat;
          tstr = "";
          if nonblank(VEr.eMail) then begin
            tstr = USetStr(9566) & ": ";
            tstr = tstr & VEr.eMail;
          end;          
          if nonblank(VEr.InvAddr2) then begin
            StartFormat(15);
            OutString(2,0,VEr.InvAddr2,false);
            if (nonblank(tstr)) then begin
              OutString(3,0,tstr,false);
            end;  
            EndFormat;
          end else begin
            if (nonblank(tstr)) then begin
              StartFormat(15);
              OutString(3,0,tstr,false);
              EndFormat;
            end;  
          end;        
          if (nonblank(VEr.VECat) or nonblank(VEr.SearchKey)) then begin
            StartFormat(15);
            if (nonblank(VEr.VECat)) then begin
              tstr = USetStr(4037);
              tstr = tstr & VEr.VECat;
              OutString(2,0,tstr,false);
            end;
            if (nonblank(VEr.SearchKey)) then begin
              tstr = USetStr(4038);
              tstr = tstr & VEr.SearchKey;
              OutString(3,0,tstr,false);
            end;
            EndFormat;
          end;
          if (nonblank(VEr.VEPayDeal) or nonblank(VEr.VECustID)) then begin
            StartFormat(15);
            if (nonblank(VEr.VEPayDeal)) then begin
              tstr = USetStr(4030);
              tstr = tstr & VEr.VEPayDeal;
              OutString(2,0,tstr,false);
            end;
            if (nonblank(VEr.VECustID)) then begin
              tstr = USetStr(4031);
              tstr = tstr & VEr.VECustID;
              OutString(3,0,tstr,false);
            end;
            EndFormat;
          end;
          if (nonblank(VEr.AccAP) or nonblank(VEr.AccCost)) then begin
            StartFormat(15);
            if (nonblank(VEr.AccAP)) then begin
              tstr = USetStr(4035);
              tstr = tstr & VEr.AccAP;
              OutString(2,0,tstr,false);
            end;
            if (nonblank(VEr.AccCost)) then begin
              tstr = USetStr(4036);
              tstr = tstr & VEr.AccCost;
              OutString(3,0,tstr,false);
            end;
            EndFormat;
          end;
          if (nonblank(VEr.BankAccount) or nonblank(VEr.Bank)) then begin
            StartFormat(15);
            if (nonblank(VEr.BankAccount)) then begin
              tstr = USetStr(4103);
              tstr = tstr &": " & VEr.BankAccount;
              OutString(2,0,tstr,false);
            end;
            if (nonblank(VEr.Bank)) then begin
              tstr = USetStr(4033);
              tstr = tstr & VEr.Bank;
              OutString(3,0,tstr,false);
            end;
            EndFormat;
          end;
          if (nonblank(VEr.AccOperator)) or (nonblank(VEr.IBANCode)) then begin
            StartFormat(15);
            if (nonblank(VEr.AccOperator)) then begin
              tstr = USetStr(4032);
              tstr = tstr & VEr.AccOperator;
              OutString(2,0,tstr,false);
            end;
            if (nonblank(VEr.IBANCode)) then begin
              tstr = USetStr(4040);
              tstr = tstr & VEr.IBANCode;
              OutString(3,0,tstr,false);
            end;
            EndFormat;
          end;
          if (nonblank(VEr.Comment)) then begin
            StartFormat(15);
            OutString(2,0,VEr.Comment,false);
            EndFormat;
          end;
          if (nonblank(VEr.VATNr) or nonblank(VEr.WithPayMode)) then begin
            StartFormat(15);
            if (nonblank(VEr.VATNr)) then begin
              OutString(2,0,VEr.VATNr,false);
            end;
            if (nonblank(VEr.WithPayMode)) then begin
              OutString(3,0,USetStr(8936) & ": " & VEr.WithPayMode,false);
            end;
            EndFormat;
          end;
          if (nonblank(VEr.VEWarnText1)) then begin
            StartFormat(15);
            tstr = USetStr(4034);
            tstr = tstr & VEr.VEWarnText1;
            OutString(2,0,tstr,false);
            EndFormat;
          end;
          if (nonblank(VEr.Classification)) then begin          
            StartFormat(15);
            tstr = USetStr(7112);
            tstr = tstr & ": " & VEr.Classification;
            if (WrapAndPrint(2,tstr,85)) then begin
              EndFormat;
            end;
          end;
          Gray_Divider(0,1);
      end;
      if (RepSpec.flags[0]==1) then begin
          StartFormat(15);
          tstr = "";
          OutString(0,"DblCUVc",VEr.Code,false);
          tstr =VEr.Name & tstr & ", " & VEr.Person;
          OutString(2,0,tstr,false);
          OutString(1,0,VEr.Phone,true);
          EndFormat;
      end;
    end;
  end;
  StartFormat(10);
  EndFormat;
  StartFormat(15);
  tstr = "" & vecnt;
  OutString(0,0,tstr,false);
  EndFormat;
  EndJob;
  return;
end;


