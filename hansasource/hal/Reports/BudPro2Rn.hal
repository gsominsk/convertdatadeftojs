external procedure HTArtGroup(string, var string);
external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean ItemInItemGroupOrClass(string,string,string);
external procedure HTItem(string,var string);
external procedure HT2Per(Date, Date , var string);

function Boolean IsAsBudgetedRow(record TBBUVc TBBUr,row TBBUVc TBBUrw)
BEGIN
  Boolean res;
  
  if (TBBUrw.BudType==1) then begin
    goto LIsAsBudgetedRow;
  end;
  if ((TBBUr.BudTime==1) or (TBBUr.BudOther==1) or (TBBUr.BudMaterial==1) or (TBBUr.BudStocked==1)) then begin
    res = true;
    goto LIsAsBudgetedRow;
  end;
  if (TBBUrw.BudType==2) then begin
    res = true;
    goto LIsAsBudgetedRow;
  end;
LIsAsBudgetedRow:;  
  IsAsBudgetedRow = res;
  RETURN;
END;

function Boolean IsFixedPriceBudget(record TBBUVc TBBUr,Integer itemtype,string artcode)
begin
  Boolean res;
  row TBBUVc TBBUrw;
  Integer rwcnt,i;
  Boolean testf,itemfound;

  rwcnt = MatRowCnt(TBBUr);
  itemfound = false;
  for (i=0;i<rwcnt;i=i+1) begin
    testf = false;
    MatRowGet(TBBUr,i,TBBUrw);
    if (nonblank(artcode)) then begin
      if (TBBUrw.ArtCode!=artcode) then begin
        goto LIsFixedPriceBudget_SKIPROW;
      end else begin
        itemfound = true;  
      end;
    end;
    switch (itemtype) begin
      case 0://Purchase
        if ((TBBUr.BudOther==1) and (TBBUrw.BudType==0)) then begin testf = true; end;
      case 1://Stocked
        if ((TBBUr.BudStocked==1) and (TBBUrw.BudType==0)) then begin testf = true; end;
      case 3://Service
        if ((TBBUr.BudTime==1) and (TBBUrw.BudType==0)) then begin testf = true; end;
      case 5://Material
        if ((TBBUr.BudMaterial==1) and (TBBUrw.BudType==0)) then begin testf = true; end;
    end;    
    if (TBBUrw.BudType==2) then begin testf = true; end;
    if (testf) then begin
      res = true;
    end;
LIsFixedPriceBudget_SKIPROW:;    
  end;
  if (!itemfound) then begin
    switch (itemtype) begin
      case 0://Purchase
        if (TBBUr.BudOther==1) then begin res = true; end;
      case 1://Stocked
        if (TBBUr.BudStocked==1) then begin res = true; end;
      case 3://Service
        if (TBBUr.BudTime==1) then begin res = true; end;
      case 5://Material
        if (TBBUr.BudMaterial==1) then begin res = true; end;
    end;    
  end;
  IsFixedPriceBudget = res;
  return;
end;

procedure FindProTrans(record RcVc RepSpec, string prcode,record TBBUVc TBUr,var val cost, var val toinv)
begin
  record TBIVVc TBr;
  boolean TrHs, testf;
  
  TrHs = true;
  TBr.PRCode = prcode;
  while (LoopMain(TBr,1,TrHs)) begin
    if (TrHs) then begin
      if (TBr.PRCode <> prcode) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.f4)) then begin
        if (TBr.ArtCode <> RepSpec.f4) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        testf = ItemInItemGroupOrClass(TBr.ArtCode,RepSpec.f5,RepSpec.f6);
      end;
      if (RepSpec.flags[3]<>0) then begin
        if (DateInRange(TBr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
          testf = false;
        end;
      end;
      if (RepSpec.flags[1]==0 and TBr.Invoice==-1) then begin
        testf = false;
      end;
      if (RepSpec.flags[2]==0 and TBr.Invoice!=-1) then begin
        testf = false;
      end;
//      if (IsFixedPriceBudget(TBUr,TBr.ItemType,TBr.ArtCode)) then begin testf = false; end;      
      if (testf) then begin
        if (RepSpec.flags[1] <> 0) then begin
          if (TBr.Invoice==-1) then begin  
            if (RepSpec.flags[5]!=0) then begin
              cost = cost + TBr.Qty;
            end else begin;
              cost = cost + (TBr.CostPrice*TBr.Qty);
            end;
            if (IsFixedPriceBudget(TBUr,TBr.ItemType,TBr.ArtCode)==false) then begin
              if (RepSpec.flags[5]!=0) then begin
                toinv = toinv + TBr.Qty;
              end else begin
                toinv = toinv + TBr.Sum;
              end;
            end;
          end;
        end;
        if (RepSpec.flags[2] <> 0) then begin
          if (TBr.Invoice<>-1) then begin
            if (RepSpec.flags[5]!=0) then begin
              cost = cost + TBr.Qty;
            end else begin;
              cost = cost + (TBr.CostPrice*TBr.Qty);
            end;
            if (IsFixedPriceBudget(TBUr,TBr.ItemType,TBr.ArtCode)==false) then begin
              if (RepSpec.flags[5]!=0) then begin
                toinv = toinv - TBr.Qty;
              end else begin
                toinv = toinv - TBr.Sum;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure FindProBudget(record RcVc RepSpec,string prcode,record TBBUVc TBUr,var val budg,var val budgp,var val toinv)
begin
  row TBBUVc TBUrw;
  boolean testf,testf2;
  integer rwcnt,i;
  
  TBUr.PRCode = prcode;
  if (ReadFirstMain(TBUr,1,true)) then begin
    if (RepSpec.flags[3] == 0) then begin
      if (blank(RepSpec.f4) and blank(RepSpec.f5) and blank(RepSpec.f6)) then begin
        budg = TBUr.TotSum;
      end;   
      rwcnt = MatRowCnt(TBUr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(TBUr,i,TBUrw);
        testf = true;
        if (RepSpec.flags[1]==0 and TBUrw.Invoiced==-1) then begin
          testf = false;
        end;
        if (RepSpec.flags[2]==0 and TBUrw.Invoiced!=-1) then begin
          testf = false;
        end;
        if (testf) then begin
          if (nonblank(RepSpec.f4) or nonblank(RepSpec.f5) or nonblank(RepSpec.f6)) then begin
            testf2 = true;
            if (nonblank(RepSpec.f4)) then begin 
              testf2 = (TBUrw.ArtCode == RepSpec.f4);
            end; 
            if (testf2) then begin
              testf2 = ItemInItemGroupOrClass(TBUrw.ArtCode,RepSpec.f5,RepSpec.f6);
            end;
            if (testf2) then begin
              budgp = budgp + TBUrw.GP;
              if (RepSpec.flags[5]!=0) then begin
                budg  = budg + TBUrw.Qty;            
              end else begin
                budg  = budg + TBUrw.Sum;            
              end;
              if (RepSpec.flags[1]!=0) then begin
                if (TBUrw.Invoiced==-1) then begin  
                  if (IsAsBudgetedRow(TBUr,TBUrw)) then begin
                    if (RepSpec.flags[5]!=0) then begin
                      toinv = toinv + TBUrw.Qty;
                    end else begin
                      toinv = toinv + TBUrw.Sum;
                    end;
                  end;
                end;
              end;
              if (RepSpec.flags[2]!=0) then begin
                if (TBUrw.Invoiced<>-1) then begin
                  if (IsAsBudgetedRow(TBUr,TBUrw)) then begin
                    if (RepSpec.flags[5]!=0) then begin
                      toinv = toinv + TBUrw.Qty;
                    end else begin
                      toinv = toinv + TBUrw.Sum;
                    end;
                  end;
                end;
              end;            
            end else begin
              budgp = budgp + TBUrw.GP;
              if (RepSpec.flags[1]!=0) then begin
                if (TBUrw.Invoiced==-1) then begin  
                  if (IsAsBudgetedRow(TBUr,TBUrw)) then begin
                    if (RepSpec.flags[5]!=0) then begin
                      toinv = toinv + TBUrw.Qty;
                    end else begin
                      toinv = toinv + TBUrw.Sum;
                    end;
                  end;
                end;
              end;
              if (RepSpec.flags[2]!=0) then begin
                if (TBUrw.Invoiced<>-1) then begin
                  if (IsAsBudgetedRow(TBUr,TBUrw)) then begin
                    if (RepSpec.flags[5]!=0) then begin
                      toinv = toinv + TBUrw.Qty;
                    end else begin
                      toinv = toinv + TBUrw.Sum;
                    end;
                  end;
                end;
              end;            
            end;
          end;
        end;
      end;
    end;
    if (RepSpec.flags[3] <> 0) then begin
      rwcnt = MatRowCnt(TBUr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(TBUr,i,TBUrw);
        testf = true;
        if (nonblank(TBUrw.InvAfter)) then begin
          if (DateInRange(TBUrw.InvAfter,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
            testf = false;
          end;
        end;
        if (RepSpec.flags[1]==0 and TBUrw.Invoiced==-1) then begin
          testf = false;
        end;
        if (RepSpec.flags[2]==0 and TBUrw.Invoiced!=-1) then begin
          testf = false;
        end;
        if (testf) then begin
          if (nonblank(RepSpec.f4) or nonblank(RepSpec.f5) or nonblank(RepSpec.f6)) then begin
            testf2 = true;
            if (nonblank(RepSpec.f4)) then begin 
              testf2 = (TBUrw.ArtCode == RepSpec.f4);
            end; 
            if (testf2) then begin
              testf2 = ItemInItemGroupOrClass(TBUrw.ArtCode,RepSpec.f5,RepSpec.f6);
            end;
            if (testf2) then begin
              budgp = budgp + TBUrw.GP;
              if (RepSpec.flags[5]!=0) then begin
                budg  = budg + TBUrw.Qty;
              end else begin
                budg  = budg + TBUrw.Sum;
              end;
              if (RepSpec.flags[1]!=0) then begin
                if (TBUrw.Invoiced==-1) then begin  
                  if (IsAsBudgetedRow(TBUr,TBUrw)) then begin
                    if (RepSpec.flags[5]!=0) then begin
                      toinv = toinv + TBUrw.Qty;
                    end else begin
                      toinv = toinv + TBUrw.Sum;
                    end;
                  end;
                end;
              end;
              if (RepSpec.flags[2]!=0) then begin
                if (TBUrw.Invoiced<>-1) then begin
                  if (IsAsBudgetedRow(TBUr,TBUrw)) then begin
                    if (RepSpec.flags[5]!=0) then begin
                      toinv = toinv + TBUrw.Qty;
                    end else begin
                      toinv = toinv + TBUrw.Sum;
                    end;
                  end;
                end;
              end;                          
            end;            
          end else begin
            if (RepSpec.flags[5]!=0) then begin
              budg  = budg + TBUrw.Qty;
            end else begin
              budg  = budg + TBUrw.Sum;
            end;
            budgp = budgp + TBUrw.GP;
            if (RepSpec.flags[1]!=0) then begin
              if (TBUrw.Invoiced==-1) then begin  
                if (IsAsBudgetedRow(TBUr,TBUrw)) then begin
                  if (RepSpec.flags[5]!=0) then begin
                    toinv = toinv + TBUrw.Qty;
                  end else begin
                    toinv = toinv + TBUrw.Sum;
                  end;
                end;
              end;
            end;
            if (RepSpec.flags[2]!=0) then begin
              if (TBUrw.Invoiced<>-1) then begin
                if (IsAsBudgetedRow(TBUr,TBUrw)) then begin
                  if (RepSpec.flags[5]!=0) then begin
                    toinv = toinv + TBUrw.Qty;
                  end else begin
                    toinv = toinv + TBUrw.Sum;
                  end;
                end;
              end;
            end;                        
          end; 
        end;     
      end;
    end;
  end;
  return;
end;


procedure FindOverview(record RcVc RepSpec, record PRVc PRr, var val tbudg, var val tbudgp,
      var val tcost, var val ttoinv)
begin
  val cost, toinv,diff;
  val budg, budgp;
  record TBBUVc TBUr;

  FindProBudget(RepSpec,PRr.Code,TBUr,budg,budgp,toinv);
  FindProTrans(RepSpec,PRr.Code,TBUr,cost,toinv);

  StartFormat(15);
  OutString(0,"DblPRCode",PRr.Code,false);
  OutString(70,0,PRr.Name,false);
  OutVal(2,0,toinv,M4Val,true);
  if (RepSpec.flags[4]!=0) then begin
    if (RepSpec.flags[5]!=0) then begin
      OutVal(350,0,cost,M4Val,true);
    end else begin
      OutVal(285,0,cost,M4Val,true);
    end;
    diff = toinv - cost;
  end else begin
    diff = toinv - budg;
  end;
  if (RepSpec.flags[4]!=0) then begin
    if (RepSpec.flags[5]!=0) then begin
      OutVal(415,0,diff,M4Val,true);
      OutVal(1,0,budg,M4Val,true);
    end else begin
      OutVal(350,0,diff,M4Val,true);
      OutVal(415,0,budg,M4Val,true);
      OutVal(1,0,budgp,M4Val,true);
    end;
  end else begin
    OutVal(420,0,budg,M4Val,true);
    OutVal(1,0,diff,M4Val,true);
  end;
  EndFormat;

  tbudg = tbudg + budg;
  tbudgp = tbudgp + budgp;
  tcost = tcost + cost;
  ttoinv = ttoinv + toinv;
return;
end;

procedure FindTransactions(record RcVc RepSpec,string prcode,record TBBUBc TBUr,string itemcode,
  var val cost,var val toinv)
begin
  record TBIVVc TBr;
  boolean TrHs, testf;
  
  TrHs = true;
  TBr.PRCode = prcode;
  TBr.ArtCode = itemcode;
  while (LoopKey("PRCode",TBr,2,TrHs)) begin
    if (TrHs) then begin
      if (TBr.ArtCode <> itemcode) then begin
        TrHs = false;
      end;
      if (TBr.PRCode <> prcode) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      testf = true;
      if (RepSpec.flags[3] <> 0) then begin
        if (DateInRange(TBr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
          testf = false;
        end;
      end;
      if (RepSpec.flags[1]==0 and TBr.Invoice==-1) then begin
        testf = false;
      end;
      if (RepSpec.flags[2]==0 and TBr.Invoice!=-1) then begin
        testf = false;
      end;
      if (testf) then begin
        if (RepSpec.flags[1] <> 0) then begin
          if (TBr.Invoice==-1) then begin
            if (RepSpec.flags[5]!=0) then begin
              cost = cost + TBr.Qty;
            end else begin;
              cost = cost + (TBr.CostPrice*TBr.Qty);
            end;
            if (IsFixedPriceBudget(TBUr,TBr.ItemType,TBr.ArtCode)==false) then begin
              if (RepSpec.flags[5]!=0) then begin
                toinv = toinv + TBr.Qty;
              end else begin
                toinv = toinv + TBr.Sum;
              end;
            end;
          end;
        end;
        if (RepSpec.flags[2] <> 0) then begin
          if (TBr.Invoice<>-1) then begin
            if (RepSpec.flags[5]!=0) then begin
              cost = cost + TBr.Qty;
            end else begin;
              cost = cost + (TBr.CostPrice*TBr.Qty);
            end;
            if (IsFixedPriceBudget(TBUr,TBr.ItemType,TBr.ArtCode)==false) then begin
              if (RepSpec.flags[5]!=0) then begin
                toinv = toinv + TBr.Qty;
              end else begin
                toinv = toinv + TBr.Sum;
              end;
            end;
          end;
        end;
      end;
    end;
  end; //while
  return;
end;

procedure FindBudget(record RcVc RepSpec,string prcode,string itemcode,var val budg,var val budgp,var val toinv)
begin
  record TBBUVc TBUr;
  row TBBUVc TBUrw;
  boolean testf;
  integer rwcnt,i;
  
  TBUr.PRCode = prcode;
  if (ReadFirstMain(TBUr,1,true)) then begin
    rwcnt = MatRowCnt(TBUr);
    for (i=0;i<rwcnt;i=i+1) begin
      testf = true;
      MatRowGet(TBUr,i,TBUrw);
       if (nonblank(TBUrw.InvAfter)) then begin
         if (DateInRange(TBUrw.InvAfter,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
           testf = false;
         end;
       end;
       if (RepSpec.flags[1]==0 and TBUrw.Invoiced==-1) then begin
        testf = false;
      end;
      if (RepSpec.flags[2]==0 and TBUrw.Invoiced!=-1) then begin
        testf = false;
      end;
       if (testf) then begin
         if (TBUrw.ArtCode==itemcode) then begin
           budgp = budgp + TBUrw.GP;
           if (RepSpec.flags[5]!=0) then begin
             budg  = budg + TBUrw.Qty;
           end else begin
             budg  = budg + TBUrw.Sum;
           end;
           if (RepSpec.flags[1]!=0) then begin
             if (TBUrw.Invoiced==-1) then begin  
               if (IsAsBudgetedRow(TBUr,TBUrw)) then begin
                 if (RepSpec.flags[5]!=0) then begin
                   toinv = toinv + TBUrw.Qty;
	               end else begin
                   toinv = toinv + TBUrw.Sum;
	               end;
               end;
             end;
           end;
           if (RepSpec.flags[2]!=0) then begin
             if (TBUrw.Invoiced<>-1) then begin
               if (IsAsBudgetedRow(TBUr,TBUrw)) then begin
                 if (RepSpec.flags[5]!=0) then begin
                   toinv = toinv + TBUrw.Qty;
	               end else begin
                   toinv = toinv + TBUrw.Sum;
	               end;
               end;
             end;
           end;                       
         end;
       end;
     end;
   end;
  return;
end;

procedure FindDetailed(record RcVc RepSpec,record PRVc PRr,var val tbudg,var val tbudgp,
   var val tcost,var val ttoinv)
begin
  record INVc INr;
  boolean TrHs, testf;
  val cost, toinv,diff,tcostpr, ttoinvpr;
  val budg, budgp, tbudgppr, tbudgpr;
  record TBBUVc TBUr;
  
  TBUr.PRCode = PRr.Code;
  if (ReadFirstMain(TBUr,1,true)) then begin end;
  TrHs = true;
  INr.Code = RepSpec.f4;
  while (LoopMain(INr,1,TrHs)) begin
    cost = 0;
    toinv = 0;
    budg = 0;
    budgp = 0;
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.f4)) then begin
         if (INr.Code <> RepSpec.f4) then begin
           testf = false;  
           TrHs = false;
         end;
      end;
    end;
    if (testf) then begin
      testf = ItemInItemGroupOrClass(INr.Code,RepSpec.f5,RepSpec.f6);
    end;     
    if (testf) then begin 
      FindTransactions(RepSpec,PRr.Code,TBUr,INr.Code, cost, toinv);
      FindBudget(RepSpec,PRr.Code,INr.Code, budg, budgp,toinv);
      tcost = tcost + cost;
      ttoinv = ttoinv + toinv;
      tcostpr = tcostpr + cost;
      ttoinvpr = ttoinvpr + toinv;
      tbudgppr = tbudgppr + budgp;
      tbudgpr = tbudgpr + budg;
      tbudg = tbudg + budg;
      tbudgp = tbudgp + budgp;
      if (toinv <> 0) or (cost <> 0) or (budg <> 0) or (budgp <> 0) then begin
        StartFormat(15);
        OutString(15,0,INr.Code,false);
        OutString(70,0,INr.Name,false);
        OutVal(2,0,toinv,M4Val,true);
        if (RepSpec.flags[4]!=0) then begin
          diff = toinv - cost;
          if (RepSpec.flags[5]!=0) then begin
            OutVal(350,0,cost,M4Val,true);
            OutVal(415,0,diff,M4Val,true);
            OutVal(1,0,budg,M4Val,true);
          end else begin
            OutVal(285,0,cost,M4Val,true);
            OutVal(350,0,diff,M4Val,true);
            OutVal(415,0,budg,M4Val,true);
            OutVal(1,0,budgp,M4Val,true);
          end;
        end else begin
          diff = toinv - budg;
          OutVal(420,0,budg,M4Val,true);
          OutVal(1,0,diff,M4Val,true);
        end;
        EndFormat;
      end;
    end;
  end; //while
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(6785),false);
  OutVal(2,0,ttoinvpr,M4Val,true);
  if (RepSpec.flags[4]!=0) then begin
    diff = ttoinvpr - tcostpr;
    if (RepSpec.flags[5]!=0) then begin
      OutVal(350,0,tcostpr,M4Val,true);
      OutVal(415,0,diff,M4Val,true);
      OutVal(1,0,tbudgpr,M4Val,true);
    end else begin
      OutVal(285,0,tcostpr,M4Val,true);
      OutVal(350,0,diff,M4Val,true);
      OutVal(415,0,tbudgpr,M4Val,true);
      OutVal(1,0,tbudgppr,M4Val,true);
    end;
  end else begin
    diff = ttoinvpr - tbudgpr;
    OutVal(420,0,tbudgpr,M4Val,true);
    OutVal(1,0,diff,M4Val,true);
  end;
  EndFormat;
  StartFormat(15);
  EndFormat;
 return;
end;


global
procedure BudPFoll2Rn(record RcVc RepSpec)
begin
  record PRVc PRr;
  boolean TrHs, testf;
  string 20 fpro,lpro;
  integer rw;
  string 255 tstr;
  val tbudg, tbudgp;
  val tcost, ttoinv,diff;
  
  fpro = FirstInRange(RepSpec.f1,20);
  lpro = LastInRange(RepSpec.f1,20);
  
  StartReportJob(USetStr(8980));
  rw = 1;
  if ((blank(fpro)) and (blank(lpro))) then begin
    tstr = USetStr(3564);
  end else begin
    tstr = USetStr(1829);
    tstr = tstr & fpro;
    if (fpro<>lpro) then begin
      tstr = tstr & " : " & lpro;
    end;
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
  if (RepSpec.ArtMode==0) then begin
    tstr = USetStr(1159);
  end;
  if (RepSpec.ArtMode==1) then begin
    tstr = USetStr(4888);
  end; 
  if (RepSpec.ArtMode==2) then begin
    tstr = USetStr(3541);
  end;    
  Header(rw,tstr,1);    
  rw = rw + 1;
  if (RepSpec.flags[4]!=0) then begin
    tstr = USetStr(8982);
    Header(rw,tstr,0)
  end;
  if (RepSpec.flags[1] <> 0) and (RepSpec.flags[2] == 0)  then begin
    tstr = USetStr(11723);
    Header(rw,tstr,1)
    rw = rw + 1;
  end;
  if (RepSpec.flags[2] <> 0) and (RepSpec.flags[1] == 0)  then begin
    tstr = USetStr(11722);
    Header(rw,tstr,1)
    rw = rw + 1;
  end;
  if (RepSpec.flags[2] <> 0) and (RepSpec.flags[1] <> 0)  then begin
    tstr = USetStr(3009);
    Header(rw,tstr,1)
    rw = rw + 1;
  end;
  if (RepSpec.flags[5]!=0) then begin
    tstr = USetStr(8983);
    Header(rw,tstr,0)
  end;
 if (nonblank(RepSpec.f4)) then begin
    HTItem(RepSpec.f4,tstr);  
    tstr = tstr & RepSpec.f4;
    Header(rw,tstr,1);  
    rw = rw + 1;  
  end;    
  if (HasItemGroups) then begin
    HTArtGroup(RepSpec.f5,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasItemClassification) then begin
    HTItemClass(RepSpec.f6,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (RepSpec.flags[3] <> 0) then begin
    HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
    tstr = USetStr(11721); 
    Header(rw,tstr,1);   
  end;
  EndHeader;
  if (RepSpec.flags[4]!=0) then begin
    if (RepSpec.flags[4]!=0) then begin
      SetRepCol(2,285);
    end else begin
      SetRepCol(2,220);
    end;
  end else begin
    SetRepCol(2,340);
  end;

  StartFormat(15);
    OutString(0,0,USetStr(3550),false);  
    OutString(70,0,USetStr(8885),false);    
    if (RepSpec.flags[1]!=0) and (RepSpec.flags[2]!=0)  then begin
      OutString(2,0,USetStr(11724),true);
    end;
    if (RepSpec.flags[1]==0) and (RepSpec.flags[2]!=0)  then begin
      OutString(2,0,USetStr(11726),true);
    end;
    if (RepSpec.flags[1]!=0) and (RepSpec.flags[2]==0)  then begin
      OutString(2,0,USetStr(11725),true);
    end;
    if (RepSpec.flags[4]!=0) then begin
      if (RepSpec.flags[5]!=0) then begin
        OutString(350,0,USetStr(6826),true);
        OutString(415,0,USetStr(8892),true);
        OutString(480,0,USetStr(4825),true);
      end else begin
        OutString(285,0,USetStr(6826),true);
        OutString(350,0,USetStr(8892),true);
        OutString(415,0,USetStr(4825),true);
        OutString(480,0,USetStr(6824) & " " & USetStr(6787),true);
      end;
    end else begin
      OutString(420,0,USetStr(4825),true);        
      OutString(1,0,USetStr(8892),true);        
    end;
  EndFormat;
  Gray_Divider(0,1);
  TrHs = true;
  PRr.Code = fpro;
  while (LoopMain(PRr,1,TrHs)) begin
    if (nonblank(lpro)) then begin
      if (PRr.Code > lpro) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.f2)) then begin
        if (PRr.PRClass <> RepSpec.f2) then begin
          testf = false;
        end;      
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (PRr.Leader <> RepSpec.f3) then begin
          testf = false;
        end;      
      end;
      if (testf) then begin
        if (RepSpec.ArtMode == 0) then begin
          FindOverview(RepSpec,PRr, tbudg, tbudgp,tcost,ttoinv);
        end;
        if (RepSpec.ArtMode == 1) then begin
          StartFormat(15);
          OutString(0,"DblPRCode",PRr.Code,false);
          OutString(70,0,PRr.Name,false);
          EndFormat;
          FindDetailed(RepSpec,PRr,tbudg, tbudgp,tcost,ttoinv);
        end;
        
      end; //testf
    end; //TrHs
  end; //while
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(3560),false);
  OutVal(2,0,ttoinv,M4Val,true);
  if (RepSpec.flags[4]!=0) then begin
    diff = ttoinv - tcost;
    if (RepSpec.flags[5]!=0) then begin
      OutVal(350,0,tcost,M4Val,true);
      OutVal(415,0,diff,M4Val,true);
      OutVal(1,0,tbudg,M4Val,true);
    end else begin
      OutVal(285,0,tcost,M4Val,true);
      OutVal(350,0,diff,M4Val,true);
      OutVal(415,0,tbudg,M4Val,true);
      OutVal(1,0,tbudgp,M4Val,true);
    end;
  end else begin
    diff = ttoinv - tbudg;
    OutVal(420,0,tbudg,M4Val,true);
    OutVal(1,0,diff,M4Val,true);
  end;
  EndFormat;
  EndJob;
  return;
end;
