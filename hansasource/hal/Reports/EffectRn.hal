external function Boolean HasContactClassification();
external function Boolean HasCategories();
external procedure HTLevCat(string,var string);
external procedure HTCustClass(string,var string);
external function Boolean ContactInGroupClass(string,string,string,string,string,string);
external procedure HT2Per(Date,Date,var string);
external procedure HTArts(string, string, var string);


procedure PrintHeader1(record RcVc RepSpec)
BEGIN
  Integer rw;  
  string 255 tstr;
  
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTArts(RepSpec.f1,RepSpec.f1,tstr);
  Header(rw,tstr,0);
  if (nonblank(RepSpec.FirstAcc)) then begin
    Header(rw,USetStr(11053) & ": " & RepSpec.FirstAcc,1);
    rw = rw + 1;
  end;
  if (HasCategories) then begin
    HTLevCat(RepSpec.f3,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasContactClassification) then begin
    HTCustClass(RepSpec.f2,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (nonblank(RepSpec.AccStr)) then begin
    Header(rw,USetStr(11052) & ": " & RepSpec.AccStr,1);
    rw = rw + 1;
  end;
  RETURN;
END;

procedure PrintHeader2(record RcVc RepSpec)
BEGIN
  switch (RepSpec.ArtMode) begin
    case 0:
      SetRepCol(2,70);
      SetRepCol(3,140);
      SetRepCol(4,210);
      SetRepCol(5,290);
      SetRepCol(6,330);
      SetRepCol(7,370);
      SetRepCol(8,380); 
      SetRepCol(9,440); 
      StartFormat(15);
       OutString(0,0,USetStr(11084),false);
       OutString(2,0,USetStr(11086),false);
       OutString(3,0,USetStr(11083),false);
       OutString(4,0,USetStr(11081),false);
       OutString(5,0,USetStr(11088),true);
       OutString(6,0,USetStr(11089),true);
       OutString(7,0,USetStr(10219),true);
       OutString(8,0,USetStr(11085),false);
       OutString(9,0,USetStr(11087),false);
      EndFormat;  
    case 1:
      SetRepCol(2,100);
      SetRepCol(3,180);
      SetRepCol(4,340);
      SetRepCol(5,400);
      SetRepCol(6,480);
      StartFormat(15);
       OutString(0,0,USetStr(11081),false);
       OutString(2,0,USetStr(11083),false);
       OutString(3,0,USetStr(11082),false);
       OutString(4,0,USetStr(11088),true);
       OutString(5,0,USetStr(11089),true);
       OutString(6,0,USetStr(11069),true);
      EndFormat;  
  end;
  Gray_Divider(0,1);
  RETURN;
END;

procedure PrintArray(Array string aitemcodes,Array string avecodes,Array string amachines,
                     Array val ausedqty,Array val arcvqty,var Integer arrcnt)
BEGIN
  Integer i;

  for (i=0;i<=arrcnt;i=i+1) begin
    StartFormat(15);
     OutString(0,0,aitemcodes[i],false);
     OutString(2,0,avecodes[i],false);
     OutString(3,0,amachines[i],false);
     OutVal(4,0,ausedqty[i],M4UVal,true);
     OutVal(5,0,arcvqty[i],M4UVal,true);
     OutVal(6,0,arcvqty[i]/ausedqty[i],M4UVal,true);
    EndFormat;  
  end;
  RETURN;
END;

procedure AddToArray(record INEffVc INEffr,Array string aitemcodes,Array string avecodes,
                     Array string amachines,Array val ausedqty,Array val arcvqty,var Integer arrcnt)
BEGIN
  Integer i;
  
  for (i=0;i<=arrcnt;i=i+1) begin
    if ((INEffr.ArtCode==aitemcodes[i]) and (INEffr.VECode==avecodes[i]) and (INEffr.AT2UnitCode==amachines[i])) then begin
      ausedqty[i] = ausedqty[i] + INEffr.UsedQty;
      arcvqty[i] = arcvqty[i] + INEffr.RcvQty;
      goto LAddToArray;
    end;
  end;
  arrcnt = arrcnt + 1;
  avecodes[arrcnt] = INEffr.VECode;
  aitemcodes[arrcnt] = INEffr.ArtCode;
  amachines[arrcnt] = INEffr.AT2UnitCode;
  ausedqty[arrcnt] = INEffr.UsedQty;
  arcvqty[arrcnt] = INEffr.RcvQty;
LAddToArray:;
  RETURN;
END;

global
procedure EffectRn(record RcVc RepSpec)
BEGIN
  Boolean TrHs,testf;
  Integer rwcnt;
  record INEffVc INEffr;//INEffView
  Array string 20 aitemcodes;
  Array string 20 avecodes;
  Array string 30 amachines;
  Array val ausedqty;
  Array val arcvqty;
  Integer arrcnt;
  val totusedqty,totrcvqty;
  
  arrcnt = -1;
  StartReportJob(USetStr(11080));
   PrintHeader1(RepSpec);
  EndHeader;
  PrintHeader2(RepSpec);
  TrHs = true;
  INEffr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",INEffr,1,TrHs)) begin
    if (INEffr.TransDate>RepSpec.sEndDate) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.f1)) then begin
        if (INEffr.ArtCode!=RepSpec.f1) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.FirstAcc)) then begin
        if (INEffr.VECode!=RepSpec.FirstAcc) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        testf = ContactInGroupClass(INEffr.VECode,RepSpec.f3,RepSpec.f2,"SUPP","","");
      end;      
      if (nonblank(RepSpec.AccStr)) then begin
        if (INEffr.AT2UnitCode!=RepSpec.AccStr) then begin
          testf = false;
        end;
      end;
      if (INEffr.EndDate>RepSpec.sEndDate) then begin
        testf = false;
      end;
      if (testf) then begin
        switch (RepSpec.ArtMode) begin
          case 0:
            StartFormat(15);
             OutDateID(0,"DblINEffVcID",INEffr.TransDate,false,INEffr.SerNr);
             OutString(2,0,INEffr.StartTime,false);
             OutString(3,0,INEffr.VECode,false);
             OutString(4,0,INEffr.ArtCode,false);
             OutVal(5,0,INEffr.UsedQty,M4UVal,true);
             OutVal(6,0,INEffr.RcvQty,M4UVal,true);
             OutString(7,0,INEffr.RcvQty/INEffr.UsedQty,true);
             OutString(8,0,INEffr.EndDate,false);
             OutString(9,0,INEffr.EndTime,false);
            EndFormat;
          case 1:
            AddToArray(INEffr,aitemcodes,avecodes,amachines,ausedqty,arcvqty,arrcnt);
        end;
        totusedqty = totusedqty + INEffr.UsedQty;
        totrcvqty = totrcvqty + INEffr.RcvQty;
      end;
    end;
  end;
  switch (RepSpec.ArtMode) begin
    case 0:
      Gray_Divider(0,1);
      StartFormat(15);
       OutVal(5,0,totusedqty,M4UVal,true);
       OutVal(6,0,totrcvqty,M4UVal,true);
       OutVal(7,0,totrcvqty/totusedqty,M4UVal,true);
      EndFormat;
    case 1:
      PrintArray(aitemcodes,avecodes,amachines,ausedqty,arcvqty,arrcnt);
      Gray_Divider(0,1);
      StartFormat(15);
       OutVal(4,0,totusedqty,M4UVal,true);
       OutVal(5,0,totrcvqty,M4UVal,true);
       OutVal(6,0,totrcvqty/totusedqty,M4UVal,true);
      EndFormat;
  end;
  EndJob;  
  RETURN;
END;
