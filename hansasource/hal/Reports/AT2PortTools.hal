external procedure FindFiscalYear(Date,var Date,var Date);
external function roundmode SetRoundModeD(Integer);
external function Integer DateGetIntMonth(Date);
external procedure OneInventoryNrDepreciation(record AT2UnitVc,Integer,Integer,Date,Date,Integer,Integer,Integer,Integer,Integer,
                                              Integer,Integer,
                                              var val,var val,var val,var val,var val,var val,var val,var val,var val,var val,
                                              var val,var val,var val);
external function Boolean AT2GetStartVal(Integer,string,Date,Date,val,var val,var val);
external function Integer GetDprModelDeprMethod(string);
external procedure DeprSegment(Date,Date,Integer,record DprModVc,Date,Date,Date,val,var val,var val,var val,var val,var Integer,val);

global
function Boolean GetLastDprStartVal(Integer Model2,string InventoryNr,val startval,var val portstartval,var val resval)
begin
  record AT2DprVc Dpr;
  Boolean res;
  
  res = false;
  portstartval = blankval;
  Dpr.InventoryNr = InventoryNr;
  if (ReadLastKey("InventoryNr",Dpr,1,true)) then begin
    res = true;
    if (Model2==0) then begin    
      portstartval = Dpr.StartVal;
    end;  
    if (Model2==1) then begin    
      portstartval = Dpr.StartVal2;
    end;  
    resval = Dpr.ResVal;
  end;
  if (blank(portstartval)) then begin
    portstartval = startval;
  end;  
  GetLastDprStartVal = res; 
  return;        
end;

global
function Boolean GetLastOfficialDprStartVal(Integer Model2,string InventoryNr,val startval,var val portstartval,var val resval)
begin
  record AT2DprVc Dpr;
  Boolean res,TrHs;
  
  res = false;
  portstartval = blankval;
  Dpr.InventoryNr = InventoryNr;
  TrHs = true;
  while (LoopBackKey("InventoryNr",Dpr,1,TrHs)) begin
    if (Dpr.InventoryNr!=InventoryNr) then begin TrHs = false; end;
    if (TrHs) then begin
      if (nonblank(Dpr.LegalCode)) then begin
        res = true;
        if (Model2==0) then begin    
           portstartval = Dpr.StartVal;
        end;  
        if (Model2==1) then begin    
          portstartval = Dpr.StartVal2;
        end;  
        resval = Dpr.ResVal;
      end;  
    end;  
  end;
  if (blank(portstartval)) then begin
    portstartval = startval;
  end;  
  
  GetLastOfficialDprStartVal = res; 
  RETURN;        
END;

procedure GetDprData(string InventoryNr,Integer Model2,LongInt sernr,var Date ed,var string nextdmcode,var val nextstartval,var val nextresval,var Boolean stopdprf,Boolean findlastinmonthf)
BEGIN
  record AT2DprVc Dpr;
  record AT2DprVc tmpDpr;
  Boolean TrHs,testf;

  nextresval = blankval;
  Dpr.SerNr = sernr;
  if (ReadFirstMain(Dpr,1,true)) then begin
    if (findlastinmonthf) then begin
      RecordCopy(tmpDpr,Dpr);
      tmpDpr.InventoryNr = InventoryNr;
      TrHs = true;
      while (LoopKey("InventoryNr",tmpDpr,2,TrHs)) begin
        if (tmpDpr.InventoryNr!=InventoryNr) then begin TrHs = false; end;
        if (TrHs) then begin
          testf = true;
          if (tmpDpr.InventoryNr!=InventoryNr) then begin testf = false; end;
          if (testf) then begin
            switch (Model2) begin
              case 0:
                if ((GetMonth(tmpDpr.StartingDate1)!=GetMonth(Dpr.StartingDate1)) or (GetYear(tmpDpr.StartingDate1)!=GetYear(Dpr.StartingDate1))) then begin
                  TrHs = false;
                end;
              case 1:
                if ((GetMonth(tmpDpr.StartingDate2)!=GetMonth(Dpr.StartingDate2)) or (GetYear(tmpDpr.StartingDate2)!=GetYear(Dpr.StartingDate2))) then begin
                  TrHs = false;
                end;
            end;
            if (TrHs) then begin
              RecordCopy(Dpr,tmpDpr);
            end;
          end;
        end;
      end;
    end;
    if (Model2==0) then begin
      ed = Dpr.StartingDate1;
      nextdmcode = Dpr.Model1;
      nextstartval = Dpr.StartVal;
    end;
    if (Model2==1) then begin
      ed = Dpr.StartingDate2;
      nextdmcode = Dpr.Model2;
      nextstartval = Dpr.StartVal2;
    end;  
    nextresval = Dpr.ResVal + Dpr.LandVal;
    stopdprf = Dpr.TerminateDpr!=0;
  end; 
  RETURN;        
END;


procedure GetAT2DprData(Integer Model2,LongInt sernr,var Date nexted,var string nextdmcode,var val nextstartval,var val nextresval,var Boolean stopdprf)
BEGIN
  record AT2DprVc Dpr;
  record AT2DprVc tmpDpr;
  Boolean TrHs,testf;

  Dpr.SerNr = sernr;
  if (ReadFirstMain(Dpr,1,true)) then begin
    if (Model2==0) then begin
      nexted = Dpr.StartingDate1;
      nextdmcode = Dpr.Model1;
      nextstartval = Dpr.StartVal;
    end;
    if (Model2==1) then begin
      nexted = Dpr.StartingDate2;
      nextdmcode = Dpr.Model2;
      nextstartval = Dpr.StartVal2;
    end;  
    nextresval = Dpr.ResVal + Dpr.LandVal;
    stopdprf = Dpr.TerminateDpr!=0;
  end; 
  RETURN;        
END;

procedure GetWrofData(LongInt sernr,Integer rownr,var Date nexted,var val ws,var val wq,var val wdpr)
BEGIN
  record AT2WrofVc Wrofr;
  row AT2WrofVc Wrofrw;
  Integer rwcnt;
  
  wq = blankval;
  ws = blankval;
  wdpr = blankval;
  Wrofr.SerNr = sernr;
  if (ReadFirstMain(Wrofr,1,true)) then begin
    nexted = Wrofr.TransDate;
    rwcnt = MatRowCnt(Wrofr);
    if (rownr<rwcnt) then begin
      MatRowGet(Wrofr,rownr,Wrofrw);
      ws = Wrofrw.SalesVal - Wrofrw.DprVal;
      wq = Wrofrw.Qty;
      wdpr = Wrofrw.DprVal/Wrofrw.Qty;
    end;
  end;  
  RETURN;        
END;  

function Boolean DprYearsPassed(Date sd,Integer years,Date ed)
BEGIN
  Boolean res;
  Date td;
  
  td = sd;
  td.year = td.year + years;
  td = AddDay(td,-1);
  if (ed==td) then begin
    res = true;
  end;
  DprYearsPassed = res;
  RETURN;
END;


function Boolean FindDMYearEndDate(record DprModVc DMr,Integer lComparison,Date purchasedate,Date nexted,Date startdate,Date enddate,Boolean assrevedf,var Date stoploopd)
BEGIN
  Boolean res;
  Integer i,rwcnt,dpryear;
  row DprModVc DMrw;
  Date ysd,yed;  
  val DeprPerc;
  Date fsd,fed;
/* 
  if (HasLocalization("CZE"))  then begin
    FindFiscalYear(purchasedate,fsd,fed);
    ysd = fsd;
  end else begin
*/  
    ysd = purchasedate;
    switch (lComparison) begin
      case 0: ysd.day = 1;
      case 1:
      case 2: ysd.day = 1;
    end;
//  end;
  rwcnt = MatRowCnt(DMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(DMr,i,DMrw);
    yed = AddMonth(ysd,12);
    yed = AddDay(yed,-1);
    if (DateInRange(nexted,ysd,yed)) then begin
      if (nonblank(DMrw.YearPerc)) then begin
        DeprPerc = DMrw.YearPerc;
      end else begin
        dpryear = (ysd.year-purchasedate.year);
        if (assrevedf) then begin
          if (DMrw.YearCoefifRev>0) then begin       
            if (DMrw.YearCoef-dpryear!=0) then begin
              DeprPerc = (100.00/(DMrw.YearCoefifRev-dpryear));
            end;
            if (dpryear!=0) then begin
              DeprPerc = DeprPerc*2;
            end;
          end;
        end;
        if (blank(DeprPerc)) then begin
          if (DMrw.YearCoef>0) then begin       
            if (dpryear==0) then begin
              DeprPerc = 100.00/DMrw.YearCoef;
            end else begin
              if (DMrw.YearCoef-dpryear!=0) then begin
                DeprPerc = 2*(100.00/(DMrw.YearCoef-dpryear));
              end;
            end;
          end;
        end;
      end;
      if (nonblank(DeprPerc)) then begin
        DMr.DeprPerc = DeprPerc;
      end;
      stoploopd = AddMonth(purchasedate,12*DMrw.LifecycleYear);
      stoploopd = AddDay(stoploopd,-1);
      stoploopd.day = DaysInMonth(stoploopd.year,stoploopd.month);
      if (stoploopd>enddate) then begin stoploopd = enddate; end;
/*      
      if (HasLocalization("CZE"))  then begin
        if (purchasedate.month>fsd.month) then begin
          stoploopd.month = fed.month;
          stoploopd.day = fed.day;
        end;
      end;
*/      
      if (stoploopd>yed) then begin stoploopd = yed; end;
      if (stoploopd>enddate) then begin stoploopd = enddate; end;
      res = true;
      goto LFindDMYearEndDate;
    end;
    ysd = AddDay(yed,1);
  end;
LFindDMYearEndDate:;  
//StopAlert("stoploopd " & stoploopd);  
  FindDMYearEndDate = res;
  return;        
end;  

global
function Boolean GetNextData_Asset(Integer Model2,record AT2UnitVc ATUnitr,record DprModVc DMr,Date startdate,Date enddate,Integer Comparison,Boolean assrevedf,
                                   var Date nexted,var string nextdmcode,var val nextstartval,var val nextresval,var val nextinitdeprval,
                                   var Date wrofd,var val wrofqty,var val wrofdpr,var Boolean stopdprf)
begin
  record InvrsVc Invr;
  Boolean res;  
  Boolean found,testf;
  Date bd,nextdprd,lastwrofd,lstartdate,startingdate;
  val wrofsum,ws,wq;
  record AT2AccBlock AT2Ab;
  string 100 InventoryNr;
  Integer lComparison;
  
  record AT2WrofVc AT2Wrofr;
  record AT2DprVc AT2Dprr;
  string 255 keystr;
  Date dprdate,wrofdate;
  Date endwrofdate;
  Boolean wrof;
  val wdpr;
    
  lstartdate = startdate;  
  if (lstartdate>enddate) then begin
    goto LGetNextData_Asset;
  end;
  if (Model2==0) then begin
    startingdate = ATUnitr.StartingDate1;
  end else begin
    startingdate = ATUnitr.StartingDate2;
  end;
//StopAlert("lstartdate " & lstartdate & " enddate " & enddate);
  switch (Comparison) begin
    case 2: lComparison = DMr.DeprPeriod;
    otherwise lComparison = Comparison;
  end;
  
//StopAlert("nexted " & nexted & " enddate " & enddate);
  nexted = "";
  InventoryNr = ATUnitr.InventoryNr;  
  if (MatRowCnt(DMr)>0) then begin
    nexted = lstartdate;
    res = FindDMYearEndDate(DMr,lComparison,startingdate,nexted,lstartdate,enddate,assrevedf,nexted);

//StopAlert("nexted " & nexted & " enddate " & enddate);
  end else begin
    nexted = enddate;
  end;
//StopAlert("nexted " & nexted & " enddate " & enddate & " DMr.DeprPerc " & DMr.DeprPerc);
  res = true;
  BlockLoad(AT2Ab);
  nextdmcode = "";
  nextstartval = blankval;
  nextresval = blankval;
  nextinitdeprval = blankval;
  wrofqty = blankval;
  wrofdpr = blankval;
  lastwrofd = wrofd;
  wrofd = bd;

  found = true;
  AT2Dprr.InventoryNr = InventoryNr;
  if (Model2==0) then begin
    keystr = "StartingDate1";
    AT2Dprr.StartingDate1 = lstartdate;
  end else begin
    keystr = "StartingDate2";
    AT2Dprr.StartingDate2 = lstartdate;
  end;
//StopAlert("1.lstartdate " & lstartdate);
  while (LoopKey(keystr,AT2Dprr,2,found)) begin  
    if (AT2Dprr.InventoryNr!=InventoryNr) then begin found = false; end;        
//StopAlert("1.AT2Dprr.StartingDate1 " & AT2Dprr.StartingDate1 & " enddate " & enddate & " " & " lstartdate " & lstartdate);
    if (Model2==0) then begin
      if (AT2Dprr.StartingDate1>enddate) then begin found = false; end;
      if (AT2Dprr.StartingDate1<lstartdate) then begin found = false; end;
    end else begin
      if (AT2Dprr.StartingDate2>enddate) then begin found = false; end;
      if (AT2Dprr.StartingDate2<lstartdate) then begin found = false; end;
    end;
    if (found) then begin
      if (Model2==0) then begin
        dprdate = AT2Dprr.StartingDate1;
      end else begin
        dprdate = AT2Dprr.StartingDate2;
      end;
      if (dprdate>lstartdate) then begin
        switch (lComparison) begin
          case 0:
//StopAlert("1.dprdate " & dprdate & " lComparison " & lComparison & " " & DaysInMonth(dprdate.year,dprdate.month));
            if (dprdate.day==DaysInMonth(dprdate.year,dprdate.month)) then begin
            end else begin
              dprdate.day = DaysInMonth(dprdate.year,dprdate.month);
            end;
            if (dprdate.month!=lstartdate.month) or (dprdate.year!=lstartdate.year) then begin
              found = false;
            end;
         case 1:
            found = false;
          case 2:
            if (dprdate.month==12) and (dprdate.day==31) then begin
              found = false;
            end;
          case 3:
            if (dprdate.day==DaysInMonth(dprdate.year,dprdate.month)) then begin
            end else begin
              dprdate.day = DaysInMonth(dprdate.year,dprdate.month);
            end;
            if (dprdate.month!=lstartdate.month) or (dprdate.year!=lstartdate.year) then begin
              found = false;
            end;
        end;  
        if (Model2==0) then begin
//          nexted = AT2Dprr.StartingDate1;
          nextdmcode = AT2Dprr.Model1;
          nextstartval = AT2Dprr.StartVal;
          if (nonblank(AT2Dprr.StartValLimit)) then begin
            nextstartval = AT2Dprr.StartValLimit;
          end; 
          nextinitdeprval = AT2Dprr.InitDeprVal1;
        end;
        if (Model2==1) then begin
//          nexted = AT2Dprr.StartingDate2;
          nextdmcode = AT2Dprr.Model2;
          nextstartval = AT2Dprr.StartVal2;
          if (nonblank(AT2Dprr.StartVal2Limit)) then begin
            nextstartval = AT2Dprr.StartVal2Limit;
          end; 
          nextinitdeprval = AT2Dprr.InitDeprVal2;
        end;          
        nextresval = AT2Dprr.ResVal + AT2Dprr.LandVal;
        if (blank(AT2Dprr.ResVal)) and (blank(AT2Dprr.LandVal)) then begin
          nextresval = blankval;
        end;
        stopdprf = AT2Dprr.TerminateDpr!=0;
      end;
    end;
  end;
  if (nonblankdate(dprdate)) then begin
    if (dprdate>lstartdate) then begin
      switch (lComparison) begin
        case 0:    
          dprdate = AddMonth(dprdate,-1);      
          dprdate.day = DaysInMonth(dprdate.year,dprdate.month);
        case 1:
          dprdate = AddDay(dprdate,-1);
        case 2:
          dprdate = AddMonth(dprdate,-1);
          dprdate.day = DaysInMonth(dprdate.year,dprdate.month);
      end;
    end else begin
      dprdate = bd;
    end;
  end;

//StopAlert("1.nexted " & nexted & " enddate " & enddate & " res " & res & " nextdmcode " & nextdmcode);

//StopAlert("022. lstartdate " & lstartdate & " lastwrofd " & lastwrofd);

  found = true;
  Invr.InventoryNr = InventoryNr;
  Invr.TransDate = lstartdate;
  while (LoopKey("MainKey",Invr,2,found)) begin  
    if (Invr.InventoryNr<>InventoryNr) then begin found = false; end;        
    if (Invr.TransDate>enddate) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (Invr.FileName!="AT2WrofVc") then begin
        testf = false;
      end;
      if (nonblankdate(lastwrofd)) then begin
        if (Invr.TransDate==lastwrofd) then begin 
          if (lastwrofd<lstartdate) then begin
            testf = false; 
          end;
        end;
//StopAlert("11. lstartdate " & lstartdate & " lastwrofd " & lastwrofd & " endwrofdate " & endwrofdate & " testf " & testf & " Invr.FileName " & Invr.FileName);  
      end;
      if (testf) then begin
/*      
        if (AT2Ab.LastMonthDispDprCalc!=0) then begin//code not good for this option
          if (Invr.TransDate<=lastwrofd) then begin
            testf = false;
          end;
        end;
*/        
        if (testf) then begin
          if (blankdate(endwrofdate)) then begin
            endwrofdate = Invr.TransDate;
            switch (lComparison) begin
              case 0:
                endwrofdate.day = DaysInMonth(endwrofdate.year,endwrofdate.month);
              case 1:
              case 2:
                endwrofdate.day = 31;
                endwrofdate.month = 12;
                if (endwrofdate>enddate) then begin
                  endwrofdate = enddate;
                end;
            end;  
          end;
        end;

//StopAlert("1. wrofdate " & wrofdate & " endwrofdate " & endwrofdate & " lastwrofd " & lastwrofd);  

        if (Invr.TransDate<=lstartdate) then begin testf = false; end;

//StopAlert("11. Invr.TransDate " & Invr.TransDate & " lstartdate " & lstartdate & " testf " & testf);  

        if (nonblankdate(lastwrofd)) then begin
          if (lastwrofd<lstartdate) then begin
            if (Invr.TransDate==lastwrofd) then begin testf = false; end;
          end;
        end;
//StopAlert("12. Invr.TransDate " & Invr.TransDate & " lstartdate " & lstartdate & " lComparison " & lComparison);  
        if (testf) then begin
          switch (lComparison) begin
            case 0:
              if (Invr.TransDate>endwrofdate) then begin
                found = false;
              end;
              if (enddate==endwrofdate) then begin
//                found = false;// why is it so ? what is end date is 31/12/2006 and Wrof is 31/12/2006
              end;
//StopAlert("1. lstartdate " & lstartdate & " enddate " & enddate & " endwrofdate " & endwrofdate & " found " & found);  
            case 1:
              if (Invr.TransDate>endwrofdate) then begin
                found = false;
              end;
            case 2:
              if (Invr.TransDate>endwrofdate) then begin
                found = false;
              end;
          end;  
          if (found) then begin
            GetWrofData(Invr.TransNr,Invr.Row,wrofd,ws,wq,wdpr);
            wrofdate = wrofd;
            wrofqty = wrofqty + wq;
            wrofdpr = wrofdpr + wdpr;
//StopAlert("2. wdpr " & wdpr & " wrofdpr " & wrofdpr);  
          end;
        end;
      end;
    end;
  end;
  if (nonblankdate(wrofdate)) then begin
    switch (lComparison) begin
      case 0:    
/*      
        if (AT2Ab.LastMonthDispDprCalc!=0) then begin//code not good for this option
          wrofdate = AddMonth(wrofdate,-1);      
        end;
*/        
        wrofdate.day = DaysInMonth(wrofdate.year,wrofdate.month);
      case 1:
/*      
        if (AT2Ab.LastMonthDispDprCalc!=0) then begin//code not good for this option
          wrofdate = AddDay(wrofdate,-1);
        end;
*/        
      case 2:
        wrofdate.day = DaysInMonth(wrofdate.year,wrofdate.month);
        wrofdate.day = 31;
        wrofdate.month = 12;
//StopAlert(" wrofdate " & wrofdate & " lstartdate " & lstartdate);
    end;
    if (wrofdate<=lstartdate) then begin
      wrofdate = bd;
    end;
  end;


//StopAlert("dprdate " & dprdate & " wrofdate " & wrofdate & " wrofqty " & wrofqty);

  if (nonblankdate(dprdate)) then begin
    nexted = dprdate;
  end;
  
  if (nonblankdate(wrofdate)) then begin
    if (nexted>wrofdate) or (blankdate(nexted)) then begin
      nexted = wrofdate;
      wrof = true;
    end;
  end;
  if (wrof==false) then begin
    if (blankdate(nexted)) or (nexted<startdate) then begin
      nexted = enddate;
    end;
  end;

  switch (lComparison) begin
    case 0:    
      if (nexted.year==enddate.year) then begin
        if (nexted.month>enddate.month) then begin
          nexted = enddate;
        end;
      end;
      nexted.day = DaysInMonth(nexted.year,nexted.month);
    case 1:
    case 2:
      if (nexted.year==enddate.year) then begin
        if (nexted.month>enddate.month) then begin
          nexted = enddate;
        end;
      end;
      nexted.day = DaysInMonth(nexted.year,nexted.month);
      wrofdate.day = 31;
      wrofdate.month = 12;
  end;
     
  if (nexted>enddate) then begin
    res = false;
  end;
//StopAlert("10.nexted " & nexted & " enddate " & enddate & " res " & res & " nextdmcode " & nextdmcode);
LGetNextData_Asset:;
  GetNextData_Asset = res;
  return;
end;    

global
function Boolean CheckCategoryAcumulateDpr(string catp,var string desc)
BEGIN
  record AT2Vc ATCatr;
  Boolean res;
  
  res = false;
  ATCatr.Code = catp;
  if (ReadFirstMain(ATCatr,1,true)) then begin
    if (ATCatr.AcumulateDpr!=0) then begin res = true; end;
    desc = ATCatr.Description;
  end;  
  CheckCategoryAcumulateDpr = res;
  RETURN;
END;

global
procedure GetDepreciationPrc(string modcode,var val resp)
BEGIN
  record DprModVc DprModr;
  val t;
  
  resp = blankval;
  DprModr.Code = modcode;
  if (ReadFirstMain(DprModr,1,true)) then begin
    if (DprModr.LifecycleYears>0) then begin
      t = DprModr.LifecycleYears;
      resp = 100.00/t;
    end else begin
      resp = DprModr.DeprPerc;
    end;
  end;
  RETURN;
END;

global
procedure GetCategoryNLAccounts(Integer Model,string AT2Class,var string assetacc,var string costacc,var string depracc,var string objstr,
                                var string ass1objstr,var string dep1objstr,var string cost1objstr,
                                var string ass2objstr,var string dep2objstr,var string cost2objstr,
                                var string revdepr1acc,var string revdepr1objects,var string capcorr1acc,var string capcorr1objects)
BEGIN
  record AC2Block ACRec;
  row AC2Block ACrw;
  Integer i,rwcnt;
  
  costacc = "";
  depracc = "";
  assetacc = "";
  objstr = "";
  BlockLoad(ACRec);
  rwcnt = MatRowCnt(ACRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ACRec,i,ACrw);
    if (ACrw.Code==AT2Class) then begin
      switch (Model) begin
        case 0:
          costacc = ACrw.Cost1Acc;
          depracc = ACrw.Depr1Acc;
          assetacc = ACrw.Asset1Acc;
          ass1objstr = ACrw.Asset1Objects;
          dep1objstr = ACrw.Depr1Objects;
          cost1objstr = ACrw.Cost1Objects;
          
          revdepr1acc = ACrw.RevDepr1Acc;
          revdepr1objects = ACrw.RevDepr1Objects;
          capcorr1acc = ACrw.CapCorr1Acc;
          capcorr1objects = ACrw.CapCorr1Objects;
        case 1:
          costacc = ACrw.Cost2Acc;
          depracc = ACrw.Depr2Acc;
          assetacc = ACrw.Asset2Acc;
          ass2objstr = ACrw.Asset2Objects;
          dep2objstr = ACrw.Depr2Objects;
          cost2objstr = ACrw.Cost2Objects;

          revdepr1acc = ACrw.RevDepr1Acc;
          revdepr1objects = ACrw.RevDepr1Objects;
          capcorr1acc = ACrw.CapCorr1Acc;
          capcorr1objects = ACrw.CapCorr1Objects;
      end;
      objstr = ACrw.Objects;
      i = rwcnt;
    end;
  end;
  RETURN;
END;


global
procedure OneAT2UnitDeprCalculation(Integer Comparison,Integer LastOfficialRev,Integer Model2,Boolean MinModel,Date sStartDate,Date sEndDate,string InventoryNr,var val invdprbef,var val invdprv,var val revinvdprbef,var val revinvdprv,var string resdmcode,val svp,val resval,Boolean divbyqtf)
BEGIN
  record AT2UnitVc ATUnitr;
  Boolean found,wroff,stopdprf;
  Date sd,pd,ed;
  Date startdate;
  val startval,dprbef,dprv,mindprval,nextstartval,nextresval,lresval,thestartval;
  val portstartval,vals0,t,wrofsum,wrofdeprsum,wrofqty,assetqty,purchval,dprbefwrof,revbef,fwdassetqty,wrofdpr;
  string 20 dmcode,nextdmcode;  
  Integer alreadydonef;
  Integer DprMethod;
  Date wrofd;
      
  invdprbef = blankval;
  invdprv = blankval;
  lresval = resval;
  resdmcode = "";
  ATUnitr.InventoryNr = InventoryNr;
  if (ReadFirstMain(ATUnitr,1,true)) begin  

    resdmcode = dmcode;
    if (MinModel) then begin
      dmcode = ATUnitr.ModelMin;
    end;
    OneInventoryNrDepreciation(ATUnitr,0,0,sStartDate,sEndDate,Model2,0,LastOfficialRev,Comparison,0,0,0,wrofqty,wrofsum,wrofdeprsum,purchval,startval,invdprv,invdprbef,revinvdprv,revinvdprbef,revbef,fwdassetqty,assetqty,thestartval);
    if (divbyqtf) then begin
      invdprv = invdprv / ATUnitr.Quantity;
      invdprbef = invdprbef / ATUnitr.Quantity;
    end;
  end;    
  RETURN;
END;  

global
procedure GetDepreciationPrcAndDeprPeriod(string modcode,var val resp,var Integer dprper)
BEGIN
  record DprModVc DprModr;
  
  resp = blankval;
  DprModr.Code = modcode;
  if (ReadFirstMain(DprModr,1,true)) then begin
    resp = DprModr.DeprPerc;
    dprper = DprModr.DeprPeriod;
  end;
  RETURN;
END;

global
function Boolean GetInventoryNrWrofDate(string InventoryNr,var Date resd)
BEGIN
  record InvrsVc Invrsr;
  Boolean res;
  
  res = false;
  Invrsr.InventoryNr = InventoryNr;
  Invrsr.FileName = "AT2WrofVc";
  if (ReadFirstKey("FileName",Invrsr,2,true)) then begin
    resd = Invrsr.TransDate;
    res = true;
  end;  
  GetInventoryNrWrofDate = res;
  RETURN;        
END;

global
procedure RevaluationOnDate(Integer Model2,Integer lComparison,string InventoryNr,Date d,Date red,var val startval,var val resval,var string dmcode)
begin
  string 255 keystr;
  record AT2DprVc AT2Dprr;
  val lresval;
  Boolean found;
  Date ed;
  
  if (blankdate(d)) then begin
    goto LRevaluationOnDate;
  end;
  ed = d;
  switch (lComparison) begin
    case 0:    
      ed.day = DaysInMonth(ed.year,ed.month);
    case 1:
    case 2:
      ed.day = DaysInMonth(ed.year,ed.month);
  end;
  dmcode = "";
  AT2Dprr.InventoryNr = InventoryNr;
  switch (Model2) begin
    case 1:
      keystr = "StartingDate2";
      AT2Dprr.StartingDate2 = d;
    case 3:
      keystr = "DateInventoryNr";
      AT2Dprr.TransDate = d;
    otherwise
      keystr = "StartingDate1";
      AT2Dprr.StartingDate1 = d;
  end;
  if (nonblankdate(red)) then begin
    ed = red;
  end;
  found = true;
  while (LoopKey(keystr,AT2Dprr,2,found)) begin  
    if (AT2Dprr.InventoryNr!=InventoryNr) then begin found = false; end;        
    switch (Model2) begin
      case 1:
        if (DateInRange(AT2Dprr.StartingDate2,d,ed)==false) then begin
          found = false;
        end;
      case 3:
        if (DateInRange(AT2Dprr.TransDate,d,ed)==false) then begin
          found = false;
        end;
      otherwise
        if (DateInRange(AT2Dprr.StartingDate1,d,ed)==false) then begin
          found = false;
        end;
    end;
    
    if (found) then begin
      switch (Model2) begin
        case 1:
          dmcode = AT2Dprr.Model2;
          startval = AT2Dprr.StartVal2;
          if (nonblank(AT2Dprr.StartVal2Limit)) then begin
            startval = AT2Dprr.StartVal2Limit;
          end; 
        case 3:
          dmcode = AT2Dprr.Model2;
          startval = AT2Dprr.StartVal;
          if (nonblank(AT2Dprr.StartValLimit)) then begin
            startval = AT2Dprr.StartValLimit;
          end; 
        otherwise
          dmcode = AT2Dprr.Model1;
          startval = AT2Dprr.StartVal;
          if (nonblank(AT2Dprr.StartValLimit)) then begin
            startval = AT2Dprr.StartValLimit;
          end; 
      end;
      lresval = AT2Dprr.ResVal + AT2Dprr.LandVal;
      if (blank(AT2Dprr.ResVal)) and (blank(AT2Dprr.LandVal)) then begin
        lresval = blankval;
      end;
    end;
  end;
  if (nonblank(lresval)) then begin
    resval = lresval;
  end;
LRevaluationOnDate:;    
  return;
end;

global
function val CurMonthWrOfQty(Date startdate,Integer lComparison,record AT2UnitVc ATUnitr,var val wrofdpr)
begin
  val res;
  record InvrsVc Invr;
  Boolean found,testf;
  Date enddate,wrofd;
  val ws,wq,wdpr;

  switch (lComparison) begin
    case 0:
      enddate = startdate;
      enddate.day = DaysInMonth(enddate.year,enddate.month);
    case 2:
      enddate = startdate;
      enddate.day = 31;
      enddate.month = 12;
  end;
  wrofdpr = blankval;
  found = true;
  Invr.InventoryNr = ATUnitr.InventoryNr;
  Invr.TransDate = startdate;
  while (LoopKey("MainKey",Invr,2,found)) begin  
    if (Invr.InventoryNr<>ATUnitr.InventoryNr) then begin found = false; end;        
    if (Invr.TransDate>enddate) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (Invr.FileName!="AT2WrofVc") then begin
        testf = false;
      end;
      if (Invr.TransDate<=startdate) then begin testf = false; end;
      if (testf) then begin
        GetWrofData(Invr.TransNr,Invr.Row,wrofd,ws,wq,wdpr);
        res = res + wq;
        wrofdpr = wrofdpr + wdpr;
      end;
    end;
  end;
  CurMonthWrOfQty = res;
  return;
end;

function val GetDprModelPrc(string dmcode,var Integer lifecycle)
begin
  val res;
  record DprModVc DMr;
  
  res = blankval;
  DMr.Code = dmcode;
  if (ReadFirstMain(DMr,1,true)) then begin
    res = DMr.DeprPerc;
    if (res==0) then begin
      if (DMr.LifecycleYears!=0) then begin
        res = 100.00/DMr.LifecycleYears;
      end;  
    end;
    lifecycle = DMr.LifecycleYears;    
  end;
  GetDprModelPrc = res;
  return;
end;

global
function val PortCalculateColumn15(record RcVc RepSpec,val dprrate,Date UsedFromDate,val PurchVal,val MinDprVal,val InvestVal,string ModelMin,string ModelMax)
begin
  val col15;
  val tva,tvb,tvc,tvd,minmodv,maxmodv;
  Integer lifecycleMin,lifecycleMax,months,years;

  col15 = blankval;
  minmodv = GetDprModelPrc(ModelMin,lifecycleMin);
  maxmodv = GetDprModelPrc(ModelMax,lifecycleMax);  
  months = DateGetIntMonth(RepSpec.sEndDate) - DateGetIntMonth(RepSpec.sStartDate) + 1;
  if (dprrate>maxmodv) then begin
    tva = Round(((dprrate-maxmodv)*PurchVal)/100,SetRoundModeD(2));
    tva = (tva*months)/12;
  end;
  if (InvestVal!=0) then begin
    tvb = Round((InvestVal*dprrate)/100,SetRoundModeD(2));
    tvb = (tvb*months)/12;
  end;
  if (MinDprVal!=0) then begin
    tvc = Round(((PurchVal-MinDprVal)*dprrate)/100,SetRoundModeD(2));
    tvc = (tvc*months)/12;
  end;
  if (dprrate<minmodv) then begin
    years = (DateGetIntMonth(RepSpec.sEndDate) - DateGetIntMonth(UsedFromDate))/12;
    if (years>lifecycleMin) then begin
      tvd = Round((dprrate*PurchVal)/100,SetRoundModeD(2));
      months = DateGetIntMonth(RepSpec.sEndDate)-DateGetIntMonth(AddYear(UsedFromDate,lifecycleMin));
      tvd = (tvd*months)/12;
    end;
  end;
  col15 = tva + tvb + tvc + tvd;
LPortCalculateColumn15:;  
  PortCalculateColumn15 = col15;
  return;
end;

global
function val PortCalculateColumn12(val dprrate,string ModelMin)
begin
  val minmodv,col12;
  Integer lifecycleMin;

  col12 = blankval;
  minmodv = GetDprModelPrc(ModelMin,lifecycleMin);
  if (dprrate<minmodv) then begin
    col12 = minmodv - dprrate;
  end;
  PortCalculateColumn12 = col12;
  return;
end;
