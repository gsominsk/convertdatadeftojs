external procedure AutomatedSalesOrderly(string);
external function Boolean CorspTRIgnore(string);
external procedure ToStrTRCode(var string,Integer,LongInt);
external procedure GetFullCurncyRateText(Boolean,var string,val,val,val,val,val);
external function Integer TypeOfCurncy(var string,var Integer);
external procedure TRExtYc(record TRVc,var string);
external function Integer DateGetIntMonth(Date);
external function Boolean EobjInEobj(string,string);
external function Boolean CorspTRTest(record TRVc,record AccVc,Integer,var val,var val);
external procedure FindNLAccBal(string,string,string,Integer,Date,Date,Integer,Integer,Boolean,string,Integer,string,string,var val);
external procedure ListPerTrans(record RcVc);
external function Boolean DatePrel(Date);
external procedure HTVatNr(string,var string);
external procedure HTOT(string,var string);
external procedure HTObj(string,var string);
external procedure HTAccs(string,string,Integer, var string);
external procedure HTAccPer(Date,Date,var string);
external procedure HT2Per(Date, Date , var string);
external procedure LstRegDat(var string);
external procedure FindAccSD(Date,var Date,var Boolean);

procedure CorspRForm(record RcVc RepSpec,record TRVc TRp,record AccVc Accp,row TRVc Trrp,Date tdp,Integer ovst,string objs,
                     var Integer OldTransMonthp,var val mainosp,var val CurBal,var val SumDebet,var val SumCredit)
BEGIN
  record CYBlock CompYear;
  string 255 tstr,tstr2;
  val tb;
  Integer m;
  Integer tmp;

  BlockLoad(CompYear);
  m = DateGetIntMonth(TRp.TransDate);
  if (RepSpec.ArtMode==0) then begin
    if (OldTransMonthp!=0) then begin
      if (m!=OldTransMonthp) then begin
        Gray_Divider(8,1);
      end;
    end;
  end;
  OldTransMonthp = m;
  if (ovst==0) then begin    
    CurBal = CurBal + Trrp.DebVal;
    CurBal = CurBal - Trrp.CredVal;
    if (Trrp.DebVal!=0) then begin
      SumDebet = SumDebet + Trrp.DebVal;
    end;
    if (Trrp.CredVal!=0) then begin
      SumCredit = SumCredit - Trrp.CredVal;
    end;
    tb = CurBal;
    if (Accp.AccType==0) then begin
      if (CompYear.NS1[0]==1) then begin
        tb = -tb;
      end;
    end;
    if (Accp.AccType==1) then begin
      if (CompYear.NS1[1]==1) then begin
        tb = -tb;
      end;
    end;
    if (Accp.AccType==2) then begin
      if (CompYear.NS1[2]==1) then begin
        tb = -tb;
      end;
    end;
    if (Accp.AccType==3) then begin
      if (CompYear.NS1[3]==1) then begin
        tb = -tb;
      end;
    end;
    if (Accp.AccType==4) then begin
      if (CompYear.NS1[4]==1) then begin
        tb = -tb;
      end;
    end;
    mainosp = tb;
  end;
  if (RepSpec.ArtMode==0) then begin
    TRExtYc(TRp,tstr);
    StartFormat(15);
    OutStringOvst(0,"DblTrans",tstr,false,ovst);
    OutDateOvst(2,0,tdp,false,ovst);
    if ((RepSpec.flags[6]==1) or (RepSpec.flags[3]==1)) then begin
      OutStringOvst(7,0,objs,false,ovst);
    end;
    tstr = "";
    if (nonblank(TRp.RefStr)) then begin
      tstr = tstr & TRp.RefStr;
    end;
    if (nonblank(TRp.Comment)) then begin
      if (nonblank(tstr)) then begin tstr = tstr & ", "; end;
      tstr = tstr & TRp.Comment;
    end;
    if (nonblank(Trrp.Comment)) then begin
      tstr2 = Accp.Comment;
      tstr2 = Left(tstr2,len(Trrp.Comment));
      if (Trrp.Comment!=tstr2) then begin
        if (nonblank(tstr)) then begin tstr = tstr & ", "; end;
        tstr = tstr & Trrp.Comment;
      end;
    end;
    if (RepSpec.flags[7]==0) then begin
      OutStringOvst(6,0,tstr,false,ovst);
    end else begin
      OutStringOvst(6,0,tstr,false,ovst); 
    end;
    OutValOvst(3,0,Trrp.DebVal,M4Val,true,ovst);
    OutValOvst(4,0,Trrp.CredVal,M4Val,true,ovst);
    EndFormat;
    if (RepSpec.flags[8]!=0) then begin
      if (nonblank(Trrp.Curncy)) then begin
        StartFormat(15);
        OutStringOvst(2,0,Trrp.Curncy,false,ovst);
        if (TypeOfCurncy(Trrp.Curncy,tmp)==0) then begin
          GetFullCurncyRateText(true,tstr,Trrp.FrRate,Trrp.ToRateB1,Trrp.ToRateB2,Trrp.BaseRate1,Trrp.BaseRate2);
        end else begin
          GetFullCurncyRateText(false,tstr,Trrp.FrRate,Trrp.ToRateB1,Trrp.ToRateB2,Trrp.BaseRate1,Trrp.BaseRate2);
        end;
        OutStringOvst(6,0,tstr,false,ovst);
        OutValOvst(3,0,Trrp.CurDebVal,M4Val,true,ovst);
        OutValOvst(4,0,Trrp.CurCredVal,M4Val,true,ovst);
        EndFormat;
      end;
    end;
  end;
  RETURN;  
END;

procedure CorspHForm(record RcVc RepSpec,record AccVc Accp)
BEGIN
  if (RepSpec.ArtMode==0) then begin
    Gray_Divider(0,1);
    OutString(20,0,Accp.AccNumber,false);
    OutString(2,0,Accp.Comment,false);
    StartFormat(15);
    EndFormat;
    StartFormat(15);
    OutString(0,0,USetStr(3183),false);
    OutString(2,0,USetStr(3184),false);
    if (nonblank(RepSpec.ObjType)) then begin
      OutString(7,0,USetStr(3185),false);
    end;
    OutString(6,0,USetStr(3186),false);
    OutString(3,0,USetStr(3187),true);
    OutString(4,0,USetStr(3188),true);
    OutString(5,0,USetStr(3189),true);
    EndFormat;
    Gray_Divider(0,1);
  end;
  RETURN;
END;

procedure CorspMainAccOut(record AccVc Accp,var val mainisp,var Boolean AccOut)
BEGIN
  string 255 tstr;

  StartFormat(15);
  tstr = USetStr(3182);
  tstr = tstr & Accp.AccNumber;
  tstr = tstr & "  ";
  tstr = tstr & Accp.Comment;
  OutString(0,0,tstr,false);
  OutVal(1,0,mainisp,M4Val,true);
  EndFormat;
  AccOut = true;
  RETURN;
END;

procedure ReadCorspTRRow(record RcVc RepSpec,record TRVc TRp,record AccVc MainAccp,record AccVc CorAccp,string objstr,
                         var Integer OldTransMonthp,var val mainisp,var val mainosp,var Boolean FirstTrans,var Boolean AccOut,
                         var val CurBal,var val SumDebet,var val SumCredit)
BEGIN
  row TRVc TRrw;
  Integer i,rwcnt;
  string 255 tstr,objs,corspaccs;
  Boolean first;
  Boolean dcflag;
  val sv;
  val debvalp,credvalp;
  
  first = true;
  rwcnt = MatRowCnt(TRp);
  for (i=0;i<rwcnt;i=i+1 ) begin
    MatRowGet(TRp,i,TRrw);
    switch (TRrw.stp) begin
      case 1:
        if (TRrw.AccNumber!=MainAccp.AccNumber) then begin
        if (TRrw.AccNumber==CorAccp.AccNumber) then begin  
        if (CorspTRIgnore(TRrw.AccNumber)==false) then begin
        debvalp = TRrw.DebVal;
        credvalp = TRrw.CredVal;
        if (CorspTRTest(TRp,MainAccp,i,debvalp,credvalp)) then begin
          TRrw.DebVal = debvalp;
          TRrw.CredVal = credvalp;
          corspaccs = "";
          dcflag = true;
          sv = TRrw.DebVal - TRrw.CredVal;
          if (sv<0) then begin dcflag = false; end;
          objs = "";
          objs = TRrw.Objects;
          if ((TRrw.ovst==0) or (RepSpec.flags[1]!=0)) then begin
            if ((blank(RepSpec.ObjStr) or (EobjInEobj(objstr,TRrw.Objects)))) then begin
              if (blank(RepSpec.ObjType) or (RepSpec.flags[2]!=0) or (nonblank(objs))) then begin
                tstr = TRp.Comment & ", ";
                tstr = tstr & TRrw.Comment;
                if (InString(tstr,RepSpec.Stext)!=0) then begin
                  if (blank(RepSpec.f1) or (RepSpec.f1==TRrw.VATCode)) then begin
                    if (AccOut==false) then begin CorspMainAccOut(MainAccp,mainisp,AccOut); end;
                    if (FirstTrans) then begin
                      CorspHForm(RepSpec,CorAccp);
                      FirstTrans = false;
                    end;
                    if (RepSpec.flags[3]!=0) then begin objs = corspaccs; end;
                    CorspRForm(RepSpec,TRp,MainAccp,TRrw,TRp.TransDate,TRrw.ovst,objs,OldTransMonthp,mainosp,CurBal,SumDebet,SumCredit);
                  end;
                end;
              end;
            end;
          end;
        end;
        end;
        end;
        end;
      case 2:
      case 3:
      case 4: //no speclines in Mainlists 
    end;
  end;
  RETURN;
END;

/*previous
procedure ReadCorspTRRow(record RcVc RepSpec,record TRVc TRp,record AccVc MainAccp,record AccVc CorAccp,string objstr,
                         var Integer OldTransMonthp,var val mainisp,var val mainosp,var Boolean FirstTrans,var Boolean AccOut,
                         var val CurBal,var val SumDebet,var val SumCredit)
BEGIN
  row TRVc TRrw;
  Integer i,rwcnt;
  string 255 tstr,objs,corspaccs;
  Boolean dcflag,testf;
  val sv;
  val debvalp,credvalp;
  val maxcorspdebv,maxcorspcredv;
  
  rwcnt = MatRowCnt(TRp);
  for (i=0;i<rwcnt;i=i+1 ) begin
    MatRowGet(TRp,i,TRrw);
    testf = true;
    if (TRrw.ovst!=0) then begin testf = false; end;
    if (TRrw.stp!=1) then begin testf = false; end;
    if (TRrw.AccNumber!=MainAccp.AccNumber) then begin testf = false; end;
    if (testf) then begin
      if (TRrw.DebVal!=0) then begin dcflag = true; maxcorspcredv = TRrw.DebVal; end;
      if (TRrw.CredVal!=0) then begin dcflag = false; maxcorspdebv = TRrw.CredVal; end;
      i = rwcnt;
    end;
  end;

  rwcnt = MatRowCnt(TRp);
  for (i=0;i<rwcnt;i=i+1 ) begin
    MatRowGet(TRp,i,TRrw);
    testf = true;
    if (TRrw.ovst!=0) then begin testf = false; end;
    if (testf) then begin
      switch (TRrw.stp) begin
        case 1:
          testf = true;
          if (TRrw.AccNumber==MainAccp.AccNumber) then begin testf = false; end;
          if (TRrw.AccNumber!=CorAccp.AccNumber) then begin testf = false; end;
          if ((TRrw.DebVal!=0) and (dcflag!=false)) then begin testf = false; end;
          if ((TRrw.CredVal!=0) and (dcflag!=true)) then begin testf = false; end;
          if (testf) then begin
            debvalp = debvalp + TRrw.DebVal;
            credvalp = credvalp + TRrw.CredVal;
            if (CorspTRTest(TRp,MainAccp,i,debvalp,credvalp)) then begin
              if (debvalp>maxcorspdebv) then begin debvalp = maxcorspdebv; end;
              if (credvalp>maxcorspcredv) then begin credvalp = maxcorspcredv; end;
              TRrw.DebVal = debvalp;
              TRrw.CredVal = credvalp;
              corspaccs = "";
              dcflag = true;
              sv = TRrw.DebVal - TRrw.CredVal;
              if (sv<0) then begin dcflag = false; end;
              objs = "";
              objs = TRrw.Objects;
              if ((TRrw.ovst==0) or (RepSpec.flags[1]!=0)) then begin
                if ((blank(RepSpec.ObjStr) or (EobjInEobj(objstr,TRrw.Objects)))) then begin
                  if (blank(RepSpec.ObjType) or (RepSpec.flags[2]!=0) or (nonblank(objs))) then begin
                    tstr = TRp.Comment & ", ";
                    tstr = tstr & TRrw.Comment;
                    if (InString(tstr,RepSpec.Stext)!=0) then begin
                      if (blank(RepSpec.f1) or (RepSpec.f1==TRrw.VATCode)) then begin
                        if (AccOut==false) then begin CorspMainAccOut(MainAccp,mainisp,AccOut); end;
                        if (FirstTrans) then begin
                          CorspHForm(RepSpec,CorAccp);
                          FirstTrans = false;
                        end;
                        if (RepSpec.flags[3]!=0) then begin objs = corspaccs; end;
                        CorspRForm(RepSpec,TRp,MainAccp,TRrw,TRp.TransDate,TRrw.ovst,objs,OldTransMonthp,mainosp,CurBal,SumDebet,SumCredit);
                      end;
                    end;
                  end;
                end;
              end;
            end;
          end;
        case 2:
        case 3:
        case 4: //no speclines in Mainlists 
      end;
    end;
  end;
  RETURN;
END;
*/

procedure CorspRnHeader(record RcVc RepSpec,Boolean resUseAccum,Date AccumStartDate,
                        string fracc2,string toacc2)
BEGIN
  string 255 tstr;
  Integer rw;
  
  rw = 1;
  HTAccs(RepSpec.FirstAcc,RepSpec.LastAcc,RepSpec.UsedOnly,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  LstRegDat(tstr);
  Header(rw,tstr,0);
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (resUseAccum) then begin
    HTAccPer(AccumStartDate,RepSpec.sEndDate,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f2)) then begin
    HTAccs(fracc2,toacc2,1,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.ObjStr)) then begin
    HTObj(RepSpec.ObjStr,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.ObjType)) then begin
    HTOT(RepSpec.ObjType,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.Stext)) then begin
    tstr = USetStr(3018);
    tstr = tstr & RepSpec.Stext;
    tstr = tstr & "\"";
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  HTVatNr(RepSpec.f1,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (RepSpec.SimVerf==1) then begin
    tstr = USetStr(3019);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (RepSpec.flags[1]!=0) then begin
    tstr = USetStr(3197);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (DatePrel(RepSpec.sEndDate)) begin
    tstr = USetStr(3023);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  return;
end;

global
procedure CorspRn(var record RcVc RepSpec)
begin
  record CYBlock CompYear;
  record ObjBalVc ObjBalr;
  record MainVc mainr;
  record AccVc Acc2r;
  record AccVc Accr;
  record SMVc SMr;
  record TRVc MR3;
  val v;
  Boolean TrHs;
  Boolean Accs;
  Boolean Acc2s;
  Integer OldTransMonth;
//  VATCodeSum* VATSump;
  val MainIS,MainOS,sv;
  val reptotdeb,reptotcred;
  string 10 fracc2,toacc2,tstr;
  Date AccumStartDate;
  Boolean resUseAccum,AccOut,FirstTrans,testf;
  val SumDebet,SumCredit;
  val TotSumDebet,TotSumCredit,CurBal;

  BlockLoad(CompYear);
  RepSpec.FirstAcc = FirstInRange(RepSpec.AccStr,10);
  RepSpec.LastAcc = LastInRange(RepSpec.AccStr,10);
  fracc2 = FirstInRange(RepSpec.f2,10);
  toacc2 = LastInRange(RepSpec.f2,10);
  FindAccSD(RepSpec.sStartDate,AccumStartDate,resUseAccum);
  Accr.AccNumber = RepSpec.FirstAcc;
  Accs = ReadFirstMain(Accr,1,true);
  if (Accs) then begin
    AccOut = false;
    FirstTrans = true;
  end;

  StartReportJob(USetStr(6840));
   CorspRnHeader(RepSpec,resUseAccum,AccumStartDate,fracc2,toacc2);  
  EndHeader;
  SetRepCol(2,80);
  if (RepSpec.ArtMode==1) then begin
    SetRepCol(3,288);
    SetRepCol(4,384);
  end else begin
    SetRepCol(3,288);
    SetRepCol(4,384);
  end;
  SetRepCol(5,465);
  SetRepCol(8,413);
  SetRepCol(9,221);
  if (RepSpec.flags[6]==1) then begin
    SetRepCol(6,190);
  end else begin
    SetRepCol(6,130);
  end;
  if ((blank(RepSpec.ObjType)==false) or (RepSpec.flags[3]!=0)) then begin
    SetRepCol(6,200);
  end;
  SetRepCol(7,140);
  if (RepSpec.ArtMode==0) then begin
    StartFormat(10);
    EndFormat;
  end else begin
    StartFormat(20);
    OutString(0,0,USetStr(3242),false);
    OutString(50,0,USetStr(3243),false);
    OutString(3,0,USetStr(3187),true);
    OutString(4,0,USetStr(3188),true);
    EndFormat;
  end;
  if (CountRecords("TRVc")<=0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(3190),false);
    EndFormat;
  end;
  Accr.AccNumber = RepSpec.FirstAcc;
  Accs = true;
  ResetLoop(Accr);
  while (LoopMain(Accr,1,Accs)) begin
    FirstTrans = true;
    AccOut = false;
    if (Accs) then begin
      if ((Accr.AccNumber>RepSpec.LastAcc) and (nonblank(RepSpec.LastAcc))) then begin
        Accs = false;
      end;
    end;
    if (Accs==false) then begin goto L55; end;
    Acc2r.AccNumber = fracc2;
    Acc2s = true;
    ResetLoop(Acc2r);
    while (LoopMain(Acc2r,1,Acc2s)) begin  
      FirstTrans = true;
      if (Acc2s) then begin
        if ((Acc2r.AccNumber>toacc2) and (nonblank(toacc2))) then begin Acc2s = false; end;
      end;
      if (Acc2s) then begin
        FindNLAccBal(Accr.AccNumber,RepSpec.ObjStr,RepSpec.ObjType,Accr.AccType,AccumStartDate,RepSpec.sStartDate,
                     RepSpec.SimVerf,RepSpec.basecurncy,resUseAccum,RepSpec.CurncyCode,RepSpec.IncDaughter,"","",CurBal);

        MainIS = CurBal;
        MainOS = -CurBal;
      end;
      if (Acc2s) then begin
        if (RepSpec.ArtMode==0) then begin
          SumDebet = blankval;
          SumCredit = blankval;
        end else begin
          SumDebet = 0;
          SumCredit = 0;
        end;
        OldTransMonth = 0;
        if (RepSpec.UsedOnly==0) then begin CorspMainAccOut(Accr,MainIS,AccOut); end;

        mainr.AccNumber = Accr.AccNumber;
        mainr.TransDate = RepSpec.sStartDate;
        TrHs = true;
        ResetLoop(mainr);
        while (LoopMain(mainr,2,TrHs)) begin    
          if (TrHs) then begin
            if (mainr.TransDate>RepSpec.sEndDate) then begin
              TrHs = false;
            end;
          //&& monbalcheck!!
          end;
          if (TrHs) then begin
            if (mainr.AccNumber!=Accr.AccNumber) then begin
              TrHs = false;
            end;
            //&& monbalcheck!!
          end;    
          if (TrHs) then begin
            if (mainr.FileName=="TRVc") then begin
              MR3.Number = mainr.TransNr;
              MR3.IntYc = mainr.IntYc;
              if (ReadFirstMain(MR3,2,true)) then begin
                if (mainr.TransDate==MR3.TransDate) then begin                
                  ReadCorspTRRow(RepSpec,MR3,Accr,Acc2r,RepSpec.ObjStr,OldTransMonth,MainIS,MainOS,FirstTrans,AccOut,
                                 CurBal,SumDebet,SumCredit);
                end;
              end;
            end;
          end;
/*            
          if (TrHs) then begin
            testf = true;
            if (DateInRange(mainr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;
            if (testf) then begin
              if (mainr.FileName=="TRVc") then begin
                MR3.Number = mainr.TransNr;
                MR3.IntYc = mainr.IntYc;
                if (ReadFirstMain(MR3,2,true)) then begin
                  if (mainr.TransDate==MR3.TransDate) then begin                
                    ReadCorspTRRow(RepSpec,MR3,Accr,Acc2r,RepSpec.ObjStr,OldTransMonth,MainIS,MainOS,FirstTrans,AccOut,
                                   CurBal,SumDebet,SumCredit);
                  end;
                end;
              end;
            end;
          end;
*/          
        end;
        if (FirstTrans) then begin
          if (CurBal!=0) then begin
            if (AccOut==false) then begin CorspMainAccOut(Accr,MainIS,AccOut); end;
          end;
        end;
        if (AccOut==true) then begin
          if (AccOut) then begin
            TotSumDebet = TotSumDebet + SumDebet;
            TotSumCredit = TotSumCredit + SumCredit;
            v = SumDebet - SumCredit;
            if (RepSpec.ArtMode==0) then begin          
              sv = -SumCredit;
              if (FirstTrans==false) then begin
                Black_Divider(9,1);
                StartFormat(15);
                OutString(6,0,USetStr(3192),false);
                OutVal(3,0,SumDebet,M4Val,true);
                OutVal(4,0,sv,M4Val,true);
                EndFormat;
                StartFormat(5);
                EndFormat;
              end;
            end else begin
              if ((SumDebet!=0) or (SumCredit!=0)) then begin
                sv = -SumCredit;
                StartFormat(15);
                OutString(0,0,Acc2r.AccNumber,false);
                OutString(50,0,Acc2r.Comment,false);
                OutVal(3,0,SumDebet,M4Val,true);
                OutVal(4,0,sv,M4Val,true);
                EndFormat;
                MainOS = 0;
              end;
            end;
          end;
        end;
      end; // Acc2s 
    end;
    if (AccOut) then begin
      Black_Divider(9,1);
      MainOS = MainIS + TotSumDebet;
      MainOS = MainOS + TotSumCredit; //vg MainOS = MainOS - TotSumCredit;
      StartFormat(15);
      OutVal(3,0,TotSumDebet,M4Val,true);
      OutVal(4,0,TotSumCredit,M4NegVal,true);
      OutVal(1,0,MainOS,M4Val,true);
      EndFormat;
      reptotdeb = reptotdeb + TotSumDebet;
      reptotcred = reptotcred + TotSumCredit;
      TotSumDebet = blankval;
      TotSumCredit = blankval;
      Gray_Divider(0,1);
    end;
L55:;
  end;
  StartFormat(15);
  OutVal(3,0,reptotdeb,M4Val,true);
  OutVal(4,0,reptotcred,M4NegVal,true);
  EndFormat;
  if (RepSpec.flags[4]!=0) then begin ListPerTrans(RepSpec); end;
  EndJob;
  AutomatedSalesOrderly("HasIntegratedNL+Run_CorspRn");
  RETURN;
END;