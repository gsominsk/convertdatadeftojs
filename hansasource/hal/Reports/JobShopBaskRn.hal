external function string 20 FindJobCustomerCode(record JobVc);
external procedure KLIVGetPaidVal(record IVVc,var val,var val,Date);
external procedure SetupIVFromShopBask2(var record IVVc,Integer,string,string,string,string,val,val,val,val,val);
external procedure BuildIVFromShopBask2(var record IVVc,record JobVc,string,Boolean,Boolean,Boolean,Integer);
external procedure ListAlreadyInvoiced(LongInt,String);
external procedure ListAlreadyPaid(LongInt,String,var val,boolean);

function val PrintReceipts(LongInt shopbasknr,val downpaid,var Integer oked)
BEGIN
  record ShopBaskVc ShopBaskr;
  record IVVc IVr;
  Date bd;
  val paidprep,res,credited;
  
  oked = -1;
  ShopBaskr.SerNr = shopbasknr;
  if (ReadFirstMain(ShopBaskr,1,true)) then begin
    if (ShopBaskr.DownPayIVSerNr>0) then begin
      IVr.SerNr = ShopBaskr.DownPayIVSerNr;
      if (ReadFirstMain(IVr,1,true)) then begin
        oked = IVr.OKFlag;
        if (IVr.OKFlag!=0) then begin
          KLIVGetPaidVal(IVr,paidprep,credited,bd);
          if (paidprep!=0) then begin
            StartFormat(15);
             OutString(150,0,USetStr(12468),false);
             OutVal(465,0,paidprep,M4NegVal,true);
            EndFormat;
            res = res + paidprep;            
          end;
        end;
      end;
    end;
  end;
LPrintReceipts:; 
  PrintReceipts = res; 
  RETURN;
END;

procedure JobRepInvoice(Integer strid,record IVVc IVp,Record RcVc RepSpec) 
BEGIN
  row IVVc IVrw;
  Integer i,rwcnt,oked;
  val vat;
  String 20 ITArtCode; 
  String 60 ITItemName; 
  Boolean testf;
  record IVVc lIVr;
  record IVVc orgIVr;
  
  rwcnt = MatRowCnt(IVp);
  if (rwcnt<=0) then begin
    StartFormat(15);
    if (strid>0) then begin
      OutString(0,0,USetStr(strid),false);
    end;
    OutString(50,0,IVp.CustCode,false);
    OutString(220,0,IVp.Addr0,false);
    EndFormat;
    goto LJobRepInvoice;
  end;
  StartFormat(15);
  if (strid>0) then begin
    OutString(0,0,USetStr(strid),false);
  end;
  OutString(50,0,IVp.CustCode,false);
  OutString(220,0,IVp.Addr0,false);
  EndFormat;
  StartFormat(15);
  OutString(50,0,IVp.CustCat,false);
  OutString(220,0,IVp.Addr1,false);
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(50,0,IVp.PriceList,false); 
  OutString(220,0,IVp.Addr2,false);
  EndFormat;
  StartFormat(15);
  OutString(50,0,IVp.OurContact,false);
  OutString(220,0,IVp.Addr3,false);
  EndFormat;
  if (nonblank(IVp.ClientContact)) then begin
    StartFormat(15);
    OutString(220,0,IVp.ClientContact,false);
    EndFormat;
  end;
  if (nonblank(IVp.CurncyCode)) then begin
    StartFormat(15);
    OutString(465,0,IVp.CurncyCode,true);
    EndFormat;
  end;
/*
  StartFormat(15);
  OutString(0,0,USetStr(9078),false);
  EndFormat;
*/
  StartFormat(15);
  OutString(20,0,USetStr(9071),false);
  OutString(109,0,USetStr(9072),true);
  OutString(115,0,USetStr(9073),false);
  OutString(380,0,USetStr(9074),true);
  OutString(415,0,USetStr(9075),true);
  OutString(465,0,USetStr(9076),true);
  EndFormat;
  Gray_Divider(0,1);
  for (i=0;i<rwcnt; i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeDownpayment) then begin
      StartFormat(15);
//      OutString(0,0,IVrw.VARList,false);
      OutStringID(20,"DblShopJobBask",IVrw.ArtCode,false,IVrw.OrdRow);
      OutVal(109,0,IVrw.Quant,M4UVal,true);
      OutString(115,0,IVrw.Spec,false);
      OutVal(380,0,IVrw.Price,M423Val,true);
      OutVal(415,0,IVrw.vRebate,M41Val,true);
      OutVal(465,0,IVrw.Sum,M4Val,true);
      OutString(480,0,IVrw.VATCode,true);
      EndFormat;
      testf = true;
      if (IVrw.CUPNr>0) then begin
        lIVr.SerNr = IVrw.CUPNr;
        if (ReadFirstMain(lIVr,1,true)) then begin
          testf = false;
          switch (lIVr.InvType) begin
            case kInvoiceTypeDownpayment:  testf = true;              
            case kInvoiceTypeCreditSpecialSales: goto LkInvoiceTypeCredit;
            case kInvoiceTypeCredit: 
              LkInvoiceTypeCredit:;
              orgIVr.SerNr = lIVr.CredInv;
              if (ReadFirstMain(orgIVr,1,true)) then begin
                switch (orgIVr.InvType) begin
                  case kInvoiceTypeDownpayment:  testf = true;              
                end;
              end;
          end;
        end;
      end else begin      
        if (IVrw.Sum>0) then begin testf = false; end;//downpayment, only way we can find it, it is not only way, other way above
      end;
      if (testf) then begin//downpayment, only way we can find it
        IVp.Sum4 = IVp.Sum4 + PrintReceipts(IVrw.OrdRow,IVrw.Sum,oked);
        if (oked==0) then begin
          StartFormat(15);
          OutString(55,0,USetStr(12556),false);
          EndFormat;
        end;
      end;
    end;
    if (IVrw.stp==10) then begin
      Gray_Divider(55,480);
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(130,0,IVp.Objects,false);
  OutVal(465,0,IVp.Sum4,M4Val,true);
  EndFormat;
LJobRepInvoice:;
  RETURN;
END;

function
Boolean CUInJob(record JobVc Jobp,string custcode)
BEGIN
  row JobVc Jobrw;
  Boolean res;
  Integer i,rwcnt;
  
  if (FindJobCustomerCode(Jobp)==custcode) then begin
    res = true;
    goto LCUInJob;
  end;
  rwcnt = MatRowCnt(Jobp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Jobp,i,Jobrw);
    if (Jobrw.CUCode==custcode) then begin
      res = true;
      goto LCUInJob;
    end;
  end;
LCUInJob:;
  CUInJob = res;
  RETURN;
END;
/*
procedure PossibleOtherCustInShopBask(record JobVc Jobp,Boolean repf,Boolean stopatfirst,Record RcVc RepSpec)
BEGIN
  record ShopBaskVc ShopBaskr;
  Boolean res,found,testf;
  string 255 ckey;
  Integer rwcnt;
  record IVVc IVr;
  Boolean allfolios;
  
  allfolios = true;
  ckey = "OwnerSerNr";
  ShopBaskr.OwnerSerNr = Jobp.SerNr;
  ShopBaskr.OrdNr = -1;
  found = true;
  while (LoopKey(ckey,ShopBaskr,1,found)) begin
    if (ShopBaskr.OwnerSerNr!=Jobp.SerNr) then begin found = false; end;
    if (ShopBaskr.OrdNr!=-1) then begin found = false; end;
    testf = false;
    if (found) then begin
      testf = true;
      if (ShopBaskr.Owner!=kShopBaskOwnerReservation) then begin testf = false; end;
      if (ShopBaskr.Destination!=kShopBaskDestinationInvoice) then begin testf = false; end;
      if (blank(ShopBaskr.CUCode)) then begin testf = false; end;
      if (CUInJob(Jobp,ShopBaskr.CUCode)) then begin testf = false; end;//true or false
      if (ShopBaskr.CUCode==Jobp.Source) then begin testf = false; end;
    end;
    if (repf and testf) then begin
      Black_Divider(0,1);
      StartFormat(15);
      OutString(50,0,ShopBaskr.CUCode,false);
      EndFormat;
      StartFormat(15);
      OutStringID(20,"DblShopJobBask",ShopBaskr.ItemCode,false,ShopBaskr.SerNr);
      OutVal(104,0,ShopBaskr.Qty,M4UVal,true);
      OutString(110,0,ShopBaskr.Comment,false);
      OutString(350,0,ShopBaskr.CUCode,false);
      EndFormat;
    end;
    if (stopatfirst) then begin found = false; end;
  end;
  if (RepSpec.flags[0]==0) then begin
    if (nonblank(Jobp.Source)) then begin
      SetupIVFromShopBask(IVr,Jobp.PriceList,Jobp.ResUsage,Jobp.Source);
      BuildIVFromShopBask2(IVr,Jobp,Jobp.Source,false,false,allfolios,0);
      JobRepInvoice(IVr,RepSpec);
    end;  
  end;  
  RETURN;
END;
*/

function boolean ValidJobAccount(String CustCode,Integer InclAgent,LongInt Rownr,record JobVc Jobr,String AskedCust) 
begin
  boolean res,found;
  integer i;
  row JobVc Jobrw;
  string 10 tstr;
  
  res = false;
  if nonblank(CustCode) then begin
    if (blank(AskedCust) or (AskedCust==CustCode)) then begin
      if (Rownr==-2) then begin
        res = true;
      end else begin
        if (Rownr==-1) then begin
          if (InclAgent==1) then begin
            if (CustCode<>Jobr.CUCode) then begin 
              res = true; 
            end;    
          end;
        end else begin
          if (CustCode<>Jobr.Source) then begin 
            if (CustCode<>Jobr.CUCode) then begin 
              res = true;
              for(i=0;i<(Rownr-1);i=i+1) begin
                MatRowGet(Jobr,i,Jobrw);
                if (CustCode==Jobrw.CUCode) then begin 
                  res = false;
                end;
              end;
            end;        
          end;
        end;  
      end;
    end;
  end; 
  ValidJobAccount = res;
  return;
end;

procedure PrintSaldo(val bal)
begin
  if (bal<>0) then begin
    EndFormat;
    Gray_Divider(300,1);
    StartFormat(15);
    OutString(300,0,USetStr(9085),false);
    OutVal(465,0,bal,M4Val,true);
    EndFormat;
  end;
    StartFormat(15);
    EndFormat;
    Black_Divider(0,1);
  return;
end;

global
procedure JobShopBaskRn(record RcVc RepSpec)
begin
  record IVVc IVr;
  record JobVc Jobr;
  row JobVc Jobrw;
  Integer i,rwcnt;
  string 70 tstr;
  val downp;
  string 20 cucode;
  Boolean allfolios;
  
  allfolios = true;
  StartReportJob(USetStr(9070));
  EndHeader;
    
  SetRepCol(2,5);
  SetRepCol(3,40);  
  SetRepCol(4,100); 
  SetRepCol(5,210); 
  SetRepCol(6,340);
  SetRepCol(7,410); 
  SetRepCol(8,480); 
  SetRepCol(9,480); 
  
  Jobr.SerNr = RepSpec.long1;
  if (ReadFirstMain(Jobr,1,true)) then begin
  
    StartFormat(15);
    tstr = Jobr.SerNr;
    if (Jobr.Mother<>-1) then begin
      tstr = tstr & "/" & Jobr.Mother;
    end;
    OutString(4,0,USetStr(9079),true);
    OutString(4,0," " & tstr,false);
    OutString(230,0,USetStr(9080) & ":",true);
    OutString(230,0," " & Jobr.TransDate,false);
    EndFormat;
    StartFormat(15);
    OutString(4,0,USetStr(9082) & ":",true);
    OutString(4,0," " & Jobr.ResCode,false);
    OutString(230,0,USetStr(9081) & ":",true);
    OutString(230,0," " & Jobr.EndDate,false);
    EndFormat;
    EndFormat;
    StartFormat(15);
    Black_Divider(0,1);
    
    cucode = FindJobCustomerCode(Jobr);
    if (ValidJobAccount(cucode,RepSpec.flags[0],-2,Jobr,RepSpec.f1)) then begin
      StartFormat(15);
      OutString(50,0,USetStr(9083),false);
      EndFormat;
      SetupIVFromShopBask2(IVr,Jobr.InclVAT,Jobr.PriceList,Jobr.ResUsage,cucode,Jobr.CurncyCode,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
      BuildIVFromShopBask2(IVr,Jobr,cucode,true,false,allfolios,0);
      JobRepInvoice(0,IVr,RepSpec);
      ListAlreadyPaid(RepSpec.long1,cucode,downp,true);
      ListAlreadyInvoiced(RepSpec.long1,cucode);
      PrintSaldo(-downp+IVr.Sum4);
    end;

    if (ValidJobAccount(Jobr.Source,RepSpec.flags[0],-1,Jobr,RepSpec.f1)) then begin
       StartFormat(15);
       OutString(0,0,USetStr(9084),false);
       EndFormat;
       SetupIVFromShopBask2(IVr,Jobr.InclVAT,Jobr.PriceList,Jobr.ResUsage,Jobr.Source,Jobr.CurncyCode,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
       BuildIVFromShopBask2(IVr,Jobr,Jobr.Source,true,false,allfolios,0);
       JobRepInvoice(0,IVr,RepSpec);
       ListAlreadyPaid(RepSpec.long1,Jobr.Source,downp,true);
       ListAlreadyInvoiced(RepSpec.long1,Jobr.Source);
       PrintSaldo(-downp+IVr.Sum4);
    end;

    rwcnt = MatRowCnt(Jobr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Jobr,i,Jobrw);
      if ((ValidJobAccount(Jobrw.CUCode,RepSpec.flags[0],i,Jobr,RepSpec.f1)) and (Jobrw.CUCode!=cucode)) then begin
        SetupIVFromShopBask2(IVr,Jobr.InclVAT,Jobr.PriceList,Jobr.ResUsage,Jobrw.CUCode,Jobr.CurncyCode,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
        BuildIVFromShopBask2(IVr,Jobr,Jobrw.CUCode,false,false,allfolios,0);
        JobRepInvoice(9086,IVr,RepSpec);
        ListAlreadyPaid(RepSpec.long1,Jobrw.CUCode,downp,true);
        ListAlreadyInvoiced(RepSpec.long1,Jobrw.CUCode);
        PrintSaldo(-downp+IVr.Sum4);
      end;
    end;
  end;
  EndJob;
  return;
end;
