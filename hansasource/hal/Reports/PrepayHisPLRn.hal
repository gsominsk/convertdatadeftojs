external function Boolean HasContactClassification();
external function Boolean HasCategories();
external procedure HTLevCat(string,var string);
external function Boolean ContactInGroupClass2(string,string,string,string,string,string,string);
external function Boolean GetAPPayRate(LongInt,var val,var val,var val,var val,var val,string,Date);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function string 255 GetSupplierOnAccountAC(string);
external procedure GetCustName(String,var String);
external procedure AddCurTotalsRow(string,val,val,val,var record SMVc);
external procedure PrintCurTotalsRow(record SMVc,Integer,Integer,Integer,Integer,Integer);
external procedure HT2Per(Date, Date , var string);
external procedure HTCustClass(string,var string);
external procedure HTCustClassType(string,var string);
external function Boolean SetInSet2(string,string);
external procedure ClassTypef(string,string,var Boolean);
external procedure HTSupps(string,string,var string);

function val FindPrepaymentFwdBalance(record RcVc RepSpec,LongInt VEPNr,
                                      var val tt,var record SMVc CurTotalsr,date tilldate,boolean addtot)
begin
  val res,sign,t;
  record APPayHistVc APPayHistr;
  Boolean testf,TrHs;
  Integer keys;
  string 255 mykey;
  Date sd,ed;

  sd.day = 1; sd.month = 1; sd.year = 1980;
  ed = AddDay(RepSpec.sStartDate,-1);
  if (RepSpec.flags[1]==2) then begin
    ed = AddDay(tilldate,-1);
  end;
  keys = 2;
  ResetLoop(APPayHistr);
  mykey = "VEPNrTransDate";
  APPayHistr.VEPNr = VEPNr;
  APPayHistr.TransDate = sd;
  TrHs = true;
  while (LoopKey(mykey,APPayHistr,keys,TrHs)) begin
    testf = true;
    if ((RepSpec.f1<>APPayHistr.VECode) and (nonblank(RepSpec.f1))) then begin
      testf = false;
      if (RepSpec.flags[1]==1) then begin
        //TrHs = false;
      end;
    end;
    if (APPayHistr.VEPNr==-1) then begin
      testf = false;
    end;
    if (VEPNr>0) then begin
      if (VEPNr<>APPayHistr.VEPNr) then begin
        testf = false;
        TrHs = false;
      end;  
    end;
    if ((RepSpec.f3 <> APPayHistr.CurncyCode) and (nonblank(RepSpec.f3))) then begin
      testf = false;
    end;
    if (DateInRange(APPayHistr.TransDate,sd,ed)==false) then begin
      testf = false;
    end;
    if (testf) then begin
      testf = ContactInGroupClass2(APPayHistr.VECode,RepSpec.f7,RepSpec.f4,RepSpec.f5,"SUPP","","");
    end;    
    if (TrHs and testf) then begin
      if ((APPayHistr.FileName=="VIVc") or (APPayHistr.FileName=="CLInVc")) then begin
        sign = -1;
      end else begin
        sign = 1;
      end;  
      if (RepSpec.flags[4]==1) then begin
        t = sign * APPayHistr.BookVal;
      end else begin
        t = sign * APPayHistr.Val;
      end;
      if addtot then begin 
        AddCurTotalsRow(APPayHistr.CurncyCode,sign*APPayHistr.Val,-1,-1,CurTotalsr); 
        tt = tt + t;
      end;
      res = res + t;
    end;
  end;
  FindPrepaymentFwdBalance = res;
  return;
end;

procedure PrepLine(LongInt lastprep,string lastcurr,string lastcu,Integer itype,var string lastprintcu,val prepstart, var boolean veprinted)
begin
  string 255 tstr,custname;
  
  tstr = lastprep;
  tstr = tstr & " (" & lastcurr & ")";
  if (itype<>1) then begin
    StartFormat(15);
    OutString(0,0,tstr,false);
    GetCustName(lastcu,custname);
    OutString(2,0,lastcu,false);
    OutString(3,0,custname,false);
    EndFormat;
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(0,0,USetStr(7814),false); 
    OutString(2,0,USetStr(7817),false);
    OutString(3,0,USetStr(7816),false);
    OutString(6,0,USetStr(7819),true);
    OutString(1,0,USetStr(7828),true);
    EndFormat;
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(2,0,USetStr(7827),false);
    OutVal(1,0,prepstart,M4Val,true);  
    EndFormat;
  end else begin
    if (veprinted==false) then begin 
      StartFormat(15);
      OutString(0,0,USetStr(7820),false);
      GetCustName(lastcu,custname);
      OutString(2,0,lastcu,false);
      OutString(3,0,custname,false);
      lastprintcu = lastcu;
      EndFormat;
      Gray_Divider(0,1);
      StartFormat(15);
      OutString(0,0,USetStr(7814),false); 
      OutString(2,0,USetStr(7817),false);
      OutString(3,0,USetStr(7816),false);
      OutString(6,0,USetStr(7819),true);
      OutString(1,0,USetStr(7828),true);
      EndFormat;
      Gray_Divider(0,1);
      veprinted = true;
    end;
    StartFormat(15);
    OutString(0,0,tstr,false);
    OutString(2,0,USetStr(7827),false);
    OutVal(1,0,prepstart,M4Val,true);  
    EndFormat;
  end;  
  return;
end;  

procedure Print_PrepHist(record BaseCurBlock BCb,var val tt,record RcVc RepSpec,record APPayHistVc APPayHistr,var record SMVC CurTotalsr,LongInt lastprep,string lastcu,string lastcurr,string lastprintcu,var val prepend, var val bcprepend,var boolean fwdprint,var val prepstart,var boolean veprinted1)
begin
  val t,sign,runbal;
  string 255 tstr,dblstr;
  val frrate,torate1,torate2,baserate1,baserate2;
  record OPVc OPr;
  row OPVc OPrw;
  val lossv;
  integer i,rwcnt;
  Boolean lossf;
 
  if ((APPayHistr.FileName=="VIVc") or (APPayHistr.FileName=="CLInVc")) then begin
    sign = -1;
  end else begin
    sign = 1;
  end;  
  if (RepSpec.flags[4]==1) then begin
    t = sign * APPayHistr.BookVal;
  end else begin
    t = sign * APPayHistr.Val;
  end;
  lossv = 0;
  if (RepSpec.flags[4]==1) then begin
    if (APPayHistr.FileName=="OPVc") then begin
      lossf = true;
      OPr.SerNr = APPayHistr.SerNr;
      if (ReadFirstMain(OPr,1,true)) then begin
        rwcnt = MatRowCnt(OPr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(OPr,i,OPrw);
          if (OPrw.PrepayNr==APPayHistr.VEPNr) then begin
            if (OPrw.BankCurncy==BCb.BaseCur1) then begin
              lossf = false;
            end;
          end;
        end;
      end;
      if (lossf) then begin
        if (GetAPPayRate(APPayHistr.VEPNr,frrate,torate1,torate2,baserate1,baserate2,APPayHistr.CurncyCode,APPayHistr.TransDate)) then begin
          OPr.SerNr = APPayHistr.SerNr;
          if (ReadFirstMain(OPr,1,true)) then begin
            rwcnt = MatRowCnt(OPr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(OPr,i,OPrw);
              if (OPrw.PrepayNr==APPayHistr.VEPNr) then begin
                lossv = APPayHistr.BookVal - MulRateToBase1(OPrw.BankCurncy,OPrw.BankVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
              end;
            end;
          end;
        end else begin
          lossv = APPayHistr.BookVal - MulRateToBase1(APPayHistr.CurncyCode,APPayHistr.Val,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
        end;
      end;
    end else begin
      GetAPPayRate(APPayHistr.VEPNr,frrate,torate1,torate2,baserate1,baserate2,APPayHistr.CurncyCode,APPayHistr.TransDate);
      lossv = APPayHistr.BookVal - MulRateToBase1(APPayHistr.CurncyCode,APPayHistr.Val,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
    end;
  end else begin
    lossv = sign * APPayHistr.BookVal;
  end;
  AddCurTotalsRow(APPayHistr.CurncyCode,sign*APPayHistr.Val,-1,-1,CurTotalsr);
  tt = tt + sign*APPayHistr.BookVal;// + lossv;
  if fwdprint then begin 
    PrepLine(APPayHistr.VEPNr,APPayHistr.CurncyCode,APPayHistr.VECode,RepSpec.flags[1],lastprintcu,prepstart,veprinted1);
    fwdprint = false;
  end;   
  prepend = prepend + lossv;
  bcprepend = bcprepend + sign * APPayHistr.BookVal; // + lossv;
  runbal = prepstart + prepend;
  switch (APPayHistr.FileName) begin
    case "OPVc": 
      dblstr = "DblOPVc";
      tstr = USetStr(1751);
    case "CLInVc": 
      dblstr = "DblCLInVc";
      tstr = USetStr(1833);
    case "CLOutVc": 
      dblstr = "DblCLOutVc";
      tstr = USetStr(1834);
    case "VIVc": 
      dblstr = "DblVIVc";
      tstr = USetStr(1808);
    otherwise dblstr = "";
  end;

  StartFormat(15); 
  OutDate(0,0,APPayHistr.TransDate,false);
  OutString(2,0,tstr,false);
  OutString(3,dblstr,APPayHistr.SerNr,false);
  OutVal(6,0,t,M4Val,true); 
  OutVal(1,0,runbal,M4Val,true);  
  EndFormat;
  return;
end;

procedure PerPayHisPLRn_SortByPrep(record RcVc RepSpec,var val tt,var record SMVc CurTotalsr,var Boolean veprinted)
begin
  record APPayHistVc APPayHistr;
  Boolean TrHs,printed;
  val t,custfwdbal,bccustbal;
  LongInt lastprep;
  string 20 lastcu,lastbalcu;
  val runbal;
  Boolean testf;
  string 250 tstr;
  Boolean printf;
  LongInt lastbalprep;
  string 5 lastcurr,lastbalcurr;
  val bcfwdbal,bcprepstart,bcprepend;
  val prepstart,prepend;
  Boolean printcust,fwdprint;
  string 20 lastprintcu;
  val custstart;
  Boolean onlybal;
  record BaseCurBlock BCb;

  BlockLoad(BCb);
  printed = false;
  APPayHistr.VEPNr = RepSpec.long1;
  lastprep = -1;
  TrHs = true;
  fwdprint = true;
  while (LoopKey("VEPNrTransDate",APPayHistr,1,TrHs)) begin
    testf = true;
    if nonblank(RepSpec.f1) then begin 
      if (RepSpec.f1<>APPayHistr.VECode) then begin
        testf = false;
      end;
    end;
    if (RepSpec.long1<>-1) then begin
      if (RepSpec.long1<>APPayHistr.VEPNr) then begin
        TrHs = false;
        testf = false;
      end;  
    end;
    if (APPayHistr.VEPNr==-1) then begin
      testf = false;
    end;
    if ((RepSpec.f3<>APPayHistr.CurncyCode) and (nonblank(RepSpec.f3))) then begin
      testf = false;
    end;
    if (testf) then begin
      testf = ContactInGroupClass2(APPayHistr.VECode,RepSpec.f7,RepSpec.f4,RepSpec.f5,"SUPP","","");
    end;
    if (nonblank(RepSpec.FirstAcc)) then begin
      if (testf) then begin
        if (nonblank(APPayHistr.APAcc)) then begin
          if (APPayHistr.APAcc!=RepSpec.FirstAcc) then begin testf = false; end;
        end else begin
          if (GetSupplierOnAccountAC(APPayHistr.VECode)!=RepSpec.FirstAcc) then begin
            testf = false;
          end;
        end;
      end;
    end;
    if testf then begin
      if (APPayHistr.VEPNr<>lastprep)  then begin
        prepstart = FindPrepaymentFwdBalance(RepSpec,APPayHistr.VEPNr,tt,CurTotalsr,APPayHistr.TransDate,true);
        fwdprint = true;
      end;
    end;
    onlybal = false;
    if testf then begin
      if (DateInRange(APPayHistr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
        testf = false; 
        if (prepstart!=0) then begin
          onlybal = true;
        end;
      end;
    end;  
    if (testf) or onlybal then begin
      if (APPayHistr.VEPNr<>lastprep) then begin
        if (lastprep<>-1)  then begin
          StartFormat(15);
          EndFormat;
          prepend = 0;
          bcfwdbal = 0;
          bcprepstart = 0;
          bcprepend = 0;
        end;
        fwdprint = true;
        if (APPayHistr.VEPNr!=-1) and onlybal then begin
          PrepLine(APPayHistr.VEPNr,APPayHistr.CurncyCode,APPayHistr.VECode,RepSpec.flags[1],lastprintcu,prepstart,veprinted);
          onlybal = false;
          fwdprint = false;
        end;
      end;
      lastprep = APPayHistr.VEPNr;
      lastcu = APPayHistr.VECode;
      lastcurr = APPayHistr.CurncyCode;
      if (testf) then begin 
        Print_PrepHist(BCb,tt,RepSpec,APPayHistr,CurTotalsr,lastprep,lastcu,lastcurr,lastprintcu,prepend,bcprepend,fwdprint,prepstart,veprinted);
      end;
    end;
  end;  
  if onlybal then begin
    if (APPayHistr.VEPNr<>lastprep)  then begin
      PrepLine(lastprep,lastcurr,lastcu,RepSpec.flags[1],lastprintcu,prepstart,veprinted);
      OutString(2,0,USetStr(7828),false);
      OutVal(1,0,prepstart,M4Val,true);  
      EndFormat;
      StartFormat(15);
      EndFormat;
    end;
  end;
 
  return;
end;  

procedure PerPayHisPLRn_SortByTransDate(record RcVc RepSpec,var val tt,var record SMVc CurTotalsr)
begin
  record APPayHistVc APPayHistr;
  Boolean TrHs;
  val t,custfwdbal,bccustbal;
  LongInt lastprep;
  string 20 lastcu,lastbalcu;
  Boolean testf;
  string 250 tstr;
  Boolean printf;
  LongInt lastbalprep;
  string 5 lastcurr,lastbalcurr;
  val bcfwdbal,bcprepstart,bcprepend;
  val prepstart,prepend;
  Boolean printcust,fwdprint;
  string 20 lastprintcu;
  val custstart;
  Boolean onlybal,addtot;
  record APPayHistVc firstAPPayHistr;
  boolean veprinted1;
  record BaseCurBlock BCb;
  
  BlockLoad(BCb);
  veprinted1 = true;
  lastprep = -1;
  TrHs = true;
  fwdprint = true;
  ResetLoop(APPayHistr);
  while (LoopKey("TransDate",APPayHistr,2,TrHs)) begin
    testf = true;
    if nonblank(RepSpec.f1) then begin 
      if (RepSpec.f1<>APPayHistr.VECode) then begin
        testf = false;
      end;
    end;
    if (RepSpec.long1<>-1) then begin
      if (RepSpec.long1<>APPayHistr.VEPNr) then begin
        testf = false;
      end;  
    end;
    if (APPayHistr.VEPNr==-1) then begin
      testf = false;
    end;
    if ((RepSpec.f3<>APPayHistr.CurncyCode) and (nonblank(RepSpec.f3))) then begin
      testf = false;
    end;
    if (testf) then begin
      if (APPayHistr.VEPNr<>lastprep) then begin 
        if (testf) then begin
          testf = ContactInGroupClass2(APPayHistr.VECode,RepSpec.f7,RepSpec.f4,RepSpec.f5,"SUPP","","");
        end;
      end;  
    end;
    if (nonblank(RepSpec.FirstAcc)) then begin
      if (testf) then begin
        if (nonblank(APPayHistr.APAcc)) then begin
          if (APPayHistr.APAcc!=RepSpec.FirstAcc) then begin testf = false; end;
        end else begin
          if (GetSupplierOnAccountAC(APPayHistr.VECode)!=RepSpec.FirstAcc) then begin
            testf = false;
          end;
        end;
      end;
    end;
    onlybal = false;
    if testf then begin 
      fwdprint = true;
      if (DateInRange(APPayHistr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==true) then begin
        prepstart = FindPrepaymentFwdBalance(RepSpec,APPayHistr.VEPNr,tt,CurTotalsr,APPayHistr.TransDate,false);
        fwdprint = true;
      end else begin 
        testf = false;
        firstAPPayHistr.VEPNr = APPayHistr.VEPNr;
        if ReadFirstMain(firstAPPayHistr,1,true) then begin
          if  (firstAPPayHistr.TransDate==APPayHistr.TransDate) and (firstAPPayHistr.VEPNr == APPayHistr.VEPNr) and (firstAPPayHistr.FileName == APPayHistr.FileName) and (firstAPPayHistr.SerNr == APPayHistr.SerNr) then begin
            prepstart = FindPrepaymentFwdBalance(RepSpec,APPayHistr.VEPNr,tt,CurTotalsr,RepSpec.sStartDate,true);
            if (prepstart!=0) then begin
              onlybal = true;
            end;
          end;
        end;
      end;
    end; 
    if (testf) or onlybal then begin
      if (APPayHistr.VEPNr<>lastprep) then begin
        if (lastprep<>-1)  then begin
          StartFormat(15);
          EndFormat;
          prepend = 0;
          bcfwdbal = 0;
          bcprepstart = 0;
          bcprepend = 0;
        end;
        fwdprint = true;
        if (APPayHistr.VEPNr!=-1) and onlybal then begin
          PrepLine(APPayHistr.VEPNr,APPayHistr.CurncyCode,APPayHistr.VECode,RepSpec.flags[1],lastprintcu,prepstart,veprinted1);
          Black_Divider(5,1);
          onlybal = false;
        end;
      end;
      lastprep = APPayHistr.VEPNr;
      lastcu = APPayHistr.VECode;
      lastcurr = APPayHistr.CurncyCode;
      if testf then begin
        Print_PrepHist(BCb,tt,RepSpec,APPayHistr,CurTotalsr,lastprep,lastcu,lastcurr,lastprintcu,prepend,bcprepend,fwdprint,prepstart,veprinted1);
      end;                     
    end;
  end;  
  if onlybal then begin
    if (APPayHistr.VEPNr<>lastprep)  then begin
      PrepLine(lastprep,lastcurr,lastcu,RepSpec.flags[1],lastprintcu,prepstart,veprinted1);
      OutString(2,0,USetStr(7828),false);
      OutVal(1,0,prepstart,M4Val,true);  
      EndFormat;
      StartFormat(15);
      EndFormat;
    end;
  end;
 
  return;
end;  
            
global
procedure PerPayHisPLRn(record RcVc RepSpec)
begin
  val tt,tt1;
  record CUVc CUr;
  boolean TrHs,test,veprinted;
  record SMVc CurTotalsr;
  integer rw;
  string 255 tstr;
  
  StartReportJob(USetStr(7811));
  rw = 1;

  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  
  tstr = USetStr(7823);
  switch (RepSpec.flags[1]) begin
    case 0:
      tstr = tstr & USetStr(7812);
    case 1:
      tstr = tstr & USetStr(7820);
    case 2:
      tstr = tstr & USetStr(7814);
  end;

  Header(rw,tstr,0);
  
  HTSupps(RepSpec.f1,RepSpec.f1,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  
  if (HasCategories) then begin
    HTLevCat(RepSpec.f7,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasContactClassification) then begin
    HTCustClass(RepSpec.f4,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;  
  HTCustClassType(RepSpec.f5,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end; 
  
  if (RepSpec.long1<>-1) then begin
    tstr = RepSpec.long1;
    tstr = USetStr(7812) & " " & tstr;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  EndHeader;
     
  SetRepCol(2,120);
  SetRepCol(3,200);
  SetRepCol(4,270);
  SetRepCol(5,345);
  SetRepCol(6,400);

  if (RepSpec.long1!=-1) then begin
    veprinted = true;
    PerPayHisPLRn_SortByPrep(RepSpec,tt,CurTotalsr,veprinted);
    goto LPerPayHisSLRn;
  end;
  if nonblank(RepSpec.f1) then begin 
    veprinted = true;
    PerPayHisPLRn_SortByPrep(RepSpec,tt,CurTotalsr,veprinted);
    goto LPerPayHisSLRn;
  end;
  switch (RepSpec.flags[1]) begin
    case 0:
      veprinted = true;
      PerPayHisPLRn_SortByPrep(RepSpec,tt,CurTotalsr,veprinted);
    case 1:
      CUr.Code = "";
      CUr.VEType = 1;
      TrHs = true;
      while (LoopKey("VEActCode",CUr,1,TrHs)) begin
        test = true;
        if (CUr.VEType==0) then begin 
          TrHs = false;
          test = false;
        end;
        if (CUr.OnAccount!=1) then begin 
          test = false;
        end;
        if (test) then begin
          test = ContactInGroupClass2("",RepSpec.f7,RepSpec.f4,RepSpec.f5,"SUPP",CUr.VECat,CUr.Classification);
        end;
        if (test) then begin 
          RepSpec.f1 = CUr.Code;
          tt1 = 0;
          veprinted = false;
          PerPayHisPLRn_SortByPrep(RepSpec,tt1,CurTotalsr,veprinted);
          tt = tt + tt1;
          if (veprinted) then begin
            Gray_Divider(0,1);
            StartFormat(15);
            OutString(2,0,USetStr(7820) & " " & USetStr(7828),false);
            OutVal(1,0,tt1,M4Val,true);
            EndFormat;
            StartFormat(15);
            EndFormat;
          end;
        end;
      end;
    case 2:
      PerPayHisPLRn_SortByTransDate(RepSpec,tt,CurTotalsr);
  end;
LPerPayHisSLRn:;
  Gray_Divider(0,1);
  if (RepSpec.flags[4]==0) then begin
    PrintCurTotalsRow(CurTotalsr,7824,150,450,-1,-1);
  end;  
  StartFormat(15);
  OutString(2+40,0,USetStr(7826),false);
  OutVal(1,0,tt,M4Val,true);
  EndFormat;
  EndJob;
  return;
end;
