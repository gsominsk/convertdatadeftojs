external function Boolean HasContactClassification();
external function Boolean HasCategories();
external procedure HTCustCat(string,var string);
external procedure HTCustClass(string,var string);
external function Boolean ContactInGroupClass(string,string,string,string,string,string);
external function Boolean CheckTodoAcessAct(record ActVc,string);
external function Boolean CheckActTypeClass(string,string);
external function Boolean WrapAndPrint(Integer,string,Integer);
external procedure ExtractObj(string,var Integer,var string);
external procedure GetUserName(string,var string);
external procedure HT2Per(Date, Date , var string);

procedure RepAct(record RcVc RepSpec,record ActVc Actp,Integer sortord,var val perscosttimev,var val totcostprofiletimev)
BEGIN
  Integer i,rwcnt;
  row ActVc Actrw;
  
  if (Actp.CalTimeFlag==1 and Actp.TodoFlag==0) then begin
    perscosttimev = perscosttimev + TimeToVal(Actp.CostTime);
  end;
  if (Actp.CalTimeFlag==2 and Actp.TodoFlag==0) then begin
    totcostprofiletimev = totcostprofiletimev + TimeToVal(Actp.CostTime);
  end;
  if (sortord==0) then begin // Never true...
      StartFormat(15);
      OutDateID(0,"DblActVc",Actp.TransDate,false,Actp.SerNr);
      OutString(70,0,Actp.ActType,false);
      OutString(130,"DblPersAct",Actp.MainPersons,false);
      if (RepSpec.flags[6]!=0) then begin
        OutString(190,0,Left(Actp.CUName,18),false);
      end else begin      
        OutString(190,0,Actp.Contact,false);
      end;
      if (Actp.CalTimeFlag==2) then begin
        OutString(310,0,"x",false);
      end else begin
        OutString(310,0,"",false);
      end;
      if (WrapAndPrint(325,Actp.Comment,35)) then begin
        EndFormat;
      end;
      if (RepSpec.ArtMode==1) then begin
        rwcnt = MatRowCnt(Actp);
        for (i = 0 ; i<rwcnt ;i=i+1) begin
          MatRowGet(Actp,i,Actrw);
          StartFormat(15);
          OutString(100,0,Actrw.TextCode,false);
          if (WrapAndPrint(150,Actrw.Text,130)) then begin
            EndFormat;
          end;
        end;
        StartFormat(10);
        EndFormat;
      end;
  end;
  if (sortord==1) then begin
      StartFormat(15);
      OutDateID(0,"DblActVc",Actp.TransDate,false,Actp.SerNr);
      OutString(70,0,Actp.ActType,false);
      OutString(130,"DblCustAct",Actp.CUCode,false);
      if (RepSpec.flags[6]!=0) then begin
        OutString(190,0,Left(Actp.CUName,18),false);
      end else begin      
        OutString(190,0,Actp.Contact,false);
      end;
      if (nonblank(Actp.CostTime)) then begin
        OutVal(305,0,TimeToVal(Actp.CostTime),M4Val,true);
      end else begin
        OutString(305,0,"",true);
      end;
      if (Actp.CalTimeFlag==2) then begin
        OutString(310,0,"x",false);
      end else begin
        OutString(310,0,"",false);
      end;
      if (WrapAndPrint(325,Actp.Comment,35)) then begin
        EndFormat;
      end;
      if (RepSpec.ArtMode==1) then begin
        rwcnt = MatRowCnt(Actp);
        for (i = 0 ; i<rwcnt ;i=i+1) begin
          MatRowGet(Actp,i,Actrw);
          StartFormat(15);
          OutString(100,0,Actrw.TextCode,false);
          if (WrapAndPrint(150,Actrw.Text,130)) then begin
            EndFormat;
          end;
        end;
        StartFormat(10);
        EndFormat;
      end;
  end;
  RETURN;
END;

procedure PrintCustAct(record RcVc RepSpec,record UserVc USp,Integer okflag,Integer todoflag,var Boolean printedf,var Integer counter,var val perscosttimev,var val totcostprofiletimev)
BEGIN
  record CUVc CUr;
  Boolean TrHs,testf;
  string 20 frcc,tocc;
  record ActVc Actp;
  string 255 ckey;
  string 255 tstr;
  String 5 curuser;  

  curuser = CurrentUser;
  frcc = FirstInRange(RepSpec.f1,20);   
  tocc = LastInRange(RepSpec.f1,20);    
  ckey = "UserMain:";
  tstr = USp.Code;
  ckey = ckey & tstr;
  Actp.TransDate = RepSpec.sStartDate;
//  Actp.StartTime.hour = -1;
//  Actp.EndTime.hour = -1;
  Actp.OKFlag = okflag;
  Actp.TodoFlag = todoflag;
  TrHs = true;
  while (LoopKey(ckey,Actp,3,TrHs)) begin
    if (TrHs) then begin
      if (DateInRange(Actp.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin TrHs = false; end;
      if (Actp.TodoFlag!=todoflag) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      testf = true;
      if (okflag==1) then begin
        if (Actp.OKFlag==0) then begin testf = false; end;
        if (RepSpec.flags[1]==0) then begin testf = false; end;
      end else begin
        if (Actp.OKFlag==1) then begin testf = false; end;
        if (RepSpec.flags[2]==0) then begin testf = false; end;
      end;
      if (RepSpec.flags[7]==0) then begin 
        if (Actp.CalTimeFlag==1) then begin testf = false; end;
      end;
      if (RepSpec.flags[8]==0) then begin 
        if (Actp.CalTimeFlag==2) then begin testf = false; end;
      end;
      if (RepSpec.flags[9]==0) then begin 
        if (Actp.CalTimeFlag==0) then begin testf = false; end;
      end;
      
      if (Actp.Invalid!=0) then begin testf = false; end;
      if (nonblank(frcc)) then begin
        if (Actp.CUCode<frcc) then begin testf = false; end;
      end;  
      if (nonblank(tocc)) then begin
        if (Actp.CUCode>tocc) then begin testf = false; end;
      end;  
      if (testf) then begin
        if (nonblank(RepSpec.f3)) then begin
          if (Actp.ActType<>RepSpec.f3) then begin testf = false; end;
        end;
      end;
      if (testf) then begin
        testf = CheckActTypeClass(RepSpec.FirstAcc,Actp.ActType);
      end;
      if (testf) then begin 
        if (nonblank(Actp.CUCode)) then begin
          testf = ContactInGroupClass(Actp.CUCode,RepSpec.f7,RepSpec.Stext,"CUST","","");    
        end;
      end;          
      if (testf) then begin
        if (Actp.PrivateFlag!=0) then begin
          if ((SetInSet(curuser,Actp.MainPersons)==false) and
              (SetInSet(curuser,Actp.CCPersons)==false)) then begin
            testf = false;
          end;
        end;
      end;      
      if (testf) then begin
        testf = CheckTodoAcessAct(Actp,CurrentUser);
      end;
      if (testf) then begin
        if (printedf==false) then begin
          StartFormat(15);
          switch (todoflag) begin
            case 0:
              OutString(0,0,USetStr(6678),false);
            otherwise
              OutString(0,0,USetStr(6677),false);
          end;
          EndFormat;
          StartFormat(15);
       //   OpM42(0,0,Actp.MainPersons,M4Str,false);
          OutString(0,0,USp.Code,false);
          OutString(100,0,USp.Name,false);
          EndFormat;
          Gray_Divider(0,200);
          StartFormat(15);
          OutString(0,0,USetStr(6682),false);
          OutString(70,0,USetStr(6687),false);
          OutString(130,0,USetStr(6686),false);
          OutString(190,0,USetStr(6688),false);
          OutString(305,0,USetStr(6826),true);
          OutString(310,0,"P",false);
          OutString(325,0,USetStr(6685),false);
          EndFormat;
          Gray_Divider(0,1);
          printedf = true;
        end;
        RepAct(RepSpec,Actp,1,perscosttimev,totcostprofiletimev);
        counter = counter + 1;
      end;
    end;
  end;
  RETURN;
END;

procedure PrintPersonData(record RcVc RepSpec,string frpers,string topers,var LongInt totcounter,Integer todoflag,var val totcosttimev)
BEGIN
  record UserVc USr;
  Boolean TrHs;
  Boolean printedf;
  Integer counter;
  val perscosttimev;
  val perscostprofiletimev;

  USr.Code = frpers;
  Gray_Divider(0,1);
  TrHs = true;    
  while (LoopMain(USr,1,TrHs)) begin
    printedf = false;
    if ((nonblank(RepSpec.f2)) or (nonblank(RepSpec.AccStr))) then begin
      if (USr.Code>topers) then begin TrHs = false; end;
    end;  
    if (TrHs) then begin
      perscosttimev = blankval;
      PrintCustAct(RepSpec,USr,0,todoflag,printedf,counter,perscosttimev,perscostprofiletimev);
      PrintCustAct(RepSpec,USr,1,todoflag,printedf,counter,perscosttimev,perscostprofiletimev);
      if (printedf) then begin
        Gray_Divider(0,1);
        StartFormat(15);
        if (perscosttimev!=0) then begin
          OutString(200,0,USetStr(6683),false);
          OutVal(305,0,perscosttimev,M4Val,true);
        end;
        if (todoflag==0) then begin
          OutString(450,0,USetStr(6690),true);
        end else begin
          OutString(450,0,USetStr(6694),true);
        end;
        OutString(480,0,counter,true);
        EndFormat;
        if (perscostprofiletimev!=0) then begin
          StartFormat(15);
          OutString(200,0,USetStr(6673),false);        
          OutVal(305,0,perscostprofiletimev,M4Val,true);
          EndFormat;
          perscostprofiletimev = 0;
        end;
        totcounter = totcounter + counter;
        totcosttimev = totcosttimev + perscosttimev;
        counter = 0;
      end;
    end;
  end;
  RETURN;
END;

global
procedure ActPers1CompanyRn(record RcVc RepSpec,string frpers, string topers,var LongInt totcounter,var val totcosttimev)
BEGIN
  Integer rw;
  string 255 tstr,usersstr,name;
  record CalDispGroupBlock CalDispGroupRec;
  row CalDispGroupBlock CalDispGrouprw;
  Integer i,rwcnt,pos;
  
 if (blank(RepSpec.f2)) and (nonblank(RepSpec.AccStr)) then begin
    BlockLoad(CalDispGroupRec);
    rwcnt = MatRowCnt(CalDispGroupRec);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CalDispGroupRec,i,CalDispGrouprw);
      if (CalDispGrouprw.Code==RepSpec.AccStr) then begin
        usersstr = CalDispGrouprw.DefStr;
        goto LBREAK;
      end;
    end;
LBREAK:;
    pos = 0;
    ExtractObj(usersstr,pos,tstr);
    while (nonblank(tstr)) begin
      StartFormat(5);
      EndFormat;    
      StartFormat(15);
      OutString(0,0,USetStr(6684),false);
      OutString(100,0,tstr,false);
      GetUserName(tstr,name);
      OutString(200,0,name,false);
      EndFormat; 
      Gray_Divider(0,200);        
      if (RepSpec.flags[3]!=0) then begin 
        PrintPersonData(RepSpec,tstr,tstr,totcounter,0,totcosttimev);
      end;
      if (RepSpec.flags[4]!=0) then begin 
        PrintPersonData(RepSpec,tstr,tstr,totcounter,1,totcosttimev);
      end;
      if (RepSpec.flags[5]!=0) then begin 
        PrintPersonData(RepSpec,tstr,tstr,totcounter,2,totcosttimev);
      end;
      if (RepSpec.flags[10]!=0) then begin 
        PrintPersonData(RepSpec,tstr,tstr,totcounter,4,totcosttimev);
      end;
      ExtractObj(usersstr,pos,tstr);
    end;
    StartFormat(0);
    EndFormat;
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(450,0,USetStr(6690),true);
    OutString(480,0,totcounter,true);
    EndFormat;
  end else begin
    if (RepSpec.flags[3]!=0) then begin 
      PrintPersonData(RepSpec,frpers,topers,totcounter,0,totcosttimev);
    end;
    if (RepSpec.flags[4]!=0) then begin 
      PrintPersonData(RepSpec,frpers,topers,totcounter,1,totcosttimev);
    end;
    if (RepSpec.flags[5]!=0) then begin 
      PrintPersonData(RepSpec,frpers,topers,totcounter,2,totcosttimev);
    end;
    if (RepSpec.flags[10]!=0) then begin 
      PrintPersonData(RepSpec,frpers,topers,totcounter,4,totcosttimev);
    end;
  end;
  RETURN;
END;

procedure ActPersAllCompRn(record RcVc RepSpec,string frpers,string topers,var LongInt totalcomp,var val totcosttimev)
BEGIN
  record CompaniesBlock CompaniesRec;
  row CompaniesBlock comprw;
  Integer i,rwcnt;
  Integer compnr,curcomp;
  LongInt totcounter;
  val compcosttimev;
  
  totalcomp = 0;
  BlockLoad(CompaniesRec);
  curcomp = CurrentCompany;  
  
  rwcnt = MatRowCnt(CompaniesRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CompaniesRec,i,comprw);
    //if (comprw.ActiveStatus==0) then begin
      if (SetCompanyCode(comprw.CompCode,false)) then begin
        StartFormat(15);
        OutString(0,0,USetStr(7661) & ":",false);
        OutString(80,0,comprw.CompCode,false);
        OutString(100,0,comprw.CompName,false);
        EndFormat;
        totcounter = 0;
        ActPers1CompanyRn(RepSpec,frpers,topers,totcounter,compcosttimev);
        Gray_Divider(0,1);
        StartFormat(15);
//        OutString(450,0,USetStr(6690) & " " & USetStr(13580) & comprw.CompCode ,true);
        OutVal(305,0,compcosttimev,M4Val,true);
        OutString(480,0,totcounter,true);
        EndFormat;
        totalcomp = totalcomp + totcounter;
        totcosttimev = totcosttimev + compcosttimev;
      end;
    //end;  
  end;
  Gray_Divider(0,1);
  StartFormat(15);
//  OutString(450,0,USetStr(6690) & " " & USetStr(13577),true);
  OutVal(305,0,totcosttimev,M4Val,true);
  OutString(480,0,totalcomp,true);
  EndFormat;
  ResetCompany(curcomp);
  RETURN;
END;

global
procedure ActPersRn(record RcVc RepSpec)
begin
  Integer rw;
  string 255 tstr;
  string 20 frpers,topers;
  LongInt totalcomp,totcounter;
  val totcosttimev;
  
  frpers = FirstInRange(RepSpec.f2,10);  
  topers = LastInRange(RepSpec.f2,10);  
  
  StartReportJob(USetStr(6681));  
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw +1;
  if (nonblank(RepSpec.f1)) then begin
    tstr = USetStr(6686);
    tstr = tstr & " ";
    tstr = tstr & RepSpec.f1;
    Header(rw,tstr,1);
    rw = rw + 1;
  end; 
  if (nonblank(RepSpec.f2)) then begin
    tstr = USetStr(6684);
    tstr = tstr & " ";
    tstr = tstr & RepSpec.f2;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f3)) then begin
    tstr = USetStr(6687);
    tstr = tstr & " ";
    tstr = tstr & RepSpec.f3;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (HasContactClassification) then begin
    HTCustClass(RepSpec.Stext,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;  
  if (HasCategories) then begin
    HTCustCat(RepSpec.f7,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;  
  if (RepSpec.IncDaughter==1) then begin
    tstr = USetStr(13577);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  EndHeader;
  if (RepSpec.IncDaughter==0) then begin
    totcounter = 0;
    ActPers1CompanyRn(RepSpec,frpers,topers,totcounter,totcosttimev);
    Gray_Divider(0,1);
    StartFormat(15);
    OutVal(305,0,totcosttimev,M4Val,true);
    OutString(480,0,totcounter,true);
    EndFormat;
  end else begin
    ActPersAllCompRn(RepSpec,frpers,topers,totalcomp,totcosttimev);
  end;
  EndJob;
  RETURN;
END;
