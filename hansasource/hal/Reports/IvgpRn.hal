external procedure PIVGP1Rn(record RcVc,LongInt,LongInt,string,string,string,string,var val,var val);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function val FindTAX1(string,val,Integer,Integer);
external procedure HT2Per(Date, Date , var string);
external function string 255 CreateInvoiceNumber(LongInt,string);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val FindVAT(string,val,Integer,Integer);
external procedure HTCusts(string, string, var string);
external procedure HTOKF(Integer,Integer, var string);
external procedure HTArtSel(string,string, var string);
external procedure HTSaleMan(string, var string);
external procedure HTDetailLevel(Integer, var string);
external procedure HTNr(Integer,Integer,LongInt,LongInt,var string);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);

function val IVGetFIFO(record IVVc IVp,Integer rownr,val FIFORowVal,val FIFO,val qty)
begin
  val res,shqty;
  row IVVc IVrw;
  row IVVc tmpIVrw;
  record SHVc SHr;
  row SHVc SHrw;
  Boolean TrHs;
  Integer i,rwcnt;
  val orgqty;
  
  if (FIFORowVal!=blankval) then begin
    res = FIFORowVal;
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
      if (nonblank(FIFO)) then begin
        res = qty*FIFO;
      end;
    end;
  end else begin
    MatRowGet(IVp,rownr,IVrw);
    if ((IVp.OrderNr!=-1) and (IVrw.OrdRow!=-1)) then begin
      if (IVrw.CreditedRow>=0) then begin
        rwcnt = MatRowCnt(IVp);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVp,i,tmpIVrw);
          if (tmpIVrw.stp==kInvoiceRowTypeNormal) or (tmpIVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (tmpIVrw.stp==kInvoiceRowTypeMultiBuyDiscount) then begin
            if (tmpIVrw.CreditedRow==IVrw.CreditedRow) then begin
              i = rwcnt;
              orgqty = tmpIVrw.Quant;
            end;
          end;
        end;
      end else begin
        orgqty = IVrw.Quant;
      end;
      if (orgqty<=0) then begin orgqty = 1.00; end;
      
      SHr.OrderNr = IVp.OrderNr;
      TrHs = true;
      while (LoopKey("OrderKey",SHr,1,TrHs)) begin
        if (SHr.OrderNr!=IVp.OrderNr) then begin
          TrHs = false;
        end;        
        if (TrHs) then begin
          rwcnt = MatRowCnt(SHr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(SHr,i,SHrw);
            if ((SHrw.OrdRow==IVrw.OrdRow) and (IVrw.Quant>shqty)) then begin
              res = res + SHrw.Ship*SHrw.FIFO;
              shqty = shqty + SHrw.Ship;
            end;
          end;
        end;
      end;
    end;
    res = (res*qty)/orgqty;
  end;    
  IVGetFIFO = res;
  return;
end;

global
procedure InvoiceType(Integer tp,var string res)
begin
  res = ""; 
  switch (tp) begin
    case 1: res = USetStr(1803);
    case 2: res = USetStr(1804);
    case 3: res = USetStr(1805);
    case 4: res = USetStr(1810);
    case 5: res = USetStr(1806);
    case 6: res = USetStr(1818);
    case 7: res = USetStr(1872);
    case 8: res = USetStr(1879);
    case 9: // Cashin....
    case 10: res = USetStr(1644);
  end;
  return;
end;

procedure RepIVGP(record IVVc IVp, var val totquanp, var val totcsump,var val tivsum,var val tivgps,record RcVc RepSpec,val fr,val tb1,val tb2,val br1,val br2)
begin
  Integer i,rwcnt;
  row IVVc IVrw;
  string 255 tstr,t2;
  val gps,gp;
  val rowinbase,ivsum;
  val diff,totdiff;
  Boolean skipitem,firstf,infound;
  record INVc INr;
  val t,rowGP,quant;
  record TaxMatrixVc TMr;
  
  firstf = true;
  tivsum = blankval;
  tivgps = blankval;
  totquanp = 0;
  totdiff = 0;
  rwcnt = MatRowCnt(IVp);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (IVrw.stp==5) then begin
      if (firstf) then begin
        Gray_Divider(0,1);
        StartFormat(15);
        tstr =  CreateInvoiceNumber(IVp.SerNr,IVp.OfficialSerNr);
        OutString(0,"DblIVVc",tstr,false);
        InvoiceType(IVp.InvType,tstr);
        OutString(50,0,tstr,false);
        OutDate(130,0,IVp.InvDate,false);
        OutString(200,0,IVp.Addr0,false);
        if (IVp.OKFlag==0) then begin
          OutString(480,0,USetStr(2366),true);
        end;  
        EndFormat;
        firstf = false;
      end;
      UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
      switch (RepSpec.flags[11]) begin
        case 2: 
          t = MULRATETOBASE2(IVp.CurncyCode,IVrw.Sum,fr,tb1,tb2,br1,br2,DefaultCurRoundOff);
          FindSalesExVat(TMr,IVrw.VATCode,t,IVp.InclVAT,IVp.NoTAXonVAT,rowinbase);
          rowGP = rowinbase - IVrw.BasePriceB2;
        case 1: 
          t = MULRATETOBASE1(IVp.CurncyCode,IVrw.Sum,fr,tb1,tb2,br1,br2,DefaultCurRoundOff);
          FindSalesExVat(TMr,IVrw.VATCode,t,IVp.InclVAT,IVp.NoTAXonVAT,rowinbase);
          rowGP = rowinbase - IVGetFIFO(IVp,i,IVrw.FIFORowVal,IVrw.FIFO,IVrw.Quant);        
        otherwise
          t = MULRATETOBASE1(IVp.CurncyCode,IVrw.Sum,fr,tb1,tb2,br1,br2,DefaultCurRoundOff);
          FindSalesExVat(TMr,IVrw.VATCode,t,IVp.InclVAT,IVp.NoTAXonVAT,rowinbase);
          rowGP = IVrw.rowGP;
          if (blank(rowGP)) then begin
            if (IVrw.stp==kInvoiceRowTypeMultiBuyDiscount) then begin
              t = MULRATETOBASE1(IVp.CurncyCode,IVrw.Sum,fr,tb1,tb2,br1,br2,DefaultCurRoundOff);
              FindSalesExVat(TMr,IVrw.VATCode,t,IVp.InclVAT,IVp.NoTAXonVAT,rowinbase);
              t = IVrw.Quant * IVrw.BasePrice;
              if (IVrw.PriceFactor!=0) then begin
                t = t/IVrw.PriceFactor;
              end;
              rowGP = rowinbase - t;
            end;
          end;
      end;
      diff = rowinbase - rowGP;      
      StartFormat(15);
      OutVal(350,0,rowinbase,M4Val,true);  
      OutVal(420,0,diff,M4Val,true);
      OutVal(480,0,rowGP,M4Val,true);
      EndFormat;
//      totdiff = totdiff + diff;
//      ivsum = ivsum + rowinbase;// downpayment here ? 
//      gps = gps + rowGP;
    end;
    if (IVrw.stp==3) then begin
      if (firstf) then begin
        Gray_Divider(0,1);
        StartFormat(15);
        tstr =  CreateInvoiceNumber(IVp.SerNr,IVp.OfficialSerNr);
        OutString(0,"DblIVVc",tstr,false);
        InvoiceType(IVp.InvType,tstr);
        OutString(50,0,tstr,false);
        OutDate(130,0,IVp.InvDate,false);
        OutString(200,0,IVp.Addr0,false);
        if (IVp.OKFlag==0) then begin
          OutString(480,0,USetStr(2366),true);
        end;  
        EndFormat;
        firstf = false;
      end;
      StartFormat(15);
      t2 = USetStr(1807);
      t2 = t2 & CreateInvoiceNumber(IVrw.OrdRow,IVrw.CredOfficialSerNr);
      OutString(130,0,t2,false);
      EndFormat;
    end;
    if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeMultiBuyDiscount) or (IVrw.stp==kInvoiceRowTypeCorrection)  or ((IVrw.stp==kInvoiceRowTypeDownPayment) and (IVp.InvType==kInvoiceTypeDownpayment)) then begin
            skipitem = false;
            if (nonblank(RepSpec.FirstAcc)) or (nonblank(RepSpec.LastAcc)) or (nonblank(RepSpec.f6)) then begin
              infound = ReadFirstItem(IVrw.ArtCode,INr,false,true);
            end;
            if (nonblank(RepSpec.FirstAcc)) then begin
              if (RepSpec.FirstAcc<>INr.Code) and ((RepSpec.FirstAcc<>IVrw.ArtCode)) then begin
                skipitem = true;
              end;  
            end;
            if (nonblank(RepSpec.LastAcc)) or (nonblank(RepSpec.f6)) then begin
              INr.Code = IVrw.ArtCode;
              if (nonblank(RepSpec.LastAcc)) then begin
                if (infound) then begin
                  if (RepSpec.LastAcc<>INr.Group) then begin
                    skipitem = true;
                  end;
                end else begin
                  skipitem = true;
                end;
              end;
              if (nonblank(RepSpec.f6)) then begin
                if (SetInSet(RepSpec.f6,INr.DispGroups)==false) then begin
                  skipitem = true;
                end;
              end;
            end;
            if (nonblank(RepSpec.f3)) then begin
              if (SetInSet(RepSpec.f3,IVrw.Objects)==false) then begin
                skipitem = true;
              end;
            end;    
            if (skipitem==false) then begin
              if (firstf) then begin
                Gray_Divider(0,1);
                StartFormat(15);
                tstr =  CreateInvoiceNumber(IVp.SerNr,IVp.OfficialSerNr);
                OutString(0,"DblIVVc",tstr,false);
                InvoiceType(IVp.InvType,tstr);
                OutString(50,0,tstr,false);
                OutDate(130,0,IVp.InvDate,false);
                OutString(200,0,IVp.Addr0,false);
                if (IVp.OKFlag==0) then begin
                  OutString(480,0,USetStr(2366),true);
                end;  
                EndFormat;
                firstf = false;
              end;
              UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
              switch (RepSpec.flags[11]) begin
                case 2: 
                  t = MULRATETOBASE2(IVp.CurncyCode,IVrw.Sum,fr,tb1,tb2,br1,br2,DefaultCurRoundOff);
                  FindSalesExVat(TMr,IVrw.VATCode,t,IVp.InclVAT,IVp.NoTAXonVAT,rowinbase);
                  gp = rowinbase - IVrw.BasePriceB2;
                case 1: 
                  t = MulRateToBase1(IVp.CurncyCode,IVrw.Sum,fr,tb1,tb2,br1,br2,DefaultCurRoundOff);
                  FindSalesExVat(TMr,IVrw.VATCode,t,IVp.InclVAT,IVp.NoTAXonVAT,rowinbase);
                  gp = rowinbase - IVGetFIFO(IVp,i,IVrw.FIFORowVal,IVrw.FIFO,IVrw.Quant);                
                otherwise
                  t = MulRateToBase1(IVp.CurncyCode,IVrw.Sum,fr,tb1,tb2,br1,br2,DefaultCurRoundOff);
                  FindSalesExVat(TMr,IVrw.VATCode,t,IVp.InclVAT,IVp.NoTAXonVAT,rowinbase);
                  gp = IVrw.rowGP;
                  if (blank(gp)) then begin
                    if (IVrw.stp==kInvoiceRowTypeMultiBuyDiscount) then begin
                      t = MulRateToBase1(IVp.CurncyCode,IVrw.Sum,fr,tb1,tb2,br1,br2,DefaultCurRoundOff);
                      FindSalesExVat(TMr,IVrw.VATCode,t,IVp.InclVAT,IVp.NoTAXonVAT,rowinbase);
                      t = IVrw.Quant * IVrw.BasePrice;
                      if (IVrw.PriceFactor!=0) then begin
                        t = t/IVrw.PriceFactor;
                      end;
                      gp = rowinbase - t;
                    end;
                  end;
              end;
              diff = rowinbase - gp;
              if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
                switch (IVrw.stp) begin
                  case 11:
                    ivsum = ivsum - rowinbase;
                    gps = gps - gp;
                    diff = diff;
                    rowGP = gp;
                    quant = IVrw.Quant;
                  otherwise 
                    ivsum = ivsum + rowinbase;
                    gps = gps + gp;
                    diff = -diff;
                    rowGP = -gp;
                    rowinbase = -rowinbase;
                    quant = -IVrw.Quant;
                end;
              end else begin
                ivsum = ivsum + rowinbase;
                gps = gps + gp;
                rowGP = gp;
                quant = IVrw.Quant;
              end;
              totdiff = totdiff + diff;
              totquanp = totquanp + quant;
              if (rowGP!=0) or (quant!=0) or (rowinbase!=0) then begin
                StartFormat(15);
                OutString(20,0,IVrw.ArtCode,false);
                OutVal(124,0,quant,M4UVal,true);
                OutString(130,0,IVrw.Spec,false);
                OutVal(350,0,rowinbase,M4Val,true);
  
                OutVal(420,0,diff,M4Val,true);
                OutVal(480,0,rowGP,M4Val,true);//IVrw
                EndFormat;
              end;
/*
              diff = rowinbase - gp;
              StartFormat(15);
              OutVal(420,0,diff,M4Val,true);
              EndFormat;
*/
            end;
    end;
  end;
  if (IVp.FrPrice<>0) then begin
    StartFormat(15);
    OutString(20,0,IVp.FrItem,false);
    OutVal(350,0,IVp.FrBase,M4Val,true);
    OutVal(480,0,IVp.FrGP,M4Val,true);
    EndFormat;
  end;
  if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
    tivsum = tivsum - ivsum;
    tivgps = tivgps - gps;
    tivgps = tivgps - IVp.FrGP;
    tivsum = tivsum - IVp.FrBase;
  end else begin
    tivsum = tivsum + ivsum;
    tivgps = tivgps + gps;
    tivgps = tivgps + IVp.FrGP;
    tivsum = tivsum + IVp.FrBase;
  end;
  totcsump = totcsump + totdiff;
  ivsum = ivsum + IVp.FrBase;
  gps = gps + IVp.FrGP;
  if (gps!=0) or (totquanp!=0) or (ivsum!=0) then begin
    Black_Divider(110,480);
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
      ivsum = -ivsum;
      gps = -gps;
    end;
    StartFormat(15);
    OutVal(124,0,totquanp,M4Qty,true);
    OutVal(350,0,ivsum,M4Val,true);
    OutVal(420,0,totdiff,M4Val,true);
    OutVal(480,0,gps,M4Val,true);
    EndFormat;
    ivsum = ivsum + gps;
    StartFormat(15);
    OutString(100,0,IVp.Objects,false);
    EndFormat;
  end;
  return;
end;

global
procedure IVGPRn(record RcVc RepSpec)
begin
  record IVVc IVr;
  record IVVc orgIVr;
  Boolean TrHs;
  Integer i,rwcnt;
  val iv,gps,t,ivsum3;
  val TotSum,gpsum;
  Boolean testf,testf2;
  row IVVc IVrw;
  Boolean skipfr;
  record INVc INr;
  Boolean skipitem;
  Boolean wholeinv,infound;
  LongInt afr,ato;
  LongInt LLoop1;
  val totquan, sumquan, totcsum, sumcsum;
  string 255 tstr,location;
  Integer rw;
  string 255 frcu,tocu;
  val gpperc,gp,rowinbase;
  val fr,tb1,tb2,br1,br2;
  vector Boolean testfrowf;
  record TaxMatrixVc TMr;
  string 20 frdra,todra;
  val possum,posgp;

  afr = FirstInRange(RepSpec.f1,20);
  ato = LastInRange(RepSpec.f1,20);
  
  frcu = FirstInRange(RepSpec.f2,20);
  tocu = LastInRange(RepSpec.f2,20);

  StartReportJob(USetStr(2641));
  
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1)
  rw = rw + 1;
  HTDetailLevel(RepSpec.ArtMode,tstr);
  Header(rw,tstr,0)
  HTNr(1111,1112,afr,ato,tstr);
  Header(rw,tstr,1)
  rw = rw + 1;
  HTSaleMan(RepSpec.AccStr,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1)
    rw = rw + 1;
  end;  
  HTArtSel(RepSpec.FirstAcc,RepSpec.LastAcc,tstr);
  Header(rw,tstr,1)
  rw = rw + 1;
  HTCusts(frcu,tocu,tstr);
  Header(rw,tstr,1)
  rw = rw + 1;
  HTOKF(RepSpec.flags[1],RepSpec.flags[2],tstr);
  Header(rw,tstr,1)
  rw = rw + 1;
  EndHeader;
  
  SetRepCol(2,60);
  SetRepCol(3,140);
  SetRepCol(4,340);
  SetRepCol(5,410);
  SetRepCol(6,480);

  if (RepSpec.flags[12]==1) then begin 
    StartFormat(15);
    OutString(0,0,USetStr(2648),false);
    EndFormat;
    Black_Divider(0,1);
  end;
  if (RepSpec.ArtMode==0) then begin
      StartFormat(15);
      OutString(0,0,USetStr(2352),false);
      OutString(2,0,USetStr(2353),false);
      OutString(3,0,USetStr(2354),false);
      OutString(4,0,USetStr(2642),true);
      OutString(5,0,USetStr(2644),true);
      OutString(6,0,USetStr(2643),true);
      EndFormat;
   end;
   if (RepSpec.ArtMode==1) then begin
      StartFormat(15);
      OutString(0,0,USetStr(2352),false);
      OutString(130,0,USetStr(2353),false);
      OutString(350,0,USetStr(2642),true);
      OutString(420,0,USetStr(2572),true);
      OutString(480,0,USetStr(2643),true);
      EndFormat;
/*
      StartFormat(15);
      OutString(430,0,USetStr(2572),true);
      EndFormat;
*/
  end;
  
  IVr.InvDate = RepSpec.sStartDate;
  IVr.SerNr = 0;
  if (RepSpec.ArtMode==0) then begin
    Gray_Divider(0,1);
  end;  
  TrHs = true;
  while (LoopKey("InvDate",IVr,2,TrHs)) begin
    if (DateInRange(IVr.InvDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      testf2 = false;
      wholeinv = true;
      if (nonblank(RepSpec.TransStr)) then begin
        if (RepSpec.TransStr<>IVr.PayDeal) then begin testf = false; end;
      end;  
      if (nonblank(RepSpec.f2)) then begin
        if (RepSpec.f2<>IVr.CustCode) then begin testf = false; end;
      end;  
      if (nonblank(RepSpec.AccStr)) then begin
        if (SetInSet(RepSpec.AccStr,IVr.SalesMan)==false) then begin testf = false; end;
      end;  
      if (nonblank(RepSpec.f5)) then begin
        if (IVr.SalesGroup!=RepSpec.f5) then begin
          testf = false;
        end;
      end;
      
    if ((RepSpec.flags[1]==0) and (IVr.OKFlag==0)) then begin
      testf = false;
    end;
    if ((RepSpec.flags[2]==0) and (IVr.OKFlag<>0)) then begin
      testf = false;
    end;
    if ((ProgramType!=7) and (ProgramType!=8)) then begin
      if ((RepSpec.flags[3]==0) and (IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeNormalSpecialSales)) then begin
        testf = false;
      end;
    end;
    if ((RepSpec.flags[4]==0) and (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT)) then begin
      testf = false;
    end;
//    if (ProgramType<2) then begin
      if ((RepSpec.flags[5]==0) and (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales)) then begin
        testf = false;
      end;
//    end;
    if ((RepSpec.flags[6]==0) and (IVr.InvType==kInvoiceTypeInterest)) then begin
      testf = false;
    end;
    if ((RepSpec.flags[7]==0) and (IVr.InvType==kInvoiceTypePrepayment)) then begin
      testf = false;
    end;
    if ((RepSpec.flags[8]==0) and (IVr.InvType==kInvoiceTypeDownpayment)) then begin
      testf = false;
    end;

    if ((RepSpec.flags[10]<>0) and (IVr.SVONr==-1)) then begin
      testf = false;
    end;      
      if (afr<>-1) then begin
        if (IVr.SerNr<afr) then begin
           testf = false;
        end;
      end;     
      if (ato<>-1) then begin
        if (IVr.SerNr>ato) then begin
           testf = false;
        end;
      end; 
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,IVr.Objects)==false) then begin
          testf = false;
        end;
      end;  
      if (nonblank(RepSpec.Stext)) then begin
        if (RepSpec.Stext!=IVr.BranchID) then begin testf = false; end;
      end;
      if (IVr.Invalid<>0) then begin testf = false; end;
      if (IVr.InvType==kInvoiceTypePrepayment) then begin testf = false; end;
      if (testf) then begin
        testfrowf["Location"] = false;
        testfrowf["Item"] = false;
        testfrowf["ItemGroup"] = false;
        testfrowf["ItemClass"] = false;
        testfrowf["RowObject"] = false;
        if (nonblank(RepSpec.FirstAcc)) or (nonblank(RepSpec.LastAcc)) or (nonblank(RepSpec.f3)) or (nonblank(RepSpec.f4)) or (nonblank(RepSpec.f6)) then begin
          rwcnt = MatRowCnt(IVr);
          for (i=0; i<rwcnt; i=i+1) begin
            MatRowGet(IVr,i,IVrw);
            if (nonblank(RepSpec.f3)) then begin
              if (SetInSet(RepSpec.f3,IVrw.Objects)) then begin
                testfrowf["RowObject"] = true;
              end;
            end;
            if (nonblank(RepSpec.f4)) then begin
              location = IVrw.Location;
              if (blank(location)) then begin location = IVr.Location; end;
              if (location==RepSpec.f4) then begin
                testfrowf["Location"] = true;
              end;
            end;              
            if (nonblank(RepSpec.FirstAcc)) or (nonblank(RepSpec.LastAcc)) or (nonblank(RepSpec.f6)) then begin
              if (nonblank(IVrw.ArtCode)) then begin
                ReadFirstItem(IVrw.ArtCode,INr,false,true);
                if (nonblank(RepSpec.FirstAcc)) then begin
                  if (RepSpec.FirstAcc==INr.Code) or ((RepSpec.FirstAcc==IVrw.ArtCode)) then begin
                    testfrowf["Item"] = true;
                  end;
                end;
                if (nonblank(RepSpec.LastAcc)) then begin
                  if (INr.Group==RepSpec.LastAcc) then begin
                    testfrowf["ItemGroup"] = true;
                  end;
                end;
                if (nonblank(RepSpec.f6)) then begin
                  if (SetInSet(RepSpec.f6,INr.DispGroups)) then begin
                    testfrowf["ItemClass"] = true;
                  end;
                end;
              end;
            end;
          end;
          if (nonblank(RepSpec.FirstAcc)) then begin
            if (testfrowf["Item"]==false) then begin  testf = false;  end;
          end;
          if (nonblank(RepSpec.LastAcc)) then begin
            if (testfrowf["ItemGroup"]==false) then begin testf = false; end;
          end;
          if (nonblank(RepSpec.f6)) then begin
            if (testfrowf["ItemClass"]==false) then begin testf = false; end;
          end;
          if (nonblank(RepSpec.f4)) then begin
            if (testfrowf["Location"]==false) then begin testf = false; end;
          end;
          if (nonblank(RepSpec.f3)) then begin
            if (testfrowf["RowObject"]==false) then begin testf = false; end;
          end;
        end;
      end;
      if (testf) then begin
         fr = IVr.FrRate;
         tb1 = IVr.ToRateB1;
         tb2 = IVr.ToRateB2;
         br1 = IVr.BaseRate1;
         br2 = IVr.BaseRate2;
         if (IVr.CredInv>0) then begin
           orgIVr.SerNr = IVr.CredInv;
           if (ReadFIrstMain(orgIVr,1,true)) then begin 
             fr = orgIVr.FrRate;
             tb1 = orgIVr.ToRateB1;
             tb2 = orgIVr.ToRateB2;
             br1 = orgIVr.BaseRate1;
             br2 = orgIVr.BaseRate2;
           end;
         end;
         gps = 0;
         iv = 0;
         ivsum3 = 0;
         rwcnt = MatRowCnt(IVr);
         for (i=0; i<rwcnt; i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeCorrection) or (IVrw.stp==kInvoiceRowTypeMultiBuyDiscount) or ((IVrw.stp==kInvoiceRowTypeDownPayment) and (IVr.InvType==kInvoiceTypeDownpayment)) then begin
              UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
              switch (RepSpec.flags[11]) begin
                case 2: 
                  t = MULRATETOBASE2(IVr.CurncyCode,IVrw.Sum,fr,tb1,tb2,br1,br2,DefaultCurRoundOff);
                  FindSalesExVat(TMr,IVrw.VATCode,t,IVr.InclVAT,IVr.NoTAXonVAT,rowinbase);
                  gp = rowinbase - IVrw.BasePriceB2;
                case 1:
                  t = MULRATETOBASE1(IVr.CurncyCode,IVrw.Sum,fr,tb1,tb2,br1,br2,DefaultCurRoundOff);
                  FindSalesExVat(TMr,IVrw.VATCode,t,IVr.InclVAT,IVr.NoTAXonVAT,rowinbase);
                  gp = rowinbase - IVGetFIFO(IVr,i,IVrw.FIFORowVal,IVrw.FIFO,IVrw.Quant);
                otherwise
                  t = MULRATETOBASE1(IVr.CurncyCode,IVrw.Sum,fr,tb1,tb2,br1,br2,DefaultCurRoundOff);
                  FindSalesExVat(TMr,IVrw.VATCode,t,IVr.InclVAT,IVr.NoTAXonVAT,rowinbase);
                  gp = IVrw.rowGP;
                  if (blank(gp)) then begin
                    if (IVrw.stp==kInvoiceRowTypeMultiBuyDiscount) then begin
                      t = MULRATETOBASE1(IVr.CurncyCode,IVrw.Sum,fr,tb1,tb2,br1,br2,DefaultCurRoundOff);
                      FindSalesExVat(TMr,IVrw.VATCode,t,IVr.InclVAT,IVr.NoTAXonVAT,rowinbase);
                      t = IVrw.Quant * IVrw.BasePrice;
                      if (IVrw.PriceFactor!=0) then begin
                        t = t/IVrw.PriceFactor;
                      end;
                      gp = rowinbase - t;
                    end;
                  end;
              end;
              skipitem = false;
              if (nonblank(RepSpec.FirstAcc)) or (nonblank(RepSpec.LastAcc)) or (nonblank(RepSpec.f6)) then begin
                infound = ReadFirstItem(IVrw.ArtCode,INr,false,true);
              end;
              if (nonblank(RepSpec.FirstAcc)) then begin
                if (RepSpec.FirstAcc<>INr.Code) and ((RepSpec.FirstAcc<>IVrw.ArtCode)) then begin
                  skipitem = true; 
                  wholeinv = false;
                end;
              end;
              if (nonblank(RepSpec.LastAcc)) or (nonblank(RepSpec.f6)) then begin
                if (nonblank(IVrw.ArtCode)) then begin
                  if (nonblank(RepSpec.LastAcc)) then begin
                    if (infound) then begin
                      if (RepSpec.LastAcc<>INr.Group) then begin
                        skipitem = true;
                        wholeinv = false;
                      end;
                    end else begin
                      skipitem = true;
                      wholeinv = false;
                    end;
                  end;
                  if (nonblank(RepSpec.f6)) then begin
                    if (SetInSet(RepSpec.f6,INr.DispGroups)==false) then begin
                      skipitem = true;
                      wholeinv = false;
                    end;
                  end;
                end;
              end;    
              if (nonblank(RepSpec.f3)) then begin
                if (SetInSet(RepSpec.f3,IVrw.Objects)==false) then begin
//                  skipitem = true;
                end;
              end;                            
              if (nonblank(RepSpec.f4)) then begin
                location = IVrw.Location;
                if (blank(location)) then begin
                  location = IVr.Location;
                end;
                if (RepSpec.f4!=location) then begin
                  skipitem = true;
                  wholeinv = false;
                end;
              end;              
              if (skipitem==false) then begin
                switch (IVrw.stp) begin
                  case 11: gps = gps - gp;
                  otherwise gps = gps + gp;
                end;
                testf2 = true;
                UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
                if (IVr.InclVAT>0) then begin
                  FindSalesExVat(TMr,IVrw.VATCode,IVrw.Sum,IVr.InclVAT,IVr.NoTAXonVAT,t);
                  switch (IVrw.stp) begin
                    case 11:
                      iv = iv - IVrw.Sum;
                      ivsum3 = ivsum3 - (IVrw.Sum - t);
                    otherwise
                      iv = iv + IVrw.Sum;
                      ivsum3 = ivsum3 + (IVrw.Sum - t);
                  end;
                end else begin
                  FindSalesExVat(TMr,IVrw.VATCode,IVrw.Sum,IVr.InclVAT,IVr.NoTAXonVAT,t);
                  switch (IVrw.stp) begin
                    case 11:
                      iv = iv - t;//extra
                    otherwise
                      iv = iv + t;//extra
                  end;
                end;
              end;  
          end;
        end;
        skipfr = false;
        if (nonblank(RepSpec.FirstAcc)) then begin
          if (IVr.FrItem<>RepSpec.FirstAcc) then begin
            skipfr = true; 
            wholeinv = false;
          end;
        end;
        if (nonblank(RepSpec.LastAcc)) or (nonblank(RepSpec.f6)) then begin
          INr.Code=IVr.FrItem;
          infound = ReadFirstMain(INr,1,true);
          if (nonblank(RepSpec.LastAcc)) then begin
            if (infound) then begin
              if (RepSpec.LastAcc<>INr.Group) then begin
                skipfr = true;
                wholeinv = false;
              end;
            end else begin
              skipfr = true;
              wholeinv = false;
            end;
          end;
          if (nonblank(RepSpec.f6)) then begin
            if (SetInSet(RepSpec.f6,INr.DispGroups)==false) then begin
              skipitem = true;
              wholeinv = false;
            end;
          end;
        end;
        if (skipfr==false) then begin
          gps = gps + IVr.FrGP;
          testf2 = true;
        end;
        if (testf2==true) then begin
          if (wholeinv==true) then begin
            if (IVr.InclVAT>0) then begin
              iv = MULRATETOBASE1(IVr.CurncyCode,iv,fr,tb1,tb2,br1,br2,DefaultCurRoundOff);
              t = MULRATETOBASE1(IVr.CurncyCode,ivsum3,fr,tb1,tb2,br1,br2,DefaultCurRoundOff);
              iv = iv-t;
            end else begin
              iv = MULRATETOBASE1(IVr.CurncyCode,iv,fr,tb1,tb2,br1,br2,DefaultCurRoundOff);
            end;
          end else begin
            iv = MULRATETOBASE1(IVr.CurncyCode,iv,fr,tb1,tb2,br1,br2,DefaultCurRoundOff);
            t = MULRATETOBASE1(IVr.CurncyCode,ivsum3,fr,tb1,tb2,br1,br2,DefaultCurRoundOff);
            iv = iv-t;
          end;
          if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
            iv = 0 - iv;
            gps = 0 - gps;
          end;
          if (RepSpec.ArtMode==1) then begin
              RepIVGP(IVr,totquan,totcsum,t,gps,RepSpec,fr,tb1,tb2,br1,br2);
              sumquan = sumquan + totquan;
              TotSum = TotSum + t;
              gpsum = gpsum + gps;
          end;
          if (RepSpec.ArtMode==0) then begin
              StartFormat(15);
              tstr =  CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr);
              OutString(0,"DblIVVc",tstr,false);
              OutDate(2,0,IVr.InvDate,false);
              OutString(3,0,IVr.Addr0,false);
              OutVal(4,0,iv+IVr.FrBase,M4Val,true);
              gpperc = (gps/(iv+IVr.FrBase))*100;
              OutVal(5,0,gpperc,M4Val,true);
              OutVal(6,0,gps,M4Val,true);
              EndFormat;
              TotSum = iv + TotSum + IVr.FrBase;
              gpsum = gpsum + gps;
          end;
        end;
      end;//testf
    end;//while
  end;  
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(2365),false);
  OutVal(124,0,sumquan,M4Qty,true);
  if (RepSpec.ArtMode==0) then begin
    OutVal(4,0,TotSum,M4Val,true);
    gpperc = (gpsum/TotSum)*100;
    OutVal(5,0,gpperc,M4Val,true);
    OutVal(6,0,gpsum,M4Val,true);
  end;
  if (RepSpec.ArtMode==1) then begin
    OutVal(350,0,TotSum,M4Val,true);
    OutVal(420,0,totcsum,M4Val,true);
    OutVal(480,0,gpsum,M4Val,true);
  end;
  EndFormat;
  StartFormat(15);
  OutVal(430,0,sumcsum,M4Val,true);
  EndFormat;

  if (RepSpec.flags[12]==1) then begin 
    frdra = FirstInRange(RepSpec.f5,5);
    todra = LastInRange(RepSpec.f5,5);
    StartFormat(15);
    OutString(0,0,USetStr(2647),false);
    EndFormat;
    Black_Divider(0,1);
    PIVGP1Rn(RepSpec,-1,-1,frcu,tocu,frdra,todra,possum,posgp);
    possum = possum + TotSum;
    posgp = posgp + gpsum;
    gpperc = (posgp/possum)*100;

    StartFormat(15);
    OutString(0,0,USetStr(2649),false);
    if (RepSpec.ArtMode==0) then begin
      OutVal(4,0,possum,M4Val,true);
      OutVal(5,0,gpperc,M4Val,true);
      OutVal(6,0,posgp,M4Val,true);
    end else begin
      OutVal(350,0,possum,M4Val,true);
      OutVal(480,0,posgp,M4Val,true);
    end;
    EndFormat;
  end;
  EndJob;
  return;
end;  
