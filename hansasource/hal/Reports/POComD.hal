external procedure HTAccs(string,string,Integer, var string);
external procedure HTVends(string, string, var string);
external procedure HTSuppGroup(string,var string);
external procedure HTVendClass(string,var string);
external function Boolean ContactInGroupClass(string,string,string,string,string,string);
external procedure PUCalcPerc(val,string,var val);
external procedure DivPIFactor(val,val,var val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure HTPOrdStatus(Integer, Integer, Integer, var string, var string);
external procedure HTOT(string ,var string);
external procedure HTOBJ(string,var string);
external procedure HT2Per(Date, Date , var string);
external procedure CalcAccrual(record POVc,Integer,Date,var val,var val,var val,var Boolean,var Boolean,val,val);

function val PUCost(Integer costtype,LongInt posernr,Integer porownr)
begin
  val res;
  record VarianceStatusVc VSr;
  
  VSr.PONr = posernr;
  VSr.OrdRow = porownr;
  if (ReadFirstMain(VSr,2,true)) then begin 
    res = VSr.PUBaseAmount;    
  end;
  PUCost = res;
  return;
end;

global 
procedure POCommitDetailRn(record RcVc RepSpec)
begin
  record POVc POr;
  record ObjVc OBr;
  row POVc POrw;
  Boolean TrHs,TrHs2,testf;
  LongInt afr,ato;
  string 60 frcu,tocu, tstr, tstr2, obj, AccName,CostAcc;
  Integer rw,i,rwcnt,k,lcnt,costtype;
  val value, totval, totval2, accum, acctot,bcurprice,t;
  Boolean firstf, Accs, itemfound,printf,itemf,firstf2;
  val shipd,invd,accrued,l;
  record AccBlock Accb;
  vector val vvalue;

  rw = 1;
  accum = 0;
  firstf = true;
  afr = FirstInRange(RepSpec.f1,30);
  ato = LastInRange(RepSpec.f1,30);
  frcu = FirstInRange(RepSpec.f2,20);
  tocu = LastInRange(RepSpec.f2,20);
  BlockLoad(Accb);
  
  StartReportJob(USetStr(8646));
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTVends(frcu,tocu,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTAccs(RepSpec.AccStr,RepSpec.AccStr,0,tstr);
  Header(rw,tstr,0);
  HTSuppGroup(RepSpec.f9,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  HTVendClass(RepSpec.f10,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  HTPOrdStatus(1,RepSpec.flags[1],RepSpec.flags[3],tstr, tstr2);
  Header(rw,tstr,0);
  Header(rw,tstr2,1);
  if (nonblank(RepSpec.ObjStr)) then begin
    HTObj(RepSpec.ObjStr,tstr);
    Header(rw+1,tstr,1);
  end else begin
    if (nonblank(RepSpec.ObjType)) then begin
      HTOT(RepSpec.ObjType,tstr);
      Header(rw+1,tstr,1);
    end;
  end;
  EndHeader;
  if (blank(RepSpec.AccStr)) then begin
    StartFormat(15);
     OutString(0,0,USetStr(20756),false);
    EndFormat;
    goto LPOCommitDetailRn;
  end;
  POr.SerNr = afr;
  TrHs = true;
  while (LoopMain(POr,1,TrHs)) begin
    if (nonblank(RepSpec.f1)) then begin
      if (POr.SerNr>ato) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      testf = true; 
      if (POr.Closed==1) and (RepSpec.flags[1]==0) then begin
        testf = false;
      end;
      if (POr.OKFlag==0) and (RepSpec.flags[3]==0) then begin
        testf = false;
      end;
      if (POr.PIFlag!=0) then begin
  //      testf = false;
      end;    
      if (DateInRange(POr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
        testf = false;
      end;
      if (nonblank(RepSpec.f2)) then begin
        if (POr.VECode>tocu) then begin
          testf = false;
        end;
        if (POr.VECode<frcu) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,POr.Objects)==false) then begin
          testf = false;
        end;
      end else begin
        if ((testf==true) and (nonblank(RepSpec.ObjType))) then begin
          testf = false;
          OBr.OTCode = RepSpec.ObjType;
          OBr.Code = "";
          Accs = true;
          ResetLoop(OBr);
          while (LoopKey("OTCode",OBr,1,Accs)) begin
            if ((Accs==true) and (RepSpec.ObjType==OBr.OTCode)) then begin              
              if (SetInSet(OBr.Code,POr.Objects)==true) then begin
                testf = true;
                Accs = false;
              end;
            end;
          end; 
        end;
      end;
      if (testf) then begin 
        testf = ContactInGroupClass(POr.VECode,RepSpec.f9,RepSpec.f10,"SUPP","","");
      end;
      if (testf) then begin
        if (firstf==false) then begin
          StartFormat(15);
          EndFormat;
          Black_Divider(0,1);
          StartFormat(15);
          EndFormat;
        end;
        firstf = false;
        value = 0;
        totval = 0;
        k = 0;
        value = 0;
        totval2 = 0;
        lcnt = 0;
        printf = false;       
        firstf2 = true;     
        rwcnt = MatRowCnt(POr);
        for(i=0;i<rwcnt;i=i+1) begin
          MatRowGet(POr,i,POrw);
          testf = true;
          value = blankval;
          vvalue[0] = blankval; vvalue[-2] = blankval; vvalue[-3] = blankval; vvalue[-4] = blankval;
          vvalue[-5] = blankval; vvalue[-6] = blankval; vvalue[-7] = blankval; vvalue[-8] = blankval;
          if (SetInSet(RepSpec.f4,POrw.Objects)==false) then begin testf = false; end;
          if (testf) then begin
            testf = false;
            if (POrw.CostAcc==RepSpec.AccStr) then begin testf = true; costtype = 0; CostAcc = POrw.CostAcc; end;
            if (Accb.PUCost1==RepSpec.AccStr) then begin testf = true; costtype = -2; CostAcc = Accb.PUCost1; end;
            if (Accb.PUCost2==RepSpec.AccStr) then begin testf = true; costtype = -3; CostAcc = Accb.PUCost2; end;
            if (Accb.PUCost3==RepSpec.AccStr) then begin testf = true; costtype = -4; CostAcc = Accb.PUCost3; end;
            if (Accb.PUCost4==RepSpec.AccStr) then begin testf = true; costtype = -5; CostAcc = Accb.PUCost4; end;
            if (Accb.PUCost5==RepSpec.AccStr) then begin testf = true; costtype = -6; CostAcc = Accb.PUCost5; end;
            if (Accb.PUCustomsAcc==RepSpec.AccStr) then begin testf = true; costtype = -7; CostAcc = Accb.PUCustomsAcc; end;
            if (Accb.PUFreightAcc==RepSpec.AccStr) then begin testf = true; costtype = -8; CostAcc = Accb.PUFreightAcc; end;
          end;
          if (testf) then begin
            value = blankval;
            if (nonblankdate(RepSpec.RegDate)) then begin
              CalcAccrual(POr,i,RepSpec.RegDate,shipd,invd,accrued,itemf,printf,k,l);
            end else begin
              if (POrw.CostAcc==RepSpec.AccStr) then begin vvalue[0] = PUCost(0,POr.SerNr,0); end;
              if (Accb.PUCost1==RepSpec.AccStr) then begin vvalue[-2] = PUCost(-2,POr.SerNr,-2); end;
              if (Accb.PUCost2==RepSpec.AccStr) then begin vvalue[-3] = PUCost(-3,POr.SerNr,-3); end;
              if (Accb.PUCost3==RepSpec.AccStr) then begin vvalue[-4] = PUCost(-4,POr.SerNr,-4); end;
              if (Accb.PUCost4==RepSpec.AccStr) then begin vvalue[-5] = PUCost(-5,POr.SerNr,-5); end;
              if (Accb.PUCost5==RepSpec.AccStr) then begin vvalue[-6] = PUCost(-6,POr.SerNr,-6); end;
              if (Accb.PUCustomsAcc==RepSpec.AccStr) then begin vvalue[-7] = PUCost(-7,POr.SerNr,-7); end;
              if (Accb.PUFreightAcc==RepSpec.AccStr) then begin vvalue[-8] = PUCost(-8,POr.SerNr,-8); end;
              value = vvalue[0] + vvalue[-2] + vvalue[-3] + vvalue[-4] + vvalue[-5] + vvalue[-6] + vvalue[-7] + vvalue[-8];
              shipd = POrw.Shipd2;
              invd = POrw.Invd;
              accrued = shipd-invd;
              if (accrued>0 or value>0) then begin
                printf = true;
              end;
            end;  
            if (printf) and (firstf2) then begin
              lcnt = 1;
              printf = false;
              StartFormat(15);
              OutString(0,0,USetStr(8644),false);
              EndFormat;
              StartFormat(15);
              OutString(0,0,USetStr(2622),false);
              OutString(70,0,USetStr(2623),false);
              OutString(180,0,USetStr(4004),true);
              OutString(350,0,USetStr(3321),false);
              OutString(480,0,USetStr(2638),true);
              EndFormat;
              Gray_Divider(0,1);
              StartFormat(15);
              OutLongInt(0,"DblPOVc",POr.SerNr,false);
              OutDate(70,0,POr.TransDate,false);
              OutString(180,0,POr.VECode,true);
              OutString(200,0,POr.Addr0,false);
              OutString(350,0,POr.Objects,false);
              OutString(480,0,POr.PlanShip,true);
              EndFormat;
              StartFormat(5);
              EndFormat;
              StartFormat(5);
              OutString(20,0,USetStr(8333),false);
              EndFormat; 
              StartFormat(10);
              EndFormat;
              StartFormat(15);
              OutString(180,0,USetStr(5501),true);
              OutString(220,0,USetStr(8647),true);
              OutString(260,0,USetStr(2633),true);
              OutString(310,0,USetStr(8648),true);
              OutString(340,0,USetStr(7591),true);
              OutString(415,0,USetStr(4036),true);
              OutString(420,0,USetStr(3321),false);
              EndFormat;
              firstf2 = false;
            end;
            if ((invd <> shipd) or blank(POrw.Quant) or (value!=0)) then begin
              StartFormat(15);
              OutString(0,0,POrw.ArtCode,false);
              OutString(64,0,POrw.Spec,false);
              OutVal(180,0,POrw.Quant,M4UVal,true);
              OutVal(220,0,shipd,M4UVal,true);
              if (value==0) then begin
                if (vvalue[-2]==0) then begin
                  if (Accb.PUCost1==RepSpec.AccStr) then begin
                    value = value + (shipd-invd) * POrw.RowCost1;
                  end;
                end;
                if (vvalue[-3]==0) then begin
                  if (Accb.PUCost2==RepSpec.AccStr) then begin
                    value = value + (shipd-invd) * POrw.RowCost2;
                  end;
                end;
                if (vvalue[-4]==0) then begin
                  if (Accb.PUCost3==RepSpec.AccStr) then begin
                    value = value + (shipd-invd) * POrw.RowCost3;
                  end;
                end;
                if (vvalue[-5]==0) then begin
                  if (Accb.PUCost4==RepSpec.AccStr) then begin
                    value = value + (shipd-invd) * POrw.RowCost4;
                  end;
                end;
                if (vvalue[-6]==0) then begin
                  if (Accb.PUCost5==RepSpec.AccStr) then begin
                    value = value + (shipd-invd) * POrw.RowCost5;
                  end;
                end;
                if (nonblankdate(RepSpec.RegDate)) then begin
                  if (vvalue[-7]==0) then begin
                    if (Accb.PUCustomsAcc==RepSpec.AccStr) then begin
                      bcurprice = MulRateToBase1(POr.CurncyCode,POrw.Price,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,DefaultCurRoundOff);
                      PUCalcPerc(bcurprice,POrw.CustomsCost,t);
                      value = value + (shipd-invd) * t;
                    end;
                  end;
                  if (vvalue[-8]==0) then begin
                    if (Accb.PUFreightAcc==RepSpec.AccStr) then begin
                      bcurprice = MulRateToBase1(POr.CurncyCode,POrw.Price,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,DefaultCurRoundOff);
                      PUCalcPerc(bcurprice,POrw.ShipCost,t);
                      value = value + (shipd-invd) * t;
                    end;
                  end;
                end;
              end;
              if (vvalue[0]==0) then begin
                if (POrw.CostAcc==RepSpec.AccStr) then begin
                  bcurprice = MulRateToBase1(POr.CurncyCode,POrw.Price,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,DefaultCurRoundOff);
                  value = value + (shipd-invd) * bcurprice;
                end;
              end;
              if (costtype<0) then begin
                OutVal(260,0,0.00,M4UVal,true);
                OutVal(310,0,1.00,M4UVal,true);
              end else begin
                OutVal(260,0,invd,M4UVal,true);
                OutVal(310,0,shipd-invd,M4UVal,true);
              end;

              DivPIFactor(value,POrw.PIFactor,value);
              OutVal(340,0,value,M4UVal,true);
              OutString(415,0,CostAcc,true);
              OutString(420,0,POrw.Objects,false);
              //obj = POr.Objects & " " & POrw.Objects;
              //OutString(420,0,obj,false);
              totval2 = totval2 + value;
              accum = accum + value;
              EndFormat;
            end;
          end;
        end;
        if (totval2 > 0) then begin
          StartFormat (15);
          Black_Divider(310,340);
          OutVal(340,0,totval2,M4UVal,true);  //row totals
          EndFormat;
        end else begin
          firstf = true;
        end;
      end;//testf
    end;
  end;//end while
  StartFormat(15);
  EndFormat;
  if (accum>0) then begin
    Black_Divider(0,1);
    StartFormat(15);
    OutString(40,0,USetStr(8334),false);
    OutVal(340,0,accum,M4Val,true);
    EndFormat;
  end;
LPOCommitDetailRn:;
  EndJob;
  return;
end;
