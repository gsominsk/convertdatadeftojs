external procedure HTItem(string,var string);
external procedure HTArtGroup(string, var string);
external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean ItemInItemGroupOrClass(string,string,string);
external function Boolean HasContactClassification();
external function Boolean HasCategories();
external procedure HTCustCat(string,var string);
external procedure HTCustClass(string,var string);
external function Boolean ContactInGroupClass(string,string,string,string,string,string);
external procedure ProjStatPrintGrSumup(record RcVc,Integer,var val,var val,var val,var val,var val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure ProjStatBudgNoTrans(record RcVc,record PRVc,Array string,Array string,Array string,Array string,
                              Array Date,Array val,Array val,Array val,Array val,Array val,Array val,
                              Array string,Array string,var Integer,record TBBUVc,Boolean,var val,var val,var val,var Integer,Integer,string,
                              var val,var val,var val);
external procedure ProjStatCostSumup(record RcVc,val,val,val,var val);
external procedure ProjStatDoSumup(val,val,val,var val,var val,var val);
external function Boolean AddNotDoneActivities(record RcVc,string,
                               Array string,Array string,Array string,Array string,Array Date,
                               Array val,Array val,Array val,Array val,Array val,Array val,
                               Array string,Array string,var Integer,
                               Boolean,
                               var val,var val,var val,var val,
                               var val,var val,var val,var val,var val,
                               var val,var val,var val,var val,var val);
external procedure ProjStatHeader(record RcVc,record PRVc,string,string,string,string,Integer,Integer,var Boolean);
external function Boolean TestProStatSpecifiction(record RcVc,record TBBUVc,Integer,string);
external function string 255 FindINObjects(string,string);
external function Boolean ProjStatDownpayable(record RcVc,Array string,Array string,Array string,Array string,Array Date,
                                     Array val,Array val,Array val,Array val,Array val,Array val,Array string,Array string,var Integer,
                                     record PRVc,var val,var val,Boolean,var val, var val,string,var val,var val,var val,var val,var val,var val);

external procedure AddPTToList(record RcVc,Array string,Array string,Array string,Array string,Array Date,
                               Array val,Array val,Array val,Array val,Array val,Array val,
                               Array string,Array string,var Integer,
                               string,string,string,string,Date,var val,
                               var val,var val,var val,val,string,string,Integer);

external procedure PrintPTList(record RcVc,Array string,Array string,Array string,Array string,Array Date,
                               Array val,Array val,Array val,Array val,Array val,Array string,Array string,Integer);
external procedure AddProjValue(Boolean,Boolean,var val,val,val,val);
external procedure FindInvoice2Method(string,string,string,Date,Integer,var record TBBUVc,var Integer,Boolean);
external procedure GetPRClassName(string,var string);
external procedure HT2Per(Date,Date, var string);
external procedure HTPRClass(string, var string);
external procedure HTCusts(string, string, var string);
external procedure HTProjects(string,string,var string);

external procedure FindDautherProjects(string,var array string,var integer);//vg

procedure ClearArrays(Array string aincode,Array string aemcode,Array string aprcode,Array string adblstr,Array Date adate,
                     Array val ainvoicable,Array val anotdone,Array val ainvoiced,Array val abudget,Array val abudgetcur,Array val acost,Array string acomment,
                     Array string adblroutine,var Integer acnt)
BEGIN
  Integer i;
  Date blankd;
  
  for (i=0;i<acnt;i=i+1) begin
    aincode[i] = "";
    aemcode[i] = "";
    aprcode[i] = "";
    adblstr[i] = "";
    adblroutine[i] = "";
    acomment[i] = "";
    adate[i] = blankd;
    ainvoicable[i] = blankval;
    ainvoiced[i] = blankval;
    abudget[i] = blankval;
    abudgetcur[i] = blankval;
    acost[i] = blankval;
    anotdone[i] = blankval;
  end;
  acnt = 0;
  RETURN;
END;

procedure ProjStatBudgAdd(record RcVc RepSpec,record TBBUVc TBBUp,record TBIVVc TBIVp,record PRVc PRp,var string oldem,var string oldin,
                          Boolean amounts,var val invablep,var val invoicedp,var val budgetp,var Integer budtp,
                          var val invableincurp,var val invoicedincurp,var val budgetincurp,
                          string objsel,Integer itemtype)
BEGIN
  row TBBUVc TBBUrw;
  record INVc INr;
  Integer i,rwcnt;
  Integer intyp;
  Boolean costf;
  val invablesum,cost,invablesumincur;
  
  if (RepSpec.flags[12]==2) then begin costf = true; end;
  rwcnt = MatRowCnt(TBBUp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUp,i,TBBUrw);
    if (TBBUrw.Invoiced==-2) then begin goto L88ProjStatBudgAdd; end;;
    if ((oldem==TBIVp.EMCode) and (oldin==TBIVp.ArtCode)) then begin goto L88ProjStatBudgAdd; end;
    if (TBBUrw.ArtCode!=TBIVp.ArtCode) then begin goto L88ProjStatBudgAdd; end;
    if (SetInSet(objsel,TBBUrw.Objects)==false) then begin goto L88ProjStatBudgAdd; end;
    if (nonblank(TBBUrw.EMCode)) then begin
      if (TBBUrw.EMCode!=TBIVp.EMCode) then begin
        goto L88ProjStatBudgAdd;
      end;
    end;
    oldem = TBIVp.EMCode;
    oldin = TBIVp.ArtCode;
    budtp = TBBUrw.BudType;
    if (budtp==0) then begin
      intyp = TBBUrw.ItemType;
    end;
    if (TBBUrw.ItemType==0) then begin
      INr.Code = TBBUrw.ArtCode;
      if (ReadFirstMain(INr,1,true)) then begin
        if (INr.ItemMaterial!=0) then begin
          intyp = 5;
        end;
      end;
    end;
    if (intyp!=itemtype) then begin goto L88ProjStatBudgAdd; end;
    switch (intyp) begin
      case 1: budtp = TBBUp.BudStocked+1;
      case 3: budtp = TBBUp.BudTime+1;
      case 5: budtp = TBBUp.BudMaterial+1;
      otherwise budtp = TBBUp.BudOther+1;
    end;
    if ((RepSpec.flags[12]==4) or (RepSpec.flags[12]==2)) then begin budtp = 1; end;
    invablesum = TBBUrw.Sum;
    invablesumincur = TBBUrw.Sum;
    if (PRp.StopInvoicing!=0) then begin 
      invablesum = blankval; 
      invablesumincur = blankval; 
    end;
    invablesum = MulRateToBase1(TBBUp.CurncyCode,invablesum,TBBUp.FrRate,TBBUp.ToRateB1,TBBUp.ToRateB2,TBBUp.BaseRate1,TBBUp.BaseRate2,DefaultCurRoundOff);
    switch (budtp) begin// here : 1 - running, 2 - fixed 
      case 1:
       if (RepSpec.flags[12]!=1) then begin 
         AddProjValue(amounts,costf,budgetp,invablesum,TBBUrw.Cost,TBBUrw.Qty);
         if (RepSpec.flags[18]!=0) and (nonblank(TBBUp.CurncyCode)) then begin
           AddProjValue(amounts,costf,budgetincurp,invablesumincur,TBBUrw.Cost,TBBUrw.Qty);
         end;
       end;
      case 2:
        if (costf==false) then begin
          if (TBBUrw.Invoiced<=0) then begin
            AddProjValue(amounts,costf,invablep,invablesum,TBBUrw.Cost,TBBUrw.Qty);
            if (RepSpec.flags[18]!=0) and (nonblank(TBBUp.CurncyCode)) then begin
              AddProjValue(amounts,costf,invableincurp,invablesumincur,TBBUrw.Cost,TBBUrw.Qty);
            end;
          end else begin
            AddProjValue(amounts,costf,invoicedp,invablesum,TBBUrw.Cost,TBBUrw.Qty);
            if (RepSpec.flags[18]!=0) and (nonblank(TBBUp.CurncyCode)) then begin
              AddProjValue(amounts,costf,invoicedincurp,invablesumincur,TBBUrw.Cost,TBBUrw.Qty);
            end;
          end;
        end;
        if (RepSpec.flags[12]!=1) then begin AddProjValue(amounts,costf,budgetp,invablesum,TBBUrw.Cost,TBBUrw.Qty); end;
      case 3: ;// internal 
    end;    
    TBBUrw.Invoiced = -2;
    MatRowPut(TBBUp,i,TBBUrw);
L88ProjStatBudgAdd:;
  end;
  RETURN;
END;

procedure ProjStatCostAdd(record TBIVVc TBIVp,Boolean amounts,var val budgetp,var val budgetincurp)
BEGIN
  if (amounts==false) then begin
    budgetp = TBIVp.Qty;
  end else begin
    budgetp = TBIVp.Qty*TBIVp.CostPrice;
    budgetincurp = TBIVp.Qty*TBIVp.CostPriceInCur;
  end;
  RETURN;
END;

procedure PrintProjectSpecStats(record RcVc RepSpec,record PRVc PRp,var val budgetp,var val invoicedp,var val invablep,var val nondone,Boolean amounts,
                                var string lastprclass,var val classbudgetp,var val classinvoicedp,var val classinvablep,var val classcostp,var val totcostp,
                                var Boolean sortingheaderf)
BEGIN
  record TBIVVc TBIVr;
  record TBBUVc TBBUr;
  Integer budtp;
  Integer oldtype;
  Boolean budfound;
  Boolean found;
  Boolean firstf;
  Boolean firstf2;
  Boolean testf;
  Boolean grouppr;
  Boolean notallshipped;
  val budget,invoiced,invable,diff;
  val grbudget,grinvoiced,grinvable,grcost,grnodone;
  val prbudget,prinvoiced,prinvable,prcost,prnotdone;
  val downpayed,downpayable,downpayedused;
  string 255 oldem,oldin,tstr,dblstr,dblroutine;
  Boolean headerf,projstathf;
  Boolean costf;
  Array string 20 aincode;
  Array string 100 aemcode;
  Array string 20 aprcode;
  Array string 20 adblstr;
  Array string 20 adblroutine;
  Array Date adate;
  Array val ainvoicable;
  Array val anotdone;
  Array val ainvoiced;
  Array val abudget;
  Array val abudgetcur;
  Array val acost;
  Array string 60 acomment;
  Integer acnt;
  record PRVc sPRp;
  Integer i,subpram;
  array string 20 subproject;
  string 20 wproj;
  val invablesum,invablesumincur,cost;
  val invableincur,invoicedincur,budgetincur;
  val grinvableincur,grinvoicedincur,grbudgetincur,grcostincur;
  val prbudgetincur,prinvoicedincur,prinvableincur,prcostincur;
  val downpayedincur,downpayableincur,downpayedusedincur;
  val SumInCur,CostPriceInCur;
  val grnotdone;
  
  subpram=1;
  subproject[0] = PRp.Code;
  if (RepSpec.IncDaughter==1) then begin
    FindDautherProjects(PRp.Code,subproject,subpram);
  end;   
  firstf = true;
  firstf2 = true;
  grouppr = true;
  if (RepSpec.flags[12]==2) then begin costf = true; end;

  for (i=0;i<subpram;i=i+1) begin  
    wproj = subproject[i];      
    TBBUr.PRCode = wproj;
    budfound = ReadFirstMain(TBBUr,1,true);
    if (budfound) then begin
      budfound = TestProStatSpecifiction(RepSpec,TBBUr,3,RepSpec.ObjStr);
    end;
    if (budfound) then begin
      projstathf = true;
      if (!headerf) then begin
        ProjStatHeader(RepSpec,PRp,PRp.Code,PRp.Name,PRp.CustCode,PRp.CustName,RepSpec.flags[16],RepSpec.flags[8],sortingheaderf);
        headerf = true;
        firstf = false;
      end;      
    end;
    TBIVr.PRCode = wproj;
    TBIVr.Invoice = -1;
    TBIVr.oVc = 1;
    ResetLoop(TBIVr);
    found = true;
    while (LoopKey("MainKey",TBIVr,1,found)) begin
      testf = true;
      budget = blankval;
      invoiced = blankval;
      invable = blankval;

      invoicedincur = blankval;
      invableincur = blankval;
      budgetincur = blankval;
      if (TBIVr.PRCode!=wproj) then begin found = false; end;
      if (DateInRange(TBIVr.TransDate,RepSpec.d1,RepSpec.d2)==false) then begin testf = false; end;
//      if ((TBIVr.ItemType!=3) and (TBIVr.ItemType!=0)) then begin testf = false; end;
      if (TBIVr.ItemType!=3) then begin testf = false; end;//this is time only, isn't it
      if (SetInSet(RepSpec.ObjStr,TBIVr.Objects)==false) then begin testf = false; end;
      if (TBIVr.oVc!=1) and (TBIVr.oVc!=2) and (TBIVr.oVc!=3) and (TBIVr.oVc!=5) then begin testf = false; end;//service item can be used on expenses and purchase invoices as well
      if (nonblank(RepSpec.LastAcc)) then begin
        if (RepSpec.LastAcc!=TBIVr.INGroup) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.f7)) then begin
        testf = (TBIVr.ArtCode==RepSpec.f7);
      end;
      if (testf) then begin
        testf = ItemInItemGroupOrClass(TBIVr.ArtCode,"",RepSpec.f8);
      end;      
      if (nonblank(RepSpec.f4)) then begin
        if (RepSpec.f4!=TBIVr.EMCode) then begin
          testf = false;
        end;
      end;    
      if (!found) then begin testf = false; end;
      if (testf) then begin
        if (!headerf) then begin
          if (projstathf) then begin
            ProjStatHeader(RepSpec,PRp,PRp.Code,PRp.Name,PRp.CustCode,PRp.CustName,RepSpec.flags[16],RepSpec.flags[8],sortingheaderf);
            projstathf = false;
          end;
        end;
        grouppr = false;
        if (firstf) then begin
          firstf = false;
          oldtype = TBIVr.ItemType;
        end else begin
          if (TBIVr.ItemType!=oldtype) then begin
//            goto L22;
          end;
        end;
        budtp = 0; // here : 0 - running, 1 - fixed 
        if (budfound) then begin
        //  FindInvoice2Method(PRp.Code,TBIVr.ArtCode,TBIVr.EMCode,CurrentDate,TBIVr.ItemType,TBBUr,budtp,false);
          FindInvoice2Method(wproj,TBIVr.ArtCode,TBIVr.EMCode,CurrentDate,TBIVr.ItemType,TBBUr,budtp,false);
        end;
        if ((RepSpec.flags[12]==4) or (RepSpec.flags[12]==2)) then begin budtp = 0; end;
        if (budtp==0) then begin
          invablesum = TBIVr.Sum;
          invablesumincur = TBIVr.SumInCur;
          if (PRp.StopInvoicing!=0) then begin 
            invablesum = blankval; 
            invablesumincur = blankval; 
          end;
          if (RepSpec.flags[18]!=0) then begin
            SumInCur = TBIVr.SumInCur;
            CostPriceInCur = TBIVr.CostPriceInCur;
            if (SumInCur==0) then begin 
              SumInCur = TBIVr.Sum;
            end;  
            if (CostPriceInCur==0) then begin 
              CostPriceInCur = TBIVr.CostPrice;
            end; 
          end;  
          if ((TBIVr.Invoice==-1) or 
             ((TBIVr.Invoice!=-1) and (nonblankdate(TBIVr.InvDate)) and (DateInRange(TBIVr.InvDate,RepSpec.d1,RepSpec.d2)==false))) then begin
            AddProjValue(amounts,costf,invable,TBIVr.Sum,TBIVr.CostPrice,TBIVr.InvQty);
            if (RepSpec.flags[18]!=0) then begin
               AddProjValue(amounts,costf,invableincur,SumInCur,CostPriceInCur,TBIVr.InvQty);
            end;
          end else begin
            AddProjValue(amounts,costf,invoiced,TBIVr.Sum,TBIVr.CostPrice,TBIVr.InvQty);            
            if (RepSpec.flags[18]!=0) then begin
              AddProjValue(amounts,costf,invoicedincur,SumInCur,CostPriceInCur,TBIVr.InvQty);
            end;
          end;
        end;
        if (budfound) then begin
          ProjStatBudgAdd(RepSpec,TBBUr,TBIVr,PRp,oldem,oldin,amounts,invable,invoiced,budget,budtp,invableincur,invoicedincur,budgetincur,RepSpec.ObjStr,3);
        end;
        if (RepSpec.flags[12]==1) then begin ProjStatCostAdd(TBIVr,amounts,budget,budgetincur); end;
        if (!headerf) then begin
          ProjStatHeader(RepSpec,PRp,PRp.Code,PRp.Name,PRp.CustCode,PRp.CustName,RepSpec.flags[16],RepSpec.flags[8],sortingheaderf);
          headerf = true;
          firstf = false;
        end;      
        dblroutine = "DblPR";
        switch (RepSpec.flags[10]) begin
          case 3:
            dblstr = TBIVr.PRCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.ArtCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.EMCode;
            dblroutine = "DblPrTranRn";
          case 4:
            dblstr = TBIVr.PRCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.ArtCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.EMCode;
            dblroutine = "DblPrTranRn";
          case 5:
            dblstr = TBIVr.SerNr;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.Row;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.PRCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.oVc;
        end;
//        AddPTToList(RepSpec,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,ainvoiced,abudget,acost,acomment,adblroutine,acnt,
//                    TBIVr.ArtCode,TBIVr.EMCode,TBIVr.PRCode,dblstr,TBIVr.TransDate,invable,invoiced,budget,TBIVr.CostPrice,
//                    TBIVr.Comment);

        if (RepSpec.flags[18]!=0) and (nonblank(TBIVr.CurncyCode)) then begin
          if (RepSpec.flags[5]!=0) then begin
            cost = TBIVr.Qty;
          end else begin
            cost = TBIVr.CostPriceInCur*TBIVr.Qty;
          end;
          AddPTToList(RepSpec,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                      TBIVr.ArtCode,TBIVr.EMCode,PRp.Code,dblstr,TBIVr.TransDate,invableincur,invoicedincur,budgetincur,budgetincur,cost,
                      TBIVr.Comment,dblroutine,0);
        end else begin
          if (RepSpec.flags[5]!=0) then begin
            cost = TBIVr.Qty;
          end else begin
            cost = TBIVr.CostPrice*TBIVr.Qty;
          end;
          AddPTToList(RepSpec,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                      TBIVr.ArtCode,TBIVr.EMCode,PRp.Code,dblstr,TBIVr.TransDate,invable,invoiced,budget,budgetincur,cost,
                      TBIVr.Comment,dblroutine,0);
        end;
        ProjStatDoSumup(invable,invoiced,budget,grinvable,grinvoiced,grbudget);
        ProjStatDoSumup(invable,invoiced,budget,prinvable,prinvoiced,prbudget);
        ProjStatDoSumup(invableincur,invoicedincur,budgetincur,grinvableincur,grinvoicedincur,grbudgetincur);
        ProjStatDoSumup(invableincur,invoicedincur,budgetincur,prinvableincur,prinvoicedincur,prbudgetincur);

        if (RepSpec.flags[14]==1) then begin
          ProjStatCostSumup(RepSpec,cost,invable,invoiced,prcost);      
          grcost = grcost + cost;
        end;  
      end;
    end;
    if (RepSpec.flags[17]!=0) then begin
      if (AddNotDoneActivities(RepSpec,wproj,aincode,aemcode,aprcode,adblstr,adate,
                             ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                             amounts,invable,invoiced,budget,budgetincur,
                             grinvoiced,grnotdone,grinvable,grbudget,grcost,
                             prinvable,prnotdone,prinvoiced,prbudget,prcost)) then begin
                           
        grouppr = false;
      end;
    end;    
    if (budfound) then begin
      ProjStatBudgNoTrans(RepSpec,PRp,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                          TBBUr,amounts,invable,invoiced,budget,budtp,3,RepSpec.ObjStr,invableincur,invoicedincur,budgetincur);
      ProjStatDoSumup(invable,invoiced,budget,grinvable,grinvoiced,grbudget);
      ProjStatDoSumup(invable,invoiced,budget,prinvable,prinvoiced,prbudget);

      ProjStatDoSumup(invableincur,invoicedincur,budgetincur,grinvableincur,grinvoicedincur,grbudgetincur);
      ProjStatDoSumup(invableincur,invoicedincur,budgetincur,prinvableincur,prinvoicedincur,prbudgetincur);

      if (RepSpec.flags[14]==1) then begin
// this must be sick , last project tarnsaction from difrent project ?                 ProjStatCostSumup(RepSpec,TBIVr.Qty*TBIVr.CostPrice,invable,invoiced,prcost);      
      end;          
      if ((invable!=0) or (invoiced!=0) or (budget!=0)) then begin grouppr = false; end;
    end;
  end;  
  
L22:;
  if (grouppr==false) then begin
    PrintPTList(RepSpec,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,acost,acomment,adblroutine,acnt);
    grcost = prcost;
    if (RepSpec.flags[18]!=0 and nonblank(TBIVr.CurncyCode)) then begin
      ProjStatPrintGrSumup(RepSpec,6793,grinvoicedincur,grinvableincur,grbudgetincur,grcostincur,grnotdone);
    end else begin
      ProjStatPrintGrSumup(RepSpec,6793,grinvoiced,grinvable,grbudget,grcost,grnotdone);
    end;
    grouppr = true;
  end;
  ClearArrays(aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt);
  
  for (i=0;i<subpram;i=i+1) begin  
    wproj=subproject[i];      
    TBBUr.PRCode = wproj;
    budfound = ReadFirstMain(TBBUr,1,true);
    if (budfound) then begin
      budfound = TestProStatSpecifiction(RepSpec,TBBUr,0,RepSpec.ObjStr);
    end;
    if (budfound) then begin
      projstathf = true;
      if (!headerf) then begin
        ProjStatHeader(RepSpec,PRp,PRp.Code,PRp.Name,PRp.CustCode,PRp.CustName,RepSpec.flags[16],RepSpec.flags[8],sortingheaderf);
        headerf = true;
        firstf = false;
      end;      
    end;
  
    ResetLoop(TBIVr);
    TBIVr.PRCode = wproj;
    TBIVr.Invoice = -1;
    TBIVr.oVc = 1;
  // Purchase 
    found = true;
    while (LoopKey("MainKey",TBIVr,1,found)) begin
      testf = true;
      budget = blankval;
      invoiced = blankval;
      invable = blankval;

      budgetincur = blankval;
      invoicedincur = blankval;
      invableincur = blankval;
      if (TBIVr.PRCode!=wproj) then begin found = false; end;
      if ((TBIVr.oVc<1) or (TBIVr.oVc>4)) then begin testf = false; end;
      if (TBIVr.oVc==1) then begin
        if (TBIVr.ItemType!=0) then begin testf = false; end;
      end else begin 
//        if (TBIVr.ItemType==3) then begin testf = false; end;
        if (TBIVr.ItemType!=0) then begin testf = false; end;
      end;
      if (DateInRange(TBIVr.TransDate,RepSpec.d1,RepSpec.d2)==false) then begin testf = false; end;
      if (DateInRange(TBIVr.InvDate,RepSpec.d1,RepSpec.d2)==false) and nonblankdate(TBIVr.InvDate) then begin testf = false; end;
      if (SetInSet(RepSpec.ObjStr,TBIVr.Objects)==false) then begin testf = false; end;
      if (nonblank(RepSpec.LastAcc)) then begin
        if (RepSpec.LastAcc!=TBIVr.INGroup) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.f7)) then begin
        testf = (TBIVr.ArtCode==RepSpec.f7);
      end;      
      if (testf) then begin
        testf = ItemInItemGroupOrClass(TBIVr.ArtCode,"",RepSpec.f8);
      end;       
      if (nonblank(RepSpec.f4)) then begin
        if (RepSpec.f4!=TBIVr.EMCode) then begin
          testf = false;
        end;
      end;    
      if (!found) then begin testf = false; end;
      if (testf) then begin
        if (!headerf) then begin
          if (projstathf) then begin
            ProjStatHeader(RepSpec,PRp,PRp.Code,PRp.Name,PRp.CustCode,PRp.CustName,RepSpec.flags[16],RepSpec.flags[8],sortingheaderf);
            projstathf = false;
          end;
        end;
        grouppr = false;
        budtp = 0; // here : 0 - running, 1 - fixed 
        if (budfound) then begin FindInvoice2Method(PRp.Code,TBIVr.ArtCode,TBIVr.EMCode,CurrentDate,TBIVr.ItemType,TBBUr,budtp,false); end;
        if (RepSpec.flags[12]==4) then begin budtp = 0; end;
        if (budtp==0 or RepSpec.flags[12]==2) then begin
          invablesum = TBIVr.Sum;
          invablesumincur = TBIVr.SumInCur;
          if (PRp.StopInvoicing!=0) then begin 
            invablesum = blankval; 
            invablesumincur = blankval; 
          end;
          if (RepSpec.flags[18]!=0) then begin
            SumInCur = TBIVr.SumInCur;
            CostPriceInCur = TBIVr.CostPriceInCur;
            if (SumInCur==0) then begin 
              SumInCur = TBIVr.Sum;
            end;  
            if (CostPriceInCur==0) then begin 
              CostPriceInCur = TBIVr.CostPrice;
            end; 
          end;  
          if ((TBIVr.Invoice==-1) or 
             ((TBIVr.Invoice!=-1) and (nonblankdate(TBIVr.InvDate)) and (DateInRange(TBIVr.InvDate,RepSpec.d1,RepSpec.d2)==false))) then begin
            AddProjValue(amounts,costf,invable,TBIVr.Sum,TBIVr.CostPrice,TBIVr.InvQty);
            if (RepSpec.flags[18]!=0) then begin
               AddProjValue(amounts,costf,invableincur,SumInCur,CostPriceInCur,TBIVr.InvQty);
            end;
          end else begin
            AddProjValue(amounts,costf,invoiced,TBIVr.Sum,TBIVr.CostPrice,TBIVr.InvQty);            
            if (RepSpec.flags[18]!=0) then begin
              AddProjValue(amounts,costf,invoicedincur,SumInCur,CostPriceInCur,TBIVr.InvQty);
            end;
          end;
        end;
        if (budfound) then begin 
          ProjStatBudgAdd(RepSpec,TBBUr,TBIVr,PRp,oldem,oldin,amounts,invable,invoiced,budget,budtp,invableincur,invoicedincur,budgetincur,RepSpec.ObjStr,0);
        end;
        if (RepSpec.flags[12]==1) then begin ProjStatCostAdd(TBIVr,amounts,budget,budgetincur); end;
        if (!headerf) then begin
          if (firstf) then begin
            ProjStatHeader(RepSpec,PRp,PRp.Code,PRp.Name,PRp.CustCode,PRp.CustName,RepSpec.flags[16],RepSpec.flags[8],sortingheaderf);
            firstf = false;
          end;
        end;
        dblroutine = "DblPR";
        switch (RepSpec.flags[10]) begin
          case 3:
            dblstr = TBIVr.PRCode;
            dblroutine = "DblPrTranRn";
          case 4:
            dblstr = TBIVr.PRCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.ArtCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.EMCode;
            dblroutine = "DblPrTranRn";
          case 5:
            dblstr = TBIVr.SerNr;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.Row;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.PRCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.oVc;
        end;
        if (RepSpec.flags[18]!=0) and (nonblank(TBIVr.CurncyCode)) then begin
          if (RepSpec.flags[5]!=0) then begin
            cost = TBIVr.Qty;
          end else begin
            cost = TBIVr.CostPriceInCur*TBIVr.Qty;
          end;
        end else begin
          if (RepSpec.flags[5]!=0) then begin
            cost = TBIVr.Qty;
          end else begin
            cost = TBIVr.CostPrice*TBIVr.Qty;
          end;
        end;
        AddPTToList(RepSpec,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                    TBIVr.ArtCode,TBIVr.EMCode,TBIVr.PRCode,dblstr,TBIVr.TransDate,invable,invoiced,budget,budgetincur,cost,
                    TBIVr.Comment,dblroutine,0);
        ProjStatDoSumup(invable,invoiced,budget,grinvable,grinvoiced,grbudget);
        ProjStatDoSumup(invable,invoiced,budget,prinvable,prinvoiced,prbudget);
        
        ProjStatDoSumup(invableincur,invoicedincur,budgetincur,grinvableincur,grinvoicedincur,grbudgetincur);
        ProjStatDoSumup(invableincur,invoicedincur,budgetincur,prinvableincur,prinvoicedincur,prbudgetincur);
        if (RepSpec.flags[14]==1) then begin
          ProjStatCostSumup(RepSpec,cost,invable,invoiced,prcost);      
          grcost = grcost + cost;
        end;        
      end;
    end;
    
    if (budfound) then begin
      ProjStatBudgNoTrans(RepSpec,PRp,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                          TBBUr,amounts,invable,invoiced,budget,budtp,0,RepSpec.ObjStr,invableincur,invoicedincur,budgetincur);
      ProjStatDoSumup(invable,invoiced,budget,grinvable,grinvoiced,grbudget);
      ProjStatDoSumup(invable,invoiced,budget,prinvable,prinvoiced,prbudget);

      ProjStatDoSumup(invableincur,invoicedincur,budgetincur,grinvableincur,grinvoicedincur,grbudgetincur);
      ProjStatDoSumup(invableincur,invoicedincur,budgetincur,prinvableincur,prinvoicedincur,prbudgetincur);

      if (RepSpec.flags[14]==1) then begin
// this must be sick , last project tarnsaction from difrent project ?        ProjStatCostSumup(RepSpec,TBIVr.Qty*TBIVr.CostPrice,invable,invoiced,prcost);      
      end;      
      if ((invable!=0) or (invoiced!=0) or (budget!=0)) then begin grouppr = false; end;
    end;
  end;  
L33:;
  if (grouppr==false) then begin
    PrintPTList(RepSpec,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,acost,acomment,adblroutine,acnt);
    grcost = prcost;
    ProjStatPrintGrSumup(RepSpec,6794,grinvoiced,grinvable,grbudget,grcost,grnotdone);
    grouppr = true;
  end;
  ClearArrays(aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt);  
    
  for (i=0;i<subpram;i=i+1) begin  
    projstathf = false;    
    wproj = subproject[i]; 
    TBBUr.PRCode = wproj;
    budfound = ReadFirstMain(TBBUr,1,true);
    if (budfound) then begin
      budfound = TestProStatSpecifiction(RepSpec,TBBUr,5,RepSpec.ObjStr);
    end;
    if (budfound) then begin
      if (!headerf) then begin
        ProjStatHeader(RepSpec,PRp,PRp.Code,PRp.Name,PRp.CustCode,PRp.CustName,RepSpec.flags[16],RepSpec.flags[8],sortingheaderf);
        headerf = true;
        firstf = false;
      end;      
      projstathf = true;
    end;
        
    ResetLoop(TBIVr);
    TBIVr.PRCode = wproj;
    TBIVr.Invoice = -1;
    TBIVr.oVc = 1;
  // Material 
    found = true;
    while (LoopKey("MainKey",TBIVr,1,found)) begin
      testf = true;
      budget = blankval;
      invoiced = blankval;
      invable = blankval;
      if (TBIVr.PRCode!=wproj) then begin found = false; end;
      if (testf) then begin
//        testf = false;
//        if (((TBIVr.oVc==1) or (TBIVr.oVc==4) or (TBIVr.oVc==6) or (TBIVr.oVc==7)) and (TBIVr.ItemType==5)) then begin testf = true; end;
//does it matter where Materials is put on =? 
        if (TBIVr.ItemType!=5) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.d1) and nonblank(RepSpec.d2)) then begin
        if (DateInRange(TBIVr.TransDate,RepSpec.d1,RepSpec.d2)==false) then begin testf = false; end;
        if (DateInRange(TBIVr.InvDate,RepSpec.d1,RepSpec.d2)==false) and nonblankdate(TBIVr.InvDate) then begin testf = false; end;
      end;
      if (SetInSet(RepSpec.ObjStr,TBIVr.Objects)==false) then begin testf = false; end;
      if (nonblank(RepSpec.LastAcc)) then begin
        if (RepSpec.LastAcc!=TBIVr.INGroup) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.f7)) then begin
        testf = (TBIVr.ArtCode==RepSpec.f7);
      end;
      if (testf) then begin
        testf = ItemInItemGroupOrClass(TBIVr.ArtCode,"",RepSpec.f8);
      end;       
      if (nonblank(RepSpec.f4)) then begin
        if (RepSpec.f4!=TBIVr.EMCode) then begin
          testf = false;
        end;
      end;    
      if (!found) then begin testf = false; end;
      if (testf) then begin
        if (!headerf) then begin
          if (projstathf) then begin
            ProjStatHeader(RepSpec,PRp,PRp.Code,PRp.Name,PRp.CustCode,PRp.CustName,RepSpec.flags[16],RepSpec.flags[8],sortingheaderf);
            projstathf = false;
          end;
        end;
        grouppr = false;
        budtp = 0; // here : 0 - running, 1 - fixed 
        if (budfound) then begin FindInvoice2Method(PRp.Code,TBIVr.ArtCode,TBIVr.EMCode,CurrentDate,5,TBBUr,budtp,false); end;
        if (RepSpec.flags[12]==4) then begin budtp = 0; end;
        if (budtp==0 or RepSpec.flags[12]==2) then begin
          invablesum = TBIVr.Sum;
          invablesumincur = TBIVr.SumInCur;
          if (PRp.StopInvoicing!=0) then begin 
            invablesum = blankval; 
            invablesumincur = blankval; 
          end;
          if (RepSpec.flags[18]!=0) then begin
            SumInCur = TBIVr.SumInCur;
            CostPriceInCur = TBIVr.CostPriceInCur;
            if (SumInCur==0) then begin 
              SumInCur = TBIVr.Sum;
            end;  
            if (CostPriceInCur==0) then begin 
              CostPriceInCur = TBIVr.CostPrice;
            end; 
          end;  
          if ((TBIVr.Invoice==-1) or 
             ((TBIVr.Invoice!=-1) and (nonblankdate(TBIVr.InvDate)) and (DateInRange(TBIVr.InvDate,RepSpec.d1,RepSpec.d2)==false))) then begin
            AddProjValue(amounts,costf,invable,TBIVr.Sum,TBIVr.CostPrice,TBIVr.InvQty);
            if (RepSpec.flags[18]!=0) then begin
               AddProjValue(amounts,costf,invableincur,SumInCur,CostPriceInCur,TBIVr.InvQty);
            end;
          end else begin
            AddProjValue(amounts,costf,invoiced,TBIVr.Sum,TBIVr.CostPrice,TBIVr.InvQty);            
            if (RepSpec.flags[18]!=0) then begin
              AddProjValue(amounts,costf,invoicedincur,SumInCur,CostPriceInCur,TBIVr.InvQty);
            end;
          end;
        end;
        if (budfound) then begin
          ProjStatBudgAdd(RepSpec,TBBUr,TBIVr,PRp,oldem,oldin,amounts,invable,invoiced,budget,budtp,invableincur,invoicedincur,budgetincur,RepSpec.ObjStr,5);
        end;
        if (RepSpec.flags[12]==1) then begin ProjStatCostAdd(TBIVr,amounts,budget,budgetincur); end;
        if (!headerf) then begin
          if (firstf) then begin
            ProjStatHeader(RepSpec,PRp,PRp.Code,PRp.Name,PRp.CustCode,PRp.CustName,RepSpec.flags[16],RepSpec.flags[8],sortingheaderf);
            firstf = false;
          end;
        end;
        dblroutine = "DblPR";
        switch (RepSpec.flags[10]) begin
          case 3:
            dblstr = TBIVr.PRCode;
            dblroutine = "DblPrTranRn";
          case 4:
            dblstr = TBIVr.PRCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.ArtCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.EMCode;
            dblroutine = "DblPrTranRn";
          case 5:
            dblstr = TBIVr.SerNr;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.Row;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.PRCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.oVc;
        end;
        if (RepSpec.flags[18]!=0) and (nonblank(TBIVr.CurncyCode)) then begin
          if (RepSpec.flags[5]!=0) then begin
            cost = TBIVr.Qty;
          end else begin
            cost = TBIVr.CostPriceInCur*TBIVr.Qty;
          end;
        end else begin
          if (RepSpec.flags[5]!=0) then begin
            cost = TBIVr.Qty;
          end else begin
            cost = TBIVr.CostPrice*TBIVr.Qty;
          end;
        end;
        AddPTToList(RepSpec,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                    TBIVr.ArtCode,TBIVr.EMCode,TBIVr.PRCode,dblstr,TBIVr.TransDate,invable,invoiced,budget,budgetincur,cost,
                    TBIVr.Comment,dblroutine,0);
        ProjStatDoSumup(invable,invoiced,budget,grinvable,grinvoiced,grbudget);
        ProjStatDoSumup(invable,invoiced,budget,prinvable,prinvoiced,prbudget);
        
        ProjStatDoSumup(invableincur,invoicedincur,budgetincur,grinvableincur,grinvoicedincur,grbudgetincur);
        ProjStatDoSumup(invableincur,invoicedincur,budgetincur,prinvableincur,prinvoicedincur,prbudgetincur);
        if (RepSpec.flags[14]==1) then begin
          ProjStatCostSumup(RepSpec,cost,invable,invoiced,prcost);      
          grcost = grcost + cost;
        end;        
      end;
    end;
    
    if (budfound) then begin
      ProjStatBudgNoTrans(RepSpec,PRp,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                          TBBUr,amounts,invable,invoiced,budget,budtp,5,RepSpec.ObjStr,invableincur,invoicedincur,budgetincur);
      ProjStatDoSumup(invable,invoiced,budget,grinvable,grinvoiced,grbudget);
      ProjStatDoSumup(invable,invoiced,budget,prinvable,prinvoiced,prbudget);

      ProjStatDoSumup(invableincur,invoicedincur,budgetincur,grinvableincur,grinvoicedincur,grbudgetincur);
      ProjStatDoSumup(invableincur,invoicedincur,budgetincur,prinvableincur,prinvoicedincur,prbudgetincur);

      if (RepSpec.flags[14]==1) then begin
// this must be sick , last project tarnsaction from difrent project ?                 ProjStatCostSumup(RepSpec,TBIVr.Qty*TBIVr.CostPrice,invable,invoiced,prcost);      
      end;      
      if ((invable!=0) or (invoiced!=0) or (budget!=0)) then begin grouppr = false; end;
    end;
  end;  
  
L44:;
  if (grouppr==false) then begin
    PrintPTList(RepSpec,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,acost,acomment,adblroutine,acnt);
    grcost = prcost;
    ProjStatPrintGrSumup(RepSpec,6799,grinvoiced,grinvable,grbudget,grcost,grnotdone);
    grouppr = true;
  end;
  ClearArrays(aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt);
  
  for (i=0;i<subpram;i=i+1) begin  
    wproj = subproject[i]; 
    TBBUr.PRCode = wproj;
    budfound = ReadFirstMain(TBBUr,1,true);
    if (budfound) then begin
      budfound = TestProStatSpecifiction(RepSpec,TBBUr,1,RepSpec.ObjStr);
    end;    
    if (budfound) then begin
      if (!headerf) then begin
        ProjStatHeader(RepSpec,PRp,PRp.Code,PRp.Name,PRp.CustCode,PRp.CustName,RepSpec.flags[16],RepSpec.flags[8],sortingheaderf);
        headerf = true;
        firstf = false;
      end;      
      projstathf = true;
    end;
 
    ResetLoop(TBIVr);
    TBIVr.PRCode = wproj;
    TBIVr.Invoice = -1;
    TBIVr.oVc = 1;
  // Stocked Items 
    found = true;
    while (LoopKey("MainKey",TBIVr,1,found)) begin
      testf = true;
      budget = blankval;
      invoiced = blankval;
      invable = blankval;
      if (TBIVr.PRCode!=wproj) then begin found = false; end;
      if (testf) then begin
        testf = false;
        if (((TBIVr.oVc==1) or (TBIVr.oVc==4) or (TBIVr.oVc==6) or (TBIVr.oVc==7)) and (TBIVr.ItemType==1)) then begin testf = true; end;
      end;
      if (DateInRange(TBIVr.TransDate,RepSpec.d1,RepSpec.d2)==false) then begin testf = false; end;
      if (DateInRange(TBIVr.InvDate,RepSpec.d1,RepSpec.d2)==false) and nonblankdate(TBIVr.InvDate) then begin testf = false; end;
      if (SetInSet(RepSpec.ObjStr,TBIVr.Objects)==false) then begin testf = false; end;
      if (nonblank(RepSpec.LastAcc)) then begin
        if (RepSpec.LastAcc!=TBIVr.INGroup) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.f7)) then begin
        testf = (TBIVr.ArtCode==RepSpec.f7);
      end;      
      if (testf) then begin
        testf = ItemInItemGroupOrClass(TBIVr.ArtCode,"",RepSpec.f8);
      end;       
      if (nonblank(RepSpec.f4)) then begin
        if (RepSpec.f4!=TBIVr.EMCode) then begin
          testf = false;
        end;
      end;    
      if (!found) then begin testf = false; end;
      if (testf) then begin
        if (!headerf) then begin
          if (projstathf) then begin
            ProjStatHeader(RepSpec,PRp,PRp.Code,PRp.Name,PRp.CustCode,PRp.CustName,RepSpec.flags[16],RepSpec.flags[8],sortingheaderf);
            projstathf = false;
          end;
        end;
        grouppr = false;
        budtp = 0; // here : 0 - running, 1 - fixed 
        if (budfound) then begin FindInvoice2Method(PRp.Code,TBIVr.ArtCode,TBIVr.EMCode,CurrentDate,TBIVr.ItemType,TBBUr,budtp,false); end;
        if (RepSpec.flags[12]==4) then begin budtp = 0; end;
        if (budtp==0) or (RepSpec.flags[12]==2) then begin
          invablesum = TBIVr.Sum;
          invablesumincur = TBIVr.SumInCur;
          if (PRp.StopInvoicing!=0) then begin 
            invablesum = blankval; 
            invablesumincur = blankval; 
          end;
           if (RepSpec.flags[18]!=0) then begin
            SumInCur = TBIVr.SumInCur;
            CostPriceInCur = TBIVr.CostPriceInCur;
            if (SumInCur==0) then begin 
              SumInCur = TBIVr.Sum;
            end;  
            if (CostPriceInCur==0) then begin 
              CostPriceInCur = TBIVr.CostPrice;
            end; 
          end;  
          if ((TBIVr.Invoice==-1) or 
             ((TBIVr.Invoice!=-1) and (nonblankdate(TBIVr.InvDate)) and (DateInRange(TBIVr.InvDate,RepSpec.d1,RepSpec.d2)==false))) then begin
            AddProjValue(amounts,costf,invable,TBIVr.Sum,TBIVr.CostPrice,TBIVr.InvQty);
            if (RepSpec.flags[18]!=0) then begin
               AddProjValue(amounts,costf,invableincur,SumInCur,CostPriceInCur,TBIVr.InvQty);
            end;
          end else begin
            AddProjValue(amounts,costf,invoiced,TBIVr.Sum,TBIVr.CostPrice,TBIVr.InvQty);            
            if (RepSpec.flags[18]!=0) then begin
              AddProjValue(amounts,costf,invoicedincur,SumInCur,CostPriceInCur,TBIVr.InvQty);
            end;
          end;
        end;
        if (budfound) then begin
          ProjStatBudgAdd(RepSpec,TBBUr,TBIVr,PRp,oldem,oldin,amounts,invable,invoiced,budget,budtp,invableincur,invoicedincur,budgetincur,RepSpec.ObjStr,1);
        end;
        if (RepSpec.flags[12]==1) then begin ProjStatCostAdd(TBIVr,amounts,budget,budgetincur); end;
        if (!headerf) then begin
          if (firstf) then begin
            ProjStatHeader(RepSpec,PRp,PRp.Code,PRp.Name,PRp.CustCode,PRp.CustName,RepSpec.flags[16],RepSpec.flags[8],sortingheaderf);
            firstf = false;
          end;
        end;
        dblroutine = "DblPR";
        switch (RepSpec.flags[10]) begin
          case 3:
            dblstr = TBIVr.PRCode;
            dblroutine = "DblPrTranRn";
          case 4:
            dblstr = TBIVr.PRCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.ArtCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.EMCode;
            dblroutine = "DblPrTranRn";
          case 5:
            dblstr = TBIVr.SerNr;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.Row;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.PRCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.oVc;
        end;
        if (RepSpec.flags[18]!=0) and (nonblank(TBIVr.CurncyCode)) then begin
          if (RepSpec.flags[5]!=0) then begin
            cost = TBIVr.Qty;
          end else begin
            cost = TBIVr.CostPriceInCur*TBIVr.Qty;
          end;
        end else begin
          if (RepSpec.flags[5]!=0) then begin
            cost = TBIVr.Qty;
          end else begin
            cost = TBIVr.CostPrice*TBIVr.Qty;
          end;
        end;
        AddPTToList(RepSpec,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                    TBIVr.ArtCode,TBIVr.EMCode,TBIVr.PRCode,dblstr,TBIVr.TransDate,invable,invoiced,budget,budgetincur,cost,
                    TBIVr.Comment,dblroutine,0);
        ProjStatDoSumup(invable,invoiced,budget,grinvable,grinvoiced,grbudget);
        ProjStatDoSumup(invable,invoiced,budget,prinvable,prinvoiced,prbudget);
        
        ProjStatDoSumup(invableincur,invoicedincur,budgetincur,grinvableincur,grinvoicedincur,grbudgetincur);
        ProjStatDoSumup(invableincur,invoicedincur,budgetincur,prinvableincur,prinvoicedincur,prbudgetincur);
        if (RepSpec.flags[14]==1) then begin
          ProjStatCostSumup(RepSpec,cost,invable,invoiced,prcost);      
          grcost = grcost + cost;
        end;              
      end;
    end;
    
    if (budfound) then begin
      ProjStatBudgNoTrans(RepSpec,PRp,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                          TBBUr,amounts,invable,invoiced,budget,budtp,1,RepSpec.ObjStr,invableincur,invoicedincur,budgetincur);
      ProjStatDoSumup(invable,invoiced,budget,grinvable,grinvoiced,grbudget);
      ProjStatDoSumup(invable,invoiced,budget,prinvable,prinvoiced,prbudget);

      ProjStatDoSumup(invableincur,invoicedincur,budgetincur,grinvableincur,grinvoicedincur,grbudgetincur);
      ProjStatDoSumup(invableincur,invoicedincur,budgetincur,prinvableincur,prinvoicedincur,prbudgetincur);

      if (RepSpec.flags[14]==1) then begin
// this must be sick , last project tarnsaction from difrent project ?                 ProjStatCostSumup(RepSpec,TBIVr.Qty*TBIVr.CostPrice,invable,invoiced,prcost);      
      end;      
      if ((invable!=0) or (invoiced!=0) or (budget!=0)) then begin grouppr = false; end;
    end;
  end;  
  
L55:;
  if (grouppr==false) then begin
    PrintPTList(RepSpec,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,acost,acomment,adblroutine,acnt);
    grcost = prcost;
    ProjStatPrintGrSumup(RepSpec,6779,grinvoiced,grinvable,grbudget,grcost,grnotdone);
    grouppr = true;
  end;
  ClearArrays(aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt);
// Down payments 
  for (i=0;i<subpram;i=i+1) begin  
    wproj=subproject[i]; 
    TBBUr.PRCode = wproj;
    budfound = ReadFirstMain(TBBUr,1,true);
    if (budfound) then begin
      budfound = TestProStatSpecifiction(RepSpec,TBBUr,-1,RepSpec.ObjStr);
    end;
    if (budfound) then begin
      projstathf = true;
      if (!headerf) then begin
        ProjStatHeader(RepSpec,PRp,PRp.Code,PRp.Name,PRp.CustCode,PRp.CustName,RepSpec.flags[16],RepSpec.flags[8],sortingheaderf);
        headerf = true;
        firstf = false;
      end;      
    end;

    sPRp.Code=wproj;
    if ReadFirstMain(sPRp,1,true) then begin
       
      if (ProjStatDownpayable(RepSpec,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,sPRp,downpayed,downpayable,amounts,prinvable,prinvoiced,"DblPR",downpayedused,prinvableincur,prinvoicedincur,downpayedincur,downpayableincur,downpayedusedincur)) then begin

        if (!headerf) then begin
          if (projstathf) then begin
            ProjStatHeader(RepSpec,PRp,PRp.Code,PRp.Name,PRp.CustCode,PRp.CustName,RepSpec.flags[16],RepSpec.flags[8],sortingheaderf);
            projstathf = false;
          end;
        end;
        if (!headerf) then begin
          ProjStatHeader(RepSpec,PRp,PRp.Code,PRp.Name,PRp.CustCode,PRp.CustName,RepSpec.flags[16],RepSpec.flags[8],sortingheaderf);
          headerf = true;
          firstf = false;
        end;

        PrintPTList(RepSpec,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,acost,acomment,adblroutine,acnt);
        budget = blankval;
        if (downpayable>prinvable) then begin
          if (RepSpec.flags[11]!=3) then begin
            prinvable = downpayable;
            prinvableincur = downpayableincur;
          end;
        end;

        prinvoiced = prinvoiced + downpayed + downpayedused;
        prinvable = prinvable - downpayedused;

        prinvoicedincur = prinvoicedincur + downpayedincur + downpayedusedincur;
        prinvableincur = prinvableincur - downpayedusedincur;

//        if (downpayed>prinvoiced) then begin prinvoiced = downpayed; end; // I don't know if this or the line above is more correct
        if (!headerf) then begin
          ProjStatHeader(RepSpec,PRp,PRp.Code,PRp.Name,PRp.CustCode,PRp.CustName,RepSpec.flags[16],RepSpec.flags[8],sortingheaderf);
          headerf = true;
          firstf = false;
        end;
        ProjStatPrintGrSumup(RepSpec,4869,downpayed,downpayable,budget,grcost,grnotdone);
        if (RepSpec.flags[18]!=0) and (nonblank(PRp.CurncyCode)) then begin
          ProjStatPrintGrSumup(RepSpec,4869,downpayedincur,downpayableincur,budgetincur,grcost,grnotdone);
        end;
      end;
      
    end;
  end;
  
    
  if (RepSpec.flags[18]!=0) and (nonblank(PRp.CurncyCode)) then begin
    if (RepSpec.flags[12]==4) then begin
      diff = prinvableincur;
    end else begin
      diff = prinvoicedincur + prinvableincur;
    end;
    diff = diff + prnotdone;
    diff = diff - prbudgetincur;  
  end else begin
    if (RepSpec.flags[12]==4) then begin
      diff = prinvable;
    end else begin
      diff = prinvoiced + prinvable;
    end;
    diff = diff + prnotdone;
    diff = diff - prbudget;  
  end;

  if (RepSpec.flags[12]==0) then begin diff = -diff; end;
  if ((firstf==false) or budfound) then begin
    if ((RepSpec.flags[13]==0) or RepSpec.flags[8]!=3) then begin
      if (RepSpec.flags[8]==1) then begin
        lastprclass = PRp.Leader;
      end;
      if ((prinvable!=0) or (prinvoiced!=0) or (prbudget!=0) or (prcost!=0)) then begin
        if (RepSpec.flags[10]==0) then begin
          StartFormat(15);
          OutStringID(0,"DblPRVc",PRp.Code,false,PRp.Code);
          if (RepSpec.flags[15]==0) then begin
            OutStringID(60,0,PRp.Name,false,PRp.Code);
          end else begin
            GetPRClassName(PRp.PRClass,tstr);        
            OutString(60,0,tstr,false);                   
          end;  
        end else begin
          Black_Divider(170,480);
          StartFormat(15);
// To make the Report to File look better. 
          OutString(15,0,"",false);
          OutString(80,0,"",false);
          OutString(170,0,USetStr(6796),true);
        end;
        if (RepSpec.flags[18]!=0) and (nonblank(PRp.CurncyCode)) then begin
          OutVal(270,0,prinvableincur,M4Val,true);
          OutVal(320,0,prinvoicedincur,M4Val,true);
          OutVal(400,0,prbudgetincur,M4Val,true);
        end else begin
          if (RepSpec.flags[17]==1) then begin 
            OutVal(220,0,prnotdone,M4Val,true);
          end;  
          OutVal(270,0,prinvable,M4Val,true);
          OutVal(320,0,prinvoiced,M4Val,true);
          OutVal(400,0,prbudget,M4Val,true);
        end;
        if (RepSpec.flags[12]==3) then begin
          diff = prbudget - (prinvable + prinvoiced);
          OutVal(9,0,diff,M4Val,true);
        end else begin
          if (RepSpec.flags[14]==0) then begin
            if (RepSpec.flags[12]==2) then begin diff = -diff; end;
            OutVal(9,0,diff,M4Val,true);
          end else begin
            OutVal(9,0,prcost,M4Val,true);
          end;
        end;
        if (RepSpec.flags[18]!=0) and (nonblank(PRp.CurncyCode)) then begin
          OutString(470,0,PRp.CurncyCode,false);
        end;
        EndFormat;
        if (RepSpec.flags[10]!=0) then begin
          StartFormat(15);
          EndFormat;
        end;
      end;  
    end else begin
      if (lastprclass!=PRp.PRClass) then begin        
        GetPRClassName(lastprclass,tstr);        
        StartFormat(15);
        OutString(0,0,lastprclass,false);
        OutString(60,0,tstr,false);        
        OutVal(240,0,classinvablep,M4Val,true);
        OutVal(320,0,classinvoicedp,M4Val,true);
        OutVal(400,0,classbudgetp,M4Val,true);
        OutVal(9,0,classcostp,M4Val,true);
        EndFormat;  
        classinvoicedp = blankval;
        classinvablep = blankval;
        classbudgetp = blankval;
        classcostp = blankval;
        lastprclass = PRp.PRClass;
      end;
    end;
  end;
  if (RepSpec.flags[13]==1) then begin
    ProjStatDoSumup(prinvable,prinvoiced,prbudget,classinvablep,classinvoicedp,classbudgetp);
    if (RepSpec.flags[14]==1) then begin
      classcostp = classcostp + prcost;
    end;
  end;  
  if (RepSpec.flags[14]==1) then begin
    totcostp = totcostp + prcost;
  end;   
  invoicedp = invoicedp + prinvoiced;
  budgetp = budgetp + prbudget;
  invablep = invablep + prinvable;
  nondone = nondone + prnotdone;
  RETURN;
END;

procedure ProjStatTransaction(record RcVc RepSpec,record PRVc PRp,var val tbudgetp,var val tdiffp,var val tinvoicedp,var val tinvablep,var val tnotdone,var string lastprclass,var val classbudgetp,var val classinvoicedp,var val classinvablep,var val classcostp,var val totcostp,var Boolean sortingheaderf)
BEGIN
  val budget,invable,invoiced,diff,notdone;

  if (RepSpec.flags[5]==0) then begin
    PrintProjectSpecStats(RepSpec,PRp,budget,invoiced,invable,notdone,true,lastprclass,classbudgetp,classinvoicedp,classinvablep,classcostp,totcostp,sortingheaderf);
  end else begin
    PrintProjectSpecStats(RepSpec,PRp,budget,invoiced,invable,notdone,false,lastprclass,classbudgetp,classinvoicedp,classinvablep,classcostp,totcostp,sortingheaderf);
  end;
  if (RepSpec.flags[12]==4) then begin
    diff = invable;
  end else begin
    diff = invoiced + invable;
  end;
  diff = diff - budget;
  if (RepSpec.flags[12]==0) then begin diff = -diff; end;
  tbudgetp = tbudgetp + budget;
  tinvoicedp = tinvoicedp + invoiced;
  tinvablep = tinvablep + invable;
  tnotdone = tnotdone + notdone;
  tdiffp = tdiffp + diff;
  if (RepSpec.flags[14]==0) then begin
    classcostp = classcostp + diff;
  end;
  RETURN;
END;

global
procedure ProStatRn(record RcVc RepSpec)
BEGIN
  record PRVc PRr;
  Boolean testf,found;
  string 255 frpr,topr;
  string 255 frcu,tocu;
  string 255 ckey;
  Integer keys;
  val tbudget,tinvable,tinvoiced,tdiff,tnotdone;
  val classbudget,classinvoiced,classinvable,classcost,tcost;
  Integer rw;
  string 255 tstr,lastprclass,lastsortingheader;
  Boolean lastprclf,sortingheaderf;
  record CUVc CUr;

  lastprclf = true;
  rw = 1;
  frpr = FirstInRange(RepSpec.f1,20);
  topr = LastInRange(RepSpec.f1,20);
  frcu = FirstInRange(RepSpec.f3,20);
  tocu = LastInRange(RepSpec.f3,20);
  if (nonblankdate(RepSpec.d1)) then begin
    RepSpec.sStartDate = RepSpec.d1;
  end;
  if (nonblankdate(RepSpec.d2)) then begin
    RepSpec.sEndDate = RepSpec.d2;
  end;
  StartReportJob(USetStr(6820));
   HTProjects(frpr,topr,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   if (RepSpec.flags[5]==0) then begin
     tstr = USetStr(5522);
   end else begin
     tstr = USetStr(5523);
   end;
   Header(rw,tstr,0);
   if (nonblank(RepSpec.f2)) then begin
     tstr = USetStr(4849) & " ";
     tstr = tstr & RepSpec.f2;
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
   HTCusts(frcu,tocu,tstr);
   Header(rw,tstr,1);
   if (HasCategories) then begin
     HTCustCat(RepSpec.f5,tstr);
     if (nonblank(tstr)) then begin
       Header(rw,tstr,1);
       rw = rw + 1;
     end;
   end;
   if (HasContactClassification) then begin
     HTCustClass(RepSpec.f6,tstr);
     if (nonblank(tstr)) then begin
       Header(rw,tstr,1);
       rw = rw + 1;
     end;
   end;
//   rw = rw + 1;
   HTPRClass(RepSpec.FirstAcc,tstr);
   if (nonblank(tstr)) then begin
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
   if ((nonblankdate(RepSpec.d1)) or (nonblankdate(RepSpec.d2))) then begin
     HT2Per(RepSpec.d1,RepSpec.d2,tstr);
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
    if (nonblank(RepSpec.f7)) then begin
      HTItem(RepSpec.f7,tstr);
      Header(rw,tstr,1);
      rw = rw + 1;
    end;     
    if (HasItemGroups) then begin
      HTArtGroup(RepSpec.LastAcc,tstr);
      if (nonblank(tstr)) then begin
        Header(rw,tstr,1);
        rw = rw + 1;
      end;
    end;
    if (HasItemClassification) then begin
      HTItemClass(RepSpec.f8,tstr);
      if (nonblank(tstr)) then begin
        Header(rw,tstr,1);
        rw = rw + 1;
      end;
    end;
   if (RepSpec.IncDaughter==1) then begin
     Header(rw,USetStr(4860),1);
     rw = rw + 1;
   end;
   Header(rw,USetStr(16400+RepSpec.flags[12]),0);
   if (RepSpec.flags[18]==0) then begin
     tstr = USetStr(2369);
    end else begin
     tstr = USetStr(6650);
   end;            
   Header(rw,tstr,1);
  EndHeader;
  if (RepSpec.flags[18]==0) then begin
    SetRepCol(9,480);
  end else begin
    SetRepCol(9,465);
  end;
  
  StartFormat(15);
  if (RepSpec.flags[13]==0) then begin
    OutString(0,0,USetStr(6821),false);
  end else begin
    OutString(0,0,USetStr(4850),false);
  end;
  OutString(80,0,"",false);
  if (RepSpec.flags[12]==4) then begin
    OutString(240,0,USetStr(6828),true);
  end else begin 
    if (RepSpec.flags[17]==1) then begin 
      OutString(220,0,USetStr(6829),true);
    end;  
    OutString(270,0,USetStr(6823),true);
  end;
  OutString(320,0,USetStr(6822),true);
  if (RepSpec.flags[12]!=1) then begin
    OutString(400,0,USetStr(6824),true);
  end else begin
    OutString(400,0,USetStr(6826),true);
  end;
  if (RepSpec.flags[12]==3) then begin
    OutString(9,0,USetStr(6825),true);//6803
  end else begin
    if (RepSpec.flags[14]==0) then begin
      OutString(9,0,USetStr(6825),true);
    end else begin
      OutString(9,0,USetStr(6826),true);      
    end;
  end;  
  EndFormat;
  if (RepSpec.flags[13]!=0) and (RepSpec.flags[8]==3) then begin
    Gray_Divider(0,1);  
  end;
  switch (RepSpec.flags[8]) begin
    case 0:
      PRr.Code = frpr;
      ckey = "Code";
      keys = 1;
    case 1:
      PRr.Leader = RepSpec.f2;
      PRr.Code = frpr;
      ckey = "PRLeader";
      keys = 2;
    case 2:
      PRr.CustCode = frcu;
      ckey = "CustCode";
      keys = 1;
    case 3:
      PRr.CustCode = frcu;
      PRr.PRClass = RepSpec.FirstAcc;
      ckey = "PRClass";
      keys = 1;
  end;
  found = true;
  while (LoopKey(ckey,PRr,keys,found)) begin
    if (found) then begin
      switch (RepSpec.flags[8]) begin
        case 0:
          if ((nonblank(topr)) and (PRr.Code>topr)) then begin
            found = false;
          end;
        case 2:
          if ((nonblank(tocu)) and (PRr.CustCode>tocu)) then begin
            found = false;
          end;
      end;
    end;
    if (found) then begin
      testf = true;
      if (nonblank(frcu)) then begin
        if (PRr.CustCode<frcu) then begin
          if (RepSpec.flags[8]==2) then begin
            found = false;
          end else begin
            testf = false;
          end;
        end;
      end;
      if (nonblank(tocu)) then begin
        if (PRr.CustCode>tocu) then begin
          if (RepSpec.flags[8]==2) then begin
            found = false;
          end else begin
            testf = false;
          end;
        end;
      end;
      if (testf) then begin
        testf = ContactInGroupClass(PRr.CustCode,RepSpec.f5,RepSpec.f6,"CUST","","");
      end;      
      if (nonblank(frpr)) then begin
        if (PRr.Code<frpr) then begin
          if (RepSpec.flags[8]==0) then begin
            found = false;
          end else begin
            testf = false;
          end;         
        end;
      end;
      if (nonblank(topr)) then begin
        if (PRr.Code>topr) then begin
          if (RepSpec.flags[8]==0) then begin
            found = false;
          end else begin
            testf = false;
          end;
        end;
      end;
      if (nonblank(RepSpec.FirstAcc) and (RepSpec.FirstAcc!=PRr.PRClass)) then begin testf = false; end;
      if (nonblank(RepSpec.Stext) and (RepSpec.Stext!=PRr.PrSalesMan)) then begin testf = false; end;
      if (nonblank(RepSpec.f2)) then begin
        if (RepSpec.f2!=PRr.Leader) then begin
          if (RepSpec.flags[8]==1) then begin
            found = false;
          end else begin
            testf = false;
          end;
        end;
      end;
      if (testf) then begin
        CUr.Code = PRr.CustCode;
        if (ReadFirstMain(CUr,1,true)) then begin
          if ((nonblank(RepSpec.AccStr)) and (CUr.Objects!=RepSpec.AccStr)) then begin
            testf = false;
          end;
          if ((nonblank(RepSpec.TransStr)) and (CUr.CountryCode!=RepSpec.TransStr))  then begin
            testf = false;
          end;
        end;
      end;
      if (found==false) then begin testf = false; end;
      if ((RepSpec.flags[19]==0) and (PRr.Terminated!=1)) then begin testf = false; end;
      if ((RepSpec.flags[20]==0) and (PRr.Terminated==1)) then begin testf = false; end;
      if (testf) then begin
        switch (RepSpec.flags[8]) begin
          case 0:
          case 1:
            if (lastsortingheader!=PRr.Leader) then begin
              sortingheaderf = false;
            end;
            lastsortingheader = PRr.Leader;
          case 2:
            if (lastsortingheader!=PRr.CustCode) then begin
              sortingheaderf = false;
            end;
            lastsortingheader = PRr.CustCode;
          case 3:
            if (lastsortingheader!=PRr.PRClass) then begin
              sortingheaderf = false;
            end;
            lastsortingheader = PRr.PRClass;
        end;
      
        if (lastprclf) then begin
          lastprclass = PRr.PRClass;
          lastprclf = false;
        end;
        if (RepSpec.flags[10]!=2) then begin
          if (RepSpec.flags[8]==1) then begin
            if (PRr.Leader!=lastprclass) then begin
              Gray_Divider(0,1);
            end;
          end;
          if (RepSpec.flags[8]==3) then begin
            if (PRr.PRClass!=lastprclass) then begin
//              Gray_Divider(0,1);
            end;
          end;
          //????????????????
          ProjStatTransaction(RepSpec,PRr,tbudget,tdiff,tinvoiced,tinvable,tnotdone,lastprclass,classbudget,classinvoiced,classinvable,classcost,tcost,sortingheaderf);
        end else begin
          ; // Per Itemgroup 
        end;
      end;
    end;
  end;
  if ((RepSpec.flags[13]==1) and (RepSpec.flags[8]==3)) then begin
     GetPRClassName(lastprclass,tstr);        
     StartFormat(15);
     OutString(0,0,lastprclass,false);
     OutString(60,0,tstr,false);               
     OutVal(240,0,classinvable,M4Val,true);
     OutVal(320,0,classinvoiced,M4Val,true);
     OutVal(400,0,classbudget,M4Val,true);
     OutVal(9,0,classcost,M4Val,true);     
     EndFormat;    
  end;    
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(80,0,"",false);
  if (RepSpec.flags[18]==1) then begin
    OutString(86,0,USetStr(6778),false);
  end else begin 
    OutString(170,0,USetStr(6797),true);
  end;  
  if (RepSpec.flags[17]==1) then begin 
    OutVal(220,0,tnotdone,M4Val,true);
    tdiff = tdiff - tnotdone;
  end;  
  OutVal(270,0,tinvable,M4Val,true);
  OutVal(320,0,tinvoiced,M4Val,true);
  OutVal(400,0,tbudget,M4Val,true);
  if (RepSpec.flags[12]==3) then begin
    tdiff = tbudget - (tinvable + tinvoiced);
    OutVal(9,0,tdiff,M4Val,true);
  end else begin
    if (RepSpec.flags[14]==1) then begin
      OutVal(9,0,tcost,M4Val,true);  
    end else begin
      if (RepSpec.flags[12]==2) then begin tdiff = -tdiff; end;
      OutVal(9,0,tdiff,M4Val,true);
    end;
  end;    
  EndFormat;
  EndJob;
  RETURN;
END;