external procedure HTResClass(string,var string);
external procedure HTResLoc(string,var string);
external procedure SplitEclass(string,var Array string);
external function LongInt TimeToMinutes(Time);
external function LongInt FindReservation(string,Date,Time);
external function Time TimeDiff(Time,Time);


Function Boolean AssignCLadySelect(Record RcVc RepSpec,Record ActVc Actr,var Boolean foundf,record HouseKeepingBlock HouseKeepingr)
begin 
  Boolean sel;
  Record ResVc Roomr;
  Date vDate;
  
  sel = false;
  if ((Actr.TransDate <> RepSpec.d1) or (Actr.ActType <> HouseKeepingr.CleaningType)) then begin
    foundf = false;
  end else begin
    Roomr.Code = Actr.Resources;
    if ((RepSpec.flags[1]==0) or blank(Actr.Resources)) then begin
      if readfirstmain(Roomr,1,true) then begin
        if ((RepSpec.f4==Roomr.Type) or (blank(RepSpec.f4))) then begin
          if ((RepSpec.f5==Roomr.Class) or (blank(RepSpec.f5))) then begin
            if ((RepSpec.f2==Roomr.ResLoc) or (blank(RepSpec.f2))) then begin
              if (Actr.OKFlag==0) then begin
                sel = true;
              end;  
            end;
          end;
        end;
      end;
    end;
  end;
  AssignCLadySelect = sel;
  return;
end;  

global
function time GetLastActOnDay(string Person,Date SDate)
begin
  Record ActVc Actr;
  time res;
  string 30 ckey;
  record HouseKeepingBlock HouseKeepingr;
  boolean foundf,NoActs;

  ckey = "UserMain:";
  ckey = ckey & Person;
  foundf = true; NoActs = true;
  blockload(HouseKeepingr);
  Actr.TransDate = SDate;
  Actr.TodoFlag  = 0;
  while (LoopKey(ckey,Actr,2,foundf)) begin
 
    if (Actr.TransDate <> SDate) then begin
      foundf = false;
    end else begin
      if ((Actr.ActType == HouseKeepingr.CleaningType) and
          (Actr.CalTimeFlag==1)) then begin                    //calender
        res    = Actr.EndTime;
        NoActs = false;
      end; 
    end;   
  end;
  // No activities so get a profile
  if (NoActs) then begin
    resetloop(Actr);
    Actr.TransDate = SDate;
    Actr.TodoFlag  = 0;
    foundf = true;
    while (LoopKey(ckey,Actr,2,foundf)) begin
 
      if (Actr.TransDate <> SDate) then begin
        foundf = false;
      end else begin
        if ((Actr.ActType == HouseKeepingr.CleaningType) and
            (Actr.CalTimeFlag==2)) then begin                    //profile
          res = Actr.StartTime;
          foundf = false;
        end; 
      end;   
    end;   
  end;
  GetLastActOnDay = res;
  return;
end;


function val GetTotalTime(string Person,Date SDate,integer TimeType,boolean Showf)
begin
  string 100 ckey,tstr;
  Record ActVc Actr;
  Val res;
  boolean TrHs;
  record HouseKeepingBlock HouseKeepingr;

  blockload(HouseKeepingr);
  res = 0;  TrHs = true;
  ckey = "UserMain:";
  ckey = ckey & Person;
  Actr.TransDate = SDate;
  Actr.TodoFlag  = 0;
  while (LoopKey(ckey,Actr,2,TrHs)) begin

    if (Actr.TransDate <> SDate) then begin
      TrHs = false;
    end else begin
      if ((Actr.ActType == HouseKeepingr.CleaningType) and
          (Actr.CalTimeFlag==TimeType)) then begin
        res = res + TimeToMinutes(Actr.CostTime);
        if (Showf==true) then begin
          StartFormat(15);
          OutString(0,0,Person,false);
          OutString(50,0,Actr.Resources,false);
          tstr = left(Actr.StartTime,5);
          tstr = tstr & " - " & left(Actr.EndTime,5);
          OutString(90,0,tstr,false);
          EndFormat;
        end;
      end;  
    end;  
  end;
  GetTotalTime = res;
  return;
end;


procedure GetCiandCoTimes(date gDate,string Room,var time citime,var time cotime)
begin
  Record JobVc Jobr;
  Time sStartTime;
  
  sStartTime = StringToTime("05:00");
  Jobr.SerNr = FindReservation(Room,gDate,sStartTime);
  if readfirstmain(Jobr,1,true) then begin
    citime = Jobr.StartTime;
  end;
  sStartTime = StringToTime("23:00");
  Jobr.SerNr = FindReservation(Room,gDate,sStartTime);
  if readfirstmain(Jobr,1,true) then begin
    cotime = Jobr.EndTime;
  end;
  return;
end;


global
procedure AssignCLadyRn(record RcVc RepSpec)
BEGIN
  record UserVc Userr;
  record ResVc Resr;
  record ActVc Actr;
  Boolean TrHs;
  record CalDispGroupBlock CalDispGroupr;
  row CalDispGroupBlock CalDispGrouprw;
  Integer i,rows,rw;
  Array string 20 ac;
  val TotalDayTime,AvailTime,dummy;
  Time cotime,citime,slack;
  record HouseKeepingBlock HouseKeepingr;
  string 255 tstr;

  StartReportJob(USetStr(12160));
  rw = 1;
  tstr = USetStr(12161) & " " & RepSpec.d1;
  Header(rw,tstr,1);
  rw = rw + 1;
  HTResLoc(RepSpec.f2,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTResClass(RepSpec.f1,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;
  Blockload(HouseKeepingr);
    
  StartFormat(15);
  OutString(0,0,USetStr(12162),false);
  EndFormat;
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(12163),false);
  OutString(50,0,USetStr(12164),false);
  OutString(300,0,USetStr(12165),true);
  OutString(480,0,USetStr(12166),true);
  EndFormat;
  Gray_Divider(0,200);
  blockload(CalDispGroupr);  
  rows = MatrowCnt(CalDispGroupr);
  for (i=0;i<rows;i=i+1) begin
    MatrowGet(CalDispGroupr,i,CalDispGrouprw);
    if (CalDispGrouprw.Code==HouseKeepingr.CleanerDispGr) then begin
      SplitEclass(CalDispGrouprw.DefStr,ac);
      i = rows;
    end;
  end;

  i = 0;
  while (nonblank(ac[i])) begin
    Userr.Code = ac[i];
    if readfirstmain(Userr,1,true) then begin
      AvailTime = GetTotalTime(Userr.Code,RepSpec.d1,2,false);  
      if (AvailTime>0) then begin     
        StartFormat(15);
        OutString(0,"DblChangeVc",Userr.Code,false);
        OutString(50,0,Userr.Name,false);
        TotalDayTime = GetTotalTime(Userr.Code,RepSpec.d1,1,false);
        OutVal(300,0,TotalDayTime,M4Val,true);
        OutVal(480,0,AvailTime,M4Val,true);
        EndFormat;
      end;
    end;
    i = i + 1;    
  end;

    
  EndFormat;  
  StartFormat(15);
  OutString(0,0,USetStr(12167),false);
  EndFormat;  
  StartFormat(15);
  OutString(0,0,USetStr(12168),false);
  OutString(50,0,USetStr(12169),false);
  OutString(170,0,USetStr(12170),false);
  OutString(260,0,USetStr(12171),false);
  OutString(340,0,USetStr(12172),true);
  OutString(410,0,USetStr(12173),true);
  OutString(480,0,USetStr(12174),true);
  EndFormat;
  Gray_Divider(0,1);
   
  TrHs = true;
  Actr.TransDate = RepSpec.d1;
  Actr.ActType   = HouseKeepingr.CleaningType;
  while (LoopKey("ActType",Actr,2,TrHs)) begin
    if AssignCLadySelect(RepSpec,Actr,TrHs,HouseKeepingr) then begin
      StartFormat(15);
      OutStringID(0,"DblAssignVc",Actr.Resources,false,Actr.SerNr);
      OutString(50,0,Actr.Comment,false);
      tstr = left(Actr.StartTime,5);
      tstr = tstr & " - " & left(Actr.EndTime,5);
      OutString(170,0,tstr,false);
      OutString(260,0,Actr.MainPersons,false);
      GetCiandCoTimes(RepSpec.d1,Actr.Resources,citime,cotime);
      slack = TimeDiff(cotime,citime);
      OutString(340,0,left(slack,5),true);
      OutString(410,0,cotime,true);
      OutString(480,0,citime,true);
      EndFormat;
      i = i + 1;
    end;
  end;

  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(12175),false);
  EndFormat;

  i = 0;
  while (nonblank(ac[i])) begin
    Userr.Code = ac[i];
    dummy = GetTotalTime(ac[i],RepSpec.d1,1,true);
    i = i + 1;
  end;
  
  EndJob;
  return;
END;

