external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure HT2Per(Date,Date,var string);
external procedure HTClasses(string,string,var string);
external procedure HTITs(string,string,var string);
external procedure HTItems(string,var string);
external function Boolean SetInSet2(string,string);
external procedure HTPricelists(string,var string);
external procedure HTInvTypes2(Integer,Integer,Integer,Integer,Integer,Integer,var string);

global
procedure AddToSoftF2(record RcVc RepSpec,record SoftFVc SoftFr,string artcode,val q,val s,val rgp,Boolean creditf,Boolean voidf,Boolean inclzerorows)
begin
  row SoftFVc SoftFrw;
  Integer i,rwcnt;  
  record INVc INr;
  string 255 frin,toin;
  string 255 frit,toit;
  
  frin = FirstInRange(RepSpec.f2,10);
  toin = LastInRange(RepSpec.f2,10);
  frit = FirstInRange(RepSpec.f3,10);
  toit = LastInRange(RepSpec.f3,10);

  ReadFirstItem(artcode,INr,true,false);
  if (nonblank(RepSpec.f2)) then begin
    if (INr.Code<frin) then begin goto LAddToSoftF; end;
    if (INr.Code>frin) then begin goto LAddToSoftF; end;
  end;
  if (nonblank(RepSpec.f3)) then begin
    if (INr.Group<frit) then begin goto LAddToSoftF; end;
    if (INr.Group>toit) then begin goto LAddToSoftF; end;
  end;
  if (nonblank(RepSpec.f4)) then begin
    if (SetInSet2(RepSpec.f4,INr.DispGroups)==false) then begin
      goto LAddToSoftF;
    end;
  end;
  if (q==0 and inclzerorows==false) then begin
    goto LAddToSoftF;
  end;
  if (RepSpec.flags[3]!=0) then begin
    if (creditf) then begin
      if (q>0) then begin
        goto LAddToSoftF;
      end;
    end else begin
      if (q<0) then begin
        goto LAddToSoftF;
      end;
    end;
  end;

  rwcnt = MatRowCnt(SoftFr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SoftFr,i,SoftFrw);
    ReadFirstItem(artcode,INr,true,false);
    if (INr.Code==SoftFrw.ArtCode) then begin
      if (voidf==false) then begin
        SoftFrw.Quant = SoftFrw.Quant + q;
        SoftFrw.Sum = SoftFrw.Sum + s;
        if (creditf) then begin
          SoftFrw.rowGP = SoftFrw.rowGP - rgp;
        end else begin
          SoftFrw.rowGP = SoftFrw.rowGP + rgp;
        end;
        MatRowPut(SoftFr,i,SoftFrw);
      end;
      goto LAddToSoftF;
    end;
  end;
  ReadFirstItem(artcode,INr,true,false);
  ClearRow(SoftFr,SoftFrw,1);
  SoftFrw.ArtCode = INr.Code;
  if (voidf) then begin
    SoftFrw.Quant = 0;
    SoftFrw.Sum = 0;
    SoftFrw.rowGP = 0;
  end else begin
    SoftFrw.Quant = q;
    SoftFrw.Sum = s;
    if (creditf) then begin
      SoftFrw.rowGP = -rgp;
    end else begin
      SoftFrw.rowGP = rgp;
    end;
  end;
  SoftFrw.BasePrice = INr.UPrice1;
  SoftFrw.Spec = INr.Name;
  MatRowPut(SoftFr,rwcnt,SoftFrw);
LAddToSoftF:;  
  return;
end;

global
procedure AddToSoftF(record RcVc RepSpec,record SoftFVc SoftFr,string artcode,val q,val s,val rgp,Boolean creditf,Boolean inclzerorows)
begin
  AddToSoftF2(RepSpec,SoftFr,artcode,q,s,rgp,creditf,false,inclzerorows);
end;

procedure INPriceListStat_IVVc(string pricelist,record RcVc RepSpec,record SoftFVc SoftFr,record SoftFVc noplSoftFr,record SoftFVc totSoftFr)
begin
  record IVVc IVr;
  row IVVc IVrw;
  Integer i,rwcnt;
  string 255 keystr;
  Boolean found,testf,pricef,creditf,voidf;
  record PLVc PLr;

  found = true;
  IVr.PriceList = pricelist;
  IVr.TransDate = RepSpec.sStartDate;
  while (LoopKey("PriceList",IVr,2,found)) begin
    if (IVr.PriceList!=pricelist) then begin found = false; end;
    if (DateInRange(IVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin found = false; end;
    testf = found;
    if (RepSpec.flags[4]==0) then begin
      if (IVr.OKFlag!=0) then begin testf = false; end;
    end;
    if (RepSpec.flags[5]==0) then begin
      if (IVr.OKFlag==0) then begin testf = false; end;
    end;
    if (IVr.Invalid!=0) then begin testf = false; end;
    if (testf) then begin
      creditf = IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales;
      rwcnt = MatRowCnt(IVr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVr,i,IVrw);
        testf = true;
        voidf = false;
        if (IVrw.ovst!=0) then begin
          testf = RepSpec.flags[3]==0;
          voidf = true;
        end;
        if (testf) then begin
          PLr.PLCode = pricelist;
          PLr.ArtCode = IVrw.ArtCode;
          PLr.CustCode = IVr.CustCode;
          pricef = ReadFirstMain(PLr,3,true);
          if (pricef==false) then begin
            PLr.PLCode = pricelist;
            PLr.ArtCode = IVrw.ArtCode;
            pricef = ReadFirstMain(PLr,2,true);
          end;
          if (nonblank(RepSpec.f1)) then begin
            testf = pricef;
          end;
        end;
        if (testf) then begin
          testf = false;
          switch (IVrw.stp) begin
            case kInvoiceRowTypeNormal: 
              testf = true;
              if (creditf) then begin
                IVrw.Quant = -IVrw.Quant;
                IVrw.Sum = -IVrw.Sum;
              end;
            case kInvoiceRowTypeVoid:
              testf = RepSpec.flags[3]==0;
              voidf = true;
            case kInvoiceRowTypeCorrection:
              testf = true;
          end;
          if (testf) then begin
            if (pricef) then begin
              if (RepSpec.ArtMode==1) then begin
                AddToSoftF2(RepSpec,SoftFr,IVrw.ArtCode,IVrw.Quant,IVrw.Sum,IVrw.rowGP,creditf,voidf,true);
              end;
            end else begin
              if (RepSpec.ArtMode==1) then begin
                AddToSoftF2(RepSpec,noplSoftFr,IVrw.ArtCode,IVrw.Quant,IVrw.Sum,IVrw.rowGP,creditf,voidf,true);
              end;
            end;
           AddToSoftF2(RepSpec,totSoftFr,IVrw.ArtCode,IVrw.Quant,IVrw.Sum,IVrw.rowGP,creditf,voidf,true);
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure INPriceListStat_IVCashVc(string pricelist,record RcVc RepSpec,record SoftFVc SoftFr,record SoftVc noplSoftFr,record SoftFVc totSoftFr)
begin
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  string 255 keystr;
  Boolean found,testf,pricef,voidf,creditf;
  record PLVc PLr;

  found = true;
  IVCashr.PriceList = pricelist;
  IVCashr.TransDate = RepSpec.sStartDate;
  while (LoopKey("PriceList",IVCashr,2,found)) begin
    if (IVCashr.PriceList!=pricelist) then begin found = false; end;
    if (DateInRange(IVCashr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin found = false; end;
    testf = found;
    if (RepSpec.flags[4]==0) then begin
      if (IVCashr.OKFlag!=0) then begin testf = false; end;
    end;
    if (RepSpec.flags[5]==0) then begin
      if (IVCashr.OKFlag==0) then begin testf = false; end;
    end;
    if (IVCashr.Invalid!=0) then begin testf = false; end;
    if (testf) then begin
      creditf = IVCashr.InvType==kPOSInvoiceTypeCredit;
      rwcnt = MatRowCnt(IVCashr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVCashr,i,IVCashrw);
        testf = true;
        voidf = false;
        if (IVCashrw.ovst!=0) then begin
          testf = RepSpec.flags[3]==0;
          voidf = true;
        end;
        if (testf) then begin
          testf = false;
          switch (IVCashrw.stp) begin
            case kInvoiceRowTypeNormal: 
              if (creditf) then begin
                IVCashrw.Quant = -IVCashrw.Quant;
                IVCashrw.Sum = -IVCashrw.Sum;
              end;
              testf = true;
            case kInvoiceRowTypeVoid:
              testf = RepSpec.flags[3]==0;
              voidf = true;
          end;
          if (testf) then begin
            PLr.PLCode = pricelist;
            PLr.ArtCode = IVCashrw.ArtCode;
            PLr.CustCode = IVCashr.CustCode;
            pricef = ReadFirstMain(PLr,3,true);
            if (pricef==false) then begin
              PLr.PLCode = pricelist;
              PLr.ArtCode = IVCashrw.ArtCode;
              pricef = ReadFirstMain(PLr,2,true);
            end;
            if (nonblank(RepSpec.f1)) then begin
              testf = pricef;
            end;
          end;
          if (testf) then begin
            if (pricef) then begin
              if (RepSpec.ArtMode==1) then begin
                AddToSoftF2(RepSpec,SoftFr,IVCashrw.ArtCode,IVCashrw.Quant,IVCashrw.Sum,IVCashrw.rowGP,creditf,voidf,true);
              end;
            end else begin
              if (RepSpec.ArtMode==1) then begin
                AddToSoftF2(RepSpec,noplSoftFr,IVCashrw.ArtCode,IVCashrw.Quant,IVCashrw.Sum,IVCashrw.rowGP,creditf,voidf,true);
              end;
            end;
            AddToSoftF2(RepSpec,totSoftFr,IVCashrw.ArtCode,IVCashrw.Quant,IVCashrw.Sum,IVCashrw.rowGP,creditf,voidf,true);
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure INPriceListStat_RestAccVc(string pricelist,record RcVc RepSpec,record SoftFVc SoftFr,record SoftFVc noplSoftFr,record SoftFVc totSoftFr)
begin
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  Integer i,rwcnt;
  string 255 keystr;
  Boolean found,testf,pricef,voidf;
  record PLVc PLr;

  found = true;
  RestAccr.PriceList = pricelist;
  RestAccr.TransDate = RepSpec.sStartDate;
  while (LoopKey("PriceList",RestAccr,2,found)) begin
    if (RestAccr.PriceList!=pricelist) then begin found = false; end;
    if (DateInRange(RestAccr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin found = false; end;
    testf = found;
    if (RepSpec.flags[4]==0) then begin
      if (RestAccr.Closed!=0) then begin testf = false; end;
    end;
    if (RepSpec.flags[5]==0) then begin
      if (RestAccr.Closed==0) then begin testf = false; end;
    end;
    if (RestAccr.Invalid!=0) then begin testf = false; end;
    if (testf) then begin
      rwcnt = MatRowCnt(RestAccr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(RestAccr,i,RestAccrw);
        testf = true;
        voidf = false;
        if (RestAccrw.ovst!=0) then begin
          testf = RepSpec.flags[3]==0;
          voidf = true;
        end;
        if (testf) then begin
          PLr.PLCode = pricelist;
          PLr.ArtCode = RestAccrw.ArtCode;
          PLr.CustCode = RestAccr.CustCode;
          pricef = ReadFirstMain(PLr,3,true);
          if (pricef==false) then begin
            PLr.PLCode = pricelist;
            PLr.ArtCode = RestAccrw.ArtCode;
            pricef = ReadFirstMain(PLr,2,true);
          end;
          if (nonblank(RepSpec.f1)) then begin
            testf = pricef;
          end;
        end;
        if (testf) then begin
          testf = false;
          switch (RestAccrw.stp) begin
            case kInvoiceRowTypeNormal: 
              testf = true;
            case kInvoiceRowTypeVoid:
              testf = RepSpec.flags[3]==0;
              voidf = true;
          end;
          if (testf) then begin
            if (pricef) then begin
              if (RepSpec.ArtMode==1) then begin
                AddToSoftF2(RepSpec,SoftFr,RestAccrw.ArtCode,RestAccrw.Quant,RestAccrw.Sum,RestAccrw.rowGP,false,voidf,true);
              end;
            end else begin
              if (RepSpec.ArtMode==1) then begin
                AddToSoftF2(RepSpec,noplSoftFr,RestAccrw.ArtCode,RestAccrw.Quant,RestAccrw.Sum,RestAccrw.rowGP,false,voidf,true);
              end;
            end;
           AddToSoftF2(RepSpec,totSoftFr,RestAccrw.ArtCode,RestAccrw.Quant,RestAccrw.Sum,RestAccrw.rowGP,false,voidf,true);
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure PrintPriceListResult(record RcVc RepSpec,string PLDefCode,record SoftFVc SoftFr)
begin
  row SoftFVc SoftFrw;
  Integer i,rwcnt;  
  Boolean headf;
  val totq,tots,totgp;
  
  headf = true;
  rwcnt = MatRowCnt(SoftFr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SoftFr,i,SoftFrw);
    if (headf) then begin
      StartFormat(15);
       if (nonblank(PLDefCode)) then begin
         OutString(0,0,USetStr(28129) & ":  " & PLDefCode,false);
       end else begin
         OutString(0,0,USetStr(28129) & ":  " & USetStr(28130),false);
       end;
      EndFormat;
      Gray_Divider(0,1);
      headf = false;
    end;
    StartFormat(15);
     OutString(0,0,SoftFrw.ArtCode,false);
     OutString(2,0,SoftFrw.Spec,false);
     if (RepSpec.ArtMode==1) then begin
       OutVal(5,0,SoftFrw.Quant,M4Val,true);
       OutVal(6,0,SoftFrw.Sum/SoftFrw.Quant,M4Val,true);
       OutVal(7,0,SoftFrw.BasePrice,M4Val,true);
       OutVal(8,0,SoftFrw.rowGP,M4Val,true);
       OutVal(9,0,(SoftFrw.rowGP/SoftFrw.Sum)*100,M4Val,true);
       OutVal(1,0,SoftFrw.Sum,M4Val,true);
     end else begin
       OutVal(9,0,SoftFrw.Quant,M4Val,true);
       OutVal(1,0,SoftFrw.Sum/SoftFrw.Quant,M4Val,true);
     end;
    EndFormat;
    totq = totq + SoftFrw.Quant;
    totgp = totgp + SoftFrw.rowGP;
    tots = tots + SoftFrw.Sum;
  end;
  if (headf==false) then begin
    Gray_Divider(0,1);
    StartFormat(15);
     OutString(0,0,USetStr(28106),false);
     if (RepSpec.ArtMode==1) then begin
       OutVal(5,0,totq,M4Val,true);
       OutVal(8,0,totgp,M4Val,true);
       OutVal(9,0,(totgp/tots)*100,M4Val,true);
       OutVal(1,0,tots,M4Val,true);
     end else begin
       OutVal(9,0,totq,M4Val,true);
       OutVal(1,0,tots/totq,M4Val,true);
     end;
    EndFormat;
    StartFormat(15);
    EndFormat;
  end;
  return;
end;

procedure PrintTotalResult(record RcVc RepSpec,record SoftFVc SoftFr)
begin
  row SoftFVc SoftFrw;
  Integer i,rwcnt;  
  val totq,tots,totgp;
  
  rwcnt = MatRowCnt(SoftFr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SoftFr,i,SoftFrw);
    StartFormat(15);
     OutString(0,0,SoftFrw.ArtCode,false);
     OutString(2,0,SoftFrw.Spec,false);
     if (RepSpec.ArtMode==1) then begin
       OutVal(5,0,SoftFrw.Quant,M4Val,true);
       OutVal(6,0,SoftFrw.Sum/SoftFrw.Quant,M4Val,true);
       OutVal(7,0,SoftFrw.BasePrice,M4Val,true);
       OutVal(8,0,SoftFrw.rowGP,M4Val,true);
       OutVal(9,0,(SoftFrw.rowGP/SoftFrw.Sum)*100,M4Val,true);
       OutVal(1,0,SoftFrw.Sum,M4Val,true);
     end else begin
       OutVal(9,0,SoftFrw.Quant,M4Val,true);
       OutVal(1,0,SoftFrw.Sum/SoftFrw.Quant,M4Val,true);
     end;
    EndFormat;
    totq = totq + SoftFrw.Quant;
    tots = tots + SoftFrw.Sum;
    totgp = totgp + SoftFrw.rowGP;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
   OutString(0,0,USetStr(28106),false);
   if (RepSpec.ArtMode==1) then begin
     OutVal(5,0,totq,M4Val,true);
     OutVal(8,0,totgp,M4Val,true);
     OutVal(9,0,(totgp/tots)*100,M4Val,true);
     OutVal(1,0,tots,M4Val,true);
   end else begin
     OutVal(9,0,totq,M4Val,true);
     OutVal(1,0,tots/totq,M4Val,true);
   end;
  EndFormat;
  return;
end;

procedure INPriceListStatPerPriceList(string PLDefCode,record RcVc RepSpec,record SoftFVc totSoftFr)
begin
  record SoftFVc SoftFr;
  record SoftFVc noplSoftFr;

  if (RepSpec.flags[1]!=0) then begin
    INPriceListStat_IVVc(PLDefCode,RepSpec,SoftFr,noplSoftFr,totSoftFr);
  end;
  if (RepSpec.flags[2]!=0) then begin
    INPriceListStat_IVCashVc(PLDefCode,RepSpec,SoftFr,noplSoftFr,totSoftFr);
  end;
  if (RepSpec.flags[6]!=0) then begin
    INPriceListStat_RestAccVc(PLDefCode,RepSpec,SoftFr,noplSoftFr,totSoftFr);
  end;
  if (RepSpec.ArtMode==1) then begin
    SortRows(SoftFr,"ArtCode",true);
    PrintPriceListResult(RepSpec,PLDefCode,SoftFr);
    SortRows(noplSoftFr,"ArtCode",true);
    PrintPriceListResult(RepSpec,USetStr(28130),noplSoftFr);
  end;
  return;
end;

global
procedure INPriceListStatRn(record RcVc RepSpec)
begin
  Integer rw;
  string 255 tstr;
  string 255 frmbr,tombr;
  string 255 frit,toit;
  record PLDefVc PLDefr;
  Boolean found;
  record SoftFVc totSoftFr;

  frmbr = FirstInRange(RepSpec.f1,10);
  tombr = LastInRange(RepSpec.f1,10);
  frit = FirstInRange(RepSpec.f3,10);
  toit = LastInRange(RepSpec.f3,10);
  StartReportJob(USetStr(28120));
   rw = 1;
   HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   HTInvTypes2(RepSpec.flags[1],0,0,0,RepSpec.flags[2],RepSpec.flags[6],tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   HTPricelists(RepSpec.f1,tstr);
   Header(rw,tstr,0);
   HTItems(RepSpec.f2,tstr);
   Header(rw,tstr,1);
   rw = rw + 1; 
   HTITs(frit,toit,tstr);
   Header(rw,tstr,0);
   HTClasses(RepSpec.f4,RepSpec.f4,tstr);
   Header(rw,tstr,1); 
   rw = rw + 1; 
  EndHeader;
  if (RepSpec.ArtMode==1) then begin
    SetRepCol(2,100);
    SetRepCol(5,210);
    SetRepCol(6,270);
    SetRepCol(7,330);
    SetRepCol(8,390);
    SetRepCol(9,420);
  end else begin
    SetRepCol(2,100);
    SetRepCol(9,420);
  end;
  StartFormat(15);
   OutString(0,0,USetStr(28121),false);
   OutString(2,0,USetStr(28122),false);
   if (RepSpec.ArtMode==1) then begin
     OutString(5,0,USetStr(28123),true);
     OutString(6,0,USetStr(28124),true);
     OutString(7,0,USetStr(28125),true);
     OutString(8,0,USetStr(28126),true);
     OutString(9,0,USetStr(28127),true);
     OutString(1,0,USetStr(28128),true);
   end else begin
     OutString(9,0,USetStr(28123),true);
     OutString(1,0,USetStr(28124),true);
   end;
  EndFormat;
  Gray_Divider(0,1);
  
  found = true;
  PLDefr.Code = frmbr;
  while (LoopMain(PLDefr,1,found)) begin
    if (nonblank(RepSpec.f1)) then begin
      if (PLDefr.Code<frmbr) then begin found = false; end;
      if (PLDefr.Code>tombr) then begin found = false; end;
    end;
    if (found) then begin
      INPriceListStatPerPriceList(PLDefr.Code,RepSpec,totSoftFr);
    end;
  end;
  INPriceListStatPerPriceList("",RepSpec,totSoftFr);
  SortRows(totSoftFr,"ArtCode",true);
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
     OutString(0,0,USetStr(28106),false);
    EndFormat;
    StartFormat(15);
    OutString(0,0,USetStr(28121),false);
    OutString(2,0,USetStr(28122),false);
    OutString(5,0,USetStr(28123),true);
    OutString(6,0,USetStr(28124),true);
    OutString(7,0,USetStr(28125),true);
    OutString(8,0,USetStr(28126),true);
    OutString(9,0,USetStr(28127),true);
    OutString(1,0,USetStr(28128),true);
    EndFormat;
    Gray_Divider(0,1);
  end;
  PrintTotalResult(RepSpec,totSoftFr);
  EndJob;
  return;
end;