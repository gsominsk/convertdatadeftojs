external procedure HTArtGroup(string, var string);
external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean SetInSet2(string,string);
external function val GetStockQty2(string,string,Date,Boolean,Integer);
external function roundmode GetCostRoundMode(record RoundBlock);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external function val GetStockQty(string,string,Date,Boolean);
external procedure FindStockListAged(record INVc,string,record RcVc,val,Integer,array LongInt,var array val,var array val);
external procedure HTArts(string, string, var string);
external procedure HTDepartment(string,var string);
external procedure HTArtGroup(string, var string);
external procedure HTSupplier(string, var string);
external procedure GetItemGroupDescription(string,var string);
external function Boolean TestArtCodeMatch(string,string);

procedure FindLastStockDates(string artcode,Date ad,var Date lastind,var Date lastoutd)
begin
  Date blankd;
  Boolean found,testf;
  record ItemHistVc IHr;
  Date d;

  d = ad;
  if (blankdate(d)) then begin d = CurrentDate; end;
  lastind = blankd;
  lastoutd = blankd;
  IHr.ArtCode = artcode;
  IHr.TransDate = d;
  found = true;
  while (LoopBackKey("ArtCode",IHr,2,found)) begin
    if (IHr.ArtCode!=artcode) then begin found = false; end;
    if (IHr.TransDate>d) then begin found = false; end;
    if (nonblankdate(lastind)) and (nonblankdate(lastoutd)) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (testf) then begin
        if (IHr.FileName=="PUVc") or (IHr.FileName=="ProdVc") then begin
          if (IHr.TransDate>lastind) then begin
            lastind = IHr.TransDate;
          end;
        end else begin
          if (IHr.TransDate>lastoutd) then begin
            lastoutd = IHr.TransDate;
           end;
        end;
      end;
    end;
  end;
  return;
end;

// Max 6.
procedure BuildAgedArray(record RcVc RepSpec,var Integer acnt,var array LongInt agedpera,var array val agedqtya,var array val agedsuma)
begin
  acnt = 0;
  if (nonblank(RepSpec.vals0)) then begin
    agedpera[0] = RepSpec.vals0;
    acnt = acnt + 1;
  end;
  if (nonblank(RepSpec.vals1)) then begin
    agedpera[1] = RepSpec.vals1;
    acnt = acnt + 1;
  end;
  if (nonblank(RepSpec.vals2)) then begin
    agedpera[2] = RepSpec.vals2;
    acnt = acnt + 1;
  end;
  if (nonblank(RepSpec.vals3)) then begin
    agedpera[3] = RepSpec.vals3;
    acnt = acnt + 1;
  end;
  if (nonblank(RepSpec.vals4)) then begin
    agedpera[4] = RepSpec.vals4;
    acnt = acnt + 1;
  end;
  if (RepSpec.long1>0) then begin
    agedpera[5] = RepSpec.long1;
    acnt = acnt + 1;
  end;
  agedqtya[0] = 0;
  agedqtya[1] = 0;
  agedqtya[2] = 0;
  agedqtya[3] = 0;
  agedqtya[4] = 0;
  agedqtya[5] = 0;
  agedqtya[6] = 0;
  agedsuma[0] = 0;
  agedsuma[1] = 0;
  agedsuma[2] = 0;
  agedsuma[3] = 0;
  agedsuma[4] = 0;
  agedsuma[5] = 0;
  agedsuma[6] = 0;
  return;
end;

procedure AgedOneItem(record RcVc RepSpec,record INVc INp,var val sum1p,vector val nrp,var val groupsump,roundmode roundof,string dblstr,
                      Integer balcol,Integer balcol2)
BEGIN
  Integer typ;
  Boolean plhit,TrHs;
  val upric,zero;
  val instock,t;
  string 255 tstr;
  record GeneralOptionBlock GenOptRec;
  array LongInt agedpera;
  array val agedqtya;
  array val agedsuma;
  Integer acnt;
  record LocationVc Locr;
  Date d1;
  val linstock,v,instocktmp;
  Date lastind,lastoutd;

  BuildAgedArray(RepSpec,acnt,agedpera,agedqtya,agedsuma);
  BlockLoad(GenOptRec);
  upric = INp.UPrice1;
  plhit = true;
  if (INp.ItemType==kItemTypeStocked) then begin
    instock = GetStockQty(INp.Code,RepSpec.f2,RepSpec.d1,false);
    if (RepSpec.UsedOnly==1) then begin
      if (instock==0) then begin
        goto LAgedOneItem;
      end;
    end;

//Code same as Stock List Backdated
/*
    TrHs = true;
    Locr.Code = RepSpec.f2;
    while (LoopMain(Locr,1,TrHs)) begin
      if (nonblank(RepSpec.f2)) then begin
        if (Locr.Code!=RepSpec.f2) then begin TrHs = false; end;
      end;
      if (TrHs) then begin
        d1 = RepSpec.d1;
        if (blankdate(d1)) then begin
          d1 = CurrentDate;
        end;
        linstock = GetStockQty2(INp.Code,Locr.Code,d1,false,0);
        if (linstock!=0) then begin
          FindStockListAged(INp,Locr.Code,RepSpec,instock,acnt,agedpera,agedqtya,agedsuma);
        end;
      end;
    end;
*/    
    linstock = GetStockQty2(INp.Code,RepSpec.f2,d1,false,0);
    if (linstock!=0) then begin
      FindStockListAged(INp,RepSpec.f2,RepSpec,instock,acnt,agedpera,agedqtya,agedsuma);
    end;

    switch (RepSpec.ArtMode) begin
      case 0:
        StartFormat(15);
        OutString(0,dblstr,INp.Code,false);
        OutString(70,0,INp.Name,false);
        switch (RepSpec.flags[0]) begin
          case 1:
            OutVal(2,0,agedsuma[0],M4Val,true);
            OutVal(3,0,agedsuma[1],M4Val,true);
            if (acnt>1) then begin
              OutVal(4,0,agedsuma[2],M4Val,true);
            end;
            if (acnt>2) then begin
              OutVal(5,0,agedsuma[3],M4Val,true);
            end;
            if (acnt>3) then begin
              OutVal(6,0,agedsuma[4],M4Val,true);
            end;
            if (acnt>4) then begin
              OutVal(7,0,agedsuma[5],M4Val,true);
            end;
            if (acnt>5) then begin
              OutVal(8,0,agedsuma[6],M4Val,true);
            end;
            if (acnt>6) then begin
              OutVal(9,0,agedsuma[7],M4Val,true);
            end;
            OutValBiDi(1,0,agedsuma[0] + agedsuma[1] + agedsuma[2] + agedsuma[3] + agedsuma[4] + agedsuma[5] + agedsuma[6] + agedsuma[7],M4Val,true,520);            
            nrp[0] = nrp[0] + agedsuma[0];
            nrp[1] = nrp[1] + agedsuma[1];
            nrp[2] = nrp[2] + agedsuma[2];
            nrp[3] = nrp[3] + agedsuma[3];
            nrp[4] = nrp[4] + agedsuma[4];
            nrp[5] = nrp[5] + agedsuma[5];
            nrp[6] = nrp[6] + agedsuma[6];
            nrp["totalval"] = nrp["totalval"] + agedsuma[0] + agedsuma[1] + agedsuma[2] + agedsuma[3] + agedsuma[4] + agedsuma[5] + agedsuma[6] + agedsuma[7];
          otherwise
            OutVal(2,0,agedqtya[0],M4UVal,true);
            OutVal(3,0,agedqtya[1],M4UVal,true);
            if (acnt>1) then begin
              OutVal(4,0,agedqtya[2],M4UVal,true);
            end;
            if (acnt>2) then begin
              OutVal(5,0,agedqtya[3],M4UVal,true);
            end;
            if (acnt>3) then begin
              OutVal(6,0,agedqtya[4],M4UVal,true);
            end;
            if (acnt>4) then begin
              OutVal(7,0,agedqtya[5],M4UVal,true);
            end;
            if (acnt>5) then begin
              OutVal(8,0,agedqtya[6],M4UVal,true);
            end;
            if (acnt>6) then begin
              OutVal(9,0,agedqtya[7],M4UVal,true);
            end;
            instocktmp = agedqtya[0]  + agedqtya[1] + agedqtya[2] + agedqtya[3] + agedqtya[4] + agedqtya[5] + agedqtya[6];
            OutValBiDi(1,0,instocktmp,M4UVal,true,520);            
            nrp[0] = nrp[0] + agedqtya[0];
            nrp[1] = nrp[1] + agedqtya[1];
            nrp[2] = nrp[2] + agedqtya[2];
            nrp[3] = nrp[3] + agedqtya[3];
            nrp[4] = nrp[4] + agedqtya[4];
            nrp[5] = nrp[5] + agedqtya[5];
            nrp[6] = nrp[6] + agedqtya[6];
            nrp["totalqty"] = nrp["totalqty"] + instocktmp;
        end;
        EndFormat;
      case 1:
        FindLastStockDates(INp.Code,RepSpec.d1,lastind,lastoutd);

        StartFormat(15);
        OutString(0,dblstr,INp.Code,false);
        OutString(70,0,INp.Name,false);
        if (RepSpec.Media!=mtFile) and (RepSpec.Media!=mtExcel) then begin
          EndFormat;
          StartFormat(15);
        end;
        switch (RepSpec.flags[0]) begin
          case 1:
            v = agedsuma[0] + agedsuma[1] + agedsuma[2] + agedsuma[3] + agedsuma[4] + agedsuma[5] + agedsuma[6] + agedsuma[7];
            OutDate(15,0,lastind,false);
            OutDate(70,0,lastoutd,false);
            OutVal(2,0,agedsuma[0],M4UVal,true);
            OutVal(3,0,agedsuma[1],M4UVal,true);
            if (acnt>1) then begin
              OutVal(4,0,agedsuma[2],M4UVal,true);
            end;
            if (acnt>2) then begin
              OutVal(5,0,agedsuma[3],M4UVal,true);
            end;
            if (acnt>3) then begin
              OutVal(6,0,agedsuma[4],M4UVal,true);
            end;
            if (acnt>4) then begin
              OutVal(7,0,agedsuma[5],M4UVal,true);
            end;
            if (acnt>5) then begin
              OutVal(8,0,agedsuma[6],M4UVal,true);
            end;
            if (acnt>6) then begin
              OutVal(9,0,agedsuma[7],M4UVal,true);
            end;
            OutValBiDi(balcol,0,instock,M4UVal,true,balcol2);            
            OutValBiDi(420,0,v/instock,M4Val,true,460);
            OutValBiDi(1,0,v,M4Val,true,520);
            nrp[0] = nrp[0] + agedsuma[0];
            nrp[1] = nrp[1] + agedsuma[1];
            nrp[2] = nrp[2] + agedsuma[2];
            nrp[3] = nrp[3] + agedsuma[3];
            nrp[4] = nrp[4] + agedsuma[4];
            nrp[5] = nrp[5] + agedsuma[5];
            nrp[6] = nrp[6] + agedsuma[6];
            nrp["totalqty"] = nrp["totalqty"] + instock;
            nrp["totalval"] = nrp["totalval"] + v;
          otherwise
            v = agedsuma[0] + agedsuma[1] + agedsuma[2] + agedsuma[3] + agedsuma[4] + agedsuma[5] + agedsuma[6] + agedsuma[7];
            OutDate(15,0,lastind,false);
            OutDate(70,0,lastoutd,false);
            OutVal(2,0,agedqtya[0],M4UVal,true);
            OutVal(3,0,agedqtya[1],M4UVal,true);
            if (acnt>1) then begin
              OutVal(4,0,agedqtya[2],M4UVal,true);
            end;
            if (acnt>2) then begin
              OutVal(5,0,agedqtya[3],M4UVal,true);
            end;
            if (acnt>3) then begin
              OutVal(6,0,agedqtya[4],M4UVal,true);
            end;
            if (acnt>4) then begin
              OutVal(7,0,agedqtya[5],M4UVal,true);
            end;
            if (acnt>5) then begin
              OutVal(8,0,agedqtya[6],M4UVal,true);
            end;
            if (acnt>6) then begin
              OutVal(9,0,agedqtya[7],M4UVal,true);
            end;
            OutValBiDi(balcol,0,instock,M4UVal,true,balcol2);            
            OutValBiDi(420,0,v/instock,M4Val,true,460);
            OutValBiDi(1,0,v,M4Val,true,520);
            nrp[0] = nrp[0] + agedqtya[0];
            nrp[1] = nrp[1] + agedqtya[1];
            nrp[2] = nrp[2] + agedqtya[2];
            nrp[3] = nrp[3] + agedqtya[3];
            nrp[4] = nrp[4] + agedqtya[4];
            nrp[5] = nrp[5] + agedqtya[5];
            nrp[6] = nrp[6] + agedqtya[6];
            nrp["totalqty"] = nrp["totalqty"] + instock;
            nrp["totalval"] = nrp["totalval"] + v;
        end;
        EndFormat;
    end;
    sum1p = sum1p + t;
    groupsump = groupsump +t;
  end;
LAgedOneItem:;
  RETURN;
END;

procedure AgedLoopIS(record RcVc RepSpec,var val sum1p,vector val nrp,roundmode roundof,Integer balcol,Integer balcol2)
BEGIN
  record PIVc PIr;
  record INVc INr;
  record ItemStatusVc ISr;
  Boolean testf,found;
  string 255 fromart,toart;
  string 255 frvariety,tovariety;
  string 255 frcc,tocc;
  Boolean TrHs;
  string 255 lastitem,dblstr;
  val groupsum;
  string 60 sz,msk,mskrep;  
  string 200 varsubset,keystr;  
  Integer keys;

  fromart = FirstInRange(RepSpec.f1,20);
  toart = LastInRange(RepSpec.f1,20);
  
  if (nonblank(fromart)) then begin
    if (ReadFirstItem(fromart,INr,false,false)) then begin
      frvariety = right(fromart,len(fromart)-len(INr.Code));
      fromart = INr.Code;
    end;
  end;
  if (nonblank(toart)) then begin
    if (ReadFirstItem(toart,INr,false,false)) then begin
      tovariety = right(toart,len(toart)-len(INr.Code));
      toart = INr.Code;
    end;
  end;
  
  frcc = FirstInRange(RepSpec.f3,20);
  tocc = LastInRange(RepSpec.f3,20);  
  Gray_Divider(0,1);
  TrHs = true;
  keys = 1;
  keystr = "Code";
  ISr.Code = fromart;    
  if (nonblank(frvariety)) or (nonblank(tovariety)) then begin
    keys = 1;
    keystr = "CodeVariety";
    ISr.Variety = frvariety;    
  end;
  while (LoopKey(keystr,ISr,keys,TrHs)) begin  
    if (ReadFirstItem(ISr.Code,INr,false,false)==false) then begin goto LAgedLoopISEnd; end;
    if (INr.Code==lastitem) then begin goto LAgedLoopISEnd; end;
    ISr.Code = INr.Code;
    lastitem = INr.Code;
    testf = true;
    if (TrHs) then begin
      if (nonblank(RepSpec.f3)) then begin
        if (INr.Group>tocc) then begin
          testf = false;
        end;  
      end;   
    end;        
    if (TrHs) then begin
      if (nonblank(toart)) then begin 
        if (INr.Code>toart) then begin
          TrHs = false;
        end;
      end;
      if (nonblank(fromart)) then begin
        if (INr.Code<fromart) then begin
          TrHs = false;
        end;
      end;
    end;  
    if (nonblank(frvariety)) or (nonblank(tovariety)) then begin
      if (ISr.Variety>tovariety) then begin TrHs = false; end;
    end;              
    if (TrHs==false) then begin testf = false; end;
    if (testf) then begin 
      if (nonblank(RepSpec.f4)) then begin
        testf = SetInSet2(RepSpec.f4,INr.DispGroups);
      end;      
    end; 
    if (testf) then begin
      if (nonblank(RepSpec.AccStr)) then begin
        if (INr.Department!=RepSpec.AccStr) then begin
          testf = false;
        end;
      end;    
    end;
    if (testf) then begin
      if (nonblank(RepSpec.f3)) then begin
        if (INr.Group<frcc) then begin
          testf = false;
        end;
      end;
    end;   
    if (testf) then begin 
      if (nonblank(RepSpec.f4)) then begin
        testf = SetInSet2(RepSpec.f4,INr.DispGroups);
      end;      
    end;        
    if (testf) then begin
      if (nonblank(RepSpec.LastAcc)) then begin
        PIr.ItemCode = INr.Code;
        PIr.Location = RepSpec.f2;
        PIr.VECode = RepSpec.LastAcc;
        found = ReadFirstMain(PIr,3,true);
        if (found==false) then begin
          if (nonblank(RepSpec.f2)) then begin
            PIr.ItemCode = INr.Code;
            PIr.Location = "";
            PIr.VECode = RepSpec.LastAcc;
            found = ReadFirstMain(PIr,3,true);
          end;
        end;
        if (found) then begin
          if (PIr.ItemCode!=INr.Code) then begin testf = false; end;
          if (PIr.VECode!=RepSpec.LastAcc) then begin testf = false; end;
          if (PIr.DefaultChoice==0) then begin testf = false; end;
        end else begin
          testf = false;
        end;
      end;
    end;
    if (testf) then begin
      dblstr = "";
      if (FindItemVAR(INr.Code,sz,msk,mskrep,varsubset)) then begin
        dblstr = "VarMaskVarDbl";
      end;
      AgedOneItem(RepSpec,INr,sum1p,nrp,groupsum,roundof,dblstr,balcol,balcol2);
    end;
LAgedLoopISEnd:;
  end;
  RETURN;
END;

procedure AgedLoopIN(record RcVc RepSpec,var val sum1p,vector val nrp,roundmode roundof,Integer balcol,Integer balcol2)
BEGIN
  record PIVc PIr;
  record INVc INr;
  Integer keys;
  string 255 dblstr;
  string 255 fromart,toart;
  string 255 frcc,tocc;
  string 255 tstr;
  string 255 ckey;
  Boolean TrHs,testf,found;
  val groupsum;
  string 60 sz,msk,mskrep;  
  string 200 varsubset;  

  ckey = "Code";
  keys = 1;
  fromart = FirstInRange(RepSpec.f1,20);
  toart = LastInRange(RepSpec.f1,20);
  frcc = FirstInRange(RepSpec.f3,20);
  tocc = LastInRange(RepSpec.f3,20);  
  Gray_Divider(0,1);
  TrHs = true;
  INr.Code = fromart;
  while (LoopKey(ckey,INr,keys,TrHs)) begin    
    testf = true;
    if (INr.Terminated == 1) then begin
      testf = false;
    end;
    if (TrHs) then begin
      if (nonblank(RepSpec.f3)) then begin
        if (INr.Group>tocc) then begin
          testf = false;
        end;
      end;
    end;        
    if (TrHs) then begin
      if (nonblank(toart)) then begin
        if (INr.Code>toart) then begin
          TrHs = false;
        end;
      end;
      if (nonblank(fromart)) then begin
        if (INr.Code<fromart) then begin
          TrHs = false;
        end;
      end;
    end;        
    if (TrHs) then begin
      if (nonblank(RepSpec.AccStr)) then begin
        if (INr.Department!=RepSpec.AccStr) then begin
          testf = false;
        end;
      end;    
    end;
    if (TrHs) then begin
      if (nonblank(RepSpec.f3)) then begin
        if (INr.Group<frcc) then begin
          testf = false;
        end;
      end;
    end;  
    if (testf) then begin 
      if (nonblank(RepSpec.f4)) then begin
        testf = SetInSet2(RepSpec.f4,INr.DispGroups);
      end;      
    end;         
    if (TrHs) then begin
      if (nonblank(RepSpec.LastAcc)) then begin
        PIr.ItemCode = INr.Code;
        PIr.Location = RepSpec.f2;
        PIr.VECode = RepSpec.LastAcc;
        found = ReadFirstMain(PIr,3,true);
        if (found==false) then begin
          if (nonblank(RepSpec.f2)) then begin
            PIr.ItemCode = INr.Code;
            PIr.Location = "";
            PIr.VECode = RepSpec.LastAcc;
            found = ReadFirstMain(PIr,3,true);
          end;
        end;
        if (found) then begin
          if (PIr.ItemCode!=INr.Code) then begin testf = false; end;
          if (PIr.VECode!=RepSpec.LastAcc) then begin testf = false; end;
          if (PIr.DefaultChoice==0) then begin testf = false; end;
        end else begin
          testf = false;
        end;
      end;
    end;
    if (TrHs==false) then begin testf = false; end;
    
    if (testf) then begin
      dblstr = "";
      if (FindItemVAR(INr.Code,sz,msk,mskrep,varsubset)) then begin
        dblstr = "VarMaskVarDbl";
      end;
      AgedOneItem(RepSpec,INr,sum1p,nrp,groupsum,roundof,dblstr,balcol,balcol2);
    end;
  end;
  return;
end;

global
procedure AgedINRn(record RcVc RepSpec)
begin
  record RoundBlock RoundRec;
  vector val nr;
  val sum1;
  string 255 tstr;
  Integer rw;
  array LongInt agedpera;
  array val agedqtya;
  array val agedsuma;
  Integer acnt,typ;
  string 30 tstr1,tstr2,tstr3,tstr4,tstr5,tstr6,tstr7;
  LongInt p1,p2;
  Integer balcol,balcol2;

  BlockLoad(RoundRec);
  StartReportJob(USetStr(14520));
  if (RepSpec.PocketPC == 0) then begin
    rw = 1;
    if ((nonblank(RepSpec.f1)) or (blank(RepSpec.AccStr))) then begin
      HTArts(RepSpec.f1,RepSpec.f1,tstr);
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    if (nonblank(RepSpec.AccStr)) then begin
      HTDepartment(RepSpec.AccStr,tstr);
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    if (nonblank(RepSpec.f2)) then begin
      tstr = USetStr(2768);
      tstr = RepSpec.f2;
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    if (HasItemGroups) then begin
      HTArtGroup(RepSpec.f3,tstr);
      if (nonblank(tstr)) then begin
        Header(rw,tstr,1);
        rw = rw + 1;
      end;
    end;
    if (HasItemClassification) then begin
      HTItemClass(RepSpec.f4,tstr);
      if (nonblank(tstr)) then begin
        Header(rw,tstr,1);
        rw = rw + 1;
      end;
    end;
    if (nonblank(RepSpec.LastAcc)) then begin
      HTSupplier(RepSpec.LastAcc,tstr);
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    if (nonblankdate(RepSpec.d1)) then begin
      tstr = RepSpec.d1;
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end else begin
  end;
  EndHeader;
  BuildAgedArray(RepSpec,acnt,agedpera,agedqtya,agedsuma);
  p1 = agedpera[0];
  p2 = agedpera[1];
  if (p1==-1) then begin p1 = 15; end;
  if (p2==-1) then begin p2 = 30; end;
  tstr1 = "0-" & p1;
  tstr2 = "" & p1+1 & "-"; 
  if (agedpera[1]>-1) then begin tstr2 = "" & p1+1 & "-" & p2; end;
  tstr3 = "" & p2+1 & "-"; 
  if (agedpera[2]>-1) then begin tstr3 = tstr3 & agedpera[2]; end;
  tstr4 = "" & agedpera[2]+1 & "-";
  if (agedpera[3]>-1) then begin tstr4 = tstr4 & agedpera[3]; end;
  tstr5 = "" & agedpera[3]+1 & "-";
  if (agedpera[4]>-1) then begin tstr5 = tstr5 & agedpera[4]; end;
  tstr6 = "" & agedpera[4]+1 & "-";
  if (agedpera[5]>-1) then begin tstr6 = tstr6 & agedpera[5]; end;
  tstr7 = "" & agedpera[5]+1 & "-";

  balcol = 1; balcol2 = 520;

  StartFormat(15);
  OutString(0,0,USetStr(2325),false);
  OutString(70,0,USetStr(2326),false);
  if (RepSpec.ArtMode==1) begin
    EndFormat;
    StartFormat(15);
     OutString(15,0,USetStr(14521),false);
     OutString(70,0,USetStr(14522),false);
  end;
  if (acnt==0) then begin
    if (RepSpec.ArtMode==1) begin
      SetRepColBiDi(2,260,300);
      SetRepColBiDi(3,310,350);
      balcol = 360; balcol2 = 400;
    end else begin
      SetRepColBiDi(2,350,390);
      SetRepColBiDi(3,400,440);
    end;
    OutStringAdjust(2,0,tstr1,true,M4Val);
    OutStringAdjust(3,0,tstr2,true,M4Val);
    if (RepSpec.ArtMode==1) begin
      OutStringAdjustBiDi(balcol,0,USetStr(14524),true,M4Val,balcol2);
    end else begin
      OutStringAdjustBiDi(balcol,0,USetStr(2330),true,M4Val,balcol2);
    end;
  end;
  if (acnt==1) then begin
    if (RepSpec.ArtMode==1) begin
      SetRepColBiDi(2,260,300);
      SetRepColBiDi(3,310,350);
      balcol = 360; balcol2 = 400;
    end else begin
      SetRepColBiDi(2,350,390);
      SetRepColBiDi(3,400,440);
    end;
    OutStringAdjust(2,0,tstr1,true,M4Val);
    OutStringAdjust(3,0,tstr2,true,M4Val);
    if (RepSpec.ArtMode==1) begin
      OutStringAdjustBiDi(balcol,0,USetStr(14524),true,M4Val,balcol2);
    end else begin
      OutStringAdjustBiDi(balcol,0,USetStr(2330),true,M4Val,balcol2);
    end;
  end;
  if (acnt==2) then begin
    if (RepSpec.ArtMode==1) begin
      SetRepColBiDi(2,160,210);
      SetRepColBiDi(3,220,270);
      SetRepColBiDi(4,280,330);
      balcol = 350; balcol2 = 390;
    end else begin
      SetRepColBiDi(2,300,340);
      SetRepColBiDi(3,350,390);
      SetRepColBiDi(4,400,440);
    end;
    OutStringAdjust(2,0,tstr1,true,M4Val);
    OutStringAdjust(3,0,tstr2,true,M4Val);
    OutStringAdjust(4,0,tstr3,true,M4Val);
    if (RepSpec.ArtMode==1) begin
      OutStringAdjustBiDi(balcol,0,USetStr(14524),true,M4Val,balcol2);
    end else begin
      OutStringAdjustBiDi(balcol,0,USetStr(2330),true,M4Val,balcol2);
    end;
  end;
  if (acnt==3) then begin
    if (RepSpec.ArtMode==1) begin
      SetRepColBiDi(2,160,200);
      SetRepColBiDi(3,210,250);
      SetRepColBiDi(4,260,300);
      SetRepColBiDi(5,310,350);
      balcol = 360; balcol2 = 400;
    end else begin
      SetRepColBiDi(2,250,290);
      SetRepColBiDi(3,300,340);
      SetRepColBiDi(4,350,390);
      SetRepColBiDi(5,400,440);
    end;
    OutStringAdjust(2,0,tstr1,true,M4Val);
    OutStringAdjust(3,0,tstr2,true,M4Val);
    OutStringAdjust(4,0,tstr3,true,M4Val);
    OutStringAdjust(5,0,tstr4,true,M4Val);
    if (RepSpec.ArtMode==1) begin
      OutStringAdjustBiDi(balcol,0,USetStr(14524),true,M4Val,balcol2);
    end else begin
      OutStringAdjustBiDi(balcol,0,USetStr(2330),true,M4Val,balcol2);
    end;
  end;
  if (acnt==4) then begin
    if (RepSpec.ArtMode==1) begin
      SetRepColBiDi(2,160,200);
      SetRepColBiDi(3,200,240);
      SetRepColBiDi(4,240,280);
      SetRepColBiDi(5,280,320);
      SetRepColBiDi(6,320,360);
      balcol = 370; balcol2 = 400;
    end else begin
      SetRepColBiDi(2,240,280);
      SetRepColBiDi(3,280,320);
      SetRepColBiDi(4,320,360);
      SetRepColBiDi(5,360,400);
      SetRepColBiDi(6,400,440);
    end;
    if (RepSpec.ArtMode==1) begin
      OutStringAdjust(2,0,tstr1,true,M4Val);
      OutStringAdjust(3,0,tstr2,true,M4Val);
      OutStringAdjust(4,0,tstr3,true,M4Val);
    end else begin
      OutStringAdjust(234,0,tstr1,true,M4Val);
      OutStringAdjust(276,0,tstr2,true,M4Val);
      OutStringAdjust(318,0,tstr3,true,M4Val);
    end;
    OutStringAdjust(5,0,tstr4,true,M4Val);
    OutStringAdjust(6,0,tstr5,true,M4Val);
    if (RepSpec.ArtMode==1) begin
      OutStringAdjustBiDi(balcol,0,USetStr(14524),true,M4Val,balcol2);
    end else begin
      OutStringAdjustBiDi(balcol,0,USetStr(2330),true,M4Val,balcol2);
    end;
  end;
  if (acnt==5) then begin
    if (RepSpec.ArtMode==1) begin
      SetRepColBiDi(2,160,190);
      SetRepColBiDi(3,194,224);
      SetRepColBiDi(4,228,248);
      SetRepColBiDi(5,262,282);
      SetRepColBiDi(6,296,316);
      SetRepColBiDi(7,330,360);
      balcol = 370; balcol2 = 400;
    end else begin
      SetRepColBiDi(2,232,272);
      SetRepColBiDi(3,260,300);
      SetRepColBiDi(4,294,334);
      SetRepColBiDi(5,334,374);
      SetRepColBiDi(6,380,420);
      SetRepColBiDi(7,430,470);
    end;

    if (RepSpec.ArtMode==1) begin
      OutStringAdjustBiDi(2,0,tstr1,true,M4Val,210);
      OutStringAdjustBiDi(3,0,tstr2,true,M4Val,240);
      OutStringAdjustBiDi(4,0,tstr3,true,M4Val,270);
    end else begin
      OutStringAdjustBiDi(230,0,tstr1,true,M4Val,270);
      OutStringAdjustBiDi(275,0,tstr2,true,M4Val,300);
      OutStringAdjustBiDi(318,0,tstr3,true,M4Val,333);
    end;
    OutStringAdjust(5,0,tstr4,true,M4Val);
    OutStringAdjust(6,0,tstr5,true,M4Val);
    OutStringAdjust(7,0,tstr6,true,M4Val);
    if (RepSpec.ArtMode==1) begin
      OutStringAdjustBiDi(balcol,0,USetStr(14524),true,M4Val,balcol2);
    end else begin
      OutStringAdjustBiDi(balcol,0,USetStr(2330),true,M4Val,balcol2);
    end;
  end;
  if (acnt==6) then begin
    if (RepSpec.ArtMode==1) begin
      SetRepColBiDi(2,160,210);
      SetRepColBiDi(3,190,240);
      SetRepColBiDi(4,220,270);
      SetRepColBiDi(5,250,300);
      SetRepColBiDi(6,280,330);
      SetRepColBiDi(7,310,360);
      SetRepColBiDi(8,340,390);
      balcol = 370; balcol2 = 400;
    end else begin
      SetRepColBiDi(2,200,240);
      SetRepColBiDi(3,229,269);
      SetRepColBiDi(4,263,303);
      SetRepColBiDi(5,303,343);
      SetRepColBiDi(6,350,390);
      SetRepColBiDi(7,396,436);
      SetRepColBiDi(8,430,470);    
    end;

    if (RepSpec.ArtMode==1) begin
      OutStringAdjustBiDi(2,0,tstr1,true,M4Val,185);
      OutStringAdjustBiDi(3,0,tstr2,true,M4Val,215);
      OutStringAdjustBiDi(4,0,tstr3,true,M4Val,245);
    end else begin
      OutStringAdjustBiDi(200,0,tstr1,true,M4Val,235);
      OutStringAdjustBiDi(229,0,tstr2,true,M4Val,270);
      OutStringAdjustBiDi(263,0,tstr3,true,M4Val,305);
    end;
    OutStringAdjust(5,0,tstr4,true,M4Val);
    OutStringAdjust(6,0,tstr5,true,M4Val);
    OutStringAdjust(7,0,tstr6,true,M4Val);
    OutStringAdjust(8,0,tstr7,true,M4Val);
    if (RepSpec.ArtMode==1) begin
      OutStringAdjustBiDi(balcol,0,USetStr(14524),true,M4Val,balcol2);
    end else begin
      OutStringAdjustBiDi(balcol,0,USetStr(2330),true,M4Val,balcol2);
    end;
  end;
  if (RepSpec.ArtMode==1) begin
    OutStringAdjustBiDi(420,0,USetStr(14523),true,M4Val,460);
    OutStringAdjustBiDi(1,0,USetStr(2330),true,M4Val,520);
  end;
  EndFormat;

  if ((RepSpec.UsedOnly!=0) and (blankdate(RepSpec.d1))) then begin  
    AgedLoopIS(RepSpec,sum1,nr,GetCostRoundMode(RoundRec),balcol,balcol2);
  end else begin  
    AgedLoopIN(RepSpec,sum1,nr,GetCostRoundMode(RoundRec),balcol,balcol2);
  end;
  Gray_Divider(0,1);
  switch (RepSpec.flags[0]) begin
    case 1:
      typ = M4Val;
    otherwise
      typ = M4UVal;
  end;
  StartFormat(15);
  OutVal(2,0,nr[0],typ,true);
  OutVal(3,0,nr[1],typ,true);
  if (acnt>1) then begin
    OutVal(4,0,nr[2],typ,true);
  end;
  if (acnt>2) then begin
    OutVal(5,0,nr[3],typ,true);
  end;
  if (acnt>3) then begin
    OutVal(6,0,nr[4],typ,true);
  end;
  if (acnt>4) then begin
    OutVal(7,0,nr[5],typ,true);
  end;
  if (acnt>5) then begin
    OutVal(8,0,nr[6],typ,true);
  end;
  if (acnt>6) then begin
    OutVal(9,0,nr[7],typ,true);
  end;
//  OutVal(1,0,sum1,M45Val,true);
  OutValBiDi(balcol,0,nr["totalqty"],M4Qty,true,balcol2);
  if (RepSpec.ArtMode==1) begin
    OutValBiDi(1,0,nr["totalval"],M4Val,true,520);
  end;
  EndFormat;
  EndJob;
  return;
end;
