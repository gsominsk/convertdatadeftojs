external procedure AddVePerFormCashInRow(Array Integer,Array LongInt,Array string,
                           Array Date,Array Date,Array val,Array val,Array string,var Integer,
                           record RcVc,record CUVc,record CLInVc,row CLInVc,Integer);
external function Boolean GetAPPayRate(LongInt,var val,var val,var val,var val,var val,string,Date);
external procedure PurgeTRExtYc(record PurgeTRVc,var string);
/*
external procedure VEPer_PrintPurgeTransaction(record RcVc,record CUVc,record OPrsVc,val,
                             var array string,var array val,var array val,var array val,var Integer,
                             var Boolean,var val,var val,var val,var val,var val,
                             record BaseCurBlock,Boolean,
                             var array Integer,var array LongInt,var array string,
                             var array Date,var array Date,var array val,var array val,var array val,var array string,
                             var Integer);
*/                             
external procedure AddVePerFormTransactionRow(Array Integer,Array LongInt,Array string,
                           Array Date,Array Date,Array val,Array val,Array val,Array string,var Integer,
                           record RcVc,record CUVc,record OPVc,row OPVc,val,LongInt);
external procedure AddVePerFormPaymentRow(Array Integer,Array LongInt,Array string,
                           Array Date,Array Date,Array val,Array val,Array string,var Integer,
                           record RcVc,record CUVc,record OPVc,row OPVc);
external procedure AddVePerFormInvoiceRow(Array Integer,Array LongInt,Array string,
                           Array Date,Array Date,Array val,Array val,Array string,var Integer,
                           record RcVc,record CUVc,record VIVc);
external procedure VendListTransCLOut(record RcVc,record OPrsVc,record CUVc,var val,var val,var val,var val,
                                      record BaseCurBlock,Integer,var array string,var array val,var array val,Boolean,
                                      var array Integer,var array LongInt,var array string,var array Date,var array Date,
                                      var array val,var array val,var array val,var array string,var Integer);
external function roundmode SetRoundModeD(Integer);
external procedure VIVc_GetPrePaidAmount(record VIVc,var val);
external function string 255 GetSupplierOnAccountAC(string);
external procedure GetAPAcc(string,var string);
external function Integer GetIntYc(Date);
external procedure TRExtYc(record TRVc,var string);
external function Integer TypeOfCurncy(var string,var Integer);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external procedure VendHead(record RcVc,record CUVc,var val,Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);

/*
global
procedure PrintPrePaymentsVals(record VIVc VIr,var val balp,var val SumDebet)
BEGIN
  record APPayHistVc APPayr;
  row VIVc VIrw;
  Integer i,rwcnt;
  val t;
  string 255 tstr;
  
  rwcnt = MatRowCnt(VIr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIr,i,VIrw);
    if (VIrw.stp==kPaymentRowTypeWriteoff) then begin 
      if (VIrw.PrepayNr<>-1) then begin
        APPayr.VEPNr = VIrw.PrepayNr;
        APPayr.FileName = "OPVc";
        if (ReadFirstMain(APPayr,2,true)) then begin
          StartFormat(15);
          OutDate(0,0,VIr.TransDate,false);
          OutString(90,0,USetStr(1875),false);
          tstr = VIrw.PrepayNr;
          tstr = tstr & "(";
          tstr = tstr & VIr.SerNr;          
          tstr = tstr & ")";
          OutString(140,0,tstr,false);
          t = MULRATETOBASE1(VIr.CurncyCode,VIrw.PrepayAmount,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
          OutVal(3,0,t,M4DVal,true);
          OutVal(4,0,t,M4CVal,true);
          balp = balp - t;
          SumDebet = SumDebet + t;
          OutVal(1,0,balp,M4Val,true);
          EndFormat;        
        end;  
      end;
    end;
  end;  
  RETURN;
END;
*/

global
procedure VendListTransCLIn(record RcVc RepSpec,record OPrsVc OPrsr,record CUVc VEp,var val balp,var val totloss,var val totgain,var val SumCredit,
                            record BaseCurBlock BCb,Integer curcnt,var array string acur,var array val av2,var array val av3,Boolean reportf,
                            var array Integer adocRwtype,var array LongInt adocInvoiceNr,var array string adocVEInvNo,
                            var array Date adocInvDate,var array Date adocDueDate,var array val adocRVal,var array val adocCredVal,var array val adocDebVal,var array string adocCurncyCode,
                            var Integer adoccnt)
BEGIN
  record CLInVc CLInr;
  row CLInVc CLInrw;
  Integer tcnt,trwcnt;
  val tmp,cuscurval,tinivcurrate,lossv;
  val v,v2;
  string 255 tstr;
  record VIVc VIr;
  
  v = blankval;
  v2 = blankval;
  CLInr.SerNr = OPrsr.TransNr;
  if (ReadFirstMain(CLInr,1,true)) then begin
    if (CLInr.Invalid!=0) then begin goto LVendListTransCLIn; end;
    trwcnt = MatRowCnt(CLInr);
    for (tcnt=0;tcnt<trwcnt;tcnt=tcnt+1) begin
      MatRowGet(CLInr,tcnt,CLInrw);
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,CLInr.Objects)==false) then begin goto L11CLIn; end;
      end;        
      if ((CLInrw.Type==kCashInRowTypeCredPurchaseInvoice) and (CLInrw.TransNr!=-1)) then begin
        v = blankval;
        if (CLInrw.Sum!=0) then begin              
          VIr.SerNr = CLInrw.TransNr;
          if (ReadFirstMain(VIr,1,true)) then begin end;
          if (nonblank(RepSpec.FirstAcc)) then begin
            if (VIr.APAcc!=RepSpec.FirstAcc) then begin
              goto L11CLIn;
            end;
          end;        
            if (CLInrw.TransNr==OPrsr.VINr) then begin
              if (CLInr.TransDate==OPrsr.TransDate) then begin
                if (CLInr.CUCode==VEp.Code) then begin
                  v = CLInrw.Sum;
                  tinivcurrate = MulRateToBase1(CLInr.CurncyCode,v,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
                  cuscurval = MulRateToBase1(CLInr.CurncyCode,v,CLInr.FrRate,CLInr.ToRateB1,CLInr.ToRateB2,CLInr.BaseRate1,CLInr.BaseRate2,DefaultCurRoundOff);
                  lossv = tinivcurrate - cuscurval;

                  if (lossv>0) then begin
                    totloss = totloss - lossv;
                  end else begin
                    totgain = totgain + lossv;
                  end;
                  if (RepSpec.flags[2]==0) then begin
                    v = cuscurval;
                  end else begin
                    if (CLInr.CurncyCode==VEp.VECurncyCode) then begin
                      cuscurval = v;
                    end;
                  end;
                  balp = balp + cuscurval;
                  balp = balp + lossv;
                  SumCredit = SumCredit + cuscurval;
                end;
              end;
            end;
          if (v!=0) then begin
            if (blank(VEp.VECurncyCode)) then begin
              AddCurncyTotals(acur,av2,curcnt,BCb.BaseCur1,cuscurval);
              AddCurncyTotals(acur,av3,curcnt,BCb.BaseCur1,cuscurval);
//              AddCurncyTotals(acur,av2,curcnt,BCb.BaseCur1,lossv);
//              AddCurncyTotals(acur,av3,curcnt,BCb.BaseCur1,lossv);
            end else begin  
              AddCurncyTotals(acur,av2,curcnt,CLInr.CurncyCode,v);
              AddCurncyTotals(acur,av3,curcnt,CLInr.CurncyCode,v);
            end;
          
            if (RepSpec.ArtMode==1) then begin
              if (reportf) then begin
                tstr = USetStr(1193);         
                StartFormat(15);
                OutDate(0,0,OPrsr.TransDate,false);
                OutString(65,0,tstr,false);
                tstr = CLInr.SerNr;
                tstr = tstr & " (";
                tstr = tstr & OPrsr.VINr;
                tstr = tstr & " )";
                OutString(115,"DblCLInVc",tstr,false);
                OutVal(4,0,v,M4Val,true);
                if (RepSpec.flags[2]==1) then begin
                  OutString(8,0,CLInr.CurncyCode,false);
                end else begin
                  OutVal(420,0,lossv,M4Val,true);
                end;
                OutVal(2,0,balp,M4Val,true);
                EndFormat;
              end else begin
                AddVePerFormCashInRow(adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocCurncyCode,adoccnt,
                                      RepSpec,VEp,CLInr,CLInrw,13);
              end;
            end;
          end;
        end;
      end;
L11CLIn:;               
    end;   
  end;
LVendListTransCLIn:;
  RETURN;
END; 

procedure FindAllPrepayLosses(string invcurncy,Date transdate,val invval,val invoutstand,LongInt VEPNr,val cuscurval,var val losses,record VIVc VIr,LongInt invnr,
                              string bankcurncy,val bankval,val B1BankVal,LongInt opnr,
                              record BaseCurBlock BCb)
begin
  record VIVc VI2r;
  record CLOutVc CLOutr;
  record APPayHistVc APPayHistr;
  Boolean foundf,foundprepf,withratef;
  val prepv,b1loss;
  val curval;
  Date ltransdate;
  val fr,to1,to2,br1,br2;
  
  if (invcurncy==bankcurncy) then begin
    if (invcurncy==BCb.BaseCur1) then begin
      losses = cuscurval;
      goto LFindAllPrepayLosses;
    end;
  end;
  ltransdate = transdate;
  losses = BlankVal;
  curval = invval;
  if (VEPNr!=-1) then begin
    if (invnr!=-1) then begin
      APPayHistr.VEPNr = VEPNr;
      APPayHistr.FileName = "VIVc";
      foundf = true;
      while (LoopMain(APPayHistr,2,foundf)) begin
        if ((APPayHistr.VEPNr==VEPNr) and (APPayHistr.FileName=="VIVc")) then begin
          VI2r.SerNr = APPayHistr.SerNr;
          if (ReadFirstMain(VI2r,1,true)) then begin
            VIVc_GetPrePaidAmount(VI2r,prepv);
            curval = curval - prepv;
            b1loss = MulRateToBase1(VI2r.CurncyCode,prepv,VI2r.FrRate,VI2r.ToRateB1,VI2r.ToRateB2,VI2r.BaseRate1,VI2r.BaseRate2,DefaultCurRoundOff);
            losses = losses + b1loss;
          end;     
        end else begin
          foundf = false;
        end;
      end;            
    end else begin
      APPayHistr.VEPNr = VEPNr;
      APPayHistr.FileName = "OPVc";
      foundf = true;
      while (LoopMain(APPayHistr,2,foundf)) begin
        if ((APPayHistr.VEPNr==VEPNr) and (APPayHistr.FileName=="OPVc")) then begin
          if (opnr!=APPayHistr.SerNr) then begin
            ltransdate = APPayHistr.TransDate;
          end;
          foundf = false;
          foundprepf = true;
        end else begin
          foundf = false;
        end;
      end;
      if (foundprepf==false) then begin
        ResetLoop(APPayHistr);
        APPayHistr.VEPNr = VEPNr;
        APPayHistr.FileName = "CLOutVc";
        foundf = true;
        while (LoopMain(APPayHistr,2,foundf)) begin
          if ((APPayHistr.VEPNr==VEPNr) and (APPayHistr.FileName=="CLOutVc")) then begin
            ltransdate = APPayHistr.TransDate;
            foundf = false;
            foundprepf = true;
            CLOutr.SerNr = APPayHistr.SerNr;
            if (ReadFirstMain(CLOutr,1,true)) then begin
              withratef = true;
              fr = CLOutr.FrRate;
              to1 = CLOutr.ToRateB1;
              to2 = CLOutr.ToRateB2;
              br1 = CLOutr.BaseRate1;
              br2 = CLOutr.BaseRate2;
            end;
          end else begin
            foundf = false;
          end;
        end;
      end;
    end;            
  end;

  if (invnr!=-1) then begin
    if (invoutstand==invval) then begin
//      b1loss = B1BankVal;
      b1loss = 0;//this must be value using Invoice rate, cus cur val is below with payment rate
      if (b1loss==0) then begin
        if (BCb.BaseCur1==bankcurncy) then begin
//          b1loss = bankval;//this must be value using Invoice rate
          b1loss = MulRateToBase1(VIr.CurncyCode,curval,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
        end else begin
          b1loss = MulRateToBase1(VIr.CurncyCode,curval,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
        end;
      end;
    end else begin
      b1loss = MulRateToBase1(VIr.CurncyCode,curval,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
    end;
  end else begin
    if (withratef) then begin
      b1loss = MulRateToBase1(invcurncy,curval,fr,to1,to2,br1,br2,DefaultCurRoundOff);
    end else begin
      if (B1BankVal==0) then begin
        if ((BCb.BaseCur1==bankcurncy) and (bankcurncy<>invcurncy)) then begin
//        b1loss = bankval;//must be same as one on prepayment account
          b1loss = MulWithRateToBase1(invcurncy,ltransdate,curval,DefaultCurRoundOff);
        end else begin
          b1loss = MulWithRateToBase1(invcurncy,ltransdate,curval,DefaultCurRoundOff);
        end;
      end else begin
        b1loss = B1BankVal;
      end;
    end;
  end;
  losses = losses + b1loss;
  if (losses==0) then begin
    losses = BlankVal;
  end;
LFindAllPrepayLosses:;  
  return;
end;

function val FindAPPayHistBookVal(LongInt sernr,Date td,LongInt PrepayNr,string invcurncy,val v)
begin
  val res;
  record APPayHistVc APPayHistr;
  Boolean foundprepf;
  
  APPayHistr.VEPNr = PrepayNr;
  APPayHistr.FileName = "OPVc";
  APPayHistr.SerNr = sernr;
  if (ReadFirstMain(APPayHistr,3,true)) then begin
//    res = APPayHistr.BookVal;
    res = (v*APPayHistr.BookVal)/APPayHistr.Val;
    foundprepf = true;
  end;
  APPayHistr.VEPNr = PrepayNr;
  APPayHistr.FileName = "CLOutVc";
  APPayHistr.SerNr = sernr;
  if (ReadFirstMain(APPayHistr,3,true)) then begin
//    res = APPayHistr.BookVal;
    res = (v*APPayHistr.BookVal)/APPayHistr.Val;
    foundprepf = true;
  end;
  if (foundprepf==false) then begin
    res = MulWithRateToBase1(invcurncy,td,v,DefaultCurRoundOff);  
  end;
  FindAPPayHistBookVal = res;
  return;
end;

global
procedure VendListTransCLInRevPrepVE(record RcVc RepSpec,record OPrsVc OPrsr,record CUVc VEr,var val balp,var val SumCredit,
                             record BaseCurBlock BCb,Integer curcnt,var array string acur,var array val av2,var array val av3,Boolean reportf,
                             var array Integer adocRwtype,var array LongInt adocInvoiceNr,var array string adocVEInvNo,
                             var array Date adocInvDate,var array Date adocDueDate,var array val adocRVal,var array val adocCredVal,var array val adocDebVal,var array string adocCurncyCode,
                             var Integer adoccnt)
BEGIN
  record CLInVc CLInr;
  row CLInVc CLInrw;
  Integer tcnt,trwcnt;
  val tmp,cuscurval;
  val v,v2,lossv;
  string 255 tstr,apacc;
  record VIVc VIr;
  
  v = blankval;
  v2 = blankval;
  CLInr.SerNr = OPrsr.TransNr;
  if (ReadFirstMain(CLInr,1,true)) then begin
    if (CLInr.Invalid!=0) then begin goto LVendListTransCLInRevPrepVE; end;
    trwcnt = MatRowCnt(CLInr);
    for (tcnt=0;tcnt<trwcnt;tcnt=tcnt+1) begin
      MatRowGet(CLInr,tcnt,CLInrw);
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,CLInr.Objects)==false) then begin goto L54; end;
      end;              
      if ((CLInrw.Type==kCashInRowTypeSupplierRevPrepayment) and (CLInrw.TransNr!=-1)) then begin
        if (nonblank(RepSpec.FirstAcc)) then begin
          if (GetSupplierOnAccountAC(CLInrw.Company)!=RepSpec.FirstAcc) then begin
            goto L54;
          end;
        end;
        v = blankval;
        if (CLInrw.Sum!=0) then begin              
          if (OPrsr.VINr==-1) then begin
            if (CLInr.TransDate==OPrsr.TransDate) then begin
              if (CLInrw.Company==VEr.Code) then begin
                v = CLInrw.Sum;
                cuscurval = MulRateToBase1(CLInr.CurncyCode,v,CLInr.FrRate,CLInr.ToRateB1,CLInr.ToRateB2,CLInr.BaseRate1,CLInr.BaseRate2,DefaultCurRoundOff);
                if (RepSpec.flags[2]==0) then begin
                  cuscurval = FindAPPayHistBookVal(CLInr.SerNr,CLInr.TransDate,CLInrw.TransNr,CLInr.CurncyCode,v);
                  v = cuscurval;
                end else begin
                  if (CLInr.CurncyCode==VEr.VECurncyCode) then begin
                    cuscurval = v;
                  end;
                end;
//                FindAllPrepayLosses(CLInr.CurncyCode,CLInr.TransDate,CLInrw.Sum,CLInrw.TransNr,cuscurval,lossv,VIr,-1,CLInr.CurncyCode,CLInrw.Sum,blankval,CLInr.SerNr,BCb);
                balp = balp + cuscurval;
                SumCredit = SumCredit + cuscurval;
              end;
            end;
          end;
          if (v!=0) then begin
            if (RepSpec.ArtMode==1) then begin
              if (reportf) then begin
                tstr = USetStr(2497);         
                StartFormat(15);
                OutDate(0,0,OPrsr.TransDate,false);
                OutString(65,0,tstr,false);
                tstr = CLInr.SerNr;
                if (CLInrw.TransNr>0) then begin
                  tstr = tstr & " (";
                  tstr = tstr & CLInrw.TransNr;
                  tstr = tstr & " )";
                end;
                OutString(115,"DblCLInVc",tstr,false);
                OutVal(4,0,v,M4Val,true);
                if (RepSpec.flags[2]==1) then begin
                  OutString(7,0,CLInr.CurncyCode,false);
                end;  
                OutVal(2,0,balp,M4Val,true);
                EndFormat;
              end else begin
                AddVePerFormCashInRow(adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocCurncyCode,adoccnt,
                                      RepSpec,VEr,CLInr,CLInrw,13);
              end;

              if (CLInr.Invalid==0) then begin
              if ((RepSpec.flags[2]==0) or (RepSpec.flags[2]==1)) then begin
                if (blank(VEr.VECurncyCode)) then begin
                  AddCurncyTotals(acur,av2,curcnt,BCb.BaseCur1,-cuscurval);
                  AddCurncyTotals(acur,av3,curcnt,BCb.BaseCur1,-cuscurval);
//                  AddCurncyTotals(acur,av2,curcnt,BCb.BaseCur1,lossv);
//                  AddCurncyTotals(acur,av3,curcnt,BCb.BaseCur1,lossv);
                end else begin  
                  AddCurncyTotals(acur,av2,curcnt,CLInr.CurncyCode,-v);
                  AddCurncyTotals(acur,av3,curcnt,CLInr.CurncyCode,-v);
                end;
              end;
              end;

            end;
          end;          
        end;
      end;      
            
L54:;               
    end;   
  end;
LVendListTransCLInRevPrepVE:;
  RETURN;
END;

procedure GetOPPrepaymentAmount(record VIVc VIp,val cuscurval,val curval,record BaseCurBlock BCb,var val lossv)
BEGIN
  record APPayHistVc APPayHistr;
  row VIVc VIrw;
  Integer i,rwcnt;
  val t,curv,v;
  LongInt lastcupno;
  Boolean foundf,onecurf;
  val cvp;
  val thesum;
  val bases,realbases;
  string 10 veperlastprepcur;

  cvp = curval;
  lastcupno = -1;
  lossv = blankval;
  rwcnt = MatRowCnt(VIp);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(VIp,i,VIrw);
    if ((VIrw.stp==kInvoiceRowTypePrepayment) and (VIrw.PrepayNr<>lastcupno)) then begin
      thesum = VIrw.PrepayAmount;
      curv = BlankVal;
      onecurf = true;
      realbases = BlankVal;
      bases = BlankVal;
      APPayHistr.VEPNr = VIrw.PrepayNr;
      APPayHistr.FileName = "OPVc";
      foundf = true;
      ResetLoop(APPayHistr);
      while (LoopMain(APPayHistr,2,foundf)) begin
        if ((APPayHistr.VEPNr<>VIrw.PrepayNr) or (APPayHistr.FileName<>"OPVc")) then begin foundf = false; end;
        if (foundf) then begin
          if (nonblank(veperlastprepcur)) then begin
            if (APPayHistr.CurncyCode!=veperlastprepcur) then begin   
              onecurf = false;
            end;
          end;
          if ((cvp>APPayHistr.Val) and (thesum>APPayHistr.Val)) then begin
            cvp = cvp - APPayHistr.Val;
            thesum = thesum - APPayHistr.Val;
            curv = curv + APPayHistr.Val;
            bases = bases + MulRateToBase1(VIp.CurncyCode,APPayHistr.Val,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,SetRoundModeD(2));
            realbases = realbases + APPayHistr.BookVal;        
           end else begin
            cvp = cvp - VIrw.Sum;
            curv = curv + APPayHistr.Val;
            bases = bases + MulRateToBase1(VIp.CurncyCode,thesum,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,SetRoundModeD(2));
            realbases = realbases + APPayHistr.BookVal;
            foundf = false;
          end;
          veperlastprepcur = APPayHistr.CurncyCode;
        end;
      end;
      ResetLoop(APPayHistr);
      APPayHistr.VEPNr = VIrw.PrepayNr;
      APPayHistr.FileName = "CLOutVc";
      foundf = true;
      ResetLoop(APPayHistr);
      while (LoopMain(APPayHistr,2,foundf)) begin
        if ((APPayHistr.VEPNr<>VIrw.PrepayNr) or (APPayHistr.FileName<>"CLOutVc")) then begin foundf = false; end;
        if (foundf) then begin
          if (nonblank(veperlastprepcur)) then begin
            if (APPayHistr.CurncyCode!=veperlastprepcur) then begin   
              onecurf = false;
            end;
          end;
          if ((cvp>APPayHistr.Val) and (thesum>APPayHistr.Val)) then begin
            cvp = cvp - APPayHistr.Val;
            thesum = thesum - APPayHistr.Val;
            curv = curv + APPayHistr.Val;
            bases = bases + MulRateToBase1(VIp.CurncyCode,APPayHistr.Val,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,SetRoundModeD(2));
            realbases = realbases + APPayHistr.BookVal;
           end else begin
            cvp = cvp - VIrw.Sum;
            curv = curv + APPayHistr.Val;
            bases = bases + MulRateToBase1(VIp.CurncyCode,thesum,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,SetRoundModeD(2));
            realbases = realbases + APPayHistr.BookVal;
            foundf = false;
          end;
          veperlastprepcur = APPayHistr.CurncyCode;
        end;
      end;
      if (blank(VIrw.Sum)) then begin
        if (onecurf) then begin
          thesum = MulRateToBase1(VIp.CurncyCode,VIrw.PrepayAmount,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,DefaultCurRoundOff);
        end else begin
          thesum = (MulRateToBase1(VIp.CurncyCode,VIrw.PrepayAmount,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,DefaultCurRoundOff)*realbases)/curv;
        end;
      end else begin
        if (onecurf) then begin
          thesum = VIrw.Sum;
        end else begin
          thesum = (VIrw.Sum*realbases)/curv;
        end;
      end;      
      lossv = lossv - Round(bases-thesum,SetRoundModeD(2));
      if (APPayHistr.CurncyCode==VIp.CurncyCode) then begin
//        lossv = 0;//why so, we have an option to show amounts in Base Curency, so there must be rate diffrence regardless of currency
      end;
      lastcupno = VIrw.PrepayNr;
    end;
  end;  
  return;
END;

procedure GetVIPrepaySum(record VIVc VIr,var val balp)
BEGIN
  row VIVc VIrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(VIr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIr,i,VIrw);
    if (VIrw.stp==kPaymentRowTypeWriteoff) then begin 
      if (VIrw.PrepayNr<>-1) then begin
        balp = balp + VIrw.PrepayAmount;
      end;
    end;
  end;  
  return;
end;

global
procedure VEPer_PrintInvoice(record RcVc RepSpec,record CUVc VEr,record BaseCurBlock BCb,LongInt VISerNr,
                             var array string acur,var array val av1,var array val av2,var array val av3,var Integer curcnt,
                             var val balp,var val totgain,var val totloss,var val SumDebet,var val SumCredit,Boolean reportf,
                             var array Integer adocRwtype,var array LongInt adocInvoiceNr,var array string adocVEInvNo,
                             var array Date adocInvDate,var array Date adocDueDate,var array val adocRVal,var array val adocCredVal,var array val adocDebVal,var array string adocCurncyCode,
                             var Integer adoccnt)
begin
  record VIVc VIr;
  row VIVc VIrw;
  record VIVc VI2r;
  string 20 lastcur;
  Boolean printf,creditcashf;
  val v,v2,cuscurval,cuscurval2,lossv,taxv,ppval,curtaxv;
  string 255 tstr;
  val frrate,torate1,torate2,baserate1,baserate2;
  Integer i,rwcnt;
  
  VIr.SerNr = VISerNr;
  if (ReadFirstMain(VIr,1,true)) then begin
    if ((VIr.OKFlag==1) and (VIr.Invalid==0)) then begin
      if (nonblank(RepSpec.FirstAcc)) then begin
        if (VIr.APAcc!=RepSpec.FirstAcc) then begin
          goto LVEPer_PrintInvoice;
        end;
      end;
      if (VIr.CurncyCode<>lastcur) then begin
        if ((VEr.VECurncyCode<>"") and (nonblank(lastcur))) then begin printf = false; end;
        lastcur = VIr.CurncyCode;
      end;
      if ((VIr.InvType==kInvoiceTypeNormal or VIr.InvType==kInvoiceTypeNormalSpecialSales) or (VIr.InvType==kInvoiceTypeInterest) or (VIr.InvType==kInvoiceTypePrepayment) or (VIr.InvType==kInvoiceTypeDebit) or (VIr.InvType==kInvoiceTypeDownpayment)) then begin
        v = VIr.PayVal;
        cuscurval = MULRATETOBASE1(VIr.CurncyCode,v,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff); 
        if (RepSpec.flags[2]==0) then begin
          v = cuscurval;
        end else begin
          if (VIr.CurncyCode==VEr.VECurncyCode) then begin
            cuscurval = v;
          end;  
        end;
        GetOPPrepaymentAmount(VIr,cuscurval,VIr.PayVal,BCb,lossv);
        if (RepSpec.flags[2]==0) then begin
          balp = balp + lossv;
        end else begin
          if (VIr.CurncyCode<>VEr.VECurncyCode) then begin
            balp = balp + lossv;
          end;  
        end;
        if ((nonblank(VEr.VECurncyCode)) and (RepSpec.flags[2]==1)) then begin
          lossv = 0;
        end;
        if (lossv>0) then begin
          totloss = totloss + lossv;
        end else begin
          totgain = lossv + totgain;
        end;
        balp = balp + cuscurval;
        SumCredit = SumCredit + cuscurval;
        if (reportf) then begin
          StartFormat(15);
          OutDate(0,0,VIr.TransDate,false);
          OutString(65,0,USetStr(4185),false);
          tstr = VIr.SerNr;
          if (nonblank(VIr.InvoiceNr)) then begin
            tstr = tstr & ", (";
            tstr = tstr & VIr.InvoiceNr;
            tstr = tstr & ")";
          end;
          OutString(115,"DblVePerVI",tstr,false);
          switch (RepSpec.Media) begin
            case mtFile:
              goto LVEPer_PrintInvoicetoFile;
            case mtExcel:
LVEPer_PrintInvoicetoFile:;    
              OutString(3,0,"",false);              
              OutVal(4,0,v,M4Val,true);
              if (RepSpec.flags[2]==1) then begin
                OutString(8,0,VIr.CurncyCode,false);              
              end else begin
                OutVal(420,0,lossv,M4Val,true);
              end;                
              OutVal(2,0,balp,M4Val,true);
            otherwise
              OutVal(4,0,v,M4Val,true);
              if (RepSpec.flags[2]==1) then begin
                OutString(8,0,VIr.CurncyCode,false);              
              end else begin
                OutVal(420,0,lossv,M4Val,true);
              end;                
              OutVal(2,0,balp,M4Val,true);
          end;
          EndFormat;
        end else begin
          AddVePerFormInvoiceRow(adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocCurncyCode,adoccnt,
                                 RepSpec,VEr,VIr);
        end;

        if (nonblank(VEr.VECurncyCode)) then begin              
          AddCurncyTotals(acur,av2,curcnt,VEr.VECurncyCode,v);
          AddCurncyTotals(acur,av3,curcnt,VEr.VECurncyCode,v);
        end else begin
          AddCurncyTotals(acur,av2,curcnt,BCb.BaseCur1,cuscurval);
          AddCurncyTotals(acur,av3,curcnt,BCb.BaseCur1,cuscurval);

          AddCurncyTotals(acur,av2,curcnt,BCb.BaseCur1,lossv);
          AddCurncyTotals(acur,av3,curcnt,BCb.BaseCur1,lossv);
        end;            
        if (VIr.WithHoldingTax<>0) then begin
          taxv = VIr.WithHoldingTax;
          curtaxv = MULRATETOBASE1(VIr.CurncyCode,taxv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff); 
          if (RepSpec.flags[2]==0) then begin
            taxv = curtaxv;
          end else begin
            if (VIr.CurncyCode==VEr.VECurncyCode) then begin
              curtaxv = taxv;
            end;  
          end;
          balp = balp - curtaxv;          
          SumDebet = SumDebet + curtaxv;
          if (reportf) then begin
            StartFormat(15);
            OutDate(0,0,VIr.TransDate,false);
            OutString(65,0,USetStr(4194),false);
            tstr = VIr.SerNr;
            if (nonblank(VIr.InvoiceNr)) then begin
              tstr = tstr & ", (";
              tstr = tstr & VIr.InvoiceNr;
              tstr = tstr & ")";
            end;
            OutString(115,"DblVePerVI",tstr,false);
            OutVal(3,0,taxv,M4Val,true);
            if (RepSpec.flags[2]==1) then begin
              OutString(7,0,VIr.CurncyCode,false);              
            end;     
            OutVal(2,0,balp,M4Val,true);
            EndFormat;
          end;
          if (nonblank(VEr.VECurncyCode)) then begin              
            AddCurncyTotals(acur,av2,curcnt,VEr.VECurncyCode,-taxv);
            AddCurncyTotals(acur,av3,curcnt,VEr.VECurncyCode,-taxv);
          end else begin
            AddCurncyTotals(acur,av2,curcnt,BCb.BaseCur1,-curtaxv);
            AddCurncyTotals(acur,av3,curcnt,BCb.BaseCur1,-curtaxv);
          end; 
        end;  
      end;
      if (VIr.InvType==kInvoiceTypeEmployee or VIr.InvType==kInvoiceTypeCash or VIr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
        v = VIr.PayVal + ppval;
        GetVIPrepaySum(VIr,v2); // If you for some stupid reason use prepayment on a cash invoice, it needs to deduct Debit side of cash line...
        v2 = v-v2;
        cuscurval = MULRATETOBASE1(VIr.CurncyCode,v,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff); 
        cuscurval2 = MULRATETOBASE1(VIr.CurncyCode,v2,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff); 
        if (RepSpec.flags[2]==0) then begin
          v = cuscurval;
          v2 = cuscurval2;
        end else begin
          if (VIr.CurncyCode==VEr.VECurncyCode) then begin 
            cuscurval = v;            
            cuscurval2 = v2;            
          end;  
        end;
        SumDebet = SumDebet + cuscurval2;
        SumCredit = SumCredit + cuscurval;
        balp = balp + v-v2;
        if (reportf) then begin
          StartFormat(15);
          OutDate(0,0,VIr.TransDate,false);
          OutString(65,0,USetStr(4188),false);
          tstr = VIr.SerNr;
          if (nonblank(VIr.InvoiceNr)) then begin
            tstr = tstr & ", (";
            tstr = tstr & VIr.InvoiceNr;
            tstr = tstr & ")";
          end;
          OutString(115,"DblVePerVI",tstr,false);
          OutVal(3,0,v2,M4Val,true);
          if (RepSpec.flags[2]==1) then begin
            OutString(7,0,VIr.CurncyCode,false);
          end;  
          OutVal(4,0,v,M4Val,true);
          if (RepSpec.flags[2]==1) then begin
            OutString(8,0,VIr.CurncyCode,false);
          end;  
          OutVal(2,0,balp,M4Val,true);
          EndFormat;
        end else begin
          AddVePerFormInvoiceRow(adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocCurncyCode,adoccnt,
                                 RepSpec,VEr,VIr);
          adocDebVal[adoccnt-1] = adocCredVal[adoccnt-1];
        end;
        v = v-v2;
        AddCurncyTotals(acur,av2,curcnt,VIr.CurncyCode,v);
        AddCurncyTotals(acur,av3,curcnt,VIr.CurncyCode,v);
        if (ppval<>0) then begin
          SumCredit = SumCredit - ppval;            
          balp = balp - ppval;
          if (reportf) then begin
            StartFormat(15);
            OutString(65,0,USetStr(1875),false);
            OutVal(4,0,ppval,M4NegVal,true);
            if (RepSpec.flags[2]==1) then begin
              OutString(8,0,VIr.CurncyCode,false);              
            end;  
            OutVal(2,0,balp,M4Val,true);
            EndFormat;
          end;
          AddCurncyTotals(acur,av2,curcnt,VIr.CurncyCode,-ppval);
          AddCurncyTotals(acur,av3,curcnt,VIr.CurncyCode,-ppval);
        end;
      end;
      if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        v = VIr.PayVal;
        frrate = VIr.FrRate;
        torate1 = VIr.ToRateB1;
        torate2 = VIr.ToRateB2;
        baserate1 = VIr.BaseRate1;
        baserate2 = VIr.BaseRate2;
        rwcnt = MatRowCnt(VIr);
        creditcashf = false;
        if (VIr.CredInv<>-1) then begin
          VI2r.SerNr = VIr.CredInv;
          if (ReadFirstMain(VI2r,1,true)) then begin
            if (VI2r.InvType==kInvoiceTypeEmployee or VI2r.InvType==kInvoiceTypeCash or VI2r.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin creditcashf = true; end;
            frrate = VI2r.FrRate;
            torate1 = VI2r.ToRateB1;
            torate2 = VI2r.ToRateB2;
            baserate1 = VI2r.BaseRate1;
            baserate2 = VI2r.BaseRate2;
          end;
        end;
        cuscurval = MULRATETOBASE1(VIr.CurncyCode,v,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff); 
        if (RepSpec.flags[2]==0) then begin
          v = cuscurval;
        end else begin
          if (VIr.CurncyCode==VEr.VECurncyCode) then begin
            cuscurval = v;
          end;  
        end;           
        if (creditcashf) then begin
          if (RepSpec.flags[7]!=0) then begin
            SumCredit = SumCredit + cuscurval;
            SumDebet = SumDebet + cuscurval;
          end else begin
            SumCredit = SumCredit + cuscurval;
            SumDebet = SumDebet + cuscurval;
          end;
        end else begin
          balp = balp - cuscurval;
          if (RepSpec.flags[7]!=0) then begin
            SumCredit = SumCredit - cuscurval;
          end else begin
            SumDebet = SumDebet + cuscurval;
          end;
        end;
        if (reportf) then begin
          StartFormat(15);
          OutDate(0,0,VIr.TransDate,false);
          OutString(65,0,USetStr(4187),false);
          if (VIr.IVNr>0) then begin
            OutLongInt(115,"DblIVVc",VIr.IVNr,false);
          end else begin
            tstr = VIr.SerNr;
            if (nonblank(VIr.InvoiceNr)) then begin
              tstr = tstr & ", (";
              tstr = tstr & VIr.InvoiceNr;
              tstr = tstr & ")";
            end;
            OutString(115,"DblVePerVI",tstr,false);
          end;
          if (RepSpec.flags[7]!=0) then begin
            if (creditcashf) then begin
              OutVal(3,0,v,M4Val,true);
              if (RepSpec.flags[2]==1) then begin
                OutString(7,0,VIr.CurncyCode,false);
              end;  
            end else begin
              if (RepSpec.Media==mtFile) then begin
                OutString(3,0,"",true);
              end;
            end;
            OutVal(4,0,v,M4NegVal,true);
            if (RepSpec.flags[2]==1) then begin
              OutString(8,0,VIr.CurncyCode,false);
            end;  
          end else begin
            OutVal(3,0,v,M4Val,true);
            if (RepSpec.flags[2]==1) then begin
              OutString(7,0,VIr.CurncyCode,false);
            end;
            if (creditcashf) then begin
              OutVal(4,0,v,M4Val,true);
              if (RepSpec.flags[2]==1) then begin
                OutString(8,0,VIr.CurncyCode,false);
              end;
            end else begin
              if (RepSpec.Media==mtFile) then begin
                OutString(4,0,"",true);
              end;
            end;
          end;
          OutVal(2,0,balp,M4Val,true);
          EndFormat;
        end else begin
          if (RepSpec.flags[7]!=0) then begin
            AddVePerFormInvoiceRow(adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocCurncyCode,adoccnt,
                                   RepSpec,VEr,VIr);
          end else begin
            AddVePerFormInvoiceRow(adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocDebVal,adocCurncyCode,adoccnt,
                                   RepSpec,VEr,VIr);
          end;
        end;
        if (creditcashf==false) then begin
          AddCurncyTotals(acur,av2,curcnt,VIr.CurncyCode,-v);
          AddCurncyTotals(acur,av3,curcnt,VIr.CurncyCode,-v);
        end;
        if (VIr.WithHoldingTax<>0) then begin
          taxv = VIr.WithHoldingTax;
          curtaxv = MULRATETOBASE1(VIr.CurncyCode,taxv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff); 
          if (RepSpec.flags[2]==0) then begin
            taxv = curtaxv;
          end else begin
            if (VIr.CurncyCode==VEr.VECurncyCode) then begin
              curtaxv = taxv;
            end;  
          end;
          balp = balp + curtaxv;
          if (reportf) then begin
            StartFormat(15);
            OutDate(0,0,VIr.TransDate,false);
            OutString(65,0,USetStr(4194),false);
            tstr = VIr.SerNr;
            if (nonblank(VIr.InvoiceNr)) then begin
              tstr = tstr & ", (";
              tstr = tstr & VIr.InvoiceNr;
              tstr = tstr & ")";
            end;
            OutString(115,"DblVePerVI",tstr,false);
            OutVal(4,0,taxv,M4Val,true);
            if (RepSpec.flags[2]==1) then begin
              OutString(8,0,VIr.CurncyCode,false);              
            end;     
            OutVal(2,0,balp,M4Val,true);
            EndFormat;
          end;
          SumCredit = SumCredit + curtaxv;
          if (nonblank(VEr.VECurncyCode)) then begin              
            AddCurncyTotals(acur,av2,curcnt,VEr.VECurncyCode,taxv);
            AddCurncyTotals(acur,av3,curcnt,VEr.VECurncyCode,taxv);
          end else begin
            AddCurncyTotals(acur,av2,curcnt,BCb.BaseCur1,curtaxv);
            AddCurncyTotals(acur,av3,curcnt,BCb.BaseCur1,curtaxv);
          end; 
        end;  
      end;
    end;
  end;
LVEPer_PrintInvoice:;  
  return;
end;

global
procedure VEPer_PrintPayment(record RcVc RepSpec,record CUVc VEr,record OPrsVc OPrsr,record BaseCurBlock BCb,
                             var array string acur,var array val av1,var array val av2,var array val av3,var Integer curcnt,
                             var Boolean custout,var val balp,var val totloss,var val totgain,var val SumDebet,var val SumCredit,
                             Boolean reportf,
                             var array Integer adocRwtype,var array LongInt adocInvoiceNr,var array string adocVEInvNo,
                             var array Date adocInvDate,var array Date adocDueDate,var array val adocRVal,var array val adocCredVal,var array val adocDebVal,var array string adocCurncyCode,
                             var Integer adoccnt)
begin
  record OPVc OPr;
  row OPVc OPrw;
  record VIVc VI2r;
  record OPPVc OPPr;
  Boolean testf,testf2;
  Integer oprow,oprwcnt,ovst;
  val v,v2,lossv,cuscurval;
  string 255 tstr,t2,t3,apacc;
  val frrate,torate1,torate2,baserate1,baserate2;

  OPr.SerNr = OPrsr.TransNr;
  if (ReadFirstMain(OPr,1,true)) then begin
    testf = true;
    if (OPr.RejectedFlag!=0) then begin testf = false; end;
    if (OPrsr.TransDate!=OPr.TransDate) then begin testf = false; end;            
    if (OPr.DoneFlag==0) then begin
       if (RepSpec.flags[3]==1) then begin
         if (OPr.OrderedFlag==0) then begin testf = false; end;
       end else begin
         testf = false;
       end;
    end;
    if (testf) then begin
      oprwcnt = MatRowCnt(OPr);
      for (oprow=0;oprow<oprwcnt;oprow=oprow+1) begin
        MatRowGet(OPr,oprow,OPrw);        
        if (OPrw.ovst!=0) then begin goto L11OP; end;
        if ((OPrw.VISerNr==OPrsr.VINr) and (OPrw.VECode==VEr.Code)) then begin

          if (nonblank(RepSpec.FirstAcc)) then begin
            apacc = OPrw.APAcc;
            if (blank(apacc)) then begin
              if (OPrw.VISerNr<0) then begin
                apacc = GetSupplierOnAccountAC(OPrw.VECode);
              end else begin
                VI2r.SerNr = OPrw.VISerNr;
                if (ReadFirstMain(VI2r,1,true)) then begin
                  apacc = VI2r.APAcc;
                end;
              end;
            end;              
            if (apacc!=RepSpec.FirstAcc) then begin
              goto L11OP;
            end;
          end;
          
          if (custout==false) then begin
            VendHead(RepSpec,VEr,balp,RepSpec.flags[2]);
            custout = true;
          end;
          if ((OPrw.stp==kPaymentRowTypeNormal) or (OPrw.stp==kPaymentRowTypeSettlementDiscount)) then begin  
            v = OPrw.PInvVal;
            lossv = 0;
            VI2r.SerNr = OPrw.VISerNr;
            if (RepSpec.flags[2]==0) then begin              
              if (OPrw.VISerNr>0) then begin   
                ReadFirstMain(VI2r,1,true);                 
                cuscurval = MULWITHRATETOBASE1(OPrw.PInvCurncy,OPr.TransDate,v,DefaultCurRoundOff);  
              end else begin
                if (OPrw.PrepayNr>0) then begin
                  cuscurval = FindAPPayHistBookVal(OPr.SerNr,OPr.TransDate,OPrw.PrepayNr,OPrw.PInvCurncy,v);
                end else begin
                  cuscurval = MULWITHRATETOBASE1(OPrw.PInvCurncy,OPr.TransDate,v,DefaultCurRoundOff);  
/*                
                  if ((BCb.BaseCur1==OPrw.BankCurncy) or blank(OPrw.BankCurncy)) then begin
                    cuscurval = OPrw.BankVal; //must show same as on prepayment account, exactly
                  end else begin
                    cuscurval = MULWITHRATETOBASE1(OPrw.PInvCurncy,OPr.TransDate,v,DefaultCurRoundOff);  
                  end;
*/
                end;
              end;
              if (OPrw.B1BankVal!=0) then begin
                cuscurval = OPrw.B1BankVal; 
                lossv = cuscurval;                          
              end;
              v2 = cuscurval;
              if (OPrw.VISerNr!=-1) then begin
                FindAllPrepayLosses(OPrw.PInvCurncy,OPr.TransDate,OPrw.PInvVal,OPrw.PInvOutstand,OPrw.PrepayNr,cuscurval,lossv,VI2r,OPrw.VISerNr,OPrw.BankCurncy,OPrw.BankVal,OPrw.B1BankVal,OPr.SerNr,BCb);
//                if (lossv>balp and balp!=0) then begin
//                  lossv = balp; //this is totaly mad code, why put balance of all payments for ONE payment
//                end;
                v2 = lossv;
              end else begin
                if (OPrw.BankCurncy!=BCb.BaseCur1) then begin
                  if (GetAPPayRate(OPrw.PrepayNr,frrate,torate1,torate2,baserate1,baserate2,OPrw.PInvCurncy,OPr.TransDate)) then begin
                    lossv = MulRateToBase1(OPrw.BankCurncy,OPrw.BankVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
                  end else begin
                    if (OPrw.PrepayNr>0) then begin
                      lossv = MulRateToBase1(OPrw.PInvCurncy,OPrw.PInvVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
                    end else begin
                      lossv = cuscurval;
                    end;
                  end;
                  v2 = lossv;
                end else begin
                  lossv = OPrw.BankVal;
                  if (OPrw.PrepayNr<0) then begin
                    v2 = lossv;
                  end;
                end;
/*??                
                if (OPrw.PrepayNr<0) then begin
                  v2 = lossv;
                end;
*/                
//                FindAllPrepayLosses(OPrw.PInvCurncy,OPr.TransDate,OPrw.PInvVal,OPrw.PInvOutstand,OPrw.PrepayNr,cuscurval,lossv,VI2r,OPrw.VISerNr,OPrw.BankCurncy,OPrw.BankVal,OPrw.B1BankVal,OPr.SerNr,BCb);
              end;
              if (OPrw.VISerNr!=-1) then begin                   
                lossv = cuscurval - lossv;
                if (lossv>0) then begin
                  totloss = totloss + lossv;
                end else begin
                  totgain = totgain - lossv;
                end;
                cuscurval = v2;
              end else begin
                lossv = cuscurval - lossv;
                if (OPrw.PrepayNr>0) then begin
                  if (lossv<0) then begin
                    totloss = totloss + lossv;
                  end else begin
                    totgain = totgain + lossv;
                  end;
                end else begin
                  if (lossv<0) then begin
                    totloss = totloss - lossv;
                  end else begin
                    totgain = totgain - lossv;
                  end;
                end;
                if (OPrw.PrepayNr>0) then begin
                  cuscurval = v2 + lossv;
                end else begin
                  cuscurval = v2;
                end;
              end;
            end else begin 
              cuscurval = v;
              if (ReadFirstMain(VI2r,1,true)) then begin                    
                cuscurval = MULWITHRATETOBASE1(OPrw.PInvCurncy,OPr.TransDate,v,DefaultCurRoundOff);  
              end else begin                    
                if (OPrw.PrepayNr>0) then begin
                  cuscurval = FindAPPayHistBookVal(OPr.SerNr,OPr.TransDate,OPrw.PrepayNr,OPrw.PInvCurncy,v);
                end else begin
                  if (OPrw.B1BankVal!=0) then begin
                    cuscurval = OPrw.B1BankVal; 
                  end else begin
                    cuscurval = MULWITHRATETOBASE1(OPrw.PInvCurncy,OPr.TransDate,v,DefaultCurRoundOff);  
                  end;
//                  if ((BCb.BaseCur1==OPrw.BankCurncy) and (OPrw.BankCurncy<>OPrw.PInvCurncy)) then begin
//                    cuscurval = OPrw.BankVal; //must show same as on prepayment account, and that is not Bank value for on acc 
//                  end;
                end;
              end;
              if (VEr.VECurncyCode==OPrw.PInvCurncy) then begin
                cuscurval = v;
//                        lossv = v;
              end else begin
                v2 = cuscurval;
                if (blank(VEr.VECurncyCode)) then begin
                  if (OPrw.VISerNr!=-1) then begin
                    FindAllPrepayLosses(OPrw.PInvCurncy,OPr.TransDate,OPrw.PInvVal,OPrw.PInvOutstand,OPrw.PrepayNr,cuscurval,lossv,VI2r,OPrw.VISerNr,OPrw.BankCurncy,OPrw.BankVal,OPrw.B1BankVal,OPr.SerNr,BCb);
/*
startformat(15);
 OutString(15,0,"jarek0",false);
 OutString(100,0,lossv,false);
 OutString(200,0,cuscurval,false);
 OutString(300,0,balp,false);
endformat;
*/

/*
this is definatelly bad attempt, how can gain and loss on ONE transaction be influenced by balance of all previous once ? 
                    if (lossv>balp and balp!=0) then begin
                      lossv = balp;
                    end;
*/                    
                    v2 = lossv;
                  end else begin
                    if (GetAPPayRate(OPrw.PrepayNr,frrate,torate1,torate2,baserate1,baserate2,OPrw.PInvCurncy,OPr.TransDate)) then begin
                      lossv = MulRateToBase1(OPrw.BankCurncy,OPrw.BankVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
                    end else begin
                      lossv = MulRateToBase1(OPrw.PInvCurncy,OPrw.PInvVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
                    end;
                    v2 = lossv;
                  end;
                end;
/*                
startformat(15);
 OutString(15,0,"jarek0-1",false);
 OutString(100,0,lossv,false);
 OutString(200,0,cuscurval,false);
 OutString(300,0,balp,false);
endformat;
*/
                if (OPrw.VISerNr!=-1) then begin
                  lossv = cuscurval - lossv;
                  if (lossv>0) then begin
                    totloss = totloss + lossv;
                  end else begin
                    totgain = totgain - lossv;
                  end;
                  if (VEr.VECurncyCode!=OPrw.PInvCurncy) then begin
                    cuscurval = v2;
                  end;
                end else begin
                  if (OPrw.PrepayNr!=-1) then begin
                    lossv = cuscurval - lossv;
                    if (lossv<0) then begin
                      totloss = totloss + lossv;
                    end else begin
                      totgain = totgain + lossv;
                    end;
                  end else begin
                    lossv = BlankVal;
                  end;
                end;
//                        lossv = BlankVal;
              end;
            end;
            if (OPrw.ovst==0) and (OPr.Invalid==0) then begin
/*
startformat(15);
 OutString(15,0,"jarek1",false);
 OutString(100,0,lossv,false);
 OutString(200,0,cuscurval,false);
 OutString(300,0,balp,false);
endformat;
*/
              balp = balp - cuscurval;                      
              SumDebet = SumDebet + cuscurval;
/*
startformat(15);
 OutString(15,0,"jarek2",false);
 OutString(100,0,lossv,false);
 OutString(200,0,cuscurval,false);
 OutString(300,0,balp,false);
endformat;
*/

              if (OPrw.VISerNr!=-1) then begin
              end else begin
                if (OPrw.PrepayNr<0) then begin
                  balp = balp - lossv;
                end else begin
                  balp = balp + lossv;
                end;
              end;
            end;
            t3 = USetStr(4186);
            testf2 = true;
            tstr = OPr.SerNr;
            if (OPrw.VISerNr<>-1) then begin
              t2 = OPrw.VISerNr;
              tstr = tstr & ", (";
              tstr = tstr & t2;
              tstr = tstr & ")";
            end else begin
              t2 = USetStr(4193);
              if (nonblank(t2)) then begin
//*                        t3 = t3 & t2;
                t3 = t2;
              end;  
              if (OPrw.PrepayNr>-1) then begin
                t2 = OPrw.PrepayNr;
                tstr = tstr & ", (";
                tstr = tstr & t2;
                tstr = tstr & ")";
                OPPr.SerNr = OPrw.PrepayNr;
              end;
            end;


            if ((RepSpec.flags[3]==1) and (OPr.OrderedFlag==1) and (OPr.DoneFlag!=1)) then begin
              t3 = USetStr(1416);
            end;
            if (testf2==true) then begin
              if (reportf) then begin
                StartFormat(15);
                OutDateOvst(0,0,OPr.TransDate,false,OPr.Invalid);
                OutStringOvst(65,0,t3,false,OPr.Invalid);
                OutStringOvst(115,"DblVePerOP",tstr,false,OPr.Invalid);
                ovst = OPrw.ovst;
                if (ovst==0) then begin
                  ovst = OPr.Invalid;
                end;
                switch (RepSpec.Media) begin
                  case mtFile:
                    goto LVEPer_PrintPaymenttoFile;
                  case mtExcel:
LVEPer_PrintPaymenttoFile:;    
                    if (RepSpec.flags[2]==1) then begin
                      OutValOvstBiDi(3,0,v,M4Val,true,ovst,3);
                      OutString(115,0,"",false);
                      OutStringOvst(7,0,OPrw.PInvCurncy,false,OPr.Invalid);                  
                    end else begin
                      OutValOvstBiDi(3,0,cuscurval,M4Val,true,ovst,3);
                      OutString(4,0,"",false);
                      OutVal(420,0,lossv,M4Val,true);
                    end;
                  otherwise
                    if (RepSpec.flags[2]==1) then begin
                      OutValOvstBiDi(3,0,v,M4Val,true,ovst,3);
                      OutStringOvst(7,0,OPrw.PInvCurncy,false,OPr.Invalid);                  
                    end else begin
                      OutValOvstBiDi(3,0,cuscurval,M4Val,true,ovst,3);
                      OutVal(420,0,lossv,M4Val,true);
                    end;
                end;
                OutValOvstBiDi(2,0,balp,M4Val,true,OPr.Invalid,2);
                EndFormat;
              end else begin
                AddVePerFormPaymentRow(adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocDebVal,adocCurncyCode,adoccnt,
                                       RepSpec,VEr,OPr,OPrw);
              end;
              if (OPr.Invalid==0) then begin
              if ((RepSpec.flags[2]==0) or (RepSpec.flags[2]==1)) then begin
                if (blank(VEr.VECurncyCode)) then begin
                  AddCurncyTotals(acur,av2,curcnt,BCb.BaseCur1,-cuscurval);
                  AddCurncyTotals(acur,av3,curcnt,BCb.BaseCur1,-cuscurval);
//                  AddCurncyTotals(acur,av2,curcnt,BCb.BaseCur1,lossv);
//                  AddCurncyTotals(acur,av3,curcnt,BCb.BaseCur1,lossv);
                end else begin  
                  AddCurncyTotals(acur,av2,curcnt,OPrw.PInvCurncy,-v);
                  AddCurncyTotals(acur,av3,curcnt,OPrw.PInvCurncy,-v);
                end;
              end;
              end;
            end;
          end;
        end;
L11OP:;
      end;
    end;
  end;
  RETURN;        
END;

global
procedure VEPer_PrintTransaction(record RcVc RepSpec,record CUVc VEr,record OPrsVc OPrsr,val StartBal,
                             var array string acur,var array val av1,var array val av2,var array val av3,var Integer curcnt,
                             var Boolean custout,var val balp,var val totloss,var val totgain,var val SumDebet,var val SumCredit,
                             record BaseCurBlock BCb,Boolean reportf,
                             var array Integer adocRwtype,var array LongInt adocInvoiceNr,var array string adocVEInvNo,
                             var array Date adocInvDate,var array Date adocDueDate,var array val adocRVal,var array val adocCredVal,var array val adocDebVal,var array string adocCurncyCode,
                             var Integer adoccnt)
BEGIN
  record TRVc TRr;
  row TRVc TRrw;
  record VIVc VI2r;
  Integer t,trwcnt;
  Boolean L11f;
  val v,cuscurval,lossv;
  Integer typeofcur,oldstyle;
  string 255 tstr,t2,t3;
  
  TRr.Number = OPrsr.TransNr;
  TRr.IntYc = GetIntYc(OPrsr.TransDate);
  if (ReadFirstMain(TRr,2,true)) then begin
    trwcnt = MatRowCnt(TRr);
    for (t=0;t<trwcnt;t=t+1) begin
       MatRowGet(TRr,t,TRrw);
       if ((TRrw.Typ==2) and (TRrw.SerNr<>-1)) then begin
          if (TRrw.DebVal!=0) then begin
             L11f = false;
             if (OPrsr.TransDate<>TRr.TransDate) then begin L11f = true; end;
             if (L11f==false) then begin
               if ((TRrw.SerNr==OPrsr.VINr) and (TRrw.CompCode==VEr.Code)) then begin
                 if (custout==false) then begin
                    VendHead(RepSpec,VEr,balp,RepSpec.flags[2]);
                    custout = true;
                 end;
                 v = TRrw.DebVal;
                 cuscurval = TRrw.DebVal;
                 if (RepSpec.flags[0]==0) then begin
                   VI2r.SerNr = TRrw.SerNr;
                   if (ReadFirstMain(VI2r,1,true)) then begin
                      if (TRrw.CurDebVal>0) then begin
                        lossv = MULRATETOBASE1(VI2r.CurncyCode,TRrw.CurDebVal,VI2r.FrRate,VI2r.ToRateB1,VI2r.ToRateB2,VI2r.BaseRate1,VI2r.BaseRate2,DefaultCurRoundOff); 
                      end else begin
                        lossv = v;
                      end;
                      lossv = cuscurval - lossv;
                      if (lossv>0) then begin
                        totloss = totloss + lossv;
                      end else begin
                        totgain = totgain - lossv;
                      end;                         
                   end;                       
                 end;  
                 if (TRrw.CurDebVal<>0) then begin
                   v = TRrw.CurDebVal;
                   cuscurval = TRrw.DebVal;
//                         cuscurval = MULRATETOBASE1(TRrw.Curncy,TRrw.DebVal,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
                   if (RepSpec.flags[2]==0) then begin
                     v = cuscurval;
                   end else begin
                     if (TRrw.Curncy==VEr.VECurncyCode) then begin
                       cuscurval = v;
                     end;  
                   end;
                 end else begin
                   typeofcur = TypeOfCurncy(TRrw.Curncy,oldstyle);   
                   if (RepSpec.flags[2]==1) then begin
                     if (typeofcur==2) then begin
                       v = TRrw.DebVal2;
                       if (TRrw.Curncy==VEr.VECurncyCode) then begin
                         cuscurval = TRrw.DebVal2;
                       end;  
                     end;
                   end;
                 end;
                 balp = balp - cuscurval;
                 SumDebet = SumDebet + cuscurval;
                 if (reportf)  then begin
                   t3 = USetStr(4186);
                   TRExtYc(TRr,tstr);
                   t2 = TRrw.SerNr;
                   tstr = tstr & ", (";
                   tstr = tstr & t2;
                   tstr = tstr & ")";
                   StartFormat(15);
                   OutDate(0,0,TRr.TransDate,false);
                   OutString(65,0,t3,false);
                   OutString(115,"DblTrans",tstr,false);
                   if (RepSpec.flags[2]==1) then begin
                     OutVal(3,0,v,M4Val,true);
                   end else begin
                     OutVal(3,0,cuscurval,M4Val,true);
                   end;
                   if (RepSpec.Media==mtFile) then begin
                     OutString(4,0,"",true);
                   end;
                   if (RepSpec.flags[2]==1) then begin
                     OutString(7,0,TRrw.Curncy,false);
                   end;  
                   if ((RepSpec.flags[2]==0) and (lossv!=0)) then begin
                     OutVal(4,0,lossv,M4Val,true);
                   end;                         
                   OutVal(2,0,balp,M4Val,true);
                   EndFormat;
              end else begin
                AddVePerFormTransactionRow(adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt,
                                       RepSpec,VEr,TRr,TRrw,v,TRrw.SerNr);
              end;
//                       AddCurncyTotals(acur,av1,curcnt,TRrw.Curncy,StartBal);

                 if (nonblank(VEr.VECurncyCode)) then begin
                   AddCurncyTotals(acur,av2,curcnt,VEr.VECurncyCode,-v);
                   AddCurncyTotals(acur,av3,curcnt,VEr.VECurncyCode,-v);
                 end else begin
                   AddCurncyTotals(acur,av2,curcnt,BCb.BaseCur1,-cuscurval);
                   AddCurncyTotals(acur,av3,curcnt,BCb.BaseCur1,-cuscurval);

                   AddCurncyTotals(acur,av2,curcnt,BCb.BaseCur1,lossv);
                   AddCurncyTotals(acur,av3,curcnt,BCb.BaseCur1,lossv);
                 end;            

//                 AddCurncyTotals(acur,av2,curcnt,TRrw.Curncy,v);
//                 AddCurncyTotals(acur,av3,curcnt,TRrw.Curncy,v);
               end;  
             end;
          end;  
          if (TRrw.CredVal<>0) then begin
             L11f = false;
             if (OPrsr.TransDate<>TRr.TransDate) then begin L11f = true; end;
             if (L11f==false) then begin
               if ((TRrw.SerNr==OPrsr.VINr) and (TRrw.CompCode==VEr.Code)) then begin
                 if (custout==false) then begin
                    VendHead(RepSpec,VEr,balp,RepSpec.flags[2]);
                    custout = true;
                 end;
                 v = TRrw.CredVal;
                 cuscurval = TRrw.CredVal;
                 if (TRrw.CurCredVal<>0) then begin
                   v = TRrw.CurCredVal;
                   VI2r.SerNr = TRrw.SerNr;
                   if (ReadFirstMain(VI2r,1,true)) then begin
                     cuscurval = MULRATETOBASE1(TRrw.Curncy,v,VI2r.FrRate,VI2r.ToRateB1,VI2r.ToRateB2,VI2r.BaseRate1,VI2r.BaseRate2,DefaultCurRoundOff); 
                   end else begin
                     cuscurval = MULRATETOBASE1(TRrw.Curncy,v,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff); 
                   end;
                   if (RepSpec.flags[2]==0) then begin
                     v = cuscurval;
                   end else begin
                     if (TRrw.Curncy==VEr.VECurncyCode) then begin
                       cuscurval = v;
                     end;  
                   end;
                 end else begin
                   typeofcur = TypeOfCurncy(TRrw.Curncy,oldstyle);   
                   if (RepSpec.flags[2]==1) then begin
                     if (typeofcur==2) then begin
                       v = TRrw.CredVal2;
                       if (TRrw.Curncy==VEr.VECurncyCode) then begin
                         cuscurval = TRrw.CredVal2;
                       end;  
                     end;
                   end;
                 end;
                 balp = cuscurval + balp;
                 SumCredit = SumCredit + cuscurval;
                 if (reportf)  then begin
                   t3 = USetStr(4185);
                   TRExtYc(TRr,tstr);
                   if (TRrw.SerNr<>-1) then begin
                     t2 = TRrw.SerNr;
                     tstr = tstr & ", (";
                     tstr = tstr & t2;
                     tstr = tstr & ")";
                   end else begin
                     t2 = USetStr(4186);
                     if (nonblank(t2)) then begin
                       t3 = t3 & t2;
                     end;    
                   end;
                   StartFormat(15);
                   OutDate(0,0,TRr.TransDate,false);
                   OutString(65,0,t3,false);
                   OutString(115,"DblTrans",tstr,false);
                   OutString(3,0,"",true);
                   OutVal(4,0,v,M4Val,true);
                   if (RepSpec.flags[2]==1) then begin
                     OutString(8,0,TRrw.Curncy,false);                       
                   end;  
                   OutVal(2,0,balp,M4Val,true);
                   EndFormat;
                 end else begin
                   AddVePerFormTransactionRow(adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt,
                                       RepSpec,VEr,TRr,TRrw,v,TRrw.SerNr);
                 end;
                 if (nonblank(VEr.VECurncyCode)) then begin              
                   AddCurncyTotals(acur,av2,curcnt,TRrw.Curncy,v);
                   AddCurncyTotals(acur,av3,curcnt,TRrw.Curncy,v);
                 end else begin
                   AddCurncyTotals(acur,av2,curcnt,BCb.BaseCur1,cuscurval);
                   AddCurncyTotals(acur,av3,curcnt,BCb.BaseCur1,cuscurval);
                 end;
               end;  
             end;  //L11f
          end;
        end;
       if ((TRrw.Typ==2) and (TRrw.SerNr==-1) and (OPrsr.VINr==-1)) then begin
          if (TRrw.DebVal<>0) then begin
             L11f = false;
             if (OPrsr.TransDate<>TRr.TransDate) then begin L11f = true; end;
             if (L11f==false) then begin
               if (TRrw.CompCode==VEr.Code) then begin
                 if (custout==false) then begin
                    VendHead(RepSpec,VEr,balp,RepSpec.flags[2]);
                    custout = true;
                 end;
                 v = TRrw.DebVal;
                 cuscurval = TRrw.DebVal;
                 if (RepSpec.flags[0]==0) then begin
                    if (TRrw.CurDebVal>0) then begin
                      lossv = MULRATETOBASE1(TRrw.Curncy,TRrw.CurDebVal,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff); 
                    end else begin
                      lossv = v;
                    end;
                    lossv = cuscurval - lossv;
                    if (lossv>0) then begin
                      totloss = totloss + lossv;
                    end else begin
                      totgain = totgain - lossv;
                    end;                         
                 end;  
                 if (nonblank(TRrw.CurDebVal)) then begin
                   v = TRrw.CurDebVal;
                   if (RepSpec.flags[2]==0) then begin
                     v = cuscurval;
                   end else begin
                     if (TRrw.Curncy==VEr.VECurncyCode) then begin
                       cuscurval = v;
                     end;  
                   end;
                 end else begin
                   typeofcur = TypeOfCurncy(TRrw.Curncy,oldstyle);   
                   if (RepSpec.flags[2]==1) then begin
                     if (typeofcur==2) then begin
                       v = TRrw.DebVal2;
                       if (TRrw.Curncy==VEr.VECurncyCode) then begin
                         cuscurval = TRrw.DebVal2;
                       end;  
                     end;
                   end;
                 end;
                 balp = balp - cuscurval;
                 SumDebet = SumDebet + cuscurval;
                 if (reportf)  then begin
                   t3 = USetStr(4193);
                   TRExtYc(TRr,tstr);
                   StartFormat(15);
                   OutDate(0,0,TRr.TransDate,false);
                   OutString(65,0,t3,false);
                   OutString(115,"DblTrans",tstr,false);
                   OutVal(3,0,v,M4Val,true);
                   if (RepSpec.Media==mtFile) then begin
                     OutString(4,0,"",true);
                   end;
                   if (RepSpec.flags[2]==1) then begin
                     OutString(7,0,TRrw.Curncy,false);
                   end else begin
                     OutVal(420,0,lossv,M4Val,true);
                   end;                
                   OutVal(2,0,balp,M4Val,true);
                   EndFormat;
                 end;
                 AddCurncyTotals(acur,av2,curcnt,TRrw.Curncy,-v);
                 AddCurncyTotals(acur,av3,curcnt,TRrw.Curncy,-v);
               end;  
             end;
          end;  
          if (TRrw.CredVal<>0) then begin
             L11f = false;
             if (OPrsr.TransDate<>TRr.TransDate) then begin L11f = true; end;
             if (L11f==false) then begin
               if (TRrw.CompCode==VEr.Code) then begin
                 if (custout==false) then begin
                    VendHead(RepSpec,VEr,balp,RepSpec.flags[2]);
                    custout = true;
                 end;
                 v = TRrw.CredVal;
                 cuscurval = TRrw.CredVal;
                 if (nonblank(TRrw.CurCredVal)) then begin
                   v = TRrw.CurCredVal;
//                   cuscurval = MULRATETOBASE1(TRrw.Curncy,v,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff); 
//we decided on NL tarsancgtion about amount
                   if (RepSpec.flags[2]==0) then begin
                     v = cuscurval;
                   end else begin
                     if (TRrw.Curncy==VEr.VECurncyCode) then begin
                       cuscurval = v;
                     end;  
                   end;
                 end else begin
                   typeofcur = TypeOfCurncy(TRrw.Curncy,oldstyle);   
                   if (RepSpec.flags[2]==1) then begin
                     if (typeofcur==2) then begin
                       v = TRrw.CredVal2;
                       if (TRrw.Curncy==VEr.VECurncyCode) then begin
                         cuscurval = TRrw.CredVal2;
                       end;  
                     end;
                   end;
                 end;
                 balp = balp + cuscurval;
                 SumCredit = SumCredit + cuscurval;
                 if (reportf)  then begin
                   t3 = USetStr(4193);
                   TRExtYc(TRr,tstr);
                   StartFormat(15);
                   OutDate(0,0,TRr.TransDate,false);
                   OutString(65,0,t3,false);
                   OutString(115,"DblTrans",tstr,false);
                   OutString(3,0,"",true);
                   OutVal(4,0,v,M4Val,true);
                   if (RepSpec.flags[2]==1) then begin
                     OutString(8,0,TRrw.Curncy,false);                       
                   end;  
                   OutVal(2,0,balp,M4Val,true);
                   EndFormat;
                 end;
                 AddCurncyTotals(acur,av2,curcnt,TRrw.Curncy,v);
                 AddCurncyTotals(acur,av3,curcnt,TRrw.Curncy,v);
               end;  
             end;  //L11f
          end;
       end;
    end;
  end;     
  RETURN;        
END;

global
procedure VEPer_PrintPurgeTransaction(record RcVc RepSpec,record CUVc VEr,record OPrsVc OPrsr,val StartBal,
                             var array string acur,var array val av1,var array val av2,var array val av3,var Integer curcnt,
                             var Boolean custout,var val balp,var val totloss,var val totgain,var val SumDebet,var val SumCredit,
                             record BaseCurBlock BCb,Boolean reportf,
                             var array Integer adocRwtype,var array LongInt adocInvoiceNr,var array string adocVEInvNo,
                             var array Date adocInvDate,var array Date adocDueDate,var array val adocRVal,var array val adocCredVal,var array val adocDebVal,var array string adocCurncyCode,
                             var Integer adoccnt)
BEGIN
  record PurgeTRVc PurgeTRr;
  record VIVc VI2r;
  Integer t,trwcnt;
  Boolean L11f;
  val v,cuscurval,lossv;
  Integer typeofcur,oldstyle;
  string 255 tstr,t2,t3;
  
  PurgeTRr.Number = OPrsr.TransNr;
  PurgeTRr.IntYc = GetIntYc(OPrsr.TransDate);
  PurgeTRr.TransRow = OPrsr.TransRow;
  if (ReadFirstMain(PurgeTRr,3,true)) then begin
     if ((PurgeTRr.Typ==2) and (PurgeTRr.SerNr<>-1)) then begin
        if (PurgeTRr.DebVal!=0) then begin
           L11f = false;
           if (OPrsr.TransDate<>PurgeTRr.TransDate) then begin L11f = true; end;
           if (L11f==false) then begin
             if ((PurgeTRr.SerNr==OPrsr.VINr) and (PurgeTRr.CompCode==VEr.Code)) then begin
               if (custout==false) then begin
                  VendHead(RepSpec,VEr,balp,RepSpec.flags[2]);
                  custout = true;
               end;
               v = PurgeTRr.DebVal;
               cuscurval = PurgeTRr.DebVal;
               if (RepSpec.flags[0]==0) then begin
                 VI2r.SerNr = PurgeTRr.SerNr;
                 if (ReadFirstMain(VI2r,1,true)) then begin
                    if (PurgeTRr.CurDebVal>0) then begin
                      lossv = MULRATETOBASE1(VI2r.CurncyCode,PurgeTRr.CurDebVal,VI2r.FrRate,VI2r.ToRateB1,VI2r.ToRateB2,VI2r.BaseRate1,VI2r.BaseRate2,DefaultCurRoundOff); 
                    end else begin
                      lossv = v;
                    end;
                    lossv = cuscurval - lossv;
                    if (lossv>0) then begin
                      totloss = totloss + lossv;
                    end else begin
                      totgain = totgain - lossv;
                    end;                         
                 end;                       
               end;  
               if (PurgeTRr.CurDebVal<>0) then begin
                 v = PurgeTRr.CurDebVal;
                 cuscurval = PurgeTRr.DebVal;
                 if (RepSpec.flags[2]==0) then begin
                   v = cuscurval;
                 end else begin
                   if (PurgeTRr.Curncy==VEr.VECurncyCode) then begin
                     cuscurval = v;
                   end;  
                 end;
               end else begin
                 typeofcur = TypeOfCurncy(PurgeTRr.Curncy,oldstyle);   
                 if (RepSpec.flags[2]==1) then begin
                   if (typeofcur==2) then begin
                     v = PurgeTRr.DebVal2;
                     if (PurgeTRr.Curncy==VEr.VECurncyCode) then begin
                       cuscurval = PurgeTRr.DebVal2;
                     end;  
                   end;
                 end;
               end;
               balp = balp - cuscurval;
               SumDebet = SumDebet + cuscurval;
               if (reportf)  then begin
                 t3 = USetStr(4186);
                 PurgeTRExtYc(PurgeTRr,tstr);
                 t2 = PurgeTRr.SerNr;
                 tstr = tstr & ", (";
                 tstr = tstr & t2;
                 tstr = tstr & ")";
                 StartFormat(15);
                 OutDate(0,0,PurgeTRr.TransDate,false);
                 OutString(65,0,t3,false);
                 OutString(115,"DblTrans",tstr,false);
                 if (RepSpec.flags[2]==1) then begin
                   OutVal(3,0,v,M4Val,true);
                 end else begin
                   OutVal(3,0,cuscurval,M4Val,true);
                 end;
                 if (RepSpec.Media==mtFile) then begin
                   OutString(4,0,"",true);
                 end;
                 if (RepSpec.flags[2]==1) then begin
                   OutString(7,0,PurgeTRr.Curncy,false);
                 end;  
                 if ((RepSpec.flags[2]==0) and (lossv!=0)) then begin
                   OutVal(4,0,lossv,M4Val,true);
                 end;                         
                 OutVal(2,0,balp,M4Val,true);
                 EndFormat;
            end else begin
//*                AddVePerFormTransactionRow(adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCurncyCode,adoccnt,
//*                                       RepSpec,VEr,PurgeTRr,v);
            end;
               if (nonblank(VEr.VECurncyCode)) then begin
                 AddCurncyTotals(acur,av2,curcnt,VEr.VECurncyCode,-v);
                 AddCurncyTotals(acur,av3,curcnt,VEr.VECurncyCode,-v);
               end else begin
                 AddCurncyTotals(acur,av2,curcnt,BCb.BaseCur1,-cuscurval);
                 AddCurncyTotals(acur,av3,curcnt,BCb.BaseCur1,-cuscurval);

                 AddCurncyTotals(acur,av2,curcnt,BCb.BaseCur1,lossv);
                 AddCurncyTotals(acur,av3,curcnt,BCb.BaseCur1,lossv);
               end;            

//                 AddCurncyTotals(acur,av2,curcnt,PurgeTRr.Curncy,v);
//                 AddCurncyTotals(acur,av3,curcnt,PurgeTRr.Curncy,v);
             end;  
           end;
        end;  
        if (PurgeTRr.CredVal<>0) then begin
           L11f = false;
           if (OPrsr.TransDate<>PurgeTRr.TransDate) then begin L11f = true; end;
           if (L11f==false) then begin
             if ((PurgeTRr.SerNr==OPrsr.VINr) and (PurgeTRr.CompCode==VEr.Code)) then begin
               if (custout==false) then begin
                  VendHead(RepSpec,VEr,balp,RepSpec.flags[2]);
                  custout = true;
               end;
               v = PurgeTRr.CredVal;
               cuscurval = PurgeTRr.CredVal;
               if (PurgeTRr.CurCredVal<>0) then begin
                 v = PurgeTRr.CurCredVal;
                 VI2r.SerNr = PurgeTRr.SerNr;
                 if (ReadFirstMain(VI2r,1,true)) then begin
                   cuscurval = MULRATETOBASE1(PurgeTRr.Curncy,v,VI2r.FrRate,VI2r.ToRateB1,VI2r.ToRateB2,VI2r.BaseRate1,VI2r.BaseRate2,DefaultCurRoundOff); 
                 end else begin
                   cuscurval = MULRATETOBASE1(PurgeTRr.Curncy,v,PurgeTRr.FrRate,PurgeTRr.ToRateB1,PurgeTRr.ToRateB2,PurgeTRr.BaseRate1,PurgeTRr.BaseRate2,DefaultCurRoundOff); 
                 end;
                 if (RepSpec.flags[2]==0) then begin
                   v = cuscurval;
                 end else begin
                   if (PurgeTRr.Curncy==VEr.VECurncyCode) then begin
                     cuscurval = v;
                   end;  
                 end;
               end else begin
                 typeofcur = TypeOfCurncy(PurgeTRr.Curncy,oldstyle);   
                 if (RepSpec.flags[2]==1) then begin
                   if (typeofcur==2) then begin
                     v = PurgeTRr.CredVal2;
                     if (PurgeTRr.Curncy==VEr.VECurncyCode) then begin
                       cuscurval = PurgeTRr.CredVal2;
                     end;  
                   end;
                 end;
               end;
               balp = cuscurval + balp;
               SumCredit = SumCredit + cuscurval;
               if (reportf)  then begin
                 t3 = USetStr(4185);
                 PurgeTRExtYc(PurgeTRr,tstr);
                 if (PurgeTRr.SerNr<>-1) then begin
                   t2 = PurgeTRr.SerNr;
                   tstr = tstr & ", (";
                   tstr = tstr & t2;
                   tstr = tstr & ")";
                 end else begin
                   t2 = USetStr(4186);
                   if (nonblank(t2)) then begin
                     t3 = t3 & t2;
                   end;    
                 end;
                 StartFormat(15);
                 OutDate(0,0,PurgeTRr.TransDate,false);
                 OutString(65,0,t3,false);
                 OutString(115,"DblTrans",tstr,false);
                 OutString(3,0,"",true);
                 OutVal(4,0,v,M4Val,true);
                 if (RepSpec.flags[2]==1) then begin
                   OutString(8,0,PurgeTRr.Curncy,false);                       
                 end;  
                 OutVal(2,0,balp,M4Val,true);
                 EndFormat;
               end;
               if (nonblank(VEr.VECurncyCode)) then begin              
                 AddCurncyTotals(acur,av2,curcnt,PurgeTRr.Curncy,v);
                 AddCurncyTotals(acur,av3,curcnt,PurgeTRr.Curncy,v);
               end else begin
                 AddCurncyTotals(acur,av2,curcnt,BCb.BaseCur1,cuscurval);
                 AddCurncyTotals(acur,av3,curcnt,BCb.BaseCur1,cuscurval);
               end;
             end;  
           end;  //L11f
        end;
      end;
     if ((PurgeTRr.Typ==2) and (PurgeTRr.SerNr==-1) and (OPrsr.VINr==-1)) then begin
        if (PurgeTRr.DebVal<>0) then begin
           L11f = false;
           if (OPrsr.TransDate<>PurgeTRr.TransDate) then begin L11f = true; end;
           if (L11f==false) then begin
             if (PurgeTRr.CompCode==VEr.Code) then begin
               if (custout==false) then begin
                  VendHead(RepSpec,VEr,balp,RepSpec.flags[2]);
                  custout = true;
               end;
               v = PurgeTRr.DebVal;
               cuscurval = PurgeTRr.DebVal;
               if (RepSpec.flags[0]==0) then begin
                  if (PurgeTRr.CurDebVal>0) then begin
                    lossv = MULRATETOBASE1(PurgeTRr.Curncy,PurgeTRr.CurDebVal,PurgeTRr.FrRate,PurgeTRr.ToRateB1,PurgeTRr.ToRateB2,PurgeTRr.BaseRate1,PurgeTRr.BaseRate2,DefaultCurRoundOff); 
                  end else begin
                    lossv = v;
                  end;
                  lossv = cuscurval - lossv;
                  if (lossv>0) then begin
                    totloss = totloss + lossv;
                  end else begin
                    totgain = totgain - lossv;
                  end;                         
               end;  
               if (PurgeTRr.CurDebVal<>0) then begin
                 v = PurgeTRr.CurDebVal;
                 if (RepSpec.flags[2]==0) then begin
                   v = cuscurval;
                 end else begin
                   if (PurgeTRr.Curncy==VEr.VECurncyCode) then begin
                     cuscurval = v;
                   end else begin
                     v = cuscurval;
                   end;  
                 end;
               end else begin
                 typeofcur = TypeOfCurncy(PurgeTRr.Curncy,oldstyle);   
                 if (RepSpec.flags[2]==1) then begin
                   if (typeofcur==2) then begin
                     v = PurgeTRr.DebVal2;
                     if (PurgeTRr.Curncy==VEr.VECurncyCode) then begin
                       cuscurval = PurgeTRr.DebVal2;
                     end;  
                   end;
                 end;
               end;
               balp = balp - cuscurval;
               SumDebet = SumDebet + cuscurval;
               if (reportf)  then begin
                 t3 = USetStr(4193);
                 PurgeTRExtYc(PurgeTRr,tstr);
                 StartFormat(15);
                 OutDate(0,0,PurgeTRr.TransDate,false);
                 OutString(65,0,t3,false);
                 OutString(115,"DblTrans",tstr,false);
                 OutVal(3,0,v,M4Val,true);
                 if (RepSpec.Media==mtFile) then begin
                   OutString(4,0,"",true);
                 end;
                 if (RepSpec.flags[2]==1) then begin
                   OutString(7,0,PurgeTRr.Curncy,false);
                 end else begin
                   OutVal(420,0,lossv,M4Val,true);
                 end;                
                 OutVal(2,0,balp,M4Val,true);
                 EndFormat;
               end;
               AddCurncyTotals(acur,av2,curcnt,PurgeTRr.Curncy,-v);
               AddCurncyTotals(acur,av3,curcnt,PurgeTRr.Curncy,-v);
             end;  
           end;
        end;  
        if (PurgeTRr.CredVal<>0) then begin
           L11f = false;
           if (OPrsr.TransDate<>PurgeTRr.TransDate) then begin L11f = true; end;
           if (L11f==false) then begin
             if (PurgeTRr.CompCode==VEr.Code) then begin
               if (custout==false) then begin
                  VendHead(RepSpec,VEr,balp,RepSpec.flags[2]);
                  custout = true;
               end;
               v = PurgeTRr.CredVal;
               cuscurval = PurgeTRr.CredVal;
               if (PurgeTRr.CurCredVal<>0) then begin
                 v = PurgeTRr.CurCredVal;
                 cuscurval = MULRATETOBASE1(PurgeTRr.Curncy,v,PurgeTRr.FrRate,PurgeTRr.ToRateB1,PurgeTRr.ToRateB2,PurgeTRr.BaseRate1,PurgeTRr.BaseRate2,DefaultCurRoundOff); 
                 if (RepSpec.flags[2]==0) then begin
                   v = cuscurval;
                 end else begin
                   if (PurgeTRr.Curncy==VEr.VECurncyCode) then begin
                     cuscurval = v;
                   end else begin
                     v = cuscurval;
                   end;  
                 end;
               end else begin
                 typeofcur = TypeOfCurncy(PurgeTRr.Curncy,oldstyle);   
                 if (RepSpec.flags[2]==1) then begin
                   if (typeofcur==2) then begin
                     v = PurgeTRr.CredVal2;
                     if (PurgeTRr.Curncy==VEr.VECurncyCode) then begin
                       cuscurval = PurgeTRr.CredVal2;
                     end;  
                   end;
                 end;
               end;
               balp = balp + cuscurval;
               SumCredit = SumCredit + cuscurval;
               if (reportf)  then begin
                 t3 = USetStr(4193);
                 PurgeTRExtYc(PurgeTRr,tstr);
                 StartFormat(15);
                 OutDate(0,0,PurgeTRr.TransDate,false);
                 OutString(65,0,t3,false);
                 OutString(115,"DblTrans",tstr,false);
                 OutString(3,0,"",true);
                 OutVal(4,0,v,M4Val,true);
                 if (RepSpec.flags[2]==1) then begin
                   OutString(8,0,PurgeTRr.Curncy,false);                       
                 end;  
                 OutVal(2,0,balp,M4Val,true);
                 EndFormat;
               end;
               AddCurncyTotals(acur,av2,curcnt,PurgeTRr.Curncy,v);
               AddCurncyTotals(acur,av3,curcnt,PurgeTRr.Curncy,v);
             end;  
           end;  //L11f
        end;
     end;
  end;     
  RETURN;        
END;

global
procedure VEPer_PrintDataForInvoice(record RcVc RepSpec,record CUVc VEr,record BaseCurBlock BCb,LongInt VISerNr,
                             val StartBal,var Boolean custout,
                             var array string acur,var array val av1,var array val av2,var array val av3,var Integer curcnt,
                             var val balp,var val totgain,var val totloss,var val SumDebet,var val SumCredit,Boolean reportf,
                             var array Integer adocRwtype,var array LongInt adocInvoiceNr,var array string adocVEInvNo,
                             var array Date adocInvDate,var array Date adocDueDate,var array val adocRVal,var array val adocCredVal,var array val adocDebVal,var array string adocCurncyCode,
                             var Integer adoccnt)
BEGIN
  record OPrsVc OPrsr;
  Boolean found,testf;
  Integer cnt;
  
  OPrsr.VINr = VISerNr;
  OPrsr.TransDate = RepSpec.sStartDate;
  OPrsr.TransType = kOPrsTransTypePayment;
  found = true;  
  while (LoopKey("VIKeyTransDate",OPrsr,3,found)) begin
    if (found) then begin
      if (OPrsr.VINr!=VISerNr) then begin found = false; end;
      if (OPrsr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    end;    
    if (found) then begin
      testf = true;
      if (OPrsr.VINr==OPrsr.TransNr) then begin
        if (OPrsr.TransType<kOPrsTransTypePayment) then begin testf = false; end;
      end;
      if (testf) then begin
        cnt = cnt + 1;        
        switch (OPrsr.TransType) begin
          case kOPrsTransTypeInvoice:
            VEPer_PrintInvoice(RepSpec,VEr,BCb,OPrsr.TransNr,acur,av1,av2,av3,curcnt,balp,totgain,totloss,SumDebet,SumCredit,reportf,
                               adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);
          case kOPrsTransTypePayment:
            VEPer_PrintPayment(RepSpec,VEr,OPrsr,BCb,acur,av1,av2,av3,curcnt,custout,balp,totloss,totgain,SumDebet,SumCredit,reportf,
                               adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);            
          case kOPrsTransTypePurgeNLTransaction:
            VEPer_PrintPurgeTransaction(RepSpec,VEr,OPrsr,StartBal,acur,av1,av2,av3,curcnt,custout,balp,totloss,totgain,SumDebet,SumCredit,BCb,reportf,
                                 adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);                        
          case kOPrsTransTypeNLTransaction:
            VEPer_PrintTransaction(RepSpec,VEr,OPrsr,StartBal,acur,av1,av2,av3,curcnt,custout,balp,totloss,totgain,SumDebet,SumCredit,BCb,reportf,
                                 adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);                        
          case kOPrsTransTypeCashOut:
            VendListTransCLOut(RepSpec,OPrsr,VEr,balp,totloss,totgain,SumDebet,BCb,curcnt,acur,av2,av3,reportf,
                           adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);        
          case kOPrsTransTypeCashIn:
            VendListTransCLIn(RepSpec,OPrsr,VEr,balp,totloss,totgain,SumCredit,BCb,curcnt,acur,av2,av3,reportf,
                           adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);        
          case kOPrsTransTypeReverseSupplierPrepayment:
            VendListTransCLInRevPrepVE(RepSpec,OPrsr,VEr,balp,SumCredit,BCb,curcnt,acur,av2,av3,reportf,
                           adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);        
        end;
      end;
    end;
  end;
  if (cnt>0) then begin
    Gray_Divider(0,1);
  end;
  RETURN;        
END;
