external function Boolean TestArtCodeMatch(string,string);
external function val FindVAT(string,val,Integer,Integer);
external procedure GetStockValue(string,string,var record ItemStatusVc);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external procedure FindPLQPrice(record PLQVc,record INVc,var val,var val);
external procedure ExpandStructure(record INVc,string,string,Integer,var val,var val,Boolean);

procedure PrintItemPO(string itemcode)
begin
   record ItemHistVc IHr;
   record POVc POr;
   boolean TrHs,testf,firstf;
   val qty;
   
   firstf = true;
   IHr.ArtCode = itemcode;
   IHr.FileName = "Fut1POVc";
   TrHs = true;
   while (LoopKey("FNArtCode",IHr,2,TrHs)) begin
     if (TrHs) then begin
       if (IHr.FileName <> "Fut1POVc") then begin
         TrHs = false;   
       end;
       if (IHr.ArtCode <> itemcode) then begin
         TrHs = false;
       end;
     end;
     if (TrHs) then begin
       testf = true;
       if (IHr.Qty2 < 0) then begin
         testf = false;
       end;
       POr.SerNr = IHr.TransNr;
       if (ReadFirstMain(POr,1,true)) then begin
         if (POr.Closed <> 0) then begin
           testf = false;
         end;
       end;
       if (IHr.Invalid!=0) then begin testf = false; end;
       if (testf) then begin
          if (firstf) then begin
            StartFormat(15);
            OutString(15,0,USetStr(15800),false);
            EndFormat;

            StartFormat(15);
            OutString(15,0,USetStr(15801),false);
            OutString(85,0,USetStr(15802),false);
            OutString(220,0,USetStr(15803),true);
            OutString(230,0,USetStr(15804),false);
            OutString(310,0,USetStr(15805),false);
            EndFormat;
            Gray_Divider(15,1);
            firstf = false;
          end;
          StartFormat(15);
          OutString(15,"DblPOVc",IHr.TransNr,false);
          OutString(85,0,IHr.TransDate,false);
          OutVal(220,0,IHr.Qty2,M4Val,true);
          OutString(230,0,POr.VECode,false);
          OutString(310,0,POr.Addr0,false);
          EndFormat;
          qty = qty + IHr.Qty2;
       end;
     end;
   end;
   if (qty <> 0) then begin
     Gray_Divider(0,1);
     StartFormat(15);
     OutString(15,0,"Total",false);
     OutVal(220,0,qty,M4Val,true);
     EndFormat;
   end;
  return;
end;

procedure PrintItemSO(string itemcode)
begin
   record ItemHistVc IHr;
   record ORVc ORr;
   boolean TrHs,testf,firstf;
   val qty;
   
   firstf = true;
   IHr.ArtCode = itemcode;
   IHr.FileName = "Fut3ORVc";
   TrHs = true;
   while (LoopKey("FNArtCode",IHr,2,TrHs)) begin
     if (TrHs) then begin
       if (IHr.FileName <> "Fut3ORVc") then begin
         TrHs = false;   
       end;
       if (IHr.ArtCode <> itemcode) then begin
         TrHs = false;
       end;
     end;
     if (IHr.Invalid!=0) then begin testf = false; end;
     if (TrHs) then begin
       testf = true;
       if (IHr.Qty2>0) then begin
         testf = false;
       end;
       ORr.SerNr = IHr.TransNr;
       if (ReadFirstMain(ORr,1,true)) then begin
         if (ORr.Closed <> 0) then begin
           testf = false;
         end;
       end;
       if (testf) then begin
         if (firstf) then begin
           StartFormat(15);
          OutString(15,0,USetStr(15806),false);
         EndFormat;

           StartFormat(15);
         OutString(15,0,USetStr(15807),false);
         OutString(85,0,USetStr(15802),false);
         OutString(220,0,USetStr(15803),true);
         OutString(230,0,USetStr(15808),false);
         OutString(310,0,USetStr(15805),false);
         EndFormat;
           Gray_Divider(15,1);
           firstf = false;
         end;
         StartFormat(15);
         OutString(15,"DblORVc",IHr.TransNr,false);
         OutString(85,0,IHr.TransDate,false);
         OutVal(220,0,IHr.Qty2,M4NegVal,true);
         OutString(230,0,ORr.CustCode,false);
         OutString(310,0,ORr.Addr0,false);
         EndFormat;
         qty = qty + IHr.Qty2;
       end;
     end;
   end;
   if (qty <> 0) then begin
     Gray_Divider(0,1);
     StartFormat(15);
     OutString(15,0,"Total",false);
     OutVal(220,0,qty,M4NegVal,true);
     EndFormat;
   end;
   StartFormat(15);
   EndFormat;
  return;
end;

procedure PrintINComponentsStockValue(record INVc INr)
BEGIN
  record ItemStatusVc ISr;
  Record INVc IN2r;
  record RecVc Recr;
  row RecVc recrw;
  Integer i,rwcnt;  

  Recr.Code = INr.Recepy;
  if (ReadFirstMain(Recr,1,true)) then begin
    rwcnt = MatRowCnt(Recr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Recr,i,Recrw);
      if (Recrw.InQty!=0) then begin
        GetStockValue(Recrw.Item,"",ISr);
        StartFormat(15);
        
        OutString(15,0,Recrw.Item,false);
        OutString(75,0,USetStr(5122),false);
        IN2r.Code = Recrw.Item;
        if (ReadFirstMain(IN2r,1,true)) then begin
          if (IN2r.ItemType<>1) then begin 
            ISr.Instock = BlankVal; 
          end;
        end;
        OutVal(185,0,ISr.Instock,M4Qty,true);
        OutString(200,0,USetStr(5123),false);
        OutVal(300,0,ISr.OrddOut,M4Qty,true);
        OutString(345,0,USetStr(5124),false);
        OutVal(450,0,ISr.POUnOKQty,M4Qty,true);
        EndFormat;
      end;  
    end;  
  end;    
  RETURN;
END;

procedure FindStocksValues(string itemcode)
BEGIN
  record ItemStatusVc ISr;
  record PISVc PISr;
  record LocationVc Locr;
  Boolean TrHs,TrHs2,testf;  
  record MainStockBlock MainStockRec;
  val stockv;
  Boolean whf;
  
  BlockLoad(MainStockRec);    
  TrHs = true;  
  while (LoopMain(Locr,1,TrHs)) begin
    if (TrHs) then begin
      GetStockValue(itemcode,Locr.Code,ISr);
      switch (MainStockRec.UpdateAvailable) begin
        case 0:
          stockv = ISr.Instock;
        case 1:
          stockv = ISr.Instock - ISr.InShipment;
      end;      
      if (ISr.Instock>0) then begin
        StartFormat(15);
        OutString(120,0,Locr.Code,false);
        OutVal(3,0,stockv,M4UVal,true);
        EndFormat;  
        whf = false;
        if (Locr.RequirePos!=0) then begin
          ResetLoop(PISr);
          TrHs2 = true;
          PISr.Location = Locr.Code;
          PISr.ArtCode = itemcode;
          while (LoopKey("Location",PISr,2,TrHs2)) begin
            if (PISr.Location<>Locr.Code) then begin
              TrHs2 = false;
            end;
            if (PISr.ArtCode<>itemcode) then begin
              TrHs2 = false;
            end;
            if (TrHs2) then begin
              testf = true;
              if (PISr.Instock == 0) then begin
                testf = false;
              end;
              if (testf) then begin
                if (whf==false) then begin
                  Gray_Divider(120,350);
                end;
                StartFormat(15);
                if (whf==false) then begin
                  OutString(70,0,USetStr(15809),false);
                end;
//                OutString(120,0,PISr.Location,false);
                OutString(180,0,PISr.Position,false);
                OutVal(3,0,PISr.Instock,M4UVal,true);
                OutString(330,0,PISr.LocArea,false);
                EndFormat;
                whf = true;
              end;
            end;
          end;    
          if (whf) then begin
            Gray_Divider(70,360);
          end;
        end;      
      end;  
    end;  
  end;  
  RETURN;   
END;    

procedure PrintItemPI(string itemcode)
begin
  record PIVc PIr;
  boolean TrHs, testf;
  string 255 tstr;
  TrHs = true;

  StartFormat(15);
  OutString(15,0,USetStr(5132),false);
  EndFormat;
  StartFormat(15);
  OutString(15,0,USetStr(5133),false);
  OutString(70,0,USetStr(5134),false);
  OutString(220,0,USetStr(5137),true);
  OutString(230,0,USetStr(5126),false);
  OutString(440,0,USetStr(5135),true);
  OutString(445,0,USetStr(5136),false);
  EndFormat;
  Gray_Divider(0,1);
  PIr.ItemCode = itemcode;
  while (LoopMain(PIr,1,TrHs)) begin
    if (TestArtCodeMatch(PIr.ItemCode,itemcode)==false) then begin TrHs = false; end;
//    if (PIr.ItemCode <> itemcode) then begin TrHs = false; end;
    if (TrHs) then begin
      StartFormat(15);
      OutStringID(15,"DblPIVcVEItem",PIr.VECode,false,PIr.ItemCode & ":" & PIr.VECode);
      OutString(70,0,left(PIr.VEName,20),false);
      if (PIr.DefaultChoice == 1) then begin
        OutString(220,0,"Ã",true);
      end;
      tstr = PIr.VECode & " " & PIr.VEName;
      OutString(230,0,left(PIr.Comment,30),false);
      OutVal(440,0,PIr.PurPrice,M4Val,true);
      OutString(445,0,PIr.CurncyCode,false);
      EndFormat;
    end;
  end;
  return;
end;

procedure INInfoRnRun(record RcVc RepSpec,string alternativecode)
BEGIN
  record ItemStatusVc ISr;
  record PLDefVc PLDr;
  record PLVc PLr;
  record PLQVc PLQr;
  record MainStockBlock MainStockRec;  
  record PlanDeliveryBlock PlanDelr;
  Boolean found,firstf,plfoundf;
  val upric,upricv,qty;
  string 2 vatcode;
  record INVc INp;
  record AccBlock ARAccRec;
  string 255 frit,toit;
  Boolean found2;
  val max,ord,stockv,ordout;
  string 255 ckey;

  BlockLoad(ARAccRec);
  BlockLoad(MainStockRec);
  BlockLoad(PlanDelr);
  StartReportJob(USetStr(5120));
  EndHeader;
  SetRepCol(2,90);
  SetRepCol(3,288);
  SetRepCol(4,384);
  frit = FirstInRange(RepSpec.f1,20);
  toit = LastInRange(RepSpec.f1,20);  
  firstf = true;
  
  INp.Code = frit;
  found2 = true;
  
  ckey = "Code";
  if (nonblank(alternativecode)) then begin
    ckey = "AlternativeCode";
    INp.AlternativeCode = alternativecode;
  end;
  
  while (LoopKey(ckey,INp,1,found2)) begin
    if (blank(alternativecode)) then begin
      if (INp.Code>toit) then begin found2 = false; end;
    end else begin
      if (alternativecode!=INp.AlternativeCode) then begin found2 = false; end;
    end;
    if (found2==false) then begin goto L99; end;
    if (PocketVersion) then begin
      StartFormat(15);
      OutString(11,0,USetStr(5121),false);
      OutString(100,0,INp.Code,false);
      EndFormat;
      StartFormat(15);
      OutString(11,0,INp.Name,false);
      EndFormat;
      StartFormat(15);  
      OutString(11,0,USetStr(7141),false);
      OutVal(220,0,INp.Weight,M4Qty,true);
      OutString(231,0,USetStr(6767),false);
      OutVal(480,0,INp.Volume,M4Qty,true);
      EndFormat;    
      StartFormat(15);
      OutString(11,0,USetStr(7762),false);
      OutVal(220,0,INp.WarrantyLength,M4Qty,true);
      OutString(231,0,USetStr(2327),false);
      OutString(480,0,INp.Unittext,true);    
      EndFormat;
      StartFormat(15);
      OutString(11,0,USetStr(5130),false);    
      OutVal(220,0,INp.UPrice1,M4Val,true);
      if (UserCanAction("ViewCostPrice",true)==true) then begin
        OutString(231,0,USetStr(2617),false);
        OutVal(480,0,INp.InPrice,M4Val,true);
      end;
      EndFormat;
      if (UserCanAction("ViewCostPrice",true)==true) then begin
        StartFormat(15);
        OutString(11,0,USetStr(2616),false);
        OutVal(231,0,INp.ExtraCost,M4Val,true);
        EndFormat;
      end;
    end else begin
      if (!firstf) then begin
        StartFormat(15);
        EndFormat;
      end;
      firstf = false;
      StartFormat(15);
      OutString(15,0,USetStr(5121),false);
      OutString(100,"DblINVc",INp.Code,false);
      OutString(200,0,INp.Name,false);
      EndFormat;
      Black_Divider(0,1);
      StartFormat(15);  
      OutString(15,0,USetStr(5466),false);
      OutString(70,0,INp.Department,false);
      OutString(120,0,USetStr(2767),false);
      OutString(150,0,INp.InvCode,false);
      OutString(280,0,USetStr(7141),false);
      OutVal(330,0,INp.Weight,M4Qty,false);
      OutString(370,0,USetStr(6767),false);
      OutVal(430,0,INp.Volume,M4Qty,false);
      EndFormat;    
      StartFormat(15);
      OutString(15,0,USetStr(2338),false);
      OutString(70,0,INp.Group,false);
      OutString(120,0,USetStr(2356),false);
      OutString(150,0,INp.VATCode,false);
      OutString(200,0,INp.VATCodeEU,false);
      OutString(250,0,INp.VATCodeExp,false);
      OutString(280,0,USetStr(7762),false);
      OutVal(330,0,INp.WarrantyLength,M4Qty,false);
      OutString(370,0,USetStr(2327),false);
      OutString(430,0,INp.Unittext,false);    
      EndFormat;
      StartFormat(15);
      OutString(15,0,USetStr(5130),false);    
      OutVal(70,0,INp.UPrice1,M4Val,false);
      if (UserCanAction("ViewCostPrice",true)==true) then begin
        OutString(120,0,USetStr(2617),false);
        OutVal(180,0,INp.InPrice,M4Val,false);
        OutString(280,0,USetStr(2616),false);
        OutVal(330,0,INp.ExtraCost,M4Val,false);
        OutString(370,0,USetStr(2331),false);
        OutVal(430,0,INp.LastPurchPrice,M4Val,false);
      end;
      EndFormat;
    end;
    Gray_Divider(0,1);
    StartFormat(15);
    EndFormat;
    if ((INp.ItemType!=kItemTypeStructured) or ((INp.ItemType==kItemTypeStructured) and (blank(INp.Recepy)) )) then begin    
      GetStockValue(INp.Code,"",ISr);
      switch (MainStockRec.UpdateAvailable) begin
        case 0:
          stockv = ISr.Instock;
          ordout = ISr.OrddOut;
        case 1:
          stockv = ISr.Instock - ISr.InShipment;
          ordout = ISr.OrddOut - ISr.InShipment;
      end;      
      if (PocketVersion) then begin    
        StartFormat(15);
        OutString(11,0,USetStr(5122),false);
        OutVal(220,0,stockv,M4Qty,true);
        OutString(231,0,USetStr(5123),false);
        OutVal(480,0,ordout,M4Qty,true);
        EndFormat;
      end else begin
        StartFormat(15);
        OutString(15,0,USetStr(5122),false);
        OutVal(140,0,stockv,M4Qty,true);
        OutString(160,0,USetStr(5123),false);
        OutVal(270,0,ordout,M4Qty,true);
        OutString(300,0,USetStr(5124),false);
        OutVal(450,0,ISr.POUnOKQty,M4Qty,true);
        EndFormat;
      end;
    end else begin
      ExpandStructure(INp,INp.Recepy,"",MainStockRec.UpdateAvailable,max,ord,false);
      if (PocketVersion) then begin    
        StartFormat(15);
        OutString(11,0,USetStr(5122),false);
        OutVal(220,0,max,M4Qty,true);
        OutString(231,0,USetStr(5123),false);
        OutVal(480,0,ord,M4Qty,true);
        EndFormat;
      end else begin
        StartFormat(15);
        OutString(15,0,INp.Code,false);
        OutString(75,0,USetStr(5122),false);
        OutVal(185,0,max,M4Qty,true);
        OutString(200,0,USetStr(5123),false);
        OutVal(300,0,ord,M4Qty,true);
//      OutString(300,0,USetStr(5124),false);
//      OutVal(450,0,ISr.POUnOKQty,M4Qty,true);//??
        EndFormat;
        Gray_Divider(15,70);
      end;
      PrintINComponentsStockValue(INp);
    end;
    StartFormat(15);
    OutString(120,0,USetStr(2768),false);
    OutString(3,0,USetStr(2765),true);
    EndFormat;
    Gray_Divider(0,1);    
    FindStocksValues(INp.Code);
    Gray_Divider(0,1);
    PLDr.Code = "";
    GetItemVATCode(INp.Code,0,vatcode,true);
    StartFormat(15);
    EndFormat;
    if (PocketVersion) then begin    
      StartFormat(15);
      OutString(11,0,USetStr(5125),false);
      OutString(280,0,USetStr(5127),true);
      OutString(480,0,USetStr(5128),true);
      EndFormat;
    end else begin
      StartFormat(15);
      OutString(15,0,USetStr(5125),false);
      OutString(360,0,USetStr(5127),true);
      OutString(450,0,USetStr(5128),true);
      EndFormat;
    end;
    Gray_Divider(0,1);
    upric = INp.UPrice1;
    if (ARAccRec.BasePriceInclVAT==0) then begin
      upricv = FindVAT(vatcode,upric,0,0);      
      upricv = upric + upricv;
    end else begin
      upricv = upric;
      upric = FindVAT(vatcode,upricv,1,0);      
      upric = upricv - upric;
    end;
    if (PocketVersion) then begin    
      StartFormat(15);
      OutString(11,0,USetStr(5130),false);
      OutVal(280,0,upric,M423Val,true);
      OutVal(450,0,upricv,M423Val,true);
      EndFormat;
    end else begin
      StartFormat(15);
      OutString(70,0,USetStr(5130),false);
      OutString(270,0,vatcode,true);
      OutVal(360,0,upric,M423Val,true);
      OutVal(450,0,upricv,M423Val,true);
      EndFormat;
    end;
    ResetLoop(PLDr);
    found = true;
    while (LoopMain(PLDr,0,found)) begin
      switch (PLDr.DepPrice) begin
        case 0:
          PLr.PLCode = PLDr.Code;
          PLr.ArtCode = INp.Code;
          if (ReadFirstMain(PLr,2,true)) then begin
            plfoundf = true;
            upric = PLr.ExVatPrice;
          end else begin
            plfoundf = false;
            upric = INp.UPrice1;
          end;
        case 1:
          qty = 1;
          PLQr.PLCode = PLDr.Code;
          PLQr.ArtCode = INp.Code;
          if (ReadFirstMain(PLQr,2,true)) then begin
            FindPLQPrice(PLQr,INp,qty,upric);
            plfoundf = true;
          end else begin
            upric = INp.UPrice1;
            plfoundf = false;
          end;
        case 2:
          PLr.PLCode = PLDr.Code;
          PLr.ArtCode = INp.Code;
          if (ReadFirstMain(PLr,2,true)) then begin
            plfoundf = true;
            upric = PLr.ExVatPrice;
          end else begin
            plfoundf = false;
            upric = INp.UPrice1;
          end;
      end;
      if (PLDr.InclVAT==0) then begin
        upricv = FindVAT(vatcode,upric,0,0);      
        upricv = upric + upricv;
      end else begin
        upricv = upric;
        upric = FindVAT(vatcode,upricv,1,0);
        upric = upricv - upric;
      end;
      if ((upric!=0) or (upricv!=0)) and plfoundf then begin
        if (PocketVersion) then begin    
          StartFormat(15);
          OutString(11,0,PLDr.Code,false);
//          OutString(70,0,PLDr.Comment,false);
          OutVal(280,0,upric,M423Val,true);
          OutVal(450,0,upricv,M423Val,true);
          OutString(480,0,PLDr.CurncyCode,true);
          EndFormat;
        end else begin
          StartFormat(15);
          OutStringID(15,"DblPLVc",PLDr.Code,false,PLDr.Code & ":" & INp.Code);
          OutString(70,0,PLDr.Comment,false);
          OutString(270,0,vatcode,true);
          OutVal(360,0,upric,M423Val,true);
          OutVal(450,0,upricv,M423Val,true);
          OutString(480,0,PLDr.CurncyCode,true);
          EndFormat;
        end;
      end;  
    end;

    StartFormat(15);
    EndFormat;
    if (PocketVersion) then begin    
      StartFormat(15);
      OutString(11,0,USetStr(5131),false);
      OutString(280,0,USetStr(5127),true);
      OutString(480,0,USetStr(5128),true);
      EndFormat;
    end else begin
      StartFormat(15);
      OutString(15,0,USetStr(5131),false);
      OutString(360,0,USetStr(5127),true);
      OutString(450,0,USetStr(5128),true);
      EndFormat;
    end;
    Gray_Divider(0,1);
    ResetLoop(PLr);
    found = true;
    PLr.ArtCode = INp.Code;
    while (LoopKey("ArtCode",PLr,1,found)) begin
      if (PLr.ArtCode!=INp.Code) then begin found = false; end;
      if (nonblank(PLr.CustCode)) then begin
        PLDr.Code = PLr.PLCode;
        upric = PLr.ExVatPrice;
        if (ReadFirstMain(PLDr,1,true)) then begin end;
        if (PLDr.InclVAT==0) then begin
          upricv = FindVAT(vatcode,upric,0,0);      
          upricv = upric + upricv;
        end else begin
          upricv = upric;
          upric = FindVAT(vatcode,upricv,1,0);
          upric = upricv - upric;
        end;

        if (PocketVersion) then begin    
          StartFormat(15);
          OutString(11,0,PLr.CustCode,false);
          OutVal(280,0,upric,M423Val,true);
          OutVal(450,0,upricv,M423Val,true);
          OutString(480,0,PLDr.CurncyCode,true);
          EndFormat;
        end else begin
          StartFormat(15);
          OutString(15,0,PLr.CustCode,false);
          OutString(70,0,PLr.Comment,false);
          OutString(270,0,vatcode,true);
          OutVal(360,0,upric,M423Val,true);
          OutVal(450,0,upricv,M423Val,true);
          OutString(480,0,PLDr.CurncyCode,true);
          EndFormat;
        end;
      end;
    end;
    
    Gray_Divider(0,1);
    StartFormat(15);
    EndFormat;
    if (PlanDelr.FieldType == 1) then begin
      PrintItemSO(INp.Code);
      PrintItemPO(INp.Code);
    end;
    if (UserCanAction("ViewCostPrice",true)==true) then begin
      PrintItemPI(INp.Code);
    end;
  end;

L99:;
  EndJob;
  RETURN;
END;

global
procedure INInfoRn(record RcVc RepSpec)
BEGIN
  INInfoRnRun(RepSpec,"");
  return;
end;

global
procedure AlternativeINInfoRn(record RcVc RepSpec)
BEGIN
  record INVc INr;
  
  INr.Code = RepSpec.f1;
  if (ReadFirstMain(INr,1,true)) then begin 
    if nonblank(INr.AlternativeCode) then begin 
      INInfoRnRun(RepSpec,INr.AlternativeCode);
    end;
  end; 
  return;
end;  

