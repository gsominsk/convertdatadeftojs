external function Boolean ReadAcceptanceRules(Integer,string,var record AcceptanceRulesVc);
external function Boolean IsEnterprise();
external function Boolean HasPLIntegratedWithNL();
external function Boolean HasIntegratedNL();

external procedure PrintApprovalAcivity(record AcceptanceRulesVc,record ActVc,var Boolean);
external procedure PurgeTRExtYc(record PurgeTRVc,var string);
external function Integer GetIntYc(Date);
external function Integer TypeOfCurncy(var string,var Integer);

global
procedure VIPrintApprovalActivities(record VIVc VIr)
begin
  record ActVc Actr;
  record AcceptanceRulesVc Acptr;
  Integer actnr;
  record RLinkVc RLr;
  Boolean firstf;

  ReadAcceptanceRules(kAcceptanceVI,VIr.VECode,Acptr);
  actnr = 1;
  while (ReadRecordLink(VIr,actnr,Actr,RLr)) begin
    PrintApprovalAcivity(Acptr,Actr,firstf);      
    actnr = actnr + 1;
  end;
  return;
end;

procedure ToStrTRCode(var string rstr,Integer ycp,LongInt nrp)
begin
  string 255 t2;
  
  t2 = nrp;
  rstr = StrTRCode(ycp);
  if (nonblank(rstr)) then begin
    rstr = rstr & ".";
  end;  
  rstr = rstr & t2;
  return;
end;

procedure TRExtYc(record TRVc TRr,var string rstr)
BEGIN
  ToStrTRCode(rstr,TRr.IntYc,TRr.Number);
  RETURN;
END;

procedure PrintAccruals(record VIVc theVIr)
begin
  record SMVc SMr;
  record TRVc TRr;
  record RLinkVc RLinkr;
  Integer notenr;
  string 255 tstr;

  notenr = 1;
  while (ReadRecordLink(theVIr,notenr,SMr,RLinkr)) begin
    StartFormat(15);
     OutString(20,0,USetStr(11370),false);
    EndFormat;    
    Gray_Divider(0,200);
    StartFormat(15);
     OutString(20,0,USetStr(1154),false);
     OutLongInt(100,"DblSMVc",SMr.SerNr,false);
     OutVal(380,0,SMr.DSum,M4Val,true);
    EndFormat;    
    notenr = notenr + 1;
    goto LSMEND;
  end;
LSMEND:;  
  notenr = 1;
  while (ReadRecordLink(theVIr,notenr,TRr,RLinkr)) begin
    StartFormat(15);
     OutString(20,0,USetStr(11371),false);
     TRExtYc(TRr,tstr);
     OutString(100,"DblTrans",tstr,false);
     OutVal(450,0,TRr.DSum,M4Val,true);
    EndFormat;    
    notenr = notenr + 1;
  end;
  RETURN;
END;

global
procedure GetPrePayments(record VIVc theVIr,var val ppval)
BEGIN
  row VIVc VIrw;
  Integer rwcnt,i;
  
  ppval = 0;
  rwcnt = MatRowCnt(theVIr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(theVIr,i,VIrw);
    if (VIrw.stp==6) then begin 
      if (VIrw.PrepayNr<>-1) then begin
        ppval = ppval - VIrw.PrepayAmount;
      end;
    end;
  end;
  RETURN;
END;

global
procedure VIInfoRn(record RcVc RepSpec)
BEGIN
  record VIVc theVIr;
  record VIVc VIr;
  record OPVc OPr;
  record PurgeTRVc PurgeTRr;  
  record TRVc TRr;  
  row TRVc TRrw;  
  record CLOutVc CLOutr;  
  row CLOutVc CLOutrw;  
  record CLInVc CLInr;  
  row CLInVc CLInrw;  
  row OPVc OPrw;
  row VIVc VIrw;  
  Boolean found,testf;
  record OPrsVc OPrsr;
  string 255 tstr,t2;
  val bal,vatval,ppval,temp;
  Integer i,rwcnt;
  Integer typeofcur,oldstyle;
  val trval,trval2,trcurval;
  
  if (RepSpec.long1<=0) then begin goto L99; end;
  theVIr.SerNr = RepSpec.long1;
  bal = 0;
  if (ReadFirstMain(theVIr,1,true)==false) then begin goto L99; end;
  StartReportJob(USetStr(6760));
  EndHeader;
  StartFormat(15);
  OutString(15,0,USetStr(6761),false);
  EndFormat;
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(40,0,USetStr(6762),false);
  OutString(150,0,USetStr(6763),false);
  OutString(380,0,USetStr(6764),true);
  OutString(480,0,USetStr(6765),true);
  EndFormat;
  OPrsr.VINr = theVIr.SerNr;
  found = true;
  while (LoopKey("VIKey",OPrsr,1,found)) begin
    if (OPrsr.VINr<>theVIr.SerNr) then begin found = false; end;
    if (found) then begin
      if (OPrsr.TransType==0) then begin
        VIr.SerNr = OPrsr.TransNr;
        if (ReadFirstMain(VIr,1,true)) then begin
          if (VIr.Invalid==0) then begin
            tstr = USetStr(1152);
            if (VIr.InvType==kInvoiceTypeCredit) or (VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
              tstr = USetStr(11372);
            end;
            tstr = tstr & ":";
            t2 = VIr.SerNr;
            tstr = tstr & t2;
            StartFormat(15);
            OutString(40,"DblLiquid",tstr,false);
            OutDate(150,0,VIr.InvDate,false);
            if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
              VIr.PayVal = -VIr.PayVal;
            end;  
            OutVal(380,0,VIr.PayVal,M4Val,true);            
            switch (VIr.InvType) begin
              case kInvoiceTypeEmployee:
                goto LkInvoiceTypeCash;
              case kInvoiceTypeCashInvoiceReceiptPRT:
                goto LkInvoiceTypeCash;
              case kInvoiceTypeCash:
LkInvoiceTypeCash:;              
                OutString(480,0,USetStr(1804),true);
              case kInvoiceTypeCreditSpecialSales: 
                goto LkInvoiceTypeCredit;
              case kInvoiceTypeCredit:
LkInvoiceTypeCredit:;
                switch (theVIr.InvType) begin
                  case kInvoiceTypeCash:
                  case kInvoiceTypeEmployee:
                  otherwise
                    bal = bal + VIr.PayVal;
                    GetPrePayments(VIr,ppval);
                    OutVal(480,0,bal,M4Val,true);
                end;
              otherwise
                bal = bal + VIr.PayVal;
                GetPrePayments(VIr,ppval);
                OutVal(480,0,bal,M4Val,true);
            end;
            EndFormat;
            if (ppval<>0) then begin
              StartFormat(15);
              OutString(150,0,USetStr(1875),false);
              OutVal(380,0,ppval,M4Val,true);
              bal = bal + ppval;
              OutVal(480,0,bal,M4Val,true);
              EndFormat;
            end;
            if (VIr.WithHoldingTax<>0) then begin
              tstr = USetStr(4194);
              tstr = tstr & ":";
              t2 = VIr.SerNr;
              tstr = tstr & t2;
              StartFormat(15);
              OutString(40,"DblLiquid",tstr,false);
              OutDate(150,0,VIr.InvDate,false);
              if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                VIr.WithHoldingTax = -VIr.WithHoldingTax;
              end;  
              OutVal(380,0,-VIr.WithHoldingTax,M4Val,true);            
              bal = bal - VIr.WithHoldingTax;
              OutVal(480,0,bal,M4Val,true);
              EndFormat;
            end;  
          end;
        end;
      end;
      if (OPrsr.TransType==1) then begin/* payment */
          OPr.SerNr = OPrsr.TransNr;
          if (ReadFirstMain(OPr,1,true)) then begin            
            if ((OPr.OrderedFlag!=0) and (OPr.RejectedFlag==0)) then begin
            rwcnt = MatRowCnt(OPr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(OPr,i,OPrw);
              if (OPrw.ovst==0) then begin
                if ((OPrw.VISerNr==theVIr.SerNr) and
                    (OPr.TransDate==OPrsr.TransDate)) then begin
                  tstr = USetStr(1153);
                  tstr = tstr & ":";
                  t2 = OPr.SerNr;
                  tstr = tstr & t2;
                  StartFormat(15);
                  OutStringOvst(40,"DblLiquid",tstr,false,OPr.Invalid);
                  OutDateOvst(150,0,OPr.TransDate,false,OPr.Invalid);//OPr.PayDate,false);
                  if (OPrw.stp==5) then begin
                    OutStringOvst(220,0,USetStr(2449),false,OPr.Invalid);
                  end;
                  OPrw.PInvVal = -OPrw.PInvVal;
                  OutValOvst(380,0,OPrw.PInvVal,M4Val,true,OPr.Invalid);
                  if (OPrw.stp!=7) then begin
                    if (OPr.Invalid==0) then begin
                      bal = bal + OPrw.PInvVal;
                    end;
                  end;  
                  OutValOvst(480,0,bal,M4Val,true,OPr.Invalid);
                  EndFormat;
                end;
              end;
            end;
            end;
          end;
      end;
      if (OPrsr.TransType==kOPrsTransTypePurgeNLTransaction) then begin/*NL payment */
          PurgeTRr.Number = OPrsr.TransNr;
          PurgeTRr.IntYc = GetIntYc(OPrsr.TransDate);
          PurgeTRr.TransRow = OPrsr.TransRow;
          if (ReadFirstMain(PurgeTRr,3,true)) then begin
              if (PurgeTRr.Typ==2) then begin
                if (theVIr.InvType==3) then begin
                  trval = PurgeTRr.DebVal - PurgeTRr.CredVal;
                  trval2 = PurgeTRr.DebVal2 - PurgeTRr.CredVal2;
                  trcurval = PurgeTRr.CurDebVal - PurgeTRr.CurCredVal;
                end else begin
                  trval = PurgeTRr.DebVal - PurgeTRr.CredVal;
                  trval2 = PurgeTRr.DebVal2 - PurgeTRr.CredVal2;
                  trcurval = PurgeTRr.CurDebVal - PurgeTRr.CurCredVal;
                end;
                if (trval<>0) then begin
                  if ((PurgeTRr.SerNr==theVIr.SerNr) and
                      (PurgeTRr.TransDate==OPrsr.TransDate)) then begin
                    tstr = USetStr(2530);
                    tstr = tstr & ":";
                    PurgeTRExtYc(PurgeTRr,t2);
                    tstr = tstr & t2;
                    StartFormat(15);
                    OutString(40,"DblLiquid",tstr,false);
                    OutDate(150,0,PurgeTRr.TransDate,false);
                    if (nonblank(trcurval)) then begin
                      trcurval = -trcurval;
                      OutVal(380,0,trcurval,M4Val,true);
                      bal = bal + trcurval;
                    end else begin
                      typeofcur = TypeOfCurncy(PurgeTRr.Curncy,oldstyle);   
                      if (typeofcur==2) then begin
                        trval2 = -trval2;
                        OutVal(380,0,trval2,M4Val,true);
                        bal = bal + trval2;
                      end else begin
                        trval = -trval;
                        OutVal(380,0,trval,M4Val,true);
                        bal = bal + trval;
                      end;
                    end;  
                    OutVal(480,0,bal,M4Val,true);
                    EndFormat;
                  end;
                end;
              end;
          end;
       end;
       if (OPrsr.TransType==kOPrsTransTypeNLTransaction) then begin/*NL payment */
          TRr.Number = OPrsr.TransNr;
          TRr.IntYc = GetIntYc(OPrsr.TransDate);
          if (ReadFirstMain(TRr,2,true)) then begin
            rwcnt = MatRowCnt(TRr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(TRr,i,TRrw);
              if (TRrw.Typ==2) then begin
                if (theVIr.InvType==kInvoiceTypeCredit or theVIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                  trval = TRrw.DebVal - TRrw.CredVal;
                  trval2 = TRrw.DebVal2 - TRrw.CredVal2;
                  trcurval = TRrw.CurDebVal - TRrw.CurCredVal;
                end else begin
                  trval = TRrw.DebVal - TRrw.CredVal;
                  trval2 = TRrw.DebVal2 - TRrw.CredVal2;
                  trcurval = TRrw.CurDebVal - TRrw.CurCredVal;
                end;
                if (trval<>0) then begin
                  if ((TRrw.SerNr==theVIr.SerNr) and
                      (TRr.TransDate==OPrsr.TransDate)) then begin
                    tstr = USetStr(2530);
                    tstr = tstr & ":";
                    TRExtYc(TRr,t2);
                    tstr = tstr & t2;
                    StartFormat(15);
                    OutString(40,"DblLiquid",tstr,false);
                    OutDate(150,0,TRr.TransDate,false);
                    if (nonblank(trcurval)) then begin
                      trcurval = -trcurval;
                      OutVal(380,0,trcurval,M4Val,true);
                      bal = bal + trcurval;
                    end else begin
                      typeofcur = TypeOfCurncy(TRrw.Curncy,oldstyle);   
                      if (typeofcur==2) then begin
                        trval2 = -trval2;
                        OutVal(380,0,trval2,M4Val,true);
                        bal = bal + trval2;
                      end else begin
                        trval = -trval;
                        OutVal(380,0,trval,M4Val,true);
                        bal = bal + trval;
                      end;
                    end;  
                    OutVal(480,0,bal,M4Val,true);
                    EndFormat;
                  end;
                end;
              end;
            end;
          end;
      end;
      
      if (OPrsr.TransType==3) then begin/*cash out*/              
          CLOutr.SerNr = OPrsr.TransNr;
          if (ReadFirstMain(CLOutr,1,true)) then begin            
            if (CLOutr.Invalid==0) then begin
            rwcnt = MatRowCnt(CLOutr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(CLOutr,i,CLOutrw);
              if (CLOutrw.Type==2) then begin
                testf = false;
                if (CLOutrw.Sum<>0) then begin
                  if ((CLOutrw.TransNr==theVIr.SerNr) and
                      (CLOutr.TransDate==OPrsr.TransDate)) then begin
                    tstr = USetStr(1194);
                    tstr = tstr & ":";
                    testf = true;
                    tstr = tstr & CLOutr.SerNr;
                  end;
                end;                
                if (testf) then begin
                  temp = -CLOutrw.Sum;
                  StartFormat(15);
                   OutString(40,"DblLiquid",tstr,false);
                   OutDate(150,0,CLOutr.TransDate,false);
                    OutVal(380,0,temp,M4Val,true);
                   bal = bal + temp;
                   OutVal(480,0,bal,M4Val,true);
                  EndFormat;                                
                end;  
              end;
            end;
            end;
          end;
      end;      
      if (OPrsr.TransType==4) then begin/*cash in*/              
          CLInr.SerNr = OPrsr.TransNr;
          if (ReadFirstMain(CLInr,1,true)) then begin            
            if (CLInr.Invalid==0) then begin
            rwcnt = MatRowCnt(CLInr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(CLInr,i,CLInrw);
              if (CLInrw.Type==2) then begin
                testf = false;
                if (CLInrw.Sum<>0) then begin
                  if ((CLInrw.TransNr==theVIr.SerNr) and
                      (CLInr.TransDate==OPrsr.TransDate)) then begin
                    tstr = USetStr(1193);
                    tstr = tstr & ":";
                    testf = true;
                    tstr = tstr & CLInr.SerNr;
                  end;
                end;                
                if (testf) then begin
                  temp = CLInrw.Sum;
                  StartFormat(15);
                   OutString(40,"DblLiquid",tstr,false);
                   OutDate(150,0,CLInr.TransDate,false);
                    OutVal(380,0,temp,M4Val,true);
                   bal = bal + temp;
                   OutVal(480,0,bal,M4Val,true);
                  EndFormat;                                
                end;  
              end;
            end;
            end;
          end;
      end;            
    end;
  end;
  Black_Divider(380,480);
  StartFormat(15);
  OutVal(480,0,bal,M4Val,true);
  EndFormat;
  Gray_Divider(0,1);
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(2352),false);
  OutString(60,0,USetStr(2353),false);
  OutString(120,0,USetStr(2605),false);
  OutString(260,0,USetStr(2358),false);
  OutString(320,0,USetStr(2706),false);
  OutString(450,0,USetStr(2357),true);
  EndFormat;
  Gray_Divider(0,1);
  
  StartFormat(15);
  OutLongInt(0,0,theVIr.SerNr,false);
  OutDate(60,0,theVIr.InvDate,false);
  OutString(120,0,theVIr.VEName,false); 
  tstr = "";
  switch (VIr.InvType) begin
    case kInvoiceTypeNormal: tstr = USetStr(2361);
    case kInvoiceTypeCash: tstr = USetStr(2363);
    case kInvoiceTypeCredit: tstr = USetStr(2362);
  end;
  OutString(260,0,tstr,false);
  OutString(320,0,theVIr.InvoiceNr,false);
  OutVal(450,0,theVIr.PayVal,M4Val,true);
  OutString(455,0,theVIr.CurncyCode,false);
  EndFormat;
  StartFormat(15);
  if (theVIr.VATVal==0) then begin
    vatval = theVIr.CalcVATVal;
  end else begin
    vatval = theVIr.VATVal;
  end;    
  OutString(300,0,USetStr(4010),false);   
  OutVal(380,0,vatval,M4Val,true);
  EndFormat;
  if (HasIntegratedNL) then begin
    rwcnt = MatRowCnt(theVIr);
    for (i=0; i<rwcnt; i=i+1) begin              
      MatRowGet(theVIr,i,VIrw);
      if (VIrw.stp==1) then begin
        StartFormat(15);
        OutString(20,0,VIrw.AccNumber,false);
        OutString(80,0,VIrw.Objects,false);
        OutString(150,0,VIrw.Comment,false);
        OutVal(380,0,VIrw.Sum,M4Val,true);
        vatval = 0 - VIrw.PrepayAmount;
        OutVal(450,0,vatval,M4Val,true);
        EndFormat;
      end;
    end;
  end;

  if (IsEnterprise) then begin
    Gray_Divider(0,1);
    StartFormat(15);
    EndFormat;  
    PrintAccruals(theVIr);
    VIPrintApprovalActivities(theVIr);
  end;
  EndJob;  
L99:;
  RETURN;
END;
