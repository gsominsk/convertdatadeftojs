external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean SetInSet2(string,string);
external function roundmode GetCostRoundMode(record RoundBlock);
external function Boolean ItemHasVarieties(string,string,Boolean);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean TestArtCodeMatch(string,string);
external procedure HTLocations(string, string, var string);
external procedure HTArts(string, string, var string);
external procedure HTDepartment(string,var string);
external procedure HTArtGroup(string, var string);
external procedure InvListOneItem(record RcVc,Integer,record INVc,string,record CostAccBlock,Boolean,var Boolean,var Boolean,var string,var val,var val,var val,var val,roundmode,var val,string,vector val);

procedure PrintInvValRnHeader(record RcVc RepSpec)
begin
  StartFormat(15);
  OutString(0,0,USetStr(2325),false);
  OutString(2,0,USetStr(2326),false);
  OutString(5,0,"",false);
  OutString(3,0,USetStr(2330),true);
/*
  if (RepSpec.flags[15]==1) then begin
    OutString(360,0,USetStr(7593),true);
  end;  
*/
  if (RepSpec.flags[11]==1) then begin
    OutString(4,0,USetStr(2350),true);
  end else begin
    OutString(4,0,USetStr(2331),true);
  end;
  OutString(1,0,USetStr(2332),true);
  EndFormat;
  return;
end;

procedure PrintAvailVars(record RcVc RepSpec,string fromart,string toart,string frcc,string tocc,string location,
                         string frloc,string toloc,
                         var val nr,var val nrq2,var val sum1,record RoundBlock RoundRec,Integer keys,string loccode,string locname,var Boolean firstf)
begin
  Boolean TrHs,testf;
  record ItemStatusVc ISr;
  record INVc INr;
  Boolean itemout,grout;
  string 255 lastgroup;
  val groupqty,groupsum;
  string 20 lastitem;
  record CostAccBlock CAb;
  vector val vlocationtotals;

  BlockLoad(CAb);
  TrHs = true;

  ISr.Code = fromart;
  ISr.Location = frloc;
  while (LoopMain(ISr,keys,TrHs)) begin
    if (RepSpec.flags[23]==2) then begin
      if (nonblank(toart)) then begin
        if (ISr.Code!=toart) then begin TrHs = false; end;
      end;
    end else begin
      if (ISr.Code>toart) then begin TrHs = false; end;
    end;
    testf = true;
    if (TrHs==false) then begin testf = false; end;
    if (ISr.Location==";;;") then begin
      testf = false;
    end;
    if (testf) then begin
      if (ItemHasVarieties(ISr.Code & ISr.Variety,RepSpec.ObjStr,RepSpec.flags[22]==1)==false) then begin 
        testf = false; 
      end;
      if (nonblank(RepSpec.LastAcc)) then begin
        if (ItemHasVarieties(ISr.Code & ISr.Variety,RepSpec.LastAcc,RepSpec.flags[25]==1)) then begin 
          testf = false;
        end;
      end;
      if (nonblank(location)) then begin
        if (location<>ISr.Location) then begin
          testf = false; 
        end;
      end;
      if (nonblank(frloc)) then begin
        if (ISr.Location<frloc) then begin
          testf = false; 
        end;
      end;
      if (nonblank(toloc)) then begin
        if (ISr.Location>toloc) then begin
          testf = false; 
        end;
      end;
    end;
    if (testf) then begin
      if (ReadFirstItem(ISr.Code & ISr.Variety,INr,true,true)) then begin
        if ((nonblank(fromart)) or (nonblank(fromart))) then begin
          if (fromart==toart) then begin
            if (INr.Code!=fromart) then begin
              testf = false;
            end;
          end;
        end;
        if (nonblank(RepSpec.f3)) then begin
          if (INr.Group<frcc) then begin
            testf = false;
          end;
          if (INr.Group>tocc) then begin
            testf = false;
          end;
        end;
        if (testf) then begin
          if (nonblank(RepSpec.f4)) then begin
            if (SetInSet2(RepSpec.f4,INr.DispGroups)==false) then begin
              testf = false;
            end;
          end;
        end;       
        if (nonblank(RepSpec.TransStr)) then begin
          if (INr.AlternativeCode!=RepSpec.TransStr) then begin testf = false; end;
        end;
        if (testf) then begin
          if (RepSpec.flags[23]>0) then begin
            if (firstf) then begin
              StartFormat(15);
              OutString(0,0,loccode,false);
              OutString(100,0,locname,false);
              OutString(5,0,"",false);
              OutString(3,0,"",true);
              OutString(4,0,"",true);
              OutString(1,0,"",true);
              EndFormat;
              Gray_Divider(0,1);
              firstf = false;
            end;
          end;
          INr.Code = ISr.Code;
          RepSpec.f2 = ISr.Location;
          InvListOneItem(RepSpec,0,INr,ISr.Variety,CAb,true,itemout,grout,lastgroup,sum1,nr,groupqty,groupsum,GetCostRoundMode(RoundRec),nrq2,"",vlocationtotals);
          itemout = false;
        end;
      end;
    end;
  end;
  return;
end;

global
procedure AvailVarsRn(record RcVc RepSpec)
begin
  record RoundBlock RoundRec;
  record CostAccBlock CostAccRec;
  record MainStockBlock mst;
  record ItemStatusVc ISr;
  record INVc INr;
  string 255 fromart,toart;
  string 255 frcc,tocc;
  string 100 location;
  Boolean testf;
  Boolean TrHs;
  string 255 tstr;
  Integer rw;
  val nr,nrq2,sum1;
  val nrtot,nrq2tot,sum1tot;
  record LocationVc Locr;
  record ITVc ITr;
  Boolean LocTrHs,INTrHs;
  string 10 frloc,toloc;
  Boolean firstf;
  
  BlockLoad(mst);
  BlockLoad(CostAccRec);
  BlockLoad(RoundRec);
  fromart = FirstInRange(RepSpec.f1,20);
  toart = LastInRange(RepSpec.f1,20);
  frcc = FirstInRange(RepSpec.f3,20);
  tocc = LastInRange(RepSpec.f3,20);
  frloc = FirstInRange(RepSpec.f2,10);
  toloc = LastInRange(RepSpec.f2,10);
  if (blank(RepSpec.f2)) then begin  
//    location = mst.MainStock; // Needs to read ONLY the ISr of , this is wrong, specify from to item and it works onlhy for the first one
  end else begin
    location = RepSpec.f2;
  end; 
  StartReportJob(USetStr(11132));
   rw = 1;
   if ((nonblank(RepSpec.f1)) or (blank(RepSpec.AccStr))) then begin
     HTArts(RepSpec.f1,RepSpec.f1,tstr);
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
   if (nonblank(RepSpec.AccStr)) then begin
     HTDepartment(RepSpec.AccStr,tstr);
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
   HTLocations(frloc,toloc,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   if (HasItemGroups) then begin
     HTArtGroup(RepSpec.f3,tstr);
     if (nonblank(tstr)) then begin
       Header(rw,tstr,1);
       rw = rw + 1;
     end;
   end;
   if (HasItemClassification) then begin
     HTItemClass(RepSpec.f4,tstr);
     if (nonblank(tstr)) then begin
       Header(rw,tstr,1);
       rw = rw + 1;
     end;
   end;   
  EndHeader;
  if (RepSpec.flags[23]!=2) then begin
    if (blank(RepSpec.f1)) then begin
      StartFormat(15);
      OutString(0,0,USetStr(11135),false);
      EndFormat;
      goto L99;
    end;
  end;
  PrintInvValRnHeader(RepSpec);
  SetRepCol(2,115);
  SetRepCol(3,350);
  SetRepCol(4,415);
  SetRepCol(5,300);
  SetRepCol(6,1);

  Gray_Divider(0,1);
  switch (RepSpec.flags[23]) begin
    case 0:
      firstf = true;
      PrintAvailVars(RepSpec,fromart,toart,frcc,tocc,location,frloc,toloc,nr,nrq2,sum1,RoundRec,1,"","",firstf);
      nrq2tot = nrq2tot + nrq2;
      nrtot = nrtot + nr;
      sum1tot = sum1tot + sum1;
    case 1:
      LocTrHs = true;
      Locr.Code = frloc;
      while (LoopMain(Locr,1,LocTrHs)) begin
        if (nonblank(toloc)) then begin
          if (Locr.Code>toloc) then begin
            LocTrHs = false;
          end;
        end;
        if (LocTrHs) then begin
          firstf = true;
          PrintAvailVars(RepSpec,fromart,toart,frcc,tocc,location,Locr.Code,Locr.Code,nr,nrq2,sum1,RoundRec,2,Locr.Code,Locr.Name,firstf);
          if ((nrq2>0) or (nr>0) or (sum1>0)) then begin
            Gray_Divider(100,1);
            StartFormat(15);
            OutString(0,0,"",false);
            OutString(100,0,USetStr(9676) & " " & Locr.Name,false);
            OutString(5,0,"",false);
            OutVal(3,0,nr,M4UVal,true);
            OutString(4,0,"",true);
            OutVal(1,0,sum1,M4UVal,true);
            EndFormat;
            StartFormat(15);
            EndFormat;
          end;
          nrq2tot = nrq2tot + nrq2;
          nrtot = nrtot + nr;
          sum1tot = sum1tot + sum1;
          nrq2 = 0;
          nr = 0;
          sum1 = 0;
        end;
      end;
    case 2:
      LocTrHs = true;
      ITr.Code = frcc;
      while (LoopMain(ITr,1,LocTrHs)) begin
        if (nonblank(tocc)) then begin
          if (ITr.Code>tocc) then begin
            LocTrHs = false;
          end;
        end;
        if (LocTrHs) then begin
          firstf = true;
          INr.Group = ITr.Code;
          INTrHs = true;
          ResetLoop(INr);
          while (LoopKey("Group",INr,1,INTrHs)) begin
            if (INr.Group!=ITr.Code) then begin
              INTrHs = false;
            end;
            testf = true;
            if (nonblank(RepSpec.f1)) then begin
              if (INr.Code<fromart) then begin testf = false; end;
              if (INr.Code>toart) then begin testf = false; end;
            end;
            if (nonblank(RepSpec.TransStr)) then begin
              if (INr.AlternativeCode!=RepSpec.TransStr) then begin testf = false; end;
            end;
            if (testf) then begin
              if (nonblank(RepSpec.f4)) then begin
                if (SetInSet2(RepSpec.f4,INr.DispGroups)==false) then begin
                  testf = false;
                end;
              end;
            end;
            if (INTrHs==false) then begin testf = false; end;
            if (testf) then begin
              PrintAvailVars(RepSpec,INr.Code,INr.Code,ITr.Code,ITr.Code,location,frloc,toloc,nr,nrq2,sum1,RoundRec,1,ITr.Code,ITr.Comment,firstf);
            end;
          end;
          if ((nrq2>0) or (nr>0) or (sum1>0)) then begin
            Gray_Divider(100,1);
            StartFormat(15);
            OutString(0,0,"",false);
            OutString(100,0,USetStr(9676) & " " & ITr.Comment,false);
            OutString(5,0,"",true);
            OutVal(3,0,nr,M4UVal,true);
            OutString(4,0,"",true);
            OutVal(1,0,sum1,M4UVal,true);
            EndFormat;
            StartFormat(15);
            EndFormat;
          end;
          nrq2tot = nrq2tot + nrq2;
          nrtot = nrtot + nr;
          sum1tot = sum1tot + sum1;
          nrq2 = 0;
          nr = 0;
          sum1 = 0;
        end;
      end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,"",false);
  OutString(100,0,USetStr(9676),false);
  OutString(5,0,"",true);
  OutVal(3,0,nrtot,M4UVal,true);
/*
  if (RepSpec.flags[15]==1) then begin  
    OutVal(360,0,nrq2tot,M4UVal,true);
  end;
*/
  OutString(4,0,"",true);
  OutVal(1,0,sum1tot,M45Val,true);
  EndFormat;
L99:;  
  EndJob;
  return;
end;

