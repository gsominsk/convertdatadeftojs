external function Boolean ToDoForRecurringActivityExists(Date,Date,string,record ActVc);
external function Integer IsRedDay(Boolean,record BHollVc,Integer,Date);
external procedure HTPers(string,var string);
external procedure HT2Per(Date, Date , var string);

procedure PrintTasks(record RcVc RepSpec,record CYBlock CYb,record SysFormatBlock SFb,Boolean bhf,record BHollVc BHr,record ActVc templateActr)
begin
  LongInt actcnt;
  record ActVc Actr;
  Date td,ad;
  Boolean loopf,testf,donef;
  
  td = templateActr.TransDate;
  if (blankdate(td)) then begin
    td = RepSpec.sStartDate;
  end;
  ad = "01/01/1980";
  if (td==ad) then begin goto LPrintTasks; end;
  ad = "01/01/1900";
  if (td==ad) then begin goto LPrintTasks; end;

  loopf = true;
  while (loopf) begin
    RecordCopy(Actr,templateActr);
    switch (Actr.RecurringType) begin
      case kRecurringTypeDaily: 
        Actr.TransDate = td;
        td = AddDay(td,1);
      case kRecurringTypeWeekly: 
        td = AddDay(td,-GetDateId(td)+1);
        td = AddDay(td,Actr.RecurringWeekDay-1);
        Actr.TransDate = td;
        td = AddDay(td,7);
      case kRecurringTypeMonthly: 
        td.day = Actr.RecurringMonthDay;
        Actr.TransDate = td;
        td = AddMonth(td,1);
      case kRecurringTypeYearly: 
        td.month = Actr.RecurringMonth;
        td.day = Actr.RecurringMonthDay;
        Actr.TransDate = td;
        td = AddMonth(td,1);
      otherwise
        td = AddDay(RepSpec.sEndDate,1);
    end;
    testf = true;
    if (nonblankdate(templateActr.TransDate)) then begin
      if (Actr.TransDate<templateActr.TransDate) then begin testf = false; end;
    end;
    if (nonblankdate(templateActr.EndDate)) then begin
      if (Actr.TransDate>templateActr.EndDate) then begin testf = false; end;
    end;
    if (DateInRange(Actr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;
    if (testf) then begin
      if (templateActr.AvoidRedDays!=0) then begin
        if (IsRedDay(bhf,BHr,SFb.dateOrder,Actr.TransDate)) then begin
          testf = false;
        end;
      end;
    end;
    donef = false;
    if (testf) then begin
      donef = ToDoForRecurringActivityExists(RepSpec.sStartDate,RepSpec.sEndDate,RepSpec.f1,Actr);
    end;
    if (testf) then begin
      StartFormat(15);
      OutString(0,0,Actr.MainPersons,false);
      OutString(2,0,Actr.ActType,false);
      OutString(3,0,Actr.TransDate,false);
      OutString(4,0,Actr.Comment,false);
      if (donef) then begin
        OutString(1,0,USetStr(39216),true);
      end;
      EndFormat;
      actcnt = actcnt + 1;
    end;
    loopf = td<=RepSpec.sEndDate;
    if (actcnt>100) then begin loopf = false; end;
  end;
LPrintTasks:;    
  return;
end;

global
procedure ActReqListRn(record RcVc RepSpec)
begin
  string 10 frus,tous,index,tstr;
  Boolean found,testf;
  record ActVc Actr;
  Integer segs,rw;
  record SysFormatBlock SFb;
  record CYBlock CYb;
  record BHollVc BHr;
  Boolean bhf;
  
  StartReportJob(USetStr(39210));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTPers(RepSpec.f1,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;
  SetRepCol(2,60);
  SetRepCol(3,100);
  SetRepCol(4,160);
  StartFormat(15);
  OutString(0,0,USetStr(39211),false);
  OutString(2,0,USetStr(39212),false);
  OutString(3,0,USetStr(39213),false);
  OutString(4,0,USetStr(39214),false);
  OutString(1,0,USetStr(39215),true);
  EndFormat;
  Gray_Divider(0,1);

  BlockLoad(SFb);    
  BlockLoad(CYb);    
  BHr.CountryCode = CYb.CountryCode;
  bhf = ReadFirstMain(BHr,1,true);

  index = "TodoFlag";
  segs = 2;
  if (nonblank(RepSpec.f1)) then begin
    index = "UserMain:" & RepSpec.f1;
    segs = 2;
  end;
  Actr.TodoFlag = kTodoFlagRecurring;
  Actr.TransDate = RepSpec.sStartDate;
  found = true;  
  while (LoopKey(index,Actr,segs,found)) begin
    if (Actr.TodoFlag!=kTodoFlagRecurring) then begin found = false; end;    
    if (DateInRange(Actr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (testf) then begin
        PrintTasks(RepSpec,CYb,SFb,bhf,BHr,Actr);
      end;
    end;
  end;
  Gray_Divider(0,1);
  EndJob;
  return;
end;