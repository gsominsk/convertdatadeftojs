external procedure AutomatedSalesOrderly(string);
external function val FindAccBalance(string,string,date,record ObjBalVc,Integer,Integer,Integer,string,Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external procedure BeginCurncyTotals(var Integer);
external function Boolean GetFullCurncyRateDate(var string,Date,var val,var val,var val,var val,var val,var Date);
external procedure MockObjFromVATCode(string,var string);
external procedure GetFullCurncyRateText(Boolean,var string,val,val,val,val,val);

procedure ListExchangeRates(record RcVc RepSpec)
begin
  record CurncyCodeVc ccr;
  Boolean TrHs;
  val fr,to1,to2,br1,br2;
  Date ed;
  string 255 tstr;

  TrHs = true;
  while (LoopMain(ccr,1,TrHs)) begin
    if (GetFullCurncyRateDate(ccr.CurncyCode,RepSpec.d1,fr,to1,to2,br1,br2,ed)) then begin end;
    StartFormat(15);
    OutString(0,0,ccr.CurncyCode,false);
    OutDate(300,0,ed,false);
    if (fr<>0) then begin
      GetFullCurncyRateText(true,tstr,fr,to1,to2,br1,br2);
    end else begin
      GetFullCurncyRateText(false,tstr,fr,to1,to2,br1,br2);
    end;  
    OutString(1,0,tstr,true);
    EndFormat;
  end;
  return;
end;

global   
procedure NLRateRn(var record RcVc RepSpec)
begin
  val Bb,Cb,Db,Diff;
  val fr,to1,to2,br1,br2;
  record AccVc Accr;
  Boolean Vws;
  Boolean testf,test77,test2f;
  string 255 RU;
  record ObjBalVc ObjBalr;
  record ObjBalVc CurObjBalr;
  Boolean Objbals;
  Boolean CurObjbals;
  record NLRateBlock nlrate;
  val DiffSum,d;
  Date td;
  record BaseCurBlock BaseCurRec;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt;
  
  BlockLoad(nlrate);
  BlockLoad(BaseCurRec);
  if (blankdate(RepSpec.d1)) then begin
    RepSpec.d1 = CurrentDate();
  end;
  BeginCurncyTotals(curcnt);
  StartReportJob(USetStr(6880));
  EndHeader;
  StartFormat(20);
  OutDate(0,0,RepSpec.d1,false);
  EndFormat;

  StartFormat(15);
  OutString(0,0,USetStr(7670),false);
  OutString(100,0,USetStr(7671),false);
  OutString(200,0,USetStr(7672),false);
  OutString(300,0,USetStr(7673),true);
  OutString(360,0,USetStr(7674),true);
  OutString(420,0,USetStr(7675),true);
  OutString(1,0,USetStr(7676),true);
  EndFormat;
  Gray_Divider(0,1);

  if (RepSpec.flags[1]==1) then begin
    ListExchangeRates(RepSpec);
    StartFormat(20);
    EndFormat;
  end;

  Accr.AccNumber="";
  Vws = true;
  while (LoopMain(Accr,1,Vws)) begin
    begin
      testf = true;
      test77 = true;
      if (nonblank(RepSpec.AccStr)) then begin
        if (SetInSet(Accr.AccNumber,RepSpec.AccStr)==false) then begin
          testf = false;
          test77 = false;
        end;
      end;
    if (blank(Accr.Curncy)) then begin test77 = false; end;
    if (Accr.Curncy==BaseCurRec.BaseCur1) then begin test77 = false; end;
    if (Accr.Curncy==BaseCurRec.BaseCur2) then begin test77 = false; end;
    if (Accr.AccType>=3) then begin test77 = false; end;
    if (test77==true) then begin
        MockObjFromVATCode(Accr.Curncy,RU);
        ObjBalr.AccNumber = Accr.AccNumber;
        ObjBalr.Object = "";
        Objbals = ReadFirstMain(ObjBalr,2,true);
        CurObjBalr.AccNumber = Accr.AccNumber;
        CurObjBalr.Object = RU;
        CurObjbals = ReadFirstMain(CurObjBalr,2,true);        
        if ((Accr.AccType==0) or (Accr.AccType==1) or (Accr.AccType==2)) begin
            Bb = FindAccBalance(Accr.AccNumber,"",RepSpec.d1,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,0,RepSpec.CurncyCode,RepSpec.IncDaughter);
            Cb = FindAccBalance(Accr.AccNumber,"",RepSpec.d1,CurObjBalr,RepSpec.SimVerf,0,2,RepSpec.CurncyCode,RepSpec.IncDaughter);            
        end;
        if (testf) then begin
          if (GetFullCurncyRateDate(Accr.Curncy,RepSpec.d1,fr,to1,to2,br1,br2,td)) then begin end;
          if (RepSpec.basecurncy==0) then begin
            Db = MULRATETOBASE1(Accr.Curncy,Cb,fr,to1,to2,br1,br2,DefaultCurRoundOff);
          end else begin
            Db = MULRATETOBASE2(Accr.Curncy,Cb,fr,to1,to2,br1,br2,DefaultCurRoundOff);
          end;
          Diff = Db - Bb;
          test2f = true;
          if (RepSpec.flags[2]==1) then begin
            if (nlrate.Limit<>0) then begin          
              d = Diff;
              if (d<0) then begin d = 0 - d; end;
              if (d<nlrate.Limit) then begin test2f = false; end;
            end;
          end;
          if (test2f==true) then begin
            StartFormat(15);
            OutString(0,0,Accr.AccNumber,false);
            OutString(100,0,Left(Accr.Comment,18),false);
            OutString(200,0,Accr.Curncy,false);
            OutVal(300,0,Cb,M4Val,true);
            OutVal(360,0,Bb,M4Val,true);
            OutVal(420,0,Db,M4Val,true);
            OutVal(1,0,Diff,M4Val,true);
            EndFormat;
            DiffSum = DiffSum + Diff;
          end;
        end;
      end;
    end;
  end;

  Black_Divider(400,1);
  StartFormat(15);
  OutVal(1,0,DiffSum,M4Val,true);
  EndFormat;
  EndJob;
  AutomatedSalesOrderly("HasIntegratedNL+Run_NLRateRn");
  return;
end;
