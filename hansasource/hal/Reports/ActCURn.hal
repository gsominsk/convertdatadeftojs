external function Boolean CheckTodoAcessAct(record ActVc,string);
external function Boolean FindCustomerRelation(string,string,var record CUVc);
external function Integer CountObjects(string);
external procedure vTimeDiff(Time,Time,var val);
external procedure HT2Per(Date, Date , var string);
external procedure HTCustCat(string,var string);
external procedure HTCustClass(string,var string);
external function Boolean SetInSet2(string,string);

global
function Boolean WrapAndPrint(Integer pos,string tstr,Integer rowlen)
BEGIN
  Integer l,cnt;
  Boolean endlf;
  
  endlf = true;
  if (len(tstr)>rowlen) then begin
    l = len(tstr);
    while (cnt<=l) begin
      OutString(pos,0,Mid(tstr,cnt,rowlen),false);
      EndFormat;
      cnt = cnt + rowlen;
      endlf = false;
      if (cnt<l) then begin
        StartFormat(15);
        endlf = true;
      end;
    end;  
  end else begin
    OutString(pos,0,tstr,false);
  end;  
  WrapAndPrint = endlf;
  RETURN;
END;

procedure PrintCustomerDetails(record CUVc CUr)
BEGIN
  string 255 tstr;
  
  StartFormat(15);
  OutString(8,0,CUr.InvAddr0,false);
  tstr = USetStr(2307);
  tstr = tstr & CUr.Phone;
  OutString(3,0,tstr,false);
  EndFormat;
  StartFormat(15);
  OutString(8,0,CUr.InvAddr1,false);
  if (nonblank(CUr.Fax)) then begin
    tstr = USetStr(2308);
    tstr = tstr & CUr.Fax;
    OutString(3,0,tstr,false);
  end;
  EndFormat;
  StartFormat(15);
  OutString(8,0,CUr.InvAddr2,false);
  EndFormat;
  if (nonblank(CUr.InvAddr3)) then begin
    StartFormat(15);
    OutString(8,0,CUr.InvAddr3,false);
    EndFormat;
  end;
  if (nonblank(CUr.InvAddr4)) then begin
    StartFormat(15);
    OutString(8,0,CUr.InvAddr4,false);
    EndFormat;
  end;
  if (nonblank(CUr.TheirCode)) then begin
    StartFormat(15);
    tstr = USetStr(4031) & CUr.TheirCode;
    OutString(8,0,tstr,false);
    EndFormat;
  end;
  if (nonblank(CUr.DelAddr0)) then begin
    StartFormat(15);
    OutString(8,0,USetStr(2306),false);
    EndFormat;
    StartFormat(15);
    OutString(8,0,CUr.DelAddr0,false);
    EndFormat;
  end;
  if (nonblank(CUr.DelAddr1)) then begin
    StartFormat(15);
    OutString(8,0,CUr.DelAddr1,false);
    EndFormat;
  end;
  if (nonblank(CUr.DelAddr2)) then begin
    StartFormat(15);
    OutString(8,0,CUr.DelAddr2,false);
    EndFormat;
  end;
  if (nonblank(CUr.DelAddr3)) then begin
    StartFormat(15);
    OutString(8,0,CUr.DelAddr3,false);
    EndFormat;
  end;
  if (nonblank(CUr.DelAddr4)) then begin
    StartFormat(15);
    OutString(8,0,CUr.DelAddr4,false);
    EndFormat;
  end;
  if (nonblank(CUr.CustCat) or nonblank(CUr.SearchKey)) then begin
    StartFormat(15);
    tstr = USetStr(2315);
    tstr = tstr & CUr.CustCat;
    OutString(8,0,tstr,false);
    tstr = USetStr(2316);
    tstr = tstr & CUr.SearchKey;
    OutString(3,0,tstr,false);
    EndFormat;
  end;
  StartFormat(15);
  tstr = USetStr(2309);
  tstr = tstr & CUr.PayDeal;
  OutString(8,0,tstr,false);
  if (nonblank(CUr.Objects)) then begin
    tstr = USetStr(2317);
    tstr = tstr & CUr.Objects;
    OutString(3,0,tstr,false);
  end;
  EndFormat;
  if (nonblank(CUr.ShipDeal) or nonblank(CUr.ShipMode)) then begin
    StartFormat(15);
    tstr = USetStr(2313);
    tstr = tstr & CUr.ShipDeal;
    OutString(8,0,tstr,false);
    tstr = USetStr(2314);
    tstr = tstr & CUr.ShipMode;
    OutString(3,0,tstr,false);
    EndFormat;
  end;
  if (nonblank(CUr.Sorting)) then begin
    StartFormat(15);
    tstr = USetStr(7118);
    tstr = tstr & ": " & CUr.Sorting;
    OutString(8,0,tstr,false);
    EndFormat;
  end;
  if ((nonblank(CUr.Department)) or (nonblank(CUr.VATNr))) then begin
    StartFormat(15);
    tstr = USetStr(7117);
    tstr = tstr & ": " & CUr.Department;
    OutString(8,0,tstr,false);
    tstr = USetStr(5206);
    tstr = tstr & ": " & CUr.VATNr;
    OutString(3,0,tstr,false);
    EndFormat;
  end;
  if (nonblank(CUr.Comment)) then begin
    StartFormat(15);
    tstr = USetStr(6685);
    tstr = tstr & ": " & CUr.Comment;
    OutString(8,0,tstr,false);
    EndFormat;
  end;
  if (nonblank(CUr.WarnText1)) then begin
    StartFormat(15);
    tstr = USetStr(2318);
    tstr = tstr & CUr.WarnText1;
    OutString(8,0,tstr,false);
    EndFormat;
  end;
  if (nonblank(CUr.BankAccount) or nonblank(CUr.AccOperator)) then begin
    StartFormat(15);
    tstr = USetStr(4103);
    tstr = tstr & ": " & CUr.BankAccount;
    OutString(8,0,tstr,false);
    tstr = USetStr(4033);
    tstr = tstr & CUr.AccOperator;
    OutString(3,0,tstr,false);
    EndFormat;
  end;
  if (nonblank(CUr.Classification)) then begin
    tstr = USetStr(6679);
    tstr = tstr & ": " & CUr.Classification;
    OutString(8,0,tstr,false);
  end;
  RETURN;
END;

procedure PrintContactDetails(string name,string cucode)
BEGIN
  record CUVc ContactCUr;
  
  if (nonblank(name)) then begin
    if (FindCustomerRelation(cucode,name,ContactCUr)) then begin
      StartFormat(15);
      OutString(6,0,ContactCUr.Name,false);
      OutString(2,0,ContactCUr.Phone,false);
      OutString(4,0,ContactCUr.Fax,false);
      OutString(5,0,ContactCUr.Mobile,false);
      EndFormat;
    end;
  end;
  RETURN;
END;

procedure RepAct(record ActVc Actr,Integer sortord,record RcVc RepSpec,var val tottimev)
BEGIN
  Integer i,rwcnt;
  row ActVc Actrw;
  Time timet;
  val timev;
  record UserVc Userr;

  if (Actr.CalTimeFlag==1) then begin
    if (nonblanktime(Actr.CostTime)) then begin
      vTimeDiff(timet,Actr.CostTime,timev);
    end else begin
      vTimeDiff(Actr.EndTime,Actr.StartTime,timev);
    end;  
    tottimev = tottimev + timev;
  end;          
  if (sortord==0) then begin
      StartFormat(15);
      OutLongInt(0,"DblActVc",Actr.SerNr,false);
      OutDate(6,0,Actr.TransDate,false);
      OutVal(7,0,timev,M4UVal,true);
      OutString(2,0,Actr.ActType,false);
      if (Actr.PrivateFlag!=0) then begin
        OutString(160,0,"*",false);
      end else begin
        OutString(160,0,"",false);
      end;
      if (RepSpec.flags[6]!=0) then begin
        Userr.Code = Actr.MainPersons;
        if (ReadFirstMain(Userr,1,true)) then begin end;
        OutString(3,0,Userr.Name,false);
      end else begin
        OutString(3,"DblPersAct",Actr.MainPersons,false);
      end;
      OutString(4,0,Actr.Contact,false);
/* Not so beautiful...
      if (WrapAndPrint(5,Actr.Comment,20)) then begin
        EndFormat;
      end;
*/
      OutString(5,0,Left(Actr.Comment,45),false);
      EndFormat;
//      if (WrapAndPrint(5,Actr.Comment,45)) then begin
//        EndFormat;
//      end;
      if (RepSpec.ArtMode==1) then begin
        rwcnt = MatRowCnt(Actr);
        for (i = 0 ; i<rwcnt ;i=i+1) begin
          MatRowGet(Actr,i,Actrw);
          StartFormat(15);
          OutString(100,0,Actrw.TextCode,false);
          if (WrapAndPrint(150,Actrw.Text,130)) then begin
            EndFormat;
          end;
        end;
        if ((RepSpec.flags[5]!=0) and (RepSpec.ArtMode==1)) then begin
          PrintContactDetails(Actr.Contact,Actr.CUCode);
        end;        
        StartFormat(10);
        EndFormat;
      end;
    end;
  if (sortord==1) then begin
      StartFormat(15);
      OutLongInt(0,"DblActVc",Actr.SerNr,false);
      OutDate(6,0,Actr.TransDate,false);
      OutString(2,0,Actr.ActType,false);
      OutString(3,"DblCustAct",Actr.CUCode,false);
      OutString(4,0,Actr.Contact,false);
      OutString(5,0,Actr.Comment,false);
      EndFormat;
      if (RepSpec.ArtMode==1) then begin
        rwcnt = MatRowCnt(Actr);
        for (i = 0 ; i<rwcnt ;i=i+1) begin
          MatRowGet(Actr,i,Actrw);
          StartFormat(15);
          OutString(150,0,Actrw.TextCode,false);
          OutString(200,0,Actrw.Text,false);
          EndFormat;
        end;
        if ((RepSpec.flags[5]!=0) and (RepSpec.ArtMode==1)) then begin
          PrintContactDetails(Actr.Contact,Actr.CUCode);
        end;        
        StartFormat(10);
        EndFormat;
      end;
  end;
  return;
end;

global 
procedure ActCURn(record RcVc RepSpec)
begin
  Boolean testf,TrHs,headout;
  String 20 frcc,tocc;
  String 20 frpers,topers;
  string 255 ckey,headitem;
  record ActVc Actr;
  record CUVc CUr;
  record ActTypeVc ATr;
  String 5 curuser;
  Integer rw;
  val custtimev,tottimev;
  string 255 tstr;
  LongInt frprio,toprio;
  LongInt custactnr,totactnr;
  Integer i,rwcnt;
  row ActVc Actrw;
  
  headout = false;
  frcc = FirstInRange(RepSpec.f1,20);
  tocc = LastInRange(RepSpec.f1,20);
  frpers = FirstInRange(RepSpec.f2,20);
  topers = LastInRange(RepSpec.f2,20);
  frprio = FirstInRange(RepSpec.LastAcc,10);
  toprio = LastInRange(RepSpec.LastAcc,10);
  curuser = CurrentUser;
  StartReportJob(USetStr(6680));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (nonblank(RepSpec.ObjStr)) then begin
    HTCustCat(RepSpec.ObjStr,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.Stext)) then begin
    HTCustClass(RepSpec.Stext,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end; 
  if (nonblank(RepSpec.f1)) then begin
    tstr = USetStr(9322);
    tstr = tstr & ": " & RepSpec.f1;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.f3)) then begin
    tstr = USetStr(9324);
    tstr = tstr & ": " & RepSpec.f3;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.AccStr)) then begin
    tstr = USetStr(8884);
    tstr = tstr & ": " & RepSpec.AccStr;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.FirstAcc)) then begin
    tstr = USetStr(8728);
    tstr = tstr & ": " & RepSpec.FirstAcc;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;  
  tstr= USetStr(8901);
  tstr = tstr & ": " & RepSpec.f2;
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;
  SetRepCol(6,50);
  SetRepCol(7,120);
  SetRepCol(2,125);
  SetRepCol(3,165);
  SetRepCol(4,220);
  SetRepCol(5,310);
  SetRepCol(8,100);
  custactnr = 0;
  totactnr = 0;  
  Actr.CUCode = frcc;
  Actr.TransDate = RepSpec.sStartDate;
//  if (CountObjects(RepSpec.f2)==1) then begin // Would have been good with another index.
//    ckey = "CUCodeUserMain:" & RepSpec.f2;
//  end else begin
    ckey = "CUCode";
//  end;
  Gray_Divider(0,1);
  TrHs = true;
  while (LoopKey(ckey,Actr,3,TrHs)) begin
    if (TrHs) then begin
      if (nonblank(tocc)) then begin
        if (Actr.CUCode>tocc) then begin TrHs = false; end;
      end;  
    end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.f2)) then begin
        testf = SetInSet(RepSpec.f2,Actr.MainPersons);
      end;
      if (DateInRange(Actr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
        testf = false; 
      end;
      if (testf) then begin
        if (nonblank(RepSpec.f3)) then begin
          if (Actr.ActType<>RepSpec.f3) then begin testf = false; end;
        end;
        if (RepSpec.flags[3]==1) then begin
          if (nonblank(Actr.ActType)) then begin testf = false; end;
        end;
      end;
      if (testf) then begin
        if (Actr.OKFlag==1) then begin
          if (RepSpec.flags[1]==0) then begin testf = false; end;
        end else begin
          if (RepSpec.flags[2]==0) then begin testf = false; end;
        end;
      end;
      if (nonblank(Actr.CUCode)) then begin
        CUr.Code = Actr.CUCode;
        if (ReadFirstMain(CUr,1,true)) then begin end;
      end;
      if (testf) then begin
        if (nonblank(RepSpec.Stext)) then begin
          if (SetInSet2(RepSpec.Stext,CUr.Classification)==false) then begin
            testf = false;
          end;
        end;
        if (nonblank(RepSpec.ObjStr)) then begin
          if (RepSpec.ObjStr<>CUr.CustCat) then begin
            testf = false;
          end;  
        end;
        if (nonblank(RepSpec.TransStr)) then begin
          if (CUr.SearchKey<>RepSpec.TransStr) then begin testf = false; end;
        end;
        if (blank(Actr.CUCode)) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        if (Actr.PrivateFlag!=0) then begin
          if ((SetInSet(curuser,Actr.MainPersons)==false) and
              (SetInSet(curuser,Actr.CCPersons)==false)) then begin
            testf = false;
          end;
        end;
      end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (Actr.PRCode<>RepSpec.AccStr) then begin testf = false; end;
      end;
      if (testf) then begin
        if (nonblank(RepSpec.LastAcc)) then begin
          if (Actr.PrioLevel<frprio) then begin testf = false; end;
          if (Actr.PrioLevel>toprio) then begin testf = false; end;
        end;
      end;
      if (testf) then begin
        if (nonblank(RepSpec.ObjType)) then begin
          testf = false;
          rwcnt = MatRowCnt(Actr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(Actr,i,Actrw);
            if (Actrw.TextCode==RepSpec.ObjType) then begin
              testf = true;
              i = rwcnt;
            end;
          end;
        end;
      end;
      if (testf) then begin
        if (nonblank(RepSpec.FirstAcc)) then begin
          ATr.Code = Actr.ActType;
          if (ReadFirstMain(ATr,1,true)) then begin
            if (ATr.ActTypeGr<>RepSpec.FirstAcc) then begin 
              testf = false;
            end;
          end else begin
            testf = false;
          end;
        end;
      end;
      if (Actr.Invalid!=0) then begin testf = false; end;
      if (testf) then begin
        testf = CheckTodoAcessAct(Actr,CurrentUser);
      end;
      if (testf) then begin
        if (Actr.CUCode<>headitem) then begin
          if (nonblank(headitem)) then begin
            Gray_Divider(0,1);
            StartFormat(15);
            OutVal(7,0,custtimev,M4UVal,true);
            OutLongInt(480,0,custactnr,true);
            EndFormat;
            headout = true;
          end;
          tottimev = tottimev + custtimev;
          totactnr = totactnr + custactnr;
          custtimev = blankval;
          custactnr = 0;
          StartFormat(15);
          OutString(0,0,Actr.CUCode,false);
          OutString(8,0,Actr.CUName,false);
          if (RepSpec.flags[3]==1) then begin
            OutString(300,0,Actr.Phone,false);
          end;
          EndFormat;
          if (RepSpec.flags[4]==1) then begin
            PrintCustomerDetails(CUr);
          end;
          StartFormat(5);
          EndFormat;
          headitem = Actr.CUCode;
          StartFormat(15);
          switch (RepSpec.Media) begin
            case mtFile:
              OutString(0,0,"",false);
              OutString(6,0,USetStr(6682),false);
              OutString(0,0,"",false);
              OutString(0,0,"",false);
              OutString(2,0,USetStr(6687),false);
              OutString(3,0,USetStr(6684),false);
              OutString(4,0,USetStr(6688),false);
              OutString(5,0,USetStr(6685),false);
            otherwise
              OutString(6,0,USetStr(6682),false);
              OutString(2,0,USetStr(6687),false);
              OutString(3,0,USetStr(6684),false);
              OutString(4,0,USetStr(6688),false);
              OutString(5,0,USetStr(6685),false);
          end;
          EndFormat;
          Gray_Divider(6,1);
        end;
        RepAct(Actr,0,RepSpec,custtimev);
        custactnr = custactnr + 1;
      end;
    end;
  end;
  
  Gray_Divider(0,1);
  StartFormat(15);
  OutVal(7,0,custtimev,M4UVal,true);
  OutLongInt(480,0,custactnr,true);
  EndFormat;
  tottimev = tottimev + custtimev;
  totactnr = totactnr + custactnr;
  if (headout) then begin
    Gray_Divider(8,140);
    StartFormat(15);
    OutVal(7,0,tottimev,M4UVal,true);
    OutLongInt(480,0,totactnr,true);
    EndFormat;
  end;
  
  EndJob;
  RETURN;
END;
