external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean HasIntegratedNL();
external function Boolean HasObjects();
external function Boolean HasMultiLocations();
external procedure HTDetailLevel(Integer, var string);
external procedure HTOKF(Integer,Integer, var string);
external procedure HT2Per(Date, Date , var string);

procedure RepStockDepr(record SDVc SDr, var val totp,record RcVc RepSpec)
BEGIN
  Integer i,rwcnt;
  row SDVc SDrw;
  val amount, total,t;
  Boolean testf;
  record MainStockBlock MainStockRec;
  record INVc INr;
  
  BlockLoad(MainStockRec);
  testf = true;
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
    OutLongInt(0,"DblSD",SDr.SerNr,false);
    OutDate(60,0,SDr.TransDate,false);
    if (HasIntegratedNL) then begin
      OutString(110,0,SDr.CostAcc,false);
    end;
    if (HasMultiLocations) then begin
      OutString(200,0,SDr.Location,false);
    end;
    if (HasObjects) then begin     
      OutString(300,0,SDr.Objects,false);
    end;
    EndFormat;
  end;
  rwcnt = MatRowCnt(SDr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SDr,i,SDrw);
    if (SDrw.Qty<>0) then begin
      amount = SDrw.FIFORowVal;
      if (amount==0) then begin
        amount = SDrw.Qty*SDrw.FIFO;
      end;
      if (RepSpec.flags[4]==2) then begin
        amount = SDrw.Qty * SDrw.BasePrice;
      end;
      total = total + amount;
      if (RepSpec.ArtMode==1) then begin
        ReadFirstItem(SDrw.ArtCode,INr,false,true);
        StartFormat(15);
        OutString(20,0,SDrw.ArtCode,false);
        if (HasIntegratedNL) then begin
          OutString(110,0,SDrw.CostAcc,false);
        end;
        OutString(170,0,INr.Unittext,false);
        OutString(200,0,SDrw.Spec,false);
        if (RepSpec.flags[3]==1) then begin
          if (SDrw.Coefficient==0) then begin
            t = SDrw.Qty;
          end else begin
            if (MainStockRec.UnitConvCalc==0) then begin
              t = SDrw.Qty*SDrw.Coefficient;
            end else begin
              t = SDrw.Qty/SDrw.Coefficient;
            end;
          end;  
          OutVal(380,0,t,M4Qty,true);
        end;  
        OutVal(420,0,SDrw.Qty,M4Qty,true);
        OutVal(480,0,amount,M4Val,true);
        EndFormat;
        if ((nonblank(SDrw.Recepy)) or (nonblank(SDrw.Objects)) or (nonblank(SDrw.SerialNr)) or (nonblank(SDrw.Location))) then begin
          StartFormat(15);
          OutString(100,0,SDrw.Recepy,false);
          if (HasObjects) then begin     
            OutString(300,0,SDrw.Objects,false);
          end;
          OutString(360,0,SDrw.SerialNr,false);
          if (HasMultiLocations) then begin
            OutString(480,0,SDrw.Location,true);
          end;
          EndFormat;
        end;
      end;
    end; // SDrw.Qty<>0
  end;
  if (RepSpec.ArtMode==1) then begin
     StartFormat(15);
     OutString(0,0,SDr.Comment,false);
     OutString(380,0,USetStr(2355),false);
     OutVal(480,0,total,M4Val,true);
     EndFormat;
  end;
  totp = totp + total;  
  RETURN;
END;

function
Boolean DateInTheRange(Date check,Date start,Date enddate)
BEGIN
  Boolean res;

  res = true;
  if (nonblankdate(start)) then begin
    if (check<start) then begin res = false; end;
  end;
  if (nonblankdate(enddate)) then begin
    if (check>enddate) then begin res = false; end;
  end;
  DateInTheRange = res;
  RETURN;
END;

global
procedure StockDepRn(record RcVc RepSpec)
begin
  record SDVc SDr;
  record MainStockBlock MainStockRec;
  Boolean TrHs;
  Boolean testf;
  val total,sum;
  string 255 fracc,toacc,frloc,toloc;
  string 255 tstr;
  LongInt afr,ato;
  Integer rw;
  
  BlockLoad(MainStockRec);
  rw = 1;
  afr = FirstInRange(RepSpec.f1,20);
  ato = LastInRange(RepSpec.f1,20);
  fracc = FirstInRange(RepSpec.TransStr,10);
  toacc = LastInRange(RepSpec.TransStr,10);
  frloc = FirstInRange(RepSpec.f3,10);
  toloc = LastInRange(RepSpec.f3,10);

  StartReportJob(USetStr(7600));
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTDetailLevel(RepSpec.ArtMode,tstr);
  Header(rw,tstr,0);
  HTOKF(RepSpec.flags[1],RepSpec.flags[2],tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;  
  tstr = RepSpec.f1;
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.TransStr)) then begin
    tstr = USetStr(7603);
    tstr = tstr & " ";
    tstr = tstr & RepSpec.TransStr;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f3)) then begin
    tstr = USetStr(7604);
    tstr = tstr & " ";
    tstr = tstr & RepSpec.f3;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f2)) then begin
    tstr = USetStr(7605);
    tstr = tstr & " ";
    tstr = tstr & RepSpec.f2;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  EndHeader;
  if (RepSpec.ArtMode==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(7601),false);
    OutString(60,0,USetStr(7602),false);
    OutString(130,0,USetStr(7603),false);
    if blank(RepSpec.f3) then begin
      if (HasMultiLocations) then begin     
        OutString(190,0,USetStr(7604),false);
      end;
      if (HasObjects) then begin     
        OutString(250,0,USetStr(7605),false);
      end;
      OutString(300,0,USetStr(2763),false);
    end else begin
      if (HasObjects) then begin     
        OutString(190,0,USetStr(7605),false);
      end;
      OutString(250,0,USetStr(2763),false);
    end;
    if (RepSpec.flags[4]==1) then begin
      OutString(1,0,USetStr(5251),true);   // Base Price
    end;
    if (RepSpec.flags[4]==2) then begin
      OutString(1,0,USetStr(5253),true);   // New and old cost price
    end;
    EndFormat;
  end;
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
    OutString(0,0,USetStr(7601),false);
    OutString(60,0,USetStr(7602),false);
    OutString(110,0,USetStr(7603),false);
    OutString(170,0,USetStr(7608),false);
    if (HasMultiLocations) then begin
      OutString(200,0,USetStr(7604),false);
    end;
    if (HasObjects) then begin     
      OutString(300,0,USetStr(7605),false);
    end;
    if (RepSpec.flags[3]==1) then begin
      OutString(380,0,USetStr(7593),true);
    end;  
    OutString(420,0,USetStr(7606),true);
    OutString(480,0,USetStr(7607),true);
    EndFormat;
  end;
  if (RepSpec.ArtMode==0) then begin
    Gray_Divider(0,1);
  end;  
  SDr.SerNr = afr;
  TrHs = true;
  while (LoopMain(SDr,1,TrHs)) begin
      if (ato<>-1) then begin
        if (SDr.SerNr>ato) then begin
          TrHs = false;
        end; 
      end;          
   if (TrHs) then begin
     testf = true;
     if (nonblank(RepSpec.TransStr)) then begin
       if (SDr.CostAcc<fracc) then begin testf = false; end;
       if (SDr.CostAcc>toacc) then begin testf = false; end;
     end;
     if (nonblank(RepSpec.f3)) then begin
       if (blank(SDr.Location)) then begin
         if ((frloc<>MainStockRec.MainStock) and (toloc<>MainStockRec.MainStock)) then begin
           testf = false;
         end;
       end else begin
         if (SDr.Location<frloc) then begin testf = false; end;
         if (SDr.Location>toloc) then begin testf = false; end;
       end;  
     end;
     if ((nonblank(RepSpec.f2)) and (SetInSet(RepSpec.f2,SDr.Objects)==false)) then begin testf = false; end;
     if (DateInTheRange(SDr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;

     if ((RepSpec.flags[1]==0) and (SDr.OKFlag==0)) then begin testf = false; end;
     if ((RepSpec.flags[2]==0) and (SDr.OKFlag!=0)) then begin testf = false; end;
     if (testf) then  begin
       if (RepSpec.ArtMode==1) then begin
         Gray_Divider(0,1);
         RepStockDepr(SDr,total,RepSpec);
       end;
       if (RepSpec.ArtMode==0) then begin
         sum = 0;
         StartFormat(15);
         OutLongInt(0,"DblSD",SDr.SerNr,false);
         OutDate(60,0,SDr.TransDate,false);             
         if (HasIntegratedNL) then begin
           OutString(130,0,SDr.CostAcc,false);
         end;
         if (blank(RepSpec.f3)) then begin
           if (HasMultiLocations) then begin
             OutString(190,0,SDr.Location,false);
           end;
           if (HasObjects) then begin     
             OutString(250,0,SDr.Objects,false);
           end;
           OutString(300,0,SDr.Comment,false);
         end else begin
           if (HasObjects) then begin     
             OutString(190,0,SDr.Objects,false);
           end;
           OutString(250,0,SDr.Comment,false);
         end;
         if (RepSpec.flags[4]<>0) then begin
            RepStockDepr(SDr,sum,RepSpec);
            total = total + sum;
            OutVal(1,0,sum,M4Val,true);
         end;
         EndFormat;
       end;
      end;
    end; // TrHs
  end;  // While
  if (RepSpec.flags[4]<>0) then begin
     Gray_Divider(0,1);
     OutVal(480,0,total,M4Val,true);
     Gray_Divider(0,1);
  end;
  EndJob;
  RETURN;
END;
