external procedure HTDetailLevel(Integer, var string);
external procedure HTProjects(string,string,var string);
external procedure HTActTypes(string,string, var string);
external procedure HTPers(string,var string);
external procedure HT2Per(Date, Date , var string);

external function LongInt DateDiff(Date,Date);
external procedure ExtractObj(string,var Integer,var string);
external function Time TimeDiff(Time,Time);
external procedure vTimeDiff(Time,Time,var val);

procedure ActivitiesForUserPerDay(record RcVc RepSpec,record UserVc Userr,Date ondate,var Boolean firstf,
                                  var val totdaytime,var val totreptime)
BEGIN
  Boolean TrHs,testf,printf,firstuf;
  record ActVc checkActr;
  record ActVc Actr;
  string 255 ukey;
  val timev;
  Integer dateid;
  record ActTypeVc ATr;
  
  dateid = GetDateID(ondate);
  timev = 0;
  if (RepSpec.vals0!=0) or (RepSpec.vals1!=0) then begin    
    TrHs = true;  
    checkActr.TransDate = ondate;
    checkActr.TodoFlag = 0; // Calendar
    ukey = "UserMain:" & Userr.Code;
    while (LoopKey(ukey,checkActr,3,TrHs)) begin
//StopAlert("Comment " & checkActr.Comment & " TodoFlag " & checkActr.TodoFlag);
      if (checkActr.TodoFlag!=0) then begin TrHs = false; end;
      if (checkActr.TransDate!=ondate) then begin TrHs = false; end;      
      if (TrHs) then begin
        testf = true;
        if (checkActr.CalTimeFlag!=1) then begin testf = false; end;
        if (checkActr.Invalid!=0) then begin testf = false; end;
        if (nonblank(RepSpec.f2)) then begin 
          if (checkActr.ActType!=RepSpec.f2) then begin testf = false; end;
        end;
        if (testf) then begin
          if (nonblank(RepSpec.FirstAcc)) then begin
            ATr.Code = Actr.ActType;
            if (ReadFirstMain(ATr,1,true)) then begin
              if (ATr.ActTypeGr!=RepSpec.FirstAcc) then begin 
                testf = false;
              end;
            end else begin
              testf = false;
            end;
          end;
        end;
        if (nonblank(RepSpec.TransStr)) then begin 
          if (checkActr.PRCode!=RepSpec.TransStr) then begin testf = false; end;
        end;
//--------
        if (RepSpec.vals0!=0) then begin
          if (timev>=RepSpec.vals0) then begin TrHs = false; end;
        end;
        if (checkActr.PrivateFlag!=0) then begin testf = false; end;
        if (testf) then begin
          timev = timev + TimeToVal(checkActr.CostTime);     
        end;
      end;
    end;
    printf = false;
    if (RepSpec.vals0!=0) then begin
      if (timev<RepSpec.vals0) then begin printf = true; end;
    end;
    if (RepSpec.vals1!=0) then begin
      if (timev>RepSpec.vals1) then begin printf = true; end;
    end;
  end;
  if (printf) then begin
    TrHs = true;  
  end else begin
    TrHs = false;  
  end;
  if (RepSpec.ArtMode!=0) then begin
    timev = 0;
  end;
  firstuf = true;
  Actr.TransDate = ondate;
  Actr.TodoFlag = 0; // Calendar
  ukey = "UserMain:" & Userr.Code;
  while (LoopKey(ukey,Actr,3,TrHs)) begin
//StopAlert("Comment " & Actr.Comment & " TodoFlag " & Actr.TodoFlag);
    if (Actr.TodoFlag!=0) then begin TrHs = false; end;
    if (Actr.TransDate!=ondate) then begin TrHs = false; end;      
    if (TrHs) then begin
      testf = true;
      if (Actr.CalTimeFlag!=1) then begin testf = false; end;
      if (Actr.Invalid!=0) then begin testf = false; end;
      if (nonblank(RepSpec.f2)) then begin 
        if (Actr.ActType!=RepSpec.f2) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.TransStr)) then begin 
        if (Actr.PRCode!=RepSpec.TransStr) then begin testf = false; end;
      end;
//--------
/*this is checked above
      if (testf) then begin
        timev = timev + TimeToVal(Actr.CostTime);     
//        timev = TimeToVal(TimeDiff(Actr.StartTime,Actr.EndTime));     
      end;
      if (RepSpec.vals0!=0) then begin
        if (timev>=RepSpec.vals0) then begin testf = false; end;
      end;
      if (RepSpec.vals1!=0) then begin
        if (timev<=RepSpec.vals1) then begin testf = false; end;
      end;
*/      
      switch (RepSpec.flags[1]) begin
        case 1:
          if ((dateid==6) or (dateid==7)) then begin
            testf = false;
          end;
        case 2:
          if ((dateid!=6) and (dateid!=7)) then begin
            testf = false;
          end;
      end;
      if (Actr.PrivateFlag!=0) then begin testf = false; end;
      if (testf) then begin
        if (RepSpec.ArtMode!=0) then begin
          if (firstf) then begin
            StartFormat(15);
             OutDate(0,0,ondate,false);
             OutString(100,0,USetStr(2792+dateid),false);
            EndFormat;
            firstf = false;
          end;
          if (firstuf) then begin
            StartFormat(15);
             OutString(0,0,Userr.Code,false);
            EndFormat;
            firstuf = false;
          end;
          StartFormat(15);
           OutString(0,0,Actr.StartTime,false);
           OutString(60,0,Actr.EndTime,false);
           OutString(140,0,Actr.ActType,false);
           OutStringID(200,"DblActRec",Actr.Comment,false,Actr.SerNr);
           OutString(480,0,Actr.CostTime,true);
//           OutVal(480,0,timev,M4Val,true);
          EndFormat;
          totreptime = totreptime + TimeToVal(Actr.CostTime);
          totdaytime = totdaytime + TimeToVal(Actr.CostTime);
        end;
      end;
    end;
  end;
  if (printf) then begin
    if (RepSpec.ArtMode==0) then begin
      testf = true;
      switch (RepSpec.flags[1]) begin
        case 1:
          if ((dateid==6) or (dateid==7)) then begin
            testf = false;
          end;
        case 2:
          if ((dateid!=6) and (dateid!=7)) then begin
            testf = false;
          end;
      end;
      if (testf) then begin
        if (firstf) then begin
          StartFormat(15);
           OutDate(0,0,ondate,false);
           OutString(100,0,USetStr(2792+dateid),false);
          EndFormat;
          firstf = false;
        end;
        StartFormat(15);
         OutString(100,0,Userr.Code,false);
         OutString(200,0,Userr.Name,false);
         OutVal(420,0,timev,M4Val,true);
        EndFormat;
      end;
    end else begin
      if (firstf) then begin
        StartFormat(15);
         OutDate(0,0,ondate,false);
         OutString(100,0,USetStr(2792+dateid),false);
        EndFormat;
        firstf = false;
      end;
      if (firstuf) then begin
        StartFormat(15);
         OutString(0,0,Userr.Code,false);
         OutString(480,0,timev,true);
        EndFormat;
        firstuf = false;
      end;
    end;
    totreptime = totreptime + timev;
    totdaytime = totdaytime + timev;
  end;
  RETURN;
END;

procedure ActivitiesPerDay(record RcVc RepSpec,Date ondate,string dispgr,var Boolean firstf,var val totreptime)
BEGIN
  Boolean TrHs;
  record UserVc Userr;
  string 20 frus,tous,usercode;
  Boolean testf;
  Integer pos;
  val totdaytime;
    
  frus = FirstInRange(RepSpec.f1,10);
  tous = LastInRange(RepSpec.f1,10);
  TrHs = true;
  Userr.Code = frus;
  while (LoopMain(Userr,1,TrHs)) begin
    if (nonblank(RepSpec.f1)) then begin
      if (Userr.Code>tous) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.AccStr)) then begin
        testf = false;
        pos = 0;
        ExtractObj(dispgr,pos,usercode);
        while (nonblank(usercode)) begin
          if (Userr.Code==usercode) then begin 
            testf = true;
            goto LActivitiesForUserPerDayPrint;
          end;
          ExtractObj(dispgr,pos,usercode);
        end;
LActivitiesForUserPerDayPrint:;      
      end;
      if (testf) then begin        
        ActivitiesForUserPerDay(RepSpec,Userr,ondate,firstf,totdaytime,totreptime);
        if (totdaytime!=0) then begin
          if (RepSpec.ArtMode!=0) then begin
            Gray_Divider(420,1);
            StartFormat(15);
             OutVal(1,0,totdaytime,M4Val,true);
            EndFormat;
          end;
          totdaytime = 0;
        end;
      end;
    end;
  end;
  if (totdaytime!=0) then begin
    if (RepSpec.ArtMode==0) then begin
      Gray_Divider(380,420);
      StartFormat(15);
       OutVal(420,0,totdaytime,M4Val,true);
      EndFormat;
    end;
  end;
  RETURN;
END;

global
procedure UserActCheckRn(record RcVc RepSpec)
BEGIN
  Date td;
  Boolean TrHs,firstf,testf;
  record CalDispGroupBlock CalDispGroupRec;
  row CalDispGroupBlock CalDispGrouprw;
  Integer i,rwcnt; 
  string 255 dispgr;
  val totreptime;
  Integer rw,dateid;
  string 255 tstr;

  if (nonblank(RepSpec.AccStr)) then begin
    BlockLoad(CalDispGroupRec);
    rwcnt = MatRowCnt(CalDispGroupRec);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CalDispGroupRec,i,CalDispGrouprw);
      if (CalDispGrouprw.Code==RepSpec.AccStr) then begin
        dispgr = CalDispGrouprw.DefStr;
        goto LBREAK;
      end;
    end;
LBREAK:;  
  end;
  StartReportJob(USetStr(14280));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTPers(RepSpec.f1,tstr);
  Header(rw,tstr,0);
  HTActTypes(RepSpec.f2,RepSpec.f2,tstr);
  Header(rw,tstr,1);  
  rw = rw + 1;
  HTDetailLevel(RepSpec.ArtMode,tstr);
  Header(rw,tstr,0);  
  HTProjects(RepSpec.TransStr,RepSpec.TransStr,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  switch (RepSpec.flags[1]) begin
    case 0: tstr = USetStr(14292);
    case 1: tstr = USetStr(14293);
    case 2: tstr = USetStr(14294);
  end;
  Header(rw,tstr,0);  
  if (nonblank(RepSpec.AccStr)) then begin
    tstr = USetStr(8744) & ": " & RepSpec.AccStr;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.FirstAcc)) then begin
    tstr = USetStr(11682) & ": " & RepSpec.FirstAcc;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.vals0)) then begin
    tstr = USetStr(14290) & ": " & RepSpec.vals0;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.vals1)) then begin
    tstr = USetStr(14291) & ": " & RepSpec.vals1;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  EndHeader;  
  if (RepSpec.ArtMode==0) then begin
    StartFormat(15);
     OutString(0,0,USetStr(14281),false);
     OutString(100,0,USetStr(14282),false);
     OutString(200,0,USetStr(14283),false);
     OutString(420,0,USetStr(14284),true);
    EndFormat;
  end else begin
    StartFormat(15);
     OutString(0,0,USetStr(14285),false);
     OutString(60,0,USetStr(14286),false);
     OutString(140,0,USetStr(14287),false);
     OutString(200,0,USetStr(14288),false);
     OutString(480,0,USetStr(14289),true);
    EndFormat;
  end;
  Gray_Divider(0,1);
  TrHs = true;
  td = RepSpec.sStartDate;
  while (TrHs) begin
    if (td>RepSpec.sEndDate) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      dateid = GetDateID(td);
      switch (RepSpec.flags[1]) begin
        case 1:
          if ((dateid==6) or (dateid==7)) then begin
            testf = false;
          end;
        case 2:
          if ((dateid!=6) and (dateid!=7)) then begin
            testf = false;
          end;
      end;
      if (testf) then begin
        firstf = true;
        ActivitiesPerDay(RepSpec,td,dispgr,firstf,totreptime);
      end;
    end;
    td = AddDay(td,1);
  end;
  Gray_Divider(0,1);
  StartFormat(15);
   if (RepSpec.ArtMode==0) then begin
     OutVal(420,0,totreptime,M4Val,true);
   end else begin
     OutVal(480,0,totreptime,M4Val,true);
   end;
  EndFormat;

  EndJob
  RETURN;
END;
