external procedure HTCustClass(string,var string);
external function Boolean ContactInGroupClass(string,string,string,string,string,string);
external function Boolean GetCustAndBal(var record CUVc,var val,var val,Integer,Integer,Integer,Integer,Integer,Integer,var Boolean);
external procedure HTCusts(string,string,var string);
external procedure HTCustCat(string,var string);
external function Boolean FoundProperAuthCust(var record AuthCustVc,string,Date,Date);

procedure TestAndPrintCustRentStatus(record RcVc RepSpec,record CUVc CUr)
begin
  record CUVc CU2r;
  record CustRentStatVc CustRentStatr;
  record AuthCustVc Authr;
  row AuthCustVc Authrw;
  val bal,limit,cost,sales;
  Integer rwcnt,i;
  Boolean testf,limitdaysf;

  testf = true;
  CU2r.Code = CUr.Code;
  if (GetCustAndBal(CU2r,limit,bal,0,0,0,0,0,0,limitdaysf)==false) then begin
    limit = 0;
    bal = 0;
  end;
  if (FoundProperAuthCust(Authr,CUr.Code,CurrentDate,CurrentDate)==false) then begin
    Authr.MaxUnits = 0;
    Authr.MaxSales = 0;
    Authr.MaxCost = 0;
  end;
  CustRentStatr.CustCode = CUr.Code;
  if (ReadFirstMain(CustRentStatr,1,true)==false) then begin
    CustRentStatr.RentStockSum = 0;
    CustRentStatr.RentStockCost = 0;
    CustRentStatr.RentalUnits = 0;
  end;
  if (RepSpec.UsedOnly==1) then begin
    if ((bal==0) and (CustRentStatr.RentStockSum==0) and (CustRentStatr.RentStockCost==0) and (CustRentStatr.RentalUnits==0)) then begin
      testf = false;
    end;
  end;
/*
  if (RepSpec.flags[0]==1) then begin
    if ((Authr.MaxUnits==0) and (Authr.MaxSales==0) and (Authr.MaxCost==0)) then begin
      testf = false;
    end;
  end;
*/
  if (testf) then begin
    StartFormat(15);
    OutString(0,0,CUr.Code,false);
//    OutString(2,0,CUr.Name,false);
    OutString(3,0,limit,true);
    OutString(4,0,bal,true);
    OutString(5,0,Authr.MaxUnits,true);
    OutString(6,0,CustRentStatr.RentalUnits,true);
    OutString(7,0,Authr.MaxSales,true);
    OutString(8,0,CustRentStatr.RentStockSum,true);
    OutString(9,0,Authr.MaxCost,true);
    OutString(1,0,CustRentStatr.RentStockCost,true);
    EndFormat;
  end;
  return;
end;

global
procedure CustRentStatRn(record RcVc RepSpec)
BEGIN
  record CUVc CUr;
  record AuthCustVc AuthCustr;
  string 255 frcc,tocc;
  Boolean TrHs,testf;
  string 255 tstr;
  Integer rw;
  string 20 oldcust;
  
  frcc = FirstInRange(RepSpec.f1,20);
  tocc = LastInRange(RepSpec.f1,20);
  StartReportJob(USetStr(12620));
  rw = 1;
  HTCusts(frcc,tocc,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (RepSpec.UsedOnly==1) then begin
    tstr = USetStr(6651);
    Header(rw,tstr,0);
  end;
  HTCustCat(RepSpec.f3,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  HTCustClass(RepSpec.f4,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  SetRepCol(2,80);
  SetRepCol(3,116);
  SetRepCol(4,168);
  SetRepCol(5,220);
  SetRepCol(6,272);
  SetRepCol(7,324);
  SetRepCol(8,376);
  SetRepCol(9,428);
  EndHeader;
  StartFormat(15);
  OutString(0,0,USetStr(12621),false);
//  OutString(2,0,USetStr(12622),false);
  OutString(3,0,USetStr(12623),true);
  OutString(4,0,USetStr(12624),true);
  OutString(5,0,USetStr(12625),true);
  OutString(6,0,USetStr(12626),true);
  OutString(7,0,USetStr(12627),true);
  OutString(8,0,USetStr(12628),true);
  OutString(9,0,USetStr(12629),true);
  OutString(1,0,USetStr(12630),true);
  EndFormat;
  Gray_Divider(0,1);
  if (RepSpec.flags[0]==0) then begin
    CUr.Code = frcc;
    TrHs = true;
    while (LoopMain(CUr,1,TrHs)) begin
      testf = true;
      if (nonblank(tocc)) then begin
        if (CUr.Code>tocc) then begin
          TrHs = false;
        end;    
      end;   
      if (testf) then begin 
        testf = ContactInGroupClass(CUr.Code,RepSpec.f3,RepSpec.f4,"CUST","","");
      end; 
      if (TrHs==false) then begin
        testf = false;
      end;
      if (CUr.CUType==0) then begin testf = false; end;
      if (testf) then begin
        TestAndPrintCustRentStatus(RepSpec,CUr);
      end;
    end;
  end else begin
    AuthCustr.CustCode = frcc;
    TrHs = true;
    while (LoopMain(AuthCustr,1,TrHs)) begin
      testf = true;
      if (nonblank(tocc)) then begin
        if (AuthCustr.CustCode>tocc) then begin
          TrHs = false;
        end;    
      end;
      testf = ContactInGroupClass(AuthCustr.CustCode,RepSpec.f3,RepSpec.f4,"CUST","","");
      if (nonblank(oldcust)) then begin
        if (oldcust==CUr.Code) then begin
          testf = false;
        end;
      end else begin
        oldcust = CUr.Code;
      end;
      if (TrHs==false) then begin
        testf = false;
      end;
      if (testf) then begin
        TestAndPrintCustRentStatus(RepSpec,CUr);
      end;
    end;
  end;
  EndJob;
  RETURN;
END;
