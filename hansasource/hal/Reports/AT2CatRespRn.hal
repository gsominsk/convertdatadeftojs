external procedure GetWrofDate(record AT2UnitVc,var Date,var Boolean);
external procedure HTDepartments(string,string,var string);
external procedure HTCategories(string,string,var string);
external procedure HT2Per(Date, Date , var string);
external procedure HTPers(string,var string);
external procedure AT2FwdBal(string,Date,var val);
external procedure GetCategoryName(string ,var string);
external procedure GetDepartmentName(string ,var string);
external procedure GetUserName(string,var string);

global
function Boolean GetInventoryNrWrofSoldQuant(string InventoryNr,Date StartDate,Date EndDate,var val reswv,var val ressv,var val wrofdprsum,var Date wrofd)
BEGIN
  record InvrsVc Invrsr;
  record AT2WrofVc AT2Wrofr;
  row AT2WrofVc AT2Wrofrw;
  Integer i,rwcnt;
  Boolean res,TrHs;
  Date blankd;
  
  wrofdprsum = blankval;
  reswv = blankval;
  ressv = blankval;
  wrofd = blankd;
  res = false;
  TrHs = true;
  Invrsr.InventoryNr = InventoryNr;
  Invrsr.FileName = "AT2WrofVc";
  Invrsr.TransDate = StartDate;
  while (LoopKey("FileName",Invrsr,3,TrHs)) begin
    if (Invrsr.InventoryNr!=InventoryNr) then begin TrHs = false; end;
    if (Invrsr.FileName!="AT2WrofVc") then begin TrHs = false; end;
    if (Invrsr.TransDate>EndDate) then begin TrHs = false; end;
    if (TrHs) then begin
      AT2Wrofr.SerNr = Invrsr.TransNr;
      if (ReadFirstMain(AT2Wrofr,1,true)) then begin
        rwcnt = MatRowCnt(AT2Wrofr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(AT2Wrofr,i,AT2Wrofrw);
          if (AT2Wrofrw.InventoryNr==InventoryNr) then begin
            switch (AT2Wrofr.Writeoff) begin
              case 0: ressv = ressv + AT2Wrofrw.Qty;
              case 1: reswv = reswv + AT2Wrofrw.Qty;
            end;       
            wrofdprsum = wrofdprsum + AT2Wrofrw.DprVal;
            wrofd = AT2Wrofr.TransDate;
            res = true;
          end;
        end;
      end;
    end;
  end;  
  GetInventoryNrWrofSoldQuant = res;
  RETURN;        
END;

procedure PrintValues(Integer strpos,string tstr,var val fwdbal,var val purchval,var val movval,var val reeval,var val wrofval,var val soldval,var val movoutval)
BEGIN
  val bal;
  
  StartFormat(15);
   OutString(strpos,0,tstr,false);
   OutVal(2,0,fwdbal,M4Val,true);
   OutVal(3,0,purchval,M4Val,true);
   OutVal(4,0,movval,M4Val,true);
   OutVal(5,0,reeval,M4Val,true);
   OutVal(6,0,wrofval,M4Val,true);
   OutVal(7,0,soldval,M4Val,true);
   OutVal(8,0,movoutval,M4Val,true);
   bal = fwdbal + purchval + movval + reeval - wrofval - soldval - movoutval;
   OutVal(9,0,bal,M4Val,true);       
  EndFormat;
  fwdbal = blankval;
  purchval = blankval;
  movval = blankval;
  reeval = blankval;
  wrofval = blankval;
  soldval = blankval;
  movoutval = blankval;
  RETURN;
END;

global
procedure GetAssetDepAndUsrMatch(string InventoryNr,Date enddate,var string dep,var string usr) 
BEGIN
  Boolean TrHs;
  record InvrsVc Invrsr;
  record AT2TakeVc ATTaker;

  TrHs = true;
  Invrsr.InventoryNr = InventoryNr;
  Invrsr.FileName = "AT2TakeVc";
  Invrsr.TransDate = enddate;

  while (LoopBackKey("FileName",Invrsr,4,TrHs)) begin
    if (Invrsr.InventoryNr!=InventoryNr) then begin TrHs = false; end;
    if (Invrsr.FileName!="AT2TakeVc") then begin TrHs = false; end;
    if (Invrsr.TransDate>enddate) then begin TrHs = false; end;          
    if (TrHs) then begin 
       ATTaker.SerNr = Invrsr.TransNr;
       if (ReadFirstMain(ATTaker,1,true)) then begin
          if (ATTaker.PhysCheckf!=2) then begin
             TrHs = false;
             dep = ATTaker.DepCode;
	     usr = ATTaker.RespPerson;
          end;     
       end;
    end;
  end;    
  RETURN;
END;

function
Boolean CheckAssetDepAndUsrMatch(string InventoryNr,string dep,string depcode,string usr,string user,Date enddate) 
BEGIN
  Boolean res,TrHs, res2;
  record InvrsVc Invrsr;
  record AT2TakeVc ATTaker;
  Date blankd;

  if ((depcode==dep) and (user==usr)) then begin 
    res2 = true;
  end;   
  TrHs = true;
  Invrsr.InventoryNr = InventoryNr;
  Invrsr.FileName = "AT2TakeVc";
  while (LoopBackKey("FileName",Invrsr,2,TrHs)) begin
    if (Invrsr.InventoryNr!=InventoryNr) then begin TrHs = false; end;
    if (Invrsr.FileName!="AT2TakeVc") then begin TrHs = false; end;
    if (TrHs) then begin        
       ATTaker.SerNr = Invrsr.TransNr;
       if (ReadFirstMain(ATTaker,1,true)) then begin
         if (ATTaker.PhysCheckf!=2) then begin
           if ((ATTaker.DepCode==dep) and (ATTaker.RespPerson==usr)) then begin
             if (ATTaker.TransDate<=enddate) then begin
               res2 = true;
               TrHs = false;
             end;
           end;     
           if ((ATTaker.DepCode!=dep) or (ATTaker.RespPerson!=usr)) then begin
             if (ATTaker.TransDate<=enddate)  then begin
               res2 =false;
               TrHs = false;
             end;
           end;
         end;
       end;
    end;
  end;    
  res = res2;
  CheckAssetDepAndUsrMatch = res;
  RETURN;
END;

procedure FindReval(record RcVc RepSpec,string depcode,string user,record AT2UnitVc ATUnitr,var val revalu) 
BEGIN
  record AT2DprVc ATDprr;
  Boolean TrHs;
  record InvrsVc Invrsr;
  val fwd,dpr;
  Date prevdate,testdate;

  revalu = 0;
  dpr = 0;
  TrHs = true;
  Invrsr.InventoryNr = ATUnitr.InventoryNr;
  Invrsr.FileName = "AT2DprVc";
  Invrsr.TransDate = RepSpec.sStartDate;
  while (LoopKey("FileName",Invrsr,3,TrHs)) begin
    if (Invrsr.InventoryNr!=ATUnitr.InventoryNr) then begin TrHs = false; end;
    if (Invrsr.FileName!="AT2DprVc") then begin TrHs = false; end;
    if (Invrsr.TransDate<RepSpec.sStartDate) then begin TrHs = false; end;
    if (Invrsr.TransDate>RepSpec.sEndDate) then begin TrHs = false; end;
    prevdate=AddDay(Invrsr.TransDate,-1);
    if ((CheckAssetDepAndUsrMatch(ATUnitr.InventoryNr,depcode,ATUnitr.DepCode,user,ATUnitr.RespPerson,prevdate)==true)) then begin
      if (TrHs) then begin
        ATDprr.SerNr = Invrsr.TransNr;
        if (ReadFirstMain(ATDprr,1,true)) then begin
          AT2FwdBal(ATUnitr.InventoryNr,prevdate,fwd);
          if (testdate==Invrsr.TransDate)  then begin
	    revalu = revalu - dpr;
          end; 
          revalu = revalu + ATDprr.StartVal - fwd;
          testdate = Invrsr.TransDate;
          dpr = ATDprr.StartVal - fwd;
        end;
      end;        
    end; 
  end;
  RETURN;      
END; 

procedure MovementAndResponsibility(record RcVc RepSpec,string depcode,string user,record AT2UnitVc ATUnitr,var val movval,var val movoutval,string lastdep,string lastusr) 
BEGIN
  Boolean TrHs;
  record InvrsVc Invrsr;
  record AT2TakeVc ATTaker;
  val fwd;
  String 10 lastdepart,lastuser;
  Date prevdate;

  fwd = 0;
  movval = 0;
  movoutval = 0;
  lastdepart = lastdep;
  lastuser = lastusr;

  TrHs = true;
  Invrsr.InventoryNr = ATUnitr.InventoryNr;
  Invrsr.FileName = "AT2TakeVc";
  Invrsr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransNr",Invrsr,3,TrHs)) begin
    if (Invrsr.InventoryNr!=ATUnitr.InventoryNr) then begin TrHs = false; end;
    if (Invrsr.FileName!="AT2TakeVc") then begin TrHs = false; end;
    if (Invrsr.TransDate<RepSpec.sStartDate) then begin TrHs = false; end;
    if (Invrsr.TransDate>RepSpec.sEndDate) then begin TrHs = false; end;
    if (TrHs) then begin        
      ATTaker.SerNr = Invrsr.TransNr;
      if (ReadFirstMain(ATTaker,1,true)) then begin end;
      if (ATTaker.PhysCheckf!=2) then begin
        if ((depcode==Invrsr.Department) and (user==Invrsr.LegalCode)) then begin  
           AT2FwdBal(ATUnitr.InventoryNr,Invrsr.TransDate,fwd);
           movval = movval+fwd;
	   if ((lastdepart==depcode) and (lastuser==user)) then begin
             movoutval = movoutval+fwd;	         
           end;
        end else begin   
	   if ((lastdepart==depcode) and (lastuser==user)) then begin
             AT2FwdBal(ATUnitr.InventoryNr,Invrsr.TransDate,fwd);
             movoutval = movoutval+fwd;	         
	   end; 
        end; 
        lastdepart=Invrsr.Department;
        lastuser=Invrsr.LegalCode;
      end;
    end;
  end;    
  RETURN;
END;

procedure GetInvNrDataSum_Cat(record RcVc RepSpec,record AT2UnitVc ATUnitr,var val fwdbal,var val Purchval,var val movval,
                             var val reeval,var val wrofval,var val soldval,var val movoutval,string depcode,string user)
BEGIN
  Date wrofd;
  val lastrevv,forwd,wq,sq,wrofdprsum;
  Boolean wrof;
  String 10 lastdep,lastusr;
   
  fwdbal = blankval;
  Purchval = blankval;
  movval = blankval;
  movoutval = blankval;
  reeval = blankval;
  wrofval = blankval;
  soldval = blankval;

  if (DateInRange(ATUnitr.PurchaseDate,RepSpec.sStartDate,RepSpec.sEndDate)) then begin
    if ((ATUnitr.DepCode==depcode) and (ATUnitr.RespPerson==user)) then begin
      Purchval = ATUnitr.PurchVal;
    end;
  end;

  GetAssetDepAndUsrMatch(ATUnitr.InventoryNr,RepSpec.sStartDate,lastdep,lastusr);
  if (blank(lastdep)) then begin
    lastdep = ATUnitr.DepCode;
  end; 
  if (blank(lastusr)) then begin
    lastusr = ATUnitr.RespPerson;
  end; 
  if ((lastdep==depcode) and (lastusr==user)) then begin
    AT2FwdBal(ATUnitr.InventoryNr,AddDay(RepSpec.sStartDate,-1),fwdbal);
  end;
  FindReval(RepSpec,depcode,user,ATUnitr,reeval); 
  MovementAndResponsibility(RepSpec,depcode,user,ATUnitr,movval,movoutval,lastdep,lastusr); 
  GetWrofDate(ATUnitr,wrofd,wrof);
  
  if (GetInventoryNrWrofSoldQuant(ATUnitr.InventoryNr,RepSpec.sStartDate,RepSpec.sEndDate,wq,sq,wrofdprsum,wrofd)) then begin
    wrof = false;
    if ((wq+sq)>=ATUnitr.Quantity) then begin wrof = true; end;
  end;
  if (nonblankdate(wrofd)) then begin
    if (DateInRange(wrofd,RepSpec.sStartDate,RepSpec.sEndDate)) then begin
      GetAssetDepAndUsrMatch(ATUnitr.InventoryNr,wrofd,lastdep,lastusr);
      if (blank(lastdep)) then begin
        lastdep = ATUnitr.DepCode;
      end; 
      if (blank(lastusr)) then begin
        lastusr = ATUnitr.RespPerson;
      end; 
      if ((lastdep==depcode) and (lastusr==user)) then begin
        AT2FwdBal(ATUnitr.InventoryNr,wrofd,lastrevv);
        if (wrof) then begin
          wrofval = lastrevv;
        end else begin
          soldval = lastrevv;
        end;
      end;
    end else begin
      if ((wrofd<RepSpec.sStartDate) and (nonblankdate(wrofd))) then begin
        fwdbal = blankval;
        Purchval = blankval;
        movval = blankval;
        movoutval = blankval;
        reeval = blankval;
        wrofval = blankval;
        soldval = blankval;
      end;
    end;
  end;
  RETURN;
END;

procedure PrintCategoryData(record RcVc RepSpec,record UserVc Userr,record DepVc Depr,string frcategory,string tocategory,string depcode,var Boolean printdepf,var val userfwdbal,var val userpurchval,var val usermovval,var val usermovoutval,var val userreeval,var val usersoldval,var val userwrofval)
BEGIN
  Boolean TrHs;
  record InvrsVc Invrsr;
  record AT2WrofVc ATWrofr;
  row AT2WrofVc ATWrofrw;  
  record AT2DprVc AT2Dpr;  
  record AT2UnitVc ATUnitr; 
  string 20 lastcat; 
  Date curmovd,nextmovd,sd,ed,wrofd,prevmovd;
  Boolean printcatf,printuserf,testf,movoutf,movinf;
  val fwdbal,purchval,movval,movoutval,reeval,soldval,wrofval;
  val catfwdbal,catpurchval,catmovval,catmovoutval,catreeval,catsoldval,catwrofval;
  val bal;
  Boolean addrevf,testinvf;
  
  printuserf = true;
  TrHs = true;
  ATUnitr.AT2Code = frcategory;
  while (LoopKey("AT2Code",ATUnitr,1,TrHs)) begin    
    fwdbal = 0;
    purchval = 0;
    movval = 0;
    movoutval = 0;
    wrofval = 0;
    soldval = 0;
    reeval = 0;
    if ((lastcat!=ATUnitr.AT2Code) and (nonblank(lastcat))) then begin    
      testf = false; 
      if (RepSpec.flags[0]==1) then begin
        if ((catfwdbal!=0) or (catpurchval!=0) or (catmovval!=0) or (catreeval!=0) or (catwrofval!=0) or (catsoldval!=0) or (catmovoutval!=0)) then begin      
          testf = true; 
        end;
      end;
      if (RepSpec.flags[0]==0) then begin
        if ((catpurchval!=0) or (catmovval!=0) or (catreeval!=0) or (catwrofval!=0) or (catsoldval!=0) or (catmovoutval!=0)) then begin            
          testf = true; 
        end;
      end;
      if (ATUnitr.Activef!=0) then begin testf = false; end;
      if (testf) then begin      
        if (printdepf) then begin
          StartFormat(15);
           OutString(0,0,USetStr(9716) & ": ",false);
           OutString(80,0,Depr.Code,false);
           OutString(120,0,Depr.Description,false);
          EndFormat; 
          printdepf = false;         
        end;
        if (printuserf) then begin
          StartFormat(15);
           OutString(15,0,USetStr(10572) & ": ",false);
           OutString(80,0,Userr.Code,false);
           OutString(150,0,Userr.Name,false);
          EndFormat; 
          printuserf = false;         
        end;
        if (catwrofval==blankval) then begin
          catwrofval = 0;
        end;
        if (catsoldval==blankval) then begin
          catsoldval = 0;
        end;        
        userfwdbal = userfwdbal + catfwdbal;
        userpurchval = userpurchval + catpurchval;
        usermovval = usermovval + catmovval;
        userreeval = userreeval + catreeval;
        userwrofval = userwrofval + catwrofval;
        usersoldval = usersoldval + catsoldval;
        usermovoutval = usermovoutval + catmovoutval;
        if (RepSpec.flags[1]==0) then begin
          PrintValues(15,lastcat,catfwdbal,catpurchval,catmovval,catreeval,catwrofval,catsoldval,catmovoutval);
        end else begin
          PrintValues(30,lastcat,catfwdbal,catpurchval,catmovval,catreeval,catwrofval,catsoldval,catmovoutval);
        end;
      end;  
    end;  
    if (nonblank(tocategory)) then begin
      if (ATUnitr.AT2Code>tocategory) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin    
      addrevf = false;
      testinvf = true;
     // if (IsInventoryNrInDepartment(RepSpec,ATUnitr,Depr.Code)==false) then begin testinvf = false; end;
   //   if (IsInventoryNrForPerson(RepSpec,ATUnitr,Userr.Code)==false) then begin testinvf = false; end;
      if (ATUnitr.Activef!=0) then begin testinvf = false; end;
      if (testinvf) then begin      
        GetInvNrDataSum_Cat(RepSpec,ATUnitr,fwdbal,purchval,movval,reeval,wrofval,soldval,movoutval,Depr.Code,Userr.Code);
        catfwdbal = catfwdbal + fwdbal;
        catpurchval = catpurchval + (ATUnitr.Quantity)*purchval;
        catmovval = catmovval + movval;
        catmovoutval = catmovoutval + movoutval;
        catwrofval = catwrofval + wrofval;
        catsoldval = catsoldval + soldval;
        catreeval = catreeval + reeval;      
      end;
    end; 
    lastcat = ATUnitr.AT2Code; 
  end;      
    testf = false; 
    if (RepSpec.flags[0]==0) then begin
      if ((catpurchval!=blankval) or (catmovval!=blankval) or (catreeval!=blankval) or (catwrofval!=blankval) or 
          (catsoldval!=blankval) or (catmovoutval!=blankval)) then 
      begin            
        testf = true; 
      end;
    end;
    if (RepSpec.flags[0]==1) then begin
      if ((catfwdbal!=blankval) or (catpurchval!=blankval) or (catmovval!=blankval) or (catreeval!=blankval) or (catwrofval!=blankval) or 
          (catsoldval!=blankval) or (catmovoutval!=blankval)) then 
      begin            
        testf = true; 
      end;
    end;
    if (testf) then begin      
      if (printdepf) then begin
          StartFormat(15);
           OutString(0,0,USetStr(9716) & ": ",false);
           OutString(80,0,Depr.Code,false);
           OutString(120,0,Depr.Description,false);
          EndFormat; 
        printdepf = false;         
      end;
      if (printuserf) then begin
        StartFormat(15);
         OutString(15,0,USetStr(10572) & ": ",false);
         OutString(80,0,Userr.Code,false);
         OutString(150,0,Userr.Name,false);
        EndFormat; 
        printuserf = false; 
      end; 
      if (catwrofval==blankval) then begin
        catwrofval = 0;
      end;
      if (catsoldval==blankval) then begin
        catsoldval = 0;
      end;      
      userfwdbal = userfwdbal + catfwdbal;
      userpurchval = userpurchval + catpurchval;
      usermovval = usermovval + catmovval;
      userreeval = userreeval + catreeval;
      userwrofval = userwrofval + catwrofval;
      usersoldval = usersoldval + catsoldval;
      usermovoutval = usermovoutval + catmovoutval;      
      if (RepSpec.flags[1]==0) then begin
        PrintValues(15,lastcat,catfwdbal,catpurchval,catmovval,catreeval,catwrofval,catsoldval,catmovoutval);
      end else begin
        PrintValues(30,lastcat,catfwdbal,catpurchval,catmovval,catreeval,catwrofval,catsoldval,catmovoutval);
      end;
   end;  
  RETURN;
END;

procedure PrintUserSummary(record RcVc RepSpec,record DepVc Depr,string frus,string tous,string frcategory,string tocategory,var val depfwdbal,var val deppurchval,var val depmovval,var val depmovoutval,var val depreeval,var val depsoldval,var val depwrofval)
BEGIN
  Boolean TrHs;
  record UserVc Userr;
  Boolean printdepf;
  val userfwdbal,userpurchval,usermovval,usermovoutval,userreeval,usersoldval,userwrofval;
  string 255 tstr2;  

  printdepf = true;
  TrHs = true;
  Userr.Code = frus;
  while (LoopMain(Userr,1,TrHs)) begin
    if (nonblank(tous)) then begin
      if (Userr.Code>tous) then begin
        TrHs = false;
      end;
    end;  
    if (TrHs) then begin
      PrintCategoryData(RepSpec,Userr,Depr,frcategory,tocategory,Depr.Code,printdepf,userfwdbal,userpurchval,usermovval,usermovoutval,userreeval,usersoldval,userwrofval);     
       if (RepSpec.flags[1]==0) then begin
         tstr2 = Userr.Code;
       end else begin  
         tstr2 = USetStr(9735) & " " & USetStr(10572) & ": " & Userr.Code;
       end; 
      if (RepSpec.flags[0]==0) then begin
        if ((userpurchval!=0) or (usermovval!=0) or (userreeval!=0) or (userwrofval!=0) or (usersoldval!=0) or (usermovoutval!=0)) then begin  
          depfwdbal = depfwdbal + userfwdbal;
          deppurchval = deppurchval + userpurchval;
          depmovval = depmovval + usermovval;
          depreeval = depreeval + userreeval;
          depwrofval = depwrofval + userwrofval;
          depsoldval = depsoldval + usersoldval;
          depmovoutval = depmovoutval + usermovoutval;          
          Gray_Divider(0,1);    
          PrintValues(15,tstr2,userfwdbal,userpurchval,usermovval,userreeval,userwrofval,usersoldval,usermovoutval);        
        end;
       end else begin
        if ((userfwdbal!=0) or (userpurchval!=0) or (usermovval!=0) or (userreeval!=0) or (userwrofval!=0) or (usersoldval!=0) or (usermovoutval!=0)) then begin  
          depfwdbal = depfwdbal + userfwdbal;
          deppurchval = deppurchval + userpurchval;
          depmovval = depmovval + usermovval;
          depreeval = depreeval + userreeval;
          depwrofval = depwrofval + userwrofval;
          depsoldval = depsoldval + usersoldval;
          depmovoutval = depmovoutval + usermovoutval;          
          Gray_Divider(0,1);    
          PrintValues(15,tstr2,userfwdbal,userpurchval,usermovval,userreeval,userwrofval,usersoldval,usermovoutval);        
        end;
      end;
    end;
  end;    
  RETURN;
END;

global
procedure AT2CatRespRn(var record RcVc RepSpec)
BEGIN
  record DepVc Depr;
  Boolean TrHs;
  string 5 frus,tous;
  string 10 frdep,todep;
  string 20 lastAT2Code,frcategory,tocategory;
  Integer rw;
  string 255 tstr,tstr2;
  val depfwdbal,deppurchval,depmovval,depmovoutval,depreeval,depsoldval,depwrofval;
  val totfwdbal,totpurchval,totmovval,totmovoutval,totreeval,totsoldval,totwrofval;
  
  frdep = FirstInRange(RepSpec.f1,10);
  todep = LastInRange(RepSpec.f1,10);  
  frcategory = FirstInRange(RepSpec.f2,20);
  tocategory = LastInRange(RepSpec.f2,20);      
  frus = FirstInRange(RepSpec.f3,10);
  tous = LastInRange(RepSpec.f3,10);  
  StartReportJob(USetStr(9373));
   rw = 1;
   HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
   Header(rw, tstr, 1);
   rw = rw + 1;   
   HTPers(RepSpec.f3,tstr);
   if ((RepSpec.flags[1]==1) and (nonblank(frus)) and (frus==tous)) then begin
     GetUserName(frus,tstr2);
     tstr = tstr & " ( "& tstr2 & " ) ";
   end;
   Header(rw,tstr,1);
   rw = rw + 1;
   HTDepartments(frdep,todep,tstr);
   if ((RepSpec.flags[1]==1) and (nonblank(frdep)) and (frdep==todep)) then begin
     GetDepartmentName(frdep,tstr2);
     tstr = tstr & " ( "& tstr2 & " ) ";
   end;
   Header(rw,tstr,1);
   rw = rw + 1;
   HTCategories(frcategory,tocategory,tstr);
   if ((RepSpec.flags[1]==1) and (nonblank(frcategory)) and (frcategory==tocategory)) then begin
     GetCategoryName(frcategory,tstr2);
     tstr = tstr & " ( "& tstr2 & " ) ";
   end;
   Header(rw,tstr,1);
   rw = rw + 1;   
   if (RepSpec.flags[0]==0) then begin
     tstr = USetStr(9741);
     Header(rw,tstr,1);
   end;   
  EndHeader;
  if (RepSpec.flags[1]==0) then begin
    SetRepCol(2,100);
    SetRepCol(3,155);
    SetRepCol(4,210);
    SetRepCol(5,265);
    SetRepCol(6,320);
    SetRepCol(7,375);
    SetRepCol(8,425);
    SetRepCol(9,480);
    StartFormat(15);
     OutString(0,0,USetStr(9716),false);
     OutString(100,0,USetStr(8721)& "/" &USetStr(9717),false);
    EndFormat;
    StartFormat(15);
     OutString(2,0,USetStr(2495),true);
     OutString(3,0,USetStr(2331),true);
     OutString(4,0,USetStr(9718),true);
     OutString(5,0,USetStr(9719),true);
     OutString(6,0,USetStr(9720),true);
     OutString(7,0,USetStr(9721),true);
     OutString(8,0,USetStr(9722),true);
     OutString(9,0,USetStr(8098),true);
    EndFormat;
  end else begin
    SetRepCol(2,165);
    SetRepCol(3,210);
    SetRepCol(4,255);
    SetRepCol(5,300);
    SetRepCol(6,345);
    SetRepCol(7,390);
    SetRepCol(8,435);
    SetRepCol(9,480);
    StartFormat(15);
     OutString(0,0,USetStr(9716),false);
     OutString(2,0,USetStr(5068),true);
     OutString(4,0,USetStr(9718),true);
     OutString(6,0,USetStr(9720),true);
     OutString(8,0,USetStr(9722),true);
    EndFormat;
    StartFormat(15);
     OutString(30,0,USetStr(8721)& "/" &USetStr(9717),false);
     OutString(3,0,USetStr(2331),true);
     OutString(5,0,USetStr(9719),true);
     OutString(7,0,USetStr(9721),true);
     OutString(9,0,USetStr(8098),true);
    EndFormat;
  end;
  Gray_Divider(0,1);

  TrHs = true;
  Depr.Code = frdep;
  while (LoopMain(Depr,1,TrHs)) begin
    if (nonblank(todep)) then begin
      if (Depr.Code>todep) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      PrintUserSummary(RepSpec,Depr,frus,tous,frcategory,tocategory,depfwdbal,deppurchval,depmovval,depmovoutval,depreeval,depsoldval,depwrofval);
       if (RepSpec.flags[1]==0) then begin
         tstr2 = Depr.Code;
       end else begin  
         tstr2 = USetStr(9735) & " " & USetStr(10571) & ": " & Depr.Code;
       end; 
      if (RepSpec.flags[0]==1) then begin
        if ((depfwdbal!=0) or (deppurchval!=0) or (depmovval!=0) or (depreeval!=0) or (depwrofval!=0) or (depsoldval!=0) or (depmovoutval!=0)) then begin  
          totfwdbal = totfwdbal + depfwdbal;
          totpurchval = totpurchval + deppurchval;
          totmovval = totmovval + depmovval;
          totreeval = totreeval + depreeval;
          totwrofval = totwrofval + depwrofval;
          totsoldval = totsoldval + depsoldval;
          totmovoutval = totmovoutval + depmovoutval;          
          Gray_Divider(0,1);    
          PrintValues(0,tstr2,depfwdbal,deppurchval,depmovval,depreeval,depwrofval,depsoldval,depmovoutval);        
        end;
       end else begin
        if ((deppurchval!=0) or (depmovval!=0) or (depreeval!=0) or (depwrofval!=0) or (depsoldval!=0) or (depmovoutval!=0)) then begin  
          totfwdbal = totfwdbal + depfwdbal;
          totpurchval = totpurchval + deppurchval;
          totmovval = totmovval + depmovval;
          totreeval = totreeval + depreeval;
          totwrofval = totwrofval + depwrofval;
          totsoldval = totsoldval + depsoldval;
          totmovoutval = totmovoutval + depmovoutval;          
          Gray_Divider(0,1);    
          PrintValues(0,tstr2,depfwdbal,deppurchval,depmovval,depreeval,depwrofval,depsoldval,depmovoutval);        
        end;
      end;
    end;    
  end;
  Black_Divider(0,1);
  PrintValues(0,USetStr(9735),totfwdbal,totpurchval,totmovval,totreeval,totwrofval,totsoldval,totmovoutval);        
  EndJob;
  RETURN;
END;