external function Boolean HasContactClassification();
external function Boolean HasCategories();
external procedure HTCustCat(string,var string);
external procedure HTCustClass(string,var string);
external function Boolean ContactInGroupClass(string,string,string,string,string,string);
external procedure ExtractObj(string,var Integer,var string);
external procedure HTAccs(string,string,Integer, var string);
external procedure GetAccStartBalance2(record ObjBalVc,Date,string,var val);
external procedure MockObjFromCompCode(string,var string,Integer);
external procedure HTCusts(string, string, var string);
external procedure HTDetailLevel(Integer, var string);

procedure FindCuTransType(val debv,val credv,var string res)
BEGIN
  
  if (credv<>0) then begin
    res = USetStr(4093);
  end;
  if (debv<>0) then begin
    res = USetStr(1803);
  end;
  RETURN;
END;

procedure PrintCuDebtorTotals(val totdebfwdbal,val totcredfwdbal,val totcudeb,val totcucred,val totdebbal,val totcredbal)
BEGIN  
  StartFormat(15);
   OutString(100,0,USetStr(2928),false);
   OutVal(180,0,totdebfwdbal,M4Val,true);
   OutVal(240,0,totcredfwdbal,M4Val,true);
   OutVal(300,0,totcudeb,M4Val,true);
   OutVal(360,0,totcucred,M4Val,true);
   OutVal(420,0,totdebbal,M4Val,true);
   OutVal(480,0,totcredbal,M4Val,true);
  EndFormat;                              
  RETURN;
END;

procedure PrintOverViewCuSum(record CUVc CUr,val debfwdbal,val credfwdbal,val cudeb,val cucred,val debbal,val credbal)
BEGIN
  StartFormat(15);
   OutString(0,0,CUr.Code,false);
   OutString(55,0,CUr.Name,false);
   OutVal(180,0,debfwdbal,M4Val,true);
   OutVal(240,0,credfwdbal,M4Val,true);
   OutVal(300,0,cudeb,M4Val,true);
   OutVal(360,0,cucred,M4Val,true);
   OutVal(420,0,debbal,M4Val,true);
   OutVal(480,0,credbal,M4Val,true);
  EndFormat;                            
  RETURN;        
END;

procedure PrintCuDebtorTransRow(val trdeb,val trcred,LongInt sernr,var val debbal,var val credbal)
BEGIN
  string 255 tstr;
                          
  StartFormat(15);
   FindCuTransType(trdeb,trcred,tstr);
   OutString(160,0,tstr,false);
   OutLongInt(220,"DblIVVc",sernr,false);    
   OutVal(300,0,trdeb,M4Val,true);
   OutVal(360,0,trcred,M4Val,true); 
   debbal = debbal + trdeb;                                                                           
   credbal = credbal + trcred;  
   OutVal(420,0,debbal,M4Val,true);   
   OutVal(480,0,credbal,M4Val,true);                                                           
  EndFormat;                          
  RETURN;
END;
  
procedure PrintDetCuInfo(record CUVc CUr,val debfwdbal,val credfwdbal)
BEGIN
  StartFormat(15);
   OutString(0,0,CUr.Code,false);
   OutString(55,0,CUr.Name,false);                            
   OutString(160,0,USetStr(2495),false);    
   OutVal(420,0,debfwdbal,M4Val,true);   
   OutVal(480,0,credfwdbal,M4Val,true);     
  EndFormat;     
  Gray_Divider(0,200);                                                           

  RETURN;
END;

procedure PrintCuDebtorHeader(Integer ArtMode)
BEGIN
  if (ArtMode==0) then begin
    StartFormat(15);
     OutString(180,0,USetStr(2495),false);
     OutString(300,0,USetStr(2723),false);
     OutString(420,0,USetStr(2507),false);
    EndFormat;             
    StartFormat(15);
     OutString(0,0,USetStr(2624),false);
     OutString(55,0,USetStr(2606),false);
     OutString(180,0,USetStr(2505),true);
     OutString(240,0,USetStr(2506),true);
     OutString(300,0,USetStr(2505),true);
     OutString(360,0,USetStr(2506),true);
     OutString(420,0,USetStr(2505),true);
     OutString(480,0,USetStr(2506),true);
    EndFormat;   
  end;  
  if (ArtMode==1) then begin
    StartFormat(15);
     OutString(300,0,USetStr(2723),false);
     OutString(420,0,USetStr(2507),false);
    EndFormat;             
    StartFormat(15);
     OutString(0,0,USetStr(2624),false);
     OutString(55,0,USetStr(2606),false);
     OutString(160,0,USetStr(3264),false);
     OutString(220,0,USetStr(5042),false);
     OutString(300,0,USetStr(2505),true);
     OutString(360,0,USetStr(2506),true);
     OutString(420,0,USetStr(2505),true);
     OutString(480,0,USetStr(2506),true);
    EndFormat;   
  end;  
  Gray_Divider(0,1);  
  RETURN;
END;

procedure FindFwdBalances(string cucode,string accnumber,Date startdate,var val credfwdbal,var val debfwdbal)
BEGIN
  record ObjBalVc ObjBalr;
  string 30 mockobj;

  MockObjFromCompCode(cucode,mockobj,1);
  ObjBalr.AccNumber =accnumber;
  ObjBalr.Object = mockobj;
  if (ReadFirstMain(ObjBalr,2,true)) then begin
    GetAccStartBalance2(ObjBalr,startdate,"transcredit",credfwdbal);  
    GetAccStartBalance2(ObjBalr,startdate,"transdebit",debfwdbal);  
  end;
  RETURN;
END;

procedure SplitAccounts(string accounts,var Array string resaccounts)
begin
  record AccVc Accr;
  Boolean found;
  Integer pos;
  string 255 acc;
  string 20 fracc,toacc;
  
  if (InString(accounts,",")!=0) then begin
    pos = 0;
    ExtractObj(accounts,pos,acc);
    while (nonblank(acc)) begin
      resaccounts[resaccounts.length] = acc;
      ExtractObj(accounts,pos,acc);
    end;  
  end else begin
    fracc = FirstInRange(accounts,10);
    toacc = LastInRange(accounts,10);    
    found = true;
    Accr.AccNumber = fracc;
    while (LoopMain(Accr,1,found)) begin
      if (Accr.AccNumber>toacc) then begin found = false; end;
      if (found) then begin
        resaccounts[resaccounts.length] = Accr.AccNumber;
      end;
    end;
  end;
  return;
end;

global
procedure CuDebtorRn(record RcVc RepSpec)
BEGIN
  record AccVc Accr;
  record CUVc CUr;
  record MainVc Mainr;
  record TRVc TRr;
  row TRVc TRrw;
  Integer ai,i,rwcnt;
  Boolean testf, TrHs,TrHsCu,firstf;
  val cucred,cudeb,credbal,debbal;
  val credfwdbal,debfwdbal;
  val totcucred,totcudeb,totcredfwdbal,totdebfwdbal,totcredbal,totdebbal;
  string 20 frcu,tocu;
  string 20 fracc,toacc;
  string 255 tstr;
  Integer rw;
  Array string 255 aaccs;
  
  SplitAccounts(RepSpec.f1,aaccs);
  if (InString(RepSpec.f1,",")==0) then begin
    fracc = FirstInRange(RepSpec.f1,10);
    toacc = LastInRange(RepSpec.f1,10);    
  end;
  frcu = FirstInRange(RepSpec.f2,20);
  tocu = LastInRange(RepSpec.f2,20);
  StartReportJob(USetStr(8950));
  rw = 1;
  if (InString(RepSpec.f1,",")!=0) then begin
    tstr = USetStr(8951) & ": " & RepSpec.f1;
  end else begin
    HTAccs(fracc,toacc,0,tstr);
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
  HTCusts(frcu,tocu,tstr);
  Header(rw,tstr,1);
  HTDetailLevel(RepSpec.ArtMode,tstr);
  Header(rw,tstr,0);
  if (HasCategories) then begin
    HTCustCat(RepSpec.f4,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasContactClassification) then begin
    HTCustClass(RepSpec.f3,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  EndHeader;  
  PrintCuDebtorHeader(RepSpec.ArtMode);
  Accr.AccNumber = RepSpec.f1;
  if (ReadFirstMain(Accr,1,true)==false) then begin
    StartFormat(15);
     OutString(0,0,USetStr(1005),false);
    EndFormat;
    goto L99;
  end;
  TrHsCu = true;
  CUr.Code = frcu;
  while (LoopMain(CUr,1,TrHsCu)) begin 
    if (nonblank(tocu)) then begin
      if (CUr.Code>tocu) then begin TrHsCu = false; end;
    end;  
    testf = true;
    if (CUr.CUType==0) then begin testf = false; end;    
    if (testf) then begin
      testf = ContactInGroupClass(CUr.Code,RepSpec.f4,RepSpec.f3,"CUST","","");
    end;    
    if (TrHsCu and testf) then begin
      firstf = false;
      cucred = blankval;
      cudeb = blankval;
      credbal = blankval;
      debbal = blankval;
      credfwdbal = blankval;
      debfwdbal = blankval;
      for (ai=0;ai<aaccs.length;ai=ai+1) begin
        FindFwdBalances(CUr.Code,aaccs[ai],RepSpec.sStartDate,credfwdbal,debfwdbal);  
      end;
      for (ai=0;ai<aaccs.length;ai=ai+1) begin
        mainr.AccNumber = aaccs[ai];
        mainr.TransDate = RepSpec.sStartDate;
        TrHs = true;
        ResetLoop(mainr);
        while (LoopMain(mainr,2,TrHs)) begin
          if (mainr.TransDate>RepSpec.sEndDate) then begin
            TrHs = false;
          end;
          if (TrHs) then begin
            if (mainr.AccNumber!=aaccs[ai]) then begin 
              TrHs = false;
            end;
          end;
          if (TrHs) then begin
            if (mainr.FileName=="TRVc") then begin
              TRr.Number = mainr.TransNr;
              TRr.IntYc = mainr.IntYc;
              if (ReadFirstMain(TRr,2,true)) then begin
                if (mainr.TransDate==TRr.TransDate) then begin
                  rwcnt = MatRowCnt(TRr);
                  for (i=0;i<rwcnt;i=i+1) begin
                    MatRowGet(TRr,i,TRrw);
                    if ((TRrw.stp==1) and (TRrw.ovst==0) and (TRrw.Typ==1)) then begin
                      if (TRrw.AccNumber==aaccs[ai]) then begin
                        if (TRrw.CompCode==CUr.Code) then begin
                          cucred = cucred + TRrw.CredVal;
                          cudeb = cudeb + TRrw.DebVal;
                          if (RepSpec.ArtMode==1) then begin
                            if (firstf==false) then begin
                              PrintDetCuInfo(CUr,debfwdbal,credfwdbal);                          
                               debbal = debbal + debfwdbal;                                                                           
                              credbal = credbal + credfwdbal;                                                                                     
                              firstf = true;
                            end;
                            PrintCuDebtorTransRow(TRrw.DebVal,TRrw.CredVal,TRrw.SerNr,debbal,credbal);
                          end;                        
                        end;
                      end;
                    end;
                  end;
                end;
              end;
            end;
          end;    
        end;
      end;
      if (RepSpec.ArtMode==0) then begin
        credbal = credfwdbal + cucred;
        debbal = debfwdbal + cudeb;

        if ((RepSpec.flags[0]==0) or (credbal<>0) or (debbal<>0)) then begin
          PrintOverViewCuSum(CUr,debfwdbal,credfwdbal,cudeb,cucred,debbal,credbal);
          totdebbal = totdebbal + debbal;
          totcredbal = totcredbal + credbal;  
          totcucred = totcucred + cucred;
          totcudeb = totcudeb + cudeb;
          totcredfwdbal = totcredfwdbal + credfwdbal;
          totdebfwdbal = totdebfwdbal + debfwdbal; 
        end;  
      end;  
      if (RepSpec.ArtMode==1) then begin
        if ((RepSpec.flags[0]==0) or (cudeb<>0) or (cucred<>0)) then begin
          Gray_Divider(260,1);        
          StartFormat(15);
           OutString(0,0,CUr.Code,false);
           OutString(55,0,CUr.Name,false);
           OutVal(300,0,cudeb,M4Val,true);
           OutVal(360,0,cucred,M4Val,true);  
           OutVal(420,0,debbal,M4Val,true);   
           OutVal(480,0,credbal,M4Val,true);                         
          EndFormat;                          
          Gray_Divider(0,1);                                                           
          totcucred = totcucred + cucred;
          totcudeb = totcudeb + cudeb;
          totdebbal = totdebbal + cudeb;
          totcredbal = totcredbal + cucred;
          totdebbal = totdebbal + debfwdbal;
          totcredbal = totcredbal + credfwdbal;
        end;  
      end;            
    end;  
  end;
  PrintCuDebtorTotals(totdebfwdbal,totcredfwdbal,totcudeb,totcucred,totdebbal,totcredbal);                         
L99:;  
  EndJob;
  RETURN;
END;
