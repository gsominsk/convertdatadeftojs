external procedure AutomatedSalesOrderly(string);external function roundmode SetRoundModeD(Integer);external procedure Base1ToBase2(var val,Date,var val);external function val DivWithRateToBase1(string,Date,val,roundmode);//-------------REPORTS-------------------------------external procedure spdivider(integer,integer, integer,integer);external procedure GetEmplName(string,var string);external Function val FCALCWITHVAR(string,var record SMVc,string);external procedure getvarval(string,record SMVc,var string);external procedure addvarval(string,var record SMVc,string);external procedure HT2Per(Date, Date,var string);external function string 60 FormatOutputValue(val,string);procedure AddToConsArray(var record SMVc consvararray,row SMVc cvarw)begin  row SMVc locvarw;  Integer i,rwcnt;  Boolean treatedf;    treatedf = false;  rwcnt = MatRowCnt(consvararray);  for (i=0;i<rwcnt;i=i+1) begin    MatRowGet(consvararray,i,locvarw);/*    if ((locvarw.AccNumber==cvarw.AccNumber) and        (locvarw.Comment==cvarw.Comment) and        (locvarw.Objects==cvarw.Objects)) then begin*/    if (locvarw.AccNumber==cvarw.AccNumber)then begin      locvarw.DebVal = locvarw.DebVal + cvarw.DebVal;      MatRowPut(consvararray,i,locvarw);      treatedf = true;    end;  end;  if (treatedf==false) then begin    MatRowPut(consvararray,rwcnt,cvarw);  end;  return;end;procedure RunTax100(record RcVc RepSpec,record SMVc consvararray,Integer conscur)begin  string 60 empname;  Integer i,j,amrow,height;  val res,crate,curres;  string 50  tempa;  Record TaxRepVc TaxRepr;  row TaxRepVc TaxReprw;  Date d1,d2,d3,d4;  string 10 sd1,sd2,sd3,sd4;  record SMVc vararray;  row SMVc cvarw;  transaction string 1 gDelimCharacter;  TaxRepr.Code=RepSpec.f2;  height=13;  d1=RepSpec.sStartDate;  d2=RepSpec.sEndDate;  d3=RepSpec.d1;  d4=RepSpec.d2;  RecordNew(vararray);  sd1=d1;sd2=d2;sd3=d3;sd4=d4;  addvarval("D1",vararray,sd1);  addvarval("D2",vararray,sd2);  addvarval("D3",vararray,sd3);  addvarval("D4",vararray,sd4);  addvarval("vals0",vararray,RepSpec.vals0);  addvarval("vals1",vararray,RepSpec.vals1);  addvarval("vals2",vararray,RepSpec.vals2);  addvarval("vals3",vararray,RepSpec.vals3);  addvarval("vals4",vararray,RepSpec.vals4);  SetRepCol(2,110);  SetRepCol(3,120);  SetRepCol(4,300);  if (nonblank(RepSpec.AccStr)) then begin    crate=DivWithRateToBase1(RepSpec.AccStr,d2,10000,SetRoundModeD(4));  end;  if (ReadFirstMain(TaxRepr,1,true)==true) then begin    if (blank(TaxRepr.Delimiter)) then begin	    gDelimCharacter = ",";	  end else begin	  	gDelimCharacter = TaxRepr.Delimiter;	  end;	  amrow = MatrowCnt(TaxRepr);    for (i=0;i<amrow;i=i+1) begin      MatRowGet(TaxRepr,i,TaxReprw);      res = FCALCWITHVAR(TaxReprw.Formula,vararray,TaxReprw.FCode);      if (conscur!=0) then begin        Base1ToBase2(res,CurrentDate,res);      end;      if (nonblank(RepSpec.AccStr)) then begin        curres = res*crate/10000;        tempa = curres;        cvarw.DebVal = curres;      end else begin        tempa=res;        cvarw.DebVal = res;      end;      if (RepSpec.flags[3]==1) and (nonblank(TaxReprw.FormatStr)) then begin        tempa = FormatOutputValue(StringToVal(tempa,M4Val),TaxReprw.FormatStr);      end;      if (RepSpec.flags[1]==0) or (nonblank(TaxReprw.Comment)) then begin        StartFormat(height);        if (RepSpec.flags[0]==0) then begin          OutString(0,0,TaxReprw.FCode,false);        end;        if (nonblank(TaxReprw.Formula)) then begin          OutString(2,0,tempa,true);        end else begin          OutString(2,0,"",true);        end;        OutString(3,0,TaxReprw.Comment,false);        if (RepSpec.flags[0]==0) then begin          OutString(4,0,TaxReprw.Formula,false);        end;        EndFormat;      end;      cvarw.AccNumber = TaxReprw.FCode;      cvarw.Comment = TaxReprw.Comment;      cvarw.Objects = TaxReprw.Formula;      AddToConsArray(consvararray,cvarw);    end;  end else begin    StartFormat(height);    OutString(0,0,USetStr(12921),false);    EndFormat;  end;  return;end;procedure RunTax100Cons(record RcVc RepSpec,record SMVc consvararray)begin  record ConsolidationBlock consr;  record DaughterCompBlock DaughterCompRec;  row DaughterCompBlock DaughterComprw;  Integer i,rwcnt;  Integer oldcomp;  oldcomp = CurrentCompany;    BlockLoad(DaughterCompRec);  rwcnt = MatRowCnt(DaughterCompRec);  for (i=0;i<rwcnt;i=i+1) begin    MatRowGet(DaughterCompRec,i,DaughterComprw);    Gray_Divider(0,1);    StartFormat(15);    EndFormat;    StartFormat(15);    OutString(0,0,DaughterComprw.CompName,false);    EndFormat;    Gray_Divider(0,1);    if (SetCompanyCode(DaughterComprw.CompCode,false)) then begin      BlockLoad(consr);      RunTax100(RepSpec,consvararray,consr.ConsCrncy);    end;    end;  ResetCompany(oldcomp);  return;end;globalprocedure Tax100Rn(record RcVc RepSpec)begin  record SMVc consvararray;  row SMVc cvarw;  String 255 tstr;  Integer i,rwcnt,rw,height;  height = 13; // nonono...  RecordNew(consvararray);  if (RepSpec.flags[3]==1) then begin    StartReportNoHeaderJob(USetStr(12920) & " " & RepSpec.f2);  end else begin    StartReportJob(USetStr(12920) & " " & RepSpec.f2);    rw = 1;    HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);    Header(rw,tstr,1);    EndHeader;  end;  if (RepSpec.IncDaughter!=0) then begin    StartFormat(15);    OutString(0,0,USetStr(12923),false);    EndFormat;    Gray_Divider(0,1);  end;  RunTax100(RepSpec,consvararray,0);  if (RepSpec.IncDaughter!=0) then begin    RunTax100Cons(RepSpec,consvararray);  end;  if (RepSpec.IncDaughter!=0) then begin    Gray_Divider(0,1);    StartFormat(15);    EndFormat;    StartFormat(15);    OutString(0,0,USetStr(12922),false);    EndFormat;    Gray_Divider(0,1);    rwcnt = MatRowCnt(consvararray);    for (i=0;i<rwcnt;i=i+1) begin      MatRowGet(consvararray,i,cvarw);      StartFormat(height);      OutString(0,0,cvarw.AccNumber,false);      OutString(2,0,cvarw.DebVal,true);      OutString(3,0,cvarw.Comment,false);      OutString(4,0,cvarw.Objects,false);      EndFormat;    end;  end;  EndJob;  AutomatedSalesOrderly("HasIntegratedNL+Run_Tax100Rn");  return;end;