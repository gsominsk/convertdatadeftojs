external procedure GetNext2Sep(string,var Integer,var string);
external procedure GetNextToken(string,var Integer,var string);
external function val KLGetARResult(Integer,Date,Date,string,string,string);
external function val KLGetARPaidResult(Integer,Date,Date,string,string,string);
external function val KLGetAPResult(Integer,Date,Date,string,string,string);
external function val KLGetAPPaidResult(Integer,Date,Date,string,string,string);
external function Integer InString2(string,string);
external function roundmode SetRoundModeD(Integer);
external function string 60 AddObjectToObjectList(string,string);
external procedure MockObjFromVATCode(string,var string);
external procedure KLPerBal(string,record RcVc,string,string,var val,var val,var val,var val,var val,var val,Integer);
external function val KLGetARBal2(Integer,Date,string,Boolean,Boolean,Boolean,Integer,Boolean,string,string);
external function val KLGetAPBal2(Integer,Date,string,Boolean,Boolean,Integer,Boolean,string,string);
external function val KLGetAROnAcc(Integer,Date,Integer,string);
external function val KLGetAPOnAcc(Integer,Date,Integer,string);
external function Boolean HasCharts();

global
function val AvgResult(string accstr)
begin
  val dSb,dPb,dEb,cSb,cPb,cEb;
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;
  val res;
  
  KLPerBal("AvgResult",KeyRepSpec,accstr,KeyRepSpec.ObjStr,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
  res = dPb - cPb;
  if (nonblank(KeyRepSpec.f6)) then begin
    KLPerBal("AvgResult",KeyRepSpec,accstr,KeyRepSpec.f6,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
    res = res - (dPb - cPb);
  end;
  AvgResult = res;
  return;
end;

global
function val Result(string accstr)
begin
  val dSb,dPb,dEb,cSb,cPb,cEb;
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;
  val res;
  
  KLPerBal("Result",KeyRepSpec,accstr,KeyRepSpec.ObjStr,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
  res = dPb - cPb;
  if (nonblank(KeyRepSpec.f6)) then begin
    KLPerBal("Result",KeyRepSpec,accstr,KeyRepSpec.f6,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
    res = res - (dPb - cPb);
  end;
  Result = res;
  return;
end;

global
function val Resultat(string accstr)
BEGIN
  Resultat = Result(accstr);
  RETURN;
END;

global
function val Tulos(string accstr)
BEGIN
  Tulos = Result(accstr);
  RETURN;
END;

global
function val Breyting(string accstr)
BEGIN
  Breyting = Result(accstr);
  RETURN;
END;

global
function val Forgalom(string accstr)
BEGIN
  Forgalom = Result(accstr);
  RETURN;
END;

global
function val VATResult(string accstr,string vatstr)
BEGIN
  val dSb,dPb,dEb,cSb,cPb,cEb;
  transaction record RcVc KeyRepSpec;
  transaction Integer mockedobjfromvatcode;
  transaction Integer keycoltype;
  val res;
  string 60 objstr;
  
  mockedobjfromvatcode = 1;
  MockObjFromVATCode(vatstr,objstr);
  KLPerBal("VATResult",KeyRepSpec,accstr,objstr,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
  res = dPb - cPb;
  VATResult = res;
  RETURN;
END;

global
function val AvgVATResult(string accstr,string vatstr)
begin
  val dSb,dPb,dEb,cSb,cPb,cEb;
  transaction record RcVc KeyRepSpec;
  transaction Integer mockedobjfromvatcode;
  transaction Integer keycoltype;
  val res;
  string 60 objstr;
  
  mockedobjfromvatcode = 1;
  MockObjFromVATCode(vatstr,objstr);
  KLPerBal("AvgVATResult",KeyRepSpec,accstr,objstr,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
  res = dPb - cPb;
  AvgVATResult = res;
  return;
end;

global
function val MomsResultat(string accstr,string vatstr)
BEGIN
  MomsResultat = VATResult(accstr,vatstr);
  RETURN;
END;

global
function val AlvTulos(string accstr,string vatstr)
BEGIN
  AlvTulos = VATResult(accstr,vatstr);
  RETURN;
END;

global
function val AvgVATCredResult(string accstr,string vatstr)
begin
  val dSb,dPb,dEb,cSb,cPb,cEb;
  transaction record RcVc KeyRepSpec;
  transaction Integer mockedobjfromvatcode;
  transaction Integer keycoltype;
  string 60 objstr;
  
  mockedobjfromvatcode = 1;
  MockObjFromVATCode(vatstr,objstr);
  KLPerBal("AvgVATCredResult",KeyRepSpec,accstr,objstr,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
  AvgVATCredResult = -cPb;
  return;
end;

global
function val VATCredResult(string accstr,string vatstr)
begin
  val dSb,dPb,dEb,cSb,cPb,cEb;
  transaction record RcVc KeyRepSpec;
  transaction Integer mockedobjfromvatcode;
  transaction Integer keycoltype;
  string 60 objstr;
  
  mockedobjfromvatcode = 1;
  MockObjFromVATCode(vatstr,objstr);
  KLPerBal("VATCredResult",KeyRepSpec,accstr,objstr,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
  VATCredResult = -cPb;
  return;
end;

global
function val AvgVATDebResult(string accstr,string vatstr)
begin
  val dSb,dPb,dEb,cSb,cPb,cEb;
  transaction record RcVc KeyRepSpec;
  transaction Integer mockedobjfromvatcode;
  transaction Integer keycoltype;
  string 60 objstr;
  
  mockedobjfromvatcode = 1;
  MockObjFromVATCode(vatstr,objstr);
  KLPerBal("AvgVATDebResult",KeyRepSpec,accstr,objstr,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
  AvgVATDebResult = dPb;
  return;
end;

global
function val VATDebResult(string accstr,string vatstr)
begin
  val dSb,dPb,dEb,cSb,cPb,cEb;
  transaction record RcVc KeyRepSpec;
  transaction Integer mockedobjfromvatcode;
  transaction Integer keycoltype;
  string 60 objstr;
  
  mockedobjfromvatcode = 1;
  MockObjFromVATCode(vatstr,objstr);
  KLPerBal("VATDebResult",KeyRepSpec,accstr,objstr,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
  VATDebResult = dPb;
  return;
end;

global
function val VATBalance(string accstr,string vatstr)
BEGIN
  val dSb,dPb,dEb,cSb,cPb,cEb;
  transaction record RcVc KeyRepSpec;
  transaction Integer mockedobjfromvatcode;
  transaction Integer keycoltype;
  val res;
  string 60 objstr;
  
  mockedobjfromvatcode = 1;
  MockObjFromVATCode(vatstr,objstr);
  KLPerBal("VATBalance",KeyRepSpec,accstr,objstr,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
  res = dEb - cEb;
  VATBalance = res;
  RETURN;
END;

global
function val MomsSaldo(string accstr,string vatstr)
BEGIN
  MomsSaldo = VATBalance(accstr,vatstr); // I'm guessing, this is what it should call...
  RETURN;
END;

global
function val AlvSaldo(string accstr,string vatstr)
BEGIN
  AlvSaldo = MomsSaldo(accstr,vatstr);
  RETURN;
END;

global
function val ObjResult(string accstr,string objstr)
begin
  val dSb,dPb,dEb,cSb,cPb,cEb;
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;
  val res;
  string 255 objs;
  
  objs = objstr;
  if (nonblank(objs)) then begin
    objs = AddObjectToObjectList(objs,KeyRepSpec.ObjStr);
  end;  
  KLPerBal("ObjResult",KeyRepSpec,accstr,objs,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
  res = dPb - cPb;
  ObjResult = res;
  return;
end;

global
function val AvgObjResult(string accstr,string objstr)
begin
  val dSb,dPb,dEb,cSb,cPb,cEb;
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;
  val res;
  string 255 objs;
  
  objs = objstr;
  if (nonblank(objs)) then begin
    objs = AddObjectToObjectList(objs,KeyRepSpec.ObjStr);
  end;  
  KLPerBal("AvgObjResult",KeyRepSpec,accstr,objs,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
  res = dPb - cPb;
  AvgObjResult = res;
  return;
end;

global
function val SummaEfni(string accstr,string objstr)
BEGIN
  SummaEfni = ObjResult(accstr,objstr);
  RETURN;
END;

global
function val ObjDebResult(string accstr,string objstr)
begin
  val dSb,dPb,dEb,cSb,cPb,cEb;
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;

  KLPerBal("ObjDebResult",KeyRepSpec,accstr,objstr,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
  ObjDebResult = dPb;
  return;
end;

global
function val AvgObjDebResult(string accstr,string objstr)
begin
  val dSb,dPb,dEb,cSb,cPb,cEb;
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;

  KLPerBal("AvgObjDebResult",KeyRepSpec,accstr,objstr,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
  AvgObjDebResult = dPb;
  return;
end;

global
function val ObjCredResult(string accstr,string objstr)
begin
  val dSb,dPb,dEb,cSb,cPb,cEb;
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;

  KLPerBal("ObjCredResult",KeyRepSpec,accstr,objstr,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
  ObjCredResult = -cPb;
  return;
end;

global
function val AvgObjCredResult(string accstr,string objstr)
begin
  val dSb,dPb,dEb,cSb,cPb,cEb;
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;

  KLPerBal("AvgObjCredResult",KeyRepSpec,accstr,objstr,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
  AvgObjCredResult = -cPb;
  return;
end;

global
function val Saldo(string accstr)
BEGIN
  val dSb,dPb,dEb,cSb,cPb,cEb;
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;
  val res;
  
  KLPerBal("Balance",KeyRepSpec,accstr,KeyRepSpec.ObjStr,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
  res = dEb - cEb;
  if (nonblank(KeyRepSpec.f6)) then begin
    KLPerBal("Balance",KeyRepSpec,accstr,KeyRepSpec.f6,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
    res = res - (dEb - cEb);
  end;
  Saldo = res;
  RETURN;
END;

global
function val Balance(string accstr)
BEGIN
  Balance = Saldo(accstr);
  RETURN;
END;

global
function val ARDue(string accstr)
BEGIN
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;

  ARDue = KLGetARBal2(KeyRepSpec.basecurncy,KeyRepSpec.sEndDate,accstr,false,false,KeyRepSpec.ArtMode==1,keycoltype,false,"",KeyRepSpec.CurncyCode);
  RETURN;
END;

global
function val ARNRDue(string accstr)
BEGIN
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;

  ARNRDue = KLGetARBal2(KeyRepSpec.basecurncy,KeyRepSpec.sEndDate,accstr,true,false,KeyRepSpec.ArtMode==1,keycoltype,false,"",KeyRepSpec.CurncyCode);
  RETURN;
END;

global
function val ARDPDue(string accstr)
BEGIN
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;

  ARDPDue = KLGetARBal2(KeyRepSpec.basecurncy,KeyRepSpec.sEndDate,accstr,false,true,KeyRepSpec.ArtMode==1,keycoltype,false,"",KeyRepSpec.CurncyCode);
  RETURN;
END;

global
function val ARDPNRDue(string accstr)
BEGIN
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;

  ARDPNRDue = KLGetARBal2(KeyRepSpec.basecurncy,KeyRepSpec.sEndDate,accstr,true,true,KeyRepSpec.ArtMode==1,keycoltype,false,"",KeyRepSpec.CurncyCode);
  RETURN;
END;

global
function val APDue(string accstr)
BEGIN
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;

  APDue = KLGetAPBal2(KeyRepSpec.basecurncy,KeyRepSpec.sEndDate,accstr,false,KeyRepSpec.ArtMode==1,keycoltype,false,"",KeyRepSpec.CurncyCode);
  RETURN;
END;

global
function val APOHDue(string accstr)
BEGIN
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;

  APOHDue = KLGetAPBal2(KeyRepSpec.basecurncy,KeyRepSpec.sEndDate,accstr,true,KeyRepSpec.ArtMode==1,keycoltype,false,"",KeyRepSpec.CurncyCode);
  RETURN;
END;

global
function val AROnAcc()
BEGIN
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;

  AROnAcc = KLGetAROnAcc(KeyRepSpec.basecurncy,KeyRepSpec.sEndDate,keycoltype,"");
  RETURN;
END;

global
function val APOnAcc()
BEGIN
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;

  APOnAcc = KLGetAPOnAcc(KeyRepSpec.basecurncy,KeyRepSpec.sEndDate,keycoltype,"");
  RETURN;
END;

global
function val APPaidResult(string accstr,string asuppliers)
begin
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;
  string 255 suppliers;

  suppliers = asuppliers;
  if (suppliers=="#SUPPLIER#") or (blank(suppliers)) then begin
    suppliers = KeyRepSpec.f4;
  end;
  APPaidResult = KLGetAPPaidResult(KeyRepSpec.basecurncy,KeyRepSpec.sStartDate,KeyRepSpec.sEndDate,accstr,suppliers,KeyRepSpec.f5);
  return;
end;

global
function val APResult(string accstr,string asuppliers)
begin
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;
  string 255 suppliers;

  suppliers = asuppliers;
  if (suppliers=="#SUPPLIER#") or (blank(suppliers)) then begin
    suppliers = KeyRepSpec.f4;
  end;
  APResult = KLGetAPResult(KeyRepSpec.basecurncy,KeyRepSpec.sStartDate,KeyRepSpec.sEndDate,accstr,suppliers,KeyRepSpec.f5);
  return;
end;

global
function val ARPaidResult(string accstr,string acustomers)
begin
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;
  string 255 customers;

  customers = acustomers;
  if (customers=="#CUSTOMER#") or (blank(customers)) then begin
    customers = KeyRepSpec.f4;
  end;
  ARPaidResult = KLGetARPaidResult(KeyRepSpec.basecurncy,KeyRepSpec.sStartDate,KeyRepSpec.sEndDate,accstr,customers,KeyRepSpec.f5);
  return;
end;

global
function val ARResult(string accstr,string acustomers)
begin
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;
  string 255 customers;

  customers = acustomers;
  if (customers=="#CUSTOMER#") or (blank(customers)) then begin
    customers = KeyRepSpec.f4;
  end;
  ARResult = KLGetARResult(KeyRepSpec.basecurncy,KeyRepSpec.sStartDate,KeyRepSpec.sEndDate,accstr,customers,KeyRepSpec.f5);
  return;
end;

global
function val Summa(string accstr)
BEGIN
  Summa = Saldo(accstr);
  RETURN;
END;

global
function val EgyenLeg(string accstr)
BEGIN
  EgyenLeg = Saldo(accstr);
  RETURN;
END;

global
function val DebSaldo(string accstr)
BEGIN
  val dSb,dPb,dEb,cSb,cPb,cEb,res;
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;
  
  KLPerBal("DebBalance",KeyRepSpec,accstr,KeyRepSpec.ObjStr,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
  res = dEb;
  if (nonblank(KeyRepSpec.f6)) then begin
    KLPerBal("DebBalance",KeyRepSpec,accstr,KeyRepSpec.f6,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
    res = res - dEb;
  end;
  DebSaldo = res;
  RETURN;
END;

global
function val DebBalance(string accstr)
BEGIN
  DebBalance = DebSaldo(accstr);
  RETURN;
END;

global
function val CredSaldo(string accstr)
BEGIN
  val dSb,dPb,dEb,cSb,cPb,cEb,res;
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;
  
  KLPerBal("CredBalance",KeyRepSpec,accstr,KeyRepSpec.ObjStr,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
  res = -cEb;
  if (nonblank(KeyRepSpec.f6)) then begin
    KLPerBal("CredBalance",KeyRepSpec,accstr,KeyRepSpec.f6,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
    res = res - (-cEb);
  end;
  CredSaldo = res;
  RETURN;
END;

global
function val CredBalance(string accstr)
BEGIN
  CredBalance = CredSaldo(accstr);
  RETURN;
END;

global
function val DebResult(string accstr)
begin
  val dSb,dPb,dEb,cSb,cPb,cEb,res;
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;
  
  KLPerBal("DebResult",KeyRepSpec,accstr,KeyRepSpec.ObjStr,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
  res = dPb;
  if (nonblank(KeyRepSpec.f6)) then begin
    KLPerBal("DebResult",KeyRepSpec,accstr,KeyRepSpec.f6,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
    res = res - dPb;
  end;
  DebResult = res;
  return;
end;

global
function val AvgDebResult(string accstr)
begin
  val dSb,dPb,dEb,cSb,cPb,cEb,res;
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;
  
  KLPerBal("AvgDebResult",KeyRepSpec,accstr,KeyRepSpec.ObjStr,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
  res = dPb;
  if (nonblank(KeyRepSpec.f6)) then begin
    KLPerBal("AvgDebResult",KeyRepSpec,accstr,KeyRepSpec.f6,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
    res = res - dPb;
  end;
  AvgDebResult = res;
  return;
end;

global
function val CredResult(string accstr)
begin
  val dSb,dPb,dEb,cSb,cPb,cEb,res;
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;
  
  KLPerBal("CredResult",KeyRepSpec,accstr,KeyRepSpec.ObjStr,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
  res = -cPb;
  if (nonblank(KeyRepSpec.f6)) then begin
    KLPerBal("CredResult",KeyRepSpec,accstr,KeyRepSpec.f6,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
    res = res - (-cPb);
  end;
  CredResult = res;
  return;
end;

global
function val AvgCredResult(string accstr)
begin
  val dSb,dPb,dEb,cSb,cPb,cEb,res;
  transaction record RcVc KeyRepSpec;
  transaction Integer keycoltype;
  
  KLPerBal("AvgCredResult",KeyRepSpec,accstr,KeyRepSpec.ObjStr,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
  res = -cPb;
  if (nonblank(KeyRepSpec.f6)) then begin
    KLPerBal("AvgCredResult",KeyRepSpec,accstr,KeyRepSpec.f6,dSb,dPb,dEb,cSb,cPb,cEb,keycoltype);
    res = res - (-cPb);
  end;
  AvgCredResult = res;
  return;
end;

function val ColumnRowBalance(string colcod,string account)
begin
  transaction record TRVc gKeyRn_TRr;
  row TRVc TRrw;
  integer i,trrwcnt;
  val res;
  
  trrwcnt = MatRowCnt(gKeyRn_TRr);
  for (i=0;i<trrwcnt;i=i+1) begin
    MatRowGet(gKeyRn_TRr,i,TRrw);
    if (TRrw.TFromFileName==colcod and TRrw.AccNumber==account) then begin
      res = TRrw.DebVal;
      switch (TRrw.Typ) begin
        case kUserDefRepColumnTypeActuals: res = res*-1;
        case kUserDefRepColumnTypeBudget: res = res*-1;
        case kUserDefRepColumnTypeRevBudget: res = res*-1;
      end;
      i = trrwcnt;
    end;
  end;
  
  ColumnRowBalance = res;
  return;
end;

global
function val Column(string accstr)
begin
  val res; 
  transaction string 5 keycurcod;
  transaction string 255 gAccountForSumup;
  
  if (nonblank(gAccountForSumup)) then begin
    res = ColumnRowBalance(accstr,gAccountForSumup);
  end else begin
    if (nonblank(accstr)) then begin
      res = GetTransVal(keycurcod & "," & accstr);
    end else begin
      res = GetTransVal(keycurcod);
    end;
  end;
  Column = res;
  return;
end;

global
function val Nyckel(string accstr)
BEGIN
//this should be run only from mother comany 
  val res;  
  record ConsolidationBlock Cb; 
  Boolean skipf;
  transaction record RcVc KeyRepSpec;
  transaction string 5 keycurcol;
  transaction Integer keyconscompany;
  
  if (KeyRepSpec.IncDaughter!=0) then begin
/*  
    BlockLoad(Cb);
    if (nonblank(Cb.MotherCode)) then begin
      if (StringToInt(Cb.MotherCode)!=CurrentCompany) then begin
        skipf = true;
      end;
    end;
*/
    if (keyconscompany!=CurrentCompany) then begin
      skipf = true;
    end;    
  end;
  if (!skipf) then begin
    if (nonblank(keycurcol)) then begin
      res = GetTransVal(accstr & "," & keycurcol);
    end else begin
      res = GetTransVal(accstr);
    end;
  end;
  Nyckel = res;
  RETURN;
END;

global
function val Avain(string accstr)
BEGIN
  Avain = Nyckel(accstr);
  RETURN;
END;

global
function val Merki(string accstr)
BEGIN
  Merki = Nyckel(accstr);
  RETURN;
END;

global
function val Key(string accstr)
BEGIN
  val v;
  transaction Integer keyconscompany;

  if (keyconscompany==CurrentCompany) then begin
    v = Nyckel(accstr);
  end;  
  Key = v;
  RETURN;
END;

global
function val Sor(string accstr)
BEGIN
  Sor = Nyckel(accstr);
  RETURN;
END;

global
function val RoundValue(string accstr,Integer dec)
begin
  RoundValue = Round(StringToVal(accstr,M4Val),SetROundModeD(dec));
  return;
end;

procedure ParseIFKEYFormula(string formula,var string accstr1,var Integer operator,var string accstr2)
begin
  Integer where;
  string 255 c,opstr;

  accstr1 = "";
  operator = kCompOpNone;
  accstr2 = "";
  where = InString2(formula,">");

  if (where<0) then begin
    where = InString2(formula,"<");
  end;
  if (where<0) then begin
    where = InString2(formula,"=");
  end;
  if (where<0) then begin
    where = InString2(formula,"!");
  end;
  opstr = Mid(formula,where,1);
  c = Mid(formula,where+1,1);
  if ((c=="=") or (c==">") or (c=="<"))then begin
    opstr = opstr & c;
  end;
  accstr1 = Left(formula,where);
  accstr2 = Right(formula,len(formula)-(where+len(opstr)));

  switch (opstr) begin
    case ">":  operator = kCompOpGreaterThan;
    case "<":  operator = kCompOpLessThan;
    case "=":  operator = kCompOpEquals;
    case ">=": operator = kCompOpGreaterThanOrEqualTo;
    case "<=": operator = kCompOpLessThanOrEqualTo;
    case "!=": operator = kCompOpNotEqual;
    case "!>": operator = kCompOpNotGreaterThan;
    case "!<": operator = kCompOpNotLessThan;
  end;
  return;
end;

global
function val IFKEY(string formula,string key1,string key2)
begin
  val res;  
  val acc1res,acc2res;
  val key1res,key2res;
  record ConsolidationBlock Cb; 
  Boolean skipf;
  transaction record RcVc KeyRepSpec;
  transaction string 5 keycurcol;
  transaction Integer keyconscompany;
  string 255 accstr1,accstr2;
  Integer operator;
      
  ParseIFKEYFormula(formula,accstr1,operator,accstr2);
  
  if (KeyRepSpec.IncDaughter!=0) then begin
/*  
    BlockLoad(Cb);
    if (nonblank(Cb.MotherCode)) then begin
      if (StringToInt(Cb.MotherCode)!=CurrentCompany) then begin
        skipf = true;
      end;
    end;
*/
    if (keyconscompany!=CurrentCompany) then begin
      skipf = true;
    end;    
  end;
  if (!skipf) then begin
    if (nonblank(keycurcol)) then begin
      acc1res = GetTransVal(accstr1 & "," & keycurcol);
    end else begin
      acc1res = GetTransVal(accstr1);
    end;
  end;
  if (!skipf) then begin
    if (nonblank(keycurcol)) then begin
      acc2res = GetTransVal(accstr2 & "," & keycurcol);
    end else begin
      acc2res = GetTransVal(accstr2);
    end;
  end;
  if (!skipf) then begin
    if (nonblank(keycurcol)) then begin
      key1res = GetTransVal(key1 & "," & keycurcol);
    end else begin
      key1res = GetTransVal(key1);
    end;
  end;
  if (!skipf) then begin
    if (nonblank(keycurcol)) then begin
      key2res = GetTransVal(key2 & "," & keycurcol);
    end else begin
      key2res = GetTransVal(key2);
    end;
  end;
  switch (operator) begin
    case kCompOpEquals:
      if (acc1res==acc2res) then begin
        res = key1res;
      end else begin
        res = key2res;
      end;
    case kCompOpGreaterThan:
      if (acc1res>acc2res) then begin
        res = key1res;
      end else begin
        res = key2res;
      end;
    case kCompOpLessThan:
      if (acc1res<acc2res) then begin
        res = key1res;
      end else begin
        res = key2res;
      end;
    case kCompOpGreaterThanOrEqualTo:
      if (acc1res>=acc2res) then begin
        res = key1res;
      end else begin
        res = key2res;
      end;
    case kCompOpLessThanOrEqualTo:
      if (acc1res<=acc2res) then begin
        res = key1res;
      end else begin
        res = key2res;
      end;
    case kCompOpNotEqual:
      if (acc1res!=acc2res) then begin
        res = key1res;
      end else begin
        res = key2res;
      end;
    case kCompOpNotLessThan:
      if (acc1res>=acc2res) then begin
        res = key1res;
      end else begin
        res = key2res;
      end;
    case kCompOpNotGreaterThan:
      if (acc1res<=acc2res) then begin
        res = key1res;
      end else begin
        res = key2res;
      end;
  end;  
  IFKEY = res;
  return;
end;

global
function Boolean IsChart(string defstr)
begin
  Boolean res;
  
  res = false;
  
  if (left(defstr,4)=="Pie(") then begin
    res = true;
    goto LIsChart;
  end;
  
LIsChart:;
  IsChart = res;
  return;
end;

global
function val Pie(string keysstr,string formating,string id)
begin
//this should be run only from mother comany 
  val v;  
  record ConsolidationBlock Cb; 
  Boolean skipf;
  string 255 keystr,tstr;
  transaction record RcVc KeyRepSpec;
  transaction string 5 keycurcol;
  transaction Integer keyconscompany;
  transaction record UserDefRepVc gKeyRn_UserDefRepr;
  row UserDefRepVc UserDefReprw;
  transaction record UserDefRepColumnsVc gKeyRn_UserDefRepColumnsr;
  row UserDefRepColumnsVc UserDefRepColumnsrw;
  Integer rwcnt,i,coli,colrcwcnt,visiblecolrcwcnt;
  string 5 nsep;
  Integer np;
  Integer onemore,pos,posused,hidden;
  
  if (HasCharts and keyconscompany==CurrentCompany) then begin
    if (KeyRepSpec.IncDaughter!=0) then begin
      if (keyconscompany!=CurrentCompany) then begin
        skipf = true;
      end;
    end;
    if (!skipf) then begin
      rwcnt = MatRowCnt(gKeyRn_UserDefRepr);
      colrcwcnt = MatRowCnt(gKeyRn_UserDefRepColumnsr);
      
//same as in KeyRnPrint
      for (i=0; i<rwcnt; i=i+1) begin
        MatRowGet(gKeyRn_UserDefRepr,i,UserDefReprw);
        
        visiblecolrcwcnt = colrcwcnt;
        for (coli=0;coli<colrcwcnt;coli=coli+1) begin
          MatRowGet(gKeyRn_UserDefRepColumnsr,coli,UserDefRepColumnsrw);
          if (UserDefRepColumnsrw.Hide!=0) then begin visiblecolrcwcnt = visiblecolrcwcnt - 1; end;
        end;
        
        for (coli=0;coli<colrcwcnt;coli=coli+1) begin
          MatRowGet(gKeyRn_UserDefRepColumnsr,coli,UserDefRepColumnsrw);
          if (true) then begin
            if (coli==0) then begin
              if (UserDefRepColumnsrw.ColType!=-1) then begin
                onemore = 1;
              end;
            end;
            if (UserDefRepColumnsrw.Hide==0) then begin
              if (UserDefRepColumnsrw.ReportPosition>=0) then begin
                pos = UserDefRepColumnsrw.ReportPosition;
              end else begin
                if (UserDefRepColumnsrw.Hide==0) and (UserDefReprw.Hide==0) then begin
                  pos = posused + (((480-posused)/visiblecolrcwcnt)*((coli-hidden)+onemore));
                end;
              end;
            end else begin
              hidden = hidden + 1;
            end;
            
            switch (UserDefRepColumnsrw.ColType) begin
              case kUserDefRepColumnTypeCode:
              case kUserDefRepColumnTypeComment:
              otherwise
            end;
    
            if (UserDefRepColumnsrw.ColCode==keycurcol) then begin
              coli = colrcwcnt;
              i = rwcnt;
            end;
          end;
        end;
      end;
      if (colrcwcnt==0 or pos==1) then begin pos = 480; end;
      pos = pos - 90;
      ChartBegin(-1,"$KFR_BIPieChart" & id & "-" & keycurcol,kChartTypePie,kChartLegendTypeNone,0,pos);
      ChartOnMouseOver(kChartOnMouseOverToolTip);
      ChartOnMouseOver(kChartOnMouseOverHighlight);
      ChartOnMouseOver(kChartOnMouseOverMagnify);
      ChartDataSeriesBegin("Pie");
      GetNextToken(keysstr,np,keystr);
      GetNext2Sep(keysstr,np,nsep);
      while (nonblank(keystr)) begin
        if (nonblank(keycurcol)) then begin
          v = GetTransVal(keystr & "," & keycurcol);
        end else begin
          v = GetTransVal(keystr);
        end;
        tstr = "";
        for (i=0; i<rwcnt; i=i+1) begin
          MatRowGet(gKeyRn_UserDefRepr,i,UserDefReprw);
          if (UserDefReprw.Code==keystr) then begin
            tstr = UserDefReprw.Comment;
            i = rwcnt;
          end;
        end;
        ChartDatum(v,tstr & "<br>" & v);
        GetNextToken(keysstr,np,keystr);
        GetNext2Sep(keysstr,np,nsep);
      end;
      EndChartDataSeries;      
      EndChart;
    end;
  end;
  Pie = blankval;
  return;
end;
