external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external procedure FindPaidAmount(LongInt,LongInt,var val);
external procedure FindOpenAmount(LongInt,var val);

function val FindPaidOnThisReceipt(record IPVc IPr,LongInt InvoiceNr,Integer rwcnt)
BEGIN
  val res;
  row IPVc IPrw;
  Integer i;
  
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IPr,i,IPrw);
    if (IPrw.InvoiceNr==InvoiceNr) then begin
      res = res + IPrw.InvVal;
    end;
  end;
  FindPaidOnThisReceipt = res;
  RETURN;
END;

global
procedure IPInfoRn(record RcVc RepSpec)
begin
  record IVVc IVr;
  record IPVc IPr;
  row IPVc IPrw;
  Integer i,rwcnt;
  String 200 tstr,t2;
  val x,qty;
  val rs;
  val paidamount,invval,diff,openamount,iv,paidonip;
  val totdiff;

  totdiff = 0;
  IPr.SerNr = RepSpec.long1;
  if (ReadFirstMain(IPr,1,true)) then begin
   StartReportJob(USetStr(6770));
    EndHeader;
    SetRepCol(2,50);
    SetRepCol(3,100);
    SetRepCol(4,210);
    SetRepCol(5,275);
    SetRepCol(6,340);
    SetRepCol(7,405);
    StartFormat(15);
    OutString(0,0,USetStr(2442),false);
    OutString(2,0,USetStr(6741),false);
    OutString(4,0,USetStr(6774),true);
    OutString(5,0,USetStr(6771),true);
    OutString(6,0,USetStr(6776),true);
    OutString(7,0,USetStr(6772),true);
    OutString(1,0,USetStr(6773),true);
    EndFormat;
    Gray_Divider(0,1);
    StartFormat(15);
    OutLongInt(0,0,IPr.SerNr,false);
    OutString(2,0,IPr.Comment,false);
    OutDate(4,0,IPr.TransDate,true);
    OutString(6,0,USetStr(2445) & ": " & IPr.PayMode,false);
    EndFormat;
    Gray_Divider(0,1);
    rwcnt = MatRowCnt(IPr);
    for (i=0; i<rwcnt; i=i+1) begin
      openamount = 0;
      paidamount = 0;
      MatRowGet(IPr,i,IPrw);
      IVr.SerNr = IPrw.InvoiceNr;
      if (ReadFirstMain(IVr,1,true)) then begin
        if (IVr.Invalid==0) then begin
          FindOpenAmount(IVr.SerNr,openamount);
//          FindPaidAmount(IVr.SerNr,IPr.SerNr,paidamount);
          paidonip = FindPaidOnThisReceipt(IPr,IPrw.InvoiceNr,i);;
          iv = IVr.Sum4 - paidonip;
          invval = MulRateToBase1(IVr.CurncyCode,iv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          paidamount = MulWithRateToBase1(IPrw.InvCurncy,IPr.TransDate,IPrw.InvVal,DefaultCurRoundOff);
          openamount = openamount - paidonip;
        end else begin
          paidamount = 0;
          invval = 0;
        end;
      end else begin
        paidamount = 0;
        invval = 0;
        totdiff = -1;//means don't exist
        StartFormat(15);    
        OutString(2,0,USetStr(1290) & " " & IPrw.InvoiceNr,false);
        EndFormat;
      end;
      diff = openamount - paidamount;

      if (IPr.OKFlag==1) then begin
        diff = openamount;
      end;
      if (true) then begin//diff!=0 sometimes it is paid all
        totdiff = totdiff + diff;
        if ((IPrw.stp!=5) and (IPrw.stp!=6) and (IPrw.stp!=7)) then begin
          StartFormat(15);
          OutLongInt(0,0,IPrw.InvoiceNr,false);
          OutString(2,0,IPrw.CustCode,false);
          OutString(3,0,IPrw.CustName,false);
          if (IPr.TransDate<>IPrw.PayDate) then begin
            OutDate(4,0,IPrw.PayDate,true);
          end;
          OutVal(5,0,invval,M4Val,true);
          OutVal(6,0,openamount,M4Val,true);
          OutVal(7,0,paidamount,M4Val,true);
          OutVal(1,0,diff,M4Val,true);
          EndFormat;
        end;
        if (IPrw.stp==5) then begin
          StartFormat(15);
          OutLongInt(0,0,IPrw.InvoiceNr,false);
          OutString(2,0,IPrw.CustCode,false);
          OutString(3,0,IPrw.CustName,false);
          OutString(4,0,USetStr(2449),true);
          OutVal(5,0,invval,M4Val,true);
          OutVal(6,0,paidamount,M4Val,true);
          OutVal(7,0,openamount,M4Val,true);
          OutVal(1,0,diff,M4Val,true);
          EndFormat;
        end;
        if (IPrw.stp==6) then begin
          StartFormat(15);
          OutLongInt(0,0,IPrw.InvoiceNr,false);
          OutString(2,0,IPrw.CustCode,false);
          OutString(3,0,IPrw.CustName,false);
          OutString(4,0,USetStr(2451),true);
          OutVal(5,0,invval,M4Val,true);
          OutVal(6,0,paidamount,M4Val,true);
          OutVal(7,0,diff,M4Val,true);
          OutVal(1,0,openamount,M4Val,true);
          EndFormat;
        end;
        if (IPrw.stp==7) then begin
          StartFormat(15);
          OutLongInt(0,0,IPrw.InvoiceNr,false);
          OutString(2,0,IPrw.CustCode,false);
          OutString(3,0,IPrw.CustName,false);
          OutString(4,0,USetStr(2454),true);
          OutVal(5,0,invval,M4Val,true);
          OutVal(6,0,paidamount,M4Val,true);
          OutVal(7,0,diff,M4Val,true);
          OutVal(1,0,openamount,M4Val,true);
          EndFormat;
        end;
      end;
   end;
  end;
  if (totdiff==0) then begin
    StartFormat(15);
    OutString(2,0,USetStr(6775),false);
    EndFormat;
  end else begin
    Gray_Divider(0,1);
  end;
  EndJob; 
  return;
end;
