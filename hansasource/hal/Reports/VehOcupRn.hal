
function 
val GetDailyKm(Date Fecha,String Car,var val EndPos)
begin
  record KmCountVc KmCountr;
  val TYes,Ttod,res;
  
  KmCountr.Vehicle   = Car;
  KmCountr.TransDate = AddDay(Fecha,-1);
  if ReadFirstKey("Vehicle",KmCountr,2,true) then begin
    TYes = KmCountr.Km;
    EndPos = KmCountr.Km;
  end;
  KmCountr.TransDate = Fecha;
  KmCountr.Vehicle   = Car;
  ResetLoop(KmCountr);
  if ReadFirstKey("Vehicle",KmCountr,2,true) then begin
    Ttod = KmCountr.Km;
  end;
  if ((TYes==BlankVal) or (Ttod==BlankVal)) then begin
    res = -1;
  end else begin
    res = (Ttod-TYes);
  end;
  
  GetDailyKm = res;
  return;
end;

procedure GetDailyTransfers(Date Fecha,Var Val PaxKm,Var Val Paxs,Var Val Km,Record RcVc RepSpec)
begin
  record TransferVc Transfer;
  record RouteVc Route;
  Boolean Skip,TrHs;
  Val Pax;
  
  PaxKm = 0; Paxs  = 0; Km = 0; TrHs = true;
  Transfer.TransDate = Fecha;
  while(LoopKey("TransDate",Transfer,1,TrHs)) begin
    
    skip = false;
    if ((Transfer.MainPersons<>RepSpec.f2) and nonblank(RepSpec.f2)) then begin
      skip = true;
    end;
    if (Transfer.VehicleNr<>RepSpec.f1) then begin
      skip = true;
    end;
    if (Fecha<>Transfer.TransDate) then begin
      skip = true;
      TrHs = false;
    end;
    
    if (not skip) then begin
      Pax  = MatRowCnt(Transfer);
      Paxs = Paxs + Pax;
      Route.Code = Transfer.Route;
      if Readfirstmain(Route,1,true) then begin
        Km    = Km + Route.Distance;
        PaxKm = PaxKm + (Route.Distance * Pax);
      end;
    end;
  end;
  return;
end;

global
procedure VehOcupRn( Record RcVc RepSpec )
begin
  Val PaxKm,Paxs,KmCon,KmTot,EndPos;
  Date vDate;
  Val tPaxKm,tPax,tKmCon,tKmTot;
  Val Porc,tPorc;
  
  tPaxKm =0;
  tPax   =0;
  tKmCon =0;
  tKmTot =0;
  StartReportJob(USetStr(11210));
  EndHeader;
  
  SetRepCol(2,5);
  SetRepCol(3,100);  
  SetRepCol(4,175); 
  SetRepCol(5,250); 
  SetRepCol(6,300);
  SetRepCol(7,400); 
  SetRepCol(8,480); 
    
  if blank(RepSpec.f1) then begin
    goto L99;
  end;
  
  StartFormat(15);
  OutString(2,0,USetStr(11211),false);
  OutString(3,0,USetStr(11212),true); 
  OutString(4,0,USetStr(11213),true);
  OutString(5,0,USetStr(11214),true);
  OutString(6,0,USetStr(11215),true);
  OutString(7,0,USetStr(11216),true);
  OutString(8,0,USetStr(11217),true);
  EndFormat;
    
  Gray_Divider(0,1);
  vDate = RepSpec.sStartDate;
  while ( vDate <= RepSpec.sEndDate ) begin
    
    KmTot = GetDailyKm(vDate,RepSpec.f1,EndPos);
    GetDailyTransfers(vDate,PaxKm,Paxs,KmCon,RepSpec);
    if (KmTot<>-1) then begin
      StartFormat(15);
      OutDate(2,0,vDate,false);
      Porc = (KmCon/KmTot) * 100.00;
      OutVal(3,0,EndPos,M4Val,true);
      OutVal(4,0,KmTot,M4Val,true);
      OutVal(5,0,KmCon,M4Val,true);
      OutVal(6,0,Paxs,M4Val,true);
      OutVal(7,0,Porc,M4Val,true);
      OutVal(8,0,PaxKm,M4Val,true);
      EndFormat;
      tPaxKm = tPaxKm + PaxKm;
      tPax   = tPax   + Paxs;
      tKmCon = tKmCon + KmCon;
      tKmTot = tKmTot + KmTot;
    end;
    vDate = AddDay(vDate,1);
  end; 
  Gray_Divider(0,1);
  tPorc = (tKmCon/tKmTot) * 100.00;
  StartFormat(15);
  OutString(0,0,USetStr(11218),false);
  OutVal(4,0,tKmTot,M4Val,true);
  OutVal(5,0,tKmCon,M4Val,true);
  OutVal(6,0,tPax,M4Val,true);
  OutVal(7,0,tPorc,M4Val,true);
  OutVal(8,0,tPaxKm,M4Val,true);
  EndFormat;

L99:; 
  EndJob;
  return;
end;
 

