external procedure AddInCurtoTBIVwithRate(var record TBIVVc,string,val,val,val,val,val);
external procedure CalcInCurtoTBIV(var record TBIVVc);
external function Integer GetItemTypeGroup(string,var string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure GetProjectPrice(string,string,string,string,string,val,var val,var val,var string,var val,var string);
external function Integer PlainItemPricing(string,string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure GetPRName(string, var string);
external function Boolean GenActProjTrans(string);

procedure PrintMissingTBI(string atype,LongInt sernr,string prcode,string item,Date trdat,val sum)
begin
  StartFormat(15);
  OutString(0,0,atype & ":" & sernr,false);
  OutString(2,0,prcode,false);
  OutString(3,0,item,false);
  OutDate(4,0,trdat,false);
  OutVal(1,0,sum,M4Val,true);
  EndFormat;  
  return;
end;

updating procedure CreateMissingTBI(Integer thevc,Integer itemtype,LongInt sernr,string prcode,string item,Date trdat,val sum,string objects,val qty,string comment,string uscod,Integer rw,
                                    Boolean withratef,string crncy,val fr,val to1,val to2,val br1,val br2)
begin
  record TBIVVc TBIr;
  record PRVc PRr;
  record INVc INr;
  Integer intype;
  Integer invseptb,invseppb;
  Boolean found;
  val price,reb,t,priceincur;
  string 10 markup,markupincur;
  record ProjectBlock PRRec;
  
  INr.Code = item;
  found = ReadFirstMain(INr,1,true);
  if (found) then begin
    intype = INr.ItemType;
  end else begin
    intype = 1;
  end;
  PRr.Code = prcode;
  if (ReadFirstMain(PRr,1,true)) then begin
    invseptb = PRr.InvSepTB;
    invseppb = PRr.InvSepPB;
    TBIr.PRName = PRr.Name;
  end;
  TBIr.SerNr = sernr;
  TBIr.PRCode = prcode;
  TBIr.ArtCode = item;
  TBIr.ItemType = GetItemTypeGroup(TBIr.ArtCode,TBIr.INGroup);
  TBIr.TransDate = trdat;
  TBIr.Sum = sum;
  TBIr.Objects = objects;
  TBIr.Qty = qty;
  TBIr.InvQty = qty;
  TBIr.Comment = comment;
  TBIr.EMCode = uscod;
  TBIr.Row = rw;
  TBIr.oVc = thevc;
  TBIr.Invoice = -1;
  if (TBIr.oVc==1) then begin
    TBIr.InvSeparately = invseptb;
    if ((itemtype==3) or (found==false)) then begin
      TBIr.ItemType = itemtype;
    end else begin
      if (INr.ItemMaterial==1) then begin
        TBIr.ItemType = 5;
      end else begin
        TBIr.ItemType = 0;
      end;
    end;
  end;
  if (TBIr.oVc==2) then begin
    TBIr.ItemType = intype;
    TBIr.InvSeparately = invseppb;
    if (intype==3) then begin
      TBIr.ItemType = 3;
    end else begin
      if (INr.ItemMaterial==1) then begin
        TBIr.ItemType = 5;
      end else begin
        TBIr.ItemType = 0;
      end;
    end;
  end;
  if (TBIr.oVc==3) then begin
    TBIr.InvSeparately = invseptb;
    if (intype==3) then begin
      TBIr.ItemType = 3;
    end else begin
      if (INr.ItemMaterial==1) then begin
        TBIr.ItemType = 5;
      end else begin
        TBIr.ItemType = 0;
      end;
    end;
  end;
  if (TBIr.oVc==4) then begin
    TBIr.InvSeparately = invseppb;
    TBIr.ItemType = intype;
    if (TBIr.ItemType==2) then begin
      TBIr.ItemType = 1;
    end;
  end;
  if (TBIr.oVc==5) then begin
    TBIr.InvSeparately = invseptb;
    TBIr.ItemType = 3;
  end;
  switch (thevc) begin
    case 2:
      switch (PlainItemPricing(TBIr.PRCode,TBIr.ArtCode)) begin
        case 0: TBIr.Price = sum/qty;
        case 1: 
          GetProjectPrice(TBIr.PRCode,TBIr.ArtCode,"","","",1,price,reb,markup,priceincur,markupincur);    
          TBIr.Price = price;
      end;
      TBIr.Markup = markup;
      BlockLoad(PRRec);
      if (PRRec.UseItemCostPrice!=0) then begin
        TBIr.CostPrice = sum/qty;
      end else begin
        TBIr.CostPrice = INr.InPrice;
      end;
      t = TBIr.CostPrice*TBIr.Qty;
      TBIr.GP = TBIr.Sum - t;
  end;
  if (withratef) then begin
    AddInCurtoTBIVwithRate(TBIr,crncy,fr,to1,to2,br1,br2);  
  end else begin
    CalcInCurtoTBIV(TBIr);
  end;
  if (RecordStore(TBIr,true)) then begin
  end;
  return;
end;

updating
procedure DoesTSHavePrTr(Boolean repf,Date fr,Date to,string afr,string ato)
begin
  record TBIVVc TBIr;
  record TSVc TSr;
  row TSVc TSrw;
  Integer rwcnt,i;
  Boolean TrHs;
  Boolean testf,testf2;
  Boolean missing;
  string 255 tstr;

  TrHs = true;
  TSr.RegDate = fr;
  while (LoopKey("RegDate",TSr,1,TrHs)) begin
    if (TSr.RegDate>to) then begin TrHs = false; end;
    testf = true;
    if (TSr.OKFlag==0) then begin testf = false; end;
    if (TrHs==false) then begin testf = false; end;
    if (testf) then begin
        rwcnt = MatRowCnt(TSr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(TSr,i,TSrw);
          if (nonblank(TSrw.PRCode)) then begin
            testf2 = true;
            if ((nonblank(afr)) and (afr<TSrw.PRCode)) then begin testf2 = false; end;
            if ((nonblank(ato)) and (ato>TSrw.PRCode)) then begin testf2 = false; end;
            if (TSrw.ovst==1) then begin testf2 = false; end;
            if (testf2) then begin
              missing = false;
              TBIr.SerNr = TSr.SerNr;
              TBIr.oVc = 1;
              TBIr.PRCode = TSrw.PRCode;
              GetPRName(TBIr.PRCode,tstr);
              TBIr.PRName = tstr;
              TBIr.Row = i;
              if (ReadFirstMain(TBIr,4,true)==false) then begin
                missing = true;
              end;
              if (missing) then begin
                if (repf) then begin
                  PrintMissingTBI(USetStr(1831),TSr.SerNr,TSrw.PRCode,TSrw.ArtCode,TSr.RegDate,BlankVal);
                end else begin
                  CreateMissingTBI(1,TSrw.ItemType,TSr.SerNr,TSrw.PRCode,TSrw.ArtCode,TSr.RegDate,BlankVal,TSrw.Objects,TSrw.Qty,TSrw.Spec,TSrw.EMCode,i,
                                   false,"",blankval,blankval,blankval,blankval,blankval);
                end;
              end;              
            end;
          end;
      end;
    end;
  end;
  return;
end;

updating
procedure DoesVIHavePrTr(Boolean repf,Date fr,Date to,string afr,string ato)
begin
  record TBIVVc TBIr;
  record VIVc VIr;
  row VIVc VIrw;
  Integer rwcnt,i;
  Boolean TrHs;
  Boolean testf,testf2;
  Boolean missing;
  record INVc INr;
  Integer itemtype;
  val qty,basesum;

  TrHs = true;
  VIr.TransDate = fr;
  while (LoopKey("TransDate",VIr,1,TrHs)) begin
    if (VIr.TransDate>to) then begin TrHs = false; end;
    testf = true;
    if (VIr.Invalid<>0) then begin testf = false; end;
    if (VIr.OKFlag==0) then begin testf = false; end;
    if (TrHs==false) then begin testf = false; end;
    if (testf) then begin
        rwcnt = MatRowCnt(VIr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(VIr,i,VIrw);
          if (nonblank(VIrw.PRCode)) then begin
            testf2 = true;
            if ((nonblank(afr)) and (afr<VIrw.PRCode)) then begin testf2 = false; end;
            if ((nonblank(ato)) and (ato>VIrw.PRCode)) then begin testf2 = false; end;
            if (testf2) then begin
              missing = false;
              TBIr.SerNr = VIr.SerNr;
              TBIr.oVc = 2;
              TBIr.PRCode = VIrw.PRCode;
              TBIr.Row = i;
              if (ReadFirstMain(TBIr,4,true)==false) then begin
                missing = true;
              end;
              if (missing) then begin
                if (repf) then begin
                  PrintMissingTBI(USetStr(1752),VIr.SerNr,VIrw.PRCode,VIrw.Item,VIr.TransDate,VIrw.Sum);
                end else begin
                  itemtype = 1;
                  if (ReadFirstItem(VIrw.Item,INr,true,true)) then begin 
                    itemtype = INr.ItemType;
                  end;
                  qty = VIrw.qty;
                  if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                    qty = -VIrw.qty;
                  end;
                  basesum = MulRateToBase1(VIr.CurncyCode,VIrw.Sum,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
                  CreateMissingTBI(2,itemtype,VIr.SerNr,VIrw.PRCode,VIrw.Item,VIr.TransDate,basesum,VIrw.Objects,qty,VIrw.Comment,"",i,
                                   true,VIr.CurncyCode,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2);
                end;
              end;              
            end;
          end;
      end;
    end;
  end;
  return;
end;

updating
procedure DoesExpHavePrTr(Boolean repf,Date fr,Date to,string afr,string ato)
begin
  record TBIVVc TBIr;
  record ExpVc Expr;
  row ExpVc Exprw;
  Integer rwcnt,i;
  Boolean TrHs;
  Boolean testf,testf2;
  Boolean missing;

  TrHs = true;
  Expr.TransDate = fr;
  while (LoopKey("TransDate",Expr,1,TrHs)) begin
    if (Expr.TransDate>to) then begin TrHs = false; end;
    testf = true;
    if (Expr.OKFlag==0) then begin testf = false; end;
    if (Expr.Invalid!=0)then begin testf = false; end;
    if (TrHs==false) then begin testf = false; end;
    if (testf) then begin
        rwcnt = MatRowCnt(Expr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(Expr,i,Exprw);
          if (nonblank(Exprw.PRCode)) then begin
            testf2 = true;
            if ((nonblank(afr)) and (afr<Exprw.PRCode)) then begin testf2 = false; end;
            if ((nonblank(ato)) and (ato>Exprw.PRCode)) then begin testf2 = false; end;
            if (testf2) then begin
              missing = false;
              TBIr.SerNr = Expr.SerNr;
              TBIr.oVc = 3;
              TBIr.PRCode = Exprw.PRCode;
              TBIr.Row = i;
              if (ReadFirstMain(TBIr,4,true)==false) then begin
                missing = true;
              end;
              if (missing) then begin
                if (repf) then begin
                  PrintMissingTBI(USetStr(1847),Expr.SerNr,Exprw.PRCode,Exprw.Item,Expr.TransDate,Exprw.Sum);
                end else begin
                  CreateMissingTBI(3,1,Expr.SerNr,Exprw.PRCode,Exprw.Item,Expr.TransDate,Exprw.Sum,Exprw.Objects,Exprw.qty,Exprw.Comment,Expr.Person,i,
                                   true,Expr.CurncyCode,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2);
                end;
              end;              
            end;
          end;
      end;
    end;
  end;
  return;
end;

updating
procedure DoesDelHavePrTr(Boolean repf,Date fr,Date to,string afr,string ato)
begin
  record TBIVVc TBIr;
  record SHVc SHr;
  row SHVc SHrw;
  Integer rwcnt,i;
  Boolean TrHs;
  Boolean testf,testf2;
  Boolean missing;

  TrHs = true;
  SHr.ShipDate = fr;
  while (LoopKey("ShipDate",SHr,1,TrHs)) begin
    if (SHr.ShipDate>to) then begin TrHs = false; end;
    testf = true;
    if ((nonblank(afr)) and (afr<SHr.PRCode)) then begin testf = false; end;
    if ((nonblank(ato)) and (ato>SHr.PRCode)) then begin testf = false; end;
    if (blank(SHr.PRCode)) then begin testf = false; end;
    if (SHr.OKFlag==0) then begin testf = false; end;
    if (TrHs==false) then begin testf = false; end;
    if (testf) then begin
        rwcnt = MatRowCnt(SHr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(SHr,i,SHrw);
            testf2 = true;
            if (SHrw.Ship==0) then begin testf2 = false; end;
            if (testf2) then begin
              missing = false;
              TBIr.SerNr = SHr.SerNr;
              TBIr.oVc = 4;
              TBIr.PRCode = SHr.PRCode;
              TBIr.Row = i;
              if (ReadFirstMain(TBIr,4,true)==false) then begin
                missing = true;
              end;
              if (missing) then begin
                if (repf) then begin
                  PrintMissingTBI(USetStr(1817),SHr.SerNr,SHr.PRCode,SHrw.ArtCode,SHr.ShipDate,BlankVal);
                end else begin
                  CreateMissingTBI(4,1,SHr.SerNr,SHr.PRCode,SHrw.ArtCode,SHr.ShipDate,BlankVal,SHrw.Objects,SHrw.Ship,SHrw.Spec,"",i,
                                   false,"",blankval,blankval,blankval,blankval,blankval);
                end;
              end;              
          end;
      end;
    end;
  end;
  return;
end;

updating
procedure DoesSDHavePrTr(Boolean repf,Date fr,Date to,string afr,string ato)
begin
  record TBIVVc TBIr;
  record SDVc SDr;
  row SDVc SDrw;
  Integer rwcnt,i;
  Boolean TrHs;
  Boolean testf,testf2;
  Boolean missing;

  TrHs = true;
  SDr.TransDate = fr;
  while (LoopKey("TransDate",SDr,1,TrHs)) begin
    if (SDr.TransDate>to) then begin TrHs = false; end;
    testf = true;
    if ((nonblank(afr)) and (afr<SDr.PRCode)) then begin testf = false; end;
    if ((nonblank(ato)) and (ato>SDr.PRCode)) then begin testf = false; end;
    if (blank(SDr.PRCode)) then begin testf = false; end;
    if (SDr.OKFlag==0) then begin testf = false; end;
    if (TrHs==false) then begin testf = false; end;
    if (testf) then begin
        rwcnt = MatRowCnt(SDr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(SDr,i,SDrw);
            testf2 = true;
            if (SDrw.Qty==0) then begin testf2 = false; end;
            if (testf2) then begin
              missing = false;
              TBIr.SerNr = SDr.SerNr;
              TBIr.oVc = 7;
              TBIr.PRCode = SDrw.PRCodeRow;
              if (blank(TBIr.PRCode)) then begin
                TBIr.PRCode = SDr.PRCode;
              end;
              TBIr.Row = i;
              if (ReadFirstMain(TBIr,4,true)==false) then begin
                missing = true;
              end;
              if (missing) then begin
                if (repf) then begin
                  PrintMissingTBI(USetStr(1837),SDr.SerNr,SDr.PRCode,SDrw.ArtCode,SDr.TransDate,BlankVal);
                end else begin
                  CreateMissingTBI(6,1,SDr.SerNr,SDr.PRCode,SDrw.ArtCode,SDr.TransDate,BlankVal,SDrw.Objects,SDrw.Qty,SDrw.Spec,"",i,
                                   false,"",blankval,blankval,blankval,blankval,blankval);
                end;
              end;              
          end;
      end;
    end;
  end;
  return;
end;

updating
procedure DoesRetHavePrTr(Boolean repf,Date fr,Date to,string afr,string ato)
begin
  record TBIVVc TBIr;
  record ORVc ORr;
  record RetVc Retr;
  row RetVc Retrw;
  Integer rwcnt,i;
  Boolean TrHs;
  Boolean testf,testf2;
  Boolean missing;

  TrHs = true;
  Retr.TransDate = fr;
  while (LoopKey("TransDate",Retr,1,TrHs)) begin
    if (Retr.TransDate>to) then begin TrHs = false; end;
     ORr.SerNr = Retr.OrdNr;
     if (ReadFirstMain(ORr,1,true)) then begin end;
    testf = true;
    if ((nonblank(afr)) and (afr<ORr.PRCode)) then begin testf = false; end;
    if ((nonblank(ato)) and (ato>ORr.PRCode)) then begin testf = false; end;
    if (blank(ORr.PRCode)) then begin testf = false; end;
    if (Retr.OKFlag==0) then begin testf = false; end;
    if (TrHs==false) then begin testf = false; end;
    if (testf) then begin
        rwcnt = MatRowCnt(Retr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(Retr,i,Retrw);
            testf2 = true;
            if (Retrw.Quant==0) then begin testf2 = false; end;
            if (testf2) then begin
              missing = false;
              TBIr.SerNr = Retr.SerNr;
              TBIr.oVc = 6;
              TBIr.PRCode = ORr.PRCode;
              TBIr.Row = i;
              if (ReadFirstMain(TBIr,4,true)==false) then begin
                missing = true;
              end;
              if (missing) then begin
                if (repf) then begin
                  PrintMissingTBI(USetStr(2057),Retr.SerNr,ORr.PRCode,Retrw.ArtCode,Retr.TransDate,BlankVal);
                end else begin
                  CreateMissingTBI(7,1,Retr.SerNr,ORr.PRCode,Retrw.ArtCode,Retr.TransDate,BlankVal,Retrw.Objects,Retrw.Quant,Retrw.Spec,"",i,
                                   false,"",blankval,blankval,blankval,blankval,blankval);
                end;
              end;              
          end;
      end;
    end;
  end;
  return;
end;

updating
procedure DoesActHavePrTr(Boolean repf,Date fr,Date to,string afr,string ato)
begin
  record TBIVVc TBIr;
  record ActVc Actr;
  Integer rwcnt,i;
  Boolean TrHs;
  Boolean testf,testf2;
  Boolean missing;

  TrHs = true;
  Actr.TransDate = fr;
  while (LoopKey("TransDate",Actr,1,TrHs)) begin
    if (Actr.TransDate>to) then begin TrHs = false; end;
    testf = true;
    if ((nonblank(afr)) and (afr<Actr.PRCode)) then begin testf = false; end;
    if ((nonblank(ato)) and (ato>Actr.PRCode)) then begin testf = false; end;
    if (blank(Actr.PRCode)) then begin testf = false; end;
    if (Actr.OKFlag==0) then begin testf = false; end;
    if (TrHs==false) then begin testf = false; end;
    if (testf) then begin
      if (GenActProjTrans(Actr.ActType)==false) then begin testf = false; end;      
    end;
    if (testf) then begin
      missing = false;
      TBIr.SerNr = Actr.SerNr;
      TBIr.oVc = 5;
      TBIr.PRCode = Actr.PRCode;
      TBIr.Row = -1;
      if (ReadFirstMain(TBIr,4,true)==false) then begin
        missing = true;
      end;
      if (missing) then begin
        if (repf) then begin
          PrintMissingTBI(USetStr(1845),Actr.SerNr,Actr.PRCode,Actr.ItemCode,Actr.TransDate,BlankVal);
        end else begin
          CreateMissingTBI(5,1,Actr.SerNr,Actr.PRCode,Actr.ItemCode,Actr.TransDate,BlankVal,"",TimeToVal(Actr.CostTime),Actr.Comment,Actr.MainPersons,-1,
                           false,"",blankval,blankval,blankval,blankval,blankval);
        end;
      end;              
    end;
  end;
  return;
end;

procedure DoesPrTrHaveSub(Integer typ,Date fr,Date to,string afr,string ato)
begin
  record TBIVVc TBIr;
  record VIVc VIr;
  row VIVc VIrw;
  record TSVc TSr;
  row TSVc TSrw;
  record ExpVc Expr;
  row ExpVc Exprw;
  record SHVc SHr;
  row SHVc SHrw;
  record SDVc SDr;
  row SDVc SDrw;
  record RetVc Retr;
  row RetVc Retrw;
  record ActVc Actr;
  row ActVc Actrw;
  record ORVc ORr;
  Integer rwcnt,i;
  Boolean TrHs;
  Boolean testf,testf2;
  Boolean missing;
  string 60 tstr;

  TrHs = true;
  TBIr.TransDate = fr;
  TBIr.PRCode = afr;
  while (LoopKey("TransDate",TBIr,2,TrHs)) begin
    if (TBIr.TransDate>to) then begin TrHs = false; end;
    testf = true;
    if ((nonblank(afr)) and (afr<TBIr.PRCode)) then begin testf = false; end;
    if ((nonblank(ato)) and (ato>TBIr.PRCode)) then begin testf = false; end;
    if (TBIr.oVc<>typ) then begin testf = false; end;
    if (Expr.Invalid!=0)then begin testf = false; end;
    if (TrHs==false) then begin testf = false; end;
    if (testf) then begin
      missing = false;
      if (typ==1) then begin
        tstr = USetStr(1831);
        TSr.SerNr = TBIr.SerNr;
        if (ReadFirstMain(TSr,1,true)) then begin
          rwcnt = MatRowCnt(TSr);
          if (TBIr.Row<rwcnt) then begin
            MatRowGet(TSr,TBIr.Row,TSrw);
            if ((TBIr.PRCode<>TSrw.PRCode) or (TBIr.ArtCode<>TSrw.ArtCode) or (TSrw.ovst==1)) then begin
              missing = true;
            end;
          end else begin
            missing = true;
          end;
        end else begin
          missing = true;
        end;
      end;
      if (typ==2) then begin
        tstr = USetStr(1752);
        VIr.SerNr = TBIr.SerNr;
        if (ReadFirstMain(VIr,1,true)) then begin
          rwcnt = MatRowCnt(VIr);
          if (TBIr.Row<rwcnt) then begin
            MatRowGet(VIr,TBIr.Row,VIrw);
            if ((TBIr.PRCode<>VIrw.PRCode) or (TBIr.ArtCode<>VIrw.Item)) then begin
              missing = true;
            end;
          end else begin
            missing = true;
          end;
        end else begin
          missing = true;
        end;
      end;
      if (typ==3) then begin
        tstr = USetStr(1847);
        Expr.SerNr = TBIr.SerNr;
        if (ReadFirstMain(Expr,1,true)) then begin
          rwcnt = MatRowCnt(Expr);
          if (TBIr.Row<rwcnt) then begin
            MatRowGet(Expr,TBIr.Row,Exprw);
            if ((TBIr.PRCode<>Exprw.PRCode) or (TBIr.ArtCode<>Exprw.Item)) then begin
              missing = true;
            end;
          end else begin
            missing = true;
          end;
        end else begin
          missing = true;
        end;
      end;
      if (typ==4) then begin
        tstr = USetStr(1817);
        SHr.SerNr = TBIr.SerNr;
        if (ReadFirstMain(SHr,1,true)) then begin
          rwcnt = MatRowCnt(SHr);
          if ((TBIr.Row<rwcnt) and (TBIr.PRCode==SHr.PRCode)) then begin
            MatRowGet(SHr,TBIr.Row,SHrw);
            if (TBIr.ArtCode<>SHrw.ArtCode) then begin
              missing = true;
            end;
          end else begin
            missing = true;
          end;
        end else begin
          missing = true;
        end;
      end;
      if (typ==5) then begin
        tstr = USetStr(1845);
        Actr.SerNr = TBIr.SerNr;
        if (ReadFirstMain(Actr,1,true)) then begin
          if ((TBIr.PRCode<>Actr.PRCode) or (TBIr.ArtCode<>Actr.ItemCode)) then begin
            missing = true;
          end;
        end else begin
          missing = true;
        end;
      end;
      if (typ==6) then begin
        tstr = USetStr(2057);
        Retr.SerNr = TBIr.SerNr;
        if (ReadFirstMain(Retr,1,true)) then begin
          ORr.SerNr = Retr.OrdNr;
          if (ReadFirstMain(ORr,1,true)) then begin end;
          rwcnt = MatRowCnt(Retr);
          if ((TBIr.Row<rwcnt) and (TBIr.PRCode==ORr.PRCode)) then begin
            MatRowGet(Retr,TBIr.Row,Retrw);
            if (TBIr.ArtCode<>Retrw.ArtCode) then begin
              missing = true;
            end;
          end else begin
            missing = true;
          end;
        end else begin
          missing = true;
        end;
      end;
      if (typ==7) then begin
        tstr = USetStr(1837);
        SDr.SerNr = TBIr.SerNr;
        if (ReadFirstMain(SDr,1,true)) then begin
          rwcnt = MatRowCnt(SDr);
          if (TBIr.Row<rwcnt) then begin
            testf2 = true;
            if (TBIr.PRCode!=SDr.PRCode) begin testf2 = false; end;
            if (testf2==false) then begin
              testf2 = true;
              MatRowGet(SDr,TBIr.Row,SDrw);
              if (TBIr.PRCode!=SDrw.PRCodeRow) begin testf2 = false; end;
            end;
            if (testf2) then begin
              MatRowGet(SDr,TBIr.Row,SDrw);
              if (TBIr.ArtCode<>SDrw.ArtCode) then begin
                missing = true;
              end;
            end else begin
              missing = true;
            end;
          end else begin
            missing = true;
          end;
        end else begin
          missing = true;
        end;
      end;
      if (missing) then begin
        PrintMissingTBI(tstr,TBIr.SerNr,TBIr.PRCode,TBIr.ArtCode,TBIr.TransDate,TBIr.Sum);
      end;      
    end;
  end;
  return;
end;

updating
procedure SubHavePrTr(Boolean repf,record RcVc RepSpec)
begin
  string 20 afr;
  string 20 ato;

  afr = FirstInRange(RepSpec.f1,20);
  ato = LastInRange(RepSpec.f1,20);
  if (RepSpec.flags[1]==1) then begin
    DoesTSHavePrTr(repf,RepSpec.sStartDate,RepSpec.sEndDate,afr,ato)
  end;
  if (RepSpec.flags[2]==1) then begin
    DoesVIHavePrTr(repf,RepSpec.sStartDate,RepSpec.sEndDate,afr,ato)
  end;
  if (RepSpec.flags[3]==1) then begin
    DoesExpHavePrTr(repf,RepSpec.sStartDate,RepSpec.sEndDate,afr,ato)
  end;
  if (RepSpec.flags[4]==1) then begin
    DoesDelHavePrTr(repf,RepSpec.sStartDate,RepSpec.sEndDate,afr,ato)
  end;
  if (RepSpec.flags[5]==1) then begin
    DoesActHavePrTr(repf,RepSpec.sStartDate,RepSpec.sEndDate,afr,ato)
  end;
  if (RepSpec.flags[6]==1) then begin
    DoesRetHavePrTr(repf,RepSpec.sStartDate,RepSpec.sEndDate,afr,ato)
  end;
  if (RepSpec.flags[7]==1) then begin
    DoesSDHavePrTr(repf,RepSpec.sStartDate,RepSpec.sEndDate,afr,ato)
  end;
  return;
end;

procedure PrTrHasSub(record RcVc RepSpec)
begin
  string 20 afr;
  string 20 ato;

  afr = FirstInRange(RepSpec.f1,20);
  ato = LastInRange(RepSpec.f1,20);
  if (RepSpec.flags[1]==1) then begin
    DoesPrTrHaveSub(1,RepSpec.sStartDate,RepSpec.sEndDate,afr,ato);
  end;
  if (RepSpec.flags[2]==1) then begin
    DoesPrTrHaveSub(2,RepSpec.sStartDate,RepSpec.sEndDate,afr,ato);
  end;
  if (RepSpec.flags[3]==1) then begin
    DoesPrTrHaveSub(3,RepSpec.sStartDate,RepSpec.sEndDate,afr,ato);
  end;
  if (RepSpec.flags[4]==1) then begin
    DoesPrTrHaveSub(4,RepSpec.sStartDate,RepSpec.sEndDate,afr,ato);
  end;
  if (RepSpec.flags[5]==1) then begin
    DoesPrTrHaveSub(5,RepSpec.sStartDate,RepSpec.sEndDate,afr,ato);
  end;
  if (RepSpec.flags[6]==1) then begin
    DoesPrTrHaveSub(6,RepSpec.sStartDate,RepSpec.sEndDate,afr,ato);
  end;
  if (RepSpec.flags[7]==1) then begin
    DoesPrTrHaveSub(7,RepSpec.sStartDate,RepSpec.sEndDate,afr,ato);
  end;
  return;
end;

global
updating procedure ChPrTransRn(record RcVc RepSpec)
begin
  StartReportJob(USetStr(9900));   
  EndHeader;
  SetRepCol(2,160);
  SetRepCol(3,260);
  SetRepCol(4,360);
  if (RepSpec.flags[10]==1) then begin
    StartFormat(15);
    OutString(0,0,USetStr(9901),false);
    EndFormat;
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(0,0,USetStr(9903),false);
    OutString(2,0,USetStr(9904),false);
    OutString(3,0,USetStr(9905),false);
    OutString(4,0,USetStr(9906),false);
    OutString(1,0,USetStr(9907),true);
    EndFormat;  
    Gray_Divider(0,1);
    SubHavePrTr(true,RepSpec);
    StartFormat(30);
    EndFormat;
  end;
  if (RepSpec.flags[11]==1) then begin
    StartFormat(15);
    OutString(0,0,USetStr(9902),false);
    EndFormat;
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(0,0,USetStr(9903),false);
    OutString(2,0,USetStr(9904),false);
    OutString(3,0,USetStr(9905),false);
    OutString(4,0,USetStr(9906),false);
    OutString(1,0,USetStr(9907),true);
    EndFormat;  
    Gray_Divider(0,1);
    PrTrHasSub(RepSpec);
    Gray_Divider(0,1);
  end;
  EndJob;
  return;
end;

global
updating procedure ChPrTransMn(record RcVc RepSpec)
begin
  SubHavePrTr(false,RepSpec);
  return;
end;
