external procedure AllVATRn_DetailedPrintArrayVI(record RcVc,var Boolean,var array string,var LongInt);
external function string 255 removenextlistitem(var string,string);
external procedure AllVATRn_DetailedPtArrayIV(record RcVc,record SMVc,var Boolean,var array string,var LongInt);
external function Boolean HasMultiCurrency();
external function roundmode GetVATRoundModeRB();
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external procedure AllVATRn_DetailedAddtoArrayVI(record RcVc,record VIVc,record SMVc,Date,val,var val,var val,var val,var Boolean,var array string,var LongInt);
external procedure AllVATRn_OPBookVAT(record RcVc,record SMVc,var val,var val,var val);
external procedure AllVATRn_DetailedAddtoArrayIV(record RcVc,record IVVc,record SMVc,Date,val,var val,var val,var val,var Boolean,var array string,var LongInt);
external procedure AllVATRn_IPBookVAT(record RcVc,record SMVc,var val,var val,var val);
external procedure AllVATRn_PrintVATBase(record RcVc,Integer,record SMVc,Integer,Integer,Integer,roundmode);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure GetVATdouble(string,var val,var val,Integer);
external procedure AllVATRn_PrintDeatailedHeader(Integer,Integer,Integer,record RcVc);
external procedure SetupVATBase(var record SMVc,var Integer);
external function val FindVAT(string,val,Integer,Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);

function string 255 ArgDateToString(date d)
begin
  ArgDateToString = DateToString(d,"YYYYMMDD");
  return;
end;

function date ArgStringToDate(string datestr)
begin
  Date res;
  
  if (len(datestr)==8) then begin
    res.year = StringToInt(left(datestr,4));
    res.month = StringToInt(mid(datestr,4,2));
    res.day = StringToInt(mid(datestr,6,2));
  end;
  
  ArgStringToDate = res;
  return;
end;

global
procedure AllVATRn_OverviewAddToVATIV(record VATIVVc VATIVr,record SMVc VATr,Integer sign,val paidcoef)
begin
  Integer i,rwcnt;
  Integer j,SMrwcnt;
  row VATIVVc VATIVrw;
  Boolean vatfound;
  row SMVc VATrw;
  val nettfrominv

  rwcnt = MatRowCnt(VATIVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATIVr,i,VATIVrw);
    if (VATIVrw.stp == 1) then begin
      nettfrominv  =  mulratetobase1(VATIVr.CurncyCode,VATIVrw.Sum,VATIVr.FrRate,VATIVr.ToRateB1,VATIVr.ToRateB2,VATIVr.BaseRate1,VATIVr.BaseRate2,DefaultCurRoundOff)*sign;
      nettfrominv = nettfrominv*paidcoef;
      vatfound = false;
      SMrwcnt = MatRowCnt(VATr);
      for (j=0;j<SMrwcnt;j=j+1) begin
        MatRowGet(VATr,j,VATrw);
        if (VATrw.VATCode==VATIVrw.VATCode) then begin
          //Add your values
          VATrw.DebVal =  VATrw.DebVal + nettfrominv;
          VATrw.CredVal =  VATrw.CredVal + FindVAT(VATIVrw.VATCode,nettfrominv,VATIVr.InclVAT,VATIVr.NoTAXonVAT);
          MatRowPut(VATr,j,VATrw);
          vatfound = true;
        end;
      end;
      if (vatfound==false) then begin
        VATrw.VATCode = VATIVrw.VATCode;
        VATrw.DebVal =   nettfrominv;
        VATrw.CredVal = FindVAT(VATIVrw.VATCode,nettfrominv,VATIVr.InclVAT,VATIVr.NoTAXonVAT);
        MatRowPut(VATr,SMrwcnt,VATrw);
      end;
    end;
  end;
  return;
end;

global
procedure AllAVATRn_OverviewPrintVATIV_NotTotals(record VATIVVc VATIVr,Date td,string invt,Integer sign,var val tt,var val tBase,var val tvat,
                                    record SMVc VATr,val paidcoef)
begin
  Integer p1,p2,p3,p4,p5,p6,p7,p8,p9;
  val tv,tmp,VATTemp;

  p1= 55;
  p2= 70;
  p3= 124;
  p4= 165;
  p5= 285;
  p6= 345;
  p7= 415;
  p8= 455;
  p9 =480;
 StartFormat(15);
  OutDate(p1,0,td,true);
  OutLongInt(p2,"DblVATIVVc",VATIVr.SerNr,false);
  OutString(p3,0,invt,false);
  OutString(p4,0,VATIVr.CustCode,false);
  if (VATIVr.InclVAT>0) then begin
    tv = VATIVr.Sum1 - VATIVr.Sum3;
  end else begin
    tv = VATIVr.Sum1;
  end;
  tmp = mulratetobase1(VATIVr.CurncyCode,tv,VATIVr.FrRate,VATIVr.ToRateB1,VATIVr.ToRateB2,VATIVr.BaseRate1,VATIVr.BaseRate2,DefaultCurRoundOff) * sign;
  tmp = tmp *paidcoef;  
  OutVal(p5,0,tmp,M4Val,true);//nett
  tmp = mulratetobase1(VATIVr.CurncyCode,VATIVr.Sum3,VATIVr.FrRate,VATIVr.ToRateB1,VATIVr.ToRateB2,VATIVr.BaseRate1,VATIVr.BaseRate2,DefaultCurRoundOff)*sign;
  tmp = tmp *paidcoef;  
  OutVal(p6,0,tmp,M4Val,true);//vat
  tmp = mulratetobase1(VATIVr.CurncyCode,VATIVr.Sum4,VATIVr.FrRate,VATIVr.ToRateB1,VATIVr.ToRateB2,VATIVr.BaseRate1,VATIVr.BaseRate2,DefaultCurRoundOff)*sign;
  tmp = tmp *paidcoef;  
  OutVal(p7,0,tmp,M4Val,true);
  tmp = (mulratetobase1(VATIVr.CurncyCode,VATIVr.Sum4,VATIVr.FrRate,VATIVr.ToRateB1,VATIVr.ToRateB2,VATIVr.BaseRate1,VATIVr.BaseRate2,DefaultCurRoundOff)*sign);
  tmp = tmp *paidcoef;  
  tt = tt + tmp;
//        tBase = tBase + (mulratetobase1(VATIVr.CurncyCode,VATIVr.Sum1,VATIVr.FrRate,VATIVr.ToRateB1,VATIVr.ToRateB2,VATIVr.BaseRate1,VATIVr.BaseRate2,DefaultCurRoundOff)*sign);
  tmp = (mulratetobase1(VATIVr.CurncyCode,tv,VATIVr.FrRate,VATIVr.ToRateB1,VATIVr.ToRateB2,VATIVr.BaseRate1,VATIVr.BaseRate2,DefaultCurRoundOff)*sign);
  tmp = tmp *paidcoef;  
  tBase = tBase + tmp;
  if (VATIVr.InclVAT>0) then begin
    VATTemp = (VATIVr.Sum3*paidcoef*sign*100)/((VATIVr.Sum1*paidcoef - VATIVr.Sum3*paidcoef)*sign);
  end else begin
//          VATTemp = (mulratetobase1(VATIVr.CurncyCode,VATIVr.Sum3,VATIVr.FrRate,VATIVr.ToRateB1,VATIVr.ToRateB2,VATIVr.BaseRate1,VATIVr.BaseRate2,DefaultCurRoundOff)*sign*100)/(mulratetobase1(VATIVr.CurncyCode,VATIVr.Sum1,VATIVr.FrRate,VATIVr.ToRateB1,VATIVr.ToRateB2,VATIVr.BaseRate1,VATIVr.BaseRate2,DefaultCurRoundOff)*sign);
    VATTemp = (VATIVr.Sum3*paidcoef*sign*100)/(VATIVr.Sum1*paidcoef*sign);
  end;
  OutVal(p8,0,VATTemp,M4Val,true);
  if (HasMultiCurrency) then begin
    OutString(p9,0,VATIVr.CurncyCode,true);
  end;
  EndFormat;

  AllVATRn_OverviewAddToVATIV(VATIVr,VATr,sign,paidcoef);
  tmp = (mulratetobase1(VATIVr.CurncyCode,VATIVr.Sum3,VATIVr.FrRate,VATIVr.ToRateB1,VATIVr.ToRateB2,VATIVr.BaseRate1,VATIVr.BaseRate2,DefaultCurRoundOff)*sign);
  tmp = tmp *paidcoef;
  tvat = tvat + tmp;
  return;
end;          

global
procedure AllVATRn_PrintVATIV(record RcVc RepSpec,LongInt frnr,LongInt tonr)
begin
  Integer p1,p2,p3,p4,p5,p6,p7,p8,p9;
  Boolean testf,TsHr;
  record AccBlock ARAb;
  val tt,tvat,tBase,eff,VATTemp;
  record SMVc SMr;
  row SMVc SMrw;
  Integer i,SMrwcnt,sign;
  record VATIVVc VATIVr;
  row VATIVVc VATIVrw;
  record TRVc TRr;
  string 255 Invt;

  p1= 55;
  p2= 70;
  p3= 124;
  p4= 165;
  p5= 285;
  p6= 345;
  p7= 415;
  p8= 455;
  p9 =480;
  BlockLoad(ARAb);

  if (RepSpec.flags[13] ==  1) then begin
    StartFormat(15);
    OutString(0,0,USetStr(2430),false);
    OutString(p3,0,"",false);
    OutString(p8,0,USetStr(7346),true);
    EndFormat;
    StartFormat(15);
    if (RepSpec.flags[6] == 0) then begin
      OutString(0,0,USetStr(5202),false);
      OutString(p2,0,USetStr(5201),false);
      OutString(p3,0,USetStr(2358),false);
      OutString(p4,0,USetStr(5203),false);
    end;
    OutString(p5,0,USetStr(7343),true);       //This means excluding VAT
    OutString(p6,0,USetStr(5233),true);
    OutString(p7,0,USetStr(2368),true);
    OutString(p8,0,USetStr(7344),true);
    if (HasMultiCurrency) then begin
      OutString(p9,0,USetStr(7345),true);
    end;
    EndFormat;
    Gray_Divider(0,1);
    if (ARAb.IPBookVAT!=0) then begin
//      AllVATRn_IPBookVAT(RepSpec,SMr,tt,tBase,tvat);
    end else begin
      TsHr = true;
      VATIVr.TransDate = RepSpec.sStartDate;
      while (LoopKey("TransDate",VATIVr,1,TsHr)) begin
        if (VATIVr.TransDate>RepSpec.sEndDate) then begin
          TsHr = false;
        end;
        testf = TsHr;
        if ((RepSpec.flags[7] ==  1) and (VATIVr.Sum3 <> 0))  then begin
          testf = false;
        end;
        if ((RepSpec.flags[7] ==  2) and (VATIVr.Sum3 == 0))  then begin
          testf = false;
        end;
          // Get Data
        i = i + 1;
  //      GetInvType(VATIVr.InvType,invt,sign);
        // Print Data
        if (VATIVr.OKFlag == 0)then begin
          testf = false;
        end;
  //      If (VATIVr.Invalid!=0) then begin
  //        testf = false;
  //      end;
        if (nonblank(RepSpec.f1)) then begin
          if (VATIVr.SerNr<frnr) then begin testf = false; end;
          if (VATIVr.SerNr>tonr) then begin testf = false; end;
        end;
        if (testf) and nonblank(RepSpec.d1) then begin
          testf=false;
          TRr.Number = VATIVr.SerNr;
          TRr.IntYc = VATIVYc;
          if (ReadFirstKey("Number",TRr,2,true)) then begin
            if (TRr.RegDate>=RepSpec.d1) then begin
              testf=true;
            end;
          end;
        end;
        if (testf) then begin
          if (RepSpec.flags[6]==0) then begin
            AllAVATRn_OverviewPrintVATIV_NotTotals(VATIVr,VATIVr.TransDate,invt,sign,tt,tBase,tvat,SMr,1);
          end;
          if (RepSpec.flags[6]==1) then begin
            AllVATRn_OverviewAddToVATIV(VATIVr,SMr,sign,1);
            tt = tt + (mulratetobase1(VATIVr.CurncyCode,VATIVr.Sum4,VATIVr.FrRate,VATIVr.ToRateB1,VATIVr.ToRateB2,VATIVr.BaseRate1,VATIVr.BaseRate2,DefaultCurRoundOff)*sign);
            tBase = tBase + (mulratetobase1(VATIVr.CurncyCode,VATIVr.Sum1,VATIVr.FrRate,VATIVr.ToRateB1,VATIVr.ToRateB2,VATIVr.BaseRate1,VATIVr.BaseRate2,DefaultCurRoundOff)*sign);
  // what is tv         tBase = tBase + (mulratetobase1(VATIVr.CurncyCode,tv,VATIVr.FrRate,VATIVr.ToRateB1,VATIVr.ToRateB2,VATIVr.BaseRate1,VATIVr.BaseRate2,DefaultCurRoundOff)*sign);
            VATTemp = (mulratetobase1(VATIVr.CurncyCode,VATIVr.Sum3,VATIVr.FrRate,VATIVr.ToRateB1,VATIVr.ToRateB2,VATIVr.BaseRate1,VATIVr.BaseRate2,DefaultCurRoundOff)*sign*100)/(mulratetobase1(VATIVr.CurncyCode,VATIVr.Sum1,VATIVr.FrRate,VATIVr.ToRateB1,VATIVr.ToRateB2,VATIVr.BaseRate1,VATIVr.BaseRate2,DefaultCurRoundOff)*sign);          
            tvat = tvat + (mulratetobase1(VATIVr.CurncyCode,VATIVr.Sum3,VATIVr.FrRate,VATIVr.ToRateB1,VATIVr.ToRateB2,VATIVr.BaseRate1,VATIVr.BaseRate2,DefaultCurRoundOff)*sign);
          end;
        end;
      end;
    end;
    // Sales Invoice Footer
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(0,0,USetStr(7348),false);
    OutVal(p5,0,tBase,M4Val,true);
    OutVal(p6,0,tvat,M4Val,true);
    OutVal(p7,0,tt,M4Val,true);
    eff  =  tvat/tBase*100;
    OutVal(p8,0,eff,M4Val,True);
    EndFormat;
    StartFormat(15);
    EndFormat;
    StartFormat(25);
    OutString(0,0,USetStr(7349),false);
    EndFormat;
    StartFormat(15);
    OutString(p1,0,USetStr(7347),true);
    OutString(p3,0,USetStr(7351),true);
    EndFormat;
    StartFormat(15);
    SMrwcnt = MatRowCnt(SMr);
    for (i=0;i<SMrwcnt;i=i+1) begin
      MatRowGet(SMr,i,SMrw);
      OutString(p1,0,SMrw.VATCode,true);
      OutString (p3,0,SMrw.DebVal,true);
      OutString (p6,0,SMrw.CredVal,true);
    end;
    EndFormat;
    StartFormat(25);
    EndFormat;
  end;
  return;
end;

procedure GetPInvType(Integer pnr, var String pit, var Integer psign)
Begin
  psign = 1;
  if (pnr==kInvoiceTypeNormal or pnr==kInvoiceTypeNormalSpecialSales) begin
    pit = USetStr(1152);
  end;
  if (pnr==kInvoiceTypeCash or pnr==kInvoiceTypeCashInvoiceReceiptPRT) begin
    pit = USetStr(2488);
  end;
  if (pnr==kInvoiceTypeCredit or pnr==kInvoiceTypeCreditSpecialSales) begin
   pit = USetStr(2433);
    psign = -1;
  end;
  if (pnr==kInvoiceTypeInterest or pnr==kInvoiceTypeDebit) begin
   pit = USetStr(2547);
  end;
  Return;
end;

global
procedure AllVATRn_AddToArrayVI(record RcVc RepSpec,record VIVc VIr,record SMVc VATr,Date td,val paidcoef,var val tottvat,var val tottBase,var val tottt,var array string aInvoices,var LongInt aInvCnt)
BEGIN
  String 6 invt, pinvt;
  Integer i,j,rwcnt,sign,SM2rwcnt;
  val nett,VATTemp,VATSub,tt,tBase,tvat,eff,nettfrominv,totvat,tmp;
  val tot,nettfrominvInclVat;
  Integer p1,p2,p3,p4,p5,p6,p7,p8,p9,p45;
  row VIVc VIrw;
  Boolean vatfound;
  row SMVc SMrw;
  string 255 tstr,tstr1;
  
  p1= 55;
  p2= 70;
  p3= 124;
  p4= 165;
  p45= 200;
  p5= 285;
  p6= 345;
  p7= 415;
  p8= 455;
  p9 =480;
  GetPInvType(VIr.InvType,pinvt,sign);

  nett  = 0;
  VATTemp = 0;
  VATSub  = 0;
  if  nonblank(VIr.VATVal) then begin   //VAT
    tot = (mulratetobase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign)-(mulratetobase1(VIr.CurncyCode,VIr.VATVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign);
    VATSub = mulratetobase1(VIr.CurncyCode,VIr.VATVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign;
    VATSub = VATSub*paidcoef;
    if ((VIr.ExportFlag==1) or (VIr.ExportFlag==3)) then begin
      nett   =  (mulratetobase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign);
    end else begin
      nett   =  (mulratetobase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign)-(mulratetobase1(VIr.CurncyCode,VIr.VATVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign);
    end;
    nett = nett*paidcoef;
    VATTemp = VATSub*100/nett;     //Eff Rate
  end else begin
    if ((VIr.ExportFlag==1) or (VIr.ExportFlag==3)) then begin
      tot = (mulratetobase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign);
    end else begin
      tot = (mulratetobase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign)-(mulratetobase1(VIr.CurncyCode,VIr.CalcVATVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign);
    end;
    VATSub =   mulratetobase1(VIr.CurncyCode,VIr.CalcVATVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign;
    VATSub = VATSub*paidcoef;
    if ((VIr.ExportFlag==1) or (VIr.ExportFlag==3)) then begin
      nett = (mulratetobase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign);
    end else begin
      nett = (mulratetobase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign)-(mulratetobase1(VIr.CurncyCode,VIr.CalcVATVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign);
    end;
    nett = nett*paidcoef;
    VATTemp = VATSub*100/nett;     //Eff Rate
  end;
  tot = tot*paidcoef;
  tmp = mulratetobase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign;
  tmp = tmp*paidcoef;
  if (RepSpec.flags[6] == 0) then begin
    if (RepSpec.flags[12]==1) then begin 
      tstr = VIr.InvoiceNr;
      tstr1 = removenextlistitem(tstr,"-");
      aInvoices[aInvCnt] = removenextlistitem(tstr,"-") & ":" & VIr.SerNr & ":" & ValToString(paidcoef,M4Val,ThousandSeparator,DecimalSeparator,0) & ":" & ArgDateToString(td) ;
    end else begin
      aInvoices[aInvCnt] = VIr.SerNr & ":" & ValToString(paidcoef,M4Val,ThousandSeparator,DecimalSeparator,0) & ":" & ArgDateToString(td);
    end; 
    aInvCnt = aInvCnt +1;   
  end;
  tt = tt + tmp;
  tottt = tottt + tt;
  tBase = tBase + nett;
  tottBase = tottBase + tBase;
  tvat = tvat + VATSub;
  tottvat = tottvat + tvat;
  eff  =  tvat/tBase*100;
  
  rwcnt = MatRowCnt(VIr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIr,i,VIrw);
    if (VIrw.stp!=1) then begin goto LSKIPVIROW; end;
    nettfrominv  =  mulratetobase1(VIr.CurncyCode,VIrw.Sum,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign;
    nettfrominv = nettfrominv * paidcoef;
    vatfound = false;
    nettfrominvInclVat = 0;
//    if (VIr.InclVAT>0) then begin
//      nettfrominvInclVat = FindVAT(VIrw.VATCode,nettfrominv,VIr.InclVAT,VIr.NoTAXonVAT);
//      nettfrominv = -nettfrominvInclVat;
//    end;      
    SM2rwcnt = MatRowCnt(VATr);
    for (j=0;j<SM2rwcnt;j=j+1) begin
      MatRowGet(VATr,j,SMrw);
      if (SMrw.VATCode==VIrw.VATCode) then begin
      //Add your values
        SMrw.DebVal =  SMrw.DebVal + nettfrominv;
        SMrw.CredVal = SMrw.CredVal + Round(FindVAT(VIrw.VATCode,nettfrominv,0,0),DefaultRoundMode);
        totvat = totvat + Round(FindVAT(VIrw.VATCode,nettfrominv,0,0),GetVATRoundModeRB);
        MatRowPut(VATr,j,SMrw);
        vatfound = true;
      end;
    end;
    if (vatfound==false) then begin
      SMrw.VATCode = VIrw.VATCode;
      SMrw.DebVal =   nettfrominv ;
      SMrw.CredVal =  Round(FindVAT(VIrw.VATCode,nettfrominv,0,0),GetVATRoundModeRB);
      totvat = totvat + Round(FindVAT(VIrw.VATCode,nettfrominv,0,0),GetVATRoundModeRB);
      MatRowPut(VATr,SM2rwcnt,SMrw);
    end;
LSKIPVIROW:;          
    end;
    if (nonblank(VIr.VATVal)) then begin
      if (totvat!=VIr.VATVal) then begin
//weird stuff, compares totol of several invoices with one invoice total

//        SM2rwcnt = MatRowCnt(SM2r);
//        for (j=0;j<SM2rwcnt;j=j+1) begin
//          MatRowGet(SM2r,j,SMrw);
//          if ((SMrw.DebVal!=0) and (SMrw.CredVal!=0)) then begin
//            SMrw.CredVal = SMrw.CredVal + (VIr.VATVal-totvat);
//            MatRowPut(SM2r,j,SMrw);
//            j = SM2rwcnt;
//          end;
//        end;
      end;
    end;
  RETURN;
END;

global
procedure AllVATRn_PrintArrayVI(record RcVc RepSpec,var array string aInvoices,var LongInt aInvCnt)
BEGIN
  String 6 pinvt;
  Integer i,j,rwcnt,sign;
  val nett,VATTemp,VATSub,tt,tBase,tvat,eff,nettfrominv,totvat,tmp;
  val tot,paidcoef;
  Integer p1,p2,p3,p4,p5,p6,p7,p8,p9,p45;
  row VIVc VIrw;
  Boolean vatfound;
  row SMVc SMrw;
  string 255 tstr,tstr1,InvoiceNo;
  record VIVc VIr;
  Date td;
  
  p1= 55;
  p2= 70;
  p3= 124;
  p4= 165;
  p45= 200;
  p5= 285;
  p6= 345;
  p7= 415;
  p8= 455;
  p9 =480;

  for (i=0; i<aInvCnt; i=i+1) begin
    if (RepSpec.flags[12]==1) then begin 
      tstr = aInvoices[i];
      tstr1 = removenextlistitem(tstr,":");
      InvoiceNo = removenextlistitem(tstr,":"); 
      tstr1 =  removenextlistitem(tstr,":");
      paidcoef = StringToVal(tstr1,M4Val);
      tstr1 =  removenextlistitem(tstr,":");
      td = ArgStringToDate(tstr1);        
    end else begin
      tstr = aInvoices[i];
      InvoiceNo = removenextlistitem(tstr,":"); 
      tstr1 =  removenextlistitem(tstr,":");
      paidcoef = StringToVal(tstr1,M4Val);   
      tstr1 =  removenextlistitem(tstr,":");
      td = ArgStringToDate(tstr1);      
    end;
    VIr.SerNr = InvoiceNo;
    if (ReadFirstMain(VIr,1,true)) then begin
      GetPInvType(VIr.InvType,pinvt,sign);
      nett  = 0;
      VATTemp = 0;
      VATSub  = 0;
      if  nonblank(VIr.VATVal) then begin   //VAT
        tot = (mulratetobase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign)-(mulratetobase1(VIr.CurncyCode,VIr.VATVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign);
        VATSub = mulratetobase1(VIr.CurncyCode,VIr.VATVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign;
        VATSub = VATSub*paidcoef;
        if ((VIr.ExportFlag==1) or (VIr.ExportFlag==3)) then begin
          nett   =  (mulratetobase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign);
        end else begin
          nett   =  (mulratetobase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign)-(mulratetobase1(VIr.CurncyCode,VIr.VATVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign);
        end;
        nett = nett*paidcoef;
        VATTemp = VATSub*100/nett;     //Eff Rate
      end else begin
        if ((VIr.ExportFlag==1) or (VIr.ExportFlag==3)) then begin
          tot = (mulratetobase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign);
        end else begin
          tot = (mulratetobase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign)-(mulratetobase1(VIr.CurncyCode,VIr.CalcVATVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign);
        end;
        VATSub =   mulratetobase1(VIr.CurncyCode,VIr.CalcVATVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign;
        VATSub = VATSub*paidcoef;
        if ((VIr.ExportFlag==1) or (VIr.ExportFlag==3)) then begin
          nett = (mulratetobase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign);
        end else begin
          nett = (mulratetobase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign)-(mulratetobase1(VIr.CurncyCode,VIr.CalcVATVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign);
        end;
        nett = nett*paidcoef;
        VATTemp = VATSub*100/nett;     //Eff Rate
      end;
      tot = tot*paidcoef;
      tmp = mulratetobase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign;
      tmp = tmp*paidcoef;
      if (RepSpec.flags[6] == 0) then begin
        StartFormat(15);
        OutDate(p1,0,td,true);
        OutLongInt(p2,"DblVIVc",VIr.SerNr,false);
        OutString(p3,0,pinvt,false);
        OutString(p4,0,VIr.VECode,false);
        if (RepSpec.flags[12]==1) then begin 
          OutStringID(p45,"DblVIVc",VIr.InvoiceNr,false,VIr.SerNr);
        end;       
        OutVal(p5,0,tot,M4Val,true);//nett
        OutVal(p6,0,VATSub,M4Val,true);//vat
        OutVal(p7,0,tmp,M4Val,true);//Total
        OutVal(p8,0,VATTemp,M4Val,true);
        if (HasMultiCurrency) then begin
          OutString(p9,0,VIr.CurncyCode,true);
        end;
        EndFormat;
      end;
    end;
  end;
  RETURN;
END;

global
procedure AllVATRn_PrintVATVI(record RcVc RepSpec,record VATVIVc VATVIr,record SMVc VATr,Date td,val paidcoef,var val tottvat,var val tottBase,var val tottt)
begin
  String 6 invt, pinvt;
  Integer i,j,rwcnt,sign,SM2rwcnt;
  val nett,VATTemp,VATSub,tt,tBase,tvat,eff,nettfrominv,totvat,tmp;
  val tot;
  Integer p1,p2,p3,p4,p5,p6,p7,p8,p9;
  row VATVIVc VATVIrw;
  Boolean vatfound;
  row SMVc SMrw;
  
  p1= 55;
  p2= 70;
  p3= 124;
  p4= 165;
  p5= 285;
  p6= 345;
  p7= 415;
  p8= 455;
  p9 =480;
//  GetPInvType(VIr.InvType,pinvt,sign);
    nett  = 0;
    VATTemp = 0;
    VATSub  = 0;
    if  nonblank(VATVIr.VATVal) then begin   //VAT
      tot = (mulratetobase1(VATVIr.CurncyCode,VATVIr.PayVal,VATVIr.FrRate,VATVIr.ToRateB1,VATVIr.ToRateB2,VATVIr.BaseRate1,VATVIr.BaseRate2,DefaultCurRoundOff)*sign)-(mulratetobase1(VATVIr.CurncyCode,VATVIr.VATVal,VATVIr.FrRate,VATVIr.ToRateB1,VATVIr.ToRateB2,VATVIr.BaseRate1,VATVIr.BaseRate2,DefaultCurRoundOff)*sign);
      VATSub = mulratetobase1(VATVIr.CurncyCode,VATVIr.VATVal,VATVIr.FrRate,VATVIr.ToRateB1,VATVIr.ToRateB2,VATVIr.BaseRate1,VATVIr.BaseRate2,DefaultCurRoundOff)*sign;
      VATSub = VATSub*paidcoef;
      if ((VATVIr.ExportFlag==1) or (VATVIr.ExportFlag==3)) then begin
        nett   =  (mulratetobase1(VATVIr.CurncyCode,VATVIr.PayVal,VATVIr.FrRate,VATVIr.ToRateB1,VATVIr.ToRateB2,VATVIr.BaseRate1,VATVIr.BaseRate2,DefaultCurRoundOff)*sign);
      end else begin
        nett   =  (mulratetobase1(VATVIr.CurncyCode,VATVIr.PayVal,VATVIr.FrRate,VATVIr.ToRateB1,VATVIr.ToRateB2,VATVIr.BaseRate1,VATVIr.BaseRate2,DefaultCurRoundOff)*sign)-(mulratetobase1(VATVIr.CurncyCode,VATVIr.VATVal,VATVIr.FrRate,VATVIr.ToRateB1,VATVIr.ToRateB2,VATVIr.BaseRate1,VATVIr.BaseRate2,DefaultCurRoundOff)*sign);
      end;
      nett = nett*paidcoef;
      VATTemp = VATSub*100/nett;     //Eff Rate
    end else begin
      if ((VATVIr.ExportFlag==1) or (VATVIr.ExportFlag==3)) then begin
        tot = (mulratetobase1(VATVIr.CurncyCode,VATVIr.PayVal,VATVIr.FrRate,VATVIr.ToRateB1,VATVIr.ToRateB2,VATVIr.BaseRate1,VATVIr.BaseRate2,DefaultCurRoundOff)*sign);
      end else begin
        tot = (mulratetobase1(VATVIr.CurncyCode,VATVIr.PayVal,VATVIr.FrRate,VATVIr.ToRateB1,VATVIr.ToRateB2,VATVIr.BaseRate1,VATVIr.BaseRate2,DefaultCurRoundOff)*sign)-(mulratetobase1(VATVIr.CurncyCode,VATVIr.CalcVATVal,VATVIr.FrRate,VATVIr.ToRateB1,VATVIr.ToRateB2,VATVIr.BaseRate1,VATVIr.BaseRate2,DefaultCurRoundOff)*sign);
      end;
      VATSub =   mulratetobase1(VATVIr.CurncyCode,VATVIr.CalcVATVal,VATVIr.FrRate,VATVIr.ToRateB1,VATVIr.ToRateB2,VATVIr.BaseRate1,VATVIr.BaseRate2,DefaultCurRoundOff)*sign;
      VATSub = VATSub*paidcoef;
      if ((VATVIr.ExportFlag==1) or (VATVIr.ExportFlag==3)) then begin
        nett = (mulratetobase1(VATVIr.CurncyCode,VATVIr.PayVal,VATVIr.FrRate,VATVIr.ToRateB1,VATVIr.ToRateB2,VATVIr.BaseRate1,VATVIr.BaseRate2,DefaultCurRoundOff)*sign);
      end else begin
        nett = (mulratetobase1(VATVIr.CurncyCode,VATVIr.PayVal,VATVIr.FrRate,VATVIr.ToRateB1,VATVIr.ToRateB2,VATVIr.BaseRate1,VATVIr.BaseRate2,DefaultCurRoundOff)*sign)-(mulratetobase1(VATVIr.CurncyCode,VATVIr.CalcVATVal,VATVIr.FrRate,VATVIr.ToRateB1,VATVIr.ToRateB2,VATVIr.BaseRate1,VATVIr.BaseRate2,DefaultCurRoundOff)*sign);
      end;
      nett = nett*paidcoef;
      VATTemp = VATSub*100/nett;     //Eff Rate
    end;
    tot = tot*paidcoef;
    tmp = mulratetobase1(VATVIr.CurncyCode,VATVIr.PayVal,VATVIr.FrRate,VATVIr.ToRateB1,VATVIr.ToRateB2,VATVIr.BaseRate1,VATVIr.BaseRate2,DefaultCurRoundOff)*sign;
    tmp = tmp*paidcoef;
    
  if (RepSpec.flags[6] == 0) then begin
    StartFormat(15);
    OutDate(p1,0,td,true);
    OutLongInt(p2,"DblVATVIVc",VATVIr.SerNr,false);
    OutString(p3,0,pinvt,false);
    OutString(p4,0,VATVIr.VECode,false);
    OutVal(p5,0,tot,M4Val,true);//nett
    OutVal(p6,0,VATSub,M4Val,true);//vat
    OutVal(p7,0,tmp,M4Val,true);//Total
    OutVal(p8,0,VATTemp,M4Val,true);
    if (HasMultiCurrency) then begin
      OutString(p9,0,VATVIr.CurncyCode,true);
    end;
    EndFormat;
  end;
    tt = tt + tmp;
    tottt = tottt + tt;
    tBase = tBase + nett;
    tottBase = tottBase + tBase;

    tvat = tvat + VATSub;
    tottvat = tottvat + tvat;
    eff  =  tvat/tBase*100;

    rwcnt = MatRowCnt(VATVIr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(VATVIr,i,VATVIrw);
      if (VATVIrw.stp!=1) then begin goto LSKIPVATVIROW; end;
      nettfrominv  =  mulratetobase1(VATVIr.CurncyCode,VATVIrw.Sum,VATVIr.FrRate,VATVIr.ToRateB1,VATVIr.ToRateB2,VATVIr.BaseRate1,VATVIr.BaseRate2,DefaultCurRoundOff)*sign;
      nettfrominv = nettfrominv * paidcoef;
      vatfound = false;
      SM2rwcnt = MatRowCnt(VATr);
      for (j=0;j<SM2rwcnt;j=j+1) begin
        MatRowGet(VATr,j,SMrw);
        if (SMrw.VATCode==VATVIrw.VATCode) then begin
        //Add your values
          SMrw.DebVal =  SMrw.DebVal + nettfrominv;
          SMrw.CredVal = SMrw.CredVal + Round(FindVAT(VATVIrw.VATCode,nettfrominv,0,0),GetVATRoundModeRB);
          totvat = totvat + Round(FindVAT(VATVIrw.VATCode,nettfrominv,0,0),GetVATRoundModeRB);
          MatRowPut(VATr,j,SMrw);
          vatfound = true;
        end;
      end;
      if (vatfound==false) then begin
        SMrw.VATCode = VATVIrw.VATCode;
        SMrw.DebVal =   nettfrominv;
        SMrw.CredVal =  Round(FindVAT(VATVIrw.VATCode,nettfrominv,0,0),GetVATRoundModeRB);
        totvat = totvat + Round(FindVAT(VATVIrw.VATCode,nettfrominv,0,0),GetVATRoundModeRB);
        MatRowPut(VATr,SM2rwcnt,SMrw);
      end;
LSKIPVATVIROW:;          
    end;
    if (nonblank(VATVIr.VATVal)) then begin
      if (totvat!=VATVIr.VATVal) then begin
      end;
    end;
  return;
end;

global
procedure PrintDetailed_POSBalancesVc(record RcVc RepSpec,record SMVc TotVATr,Integer totvatcnt)
begin
  record TRVc TRr;
  row TRVc TRrw;
  Boolean TrHs,testf,printheadf,printtrf,firstrowf;
  Integer i,rwcnt;
  string 20 keystr;
  Integer p1,p2,p3,p4,p5,p6,p7,p8,p9;
  val tv,vat;
  Integer vatcnt,allvatcnt;
  record SMVc VATr;
  record SMVc AllVATr;
  val net,brut;
  val totnet,totvat,totbrut;
  LongInt frnr,tonr;
  val vatprc,tax1;
  
  frnr = FirstInRange(RepSpec.f1,10);
  tonr = LastInRange(RepSpec.f1,10);
  SetupVATBase(AllVATr,allvatcnt);
  p2= 70;
  p3= 124;
  p4= 165;
  p5= 315;
  p6= 375;
  p7= 445;
  p8= 455;
  p9 =480;  
  AllVATRn_PrintDeatailedHeader(7377,0,5238,RepSpec);
  firstrowf = true;
//  printheadf = true;
  TrHs = true;
  TRr.IntYc = RestAccYc;
  TRr.TransDate = RepSpec.sStartDate;
  keystr = "IntYc";
  while (LoopKey(keystr,TRr,2,TrHs)) begin
    if (TRr.IntYc!=RestAccYc) then begin TrHs = false; end;
    if (TRr.TransDate>RepSpec.sEndDate) then begin
      TrHs = false;
    end;
    testf = TrHs;
    if (testf) and nonblank(RepSpec.d1) then begin
      testf = TRr.RegDate>=RepSpec.d1;
    end;
    if (testf) then begin
//      if (printheadf) then begin
//        AllVATRn_PrintDeatailedHeader(7377,0,5238,RepSpec);
//        printheadf = false;
//      end;
      printtrf = true;
      firstrowf = true;
      rwcnt = MatRowCnt(TRr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(TRr,i,TRrw);
        if (TRrw.stp==1) and (TRrw.ovst==0) and (nonblank(TRrw.VATCode)) then begin
          vat = FindVAT(TRrw.VATCode,TRrw.CredVal-TRrw.DebVal,0,0); 
          GetVATdouble(TRrw.VATCode,vatprc,tax1,0);
          if (printtrf) then begin
            StartFormat(15);
            OutDate(0,0,TRr.TransDate,false);
            OutStringID(p2,"DblTRVc",TRr.Number,false,TRr.IntYc);
            OutString(p3,0,TRr.Comment,false); 
            if ((RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel)) then begin
              OutString(0,0,"",false);
            end;
            OutVal(255,0,vatprc,M4Val,true);//vatprc
            OutVal(p5,0,(TRrw.CredVal-TRrw.DebVal),M4Val,true);//nett
            OutVal(p6,0,vat,M4Val,true);//vat
            OutVal(p7,0,(TRrw.CredVal-TRrw.DebVal)+vat,M4Val,true);
            if (HasMultiCurrency) then begin
              OutString(p9,0,TRrw.Curncy,true);
            end;
            EndFormat;
            printtrf = false;
          end;
          if (firstrowf==false) then begin
            StartFormat(15);          
            if ((RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel)) then begin
              OutString(0,0,"",false);
              OutString(0,0,"",false);
              OutString(0,0,"",false);
              OutString(0,0,"",false);
            end;
            OutVal(255,0,vatprc,M4Val,true);//vatprc
            OutVal(p5,0,(TRrw.CredVal-TRrw.DebVal),M4Val,true);//nett
            OutVal(p6,0,vat,M4Val,true);//vat
            OutVal(p7,0,(TRrw.CredVal-TRrw.DebVal)+vat,M4Val,true);
            if (HasMultiCurrency) then begin
              OutString(p9,0,TRrw.Curncy,true);
            end;
            EndFormat;
          end;
          AddVATBase(AllVATr,TRrw.VATCode,(TRrw.CredVal-TRrw.DebVal),blankval,allvatcnt,0,0);
          totnet = totnet + (TRrw.CredVal-TRrw.DebVal);
          totvat = totvat + vat;
          totbrut = totbrut + (TRrw.CredVal-TRrw.DebVal)+vat;
          firstrowf = false;
        end;
      end;
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,"",false);
  if ((RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel)) then begin
    OutString(0,0,"",false);
    OutString(0,0,"",false);
    OutString(0,0,"",false);
    OutString(0,0,"",false);
  end;
  OutVal(p5,0,totnet,M4Val,true);//nett
  OutVal(p6,0,totvat,M4Val,true);//vat
  OutVal(p7,0,totbrut,M4Val,true);
  EndFormat;
  AllVATRn_PrintVATBase(RepSpec,1,AllVATr,allvatcnt,0,0,SetRoundModeD(2));
  return;
end;

function Boolean TestRegAfter(LongInt invnr,Integer intyc,Date d1)
begin
  Boolean res;
  record TRVc TRr;
  
  TRr.Number = invnr;
  TRr.IntYc = intyc;
  if (ReadFirstKey("Number",TRr,2,true)) then begin
    if (TRr.RegDate>=d1) then begin
      res = true;
    end;
  end;
  TestRegAfter = res;
  return;
end;

global
procedure PrintDetailed_IVVc(record RcVc RepSpec,record SMVc TotVATr,Integer totvatcnt)
begin
  record IVVc IVr;
  row IVVc IVrw;
  Boolean TrHs,testf,printheadf;
  Integer i,rwcnt;
  string 20 keystr;
  Integer p1,p2,p3,p4,p5,p6,p7,p8,p9;
  val tv;
  string 255 invt;
  Integer sign,vatcnt,allvatcnt;
  record SMVc VATr;
  record SMVc AllVATr;
  val net,vat,brut;
  val totnet,totvat,totbrut;
  LongInt frnr,tonr;  
  record AccBlock ARAb;
  record ARVc ARr;
  val paidcoef;
  array string 255 aInvoices;
  LongInt aInvCnt;

  BlockLoad(ARAb);
  frnr = FirstInRange(RepSpec.f1,10);
  tonr = LastInRange(RepSpec.f1,10);
  SetupVATBase(AllVATr,allvatcnt);
  p2= 70;
  p3= 124;
  p4= 165;
  p5= 315;
  p6= 375;
  p7= 445;
  p8= 455;
  p9 =480;  
  aInvCnt = 0;
  if (ARAb.IPBookVAT!=0) then begin
    AllVATRn_IPBookVAT(RepSpec,AllVATr,totbrut,totnet,totvat);
  end else begin
    printheadf = true;
    TrHs = true;
    keystr = "TransDate";
    IVr.TransDate = RepSpec.sStartDate;
    while (LoopKey(keystr,IVr,1,TrHs)) begin
      if (IVr.TransDate>RepSpec.sEndDate) then begin
        TrHs = false;
      end;
      testf = TrHs;
      switch (RepSpec.flags[7]) begin
        case 1: if (IVr.Sum3!=0) then begin testf = false; end;
        case 2: if (IVr.Sum3==0) then begin testf = false; end;
      end;
      if (IVr.OKFlag==0)then begin
        testf = false;
      end;
      If (IVr.Invalid!=0) then begin
        testf = false;
      end;
      if (nonblank(RepSpec.f1)) then begin
        if (IVr.SerNr<frnr) then begin testf = false; end;
        if (IVr.SerNr>tonr) then begin testf = false; end;
      end;
      if (testf) and nonblank(RepSpec.d1) then begin
        testf = TestRegAfter(IVr.SerNr,201,RepSpec.d1);
      end;
      if (testf)  then begin
        if (nonblank(RepSpec.f2)) then begin
          testf = false;
          rwcnt = MatRowCnt(IVr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVr,i,IVrw);
            if (SetInSet(IVrw.VATCode,RepSpec.f2)) then begin
              testf = true;
              i = rwcnt;
            end;
          end;
        end;
      end;
      if (nonblank(RepSpec.Language)) then begin
        if (RepSpec.Language!=IVr.LangCode) then begin
          testf = false;
        end;
      end;         
      switch (IVr.InvType) begin
        case kInvoiceTypeCash: if (RepSpec.flags[20]!=0) then begin testf = false; end;
        case kInvoiceTypeCredit: if (RepSpec.flags[21]!=0) then begin testf = false; end;
      end;
      if (testf) then begin
        AllVATRn_DetailedAddtoArrayIV(RepSpec,IVr,AllVATr,IVr.TransDate,1,totnet,totvat,totbrut,printheadf,aInvoices,aInvCnt);
      end;
    end;
    if (RepSpec.flags[12]==1) then begin 
      SortStringArray(aInvoices);
    end;      
    AllVATRn_DetailedPtArrayIV(RepSpec,AllVATr,printheadf,aInvoices,aInvCnt);    
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(7348),false);
  if ((RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel)) then begin
    OutString(0,0,"",false);
    OutString(0,0,"",false);
    OutString(0,0,"",false);
    OutString(0,0,"",false);
  end;
  OutVal(p5,0,totnet,M4Val,true);//nett
  OutVal(p6,0,totvat,M4Val,true);//vat
  OutVal(p7,0,totbrut,M4Val,true);
  EndFormat;
  AllVATRn_PrintVATBase(RepSpec,1,AllVATr,allvatcnt,0,0,SetRoundModeD(2));
  return;
end;

global
procedure PrintDetailed_VIVc(record RcVc RepSpec,record SMVc TotVATr,Integer totvatcnt)
begin
  record VIVc VIr;
  row VIVc VIrw;
  Boolean TrHs,testf,printheadf;
  Integer i,rwcnt;
  string 20 keystr;
  Integer p5,p6,p7;
  val tv,vivat;
  string 255 invt;
  Integer sign,vatcnt,allvatcnt;
  record SMVc AllVATr;
  val net,vat,brut;
  val totnet,totvat,totbrut;
  val tvivat,t1;
  LongInt frnr,tonr;
  record APAccBlock APAb;
  array string 255 aInvoices;
  LongInt aInvCnt;
  
  BlockLoad(APAb);
  frnr = FirstInRange(RepSpec.f1,10);
  tonr = LastInRange(RepSpec.f1,10);
  SetupVATBase(AllVATr,allvatcnt);
  p5= 315;
  p6= 375;
  p7= 445;
  aInvCnt = 0;
  if (APAb.OPBookVAT!=0) then begin
    AllVATRn_OPBookVAT(RepSpec,AllVATr,totbrut,totnet,totvat);
  end else begin
    printheadf = true;
    TrHs = true;
    keystr = "TransDate";
    VIr.TransDate = RepSpec.sStartDate;
    while (LoopKey(keystr,VIr,1,TrHs)) begin
      if (VIr.TransDate>RepSpec.sEndDate) then begin
        TrHs = false;
      end;
      vivat = VIr.VATVal;
      if (blank(vivat)) then begin
        vivat = VIr.CalcVATVal;      
      end;
      testf = TrHs;
      switch (RepSpec.flags[7]) begin
        case 1: if (vivat!=0) then begin testf = false; end;
        case 2: if (vivat==0) then begin testf = false; end;
      end;
      if (VIr.OKFlag==0)then begin
        testf = false;
      end;
      If (VIr.Invalid!=0) then begin
        testf = false;
      end;
      if (nonblank(RepSpec.f1)) then begin
        if (VIr.SerNr<frnr) then begin testf = false; end;
        if (VIr.SerNr>tonr) then begin testf = false; end;
      end;
      if (testf) and nonblank(RepSpec.d1) then begin
        testf = TestRegAfter(VIr.SerNr,203,RepSpec.d1);
      end;
      switch (VIr.InvType) begin
        case kInvoiceTypeCash: if (RepSpec.flags[20]!=0) then begin testf = false; end;
        case kInvoiceTypeCredit: if (RepSpec.flags[21]!=0) then begin testf = false; end;
      end;
      if (testf)  then begin
        if (nonblank(RepSpec.f2)) then begin
          testf = false;
          rwcnt = MatRowCnt(VIr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(VIr,i,VIrw);
            if (SetInSet(VIrw.VATCode,RepSpec.f2)) then begin
              testf = true;
              i = rwcnt;
            end;
          end;
        end;
      end;
      if (testf) then begin
        AllVATRn_DetailedAddtoArrayVI(RepSpec,VIr,AllVATr,VIr.TransDate,1,totnet,totvat,totbrut,printheadf,aInvoices,aInvCnt);
      end;
    end;
    if (RepSpec.flags[12]==1) then begin 
      SortStringArray(aInvoices);
    end;  
    AllVATRn_DetailedPrintArrayVI(RepSpec,printheadf,aInvoices,aInvCnt);
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(7352),false);
  if ((RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel)) then begin
    OutString(0,0,"",false);
    OutString(0,0,"",false);
    OutString(0,0,"",false);
    OutString(0,0,"",false);
  end;
  OutVal(p5,0,totnet,M4Val,true);//nett
  OutVal(p6,0,totvat,M4Val,true);//vat
  OutVal(p7,0,totbrut,M4Val,true);
  EndFormat;
  AllVATRn_PrintVATBase(RepSpec,1,AllVATr,allvatcnt,0,0,SetRoundModeD(2));
  return;
end;

global
procedure PrintDetailed_VATVIVc(record RcVc RepSpec,record SMVc TotVATr,Integer totvatcnt)
begin
  record VATVIVc VATVIr;
  row VATVIVc VATVIrw;
  Boolean TrHs,testf,printheadf;
  Integer i,rwcnt;
  string 20 keystr;
  Integer p5,p6,p7;
  val tv,vivat;
  string 255 invt;
  Integer sign,vatcnt,allvatcnt;
  record SMVc AllVATr;
  val net,vat,brut;
  val totnet,totvat,totbrut;
  val tvivat,t1;
  LongInt frnr,tonr;
  record APAccBlock APAb;
  array string 255 aInvoices;
  LongInt aInvCnt;
  
  BlockLoad(APAb);
  frnr = FirstInRange(RepSpec.f1,10);
  tonr = LastInRange(RepSpec.f1,10);
  SetupVATBase(AllVATr,allvatcnt);
  p5= 315;
  p6= 375;
  p7= 445;
  aInvCnt = 0;
  if (APAb.OPBookVAT!=0) then begin
    AllVATRn_OPBookVAT(RepSpec,AllVATr,totbrut,totnet,totvat);
  end else begin
    printheadf = true;
    TrHs = true;
    keystr = "TransDate";
    VATVIr.TransDate = RepSpec.sStartDate;
    while (LoopKey(keystr,VATVIr,1,TrHs)) begin
      if (VATVIr.TransDate>RepSpec.sEndDate) then begin
        TrHs = false;
      end;
      testf = TrHs;
      if (nonblank(RepSpec.f1)) then begin
        if (VATVIr.SerNr<frnr) then begin testf = false; end;
        if (VATVIr.SerNr>tonr) then begin testf = false; end;
      end;
      vivat = VATVIr.VATVal;
      if (blank(vivat)) then begin
        vivat = VATVIr.CalcVATVal;      
      end;
      switch (RepSpec.flags[7]) begin
        case 1: if (vivat!=0) then begin testf = false; end;
        case 2: if (vivat==0) then begin testf = false; end;
      end;
      if (VATVIr.OKFlag==0)then begin
        testf = false;
      end;
      If (VATVIr.Invalid!=0) then begin
        testf = false;
      end;
      if (testf) and nonblank(RepSpec.d1) then begin
        testf = TestRegAfter(VATVIr.SerNr,203,RepSpec.d1);
      end;
      if (testf)  then begin
        if (nonblank(RepSpec.f2)) then begin
          testf = false;
          rwcnt = MatRowCnt(VATVIr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(VATVIr,i,VATVIrw);
            if (SetInSet(VATVIrw.VATCode,RepSpec.f2)) then begin
              testf = true;
              i = rwcnt;
            end;
          end;
        end;
      end;
      if (testf) then begin
//        AllVATRn_DetailedAddtoArrayVI(RepSpec,VIr,AllVATr,VIr.TransDate,1,totnet,totvat,totbrut,printheadf,aInvoices,aInvCnt);
      end;
    end;
    if (RepSpec.flags[12]==1) then begin 
      SortStringArray(aInvoices);
    end;  
//    AllVATRn_DetailedPrintArrayVI(RepSpec,printheadf,aInvoices,aInvCnt);
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(7352),false);
  if ((RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel)) then begin
    OutString(0,0,"",false);
    OutString(0,0,"",false);
    OutString(0,0,"",false);
    OutString(0,0,"",false);
  end;
  OutVal(p5,0,totnet,M4Val,true);//nett
  OutVal(p6,0,totvat,M4Val,true);//vat
  OutVal(p7,0,totbrut,M4Val,true);
  EndFormat;
  AllVATRn_PrintVATBase(RepSpec,1,AllVATr,allvatcnt,0,0,SetRoundModeD(2));
  return;
end;