external procedure HT2Per(Date, Date , var string);
external procedure HTDepartments(string,string,var string);
external function Boolean HasModSL();
external function Boolean FindCustomerRelation(string,string,var record CUVc);
external procedure ExtractObj(string,var Integer,var string);
external function Boolean WrapAndPrint(Integer,string,Integer);
external procedure ClassTypef(string,string,var boolean);
external procedure HTCustClassType(string,var string);
external function Boolean SetInSet2(string,string);

function Boolean TestClassType(string CType,string custclass)
BEGIN
  Boolean res; 
  string 255 class,testctype;
  Integer pos;
  record CClassVc CClassr;
  
  ExtractObj(custclass,pos,class);
  while (nonblank(class)) begin
    CClassr.Code = class;
    if (ReadFirstMain(CClassr,1,true)) then begin
      if (nonblank(testctype)) then begin
        testctype = testctype & ",";
      end;
      testctype = testctype & CClassr.CType;
    end;
    ExtractObj(custclass,pos,class);
  end; 
  if (SetInSet2(CType,testctype)) then begin
    res = true;
  end;
  TestClassType = res;
  RETURN;
END;

procedure ListDuplicateMails(string customer,string name,string email)
begin
  record CUVc CUr;
  Boolean TrHs;
  Boolean first;
    
  CUr.eMail = email;
  TrHs = true;
  first = true;
  ResetLoop(CUr);
  while LoopKey ("eMail",CUr,1,TrHs) begin
    if ((CUr.eMail==email) and (CUr.Code<>customer)) then begin
      if (first) then begin
        Gray_Divider(0,1);
        StartFormat(15);
        OutString(0,"DblCUVc",customer,false);
        OutString(2,0,name,false);
        OutString(1,0,email,true);
        EndFormat;
        first = false;
        Gray_Divider(2,1);
      end;  
      StartFormat(15);
      OutString(2,"DblCUVc",CUr.Code,false);
      OutString(3,0,CUr.Name,true);
      EndFormat;
    end;
    if (CUr.eMail<>email) then begin
      TrHs = false;
    end;
  end;   
  return;
end;  

Function
Boolean ContExists(string cust)
begin
  record ContactRelVc ContactRelr;
  Boolean res;
  
  res = false;
  ContactRelr.CustCode = cust;
  if (ReadFirstKey("CompKey",ContactRelr,1,true)) then begin
    res = true;
  end;
  ContExists = res;
  return;
end;

global
procedure CustomersAddress(record CUVc CUr)
begin
  string 255 tstr;
  record MailSettingsBlock MBr;

  BlockLoad(MBr);
  StartFormat(15);
  OutString(2,0,CUr.InvAddr0,false);
  tstr = USetStr(2307);
  tstr = tstr & CUr.Phone;
  OutString(3,0,tstr,false);
  EndFormat;
  StartFormat(15);
  OutStringID(2,"DblCUMap",CUr.InvAddr1,false,CUr.Code);
//  if (nonblank(CUr.Fax)) then begin
    tstr = USetStr(2308);
    tstr = tstr & CUr.Fax;
    OutString(3,0,tstr,false);
//  end;
  EndFormat;
  StartFormat(15);
  OutString(2,0,CUr.InvAddr2,false);
  if (nonblank(CUr.Mobile)) then begin
    OutString(3,0,USetStr(7301) & ": " & CUr.Mobile,false);
  end;
  EndFormat;
  if (nonblank(CUr.InvAddr3) or nonblank(CUr.eMail)) then begin
    StartFormat(15);
    OutString(2,0,CUr.InvAddr3,false);
    if (blank(CUr.eMail)) then begin
      OutString(3,0,USetStr(2289),false);
    end else begin
      if (MBr.ExclEmail==0) then begin
        OutString(3,0,CUr.eMail,false);
      end;
    end;
    EndFormat;
  end;
  if (nonblank(CUr.InvAddr4)) then begin
    StartFormat(15);
    OutString(2,0,CUr.InvAddr4,false);
    EndFormat;
  end;
  if (nonblank(CUr.TheirCode)) then begin
    StartFormat(15);
    tstr = USetStr(4031) & CUr.TheirCode;
    OutString(2,0,tstr,false);
    EndFormat;
  end;  
  if (nonblank(CUr.DelAddr0)) then begin
    StartFormat(15);
    OutString(2,0,USetStr(2306),false);
    EndFormat;
    StartFormat(15);
    OutString(2,0,CUr.DelAddr0,false);
    EndFormat;
  end;
  if (nonblank(CUr.DelAddr1)) then begin
    StartFormat(15);
    OutString(2,0,CUr.DelAddr1,false);
    EndFormat;
  end;
  if (nonblank(CUr.DelAddr2)) then begin
    StartFormat(15);
    OutString(2,0,CUr.DelAddr2,false);
    EndFormat;
  end;
  if (nonblank(CUr.DelAddr3)) then begin
    StartFormat(15);
    OutString(2,0,CUr.DelAddr3,false);
    EndFormat;
  end;
  if (nonblank(CUr.DelAddr4)) then begin
    StartFormat(15);
    OutString(2,0,CUr.DelAddr4,false);
    EndFormat;
  end;
  return;
end;

procedure PrintCustCont(record CUVc CUr,Integer detail,record MailSettingsBlock MBr,var LongInt cucnt)
begin
  record ContactRelVc ContactRelr;
  record CUVc ContactCUr;
  Boolean found,testf;
  String 255 tstr;

  ContactRelr.CustCode = CUr.Code;
  found = true;
  while (LoopKey("CompKey",ContactRelr,1,found)) begin
    if (found) then begin
      if (ContactRelr.CustCode!=CUr.Code) then begin
        found = false;
      end;
    end;
    testf = true;
    if (ContactRelr.ContactName==CUr.Person) then begin
      testf = false;
    end;
    if (FindCustomerRelation(ContactRelr.CustCode,ContactRelr.ContactName,ContactCUr)==false) then begin
      testf = false;
    end;
    if (ContactRelr.Invalid!=0) then begin
      testf = false;
    end;
    if (found and testf) then begin
      if ((detail==0) and (ContactCUr.blockedFlag==0)) then begin
        StartFormat(15);
        OutString(20,"DblCUVc",ContactCUr.Code,false);
        OutString(2,0,ContactCUr.Name,false);
        OutString(3,0,ContactRelr.CustName,false);
        EndFormat;
        StartFormat(15);
        OutString(2,0,ContactCUr.InvAddr0,false);
        tstr = USetStr(2307) & ContactCUr.Phone;
        OutString(3,0,tstr,false);
        EndFormat;
        StartFormat(15);
        OutString(2,0,ContactCUr.InvAddr1,false);
        if (nonblank(ContactCUr.Fax)) then begin
          tstr = USetStr(2308) & ContactCUr.Fax;
          OutString(3,0,tstr,false);
        end;
        EndFormat;        
        StartFormat(15);
        OutString(2,0,ContactCUr.InvAddr2,false);
        if (blank(ContactCUr.eMail)) then begin
          OutString(3,0,USetStr(2289),false);
        end else begin
          if (MBr.ExclEmail==0) then begin
            if (nonblank(ContactRelr.ContacteMail)) begin
              OutString(3,0,ContactRelr.ContacteMail,false);
            end else begin
              OutString(3,0,ContactCUr.eMail,false);
            end;
          end;
        end;
        EndFormat;
        if (nonblank(ContactRelr.ContactTitle)) begin
          StartFormat(15);
          OutString(2,0,ContactRelr.ContactTitle,false);
          EndFormat;
        end else begin
          if (nonblank(ContactCUr.Title)) begin
            StartFormat(15);
            OutString(2,0,ContactCUr.Title,false);
            EndFormat;
          end;
        end;
        if (nonblank(ContactRelr.JobTitle)) begin
          StartFormat(15);
          OutString(2,0,ContactRelr.JobTitle,false);
          EndFormat;
        end else begin
          if (nonblank(ContactCUr.JobDesc)) begin
            StartFormat(15);
            OutString(2,0,ContactCUr.JobDesc,false);
            EndFormat;
          end;
        end;
        if (ContactCUr.Department!="") then begin
          StartFormat(15);
          OutString(2,0,ContactCUr.Department,false);
          EndFormat;
        end;
        if (ContactCUr.Comment0!="") then begin
          StartFormat(15);
          OutString(2,0,ContactCUr.Comment0,false);
          OutString(2,0,ContactCUr.Comment1,false);
          OutString(2,0,ContactCUr.Comment2,false);
          EndFormat;
        end;
        Gray_Divider(0,1);
      end;
      if (detail==1) then begin
        StartFormat(15);
        OutString(15,"DblCUVc",ContactCUr.Code,false);
        tstr = CUr.Name & ", " & ContactCUr.Name;
        OutString(2,0,tstr,false);
        OutString(1,0,ContactCUr.Phone,true);
        EndFormat;
      end;
      if (detail==2) then begin
        StartFormat(15);
        OutString(15,"DblCUVc",ContactCUr.Code,false);
        tstr = CUr.Name & ", " & ContactCUr.Name;
        OutString(2,0,tstr,false);
        OutString(1,0,ContactCUr.Fax,true);
        EndFormat;
      end;
      if (detail==3) then begin
        StartFormat(15);
        OutString(15,"DblCUVc",ContactCUr.Code,false);
        tstr = CUr.Name & ", " & ContactCUr.Name;
        OutString(2,0,tstr,false);
        OutString(1,0,ContactCUr.eMail,true);
        EndFormat;
      end;
      cucnt = cucnt + 1;
    end;
  end;
  return;
end;

procedure SortClassificationsArray(Array string aclass,Array LongInt aclasscucnt,LongInt classcnt)
begin
  string 255 clas;
  LongInt clascucnt;
  Boolean changedf;
  LongInt i;
  
  changedf = true;
  while (changedf) begin
    changedf = false;
    for (i=0;i<classcnt-1;i=i+1) begin
      if (aclass[i]>aclass[i+1]) then begin
        changedf = true;
        clascucnt = aclasscucnt[i];
        clas = aclass[i];
        
        aclasscucnt[i] = aclasscucnt[i+1];
        aclass[i] = aclass[i+1];

        aclasscucnt[i+1] = clascucnt;
        aclass[i+1] = clas;

      end;
    end;
  end;
 
  return;
end;

procedure PrintClassificationsTotArray(Array string aclass,Array LongInt aclasscucnt,LongInt classcnt,
                                       Array string anoclasscucode,Array string anoclasscuname,LongInt anoclasscne)
begin
  LongInt i;
  record CClassVc CClassr;
  Boolean testf;

  SortClassificationsArray(aclass,aclasscucnt,classcnt);
  StartFormat(15);  
  EndFormat;
  for (i=0;i<classcnt;i=i+1) begin
    CClassr.Code = aclass[i];
    testf = ReadFirstMain(CClassr,1,true);
    if (aclass[i]=="ﾀﾀﾀﾀﾀ") then begin
      if (anoclasscne>0) then begin
        StartFormat(15);
        EndFormat;
      end;
    end;
    StartFormat(15);
    if (aclass[i]!="ﾀﾀﾀﾀﾀ") then begin
      OutString(0,0,aclass[i],false);
      OutString(70,0,CClassr.Comment,false);
    end else begin
      OutString(70,0,USetStr(7029),false);
    end;
    OutLongInt(400,0,aclasscucnt[i],false);
    EndFormat;
  end;
  for (i=0;i<anoclasscne;i=i+1) begin
    StartFormat(15);
    OutString(0,"DblCUVc",anoclasscucode[i],false);
    OutString(2,0,anoclasscuname[i],false);
    EndFormat;
  end;
  return;
end;

procedure AddClassificationToTotArray(string class,Array string aclass,Array LongInt aclasscucnt,var LongInt classcnt)
begin
  LongInt i;

  for (i=0;i<classcnt;i=i+1) begin
    if (class==aclass[i]) then begin
      aclasscucnt[i] = aclasscucnt[i] + 1;
      goto LAddClassificationToTotArray;
    end;
  end;
  aclass[classcnt] = class;
  aclasscucnt[classcnt] = 1;
  classcnt = classcnt + 1;
LAddClassificationToTotArray:;  
  return;
end;

procedure AddNoClassificationsCUToArray(string Code,string Name,Array string anoclasscucode,Array string anoclasscuname,var LongInt anoclasscne)
begin
  LongInt i;
  
  for (i=0;i<anoclasscne;i=i+1) begin
    if (Code==anoclasscucode[i]) then begin
      goto LAddNoClassificationsCUToArray;
    end;
  end;
  anoclasscucode[anoclasscne] = Code;
  anoclasscuname[anoclasscne] = Name;
  anoclasscne = anoclasscne + 1;
LAddNoClassificationsCUToArray:;  
  return;
end;

procedure AddClassificationsToTotArray(record RcVc RepSpec,string Classifications,Array string aclass,Array LongInt aclasscucnt,var LongInt classcnt)
begin
  Integer pos;
  string 20 class;
  Boolean testf;

  pos = 0;
  ExtractObj(Classifications,pos,class);
  while (nonblank(class)) begin
    testf = true;
    if (nonblank(RepSpec.Stext)) then begin
      if (SetInSet2(RepSpec.Stext,class)==false) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      if (nonblank(RepSpec.f5)) then begin
        testf = false;
        ClassTypef(RepSpec.f5,class,testf);
      end;
    end;
    if (testf) then begin
      AddClassificationToTotArray(class,aclass,aclasscucnt,classcnt);
    end;
    ExtractObj(Classifications,pos,class);
  end;  
  if (blank(Classifications)) then begin
    AddClassificationToTotArray("ﾀﾀﾀﾀﾀ",aclass,aclasscucnt,classcnt);
  end;
  return;
end;

procedure PrintCustomersData(record RcVc RepSpec)
begin
  record MailSettingsBlock MBr;
  record CUVc CUr;
  record CCatVc CCatR;
  Boolean testf,testf2;
  Boolean TrHs;
  Boolean found;
  String 20 fromcust;
  String 20 tocust;
  String 20 lastcat;
  String 20 mykey;
  String 255 tstr;
  string 20 frsortkey,tosortkey;
  LongInt cucnt;
  Integer keys;
  Array string 20 aclass;
  Array LongInt aclasscucnt;
  LongInt classcnt;
  Array string 20 anoclasscucode;
  Array string 255 anoclasscuname;
  LongInt anoclasscne;

  cucnt = 0;
  anoclasscne = 0;
  classcnt = 0;
  fromcust = FirstInRange(RepSpec.f1,20);
  tocust = LastInRange(RepSpec.f1,20);
  frsortkey = FirstInRange(RepSpec.ObjStr,20);
  tosortkey = LastInRange(RepSpec.ObjStr,20);
  lastcat = "";
  BlockLoad(MBr);
  switch (RepSpec.flags[0]) begin
    case 0:
      StartFormat(15);
      OutString(0,0,USetStr(2302),false);
      OutString(2,0,USetStr(2303),false);
      OutString(3,0,USetStr(2304),false);
      EndFormat;
      StartFormat(15);
      OutString(2,0,USetStr(2305),false);
      EndFormat;
    case 1:
      StartFormat(15);
      OutString(0,0,USetStr(2302),false);
      OutString(2,0,USetStr(2311),false);
      OutString(1,0,USetStr(2312),true);
      EndFormat;
    case 2:
      StartFormat(15);
      OutString(0,0,USetStr(2302),false);
      OutString(2,0,USetStr(2311),false);
      OutString(1,0,USetStr(7026),true);
      EndFormat;
    case 3:
      StartFormat(15);
      OutString(0,0,USetStr(2302),false);
      OutString(2,0,USetStr(2311),false);
      OutString(1,0,USetStr(7300),true);
      EndFormat;
  end;
  switch (RepSpec.flags[1]) begin
    case 0:
      if (blank(RepSpec.f3)) then begin
        CUr.Code = fromcust;
        mykey = "Code";
        keys = 1;
      end else begin
        switch (RepSpec.flags[9]) begin
          case 1: 
            CUr.VECat = RepSpec.f3;
            CUr.Code = fromcust;
            mykey = "VECat";
          otherwise
            CUr.CustCat = RepSpec.f3;
            CUr.Code = fromcust;
            mykey = "Group";
        end;
        keys = 2;
      end;
    case 1:
      CUr.Name = fromcust;
      CUr.Code = "";
      mykey = "Name";
      keys = 1;
    case 2:
      switch (RepSpec.flags[9]) begin
        case 1:
          CUr.VECat = RepSpec.f3;
          CUr.Code = fromcust;
          mykey = "VECat";
        otherwise
          CUr.CustCat = RepSpec.f3;
          CUr.Code = fromcust;
          mykey = "Group";
      end;
      keys = 2;
    case 3:
      CUr.Sorting = "";
      CUr.Code = fromcust;
      mykey = "Sorting";
      keys = 2;
    case 4:
      CUr.Department = "";
      CUr.Code = fromcust;
      mykey = "Department";
      keys = 2;
    case 5:
      CUr.Phone = "";
      CUr.Code = fromcust;
      mykey = "Phone";
      keys = 2;
    case 6:
      CUr.CountryCode = "";
      CUr.Code = fromcust;
      mykey = "CountryCode";
      keys = 2;
  end;
  TrHs = true;
  if (RepSpec.flags[8]==0) then begin
    Gray_Divider(0,1);
  end;
  while (LoopKey(mykey,CUr,keys,TrHs)) begin
    if (TrHs) then begin
      if (RepSpec.flags[1]==0) begin
        if (nonblank(RepSpec.f3)) then begin
          switch (RepSpec.flags[9]) begin
            case 1:
              if (CUr.VECat<>RepSpec.f3) then begin
                TrHs = false;
              end;
            otherwise
              if (CUr.CustCat<>RepSpec.f3) then begin
                TrHs = false;
              end;
          end;
        end;
        if (nonblank(tocust)) then begin
          if (CUr.Code>tocust) then begin
            TrHs = false;
          end;
        end;
      end;
      if (RepSpec.flags[1]==1) then begin
      end;
      if (RepSpec.flags[1]==2) begin
        if (nonblank(RepSpec.f3)) then begin
          switch (RepSpec.flags[9]) begin
            case 1:
              if (CUr.VECat<>RepSpec.f3) then begin
                TrHs = false;
              end;
            otherwise
              if (CUr.CustCat<>RepSpec.f3) then begin
                TrHs = false;
              end;
          end;
        end;
      end;
    end;
    if (TrHs) then begin
      testf = true;
      if (nonblankdate(CUr.DateCreated)) then begin
        if (DateInRange(CUr.DateCreated,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
          testf = false;
        end;
      end;
      if (RepSpec.flags[1]==1) then begin
        if (nonblank(tocust)) then begin
          if (CUr.Code>tocust) then begin
            testf = false;
          end;
          if (CUr.Code<fromcust) then begin
            testf = false;
          end;
        end;
      end;
      if ((RepSpec.flags[1]==2) or (RepSpec.flags[1]==3) or (RepSpec.flags[1]==4) or (RepSpec.flags[1]==5) or (RepSpec.flags[1]==6)) then begin
        if (nonblank(fromcust)) then begin
          if (CUr.Code<fromcust) then begin
            testf = false;
          end;
        end;
        if (nonblank(tocust)) then begin
          if (CUr.Code>tocust) then begin
            testf = false;
          end;
        end;
      end;
      if (nonblank(RepSpec.ObjStr)) then begin
        if (CUr.Sorting<frsortkey) then begin
          testf = false;
        end;
        if (CUr.Sorting>tosortkey) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.f4)) then begin
        if (CUr.SearchKey<>RepSpec.f4) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.Language)) then begin
        if (CUr.SalesGroup<>RepSpec.Language) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.f7)) then begin
        if (CUr.Department<>RepSpec.f7) then begin
          testf = false;
        end;
      end;
      switch (RepSpec.flags[9]) begin
        case 0: 
          if (CUr.CUType==0) then begin testf = false; end;
          if ((nonblank(RepSpec.f3)) and (CUr.CustCat<>RepSpec.f3))  then begin testf = false; end;
        case 1: 
          if (CUr.VEType==0) then begin testf = false; end;
          if ((nonblank(RepSpec.f3)) and (CUr.VECat<>RepSpec.f3))  then begin testf = false; end;
        case 2: 
          if (CUr.GuestType==0) then begin testf = false; end;
          if ((nonblank(RepSpec.f3)) and (CUr.CustCat<>RepSpec.f3))  then begin testf = false; end;
        case 3: 
          if (CUr.DealerType==0) then begin testf = false; end;
          if ((nonblank(RepSpec.f3)) and (CUr.CustCat<>RepSpec.f3))  then begin testf = false; end;
        case 4:
          if ((nonblank(RepSpec.f3)) and (CUr.CustCat<>RepSpec.f3))  then begin testf = false; end;
        case 5: 
          if (CUr.EmployeeType==0) then begin testf = false; end;
          if ((nonblank(RepSpec.f3)) and (CUr.CustCat<>RepSpec.f3))  then begin testf = false; end;
      end;
      if ((nonblank(RepSpec.AccStr)) and (SetInSet(RepSpec.AccStr,CUr.Objects)==false))  then begin
        testf = false;
      end;
      if (nonblank(RepSpec.f9) and SetInSet(CUr.CountryCode,RepSpec.f9)==false)  then begin
        testf = false;
      end;
      if (nonblank(RepSpec.TransStr) and CUr.SalesMan!=RepSpec.TransStr)  then begin 
        testf = false;
      end;
      if ((nonblank(RepSpec.FirstAcc)) and (CUr.LangCode<>RepSpec.FirstAcc)) then begin 
        testf = false;
      end;
      if (testf) then begin 
        switch (RepSpec.flags[9]) begin
          case 1: 
            if (CUr.VEType==0) then begin testf = false; end;
            if ((nonblank(RepSpec.LastAcc)) and (CUr.VEPayDeal<>RepSpec.LastAcc))  then begin
              testf = false;
            end;
          case 2: 
            if (CUr.GuestType==0) then begin testf = false; end;
            if ((nonblank(RepSpec.LastAcc)) and (CUr.PayDeal<>RepSpec.LastAcc))  then begin
              testf = false;
            end;
          case 3: 
            if (CUr.DealerType==0) then begin testf = false; end;
            if ((nonblank(RepSpec.LastAcc)) and (CUr.PayDeal<>RepSpec.LastAcc))  then begin
              testf = false;
            end;
          case 4: 
            if (testf) then begin
              if (nonblank(RepSpec.LastAcc))  then begin
                if (CUr.VEPayDeal!=RepSpec.LastAcc) then begin testf = false; end;
                if (CUr.PayDeal!=RepSpec.LastAcc) then begin testf = false; end;
              end;
            end; 
          case 5: 
            if (CUr.EmployeeType==0) then begin testf = false; end;
            if ((nonblank(RepSpec.LastAcc)) and (CUr.PayDeal<>RepSpec.LastAcc))  then begin
              testf = false;
            end;
          otherwise
            if (CUr.CUType==0) then begin testf = false; end;
            if ((nonblank(RepSpec.LastAcc)) and (CUr.PayDeal<>RepSpec.LastAcc))  then begin
              testf = false;
            end;
        end;
      end;
      if ((nonblank(RepSpec.f10)) and (CUr.Comment<>RepSpec.f10))  then begin
        testf = false;
      end;
      if ((nonblankdate(RepSpec.d1)) and (CUr.DateChanged<RepSpec.d1)) then begin
        testf = false;
      end;
      switch (RepSpec.flags[3]) begin
        case 0: if (CUr.blockedFlag!=0) then begin testf = false; end;
        case 1: 
        case 2: if (CUr.blockedFlag==0) then begin testf = false; end;
      end;
      switch (RepSpec.flags[11]) begin
        case 0: if (CUr.OnHoldFlag!=0) then begin testf = false; end;
        case 1: 
        case 2: if (CUr.OnHoldFlag==0) then begin testf = false; end;
      end;
      if (testf) then begin
        if (nonblank(RepSpec.Stext)) then begin
          if (SetInSet2(RepSpec.Stext,CUr.Classification)==false) then begin
            testf = false;
          end;
        end;
      end;
      if (nonblank(RepSpec.f5)) then begin
        if (testf) then begin
          testf = TestClassType(RepSpec.f5,CUr.Classification);
        end;
      end;
      if (nonblank(RepSpec.f6)) then begin
        if (CUr.AccAP!=RepSpec.f6) then begin testf = false; end;
      end;
      if (testf) then begin
        if (nonblank(CUr.Comment)) then begin
          if (InString(CUr.Comment,RepSpec.f8)==0) then begin
            testf = false;
          end;
        end;
      end;
      if (RepSpec.flags[5]!=0) then begin
        if (nonblank(CUr.eMail)) then begin testf = false; end;
      end;
      if (RepSpec.flags[6]!=0) then begin
        if (nonblank(CUr.Fax)) then begin testf = false; end;
      end;
      if (RepSpec.flags[10]!=0) then begin
        if (nonblank(CUr.Mobile)) then begin testf = false; end;
      end;
      if (RepSpec.flags[12]!=0) then begin
        if (blank(CUr.Phone) and blank(CUr.AltPhone) and blank(CUr.Mobile)) then begin testf = false; end;
      end;
      if (testf) then begin
        if (RepSpec.flags[1]==2) then begin
          if (lastcat!=CUr.CustCat) then begin
            Black_Divider(0,1);
            Black_Divider(0,1);
            CCatR.Code = CUr.CustCat;
            found = ReadFirstMain(CCatR,1,true);
            StartFormat(15);
            OutString(0,0,CUr.CustCat,false);
            if (found) then begin
              OutString(2,0,CCatR.Comment,false);
            end;
            EndFormat;
            Black_Divider(0,1);
            Black_Divider(0,1);
          end;
        end;
        if (RepSpec.flags[7]!=0) then begin
          AddClassificationsToTotArray(RepSpec,CUr.Classification,aclass,aclasscucnt,classcnt);
          if (blank(CUr.Classification)) then begin
            AddNoClassificationsCUToArray(CUr.Code,CUr.Name,anoclasscucode,anoclasscuname,anoclasscne);
          end;
        end;
        cucnt = cucnt + 1;
        if (RepSpec.flags[0]==0) then begin
          StartFormat(15);
          OutString(0,"DblCUVc",CUr.Code,false);
          OutString(2,0,CUr.Name,false);
          OutString(3,0,CUr.Person,false);
          EndFormat;
          CustomersAddress(CUr);
          if (nonblank(CUr.CustCat) or nonblank(CUr.SearchKey)) then begin
            if (HasModSL or IsStandardProduct==false) then begin
              StartFormat(15);
            end;
            if (HasModSL) then begin
              tstr = USetStr(2315);
              tstr = tstr & CUr.CustCat;
              OutString(2,0,tstr,false);
            end;
            if (IsStandardProduct==false) then begin
              tstr = USetStr(2316);
              tstr = tstr & CUr.SearchKey;
              OutString(3,0,tstr,false);
            end;
            if (HasModSL or IsStandardProduct==false) then begin
              EndFormat;
            end;
          end;
          if (BuildProductCode!="StandardCRM") or (HasModSL) then begin
            StartFormat(15);
            tstr = USetStr(2309);
            tstr = tstr & CUr.PayDeal;
            OutString(2,0,tstr,false);
            if (nonblank(CUr.Objects)) then begin
              tstr = USetStr(2317);
              tstr = tstr & CUr.Objects;
              OutString(3,0,tstr,false);
            end;
            EndFormat;
          end;
          if (nonblank(CUr.ShipDeal) or nonblank(CUr.ShipMode)) then begin
            StartFormat(15);
            tstr = USetStr(2313);
            tstr = tstr & CUr.ShipDeal;
            OutString(2,0,tstr,false);
            tstr = USetStr(2314);
            tstr = tstr & CUr.ShipMode;
            OutString(3,0,tstr,false);
            EndFormat;
          end;
          if (nonblank(CUr.Sorting)) then begin
            StartFormat(15);
            tstr = USetStr(7118);
            tstr = tstr & ": " & CUr.Sorting;
            OutString(2,0,tstr,false);
            EndFormat;
          end;
          if ((nonblank(CUr.Department)) or (nonblank(CUr.VATNr))) then begin
            StartFormat(15);
            if (IsStandardProduct) then begin
              tstr = USetStr(7229);
              tstr = tstr & ": " & CUr.VATNr;
              OutString(2,0,tstr,false);
            end else begin
              tstr = USetStr(7117);
              tstr = tstr & ": " & CUr.Department;
              OutString(2,0,tstr,false);
              tstr = USetStr(7229);
              tstr = tstr & ": " & CUr.VATNr;
              OutString(3,0,tstr,false);
            end;
            EndFormat;
          end;
          if (nonblank(CUr.Comment)) then begin
            StartFormat(15);
            OutString(2,0,CUr.Comment,false);
            EndFormat;
          end;
          if (nonblank(CUr.WarnText1)) then begin
            StartFormat(15);
            tstr = USetStr(2318);
            tstr = tstr & CUr.WarnText1;
            OutString(2,0,tstr,false);
            EndFormat;
          end;
          if (nonblank(CUr.BankAccount) or nonblank(CUr.AccOperator)) then begin
            StartFormat(15);
            tstr = USetStr(4103);
            tstr = tstr & ": " & CUr.BankAccount;
            OutString(2,0,tstr,false);
            tstr = USetStr(4033);
            tstr = tstr & CUr.AccOperator;
            OutString(3,0,tstr,false);
            EndFormat;
          end;
          if (nonblank(CUr.Classification)) then begin          
            StartFormat(15);
            tstr = USetStr(7112);
            tstr = tstr & ": " & CUr.Classification;
            if (WrapAndPrint(2,tstr,85)) then begin
              EndFormat;
            end;
          end;
          Gray_Divider(0,1);
        end;
        if (RepSpec.flags[0]<>0) then begin
          testf2 = true;
          if (blank(CUr.Person)) then begin
            if (RepSpec.flags[4]<>0) then begin
              if (ContExists(CUr.Code)) then begin
                testf2 = false;
              end;
            end;
          end;
          if (testf2) then begin
            if (RepSpec.flags[8]==0) then begin
              StartFormat(15);
              tstr = "";
              OutString(0,"DblCUVc",CUr.Code,false);
              tstr = CUr.Name & tstr & ", " & CUr.Person;
              OutString(2,0,tstr,false);
              if (RepSpec.flags[0]==1) then begin
                OutString(1,0,CUr.Phone,true);
              end;
              if (RepSpec.flags[0]==2) then begin
                OutString(1,0,CUr.Fax,true);
              end;
              if (RepSpec.flags[0]==3) then begin
                if (blank(CUr.eMail)) then begin
                  OutString(1,0,USetStr(2289),true);
                end else begin
                  if (MBr.ExclEmail==0) then begin
                    OutString(1,0,CUr.eMail,true);
                  end;
                end;
              end;
              EndFormat;
            end else begin
              if nonblank(CUr.eMail) then begin
                ListDuplicateMails(CUr.Code,CUr.Name,CUr.eMail);
              end;   
            end;
          end;
        end;
        if (RepSpec.flags[2]==1) then begin
          PrintCustCont(CUr,RepSpec.flags[0],MBr,cucnt);
        end;
        lastcat = CUr.CustCat;
      end;
    end;
  end;
  StartFormat(10);
  EndFormat;
  if (RepSpec.flags[8]==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(7305),false);
    OutLongInt(100,0,cucnt,false);
    EndFormat;
  end;
  if (RepSpec.flags[7]!=0) then begin
    PrintClassificationsTotArray(aclass,aclasscucnt,classcnt,anoclasscucode,anoclasscuname,anoclasscne);
  end;
  return;
end;
  
global
procedure CustRn(record RcVc RepSpec)
begin
  Integer rw;
  String 255 tstr;
  String 20 fromcust;
  String 20 tocust;

  if (RepSpec.flags[8]==1) then begin
    RepSpec.flags[0] = 3;
  end;
  rw = 1;
  fromcust = FirstInRange(RepSpec.f1,20);
  tocust = LastInRange(RepSpec.f1,20);
  if ((ProgramType==typFirstOffice) or 
      (ProgramType==typFirstOfficeSmall) or 
      (ProgramType==typFirstOfficePro) or 
      IsBooks) then begin
    StartReportJob(USetStr(17850));
  end else begin
    StartReportJob(USetStr(2301));
  end;
  if ((blank(fromcust)) and (blank(tocust))) then begin
    tstr = USetStr(1104);
  end else begin
    tstr = USetStr(1105);
    tstr = tstr & fromcust;
    if (fromcust<>tocust) then begin
      tstr = tstr & " : " & tocust;
    end;
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
  if (RepSpec.flags[0]==0) then begin
    tstr = USetStr(1159);
  end;
  if (RepSpec.flags[0]==1) then begin
    tstr = USetStr(4039);
  end;
  if (RepSpec.flags[0]==2) then begin
    tstr = USetStr(7026);
  end;
  if (RepSpec.flags[0]==3) then begin
    tstr = USetStr(7300);
  end;
  Header(rw,tstr,0);
  tstr = USetStr(19079) & ": ";
  switch (RepSpec.flags[9]) begin
    case 0: tstr = tstr & USetStr(13477);
    case 1: tstr = tstr & USetStr(1213);
    case 2: tstr = tstr & USetStr(12033);
    case 3: tstr = tstr & USetStr(16306);
    case 4: tstr = tstr & USetStr(12727); 
    case 5: tstr = tstr & USetStr(6810);
  end;
  Header(rw,tstr,1);
  rw = rw + 1;     
  if (nonblank(RepSpec.f3)) then begin
    tstr = USetStr(1114);
    tstr = tstr & RepSpec.f3;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (ProgramType<>4) then begin
    if (RepSpec.TransStr<>"") then begin
      tstr = USetStr(1824);
      tstr = tstr & RepSpec.TransStr;
    end else begin
      tstr = USetStr(4918);
    end;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.FirstAcc)) then begin
    tstr = USetStr(2319);
    tstr = tstr & RepSpec.FirstAcc;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f5)) then begin
    HTCustClassType(RepSpec.f5,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end; 
  end;
  if (nonblank(RepSpec.LastAcc)) then begin
    tstr = USetStr(1140);
    tstr = tstr & RepSpec.LastAcc;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.AccStr)) then begin
    HTDepartments(RepSpec.f7,RepSpec.f7,tstr);
    Header(rw,tstr,0);
  end;  
  switch (RepSpec.flags[1]) begin
    case 0:  tstr = USetStr(1187); 
    case 1:  tstr = USetStr(1189); 
    case 2:  tstr = USetStr(1190); 
    case 3:  tstr = USetStr(1349); 
    case 4:  tstr = USetStr(1349); 
    case 5:  tstr = USetStr(1351); 
    case 6:  tstr = USetStr(38550); 
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;  
  SetRepCol(2,80);
  SetRepCol(3,320);
  PrintCustomersData(RepSpec);
  EndJob;
  return;
end;

global
procedure CustforAllCompaniesRn(record RcVc RepSpec)
begin
  Integer rw;
  String 255 tstr;
  String 20 fromcust;
  String 20 tocust;
  record CompaniesBlock CompaniesRec;
  row CompaniesBlock comprw;
  Integer i,rwcnt;
  Integer compnr,curcomp;

  rw = 1;
  fromcust = FirstInRange(RepSpec.f1,20);
  tocust = LastInRange(RepSpec.f1,20);
  StartReportJob(USetStr(2301));
  if ((blank(fromcust)) and (blank(tocust))) then begin
    tstr = USetStr(1104);
  end else begin
    tstr = USetStr(1105);
    tstr = tstr & fromcust;
    if (fromcust<>tocust) then begin
      tstr = tstr & " : " & tocust;
    end;
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
  if (RepSpec.flags[0]==0) then begin
    tstr = USetStr(1159);
  end;
  if (RepSpec.flags[0]==1) then begin
    tstr = USetStr(4039);
  end;
  if (RepSpec.flags[0]==2) then begin
    tstr = USetStr(7026);
  end;
  if (RepSpec.flags[0]==3) then begin
    tstr = USetStr(7300);
  end;
  Header(rw,tstr,0);
  if (nonblank(RepSpec.f3)) then begin
    tstr = USetStr(1114);
    tstr = tstr & RepSpec.f3;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (ProgramType<>4) then begin
    if (nonblank(RepSpec.TransStr)) then begin
      tstr = USetStr(1824);
      tstr = tstr & RepSpec.TransStr;
    end else begin
      tstr = USetStr(4918);
    end;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.FirstAcc)) then begin
    tstr = USetStr(2319);
    tstr = tstr & RepSpec.FirstAcc;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f5)) then begin
    HTCustClassType(RepSpec.f5,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end; 
  end;
  if (nonblank(RepSpec.LastAcc)) then begin
    tstr = USetStr(1140);
    tstr = tstr & RepSpec.LastAcc;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  switch (RepSpec.flags[1]) begin
    case 0:  tstr = USetStr(1187); 
    case 1:  tstr = USetStr(1189); 
    case 2:  tstr = USetStr(1190); 
    case 3:  tstr = USetStr(1349); 
    case 4:  tstr = USetStr(1349); 
    case 5:  tstr = USetStr(1351); 
    case 6:  tstr = USetStr(38550); 
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;  
  SetRepCol(2,80);
  SetRepCol(3,320);
  
  curcomp = CurrentCompany;  
  BlockLoad(CompaniesRec);
  rwcnt = MatRowCnt(CompaniesRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CompaniesRec,i,comprw);
    if (SetCompanyCode(comprw.CompCode,false)) then begin
      StartFormat(15);
       OutString(0,0,comprw.CompName,false);
      EndFormat;      
      PrintCustomersData(RepSpec);
      Black_Divider(0,1);
    end;
    ResetCompany(curcomp);
  end;
  
  EndJob;
  return;
end;
