external procedure HTCourseEvents(string,string,var string);
external procedure HTCusts(string, string, var string);
external procedure HTCourses(string,string,var string);
external procedure HT2Per(Date, Date , var string);
external function Integer InString2(string,string);

procedure AddToCUArray(string CustCode,Array string acu,var Integer acnt)
begin
  Integer i,j;
  
  for (i=0;i<acnt;i=i+1) begin
    if (acu[i]==CustCode) then begin
      goto LAddToCUArray;
    end else begin
      if (acu[i]>CustCode) then begin
        for (j=acnt;j>i;j=j-1) begin
          acu[j] = acu[j-1];
        end;
        acu[i] = CustCode;
        acnt = acnt + 1;
        goto LAddToCUArray;
      end;
    end;
  end;
  acu[acnt] = CustCode;
  acnt = acnt + 1;
LAddToCUArray:;  
  return;
end;

procedure CourseEventIV_Customer(record RcVc RepSpec)
begin
  LongInt frce,toce;
  string 255 frcu,tocu;
  string 255 frco,toco;
  string 255 keystr;
  record CourseEventVc CEr;
  row CourseEventVc CErw;
  Boolean found,testf;
  Integer i,rwcnt;
  Integer ai,acnt,index;
  Array string 255 acu;
  val price;

  frcu = FirstInRange(RepSpec.f1,20);
  tocu = LastInRange(RepSpec.f1,20);
  frce = FirstInRange(RepSpec.f2,20);
  toce = LastInRange(RepSpec.f2,20);
  frco = FirstInRange(RepSpec.f3,20);
  toco = LastInRange(RepSpec.f3,20);

  keystr = "TransDate";
  index = 1;
  if (nonblank(RepSpec.f2)) then begin
    keystr = "SerNr";
    index = 2;
  end;
  found = true;
  CEr.SerNr = frce;
  CEr.TransDate = RepSpec.sStartDate;
  while (LoopKey(keystr,CEr,1,found)) begin
    switch (index) begin
      case 1:
        if (CEr.TransDate>RepSpec.sEndDate) then begin
          found = false;
        end;
      case 2:
        if (nonblank(RepSpec.f2)) then begin
          if (CEr.SerNr>toce) then begin found = false; end;
        end;
    end;
    if (found) then begin
      testf = true;
      switch (index) begin
        case 1:
          if (nonblank(RepSpec.f2)) then begin
            if (CEr.SerNr<frce) then begin testf = false; end;
            if (CEr.SerNr>toce) then begin testf = false; end;
          end;
        case 2:
          if (DateInRange(CEr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
            testf = false;
          end;
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (CEr.CourseCode<frco) then begin testf = false; end;
        if (CEr.CourseCode>toco) then begin testf = false; end;
      end;
      if (CEr.StatusFlag==2) then begin testf = false; end;
      if (testf) then begin
        rwcnt = MatRowCnt(CEr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(CEr,i,CErw);
          testf = true;
          if (CErw.InvoiceNo>0) then begin testf = false; end;
          if (nonblank(RepSpec.f1)) then begin
            if (CErw.CustCode<frcu) then begin testf = false; end;
            if (CErw.CustCode>tocu) then begin testf = false; end;
          end;
          if (testf) then begin
            AddToCUArray(CErw.CustCode,acu,acnt);
          end;
        end;
      end;
    end;
  end;
  for (ai=0;ai<acnt;ai=ai+1) begin
    ResetLoop(CEr);
    keystr = "CustCode:" & acu[ai];

    found = true;
    CEr.TransDate = RepSpec.sStartDate;
    while (LoopKey(keystr,CEr,1,found)) begin
      if (CEr.TransDate>RepSpec.sEndDate) then begin
        found = false;
      end;
      if (found) then begin
        testf = true;
        if (nonblank(RepSpec.f2)) then begin
          if (CEr.SerNr<frce) then begin testf = false; end;
          if (CEr.SerNr>toce) then begin testf = false; end;
        end;
        if (nonblank(RepSpec.f3)) then begin
          if (CEr.CourseCode<frco) then begin testf = false; end;
          if (CEr.CourseCode>toco) then begin testf = false; end;
        end;
        if (CEr.StatusFlag==2) then begin testf = false; end;
        if (testf) then begin
          rwcnt = MatRowCnt(CEr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(CEr,i,CErw);
            testf = true;
            if (CErw.InvoiceNo>0) then begin testf = false; end;
            if (CErw.CustCode!=acu[ai]) then begin testf = false; end;
            if (testf) then begin
              price = CErw.Price;
              if (price==blankval) then begin
                price = CEr.Price;
              end;
              StartFormat(15);
               OutString(0,"DblCUVc",CErw.CustCode,false);
               OutStringID(100,"DblCUVc",CErw.ContactName,false,CErw.ContactCode);
               OutLongInt(200,"DblCourseEventVc",CEr.SerNr,false);
               OutString(300,0,CEr.CourseCode,false);
               OutVal(1,0,price,M4Val,true);
              EndFormat;
            end;            
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure CourseEventIV_CourseEvent(record RcVc RepSpec)
begin
  LongInt frce,toce;
  string 255 frcu,tocu;
  string 255 frco,toco;
  record CourseEventVc CEr;
  row CourseEventVc CErw;
  Boolean found,testf;
  Integer i,rwcnt,index;
  string 255 keystr;
  val price;

  frcu = FirstInRange(RepSpec.f1,20);
  tocu = LastInRange(RepSpec.f1,20);
  frce = FirstInRange(RepSpec.f2,20);
  toce = LastInRange(RepSpec.f2,20);
  frco = FirstInRange(RepSpec.f3,20);
  toco = LastInRange(RepSpec.f3,20);

  keystr = "TransDate";
  index = 1;
  if (nonblank(RepSpec.f2)) then begin
    keystr = "SerNr";
    index = 2;
  end;
  found = true;
  CEr.SerNr = frce;
  CEr.TransDate = RepSpec.sStartDate;
  while (LoopKey(keystr,CEr,2,found)) begin
    switch (index) begin
      case 1:
        if (CEr.TransDate>RepSpec.sEndDate) then begin
          found = false;
        end;
      case 2:
        if (nonblank(RepSpec.f2)) then begin
          if (CEr.SerNr>toce) then begin found = false; end;
        end;
    end;
    if (found) then begin
      testf = true;
      switch (index) begin
        case 1:
          if (nonblank(RepSpec.f2)) then begin
            if (CEr.SerNr<frce) then begin testf = false; end;
            if (CEr.SerNr>toce) then begin testf = false; end;
          end;
        case 2:
          if (DateInRange(CEr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
            testf = false;
          end;
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (CEr.CourseCode<frco) then begin testf = false; end;
        if (CEr.CourseCode>toco) then begin testf = false; end;
      end;
      if (CEr.StatusFlag==2) then begin testf = false; end;
      if (testf) then begin
        rwcnt = MatRowCnt(CEr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(CEr,i,CErw);
          testf = true;
          if (CErw.InvoiceNo>0) then begin testf = false; end;
          if (nonblank(RepSpec.f1)) then begin
            if (CErw.CustCode<frcu) then begin testf = false; end;
            if (CErw.CustCode>tocu) then begin testf = false; end;
          end;
          if (testf) then begin
            price = CErw.Price;
            if (price==blankval) then begin
              price = CEr.Price;
            end;
            StartFormat(15);
             OutLongInt(0,"DblCourseEventVc",CEr.SerNr,false);
             OutString(100,0,CEr.CourseCode,false);
             OutString(200,"DblCUVc",CErw.CustCode,false);
             OutStringID(300,"DblCUVc",CErw.ContactName,false,CErw.ContactCode);
             OutVal(1,0,price,M4Val,true);
            EndFormat;
          end;
        end;
      end;
    end;
  end;

  return;
end;

global
procedure CourseEventIVRn(record RcVc RepSpec)
begin
  string 255 tstr;
  Integer keys,where;
  Integer rw;
  LongInt frce,toce;
  string 255 frcu,tocu;
  string 255 frco,toco;
  
  frcu = FirstInRange(RepSpec.f1,20);
  tocu = LastInRange(RepSpec.f1,20);
  frce = FirstInRange(RepSpec.f2,20);
  toce = LastInRange(RepSpec.f2,20);
  frco = FirstInRange(RepSpec.f3,20);
  toco = LastInRange(RepSpec.f3,20);
  StartReportJob(USetStr(17000));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTCourses(frco,toco,tstr);
  Header(rw,tstr,0);
  HTCusts(frco,toco,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTCourseEvents(frcu,tocu,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;

  switch (RepSpec.flags[0]) begin
    case 0:
      StartFormat(15);
       OutString(0,0,USetStr(17003),false);
       OutString(100,0,USetStr(17004),false);
       OutString(200,0,USetStr(17001),false);
       OutString(300,0,USetStr(17002),false);
       OutString(1,0,USetStr(17005),true);
      EndFormat;
    case 1:
      StartFormat(15);
       OutString(0,0,USetStr(17001),false);
       OutString(100,0,USetStr(17002),false);
       OutString(200,0,USetStr(17003),false);
       OutString(300,0,USetStr(17004),false);
       OutString(1,0,USetStr(17005),true);
      EndFormat;
  end;  
  Gray_Divider(0,1);
  switch (RepSpec.flags[0]) begin
    case 0:
      CourseEventIV_Customer(RepSpec);
    case 1:
      CourseEventIV_CourseEvent(RepSpec);
  end;
  
  EndJob;
  return;
end;
