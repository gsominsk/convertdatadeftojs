external function Boolean SetInSet2(string,string);
external procedure HTItemClass(string,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure HT2Per(Date, Date , var string);
external procedure HTItems(string,var string);
external procedure HTITs(string,string,var string);
external procedure HTSerialNos(string,string,var string);


procedure PrintOveriew(record QualConVc QCr,record INVc INr)
begin
  string 255 dblstr;
  
  StartFormat(15);
  OutString(0,"DblINVc",QCr.ArtCode,false);
  OutString(70,0,Left(INr.Name,20),false);
  OutString(190,0,QCr.SerialNr,false);
  OutDateID(280,"DblQualConVc",QCr.AnalyseDate,false,QCr.SerNr);
  switch (QCr.Vc) begin
    case 0:
    otherwise
      OutString(350,0,USetStr(17110+QCr.Vc),false);
  end;
  switch (QCr.Vc) begin
    case kQCProdVc: dblstr = "DblProdVc";
    case kQCProdOperationVc:  dblstr = "DblProdOperationVc";
    case kQCSDVc: dblstr = "DblSDVc";
    case kQCPUVc: dblstr = "DblPUVc";
    case kQCRetVc: dblstr = "DblRetVc";
    case kQCRetPUVc: dblstr = "DblRetPUVc";
  end;
  switch (QCr.Vc) begin
    case 0:
    otherwise
      OutString(450,dblstr,QCr.VcSerNr,false);
  end;
  EndFormat;
  return;
end;

procedure FindPUForSerialNr(string artcode,string serialnr,record PUVc PUr,row PUVc PUrw)
begin
  record ItemHistVc IHr;
  Integer i,rwcnt;

  IHr.ArtCode = artcode;
  IHr.SerialNr = serialnr;
  IHr.FileName = "PUVc";
  if (ReadFirstKey("ArtCodeSerialNr",IHr,3,true)) then begin
    PUr.SerNr = IHr.TransNr;
    if (ReadFirstMain(PUr,1,true)) then begin
      rwcnt = MatRowCnt(PUr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(PUr,i,PUrw);
        if ((PUrw.ArtCode==artcode) and (PUrw.SerialNr==serialnr)) then begin
          i = rwcnt;
        end;
      end;      
    end;  
  end;
  return;
end;

function string 255 FindLocation(record QualConVc QCr)
begin
  string 255 res;
  record PUVc PUr;
  record ProdVc Prodr;
  record ProdOperationVc ProdOpr;
  record SDVc SDr;
  record RetVc Retr;
  record RetPUVc RetPUr;

  switch (QCr.Vc) begin
    case kQCProdVc: 
      Prodr.SerNr = QCr.VcSerNr;
      if (ReadFirstMain(Prodr,1,true)) then begin end;
      res = Prodr.Location;
    case kQCProdOperationVc:
      ProdOpr.SerNr = QCr.VcSerNr;
      if (ReadFirstMain(ProdOpr,1,true)) then begin end;
      res = ProdOpr.Location;
    case kQCSDVc:
      SDr.SerNr = QCr.VcSerNr;
      if (ReadFirstMain(SDr,1,true)) then begin end;
      res = SDr.Location;
    case kQCPUVc: ;
      PUr.SerNr = QCr.VcSerNr;
      if (ReadFirstMain(PUr,1,true)) then begin end;
      res = PUr.Location;
    case kQCRetVc:
      Retr.SerNr = QCr.VcSerNr;
      if (ReadFirstMain(Retr,1,true)) then begin end;
      res = Retr.Location;
    case kQCRetPUVc:
      RetPUr.SerNr = QCr.VcSerNr;
      if (ReadFirstMain(RetPUr,1,true)) then begin end;
      res = RetPUr.Location;
  end;
  FindLocation = res;
  return;
end;

procedure PrintDetailed(record QualConVc QCr,record INVc INr)
begin
  string 255 dblstr,tstr;
  record PUVc PUr;
  row PUVc PUrw;
  row QualConVc QCrw;
  Integer i,rwcnt;
  Boolean firstf;

  FindPUForSerialNr(QCr.ArtCode,QCr.SerialNr,PUr,PUrw);
  PrintOveriew(QCr,INr);
  StartFormat(15);
  OutString(0,"DblCUVc",PUr.VECode,false);
  OutVal(120,0,PUrw.Quant,M4Val,true);
  OutString(130,0,QCr.TestedBy,false);
  OutString(300,0,FindLocation(QCr),false);
  EndFormat;
  firstf = true;
  rwcnt = MatRowCnt(QCr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(QCr,i,QCrw);
    if (firstf) then begin
      Gray_Divider(15,1);
      StartFormat(15);
      OutString(15,0,USetStr(17131),false);
      OutString(75,0,USetStr(17132),false);
      OutString(300,0,USetStr(17133),false);
      OutString(380,0,USetStr(17134),true);
      OutString(430,0,USetStr(17135),true);
      OutString(1,0,USetStr(17136),true);
      EndFormat;
      Gray_Divider(15,1);
      firstf = false;
    end;
    StartFormat(15);
    OutString(15,0,QCrw.QCTest,false);
    OutString(75,0,QCrw.Comment,false);
    OutString(300,0,QCrw.QCUnit,false);
    OutVal(380,0,QCrw.From,M4Val,true);
    OutVal(430,0,QCrw.To,M4Val,true);
    OutVal(1,0,QCrw.Result,M4Val,true);
    EndFormat;
  end;
  return;
end;

global
procedure QualConResRn(record RcVc RepSpec)
begin
  Integer rw;
  string 255 tstr;
  string 255 frin,toin;
  string 255 frit,toit;
  record QualConVc QCr;
  Boolean found,testf;
  Integer keys;
  record INVc INr;
  
  frin = FirstInRange(RepSpec.f1,20);
  toin = LastInRange(RepSpec.f1,20);
  frit = FirstInRange(RepSpec.f2,20);
  toit = LastInRange(RepSpec.f2,20);
  StartReportJob(USetStr(17130));
  rw = 1;
  HTItems(RepSpec.f1,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (nonblank(RepSpec.f2)) then begin 
    HTITs(frit,toit,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;  
  end;
  if (nonblank(RepSpec.f8)) then begin 
    HTItemClass(RepSpec.f8,tstr);
    Header(rw,tstr,1);  
    rw = rw + 1;  
  end;
 
//  tstr = USetStr(17101) & ": " & RepSpec.d1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTSerialNos(RepSpec.f3,RepSpec.f3,tstr);
  Header(rw,tstr,0);
  EndHeader;
  
  StartFormat(15);
  OutString(0,0,USetStr(17102),false);
  OutString(70,0,USetStr(17103),false);
  OutString(190,0,USetStr(17104),false);
  OutString(280,0,USetStr(17105),false);
  OutString(350,0,USetStr(17106),false);
  OutString(450,0,USetStr(17107),false);
  EndFormat;
  Gray_Divider(0,1);
  
  found = true;
  QCr.OKFlag = 1;
  keys = 1;
  if (nonblankdate(RepSpec.sStartDate)) then begin
    QCr.AnalyseDate = RepSpec.sStartDate;
    keys = 2;
  end;
  while (LoopKey("AnalyseDoneDate",QCr,keys,found)) begin
    if (QCr.OKFlag!=1) then begin found = false; end;
    if (nonblank(RepSpec.sEndDate)) then begin
      if (QCr.AnalyseDate>RepSpec.sEndDate) then begin found = false; end;
    end;
    if (found) then begin
      testf = true;
      if (nonblank(RepSpec.f1)) then begin
        if (QCr.ArtCode<frin) then begin testf = false; end;
        if (QCr.ArtCode>toin) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (QCr.SerialNr!=RepSpec.f3) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.FirstAcc)) then begin
        if (QCr.StatusCode!=RepSpec.FirstAcc) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (SetInSet(RepSpec.AccStr,QCr.TestedBy)==false) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.LastAcc)) then begin
        if (QCr.Vc!=SetFromString(362,RepSpec.LastAcc)) then begin testf = false; end;
        if (nonblank(RepSpec.long1)) then begin
          if (QCr.VcSerNr!=RepSpec.long1) then begin testf = false; end;
        end;
      end;
      if (testf) then begin
        if (ReadFirstItem(QCr.ArtCode,INr,false,false)) then begin
        end;
        if (nonblank(RepSpec.f2)) then begin
          if (INr.Group<frit) then begin testf = false; end;
          if (INr.Group>toit) then begin testf = false; end;
        end;
        if nonblank(RepSpec.f8) then begin
          if (SetInSet2(RepSpec.f8,INr.DispGroups)==false) then begin
            testf = false;
          end;
        end; 
      end;
      
      if (testf) then begin
        switch (RepSpec.ArtMode) begin
          case 0: PrintOveriew(QCr,INr);
          case 1: 
            PrintDetailed(QCr,INr);
            StartFormat(15);
            EndFormat;
        end;
      end;
    end;
  end;
  
  EndJob;  
  return;
end;
