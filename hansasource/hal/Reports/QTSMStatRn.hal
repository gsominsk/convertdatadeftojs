external function boolean RecordSerNrInRange(string,longint);
external function val ValPerSalesMan(val,string);
external function Boolean ContactInGroupClass(string,string,string,string,string,string);
external procedure HTCustCat(string,var string);
external procedure HTCustClass(string,var string);
external function Boolean HasMultiLocations();
external procedure HTLocations(string, string, var string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function LongInt DateDiff(Date,Date);
external procedure HT2Per(Date, Date , var string);

procedure findleastamount(val rs, var val lamount)
begin
   if (lamount == 0)  then begin
     lamount = rs;
   end;
   if (lamount > rs) then begin
     lamount = rs;
   end;
  return;
end;

procedure findhigestamount(val rs, var val hamount)
begin
   if (hamount == 0)  then begin
     hamount = rs;
   end;
   if (hamount < rs) then begin
     hamount = rs;
   end;
  return;
end;

procedure findlessdays(val decdays, var val lessdays)
begin
   if (lessdays == 0) then begin
     lessdays = decdays;
   end;
   if (lessdays > decdays) then begin
     lessdays = decdays;
   end;
return;
end;

procedure findmostdays(val decdays, var val mostdays)
begin
   if (mostdays == 0) then begin
     mostdays = decdays;
   end;
   if ( mostdays < decdays) then begin
     mostdays = decdays;
   end;
  return;
end;

procedure FindQuotes(record RcVc RepSpec, String UserCode, 
          var val ttotval, var val tnoqt, var val tleast,
          var val tmost, var val tldays, var val tmdays)
begin
  Record QTVc QTr;
  Record UserVc Userr;
  Boolean TrHs, testf,firstf;
  val rs, iv, acc, valacc, totval;
  val totgp, lessdays, mostdays, lessamount, mostamount;
  string 255 str;
  val decdays, totdaysa, noqt;
  val avgval;
 
  firstf = true;
  noqt = 0;
  TrHs = true; 
  while (LoopKey("SalesMan:" & UserCode,QTr,1,TrHs)) begin
    if (TrHs) then begin
      if (SetInSet(UserCode,QTr.SalesMan)==false) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
        testf = true;
        if (DateInRange(Qtr.RejectDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin 
          testf = false;
        end;
        if (testf) then begin
         testf = RecordSerNrInRange(RepSpec.f1,QTr.SerNr);
        end;        
        if (RepSpec.vals0>0 and testf) then begin
          iv = QTr.Sum1;   
          rs = MulRateToBase1(QTr.CurncyCode,iv,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
          rs = ValPerSalesMan(rs,QTr.SalesMan);
          if (RepSpec.vals0 >= rs) then begin
            testf = false;
          end;
        end; 
        if (nonblank(RepSpec.f4) and (RepSpec.f4<>QTr.QuoteClass)) then begin
         testf = false;
        end;
        if (nonblank(RepSpec.f3)) then begin
          if (RepSpec.f3<>QTr.CustCode) then begin
            testf = false;
          end;
        end;
        if (testf) then begin 
          testf = ContactInGroupClass(QTr.CustCode,RepSpec.f9,RepSpec.f10,"CUST","","");    
        end;   
        if (nonblank(RepSpec.ObjStr)) then begin
          if (RepSpec.ObjStr<>QTr.SalesGroup) then begin
            testf = false;
          end;
        end;
        if (nonblank(RepSpec.f6)) then begin
          if (SetInSet(RepSpec.f6,QTr.Objects)==false) then begin
            testf = false;
          end;
        end;
        if (QTr.Rejected<2) then begin
          testf = false;
        end;
        if (QTr.Closed==1) then begin
          testf = false;
        end;
        if (nonblank(RepSpec.FirstAcc)) then begin
          if (QTr.Location!=RepSpec.FirstAcc) then begin testf = false; end;
        end;        
        if (testf) then begin
          noqt = noqt +1;
          tnoqt = tnoqt + 1;
         
          iv = QTr.Sum1;   
          rs = MulRateToBase1(QTr.CurncyCode,iv,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
          rs = ValPerSalesMan(rs,QTr.SalesMan);
          if (QTr.Rejected == 2) then begin
            acc = acc + 1;
            valacc = valacc + rs;
            str = USetStr(11023);
            decdays = DateDiff(QTr.RejectDate,QTr.QTDate); 
            totdaysa = totdaysa + decdays;   
            totgp = totgp + QTr.TotGP;
            findlessdays(decdays,lessdays);      
            findlessdays(decdays, tldays);
            findmostdays(decdays,mostdays);
            findmostdays(decdays,tmdays);
            findleastamount(rs,lessamount);
            findleastamount(rs,tleast);
            findhigestamount(rs,mostamount);
            findhigestamount(rs,tmost);
          end;  
          switch (RepSpec.ArtMode) begin
            case 1:
              if (firstf) then begin
                firstf = false;
                StartFormat(15)
                OutString(0,0,UserCode,false);
                Userr.Code = UserCode;
                if (ReadFirstMain(Userr,1,true)) then begin
                  OutString(30,0,Userr.Name, false);
                end;
                EndFormat;
                Gray_Divider(0,150);
              end;
              StartFormat(15)
               OutLongInt(15,"DblQTVc",QTr.SerNr,false);
               OutDate(80,0,QTr.QTDate,false);
               OutString(130,"DblCUVc",QTr.CustCode,false);
               OutString(210,0,Left(QTr.Addr0,30),false);
               OutVal(345,0,QTr.Sum1,M4Val,true);
               OutVal(420,0,QTr.Sum1,M4Val,true);
               OutString(470,0,QTr.CurncyCode,false);
              EndFormat;
          end;
          totval = totval + rs;
          ttotval = ttotval + rs; 
       
        end; 
      end; 
    end; 
  if (totval > 0) then begin
     avgval = totval/noqt;
     StartFormat(15)
     switch (RepSpec.ArtMode) begin
       case 0:
         OutString(0,0,UserCode,false);
         Userr.Code = UserCode;
         if (ReadFirstMain(Userr,1,true)) then begin
           OutString(30,0,Userr.Name, false);
         end;
       case 1:
         Gray_Divider(150,1);
     end;
     OutStringAdjustBiDi(200,0,totval,true,M4Val,240);
     OutValBiDi(225,0,noqt,M40Val,true,290);
     OutStringAdjustBiDi(290,0,avgval,true,M4Val,330);
     OutStringAdjustBiDi(345,0,lessamount,true,M4Val,385);
     OutStringAdjustBiDi(420,0,mostamount,true,M4Val,460);
     OutValBiDi(450,0,lessdays,M40Val,true,490);
     OutValBiDi(1,0,mostdays,M40Val,true,520);
     EndFormat;
  end;
  return;
end;         

global 
Procedure QTSMStatRn(record RcVc RepSpec)
begin
  record UserVc Userr;
  Boolean TrHs, testf;
  string 20 fruser,touser;
  string 255 tstr;
  val rw;
  val ttotval, tnoqt,tavg,tleast, tmost;
  val tldays, tmdays;
  
  fruser = FirstInRange(RepSpec.f2,20);
  touser = LastInRange(RepSpec.f2,20);    
  tldays = 0;
  tmdays = 0;
  tmost = 0;
  tleast = 0; 
  ttotval = 0;
  tnoqt = 0;
  StartReportJob(USetStr(11070));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;  
  if (nonblank(RepSpec.f1)) then begin
    tstr = USetStr(11001);
    tstr = tstr & ": " & RepSpec.f1;
    Header(rw,tstr,1); 
    rw = rw + 1;  
  end;
  if (nonblank(RepSpec.f2)) then begin
    tstr = USetStr(2692);
    tstr = tstr & ": " & RepSpec.f2;
    Header(rw,tstr,1); 
    rw = rw + 1;  
  end;
  if (nonblank(RepSpec.f3)) then begin
    tstr = USetStr(2684);
    tstr = tstr & ": " & RepSpec.f3;
    Header(rw,tstr,1); 
    rw = rw + 1;  
  end;
  HTCustCat(RepSpec.f9,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  HTCustClass(RepSpec.f10,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.ObjStr)) then begin
    tstr = USetStr(11025);
    tstr = tstr & ": " & RepSpec.ObjStr;
    Header(rw,tstr,1); 
    rw = rw + 1;  
  end;
  if (RepSpec.vals0 > 0) then begin
    tstr = USetStr(11025);
    tstr = tstr & RepSpec.vals0;
    Header(rw,tstr,1);
    rw = rw + 1;  
  end;
  if (nonblank(RepSpec.FirstAcc) and HasMultiLocations) then begin
    HTLocations(RepSpec.FirstAcc,RepSpec.FirstAcc,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  EndHeader;
  
  StartFormat(15);
    OutString(0,0,USetStr(11071),false);
    OutString(30,0,USetStr(11072),false);
    OutStringAdjustBiDi(200,0,USetStr(11073),true,M4Val,240);
    OutStringAdjustBiDi(225,0,USetStr(11074),true,M4Val,290);
    OutStringAdjustBiDi(290,0,USetStr(11075),true,M4Val,330);
    OutStringAdjustBiDi(345,0,USetStr(11076),true,M4Val,385);
    OutStringAdjustBiDi(420,0,USetStr(11077),true,M4Val,460);
    OutString(445,0,USetStr(11078),false);
  EndFormat;
  Gray_Divider(0,1);
  Userr.Code = fruser;
  TrHs = true;
  while (LoopMain(Userr,1,TrHs)) begin
    if (TrHs) then begin
      if (nonblank(RepSpec.f2)) then begin
        if (Userr.Code>touser) then begin 
          TrHs = false; 
        end;
      end;    
    end;    
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.ObjStr)) then begin
        if (RepSpec.ObjStr!=Userr.SalesGroup) then begin
          testf = false;
        end;
      end;
      if (testf) then begin 
        FindQuotes(RepSpec,Userr.Code,ttotval,tnoqt,tleast,tmost,tldays,tmdays);
      end; // testf   
    end; // TrHs
  end; //while
  Gray_Divider(0,1);
  StartFormat(15)
  OutString(0,0,USetStr(11079),false);
  OutStringAdjustBiDi(200,0,ttotval,true,M4Val,240);
  OutValBiDi(225,0,tnoqt,M40Val,true,290);
  tavg = ttotval/tnoqt;
  OutStringAdjustBiDi(290,0,tavg,true,M4Val,330);
  OutStringAdjustBiDi(345,0,tleast,true,M4Val,385);
  OutStringAdjustBiDi(420,0,tmost,true,M4Val,460);
  OutValBiDi(450,0,tldays,M40Val,true,490);
  OutValBiDi(1,0,tmdays,M40Val,true,520);
  EndFormat;
  EndJob;
  
  return; 
end;

