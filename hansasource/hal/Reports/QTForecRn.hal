external function Boolean ContactInGroupClass(string,string,string,string,string,string);
external procedure HTCustCat(string,var string);
external procedure HTCustClass(string,var string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);

procedure findleastamount(val rs, var val lamount)
begin
   if (lamount == 0)  then begin
     lamount = rs;
   end;
   if (lamount > rs) then begin
      lamount = rs;
   end;
return;
end;

procedure findhigestamount(val rs, var val hamount)
begin
   if (hamount == 0)  then begin
     hamount = rs;
   end;
   if (hamount < rs) then begin
      hamount = rs;
   end;
return;
end;

procedure EndOfReport(record RcVc RepSpec, val TotSum,val totqt,val mostamount,val lessamount,val totprob, val avgprob)
begin
  val calcval;
  val avgval;
  
   StartFormat(15);
    OutString(230,0,USetStr(2687),false);    
    OutValBiDi(1,0,TotSum,M4Val,true,515);
    EndFormat;
    calcval = (Totsum*RepSpec.vals0)/100;
    StartFormat(15);
    OutString(230,0,USetStr(11031),false);
    OutValBiDi(1,0,totqt,M40Val,true,515);
    EndFormat;   
    StartFormat(15);
    avgval = TotSum/totqt;
    OutString(230,0,USetStr(11032),false);
    OutStringAdjustBiDi(1,0,avgval,true,M4Val,515);
    EndFormat;   
    StartFormat(15);
    OutString(230,0,USetStr(11019),false);
    OutStringAdjustBiDi(1,0,mostamount,true,M4Val,515);
    EndFormat;
    StartFormat(15);
    OutString(230,0,USetStr(11020),false);
    OutStringAdjustBiDi(1,0,lessamount,true,M4Val,515);
    EndFormat;
    StartFormat(15);
    OutString(230,0,USetStr(11033),false);
    OutStringAdjustBiDi(1,0,calcval,true,M4Val,515);
    EndFormat;
    StartFormat(15);
    OutString(230,0,USetStr(11034),false);
    OutStringAdjustBiDi(1,0,totprob,true,M4Val,515);
    EndFormat;
    StartFormat(15);
    OutString(230,0,USetStr(11035),false);
    OutStringAdjustBiDi(1,0,avgprob,true,M4Val,515);
    EndFormat;   
  return;
end;
  
global
procedure QTForecRn(record RcVc RepSpec)
begin
  record QTVc QTr;
  Boolean testf;
  Boolean found;
  Integer rw;
  LongInt afr;
  LongInt ato;
  String 255 tstr;
  val calcval;
  val totsum;
  val totqt;
  val iv;
  val rs;
  val prob;
  val avgprob,tavgprob;
  val totprob;
  date decdate, td;
  val lessamount, mostamount;
  
  afr = FirstInRange(RepSpec.f1,30);
  ato = LastInRange(RepSpec.f1,30);

  avgprob = 0;
  tavgprob = 0;
  totqt = 0;
  lessamount = 0;
  mostamount = 0;
  
  StartReportJob(USetStr(11030));
   rw = 1;
   if (blank(RepSpec.f1)) then begin
      tstr = USetStr(8320);
    end else begin
      tstr = USetStr(8321);
      tstr = tstr & afr;
      if (afr<>ato) then begin
        tstr = tstr & " : " & ato;
      end;
    end;
    Header(rw,tstr,1);
    rw = rw + 1;
    if (blank(RepSpec.f4)) then begin
      tstr = USetStr(8325);
    end else begin
      tstr = USetStr(8326);
      tstr = tstr & RepSpec.f4;
    end;    
    Header(rw,tstr,1);    
    rw = rw + 1;
    if (nonblank(RepSpec.f3)) then begin
      tstr = USetStr(2684);
      tstr = tstr & ": " & RepSpec.f3;
      Header(rw,tstr,1); 
      rw = rw + 1;  
    end;
    HTCustCat(RepSpec.f9,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    HTCustClass(RepSpec.f10,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;  
    EndHeader;
    StartFormat(15);
    OutString(0,0,USetStr(11001),false);
    OutString(60,0,USetStr(11002),false);
    OutString(120,0,USetStr(11003),false);
    OutString(190,0,USetStr(11004),false);
    OutString(280,0,USetStr(11005),true);
    if (RepSpec.vals1 > 0) then begin
      OutString(330,0,USetStr(11036),true);
    end;
    OutString(380,0,USetStr(11037),true);
    OutStringAdjustBiDi(1,0,USetStr(11009),true,M4Val,515);
    EndFormat;
  Black_Divider(0,1);
  
  found = true;
  QTr.Rejected = 0;
  QTr.SerNr = afr;
  while (LoopKey("Rejected",QTr,2,found)) begin   
    if (QTr.Rejected<>0) then begin
        found = false;
    end;    
    if (found) then begin
      testf = true;  
      if (nonblank(RepSpec.f1)) then begin
        if (afr>QTr.SerNr) then begin
          testf = false;
        end;
        if (ato<QTr.SerNr) then begin
          testf = false;
        end;      
      end;       
      if (nonblank(RepSpec.FirstAcc)) then begin
        if (RepSpec.FirstAcc<>QTr.QuoteClass) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.f3) and (RepSpec.f3<>QTr.CustCode)) then begin
        testf = false;
      end;
      if (testf) then begin 
        testf = ContactInGroupClass(QTr.CustCode,RepSpec.f9,RepSpec.f10,"CUST","","");    
      end; 
      if (nonblank(RepSpec.f2)) then begin
        if (RepSpec.f2<>QTr.SalesMan) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.f4) and (RepSpec.f4<>QTr.QuoteClass)) then begin
        testf = false;
      end;
      if (RepSpec.vals2 > 0) then begin
        if (QTr.Probability < 1) then begin
          prob = 100;
        end else begin
          prob = QTr.Probability;
        end;
        if (QTr.Probability < RepSpec.vals2) then begin
          testf = false;
        end;
      end;
      if (QTr.Closed==1) then begin
        testf = false;
      end;
 
      if (QTr.OrderNr<>-1) then begin
        testf = false;
      end;
           
      if (nonblank(RepSpec.ObjStr)) then begin
        if (QTr.SalesGroup <> RepSpec.ObjStr) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.f6)) then begin
        if (SetInSet(RepSpec.f6,QTr.Objects)==false) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        
        iv = QTr.Sum1;
        rs = MULRATETOBASE1(QTr.CurncyCode,iv,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
        findleastamount(rs, lessamount);
        findhigestamount(rs, mostamount);
        if (QTr.Probability<1) then begin
           prob = 100;
        end else begin
          prob = QTr.Probability;
        end;
        if (RepSpec.vals1 > 0) then begin
          decdate = AddDay(QTr.QTDate,RepSpec.vals1);
          if nonblankdate(RepSpec.d1) then begin
            if (decdate > RepSpec.d1) then begin
              testf = false;
            end;
          end;
        end;
        if (testf) then begin
          StartFormat(15);
          OutLongInt(0,"DblQuote",QTr.SerNr,false);
          OutString(60,0,QTr.CustCode,false);
          OutString(120,0,left(QTr.Addr0,20),false);
          OutString(190,0,QTr.SalesMan,false);
          OutDate(280,0,QTr.QTDate,true);
          if (RepSpec.vals1 > 0) then begin
            OutDate(330,0,decdate,true);
          end;
          OutDate(380,0,QTr.ValidUntilDate,true);
          OutStringAdjustBiDi(1,0,rs,true,M4Val,515);
          EndFormat;
          totprob = totprob + ((prob*rs)/100);
          avgprob = avgprob + prob;
          TotSum = TotSum + iv;
          totqt = totqt +1;
        end;
      end; 
    end; 
  end; 
  Black_Divider(0,1);
  avgprob = avgprob/totqt;
  EndOfReport(RepSpec, TotSum,totqt,mostamount,lessamount,totprob,avgprob);
  EndJob;
  return;
end;
#endif
