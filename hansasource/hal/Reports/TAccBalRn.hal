external function Integer GetIntYc(Date);
external procedure ToStrTRCode(var string,Integer,LongInt);

global
procedure TAccBalTransRn(record RcVc RepSpec)
begin
  record TTRVc TTRr;
  Boolean found;
  val v,tot,b1val;
  string 255 tstr;
  
  StartReportJob(USetStr(16299));

  EndHeader;
  
  SetRepCol(2,100);
  SetRepCol(3,300);
  StartFormat(15);
   OutString(0,0,USetStr(16295),false);
   OutString(2,0,USetStr(16296),false);
   OutString(3,0,USetStr(16297),false);
   OutString(1,0,USetStr(16298),true);
  EndFormat;
  Gray_Divider(0,1);

  TTRr.AccNumber = RepSpec.f1;
  TTRr.TransDate = RepSpec.sStartDate;
  found = true;
  while (LoopKey("ACTransDate",TTRr,2,found)) begin
    if (TTRr.AccNumber!=RepSpec.f1) then begin found = false; end;
    if (TTRr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    if (found) then begin
      b1val = TTRr.B1Val;
      if (b1val<0) then begin b1val = -TTRr.B1Val; end;
      tot = tot + b1val;
      ToStrTRCode(tstr,TTRr.TRIntYc,TTRr.TRNumber);
      StartFormat(15);
       OutLongInt(0,"DblTTRVc",TTRr.SerNr,false);
       OutString(2,"DblTrans",tstr,false);
       OutDate(3,0,TTRr.TransDate,false);
       OutVal(1,0,b1val,M4Val,true);
      EndFormat;
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
   OutVal(1,0,tot,M4Val,true);
  EndFormat;
  
  EndJob;
  return;
end;

procedure PrintTAccBalances(record RcVc RepSpec,string taccnumber,string comment,var val tot)
BEGIN
  record TTRVc TTRr;
  Boolean found,printf;
  val v,b1val;
  
  TTRr.AccNumber = taccnumber;
  TTRr.TransDate = RepSpec.sStartDate;
  found = true;
  while (LoopKey("ACTransDate",TTRr,2,found)) begin
    if (TTRr.AccNumber!=taccnumber) then begin found = false; end;
    if (TTRr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    if (found) then begin
      b1val = TTRr.B1Val;
      if (b1val<0) then begin b1val = -TTRr.B1Val; end;
      v = v + b1val;
      tot = tot + b1val;
    end;
  end;
  printf = true;
  if (RepSpec.flags[0]!=0) then begin
    if (v==0) then begin printf = false; end;
  end;
  if (printf) then begin
    StartFormat(15);
     OutString(0,"DblTAccBalTransRn",taccnumber,false);
     OutString(2,0,comment,false);
     OutVal(1,0,v,M4Val,true);
    EndFormat;
  end;
  RETURN;
END;

global
procedure TAccBalRn(record RcVc RepSpec)
BEGIN
  string 255 fracc,toacc;
  record TAccVc TAccr;
  Boolean found;
  val tot;
  
  fracc = FirstInRange(RepSpec.f1,20);
  toacc = LastInRange(RepSpec.f1,20);
  StartReportJob(USetStr(16290));

  EndHeader;
  SetRepCol(2,190);
  StartFormat(15);
   OutString(0,0,USetStr(16291),false);
   OutString(2,0,USetStr(16292),false);
   OutString(1,0,USetStr(16293),true);
  EndFormat;
  Gray_Divider(0,1);

  found = true;
  TAccr.AccNumber = fracc;
  while (LoopMain(TAccr,1,found)) begin
    if (nonblank(RepSpec.f1)) then begin
      if (TAccr.TAccNumber>toacc) then begin found = false; end;
    end;
    if (found) then begin
      PrintTAccBalances(RepSpec,TAccr.TAccNumber,TAccr.Comment,tot);  
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
   OutVal(1,0,tot,M4Val,true);
  EndFormat;
  EndJob;
  RETURN;
END;

