external function boolean CheckItemGroupClassification(string,string,string);
external procedure HTItemClass(string,var string);
external procedure HTITs(string,string,var string);
external procedure HTClass(string,var string);
external procedure HTItem(string,var string);
external function Boolean CheckPlanShip(string,string);
external procedure HTCusts(string, string, var string);
external procedure HTOrder(LongInt,LongInt,var string);

global
procedure DeliveryRn(record RcVc RepSpec)
BEGIN
  record ORVc ORr;
  record CUVc CUr;
  row ORVc ORrw;
  record INVc INr;
  record ITVc ITr;
  record CCatVc CCr;
  Boolean TrHs,testf,test2f,orprintf;
  Boolean found,printedf;
  val t,TotSum;
  Integer i,rwcnt;
  Integer keys;
  Integer rw;
  LongInt afr,ato;
  string 5 frgr,togr;
  string 255 ckey;
  string 255 tstr;
  
  Array string 20 isumptritem;
  Array val isumptrqty;
  Array string 5 isumptrcustcat;
  Array val isumptrvolume;
  Array val isumptrweight;
  Array string 5 isumptrartgroup;
  Array string 100 isumptritemname;  
  Integer line;
  Integer j,arrcnt;
  
  afr = FirstInRange(RepSpec.f1,10);
  ato = LastInRange(RepSpec.f1,10);
  frgr = FirstInRange(RepSpec.f3,5);
  togr = LastInRange(RepSpec.f3,5);
  
  StartReportJob(USetStr(2596));
   rw = 1;
   HTOrder(afr,ato,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   HTItem(RepSpec.LastAcc,tstr);  
   Header(rw,tstr,0);
   HTCusts(RepSpec.f2,RepSpec.f2,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   HTITs(frgr,togr,tstr);
   Header(rw,tstr,0);
   HTClass(RepSpec.FirstAcc,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   if (nonblank(RepSpec.f8)) then begin 
     HTItemClass(RepSpec.f8,tstr);
     Header(rw,tstr,1);  
     rw = rw + 1;  
   end;
  EndHeader;
  StartFormat(15);
  OutString(0,0,USetStr(2584),false);
  OutString(90,0,USetStr(2585),false);
  OutString(180,0,USetStr(2586),false);
  OutString(480,0,USetStr(2597),true);
  EndFormat;
  ORr.SerNr = afr;
  ORr.OSFlag = 1;
  ckey = "OSFlag";
  keys = 2;
  Gray_Divider(0,1);
  TrHs = true;
  while (LoopKey(ckey,ORr,keys,TrHs)) begin
    if (TrHs) then begin
      if (ato!=-1) then begin
        if (ORr.SerNr>ato) then begin
          TrHs = false;
        end;
      end;
    end;
    if (TrHs) then begin
      testf = true;      
      if (nonblank(RepSpec.f2) and (RepSpec.f2!=ORr.CustCode)) then begin testf = false; end;
      if ((nonblank(RepSpec.FirstAcc))
          and (RepSpec.FirstAcc!=ORr.OrderClass)) then begin testf = false; end;
      if (nonblank(RepSpec.Stext)) then begin
        if (CheckPlanShip(RepSpec.Stext,ORr.PlanShip)==false) then begin testf = false; end;
      end;
      if ((ORr.InvFlag==2) and (ORr.ShipFlag!=0)) then begin testf = false; end;
      if (testf) then begin           
        orprintf = false;
        CUr.Code = ORr.CustCode;
        if (ReadFirstMain(CUr,1,true)==false) then begin
          CUr.CustCat = "";
        end;
        rwcnt = MatRowCnt(ORr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(ORr,i,ORrw);
          if (blank(RepSpec.LastAcc) or (RepSpec.LastAcc==ORrw.ArtCode)) then begin
            test2f = true;
            if (CheckItemGroupClassification(ORrw.ArtCode,RepSpec.f3,RepSpec.f8)==false) then begin 
              test2f = false;
            end;
            /*
            if (nonblank(RepSpec.f3)) then begin
              INr.Code = ORrw.ArtCode;
              if (ReadFirstMain(INr,1,true)) then begin
                if (INr.Group<frgr) then begin test2f = false; end;
                if (INr.Group>togr) then begin test2f = false; end;
              end;
            end;
            */
            if (test2f) then begin
              if (ORrw.Quant==blankval) then begin test2f = false; end;
            end;
            if (test2f) then begin
              line = -1;
              for (j=0;j<arrcnt;j=j+1) begin
                if (isumptritem[j]==ORrw.ArtCode) then begin
                  if (RepSpec.ArtMode==0) then begin
                    if (CUr.CustCat!=isumptrcustcat[j]) then begin
                      goto LSKIPBREAK;
                    end;
                  end;
                  line = j;
                  goto LBREAK;                  
                end;
LSKIPBREAK:;                
              end;
LBREAK:;              
              if (orprintf==false) then begin
                StartFormat(15);
                OutLongInt(0,0,ORr.SerNr,false);
                OutString(90,0,ORr.CustCode,false);
                OutString(180,0,ORr.Addr0,false);
                OutString(480,0,ORr.Phone,true);
                EndFormat;
                orprintf = true;
              end;
              if (line==-1) then begin
                line = arrcnt;
                arrcnt = arrcnt + 1;
                isumptritem[line] = ORrw.ArtCode;
                isumptritemname[line] = ORrw.Spec;
                isumptrqty[line] = blankval;
                isumptrvolume[line] = blankval;
                isumptrweight[line] = blankval;
                isumptrcustcat[line] = CUr.CustCat;
                INr.Code = ORrw.ArtCode;
                if (ReadFirstMain(INr,1,true)) then begin
                  isumptrartgroup[line] = INr.Group;
                  isumptrvolume[line] = INr.Volume;
                  isumptrweight[line] = INr.Weight;
                end else begin
                  isumptrartgroup[line] = "";
                end;
              end;
              t = ORrw.Quant - ORrw.Shipd1;
              isumptrqty[line] = isumptrqty[line] + t;
            end;
          end;
        end;
      end;
    end;
  end;
  StartFormat(15);
  EndFormat;
  Gray_Divider(0,1);
  StartFormat(15);
  EndFormat;
  
  switch (RepSpec.ArtMode) begin
    case 1:
      found = true;
      while (LoopMain(ITr,1,found)) begin
        if (found) then begin
        printedf = false;
        for (j=0;j<arrcnt;j=j+1) begin
          if (isumptrartgroup[j]==ITr.Code) then begin
            if (printedf==false) then begin
              printedf = true;
              StartFormat(15);
              EndFormat;
              StartFormat(15);
              OutString(0,0,ITr.Code,false);
              OutString(100,0,ITr.Comment,false);
              EndFormat;
              StartFormat(15);
              EndFormat;
              Gray_Divider(0,1);
              StartFormat(15);
              EndFormat;
            end;
            StartFormat(15);
            OutString(80,0,isumptritem[j],false);
            OutString(180,0,isumptritemname[j],false);
            OutVal(400,0,isumptrqty[j],M4Qty,true);
            EndFormat;
          end;
        end;
        end;
      end;
    case 0:
      found = true;
      while (LoopMain(CCr,1,found)) begin
        if (found) then begin
        printedf = false;
        for (j=0;j<arrcnt;j=j+1) begin
          if (isumptrcustcat[j]==CCr.Code) then begin
            if (printedf==false) then begin
              printedf = true;
              StartFormat(15);
              EndFormat;
              StartFormat(15);
              OutString(0,0,CCr.Code,false);
              OutString(100,0,CCr.Comment,false);
              EndFormat;
              StartFormat(15);
              EndFormat;
              Gray_Divider(0,1);
              StartFormat(15);
              EndFormat;
            end;
            StartFormat(15);
            OutString(80,0,isumptritem[j],false);
            OutString(180,0,isumptritemname[j],false);
            OutVal(400,0,isumptrqty[j],M4Qty,true);
            EndFormat;
          end;
        end;
        end;
      end;
  end;
  Gray_Divider(0,1);
  EndJob;
  RETURN;
END;