external function Boolean FindST(string,string,string,var record STVc);
external procedure HTClasses(string,string,var string);
external procedure HTBranchIDs(string,string,var string);
external procedure FindStatisticsDates(Date,Date,var Date,var Date);
external function val IVGetTurnover(string,string,string,string,string,string,string,string,Date,Date);
external procedure HT2Per(Date, Date , var string);

global
function val GetINTurnover(record INVc INr,string branch,string class,string forperson,string colns,Date sStartDate,Date sEndDate)
BEGIN
  val res;
  LongInt d;
  Date fmsd,fmed;
  record STVc STr;
  
  if (sStartDate.day!=1) or (sEndDate.day!=DaysInMonth(sEndDate.year,sEndDate.month)) or (nonblank(forperson)) then begin
    FindStatisticsDates(sStartDate,sEndDate,fmsd,fmed);
    if (nonblankdate(fmsd)) and (nonblankdate(fmed)) then begin
      if (sStartDate<AddDay(fmsd,-1)) then begin
        res = IVGetTurnover("",INr.Code,"","",branch,class,forperson,colns,sStartDate,AddDay(fmsd,-1));
      end;
      res = res + GetTurnover(INr,colns,fmsd,fmed);
      if (AddDay(fmed,1)<sEndDate) then begin
        res = res + IVGetTurnover("",INr.Code,"","",branch,class,forperson,colns,AddDay(fmed,1),sEndDate);
      end;
    end else begin
      res = IVGetTurnover("",INr.Code,"","",branch,class,forperson,colns,sStartDate,sEndDate);
    end;
  end else begin
    if (FindST(INr.Code,branch,class,STr)) then begin
      res = GetTurnover(STr,colns,sStartDate,sEndDate);
    end;
  end;    
  GetINTurnover = res;
  RETURN;
END;

procedure AddToSMSort2(var record SMVc SMr,var record SMVc SM2r,record INVc INr,val q,val s,val sort,string group)
begin
  record INVc INr2;
  row SMVc SMrw;
  row SMVc SM2rw;
  Integer i,j,rwcnt;
  Boolean addedf;
  boolean testf;

  addedf = false;
  rwcnt = MatRowCnt(SMr);
  j = 0;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    Inr2.Code = SMrw.Objects;
    testf = readfirstmain(INr2,1,true);
    if ((INr2.Group > INr.Group or (INr.Group==Inr2.Group and SMrw.Objects > Inr.Code)) and (addedf==false)) then begin
      SM2rw.Objects = INr.Code;
      SM2rw.Comment = INr.Name;
      SM2rw.DebVal = q;
      SM2rw.CredVal = s;
      SM2rw.DebVal2 = sort;
      SM2rw.CredVal2 = q*s;
      MatRowPut(SM2r,j,SM2rw);
      j = j + 1;
      addedf = true;
    end;
    MatRowPut(SM2r,j,SMrw);
    j = j + 1;
  end;
  if (addedf==false) then begin
    SM2rw.Objects = INr.Code;
    SM2rw.Comment = INr.Name;
    SM2rw.DebVal = q;
    SM2rw.CredVal = s;
    SM2rw.DebVal2 = sort;
    SM2rw.CredVal2 = q*s;
    MatRowPut(SM2r,j,SM2rw);
  end;
  RecordNew(SMr);
  rwcnt = MatRowCnt(SM2r);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SM2r,i,SMrw);
    MatRowPut(SMr,i,SMrw);
  end;
  return;
end;

global
procedure ItemSales2Rn(record RcVc RepSpec)
begin
  record ITVc ITr;
  record INVc INr;
  record SMVc SMr;
  record SMVc SM2r;
  string 50 frcc,tocc;
  Boolean found,testf;
  val q,s,sort;
  row SMVc SMrw; 
  val tot,totsum;
  val sum;
  val totgroup,totsumgroup;
  Integer i,rwcnt;
  string 255 tstr;
  string 40 prevgroup;
  Integer rw;
  Integer keys;

  totsum =0;
  StartReportJob(USetStr(2455));
   rw = 1;
   HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;   
   HTBranchIDs(RepSpec.f6,RepSpec.f6,tstr);
   Header(rw,tstr,0);
   rw = rw + 1;
   HTClasses(RepSpec.LastAcc,RepSpec.LastAcc,tstr);
   Header(rw,tstr,0);
  EndHeader;
/*  
  if (RepSpec.wholemonthf==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(1163),false);
    EndFormat;
    goto LItemSales2Rn;
  end;  
*/  
  StartFormat(15);
  OutString(0,0,USetStr(2462),false);
  OutString(100,0,USetStr(2448),false);
  OutStringAdjustBidi(280,0,USetStr(2464),true,M4Val,320);
  OUtStringAdjustBidi(325,0,USetStr(2456),true,M4Val,365);
  outStringAdjustBidi(370,0,USetStr(12708),true,M4Val,410);
  OutStringAdjustBidi(420,0,USetStr(2457),true,M4Val,460);
//  OutString(410,0,USetStr(2465),true);
  OutStringAdjustBidi(1,0,USetStr(2466),true,M4Val,510);
  EndFormat;
  Gray_Divider(0,1);
  frcc = FirstInRange(RepSpec.f1,20);
  tocc = LastInRange(RepSpec.f1,20);
  keys = 1;
  INr.Group = RepSpec.f2;
  if (nonblank(RepSpec.f1)) and (nonblank(RepSpec.f2)) then begin
    keys = 2;
    INr.Group = RepSpec.f2;
    INr.Code = frcc;
  end;
  found = true;
  while (LoopKey("Group",INr,keys,found)) begin
    testf = true;
    if (nonblank(RepSpec.f1)) and (nonblank(RepSpec.f2)) then begin
      if (INr.Code>tocc) then begin found = false; end;
    end;
    if (nonblank(RepSpec.f2)) then begin
      if (RepSpec.f2<>INr.Group) then begin found = false; end;
    end;
    if (nonblank(RepSpec.f1)) then begin
      if (INr.Code<frcc) then begin testf = false; end;
      if (INr.Code>tocc) then begin testf = false; end;
    end;
    if (nonblank(RepSpec.f4)) then begin
      if (SetInSet(RepSpec.f4,INr.DispGroups)==false) then begin testf = false; end;
    end;
    if (found==false) then begin testf = false; end;
    if (testf) then begin
      q = GetINTurnover(INr,RepSpec.f6,RepSpec.LastAcc,"","quant",RepSpec.sStartDate,RepSpec.sEndDate);
      s = GetINTurnover(INr,RepSpec.f6,RepSpec.LastAcc,"","salesexclvat",RepSpec.sStartDate,RepSpec.sEndDate);
      if (RepSpec.ArtMode==0) then begin sort = q; end;
      if (RepSpec.ArtMode==1) then begin sort = -q; end;
      if (RepSpec.ArtMode==2) then begin sort = s; end;
      if ((sort<>0) or (RepSpec.flags[1]==1)) then begin
        RecordNew(SM2r);
        AddToSMSort2(SMr,SM2r,INr,q,s,sort,INr.Group);
      end;
    end;
  end;
  tot = 0;
  rwcnt = MatRowCnt(SMr);
  if (RepSpec.long1>-1) then begin
    if (rwcnt>RepSpec.long1) then begin rwcnt = RepSpec.long1; end;
  end;
  prevgroup = "";
  totsumgroup = 0;
  totgroup = 0;
  for (i=0;i<rwcnt;i=i+1) begin
    
    MatRowGet(SMr,i,SMrw);
    ResetLoop(Inr);
    Inr.Code = SMrw.Objects;
    testf = readFirstmain(Inr,1,true);
    if (prevgroup!=Inr.Group) then begin
      if (totgroup>=0) then begin
        Black_Divider(370,1);
        Startformat(15);
        OutString(20,0,USetStr(2459),false);
        OutValBiDi(420,0,totsumgroup,M4Val,true,460);
        OutValBiDi(1,0,totgroup,M4Val,true,510);
        totgroup = 0;
        totsumgroup = 0;
        Endformat;
        Startformat(2);
        Gray_divider(0,1);
        Endformat;
      end;
      StartFormat(15);
      resetloop(Itr);
      Itr.Code = Inr.Group;
      testf = readfirstmain(ITr,1,true);
      OutString(40,0,Itr.Code,false);
      OUtString(120,0,Itr.Comment,false);
      endformat;
      prevgroup = INr.Group;
    end;

    StartFormat(15);
    OutString(0,"DblINVc",SMrw.Objects,false);
    OutString(100,0,SMrw.Comment,false);
    OutValBiDi(280,0,SMrw.DebVal,M4Val,true,320);

    sum = INr.UPrice1 * SMrw.DebVal;
    OutValBiDi(325,0,INr.InPrice,m4Val,true,365);
    OUtValBiDi(370,0,INr.UPrice1,M4Val,true,410);
    OutValBiDi(420,0,sum,M4Val,true,460);
  //  OutVal(410,0,SMrw.CredVal2,M4Val,true);
    OutValBiDi(1,0,SMrw.CredVal,M4Val,true,510);
    EndFormat;
    tot = tot + SMrw.CredVal;
    totsum = totsum + sum;
    totgroup = totgroup + SMrw.CredVal;
    totsumgroup = totsumgroup  + sum;
  end;
  if (totgroup>=0) then begin
    Black_Divider(370,1);
    Startformat(15);
    OutString(20,0,USetStr(2459),false);
    OutValBiDi(420,0,totsumgroup,M4Val,true,460);
    OutValBiDi(1,0,totgroup,M4Val,true,510);
    totgroup = 0;
    totsumgroup = 0;
    Endformat;
    Startformat(2);
    Gray_divider(0,1);
    Endformat;
  end;
  Black_Divider(0,1);
  StartFormat(15);
  OutValBiDi(420,0,totsum,M4Val,true,460);
  OutValBiDi(1,0,tot,M4Val,true,510);
  EndFormat;
LItemSales2Rn:;  
  EndJob;
  return;
end;

