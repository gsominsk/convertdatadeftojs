external function Boolean SetInSet2(string,string);
external procedure HTItemClass(string,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean CheckPlanShip(string,string);
external function Boolean CheckPlanShipRows(string,record ORVc);
external procedure HTArtSel(string,string,var string);
external procedure HTSort1(Integer, var string);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);

procedure PrintOrdGroupTotal(Integer onlytot,var val groqty,var val grocos,var val grosal,string group)
BEGIN
  record ITVc ITr;
 
  if (onlytot!=1) then begin
    Gray_Divider(0,1);
  end;  
  StartFormat(15);
  OutString(0,0,group,false);
  ITr.Code = group;
  if (ReadFirstMain(ITr,1,true)) then begin
    OutString(2,0,ITr.Comment,false);
  end;  
  OutVal(4,0,groqty,M4UVal,true);
  OutVal(5,0,grocos,M423Val,true);
  OutVal(1,0,grosal,M423Val,true);
  EndFormat;
  if (onlytot!=1) then begin
    StartFormat(15);
    EndFormat;
  end;
  groqty = blankval;
  grocos = blankval;
  grosal = blankval;
  RETURN;
END;

function
//nk Boolean FindItemVals(var LongInt arrcnt,string INInfoCode,Array val INInfoQty,Array val INInfoCost,Array val INInfoSale,var val qty,var val costp,var val salesp,string itemcode)
Boolean FindItemVals(var LongInt arrcnt,var Array string INInfoCode,var Array val INInfoQty,var Array val INInfoCost,var Array val INInfoSale,var val qty,var val costp,var val salesp,string itemcode)
BEGIN
  string 20 tstr;
  LongInt i;
  Boolean res;

  for (i=0; i<=arrcnt; i=i+1) begin
    tstr = INInfoCode[i];
    if (tstr==itemcode) then begin
      qty = INInfoQty[i];
      costp = INInfoCost[i];
      salesp = INInfoSale[i];
      res = true;
      goto LFindItemVals;
    end;
  end;
LFindItemVals:;
  FindItemVals = res;
  RETURN;
END;

procedure AddInfo(var LongInt arrcnt,var Array string INInfoCode,var Array string INInfoCodeOnly,var Array val INInfoQty,
                  var Array val INInfoCost,var Array val INInfoSale,string locINCode,string locINCodeOnly,val locINQty,val locINCost,val locINSale)
BEGIN
  LongInt i;
  Boolean foundf;
  string 20 tstr;

  for(i=0;i<=arrcnt;i=i+1) begin
    tstr = INInfoCode[i];
    if (tstr==locINCode) then begin
      INInfoQty[i] = INInfoQty[i] + locINQty;
      INInfoCost[i] = INInfoCost[i] + locINCost;
      INInfoSale[i] = INInfoSale[i] + locINSale;
      foundf = true;
      goto L22AddInfo;
    end;
  end;
L22AddInfo:;
  if (foundf==false) then begin
    arrcnt = arrcnt + 1;
    INInfoCode[arrcnt] = locINCode;
    INInfoCodeOnly[arrcnt] = locINCodeOnly;
    INInfoQty[arrcnt] = locINQty;
    INInfoCost[arrcnt] = locINCost;
    INInfoSale[arrcnt] = locINSale;
  end;
  RETURN;
END;

procedure BuildItemHandle(record RcVc RepSpec,var Array string INInfoCode,var Array string INInfoCodeOnly,var Array val INInfoQty,
                          var Array val INInfoCost,var Array val INInfoSale,var LongInt arrcnt,Integer UseDiscount)
BEGIN
  record INVc INr;
  record ORVc ORr;
  row ORVc ORrw;
  Boolean TrHs,testf;
  val c,s;
  Integer rwcnt,i;
  Date dt;
  val fr,to1,to2,br1,br2;
  string 20 locINCode,locINCodeOnly;
  val locINQty,locINCost,locINSale;
  string 20 planshp;
  Boolean infound;

  ORr.ShipFlag = 0;
  ORr.SerNr = -1;
  TrHs = true;
  while (LoopKey("ShipFlag",ORr,2,TrHs)) begin
    if (TrHs) then begin
      if (ORr.ShipFlag==1) then begin TrHs = false; end;
    end;
    testf = true;
    if (TrHs==false) then begin testf = false; end;
    if (DateInRange(ORr.OrdDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
      testf = false;
    end;  
    if (nonblank(RepSpec.LastAcc)) then begin
      if (CheckPlanShipRows(RepSpec.LastAcc,ORr)==false) then begin testf = false; end;
    end;
    if (nonblank(RepSpec.ObjStr)) then begin
      if (ORr.OrderClass!=RepSpec.ObjStr) then begin testf = false; end;
    end;
    if (testf) then begin
      if (RepSpec.flags[6]==0) then begin
        dt = CurrentDate;
      end;  
      if (RepSpec.flags[6]==1) then begin
        dt = ORr.OrdDate;
      end;  
      rwcnt = MatRowCnt(ORr);
      for (i = 0 ; i<rwcnt ;i=i+1) begin
        MatRowGet(ORr,i,ORrw);
        if (ORrw.stp==1) then begin
          testf = true;
          if (nonblank(RepSpec.LastAcc)) then begin
            planshp = ORr.PlanShip;
            if (nonblank(ORrw.PlanShipRow)) then begin
              planshp = ORrw.PlanShipRow;
            end;
            if (CheckPlanShip(RepSpec.LastAcc,planshp)==false) then begin 
              testf = false;
            end;
          end;  
          if (testf) then begin
          if ((ORrw.Shipd2==0) or (ORrw.Quant>ORrw.Shipd2)) then begin
            locINQty = 0;
            locINCost = 0;
            locINSale = 0;
            locINCode = ORrw.ArtCode;
            locINCodeOnly = ORrw.ArtCode;
            locINQty = ORrw.Quant - ORrw.Shipd2;
            CalcSum(locINQty,ORrw.Price,ORrw.PriceFactor,ORrw.vRebate,s,UseDiscount);
            GetFullCurncyRate(ORr.CurncyCode,dt,fr,to1,to2,br1,br2);
            locINSale = MulRateToBase1(ORr.CurncyCode,s,fr,to1,to2,br1,br2,DefaultCurRoundOff);
            infound = ReadFirstItem(ORrw.ArtCode,INr,true,false);
            if (infound) then begin
              locINCodeOnly = INr.Code;
              if (RepSpec.UsedOnly!=2) then begin
                locINCode = INr.Code;
              end;
            end;
            if (RepSpec.flags[7]==0) then begin
              if (infound) then begin
                c = INr.InPrice;
              end else begin
                c = ORrw.BasePrice;
              end;  
            end;
            if (RepSpec.flags[7]==1) then begin
              c = ORrw.BasePrice;
            end;
            locINCost = c*locINQty;
            AddInfo(arrcnt,INInfoCode,INInfoCodeOnly,INInfoQty,INInfoCost,INInfoSale,
                    locINCode,locINCodeOnly,locINQty,locINCost,locINSale);
          end;
          end;
        end;
      end;
    end;
  end;
  RETURN;
END;

global
procedure OrdItemRn(record RcVc RepSpec)
BEGIN
  record INVc INr;
  record INVc IN2r;
  string 255 tstr;
  string 20 fromart,toart;
  string 20 frcc,tocc;
  string 20 lastgroup;
  string 60 ckey;
  val oqty,ocos,osal;
  val groqty,grocos,grosal;
  val totoqty,totocos,totosal;
  Boolean TrHs,groupout,testf;
  Integer keys,rw;
  Array string 20 INInfoCode;
  Array string 20 INInfoCodeOnly;
  Array val INInfoQty;
  Array val INInfoCost;
  Array val INInfoSale;
  LongInt arrcnt,i;
  record GeneralOptionBlock GenOptRec;

  BlockLoad(GenOptRec);
  arrcnt = -1;
  groupout = true;
  
  fromart = FirstInRange(RepSpec.f1,20);
  toart = LastInRange(RepSpec.f1,20);
  frcc = FirstInRange(RepSpec.f3,20);
  tocc = LastInRange(RepSpec.f3,20);
  
  StartReportJob(USetStr(7040));
    rw = 1;
    HTArtSel(RepSpec.f1,RepSpec.f3,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
    if (nonblank(RepSpec.f8)) then begin 
      HTItemClass(RepSpec.f8,tstr);
      Header(rw,tstr,1);  
      rw = rw + 1;  
    end;
    if (RepSpec.flags[6]==0) then begin
      tstr = USetStr(2346);
    end;  
    if (RepSpec.flags[6]==1) then begin
      tstr = USetStr(7044);
    end;  
    Header(rw,tstr,0);
    HTSort1(RepSpec.flags[2],tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
    if (RepSpec.flags[7]==0) then begin
      tstr = USetStr(7042);
    end;  
    if (RepSpec.flags[7]==1) then begin
      tstr = USetStr(7043);
    end;  
    Header(rw,tstr,0);
  EndHeader;
  if (RepSpec.UsedOnly==2) then begin
    SetRepCol(2,120);
  end else begin
    SetRepCol(2,90);
  end;
  SetRepCol(3,265);
  SetRepCol(4,340);
  SetRepCol(5,410);
  StartFormat(15);
  if (RepSpec.UsedOnly!=1) then begin
    OutString(0,0,USetStr(2325),false);
    OutString(2,0,USetStr(2326),false);
    OutString(3,0,USetStr(2327),false);
  end else begin
    OutString(0,0,USetStr(2338),false);
    OutString(2,0,USetStr(2326),false);
  end;
  OutString(4,0,USetStr(7041),true);
  OutString(5,0,USetStr(2619),true);
  OutString(1,0,USetStr(7045),true);
  EndFormat;
  groupout = false;
  BuildItemHandle(RepSpec,INInfoCode,INInfoCodeOnly,INInfoQty,INInfoCost,INInfoSale,arrcnt,GenOptRec.UseDiscount);
  if (blank(INInfoCode[0])) then begin goto LOrdItemRn; end;
  if (RepSpec.flags[2]==0) then begin
    INr.Code = fromart;
    ckey = "Code";
    keys = 1;
  end;
  if (RepSpec.flags[2]==1) then begin
    INr.Group = frcc;
    INr.Code = fromart;
    ckey = "Group";
    keys = 2;
  end;
  if (RepSpec.flags[2]==2) then begin
    INr.Name = "";
    ckey = "Name";
    keys = 1;
  end;
  Gray_Divider(0,1);
  TrHs = true;
  while (LoopKey(ckey,INr,keys,TrHs)) begin
    testf = true;
    if (nonblank(RepSpec.AccStr)) then begin
      if (INr.Department!=RepSpec.AccStr) then begin
        testf = false;
      end;
    end;    
    if (INr.ItemType!=1) then begin
      testf = false; 
    end;
    if (RepSpec.flags[2]==0) then begin
      if (TrHs) then begin
        if (nonblank(tocc)) then begin
          if (INr.Group>tocc) then begin
            testf = false;
          end;
        end;
      end;      
      if (TrHs) then begin
        if (nonblank(frcc)) then begin
          if (INr.Group<frcc) then begin
            testf = false;
          end;
        end;
      end;     
      if nonblank(RepSpec.f8) then begin
        if (SetInSet2(RepSpec.f8,INr.DispGroups)==false) then begin
          testf = false;
        end;
      end; 
      if (TrHs) then begin
        if (nonblank(toart)) then begin
          if (INr.Code>toart) then begin          
            TrHs = false;
          end;
        end;
      end;      
    end;
    if (RepSpec.flags[2]==1) then begin
      if (TrHs) then begin
        if (nonblank(tocc)) then begin
          if (INr.Group>tocc) then begin
            TrHs = false;
          end;
        end;
      end;      
      if (TrHs) then begin
        if (nonblank(toart)) then begin
          if (INr.Code>toart) then begin
            testf = false;
          end;
        end;
      end;      
      if (TrHs) then begin
        if (nonblank(fromart)) then begin
          if (INr.Code<fromart) then begin
            testf = false;
          end;
        end;
      end;  
      if nonblank(RepSpec.f8) then begin
        if (SetInSet2(RepSpec.f8,INr.DispGroups)==false) then begin
          testf = false;
        end;
      end;
    end;
    if (RepSpec.flags[2]==2) then begin
      if (TrHs) then begin
        if nonblank(RepSpec.f8) then begin
          if (SetInSet2(RepSpec.f8,INr.DispGroups)==false) then begin
            testf = false;
          end;
        end;
      end;   
      if (TrHs) then begin
        if (nonblank(tocc)) then begin
          if (INr.Group>tocc) then begin
            testf = false;
          end;
        end;
      end;      
      if (TrHs) then begin
        if (nonblank(frcc)) then begin
          if (INr.Group<frcc) then begin
            testf = false;
          end;
        end;
      end;         
      if (TrHs) then begin
        if (nonblank(toart)) then begin
          if (INr.Code>toart) then begin
            testf = false;
          end;          
        end;
      end;      
      if (TrHs) then begin
        if (nonblank(fromart)) then begin
          if (INr.Code<fromart) then begin
            testf = false;
          end;
        end;
      end;      
    end;
    if (TrHs==false) then begin testf = false; end;
    if (testf) then begin
      if (RepSpec.flags[2]==1) then begin
        if (lastgroup!=INr.Group) then begin
          if (groupout) then begin
            PrintOrdGroupTotal(RepSpec.UsedOnly,groqty,grocos,grosal,lastgroup);
            groupout = false;
          end;
          lastgroup = INr.Group;
        end;
      end;
      if (RepSpec.UsedOnly==2) then begin
        for (i=0; i<=arrcnt; i=i+1) begin
          if (INr.Code==INInfoCodeOnly[i]) then begin
            groupout = true;
            totoqty = totoqty + INInfoQty[i];
            totocos = totocos + INInfoCost[i];
            totosal = totosal + INInfoSale[i];
            groqty = groqty + INInfoQty[i];
            grocos = grocos + INInfoCost[i];
            grosal = grosal + INInfoSale[i];
            if (ReadFirstItem(INInfoCode[i],IN2r,true,false)==false) then begin
              RecordCopy(IN2r,INr);
            end;
            StartFormat(15);
            OutString(0,0,INInfoCode[i],false);
            OutString(2,0,IN2r.Name,false);
            OutString(3,0,IN2r.Unittext,false);
            OutVal(4,0,INInfoQty[i],M4UVal,true);
            OutVal(5,0,INInfoCost[i],M423Val,true);
            OutVal(1,0,INInfoSale[i],M423Val,true);
            EndFormat;
          end;
        end;
      end else begin
        if (FindItemVals(arrcnt,INInfoCode,INInfoQty,INInfoCost,INInfoSale,oqty,ocos,osal,INr.Code)) then begin
          groupout = true;
          totoqty = totoqty + oqty;
          totocos = totocos + ocos;
          totosal = totosal + osal;
          groqty = groqty + oqty;
          grocos = grocos + ocos;
          grosal = grosal + osal;
          if (RepSpec.UsedOnly!=1) then begin
            StartFormat(15);
            OutString(0,0,INr.Code,false);
            OutString(2,0,INr.Name,false);
            OutString(3,0,INr.Unittext,false);
            OutVal(4,0,oqty,M4UVal,true);
            OutVal(5,0,ocos,M423Val,true);
            OutVal(1,0,osal,M423Val,true);
            EndFormat;
          end;
        end;
      end;
    end;
  end;
  if (RepSpec.flags[2]==1) then begin
    if (groupout) then begin
      PrintOrdGroupTotal(RepSpec.UsedOnly,groqty,grocos,grosal,lastgroup);
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  OutVal(5,0,totocos,M423Val,true);
  OutVal(1,0,totosal,M423Val,true);
  EndFormat;
LOrdItemRn:;
  EndJob; 
  RETURN;
END;
