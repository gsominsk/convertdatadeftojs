external function Integer TypeOfCurncy(var string,var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external procedure BeginCurncyTotals(var Integer);

external procedure YcToStr(Integer,var string);
/* HaLatv2.hal*/

Procedure AddTransCode(Record MainVc mainr, Record YearBlock YearBlr, Integer rwcnt2, var String TransCode)
begin
  
Row YearBlock YearBlrw;
Integer j;

if (mainr.IntYc == 201) then begin
   TransCode = USetStr(1150);
end;
if (mainr.IntYc == 202) then begin
   TransCode = USetStr(1151);
end;
if (mainr.IntYc == 203) then begin
   TransCode = USetStr(1152);
end;
if (mainr.IntYc == 204) then begin
   TransCode = USetStr(1153);
end;
if (mainr.IntYc == 208) then begin
   TransCode = USetStr(1171);
end;
if (mainr.IntYc == 211) then begin
   TransCode = USetStr(1193);
end;
if (mainr.IntYc == 212) then begin
   TransCode = USetStr(1194);
end;
if (mainr.IntYc <= 200) then begin
   for (j=0; j<rwcnt2; j=j+1) begin
       MatRowGet(YearBlr,j,YearBlrw);
       if ((mainr.TransDate>=YearBlrw.StartDate) and (mainr.TransDate<=YearBlrw.EndDate)) then begin
           TransCode = YearBlrw.YearCode;
       end;
   end;
end;

TransCode = TransCode & "." & mainr.TransNr;

return;
end;

global
procedure CashBookLatRn(record RcVc RepSpec)
BEGIN
  record MainVc mainr;
  record FBVc FBr;
  record SMVc SMr;
  record ObjVc OBr;
  record TRVc TRr;
  record CYBlock CYBr;
  record PMBlock PMBr;
  record YearBlock YearBlr;
  record AccVc Accr;
  row FBVc FBrw;
  row TRVc TRrw;
  row PMBlock PMBrw;
  Date FWBalDate;
  Boolean TrHs,Simulations,printf,testf;
  String 20 objtype, CashAccount;
  String 255 tstr,pmtext;
  String 30 TransCode;
  Integer i,rwcnt,rwcnt2,rw,rowtoprint;
  Val FWBalance,FWBalanceCur,v;
  Val SumDebit, SumCredit;
  Real xx;
  Integer runnr,countin,countout;
  string 255 ycstr;
  Integer curcnt;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer toc,oldstyle;
  string 255 index;

  BlockLoad(CYBr);
  BlockLoad(YearBlr);
  rwcnt2 = MatRowCnt(YearBlr);

  runnr = 1;
  CashAccount = "";
  BlockLoad(PMBr);
  rwcnt = MatRowCnt(PMBr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PMBr,i,PMBrw);
    if (PMBrw.Code == RepSpec.AccStr) then begin
      CashAccount = PMBrw.AccNr;
      pmtext = PMBrw.Comment;
    end;
  end;

  FWBalance = 0;
  FWBalanceCur = 0;
  SumDebit = 0;
  SumCredit = 0;

  if (blank(CashAccount)) then begin 
    StartReportJob(USetStr(9684));
    EndHeader;
    StartFormat(15);
     OutString(0,0,USetStr(1101),false);
    EndFormat;
    GoTo L99; 
  end;

  if (HasLocalization("POL")) then begin//vatPolish
    StartReportJob(USetStr(9684));
      rw = 1;
      tstr = USetStr(9685);
      tstr = tstr & CashAccount;
      Header(rw,tstr,1)
      rw=rw+1;
      if (RepSpec.sStartDate == RepSpec.sEndDate) then begin
        tstr = PackStrDate(RepSpec.sStartDate);  
        tstr = USetStr(8267) & ": " & tstr;
      end else begin
        tstr = PackStrDate(RepSpec.sStartDate);
        tstr = tstr & " : " & PackStrDate(RepSpec.sEndDate);
        tstr = USetStr(8260) & ": " & tstr;
      end;             
      Header(rw,tstr,1)
      rw=rw+1;
      if (nonblank(RepSpec.f1)) then begin
        Header(rw,USetStr(9694) & ": " & RepSpec.f1,1)
        rw=rw+1;      
      end;
    EndHeader;
  end else begin
    StartReportNoHeaderJob(USetStr(9684));
    tstr = USetStr(9685);
    tstr = tstr & CashAccount;
    
    StartFormat(15);
    OutString(0,0,CYBr.CompName,false);
    OutString(1,0,tstr,true);
    EndFormat;
    
    if (RepSpec.sStartDate == RepSpec.sEndDate) then begin
      tstr = PackStrDate(RepSpec.sStartDate);  
      tstr = USetStr(8267) & ": " & tstr;
    end else begin
      tstr = PackStrDate(RepSpec.sStartDate);
      tstr = tstr & " : " & PackStrDate(RepSpec.sEndDate);
      tstr = USetStr(8260) & ": " & tstr;
    end;
                 
    StartFormat(15);
    OutString(0,0,USetStr(9684),false);
    OutString(1,0,tstr,true);
    EndFormat;

    StartFormat(15);
    OutString(0,0,pmtext,false);
    if (nonblank(RepSpec.f1)) then begin
      OutString(1,0,USetStr(9694) & ": " & RepSpec.f1,true);
    end;
    EndFormat;

    StartFormat(9);
    EndFormat;
    Black_Divider(0,1);
  end;  
  
  BeginCurncyTotals(curcnt);

  index = "MainKey";
  if (HasLocalization("POL")) then begin
    index = "MainKeyTime";
  end;
  TrHs = true;
  ResetLoop(mainr);
  mainr.AccNumber = CashAccount;
  while (LoopKey(index,mainr,1,TrHs)) begin
//        if ((mainr.AccNumber <> CashAccount) or (mainr.TransDate > RepSpec.sEndDate)) then begin
        if (mainr.AccNumber <> CashAccount) then begin
           TrHs = false;
        end;
        if ((TrHs==true) and (mainr.TransDate < RepSpec.sStartDate)) then begin
           if (mainr.FileName == "TRVc") then begin
              TRr.Number = mainr.TransNr;
              TRr.TransDate = mainr.TransDate;
              TRr.IntYc = mainr.IntYc;
              if (ReadFirstKey("TransDate",TRr,3,true)) then begin
                  rwcnt = MatRowCnt(TRr);
                  if (rwcnt > 0) then begin
                     For (i=0;i<rwcnt;i=i+1) begin
                       MatRowGet(TRr,i,TRrw);
                       testf = true;
                       if (TRrw.AccNumber!=CashAccount) then begin testf = false; end;
                       if (TRrw.stp!=1) then begin testf = false; end;
                       if (TRrw.ovst!=0) then begin testf = false; end;
                       if (nonblank(RepSpec.ObjStr)) then begin
                         if (SetInSet(RepSpec.ObjStr,TRrw.Objects)==false) then begin
                           testf = false;
                         end;
                       end;
                       if (testf) then begin
                         switch (RepSpec.basecurncy) begin
                           case 1:
                             FWBalance = FWBalance + TRrw.DebVal2 - TRrw.CredVal2;
                             FWBalanceCur = FWBalanceCur + TRrw.CurDebVal - TRrw.CurCredVal;
                           case 2:
                             toc = TypeOfCurncy(TRrw.Curncy,oldstyle);
                             if (nonblank(TRrw.Curncy)) and ((toc==0) or (toc>2)) then begin
                               FWBalance = FWBalance + TRrw.CurDebVal - TRrw.CurCredVal;
                             end else begin
                               FWBalance = FWBalance + TRrw.DebVal - TRrw.CredVal;
                             end;
                           otherwise
                             FWBalance = FWBalance + TRrw.DebVal - TRrw.CredVal;
                             FWBalanceCur = FWBalanceCur + TRrw.CurDebVal - TRrw.CurCredVal;
                         end;
                       end;
                     end;
                  end;
              end;
           end;
           if (mainr.FileName == "FBVc") then begin
             FBr.SerNr = mainr.TransNr;
             if (ReadFirstmain(FBr,1,true)) then begin
               rwcnt = MatRowCnt(FBr);
               if (rwcnt > 0) then begin
                 for (i=0;i<rwcnt;i=i+1) begin
                   MatRowGet(FBr,i,FBrw);
                   if (FBrw.AccNumber == CashAccount) then begin
                     if (nonblank(RepSpec.ObjStr)) then begin
                       if (SetInSet(RepSpec.ObjStr,FBr.Objects)==true) then begin
                         switch (RepSpec.basecurncy) begin
                           case 1:
                             FWBalance = FWBalance + FBrw.Deb2Val - FBrw.Cred2Val;
                             FWBalanceCur = FWBalanceCur + FBrw.CurDebVal - FBrw.CurCredVal;
                           case 2:
                             toc = TypeOfCurncy(FBrw.CurncyCode,oldstyle);
                             if (nonblank(FBrw.CurncyCode)) and ((toc==0) or (toc>2)) then begin
                               FWBalance = FWBalance + FBrw.CurDebVal - FBrw.CurCredVal;
                             end else begin
                               FWBalance = FWBalance + FBrw.DebVal - FBrw.CredVal;
                             end;
                           otherwise
                             FWBalance = FWBalance + FBrw.DebVal - FBrw.CredVal;
                             FWBalanceCur = FWBalanceCur + FBrw.CurDebVal - FBrw.CurCredVal;
                         end;
                       end;
                     end else begin
                       if (blank(FBr.Objects)) then begin
                         switch (RepSpec.basecurncy) begin
                           case 1:
                             FWBalance = FWBalance + FBrw.Deb2Val - FBrw.Cred2Val;
                             FWBalanceCur = FWBalanceCur + FBrw.CurDebVal - FBrw.CurCredVal;
                           case 2:
                             toc = TypeOfCurncy(FBrw.CurncyCode,oldstyle);
                             if (nonblank(FBrw.CurncyCode)) and ((toc==0) or (toc>2)) then begin
                               FWBalance = FWBalance + FBrw.CurDebVal - FBrw.CurCredVal;
                             end else begin
                               FWBalance = FWBalance + FBrw.DebVal - FBrw.CredVal;
                             end;
                           otherwise
                             FWBalance = FWBalance + FBrw.DebVal - FBrw.CredVal;
                             FWBalanceCur = FWBalanceCur + FBrw.CurDebVal - FBrw.CurCredVal;
                         end;
                       end;
                     end;
                   end;
                 end;
               end;
             end;
          end;
        end;
  end;

  StartFormat(15);
  OutString(25,0,USetStr(9695),false);
  OutString(65,0,USetStr(9686),false);
  OutString(120,0,USetStr(9696),false);
  OutString(180,0,USetStr(9687),false);
  OutString(290,0,USetStr(9688),false);
  OutStringAdjustBiDi(380,0,USetStr(3472),true,M4Val,420);
  OutStringAdjustBiDi(430,0,USetStr(3473),true,M4Val,470);
  OutStringAdjustBiDi(480,0,USetStr(3189),true,M4Val,520);
  EndFormat;

  Black_Divider(0,1);
  StartFormat(5);
  EndFormat;

  StartFormat(15);
  OutString(200,0,USetStr(9689),false);
  OutValBiDi(480,0,FWBalance,M4Val,true,520);
  EndFormat;
  if (RepSpec.flags[7]==1) then begin
    StartFormat(15);
    OutValBiDi(480,0,FWBalanceCur,M4Val,true,520);
    EndFormat;
    Accr.AccNumber = CashAccount;
    if (ReadFirstMain(Accr,1,true)) then begin
    end;
    AddCurncyTotals(acur,av1,curcnt,Accr.Curncy,FWBalanceCur);                             
  end;

  Gray_Divider(200,1);

  Simulations = true;
  if (RepSpec.SimVerf==0) then begin
    Simulations = false;
  end;
  index = "MainKey";
  if (HasLocalization("POL")) then begin
    index = "MainKeyTime";
  end;
  TrHs = true;
  mainr.AccNumber = CashAccount;
  mainr.TransDate = RepSpec.sStartDate;
  ResetLoop(mainr);
  while (LoopKey(index,mainr,2,TrHs)) begin
        if ((mainr.TransDate > RepSpec.sEndDate) or (mainr.AccNumber <> CashAccount)) then begin
           TrHs = false;
        end;
        if (TrHs) then begin
              TRr.Number = mainr.TransNr;
              TRr.TransDate = mainr.TransDate;
              TRr.IntYc = mainr.IntYc;
              if (ReadFirstKey("TransDate",TRr,3,true)) then begin
                  printf = true;
//                  if (nonblank(RepSpec.Stext)) then begin
//                      if (In_String(RepSpec.Stext,TRr.Comment,0)==0) then begin
//                                   printf = false;
//                      end;
//                  end;
                  IF printf then begin
                  rwcnt = MatRowCnt(TRr);
                  if (rwcnt > 0) then begin
                     tstr = "";
                     For (i=0;i<rwcnt;i=i+1) begin
                         MatRowGet(TRr,i,TRrw);
                         if ((TRrw.stp == 1) and (TRrw.ovst == 0) and (TRrw.AccNumber <> CashAccount)) then begin
                            if (tstr <> "") then begin
                               tstr = tstr & ",";
                            end;
                            if (Len(tstr)<60) then begin
                              tstr = tstr & TRrw.AccNumber;
                            end;
                         end;
                     end;
                     For (i=0;i<rwcnt;i=i+1) begin
                         MatRowGet(TRr,i,TRrw);
                        if ((TRrw.stp == 1) and (TRrw.AccNumber == CashAccount)) then begin
                            printf = true;
                            if (nonblank(RepSpec.ObjStr)) then begin
                                if (SetInSet(RepSpec.ObjStr,TRrw.Objects)==false) then begin
                                   printf = false;
                                end;
                            end;
                            if printf then begin
                               if (RepSpec.flags[8] == 1) then begin
                                      AddTransCode(mainr, YearBlr, rwcnt2, TransCode);
                                  end else begin
                                      TransCode = TRr.Number;
                               end;
                               StartFormat(15);
                               OutLongInt(0,0,runnr,false);
                               YcToStr(TRr.IntYc,ycstr);                               
                               OutStringOvst(25,0,ycstr,false,TRrw.ovst);
                               OutStringOvst(65,0,TransCode,false,TRrw.ovst);
                               OutStringOvst(110,0,TRr.TransDate,false,TRrw.ovst);
                               if (Trrw.CredVal > 0) then begin
                                 countout = countout +1;
                               end else begin
                                 countin = countin +1;
                               end;
                               switch (RepSpec.flags[9]) begin
                                 case 0: OutStringOvst(180,0,Left(TRr.Comment,15),false,TRrw.ovst);
                                 case 1: OutStringOvst(180,0,TRr.Comment,false,TRrw.ovst);
                                 case 2: OutStringOvst(180,0,Left(TRr.Comment,15),false,TRrw.ovst);
                               end;
                               OutStringOvst(290,0,tstr,false,TRrw.ovst);
                               switch (RepSpec.basecurncy) begin
                                 case 1:
                                   OutValOvstBiDi(380,0,TRrw.DebVal2,M4Val,true,TRrw.ovst,420);
                                   OutValOvstBiDi(430,0,TRrw.CredVal2,M4Val,true,TRrw.ovst,470);
                                   if (TRrw.ovst==0) then begin
                                     SumDebit = SumDebit + TRrw.DebVal2;
                                     SumCredit = SumCredit + TRrw.CredVal2;
                                   end;
                                 case 2:
                                   toc = TypeOfCurncy(TRrw.Curncy,oldstyle);
                                   if (nonblank(TRrw.Curncy)) and ((toc==0) or (toc>2)) then begin
                                     OutValOvstBiDi(380,0,TRrw.CurDebVal,M4Val,true,TRrw.ovst,420);
                                     OutValOvstBiDi(430,0,TRrw.CurCredVal,M4Val,true,TRrw.ovst,470);
                                     if (TRrw.ovst==0) then begin
                                       SumDebit = SumDebit + TRrw.CurDebVal;
                                       SumCredit = SumCredit + TRrw.CurCredVal;
                                     end;
                                   end else begin
                                     OutValOvstBiDi(380,0,TRrw.DebVal,M4Val,true,TRrw.ovst,420);
                                     OutValOvstBiDi(430,0,TRrw.CredVal,M4Val,true,TRrw.ovst,470);
                                     if (TRrw.ovst==0) then begin
                                       SumDebit = SumDebit + TRrw.DebVal;
                                       SumCredit = SumCredit + TRrw.CredVal;
                                     end;
                                   end;
                                 otherwise
                                   OutValOvstBiDi(380,0,TRrw.DebVal,M4Val,true,TRrw.ovst,420);
                                   OutValOvstBiDi(430,0,TRrw.CredVal,M4Val,true,TRrw.ovst,470);
                                   if (TRrw.ovst==0) then begin
                                     SumDebit = SumDebit + TRrw.DebVal;
                                     SumCredit = SumCredit + TRrw.CredVal;
                                   end;
                               end;
                               if (TRrw.ovst==0) then begin
                                 OutValBiDi(480,0,FWBalance + SumDebit - SumCredit,M4Val,true,520);
                               end;  
                               EndFormat;
                               runnr = runnr + 1;
                               printf = false;
                               tstr = "";
                               if ((RepSpec.flags[5]==1) and nonblank(TRrw.Objects)) then begin
                                  tstr = TRrw.Objects;
                                  printf = true;
                               end;
                               if ((RepSpec.flags[1]==1) and nonblank(TRr.RefStr)) then begin
                                  if (tstr <> "") then begin
                                     tstr = tstr & "/";
                                  end;
                                  tstr = tstr & TRr.RefStr;
                                  printf = true;
                               end;
                               if (RepSpec.flags[7]==1) then begin
                                  if (nonblank(TRrw.CurDebVal)) then begin
                                     if (tstr <> "") then begin
                                         tstr = tstr & "/";
                                     end;
                                     tstr = tstr &TRrw.CurDebVal;
                                     tstr = tstr & TRrw.Curncy;
                                     printf = true;
                                  end;
                                  if (nonblank(TRrw.CurCredVal)) then begin
                                     if (tstr <> "") then begin
                                         tstr = tstr & "/";
                                     end;
                                     tstr = tstr & TRrw.CurCredVal;
                                     tstr = tstr & TRrw.Curncy;
                                     printf = true;
                                  end;
                                  v = TRrw.CurDebVal-TRrw.CurCredVal;
                                  if (v==0) and blank(TRrw.Curncy) then begin                                    
                                    v = TRrw.DebVal-TRrw.CredVal;
                                  end;
                                  AddCurncyTotals(acur,av1,curcnt,TRrw.Curncy,v);                             
                               end;
                               if printf then begin
                                  StartFormat(15);
                                  OutString(480,0,tstr,true);
                                  EndFormat;
                               end;
                            end;
                         end;
                     end;
                  end;
                  END;
              end;
        end;
  end;

  Gray_Divider(200,1);

  StartFormat(15);
  OutString(200,0,USetStr(7326),false);
  OutValBiDi(380,0,SumDebit,M4Val,true,420);
  OutValBiDi(430,0,SumCredit,M4Val,true,470);
  EndFormat;

  StartFormat(10);
  EndFormat;

  StartFormat(15);
  OutString(200,0,USetStr(9689),false);
  OutValBiDi(480,0,FWBalance,M4Val,true,520);
  EndFormat;

  StartFormat(15);
  OutString(200,0,USetStr(3194),false);
  OutValBiDi(480,0,(SumDebit - SumCredit),M4Val,true,520);
  EndFormat;

  StartFormat(15);
  OutString(200,0,USetStr(9691),false);
  OutValBiDi(480,0,(FWBalance + SumDebit - SumCredit),M4Val,true,520);
  EndFormat;

  if (RepSpec.flags[7]==1) then begin
    PrintCurncyTotals(acur,av1,av2,av3,curcnt,480,-1,-1,320,false,RepSpec.PocketPC);
  end;

  StartFormat(20);
  EndFormat;

  StartFormat(15);
  OutString(200,0,USetStr(10532),false);
  OutLongInt(400,0,countin,true);
  EndFormat;
  StartFormat(15);
  OutString(200,0,USetStr(10533),false);
  OutLongInt(400,0,countout,true);
  EndFormat;

  StartFormat(20);
  EndFormat;

  StartFormat(15);
  OutString(150,0,USetStr(9692),false);
  OutString(320,0,USetStr(9693),false);
  EndFormat;

  Black_Divider(220,300);
  Black_Divider(370,450);

  StartFormat(15);
  OutString(235,0,USetStr(9231),false);
  OutString(385,0,USetStr(9231),false);
  EndFormat;
L99:;
  EndJob;
  RETURN;
END;


