external function val MulWithRateToBase1(var string,Date,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Integer GetIntYc(Date);
external procedure BeginCurncyTotals(var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external procedure HT2Per(Date,Date,var string);

Function
Boolean GetNextRecord(Boolean moreloop,var string code,var string name,var string vatno,var string lastvatno,var Integer curreg)
begin
  record CUVc CUr;
  record CUVc VEr;
  Boolean foundf;
  Boolean res;
  Boolean foundone;
  string 200 cuvat,vevat;
  
  foundone = false;
  res = true;
  cuvat = "ZZZZZZZZZZZZ";
  vevat = "ZZZZZZZZZZZZ";

  foundf = true;
  CUr.VATNr = lastvatno;
  while(LoopKey("VATNr",CUr,1,foundf)) begin
    if ((CUr.VATNr<>"") and ((lastvatno<CUr.VATNr) or (lastvatno==""))) then begin
      foundf = false;
      foundone = true;
      cuvat = CUr.VATNr;
    end;
  end;
  foundf = true;
  VEr.VATNr = lastvatno;
  while(LoopKey("VATNr",VEr,1,foundf)) begin
    if ((VEr.VATNr<>"") and ((curreg==1) or (lastvatno<VEr.VATNr) or (lastvatno==""))) then begin
      foundf = false;
      foundone = true;
      vevat = VEr.VATNr;
    end;
  end;
  if (foundone==false) then begin res = false; end;
  if ((lastvatno=="") and (curreg==2)) then begin res = false; end;
  if (moreloop==false) then begin res = false; end;
  if (res) then begin
    if (cuvat<=vevat) then begin
      curreg = 1;
      lastvatno = cuvat;
      code = CUr.Code;
      name = CUr.Name;
      vatno = CUr.VATNr;
    end else begin
      curreg = 2;
      lastvatno = vevat;
      code = VEr.Code;
      name = VEr.Name;
      vatno = VEr.VATNr;
    end;
  end;
  GetNextRecord = res;
  return;
end;

procedure PrintCustHist(var array string acur,var array val av1,var array val av2,var Integer curcnt,Date sd,Date ed,string code,string name,string vatno,var val dtot,var val ctot)
begin
  record IPrsVc IPrsr;
  record IVVc IVr;
  record IPVc IPr;
  record PurgeTRVc PurgeTRr;
  record TRVc TRr;
  record CLInVc CLInr;
  record CredManVc CredManr;
  row IPVc IPrw;
  row TRVc TRrw;
  row CLInVc CLInrw;
  Integer i,rwcnt;
  Boolean foundf;
  Boolean firstf;
  string 20 curncy;
  val t,t2;
  
  foundf = true;
  firstf = true;
  IPrsr.CustCode = code;
  IPrsr.CustDate = sd;
  while (LoopMain(IPrsr,2,foundf)) begin
    if (IPrsr.CustCode<>code) then begin foundf = false; end;
    if (IPrsr.CustDate>ed) then begin foundf = false; end;
    if (foundf) then begin
      t = 0;
      if (firstf) Then begin
        StartFormat(15);
        OutString(0,0,vatno,false);
        OutString(2,0,USetStr(9402),false);
        OutString(3,0,code,false);
        OutString(4,0,name,false);
        EndFormat;
        firstf = false;
      end;
      if (IPrsr.TransType==kIPrsTransTypeInvoice) then begin
        IVr.SerNr = IPrsr.TransNr;
        if (ReadFirstMain(IVr,1,true)) then begin
          if (IVr.Invalid==0) then begin
            if (IPrsr.TransNr<>IPrsr.IVNr) then begin
              if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                t = -IVr.Sum4;
              end;
            end else begin
              t = IVr.Sum4;
            end;
            curncy = IVr.CurncyCode;
          end;
          StartFormat(15);
          OutString(20,0,USetStr(1150) & "." & IPrsr.TransNr,false);
          OutDate(6,0,IPrsr.CustDate,false);
          OutString(7,0,IPrsr.AccNr,false);
          if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
            OutString(8,0,USetStr(1150) & "." & IPrsr.IVNr,false);
          end;
          if (t>0) then begin
            if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
              t2 = -t;
            end else begin
              t2 = BlankVal;
            end;
          end else begin
            if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
              t = -t2;
            end else begin
              t2 = t;
              t = BlankVal;
            end;
          end;
          OutVal(5,0,t,M4DVal,true);
          OutVal(9,0,t2,M4CVal,true);
          OutString(1,0,curncy,true);
          EndFormat;
        end;
      end;
      if (IPrsr.TransType==kIPrsTransTypeReceipt) then begin
        IPr.SerNr = IPrsr.TransNr;
        if (ReadFirstMain(IPr,1,true)) then begin
          if (IPr.RejectedFlag==0) then begin
            rwcnt = MatRowCnt(IPr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(IPr,i,IPrw);
              if ((IPrw.ovst==0)) then begin
                if (IPrw.InvoiceNr==IPrsr.IVNr) then begin
                  if (IPrw.stp==1) then begin
                    if (IPrw.PayDate==IPrsr.CustDate) then begin
                      t = t - IPrw.InvVal;
                      curncy = IPrw.InvCurncy;
                    end;    
                  end;    
                end;    
              end;    
            end;    
            StartFormat(15);
            OutString(20,0,USetStr(1151) & "." & IPrsr.TransNr,false);
            OutDate(6,0,IPrsr.CustDate,false);
            OutString(7,0,IPrsr.AccNr,false);
            OutString(8,0,USetStr(1150) & "." & IPrsr.IVNr,false);
            if (t>0) then begin
              t2 = BlankVal;
            end else begin
              t2 = t;
              t = BlankVal;
            end;
            OutVal(5,0,t,M4DVal,true);
            OutVal(9,0,t2,M4CVal,true);
            OutString(1,0,curncy,true);
            EndFormat;
          end;    
        end;
      end;
      if (IPrsr.TransType==kIPrsTransTypePurgeNLTransaction) then begin
        PurgeTRr.Number = IPrsr.TransNr;
        PurgeTRr.IntYc = GetIntYc(IPrsr.TransDate);
        PurgeTRr.TransRow = IPrsr.TransRow;
        if (ReadFirstMain(PurgeTRr,3,true)) then begin
          if (PurgeTRr.SerNr==IPrsr.IVNr) then begin
            t = PurgeTRr.CurDebVal - PurgeTRr.CurCredVal;
            if ((PurgeTRr.CurDebVal==0) and (PurgeTRr.CurCredVal==0)) then begin
              t = PurgeTRr.DebVal - PurgeTRr.CredVal;
            end;  
          end;
          StartFormat(15);
          OutString(20,0,StrTRCode(PurgeTRr.IntYc) & "." & IPrsr.TransNr,false);
          OutDate(6,0,IPrsr.CustDate,false);
          OutString(7,0,IPrsr.AccNr,false);
          OutString(8,0,USetStr(1150) & "." & IPrsr.IVNr,false);
          if (t>0) then begin
            t2 = BlankVal;
          end else begin
            t2 = t;
            t = BlankVal;
          end;
          OutVal(5,0,t,M4DVal,true);
          OutVal(9,0,t2,M4CVal,true);
          OutString(1,0,curncy,true);
          EndFormat;
        end;
      end;
      if (IPrsr.TransType==kIPrsTransTypeNLTransaction) then begin
        TRr.Number = IPrsr.TransNr;
        TRr.IntYc = GetIntYc(IPrsr.TransDate);
        if (ReadFirstMain(TRr,2,true)) then begin
          rwcnt = MatRowCnt(TRr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(TRr,i,TRrw);
            if (TRrw.ovst==0) then begin
              if (TRrw.stp==1) then begin
                if (TRrw.SerNr==IPrsr.IVNr) then begin
                  t = TRrw.CurDebVal - TRrw.CurCredVal;
                  if ((TRrw.CurDebVal==0) and (TRrw.CurCredVal==0)) then begin
                    t = TRrw.DebVal - TRrw.CredVal;
                  end;  
                end;
              end;
            end;
          end;
          StartFormat(15);
          OutString(20,0,StrTRCode(TRr.IntYc) & "." & IPrsr.TransNr,false);
          OutDate(6,0,IPrsr.CustDate,false);
          OutString(7,0,IPrsr.AccNr,false);
          OutString(8,0,USetStr(1150) & "." & IPrsr.IVNr,false);
          if (t>0) then begin
            t2 = BlankVal;
          end else begin
            t2 = t;
            t = BlankVal;
          end;
          OutVal(5,0,t,M4DVal,true);
          OutVal(9,0,t2,M4CVal,true);
          OutString(1,0,curncy,true);
          EndFormat;
        end;
      end;
      if (IPrsr.TransType==kIPrsTransTypeCashIn) then begin
        CLInr.SerNr = IPrsr.TransNr;
        if (ReadFirstMain(CLInr,1,true)) then begin
          rwcnt = MatRowCnt(CLInr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(CLInr,i,CLInrw);
            if (CLInrw.TransNr==IPrsr.IVNr) then begin
              t = -CLInrw.Sum;
            end;
          end;
          StartFormat(15);
          OutString(20,0,USetStr(1193) & "." & IPrsr.TransNr,false);
          OutDate(6,0,IPrsr.CustDate,false);
          OutString(7,0,IPrsr.AccNr,false);
          OutString(8,0,USetStr(1150) & "." & IPrsr.IVNr,false);
          if (t>0) then begin
            t2 = BlankVal;
          end else begin
            t2 = t;
            t = BlankVal;
          end;
          OutVal(5,0,t,M4DVal,true);
          OutVal(9,0,t2,M4CVal,true);
          OutString(1,0,curncy,true);
          EndFormat;
        end;
      end;
      if (IPrsr.TransType==6) then begin
        CredManr.SerNr = IPrsr.TransNr;
        if (ReadFirstMain(CredManr,1,true)) then begin
          if (CredManr.Invalid==0) then begin
            t = t - CredManr.InvSum4;
            curncy = CredManr.CurncyCode;
            StartFormat(15);
            OutString(20,0,USetStr(1635) & "." & IPrsr.TransNr,false);
            OutDate(6,0,IPrsr.CustDate,false);
            OutString(7,0,IPrsr.AccNr,false);
            OutString(8,0,USetStr(1150) & "." & IPrsr.IVNr,false);
            if (t>0) then begin
              t2 = BlankVal;
            end else begin
              t2 = t;
              t = BlankVal;
            end;
            OutVal(5,0,t,M4DVal,true);
            OutVal(9,0,t2,M4CVal,true);
            OutString(1,0,curncy,true);
            EndFormat;
          end;    
        end;
      end;
      dtot = dtot + t;
      ctot = ctot + t2;
      AddCurncyTotals(acur,av1,curcnt,curncy,t);
      AddCurncyTotals(acur,av2,curcnt,curncy,-t2);
    end;
  end;
  return;
end;

procedure PrintSuppHist(var array string acur,var array val av1,var array val av2,var Integer curcnt,Date sd,Date ed,string code,string name,string vatno,var val dtot,var val ctot)
begin
  record OPrsVc OPrsr;
  record VIVc VIr;
  record OPVc OPr;
  record PurgeTRVc PurgeTRr;
  record TRVc TRr;
  row OPVc OPrw;
  row TRVc TRrw;
  record CLOutVc CLOutr;
  row CLOutVc CLOutrw;
  Integer i,rwcnt;
  Boolean foundf;
  Boolean firstf;
  string 20 curncy;
  string 20 account;
  val t,t2;
  
  foundf = true;
  firstf = true;
  OPrsr.VECode = code;
  OPrsr.TransDate = sd;
  while (LoopMain(OPrsr,2,foundf)) begin
    if (OPrsr.VECode<>code) then begin foundf = false; end;
    if (OPrsr.TransDate>ed) then begin foundf = false; end;
    if (foundf) then begin
      t = 0;
      if (firstf) Then begin
        StartFormat(15);
        OutString(0,0,vatno,false);
        OutString(2,0,USetStr(9403),false);
        OutString(3,0,code,false);
        OutString(4,0,name,false);
        EndFormat;
        firstf = false;
      end;
      if (OPrsr.TransType==0) then begin
        VIr.SerNr = OPrsr.TransNr;
        if (ReadFirstMain(VIr,1,true)) then begin
          if (VIr.Invalid==0) then begin
            if (OPrsr.TransNr<>OPrsr.VINr) then begin
              if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                t = VIr.PayVal;
              end;
            end else begin
              t = -VIr.PayVal;
            end;
            curncy = VIr.CurncyCode;
          end;
          StartFormat(15);
          OutString(20,0,USetStr(1152) & "." & OPrsr.TransNr,false);
          OutDate(6,0,OPrsr.TransDate,false);
          OutString(7,0,VIr.APAcc,false);
          if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
            OutString(8,0,USetStr(1150) & "." & OPrsr.VINr,false);
          end;
          if (t>0) then begin
            t2 = BlankVal;
          end else begin
            t2 = t;
            t = BlankVal;
          end;
          OutVal(5,0,t,M4DVal,true);
          OutVal(9,0,t2,M4CVal,true);
          OutString(1,0,curncy,true);
          EndFormat;
          dtot = dtot + MulRateToBase1(curncy,t,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
          ctot = ctot + MulRateToBase1(curncy,t2,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
        end;
      end;
      if (OPrsr.TransType==1) then begin
        OPr.SerNr = OPrsr.TransNr;
        if (ReadFirstMain(OPr,1,true)) then begin
          if ((OPr.OrderedFlag!=0) and (OPr.RejectedFlag==0)) then begin
            rwcnt = MatRowCnt(OPr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(OPr,i,OPrw);
              if ((OPrw.ovst==0)) then begin
                if (OPrw.VISerNr==OPrsr.VINr) then begin
                  if (OPrw.stp==1) then begin
                    t = t + OPrw.PInvVal;
                    curncy = OPrw.PInvCurncy;
                    VIr.SerNr = OPrw.VISerNr;
                    if (ReadFirstMain(VIr,1,true)) then begin
                      account = VIr.APAcc;
                    end;
                  end;    
                end;    
              end;    
            end;    
            StartFormat(15);
            OutString(20,0,USetStr(1153) & "." & OPrsr.TransNr,false);
            OutDate(6,0,OPrsr.TransDate,false);
            OutString(7,0,account,false);
            OutString(8,0,USetStr(1152) & "." & OPrsr.VINr,false);
            if (t>0) then begin
              t2 = BlankVal;
            end else begin
              t2 = t;
              t = BlankVal;
            end;
            OutVal(5,0,t,M4DVal,true);
            OutVal(9,0,t2,M4CVal,true);
            OutString(1,0,curncy,true);
            EndFormat;
            dtot = dtot + MulWithRateToBase1(curncy,OPr.TransDate,t,DefaultCurRoundOff);
            ctot = ctot + MulWithRateToBase1(curncy,OPr.TransDate,t2,DefaultCurRoundOff);
          end;    
        end;
      end;
      if (OPrsr.TransType==kOPrsTransTypePurgeNLTransaction) then begin
        PurgeTRr.Number = OPrsr.TransNr;
        PurgeTRr.IntYc = GetIntYc(OPrsr.TransDate);
        PurgeTRr.TransRow = OPrsr.TransRow;
        if (ReadFirstMain(PurgeTRr,3,true)) then begin
          if (PurgeTRr.SerNr==OPrsr.VINr) then begin
            t = PurgeTRr.CurDebVal - PurgeTRr.CurCredVal;
            if ((PurgeTRr.CurDebVal==0) and (PurgeTRr.CurCredVal==0)) then begin
              t = PurgeTRr.DebVal - PurgeTRr.CredVal;
              account = PurgeTRr.AccNumber; /* Not 100% but good enough */
            end;  
            dtot = dtot + PurgeTRr.DebVal - PurgeTRr.CredVal;
          end;
          StartFormat(15);
          OutString(20,0,StrTRCode(PurgeTRr.IntYc) & "." & OPrsr.TransNr,false);
          OutDate(6,0,OPrsr.TransDate,false);
          OutString(7,0,account,false);
          OutString(8,0,USetStr(1152) & "." & OPrsr.VINr,false);
          if (t>0) then begin
            t2 = BlankVal;
          end else begin
            t2 = t;
            t = BlankVal;
          end;
          OutVal(5,0,t,M4DVal,true);
          OutVal(9,0,t2,M4CVal,true);
          OutString(1,0,curncy,true);
          EndFormat;
        end;
      end;
      if (OPrsr.TransType==kOPrsTransTypeNLTransaction) then begin
        TRr.Number = OPrsr.TransNr;
        TRr.IntYc = GetIntYc(OPrsr.TransDate);
        if (ReadFirstMain(TRr,2,true)) then begin
          rwcnt = MatRowCnt(TRr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(TRr,i,TRrw);
            if (TRrw.ovst==0) then begin
              if (TRrw.stp==1) then begin
                if (TRrw.SerNr==OPrsr.VINr) then begin
                  t = TRrw.CurDebVal - TRrw.CurCredVal;
                  if ((TRrw.CurDebVal==0) and (TRrw.CurCredVal==0)) then begin
                    t = TRrw.DebVal - TRrw.CredVal;
                    account = TRrw.AccNumber; /* Not 100% but good enough */
                  end;  
                  dtot = dtot + TRrw.DebVal - TRrw.CredVal;
                end;
              end;
            end;
          end;
          StartFormat(15);
          OutString(20,0,StrTRCode(TRr.IntYc) & "." & OPrsr.TransNr,false);
          OutDate(6,0,OPrsr.TransDate,false);
          OutString(7,0,account,false);
          OutString(8,0,USetStr(1152) & "." & OPrsr.VINr,false);
          if (t>0) then begin
            t2 = BlankVal;
          end else begin
            t2 = t;
            t = BlankVal;
          end;
          OutVal(5,0,t,M4DVal,true);
          OutVal(9,0,t2,M4CVal,true);
          OutString(1,0,curncy,true);
          EndFormat;
        end;
      end;
      if (OPrsr.TransType==3) then begin
        CLOutr.SerNr = OPrsr.TransNr;
        if (ReadFirstMain(CLOutr,1,true)) then begin
          rwcnt = MatRowCnt(CLOutr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(CLOutr,i,CLOutrw);
            if (CLOutrw.Type==2) then begin
              if (CLOutrw.TransNr==OPrsr.VINr) then begin
                t = CLOutrw.Sum;
              end;
            end;
          end;
          StartFormat(15);
          OutString(20,0,USetStr(1194) & "." & OPrsr.TransNr,false);
          OutDate(6,0,OPrsr.TransDate,false);
          OutString(7,0,account,false);
          OutString(8,0,USetStr(1152) & "." & OPrsr.VINr,false);
          if (t>0) then begin
            t2 = BlankVal;
          end else begin
            t2 = t;
            t = BlankVal;
          end;
          OutVal(5,0,t,M4DVal,true);
          OutVal(9,0,t2,M4CVal,true);
          OutString(1,0,curncy,true);
          EndFormat;
          dtot = dtot + MulRateToBase1(curncy,t,CLOutr.FrRate,CLOutr.ToRateB1,CLOutr.ToRateB2,CLOutr.BaseRate1,CLOutr.BaseRate2,DefaultCurRoundOff);
          ctot = ctot + MulRateToBase1(curncy,t2,CLOutr.FrRate,CLOutr.ToRateB1,CLOutr.ToRateB2,CLOutr.BaseRate1,CLOutr.BaseRate2,DefaultCurRoundOff);
        end;
      end;      
      AddCurncyTotals(acur,av1,curcnt,curncy,t);
      AddCurncyTotals(acur,av2,curcnt,curncy,-t2);
    end;
  end;
  return;
end;

global
procedure CUVERn(record RcVc RepSpec)
begin
  String 20 afr,ato;
  String 60 lastvatno;
  String 100 code,name,vatno;
  String 100 tcode,tname,tvatno;
  String 60 tlastvatno;
  Integer tcurreg;
  Boolean foundf,sumcuandve;
  Integer curreg;
  Integer rw;
  val dtot,ctot,debv,credv,debvve,credvve;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt;

  rw = 1;
  curreg = 0;
  sumcuandve = false;
  dtot = 0; ctot = 0;
  afr = FirstInRange(RepSpec.f1,20);
  ato = LastInRange(RepSpec.f1,20);
//  lastvatno = afr; not good at all, no chance to work
  StartReportJob(USetStr(9380));
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,code);
  Header(rw,code,1);
  rw = rw + 1;
  EndHeader;
  SetRepCol(2,180);
  SetRepCol(3,240);
  SetRepCol(4,300);
  SetRepCol(5,370);
  SetRepCol(6,100);
  SetRepCol(7,160);
  SetRepCol(8,220);
  SetRepCol(9,450);
  StartFormat(15);
  OutString(0,0,USetStr(9381),false);
  OutString(2,0,USetStr(9382),false);
  OutString(3,0,USetStr(9383),false);
  OutString(4,0,USetStr(9384),false);
  EndFormat;
  StartFormat(15);
  OutString(20,0,USetStr(9385),false);
  OutString(6,0,USetStr(9386),false);
  OutString(7,0,USetStr(9387),false);
  OutString(8,0,USetStr(9388),false);
  OutString(5,0,USetStr(9389),true);
  OutString(9,0,USetStr(9400),true);
  OutString(1,0,USetStr(9401),true);
  EndFormat;
  Black_Divider(0,1);
  BeginCurncyTotals(curcnt);
  foundf = true;
  while(GetNextRecord(foundf,code,name,vatno,lastvatno,curreg)) begin
    if (ato<>"") then begin 
      if (lastvatno>ato) then begin
        foundf = false; 
      end;
    end;
    if (foundf) then begin
      if (sumcuandve==false) then begin
        debv = 0; credv = 0;
      end;
      sumcuandve = false;
      if (curreg==1) then begin
        tcode = code;
        tname = name;
        tvatno = vatno;
        tlastvatno = lastvatno;
        tcurreg = curreg;        
        if (GetNextRecord(true,tcode,tname,tvatno,tlastvatno,tcurreg)) then begin
          if ((lastvatno==tlastvatno) and (tcurreg==2)) then begin
           sumcuandve = true;
          end;
        end;
      end;
      if ((curreg==1) and (RepSpec.flags[1]==1)) then begin
        PrintCustHist(acur,av1,av2,curcnt,RepSpec.sStartDate,RepSpec.sEndDate,code,name,vatno,debv,credv);
      end;
      if ((curreg==2) and (RepSpec.flags[2]==1)) then begin
        PrintSuppHist(acur,av1,av2,curcnt,RepSpec.sStartDate,RepSpec.sEndDate,code,name,vatno,debv,credv);
      end;
      if (sumcuandve==false) then begin
        if ((debv>0) or (credv<0)) then begin
          Gray_Divider(280,480);
          StartFormat(15);
          OutVal(5,0,debv,M4DVal,true);
          OutVal(9,0,credv,M4CVal,true);
          EndFormat;
          StartFormat(15);
          EndFormat;
          Gray_Divider(0,1);
          dtot = dtot + debv;
          ctot = ctot + credv;
        end;
      end;
    end;
  end;
  PrintCurncyTotals(acur,av1,av2,av3,curcnt,5,9,-1,3,true,RepSpec.PocketPC);
  EndJob;
  return;
end;

