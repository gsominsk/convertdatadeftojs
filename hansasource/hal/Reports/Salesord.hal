external procedure HTItemClass(string,var string);
external procedure HTItem(string,var string);
external function Boolean SetInSet2(string,string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external function Boolean HasMultiCurrency();
//external procedure HTOrdStatus(integer, integer, integer, integer,var string);
external procedure HT2Per(Date, Date , var string);
external procedure BeginCurncyTotals(var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external procedure HTDetailLevel(integer, var string);
external procedure HTPrintedf(integer, integer, var string);
external procedure HTCusts(string, string, var string);
external procedure HTSaleMan(string, var string); 

global
function boolean CheckItemGroupClassification(string item,string group,string classification)
begin 
  Boolean res;
  record INVc INr;
  string 5 frgroup,togroup;
   
  frgroup = FirstInRange(group,5);
  togroup = LastInRange(group,5);

  res = true;
  if ((nonblank(group) or nonblank(classification)) and nonblank(item)) then begin
    if (ReadFirstItem(item,INr,true,true)) then begin 
      if (nonblank(group) and ((INr.Group<frgroup) or (INr.Group>togroup))) then begin 
        res = false; 
      end;
      if (nonblank(classification)) then begin
        if (SetInSet2(classification,INr.DispGroups)==false) then begin
          res = false; 
        end;
      end;
    end;
  end;   
  CheckItemGroupClassification = res;     
  return;
end;

procedure HTOrdStatus2(Integer invnotd, Integer finished,Integer pardelv,Integer noti,Integer delnotinv, var string res)
begin
  String 255 t2;
  
  res = "";
  if (invnotd==1) then begin
    t2 = USetStr(4827) & " / " & USetStr(2634);
    res = res & t2;
  end;
  if (finished==1) then begin
    t2 = USetStr(7788);
    if (nonblank(res)) then begin
      res = res & " - ";
    end;
    res = res & t2;
  end;
  if (pardelv==1) then begin
    t2 = USetStr(2635);
    if (nonblank(res)) then begin
      res = res & " - ";
    end;
    res = res & t2;
  end;
  if (noti==1) then begin
    t2 = USetStr(2636);
    if (nonblank(res)) then begin
      res = res & " - ";
    end;
    res = res & t2;
  end;
  if (delnotinv==1) then begin
    t2 = USetStr(2573) & " / " & USetStr(2636);
    if (nonblank(res)) then begin
      res = res & " - ";
    end;
    res = res & t2;
  end;
  return;
end;

procedure HTOrder(LongInt a,LongInt b,var string res)
begin
  if (a==-1 and b==-1) then begin
    res = USetStr(1823);
  end else begin
    if (a==b) then begin
      res = USetStr(1822);
    end else begin
      res = USetStr(1821);
    end;  
    res = res & a;
    if (a<>b) then begin
      res = res & " : ";
      res = res & b;
    end;
  end;
  return;
end;

procedure RepOrder(record ORVc ORp,record RcVc RepSpec,var array string acur,var array val av1,var Integer curcnt,var val TotSum,var val sum4)
begin
  Integer i,rwcnt;
  row ORVc ORrw;
  val sum1,sum3;
  val vatv,tax1;

  if (RepSpec.ArtMode==1) then begin 
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(0,"DblORVc",ORp.SerNr,false);
    OutDate(130,0,ORp.OrdDate,false);
    OutString(220,0,ORp.PayDeal,false);
    if (ORp.TREONr>0) then begin
      OutString(310,0,ORp.TREONr,false);
    end;
    OutDate(410,0,ORp.TREOExpDate,true);
    EndFormat;
    StartFormat(15);
    OutString(50,0,ORp.CustCode,false);
    OutString(200,0,ORp.Addr0,false);
    EndFormat;
    StartFormat(15);
    OutString(50,0,ORp.CustCat,false);
    OutString(200,0,ORp.Addr1,false);
    StartFormat(15);
    EndFormat;
    StartFormat(15);
    OutString(50,0,ORp.OurContact,false);      /* vår referens */
    OutString(200,0,ORp.Addr2,false);
    EndFormat;
    if (nonblank(ORp.Addr3)) then begin
      StartFormat(15);
      OutString(200,0,ORp.Addr3,false);
      EndFormat;
    end;
    if (nonblank(ORp.CustContact)) then begin
      StartFormat(15);
      OutString(200,0,ORp.CustContact,false);      /* er referens */
      EndFormat;
    end;
    if (HasMultiCurrency) then begin
      if (nonblank(ORp.CurncyCode)) then begin
        StartFormat(15);
        OutString(460,0,ORp.CurncyCode,false);
       EndFormat;
      end;
    end;
  end;
  rwcnt = MatRowCnt(ORp);
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(ORp,i,ORrw);
    if (ORrw.stp==1) then begin
      if ((blank(RepSpec.LastAcc)) or (RepSpec.LastAcc==ORrw.ArtCode)) then begin
        if CheckItemGroupClassification(ORrw.ArtCode,RepSpec.f5,RepSpec.f6) then begin 
          if (RepSpec.ArtMode==1) then begin 
            StartFormat(15);
            OutString(20,0,ORrw.ArtCode,false);
            OutString(124,0,ORrw.Quant,true);
//          OutString(180,0,ORrw.Shipd2,false);
//          OutString(230,0,ORrw.Shipd1,false);
//          OutString(280,0,ORrw.Invd,false);
            OutString(130,0,ORrw.Spec,false);
            OutString(340,0,ORrw.Price,true);
            OutString(370,0,ORrw.vRebate,true);
            OutString(460,0,ORrw.Sum,true);
            OutString(480,0,ORrw.VATCode,true);
            EndFormat;
          
          end;
          MulVATIV(ORrw.VATCode,ORrw.Sum,vatv,tax1,ORp.InclVAT,ORp.NoTAXonVAT);
          sum1 = sum1 + ORrw.Sum;
          sum3 = sum3 + vatv;
          sum4 = sum4 + ORrw.Sum + vatv;
          if (ORp.InclVAT>0) then begin
          end;
          TotSum = TotSum + sum4;
        end;
      end;
    end;
  end;
  if (RepSpec.ArtMode==1) then begin 
    Black_Divider(380,460);
    StartFormat(15);
    if (ORp.ExportFlag!=0) then begin
      OutString(20,0,USetStr(2568),false);
    end;
    OutString(100,0,ORp.Objects,false);
    OutString(260,0,sum1,true);
    OutString(360,0,sum3,true);
    OutString(460,0,sum4,true);
    EndFormat;
  end;
  AddCurncyTotals(acur,av1,curcnt,ORp.CurncyCode,sum4);
  return;
end;

global
procedure OrdRn(record RcVc RepSpec)
begin
  record ORVc ORr;
  row ORVc ORrw;
  Boolean TrHs;
  Boolean testf,test2f;
  val iv;
  val TotSum;
  LongInt afr;
  LongInt ato;
  string 255 tstr;
  Integer rw,keys;
  string 20 frc,toc,mykey;
  Integer i,rwcnt;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt;
  vector Boolean vtestf;

  frc = FirstInRange(RepSpec.f2,20);
  toc = LastInRange(RepSpec.f2,20);
  afr = FirstInRange(RepSpec.f1,30);
  ato = LastInRange(RepSpec.f1,30);
  
  if (RepSpec.flags[5] == 0) then begin
    mykey = "SerNr";
    keys = 1;
  end;
  if (RepSpec.flags[5] == 1) then begin
    mykey = "CustCode";
    keys = 1;
  end;
  rw = 1;
  TotSum = 0;
  BeginCurncyTotals(curcnt);
  StartReportJob(USetStr(2561));
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  if (BuildProductCode!="WeHaveInvoices") then begin
    rw = rw + 1;
    HTOrdStatus2(RepSpec.flags[4],RepSpec.flags[3],RepSpec.flags[2],RepSpec.flags[1],RepSpec.flags[9],tstr);
    Header(rw,tstr,0);
  end;
  rw = rw + 1;
  HTOrder(afr,ato,tstr);
  Header(rw,tstr,1);
  if (RepSpec.ArtMode==2) then begin
    tstr = USetStr(5127);
  end else begin
    HTDetailLevel(RepSpec.ArtMode,tstr);
  end;
  Header(rw,tstr,0);
  rw = rw + 1;
  HTPrintedf(RepSpec.flags[6],RepSpec.flags[7],tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f2)) then begin
    HTCusts(frc,toc,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.AccStr)) then begin
    HTSaleMan(RepSpec.AccStr,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f4)) then begin
    tstr = USetStr(2768);
    tstr = tstr & ": " & RepSpec.f4;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  switch (RepSpec.flags[12]) begin
    case 0: tstr = USetStr(18350);
    case 2: tstr = USetStr(18351);
  end;
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.LastAcc)) then begin
    HTItem(RepSpec.LastAcc,tstr);  
    Header(rw,tstr,1);  
    rw = rw + 1;  
  end;    
  if (nonblank(RepSpec.f5)) then begin
    tstr = USetStr(13023) & RepSpec.f5;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f6)) then begin 
    HTItemClass(RepSpec.f6,tstr);
    Header(rw,tstr,1);  
    rw = rw + 1;  
  end;
  EndHeader;
  if ((RepSpec.ArtMode==2) or (RepSpec.ArtMode==0)) then begin
    if (RepSpec.flags[10]==1) then begin
      StartFormat(15);
      OutString(0,0,USetStr(2562),false);
      OutString(60,0,USetStr(2563),false);
      OutString(100,0,USetStr(2564),false);
      OutString(290,0,USetStr(18352),false);
      OutString(350,0,USetStr(18353),false);
      if (HasMultiCurrency) then begin
        OutString(440,0,USetStr(2567),true);
      end else begin
        OutString(1,0,USetStr(2567),true);
      end;
      EndFormat;
    end else begin
      StartFormat(15);
      OutString(0,0,USetStr(2562),false);
      OutString(90,0,USetStr(2563),false);
      OutString(140,0,USetStr(2564),false);
      if (HasMultiCurrency) then begin
        OutString(440,0,USetStr(2567),true);
      end else begin
        OutString(1,0,USetStr(2567),true);
      end;
      EndFormat;
    end;
  end;
  if (RepSpec.ArtMode==1) then begin
    if (RepSpec.flags[10]==1) then begin
      OutString(0,0,USetStr(2562),false);
      OutString(130,0,USetStr(2563),false);
      OutString(310,0,USetStr(18352),false);
      OutString(380,0,USetStr(18353),false);
      EndFormat;
    end else begin
      StartFormat(15);
      OutString(0,0,USetStr(2562),false);
      OutString(130,0,USetStr(2563),false);
      EndFormat;
    end;
  end;
  ORr.SerNr = afr;
  ORr.CustCode = frc;
  if ((RepSpec.ArtMode==2) or (RepSpec.ArtMode==0)) then begin
    Gray_Divider(0,1);
  end;
  TrHs = true;
  while (LoopKey(mykey,ORr,keys,TrHs)) begin
    if (RepSpec.flags[5] == 0) then begin
      if (ato <> -1) then begin
        if (ORr.SerNr > ato) then begin
          TrHs = false;
        end;
      end;
    end;
    if (RepSpec.flags[5] == 1) then begin
      if (toc <> "") then begin
        if (ORr.CustCode > toc) then begin
          TrHs = false;
        end;
      end;
    end;
    if (TrHs) then begin
      testf = false;
      if (RepSpec.flags[4]==1) then begin /* Invoiced not delivered*/
        test2f = false;
        rwcnt = MatRowCnt(ORr);
        for (i=0;i<rwcnt;i=i+1) begin
          if (nonblank(ORrw.ArtCode) and ORrw.Sum!=0) then begin 
            MatRowGet(ORr,i,ORrw);
            if (ORrw.Invd!=ORrw.Quant) then begin
              test2f = false;
              i = rwcnt;
            end else begin
              if (ORrw.Shipd2==ORrw.Quant) then begin
                test2f = false;
              end else begin
                test2f = true;
                i = rwcnt;
              end;
            end;          
          end; 
        end;
        if (test2f) then begin
          testf = test2f;
        end;
/*      
        if (ORr.InvFlag==2) and (ORr.ShipFlag==0) then begin
          testf = true;
        end;
*/        
      end;
      if (RepSpec.flags[13]==1) then begin /* Invoiced part delivered*/
        test2f = false;
        rwcnt = MatRowCnt(ORr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(ORr,i,ORrw);
          if (ORrw.Quant!=0) then begin
            vtestf["rowpartdelivered"] = false;
            vtestf["rowpartinvoiced"] = false;
            if (ORrw.Shipd2!=ORrw.Quant) then begin vtestf["rowpartdelivered"] = true; end;
            if (ORrw.Invd!=0) then begin vtestf["rowpartinvoiced"] = true; end;
            if (vtestf["rowpartdelivered"]==true and vtestf["rowpartinvoiced"]==true) then begin
              test2f = true;
              i = rwcnt;
            end;
          end;
        end;
        if (test2f) then begin
          testf = test2f;
        end;
      end;
      if (RepSpec.flags[3]==1) then begin /* Finished */
        test2f = true;
        rwcnt = MatRowCnt(ORr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(ORr,i,ORrw);
          if (ORrw.Quant!=0) then begin
            vtestf["rowfullydelivered"] = false;
            vtestf["rowfullyinvoiced"] = false;
            if (ORrw.Shipd2==ORrw.Quant) then begin vtestf["rowfullydelivered"] = true; end;
            if (ORrw.Invd==ORrw.Quant) then begin vtestf["rowfullyinvoiced"] = true; end;
            if (vtestf["rowfullydelivered"]==false or vtestf["rowfullyinvoiced"]==false) then begin
              test2f = false;
              i = rwcnt;
            end;
          end;
        end;
        if (test2f) then begin
          testf = test2f;
        end;
/*
        if ((ORr.ShipFlag==1) and (ORr.InvFlag==2)) then begin
          testf = true;
        end;
*/        
      end;
      if (RepSpec.flags[2]!=0) then begin /* Part Shipped */
        test2f = false;
        vtestf["rownotdelivered"] = false;
        rwcnt = MatRowCnt(ORr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(ORr,i,ORrw);
          if (ORrw.Quant!=0) then begin
            if (ORrw.Shipd2!=ORrw.Quant and ORrw.Shipd2>0) then begin vtestf["rownotdelivered"] = true; end;
            if (vtestf["rownotdelivered"]) then begin
              test2f = true;
              i = rwcnt;
            end;
          end;
        end;
        if (test2f) then begin
          testf = test2f;
        end;
      end;
      if (RepSpec.flags[1]!=0) then begin /* Not Invoiced==Open */
        vtestf["rowfullyinvoiced"] = true;
        test2f = false;
        rwcnt = MatRowCnt(ORr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(ORr,i,ORrw);
          if (nonblank(ORrw.ArtCode) and (ORrw.Sum!=0)) then begin 
            if (ORrw.Quant!=0) then begin
              if (ORrw.Invd!=ORrw.Quant) then begin vtestf["rowfullyinvoiced"] = false; end;
              if (vtestf["rowfullyinvoiced"]==false) then begin
                test2f = true;
                i = rwcnt;
              end;
            end;
          end;
        end;
        if (test2f) then begin
          testf = test2f;
        end;
/*      
        if ((ORr.InvFlag==0) or (ORr.InvFlag==1)) then begin
          testf = true;
        end;
*/        
      end;
      if (RepSpec.flags[9]==1) then begin /* Not Invoiced==Open */
        if ((ORr.InvFlag==0) or (ORr.InvFlag==1)) and (ORr.ShipFlag==1) and (ORr.TotQty>0) then begin
          testf = true;
        end;
      end;
      
      if (nonblank(RepSpec.f2)) then begin
        if (ORr.CustCode < frc) then begin
          testf = false;
        end;
        if (ORr.CustCode > toc) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (RepSpec.AccStr <>  ORr.SalesMan) then begin
          testf = false;
        end;
      end;
      /*
      if ((RepSpec.flags[6]==0) and (ORr.Prntdf==1)) then begin
        testf = false;
      end;
      if ((RepSpec.flags[7]==0) and (ORr.Prntdf==0)) then begin
        testf = false;
      end;
      */
      if ((RepSpec.flags[8]==1) and (ORr.Reserved==0)) then begin
        testf = false;
      end;
      if ((ORr.OrdDate<RepSpec.sStartDate) or (ORr.OrdDate > RepSpec.sEndDate)) then begin
        testf = false;
      end;
      if (RepSpec.flags[12]==0) then begin
        if (ORr.Closed!=0) then begin testf = false; end;
      end;
      if (RepSpec.flags[12]==2) then begin
        if (ORr.Closed==0) then begin testf = false; end;
      end;      
      if (nonblank(RepSpec.ObjStr)) then begin
        if (RepSpec.ObjStr <>  ORr.OrderClass) then begin
         testf = false;
        end;
      end;
      if ((nonblank(RepSpec.f4)) and (RepSpec.f4<>ORr.Location)) then begin 
        testf = false; 
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (RepSpec.f3 <> ORr.SalesGroup) then begin
          testf = false;
        end;
      end;
      if (testf) then begin 
        if nonblank(RepSpec.LastAcc) or nonblank(RepSpec.f5) or nonblank(RepSpec.f6) then begin
          testf = false;
          rwcnt = MatRowCnt(ORr);
          for (i = 0 ; i<rwcnt ;i=i+1) begin
            MatRowGet(ORr,i,ORrw);
            if (ORrw.stp==1) and (nonblank(ORrw.ArtCode)) then begin
              if (nonblank(RepSpec.LastAcc)) then begin
                if (ORrw.ArtCode==RepSpec.LastAcc) then begin
                  testf = CheckItemGroupClassification(ORrw.ArtCode,RepSpec.f5,RepSpec.f6);
                  if (testf) then begin 
                    goto L30;
                  end;
                end;
              end else begin
                if (CheckItemGroupClassification(ORrw.ArtCode,RepSpec.f5,RepSpec.f6)) then begin 
                  testf = true;
                  goto L30;
                end;              
              end;
            end;
          end;
       end;
      end;
L30:;

      if (testf) then begin
        if ((RepSpec.ArtMode==0) or (RepSpec.ArtMode==1)) then begin
          iv = ORr.Sum4;
        end;
        if (RepSpec.ArtMode==2) then begin
          if (ORr.InclVAT==0) then begin
            iv = ORr.Sum1;
          end else begin
            iv = ORr.Sum1 - ORr.Sum3;
          end;
        end;
        if (RepSpec.ArtMode==1) or nonblank(RepSpec.LastAcc) or nonblank(RepSpec.f5) or nonblank(RepSpec.f6) then begin
          iv = 0;
          RepOrder(ORr,RepSpec,acur,av1,curcnt,TotSum,iv);
        end else begin
          TotSum = TotSum + iv;
          AddCurncyTotals(acur,av1,curcnt,ORr.CurncyCode,iv);
        end;
        if ((RepSpec.ArtMode==2) or (RepSpec.ArtMode==0)) and (iv!=0) then begin
          if (RepSpec.flags[10]==1) then begin
            StartFormat(15);
            OutString(0,"DblORVc",ORr.SerNr,false);
            OutDate(90,0,ORr.OrdDate,true);
            OutString(100,0,ORr.Addr0,false);
            if (ORr.TREONr>0) then begin
              OutString(290,0,ORr.TREONr,false);
            end;
            OutDate(380,0,ORr.TREOExpDate,true);
            if (HasMultiCurrency) then begin
              OutVal(440,0,iv,M4Val,true);
              OutString(445,0,ORr.CurncyCode,false);
            end else begin
              OutVal(1,0,iv,M4Val,true);
            end;
            EndFormat;
          end else begin
            StartFormat(15);
            OutString(0,"DblORVc",ORr.SerNr,false);
            OutDate(120,0,ORr.OrdDate,true);
            OutString(140,0,ORr.Addr0,false);
            if (HasMultiCurrency) then begin
              OutVal(440,0,iv,M4Val,true);
              OutString(445,0,ORr.CurncyCode,false);
            end else begin
              OutVal(1,0,iv,M4Val,true);
            end;
            EndFormat;
          end;
          Gray_Divider(0,1);
        end;
      end;
    end;
  end;
  if (HasMultiCurrency) then begin
    if (RepSpec.ArtMode==1) then begin
      PrintCurncyTotals(acur,av1,av2,av3,curcnt,460,-1,-1,140,true,RepSpec.PocketPC);
    end else begin
      PrintCurncyTotals(acur,av1,av2,av3,curcnt,440,-1,-1,140,true,RepSpec.PocketPC);
    end;
  end else begin
    if (RepSpec.ArtMode==1) then begin
      PrintCurncyTotals(acur,av1,av2,av3,curcnt,460,-1,-1,140,true,RepSpec.PocketPC);
    end else begin
      PrintCurncyTotals(acur,av1,av2,av3,curcnt,1,-1,-1,140,true,RepSpec.PocketPC);
    end;
  end;
  EndJob;
  return;
end;
