external procedure HT2Per(Date, Date , var string);
external function Boolean IsCancelState(String);
external function boolean IsTDBefore(date,time,date,time);

Function Boolean UpDownSelect(Record RcVc RepSpec,Record JobVc Jobr,var Boolean foundf)
begin 
  Boolean sel;
  Record ResVc Roomr;
  Date vDate;
  
  sel = false;
  if (Jobr.TransDate > RepSpec.sEndDate) then begin
    foundf = false;
  end else begin
    if (not IsCancelState(Jobr.ResStatus)) then begin
      if ((RepSpec.flags[2]==0) or nonblank(Jobr.RequestType)) then begin
        if ((RepSpec.flags[1]==0) or (Jobr.AgreedPrice<>0)) then begin
          if ((RepSpec.f4==Jobr.Type) or (blank(RepSpec.f4))) then begin
            if ((RepSpec.f3==Jobr.RequestType) or (blank(RepSpec.f3))) then begin
              if (nonblank(Jobr.RequestType)) then begin
                sel = true;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  UpDownSelect = sel;
  return;
end;  

procedure JobBubSort40Type(var array Record JobVc Table,Integer TableSize)
begin
  LongInt Run,i;
  Record JobVc Jobr1,Jobr2;

  for (Run=1; Run<=TableSize; Run=Run+1) begin
    for(i=Run+1;i<=TableSize;i=i+1) begin
      Jobr2 = Table[Run];
      Jobr1 = Table[i];
      if (Jobr1.Type < Jobr2.Type) then begin
        Table[i] = Jobr2;
        Table[Run] = Jobr1;
      end;
    end;
  end;  
  return;    
end;

global
procedure UpDownGradeRn(Record RcVc RepSpec)
begin
  Record JobVc Jobr;
  Boolean foundf,skip;
  String 255 tstr;
  Integer rw,maxstay,j,rowcnt;
  Array Record JobVc aJobSerNr;
  Integer acnt;
  val dif,tdif,pr;

  StartReportJob(USetStr(12020));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1; 
  EndHeader;

  tdif = 0;
  SetRepCol(2,45);
  SetRepCol(3,85);
  SetRepCol(4,155);
  SetRepCol(5,210);
  SetRepCol(6,370);
  SetRepCol(7,425);
  SetRepCol(8,480);

  StartFormat(15);
  OutString(6,0,USetStr(12021),true);
  OutString(7,0,USetStr(12021),true);
  EndFormat;    
  StartFormat(15);
  OutString(0,0,USetStr(12022),false);
  OutString(2,0,USetStr(12023),false);
  OutString(3,0,USetStr(12024),false);
  OutString(4,0,USetStr(12025),false);
  OutString(5,0,USetStr(12026),false);
  OutString(6,0,USetStr(12027),true);
  OutString(7,0,USetStr(12028),true);
  OutString(8,0,USetStr(12029),true);
  EndFormat;  
  Gray_Divider(0,1);
  
  acnt = 0;
  foundf = true;
  Jobr.TransDate = RepSpec.sStartDate;
  while LoopKey("TransDate",Jobr,1,foundf) begin

    if UpDownSelect(RepSpec,Jobr,foundf) then begin
      acnt= acnt+1;
      aJobSerNr[acnt]= Jobr;       
    end;
  end;

  JobBubSort40Type(aJobSerNr,acnt);

  for(j=1;j<=acnt;j=j+1) begin
    Jobr = aJobSerNr[j];
    if readfirstmain(Jobr,1,true) then begin
      pr  = Jobr.PLPrice;
      dif = 0;
      if (Jobr.AgreedPrice<>0) then begin
        pr = Jobr.AgreedPrice;
        dif = Jobr.AgreedPrice - Jobr.PLPrice;      
      end;
      tdif = tdif + dif;
      StartFormat(15);
      OutString(0,0,Jobr.Type,false);
      OutString(2,0,Jobr.RequestType,false);
      OutDate(3,0,Jobr.TransDate,false);
      OutLongInt(4,"DblJobVc",Jobr.SerNr,false);
      OutString(5,0,left(Jobr.CUName,25),false);
      Outval(6,0,pr,M4Val,true);
      Outval(7,0,Jobr.PLPrice,M4Val,true);
      Outval(8,0,dif,M4Val,true);
      EndFormat;  
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  Outval(8,0,tdif,M4Val,true);
  EndFormat;  
  
  EndJob;
  return;
end; 

