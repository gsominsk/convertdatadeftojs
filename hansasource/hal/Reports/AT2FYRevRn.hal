#ifdef

external procedure FindFiscalYear(Date,var Date,var Date);
external procedure OneAT2UnitDeprCalculation(Integer,Integer,Integer,Boolean,Date,Date,string,var val,var val,var val,var val,var string,val,val,Boolean);
external procedure GetDepreciationPrcAndDeprPeriod(string,var val,var Integer);
external function Boolean GetInventoryNrWrofDate(string,var Date);


procedure FindRevVal_Column6(string InventoryNr,var val RevCalcValC6)
BEGIN
  record AT2DprVc AT2Dpr;
  
  AT2Dpr.LegalCode = "126/77";
  AT2Dpr.InventoryNr = InventoryNr;
  if (ReadFirstKey("LegalCode",AT2Dpr,2,true)==false) then begin
    AT2Dpr.LegalCode = "20 258";
    AT2Dpr.InventoryNr = InventoryNr;
    if (ReadFirstKey("LegalCode",AT2Dpr,2,true)==false) then begin
    end;
  end;  
  RevCalcValC6 = AT2Dpr.StartVal;
  RETURN;      
END;  
      
procedure FindRevVal_Column7(string InventoryNr,var val RevCalcValC7)
BEGIN
  record AT2DprVc AT2Dpr;
  
  AT2Dpr.LegalCode = "111/88";
  AT2Dpr.InventoryNr = InventoryNr;
  if (ReadFirstKey("LegalCode",AT2Dpr,2,true)==false) then begin
    AT2Dpr.LegalCode = "118-B/86";
    AT2Dpr.InventoryNr = InventoryNr;
    if (ReadFirstKey("LegalCode",AT2Dpr,2,true)==false) then begin
      AT2Dpr.LegalCode = "278/85";
      AT2Dpr.InventoryNr = InventoryNr;
      if (ReadFirstKey("LegalCode",AT2Dpr,2,true)==false) then begin
        AT2Dpr.LegalCode = "399-G/84";
        AT2Dpr.InventoryNr = InventoryNr;
        if (ReadFirstKey("LegalCode",AT2Dpr,2,true)==false) then begin
          AT2Dpr.LegalCode = "143/84";
          AT2Dpr.InventoryNr = InventoryNr;
          if (ReadFirstKey("LegalCode",AT2Dpr,2,true)==false) then begin
            AT2Dpr.LegalCode = "219/82";
            AT2Dpr.InventoryNr = InventoryNr;
            if (ReadFirstKey("LegalCode",AT2Dpr,2,true)==false) then begin
              AT2Dpr.LegalCode = "24/82";
              AT2Dpr.InventoryNr = InventoryNr;
              if (ReadFirstKey("LegalCode",AT2Dpr,2,true)==false) then begin
                AT2Dpr.LegalCode = "430/78";
                AT2Dpr.InventoryNr = InventoryNr;
                if (ReadFirstKey("LegalCode",AT2Dpr,2,true)==false) then begin
                end;        
              end;        
            end;
          end;
        end;
      end;
    end;
  end;  
  RevCalcValC7 = AT2Dpr.StartVal;
  RETURN;      
END;     
 
function
Boolean CheckIfPrinted(record PLDefVc Printedr,string catcode)
BEGIN
  row PLDefVc Printedrw;
  Integer i,rwcnt;
  Boolean res;
  
  res = true;
  rwcnt = MatRowCnt(Printedr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Printedr,i,Printedrw);
    if (Printedrw.ItemCode==catcode) then begin
      res = false;
      i = rwcnt;
    end;
  end;
  CheckIfPrinted = res;
  RETURN;
END;

procedure PrintInventoryNrResult(record RcVc RepSpec,var string motherdesc,string catdesc,Date PurchaseDate,Date StartingDate1,val PurchVal,val StartVal,val dprbef,val dprv,val RevCalcValC6,val RevCalcValC7,val dprrate,val mindprrate)
BEGIN  
  val t,t2;
  
  if (motherdesc!="-111") then begin
    StartFormat(15);
     OutString(0,0,motherdesc,false);
    EndFormat;      
    motherdesc = "-111";
  end;
  StartFormat(15);
   OutString(0,0,catdesc,false);
   OutLongInt(100,0,GetYear(PurchaseDate),true);
   OutLongInt(130,0,GetYear(StartingDate1),true);
   OutVal(160,0,PurchVal,M4Val,true);
   OutVal(190,0,RevCalcValC6,M4Val,true);
   OutVal(210,0,RevCalcValC7,M4Val,true);
   OutVal(240,0,StartVal,M4Val,true);
   OutVal(270,0,dprrate,M4Val,true);
   OutVal(300,0,dprbef,M4Val,true);
   OutVal(330,0,dprrate,M4Val,true);
   OutVal(360,0,dprv,M4Val,true);
   t = dprbef+dprv;
   OutVal(390,0,t,M4Val,true);
   t = StartVal-t;
   OutVal(420,0,t,M4Val,true);
   OutVal(450,0,t,M4Val,true);
   t = mindprrate - dprrate;
   if (t>0) then begin
     OutVal(480,0,t,M4Val,true);
   end;
  EndFormat;
  RETURN;
END;

procedure CalcCategoryRevs(record RcVc RepSpec,string motherdesc,string AT2Code,Integer AcumulateDpr,string catdesc,Integer NewUsedf,Boolean subsidyf,Date FStartDate,Date FEndDate,string frcat,string tocat)
BEGIN
  record AT2DprVc ATDpr;
  record AT2UnitVc ATUnitr;
  Boolean TrHs,testf,found;
  string 30 frinv,toinv;
  Date ed,PurchaseDate,StartingDate;
  val PurchVal,StartVal,t;
  val dprbef,dprv,dprrate,mindprrate;
  val catinvestval,catdprbef,catdprv;
  val RevCalcValC6,RevCalcValC7,catRevCalcValC6,catRevCalcValC7,catPurchVal,catStartVal;
  Boolean minmodelf;
  string 255 tstr;  
  string 20 dmcode,keystr;  
  Integer keys,dprper,mindprper;
  Date laststartdate,wrofdate;
  val dprbef2,dprv2;
  
  if (subsidyf) then begin
    StartFormat(15);
     OutString(0,0,"Subsidy",false);
    EndFormat;  
  end;
  frinv = FirstInRange(RepSpec.f2,30);    
  toinv = LastInRange(RepSpec.f2,30);    
  TrHs = true;
   
  if (subsidyf==false) then begin
    ATDpr.LegalCode = RepSpec.ObjStr;
    ATDpr.AT2Code = AT2Code;
    keys = 1;
    keystr = "LegalCode";      
    if (AcumulateDpr!=0) then begin
      keys = 3;
      keystr = "AT2CodeSDate1";   
    end;        
  end;  
  if (subsidyf) then begin
    ATDpr.LegalCode = RepSpec.ObjStr;
    ATDpr.AT2Code = AT2Code;
    keys = 1;
    keystr = "LegalCode";
  end;    
  while (LoopKey(keystr,ATDpr,keys,TrHs)) begin        
    testf = true;
    if (nonblank(RepSpec.f2)) then begin    
      if (ATDpr.InventoryNr<frinv) then begin
        testf = false;        
      end;
      if (ATDpr.InventoryNr>toinv) then begin
        testf = false;
      end;
    end;           
    ATUnitr.InventoryNr = ATDpr.InventoryNr;   
    if (ReadFirstMain(ATUnitr,1,true)==false) then begin testf = false; end;    
    if (Subsidyf==false) then begin    
      if (ATDpr.AT2Code<>AT2Code) then begin testf = false; end;      
/*
StartFormat(15);
 OutString(0,0,"JJ01",false);
 OutString(100,0,ATDpr.InventoryNr,false);
 if (testf==false) then begin
   OutString(200,0,"test = false",false);
 end;
 if (TrHs==false) then begin
   OutString(200,0,"TrHs = false",false);
 end;
 OutString(300,0,ATDpr.AT2Code,false);
 OutString(400,0,AT2Code,false);
EndFormat;      
*/
      if (ATDpr.LegalCode<>RepSpec.ObjStr) then begin TrHs = false; end;      
      if (ATUnitr.SubsidyVal!=0) then begin testf = false; end;      
      if (NewUsedf==0) then begin
        if (ATUnitr.NewUsedf!=0) then begin testf = false; end;
      end;  
      if (NewUsedf==1) then begin
        if (ATUnitr.NewUsedf==0) then begin testf = false; end;
      end;  
    end else begin    
      if (nonblank(RepSpec.f1)) then begin
        if (ATUnitr.AT2Code<frcat) then begin testf = false; end;
        if (ATUnitr.AT2Code>tocat) then begin testf = false; end;
      end;            
      if (ATUnitr.Subsidyf==0) then begin testf = false; end;
    end; 
    if (GetInventoryNrWrofDate(ATUnitr.InventoryNr,wrofdate)) then begin 
      if (RepSpec.flags[2]==0) then begin
        testf = false;
      end; 
    end else begin
      if (RepSpec.flags[2]==1) then begin
        testf = false;
      end; 
    end;     
    if (TrHs and testf) then begin
      dprbef = blankval;
      dprv = blankval;
      PurchaseDate = ATUnitr.PurchaseDate;
      PurchVal = ATUnitr.PurchVal;
      StartingDate = ATDpr.StartingDate1;
      StartVal = ATDpr.StartVal;
      if (AcumulateDpr!=0) then begin
        if (nonblankdate(laststartdate)) then begin
          if (GetYear(ATDpr.StartingDate1)!=GetYear(laststartdate)) then begin
            PrintInventoryNrResult(RepSpec,motherdesc,catdesc,PurchaseDate,StartingDate,catpurchval,catStartVal,catdprbef,catdprv,catRevCalcValC6,catRevCalcValC7,dprrate,mindprrate);
            catpurchval = blankval;
            catStartVal = blankval;
            catdprbef = blankval;
            catdprv = blankval;
            catRevCalcValC6 = blankval;
            catRevCalcValC7 = blankval;            
          end;
        end;  
      end;
      laststartdate = ATDpr.StartingDate1;
      if (RepSpec.flags[1]==0) then begin    
        dmcode = ATDpr.Model1;
      end;  
      if (RepSpec.flags[1]==1) then begin    
        dmcode = ATDpr.Model2;
      end;  
      catpurchval = catpurchval + ATUnitr.PurchVal;
      catinvestval = catinvestval + ATUnitr.InvestVal;
        
      dprv = 0;
      dprbef= 0;
      if (RepSpec.flags[3]!=0) then begin
      end else begin
      end;  
      found = true;
    end else begin
      found = false;
    end;
    if (found) then begin
      FindRevVal_Column6(ATDpr.InventoryNr,RevCalcValC6);
      FindRevVal_Column7(ATDpr.InventoryNr,RevCalcValC7);      
      GetDepreciationPrcAndDeprPeriod(dmcode,dprrate,dprper);   
      GetDepreciationPrcAndDeprPeriod(ATUnitr.ModelMin,mindprrate,mindprper);
      minmodelf = false;
      if (dprrate<mindprrate) then begin
        minmodelf = true;
      end;  
/*      
      ed = AddDay(ATDpr.StartingDate1,-1);
      ed = AddDay(ed,-GetDay(ed) + DaysInMonth(GetYear(ed),GetMonth(ed)));      
*/
      if (minmodelf) then begin
        if (mindprper==0) then begin
          ed = AddMonth(ed,-1);
          ed = AddDay(ed,-GetDay(ed) + DaysInMonth(GetYear(ed),GetMonth(ed)));      
        end;  
        if (mindprper==2) then begin
          ed = AddYear(FEndDate,-1);
          ed = AddMonth(ed,-GetMonth(ed)+12);
          ed = AddDay(ed,-GetDay(ed) + DaysInMonth(GetYear(ed),GetMonth(ed)));      
        end;  
      end else  begin
        if (dprper==0) then begin
          ed = AddMonth(ed,-1);
          ed = AddDay(ed,-GetDay(ed) + DaysInMonth(GetYear(ed),GetMonth(ed)));      
        end;  
        if (dprper==2) then begin
          ed = AddYear(FEndDate,-1);
          ed = AddMonth(ed,-GetMonth(ed)+12);
          ed = AddDay(ed,-GetDay(ed) + DaysInMonth(GetYear(ed),GetMonth(ed)));      
        end;  
      end;
      OneAT2UnitDeprCalculation(RepSpec.Comparison,1,RepSpec.flags[1],minmodelf,FStartDate,FEndDate,ATDpr.InventoryNr,dprbef,dprv,t,t,tstr,ATDpr.StartVal,ATDpr.ResVal,false);
      if (AcumulateDpr!=0) then begin
        catdprbef = catdprbef + dprbef;
        catdprv = catdprv + dprv;            
        catRevCalcValC6 = catRevCalcValC6 + RevCalcValC6;
        catRevCalcValC7 = catRevCalcValC7 + RevCalcValC7;            
        catPurchVal = catPurchVal + PurchVal;
        catStartVal = catStartVal + StartVal;            
      end else begin      
        PrintInventoryNrResult(RepSpec,motherdesc,ATUnitr.InventoryNr,PurchaseDate,StartingDate,PurchVal,StartVal,dprbef,dprv,RevCalcValC6,RevCalcValC7,dprrate,mindprrate);
      end;
    end;     
  end;
  if (AcumulateDpr!=0) then begin           
     PrintInventoryNrResult(RepSpec,motherdesc,catdesc,PurchaseDate,StartingDate,catpurchval,catStartVal,catdprbef,catdprv,catRevCalcValC6,catRevCalcValC7,dprrate,mindprrate);
  end;
  RETURN;
END; 

procedure RevDoughterCategoryResults(record RcVc RepSpec,record PLDefVc Printedr,string mothercat,string motherdesc,Integer NewUsedf,Date FStartDate,Date FEndDate,string frcat,string tocat)
BEGIN
  record AT2Vc ATCatr;
  record AT2Vc ATCat2r;
  Boolean found,testf;
  row PLDefVc Printedrw;
  Integer rwcnt;

  rwcnt = MatRowCnt(Printedr);
  ClearRow(Printedr,Printedrw,1);
  Printedrw.ItemCode = mothercat;
  MatRowPut(Printedr,rwcnt,Printedrw);   

  ATCatr.AT2Group = mothercat;
  found = true;
  while (LoopKey("AT2Group",ATCatr,1,found)) begin
    testf = true;
    if (ATCatr.AT2Group!=mothercat) then begin found = false; end;
    /*
    if (nonblank(RepSpec.f1)) then begin
      if (ATCatr.Code<frcat) then begin testf = false; end;
      if (ATCatr.Code>tocat) then begin testf = false; end;
    end;  
    */
    /*
        StartFormat(15);
         OutString(0,0,ATCatr.Description,false);
         OutString(100,0,ATCatr.Code,false);
         OutString(200,0,"JJJJJJJ",false);
        EndFormat;    
        */
    if (found and testf) then begin
      ATCat2r.AT2Group = ATCatr.Code;
      if (ReadFirstKey("AT2Group",ATCat2r,1,true)) then begin
        StartFormat(15);
          OutString(0,0,motherdesc,false);
        EndFormat;      
        RevDoughterCategoryResults(RepSpec,Printedr,ATCatr.Code,ATCatr.Description,NewUsedf,FStartDate,FEndDate,frcat,tocat);
      end else begin
        CalcCategoryRevs(RepSpec,motherdesc,ATCatr.Code,ATCatr.AcumulateDpr,ATCatr.Description,NewUsedf,false,FStartDate,FEndDate,frcat,tocat);
        rwcnt = MatRowCnt(Printedr);
        ClearRow(Printedr,Printedrw,1);
        Printedrw.ItemCode = ATCatr.Code;
        MatRowPut(Printedr,rwcnt,Printedrw);
      end;
    end;
  end; 
  RETURN;
END;  

procedure AT2CategoryRevCalculation(record RcVc RepSpec,var val totdprbef,var val totdprv,Integer NewUsedf,Date FStartDate,Date FEndDate,string frcat,string tocat)
BEGIN
  record AT2Vc ATCatr;
  Boolean TrHs,testf,minmodelf;
  record PLDefVc Printedr;
  string 255 tstr;
  
  if (NewUsedf==0) then begin
    tstr = "New Assets";
  end;
  if (NewUsedf==1) then begin
    tstr = "Used Assets";
  end;
  StartFormat(15);
   OutString(0,0,tstr,false);
  EndFormat;

  TrHs = true;
  ATCatr.Code = frcat;
  while (LoopMain(ATCatr,1,TrHs)) begin
    if (nonblank(tocat)) then begin
      if (ATCatr.Code>tocat) then begin TrHs = false; end;
    end;
    testf = CheckIfPrinted(Printedr,ATCatr.Code);
    if (TrHs and testf) then begin 
      RevDoughterCategoryResults(RepSpec,Printedr,ATCatr.Code,ATCatr.Description,NewUsedf,FStartDate,FEndDate,frcat,tocat);
      Gray_Divider(0,1);
      StartFormat(15);
      EndFormat;
    end;    
  end;
  RETURN;
END;  

global
procedure AT2FYRevRn(record RcVc RepSpec)
BEGIN
  val totdprbef,totdprv;
  Date FStartDate,FEndDate;  
  string 10 frcat,tocat;

  StartReportJob(USetStr(10905));
  EndHeader;

  StartFormat(15);
   OutString(0,0,"1",false);
   OutString(100,0,"2",true);
   OutString(130,0,"3",true);
   OutString(160,0,"4",true);
   OutString(190,0,"5",true);
   OutString(210,0,"6",true);
   OutString(240,0,"7",true);
   OutString(270,0,"8",true);
   OutString(300,0,"9",true);
   OutString(330,0,"10",true);
   OutString(360,0,"11",true);
   OutString(390,0,"12",true);
   OutString(420,0,"13",true);
   OutString(450,0,"14",true);
   OutString(480,0,"15",true);
  EndFormat;
  Gray_Divider(0,1);  
  frcat = FirstInRange(RepSpec.f1,10);
  tocat = LastInRange(RepSpec.f1,10);
    
  FindFiscalYear(CurrentDate,FStartDate,FEndDate);  

  AT2CategoryRevCalculation(RepSpec,totdprbef,totdprv,0,FStartDate,FEndDate,frcat,tocat);
  Black_Divider(0,1);
  CalcCategoryRevs(RepSpec,"","",0,"",0,true,FStartDate,FEndDate,frcat,tocat);
  Black_Divider(0,1);
  AT2CategoryRevCalculation(RepSpec,totdprbef,totdprv,1,FStartDate,FEndDate,frcat,tocat);
  Black_Divider(0,1);

  
  Gray_Divider(0,1); 
  EndJob;  
  RETURN;
END;
#endif
