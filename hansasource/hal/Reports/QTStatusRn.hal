external procedure PrintApprovalAcivity(record AcceptanceRulesVc,record ActVc,var Boolean);
external function Boolean ReadAcceptanceRules(Integer,string,var record AcceptanceRulesVc);
external procedure HT2Per(Date, Date , var string);
external procedure PrintAcceptanceActivities(Integer,string,string,string);
external procedure HTLocations(string, string, var string);
external function Boolean WrapAndPrint(Integer,string,Integer);
external procedure HTNr(Integer,Integer,LongInt,LongInt,var string);

global
procedure QTPrintApprovalActivities(record QTVc QTr)
begin
  record ActVc Actr;
  record AcceptanceRulesVc Acptr;
  Integer actnr;
  record RLinkVc RLr;
  Boolean firstf;

  ReadAcceptanceRules(kAcceptanceQT,QTr.CustCode,Acptr);
  actnr = 1;
  while (ReadRecordLink(QTr,actnr,Actr,RLr)) begin
    PrintApprovalAcivity(Acptr,Actr,firstf);      
    actnr = actnr + 1;
  end;
  return;
end;

procedure PrintActivity(record ActVc Actr)
BEGIN
  Integer i,rwcnt;
  row ActVc Actrw;
  
  StartFormat(15);
   OutLongInt(0,"DblActVc",Actr.SerNr,false);
   OutStringID(50,"DblActRec",Actr.TransDate,false,Actr.SerNr);
   OutString(110,0,Actr.ActType,false);
   OutString(160,"DblPersAct",Actr.MainPersons,false);
   OutString(210,0,Actr.Contact,false);
   if (WrapAndPrint(340,Actr.Comment,28)) then begin
     EndFormat;
   end;
  rwcnt = MatRowCnt(Actr);
  for (i=0; i<rwcnt ;i=i+1) begin
    MatRowGet(Actr,i,Actrw);
    StartFormat(15);
    OutString(80,0,Actrw.TextCode,false);
    if (WrapAndPrint(140,Actrw.Text,67)) then begin
      EndFormat;
    end;
  end;
  Gray_Divider(0,1);
  if (rwcnt>1) then begin
    StartFormat(10);
    EndFormat;
  end;
  RETURN;
END;

procedure PrintActivityLinkedActivities(record ActVc Actr)
BEGIN
  record ActVc LinkActr;
  record RLinkVc RLinkr;
  Integer actnr;

  actnr = 1;
  while (ReadRecordLink(Actr,actnr,LinkActr,RLinkr)) begin
    PrintActivity(LinkActr);
    actnr = actnr + 1;
  end;  
  RETURN;
END;

procedure PrintQuotationActivities(record QTVc QTr)
BEGIN
  record ActVc Actr;
  record RLinkVc RLinkr;
  Integer actnr;

  StartFormat(15);
  OutString(50,0,USetStr(6682),false);
  OutString(110,0,USetStr(6687),false);
  OutString(160,0,USetStr(6684),false);
  OutString(210,0,USetStr(6688),false);
  OutString(340,0,USetStr(6685),false);
  EndFormat;
  actnr = 1;
  while (ReadRecordLink(QTr,actnr,Actr,RLinkr)) begin
    PrintActivity(Actr);
    PrintActivityLinkedActivities(Actr);
    actnr = actnr + 1;
  end;  
  RETURN;
END;

procedure PrintQuotation(record QTVc QTr)
BEGIN
  Integer i,rwcnt;
  row QTVc QTrw;
  val totgp,totqt;
  
  rwcnt = MatRowCnt(QTr);
  StartFormat(15);
  OutLongInt(0,"DblQTVc",QTr.SerNr,false);
  switch (QTr.Rejected) begin
    case 1: OutString(80,0,USetStr(11014),false);
    case 2: OutString(80,0,USetStr(11013),false);
  end;
  OutDate(150,0,QTr.QTDate,false);
  OutString(220,0,QTr.CustCode,false);
  OutString(300,0,QTr.Addr0,false);
  OutString(480,0,QTr.PlanShip,true);
  EndFormat;
  if (nonblank(QTr.Addr1)) then begin
    StartFormat(15);
    OutString(300,0,QTr.Addr1,false);
    EndFormat;
  end;
  if (nonblank(QTr.Addr2)) then begin
    StartFormat(15);
    OutString(300,0,QTr.Addr2,false);
    EndFormat;
  end;
  if (nonblank(QTr.Addr3)) then begin
    StartFormat(15);
    OutString(300,0,QTr.Addr3,false);
    EndFormat;
  end;
  StartFormat(10);
  EndFormat;
  StartFormat(15);
  OutString(20,0,USetStr(5582),false);
//  OutString(104,0,USetStr(5501),false);
  OutString(280,0,USetStr(5501),true);
  if (UserCanAction("ViewCostPrice",true)) then begin
    OutString(480,0,USetStr(5401),true);
  end;
  EndFormat;
  Gray_Divider(20,280);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(QTr,i,QTrw);
    if (QTrw.stp==1) then begin
        StartFormat(15);
        OutString(20,0,QTrw.ArtCode,false);
        OutString(104,0,QTrw.Spec,false);
        OutVal(280,0,QTrw.Quant,M4UVal,true);
        if (UserCanAction("ViewCostPrice",true)) then begin
          OutVal(480,0,QTrw.rowGP,M4Val,true);
        end;
        EndFormat;
        totqt = totqt + QTrw.Quant;
        totgp = totgp + QTrw.rowGP;
    end;
  end;
  Gray_Divider(200,480);
  StartFormat(15);
  OutVal(280,0,totqt,M4UVal,true);
  if (UserCanAction("ViewCostPrice",true)) then begin
    OutVal(480,0,totgp,M4Val,true);
  end;
  EndFormat;  
  RETURN;
END;

procedure PrintOrder(record QTVc QTr)
begin
  record ORVc ORr;
  boolean TrHs,firstf;
  val totgp,totsum;
  TrHs = true;
  firstf = true;
  ORr.QuoteNr = QTr.SerNr;
  
  while (LoopKey("QuoteNr",ORr,1,TrHs)) begin
    if (TrHs) then begin
      if (ORr.QuoteNr <> QTr.SerNr) then begin
        TrHs = false;  
      end;
    end;
    if (TrHs) then begin
      if (firstf) then begin
        StartFormat(15);
        EndFormat;
        StartFormat(15);
        OutString(0,0,USetStr(2584),false);
        OutString(80,0,USetStr(2563),false);
        OutString(150,0,USetStr(2638),false);
        if (UserCanAction("ViewCostPrice",true)) then begin
          OutString(400,0,USetStr(2661),true);
        end;
        OutString(1,0,USetStr(2565),true);
        EndFormat;
        Gray_Divider(0,1);
        firstf = false;
      end;
      StartFormat(15);
      OutString(0,"DblORVc",ORr.SerNr,false);
      OutString(80,0,ORr.OrdDate,false);
      OutString(150,0,ORr.PlanShip,false);
      if (UserCanAction("ViewCostPrice",true)) then begin
        OutVal(400,0,ORr.TotGP,M4Val,true);
      end;
      OutVal(1,0,ORr.Sum1,M4Val,true);
      EndFormat;
      totsum = totsum + ORr.Sum1;
      totgp = totgp + ORr.TotGP;
    end;
  end;
  if (totsum <> 0) or (totgp <> 0) then begin
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(150,0,USetStr(4006),false);
    if (UserCanAction("ViewCostPrice",true)) then begin
      OutVal(400,0,totgp,M4Val,true);
    end;
    OutVal(1,0,totsum,M4Val,true);
    EndFormat;
  end;
  StartFormat(15);
  EndFormat;
  return;
end;

global
procedure QTStatusRn(record RcVc RepSpec)
BEGIN
  record QTVc QTr;
  Boolean TrHs,testf;
  LongInt afr,ato;
  string 255 tstr,KeyStr;
  Integer rw;

  afr = FirstInRange(RepSpec.f1,10);
  ato = LastInRange(RepSpec.f1,10);
  StartReportJob(USetStr(11290));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTNr(2689,2690,afr,ato,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTLocations(RepSpec.FirstAcc,RepSpec.FirstAcc,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;
  StartFormat(15);
  OutString(0,0,USetStr(2622),false);
  OutString(150,0,USetStr(2623),false);
  OutString(220,0,USetStr(2624),false);
  OutString(480,0,USetStr(2638),true);
  EndFormat;
  Gray_Divider(0,1);
  
  if ((ato!=-1) or (afr!=-1)) then begin 
    QTr.SerNr = afr;
    KeyStr = "SerNr";
  end else begin
    KeyStr = "QTDate";
    QTr.QTDate = RepSpec.sStartDate;
  end;
  TrHs = true;
  while (LoopKey(KeyStr,QTr,1,TrHs)) begin
    testf = true;
    switch (KeyStr) begin
      case "SerNr": if ((ato!=-1) and (QTr.SerNr>ato)) then begin TrHs = false; end;
    end;
    if (DateInRange(QTr.QTDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin 
      switch (KeyStr) begin
        case "SerNr": testf = false;
        case "QTDate": TrHs = false;
      end;       
    end;
    if (TrHs and testf) then begin
      testf = true;
      if (RepSpec.flags[1]==0) then begin
        if (QTr.Rejected==0) then begin testf = false; end;
      end;
      if (RepSpec.flags[2]==0) then begin
        if (QTr.Rejected==2) then begin testf = false; end;
      end;
      if (RepSpec.flags[3]==0) then begin
        if (QTr.Rejected==1) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.FirstAcc)) then begin
        if (QTr.Location!=RepSpec.FirstAcc) then begin testf = false; end;
      end;
      if (testf) then begin
        PrintQuotation(QTr);
        PrintOrder(QTr);
        PrintQuotationActivities(QTr);
        QTPrintApprovalActivities(QTr);
        Black_Divider(0,1);
      end;
    end;
  end;
  EndJob;
  RETURN;
END;