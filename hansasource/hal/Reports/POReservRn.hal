external procedure PrintIncorrectPOReserv(record POVc);
external function val GetPORowReserv(LongInt,string,var val,Boolean);
external procedure ListUnAssignedStockRes(record POVc);

global
procedure POReservDrillRn(record RcVc RepSpec)
BEGIN
  record POVc POr;
  row POVc POrw;
  Integer i,rwcnt;
  Boolean foundf;
  LongInt fror,toor;
  val resrv,ordqty;
  
  StartReportJob(USetStr(16163));
  EndHeader;
  SetRepCol(2,70);
  SetRepCol(4,190);
  SetRepCol(5,300);
  SetRepCol(6,390);
  SetRepCol(7,400);
  POr.SerNr = RepSpec.f1;
  if (ReadFirstMain(POr,1,true)) then begin
    rwcnt = MatRowCnt(POr);
    i = StringToInt(RepSpec.f2);
    if (i<rwcnt) then begin
      MatRowGet(POr,i,POrw);
      resrv = GetPORowReserv(POr.SerNr,POrw.ArtCode,ordqty,true);
      Gray_Divider(0,1);
      if (resrv!=0) then begin
        StartFormat(15);
        OutString(5,0,USetStr(16153),false);
        OutString(1,0,ordqty,true);
        EndFormat;
        StartFormat(15);
        OutString(5,0,USetStr(16147),false);
        OutString(1,0,resrv,true);
        EndFormat;
        if (ordqty-resrv!=0) then begin
          StartFormat(15);
          OutString(5,0,USetStr(16154),false);
          OutString(1,0,ordqty-resrv,true);
          EndFormat;
        end;
      end;
      StartFormat(15);
      EndFormat;
    end;
    ListUnAssignedStockRes(POr);
  end;
  EndJob;
  RETURN;
END;

global
procedure POReservRn(record RcVc RepSpec)
BEGIN
  record POVc POr;
  row POVc POrw;
  Integer i,rwcnt;
  Boolean foundf;
  LongInt fror,toor;
  val resrv,ordqty;
  string 60 comment;
  
  fror = FirstInRange(RepSpec.f1,10);
  toor = LastInRange(RepSpec.f1,10);
  StartReportJob(USetStr(16163));
  EndHeader;
  SetRepCol(2,20);
  SetRepCol(3,124);
  SetRepCol(4,130);
  SetRepCol(5,300);
  SetRepCol(6,390);
  SetRepCol(7,400);
  foundf = true;
  POr.SerNr = fror;
  while (LoopMain(POr,1,foundf)) begin
    if (POr.SerNr>toor) then begin
      foundf = false;
    end;
    if (foundf) then begin
      StartFormat(15);
      OutString(0,0,USetStr(17970),false);
      OutString(70,0,USetStr(16132),false);
      OutString(130,0,USetStr(17971),false);
      OutString(200,0,USetStr(16134),false);
      OutString(410,0,USetStr(16135),false);
      EndFormat;
      Black_Divider(0,1);
      StartFormat(15);
      OutLongInt(0,"DblPOVc",POr.SerNr,false);
      OutDate(70,0,POr.TransDate,false);
      OutString(130,"DblCUVc",POr.VECode,false);
      OutString(200,0,POr.Addr0,false);
      OutString(410,0,POr.PlanShip,false);
      EndFormat;
      StartFormat(15);
      EndFormat;
      StartFormat(15);
      OutString(2,0,USetStr(16136),false);
      OutString(3,0,USetStr(16137),true);
      OutString(4,0,USetStr(16138),false);
      OutString(5,0,USetStr(16139),true);
      OutString(6,0,USetStr(16140),true);
      EndFormat;
      Gray_Divider(0,1);
      rwcnt = MatRowCnt(POr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(POr,i,POrw);
        if (POrw.stp==1) then begin
          resrv = GetPORowReserv(POr.SerNr,POrw.ArtCode,ordqty,false);
          StartFormat(15);
          OutString(2,"DblINVc",POrw.ArtCode,false);
          OutVal(3,0,POrw.Quant,M4Qty,true);
          OutString(4,0,Left(POrw.Spec,30),false);
          OutVal(5,0,POrw.Sum,M4Val,true);
          OutVal(6,0,resrv,M4Val,true);
          if (resrv!=0) then begin
            OutStringID(7,"DblPOReserv",USetStr(16162),false,"" & POr.SerNr & ":" & i);
          end else begin
            OutString(7,0,USetStr(16166),false);
          end;
          EndFormat;
        end;
      end;
      PrintIncorrectPOReserv(POr);
    end;
  end;
  EndJob;
  RETURN;
END;

