external procedure HTCustCat(string,var string);
external procedure HTCustClass(string,var string);
external function Boolean ContactInGroupClass(string,string,string,string,string,string);

external function val FindRentQTTotWeight(record RentQTVc);
external function val FindRentQTSumRent(record RentQTVc);
external function val FindRentQTSumCharge(record RentQTVc);
external function val FindRentQTSumChargePlain(record RentQTVc);
external function val FindRentQTSumService(record RentQTVc);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val FindVAT(string,val,Integer,Integer);
external procedure BeginCurncyTotals(var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external procedure GetCustCat(string,var string);

global
procedure PrintRentQTDetailHeader()
begin
  StartFormat(15);
  OutString(0,0,USetStr(2682),false);
  OutString(130,0,USetStr(2683),false);
  OutString(220,0,USetStr(12886),false);
  OutString(300,0,USetStr(2692),false);
  OutString(360,0,USetStr(2691),false);
  OutString(480,0,USetStr(2696),true);
  EndFormat;
  return;
end;

global
procedure PrintRentQTDetail(record RentQTVc RentQTr)
begin
  Row  RentQTVc RentQTrw;
  Integer i,rwcnt;
  val t;

  StartFormat(15);
  OutLongInt(0,"DblRentQT",RentQTr.SerNr,false);
  OutDate(130,0,RentQTr.TransDate,false);
  OutString(220,0,RentQTr.AgreeType,false);
  OutString(300,0,RentQTr.SalesMan,false);
  OutDate(360,0,RentQTr.MakeContactDate,false);
  switch (RentQTr.Rejected) begin
    case 0: OutString(480,0,USetStr(11026),true);
    case 1: OutString(480,0,USetStr(11014),true);
    case 2: OutString(480,0,USetStr(11013),true);
  end;
  
  EndFormat;
  StartFormat(15);
  OutString(50,0,RentQTr.CustCode,false);
  OutString(205,0,RentQTr.Addr0,false);
  EndFormat;
  StartFormat(15);
  OutString(50,0,RentQTr.CustCat,false);
  OutString(205,0,RentQTr.Addr1,false);
  EndFormat;
  StartFormat(15);
  OutString(50,0,RentQTr.OurContact,false);
  OutString(205,0,RentQTr.Addr2,false);
  EndFormat;
  if nonblank(RentQTr.Addr3) then begin
    StartFormat(15);
    OutString(205,0,RentQTr.Addr3,false);
    EndFormat;
  end;
  if nonblank(RentQTr.ClientContact) then begin
    StartFormat(15);
    OutString(205,0,RentQTr.ClientContact,false);
    EndFormat;
  end;
  if nonblank(RentQTr.CurncyCode) then begin
    StartFormat(15);
    OutString(460,0,RentQTr.CurncyCode,true);
    EndFormat;
  end;
  rwcnt = MatRowCnt(RentQTr);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(RentQTr,i,RentQTrw);
//    if RentQTrw.stp==1 then begin
      StartFormat(15);
      OutString(20,0,RentQTrw.ArtCode,false);
      OutVal(124,0,RentQTrw.Quant,M4UVal,true);
      OutString(130,0,RentQTrw.Spec,false);
      OutString(340,0,RentQTrw.Price,true);
      OutVal(360,0,RentQTrw.vRebate,M41Val,true);
      t = RentQTrw.Sum - FindVAT(RentQTrw.VATCode,RentQTrw.Sum,RentQTr.InclVAT,0);
      if (t==0) then begin
        t = BlankVal;
      end;
      OutVal(460,0,t,M4Val,true);
      OutString(480,0,RentQTrw.VATCode,true);
      EndFormat;      
//    end;
  end;     
  Gray_Divider(300,460);
  t = FindRentQTSumRent(RentQTr);
  if (t!=0) then begin
    StartFormat(15);
    OutString(300,0,USetStr(12883),false);
    OutVal(460,0,t,M4Val,true);
    EndFormat;
  end;
  t = FindRentQTSumCharge(RentQTr);
  if (t!=0) then begin
    StartFormat(15);
    OutString(300,0,USetStr(12884),false);
    OutVal(460,0,t,M4Val,true);
    EndFormat;
  end;
  t = FindRentQTSumChargePlain(RentQTr);
  if (t!=0) then begin
    StartFormat(15);
    OutString(300,0,USetStr(12889),false);
    OutVal(460,0,t,M4Val,true);
    EndFormat;
  end;
  t = FindRentQTSumService(RentQTr);
  if (t!=0) then begin
    StartFormat(15);
    OutString(300,0,USetStr(12885),false);
    OutVal(460,0,t,M4Val,true);
    EndFormat;
  end;
  StartFormat(15);
  OutString(50,0,USetStr(12888),false);
  OutString(150,0,RentQTr.Objects,false);
  OutString(300,0,USetStr(12882),false);
  OutVal(460,0,RentQTr.Sum1,M4Val,true);
  EndFormat;
  t = FindRentQTTotWeight(RentQTr);
  StartFormat(15);
  OutString(50,0,USetStr(12887),false);
  OutVal(150,0,t,M4UVal,false);
  OutString(300,0,USetStr(12881),false);
  OutVal(460,0,RentQTr.Sum3,M4Val,true);
  EndFormat;
  StartFormat(15);
  OutString(300,0,USetStr(12880),false);
  OutVal(460,0,RentQTr.Sum4,M4Val,true);
  EndFormat;
  return;
end;

global
procedure RentQTStkRn(record RcVc RepSpec)
begin
  record RentQTVc RentQTr;
  Boolean testf;
  Boolean found;
  Integer rw;
  LongInt afr;
  LongInt ato;
  String 255 tstr;
  val totsumrs;
  val totsum;
  val iv;
  val prob;
  val rs;
  val prs;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt;

  afr = FirstInRange(RepSpec.f1,30);
  ato = LastInRange(RepSpec.f1,30);
  RepSpec.d1 = StringToDate(FirstInRange(RepSpec.Stext,10));
  RepSpec.d2 = StringToDate(LastInRange(RepSpec.Stext,10));
  RentQTr.SerNr = afr;
  BeginCurncyTotals(curcnt);
  StartReportJob(USetStr(8309));
  if  (RepSpec.PocketPC==0) then begin
    rw = 1;
    if (RepSpec.ArtMode==0) then begin
      tstr = USetStr(8311);
    end;
    if (RepSpec.ArtMode==1) then begin
      tstr = USetStr(8312);                        
    end;
    Header(rw,tstr,1);
    rw = rw + 1;
    if (blank(RepSpec.AccStr)) then begin
      tstr = USetStr(8313);
    end else begin
      tstr = USetStr(8314);
      tstr = tstr & RepSpec.AccStr;
    end;    
    Header(rw,tstr,0);    
    if (blank(RepSpec.f1)) then begin
      tstr = USetStr(8320);
    end else begin
      tstr = USetStr(8321);
      tstr = tstr & afr;
      if (afr<>ato) then begin
        tstr = tstr & " : " & ato;
      end;
    end;
    Header(rw,tstr,1);
    rw = rw + 1;
    if (blank(RepSpec.FirstAcc)) then begin
      tstr = USetStr(8325);
      end else begin
      tstr = USetStr(8326);
      tstr = tstr & RepSpec.FirstAcc;
    end;    
    Header(rw,tstr,1);    
    rw = rw + 1;
    HTCustCat(RepSpec.LastAcc,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    HTCustClass(RepSpec.f4,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end else begin
  
  end;
  EndHeader;

  if (RepSpec.ArtMode==0) then begin
    if  (RepSpec.PocketPC==0) then begin
      StartFormat(15);
      OutString(0,0,USetStr(2682),false);
      OutString(60,0,USetStr(2683),false);
      OutString(130,0,USetStr(2691),false);
      OutString(205,0,USetStr(2692),false);
      OutString(260,0,USetStr(2684),false);
      OutString(440,0,USetStr(2687),true);
      EndFormat;
    end else begin
      StartFormat(15);
      OutString(0,0,USetStr(2682),false);
      OutString(60,0,USetStr(2683),false);
      OutString(130,0,USetStr(2684),false);
      OutString(440,0,USetStr(2687),true);
      EndFormat;
    end;
  end;
  if (RepSpec.ArtMode==1) then begin
    PrintRentQTDetailHeader;
  end;
  Gray_Divider(0,1);
  
  found = true;
  while (LoopMain(RentQTr,1,found)) begin
    if (nonblank(RepSpec.f1)) then begin
      if (RentQTr.SerNr<afr) then begin
        found = false;
      end;
      if (RentQTr.SerNr>ato) then begin
        found = false;
      end;      
    end;         

    if (found) then begin
      testf = true;
      if (nonblank(RepSpec.FirstAcc)) then begin
        if (RepSpec.FirstAcc<>RentQTr.AgreeType) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.f2) and (RepSpec.f2<>RentQTr.CustCode)) then begin
        testf = false;
      end;
      if nonblank(RepSpec.AccStr) then begin
        if (RepSpec.AccStr<>RentQTr.SalesMan) then begin
          testf = false;
        end;
      end;
      if ((RentQTr.TransDate<RepSpec.sStartDate) or (RentQTr.TransDate>RepSpec.sEndDate)) then begin
        testf = false;
      end;
      if (RentQTr.Status==1) then begin
        testf = false;
      end;
      if (RentQTr.Rejected>0) then begin
        testf = false;
      end;      
      if nonblank(RepSpec.Stext) then begin
        Date mcd;
        
        mcd = StringToDate(RentQTr.MakeContactDate);
        if (nonblankdate(mcd)) then begin
          if (DateInRange(mcd,RepSpec.d1,RepSpec.d2)==false) then begin
            testf = false;
          end;
        end else begin
          if RentQTr.MakeContactDate<>RepSpec.Stext then begin
            testf = false;
          end;
        end;
      end;
    end;
    if (testf) then begin
      testf = ContactInGroupClass(RentQTr.CustCode,RepSpec.LastAcc,RepSpec.f4,"CUST","","");
    end;
    if (!found) then begin
      testf = false;
    end;
    if (testf) then begin
      if (RepSpec.flags[1]==0) then begin
        if RepSpec.ArtMode==0 then begin
          iv = RentQTr.Sum1;
        end else begin
          iv = RentQTr.Sum1;
        end;  
        TotSum = TotSum + iv;        
         rs = MULRATETOBASE1(RentQTr.CurncyCode,iv,RentQTr.FrRate,RentQTr.ToRateB1,RentQTr.ToRateB2,RentQTr.BaseRate1,RentQTr.BaseRate2,DefaultCurRoundOff);
        TotSumrs = TotSumrs + rs;
      end;
/*
      if (RepSpec.flags[1]==1) then begin
        if (RentQTr.Probability>0) then begin
           prob = RentQTr.Probability;
        end else begin
           prob = 100;
        end;
        if RepSpec.ArtMode==0 then begin
          iv = (RentQTr.Sum1*prob)/100;
        end else begin
          iv = (RentQTr.Sum1*prob)/100;
        end;  
        TotSum = TotSum + iv;
        rs = MULRATETOBASE1(RentQTr.CurncyCode,iv,RentQTr.FrRate,RentQTr.ToRateB1,RentQTr.ToRateB2,RentQTr.BaseRate1,RentQTr.BaseRate2,DefaultCurRoundOff);
        prs =    (rs*prob)/100;
        TotSumrs = TotSumrs + prs;
      end;
*/
      if RepSpec.ArtMode==0 then begin
        if  (RepSpec.PocketPC==0) then begin
          StartFormat(15);
          OutLongInt(0,"DblRentQT",RentQTr.SerNr,false);
          OutDate(60,0,RentQTr.TransDate,false);
          OutDate(130,0,RentQTr.MakeContactDate,false);
          OutString(205,0,RentQTr.SalesMan,false);
          OutString(260,0,RentQTr.Addr0,false);
          OutVal(440,0,iv,M4Val,true);
          OutString(445,0,RentQTr.CurncyCode,false);
          EndFormat;
          AddCurncyTotals(acur,av1,curcnt,RentQTr.CurncyCode,iv);
        end else begin
          StartFormat(15);
          OutLongInt(0,"DblRentQT",RentQTr.SerNr,false);
          OutDate(60,0,RentQTr.TransDate,false);
          OutString(120,0,left(RentQTr.Addr0,15),false);
          OutVal(440,0,iv,M4Val,true);
          OutString(445,0,RentQTr.CurncyCode,false);
          EndFormat;
          AddCurncyTotals(acur,av1,curcnt,RentQTr.CurncyCode,iv);
        
      end;
      end;
       
      if RepSpec.ArtMode==1 then begin
        PrintRentQTDetail(RentQTr);
        AddCurncyTotals(acur,av1,curcnt,RentQTr.CurncyCode,iv);
        Gray_Divider(0,1);
      end;
    end;
  end;
  if RepSpec.ArtMode==0 then begin
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(230,0,USetStr(2687),false);    
    OutVal(440,0,TotSumrs,M4Val,true);
    EndFormat;
    PrintCurncyTotals(acur,av1,av2,av3,curcnt,440,-1,-1,230,true,RepSpec.PocketPC);
  end;
 
  if RepSpec.ArtMode==1 then begin
    StartFormat(15);
    OutString(230,0,USetStr(2687),false);    
    OutVal(460,0,TotSumrs,M4Val,true);
    EndFormat;
    PrintCurncyTotals(acur,av1,av2,av3,curcnt,460,-1,-1,230,true,RepSpec.PocketPC);
  end; 
  EndJob;
  return;
end;
