external function Boolean ItemInItemGroupOrClass(string,string,string);external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);external function roundmode DefaultRoundMode();external procedure PRTransPrintStrings2(Integer,Integer,Integer,Integer);external procedure PrTranPrintHeader(record RcVc,Date,Date,Integer,Integer,string,string,string,string,string,string,string);external procedure PRTransPrintStrings1(Integer,Integer,Integer,Integer,Integer,Integer,Integer,Integer);external procedure PRTransPrintStringsNrs2(Integer,Integer,Integer);external procedure PrintInfo1(string,Date,string,Integer,LongInt,string,val,string,val,string,string);external procedure PrintInfo2(Integer,Integer,Integer,Integer,Integer,Integer,Integer,Integer,Integer);external procedure PrintInfo3(val,val,val,val,string,val,val,val,val);external procedure PrintTot1(Integer,integer,val,integer,val,integer,val,integer,val,integer,val,integer,val,val,val,val);external procedure PrintDifTot(Integer,Integer,val,val,Integer,val,val,Integer,val,val,integer,val,val,integer,val,val,integer,val,val);external procedure PrintDetInfo1(string,Date,string,Integer,string,string,Date,LongInt);procedure PrintHead(record RcVc RepSpec,record TBIVVc TBr,Integer strid,var Boolean headf)begin  record INVc INr;  record PRVc PRr;  record UserVc Userr;  StartFormat(15);  switch (RepSpec.flags[0]) begin    case 0:      OutString(20,0,USetStr(3550),false);      OutString(80,"DblPRCode",TBr.PRCode,false);      PRr.Code = TBr.PRCode;      if (ReadFirstMain(PRr,1,true)) then begin        OutString(200,0,PRr.Name,false);        OutString(470,0,PRr.CurncyCode,false);      end;    case 1:      OutString(20,0,USetStr(3542),false);      OutString(80,0,TBr.ArtCode,false);      INr.Code = TBr.ArtCode;      if (ReadFirstMain(INr,1,true)) then begin        OutString(200,0,INr.Name,false);      end;    case 2:      OutString(20,0,USetStr(3559),false);      OutString(80,0,TBr.EMCode,false);      Userr.Code = TBr.EMCode;      if (ReadFirstMain(Userr,1,true)) then begin        OutString(140,0,Userr.Name,false);      end;      case 3:      OutString(20,0,USetStr(3559),false);      OutString(80,0,TBr.EMCode,false);      Userr.Code = TBr.EMCode;      if (ReadFirstMain(Userr,1,true)) then begin        OutString(140,0,Userr.Name,false);      end;    end;  EndFormat;  if (RepSpec.flags[0]==2) then begin    if (RepSpec.ArtMode==1) then begin      PRTransPrintStrings2(3542,3543,3550,strid);    end;  end;  Gray_Divider(0,1);  headf = false;                  return;end;function Boolean PrintSubTotal(record RcVc RepSpec,record TBIVVc TBr,string lastproj,string lastitem,string lastempl,                        var val projsum,var val tssum,var val pisum,var val expsum,var val delsum,var val rgsum,var val sdsum,                        var val costts,var val costpi,var val costexp,var val costdel,var val costrg,var val costsd,var val costsum,                        var val projqty,var val tsqty,var val expqty,var val piqty)begin  Boolean headf,printsubtotf;    switch (RepSpec.flags[0]) begin    case 0:      if (nonblank(lastproj)) then begin        if (TBr.PRCode<>lastproj) then begin          headf = true;          printsubtotf = true;        end;      end else begin        headf = true;      end;    case 1:      if (nonblank(lastitem)) then begin        if (TBr.ArtCode<>lastitem) then begin          headf = true;          printsubtotf = true;        end;      end else begin        headf = true;      end;    case 2:      if (nonblank(lastempl)) then begin        if (TBr.EMCode<>lastempl) then begin          headf = true;          printsubtotf = true;        end;      end else begin        headf = true;      end;    case 3:      if (nonblank(lastempl)) then begin        if (TBr.EMCode<>lastempl) then begin          headf = true;          printsubtotf = true;        end;      end else begin        headf = true;      end;  end;  if (printsubtotf) then begin    Gray_Divider(0,1);    StartFormat(15);    OutString(150,0, USetStr(3584),false);    EndFormat;         PrintTot1(RepSpec.flags[1],RepSpec.flags[8],tssum,RepSpec.flags[2],pisum,RepSpec.flags[3],expsum, RepSpec.flags[7],delsum, RepSpec.flags[9],rgsum,RepSpec.flags[10],sdsum,tsqty,expqty,piqty);       Gray_Divider(150,400);    StartFormat(15);           OutString(150,0,USetStr(3549),false);    OutVal(295,0,projsum,M4Val,true);    OutVal(345,0,projqty,M4Val,true);    EndFormat;    projsum = blankval; tssum = blankval; pisum = blankval; expsum = blankval; delsum = blankval; rgsum = blankval; sdsum = blankval;    projqty = blankval; tsqty = blankval; expqty = blankval; piqty = blankval;    StartFormat(20);    EndFormat;    StartFormat(15);    OutString(150,0, USetStr(3583),false);    EndFormat;    PrintTot1(RepSpec.flags[1],RepSpec.flags[8],costts,RepSpec.flags[2],costpi,RepSpec.flags[3],costexp, RepSpec.flags[7],costdel, RepSpec.flags[9],costrg,RepSpec.flags[10],costsd,             blankval,blankval,blankval);       Gray_Divider(150,400);    StartFormat(15);           OutString(150,0,USetStr(3549),false);    OutVal(295,0,costsum,M4Val,true);    EndFormat;    costts = blankval; costpi = blankval; costexp = blankval; costdel = blankval; costrg = blankval; costsd = blankval; costsum = blankval;    StartFormat(20);    EndFormat;  end;  PrintSubTotal = printsubtotf; //headf  return;end;globalprocedure PrTranRn(record RcVc RepSpec)begin  string 20 fromproj,toproj;  String 20 fromitem,toitem;  String 5 frompers,topers;  record TBIVVc TBr;  record PRVc PRr;  Boolean found,testf,headf,printsubtotf,firstproject;  string 30 mykey;  Integer keys;  val totprojsum,tottssum,totexpsum,totpisum,totdelsum,totrgsum,totsdsum,totcost,totpiqty;  val projsum,tssum,expsum,pisum,regsum,delsum,rgsum,sdsum;  val spisum,sexpsum,stssum,sdelsum,srgsum,ssdsum;  val costts,costpi,costexp,costdel,costrg,costsd,costsum;  val tcostts,tcostpi,tcostexp,tcostdel,tcostrg,tcostsd,tcostsum;  val projqty,totprojqty,tottsqty,tsqty,totexpqty,expqty,piqty;  val CostPriceInCur,PriceInCur,SumInCur;  val tssumincur,expsumincur,pisumincur,regsumincur,delsumincur,rgsumincur,sdsumincur;  string 255 dblstr,lastproj,lastitem,lastempl,MarkupInCur;  LongInt SerNr;  Integer oVc,strid;  array val av1;  array val av2;  array val av3;  array string 20 acur;  Integer curcnt;  array val aexpv1;  array val aexpv2;  array val aexpv3;  array string 20 aexpcur;  Integer expcurcnt;  record BaseCurBlock BCb;    BlockLoad(BCb);  fromproj = FirstInRange(RepSpec.f1,20);  toproj = LastInRange(RepSpec.f1,20);  fromitem = FirstInRange(RepSpec.f2,20);  toitem = LastInRange(RepSpec.f2,20);  frompers = FirstInRange(RepSpec.f3,20);  topers = LastInRange(RepSpec.f3,20);  StartReportJob(USetStr(3541));  PrTranPrintHeader(RepSpec,RepSpec.sStartDate,RepSpec.sEndDate,RepSpec.ArtMode,RepSpec.flags[0],fromproj,toproj, fromitem, toitem, frompers, topers,RepSpec.ObjStr);  EndHeader;  SetRepCol(2,45);  SetRepCol(3,80);   SetRepCol(4,150);   SetRepCol(5,200);  SetRepCol(6,295);  SetRepCol(7,345);  SetRepCol(8,410);  SetRepCol(9,465);  headf = true;  firstproject = true;      strid = 3545;  if (RepSpec.flags[11]!=0) then begin    strid = 3587;  end;  if (RepSpec.ArtMode==0) or (RepSpec.ArtMode==1) then begin    if (RepSpec.flags[0]!=2) then begin      PRTransPrintStrings1(3542,3543,3544,strid,3546,3547,3548,3549);    end;  end;  if (RepSpec.ArtMode==2) then begin    if (RepSpec.flags[0]==0) then begin      PRTransPrintStringsNrs2(3542,3543,3544);    end;      if (RepSpec.flags[0]==1) then begin      PRTransPrintStringsNrs2(3550,3543,3544);    end;    if (RepSpec.flags[0]==2) then begin      PRTransPrintStringsNrs2(3550,3543,3542);    end;    if (RepSpec.flags[0]==3) then begin      PRTransPrintStringsNrs2(3550,3543,3542);    end;  end;  if (RepSpec.flags[0]==2) then begin    if (RepSpec.ArtMode==0) then begin      PRTransPrintStrings1(3542,3543,3550,strid,3546,3547,3548,3549);    end;    if (RepSpec.ArtMode==1) then begin//        PRTransPrintStringsNrs2(3542,3543,3550);     end;  end;  switch (RepSpec.flags[0]) begin    case 0:      TBr.PRCode = fromproj;      mykey = "MainKey";      keys = 1;    case 1:      TBr.PRCode = fromproj;      TBr.ArtCode = fromitem;      mykey = "ArtCode";      keys = 2;    case 2:      if (nonblank(RepSpec.f1)) then begin        TBr.PRCode = fromproj;        TBr.EMCode = frompers;        mykey = "PREMCode";        keys = 2;      end else begin        TBr.EMCode = frompers;        mykey = "EMCode";        keys = 1;      end;    case 3:      TBr.EMCode = frompers;      mykey = "EMCode";      keys = 1;  end;  found = true;  while (LoopKey(mykey,TBr,keys,found)) begin    testf = true;    switch (RepSpec.flags[0]) begin      case 0:        if (nonblank(RepSpec.f1)) then begin          if (TBr.PRCode>toproj) then begin found = false; end;        end;      case 1:        if (nonblank(RepSpec.f1)) then begin          if (TBr.PRCode>toproj) then begin found = false; end;        end;        if (nonblank(RepSpec.f2)) then begin          if (TBr.ArtCode>toitem) then begin found = false; end;        end;      case 2:        if (nonblank(RepSpec.f1)) then begin          if (TBr.PRCode>toproj) then begin found = false; end;        end;        if (nonblank(RepSpec.f3)) then begin          if (TBr.EMCode>topers) then begin found = false; end;        end;      case 3:        if (nonblank(RepSpec.f3)) then begin          if (TBr.EMCode>topers) then begin found = false; end;        end;    end;    if (found) then begin      testf = true;      switch (RepSpec.flags[0]) begin        case 0:          if (nonblank(RepSpec.f2)) then begin            if (TBr.ArtCode<fromitem) then begin testf = false; end;            if (TBr.ArtCode>toitem) then begin testf = false; end;          end;          if (nonblank(RepSpec.f3)) then begin            if (TBr.EMCode<frompers) then begin testf = false; end;            if (TBr.EMCode>topers) then begin testf = false; end;          end;        case 1:          if (nonblank(RepSpec.f1)) then begin            if (TBr.PRCode<fromproj) then begin testf = false; end;            if (TBr.PRCode>toproj) then begin testf = false; end;          end;          if (nonblank(RepSpec.f3)) then begin            if (TBr.EMCode<frompers) then begin testf = false; end;            if (TBr.EMCode>topers) then begin testf = false; end;          end;        case 2:          if (nonblank(RepSpec.f2)) then begin            if (TBr.ArtCode<fromitem) then begin testf = false; end;            if (TBr.ArtCode>toitem) then begin testf = false; end;          end;          if (nonblank(RepSpec.f3)) then begin            if (TBr.EMCode<frompers) then begin testf = false; end;            if (TBr.EMCode>topers) then begin testf = false; end;          end;        case 3:          if (nonblank(RepSpec.f1)) then begin            if (TBr.PRCode<fromproj) then begin testf = false; end;            if (TBr.PRCode>toproj) then begin testf = false; end;          end;          if (nonblank(RepSpec.f2)) then begin            if (TBr.ArtCode<fromitem) then begin testf = false; end;            if (TBr.ArtCode>toitem) then begin testf = false; end;          end;      end;      PRr.Code = TBr.PRCode;      ReadFirstMain(PRr,1,true);      if (nonblank(RepSpec.AccStr)) then begin        if (PRr.Leader!=RepSpec.AccStr) then begin found = false; end;      end;      if (DateInRange(TBr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;      if (nonblankdate(RepSpec.d1)) then begin        if (TBr.InvAfter<RepSpec.d1) then begin testf = false; end;      end;            if (nonblankdate(RepSpec.d2)) then begin        if (TBr.InvAfter>RepSpec.d2) then begin testf = false; end;      end;            if (nonblank(RepSpec.ObjStr)) then begin        if (SetInSet(RepSpec.ObjStr,TBr.Objects)==false) then begin testf = false; end;      end;          if (testf) then begin        testf = ItemInItemGroupOrClass(TBr.ArtCode,RepSpec.f4,RepSpec.f5);      end;      if (testf==true) then begin        testf = false;        if ((RepSpec.flags[4]==1) and (TBr.Invoice==-1)) then begin          testf = true;        end;        if ((RepSpec.flags[5]==1) and (TBr.Invoice<>-1)) then begin          testf = true;        end;        if ((RepSpec.flags[6]==1)) then begin          if (TBr.ItemType!=3) then begin            testf = false;          end;        end;      end;       switch (TBr.oVc) begin        case 1: if (RepSpec.flags[1]==0) then begin testf = false; end;        case 2: if (RepSpec.flags[2]==0) then begin testf = false; end;        case 3: if (RepSpec.flags[3]==0) then begin testf = false; end;        case 4: if (RepSpec.flags[7]==0) then begin testf = false; end;        case 5: if (RepSpec.flags[8]==0) then begin testf = false; end;        case 6: if (RepSpec.flags[9]==0) then begin testf = false; end;        case 7: if (RepSpec.flags[10]==0) then begin testf = false; end;      end;      if (RepSpec.ArtMode==2) then begin        if ((TBr.Qty==TBr.InvQty) and (blank(TBr.Markup))) then begin          testf = false;        end;      end;      if (testf) then begin        if (RepSpec.flags[12]!=0) and (nonblank(TBr.CurncyCode)) then begin           headf = PrintSubTotal(RepSpec,TBr,lastproj,lastitem,lastempl,projsum,tssumincur,pisumincur,expsumincur,delsumincur,rgsumincur,sdsumincur,costts,costpi,costexp,costdel,costrg,costsd,costsum,                                 projqty,tsqty,expqty,piqty);           if (headf==true) then begin              pisum = blankval;             expsum = blankval;             delsum = blankval;             rgsum = blankval;             sdsum = blankval;             tssum = blankval;        end;        end else begin          headf = PrintSubTotal(RepSpec,TBr,lastproj,lastitem,lastempl,projsum,tssum,pisum,expsum,delsum,rgsum,sdsum,costts,costpi,costexp,costdel,costrg,costsd,costsum,                                 projqty,tsqty,expqty,piqty);                                  tssumincur = blankval;          if (headf==true) then begin             tssumincur = blankval;            pisumincur = blankval;            expsumincur = blankval;            delsumincur = blankval;            rgsumincur = blankval;            sdsumincur = blankval;          end;        end;        if (headf==true) or (firstproject==true) then begin           PrintHead(RepSpec,TBr,strid,headf);          firstproject = false;        end;        PriceInCur = TBr.PriceInCur;        if (blank(PriceInCur)) then begin          PriceInCur = TBr.Price;        end;        SumInCur = TBr.SumInCur;        if (SumInCur==0) then begin          SumInCur = TBr.Sum;        end;        MarkupInCur = TBr.MarkupInCur;        if (blank(MarkupInCur)) then begin          MarkupInCur = TBr.Markup;        end;        CostPriceInCur = TBr.CostPriceInCur;        if (blank(CostPriceInCur)) then begin          CostPriceInCur = TBr.Price;        end;                 if (RepSpec.flags[12]!=0) and (nonblank(TBr.CurncyCode)) then begin          projsum = projsum + SumInCur;          totprojsum = totprojsum + TBr.Sum;          totcost = Round(TBr.Qty * CostPriceInCur,DefaultRoundMode);        end else begin          projsum = projsum + TBr.Sum;          totprojsum = totprojsum + TBr.Sum;          totcost = Round(TBr.Qty * TBr.CostPrice,DefaultRoundMode);        end;        projqty = projqty + TBr.InvQty;        totprojqty= totprojqty + TBr.InvQty;        //procedure AddTotals is removed and AddTotals code is added directly  into  PrTranRn   as adding new arguments to AddTotals gives a compiling error "Too many arguments"        //AddTotals start          SumInCur = TBr.SumInCur;        if (SumInCur==0) then begin          SumInCur = TBr.Sum;        end;        if not((RepSpec.flags[12]!=0) and (nonblank(TBr.CurncyCode))) then begin          switch (TBr.oVc) begin            case 1:              tssum = tssum + TBr.Sum;              tsqty = tsqty + TBr.InvQty;              costts = costts + totcost;              tcostts = tcostts + totcost;                      tottssum = tottssum + TBr.Sum;              costsum = costsum + totcost;              tottsqty = tottsqty + TBr.InvQty;                      tssumincur = tssumincur + SumInCur;            case 2:              pisum = pisum + TBr.Sum;              costpi = costpi + totcost;              tcostts = tcostts + totcost;              totpisum = totpisum + TBr.Sum;              costsum = costsum + totcost;              piqty = piqty + TBr.InvQty;              totpiqty = totpiqty + TBr.InvQty;              pisumincur = pisumincur + SumInCur;           case 3:             expsum = expsum + TBr.Sum;             costexp = costexp + totcost;             tcostexp = tcostexp + totcost;             totexpsum = totexpsum + TBr.Sum;             costsum = costsum + totcost;             expqty = expqty + TBr.InvQty;             totexpqty = totexpqty + TBr.InvQty;             expsumincur = expsumincur + SumInCur;             AddCurncyTotals(aexpcur,aexpv1,expcurcnt,TBr.CurncyCode,TBr.Sum);             AddCurncyTotals(aexpcur,aexpv2,expcurcnt,TBr.CurncyCode,TBr.InvQty);           case 4:             delsum = delsum + TBr.Sum;             costdel = costdel + totcost;             tcostdel = tcostdel + totcost;             totdelsum = totdelsum + TBr.Sum;             costsum = costsum + totcost;             delsumincur = delsumincur + SumInCur;           case 5:             tssum = tssum + TBr.Sum;             tsqty = tsqty + TBr.InvQty;             costts = costts + totcost;             tcostts = tcostts + totcost;             tottssum = tottssum + TBr.Sum;             costsum = costsum + totcost;             tottsqty = tottsqty + TBr.InvQty;             tssumincur = tssumincur + SumInCur;           case 6:             rgsum = rgsum + TBr.Sum;             costrg = costrg + totcost;             tcostrg = tcostrg + totcost;             totrgsum = totrgsum + TBr.Sum;             costsum = costsum + totcost;             rgsumincur = rgsumincur + SumInCur;          case 7:            sdsum = sdsum + TBr.Sum;            costsd = costsd + totcost;            tcostsd = tcostsd + totcost;            totsdsum = totsdsum + TBr.Sum;            costsum = costsum + totcost;            sdsumincur = sdsumincur + SumInCur;          end;      end else begin        switch (TBr.oVc) begin        case 1:          tssum = tssum + SumInCur;          tsqty = tsqty + TBr.InvQty;          costts = costts + totcost;          tcostts = tcostts + totcost;          tottssum = tottssum  + TBr.Sum;          costsum = costsum + totcost;          tottsqty = tottsqty + TBr.InvQty;        case 2:          pisum = pisum + SumInCur;          costpi = costpi + totcost;          tcostts = tcostts + totcost;          totpisum = totpisum + TBr.Sum;          costsum = costsum + totcost;          piqty = piqty + TBr.InvQty;          totpiqty = totpiqty + TBr.InvQty;        case 3:          expsum = expsum + SumInCur;          costexp = costexp + totcost;          tcostexp = tcostexp + totcost;          totexpsum = totexpsum + TBr.Sum;          costsum = costsum + totcost;          expqty = expqty + TBr.InvQty;          totexpqty = totexpqty + TBr.InvQty;          AddCurncyTotals(aexpcur,aexpv1,expcurcnt,TBr.CurncyCode,SumInCur);          AddCurncyTotals(aexpcur,aexpv2,expcurcnt,TBr.CurncyCode,TBr.InvQty);        case 4:          delsum = delsum + SumInCur;          costdel = costdel + totcost;          tcostdel = tcostdel + totcost;          totdelsum = totdelsum + TBr.Sum;          costsum = costsum + totcost;        case 5:          tssum = tssum + SumInCur;          tsqty = tsqty + TBr.InvQty;          costts = costts + totcost;          tcostts = tcostts + totcost;          tottssum = tottssum + TBr.Sum;          costsum = costsum + totcost;          tottsqty = tottsqty + TBr.InvQty;        case 6:          rgsum = rgsum + SumInCur;          costrg = costrg + totcost;          tcostrg = tcostrg + totcost;          totrgsum = totrgsum + TBr.Sum;          costsum = costsum + totcost;        case 7:          sdsum = sdsum + SumInCur;          costsd = costsd + totcost;          tcostsd = tcostsd + totcost;          totsdsum = totsdsum + TBr.Sum;          costsum = costsum + totcost;       end;    end;    AddCurncyTotals(acur,av1,curcnt,TBr.CurncyCode,SumInCur);    AddCurncyTotals(acur,av2,curcnt,TBr.CurncyCode,TBr.InvQty);     //AddTotals end                  dblstr = TBr.SerNr;        dblstr = dblstr & ",";        dblstr = dblstr & TBr.Row;        dblstr = dblstr & ",";        dblstr = dblstr & TBr.PRCode;        dblstr = dblstr & ",";        dblstr = dblstr & TBr.oVc;        SerNr = TBr.SerNr;        oVc = TBr.oVc;        if (RepSpec.flags[11]!=0) then begin          SerNr = TBr.Invoice;          oVc = 100;        end;        switch (RepSpec.ArtMode) begin          case 0:            if (RepSpec.flags[12]!=0) and (nonblank(TBr.CurncyCode)) then begin              switch (RepSpec.flags[0]) begin                case 0: PrintInfo1(TBr.ArtCode,TBr.TransDate,TBr.EMCode,oVc,SerNr,PriceInCur,TBr.InvQty,MarkupInCur,SumInCur,dblstr,TBr.CurncyCode);                case 1: PrintInfo1(TBr.PRCode,TBr.TransDate,TBr.EMCode,oVc,SerNr,PriceInCur,TBr.InvQty,MarkupInCur,SumInCur,dblstr,TBr.CurncyCode);                case 2: PrintInfo1(TBr.ArtCode,TBr.TransDate,TBr.PRCode,oVc,SerNr,PriceInCur,TBr.InvQty,MarkupInCur,SumInCur,dblstr,TBr.CurncyCode);                case 3: PrintInfo1(TBr.ArtCode,TBr.TransDate,TBr.PRCode,oVc,SerNr,PriceInCur,TBr.InvQty,MarkupInCur,SumInCur,dblstr,TBr.CurncyCode);              end;            end else begin              switch (RepSpec.flags[0]) begin                case 0: PrintInfo1(TBr.ArtCode,TBr.TransDate,TBr.EMCode,oVc,SerNr,TBr.Price,TBr.InvQty,TBr.Markup,TBr.Sum,dblstr,"");                case 1: PrintInfo1(TBr.PRCode,TBr.TransDate,TBr.EMCode,oVc,SerNr,TBr.Price,TBr.InvQty,TBr.Markup,TBr.Sum,dblstr,"");                case 2: PrintInfo1(TBr.ArtCode,TBr.TransDate,TBr.PRCode,oVc,SerNr,TBr.Price,TBr.InvQty,TBr.Markup,TBr.Sum,dblstr,"");                case 3: PrintInfo1(TBr.ArtCode,TBr.TransDate,TBr.PRCode,oVc,SerNr,TBr.Price,TBr.InvQty,TBr.Markup,TBr.Sum,dblstr,"");              end;            end;          case 1:            if (RepSpec.flags[12]!=0) and (nonblank(TBr.CurncyCode)) then begin              switch (RepSpec.flags[0]) begin                case 0: PrintInfo1(TBr.ArtCode,TBr.TransDate,TBr.EMCode,oVc,SerNr,PriceInCur,TBr.InvQty,MarkupInCur,SumInCur,dblstr,TBr.CurncyCode);                case 1: PrintInfo1(TBr.PRCode,TBr.TransDate,TBr.EMCode,oVc,SerNr,PriceInCur,TBr.InvQty,MarkupInCur,SumInCur,dblstr,TBr.CurncyCode);                case 2: PrintInfo1(TBr.ArtCode,TBr.TransDate,TBr.PRCode,oVc,SerNr,blankval,blankval,"",blankval,dblstr,TBr.CurncyCode);                case 3: PrintInfo1(TBr.ArtCode,TBr.TransDate,TBr.PRCode,oVc,SerNr,blankval,blankval,"",blankval,dblstr,TBr.CurncyCode);              end;              totcost = Round(TBr.Qty * TBr.CostPriceInCur,DefaultRoundMode);            end else begin              switch (RepSpec.flags[0]) begin                case 0: PrintInfo1(TBr.ArtCode,TBr.TransDate,TBr.EMCode,oVc,SerNr,TBr.Price,TBr.InvQty,TBr.Markup,TBr.Sum,dblstr,"");                case 1: PrintInfo1(TBr.PRCode,TBr.TransDate,TBr.EMCode,oVc,SerNr,TBr.Price,TBr.InvQty,TBr.Markup,TBr.Sum,dblstr,"");                case 2: PrintInfo1(TBr.ArtCode,TBr.TransDate,TBr.PRCode,oVc,SerNr,blankval,blankval,"",blankval,dblstr,"");                case 3: PrintInfo1(TBr.ArtCode,TBr.TransDate,TBr.PRCode,oVc,SerNr,blankval,blankval,"",blankval,dblstr,"");              end;              totcost = Round(TBr.Qty * TBr.CostPrice,DefaultRoundMode);            end;            if (RepSpec.flags[12]!=0) and (nonblank(TBr.CurncyCode)) then begin              PrintInfo2(3551,3552,3554,3553,3548,3546,3555,3582,3556);               PrintInfo3(TBr.Qty,TBr.InvQty,TBr.CostPriceInCur,TBr.Discount,MarkupInCur,PriceInCur,TBr.GPInCur,totcost,SumInCur);            end else begin              PrintInfo2(3551,3552,3554,3553,3548,3546,3555,3582,3556);               PrintInfo3(TBr.Qty,TBr.InvQty,TBr.CostPrice,TBr.Discount,TBr.Markup,TBr.Price,TBr.GP,totcost,TBr.Sum);            end;            Gray_Divider(0,1);        end;                 lastproj = TBr.PRCode;        lastitem = TBr.ArtCode;        lastempl = TBr.EMCode;            end;    end;  end;   if (RepSpec.ArtMode<>2) then begin    Gray_Divider(0,1);    StartFormat(15);    OutString(150,0, USetStr(3584),false);    EndFormat;    if (RepSpec.flags[12]!=0) and (nonblank(TBr.CurncyCode)) then begin      PrintTot1(RepSpec.flags[1],RepSpec.flags[8],tssumincur,RepSpec.flags[2],pisumincur,RepSpec.flags[3],expsumincur, RepSpec.flags[7],delsumincur, RepSpec.flags[9],rgsumincur,RepSpec.flags[10],sdsumincur,                tsqty,expqty,piqty);       end else begin      PrintTot1(RepSpec.flags[1],RepSpec.flags[8],tssum,RepSpec.flags[2],pisum,RepSpec.flags[3],expsum, RepSpec.flags[7],delsum, RepSpec.flags[9],rgsum,RepSpec.flags[10],sdsum,                tsqty,expqty,piqty);       end;    tssum = blankval;    pisum = blankval;    expsum = blankval;    delsum = blankval;    rgsum = blankval;    sdsum = blankval;    tsqty = blankval;    expqty = blankval;    piqty = blankval;    tssumincur = blankval;    pisumincur = blankval;    expsumincur = blankval;    delsumincur = blankval;    rgsumincur = blankval;    sdsumincur = blankval;        Gray_Divider(150,400);    StartFormat(15);           OutString(150,0,USetStr(3549),false);    OutVal(295,0,projsum,M4Val,true);    OutVal(345,0,projqty,M4Val,true);    EndFormat;    StartFormat(20);    EndFormat;        StartFormat(15);    OutString(150,0, USetStr(3583),false);    EndFormat;    PrintTot1(RepSpec.flags[1],RepSpec.flags[8],costts,RepSpec.flags[2],costpi,RepSpec.flags[3],costexp, RepSpec.flags[7],costdel, RepSpec.flags[9],costrg,RepSpec.flags[10],costsd,              blankval,blankval,blankval);     costts = blankval;    costpi = blankval;    costexp = blankval;    costdel = blankval;    costrg = blankval;    costsd = blankval;    Gray_Divider(150,400);    StartFormat(15);           OutString(150,0,USetStr(3549),false);    OutVal(295,0,costsum,M4Val,true);    EndFormat;    StartFormat(20);    EndFormat;    if (totprojsum <> 0) then begin        Gray_Divider(0,1);        StartFormat(15);      OutString(150,0,USetStr(3560) & " " &  USetStr(3556),false);      EndFormat;    end;    if ((RepSpec.flags[1]==1) or (RepSpec.flags[8]==1)) and (tottssum <> 0) then begin      StartFormat(15);      OutString(150,0,USetStr(3561),false);      OutVal(295,0,tottssum,M4Val,true);      OutVal(345,0,tottsqty,M4Val,true);      EndFormat;    end;    if (RepSpec.flags[2]==1) and (totpisum <> 0) then begin      StartFormat(15);      OutString(150,0,USetStr(3562),false);      OutVal(295,0,totpisum,M4Val,true);      OutVal(345,0,totpiqty,M4Val,true);      EndFormat;    end;    if (RepSpec.flags[3]==1) and (totexpsum <> 0) then begin      if (expcurcnt>1) and (RepSpec.flags[12]==1) then begin              OutString(150,0,USetStr(3563),false);        PrintCurncyTotals(aexpcur,aexpv1,aexpv2,aexpv3,expcurcnt,295,345,1,200,true,RepSpec.PocketPC);      end else begin        StartFormat(15);        OutString(150,0,USetStr(3563),false);        OutVal(295,0,totexpsum,M4Val,true);        OutVal(345,0,totexpqty,M4Val,true);        EndFormat;      end;    end;       if (RepSpec.flags[7]==1) and (totdelsum <> 0)then begin      StartFormat(15);      OutString(150,0,USetStr(3577),false);      OutVal(295,0,totdelsum,M4Val,true);      EndFormat;    end;    if (RepSpec.flags[9]==1) and (totrgsum <> 0) then begin      StartFormat(15);      OutString(150,0,USetStr(3578),false);      OutVal(295,0,totrgsum,M4Val,true);      EndFormat;    end;    if (RepSpec.flags[10]==1) and (totsdsum<>0) then begin      StartFormat(15);      OutString(150,0,USetStr(3586),false);      OutVal(295,0,totsdsum,M4Val,true);      EndFormat;    end;    if (totprojsum <> 0) then begin      Gray_Divider(150,400);      if  (RepSpec.flags[12]==1) then begin        PrintCurncyTotals(acur,av1,av2,av3,curcnt,295,345,1,200,true,RepSpec.PocketPC);      end else begin        StartFormat(15);        OutString(150,0,USetStr(3549),false);        OutVal(295,0,totprojsum,M4Val,true);        OutVal(345,0,totprojqty,M4Val,true);        EndFormat;      end;    end;      StartFormat(15);    EndFormat;    switch (RepSpec.ArtMode) begin      case 1:        StartFormat(15);        OutString(150,0,USetStr(3560) & " " &  USetStr(3582),false);        EndFormat;        if ((RepSpec.flags[1]==1) or (RepSpec.flags[8]==1)) and (tcostts<>0) then begin //nk added Activities          StartFormat(15);          OutString(150,0,USetStr(3561),false);          OutVal(295,0,tcostts,M4Val,true);          EndFormat;        end;        if (RepSpec.flags[2]==1) and (tcostpi<>0) then begin          StartFormat(15);          OutString(150,0,USetStr(3562),false);          OutVal(295,0,tcostpi,M4Val,true);          EndFormat;        end;        if (RepSpec.flags[3]==1) and (tcostexp <> 0) then begin          StartFormat(15);          OutString(150,0,USetStr(3563),false);          OutVal(300,0,tcostexp,M4Val,true);          EndFormat;        end;           if (RepSpec.flags[7]==1) and (tcostdel <> 0) then begin          StartFormat(15);          OutString(150,0,USetStr(3577),false);          OutVal(295,0,tcostdel,M4Val,true);          EndFormat;        end;        if (RepSpec.flags[9]==1) and (tcostrg <> 0) then begin          StartFormat(15);          OutString(150,0,USetStr(3585),false);            OutVal(295,0,tcostrg,M4Val,true);          EndFormat;        end;        if (RepSpec.flags[10]==1) and (tcostsd <> 0) then begin          StartFormat(15);          OutString(150,0,USetStr(3586),false);          OutVal(295,0,tcostsd,M4Val,true);          EndFormat;        end;        tcostsum = tcostts + tcostpi + tcostexp + tcostexp + tcostdel - tcostrg + tcostsd;        if (tcostsum <> 0) then begin          Gray_Divider(150,400);          StartFormat(15);          OutString(150,0,USetStr(3549),false);          OutVal(295,0,tcostsum,M4Val,true);          EndFormat;        end;     end;   end;  EndJob;  return;end;