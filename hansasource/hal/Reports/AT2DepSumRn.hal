external procedure GetWrofDate(record AT2UnitVc,var Date,var Boolean);
external procedure HTDepartments(string,string,var string);
external procedure HTCategories(string,string,var string);
external procedure HTOBJ(string,var string);
external procedure HT2Per(Date, Date , var string);

global
procedure GetCategoryName(string category,var string res)
BEGIN
  record AT2Vc ATCatr;
 
  res = "";
  ATCatr.Code = category;
  if (ReadFirstMain(ATCatr,1,true)) then begin
    res = ATCatr.Description;
  end;
  RETURN;
END;

global
procedure GetDepartmentName(string department,var string res)
BEGIN
  record DepVc Depr;
 
  res = "";
  Depr.Code=department;
  if (ReadFirstMain(Depr,1,true)) then begin
    res = Depr.Description;
  end;
  RETURN;
END;

function
Boolean CheckAssetDepMatch(string InventoryNr,string dep,string depcode,Date enddate) 
BEGIN
  Boolean res,TrHs, res2;
  record InvrsVc Invrsr;
  record AT2TakeVc ATTaker;
  Date blankd;

  if (depcode==dep) then begin 
    res2 = true;
  end;   
  TrHs = true;
  Invrsr.InventoryNr = InventoryNr;
  Invrsr.FileName = "AT2TakeVc";
  while (LoopBackKey("FileName",Invrsr,2,TrHs)) begin
    if (Invrsr.InventoryNr!=InventoryNr) then begin TrHs = false; end;
    if (Invrsr.FileName!="AT2TakeVc") then begin TrHs = false; end;
    if (TrHs) then begin        
      ATTaker.SerNr = Invrsr.TransNr;
      if (ReadFirstMain(ATTaker,1,true)) then begin
         if (ATTaker.PhysCheckf!=2) then begin
            if (ATTaker.DepCode==depcode) then begin
               if (ATTaker.TransDate<=enddate) then begin
                 res2 = true;
                 TrHs = false;
               end;
            end;     
            if (ATTaker.DepCode!=depcode) then begin
               if (ATTaker.TransDate<=enddate)  then begin
                 res2 =false;
                 TrHs = false;
               end;
            end;
         end;
      end;
    end;
  end;    
  res = res2;
  CheckAssetDepMatch = res;
  RETURN;
END;

procedure LastDpr(Date dat,record AT2UnitVc ATUnitr,var val stval) 
BEGIN
  record AT2DprVc ATDprr;
  Boolean TrHs;
  record InvrsVc Invrsr;
  
  stval= ATUnitr.PurchVal;
  TrHs = true;
  Invrsr.InventoryNr = ATUnitr.InventoryNr;
  Invrsr.FileName = "AT2DprVc";
  Invrsr.TransDate = dat;
  while (LoopBackKey("FileName",Invrsr,3,TrHs)) begin
    if (Invrsr.InventoryNr!=ATUnitr.InventoryNr) then begin TrHs = false; end;
    if (Invrsr.FileName!="AT2DprVc") then begin TrHs = false; end;
    if (Invrsr.TransDate>dat) then begin TrHs = false; end;
    if (TrHs) then begin
      ATDprr.SerNr = Invrsr.TransNr;
      if (ReadFirstMain(ATDprr,1,true)) then begin
        stval = ATDprr.StartVal;
        TrHs = false;
      end;
    end;    
  end;
  RETURN;      
END;      

global
procedure AT2FwdBal(string InventoryNr,Date data,var val forwd)
BEGIN
  record AT2UnitVc ATUnitr;
  Boolean testf;
  val stval;
  Date testdate;
  val qty;

  stval =0;
  testdate=data;
  ATUnitr.InventoryNr = InventoryNr;
  if (ReadFirstMain(ATUnitr,1,true)) then begin
     testf = true;
     if (testdate<ATUnitr.PurchaseDate) then begin testf = false; end;
     if (testf) then begin
        qty = ATUnitr.Quantity;
        if (qty==0) then begin qty = 1; end;
        LastDpr(testdate,ATUnitr,stval);
        if (stval!=0) then begin
          forwd = qty*stval;  
        end else begin
          forwd = qty*ATUnitr.PurchVal;  
        end;
     end;
  end;
  RETURN;
END;

procedure FindReval(record RcVc RepSpec,string depcode,record AT2UnitVc ATUnitr,var val revalu) 
BEGIN
  record AT2DprVc ATDprr;
  Boolean TrHs;
  record InvrsVc Invrsr;
  val fwd,dpr;
  Date prevdate,testdate;
  val qty;

  revalu = 0;
  dpr = 0;
  TrHs = true;
  Invrsr.InventoryNr = ATUnitr.InventoryNr;
  Invrsr.FileName = "AT2DprVc";
  Invrsr.TransDate = RepSpec.sStartDate;
  while (LoopKey("FileName",Invrsr,3,TrHs)) begin
    if (Invrsr.InventoryNr!=ATUnitr.InventoryNr) then begin TrHs = false; end;
    if (Invrsr.FileName!="AT2DprVc") then begin TrHs = false; end;
    if (Invrsr.TransDate<RepSpec.sStartDate) then begin TrHs = false; end;
    if (Invrsr.TransDate>RepSpec.sEndDate) then begin TrHs = false; end;
    prevdate=AddDay(Invrsr.TransDate,-1);
    if (CheckAssetDepMatch(ATUnitr.InventoryNr,ATUnitr.DepCode,depcode,prevdate)==true) then begin
       if (TrHs) then begin
         ATDprr.SerNr = Invrsr.TransNr;
         if (ReadFirstMain(ATDprr,1,true)) then begin
           AT2FwdBal(ATUnitr.InventoryNr,prevdate,fwd);
           
           qty = ATUnitr.Quantity;
           if (qty==0) then begin qty = 1; end;
           if (testdate==Invrsr.TransDate)  then begin
             revalu = revalu - qty*dpr;
           end; 
           revalu = revalu + qty*ATDprr.StartVal - fwd;
           testdate = Invrsr.TransDate;
           dpr = qty*ATDprr.StartVal - fwd;
         end;
       end;  
    end; 
  end;
  RETURN;      
END; 

procedure GetAssetDepMatch(string InventoryNr,Date enddate,var string dep) 
BEGIN
  Boolean TrHs;
  record InvrsVc Invrsr;
  record AT2TakeVc ATTaker;

  TrHs = true;
  Invrsr.InventoryNr = InventoryNr;
  Invrsr.FileName = "AT2TakeVc";
  Invrsr.TransDate = enddate;
  while (LoopBackKey("FileName",Invrsr,4,TrHs)) begin
    if (Invrsr.InventoryNr!=InventoryNr) then begin TrHs = false; end;
    if (Invrsr.FileName!="AT2TakeVc") then begin TrHs = false; end;
    if (Invrsr.TransDate>enddate) then begin TrHs = false; end;           
    if (TrHs) then begin 
       ATTaker.SerNr = Invrsr.TransNr;
       if (ReadFirstMain(ATTaker,1,true)) then begin
          if (ATTaker.PhysCheckf!=2) then begin
             TrHs = false;
             dep = ATTaker.DepCode;
          end;     
       end;
    end;
  end;    
  RETURN;
END;

procedure Movement(record RcVc RepSpec,string depcode,record AT2UnitVc ATUnitr,var val movval,var val movoutval,string lastdep) 
BEGIN
  Boolean TrHs;
  record InvrsVc Invrsr;
  record AT2TakeVc ATTaker;
  val fwd;
  String 10 lastdepart;
  Date prevdate;

  fwd = 0;
  movval = 0;
  movoutval = 0;
  lastdepart = lastdep;
  TrHs = true;
  Invrsr.InventoryNr = ATUnitr.InventoryNr;
  Invrsr.FileName = "AT2TakeVc";
  Invrsr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransNr",Invrsr,3,TrHs)) begin
    if (Invrsr.InventoryNr!=ATUnitr.InventoryNr) then begin TrHs = false; end;
    if (Invrsr.FileName!="AT2TakeVc") then begin TrHs = false; end;
    if (Invrsr.TransDate<RepSpec.sStartDate) then begin TrHs = false; end;
    if (Invrsr.TransDate>RepSpec.sEndDate) then begin TrHs = false; end;
    if (TrHs) then begin        
       ATTaker.SerNr = Invrsr.TransNr;
       if (ReadFirstMain(ATTaker,1,true)) then begin end;
       if (ATTaker.PhysCheckf!=2) then begin
          if (depcode==Invrsr.Department) then begin  
             AT2FwdBal(ATUnitr.InventoryNr,Invrsr.TransDate,fwd);
             movval = movval + fwd;
	           if (lastdepart==depcode) then begin
               movoutval = movoutval + fwd;	         
             end;
           end else begin   
  	         if (lastdepart==depcode) then begin
               AT2FwdBal(ATUnitr.InventoryNr,Invrsr.TransDate,fwd);
               movoutval = movoutval + fwd;	         
  	         end; 
           end; 
           lastdepart=Invrsr.Department;
       end;
    end;
  end;    
  RETURN;
END;

procedure PrintResultsAT2DepSum(Integer flags0,Integer flags1,string desc,string tstr,Date Purchd,var val fwdbal,var val SMrv,var val movinv,var val reev,var val writeoffv,var val soldv,var val movoutv,Integer divider,Integer pos)
BEGIN 
  Boolean testf;
  val bal,blankv;
  
  testf = false;   
  if (flags0==1) then begin
    if ((fwdbal!=0) or (SMrv!=0) or (movinv!=0) or (reev!=0) or (writeoffv!=0) or (soldv!=0) or (movoutv!=0)) then begin
      testf = true; 
    end;
  end;  
  if (flags0==0) then begin
    if ((SMrv!=0) or (movinv!=0) or (reev!=0) or (writeoffv!=0) or (soldv!=0) or (movoutv!=0)) then begin
      testf = true; 
    end;
  end;
  if (testf) then begin
    if (fwdbal==blankv) then begin fwdbal = 0; end;
    if (SMrv==blankv) then begin SMrv = 0; end;
    if (movinv==blankv) then begin movinv = 0; end;
    if (reev==blankv) then begin reev = 0; end;
    if (writeoffv==blankv) then begin writeoffv = 0; end;
    if (soldv==blankv) then begin soldv = 0; end;
    if (movoutv==blankv) then begin movoutv = 0; end;
    if (flags1==0) then begin
      switch (divider) begin
        case 1: Gray_Divider(20,1);
        case 2: Black_Divider(0,1);
      end;
      StartFormat(15);
       OutString(0,0,tstr,false);
       if (nonblank(desc)) then begin
         OutString(pos,0,desc,false);
       end;
       if (nonblankdate(Purchd)) then begin
         Outdate(260,0,Purchd,false);
       end;
       if (nonblank(desc)) then begin
         EndFormat;
         StartFormat(15);
       end;
       OutVal(2,0,fwdbal,M4Val,true);
       OutVal(3,0,SMrv,M4Val,true);
       OutVal(4,0,movinv,M4Val,true);
       OutVal(5,0,reev,M4Val,true);
       OutVal(6,0,writeoffv,M4Val,true);
       OutVal(7,0,soldv,M4Val,true);
       OutVal(8,0,movoutv,M4Val,true);
       bal = fwdbal + SMrv + movinv + reev - writeoffv - soldv - movoutv;       
       OutVal(9,0,bal,M4Val,true);
      EndFormat;
    end else begin
      if (divider!=0) then begin
        Gray_Divider(30,1);
      end;
      StartFormat(15);
       if (nonblank(desc)) then begin
         OutString(0,0,desc,false);
       end;
       OutString(pos,0,tstr,false);
       if (nonblankdate(Purchd)) then begin
         Outdate(110,0,Purchd,false);
       end;
       OutVal(2,0,fwdbal,M4Val,true);
       OutVal(3,0,SMrv,M4Val,true);
       OutVal(4,0,movinv,M4Val,true);
       OutVal(5,0,reev,M4Val,true);
       OutVal(6,0,writeoffv,M4Val,true);
       OutVal(7,0,soldv,M4Val,true);
       OutVal(8,0,movoutv,M4Val,true);
       bal = fwdbal + SMrv + movinv + reev - writeoffv - soldv - movoutv;
       OutVal(9,0,bal,M4Val,true);
      EndFormat;
    end;
  end;  
  RETURN;
END;

procedure SetBlankVals(var val fwdbal,var val SMr,var val movout,var val dpr,var val writeoff,var val sold,var val fromme,var val revval)
BEGIN  
  fwdbal = 0;
  SMr = 0;
  movout = 0;
  dpr = 0;
  writeoff = 0;
  sold = 0;
  fromme = 0;
  revval = 0;
  RETURN;
END;

procedure AddupTotals(val fwdbal,val pv,val mv,val rv,val wv,val sv,val mvo,
                      var val tfwdbal,var val tSMr,var val tmovin,var val treev,var val twriteoff,var val tsold,var val tmovout)
BEGIN
  tfwdbal = tfwdbal + fwdbal;
  tSMr = tSMr + pv;
  tmovin = tmovin + mv;
  treev = treev + rv;
  twriteoff = twriteoff + wv;
  tsold = tsold + sv;
  tmovout = tmovout + mvo;
  RETURN;
END; 

global
procedure GetInvNrDataDepSum(record RcVc RepSpec,record AT2UnitVc ATUnitr,var val fwdbal,var val Purchval,var val movval,
                             var val reeval,var val wrofval,var val soldval,var val movoutval,string depcode)
BEGIN
  Date wrofd;
  val lastrevv,forwd;
  Boolean wrof;
  String 10 lastdep;
  val qty;
   
  fwdbal = blankval;
  Purchval = blankval;
  movval = blankval;
  movoutval = blankval;
  reeval = blankval;
  wrofval = blankval;
  soldval = blankval;

  qty = ATUnitr.Quantity;
  if (qty==0) then begin qty = 1; end;
  if (DateInRange(ATUnitr.PurchaseDate,RepSpec.sStartDate,RepSpec.sEndDate)) then begin
    if (ATUnitr.DepCode==depcode) then begin
      Purchval = qty*ATUnitr.PurchVal;
    end;
  end;

  GetAssetDepMatch(ATUnitr.InventoryNr,RepSpec.sStartDate,lastdep);
  if (blank(lastdep)) then begin
    lastdep = ATUnitr.DepCode;
  end; 
  if (lastdep==depcode) then begin
    AT2FwdBal(ATUnitr.InventoryNr,AddDay(RepSpec.sStartDate,-1),fwdbal);
  end;

 FindReval(RepSpec,depcode,ATUnitr,reeval); 

 Movement(RepSpec,depcode,ATUnitr,movval,movoutval,lastdep); 
  GetWrofDate(ATUnitr,wrofd,wrof);
  if (nonblankdate(wrofd)) then begin
    if (DateInRange(wrofd,RepSpec.sStartDate,RepSpec.sEndDate)) then begin
      GetAssetDepMatch(ATUnitr.InventoryNr,wrofd,lastdep);
      if (blank(lastdep)) then begin
         lastdep = ATUnitr.DepCode;
      end;
      if (depcode==lastdep) then begin
        AT2FwdBal(ATUnitr.InventoryNr,wrofd,lastrevv);
        if (wrof) then begin
          wrofval = lastrevv;
        end else begin
          soldval = lastrevv;
        end;
      end;
    end else begin
      if ((wrofd<RepSpec.sStartDate) and (nonblankdate(wrofd))) then begin
        fwdbal = blankval;
        Purchval = blankval;
        movval = blankval;
        movoutval = blankval;
        reeval = blankval;
        wrofval = blankval;
        soldval = blankval;
      end;
    end;
  end;
  RETURN;
END;

procedure PrintInventoryNrData(record RcVc RepSpec,record DepVc Depr,record AT2UnitVc ATUnitr,var Boolean printdepf,var Boolean printcatf,
                               var val catfwdbal,var val catSMr,var val catmovin,var val catreev,var val catwriteoff,
                               var val catsold,var val catmovout)
BEGIN
  record InvBalVc InvBalr;
  Boolean testf;
  val fwdbal,pv,mv,rv,wv,sv,mvo;
  string 255 tstr;

  InvBalr.InventoryNr = ATUnitr.InventoryNr;
  InvBalr.CurDepartment = Depr.Code;
  
  if (ReadFirstKey("CurDepartment",InvBalr,2,true)) begin  
    testf = false;        
    GetInvNrDataDepSum(RepSpec,ATUnitr,fwdbal,pv,mv,rv,wv,sv,mvo,Depr.Code);    
    if (RepSpec.flags[0]==1) then begin 
      if ((fwdbal!=0) or (pv!=0) or (mv!=0) or (rv!=0) or (wv!=0) or (sv!=0) or (mvo!=0)) then begin
        testf = true;
      end;
    end;
    if (RepSpec.flags[0]==0) then begin 
      if ((pv!=0) or (mv!=0) or (rv!=0) or (wv!=0) or (sv!=0) or (mvo!=0)) then begin
        testf = true;
      end;
    end;
    if (testf) then begin
      if ((fwdbal!=0) or (pv!=0) or (mv!=0) or (rv!=0) or (wv!=0) or (sv!=0) or (mvo!=0)) then begin
        if (printdepf) then begin
          StartFormat(15);
           OutString(0,0,USetStr(9716) & ": ",false);
           OutString(80,0,Depr.Code,false);
           OutString(120,0,Depr.Description,false);
          EndFormat; 
          Gray_Divider(0,200);
          printdepf = false;
        end;
        if (printcatf) then begin
          StartFormat(15);
           OutString(30,0,USetStr(9717) & ": ",false);
           OutString(100,0,ATUnitr.AT2Code,false);
           GetCategoryName(ATUnitr.AT2Code,tstr);
           OutString(150,0,tstr,false);
          EndFormat; 
          Gray_Divider(30,200);
          printcatf = false;
        end;            

      PrintResultsAT2DepSum(RepSpec.flags[0],RepSpec.flags[1],ATUnitr.Description,InvBalr.InventoryNr,ATUnitr.PurchaseDate,fwdbal,pv,mv,rv,wv,sv,mvo,0,70);
      AddupTotals(fwdbal,pv,mv,rv,wv,sv,mvo,catfwdbal,catSMr,catmovin,catreev,catwriteoff,catsold,catmovout);      
      end;
    end;
  end;  
  RETURN;
END;

global
procedure AT2DepSumRn(var record RcVc RepSpec)
BEGIN
  record DepVc Depr;
  record AT2UnitVc ATUnitr;
  Boolean TrHsDep,TrHsAT,testf,printdepf,printcatf;
  string 10 frdep,todep;
  string 20 lastAT2Code,frcategory,tocategory;
  val catSMr,catmovin,catreev,catwriteoff,catsold,catmovout,catdpr,catfwdbal;
  val depSMr,depmovin,depreev,depwriteoff,depsold,depmovout,depdpr,depfwdbal;
  val totfwdbal,totSMr,totmovin,totreev,totwriteoff,totsold,totmovout;
  Integer rw,pos;
  string 255 tstr,tstr2;
  Date blankd;

  frdep = FirstInRange(RepSpec.f1,10);
  todep = LastInRange(RepSpec.f1,10);  
  frcategory = FirstInRange(RepSpec.f2,20);
  tocategory = LastInRange(RepSpec.f2,20);    
  StartReportJob(USetStr(9715));
   rw = 1;
   HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   HTDepartments(frdep,todep,tstr);
   if ((RepSpec.flags[1]==1) and (nonblank(frdep)) and (frdep==todep)) then begin
     GetDepartmentName(frdep,tstr2);
     tstr = tstr & " ( "& tstr2 & " ) ";
   end;
   Header(rw,tstr,1);
   rw = rw + 1;
   HTCategories(frcategory,tocategory,tstr);
   if ((RepSpec.flags[1]==1) and (nonblank(frcategory)) and (frcategory==tocategory)) then begin
     GetCategoryName(frcategory,tstr2);
     tstr = tstr & " ( "& tstr2 & " ) ";
   end;
   Header(rw,tstr,1);
   rw = rw + 1;
   if (nonblank(RepSpec.ObjStr)) then begin
     HTOBJ(RepSpec.ObjStr,tstr);
     Header(rw,tstr,1);
     rw = rw + 1;
   end;  
   if (RepSpec.flags[0]==0) then begin
     tstr = USetStr(9741);
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
  EndHeader;
  if (RepSpec.flags[1]==0) then begin
    SetRepCol(2,100);
    SetRepCol(3,155);
    SetRepCol(4,210);
    SetRepCol(5,265);
    SetRepCol(6,320);
    SetRepCol(7,375);
    SetRepCol(8,425);
    SetRepCol(9,480);
    StartFormat(15);
     OutString(0,0,USetStr(9716),false);
     OutString(70,0,USetStr(9717)& "/" &USetStr(8807),false);
     OutString(260,0,USetStr(8776),false);
    EndFormat;
    StartFormat(15);
     OutString(2,0,USetStr(5068),true);
     OutString(3,0,USetStr(2331),true);
     OutString(4,0,USetStr(9718),true);
     OutString(5,0,USetStr(9719),true);
     OutString(6,0,USetStr(9720),true);
     OutString(7,0,USetStr(9721),true);
     OutString(8,0,USetStr(9722),true);
     OutString(9,0,USetStr(8098),true);
    EndFormat;
  end else begin
    SetRepCol(2,200);
    SetRepCol(3,240);
    SetRepCol(4,280);
    SetRepCol(5,320);
    SetRepCol(6,360);
    SetRepCol(7,400);
    SetRepCol(8,440);
    SetRepCol(9,480);
    StartFormat(15);
     OutString(0,0,USetStr(9716),false);
     OutString(110,0,USetStr(8776),false);
     OutString(2,0,USetStr(5068),true);
     OutString(4,0,USetStr(9718),true);
     OutString(6,0,USetStr(9720),true);
     OutString(8,0,USetStr(9722),true);
    EndFormat;

    StartFormat(15);
     OutString(50,0,USetStr(9717)& "/" &USetStr(8807),false);
     OutString(3,0,USetStr(2331),true);
     OutString(5,0,USetStr(9719),true);
     OutString(7,0,USetStr(9721),true);
     OutString(9,0,USetStr(8098),true);
    EndFormat;
  end;
  Gray_Divider(0,1);

  Depr.Code = frdep;
  TrHsDep = true;
  while (LoopMain(Depr,1,TrHsDep)) begin
    TrHsAT = true;
    printdepf = true;    
    printcatf = true;
    SetBlankVals(depfwdbal,depSMr,depmovin,depdpr,depwriteoff,depsold,depmovout,depreev); 
    if (nonblank(todep)) then begin
      if (Depr.Code>todep) then begin
        TrHsAT = false;
        TrHsDep = false;
      end;
    end;

    lastAT2Code = "";
    ResetLoop(ATUnitr);
    ATUnitr.AT2Code = frcategory;
    while (LoopKey("AT2Code",ATUnitr,1,TrHsAT)) begin
      if (lastAT2Code<>ATUnitr.AT2Code) then begin
        if (RepSpec.flags[1]==0) then begin
          tstr2 = lastAT2Code;
          pos = 55;
        end else begin  
          tstr2 = USetStr(9735) & " " & USetStr(10599) & ": " & lastAT2Code;
          pos = 30;
        end; 
        PrintResultsAT2DepSum(RepSpec.flags[0],RepSpec.flags[1],"",tstr2,blankd,catfwdbal,catSMr,catmovin,catreev,catwriteoff,catsold,catmovout,1,pos);        
        AddupTotals(catfwdbal,catSMr,catmovin,catreev,catwriteoff,catsold,catmovout,depfwdbal,depSMr,depmovin,depreev,depwriteoff,depsold,depmovout);
        SetBlankVals(catfwdbal,catSMr,catmovin,catreev,catwriteoff,catsold,catmovout,catreev);         
        printcatf = true;
      end;
      testf = true;
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,ATUnitr.Objects)==false) then begin testf = false; end;        
      end;
      if (nonblank(tocategory)) then begin
        if (ATUnitr.AT2Code>tocategory) then begin
          TrHsAT = false;
        end;
      end;      
      if (TrHsAT and testf) then begin                    
        PrintInventoryNrData(RepSpec,Depr,ATUnitr,printdepf,printcatf,catfwdbal,catSMr,catmovin,catreev,catwriteoff,catsold,catmovout);              
    end;    
      lastAT2Code = ATUnitr.AT2Code;
    end;    
     if (RepSpec.flags[1]==0) then begin
       tstr2 = lastAT2Code;
       pos = 55;
     end else begin  
       tstr2 = USetStr(9735) & " " & USetStr(10599) & ": " & lastAT2Code;
       pos = 30;
     end; 
    PrintResultsAT2DepSum(RepSpec.flags[0],RepSpec.flags[1],"",tstr2,blankd,catfwdbal,catSMr,catmovin,catreev,catwriteoff,catsold,catmovout,1,pos);
    AddupTotals(catfwdbal,catSMr,catmovin,catreev,catwriteoff,catsold,catmovout,depfwdbal,depSMr,depmovin,depreev,depwriteoff,depsold,depmovout);
    SetBlankVals(catfwdbal,catSMr,catmovin,catdpr,catwriteoff,catsold,catmovout,catreev); 
     if (RepSpec.flags[1]==0) then begin
       tstr2 = Depr.Code;
       pos = 55;
     end else begin  
       tstr2 = USetStr(9735) & " " & USetStr(10571) & ": " & Depr.Code;
       pos = 0;
     end; 
    PrintResultsAT2DepSum(RepSpec.flags[0],RepSpec.flags[1],"",tstr2,blankd,depfwdbal,depSMr,depmovin,depreev,depwriteoff,depsold,depmovout,1,pos);
    totfwdbal = totfwdbal + depfwdbal;
    totSMr = totSMr + depSMr;
    totmovin = totmovin + depmovin;
    totreev = totreev + depreev;
    totwriteoff = totwriteoff + depwriteoff;
    totsold = totsold + depsold;
    totmovout = totmovout + depmovout;

  end;
  PrintResultsAT2DepSum(RepSpec.flags[0],0,"",USetStr(9735),blankd,totfwdbal,totSMr,totmovin,totreev,totwriteoff,totsold,totmovout,2,0);
  EndJob;
  RETURN;
END;

