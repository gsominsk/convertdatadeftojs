external procedure CUGetStartBalance(record CUVc,string,string,Date,var val,Boolean);
external procedure HT2Per(Date, Date , var string);
external procedure HTCusts(string,string,var string);
external procedure HTCustCat(string,var string);

global
procedure CUHistRn(record RcVc RepSpec)
begin
  record CUVc CUr;
  String 255 tstr;
  String 20 frCu ,toCu,mykey;
  Boolean TrHs,testf,tefal;
  Date i;
  Val QtyCu,QtyCuCat,v,q,b,gp,p,fb,pb,fb1,pb1,p1;
  Val SumCu,SumCuCat,SumCub,SumCuCatb;
  Integer rw,m,rwc,k,keys;
  record BaseCurBlock BCb;

  BlockLoad(BCb);
  frCu = FirstInRange(RepSpec.f1,20); 
  toCu = LastInRange(RepSpec.f1,20); 
  rw = 1;
  StartReportJob(USetStr(9130));
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw, tstr, 1);
  rw = rw + 1;
  HTCusts(frCu,toCu,tstr);
  Header(rw, tstr, 0);
  HTCustCat(RepSpec.f2,tstr);
  Header(rw, tstr, 1);
  rw = rw + 1;
  EndHeader;
  StartFormat(15);
  OutString(15,0,USetStr(9133),false);
  EndFormat;
  StartFormat(15);
  OutString(15,0,USetStr(9322),false);
  OutString(70,0,USetStr(9131),false);
  OutString(150,0,USetStr(9335),false);
  OutString(270,0,USetStr(3250),true);
  OutString(350,0,USetStr(3249),true);
  OutString(420,0,USetStr(9134),true);
  OutString(440,0,USetStr(9135),false);
  EndFormat;
  
  if (RepSpec.flags[0]==0) then begin//sort by code
    CUr.Code = frCu;
    mykey = "Code";
    keys = 1; 
  end;
  if (RepSpec.flags[0]==1)  begin//sort by Cat
    CUr.CustCat = RepSpec.f2;
    CUr.Code = "";
    mykey = "Group";
    keys = 2; 
  end;

  SumCuCat = 0; QtyCuCat = 0; SumCuCatb = 0;
  Gray_Divider(20,460);  
  TrHs = true;
  while (LoopKey(mykey,CUr,keys,TrHs)) begin
     m=1; testf = true; SumCu = 0; QtyCu = 0; SumCub = 0; gp = 0; b=0;
     if nonblank(frCu) then begin
       if (CUr.Code <> frCu) then begin testf = false;  end;
     end;    
     if nonblank(RepSpec.f2) then begin
       if (CUr.CustCat <> RepSpec.f2) then begin testf = false; end; 
     end;      
     if (CUr.CUType==0) then begin testf = false; end;     
     if (testf == true) then begin
       q = GetTurnover(CUr,"paidvalue",RepSpec.sStartDate,RepSpec.sEndDate);
       v = GetTurnover(CUr,"salesinclvat",RepSpec.sStartDate,RepSpec.sEndDate);
       CUGetStartBalance(CUr,"balance",RepSpec.CurncyCode,RepSpec.d2,fb,blank(CUr.CurncyCode) or CUr.CurncyCode==BCb.BaseCur1);
//       fb1 = GetBalance(CUr,"paidvalue",RepSpec.d2);
//       fb = -fb1 - fb; "balance" includes paidvalue
       fb = -fb;
       pb1 = GetBalance(CUr,"paidvalue",RepSpec.d1);
       pb = GetBalance(CUr,"salesinclvat",RepSpec.d1);
       pb = pb1 - pb;
       p1 = GetBalance(CUr,"paidvalue",RepSpec.sEndDate);
       p = GetBalance(CUr,"salesinclvat",RepSpec.sEndDate);
       p = -p1 - p;
       b = fb;
       if (q <> 0 or v <> 0 or fb<>0 or pb<>0) then begin
         StartFormat(15);
         OutString(15,0,CUr.Code,false);
         OutString(70,0,CUr.CustCat,false);
         OutString(130,0,CUr.Name,false);
         EndFormat;
         Gray_Divider(20,460);
         StartFormat(15);
         OutString(140,0,USetStr(9136),true);
         OutVal(160,0,fb,M4Val,false);
         EndFormat;
         Black_Divider(20,220);
         StartFormat(15);
         for (i=RepSpec.sStartDate;i<=RepSpec.sEndDate;i=AddMonth(i,1)) begin
           q = GetTurnover(CUr,"paidvalue",i,i);
           if (m==1) then begin
             OutString(220,0,USetStr(9137) & " I",true); 
           end;
           if (m==4) then begin
             OutString(220,0,USetStr(9137) & " II",true); 
             Gray_Divider(250,460); 
           end;
           if (m==7) then begin
             OutString(220,0,USetStr(9137) & " III",true);  
             Gray_Divider(250,460);
           end;
           if (m==10) then begin
             OutString(220,0,USetStr(9137) & " IV",true); 
             Gray_Divider(250,460);
           end;               
           OutVal(270,0,q,M4Val,true);
           QtyCu = QtyCu + q;//receipts
           v = GetTurnover(CUr,"salesinclvat",i,i);
           OutVal(350,0,v,M4Val,true);
           SumCu = SumCu + v;//sales
           b = b + v + q; //prelim. balance w/o fwd. bal.
           if (q==0 and v==0) then begin 
             gp = 0;
             OutVal(420,0,gp,M4Val,true); 
           end else begin
             OutVal(420,0,v + q,M4Val,true); 
           end;
           OutString(455,0,m,false);
           m = m + 1;  
         end;
         EndFormat; 
         Gray_Divider(250,460);
         StartFormat(15);
         OutString(220,0,USetStr(9138),true);
         OutVal(270,0,QtyCu,M4Val,true);
         OutVal(350,0,SumCu,M4Val,true);
         OutVal(420,0,b,M4Val,true);
         EndFormat;   
         Gray_Divider(20,460);
         StartFormat(15);
         OutString(140,0,USetStr(9124),true);
         OutVal(160,0,p,M4Val,false);
         tstr = USetStr(9141) & "    ";
         tstr = tstr & RepSpec.d1;
         OutString(220,0,tstr,false);
         OutVal(370,0,pb,M4Val,false);
         EndFormat;
         SumCub = SumCub + b;//total balance by Cust
         SumCuCat = SumCuCat + SumCu;
         QtyCuCat = QtyCuCat + QtyCu;
         SumCuCatb = SumCuCatb + SumCub;
         Black_Divider(20,460);  
       end; 
     end; 
   end;
   if nonblank(RepSpec.f2) then begin
     StartFormat(15);
     OutString(200,0,USetStr(9139),true);
     OutVal(270,0,QtyCuCat,M4Val,true);
     OutVal(350,0,SumCuCat,M4Val,true);
     OutVal(420,0,SumCuCatb,M4Val,true);
     EndFormat; 
   end;
   if blank(frCu) and blank(RepSpec.f2) then begin
     StartFormat(15);
     OutString(200,0,USetStr(9140),true);
     OutVal(270,0,QtyCuCat,M4Val,true);
     OutVal(350,0,SumCuCat,M4Val,true);
     OutVal(420,0,SumCuCatb,M4Val,true);
     EndFormat; 
   end;
   Black_Divider(20,460);
   Black_Divider(20,460);
   EndJob;
return;
end;
