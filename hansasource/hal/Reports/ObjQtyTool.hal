#ifdef HAL
external procedure GetAccStartBalance2(record ObjBalVc,Date,string,var val);

global
procedure FindObjQtyFwdBalances(record ObjBalVc ObjBalr,string debcol,string credcol,Date startdate,var val fwdbal,var val qtyfwd,Boolean wwf)
BEGIN
  val t;
  
  GetAccStartBalance2(ObjBalr,startdate,debcol,fwdbal);  
  GetAccStartBalance2(ObjBalr,startdate,credcol,t);  
  fwdbal = fwdbal - t;  
  if (wwf) then begin
    qtyfwd = 0;
    if ((ObjBalr.AccNumber=="5031") or (ObjBalr.AccNumber=="5032") or (ObjBalr.AccNumber=="5033") or (ObjBalr.AccNumber=="5034") or (ObjBalr.AccNumber=="4522")) then begin
      GetAccStartBalance2(ObjBalr,startdate,"debquant",qtyfwd);    
      GetAccStartBalance2(ObjBalr,startdate,"credquant",t);  
      qtyfwd = qtyfwd - t;
    end;
  end else begin
    GetAccStartBalance2(ObjBalr,startdate,"debquant",qtyfwd);    
    GetAccStartBalance2(ObjBalr,startdate,"credquant",t);  
    qtyfwd = qtyfwd - t;
  end;    
  RETURN;
END;

global
procedure FindAcumulatedPeriod(Date startdate, var Date sresd,var Date eresd)
BEGIN
  record YearBlock YearRec;
  row YearBlock yearrw;
  Integer i,yrwcnt;


  BlockLoad(YearRec);
  yrwcnt = MatRowCnt(YearRec);
  for (i=0;i<yrwcnt;i=i+1) begin
    MatRowGet(YearRec,i,yearrw);
    if (DateInRange(startdate,yearrw.StartDate,yearrw.EndDate)) then begin
      sresd = yearrw.StartDate;
      eresd = yearrw.EndDate;
      goto L88;
    end;
  end;
L88:;  
  RETURN;
END;
       
global
procedure GetChar(string in,var string out,Integer i)
BEGIN
  string 255 tstr;
  
  if (i>len(in)) then begin 
    out = "";
    goto L999; 
  end;
  tstr = Right(in,(len(in)-i)+1); 
  out = Left(tstr,1); 
L999:;  
  RETURN;
END;

global
procedure  CheckObjectAccRow(record FBVc totFBr,string accnumber,string object,val v,val q,val av,val aq)
BEGIN
  row FBVc FBrw;
  Integer i,smcnt;
  string 10 subacc;
  
//  subacc = Left(accnumber,1);
  smcnt = MatRowCnt(totFBr);
  for (i=0;i<smcnt;i=i+1) begin
    MatRowGet(totFBr,i,FBrw);
    if ((accnumber==FBrw.AccNumber) and (object==FBrw.Comment)) then begin
      FBrw.DebVal = FBrw.DebVal + v;
//      FBrw.CredVal = FBrw.CredVal + q;
      FBrw.Deb2Val = FBrw.Deb2Val + av;
//      FBrw.Cred2Val = FBrw.Cred2Val + aq;
      MatRowPut(totFBr,i,FBrw);
      goto L9999;
    end;
  end;
  FBrw.AccNumber = accnumber;
  FBrw.Comment = object;
  FBrw.DebVal =  v;
//  FBrw.CredVal = q;
  FBrw.Deb2Val =  av;
//  FBrw.Cred2Val = aq;
  MatRowPut(totFBr,smcnt,FBrw);  
L9999:;  
  RETURN;
END;

procedure SumuptotFB(record FBVc totFBr,Integer rownr,record FBVc actotFBr)
BEGIN
  row FBVc FBrw;
  row FBVc FBacrw;
  Integer i,rwcnt;

  MatRowGet(totFBr,rownr,FBrw);
  
  rwcnt = MatRowCnt(actotFBr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(actotFBr,i,FBacrw);
    if (FBacrw.AccNumber==FBrw.AccNumber) then begin
      FBacrw.DebVal = FBacrw.DebVal + FBrw.DebVal;
//      FBacrw.CredVal = FBacrw.CredVal + FBrw.CredVal;
      FBacrw.Deb2Val = FBacrw.Deb2Val + FBrw.Deb2Val;
//      FBacrw.Cred2Val = FBacrw.Cred2Val + FBrw.Cred2Val;
      MatRowPut(actotFBr,i,FBacrw);
      goto L77;
    end;
  end;
  FBacrw.AccNumber = FBrw.AccNumber;
  FBacrw.Comment = FBrw.Comment;
  FBacrw.DebVal =  FBrw.DebVal;
//  FBacrw.CredVal = FBrw.CredVal;
  FBacrw.Deb2Val =  FBrw.Deb2Val;
//  FBacrw.Cred2Val = FBrw.Cred2Val;
  MatRowPut(actotFBr,rwcnt,FBacrw);  
L77:;  
  RETURN;
END;

global
procedure SortObjQtySubaccounts(record FBVc FBr,record FBVc acFBr,Integer rwcnt)
BEGIN
  Integer zmiana,i;
  row FBVc tmp;
  row FBVc res;
  row FBVc acum;
  
  zmiana = 1;
  while (zmiana==1) begin
    zmiana = 0;
    for (i=0;i<rwcnt-1;i=i+1) begin
      MatRowGet(FBr,i,res);
      MatRowGet(FBr,i+1,acum);
      if ((res.AccNumber>acum.AccNumber)) then begin
        zmiana = 1;
        tmp.AccNumber = res.AccNumber;
        tmp.Comment = res.Comment;
        tmp.DebVal = res.DebVal;
        tmp.CredVal = res.CredVal;
        tmp.Deb2Val = res.Deb2Val;
        tmp.Cred2Val = res.Cred2Val;

        res.AccNumber = acum.AccNumber;
        res.Comment = acum.Comment;
        res.DebVal = acum.DebVal;
        res.CredVal = acum.CredVal;
        res.Deb2Val = acum.Deb2Val;
        res.Cred2Val = acum.Cred2Val;

        acum.AccNumber = tmp.AccNumber;
        acum.Comment = tmp.Comment;
        acum.DebVal = tmp.DebVal;
        acum.CredVal = tmp.CredVal;
        acum.Deb2Val = tmp.Deb2Val;
        acum.Cred2Val = tmp.Cred2Val;
        MatRowPut(FBr,i,res);
        MatRowPut(FBr,i+1,acum);        
      end;
    end;
  end;   
    
  for (i=0;i<rwcnt;i=i+1) begin
    SumuptotFB(FBr,i,acFBr);
  end;
  
  RETURN;
END;

global
procedure PrintSubaccVals(var record FBVc FB2r)
BEGIN
  row FBVc FBrw;
  Integer i,smcnt;
  
  smcnt = MatRowCnt(FB2r);
  if (smcnt>0) then begin Gray_Divider(15,1); end;
  for (i=0;i<smcnt;i=i+1) begin
    MatRowGet(FB2r,i,FBrw);  
    StartFormat(15);
       OutString(15,0,FBrw.AccNumber,false);
       OutString(45,0,USetStr(8681),false);
       OutVal(240,0,FBrw.DebVal,M4Val,true);
       OutVal(320,0,FBrw.Deb2Val,M4Val,true);
       OutVal(400,0,FBrw.CredVal,M4Val,true);//JJ
       OutVal(480,0,FBrw.Cred2Val,M4Val,true);
    EndFormat;                    
  end;  
  RecordNew(FB2r);
  if (smcnt>0) then begin Gray_Divider(15,1); end;
  RETURN;
END;

global
procedure AddSubAccRow(record FBVc FB2r,string subacc,val v,val q,val av,val aq)
BEGIN
  row FBVc FBrw;
  Integer i,smcnt;
  
  smcnt = MatRowCnt(FB2r);
  for (i=0;i<smcnt;i=i+1) begin
    MatRowGet(FB2r,i,FBrw);
    if (subacc==FBrw.AccNumber) then begin
      FBrw.DebVal = FBrw.DebVal + v;
      FBrw.CredVal = FBrw.CredVal + q;
      FBrw.Deb2Val = FBrw.Deb2Val + av;
      FBrw.Cred2Val = FBrw.Cred2Val + aq;
      MatRowPut(FB2r,i,FBrw);
      goto L99999;
    end;
  end;  
  FBrw.AccNumber = subacc;
  FBrw.DebVal =  v;
  FBrw.CredVal = q;
  FBrw.Deb2Val =  av;
  FBrw.Cred2Val = aq;
  MatRowPut(FB2r,smcnt,FBrw);  
L99999:;  
  RETURN;
END;

global
procedure GetAccountName(string accnumber,var string accname)
BEGIN
  record AccVc Accr;
  
  accname = "";
  Accr.AccNumber = accnumber;
  if (ReadFirstMain(Accr,1,true)) then begin
    accname = Left(Accr.Comment,10);
  end;
  RETURN;
END;

global
function Boolean CheckObjType(string objcode,string otcode)
BEGIN
  Boolean res;
  record ObjVc Objr;
  
  res = false;
  Objr.Code = objcode;
  if (ReadFirstMain(Objr,1,true)) then begin
    if (Objr.OTCode==otcode) then begin res = true; end;
  end;
  CheckObjType = res;
  RETURN;
END;

global
function Boolean CheckObjClosed(string objcode)
BEGIN
  Boolean res;
  record ObjVc Objr;
  
  res = false;
  Objr.Code = objcode;
  if (ReadFirstMain(Objr,1,true)) then begin
    if (Objr.TerminateFlag!=0) then begin res = true; end;
  end;
  CheckObjClosed = res;
  RETURN;
END;

global
procedure PrintObjQtySubAcc(record FBVc totacFBr)
BEGIN
  row FBVc FBrw;
  Integer i,smcnt;
  string 255 lastsubacc,tstrsubacc,tstr;
  val subaccv,subaccq,subaccav,subaccaq;
  
  StartFormat(15);
   OutString(0,0,USetStr(8681),false);
  EndFormat;                             
  smcnt = MatRowCnt(totacFBr);    
  for (i=0;i<smcnt;i=i+1) begin
    MatRowGet(totacFBr,i,FBrw);
    tstrsubacc = Left(FBrw.AccNumber,1);
    if (lastsubacc<>tstrsubacc) then begin
      if (nonblank(lastsubacc)) then begin
        StartFormat(15);
         OutString(11,0,lastsubacc,false);
         OutString(35,0,USetStr(8681),false);         
         OutVal(240,0,subaccv,M4Val,true);
//         OutVal(260,0,subaccq,M4Val,true);
         OutVal(320,0,subaccav,M4Val,true);
//         OutVal(480,0,subaccaq,M4Val,true);
        EndFormat;                    
        subaccv = 0;
        subaccq = 0;
        subaccav = 0;
        subaccaq = 0;
      end;
      lastsubacc = tstrsubacc;
    end;
    StartFormat(15);
     OutString(0,0,FBrw.AccNumber,false);
	   GetAccountName(FBrw.AccNumber,tstr);
     OutString(30,0,tstr,false);
     OutVal(240,0,FBrw.DebVal,M4Val,true);
//     OutVal(260,0,FBrw.CredVal,M4Val,true);
     OutVal(400,0,FBrw.Deb2Val,M4Val,true);
//     OutVal(480,0,FBrw.Cred2Val,M4Val,true);
     EndFormat;
     subaccv = subaccv + FBrw.DebVal;
//     subaccq = subaccq + FBrw.CredVal;
     subaccav = subaccav + FBrw.Deb2Val;
//     subaccaq = subaccaq + FBrw.Cred2Val;
  end;  
  if (nonblank(lastsubacc)) then begin
    StartFormat(15);
     OutString(11,0,lastsubacc,false);
     OutString(35,0,USetStr(8681),false);         
     OutVal(240,0,subaccv,M4Val,true);
//     OutVal(260,0,subaccq,M4Val,true);
     OutVal(320,0,subaccav,M4Val,true);
//     OutVal(480,0,subaccaq,M4Val,true);     
    EndFormat;                    
  end;
  RETURN;
END;


#endif
