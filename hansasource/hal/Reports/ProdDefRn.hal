external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean ItemInItemGroupOrClass(string,string,string);
external procedure FindMinLevel(var val, string, string,Boolean);
external function roundmode SetRoundModeD(Integer);
external procedure HTArtSel(string,string, var string);
external procedure HTDetailLevel(Integer, var string);
external procedure HTSort1(Integer, var string);
external procedure ExpandProdRows(var Array string,var Array string,var Array val,var Array val,var Array val,
                                  var Array val,var Array val,var Array val,var Array val,var LongInt,
                                  string,string,string,var val,Boolean,Integer,Boolean);


procedure Expand2Production(string item,string location,string recepy,Integer mode,var val maxp,var val ordp,Boolean print,Integer multilev,val wantedp)
BEGIN
  record INVc INr;
  Array string 20 pdpItem;
  Array string 60 pdpName;
  Array val pdpinqty;
  Array val pdpoutqty;
  Array val pdporgstock;
  Array val pdpcurstock;
  Array val pdpproduce;
  Array val pdporderstock;
  Array val pdppurord;
  LongInt arrcnt,i;
  val mulfact2,t,t2;
  Array record INVc aINr;
  Boolean firstf;

  arrcnt = -1;
  maxp = 0;
  ExpandProdRows(pdpItem,pdpName,pdpinqty,pdpoutqty,pdporgstock,pdpcurstock,pdpproduce,pdporderstock,pdppurord,arrcnt,item,location,recepy,mulfact2,print,multilev,true);
  if (print) then begin
    for (i=0;i<=arrcnt;i=i+1) begin
      if (pdpinqty[i]!=0) then begin        
        StartFormat(15);
        OutString(2,0,pdpItem[i],false);
        OutVal(3,0,pdporgstock[i],M45Val,true);
        OutVal(4,0,pdporderstock[i],M45Val,true);
        t = wantedp * pdpinqty[i];
        t = t /mulfact2;
        OutVal(5,0,t,M45Val,true);
        t2 = pdporgstock[i] - pdporderstock[i];
        t2 = t2 - t;
        OutVal(6,0,t2,M45Val,true);
        OutVal(7,0,pdppurord[i],M45Val,true);
        t = blankval;
        INr.Code = pdpItem[i];
        if (ReadFirstMain(INr,1,true)) then begin
          FindMinLevel(t,location,INr.Code,false);
          if (blank(t)) then begin
            t = INr.MinLevel;
          end;
        end;
        aINr[i] = INr;
        t = t - t2;
        if (t<=0) then begin
          t = blankval;
        end;  
        t = t - pdppurord[i];
        if (t<0) then begin t = 0; end;
        OutVal(1,0,t,M4UVal,true);
        EndFormat;
      end;
    end;
  end;
  if (arrcnt<0) then begin
    goto LExpand2Production;
  end;  
  maxp = 0;
  if (ordp!=-1) then begin
    ordp = 0;
  end;
  firstf = true;
  for (i=0;i<=arrcnt;i=i+1) begin
    if (pdpinqty[i]!=0) then begin        
      INr = aINr[i];
      if (INr.ItemType!=1) then begin goto LSKIPROW; end;
      t = pdporgstock[i]/pdpinqty[i];
      if (firstf) then begin
        maxp = t;
        if (ordp!=-1) then begin
          ordp = pdporgstock[i] - pdporderstock[i];
          ordp = ordp / pdpinqty[i];
        end;
        firstf = false;
      end else begin
        if ((pdpinqty[i]!=blankval) and (pdpinqty[i]!=0)) then begin
          if (t<maxp) then begin
            maxp = t;
          end;  
        end;
        if (ordp!=-1) then begin
          t = t - pdporderstock[i];
          if (t<ordp) then begin
            ordp = t;
          end;  
        end;  
      end;
    end;
LSKIPROW:;    
  end;
  maxp = maxp*mulfact2;
  t = 0.49;
  maxp = maxp - t;
  maxp = Round(maxp,SetRoundModeD(0));
LExpand2Production:;
  RETURN; 
END;

global
procedure ProdDefRn(record RcVc RepSpec)
BEGIN
  record INVc INr;
  Boolean TrHs,itemout,testf;
  val sum1,maxp,nilv;
  string 20 fromart,toart;
  string 255 tstr,ckey;
  Integer keys,rw;

  rw = 1;
  fromart = FirstInRange(RepSpec.f1,20);
  toart = LastInRange(RepSpec.f1,20);
  itemout = false;
  StartReportJob(USetStr(5030));
   HTArtSel(RepSpec.f1,RepSpec.f3,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   if (HasItemClassification) then begin
     HTItemClass(RepSpec.f4,tstr);
     if (nonblank(tstr)) then begin
       Header(rw,tstr,1);
       rw = rw + 1;
     end;
   end;   
   HTDetailLevel(RepSpec.ArtMode,tstr);
   Header(rw,tstr,0);
   if (RepSpec.vals0!=blankval) then begin
     tstr = USetStr(5032);
     tstr = tstr & " ";
     tstr = tstr & RepSpec.vals0;
     Header(rw,tstr,1);
   end;
  EndHeader;
  SetRepCol(2,70);
  SetRepCol(3,230);
  SetRepCol(4,280);
  SetRepCol(5,330);
  SetRepCol(6,380);
  SetRepCol(7,430);
  StartFormat(15);
  OutString(0,0,USetStr(5022),false);
  OutString(100,0,USetStr(5023),false);
  OutString(3,0,USetStr(5024),true);
  OutString(4,0,USetStr(5025),true);
  OutString(5,0,USetStr(5031),true);
  OutString(6,0,USetStr(2348),true);
  OutString(7,0,USetStr(2347),true);
  OutString(1,0,USetStr(2334),true);
  EndFormat;
  INr.Code = fromart;
  ckey = "Code";
  keys = 1;
  Gray_Divider(0,1);
  TrHs = true;
  while (LoopKey(ckey,INr,keys,TrHs)) begin
    if (TrHs) then begin
      if (nonblank(toart)) then begin
        if (INr.Code>toart) then begin
          TrHs = false;
        end;
      end;    
    end;
    if (TrHs) then begin
      testf = true;
//      if ((INr.ItemType<1) or (INr.ItemType>2)) then begin testf = false; end;//structure items ?
      if (INr.ItemType!=1) then begin testf = false; end;
      if (blank(INr.Recepy)) then begin testf = false; end;
      if (nonblank(toart)) then begin
        if (INr.Code>toart) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        testf = ItemInItemGroupOrClass(INr.Code,RepSpec.f3,RepSpec.f4);
      end;         
    end;
    if (testf and TrHs) then begin
      itemout = true;
      StartFormat(15);
      OutString(0,0,INr.Code,false);
      OutString(100,0,INr.Name,false);
      EndFormat;
      nilv = -1;
      Expand2Production(INr.Code,RepSpec.FirstAcc,INr.Recepy,1,maxp,nilv,true,RepSpec.flags[1],RepSpec.vals0);
      Black_Divider(2,1);
      StartFormat(15);
      OutString(6,0,USetStr(5026),true);
      OutVal(1,0,maxp,M4UVal,true);
      EndFormat;
      Gray_Divider(0,1);
    end;
  end;
  Gray_Divider(0,1);
  EndJob; 
  RETURN;
END;