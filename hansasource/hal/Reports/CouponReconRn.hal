external procedure HT2Per(Date, Date , var string);

procedure PrintLine(Integer sid,val totrcvv,LongInt totrcv)
begin
  StartFormat(15);
   OutString(0,0,USetStr(sid),false);
   OutLongInt(100,0,totrcv,false);
   OutVal(200,0,totrcvv,M4Val,true);
  EndFormat;
  return;
end;

global
procedure CouponReconRn(record RcVc RepSpec)
begin
  Integer rw;
  string 255 tstr;
  record CouponVc Couponr;
  Boolean found,testf;
  val totrcvv,totdepv,totcredv,totbouv,totcanv;
  val totv;
  LongInt totrcv,totdep,totcred,totbou,totcan;
  LongInt tot;
  
  StartReportJob(USetStr(17780));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (nonblank(RepSpec.f1)) then begin
    tstr = USetStr(17781) & ": " & RepSpec.f1;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  EndHeader;
  StartFormat(15);
   OutString(0,0,USetStr(17787),false);
   OutString(100,0,USetStr(17788),false);
   OutString(200,0,USetStr(17789),true);
  EndFormat;
  Gray_Divider(0,1);  
  
  totrcv = 0; totdep = 0; totcred = 0; totbou = 0; totcan = 0; tot = 0;
  found = true;
  Couponr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",Couponr,1,found)) begin
    if (Couponr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (nonblank(RepSpec.f1)) then begin
        if (Couponr.Batch!=RepSpec.f1) then begin testf = false; end;
      end;
      if (testf) then begin
        switch (Couponr.Status) begin
          case 0:
            totrcvv = totrcvv + Couponr.Amount;
            totrcv = totrcv + 1;
          case 1:
            totdepv = totdepv + Couponr.Amount;
            totdep = totdep + 1;
          case 3:
            totcredv = totcredv + Couponr.Amount;
            totcred = totcred + 1;
          case 4:
            totbouv = totbouv + Couponr.Amount;
            totbou = totbou + 1;
          case 5:
            totcanv = totcanv + Couponr.Amount;
            totcan = totcan + 1;
        end;
      end;
    end;
  end;
  PrintLine(17782,totrcvv,totrcv); totv = totv + totrcvv; tot = tot + totrcv;
  PrintLine(17783,totdepv,totdep); totv = totv + totdepv; tot = tot + totdep;
  PrintLine(17784,totcredv,totcred); totv = totv + totcredv; tot = tot + totcred;
  PrintLine(17785,totbouv,totbou); totv = totv + totbouv; tot = tot + totbou;
  PrintLine(17786,totcanv,totcan); totv = totv + totcanv; tot = tot + totcan;
  Gray_Divider(0,1);  
  PrintLine(0,totv,tot);
  EndJob;
  return;
end;