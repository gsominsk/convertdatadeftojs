external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure GetCustCat(string,var string);
external procedure HTSaleMan(string, var string);
external procedure HTNr(Integer,Integer,LongInt,LongInt,var string);
external procedure HTCusts(string,string,var string);
external procedure HT2Per(Date, Date , var string);
external procedure PrintRentQTDetail(record RentQTVc);
external procedure PrintRentQTDetailHeader();

procedure HTDetailLevel ( Integer lev,var string res )
begin
   res = "";
  if ( lev == 0 ) then begin res = USetStr(1159); end;
  if ( lev == 1 ) then begin res = USetStr(1160); end;
  return;
end;
/*
procedure RepRentQT( record RentQTVc RentQTp)
begin

  Integer i,rwcnt;
  Row RentQTVc RentQTrw;
  
  StartFormat(15);
  OutString(0,"DblRentQT",RentQTp.SerNr,false);
  OutDate(130,0,RentQTp.TransDate,false);
  OutString(220,0,RentQTp.PayDeal,false);
  OutDate(440,0,RentQTp.MakeContactDate,true);
  EndFormat;
  StartFormat(15);
  OutString(50,0,RentQTp.CustCode,false);
  OutString(205,0,RentQTp.Addr0,false);
  EndFormat;
  StartFormat(15);
  OutString(50,0,RentQTp.CustCat,false);
  OutString(205,0,RentQTp.Addr1,false);
  EndFormat;
  StartFormat(15);
  OutString(50,0,RentQTp.OurContact,false);      
  OutString(205,0,RentQTp.Addr2,false);
  EndFormat;
  StartFormat(15);
  OutString(50,0,RentQTp.Phone,false);
  OutString(205,0,RentQTp.Addr3,false);
  EndFormat;
  if (nonblank(RentQTp.ClientContact)) then begin
    StartFormat(15);
    OutString(205,0,RentQTp.ClientContact,false);      
    EndFormat;
  end;
  if (nonblank(RentQTp.CurncyCode)) then begin
    StartFormat(15);
    OutString(460,0,RentQTp.CurncyCode,true);
    EndFormat;
  end;
  rwcnt = MatRowCnt(RentQTp);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(RentQTp,i,RentQTrw);
//    if (RentQTrw.stp == 1) then begin
      StartFormat(15);
      OutString(20,0,RentQTrw.ArtCode,false);
      OutString(124,0,RentQTrw.Quant,true);
      OutString(130,0,RentQTrw.Spec,false);
      OutString(340,0,RentQTrw.Price,true);
      OutString(370,0,RentQTrw.vRebate,true);
      OutString(460,0,RentQTrw.Sum,true);
      OutString(480,0,RentQTrw.VATCode,true);
      EndFormat;
//    end;
  end;
  Black_Divider(380,460);
  StartFormat(15);
  if (RentQTp.ExportFlag!=0) then begin
    OutString(20,0,USetStr(2568),false);
  end;
  OutString(100,0,RentQTp.Objects,false);
  OutString(260,0,RentQTp.Sum1,true);
  OutString(360,0,RentQTp.Sum3,true);
  OutString(460,0,RentQTp.Sum4,true);
  EndFormat;
  return;
end;
*/
procedure PrintRentQTListTotals(string curcode,val subtot,val total)
begin
  StartFormat(15);
  OutString(290,0,USetStr(2685),false);
  OutVal(440,0,subtot,M4Val,true);
  OutString(445,0,curcode,false);
  EndFormat;
  StartFormat(15);
  OutString(290,0,USetStr(2687),false);
  OutVal(440,0,total,M4Val,true);
  OutString(445,0,curcode,false);
  EndFormat;
  return;
end;

global
procedure RentQTJRn( record RcVc RepSpec )
begin

  Record RentQTVc RentQTr;
  record BaseCurBlock bascur;
  integer rwc,k;
  Boolean TrHs,TrHs1;
  val Tot1Sum,Tot2Sum;
  val sub1tot,sub2tot;
  integer frnr,tonr;
  val Tot1SumG,Tot2SumG;
  val sub1totG,sub2totG;
  Boolean testf;
  LongInt afr,ato;
  String 255 tstr;
  string 5 fromcl,tocl;
  Integer rw;
  val temp;
  Date mcd;
  
  BlockLoad(bascur);
  rw = 1;
  afr = FirstInRange(RepSpec.f1,10);
  ato = LastInRange(RepSpec.f1,10);
  fromcl = FirstInRange(RepSpec.FirstAcc,5);
  tocl = LastInRange(RepSpec.FirstAcc,5);
  RepSpec.d1 = StringToDate(FirstInRange(RepSpec.Stext,10));
  RepSpec.d2 = StringToDate(LastInRange(RepSpec.Stext,10));
  
  StartReportJob(USetStr(2694));
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTDetailLevel(RepSpec.ArtMode,tstr);
  Header(rw,tstr,0);
  HTNr(2689,2690,afr,ato,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if nonblank(RepSpec.FirstAcc) then begin Header(rw,USetStr(8326) & ": " & RepSpec.FirstAcc,0); end;
  HTCusts(RepSpec.f2,RepSpec.f2,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTSaleMan(RepSpec.AccStr,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;  
  end; 
  EndHeader;
  sub1tot = 0;
  sub2tot = 0;
  

  if (RepSpec.ArtMode == 0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(2682),false);
    OutString(50,0,USetStr(2683),false);
    OutString(120,0,USetStr(2691),false);
    OutString(205,0,USetStr(2684),false);
    if blank(RepSpec.AccStr) then begin
      OutString(350,0,USetStr(4908),false);
    end;
    OutString(440,0,USetStr(2687),true);
    EndFormat;
  end;
  if ( RepSpec.ArtMode == 1 ) then begin
    PrintRentQTDetailHeader;
/*
    StartFormat(15);
    OutString(0,0,USetStr(2682),false);
    OutString(130,0,USetStr(2683),false);
    OutString(360,0,USetStr(2691),false);
    EndFormat;
*/
  end;
  RentQTr.SerNr = afr;
  if (RepSpec.ArtMode==0) then begin
    Gray_Divider(0,1);
  end;
  TrHs = true;
  while LoopMain(RentQTr,1,TrHs) begin
    if (ato!=-1) and (RentQTr.SerNr>ato) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.FirstAcc)) then begin
        if ((fromcl>RentQTr.AgreeType) or (tocl<RentQTr.AgreeType)) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.f2) and (RepSpec.f2 <> RentQTr.CustCode)) then begin testf = false; end;
      if (nonblank(RepSpec.AccStr) and (RepSpec.AccStr <> RentQTr.SalesMan)) then begin testf = false; end;
      if (DateInRange(RentQTr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;
      if (nonblank(RepSpec.Stext)) then begin
        mcd = StringToDate(RentQTr.MakeContactDate);
        if nonblankdate(mcd) then begin
          if (DateInRange(mcd,RepSpec.d1,RepSpec.d2)==false) then begin
            testf = false;
          end; 
        end else begin
          if nonblank(RentQTr.MakeContactDate) then begin
            if ( RentQTr.MakeContactDate <> RepSpec.Stext ) then begin
              testf = false;
            end;
          end;
        end;
      end; 
      if (RentQTr.Status==1) then begin testf = false; end;
      if (testf) then begin
        if (nonblank(RepSpec.LastAcc)) then begin
          GetCustCat(RentQTr.CustCode,tstr);
          if (tstr!=RepSpec.LastAcc) then begin
            testf = false;
          end;
        end;
      end;
      if (testf) then begin
        temp = MulRateToBase1(RentQTr.CurncyCode,RentQTr.Sum4,RentQTr.FrRate,RentQTr.ToRateB1,RentQTr.ToRateB2,RentQTr.BaseRate1,RentQTr.BaseRate2,DefaultCurRoundOff);
        Tot1Sum = Tot1Sum + temp;
        temp = MulRateToBase1(RentQTr.CurncyCode,RentQTr.Sum1,RentQTr.FrRate,RentQTr.ToRateB1,RentQTr.ToRateB2,RentQTr.BaseRate1,RentQTr.BaseRate2,DefaultCurRoundOff);
        sub1tot = sub1tot + temp;
        if (RepSpec.flags[12]==1) then begin
          temp = MulRateToBase2(RentQTr.CurncyCode,RentQTr.Sum4,RentQTr.FrRate,RentQTr.ToRateB1,RentQTr.ToRateB2,RentQTr.BaseRate1,RentQTr.BaseRate2,DefaultCurRoundOff);
          Tot2Sum = Tot2Sum + temp;
          temp = MulRateToBase2(RentQTr.CurncyCode,RentQTr.Sum1,RentQTr.FrRate,RentQTr.ToRateB1,RentQTr.ToRateB2,RentQTr.BaseRate1,RentQTr.BaseRate2,DefaultCurRoundOff);
          sub2tot = sub2tot + temp;
        end;
        if ( RepSpec.ArtMode == 1 ) then begin
          Gray_Divider(0,1);
          PrintRentQTDetail(RentQTr);
        end;
        if ( RepSpec.ArtMode == 0 ) then begin
          StartFormat(15);
          OutString(0,"DblRentQT",RentQTr.SerNr,false);
          OutDate(50,0,RentQTr.TransDate,false);
          OutDate(120,0,RentQTr.MakeContactDate,false);
          OutString(205,0,RentQTr.Addr0,false);
          if blank(RepSpec.AccStr) then begin
            OutString(350,0,RentQTr.SalesMan,false);
          end;
          OutString(440,0,RentQTr.Sum1,true);
          OutString(445,0,RentQTr.CurncyCode,false);
          EndFormat;
        end;
      end;
    end;
  end;
  Gray_Divider(0,1);
  PrintRentQTListTotals(bascur.BaseCur1,sub1tot,Tot1Sum);
  if ((bascur.BaseCur1<>bascur.BaseCur2) and (RepSpec.flags[12]==1)) then begin
    Gray_Divider(290,1);
    PrintRentQTListTotals(bascur.BaseCur2,sub2tot,Tot2Sum);
  end;
  EndJob;
return;
end;

