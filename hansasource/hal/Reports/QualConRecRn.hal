external function val IVGetTurnover(string,string,string,string,string,string,string,string,Date,Date);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure HTItems(string,var string);
external procedure FindStatisticsDates(Date,Date,var Date,var Date);
external procedure HTLocations(string, string, var string);
external procedure HTReasons(string,string,var string);
external procedure HTCusts(string, string, var string);
external procedure HT2Per(Date, Date , var string);

procedure FindSales(Integer sorting,string lasttstr,string frin,string toin,Date sd,Date ed,var val sq,var val sc)
begin
  Boolean found,testf;
  record IVVc IVr;
  row IVVc IVrw;
  string 255 keystr;
  Integer keys;
  Integer i,rwcnt;
  val v,vatv,t1;

  sq = blankval;
  sc = blankval;
  switch (sorting) begin
    case 0:
      keystr = "CustDate";
      keys = 2;
      IVr.CustCode = lasttstr;
    case 1:
      keystr = "Location";
      keys = 2;
      IVr.Location = lasttstr;
  end;
  IVr.InvDate = sd;
  found = true;
  while (LoopKey(keystr,IVr,keys,found)) begin
    switch (sorting) begin
      case 0:
        if (IVr.CustCode!=lasttstr) then begin found = false; end;
      case 1:
        if (IVr.Location!=lasttstr) then begin found = false; end;
    end;
    if (IVr.InvDate>ed) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (IVr.OKFlag==0) then begin testf = false; end;
      if (testf) then begin
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          testf = true;
          if (nonblank(frin)) then begin
            if (IVrw.ArtCode<frin) then begin testf = false; end;
          end;
          if (nonblank(toin)) then begin
            if (IVrw.ArtCode>toin) then begin testf = false; end;
          end;
          if (testf) then begin
            v = IVrw.Quant;
            if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin v = -v; end;
            sq = sq + v;
            if (IVr.InclVAT>0) then begin
              MulVATIV(IVrw.VATCode,IVrw.Sum,vatv,t1,IVr.InclVAT,IVr.NoTAXonVAT);
              v = IVrw.Sum - vatv;
            end else begin
              v = IVrw.Sum;
            end;            
            if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin v = -v; end;
            sc = sc + v;
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure GetCUTurnover2(Integer sorting,string laststr,Date sStartDate,Date sEndDate,string frin,string toin,
                        var val sq,var val sc)
begin
  switch (sorting) begin
    case 0:
      FindSales(sorting,laststr,frin,toin,sStartDate,sEndDate,sq,sc);
    case 1:
      FindSales(sorting,laststr,frin,toin,sStartDate,sEndDate,sq,sc);
  end;  
  return;
end;

procedure QualConRec_Item(record RcVc RepSpec,string filename,string frcu,string tocu,string frin,string toin)
begin
  record ItemHistVc IHr;
  Boolean found,testf;
  record RetVc Retr;
  row RetVc Retrw;
  record RetPUVc RetPUr;
  row RetPUVc RetPUrw;
  record SDVc SDr;
  row SDVc SDrw;
  string 255 lastitem;
  record INVc INr;
  val rq,rc,sq,sc;
  val totrq,totrc,totsq,totsc;
  record STVc STr;
  Date fmsd,fmed;
  Integer keys;
  string 255 keystr;
  
  found = true;
  keys = 1;
  IHr.FileName = filename;
  if (nonblank(RepSpec.f2)) then begin
    IHr.ArtCode = frin;
    keys = 3;
  end;
  keystr = "FNArtCode";
  while (LoopKey(keystr,IHr,keys,found)) begin
    if (IHr.FileName!=filename)  then begin found = false; end;
    if (nonblank(RepSpec.f2)) then begin
      if (nonblank(toin)) then begin
        if (IHr.ArtCode>toin)  then begin found = false; end;
      end;      
      if (IHr.TransDate>RepSpec.sEndDate)  then begin found = false; end;
    end;
    if (found) then begin
      testf = true;
      if (DateInRange(IHr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;
      if (testf) then begin
        switch (filename) begin
          case "RetVc":
            Retr.SerNr = IHr.TransNr;
            if (ReadFirstMain(Retr,1,true)) then begin
              if (nonblank(frcu)) then begin
                if (Retr.CustCode<frcu) then begin testf = false; end;
              end;
              if (nonblank(tocu)) then begin
                if (Retr.CustCode>tocu) then begin testf = false; end;
              end;
            end;
          case "RetPUVc":
            RetPUr.SerNr = IHr.TransNr;
            if (ReadFirstMain(RetPUr,1,true)) then begin
              if (nonblank(frcu)) then begin
                if (RetPUr.VECode<frcu) then begin testf = false; end;
              end;
              if (nonblank(tocu)) then begin
                if (RetPUr.VECode>tocu) then begin testf = false; end;
              end;
            end;
          case "SDVc":
            SDr.SerNr = IHr.TransNr;
            if (ReadFirstMain(SDr,1,true)) then begin
            end;
        end;
      end;
      if (testf) then begin
        if (nonblank(lastitem))  then begin
          if (lastitem!=IHr.ArtCode) then begin
            INr.Code = lastitem;
            if (ReadFirstMain(INr,1,true)) then begin end;
            STr.ArtCode = lastitem;
            if (ReadFirstMain(STr,1,true)) then begin end;
            sq = blankval; sc = blankval;
            if (GetDay(RepSpec.sStartDate)!=1) or (GetDay(RepSpec.sEndDate)!=DaysInMonth(GetYear(RepSpec.sEndDate),GetMonth(RepSpec.sEndDate))) then begin
              FindStatisticsDates(RepSpec.sStartDate,RepSpec.sEndDate,fmsd,fmed);
              if (nonblankdate(fmsd)) and (nonblankdate(fmed)) then begin
                if (RepSpec.sStartDate<AddDay(fmsd,-1)) then begin
                  sq = sq + IVGetTurnover("",lastitem,"","","","","","quant",RepSpec.sStartDate,AddDay(fmsd,-1));
                  sc = sc + IVGetTurnover("",lastitem,"","","","","","salesexclvat",RepSpec.sStartDate,AddDay(fmsd,-1));
                end;
                sq = sq + IVGetTurnover("",lastitem,"","","","","","quant",RepSpec.sStartDate,RepSpec.sEndDate);
                sc = sc + IVGetTurnover("",lastitem,"","","","","","salesexclvat",RepSpec.sStartDate,RepSpec.sEndDate);
    //            sq = sq + GetTurnover(STr,"quant",fmsd,fmed);     
    //            sc = sc + GetTurnover(STr,"salesexclvat",fmsd,fmed);
                if (AddDay(fmed,1)<RepSpec.sEndDate) then begin
                  sq = sq + IVGetTurnover("",lastitem,"","","","","","quant",AddDay(fmed,1),RepSpec.sEndDate);
                  sc = sc + IVGetTurnover("",lastitem,"","","","","","salesexclvat",AddDay(fmed,1),RepSpec.sEndDate);
                end;
              end else begin
    //            sq = GetTurnover(STr,"quant",RepSpec.sStartDate,RepSpec.sEndDate);            
    //            sc = GetTurnover(STr,"salesexclvat",RepSpec.sStartDate,RepSpec.sEndDate);            
                sq = IVGetTurnover("",lastitem,"","","","","","quant",RepSpec.sStartDate,RepSpec.sEndDate);
                sc = IVGetTurnover("",lastitem,"","","","","","salesexclvat",RepSpec.sStartDate,RepSpec.sEndDate);
              end;
            end else begin
              sq = IVGetTurnover("",lastitem,"","","","","","quant",RepSpec.sStartDate,RepSpec.sEndDate);
              sc = IVGetTurnover("",lastitem,"","","","","","salesexclvat",RepSpec.sStartDate,RepSpec.sEndDate);
    //          sq = GetTurnover(STr,"quant",RepSpec.sStartDate,RepSpec.sEndDate);            
    //          sc = GetTurnover(STr,"salesexclvat",RepSpec.sStartDate,RepSpec.sEndDate);            
            end;
            totsq = totsq + sq;
            totsc = totsc + sc;
            StartFormat(15);
             OutString(0,0,lastitem,false);
             OutString(80,0,Left(INr.Name,30),false);
             OutVal(300,0,rq,M4Val,true);
             OutVal(360,0,rc,M4Val,true);
             OutVal(420,0,sq,M4Val,true);
             OutVal(1,0,sc,M4Val,true);
            EndFormat;
            rq = blankval; rc = blankval; sq = blankval; sc = blankval;
          end;
        end;
        switch (filename) begin
          case "RetVc":
            MatRowGet(Retr,IHr.Row,Retrw);
            rq = rq + Retrw.Quant;
            rc = rc + Retrw.CostPrice;
            totrq = totrq + Retrw.Quant;
            totrc = totrc + Retrw.CostPrice;
          case "RetPUVc":
            MatRowGet(RetPUr,IHr.Row,RetPUrw);
            rq = rq + RetPUrw.Quant;
            rc = rc + RetPUrw.FIFORowVal;
            totrq = totrq + RetPUrw.Quant;
            totrc = totrc + RetPUrw.FIFORowVal;
          case "SDVc":
            MatRowGet(SDr,IHr.Row,SDrw);
            rq = rq + SDrw.Qty;
            rc = rc + SDrw.FIFORowVal;
            totrq = totrq + SDrw.Qty;
            totrc = totrc + SDrw.FIFORowVal;
        end;
        lastitem = IHr.ArtCode;
      end;
    end;
  end; 
  if (rq!=0) then begin
    sq = blankval; sc = blankval;
    if (GetDay(RepSpec.sStartDate)!=1) or (GetDay(RepSpec.sEndDate)!=DaysInMonth(GetYear(RepSpec.sEndDate),GetMonth(RepSpec.sEndDate))) then begin
      FindStatisticsDates(RepSpec.sStartDate,RepSpec.sEndDate,fmsd,fmed);
      if (nonblankdate(fmsd)) and (nonblankdate(fmed)) then begin
        if (RepSpec.sStartDate<AddDay(fmsd,-1)) then begin
          sq = sq + IVGetTurnover("",lastitem,"","","","","","quant",RepSpec.sStartDate,AddDay(fmsd,-1));
          sc = sc + IVGetTurnover("",lastitem,"","","","","","salesexclvat",RepSpec.sStartDate,AddDay(fmsd,-1));
        end;
        sq = sq + GetTurnover(STr,"quant",fmsd,fmed);     
        sc = sq + GetTurnover(STr,"salesexclvat",fmsd,fmed);
        if (AddDay(fmed,1)<RepSpec.sEndDate) then begin
          sq = sq + IVGetTurnover("",lastitem,"","","","","","quant",AddDay(fmed,1),RepSpec.sEndDate);
          sc = sc + IVGetTurnover("",lastitem,"","","","","","salesexclvat",AddDay(fmed,1),RepSpec.sEndDate);
        end;
      end else begin
        sq = GetTurnover(STr,"quant",RepSpec.sStartDate,RepSpec.sEndDate);            
        sc = GetTurnover(STr,"salesexclvat",RepSpec.sStartDate,RepSpec.sEndDate);            
      end;
    end else begin
      sq = GetTurnover(STr,"quant",RepSpec.sStartDate,RepSpec.sEndDate);            
      sc = GetTurnover(STr,"salesexclvat",RepSpec.sStartDate,RepSpec.sEndDate);            
    end;
    totsq = totsq + sq;
    totsc = totsc + sc;
    INr.Code = lastitem;
    if (ReadFirstMain(INr,1,true)) then begin end;
    StartFormat(15);
     OutString(0,0,lastitem,false);
     OutString(80,0,Left(INr.Name,30),false);
     OutVal(300,0,rq,M4Val,true);
     OutVal(360,0,rc,M4Val,true);
     OutVal(420,0,sq,M4Val,true);
     OutVal(1,0,sc,M4Val,true);
    EndFormat;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
   OutString(0,0,USetStr(17158),false);
   OutVal(300,0,totrq,M4Val,true);
   OutVal(360,0,totrc,M4Val,true);
   OutVal(420,0,totsq,M4Val,true);
   OutVal(1,0,totsc,M4Val,true);
  EndFormat;
  return;
end;

procedure QualConRec_Ret(record RcVc RepSpec,string frcu,string tocu,string frin,string toin)
begin
  Boolean found,testf;
  record RetVc Retr;
  row RetVc Retrw;
  string 255 keystr;
  Integer keys;
  string 255 lasttstr,name;
  Integer i,rwcnt;
  val rq,rc,sq,sc;
  val totrq,totrc,totsq,totsc;
  record CUVc CUr;
  record LocationVc Locr;
  
  switch (RepSpec.flags[1]) begin
    case 0:
      if (nonblank(RepSpec.f1)) then begin
        keystr = "CustCodeTransDate";
        keys = 2;
        Retr.CustCode = frcu;
      end else begin
        keystr = "TransDate";
        keys = 1;
        Retr.CustCode = frcu;
      end;
    case 1:
      keystr = "LocOK";
      keys = 3;
      Retr.Location = RepSpec.AccStr;
      Retr.OKFlag = 1;
    case 2:
      QualConRec_Item(RepSpec,"RetVc",frcu,tocu,frin,toin);
      goto LQualConRec_Ret;
  end;
  Retr.TransDate = RepSpec.sStartDate;
  found = true;
  while (LoopKey(keystr,Retr,keys,found)) begin
    switch (RepSpec.flags[1]) begin
      case 0:
        if (nonblank(RepSpec.f1)) then begin
          if (Retr.CustCode>tocu) then begin found = false; end;
        end else begin
        end;
      case 1:
        if (nonblank(RepSpec.AccStr)) then begin
          if (Retr.Location!=RepSpec.AccStr) then begin found = false; end;
        end;
    end;
    if (Retr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (Retr.OKFlag==0) then begin testf = false; end;
      if (nonblank(RepSpec.FirstAcc)) then begin
        if (Retr.Reason!=RepSpec.FirstAcc) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (Retr.Location!=RepSpec.AccStr) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.f1)) then begin
        if (Retr.CustCode<frcu) then begin testf = false; end;
        if (Retr.CustCode>tocu) then begin testf = false; end;
      end;
      if (testf) then begin
        if (nonblank(lasttstr))  then begin
          switch (RepSpec.flags[1]) begin
            case 0:
              if (lasttstr!=Retr.CustCode) then begin
                CUr.Code = lasttstr;
                if (ReadFirstMain(CUr,1,true)) then begin end;
                name = CUr.Name;
                GetCUTurnover2(RepSpec.flags[1],lasttstr,RepSpec.sStartDate,RepSpec.sEndDate,frin,toin,sq,sc);
                totsq = totsq + sq;
                totsc = totsc + sc;
                StartFormat(15);
                 OutString(0,0,lasttstr,false);
                 OutString(80,0,Left(name,30),false);
                 OutVal(300,0,rq,M4Val,true);
                 OutVal(360,0,rc,M4Val,true);
                 OutVal(420,0,sq,M4Val,true);
                 OutVal(1,0,sc,M4Val,true);
                EndFormat;
                rq = blankval; rc = blankval; sq = blankval; sc = blankval;
              end;
            case 1:
              if (lasttstr!=Retr.Location) then begin
                Locr.Code = lasttstr;
                if (ReadFirstMain(Locr,1,true)) then begin end;
                name = Locr.Name;
                GetCUTurnover2(RepSpec.flags[1],lasttstr,RepSpec.sStartDate,RepSpec.sEndDate,frin,toin,sq,sc);
                totsq = totsq + sq;
                totsc = totsc + sc;
                StartFormat(15);
                 OutString(0,0,lasttstr,false);
                 OutString(80,0,Left(name,30),false);
                 OutVal(300,0,rq,M4Val,true);
                 OutVal(360,0,rc,M4Val,true);
                 OutVal(420,0,sq,M4Val,true);
                 OutVal(1,0,sc,M4Val,true);
                EndFormat;
                rq = blankval; rc = blankval; sq = blankval; sc = blankval;
              end;
          end;
        end;        
        rwcnt = MatRowCnt(Retr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(Retr,i,Retrw);
          testf = true;
          if (nonblank(frin)) then begin
            if (Retrw.ArtCode<frin) then begin testf = false; end;
          end;
          if (nonblank(toin)) then begin
            if (Retrw.ArtCode>toin) then begin testf = false; end;
          end;
          if (testf) then begin
            rq = rq + Retrw.Quant;
            rc = rc + Retrw.CostPrice;
            totrq = totrq + Retrw.Quant;
            totrc = totrc + Retrw.CostPrice;
          end;
        end;
        
        switch (RepSpec.flags[1]) begin
          case 0:
            lasttstr = Retr.CustCode;
          case 1:
            lasttstr = Retr.Location;
        end;
      end;
    end;
  end;
  if (rq!=0) then begin
   switch (RepSpec.flags[1]) begin
      case 0:
        CUr.Code = lasttstr;
        if (ReadFirstMain(CUr,1,true)) then begin end;
        name = CUr.Name;
      case 1:
        Locr.Code = lasttstr;
        if (ReadFirstMain(Locr,1,true)) then begin end;
        name = Locr.Name;
    end;
    GetCUTurnover2(RepSpec.flags[1],lasttstr,RepSpec.sStartDate,RepSpec.sEndDate,frin,toin,sq,sc);
    totsq = totsq + sq;
    totsc = totsc + sc;
    StartFormat(15);
     OutString(0,0,lasttstr,false);
     OutString(80,0,Left(name,30),false);
     OutVal(300,0,rq,M4Val,true);
     OutVal(360,0,rc,M4Val,true);
     OutVal(420,0,sq,M4Val,true);
     OutVal(1,0,sc,M4Val,true);
    EndFormat;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
   OutString(0,0,USetStr(17158),false);
   OutVal(300,0,totrq,M4Val,true);
   OutVal(360,0,totrc,M4Val,true);
   OutVal(420,0,totsq,M4Val,true);
   OutVal(1,0,totsc,M4Val,true);
  EndFormat;
LQualConRec_Ret:;  
  return;
end;

procedure QualConRec_RetPU(record RcVc RepSpec,string frcu,string tocu,string frin,string toin)
begin
  Boolean found,testf;
  record RetPUVc RetPUr;
  row RetPUVc RetPUrw;
  string 255 keystr;
  Integer keys;
  string 255 lasttstr,name;
  Integer i,rwcnt;
  val rq,rc,sq,sc;
  val totrq,totrc,totsq,totsc;
  record CUVc CUr;
  record LocationVc Locr;
  
  switch (RepSpec.flags[1]) begin
    case 0:
      if (nonblank(RepSpec.f1)) then begin
        keystr = "VECodeTransDate";
        keys = 2;
        RetPUr.VECode = frcu;
      end else begin
        keystr = "TransDate";
        keys = 1;
      end;
    case 1:
      if (nonblank(RepSpec.AccStr)) then begin
        keystr = "LocOK";
        keys = 3;
        RetPUr.Location = RepSpec.AccStr;
        RetPUr.OKFlag = 1;
      end else begin 
        keystr = "TransDate";
        keys = 1;
      end;
    case 2:
      QualConRec_Item(RepSpec,"RetPUVc",frcu,tocu,frin,toin);
      goto LQualConRec_RetPU;
  end;

  RetPUr.TransDate = RepSpec.sStartDate;
  found = true;
  while (LoopKey(keystr,RetPUr,keys,found)) begin
    switch (RepSpec.flags[1]) begin
      case 0:
        if (nonblank(RepSpec.f1)) then begin
          if (RetPUr.VECode>tocu) then begin found = false; end;
        end;
      case 1:
        if (nonblank(RepSpec.AccStr)) then begin
          if (RetPUr.Location!=RepSpec.AccStr) then begin found = false; end;
        end;
    end;
    if (RetPUr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (RetPUr.OKFlag==0) then begin testf = false; end;
      if (nonblank(RepSpec.FirstAcc)) then begin
        if (RetPUr.Reason!=RepSpec.FirstAcc) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (RetPUr.Location!=RepSpec.AccStr) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.f1)) then begin
        if (RetPUr.VECode<frcu) then begin testf = false; end;
        if (RetPUr.VECode>tocu) then begin testf = false; end;
      end;
      if (testf) then begin
        if (nonblank(lasttstr))  then begin
          switch (RepSpec.flags[1]) begin
            case 0:
              if (lasttstr!=RetPUr.VECode) then begin
                CUr.Code = lasttstr;
                if (ReadFirstMain(CUr,1,true)) then begin end;
                name = CUr.Name;
                GetCUTurnover2(RepSpec.flags[1],lasttstr,RepSpec.sStartDate,RepSpec.sEndDate,frin,toin,sq,sc);
                totsq = totsq + sq;
                totsc = totsc + sc;
                StartFormat(15);
                 OutString(0,0,lasttstr,false);
                 OutString(80,0,Left(name,30),false);
                 OutVal(300,0,rq,M4Val,true);
                 OutVal(360,0,rc,M4Val,true);
                 OutVal(420,0,sq,M4Val,true);
                 OutVal(1,0,sc,M4Val,true);
                EndFormat;
                rq = blankval; rc = blankval; sq = blankval; sc = blankval;
              end;
            case 1:
              if (lasttstr!=RetPUr.Location) then begin
                Locr.Code = lasttstr;
                if (ReadFirstMain(Locr,1,true)) then begin end;
                name = Locr.Name;
                GetCUTurnover2(RepSpec.flags[1],lasttstr,RepSpec.sStartDate,RepSpec.sEndDate,frin,toin,sq,sc);
                totsq = totsq + sq;
                totsc = totsc + sc;
                StartFormat(15);
                 OutString(0,0,lasttstr,false);
                 OutString(80,0,Left(name,30),false);
                 OutVal(300,0,rq,M4Val,true);
                 OutVal(360,0,rc,M4Val,true);
                 OutVal(420,0,sq,M4Val,true);
                 OutVal(1,0,sc,M4Val,true);
                EndFormat;
                rq = blankval; rc = blankval; sq = blankval; sc = blankval;
              end;
          end;
        end;
        rwcnt = MatRowCnt(RetPUr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(RetPUr,i,RetPUrw);
          testf = true;
          if (nonblank(frin)) then begin
            if (RetPUrw.ArtCode<frin) then begin testf = false; end;
          end;
          if (nonblank(toin)) then begin
            if (RetPUrw.ArtCode>toin) then begin testf = false; end;
          end;
          if (testf) then begin
            rq = rq + RetPUrw.Quant;
            rc = rc + RetPUrw.FIFORowVal;
            totrq = totrq + RetPUrw.Quant;
            totrc = totrc + RetPUrw.FIFORowVal;
          end;
        end;
        
        switch (RepSpec.flags[1]) begin
          case 0:
            lasttstr = RetPUr.VECode;
          case 1:
            lasttstr = RetPUr.Location;
        end;
      end;
    end;
  end;
  if (rq!=0) then begin
   switch (RepSpec.flags[1]) begin
      case 0:
        CUr.Code = lasttstr;
        if (ReadFirstMain(CUr,1,true)) then begin end;
        name = CUr.Name;
      case 1:
        Locr.Code = lasttstr;
        if (ReadFirstMain(Locr,1,true)) then begin end;
        name = Locr.Name;
    end;
    GetCUTurnover2(RepSpec.flags[1],lasttstr,RepSpec.sStartDate,RepSpec.sEndDate,frin,toin,sq,sc);
    totsq = totsq + sq;
    totsc = totsc + sc;
    StartFormat(15);
     OutString(0,0,lasttstr,false);
     OutString(80,0,Left(name,30),false);
     OutVal(300,0,rq,M4Val,true);
     OutVal(360,0,rc,M4Val,true);
     OutVal(420,0,sq,M4Val,true);
     OutVal(1,0,sc,M4Val,true);
    EndFormat;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
   OutString(0,0,USetStr(17158),false);
   OutVal(300,0,totrq,M4Val,true);
   OutVal(360,0,totrc,M4Val,true);
   OutVal(420,0,totsq,M4Val,true);
   OutVal(1,0,totsc,M4Val,true);
  EndFormat;
LQualConRec_RetPU:;  
  return;
end;

procedure QualConRec_SD(record RcVc RepSpec,string frin,string toin)
begin
  Boolean found,testf;
  record SDVc SDr;
  row SDVc SDrw;
  string 255 keystr;
  Integer keys;
  string 255 lasttstr,name;
  Integer i,rwcnt;
  val rq,rc,sq,sc;
  val totrq,totrc,totsq,totsc;
  record LocationVc Locr;
  
  switch (RepSpec.flags[1]) begin
     case 2:
      QualConRec_Item(RepSpec,"SDVc","","",frin,toin);
      goto LQualConRec_SD;
  end;
  if (nonblank(RepSpec.AccStr)) then begin
    keystr = "LocOK";
    keys = 3;
    SDr.Location = RepSpec.AccStr;
    SDr.OKFlag = 1;
    SDr.TransDate = RepSpec.sStartDate;
  end else begin
    keystr = "OKFlagTransDate";
    keys = 2;
    SDr.OKFlag = 1;
    SDr.TransDate = RepSpec.sStartDate;
  end;
  found = true;
  while (LoopKey(keystr,SDr,keys,found)) begin
    if (nonblank(RepSpec.AccStr)) then begin
      if (SDr.Location!=RepSpec.AccStr) then begin found = false; end;
      if (SDr.TransDate>RepSpec.sEndDate) then begin found = false; end;
      if (SDr.OKFlag==0) then begin found = found; end;
    end else begin
      if (SDr.TransDate>RepSpec.sEndDate) then begin found = false; end;
      if (SDr.OKFlag==0) then begin found = found; end;
    end;
    if (found) then begin
      testf = true;
      if (nonblank(RepSpec.FirstAcc)) then begin
        if (SDr.Reason!=RepSpec.FirstAcc) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (SDr.Location!=RepSpec.AccStr) then begin testf = false; end;
      end;
      if (testf) then begin
        if (nonblank(lasttstr))  then begin
          if (lasttstr!=SDr.Location) then begin
            Locr.Code = lasttstr;
            if (ReadFirstMain(Locr,1,true)) then begin end;
            name = Locr.Name;
            GetCUTurnover2(RepSpec.flags[1],lasttstr,RepSpec.sStartDate,RepSpec.sEndDate,frin,toin,sq,sc);
            totsq = totsq + sq;
            totsc = totsc + sc;
            StartFormat(15);
             OutString(0,0,lasttstr,false);
             OutString(80,0,Left(name,30),false);
             OutVal(300,0,rq,M4Val,true);
             OutVal(360,0,rc,M4Val,true);
             OutVal(420,0,sq,M4Val,true);
             OutVal(1,0,sc,M4Val,true);
            EndFormat;
            rq = blankval; rc = blankval; sq = blankval; sc = blankval;
          end;
        end;
        rwcnt = MatRowCnt(SDr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(SDr,i,SDrw);
          testf = true;
          if (nonblank(frin)) then begin
            if (SDrw.ArtCode<frin) then begin testf = false; end;
          end;
          if (nonblank(toin)) then begin
            if (SDrw.ArtCode>toin) then begin testf = false; end;
          end;
          if (testf) then begin
            rq = rq + SDrw.Qty;
            rc = rc + SDrw.FIFORowVal;
            totrq = totrq + SDrw.Qty;
            totrc = totrc + SDrw.FIFORowVal;
          end;
        end;        
        lasttstr = SDr.Location;
      end;
    end;
  end;
  if (rq!=0) then begin
    Locr.Code = lasttstr;
    if (ReadFirstMain(Locr,1,true)) then begin end;
    name = Locr.Name;
    GetCUTurnover2(RepSpec.flags[1],lasttstr,RepSpec.sStartDate,RepSpec.sEndDate,frin,toin,sq,sc);
    totsq = totsq + sq;
    totsc = totsc + sc;
    StartFormat(15);
     OutString(0,0,lasttstr,false);
     OutString(80,0,Left(name,30),false);
     OutVal(300,0,rq,M4Val,true);
     OutVal(360,0,rc,M4Val,true);
     OutVal(420,0,sq,M4Val,true);
     OutVal(1,0,sc,M4Val,true);
    EndFormat;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
   OutString(0,0,USetStr(17158),false);
   OutVal(300,0,totrq,M4Val,true);
   OutVal(360,0,totrc,M4Val,true);
   OutVal(420,0,totsq,M4Val,true);
   OutVal(1,0,totsc,M4Val,true);
  EndFormat;
LQualConRec_SD:;  
  return;
end;

global
procedure QualConRecRn(record RcVc RepSpec)
begin
  Integer rw;
  string 255 tstr;
  string 255 frcu,tocu;
  string 255 frin,toin;
  Integer keys;
  
  frcu = FirstInRange(RepSpec.f1,20);
  tocu = LastInRange(RepSpec.f1,20);
  frin = FirstInRange(RepSpec.f2,20);
  toin = LastInRange(RepSpec.f2,20);
  StartReportJob(USetStr(17150));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTCusts(frcu,tocu,tstr);
  Header(rw,tstr,0);
  HTItems(RepSpec.f2,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTReasons(RepSpec.FirstAcc,RepSpec.FirstAcc,tstr);
  Header(rw,tstr,0);
  HTLocations(RepSpec.AccStr,RepSpec.AccStr,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  tstr = USetStr(17160) & ": ";
  switch (RepSpec.flags[1]) begin
    case 0: tstr = tstr & USetStr(17161);
    case 1: tstr = tstr & USetStr(17162);
    case 2: tstr = tstr & USetStr(17163);
  end;
  Header(rw,tstr,0);
  tstr = USetStr(17164) & ": ";
  switch (RepSpec.flags[0]) begin
    case 0: tstr = tstr & USetStr(17165);
    case 1: tstr = tstr & USetStr(17166);
    case 2: tstr = tstr & USetStr(17167);
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;
  
  switch (RepSpec.flags[1]) begin
    case 0:
      switch (RepSpec.flags[0]) begin
        case 2:
          StartFormat(15);
          OutString(0,0,USetStr(17159),false);
          EndFormat;
          goto LQualConRecRn;
      end;
  end;
  
  StartFormat(15);
  OutString(300,0,USetStr(17152),false);
  OutString(430,0,USetStr(17153),false);
  EndFormat;
  StartFormat(15);
  switch (RepSpec.flags[1]) begin
    case 0:
      OutString(0,0,USetStr(17151),false);
    case 1:
      OutString(0,0,USetStr(17156),false);
  end;
  OutString(80,0,USetStr(17157),true);
  OutString(300,0,USetStr(17154),true);
  OutString(360,0,USetStr(17155),true);
  OutString(420,0,USetStr(17154),true);
  OutString(1,0,USetStr(17155),true);
  EndFormat;
  Gray_Divider(0,1);
  switch (RepSpec.flags[0]) begin
    case 0: QualConRec_Ret(RepSpec,frcu,tocu,frin,toin);
    case 1: QualConRec_RetPU(RepSpec,frcu,tocu,frin,toin);
    case 2: QualConRec_SD(RepSpec,frin,toin);
  end;
LQualConRecRn:;  
  EndJob;    
  return;
end;
