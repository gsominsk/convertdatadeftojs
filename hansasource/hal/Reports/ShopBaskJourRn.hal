external procedure HTItem(string,var string);
external procedure HTArtGroup(string, var string);
external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean ItemInItemGroupOrClass(string,string,string);
external function Boolean HasContactClassification();
external function Boolean HasCategories();
external procedure HTCustCat(string,var string);
external procedure HTCustClass(string,var string);
external function Boolean ContactInGroupClass(string,string,string,string,string,string);
external function Boolean IsCancelState(String);
external procedure HT2Per(Date, Date , var string);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);


global
function boolean ShopBaskJourSelect(Record RcVc RepSpec,Record ShopBaskVc ShopBaskr,Record JobVc Jobr,var boolean foundf)
begin
  Boolean sel;
  Record HotelBlock HotelBlock;  
  Record INVc INr;  
  Boolean dummyf,testf;

  BlockLoad(HotelBlock);
  INr.Code = ShopBaskr.ItemCode;
  if (ReadFirstMain(INr,1,true)) then begin 
    sel = false;
    if (Jobr.TransDate > RepSpec.sEndDate) then begin
      foundf = false;
    end else begin
      if ((ShopBaskr.CUCode==RepSpec.f1) or blank(RepSpec.f1)) then begin
        testf = true;
        if (testf) then begin 
          testf = ContactInGroupClass(ShopBaskr.CUCode,RepSpec.f6,RepSpec.Stext,"CUST","","");        
        end;
        if (testf) then begin
          if (nonblank(RepSpec.f3)) then begin 
            testf = ShopBaskr.ItemCode==RepSpec.f3;
          end; 
        end;
        if (testf) then begin
          testf = ItemInItemGroupOrClass(ShopBaskr.ItemCode,RepSpec.f7,RepSpec.ObjStr);
        end;   
        if (testf) then begin 
          if ((ShopBaskr.Objects==RepSpec.f2) or blank(RepSpec.f2)) then begin
            if ((ShopBaskr.OwnerSerNr==RepSpec.long1) or (RepSpec.long1==-1)) then begin
              if ((RepSpec.f4==Jobr.Type) or (blank(RepSpec.f4))) then begin
                if ((RepSpec.FirstAcc==Jobr.ResStatus) or (blank(RepSpec.FirstAcc))) then begin
                  if ((RepSpec.LastAcc==Jobr.ResUsage) or (blank(RepSpec.LastAcc))) then begin
                    if ((RepSpec.f5==Jobr.PriceList) or (blank(RepSpec.f5))) then begin
                      if ((RepSpec.flags[1]==0) or (not IsCancelState(Jobr.ResStatus))) then begin
                        if ((ShopBaskr.DestinationNr==RepSpec.long2) or (RepSpec.long2==-1)) then begin
                          if ((RepSpec.flags[3]==0) or 
                              ((RepSpec.flags[3]==1) and (ShopBaskr.DestinationNr<>-1)) or
                              ((RepSpec.flags[3]==2) and (ShopBaskr.DestinationNr==-1))
                             ) then begin
                            sel = true;
                          end;
                        end;
                      end;
                    end;
                  end;
                end;
              end;      
            end;
          end;
        end;  
      end;
    end; 
  end;  
  ShopBaskJourSelect = sel;
  return;
end;

function val GetTotalDaySpending(Record RcVc RepSpec,Date gDate)
begin
  val res;
  Record JobVc Jobr;
  Record ShopBaskVc ShopBaskr;
  Boolean foundf;
  
  res = 0; foundf = true;
  ShopBaskr.TransDate = gDate;
  while LoopKey("TransDate",ShopBaskr,1,foundf) begin
    if (gDate<>ShopBaskr.TransDate) then begin
      foundf = false;
    end else begin  
      Jobr.SerNr = ShopBaskr.OwnerSerNr;
      if readfirstmain(Jobr,1,true) then begin
        if ShopBaskJourSelect(RepSpec,ShopBaskr,Jobr,foundf) then begin
          res = res + 1;
        end;
      end;
    end;
  end;
  GetTotalDaySpending = res;
  return;
end;


function val GetShopBaskItemPrice(record ShopBaskVc ShopBaskr,Record JobVc Jobr) 
begin
  String 100 PList,Reb,Spec;
  Val baseprice,Amount,Discperc;
  val price,cost,factor,tax2prc;
  Boolean calcprice;
  String 10 salesacc,vatcode,tax2code,taxtemplatecode;
  Record INVc INr;
  Record CUVc CUr;
  Boolean dummyf;
  Time blankt;

  PList    = Jobr.PriceList;
  CUr.Code = ShopBaskr.CUCode; 
  if (ReadFirstMain(CUr,1,true)) then begin
    Reb = CUr.RebCode;
    if blank(PList) then begin
      PList = CUr.PLCode;
    end;
  end;
  price = 0;
  INr.Code = ShopBaskr.ItemCode; 
  if (ReadFirstMain(INr,1,true)) then begin
      if (GetItemPriceDiscount3(ShopBaskr.ItemCode,ShopBaskr.Qty,INr,ShopBaskr.CurncyCode,ShopBaskr.FrRate,ShopBaskr.ToRateB1,ShopBaskr.ToRateB2,ShopBaskr.BaseRate1,ShopBaskr.BaseRate2,
              CUr.LangCode,CUr.CustCat,PList,CUr.RebCode,
              price,Spec,Discperc,vatcode,cost,salesacc,
              CUr.ExportFlag,calcprice,ShopBaskr.TransDate,blankt,"",true,dummyf,"",tax2code,tax2prc,"","",taxtemplatecode)) then begin
      end;
  end;   
  price = price * ((100.00 - Discperc)/100.00);
  GetShopBaskItemPrice = price;
  return;
end;

procedure PrintBarTabLine(longint BarTabSerNr,longint JobSerNr,val BarTabSum)
begin
  record RestAccVc RestAccr;
  string 255 tstr;
  
  if (BarTabSerNr>0) then begin
  RestAccr.SerNr = BarTabSerNr;
  ReadFirstMain(RestAccr,1,true);
  StartFormat(15);
  OutDate(0,0,RestAccr.TransDate,false);
  OutString(2,"DblRestAccVc",RestAccr.SerNr,false);
  if nonblank(RestAccr.GuestName) then begin
    tstr = RestAccr.GuestName & ", ";
  end;
  if nonblank(RestAccr.CustCode) then begin
    tstr = tstr & USetStr(9835) & " " & RestAccr.CustCode & ", ";
  end;
  if nonblank(RestAccr.Persons) then begin
    tstr = tstr & USetStr(12491) & " " & RestAccr.Persons & ", ";
  end;
  if nonblank(tstr) then begin
    tstr = Mid(tstr,0,Len(tstr)-2);
  end;
  OutString(3,0,tstr,false);
  OutString(6,"DblJobVc",JobSerNr,false);
  OutVal(8,0,BarTabSum,M4Val,true);
  EndFormat;
  end;
  return;
end;

global
procedure ShopBaskJourRn(Record RcVc RepSpec)
begin
  Date vDate;
  boolean foundf,lasttabprintedf;
  String 255 tstr,tmp,key;
  Integer Cnt,rw,keycnt;
  Val Sum1,Sum2,SumBar,Qty,Discount,TSum,TDiscount,avgprice,Price;
  Record JobVc Jobr;
  record ShopBaskVc ShopBaskr;
  longint lastbartabnr,lastjobnr;
  
  StartReportJob(USetStr(12000));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (HasCategories) then begin
    HTCustCat(RepSpec.f6,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasContactClassification) then begin
    HTCustClass(RepSpec.Stext,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;  
  if (nonblank(RepSpec.f3)) then begin
    HTItem(RepSpec.f3,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;  
  if (HasItemGroups) then begin
    HTArtGroup(RepSpec.f7,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasItemClassification) then begin
    HTItemClass(RepSpec.ObjStr,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;  
  EndHeader;

  SetRepCol(2,70);
  SetRepCol(3,130);
  SetRepCol(4,240);
  SetRepCol(5,300);
  SetRepCol(6,360);
  SetRepCol(7,420);
  SetRepCol(8,480);
  
  if (RepSpec.flags[0]==3) then begin
    StartFormat(15);
    OutString(0,0,USetStr(12001),false);
    OutString(8,0,USetStr(12010),true);   
    EndFormat;
    Black_Divider(0,1);
    vDate = RepSpec.sStartDate;
    while (vDate <= RepSpec.sEndDate) begin
      OutDate(0,0,vDate,false);
      Sum1 = GetTotalDaySpending(RepSpec,vDate);
      OutVal(8,0,Sum1,M4Val,true);
      vDate = AddDay(vDate,1);
    end;  
    goto LShopBaskJourRn;
  end;
  
  StartFormat(15);
  OutString(0,0,USetStr(12001),false);
  if (RepSpec.flags[0]!=4) then begin
    OutString(2,0,USetStr(12002),false);
  end else begin
    OutString(2,0,USetStr(12553),false);
  end;
  OutString(3,0,USetStr(12003),false);
  if (RepSpec.flags[0]==0) then begin
    OutString(6,0,USetStr(12004),true);
    OutString(7,0,USetStr(12005),true);
  end;
  if (RepSpec.flags[0]==1) then begin
    OutString(6,0,USetStr(12006),true);
    OutString(7,0,USetStr(12007),true);
  end;  
  if (RepSpec.flags[0]==2) then begin
    OutString(5,0,USetStr(12008),false);  
    OutString(7,0,USetStr(12009),true);
  end;  
  if (RepSpec.flags[0]==4) then begin
    OutString(6,0,USetStr(12442),false);
  end;
  OutString(8,0,USetStr(12010),true);
  EndFormat;
  Black_Divider(0,1);
   
  TSum = 0; 
  foundf = true;
  lasttabprintedf = true;
  if (RepSpec.flags[0]!=4) then begin
    keycnt = 1;
    key = "TransDate";
    ShopBaskr.TransDate = RepSpec.sStartDate;
  end else begin
    keycnt = 2;
    key = "FromFileNameTransDate";
    ShopBaskr.FromFileName = "RestAccVc";
    ShopBaskr.TransDate = RepSpec.sStartDate;
  end;
  while (LoopKey(key,ShopBaskr,keycnt,foundf)) begin  
    Jobr.SerNr = ShopBaskr.OwnerSerNr;
    if (ReadFirstMain(Jobr,1,true)) then begin
      if ShopBaskJourSelect(RepSpec,ShopBaskr,Jobr,foundf) then begin
        if (RepSpec.flags[0]==4) then begin        
          if (lastbartabnr!=Shopbaskr.FromSerNr) then begin
            PrintBarTabLine(lastbartabnr,lastjobnr,SumBar);
            SumBar = 0;
            lastbartabnr = Shopbaskr.FromSerNr;
            lastjobnr = Jobr.SerNr;
            lasttabprintedf = (ShopBaskr.FromFileName!="RestAccVc");
          end;
          if (lastbartabnr==-1) then begin
            lastbartabnr = ShopBaskr.FromSerNr;
            lastjobnr = Jobr.SerNr;
          end;
          foundf = (ShopBaskr.FromFileName=="RestAccVc");
        end;
        if (foundf) then begin
          if (ShopBaskr.PriceInCur!=0) then begin
            Price = Shopbaskr.PriceInCur;
          end else begin
            Price = Shopbaskr.Price;
          end;
          if (Price==0) then begin
            Price = GetShopBaskItemPrice(ShopBaskr,Jobr);
          end;
          Sum1 = Shopbaskr.Qty * Price * (1-(Shopbaskr.Discount/100));
          Sum2 = Shopbaskr.Qty * Price;
          SumBar = SumBar+Sum1;
          cnt = cnt + 1;
          Discount = Sum2 - Sum1;
          if (RepSpec.flags[0]!=4) then begin
            StartFormat(15);
            OutStringID(0,"DblJobShopBaskVcID",Shopbaskr.TransDate,false,Shopbaskr.SerNr);
            OutString(2,0,Shopbaskr.ItemCode,false);
            OutString(3,0,Shopbaskr.Comment,false);
            if (RepSpec.flags[0]==0) then begin
              OutVal(6,0,Shopbaskr.Qty,M40Val,true);
              OutVal(7,0,Price,M4Val,true);
            end;
            if (RepSpec.flags[0]==1) then begin
              OutVal(6,0,Shopbaskr.Discount,M4Val,true);
              OutVal(7,0,Discount,M40Val,true);
            end;
            if (RepSpec.flags[0]==2) then begin
              OutString(5,0,Shopbaskr.CUCode,false);
              OutVal(7,0,Price,M4Val,true);
            end;     
            OutVal(8,0,Sum1,M4Val,true);
            EndFormat;
          end;
          TSum = TSum + Sum1;
          Qty = Qty + Shopbaskr.Qty;
          TDiscount = TDiscount + Discount;
        end;
      end;
    end;
  end;
  if (RepSpec.flags[0]==4) and (lasttabprintedf==false) then begin
    PrintBarTabLine(lastbartabnr,lastjobnr,SumBar);
  end;
  avgprice = TSum/Qty;
  Black_Divider(0,1);
  StartFormat(15);
  if (RepSpec.flags[0]==0) then begin
    OutVal(6,0,Qty,M4Val,true);
  end;
  OutVal(8,0,TSum,M4Val,true);
  Outstring(0,0,USetStr(12011) & Qty,false);
  tstr = TSum;
  Outstring(0,0,USetStr(12012) & tstr,false);
  tstr = avgprice;  
  Outstring(0,0,USetStr(12013) & tstr,false);
  Outstring(0,0,USetStr(12014) & cnt,false);
  tstr = TDiscount;
  Outstring(0,0,USetStr(12015) & tstr,false);
  EndFormat;
  
LShopBaskJourRn:;  
  EndJob;
  return;
end;
