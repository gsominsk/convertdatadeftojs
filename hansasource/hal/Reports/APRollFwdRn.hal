external function string 255 GetSupplierOnAccountAC(string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure GetAPAcc(string,var string);
external procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);

procedure PrintInvoice(record RcVc RepSpec,record OPrsVc OPrsr,var val totsubv,var val totnlv)
begin
  record VIVc VIr;
  record VIVc orgVIr;
  row VIVc VIrw;
  Boolean testf;
  record TRVc TRr;
  row TRVc TRrw;
  Integer i,rwcnt;
  val nlv,nlremv,plv,prepplv;
  val coef;
  string 255 accnumber,prepaccnumber;
  
  VIr.SerNr = OPrsr.TransNr;
  if (ReadFIrstMain(VIr,1,true)) then begin
    testf = true;
    accnumber = VIr.APAcc;
    if (blank(accnumber)) then begin
      GetAPAcc(VIr.VECode,accnumber);
    end;
    rwcnt = MatRowCnt(VIr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(VIr,i,VIrw);
      if (VIrw.stp==kInvoiceRowTypePrepayment) then begin
        prepaccnumber = VIrw.AccNumber;
      end;
    end;
    if (SetInSet(accnumber,RepSpec.f8)==false) then begin
      testf = false;
    end;
    if (testf) then begin
      switch (VIr.InvType) begin
        case kInvoiceTypeCashInvoiceReceiptPRT:
          testf = false;
        case kInvoiceTypeCash:
          testf = false;
        case kInvoiceTypeEmployee:
          testf = false;
        case kInvoiceTypeCredit:
//          if (VIr.CredInv>0) then begin
            orgVIr.SerNr = VIr.CredInv;
            if (ReadFIrstMain(orgVIr,1,true)) then begin
              if (orgVIr.InvType==kInvoiceTypeEmployee or orgVIr.InvType==kInvoiceTypeCash or orgVIr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
                testf = false;
              end else begin
                testf = true;
              end;
              coef = -1;
            end else begin
              if (VIr.CredInv>0) then begin
                testf = false;
                StartFormat(15);
                 OutString(0,0,USetStr(28257) & ": " & VIr.CredInv,false);
                 OutString(200,0,USetStr(28258) &": " & VIr.SerNr,false);
                EndFormat;
              end else begin
                testf = true;
              end;
            end;
//          end;
          coef = -1.00;
        otherwise
          testf = true;
          coef = 1.00;
      end;
    end;
//    if (VIr.OKFlag==0) then begin testf = false; end;
    if (testf) then begin
      TRr.IntYc = VIYc;
      TRr.Number = VIr.SerNr;
      ReadFirstMain(TRr,2,true);
      rwcnt = MatRowCnt(TRr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(TRr,i,TRrw);
        if (SetInSet(TRrw.AccNumber,RepSpec.f8)) then begin
          nlremv = nlremv + (TRrw.CredVal - TRrw.DebVal);
        end;
      end;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(TRr,i,TRrw);
        if (SetInSet(TRrw.AccNumber,RepSpec.f8)) then begin
          nlv = TRrw.CredVal - TRrw.DebVal;
          i = rwcnt;
        end;
      end;
      plv = coef*MulRateToBase1(VIr.CurncyCode,VIr.PayVal-VIr.WithHoldingTax,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
      rwcnt = MatRowCnt(VIr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(VIr,i,VIrw);
        if (VIrw.stp==kInvoiceRowTypePrepayment) then begin
          prepplv = prepplv + VIrw.Sum;
        end;
      end;
      if (RepSpec.flags[0]!=0) then begin
        if (plv==nlv) then begin testf = false; end;
      end;
      if (testf) then begin
        StartFormat(15);
         OutDate(0,0,OPrsr.TransDate,false);
         switch (VIr.InvType) begin
           case kInvoiceTypeCredit:
             OutString(40,0,USetStr(28259),false);
           otherwise
             OutString(40,0,USetStr(28260),false);
         end;
         OutString(120,"DblVIVc",OPrsr.TransNr,false);
         OutVal(220,0,plv,M4Val,true);
         OutVal(300,0,nlv,M4Val,true);
         OutVal(380,0,plv-nlv,M4Val,true);
        EndFormat;
        totsubv = totsubv + plv;
        totnlv = totnlv + nlv;
        nlremv = nlremv - nlv;
        nlremv = nlremv + prepplv;
        if (nlremv!=0) then begin
          StartFormat(15);
           OutDate(0,0,OPrsr.TransDate,false);
           switch (VIr.InvType) begin
             case kInvoiceTypeCredit:
               OutString(40,0,USetStr(28259),false);
             otherwise
               OutString(40,0,USetStr(28260),false);
           end;
           OutString(120,"DblVIVc",OPrsr.TransNr,false);
           OutVal(300,0,nlremv,M4Val,true);
           OutVal(380,0,-nlremv,M4Val,true);
          EndFormat;
          totnlv = totnlv + nlremv;
        end;
      end;
    end;
  end else begin
    StartFormat(15);
     OutString(0,0,USetStr(28261) & ": " & OPrsr.TransNr,false);
    EndFormat;
  end;
  return;
end;

procedure PrintPayment(record RcVc RepSpec,record OPrsVc OPrsr,var val totsubv,var val totnlv)
begin
  record OPVc OPr;
  row OPVc OPrw;
  Integer opi,oprwcnt;
  record TRVc TRr;
  row TRVc TRrw;
  Integer tri,trrwcnt;
  val nlv,nlvc,nlremv,opv;
  string 255 accnumber;
  Boolean testf;
  val frrate,torate1,torate2,baserate1,baserate2;
  record VIVc VIr;
  Date dt;
  
  OPr.SerNr = OPrsr.TransNr;
  if (ReadFIrstMain(OPr,1,true)) then begin
    if (OPr.DoneFlag!=0) then begin
      TRr.IntYc = OPYc;
      TRr.Number = OPr.SerNr;
      ReadFirstMain(TRr,2,true);
      trrwcnt = MatRowCnt(TRr);
      for (tri=0;tri<trrwcnt;tri=tri+1) begin
        MatRowGet(TRr,tri,TRrw);
        if (SetInSet(TRrw.AccNumber,RepSpec.f8)) then begin
          nlremv = nlremv + (TRrw.DebVal - TRrw.CredVal);
        end;
      end;
      
      oprwcnt = MatRowCnt(OPr);
      for (opi=0;opi<oprwcnt;opi=opi+1) begin
        MatRowGet(OPr,opi,OPrw);
        if (OPrw.VISerNr==OPrsr.VINr) then begin
          accnumber = OPrw.APAcc;
          if (OPrw.VISerNr>0) then begin
            if (blank(accnumber)) then begin
              GetAPAcc(OPrw.VECode,accnumber);
            end;
          end else begin
            accnumber = GetSupplierOnAccountAC(OPrw.VECode);
          end;
          if (SetInSet(accnumber,RepSpec.f8)) then begin
            dt = OPrsr.TransDate;
            if (OPrw.VISerNr>0) then begin
              VIr.SerNr = OPrw.VISerNr;
              if (ReadFirstMain(VIr,1,true)) then begin
                dt = VIr.TransDate;
              end;
            end;
            GetFullCurncyRate(OPrw.PInvCurncy,dt,frrate,torate1,torate2,baserate1,baserate2);
            opv = MulRateToBase1(OPrw.PInvCurncy,OPrw.PInvVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
            trrwcnt = MatRowCnt(TRr);
            nlv = blankval;
            for (tri=0;tri<trrwcnt;tri=tri+1) begin
              MatRowGet(TRr,tri,TRrw);
              nlvc = TRrw.CurDebVal - TRrw.CurCredVal;
              if (nlvc==0) then begin
                nlvc = TRrw.DebVal - TRrw.CredVal;
              end;
              if (SetInSet(TRrw.AccNumber,RepSpec.f8)) and (nlvc==OPrw.PInvVal) then begin
                nlv = TRrw.DebVal - TRrw.CredVal;
                tri = trrwcnt;
              end;
            end;
            testf = true;
            if (RepSpec.flags[0]!=0) then begin
              if (opv==nlv) then begin testf = false; end;
            end;
            if (testf) then begin
              StartFormat(15);
               OutDate(0,0,OPrsr.TransDate,false);
               OutString(40,0,USetStr(28262),false);
               OutString(120,"DblOPVc",OPrsr.TransNr,false);
               OutVal(220,0,-opv,M4Val,true);
               OutVal(300,0,-nlv,M4Val,true);
               OutVal(380,0,nlv-opv,M4Val,true);
              EndFormat;
              totsubv = totsubv - opv;
              totnlv = totnlv - nlv;
              nlremv = nlremv - nlv;
            end;
          end;
        end;
      end;
      if (nlremv!=0) then begin
        StartFormat(15);
         OutDate(0,0,OPrsr.TransDate,false);
         OutString(40,0,USetStr(28262),false);
         OutString(120,"DblOPVc",OPrsr.TransNr,false);
         OutVal(300,0,-nlremv,M4Val,true);
         OutVal(380,0,nlremv,M4Val,true);
        EndFormat;
        totnlv = totnlv - nlremv;
      end;
    end;
  end else begin
    StartFormat(15);
     OutString(0,0,USetStr(28263) & ": " & OPrsr.TransNr,false);
    EndFormat;
  end;
  return;
end;

procedure PrintNLTransaction(record RcVc RepSpec,record OPrsVc OPrsr,var val totsubv,var val totnlv)
begin
  record TRVc TRr;
  row TRVc TRrw;
  Integer tri,trrwcnt;
  Boolean testf,vif;
  record VIVc VIr;
  val nlv,plv;
  
  TRr.Number = OPrsr.TransNr;
  TRr.IntYc = OPrsr.IntYc;
  if (ReadFIrstMain(TRr,2,true)) then begin
    trrwcnt = MatRowCnt(TRr);
    for (tri=0;tri<trrwcnt;tri=tri+1) begin
      MatRowGet(TRr,tri,TRrw);
      if (TRrw.Typ==kTransactionRowTypeSupplier) then begin
        testf = true;
        VIr.SerNr = TRrw.SerNr;
        vif = ReadFirstMain(VIr,1,true);

        if (SetInSet(TRrw.AccNumber,RepSpec.f8)==false) then begin testf = false; end;
        if (RepSpec.flags[0]!=0) then begin
          if (TRrw.DebVal-TRrw.CredVal==TRrw.DebVal-TRrw.CredVal) then begin testf = false; end;
        end;
            
        if (testf) then begin
          nlv = TRrw.CredVal - TRrw.DebVal;
          plv = blankval;
          if (vif) then begin
            if (VIr.APAcc==TRrw.AccNumber) then begin
              plv = nlv;
            end else begin
              plv = 0;
            end;
          end;
          if (RepSpec.flags[0]!=0) then begin
            if (plv==nlv) then begin testf = false; end;
          end;
        end;
        if (testf) then begin
          StartFormat(15);
           OutDate(0,0,OPrsr.TransDate,false);
           OutString(40,0,USetStr(28264),false);
           OutStringID(120,"DblTRVc",OPrsr.TransNr,false,OPrsr.IntYc);
           OutVal(220,0,plv,M4Val,true);
           OutVal(300,0,nlv,M4Val,true);
           OutVal(380,0,nlv-plv,M4Val,true);
          EndFormat;
          totsubv = totsubv + plv;
          totnlv = totnlv + nlv;
        end;
      end;
    end;
  end else begin
    StartFormat(15);
     OutString(0,0,USetStr(28265) & ": " & OPrsr.TransNr,false);
    EndFormat;
  end;
  return;
end;

procedure PrintNLTransaction2(record RcVc RepSpec,record MainVc Mainr,var val totsubv,var val totnlv)
begin
  record TRVc TRr;
  row TRVc TRrw;
  Integer tri,trrwcnt;
  Boolean testf,vif;
  val nlv,plv;
  
  TRr.Number = Mainr.TransNr;
  TRr.IntYc = Mainr.IntYc;
  if (ReadFIrstMain(TRr,2,true)) then begin
    trrwcnt = MatRowCnt(TRr);
    for (tri=0;tri<trrwcnt;tri=tri+1) begin
      MatRowGet(TRr,tri,TRrw);
      if (TRrw.Typ!=kTransactionRowTypeSupplier) then begin
        testf = true;
        if (SetInSet(TRrw.AccNumber,RepSpec.f8)==false) then begin testf = false; end;            
        if (testf) then begin
          nlv = TRrw.DebVal - TRrw.CredVal;
          plv = blankval;
          if (RepSpec.flags[0]!=0) then begin
            if (plv==nlv) then begin testf = false; end;
          end;
        end;
        if (testf) then begin
          StartFormat(15);
           OutDate(0,0,Mainr.TransDate,false);
           OutString(40,0,USetStr(28264),false);
           OutStringID(120,"DblTRVc",Mainr.TransNr,false,Mainr.IntYc);
           OutVal(220,0,plv,M4Val,true);
           OutVal(300,0,nlv,M4Val,true);
           OutVal(380,0,nlv-plv,M4Val,true);
          EndFormat;
          totsubv = totsubv + plv;
          totnlv = totnlv + nlv;
        end;
      end;
    end;
  end else begin
    StartFormat(15);
     OutString(0,0,USetStr(28265) & ": " & Mainr.TransNr,false);
    EndFormat;
  end;
  return;
end;

procedure PrintCashIn(record RcVc RepSpec,record OPrsVc OPrsr,var val totsubv,var val totnlv)
begin
  record CLInVc CLInr;
  row CLInVc CLInrw;
  Integer clini,clinrwcnt;
  record TRVc TRr;
  row TRVc TRrw;
  Integer tri,trrwcnt;
  val nlv,nlvc,nlremv,clinv;
  string 255 accnumber;
  Boolean testf;
  record VIVc VIr;
  
  CLInr.SerNr = OPrsr.TransNr;
  if (ReadFirstMain(CLInr,1,true)) then begin
    if (CLInr.OKFlag!=0) then begin
      TRr.IntYc = CLInYc;
      TRr.Number = CLInr.SerNr;
      ReadFirstMain(TRr,2,true);
      trrwcnt = MatRowCnt(TRr);
      for (tri=0;tri<trrwcnt;tri=tri+1) begin
        MatRowGet(TRr,tri,TRrw);
        if (SetInSet(TRrw.AccNumber,RepSpec.f8)) then begin
          nlremv = nlremv + (TRrw.CredVal - TRrw.DebVal);
        end;
      end;

      clinrwcnt = MatRowCnt(CLInr);
      for (clini=0;clini<clinrwcnt;clini=clini+1) begin
        MatRowGet(CLInr,clini,CLInrw);
        if (CLInrw.Type==kCashInRowTypeCredPurchaseInvoice and CLInrw.TransNr!=-1) then begin
          VIr.SerNr = CLInrw.TransNr;
          ReadFirstMain(VIr,1,true);
          accnumber = VIr.APAcc;
          if (blank(accnumber)) then begin
            GetAPAcc(VIr.VECode,accnumber);
          end;
          if (SetInSet(accnumber,RepSpec.f8)) then begin
            clinv = MulRateToBase1(CLInr.CurncyCode,CLInrw.Sum,CLInr.FrRate,CLInr.ToRateB1,CLInr.ToRateB2,CLInr.BaseRate1,CLInr.BaseRate2,DefaultCurRoundOff);
            trrwcnt = MatRowCnt(TRr);
            nlv = blankval;
            for (tri=0;tri<trrwcnt;tri=tri+1) begin
              MatRowGet(TRr,tri,TRrw);
              nlvc = TRrw.CurCredVal - TRrw.CurDebVal;
              if (nlvc==0) then begin
                nlvc = TRrw.CredVal - TRrw.DebVal;
              end;
              if (SetInSet(TRrw.AccNumber,RepSpec.f8)) and (nlvc==CLInrw.Sum) then begin
                nlv = TRrw.CredVal - TRrw.DebVal;
                tri = trrwcnt;
              end;
            end;
            testf = true;
            if (RepSpec.flags[0]!=0) then begin
              if (clinv==nlv) then begin testf = false; end;
            end;
            if (testf) then begin
              StartFormat(15);
               OutDate(0,0,OPrsr.TransDate,false);
               OutString(40,0,USetStr(28267),false);
               OutString(120,"DblCLInVc",OPrsr.TransNr,false);
               OutVal(220,0,clinv,M4Val,true);
               OutVal(300,0,nlv,M4Val,true);
               OutVal(380,0,clinv-nlv,M4Val,true);
              EndFormat;
              totsubv = totsubv + clinv;
              totnlv = totnlv + nlv;
              nlremv = nlremv - nlv;
            end;
          end;
        end;
      end;
      if (nlremv!=0) then begin
        StartFormat(15);
         OutDate(0,0,OPrsr.TransDate,false);
         OutString(40,0,USetStr(28267),false);
         OutString(120,"DblCLInVc",OPrsr.TransNr,false);
         OutVal(300,0,nlremv,M4Val,true);
         OutVal(380,0,-nlremv,M4Val,true);
        EndFormat;
        totnlv = totnlv + nlremv;
      end;
    end;
  end else begin
    StartFormat(15);
     OutString(0,0,USetStr(28268) & ": " & OPrsr.TransNr,false);
    EndFormat;
  end;
end;

procedure PrintCashOut(record RcVc RepSpec,record OPrsVc OPrsr,var val totsubv,var val totnlv)
begin
  record CLOutVc CLOutr;
  row CLOutVc CLOutrw;
  Integer clouti,cloutrwcnt;
  record TRVc TRr;
  row TRVc TRrw;
  Integer tri,trrwcnt;
  val nlv,nlvc,nlremv,cloutv;
  string 255 accnumber;
  Boolean testf;
  record VIVc VIr;
  
  CLOutr.SerNr = OPrsr.TransNr;
  if (ReadFirstMain(CLOutr,1,true)) then begin
    if (CLOutr.OKFlag!=0) then begin
      TRr.IntYc = CLOutYc;
      TRr.Number = CLOutr.SerNr;
      ReadFirstMain(TRr,2,true);
      trrwcnt = MatRowCnt(TRr);
      for (tri=0;tri<trrwcnt;tri=tri+1) begin
        MatRowGet(TRr,tri,TRrw);
        if (SetInSet(TRrw.AccNumber,RepSpec.f8)) then begin
          nlremv = nlremv + (TRrw.DebVal - TRrw.CredVal);
        end;
      end;

      cloutrwcnt = MatRowCnt(CLOutr);
      for (clouti=0;clouti<cloutrwcnt;clouti=clouti+1) begin
        MatRowGet(CLOutr,clouti,CLOutrw);
        if ((CLOutrw.Type==kCashOutRowTypeInvoice or CLOutrw.Type==kCashOutRowTypeSupplierPrepayment) and CLOutrw.TransNr!=-1) then begin
          if (CLOutrw.Type==kCashOutRowTypeInvoice) then begin
            VIr.SerNr = CLOutrw.TransNr;
            ReadFirstMain(VIr,1,true);
            accnumber = VIr.APAcc;
            if (blank(accnumber)) then begin
              GetAPAcc(VIr.VECode,accnumber);
            end;
          end else begin
            accnumber = GetSupplierOnAccountAC(CLOutrw.Company);
          end;
          if (SetInSet(accnumber,RepSpec.f8)) then begin
            cloutv = MulRateToBase1(CLOutr.CurncyCode,CLOutrw.Sum,CLOutr.FrRate,CLOutr.ToRateB1,CLOutr.ToRateB2,CLOutr.BaseRate1,CLOutr.BaseRate2,DefaultCurRoundOff);
            trrwcnt = MatRowCnt(TRr);
            nlv = blankval;
            for (tri=0;tri<trrwcnt;tri=tri+1) begin
              MatRowGet(TRr,tri,TRrw);
              nlvc = TRrw.CurDebVal - TRrw.CurCredVal;
              if (nlvc==0) then begin
                nlvc = TRrw.DebVal - TRrw.CredVal;
              end;
              if (SetInSet(TRrw.AccNumber,RepSpec.f8)) and (nlvc==CLOutrw.Sum) then begin
                nlv = TRrw.DebVal - TRrw.CredVal;
                tri = trrwcnt;
              end;
            end;
            testf = true;
            if (RepSpec.flags[0]!=0) then begin
              if (cloutv==nlv) then begin testf = false; end;
            end;
            if (testf) then begin
              StartFormat(15);
               OutDate(0,0,OPrsr.TransDate,false);
               OutString(40,0,USetStr(28269),false);
               OutString(120,"DblCLOutVc",OPrsr.TransNr,false);
               OutVal(220,0,-cloutv,M4Val,true);
               OutVal(300,0,-nlv,M4Val,true);
               OutVal(380,0,nlv-cloutv,M4Val,true);
              EndFormat;
              totsubv = totsubv - cloutv;
              totnlv = totnlv - nlv;
              nlremv = nlremv - nlv;
            end;
          end;
        end;
      end;
      if (nlremv!=0) then begin
        StartFormat(15);
         OutDate(0,0,OPrsr.TransDate,false);
         OutString(40,0,USetStr(28269),false);
         OutString(120,"DblCLOutVc",OPrsr.TransNr,false);
         OutVal(300,0,-nlremv,M4Val,true);
         OutVal(380,0,nlremv,M4Val,true);
        EndFormat;
        totnlv = totnlv - nlremv;
      end;
    end;
  end else begin
    StartFormat(15);
     OutString(0,0,USetStr(28295) & ": " & OPrsr.TransNr,false);
    EndFormat;
  end;
end;

procedure PrintCashInRevPrepVE(record RcVc RepSpec,record OPrsVc OPrsr,var val totsubv,var val totnlv)
begin
  record CLInVc CLInr;
  row CLInVc CLInrw;
  Integer clini,clinrwcnt;
  record TRVc TRr;
  row TRVc TRrw;
  Integer tri,trrwcnt;
  val nlv,nlvc,nlremv,clinv;
  string 255 accnumber;
  Boolean testf;
  
  CLInr.SerNr = OPrsr.TransNr;
  if (ReadFirstMain(CLInr,1,true)) then begin
    if (CLInr.OKFlag!=0) then begin
      TRr.IntYc = CLInYc;
      TRr.Number = CLInr.SerNr;
      ReadFirstMain(TRr,2,true);
      trrwcnt = MatRowCnt(TRr);
      for (tri=0;tri<trrwcnt;tri=tri+1) begin
        MatRowGet(TRr,tri,TRrw);
        if (SetInSet(TRrw.AccNumber,RepSpec.f8)) then begin
          nlremv = nlremv + (TRrw.CredVal - TRrw.DebVal);
        end;
      end;

      clinrwcnt = MatRowCnt(CLInr);
      for (clini=0;clini<clinrwcnt;clini=clini+1) begin
        MatRowGet(CLInr,clini,CLInrw);
        if (CLInrw.Type==kCashInRowTypeSupplierRevPrepayment and CLInrw.TransNr!=-1) then begin
          accnumber = GetSupplierOnAccountAC(CLInrw.Company);
          if (SetInSet(accnumber,RepSpec.f8)) then begin
            clinv = MulRateToBase1(CLInr.CurncyCode,CLInrw.Sum,CLInr.FrRate,CLInr.ToRateB1,CLInr.ToRateB2,CLInr.BaseRate1,CLInr.BaseRate2,DefaultCurRoundOff);
            trrwcnt = MatRowCnt(TRr);
            for (tri=0;tri<trrwcnt;tri=tri+1) begin
              MatRowGet(TRr,tri,TRrw);
              nlvc = TRrw.CurCredVal - TRrw.CurDebVal;
              if (nlvc==0) then begin
                nlvc = TRrw.CredVal - TRrw.DebVal;
              end;
              if (SetInSet(TRrw.AccNumber,RepSpec.f8)) and (nlvc==CLInrw.Sum) then begin
                nlv = TRrw.CredVal - TRrw.DebVal;
                tri = trrwcnt;
              end;
            end;
            testf = true;
            if (RepSpec.flags[0]!=0) then begin
              if (clinv==nlv) then begin testf = false; end;
            end;
            if (testf) then begin
              StartFormat(15);
               OutDate(0,0,OPrsr.TransDate,false);
               OutString(40,0,USetStr(28296),false);
               OutString(120,"DblCLInVc",OPrsr.TransNr,false);
               OutVal(220,0,clinv,M4Val,true);
               OutVal(300,0,nlv,M4Val,true);
               OutVal(380,0,clinv-nlv,M4Val,true);
              EndFormat;
              totsubv = totsubv + clinv;
              totnlv = totnlv + nlv;
              nlremv = nlremv - nlv;
            end;
          end;
        end;
      end;
      if (nlremv!=0) then begin
        StartFormat(15);
         OutDate(0,0,OPrsr.TransDate,false);
         OutString(40,0,USetStr(28296),false);
         OutString(120,"DblCLInVc",OPrsr.TransNr,false);
         OutVal(300,0,nlremv,M4Val,true);
         OutVal(380,0,-nlremv,M4Val,true);
        EndFormat;
        totnlv = totnlv + nlremv;
      end;
    end;
  end else begin
    StartFormat(15);
     OutString(0,0,USetStr(28297) & ": " & OPrsr.TransNr,false);
    EndFormat;
  end;
end;

global
procedure APRollFwdRn(record RcVc RepSpec)
begin
  string 255 tstr;
  Integer rw;
  record OPrsVc OPrsr;
  record MainVc Mainr;
  Boolean found,testf;
  val totsubv,totnlv;
  
  if (blankdate(RepSpec.d1)) then begin
    RepSpec.d1 = CurrentDate;
  end;
  StartReportJob(USetStr(28266));
   rw = 1;
   tstr = RepSpec.d1;
   Header(rw,tstr,1);
   rw = rw + 1;
  EndHeader;    
  StartFormat(15);
   OutString(0,0,USetStr(28251),false);
   OutString(40,0,USetStr(28252),false);
   OutString(120,0,USetStr(28253),false);
   OutString(220,0,USetStr(28254),true);
   OutString(300,0,USetStr(28255),true);
   OutString(380,0,USetStr(28256),true);
  EndFormat;
  Gray_Divider(0,1);

  found = true;
  OPrsr.TransDate = RepSpec.d1;
  while (LoopKey("TransDate",OPrsr,1,found)) begin
    if (OPrsr.TransDate!=RepSpec.d1) then begin found = false; end;
    if (found) then begin
      switch (OPrsr.TransType) begin
        case kOPrsTransTypeInvoice:
          PrintInvoice(RepSpec,OPrsr,totsubv,totnlv);
        case kOPrsTransTypePayment:
          PrintPayment(RepSpec,OPrsr,totsubv,totnlv);
        case kOPrsTransTypeNLTransaction:
          PrintNLTRansaction(RepSpec,OPrsr,totsubv,totnlv);          
        case kOPrsTransTypeCashIn:
          PrintCashIn(RepSpec,OPrsr,totsubv,totnlv);
        case kOPrsTransTypeCashOut:
          PrintCashOut(RepSpec,OPrsr,totsubv,totnlv);
        case kOPrsTransTypeReverseSupplierPrepayment:
          PrintCashInRevPrepVE(RepSpec,OPrsr,totsubv,totnlv);
      end;
    end;
  end;
  found = true;
  Mainr.TransDate = RepSpec.d1;
  while (LoopKey("TransDate",Mainr,1,found)) begin
    if (Mainr.TransDate!=RepSpec.d1) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (SetInSet(Mainr.AccNumber,RepSpec.f8)==false) then begin testf = false; end;
      if (Mainr.IntYc>=IVYc) then begin testf = false; end;
      if (testf) then begin
        PrintNLTransaction2(RepSpec,Mainr,totsubv,totnlv);          
      end;
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
   OutVal(220,0,totsubv,M4Val,true);
   OutVal(300,0,totnlv,M4Val,true);
   OutVal(380,0,totsubv-totnlv,M4Val,true);
  EndFormat;
  EndJob;
  return;
end;