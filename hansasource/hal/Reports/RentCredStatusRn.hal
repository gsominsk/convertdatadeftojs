external procedure CUCreditLimit(record CUVc,Date,string,var val,var LongInt);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean SetInSet2(string,string);
external procedure HTCusts(string,string,var string);
external procedure HTCustCat(string,var string);
external procedure HTCustClass(string,var string);

function val AddOrderStock(string cust)
begin
  val res;
  record ORVc ORr;
  Boolean TrHs;
  
  TrHs = true;
  ORr.OSFlag = 1;
  ORr.CustCode = cust;
  while (LoopKey("OSCU",ORr,2,TrHs)) begin
    if (ORr.OSFlag!=1) then begin
      TrHs = false;
    end;
    if (ORr.CustCode!=cust) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      if ((ORr.InvFlag<2) and (ORr.Closed==0)) then begin
        res = res + MulRateToBase1(ORr.CurncyCode,ORr.Sum4,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,DefaultCurRoundOff);
      end;
    end;
  end;  
  AddOrderStock = res;
  return;
end;

global 
procedure CredStatusRn(record RcVc RepSpec)
begin
  record CUVc CUr;
  boolean TrHs, testf;
  val v,diff;
  Integer rw;
  string 255 tstr;
  val limit;
  LongInt limitdays;
  
  StartReportJob(USetStr(12910));
  rw = 1;
  if (nonblank(RepSpec.f1)) then begin
    HTCusts(RepSpec.f1,RepSpec.f1,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f2)) then begin
    HTCustCat(RepSpec.f2,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f3)) then begin
    HTCustClass(RepSpec.f3,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  EndHeader;
  SetRepCol(2,80);
  SetRepCol(3,320);
  SetRepCol(4,430);
  StartFormat(15);
  OutString(0,0,USetStr(12911),false);
  OutString(2,0,USetStr(12912),false);
  OutString(3,0,USetStr(12913),true);
  OutString(4,0,USetStr(12914),true);
  OutString(1,0,USetStr(12915),true);
  EndFormat;
  Gray_Divider(0,1);
  TrHs = true;
  CUr.Code = RepSpec.f1;
  while (LoopMain(CUr,1,TrHs)) begin
    if (TrHs) then begin
      if (nonblank(RepSpec.f1)) then begin
        if (CUr.Code>RepSpec.f1) then begin
          TrHs = false;
        end;
      end;
    end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.f2)) then begin
        if (CUr.CustCat!=RepSpec.f2) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (!SetInSet2(RepSpec.f3,CUr.Classification)) then begin
          testf = false;
        end;
      end;
      v = GetBalance(CUr,"balance",CurrentDate);
      if (RepSpec.flags[0]!=0) then begin
        v = v + AddOrderStock(CUr.Code);
      end;
      if (v==0) then begin
        testf = false;
      end;
      CUCreditLimit(CUr,CurrentDate,"sales",limit,limitdays);
      if (limit==0) then begin
        testf = false;
      end;
      diff = (v*100)/limit;
      if (RepSpec.vals0>0) then begin
        if (diff<RepSpec.vals0) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        StartFormat(15);
        OutString(0,"DblCUVc",CUr.Code,false);
        OutString(2,0,left(CUr.Name,25),false);
        OutVal(3,0,limit,M4Val,true);
        OutVal(4,0,v,M4Val,true);
        OutVal(1,0,diff,M4Val,true);
        EndFormat;
      end;
    end;
  end; 
  EndJob; 
  return;
end;
