external procedure OneInventoryNrDepreciation(record AT2UnitVc,Integer,Integer,Date,Date,Integer,Integer,Integer,Integer,Integer,
                                              Integer,Integer,
                                              var val,var val,var val,var val,var val,var val,var val,var val,var val,var val,
                                              var val,var val,var val);
external function Boolean CheckifAT2UnitSold(string,Date);
external function Boolean CheckAssetCatMatch(string,string,string);
external procedure HTOBJ(string,var string);
external procedure HTClasses(string,string,var string);
external procedure HT2Per(Date, Date , var string);
external procedure HTModel(Integer,var string);
external procedure HTValuesPerMonth(Integer,var string);
external procedure HTInventoryNrs(string,string,var string);
external procedure OneAT2UnitDeprCalculation(Integer,Integer,Integer,Boolean,Date,Date,string,var val,var val,var val,var val,var string,val,val,Boolean);
external function Boolean GetLastDprStartValInFiscalYear(Date,Date,Integer,string,val,var val,var val);
external procedure FindFiscalYear(Date,var Date,var Date);
external function Boolean AT2ExcludeCategory(string);

global
procedure GetDepreciationPrcWithRows(Date startdate,Date td,string modcode,var val resp)
begin
  record DprModVc DMr;
  row DprModVc DMrw;
  Integer i,rwcnt;
  val t;
  Date ysd,yed;
  
  ysd = startdate;
  resp = blankval;
  DMr.Code = modcode;
  if (ReadFirstMain(DMr,1,true)) then begin
    if (DMr.LifecycleYears>0) then begin
      t = DMr.LifecycleYears;
      resp = 100/t;
      rwcnt = MatRowCnt(DMr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(DMr,i,DMrw);
        yed = AddMonth(ysd,12);
        yed = AddDay(yed,-1);
        if (DateInRange(td,ysd,yed)) then begin
          resp = DMrw.YearPerc;
          goto LGetDepreciationPrcWithRows;
        end;
        ysd = AddDay(yed,1);
      end;
    end else begin
      resp = DMr.DeprPerc;
    end;
  end;
LGetDepreciationPrcWithRows:;  
  return;
end;

procedure PrintAT2Header(record RcVc RepSpec)
BEGIN      
  Integer rw;
  string 255 tstr;
  string 30 frinv,toinv;
  
  frinv = FirstInRange(RepSpec.f2,30);    
  toinv = LastInRange(RepSpec.f2,30);    
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw, tstr, 1);
  rw = rw + 1;
  HTModel(RepSpec.flags[1],tstr);
  Header(rw, tstr, 0);
  HTInventoryNrs(frinv,toinv,tstr);
  Header(rw, tstr, 1);
  rw = rw + 1;
  HTValuesPerMonth(RepSpec.Comparison,tstr);
  Header(rw, tstr, 0);
  if (nonblank(RepSpec.f1)) then begin
    tstr = USetStr(7111);
    tstr = tstr & " ";
    tstr = tstr & RepSpec.f1;
    Header(rw, tstr, 1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.AccStr)) then begin
    tstr = USetStr(7117);
    tstr = tstr & " ";
    tstr = tstr & RepSpec.f1;
    Header(rw, tstr, 1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.f3)) then begin
    HTClasses(RepSpec.f3,RepSpec.AccStr,tstr);
    Header(rw, tstr, 1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.ObjStr)) then begin
    HTOBJ(RepSpec.ObjStr,tstr);
    Header(rw, tstr, 1);
    rw = rw + 1;
  end;  
  RETURN;
END;

procedure PrintInventoryNrData(record RcVc RepSpec,record AT2UnitVc ATUnitr,val svp,val dprprc,val dprv,val dprvb,val dprbef,val lastsvp)
BEGIN
  val purchval,initdepr;
  
  purchval = ATUnitr.PurchVal;
  initdepr = ATUnitr.InitDeprVal1;
  if (RepSpec.flags[1]==1) then begin
    if (ATUnitr.PurchVal2>0) then begin
      purchval = ATUnitr.PurchVal2;
    end;
    initdepr = ATUnitr.InitDeprVal2; 
  end;
  purchval = purchval*ATUnitr.Quantity;
  initdepr = initdepr*ATUnitr.Quantity;
  StartFormat(15);    
   OutString(0,"DblAT2UnitVc",ATUnitr.InventoryNr,false);
   OutString(2,0,ATUnitr.Description,false);
   OutDate(7,0,ATUnitr.PurchaseDate,false);
  EndFormat;
  StartFormat(15);    
   OutVal(2,0,purchval,M4Val,true);
   OutVal(4,0,dprprc,M4Val,true);
   OutVal(5,0,lastsvp-svp,M4Val,true);
   
   if (dprbef==0) then begin
     OutVal(6,0,initdepr,M4Val,true);
     OutVal(7,0,svp-(initdepr),M4Val,true);
   end else begin
     OutVal(6,0,dprvb,M4Val,true);
     OutVal(7,0,svp-dprvb,M4Val,true);
   end;
   OutVal(8,0,dprv,M4Val,true);
   OutVal(9,0,dprv + dprvb,M4Val,true);
   OutVal(1,0,lastsvp-(dprv+dprvb),M4Val,true);
  EndFormat;
  RETURN;
END;  

procedure PrintMothlyDepreciations(record RcVc RepSpec,record AT2UnitVc ATUnitr,Date sStartDate,Date sEndDate)
BEGIN
  Date td,sdate,edate,startdate;
  record AT2DprVc LastDprr;
  val dprbef,dprv,dprprc2,t,svp,revval,revdprbef,revdprv,lastrevval;
  string 255 tstr;
  Boolean TrHs;
  val qty,totdprv,totrevdprv;
  val dprprc1;
  
  qty = ATUnitr.Quantity;
  if (qty==0) then begin qty = 1; end;
  StartFormat(15);
   OutString(15,0,USetStr(11478),false);
   OutString(4,0,USetStr(11484),true);
   OutString(5,0,USetStr(11474),true);
   OutString(6,0,USetStr(11479),true);
   OutString(7,0,USetStr(11482),true);
   OutString(8,0,USetStr(11483),true);
  EndFormat;
  Gray_Divider(15,8);

  if (RepSpec.flags[1]==0) then begin
    startdate = ATUnitr.StartingDate1;
  end else begin
    startdate = ATUnitr.StartingDate2;
  end;
  td = sStartDate;
  while (td<=sEndDate) begin
    if (RepSpec.flags[1]==0) then begin
      GetDepreciationPrcWithRows(startdate,td,ATUnitr.Model1,dprprc1);
    end else begin
      GetDepreciationPrcWithRows(startdate,td,ATUnitr.Model2,dprprc1);
    end;
    sdate = AddMonth(td,-GetMonth(td)+1);
    sdate = AddDay(sdate,-GetDay(sdate)+1);
    edate = td;
    edate = AddDay(edate,-GetDay(edate) + DaysInMonth(GetYear(edate),GetMonth(edate)));
    if (sdate<td) then begin
      sdate = td;
    end;
    dprbef = 0;
    dprv = 0;
    revdprbef = 0;
    revdprv = 0;
    t = blankval;
    if (GetLastDprStartValInFiscalYear(sdate,edate,RepSpec.flags[1],ATUnitr.InventoryNr,ATUnitr.PurchVal,svp,t)) then begin end;
//Find wrofs    
    OneAT2UnitDeprCalculation(RepSpec.Comparison,RepSpec.flags[3],RepSpec.flags[1],false,sdate,edate,ATUnitr.InventoryNr,dprbef,dprv,t,t,tstr,svp,qty*ATUnitr.ResVal,false);

//StopAlert("sdate " & sdate & " edate " & edate & " dprbef " & dprbef & " dprv " & dprv);
//    acumdpr = acumdpr + dprv;
    if (dprv>0) then begin
      StartFormat(15);
       OutString(15,0,USetStr(2780+GetMonth(td)),false);
       revval = blankval;
       TrHs = true; 
       dprprc2 = -1;
       LastDprr.InventoryNr = ATUnitr.InventoryNr;
       LastDprr.TransDate = edate;
       if (ReadLastKey("DateInventoryNr",LastDprr,2,false)) then begin
         if (LastDprr.InventoryNr==ATUnitr.InventoryNr) then begin
           if (LastDprr.TransDate>=sdate) then begin
             if (LastDprr.TransDate<=edate) then begin
               revval = LastDprr.StartVal;
               GetDepreciationPrcWithRows(startdate,LastDprr.TransDate,ATUnitr.Model1,dprprc2);
             end;
           end;
         end;
       end;
       if (revval!=0) then begin
         lastrevval = revval;
       end;
       if (lastrevval!=0) then begin
  //       OutVal(4,0,lastrevval,M4Val,true);
       end else begin
  //       OutVal(4,0,ATUnitr.PurchVal,M4Val,true);
       end;
       if (dprprc2!=-1) then begin
         OutVal(5,0,dprprc2,M4Val,true);
       end else begin
         OutVal(5,0,dprprc1,M4Val,true);
       end;
       OutVal(6,0,dprv,M4Val,true);
       totdprv = totdprv + dprv;
       if (lastrevval!=0) then begin
//  val revbef,fwdassetqty,assetqty,thestartval,wrofqty,wrofsum,wrofdeprsum,startval,purchval;
         
         OutVal(7,0,qty*(lastrevval-ATUnitr.PurchVal),M4Val,true);
         OneAT2UnitDeprCalculation(RepSpec.Comparison,RepSpec.flags[3],RepSpec.flags[1],false,sdate,edate,ATUnitr.InventoryNr,dprbef,dprv,revdprbef,revdprv,tstr,revval-ATUnitr.PurchVal,qty*ATUnitr.ResVal,false);

//          OneInventoryNrDepreciation(ATUnitr,0,0,sdate,edate,RepSpec.flags[1],0,RepSpec.flags[3],RepSpec.Comparison,0,0,0,wrofqty,wrofsum,wrofdeprsum,purchval,startval,
//                                     dprv,dprbef,revdprv,revdprbef,revbef,fwdassetqty,assetqty,thestartval);

/*
procedure OneInventoryNrDepreciation(record AT2UnitVc ATUnitr,Integer mode,Integer ArtMode,Date sStartDate,Date sEndDate,
                                     Integer Model,Integer UseFiscalVal,Integer LastOfficialRev,Integer Comparison,Integer SkipDisposed,
                                     Integer InclRevDpr,Integer PrintPeriodVals,
                                     var val totwrofqty,var val totwrofsum,var val totwrofdprsum,var val purchval,var val startval,var val invdprv,var val invdprbef,
                                     var val invrevdprv,var val invrevdprbef,var val revbef,var val fwdassetqty,var val assetqty,
                                     var val thestartval)
*/

         OutVal(8,0,qty*revdprv,M4Val,true);
         totrevdprv = totrevdprv + qty*revdprv;
       end;
      EndFormat;
    end;
    td = AddMonth(td,1);
    td = AddDay(td,-GetDay(td)+1);
  end;
  Gray_Divider(5,8);
  StartFormat(15);
   OutVal(6,0,totdprv,M4Val,true);
   OutVal(8,0,totrevdprv,M4Val,true);
  EndFormat;
  RETURN;
END;  

global
procedure AT2DeprPlanRn(record RcVc RepSpec)
BEGIN    
  record AT2UnitVc ATUnitr;
  Boolean TrHs,found,testf,printf;
  string 30 frinv,toinv,tstr;  
  val dprbef,dprv,dprvb,t,dprprc1,svp;
  val totdprv,totdprbef;
  Date FStartDate,FEndDate,firstFStartDate;
  Date PrevFStartDate,PrevFEndDate,startdate;
  val qty,lastsvp;
  
  frinv = FirstInRange(RepSpec.f2,30);
  toinv = LastInRange(RepSpec.f2,30);
  StartReportJob(RepSpec.f6);
  PrintAT2Header(RepSpec);
  EndHeader;
  FindFiscalYear(RepSpec.sStartDate,FStartDate,FEndDate);
  FindFiscalYear(AddDay(FStartDate,-1),PrevFStartDate,PrevFEndDate);
  if (blankdate(FStartDate)) or (blankdate(PrevFStartDate)) then begin
    StartFormat(15);    
    OutString(0,0,USetStr(11485),false);
    EndFormat;
    goto L99;
  end;
  SetRepCol(2,70)
  SetRepCol(3,130)
  SetRepCol(4,140)
  SetRepCol(5,190)
  SetRepCol(6,240)
  SetRepCol(7,300)
  SetRepCol(8,370)
  SetRepCol(9,420)
  StartFormat(15);    
   OutString(0,0,USetStr(11471),false);
   OutString(7,0,USetStr(11472),false);
  EndFormat;
  StartFormat(15);    
   OutString(2,0,USetStr(11473),true);
   OutString(4,0,USetStr(11474),true);
   OutString(5,0,USetStr(11482),true);
   OutString(6,0,USetStr(11480),true);
   OutString(7,0,USetStr(11481),true);
   OutString(8,0,USetStr(11475),true);
   OutString(9,0,USetStr(11476),true);
   OutString(1,0,USetStr(11477),true);
  EndFormat;
  Gray_Divider(0,1);
  found = true;
  ATUnitr.InventoryNr = frinv;
  while (LoopMain(ATUnitr,1,found)) begin
    if (nonblank(RepSpec.f2)) then begin
      if (ATUnitr.InventoryNr>toinv) then begin found = false; end;
    end;
    testf = true;
    if (nonblank(RepSpec.f1)) then begin
      testf = ATUnitr.AT2Code==RepSpec.f1;
    end;
    if (nonblank(RepSpec.f3)) then begin
      testf = ATUnitr.AT2Class==RepSpec.f3;
    end;
    if (testf) then begin
      testf = !AT2ExcludeCategory(ATUnitr.AT2Code);
    end;
    if (nonblank(RepSpec.ObjStr)) then begin
      if (SetInSet(RepSpec.ObjStr,ATUnitr.Objects)==false) then begin testf = false; end;
    end;
    if (RepSpec.flags[4]!=0) then begin
      if (ATUnitr.Activef!=0) then begin testf = false; end;
    end;
    if (RepSpec.flags[5]!=0) then begin
      if (CheckifAT2UnitSold(ATUnitr.InventoryNr,RepSpec.sEndDate)) then begin
        testf = false;
      end;
    end;
    if (RepSpec.flags[1]==0) then begin
      startdate = ATUnitr.StartingDate1;
    end else begin
      startdate = ATUnitr.StartingDate2;
    end;
    if (startdate>RepSpec.sEndDate) then begin
      testf = false;
    end;
    if (found and testf) then begin
      qty = ATUnitr.Quantity;
      if (qty==0) then begin qty = 1; end;

      GetDepreciationPrcWithRows(startdate,RepSpec.sStartDate,ATUnitr.Model1,dprprc1);
      if (RepSpec.flags[1]==0) then begin
        if (ATUnitr.StartingDate1>FStartDate) then begin
          FStartDate = ATUnitr.StartingDate1;
        end;
      end else begin
        if (ATUnitr.StartingDate1>FStartDate) then begin
          FStartDate = ATUnitr.StartingDate2;
        end;
      end;
      dprbef = 0;
      dprv = 0;
      t = blankval;
      if (GetLastDprStartValInFiscalYear(firstFStartDate,PrevFEndDate,RepSpec.flags[1],ATUnitr.InventoryNr,qty*ATUnitr.PurchVal,svp,t)==false) then begin 
        switch (RepSpec.flags[1]) begin
          case 1:
            svp = ATUnitr.PurchVal2;
          otherwise
            svp = ATUnitr.PurchVal;
        end;
      end;
      OneAT2UnitDeprCalculation(RepSpec.Comparison,RepSpec.flags[3],RepSpec.flags[1],false,PrevFStartDate,PrevFEndDate,ATUnitr.InventoryNr,dprbef,t,t,t,tstr,svp,qty*ATUnitr.ResVal,false);
      t = blankval;
      OneAT2UnitDeprCalculation(RepSpec.Comparison,RepSpec.flags[3],RepSpec.flags[1],false,FStartDate,FEndDate,ATUnitr.InventoryNr,dprvb,dprv,t,t,tstr,blankval,qty*ATUnitr.ResVal,false);

      if (GetLastDprStartValInFiscalYear(RepSpec.sStartDate,RepSpec.sEndDate,RepSpec.flags[1],ATUnitr.InventoryNr,qty*ATUnitr.PurchVal,lastsvp,t)) then begin end;
      PrintInventoryNrData(RepSpec,ATUnitr,svp,dprprc1,dprv,dprvb,dprbef,lastsvp);      
      totdprv = totdprv + dprv;
      totdprbef = totdprbef + dprbef;
      PrintMothlyDepreciations(RepSpec,ATUnitr,FStartDate,RepSpec.sEndDate);
      Black_Divider(0,1);
      if (blankdate(firstFStartDate)) then begin
        firstFStartDate = FStartDate;
      end;
    end;
  end;  
  StartFormat(15);
   OutVal(8,0,totdprv,M4Val,true);
   OutVal(9,0,totdprv + totdprbef,M4Val,true);
  EndFormat;
L99:;
  EndJob;
  return;
end;


