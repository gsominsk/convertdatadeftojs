external function Boolean HasContactClassification();
external function Boolean HasCategories();
external procedure HTCustCat(string,var string);
external procedure HTCustClass(string,var string);
external function Boolean ContactInGroupClass(string,string,string,string,string,string);
external procedure HTNr(Integer,Integer,LongInt,LongInt,var string);
external function string 255 CreateInvoiceNumber(LongInt,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure HTCusts(string, string, var string);
external procedure HTOKF(Integer,Integer, var string);
external procedure HTArtSel(string,string, var string);
external procedure HTSaleMan(string, var string);
external procedure HTDetailLevel(Integer, var string);
external procedure FindSalesExVat(record TaxMatrixVc,string, val,Integer,Integer,var val);
external procedure HT2Per(Date,Date,var string);

procedure RepIVCashGP(record IVCashVc IVCashp, var val totquanp, var val totcsump,record RcVc RepSpec)
begin
  Integer i,rwcnt;
  row IVCashVc IVCashrw;
  string 255 tstr,t2;
  val gps;
  val rowinbase,ivsum;
  val diff,totdiff;
  Boolean skipitem;
  record INVc INr;
  val t,rowGP,quant,gp;
  record TaxMatrixVc TMr;
  
  totquanp = 0;
  totdiff = 0;
  StartFormat(15);
  OutLongInt(0,"DblIVCashVc",IVCashp.SerNr,false);
  OutDate(130,0,IVCashp.InvDate,false);
  EndFormat;
  rwcnt = MatRowCnt(IVCashp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashp,i,IVCashrw);
  
    if (IVCashrw.stp==kInvoiceRowTypeNormal) or (IVCashrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVCashrw.stp==kInvoiceRowTypeMultiBuyDiscount) then begin
      skipitem = false;
      if (IVCashrw.ovst!=0) then begin
        skipitem = true; 
      end;
      if (nonblank(RepSpec.FirstAcc)) then begin
        if (RepSpec.FirstAcc<>IVCashrw.ArtCode) then begin
          skipitem = true;
        end;  
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (SetInSet(RepSpec.f3,IVCashrw.Objects)==false) then begin
          skipitem = true;
        end;
      end; 
      if (nonblank(RepSpec.LastAcc)) then begin
        INr.Code=IVCashrw.ArtCode;
        if (ReadFirstMain(INr,1,true)) then begin
          if (nonblank(RepSpec.LastAcc)) then begin
            if (RepSpec.LastAcc<>INr.Group) then begin
              skipitem = true;
            end;
          end;
        end else begin
          skipitem = true;
        end;
      end;
    
      if (skipitem==false) then begin
        t = MULRATETOBASE1(IVCashp.CurncyCode,IVCashrw.Sum,IVCashp.FrRate,IVCashp.ToRateB1,IVCashp.ToRateB2,IVCashp.BaseRate1,IVCashp.BaseRate2,DefaultCurRoundOff);
        UnpackRowFieldMatrix(IVCashrw,"TaxMatrix",TMr);
        FindSalesExVat(TMr,IVCashrw.VATCode,t,IVCashp.InclVAT,IVCashp.NoTAXonVAT,rowinbase);
        ivsum = ivsum + rowinbase;
        gp = IVCashrw.rowGP;
        if (blank(gp)) then begin
          if (IVCashrw.stp==kInvoiceRowTypeMultiBuyDiscount) then begin
            t = MULRATETOBASE1(IVCashp.CurncyCode,IVCashrw.Sum,IVCashp.FrRate,IVCashp.ToRateB1,IVCashp.ToRateB2,IVCashp.BaseRate1,IVCashp.BaseRate2,DefaultCurRoundOff);
            FindSalesExVat(TMr,IVCashrw.VATCode,t,IVCashp.InclVAT,IVCashp.NoTAXonVAT,rowinbase);
            t = IVCashrw.Quant * IVCashrw.BasePrice;
            if (IVCashrw.PriceFactor!=0) then begin
              t = t/IVCashrw.PriceFactor;
            end;
            gp = rowinbase - t;
          end;
        end;
        rowGP = gp;

        gps = gps + rowGP;
        diff = rowinbase - rowGP;
      
        quant = IVCashrw.Quant;
        if (IVCashp.InvType==kPOSInvoiceTypeCredit) then begin
          gps = -gps;
          diff = -diff;
          quant = -quant;
          rowinbase = -rowinbase;
          rowGP = -rowGP;
        end;
    
        totdiff = totdiff + diff;
        totquanp = totquanp + quant;

        StartFormat(15);
        OutString(20,0,IVCashrw.ArtCode,false);
        OutVal(124,0,quant,M4UVal,true);
        OutString(130,0,IVCashrw.Spec,false);
        OutVal(350,0,rowinbase,M4Val,true);

        OutVal(420,0,diff,M4Val,true);
        OutVal(480,0,rowGP,M4Val,true);//IVrw
        EndFormat;

      end;
    end;
  end;

  Black_Divider(290,480);
  StartFormat(15);
  OutVal(124,0,totquanp,M4Qty,true);
  OutVal(350,0,ivsum,M4Val,true);
  OutVal(420,0,totdiff,M4Val,true);
  OutVal(480,0,gps,M4Val,true);
  EndFormat;
  ivsum = ivsum + gps;
  StartFormat(15);
  OutString(100,0,IVCashp.Objects,false);
  EndFormat;
  return;
end;

global
procedure PIVGP1Rn(record RcVc RepSpec,LongInt afr,LongInt ato,string frcu,string tocu,string frdra,string todra,var val TotSum,var val gpsum)
begin
  record IVCashVc IVCashr;
  Boolean TrHs;
  Integer i,rwcnt;
  val iv,gps,t,rowGP;
  Boolean testf,testf2;
  row IVCashVc IVCashrw;
  Boolean skipfr;
  record INVc INr;
  Boolean skipitem;
  Boolean wholeinv;
  LongInt LLoop1;
  val totquan, sumquan, totcsum, sumcsum,rowinbase;
  string 255 tstr;
  Integer rw;
  record TaxMatrixVc TMr;
  val gpperc;
  
  /*
  SetRepCol(3,288);
  SetRepCol(4,384);
  SetRepCol(5,336);
  */
  
  if (RepSpec.ArtMode==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(2352),false);
    OutString(60,0,USetStr(2353),false);
    OutString(140,0,USetStr(2354),false);
    OutString(340,0,USetStr(2642),true);
    OutString(410,0,USetStr(2644),true);
    OutString(480,0,USetStr(2643),true);
    EndFormat;
  end;
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
    OutString(0,0,USetStr(2352),false);
    OutString(130,0,USetStr(2353),false);
    OutString(350,0,USetStr(2642),true);
    OutString(420,0,USetStr(2572),true);
    OutString(480,0,USetStr(2643),true);
    EndFormat;
  end;
  
  IVCashr.InvDate = RepSpec.sStartDate;
  IVCashr.SerNr = 0;
  if (RepSpec.ArtMode==0) then begin
    Gray_Divider(0,1);
  end;  
  TrHs = true;
  while (LoopKey("InvDate",IVCashr,2,TrHs)) begin
    if (DateInRange(IVCashr.InvDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      testf2 = false;
      wholeinv = true;
      if (nonblank(RepSpec.TransStr)) then begin
        if (RepSpec.TransStr<>IVCashr.PayDeal) then begin
          testf = false; 
          if  (RepSpec.TransStr==IVCashr.PayDeal2) then begin
            testf = true;
          end;
        end;
      end;  
      if nonblank(RepSpec.f4) then begin
        if (IVCashr.Location<> RepSpec.f4) then begin
          testf = false;
        end;
      end;
      if nonblank(RepSpec.f7) then begin
        if (IVCashr.LocalMachineCode<> RepSpec.f7) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,IVCashr.Objects)==false) then begin
          testf = false;
        end;
      end;  
      if (nonblank(RepSpec.f5)) then begin
        if (IVCashr.DrawerCode<frdra) then begin testf = false; end;
        if (IVCashr.DrawerCode>todra) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.f2)) then begin
        if (RepSpec.f2<>IVCashr.CustCode) then begin testf = false; end;
      end;  
      if (testf) then begin
        testf = ContactInGroupClass(IVCashr.CustCode,RepSpec.f9,RepSpec.f8,"CUST","","");
      end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (RepSpec.AccStr<>IVCashr.SalesMan) then begin testf = false; end;
      end;  
  
      if (afr<>-1) then begin
        if (IVCashr.SerNr<afr) then begin
           testf = false;
        end;
      end;     
      if (ato<>-1) then begin
        if (IVCashr.SerNr>ato) then begin
           testf = false;
        end;
      end; 
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,IVCashr.Objects)==false) then begin
          testf = false;
        end;
      end;    
      if (testf) then begin
         gps = 0;
         iv = 0;
         rwcnt = MatRowCnt(IVCashr);
         for (i=0; i<rwcnt; i=i+1) begin
          MatRowGet(IVCashr,i,IVCashrw);
          if (IVCashrw.stp==kInvoiceRowTypeNormal) or (IVCashrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVCashrw.stp==kInvoiceRowTypeMultiBuyDiscount) then begin
              skipitem = false;
              if (IVCashrw.ovst!=0) then begin
                skipitem = true; 
              end;
              if (nonblank(RepSpec.FirstAcc)) then begin
                if (RepSpec.FirstAcc<>IVCashrw.ArtCode) then begin 
                  skipitem = true; 
                  wholeinv = false;
                end;
              end;
              if (nonblank(RepSpec.f3)) then begin
                if (SetInSet(RepSpec.f3,IVCashrw.Objects)==false) then begin
                  skipitem = true; 
                  wholeinv = false;
                end;
              end;
              if (nonblank(RepSpec.LastAcc) or nonblank(RepSpec.f6)) then begin
                INr.Code = IVCashrw.ArtCode;
                if (ReadFirstMain(INr,1,true)) then begin
                  if nonblank(RepSpec.LastAcc) then begin 
                    if (RepSpec.LastAcc<>INr.Group) then begin
                      skipitem = true;
                      wholeinv = false;
                    end;
                  end;
                  if (nonblank(RepSpec.f6)) then begin
                    if (SetInSet(RepSpec.f6,INr.DispGroups)==false) then begin
                      skipitem = true;
                      wholeinv = false;
                    end;
                  end;
                end else begin
                  skipitem = true;
                  wholeinv = false;
                end;
              end;
              if (skipitem==false) then begin
                rowGP = IVCashrw.rowGP;
                if (blank(rowGP)) then begin
                  if (IVCashrw.stp==kInvoiceRowTypeMultiBuyDiscount) then begin
                    t = MULRATETOBASE1(IVCashr.CurncyCode,IVCashrw.Sum,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
                    FindSalesExVat(TMr,IVCashrw.VATCode,t,IVCashr.InclVAT,IVCashr.NoTAXonVAT,rowinbase);
                    t = IVCashrw.Quant * IVCashrw.BasePrice;
                    if (IVCashrw.PriceFactor!=0) then begin
                      t = t/IVCashrw.PriceFactor;
                    end;
                    rowGP = rowinbase - t;
                  end;
                end;
                gps = gps + rowGP;
                testf2 = true;
                UnpackRowFieldMatrix(IVCashrw,"TaxMatrix",TMr);
                FindSalesExVat(TMr,IVCashrw.VATCode,IVCashrw.Sum,IVCashr.InclVAT,IVCashr.NoTAXonVAT,rowinbase);
                iv = iv + rowinbase;//extra
              end;  
          end;
        end;
        skipfr = false;
        if (nonblank(RepSpec.FirstAcc)) then begin
         if (IVCashrw.ArtCode<>RepSpec.FirstAcc) then begin
            skipfr = true; 
            wholeinv = false;
          end;
        end;
        if (nonblank(RepSpec.f3)) then begin
          if (SetInSet(RepSpec.f3,IVCashrw.Objects)==false) then begin
            skipfr = true; 
            wholeinv = false;
          end;
        end; 
        if (nonblank(RepSpec.LastAcc) or nonblank(RepSpec.f6)) then begin
          INr.Code = IVCashrw.ArtCode;
          if (ReadFirstMain(INr,1,true)) then begin
            if (RepSpec.LastAcc<>INr.Group) then begin
              skipfr = true;
              wholeinv = false;
            end;
            if (nonblank(RepSpec.f6)) then begin
              if (SetInSet(RepSpec.f6,INr.DispGroups)==false) then begin
                skipfr = true;
                wholeinv = false;
              end;
            end;  
          end else begin
            skipfr = true;
            wholeinv = false;
          end;
        end;
        if (skipfr==false) then begin
          testf2 = true;
        end;
        if (testf2==true) then begin
          if (wholeinv==true) then begin
            iv = MULRATETOBASE1(IVCashr.CurncyCode,IVCashr.Sum1,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
            if (IVCashr.InclVAT>0) then begin
              iv = MULRATETOBASE1(IVCashr.CurncyCode,IVCashr.Sum4,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
              t = MULRATETOBASE1(IVCashr.CurncyCode,IVCashr.Sum3,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
              iv = iv-t;
            end;
          end else begin
            iv = MULRATETOBASE1(IVCashr.CurncyCode,iv,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
          end;
          if (IVCashr.InvType==kPOSInvoiceTypeCredit) then begin
            iv = -iv;
            gps = -gps;
          end;
          TotSum = iv + TotSum;
          gpsum = gpsum + gps;
          totcsum = totcsum + (iv - gps);
          if (RepSpec.ArtMode==1) then begin
            Gray_Divider(0,1);
            RepIVCashGP(IVCashr,totquan,totcsum,RepSpec);
            sumquan = sumquan + totquan;
          end;
          if (RepSpec.ArtMode==0) then begin
            StartFormat(15);
            tstr =  CreateInvoiceNumber(IVCashr.SerNr,"");
            OutString(0,"DblIVCashVc",tstr,false);
            OutDate(60,0,IVCashr.InvDate,false);
            OutString(140,0,IVCashr.Addr0,false);
            OutVal(340,0,iv,M4Val,true);
            gpperc = (gps/iv)*100;
            OutVal(410,0,gpperc,M4Val,true);
            OutVal(1,0,gps,M4Val,true);
            EndFormat;
          end;
        end;
      end;//testf
    end;//while
  end;  
  
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(2365),false);
  OutVal(124,0,sumquan,M4Qty,true);
  if  (RepSpec.ArtMode==0) then begin
    OutVal(340,0,TotSum,M4Val,true);
    gpperc = (gpsum/TotSum)*100;
    OutVal(410,0,gpperc,M4Val,true);
    OutVal(480,0,gpsum,M4Val,true);
  end;
  if  (RepSpec.ArtMode==1) then begin
    OutVal(350,0,TotSum,M4Val,true);
    OutVal(420,0,totcsum,M4Val,true);
    OutVal(480,0,gpsum,M4Val,true);
  end;
  EndFormat;
  //TotSum = TotSum-gpsum;
  StartFormat(15);
  OutVal(430,0,sumcsum,M4Val,true);
  EndFormat;
  
  return;
end;  

global
procedure PIVGPRn(record RcVc RepSpec)
begin
  string 255 frdra,todra;
  LongInt afr,ato;
  string 255 frcu,tocu;
  integer rw;
  string 255 tstr;
  val posum,posgp;


  StartReportJob(USetStr(2641)); //"GP, Cash Invoices"

  afr = FirstInRange(RepSpec.f1,20);
  ato = LastInRange(RepSpec.f1,20);
  
  frcu = FirstInRange(RepSpec.f2,20);
  tocu = LastInRange(RepSpec.f2,20);

  frdra = FirstInRange(RepSpec.f5,5);
  todra = LastInRange(RepSpec.f5,5);

  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTDetailLevel(RepSpec.ArtMode,tstr);
  Header(rw,tstr,0)
  HTNr(1111,1112,afr,ato,tstr);
  Header(rw,tstr,1)
  rw = rw + 1;
  HTSaleMan(RepSpec.AccStr,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1)
    rw = rw + 1;
  end;  
  HTArtSel(RepSpec.FirstAcc,RepSpec.LastAcc,tstr);
  Header(rw,tstr,1)
  rw = rw + 1;
  HTCusts(frcu,tocu,tstr);
  Header(rw,tstr,1)
  if (HasCategories) then begin
    HTCustCat(RepSpec.f9,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasContactClassification) then begin
    HTCustClass(RepSpec.f8,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;  
  rw = rw + 1;
  HTOKF(RepSpec.flags[1],RepSpec.flags[2],tstr);
  Header(rw,tstr,1)
  rw = rw + 1;
  if nonblank(RepSpec. FirstAcc) then begin
    tstr = "Loc.Machine Code " & RepSpec.FirstAcc;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f5)) then begin
    Header(rw,USetStr(12542) & ": " & RepSpec.f5,1);
    rw = rw + 1;
  end;   
  EndHeader;

  afr = FirstInRange(RepSpec.f1,20);
  ato = LastInRange(RepSpec.f1,20);
  
  frcu = FirstInRange(RepSpec.f2,20);
  tocu = LastInRange(RepSpec.f2,20);

  frdra = FirstInRange(RepSpec.f5,5);
  todra = LastInRange(RepSpec.f5,5);

  PIVGP1Rn(RepSpec,afr,ato,frcu,tocu,frdra,todra,posum,posgp);

  EndJob;
  return;
end;
 