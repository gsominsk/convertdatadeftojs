external function boolean CheckItemGroupClassification(string,string,string);external procedure HTItemClass(string,var string);external procedure HTArtSel(string,string, var string);external procedure HT2Per(Date, Date , var string);procedure WSTranPrintHeader(record RcVc RepSpec,Date sd,Date ed,LongInt fromsvo,LongInt tosvo,string fromitem,string toitem,string frompers,string topers)begin  Integer rw;  string 255 tstr;  rw = 1;  if (fromsvo==-1) then begin    tstr = USetStr(33811);  end else begin    tstr = USetStr(33812);    tstr = tstr & fromsvo;    if (fromsvo<>tosvo) then begin      tstr = tstr & " : " & tosvo;    end;  end;  Header(rw,tstr,1);  rw = rw + 1;  HT2Per(sd,ed,tstr);  Header(rw,tstr,0);  if (nonblank(RepSpec.f2) or nonblank(RepSpec.f4)) then begin    HTArtSel(RepSpec.f2,RepSpec.f4,tstr);    Header(rw,tstr,1);    rw = rw + 1;  end;  if (nonblank(RepSpec.f8)) then begin     HTItemClass(RepSpec.f8,tstr);    Header(rw,tstr,1);      rw = rw + 1;    end;  if ((blank(frompers)) and (blank(topers))) then begin    tstr = USetStr(33815);  end else begin    tstr = USetStr(33816);    tstr = tstr & frompers;    if (frompers<>topers) then begin      tstr = tstr & " : " & topers;    end;  end;      Header(rw,tstr,1);  rw = rw + 1;  return;end;globalprocedure WSTranRn(record RcVc RepSpec)begin  LongInt fromsvo,tosvo;  String 20 fromitem,toitem;  String 5 frompers,topers;  record WSIVVc WSIVr;  Boolean found,testf;  string 30 mykey;  Integer keys;  string 100 tstr;    fromsvo = FirstInRange(RepSpec.f1,20);  tosvo = LastInRange(RepSpec.f1,20);  fromitem = FirstInRange(RepSpec.f2,20);  toitem = LastInRange(RepSpec.f2,20);  frompers = FirstInRange(RepSpec.f3,20);  topers = LastInRange(RepSpec.f3,20);  StartReportJob(USetStr(33810));  WSTranPrintHeader(RepSpec,RepSpec.sStartDate,RepSpec.sEndDate,fromsvo,tosvo, fromitem, toitem, frompers, topers);  EndHeader;  SetRepCol(2,45);  SetRepCol(3,90);  SetRepCol(4,140);  SetRepCol(5,260);  SetRepCol(6,310);  SetRepCol(7,360);  SetRepCol(8,400);  SetRepCol(9,480);  StartFormat(15);         OutString(0,0,USetStr(33817),false);  OutString(2,0,USetStr(33818),false);  OutString(3,0,USetStr(33819),false);  OutString(4,0,USetStr(33820),false);  OutString(5,0,USetStr(33821),false);  OutString(6,0,USetStr(33822),false);  OutString(7,0,USetStr(33823),false);  OutString(8,0,USetStr(33824),false);  OutString(9,0,USetStr(33825),true);  EndFormat;  Black_Divider(0,480);    if (fromsvo>-1) then begin    mykey = "SVONr";    WSIVr.SVONr = fromsvo;    keys = 1;  end;  if (nonblank(fromitem) and blank(mykey)) then begin    mykey = "ArtCode";    WSIVr.ArtCode = fromitem;    keys = 1;  end;  if (nonblank(frompers) and blank(mykey)) then begin    mykey = "EMCode";    WSIVr.EMCode = frompers;    keys = 1;  end;  if (blank(mykey)) then begin    mykey = "TransDate";    WSIVr.TransDate = RepSpec.sStartDate;    keys = 1;  end;  found = true;  while (LoopKey(mykey,WSIVr,keys,found)) begin    testf = true;    if (nonblank(RepSpec.f1) and mykey=="SVONr") then begin      if (WSIVr.SVONr>tosvo) then begin found = false; end;    end;    if (nonblank(RepSpec.f2) and mykey=="ArtCode") then begin      if (WSIVr.ArtCode>toitem) then begin found = false; end;    end;    if (nonblank(RepSpec.f3) and mykey=="EMCode") then begin      if (WSIVr.EMCode>topers) then begin found = false; end;    end;    if (found) then begin      testf = true;      if (nonblank(RepSpec.f1)) then begin        if (WSIVr.SVONr<fromsvo) then begin testf = false; end;        if (WSIVr.SVONr>tosvo) then begin testf = false; end;      end;      if (nonblank(RepSpec.f2)) then begin        if (WSIVr.ArtCode<fromitem) then begin testf = false; end;        if (WSIVr.ArtCode>toitem) then begin testf = false; end;      end;      if (CheckItemGroupClassification(WSIVr.ArtCode,RepSpec.f4,RepSpec.f8)==false) then begin         testf = false;      end;       if (nonblank(RepSpec.f3)) then begin        if (WSIVr.EMCode<frompers) then begin testf = false; end;        if (WSIVr.EMCode>topers) then begin testf = false; end;      end;      if (DateInRange(WSIVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;      switch (WSIVr.RecType) begin        case kWSIVRecTypeWorkSheet: if (RepSpec.flags[1]==0) then begin testf = false; end;        case kWSIVRecTypeActivity: if (RepSpec.flags[2]==0) then begin testf = false; end;        case kWSIVRecTypeReturnGoods: if (RepSpec.flags[3]==0) then begin testf = false; end;      end;      switch (WSIVr.Type) begin        case 1: if (RepSpec.flags[4]==0) then begin testf = false; end;        case 2: if (RepSpec.flags[5]==0) then begin testf = false; end;        case 3: if (RepSpec.flags[6]==0) then begin testf = false; end;        case 4: if (RepSpec.flags[7]==0) then begin testf = false; end;      end;      if (testf) then begin        StartFormat(15);        OutLongInt(0,"DblSVOVc",WSIVr.SVONr,false);        OutStringID(2,"DblWSIVVc",WSIVr.TransDate,false,WSIVr.CUCode & "," & WSIVr.RecType & "," & WSIVr.SerNr & "," & WSIVr.Row);        OutString(3,0,WSIVr.ArtCode,false);        OutString(4,0,WSIVr.Comment,false);        switch (WSIVr.Type) begin          case 1: tstr=USetStr(33829);          case 2: tstr=USetStr(33830);          case 3: tstr=USetStr(33831);          case 4: tstr=USetStr(33832);          otherwise tstr = WSIVr.Type;        end;        OutString(5,0,tstr,false);        switch (WSIVr.RecType) begin          case kWSIVRecTypeWorkSheet: tstr=USetStr(33826);          case kWSIVRecTypeActivity: tstr=USetStr(33827);          case kWSIVRecTypeReturnGoods: tstr=USetStr(33828);          otherwise tstr = WSIVr.RecType;        end;        OutString(6,0,tstr,false);        OutString(7,0,WSIVr.EMCode,false);        OutString(8,"DblCUVc",WSIVr.CUCode,false);        OutLongInt(9,"DblIVVc",WSIVr.InvNr,true);        EndFormat;      end;    end;  end;  EndJob;  return;end;