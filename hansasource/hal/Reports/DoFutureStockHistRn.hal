external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure FindStockValue(string,string,var record ItemStatusVc);

function Boolean SetStrid(record ItemHistVc IHr,var Integer strid,var string dblstr)
begin
  record ProdOrderVc PrOr;
  record ProdVc Prodr;
  record POVc POr;
  record ORVc ORr;
  Boolean testf;
  
  testf = true;
  switch (IHr.FileName) begin
    case "Fut2ProdOrderInVc":
      PrOr.SerNr = IHr.TransNr;
      if (ReadFirstMain(PrOr,1,true)) then begin end;
      if (PrOr.StatusFlag<3) then begin
        strid = 5057;
      end else begin
        strid = 5016;
      end;
      dblstr = "DblProdOrder";
    case "Fut2ProdOrderOutVc":
      PrOr.SerNr = IHr.TransNr;
      if (ReadFirstMain(PrOr,1,true)) then begin end;
      if (PrOr.StatusFlag<3) then begin
        strid = 5057;
      end else begin
        strid = 5016;
      end;
      dblstr = "DblProdOrder";
    case "Fut2ProdInVc":
      Prodr.SerNr = IHr.TransNr;
      if (ReadFirstMain(Prodr,1,true)) then begin end;
      if (Prodr.PRStatusFlag<3) then begin
        strid = 5037;
      end else begin
        strid = 5016;
      end;
      dblstr = "DblProd";
    case "Fut2ProdOutVc":
      Prodr.SerNr = IHr.TransNr;
      if (ReadFirstMain(Prodr,1,true)) then begin end;
      if (Prodr.PRStatusFlag<3) then begin
        strid = 5037;
      end else begin
        strid = 5016;
      end;
      dblstr = "DblProd";
    case "Fut1POVc":
      POr.SerNr = IHr.TransNr;
      if (ReadFirstMain(POr,1,true)) then begin end;
      if (POr.OKFlag==0) then begin
        strid = 5036;
      end else begin
        strid = 5038;
      end;
      dblstr = "DblPOVc";
      if (POr.Closed!=0) then begin
        testf = false;
      end;
    case "Fut3ORVc":
      ORr.SerNr = IHr.TransNr;
      if (ReadFirstMain(ORr,1,true)) then begin end;
      if (ORr.Closed!=0) then begin
        testf = false;
      end;
      strid = 5035;
      dblstr = "DblORVc";
    otherwise
      testf = false; // No actuals should be printed
  end;
  SetStrid = testf;
  return;
end;

procedure PrintItemInfo(string itemcode)
begin
  record INVc INr;
  
  if (ReadFirstItem(itemcode,INr,true,false)) then begin
    OutString(0,0,INr.Code,false);
    OutString(7,0,INr.Name,false);
  end;
  return;
end;

global
procedure DoFutureStockHistRn(record RcVc RepSpec)
begin
  record ItemHistVc IHr;
  record ItemStatusVc ISr;
  Boolean foundf,testf;
  Integer strid;
  string 50 dblstr;
  val bal,inv,outv;
  Date thedat;
  Boolean printf;

  bal = 0;
  inv = 0;
  outv = 0;
  StartReportJob(USetStr(5059));
  Header(1,RepSpec.d1,1)
  EndHeader;
  SetRepCol(2,80);
  SetRepCol(3,140);
  SetRepCol(4,250);
  SetRepCol(5,360);
  SetRepCol(6,420);
  if (RepSpec.flags[1]==0) then begin
    SetRepCol(7,100);
  end else begin
    SetRepCol(7,50);
  end;
  StartFormat(15);
  if (RepSpec.flags[1]==0) then begin
    OutString(0,0,USetStr(5006),false);
    OutString(2,0,USetStr(5008),false);
  end else begin
    OutString(0,0,USetStr(5022),false);
    OutString(7,0,USetStr(5023),false);
  end;
  OutString(3,0,USetStr(5007),false);
  OutString(4,0,USetStr(5010),false);
  OutString(5,0,USetStr(5027),true);
  OutString(6,0,USetStr(5028),true);
  OutString(1,0,bal,true);
  EndFormat;
  Gray_Divider(0,1);
  if (RepSpec.flags[1]==0) then begin
    StartFormat(15);
    PrintItemInfo(RepSpec.f1);
    EndFormat;
    Gray_Divider(0,1);
  end;
  FindStockValue(RepSpec.f1,RepSpec.f2,ISr);
  bal = ISr.Instock;
/* I'm assuming this is debug code...
StartFormat(15);
OutString(0,0,ISr.Instock,false);
OutString(100,0,ISr.OrddOut,false);
OutString(200,0,ISr.POQty,false);
OutString(300,0,ISr.InShipment,false);
OutString(400,0,ISr.ProdOrd,false);
EndFormat;
*/
  StartFormat(15);
  if (RepSpec.flags[1]==0) then begin
    OutString(0,0,USetStr(2492),false);
  end else begin
    PrintItemInfo(RepSpec.f1);
    OutString(3,0,USetStr(2492),false);
  end;
  OutString(4,0,RepSpec.f2,false);
  OutVal(1,0,bal,M4UVal,true);
  EndFormat;
  IHr.ArtCode = RepSpec.f1;
  IHr.TransDate = RepSpec.d1;
  thedat = RepSpec.d1;
  foundf = true;
  while (LoopKey("ArtCode",IHr,2,foundf)) begin
    if (IHr.ArtCode!=RepSpec.f1) then begin
      foundf = false;
    end;
    testf = foundf;
    if (RepSpec.flags[1]==0) then begin
      if (IHr.TransDate!=RepSpec.d1) then begin
        testf = false;
      end;
    end else begin
      if (IHr.TransDate<RepSpec.d1) then begin
        testf = false;
      end;
    end;
    if (nonblank(RepSpec.f2)) then begin
      if (IHr.Location!=RepSpec.f2) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      testf = SetStrid(IHr,strid,dblstr);
    end;
    if (IHr.Invalid!=0) then begin testf = false; end;
    if (testf) then begin
      if (RepSpec.flags[1]==0) then begin
        bal = bal + IHr.Qty;
        StartFormat(15);
        OutString(0,0,USetStr(strid),false);
        OutLongInt(2,dblstr,IHr.TransNr,false);
        OutDate(3,0,IHr.TransDate,false);
        OutString(4,0,IHr.Location,false);
        if (IHr.Qty>0) then begin
          OutVal(5,0,IHr.Qty,M4UVal,true);
        end else begin
          OutVal(6,0,-IHr.Qty,M4UVal,true);
        end;
        OutVal(1,0,bal,M4UVal,true);
        EndFormat;
      end else begin
        if (IHr.TransDate!=thedat) then begin
          if (printf) then begin
            StartFormat(15);
            OutStringID(3,"FutureStockHistDbl",thedat,false,RepSpec.f1 & ":" & RepSpec.f2);
            OutVal(5,0,inv,M4UVal,true);
            OutVal(6,0,outv,M4UVal,true);
            OutVal(1,0,bal,M4UVal,true);
            EndFormat;
          end;
          inv = 0;
          outv = 0;
          thedat = IHr.TransDate;
        end;
        if (IHr.Qty>0) then begin
          inv = inv + IHr.Qty;
        end else begin
          outv = outv + -IHr.Qty;
        end;
        bal = bal + IHr.Qty;
        printf = true;
      end;
    end;
  end;
  if (RepSpec.flags[1]==1) then begin
    if (printf) then begin
      StartFormat(15);
      OutStringID(3,"FutureStockHistDbl",thedat,false,RepSpec.f1 & ":" & RepSpec.f2);
      OutVal(5,0,inv,M4UVal,true);
      OutVal(6,0,outv,M4UVal,true);
      OutVal(1,0,bal,M4UVal,true);
      EndFormat;
      inv = 0;
      outv = 0;
      thedat = IHr.TransDate;
    end;
  end;
  EndJob;
  return;
end;


