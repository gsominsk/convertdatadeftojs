external function LongInt DateDiff(Date,Date);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure HTSuppGroup(string,var string);
external procedure HTLocations(string, string, var string);
external procedure HTItems(string,var string);
external procedure HTITs(string,string,var string);
external procedure HTVends(string, string, var string);
external procedure HT2Per(Date, Date , var string);

procedure VEEvalHeader(record RcVc RepSpec)
begin
  Integer rw;
  string 255 tstr;
  string 255 frit,toit;
  string 255 frve,tove;
  
  frve = FirstInRange(RepSpec.f1,20);
  tove = LastInRange(RepSpec.f1,20);
  frit = FirstInRange(RepSpec.LastAcc,20);
  toit = LastInRange(RepSpec.LastAcc,20);

  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;  
  HTVends(frve,tove,tstr);
  Header(rw,tstr,0);
  HTSuppGroup(RepSpec.FirstAcc,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTItems(RepSpec.f2,tstr);
  Header(rw,tstr,0);  
  HTITs(frit,toit,tstr);
  Header(rw,tstr,1);
  rw = rw + 1; 
  return;
end;

function val InvdPrice(record PUVc PUr,row PUVc PUrw,Integer purownr)
begin
  val res;
  record VIVc VIr;
  row VIVc VIrw;
  Boolean found;
  Integer i,rwcnt;

  found = true;
  while (LoopKey("RowPUNr:" & PUr.SerNr,VIr,1,found)) begin
    if (found) then begin
      rwcnt = MatRowCnt(VIr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(VIr,i,VIrw);
        if (VIrw.PUNr==PUr.SerNr) and (VIrw.PURow==purownr) then begin
          res = res + VIrw.Sum/VIrw.qty;
        end;
      end;
    end;
  end;
  InvdPrice = res;
  return;
end;

function val RcvedQty(record POVc POr,row POVc POrw,Integer porownr)
begin
  val res;
  record PUVc PUr;
  row PUVc PUrw;
  Boolean pufound,found;
  Integer i,rwcnt;

  PUr.PONr = POr.SerNr;
  found = true;
  while (LoopKey("PONr",PUr,1,found)) begin
    if (PUr.PONr!=POr.SerNr) then begin found = false; end;
    if (found) then begin
      rwcnt = MatRowCnt(PUr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(PUr,i,PUrw);
        if (PUrw.OrdRow==porownr) then begin
          pufound = true;
          res = res + PUrw.Quant;
        end;
      end;
    end;
  end;

  if (pufound) then begin
    ResetLoop(PUr);
    found = true;
    while (LoopKey("RowPONr:" & POr.SerNr,PUr,1,found)) begin
      if (found) then begin
        rwcnt = MatRowCnt(PUr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(PUr,i,PUrw);
          if (PUrw.OrdRow==porownr) then begin
            res = res + PUrw.Quant;
          end;
        end;
      end;
    end;
  end;
  RcvedQty = res;
  return;
end;

function Boolean PrintPURowData(record SysFormatBlock SFb,record POVc POr,row POVc POrw,Integer porownr,vector Boolean poqtydiff,
                                var LongInt totlatedays,var val totqtydiffprc,var val totprdiffprc,var val totqtydifflines)
begin
  Boolean res;
  record PUVc PUr;
  row PUVc PUrw;
  Boolean pufound,found;
  Integer i,rwcnt,latedays;
  Date plandel;
  val diff,rcvdqty;
  string 255 tstr;
  
  plandel = POrw.PlanShipRow;
  if (blankdate(plandel)) then begin
    plandel = POr.PlanShipDate;
  end;
  PUr.PONr = POr.SerNr;
  found = true;
  while (LoopKey("PONr",PUr,1,found)) begin
    if (PUr.PONr!=POr.SerNr) then begin found = false; end;
    if (found) then begin
      rwcnt = MatRowCnt(PUr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(PUr,i,PUrw);
        if (PUrw.OrdRow==porownr) then begin
          StartFormat(15);
           OutString(40,0,PUrw.ArtCode,false);
           OutString(100,0,Left(PUrw.Spec,20),false);
           latedays = DateDiff(PUr.TransDate,plandel);
           if (latedays<0) then begin latedays = 0; end;
           OutLongInt(2,0,latedays,true);
           if (poqtydiff[porownr]==false) then begin
             rcvdqty = RcvedQty(POr,POrw,porownr);
             diff = POrw.Quant-rcvdqty;
             OutVal(3,0,diff,M4Val,true);
             tstr = ValToString((diff/POrw.Quant)*100,M4UVal,SFb.thousSep,SFb.decimalPt,0);
             OutString(4,0,tstr & "%" ,true);
             poqtydiff[porownr] = true;
             totqtydiffprc = totqtydiffprc + (diff/POrw.Quant)*100;
             totqtydifflines = totqtydifflines + 1;
           end;
           diff = InvdPrice(PUr,PUrw,i);
           if (diff!=0) then begin
             diff = POrw.Price-diff;
             OutVal(5,0,diff,M4Val,true);
             tstr = ValToString((diff/PUrw.Quant)*100,M4UVal,SFb.thousSep,SFb.decimalPt,0);
             OutString(1,0,tstr & "%" ,true);
             totprdiffprc = totprdiffprc + (diff/PUrw.Quant)*100;
           end;
          EndFormat;
          res = true;
          pufound = true;
          totlatedays = totlatedays + latedays;
        end;
      end;
    end;
  end;

  if (pufound) then begin
    ResetLoop(PUr);
    found = true;
    while (LoopKey("RowPONr:" & POr.SerNr,PUr,1,found)) begin
      if (found) then begin
        rwcnt = MatRowCnt(PUr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(PUr,i,PUrw);
          if (PUrw.OrdRow==porownr) then begin
            StartFormat(15);
             OutString(15,0,PUrw.ArtCode,false);
             latedays = DateDiff(PUr.TransDate,plandel);
             if (latedays<0) then begin latedays = 0; end;
             OutLongInt(2,0,latedays,true);
             totlatedays = totlatedays + latedays;

             if (poqtydiff[porownr]==false) then begin
               rcvdqty = RcvedQty(POr,POrw,porownr);
               diff = POrw.Quant-rcvdqty;
               OutVal(3,0,diff,M4Val,true);
               OutVal(4,0,(diff/POrw.Quant)*100,M4Val,true);
               poqtydiff[porownr] = true;
               totqtydiffprc = totqtydiffprc + (diff/POrw.Quant)*100;
               totqtydifflines = totqtydifflines + 1;
             end;

             diff = InvdPrice(PUr,PUrw,i);
  
             if (diff!=0) then begin
               diff = POrw.Price-diff;
               OutVal(5,0,diff,M4Val,true);
               tstr = ValToString((diff/PUrw.Quant)*100,M4UVal,SFb.thousSep,SFb.decimalPt,0);
               OutString(1,0,tstr & "%" ,true);
               totprdiffprc = totprdiffprc + (diff/PUrw.Quant)*100;
             end;
            EndFormat;
            res = true;
          end;
        end;
      end;
    end;
  end;
  PrintPURowData = res;
  return;
end;
      
function Boolean PrintVEPOs(record RcVc RepSpec,record SysFormatBlock SFb,record CUVc VEr,var Boolean suppheadf,var LongInt totlatedays,var val totqtydiffprc,var val totprdiffprc,var val totqtydifflines)
begin
  Boolean res;
  Boolean found,testf;
  record POVc POr;
  row POVc POrw;
  record INVc INr;
  Integer i,rwcnt;
  string 255 frit,toit;
  string 255 frin,toin;
  Boolean poheadf;
  vector Boolean poqtydiff;
  Date plandel;
  LongInt latedays;
  LongInt velatedays;
  val veqtydiffprc,veqtydifflines,veprdiffprc;
  string 255 tstr;
  
  velatedays = 0;
  poheadf = true;
  frit = FirstInRange(RepSpec.LastAcc,20);
  toit = LastInRange(RepSpec.LastAcc,20);
  frin = FirstInRange(RepSpec.f2,20);
  toin = LastInRange(RepSpec.f2,20);
  found = true;
  POr.VECode = VEr.Code;
  POr.TransDate = RepSpec.sStartDate;
  while (LoopKey("VECodeTransDate",POr,2,found)) begin
    if (POr.VECode!=VEr.Code) then begin found = false; end;
    if (POr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (testf) then begin
        if (poheadf==false) then begin
          Gray_Divider(30,1);
        end;
        poheadf = true;
        rwcnt = MatRowCnt(POr);
        for (i=0;i<rwcnt;i=i+1) begin
          poqtydiff[i] = false;
        end;
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(POr,i,POrw);
          testf = true;
          if (ReadFirstItem(POrw.ArtCode,INr,true,false)==false) then begin testf = false; end;
          if (nonblank(RepSpec.f2)) then begin
            if (INr.Code<frin) then begin testf = false; end;
            if (INr.Code>toin) then begin testf = false; end;
          end;
          if (nonblank(RepSpec.LastAcc)) then begin
            if (INr.Group<frit) then begin testf = false; end;
            if (INr.Group>toit) then begin testf = false; end;
          end;
          if (testf) then begin
            if (suppheadf==true) then begin
              StartFormat(15);
               OutString(0,"DblCUVc",VEr.Code,false);
               OutString(100,0,VEr.Name,false);
              EndFormat;
              suppheadf = false;
            end;
            if (poheadf) then begin
              StartFormat(15);
               OutString(30,"DblPOVc",POr.SerNr,false);
              EndFormat;
              poheadf = false;
              res = true;
            end;
            if (PrintPURowData(SFb,POr,POrw,i,poqtydiff,velatedays,veqtydiffprc,veprdiffprc,veqtydifflines)==false) then begin
              plandel = POrw.PlanShipRow;
              if (blankdate(plandel)) then begin
                plandel = POr.PlanShipDate;
              end;
              StartFormat(15);
               OutString(40,0,POrw.ArtCode,false);
               OutString(100,0,Left(POrw.Spec,20),false);
               latedays = DateDiff(CurrentDate,plandel);
               if (latedays<0) then begin latedays = 0; end;
               OutLongInt(2,0,latedays,true);
               OutVal(3,0,POrw.Quant,M4Val,true);
               OutString(4,0,"100%",true);
               OutVal(5,0,POrw.Price,M4Val,true);
               OutString(1,0,"100%",true);
              EndFormat;
              veqtydiffprc = veqtydiffprc + 100;
              veqtydifflines = veqtydifflines + 1;
              velatedays = velatedays + latedays;
              veprdiffprc = veprdiffprc + 100;
            end;
          end;
        end;
      end;
    end;
  end;
  if (veqtydifflines!=0) then begin
    Gray_Divider(30,1);
    StartFormat(15);
     OutString(110,0,USetStr(18197) & " " & VEr.Code,false);
     OutVal(2,0,velatedays/veqtydifflines,M4UVal,true);
     tstr = ValToString(veqtydiffprc/veqtydifflines,M4UVal,SFb.thousSep,SFb.decimalPt,0);
     OutString(4,0,tstr & "%" ,true);
     tstr = ValToString(veprdiffprc/veqtydifflines,M4UVal,SFb.thousSep,SFb.decimalPt,0);
     OutString(1,0,tstr & "%" ,true);
    EndFormat;
  end;
  totlatedays = totlatedays + velatedays;
  totqtydiffprc = totqtydiffprc + veqtydiffprc;
  totqtydifflines = totqtydifflines + veqtydifflines;
  totprdiffprc = totprdiffprc + veprdiffprc;
  PrintVEPOs = res;
  return;
end;

global
procedure VEEvalRn(record RcVc RepSpec)
begin
  record CUVc VEr;
  Boolean found,testf,suppheadf;
  Integer sort,keys;
  string 255 frve,tove,tstr;
  string 40 index;
  val totqtydiffprc,totqtydifflines,totprdiffprc;
  record OrdSettBlock OSb;
  record SysFormatBlock SFb;
  LongInt totlatedays;

  BlockLoad(OSb);
  BlockLoad(SFb);

  frve = FirstInRange(RepSpec.f1,20);
  tove = LastInRange(RepSpec.f1,20);
  
  StartReportJob(USetStr(18190));
   VEEvalHeader(RepSpec);
  EndHeader;
  SetRepCol(2,220);
  SetRepCol(3,290);
  SetRepCol(4,350);
  SetRepCol(5,410);
  StartFormat(15);
   OutString(0,0,USetStr(18191),false);
   OutString(2,0,USetStr(18192),true);
   OutString(3,0,USetStr(18193),true);
   OutString(4,0,USetStr(18194),true);
   OutString(5,0,USetStr(18195),true);
   OutString(1,0,USetStr(18196),true);
  EndFormat;
  Gray_Divider(0,1);
  index = "VEActCode";
  sort = 0;
  keys = 2;
  totlatedays = 0;
  VEr.Code = frve;
  if (blank(RepSpec.f1)) then begin
    if (nonblank(RepSpec.FirstAcc)) then begin
      index = "VEActGroup";
      sort = 1;
      keys = 1;
      VEr.VECat = RepSpec.FirstAcc;
    end;
  end;
  found = true;
  while (LoopKey(index,VEr,keys,found)) begin
    switch (sort) begin
      case 0:
        if (nonblank(RepSpec.f1)) then begin
          if (VEr.Code>tove) then begin found = false; end;
          if (VEr.VEType==0) then begin found = false; end;
        end;
      case 1:
        if (VEr.VECat!=RepSpec.FirstAcc) then begin
          found = false;
        end;
    end;
    if (found) then begin
      testf = true;
      if (VEr.VEType==0) then begin testf = false; end;
      if (nonblank(RepSpec.TransStr)) then begin
        if (SetInSet(RepSpec.TransStr,VEr.Classification)==false) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        suppheadf = true;
        if (PrintVEPOs(RepSpec,SFb,VEr,suppheadf,totlatedays,totqtydiffprc,totprdiffprc,totqtydifflines)) then begin
          Gray_Divider(0,1);
        end;
      end;
    end;
  end;
  StartFormat(15);
   OutString(110,0,USetStr(18197),false);
   OutVal(2,0,totlatedays/totqtydifflines,M4UVal,true);
   tstr = ValToString(totqtydiffprc/totqtydifflines,M4UVal,SFb.thousSep,SFb.decimalPt,0);
   OutString(4,0,tstr & "%" ,true);
   tstr = ValToString(totprdiffprc/totqtydifflines,M4UVal,SFb.thousSep,SFb.decimalPt,0);
   OutString(1,0,tstr & "%" ,true);
  EndFormat;

  EndJob;
  
  return;
end;
