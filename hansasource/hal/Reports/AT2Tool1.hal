global
procedure GetPUDepreciationVals(record RcVc RepSpec,val PurchVal,val InitDeprVal1,val InitDeprVal2,string Model1,
                                string Model2,Date StartingDate,var string dmcode,var val purval,var val dprbef,
                                var val StartValue,var Date sd,var Date pd,var Date ed)
BEGIN
  purval = PurchVal;
  if (RepSpec.flags[1]==0) then begin
    dprbef = InitDeprVal1;
  end else begin
    dprbef = InitDeprVal2;
  end;
  if (RepSpec.flags[1]==0) then begin
    StartValue = PurchVal;
  end else begin
    StartValue = PurchVal;
  end;
  if (RepSpec.flags[1]==0) then begin
    dmcode = Model1;
  end else begin
    dmcode = Model2;
  end;
  sd = RepSpec.sStartDate;  
  if (nonblankdate(StartingDate)) then begin sd = StartingDate; end;
  ed = RepSpec.sEndDate;
  pd = RepSpec.sStartDate;
  if (sd>pd) then begin pd = sd; end;
  RETURN;
END;

global 
function Boolean GetAT2PURow(string at2code,string inventorynr,var LongInt punr,var Integer atpurwnr)
BEGIN
  Boolean res;
/*
  record AT2PUVc ATPUr;
  record InvrsVc Invrsr;
  Integer rwcnt;
  
  res = false;
  Invrsr.AT2Code = at2code;
  Invrsr.InventoryNr = inventorynr;
  Invrsr.FileName = "AT2PUVc";
  if (ReadFirstMain(Invrsr,3,true)) then begin
    ATPUr.SerNr = Invrsr.TransNr;
    if (ReadFirstMain(ATPUr,1,true)) then begin
      rwcnt = MatRowCnt(ATPUr);
      if (Invrsr.Row<rwcnt) then begin
        punr = ATPUr.SerNr;
        atpurwnr = Invrsr.Row;
        res = true;
      end;  
    end;
  end;
*/  
  GetAT2PURow = res;
  RETURN;
END;

global
procedure GetDepName(string depcode,var string res)
BEGIN
  record DepVc depr;
  
  res = "";
  depr.Code = depcode;
  if (ReadFirstMain(depr,1,true)) then begin
    res = depr.Description;
  end;  
  RETURN;
END;

global
procedure PrintACMatrix(record SMVc SMr,string depcode)
BEGIN
  row SMVc SMrw;
  Integer i,rwcnt;
  Boolean printdepf;
  string 255 tstr;

  printdepf = true;
  rwcnt = MatRowCnt(SMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    if (SMrw.DebVal!=0) then begin
      if (printdepf) then begin
        StartFormat(15);
        OutString(0,0,depcode,false);
        GetDepName(depcode,tstr);
        OutString(70,0,tstr,false);
        EndFormat; 
        Gray_Divider(0,100);
        printdepf = false;
      end;    
      StartFormat(15);
       OutString(70,0,SMrw.Objects,false);
       OutString(150,0,SMrw.Comment,false);
       OutVal(480,0,SMrw.DebVal,M4UVal,true);
      EndFormat;          
    end;
  end;
  if (printdepf==false) then begin Gray_Divider(0,100);  end;
  RETURN;
END;

global
procedure BuildACMatrix(var record SMVc SMr)
BEGIN
  record AC2Block AC2Rec;
  row AC2Block acrw;
  row SMVc SMrw;
  Integer i,rwcnt,rw;
  val blankv;
 
  rw = 0;
  RecordNew(SMr);
  BlockLoad(AC2Rec);
  rwcnt = MatRowCnt(AC2Rec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(AC2Rec,i,acrw);
    ClearRow(SMr,SMrw,rw);
    SMrw.Objects = acrw.Code;
    SMrw.Comment = acrw.Comment;
    SMrw.DebVal = blankv;
    MatRowPut(SMr,rw,SMrw);    
    rw = rw + 1;
  end;
  RETURN;
END;

global
procedure AddToACMatrix(record SMVc SMr,var val dprv,string clas)
BEGIN
  row SMVc SMrw;
  Integer i,rwcnt;

  rwcnt = MatRowCnt(SMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    if (SMrw.Objects==clas) then begin
      SMrw.DebVal = SMrw.DebVal + dprv;
      MatRowPut(SMr,i,SMrw);          
      goto LAddToACMatrix;
    end;
  end;
LAddToACMatrix:;  
  RETURN;
END;

global
function Boolean CheckifAT2UnitSold(string InventoryNr,Date tdp)
BEGIN
  Boolean res;
  record InvrsVc Invrsr;
  record AT2WrofVc AT2Wrofr;
  row AT2WrofVc AT2Wrofrw;
  record AT2UnitVc AT2Unitr;
  Boolean testf,TrHs;
  val wq;
    
  testf = true;  
  AT2Unitr.InventoryNr = InventoryNr;
  if (ReadFirstMain(AT2Unitr,1,true)) then begin
    TrHs = true;
    Invrsr.InventoryNr = InventoryNr;
    Invrsr.FileName = "AT2WrofVc";
    while (LoopKey("FileName",Invrsr,2,TrHs)) begin
      if (Invrsr.InventoryNr!=InventoryNr) then begin TrHs = false; end;
      if (Invrsr.FileName!="AT2WrofVc") then begin TrHs = false; end;
      if (TrHs) then begin  
        AT2Wrofr.SerNr = Invrsr.TransNr;
        if (ReadFirstMain(AT2Wrofr,1,true)) then begin
          if (nonblankdate(tdp)) then begin
            if (AT2Wrofr.TransDate>tdp) then begin testf = false; end;
          end; 
          if (AT2Wrofr.TransDate<tdp) then begin 
            if (Invrsr.Row<MatRowCnt(AT2Wrofr)) then begin
              MatRowGet(AT2Wrofr,Invrsr.Row,AT2Wrofrw);
              wq = wq + AT2Wrofrw.Qty;
            end;
          end;
        end;  
      end;
    end;
    if (wq>=AT2Unitr.Quantity) then begin res = true; end;
  end;
  CheckifAT2UnitSold = res;
  RETURN;
END;

/*
global
function Boolean CheckifAT2UnitSold(string InventoryNr)
begin
  Boolean res;
  record InvrsVc Invrsr;
  record AT2WrofVc AT2Wrofr;
  row AT2WrofVc AT2Wrofrw;
  record AT2UnitVc AT2Unitr;
  Boolean testf,TrHs;
  val wq;
    
  testf = true;  
  AT2Unitr.InventoryNr = InventoryNr;
  if (ReadFirstMain(AT2Unitr,1,true)) then begin
    TrHs = true;
    Invrsr.InventoryNr = InventoryNr;
    Invrsr.FileName = "AT2WrofVc";
    while (LoopKey("FileName",Invrsr,2,TrHs)) begin
      if (Invrsr.InventoryNr!=InventoryNr) then begin TrHs = false; end;
      if (Invrsr.FileName!="AT2WrofVc") then begin TrHs = false; end;
      if (TrHs) then begin  
        AT2Wrofr.SerNr = Invrsr.TransNr;
        if (ReadFirstMain(AT2Wrofr,1,true)) then begin
          if (Invrsr.Row<MatRowCnt(AT2Wrofr)) then begin
            MatRowGet(AT2Wrofr,Invrsr.Row,AT2Wrofrw);
            wq = wq + AT2Wrofrw.Qty;
          end;
        end;  
      end;
    end;
    if (wq>=AT2Unitr.Quantity) then begin res = true; end;
  end;
  CheckifAT2UnitSold = res;
  return;
end;

*/