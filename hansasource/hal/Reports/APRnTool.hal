external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function Boolean GetAPPayRate(LongInt,var val,var val,var val,var val,var val,string,Date);
external procedure YcToStr(Integer,var string);
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external procedure AddToCreditorsAccounts(string,Integer,val,Array string,Array val,var Integer);
external function string 255 GetSupplierOnAccountAC(string);
external function Boolean ObjectTypeMatch(string,string);
external function Integer GetIntYc(Date);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulWithRateToBase2(var string,Date,val,roundmode);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external procedure Base1ToBase2(var val,Date,var val);
external function Integer TypeOfCurncy(var string,var Integer);

global
procedure SubAPPrePayments(record VIVc VIp,var val rvalp,var val rvalbase)
BEGIN
  row VIVc VIrw;
  Integer rwcnt,i;
  record APPayHistVc APPHr;
  
  rwcnt = MatRowCnt(VIp);
  if (VIp.InvType!=kInvoiceTypeEmployee and VIp.InvType!=kInvoiceTypeCash and VIp.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(VIp,i,VIrw);
      if (VIrw.stp==6) then begin
        rvalp = rvalp - VIrw.PrepayAmount;
        rvalbase = rvalbase - MulRateToBase1(VIp.CurncyCode,VIrw.PrepayAmount,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,DefaultCurRoundOff);
//VIrw.Sum holds amount without rate gain
/*
        if (VIrw.Sum!=0) then begin
          rvalbase = rvalbase - VIrw.Sum;
        end else begin
          APPHr.VEPNr = VIrw.PrepayNr;
          APPHr.FileName = "VIVc";
          APPHr.SerNr = VIp.SerNr;
          if (ReadFirstKey("MainKey",APPHr,3,true)) then begin
            rvalbase = rvalbase - APPHr.BookVal;
          end else begin
            rvalbase = rvalbase - MulWithRateToBase1(VIp.CurncyCode,VIp.TransDate,VIrw.PrepayAmount,DefaultCurRoundOff);
          end;
        end;
*/
      end;
    end;
  end;
  return;
end;

global
procedure APGetOnAccBalance(record RcVc RepSpec,record CUVc VEp,Boolean backdate,
                            var val sump,var val sum2p,var val rvalp,var val sumbooked,
                            var val sumnow,var val sumcurncy,var val sumdiff,
                            Array string credaccs,Array val credbal,var Integer credcnt,
                            Array string acur,Array val av1,var Integer curcnt)
begin
  val t,pinvval,t2;
  record OPrsVc OPrsr;
  record APPayHistVc APPayHistr;  
  Boolean found,testf;
  record VIVc VIr;
  record OPVc OPr;
  row OPVc OPrw;
  record CLOutVc CLOutr;
  row CLOutVc CLOutrw;
  record CLInVc CLInr;
  row CLInVc CLInrw;
  Integer rwcnt,i;
  record OPPVc opp;  
  record PurgeTRVc PurgeTRr;
  record TRVc TRr;
  row TRVc TRrw;
  record BaseCurBlock BCb;
  string 20 apacc;
  vector Boolean voprowprntdf;
  val frrate,torate1,torate2,baserate1,baserate2;
  val lossv;
  Boolean vif,opf;

  BlockLoad(BCb);
  sump = 0;
  sum2p = 0;
  rvalp = 0;
  sumbooked = 0;
  sumcurncy = 0;
  sumnow = 0;
  sumdiff = 0;
  OPrsr.VINr = -1;
  OPrsr.TransType = kOPrsTransTypePayment;
  OPrsr.VECode = VEp.Code;
  found = true;
  while (LoopKey("OnAcc",OPrsr,3,found)) begin
    if (found) then begin
      if (OPrsr.VECode<>VEp.Code) then begin found = false; end;
      if (OPrsr.VINr<>-1) then begin found = false; end;
      if (OPrsr.TransType<>kOPrsTransTypePayment) then begin found = false; end;
      if (found) then begin        
        OPr.SerNr = OPrsr.TransNr;
        if (ReadFirstMain(OPr,1,true)) then begin
          if (OPr.RejectedFlag==1) then begin goto L11; end;
          if (OPr.TransDate!=OPrsr.TransDate) then begin goto L11; end;
          if (OPr.OrderedFlag==0) then begin goto L11; end;
          if (OPr.Invalid!=0) then begin goto L11; end;
          if (RepSpec.flags[14]!=0) then begin
            if (OPr.DoneFlag==0) then begin goto L11; end;
          end;
          rwcnt = MatRowCnt(OPr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(OPr,i,OPrw);
            if (OPrw.stp<>1) then begin goto L10; end;
            if (OPrw.ovst==1) then begin goto L10; end;
            if ((OPrw.VISerNr==-1) and (OPrw.PrepayNr==-1)) then begin
              if (OPrw.VECode==VEp.Code) and (voprowprntdf[OPr.SerNr & ":" & i]==false) then begin
                voprowprntdf[OPr.SerNr & ":" & i] = true;
                testf = true;
                if (testf) then begin
                  if (backdate) then begin
                    if (RepSpec.d1<OPr.TransDate) then begin
                      testf = false;
                    end;
                  end;
                  if (nonblank(RepSpec.ObjStr)) then begin
                    if (SetInSet(RepSpec.ObjStr,OPrw.Objects)==false) then begin
                      testf = false;
                    end;
                  end;
                end;
                if (testf) then begin
                  if (nonblank(RepSpec.ObjType)) then begin
                    testf = ObjectTypeMatch(OPrw.Objects,RepSpec.ObjType);
                  end;             
                end;                           
                if (nonblank(RepSpec.CurncyCode)) then begin
                  if (RepSpec.CurncyCode!=OPrw.PInvCurncy) then begin
                    testf = false;
                  end;
                end;                                        
                apacc = OPrw.APAcc;
                if (blank(apacc)) then begin
                  apacc = GetSupplierOnAccountAC(OPrw.VECode);
                end;
                if (nonblank(RepSpec.FirstAcc)) then begin
                  if (RepSpec.FirstAcc!=apacc) then begin
                    testf = false;
                  end;
                end;                
                if (testf) then begin
                  pinvval = OPrw.PInvVal;
                  if (nonblank(VEp.VECurncyCode)) then begin
                    rvalp = rvalp - pinvval;
                  end else begin
                    if (OPrw.PrepayNr==-1) and (OPrw.VISerNr==-1) then begin//same as when creating NL Trnasaction
                      if (OPrw.B1BankVal==0) then begin
                        rvalp = rvalp - MulWithRateToBase1(OPrw.PInvCurncy,OPr.TransDate,pinvval,DefaultCurRoundOff);
                      end else begin
                        rvalp = rvalp - OPrw.B1BankVal;
                      end;
                    end else begin
                      if (OPrw.B1BankVal==0) then begin
                        if (((BCb.BaseCur1==OPrw.BankCurncy) or (blank(OPrw.BankCurncy)))) then begin
                          rvalp = rvalp - OPrw.BankVal;
                        end else begin
                          rvalp = rvalp - MulWithRateToBase1(OPrw.PInvCurncy,OPr.TransDate,pinvval,DefaultCurRoundOff);
                        end;
                      end else begin
                        rvalp = rvalp - OPrw.B1BankVal;
                      end;
                    end;
                  end;
                  if (OPrw.B1BankVal==0) then begin
                    if (OPrw.VISerNr==-1) then begin
                      if (OPrw.PrepayNr==-1) then begin//same as when creating NL Trnasaction
                        t = MulWithRateToBase1(OPrw.PInvCurncy,OPr.TransDate,pinvval,DefaultCurRoundOff);
                      end else begin
                        if (((BCb.BaseCur1==OPrw.BankCurncy) or (blank(OPrw.BankCurncy)))) then begin
                          t = OPrw.BankVal;
                        end else begin
                          t = MulWithRateToBase1(OPrw.PInvCurncy,OPr.TransDate,pinvval,DefaultCurRoundOff);
                        end;
                      end;
                    end else begin
                      t = MulWithRateToBase1(OPrw.PInvCurncy,OPr.TransDate,pinvval,DefaultCurRoundOff);
                    end;
                  end else begin
                    t = OPrw.B1BankVal;
                  end;
                  sump = sump - t;
                  if ((RepSpec.flags[18]!=0) and (RepSpec.ArtMode!=4) and (RepSpec.ArtMode!=6)) then begin
                    AddToCreditorsAccounts(apacc,0,-t,credaccs,credbal,credcnt);
                  end;        
                  if (OPrw.B2BankVal==0) then begin
                    t = MulWithRateToBase2(OPrw.PInvCurncy,OPr.TransDate,pinvval,DefaultCurRoundOff);                              
                  end else begin
                    t = OPrw.B2BankVal;
                  end;
                  sum2p = sum2p - t;                      
                  if (RepSpec.ArtMode==4) or (RepSpec.ArtMode==6) begin
                    sumcurncy = sumcurncy + pinvval;
                    if (backdate) then begin
                      if (OPrw.PInvCurncy<>OPrw.BankCurncy) then begin
                        t = MulWithRateToBase1(OPrw.BankCurncy,OPr.TransDate,OPrw.BankVal,DefaultCurRoundOff);
                      end else begin
                        t = MulWithRateToBase1(OPrw.PInvCurncy,OPr.TransDate,pinvval,DefaultCurRoundOff);
                      end;                      
                      t2 = MulWithRateToBase1(OPrw.PInvCurncy,RepSpec.d1,pinvval,DefaultCurRoundOff);
                    end else begin
                      if (OPrw.PInvCurncy<>OPrw.BankCurncy) then begin
                        t = MulWithRateToBase1(OPrw.BankCurncy,OPr.TransDate,OPrw.BankVal,DefaultCurRoundOff);
                      end else begin
                        t = MulWithRateToBase1(OPrw.PInvCurncy,OPr.TransDate,pinvval,DefaultCurRoundOff);
                      end;                      
                      t2 = MulWithRateToBase1(OPrw.PInvCurncy,CurrentDate,pinvval,DefaultCurRoundOff);
                    end;
                    sumbooked = sumbooked + t;
                    sumnow = sumnow + t2;
                    t2 = t2 - t;
                    sumdiff = sumdiff + t2;
                  end;
                  AddCurncyTotals(acur,av1,curcnt,OPrw.PInvCurncy,-OPrw.PInvVal);
                end;
              end;
            end;
L10:;                
          end;
        end;
      end;
    end;
L11:;        
  end;

  OPrsr.VINr = -1;
  OPrsr.TransType = kOPrsTransTypeNLTransaction;
  OPrsr.VECode = VEp.Code;
  found = true;
  ResetLoop(OPrsr);
  while (LoopKey("OnAcc",OPrsr,3,found)) begin
    if (found) then begin
      if (OPrsr.VECode<>VEp.Code) then begin found = false; end;
      if (OPrsr.VINr<>-1) then begin found = false; end;      
      if (OPrsr.TransType<>kOPrsTransTypeNLTransaction) then begin found = false; end;
      if (found) then begin      
        testf = true;
        TRr.Number = OPrsr.TransNr;
        TRr.IntYc = GetIntYc(OPrsr.TransDate);                
        if (ReadFirstMain(TRr,2,true)) then begin
          if (backdate) then begin
            if (RepSpec.d1<TRr.TransDate) then begin
              testf = false;
            end;
          end;          
          if (TRr.TransDate!=OPrsr.TransDate) then begin
            testf = false;
          end;
          if (testf) then begin          
            rwcnt = MatRowCnt(TRr);
            for (i=0; i<rwcnt; i=i+1) begin
              MatRowGet(TRr,i,TRrw);
              if (TRrw.ovst==0) then begin
                if (TRrw.stp==1) then begin
                  if (TRrw.SerNr==-1) then begin
                    if (TRrw.CompCode==VEp.Code) and (TRrw.Typ==2) then begin 
                      if (nonblank(TRrw.DebVal)) then begin
                        if (TRrw.CurDebVal!=blankval) then begin                   
                          rvalp = rvalp - TRrw.CurDebVal;
                        end else begin
                          rvalp = rvalp - TRrw.DebVal;
                        end;                      
                        sump = sump - TRrw.DebVal;                      
                        sum2p = sum2p - TRrw.DebVal2;
                        if (RepSpec.ArtMode==4) begin
                          sumcurncy = sumcurncy + TRrw.CurDebVal;
                          if (backdate) then begin
                            if (TRrw.CurDebVal!=blankval) then begin                   
                              t = MulWithRateToBase1(TRrw.Curncy,RepSpec.d1,TRrw.CurDebVal,DefaultCurRoundOff);
                            end else begin
                              t = TRrw.DebVal;
                            end;
                          end else begin
                            t = TRrw.DebVal;
                          end;
                          sumbooked = sumbooked + t;
                          t2 = MulWithRateToBase1(TRrw.Curncy,CurrentDate,TRrw.CurDebVal,DefaultCurRoundOff);
                          sumnow = sumnow + t2;
                          t2 = t2 - t;
                          sumdiff = sumdiff + t2;                        
                          AddCurncyTotals(acur,av1,curcnt,TRrw.Curncy,TRrw.CurDebVal);
                        end;
                      end else begin
                        if (TRrw.CurCredVal!=blankval) then begin                   
                          rvalp = rvalp + TRrw.CurCredVal;
                        end else begin
                          rvalp = rvalp + TRrw.CredVal;
                        end;                      
                        sump = sump + TRrw.CredVal;                      
                        sum2p = sum2p + TRrw.CredVal2;
                        if (RepSpec.ArtMode==4) begin
                          sumcurncy = sumcurncy - TRrw.CurCredVal;
                          if (backdate) then begin
                            if (TRrw.CurCredVal!=blankval) then begin                   
                              t = MulWithRateToBase1(TRrw.Curncy,RepSpec.d1,TRrw.CurCredVal,DefaultCurRoundOff);
                            end else begin
                              t = TRrw.CredVal;
                            end;
                          end else begin
                            t = TRrw.CredVal;
                          end;
                          sumbooked = sumbooked - t;
                          t2 = MulWithRateToBase1(TRrw.Curncy,CurrentDate,TRrw.CurCredVal,DefaultCurRoundOff);
                          sumnow = sumnow - t2;
                          t2 = t2 - t;
                          sumdiff = sumdiff - t2;                        
                          AddCurncyTotals(acur,av1,curcnt,TRrw.Curncy,-TRrw.CurCredVal);
                        end;                        
                      end;
                    end;
                  end;                
                end;
              end;
            end;                
          end;
        end;
      end;          
    end;
  end;

  OPrsr.VINr = -1;
  OPrsr.TransType = kOPrsTransTypePurgeNLTransaction;
  OPrsr.VECode = VEp.Code;
  found = true;
  ResetLoop(OPrsr);
  while (LoopKey("OnAcc",OPrsr,3,found)) begin
    if (found) then begin
      if (OPrsr.VECode<>VEp.Code) then begin found = false; end;
      if (OPrsr.VINr<>-1) then begin found = false; end;      
      if (OPrsr.TransType<>kOPrsTransTypePurgeNLTransaction) then begin found = false; end;
      if (found) then begin      
        testf = true;
        PurgeTRr.Number = OPrsr.TransNr;
        PurgeTRr.IntYc = GetIntYc(OPrsr.TransDate);                
        PurgeTRr.TransRow = OPrsr.TransRow;
        if (ReadFirstMain(PurgeTRr,3,true)) then begin
          if (backdate) then begin
            if (RepSpec.d1<PurgeTRr.TransDate) then begin
              testf = false;
            end;
          end;          
          if (PurgeTRr.TransDate!=OPrsr.TransDate) then begin
            testf = false;
          end;
          if (testf) then begin          
            if (PurgeTRr.SerNr==-1) then begin
              if (PurgeTRr.CompCode==VEp.Code) and (PurgeTRr.Typ==2) then begin 
                if (nonblank(PurgeTRr.DebVal)) then begin
                  if (PurgeTRr.CurDebVal!=blankval) then begin                   
                    rvalp = rvalp - PurgeTRr.CurDebVal;
                  end else begin
                    rvalp = rvalp - PurgeTRr.DebVal;
                  end;                      
                  sump = sump - PurgeTRr.DebVal;                      
                  sum2p = sum2p - PurgeTRr.DebVal2;
                  if (RepSpec.ArtMode==4) begin
                    sumcurncy = sumcurncy + PurgeTRr.CurDebVal;
                    if (backdate) then begin
                      if (PurgeTRr.CurDebVal!=blankval) then begin                   
                        t = MulWithRateToBase1(PurgeTRr.Curncy,RepSpec.d1,PurgeTRr.CurDebVal,DefaultCurRoundOff);
                      end else begin
                        t = PurgeTRr.DebVal;
                      end;
                    end else begin
                      t = PurgeTRr.DebVal;
                    end;
                    sumbooked = sumbooked + t;
                    t2 = MulWithRateToBase1(PurgeTRr.Curncy,CurrentDate,PurgeTRr.CurDebVal,DefaultCurRoundOff);
                    sumnow = sumnow + t2;
                    t2 = t2 - t;
                    sumdiff = sumdiff + t2;                        
                  end;
                  AddCurncyTotals(acur,av1,curcnt,PurgeTRr.Curncy,PurgeTRr.CurDebVal);
                end else begin
                  if (PurgeTRr.CurCredVal!=blankval) then begin                   
                    rvalp = rvalp + PurgeTRr.CurCredVal;
                  end else begin
                    rvalp = rvalp + PurgeTRr.CredVal;
                  end;                      
                  sump = sump + PurgeTRr.CredVal;                      
                  sum2p = sum2p + PurgeTRr.CredVal2;
                  if (RepSpec.ArtMode==4) begin
                    sumcurncy = sumcurncy - PurgeTRr.CurCredVal;
                    if (backdate) then begin
                      if (PurgeTRr.CurCredVal!=blankval) then begin                   
                        t = MulWithRateToBase1(PurgeTRr.Curncy,RepSpec.d1,PurgeTRr.CurCredVal,DefaultCurRoundOff);
                      end else begin
                        t = PurgeTRr.CredVal;
                      end;
                    end else begin
                      t = PurgeTRr.CredVal;
                    end;
                    sumbooked = sumbooked - t;
                    t2 = MulWithRateToBase1(PurgeTRr.Curncy,CurrentDate,PurgeTRr.CurCredVal,DefaultCurRoundOff);
                    sumnow = sumnow - t2;
                    t2 = t2 - t;
                    sumdiff = sumdiff - t2;                        
                  end;                        
                  AddCurncyTotals(acur,av1,curcnt,PurgeTRr.Curncy,PurgeTRr.CurCredVal);
                end;
              end;
            end;                
          end;
        end;
      end;          
    end;
  end;
      
  APPayHistr.VECode = VEp.Code;
  found = false;
  if (RepSpec.flags[29]==0) then begin
    found = true;
  end;
  while (LoopKey("VECode",APPayHistr,1,found)) begin
    if (APPayHistr.VECode<>VEp.Code) then begin found = false; end;
    if (found) then begin
      if (found) then begin
        if (APPayHistr.FileName=="VIVc") then begin
          testf = true;
          if (backdate) then begin
            if (RepSpec.d1<APPayHistr.TransDate) then begin
              testf = false;
            end;
          end;
          VIr.SerNr = APPayHistr.SerNr;
          vif = ReadFirstMain(VIr,1,true);
          if ((nonblank(RepSpec.ObjStr)) or (nonblank(RepSpec.ObjType))) then begin
            if (vif) then begin
              if (nonblank(RepSpec.ObjType)) then begin
                if (!ObjectTypeMatch(VIr.Objects,RepSpec.ObjType)) then begin
                  testf = false;
                end;
              end;                                                        
              if (!SetInSet(RepSpec.ObjStr,VIr.Objects)) then begin
                testf = false;
              end;
            end;
          end;
          apacc = APPayHistr.APAcc;
          if (blank(apacc)) then begin
            apacc = GetSupplierOnAccountAC(APPayHistr.VECode);
          end;
          if (nonblank(RepSpec.FirstAcc)) then begin
            if (RepSpec.FirstAcc!=apacc) then begin
              testf = false;
            end;
          end;                
          if (nonblank(RepSpec.CurncyCode)) then begin
            if (RepSpec.CurncyCode!=APPayHistr.CurncyCode) then begin testf = false; end;
          end;
          if (testf) then begin        
            if (RepSpec.ArtMode==4) or (RepSpec.ArtMode==6) begin
              sumcurncy = sumcurncy - APPayHistr.Val;
              t = APPayHistr.BookVal;
//which OPrw ?               
              if (backdate) then begin
                t2 = MulWithRateToBase1(VIr.CurncyCode,RepSpec.d1,APPayHistr.Val,DefaultCurRoundOff);
              end else begin
                t2 = MulWithRateToBase1(VIr.CurncyCode,CurrentDate,APPayHistr.Val,DefaultCurRoundOff);
              end;
              sumbooked = sumbooked - APPayHistr.BookVal;
              sumnow = sumnow - t2;
              t2 = t2 - t;
              sumdiff = sumdiff - t2;
              if (sumcurncy==0) then begin
                sumbooked = 0;
                sumdiff = 0;
              end;
              AddCurncyTotals(acur,av1,curcnt,APPayHistr.CurncyCode,APPayHistr.Val);
            end else begin
              if (nonblank(VEp.VECurncyCode)) then begin
                rvalp = rvalp + APPayHistr.Val;
              end else begin
                rvalp = rvalp + APPayHistr.BookVal;
              end;
              sump = sump + APPayHistr.BookVal;
              if (sump==0) then begin
                sum2p = 0;
              end else begin
  //              Base1ToBase2(APPayHistr.BookVal,APPayHistr.TransDate,t);
                t = MulRateToBase2(VIr.CurncyCode,APPayHistr.Val,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
                sum2p = sum2p + t;
              end;
              AddCurncyTotals(acur,av1,curcnt,APPayHistr.CurncyCode,APPayHistr.Val);
              if ((RepSpec.flags[18]!=0) and (RepSpec.ArtMode!=4) and (RepSpec.ArtMode!=6)) then begin
                AddToCreditorsAccounts(apacc,0,APPayHistr.BookVal,credaccs,credbal,credcnt);
              end;   
            end;     
          end;  
        end;
        if (APPayHistr.FileName=="OPVc") then begin
          testf = true;
          if (backdate) then begin
            if (RepSpec.d1<APPayHistr.TransDate) then begin
              testf = false;
            end;
          end;
          OPr.SerNr = APPayHistr.SerNr;
          opf = ReadFirstMain(OPr,1,true);
          if ((nonblank(RepSpec.ObjStr)) or (nonblank(RepSpec.ObjType))) then begin
            if (opf) then begin
              rwcnt = MatRowCnt(OPr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(OPr,i,OPrw);
                if (OPrw.PrepayNr==APPayHistr.VEPNr) then begin
                  if (nonblank(RepSpec.ObjType)) then begin
                    testf = ObjectTypeMatch(OPrw.Objects,RepSpec.ObjType);
                  end;                                                        
//                  if (SetInSet(RepSpec.ObjStr,OPrw.Objects)==false) and (nonblank(OPrw.Objects)) then begin // y ?
                  if (SetInSet(RepSpec.ObjStr,OPrw.Objects)==false) then begin
                    testf = false;
                    i = rwcnt;
                  end;                
                end;
              end;
            end;
          end;
          apacc = APPayHistr.APAcc;
          if (blank(apacc)) then begin
            apacc = GetSupplierOnAccountAC(APPayHistr.VECode);
          end;
          if (nonblank(RepSpec.FirstAcc)) then begin
            if (RepSpec.FirstAcc!=apacc) then begin
              testf = false;
            end;
          end;                
          if (nonblank(RepSpec.CurncyCode)) then begin
            if (RepSpec.CurncyCode!=APPayHistr.CurncyCode) then begin testf = false; end;
          end;
          if (testf) then begin
            if (RepSpec.ArtMode==4) or (RepSpec.ArtMode==6) begin
              sumcurncy = sumcurncy + APPayHistr.Val;
              t = APPayHistr.BookVal;
//which OPrw ?               
              if (backdate) then begin
                t2 = MulWithRateToBase1(OPrw.PInvCurncy,RepSpec.d1,APPayHistr.Val,DefaultCurRoundOff);
              end else begin
                t2 = MulWithRateToBase1(OPrw.PInvCurncy,CurrentDate,APPayHistr.Val,DefaultCurRoundOff);
              end;
              sumbooked = sumbooked + APPayHistr.BookVal;
              sumnow = sumnow + t2;
              t2 = t2 - t;
              sumdiff = sumdiff + t2;
              AddCurncyTotals(acur,av1,curcnt,APPayHistr.CurncyCode,-APPayHistr.Val);
              if (sumcurncy==0) then begin
                sumbooked = 0;
                sumdiff = 0;
              end;
            end else begin                                                   
              AddCurncyTotals(acur,av1,curcnt,APPayHistr.CurncyCode,-APPayHistr.Val);
              t = APPayHistr.BookVal;
              
              if (nonblank(VEp.VECurncyCode)) then begin
                rvalp = rvalp - APPayHistr.Val;
              end else begin
                rvalp = rvalp - APPayHistr.BookVal;
              end;
              sump = sump - APPayHistr.BookVal;
              if (APPayHistr.CurncyCode==BCb.BaseCur1) then begin
              end else begin
                OPr.SerNr = APPayHistr.SerNr;
                if (ReadFirstMain(OPr,1,true)) then begin
                  rwcnt = MatRowCnt(OPr);
                  for (i=0;i<rwcnt;i=i+1) begin
                    MatRowGet(OPr,i,OPrw);
                    if (OPrw.PrepayNr==APPayHistr.VEPNr) then begin
                      lossv = blankval;
                      if (OPrw.BankCurncy!=BCb.BaseCur1) then begin
                        if (nonblank(OPrw.B1BankVal)) then begin
                          sump = sump + t;
                          sump = sump - OPrw.B1BankVal;
                        end else begin
                          if (GetAPPayRate(OPrw.PrepayNr,frrate,torate1,torate2,baserate1,baserate2,OPrw.PInvCurncy,OPr.TransDate)) then begin
                            lossv = MulRateToBase1(OPrw.BankCurncy,OPrw.BankVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
                          end else begin
                            lossv = MulRateToBase1(OPrw.PInvCurncy,OPrw.PInvVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
                          end;
                          lossv = lossv - t;
                          sump = sump - lossv;
                        end;
                      end;
                      if (blank(VEp.VECurncyCode)) then begin// in base1 then
                        rvalp = rvalp - lossv;
                      end;
                      AddCurncyTotals(acur,av1,curcnt,APPayHistr.CurncyCode,-lossv);
                    end;
                  end;
                end;

              end;

  //            sump = sump -  MulWithRateToBase1(APPayHistr.CurncyCode,APPayHistr.TransDate,APPayHistr.Val,DefaultCurRoundOff);
  // if bank val is diffrent then curam*rate
              Base1ToBase2(APPayHistr.BookVal,APPayHistr.TransDate,t);
              sum2p = sum2p - t;
            end;
            if ((RepSpec.flags[18]!=0) and (RepSpec.ArtMode!=4) and (RepSpec.ArtMode!=6)) then begin
              AddToCreditorsAccounts(apacc,0,-APPayHistr.BookVal,credaccs,credbal,credcnt);
            end;        
          end;  
        end;
        if (APPayHistr.FileName=="CLOutVc") then begin
          testf = true;
          if (backdate) then begin
            if (RepSpec.d1<APPayHistr.TransDate) then begin
              testf = false;
            end;
          end;
          if ((nonblank(RepSpec.ObjStr)) or (nonblank(RepSpec.ObjType))) then begin
            CLOutr.SerNr = APPayHistr.SerNr;
            if (ReadFirstMain(CLOutr,1,true)) then begin
              rwcnt = MatRowCnt(CLOutr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(CLOutr,i,CLOutrw);
                if (CLOutrw.TransNr==APPayHistr.VEPNr) then begin
                  if (nonblank(RepSpec.ObjType)) then begin
                    testf = ObjectTypeMatch(CLOutr.Objects,RepSpec.ObjType);
                  end;                                                        
                  if (SetInSet(RepSpec.ObjStr,CLOutr.Objects)==false) then begin
                    testf = false;
                  end;
                  i = rwcnt;
                end;
              end;
            end;
          end;
          apacc = APPayHistr.APAcc;
          if (blank(apacc)) then begin
            apacc = GetSupplierOnAccountAC(APPayHistr.VECode);
          end;
          if (nonblank(RepSpec.FirstAcc)) then begin
            if (RepSpec.FirstAcc!=apacc) then begin
              testf = false;
            end;
          end;                
          if (testf) then begin
/*          
            if (nonblank(cucrncy)) then begin
              CurValToOtherCur(APPayHistr.TransDate,APPayHistr.CurncyCode,-APPayHistr.Val,cucrncy,t,DefaultCurRoundOff);
            end else begin
              t = -APPayHistr.Val;
              if (nonblank(APPayHistr.CurncyCode)) then begin
                AddCurTotalsRow(APPayHistr.CurncyCode,t,blankval,blankval,CurTotalsr);
              end;
//              AddCurncyTotals(acur,av1,curcnt,APPayHistr.CurncyCode,-APPayHistr.Val);            
            end;
*/            
            AddCurncyTotals(acur,av1,curcnt,APPayHistr.CurncyCode,-APPayHistr.Val);
            rvalp = rvalp - APPayHistr.Val;
            sump = sump - APPayHistr.BookVal;
            Base1ToBase2(APPayHistr.BookVal,APPayHistr.TransDate,t);
            sum2p = sum2p - t;
            if ((RepSpec.flags[18]!=0) and (RepSpec.ArtMode!=4) and (RepSpec.ArtMode!=6)) then begin
              AddToCreditorsAccounts(apacc,0,-APPayHistr.BookVal,credaccs,credbal,credcnt);
            end;        
          end;
        end;
        if (APPayHistr.FileName=="CLInVc") then begin
          testf = true;
          if (backdate) then begin
            if (RepSpec.d1<APPayHistr.TransDate) then begin
              testf = false;
            end;
          end;
          if ((nonblank(RepSpec.ObjStr)) or (nonblank(RepSpec.ObjType))) then begin
            CLInr.SerNr = APPayHistr.SerNr;
            if (ReadFirstMain(CLInr,1,true)) then begin
              rwcnt = MatRowCnt(CLInr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(CLInr,i,CLInrw);
                if (CLInrw.TransNr==APPayHistr.VEPNr) then begin
                  if (nonblank(RepSpec.ObjType)) then begin
                    testf = ObjectTypeMatch(CLInr.Objects,RepSpec.ObjType);
                  end;                                                        
                  if (SetInSet(RepSpec.ObjStr,CLInr.Objects)==false) then begin
                    testf = false;
                  end;
                  i = rwcnt;
                end;
              end;
            end;
          end;
          if (nonblank(RepSpec.CurncyCode)) then begin
            if (RepSpec.CurncyCode!=APPayHistr.CurncyCode) then begin testf = false; end;
          end;
          apacc = APPayHistr.APAcc;
          if (blank(apacc)) then begin
            apacc = GetSupplierOnAccountAC(APPayHistr.VECode);
          end;
          if (nonblank(RepSpec.FirstAcc)) then begin
            if (RepSpec.FirstAcc!=apacc) then begin
              testf = false;
            end;
          end;                
          if (testf) then begin
            AddCurncyTotals(acur,av1,curcnt,APPayHistr.CurncyCode,-APPayHistr.Val);
            rvalp = rvalp + APPayHistr.Val;
            sump = sump + APPayHistr.BookVal;
            Base1ToBase2(APPayHistr.BookVal,APPayHistr.TransDate,t);
            sum2p = sum2p + t;
            if ((RepSpec.flags[18]!=0) and (RepSpec.ArtMode!=4) and (RepSpec.ArtMode!=6)) then begin
              AddToCreditorsAccounts(apacc,0,-APPayHistr.BookVal,credaccs,credbal,credcnt);
            end;        
          end;
        end;        
      end;
    end;
  end;
  if (rvalp==0) then begin sump = 0; end;
  return;
end;

procedure ToStrTRCode(var string rstr,Integer ycp,LongInt nrp)
begin
  string 255 t2;
  
  t2 = nrp;
  rstr = StrTRCode(ycp);
  if (nonblank(rstr)) then begin
    rstr = rstr & ".";
  end;  
  rstr = rstr & t2;
  return;
end;

procedure PrintInstallments(record RcVc RepSpec,record VIVc VIr)
begin
  record APInstallVc APIr;
  Boolean TrHs;
  string 255 tstr;
  Integer h1,h2,h3;

  h1=15; h2=45; h3 = 220;
  tstr = VIr.SerNr;
  if (nonblank(VIr.InvoiceNr)) then begin
    tstr = tstr & ", (";
    tstr = tstr & VIr.InvoiceNr;
    tstr = tstr & ")";
  end;
  if (VIr.Closed==1) then begin
    tstr = tstr & " (*) ";
  end;            
  APIr.VISerNr = VIr.SerNr;
  TrHs = true;
  while (LoopKey("VISerNr",APIr,1,TrHs)) begin
    if (APIr.VISerNr!=VIr.SerNr) then begin TrHs = false; end;
    if (TrHs) then begin
      StartFormat(15);
      OutString(h1,0,USetStr(4071),false);
      OutString(h2,"DblAP",tstr,false);
      OutDate(185,0,VIr.InvDate,false);
      OutDate(310,0,APIr.DueDate,true);
      if (RepSpec.flags[2]==1) then begin
        OutValBiDi(380,0,VIr.PayVal,M4Val,true,420);
        OutValBiDi(450,0,APIr.RVal,M4Val,true,500);
        OutString(480,0,VIr.CurncyCode,true);
      end else begin
        OutValBiDi(380,0,APIr.BookRVal,M4Val,true,420);
        OutValBiDi(1,0,APIr.BookRVal,M4Val,true,520);
      end;  
      EndFormat;  
    end;
  end;
  return;
end;

global
function Boolean APWithLogg2(record RcVc RepSpec,record CUVc VEr,record VIVc orgVIp,record OPrsVc orgOPrsr,record TRVc orgTRr,var val rvalp,var val rvalbasp,Integer hrwcnt,Boolean backdatf)
begin
  Boolean res;
  record VIVc VIr;
  record OPrsVc OPrsr;
  record OPVc OPr;
  row OPVc OPrw;
  record PurgeTRVc PurgeTRr;
  record TRVc TRr;
  row TRVc TRrw;
  record CLOutVc CLOutr;
  row CLOutVc CLoutrw;
  record CLInVc CLInr;
  row CLInVc CLInrw;
  Boolean found;
  val invsal,t,InvVal,tinivcurrate,rategain,totrategain;
  Integer h1,h2,h3;
  Integer i,rwcnt;
  LongInt invnr;
  val rs,t2;
  Boolean testf;
  string 255 tstr,tstr2,dblstr;
  Integer typeofcur,oldstyle;
  record BaseCurBlock BCb;

  BlockLoad(BCb);
  h1=11; h2=60; h3 = 220;
  res = false;
  invnr = orgVIp.SerNr;
  InvVal = MulRateToBase1(orgVIp.CurncyCode,orgVIp.PayVal,orgVIp.FrRate,orgVIp.ToRateB1,orgVIp.ToRateB2,orgVIp.BaseRate1,orgVIp.BaseRate2,DefaultCurRoundOff);          
  
  if (hrwcnt>1) then begin
    Gray_Divider(300,380);
  end;  
/*
  if (RepSpec.flags[2]==0) then begin
    rs = MulRateToBase1(orgVIp.CurncyCode,rvalp,orgVIp.FrRate,orgVIp.ToRateB1,orgVIp.ToRateB2,orgVIp.BaseRate1,orgVIp.BaseRate2,DefaultCurRoundOff);
  end;
*/
  if ((orgVIp.InstallmentInv==1) and (RepSpec.flags[19]!=0)) then begin
    PrintInstallments(RepSpec,orgVIp);
  end else begin
    switch (orgOPrsr.TransType) begin
      case kOPrsTransTypeInvoice:
        tstr = VIr.SerNr;
        if (nonblank(VIr.InvoiceNr)) then begin
          tstr = tstr & ", (";
          tstr = tstr & VIr.InvoiceNr;
          tstr = tstr & ")";
        end;
        dblstr = "DblAP";
      case kOPrsTransTypeNLTransaction:
        tstr = VIr.SerNr;
        if (nonblank(VIr.InvoiceNr)) then begin
          tstr = tstr & ", (";
          tstr = tstr & VIr.InvoiceNr;
          tstr = tstr & ")";
        end;
        dblstr = "DblTrans2";
        YcToStr(orgTRr.IntYc,tstr2);     
        tstr2 = tstr2 & "." & orgTRr.Number;
    end;
    StartFormat(15);
    if (orgVIp.InvType==kInvoiceTypeCredit) then begin
      OutString(h1,0,USetStr(4073),false);
    end else begin
      OutString(h1,0,USetStr(4071),false);
    end;
    tstr = orgVIp.SerNr;
    if (nonblank(orgVIp.InvoiceNr)) then begin
      tstr = tstr & ", (";
      tstr = tstr & orgVIp.InvoiceNr;
      tstr = tstr & ")";
    end;
    if (orgVIp.Closed!=0) then begin
      tstr = tstr & " (*) ";
    end;            
    OutStringID(60,dblstr,tstr,false,tstr2);
    if (orgVIp.Closed==1) then begin
      res = true;
      tstr2 = " (*)";
      tstr2 = tstr2 & tstr;
      tstr = tstr2;
    end;
    if (RepSpec.flags[5]==0) then begin
      OutDate(185,0,orgVIp.InvDate,false);
    end else begin
      OutDate(185,0,orgVIp.RebDate,false);
    end;
    OutDate(310,0,orgVIp.DueDate,true);
    if (RepSpec.flags[2]==1) then begin
      OutValBiDi(380,0,orgVIp.PayVal,M4Val,true,420);
      OutValBiDi(450,0,rvalp,M4Val,true,500);
      OutString(480,0,orgVIp.CurncyCode,true);
      invsal = rvalp;
    end else begin
      OutValBiDi(380,0,InvVal,M4Val,true,420);
      OutValBiDi(480,0,rvalbasp,M4Val,true,520);
      invsal = InvVal;
    end;
    EndFormat;
  end;
  OPrsr.VINr = invnr;
  found = true;    
  while (LoopKey("VIKey",OPrsr,1,found)) begin
    testf = false;
    if (found) then begin
      if (OPrsr.VINr<>invnr) then begin
        found = false;
      end;
    end;    
    if (found) then begin
      testf = true;
      if (backdatf) then begin
        if (OPrsr.TransDate>RepSpec.d1) then begin testf = false; end;
      end;  
    end;
    if (testf) then begin
      if (OPrsr.TransType==0) then begin
        VIr.SerNr = OPrsr.TransNr;
        if (VIr.SerNr<>invnr) then begin
          if (ReadFirstMain(VIr,1,true)) then begin
            if (VIr.Invalid==0) then begin
            if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
              t = -VIr.PayVal;
              t2 = -VIr.PayVal;
              t = MulRateToBase1(VIr.CurncyCode,t,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
              if (RepSpec.flags[2]==1) then begin
                invsal = invsal - VIr.PayVal;
              end else begin
                invsal = invsal + t;
              end;
              StartFormat(15);
              OutString(h1,0,USetStr(4073),false);
              tstr = VIr.SerNr;
              if (nonblank(VIr.InvoiceNr)) then begin
                tstr = tstr & ", (";
                tstr = tstr & VIr.InvoiceNr;
                tstr = tstr & ")";
              end;
              OutString(h2,"DblAP",tstr,false);
              OutDate(185,0,VIr.InvDate,false);
              OutDate(310,0,VIr.DueDate,true);
              if (RepSpec.flags[2]==1) then begin
                OutValBiDi(380,0,t2,M4Val,true,420);
                OutValBiDi(450,0,t2,M4Val,true,520);
                OutString(480,0,VIr.CurncyCode,true);
              end else begin
                OutValBiDi(380,0,t,M4Val,true,420);
                OutValBiDi(480,0,t,M4Val,true,520);
              end;  
              EndFormat;
            end;
            end;
          end;
        end;  
      end;
      
      if (OPrsr.TransType==1) then begin
        OPr.SerNr = OPrsr.TransNr;
        if (ReadFirstMain(OPr,1,false)) then begin
          t = 0;
          if (RepSpec.flags[14]!=0) then begin
            if (OPr.DoneFlag==0) then begin goto L11; end;
          end;
          if ((OPr.OrderedFlag!=0) and (OPr.RejectedFlag==0)) then begin
            rwcnt = MatRowCnt(OPr);
            for (i=0; i<rwcnt; i=i+1) begin
              MatRowGet(OPr,i,OPrw);
              if (OPrw.ovst==0) then begin
                if (OPrw.VISerNr==invnr) then begin
                  if ((OPrw.stp==1) or (OPrw.stp==5)) then begin                 
                    if (OPr.TransDate==OPrsr.TransDate) then begin
                      t = t + OPrw.PInvVal;
                    end;
                  end;  
                end;    
              end;
            end;
            if ((t<>0) or (OPr.RejectedFlag==1)) then begin
/*            
                          if (RepSpec.flags[2]==1) then begin
                            if (nonblank(VEr.CurncyCode)) then begin
                              if (IPrw.BankCurncy==BCb.BaseCur1) then begin
                                t3 = IPrw.InvVal;
                                t = t + t3;
                              end else begin
                                t3 = IPrw.InvVal;
                                t = t + t3;
                              end;
                            end else begin
                              if (IPrw.BankCurncy==BCb.BaseCur1) then begin
                                t = t + IPrw.BankVal;
                                tinivcurrate = MulRateToBase1(IPrw.InvCurncy,IPrw.InvVal,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
                                rategain = tinivcurrate - IPrw.BankVal;
                              end else begin
                                t3 = MulWithRateToBase1(IPrw.InvCurncy,IPrw.PayDate,IPrw.InvVal,DefaultCurRoundOff);   
                                t = t + t3;
                                tinivcurrate = MulRateToBase1(IPrw.InvCurncy,IPrw.InvVal,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
                                rategain = tinivcurrate - t3;
                              end;
                              totrategain = totrategain + rategain;
                            end;
                          end else begin
                            if (IPrw.BankCurncy==BCb.BaseCur1) then begin
                              tinivcurrate = MulRateToBase1(IPrw.InvCurncy,IPrw.InvVal,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
                              rategain = tinivcurrate - IPrw.BankVal;
                              t = t + IPrw.BankVal;
                              totrategain = totrategain + rategain;
                            end else begin
                              tinivcurrate = MulRateToBase1(IPrw.InvCurncy,IPrw.InvVal,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
                              t3 = MulWithRateToBase1(IPrw.InvCurncy,IPrw.PayDate,IPrw.InvVal,DefaultCurRoundOff);   
                              t = t + t3;
                              rategain = tinivcurrate - t3;
                              totrategain = totrategain + rategain;
                            end;
                          end;
                          t2 = t2 + IPrw.InvVal;
*/                          
                                      
              invsal = invsal - t;
              t = -t;
              t2 = t;
              t = MulWithRateToBase1(OPrw.PInvCurncy,OPr.TransDate,t,DefaultCurRoundOff);
              if (true/*SupportTempBook(&OPr,OPVc)==false*/) then begin
                OutString(h1,0,USetStr(4072),false);
              end else begin
                if (OPr.DoneFlag==0) then begin OutString(h1,0,USetStr(4076),false); end;
                if (OPr.RejectedFlag==1) then begin OutString(h1,0,USetStr(4074),false); end;
                if ((OPr.RejectedFlag==0) and (OPr.DoneFlag==1)) then begin OutString(h1,0,USetStr(4075),false); end;
              end;
              StartFormat(15);
              OutLongInt(h2,"DblOPVc",OPr.SerNr,false);
              OutDate(310,0,OPr.TransDate,true);
              if (RepSpec.flags[2]==1) then begin
                OutValBiDi(380,0,t2,M4Val,true,420);
              end else begin
                OutValBiDi(380,0,t,M4Val,true,420);
              end;  
              EndFormat;
            end;
          end;
L11:;          
        end;
      end;      
      if (OPrsr.TransType==kOPrsTransTypePurgeNLTransaction) then begin
          PurgeTRr.Number = OPrsr.TransNr;
          PurgeTRr.IntYc = GetIntYc(OPrsr.TransDate);                    
          PurgeTRr.TransRow = OPrsr.TransRow;
          if (ReadFirstMain(PurgeTRr,3,true)) then begin
            if (PurgeTRr.TransDate==OPrsr.TransDate) then begin
              t = 0;
              if (PurgeTRr.SerNr==invnr) then begin
                if (PurgeTRr.DebVal<>0) then begin                
                  t = PurgeTRr.CurCredVal - PurgeTRr.CurDebVal;
                  t2 = PurgeTRr.CredVal - PurgeTRr.DebVal;
                  if ((PurgeTRr.CurDebVal==0) and (PurgeTRr.CurCredVal==0)) then begin
                    typeofcur = TypeOfCurncy(PurgeTRr.Curncy,oldstyle);   
                    if (typeofcur==1) then begin
                      t = t2;                          
                    end;
                    if (typeofcur==2) then begin
                      t = PurgeTRr.CredVal2 - PurgeTRr.DebVal2;
                    end;                          
                  end;  
                  invsal = invsal + t;
                  ToStrTRCode(tstr,PurgeTRr.IntYc,PurgeTRr.Number);                        
                  StartFormat(15);
                  OutString(h1,0,USetStr(2530),false);
                  OutString(h2,"DblTrans",tstr,false);
                  OutDate(310,0,PurgeTRr.TransDate,true);
                  if (RepSpec.flags[2]==0) then begin
                    OutValBiDi(380,0,t2,M4Val,true,420);
                  end else begin
                    OutValBiDi(380,0,t,M4Val,true,420);
                  end;  
                  EndFormat;
                end;  
              end;  
            end;
          end;
      end;
      if (OPrsr.TransType==kOPrsTransTypeNLTransaction) then begin
          TRr.Number = OPrsr.TransNr;
          TRr.IntYc = GetIntYc(OPrsr.TransDate);                    
          if (ReadFirstMain(TRr,2,true)) then begin
            if (TRr.TransDate==OPrsr.TransDate) then begin
              t = 0;
              rwcnt = MatRowCnt(TRr);
              for (i=0; i<rwcnt; i=i+1) begin
                MatRowGet(TRr,i,TRrw);
                if (TRrw.ovst==0) then begin
                  if (TRrw.stp==1) then begin
                    if (TRrw.SerNr==invnr) then begin
                      if (TRrw.DebVal<>0) then begin                
                        t = TRrw.CurCredVal - TRrw.CurDebVal;
                        t2 = TRrw.CredVal - TRrw.DebVal;
                        if ((TRrw.CurDebVal==0) and (TRrw.CurCredVal==0)) then begin
                          typeofcur = TypeOfCurncy(TRrw.Curncy,oldstyle);   
                          if (typeofcur==1) then begin
                            t = t2;                          
                          end;
                          if (typeofcur==2) then begin
                            t = TRrw.CredVal2 - TRrw.DebVal2;
                          end;                          
                        end;  
                        invsal = invsal + t;
                        ToStrTRCode(tstr,TRr.IntYc,TRr.Number);                        
                        StartFormat(15);
                        OutString(h1,0,USetStr(2530),false);
                        OutString(h2,"DblTrans",tstr,false);
                        OutDate(310,0,TRr.TransDate,true);
                        if (RepSpec.flags[2]==0) then begin
                          OutValBiDi(380,0,t2,M4Val,true,420);
                        end else begin
                          OutValBiDi(380,0,t,M4Val,true,420);
                        end;  
                        EndFormat;
                      end;  
                    end;  
                  end;    
                end;
              end;
            end;
          end;
      end;
      if (OPrsr.TransType==3) then begin
          CLOutr.SerNr = OPrsr.TransNr;
          if (ReadFirstMain(CLOutr,1,true)) then begin
            if (CLOutr.TransDate==OPrsr.TransDate) then begin
              t = 0;
              rwcnt = MatRowCnt(CLOutr);
              for (i=0; i<rwcnt; i=i+1) begin
                MatRowGet(CLOutr,i,CLOutrw);
                if (CLOutrw.TransNr==invnr) and (CLOutrw.Type==2) then begin
                  t = -CLOutrw.Sum;
                  tinivcurrate = MulRateToBase1(CLOutr.CurncyCode,t,orgVIp.FrRate,orgVIp.ToRateB1,orgVIp.ToRateB2,orgVIp.BaseRate1,orgVIp.BaseRate2,DefaultCurRoundOff);
                  t2 = MulRateToBase1(CLOutr.CurncyCode,t,CLOutr.FrRate,CLOutr.ToRateB1,CLOutr.ToRateB2,CLOutr.BaseRate1,CLOutr.BaseRate2,DefaultCurRoundOff);
                  rategain = tinivcurrate - t2;                                   
                  rategain = Round(rategain,DefaultRoundMode);

                  if (RepSpec.flags[2]==1) then begin
                    if (nonblank(VEr.CurncyCode)) then begin
                      invsal = invsal + t;        
                    end else begin
                      invsal = invsal + tinivcurrate;        
                    end;
                  end else begin
                    invsal = invsal + t2 + rategain;        
                  end;

                  StartFormat(15);
                  OutString(h1,0,USetStr(1194),false);
                  OutString(h2,"DblCLOutVc",CLOutr.SerNr,false);
                  OutDate(310,0,CLOutr.TransDate,true);
                  if (RepSpec.flags[2]==0) then begin
                    OutValBiDi(380,0,t2,M4Val,true,420);
                    OutValBiDi(425,0,rategain,M4Val,true,465);
//                    OutValBiDi(480,0,invsal,M4Val,true,520);
                  end else begin
                    OutValBiDi(380,0,t,M4Val,true,420);
//                    OutValBiDi(460,0,invsal,M4Val,true,500);
                  end;  
                  EndFormat;                                                
                end;
              end;
            end;
          end;
      end;      

      if (OPrsr.TransType==4) then begin
          CLInr.SerNr = OPrsr.TransNr;
          if (ReadFirstMain(CLInr,1,true)) then begin
            if (CLInr.TransDate==OPrsr.TransDate) then begin
              t = 0;
              rwcnt = MatRowCnt(CLInr);
              for (i=0; i<rwcnt; i=i+1) begin
                MatRowGet(CLInr,i,CLInrw);
                if (CLInrw.TransNr==invnr) and (CLInrw.Type==2) then begin
                  t = -CLInrw.Sum;
                  tinivcurrate = MulRateToBase1(CLInr.CurncyCode,t,orgVIp.FrRate,orgVIp.ToRateB1,orgVIp.ToRateB2,orgVIp.BaseRate1,orgVIp.BaseRate2,DefaultCurRoundOff);
                  t2 = MulRateToBase1(CLInr.CurncyCode,t,CLInr.FrRate,CLInr.ToRateB1,CLInr.ToRateB2,CLInr.BaseRate1,CLInr.BaseRate2,DefaultCurRoundOff);
                  rategain = -(tinivcurrate - t2); 
                  rategain = Round(rategain,DefaultRoundMode);

                  if (RepSpec.flags[2]==1) then begin
                    if (nonblank(VEr.CurncyCode)) then begin
                      invsal = invsal + t;        
                    end else begin
                      invsal = invsal + tinivcurrate;        
                    end;
                  end else begin
                    invsal = invsal + t2 + rategain;        
                  end;

                  StartFormat(15);
                  OutString(h1,0,USetStr(1193),false);
                  OutString(h2,"DblCLInVc",CLInr.SerNr,false);
                  OutDate(310,0,CLInr.TransDate,true);
                  if (RepSpec.flags[2]==0) then begin
                    OutValBiDi(380,0,t2,M4Val,true,420);
                    OutValBiDi(425,0,rategain,M4Val,true,465);
//                    OutValBiDi(480,0,invsal,M4Val,true,520);
                  end else begin
                    OutValBiDi(380,0,t,M4Val,true,420);
//                    OutValBiDi(460,0,invsal,M4Val,true,500);
                  end;  
                  EndFormat;                                                
                end;
              end;
            end;
          end;
      end;            
    end;
  end;
L99:;  
  APWithLogg2 = res; 
  RETURN;
end;

