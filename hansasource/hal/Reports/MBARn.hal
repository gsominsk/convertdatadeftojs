external procedure AutomatedSalesOrderly(string);
external procedure GetAccStartBalance2(record ObjBalVc,Date,string,var val);
external procedure ExtractObj(string,var Integer,var string);
external procedure SplitEclass(string,var Array string);
external procedure GetAccountDescription2(string,string,var string);
external procedure FindFiscalYear(Date,var Date,var Date);
external function Boolean CheckObjType(string,string);
external procedure GetAccTurnover(string,string,Date,Date,record ObjBalVc,string,Integer,Integer,Integer,var val,var val);
external procedure HT2Per(Date,Date,var string);
external procedure LstRegDat(var string);
external procedure HTObj(string, var string);
external procedure HTAccs(string,string,Integer, var string);
external procedure ListPerTrans(record RcVc);
external procedure GetAccDCBalance(string,string,Date,record ObjBalVc,Integer,Integer,Integer,string,var val,var val,Integer);
external procedure AnalyticalGroup(record RcVc);
external procedure ClearAcums();

procedure GetMonthText(Date td,var string res)
BEGIN
  res = USetStr(2780+GetMonth(td));
  RETURN;
END;

procedure AddDebCred(val a,var val b,var val c)
BEGIN
  if (a>=0) then begin
    b = a + b;
  end else begin
    c = a + c;
  end;  
  RETURN;   
END;

procedure PrintObjectsResults(record RcVc RepSpec,string accnr)
BEGIN
  record ObjVc Objr;
  record ObjBalVc ObjBalr;
  Boolean objfnd,testf;
  Integer keys;
  val t,dv,cv,sdv,scv,edv,ecv,fdv,fcv;
  Date fwddate;
  record AccVc Accr;

  Accr.AccNumber = accnr;
  if (ReadFIrstMain(Accr,1,true)) then begin
  end;
  keys = 1;
  ObjBalr.AccNumber = accnr;
  ObjBalr.Object = RepSpec.ObjStr;
  if (nonblank(ObjBalr.Object)) then begin
    keys = 2;
  end;
  objfnd = true;
  ResetLoop(ObjBalr);
  while (LoopKey("AccObjKey",ObjBalr,keys,objfnd)) begin
    if (objfnd) then begin
      if (nonblank(RepSpec.ObjStr)) then begin
        if (ObjBalr.Object!=RepSpec.ObjStr) then begin
          objfnd = false;
        end;
      end;
      if (ObjBalr.AccNumber!=accnr) then begin
        objfnd = false;
      end;
    end;
    if (objfnd) then begin
      testf = true;
      if (blank(ObjBalr.Object)) then begin testf = false; end;
      if (Mid(ObjBalr.Object,len(ObjBalr.Object)-1,1)==":") then begin testf = false; end;
      if (Mid(ObjBalr.Object,len(ObjBalr.Object)-2,1)==":") then begin testf = false; end;
      if (nonblank(RepSpec.ObjType)) then begin
        if (CheckObjType(ObjBalr.Object,RepSpec.ObjType)==false) then begin 
          testf = false;
        end;  
      end;          
      if (testf) then begin
        t = blankval;
        GetAccDCBalance(ObjBalr.AccNumber,ObjBalr.Object,AddDay(RepSpec.sStartDate,-1),ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,0,RepSpec.CurncyCode,sdv,scv,RepSpec.flags[6]);
        GetAccDCBalance(ObjBalr.AccNumber,ObjBalr.Object,RepSpec.sEndDate,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,0,RepSpec.CurncyCode,edv,ecv,RepSpec.flags[6]);
        dv = edv - sdv;
        cv = ecv - scv;
        if (cv==0) then begin
          cv = blankval;
        end;
        if (dv==0) then begin
          dv = blankval;
        end;
        fwddate = RepSpec.sStartDate;
        if (nonblankdate(RepSpec.d2)) then begin
          if (RepSpec.d2<fwddate) then begin fwddate = RepSpec.d2; end;
        end;
        GetAccDCBalance(ObjBalr.AccNumber,ObjBalr.Object,AddDay(fwddate,-1),ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,0,RepSpec.CurncyCode,fdv,fcv,RepSpec.flags[6]);
//        GetAccDCBalance(ObjBalr.AccNumber,ObjBalr.Object,RepSpec.sEndDate,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,0,RepSpec.CurncyCode,edv,ecv,RepSpec.flags[6]);
//done above

        testf = false;
        if ((dv!=0) or (cv!=0) or (fdv!=0) or (fcv!=0)) then begin
          testf = true;
        end;
        if (testf) then begin
          Objr.Code = ObjBalr.Object;
          if (ReadFirstMain(Objr,1,true)) then begin end;
          if (Objr.TerminateFlag!=0) then begin
            if ((fdv - fcv)==0) and ((edv - ecv)==0) and (cv==0) and (dv==0) then begin testf = false; end;
          end;
        end;
        if (testf) then begin
          StartFormat(15);
           OutString(20,0,ObjBalr.Object,false);
           OutString(65,0,Objr.Comment,false);
           /*
           t = fdv - fcv;
           if (t==0) then begin
             t = blankval;
           end;
           if (fdv>0) then begin
             OutVal(190,0,fdv,M4Val,true);
           end;     
           if (fcv>0) then begin
             OutVal(8,0,fcv,M4Val,true);
           end;
           */
           t = fdv - fcv;
           if (t>0) then begin
             OutVal(190,0,t,M4DVal,true);
           end else begin
             OutVal(8,0,t,M4CVal,true);
           end;
           OutVal(3,0,dv,M4Val,true);
           OutVal(5,0,cv,M4Val,true);
/*
           if (edv>0) then begin 
             OutVal(7,0,edv,M4Val,true); 
           end;
           if (ecv>0) then begin 
             OutVal(1,0,ecv,M4Val,true);
           end;
*/
           t = edv - ecv;
           if (t>0) then begin
             OutVal(7,0,t,M4DVal,true);
           end else begin
             OutVal(1,0,t,M4CVal,true);
           end;
          EndFormat;
        end;
      end;
    end;
  end;
  RETURN;   
END;

procedure PrintQuantityBalances(record RcVc RepSpec,string accnr,vector val vaccumbervalues)
begin
  StartFormat(15);
  OutString(2,0,USetStr(5279),false);
   if (vaccumbervalues[accnr & ":" & "fwddebquant"]!=0) then begin
     OutValBiDi(190,0,vaccumbervalues[accnr & ":" & "fwddebquant"],M4Val,true,360);
   end;
   if (vaccumbervalues[accnr & ":" & "fwdcredquant"]!=0) then begin
     OutValBiDi(8,0,vaccumbervalues[accnr & ":" & "fwdcredquant"],M4Val,true,360);
   end;
   if (vaccumbervalues[accnr & ":" & "perdebquant"]!=0) then begin
     OutValBiDi(3,0,vaccumbervalues[accnr & ":" & "perdebquant"],M4Val,true,360);
   end;
   if (vaccumbervalues[accnr & ":" & "percredquant"]!=0) then begin
     OutValBiDi(5,0,vaccumbervalues[accnr & ":" & "percredquant"],M4Val,true,360);
   end;
   if (vaccumbervalues[accnr & ":" & "baldebquant"]!=0) then begin
     OutValBiDi(7,0,vaccumbervalues[accnr & ":" & "baldebquant"],M4Val,true,360);
   end;
   if (vaccumbervalues[accnr & ":" & "balcredquant"]!=0) then begin
     OutValBiDi(1,0,vaccumbervalues[accnr & ":" & "balcredquant"],M4Val,true,360);
   end;
  EndFormat;
  return;
end;

procedure PrintCurrencyBalances(record RcVc RepSpec,string accnr,vector val vaccumbervalues)
begin
  val sbdp,sbcp,pdp,pcp,adp,acp,asdp,ascp;
  Integer ctype,dtype;
  record CurncyCodeVc CCr;
  Boolean found;

  found = true;
  while (LoopMain(CCr,1,found)) begin
    if (found) then begin
      sbdp = vaccumbervalues[accnr & ":" & "fwddebcrncy:" & CCr.CurncyCode] + vaccumbervalues[accnr & ":" & "fwdcredcrncy:" & CCr.CurncyCode];
      sbcp = sbdp;
      pdp = vaccumbervalues[accnr & ":" & "perdebcrncy:" & CCr.CurncyCode];//PerDeb
      pcp = vaccumbervalues[accnr & ":" & "percredcrncy:" & CCr.CurncyCode];//PerDeb
      adp = vaccumbervalues[accnr & ":" & "baldebcrncy:" & CCr.CurncyCode];//AccDeb
      acp = vaccumbervalues[accnr & ":" & "balcredcrncy:" & CCr.CurncyCode];//AccCred
      asdp = adp + acp + sbdp;
      ascp = asdp;

      if (pdp!=0) or (pcp!=0) or (adp!=0) or (acp!=0) or (sbdp!=0) then begin      
        if (RepSpec.flags[20]!=0) then begin
          if (blank(sbdp)) then begin sbdp = 0; end;
          if (blank(sbcp)) then begin sbcp = 0; end;
          if (blank(pdp)) then begin pdp = 0; end;
          if (blank(pcp)) then begin pcp = 0; end;
          if (blank(adp)) then begin adp = 0; end;
          if (blank(acp)) then begin acp = 0; end;
          if (blank(asdp)) then begin asdp = 0; end;
          if (blank(ascp)) then begin ascp = 0; end;
          if (asdp<0) then begin asdp = 0; end;
          if (ascp>0) then begin ascp = 0; end;
          ctype = M4Val; dtype = M4Val;
        end else begin
          if (sbdp==0) then begin sbdp = blankval; end;
          if (sbcp==0) then begin sbcp = blankval; end;
          if (pdp==0) then begin pdp = blankval; end;
          if (pcp==0) then begin pcp = blankval; end;
          if (adp==0) then begin adp = blankval; end;
          if (acp==0) then begin acp = blankval; end;
          if (asdp==0) then begin asdp = blankval; end;
          if (ascp==0) then begin ascp = blankval; end;
          ctype = M4CVal; dtype = M4DVal;
        end;
  
        StartFormat(15);
        OutString(2,0,CCr.CurncyCode,false);
        if ((RepSpec.Media==mtScreen) and (RepSpec.flags[9]==1)) then begin
          OutValBiDi(190,0,sbdp,dtype,true,240);
          OutValBiDi(8,0,sbcp,ctype,true,270);
          OutValBiDi(3,0,pdp,M4Val,true,360);
          OutValBiDi(5,0,pcp,M4NegVal,true,430);
          if (asdp>0 or RepSpec.flags[20]!=0) then begin OutValBiDi(7,0,asdp,dtype,true,490); end;
          if (HasLocalization("HRV,SVN,SRB")) then begin
            if (ascp<0 or RepSpec.flags[20]!=0) then begin OutValBiDi(445,0,ascp,ctype,true,480); end;
            if (accnr==USetStr(3478) or Left(accnr,len(USetStr(3248)))==USetStr(3248) or blank(accnr)) then begin
              OutValBiDi(1,0,asdp+ascp,M4Val,true,520);
            end;
          end else begin
            if (ascp<0 or RepSpec.flags[20]!=0) then begin OutValBiDi(1,0,ascp,ctype,true,520); end;
          end;
        end else begin
          OutVal(450 - (47*6),0,sbdp,dtype,true);
          OutVal(8,0,sbcp,ctype,true);
          OutVal(3,0,pdp,M4Val,true);
          OutVal(4,0,pcp,M4NegVal,true);
          OutVal(5,0,adp,M4Val,true);
          OutVal(6,0,acp,M4NegVal,true);
          OutVal(7,0,asdp,dtype,true);
          OutVal(1,0,ascp,ctype,true);
          if (HasLocalization("HRV,SVN,SRB")) then begin
            if (accnr==USetStr(3478) or Left(accnr,len(USetStr(3248)))==USetStr(3248) or blank(accnr)) then begin
              OutValBiDi(1,0,asdp+ascp,M4Val,true,520);
            end;
          end;
        end;
        EndFormat;
      end;
    end;
  end;
  return;
end;

procedure MBALine(record RcVc RepSpec,string accnr,string comment,val asbdp,val asbcp,val apdp,val apcp,
                  val aadp,val aacp,val aasdp,val aascp,Integer lmod,string dblstr,vector val vaccumbervalues)
BEGIN
  val sbal;
  Integer ctype,dtype;
  val sbdp,sbcp,pdp,pcp,adp,acp,asdp,ascp;

  sbdp = asbdp;
  sbcp = asbcp;
  pdp = apdp;
  pcp = apcp;
  adp = aadp;
  acp = aacp;
  asdp = aasdp;
  ascp = aascp;

  if (RepSpec.flags[20]!=0) then begin
    if (blank(sbdp)) then begin sbdp = 0; end;
    if (blank(sbcp)) then begin sbcp = 0; end;
    if (blank(pdp)) then begin pdp = 0; end;
    if (blank(pcp)) then begin pcp = 0; end;
    if (blank(adp)) then begin adp = 0; end;
    if (blank(acp)) then begin acp = 0; end;
    if (blank(asdp)) then begin asdp = 0; end;
    if (blank(ascp)) then begin ascp = 0; end;
    if (asdp<0) then begin asdp = 0; end;
    if (ascp>0) then begin ascp = 0; end;
    ctype = M4Val; dtype = M4Val;
  end else begin
    if (sbdp==0) then begin sbdp = blankval; end;
    if (sbcp==0) then begin sbcp = blankval; end;
    if (pdp==0) then begin pdp = blankval; end;
    if (pcp==0) then begin pcp = blankval; end;
    if (adp==0) then begin adp = blankval; end;
    if (acp==0) then begin acp = blankval; end;
    if (asdp==0) then begin asdp = blankval; end;
    if (ascp==0) then begin ascp = blankval; end;
    ctype = M4CVal; dtype = M4DVal;
  end;
  sbal = sbdp + sbcp;
  if (lmod==1) then begin
    StartFormat(15);
    OutString(0,dblstr,accnr,false);
    OutString(2,0,comment,false);
    if ((RepSpec.Media==mtScreen) and (RepSpec.flags[9]==1)) then begin
      OutValBiDi(190,0,sbdp,dtype,true,240);
      OutValBiDi(8,0,sbcp,ctype,true,270);
      OutValBiDi(3,0,pdp,M4Val,true,360);
      OutValBiDi(5,0,pcp,M4NegVal,true,430);
      if (asdp>0 or RepSpec.flags[20]!=0) then begin OutValBiDi(7,0,asdp,dtype,true,490); end;
//      if ((sbdp>0) and (sbcp<0)) then begin OutVal(8,0,sbcp,ctype,true); end;//OutVal(8 is twice
      if (HasLocalization("HRV,SVN,SRB")) then begin
        if (ascp<0 or RepSpec.flags[20]!=0) then begin OutValBiDi(445,0,ascp,ctype,true,480); end;
        if (accnr==USetStr(3478) or Left(accnr,len(USetStr(3248)))==USetStr(3248) or blank(accnr)) then begin
          OutValBiDi(1,0,asdp+ascp,M4Val,true,520);
        end;
      end else begin
        if (ascp<0 or RepSpec.flags[20]!=0) then begin OutValBiDi(1,0,ascp,ctype,true,520); end;
      end;
    end else begin
      OutVal(450 - (47*6),0,sbdp,dtype,true);
      OutVal(8,0,sbcp,ctype,true);
      OutVal(3,0,pdp,M4Val,true);
      OutVal(4,0,pcp,M4NegVal,true);
      OutVal(5,0,adp,M4Val,true);
      OutVal(6,0,acp,M4NegVal,true);
      OutVal(7,0,asdp,dtype,true);
      OutVal(1,0,ascp,ctype,true);
      if (HasLocalization("HRV,SVN,SRB")) then begin
        if (accnr==USetStr(3478) or Left(accnr,len(USetStr(3248)))==USetStr(3248) or blank(accnr)) then begin
          OutValBiDi(1,0,asdp+ascp,M4Val,true,520);
        end;
      end;
      if (nonblank(comment)) then begin
        AddToAccumulator(0,sbdp);      
        AddToAccumulator(1,pdp);      
        AddToAccumulator(2,-pcp);

        AddToAccumulator(3,sbdp);      
        AddToAccumulator(4,pdp);      
        AddToAccumulator(5,-pcp);  
      end;
    end;
    EndFormat;
    
    if (RepSpec.flags[21]!=0) then begin
      PrintQuantityBalances(RepSpec,accnr,vaccumbervalues);      
    end;
    if (RepSpec.flags[22]!=0) then begin
      PrintCurrencyBalances(RepSpec,accnr,vaccumbervalues);      
    end;
    
    if (RepSpec.flags[15]!=0) then begin
      PrintObjectsResults(RepSpec,accnr);
    end;
  end else begin
//    AddM4Val(sbdp,sbcp,&sbal);
//    AddARSMBARow(mh,accnr,comment,sbdp,sbcp,pdp,pcp,adp,acp,asdp,ascp);
  
  end;  
  StartFooter(45,true);
   Black_Divider(0,1);
   OutString(50,0,USetStr(2412),false)
   OutAccumulator(240,6,M4Val,true);
   OutAccumulator(360,7,M4Val,true);
   OutAccumulator(1,8,M4Val,true);
   OutString(50,0,USetStr(2413),false)
   OutAccumulator(240,0,M4Val,true);
   OutAccumulator(360,1,M4Val,true);
   OutAccumulator(1,2,M4Val,true);
   ClearAccumulator(0);
   ClearAccumulator(1);
   ClearAccumulator(2);
   OutString(50,0,USetStr(2414),false)
   OutAccumulator(240,3,M4Val,true);
   OutAccumulator(360,4,M4Val,true);
   OutAccumulator(1,5,M4Val,true);
   CopyAccumulator(6,3);
   CopyAccumulator(7,4);
   CopyAccumulator(8,5);
  EndFooter;
  RETURN;
END;

procedure PrintMBAHeader1(record RcVc RepSpec)
BEGIN
  string 255 tstr;
  record BaseCurBlock BC;  
  BlockLoad(BC);
  
  if (RepSpec.flags[10]==0) then begin    
    StartFormat(15);
    OutString(0,0,USetStr(3462),false);
    if (RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel) then begin
      OutString(220,0,"",true);
      OutString(220,0,"",true);
    end;
    if ((RepSpec.Media==mtScreen) and (RepSpec.flags[9]==1)) then begin
      OutStringAdjustBiDi(220,0,USetStr(3468),true,M4Val,270);
      OutStringAdjustBiDi(3,0,USetStr(3463),true,M4Val,360);
      OutStringAdjustBiDi(5,0,USetStr(3464),true,M4Val,430);
    end else begin
      OutString(450 - (47*6),0,USetStr(3468),true);
      OutString(3,0,USetStr(3463),true);
      OutString(4,0,USetStr(3464),true);
      OutString(5,0,USetStr(3465),true);
      OutString(6,0,USetStr(3466),true);
    end;
    OutStringAdjustBiDi(1,0,USetStr(3467),true,M4Val,525);
    EndFormat;
  end else begin
    if ((RepSpec.Media==mtScreen) and (RepSpec.flags[9]==1)) then begin
      StartFormat(15);
      OutString(0,0,USetStr(3462),false);
      OutString(200,0,USetStr(3468),false);
      OutString(320,0,USetStr(3474),false);
      OutString(440,0,USetStr(3467),false);
      EndFormat;
      StartFormat(15);
      OutString(0,0,USetStr(3470),false);
      OutString(2,0,USetStr(3471),false);
      OutString(190,0,USetStr(3472),true);
      OutString(8,0,USetStr(3473),true);
      OutString(3,0,USetStr(3472),true);
      OutString(5,0,USetStr(3473),true);
      OutString(7,0,USetStr(3472),true);
      OutString(1,0,USetStr(3473),true);
      EndFormat;
    end else begin
      StartFormat(15);
      OutString(0,0,USetStr(3462),false);
      OutString(160,0,USetStr(3468),false);
      OutString(260,0,USetStr(3474),false);
      OutString(350,0,USetStr(3475),false);
      OutString(440,0,USetStr(3467),false);
      EndFormat;
      StartFormat(15);
      OutString(0,0,USetStr(3470),false);
      OutString(2,0,USetStr(3471),false);
      OutString(450 - (47*6),0,USetStr(3472),true);
      OutString(8,0,USetStr(3473),true);
      OutString(3,0,USetStr(3472),true);
      OutString(4,0,USetStr(3473),true);
      OutString(5,0,USetStr(3472),true);
      OutString(6,0,USetStr(3473),true);
      OutString(7,0,USetStr(3472),true);
      OutString(1,0,USetStr(3473),true);
      EndFormat;
    end;
  end;  

  if (RepSpec.flags[11]==1) then begin
    tstr = USetStr(2513);
    if (repspec.basecurncy==0) then begin
      tstr = tstr & BC.BaseCur1;
    end;
    if (repspec.basecurncy==1) then begin
      tstr = tstr & " " & BC.BaseCur2;
    end; 
   
    StartFormat(15);
    OutString(0,0,tstr,false);
    EndFormat;
  end;
 
  Gray_Divider(0,1);
  RETURN;
END;

procedure PrintMBAHeader(record RcVc RepSpec)
BEGIN
  string 255 tstr,t2;
  Integer rw;

  record BaseCurBlock BC;
  
  BlockLoad(BC);
   
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  LstRegDat(tstr);
  Header(rw,tstr,0);
  HTAccs(RepSpec.FirstAcc,RepSpec.LastAcc,RepSpec.UsedOnly,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  
  tstr = USetStr(2513);
  if (RepSpec.basecurncy==0) then begin
    tstr = tstr & BC.BaseCur1;
  end;
  if (RepSpec.basecurncy==1) then begin
    tstr = tstr & " " & BC.BaseCur2;
  end;
  Header(rw,tstr,0);
  if (RepSpec.flags[22]!=0) then begin
    tstr = USetStr(2515);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.ObjStr)) then begin
    HTObj(RepSpec.ObjStr,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblankdate(RepSpec.d1)) then begin
    tstr = USetStr(3469);
    t2 = RepSpec.d1;
    tstr = tstr & " ";
    tstr = tstr & t2;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblankdate(RepSpec.d2)) then begin
    tstr = USetStr(3470);
    t2 = RepSpec.d2;
    tstr = tstr & " ";
    tstr = tstr & t2;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (RepSpec.SimVerf==1) then begin
    tstr = USetStr(3019);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (RepSpec.flags[1]==1) then begin
    tstr = USetStr(3021);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (RepSpec.flags[4]==1) then begin
    tstr = USetStr(5212);
    Header(rw,tstr,1);
    rw = rw + 1;
  end; 
  if ((RepSpec.Media==mtScreen) and  (RepSpec.flags[9]==1)) then begin
//    SetRepCol(9,220);9 doesn't work
    if (HasLocalization("HRV,SVN,SRB")) then begin
      SetRepCol(8,235);
      SetRepCol(3,285);
      SetRepCol(5,340);
      SetRepCol(4,450 - (47*3));
      SetRepCol(6,403);
      SetRepCol(7,400);  
    end else begin
      SetRepCol(8,240);
      SetRepCol(3,290);
      SetRepCol(5,360);
      SetRepCol(4,450 - (47*3));
      SetRepCol(6,403);
      SetRepCol(7,440);  
    end;
  end else begin
//    SetRepCol(9,450 - (47*6));9 doesn't work
    SetRepCol(8,450 - (47*5));
    SetRepCol(3,450 - (47*4));
    SetRepCol(5,450 - (47*2));
    SetRepCol(4,450 - (47*3));
    SetRepCol(6,403);
    SetRepCol(7,450);  
  end;
  RETURN;
END;

procedure GetAccObjTypeDCBalance(string accstr,string objtype,Date bdp,
                                 Integer simf,Integer basecurncy,Integer crncy,string crncycode,var val dvp,var val cvp,Integer IncDaughter)
BEGIN                                 
  record ObjBalVc ObjBalr;
  record ObjVc Objr;
  Boolean TrHs;
  val dv,cv;

  dvp = 0;
  cvp = 0;
  TrHs = true;
  Objr.OTCode = objtype;
  while (LoopKey("OTCode",Objr,1,TrHs)) begin
    if (Objr.OTCode!=objtype) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      ObjBalr.AccNumber = accstr;
      ObjBalr.Object = Objr.Code;
      if (ReadFirstMain(ObjBalr,2,true)) then begin
        GetAccDCBalance(accstr,Objr.Code,bdp,ObjBalr,simf,basecurncy,0,crncycode,dv,cv,IncDaughter);
        dvp = dvp + dv;
        cvp = cvp + cv;
      end;
    end;
  end;
  RETURN;
END;


procedure SplitAccgrouplen(string accgrs,var Array string resaccgr)
begin
  Integer pos;
  string 255 accgr;
  
  pos = 0;
  ExtractObj(accgrs,pos,accgr);
  while (nonblank(accgr)) begin
    resaccgr[resaccgr.length] = accgr;
    ExtractObj(accgrs,pos,accgr);
  end;  
  return;
end;

procedure CalculateQuantityBalances(record RcVc RepSpec,Date fwddate,record AccVc Accr,record ObjBalVc ObjBalr,var vector val vaccumbervalues)
begin
  Date sbd;
  val cv,dv;

  sbd = AddDay(fwddate,-1);
  GetAccStartBalance2(ObjBalr,sbd,"debquant",dv);    
  GetAccStartBalance2(ObjBalr,sbd,"credquant",cv);    
  vaccumbervalues[Accr.AccNumber & ":" & "fwddebquant"] = vaccumbervalues[Accr.AccNumber & ":" & "fwddebquant"] + dv; //FwdDebQty
  vaccumbervalues[Accr.AccNumber & ":" & "fwdcredquant"] = vaccumbervalues[Accr.AccNumber & ":" & "fwdcredquant"] + cv; //FwdCredQty
  
  vaccumbervalues[Accr.AccNumber & ":" & "perdebquant"] = vaccumbervalues[Accr.AccNumber & ":" & "perdebquant"] + GetTurnover(ObjBalr,"debquant",RepSpec.sStartDate,RepSpec.sEndDate); //PerDebQty
  vaccumbervalues[Accr.AccNumber & ":" & "percredquant"] = vaccumbervalues[Accr.AccNumber & ":" & "percredquant"] + GetTurnover(ObjBalr,"credquant",RepSpec.sStartDate,RepSpec.sEndDate); //PerCredQty

  GetAccStartBalance2(ObjBalr,RepSpec.sEndDate,"debquant",dv);    
  GetAccStartBalance2(ObjBalr,RepSpec.sEndDate,"credquant",cv);    
  vaccumbervalues[Accr.AccNumber & ":" & "baldebquant"] = vaccumbervalues[Accr.AccNumber & ":" & "baldebquant"] + dv; //BalDebQty
  vaccumbervalues[Accr.AccNumber & ":" & "balcredquant"] = vaccumbervalues[Accr.AccNumber & ":" & "balcredquant"] + cv; //BalCredQty
  return;
end;

procedure CalculateCurrencyBalances(record RcVc RepSpec,Date fwddate,record AccVc Accr,record ObjBalVc ObjBalr,var vector val vaccumbervalues)
begin
  Date sbd;
  val cv,dv;
  record CurncyCodeVc CCr;
  Boolean found;

  found = true;
  while (LoopMain(CCr,1,found)) begin
    if (found) then begin
      sbd = AddDay(fwddate,-1);
      GetAccDCBalance(Accr.AccNumber,RepSpec.ObjStr,sbd,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,0,CCr.CurncyCode,dv,cv,RepSpec.flags[6]);
      vaccumbervalues[Accr.AccNumber & ":" & "fwddebcrncy:" & CCr.CurncyCode] = vaccumbervalues[Accr.AccNumber & ":" & "fwddebcrncy:" & CCr.CurncyCode] + dv; //FwdDebCrncy
      vaccumbervalues[Accr.AccNumber & ":" & "fwdcredcrncy:" & CCr.CurncyCode] = vaccumbervalues[Accr.AccNumber & ":" & "fwdcredcrncy:" & CCr.CurncyCode] - cv; //FwdCredCrncy

      sbd = AddDay(RepSpec.sStartDate,-1);
      GetAccDCBalance(Accr.AccNumber,RepSpec.ObjStr,sbd,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,0,CCr.CurncyCode,dv,cv,RepSpec.flags[6]);
      vaccumbervalues[Accr.AccNumber & ":" & "perdebcrncy:" & CCr.CurncyCode] = vaccumbervalues[Accr.AccNumber & ":" & "perdebcrncy:" & CCr.CurncyCode] + dv; //PerDebCrncy
      vaccumbervalues[Accr.AccNumber & ":" & "percredcrncy:" & CCr.CurncyCode] = vaccumbervalues[Accr.AccNumber & ":" & "percredcrncy:" & CCr.CurncyCode] - cv; //PerCredCrncy

      GetAccDCBalance(Accr.AccNumber,RepSpec.ObjStr,RepSpec.sEndDate,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,0,CCr.CurncyCode,dv,cv,RepSpec.flags[6]);  
      vaccumbervalues[Accr.AccNumber & ":" & "baldebcrncy:" & CCr.CurncyCode] = vaccumbervalues[Accr.AccNumber & ":" & "baldebcrncy:" & CCr.CurncyCode] + dv; //BalDebCrncy
      vaccumbervalues[Accr.AccNumber & ":" & "balcredcrncy:" & CCr.CurncyCode] = vaccumbervalues[Accr.AccNumber & ":" & "balcredcrncy:" & CCr.CurncyCode] - cv; //BalCredCrncy


      vaccumbervalues[Accr.AccNumber & ":" & "perdebcrncy:" & CCr.CurncyCode] = vaccumbervalues[Accr.AccNumber & ":" & "baldebcrncy:" & CCr.CurncyCode] - vaccumbervalues[Accr.AccNumber & ":" & "perdebcrncy:" & CCr.CurncyCode];
      vaccumbervalues[Accr.AccNumber & ":" & "percredcrncy:" & CCr.CurncyCode] = vaccumbervalues[Accr.AccNumber & ":" & "balcredcrncy:" & CCr.CurncyCode] - vaccumbervalues[Accr.AccNumber & ":" & "percredcrncy:" & CCr.CurncyCode];

      vaccumbervalues[Accr.AccNumber & ":" & "baldebcrncy:" & CCr.CurncyCode] = vaccumbervalues[Accr.AccNumber & ":" & "baldebcrncy:" & CCr.CurncyCode] - vaccumbervalues[Accr.AccNumber & ":" & "fwddebcrncy:" & CCr.CurncyCode];
      vaccumbervalues[Accr.AccNumber & ":" & "balcredcrncy:" & CCr.CurncyCode] = vaccumbervalues[Accr.AccNumber & ":" & "balcredcrncy:" & CCr.CurncyCode] - vaccumbervalues[Accr.AccNumber & ":" & "fwdcredcrncy:" & "USD"];


      vaccumbervalues[":" & "fwddebcrncy:" & CCr.CurncyCode] = vaccumbervalues[":" & "fwddebcrncy:" & CCr.CurncyCode] + vaccumbervalues[Accr.AccNumber & ":" & "fwddebcrncy:" & CCr.CurncyCode]; //FwdDebCrncy
      vaccumbervalues[":" & "fwdcredcrncy:" & CCr.CurncyCode] = vaccumbervalues[":" & "fwdcredcrncy:" & CCr.CurncyCode] + vaccumbervalues[Accr.AccNumber & ":" & "fwdcredcrncy:" & CCr.CurncyCode]; //FwdDebCrncy
      
      vaccumbervalues[":" & "perdebcrncy:" & CCr.CurncyCode] = vaccumbervalues[":" & "perdebcrncy:" & CCr.CurncyCode] + vaccumbervalues[Accr.AccNumber & ":" & "perdebcrncy:" & CCr.CurncyCode]; //PerDebCrncy
      vaccumbervalues[":" & "percredcrncy:" & CCr.CurncyCode] = vaccumbervalues[":" & "percredcrncy:" & CCr.CurncyCode] + vaccumbervalues[Accr.AccNumber & ":" & "percredcrncy:" & CCr.CurncyCode]; //PerCredCrncy

      vaccumbervalues[":" & "baldebcrncy:" & CCr.CurncyCode] = vaccumbervalues[":" & "baldebcrncy:" & CCr.CurncyCode] + vaccumbervalues[Accr.AccNumber & ":" & "baldebcrncy:" & CCr.CurncyCode]; //BalDebCrncy
      vaccumbervalues[":" & "balcredcrncy:" & CCr.CurncyCode] = vaccumbervalues[":" & "balcredcrncy:" & CCr.CurncyCode] + vaccumbervalues[Accr.AccNumber & ":" & "balcredcrncy:" & CCr.CurncyCode]; //BalCredCrncy
    end;
  end;
  return;
end;

procedure MBACode(var record RcVc RepSpec,Integer lmod)
begin
  Integer i,ai;
  record AccVc Accr;
  record ObjBalVc ObjBalr;
  record ObjBalVc exclObjBalr;
  record TRVc TRr;
  record SMVc SMr;
  row SMVc SMrw;
  LongInt mbarws;
  val as,fws,dv,cv;
  val sfwd,sfwc,spd,spc,sad,sac,sedb,secb;
  val tfwd,tfwc,tpd,tpc,tad,tac,tedb,tecb;
  vector val vagfwd,vagfwc,vagpd,vagpc,vagad,vagac,vagedb,vagecb;
  val v1,v2;
  Boolean first;
  string 1 lastgroup;
  string 10 lastsub,newsub,lastAccNumber;
  string 255 tstr,gstr,blankstr;
  Date fwddate,sbd;
  Date curYearstartdate,curYearenddate;
//  record ARSVc ARSr;
/*lmod : report = 1, document = 0*/
  string 20 sDate;
  string 255 accname,accgr;
  Array string 20 accgrouplen;
  vector val vaccumbervalues;
  
  first = true;
  lastgroup = " ";
  gstr = " '";
  lastsub = "";
  SplitAccgrouplen(RepSpec.f4,accgrouplen);
  RepSpec.FirstAcc = FirstInRange(RepSpec.AccStr,10);
  RepSpec.LastAcc = LastInRange(RepSpec.AccStr,10);
  mbarws = CountRecords("AccVc");
  fwddate = RepSpec.sStartDate;
  if (nonblankdate(RepSpec.d2)) then begin
    if (RepSpec.d2<fwddate) then begin fwddate = RepSpec.d2; end;
  end;
  FindFiscalYear(fwddate,curYearstartdate,curYearenddate);  
  ClearAcums;    
  if (lmod==1) then begin  
    if (RepSpec.flags[11]==1) then begin
      if (HasLocalization("PRT")) then begin
        StartReportNoHeaderJob(USetStr(3461));
        Header(1,"",0);
        Header(2,"",0);
        Header(3,"",0);
        Header(4,"",0);
        EndHeader;
      end else begin
        StartReportNoHeaderJob(USetStr(3461));
      end;
      if ((RepSpec.Media==6) and  (RepSpec.flags[9]==1)) then begin
        SetRepCol(8,250);
        SetRepCol(3,310);
        SetRepCol(5,380);
      end else begin
        SetRepCol(8,450 - (47*5));
        SetRepCol(3,450 - (47*4));
        SetRepCol(5,450 - (47*2));
      end;
      SetRepCol(4,450 - (47*3));
      SetRepCol(6,403);
      SetRepCol(7,450);      
    end else begin
      StartReportJob(USetStr(3461));
      PrintMBAHeader(RepSpec);
      EndHeader;
    end;
    SetRepCol(2,50);
  end;
  if (HasLocalization("PRT")) then begin
    GetMonthText(RepSpec.sStartDate,sDate);
    StartFormat(20);
    OutString(480,0,"" & sDate & " " & GetYear(RepSpec.sStartDate),true);
    EndFormat;
  end;
  if (mbarws==0) then begin goto L99; end;
  if (RepSpec.ArtMode>0) then begin
    AnalyticalGroup(RepSpec);
  end else begin

  Accr.AccNumber = "";
  RecordNew(SMr);
  for (i=0; i<mbarws; i=i+1) begin
    ClearRow(SMr,SMrw,i);
    if (LoopMain(Accr,1,true)) then begin end;//m4_ReadLogicalMain(AccVc,i+1,Accr);
    if (nonblank(RepSpec.FirstAcc)) then begin
      if (Accr.AccNumber<RepSpec.FirstAcc) then begin goto L22; end;
    end;  
    if (nonblank(RepSpec.LastAcc)) then begin
      if (Accr.AccNumber>RepSpec.LastAcc) then begin goto L22; end;
    end;  
    if (nonblank(RepSpec.TransStr)) then begin
      if (Left(Accr.AccNumber,len(RepSpec.TransStr))!=RepSpec.TransStr and Accr.AccNumber!=RepSpec.TransStr) then begin goto L22; end;
    end;
    SMrw.AccNumber = Accr.AccNumber;
    
    ObjBalr.AccNumber = Accr.AccNumber;
    ObjBalr.Object = RepSpec.ObjStr;
    if (ReadFirstMain(ObjBalr,2,true)) then begin
      if ((blank(RepSpec.ObjType)) or (nonblank(RepSpec.ObjStr))) then begin
        sbd = AddDay(fwddate,-1);
        GetAccDCBalance(Accr.AccNumber,RepSpec.ObjStr,sbd,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,0,RepSpec.CurncyCode,dv,cv,RepSpec.flags[6]);
        SMrw.DebVal = SMrw.DebVal + dv;//StartDeb
        SMrw.CredVal = SMrw.CredVal - cv; //StartCred
        sbd = AddDay(RepSpec.sStartDate,-1);
        GetAccDCBalance(Accr.AccNumber,RepSpec.ObjStr,sbd,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,0,RepSpec.CurncyCode,dv,cv,RepSpec.flags[6]);
        SMrw.DebVal2 = SMrw.DebVal2 + dv; //PerDeb
        SMrw.CredVal2 = SMrw.CredVal2 - cv; //PerCred

        GetAccDCBalance(Accr.AccNumber,RepSpec.ObjStr,RepSpec.sEndDate,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,0,RepSpec.CurncyCode,dv,cv,RepSpec.flags[6]);
        SMrw.CurDebVal = SMrw.CurDebVal + dv; //AccDeb
        SMrw.CurCredVal = SMrw.CurCredVal - cv; //AccCred
        if (RepSpec.flags[21]!=0) then begin
          CalculateQuantityBalances(RepSpec,fwddate,Accr,ObjBalr,vaccumbervalues);
        end;
        if (RepSpec.flags[22]!=0) then begin
          CalculateCurrencyBalances(RepSpec,fwddate,Accr,ObjBalr,vaccumbervalues);
        end;
      end else begin
        sbd = AddDay(fwddate,-1);
        GetAccObjTypeDCBalance(Accr.AccNumber,RepSpec.ObjType,sbd,RepSpec.SimVerf,RepSpec.basecurncy,0,RepSpec.CurncyCode,dv,cv,RepSpec.flags[6]);
        SMrw.DebVal = SMrw.DebVal + dv;//StartDeb
        SMrw.CredVal = SMrw.CredVal - cv; //StartCred

        sbd = AddDay(RepSpec.sStartDate,-1);
        GetAccObjTypeDCBalance(Accr.AccNumber,RepSpec.ObjType,sbd,RepSpec.SimVerf,RepSpec.basecurncy,0,RepSpec.CurncyCode,dv,cv,RepSpec.flags[6]);
        SMrw.DebVal2 = SMrw.DebVal2 + dv; //PerDeb
        SMrw.CredVal2 = SMrw.CredVal2 - cv; //PerCred

        GetAccObjTypeDCBalance(Accr.AccNumber,RepSpec.ObjType,RepSpec.sEndDate,RepSpec.SimVerf,RepSpec.basecurncy,0,RepSpec.CurncyCode,dv,cv,RepSpec.flags[6]);
        SMrw.CurDebVal = SMrw.CurDebVal + dv; //AccDeb
        SMrw.CurCredVal = SMrw.CurCredVal - cv; //AccCred
      end;      
      if (nonblank(RepSpec.f3)) then begin
        exclObjBalr.AccNumber = Accr.AccNumber;
        exclObjBalr.Object = RepSpec.f3;
        if (ReadFirstMain(exclObjBalr,2,true)) then begin
          sbd = AddDay(fwddate,-1);
          GetAccDCBalance(Accr.AccNumber,RepSpec.f3,sbd,exclObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,0,RepSpec.CurncyCode,dv,cv,RepSpec.flags[6]);
          SMrw.DebVal = SMrw.DebVal - dv;//StartDeb
          SMrw.CredVal = SMrw.CredVal + cv; //StartCred

          sbd = AddDay(RepSpec.sStartDate,-1);
          GetAccDCBalance(Accr.AccNumber,RepSpec.f3,sbd,exclObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,0,RepSpec.CurncyCode,dv,cv,RepSpec.flags[6]);
          SMrw.DebVal2 = SMrw.DebVal2 - dv; //PerDeb

          SMrw.CredVal2 = SMrw.CredVal2 + cv; //PerCred

          GetAccDCBalance(Accr.AccNumber,RepSpec.f3,RepSpec.sEndDate,exclObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,0,RepSpec.CurncyCode,dv,cv,RepSpec.flags[6]);
          SMrw.CurDebVal = SMrw.CurDebVal - dv; //AccDeb
          SMrw.CurCredVal = SMrw.CurCredVal + cv; //AccCred
        end;
      end;


      SMrw.DebVal2 = SMrw.CurDebVal - SMrw.DebVal2;
      SMrw.CredVal2 = SMrw.CurCredVal - SMrw.CredVal2;

      SMrw.CurDebVal = SMrw.CurDebVal - SMrw.DebVal;
      SMrw.CurCredVal = SMrw.CurCredVal - SMrw.CredVal;

      if ((Accr.AccType==3) or (Accr.AccType==4)) then begin
        if (fwddate==curYearstartdate) then begin
          SMrw.DebVal = 0;
          SMrw.CredVal = 0;
        end;
      end; 
    end;
L22:;
    MatRowPut(SMr,i,SMrw);

    if (nonblank(RepSpec.FirstAcc)) then begin
      if (Accr.AccNumber<RepSpec.FirstAcc) then begin goto L23; end;
    end;  
    if (nonblank(RepSpec.LastAcc)) then begin
      if (Accr.AccNumber>RepSpec.LastAcc) then begin goto L23; end;
    end;  

    for (ai=0;ai<accgrouplen.length;ai=ai+1) begin
      accgr = Left(SMrw.AccNumber,StringToInt(accgrouplen[ai]));
      
      as = SMrw.CurDebVal + SMrw.CurCredVal;//AccDeb + AccCred
      fws = SMrw.DebVal + SMrw.CredVal;//StartDeb + StartCred
      as = as + fws;

      vagpd[accgr] = vagpd[accgr] + SMrw.DebVal2;//PerDeb
      vagpc[accgr] = vagpc[accgr] + SMrw.CredVal2;//PerCred
      vagad[accgr] = vagad[accgr] + SMrw.CurDebVal;//AccDeb
      vagac[accgr] = vagac[accgr] + SMrw.CurCredVal;//AccCred

      v1 = blankval; v2 = blankval;
      AddDebCred(as,v1,v2);
      vagedb[accgr] = vagedb[accgr] + v1;
      vagecb[accgr] = vagecb[accgr] + v2;
      v1 = blankval; v2 = blankval;
      AddDebCred(fws,v1,v2);
      vagfwd[accgr] = vagfwd[accgr] + v1;
      vagfwc[accgr] = vagfwc[accgr] + v2;
/*
StartFormat(15);
  OutString(0,0,accgr,false);
  OutString(50,0,SMrw.AccNumber,false);
//  OutString(120,0,SMrw.DebVal,false);
  OutString(200,0,v2,false);
  OutString(280,0,vagecb[accgr],false);
  OutString(360,0,as,false);
EndFormat;
*/
    end;


L23:;

  end;  
    
  if (lmod==1) then begin
    PrintMBAHeader1(RepSpec);
  end;  

  blankstr = "";
  Accr.AccNumber = RepSpec.FirstAcc;
  ResetLoop(Accr);  
  as = 0;
//  mbarws = MatRowCnt(SMr); //??
  for (i=0; i<mbarws; i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    if (blank(SMrw.AccNumber)) then begin goto L44; end;
    Accr.AccNumber = SMrw.AccNumber;
    if (ReadFirstMain(Accr,1,true)==false) then begin goto L44; end;

    if (nonblank(RepSpec.TransStr)) then begin
      if (Left(Accr.AccNumber,len(RepSpec.TransStr))!=RepSpec.TransStr and Accr.AccNumber!=RepSpec.TransStr) then begin goto L44; end;
    end;
//    if (LoopMain(Accr,1,true)==false) then begin goto L44; end;

    if ((SMrw.DebVal==0) and (SMrw.CredVal==0) and
        (SMrw.DebVal2==0) and (SMrw.CredVal2==0) and
        (SMrw.CurDebVal==0) and (SMrw.CurCredVal==0)) then begin goto L44; end;
    newsub = Left(SMrw.AccNumber,StringToInt(RepSpec.f4));
    if (first==false) then begin
      for (ai=0;ai<accgrouplen.length;ai=ai+1) begin
        newsub = Left(SMrw.AccNumber,StringToInt(accgrouplen[ai]));
        lastsub = Left(lastAccNumber,StringToInt(accgrouplen[ai]));
        if (newsub!=lastsub) then begin
          if (vagfwd[lastsub]!=0 or vagfwc[lastsub]!=0 or vagpd[lastsub]!=0 or vagpc[lastsub]!=0 or vagad[lastsub]!=0 or vagac[lastsub]!=0 or vagedb[lastsub]!=0 or vagecb[lastsub]!=0) then begin  
            if (RepSpec.flags[8]<>0) then begin
              if (RepSpec.flags[1]==0) then begin
                if (lmod==1) then begin
                  Gray_Divider(2,1);
                end;  
              end;      
/*
StartFormat(15);
  OutString(0,0,"m." & lastsub,false);
  OutString(50,0,SMrw.AccNumber,false);
  OutString(200,0,vagpd[lastsub],false);
  OutString(360,0,vagad[lastsub],false);
EndFormat;
*/
              MBALine(RepSpec,USetStr(3478),lastsub,vagfwd[lastsub],vagfwc[lastsub],vagpd[lastsub],vagpc[lastsub],vagad[lastsub],vagac[lastsub],vagedb[lastsub],vagecb[lastsub],lmod,"DblNL",vaccumbervalues);
              if (RepSpec.flags[1]==0) then begin
                if (lmod==1) then begin
                  StartFormat(10);
                  EndFormat;
                end;  
              end;
            end;
          end;
        end;
      end;
      if (CharacterMatch(lastgroup,Accr.AccNumber,1)==false) then begin
        if ((RepSpec.flags[10]==0) or (RepSpec.flags[0]==1))  then begin        
          if (RepSpec.flags[1]==0) then begin
            if (lmod==1) then begin
              Gray_Divider(2,1);
            end;  
          end;    
          tstr = USetStr(3248);
          tstr = tstr & gstr;
          tstr = tstr & lastgroup;
          tstr = tstr & "'";
          if (tpd!=0) or (tpc!=0) or (tad!=0) or (tac!=0) or (tfwd!=0) or (tfwc!=0) then begin
            MBALine(RepSpec,tstr,blankstr,tfwd,tfwc,tpd,tpc,tad,tac,tedb,tecb,lmod,"",vaccumbervalues);
          end;
        end;  
        if (RepSpec.flags[1]==0) then begin
          if (lmod==1) then begin
            StartFormat(10);
            EndFormat;
          end;  
        end;
        tfwd = 0;
        tfwc = 0;
        tpd = 0;
        tpc = 0;
        tad = 0;
        tac = 0;
        tedb = 0;
        tecb = 0;
      end;
    end;
    first = false;
    lastsub = newsub;
    lastAccNumber = SMrw.AccNumber;
    lastgroup = Left(Accr.AccNumber,1);

    as = SMrw.CurDebVal + SMrw.CurCredVal;//AccDeb + AccCred
    fws = SMrw.DebVal + SMrw.CredVal;//StartDeb + StartCred
    as = as + fws;

    spd = spd + SMrw.DebVal2;//PerDeb
    spc = spc + SMrw.CredVal2;//PerDeb
    sad = sad + SMrw.CurDebVal;//AccDeb
    sac = sac + SMrw.CurCredVal;//AccCred
    AddDebCred(as,sedb,secb);
    AddDebCred(fws,sfwd,sfwc);

    tpd = tpd + SMrw.DebVal2;//PerDeb
    tpc = tpc + SMrw.CredVal2;//PerCred
    tad = tad + SMrw.CurDebVal;//AccDeb
    tac = tac + SMrw.CurCredVal;//AccCred
    AddDebCred(as,tedb,tecb);
    AddDebCred(fws,tfwd,tfwc);

    if (RepSpec.flags[1]==0) then begin
      GetAccountDescription2(Accr.AccNumber,RepSpec.Language,accname);        
      if (RepSpec.flags[14]!=0) then begin
        accname = Left(accname,15);
      end;      
      if (SMrw.DebVal2!=0) or (SMrw.CredVal2!=0) or (SMrw.CurDebVal!=0) or (SMrw.CurCredVal!=0) or (fws!=0) then begin
        MBALine(RepSpec,SMrw.AccNumber,accname,fws,fws,SMrw.DebVal2,SMrw.CredVal2,SMrw.CurDebVal,SMrw.CurCredVal,as,as,lmod,"DblNL",vaccumbervalues);
      end;
    end; 
L44:;
  end;
  for (ai=0;ai<accgrouplen.length;ai=ai+1) begin
    lastsub = Left(lastAccNumber,StringToInt(accgrouplen[ai]));
    if (vagfwd[lastsub]!=0 or vagfwc[lastsub]!=0 or vagpd[lastsub]!=0 or vagpc[lastsub]!=0 or vagad[lastsub]!=0 or vagac[lastsub]!=0 or vagedb[lastsub]!=0 or vagecb[lastsub]!=0) then begin  
      if (RepSpec.flags[8]<>0) then begin
        if (RepSpec.flags[1]==0) then begin
          if (lmod==1) then begin
            Gray_Divider(2,1);
          end;  
        end;    
/*
StartFormat(15);
  OutString(0,0,"l." & lastsub,false);
  OutString(50,0,SMrw.AccNumber,false);
  OutString(360,0,vagecb[lastsub],false);
EndFormat;
*/
        MBALine(RepSpec,USetStr(3478),lastsub,vagfwd[lastsub],vagfwc[lastsub],vagpd[lastsub],vagpc[lastsub],vagad[lastsub],vagac[lastsub],vagedb[lastsub],vagecb[lastsub],lmod,"DblNL",vaccumbervalues);
        if (RepSpec.flags[1]==0) then begin
          if (lmod==1) then begin
            StartFormat(10);
            EndFormat;
          end;  
        end;
      end;
    end;
  end;
  if ((RepSpec.flags[10]==0) or (RepSpec.flags[0]==1))  then begin
    if (RepSpec.flags[1]==0) then begin
      if (lmod==1) then begin
        Gray_Divider(2,1);
      end;  
    end;  
    tstr = USetStr(3248);
    tstr = tstr & gstr;
    tstr = tstr & lastgroup;    
    tstr = tstr & "'";    
    MBALine(RepSpec,tstr,blankstr,tfwd,tfwc,tpd,tpc,tad,tac,tedb,tecb,lmod,"",vaccumbervalues);
  end;  
  if (RepSpec.flags[1]==0) then begin
    if (lmod==1) then begin
      StartFormat(10);
      EndFormat;
    end;  
  end;

  if (lmod==1) then begin
    Gray_Divider(0,1);
  end;  
  MBALine(RepSpec,blankstr,blankstr,sfwd,sfwc,spd,spc,sad,sac,sedb,secb,lmod,"DblNL",vaccumbervalues);
  if (RepSpec.flags[22]!=0) then begin
//    PrintCurrencyBalances(RepSpec,"",vaccumbervalues);
  end;

  end; /* ArtMode */
  if (RepSpec.flags[4]<>0) then begin 
    if (lmod==1) then begin
      ListPerTrans(RepSpec); 
    end;  
  end;
  if (lmod==0) then begin
/*
not possible yet but almost
    ARSr.StartBal = sfwd;
    ARSr.OnAccBal = sfwc;
    ARSr.s0 = spd;
    ARSr.s1 = spc;
    ARSr.s16 = sad;
    ARSr.s31 = sac;
    ARSr.s61 = sedb;
    ARSr.Sum = secb;
    ARSr.IntSum = 0;
    ARSr.SumNotLate = 0;
    ARSr.SumLate = 0;
    ARSr.ARSum = 0;
    PrintDocument(ARSr,"MBAForm",false);
*/    
  end;
    
L99:;
  EndJob;    
  return;
end;

global
procedure MBARn(var record RcVc RepSpec)
begin
  if (RepSpec.Media==mtScreen) then begin
    RepSpec.flags[9] = 1;
  end;
  MBACode(RepSpec,1);
  AutomatedSalesOrderly("HasIntegratedNL+Run_MBARn");
  return;
end;

global
procedure MBA3Rn(var record RcVc RepSpec)
begin  

  MBACode(RepSpec,1);
  return;
end;


/*
not possible yet but almost
global
procedure MBAForm(var record RcVc RepSpec)
BEGIN

  MBACode(RepSpec,0);
  RETURN;
END;
*/
