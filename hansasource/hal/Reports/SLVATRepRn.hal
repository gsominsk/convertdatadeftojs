external procedure AddRowTaxMatrixToSumTaxMatrix(record TaxMatrixVc,var record TaxMatrixVc,Integer);
external procedure AddIntIVToVIVATArray(record IntIVVc,var record SMVc,Integer,Boolean);
external function val ValFromString(string,string,string);
external procedure GetVATproc(string,Integer,var val);
external procedure PrintIVCashDataSLVATRep(record RcVc,record IVCashVc,var LongInt,var Integer,var Boolean,Integer);
external function Boolean UseTaxTemplatesforTaxCalc();
external function roundmode GetVATRoundMode(record RoundBlock);
external function roundmode DefaultRoundMode();
external procedure PrintIVDataSLVATRep(record RcVc,record IVVc,record TRVc,var LongInt,var Integer,var Boolean,Integer);
external function Boolean PrintVATIVDataSLVATRep(record RcVc,var LongInt,var Integer,Integer,record VATIVVc);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val FindVAT(string,val,Integer,Integer);
external procedure HT2Per(Date, Date , var string);

enum begin
  kSLVATRepPreviousPeriod = 0,
  kSLVATRepCurrentPeriod = 1,
  kSLVATRepNextPeriod = 2
end;

function Boolean PrintResult(record SMVc VATr)
BEGIN
  Boolean res;
  row SMVc VATrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(VATr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATr,i,VATrw);
    if (VATrw.CredVal!=0) then begin
      i = rwcnt;
      res = true;
    end;
  end;
  PrintResult = res;
  RETURN;
END;

procedure CalcVAT(record SMVc VATr,Integer inclvat)
BEGIN
  Integer i,vatcnt;
  val t,lv;
  row SMVc VATrw;
  record RoundBlock RoundRec;
  
  BlockLoad(RoundRec);
  vatcnt = MatRowCnt(VATr);
  for (i=0;i<vatcnt;i=i+1) begin
    MatRowGet(VATr,i,VATrw); 
    if (VATrw.CredVal!=0) then begin           
      switch (RoundRec.VATCalcWay) begin
        case 0:
          lv = VATrw.CredVal;
          if (lv<0) then begin
            lv = -VATrw.CredVal;
          end;
          t = FindVAT(VATrw.VATCode,lv,inclvat,0);//jjtax
          t = Round(t,GetVATRoundMode(RoundRec));
          if (VATrw.CredVal<0) then begin
            t = -t;
          end;
          if (inclvat!=0) then begin
            VATrw.CredVal = VATrw.CredVal - t;
          end;
          VATrw.DebVal = t;
        case 1:
        //already calculated
      end;
      MatRowPut(VATr,i,VATrw);
    end;
  end;
/*  
  for (i=0;i<vatcnt;i=i+1) begin
    MatRowGet(VATr,i,VATrw);     
    VATrw.DebVal = MulRateToBase1(VATrw.CurncyCode,VATrw.DebVal,VATrw.FrRate,VATrw.ToRateB1,VATrw.ToRateB2,VATrw.BaseRate1,VATrw.BaseRate2,DefaultCurRoundOff);
    VATrw.CredVal = MulRateToBase1(VATrw.CurncyCode,VATrw.CredVal,VATrw.FrRate,VATrw.ToRateB1,VATrw.ToRateB2,VATrw.BaseRate1,VATrw.BaseRate2,DefaultCurRoundOff);
    MatRowPut(VATr,i,VATrw);     
  end;
*/  
  RETURN;
END;

procedure PrintHeader1(record RcVc RepSpec)
BEGIN
  Integer rw;  
  string 255 tstr;
  
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  RETURN;
END;

procedure PrintHeaderVATRow(record RcVc RepSpec)
BEGIN
  StartFormat(15);
   if (RepSpec.flags[12]!=0) then begin
     OutString(80,0,USetStr(10685),true);
     OutString(90,0,USetStr(10680),false);
   end else begin
     OutString(5,0,USetStr(10685),true);
   end;
   OutString(6,0,USetStr(10686),true);
   OutString(7,0,USetStr(10687),true);
   OutString(8,0,USetStr(10688),true);
   OutString(1,0,USetStr(10694),true);
  EndFormat;
  if (RepSpec.flags[12]!=0) then begin
    Gray_Divider(40,1);
  end else begin
    Gray_Divider(4,1);
  end;
  RETURN;
END;

procedure PrintVATArray(record RcVc RepSpec,record SMVc VATr,Boolean sumf,Boolean UseTaxTemplatesforTaxCalcf)
BEGIN
  row SMVc VATrw;
  Integer rwcnt,i;
  Boolean testf,ratef,firstf;
  val totv,totvat,v,dv;
  record RoundBlock RoundRec;
    
  BlockLoad(RoundRec);
  firstf = true;
  rwcnt = MatRowCnt(VATr);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(VATr,i,VATrw);
    testf = false;
    if ((VATrw.DebVal!=blankval) or (VATrw.CredVal!=blankval)) then begin
      testf = true;
    end;
    if (RepSpec.flags[0]!=0) then begin
      testf = true;
    end;
    if (testf) then begin
      if (firstf) then begin
        PrintHeaderVATRow(RepSpec);
        firstf = false;
      end; 
      StartFormat(15);
       if (RepSpec.flags[12]!=0) then begin
         OutStringOvst(80,0,VATrw.VATCode,true,VATrw.RowSimStat);
         OutStringOvst(90,0,VATrw.Comment,false,VATrw.RowSimStat);
       end else begin
         OutStringOvst(5,0,VATrw.VATCode,true,VATrw.RowSimStat);
       end;
       dv = MulRateToBase1(VATrw.CurncyCode,VATrw.CredVal,VATrw.FrRate,VATrw.ToRateB1,VATrw.ToRateB2,VATrw.BaseRate1,VATrw.BaseRate2,DefaultCurRoundOff);
       switch (RoundRec.VATCalcWay) begin
         case 0:
           v = MulRateToBase1(VATrw.CurncyCode,VATrw.DebVal,VATrw.FrRate,VATrw.ToRateB1,VATrw.ToRateB2,VATrw.BaseRate1,VATrw.BaseRate2,DefaultCurRoundOff);
         case 1:
           v = VATrw.DebVal2;
       end;       
       switch (RoundRec.VATCalcWay) begin
         case 0:
           OutValOvst(6,0,dv,M4Val,true,VATrw.RowSimStat);
         case 1:
           OutValOvst(6,0,dv-v,M4Val,true,VATrw.RowSimStat);
       end;
       OutValOvst(7,0,VATrw.CurCredVal,M4Val,true,VATrw.RowSimStat);
       OutValOvst(8,0,v,M4Val,true,VATrw.RowSimStat);
       switch (RoundRec.VATCalcWay) begin
         case 0:
           OutValOvst(1,0,v+dv,M4Val,true,VATrw.RowSimStat);
         case 1:
           OutValOvst(1,0,dv,M4Val,true,VATrw.RowSimStat);
       end;
      EndFormat;
      if (sumf) then begin
        if (UseTaxTemplatesforTaxCalcf) then begin
          totv = totv + StringToVal(VATrw.ExtraComment,M4Val);
        end else begin
          totv = totv + VATrw.CredVal;
        end;
        switch (RoundRec.VATCalcWay) begin
          case 0: totvat = totvat + VATrw.DebVal;
          case 1: totvat = totvat + VATrw.DebVal2;
        end;
      end else begin
        AddToAccumulator(0,dv);
        AddToAccumulator(1,v);
        AddToAccumulator(2,dv);
        AddToAccumulator(3,v);
        if (RepSpec.Media==mtPrinter) then begin
          StartFooter(45,true);
           Black_Divider(0,1);
           OutString(200,0,USetStr(2412),false)
           OutAccumulator(380,4,M4Val,true);
           OutAccumulator(1,5,M4Val,true);
           OutString(200,0,USetStr(2413),false)
           OutAccumulator(380,0,M4Val,true);
           OutAccumulator(1,1,M4Val,true);
           ClearAccumulator(0);
           ClearAccumulator(1);
           OutString(200,0,USetStr(2414),false)
           OutAccumulator(380,2,M4Val,true);
           OutAccumulator(1,3,M4Val,true);
           CopyAccumulator(4,2);
           CopyAccumulator(5,3);
          EndFooter;    
        end;
      end;
    end;
  end;
  if ((sumf) and ((totv!=0) or (totvat!=0))) then begin
    if (RepSpec.flags[12]!=0) then begin
      Gray_Divider(40,1);
    end else begin
      Gray_Divider(4,1);
    end;
    StartFormat(15);
     switch (RoundRec.VATCalcWay) begin
       case 0:
         OutVal(6,0,totv,M4Val,true);
       case 1:
         OutVal(6,0,totv-totvat,M4Val,true);
     end;
     OutVal(8,0,totvat,M4Val,true);
     switch (RoundRec.VATCalcWay) begin
       case 0:
         OutVal(1,0,totv+totvat,M4Val,true);
       case 1:
         OutVal(1,0,totv,M4Val,true);
     end;
    EndFormat;
  end;
  RETURN;
END;

procedure SetupVATArray(var record SMVc VATr)
BEGIN
  row SMVc SMrw;
  Integer rwcnt,i;
  record VATCodeBlock VATRec;
  row VATCodeBlock VATrw;
  
  BlockLoad(VATRec);  
  rwcnt = MatRowCnt(VATRec);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(VATRec,i,VATrw);
    SMrw.AccNumber = VATrw.PurchVATAcc;
    SMrw.VATCode = VATrw.VATCode;
    SMrw.Comment = VATrw.Comment;
    SMrw.DebVal = blankval;
    SMrw.CredVal = blankval;
    SMrw.CredVal2 = blankval;
    if (HasLocalization("ITA")) then begin
      if (blank(VATrw.ExVatpr)==false) then begin
        SMrw.CurCredVal = VATrw.ExVatpr;
      end else begin
        SMrw.CurCredVal = VATrw.IncVatpr;
      end;
    end else begin
      if (blank(VATrw.IncVatpr)==false) then begin
        SMrw.CurCredVal = VATrw.IncVatpr;
      end else begin
        SMrw.CurCredVal = VATrw.ExVatpr;
      end;
    end;
    MatRowPut(VATr,i,SMrw);
  end;
  RETURN;
END;

procedure AddVATToVATArray(record SMVc VATInr,var record SMVc TotVATr)
BEGIN
  Integer i,vatcnt;
  row SMVc VATInrw;
  row SMVc TotVATrw;
  
  vatcnt = MatRowCnt(TotVATr);
  for (i=0;i<vatcnt;i=i+1) begin
    MatRowGet(VATInr,i,VATInrw);
    MatRowGet(TotVATr,i,TotVATrw);
    TotVATrw.CurCredVal = VATInrw.CurCredVal;
    TotVATrw.VATCode = VATInrw.VATCode;
    TotVATrw.DebVal = TotVATrw.DebVal + MulRateToBase1(VATInrw.CurncyCode,VATInrw.DebVal,VATInrw.FrRate,VATInrw.ToRateB1,VATInrw.ToRateB2,VATInrw.BaseRate1,VATInrw.BaseRate2,DefaultCurRoundOff);
    TotVATrw.DebVal2 = TotVATrw.DebVal2 + MulRateToBase1(VATInrw.CurncyCode,VATInrw.DebVal2,VATInrw.FrRate,VATInrw.ToRateB1,VATInrw.ToRateB2,VATInrw.BaseRate1,VATInrw.BaseRate2,DefaultCurRoundOff);
    TotVATrw.CredVal = TotVATrw.CredVal + MulRateToBase1(VATInrw.CurncyCode,VATInrw.CredVal,VATInrw.FrRate,VATInrw.ToRateB1,VATInrw.ToRateB2,VATInrw.BaseRate1,VATInrw.BaseRate2,DefaultCurRoundOff);
    TotVATrw.ExtraComment = StringToVal(TotVATrw.ExtraComment,M4Val) + StringToVal(VATInrw.ExtraComment,M4Val);
    MatRowPut(TotVATr,i,TotVATrw);
  end;
  RETURN;
END;

procedure AddVATBaseVATRep(var record SMVc VATr,string vatcode,val t,Integer InclVAT,Integer NoTAXonVAT,Integer invalid,
                           string CurncyCode,val FrRate,val ToRateB1,val ToRateB2,val BaseRate1,val BaseRate2)
BEGIN
  row SMVc VATrw;
  Integer i,vatcnt;
  record RoundBlock RoundRec;
  val vatv,tax1;
  
  BlockLoad(RoundRec);
  vatcnt = MatRowCnt(VATr);
  for (i=0; i<vatcnt; i=i+1) begin
    MatRowGet(VATr,i,VATrw);          
    if (VATrw.VATCode==vatcode) then begin
      VATrw.CredVal = VATrw.CredVal + t;
      VATrw.RowSimStat = invalid;
      if (RoundRec.VATCalcWay!=0) then begin
        MulVATIV(vatcode,t,vatv,tax1,InclVAT,NoTAXonVAT);
        vatv = Round(vatv,GetVATRoundMode(RoundRec));        
        if (InclVAT==0) then begin
          VATrw.CredVal = VATrw.CredVal + vatv;
        end;
        VATrw.DebVal2 = VATrw.DebVal2 + vatv;
        tax1 = Round(tax1,DefaultRoundMode);
        VATrw.CurDebVal = VATrw.CurDebVal + tax1;
      end;
      VATrw.FrRate = FrRate;
      VATrw.ToRateB1 = ToRateB1;
      VATrw.ToRateB2 = ToRateB2;
      VATrw.BaseRate1 = BaseRate1;
      VATrw.BaseRate2 = BaseRate2;
      VATrw.CurncyCode = CurncyCode;
      MatRowPut(VATr,i,VATrw);
      goto LAddVATBaseVATRep;
    end;
  end;      
LAddVATBaseVATRep:;
  RETURN;
END;

global
procedure AddVATBaseVATRepTM(var record SMVc VATr,record TaxMatrixVc TMr,Integer invtype,Integer invalid,
                             string CurncyCode,val FrRate,val ToRateB1,val ToRateB2,val BaseRate1,val BaseRate2)
BEGIN
  row SMVc VATrw;
  Integer i,vatcnt;
  record RoundBlock RoundRec;
  val vatv,tax1;
  row TaxMatrixVc TMrw;
  Integer trwcnt,ti;
  Boolean baseaddedf;
  
  BlockLoad(RoundRec);
  vatcnt = MatRowCnt(VATr);
  trwcnt = MatRowCnt(TMr);
  if (invtype==kInvoiceTypeCredit) then begin
    for (ti=0; ti<trwcnt; ti=ti+1) begin
      MatRowGet(TMr,ti,TMrw);  
      TMrw.BaseSum = -TMrw.BaseSum;        
      TMrw.VATSum = -TMrw.VATSum;        
      MatRowPut(TMr,ti,TMrw);  
    end;
  end;
  for (ti=0; ti<trwcnt; ti=ti+1) begin
    MatRowGet(TMr,ti,TMrw);          
    for (i=0; i<vatcnt; i=i+1) begin
      MatRowGet(VATr,i,VATrw);     
      if (VATrw.VATCode==TMrw.VATCode) then begin
        VATrw.CredVal = VATrw.CredVal + TMrw.BaseSum;
        if (baseaddedf==false) then begin
          VATrw.ExtraComment = ValToString(StringToVal(VATrw.ExtraComment,M4Val) + TMrw.BaseSum,M4Val,ThousandSeparator,DecimalSeparator,0);
          baseaddedf = true;
        end;
        VATrw.DebVal = VATrw.DebVal + TMrw.VATSum;
        VATrw.RowSimStat = invalid;
        VATrw.FrRate = FrRate;
        VATrw.ToRateB1 = ToRateB1;
        VATrw.ToRateB2 = ToRateB2;
        VATrw.BaseRate1 = BaseRate1;
        VATrw.BaseRate2 = BaseRate2;
        VATrw.CurncyCode = CurncyCode;


        MatRowPut(VATr,i,VATrw);
        i = vatcnt;
      end;
    end;      
  end;
  return;
end;

function val CalculateReceiptSum(Integer pertyp,Date startdate,Date enddate,LongInt invnr,Integer InclVAT,string vatcode)
begin
  val res;
  record IPrsVc IPrsr;
  record IPVc IPr;
  row IPVc IPrw;
  Integer i,rwcnt;
  Boolean found,testf;
  val v;
  
  found = true;
  IPrsr.IVNr = invnr;
  IPrsr.TransType = kIPrsTransTypeReceipt;
  while (LoopKey("IVKey",IPrsr,2,found)) begin
    if (IPrsr.IVNr!=invnr) then begin found = false; end;
    if (IPrsr.TransType!=kIPrsTransTypeReceipt) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (testf) then begin
        IPr.SerNr = IPrsr.TransNr;
        if (ReadFirstMain(IPr,1,true)) then begin
          testf = true;
          if (IPr.OKFlag==0) then begin testf = false; end;
          if (IPr.Invalid!=0) then begin testf = false; end;
          switch (pertyp) begin
            case 1:
              if (DateInRange(IPr.TransDate,startdate,enddate)==false) then begin testf = false; end;
          end;
          if (testf) then begin
            rwcnt = MatRowCnt(IPr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(IPr,i,IPrw);
              if (blank(vatcode)) then begin
                res = res + IPrw.InvVal;
              end else begin
                if (IPrw.VATCode==vatcode) then begin
                  if (InclVAT!=0) then begin
                    res = res + IPrw.InvVal;
                  end else begin
                    res = res + (IPrw.InvVal-IPrw.VATVal);
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  CalculateReceiptSum = res;
  return;
end;

procedure AddToArray(string vatcode,array string avatcodes)
begin
  Integer i;
  
  for (i=0;i<avatcodes.length;i=i+1) begin
    if (vatcode==avatcodes[i]) then begin
      goto LAddToArray;
    end;
  end;
  avatcodes[avatcodes.length] = vatcode;
LAddToArray:;  
  return;
end;

procedure AddIVToVATArray(record IVVc IVr,var record SMVc VATr,string skipwithvatcode,Date startdate,Date enddate,Integer pertyp,Boolean UseTaxTemplatesforTaxCalcf)
begin
  row IVVc IVrw;
  Integer i,rwcnt;
  val v;
  record IVVc orgIVr;
  val frrate,to1,to2,br1,br2;
  record TaxMatrixVc TMr;
  record TaxMatrixVc sumTMr;
  Boolean testf;
  Array string 255 avatcodes;

  frrate = IVr.FrRate;
  to1 = IVr.ToRateB1;
  to2 = IVr.ToRateB2;
  br1 = IVr.BaseRate1;
  br2 = IVr.BaseRate2;
  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
    orgIVr.SerNr = IVr.CredInv;
    if (ReadFirstMain(orgIVr,1,true)) then begin
      frrate = orgIVr.FrRate;
      to1 = orgIVr.ToRateB1;
      to2 = orgIVr.ToRateB2;
      br1 = orgIVr.BaseRate1;
      br2 = orgIVr.BaseRate2;
    end;
  end;
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    testf = true;
    if (UseTaxTemplatesforTaxCalcf)  then begin
      if (IVrw.TaxTemplateCode==skipwithvatcode) then begin testf = false; end;
    end else begin
      if (IVrw.VATCode==skipwithvatcode) then begin testf = false; end;
    end;
    if ((IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeDownpayment) or (IVrw.stp==kInvoiceRowTypeCorrection) or (IVrw.stp==kInvoiceRowTypeInterest)) then begin
    end else begin
      testf = false;
    end;
    if (testf) then begin
      v = IVrw.Sum;
      if (IVr.IPBookVAT!=0) then begin
        AddToArray(IVrw.VATCode,avatcodes);
      end;
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        if (IVrw.stp!=kInvoiceRowTypeCorrection) then begin
          v = -v;
        end;
      end;  
      if (IVr.IPBookVAT!=0) then begin
        switch (pertyp) begin
          case kSLVATRepNextPeriod:
          otherwise
            testf = false;
        end;
      end;
    end;
    if (testf) then begin      
      if (UseTaxTemplatesforTaxCalcf)  then begin
        UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
        AddRowTaxMatrixToSumTaxMatrix(TMr,sumTMr,IVr.InclVAT);
      end else begin
        if (nonblank(IVrw.RvrsVATCode)) then begin
          AddVATBaseVATRep(VATr,IVrw.RvrsVATCode,v,IVr.InclVAT,IVr.NoTAXonVAT,IVr.Invalid,IVr.CurncyCode,frrate,to1,to2,br1,br2);
        end else begin
          AddVATBaseVATRep(VATr,IVrw.VATCode,v,IVr.InclVAT,IVr.NoTAXonVAT,IVr.Invalid,IVr.CurncyCode,frrate,to1,to2,br1,br2);
        end;
      end;
    end;
LSKIPAddIVToVATArray:;    
  end;
  if (IVr.IPBookVAT!=0) then begin
    for (i=0;i<avatcodes.length;i=i+1) begin
      if (UseTaxTemplatesforTaxCalcf)  then begin
      end else begin
        v = CalculateReceiptSum(pertyp,startdate,enddate,IVr.SerNr,IVr.InclVAT,avatcodes[i]);
        if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
          if (IVrw.stp!=kInvoiceRowTypeCorrection) then begin
            v = -v;
          end;
        end;  
        switch (pertyp) begin
          case kSLVATRepNextPeriod:
            AddVATBaseVATRep(VATr,avatcodes[i],-v,IVr.InclVAT,IVr.NoTAXonVAT,IVr.Invalid,IVr.CurncyCode,frrate,to1,to2,br1,br2);
          otherwise
            AddVATBaseVATRep(VATr,avatcodes[i],v,IVr.InclVAT,IVr.NoTAXonVAT,IVr.Invalid,IVr.CurncyCode,frrate,to1,to2,br1,br2);
        end;
      end;
    end;
  end;
  if (UseTaxTemplatesforTaxCalcf) then begin
//  must be per row cause base may be used for many rows
//    UnpackFieldMatrix(IVr,"TaxMatrix",TMr);
//    AddVATBaseVATRepTM(VATr,TMr,IVr.Invalid,IVr.CurncyCode,frrate,to1,to2,br1,br2);
    AddVATBaseVATRepTM(VATr,sumTMr,IVr.InvType,IVr.Invalid,IVr.CurncyCode,frrate,to1,to2,br1,br2);
  end else begin
    CalcVAT(VATr,IVr.InclVAT);
  end;
  RETURN;
END;

procedure IVAddVATTRToVATArray(record VATIVVc VATIVr,var record SMVc VATr)
BEGIN
  row VATIVVc VATIVrw;
  Integer i,rwcnt;
  val v;
  record IVVc orgIVr;
  val frrate,to1,to2,br1,br2;

  frrate = VATIVr.FrRate;
  to1 = VATIVr.ToRateB1;
  to2 = VATIVr.ToRateB2;
  br1 = VATIVr.BaseRate1;
  br2 = VATIVr.BaseRate2;
  if (VATIVr.InvType==kInvoiceTypeCredit or VATIVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
    orgIVr.SerNr = VATIVr.IVNr;
    if (ReadFirstMain(orgIVr,1,true)) then begin
      orgIVr.SerNr = orgIVr.CredInv;
      if (ReadFirstMain(orgIVr,1,true)) then begin
        frrate = orgIVr.FrRate;
        to1 = orgIVr.ToRateB1;
        to2 = orgIVr.ToRateB2;
        br1 = orgIVr.BaseRate1;
        br2 = orgIVr.BaseRate2;
      end;
    end;
  end;
  rwcnt = MatRowCnt(VATIVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATIVr,i,VATIVrw);
    if ((VATIVrw.stp==1) or (VATIVrw.stp==5) or (VATIVrw.stp==11) or (VATIVrw.stp==kInvoiceRowTypeInterest)) then begin
      v = VATIVrw.Sum;
      if (VATIVr.InvType==kInvoiceTypeCredit or VATIVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        if (VATIVrw.stp!=11) then begin
          v = -v;
        end;
      end;    
      if (nonblank(VATIVrw.RvrsVATCode)) then begin
        AddVATBaseVATRep(VATr,VATIVrw.RvrsVATCode,v,VATIVr.InclVAT,VATIVr.NoTAXonVAT,0,VATIVr.CurncyCode,frrate,to1,to2,br1,br2);
      end else begin
        AddVATBaseVATRep(VATr,VATIVrw.VATCode,v,VATIVr.InclVAT,VATIVr.NoTAXonVAT,0,VATIVr.CurncyCode,frrate,to1,to2,br1,br2);
      end;
    end;
  end;
  CalcVAT(VATr,VATIVr.InclVAT);
  RETURN;
END;


function 
Boolean CheckVATIVExists(record RcVc RepSpec,LongInt number,Date startdate,Date enddate,var record TRVc VATIVTRr)
BEGIN
  record VATIVVc VATIVr;
  record TRVc TRr;
  Boolean res;
  
  VATIVTRr = TRr;
  
  VATIVr.IVNr = number;
  if (ReadFirstKey("IVNr",VATIVr,1,true)) then begin  
    TRr.Number = VATIVr.SerNr;
    TRr.IntYc = VATIVYc;
    if (ReadFirstMain(TRr,2,true)) then begin
      if (DateInRange(TRr.TransDate,startdate,enddate)) then begin
        RecordCopy(VATIVTRr,TRr);
//        res = true;
      end;
    end else begin
      res = true;
    end;
  end else begin
    res = true;
  end;
  CheckVATIVExists = res;
  RETURN;
END;

function Boolean IsOrigIVinReportPeriod(record RcVc RepSpec,LongInt vativnr)
begin
  Boolean res;
  record VATIVVc VATIVr;
  
  res = true;
  VATIVr.SerNr = vativnr;
  if (ReadFirstMain(VATIVr,1,true)) then begin
//    if (DateInRange(VATIVr.IVTransDate,RepSpec.sStartDate,RepSpec.sEndDate)) then begin
    if (VATIVr.IVTransDate>RepSpec.sEndDate) then begin
      res = false;
    end;
    if (VATIVr.OKFlag==0) then begin
      res = false;
    end;
  end;
  IsOrigIVinReportPeriod = res;
  return;
end;

procedure SLVATCorrections(record SMVc TotVATr,record SMVc PeriodVATr,record RcVc RepSpec,Date startdate,Date enddate,var LongInt lpnr,Integer pertyp,Integer exportflag)
BEGIN
  record SMVc VATr;
  record VATIVVc VATIVr;
  Boolean TrHs,testf;
  Integer inclvat;
  LongInt friv,toiv;
  string 255 ckey;

  friv = FirstInRange(RepSpec.f1,10);
  toiv = LastInRange(RepSpec.f1,10);
  switch (RepSpec.flags[6]) begin
    case 0: ckey = "TransDate";
    case 1: ckey = "IVInvDate";
    case 2: ckey = "SerNr";
  end;
  VATIVr.SerNr = -1;
  TrHs = true;
  VATIVr.TransDate = startdate;
  while (LoopKey(ckey,VATIVr,1,TrHs)) begin
//    if (VATIVr.TransDate>enddate) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = false;
      if (DateInRange(VATIVr.TransDate,startdate,enddate)) then begin
        testf = true;
      end;      

      if (pertyp!=kSLVATRepPreviousPeriod) then begin  
        if (IsOrigIVinReportPeriod(RepSpec,VATIVr.SerNr)==false) then begin
          testf = false;
        end;
      end;
      if (pertyp!=1) then begin
        if (VATIVr.IVTransDate==VATIVr.TransDate) then begin
          testf = false;
        end;
      end;      

/*        
      switch (pertyp) begin
        case 1:
        case 2:
          if (VATIVr.IVTransDate==VATIVr.TransDate) then begin
            testf = false;
          end;
          if (DateInRange(VATIVr.IVTransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
            testf = false;
          end;      
        otherwise
          if (VATIVr.IVTransDate==VATIVr.TransDate) then begin
            testf = false;
          end;
      end;
*/      
      if (nonblank(RepSpec.f1)) then begin
        if (VATIVr.IVNr<friv) then begin
          testf = false;
        end;
        if (VATIVr.IVNr>toiv) then begin
          testf = false;
        end;
      end;
      if (RepSpec.flags[3]==0) then begin
        if (VATIVr.InvType!=kInvoiceTypeCredit and VATIVr.InvType!=kInvoiceTypeCreditSpecialSales and VATIVr.InvType!=kInvoiceTypeInterest) then begin
          testf = false;
        end;
      end;
      if (RepSpec.flags[4]==0) then begin
        if (VATIVr.InvType==kInvoiceTypeCredit or VATIVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
          testf = false;
        end;
      end;
      if (RepSpec.flags[17]==0) then begin
        if (VATIVr.InvType==kInvoiceTypeInterest) then begin
          testf = false;
        end;
      end;
      if (RepSpec.flags[5]==1) then begin
        if (VATIVr.FiscalFlag==0) then begin
          testf = false;
        end;
      end;    
      if (RepSpec.flags[5]==2) then begin
        if (VATIVr.FiscalFlag!=0) then begin
          testf = false;
        end;
      end;    
      switch (exportflag) begin
        case 0: 
          if (VATIVr.ExportFlag!=0) then begin testf = false; end;
          if (RepSpec.flags[7]==0) then begin 
            if (VATIVr.ExportFlag==0) then begin testf = false; end;
          end;
        case 1: 
          if ((VATIVr.ExportFlag!=1) and (VATIVr.ExportFlag!=3)) then begin testf = false; end;
          if (RepSpec.flags[8]==0) then begin 
            if ((VATIVr.ExportFlag==1) or (VATIVr.ExportFlag==3)) then begin testf = false; end;
          end;
        case 2: 
          if ((VATIVr.ExportFlag!=2) and (VATIVr.ExportFlag!=4)) then begin testf = false; end;
          if (RepSpec.flags[9]==0) then begin 
            if ((VATIVr.ExportFlag==2) or (VATIVr.ExportFlag==4)) then begin testf = false; end;
          end;
      end;
      if (VATIVr.OKFlag==0) then begin
        testf = false;
      end;
      if (testf) then begin
        RecordNew(VATr);
        SetupVATArray(VATr);
        if (PrintVATIVDataSLVATRep(RepSpec,lpnr,inclvat,pertyp,VATIVr)) then begin
          IVAddVATTRToVATArray(VATIVr,VATr);
          AddVATToVATArray(VATr,PeriodVATr);
          AddVATToVATArray(VATr,TotVATr);          
          if (RepSpec.ArtMode==1) then begin
            PrintVATArray(RepSpec,VATr,RepSpec.flags[11]!=0,UseTaxTemplatesforTaxCalc);
            Gray_Divider(0,1);
          end;
        end;
      end;
    end;
  end;
  RETURN;
END;

procedure AddIVCashToVATArray(record IVCashVc IVCashr,var record SMVc VATr,string skipwithvatcode,Boolean UseTaxTemplatesforTaxCalcf)
BEGIN
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  val v;
  record IVCashVc orgIVCashr;
  val frrate,to1,to2,br1,br2;
  record TaxMatrixVc TMr;
  record TaxMatrixVc sumTMr;

  frrate = IVCashr.FrRate;
  to1 = IVCashr.ToRateB1;
  to2 = IVCashr.ToRateB2;
  br1 = IVCashr.BaseRate1;
  br2 = IVCashr.BaseRate2;
  rwcnt = MatRowCnt(IVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    if (UseTaxTemplatesforTaxCalcf)  then begin
      if (IVCashrw.TaxTemplateCode==skipwithvatcode) then begin goto LSKIPAddIVCashToVATArray; end;
    end else begin
      if (IVCashrw.VATCode==skipwithvatcode) then begin goto LSKIPAddIVCashToVATArray; end;
    end;
    if ((IVCashrw.stp==kInvoiceRowTypeNormal) or (IVCashrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVCashrw.stp==5) or (IVCashrw.stp==11)) then begin
      v = IVCashrw.Sum;
      if (UseTaxTemplatesforTaxCalcf)  then begin
        UnpackRowFieldMatrix(IVCashrw,"TaxMatrix",TMr);
        AddRowTaxMatrixToSumTaxMatrix(TMr,sumTMr,IVCashr.InclVAT);
      end else begin
        AddVATBaseVATRep(VATr,IVCashrw.VATCode,v,IVCashr.InclVAT,IVCashr.NoTAXonVAT,IVCashr.Invalid,IVCashr.CurncyCode,frrate,to1,to2,br1,br2);
      end;
    end;
LSKIPAddIVCashToVATArray:;    
  end;
  if (UseTaxTemplatesforTaxCalcf) then begin
//  must be per row cause base may be used for many rows
//    UnpackFieldMatrix(IVCashr,"TaxMatrix",TMr);
//    AddVATBaseVATRepTM(VATr,TMr,IVCashr.Invalid,IVCashr.CurncyCode,frrate,to1,to2,br1,br2);
      AddVATBaseVATRepTM(VATr,sumTMr,1,IVCashr.Invalid,IVCashr.CurncyCode,frrate,to1,to2,br1,br2);
  end else begin
    CalcVAT(VATr,IVCashr.InclVAT);
  end;
  RETURN;
END;

procedure AddToDateArray(Date TransDate,Array Date adate,var Integer acnt,string vatcode,Array string avatcode,var Integer avcnt)
begin
  Integer i;

  for (i=0;i<avcnt;i=i+1) begin
    if (avatcode[i]==vatcode) then begin
      goto LAddToVATArray;
    end;
  end;
  avatcode[avcnt] = vatcode;
  avcnt = avcnt + 1;
LAddToVATArray:;
  for (i=0;i<acnt;i=i+1) begin
    if (adate[i]==TransDate) then begin
      goto LAddToDateArray;
    end;
  end;
  adate[acnt] = TransDate;
  acnt = acnt + 1;
LAddToDateArray:;
  return;
end;

procedure SLVATPOSInvoices(record SMVc TotVATr,record SMVc PeriodVATr,record RcVc RepSpec,Date startdate,Date enddate,var LongInt lpnr,Integer exportflag,Boolean UseTaxTemplatesforTaxCalcf)
BEGIN
  record TRVc TRr;
  record TRVc VATIVTRr;
  record SMVc VATr;
  row SMVc VATrw;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer i,j,rwcnt;
  Boolean TrHs,testf,test2f,firstivf;
  Integer inclvat;
  val vatv,tax1;
  LongInt friv,toiv;
  record BaseCurBlock bcur;
  string 20 ckey;
  record CUVc CUr;
  vector val vnet;
  vector val vvat;
  vector val vtot;
  Array Date adate;
  Integer acnt;
  Array string 255 avatcode;
  Integer avcnt;

  if (RepSpec.flags[15]==0) then begin goto LSLVATPOSInvoices; end;
  firstivf = true;
  BlockLoad(bcur);
  friv = FirstInRange(RepSpec.f1,10);
  toiv = LastInRange(RepSpec.f1,10);
  switch (RepSpec.flags[6]) begin
    case 0: ckey = "TransDate";
    case 1: ckey = "InvDate";
    case 2: ckey = "SerNr";
  end;
  TrHs = true;
  IVCashr.TransDate = startdate;
  IVCashr.InvDate = startdate;
  IVCashr.SerNr = friv;
  while (LoopKey(ckey,IVCashr,1,TrHs)) begin
    switch (RepSpec.flags[6]) begin
      case 0:
        if (IVCashr.TransDate>enddate) then begin TrHs = false; end;
      case 1:
        if (IVCashr.InvDate>enddate) then begin TrHs = false; end;
      case 2:
        if (nonblank(RepSpec.f1)) then begin
          if (IVCashr.SerNr>toiv) then begin TrHs = false; end;
        end;
    end;
    if (TrHs) then begin
      testf = false;
      if (DateInRange(IVCashr.TransDate,startdate,enddate)) then begin
        testf = true;
      end;
/*
      if (RepSpec.flags[14]!=0) then begin
        if (nonblankdate(IVr.ServiceDelDate)) then begin
          if (DateInRange(IVr.ServiceDelDate,startdate,enddate)==false) then begin
            testf = false;
          end;
        end;
      end;
*/
      if (nonblank(RepSpec.f1)) then begin
        if (IVCashr.SerNr<friv) then begin
          testf = false;
        end;
        if (IVCashr.SerNr>toiv) then begin
          testf = false;
        end;
      end;
      if (RepSpec.flags[15]==0) then begin
        testf = false;
      end;    
      if (RepSpec.flags[5]==1) then begin
        if (IVCashr.FiscalFlag==0) then begin
          testf = false;
        end;
      end;    
      if (RepSpec.flags[5]==2) then begin
        if (IVCashr.FiscalFlag!=0) then begin
          testf = false;
        end;
      end;
      if (true) then begin
        if (IVCashr.OKFlag==0) then begin
          testf = false;
        end;
      end;
      CUr.Code = IVCashr.CustCode;
      ReadFirstMain(CUr,1,true);
      switch (exportflag) begin
        case 0: 
          if (CUr.ExportFlag!=0) then begin testf = false; end;
          if (RepSpec.flags[7]==0) then begin 
            if (CUr.ExportFlag==0) then begin testf = false; end;
          end;
        case 1: 
          if ((CUr.ExportFlag!=1) and (CUr.ExportFlag!=3)) then begin testf = false; end;
          if (RepSpec.flags[8]==0) then begin 
            if ((CUr.ExportFlag==1) or (CUr.ExportFlag==3)) then begin testf = false; end;
          end;
        case 2: 
          if ((CUr.ExportFlag!=2) and (CUr.ExportFlag!=4)) then begin testf = false; end;
          if (RepSpec.flags[9]==0) then begin 
            if ((CUr.ExportFlag==2) or (CUr.ExportFlag==4)) then begin testf = false; end;
          end;
      end;
      if (testf) then begin
        if (nonblank(RepSpec.AccStr)) then begin
          testf = false;
          rwcnt = MatRowCnt(IVCashr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVCashr,i,IVCashrw);
            if (IVCashrw.VATCode!=RepSpec.AccStr) then begin
              testf = true;
              i = rwcnt;
            end;
          end;
        end;
      end;
      if (testf) then begin

        RecordNew(VATr);
        SetupVATArray(VATr);
        if (RepSpec.ArtMode==1) then begin
          if (RepSpec.flags[16]==0) then begin
            PrintIVCashDataSLVATRep(RepSpec,IVCashr,lpnr,inclvat,firstivf,RepSpec.flags[12]);
          end;
        end;
        AddIVCashToVATArray(IVCashr,VATr,RepSpec.AccStr,UseTaxTemplatesforTaxCalcf);
        if (RepSpec.flags[16]!=0) then begin
          rwcnt = MatRowCnt(VATr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(VATr,i,VATrw);
            vnet[IVCashr.TransDate & ":" & VATrw.VATCode] = vnet[IVCashr.TransDate & ":" & VATrw.VATCode] + VATrw.CredVal;
            vvat[IVCashr.TransDate & ":" & VATrw.VATCode] = vvat[IVCashr.TransDate & ":" & VATrw.VATCode] + VATrw.DebVal;
            AddToDateArray(IVCashr.TransDate,adate,acnt,VATrw.VATCode,avatcode,avcnt);
          end;
        end;
        if (IVCashr.Invalid==0) then begin
          AddVATToVATArray(VATr,PeriodVATr);
          AddVATToVATArray(VATr,TotVATr);

//          AddIVToVATArray(TRr,PeriodVATr,inclvat,0);
//          AddIVToVATArray(TRr,TotVATr,inclvat,0);
        end;
        if (RepSpec.ArtMode==1) then begin
          if (RepSpec.flags[16]==0) then begin
            PrintVATArray(RepSpec,VATr,RepSpec.flags[11]!=0,UseTaxTemplatesforTaxCalcf);
            Gray_Divider(0,1);          
          end;
        end;
      end;
    end;
  end;
  if (RepSpec.flags[16]!=0) then begin
    firstivf = true;
    for (i=0;i<acnt;i=i+1) begin
      for (j=0;j<avcnt;j=j+1) begin
        if (vnet[adate[i] & ":" & avatcode[j]]!=0) then begin
          if (firstivf) then begin
            StartFormat(15);
            OutString(0,0,USetStr(19640),false);
            OutString(4,0,USetStr(19641),false);
            OutString(5,0,USetStr(10685),true);
            OutString(6,0,USetStr(19642),true);
            OutString(7,0,USetStr(19643),true);
            OutString(8,0,USetStr(19644),true);
            OutString(1,0,USetStr(19645),true);
            EndFormat;
            Gray_Divider(0,1);
            firstivf = false;
          end;
          StartFormat(15);
           OutDate(4,0,adate[i],false);
           OutString(5,0,avatcode[j],true);
           OutVal(6,0,vnet[adate[i] & ":" & avatcode[j]],M4Val,true);
           GetVATproc(avatcode[j],0,vatv);
           OutVal(7,0,vatv,M4Val,true);
           OutVal(8,0,vvat[adate[i] & ":" & avatcode[j]],M4Val,true);
           OutVal(1,0,vnet[adate[i] & ":" & avatcode[j]] + vvat[adate[i] & ":" & avatcode[j]],M4Val,true);
          EndFormat;
        end;
      end;
    end;
  end;
LSLVATPOSInvoices:;
  RETURN;
END;

procedure SLVATReceipts(record SMVc TotVATr,record SMVc PeriodVATr,record RcVc RepSpec,Date startdate,Date enddate,var LongInt lpnr,Integer pertyp,Integer exportflag,Boolean UseTaxTemplatesforTaxCalcf)
begin
  record IVVc IVr;
  record IPrsVc IPrsr;
  record IPVc IPr;
  row IPVc IPrw;
  Integer i,rwcnt;
  Boolean found,testf;
  record SMVc VATr;
  record TRVc VATIVTRr;
  Integer inclvat;
  Boolean firstivf;
  vector Boolean vinvoiceprntdf;
  LongInt friv,toiv;

  friv = FirstInRange(RepSpec.f1,10);
  toiv = LastInRange(RepSpec.f1,10);
  found = true;
  IPrsr.TransDate = startdate;
  while (LoopKey("TransDate",IPrsr,2,found)) begin
    if (DateInRange(IPrsr.TransDate,startdate,enddate)==false) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (IPrsr.TransType!=kIPrsTransTypeReceipt) then begin testf = false; end;
      if (IPrsr.IVNr<=0) then begin testf = false; end;
      if (testf) then begin
        IPr.SerNr = IPrsr.TransNr;
        if (ReadFirstMain(IPr,1,true)) then begin
          rwcnt = MatRowCnt(IPr);
          if (nonblank(RepSpec.AccStr)) then begin
            testf = false;
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(IPr,i,IPrw);
              if (IPrw.VATCode!=RepSpec.AccStr) then begin
                testf = true;
                i = rwcnt;
              end;
            end;
          end;
          if (testf) then begin
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(IPr,i,IPrw);
              testf = true;
              if (IPrw.InvoiceNr<=0) then begin testf = false; end;
              if (vinvoiceprntdf[IPrw.InvoiceNr]) then begin testf = false; end;
              if (nonblank(RepSpec.f1)) then begin
                if (IPrw.InvoiceNr<friv) then begin testf = false; end;
                if (IPrw.InvoiceNr>toiv) then begin testf = false; end;
              end;
              if (testf) then begin
                IVr.SerNr = IPrw.InvoiceNr;
                ReadFirstMain(IVr,1,true);
                if (IVr.IPBookVAT==0) then begin testf = false; end;
                switch (exportflag) begin
                  case 0: 
                    if (IVr.ExportFlag!=0) then begin testf = false; end;
                    if (RepSpec.flags[7]==0) then begin 
                      if (IVr.ExportFlag==0) then begin testf = false; end;
                    end;
                  case 1: 
                    if ((IVr.ExportFlag!=1) and (IVr.ExportFlag!=3)) then begin testf = false; end;
                    if (RepSpec.flags[8]==0) then begin 
                      if ((IVr.ExportFlag==1) or (IVr.ExportFlag==3)) then begin testf = false; end;
                    end;
                  case 2: 
                    if ((IVr.ExportFlag!=2) and (IVr.ExportFlag!=4)) then begin testf = false; end;
                    if (RepSpec.flags[9]==0) then begin 
                      if ((IVr.ExportFlag==2) or (IVr.ExportFlag==4)) then begin testf = false; end;
                    end;
                end;
                switch (pertyp) begin
                  case 1:
                    if (IPr.TransDate>RepSpec.sEndDate) then begin testf = false; end;                    
                end;
              end;


              if (testf) then begin
                vinvoiceprntdf[IPrw.InvoiceNr] = true;
                RecordNew(VATr);
                SetupVATArray(VATr);
                if (RepSpec.ArtMode==1) then begin
                  PrintIVDataSLVATRep(RepSpec,IVr,VATIVTRr,lpnr,inclvat,firstivf,RepSpec.flags[12]);
                end;
                AddIVToVATArray(IVr,VATr,RepSpec.AccStr,startdate,enddate,pertyp,UseTaxTemplatesforTaxCalcf);
                if (IVr.Invalid==0) then begin
                  AddVATToVATArray(VATr,PeriodVATr);
                  AddVATToVATArray(VATr,TotVATr);

        //          AddIVToVATArray(TRr,PeriodVATr,inclvat,0);
        //          AddIVToVATArray(TRr,TotVATr,inclvat,0);
                end;
                if (RepSpec.ArtMode==1) then begin
                  PrintVATArray(RepSpec,VATr,RepSpec.flags[11]!=0,UseTaxTemplatesforTaxCalcf);
                  Gray_Divider(0,1);          
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure SLVATInvoices(record SMVc TotVATr,record SMVc PeriodVATr,record RcVc RepSpec,Date startdate,Date enddate,var LongInt lpnr,Integer pertyp,Integer exportflag,Boolean UseTaxTemplatesforTaxCalcf)
begin
  record TRVc TRr;
  record TRVc VATIVTRr;
  record SMVc VATr;
  record IVVc IVr;
  row IVVc IVrw;
  record ARVc ARr;
  Integer i,rwcnt;
  Boolean TrHs,testf,test2f,firstivf;
  Integer inclvat;
  val vivatval,v;
  LongInt friv,toiv;
  record BaseCurBlock bcur;
  string 20 ckey;
  record VATIVVc VATIVr;
  row SMVc VATrw;
  Integer vi,vrwcnt;

  firstivf = true;
  BlockLoad(bcur);
  friv = FirstInRange(RepSpec.f1,10);
  toiv = LastInRange(RepSpec.f1,10);
  switch (RepSpec.flags[6]) begin
    case 0: 
      ckey = "TransDate";
      if (RepSpec.flags[14]!=0) then begin
        ckey = "ServiceDelDate";
      end;
    case 1: 
      ckey = "InvDate";
      if (RepSpec.flags[14]!=0) then begin
        ckey = "ServiceDelDate";
      end;
    case 2: 
      ckey = "SerNr";
  end;
  TrHs = true;
  IVr.ServiceDelDate = startdate;
  IVr.TransDate = startdate;
  IVr.InvDate = startdate;
  IVr.SerNr = friv;
  while (LoopKey(ckey,IVr,1,TrHs)) begin
    switch (RepSpec.flags[6]) begin
      case 0:
        if (nonblankdate(enddate)) then begin
          if (RepSpec.flags[14]!=0) then begin
            if (IVr.ServiceDelDate>enddate) then begin TrHs = false; end;
          end else begin
            if (IVr.TransDate>enddate) then begin TrHs = false; end;
          end;
        end;
      case 1:
        if (nonblankdate(enddate)) then begin
          if (RepSpec.flags[14]!=0) then begin
            if (IVr.ServiceDelDate>enddate) then begin TrHs = false; end;
          end else begin
            if (IVr.InvDate>enddate) then begin TrHs = false; end;
          end;
        end;
      case 2:
        if (nonblank(RepSpec.f1)) then begin
          if (IVr.SerNr>toiv) then begin TrHs = false; end;
        end;
    end;
    if (TrHs) then begin
      testf = false;
      if (IVr.IPBookVAT!=0) then begin
        switch (pertyp) begin
          case 1:
            if (RepSpec.flags[14]!=0) then begin
              if (DateInRange(IVr.ServiceDelDate,startdate,enddate)) then begin
                testf = true;
              end;
            end else begin
              if (DateInRange(IVr.TransDate,startdate,enddate)) then begin
                testf = true;
              end;
            end;
            if (RepSpec.flags[14]!=0) then begin
              if (nonblankdate(IVr.ServiceDelDate)) then begin
                if (DateInRange(IVr.ServiceDelDate,startdate,enddate)==false) then begin
                  testf = false;
                end;
              end;
            end;
        end;
      end else begin
        if (RepSpec.flags[14]!=0) then begin
          if (DateInRange(IVr.ServiceDelDate,startdate,enddate)) then begin
            testf = true;
          end;
        end else begin
          if (DateInRange(IVr.TransDate,startdate,enddate)) then begin
            testf = true;
          end;
        end;
        if (pertyp!=1) then begin testf = false; end;
        if (RepSpec.flags[14]!=0) then begin
          if (nonblankdate(IVr.ServiceDelDate)) then begin
            if (DateInRange(IVr.ServiceDelDate,startdate,enddate)==false) then begin
              testf = false;
            end;
          end;
        end;
      end;
      if (nonblank(RepSpec.f1)) then begin
        if (IVr.SerNr<friv) then begin
          testf = false;
        end;
        if (IVr.SerNr>toiv) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        if (IVr.IPBookVAT!=0) then begin
        end else begin
          if (CheckVATIVExists(RepSpec,IVr.SerNr,startdate,enddate,VATIVTRr)==false) then begin
            testf = false;
          end;
        end;
      end;  
      if (RepSpec.flags[3]==0) then begin
        if (IVr.InvType!=kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales and IVr.InvType!=kInvoiceTypeInterest) then begin
          testf = false;
        end;
      end;
      if (RepSpec.flags[4]==0) then begin
        if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
          testf = false;
        end;
      end;
      if (RepSpec.flags[17]==0) then begin
        if (IVr.InvType==kInvoiceTypeInterest) then begin
          testf = false;
        end;
      end;
      if (RepSpec.flags[5]==1) then begin
        if (IVr.FiscalFlag==0) then begin
          testf = false;
        end;
      end;    
      if (RepSpec.flags[5]==2) then begin
        if (IVr.FiscalFlag!=0) then begin
          testf = false;
        end;
      end;
      if (true) then begin
        if (IVr.OKFlag==0) then begin
          testf = false;
        end;
      end;
      switch (exportflag) begin
        case 0: 
          if (IVr.ExportFlag!=0) then begin testf = false; end;
          if (RepSpec.flags[7]==0) then begin 
            if (IVr.ExportFlag==0) then begin testf = false; end;
          end;
        case 1: 
          if ((IVr.ExportFlag!=1) and (IVr.ExportFlag!=3)) then begin testf = false; end;
          if (RepSpec.flags[8]==0) then begin 
            if ((IVr.ExportFlag==1) or (IVr.ExportFlag==3)) then begin testf = false; end;
          end;
        case 2: 
          if ((IVr.ExportFlag!=2) and (IVr.ExportFlag!=4)) then begin testf = false; end;
          if (RepSpec.flags[9]==0) then begin 
            if ((IVr.ExportFlag==2) or (IVr.ExportFlag==4)) then begin testf = false; end;
          end;
      end;
      if (testf) then begin
        VATIVr.IVNr = IVr.SerNr;
        if (ReadFirstKey("IVNr",VATIVr,1,true)) then begin
          test2f = true;
          if (VATIVr.OKFlag==0) then begin
            test2f = false;
          end;
          if (test2f) then begin
            if (VATIVr.TransDate<IVr.TransDate) then begin
              testf = false;
            end;
          end;
        end;
      end;
      if (testf) then begin
        if (nonblank(RepSpec.AccStr)) then begin
          testf = false;
          rwcnt = MatRowCnt(IVr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVr,i,IVrw);
            if (IVrw.VATCode!=RepSpec.AccStr) then begin
              testf = true;
              i = rwcnt;
            end;
          end;
        end;
      end;
      if (testf) then begin
        if (IVr.IPBookVAT!=0) then begin
          switch (pertyp) begin
            case kSLVATRepCurrentPeriod:
              testf = false;
          end;
        end;
      end;
      if (testf) then begin
        RecordNew(VATr);
        SetupVATArray(VATr);
        if (RepSpec.ArtMode==1) then begin
          PrintIVDataSLVATRep(RepSpec,IVr,VATIVTRr,lpnr,inclvat,firstivf,RepSpec.flags[12]);
        end;
        AddIVToVATArray(IVr,VATr,RepSpec.AccStr,startdate,enddate,pertyp,UseTaxTemplatesforTaxCalcf);
        if (IVr.Invalid==0) then begin
          AddVATToVATArray(VATr,PeriodVATr);
          AddVATToVATArray(VATr,TotVATr);

//          AddIVToVATArray(TRr,PeriodVATr,inclvat,0);
//          AddIVToVATArray(TRr,TotVATr,inclvat,0);
        end;
        if (RepSpec.ArtMode==1) then begin
          PrintVATArray(RepSpec,VATr,RepSpec.flags[11]!=0,UseTaxTemplatesforTaxCalcf);
          Gray_Divider(0,1);          
        end;
      end;
    end;
  end;
  return;
end;

procedure PrintIntIVData(record IntIVVc IntIVr,var LongInt lpnr,record CYBlock CYRec,var Boolean firstf,Integer flags12)
begin
  Date td,firstipdate;
  record VIVc VIr;
  Boolean vif;
  record CUVc VEr;
  
  if (IntIVr.VISerNr>0) then begin
    VIr.SerNr = IntIVr.VISerNr;
    vif = ReadFirstMain(VIr,1,true);
  end;
  if (firstf) then begin
    StartFormat(15);
     OutString(0,0,USetStr(10696),false);
    EndFormat;
    Gray_Divider(0,1);
    firstf = false;
  end;
  if (true) then begin
    VEr.Code = VIr.VECode;
    if (ReadFirstMain(VEr,1,true)) then begin
    end;
    StartFormat(15);
    OutLongIntOvst(0,0,lpnr,false,IntIVr.Invalid);
    OutLongIntOvst(3,"DblIntIVVc",IntIVr.SerNr,false,IntIVr.Invalid);
    td = IntIVr.TransDate;
    OutDateOvst(4,0,td,false,IntIVr.Invalid);
    if (vif) then begin
      OutStringOvst(5,0,VIr.VECode,false,IntIVr.Invalid);
      if (nonblank(VIr.VEName)) then begin
        OutStringOvst(6,0,VIr.VEName,false,IntIVr.Invalid);
      end else begin
        OutStringOvst(6,0,VEr.Name,false,IntIVr.Invalid);
      end;
    end else begin
      OutStringOvst(6,0,CYRec.CompName,false,IntIVr.Invalid);
    end;
    EndFormat;
    if (vif) then begin
      StartFormat(15);
      if (nonblank(VIr.Addr1)) then begin
        OutString(6,0,VIr.Addr1,false);
      end else begin
        OutString(6,0,VEr.InvAddr0,false);
      end;
      EndFormat;
    end else begin
      if (nonblank(CYRec.Addr0)) then begin
        StartFormat(15);
         OutString(6,0,CYRec.Addr0,false);
        EndFormat;
      end;
    end;
    StartFormat(15);
//     OutString(2,0,IVr.InvoiceNr,false);
//     OutDateOvst(4,0,IVr.InvDate,false,IntIVr.Invalid);
     if (vif) then begin
       OutStringOvst(5,0,VIr.VATNr,false,IntIVr.Invalid);
       if (nonblank(VIr.Addr2)) then begin
         OutStringOvst(6,0,VIr.Addr2,false,IntIVr.Invalid);
       end else begin
         OutStringOvst(6,0,VEr.InvAddr1,false,IntIVr.Invalid);
       end;
     end else begin
       OutStringOvst(5,0,CYRec.VATNr,false,IntIVr.Invalid);
       OutStringOvst(6,0,CYRec.Addr1,false,IntIVr.Invalid);
      end;
    EndFormat;
    if (vif) then begin
      if (nonblank(VIr.Addr3)) then begin
        StartFormat(15);
         OutString(6,0,VIr.Addr3,false);
        EndFormat;
      end else begin
        StartFormat(15);
         OutString(6,0,VEr.InvAddr2,false);
        EndFormat;
      end;
      if (nonblank(VIr.InvAddr3)) then begin
        StartFormat(15);
         OutString(6,0,VIr.InvAddr3,false);
        EndFormat;
      end else begin
        StartFormat(15);
         OutString(6,0,VEr.InvAddr3,false);
        EndFormat;
      end;
      if (nonblank(VIr.InvAddr4)) then begin
        StartFormat(15);
         OutString(6,0,VIr.InvAddr4,false);
        EndFormat;
      end else begin
        StartFormat(15);
         OutString(6,0,VEr.InvAddr4,false);
        EndFormat;
      end;
    end else begin
      if (nonblank(CYRec.Addr2)) then begin
        StartFormat(15);
//       OutDate(4,0,firstipdate,false);
         OutString(6,0,CYRec.Addr2,false);
        EndFormat;
      end;
      if (nonblank(CYRec.Addr3)) then begin
        StartFormat(15);
         OutString(6,0,CYRec.Addr3,false);
        EndFormat;
      end;
      if (nonblank(CYRec.Addr4)) then begin
        StartFormat(15);
         OutString(6,0,CYRec.Addr4,false);
        EndFormat;
      end;
    end;
    lpnr = lpnr + 1;
    StartFormat(10);
    EndFormat;
    if (flags12!=0) then begin
      Gray_Divider(40,1);
    end else begin
      Gray_Divider(4,1);
    end;
  end;
  RETURN;
END;

procedure AddIntIVToVATArray(record IntIVVc IntIVr,var record SMVc VATr,string skipwithvatcode)
BEGIN
  row IntIVVc IntIVrw;
  Integer i,rwcnt;

  rwcnt = MatRowCnt(IntIVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IntIVr,i,IntIVrw);
    if (IntIVrw.VATCode==skipwithvatcode) then begin goto LSKIPAddIntIVToVATArray; end;
    if (IntIVrw.stp==1) then begin
      AddVATBaseVATRep(VATr,IntIVrw.VATCode,IntIVrw.Sum,0,0,IntIVr.Invalid,"",blankval,blankval,blankval,blankval,blankval);
    end;
LSKIPAddIntIVToVATArray:;    
  end;
  CalcVAT(VATr,0);
  RETURN;
END;

global
procedure SLVATInternalInvoices(record SMVc TotVATr,record SMVc PeriodVATr,record RcVc RepSpec,Date startdate,Date enddate,var LongInt lpnr,Integer exportflag,Boolean slf)
BEGIN
  record TRVc TRr;
  record SMVc VATr;
  record VIVc VIr;
  record IntIVVc IntIVr;
  row IntIVVc IntIVrw;
  Integer i,rwcnt;
  Boolean TrHs,testf;
  Integer inclvat;
  val vivatval;
  LongInt friv,toiv;
  record BaseCurBlock bcur;
  string 20 ckey;
  record CYBlock CYRec;
  Boolean firstf;

  if (RepSpec.flags[10]==0) then begin goto LSLVATInternalInvoices; end;
  firstf = true;
  BlockLoad(bcur);
  BlockLoad(CYRec);
  friv = FirstInRange(RepSpec.f1,10);
  toiv = LastInRange(RepSpec.f1,10);
  ckey = "TransDate";
  TrHs = true;
  IntIVr.TransDate = startdate;
  while (LoopKey(ckey,IntIVr,1,TrHs)) begin
    if (IntIVr.TransDate>enddate) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = false;
      if (DateInRange(IntIVr.TransDate,startdate,enddate)) then begin
        testf = true;
      end;
      if (nonblank(RepSpec.f1)) then begin
        if (IntIVr.SerNr<friv) then begin
          testf = false;
        end;
        if (IntIVr.SerNr>toiv) then begin
          testf = false;
        end;
      end;
      if (true) then begin
        if (IntIVr.OKFlag==0) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        if (nonblank(RepSpec.AccStr)) then begin
          testf = false;
          rwcnt = MatRowCnt(IntIVr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IntIVr,i,IntIVrw);
            if (IntIVrw.VATCode!=RepSpec.AccStr) then begin
              testf = true;
              i = rwcnt;
            end;
          end;
        end;
      end;
      if (IntIVr.VISerNr>0) then begin
        VIr.SerNr = IntIVr.VISerNr;
        if (ReadFIrstMain(VIr,1,true)) then begin
          switch (exportflag) begin
            case 0: 
              if (VIr.ExportFlag!=0) then begin testf = false; end;
              if (RepSpec.flags[7]==0) then begin 
                if (VIr.ExportFlag==0) then begin testf = false; end;
              end;
            case 1: 
              if ((VIr.ExportFlag!=1) and (VIr.ExportFlag!=3)) then begin testf = false; end;
              if (RepSpec.flags[8]==0) then begin 
                if ((VIr.ExportFlag==1) or (VIr.ExportFlag==3)) then begin testf = false; end;
              end;
            case 2: 
              if ((VIr.ExportFlag!=2) and (VIr.ExportFlag!=4)) then begin testf = false; end;
              if (RepSpec.flags[9]==0) then begin 
                if ((VIr.ExportFlag==2) or (VIr.ExportFlag==4)) then begin testf = false; end;
              end;
          end;
        end;
      end else begin
        if (exportflag!=0) then begin testf = false; end;
      end;
      if (testf) then begin

        RecordNew(VATr);
        SetupVATArray(VATr);
        if (RepSpec.ArtMode==1) then begin
          PrintIntIVData(IntIVr,lpnr,CYRec,firstf,RepSpec.flags[12]);
        end;
        if (slf) then begin
          AddIntIVToVATArray(IntIVr,VATr,RepSpec.AccStr);
        end else begin
          AddIntIVToVATArray(IntIVr,VATr,RepSpec.AccStr);
//          AddIntIVToVIVATArray(IntIVr,VATr,IntIVr.Invalid,UseTaxTemplatesforTaxCalc);
        end;
        if (IntIVr.Invalid==0) then begin
          AddVATToVATArray(VATr,PeriodVATr);
          AddVATToVATArray(VATr,TotVATr);
        end;
        if (RepSpec.ArtMode==1) then begin
          PrintVATArray(RepSpec,VATr,RepSpec.flags[11]!=0,UseTaxTemplatesforTaxCalc);
          Gray_Divider(0,1);          
        end;
      end;
    end;
  end;
LSLVATInternalInvoices:;  
  RETURN;
END;

procedure PrintRAData(record RestAccVc RAr,var LongInt lpnr,record CYBlock CYRec,var Boolean firstf,Integer flags12)
begin
  Date td,firstipdate;
  
  if (firstf) then begin
    StartFormat(15);
     OutString(0,0,USetStr(10696),false);
    EndFormat;
    Gray_Divider(0,1);
    firstf = false;
  end;
  if (true) then begin
    StartFormat(15);
    OutLongIntOvst(0,0,lpnr,false,RAr.Invalid);
    OutLongIntOvst(3,"DblRestAccVc",RAr.SerNr,false,RAr.Invalid);
    td = RAr.TransDate;
    OutDateOvst(4,0,td,false,RAr.Invalid);
    OutStringOvst(5,0,CYRec.CompName,false,RAr.Invalid);
    EndFormat;
    if (nonblank(CYRec.Addr0)) then begin
      StartFormat(15);
       OutString(6,0,CYRec.Addr0,false);
      EndFormat;
    end;
    StartFormat(15);
//     OutString(2,0,IVr.InvoiceNr,false);
//     OutDateOvst(4,0,IVr.InvDate,false,RAr.Invalid);
     OutStringOvst(5,0,CYRec.VATNr,false,RAr.Invalid);
     OutStringOvst(6,0,CYRec.Addr1,false,RAr.Invalid);
    EndFormat;
    if (nonblank(CYRec.Addr2)) then begin
      StartFormat(15);
//       OutDate(4,0,firstipdate,false);
       OutString(6,0,CYRec.Addr2,false);
      EndFormat;
    end;
    if (nonblank(CYRec.Addr3)) then begin
      StartFormat(15);
       OutString(6,0,CYRec.Addr3,false);
      EndFormat;
    end;
    lpnr = lpnr + 1;
    StartFormat(10);
    EndFormat;
    if (flags12!=0) then begin
      Gray_Divider(40,1);
    end else begin
      Gray_Divider(4,1);
    end;
  end;
  return;
end;

procedure AddRestAccToVATArray(record RestAccVc RAr,var record SMVc VATr,string skipwithvatcode)
begin
  row RestAccVc RArw;
  Integer i,rwcnt;

  rwcnt = MatRowCnt(RAr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RAr,i,RArw);
    if (RArw.VATCode==skipwithvatcode) then begin goto LSKIPAddRAToVATArray; end;
    if (RArw.stp==1) then begin
      AddVATBaseVATRep(VATr,RArw.VATCode,RArw.Sum,2,0,RAr.Invalid,"",blankval,blankval,blankval,blankval,blankval);
    end;
LSKIPAddRAToVATArray:;    
  end;
  CalcVAT(VATr,2);
  return;
end;

procedure SLVATBarTabs(record SMVc TotVATr,record SMVc PeriodVATr,record RcVc RepSpec,Date startdate,Date enddate,var LongInt lpnr,Integer exportflag,Boolean slf)
begin
  record TRVc TRr;
  record SMVc VATr;
  record VIVc VIr;
  record RestAccVc RAr;
  row RestAccVc RArw;
  Integer i,rwcnt;
  Boolean TrHs,testf;
  Integer inclvat;
  val vivatval;
  LongInt friv,toiv;
  record BaseCurBlock BCb;
  string 20 ckey;
  record CYBlock CYb;
  Boolean firstf;

  if (RepSpec.flags[18]==0) then begin goto LSLVATBarTabs; end;
  firstf = true;
  BlockLoad(BCb);
  BlockLoad(CYb);
  friv = FirstInRange(RepSpec.f1,10);
  toiv = LastInRange(RepSpec.f1,10);
  ckey = "TransDate";
  TrHs = true;
  RAr.TransDate = startdate;
  while (LoopKey(ckey,RAr,1,TrHs)) begin
    if (RAr.TransDate>enddate) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = false;
      if (DateInRange(RAr.TransDate,startdate,enddate)) then begin
        testf = true;
      end;
      if (nonblank(RepSpec.f1)) then begin
        if (RAr.SerNr<friv) then begin
          testf = false;
        end;
        if (RAr.SerNr>toiv) then begin
          testf = false;
        end;
      end;
      if (true) then begin
        if (RAr.Closed==0) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        if (nonblank(RepSpec.AccStr)) then begin
          testf = false;
          rwcnt = MatRowCnt(RAr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(RAr,i,RArw);
            if (RArw.VATCode!=RepSpec.AccStr) then begin
              testf = true;
              i = rwcnt;
            end;
          end;
        end;
      end;
      if (exportflag!=0) then begin testf = false; end;
      if (testf) then begin

        RecordNew(VATr);
        SetupVATArray(VATr);
        if (RepSpec.ArtMode==1) then begin
          PrintRAData(RAr,lpnr,CYb,firstf,RepSpec.flags[12]);
        end;
        AddRestAccToVATArray(RAr,VATr,RepSpec.AccStr);
        if (RAr.Invalid==0) then begin
          AddVATToVATArray(VATr,PeriodVATr);
          AddVATToVATArray(VATr,TotVATr);
        end;
        if (RepSpec.ArtMode==1) then begin
          PrintVATArray(RepSpec,VATr,RepSpec.flags[11]!=0,UseTaxTemplatesforTaxCalc);
          Gray_Divider(0,1);          
        end;
      end;
    end;
  end;
LSLVATBarTabs:;  
  return;
end;

procedure SLVATRecords(record SMVc TotVATr,record SMVc PeriodVATr,record RcVc RepSpec,Date startdate,Date enddate,Integer pertyp,Integer exportflag,var LongInt lpnr,Boolean UseTaxTemplatesforTaxCalcf)
BEGIN
  record TRVc TRr;
  record TRVc VATIVTRr;
  Boolean TrHs,testf;
  record SMVc VATr;
  string 10 apacc;
  Integer inclvat;

  SLVATCorrections(TotVATr,PeriodVATr,RepSpec,startdate,enddate,lpnr,pertyp,exportflag);
  if (pertyp==1) then begin
    SLVATInvoices(TotVATr,PeriodVATr,RepSpec,startdate,enddate,lpnr,pertyp,exportflag,UseTaxTemplatesforTaxCalcf);
    SLVATReceipts(TotVATr,PeriodVATr,RepSpec,startdate,enddate,lpnr,pertyp,exportflag,UseTaxTemplatesforTaxCalcf);
    SLVATInternalInvoices(TotVATr,PeriodVATr,RepSpec,startdate,enddate,lpnr,exportflag,true);
    SLVATPOSInvoices(TotVATr,PeriodVATr,RepSpec,startdate,enddate,lpnr,exportflag,UseTaxTemplatesforTaxCalcf);
    SLVATBarTabs(TotVATr,PeriodVATr,RepSpec,startdate,enddate,lpnr,exportflag,UseTaxTemplatesforTaxCalcf);
  end;
  RETURN;
END;

procedure InitPeriodVAT(record SMVc PeriodVATr,Integer pertyp,var LongInt lpnr)
begin
  RecordNew(PeriodVATr);
  SetupVATArray(PeriodVATr);
  StartFormat(15);
   OutString(0,0,USetStr(10689+pertyp),false);
  EndFormat;
  Gray_Divider(0,4);
  lpnr = 1;
  return;
end;

procedure PrintPeriodVAT(record RcVc RepSpec,record SMVc PeriodVATr,Integer pertyp,Boolean UseTaxTemplatesforTaxCalcf)
begin
  StartFormat(15);
   OutString(0,0,USetStr(10667) & " " & USetStr(10664+pertyp),false);
  EndFormat;
  PrintVATArray(RepSpec,PeriodVATr,true,UseTaxTemplatesforTaxCalcf);
  Black_Divider(0,1);
  return;
end;

procedure IVPrintHeader2()
BEGIN
  SetRepCol(2,30);
  SetRepCol(3,50);
  SetRepCol(4,120);
  SetRepCol(5,200);
  SetRepCol(6,300);
  SetRepCol(7,340);
  SetRepCol(8,410);
  StartFormat(15);
   OutString(0,0,USetStr(10676),false);
   OutString(3,0,USetStr(10677),false);
   OutString(4,0,USetStr(10678),false);
   OutString(5,0,USetStr(10679),false);
//   OutString(6,0,USetStr(10656),false);
  EndFormat;
  StartFormat(15);
   OutString(2,0,USetStr(10695),false);
   OutString(4,0,USetStr(10682),false);
   OutString(5,0,USetStr(10683),false);
   OutString(6,0,USetStr(10684),false);
  EndFormat;
  Gray_Divider(0,1);
  RETURN;
END;

global
function Boolean ProperVATPeriod(record RcVc RepSpec)
BEGIN
  Boolean res;
  Date ed,ed2;
  
  res = true;
  if (GetDay(RepSpec.sStartDate)!=1) then begin
    res = false;
  end;
  ed = RepSpec.sStartDate;
  ed = AddDay(ed,-GetDay(ed) + DaysInMonth(GetYear(ed),GetMonth(ed)));
  ed2 = AddMonth(RepSpec.sStartDate,2);
  ed2 = AddDay(ed2,-GetDay(ed2) + DaysInMonth(GetYear(ed2),GetMonth(ed2)));  
  if (RepSpec.sEndDate!=ed) and (RepSpec.sEndDate!=ed2) then begin
    res = false;
  end;
  ProperVATPeriod = res;
  return;
end;

global
procedure SLVATRepRn(record RcVc RepSpec)
begin
  Date sd,ed;
  record SMVc PeriodVATr;
  record SMVc TotVATr;
  record SMVc NextPerVATr;
  record SMVc TotTotVATr;
  Date blankd;
  Boolean UseTaxTemplatesforTaxCalcf;
  LongInt lpnr;
  
//  if (ProperVATPeriod(RepSpec)==false) then begin
//    MessageBox(10693,"");
//    goto LSLVATRepRn;
//  end;
  StartReportJob(USetStr(10675));
  PrintHeader1(RepSpec);
  EndHeader;
  IVPrintHeader2;

  UseTaxTemplatesforTaxCalcf = UseTaxTemplatesforTaxCalc;

  RecordNew(TotTotVATr);
  SetupVATArray(TotTotVATr);  
  
  if (true) then begin
    StartFormat(15);
    OutString(0,0,USetStr(10697),false);
    EndFormat;
    Gray_Divider(0,1);
    
    RecordNew(TotVATr);
    RecordNew(NextPerVATr);
    SetupVATArray(TotVATr);  
    SetupVATArray(NextPerVATr);  

    InitPeriodVAT(PeriodVATr,0,lpnr);
    SLVATRecords(TotVATr,PeriodVATr,RepSpec,RepSpec.sStartDate,RepSpec.sEndDate,0,0,lpnr,UseTaxTemplatesforTaxCalcf);
    PrintPeriodVAT(RepSpec,PeriodVATr,0,UseTaxTemplatesforTaxCalcf);

    InitPeriodVAT(PeriodVATr,1,lpnr);
    SLVATRecords(TotVATr,PeriodVATr,RepSpec,RepSpec.sStartDate,RepSpec.sEndDate,1,0,lpnr,UseTaxTemplatesforTaxCalcf);
    PrintPeriodVAT(RepSpec,PeriodVATr,1,UseTaxTemplatesforTaxCalcf);

    InitPeriodVAT(PeriodVATr,2,lpnr);
    if (HasLocalization("POL")) then begin
      sd.year = 2010; sd.month = 1; sd.day = 1;
      SLVATInvoices(NextPerVATr,PeriodVATr,RepSpec,sd,RepSpec.sEndDate,lpnr,2,0,UseTaxTemplatesforTaxCalcf);
    end;

    sd = AddDay(RepSpec.sEndDate,1);
    ed = blankd;
    SLVATRecords(NextPerVATr,PeriodVATr,RepSpec,sd,ed,2,0,lpnr,UseTaxTemplatesforTaxCalcf);
    PrintPeriodVAT(RepSpec,PeriodVATr,2,UseTaxTemplatesforTaxCalcf);
    StartFormat(15);
     OutString(0,0,USetStr(10692),false);
    EndFormat;
    Gray_Divider(0,1);
    PrintVATArray(RepSpec,TotVATr,true,UseTaxTemplatesforTaxCalcf);
    AddVATToVATArray(TotVATr,TotTotVATr);
  end;
  if (RepSpec.flags[8]!=0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(10698),false);
    EndFormat;
    Gray_Divider(0,1);

    RecordNew(TotVATr);
    RecordNew(NextPerVATr);
    SetupVATArray(TotVATr);  
    SetupVATArray(NextPerVATr);  
    InitPeriodVAT(PeriodVATr,0,lpnr);
    SLVATRecords(TotVATr,PeriodVATr,RepSpec,RepSpec.sStartDate,RepSpec.sEndDate,0,1,lpnr,UseTaxTemplatesforTaxCalcf);
    PrintPeriodVAT(RepSpec,PeriodVATr,0,UseTaxTemplatesforTaxCalcf);

    InitPeriodVAT(PeriodVATr,1,lpnr);
    SLVATRecords(TotVATr,PeriodVATr,RepSpec,RepSpec.sStartDate,RepSpec.sEndDate,1,1,lpnr,UseTaxTemplatesforTaxCalcf);
    PrintPeriodVAT(RepSpec,PeriodVATr,1,UseTaxTemplatesforTaxCalcf);

    InitPeriodVAT(PeriodVATr,2,lpnr);
    if (HasLocalization("POL")) then begin
      sd.year = 2010; sd.month = 1; sd.day = 1;
      SLVATInvoices(NextPerVATr,PeriodVATr,RepSpec,sd,RepSpec.sEndDate,lpnr,2,1,UseTaxTemplatesforTaxCalcf);
    end;
    sd = AddDay(RepSpec.sEndDate,1);
    ed = blankd;
    SLVATRecords(NextPerVATr,PeriodVATr,RepSpec,sd,ed,2,1,lpnr,UseTaxTemplatesforTaxCalcf);
    PrintPeriodVAT(RepSpec,PeriodVATr,2,UseTaxTemplatesforTaxCalcf);
    StartFormat(15);
     OutString(0,0,USetStr(10692),false);
    EndFormat;
    Gray_Divider(0,1);
    PrintVATArray(RepSpec,TotVATr,true,UseTaxTemplatesforTaxCalcf);
    AddVATToVATArray(TotVATr,TotTotVATr);
  end;
  if (RepSpec.flags[9]!=0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(10699),false);
    EndFormat;
    Gray_Divider(0,1);

    RecordNew(TotVATr);
    RecordNew(NextPerVATr);
    SetupVATArray(TotVATr);  
    SetupVATArray(NextPerVATr);  
    InitPeriodVAT(PeriodVATr,0,lpnr);
    SLVATRecords(TotVATr,PeriodVATr,RepSpec,RepSpec.sStartDate,RepSpec.sEndDate,0,2,lpnr,UseTaxTemplatesforTaxCalcf);
    PrintPeriodVAT(RepSpec,PeriodVATr,0,UseTaxTemplatesforTaxCalcf);

    InitPeriodVAT(PeriodVATr,1,lpnr);
    SLVATRecords(TotVATr,PeriodVATr,RepSpec,RepSpec.sStartDate,RepSpec.sEndDate,1,2,lpnr,UseTaxTemplatesforTaxCalcf);
    PrintPeriodVAT(RepSpec,PeriodVATr,1,UseTaxTemplatesforTaxCalcf);
    
    InitPeriodVAT(PeriodVATr,2,lpnr);
    if (HasLocalization("POL")) then begin
      sd.year = 2010; sd.month = 1; sd.day = 1;
      SLVATInvoices(NextPerVATr,PeriodVATr,RepSpec,sd,RepSpec.sEndDate,lpnr,2,2,UseTaxTemplatesforTaxCalcf);
    end;
    sd = AddDay(RepSpec.sEndDate,1);
    ed = blankd;
    SLVATRecords(NextPerVATr,PeriodVATr,RepSpec,sd,ed,2,2,lpnr,UseTaxTemplatesforTaxCalcf);
    PrintPeriodVAT(RepSpec,PeriodVATr,2,UseTaxTemplatesforTaxCalcf);
    StartFormat(15);
     OutString(0,0,USetStr(10692),false);
    EndFormat;
    Gray_Divider(0,1);
    PrintVATArray(RepSpec,TotVATr,true,UseTaxTemplatesforTaxCalcf);
    AddVATToVATArray(TotVATr,TotTotVATr);
  end;
  StartFormat(15);
   OutString(0,0,USetStr(10674),false);
  EndFormat;
  Gray_Divider(0,1);
  PrintVATArray(RepSpec,TotTotVATr,true,UseTaxTemplatesforTaxCalcf);
  EndJob;
LSLVATRepRn:;
  RETURN;
END;
