external procedure HTSupplier(string, var string);
external procedure HTLocations(string, string, var string);
external function Boolean GetFirstPurchaseItem2(string,string,string,var record PIVc);
external procedure HTITs(string,string,var string);
external procedure HTItem(string,var string);
external updating procedure StorePO(Array record POVc,Integer);
external function val GetPOQty(string,Date,Date,string,Boolean);
external function val GetPurchProgInStock(string,string,string);
external procedure AddToPO(Array record POVc,var Integer,string,string,Date,val,val);

function Boolean DoPurchProg(record RcVc RepSpec,string frin,string toin,var record INVc INr,var Array record POVc aPOr, var Integer pocnt,Integer mode)
BEGIN
  record INProgVc INProgr;
  record PrelORPUStockVc PrelORPUStockr;
  record PIVc PIr;
  Boolean TrHs,testf;
  string 20 lastin;
  val poqty,t,instock,flowinstock;
  Integer reportmode,maintanancemode,exportmode;
  string 5 frgr,togr;
  Integer keys;
  Date bldat,lastevdat;
  Boolean itemfound;

  itemfound = false;
  frgr = FirstInRange(RepSpec.f2,5);
  togr = LastInRange(RepSpec.f2,5);
  reportmode = 0;
  maintanancemode = 1;
  exportmode = 2;
  TrHs = true;
  PrelORPUStockr.FileName = "ORVc";
  PrelORPUStockr.ItemCode = frin;
  TrHs = true;
  while (LoopKey("MainKey",PrelORPUStockr,2,TrHs)) begin
    if (TrHs) then begin      
      if (PrelORPUStockr.FileName!="ORVc") then begin TrHs = false;end;
      if (PrelORPUStockr.ItemCode<frin) then begin TrHs = false;end;
      if (PrelORPUStockr.ItemCode>toin) then begin TrHs = false;end;
    end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.f3)) then begin
        if (PrelORPUStockr.Location!=RepSpec.f3) then begin testf = false;end;
      end;
      if (nonblankdate(RepSpec.d1)) then begin
        if (PrelORPUStockr.OrderedDate>=RepSpec.d1) then begin testf = false;end; // It is the Order dates Selection that matters
      end;
      if (testf) then begin
        if (nonblank(RepSpec.f2)) then begin
          if (INr.Group<frgr) then begin testf = false;end;
          if (INr.Group>togr) then begin testf = false;end;
        end;
      end;
      if (testf) then begin
        if (lastin!=PrelORPUStockr.ItemCode) then begin
          lastevdat = bldat;
          if (mode==reportmode) then begin
            Black_Divider(0,1);
            StartFormat(15);
            OutString(0,"DblINVc",PrelORPUStockr.ItemCode,false);
            OutString(100,0,INr.Name,false);
            OutString(390,0,USetStr(13729) & ValToString(INr.MinLevel,M4UVal,"","",0),true);
            EndFormat;
          end;
          itemfound = true;
          if (GetFirstPurchaseItem2(PrelORPUStockr.ItemCode,RepSpec.f3,"",PIr)) then begin
          end;
          instock = GetPurchProgInStock(RepSpec.f3,PrelORPUStockr.ItemCode,PrelORPUStockr.Location);
          flowinstock = instock;
        end;
        poqty = GetPOQty(PrelORPUStockr.ItemCode,lastevdat,PrelORPUStockr.EventDate,PrelORPUStockr.Location,false);
        flowinstock = flowinstock + poqty - PrelORPUStockr.Qty;
        t = PrelORPUStockr.Qty-instock-poqty+INr.MinLevel;
        if (t<=0) then begin
          t = BlankVal;
        end;
        switch (mode) begin
          case 0://reportmode
              StartFormat(15);
               OutDate(30,0,PrelORPUStockr.OrderedDate,false); // EventDate is when the item is needed, OrderDate is the planned del of the Finnished item
               OutString(90,0,"",false);
               OutVal(160,0,instock,M4UVal,true);
               OutStringID(220,"DblPurchProgOR",ValToString(PrelORPUStockr.Qty,M4UVal,"","",0),true,PrelORPUStockr.ItemCode & ":" & PrelORPUStockr.EventDate);
               OutStringID(280,"DblPurchProgPORep",ValToString(poqty,M4UVal,"","",0),true,PrelORPUStockr.ItemCode & "," & lastevdat & "," & PrelORPUStockr.EventDate & "," & PrelORPUStockr.Location);
               if (t>0) then begin
                 OutDate(300,0,AddDay(PrelORPUStockr.EventDate,-PIr.PlannedDelDays),false);
               end else begin
                 OutString(300,0,"",false);
               end;
               OutVal(440,0,flowinstock,M4UVal,true);
               OutVal(480,0,t,M4UVal,true);
              EndFormat;
          case 1://maintanancemode
            if (t>0) then begin
              AddToPO(aPOr,pocnt,PrelORPUStockr.ItemCode,PrelORPUStockr.Location,AddDay(PrelORPUStockr.EventDate,-PIr.PlannedDelDays),PIr.PlannedDelDays,t);
            end;
          case 2://exportmode
            ExportString(PrelORPUStockr.ItemCode);
            ExportString(PrelORPUStockr.FileName);
            ExportString(PrelORPUStockr.Location);
            ExportString(PrelORPUStockr.OrderedDate);
            ExportString(PrelORPUStockr.EventDate);
            ExportString(AddDay(PrelORPUStockr.EventDate,-PIr.PlannedDelDays));
            ExportVal(instock,M4UVal);
            ExportVal(PrelORPUStockr.Qty,M4UVal);
            ExportVal(poqty,M4UVal);
            ExportVal(flowinstock,M4UVal);
            ExportVal(t,M4UVal);
            ExportVal(INr.InPrice,M4Val);
            ExportVal(INr.InPrice * t,M4Val);
            ExportString(PIr.VECode);
            ExportVal(PIr.PlannedDelDays,M4UVal);
            NewLine;
        end;
        flowinstock = flowinstock + t;
        instock = flowinstock;
        lastin = PrelORPUStockr.ItemCode;
        lastevdat = AddDay(PrelORPUStockr.EventDate,1);;
      end;
    end;
  end;
  lastin = "";
  bldat = lastevdat;
  TrHs = true;
  INProgr.FileName = "PUVc";
  INProgr.ItemCode = frin;
//  INProgr.NeededDate = RepSpec.d1; // Will not read too many
  while (LoopKey("NeededDate",INProgr,2,TrHs)) begin
    if (TrHs) then begin 
      if (INProgr.FileName!="PUVc") then begin TrHs = false;end;
      if (INProgr.ItemCode<frin) then begin TrHs = false;end;
      if (INProgr.ItemCode>toin) then begin TrHs = false;end;
    end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.f3)) then begin
        if (INProgr.Location!=RepSpec.f3) then begin testf = false;end;
      end;
      if (nonblank(RepSpec.f1)) then begin
        if (INProgr.ItemCode<frin) then begin testf = false;end;
        if (INProgr.ItemCode>toin) then begin testf = false;end;
      end;
      if (nonblankdate(RepSpec.d1)) then begin
        if (INProgr.OrderDate<RepSpec.d1) then begin testf = false;end; // It is the Order dates Selection that matters
      end;
      if (testf) then begin
        if (nonblank(RepSpec.f2)) then begin
          if (INr.Group<frgr) then begin testf = false;end;
          if (INr.Group>togr) then begin testf = false;end;
        end;
      end;
      if (testf) then begin
        if (lastin!=INProgr.ItemCode) then begin
          if (itemfound==false) then begin
            instock = GetPurchProgInStock(RepSpec.f3,INProgr.ItemCode,INProgr.Location);
            flowinstock = instock;
          end;
          if (mode==reportmode) then begin
//            if (RepSpec.flags[0]==0) then begin
              if (itemfound==false) then begin
                Black_Divider(0,1);
                StartFormat(15);
                OutString(0,"DblINVc",INProgr.ItemCode,false);
                OutString(100,0,INr.Name,false);
                OutString(390,0,USetStr(13729) & ValToString(INr.MinLevel,M4UVal,"","",0),true);
                EndFormat;
              end;
//            end;
            if (RepSpec.flags[0]==0) then begin
              if (itemfound) then begin
                Gray_Divider(0,1);
              end;
              StartFormat(15);
              OutString(0,0,USetStr(13730),false);
              EndFormat;
              Gray_Divider(0,1);
            end;
          end;
          itemfound = true;
          if (GetFirstPurchaseItem2(INProgr.ItemCode,RepSpec.f3,"",PIr)) then begin
          end;
        end;
        poqty = GetPOQty(INProgr.ItemCode,lastevdat,INProgr.NeededDate,INProgr.Location,false);
        flowinstock = flowinstock + poqty - INProgr.Qty;
        t = INProgr.Qty-instock-poqty+INr.MinLevel;
        if (t<=0) then begin
          t = BlankVal;
        end;
        switch (mode) begin
          case 0://reportmode
             StartFormat(15);
               OutDate(30,0,INProgr.OrderDate,false);
//               OutString(90,0,INProgr.Location,false);
               OutString(90,0,"",false);
               OutVal(160,0,instock,M4UVal,true);
               OutStringID(220,"DblPurchProgPU",ValToString(INProgr.Qty,M4UVal,"","",0),true,INProgr.ItemCode & ":" & INProgr.NeededDate);
               OutStringID(280,"DblPurchProgPORep",ValToString(poqty,M4UVal,"","",0),true,INProgr.ItemCode & "," & lastevdat & "," & INProgr.NeededDate & "," & INProgr.Location);
               if (t>0) then begin
                 OutDate(300,0,AddDay(INProgr.NeededDate,-PIr.PlannedDelDays),false);
               end else begin
                 OutString(300,0,"",false);
               end;
               OutVal(440,0,flowinstock,M4UVal,true);
               OutVal(480,0,t,M4UVal,true);
              EndFormat;
          case 1://maintanancemode
            if (t>0) then begin
              AddToPO(aPOr,pocnt,INProgr.ItemCode,INProgr.Location,AddDay(INProgr.NeededDate,-PIr.PlannedDelDays),PIr.PlannedDelDays,t);
            end;
          case 2://exportmode
            ExportString(INProgr.ItemCode);
            ExportString(INProgr.FileName);
            ExportString(INProgr.Location);
            ExportString(INProgr.OrderDate);
            ExportString(INProgr.NeededDate);
            ExportString(AddDay(INProgr.NeededDate,-PIr.PlannedDelDays));
            ExportVal(instock,M4UVal);
            ExportVal(INProgr.Qty,M4UVal);
            ExportVal(poqty,M4UVal);
            ExportVal(flowinstock,M4UVal);
            ExportVal(t,M4UVal);
            ExportVal(INr.InPrice,M4Val);
            ExportVal(INr.InPrice * t,M4Val);
            ExportString(PIr.VECode);
            ExportVal(PIr.PlannedDelDays,M4UVal);
            NewLine;
        end;
        flowinstock = flowinstock + t;
        instock = flowinstock;
        lastevdat = AddDay(INProgr.NeededDate,1);
        lastin = INProgr.ItemCode;
      end;
    end;
  end;
  if (mode<>reportmode) then begin
    itemfound = false;
  end;
  DoPurchProg = itemfound;
  RETURN;
END;

global
updating procedure PurchProg(record RcVc RepSpec,Integer mode)
BEGIN
  record INVc INr;
  record PIVc PIr;
  Integer rw;
  string 255 tstr;
  Integer reportmode,maintanancemode,exportmode;
  Array record POVc aPOr;
  Integer pocnt;
  string 20 frin,toin;
  string 5 frgr,togr;
  Boolean TrHs,testf;
  
  reportmode = 0;
  maintanancemode = 1;
  exportmode = 2;
  frin = FirstInRange(RepSpec.f1,10);
  toin = LastInRange(RepSpec.f1,10);
  frgr = FirstInRange(RepSpec.f2,5);
  togr = LastInRange(RepSpec.f2,5);
  
  if (mode==reportmode) then begin
    StartReportJob(USetStr(13720));
    rw = 1;
    HTItem(RepSpec.f1,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
    HTITs(frgr,togr,tstr);
    Header(rw,tstr,0);
    HTLocations(RepSpec.f3,RepSpec.f3,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
    Header(rw,USetStr(13731) & RepSpec.d1,1);
    rw = rw + 1;
    HTSupplier(RepSpec.f4,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    EndHeader;
  
    StartFormat(15);
    OutString(0,0,USetStr(13721),false);
    OutString(30,0,USetStr(13722),false);
    OutString(160,0,USetStr(13723),true);
    OutString(220,0,USetStr(13724),true);
    OutString(280,0,USetStr(13725),true);
    OutString(300,0,USetStr(13726),false);
    OutString(440,0,USetStr(13727),true);
    OutString(480,0,USetStr(13728),true);
    EndFormat;
  end;
  if (nonblank(RepSpec.f4)) then begin
    TrHs = true;
    PIr.VECode = RepSpec.f4;
    PIr.ItemCode = frin;
    while (LoopKey("Vendor",PIr,2,TrHs)) begin
      if (TrHs) then begin
        if (PIr.VECode<>RepSpec.f4) then begin
          TrHs = false;
        end;
        if (nonblank(RepSpec.f1)) then begin
          if (PIr.ItemCode>toin) then begin
            TrHs = false;
          end;
        end;
      end;
      if (TrHs) then begin
        testf = true;
        if (PIr.DefaultChoice==1) then begin
          INr.Code = PIr.ItemCode;
          if (ReadFirstMain(INr,1,true)) then begin
            if (nonblank(RepSpec.f2)) then begin
              if (INr.Group<frgr) then begin testf = false;end;
              if (INr.Group>togr) then begin testf = false;end;
            end;
            if (testf) then begin
              if (DoPurchProg(RepSpec,INr.Code,INr.Code,INr,aPOr,pocnt,mode)) then begin
                StartFormat(15);
                EndFormat;
              end;
            end;
          end;
        end;
      end;
    end;
  end else begin
    TrHs = true;
    INr.Code = frin;
    while (LoopMain(INr,1,TrHs)) begin
      if (nonblank(RepSpec.f1)) then begin
        if (INr.Code>toin) then begin
          TrHs = false;
        end;
      end;
      if (TrHs) then begin
        testf = true;
        if (nonblank(RepSpec.f2)) then begin
          if (INr.Group<frgr) then begin testf = false;end;
          if (INr.Group>togr) then begin testf = false;end;
        end;
        if (testf) then begin
          if (DoPurchProg(RepSpec,INr.Code,INr.Code,INr,aPOr,pocnt,mode)) then begin
            StartFormat(15);
            EndFormat;
          end;
        end;
      end;
    end;
  end;

  if (mode==reportmode) then begin
    EndJob;
  end;
  if (mode==maintanancemode) then begin
    StorePO(aPOr,pocnt);
  end;
  return;
end;

global
procedure PurchProgOrdRn(record RcVc RepSpec)
BEGIN
  LongInt poqty;
  
  StartReportJob(USetStr(13740));
  EndHeader;
  poqty = GetPOQty(RepSpec.f1,RepSpec.d1,RepSpec.d2,RepSpec.f2,true);
  EndJob;
  return;
end;
