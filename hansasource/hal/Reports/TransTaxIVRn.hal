external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external procedure HT2Per(Date, Date , var string);

global
procedure TransTaxIVRn(record RcVc RepSpec)
begin
  record IVVc IVr;
  record CYBlock CYb;
  Boolean found,testf;
  val totiv,tottax;  
  string 255 tstr;
  
  BlockLoad(CYb);
  StartReportNoHeaderJob(USetStr(16510));
  EndHeader;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  StartFormat(15);
   OutString(0,0,USetStr(16510),false);
   OutString(1,0,tstr,true);
  EndFormat;
  StartFormat(15);
   OutString(0,0,CYb.CompName,false);
   OutString(1,0,USetStr(16515) & ":" & CYb.VATNr,true);
  EndFormat;
  StartFormat(15);
  EndFormat;

  StartFormat(15);
   OutString(0,0,USetStr(16511),false);
   OutString(80,0,USetStr(16512),false);
   OutString(300,0,USetStr(16513),true);
   OutString(1,0,USetStr(16514),true);
  EndFormat;
  Gray_Divider(0,1);
  found = true;
  IVr.InvDate = RepSpec.sStartDate;
  while (LoopKey("InvDate",IVr,1,found)) begin
    if (IVr.InvDate>RepSpec.sEndDate) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (IVr.OKFlag==0) then begin
        if (RepSpec.flags[1]==0) then begin
          testf = false;
        end;
      end;
      if (IVr.OKFlag!=0) then begin
        if (RepSpec.flags[2]==0) then begin
          testf = false;
        end;
      end;
      if (IVr.Invalid!=0) then begin
        if (RepSpec.flags[3]==0) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.Language)) then begin
        if (IVr.LangCode!=RepSpec.Language) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,IVr.Objects)==false) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        switch (RepSpec.basecurncy) begin
          case 0:
            IVr.BaseSum4 = MulRateToBase1(IVr.CurncyCode,IVr.BaseSum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          case 1:
            IVr.BaseSum4 = MulRateToBase2(IVr.CurncyCode,IVr.BaseSum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
        end;
        StartFormat(15);
         OutDate(0,0,IVr.InvDate,false);
         OutLongInt(80,"DblIVVc",IVr.SerNr,false);
         OutVal(300,0,IVr.BaseSum4,M4Val,true);
         OutVal(1,0,(IVr.BaseSum4*RepSpec.vals0)/100,M4Val,true);
        EndFormat;
        totiv = totiv + IVr.BaseSum4;
        tottax = tottax + (IVr.BaseSum4*RepSpec.vals0)/100;
      end;
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
   OutVal(300,0,totiv,M4Val,true);
   OutVal(1,0,tottax,M4Val,true);
  EndFormat;
  EndJob;
  return;
end;