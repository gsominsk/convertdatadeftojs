external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean ItemInItemGroupOrClass(string,string,string);
external function Boolean CorrectItemVAR(string,var string,var string,Boolean);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external procedure HTArts(string, string, var string);
external procedure HTArtGroup(string, var string);
external procedure HT2Per(Date, Date , var string);

procedure PrintInvHeader(record RcVc RepSpec)
begin
  StartFormat(15);
  OutString(0,0,USetStr(2325),false);
  OutString(2,0,USetStr(2326),false);
  EndFormat;
  Black_Divider(0,1);
  return;
end;

procedure PrintIncorrectVarieties(record RcVc RepSpec,record INVc INr,var LongInt toti,var val totqty)
begin
  record ItemHistVc IHr;
  Boolean foundf;
  string 60 sz,msk,mskrep;  
  string 200 varsubset;
  string 255 tstr,extra;
  Boolean firstf,testf;
  LongInt i;
  val qty;
  Boolean cortest;
  
  firstf = true;
  i = 0;
  qty = 0;
  if (FindItemVAR(INr.Code,sz,msk,mskrep,varsubset)) then begin
    IHr.ArtCode = INr.Code;
    IHr.TransDate = RepSpec.sStartDate;
    foundf = true;
    while (LoopKey("ArtCode",IHr,2,foundf)) begin
      if (IHr.ArtCode!=INr.Code) then begin
        foundf = false;
      end;
      if (IHr.TransDate>RepSpec.sEndDate) then begin
        foundf = false;
      end;
      testf = true;
      if (IHr.Invalid!=0) then begin testf = false; end;
      if (foundf and testf) then begin
        cortest = CorrectItemVAR(IHr.ArtCode & IHr.Variety,extra,tstr,true);
        if ((RepSpec.flags[1]!=0) or (cortest==false)) then begin
          if (RepSpec.ArtMode==0) then begin
            StartFormat(15);
            OutString(0,"DblINVarControl",INr.Code,false);
            OutString(2,0,INr.Name,false);
            EndFormat;
            foundf = false;
          end else begin
            if (firstf) then begin
              StartFormat(15);
              OutString(0,0,INr.Code,false);
              OutString(2,0,INr.Name,false);
              EndFormat;
              Gray_Divider(0,1);
              firstf = false;
            end;
            StartFormat(15);
            OutString(3,0,IHr.ArtCode,false);
            OutString(4,0,IHr.TransDate,false);
            switch (IHr.FileName) begin
              case "Fut3ORVc":
                OutString(5,0,"Order",false);
                OutString(6,"DblORVc",IHr.TransNr,false);
              case "ORVc":
                OutString(5,0,"Order",false);
                OutString(6,"DblORVc",IHr.TransNr,false);
              case "IVVc":
                OutString(5,0,"Invoice",false);
                OutString(6,"DblIVVc",IHr.TransNr,false);
              case "PUVc":
                OutString(5,0,"Goods Rec.",false);
                OutString(6,"DblPU",IHr.TransNr,false);
              case "SHVc":
                OutString(5,0,"Deliveries",false);
                OutString(6,"DblSHVc",IHr.TransNr,false);
              case "SDVc":
                OutString(5,0,"Stock Depr",false);
                OutString(6,"DblSD",IHr.TransNr,false);
              case "-1":
                OutString(5,0,"Stock Mov.",false);
                OutString(6,"DblStockMov",IHr.TransNr,false);
              case "StockMovVc":
                OutString(5,0,"Stock Mov.",false);
                OutString(6,"DblStockMov",IHr.TransNr,false);
              otherwise
                OutString(5,0,IHr.FileName,false);
                OutString(6,0,IHr.TransNr,false);
            end;
            OutString(7,0,IHr.StockAffectf,false);
            OutString(8,0,IHr.Row,true);
            OutString(1,0,IHr.Qty,true);
            EndFormat;
            if (cortest==false) then begin
              if (IHr.StockAffectf!=0) then begin
                qty = qty + IHr.Qty;
              end;
              i = i + 1;
            end;
          end;
        end;
      end;
    end;
  end;
  if (RepSpec.ArtMode==1) then begin
    if (firstf==false) then begin
      Gray_Divider(0,1);
      StartFormat(15);
      OutString(1,0,"Incorrect Entries : " & i,true);
      EndFormat;
      StartFormat(15);
      OutString(1,0,"Incorrect Qty : " & qty,true);
      EndFormat;
      StartFormat(15);
      EndFormat;
    end;
  end;
  toti = toti + i;
  totqty = totqty + qty;
  return;
end;

global
procedure VarsControlRn(record RcVc RepSpec)
begin
  record INVc INr;
  string 255 frart,toart;
  string 255 frcc,tocc;
  Boolean testf,foundf;
  string 255 tstr;
  LongInt toti;
  val totqty;
  Integer rw;
  string 200 key;
  
  toti = 0;
  totqty = 0;
  frart = FirstInRange(RepSpec.f1,20);
  toart = LastInRange(RepSpec.f1,20);
  frcc = FirstInRange(RepSpec.f3,20);
  tocc = LastInRange(RepSpec.f3,20);
  StartReportJob(USetStr(11133));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if ((nonblank(RepSpec.f1)) or (blank(RepSpec.AccStr))) then begin
    HTArts(RepSpec.f1,RepSpec.f1,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (HasItemGroups) then begin
    HTArtGroup(RepSpec.f3,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasItemClassification) then begin
    HTItemClass(RepSpec.f4,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;  
  EndHeader;
  PrintInvHeader(RepSpec);
  SetRepCol(2,100);
  SetRepCol(3,15);
  SetRepCol(4,150);
  SetRepCol(5,220);
  SetRepCol(6,280);
  SetRepCol(7,350);
  SetRepCol(8,400);
  INr.Code = frart;
  INr.Group = frcc;
  if ((blank(RepSpec.f1)) and (nonblank(RepSpec.f3))) then begin
    key = "Group";
  end else begin
    key = "Code";
  end;
  foundf = true;
  while (LoopKey(key,INr,1,foundf)) begin
    testf = true;
    if (key=="Group") then begin
      if (INr.Group>tocc) then begin
        foundf = false;
      end;
    end else begin
      if (nonblank(RepSpec.f1)) then begin
        if (INr.Code>toart) then begin
          foundf = false;
        end;
      end;
      if (nonblank(RepSpec.f3)) then begin
        if ((INr.Group<frcc) or (INr.Group>tocc)) then begin
          testf = false;
        end;
      end;
    end;
    if (foundf==false) then begin
      testf = false;
    end;
    if (testf) then begin
      if (nonblank(RepSpec.TransStr)) then begin
        if (INr.AlternativeCode!=RepSpec.TransStr) then begin testf = false; end;
      end;
    end;
    if (testf) then begin
      testf = ItemInItemGroupOrClass(INr.Code,"",RepSpec.f4);
    end;    
    if (testf) then begin
      PrintIncorrectVarieties(RepSpec,INr,toti,totqty);
    end;
  end;
  if (RepSpec.ArtMode==1) then begin
    Black_Divider(0,1);
    StartFormat(15);
    OutString(1,0,"Incorrect Entries : " & toti,true);
    EndFormat;
    StartFormat(15);
    OutString(1,0,"Incorrect Qty : " & totqty,true);
    EndFormat;
  end;
  EndJob;
  return;
end;

