external procedure HTCustClass(string,var string);
external procedure HTSuppGroup(string,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure HTVends(string, string, var string);
external function Boolean CheckVARSubsets(record VARVc,string,string);
external function Boolean TestArtCodeMatch(string,string);
external procedure ExtractObj(string,var Integer,var string);
external function Integer FindYVars(string,string,string);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external procedure GetStockValue(string,string,var record ItemStatusVc);
external function Boolean GetFirstPurchaseItem2(string,string,string,var record PIVc);
external function Integer DateGetIntMonth(Date);
external Function Boolean FindPOQantity(record INVc,record ItemStatusVc,Boolean,string,record PIVc,var val,var val,var val,val,Boolean,Boolean,Boolean);
external procedure HT2Per(Date,Date,var string);
external procedure HTItem(string,var string);
external procedure HTIT(string,var string);
external procedure HTLocations(string, string, var string);

procedure PrintOneItemData(record RcVc RepSpec,string itemcode,record INVc INr,string vecode,Boolean varf,Date startdate,Date enddate)
begin
  record ItemStatusVc ISr;  
  val onord,instock,delinwards,theorystock,periodusage,sugorqty,minpord,months,t,minlevel,predictedsales; 
  val t1,normpoqty;
  Boolean found,printf;
  record PIVc PIr;
  Boolean pifound;
  Integer keys;
  string 255 ckey;
  string 20 location;
  
  if (NonBlank(RepSpec.LastAcc)) then begin
    location = RepSpec.LastAcc;
  end else begin
    location = ";;;";
  end;

  pifound = GetFirstPurchaseItem2(INr.Code,RepSpec.LastAcc,vecode,PIr);
  if (RepSpec.flags[2]!=0) then begin
    if (pifound==false) then begin
      goto LPrintOneItemData;
    end;
  end;

  minpord = blankval;
  onord = blankval;
  instock = blankval;
  delinwards = blankval;
  normpoqty = blankval;
  if (varf) then begin
    ISr.Code = itemcode;
    ISr.Variety = Right(INr.Code,len(INr.Code)-len(itemcode));
    ISr.Location = location;
    keys = 3;
    ckey = "CodeVariety";
  end else begin
    ISr.Code = INr.Code;
    ISr.Location = location;
    keys = 2;
    ckey = "Code";
  end;
  if (ReadFirstKey(ckey,ISr,keys,true)) then begin
    if (varf) then begin
      GetStockValue(ISr.Code & ISr.Variety,RepSpec.LastAcc,ISr);            
    end else begin
      GetStockValue(ISr.Code,RepSpec.LastAcc,ISr);            
    end;
    onord = ISr.OrddOut;     
    instock = ISr.Instock; 
    delinwards = ISr.POUnOKQty;    
  end;
  if (varf) then begin
    periodusage = GetTurnover(INr,"quant",startdate,enddate);
  end else begin
    periodusage = GetTurnover(INr,"quant",startdate,enddate);
  end;
//
// StartFormat(15); 
//  OutString(0,0,"INr.Code",false);
//  OutString(100,0,INr.Code,false);
//  OutString(200,0,startdate,false);
//  OutString(300,0,enddate,false);
// EndFormat;
//
//
  theorystock = instock + delinwards - onord;
  months = DateGetIntMonth(enddate)-DateGetIntMonth(startdate)+1;
  if (pifound) then begin
    minpord = PIr.MinPOQty;
    normpoqty = PIr.NormPOQty;
  end;       
  predictedsales = periodusage/months;
  predictedsales = predictedsales*RepSpec.vals0;
  printf = true;
  if (RepSpec.flags[0]!=0) then begin
    if ((minpord==0) and (onord==0) and (instock==0) and (delinwards==0) and (periodusage==0)) then begin
      printf = false;
    end;
  end;
  if (printf==true) then begin
    if (RepSpec.flags[1]==1) then begin
      found = FindPOQantity(INr,ISr,varf,RepSpec.LastAcc,PIr,t1,sugorqty,minlevel,predictedsales,false,true,true);
    end else begin
      found = FindPOQantity(INr,ISr,varf,RepSpec.LastAcc,PIr,t1,sugorqty,minlevel,0,false,true,true);
    end;
    StartFormat(15);
    OutString(0,"DblINVc",INr.Code,false);
    OutVal(120,0,instock,M4Qty,true);
    OutVal(160,0,delinwards,M4Qty,true);
    OutVal(200,0,onord,M4Qty,true);
    OutVal(240,0,theorystock,M4Qty,true);
    OutVal(280,0,periodusage,M4Qty,true);
    OutVal(320,0,periodusage/months,M4Qty,true);        
    OutVal(360,0,predictedsales,M4Qty,true);        
    OutVal(400,0,minlevel,M4Qty,true);
    OutVal(440,0,minpord,M4Qty,true);
    OutVal(480,0,sugorqty,M4Qty,true);
    EndFormat;
  end;  
LPrintOneItemData:;  
  return;
end;

procedure ShowOneVarietyGroupRequirements(string group,string itsz,record RcVc RepSpec,record INVc INr,string vecode,string subsets,string mask,Date startdate,Date enddate)
begin
  record VARVc VARr;
  Boolean found,testf;
  Integer insz;
  string 255 artcode,itemcode,itemname;

  itemcode = INr.Code;
  itemname = INr.Name;
  if (itsz!=".") then begin
    insz = StringToInt(itsz);
  end;
  found = true;
  VARr.VARGCode = group;
  while (LoopKey("VARGCode",VARr,1,found)) begin
    if (VARr.VARGCode!=group) then begin
      found = false;
    end;
    if (found) then begin
      if (itsz!=".") then begin
        artcode = itemcode & VARr.Code;
      end else begin
        artcode = itemcode & itsz & VARr.Code;
      end;      
      INr.Code = artcode;
      INr.Name = itemname & ", " & VARr.Comment;
      testf = true;
      if (nonblank(subsets)) then begin
        if (CheckVARSubsets(VARr,subsets,mask)==false) then begin
          testf = false;
        end;
      end;    
      if (testf) then begin
        PrintOneItemData(RepSpec,itemcode,INr,vecode,true,startdate,enddate);
      end;
    end;
  end;
  return;
end;

procedure ShowTwoVarietiesGroupRequirements(string group1,string group2,record RcVc RepSpec,record INVc INr,string vecode,string subsets,string mask,Date startdate,Date enddate)
begin
  record VARVc VARr1;
  Boolean found1,testf;
  record VARVc VARr2;
  Boolean found2;
  record VARGVc VARGr;
  Integer insz1,insz2;
  string 255 artcode,artcode1,itemcode,itemname,itsz1,itsz2,subsettotest;

  itemcode = INr.Code;
  itemname = INr.Name;
  found1 = true;
  VARr1.VARGCode = group1;
  while (LoopKey("VARGCode",VARr1,1,found1)) begin
    if (VARr1.VARGCode!=group1) then begin
      found1 = false;
    end;
    if (found1) then begin
      VARGr.Code = VARr1.VARGCode;
      ReadFIrstMain(VARGr,1,true);
      itsz1 = VARGr.VarSize;
      if (itsz1!=".") then begin
        insz1 = StringToInt(itsz1);
      end;
      if (itsz1!=".") then begin
        artcode = itemcode & VARr1.Code;
      end else begin
        artcode = itemcode & itsz1 & VARr1.Code;
      end;      
      artcode1 = artcode;
      testf = true;
      if (nonblank(subsets)) then begin
        if (CheckVARSubsets(VARr1,subsets,mask)==false) then begin
          testf = false;
        end;
      end;
      
      if (testf) then begin
        ResetLoop(VARr2);
        found2 = true;
        VARr2.VARGCode = group2;
        while (LoopKey("VARGCode",VARr2,1,found2)) begin
          if (VARr2.VARGCode!=group2) then begin
            found2 = false;
          end;
          if (found2) then begin  
            artcode = artcode1;
            VARGr.Code = VARr2.VARGCode;
            ReadFIrstMain(VARGr,1,true);
            itsz2 = VARGr.VarSize;
            if (itsz2!=".") then begin
              insz2 = StringToInt(itsz2);
            end;
            if (itsz2!=".") then begin
              artcode = artcode & VARr2.Code;
            end else begin
              artcode = artcode & itsz2 & VARr2.Code;
            end;      
            INr.Code = artcode;
            INr.Name = itemname & ", "  & VARr1.Comment & ", " & VARr2.Comment;
            testf = true;
            if (nonblank(subsets)) then begin
              if (CheckVARSubsets(VARr2,subsets,mask)==false) then begin
                testf = false;
              end;
            end;
            if (testf) then begin
              PrintOneItemData(RepSpec,itemcode,INr,vecode,true,startdate,enddate);
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure ShowThreeVarietiesGroupRequirements(string group1,string group2,string group3,record RcVc RepSpec,record INVc INr,string vecode,string subsets,string mask,Date startdate,Date enddate)
begin
  record VARVc VARr1;
  Boolean found1;
  record VARVc VARr2;
  Boolean found2;
  record VARVc VARr3;
  Boolean found3,testf;
  record VARGVc VARGr;
  Integer insz1,insz2,insz3;
  string 255 artcode,artcode1,artcode2,itemcode,itemname,itsz1,itsz2,itsz3;
  string 255 varname1,varname2,varname3;

  itemcode = INr.Code;
  itemname = INr.Name;
  found1 = true;
  VARr1.VARGCode = group1;
  while (LoopKey("VARGCode",VARr1,1,found1)) begin
    if (VARr1.VARGCode!=group1) then begin
      found1 = false;
    end;
    if (found1) then begin
      VARGr.Code = VARr1.VARGCode;
      ReadFIrstMain(VARGr,1,true);
      itsz1 = VARGr.VarSize;
      if (itsz1!=".") then begin
        insz1 = StringToInt(itsz1);
      end;
      if (itsz1!=".") then begin
        artcode = itemcode & VARr1.Code;
      end else begin
        artcode = itemcode & itsz1 & VARr1.Code;
      end;      
      artcode1 = artcode;
      testf = true;
      if (nonblank(subsets)) then begin
        if (CheckVARSubsets(VARr1,subsets,mask)==false) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        ResetLoop(VARr2);
        found2 = true;
        VARr2.VARGCode = group2;
        while (LoopKey("VARGCode",VARr2,1,found2)) begin
          if (VARr2.VARGCode!=group2) then begin
            found2 = false;
          end;
          if (found2) then begin  
            artcode = artcode1;
            VARGr.Code = VARr2.VARGCode;
            ReadFIrstMain(VARGr,1,true);
            itsz2 = VARGr.VarSize;
            if (itsz2!=".") then begin
              insz2 = StringToInt(itsz2);
            end;
            if (itsz2!=".") then begin
              artcode = artcode & VARr2.Code;
            end else begin
              artcode = artcode & itsz2 & VARr2.Code;
            end;      
            artcode2 = artcode;

            testf = true;
            if (nonblank(subsets)) then begin
              if (CheckVARSubsets(VARr2,subsets,mask)==false) then begin
                testf = false;
              end;
            end;
            if (testf) then begin
              ResetLoop(VARr3);
              found3 = true;
              VARr3.VARGCode = group3;
              while (LoopKey("VARGCode",VARr3,1,found3)) begin
                if (VARr3.VARGCode!=group3) then begin
                  found3 = false;
                end;
                if (found3) then begin
                  artcode = artcode2;
                  VARGr.Code = VARr3.VARGCode;
                  ReadFIrstMain(VARGr,1,true);
                  itsz2 = VARGr.VarSize;
                  if (itsz2!=".") then begin
                    insz2 = StringToInt(itsz2);
                  end;
                  if (itsz2!=".") then begin
                    artcode = artcode & VARr3.Code;
                  end else begin
                    artcode = artcode & itsz2 & VARr3.Code;
                  end;      
                  INr.Code = artcode;
                  INr.Name = itemname & ", "  & VARr1.Comment & ", " & VARr2.Comment & ", " & VARr3.Comment;
                  testf = true;
                  if (nonblank(subsets)) then begin
                    if (CheckVARSubsets(VARr3,subsets,mask)==false) then begin
                      testf = false;
                    end;
                  end;
                  if (testf) then begin
                    PrintOneItemData(RepSpec,itemcode,INr,vecode,true,startdate,enddate);
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure ShowVarietiesRequirements(record RcVc RepSpec,record INVc INr,string vecode,Date startdate,Date enddate)
begin
  string 255 itsz,mask,subsets,mskrep,xpos,ypos,zpos,tstr;
  Integer nrofy,pos,i,cnt;
  Array string 20 ac;

  FindItemVAR(INr.Code,itsz,mask,mskrep,subsets);
  cnt = 0;
  pos = 0;
  for (i=0;i<20;i=i+1) begin
    ExtractObj(mask,pos,tstr);
    if (nonblank(tstr)) then begin
      ac[i] = tstr;
      cnt = cnt + 1;
    end else begin
      i = 20;
    end;
  end;
  if (cnt>0) then begin xpos = ac[0]; end;
  if (cnt>1) then begin ypos = ac[1]; end;
  if (cnt>2) then begin zpos = ac[2]; end;

  nrofy = FindYVars(ypos,subsets,mask);

  switch (cnt) begin
    case 1: ShowOneVarietyGroupRequirements(xpos,itsz,RepSpec,INr,vecode,subsets,mask,startdate,enddate);
    case 2: ShowTwoVarietiesGroupRequirements(xpos,ypos,RepSpec,INr,vecode,subsets,mask,startdate,enddate);
    case 3: ShowThreeVarietiesGroupRequirements(xpos,ypos,zpos,RepSpec,INr,vecode,subsets,mask,startdate,enddate);
  end;

  return;
end;

procedure OneItemData(record RcVc RepSpec,record INVc INr,string vecode,Date startdate,Date enddate)
begin
  Boolean varf;
  string 255 itsz,mask,subsets,mskrep;

  if (RepSpec.flags[3]!=0) then begin 
    varf = FindItemVAR(INr.Code,itsz,mask,mskrep,subsets);
    if (varf) then begin
      ShowVarietiesRequirements(RepSpec,INr,vecode,startdate,enddate);
    end else begin
      PrintOneItemData(RepSpec,INr.Code,INr,vecode,varf,startdate,enddate);
    end;
  end else begin
    PrintOneItemData(RepSpec,INr.Code,INr,vecode,varf,startdate,enddate);
  end;
  return;
end;
        
procedure PORequirePerSupplier(record RcVc RepSpec)
begin
  Boolean found,foundpi,testf,newvef;
  record INVc INr;
  record PIVc PIr;
  record CUVc VEr;
  string 255 index;
  string 20 frin,toin; 
  string 255 frve,tove;
  Date enddate,startdate;
  Integer sort;
  
  enddate = RepSpec.sEndDate;
  enddate = AddDay(enddate,-GetDay(enddate)+DaysInMonth(GetYear(enddate),GetMonth(enddate)));
  
  startdate = RepSpec.sStartDate;
  startdate = AddDay(startdate,-GetDay(startdate)+1);
  frin = FirstInRange(RepSpec.f1,20);
  toin = LastInRange(RepSpec.f1,20);
  frve = FirstInRange(RepSpec.f2,20);
  tove = LastInRange(RepSpec.f2,20);
  sort = 0;
  index = "Code";
  if (blank(RepSpec.f2)) then begin 
    if (nonblank(RepSpec.AccStr)) then begin
      index = "VECat";
      sort = 1;
      VEr.VECat = RepSpec.AccStr;
    end;
  end;
  found = true;
  VEr.Code = frve;
  while (LoopKey(index,VEr,1,found)) begin
    switch (sort) begin
      case 0:
        if (nonblank(RepSpec.f2)) then begin
          if (VEr.Code>tove) then begin found = false; end;
        end;
      case 1:
        if (nonblank(RepSpec.AccStr)) then begin
          if (VEr.VECat!=RepSpec.AccStr) then begin found = false; end;
        end;
    end;
    if (found) then begin
      testf = true;
      if (nonblank(RepSpec.AccStr)) then begin
        if (VEr.VECat!=RepSpec.AccStr) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (SetInSet(RepSpec.f3,VEr.Classification)==false) then begin testf = false; end;
      end;
      if (testf) then begin
        newvef = true;
        foundpi = true;
        ResetLoop(PIr);
        PIr.VECode = VEr.Code;
        PIr.ItemCode = frin;
        while (LoopKey("Vendor",PIr,2,foundpi)) begin
          if (PIr.VECode!=VEr.Code) then begin foundpi = false; end;
          if (nonblank(RepSpec.f1)) then begin
            if (PIr.ItemCode>toin) then begin found = false; end;
          end;
          if (foundpi) then begin
            testf = true;
            if (PIr.DefaultChoice==0) then begin testf = false; end;
            if (testf) then begin
              testf = ReadFirstItem(PIr.ItemCode,INr,true,false);
            end;
            if (testf) then begin
              if (nonblank(RepSpec.FirstAcc)) then begin
                if (INr.Group!=RepSpec.FirstAcc) then begin
                  testf = false;
                end;
              end;
              if (INr.Terminated!=0) then begin testf = false; end;
              if (INr.ItemType!=1) then begin testf = false; end;
              if (RepSpec.flags[0]==0) then begin
                if (INr.InclItemFreight!=0) then begin testf = false; end;
              end;
            end;
            if (testf) then begin
              if (newvef) then begin
                StartFormat(15); 
                 OutString(0,"DblCUVc",VEr.Code,false);
                 OutString(60,0,VEr.Name,false);
                EndFormat;
                Gray_Divider(0,1);
                newvef = false;
              end;
              OneItemData(RepSpec,INr,VEr.Code,startdate,enddate);
            end;
          end;
        end;
        if (newvef==false) then begin
          Gray_Divider(0,1);
          StartFormat(5); 
          EndFormat;
        end;
      end;
    end;
  end;
  return;
end;

global
procedure PORequireRn(record RcVc RepSpec)
begin
  record INVc INr;
  Boolean found,testf,vef;
  string 20 frin,toin; 
  string 255 frve,tove;
  Date enddate,startdate;
  string 255 tstr;
  Integer rw;

  enddate = RepSpec.sEndDate;
  enddate = AddDay(enddate,-GetDay(enddate)+DaysInMonth(GetYear(enddate),GetMonth(enddate)));
  
  startdate = RepSpec.sStartDate;
  startdate = AddDay(startdate,-GetDay(startdate)+1);
  
  frin = FirstInRange(RepSpec.f1,20);
  toin = LastInRange(RepSpec.f1,20);
  frve = FirstInRange(RepSpec.f2,20);
  tove = LastInRange(RepSpec.f2,20);
  vef = nonblank(RepSpec.f2) or nonblank(RepSpec.AccStr) or nonblank(RepSpec.f3);
  
  StartReportJob(USetStr(9800));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (RepSpec.vals0 != BlankVal) then begin
    Header(rw,USetStr(9812) & " " & ValToString(RepSpec.vals0,M4UVal,"",".",0),1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f1)) then begin
    HTItem(RepSpec.f1,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.FirstAcc)) then begin
    HTIT(RepSpec.FirstAcc,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f2)) then begin
    HTVends(frve,tove,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;   
  end;
  if (nonblank(RepSpec.AccStr)) then begin
    HTSuppGroup(RepSpec.AccStr,tstr);
    Header(rw,tstr,0);
  end;
  if (nonblank(RepSpec.f3)) then begin
    HTCustClass(RepSpec.f3,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end; 
  end;
  if (nonblank(RepSpec.LastAcc)) then begin
    HTLocations(RepSpec.LastAcc,RepSpec.LastAcc,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;   
  end;
  if (RepSpec.flags[1] != 0) then begin
    Header(rw,USetStr(9813),1);
    rw = rw + 1;
  end;
  if (RepSpec.flags[2] != 0) then begin
    Header(rw,USetStr(9814),1);
    rw = rw + 1;
  end;
  if (RepSpec.flags[3] != 0) then begin
    Header(rw,USetStr(9815),1);
    rw = rw + 1;
  end;
  EndHeader;
  if (RepSpec.wholemonthf==0) then begin
    StartFormat(15);
     OutString(0,0,USetStr(1163),false);
    EndFormat;
    goto LPORequireRn;
  end;  
    StartFormat(15);
     OutString(0,0,USetStr(9801),false);
     OutString(120,0,USetStr(9802),false);
     OutString(240,0,USetStr(9803),false);
     OutString(360,0,USetStr(9804),false);     
    EndFormat;  
    StartFormat(15);
     OutString(0,0,USetStr(9805),false);
     OutString(120,0,USetStr(9806),false);
     OutString(240,0,USetStr(9807),false);
     OutString(360,0,USetStr(9808),false);     
    EndFormat;  
    StartFormat(15);
     OutString(0,0,USetStr(9809),false);
     OutString(120,0,USetStr(9810),false);
     OutString(360,0,USetStr(9811),false);
    EndFormat;   
      
  StartFormat(15);
  OutString(0,0,"1",false);
  OutString(120,0,"2",true);
  OutString(160,0,"3",true);
  OutString(200,0,"4",true);
  OutString(240,0,"5",true);
  OutString(280,0,"6",true);
  OutString(320,0,"7",true);
  OutString(360,0,"8",true);
  OutString(400,0,"9",true);
  OutString(440,0,"10",true);
  OutString(480,0,"11",true);
  EndFormat;
  Gray_Divider(0,1);
  if (vef) then begin
    PORequirePerSupplier(RepSpec);
  end else begin
    found = true;
    INr.Code = frin;
    while (LoopMain(INr,1,found)) begin
      if (nonblank(RepSpec.f1)) then begin
        if (INr.Code>toin) then begin found = false; end;
      end;
      if (found) then begin
        testf = true;
        if (nonblank(RepSpec.FirstAcc)) then begin
          if (INr.Group!=RepSpec.FirstAcc) then begin
            testf = false;
          end;
        end;
        if (INr.Terminated!=0) then begin testf = false; end;
        if (INr.ItemType!=1) then begin testf = false; end;
        if (RepSpec.flags[0]==0) then begin
          if (INr.InclItemFreight!=0) then begin testf = false; end;
        end;
        if (testf) then begin
          OneItemData(RepSpec,INr,"",startdate,enddate);
        end;
      end;
    end;
  end;
LPORequireRn:;  
  EndJob;    
  RETURN;
END;
