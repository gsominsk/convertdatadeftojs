external procedure M4PadString(string,Integer,string,Boolean,var string);
external procedure HT2Per(date,date,var string);

procedure FindInvoivcesInSerieStartBalance(Date StartDate,Date EndDate,Integer invalid,string serie,string tstart,string tend,
                                           Array string sbserie,Array string sbfirstnr,Array string sblastnr,Array LongInt sbivcnt,Integer sbacnt)
BEGIN 
  Boolean TrHs,testf;
  record IVVc IVr; 
  LongInt ivcnt;
  string 60 firstnrstr,lastnrstr;
  string 60 legalnrstart,legalnrend;
  LongInt firstnr,lastnr;
  
  legalnrstart = serie & tstart;
  legalnrend = serie & tend;
  ivcnt = 0;
  TrHs = true;
  IVr.OfficialSerNr = legalnrstart;
  IVr.InvDate = StartDate;
  while (LoopKey("OfficialSerNrDate",IVr,2,TrHs)) begin
    if (IVr.InvDate>EndDate) then begin TrHs = false; end;
    if (IVr.OfficialSerNr>legalnrend) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if (blank(IVr.OfficialSerNr)) then begin testf = false; end;
      if (invalid!=0) then begin 
        if (IVr.Invalid!=0) then begin testf = false; end;
      end;
      if (testf) then begin
        ivcnt = ivcnt + 1;
        if (blank(firstnrstr)) then begin
          firstnrstr = IVr.OfficialSerNr;
        end;
        lastnrstr = IVr.OfficialSerNr;
      end;
    end;
  end;
  if (blank(firstnrstr)) then begin 
    firstnrstr = tstart; 
    if (ivcnt==0) then begin ivcnt = StringToLongInt(tend) - StringToLongInt(tstart) + 1; end;
  end else begin
    firstnr = StringToLongInt(Right(firstnrstr,len(firstnrstr) - len(serie)));
    lastnr = StringToLongInt(Right(lastnrstr,len(lastnrstr) - len(serie)));
    
//    firstnrstr = serie & (StringToLongInt(lastnr) + 1); 
    firstnrstr = StringToLongInt(lastnr) + 1; 
    lastnrstr = StringToLongInt(tend);
    ivcnt = StringToLongInt(tend) - lastnr;
  end;
  if (blank(lastnrstr)) then begin 
    lastnrstr = tend; 
  end;

  sbserie[sbacnt] = serie;
  sbfirstnr[sbacnt] = firstnrstr;
  sblastnr[sbacnt] = lastnrstr;
  sbivcnt[sbacnt] = ivcnt;
  RETURN;
END;

procedure FindInvoivcesInSerie(Date StartDate,Date EndDate,Integer invalid,string serie,string tstart,string tend,
                                Array string usedserie,Array string usedfirstnr,Array string usedlastnr,Array LongInt usedivcnt,
                                Array val usedivsum,var Integer usedacnt)
BEGIN 
  Boolean TrHs,testf;
  record IVVc IVr; 
  LongInt ivcnt;
  val ivsum;
  string 60 firstnrstr,lastnrstr;
  string 60 legalnrstart,legalnrend;
  LongInt lastnr,curnr;
  
  legalnrstart = serie & tstart;
  legalnrend = serie & tend;
  ivcnt = 0;
  TrHs = true;
  IVr.OfficialSerNr = legalnrstart;
  IVr.InvDate = StartDate;
  while (LoopKey("OfficialSerNr",IVr,2,TrHs)) begin
    if (IVr.OfficialSerNr>legalnrend) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if (DateInRange(IVr.InvDate,StartDate,EndDate)==false) then begin
        testf = false;
      end;
      if (blank(IVr.OfficialSerNr)) then begin testf = false; end;
      if (invalid!=0) then begin 
        if (IVr.Invalid!=0) then begin testf = false; end;
      end else begin
        if (IVr.Invalid==0) then begin testf = false; end;
      end;
      if (testf) then begin
        curnr = StringToLongInt(Right(IVr.OfficialSerNr,len(IVr.OfficialSerNr) - len(serie)));
        if (lastnr>-1) then begin
          if (curnr!=lastnr+1) then begin
            usedserie[usedacnt] = serie;
            usedfirstnr[usedacnt] = firstnrstr;
            usedlastnr[usedacnt] = lastnrstr;
            usedivcnt[usedacnt] = ivcnt;
            usedivsum[usedacnt] = ivsum;
            usedacnt = usedacnt + 1;
            ivsum = 0;
            ivcnt = 0;
            firstnrstr = "";
            lastnrstr = "";
          end;
        end;
        ivsum = ivsum + IVr.Sum4;
        ivcnt = ivcnt + 1;
        if (blank(firstnrstr)) then begin
//          firstnrstr = curnr;
          firstnrstr = Right(IVr.OfficialSerNr,len(IVr.OfficialSerNr) - len(serie));
        end;
//        lastnrstr = curnr;
        lastnrstr = Right(IVr.OfficialSerNr,len(IVr.OfficialSerNr) - len(serie));
        lastnr = curnr;
      end;
    end;
  end;
  usedserie[usedacnt] = serie;
  usedfirstnr[usedacnt] = firstnrstr;
  usedlastnr[usedacnt] = lastnrstr;
  usedivcnt[usedacnt] = ivcnt;
  usedivsum[usedacnt] = ivsum;
  usedacnt = usedacnt + 1;
  RETURN;
END;

global
procedure LegInvFormRn(record RcVc RepSpec)
BEGIN
  record LegalInvNrBlock LegalInvNrRec;
  row LegalInvNrBlock LegalInvNrrw;
  Integer i,rwcnt,j;
  string 255 tstr,tstr2;
  Date bd;
  Array string 60 sbfirstnr,sblastnr,sbserie;
  Array LongInt sbivcnt;
  Array string 60 usedfirstnr,usedlastnr,usedserie;
  Array LongInt usedivcnt;
  Array val usedivsum;
  Array string 60 invfirstnr,invlastnr,invserie;
  Array LongInt invivcnt;
  Array val invivsum;
  LongInt ivs,invivs;
  longint sumcnt;
  integer rw,rwc;
  val total;
  Integer sbacnt,usedacnt,invacnt;
  
  bd.day = 1;
  bd.month = 1;
  bd.year = 1980;
  StartReportJob(USetStr(14240));
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  i = 1;	
  header(i,tstr,1);
  i = i + 1;
  if (RepSpec.flags[0]==1) then begin
    tstr = USetStr(14241);
    header(i,tstr,1);
  end;
  EndHeader;
  BlockLoad(LegalInvNrRec);
  rwcnt = MatRowCnt(LegalInvNrRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LegalInvNrRec,i,LegalInvNrrw);
    if (LegalInvNrrw.PurchDate<RepSpec.sStartDate) then begin
      FindInvoivcesInSerieStartBalance(bd,AddDay(RepSpec.sStartDate,-1),0,LegalInvNrrw.Serie,LegalInvNrrw.TSerStart,LegalInvNrrw.TSerEnd,
                                     sbserie,sbfirstnr,sblastnr,sbivcnt,i);
    end;
    FindInvoivcesInSerie(RepSpec.sStartDate,RepSpec.sEndDate,1,LegalInvNrrw.Serie,LegalInvNrrw.TSerStart,LegalInvNrrw.TSerEnd,
                         usedserie,usedfirstnr,usedlastnr,usedivcnt,usedivsum,usedacnt);
    FindInvoivcesInSerie(RepSpec.sStartDate,RepSpec.sEndDate,0,LegalInvNrrw.Serie,LegalInvNrrw.TSerStart,LegalInvNrrw.TSerEnd,
                         invserie,invfirstnr,invlastnr,invivcnt,invivsum,invacnt);

  end;
  if (rwcnt>0) then begin
    StartFormat(15);
     OutString(0,0,USetStr(14242),false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(14243),false);
     OutString(100,0,USetStr(14244),false);
     OutString(200,0,USetStr(14245),false);
     OutString(300,0,USetStr(14246),false);
    EndFormat;
    sumcnt = 0;
    for (i=0;i<rwcnt;i=i+1) begin
     if (sbivcnt[i]>0) then begin
        StartFormat(15);
         OutString(0,0,sbserie[i],false);
         M4PadString(sbfirstnr[i],len(sblastnr[i]),"0",true,tstr);
         OutString(100,0,tstr,false);
         OutString(200,0,sblastnr[i],false);
         OutLongInt(360,0,sbivcnt[i],true);
         sumcnt = sumcnt + sbivcnt[i];
        EndFormat;
      end;
    end;
    Gray_divider(0,1);
    StartFormat(15);
    OutString(0,0,USetStr(14247),false);
    OUtLongint(360,0,sumcnt,true);
    endformat;
  end;    
  StartFormat(5);
  endformat;
  Black_divider(0,1);
  StartFormat(5);
  endformat;
  
  rwc = rwcnt;
  StartFormat(15);
   OutString(0,0,USetStr(14252),false);
  EndFormat;
  StartFormat(15);
   OutString(0,0,USetStr(14243),false);
   OutString(100,0,USetStr(14244),false);
   OutString(200,0,USetStr(14245),false);
   OutString(300,0,USetStr(14246),false);
  EndFormat
  sumcnt = 0;
  for (rw = 0; rw < rwc; rw = rw +1 ) begin
    MatRowGet(LegalInvNrRec,rw,LegalInvNrrw);
    if (dateinrange(LegalInvNrrw.PurchDate, RepSpec.sStartDate,RepSpec.sEndDate)) then begin
      StartFormat(15);
       OutString(0,0,LegalInvNrrw.Serie,false);
       OutString(100,0,LegalInvNrrw.TSerStart,false);
       OutString(200,0,LegalInvNrrw.TSerEnd,false);
       OutLongInt(360,0,StringToLongInt(LegalInvNrrw.TSerEnd)-StringToLongInt(LegalInvNrrw.TSerStart)+1,true);
       sumcnt = sumcnt + StringToLongInt(LegalInvNrrw.TSerEnd)-StringToLongInt(LegalInvNrrw.TSerStart)+1;
      EndFormat;
    end;
  end;
  Gray_divider(0,1);
   Startformat(15); 
   OutString(0,0,USetStr(14247),false);
   OUtString(360,0,sumcnt,true);
  endformat;
  StartFormat(5);
  endformat;
  Black_divider(0,1);
  StartFormat(5);
  Endformat; 
  
  
  if (rwcnt>0) then begin
    StartFormat(15);
     OutString(0,0,USetStr(14249),false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(14243),false);
     OutString(100,0,USetStr(14244),false);
     OutString(200,0,USetStr(14245),false);
     OutString(300,0,USetStr(14246),false);
     OutString(480,0,USetStr(14248),true);
    EndFormat;
    sumcnt = 0;
    for (i=0;i<usedacnt;i=i+1) begin
      if (usedivcnt[i]>0) then begin
        StartFormat(15);
         OutString(0,0,usedserie[i],false);
         OutString(100,0,usedfirstnr[i],false);
         OutString(200,0,usedlastnr[i],false);
         OutLongInt(360,0,usedivcnt[i],true);
         OutVal(480,0,usedivsum[i],M4Val,true);
         sumcnt = sumcnt + usedivcnt[i];
         total = total + usedivsum[i];
        EndFormat;
      end;
    end;
    Gray_divider(0,1);
    Startformat(15); 
     OutString(0,0,USetStr(14247),false);
     OUtString(360,0,sumcnt,true);
     OUtString(480,0,total,true);
    endformat;
  end;   
  StartFormat(5);
  endformat;
  Black_divider(0,1);
  StartFormat(5);
  Endformat; 
  if (RepSpec.flags[0]==0) then begin
    if (rwcnt>0) then begin
      StartFormat(15);
       OutString(0,0,USetStr(14250),false);
     EndFormat;
      StartFormat(15);
       OutString(0,0,USetStr(14243),false);
       OutString(100,0,USetStr(14244),false);
       OutString(200,0,USetStr(14245),false);
       OutString(300,0,USetStr(14246),false);
       OutString(480,0,USetStr(14248),true);
      EndFormat;
      total =0;
      sumcnt = 0;
      for (i=0;i<invacnt;i=i+1) begin
        if (invivcnt[i]>0) then begin
          StartFormat(15);
           OutString(0,0,invserie[i],false);
           OutString(100,0,invfirstnr[i],false);
           OutString(200,0,invlastnr[i],false);
           OutLongInt(360,0,invivcnt[i],true);
           OutVal(480,0,invivsum[i],M4Val,true);
          EndFormat;
          sumcnt = sumcnt + invivcnt[i];
          total = total + invivsum[i];
        end;
      end;
      Gray_divider(0,1);
      Startformat(15); 
       OutString(0,0,USetStr(14247),false);
       OUtString(360,0,sumcnt,true);
       OUtString(480,0,total,true);
      endformat;
    end;
    StartFormat(10);
    endformat;
    Black_divider(0,1);
    StartFormat(5);
    endformat;
  end;    
  
  if (rwcnt>0) then begin
    StartFormat(15);
     OutString(0,0,USetStr(14251),false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(14243),false);
     OutString(100,0,USetStr(14244),false);
     OutString(200,0,USetStr(14245),false);
     OutString(300,0,USetStr(14246),false);
    EndFormat;
    sumcnt = 0;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(LegalInvNrRec,i,LegalInvNrrw);
      ivs = LegalInvNrrw.TSerStart;
      for (j=0;j<rwcnt;j=j+1) begin
        if (sbserie[j]==LegalInvNrrw.Serie) then begin
          if (nonblank(sbfirstnr[j])) then begin
            tstr = Right(sbfirstnr[j],len(sbfirstnr[j]) - len(LegalInvNrrw.Serie));
          end else begin
            tstr = StringToLongInt(LegalInvNrrw.TSerStart)-1;
          end;
          if ((StringToLongInt(tstr))>ivs) then begin
            ivs = StringToLongInt(tstr);
          end;
        end;
      end;
      for (j=0;j<usedacnt;j=j+1) begin
        if (usedserie[j]==LegalInvNrrw.Serie) then begin
          if (nonblank(usedlastnr[j])) then begin
            tstr = usedlastnr[j];
          end else begin
            tstr = StringToLongInt(LegalInvNrrw.TSerStart)-1;
          end;
          if ((StringToLongInt(tstr))>=ivs) then begin
            ivs = StringToLongInt(tstr) + 1;
          end;
          //StopALert(ivs);
        end;
      end;
      for (j=0;j<invacnt;j=j+1) begin
        if (invserie[j]==LegalInvNrrw.Serie) then begin
          if (nonblank(invlastnr[j])) then begin
            tstr = invlastnr[j];
          end else begin
            tstr = StringToLongInt(LegalInvNrrw.TSerStart)-1;
          end;
          if ((StringToLongInt(tstr))>=ivs) then begin
            ivs = StringToLongInt(tstr) + 1;
          end;
        end;
      end;
      
      StartFormat(15);
       OutString(0,0,LegalInvNrrw.Serie,false);
       M4PadString(ivs,len(LegalInvNrrw.TSerEnd),"0",true,tstr);
       OutString(100,0,tstr ,false);
       OutString(200,0,LegalInvNrrw.TSerEnd,false);
       OutString(360,0,StringToLongInt(LegalInvNrrw.TSerEnd) - ivs  + 1,true);
      EndFormat
      sumcnt = sumcnt + StringToLongInt(LegalInvNrrw.TSerEnd) - ivs  + 1;
    end;
    Gray_divider(0,1);
    Startformat(15); 
     OutString(0,0,USetStr(14247),false);
     OUtString(360,0,sumcnt,true);
    endformat;
  end;    
  
  EndJob;
  RETURN;
END;