external procedure HTObj(string,var string);
external function Boolean IsBankHolliday(Date,Boolean);
external function Boolean IsSaturday(Date);
external procedure AddLineToPlan(var record ProdVc,record ProdVc,row ProdVc,Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure HTDetailLevel(Integer, var string);
external procedure HTNr(Integer,Integer,LongInt,LongInt,var string);

function val ActivitiesTotal(LongInt prodnr)
begin
  val res;
  record ActVc Actr;
  Boolean found,testf;
  
  found = true;
  Actr.ProdSerNr = prodnr;
  Actr.OKFlag = 1;
  while (LoopKey("ProdNrOKFlag",Actr,2,found)) begin
    if (Actr.ProdSerNr!=prodnr) then begin found = false; end;
    if (Actr.OKFlag==0) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (Actr.TodoFlag!=kTodoFlagCalendar) then begin testf = false; end;
      if (Actr.CalTimeFlag!=kCalTimeFlagTime) then begin testf = false; end;
      if (testf) then begin
        res = res + TimeToVal(Actr.CostTime);
      end;
    end;
  end;
  ActivitiesTotal = res;
  return;
end;

procedure AddToActTypeArray(record ActVc Actr,Array string aperson,Array string aactype,Array val atime,var Integer acnt)
begin
  Integer i;
  
  for (i=0;i<acnt;i=i+1) begin
    if (aperson[i]==Actr.MainPersons) and (aactype[i]==Actr.ActType) then begin
      atime[i] = atime[i] + TimeToVal(Actr.CostTime);
      goto LAddToActTypeArray;
    end;
  end;
  aperson[acnt] = Actr.MainPersons;
  aactype[acnt] = Actr.ActType;
  atime[acnt] = TimeToVal(Actr.CostTime);
  acnt = acnt + 1;
LAddToActTypeArray:;  
  return;
end;

procedure PrintActTypeArray(Array string aperson,Array string aactype,Array val atime,Integer acnt,Boolean totf)
begin
  Integer i;
  record UserVc Userr;
  val tot;
  
  if (acnt>0) then begin
    if (totf) then begin
      Gray_Divider(180,1);
    end;
    StartFormat(15);
     OutString(180,0,USetStr(5097),false);
     OutString(230,0,USetStr(5098),false);
     OutString(400,0,USetStr(5099),false);
     OutString(1,0,USetStr(5100),true);
    EndFormat;
    Gray_Divider(180,1);
  end;
  for (i=0;i<acnt;i=i+1) begin
    StartFormat(15);
     OutString(180,0,aperson[i],false);
     Userr.Code = aperson[i];
     if (ReadFirstMain(Userr,1,true)) then begin end;
     OutString(230,0,Userr.Name,false);
     OutString(400,0,aactype[i],false);
     OutVal(1,0,atime[i],M4Val,true);
    EndFormat;
    tot = tot + atime[i];
  end;
  if (acnt>0) then begin
    Gray_Divider(430,1);
    StartFormat(15);
     OutVal(1,0,tot,M4Val,true);
    EndFormat;
  end;
  return;
end;

procedure PritnActivities(LongInt prodnr,Array string atotperson,Array string atotactype,Array val atottime,var Integer atotcnt)
begin
  record ActVc Actr;
  Boolean found,testf;
  Array string 255 aperson;
  Array string 255 aactype;
  Array val atime;
  Integer acnt;

  found = true;
  Actr.ProdSerNr = prodnr;
  Actr.OKFlag = 1;
  while (LoopKey("ProdNrOKFlag",Actr,2,found)) begin
    if (Actr.ProdSerNr!=prodnr) then begin found = false; end;
    if (Actr.OKFlag==0) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (Actr.TodoFlag!=kTodoFlagCalendar) then begin testf = false; end;
      if (Actr.CalTimeFlag!=kCalTimeFlagTime) then begin testf = false; end;
      if (testf) then begin
        AddToActTypeArray(Actr,aperson,aactype,atime,acnt);
        AddToActTypeArray(Actr,atotperson,atotactype,atottime,atotcnt);
      end;
    end;
  end;
  PrintActTypeArray(aperson,aactype,atime,acnt,true);
  return;
end;

procedure RepProd(record ProdVc Prodr,record RcVc RepSpec,var val totcost,
                  Array string atotperson,Array string atotactype,Array val atottime,var Integer atotcnt,
                  var LongInt runnr)
begin
  Integer i,rwcnt;
  Row ProdVc Prodrw;
  string 5 okchar;
  record INVc INr;
  val t,totc,qi,qo;
  
  StartFormat(15);
//  OutLongInt(0,0,runnr,false);
  runnr = runnr + 1;
  OutLongInt(0,"DblProd",Prodr.SerNr,false);
  OutDate(90,0,Prodr.StartDate,false);
  OutDate(150,0,Prodr.ProdDate,false);
  OutString(210,0,Prodr.Comment,false);
  OutVal(420,0,Prodr.Qty,M4Qty,true);
  if ((Prodr.PRStatusFlag==3) or (Prodr.PRStatusFlag==5)) then begin
    okchar = "Ã";
  end else begin
    okchar = "";
  end;
  OutString(470,0,okchar,true);
  EndFormat;
  StartFormat(15);
  OutString(50,0,Prodr.Recepy,false);
  OutString(200,0,Prodr.RecName,false);
  EndFormat;
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(20,0,USetStr(5107),false);
  OutString(124,0,USetStr(5108),true);
  OutString(200,0,USetStr(5109),true);
  OutString(220,0,USetStr(5110),false);
  OutString(400,0,USetStr(5111),true);
  if (RepSpec.flags[0]==1) then begin
    OutString(460,0,USetStr(2619),true);
  end else begin
    OutString(460,0,USetStr(5112),true);
  end;
  EndFormat;
  rwcnt = MatRowCnt(Prodr);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    qi = 0;
    qo = 0;
    MatRowGet(Prodr,i,Prodrw);
    if (RepSpec.flags[0]==1) then begin
      if (Prodrw.InQty<>0) then begin        
	      switch (Prodr.RowsHoldActualQty) begin
	        case 1: qi = Prodrw.InQty;
	        otherwise qi = Prodrw.InQty * Prodr.Qty;
	      end;      
      end;
      if (Prodrw.OutQty<>0) then begin
			  switch (Prodr.RowsHoldActualQty) begin
			    case 1: qo = Prodrw.OutQty;;
			    otherwise qo = Prodrw.OutQty * Prodr.Qty;
			  end;                      
      end;
      StartFormat(15);
      OutString(20,0,Prodrw.Item,false);
      OutVal(124,0,qi,M45Val,true);
      OutVal(200,0,qo,M45Val,true);
      OutString(220,0,Prodrw.SerialNr,false);
      if (Prodrw.InQty<>0) then begin
        if (ReadFirstItem(Prodrw.Item,INr,false,false)) then begin
          OutVal(400,0,INr.InPrice,M45Val,true);
          t = qi * INr.InPrice;
          OutVal(460,0,t,M45Val,true);
          totc = totc + t;
        end;
      end else begin
        Gray_Divider(350,460);        
			  switch (Prodr.RowsHoldActualQty) begin
			    case 1: qo = Prodrw.OutQty;
			    otherwise qo = Prodrw.OutQty * Prodr.Qty;
			  end;                      
        t = totc/qo;
        OutVal(400,0,t,M45Val,true);
        OutVal(460,0,totc,M45Val,true);
      end;
      EndFormat;
    end else begin
      t = 1;
      if (RepSpec.flags[8]!=0) then begin
			  switch (Prodr.RowsHoldActualQty) begin
			    case 1: ;
			    otherwise t = Prodr.Qty;
			  end;                              
      end;
      StartFormat(15);
      OutString(20,0,Prodrw.Item,false);
      OutVal(124,0,Prodrw.InQty*t,M4UVal,true);
      OutVal(200,0,Prodrw.OutQty*t,M4UVal,true);
      OutString(220,0,Prodrw.SerialNr,false);
      OutVal(400,0,Prodrw.ItemCost,M4Val,true);
      OutVal(460,0,Prodrw.ExtraCost,M4Val,true);
      EndFormat;
    end;
  end;
  if (RepSpec.flags[11]!=0) then begin
    PritnActivities(Prodr.SerNr,atotperson,atotactype,atottime,atotcnt);
  end;
  totcost = totcost + totc;
  return;
end;

function Boolean InsideThisShift(Date dat,Time tim,string shiftstr)
begin
  record WorkShiftVc WorkShiftr;
  Boolean res;
  
  res = true;
  WorkShiftr.Code = shiftstr;
  if (ReadFirstMain(WorkShiftr,1,true)) then begin
    if (IsBankHolliday(dat,false)) then begin
      if (IsSaturday(dat)) then begin
        if (WorkShiftr.Saturday==0) then begin
          res = false;
        end;
      end else begin
        if (WorkShiftr.Sunday==0) then begin
          res = false;
        end;
      end;
    end else begin
      switch (GetDateId(dat)) begin
        case 1: if (WorkShiftr.Monday==0) then begin res = false; end;
        case 2: if (WorkShiftr.Tuesday==0) then begin res = false; end;
        case 3: if (WorkShiftr.Wednesday==0) then begin res = false; end;
        case 4: if (WorkShiftr.Thursday==0) then begin res = false; end;
        case 5: if (WorkShiftr.Friday==0) then begin res = false; end;
        case 6: if (WorkShiftr.Saturday==0) then begin res = false; end;
        case 7: if (WorkShiftr.Sunday==0) then begin res = false; end;
      end;
    end;
    if (res) then begin
      res = false;
      if (WorkShiftr.StartTime<WorkShiftr.EndTime) then begin
        if ((WorkShiftr.StartTime<=tim) and (WorkShiftr.EndTime>=tim)) then begin
          res = true;
        end;
      end else begin
        if ((WorkShiftr.StartTime>=tim) and (WorkShiftr.EndTime<=tim)) then begin
          res = true;
        end;
      end;
    end;
  end else begin
    res = false;
  end;
  InsideThisShift = res;
  return;
end;

global
procedure ProdRn(record RcVc RepSpec)
begin
  record ProdVc Prodr;
  record ProdVc TotalProdr;
  record INVc INr;
  row ProdVc Prodrw;
  Boolean TrHs;
  Val totqty,totcost,totcost2;
  Boolean testf;
  LongInt afr,ato;
  Integer rw;
  string 5 okchar;
  string 255 tstr;
  Integer rwcnt,i;
  LongInt runnr;

  Array string 255 atotperson;
  Array string 255 atotactype;
  Array val atottime;
  Integer atotcnt;

  runnr = 1;
  afr = FirstInRange(RepSpec.f1,30);
  ato = LastInRange(RepSpec.f1,30);
  StartReportJob(USetStr(5101));
  rw = 1;
  if (nonblank(RepSpec.f1)) then begin
    HTNr(6659,6660,afr,ato,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  HTDetailLevel(RepSpec.ArtMode,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (nonblank(RepSpec.ObjStr)) then begin
    HTObj(RepSpec.ObjStr,tstr);
    Header(rw,tstr,1);
  end;
  EndHeader;
  if ((RepSpec.ArtMode==0) or (RepSpec.ArtMode==2))  then begin
    StartFormat(15);
    OutString(0,0,USetStr(5102),false);
    OutString(60,0,USetStr(5103),false);
    OutString(140,0,USetStr(5106),false);
    if (RepSpec.flags[11]!=0) then begin
      OutString(240,0,USetStr(5100),true);
      OutString(300,0,USetStr(5113),true);
      OutString(310,0,USetStr(5104),false);
    end else begin
      OutString(240,0,USetStr(5113),true);
      OutString(250,0,USetStr(5104),false);
    end;
    OutString(1,0,USetStr(5105),true);
    EndFormat;
  end;
  if (RepSpec.ArtMode==1)  then begin
    StartFormat(15);
    OutString(0,0,USetStr(5102),false);
    OutString(90,0,USetStr(5096),false);
    OutString(150,0,USetStr(5103),false);
    OutString(220,0,USetStr(5104),false);
    OutString(420,0,USetStr(5113),true);
    OutString(1,0,USetStr(5105),true);
    EndFormat;
  end;
  Prodr.SerNr = afr;
  if (RepSpec.ArtMode==0) then begin
    Gray_Divider(0,1);
  end;
  TrHs = true;
  while LoopMain(Prodr,1,TrHs) begin
     if (ato<>-1) then begin
        if (Prodr.SerNr>ato) then begin
         TrHs = false;
        end;
     end;
    if (TrHs) then begin
      testf = true;
       if ((Prodr.ProdDate<RepSpec.sStartDate) or (Prodr.ProdDate>RepSpec.sEndDate)) then begin
        testf = false;
      end;
      testf = false;
      if (RepSpec.flags[3]!=0) then begin
        if (Prodr.PRStatusFlag==0) then begin testf = true; end;
      end;
      if (RepSpec.flags[4]!=0) then begin
        if (Prodr.PRStatusFlag==4) then begin testf = true; end;
      end;
      if (RepSpec.flags[5]!=0) then begin
        if (Prodr.PRStatusFlag==2) then begin testf = true; end;
      end;
      if (RepSpec.flags[6]!=0) then begin
        if (Prodr.PRStatusFlag==3) then begin testf = true; end;
      end;
      if (RepSpec.flags[7]!=0) then begin
        if (Prodr.PRStatusFlag==5) then begin testf = true; end;
      end;
      if (testf) then begin
        if ((Prodr.ProdDate<RepSpec.sStartDate) or (Prodr.ProdDate>RepSpec.sEndDate)) then begin
          testf = false;
        end;
        if (nonblank(RepSpec.f2)) then begin
          if (RepSpec.f2<>Prodr.Recepy) then begin testf = false; end;
        end;
        if (nonblank(RepSpec.f3)) then begin
          if (InsideThisShift(Prodr.ProdDate,Prodr.StartTime,RepSpec.f3)==false) then begin
            testf = false;
          end;
        end;
      end;
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,Prodr.Objects)==false) then begin testf = false; end;
      end;
      if (testf) then begin
        if RepSpec.ArtMode==1 then begin
          Gray_Divider(0,1);
          RepProd(Prodr,RepSpec,totcost,atotperson,atotactype,atottime,atotcnt,runnr);
        end;
        if (RepSpec.ArtMode==0) then begin
          StartFormat(15);
          OutLongInt(0,"DblProd",Prodr.SerNr,false);
          OutDate(60,0,Prodr.ProdDate,false);
          OutString(140,0,Prodr.Recepy,false);
          if (RepSpec.flags[11]!=0) then begin
            OutVal(240,0,ActivitiesTotal(Prodr.SerNr),M4Val,true);
            OutVal(300,0,Prodr.Qty,M4Qty,true);
            OutString(310,0,Prodr.Comment,false);
          end else begin
            OutVal(240,0,Prodr.Qty,M4Qty,true);
            OutString(250,0,Prodr.Comment,false);
          end;
          if ((Prodr.PRStatusFlag==3) or (Prodr.PRStatusFlag==5)) then begin
            okchar = "Ã";
          end else begin
            okchar = "";
          end;
          OutString(470,0,okchar,true);
          EndFormat;
        end;
        if (RepSpec.flags[10]!=0) then begin
          rwcnt = MatRowCnt(Prodr);
          for (i = 0 ; i<rwcnt ;i=i+1) begin
            MatRowGet(Prodr,i,Prodrw);
            AddLineToPlan(TotalProdr,Prodr,Prodrw,1);
          end;
        end;
      end;
    end;
  end;
  Gray_Divider(0,1);
  if (RepSpec.flags[0]==1) then begin
    StartFormat(15);
    OutVal(460,0,totcost,M45Val,true);    
    EndFormat;
  end;
// same loops twice, can be made nicer.
  if (RepSpec.flags[10]!=0) then begin
    StartFormat(15);
    EndFormat;
    StartFormat(15);
    OutString(0,0,USetStr(4994),false);
    EndFormat;
    StartFormat(15);
    OutString(20,0,USetStr(5107),false);
    OutString(124,0,USetStr(5108),true);
    OutString(200,0,USetStr(5109),true);
    OutString(220,0,USetStr(5110),false);
    OutString(400,0,USetStr(5111),true);
    if (RepSpec.flags[0]==1) then begin
      OutString(460,0,USetStr(2619),true);
    end else begin
      OutString(460,0,USetStr(5112),true);
    end;
    EndFormat;
    Gray_Divider(20,460);
    totqty = 0;
    totcost = 0;
    rwcnt = MatRowCnt(TotalProdr);
    for (i = 0 ; i<rwcnt ;i=i+1) begin
      MatRowGet(TotalProdr,i,Prodrw);
      if (Prodrw.InQty!=0) then begin
        StartFormat(15);
        OutString(20,0,Prodrw.Item,false);
        OutVal(124,0,Prodrw.InQty,M4UVal,true);
        OutVal(200,0,BlankVal,M4UVal,true);
        if (RepSpec.flags[0]==0) then begin
          OutVal(400,0,Prodrw.ItemCost,M4Val,true);
          OutVal(460,0,Prodrw.ExtraCost,M4Val,true);
          totcost = totcost + Prodrw.ItemCost;
          totcost2 = totcost2 + Prodrw.ExtraCost;
        end else begin
          if (ReadFirstItem(Prodrw.Item,INr,false,false)) then begin
            OutVal(400,0,INr.InPrice,M45Val,true);
            OutVal(460,0,Prodrw.InQty * INr.InPrice,M45Val,true);
            totcost = totcost + Prodrw.InQty * INr.InPrice;
          end;
        end;
        EndFormat;
        totqty = totqty + Prodrw.InQty;
      end;
    end;
    Gray_Divider(20,460);
    StartFormat(15);
    OutVal(124,0,totqty,M4UVal,true);
    if (RepSpec.flags[0]==0) then begin
      OutVal(400,0,totcost,M4Val,true);
      OutVal(460,0,totcost2,M4Val,true);
    end else begin
      OutVal(460,0,totcost,M45Val,true);
    end;
    EndFormat;
    StartFormat(15);
    EndFormat;
    StartFormat(15);
    OutString(0,0,USetStr(4995),false);
    EndFormat;
    StartFormat(15);
    OutString(20,0,USetStr(5107),false);
    OutString(124,0,USetStr(5108),true);
    OutString(200,0,USetStr(5109),true);
    OutString(220,0,USetStr(5110),false);
    OutString(400,0,USetStr(5111),true);
    if (RepSpec.flags[0]==1) then begin
      OutString(460,0,USetStr(2619),true);
    end else begin
      OutString(460,0,USetStr(5112),true);
    end;
    EndFormat;
    Gray_Divider(20,460);
    totqty = 0;
    totcost = 0;
    rwcnt = MatRowCnt(TotalProdr);
    for (i = 0 ; i<rwcnt ;i=i+1) begin
      MatRowGet(TotalProdr,i,Prodrw);
      if (Prodrw.OutQty!=0) then begin
        StartFormat(15);
        OutString(20,0,Prodrw.Item,false);
        OutVal(124,0,BlankVal,M4UVal,true);
        OutVal(200,0,Prodrw.OutQty,M4UVal,true);
        if (RepSpec.flags[0]==0) then begin
          OutVal(400,0,Prodrw.ItemCost,M4Val,true);
          OutVal(460,0,Prodrw.ExtraCost,M4Val,true);
          totcost = totcost + Prodrw.ItemCost;
          totcost2 = totcost2 + Prodrw.ExtraCost;
        end else begin
          if (ReadFirstItem(Prodrw.Item,INr,false,false)) then begin
            OutVal(400,0,INr.InPrice,M45Val,true);
            OutVal(460,0,Prodrw.OutQty * INr.InPrice,M45Val,true);
            totcost = totcost + Prodrw.InQty * INr.InPrice;
          end;
        end;
        EndFormat;
        totqty = totqty + Prodrw.OutQty;
      end;
    end;
    Gray_Divider(20,460);
    StartFormat(15);
    OutVal(200,0,totqty,M4UVal,true);
    if (RepSpec.flags[0]==0) then begin
      OutVal(400,0,totcost,M4Val,true);
      OutVal(460,0,totcost2,M4Val,true);
    end else begin
      OutVal(460,0,totcost,M45Val,true);
    end;
    EndFormat;
  end;
  PrintActTypeArray(atotperson,atotactype,atottime,atotcnt,false);
  EndJob;
  return;
end;
