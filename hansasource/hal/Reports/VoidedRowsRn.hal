procedure PrintVoidReasonArray(array string vreasons,array val vreanonscnt,Integer vacnt)
begin
  Integer i;
  record StandProblemVc SPr;
  string 255 tstr;

  StartFormat(15);
  EndFormat;
  StartFormat(15);
   OutString(4,0,USetStr(18178),false);
   OutString(360,0,USetStr(18179),true);
  EndFormat;
  Gray_Divider(4,360);
  for (i=0;i<vacnt;i=i+1) begin
    StartFormat(15);
      tstr = vreasons[i];
      SPr.Code = vreasons[i];
      if (ReadFirstMain(SPr,1,true)) then begin
        if (nonblank(SPr.ShortDesc)) then begin
          tstr = SPr.ShortDesc;
        end;
      end;
      OutString(4,0,tstr,false);
      OutVal(360,0,vreanonscnt[i],M4Val,true);
    EndFormat;
  end;
  return;
end;

procedure AddToVoidReasonArray(row RestAccVc RestAccrw,var array string vreasons,var array val vreanonscnt,var Integer vacnt)
begin
  Integer i;

  for (i=0;i<vacnt;i=i+1) begin
    if (vreasons[i]==RestAccrw.StandProblemCode) then begin
      vreanonscnt[i] = vreanonscnt[i] - RestAccrw.Quant;
      goto LAddToVoidReasonArray;
    end;
  end;
  vreasons[vacnt] = RestAccrw.StandProblemCode;
  vreanonscnt[vacnt] = - RestAccrw.Quant;
  vacnt = vacnt + 1;
LAddToVoidReasonArray:;
  return;
end;

procedure PrintRestAcc(record RcVc RepSpec,var val tot,var array string vreasons,var array val vreanonscnt,var Integer vacnt)
begin
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  row RestAccVc voidedRestAccrw;
  Boolean found,voidf,testf,headf;
  Integer i,rwcnt;
  
  headf = true;
  found = true;
  RestAccr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",RestAccr,1,found)) begin
    if (RestAccr.TransDate>RepSpec.sEndDate) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (RestAccr.Closed==0) then begin
        testf = false;
      end;
      if (testf) then begin
        voidf = false;
        rwcnt = MatRowCnt(RestAccr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(RestAccr,i,RestAccrw);
          if (RestAccrw.stp==kInvoiceRowTypeVoid) then begin
            testf = true;
            if (RestAccrw.VoidedRowNr>=0) then begin
              MatRowGet(RestAccr,RestAccrw.VoidedRowNr,voidedRestAccrw);
            end else begin
              if (i>0) then begin
                MatRowGet(RestAccr,i-1,voidedRestAccrw);
              end;
            end;
            if (nonblank(RepSpec.LastAcc)) then begin
              if (RestAccrw.VoidedSign!=RepSpec.LastAcc) then begin
                testf = false;
              end;
            end;
            if (nonblank(RepSpec.FirstAcc)) then begin
              if (RestAccr.Cashier!=RepSpec.FirstAcc) then begin
                testf = false;
              end;
            end;
            if (nonblank(RepSpec.f1)) then begin
              if (RestAccrw.StandProblemCode!=RepSpec.f1) then begin
                testf = false;
              end;
            end;
            if (testf) then begin
              if (headf) then begin
                StartFormat(15);
                 OutString(0,0,USetStr(18188),false);
                EndFormat;
                headf = false;
              end;
              StartFormat(15);
               OutLongInt(0,"DblRestAccVc",RestAccr.SerNr,false);
               OutDate(2,0,RestAccr.TransDate,false);
               OutString(3,0,RestAccrw.ArtCode,false);
               OutString(4,0,RestAccr.Cashier,false);
               OutString(5,0,RestAccrw.VoidedSign,false);
               OutString(6,0,RestAccrw.Spec,false);
               OutVal(1,0,RestAccrw.Quant*RestAccrw.Price,M4Val,true);
              EndFormat;
              AddToVoidReasonArray(RestAccrw,vreasons,vreanonscnt,vacnt);
              tot = tot + RestAccrw.Quant*RestAccrw.Price;
            end;
          end;        
        end;
      end;
    end;
  end;
  return;
end;

procedure PrintIV(record RcVc RepSpec,var val tot)
begin
  record IVVc IVr;
  row IVVc IVrw;
  row IVVc voidedIVrw;
  Boolean found,voidf,testf,headf;
  Integer i,rwcnt;
  
  headf = true;
  found = true;
  IVr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",IVr,1,found)) begin
    if (IVr.TransDate>RepSpec.sEndDate) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (IVr.OKFlag==0) then begin
        testf = false;
      end;
      if (testf) then begin
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          if (IVrw.stp==kInvoiceRowTypeVoid or IVrw.stp==kInvoiceRowTypeUpdateMark) then begin
            testf = true;
            if (IVrw.VoidedRowNr>=0) then begin
              MatRowGet(IVr,IVrw.VoidedRowNr,voidedIVrw);
            end else begin
              if (i>0) then begin
                MatRowGet(IVr,i-1,voidedIVrw);
              end;
            end;
            if (nonblank(RepSpec.LastAcc)) then begin
              if (IVrw.VoidedSign!=RepSpec.LastAcc) then begin
                testf = false;
              end;
            end;
            if (nonblank(RepSpec.FirstAcc)) then begin
              if (IVr.SalesMan!=RepSpec.FirstAcc) then begin
                testf = false;
              end;
            end;
            if (testf) then begin
              if (headf) then begin
                StartFormat(15);
                 OutString(0,0,USetStr(18189),false);
                EndFormat;
                headf = false;
              end;
              StartFormat(15);
               OutLongInt(0,"DblIVVc",IVr.SerNr,false);
               OutDate(2,0,IVr.TransDate,false);
               OutString(3,0,voidedIVrw.ArtCode,false);
               OutString(4,0,IVr.SalesMan,false);
               OutString(5,0,IVrw.VoidedSign,false);
               OutString(6,0,voidedIVrw.Spec,false);
               OutVal(1,0,-voidedIVrw.Sum,M4Val,true);
              EndFormat;
              tot = tot - voidedIVrw.Sum;
            end;
          end;        
        end;
      end;
    end;
  end;
  return;
end;

procedure PrintIVCash(record RcVc RepSpec,var val tot)
begin
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  row IVCashVc voidedIVCashrw;
  Boolean found,voidf,testf,headf;
  Integer i,rwcnt;
  
  headf = true;
  found = true;
  IVCashr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",IVCashr,1,found)) begin
    if (IVCashr.TransDate>RepSpec.sEndDate) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (IVCashr.OKFlag==0) then begin
        testf = false;
      end;
      if (testf) then begin
        rwcnt = MatRowCnt(IVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVCashr,i,IVCashrw);
          if (IVCashrw.stp==kInvoiceRowTypeVoid or IVCashrw.stp==kInvoiceRowTypeUpdateMark) then begin
            testf = true;
            if (IVCashrw.VoidedRowNr>=0) then begin
              MatRowGet(IVCashr,IVCashrw.VoidedRowNr,voidedIVCashrw);
            end else begin
              if (i>0) then begin
                MatRowGet(IVCashr,i-1,voidedIVCashrw);
              end;
            end;
            if (nonblank(RepSpec.LastAcc)) then begin
              if (IVCashrw.VoidedSign!=RepSpec.LastAcc) then begin
                testf = false;
              end;
            end;
            if (nonblank(RepSpec.FirstAcc)) then begin
              if (IVCashr.SalesMan!=RepSpec.FirstAcc) then begin
                testf = false;
              end;
            end;
            if (testf) then begin
              if (headf) then begin
                StartFormat(15);
                 OutString(0,0,USetStr(18177),false);
                EndFormat;
                headf = false;
              end;
              StartFormat(15);
               OutLongInt(0,"DblIVCashVc",IVCashr.SerNr,false);
               OutDate(2,0,IVCashr.TransDate,false);
               OutString(3,0,voidedIVCashrw.ArtCode,false);
               OutString(4,0,IVCashr.SalesMan,false);
               OutString(5,0,IVCashrw.VoidedSign,false);
               OutString(6,0,voidedIVCashrw.Spec,false);
               OutVal(1,0,-voidedIVCashrw.Sum,M4Val,true);
              EndFormat;
              tot = tot - voidedIVCashrw.Sum;
            end;
          end;        
        end;
      end;
    end;
  end;
  return;
end;

global
procedure VoidedRowsRn(record RcVc RepSpec)
begin
  val totra,totiv,totivcash;
  array string 255 vreasons;
  array val vreanonscnt;
  Integer vacnt;
  
  StartReportJob(USetStr(18180));
  EndHeader;
  SetRepCol(2,60);
  SetRepCol(3,120);
  SetRepCol(4,180);
  SetRepCol(5,210);
  SetRepCol(6,250);

  StartFormat(15);
   OutString(0,0,USetStr(18181),false);
   OutString(2,0,USetStr(18182),false);
   OutString(3,0,USetStr(18183),false);
   OutString(4,0,USetStr(18184),false);
   OutString(5,0,USetStr(18185),false);
   OutString(6,0,USetStr(18186),false);
   OutString(1,0,USetStr(18187),true);
  EndFormat;
  Gray_Divider(0,1);
  PrintRestAcc(RepSpec,totra,vreasons,vreanonscnt,vacnt);
  if (totra!=0) then begin
    Gray_Divider(0,1);
    StartFormat(15);
     OutVal(1,0,totra,M4Val,true);
    EndFormat;
  end;
  PrintIV(RepSpec,totiv);
  if (totiv!=0) then begin
    Gray_Divider(0,1);
    StartFormat(15);
     OutVal(1,0,totiv,M4Val,true);
    EndFormat;
  end;
  PrintIVCash(RepSpec,totivcash);
  if (totivcash!=0) then begin
    Gray_Divider(0,1);
    StartFormat(15);
     OutVal(1,0,totivcash,M4Val,true);
    EndFormat;
  end;
  if ((totiv!=0 and totra!=0) or (totiv!=0 and totivcash!=0) or (totra!=0 and totivcash!=0)) then begin
    StartFormat(15);
    EndFormat;
    Gray_Divider(365,1);
    StartFormat(15);
     OutVal(1,0,totra+totiv+totivcash,M4Val,true);
    EndFormat;
  end;
  PrintVoidReasonArray(vreasons,vreanonscnt,vacnt);
  EndJob;
  return;
end;