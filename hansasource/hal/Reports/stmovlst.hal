external procedure HTArtGroup(string, var string);
external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean ItemInItemGroupOrClass(string,string,string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure HTItems(string,var string);
external function roundmode DefaultRoundMode();
external procedure CutDecimals(val, var string);
external procedure HT2Per(Date, Date , var string);
external procedure GetCurRateText(var string,val,val,val);

global
procedure StockMovJRn(record RcVc RepSpec)
begin
  record StockMovVc SMr;
  Boolean TrHs, testf;
  LongInt afr,ato;
  Integer i,rwcnt,rw;
  Row  StockMovVc StockMovRw;
  record INVc INr;
  Boolean found,rowheaderf;
  string 200 tstr;
  Val rcvqty,totrcvqty,rowsum,docsum,totsum,sentqty,totsentqty;
  val t;
  record MainStockBlock MainStockRec;
  string 255 frin,toin;
  row StockMovVc SMrw;
  
  BlockLoad(MainStockRec);
  afr = FirstInRange(RepSpec.f1,50);
  ato = LastInRange(RepSpec.f1,50);
  frin = FirstInRange(RepSpec.f4,50);
  toin = LastInRange(RepSpec.f4,50);
  StartReportJob(USetStr(5240));
   rw = 1;
   HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
   Header(rw,tstr,1);
   rw = rw +1;
   tstr = "";
   if (nonblank(RepSpec.f1)) then begin
     tstr = USetStr(1141);
     tstr = tstr & RepSpec.f1;
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
   if (RepSpec.flags[3]==0) then begin
    if (nonblank(RepSpec.f2)) then begin
      tstr = USetStr(5244);
      tstr = tstr & ": " & RepSpec.f2;
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    if (nonblank(RepSpec.f3)) then begin
      tstr = USetStr(5245);
      tstr = tstr & ": " & RepSpec.f3;
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    if (nonblank(RepSpec.FirstAcc)) then begin
      tstr = USetStr(5265);
      tstr = tstr & ": " & RepSpec.FirstAcc;
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (RepSpec.flags[3]==1) then begin
    if (nonblank(RepSpec.f2) or nonblank(RepSpec.f3) or nonblank(RepSpec.FirstAcc)) then begin
      tstr = USetStr(7582);
      tstr = tstr & ": " & RepSpec.f2 & ", " & RepSpec.f3 & ", " & RepSpec.FirstAcc;
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  tstr = USetStr(2696) & ":";
  if (RepSpec.flags[1]==0) then begin
    tstr = tstr &  USetStr(5259) & " " & USetStr(1319) & " " & USetStr(5258) ;
  end;
  if (RepSpec.flags[1]==1) then begin
    tstr = tstr & USetStr(5259);
  end;
  if (RepSpec.flags[1]==2) then begin
    tstr = tstr & USetStr(5258);
  end;
  
  tstr = tstr & ", ";
  if (RepSpec.flags[2]==0) then begin
    tstr = tstr &  USetStr(5257) & " " & USetStr(1319) & " " & USetStr(5256) ;
  end;
  if (RepSpec.flags[2]==1) then begin
    tstr = tstr & USetStr(5257);
  end;
  if (RepSpec.flags[2]==2) then begin
    tstr = tstr & USetStr(5256);
  end;
  
  tstr = tstr & ", ";
  if (RepSpec.flags[5]==0) then begin
    tstr = tstr &  USetStr(5255) & " " & USetStr(1319) & " " & USetStr(5254) ;
  end;
  if (RepSpec.flags[5]==1) then begin
    tstr = tstr & USetStr(5255);
  end;
  if (RepSpec.flags[5]==2) then begin
    tstr = tstr & USetStr(5254);
  end;
  Header(rw,tstr,0);
  HTItems(RepSpec.f4,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (HasItemGroups) then begin
    HTArtGroup(RepSpec.f5,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasItemClassification) then begin
    HTItemClass(RepSpec.f6,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;  
  EndHeader;
  if (RepSpec.ArtMode==1) then begin         //  Detailed
    StartFormat(15);
    OutString(0,0,USetStr(5241),false);
    OutString(55,0,USetStr(5242),false);
    OutString(200,0,USetStr(5246),false);   // Currency
    OutString(240,0,USetStr(5247),false);   // Rate
    OutString(300,0,USetStr(5244),false);    // From Stock
    OutString(365,0,USetStr(5239),false);   // Via Stock
    OutString(430,0,USetStr(5245),false);   // To Stock
    EndFormat;
    Gray_Divider(0,1);
  end;
  if (RepSpec.ArtMode==0) then begin         //Overview
    StartFormat(15);
    OutString(0,0,USetStr(5241),false);    //Ser.No
    OutString(55,0,USetStr(5242),false);   //Trans. Date
    OutString(100,0,USetStr(5243),false);  //Comment
    OutString(205,0,USetStr(5244),false);  //From Stock
    OutString(255,0,USetStr(5239),false);  //Via Stock
    OutString(310,0,USetStr(5245),false);  //To Stock
    OutStringAdjustBiDi(380,0,USetStr(5272),true,M4Val,415);   //Qty
    OutStringAdjustBiDi(420,0,USetStr(5249),true,M4Val,455);   //Qty
    switch (RepSpec.flags[4]) begin
      case 0: OutStringAdjustBiDi(1,0,USetStr(5266),true,M4Val,510);
      case 1: OutStringAdjustBiDi(1,0,USetStr(5267),true,M4Val,510);
      case 2: OutStringAdjustBiDi(1,0,USetStr(5253),true,M4Val,510);
    end;
    EndFormat;
    Gray_Divider(0,1);
  end;

  totrcvqty = 0;
  totsentqty = 0;
  totsum = 0;

  SMr.SerNr = afr;
  TrHs = true;
  while LoopMain(SMr,1,TrHs) begin
    testf = true;
    if (TrHs) then begin
      if (ato<>-1) then begin
        if (SMr.SerNr>ato) then begin
          TrHs = false;
        end;
      end;
    end;
    if (nonblankdate(SMr.TransDate)) then begin
      if ((SMr.TransDate<RepSpec.sStartDate) or (SMr.TransDate>RepSpec.sEndDate)) then begin
        testf = false;
      end;
    end else begin
      if (nonblankdate(SMr.SentTransDate)) then begin
        if ((SMr.OrdTransDate<RepSpec.sStartDate) or (SMr.OrdTransDate>RepSpec.sEndDate)) then begin
          testf = false;
        end;
      end else begin
        if (nonblankdate(SMr.OrdTransDate)) then begin
          if ((SMr.OrdTransDate<RepSpec.sStartDate) or (SMr.OrdTransDate>RepSpec.sEndDate)) then begin
            testf = false;
          end;
        end;
      end;
    end;
    if (RepSpec.flags[3]==0) then begin
      if (nonblank(RepSpec.f2) and (RepSpec.f2<>SMr.FrLocation)) then begin
        testf = false;
      end;
      if (nonblank(RepSpec.f3) and (RepSpec.f3<>SMr.ToLocation)) then begin
        testf = false;
      end;
      if (nonblank(RepSpec.FirstAcc) and (RepSpec.FirstAcc<>SMr.ThrouLocation)) then begin
        testf = false;
      end;
    end else begin
      if (nonblank(RepSpec.f2) and (RepSpec.f2<>SMr.FrLocation) and (RepSpec.f2<>SMr.ToLocation)) then begin
        testf = false;
      end;
      if (nonblank(RepSpec.f3) and (RepSpec.f3<>SMr.ToLocation) and (RepSpec.f3<>SMr.FrLocation)) then begin
        testf = false;
      end;
    end;
    if (RepSpec.long1<>-1) then begin
      if (SMr.ProdSerNr<>RepSpec.long1) then begin
        testf = false;
      end;
    end;

    if (testf) then begin
      if ((RepSpec.flags[1]==1) and (SMr.OrdFlag!=0)) then begin
        testf = false;
      end;
      if ((RepSpec.flags[1]==2) and (SMr.OrdFlag==0)) then begin
        testf = false;
      end;
      if ((RepSpec.flags[2]==1) and (SMr.SentOKFlag!=0)) then begin
        testf = false;
      end;
      if ((RepSpec.flags[2]==2) and (SMr.SentOKFlag==0)) then begin
        testf = false;
      end;
      if ((RepSpec.flags[5]==1) and (SMr.OKFlag!=0)) then begin
        testf = false;
      end;
      if ((RepSpec.flags[5]==2) and (SMr.OKFlag==0)) then begin
        testf = false;
      end;
    end;

    if (testf) then begin
      if (nonblank(RepSpec.f4)) then begin
        testf = false;
        rwcnt = MatRowCnt(SMr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(SMr,i,SMrw);
          if (SMrw.ArtCode>=frin) and (SMrw.ArtCode<=toin) then begin
            testf = true;
            if (testf) then begin
              testf = ItemInItemGroupOrClass(SMrw.ArtCode,RepSpec.f5,RepSpec.f6);
            end;            
            if (testf) then begin
              i = rwcnt;
            end;
          end;
        end;
      end;
    end;
    if (testf) then begin
      if (RepSpec.flags[6]!=0) then begin
        testf = false;
        rwcnt = MatRowCnt(SMr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(SMr,i,SMrw);
          if (SMrw.SentQuant!=SMrw.Quant) then begin
            testf = true;
            i = rwcnt;
          end;
        end;
      end;
    end;
    if ((TrHs==true) and (testf==true)) then begin
      if (RepSpec.ArtMode==1) then begin
         StartFormat(15);
         OutLongInt(0,"DblStockMov",SMr.SerNr,false);
         OutDate(55,0,SMr.TransDate,false);
         OutDate(120,0,SMr.RegDate,false);
         OutString(200,0,SMr.CurncyCode,false);
         GetCurRateText(tstr,1,2,SMr.ToRateB2);
         OutString(240,0,tstr,false);
         OutString(300,0,SMr.FrLocation,false);
         OutString(365,0,SMr.ThrouLocation,false);
         OutString(430,0,SMr.ToLocation,false);
         EndFormat;
         if (nonblank(SMr.Comment)) then begin
           StartFormat(15);
           OutString(0,0,SMr.Comment,false);
           EndFormat;
         end;
         sentqty = 0;
         rcvqty = 0;
         docsum = 0;
         rowheaderf = true;
         rwcnt = MatRowCnt(SMr);
         for (i=0;i<rwcnt;i=i+1) begin
           MatRowGet(SMr,i,StockMovrw);
           testf = true;
           if (nonblank(RepSpec.f4)) then begin
             if (StockMovrw.ArtCode<frin) or (StockMovrw.ArtCode>toin) then begin
               testf = false;
             end;
           end;
           if (RepSpec.flags[6]!=0) then begin
             if (StockMovrw.SentQuant==StockMovrw.Quant) then begin testf = false; end;
           end;
           if (testf) then begin
             testf = ItemInItemGroupOrClass(StockMovrw.ArtCode,RepSpec.f5,RepSpec.f6);
           end;                 
           if (testf) then begin
             if (rowheaderf) then begin
                StartFormat(5);
                EndFormat;
                StartFormat(15);
                OutString(15,0,USetStr(5248),false);
                OutString(75,0,USetStr(5271),false);  //Unit
                OutString(105,0,USetStr(5250),false);   // Item Descr.
                OutString(225,0,USetStr(5252),false);    // Serial.No.
                OutStringAdjustBiDi(300,0,USetStr(5272),true,M4Val,340);
                OutStringAdjustBiDi(335,0,USetStr(5249),true,M4Val,375);
                OutString(380,0,USetStr(5270),true);
                switch (RepSpec.flags[4]) begin
                  case 0: OutStringAdjustBiDi(430,0,USetStr(5266),true,M4Val,460);
                  case 1: OutStringAdjustBiDi(430,0,USetStr(5267),true,M4Val,460);
                  case 2: OutStringAdjustBiDi(430,0,USetStr(5253),true,M4Val,460);
                end;
                OutStringAdjustBiDi(1,0,USetStr(4005),true,M4Val,510);    // Row total
                EndFormat;
                Gray_Divider(0,1);
                rowheaderf = false;
             end;
             ReadFirstItem(StockMovrw.ArtCode,INr,false,true);
             StartFormat(15);
             OutString(15,0,StockMovrw.ArtCode,false);
             OutString(75,0,INr.Unittext,false);
             OutString(105,0,Left(StockMovrw.Spec,30),false);
             t = 0;
             if (nonblank(StockMovrw.Coefficient) and (StockMovrw.Coefficient>0)) then begin
               if (MainStockRec.UnitConvCalc==0) then begin
                 t = StockMovrw.Quant*StockMovrw.Coefficient;
               end else begin
                 t = StockMovrw.Quant/StockMovrw.Coefficient;
               end;
               OutVal(140,0,t,M4UVal,true);
             end;
             OutString(225,0,StockMovrw.SerialNr,false);
             OutValBiDi(300,0,StockMovrw.SentQuant,M4Qty,true,340);
             OutValBiDi(335,0,StockMovrw.Quant,M4Qty,true,375);
             if (RepSpec.flags[4]==2) then begin
               OutValBiDi(430,0,StockMovrw.BasePrice,M45Val,true,460);
               rowsum = Round(StockMovrw.Quant*StockMovrw.BasePrice,DefaultRoundMode);
             end;
             if (RepSpec.flags[4]==1) then begin
               OutString(380,0,StockMovrw.ExtraSCost,true);
               OutValBiDi(430,0,StockMovrw.OldPrice,M45Val,true,460);
               rowsum = Round(StockMovrw.Quant*StockMovrw.OldPrice,DefaultRoundMode);
             end;
             if (RepSpec.flags[4]==0) then begin
               OutString(380,0,StockMovrw.ExtraSCost,true);
               OutValBiDi(430,0,StockMovrw.NewPrice,M45Val,true,460);
               rowsum = Round(StockMovrw.Quant*StockMovrw.NewPrice,DefaultRoundMode);
             end;
             OutValBiDi(1,0,rowsum,M4Val,true,510);
             rcvqty = rcvqty + StockMovrw.Quant;
             sentqty = sentqty + StockMovrw.SentQuant;
             docsum = docsum + rowsum;
             EndFormat;
           end;
         end;
         Gray_Divider(0,1);
         StartFormat(5);
         EndFormat;
         StartFormat(15);
         OutStringBiDi(50,0,USetStr(5273),false,35);
         OutValBiDi(300,0,sentqty,M4Qty,true,140);
         OutValBiDi(335,0,rcvqty,M4Qty,true,140);
         OutValBiDi(1,0,docsum,M4Val,true,510);
         EndFormat;
         totsum = totsum + docsum;
         totrcvqty = totrcvqty + rcvqty;
         totsentqty = totsentqty + sentqty;
         StartFormat(15);
         EndFormat;
       end;
       if (RepSpec.ArtMode==0) then begin
         rwcnt = MatRowCnt(SMr);
         rcvqty = 0;
         sentqty = 0;
         rowsum = 0;
         for (i = 0 ; i<rwcnt ;i=i+1) begin
           MatRowGet(SMr,i,StockMovrw);
           testf = true;
           if (nonblank(RepSpec.f4)) then begin
             if (StockMovrw.ArtCode<frin) or (StockMovrw.ArtCode>toin) then begin
               testf = false;
             end;
           end;
           if (RepSpec.flags[6]!=0) then begin
             if (StockMovrw.SentQuant==StockMovrw.Quant) then begin testf = false; end;
           end;
           if (testf) then begin
             testf = ItemInItemGroupOrClass(StockMovrw.ArtCode,RepSpec.f5,RepSpec.f6);
           end;           
           if (testf) then begin
             rcvqty = rcvqty + StockMovrw.Quant;
             sentqty = sentqty + StockMovrw.SentQuant;
             if (RepSpec.flags[4]==2) then begin
               rowsum = rowsum + Round(StockMovrw.Quant*StockMovrw.BasePrice,DefaultRoundMode);
             end;
             if (RepSpec.flags[4]==1) then begin
               rowsum = rowsum + Round(StockMovrw.Quant*StockMovrw.OldPrice,DefaultRoundMode);
             end;
             if (RepSpec.flags[4]==0) then begin
               rowsum = rowsum + Round(StockMovrw.Quant*StockMovrw.NewPrice,DefaultRoundMode);
             end;
           end;
         end;
         StartFormat(15);
         OutLongInt(0,"DblStockMov",SMr.SerNr,false);
         OutDate(55,0,SMr.TransDate,false);
         OutString(100,0,Left(SMr.Comment,20),false);
         OutString(205,0,SMr.FrLocation,false);
         OutString(255,0,SMr.ThrouLocation,false);
         OutString(310,0,SMr.ToLocation,false);
         OutValBiDi(380,0,sentqty,M4Qty,true,405);
         OutValBiDi(420,0,rcvqty,M4Qty,true,455);
         OutValBiDi(1,0,rowsum,M4Val,true,510);
         EndFormat;
         totrcvqty = totrcvqty + rcvqty;
         totsentqty = totsentqty + sentqty;
         totsum = totsum + rowsum;
       end;
    end;
  end;
  Black_Divider(0,1);  
  StartFormat(15);
  if (RepSpec.ArtMode==1) then begin
    OutStringBiDi(50,0,USetStr(5273),false,35);
    OutValBiDi(300,0,totsentqty,M4Qty,true,140);
    OutValBiDi(335,0,totrcvqty,M4Qty,true,140);
  end else begin
    OutString(280,0,USetStr(2617),false);
    OutValBiDi(380,0,totsentqty,M4Qty,true,405);
    OutValBiDi(420,0,totrcvqty,M4Qty,true,455);
  end;
  OutValBiDi(1,0,totsum,M4Val,true,510);
  EndFormat;

  EndJob;
  return;
end;
