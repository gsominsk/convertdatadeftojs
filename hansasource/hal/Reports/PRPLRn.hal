external procedure Base1ToOther(var string,val,val,val,val,val,val,var val,roundmode);
external function roundmode SetRoundModeD(Integer);
external procedure ValToHALString(val,string,var string);

global
procedure GetPRName(string prcode,var string res)
BEGIN
  record PRVc PRr;
  
  res = "";
  PRr.Code = prcode;
  if (ReadFirstMain(PRr,1,true)) then begin
    res = PRr.Name;
  end;
  RETURN;
END;

global
procedure GetINName(string artcode,var string res)
BEGIN
  record INVc INr;
  
  res = "";
  INr.Code = artcode;
  if (ReadFirstMain(INr,1,true)) then begin
    res = INr.Name;
  end;
  RETURN; 
END; 

procedure MakeMarginString(val tv,var string res)
BEGIN
  string 255 tstr;
  val t;
  
  t = tv;
  ValToHALString(t,"2",tstr);  
  if (t<0) then begin
//    res = "-";
    res = "";
  end else begin
    res = "+";
  end;
  res = res & tstr;
  res = res & "%";
  RETURN;
END;

procedure CalcGPProc(val tv,val total,var string gppstr)
BEGIN
  val gp;
  val t;
  
  gp = tv;
  t = total;
  if (t==0) then begin t = tv; end;
  gp = gp * 100;
  gp = gp / t;  
  if (tv==total) then begin gp = 0; end;
  gp = Round(gp,SetRoundModeD(0));  
  MakeMarginString(gp,gppstr);
  RETURN;
END;

procedure SMSorting(record SMVc SMr)
BEGIN
  Integer changing;
  Integer i,rwcnt;
  row SMVc res;
  row SMVc acum;
//  row SMVc tmp;
    
  rwcnt = MatRowCnt(SMr);
  changing = 1;
  while (changing==1) begin
    changing = 0;
    for (i=0;i<rwcnt-1;i=i+1) begin
      MatRowGet(SMr,i,res);
      MatRowGet(SMr,i+1,acum);      
//      if (res.FrRate<acum.FrRate) then begin
      if (res.RowSimStat>acum.RowSimStat) then begin
//      if ((res.FrRate<acum.FrRate) and (res.RowSimStat<acum.RowSimStat)) then begin sorting on 2 columns
        changing = 1;        
        MatRowPut(SMr,i+1,res);
        MatRowPut(SMr,i,acum);
      
//        tmp.Objects = res.Objects;
//        tmp.Comment = res.Comment;
//        tmp.CredVal = res.CredVal;
//        tmp.CredVal2 = res.CredVal2;
//        tmp.DebVal = res.DebVal;
//        tmp.DebVal2 = res.DebVal2;
//        tmp.FrRate = res.FrRate;
//        tmp.RowSimStat = res.RowSimStat;
//
//        res.Objects = acum.Objects;
//        res.Comment = acum.Comment;
//        res.CredVal = acum.CredVal;
//        res.CredVal2 = acum.CredVal2;
//        res.DebVal = acum.DebVal;
//        res.DebVal2 = acum.DebVal2;
//        res.FrRate = acum.FrRate;
//        res.RowSimStat = acum.RowSimStat;
//
//        acum.Objects = tmp.Objects;
//        acum.Comment = tmp.Comment;
//        acum.CredVal = tmp.CredVal;
//        acum.CredVal2 = tmp.CredVal2;
//        acum.DebVal = tmp.DebVal;
//        acum.DebVal2 = tmp.DebVal2;
//        acum.FrRate = tmp.FrRate;
//        acum.RowSimStat = tmp.RowSimStat;
//        MatRowPut(SMr,i,res);
//        MatRowPut(SMr,i+1,acum);       
      end;
    end;
  end;   
  RETURN;
END;

procedure PrintTypeTotal(var val itemtypeinc,var val itemtypecost,Integer itemtype)
BEGIN
  string 255 gppstr;
  
  if (itemtypeinc!=0) or (itemtypecost!=0) then begin
    Black_Divider(300,1);
    StartFormat(15);
    if (itemtype==1) then begin
      OutString(200,0,USetStr(8896),false);
    end;
    if (itemtype==2) then begin
      OutString(200,0,USetStr(8894),false);
    end;
    if (itemtype==3) then begin
      OutString(200,0,USetStr(8895),false);
    end;
    if (itemtype==0) then begin
      OutString(200,0,USetStr(8893),false);
    end;      
    OutVal(360,0,itemtypeinc,M4Val,true);
    OutVal(420,0,itemtypecost,M4Val,true);      
    CalcGPProc(itemtypeinc - itemtypecost,itemtypecost,gppstr);     
    OutString(480,0,gppstr,true);  
    EndFormat;
    StartFormat(15);
    EndFormat;    
  end;
  itemtypeinc = blankval;
  itemtypecost = blankval;
  RETURN;        
END;

procedure PrintToPRPLArr(record SMVc SMr,Integer inc,var val repbalance,var val repbudget,var Boolean printprcodef)
BEGIN
  Integer i,rwcnt;
  row SMVc SMrw;
  val t,itemtypeinc,itemtypecost;
  val prtotinc,prtotcost;
  string 100 gppstr;
  string 255 tstr;
  Boolean printedf,printdhf;
  Integer lastitemtype;

  SMSorting(SMr);
  lastitemtype = -1;
  rwcnt = MatRowCnt(SMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    if (printedf==false) then begin
      StartFormat(15);
       OutString(0,"DblPRCode",SMrw.Objects,false);
       GetPRName(SMrw.Objects,tstr);
       OutString(100,0,tstr,false);
       OutString(470,0,SMrw.CurncyCode,false);
      EndFormat;
      printedf = true;
      printprcodef = false;
    end else begin
      if (printedf==false) then begin
        StartFormat(15);
        EndFormat;
        Gray_Divider(0,1);        
        printedf = true;
      end;  
    end;
    if ((lastitemtype<>SMrw.RowSimStat) and (lastitemtype<>-1)) then begin
      PrintTypeTotal(itemtypeinc,itemtypecost,lastitemtype);
    end;
    if (inc==0) then begin
      if (SMrw.CredVal!=0) or (SMrw.CredVal2!=0)  then begin
        if (printdhf==false) then begin
          StartFormat(15);
           OutString(0,0,USetStr(9702),false);
          EndFormat;
          printdhf = true;
        end;
        StartFormat(15);
         OutString(20,0,SMrw.Comment,false);
         GetINName(SMrw.Comment,tstr);
         OutString(80,0,tstr,false);
         OutVal(360,0,SMrw.CredVal,M4Val,true);
  //       OutStringID(360,"DblPRPL",SMrw.CredVal,true,SMrw.Objects);         
         OutStringID(420,"DblTBBUVc",SMrw.CredVal2,true,SMrw.Objects);         
  //       CalcGPProc(SMrw.CredVal - SMrw.DebVal,SMrw.DebVal,gppstr);     
  //       OutString(480,0,gppstr,true);
        EndFormat;    
        itemtypeinc = itemtypeinc + SMrw.CredVal;
        itemtypecost = itemtypecost + SMrw.CredVal2;
        prtotinc = prtotinc + SMrw.CredVal;
        prtotcost = prtotcost + SMrw.CredVal2;
      end;
    end else begin
      if (SMrw.DebVal!=0) or (SMrw.DebVal2!=0)  then begin
        if (printdhf==false) then begin
          StartFormat(15);
           OutString(0,0,USetStr(9703),false);
          EndFormat;
          printdhf = true;
        end;
        StartFormat(15);
         OutString(20,0,SMrw.Comment,false);
         GetINName(SMrw.Comment,tstr);
         OutString(80,0,tstr,false);
         OutStringID(360,"DblPRPL",SMrw.DebVal,true,SMrw.Objects);         
         OutStringID(420,"DblTBBUVc",SMrw.DebVal2,true,SMrw.Objects);         
  //       OutVal(420,0,SMrw.DebVal2,M4Val,true);
  //       CalcGPProc(SMrw.DebVal - SMrw.DebVal2,SMrw.DebVal2,gppstr);     
  //       OutString(480,0,gppstr,true);
        EndFormat;    
        itemtypeinc = itemtypeinc + SMrw.DebVal;
        itemtypecost = itemtypecost + SMrw.DebVal2;
        prtotinc = prtotinc + SMrw.DebVal;
        prtotcost = prtotcost + SMrw.DebVal2;
      end;
    end;
    lastitemtype = SMrw.RowSimStat;      
  end;  
  PrintTypeTotal(itemtypeinc,itemtypecost,lastitemtype);
  Black_Divider(300,1);
  StartFormat(15);
   if (inc==0) then begin
     OutString(200,0,USetStr(9702),false);
   end else begin
     OutString(200,0,USetStr(9703),false);
   end;  
   OutVal(360,0,prtotinc,M4Val,true);
   OutVal(420,0,prtotcost,M4Val,true);   
   
   CalcGPProc(prtotinc - prtotcost,prtotcost,gppstr);     
   OutString(480,0,gppstr,true);
  EndFormat;    
  if (inc==0) then begin
    repbalance = repbalance + prtotinc;
    repbudget = repbudget + prtotcost;
  end else begin
    repbalance = repbalance - prtotinc;
    repbudget = repbudget - prtotcost;
  end;  
  RETURN;
END;

function Boolean FindItemOnBudget(string artcode,record TBBUVc TBBUr)
BEGIN
  Boolean res;
  row TBBUVc TBBUrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(TBBUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUr,i,TBBUrw);
    if (TBBUrw.ArtCode==artcode) then begin
      res = true;
      goto LFindItemOnBudget;
    end;
  end;
LFindItemOnBudget:;  
  FindItemOnBudget = res;  
  RETURN;
END;

procedure AddToPRPLArr(record BaseCurBlock BCb,record PRVc PRr,record TBIVVc TBIVr,record TBBUVc TBBUr,record SMVc SMr)
BEGIN
  Integer i,rwcnt;
  row SMVc SMrw;
  Boolean newrowf;
  record INVc INr;
  val income,cost;
  
  if (nonblank(TBIVr.CurncyCode)) and (TBIVr.CurncyCode!=BCb.BaseCur1) then begin
    income = TBIVr.SumInCur;
    cost = TBIVr.CostPriceInCur * TBIVr.Qty;
  end else begin
    income = TBIVr.Sum;
    cost = TBIVr.CostPrice * TBIVr.Qty;
  end;
  INr.Code = TBIVr.ArtCode;
  if (ReadFirstMain(INr,1,true)) then begin end;
  switch (INr.ItemType) begin
    case kItemTypePlain:
      if (INr.ItemMaterial!=0) then begin
        if (TBBUr.BudMaterial!=0) then begin
          if (FindItemOnBudget(TBIVr.ArtCode,TBBUr)) then begin
            income = blankval;
//            cost = blankval;
          end else begin
            income = blankval;  
          end;
        end;
      end else begin
        if (TBBUr.BudOther!=0) then begin
          if (FindItemOnBudget(TBIVr.ArtCode,TBBUr)) then begin
            income = blankval;
//            cost = blankval;
          end else begin
            income = blankval; 
          end;
        end;
      end;
    case kItemTypeStocked:
      if (TBBUr.BudStocked!=0) then begin
        if (FindItemOnBudget(TBIVr.ArtCode,TBBUr)) then begin
          income = blankval;
//          cost = blankval;
        end else begin
          income = blankval;   
        end;
      end;
    case kItemTypeService:
      if (TBBUr.BudTime!=0) then begin
        if (FindItemOnBudget(TBIVr.ArtCode,TBBUr)) then begin
          income = blankval;
//          cost = blankval;
        end else begin
          income = blankval;   
        end;
      end;
  end;
  
  newrowf = true;
  rwcnt = MatRowCnt(SMr);  
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    if ((SMrw.Objects==PRr.Code) and (SMrw.Comment==TBIVr.ArtCode)) then begin    
      SMrw.CredVal = SMrw.CredVal + income;
      SMrw.DebVal = SMrw.DebVal + cost;
      MatRowPut(SMr,i,SMrw);
      newrowf = false;
      i = rwcnt;
    end;
  end;
  if (newrowf) then begin
    ClearRow(SMr,SMrw,1);
    SMrw.Objects = PRr.Code;
    SMrw.Comment = TBIVr.ArtCode;    
    SMrw.CurncyCode = PRr.CurncyCode;
    SMrw.CredVal = income;    
    SMrw.DebVal = cost;
//      SMrw.RowSimStat = TBIVr.ItemType;
    if (TBIVr.ItemType==3) then begin
      SMrw.RowSimStat = 0;
    end;
    if (TBIVr.ItemType==0) then begin
      SMrw.RowSimStat = 1;
    end;
    if (TBIVr.ItemType==1) then begin
      SMrw.RowSimStat = 2;
    end;
    if (TBIVr.ItemType==5) then begin
      SMrw.RowSimStat = 3;
    end;
    SMrw.FrRate = 0;
    if (SMrw.CredVal!=0) or (SMrw.DebVal!=0) or (SMrw.CredVal!=0) or (SMrw.CredVal2!=0) then begin
      MatRowPut(SMr,rwcnt,SMrw);    
    end;
  end;
  RETURN;
END;

procedure AddValToPRPLArr(record SMVc SMr,string prcode,string artcode,val budv,val costv,Integer ItemType,val bqty,record TBBUVc TBBUr)
BEGIN
  Integer i,rwcnt;
  row SMVc SMrw;
  Boolean newrowf;
  record INVc INr;

  newrowf = true;
  rwcnt = MatRowCnt(SMr); 
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    if ((SMrw.Objects==prcode) and (SMrw.Comment==artcode)) then begin
      INr.Code = SMrw.Comment;
      if (ReadFirstMain(INr,1,true)) then begin end;
      SMrw.CredVal2 = SMrw.CredVal2 + budv;
      SMrw.DebVal2 = SMrw.DebVal2 + (costv * bqty);   
      switch (INr.ItemType) begin
        case 0:
          if (INr.ItemMaterial!=0) then begin
            if (TBBUr.BudMaterial!=0) then begin
              SMrw.CredVal = SMrw.CredVal + budv;
        //      SMrw.DebVal = SMrw.DebVal + costv*bqty;
            end;
          end else begin
            if (TBBUr.BudOther!=0) then begin
              SMrw.CredVal = SMrw.CredVal + budv;
    //          SMrw.DebVal = SMrw.DebVal + costv*bqty;
            end;
          end;
        case 1:
          if (TBBUr.BudStocked!=0) then begin
            SMrw.CredVal = SMrw.CredVal + budv;
      //      SMrw.DebVal = SMrw.DebVal + costv*bqty;
          end;
        case 3:
          if (TBBUr.BudTime!=0) then begin
            SMrw.CredVal = SMrw.CredVal + budv;
    //        SMrw.DebVal = SMrw.DebVal + costv*bqty;
          end;
      end;   
      MatRowPut(SMr,i,SMrw);
      newrowf = false;
      i = rwcnt;
    end;
  end;  
  if (newrowf) then begin
    ClearRow(SMr,SMrw,1);
    SMrw.Objects = prcode;
    SMrw.Comment = artcode;
    INr.Code = SMrw.Comment;
    if (ReadFirstMain(INr,1,true)) then begin end;
    SMrw.CredVal2 = budv;
    SMrw.DebVal2 = (costv * bqty);    
    switch (INr.ItemType) begin
      case 0:
        if (INr.ItemMaterial!=0) then begin
          if (TBBUr.BudMaterial!=0) then begin
            SMrw.CredVal = SMrw.CredVal + budv;
  //          SMrw.DebVal = SMrw.DebVal + costv*bqty;
          end;
        end else begin
          if (TBBUr.BudOther!=0) then begin
            SMrw.CredVal = SMrw.CredVal + budv;
   //         SMrw.DebVal = SMrw.DebVal + costv*bqty;
          end;
        end;
      case 1:
        if (TBBUr.BudStocked!=0) then begin 
          SMrw.CredVal = SMrw.CredVal + budv;
    //      SMrw.DebVal = SMrw.DebVal + costv*bqty;
        end;
      case 3:
        if (TBBUr.BudTime!=0) then begin
          SMrw.CredVal = SMrw.CredVal + budv;
    //      SMrw.DebVal = SMrw.DebVal + costv*bqty;
        end;
    end;
//    SMrw.RowSimStat = ItemType;
    if (ItemType==3) then begin
      SMrw.RowSimStat = 0;
    end;
    if (ItemType==0) then begin
      SMrw.RowSimStat = 1;
    end;
    if (ItemType==1) then begin
      SMrw.RowSimStat = 2;
    end;
    if (ItemType==5) then begin
      SMrw.RowSimStat = 3;
    end;
    SMrw.FrRate = 1;
    MatRowPut(SMr,rwcnt,SMrw);    
  end;
/*
        StartFormat(15);
         OutString(0,0,"OOO" & prcode,false);
         OutVal(100,0,budv,M4Val,false);
         OutVal(200,0,costv,M4Val,false);
        EndFormat;
*/
  RETURN;
END;

procedure AddPRBudgetToPRPLArr(record SMVc SMr,string prcode,string mother)
BEGIN
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  Integer i,rwcnt;
  val totcost,totbud;
  val v;
  
  TBBUr.PRCode = prcode;
  if (ReadFirstMain(TBBUr,1,true)) then begin
    rwcnt = MatRowCnt(TBBUr);  
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TBBUr,i,TBBUrw);
      if (TBBUrw.stp==1) then begin
        if (nonblank(TBBUr.CurncyCode)) then begin
          Base1ToOther(TBBUr.CurncyCode,TBBUrw.Cost,TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,v,DefaultCurRoundOff);
          AddValToPRPLArr(SMr,mother,TBBUrw.ArtCode,TBBUrw.Sum,v,TBBUrw.ItemType,TBBUrw.Qty,TBBUr);
        end else begin
          AddValToPRPLArr(SMr,mother,TBBUrw.ArtCode,TBBUrw.Sum,TBBUrw.Cost,TBBUrw.ItemType,TBBUrw.Qty,TBBUr);
        end;
      end;
    end;      
  end;
  RETURN;
END;

procedure PRBudgetSumup(string prcode,var val totbudinc,var val totbudcost,var val totprinc,var val totprcost,record TBBUVc TBBUr)
BEGIN  
  row TBBUVc TBBUrw;
  Integer i,rwcnt;
  Boolean testf;
  val v;
  
  TBBUr.PRCode = prcode;  
  if (ReadFirstMain(TBBUr,1,true)) then begin
    rwcnt = MatRowCnt(TBBUr);  
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TBBUr,i,TBBUrw);
      if (TBBUrw.stp==1) then begin
        totbudinc = totbudinc + TBBUrw.Sum;      
        if (nonblank(TBBUr.CurncyCode)) then begin
          Base1ToOther(TBBUr.CurncyCode,TBBUrw.Cost * TBBUrw.Qty,TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,v,DefaultCurRoundOff);
          totbudcost = totbudcost + v;
        end else begin
          totbudcost = totbudcost + (TBBUrw.Cost * TBBUrw.Qty);    
        end;
        switch (TBBUrw.ItemType) begin
          case 0: testf = TBBUr.BudOther==1;
          case 1: testf = TBBUr.BudStocked==1;
          case 3: testf = TBBUr.BudTime==1;
          case 5: testf = TBBUr.BudMaterial==1;
        end;
        if (testf) then begin
          totprinc = totprinc + TBBUrw.Sum;
//          if (nonblank(TBBUr.CurncyCode)) then begin
//            Base1ToOther(TBBUr.CurncyCode,TBBUrw.Cost * TBBUrw.Qty,TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,v,DefaultCurRoundOff);
//            totprcost = totprcost + v;
//          end else begin
//            totprcost = totprcost + (TBBUrw.Cost * TBBUrw.Qty);
//          end;
        end;
      end;
    end;      
  end;
  RETURN;
END;

procedure PrintOverviewResult(record PRVc PRr,val totv,Integer inc,val totbudinc,val totbudcost)
BEGIN
  string 100 gppstr;

  StartFormat(15);
  OutString(20,"DblPRCode",PRr.Code,false);
  OutString(90,"DblPRCode",PRr.CurncyCode,false);
  OutString(115,"DblPRCode",Left(PRr.Name,20),false);
  OutVal(360,0,totv,M4Val,true);
  if (inc==0) then begin
    OutVal(420,0,totbudinc,M4Val,true);
    CalcGPProc(totv - totbudinc,totbudinc,gppstr);
  end;  
  if (inc==1) then begin
    OutVal(420,0,totbudcost,M4Val,true);
    CalcGPProc(totv - totbudcost,totbudcost,gppstr);
  end;  
  OutString(480,0,gppstr,true);       
  EndFormat;
  RETURN;
END;

global
procedure FindDautherProjects(string mother,var array string dproject,var integer am)
begin
  record PRVc PRr;
  Boolean foundf;  
  
  PRr.MotherCode = mother;
  foundf = true;
  while (LoopKey("MotherCode",PRr,1,foundf)) begin
    if (PRr.MotherCode<>mother) then begin 
      foundf = false; 
     end;
    if (foundf) then begin
      dproject[am]=PRr.Code;
      am = am + 1;
      FindDautherProjects(PRr.Code,dproject,am);
    end;
  end;  
  return;
end;

global
procedure PRPLRn(record RcVc RepSpec)
BEGIN
  record TBBUVc TBBUr;
  record PRVc PRr;
  record TBIVVc TBIVr;
  string 20 frpr,topr;
  Boolean found,foundpr,printprcodef,testf;
  record SMVc SMr;
  val totprcost,totprinc,totbudget;  
  val repbudget,repbalance;
  string 255 gppstr;
  integer rw,subpram,i;
  array string 20 subproject;
  string 20 wproj;
  val totbudcost,totbudinc;  
  record BaseCurBlock BCb;

  frpr = FirstInRange(RepSpec.f1,20);
  topr = LastInRange(RepSpec.f1,20);
  StartReportJob(USetStr(9700));
  rw=1; 
  if (RepSpec.IncDaughter==1) then begin
    Header(rw,USetStr(4860),1);
    rw = rw + 1;
  end;
  EndHeader;
  if (blank(RepSpec.f1)) then begin
    StartFormat(15);
     OutString(0,0,USetStr(9701),false);
    EndFormat;
    goto LPRPLRn;
  end;
  if (RepSpec.ArtMode==0) then begin
    StartFormat(15);
     OutString(20,0,USetStr(4862),false);
     OutString(360,0,USetStr(6925),true);
     OutString(420,0,USetStr(6824),true);
     OutString(480,0,"%",true);
    EndFormat;
    Gray_Divider(0,1);
  end;  
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
     OutString(0,0,USetStr(4862),false);
     OutString(360,0,USetStr(6925),true);
     OutString(420,0,USetStr(6824),true);
     OutString(480,0,"%",true);
    EndFormat;
    Gray_Divider(0,1);
  end;  
  BlockLoad(BCb);
  if (RepSpec.ArtMode==0) then begin  
    PRr.Code = frpr;
    foundpr = true;
    while (LoopMain(PRr,1,foundpr)) begin
      totprcost = blankval;
      totprinc = blankval;
      totbudinc = 0; totbudcost = 0;
      if ((PRr.Code>topr) and nonblank(RepSpec.f1)) then begin      
        foundpr = false; 
      end;      
    
      if (foundpr) then begin
        subpram = 1;
        subproject[0] = PRr.Code;
        if (RepSpec.IncDaughter==1) then begin
          FindDautherProjects(PRr.Code,subproject,subpram);
        end;   
        for (i=0;i<subpram;i=i+1) begin       
          wproj = subproject[i];  
          TBBUr.PRCode = wproj;
          if (ReadFirstMain(TBBUr,1,true)) then begin end;
          TBIVr.PRCode = wproj;
          found = true;
          ResetLoop(TBIVr);
          while (LoopKey("MainKey",TBIVr,1,found)) begin
            if (TBIVr.PRCode<>wproj) then begin found = false; end;
            if (found) then begin
              switch (TBIVr.ItemType) begin
                case 0: testf = TBBUr.BudOther==0; //Purchase
                case 1: testf = TBBUr.BudStocked==0;//Stocked
                case 3: testf = TBBUr.BudTime==0;//Service
                case 5: testf = TBBUr.BudMaterial==0;//Material
              end;
              if (testf) then begin
                if (nonblank(TBIVr.CurncyCode)) and (TBIVr.CurncyCode!=BCb.BaseCur1) then begin
                  totprinc = totprinc + TBIVr.SumInCur;
                  totprcost = totprcost + (TBIVr.CostPriceInCur * TBIVr.Qty);
                end else begin
                  totprinc = totprinc + TBIVr.Sum;
                  totprcost = totprcost + (TBIVr.CostPrice * TBIVr.Qty);
                end;
              end else begin
                if (nonblank(TBIVr.CurncyCode)) and (TBIVr.CurncyCode!=BCb.BaseCur1) then begin
                  totprcost = totprcost + (TBIVr.CostPriceInCur * TBIVr.Qty);
                end else begin
                  totprcost = totprcost + (TBIVr.CostPrice * TBIVr.Qty);
                end;                  
              end;
            end;  
          end;
          PRBudgetSumup(wproj,totbudinc,totbudcost,totprinc,totprcost,TBBUr);
        end;  
        StartFormat(15);
        OutString(0,0,USetStr(9702),false);
        EndFormat;
        PrintOverviewResult(PRr,totprinc,0,totbudinc,totbudcost);
        repbudget = totbudinc;
        repbalance = totprinc;
        StartFormat(15);
        OutString(0,0,USetStr(9703),false);
        EndFormat;
        PrintOverviewResult(PRr,totprcost,1,totbudinc,totbudcost);
        repbudget = repbudget - totbudcost;
        repbalance = repbalance - totprcost;
        CalcGPProc(repbalance - repbudget,repbudget,gppstr);             
        Gray_Divider(0,1);
        StartFormat(30);
        OutString(0,0,USetStr(9704),false);
        OutVal(360,0,repbalance,M4Val,true);   
        OutVal(420,0,repbudget,M4Val,true);   
        OutString(480,0,gppstr,true);            
        EndFormat;                         
      end; 
    end;  
  end;  
    
  if (RepSpec.ArtMode==1) then begin
    RecordNew(SMr);
    PRr.Code = frpr;
    foundpr = true; 
    while (LoopMain(PRr,1,foundpr)) begin
      repbalance=0;repbudget=0;
      if ((PRr.Code>topr) and nonblank(RepSpec.f1)) then begin      
        foundpr = false;
      end;
      
      if (foundpr) then begin
        TBBUr.PRCode = PRr.Code;
        if (ReadFirstMain(TBBUr,1,true)) then begin end;
        RecordNew(SMr);
        subpram = 1;
        subproject[0] = PRr.Code;
        if (RepSpec.IncDaughter==1) then begin
          FindDautherProjects(PRr.Code,subproject,subpram);
        end;   
        for (i=0;i<subpram;i=i+1) begin       
          wproj = subproject[i];  
          TBIVr.PRCode = wproj;
        
          found = true;
          ResetLoop(TBIVr);
          while (LoopKey("MainKey",TBIVr,1,found)) begin      
            if (TBIVr.PRCode<>wproj) then begin found = false; end;
            if (found) then begin
              AddToPRPLArr(BCb,PRr,TBIVr,TBBUr,SMr);          
            end;  
          end;    
          AddPRBudgetToPRPLArr(SMr,wproj,PRr.Code);
        end;    
        
        printprcodef = true;
        PrintToPRPLArr(SMr,0,repbalance,repbudget,printprcodef);
        PrintToPRPLArr(SMr,1,repbalance,repbudget,printprcodef);
        Gray_Divider(0,1);
        
        StartFormat(30);
        OutString(200,0,USetStr(3159),false);
        OutVal(360,0,repbalance,M4Val,true);
        OutVal(420,0,repbudget,M4Val,true);   
         
        CalcGPProc(repbalance - repbudget,repbudget,gppstr);     
        OutString(480,0,gppstr,true);
        EndFormat;    
      //  end;
      end;  
    end;  
  end;        
LPRPLRn:;  
  EndJob;  
  RETURN;
END;
