external function roundmode DefaultRoundMode();
external procedure vTimeDiff(Time,Time,var val);
external function Boolean DateTimeInsideDateTime(Date,Time,Date,Time,Date,Time,Date,Time);
external procedure HTArtGroup(string, var string);
external procedure HTArts(string, string, var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure GetItemGroup(string,var string);

procedure GetLocalMachineGroup(var string str)
BEGIN
  Integer rwcnt,i;
  record LocalMachineGrBlock LMGr;
  row LocalMachineGrBlock LMGrw;
  
  BlockLoad(LMGr);
  rwcnt = MatRowCnt(LMGr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LMGr,i,LMGrw);
    if (SetInSet(str,LMGrw.DefStr)) then begin
      str = LMGrw.Code;
      goto LGetLocalLocalMachineGroup;
    end;
  end;
LGetLocalLocalMachineGroup:;  
  RETURN;
END;

procedure PrintArray(string dblstr,Array string aitems,Array string ainnames,Array val aqtys,Array val asumbar,Array val asumhotel,Integer acnt,var val totbar,var val tothot,var val tottot,var val totqty)
BEGIN
  Integer i;

  for (i=0;i<acnt;i=i+1) begin
    StartFormat(15);
    OutString(0,dblstr,aitems[i],false);
    OutString(2,0,ainnames[i],false);
    if (BuildProductCode!="StandardPOS") then begin
      OutVal(3,0,aqtys[i],M4UVal,true);
      OutVal(4,0,asumbar[i],M4Val,true);
      OutVal(5,0,asumhotel[i],M4Val,true);
    end else begin
      OutVal(5,0,aqtys[i],M4UVal,true);
    end;
    OutVal(6,0,asumhotel[i] + asumbar[i],M4Val,true);
    EndFormat;
    totqty = totqty + aqtys[i];
    totbar = totbar + asumbar[i];
    tothot = tothot + asumhotel[i];
    tottot = tottot + asumhotel[i] + asumbar[i];
  end;
  RETURN;
END;

procedure CleanArray(var Array string aitems,var Array string ainnames,var Array val aqtys,var Array val asumbar,var Array val asumhotel,var Integer acnt)
BEGIN
  Integer i;

  for (i=0;i<acnt;i=i+1) begin
    ainnames[i] = "";
    aqtys[i] = 0;
    asumbar[i] = 0;
    asumhotel[i] = 0;
    asumhotel[i] = 0;
  end;
  acnt = 0;
  RETURN;
END;

procedure AddToArray(string artcode,val qty,val price,string name,string rescode,Array string aitems,Array string ainnames,Array val aqtys,Array val asumbar,Array val asumhotel,var Integer acnt)
BEGIN
  Integer i,j;
  
  for (i=0;i<acnt;i=i+1) begin
    if (aitems[i]==artcode) then begin
      aqtys[i] = aqtys[i] + qty;
      if (nonblank(rescode)) then begin
        asumhotel[i] = asumhotel[i] + Round(qty*price,DefaultRoundMode);
      end else begin
        asumbar[i] = asumbar[i] + Round(qty*price,DefaultRoundMode);
      end;
      goto LAddToArray;
    end;
  end;
  for (i=0;i<acnt;i=i+1) begin
    if (aitems[i]>artcode) then begin
      for (j=acnt;j>i;j=j-1) begin
        aitems[j] = aitems[j-1];
        ainnames[j] = ainnames[j-1];
        aqtys[j] = aqtys[j-1];
        asumhotel[j] = asumhotel[j-1];
        asumbar[j] = asumbar[j-1];
      end;
      aitems[i] = artcode;
      ainnames[i] = name;
      aqtys[i] = qty;
      if (nonblank(rescode)) then begin
        asumhotel[i] = Round(qty*price,DefaultRoundMode);
        asumbar[i] = BlankVal;
      end else begin
        asumbar[i] = Round(qty*price,DefaultRoundMode);
        asumhotel[i] = BlankVal;
      end;
      acnt = acnt + 1;
      goto LAddToArray;
    end;
  end;
  aitems[acnt] = artcode;
  ainnames[acnt] = name;
  aqtys[acnt] = qty;
  if (nonblank(rescode)) then begin
    asumhotel[acnt] = Round(qty*price,DefaultRoundMode);
    asumbar[acnt] = BlankVal;
  end else begin
    asumbar[acnt] = Round(qty*price,DefaultRoundMode);
    asumhotel[acnt] = BlankVal;
  end;
  acnt = acnt + 1;
LAddToArray:;
  RETURN;
END;

function Integer CountShifts(record SalesTimeBlock STr)
begin
  Integer cnt;
  
  cnt = 0;
  if (nonblank(STr.Comment1)) then begin cnt = cnt + 1; end;
  if (nonblank(STr.Comment2)) then begin cnt = cnt + 1; end;
  if (nonblank(STr.Comment3)) then begin cnt = cnt + 1; end;
  if (nonblank(STr.Comment4)) then begin cnt = cnt + 1; end;
  if (nonblank(STr.Comment5)) then begin cnt = cnt + 1; end;
  CountShifts = cnt;
  return;
end;

procedure GetShiftHoursText(record SalesTimeBlock STr,string shift,var Time frtim,var Time totim)
begin
  if (nonblank(shift)) then begin
    if (STr.Comment1==shift) then begin
      frtim = STr.FrTime1;
      totim = STr.ToTime1;
      goto LGetShiftHoursText;
    end;
    if (STr.Comment2==shift) then begin
      frtim = STr.FrTime2;
      totim = STr.ToTime2;
      goto LGetShiftHoursText;
    end;
    if (STr.Comment3==shift) then begin
      frtim = STr.FrTime3;
      totim = STr.ToTime3;
      goto LGetShiftHoursText;
    end;
    if (STr.Comment4==shift) then begin
      frtim = STr.FrTime4;
      totim = STr.ToTime4;
      goto LGetShiftHoursText;
    end;
    if (STr.Comment5==shift) then begin
      frtim = STr.FrTime5;
      totim = STr.ToTime5;
      goto LGetShiftHoursText;
    end;
  end;
LGetShiftHoursText:;
  return;
end;

procedure GetShiftHoursCount(record SalesTimeBlock STr,Integer cnt,var string comment,var Time frtim,var Time totim)
begin
  Integer pos;
  
  pos = 0;
  if (nonblank(STr.Comment1)) then begin
    if (pos==cnt) then begin
      frtim = STr.FrTime1;
      totim = STr.ToTime1;
      comment = STr.Comment1;
      goto LGetShiftHoursCount;
    end;
    pos = pos + 1;
  end;
  if (nonblank(STr.Comment2)) then begin
    if (pos==cnt) then begin
      frtim = STr.FrTime2;
      totim = STr.ToTime2;
      comment = STr.Comment2;
      goto LGetShiftHoursCount;
    end;
    pos = pos + 1;
  end;
  if (nonblank(STr.Comment3)) then begin
    if (pos==cnt) then begin
      frtim = STr.FrTime3;
      totim = STr.ToTime3;
      comment = STr.Comment3;
      goto LGetShiftHoursCount;
    end;
    pos = pos + 1;
  end;
  if (nonblank(STr.Comment4)) then begin
    if (pos==cnt) then begin
      frtim = STr.FrTime4;
      totim = STr.ToTime4;
      comment = STr.Comment4;
      goto LGetShiftHoursCount;
    end;
    pos = pos + 1;
  end;
  if (nonblank(STr.Comment5)) then begin
    if (pos==cnt) then begin
      frtim = STr.FrTime5;
      totim = STr.ToTime5;
      comment = STr.Comment5;
      goto LGetShiftHoursCount;
    end;
    pos = pos + 1;
  end;
LGetShiftHoursCount:;
  return;
end;

global
procedure BarItemStatRn(record RcVc RepSpec)
begin
  Integer i,rwcnt;
  record RestAccVc Barr;
  row RestAccVc Barrw;
  record SalesTimeBlock STr;
  Boolean testf,TrHs;
  string 255 tstr;
  Array string 20 aitems;
  Array string 100 ainnames;
  Array val aqtys;
  Array val asumbar;
  Array val asumhotel;
  val totbar,tothot,tottot,totqty;
  val gtotbar,gtothot,gtottot,gtotqty;
  val vt;
  Integer acnt;
  string 20 frin,toin;
  string 20 frit,toit;
  string 200 shiftcomment;
  record INVc INr;
  record ITVc ITr;
  Time frtim,totim;
  Integer rw;
  Integer loopcnt,ll;
  Date startdate,enddate;

  BlockLoad(STr);
  if ((RepSpec.flags[0]==0) or (nonblank(RepSpec.f6))) then begin
    loopcnt = 1;
    GetShiftHoursText(STr,RepSpec.f6,frtim,totim);
  end else begin
    loopcnt = CountShifts(STr);
  end;
  frin = FirstInRange(RepSpec.f1,20);
  toin = LastInRange(RepSpec.f1,20);
  frit = FirstInRange(RepSpec.f3,20);
  toit = LastInRange(RepSpec.f3,20);
  StartReportJob(USetStr(10060));
  rw = 1;
  HTArts(frin,toin,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTArtGroup(RepSpec.f3,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;
  SetRepColBiDi(2,80,70);
  SetRepColBiDi(3,270,310);
  SetRepColBiDi(4,340,380);
  SetRepColBiDi(5,410,450);
  SetRepColBiDi(6,480,510);
  if (RepSpec.ArtMode!=2) then begin
    StartFormat(15);
    OutString(0,0,USetStr(10062),false);
    OutString(2,0,USetStr(9778),false);
    if (BuildProductCode!="StandardPOS") then begin
      OutStringAdjust(3,0,USetStr(10064),true,M4Val);
      OutStringAdjust(4,0,USetStr(10066),true,M4Val);
      OutStringAdjust(5,0,USetStr(10067),true,M4Val);
    end else begin
      OutStringAdjust(5,0,USetStr(10064),true,M4Val);
    end;
    OutStringAdjust(6,0,USetStr(10065),true,M4Val);
    EndFormat;
  end else begin
    StartFormat(15);
    OutString(0,0,USetStr(10074),false);
    OutString(70, 0,USetStr(10051),false);
    OutString(120,0,USetStr(10052),false);
    OutString(170,0,USetStr(10053),false);  
    OutString(220,0,USetStr(10054),false);  
    OutStringAdjust(6,0,USetStr(10078),true,M4Val);  
    EndFormat;
  end;
  Gray_Divider(0,1);
  for (ll=0;ll<loopcnt;ll=ll+1) begin
    if (RepSpec.flags[0]!=0) then begin
      GetShiftHoursCount(STr,ll,shiftcomment,frtim,totim);
      RepSpec.f6 = shiftcomment;
      StartFormat(15);
      OutString(0,0,shiftcomment,false);
      EndFormat;
      Gray_Divider(0,1);
    end;
    TrHs = true;
    Barr.Closed = 1;
    Barr.TransDate = RepSpec.sStartDate;
    ResetLoop(Barr);
    while LoopKey("ClosedTransDate",Barr,2,TrHs) begin
      if (Barr.TransDate>RepSpec.sEndDate) then begin TrHs = false; end;
      if (Barr.Closed!=1) then begin TrHs = false; end;              
       if (TrHs) then begin       
         startdate = Barr.TransDate;         
         enddate = startdate;
         vTimeDiff(frtim,totim,vt);
         if (vt<0) then begin
           enddate = AddDay(enddate,1);
         end;
         rwcnt = MatRowCnt(Barr);
         for (i=0;i<rwcnt;i=i+1) begin
           MatRowGet(Barr,i,Barrw);
           if (Barrw.stp!=1) and (Barrw.stp!=kInvoiceRowTypeVoid) then begin testf = false; end;
           if (ReadFirstItem(Barrw.ArtCode,INr,true,true)) then begin end;
           testf = true;
           if (nonblank(RepSpec.f1)) then begin
             if (Barrw.ArtCode<frin) then begin testf = false; end;
             if (Barrw.ArtCode>toin) then begin testf = false; end;
           end;
           if (nonblank(RepSpec.f3)) then begin
             if (INr.Group<frit) then begin testf = false; end;
             if (INr.Group>toit) then begin testf = false; end;
           end;
           if (nonblank(RepSpec.f4)) then begin
             if (SetInSet(RepSpec.f4,INr.DispGroups)==false) then begin testf = false; end;
           end;
           if (nonblank(RepSpec.f6)) then begin
             if (DateTimeInsideDateTime(Barr.TransDate,Barr.TransTime,Barr.TransDate,Barr.TransTime,
                                        startdate,frtim,enddate,totim)==false) then begin
               testf = false;
             end;
           end;
           if (nonblank(RepSpec.f2)) then begin
             if (Barr.Cashier!=RepSpec.f2) then begin testf = false; end;
           end;
           if (nonblank(RepSpec.FirstAcc)) then begin
             if (Barr.MachineName!=RepSpec.FirstAcc) then begin testf = false; end;
           end;
           if (nonblank(RepSpec.LastAcc)) then begin
             tstr = Barr.MachineName;
             GetLocalMachineGroup(tstr);
             if (tstr!=RepSpec.LastAcc) then begin testf = false; end;
           end;
           if (testf) then begin
             switch (RepSpec.ArtMode) begin
               case 0:
                 ITr.Code = INr.Group;
                 if (ReadFirstMain(ITr,1,true)==false) then begin
                   RecordNew(ITr);
                 end;
                 if (Barrw.stp==1) then begin
                   AddToArray(INr.Group,Barrw.Quant,Barrw.Price,ITr.Comment,Barr.Resource,aitems,ainnames,aqtys,asumbar,asumhotel,acnt);
                 end;
                 if (Barrw.stp==3) then begin
                   AddToArray(INr.Group,-Barrw.Quant,Barrw.Price,ITr.Comment,Barr.Resource,aitems,ainnames,aqtys,asumbar,asumhotel,acnt);
                 end;
               case 1:
                 if (Barrw.stp==1) then begin
                   AddToArray(Barrw.ArtCode,Barrw.Quant,Barrw.Price,INr.Name,Barr.Resource,aitems,ainnames,aqtys,asumbar,asumhotel,acnt);
                 end;
                 if (Barrw.stp==3) then begin
                   AddToArray(Barrw.ArtCode,-Barrw.Quant,Barrw.Price,INr.Name,Barr.Resource,aitems,ainnames,aqtys,asumbar,asumhotel,acnt);
                 end;
               case 2:
                 if (Barrw.stp==1) then begin
                   StartFormat(15);
                   OutString(0,"DblRestAccVc",Barr.SerNr,false);
                   OutString(70, 0,Barr.SalesGroup,false);
                   OutString(120,0,Barr.MachineName,false);
                   OutString(170,0,Barr.Cashier,false);
                   OutString(220,0,Barr.CustCode,false);
                   OutString(270,0,Barr.CUCode,false);
                   OutString(320,0,Barr.CUName,false);
                   OutVal(6,0,Round(Barrw.Quant*Barrw.Price,DefaultRoundMode),M4Val,true);
                   EndFormat;
                   tottot = tottot + Round(Barrw.Quant*Barrw.Price,DefaultRoundMode);
                 end;
                 if (Barrw.stp==3) then begin
                   StartFormat(15);
                   OutString(0,"DblRestAccVc",Barr.SerNr,false);
                   OutString(70, 0,Barr.SalesGroup,false);
                   OutString(120,0,Barr.MachineName,false);
                   OutString(170,0,Barr.Cashier,false);
                   OutString(220,0,Barr.CustCode,false);
                   OutString(270,0,Barr.CUCode,false);
                   OutString(320,0,Barr.CUName,false);
                   OutVal(6,0,Round(-Barrw.Quant*Barrw.Price,DefaultRoundMode),M4Val,true);
                   EndFormat;
                   tottot = tottot + Round(-Barrw.Quant*Barrw.Price,DefaultRoundMode);
                 end;
             end;
           end;
         end;
       end;
    end;
    switch (RepSpec.ArtMode) begin
      case 0:
        PrintArray("DblBIStatItemVc",aitems,ainnames,aqtys,asumbar,asumhotel,acnt,totbar,tothot,tottot,totqty);
      case 1:
        PrintArray("DblBIStatBarTabVc",aitems,ainnames,aqtys,asumbar,asumhotel,acnt,totbar,tothot,tottot,totqty);
    end;
    CleanArray(aitems,ainnames,aqtys,asumbar,asumhotel,acnt);
    Gray_Divider(0,1);
    StartFormat(15);
    if (BuildProductCode!="StandardPOS") then begin
      OutVal(3,0,totqty,M4UVal,true);
      OutVal(4,0,totbar,M4Val,true);
      OutVal(5,0,tothot,M4Val,true);
    end else begin
      OutVal(3,0,totqty,M4UVal,true);
    end;
    OutVal(6,0,tottot,M4Val,true);
    EndFormat;
    gtotqty = gtotqty + totqty; totqty = 0;
    gtotbar = gtotbar + totbar; totbar = 0;
    gtothot = gtothot + tothot; tothot = 0;
    gtottot = gtottot + tottot; tottot = 0;
  end;
  if (RepSpec.flags[0]!=0) then begin
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(0,0,USetStr(10065),false);
    if (BuildProductCode!="StandardPOS") then begin
      OutVal(3,0,gtotqty,M4UVal,true);
      OutVal(4,0,gtotbar,M4Val,true);
      OutVal(5,0,gtothot,M4Val,true);
    end else begin
      OutVal(5,0,gtotqty,M4UVal,true);
    end;
    OutVal(6,0,gtottot,M4Val,true);
    EndFormat;
  end;
  EndJob;
  return;
end;
