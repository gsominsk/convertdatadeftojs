external procedure InvoiceType(Integer,var string);
external procedure RunCOCULines(record COCUServiceVc,Boolean,Integer,Integer,Integer,Integer,Boolean,var Date,var val,var val,var val);

updating procedure TestCreateCustomerAccount(string custcode)
begin
  record CUAccountVc CUAccountr;
  record CUVc CUr;
  
  CUAccountr.CustCode = custcode;
  if (ReadFirstMain(CUAccountr,1,true)==false) then begin
    CUr.Code = custcode;
    if (ReadFirstMain(CUr,1,true)) then begin
      RecordNew(CUAccountr);
      CUAccountr.CustCode = CUr.Code;
      CUAccountr.Name = CUr.Name;
      CUAccountr.RegDate = CurrentDate;
      CUAccountr.ThisAccount = 0;
      if (RecordStore(CUAccountr,false)) then begin
      end;
    end;
  end;
  return;
end;

global
updating procedure AddToTheCustomerAccount(string custcode,date transdate,string filename,LongInt serno,val s)
begin
  record CUAccountHistVc CUAccountHistr;

  CUAccountHistr.CustCode = custcode;
  CUAccountHistr.TransDate = transdate;
  CUAccountHistr.FileName = filename;
  CUAccountHistr.SerNr = serno;
  CUAccountHistr.Sum = s;
  if (RecordStore(CUAccountHistr,false)) then begin
  end;
  TestCreateCustomerAccount(custcode);
  return;
end;

function val PrintOpenCustomerAccount(string custcode,string thecust,string filename,LongInt sernr,Boolean printf,Integer exclothers)
begin
  record CUAccountHistVc CUAccountHistr;
  record CUVc CUr;
  record IVVc IVr;
  Boolean testf,foundf,firstf,skipf;
  string 200 dblstr,commentstr;
  val res;
  
  res = 0;
  firstf = true;
  foundf = true;
  CUAccountHistr.CustCode = custcode;
  while (LoopMain(CUAccountHistr,1,foundf)) begin
    if (CUAccountHistr.CustCode!=custcode) then begin
      foundf = false;
    end;
    testf = foundf;
    skipf = false;
    if (exclothers==1) then begin
      if (custcode!=thecust and nonblank(thecust)) then begin
        if (CUAccountHistr.TheCust!=thecust) then begin
          skipf = true;
        end;
      end;
    end;
    if (testf) then begin
      if (printf and skipf==false) then begin
        if (firstf) then begin
          StartFormat(15);
          OutString(9,0,"Trans. Date",false);
          OutString(2,0,"Type",false);
          OutString(3,0,"For/To",false);
          OutString(4,0,"Name",false);
          OutString(1,0,"Sum",true);
          EndFormat;
          Gray_Divider(0,1);
        end;
        switch (CUAccountHistr.FileName) begin
          case "IVVc":
            dblstr = "DblIVVc";
            IVr.SerNr = CUAccountHistr.SerNr;
            if (ReadFirstMain(IVr,1,true)) then begin
              InvoiceType(IVr.InvType,commentstr);
            end;
          otherwise
            dblstr = "Unknown";
        end;
        CUr.Code = CUAccountHistr.TheCust;
        if (ReadFirstMain(CUr,1,true)==false) then begin
          RecordNew(CUr);
        end;
        StartFormat(15);
        OutStringID(9,dblstr,CUAccountHistr.TransDate,false,CUAccountHistr.SerNr);
        OutString(2,0,commentstr,false);
        OutString(3,0,CUAccountHistr.TheCust,false);
        OutString(4,0,CUr.Name,false);
        OutVal(1,0,CUAccountHistr.Sum,M4Val,true);
        EndFormat;
        firstf = false;
      end;
      res = res + CUAccountHistr.Sum;
    end;
  end;
  if (firstf==false) then begin
    Gray_Divider(0,1);
  end;
  PrintOpenCustomerAccount = res;
  return;
end;

procedure PrintAccountHeader(record CUAccountVc CUAccountr)
begin
  StartFormat(15);
  switch (CUAccountr.ThisAccount) begin
    case 0: OutString(0,0,"Customer Account",false);
    case 1: OutString(0,0,"Paying Account",false);
  end;
  OutString(2,0,"Customer Name",false);
  OutString(3,0,"Reg. Date",false);
  OutString(4,0,"End Date",false);
  switch (CUAccountr.ThisAccount) begin
    case 0:
    case 1: OutString(5,0,"Will Pay For",false);
  end;
  EndFormat;
  Gray_Divider(0,1);
  StartFormat(15);
  OutStringID(0,"DblCUAccountVc",CUAccountr.CustCode,false,"" & CUAccountr.ThisAccount & ":" & CUAccountr.InvToCust);
  OutString(2,0,CUAccountr.Name,false);
  OutString(3,0,CUAccountr.RegDate,false);
  OutString(4,0,CUAccountr.EndDate,false);
  OutString(5,0,CUAccountr.InvToCust,false);
  if (CUAccountr.SerNr>0) then begin
    OutString(6,0,CUAccountr.FileName & "  " & CUAccountr.SerNr,false);
  end else begin
    OutString(6,0,CUAccountr.InvToCustName,false);
  end;
  EndFormat;
  Gray_Divider(0,1);
  return;
end;

function val ListCustomerAccounts(string custcode,string filename,LongInt sernr,Boolean printf,Integer exclothers)
begin
  record CUAccountVc CUAccountr;
  array string 20 acustcode;
  Boolean testf,foundf;
  LongInt acnt,i;
  val res,tmp;

  res = 0;
  acnt = 0;
  CUAccountr.CustCode = custcode;
  if (ReadFirstMain(CUAccountr,1,true)) then begin
    if (printf) then begin
      PrintAccountHeader(CUAccountr);
    end;
    tmp = PrintOpenCustomerAccount(CUAccountr.CustCode,custcode,filename,sernr,printf,exclothers);
    if (printf) then begin
      StartFormat(15);
      OutString(8,0,"Balance on this Account",false);
      OutVal(1,0,tmp,M4Val,true);
      EndFormat;
      StartFormat(15);
      EndFormat;
    end;
    acustcode[acnt] = CUAccountr.CustCode;
    acnt = acnt + 1;
    res = res + tmp;
  end;
  ResetLoop(CUAccountr);
  CUAccountr.InvToCust = custcode;
  foundf = true;
  while (LoopKey("InvToCust",CUAccountr,1,foundf)) begin
    if (CUAccountr.InvToCust!=custcode) then begin
      foundf = false;
    end;
    testf = foundf;
    for (i=0;i<acnt;i=i+1) begin
      if (CUAccountr.CustCode==acustcode[i]) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      if (printf) then begin
        PrintAccountHeader(CUAccountr);
      end;
      tmp = PrintOpenCustomerAccount(CUAccountr.CustCode,custcode,filename,sernr,printf,exclothers);
      if (printf) then begin
        StartFormat(15);
        OutString(8,0,"Balance on this Account",false);
        OutVal(1,0,tmp,M4Val,true);
        EndFormat;
        StartFormat(15);
        EndFormat;
      end;
      acustcode[acnt] = CUAccountr.CustCode;
      acnt = acnt + 1;
      res = res + tmp;
    end;
  end;
  if (printf) then begin
    StartFormat(15);
    OutString(8,0,"Total Balance",false);
    OutVal(1,0,res,M4Val,true);
    EndFormat;
  end;
  ListCustomerAccounts = res;
  return;
end;

global
function val OpenCustomerAccountVal(string custcode,string filename,LongInt sernr)
begin
  val res;
  
  res = ListCustomerAccounts(custcode,filename,sernr,false,0);
  OpenCustomerAccountVal = res;
  return;
end;

procedure GetThisCustAccBal(string custcode,var val totinvopen,var val totinvper)
begin
  record COCUServiceVc COCUServicer;
  val invtot,invopen,invper;
  Boolean foundf,testf;
  Date validuntil;

  foundf = true;
  COCUServicer.CustCode = custcode;
  while (LoopKey("CustCode",COCUServicer,1,foundf)) begin
    if (COCUServicer.CustCode!=custcode) then begin
      foundf = false;
    end;
    testf = foundf;
    if (testf) then begin
      RunCOCULines(COCUServicer,false,0,0,0,0,false,validuntil,invtot,invopen,invper);
      totinvopen = totinvopen + invopen;
      totinvper = totinvper + invper;
    end;
  end;
  return;
end;

global
procedure CustAccBal(string custcode,Date dat,var val curbal,Integer typ,var val suggpay)
begin
  record CUAccountVc CUAccountr;
  val totinvopen,totinvper;
  Boolean foundf,testf;
  
  totinvopen = 0;
  totinvper = 0;
  CUAccountr.CustCode = custcode;
  foundf = true;
  while (LoopMain(CUAccountr,1,foundf)) begin
    if (CUAccountr.CustCode!=custcode) then begin
      foundf = false;
    end;
    testf = foundf;
    if (testf) then begin
      if (nonblank(CUAccountr.InvToCust)) then begin
        GetThisCustAccBal(CUAccountr.InvToCust,totinvopen,totinvper);
      end else begin
        GetThisCustAccBal(CUAccountr.CustCode,totinvopen,totinvper);
      end;
    end;
  end;
  curbal = OpenCustomerAccountVal(custcode,"",-1);
  suggpay = curbal - (totinvopen + totinvper);
  if (suggpay>=0) then begin
    suggpay = BlankVal;
  end else begin
    suggpay = -suggpay;
  end;
  return;
end;

global
procedure CUAccountRn(record  RcVc RepSpec)
begin
  record CUAccountVc CUAccountr;
  Boolean testf,foundf;
  val res;

  StartReportJob("Customer Account");
  EndHeader;
  SetRepCol(2,90);
  SetRepCol(3,170);
  SetRepCol(4,250);
  SetRepCol(5,310);
  SetRepCol(6,390);
  SetRepCol(8,300);
  SetRepCol(9,12);
  
  res = ListCustomerAccounts(RepSpec.f1,"",-1,true,RepSpec.flags[1]);
  EndJob;
  return;
end;

