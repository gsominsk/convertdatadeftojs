external procedure QuotesForCustomers(Integer,string,Date,Date,var LongInt,var val,string);
external function val UserActTypesNumber(string,string,Date,Date);
external function val UserSales(string,Date,Date,string,string,string);
external procedure ForecastPrintNote(record ForecastUserVc,string);
external function val UserActTypesHours(string,string,Date,Date);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function val TimeToVal2(Time);
external procedure HT2Per(Date, Date , var string);

procedure FindQTWithPriority(string person,Date startd,Date endd,string custcat,var record QTVc resQT1r,var record QTVc resQT2r,var record QTVc resQT3r)
BEGIN
  Boolean TrHs,testf;
  record QTVc QTr;
  record CUVc CUr;
  Integer cnt;
  
  RecordCopy(resQT1r,QTr);
  RecordCopy(resQT2r,QTr);
  RecordCopy(resQT3r,QTr);
  cnt = 1;
  TrHs = true;
  QTr.SalesMan = person;
  QTr.Priority = 0;
  QTr.QTDate = startd;
  while (LoopKey("SalesManPriority",QTr,3,TrHs)) begin
    if (DateInRange(QTr.QTDate,startd,endd)==false) then begin 
      TrHs = false; 
    end;
    if (QTr.SalesMan!=person) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(custcat)) then begin
        CUr.Code = QTr.CustCode;
        if (ReadFirstMain(CUr,1,true)) then begin
          if (CUr.CustCat!=custcat) then begin 
            testf = false;
          end;
        end;
      end;
      if (testf) then begin
        if (QTr.Priority>=0) then begin
          switch (cnt) begin
            case 1: RecordCopy(resQT1r,QTr);
            case 2: RecordCopy(resQT2r,QTr);
            case 3: RecordCopy(resQT3r,QTr);
          end;
          cnt = cnt + 1;
        end;
        if (cnt>3) then begin
          goto LFindQTWithPriority;
        end;
      end;
    end;
  end;
LFindQTWithPriority:;  
  RETURN;
END;

procedure PrintRowNumbers(Integer col1,Integer col2,Integer col3,Integer col4,Integer col5,Integer col6,Integer col7,
                          string str,LongInt l1,LongInt l2,LongInt l3,LongInt l4,LongInt prev2ml)
BEGIN        
  LongInt totl;
             
  totl = 0;
  StartFormat(15);
  OutString(col1,0,str,false);
  if (l1>=0) then begin
    OutLongInt(col2,0,l1,true);
  end;
  if (l2>=0) then begin
    OutLongInt(col3,0,l2,true);
    totl = totl + l2;
  end;
  if (l3>=0) then begin
    OutLongInt(col4,0,l3,true);
  end;
  if (l4>=0) then begin
    OutLongInt(col5,0,l4,true);
    totl = totl + l4;
  end;
  if ((totl)>=0) then begin
    OutLongInt(col6,0,totl,true);
  end;
  if (prev2ml>=0) then begin
    OutLongInt(col7,0,(prev2ml+totl)/3,true);
  end;
  EndFormat;
  RETURN;
END;

procedure PrintRowVals(Integer col1,Integer col2,Integer col3,Integer col4,Integer col5,Integer col6,Integer col7,
                          string str,val v1,val v2,val v3,val v4,val prev2mv)
BEGIN                   
  StartFormat(15);
  OutString(col1,0,str,false);
  OutVal(col2,0,v1,M4Val,true);
  OutVal(col3,0,v2,M4Val,true);
  OutVal(col4,0,v3,M4Val,true);
  OutVal(col5,0,v4,M4Val,true);
  OutVal(col6,0,v2+v4,M4Val,true);  
  OutVal(col7,0,(prev2mv+v2+v4)/3,M4Val,true);
  EndFormat;
  RETURN;
END;

procedure FindPrevious2MonthsResult(record RcVc RepSpec,var LongInt prev2mNewLeads,var LongInt prev2mMeetNewCU,var LongInt prev2mMeetNew,var LongInt prev2mMeetOldCU,var LongInt prev2mMeetOld,
                                    var LongInt prev2mQuotesNewCU,var LongInt prev2mQuotesOldCU,var val prev2mQuotesSumNewCU,var val prev2mQuotesSumOldCU,var val prev2mLicensesNewCU,
                                    var val prev2mLicensesOldCU,var val prev2mConsultingNewCU,var val prev2mConsultingOldCU,var val prev2mTurnoverNewCU,var val prev2mTurnoverOldCU,
                                    var val prev2mGPNewCU,var val prev2mGPOldCU)//CUST
begin
  record ResultUserVc ResultUserr;
  Date td;

  prev2mNewLeads = 0;
  prev2mMeetNewCU = 0;
  prev2mMeetNew = 0;
  prev2mMeetOldCU = 0;
  prev2mMeetOld = 0;
  prev2mQuotesNewCU = 0;
  prev2mQuotesOldCU = 0;

  td = AddMonth(RepSpec.sStartDate,-1);
  ResultUserr.Person = RepSpec.TransStr;
  ResultUserr.Month = GetMonth(td);
  if (ReadFirstKey("PersonMonth",ResultUserr,2,true)) then begin
    prev2mNewLeads = prev2mNewLeads + ResultUserr.NewLeads;
    prev2mNewLeads = prev2mNewLeads + ResultUserr.NewLeadsPart;
    prev2mMeetNewCU = prev2mMeetNewCU + ResultUserr.MeetNewCU;
    prev2mMeetNewCU = prev2mMeetNewCU + ResultUserr.MeetNewCUPart;
    prev2mMeetNew = prev2mMeetNew + ResultUserr.MeetNewPart;
    prev2mMeetOldCU = prev2mMeetOldCU + ResultUserr.MeetOldCU;
    prev2mMeetOldCU = prev2mMeetOldCU + ResultUserr.MeetOldCUPart;
    prev2mMeetOld = prev2mMeetOld + ResultUserr.MeetOldPart;
    prev2mQuotesNewCU = prev2mQuotesNewCU + ResultUserr.QuotesNewCU;
    prev2mQuotesNewCU = prev2mQuotesNewCU + ResultUserr.QuotesNewCUPart;
    prev2mQuotesOldCU = prev2mQuotesOldCU + ResultUserr.QuotesOldCU;
    prev2mQuotesOldCU = prev2mQuotesOldCU + ResultUserr.QuotesOldCUPart;
    prev2mQuotesSumNewCU = prev2mQuotesSumNewCU + ResultUserr.QuotesSumNewCU;
    prev2mQuotesSumNewCU = prev2mQuotesSumNewCU + ResultUserr.QuotesSumNewCUPart;
    prev2mQuotesSumOldCU = prev2mQuotesSumOldCU + ResultUserr.QuotesSumOldCU;
    prev2mQuotesSumOldCU = prev2mQuotesSumOldCU + ResultUserr.QuotesSumOldCUPart;    
    prev2mLicensesNewCU = prev2mLicensesNewCU + ResultUserr.LicensesNewCU;
    prev2mLicensesNewCU = prev2mLicensesNewCU + ResultUserr.LicensesNewCUPart;
    prev2mLicensesOldCU = prev2mLicensesOldCU + ResultUserr.LicensesOldCU;
    prev2mLicensesOldCU = prev2mLicensesOldCU + ResultUserr.LicensesOldCUPart;
    prev2mConsultingNewCU = prev2mConsultingNewCU + ResultUserr.ConsultingNewCU;
    prev2mConsultingNewCU = prev2mConsultingNewCU + ResultUserr.ConsultingNewCUPart;
    prev2mConsultingOldCU = prev2mConsultingOldCU + ResultUserr.ConsultingOldCU;
    prev2mConsultingOldCU = prev2mConsultingOldCU + ResultUserr.ConsultingOldCUPart;
    prev2mTurnoverNewCU = prev2mTurnoverNewCU + ResultUserr.TurnoverNewCU;
    prev2mTurnoverNewCU = prev2mTurnoverNewCU + ResultUserr.TurnoverNewCUPart;
    prev2mTurnoverOldCU = prev2mTurnoverOldCU + ResultUserr.TurnoverOldCU;
    prev2mTurnoverOldCU = prev2mTurnoverOldCU + ResultUserr.TurnoverOldCUPart;
    prev2mGPNewCU = prev2mGPNewCU + ResultUserr.GPNewCU;
    prev2mGPNewCU = prev2mGPNewCU + ResultUserr.GPNewCUPart;
    prev2mGPOldCU = prev2mGPOldCU + ResultUserr.GPOldCU;
    prev2mGPOldCU = prev2mGPOldCU + ResultUserr.GPOldCUPart;
  end;

  td = AddMonth(RepSpec.sStartDate,-2);
  ResultUserr.Person = RepSpec.TransStr;
  ResultUserr.Month = GetMonth(td);
  if (ReadFirstKey("PersonMonth",ResultUserr,2,true)) then begin
    prev2mNewLeads = prev2mNewLeads + ResultUserr.NewLeads;
    prev2mNewLeads = prev2mNewLeads + ResultUserr.NewLeadsPart;
    prev2mMeetNewCU = prev2mMeetNewCU + ResultUserr.MeetNewCU;
    prev2mMeetNewCU = prev2mMeetNewCU + ResultUserr.MeetNewCUPart;
    prev2mMeetNew = prev2mMeetNew + ResultUserr.MeetNewPart;
    prev2mMeetOldCU = prev2mMeetOldCU + ResultUserr.MeetOldCU;
    prev2mMeetOldCU = prev2mMeetOldCU + ResultUserr.MeetOldCUPart;
    prev2mMeetOld = prev2mMeetOld + ResultUserr.MeetOldPart;
    prev2mQuotesNewCU = prev2mQuotesNewCU + ResultUserr.QuotesNewCU;
    prev2mQuotesNewCU = prev2mQuotesNewCU + ResultUserr.QuotesNewCUPart;
    prev2mQuotesOldCU = prev2mQuotesOldCU + ResultUserr.QuotesOldCU;
    prev2mQuotesOldCU = prev2mQuotesOldCU + ResultUserr.QuotesOldCUPart;
    prev2mQuotesSumNewCU = prev2mQuotesSumNewCU + ResultUserr.QuotesSumNewCU;
    prev2mQuotesSumNewCU = prev2mQuotesSumNewCU + ResultUserr.QuotesSumNewCUPart;
    prev2mQuotesSumOldCU = prev2mQuotesSumOldCU + ResultUserr.QuotesSumOldCU;
    prev2mQuotesSumOldCU = prev2mQuotesSumOldCU + ResultUserr.QuotesSumOldCUPart;    
    prev2mLicensesNewCU = prev2mLicensesNewCU + ResultUserr.LicensesNewCU;
    prev2mLicensesNewCU = prev2mLicensesNewCU + ResultUserr.LicensesNewCUPart;
    prev2mLicensesOldCU = prev2mLicensesOldCU + ResultUserr.LicensesOldCU;
    prev2mLicensesOldCU = prev2mLicensesOldCU + ResultUserr.LicensesOldCUPart;
    prev2mConsultingNewCU = prev2mConsultingNewCU + ResultUserr.ConsultingNewCU;
    prev2mConsultingNewCU = prev2mConsultingNewCU + ResultUserr.ConsultingNewCUPart;
    prev2mConsultingOldCU = prev2mConsultingOldCU + ResultUserr.ConsultingOldCU;
    prev2mConsultingOldCU = prev2mConsultingOldCU + ResultUserr.ConsultingOldCUPart;
    prev2mTurnoverNewCU = prev2mTurnoverNewCU + ResultUserr.TurnoverNewCU;
    prev2mTurnoverNewCU = prev2mTurnoverNewCU + ResultUserr.TurnoverNewCUPart;
    prev2mTurnoverOldCU = prev2mTurnoverOldCU + ResultUserr.TurnoverOldCU;
    prev2mTurnoverOldCU = prev2mTurnoverOldCU + ResultUserr.TurnoverOldCUPart;
    prev2mGPNewCU = prev2mGPNewCU + ResultUserr.GPNewCU;
    prev2mGPNewCU = prev2mGPNewCU + ResultUserr.GPNewCUPart;
    prev2mGPOldCU = prev2mGPOldCU + ResultUserr.GPOldCU;
    prev2mGPOldCU = prev2mGPOldCU + ResultUserr.GPOldCUPart;
  end;

  return;
end;

global
procedure MonthSalesRn(record RcVc RepSpec)
BEGIN
  string 255 tstr;
  Integer rw;
  record CountryVc Countryr;
  record UserVc Userr;
  record QTVc QT1r,QT2r,QT3r;
  record ForecastUserVc ForecastUserr;
  record ResultUserVc ResultUserr;
  record MonthlyUserSetVc MonthlyUserSetr;
  Boolean forecastf;
  val suppres,tothours;
  Integer col1,col2,col3,col4,col5,col6,col7,col8;
  LongInt nrofnewq,nrofoldq,nrofnewpartq,nrofoldpartq,leadres;
  val amountnewq,amountnewpartq,amountoldq,amountoldpartq;
  val licensesnew,licensesnewpart,licensesold,licensesoldpart,servicesnew,servicesnewpart,servicesold,servicesoldpart;
  val trunovernew,trunoverold,trunovernewpart,trunoveroldpart;

  LongInt prev2mNewLeads,prev2mMeetNewCU,prev2mMeetNew,prev2mMeetOldCU,prev2mMeetOld,prev2mQuotesNewCU,prev2mQuotesOldCU;
  val prev2mQuotesSumNewCU,prev2mQuotesSumOldCU,prev2mLicensesNewCU,prev2mLicensesOldCU,prev2mConsultingNewCU,prev2mConsultingOldCU,prev2mTurnoverNewCU,prev2mTurnoverOldCU,prev2mGPNewCU,prev2mGPOldCU;
  
  Userr.Code = RepSpec.TransStr;
  if (ReadFirstMain(Userr,1,true)) then begin end;
  ForecastUserr.Person = RepSpec.TransStr;
  ForecastUserr.Month = GetMonth(RepSpec.sStartDate);
  forecastf = ReadFirstKey("PersonMonth",ForecastUserr,2,true);

  Countryr.Code = ForecastUserr.Country;
  if (ReadFirstMain(Countryr,1,true)) then begin end;
  StartReportJob(USetStr(13450));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  Header(rw,Userr.Name,0);
  Header(rw,Countryr.Comment,1);
  EndHeader;
  col1 = 0;
  col2 = 180;
  col3 = 240;
  col4 = 300;
  col5 = 360;
  col6 = 420;
  col7 = 480;
  if (blank(RepSpec.TransStr)) then begin
    StartFormat(15);
    OutString(0,0,USetStr(13451),false);
    EndFormat;
    goto LEND;
  end;
  if (forecastf==false) then begin
    StartFormat(15);
    OutString(0,0,USetStr(13452),false);
    EndFormat;
    goto LEND;
  end;
  ResultUserr.Person = RepSpec.TransStr;
  ResultUserr.Month = GetMonth(RepSpec.sStartDate);
  forecastf = ReadFirstKey("PersonMonth",ResultUserr,2,true);
  
  FindPrevious2MonthsResult(RepSpec,prev2mNewLeads,prev2mMeetNewCU,prev2mMeetNew,prev2mMeetOldCU,prev2mMeetOld,prev2mQuotesNewCU,prev2mQuotesOldCU,prev2mQuotesSumNewCU,
                            prev2mQuotesSumOldCU,prev2mLicensesNewCU,prev2mLicensesOldCU,prev2mConsultingNewCU,prev2mConsultingOldCU,prev2mTurnoverNewCU,prev2mTurnoverOldCU,
                            prev2mGPNewCU,prev2mGPOldCU);//CUST
  
  StartFormat(15);
  OutString(0,0,USetStr(13453),false);
  EndFormat;
  Gray_Divider(0,1);
  StartFormat(15);
   OutString(190,0,USetStr(13454),false);
   OutString(310,0,USetStr(13455),false);
   OutString(col7,0,"Total Average Result",true);
  EndFormat;
  StartFormat(15);
   OutString(col2,0,"Forecast",true);
   OutString(col3,0,"Result",true);
   OutString(col4,0,"Forecast",true);
   OutString(col5,0,"Result",true);
   OutString(col6,0,"Total Result",true);
   OutString(col7,0,"Last 3 Months",true);
  EndFormat;
  Gray_Divider(0,1);
  if (RepSpec.flags[0]==0) then begin
    PrintRowNumbers(col1,col2,col3,col4,col5,col6,col7,USetStr(13456),ForecastUserr.NewLeads,ResultUserr.NewLeads,ForecastUserr.NewLeadsPart,ResultUserr.NewLeadsPart,prev2mNewLeads);
    PrintRowNumbers(col1,col2,col3,col4,col5,col6,col7,USetStr(13457) & " " & USetStr(13464),ForecastUserr.MeetNewCU,ResultUserr.MeetNewCU,ForecastUserr.MeetNewCUPart,ResultUserr.MeetNewCUPart,prev2mMeetNewCU);
    PrintRowNumbers(col1,col2,col3,col4,col5,col6,col7,USetStr(13457) & " " & USetStr(13465) & " " & USetStr(13455),-1,-1,ForecastUserr.MeetNewPart,ResultUserr.MeetNewPart,prev2mMeetNew);
    PrintRowNumbers(col1,col2,col3,col4,col5,col6,col7,USetStr(13457) & " " & USetStr(13465),ForecastUserr.MeetOldCU,ResultUserr.MeetOldCU,ForecastUserr.MeetOldCUPart,ResultUserr.MeetOldCUPart,prev2mMeetOldCU);


    PrintRowNumbers(col1,col2,col3,col4,col5,col6,col7,USetStr(13457) & " " & USetStr(13466),-1,-1,ForecastUserr.MeetOldPart,ResultUserr.MeetOldPart,prev2mMeetOld);
    PrintRowNumbers(col1,col2,col3,col4,col5,col6,col7,USetStr(13458) & " " & USetStr(13464),ForecastUserr.QuotesNewCU,ResultUserr.QuotesNewCU,ForecastUserr.QuotesNewCUPart,ResultUserr.QuotesNewCUPart,prev2mQuotesNewCU);
    PrintRowNumbers(col1,col2,col3,col4,col5,col6,col7,USetStr(13458) & " " & USetStr(13465),ForecastUserr.QuotesOldCU,ResultUserr.QuotesOldCU,ForecastUserr.QuotesOldCUPart,ResultUserr.QuotesOldCUPart,prev2mQuotesOldCU);

    PrintRowVals(col1,col2,col3,col4,col5,col6,col7,USetStr(13459) & " " & USetStr(13464),ForecastUserr.QuotesSumNewCU,ResultUserr.QuotesSumNewCU,ForecastUserr.QuotesSumNewCUPart,ResultUserr.QuotesSumNewCUPart,prev2mQuotesSumNewCU);
    PrintRowVals(col1,col2,col3,col4,col5,col6,col7,USetStr(13459) & " " & USetStr(13465),ForecastUserr.QuotesSumOldCU,ResultUserr.QuotesSumOldCU,ForecastUserr.QuotesSumOldCUPart,ResultUserr.QuotesSumOldCUPart,prev2mQuotesSumOldCU);
    PrintRowVals(col1,col2,col3,col4,col5,col6,col7,USetStr(13460) & " " & USetStr(13464),ForecastUserr.LicensesNewCU,ResultUserr.LicensesNewCU,ForecastUserr.LicensesNewCUPart,ResultUserr.LicensesNewCUPart,prev2mLicensesNewCU);
    PrintRowVals(col1,col2,col3,col4,col5,col6,col7,USetStr(13460) & " " & USetStr(13465),ForecastUserr.LicensesOldCU,ResultUserr.LicensesOldCU,ForecastUserr.LicensesOldCUPart,ResultUserr.LicensesOldCUPart,prev2mLicensesOldCU);
    PrintRowVals(col1,col2,col3,col4,col5,col6,col7,USetStr(13461) & " " & USetStr(13464),ForecastUserr.ConsultingNewCU,ResultUserr.ConsultingNewCU,ForecastUserr.ConsultingNewCUPart,ResultUserr.ConsultingNewCUPart,prev2mConsultingNewCU);
    PrintRowVals(col1,col2,col3,col4,col5,col6,col7,USetStr(13461) & " " & USetStr(13465),ForecastUserr.ConsultingOldCU,ResultUserr.ConsultingOldCU,ForecastUserr.ConsultingOldCUPart,ResultUserr.ConsultingOldCUPart,prev2mConsultingOldCU);
    PrintRowVals(col1,col2,col3,col4,col5,col6,col7,USetStr(13462) & " " & USetStr(13464),ForecastUserr.TurnoverNewCU,ResultUserr.TurnoverNewCU,ForecastUserr.TurnoverNewCUPart,ResultUserr.TurnoverNewCUPart,prev2mTurnoverNewCU);
    PrintRowVals(col1,col2,col3,col4,col5,col6,col7,USetStr(13462) & " " & USetStr(13465),ForecastUserr.TurnoverOldCU,ResultUserr.TurnoverOldCU,ForecastUserr.TurnoverOldCUPart,ResultUserr.TurnoverOldCUPart,prev2mTurnoverOldCU);
    PrintRowVals(col1,col2,col3,col4,col5,col6,col7,USetStr(13463) & " " & USetStr(13464),ForecastUserr.GPNewCU,ResultUserr.GPNewCU,ForecastUserr.GPNewCUPart,ResultUserr.GPNewCUPart,prev2mGPNewCU);
    PrintRowVals(col1,col2,col3,col4,col5,col6,col7,USetStr(13463) & " " & USetStr(13465),ForecastUserr.GPOldCU,ResultUserr.GPOldCU,ForecastUserr.GPOldCUPart,ResultUserr.GPOldCUPart,prev2mGPOldCU);
    StartFormat(15);
    EndFormat;
    Gray_Divider(0,1);
    StartFormat(15);
    EndFormat;
    StartFormat(15);
    OutString(0,0,USetStr(13474),false);
    EndFormat;
    StartFormat(15);
    OutString(15,0,ForecastUserr.Development1,false);
    EndFormat;
    StartFormat(15);
    OutString(0,0,USetStr(13475),false);
    EndFormat;
    StartFormat(15);
    OutString(15,0,ForecastUserr.Development2,false);
    EndFormat;
    Gray_Divider(0,1);

    FindQTWithPriority(RepSpec.TransStr,RepSpec.sStartDate,RepSpec.sEndDate,"",QT1r,QT2r,QT3r);
    StartFormat(15);
    OutString(0,0,USetStr(13467),false);
    EndFormat;
    StartFormat(15);
    OutString(15,0,USetStr(13471) & " " & USetStr(13469),false);
    EndFormat;
    if (QT1r.SerNr>0) then begin
      StartFormat(15);
      OutString(20,"DblQTVc",QT1r.SerNr,false);
      OutString(40,0,QT1r.Addr0,false);
      EndFormat;
    end;
    StartFormat(15);
    OutString(15,0,USetStr(13472) & " " & USetStr(13469),false);
    EndFormat;
    if (QT2r.SerNr>0) then begin
      StartFormat(15);
      OutString(20,"DblQTVc",QT2r.SerNr,false);
      OutString(40,0,QT2r.Addr0,false);
      EndFormat;
    end;

    StartFormat(15);
    OutString(15,0,USetStr(13473) & " " & USetStr(13469),false);
    EndFormat;
    if (QT3r.SerNr>0) then begin
      StartFormat(15);
      OutString(20,"DblQTVc",QT3r.SerNr,false);
      OutString(40,0,QT3r.Addr0,false);
      EndFormat;
    end;
    Gray_Divider(0,1);
    
/*
    StartFormat(15);
    EndFormat;
    StartFormat(15);
    OutString(0,0,USetStr(13468),false);
    EndFormat;
    StartFormat(15);
    OutString(15,0,USetStr(13471) & " " & USetStr(13470),false);
    EndFormat;
    StartFormat(15);
    OutString(15,0,USetStr(13472) &  " " & USetStr(13470),false);
    EndFormat;
    StartFormat(15);
    OutString(15,0,USetStr(13473) & " " & USetStr(13470),false);
    EndFormat;
    Gray_Divider(0,1);
    
    ForecastPrintNote(ForecastUserr,"");
*/
  end else begin
    MonthlyUserSetr.Person = RepSpec.TransStr;
    if (ReadFirstMain(MonthlyUserSetr,1,true)) then begin end;    
    if (nonblank(MonthlyUserSetr.Leads)) then begin
      leadres = UserActTypesNumber(RepSpec.TransStr,MonthlyUserSetr.Leads,RepSpec.sStartDate,RepSpec.sEndDate);
    end;
    QuotesForCustomers(1,RepSpec.TransStr,RepSpec.sStartDate,RepSpec.sEndDate,nrofnewq,amountnewq,"45");
    QuotesForCustomers(2,RepSpec.TransStr,RepSpec.sStartDate,RepSpec.sEndDate,nrofoldq,amountoldq,"45");
    QuotesForCustomers(1,RepSpec.TransStr,RepSpec.sStartDate,RepSpec.sEndDate,nrofnewpartq,amountnewpartq,"51");
    QuotesForCustomers(2,RepSpec.TransStr,RepSpec.sStartDate,RepSpec.sEndDate,nrofoldpartq,amountoldpartq,"51");

    licensesnew = UserSales(RepSpec.TransStr,RepSpec.sStartDate,RepSpec.sEndDate,"3010:3026","74000","73000");
    licensesold = UserSales(RepSpec.TransStr,RepSpec.sStartDate,RepSpec.sEndDate,"3010:3026","74010","73000");
    licensesnewpart = UserSales(RepSpec.TransStr,RepSpec.sStartDate,RepSpec.sEndDate,"3010:3026","74000","73010,73020,73030");
    licensesoldpart = UserSales(RepSpec.TransStr,RepSpec.sStartDate,RepSpec.sEndDate,"3010:3026","74010","73010,73020,73030");

    servicesnew = UserSales(RepSpec.TransStr,RepSpec.sStartDate,RepSpec.sEndDate,"3070:3088","74000","73000");
    servicesold = UserSales(RepSpec.TransStr,RepSpec.sStartDate,RepSpec.sEndDate,"3070:3088","74010","73000");
    servicesnewpart = UserSales(RepSpec.TransStr,RepSpec.sStartDate,RepSpec.sEndDate,"3070:3088","74000","73010,73020,73030");
    servicesoldpart = UserSales(RepSpec.TransStr,RepSpec.sStartDate,RepSpec.sEndDate,"3070:3088","74010","73010,73020,73030");
    

    trunovernew = UserSales(RepSpec.TransStr,RepSpec.sStartDate,RepSpec.sEndDate,"","74000","73000");
    trunoverold = UserSales(RepSpec.TransStr,RepSpec.sStartDate,RepSpec.sEndDate,"","74010","73000");
    trunovernewpart = UserSales(RepSpec.TransStr,RepSpec.sStartDate,RepSpec.sEndDate,"","74000","73010,73020,73030");
    trunoveroldpart = UserSales(RepSpec.TransStr,RepSpec.sStartDate,RepSpec.sEndDate,"","74010","73010,73020,73030");
    
    PrintRowNumbers(col1,col2,col3,col4,col5,col6,col7,USetStr(13456),ForecastUserr.NewLeads,leadres,ForecastUserr.NewLeadsPart,-1,-1);

    PrintRowNumbers(col1,col2,col3,col4,col5,col6,col7,USetStr(13457) & " " & USetStr(13464),ForecastUserr.MeetNewCU,-1,ForecastUserr.MeetNewCUPart,-1,-1);    
    PrintRowNumbers(col1,col2,col3,col4,col5,col6,col7,USetStr(13457) & " " & USetStr(13465),ForecastUserr.MeetOldCU,-1,ForecastUserr.MeetOldCUPart,-1,-1);    
    PrintRowNumbers(col1,col2,col3,col4,col5,col6,col7,USetStr(13457) & " " & USetStr(13466),-1,-1,ForecastUserr.MeetOldPart,-1,-1);    
    PrintRowNumbers(col1,col2,col3,col4,col5,col6,col7,USetStr(13458) & " " & USetStr(13464),ForecastUserr.QuotesNewCU,nrofnewq,ForecastUserr.QuotesNewCUPart,nrofnewpartq,-1);    
    PrintRowNumbers(col1,col2,col3,col4,col5,col6,col7,USetStr(13458) & " " & USetStr(13465),ForecastUserr.QuotesOldCU,nrofoldq,ForecastUserr.QuotesOldCUPart,nrofoldpartq,-1);    
    
    PrintRowVals(col1,col2,col3,col4,col5,col6,col7,USetStr(13459) & " " & USetStr(13464),ForecastUserr.QuotesSumNewCU,amountnewq,ForecastUserr.QuotesSumNewCUPart,amountnewpartq,blankval);    
    PrintRowVals(col1,col2,col3,col4,col5,col6,col7,USetStr(13459) & " " & USetStr(13465),ForecastUserr.QuotesSumOldCU,amountoldq,ForecastUserr.QuotesSumOldCUPart,amountoldpartq,blankval);    
    PrintRowVals(col1,col2,col3,col4,col5,col6,col7,USetStr(13460) & " " & USetStr(13464),ForecastUserr.LicensesNewCU,licensesnew,ForecastUserr.LicensesNewCUPart,licensesnewpart,blankval);    
    PrintRowVals(col1,col2,col3,col4,col5,col6,col7,USetStr(13460) & " " & USetStr(13465),ForecastUserr.LicensesOldCU,licensesold,ForecastUserr.LicensesOldCUPart,licensesoldpart,blankval);    
    PrintRowVals(col1,col2,col3,col4,col5,col6,col7,USetStr(13461) & " " & USetStr(13464),ForecastUserr.ConsultingNewCU,servicesnew,ForecastUserr.ConsultingNewCUPart,servicesnewpart,blankval);
    PrintRowVals(col1,col2,col3,col4,col5,col6,col7,USetStr(13461) & " " & USetStr(13465),ForecastUserr.ConsultingOldCU,servicesold,ForecastUserr.ConsultingNewCUPart,servicesoldpart,blankval);    
    PrintRowVals(col1,col2,col3,col4,col5,col6,col7,USetStr(13462) & " " & USetStr(13464),ForecastUserr.TurnoverNewCU,trunovernew,ForecastUserr.TurnoverNewCUPart,trunovernewpart,blankval);
    PrintRowVals(col1,col2,col3,col4,col5,col6,col7,USetStr(13462) & " " & USetStr(13465),ForecastUserr.TurnoverOldCU,trunoverold,ForecastUserr.TurnoverOldCUPart,trunoveroldpart,blankval);

    
    PrintRowVals(col1,col2,col3,col4,col5,col6,col7,USetStr(13463) & " " & USetStr(13464),ForecastUserr.GPNewCU,ResultUserr.GPNewCU,ForecastUserr.GPNewCUPart,ResultUserr.GPNewCUPart,blankval);
    PrintRowVals(col1,col2,col3,col4,col5,col6,col7,USetStr(13463) & " " & USetStr(13465),ForecastUserr.GPOldCU,ResultUserr.GPOldCU,ForecastUserr.GPOldCUPart,ResultUserr.GPOldCUPart,blankval);

    StartFormat(15);
    EndFormat;
    Gray_Divider(0,1);
    StartFormat(15);
    EndFormat;
    StartFormat(15);
    OutString(0,0,USetStr(13474),false);
    EndFormat;
    StartFormat(15);
    OutString(15,0,ForecastUserr.Development1,false);
    EndFormat;
    StartFormat(15);
    OutString(0,0,USetStr(13475),false);
    EndFormat;
    StartFormat(15);
    OutString(15,0,ForecastUserr.Development2,false);
    EndFormat;
    Gray_Divider(0,1);

    StartFormat(15);
    OutString(0,0,USetStr(13467),false);
    EndFormat;

    FindQTWithPriority(RepSpec.TransStr,RepSpec.sStartDate,RepSpec.sEndDate,"45",QT1r,QT2r,QT3r);
    StartFormat(15);
    OutString(15,0,USetStr(13471) & " " & USetStr(13469),false);
    EndFormat;
    if (QT1r.SerNr>0) then begin
      StartFormat(15);
      OutString(20,"DblQTVc",QT1r.SerNr,false);
      OutString(40,0,QT1r.Addr0,false);
      EndFormat;
    end;
    StartFormat(15);
    OutString(15,0,USetStr(13472) & " " & USetStr(13469),false);
    EndFormat;
    if (QT2r.SerNr>0) then begin
      StartFormat(15);
      OutString(20,"DblQTVc",QT2r.SerNr,false);
      OutString(40,0,QT2r.Addr0,false);
      EndFormat;
    end;

    StartFormat(15);
    OutString(15,0,USetStr(13473) & " " & USetStr(13469),false);
    EndFormat;
    if (QT3r.SerNr>0) then begin
      StartFormat(15);
      OutString(20,"DblQTVc",QT3r.SerNr,false);
      OutString(40,0,QT3r.Addr0,false);
      EndFormat;
    end;
    Gray_Divider(0,1);

    FindQTWithPriority(RepSpec.TransStr,RepSpec.sStartDate,RepSpec.sEndDate,"51",QT1r,QT2r,QT3r);

    StartFormat(15);
    EndFormat;
    StartFormat(15);
    OutString(0,0,USetStr(13468),false);
    EndFormat;    
    StartFormat(15);
    OutString(15,0,USetStr(13471) & " " & USetStr(13470),false);
    EndFormat;
    if (QT1r.SerNr>0) then begin
      StartFormat(15);
      OutString(20,"DblQTVc",QT1r.SerNr,false);
      OutString(40,0,QT1r.Addr0,false);
      EndFormat;
    end;    
    StartFormat(15);
    OutString(15,0,USetStr(13472) &  " " & USetStr(13470),false);
    EndFormat;
    if (QT2r.SerNr>0) then begin
      StartFormat(15);
      OutString(20,"DblQTVc",QT2r.SerNr,false);
      OutString(40,0,QT2r.Addr0,false);
      EndFormat;
    end;    
    StartFormat(15);
    OutString(15,0,USetStr(13473) & " " & USetStr(13470),false);
    EndFormat;
    if (QT3r.SerNr>0) then begin
      StartFormat(15);
      OutString(20,"DblQTVc",QT3r.SerNr,false);
      OutString(40,0,QT3r.Addr0,false);
      EndFormat;
    end;
    
    Gray_Divider(0,1);

  end;
LEND:;
  EndJob;
  RETURN;
END;

