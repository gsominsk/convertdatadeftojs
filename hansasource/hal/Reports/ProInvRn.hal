external function Boolean HasContactClassification();
external function Boolean HasCategories();
external procedure HTCustCat(string,var string);
external procedure HTCustClass(string,var string);
external function Boolean ContactInGroupClass(string,string,string,string,string,string);
external function roundmode DefaultRoundMode();
external function Boolean ProjectInvSugg4(record RcVc,record PRVc,Boolean,var val,var val);
external function Boolean ProjectInvSugg3(record RcVc,record PRVc,Boolean,var val,var val);
external procedure ActCUPSList(var record RcVc,string,Integer,Integer,string,string,Integer);
external procedure HTProjects(string,string,var string);
external procedure HTCusts(string, string, var string);
external procedure HTDetailLevel(Integer, var string);
external procedure HTPRClass(string, var string);

external procedure ProjectHeader(record RcVc,record PRVc,Integer);
external procedure PRSumDownPay(record PRVc,var val,var val,Date,var string,var Boolean);

external function Boolean ProjectInvSugg2(record RcVc,record PRVc,Boolean,var val,var val);
external updating function Boolean ProjectInvSugg(record RcVc,record PRVc,Boolean,var val,var val,var val,var val,var val,var val,var val);

external procedure PrintPRSpecStats(record ProjInfoRepVc,record PRVc,var val,var val,var val,var val,Boolean,var val);

procedure PrintSupplierRetentions(string project)
begin 
  record VEPRRetentionVc VEPRRetentionr;
  Boolean TrHs, test, firsth;
  record CUVc CUr;
  val tot,totinv;
  
  TrHs = true;
  VEPRRetentionr.PRCode = project;
  while LoopKey("PRCode",VEPRRetentionr,1,TrHs) begin
    if (VEPRRetentionr.PRCode<>project) then begin 
      TrHs = false;
    end;
    if (TrHs==true) then begin 
      if (firsth==false) then begin 
        firsth = true;
        Gray_Divider(0,1);
        StartFormat(15);
        OutString(0,0,USetStr(4877),false);
        OutString(120,0,USetStr(16405),false);
        OutString(200,0,USetStr(16406),false);
        OutString(350,0,USetStr(16407),true);
        OutString(450,0,USetStr(16408),true);
      end;
      StartFormat(15);
      OutString(120,0,VEPRRetentionr.VECode,false);
      CUr.Code = VEPRRetentionr.VECode;
      if ReadFirstMain(CUr,1,true) then begin 
        OutString(200,0,CUr.Name,false);
      end;
      OutVal(350,0,VEPRRetentionr.RetSum,M4Val,true);
      OutVal(450,0,VEPRRetentionr.RetInvd,M4Val,true);
      tot = tot + VEPRRetentionr.RetSum;
      totinv = totinv + VEPRRetentionr.RetInvd;
      EndFormat;
    end;
  end;
  if (firsth==true) then begin
    Gray_Divider(0,1);
    OutString(120,0,UsetStr(4837),false);
    OutVal(350,0,tot,M4Val,true);
    OutVal(450,0,totinv,M4Val,true);
    EndFormat;
  end;

  return;
end;  

  
  
procedure SumProjectInvable(record PRVc PRp,var val bp)
begin
  record PBVc PBr;
  record TBVc TBr;
  Boolean found;
 
  bp = blankval;
  TBr.Project = PRp.Code;
  found = true;
  while (LoopMain(TBr,1,found)) begin
    if (found) then begin
      if (PRp.Code<>TBr.Project) then begin 
        found = false;
      end;
    end;    
    if (found) then begin
      bp = bp + TBr.Sum;
    end;
  end;
  PBr.Project = PRp.Code;
  found = true;
  while (LoopMain(PBr,1,found)) begin
    if (PRp.Code<>PBr.Project) then begin 
      found = false;
    end;  
    if (found) then begin
      bp = bp + PBr.Sum;
    end;
  end;
  return;
end;  

global
procedure ProjectBudget(record PRVc PRp,record RcVc RepSpec)
begin
  record TBVc TBp;
  record PBVc PBp;
  Boolean found;
  Boolean prohead;
  Boolean bltest;
  
  Integer rwcnt,i;
  row TBVc tbrp;
  row PBVc pbrp;
  Boolean itemhead;
  val total;
  val sumbud,sumspent,suminvd;
  val totsumbud,totsumspent,totsuminvd;
  
  val bud;
  val spent;
  val invd;     
  
  val xval,totval;
  string 1 blstring;
  
  totsumbud = blankval;
  totsumspent = blankval;
  totsuminvd = blankval;
  prohead = false;
  total = blankval;
  
  if (RepSpec.flags[1] ==1) then begin  /* only with faktbart > 0 */
    SumProjectInvable(PRp,total);
    if (total==0) then begin 
      goto L99; 
    end;
  end;
  TBp.Project = PRp.Code;
  found = true;
  while (LoopMain(TBp,1,found)) begin
    if (found) then begin
      if (TBp.Project<>PRp.Code) then begin
         found = false;
      end;
    end;     
    if (found) then begin
      if (prohead==false) then begin
          StartFormat(15);
          OutString(0,0,USetStr(4841),false);
          EndFormat;
          Gray_Divider(0,1);
          ProjectHeader(RepSpec,PRp,0);
          prohead = true;
      end;
      itemhead = false;
      rwcnt = MatRowCnt(TBp);
      StartFormat(15);
      OutString(11,0,TBp.Item,false);
      OutString(80,0,TBp.Desc,false);
      OutString(300,0,USetStr(4838) & TBp.Estimate,false);
      OutVal(480,0,TBp.Value,M4Val,true);
      EndFormat;
      StartFormat(15);
      OutString(90,0,USetStr(4830),false);
      OutString(150,0,USetStr(4833),true);
      OutString(210,0,USetStr(4826),true);
      OutString(250,0,USetStr(4845),true);
      OutString(310,0,USetStr(4828),true);
      OutString(420,0,USetStr(4846),true);
      EndFormat;
      sumbud   = blankval;
      sumspent = blankval;
      suminvd  = blankval;
      total = total+ TBp.Value;
      for (i=0;i<rwcnt;i=i+1) begin
         MatRowGet(TBp,i,tbrp);
        //nk  flags[6] is misssed in the selection window
        if (RepSpec.flags[6]==0) then begin
          bud   = tbrp.BudQty;
          spent = tbrp.SpentQty;
          invd  = tbrp.InvoicedQty;
        end else begin
          bud   = Round(tbrp.BudQty * tbrp.Price,DefaultRoundMode);
          spent = Round(tbrp.SpentQty * tbrp.Price,DefaultRoundMode);
          invd  = Round(tbrp.InvoicedQty * tbrp.Price,DefaultRoundMode);
        end;
        sumbud   = sumbud + bud;
        sumspent = sumspent + spent;
        invd     = suminvd + invd;
        StartFormat(15);
        OutString(90,0,tbrp.Person,false);
        OutVal(150,0,bud,M4UVal,true);
        OutVal(210,0,spent,M4UVal,true);
        OutVal(250,0,invd,M4UVal,true);
        OutVal(310,0,tbrp.MarkupQty,M4UVal,true);
        OutVal(420,0,tbrp.Price,M4Val,true);
        EndFormat;
      end; 
      if (RepSpec.flags[6]==1) then begin
        Black_Divider(110,250);
        StartFormat(15);
        OutVal(150,0,sumbud,M4UVal,true);
        OutVal(210,0,sumspent,M4UVal,true);
        OutVal(250,0,suminvd,M4UVal,true);
        EndFormat;
      end;
      totsumbud = totsumbud + sumbud;
      totsumspent = totsumspent + sumspent;
      totsuminvd = totsuminvd  + suminvd;
      StartFormat(10);
      EndFormat;
    end;
  end;

  /* same for PB */
  PBp.Project = PRp.Code;
  found = true;
  while (LoopMain(PBp,1,found)) begin
    if (PBp.Project<>PRp.Code) then begin
      found = false;
    end;  
    if (found) then begin
      if (prohead==false) then begin
        ProjectHeader(RepSpec,PRp,0);
        prohead = true;
      end;
      itemhead = false;
      rwcnt = MatRowCnt(PBp);
      StartFormat(15);
      OutString(11,0,PBp.Item,false);
      Outstring(80,0,PBp.Desc,false);
      OutString(300,0,USetStr(4838) & PBp.Estimate,false);
      OutVal(480,0,PBp.Value,M4Val,true);
      EndFormat;
      sumbud   = blankval;
      sumspent = blankval;
      suminvd  = blankval;
      total = total+ TBp.Value;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(PBp,i,pbrp);
        if (RepSpec.flags[6]==0) then begin
          bud = pbrp.BudQty;
          spent = pbrp.SpentQty;
          invd = Round(pbrp.Invoiced/pbrp.Price,DefaultRoundMode);
        end else begin
          bud = Round(pbrp.Price * pbrp.BudQty,DefaultRoundMode);
          spent = Round(pbrp.Price * pbrp.SpentQty,DefaultRoundMode);
          invd = pbrp.Invoiced;
        end;      
        sumbud = sumbud + bud;
        sumspent = sumspent + spent;
        suminvd = suminvd + invd;
        StartFormat(15);
        OutString(90,0,pbrp.Descr,false);
        OutVal(150,0,bud,M4UVal,true);
        OutVal(210,0,spent,M4UVal,true);
        if (RepSpec.flags[6]==1) then begin
          OutVal(250,0,invd,M4UVal,true);
        end;
        OutVal(310,0,pbrp.Markup,M4Val,true);
        OutVal(420,0,pbrp.Price,M4UVal,true);
        EndFormat;
      end;
      totsumbud = totsumbud + sumbud;
      totsumspent = totsumspent + sumspent;
      totsuminvd = totsuminvd + suminvd;
      if (RepSpec.flags[6]==1) then begin
        Black_Divider(110,250);
        StartFormat(15);
        OutVal(150,0,sumbud,M4UVal,true);
        OutVal(210,0,sumspent,M4UVal,true);
        if (RepSpec.flags[6]==1) then begin
          OutVal(250,0,suminvd,M4UVal,true);
        end;
        EndFormat;
      end;
      StartFormat(10);
      EndFormat;
    end;
  end;
  if (prohead==true) then begin
    if (RepSpec.flags[6]==1) then begin
      Black_Divider(110,480);
    end else begin
      Black_Divider(300,480);
    end;  
    StartFormat(15);
    OutString(0,0,USetStr(4837),false);
    if (RepSpec.flags[6]==1) then begin
        OutVal(150,0,totsumbud,M4UVal,true);
        OutVal(210,0,totsumspent,M4UVal,true);
        OutVal(250,0,totsuminvd,M4UVal,true);
    end;
    OutVal(480,0,total,M4Val,true);
    EndFormat;
    Black_Divider(0,1);
    StartFormat(15);
    /* total fšrskottsfakturerbart */
    PRSumDownPay(PRp,xval,totval,CurrentDate,blstring,bltest);
    xval = xval - PRp.DownPaySent;
    OutString(200,0,USetStr(4848),false);
    OutVal(480,0,xval,M4Val,true);
    EndFormat;
    StartFormat(15);
   
    /* total fšrskotssfakturerat */
    //AddM4Val(&PRp->DownPaySent,&PRp->DownPayRedcd,&val);
    PRp.DownPaySent = PRp.DownPayRedcd + xval;
    OutString(200,0,USetStr(4847),false);
    OutVal(480,0,xval,M4Val,true);
    EndFormat;
   
    Black_Divider(0,1);
    StartFormat(20);
    EndFormat;
  end;
L99:;
return;
end;

procedure PrintProjectInvoices(string prcode)
begin
  record IVVc IVr;
  record ARVc ARr;
  record ProjInfoRepVc ProjInfoRepr;
  Boolean found,testf;
  Boolean prf;
  val totinv, totinv2,open;
  Integer ivnr;
  
  found = true;
  testf = true;
  prf = false;
  IVr.PRCode= prcode;
  IVr.SerNr = -1;
  ivnr = 0;
  ProjInfoRepr.Signature = CurrentUser;
  if (ReadFirstMain(ProjInfoRepr,1,true)) then begin
    if (ProjInfoRepr.InvoiceActive!=0) then begin
      while (LoopKey("PRCode",IVr,2,found)) begin
        if (IVr.PRCode<>prcode) then begin 
          found = false;
        end;
        if (IVr.OKFlag==0 and ProjInfoRepr.NotOKVI==0) then begin
          testf = false;
        end;
        if (ProjInfoRepr.InvoiceCount<=ivnr) then begin
          found = false;
        end;
        if (found and testf) then begin
          if (prf==false) then begin
            StartFormat(15);
            OutString(0,0,USetStr(3249),false);
            EndFormat;
            Black_Divider(0,1);
            StartFormat(15);
            OutString(20,0,USetStr(34452),false);
            OutString(100,0,USetStr(6763),false);
            OutString(280,0,USetStr(7297),true);
            OutString(390,0,USetStr(7293),true);
            OutString(1,0,USetStr(6776),true);
            EndFormat;
            prf = true;
          end;
          StartFormat(15);
          OutLongIntOvst(20,"DblCustPS2",IVr.SerNr,false,IVr.Invalid);
          if (IVr.InvType!=kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales) then begin 
            OutDateOvst(100,0,IVr.TransDate,false,IVr.Invalid);
            OutValOvst(280,0,IVr.Sum1,M4Val,true,IVr.Invalid);
            OutValOvst(390,0,IVr.Sum4,M4Val,true,IVr.Invalid);
            if (IVr.Invalid==0) then begin
              totinv = totinv + IVr.Sum1;
              totinv2 = totinv2 + IVr.Sum4;
            end;
          end;
          if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
            OutStringOvst(70,0,USetStr(7345),false,IVr.Invalid);
            OutDateOvst(100,0,IVr.TransDate,false,IVr.Invalid);
            OutValOvst(280,0,-IVr.Sum1,M4Val,true,IVr.Invalid);
            OutValOvst(390,0,-IVr.Sum4,M4Val,true,IVr.Invalid);
            if (IVr.Invalid==0) then begin
              totinv = totinv - IVr.Sum1;
              totinv2 = totinv2 - IVr.Sum4;
            end;
          end;
          ARr.InvoiceNr = IVr.SerNr;
          if (ReadFirstMain(ARr,1,true)) then begin
            OutVal(1,0,ARr.RVal,M4Val,true);
          end;
          open = open + ARr.RVal;
          EndFormat;
          ivnr = ivnr + 1;
        end;
      end;
      Gray_Divider(0,1);
       StartFormat(15);
      OutString(0,0,USetStr(6803),false);
      OutVal(280,0,totinv,M4Val,true);
      OutVal(390,0,totinv2,M4Val,true);
      OutVal(1,0,open,M4Val,true);
      EndFormat;
      Black_Divider(0,1);
      StartFormat(15);
      EndFormat;
    end;
  end;
  
  return;
end;

procedure PRStatusLines(record ProjInfoRepVc ProjInfoRepr,record PRVc PRr,var val tbudgetp,var val tdiffp,var val tinvoicedp,var val tinvablep,var val tnotdone,var val totcostp)
begin
  val budget,invable,invoiced,diff,notdone;

  if (ProjInfoRepr.AmountorQty==0) then begin
    PrintPRSpecStats(ProjInfoRepr,PRr,budget,invoiced,invable,notdone,true,totcostp);
  end else begin
    PrintPRSpecStats(ProjInfoRepr,PRr,budget,invoiced,invable,notdone,false,totcostp);
  end;
  if (ProjInfoRepr.FunctionType==3) then begin
    diff = invable;
  end else begin
    diff = invoiced + invable;
  end;
  diff = diff - budget;
  if (ProjInfoRepr.FunctionType==0) then begin diff = -diff; end;
  tbudgetp = tbudgetp + budget;
  tinvoicedp = tinvoicedp + invoiced;
  tinvablep = tinvablep + invable;
  tnotdone = tnotdone + notdone;
  tdiffp = tdiffp + diff;
  
  return;
end;

procedure PrintPRStatus(string prcode)
begin
  record ProjInfoRepVc ProjInfoRepr;
  record PRVc PRr;
  Boolean found;
  val tbudget,tinvable,tinvoiced,tdiff,tnotdone,tcost;
  
  ProjInfoRepr.Signature = CurrentUser;
  ReadFirstMain(ProjInfoRepr,1,true);
  StartFormat(15);
  OutString(0,0,USetStr(6820),false);
  EndFormat;
  Black_Divider(0,1);
  if (ProjInfoRepr.AmountinCurrency==0) then begin
    SetRepCol(9,480);
  end else begin
    SetRepCol(9,465);
  end;
  StartFormat(15);
  if (ProjInfoRepr.FunctionType==3) then begin
    OutString(240,0,USetStr(6828),true);
  end else begin 
    if (ProjInfoRepr.NotOKAct==1) then begin 
      OutString(220,0,USetStr(6829),true);
    end;  
    OutString(270,0,USetStr(6823),true);
  end;
  OutString(320,0,USetStr(6822),true);
  if (ProjInfoRepr.FunctionType!=1) then begin
    OutString(400,0,USetStr(6824),true);
  end else begin
    OutString(400,0,USetStr(6826),true);
  end;
  if (ProjInfoRepr.FunctionType==2) then begin
    OutString(9,0,USetStr(6825),true);
  end else begin
    if (ProjInfoRepr.CostType==0) then begin
      OutString(9,0,USetStr(6825),true);
    end else begin
      OutString(9,0,USetStr(6826),true);      
    end;
  end;  
  EndFormat;
  PRr.Code = prcode;
  found = true;
  while (LoopKey("Code",PRr,1,found)) begin
    if (found) then begin
      PRStatusLines(ProjInfoRepr,PRr,tbudget,tdiff,tinvoiced,tinvable,tnotdone,tcost);
      goto L11;
    end;
  end;
L11:;
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(15,0,"",false);
  OutString(80,0,"",false);
  if (ProjInfoRepr.AmountinCurrency==1) then begin
    OutString(86,0,USetStr(6778),false);
  end else begin 
    OutString(170,0,USetStr(6797),true);
  end;  
  if (ProjInfoRepr.NotOKAct==1) then begin 
    OutVal(220,0,tnotdone,M4Val,true);
    tdiff = tdiff - tnotdone;
  end;  
  OutVal(270,0,tinvable,M4Val,true);
  OutVal(320,0,tinvoiced,M4Val,true);
  OutVal(400,0,tbudget,M4Val,true);
  if (ProjInfoRepr.FunctionType==2) then begin
    tdiff = tinvable + tinvoiced;
    OutVal(9,0,tdiff,M4Val,true);
  end else begin
    if (ProjInfoRepr.CostType==1) then begin
      OutVal(9,0,tcost,M4Val,true);  
    end else begin
      OutVal(9,0,tdiff,M4Val,true);
    end;
  end;    
  EndFormat;
  Black_Divider(0,1);
  StartFormat(15);
  EndFormat;
  return;
end;

procedure PrintPRDownpaymentsNRetentions(string prcode)
begin
  record ProjInfoRepVc ProjInfoRepr;
  record PRVC PRr;
  row PRVC PRrw;
  Integer i,rwcnt, arrcntD, arrcntR;
  Array string 255 aPRStageD, aPlanDateD, aInvNrD, aValStrD, aPersonD, aCommentD;
  Array string 255 aPRStageR, aPlanDateR, aInvNrR, aValStrR, aPersonR, aCommentR;
  Array Integer aInvFlagD, aInvFlagR;
  string 255 status;
  
  arrcntD = 0;
  arrcntR = 0;
  rwcnt = 0;
  PRr.Code = prcode;
  if (ReadFirstMain(PRr,1,true)) then begin
    ProjInfoRepr.Signature = CurrentUser;
    if (ReadFirstMain(ProjInfoRepr,1,true)) then begin
      if (ProjInfoRepr.Downpayment!=0 or ProjInfoRepr.Retention!=0) then begin
        rwcnt = MatRowCnt(PRr);
        if (rwcnt==0) then begin
          goto LEnd;
        end;
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(PRr,i,PRrw);
          switch (PRrw.RowType) begin
            case 0:
              if (ProjInfoRepr.Downpayment==1) then begin
                aPRStageD[arrcntD] = PRrw.PRStage;
                aPlanDateD[arrcntD] = PRrw.PlanDate;
                aInvNrD[arrcntD] = PRrw.InvNr;
                aValStrD[arrcntD] = PRrw.ValStr;
                aPersonD[arrcntD] = PRrw.Person;
                aCommentD[arrcntD] = PRrw.Comment;
                aInvFlagD[arrcntD] = PRrw.InvFlag;
                arrcntD = arrcntD + 1;
              end;
            case 1:
              if (ProjInfoRepr.Retention==1) then begin
                aPRStageR[arrcntR] = PRrw.PRStage;
                aPlanDateR[arrcntR] = PRrw.PlanDate;
                aInvNrR[arrcntR] = PRrw.InvNr;
                aValStrR[arrcntR] = PRrw.ValStr;
                aPersonR[arrcntR] = PRrw.Person;
                aCommentR[arrcntR] = PRrw.Comment;
                aInvFlagR[arrcntR] = PRrw.InvFlag;
                arrcntR = arrcntR + 1;
              end;
          end;
        end;
      end;
    end;
  end;
  if (arrcntD>0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(34450),false);
    EndFormat;
    Black_Divider(0,1);
    StartFormat(15);
    OutString(20,0,USetStr(34452),false);
    OutString(100,0,USetStr(34451),false);
    OutString(150,0,USetStr(34454),false);
    OutString(210,0,USetStr(34456),false);
    OutString(280,0,USetStr(34455),false);
    OutString(480,0,USetStr(34453),true);
    EndFormat;
    for (i=0;i<arrcntD;i=i+1) begin
      Gray_Divider(0,1);
      StartFormat(15);
      OutString(20,"DblIVVc",aInvNrD[i],false);
      OutString(100,0,aPlanDateD[i],false);
      OutString(150,0,aPersonD[i],false);
      status = StringFromSet(33,aInvFlagR[i]);
      OutString(210,0,status,false);
      OutString(280,0,aCommentD[i],false);
      OutString(480,0,aValStrD[i],true);
      EndFormat;
    end;
    Black_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;
  if (arrcntR>0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(34457),false);
    EndFormat;
    Black_Divider(0,1);
    StartFormat(15);
    OutString(20,0,USetStr(34452),false);
    OutString(100,0,USetStr(34451),false);
    OutString(150,0,USetStr(34454),false);
    OutString(210,0,USetStr(34456),false);
    OutString(280,0,USetStr(34455),false);
    OutString(480,0,USetStr(34453),true);
    EndFormat;
    for (i=0;i<arrcntR;i=i+1) begin
      Gray_Divider(0,1);
      StartFormat(15);
      OutString(20,"DblIVVc",aInvNrR[i],false);
      OutString(100,0,aPlanDateR[i],false);
      OutString(150,0,aPersonR[i],false);
      status = StringFromSet(33,aInvFlagR[i]);
      OutString(210,0,status,false);
      OutString(280,0,aCommentR[i],false);
      OutString(480,0,aValStrR[i],true);
      EndFormat;
    end;
    Black_Divider(0,1);
    StartFormat(15);
    EndFormat;
LEnd:;
  end;
  return;
end;

procedure PrintPRQT(string prcode)
begin
  record QTVc QTp;
  record ProjInfoRepVc ProjInfoRepr;
  Boolean foundf,firstf,testf;
  val t;
  Integer qtnr;
  
  t = blankval;
  firstf = true;
  foundf = true;
  testf = true;
  qtnr = 0;
  QTp.PRCode = prcode;
  ProjInfoRepr.Signature = CurrentUser;
  if (ReadFirstMain(ProjInfoRepr,1,true)) then begin
    if (ProjInfoRepr.Quotations==0) then begin
      foundf = false;
    end;
    while (LoopKey("PRCode",QTp,1,foundf)) begin
      if (nonblank(ProjInfoRepr.QuoteClass)) then begin
        if (QTp.QuoteClass!=ProjInfoRepr.QuoteClass) then begin
          testf = false;
        end;
      end;
      if (qtnr>=ProjInfoRepr.NrOfQT) then begin
        foundf = false;
      end;  
      if (testf and foundf) then begin
        if (firstf) then begin
          StartFormat(15);
          OutString(0,0,USetStr(8209),false);
          EndFormat;
          Black_Divider(0,1);
          StartFormat(15);
          OutString(20,0,USetStr(8316),false);
          OutString(100,0,USetStr(11047),false);
          OutString(170,0,USetStr(7112),false);
          OutString(250,0,USetStr(11008),false);
           OutString(350,0,"",false);
          OutString(480,0,USetStr(11079),true);
          EndFormat;
          Gray_Divider(0,1);
          firstf = false;
        end;
        if (QTp.PRCode <> prcode) then begin
          foundf = false;
        end;
        if foundf then begin
          t = blankval;  
          StartFormat(15);
          OutString(20,"DblQTVc",QTp.SerNr,false);
          OutDate(100,0,QTp.QTDate,false);
          OutString(170,0,QTp.QuoteClass,false);
          t = t + QTp.SumTime;
          t = t + QTp.SumOther;
          t = t + QTp.SumStocked;
          t = t + QTp.SumMaterial;
          switch (QTp.Rejected) begin
            case 0:
            OutString(250,0,USetStr(8324),false);
            case 1:
            OutString(250,0,USetStr(11014),false);
            case 2:
            OutString(250,0,USetStr(11013),false);
          end;
          OutDate(350,0,QTp.RejectDate,false);
          OutVal(480,0,t,M4Val,true);
          EndFormat;
          qtnr = qtnr + 1;
        end;
      end;     
    end;
  end;
  if (firstf==false) then begin
    Black_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;
  return;
end;

procedure PrintPRActivities(record RcVc RepSpec)
begin
  record PRVc PRr;
  record ProjInfoRepVc ProjInfoRepr;
  Integer nrofact;
  record ActVc Actr;

  PRr.Code = RepSpec.f1;
  if (ReadFirstMain(PRr,1,true)) then begin
    ProjInfoRepr.Signature = CurrentUser;
    if (ReadFirstMain(ProjInfoRepr,1,true)) then begin
      if (ProjInfoRepr.NrOfAct<=0) then begin
        nrofact = -1;
      end else begin
        nrofact = ProjInfoRepr.NrOfAct;
      end;
      if (ProjInfoRepr.Activities!=0) then begin
        ActCUPSList(RepSpec,PRr.CustCode,nrofact,ProjInfoRepr.NotDoneAct,"",PRr.Code,0);
      end;
    end;    
  end;
return;
end;

global 
updating procedure ProInvRn(record RcVc RepSpec)
begin
  record PRVc PRp;
  record PRVc PR2p;
  record ProjInfoRepVc ProjInfoRepr;
  Boolean testf,found;
  string 20 frpr,topr;
  string 255 frcu,tocu;
  string 255 tstr;
  string 255 ckey;
  Integer keys;
  val totsum,totbudg;
  val tottb,totbudg2,totpb,totinvd,dpinvbl,dpinvd,totact;
  Integer rw;
  Boolean firstf;
  Boolean printedf;
  Boolean printProjInv;
  
  rw = 1;
  firstf = true;
  printedf = false;
  printProjInv = true;

  frpr = FirstInRange(RepSpec.f1,20);
  topr = LastInRange(RepSpec.f1,20);
  
  frcu = FirstInRange(RepSpec.f3,20);
  tocu = LastInRange(RepSpec.f3,20);
   
  if (RepSpec.flags[29]!=0) then begin
    StartReportJob(USetStr(4896));
  end else begin
    StartReportJob(USetStr(4821));
  end;
  HTProjects(frpr,topr,tstr);
  Header(rw,tstr,1);
  rw = rw +1;
  if (nonblank(RepSpec.f2)) then begin
    tstr = USetStr(4849) & " " & RepSpec.f2;
    Header(rw,tstr,1);
    rw = rw +1;
  end;
  HTCusts(frcu,tocu,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  ProjInfoRepr.Signature = CurrentUser;
  ReadFirstMain(ProjInfoRepr,1,true);
  if (RepSpec.flags[29]!=0) then begin
    keys = ProjInfoRepr.DefArtMode;
  end else begin
    keys = RepSpec.flags[10];
  end;
  if (keys==2) then begin 
    keys = 0;
  end;
  HTDetailLevel(keys,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;  
  HTPRClass(RepSpec.FirstAcc,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;  
  if (HasCategories) then begin
    HTCustCat(RepSpec.f5,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasContactClassification) then begin
    HTCustClass(RepSpec.f4,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  EndHeader;
  
  if (RepSpec.flags[29]!=0) then begin
    PrintPRStatus(RepSpec.f1);
  end;
  
  if (RepSpec.flags[29]!=0) then begin
    if (ProjInfoRepr.InclProjectInvoicing!=1) then begin
      printProjInv = false;
    end;
  end;
  if (printProjInv) then begin
    StartFormat(15);
    OutString(0,0,USetStr(4821),false);
    EndFormat;
    Black_Divider(0,1);
    StartFormat(15);
    OutString(480,"DblOpenProjMnWn",USetStr(34080),true);
    EndFormat;
  
    switch (RepSpec.flags[8]) begin
      case 0:
        PRp.Code = frpr;
        ckey = "Code";
        keys = 1;
      case 1:
        PRp.Leader = RepSpec.f2;
        PRp.Code = frpr;
        ckey = "PRLeader";
        keys = 2;
      case 2:
        PRp.CustCode = frcu;
        ckey = "CustCode";
        keys = 1;
      case 3:
        PRp.PRClass = RepSpec.FirstAcc;
        ckey = "PRClass";
        keys = 1;
    end;
  
    found = true;
    while (LoopKey(ckey, PRp,keys,found)) begin
      if (found) then begin
        switch (RepSpec.flags[8]) begin
          case 0:
            if ((nonblank(topr)) and (PRp.Code>topr)) then begin
              found = false;
            end;
          case 2:
            if ((nonblank(tocu)) and (PRp.CustCode>tocu)) then begin
              found = false;
           end;
        end;
      end;
      if (found) then begin
        testf = true;
        switch (RepSpec.flags[8]) begin
          case 1:
            if nonblank(RepSpec.f1) then begin
              if (PRp.Code<frpr) or (PRp.Code>topr) then begin
                testf = false;
              end;
            end;  
          case 2:
            if nonblank(RepSpec.f1) then begin
              if (PRp.Code<frpr) or (PRp.Code>topr) then begin
                testf = false;
              end;
            end;  
          case 3:
            if nonblank(RepSpec.f1) then begin
              if (PRp.Code<frpr) or (PRp.Code>topr) then begin
                testf = false;
              end;
            end;  
        end;
        switch (RepSpec.flags[8]) begin
          case 2:
            if (nonblank(frcu)) then begin
              if (PRp.CustCode<frcu) then begin found = false; end;
            end;    
            if (nonblank(tocu)) then begin
              if (PRp.CustCode>tocu) then begin found = false; end;
            end;  
          otherwise
            if (nonblank(frcu)) then begin
              if (PRp.CustCode<frcu) then begin testf = false; end;
            end;    
            if (nonblank(tocu)) then begin
              if (PRp.CustCode>tocu) then begin testf = false; end;
            end;  
        end;  
        if (testf) then begin
          testf = ContactInGroupClass(PRp.CustCode,RepSpec.f5,RepSpec.f4,"CUST","","");
        end;
        if (nonblank(RepSpec.ObjStr)) then begin
          if (PRp.Objects!=RepSpec.ObjStr) then begin testf = false; end;
        end;
        if (RepSpec.flags[1]!=0) then begin
          if (PRp.StopInvoicing==1) then begin testf = false; end;
        end;
        if (RepSpec.flags[14]==0) then begin
          if (PRp.Terminated==1) then begin testf = false;  end;
        end;  
        if (nonblank(RepSpec.FirstAcc) and (RepSpec.FirstAcc<>PRp.PRClass)) then begin testf = false; end;
        if (nonblank(RepSpec.f2)) then begin
          if (RepSpec.f2 <> PRp.Leader) then begin
            if (RepSpec.flags[8]==1) then begin
              found = false;
            end else begin
              testf = false;
            end;  
          end;
        end;      
        if (found==false) then begin testf = false; end;
    
        if (testf) then begin
          RecordCopy(PR2p,PRp);
          if ((firstf==false) and (printedf)) then begin
            StartFormat(15);
            EndFormat;
            Black_Divider(0,1);
            StartFormat(15);
            EndFormat;
          end;
          firstf = false;
          printedf = false;
          if (RepSpec.flags[2]==0) then begin
            ProjectBudget(PRp,RepSpec); 
          end;
          if (RepSpec.flags[3]==1) then begin   
            testf = true;
            if (nonblankdate(PRp.NoInvBefore)) then begin
              if (nonblankdate(RepSpec.d1)) then begin
                //if (DateComp(&PRp.NoInvBefore,&RepSpec.d1)>0) then begin testf = false; end;
                if (PRp.NoInvBefore>RepSpec.d1) then begin testf = false; end;
              end else begin
                //if (DateComp(&PRp.NoInvBefore,&CurrentDate)>0) then begin testf = false; end;
                if (PRp.NoInvBefore>CurrentDate) then begin testf = false; end;
              end;
            end;
            if (testf) then begin
              if (RepSpec.flags[29]!=0) then begin
                switch (ProjInfoRepr.DefArtMode) begin
                  case 0: printedf = ProjectInvSugg2(RepSpec,PRp,true,totsum,totbudg); //overview
                  case 1: printedf = ProjectInvSugg3(RepSpec,PRp,true,totsum,totbudg); //detailed - same as overview
                  case 2: printedf = ProjectInvSugg4(RepSpec,PRp,true,totsum,totbudg); //employee
                end;
              end else begin
                switch (RepSpec.flags[10]) begin
                  case 0: printedf = ProjectInvSugg2(RepSpec,PRp,true,totsum,totbudg); //overview
                  case 1: printedf = ProjectInvSugg3(RepSpec,PRp,true,totsum,totbudg); //detailed - same as overview
                  case 2: printedf = ProjectInvSugg4(RepSpec,PRp,true,totsum,totbudg); //employee
                end;
              end;
            end;
          end;
          if (RepSpec.flags[4]==1) then begin
            testf = true;
            if (nonblankdate(PRp.NoInvBefore)) then begin
              if (PRp.NoInvBefore>CurrentDate) then begin
                testf = false;
              end;
            end;
            if (testf) then begin
              RecordCopy(PR2p,PRp);
              printedf = ProjectInvSugg(RepSpec,PRp,false,tottb,totbudg2,totpb,totinvd,dpinvbl,dpinvd,totact);
            end;
          end;
        end;
      end;
    end;
    if (RepSpec.flags[4]==1) then begin
  //    tottb = totpb + totsum; this must be wrong, it is supposed to be time only
    end;
    if (totsum<>0) then begin
      StartFormat(15);
      EndFormat;
      if ((RepSpec.flags[3]==1) and (RepSpec.flags[4]==0)) then begin
        StartFormat(15);
        OutString(120,0,USetStr(6798),false);
        if (totsum<0) then begin totsum = 0; end;
        OutVal(350,0,totsum,M4Val,true);
        OutVal(450,0,totbudg,M4Val,true);
        EndFormat;
      end; 
      if (RepSpec.flags[4]==1) then begin
  //      tottb = totpb + totsum; this must be wrong, it is supposed to be time only
        totsum = totsum + totact;
        StartFormat(15);
        OutString(20,0,USetStr(6797),false);
        EndFormat;
        Black_Divider(20,450);
        StartFormat(15);
        OutString(20,0,USetStr(5520),false);
        OutVal(200,0,tottb,M4Val,true);
        OutString(250,0,USetStr(4825),false);
        OutVal(450,0,totbudg2,M4Val,true);
        EndFormat;
        StartFormat(15);
        OutString(20,0,USetStr(5521),false);
        OutVal(200,0,totpb,M4Val,true);
        OutString(250,0,USetStr(4827),false);
        OutVal(450,0,totinvd,M4Val,true);
        EndFormat;
  /*      activities == time
        StartFormat(15);
        OutString(20,0,USetStr(5524),false);
        OutVal(200,0,totact,M4Val,true);
        OutString(250,0,USetStr(4848),false);
        OutVal(450,0,dpinvbl,M4Val,true);
        EndFormat;
  */      
        StartFormat(15);
        OutString(20,0,USetStr(4837),false);
        OutVal(200,0,totsum,M4Val,true);
        OutString(250,0,USetStr(4847),false);
        OutVal(450,0,dpinvd,M4Val,true);
        EndFormat;
      end;

    end;
    StartFormat(15);
    OutString(250,0,USetStr(4873),false);
    OutVal(450,0,PRp.MaxRetSum,M4Val,true);
    EndFormat;
    StartFormat(15);
    OutString(250,0,USetStr(4875),false);
    OutVal(450,0,PRp.RetSum,M4Val,true);
    EndFormat;
    OutString(250,0,USetStr(4874),false);
    OutVal(450,0,PRp.RetInvd,M4Val,true);
    EndFormat;
    OutString(250,0,USetStr(4876),false);
    OutVal(450,0,PRp.RetSum - PRp.RetInvd,M4Val,true);
    EndFormat;
    Black_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;
  if (RepSpec.flags[29]!=1) then begin
    PrintSupplierRetentions(PRp.Code);
  end;
 // from Special menu
 if (RepSpec.flags[29]==1) then begin
    PrintPRDownpaymentsNRetentions(RepSpec.f1);
    PrintPRQT(RepSpec.f1);
    PrintProjectInvoices(RepSpec.f1);
    PrintPRActivities(RepSpec);
  end; 
  EndJob;
  return;
end; 
