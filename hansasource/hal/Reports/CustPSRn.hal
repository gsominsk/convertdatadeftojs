external function Boolean HasContactClassification();
external function Boolean HasCategories();
external procedure HTCustClass(string,var string);
external function Boolean ContactInGroupClass(string,string,string,string,string,string);
external function Boolean HasModSL();
external procedure GetOnAccBalance(record RcVc,string,string,Boolean,Integer,var val,var val,var val,var val,var val,var val,var val,record SMVc,
                   Array string,Array val,var Integer);
external procedure PrintCOCUService(record COCUServiceVc,Integer,Integer,Integer,Integer,var val,var val,var val);
external function LongInt DateDiff(Date,Date);
external function Boolean MergeOtherContracts(var record COVc);
external procedure CustPSCustomersDetails(record RcVc,Integer,record CUVc,Boolean,Boolean);
external procedure RunCustPS2Rn(var record RcVc,record CustPSVc);
external procedure BeginCurncyTotals(var Integer);
external procedure HTCusts(string,string,var string);
external procedure HTCustCat(string,var string);
external procedure HTInvFrom(Integer,Integer, Date, var string);
external procedure PSPrintCust(record RcVc,record CUVc,var val,var val,Integer,Integer);
external function Boolean FindTheContract(Boolean,Integer,LongInt,LongInt,var record COVc,var Boolean,var Integer);

global
procedure PrintCustCourseEvents(string custcode)
begin
  record CourseEventVc CEr;
  Boolean found,firstf;
  
  firstf = true;
  found = true;
  while (LoopKey("CustCode:" & custcode,CEr,1,found)) begin
    if (found) then begin
      if (firstf) then begin
        StartFormat(15);
        EndFormat;
        StartFormat(15);
        OutString(0,0,"Course Events",false);
        EndFormat;
        Gray_Divider(0,80);
        firstf = false;
      end;
      StartFormat(15);
      OutString(15,"DblCourseEventVc",CEr.SerNr,false);
      OutString(100,0,CEr.CourseCode,false);
      OutString(200,0,CEr.CourseName,false);
      EndFormat;
    end;
  end;
  return;
end;

procedure CheckAndPrint(Integer onoroff,string thetext,var Integer thepos)
begin
  if (onoroff!=0) then begin
    if (thepos==0) then begin
      StartFormat(15);
      OutString(0,0,thetext & " is Checked",false);
      thepos = thepos + 1;
    end else begin
      OutString(240,0,thetext & " is Checked",false);
      thepos = thepos - 1;
      EndFormat;
    end;
  end;
  return;
end;

procedure PrintLongInfo(string firststr,LongInt v1,string secondstr,LongInt v2)
begin
  string 20 v1str,v2str;
  
  if (v1>0) then begin
    v1str = "" & v1;
  end else begin
    v1str = "";
  end;
  if (v2>0) then begin
    v2str = "" & v2;
  end else begin
    v2str = "";
  end;
  StartFormat(15);
  OutString(0,0,firststr & " " & v1str,false);
  OutString(240,0,secondstr & " " & v2str,false);
  EndFormat;
  return;
end;

procedure PrintCustSystemUsage(string cusel)
begin
  string 255 fromcu,tocu;
  record CUVc CUr;
  record CustContModuleVc COMr;
  Boolean foundf;
  string 200 tstr;
  Integer thepos;

  fromcu = FirstInRange(cusel,20);
  tocu = LastInRange(cusel,20);
  if (nonblank(fromcu)) then begin
    if (fromcu==tocu) then begin
      CUr.Code = fromcu;
      if (ReadFirstMain(CUr,1,true)) then begin
        COMr.CustCode = CUr.Code;
        foundf = true;
        while (LoopMain(COMr,1,foundf)) begin
          if (COMr.CustCode!=CUr.Code) then begin
            foundf = false;
          end;
          if (foundf) then begin
            OutString(0,0,"Contract Number: " & COMr.ContractNr,false);
            switch (COMr.ProgType) begin
              case typFinancials: tstr = "Hansa Financials";
              case typClassic: tstr = "Hansa Classic";
              case typProfessional: tstr = "Hansa Professional";
              case typHansaRaama: tstr = "HansaRaama";
              case typBooks: tstr = "Books";
              case typBooksPro: tstr = "Books Professional";
              case typBooksProAdv: tstr = "Books Professional Advanced";
              case typBooksJobCost: tstr = "Books Job Costing";
              case typBooksAcc: tstr = "Books Accounting";
              case typBooksPOS: tstr = "Books POS";
              case typFirstOffice: tstr = "FirstOffice";
              case typFirstOfficePro: tstr = "typFirstOfficePro";
              case typClassicLit: tstr = "Hansa Classic Lithuania";
              case typRiigiTarkvara: tstr = "HansaRiigitarkvara";
              case typOffice2: tstr = "Office/2";
              case typOffice2TB: tstr = "Office/2 Time Billing";
              case typFirstOfficeSmall: tstr = "FirstOffice Small/Mini";
              case typFirstOfficeCurrency: tstr = "FirstOffice Currency";
              case typFirstContact: tstr = "Hansa World CRM";
              case typOffLine: tstr = "OffLine";
              case typFirstOfficeASP: tstr = "FirstOffice ASP";
              case typHansaWorld: tstr = "HansaWorld";
              case typRussianStandard: tstr = "RussianStandard";
              case typHansaWorldSMB: tstr = "HansaWorld SMB";
              case typCRMBasic: tstr = "HansaWorld CRM Basic";
              case typTravellingSalesman: tstr = "Mobile Sales";
              case typPOSStandalone: tstr = "POS Standalone";
              case typStandardOrganizer: tstr = "Standard Organizer";
              case typStandardCommunicator: tstr = "Standard Communicator";
              case typStandardCRM: tstr = "Standard CRM";
              case typStdAccounts: tstr = "Standard Accounts";
              case typStdBar: tstr = "Standard Bar";
              case typStdContracts: tstr = "Standard Contracts";
              case typStdHotel: tstr = "Standard Hotel";
              case typStdInvoicing: tstr = "Standard Invoicing";
              case typStdNominalLedger: tstr = "Standard Nominal Ledger";
              case typStdProjects: tstr = "Standard Projects";
              case typStdRentals: tstr = "Standard Rentals";
              case typStdRestaurant: tstr = "Standard Restaurant";
              case typStdShop: tstr = "Standard Shop";
              case typStdStock: tstr = "Standard Stock";
              case typStdConferences: tstr = "Standard Conferences";
              case typStdDocuments: tstr = "Standard Documents";
              case typStdExpenses: tstr = "Standard Expenses";
              case typStdHR: tstr = "Standard HR";
              case typStdCRMServer: tstr = "Standard CRM Server";
              case typStdAccountsServer: tstr = "Standard Accounts Server";
              case typSberbankInvoices: tstr = "Sberbank Invoices";
              case typSberbankStock: tstr = "Sberbank Stock";
              case typSberbankStockandCRM: tstr = "Sberbank Stock and CRM";
              case typStandardERP: tstr = "Standard ERP";
              case typPurplesoftERP: tstr = "Purplsesoft ERP";
              case typOBSHousing: tstr = "OBS Housing";
              case typPAYYAPERP: tstr = "PAYYAP ERP";
            end;
            OutString(240,0,"Program: " & tstr,false);
            EndFormat;
            if (nonblankdate(COMr.NoEnablersOlderThan)) then begin
              StartFormat(15);
              OutString(0,0,"ATTENTION!! Short Term Enabler Until: " & COMr.NoEnablersOlderThan,false);
              EndFormat;
            end;
            PrintLongInfo("Operating System: " & StringFromSet(87,COMr.OperatingSystem),-1,"Hardware: " & StringFromSet(88,COMr.Hardware),-1);
            PrintLongInfo("Control String:"  ,COMr.ControlString ,"Last Key:"      ,COMr.ThreeFirstChar);
            PrintLongInfo("Number Of Users:" ,COMr.NumberOfUsers ,"Conferences:"   ,COMr.Conferences);
            PrintLongInfo("Level 1 Users:"   ,COMr.Level1        ,"Level 2 Users:" ,COMr.Level2);
            PrintLongInfo("Companies:"       ,COMr.Companies     ,"Extra Mailboxes:"     ,COMr.Mailboxes);
            PrintLongInfo("Thin Clients/Single Functions:",COMr.ThinClients,"Concurrent Users",COMr.ConcurrentUserNo);
            PrintLongInfo("Business Communicator Users:",COMr.NamedBPUsers,"",0);
            StartFormat(15);
            OutString(0,0,"Valid Until: " & COMr.ValidUntil,false);
            EndFormat;
            CheckAndPrint(COMr.xCurrencyEnabler,"Currency",thepos);
            CheckAndPrint(COMr.clientDrivenDocs,"Client Driven Documents",thepos);
            CheckAndPrint(COMr.clientDrivenReports,"Client Driven Reports",thepos);
            CheckAndPrint(COMr.WorkInServer,"Work in Server",thepos);
            CheckAndPrint(COMr.NoTestprintEnabler,"No Testprintout",thepos);
            CheckAndPrint(COMr.CashLedgerEnabler,"Cash Ledger",thepos);
            CheckAndPrint(COMr.ContractsEnabler,"Contracts",thepos);
            CheckAndPrint(COMr.FixedAssetEnabler,"Fixed Assets",thepos);
            CheckAndPrint(COMr.ExpensesEnabler,"Expenses",thepos);
            CheckAndPrint(COMr.LoanEnabler,"Loan",thepos);
            CheckAndPrint(COMr.PayrollEnabler,"Payroll",thepos);
            CheckAndPrint(COMr.ProductionEnabler,"Production",thepos);
            CheckAndPrint(COMr.ProductionSchedulingEnabler,"ProductionScheduling",thepos);
            CheckAndPrint(COMr.PurchaseOrderEnabler,"Purchase Order",thepos);
            CheckAndPrint(COMr.QuoteEnabler,"Quotation",thepos);
            CheckAndPrint(COMr.OrderEnabler,"Sales Order",thepos);
            CheckAndPrint(COMr.SalesSuppEnabler,"CRM",thepos);
            CheckAndPrint(COMr.ServerEnabler,"Server",thepos);
            CheckAndPrint(COMr.StockEnabler,"Stock",thepos);
            CheckAndPrint(COMr.TimeBillingEnabler,"Job Costing",thepos);
            CheckAndPrint(COMr.NominalLedgerEnabler,"Nominal Ledger",thepos);
            CheckAndPrint(COMr.xPurchaseLedgerEnabler,"Purchase Ledger",thepos);
            CheckAndPrint(COMr.xSalesLedgerEnabler,"Sales Ledger",thepos);
            CheckAndPrint(COMr.OfflineModeEnabler,"Offline Mode",thepos);
            CheckAndPrint(COMr.xPointOfSalesEnabler,"POS",thepos);
            CheckAndPrint(COMr.xMailEnabler,"Mail",thepos);
            CheckAndPrint(COMr.ServiceOrderEnabler,"Service Order",thepos);
            CheckAndPrint(COMr.ChequesEnabler,"Cheques",thepos);
            CheckAndPrint(COMr.CredUpdStock,"Credit Inv. Upd. Stock",thepos);
            CheckAndPrint(COMr.DiscountEnabler,"Prices",thepos);
            CheckAndPrint(COMr.HALRepEnabler,"HAL Reports",thepos);
            CheckAndPrint(COMr.OpenTCPEnabler,"Open TCP/IP",thepos);
            CheckAndPrint(COMr.SingleIntServEnabler,"Single Internet",thepos);
            CheckAndPrint(COMr.MultiIntServEnabler,"Multi Internet",thepos);
            CheckAndPrint(COMr.ODBCEnabler,"ODBC",thepos);
            CheckAndPrint(COMr.RestaurantEnabler,"Restaruant",thepos);
            CheckAndPrint(COMr.NewPayrollEnabler,"New Payroll",thepos);
            CheckAndPrint(COMr.ProjectPlaningEnabler,"Resource Planning",thepos);
            CheckAndPrint(COMr.ExternalUser,"Limited Access",thepos);
            CheckAndPrint(COMr.EDIEnabler,"EDI",thepos);
            CheckAndPrint(COMr.CashierEnabler,"Point of Sales",thepos);
            CheckAndPrint(COMr.ConsolidationEnabler,"Consolidation",thepos);
            CheckAndPrint(COMr.HomePageEnabler,"Home Page",thepos);
            CheckAndPrint(COMr.GatewayEnabler,"External E-Mail",thepos);
            CheckAndPrint(COMr.FixedAsset2Enabler,"Assets",thepos);
            CheckAndPrint(COMr.HALScrEnabler,"HAL Screens",thepos);
            CheckAndPrint(COMr.FTPEnabler,"FTP",thepos);
            CheckAndPrint(COMr.LedgerEnabler,"Sales and Purchase Ledger",thepos);
            CheckAndPrint(COMr.FaxEnabler,"FAX",thepos);
            CheckAndPrint(COMr.CustomsEnabler,"Customs Declaration",thepos);
//            CheckAndPrint(COMr.ReportStatf,"Report Statistics",thepos);
            CheckAndPrint(COMr.VP1,"Value Pack 1",thepos);
            CheckAndPrint(COMr.VP2,"Value Pack 2",thepos);
            CheckAndPrint(COMr.VP3,"Value Pack 3",thepos);
            CheckAndPrint(COMr.VP4,"Value Pack 4",thepos);
            CheckAndPrint(COMr.VP5,"Value Pack 5",thepos);
            CheckAndPrint(COMr.VP6,"Value Pack 6",thepos);
            CheckAndPrint(COMr.VP7,"Value Pack 7",thepos);
            CheckAndPrint(COMr.VP8,"Value Pack 8",thepos);
            CheckAndPrint(COMr.VP9,"Value Pack 9",thepos);
            CheckAndPrint(COMr.VP10,"Value Pack 10",thepos);
            CheckAndPrint(COMr.VP11,"Value Pack 11",thepos);
            CheckAndPrint(COMr.VP12,"Value Pack 12",thepos);
            CheckAndPrint(COMr.LocalEnabler,"Local Mailbox",thepos);
            CheckAndPrint(COMr.AutoImport,"Automatic Import",thepos);
            CheckAndPrint(COMr.AllowSameIP,"Allow Same IP",thepos);
            CheckAndPrint(COMr.MultiClientImport,"Import with Multiple Clients",thepos);
            CheckAndPrint(COMr.MassiveCache,"Massive Cache",thepos);
            CheckAndPrint(COMr.NonDestrDocument,"Non Destructive Documents",thepos);
            CheckAndPrint(COMr.ResortEnabler,"Resort",thepos);
            CheckAndPrint(COMr.RentalEnabler,"Rental",thepos);
            CheckAndPrint(COMr.IntStockEnabler,"Internal Stock",thepos);
            CheckAndPrint(COMr.ReportParaType,"Parallel Reports",thepos);
            CheckAndPrint(COMr.DispTSepf,"Display Thousand Separator",thepos);
            CheckAndPrint(COMr.CalendarEnabler,"Calendar",thepos);
            CheckAndPrint(COMr.ReportGenEnabler,"Report Generator",thepos);
            CheckAndPrint(COMr.TaskManagerEnabler,"Task Manager",thepos);
            CheckAndPrint(COMr.CorpPortalEnabler,"Corporate Portal",thepos);
            CheckAndPrint(COMr.ExternalGateway,"External Gateway",thepos);
            CheckAndPrint(COMr.HALFuncEnabler,"HAL Functions",thepos);
            CheckAndPrint(COMr.PUFromCredUpdStock,"GR from Credit Inv.",thepos);
            CheckAndPrint(COMr.EmailEnabler,"E-mail and Conferences",thepos);
            CheckAndPrint(COMr.PrintServerEnabler,"Print Server",thepos);
            CheckAndPrint(COMr.POSOffLineEnabler,"POS OffLine",thepos);
            CheckAndPrint(COMr.PurchProgEnabler,"Purchase Prognosis",thepos);
            CheckAndPrint(COMr.Over2GbEnabler,"Over 2GB Enabler",thepos);
            CheckAndPrint(COMr.AllConcurrent,"Only Concurrent Users",thepos);
            CheckAndPrint(COMr.SharesTrading,"Shares Trading",thepos);
            CheckAndPrint(COMr.CourseEventEnabler,"Courses",thepos);
            CheckAndPrint(COMr.ASPEnabler,"ASP",thepos);
            CheckAndPrint(COMr.IntProjectManEnabler,"Internal Project Managment",thepos);
            CheckAndPrint(COMr.ProductivityEnabler,"Productivity",thepos);
          end;
        end;
      end;
    end;
  end;
  if (thepos==1) then begin
    EndFormat;
  end;
  StartFormat(15);
  EndFormat;
  return;
end;

procedure PrintCustContract(string cusel)
begin
  string 255 fromcu,tocu;
  record COCUServiceVc COCUServicer;
  record COVc COr;
  row COVc COrw;
  record SystemUsageSettingVc SUr;
  row SystemUsageSettingVc SUrw;
  Integer i,rwcnt;
  Integer j,jrwcnt;
  Boolean foundf,testf;
  string 200 tstr;
  Integer thepos;
  val totinvtot,totinvopen,totinvper;
  record COCUServiceBlock COCUSb;
  
  BlockLoad(COCUSb);
  fromcu = FirstInRange(cusel,20);
  tocu = LastInRange(cusel,20);
  if (nonblank(fromcu)) then begin
    if (fromcu==tocu) then begin
      COr.CustCode = fromcu;
      if (COCUSb.BlockUsingStdCO!=0) then begin
        foundf = false;
      end else begin
        foundf = true;
      end;
      while (LoopKey("CustCode",COr,1,foundf)) begin
        if (COr.CustCode>tocu) then begin
          foundf = false;
        end;
        testf = foundf;
        if (MergeOtherContracts(COr)==false) then begin
          testf = false;
        end;
        if (testf) then begin
          StartFormat(15);
          OutLongInt(0,"DblCOVc",COr.SerNr,false);
          OutLongInt(50,0,COr.ChildSerNr,false);
          OutString(80,0,"Start: " & COr.startDate,false);
          OutString(190,0,"End: " & COr.endDate,false);
          OutString(300,0,"Last Inv.: " & COr.lastInvDate,false);
          OutString(410,0,"Cancel: " & COr.CancelDate,false);
          EndFormat;
          StartFormat(15);
          OutString(20,0,"Contract Item",false);
          OutString(100,0,"Qty",true);
          OutString(110,0,"Comment",false);
          OutString(340,0,"Cust Config Setting",false);
          OutString(1,0,"Qty",true);
          EndFormat;
          Gray_Divider(20,1);
          rwcnt = MatRowCnt(COr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(COr,i,COrw);
            StartFormat(15);
            OutString(20,0,COrw.ArtCode,false);
            OutVal(100,0,COrw.Quant,M4UVal,true);
            OutString(110,0,COrw.Spec,false);
            SUr.ItemCode = COrw.ArtCode;
            if (ReadFirstMain(SUr,1,true)) then begin
              jrwcnt = MatRowCnt(SUr);
              for (j=0;j<jrwcnt;j=j+1) begin
                MatRowGet(SUr,j,SUrw);
                if (j>0) then begin
                  StartFormat(15);
                end;
                OutString(300,0,StringFromStringSet(254,SUrw.FieldName),false);
                OutVal(1,0,SUrw.Qty,M4UVal,true);
                EndFormat;
              end;
            end;
            if (j==0) then begin
              EndFormat;
            end;
          end;
        end;
      end;
      COCUServicer.CustCode = fromcu;
      foundf = true;
      while (LoopKey("CustCode",COCUServicer,1,foundf)) begin
        if (COCUServicer.CustCode>tocu) then begin
          foundf = false;
        end;
        testf = foundf;
        if (testf) then begin
          PrintCOCUService(COCUServicer,1,0,0,1,totinvtot,totinvopen,totinvper);
        end;
      end;
    end;
  end;
  StartFormat(15);
  EndFormat;
  return;
end;

procedure PrintIEK(LongInt sernr,record IntEnabKeyReqVc IEKr,string dblstr,Integer maxcomp,var Boolean firstf)
begin
  row IntEnabKeyReqVc IEKrw;
  Integer i,rwcnt;
  
  if (maxcomp>0 or firstf) then begin
    StartFormat(15);
    OutString(30,0,"Request Ser. No.",false);
    OutString(120,0,"Trans Date",false);
    OutString(190,0,"Controlcode",false);
    OutString(250,0,"Key",false);
    OutString(300,0,"Valid Until",false);
    OutString(370,0,"Version",false);
    EndFormat;
    Gray_Divider(30,1);
    firstf = false;
  end;
  StartFormat(15);
  OutStringID(30,dblstr,IEKr.SerNr,false,sernr);
  OutString(120,0,IEKr.TransDate,false);
  OutString(190,0,IEKr.ControlCode,false);
  if (blank(IEKr.Key)) then begin
    OutString(250,0,"FAILED!",false);
  end else begin
    OutString(250,0,IEKr.Key,false);
  end;
  OutString(300,0,IEKr.ValidUntil,false);
//  OutString(370,0,IEKr.VersionInfo,false);
  EndFormat;
  if (maxcomp>0) then begin
    rwcnt = MatRowCnt(IEKr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IEKr,i,IEKrw);
      StartFormat(15);
      OutString(55,0,IEKrw.CompCode,false);
      OutString(70,0,left(IEKrw.CompanyName,25),false);
      OutString(220,0,IEKrw.Phone,false);
      OutString(320,0,IEKrw.Fax,false);
      OutString(420,0,IEKrw.OrgNr,false);
      EndFormat;
      if (i>=maxcomp) then begin
        StartFormat(15);
        OutString(55,0,"etc...... In total " & rwcnt + 1  & " companies in the database",false);
        EndFormat;
        i = rwcnt;
      end;
    end;
    StartFormat(15);
    EndFormat;
  end;
  return;
end;

procedure PrintCUCO(record CUCOEnabActVc CUCOEr)
begin
  StartFormat(15);
  OutString(0,0,"Reg. No.",false);
  OutString(50,0,"Trans. Date",false);
  OutString(110,0,"Time",false);
  OutString(170,0,"Company",false);
  OutString(220,0,"Contract",false);
  OutString(360,0,"Status",false);
  OutString(420,0,"Close Date",false);
  EndFormat;
  Gray_Divider(0,1);
  StartFormat(15);
  OutLongInt(0,"DblCUCOEnabActVc",CUCOEr.SerNr,false);
  OutString(50,0,CUCOEr.TransDate,false);
  OutString(110,0,Left(CUCOEr.TransTime,5),false);
  OutLongInt(170,0,CUCOEr.CompanyNr,false);
  OutLongInt(220,0,CUCOEr.CONr,false);
  OutLongInt(275,0,CUCOEr.COChildSerNr,false);
  if (CUCOEr.Closed==0) then begin
    OutString(360,0,"Active",false);
  end else begin
    OutString(360,0,"Closed",false);
    OutString(420,0,CUCOEr.CloseDate,false);
  end;
  EndFormat;
  return;
end;

procedure PrintCUCOActivities(record CUCOEnabActVc CUCOEr)
begin
  record ActVc Actr;
  row ActVc Actrw;
  record NotepadVc Noter;
  record RLinkVc RLr;
  Integer notenr;
  Boolean foundf,testf;
  Integer rwcnt,i;
  string 255 tstr;
  
  Actr.CUCode = CUCOEr.CustCode;
  Actr.TransDate = CUCOEr.TransDate;
  foundf = true;
  while (LoopKey("CUCode",Actr,2,foundf)) begin
    if (Actr.TransDate!=CUCOEr.TransDate) then begin
      foundf = false;
    end;
    testf = foundf;
    if (Actr.MainPersons!="WEB") then begin
      testf = false;
    end;
    if (testf) then begin
      rwcnt = MatRowCnt(Actr);
      StartFormat(15);
      OutString(0,0,"Act. No.",false);
      OutString(50,0,"Trans. Date",false);
      OutString(110,0,"Time",false);
      OutString(170,0,"Text",false);
      OutString(320,0,"C.Code",false);
      OutString(390,0,"Key/Error",false);
      EndFormat;
      Gray_Divider(0,1);
      StartFormat(15);
      OutLongInt(0,"DblActVc",Actr.SerNr,false);
      OutString(50,0,Actr.TransDate,false);
      OutString(110,0,Left(Actr.StartTime,5),false);
      OutString(170,0,Actr.Comment,false);
      if (rwcnt>2) then begin
        MatRowGet(Actr,1,Actrw);
        OutString(320,0,Actrw.Text,false);
        MatRowGet(Actr,2,Actrw);
        OutString(390,0,Actrw.Text,false);
      end;
      EndFormat;
      notenr = 1;
      if (ReadRecordLink(Actr,notenr,Noter,RLr)) then begin
        rwcnt = LineTextCnt(Noter);
        for (i=0;i<rwcnt;i=i+1) begin
          tstr = LineTextGet(Noter,i);
          StartFormat(15);
          OutString(70,0,tstr,false);
          EndFormat;
        end;
      end;
    end;
  end;
  StartFormat(15);
  EndFormat;
  return;
end;

procedure PrintCustEnabReg(string cusel)
begin
  record CUCOEnabActVc CUCOEr;
  record IntEnabKeyReqVc IEKr;
  Boolean foundf,testf,firstf;
  Boolean foundf2,testf2;
  string 20 fromcu,tocu;

  fromcu = FirstInRange(cusel,20);
  tocu = LastInRange(cusel,20);
  CUCOEr.CustCode = fromcu;
  foundf = true;
  while (LoopKey("CustCode",CUCOEr,1,foundf)) begin
    if (CUCOEr.CustCode>tocu) then begin
      foundf = false;
    end;
    testf = foundf;
    if (CUCOEr.CompanyNr!=CurrentCompany) then begin
      testf = false;
    end;
    if (testf) then begin
      firstf = true;
      PrintCUCO(CUCOEr);
      IEKr.CUCOEnabActSerNr = CUCOEr.SerNr;
      foundf2 = true;
      while (LoopKey("CUCOEnabActSerNr",IEKr,1,foundf2)) begin
        if (IEKr.CUCOEnabActSerNr!=CUCOEr.SerNr) then begin
          foundf2 = false;
        end;
        testf2 = foundf2;
        if (testf2) then begin
          if (UserCanAction("EnabINF",false)) then begin
            PrintIEK(CUCOEr.SerNr,IEKr,"DblIEKEnabDetails",5,firstf);
          end else begin
            PrintIEK(CUCOEr.SerNr,IEKr,"DblIEKEnabDetails",0,firstf);
          end;
        end;
      end;
      StartFormat(15);
      EndFormat;
    end;
  end;
  return;
end;

global
procedure EnablerDetailsRn(var record RcVc RepSpec)
BEGIN
  record CustPSVc CuPSr;
  record CUVc CUr;
  
  CUr.Code = RepSpec.f1;
  if (ReadFirstMain(CUr,1,true)==false) then begin
    CUr.Name = "";
  end;
  StartReportJob("Enabler Details for " & CUr.Name);
  EndHeader;
// Only for the call to PrintCOCUService
  SetRepCol(2,60);
  SetRepCol(3,160);
  SetRepCol(4,320);
  SetRepCol(5,400);
  SetRepCol(6,250);
  SetRepCol(7,155);
  SetRepCol(8,340);
  SetRepCol(9,410);
  
  StartFormat(15);
  OutStringID(0,"DblTestGetKey","Test possibility to get Enabler key",false,RepSpec.f1);
  EndFormat;
  StartFormat(15);
  EndFormat;
  Gray_Divider(0,1);

  StartFormat(15);
  OutString(0,0,"Click one of these links for enabler statistics for " & CUr.Name,false);
  EndFormat;
  StartFormat(15);
  OutStringID(0,"DblIntEnabStat","Internet Enablers",false,RepSpec.f1 & ":" & CurrentCompany);
  OutStringID(200,"DblWebEnabStat","Web Enablers (old) and Manually Made Enablers (even older)",false,RepSpec.f1);
  EndFormat;
  StartFormat(15);
  EndFormat;
  Gray_Divider(0,1);

  StartFormat(15);
  OutString(0,0,"Configuration in our database",false);
  EndFormat;
  Gray_Divider(0,1);
  PrintCustSystemUsage(RepSpec.f1);
  StartFormat(15);
  EndFormat;

  StartFormat(15);
  OutString(0,0,"Contract information, including what configuration items they stand for",false);
  EndFormat;
  Gray_Divider(0,1);
  PrintCustContract(RepSpec.f1);

  StartFormat(15);
  OutString(0,0,"Registrations and Enabler requests",false);
  EndFormat;
  Gray_Divider(0,1);
  PrintCustEnabReg(RepSpec.f1);

  EndJob;
  return;
end;

global
procedure IEKDetailsRn(var record RcVc RepSpec)
BEGIN
  record CUCOEnabActVc CUCOEr;
  record IntEnabKeyReqVc IEKr;
  Boolean testf,firstf;

  IEKr.SerNr = RepSpec.long1;
  testf = ReadFirstMain(IEKr,1,true);
  if (testf) then begin
    CUCOEr.SerNr = RepSpec.long2;
    testf = ReadFirstMain(CUCOEr,1,true);
  end;
  if (testf) then begin
    firstf = true;
    StartReportJob("Internet Enabler Request Details");
    EndHeader;
    PrintCUCOActivities(CUCOEr);
    PrintCUCO(CUCOEr);
    if (UserCanAction("EnabINF",false)) then begin
      PrintIEK(CUCOEr.SerNr,IEKr,"DblIntEnabKeyReqVc",200,firstf);
    end else begin
      PrintIEK(CUCOEr.SerNr,IEKr,"",0,firstf);
    end;
    EndJob;
  end;
  return;
end;

procedure PrintOpenContractInvoices(LongInt cosernr,LongInt childnr,Integer nrofdays)
begin
  record COIVVc COIVr;
  record IVVc IVr;
  record ARVc ARr;
  LongInt latedays;
  Boolean found;

  found = true;
  COIVr.CONr = cosernr;
  COIVr.COChildNr = childnr;
  while (LoopMain(COIVr,2,found)) begin
    if (COIVr.CONr!=cosernr) then begin found = false; end;
    if (COIVr.COChildNr!=childnr) then begin found = false; end;
    if (found) then begin
      ARr.InvoiceNr = COIVr.IVNr;
      if (ReadFirstMain(ARr,1,true)) then begin
        latedays = DateDiff(ARr.DueDate,CurrentDate);
        if (ARr.BookRVal>0) then begin
          if (latedays<-nrofdays) then begin
            StartFormat(15);
            OutLongInt(30,"DblIVVc",ARr.InvoiceNr,false);
            OutString(100,0,ARr.CustCode,false);
            OutString(270,0,ARr.DueDate,false);
            OutString(400,0,ARr.RVal,true);
            OutString(480,0,ARr.BookRVal,true);
            EndFormat;
          end;
        end;
      end;
    end;
  end;
  return;
end;

global
function Boolean TryEnablerCode(LongInt cucoserno,string custcode,LongInt conr,LongInt childno,Integer companyno,string threefirstchar,Boolean printf,Integer nrofdays)
BEGIN
  record IntEnabKeyReqVc IEKr;
  record CustContModuleVc CCMr;
  record COVc COr;
  record COVc CO3r;
  record RLinkVc RLr;
  record CUVc CUr;
  Boolean keyok;
  Integer corrmod;
  Boolean sentfax,sentemail;
  Date errdat;
  string 20 thekey;
  string 60 limitstr;
  Date maxvaliduntil;
  Integer ptype;
  LongInt opendays;
  Date bldat;
  Boolean newcotype;
  Date validuntildate;
  Integer cofoundincomp;
  
  keyok = true;
  if (cucoserno>0) then begin
    IEKr.CUCOEnabActSerNr = cucoserno;
    if (ReadLastKey("CUCOEnabActSerNr",IEKr,1,false)) then begin
      if (IEKr.CUCOEnabActSerNr!=cucoserno) then begin
        if (printf) then begin
          StartFormat(15);
          OutString(0,0,"In order to run this test, the customer must have tried at least once to get a key using Internet Enablers",false);
          EndFormat;
        end;
        keyok = false;
      end;
    end;
  end;
  
// This part of the code is very much a compy of IntEnabSv.hals function HtsGetEnablerKey
  CCMr.CustCode = custcode;
  CCMr.ContractNr = conr;
  CCMr.ChildSerNr = childno;
  if (ReadFirstMain(CCMr,3,true)) then begin
    ptype = CCMr.ProgType;
  end else begin
    if (printf) then begin
      StartFormat(15);
      OutString(0,0,"This customer configuration can not be found",false);
//        OutStringID(300,"DblRecreateCustConf","Try to Recreate Configuration",false);
      EndFormat;
    end;
    keyok = false;
  end;
//  opendays = OpenContractInvoices(conr,childno,nrofdays);
  if (opendays>0) then begin
    if (printf) then begin
      StartFormat(15);
      OutString(0,0,"This customer has " & opendays & " invoices due more than " & nrofdays & " days",false);
      EndFormat;
      StartFormat(15);
      OutString(30,0,"Invoice No.",false);
      OutString(100,0,"Customer Code",false);
      OutString(270,0,"Due Date",false);
      OutString(400,0,"Rem. Val",true);
      OutString(480,0,"Base Cur.",true);
      EndFormat;
      Gray_Divider(30,1);
      PrintOpenContractInvoices(conr,childno,10);
    end;
    keyok = false;
  end;
//  COr.SerNr = conr;
//  COr.ChildSerNr = childno;
//  if (ReadFirstMain(COr,2,true)) then begin
  if (FindTheContract(true,CurrentCompany,conr,childno,COr,newcotype,cofoundincomp)) then begin
//    if (ItIsBigProduct(ptype)==false) then begin
      limitstr = threefirstchar;
      if (blank(limitstr)) then begin
        limitstr = CCMr.ThreeFirstChar;
      end;
      if ((COr.OKFlag!=0) and (COr.Accepted!=0)) then begin
        if (blankdate(COr.endDate)) then begin
          limitstr = "";
        end else begin
          if (COr.endDate>CurrentDate) then begin
            limitstr = "";
          end;
        end;
//      end;
    end;
    if (nonblank(limitstr)) then begin
      if (printf) then begin
        StartFormat(15);
        OutString(0,0,"Note! This contract is limited to get keys only for " & limitstr,false);
        EndFormat;
      end;
    end;
// Validuntil is not checked when getting the key, it is set when receiving proper System Config...
//    CheckForValidUntilDate(CCMr,CurrentCompany,false,bldat,"",validuntildate);
    if (validuntildate<CurrentDate) then begin
      if (printf) then begin
        StartFormat(15);
        OutString(0,0,"This contract can get keys until " & validuntildate,false);
        EndFormat;
      end;
      keyok = false;
    end;
    if (ReadRecordToLink(COr,1,CO3r,RLr)) then begin
      if (printf) then begin
        StartFormat(15);
        OutString(0,0,"This contract can not be used to get a key, it is a sub contract of another contract",false);
        EndFormat;
      end;
      keyok = false;
    end;
    if (COr.OKFlag==0) then begin
//      if (ItIsBigProduct(ptype)) then begin
        if (printf) then begin
          StartFormat(15);
          OutString(0,0,"Contract is not OKed, Bigger products HAS to have an OKed contract",false);
          EndFormat;
        end;
        keyok = false;
//      end;
    end;
    if (COr.Accepted==0) then begin
//      if (ItIsBigProduct(ptype) or newcotype) then begin
        if (printf) then begin
          StartFormat(15);
          OutString(0,0,"Contract is not Accepted, Bigger products, or new HW Contracts, HAS to have an Accepted contract",false);
          EndFormat;
        end;
        keyok = false;
//      end;
    end;
  end else begin
    if (printf) then begin
      StartFormat(15);
      OutString(0,0,"Contract can not to be found",false);
      EndFormat;
    end;
    keyok = false;
  end;
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)==false) then begin
    RecordNew(CUr);
    if (printf) then begin
      StartFormat(15);
      OutString(0,0,"Note! Customer " & custcode & " doesn't exist",false);
      EndFormat;
    end;
    keyok = false;
  end;
  if (keyok) then begin
/*
    if (AskForTheEnabler(custcode,CUr,conr,childno,
                          IEKr.ControlCode,IEKr.ControlString,
                          limitstr,corrmod,false,false,sentfax,sentemail,
                          errdat,2,companyno,thekey,maxvaliduntil,false,bldat,"",false)) then begin
      if (printf) then begin
        StartFormat(15);
        OutString(0,0,"This customer tries to get a key, but fails",false);
        EndFormat;
      end;
      keyok = false;
    end else begin
      if (printf) then begin
        StartFormat(15);
        OutString(0,0,"Key should be possible to get",false);
        EndFormat;
      end;
    end;
*/
  end else begin
    if (printf) then begin
      StartFormat(15);
      OutString(0,0,"This customer fails even before the key request",false);
      EndFormat;
    end;
    keyok = false;
  end;
  if (printf) then begin
    StartFormat(15);
    EndFormat;
  end;
  TryEnablerCode = keyok;
  return;
end;

global
procedure DblTestGetKeyRn(var record RcVc RepSpec)
BEGIN
  record CUCOEnabActVc CUCOEr;
  record COVc COr;
  Boolean intenabf;
  Boolean foundf,testf,firstf;
  string 20 fromcu,tocu;
  string 200 tstr;

  StartReportJob("Test Enabler Key");
  EndHeader;
  intenabf = false;
  fromcu = FirstInRange(RepSpec.f1,20);
  tocu = LastInRange(RepSpec.f1,20);
  CUCOEr.CustCode = fromcu;
  foundf = true;
  while (LoopKey("CustCode",CUCOEr,1,foundf)) begin
    if (CUCOEr.CustCode>tocu) then begin
      foundf = false;
    end;
    testf = foundf;
    if (CUCOEr.Closed!=0) then begin
      testf = false;
    end;
    if (CUCOEr.CompanyNr!=CurrentCompany) then begin
      testf = false;
    end;
    if (testf) then begin
      intenabf = true;
      PrintCUCO(CUCOEr);
      StartFormat(15);
      EndFormat;
      if (TryEnablerCode(CUCOEr.SerNr,CUCOEr.CustCode,CUCOEr.CONr,CUCOEr.COChildSerNr,CUCOEr.CompanyNr,CUCOEr.ThreeFirstChar,true,10)) then begin
      end;
    end;
  end;
  if (intenabf==false) then begin
    firstf = true;
    foundf = true;
    COr.CustCode = fromcu;
    while (LoopKey("CustCode",COr,1,foundf)) begin
      if (COr.CustCode>tocu) then begin
        foundf = false;
      end;
      if (foundf) then begin
        if (firstf) then begin
          StartFormat(15);
          OutString(0,0,"Using Web Enablers only, not good",false);
          EndFormat;
          firstf = false;
        end;
        tstr = "Contract No: " & COr.SerNr;
        if (COr.ChildSerNr>0) then begin
          tstr = tstr & "." & COr.ChildSerNr;
        end;
        StartFormat(15);
        OutString(0,0,tstr,false);
        EndFormat;
        if (TryEnablerCode(-1,COr.CustCode,COr.SerNr,COr.ChildSerNr,CurrentCompany,"",true,10)) then begin
        end;
      end;
    end;
  end;
  EndJob;
  return;
end;

global
procedure CustPS2Rn(var record RcVc RepSpec)
BEGIN
  record CustPSVc CuPSr;

  StartReportJob(USetStr(2715));
  EndHeader;

  CuPSr.Signature = RepSpec.f6;
  if (ReadFirstMain(CuPSr,1,true)) then begin
    RepSpec.ArtMode = 0;
    RepSpec.flags[10] = CuPSr.NrOfIV;
    RepSpec.flags[11] = CuPSr.NotOKIV;
    RepSpec.flags[12] = CuPSr.Invoices;
    if (CuPSr.Invoices==0) then begin
      RepSpec.flags[10] = 0;
      RepSpec.flags[11] = 0;
    end;
    if (blank(CuPSr.NrOfAct)) then begin
      RepSpec.vals0 = -1;
    end else begin
      RepSpec.vals0 = CuPSr.NrOfAct;
    end;
/*        
    if (blank(CuPSr.NrOfAct)) then begin
      RepSpec.flags[13] = -1;
    end else begin
      RepSpec.flags[13] = CuPSr.NrOfAct;
    end;
*/      
    RepSpec.flags[14] = CuPSr.NotOKAct;
    RepSpec.flags[15] = CuPSr.Activities;

    RepSpec.flags[16] = CuPSr.Contract;
    RepSpec.flags[17] = CuPSr.NotOKCO;

    if (blank(CuPSr.NrOfCO)) then begin
      RepSpec.vals1 = -1;
    end else begin
      RepSpec.vals1 = CuPSr.NrOfCO;
    end;
/*
    if (blank(CuPSr.NrOfCO)) then begin
      RepSpec.flags[18] = -1;
    end else begin
      RepSpec.flags[18] = CuPSr.NrOfCO;
    end;
*/      
    RepSpec.flags[19] = CuPSr.MonthBal;
    RepSpec.flags[20] = CuPSr.CustItem;
    RepSpec.long1 = CuPSr.CustItemMonthNr;
    RepSpec.flags[21] = CuPSr.Quotations;
    RepSpec.vals2 = CuPSr.NrOfQT;
//      RepSpec.flags[22] = CuPSr.NrOfQT;
    RepSpec.FirstAcc = CuPSr.QTClass;
    RepSpec.flags[23] = CuPSr.Orders;
    RepSpec.vals3 = CuPSr.NrOfOR;
//      RepSpec.flags[24] = CuPSr.NrOfOR;
    RepSpec.LastAcc = CuPSr.ORClass;
    RepSpec.flags[25] = CuPSr.Checks;
    RepSpec.flags[26] = CuPSr.ContQuote;
    RepSpec.flags[27] = CuPSr.TermCQ;
    if (CuPSr.NrOfCQ==BlankVal) then begin
      RepSpec.flags[28] = -1;
    end else begin
      RepSpec.flags[28] = CuPSr.NrOfCQ;
    end;
    RepSpec.f6 = CuPSr.ExcludeActTypes;
    RepSpec.flags[29] = 1;
//      RepSpec.flags[29] = CuPSr.PaymentHistory;     
    RepSpec.SimVerf = CuPSr.ShowActivityClasses;
    RepSpec.flags[13] = CuPSr.SMSes;
    RepSpec.vals4 = CuPSr.NrOfSMS;
  end;
  RunCustPS2Rn(RepSpec,CuPSr);
//  StartFormat(15);
//  OutStringID(0,"DblEnabDetails","Enabler Details",false,RepSpec.f1);
//  EndFormat;
  EndJob;
  RETURN;
END;

global
procedure CustPSRn(record RcVc RepSpec)
BEGIN
  record CUVc CUr;
  string 255 frcc,tocc;
  Boolean TrHs,testf;
  val PStotdue;
  val PStotopen;
  string 255 tstr;
  Integer rw;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt;
  record CustPSVc CuPSr;
  val sum,sum2,rval,sumbooked,sumnow,sumincur,sumdiff;
  record SMVc CurTotalsr;
  Array string 10 debaccs;
  Array val debbal;
  Integer debcnt;
  record ARVc ARr;
  
  // ArtMode==1, All invoices 
  // ArtMode==0, Last 5 invoices 


  frcc = FirstInRange(RepSpec.f1,20);
  tocc = LastInRange(RepSpec.f1,20);
  
  StartReportJob(USetStr(2715));
  rw = 1;
  HTCusts(frcc,tocc,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (HasModSL or BuildProductCode!="StandardCRM") then begin
    if (RepSpec.UsedOnly==1) then begin
      tstr = USetStr(6651);
      Header(rw,tstr,0);
    end;
  end;
  if (HasCategories) then begin
    HTCustCat(RepSpec.f3,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;  
  end;
  if (HasContactClassification) then begin
    HTCustClass(RepSpec.Stext,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (RepSpec.flags[10]==0) then begin
    RepSpec.flags[10] = 5;
  end;
  HTInvFrom(RepSpec.flags[10],RepSpec.ArtMode,RepSpec.d1,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;
  BeginCurncyTotals(curcnt);
  StartFormat(15);
  OutString(15,0,USetStr(2701),false);
  OutString(100,0,USetStr(2702),false);
  OutString(290,0,USetStr(2703),false);
  EndFormat;
  Gray_Divider(0,1);
  CUr.Code = frcc;
  TrHs = true;
  while (LoopMain(CUr,1,TrHs)) begin
    if (nonblank(tocc)) then begin
      if (CUr.Code>tocc) then begin
        TrHs = false;
      end;    
    end;    
    if (TrHs) then begin
      testf = true;
      if (CUr.CUType==0) then begin testf = false; end;
      if (testf) then begin
        testf = ContactInGroupClass("",RepSpec.f3,RepSpec.Stext,"CUST",CUr.CustCat,CUr.Classification);
      end;
      if (testf) then begin 
        if (HasModSL or BuildProductCode!="StandardCRM") then begin
          if (RepSpec.UsedOnly==1) then begin
            ARr.CustCode = CUr.Code;
            if (ReadFIrstKey("CustCode",ARr,1,true)==false) then begin
              GetOnAccBalance(RepSpec,CUr.Code,CUr.CurncyCode,false,1,sum,sum2,rval,sumbooked,sumnow,sumincur,sumdiff,CurTotalsr,debaccs,debbal,debcnt);
              if (sum==0) then begin testf = false; end;
            end;
          end;
        end;
      end;
      if (testf) then begin
        CustPSCustomersDetails(RepSpec,0,CUr,true,false);
        if (HasModSL or BuildProductCode!="StandardCRM") then begin
          PSPrintCust(RepSpec,CUr,PStotdue,PStotopen,5,1);
        end;
        PrintCustCourseEvents(CUr.Code);
  //      StartFormat(15);
  //      OutStringID(0,"DblEnabDetails","Enabler Details",false,CUr.Code);
  //      EndFormat;
        if (RepSpec.flags[1]==1) then begin
          if (RepSpec.Media!=1) then begin
            NewPage(false);
          end;  
        end;  
      end;
    end;
  end;
  if (HasModSL or BuildProductCode!="StandardCRM") then begin
    StartFormat(10);
    EndFormat;
    Black_Divider(0,1);
    StartFormat(15);
    OutString(270,0,USetStr(2713),false);
    OutValBiDi(470,0,PStotopen,M4Val,true,510);
    EndFormat;
    StartFormat(15);
    OutString(270,0,USetStr(2714),false);
    OutValBiDi(470,0,PStotdue,M4Val,true,510);
    EndFormat;
    Black_Divider(0,1);
    StartFormat(10);
    EndFormat;
  end;
  EndJob;
  RETURN;
END;
