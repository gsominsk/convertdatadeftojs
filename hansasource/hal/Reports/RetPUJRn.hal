external procedure HTReasons(string,string,var string);
external procedure HT2Per(Date, Date,var string);
external procedure HTDetailLevel(Integer, var string);
external procedure HTSuppliers(string, string, var string);
external procedure HTOKF(Integer, Integer, var string); 

procedure HTNr(Integer t1, Integer t2, LongInt a, LongInt b, var string tstr)
begin
  if (a == -1 and b == -1) then begin
    tstr = USetStr(t1);
  end else begin
    tstr = USetStr(t2);
    tstr = tstr & " ";
    tstr = tstr & a;
    if (a<>b) then begin
      tstr = tstr & " : ";
      tstr = tstr & b;
    end;
  end;
return;
end;

global
procedure RetPUJRn(record RcVc RepSpec)
begin
  record RetPUVc RetPUr;
  Boolean TrHs;
  Boolean testf;
  LongInt frorder,toorder;
  LongInt snfr,snto;
  String 60 frcc,tocc,location;
  String 255 ckey;
  Integer keys;
  val retpuq,retpuv,ort,rowt;
  row RetPUVc RetPUrw;
  Integer i;
  Integer rwcnt;
  string 255 tstr;
  Integer rw;
  val totqty,totcost;

  snfr = FirstInRange(RepSpec.f1,20);
  snto = LastInRange(RepSpec.f1,20);
  frorder = FirstInRange(RepSpec.TransStr,20);
  toorder =  LastInRange(RepSpec.TransStr,20);
  frcc = FirstInRange(RepSpec.f2,20);
  tocc = LastInRange(RepSpec.f2,20);
  
  StartReportJob(USetStr(14580));    
   rw = 1;
   HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   HTDetailLevel(RepSpec.ArtMode,tstr);
   Header(rw,tstr,0);
   if blank(RepSpec.f1) then begin
     tstr = USetStr(14581);
   end else begin
     tstr = USetStr(14582) & ": " & RepSpec.f1;
   end;   
   Header(rw,tstr,1);
   rw = rw + 1;
   HTNr(2589,2584,frorder,toorder,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   HTSuppliers(frcc,tocc,tstr);
   Header(rw,tstr,1);
   rw = rw + 1; 
   HTOKF(RepSpec.flags[1],RepSpec.flags[2],tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   HTReasons(RepSpec.AccStr,RepSpec.AccStr,tstr);
   Header(rw,tstr,0);
   if (nonblank(RepSpec.f3)) then begin
     tstr = USetStr(2768);
     tstr = tstr & ": " & RepSpec.f3;
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
  
  EndHeader;
  
  SetRepCol(2,80);
  SetRepCol(3,150);
  SetRepCol(4,230);
  SetRepCol(5,300);
  SetRepColBiDi(6,420,460);
  SetRepColBiDi(7,480,520);

  StartFormat(15);
  OutString(0,0,USetStr(14583),false);
  OutString(2,0,USetStr(14584),false);
  OutString(3,0,USetStr(14585),false);
  OutString(4,0,USetStr(14586),false);
  OutString(5,0,USetStr(14587),false);
  OutStringAdjust(7,0,USetStr(2928),true,M4Val);
  EndFormat;
    
  if RepSpec.ArtMode==1 then begin
    StartFormat(15);
    OutString(0,0,USetStr(14588),false);
    OutString(2,0,USetStr(14589),false);
    OutString(4,0,USetStr(14590),false);
    OutString(5,0,USetStr(14591),false);
    OutStringAdjust(6,0,USetStr(14593),true,M4Val);
    OutStringAdjust(7,0,USetStr(14592),true,M4Val);
    EndFormat;
  end;
  Black_Divider(0,1);

  ckey = "SerNr";
  RetPUr.SerNr = snfr;
  keys = 1;

  TrHs = true;

  while LoopKey(ckey,RetPUr,keys,TrHs) begin
    testf = true;
   
    if (snto<>-1) then begin
      if (RetPUr.SerNr>snto) then begin
        TrHs = false;
      end;
    end;
    if nonblank(RepSpec.f2) then begin
      if ((tocc<RetPUr.VECode) or (frcc>RetPUr.VECode)) then begin
        testf = false;
      end;
    end;
    if (TrHs and testf) then begin
      if nonblank(RepSpec.TransStr) then begin
        if ((RetPUr.PONr<frorder) or (RetPUr.PONr>toorder)) then begin
          testf = false;
        end;
      end;
      if (DateInRange(RetPUr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
        testf = false;
      end;        
      if ((RepSpec.flags[1]==0) and (RetPUr.OKFlag==0)) then begin
        testf = false;
      end;
      if ((RepSpec.flags[2]==0) and (RetPUr.OKFlag!=0)) then begin
        testf = false;
      end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (RepSpec.AccStr!=RetPUr.Reason) then begin testf = false; end;
      end;
      if (testf) then begin
      if (nonblank(RepSpec.f3)) then begin 
        testf = false; 
        rwcnt = MatRowCnt(RetPUr);
        for (i=0; i<rwcnt; i=i+1) begin
          MatRowGet(RetPUr,i,RetPUrw);
          location = RetPUrw.Location;
          if (blank(location)) then begin 
            location = RetPUr.Location;
          end;
          if (location==RepSpec.f3) then begin
            testf = true;
            i = rwcnt;
          end;
        end;
      end;
      end;
      if (testf) then begin
        retpuv = blankval;
        retpuq = blankval;
        rwcnt = MatRowCnt(RetPUr);
        for (i=0; i<rwcnt; i=i+1) begin
          MatRowGet(RetPUr,i,RetPUrw);
          testf = true;
          if (nonblank(RepSpec.f3)) then begin 
            location = RetPUrw.Location;
            if (blank(location)) then begin 
              location = RetPUr.Location;
            end;
            if (location!=RepSpec.f3) then begin
              testf = false;
            end;
          end;
          if (testf) then begin
            retpuq = retpuq + RetPUrw.Quant;
            retpuv = retpuv + RetPUrw.FIFORowVal;
            totcost = totcost + RetPUrw.FIFORowVal;
            totqty = totqty + RetPUrw.Quant;
          end;
        end;
        StartFormat(15);
        OutLongInt(0,"DblRetPUVc",RetPUr.SerNr,false);
        OutDate(2,0,RetPUr.TransDate,false);
        OutLongInt(3,"DblPOVc",RetPUr.PONr,false);
        OutString(4,0,RetPUr.VECode,false);
        OutString(5,0,RetPUr.VEName,false);
        OutStringAdjust(7,0,retpuv,true,M4Val);
        EndFormat;
        if (RepSpec.ArtMode==1) then begin
          for (i=0; i<rwcnt; i=i+1) begin
            MatRowGet(RetPUr,i,RetPUrw);
            testf = true;
            if (nonblank(RepSpec.f3)) then begin 
              location = RetPUrw.Location;
              if (blank(location)) then begin 
                location = RetPUr.Location;
              end;
              if (location!=RepSpec.f3) then begin
                testf = false;
              end;
            end;
            if (testf) then begin
              Gray_Divider(0,1); 
              StartFormat(15);
              OutString(0,0,RetPUrw.ArtCode,false);
              OutString(2,0,RetPUrw.Spec,false);
              OutValBiDi(4,0,RetPUrw.FIFO,M4Val,false,320);
              OutVal(6,0,RetPUrw.Quant,M4Qty,true);
              OutVal(7,0,RetPUrw.FIFORowVal,M4Val,true);
              EndFormat;             	   	       
            end;
          end;
        end;       
        if (RepSpec.ArtMode==1) then begin 
          Gray_Divider(4,1);    
          StartFormat(15);
          OutString(4,0,USetStr(14594),false);
          OutVal(6,0,retpuq,M4Val,true);
          OutVal(7,0,retpuv,M4Val,true);
          EndFormat;  
          Black_Divider(0,1); 
        end;      
      end;
    end;
  end;
  Gray_Divider(0,1); 
  StartFormat(15);
  OutVal(6,0,totqty,M4Qty,true);
  OutVal(7,0,totcost,M4Val,true);
  EndFormat;  
  EndJob;
  return;
end;



