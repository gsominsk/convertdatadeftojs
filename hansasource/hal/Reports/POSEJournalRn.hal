external procedure POSZReport(Integer,Integer,Integer,Boolean,string,string,Date,Date,Time,Time);
external function Boolean GetPMRow(string,var row PMBlock);
external procedure HT2Per(Date, Date , var string);

procedure PrintPriceChanges(string filename,LongInt sernr,val price,Integer rownr)
begin
  record POSJournalVc POSJr;
  Boolean found,testf;
  
  found = true;
  POSJr.FileName = filename;
  POSJr.TransNr = sernr;
  POSJr.RowNr = rownr;
  while (LoopKey("FileName",POSJr,3,found)) begin
    if (POSJr.FileName!=filename) then begin found = false; end;
    if (POSJr.TransNr!=sernr) then begin found = false; end;
    if (POSJr.RowNr!=rownr) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (POSJr.Price==price) then begin testf = false; end;
      if (testf) then begin
        StartFormat(15);
         OutString(20,0,POSJr.ArtCode,false);
         OutString(3,0,USetStr(38585),false);
         OutString(7,0,POSJr.Price,true);
        EndFormat;
      end;
    end;
  end;
  return;
end;

procedure PrintIVCash(record RcVc RepSpec,record POSJournalVc POSJr,record IVCashVc IVCr,LongInt transnr)
begin
  Boolean testf;
  row IVCashVc IVCrw;
  Integer i,rwcnt;
  val totq;
  vector val vpaymodesums;
  vector string 255 vpaymodetext;
  row PMBlock PMrw;

  testf = true;
  if (RepSpec.flags[0]==0) then begin
    if (IVCr.OKFlag!=0) then begin testf = false; end;
  end;
  if (RepSpec.flags[1]==0) then begin
    if (IVCr.OKFlag==0) then begin testf = false; end;
  end;
  if (testf==false) then begin
    goto LPrintIVCash;
  end;
  StartFormat(15);
   OutString(0,0,USetStr(38584),false);
//   OutString(3,"DblNPTSIVCash",POSJr.TransNr,false);
   OutStringID(3,"DblNPTSIVCash",transnr,false,POSJr.TransNr);
   OutString(4,0,POSJr.TransDate,false);
   OutString(7,0,POSJr.TransTime,true);
  EndFormat;
  StartFormat(15);
   OutString(0,0,IVCr.Addr0,false);
   OutString(4,0,IVCr.VATNr,false);
  EndFormat;
  if (nonblank(IVCr.LocalMachineCode) or nonblank(IVCr.TerminalID)) then begin
    StartFormat(15);
     OutString(0,0,IVCr.LocalMachineCode,false);
     OutString(4,0,IVCr.TerminalID,false);
    EndFormat;
  end;
  if (nonblank(IVCr.OfficialSerNr)) then begin
    StartFormat(15);
     OutString(0,0,IVCr.OfficialSerNr,false);
    EndFormat;
  end;
  if (IVCr.CashValue!=0) then begin
    vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + IVCr.CashValue;
  end;
  if (IVCr.RecValue!=0) then begin
    GetPMRow(IVCr.PayDeal,PMrw);
    switch (PMrw.CheckType) begin
      case kPayModeTypeGiftVoucher:
        vpaymodesums[kInvoiceRowTypeGiftVoucherPayment] = vpaymodesums[kInvoiceRowTypeGiftVoucherPayment] + IVCr.RecValue;
      case kPayModeTypeCreditCard:
        vpaymodesums[kInvoiceRowTypeCreditCardPayment] = vpaymodesums[kInvoiceRowTypeCreditCardPayment] + IVCr.RecValue;
      otherwise
        vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + IVCr.RecValue;
    end;
  end;
  if (IVCr.RecValue2!=0) then begin
    GetPMRow(IVCr.PayDeal2,PMrw);
    switch (PMrw.CheckType) begin
      case kPayModeTypeGiftVoucher:
        vpaymodesums[kInvoiceRowTypeGiftVoucherPayment] = vpaymodesums[kInvoiceRowTypeGiftVoucherPayment] + IVCr.RecValue2;
      case kPayModeTypeCreditCard:
        vpaymodesums[kInvoiceRowTypeCreditCardPayment] = vpaymodesums[kInvoiceRowTypeCreditCardPayment] + IVCr.RecValue2;
      otherwise
        vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + IVCr.RecValue2;
    end;
  end;
  
  Gray_Divider(2,7);
  rwcnt = MatRowCnt(IVCr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCr,i,IVCrw);
    switch (IVCrw.stp) begin
      case kInvoiceRowTypeNormal:
        StartFormat(15);
         OutStringOvst(2,0,IVCrw.ArtCode,false,IVCrw.ovst);
         OutStringOvst(3,0,IVCrw.Spec,false,IVCrw.ovst);
         OutValOvst(6,0,IVCrw.Quant,M4Val,true,IVCrw.ovst);
         OutValOvst(7,0,IVCrw.Sum,M4Val,true,IVCrw.ovst);
        EndFormat;
        if (IVCrw.ovst==0) then begin
          totq = totq + IVCrw.Quant;
        end;
        PrintPriceChanges("IVCashVc",IVCr.SerNr,IVCrw.Price,i);
      case kInvoiceRowTypeCashPayment:
        vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + IVCrw.Sum;
        vpaymodetext[kInvoiceRowTypeCashPayment] = IVCrw.Spec;
      case kInvoiceRowTypeCreditCardPayment:
        vpaymodesums[kInvoiceRowTypeCreditCardPayment] = vpaymodesums[kInvoiceRowTypeCreditCardPayment] + IVCrw.Sum;
        vpaymodetext[kInvoiceRowTypeCreditCardPayment] = IVCrw.Spec;
      case kInvoiceRowTypeCreditCardPayment:
        vpaymodesums[kInvoiceRowTypeGiftVoucherPayment] = vpaymodesums[kInvoiceRowTypeGiftVoucherPayment] + IVCrw.Sum;
        vpaymodetext[kInvoiceRowTypeGiftVoucherPayment] = IVCrw.Spec;
    end;
  end;
  Gray_Divider(15,205);
  StartFormat(15);
   OutString(15,0,USetStr(38582),false);
   OutVal(7,0,IVCr.Sum3,M4Val,true);
  EndFormat;
  StartFormat(15);
   OutString(15,0,USetStr(38583),false);
   OutVal(6,0,totq,M4Val,true);
   OutVal(7,0,IVCr.Sum4,M4Val,true);
  EndFormat;
  if (vpaymodesums[kInvoiceRowTypeCashPayment]!=0) then begin
    StartFormat(15);
    OutString(15,0,vpaymodetext[kInvoiceRowTypeCashPayment],false);
    OutVal(7,0,vpaymodesums[kInvoiceRowTypeCashPayment],M4Val,true);
    EndFormat;
  end;
  if (vpaymodesums[kInvoiceRowTypeCreditCardPayment]!=0) then begin
    StartFormat(15);
    OutString(15,0,vpaymodetext[kInvoiceRowTypeCreditCardPayment],false);
    OutVal(7,0,vpaymodesums[kInvoiceRowTypeCreditCardPayment],M4Val,true);
    EndFormat;
  end;
  if (vpaymodesums[kInvoiceRowTypeGiftVoucherPayment]!=0) then begin
   StartFormat(15);
    OutString(15,0,vpaymodetext[kInvoiceRowTypeGiftVoucherPayment],false);
    OutVal(7,0,vpaymodesums[kInvoiceRowTypeGiftVoucherPayment],M4Val,true);
    EndFormat;
  end;
  Gray_Divider(0,205);
  StartFormat(5);
  EndFormat;
LPrintIVCash:;  
  return;
end;
  
procedure PrintRestAcc(record RcVc RepSpec,record POSJournalVc POSJr,record RestAccVc RAr,LongInt transnr)
begin
  Boolean testf;
  row RestAccVc RArw;
  Integer i,rwcnt;
  val totq;
  vector val vpaymodesums;
  vector string 255 vpaymodetext;
  row PMBlock PMrw;

  testf = true;
  if (RepSpec.flags[0]==0) then begin
    if (RAr.Closed!=0) then begin testf = false; end;
  end;
  if (RepSpec.flags[1]==0) then begin
    if (RAr.Closed==0) then begin testf = false; end;
  end;
  if (testf==false) then begin
    goto LPrintRestAcc;
  end;
  StartFormat(15);
   OutString(0,0,USetStr(38588),false);
   OutStringID(3,"DblRestAccVc",transnr,false,POSJr.TransNr);
   OutString(4,0,POSJr.TransDate,false);
   OutString(7,0,POSJr.TransTime,true);
  EndFormat;
  if (nonblank(RAr.Addr0) or nonblank(RAr.VATNr)) then begin
    StartFormat(15);
     OutString(0,0,RAr.Addr0,false);
     OutString(4,0,RAr.VATNr,false);
    EndFormat;
  end;
  if (nonblank(RAr.MachineName) or nonblank(RAr.TerminalID)) then begin
    StartFormat(15);
     OutString(0,0,RAr.MachineName,false);
     OutString(4,0,RAr.TerminalID,false);
    EndFormat;
  end;
  if (nonblank(RAr.OfficialSerNr)) then begin
    StartFormat(15);
     OutString(0,0,RAr.OfficialSerNr,false);
    EndFormat;
  end;
  if (RAr.CashValue!=0) then begin
    vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + RAr.CashValue;
  end;
  if (RAr.Paid!=0) then begin
    GetPMRow(RAr.PayDeal,PMrw);
    switch (PMrw.CheckType) begin
      case kPayModeTypeGiftVoucher:
        vpaymodesums[kInvoiceRowTypeGiftVoucherPayment] = vpaymodesums[kInvoiceRowTypeGiftVoucherPayment] + RAr.Paid;
      case kPayModeTypeCreditCard:
        vpaymodesums[kInvoiceRowTypeCreditCardPayment] = vpaymodesums[kInvoiceRowTypeCreditCardPayment] + RAr.Paid;
      otherwise
        vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + RAr.Paid;
    end;
  end;
  if (RAr.Paid2!=0) then begin
    GetPMRow(RAr.PayDeal2,PMrw);
    switch (PMrw.CheckType) begin
      case kPayModeTypeGiftVoucher:
        vpaymodesums[kInvoiceRowTypeGiftVoucherPayment] = vpaymodesums[kInvoiceRowTypeGiftVoucherPayment] + RAr.Paid2;
      case kPayModeTypeCreditCard:
        vpaymodesums[kInvoiceRowTypeCreditCardPayment] = vpaymodesums[kInvoiceRowTypeCreditCardPayment] + RAr.Paid2;
      otherwise
        vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + RAr.Paid2;
    end;
  end;
  if (RAr.Paid3!=0) then begin
    GetPMRow(RAr.PayDeal3,PMrw);
    switch (PMrw.CheckType) begin
      case kPayModeTypeGiftVoucher:
        vpaymodesums[kInvoiceRowTypeGiftVoucherPayment] = vpaymodesums[kInvoiceRowTypeGiftVoucherPayment] + RAr.Paid3;
      case kPayModeTypeCreditCard:
        vpaymodesums[kInvoiceRowTypeCreditCardPayment] = vpaymodesums[kInvoiceRowTypeCreditCardPayment] + RAr.Paid3;
      otherwise
        vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + RAr.Paid3;
    end;
  end;
  
  Gray_Divider(2,7);
  rwcnt = MatRowCnt(RAr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RAr,i,RArw);
    switch (RArw.stp) begin
      case kInvoiceRowTypeNormal:
        StartFormat(15);
         OutStringOvst(2,0,RArw.ArtCode,false,RArw.ovst);
         OutValOvst(6,0,RArw.Quant,M4Val,true,RArw.ovst);
         OutValOvst(7,0,RArw.Sum,M4Val,true,RArw.ovst);
        EndFormat;
        if (RArw.ovst==0) then begin
          totq = totq + RArw.Quant;
        end;
        PrintPriceChanges("RestAccVc",RAr.SerNr,RArw.Price,i);
      case kInvoiceRowTypeCashPayment:
        vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + RArw.Sum;
        vpaymodetext[kInvoiceRowTypeCashPayment] = RArw.Spec;
      case kInvoiceRowTypeCreditCardPayment:
        vpaymodesums[kInvoiceRowTypeCreditCardPayment] = vpaymodesums[kInvoiceRowTypeCreditCardPayment] + RArw.Sum;
        vpaymodetext[kInvoiceRowTypeCreditCardPayment] = RArw.Spec;
      case kInvoiceRowTypeCreditCardPayment:
        vpaymodesums[kInvoiceRowTypeGiftVoucherPayment] = vpaymodesums[kInvoiceRowTypeGiftVoucherPayment] + RArw.Sum;
        vpaymodetext[kInvoiceRowTypeGiftVoucherPayment] = RArw.Spec;
    end;
  end;
  Gray_Divider(15,205);
  StartFormat(15);
   OutString(15,0,USetStr(38582),false);
   OutVal(7,0,RAr.Sum3,M4Val,true);
  EndFormat;
  StartFormat(15);
   OutString(15,0,USetStr(38583),false);
   OutVal(6,0,totq,M4Val,true);
   OutVal(7,0,RAr.Sum4,M4Val,true);
  EndFormat;
  if (vpaymodesums[kInvoiceRowTypeCashPayment]!=0) then begin
    StartFormat(15);
    OutString(15,0,vpaymodetext[kInvoiceRowTypeCashPayment],false);
    OutVal(7,0,vpaymodesums[kInvoiceRowTypeCashPayment],M4Val,true);
    EndFormat;
  end;
  if (vpaymodesums[kInvoiceRowTypeCreditCardPayment]!=0) then begin
    StartFormat(15);
    OutString(15,0,vpaymodetext[kInvoiceRowTypeCreditCardPayment],false);
    OutVal(7,0,vpaymodesums[kInvoiceRowTypeCreditCardPayment],M4Val,true);
    EndFormat;
  end;
  if (vpaymodesums[kInvoiceRowTypeGiftVoucherPayment]!=0) then begin
   StartFormat(15);
    OutString(15,0,vpaymodetext[kInvoiceRowTypeGiftVoucherPayment],false);
    OutVal(7,0,vpaymodesums[kInvoiceRowTypeGiftVoucherPayment],M4Val,true);
    EndFormat;
  end;
  Gray_Divider(0,205);
  StartFormat(5);
  EndFormat;
LPrintRestAcc:;  
  return;
end;
  
procedure PrintJournalRecord(record RcVc RepSpec,record POSJournalVc POSJr,Boolean repf,string tstr)
begin
  StartFormat(15);
   OutString(0,0,tstr,false);
   OutString(4,0,POSJr.TransDate,false);
   OutString(7,0,POSJr.TransTime,true);
  EndFormat;
  if (repf) then begin
    POSZReport(0,15,7,POSJr.Action==kPOSActionPrintZReport,POSJr.LocalMachineCode,POSJr.DrawerCode,RepSpec.sStartDate,RepSpec.sEndDate,RepSpec.sStartTime,RepSpec.sEndTime);
  end;
  StartFormat(5);
  EndFormat;
  return;
end;
  
procedure PrintXReport(record RcVc RepSpec,record POSJournalVc POSJr)
begin
  record RcVc lRepSpec;
  record POSJournalVc zPOSJr;
  Boolean found,testf,zfound;
  
  found = true;
  zPOSJr.DrawerCode = POSJr.DrawerCode;
  zPOSJr.LocalMachineCode = POSJr.LocalMachineCode;
  zPOSJr.TransDate = POSJr.TransDate;
  zPOSJr.TransTime = POSJr.TransTime;
  while (LoopBackKey("DrawerCode",zPOSJr,4,found)) begin
    if (zPOSJr.DrawerCode!=POSJr.DrawerCode) then begin found = false; end;
    if (zPOSJr.LocalMachineCode!=POSJr.LocalMachineCode) then begin found = false; end;
    if (zPOSJr.TransDate>POSJr.TransDate) then begin found = false; end;
    if (zPOSJr.TransDate==POSJr.TransDate) then begin
      if (zPOSJr.TransTime>POSJr.TransTime) then begin found = false; end;
    end;
    if (found) then begin
      testf = true;
      if (zPOSJr.Action!=kPOSActionPrintZReport) then begin testf = false; end;
      if (testf) then begin
        found = false;
        zfound = true;
      end;
    end;
  end;
  RecordCopy(lRepSpec,RepSpec);
  if (zfound) then begin
    lRepSpec.sStartDate = zPOSJr.TransDate;
    lRepSpec.sStartTime = zPOSJr.TransTime;
    lRepSpec.sEndDate = POSJr.TransDate;
    lRepSpec.sEndTime = POSJr.TransTime;
  end;
  PrintJournalRecord(lRepSpec,POSJr,true,USetStr(38580) & " " & USetStr(38577));
  return;
end;

procedure PrintZReport(record RcVc RepSpec,record POSJournalVc POSJr)
begin
  record RcVc lRepSpec;

  RecordCopy(lRepSpec,RepSpec);
  lRepSpec.sEndDate = POSJr.TransDate;
  lRepSpec.sEndTime = POSJr.TransTime;
  PrintJournalRecord(lRepSpec,POSJr,true,USetStr(38581) & " " & USetStr(38577));
  return;
end;

  
procedure PrintPOSJournalEntry(record RcVc RepSpec,record POSJournalVc POSJr)
begin
  record IVCashVc IVCr;
  record RestAccVc RAr;
  LongInt transnr;
  
  switch (POSJr.FileName) begin
    case "IVCashVc":
      IVCr.SerNr = POSJr.TransNr;
      ReadFirstMain(IVCr,1,true);
      transnr = IVCr.FiscalDeviceSeqNr;
      if (transnr<0)  then begin
        transnr = IVCr.SerNr;
      end;
    case "RestAccVc":
      RAr.SerNr = POSJr.TransNr;
      ReadFirstMain(RAr,1,true);
      transnr = RAr.FiscalDeviceSeqNr;
      if (transnr<0)  then begin
        transnr = RAr.SerNr;
      end;
  end;
  switch (POSJr.Action) begin
    case kPOSActionAddInvoiceRow: 
      switch (POSJr.FileName) begin
        case "IVCashVc":
          PrintIVCash(RepSpec,POSJr,IVCr,transnr);
        case "RestAccVc":
          PrintRestAcc(RepSpec,POSJr,RAr,transnr);
      end;
    case kPOSActionDeleteInvoiceRow: 
      switch (POSJr.FileName) begin
        case "IVCashVc":
//          PrintIVCash(RepSpec,POSJr,IVCr);
        case "RestAccVc":
//          PrintRestAcc(RepSpec,POSJr,RAr);
      end;
    case kPOSActionOpenBarTab: 
      PrintJournalRecord(RepSpec,POSJr,false,USetStr(38586));
    case kPOSActionCloseBarTab: 
      PrintJournalRecord(RepSpec,POSJr,false,USetStr(38587));
    case kPOSActionOpenDrawer: 
      PrintJournalRecord(RepSpec,POSJr,false,USetStr(38575));
    case kPOSActionPrintProformaInvoice: 
      PrintJournalRecord(RepSpec,POSJr,false,USetStr(38576) & " " & transnr & " " & USetStr(38577));
    case kPOSActionPrintProformaInvoiceCopy: 
      switch (POSJr.FileName) begin
        case "IVCashVc":
//          PrintIVCash(RepSpec,POSJr,IVCr);
        case "RestAccVc":
//          PrintRestAcc(RepSpec,POSJr,RAr);
      end;
      PrintJournalRecord(RepSpec,POSJr,false,USetStr(38584) & " " & transnr & " " & USetStr(38579) & " " & USetStr(38577));
    case kPOSActionPrintInvoice: 
      PrintJournalRecord(RepSpec,POSJr,false,USetStr(38578) & " " & transnr & " " & USetStr(38577));
    case kPOSActionPrintInvoiceCopy: 
      PrintJournalRecord(RepSpec,POSJr,false,USetStr(38584) & " " & transnr & " " & USetStr(38579) & " " & USetStr(38577));
      switch (POSJr.FileName) begin
        case "IVCashVc":
//          PrintIVCash(RepSpec,POSJr,IVCr);
        case "RestAccVc":
//          PrintRestAcc(RepSpec,POSJr,RAr);
      end;
    case kPOSActionPrintXReport:
      PrintXReport(RepSpec,POSJr); 
    case kPOSActionPrintZReport: 
      PrintZReport(RepSpec,POSJr); 
  end;
  return;
end;

function Boolean POSJournalEntryTest(record POSJournalVc lastPOSJr,record POSJournalVc POSJr)
begin
  Boolean res;
  
  res = false;
  if (lastPOSJr.FileName==POSJr.FileName) and (lastPOSJr.TransNr==POSJr.TransNr) and (lastPOSJr.Action==POSJr.Action) then begin
    res = true;
  end;
  POSJournalEntryTest = res;
  return;
end;

global
procedure POSEJournalRn(record RcVc RepSpec)
begin
  Integer rw;
  string 255 tstr;
  Boolean found,testf;
  record POSJournalVc POSJr;
  record POSJournalVc lastPOSJr;
  
  StartReportJob(USetStr(38570));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  Header(rw,USetStr(12542) & ": " & RepSpec.LastAcc,0);
  Header(rw,USetStr(12541) & ": " & RepSpec.FirstAcc,1);
  rw = rw + 1;
  EndHeader;
  SetRepCol(2,15);
  SetRepCol(3,50);
  SetRepCol(4,130);
  SetRepCol(5,170);
  SetRepCol(6,140);
  SetRepCol(7,205);
  StartFormat(15);
   OutString(0,0,USetStr(38571),false);
   OutString(3,0,USetStr(38572),false);
   OutString(4,0,USetStr(38573),false);
   OutString(5,0,USetStr(38574),false);
  EndFormat;
  Gray_Divider(0,1);
  
  POSJr.TransDate = RepSpec.sStartDate;
  found = true;
  while (LoopKey("TransDate",POSJr,1,found)) begin
    if (DateInRange(POSJr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (nonblank(RepSpec.FirstAcc)) then begin
        if (POSJr.LocalMachineCode!=RepSpec.FirstAcc) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.LastAcc)) then begin
        if (POSJr.DrawerCode!=RepSpec.LastAcc) then begin testf = false; end;
      end;
      if (testf) then begin
        testf = POSJournalEntryTest(lastPOSJr,POSJr)==false;
      end;
      if (testf) then begin
        PrintPOSJournalEntry(RepSpec,POSJr);
        RecordCopy(lastPOSJr,POSJr);
      end;
    end;
  end;
  EndJob;
  return;
end;