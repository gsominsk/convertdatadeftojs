external procedure HTItem(string,var string);
external procedure HTArtGroup(string, var string);
external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean ItemInItemGroupOrClass(string,string,string);
external function Boolean HasContactClassification();
external function Boolean HasCategories();
external procedure HTLevCat(string,var string);
external procedure HTCustClass(string,var string);
external function Boolean ContactInGroupClass(string,string,string,string,string,string);
external procedure HT2Per(Date, Date , var string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);

global
procedure PRPurRn(record RcVc RepSpec)
BEGIN
  record TBIVVc TBIVr;
  record ExpVc Expr;
  record VIVc VIr;
  row VIVc VIrw;
  row ExpVc Exprw;
  Boolean testf,TrHs;
  string 255 vefr,veto;
  val total,t;
  string 255 tstr;
  Integer rw;
  vefr = FirstInRange(RepSpec.f1,20);
  veto = LastInRange(RepSpec.f1,20);
  
  StartReportJob(USetStr(5580));  //BS 
   rw = 1;
   HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
   Header(rw,tstr,1);
   rw = rw +1;
   if (nonblank(RepSpec.f1)) then begin
     tstr = USetStr(5586);
     tstr = tstr & " ";
     tstr = tstr & RepSpec.f1;
     Header(rw,tstr,1);
     rw = rw + 1;
   end; 
   if (HasCategories) then begin
     HTLevCat(RepSpec.f5,tstr);
     if (nonblank(tstr)) then begin
       Header(rw,tstr,1);
       rw = rw + 1;
     end;
   end;
   if (HasContactClassification) then begin
     HTCustClass(RepSpec.f4,tstr);
     if (nonblank(tstr)) then begin
       Header(rw,tstr,1);
       rw = rw + 1;
     end;
   end;   
   if (nonblank(RepSpec.f2)) then begin
     tstr = USetStr(5581);
     tstr = tstr & " ";
     tstr = tstr & RepSpec.f2;
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
  if (nonblank(RepSpec.f3)) then begin
    HTItem(RepSpec.f3,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (HasItemGroups) then begin
    HTArtGroup(RepSpec.f6,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasItemClassification) then begin
    HTItemClass(RepSpec.f7,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
   
  EndHeader;
  StartFormat(15);
  OutString(0,0,USetStr(5232),false);
  OutString(100,0,USetStr(5581),false);
  OutString(150,0,USetStr(5582),false);
  OutString(200,0,USetStr(5583),true);
  OutString(210,0,USetStr(5584),false);
  OutString(480,0,USetStr(5585),true);
  EndFormat;
  Gray_Divider(0,1);
  VIr.VECode = vefr;
  TrHs = true;
  TBIVr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",TBIVr,1,TrHs)) begin
    if (nonblankdate(RepSpec.sEndDate)) then begin
      if (TBIVr.TransDate>RepSpec.sEndDate) then begin TrHs = false; end;
    end;  
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.f2)) then begin
        if (RepSpec.f2<>TBIVr.PRCode) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (RepSpec.f3<>TBIVr.ArtCode) then begin testf = false; end;
      end;
      if (testf) then begin
        testf = ItemInItemGroupOrClass(TBIVr.ArtCode,RepSpec.f6,RepSpec.f7);
      end;
      if ((TBIVr.oVc==2) and (RepSpec.flags[3]==0)) then begin testf = false; end;
      if ((TBIVr.oVc==3) and (RepSpec.flags[4]==0)) then begin testf = false; end;
      if ((TBIVr.oVc==1) and (RepSpec.flags[5]==0)) then begin testf = false; end;
      if (TBIVr.Invoice>=0) then begin // invoiced 
        if (RepSpec.flags[2]==0) then begin testf = false; end;
      end else begin
        if (RepSpec.flags[1]==0) then begin testf = false; end;
      end;
      if (testf) then begin
        if (TBIVr.oVc==1) then begin
        end;
        if (TBIVr.oVc==2) then begin
          VIr.SerNr = TBIVr.SerNr;
          if (ReadFirstMain(VIr,1,true)) then begin
            if (nonblank(veto)) then begin
                if (VIr.VECode<>veto) then begin
                  testf = false;
                end;
            end;
            if (VIr.Invalid<>0) then begin testf = false; end;
            if (testf) then begin
              if (nonblank(RepSpec.f5) or nonblank(RepSpec.f4)) then begin 
                VIr.SerNr = TBIVr.SerNr;
                if (ReadFirstMain(VIr,1,true)) then begin
                  testf = ContactInGroupClass(VIr.VECode,RepSpec.f5,RepSpec.f4,"SUPP","","");
                end;
              end;
            end;            
            if (testf) then begin
              MatRowGet(VIr,TBIVr.Row,VIrw);                    
              if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                t = -VIrw.Sum;
              end else begin
                t = VIrw.Sum;
              end;  
              t = MulRateToBase1(VIr.CurncyCode,t,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
              tstr = USetStr(1152);
              if (nonblank(tstr)) then begin
                tstr = tstr & ".";
              end;  
              tstr = tstr & VIr.SerNr;              
              StartFormat(15);
              OutStringID(0,"DblIDVIVc",tstr,false,VIr.SerNr);
              OutString(100,0,VIrw.PRCode,false);
              OutString(150,0,VIrw.Item,false);
              OutVal(200,0,VIrw.qty,M4UVal,true);
              tstr = Left(VIrw.Comment,30);
              OutString(210,0,tstr,false);
              OutVal(480,0,t,M4Val,true);
              EndFormat;
              total = t + total;
            end;  
          end;    
        end;
        if (TBIVr.oVc==3) then begin
          Expr.SerNr = TBIVr.SerNr;
          if (ReadFirstMain(Expr,1,true)) then begin
            if (Expr.Invalid==0) then begin 
            MatRowGet(Expr,TBIVr.Row,Exprw);
            t = Exprw.Sum - Exprw.VATSum;
            t = MulRateToBase1(Expr.CurncyCode,t,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,DefaultCurRoundOff);
            tstr = USetStr(1170);
            if (nonblank(tstr)) then begin
              tstr = tstr & ".";
            end;  
            tstr = tstr & Expr.SerNr;            
            StartFormat(15);
            OutStringID(0,"DblIDExpVc",tstr,false,Expr.SerNr);
            OutString(100,0,Exprw.PRCode,false);
            OutString(150,0,Exprw.Item,false);
            OutVal(200,0,Exprw.qty,M4UVal,true);
            tstr = Left(Exprw.Comment,30);
            OutString(210,0,tstr,false);
            OutVal(480,0,t,M4Val,true);//OpM46o(480,GetDblClk("DblPR"),&t,M4Val,true,recid);
            EndFormat;
            total = t + total;
            end;
          end;
        end;
      end;
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  OutVal(480,0,total,M4Val,true);
  EndFormat;
  EndJob;
  RETURN;
END;
