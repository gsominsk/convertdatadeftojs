external procedure HTArtGroup(string, var string);
external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasContactClassification();
external function Boolean HasCategories();
external procedure HTCustCat(string,var string);
external procedure HTCustClass(string,var string);
external procedure HTDispGroup(string,var string);
external procedure HT2Per(Date, Date , var string);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure HTIT(string,var string);
external procedure HTArts(string,string,var string);
external procedure HTPers(string,var string);
external procedure HTDetailLevel(Integer, var string);
external procedure GetProjectPrice(string,string,string,string,string,val,var val,var val,var string,var val,var string);

global function
Boolean GetCDPrice(string cust,string item,var val pp,var val dp)
BEGIN
  record CDVc CDr;
  row CDVc CDrw;
  Integer i,rwcnt;
  Boolean res;
  
  res = false;
  pp = 0;
  dp = 0;
  CDr.CustCode = cust;
  if (ReadFirstMain(CDr,1,true)) then begin
      rwcnt = MatRowCnt(CDr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(CDr,i,CDrw);
        if (CDrw.Item==item) then begin
          pp = CDrw.Price;
          dp = CDrw.Discount;
          res = true;
          i = rwcnt;
        end;
      end;
    end;
  GetCDPrice = res;
  RETURN;
END;

global
procedure FindPrTransPrice(string pr,Integer ovc,LongInt sernr,Integer rownr,string artcode,string emcode,var val price,var val reb)
BEGIN
  record TBIVVc TBIVr;
  string 10 markup,markupincur;
  val priceincur;
  
  price = 0;
  reb = 0;
  TBIVr.PRCode = pr;
  TBIVr.oVc = ovc;
  TBIVr.SerNr = sernr;
  TBIVr.Row = rownr;
  TBIVr.ArtCode = artcode;
  if (ReadFirstMain(TBIVr,5,true)) then begin
    price = TBIVr.Price;
    reb = TBIVr.Discount;
  end else begin
    GetProjectPrice(pr,artcode,emcode,"","",1,price,reb,markup,priceincur,markupincur);
//JCCUR    
    price = priceincur;
    markup = markupincur;
  end;
  RETURN;
END;

procedure HTProjects(string arg,var string res)
begin
  string 255 a,b;
  record PRVc PRr;

  a = FirstInRange(arg,20);
  b = LastInRange(arg,20);
  if (blank(a) and blank(b)) then begin
    res = USetStr(4851);
  end else begin
    res = USetStr(4852);
    res = res & a;
    if (a<>b) then begin
      res = res & " : ";
      res = res & b;
    end else begin
      PRr.Code = a;
      if (ReadFirstMain(PRr,1,true)) then begin
        res = res & " ";
        res = res & PRr.Name;
      end;
    end;
  end;
  return;
end;

global
procedure TSPrintHeader(record RcVc RepSpec)
begin
  Integer rw;
  string 255 tstr;
   
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  switch (RepSpec.ArtMode) begin
    case 0:
      HTDetailLevel(1,tstr); 
    case 1:
      HTDetailLevel(0,tstr);
    case 2:
      tstr = USetStr(4888);
    case 3:
      tstr = USetStr(4889);
    case 4:
      tstr = USetStr(4894);
  end;  
  Header(rw,tstr,0);
  HTProjects(RepSpec.f2,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTArts(RepSpec.f3,RepSpec.f3,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTPers(RepSpec.f1,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.AccStr)) then begin
    HTDispGroup(RepSpec.AccStr,tstr);
    Header(rw,tstr,0);
  end;
  if (HasItemGroups) then begin
    HTArtGroup(RepSpec.f4,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasItemClassification) then begin
    HTItemClass(RepSpec.f8,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;   
  if (HasCategories) then begin
    HTCustCat(RepSpec.f7,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasContactClassification) then begin
    HTCustClass(RepSpec.f6,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  return;
end;


global
procedure AddItemGroupResults(string person,string lastitgr,var val ginvp,var val gintp,var val gothp,
                              Array string EmpStatEMCode,Array string EmpStatITCode,Array val EmpStatginvv,Array val EmpStatgintv,
                              Array val EmpStatgothv,Array val EmpStatgtot,var Integer arrcnt)
BEGIN
  Integer i;

  for (i=0;i<=arrcnt;i=i+1) begin
    if ((EmpStatEMCode[i]==person) and (EmpStatITCode[i]==lastitgr)) then begin
      EmpStatginvv[i] = EmpStatginvv[i] + ginvp;
      EmpStatgintv[i] = EmpStatgintv[i] + gintp;
      EmpStatgothv[i] = EmpStatgothv[i] + gothp;
      EmpStatgtot[i] = EmpStatgtot[i] + ginvp + gintp + gothp;
      goto LAddItemGroupResults;
    end;
  end;
  arrcnt = arrcnt + 1;
  EmpStatginvv[arrcnt] = ginvp;
  EmpStatgintv[arrcnt] = gintp;
  EmpStatgothv[arrcnt] = gothp;
  EmpStatgtot[arrcnt] = ginvp + gintp + gothp;
  EmpStatEMCode[arrcnt] = person;
  EmpStatITCode[arrcnt] = lastitgr;
LAddItemGroupResults:;  
  ginvp = 0;
  gintp = 0;
  gothp = 0;
  RETURN;
END;

global
procedure PrintEMStatResults(record RcVc RepSpec,Array string EmpStatEMCode,Array string EmpStatITCode,Array val EmpStatginvv,Array val EmpStatgintv,
                              Array val EmpStatgothv,Array val EmpStatgtot,Integer arrcnt)
BEGIN
  record UserVc EMr;
  record ITVc ITr;
  Integer i;
  Boolean userprntdf;
  val t,t2; 
  val etot,einv,eint,eoth;
  string 20 lastem;

  lastem = "";
  for (i=0;i<=arrcnt;i=i+1) begin
    if (lastem!=EmpStatEMCode[i]) then begin
      StartFormat(15);
       EMr.Code = EmpStatEMCode[i];
       if (ReadFirstMain(EMr,1,true)) then begin end;
       OutString(11,0,EMr.Code,false);
       OutString(70,0,EMr.Name,false);
      EndFormat;
      userprntdf = true;
    end;
    lastem = EmpStatEMCode[i];
    if ((EmpStatginvv[i]!=0) or (EmpStatgintv[i]!=0) or (EmpStatgothv[i]!=0) or (EmpStatgtot[i]!=0)) then begin
      StartFormat(15);
      OutString(15,0,EmpStatITCode[i],false);
      ITr.Code = EmpStatITCode[i];
      if (ReadFirstMain(ITr,1,true)) then begin
        OutString(65,0,ITr.Comment,false);
      end;
      OutVal(200,0,EmpStatginvv[i],M4Val,true);
      OutVal(250,0,EmpStatgintv[i],M4Val,true);
      OutVal(300,0,EmpStatgothv[i],M4Val,true);
      OutVal(350,0,EmpStatgtot[i],M4Val,true);
      t = EmpStatgtot[i]/etot;    
      t2 = t*100;
      OutVal(400,0,t2,M4Val,true);
      t = EmpStatgtot[i];
      if (RepSpec.vals0!=0) then begin
        t = EmpStatgtot[i]*RepSpec.vals0;
        t = t/etot;
      end;
      t2 = EmpStatginvv[i]*100;
      t2 = t2/t;
      OutVal(480,0,t2,M4Prcnt,true);
      EndFormat;
    end;
    
    etot = etot + EmpStatginvv[i];
    etot = etot + EmpStatgintv[i] + EmpStatgothv[i];
//    etot = etot + EmpStatgothv[i];
    einv = einv + EmpStatginvv[i];
    eint = eint + EmpStatgintv[i];
    eoth = eoth + EmpStatgothv[i];
  end;

  Black_Divider(100,480);
  StartFormat(15);
   OutVal(200,0,einv,M4Val,true);
   OutVal(250,0,eint,M4Val,true);
   OutVal(300,0,eoth,M4Val,true);
   OutVal(350,0,etot,M4Val,true);
   t = etot;
   if (RepSpec.vals0!=0) then begin t = RepSpec.vals0; end;
   t2 = einv*100;
   t2 = t2/t;
   OutVal(480,0,t2,M4Prcnt,true);
  EndFormat;
  StartFormat(15);
  EndFormat;
  for (i=0;i<=arrcnt;i=i+1) begin
    EmpStatginvv[i] = blankval;
    EmpStatgintv[i] = blankval;
    EmpStatgothv[i] = blankval;
  end;
  RETURN;
END;

global
procedure AddSVOTypeValues(record WSVc WSr,Integer rownr,var val ginvp,var val gothp,var val gintp)
BEGIN
  record INVc INr;
  row WSVc WSrw;
  
/*
if (((gRcp->flags[1]==1) and (TSrw.ItemType!=3)) or (TSrw.ItemType==3))then begin
it works for service only right now
*/
  MatRowGet(WSr,rownr,WSrw);
/* This must be WRONG, it is the PRr.Type that is important */
  switch (WSrw.ItemType) begin
    case 1: ginvp = ginvp + WSrw.Quant;
    case 2: gintp = gintp + WSrw.Quant;
    case 3: gothp = gothp + WSrw.Quant;
  end;
  RETURN;
END;

global
procedure AddActTypeValues(string prcode,Time costt,var val ginvp,var val gothp,var val gintp)
BEGIN
  record PRVc PRr;
  val t3;

  t3 = TimeToVal(costt);
  PRr.Code = prcode;
  if (ReadFirstMain(PRr,1,true)) then begin
    switch (PRr.Type) begin
      case 0: ginvp = ginvp + t3;
      case 1: gintp = gintp + t3;
      case 2: gothp = gothp + t3;
    end;
  end;
  RETURN;
END;

global
procedure AddProjectTypeValues(record TSVc TSr,Integer rownr,var val ginvp,var val gothp,var val gintp,Integer UseDiscount)
BEGIN
  record PRVc PRr;
  row TSVc TSrw;
  val t,t2,r;

  MatRowGet(TSr,rownr,TSrw);
  FindPrTransPrice(TSrw.PRCode,1,TSr.SerNr,rownr,TSrw.ArtCode,"",t,r);
  CalcSum(TSrw.Qty,t,0,r,t2,UseDiscount);
  PRr.Code = TSrw.PRCode;
  if (ReadFirstMain(PRr,1,true)) then begin
    switch (PRr.Type) begin
      case 0: 
        ginvp = ginvp + TSrw.Qty;
      case 1:  
        gintp = gintp + TSrw.Qty;
      case 2:  
        gothp = gothp + TSrw.Qty;
    end;
  end;
  RETURN;
END;
