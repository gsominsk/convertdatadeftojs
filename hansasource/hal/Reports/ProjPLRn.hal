external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean ItemInItemGroupOrClass(string,string,string);
external procedure HTProjects(string,string,var string);
external procedure HTCusts(string,string,var string);
external procedure HTItems(string,var string);
external procedure HTIT(string,var string);
external procedure HTClasses(string,string,var string);
external procedure HTDetailLevel(Integer, var string);
external procedure HTSort1(Integer, var string);

external function Boolean GetItemPriceDiscount2(string,record INVc,val,string,string,
                                                string,string,string,var val,var string,
                                                var val,var val,Integer,var Boolean,Date);
external function Boolean GetTimeClassPrice(string,string,var val,var val);
external procedure GetProjectPrice(string,string,string,string,string,val,var val,var val,var string,var val,var string);
external procedure GetTIPrice(record TIVc,string,string,var Integer,var val);


procedure SetupRepSpecVars(record RcVc RepSpec,var string project,var string frcu,var string tocu,var string timeclass,
                           var string ingroup,var string frin,var string toin,var Integer overview,var Integer sorting,
                           var Integer services)
BEGIN
  project = RepSpec.f1;
  frcu = FirstInRange(RepSpec.f2,20);
  tocu = LastInRange(RepSpec.f2,20);
  timeclass = RepSpec.AccStr;
  ingroup = RepSpec.FirstAcc;
  frin = FirstInRange(RepSpec.f3,20);
  toin = LastInRange(RepSpec.f3,20);  
  overview = RepSpec.ArtMode;
  sorting = RepSpec.flags[0];
  services = RepSpec.flags[1];
END;

global
procedure ProjPLRn(record RcVc RepSpec) 
BEGIN
  string 20 frin,toin,frcu,tocu,project;
  string 5 ingroup,timeclass;
  string 20 keystr;
  string 255 tstr;
  Integer overview,sorting,servicesonly;
  record INVc INr;
  record PRVc PRr;
  Boolean TrHs,testf,L99f;
  val price,discount,sum,priceincur;
  Integer rw;
  string 10 markup,markupincur;
  
  L99f = false; 
  SetupRepSpecVars(RepSpec,project,frcu,tocu,timeclass,ingroup,frin,toin,overview,sorting,servicesonly);
  PRr.Code = project;
  if (ReadFirstMain(PRr,1,true)) then begin
  end;  
  StartReportJob(USetStr(8860));
    rw = 1;
    HTProjects(project,project,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
/*    
    HTDetailLevel(RepSpec.ArtMode,tstr);
    Header(rw,tstr,0);
*/    
    HTCusts(RepSpec.f2,RepSpec.f2,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
    HTSort1(RepSpec.flags[0],tstr);
    Header(rw,tstr,0);
    HTItems(RepSpec.f3,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
    if (HasItemGroups) then begin 
      HTIT(RepSpec.FirstAcc,tstr);
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    if (HasItemClassification) then begin
      HTItemClass(RepSpec.f4,tstr);
      if (nonblank(tstr)) then begin
        Header(rw,tstr,1);
        rw = rw + 1;
      end;
    end;    
    HTClasses(RepSpec.AccStr,RepSpec.AccStr,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  EndHeader;
  if (blank(project)) then begin
    StartFormat(15);
     OutString(0,0,USetStr(8861),false);
    EndFormat;
    L99f = true;
  end;
  if (L99f==false) then begin
    if (servicesonly==0) then begin      
      switch (sorting) begin
        case 1: keystr = "Group";
        case 2: keystr = "Name";
        otherwise keystr = "Code";
      end;
    end else begin
      keystr = "ItemType";
      INr.ItemType = 3;
    end;
    StartFormat(15);
     OutString(0,0,USetStr(8862),false);
     OutString(80,0,USetStr(8865),false);
     OutString(370,0,USetStr(8863),true);
     OutString(450,0,USetStr(8864),true);
    EndFormat;  
    Gray_Divider(0,1);
    INr.Code = frin;
    TrHs = true;
    while (LoopKey(keystr,INr,0,TrHs)) begin
      testf = true;
      if (servicesonly==1) then begin
        if (INr.ItemType<>3) then begin TrHs = false; end;
      end else begin 
        if (nonblank(toin)) then begin
          if (INr.Code>toin) then begin TrHs = false; end;
        end;
      end;  
      if (TrHs) then begin      
        testf = true;
        if (servicesonly==1) then begin
          if (nonblank(toin)) then begin
            if (INr.Code>toin) then begin testf = false; end;
          end;
        end;
        if (testf) then begin
          testf = ItemInItemGroupOrClass(INr.Code,ingroup,RepSpec.f4);
        end;        
        if (testf) then begin      
          GetProjectPrice(project,INr.Code,"",timeclass,PRr.CurncyCode,1,price,discount,markup,priceincur,markupincur);
          StartFormat(15);
           OutString(0,"DblINVc",INr.Code,false);      
           OutString(80,0,INr.Name,false);    
           if (priceincur!=0)  then begin
             OutVal(370,0,priceincur,M4Val,true);      
             OutVal(450,0,discount,M4Val,true);      
             OutString(1,0,PRr.CurncyCode,true);      
           end else begin
             OutVal(370,0,price,M4Val,true);      
             OutVal(450,0,discount,M4Val,true);      
           end;
          EndFormat;
        end;
      end;
    end;
  end;  
L99:;  
  EndJob;
  RETURN;
END;
