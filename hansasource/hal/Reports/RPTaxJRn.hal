external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure GetCurncyComment(string,var string);

procedure GetItemEANTextAndCode(string itemcode,var string eantext,var string eancode)
begin
  record INVc INr;
  record ITVc ITr;
  record CommodityVc Commodityr;
  string 20 ccode;
  
  eantext = USetStr(13831);
  ccode = "";
  INr.Code = itemcode;
  if (ReadFirstMain(INr,1,true)) then begin
    if (nonblank(INr.EUCodex)) then begin
      ccode = INr.EUCodex;
    end else begin
      ITr.Code = INr.Group;
      if (ReadFirstMain(ITr,1,true)) then begin
        if (nonblank(ITr.EUCodex)) then begin
          ccode = ITr.EUCodex;
        end;
      end;
    end;
  end;
  if (nonblank(ccode)) then begin
    Commodityr.Number = ccode;
    if (ReadFirstMain(Commodityr,1,true)) then begin
      eantext = Commodityr.Comment;    
    end;
  end;
  eancode = ccode;

  return;
end;

procedure  GetTaxPerc(string region,string eancode,date wdate,var val tax1perc,var val tax2perc)
begin
  record RSTaxVc RSTaxr;
  row RSTaxVc RSTaxrw;
  integer i,ar;
  string 40 ckey;


  tax1perc = -1;
  tax2perc = -1;
  ckey = "RegionEUCodex:" & eancode;
  RSTaxr.Region = region;
  if (ReadFirstKey("Region",RSTaxr,1,true)) then begin
    if (RSTaxr.RegionTAXPrc>=0) then begin
      tax2perc = RSTaxr.RegionTAXPrc;
    end;
    ar = MatRowCnt(RSTaxr);
    for (i=0;i<ar;i=i+1) begin
      MatRowGet(RSTaxr,i,RSTaxrw);
      if (eancode==RSTaxrw.EUCodex) then begin
        if (RSTaxrw.TAXPrc>=0) then begin
          tax1perc = RSTaxrw.TAXPrc;
          i = ar;
        end;
      end; 
    end;  
  end;
 
  return;
end;

procedure PrintRPTaxJHeader(record RcVc RepSpec)
begin
  string 255 tstr;
  record CYBlock CYr;
  record RegionVc Regionr;
  record BaseCurBlock BaseCurr;

  BlockLoad(CYr);
  BlockLoad(BaseCurr);
 
  tstr = USetStr(13911) & CYr.CompName;
  StartFormat(15);OutString(0,0,tstr,false);EndFormat;
  tstr = USetStr(13912) & CYr.VATNr;
  StartFormat(15);OutString(0,0,tstr,false);EndFormat;
  tstr = USetStr(13913) & RepSpec.sStartDate & ":" & RepSpec.sEndDate;
  StartFormat(15);OutString(0,0,tstr,false);EndFormat;
  if (RepSpec.flags[2]==1) then begin
     tstr = USetStr(13914);
     StartFormat(15);OutString(0,0,tstr,false);EndFormat;
  end;
  if (RepSpec.flags[3]==1) then begin
     tstr = USetStr(13915);
     StartFormat(15);OutString(0,0,tstr,false);EndFormat;
  end;
  if (RepSpec.basecurncy==0) then begin
    GetCurncyComment(BaseCurr.BaseCur1,tstr);
  end else begin  
    GetCurncyComment(BaseCurr.BaseCur2,tstr);
  end;  
  tstr = USetStr(13916) & tstr;
  StartFormat(15);OutString(0,0,tstr,false);EndFormat;
  if (nonblank(RepSpec.f1)) then begin
    Regionr.Code = RepSpec.f1;
    if (ReadFirstMain(Regionr,1,true)) then begin
      tstr = Regionr.Name;
    end;
    tstr = USetStr(13917) & ": " & tstr;
    StartFormat(15);OutString(0,0,tstr,false);EndFormat;
  end;
  Gray_Divider(0,1);
  return;
end;

procedure AddToRegionArray(record RegionVc Regionr,val sum,Array string aregioncode,Array string aregionname,Array val aregionsum,var Integer acnt)
begin
  Integer i;
  
  for (i=0;i<acnt;i=i+1) begin
    if (aregioncode[i]==Regionr.Code) then begin
      aregionsum[i] = aregionsum[i] + sum;
      goto LAddToRegionArray;
    end;
  end;
  aregioncode[acnt] = Regionr.Code;
  aregionname[acnt] = Regionr.Name;
  aregionsum[acnt] = sum;
  acnt = acnt + 1;
LAddToRegionArray:;  
  return;
end;

procedure PrintRegionArray(Array string aregioncode,Array string aregionname,Array val aregionsum,Integer acnt)
begin
  Integer i;
  
  if (acnt>0) then begin
    StartFormat(15);
    EndFormat;
    StartFormat(15);
     OutString(4,0,USetStr(13917),false);
     OutString(1,0,USetStr(13925),true);
    EndFormat;
    Gray_Divider(220,1);
  end;
  for (i=0;i<acnt;i=i+1) begin
    StartFormat(15);
     OutString(4,0,aregionname[i],false);
     OutVal(1,0,aregionsum[i],M4Val,true);
    EndFormat;
  end;
  return;
end;

procedure PrintTaxPerRegion(record RcVc RepSpec,record IVVc IVr,Array string aregioncode,Array string aregionname,Array val aregionsum,var Integer acnt)
begin
  row IVVc IVrw;
  Integer i,rwcnt;
  Boolean startf;
  record RegionVc Regionr;
  val tax2;
  Boolean testf,rowpercf;
   
  StartFormat(5);
  EndFormat;
  StartFormat(15);
  OutString(4,0,USetStr(13917),false);
  OutString(1,0,USetStr(13925),true);
  EndFormat;
  Gray_Divider(220,1);
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    testf = true;
    if (IVrw.stp!=kInvoiceRowTypePerceptionTax) then begin testf = false; end;
    if (nonblank(RepSpec.f1)) then begin
      if (IVrw.CuAccCode!=RepSpec.f1) then begin testf = false; end;
    end;
    if (testf) then begin    
      Regionr.Code = IVrw.CuAccCode;
      ReadFIrstMain(Regionr,1,true);

      if (RepSpec.basecurncy==0) then begin
        tax2 = MulRateToBase1(IVr.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
      end else begin
        tax2 = MulRateToBase2(IVr.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
      end;
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        tax2 = -tax2;
      end;
      StartFormat(15);
       OutString(4,0,Regionr.Name,false);
       OutVal(1,0,tax2,M4Val,true);
      EndFormat;
      rowpercf = true;
      AddToRegionArray(Regionr,tax2,aregioncode,aregionname,aregionsum,acnt);
    end;
  end;
  if (rowpercf==false) then begin
    Regionr.Code = IVr.Region;
    ReadFIrstMain(Regionr,1,true);
    if (RepSpec.basecurncy==0) then begin
      tax2 = MulRateToBase1(IVr.CurncyCode,IVr.TAX2Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    end else begin
      tax2 = MulRateToBase2(IVr.CurncyCode,IVr.TAX2Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    end;
    if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
      tax2 = -tax2;
    end;
    StartFormat(15);
     OutString(4,0,Regionr.Name,false);
     OutVal(1,0,tax2,M4Val,true);
    EndFormat;
    AddToRegionArray(Regionr,tax2,aregioncode,aregionname,aregionsum,acnt);
  end;
  Gray_Divider(220,1);
  return;
end;

function Boolean TestRegion(string region,record IVVc IVr,var val tax2)
begin
  Boolean res;
  row IVVc IVrw;
  Integer i,rwcnt;
  
  tax2 = blankval;
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (nonblank(IVrw.CuAccCode)) then begin
      if (IVrw.CuAccCode==region) then begin
        res = true;
        tax2 = IVrw.Sum;
//        tax2 = MulRateToBase1(IVr.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
      end;
      goto LTestRegion;
    end;
  end;
  if (IVr.Region==region) then begin
    tax2 = MulRateToBase1(IVr.CurncyCode,IVr.TAX2Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    tax2 = IVr.TAX2Sum;
    res = true;
  end;
LTestRegion:;
  TestRegion = res;
  return;
end;

global
procedure RPTaxJRn(record RcVc RepSpec)
begin
  record IVVc IVr;
  boolean TrHs,testf,testfrow;
  string 255 tstr;
  integer i,ar;
  date sdate,edate;
  string 60 eantext;
  string 20 eancode;
  Array string 255 aregioncode;
  Array string 255 aregionname;
  Array val aregionsum;
  Integer acnt;

  boolean found;
  val stax1,stax2,ssum1,tax1,tax2;

  sdate = RepSpec.sStartDate;
  edate = RepSpec.sEndDate;
  
  StartReportNoHeaderJob(USetStr(13910));
  SetRepCol(2,60);
  SetRepCol(3,145); 
  SetRepCol(4,220);
  SetRepCol(5,370);
  SetRepCol(6,420);
  
  PrintRPTaxJHeader(RepSpec);
   
  StartFormat(15);
  OutString(0,0,USetStr(13918),false);
  OutString(2,0,USetStr(13919),false);
  OutString(3,0,USetStr(13920),false);
  OutString(4,0,USetStr(13921),false);
  OutString(5,0,USetStr(13926),true);
  if (RepSpec.flags[2]==1) then begin
    OutString(6,0,USetStr(13922),true);
  end;
  if (RepSpec.flags[3]==1) then begin
    OutString(1,0,USetStr(13923),true);
  end;
  EndFormat;
  Gray_Divider(0,1);
  
  TrHs = true;
  IVr.TransDate = sdate;
  stax1 = blankval; stax2 = blankval;
  While (LoopKey("TransDate",IVr,1,TrHs)) begin
    testf = true; 
    if (IVr.TransDate>edate) then begin
      TrHs = false; testf = false;
    end;
    if (IVr.OKFlag==0) then begin
      testf = false;
    end;
    if (IVr.Invalid<>0) then begin
      testf = false;
    end; 
    tax2 = IVr.TAX2Sum;
    if (blank(IVr.OfficialSerNr)) then begin
      testf = false;       
    end;
    if (testf) then begin    
      if (nonblank(RepSpec.f1)) then begin
        testf = TestRegion(RepSpec.f1,IVr,tax2);   
      end;
    end;
    if (testf) then begin    
      tax1 = IVr.TAX1Sum;
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        tax1 = - tax1;
        tax2 = - tax2;
      end;
      if (blank(tax1)) then begin
        tax1 = 0;
      end;
      if (blank(tax2)) then begin
        tax2 = 0;
      end;
      if (testf) then begin
        testf = false;
        if (tax1<>0 and  RepSpec.flags[2]==1) or (tax2<>0 and  RepSpec.flags[3]==1) then begin
          testf = true;
        end;
      end;
      if (testf) then begin
        StartFormat(15);
        OutDate(0,0,IVr.TransDate,false);
        OutStringID(2,"DblIVVc",IVr.OfficialSerNr,false,IVr.SerNr);
        OutString(3,0,IVr.VATNr,false);
        OutString(4,0,Left(IVr.Addr0,35),false);
        if (RepSpec.basecurncy==0) then begin
          IVr.Sum1 = MulRateToBase1(IVr.CurncyCode,IVr.Sum1,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
        end else begin
          IVr.Sum1 = MulRateToBase2(IVr.CurncyCode,IVr.Sum1,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
        end;
        ssum1 = ssum1 + IVr.Sum1;
        OutVal(5,0,IVr.Sum1,M4Val,true);
        if (RepSpec.flags[2]==1) then begin
          if (RepSpec.basecurncy==0) then begin
            tax1 = MulRateToBase1(IVr.CurncyCode,tax1,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          end else begin
            tax1 = MulRateToBase2(IVr.CurncyCode,tax1,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          end;
          OutVal(6,0,tax1,M4Val,true);
          stax1 = stax1 + tax1;
        end;
        if (RepSpec.flags[3]==1) then begin
          if (RepSpec.basecurncy==0) then begin
            tax2 = MulRateToBase1(IVr.CurncyCode,tax2,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          end else begin
            tax2 = MulRateToBase2(IVr.CurncyCode,tax2,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          end;
          OutVal(1,0,tax2,M4Val,true);
          stax2 = stax2 + tax2;
        end;
        EndFormat;
        if (RepSpec.flags[3]!=0) then begin
          PrintTaxPerRegion(RepSpec,IVr,aregioncode,aregionname,aregionsum,acnt);
        end;
      end;
    end;
  end;   
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(4,0,USetStr(13924),false);
  OutVal(5,0,ssum1,M4Val,true);
  if (RepSpec.flags[2]==1) then begin
    OutVal(6,0,stax1,M4Val,true);
  end;
  if (RepSpec.flags[3]==1) then begin
    OutVal(1,0,stax2,M4Val,true);
   end;   
  EndFormat;    
  PrintRegionArray(aregioncode,aregionname,aregionsum,acnt);
    
  EndJob;

  return;
end;