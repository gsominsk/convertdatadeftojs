external function LongInt DateDiff(Date,Date);
external function Boolean IsCancelState(String);

procedure AddToArray(string tstr,Array string atstr,var Integer atstrcnt)
begin
  Integer i;
  
  for (i=0;i<atstrcnt;i=i+1) begin
    if (atstr[i]==tstr) then begin
      goto LAddToArray;
    end;
  end;
  atstr[atstrcnt] = tstr;
  atstrcnt = atstrcnt + 1;
LAddToArray:;  
  return;
end;

procedure AddToGuestNationStat(record RcVc RepSpec,record JobVc Jobr,row JobVc Jobrw,
                               Array string aCountryCode,var Integer anatcnt,
                               var vector val vNatArrs,var vector val vNatNights)
begin
  record CUVc CUr;
  val nights;
  string 255 tstr;
  
  CUr.Code = Jobrw.GuestCode;
  ReadFirstMain(CUr,1,true);
  tstr = CUr.Nationality;
  if (blank(tstr)) then begin
    tstr = USetStr(33616);
  end;
  if (DateInRange(Jobr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)) then begin
    vNatArrs[tstr] = vNatArrs[tstr] + 1;
  end;
  if (Jobr.TransDate>RepSpec.sStartDate) then begin
    if (Jobr.EndDate<RepSpec.sEndDate) then begin
      nights = DateDiff(Jobr.EndDate,Jobr.TransDate);
    end else begin
      nights = DateDiff(RepSpec.sEndDate,Jobr.TransDate);
    end;
  end else begin
    if (Jobr.EndDate<RepSpec.sEndDate) then begin
      nights = DateDiff(Jobr.EndDate,RepSpec.sStartDate);
    end else begin
      nights = DateDiff(RepSpec.sEndDate,RepSpec.sStartDate);
    end;
  end;
  vNatNights[tstr] = vNatNights[tstr] + nights;
  AddToArray(tstr,aCountryCode,anatcnt);
  return;
end;

procedure PrnintGuestNationStat(Array string aCountryCode,var Integer anatcnt,
                                var vector val vNatArrs,var vector val vNatNights)
begin
  Integer i;
  record CountryVc Countryr;
  val tota,totn;
  
  for (i=0;i<anatcnt;i=i+1) begin
    Countryr.Code = aCountryCode[i];
    ReadFirstMain(Countryr,1,true);
    StartFormat(15);
     OutString(0,0,aCountryCode[i],false);
     OutString(70,0,Countryr.Nationality,false);
     OutString(170,0,Countryr.Comment,false);
     OutVal(420,0,vNatArrs[aCountryCode[i]],M4Val,true);
     OutVal(480,0,vNatNights[aCountryCode[i]],M4Val,true);
    EndFormat;
    tota = tota + vNatArrs[aCountryCode[i]];
    totn = totn + vNatNights[aCountryCode[i]];
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  OutVal(420,0,tota,M4Val,true);
  OutVal(480,0,totn,M4Val,true);
  EndFormat;
  return;
end;

global
procedure GuestNationStatRn(record RcVc RepSpec)
begin
  record JobVc Jobr;
  Boolean found,testf;
  Integer p1,p2,p3,p4,p5,p6,p7,p8;
  Integer rwcnt,i;
  Row JobVc Jobrw;
  string 255 tstr;
  string 255 frcu,tocu;
  LongInt frnr,tonr;
  Integer lenclass;
  Date blankd;
  Array string 255 aCountryCode;
  Integer anatcnt;
  vector val vNatArrs;
  vector val vNatNights;
   
  StartReportJob(USetStr(33610));
  EndHeader;

  frcu = FirstInRange(RepSpec.f1,20);
  tocu = LastInRange(RepSpec.f1,20);
  frnr = FirstInRange(RepSpec.f2,20);
  tonr = LastInRange(RepSpec.f2,20);

  StartFormat(15);
  OutString(0,0,USetStr(33611),false);
  OutString(70,0,USetStr(33612),false);
  OutString(170,0,USetStr(33613),false);
  OutString(420,0,USetStr(33614),true);
  OutString(480,0,USetStr(33615),true);
  EndFormat;
  Gray_Divider(0,1);

  lenclass = 4;
  while (lenclass>=0) begin
    ResetLoop(Jobr);
    Jobr.LengthClass = lenclass;
    Jobr.TransDate = RepSpec.sStartDate;
    switch (lenclass) begin
      case 4: Jobr.TransDate = blankd;
      case 3: Jobr.TransDate = AddDay(Jobr.TransDate,-366);
      case 2: Jobr.TransDate = AddDay(Jobr.TransDate,-31);
      case 1: Jobr.TransDate = AddDay(Jobr.TransDate,-7);
      case 0: ;
    end;
    found = true;
    while (LoopKey("LengthClass",Jobr,2,found)) begin
      if (Jobr.LengthClass!=lenclass) then begin found = false; end;
      if (Jobr.TransDate>RepSpec.sEndDate) then begin found = false; end;
      if (found) then begin      
        testf = true;
        if (nonblank(RepSpec.f2)) then begin
          if (Jobr.SerNr<frnr) then begin testf = false; end;
          if (Jobr.SerNr>tonr) then begin testf = false; end;
        end;
        if (nonblank(RepSpec.f1)) then begin
          if (Jobr.CUCode<frcu) then begin testf = false; end;
          if (Jobr.CUCode>tocu) then begin testf = false; end;
        end;
        if (testf) then begin      
          if (IsCancelState(Jobr.ResStatus)) then begin
            testf = false;
          end;
        end;
        if (testf) then begin      
          rwcnt = MatRowCnt(Jobr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(Jobr,i,Jobrw);
            AddToGuestNationStat(RepSpec,Jobr,Jobrw,aCountryCode,anatcnt,vNatArrs,vNatNights);
          end;
        end;
      end;
    end;
    lenclass = lenclass - 1;
  end;  
  PrnintGuestNationStat(aCountryCode,anatcnt,vNatArrs,vNatNights);
  EndJob;
  return;
end;
