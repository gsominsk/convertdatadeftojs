external procedure HTCusts(string, string, var string);
external procedure HT2Per(Date, Date , var string);
external function Boolean SetInSet2(string,string);
external function Boolean ItemInItemGroupOrClass(string,string,string);

function Boolean HasItemBeenBoughtFromSupplier(string item,record RcVc RepSpec)
begin
  Boolean res;
  record ItemHistVc IHr;
  Boolean found;
  
  found = true;
  IHr.FileName = "PUVc";
  IHr.ArtCode = item;
  IHr.TransDate = RepSpec.sStartDate;
  while (LoopKey("FNArtCode",IHr,3,found)) begin
    if (IHr.FileName!="PUVc") then begin found = false; end;
    if (IHr.ArtCode!=item) then begin found = false; end;
    if (IHr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    if (found) then begin
      res = true;
      found = false;
    end;
  end;
  HasItemBeenBoughtFromSupplier = res;
  return;
end;

procedure FindContract(record RcVc RepSpec,string CustCode, var boolean found, var boolean nocontr)//,var val count) 
begin
  record COVc COr;
  row COVc COrw;
  integer i, rwcnt;
  boolean TrHs,testf;
  string 255 artc;
  integer noofcontr; 
  
  TrHs = true;
  artc = RepSpec.f2;
  COr.CustCode = CustCode;
  while (LoopKey("CustCode",COr,1,TrHs)) begin
    if (TrHs) then begin
      if (COr.CustCode <> CustCode) then begin
         TrHs = false; 
      end;
    end; 
    if (TrHs) then begin
      testf = true;
/*
Bjorn says it is wrong            
      if (DateInRange(COr.startDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
        testf = false;
      end;
*/      
      if (testf) then begin
        noofcontr = noofcontr + 1;
        found = false;
        rwcnt = MatRowCnt(COr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(COr,i,COrw);
          if (COrw.ArtCode==artc) then begin
            found = true;
            if (found) then begin 
              found = ItemInItemGroupOrClass(artc,RepSpec.FirstAcc,RepSpec.f7);
            end;  
            if (found and nonblank(RepSpec.AccStr)) then begin 
              found = HasItemBeenBoughtFromSupplier(COrw.ArtCode,RepSpec);
            end;
            if (found) then begin
              goto L88;
            end;
          end;
        end;
      end;   
    end; 
  end; 
  if (noofcontr <> 0) then begin
    nocontr = true;
  end;
  L88:;
  return
end;

procedure FindInvoice(record RcVc RepSpec,string CustCode,var Boolean found)
begin
  record IVVc IVr;
  row IVVc IVrw;
  Integer i, rwcnt;
  Boolean TrHs,testf,test2f;
  record INVc INr;
  
  if ((nonblank(RepSpec.f2)) or (nonblank(RepSpec.FirstAcc)) or (nonblank(RepSpec.f7))) then begin
    TrHs = true;  
  end;
  IVr.CustCode = CustCode;
  while (LoopKey("CustCode",IVr,1,TrHs)) begin
    if (TrHs) then begin
      if (IVr.CustCode!=CustCode) then begin
         TrHs = false; 
      end;
    end; 
    if (TrHs) then begin
      testf = true;
      if (IVr.OKFlag==0) then begin testf = false; end;
      if (IVr.Invalid!=0) then begin testf = false; end;
      if (DateInRange(IVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;
      if (testf) then begin
        found = false;
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          test2f = true;
          MatRowGet(IVr,i,IVrw);
          if (nonblank(RepSpec.f2)) then begin
            if (IVrw.ArtCode!=RepSpec.f2) then begin
              test2f = false;
            end;
          end;
          if (test2f) then begin 
            test2f = ItemInItemGroupOrClass(IVrw.ArtCode,RepSpec.FirstAcc,RepSpec.f7);
          end;
          if (test2f) then begin 
            if (nonblank(RepSpec.AccStr)) then begin 
              test2f = HasItemBeenBoughtFromSupplier(IVrw.ArtCode,RepSpec);
            end;
          end;
          if (test2f) then begin 
            found = true;
            goto LFindInvoice;
          end;
        end;
      end; // for   
    end;  //TrHs
  end; //while
LFindInvoice:;
  return;
end;

procedure FindQuotation(record RcVc RepSpec,string CustCode,var Boolean found)
begin
  record QTVc QTr;
  row QTVc QTrw;
  Integer i, rwcnt;
  Boolean TrHs,testf,test2f;
  record INVc INr;
  
  found = false;
  if (nonblank(RepSpec.f2)) or (nonblank(RepSpec.FirstAcc)) then begin
    TrHs = true;  
  end;
  QTr.CustCode = CustCode;
  QTr.QTDate = RepSpec.sStartDate;
  while (LoopKey("CustDate",QTr,2,TrHs)) begin
    if (TrHs) then begin
      if (QTr.CustCode!=CustCode) then begin
        TrHs = false; 
      end;
      if (QTr.QTDate>RepSpec.sEndDate) then begin
        TrHs = false; 
      end;
    end; 
    if (TrHs) then begin
      testf = true;
      if (QTr.Rejected!=2) then begin testf = false; end;
      if (testf) then begin
        rwcnt = MatRowCnt(QTr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(QTr,i,QTrw);
          test2f = true;
          if (nonblank(RepSpec.f2)) then begin
            if (QTrw.ArtCode!=RepSpec.f2) then begin
              test2f = false;
            end;
          end;
          if (test2f) then begin 
            test2f = ItemInItemGroupOrClass(QTrw.ArtCode,RepSpec.FirstAcc,RepSpec.f7);
          end;   
          if (test2f) then begin       
            found = true;
            goto LFindQuotation;          
          end;
        end; // for   
      end;
    end;  //TrHs
  end; //while
LFindQuotation:;
  return;
end;

procedure FindOrder(record RcVc RepSpec,string CustCode,var Boolean found)
begin
  record ORVc ORr;
  row ORVc ORrw;
  Integer i, rwcnt;
  Boolean TrHs,testf;
  record INVc INr;
  
  found = false;
  if (nonblank(RepSpec.f2)) or (nonblank(RepSpec.FirstAcc)) then begin
    TrHs = true;  
  end;
  ORr.CustCode = CustCode;
  ORr.OrdDate = RepSpec.sStartDate;
  while (LoopKey("CustDate",ORr,2,TrHs)) begin
    if (TrHs) then begin
      if (ORr.CustCode!=CustCode) then begin
        TrHs = false; 
      end;
      if (ORr.OrdDate>RepSpec.sEndDate) then begin
        TrHs = false; 
      end;
    end; 
    if (TrHs) then begin
      rwcnt = MatRowCnt(ORr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(ORr,i,ORrw);
        testf = true;
        if (nonblank(RepSpec.f2)) then begin
          if (ORrw.ArtCode!=RepSpec.f2) then begin
            testf = false;
          end;
        end;
        if (testf) then begin 
          testf = ItemInItemGroupOrClass(ORrw.ArtCode,RepSpec.FirstAcc,RepSpec.f7);
        end;
        if (testf) then begin 
          found = true;
          goto LFindOrder;          
        end;
      end; // for   
    end;  //TrHs
  end; //while
LFindOrder:;
  return;
end;

procedure PrintItemData(string item,record RcVc RepSpec,record CUVc CUr,var Integer count)
BEGIN
  Boolean nocontr,stfound;
  record ICSVc ICSr;
  val t;
  
  switch (RepSpec.ArtMode) begin
    case 0:
      nocontr = true;
      if (nonblank(RepSpec.f2)) then begin
        ICSr.ArtCode = item;
        ICSr.CustCode = CUr.Code;
        stfound = ReadFirstMain(ICSr,2,true);          
        if (ICSr.ArtCode<>item) then begin
          stfound = false;
        end;
        if (ICSr.CustCode<>CUr.Code) then begin
          stfound = false;
        end;
        if (stfound) then begin 
          stfound = ItemInItemGroupOrClass(item,RepSpec.FirstAcc,RepSpec.f7);
        end;     
        if (RepSpec.flags[10]==0) then begin
          if (stfound==true) then begin
            t = GetTurnover(ICSr,"quant",RepSpec.sStartDate,RepSpec.sEndDate);
            if (t==0) then begin
              stfound = false;
            end;
          end;
        end;
        if (stfound) then begin
          if (nonblank(RepSpec.AccStr)) then begin 
            stfound = HasItemBeenBoughtFromSupplier(item,RepSpec);
          end;
          goto LPrintItemData;
        end;
      end;
      if (stfound==false) then begin
        FindInvoice(RepSpec,CUr.Code,stfound);
      end;    
    case 1:
      stfound = false;
      nocontr = false;
      FindContract(RepSpec,CUr.Code,stfound,nocontr);
    case 2:
      stfound = false;
      nocontr = true;
      FindQuotation(RepSpec,CUr.Code,stfound);
    case 3:
      stfound = false;
      nocontr = true;
      FindOrder(RepSpec,CUr.Code,stfound);
  end;
LPrintItemData:;  
  if (stfound==false) and (RepSpec.Comparison==1) and (nocontr==true) then begin
    StartFormat(15);
    OutString(0,"DblCUVc",CUr.Code,false);
    OutString(60,0,left(CUr.Name,26),false);
    OutString(210,0,CUr.Person,false);
    OutString(325,0,CUr.Phone,false);
    OutString(415,0,CUr.Fax,false);
    EndFormat;
    count = count + 1;
  end; 
  if (stfound) and (RepSpec.Comparison == 0) then begin
    StartFormat(15);
    OutString(0,"DblCUVc",CUr.Code,false);
    OutString(60,0,left(CUr.Name,26),false);
    OutString(210,0,CUr.Person,false);
    OutString(325,0,CUr.Phone,false);
    OutString(415,0,CUr.Fax,false);
    EndFormat;
    count = count + 1;
  end; 
  RETURN;
END;

procedure PrintItemGroupData(record RcVc RepSpec,record CUVc CUr,var Integer count)
BEGIN
  Boolean nocontr,stfound;
  record INVc INr;
  Boolean found;
  record ICSVc ICSr;
  val t;
  Boolean testf;
  vector Boolean custcodev;
  Integer oldcount;
  
  found = true;
  INr.Group = RepSpec.FirstAcc;
  while (LoopKey("Group",INr,1,found)) begin
    if (INr.Group!=RepSpec.FirstAcc) then begin found = false; end;
    if (found) then begin
      found = custcodev[CUr.Code]==false;
      testf = found;
      if (testf) then begin
        oldcount = count;
        PrintItemData(INr.Code,RepSpec,CUr,count);
        if (RepSpec.ArtMode==0) then begin
          custcodev[CUr.Code] = oldcount!=count;
        end else begin
          custcodev[CUr.Code] = oldcount==count;
        end;
      end;
    end;    
  end;
  RETURN;
END;

global 
procedure NoSalesRn(Record RcVc RepSpec)
begin
  record CUVc CUr;
  string 255 tstr;
  integer rw,count;
  boolean TrHs,testf,found;
  val t;
  string 20 frcu,tocu,ckey;
  
  frcu = FirstInRange(RepSpec.f5,20);
  tocu = LastInRange(RepSpec.f5,20);
  if (RepSpec.Comparison == 1) then begin
    StartReportJob(USetStr(11600));
  end;
  if (RepSpec.Comparison == 0) then begin
    StartReportJob(USetStr(11601));
  end;
  rw = 1;
  if (RepSpec.flags[10] == 0) then begin
    HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f1)) then begin
    tstr = USetStr(11602);
    tstr = tstr & RepSpec.f1;
    Header(rw,tstr,1);
    rw = rw + 1;  
  end;
  if (nonblank(RepSpec.f2)) then begin
    tstr = USetStr(11603);
    tstr = tstr & RepSpec.f2;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f3)) then begin
    tstr = USetStr(11604);
    tstr = tstr & RepSpec.f3;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f4)) then begin
    tstr = USetStr(11605);
    tstr = tstr & RepSpec.f4;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f5)) then begin
    HTCusts(frcu,tocu,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  switch (RepSpec.ArtMode) begin
    case 0: tstr = USetStr(11606);    
    case 1: tstr = USetStr(11607);
    case 2: tstr = USetStr(11619);
    case 3: tstr = USetStr(11620);
  end;
  Header(rw,tstr,1);

  if (nonblank(RepSpec.FirstAcc)) then begin
    rw = rw + 1;
    tstr = USetStr(11618) & ": " & RepSpec.FirstAcc;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  EndHeader;
  StartFormat(15);
   OutString(325,"DblNoSalesVClass",USetStr(11625),false);
  EndFormat;
  
  StartFormat(15);
  OutString(0,0,USetStr(11608),false);
  OutString(60,0,USetStr(11609),false);
  OutString(210,0,USetStr(11610),false);
  OutString(325,0,USetStr(11611),false);
  OutString(415,0,USetStr(11612),false); 
  EndFormat;
  Gray_Divider(0,1);
  if (blank(RepSpec.f2)) and (blank(RepSpec.FirstAcc)) and (blank(RepSpec.f7)) then begin
    goto L99;
  end;  
  TrHs = true;
  if (nonblank(RepSpec.f5)) then begin
    CUr.Code = frcu;
    ckey = "Code";
  end else begin
    CUr.CustCat = RepSpec.f1;
    ckey = "Group";
  end;
  while LoopKey(ckey,CUr,1,TrHs) begin
    if (nonblank(RepSpec.f5)) then begin
      if (CUr.Code<frcu) then begin TrHs = false; end;
      if (CUr.Code>tocu) then begin TrHs = false; end;
    end else begin
      if (nonblank(RepSpec.f1)) then begin
        if (CUr.CustCat <> RepSpec.f1) then begin
          TrHs = false;  
        end;  
      end;
    end;
    if (TrHs) then begin
      testf = true;
      if (CUr.CUType==0) then begin testf = false; end;
      if (CUr.blockedFlag <> 0) then begin
        testf = false;
      end;
      if (nonblank(RepSpec.f1)) then begin
        if (CUr.CustCat <> RepSpec.f1) then begin
          testf = false;  
        end;  
      end;
      if (nonblank(RepSpec.f5)) then begin 
        if (CUr.Code<frcu) then begin testf = false; end;
        if (CUr.Code>tocu) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (RepSpec.f3 <> CUr.SalesMan) then begin
          testf = false;
        end;
      end;     
      if (nonblank(RepSpec.f4)) then begin 
        if ((SetInSet2(RepSpec.f4,CUr.Classification)) == false) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        PrintItemData(RepSpec.f2,RepSpec,CUr,count);
      end; 
    end; 
 end; 
 Gray_Divider(0,1);
 if (RepSpec.Comparison == 1) then begin
   switch (RepSpec.ArtMode) begin
     case 0:
       StartFormat(15);
       OutString(0,0,USetStr(11613),false);
       OutString(230,0,count,false);
       EndFormat;
     case 1:
       StartFormat(15);
       OutString(0,0,USetStr(11614),false);
       OutString(240,0,count,false);
       EndFormat;
     case 2:
       StartFormat(15);
       OutString(0,0,USetStr(11621),false);
       OutString(240,0,count,false);
       EndFormat;
     case 3:
       StartFormat(15);
       OutString(0,0,USetStr(11622),false);
       OutString(240,0,count,false);
       EndFormat;
   end;

 end;
 if (RepSpec.Comparison == 0) then begin
   switch (RepSpec.ArtMode) begin
     case 0:
       StartFormat(15);
       OutString(0,0,USetStr(11615),false);
       OutString(230,0,count,false);
       OutString(325,"DblNoSalesVClass",USetStr(11625),false);
       EndFormat;
     case 1:
       StartFormat(15);
       OutString(0,0,USetStr(11616),false);
       OutString(230,0,count,false);
       OutString(325,"DblNoSalesVClass",USetStr(11625),false);
       EndFormat;
     case 2:
       StartFormat(15);
       OutString(0,0,USetStr(11623),false);
       OutString(240,0,count,false);
       OutString(325,"DblNoSalesVClass",USetStr(11625),false);
       EndFormat;
     case 3:
       StartFormat(15);
       OutString(0,0,USetStr(11624),false);
       OutString(240,0,count,false);
       OutString(325,"DblNoSalesVClass",USetStr(11625),false);
       EndFormat;
   end;
 end;
 L99:;
 if (blank(RepSpec.f2)) and (blank(RepSpec.FirstAcc)) and (blank(RepSpec.f7)) then begin
   StartFormat(15);
   EndFormat;
   StartFormat(15);
   OutString(0,0,USetStr(11617),false);
   EndFormat;
 end;
 EndJob;
return
end;  
