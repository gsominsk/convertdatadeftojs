external function val MulWithCustomsRateToBase1(string,Date,val);
external procedure ExtractObj(string,var Integer,var string);
external function Boolean GetFirstItem(var string,var record INVc);

global
procedure MakeArrivalCode(string ArrivalCode,var string res)
BEGIN
  res = "";
  res = Left(ArrivalCode,1) & "-" & Mid(ArrivalCode,1,3) & "-" & Mid(ArrivalCode,4,2) & "-";
  res = res & Mid(ArrivalCode,6,2) & "-" & Mid(ArrivalCode,8,1) & "-" & Mid(ArrivalCode,9,2) & "-";
  res = res & Mid(ArrivalCode,11,3) & "-" & Mid(ArrivalCode,14,4);
  RETURN;
END;

function
val PrintCustomsValue(Integer strid,string crncy,Date td,val v)
BEGIN
  val res;
  
  if (true) then begin//v!=0
    res = v;
    StartFormat(15);
     if (strid!=0) then begin
       OutString(0,0,USetStr(strid) & ": ",false);
     end;
     if (nonblank(crncy)) then begin
       res = MulWithCustomsRateToBase1(crncy,td,v);
       OutVal(150,0,res,M4Val,true);
     end;
     OutVal(300,0,v,M4Val,true);
     if (nonblank(crncy)) then begin
       OutString(310,0,crncy,false);
     end;
    EndFormat;
  end;
  PrintCustomsValue = res;
  RETURN;
END;

function 
Integer SpecialChargeType(string chargestr,var string chargecomment)
BEGIN
  record SpecChargeDealBlock SpecChargeDealRec;
  row SpecChargeDealBlock SpecChargeDealrw;
  Integer i,rwcnt;
  Integer res;

  res = -1;
  chargecomment = "";
  BlockLoad(SpecChargeDealRec);  
  rwcnt = MatRowCnt(SpecChargeDealRec);
  for (i=0; i<rwcnt;i=i+1) begin
    MatRowGet(SpecChargeDealRec,i,SpecChargeDealrw);
    if (chargestr==SpecChargeDealrw.Code) then begin
      chargecomment = SpecChargeDealrw.Comment;
      res = SpecChargeDealrw.Type;
      goto LSpecialChargeType;
    end;
  end;
LSpecialChargeType:;
  SpecialChargeType = res;
  RETURN;
END;

procedure GetDutiesCalcVals(LongInt customsnr,string chargestr,var val chargesv,var val specialchargesv,var val vatv)
BEGIN
  record CalcChargeVc CalcCharger;
  row CalcChargeVc CalcChargerw;
  Integer i,rwcnt,type;
  string 60 chargecomment;
  
  chargesv = blankval;
  if (blank(chargestr)) then begin
    goto LGetDutiesCalcVals;
  end;
  type = SpecialChargeType(chargestr,chargecomment);
  CalcCharger.SerNr = customsnr;
  if (ReadFirstMain(CalcCharger,1,true)) then begin
    rwcnt = MatRowCnt(CalcCharger);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CalcCharger,i,CalcChargerw);
      if (chargestr==CalcChargerw.Code) then begin
        switch (type) begin
          case 0:
            specialchargesv = CalcChargerw.CalcVal;
          case 1:
            specialchargesv = CalcChargerw.CalcVal;
          case 2:
            vatv = CalcChargerw.CalcVal;
          otherwise
            chargesv = CalcChargerw.CalcVal;
        end;
      end;
    end;
  end;
LGetDutiesCalcVals:;  
  RETURN;
END;
 
procedure PrintDutiesAndChargesRow(Integer strid,val v)
BEGIN
  if (v!=0) then begin
    StartFormat(15);
     if (strid!=0) then begin
       OutString(0,0,USetStr(strid) & ": ",false);
     end;
     OutVal(150,0,v,M4Val,true);
    EndFormat;
  end;
  RETURN;
END;

procedure AddToDutiesArray(string dutycode,Array string adutiescodes,var Integer adutiescnt)
BEGIN
  Integer i;
  
  if (blank(dutycode)) then begin
    goto LAddToDutiesArray;
  end;
  for (i=0;i<=adutiescnt;i=i+1) begin
    if (dutycode==adutiescodes[i]) then begin
      goto LAddToDutiesArray;
    end;
  end;
  adutiescnt = adutiescnt + 1;
  adutiescodes[adutiescnt] = dutycode;
LAddToDutiesArray:;  
  RETURN;
END;

procedure AddToChargesArray(string chargecode,Array string achargescodes,var Integer achargescnt)
BEGIN
  Integer i;
  
  if (blank(chargecode)) then begin
    goto LAddToChargesArray;
  end;
  for (i=0;i<=achargescnt;i=i+1) begin
    if (chargecode==achargescodes[i]) then begin
      goto LAddToChargesArray;
    end;
  end;
  achargescnt = achargescnt + 1;
  achargescodes[achargescnt] = chargecode;
LAddToChargesArray:;  
  RETURN;
END;

procedure AddToVATArray(string vatcode,Array string avatcodes,var Integer avatcnt)
BEGIN
  Integer i;
  
  if (blank(vatcode)) then begin
    goto LAddToVATArray;
  end;
  for (i=0;i<=avatcnt;i=i+1) begin
    if (vatcode==avatcodes[i]) then begin
      goto LAddToVATArray;
    end;
  end;
  avatcnt = avatcnt + 1;
  avatcodes[avatcnt] = vatcode;
LAddToVATArray:;  
  RETURN;
END;

procedure PrintDutiesAndCharges(record CustomsVc Customsr,var val totdutiesv,var val totchargesv,var val totspecduties,var val totspecchargesv,var val totvatv)
BEGIN
  row CustomsVc Customsrw;
  Integer i,rwcnt;
  Integer pos;
  string 20 code;
  Array string 20 adutiescodes;
  Integer adutiescnt;
  Array string 20 achargescodes;
  Integer achargescnt;
  Array string 2 avatcodes;
  Integer avatcnt;
  val dutiesv,chargesv,specdutiesv,specchargesv, vatv;
  
  adutiescnt = -1;
  achargescnt = -1;
  avatcnt = -1;
  rwcnt = MatRowCnt(Customsr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Customsr,i,Customsrw);
    pos = 0;        
    ExtractObj(Customsrw.DutiesCodes,pos,code);
    AddToDutiesArray(code,adutiescodes,adutiescnt);
    while (nonblank(code)) begin
      ExtractObj(Customsrw.DutiesCodes,pos,code);
      AddToDutiesArray(code,adutiescodes,adutiescnt);
    end;    

    pos = 0;        
    ExtractObj(Customsrw.ChargesCodes,pos,code);
    AddToChargesArray(code,achargescodes,achargescnt);
    while (nonblank(code)) begin
      ExtractObj(Customsrw.ChargesCodes,pos,code);
      AddToChargesArray(code,achargescodes,achargescnt);
    end;    
    AddToVATArray(Customsrw.VATCode,avatcodes,avatcnt);
  end;
  for (i=0;i<=adutiescnt;i=i+1) begin
    GetDutiesCalcVals(Customsr.SerNr,adutiescodes[i],dutiesv,specdutiesv,vatv);    
    totdutiesv = totdutiesv + dutiesv;
    totspecduties = totspecduties + specdutiesv;
  end;
  for (i=0;i<=achargescnt;i=i+1) begin
    GetDutiesCalcVals(Customsr.SerNr,achargescodes[i],chargesv,specchargesv,vatv);    
    totchargesv = totchargesv + chargesv;
    totspecchargesv = totspecchargesv + specchargesv;
  end;
  for (i=0;i<=avatcnt;i=i+1) begin
    GetDutiesCalcVals(Customsr.SerNr,avatcodes[i],chargesv,specchargesv,vatv); 
    totvatv = totvatv + vatv;   
  end;
  PrintDutiesAndChargesRow(10733,totdutiesv);
  PrintDutiesAndChargesRow(10734,totchargesv);
  PrintDutiesAndChargesRow(10735,totspecchargesv+totspecduties);
  PrintDutiesAndChargesRow(10736,totvatv);
  RETURN;
END;

procedure PrintCustomsRows(record CustomsVc Customsr)
BEGIN
  row CustomsVc Customsrw;
  Integer i,rwcnt;
  record INVc INr;
  
  StartFormat(10);
  EndFormat;
  StartFormat(15);
   OutString(0,0,USetStr(10740),false);
   OutString(60,0,USetStr(10741),false);
   OutString(220,0,USetStr(10742),true);
   OutString(270,0,USetStr(10743),true);
   OutString(280,0,USetStr(10744),false);
   OutString(350,0,USetStr(10745),true);
   OutString(390,0,USetStr(10746),true);
   OutString(440,0,USetStr(10747),true);
   OutString(480,0,USetStr(10748),true);
  EndFormat;
  Gray_Divider(0,1);
  rwcnt = MatRowCnt(Customsr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Customsr,i,Customsrw);
    if (GetFirstItem(Customsrw.ArtCode,INr)) then begin
    end;
    OutString(0,0,Customsrw.CommodityCode,false);
    OutString(60,0,Customsrw.CommodityDesc,false);
    OutVal(220,0,Customsrw.Quant,M4UVal,true);
    OutVal(270,0,Customsrw.FOBVal,M4UVal,true);
    OutString(280,0,Customsr.CurncyCode,false);
    OutVal(350,0,INr.InPrice,M4UVal,true);
    OutString(390,0,INr.Markup,true);
    OutVal(440,0,INr.UPrice1,M4UVal,true);
    OutLongInt(480,0,Customsrw.PONr,true);
  end;
  RETURN;
END;

global
procedure CUSTARRn(record RcVc RepSpec)
BEGIN
  record CustomsVc Customsr;
  record NotepadVc Noter;
  record RLinkVc RLinkr;
  Boolean notefound; 
  Integer notenr;
  Integer i,rwcnt;
  string 255 tstr;
  val basev;
  val totdutiesv,totchargesv,totspecduties,totspecchargesv,totvatv,totval;
  
  Customsr.SerNr = RepSpec.long1;
  if (ReadFirstMain(Customsr,1,true)) then begin
    notenr = 1;
    while (ReadRecordLink(Customsr,notenr,Noter,RLinkr)) begin
      notenr = notenr + 1;
      if (RLinkr.Comment==RepSpec.f1) then begin
        notefound = true;
        goto LCUSTARFOUND;
      end;
    end;    
LCUSTARFOUND:;
    StartReportJob(USetStr(10720));
    EndHeader;
     if (!notefound) then begin
       StartFormat(15);
        OutString(0,0,USetStr(10737),false);
       EndFormat;
       Black_Divider(0,1);
     end;
     StartFormat(15);
      OutString(0,0,USetStr(10721) & ": ",false);
      OutLongInt(120,"DblCustomsVc",Customsr.SerNr,false);
      OutString(190,0,USetStr(10722) & ": ",false);
      OutString(270,0,Customsr.VECode,false);
      OutString(330,0,Customsr.Addr0,false);
     EndFormat;
     StartFormat(15);
      OutString(0,0,USetStr(10723) & ": ",false);
      MakeArrivalCode(Customsr.ArrivalCode,tstr);
      OutString(120,0,tstr,false);
     EndFormat;
     StartFormat(15);
      OutString(0,0,USetStr(10724) & ": ",false);
      OutVal(150,0,Customsr.SumCostPrice,M4Val,true);
      OutString(160,0,Customsr.CurncyCode,false);
      OutString(190,0,USetStr(10725) & ": ",false);
      OutString(270,0,Customsr.ShipMode,false);
     EndFormat;
     StartFormat(15);
      OutString(0,0,USetStr(10738) & ": ",false);
      OutVal(150,0,Customsr.ToRateB1,M4Rate,true);
      OutString(190,0,USetStr(10727) & ": ",false);
      OutString(270,0,Customsr.CountryCode,false);
     EndFormat;
     StartFormat(10);
     EndFormat;
     StartFormat(15);
      OutString(0,0,USetStr(10728) & ": ",false);
      OutVal(150,0,Customsr.TotFOBLocalVal,M4Val,true);
      OutVal(300,0,Customsr.TotFOBVal,M4Val,true);
      OutString(310,0,Customsr.CurncyCode,false);
     EndFormat;
     totval = Customsr.TotFOBLocalVal;
     basev = PrintCustomsValue(10729,Customsr.ShpCurncy,Customsr.TransDate,Customsr.ShpVal);
     totval = totval + basev;
     basev = PrintCustomsValue(10731,Customsr.InsCurncy,Customsr.TransDate,Customsr.InsVal);
     totval = totval + basev;
     basev = PrintCustomsValue(10732,Customsr.Div1Curncy,Customsr.TransDate,Customsr.Div1Val);
     totval = totval + basev;
     basev = PrintCustomsValue(0,Customsr.Div2Curncy,Customsr.TransDate,Customsr.Div2Val);
     totval = totval + basev;
     Gray_Divider(70,150);
     StartFormat(15);
      OutString(0,0,USetStr(10726) & ": ",false);
      OutVal(150,0,totval,M4Val,true);
     EndFormat;
     PrintDutiesAndCharges(Customsr,totdutiesv,totchargesv,totspecduties,totspecchargesv,totvatv);
     totval = totval + totdutiesv + totchargesv + totspecduties + totspecchargesv + totvatv;
     Gray_Divider(70,150);
     StartFormat(15);
      OutString(0,0,USetStr(10726) & ": ",false);
      OutVal(150,0,totval,M4Val,true);
     EndFormat;
     basev = PrintCustomsValue(10730,"",Customsr.TransDate,Customsr.LocalTransVal);
     totval = totval + basev;
     basev = PrintCustomsValue(0,"",Customsr.TransDate,Customsr.LocalTrans2Val);
     totval = totval + basev;
     Gray_Divider(70,150);
     StartFormat(15);
      OutString(0,0,USetStr(10726) & ": ",false);
      OutVal(150,0,totval,M4Val,true);
     EndFormat;
     PrintCustomsRows(Customsr);
    EndJob;
  end;
  RETURN;
END;  
