external procedure HTItem(string,var string);
external procedure HTArtGroup(string, var string);
external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean SetInSet2(string,string);
external procedure HTLocationClassification(string,string,var string);
external procedure HTLocationGroup(string,string,var string);
external function Boolean HasMultiLocations();
external function Boolean IsEnterprise();
external function Boolean HasModSO();
external function Boolean HasModPO();

external function Boolean HasMultiCurrency();
external function roundmode SetRoundModeD(Integer);
external function roundmode GetCostRoundMode(record RoundBlock);
external function roundmode DefaultRoundMode();
// Please check that this file was properly combined to 5.4....
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure PUCalcPerc(val,string,var val);
external function Integer TypeOfCurncy(var string,var Integer);
external procedure GetFullCurncyRateText(Boolean,var string,val,val,val,val,val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure HT2Per(Date, Date,var string);
external procedure HTDetailLevel(Integer, var string);
external procedure HTOKF(Integer,Integer, var string);
external procedure HTNr(Integer,Integer,LongInt,LongInt,var string);

function Boolean ShouldShowPUConsig(record PUVc PUr,Integer consigtype)
begin
  row PUVc PUrw;
  integer i,rwcnt;
  boolean hasnormal,hasconsig;
  boolean res;
  
  res = true;
  if (consigtype==0) then begin
    goto LShouldShowPUConsig;
  end;
  hasnormal = false;
  hasconsig = false;
  rwcnt = MatRowCnt(PUr);
  for (i = 0; i<rwcnt; i=i+1) begin
    MatRowGet(PUr,i,PUrw);
    switch (PUrw.StockType) begin
      case kStockTypeNormal: hasnormal = true;
      case kStockTypeConsigment: hasconsig = true;
    end;
  end;
  switch (consigtype) begin
    case 1: res = hasnormal;
    case 2: res = hasconsig;
  end;
  
LShouldShowPUConsig:;
  ShouldShowPUConsig = res;
  return;
end;

function Boolean ShouldShowPUTREO(record PUVc PUr,Integer TREOtype)
begin
  row PUVc PUrw;
  integer i,rwcnt;
  boolean hasnormal,hasTREO;
  boolean res;
  
  res = true;
  if (TREOtype==0) then begin
    goto LShouldShowPUTREO;
  end;
  hasnormal = false;
  hasTREO = false;
  rwcnt = MatRowCnt(PUr);
  for (i = 0; i<rwcnt; i=i+1) begin
    MatRowGet(PUr,i,PUrw);
    switch (PUrw.TREO) begin
      case kNonTREO: hasnormal = true;
      case kTREO: hasTREO = true;
    end;
  end;
  switch (TREOtype) begin
    case 1: res = hasnormal;
    case 2: res = hasTREO;
  end;
  
LShouldShowPUTREO:;
  ShouldShowPUTREO = res;
  return;
end;

global
procedure PUJRn(record RcVc RepSpec)
begin
  record RoundBlock RoundRec;
  record PUVc PUr;
  record LocationVc Locr;
  Boolean TrHs;
  Boolean testf;
  LongInt frorder,toorder;
  val totsum;
  LongInt afr,ato;
  val rowsum;
  val totunitsum,totfreight,totcustoms,totextra;
  val t,t2;
  Integer rw;
  String 255 tstr;
  String 20 ckey;
  Integer i,rwcnt;
  row PUVc PUrw;
  val pursum;
  val unitsum,sumquant,freight,customs,extra;
  string 50 crncy;
  record INVc INr;
  string 20 frit,toit;
  string 20 frin,toin;

  BlockLoad(RoundRec);
  rowsum = blankval;
  totsum = blankval;
  totunitsum = blankval;
  totfreight = blankval;
  totcustoms = blankval;
  totextra   = blankval;

  frit = FirstInRange(RepSpec.Stext,20);
  toit = LastInRange(RepSpec.Stext,20);
  frin = FirstInRange(RepSpec.LastAcc,20);
  toin = LastInRange(RepSpec.LastAcc,20);
  afr = FirstInRange(RepSpec.f1,30);
  ato = LastInRange(RepSpec.f1,30);

  frorder = FirstInRange(RepSpec.TransStr,20);
  toorder = LastInRange(RepSpec.TransStr,20);

  StartReportJob(USetStr(2601));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;

  HTDetailLevel(RepSpec.ArtMode,tstr);
  Header(rw,tstr,0);

  HTNr(2608,2609,afr,ato,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;

  if (HasModSO) then begin
    HTNr(2610,2611,frorder,toorder,tstr);
    Header(rw,tstr,0);
  end;
  
  if (IsEnterprise) then begin
    switch (RepSpec.flags[6]) begin
      case 0: tstr = USetStr(2598);
      case 1: tstr = USetStr(2599);
      case 2: tstr = USetStr(2600);
    end;
    Header(rw,tstr,1);
    rw = rw + 1;
      
    switch (RepSpec.flags[7]) begin
      case 0: tstr = USetStr(27450);
      case 1: tstr = USetStr(27451);
      case 2: tstr = USetStr(27452);
    end;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;

  tstr = "";
  if (nonblank(RepSpec.f2)) then begin
    tstr = USetStr(1213);
    tstr = tstr & RepSpec.f2;
    Header(rw,tstr,0);
  end;
  if (nonblank(RepSpec.f3)) then begin
    tstr = USetStr(2768);
    tstr = tstr & ": " & RepSpec.f3;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;

  HTOKF(RepSpec.flags[1],RepSpec.flags[2],tstr);
  Header(rw,tstr,1);
  rw = rw + 1; 
  if (nonblank(RepSpec.f5)) then begin
    HTLocationGroup(RepSpec.f5,RepSpec.f5,tstr);
    Header(rw,tstr,0);
  end;
  if (nonblank(RepSpec.f6)) then begin
    HTLocationClassification(RepSpec.f6,RepSpec.f6,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  HTItem(RepSpec.LastAcc,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (HasItemGroups) then begin
    HTArtGroup(RepSpec.Stext,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasItemClassification) then begin
    HTItemClass(RepSpec.f7,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;  
  EndHeader;

  if (RepSpec.ArtMode==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(2602),false);
    OutString(60,0,USetStr(2603),false);
    OutString(140,0,USetStr(2607),false);
    OutStringAdjustBiDi(1,0,USetStr(2625),true,M4Val,515);
    EndFormat;
  end;
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
    OutString(0,0,USetStr(2602),false);
    OutString(60,0,USetStr(2603),false);
    OutString(160,0,USetStr(2607),false);
    if (HasMultiLocations) then begin
      OutString(350,0,USetStr(5010),false);
    end;
    if (HasModPO) then begin
      OutString(420,0,USetStr(2604),false);
    end;
    EndFormat;
    StartFormat(15);
    OutString(0,0,USetStr(2605),false);
    OutString(100,0,USetStr(2606),false);
    EndFormat;
    StartFormat(15);
    OutString(0,0,USetStr(2762),false);
    OutStringAdjustBiDi(100,0,USetStr(2620),true,M4Val,140);
    OutString(200,0,USetStr(2612),false);
    OutStringAdjustBiDi(290,0,USetStr(2613),true,M4Val,330);
    if (IsEnterprise) then begin
      OutStringAdjustBiDi(330,0,USetStr(2614),true,M4Val,370);
      OutStringAdjustBiDi(380,0,USetStr(2615),true,M4Val,420);
      OutStringBiDi(420,0,USetStr(2616),true,410);
    end;
    OutStringAdjustBiDi(480,0,USetStr(2331),true,M4Val,520);
    EndFormat;
  end;
  if (RepSpec.ArtMode==0) then begin
   Gray_Divider(0,1);
  end;
  switch (RepSpec.flags[5]) begin
    case 0:
      ckey = "SerNr";
      PUr.SerNr = afr;
    case 1:
      ckey = "TransDate";
      PUr.TransDate = RepSpec.sStartDate;
    case 2:
      ckey = "LocOK";
      PUr.Location = RepSpec.f3;
  end;
  TrHs = true;        
  while LoopKey(ckey,PUr,1,TrHs) begin
    switch (RepSpec.flags[5]) begin
      case 0:
        if (ato<>-1) then begin
          if (PUr.SerNr>ato) then begin
            TrHs = false;
          end;
        end;
      case 1:
        if (PUr.TransDate>RepSpec.sEndDate) then begin
          TrHs = false;
        end;
      case 2:
        if (nonblank(RepSpec.f3)) then begin
          if (PUr.Location!=RepSpec.f3) then begin
            TrHs = false;
          end;
        end;
    end;
   if (TrHs) then begin
    testf = true;
    switch (RepSpec.flags[5]) begin
      case 1:
        if (nonblank(RepSpec.f1)) then begin
          if (PUr.SerNr<afr) then begin testf = false; end;
          if (PUr.SerNr>ato) then begin testf = false; end;
        end;
      case 2:
        if (nonblank(RepSpec.f1)) then begin
          if (PUr.SerNr<afr) then begin testf = false; end;
          if (PUr.SerNr>ato) then begin testf = false; end;
        end;
    end;
    if (nonblank(RepSpec.f2) and (RepSpec.f2<>PUr.VECode)) then begin
      testf = false;
    end;
    if nonblank(RepSpec.TransStr) then begin
      if ((PUr.PONr<frorder) or (PUr.PONr>toorder)) then begin
        testf = false;
      end;
    end;
    if ((PUr.TransDate<RepSpec.sStartDate) or (PUr.TransDate>RepSpec.sEndDate)) then begin
      testf = false;
    end;
    if ((RepSpec.flags[1]==0) and (PUr.OKFlag==0)) then begin testf = false; end;
    if ((RepSpec.flags[2]==0) and (PUr.OKFlag<>0)) then begin testf = false; end;
    if (PUr.Invalid!=0) then begin testf = false; end;
    if (ShouldShowPUConsig(PUr,RepSpec.flags[6])==false) then begin testf = false; end;
    if (ShouldShowPUTREO(PUr,RepSpec.flags[7])==false) then begin testf = false; end;
    if (RepSpec.ArtMode==1) then begin
      if (testf) then begin
        if (nonblank(RepSpec.LastAcc) or nonblank(RepSpec.Stext) or nonblank(RepSpec.f7)) then begin
          rwcnt = MatRowCnt(PUr);
          for (i=0;i<rwcnt;i=i+1) begin
            testf = false;
            MatRowGet(PUr,i,PUrw);
            if (ReadFirstItem(PUrw.ArtCode,INr,false,true)) then begin
              if (nonblank(RepSpec.LastAcc)) then begin
                if (INr.Code>=frin) and (INr.Code<=toin) then begin 
                  testf = true;              
                end; 
              end;
              if (nonblank(RepSpec.Stext)) then begin
                testf = false;
                if (INr.Group>=frit) and (INr.Group<=toit) then begin 
                  testf = true;              
                end; 
              end;
              if (nonblank(RepSpec.f7) and nonblank(INr.DispGroups)) then begin
                testf = SetInSet2(RepSpec.f7,INr.DispGroups);
              end;
              if (testf) then begin 
                i = rwcnt;
              end; 
            end;
          end;
        end;
      end;
      if (testf) then begin
        if (nonblank(RepSpec.f4)) then begin
          testf = false;
          if (PUr.DispatchNumber==RepSpec.f4) then begin 
            testf = true;
          end;
          if (testf==false) then begin
            rwcnt = MatRowCnt(PUr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(PUr,i,PUrw);
              if (PUrw.DispatchNumber==RepSpec.f4) then begin 
                testf = true;              
                i = rwcnt;
              end; 
            end; 
          end;
        end;
      end;
    end;
    if (testf) then begin
      if (nonblank(RepSpec.f5) or nonblank(RepSpec.f6)) then begin
        Locr.Code = PUr.Location;
        ReadFirstMain(Locr,1,true);
        if (nonblank(RepSpec.f5)) then begin
          if (Locr.Group!=RepSpec.f5) then begin testf = false; end;
        end;
        if (nonblank(RepSpec.f6)) then begin
          if (SetInSet(RepSpec.f6,Locr.Classification)==false) then begin testf = false; end;
        end;
      end;
    end;

    if (testf) then begin
      if (nonblank(RepSpec.f3)) then begin
         testf = false;
         rwcnt = MatRowCnt(PUr);
         for (i = 0 ; i<rwcnt ;i=i+1) begin
           MatRowGet(PUr,i,PUrw);
           tstr = PUrw.Location;
           if (blank(tstr)) then begin
             tstr = PUr.Location;
           end; 
           if (tstr==RepSpec.f3) then begin
             testf = true;
             i = rwcnt;
           end;
         end;
      end;
    end;
    if (testf) then begin
      pursum = PUr.SumCostPrice;
      freight = PUr.ShipCost;
      customs = PUr.CustomsCost;
      extra = PUr.ExtraCost;
      if (nonblank(RepSpec.f3)) then begin
        freight = blankval;
        pursum = blankval;
        customs = blankval;
        extra = blankval;
      end;
      t = 0;
      if RepSpec.ArtMode==1 then begin
        freight = blankval;
        pursum = blankval;
        customs = blankval;
        extra = blankval;
        Gray_Divider(0,1);
        StartFormat(15);
        OutLongInt(0,"DblPU",PUr.SerNr,false);
        OutDate(60,0,PUr.TransDate,false);
        OutString(160,0,PUr.Comment,false);
        if (HasMultiLocations) then begin
          OutString(350,0,PUr.Location,false);
        end;
        if (HasModPO) then begin
          OutLongInt(420,0,PUr.PONr,false);
        end;
        EndFormat;
        StartFormat(15);
        OutString(0,0,PUr.VECode,false);
        OutString(100,0,PUr.VEName,false);
        if (HasMultiCurrency) then begin
          OutString(350,0,PUr.CurncyCode,true);
          crncy = PUr.CurncyCode;
          i = -1;
          if (TypeOfCurncy(crncy,i)==0) then begin
            GetFullCurncyRateText(true,tstr,PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2);
          end else begin
            GetFullCurncyRateText(false,tstr,PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2);
          end;  
          OutString(370,0,tstr,false);
        end;
        EndFormat;
        unitsum = 0;
        rwcnt = MatRowCnt(PUr);
        for (i = 0 ; i<=rwcnt-1 ;i=i+1) begin
          MatRowGet(PUr,i,PUrw);
          if ((PUrw.stp==3) or (PUrw.ovst!=0)) then begin
            goto LSKIPPUROW;
          end;
          if (nonblank(RepSpec.LastAcc) or (nonblank(RepSpec.Stext)) or (nonblank(RepSpec.f7))) then begin
            ReadFirstItem(PUrw.ArtCode,INr,false,true);
          end;
          if (nonblank(RepSpec.Stext)) then begin
            if (INr.Group<frit) or (INr.Group>toit) then begin 
              goto LSKIPPUROW;
            end; 
          end;
          if (nonblank(RepSpec.LastAcc)) then begin
            if (INr.Code<frin) or (INr.Code>toin) then begin 
              goto LSKIPPUROW;
            end; 
          end;
          if (nonblank(RepSpec.f7)) then begin
            if (SetInSet2(RepSpec.f7,INr.DispGroups)==false) then begin
              goto LSKIPPUROW;
            end;
          end;          
          if (nonblank(RepSpec.f3)) then begin
            tstr = PUrw.Location;
            if (blank(tstr)) then begin
              tstr = PUr.Location;
            end; 
            if (tstr!=RepSpec.f3) then begin
              goto LSKIPPUROW;
            end;
          end;
          switch (RepSpec.flags[6]) begin
            case 1:
              if (PUrw.StockType==kStockTypeConsignment) then begin
                goto LSKIPPUROW;
              end;
            case 2:
              if (PUrw.StockType==kStockTypeNormal) then begin
                goto LSKIPPUROW;
              end;
          end;
          switch (RepSpec.flags[7]) begin
            case 1:
              if (PUrw.TREO==kTREO) then begin
                goto LSKIPPUROW;
              end;
            case 2:
              if (PUrw.TREO==kNonTREO) then begin
                goto LSKIPPUROW;
              end;
          end;
//                    t2 = MulRateToBase1(PUr.CurncyCode,PUrw.UPrice,PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,DefaultCurRoundOff);
          t2 = PUrw.UPrice;
          t = Round(PUrw.Quant * t2,GetCostRoundMode(RoundRec));
          unitsum = unitsum + t;
          StartFormat(15);
          OutString(0,0,PUrw.ArtCode,false);
          OutValBiDi(100,0,PUrw.Quant,M4UVal,true,140);
          OutString(120,0,PUrw.Spec,false);
          if (nonblank(PUrw.SerialNr)) then begin 
            EndFormat;
            StartFormat(15);
            switch (PUrw.StockType) begin
              case 0: OutString(80,0,PUrw.SerialNr,false);
              case 1: OutString(80,0,PUrw.SerialNr & "(*)",false);
            end;
          end;
          OutValBiDi(290,0,PUrw.UPrice,M45Val,true,330);
          if (IsEnterprise) then begin
            OutValBiDi(330,0,PUrw.Quant*PUrw.ShipCost,M4UVal,true,370);
            PUCalcPerc(PUrw.CostPrice,PUrw.CustomsCost,t2);
            OutValBiDi(380,0,PUrw.Quant*t2,M4UVal,true,420);
            OutStringAdjustBiDi(420,0,PUrw.Extra,true,M4Val,465);
          end;
          OutValBiDi(480,0,PUrw.CostPrice,M45Val,true,520);
          EndFormat;
          sumquant = sumquant + PUrw.Quant;
          pursum = pursum + PUrw.Quant*PUrw.CostPrice;
          freight = freight + PUrw.Quant*PUrw.ShipCost;
          PUCalcPerc(PUrw.CostPrice,PUrw.CustomsCost,t2);
          customs = customs + PUrw.Quant*t2;
          PUCalcPerc(PUrw.UPrice,PUrw.Extra,t2);
          extra = extra + t2;
LSKIPPUROW:;          
        end;
        Black_Divider(250,480);
        StartFormat(15);
        OutValBiDi(100,0,sumquant,M4UVal,true,140);
        OutValBiDi(290,0,Round(unitsum,SetRoundModeD(2)),M4Val,true,330);
        if (IsEnterprise) then begin
          OutValBiDi(330,0,freight,M4UVal,true,370);
          OutValBiDi(380,0,customs,M4UVal,true,420);
          OutValBiDi(420,0,extra,M4UVal,true,465);
        end;
        OutValBiDi(480,0,Round(pursum,SetRoundModeD(2)),M4Val,true,520);
        EndFormat;
        totsum = totsum + pursum;
        t = unitsum;
      end;

      if RepSpec.ArtMode==0 then begin
        if (nonblank(RepSpec.f3)) then begin
          pursum = blankval;
          freight = blankval;
          customs = blankval;
          extra = blankval;
          rwcnt = MatRowCnt(PUr);
          for (i = 0 ; i<rwcnt ;i=i+1) begin
            MatRowGet(PUr,i,PUrw);
            tstr = PUrw.Location;
            if (blank(tstr)) then begin
              tstr = PUr.Location;
            end; 
            if (tstr==RepSpec.f3) then begin
              pursum = pursum + PUrw.Quant*PUrw.CostPrice;
              freight = freight + PUrw.ShipCost;
              PUCalcPerc(PUrw.CostPrice,PUrw.CustomsCost,t2);
              customs = customs + t2;
              PUCalcPerc(PUrw.CostPrice,PUrw.Extra,t2);
              extra = extra + t2;
            end;
          end;
        end;
        StartFormat(15);
        totsum = totsum + pursum;
        OutLongInt(0,"DblPU",PUr.SerNr,false);
        OutDate(60,0,PUr.TransDate,false);
        OutString(140,0,PUr.Comment,false);
        OutValBiDi(480,0,pursum,M4Val,true,515);
        EndFormat;
      end;
      totunitsum = totunitsum + t;
      totfreight = totfreight + freight;
      totcustoms = totcustoms + customs;
      totextra = totextra + extra;
    end;
   end;
  end;

  if RepSpec.ArtMode==0 then begin
    Gray_Divider(0,1);
    StartFormat(15);
    OutValBiDi(480,0,totsum,M4Val,true,515);
    EndFormat;
  end;
  if RepSpec.ArtMode==1 then begin
    totunitsum = Round(totunitsum,DefaultRoundMode);
    totsum = Round(totsum,DefaultRoundMode);
    Gray_Divider(0,1);
    StartFormat(15);
    OutValBiDi(290,0,totunitsum,M4Val,true,330);
    if (IsEnterprise) then begin
      OutValBiDi(330,0,totfreight,M4UVal,true,370);
      OutValBiDi(380,0,totcustoms,M4UVal,true,420);
      OutValBiDi(420,0,totextra,M4UVal,true,465);
    end;
    OutValBiDi(480,0,totsum,M4Val,true,520);
    EndFormat;
  end;
  EndJob;
  return;
end;
