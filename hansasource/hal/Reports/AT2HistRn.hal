external procedure HTObj(string,var string);
external procedure HTDepartment(string,var string);
external procedure HTInventoryNrs(string,string,var string);
external procedure HT2Per(Date, Date , var string);
external function Boolean CheckDepAndDate(record AT2UnitVc,string,Date);

procedure PrintAllAT2UnitWriteoffs(record RcVc RepSpec,record AT2UnitVc ATUnitr,var Boolean assetprintedf,var LongInt newat)
BEGIN
  record InvrsVc Invrsr;
  record AT2WrofVc AT2Wrofr;
  row AT2WrofVc AT2Wrofrw;
  Boolean found,testf,prntd1f,prntd2f;
  
  Invrsr.InventoryNr = ATUnitr.InventoryNr; 
  Invrsr.TransDate = RepSpec.sStartDate;
  Invrsr.FileName = "AT2WrofVc";
  found = true;
  while (LoopKey("FileName",Invrsr,3,found)) begin
    if (Invrsr.InventoryNr!=ATUnitr.InventoryNr) then begin
      found = false;
    end;
    if (Invrsr.FileName!="AT2WrofVc") then begin
      found = false;
    end;
    if (Invrsr.TransDate>RepSpec.sEndDate) then begin 
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (testf) then begin
        AT2Wrofr.SerNr = Invrsr.TransNr;
        if (ReadFirstMain(AT2Wrofr,1,true)) then begin
          if (AT2Wrofr.Writeoff==0) then begin
            if (Invrsr.Row<MatRowCnt(AT2Wrofr)) then begin
              MatRowGet(AT2Wrofr,Invrsr.Row,AT2Wrofrw);
            end;
            if (assetprintedf==false) then begin
              StartFormat(15);
               OutStringOvst(0,0,ATUnitr.InventoryNr,false,AT2Wrofr.Invalid);
               OutStringOvst(100,0,ATUnitr.Description,false,AT2Wrofr.Invalid);
               OutDate(300,0,ATUnitr.PurchaseDate,false);
               OutVal(480,0,ATUnitr.PurchVal,M4Val,true);
              EndFormat;
              assetprintedf = true;
              if (DateInRange(ATUnitr.PurchaseDate,RepSpec.sStartDate,RepSpec.sEndDate)) then  begin
                newat = newat + 1;
              end;
            end;
            if (prntd1f==false) then begin
              StartFormat(15);
               OutString(0,0,USetStr(10441),false);
              EndFormat;              
              StartFormat(15);
               OutString(15,0,USetStr(9129),false);
               OutString(75,0,USetStr(8188),false);
               OutString(195,0,USetStr(8827),true);
               OutString(265,0,USetStr(9734),true);
              EndFormat;
              Gray_Divider(0,300);            
              prntd1f = true;
            end;            
            StartFormat(15);
             OutLongIntOvst(15,"DblAT2WrofVc",AT2Wrofr.SerNr,false,AT2Wrofr.Invalid);
             OutDateOvst(75,0,AT2Wrofr.TransDate,false,AT2Wrofr.Invalid);
             OutStringOvst(195,0,AT2Wrofrw.SalesVal,true,AT2Wrofr.Invalid);
             OutStringOvst(265,0,AT2Wrofrw.DprVal,true,AT2Wrofr.Invalid);
            EndFormat;
          end;  
          if (AT2Wrofr.Writeoff==1) then begin
            if (Invrsr.Row<MatRowCnt(AT2Wrofr)) then begin
              MatRowGet(AT2Wrofr,Invrsr.Row,AT2Wrofrw);
            end;
            if (prntd2f==false) then begin
              StartFormat(15);
               OutString(0,0,USetStr(10442),false);
              EndFormat;
              StartFormat(15);
               OutString(15,0,USetStr(9129),false);
               OutString(75,0,USetStr(8188),false);
               OutString(195,0,USetStr(8827),true);
               OutString(265,0,USetStr(9734),true);
              EndFormat;
              Gray_Divider(0,300);            
              prntd2f = true;
            end;            
            StartFormat(15);
             OutLongInt(15,"DblAT2WrofVc",AT2Wrofr.SerNr,false);
             OutDate(75,0,AT2Wrofr.TransDate,false);
             OutString(195,0,AT2Wrofrw.SalesVal,true);
             OutString(265,0,AT2Wrofrw.DprVal,true);
            EndFormat;
          end;            
        end;
      end;
    end;
  end;
  RETURN;
END;

procedure PrintAllAT2UnitRevaluations(record RcVc RepSpec,record AT2UnitVc ATUnitr,var Boolean assetprintedf,var LongInt newat)
BEGIN
  record AT2DprVc AT2Dpr;
  Boolean found,testf,prntdf;

  AT2Dpr.TransDate = RepSpec.sStartDate;
  AT2Dpr.InventoryNr = ATUnitr.InventoryNr;
  found = true;
  while (LoopKey("DateInventoryNr",AT2Dpr,2,found)) begin
    if (AT2Dpr.InventoryNr!=ATUnitr.InventoryNr) then begin
      found = false;
    end;
    if (AT2Dpr.TransDate>RepSpec.sEndDate) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (testf) then begin
        if (assetprintedf==false) then begin
          StartFormat(15);
           OutString(0,0,ATUnitr.InventoryNr,false);
           OutString(100,0,ATUnitr.Description,false);
           OutDate(300,0,ATUnitr.PurchaseDate,false);
           OutVal(480,0,ATUnitr.PurchVal,M4Val,true);
          EndFormat;
          assetprintedf = true;
          if (DateInRange(ATUnitr.PurchaseDate,RepSpec.sStartDate,RepSpec.sEndDate)) then  begin
            newat = newat + 1;
          end;
        end;
        if (prntdf==false) then begin
          StartFormat(15);
           OutString(0,0,USetStr(10443),false);
          EndFormat;
          StartFormat(15);
           OutString(15,0,USetStr(9129),false);
           OutString(75,0,USetStr(8188),false);
           OutString(195,0,USetStr(8827),true);
           OutString(285,0,USetStr(5476),true);

          EndFormat;
          Gray_Divider(0,300);  
          prntdf = true;      
        end;
        StartFormat(15);
         OutLongInt(15,"DblAT2DprVc",AT2Dpr.SerNr,false);
         OutDate(75,0,AT2Dpr.StartingDate1,false);
         OutVal(195,0,AT2Dpr.StartVal,M4Val,true);
         OutString(285,0,AT2Dpr.Model1,true);
        EndFormat;
      end;  
    end;
  end;
  RETURN;
END;
  
procedure PrintAllAT2UnitResponsibles(record RcVc RepSpec,record AT2UnitVc ATUnitr,var Boolean assetprintedf,var LongInt newat)
BEGIN
  record InvrsVc Invrsr;
  record AT2TakeVc AT2Taker;
  Boolean found,testf,prntdf;
  string 10 lastcode;
  
  lastcode = ATUnitr.RespPerson;
  Invrsr.InventoryNr = ATUnitr.InventoryNr;
  Invrsr.TransDate = RepSpec.sStartDate;
  Invrsr.FileName = "AT2TakeVc";
  found = true;
  while (LoopKey("FileName",Invrsr,3,found)) begin
    if (Invrsr.InventoryNr!=ATUnitr.InventoryNr) then begin
      found = false;
    end;
    if (Invrsr.FileName!="AT2TakeVc") then begin
      found = false;
    end;
    if (Invrsr.TransDate>RepSpec.sEndDate) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (testf) then begin
        AT2Taker.SerNr = Invrsr.TransNr;
        if (ReadFirstMain(AT2Taker,1,true)) then begin
          if (AT2Taker.PhysCheckf==1) then begin
            if (assetprintedf==false) then begin
              StartFormat(15);
               OutString(0,0,ATUnitr.InventoryNr,false);
               OutString(100,0,ATUnitr.Description,false);
               OutDate(300,0,ATUnitr.PurchaseDate,false);
               OutVal(480,0,ATUnitr.PurchVal,M4Val,true);
              EndFormat;
              assetprintedf = true;
              if (DateInRange(ATUnitr.PurchaseDate,RepSpec.sStartDate,RepSpec.sEndDate)) then  begin
                newat = newat + 1;
              end;
            end;
            if (prntdf==false) then begin
              StartFormat(15);
               OutString(0,0,USetStr(10444),false);
              EndFormat;
              StartFormat(15);
               OutString(15,0,USetStr(9129),false);
               OutString(75,0,USetStr(8188),false);
               OutString(135,0,USetStr(8130),false);
               OutString(195,0,USetStr(8131),false);
              EndFormat;
              Gray_Divider(0,300);    
              prntdf = true;        
            end;          
            StartFormat(15);
             OutLongInt(15,"DblAT2TakeVc",AT2Taker.SerNr,false);
             OutDate(75,0,AT2Taker.TransDate,false);
             OutString(135,0,lastcode,false);
             OutString(195,0,AT2Taker.RespPerson,false);
            EndFormat;
            lastcode = AT2Taker.RespPerson;
          end;
        end;  
      end;
    end;
  end;
  RETURN;
END;
  
procedure PrintAllAT2UnitMovements(record RcVc RepSpec,record AT2UnitVc ATUnitr,var Boolean assetprintedf,var LongInt newat)
BEGIN
  record InvrsVc Invrsr;
  record AT2TakeVc AT2Taker;
  Boolean found,testf,prntdf;
  string 10 lastcode;  
  
  lastcode = ATUnitr.DepCode;
  Invrsr.InventoryNr = ATUnitr.InventoryNr;
  Invrsr.TransDate = RepSpec.sStartDate;
  Invrsr.FileName = "AT2TakeVc";
  found = true;
  while (LoopKey("FileName",Invrsr,3,found)) begin
    if (Invrsr.InventoryNr!=ATUnitr.InventoryNr) then begin
      found = false;
    end;
    if (Invrsr.FileName!="AT2TakeVc") then begin
      found = false;
    end;
    if (Invrsr.TransDate>RepSpec.sEndDate) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (testf) then begin
        AT2Taker.SerNr = Invrsr.TransNr;
        if (ReadFirstMain(AT2Taker,1,true)) then begin
          if (AT2Taker.PhysCheckf==0) then begin
            if (assetprintedf==false) then begin
              StartFormat(15);
               OutString(0,0,ATUnitr.InventoryNr,false);
               OutString(100,0,ATUnitr.Description,false);
               OutDate(300,0,ATUnitr.PurchaseDate,false);
               OutVal(480,0,ATUnitr.PurchVal,M4Val,true);
              EndFormat;
              assetprintedf = true;
              if (DateInRange(ATUnitr.PurchaseDate,RepSpec.sStartDate,RepSpec.sEndDate)) then  begin
                newat = newat + 1;
              end;
            end;
            if (prntdf==false) then begin
              StartFormat(15);
               OutString(0,0,USetStr(10445),false);
              EndFormat;
              StartFormat(15);
               OutString(15,0,USetStr(9129),false);
               OutString(75,0,USetStr(8188),false);
               OutString(135,0,USetStr(8803),false);
               OutString(195,0,USetStr(8804),false);
              EndFormat;  
              Gray_Divider(0,300);                        
              prntdf = true;
            end;
            StartFormat(15);
             OutLongInt(15,"DblAT2TakeVc",AT2Taker.SerNr,false);
             OutDate(75,0,AT2Taker.TransDate,false);
             OutString(135,0,lastcode,false);
             OutString(195,0,AT2Taker.DepCode,false);
            EndFormat;
            lastcode = AT2Taker.DepCode;
          end;
        end;  
      end;
    end;
  end;
  RETURN;
END;

procedure PrintAT2HistHeader(record RcVc RepSpec,string frinv,string toinv)
BEGIN
  Integer rw;
  string 255 tstr;
  
  rw = 1;
  /*
  HTDetailLevel(RepSpec.ArtMode,tstr);
  Header(rw, tstr, 1);
  rw = rw + 1;
  */
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw, tstr, 1);
  rw = rw + 1;
  HTInventoryNrs(frinv,toinv,tstr);
  Header(rw, tstr, 0);
  HTDepartment(RepSpec.AccStr,tstr);
  Header(rw, tstr, 1);
  rw = rw + 1;
  if (nonblank(RepSpec.ObjStr)) then begin
    HTObj(RepSpec.ObjStr,tstr);
    Header(rw, tstr, 1);
    rw = rw + 1;
  end;  
  if (nonblankdate(RepSpec.d1)) then begin
    tstr = USetStr(5016) & " ";
    tstr = tstr & USetStr(8776);
    tstr = tstr & ": ";
    tstr = tstr & RepSpec.d1;
    Header(rw, tstr, 1);
    rw = rw + 1;
  end;
  if (nonblankdate(RepSpec.d2)) then begin
    tstr = USetStr(5016) & " ";
    tstr = tstr & USetStr(5563);
    tstr = tstr & ": ";
    tstr = tstr & RepSpec.d2;
    Header(rw, tstr, 1);
    rw = rw + 1;
  end;
  if (nonblankdate(RepSpec.RegDate)) then begin
    tstr = USetStr(5016) & " ";
    tstr = tstr & USetStr(8776);
    tstr = tstr & ": ";
    tstr = tstr & RepSpec.RegDate;
    Header(rw, tstr, 1);
    rw = rw + 1;
  end;  
  RETURN;      
END;

global
procedure AT2HistRn(record RcVc RepSpec)
begin
  record AT2UnitVc ATUnitr;
  string 30 frinv,toinv;
  Boolean TrHs,testf,assetprintedf;
  LongInt newat;
  
  newat = 0;
  frinv = FirstInRange(RepSpec.f1,30);
  toinv = LastInRange(RepSpec.f1,30);
  StartReportJob(USetStr(10440));
  PrintAT2HistHeader(RepSpec,frinv,toinv);
  EndHeader;
  StartFormat(15);
   OutString(0,0,USetStr(10447),false);
   OutString(100,0,USetStr(10448),false);
   OutString(300,0,USetStr(10561),false);
   OutString(480,0,USetStr(10567),true);
  EndFormat;
  Gray_Divider(0,1);
  TrHs = true;
  ATUnitr.InventoryNr = frinv;
  while (LoopMain(ATUnitr,1,TrHs)) begin
    if (nonblank(RepSpec.f1)) then begin
      if (ATUnitr.InventoryNr>toinv) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,ATUnitr.Objects)==false) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.f2)) then begin
        if (RepSpec.f2!=ATUnitr.AT2Code) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (CheckDepAndDate(ATUnitr,RepSpec.AccStr,RepSpec.sStartDate)==false) then begin
          testf = false;
        end;
      end;      
      if (nonblankdate(RepSpec.d1)) then begin
        if (ATUnitr.ProdDate!=RepSpec.d1) then begin
          testf = false;
        end;
      end;
      if (nonblankdate(RepSpec.d2)) then begin
        if (ATUnitr.PurchaseDate!=RepSpec.d2) then begin
          testf = false;
        end;
      end;
     if (ATUnitr.PurchaseDate>RepSpec.sEndDate) then begin
        testf = false;
      end;
      if (nonblankdate(RepSpec.RegDate)) then begin
        if (ATUnitr.EndDate!=RepSpec.RegDate) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        assetprintedf = false;
//        Gray_Divider(0,1);
        if (assetprintedf==false) then begin
          StartFormat(15);
           OutString(0,"DblAT2UnitVc",ATUnitr.InventoryNr,false);
           OutString(100,0,ATUnitr.Description,false);
           OutDate(300,0,ATUnitr.PurchaseDate,false);
           OutVal(480,0,ATUnitr.PurchVal,M4Val,true);
          EndFormat;
          assetprintedf = true;
          if (DateInRange(ATUnitr.PurchaseDate,RepSpec.sStartDate,RepSpec.sEndDate)) then  begin
            newat = newat + ATUnitr.Quantity;
          end;
        end;


        if (RepSpec.flags[1]!=0) then begin
          PrintAllAT2UnitMovements(RepSpec,ATUnitr,assetprintedf,newat);
        end; 
        if (RepSpec.flags[2]!=0) then begin
          PrintAllAT2UnitResponsibles(RepSpec,ATUnitr,assetprintedf,newat);
        end; 
        if (RepSpec.flags[3]!=0) then begin
          PrintAllAT2UnitRevaluations(RepSpec,ATUnitr,assetprintedf,newat);
        end; 
        if (RepSpec.flags[4]!=0) then begin
          PrintAllAT2UnitWriteoffs(RepSpec,ATUnitr,assetprintedf,newat);
        end; 
        if (assetprintedf) then begin
          Gray_Divider(0,1);
        end;
      end;  
    end;
  end;
  StartFormat(15);
   OutString(0,0,USetStr(10446),false);
   OutLongInt(300,0,newat,false);
  EndFormat;
  EndJob;
  RETURN;
END;
