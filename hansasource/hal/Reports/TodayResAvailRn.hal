external function Boolean IsEnterprise();
external procedure HTResClass(string,var string);
external procedure HTResLoc(string,var string);
external function LongInt FindReservation(string,Date,Time);
external procedure HTRess(string,string,var string);
external procedure HTRooms(string,string,var string);

global
procedure TodayResAvailRnRun(Record RcVc RepSpec,Boolean hotelf)
begin
  Record JobVc Jobr;
  Record ResVc Resr;
  Row JobVc Jobrw;
  Record HotelBlock HotelBlock;  
  Integer rw,i,rwcnt;
  Date enddate;
  Boolean testf,foundf;
  longint total;
  string 255 frres,tores,tstr;
  Boolean busyf;

  frres = FirstInRange(RepSpec.f5,10);
  tores = LastInRange(RepSpec.f5,10);
  rw = 1;
  if (hotelf) then begin
    StartReportJob(USetStr(11171));
    HTRooms(frres,tores,tstr);
  end else begin
    StartReportJob(USetStr(11175));
    HTRess(frres,tores,tstr);
  end;
  if (IsEnterprise) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
    HTResLoc(RepSpec.f4,tstr);
    Header(rw,tstr,1);
  end;
  if (IsEnterprise) then begin
    rw = rw + 1;
    HTResClass(RepSpec.f3,tstr);
    Header(rw,tstr,1);
  end;
  rw = rw + 1;
  EndHeader;

  SetRepCol(2,0);
  SetRepCol(3,60);
  SetRepCol(5,120);
  SetRepCol(6,170);
  SetRepCol(7,220);
  SetRepCol(8,320);
  SetRepCol(9,450);

  StartFormat(15);
  OutString(2,0,USetStr(9971),false);
  if (IsEnterprise) then begin
    OutString(3,0,USetStr(11176),false);
  end;
//  OutString(4,0,USetStr(11177),false);
//  OutString(5,0,USetStr(11178),false);
  if (IsEnterprise) then begin
    OutString(5,0,USetStr(11179),false);
  end;
  OutString(6,0,USetStr(11182),false);
//  OutString(7,0,USetStr(11173),false);
  if (IsEnterprise) then begin
    OutString(1,0,USetStr(11174),true);
  end;
  EndFormat;
  Gray_Divider(0,1);

  BlockLoad(HotelBlock);
  total = 0;
  foundf = true;
  Resr.Code = frres;
  while (LoopMain(Resr,1,foundf)) begin
    if (nonblank(tores)) then begin
      if (Resr.Code>tores) then begin foundf = false; end;
    end;
    busyf = false;
    testf = foundf;
    Jobr.SerNr = FindReservation(Resr.Code,CurrentDate,CurrentTime);
    if (Jobr.SerNr>0) then begin
      if (ReadFirstMain(Jobr,1,true)) then begin
        if (Jobr.ResStatus == HotelBlock.ChInSt) then begin
          if (RepSpec.ArtMode==0) then begin
            testf = false;
          end else begin
            busyf = true;
          end;
        end;
      end;
    end;
    if ((Resr.ResStatus<>RepSpec.f1) and nonblank(RepSpec.f1)) then begin
      testf = false;
    end;
    if ((Resr.Type<>RepSpec.f2) and nonblank(RepSpec.f2)) then begin
      testf = false;
    end;
    if (SetInSet(RepSpec.f3,Resr.Class)==false) then begin 
      testf = false;
    end;
    if ((Resr.ResLoc<>RepSpec.f4) and nonblank(RepSpec.f4)) then begin
      testf = false;
    end;
    if (testf) then begin
      total = total + 1;
      StartFormat(15);
      OutString(2,"DblResVc",Resr.Code,false);
      if (IsEnterprise) then begin
        OutString(3,0,Resr.Type,false);
      end;
//      OutString(5,0,Resr.Category,false);//not in interface
      if (IsEnterprise) then begin
        OutString(5,0,Resr.ResStatus,false);
      end;
      OutString(6,0,Resr.Name,false);
      if (busyf) then begin
        OutString(9,0,USetStr(11172),true);
      end;
      if (IsEnterprise) then begin
        OutString(1,0,Resr.ResLoc,true);     
      end;
      EndFormat;
      if (nonblank(Resr.Contact)) then begin
        StartFormat(15);
         OutString(6,0,USetStr(11173) & ": " & Resr.Contact,false);
        EndFormat;
      end;
      if (nonblank(Resr.Class)) then begin
        StartFormat(15);
         OutString(6,0,USetStr(11177) & ": " & Resr.Class,false);
        EndFormat;
      end;
    end;
  end;

  Gray_Divider(0,1);
  
  StartFormat(15);
  OutString(2,0,USetStr(11183) & total,false);
  EndFormat;
  
  EndJob;
  return;
end;

global
procedure TodayResAvailRn(Record RcVc RepSpec)
begin
  TodayResAvailRnRun(RepSpec,false);
  return;
end;

global
procedure TodayRoomAvailRn(Record RcVc RepSpec)
begin
  TodayResAvailRnRun(RepSpec,true);
  return;
end;
