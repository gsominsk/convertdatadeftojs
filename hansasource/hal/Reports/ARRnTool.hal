external function string 255 CreateInvoiceNumberDisputedMark(LongInt,string,Integer);
external function val FindInstalmentPaidAmount(record IVVc,LongInt,LongInt,Date,var val);
external function LongInt CalculateLateDays(Date,Date,Date,Boolean,Boolean);
external function Boolean GetARPayRate(LongInt,LongInt,var val,var val,var val,var val,var val,string,Date);
external function Boolean HasMultiCurrency();
external procedure SubCashRows_IVVc(record IVVc,Boolean,var val,var val);
external procedure SubPrePayments(record IVVc,var val,var val);
external procedure YcToStr(Integer,var string);
external procedure ARRnAddToDebtorsAccounts(string,Integer,val,Array string,Array val,var Integer);
external function string 255 GetCustomerOnAccountAC(string);
external procedure GetARAcc(string,var string);
external function Integer GetIntYc(Date);
external function string 255 CreateInvoiceNumber(LongInt,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function val MulWithRateToBase2(var string,Date,val,roundmode);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure Base1ToBase2(var val,Date,var val);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external function Integer TypeOfCurncy(var string,var Integer);

procedure ToStrTRCode(var string rstr,Integer ycp,LongInt nrp)
begin
  string 255 t2;
  
  t2 = nrp;
  rstr = StrTRCode(ycp);
  if (nonblank(rstr)) then begin
    rstr = rstr & ".";
  end;  
  rstr = rstr & t2;
  return;
end;

procedure PrintInstallments(record RcVc RepSpec,record IVVc IVr,record CUVc CUr,var val InvVal)
BEGIN
  record ARInstallVc ARIr;
  record ARInstallHistVc ARIHr;
  Boolean TrHs,testf;
  string 255 tstr;
  Integer h1,h2,h3;
  LongInt latedays;
  val t,tcur;

  InvVal = blankval;
  h1 = 55;
  h2 = 100;
  h3 = 170;
  if (nonblankdate(RepSpec.d1)) or (RepSpec.ArtMode==0) then begin
    ARIHr.InvoiceNr = IVr.SerNr;
    TrHs = true;
    while (LoopMain(ARIHr,1,TrHs)) begin
      if (ARIHr.InvoiceNr!=IVr.SerNr) then begin TrHs = false; end;
      if (TrHs) then begin
        testf = true;
        if (nonblankdate(RepSpec.d1)) then begin
          latedays = CalculateLateDays(IVr.InvDate,ARIHr.DueDate,CurrentDate,RepSpec.flags[22]!=0,RepSpec.ArtMode!=2 and RepSpec.ArtMode!=5);
        end else begin
          latedays = CalculateLateDays(IVr.InvDate,ARIHr.DueDate,CurrentDate,RepSpec.flags[22]!=0,RepSpec.ArtMode!=2 and RepSpec.ArtMode!=5);
        end;
        if (RepSpec.flags[0]<>0) then begin 
          if (latedays>=0) then begin testf = false; end;
        end;
        if (RepSpec.long1>0) then begin          
          if (-latedays<=RepSpec.long1) then begin testf = false; end;
        end;
        if (testf) then begin
          StartFormat(15);
          OutString(h1,0,USetStr(2431),false);
          tstr = CreateInvoiceNumberDisputedMark(ARIHr.InvoiceNr,"",IVr.DisputedFlag);
          OutString(h2,"DblAR",tstr,false);
          OutDate(h3,0,IVr.InvDate,false);
          OutDate(240,0,ARIHr.DueDate,false);
          t = FindInstalmentPaidAmount(IVr,ARIHr.InvoiceNr,ARIHr.InstallNr,RepSpec.d1,tcur);
          if (RepSpec.flags[2]==1) then begin
            OutValBiDi(360,0,ARIHr.RVal,M4Val,true,420);
            OutValBiDi(450,0,ARIHr.RVal,M4Val,true,490);
            OutString(480,0,IVr.CurncyCode,true);
          end else begin
            OutValBiDi(380,0,ARIHr.BookRVal,M4Val,true,420);
            OutValBiDi(480,0,ARIHr.BookRVal,M4Val,true,490);
          end;  
          EndFormat;  
          InvVal = InvVal + ARIHr.RVal;
        end;
      end;
    end;
  end else begin
    ARIr.InvoiceNr = IVr.SerNr;
    TrHs = true;
    while (LoopMain(ARIr,1,TrHs)) begin
      if (ARIr.InvoiceNr!=IVr.SerNr) then begin TrHs = false; end;
      if (TrHs) then begin
        testf = true;
        latedays = CalculateLateDays(IVr.InvDate,ARIr.DueDate,CurrentDate,RepSpec.flags[22]!=0,RepSpec.ArtMode!=2 and RepSpec.ArtMode!=5);
        if (RepSpec.flags[0]<>0) then begin 
          if (latedays>=0) then begin testf = false; end;
        end;
        if (RepSpec.long1>0) then begin          
          if (-latedays<=RepSpec.long1) then begin testf = false; end;
        end;
        if (testf) then begin
          StartFormat(15);
          OutString(h1,0,USetStr(2431),false);
          tstr = CreateInvoiceNumberDisputedMark(ARIr.InvoiceNr,"",IVr.DisputedFlag);
          OutString(h2,"DblAR",tstr,false);
          OutDate(h3,0,IVr.InvDate,false);
          OutDate(240,0,ARIr.DueDate,false);
          if (RepSpec.flags[2]==1) then begin
            OutValBiDi(380,0,ARIr.RVal,M4Val,true,420);
            if (nonblank(CUr.CurncyCode)) then begin
              OutValBiDi(450,0,ARIr.RVal,M4Val,true,490);
              OutString(480,0,IVr.CurncyCode,true);
            end else begin
              OutValBiDi(450,0,ARIr.BookRVal,M4Val,true,490);
            end;
          end else begin
            OutValBiDi(380,0,ARIr.BookRVal,M4Val,true,420);
            OutValBiDi(480,0,ARIr.BookRVal,M4Val,true,490);
          end;  
          EndFormat;  
          InvVal = InvVal + ARIHr.RVal;
        end;
      end;
    end;
  end;
  RETURN;
END;

global
procedure ARWithLogg(record CUVc CUr,var array string acur,var array val av1,var Integer curcnt,record RcVc RepSpec,record IVVc IVp,record IPrsVc ivIPrsr,record TRVc ivTRr,var val rvalp,Integer hrwcnt,Boolean backdatf)
BEGIN
  record IVVc IVr;
  record IPVc IPr;
  record PurgeTRVc PurgeTRr;
  record TRVc TRr;
  record CLInVc CLInr;
  record CLInVc CLOutr;
  record IPrsVc IPrsr;
  record CredManVc CredManr;
  row IPVc IPrw;
  row TRVc TRrw;
  row CLInVc CLInrw;
  row CLInVc CLOutrw;
  Boolean found;
  val invsal,t,InvVal;
  Integer h1,h2,h3;
  Integer i,rwcnt;
  LongInt invnr;
  val rs,rsb1,t2,t3,tinivcurrate,rategain,totrategain;
  Boolean testf;
  string 255 tstr,tstr2,dblstr;
  Integer typeofcur,oldstyle;
  record BaseCurBlock BCb;
  
  h1 = 55;
  h2 = 100;
  h3 = 170;
  BlockLoad(BCb);
  invnr = IVp.SerNr;
  if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
    IVp.Sum4 = -IVp.Sum4;
  end;
  if (RepSpec.flags[2]==1) then begin
    if (nonblank(CUr.CurncyCode)) then begin
      InvVal = IVp.Sum4;
//rvalp
    end else begin
      InvVal = MulRateToBase1(IVp.CurncyCode,IVp.Sum4,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
//      InvVal = MulRateToBase1(IVp.CurncyCode,rvalp,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
//rvalp
    end;
  end else begin
//    InvVal = MulRateToBase1(IVp.CurncyCode,rvalp,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
//we need to show full amount and then all payments  
    InvVal = MulRateToBase1(IVp.CurncyCode,IVp.Sum4,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
  end;
  if (hrwcnt>1) then begin
    Gray_Divider(300,380);
  end;
//  rs = MulRateToBase1(IVp.CurncyCode,rvalp,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
//  rs = MulWithRateToBase1(IVp.CurncyCode,CurrentDate,rvalp,DefaultCurRoundOff);   
  if ((IVp.InstallmentInv==1) and (RepSpec.flags[19]!=0)) then begin
    PrintInstallments(RepSpec,IVp,CUr,InvVal);
    rs = InvVal;
    rsb1 = MulRateToBase1(IVp.CurncyCode,InvVal,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
    SubPrePayments(IVp,rs,rsb1);
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
      if (IVp.CredInv>0) then begin
        SubCashRows_IVVc(IVp,false,rs,rsb1);
      end;
    end else begin
      SubCashRows_IVVc(IVp,false,rs,rsb1);
    end;
    if (RepSpec.flags[2]==0) then begin
      InvVal = rsb1;
    end;
  end else begin
    rs = IVp.Sum4;
    rsb1 = MulRateToBase1(IVp.CurncyCode,IVp.Sum4,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
    SubPrePayments(IVp,rs,rsb1);
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
      if (IVp.CredInv>0) then begin
        SubCashRows_IVVc(IVp,false,rs,rsb1);
      end;
    end else begin
      SubCashRows_IVVc(IVp,false,rs,rsb1);
    end;
    switch (ivIPrsr.TransType) begin
      case kIPrsTransTypeInvoice:
        tstr = IVr.SerNr;
        if (nonblank(IVr.InvoiceNr)) then begin
          tstr = tstr & ", (";
          tstr = tstr & IVr.InvoiceNr;
          tstr = tstr & ")";
        end;
        dblstr = "DblAR";
      case kIPrsTransTypePurgeNLTransaction:
        tstr = IVr.SerNr;
        if (nonblank(IVr.InvoiceNr)) then begin
          tstr = tstr & ", (";
          tstr = tstr & IVr.InvoiceNr;
          tstr = tstr & ")";
        end;
        dblstr = "DblTrans2";
        YcToStr(ivTRr.IntYc,tstr2);     
        tstr2 = tstr2 & "." & ivTRr.Number;
      case kIPrsTransTypeNLTransaction:
        tstr = IVr.SerNr;
        if (nonblank(IVr.InvoiceNr)) then begin
          tstr = tstr & ", (";
          tstr = tstr & IVr.InvoiceNr;
          tstr = tstr & ")";
        end;
        dblstr = "DblTrans2";
        YcToStr(ivTRr.IntYc,tstr2);     
        tstr2 = tstr2 & "." & ivTRr.Number;
    end;

    StartFormat(15);
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
      OutString(h1,0,USetStr(2433),false);
    end else begin
      OutString(h1,0,USetStr(2431),false);
    end;
    tstr = CreateInvoiceNumberDisputedMark(IVp.SerNr,IVp.OfficialSerNr,IVp.DisputedFlag);
    OutStringID(h2,dblstr,tstr,false,tstr2);
    OutDate(h3,0,IVp.InvDate,false);
    OutDate(240,0,IVp.PayDate,false);
    if (RepSpec.flags[2]==1) then begin
      if (nonblank(CUr.CurncyCode)) then begin
        OutValBiDi(360,0,IVp.Sum4,M4Val,true,400);
        OutValBiDi(450,0,rvalp,M4Val,true,500);
        OutString(465,0,IVp.CurncyCode,false);
      end else begin
        OutValBiDi(360,0,IVp.Sum4,M4Val,true,400);
        OutValBiDi(450,0,rsb1,M4Val,true,500);
        OutString(480,0,IVp.CurncyCode,true);
      end;
    end else begin
      OutValBiDi(380,0,InvVal,M4Val,true,420);
      OutValBiDi(480,0,rsb1,M4Val,true,520);
    end;  
    EndFormat;  
  end;
  if (RepSpec.flags[23]!=0) then begin  
    if (nonblank(IVp.InvComment)) or (nonblank(IVp.OfficialSerNr)) then begin
      StartFormat(15);
      if (IVr.DisputedFlag==1) then begin 
        OutStringID(11,"DblIVVc",IVp.OfficialSerNr & "(*)",false,IVr.SerNr);
      end else begin 
        OutStringID(11,"DblIVVc",IVp.OfficialSerNr,false,IVr.SerNr);
      end;  
      if (nonblank(IVp.InvComment))then begin
        OutString(h2,0,IVp.InvComment,false);
      end;
      EndFormat;
    end;
  end else begin
    if (nonblank(IVp.InvComment))then begin
      StartFormat(15);
       OutString(h2,0,IVp.InvComment,false);
      EndFormat;
    end; 
  end;
  AddCurncyTotals(acur,av1,curcnt,IVp.CurncyCode,rvalp);
  invsal = InvVal;
    
  IPrsr.IVNr = invnr;
  found = true;
  while (LoopKey("IVKey",IPrsr,1,found)) begin
    testf = false;
      if (IPrsr.IVNr<>invnr) then begin
        found = false;
      end;  
    if (found) then begin
      testf = true;
      if (backdatf) then begin
        if (IPrsr.TransDate>RepSpec.d1) then begin testf = false; end;
      end;  
    end;
    if (testf) then begin
      totrategain = blankval;
      if (IPrsr.TransType==kIPrsTransTypeInvoice) then begin
        IVr.SerNr = IPrsr.TransNr;
        if (IVr.SerNr<>invnr) then begin
          if (ReadFirstMain(IVr,1,true)) then begin
            if (IVr.Invalid==0) then begin
            if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
              t = -IVr.Sum4;
              t2 = -IVr.Sum4;
              t = MulRateToBase1(IVp.CurncyCode,t,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
              if (RepSpec.flags[2]==1) then begin
                if (nonblank(CUr.CurncyCode)) then begin
                  invsal = invsal + t2;
                end else begin
                  invsal = invsal + t;
                end;
              end else begin
                invsal = invsal + t;
              end;
              StartFormat(15);
              OutString(h1,0,USetStr(2433),false);
              tstr = CreateInvoiceNumberDisputedMark(IVr.SerNr,IVr.OfficialSerNr,IVr.DisputedFlag);
              OutString(h2,"DblAR",tstr,false);
              OutDate(h3,0,IVr.InvDate,false);
              OutDate(240,0,IVr.PayDate,false);
//              OutString(300,0,IVr.PayDeal,false);
              if (RepSpec.flags[2]==1) then begin
                OutValBiDi(360,0,t2,M4Val,true,400);
                OutValBiDi(450,0,invsal,M4Val,true,500);
              end else begin
                OutValBiDi(380,0,t,M4Val,true,420);
                OutValBiDi(480,0,invsal,M4Val,true,520);
              end;
              EndFormat;
              if (nonblank(IVp.InvComment)) then begin
                StartFormat(15);
                OutString(h2,0,IVr.InvComment,false);
                EndFormat;
              end;
            end;
            end;
          end;
        end;
      end;
      if (IPrsr.TransType==kIPrsTransTypeReceipt) then begin
          IPr.SerNr = IPrsr.TransNr;
          if (ReadFirstMain(IPr,1,true)) then begin
            t = 0;
            t2 = 0;
            if (IPr.RejectedFlag==0) then begin
              rwcnt = MatRowCnt(IPr);
              for (i=0; i<rwcnt; i=i+1) begin
                MatRowGet(IPr,i,IPrw);
                if ((blankdate(IPrw.PayDate)) or (IPrw.PayDate==IPrsr.CustDate)) then begin
                  if ((IPrw.stp==1) or (IPrw.stp==5) or (IPrw.stp==6) or (IPrw.stp==7)) then begin
                    if (IPrw.ovst==0) then begin
                      if (IPrw.InvoiceNr==invnr) then begin
                        if (IPrw.PayDate==IPrsr.CustDate) then begin
                          if (RepSpec.flags[2]==1) then begin
                            if (nonblank(CUr.CurncyCode)) then begin
                              if (IPrw.BankCurncy==BCb.BaseCur1) then begin
                                t3 = IPrw.InvVal;
                                t = t + t3;
                              end else begin
//                                t3 = MulWithRateToBase1(IPrw.InvCurncy,IPrw.PayDate,IPrw.InvVal,DefaultCurRoundOff);   
                                t3 = IPrw.InvVal;
                                t = t + t3;
                              end;
                            end else begin
                              if (IPrw.BankCurncy==BCb.BaseCur1) then begin
                                t = t + IPrw.BankVal;
                                tinivcurrate = MulRateToBase1(IPrw.InvCurncy,IPrw.InvVal,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
                                rategain = tinivcurrate - IPrw.BankVal;
                              end else begin
                                t3 = MulWithRateToBase1(IPrw.InvCurncy,IPrw.PayDate,IPrw.InvVal,DefaultCurRoundOff);   
                                t = t + t3;
                                tinivcurrate = MulRateToBase1(IPrw.InvCurncy,IPrw.InvVal,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
                                rategain = tinivcurrate - t3;
                              end;
                              totrategain = totrategain + rategain;
                            end;
                          end else begin
                            if (IPrw.BankCurncy==BCb.BaseCur1) then begin
                              tinivcurrate = MulRateToBase1(IPrw.InvCurncy,IPrw.InvVal,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
                              rategain = tinivcurrate - IPrw.BankVal;
                              t = t + IPrw.BankVal;
                              totrategain = totrategain + rategain;
                            end else begin
                              tinivcurrate = MulRateToBase1(IPrw.InvCurncy,IPrw.InvVal,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
                              t3 = MulWithRateToBase1(IPrw.InvCurncy,IPrw.PayDate,IPrw.InvVal,DefaultCurRoundOff);   
                              t = t + t3;
                              rategain = tinivcurrate - t3;
                              totrategain = totrategain + rategain;
                            end;
                          end;
                          t2 = t2 + IPrw.InvVal;
                        end;  
                      end;
                    end;  
                  end;
                end;
              end;  
            end;
            if ((t<>0) or (IPr.RejectedFlag<>0)) then begin
              invsal = invsal - t - totrategain;
              t = -t;
              t2 = -t2;
              if ((IPr.OKFlag<>0) and (IPr.ReceivedFlag==0)) then begin
                OutString(h1,0,USetStr(2432),false);
              end else begin
                if (IPr.OKFlag==0) then begin OutString(h1,0,USetStr(2533),false); end;
                if (IPr.RejectedFlag==1) then begin OutString(h1,0,USetStr(2531),false); end;
                if ((IPr.RejectedFlag==0) and (IPr.OKFlag==1)) then begin OutString(h1,0,USetStr(2532),false); end;
              end;
              StartFormat(15);
//              OpM46o(h2,"DblAR",&IPr.SerNr,M4Long,false,IPr.SerNr);
              OutLongInt(h2,"DblCuPerIP",IPr.SerNr,false);
//             OutDate(240,0,IPr.TransDate,false);
              OutDate(240,0,IPrsr.CustDate,false);
              if (RepSpec.flags[2]==1) then begin
                OutValBiDi(360,0,t2,M4Val,true,400);
                if (nonblank(CUr.CurncyCode)) then begin
                end else begin
                  OutValBiDi(410,0,totrategain,M4Val,true,450);
                end;
                OutValBiDi(450,0,invsal,M4Val,true,500);
              end else begin
                OutValBiDi(380,0,t,M4Val,true,420);
                OutValBiDi(425,0,totrategain,M4Val,true,465);
                OutValBiDi(480,0,invsal,M4Val,true,520);
              end;  
              EndFormat;
            end;
          end;
      end;
      if (IPrsr.TransType==kIPrsTransTypeNLTransaction) then begin
          TRr.Number = IPrsr.TransNr;
          TRr.IntYc = GetIntYc(IPrsr.TransDate);          
          if (ReadFirstMain(TRr,2,true)) then begin
            if (TRr.TransDate==IPrsr.CustDate) then begin
              t = 0;
              rwcnt = MatRowCnt(TRr);
              for (i=0; i<rwcnt; i=i+1) begin
                MatRowGet(TRr,i,TRrw);
                if (TRrw.ovst==0) then begin
                  if (TRrw.stp==1) then begin
                    if (TRrw.SerNr==invnr) then begin
                      if (TRrw.CredVal<>0) then begin
                        t = TRrw.CurDebVal - TRrw.CurCredVal;
                        t2 = TRrw.DebVal - TRrw.CredVal;
                        if ((TRrw.CurDebVal==0) and (TRrw.CurCredVal==0)) then begin
                          typeofcur = TypeOfCurncy(TRrw.Curncy,oldstyle);   
                          if (typeofcur==1) then begin
                            t = t2;                          
                          end;
                          if (typeofcur==2) then begin
                            t = TRrw.DebVal2 - TRrw.CredVal2;
                          end;                          
                        end;
                        invsal = t + invsal;                        
                        ToStrTRCode(tstr,TRr.IntYc,TRr.Number);
                        StartFormat(15);
                        OutString(h1,0,USetStr(2530),false);
                        OutString(h2,"DblTrans",tstr,false);
                        OutDate(240,0,TRr.TransDate,false);
                        if (RepSpec.flags[2]==0) then begin
                          OutValBiDi(380,0,t2,M4Val,true,420);
                        end else begin
                          OutValBiDi(380,0,t,M4Val,true,420);
                        end;  
                        OutValBiDi(480,0,invsal,M4Val,true,520);
                        EndFormat;                        
                      end;  
                      if (TRrw.DebVal<>0) then begin
                        t = TRrw.CurDebVal - TRrw.CurCredVal;
                        t2 = TRrw.DebVal - TRrw.CredVal;
                        if ((TRrw.CurDebVal==0) and (TRrw.CurCredVal==0)) then begin
                          typeofcur = TypeOfCurncy(TRrw.Curncy,oldstyle);   
                          if (typeofcur==1) then begin
                            t = t2;                          
                          end;
                          if (typeofcur==2) then begin
                            t = TRrw.DebVal2 - TRrw.CredVal2;
                          end;                          
                        end;
                        invsal = t + invsal;                        
                        ToStrTRCode(tstr,TRr.IntYc,TRr.Number);
                        StartFormat(15);
                        OutString(h1,0,USetStr(2530),false);
                        OutString(h2,"DblTrans",tstr,false);
                        OutDate(240,0,TRr.TransDate,false);
                        if (RepSpec.flags[2]==0) then begin
                          OutValBiDi(380,0,t2,M4Val,true,420);
                        end else begin
                          OutValBiDi(380,0,t,M4Val,true,420);
                        end;  
                        OutValBiDi(480,0,invsal,M4Val,true,520);
                        EndFormat;                        
                      end;  
                    end;  
                  end;
                end;
              end;
            end;
          end;                    
      end;
      if (IPrsr.TransType==kIPrsTransTypePurgeNLTransaction) then begin
          PurgeTRr.Number = IPrsr.TransNr;
          PurgeTRr.IntYc = GetIntYc(IPrsr.TransDate);          
          PurgeTRr.TransRow = IPrsr.TransRow;
          if (ReadFirstMain(PurgeTRr,3,true)) then begin
            if (PurgeTRr.TransDate==IPrsr.CustDate) then begin
              t = 0;
              if (PurgeTRr.SerNr==invnr) then begin
                if (PurgeTRr.CredVal<>0) then begin
                  t = PurgeTRr.CurDebVal - PurgeTRr.CurCredVal;
                  t2 = PurgeTRr.DebVal - PurgeTRr.CredVal;
                  if ((PurgeTRr.CurDebVal==0) and (PurgeTRr.CurCredVal==0)) then begin
                    typeofcur = TypeOfCurncy(PurgeTRr.Curncy,oldstyle);   
                    if (typeofcur==1) then begin
                      t = t2;                          
                    end;
                    if (typeofcur==2) then begin
                      t = PurgeTRr.DebVal2 - PurgeTRr.CredVal2;
                    end;                          
                  end;
                  invsal = t + invsal;                        
                  ToStrTRCode(tstr,PurgeTRr.IntYc,PurgeTRr.Number);
                  StartFormat(15);
                  OutString(h1,0,USetStr(2530),false);
                  OutString(h2,"DblTrans",tstr,false);
                  OutDate(240,0,PurgeTRr.TransDate,false);
                  if (RepSpec.flags[2]==0) then begin
                    OutValBiDi(380,0,t2,M4Val,true,420);
                  end else begin
                    OutValBiDi(380,0,t,M4Val,true,420);
                  end;  
                  OutValBiDi(480,0,invsal,M4Val,true,520);
                  EndFormat;                        
                end;  
              end;  
            end;
          end;                    
      end;
      if (IPrsr.TransType==kIPrsTransTypeCashIn) then begin
          CLInr.SerNr = IPrsr.TransNr;
          if (ReadFirstMain(CLInr,1,true)) then begin
            if (CLInr.TransDate==IPrsr.CustDate) then begin
              t = 0;
              rwcnt = MatRowCnt(CLInr);
              for (i=0; i<rwcnt; i=i+1) begin
                MatRowGet(CLInr,i,CLInrw);
                if (CLInrw.TransNr==invnr) then begin
                  t = -CLInrw.Sum;
                  t2 = -CLInrw.Sum;

                  tinivcurrate = MulRateToBase1(CLInr.CurncyCode,t,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
                  t2 = MulRateToBase1(CLInr.CurncyCode,t,CLInr.FrRate,CLInr.ToRateB1,CLInr.ToRateB2,CLInr.BaseRate1,CLInr.BaseRate2,DefaultCurRoundOff);
                  rategain = tinivcurrate - t2;                                   
                  if (RepSpec.flags[2]==1) then begin
                    if (nonblank(CUr.CurncyCode)) then begin
                      invsal = invsal + t;        
                    end else begin
                      invsal = invsal + tinivcurrate;        
                    end;
                  end else begin
                    invsal = invsal + t2 + rategain;        
                  end;
                  StartFormat(15);
                  OutString(h1,0,USetStr(1193),false);
                  OutString(h2,"DblCLInVc",CLInr.SerNr,false);
                  OutDate(240,0,CLInr.TransDate,false);
                  if (RepSpec.flags[2]==1) then begin
                    OutValBiDi(360,0,t,M4Val,true,400);
                    OutValBiDi(450,0,invsal,M4Val,true,500);
                  end else begin
                    OutValBiDi(380,0,t2,M4Val,true,420);
                    OutValBiDi(425,0,rategain,M4Val,true,465);
                    OutValBiDi(480,0,invsal,M4Val,true,520);
                  end;  
                  EndFormat;                                                        
                end;  
              end;
            end;
          end;
      end;      
      if (IPrsr.TransType==6) then begin
        CredManr.SerNr = IPrsr.TransNr;
        if (ReadFirstMain(CredManr,1,true)) then begin
          t = 0;
          t2 = 0;
          if (CredManr.Invalid==0) then begin
            t3 = MulRateToBase1(CredManr.CurncyCode,CredManr.InvSum4,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2,DefaultCurRoundOff);
            t = t + t3;
            t2 = t2 + CredManr.InvSum4;
            if (t<>0) then begin
              invsal = invsal - t;
              t = -t;
              t2 = -t2;
              if (CredManr.OKFlag<>0) then begin
                OutString(h1,0,USetStr(1635),false);
              end;
              StartFormat(15);
              OutLongInt(h2,"DblCredManVc",CredManr.SerNr,false);
              OutDate(240,0,CredManr.TransDate,false);
              if (RepSpec.flags[2]==1) then begin
                OutValBiDi(380,0,t2,M4Val,true,420);
              end else begin
                OutValBiDi(380,0,t,M4Val,true,420);
              end;  
              EndFormat;
            end;
          end;
        end;
      end;

    end;
  end;
  RETURN;
END;

global
procedure PrintCurTotalsRow(record SMVc CurTotalsr,Integer snr,Integer curcol,Integer col1,Integer col2,Integer col3)
BEGIN
  row SMVc CurTotalsrw;
  Integer i,rwcnt;
    
  rwcnt = MatRowCnt(CurTotalsr);    
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CurTotalsr,i,CurTotalsrw);
    if ((CurTotalsrw.DebVal!=blankval) or (CurTotalsrw.DebVal2!=blankval) or (CurTotalsrw.CurDebVal!=blankval)) then begin
      StartFormat(15);
       if (HasMultiCurrency) then begin
         if (snr!=-1) then begin
           OutString(130,0,USetStr(snr),false);
         end else begin
           OutString(curcol,0,CurTotalsrw.CurncyCode,false);
         end;
       end;
       if ((col1>-1) and (CurTotalsrw.DebVal!=blankval)) then begin    
         OutVal(col1,0,CurTotalsrw.DebVal,M4Val,true);
       end;
       if ((col2>-1) and (CurTotalsrw.DebVal2!=blankval)) then begin    
         OutVal(col2,0,CurTotalsrw.DebVal2,M4Val,true);
       end;  
       if ((col3>-1) and (CurTotalsrw.CurDebVal!=blankval)) then begin    
         OutVal(col3,0,CurTotalsrw.CurDebVal,M4Val,true);
       end;  
       if (HasMultiCurrency) then begin
         if (snr!=-1) then begin
           OutString(480,0,CurTotalsrw.CurncyCode,true);
         end;  
       end;
      EndFormat;
    end;  
  end;
  RETURN;
END;

global
procedure AddCurTotalsRow(string curncycode,val rval,val rval2,val rval3,var record SMVc CurTotalsr)
BEGIN
  row SMVc CurTotalsrw;
  Integer i,rwcnt;
  Boolean addf;
  record BaseCurBlock bascur;
  string 20 loccurncycode;
  
  loccurncycode = curncycode;
  BlockLoad(bascur);
  if (blank(loccurncycode)) then begin
    loccurncycode = bascur.BaseCur1;
  end;
  addf = true;
  rwcnt = MatRowCnt(CurTotalsr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CurTotalsr,i,CurTotalsrw);
    if (CurTotalsrw.CurncyCode==loccurncycode) then begin
      CurTotalsrw.DebVal = CurTotalsrw.DebVal + rval;
      CurTotalsrw.DebVal2 = CurTotalsrw.DebVal2 + rval2;
      CurTotalsrw.CurDebVal = CurTotalsrw.CurDebVal + rval3;
      MatRowPut(CurTotalsr,i,CurTotalsrw);
      addf = false;
      i = rwcnt;
    end;
  end;
  if (addf) then begin
    ClearRow(CurTotalsr,CurTotalsrw,1);
    CurTotalsrw.CurncyCode = loccurncycode;
    CurTotalsrw.DebVal = rval;
    CurTotalsrw.DebVal2 = rval2;
    CurTotalsrw.CurDebVal = rval3;
    MatRowPut(CurTotalsr,rwcnt,CurTotalsrw);
  end;
  RETURN;
END;

global
function Boolean ObjectTypeMatch(string ObjStr,string ObjType)
BEGIN
  record ObjVc Objr;
  Boolean res,TrHs;
  
  TrHs = true;
  Objr.Code = "";
  Objr.OTCode = ObjType;
  while (LoopKey("OTCode",Objr,1,TrHs)) begin
    if (Objr.OTCode!=ObjType) then begin TrHs = false; end;
    if (TrHs) then begin    
      if (SetInSet(Objr.Code,ObjStr)) then begin
        res = true;
        goto LObjectTypeMatch;
      end;
    end;
  end; 
LObjectTypeMatch:;  
  ObjectTypeMatch = res;
  RETURN;
END;

function Boolean PrepaymentObjectMatch(LongInt CUPNr,string ObjStr,string ObjType)
BEGIN
  record ARPayHistVc ARPayHistr;  
  record IPVc IPr;  
  row IPVc IPrw;
  Boolean foundf,res;
  Integer i,rwcnt;

  res = true;
  if ((blank(ObjType)) and (blank(ObjStr))) then begin
    goto LPrepaymentObjectMatch;
  end;
  ARPayHistr.CUPNr = CUPNr;
  ARPayHistr.FileName = "IPVc";
  foundf = true;
  while (LoopMain(ARPayHistr,2,foundf)) begin
    if ((ARPayHistr.CUPNr<>CUPNr) or (ARPayHistr.FileName<>"IPVc")) then begin foundf = false; end;
    if (foundf) then begin
      IPr.SerNr = ARPayHistr.SerNr;
      if (ReadFirstMain(IPr,1,true)) then begin
        rwcnt = MatRowCnt(IPr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IPr,i,IPrw);
          if (IPrw.CUPNr==CUPNr) then begin
            if (nonblank(ObjType)) then begin
              res = ObjectTypeMatch(IPrw.Objects,ObjType);
            end;
            if (nonblank(ObjStr)) then begin
              res = SetInSet(ObjStr,IPrw.Objects);
            end;
            goto LPrepaymentObjectMatch;
          end;
        end;
      end;
    end;
  end;
LPrepaymentObjectMatch:;
  PrepaymentObjectMatch = res;
  return;
end;

global
procedure GetOnAccBalance(record RcVc RepSpec,string cucode,string cucrncy,Boolean backdate,Integer foreigncur,var val sump,var val bc2sump,var val rvalp,var val sumbooked,var val sumnow,var val sumcurncy,var val sumdiff,record SMVc CurTotalsr,
                          Array string debaccs,Array val debbal,var Integer debcnt)
begin
  val t,t2,curval;
  record IPrsVc IPrsr;
  record ARPayHistVc ARPayHistr;  
  record ARPayHistVc firstARPayHistr;  
  record IVVc IVr;
  record IPVc IPr;
  row IPVc IPrw;
  record PurgeTRVc PurgeTRr;
  record TRVc TRr;
  row TRVc TRrw;
  record CLInVc CLInr;
  row CLInVc CLInrw;
  record CLOutVc CLOutr;
  row CLOutVc CLOutrw;
  Boolean found,ipf,b1bankf;
  Integer rwcnt,i;
  Boolean testf;
  val onaccv,onaccv2,onacccurv,lossv;
  string 20 aracc;
  record BaseCurBlock bcur;  
  vector Boolean viprowprntdf;
  val frrate,torate1,torate2,baserate1,baserate2;
  val pfrrate,ptorate1,ptorate2,pbaserate1,pbaserate2;
  Date agedate;

  agedate = RepSpec.d1;
  if (blankdate(agedate)) then begin
    agedate = CurrentDate;
  end;
  if (HasLocalization("POL")) then begin
    agedate = AddDay(agedate,1);
  end;
  BlockLoad(bcur);
  sump = 0;
  bc2sump = 0;
  rvalp = 0;
  sumbooked = 0;
  sumnow = 0;
  sumcurncy = 0;
  sumdiff = 0;
  IPrsr.IVNr = -1;
  IPrsr.TransType = kIPrsTransTypeReceipt;
  IPrsr.CustCode = cucode;
  found = true;
  while (LoopKey("OnAcc",IPrsr,3,found)) begin
    if (found) then begin
      testf = true;
      if (IPrsr.CustCode!=cucode) then begin found = false; end;
      if (IPrsr.IVNr!=-1) then begin found = false; end;
      if (IPrsr.TransType!=kIPrsTransTypeReceipt) then begin found = false; end;
      if (backdate) then begin
        if (IPrsr.TransDate>RepSpec.d1) then begin testf = false; end;
      end;
      if (found and testf) then begin
        IPr.SerNr = IPrsr.TransNr;
        if (ReadFirstMain(IPr,1,true)) then begin
          if (IPr.RejectedFlag==0) then begin
          rwcnt = MatRowCnt(IPr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IPr,i,IPrw);
            if ((IPrw.InvoiceNr==-1) and (IPrw.CUPNr==-1) and (IPrw.stp==1)) then begin
//              if (IPrw.PayDate==IPrsr.CustDate) then begin
              if (IPr.TransDate==IPrsr.TransDate) and ((IPrsr.TransDate<=RepSpec.d1) or backdate==false) then begin
                if (IPrw.CustCode==cucode) and (viprowprntdf[IPr.SerNr & ":" & i]==false) then begin
                  viprowprntdf[IPr.SerNr & ":" & i] = true;
                  testf = true;
                  if (testf) then begin
                    if (backdate) then begin
                      if (RepSpec.d1<IPrsr.CustDate) then begin
                        testf = false;
                      end;
                    end;
                    if (nonblank(RepSpec.ObjStr)) then begin
                      if (SetInSet(RepSpec.ObjStr,IPrw.Objects)==false) then begin
                        testf = false;
                      end;
                    end;                                        
                    if (nonblank(RepSpec.CurncyCode)) then begin
                      if (RepSpec.CurncyCode!=IPrw.InvCurncy) then begin
                        testf = false;
                      end;
                    end;                                        
                    if (nonblank(RepSpec.ObjType)) then begin
                      testf = ObjectTypeMatch(IPrw.Objects,RepSpec.ObjType);
                    end;                                        
                    aracc = IPrw.ARAcc;
                    if (blank(aracc)) then begin
                      aracc = GetCustomerOnAccountAC(IPrw.CustCode);
                    end;
                    if (nonblank(RepSpec.AccStr)) then begin
                      if (RepSpec.AccStr!=aracc) then begin
                        testf = false;
                      end;
                    end;
                  end;
                  if (testf) then begin
                    if (nonblank(cucrncy)) then begin
                      if (cucrncy!=bcur.BaseCur1) then begin
                        CurValToOtherCur(IPr.TransDate,IPrw.InvCurncy,IPrw.InvVal,cucrncy,t,DefaultCurRoundOff);
                      end else begin
                        if (IPrw.BankCurncy!=bcur.BaseCur1) then begin
                          CurValToOtherCur(IPr.TransDate,IPrw.InvCurncy,IPrw.InvVal,cucrncy,t,DefaultCurRoundOff);
                        end else begin
                          t = IPrw.BankVal;
                        end;
                      end;
                    end else begin
                      if (nonblank(IPrw.InvCurncy)) then begin
                        if (foreigncur==1) then begin
                          AddCurTotalsRow(IPrw.InvCurncy,-IPrw.InvVal,blankval,blankval,CurTotalsr);
                        end else begin
                          AddCurTotalsRow(bcur.BaseCur1,MulWithRateToBase1(IPrw.InvCurncy,IPr.TransDate,-IPrw.InvVal,DefaultCurRoundOff),blankval,blankval,CurTotalsr);
                        end;
                      end;
                      t = IPrw.InvVal;
//                      AddCurncyTotals(acur,av1,curcnt,IPrw.InvCurncy,IPrw.InvVal); // Should we have CurncyTotals in GetOnAccBalance????
                    end;
                    curval = t;
                    rvalp = rvalp - t;
                    if (IPrw.B1BankVal==0) then begin
                      if (IPrw.BankCurncy!=bcur.BaseCur1) then begin
                        t = MulWithRateToBase1(IPrw.InvCurncy,IPr.TransDate,t,DefaultCurRoundOff);
                      end else begin
                        t = IPrw.BankVal;
//                        t = MulWithRateToBase1(IPrw.InvCurncy,IPr.TransDate,t,DefaultCurRoundOff);
//must show same as On Account account
                      end;
                    end else begin
                      t = IPrw.B1BankVal;
                    end;
                    sump = sump - t;
                    if ((RepSpec.flags[18]!=0) and (RepSpec.ArtMode!=4) and (RepSpec.ArtMode!=6)) then begin
                      ARRnAddToDebtorsAccounts(aracc,0,-t,debaccs,debbal,debcnt);
                    end;
                    if (IPrw.B2BankVal==0) then begin
                      if (nonblank(cucrncy)) then begin
                        t = MulWithRateToBase2(cucrncy,IPr.TransDate,curval,DefaultCurRoundOff);
                      end else begin
                        t = MulWithRateToBase2(IPrw.InvCurncy,IPr.TransDate,IPrw.InvVal,DefaultCurRoundOff);
                      end;
                    end else begin
                      t = IPrw.B2BankVal;
                    end;
                    bc2sump = bc2sump - t;
                    if (RepSpec.ArtMode==4) or (RepSpec.ArtMode==6) then begin
                      sumcurncy = sumcurncy + IPrw.InvVal;
                      if (backdate) then begin
                        if (IPrw.InvCurncy<>IPrw.BankCurncy) then begin                      
                          t = MulWithRateToBase1(IPrw.BankCurncy,RepSpec.d1,IPrw.BankVal,DefaultCurRoundOff);
                        end else begin
                          t = MulWithRateToBase1(IPrw.InvCurncy,RepSpec.d1,IPrw.InvVal,DefaultCurRoundOff);
                        end;  
                      end else begin
                        if (IPrw.InvCurncy<>IPrw.BankCurncy) then begin                      
                          t = MulWithRateToBase1(IPrw.BankCurncy,IPr.TransDate,IPrw.BankVal,DefaultCurRoundOff);
                        end else begin
                          t = MulWithRateToBase1(IPrw.InvCurncy,IPr.TransDate,IPrw.InvVal,DefaultCurRoundOff);
                        end;  
                      end;
                      sumbooked = sumbooked + t;
                      t2 = MulWithRateToBase1(IPrw.InvCurncy,agedate,IPrw.InvVal,DefaultCurRoundOff);
                      sumnow = sumnow + t2;
                      t2 = t2 - t;
                      sumdiff = sumdiff + t2;
                    end;                    
                  end;
                end;
              end;
            end;
          end;
          end;
        end;
      end;
    end;
LSkipOnAcc:;    
  end;
  
  IPrsr.IVNr = -1;
  IPrsr.TransType = kIPrsTransTypeNLTransaction;
  IPrsr.CustCode = cucode;
  found = true;
  ResetLoop(IPrsr);
  while (LoopKey("OnAcc",IPrsr,3,found)) begin
    if (found) then begin
      if (IPrsr.CustCode<>cucode) then begin found = false; end;
      if (IPrsr.IVNr<>-1) then begin found = false; end;      
      if (IPrsr.TransType!=kIPrsTransTypeNLTransaction) then begin found = false; end;
      if (found) then begin      
        testf = true;
        TRr.Number = IPrsr.TransNr;
        TRr.IntYc = GetIntYc(IPrsr.TransDate);                
        if (ReadFirstMain(TRr,2,true)) then begin
          if (backdate) then begin
            if (RepSpec.d1<TRr.TransDate) then begin
              testf = false;
            end;
          end;          
          if (TRr.TransDate!=IPrsr.TransDate) then begin
            testf = false;
          end;
          if (testf) then begin          
            rwcnt = MatRowCnt(TRr);
            for (i=0; i<rwcnt; i=i+1) begin
              MatRowGet(TRr,i,TRrw);
              if (TRrw.ovst==0) then begin
                if (TRrw.stp==1) then begin
                  if (TRrw.SerNr==-1) then begin
                    if (TRrw.CompCode==cucode) and (TRrw.Typ==1) then begin 
                      if (nonblank(TRrw.CredVal)) then begin
                        onaccv = TRrw.CredVal;
                        onaccv2 = TRrw.CredVal2;
                        onacccurv = TRrw.CurCredVal;
                      end else begin
                        onaccv = -TRrw.DebVal;
                        onaccv2 = -TRrw.DebVal2;
                        onacccurv = -TRrw.CurDebVal;
                      end;        
                      if (nonblank(onacccurv)) or ((RepSpec.ArtMode!=4) and (RepSpec.ArtMode!=6)) then begin
                        if (nonblank(cucrncy)) then begin
                          if (onacccurv!=blankval) then begin                   
                            CurValToOtherCur(TRr.TransDate,TRrw.Curncy,onacccurv,cucrncy,t,DefaultCurRoundOff);
                          end else begin
                            CurValToOtherCur(TRr.TransDate,TRrw.Curncy,onaccv,cucrncy,t,DefaultCurRoundOff);
                          end;  
                        end else begin            
                          if (nonblank(TRrw.Curncy)) then begin                  
                            if (onacccurv!=blankval) then begin 
                              AddCurTotalsRow(TRrw.Curncy,-onacccurv,blankval,blankval,CurTotalsr);
  //                          AddCurncyTotals(acur,av1,curcnt,TRrw.Curncy,onacccurv);
                            end else begin
                              AddCurTotalsRow(TRrw.Curncy,-onaccv,blankval,blankval,CurTotalsr);
  //                          AddCurncyTotals(acur,av1,curcnt,TRrw.Curncy,onaccv);
                            end;
                          end;
                        end;    
                        sump = sump - onaccv;
                        bc2sump = bc2sump - onaccv2;
                        if (nonblank(onacccurv)) then begin
                          rvalp = rvalp - onacccurv;
                        end else begin
                          rvalp = rvalp - onaccv;
                        end;
                        if (RepSpec.ArtMode==4) or (RepSpec.ArtMode==6) begin
                          sumcurncy = sumcurncy + onacccurv;
                          if (backdate) then begin
                            if (onacccurv!=blankval) then begin                   
                              t = MulWithRateToBase1(TRrw.Curncy,RepSpec.d1,onacccurv,DefaultCurRoundOff);
                            end else begin
                              t = onaccv;
                            end;
                          end else begin
                            t = onaccv;
                          end;
                          sumbooked = sumbooked + t;
                          t2 = MulWithRateToBase1(TRrw.Curncy,agedate,onacccurv,DefaultCurRoundOff);
                          sumnow = sumnow + t2;
                          t2 = t2 - t;
                          sumdiff = sumdiff + t2;                        
                        end;
                      end;
                    end;
                  end;                
                end;
              end;
            end;                
          end;
        end;
      end;          
    end;
  end;

  IPrsr.IVNr = -1;
  IPrsr.TransType = kIPrsTransTypePurgeNLTransaction;
  IPrsr.CustCode = cucode;
  found = true;
  ResetLoop(IPrsr);
  while (LoopKey("OnAcc",IPrsr,3,found)) begin
    if (found) then begin
      if (IPrsr.CustCode<>cucode) then begin found = false; end;
      if (IPrsr.IVNr<>-1) then begin found = false; end;      
      if (IPrsr.TransType!=kIPrsTransTypePurgeNLTransaction) then begin found = false; end;
      if (found) then begin      
        testf = true;
        PurgeTRr.Number = IPrsr.TransNr;
        PurgeTRr.IntYc = GetIntYc(IPrsr.TransDate);                
        PurgeTRr.TransRow = IPrsr.TransRow;
        if (ReadFirstMain(PurgeTRr,3,true)) then begin
          if (backdate) then begin
            if (RepSpec.d1<PurgeTRr.TransDate) then begin
              testf = false;
            end;
          end;          
          if (PurgeTRr.TransDate!=IPrsr.TransDate) then begin
            testf = false;
          end;
          if (testf) then begin          

            if (PurgeTRr.SerNr==-1) then begin
              if (PurgeTRr.CompCode==cucode) and (PurgeTRr.Typ==1) then begin 
                if (nonblank(PurgeTRr.CredVal)) then begin
                  onaccv = PurgeTRr.CredVal;
                  onaccv2 = PurgeTRr.CredVal2;
                  onacccurv = PurgeTRr.CurCredVal;
                end else begin
                  onaccv = -PurgeTRr.DebVal;
                  onaccv2 = -PurgeTRr.DebVal2;
                  onacccurv = -PurgeTRr.CurDebVal;
                end;        
                if (nonblank(cucrncy)) then begin
                  if (onacccurv!=blankval) then begin                   
                    CurValToOtherCur(PurgeTRr.TransDate,PurgeTRr.Curncy,onacccurv,cucrncy,t,DefaultCurRoundOff);
                  end else begin
                    CurValToOtherCur(PurgeTRr.TransDate,PurgeTRr.Curncy,onaccv,cucrncy,t,DefaultCurRoundOff);
                  end;  
                end else begin            
                  if (nonblank(PurgeTRr.Curncy)) then begin                  
                    if (onacccurv!=blankval) then begin 
                      AddCurTotalsRow(PurgeTRr.Curncy,-onacccurv,blankval,blankval,CurTotalsr);
//                          AddCurncyTotals(acur,av1,curcnt,PurgeTRr.Curncy,onacccurv);
                    end else begin
                      AddCurTotalsRow(PurgeTRr.Curncy,-onaccv,blankval,blankval,CurTotalsr);
//                          AddCurncyTotals(acur,av1,curcnt,PurgeTRr.Curncy,onaccv);
                    end;
                  end;
                end;    
                sump = sump - onaccv;
                bc2sump = bc2sump - onaccv2;
                if (nonblank(onacccurv)) then begin
                  rvalp = rvalp - onacccurv;
                end else begin
                  rvalp = rvalp - onaccv;
                end;
                if (RepSpec.ArtMode==4) or (RepSpec.ArtMode==6) begin
                  sumcurncy = sumcurncy + onacccurv;
                  if (backdate) then begin
                    if (onacccurv!=blankval) then begin                   
                      t = MulWithRateToBase1(PurgeTRr.Curncy,RepSpec.d1,onacccurv,DefaultCurRoundOff);
                    end else begin
                      t = onaccv;
                    end;
                  end else begin
                    t = onaccv;
                  end;
                  sumbooked = sumbooked + t;
                  t2 = MulWithRateToBase1(PurgeTRr.Curncy,agedate,onacccurv,DefaultCurRoundOff);
                  sumnow = sumnow + t2;
                  t2 = t2 - t;
                  sumdiff = sumdiff + t2;                        
                end;
              end;
            end;                
          end;
        end;
      end;          
    end;
  end;
  ARPayHistr.CustCode = cucode;
  found = false;
  if (RepSpec.flags[29]==0) then begin
    found = true;
  end;
  while (LoopKey("CustCode",ARPayHistr,1,found)) begin
    if (found) then begin
      if (ARPayHistr.CustCode<>cucode) then begin found = false; end;
      if (found) then begin
        if (ARPayHistr.FileName=="IVVc") then begin
          testf = true;
          if (backdate) then begin
            if (RepSpec.d1<ARPayHistr.TransDate) then begin
              testf = false;
            end;
          end;
          if (PrepaymentObjectMatch(ARPayHistr.CUPNr,RepSpec.ObjStr,RepSpec.ObjType)==false) then begin
            testf = false;
          end;
          if (nonblank(RepSpec.CurncyCode)) then begin
            if (RepSpec.CurncyCode!=ARPayHistr.CurncyCode) then begin
              testf = false;
            end;
          end;                                        
          aracc = ARPayHistr.ARAcc;
          if (blank(aracc)) then begin
            aracc = GetCustomerOnAccountAC(ARPayHistr.CustCode);
          end;
          if (nonblank(RepSpec.AccStr)) then begin
            if (RepSpec.AccStr!=aracc) then begin
              testf = false;
            end;
          end;
          if (testf) then begin
            if (RepSpec.ArtMode==4) or (RepSpec.ArtMode==6) begin
              t = ARPayHistr.BookVal;
              t2 = MulWithRateToBase1(ARPayHistr.CurncyCode,agedate,ARPayHistr.Val,DefaultCurRoundOff);
              sumcurncy = sumcurncy - ARPayHistr.Val;
              sumbooked = sumbooked - ARPayHistr.BookVal;
              sumnow = sumnow - t2;
              t2 = t2 - t;
              sumdiff = sumdiff - t2;
            end else begin
              if (nonblank(cucrncy)) then begin
                CurValToOtherCur(ARPayHistr.TransDate,ARPayHistr.CurncyCode,ARPayHistr.Val,cucrncy,t,DefaultCurRoundOff);
              end else begin
                if (nonblank(ARPayHistr.CurncyCode)) then begin
                  AddCurTotalsRow(ARPayHistr.CurncyCode,ARPayHistr.Val,blankval,blankval,CurTotalsr);
                end;
                t = ARPayHistr.Val;
  //              AddCurncyTotals(acur,av1,curcnt,ARPayHistr.CurncyCode,ARPayHistr.Val);
              end;          
              rvalp = rvalp + t;
  // Why? It should take whatever was booked, or?
              sump = sump + ARPayHistr.BookVal;
  //            sump = sump + MulWithRateToBase1(ARPayHistr.CurncyCode,ARPayHistr.TransDate,ARPayHistr.Val,DefaultCurRoundOff);
              GetARPayRate(-1,ARPayHistr.CUPNr,frrate,torate1,torate2,baserate1,baserate2,ARPayHistr.CurncyCode,ARPayHistr.TransDate);          
//              t = MulRateToBase1(ARPayHistr.CurncyCode,ARPayHistr.Val,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
              t = ARPayHistr.BookVal;
//we dont need loss here, we should show what is left after doing PasteARPayInIV              
  /*
  StartFormat(15);
   OutString(0,0,"3.jarek",false);
   OutString(100,0,sump,false);
   OutString(200,0,rvalp,false);
   OutString(300,0,IPr.SerNr,false);
  EndFormat;
  */
              lossv = ARPayHistr.BookVal - t;
              sump = sump - lossv;
  //            if (t==0) or (t==ARPayHistr.BookVal) then begin
              if (t==0) or (t==ARPayHistr.BookVal) then begin
  //              Base1ToBase2(ARPayHistr.BookVal,ARPayHistr.TransDate,t);
                t = MulRateToBase2(ARPayHistr.CurncyCode,ARPayHistr.Val,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
  //lossv?               
              end;
              bc2sump = bc2sump + t;            
              if ((RepSpec.flags[18]!=0) and (RepSpec.ArtMode!=4) and (RepSpec.ArtMode!=6)) then begin
                ARRnAddToDebtorsAccounts(aracc,0,ARPayHistr.BookVal,debaccs,debbal,debcnt);
              end;
            end;
          end;  
        end;
        if (ARPayHistr.FileName=="IPVc") then begin
          testf = true;
          if (backdate) then begin
            if (RepSpec.d1<ARPayHistr.TransDate) then begin
              testf = false;
            end;
          end;
          IPr.SerNr = ARPayHistr.SerNr;
          ipf = ReadFirstMain(IPr,1,true);
          if ((nonblank(RepSpec.ObjStr)) or (nonblank(RepSpec.ObjType))) then begin
            IPr.SerNr = ARPayHistr.SerNr;
            if (ipf) then begin
              rwcnt = MatRowCnt(IPr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(IPr,i,IPrw);
                if (IPrw.CUPNr==ARPayHistr.CUPNr) then begin
                  if (nonblank(RepSpec.ObjType)) then begin
                    testf = ObjectTypeMatch(IPrw.Objects,RepSpec.ObjType);
                  end;                                                        
                  if (SetInSet(RepSpec.ObjStr,IPrw.Objects)==false) then begin
                    testf = false;
                  end;
                  i = rwcnt;
                end;
              end;
            end;
          end;
          aracc = ARPayHistr.ARAcc;
          if (blank(aracc)) then begin
            aracc = GetCustomerOnAccountAC(ARPayHistr.CustCode);
          end;
          if (nonblank(RepSpec.AccStr)) then begin
            if (RepSpec.AccStr!=aracc) then begin
              testf = false;
            end;
          end;
          if (nonblank(RepSpec.CurncyCode)) then begin
            if (RepSpec.CurncyCode!=ARPayHistr.CurncyCode) then begin
              testf = false;
            end;
          end;                                        
          if (testf) then begin
            if (RepSpec.ArtMode==4) or (RepSpec.ArtMode==6) begin
              t = ARPayHistr.BookVal;
              t2 = MulWithRateToBase1(ARPayHistr.CurncyCode,agedate,ARPayHistr.Val,DefaultCurRoundOff);
              sumcurncy = sumcurncy + ARPayHistr.Val;
              sumbooked = sumbooked + ARPayHistr.BookVal;
              sumnow = sumnow + t2;
              t2 = t2 - t;
              sumdiff = sumdiff + t2;
            end else begin                                                   
              if (nonblank(cucrncy)) then begin
                CurValToOtherCur(ARPayHistr.TransDate,ARPayHistr.CurncyCode,-ARPayHistr.Val,cucrncy,t,DefaultCurRoundOff);
                if (RepSpec.ArtMode==3) then begin// Saldo          
                  AddCurTotalsRow(ARPayHistr.CurncyCode,t,blankval,blankval,CurTotalsr);
                end;
              end else begin
                t = -ARPayHistr.Val;
                if (nonblank(ARPayHistr.CurncyCode)) then begin
                  if (foreigncur==1) then begin
                    AddCurTotalsRow(ARPayHistr.CurncyCode,t,blankval,blankval,CurTotalsr);
                  end else begin
                    AddCurTotalsRow(bcur.BaseCur1,-ARPayHistr.BookVal,blankval,blankval,CurTotalsr);
                  end;
                end else begin
                  AddCurTotalsRow(bcur.BaseCur1,-ARPayHistr.BookVal,blankval,blankval,CurTotalsr);
                end;
              end;

  /*            
  ARPayHistr.BookVal should contain Bank amount or On Account A/C amount
              if (ARPayHistr.Val<0) then begin
                if (nonblank(ARPayHistr.CurncyCode)) then begin
                  firstARPayHistr.CUPNr = ARPayHistr.CUPNr;
                  if (ReadFirstMain(firstARPayHistr,1,true)) then begin
                    ARPayHistr.BookVal = (firstARPayHistr.BookVal*ARPayHistr.Val)/firstARPayHistr.Val;
                  end;
                end;
              end;
  */            
              RecordClear(IVr);
              rvalp = rvalp + t;
  //            sump = sump - ARPayHistr.BookVal;//**
  //same as Prepayment Account 
              b1bankf = false;
              if (ipf) then begin
                rwcnt = MatRowCnt(IPr);
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(IPr,i,IPrw);
                  if (IPrw.CUPNr==ARPayHistr.CUPNr) then begin
                    if (nonblank(IPrw.B1BankVal)) then begin
                      t = IPrw.B1BankVal;
                      i = rwcnt;
                      b1bankf = true;
                    end;
                  end;
                end;
              end;
              if (b1bankf==false) then begin
                if (GetARPayRate(-1,ARPayHistr.CUPNr,frrate,torate1,torate2,baserate1,baserate2,ARPayHistr.CurncyCode,ARPayHistr.TransDate)) then begin
                  t = MulRateToBase1(ARPayHistr.CurncyCode,ARPayHistr.Val,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
                end else begin            
                  t = MulWithRateToBase1(ARPayHistr.CurncyCode,ARPayHistr.TransDate,ARPayHistr.Val,DefaultCurRoundOff);
                end;
              end;

              sump = sump - t;          
              lossv = blankval;
  /*
  ARPayHistr.BookVal is not same as On AccAcc posting in NL now so we need calculation for losses findings
  */
              if (ARPayHistr.CurncyCode==bcur.BaseCur1) then begin
              end else begin
                if (ipf) then begin
                  rwcnt = MatRowCnt(IPr);
                  for (i=0;i<rwcnt;i=i+1) begin
                    MatRowGet(IPr,i,IPrw);
                    if (IPrw.CUPNr==ARPayHistr.CUPNr) then begin
                      if (nonblank(IPrw.B1BankVal)) then begin
                        sump = sump + t;
                        sump = sump - IPrw.B1BankVal;
                      end;
                      if (GetARPayRate(IPr.SerNr,IPrw.CUPNr,pfrrate,ptorate1,ptorate2,pbaserate1,pbaserate2,IPrw.InvCurncy,IPr.TransDate)) then begin
                        lossv = MulRateToBase1(IPrw.BankCurncy,IPrw.BankVal,pfrrate,ptorate1,ptorate2,pbaserate1,pbaserate2,DefaultCurRoundOff);
                      end else begin
                        lossv = MulRateToBase1(IPrw.InvCurncy,IPrw.InvVal,pfrrate,ptorate1,ptorate2,pbaserate1,pbaserate2,DefaultCurRoundOff);
                      end;                    
                      lossv = lossv - t;
                      sump = sump - lossv;
  /*
  changing code to be same as in MakeTransFromIP
                      FindAllPrepayLosses(IPrw.InvCurncy,IPr.TransDate,IPrw.InvVal,IPrw.CUPNr,IPrw.InvVal,lossv,IVr,IPrw.InvoiceNr,-1,bcur,IPrw.B1BankVal,IPrw.BankCurncy);
                      if (lossv!=t) then begin
                        sump = sump + lossv;
                      end;
  */                    
  //                  i = rwcnt; // people put more than 1 row with same CUPNr
                    end;
                  end;
                end;
              end;
/*              
StartFormat(15);
 OutString(0,0,"2.jarek",false);
 OutString(100,0,sump,false);
 OutString(200,0,rvalp,false);
 OutString(300,0,IPr.SerNr,false);
EndFormat;
*/
  //            GetARPayRate(-1,ARPayHistr.CUPNr,frrate,torate1,torate2,baserate1,baserate2,ARPayHistr.CurncyCode,ARPayHistr.TransDate);
              t = MulRateToBase2(ARPayHistr.CurncyCode,ARPayHistr.Val,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
              if (t==0) or (t==ARPayHistr.BookVal) then begin
                Base1ToBase2(ARPayHistr.BookVal,ARPayHistr.TransDate,t);
              end;
              bc2sump = bc2sump - t;
              if ((RepSpec.flags[18]!=0) and (RepSpec.ArtMode!=4) and (RepSpec.ArtMode!=6)) then begin
                ARRnAddToDebtorsAccounts(aracc,0,-ARPayHistr.BookVal,debaccs,debbal,debcnt);
              end;
            end;
          end;  
        end;
        if (ARPayHistr.FileName=="CLInVc") then begin
          testf = true;
          if (backdate) then begin
            if (RepSpec.d1<ARPayHistr.TransDate) then begin
              testf = false;
            end;
          end;
          if ((nonblank(RepSpec.ObjStr)) or (nonblank(RepSpec.ObjType))) then begin
            CLInr.SerNr = ARPayHistr.SerNr;
            if (ReadFirstMain(CLInr,1,true)) then begin
              rwcnt = MatRowCnt(CLInr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(CLInr,i,CLInrw);
                if (CLInrw.Type==4) then begin
                  if (CLInrw.TransNr==ARPayHistr.CUPNr) then begin
                    if (nonblank(RepSpec.ObjType)) then begin
                      testf = ObjectTypeMatch(CLInrw.Objects,RepSpec.ObjType);
                    end;                                                        
                    if (SetInSet(RepSpec.ObjStr,CLInrw.Objects)==false) then begin
                      testf = false;
                    end;
                    i = rwcnt;
                  end;
                end;
              end;
            end;
          end;
          if (nonblank(RepSpec.CurncyCode)) then begin
            if (RepSpec.CurncyCode!=ARPayHistr.CurncyCode) then begin
              testf = false;
            end;
          end;                                        
          aracc = ARPayHistr.ARAcc;
          if (blank(aracc)) then begin
            aracc = GetCustomerOnAccountAC(ARPayHistr.CustCode);
          end;
          if (nonblank(RepSpec.AccStr)) then begin
            if (RepSpec.AccStr!=aracc) then begin
              testf = false;
            end;
          end;
          if (testf) then begin
            if (nonblank(cucrncy)) then begin
              CurValToOtherCur(ARPayHistr.TransDate,ARPayHistr.CurncyCode,-ARPayHistr.Val,cucrncy,t,DefaultCurRoundOff);
            end else begin
              t = -ARPayHistr.Val;
              if (nonblank(ARPayHistr.CurncyCode)) then begin
                AddCurTotalsRow(ARPayHistr.CurncyCode,t,blankval,blankval,CurTotalsr);
              end;
//              AddCurncyTotals(acur,av1,curcnt,ARPayHistr.CurncyCode,-ARPayHistr.Val);            
            end;
            rvalp = rvalp + t;
            sump = sump - ARPayHistr.BookVal;
            Base1ToBase2(ARPayHistr.BookVal,ARPayHistr.TransDate,t);
            bc2sump = bc2sump - t;
            if ((RepSpec.flags[18]!=0) and (RepSpec.ArtMode!=4) and (RepSpec.ArtMode!=6)) then begin
              ARRnAddToDebtorsAccounts(aracc,0,-ARPayHistr.BookVal,debaccs,debbal,debcnt);
            end;
          end;          
        end;        
        if (ARPayHistr.FileName=="CLOutVc") then begin
          testf = true;
          if (backdate) then begin
            if (RepSpec.d1<ARPayHistr.TransDate) then begin
              testf = false;
            end;
          end;
          if ((nonblank(RepSpec.ObjStr)) or (nonblank(RepSpec.ObjType))) then begin
            CLOutr.SerNr = ARPayHistr.SerNr;
            if (ReadFirstMain(CLOutr,1,true)) then begin
              rwcnt = MatRowCnt(CLOutr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(CLOutr,i,CLOutrw);
                if (CLOutrw.Type==5) then begin
                  if (CLOutrw.TransNr==ARPayHistr.CUPNr) then begin
                    if (nonblank(RepSpec.ObjType)) then begin
                      testf = ObjectTypeMatch(CLOutrw.Objects,RepSpec.ObjType);
                    end;                                                        
                    if (SetInSet(RepSpec.ObjStr,CLOutrw.Objects)==false) then begin
                      testf = false;
                    end;
                    i = rwcnt;
                  end;
                end;
              end;
            end;
          end;
          aracc = ARPayHistr.ARAcc;
          if (blank(aracc)) then begin
            aracc = GetCustomerOnAccountAC(ARPayHistr.CustCode);
          end;
          if (nonblank(RepSpec.AccStr)) then begin
            if (RepSpec.AccStr!=aracc) then begin
              testf = false;
            end;
          end;
          if (nonblank(RepSpec.CurncyCode)) then begin
            if (RepSpec.CurncyCode!=ARPayHistr.CurncyCode) then begin
              testf = false;
            end;
          end;                                        
          if (testf) then begin
            if (nonblank(cucrncy)) then begin
              CurValToOtherCur(ARPayHistr.TransDate,ARPayHistr.CurncyCode,-ARPayHistr.Val,cucrncy,t,DefaultCurRoundOff);
            end else begin
              t = -ARPayHistr.Val;
              if (nonblank(ARPayHistr.CurncyCode)) then begin
                AddCurTotalsRow(ARPayHistr.CurncyCode,t,blankval,blankval,CurTotalsr);
              end;
//              AddCurncyTotals(acur,av1,curcnt,ARPayHistr.CurncyCode,-ARPayHistr.Val);            
            end;
            rvalp = rvalp - t;
            sump = sump + ARPayHistr.BookVal;
            Base1ToBase2(ARPayHistr.BookVal,ARPayHistr.TransDate,t);
            bc2sump = bc2sump + t;
            if ((RepSpec.flags[18]!=0) and (RepSpec.ArtMode!=4) and (RepSpec.ArtMode!=6)) then begin
              ARRnAddToDebtorsAccounts(aracc,0,ARPayHistr.BookVal,debaccs,debbal,debcnt);
            end;
          end;          
        end;                
      end;
    end;
  end;
  if (rvalp==0) then begin sump = 0; end;
  return;
end;

global
procedure PSFindPaydAmount2(record IVVc IVp,record IPrsVc IPrsp,Boolean inclwrof,var val ap,var val apb1,var Date dp)
BEGIN
  record IPVc IPr;
  row IPVc IPrw;
  Integer i,rwcnt;
  record BaseCurBlock BCb;  
  val tinivcurrate,rategain,totrategain,t,t3;
  
//should be same as in ARWithLogg
  
  BlockLoad(BCb);  
  ap = 0;
  apb1 = 0;
  IPr.SerNr = IPrsp.TransNr;
  if (ReadFirstMain(IPr,1,true)) then begin
    if (IPr.RejectedFlag==0) then begin
      rwcnt = MatRowCnt(IPr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IPr,i,IPrw);
        if ((IPrw.ovst==0)) then begin
          if (IPrw.InvoiceNr==IPrsp.IVNr) then begin
            if (IPrw.stp==1) then begin
              rategain = blankval;
              if (IPrw.PayDate==IPrsp.CustDate) then begin
                ap = ap + IPrw.InvVal;
//                apb1 = apb1 + MulWithRateToBase1(IPrw.InvCurncy,IPr.TransDate,IPrw.InvVal,DefaultCurRoundOff);
                
                if (IPrw.BankCurncy==BCb.BaseCur1) then begin
                  tinivcurrate = MulRateToBase1(IPrw.InvCurncy,IPrw.InvVal,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
                  rategain = tinivcurrate - IPrw.BankVal;
                  t = t + IPrw.BankVal;
                  totrategain = totrategain + rategain;
                end else begin
                  tinivcurrate = MulRateToBase1(IPrw.InvCurncy,IPrw.InvVal,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
                  t3 = MulWithRateToBase1(IPrw.InvCurncy,IPrw.PayDate,IPrw.InvVal,DefaultCurRoundOff);   
                  t = t + t3;
                  rategain = tinivcurrate - t3;
                  totrategain = totrategain + rategain;
                end;
                                            
              end;    
              dp = IPrw.PayDate;
            end;   
            switch (IPrw.stp) begin
              case 5:
                ap = IPrw.InvVal + ap;
                t = t + MulWithRateToBase1(IPrw.InvCurncy,IPr.TransDate,IPrw.InvVal,DefaultCurRoundOff);
//                apb1 = apb1 + MulWithRateToBase1(IPrw.InvCurncy,IPr.TransDate,IPrw.InvVal,DefaultCurRoundOff);
                dp = IPrw.PayDate;
              case 6:
                if (inclwrof) then begin
                  ap = IPrw.InvVal + ap;
                  t = t + MulWithRateToBase1(IPrw.InvCurncy,IPr.TransDate,IPrw.InvVal,DefaultCurRoundOff);
//                  apb1 = apb1 + MulWithRateToBase1(IPrw.InvCurncy,IPr.TransDate,IPrw.InvVal,DefaultCurRoundOff);
                  dp = IPrw.PayDate;
                end;
            end;
          end;
        end;
      end;
      apb1 = apb1 + t + totrategain;
    end;
  end;
  RETURN;
END;
