external procedure GetBaseCurncy(Integer,var string);
external function Boolean PasteRentResItemAndSerial(record RentResVc,var string,string,Boolean);
external procedure GetCurUser(var record UserVc);
external function Boolean IntSerialNrAvail(string,string,string,val);
external function LongInt DateDiff(Date,Date);
external procedure SetupDayMatrix(var Array LongInt,var Array LongInt,Date,LongInt,string,string,Time,Time,var LongInt,var LongInt);
external function Boolean CheckDblRentRes(record RentResVc);
external function Boolean FindClosestRent(record RentResVc,var record RentResVc,Integer,Boolean);
external procedure HT2Per(Date, Date,var string);


Function Date RentINShouldReturn(record RentResVc RentResr,string item,string serialno)
begin
  Date res;
  record RentResVc closeRentResr;
  
  if (FindClosestRent(RentResr,closeRentResr,30,true)) then begin // Setting
    res = closeRentResr.EndDate;
  end;
  RentINShouldReturn = res;
end;

Function Date RentINWillBeNeeded(record RentResVc RentResr,string item,string serialno)
begin
  Date res;
  record RentResVc closeRentResr;
  
  if (FindClosestRent(RentResr,closeRentResr,30,false)) then begin // Setting
    res = closeRentResr.TransDate;
  end;
  RentINWillBeNeeded = res;
end;

global
procedure AvailList(record RentINVc RentINr,var record RentResVc RentResr,var LongInt quant,Date selectstartdate,
                    Time startofday,Time endofday,LongInt maxdays,var string lastitem,
                    var Boolean headerf,var Boolean header2f,integer dblclick,string thelocation,string custcode,
                    Integer inclnotavailf)
begin
  val maxv,minv,t;
  Array LongInt ra;
  Array LongInt ra2;
  LongInt i;
  string 200 inwarning;
  Boolean testf,availf;
  LongInt readrecs,usedrecs;

  readrecs = 0;
  usedrecs = 0;
      if ((blank(RentINr.SerialNr)) and (headerf==false)) then begin
        StartFormat(15);
        OutString(0,0,USetStr(11641),false);
        OutString(5,0,USetStr(11645),false);
        OutString(6,0,USetStr(11646),false);
        OutString(7,0,USetStr(11647),true);
        OutString(8,0,USetStr(11650),true);
        OutString(1,0,USetStr(11651),true);
        EndFormat;
        Black_Divider(0,1);
        headerf = true;
      end;
      if ((nonblank(RentINr.SerialNr)) and (header2f==false)) then begin
        if (headerf) then begin
          Black_Divider(0,1);
          StartFormat(15);
          OutString(0,0,USetStr(11649) & ": " & quant,false);
          EndFormat;
          StartFormat(15);
          EndFormat;
          StartFormat(15);
          EndFormat;
          quant = 0;
        end;
        StartFormat(15);
        OutString(0,0,USetStr(11641),false);
        OutString(5,0,USetStr(11644),false);
//        OutString(2,0,USetStr(11645),false);
        OutString(6,0,USetStr(11648),false);
        OutString(7,0,USetStr(11647),true);
        OutString(8,0,USetStr(11642),true);
        OutString(1,0,USetStr(11643),true);
        EndFormat;
        Black_Divider(0,1);
        header2f = true;
      end;
      RentResr.SerNr = -9999;
      RentResr.Code = RentINr.Code;
      RentResr.SerialNr = RentINr.SerialNr;
      if (PasteRentResItemAndSerial(RentResr,inwarning,custcode,false)) then begin end;
      if (nonblank(RentINr.SerialNr)) then begin
        if (CheckDblRentRes(RentResr)==false) then begin
          testf = true;
          if (RentINr.OrgLocation!=thelocation) then begin testf = false; end;
          availf = IntSerialNrAvail(RentINr.Code,RentINr.SerialNr,thelocation,1);
          if (inclnotavailf==0) then begin
            if (availf==false) then begin
              testf = false;
            end;
          end;
          if (testf) then begin
            if (lastitem<>RentINr.Code) then begin
              StartFormat(15);
              OutString(0,0,RentINr.Code,false);
              OutString(2,0,RentINr.Name,false);
              OutString(3,0,RentINr.Group,false);
              EndFormat;
              Gray_Divider(0,1);
            end;
            StartFormat(15);
            if (availf) then begin
              OutString(9,0,"",false);
            end else begin
              OutString(9,0,"*",false);
            end;
            if (dblclick == 1) then begin
              OutStringID(5,"DblNewReservation",RentINr.SerialNr,false,RentINr.Code);
            end else begin
              OutString(5,0,RentINr.SerialNr,false);
            end;
            OutString(6,0,RentINr.OrgLocation,false);
            OutVal(7,0,RentResr.Price,M4Val,true);
            if (RentINr.RentINStatus==0) then begin
              OutDate(8,0,RentINShouldReturn(RentResr,RentINr.Code,RentINr.SerialNr),true);
              OutDate(1,0,RentINWillBeNeeded(RentResr,RentINr.Code,RentINr.SerialNr),true);
            end else begin
              if (RentINr.RentINStatus==1) then begin
                OutString(1,0,"In Service",true);
              end;
              if (RentINr.RentINStatus==2) then begin
                OutString(1,0,"Inactive",true);
              end;
            end;
            EndFormat;
            quant = quant + 1;
            lastitem = RentINr.Code;
          end;
        end;
      end else begin
        if (lastitem<>RentINr.Code) then begin
          SetupDayMatrix(ra,ra2,selectstartdate,maxdays,RentINr.Code,thelocation,startofday,endofday,readrecs,usedrecs); // Location selection possible
          maxv = 0;
          minv = 0;
          if (maxdays>0) then begin
            minv = 99999999999;
          end;
          for (i=0;i<maxdays;i=i+1) begin
            t = ra[i];
            if (t>maxv) then begin
              maxv = t;
            end;
            if (t<minv) then begin
              minv = t;
            end;
          end;
          StartFormat(15);
          if (dblclick == 1) then begin
            OutString(0,"DblNewItemRes",RentINr.Code,false);
          end else begin
            OutString(0,0,RentINr.Code,false);        
          end;
          OutString(5,0,RentINr.Name,false);
          OutString(6,0,RentINr.Group,false);
          OutVal(7,0,RentResr.Price,M4Val,true);
          OutVal(8,0,maxv,M4UVal,true);
          OutVal(1,0,minv,M4UVal,true);
          EndFormat;
          quant = quant + minv;
        end;
        lastitem = RentINr.Code;        
      end;
  return;
end;

global
procedure RentResAvailRn(record RcVc RepSpec)
begin
  record AgreementVc Agreer;
  record RentResVc RentResr;
  record RentResVc RentRes2r;
  row RentResVc RentResrw;
  record RentControlBlock Rentr;
  record RentINVc RentINr;
  string 20 frin,toin;
  string 20 frgr,togr;
  Integer rw;
  string 255 tstr;
  Boolean foundf,testf;
  string 40 lastitem;
  LongInt quant;
  Time startofday,endofday;
  LongInt maxdays;
  Boolean headerf,header2f;
  string 20 thelocation;
  record MainStockBlock MainStockRec;
  string 20 thecur;
  Integer rwcnt,i;
  Boolean checkrows;

  rw = 1;
  quant = 0;
  BlockLoad(Rentr);
  endofday = Rentr.NormalIn;
//  if (nonblanktime(Rentr.EndOfDay)) then begin
//    endofday = Rentr.EndOfDay;
//  end;
  startofday = Rentr.NormalOut;
//  if (nonblanktime(Rentr.StartNewDay)) then begin
//    startofday = Rentr.StartNewDay;
//  end;
  frin = FirstInRange(RepSpec.f2,20);
  toin = LastInRange(RepSpec.f2,20);
  frgr = FirstInRange(RepSpec.f3,5);
  togr = LastInRange(RepSpec.f3,5);
  RentRes2r.SerNr = RepSpec.long2;
  if (ReadFirstMain(RentRes2r,1,true)) then begin
    RecordCopy(RentResr,RentRes2r);
    checkrows = true;
  end else begin
    RecordNew(RentResr);
    RentResr.AgreementNr = RepSpec.long1;
    RentResr.TransDate = RepSpec.sStartDate;
    RentResr.EndDate = RepSpec.sEndDate;
    checkrows = false;
  end;
  maxdays = DateDiff(RepSpec.sEndDate,RepSpec.sStartDate);
  Agreer.SerNr = RentResr.AgreementNr;
  GetBaseCurncy(1,thecur);
  if (ReadFirstMain(Agreer,1,true)) then begin
    if (nonblank(Agreer.CurncyCode)) then begin
      thecur = Agreer.CurncyCode;
    end;
  end;
  thelocation = "";
  if (nonblank(RepSpec.f4)) then begin
    thelocation = RepSpec.f4;
  end;
  if (blank(thelocation)) then begin
    BlockLoad(MainStockRec);
    thelocation = MainStockRec.MainStock;
  end;  
  StartReportJob(USetStr(11640));
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  Header(rw,USetStr(11653) & " " & thecur,0);
  if (nonblank(thelocation)) then begin
    Header(rw,USetStr(11583) & " " & thelocation,1);
    rw = rw + 1;
  end;
  EndHeader;
  SetRepCol(2,110);
  SetRepCol(3,300);
  SetRepCol(4,320);
  SetRepCol(5,65);
  SetRepCol(6,200);
  SetRepCol(7,340);
  SetRepCol(8,410);
  SetRepCol(9,50);
  foundf = true;
  lastitem = "";
  RentINr.SerialNr = "";
  RentINr.Code = frin;
  while (LoopKey("SerialNr",RentINr,2,foundf)) begin
    testf = true;
    if (RentINr.SerialNr!="") then begin
      foundf = false;
    end;
    if (RepSpec.f2<>"") then begin
      if (RentINr.Code>toin) then begin
        foundf = false;
      end;
    end;
    if (foundf==false) then begin
      testf = false;
    end;
    if (nonblank(RepSpec.f3)) then begin
      if (RentINr.Group<frgr) then begin
        testf = false;
      end;
      if (RentINr.Group>togr) then begin
        testf = false;
      end;
    end;
    if (RentINr.Terminated<>0) then begin
      testf = false;
    end;
/*
    if (nonblank(RepSpec.f4)) then begin
      if (RepSpec.f4 <> RentINr.OrgLocation) then begin
        testf = false;
      end;
    end;
*/
    if (testf) then begin
      AvailList(RentINr,RentResr,quant,RepSpec.sStartDate,startofday,endofday,maxdays,lastitem,headerf,header2f,RepSpec.UsedOnly,thelocation,"",
                RepSpec.flags[0]);
    end;
  end;
  foundf = true;
  lastitem = "";
  ResetLoop(RentINr);
  RentINr.Code = frin;
  while (LoopMain(RentINr,1,foundf)) begin
    testf = true;
    if (RepSpec.f2<>"") then begin
      if (RentINr.Code>toin) then begin
        foundf = false;
      end;
    end;
    if (foundf==false) then begin
      testf = false;
    end;
    if (RentINr.SerialNr=="") then begin
      testf = false;
    end;
    if (nonblank(RepSpec.f3)) then begin
      if (RentINr.Group<frgr) then begin
        testf = false;
      end;
      if (RentINr.Group>togr) then begin
        testf = false;
      end;
    end;
    if (nonblankdate(RentINr.PurchaseDate)) then begin
      if (RentINr.PurchaseDate>RepSpec.sStartDate) then begin
        testf = false;
      end;
    end;
    if (RentINr.Terminated<>0) then begin
      testf = false;
    end;
    if (testf) then begin
      AvailList(RentINr,RentResr,quant,RepSpec.sStartDate,startofday,endofday,maxdays,lastitem,headerf,header2f,RepSpec.UsedOnly,thelocation,"",
                RepSpec.flags[0]);
    end;
  end;
  if (checkrows) then begin
    rwcnt = MatRowCnt(RentRes2r);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RentRes2r,i,RentResrw);
      RentINr.Code = RentResrw.ArtCode;
      RentINr.SerialNr = RentResrw.SerialNr;
      if (ReadFirstMain(RentINr,2,true)) then begin
        AvailList(RentINr,RentResr,quant,RepSpec.sStartDate,startofday,endofday,maxdays,lastitem,headerf,header2f,RepSpec.UsedOnly,thelocation,"",
                  RepSpec.flags[0]);
      end;
    end;
  end;
  if (blank(thelocation)) then begin
    BlockLoad(MainStockRec);
    thelocation = MainStockRec.MainStock;
  end;
  Black_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(11649) & ": " & quant,false);
  EndFormat;
  StartFormat(15);
  EndFormat;
  if (RepSpec.flags[0]!=0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(11652) & ": " & thelocation,false);
    EndFormat;
  end;
  EndJob;
  return;
end;

