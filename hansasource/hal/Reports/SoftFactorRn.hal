external function Boolean FindTheUser(var record UserVc);
external function LongInt DateDiff(Date,Date);
external procedure HT2Per(Date, Date , var string);

procedure SoftFactorAnalysis(record RcVc RepSpec,string compcode,var array string aemp,var array string aempname,var array Date adat,
                             var array Integer aLoyalty,var array Integer aAttitude,var array Integer aLearningCurve,
                             var array Integer aCustomerRelations,var array Integer aSalesEffort,var array Integer aWorkEffort,
                             var array Integer aResponsibility,var array Integer aInternalTraining,var array Integer aPrivateLife,
                             var array string acompcode,var Integer acnt)
begin
  record SoftFactorVc SoftFactorr;
  record SoftFactorGroupVc SoftFactorGroupr;
  row SoftFactorGroupVc SoftFactorGrouprw;
  Boolean foundf,testf,inarrf;
  Integer i,j,rwcnt;
  Date bldat;
  record UserVc Userr;

  foundf = true;
/* Most efficient, but EmployeeCode as sort code is way easier and we won't have a LOT of records anyway :)
   Once we have a lot of records and we get slowliness complaints, I will rewrite this...
  SoftFactorr.OKFlag = 1;
  SoftFactorr.TransDate = RepSpec.sStartDate;
  while (LoopKey("OKFlag",SoftFactorr,2,foundf)) begin
*/
  SoftFactorr.EmployeeCode = RepSpec.f1;
  SoftFactorr.TransDate = RepSpec.sStartDate;
  while (LoopKey("EmployeeCode",SoftFactorr,2,foundf)) begin
    if (nonblank(RepSpec.f1)) then begin
      if (SoftFactorr.EmployeeCode!=RepSpec.f1) then begin
        foundf = false;
      end;
    end;
    testf = foundf;
    if (DateInRange(SoftFactorr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
      testf = false;
    end;
    if (SoftFactorr.OKFlag==0) then begin
      testf = false;
    end;
    Userr.Code = SoftFactorr.EmployeeCode;
//    if (ReadFirstMain(Userr,1,true)==false) then begin testf = false; end;
    if (FindTheUser(Userr)==false) then begin testf = false; end;
    if (Userr.TerminatedFlag!=0) then begin testf = false; end;
    if (Userr.Closed!=0) then begin testf = false; end;
    if (testf) then begin
      aemp[acnt] = SoftFactorr.EmployeeCode;
      aempname[acnt] = SoftFactorr.EmployeeName;
      adat[acnt] = SoftFactorr.TransDate;
      aLoyalty[acnt] = SoftFactorr.Loyalty;
      aAttitude[acnt] = SoftFactorr.Attitude;
      aLearningCurve[acnt] = SoftFactorr.LearningCurve;
      aCustomerRelations[acnt] = SoftFactorr.CustomerRelations;
      aSalesEffort[acnt] = SoftFactorr.SalesEffort;
      aWorkEffort[acnt] = SoftFactorr.WorkEffort;
      aResponsibility[acnt] = SoftFactorr.Responsibility;
      aInternalTraining[acnt] = SoftFactorr.InternalTraining;
      aPrivateLife[acnt] = SoftFactorr.PrivateLife;
      acompcode[acnt] = compcode;
      acnt = acnt + 1;
    end;
  end;

  foundf = true;
//  SoftFactorGroupr.StartDate = RepSpec.sStartDate; // Could write it better, more efficient, but this register will be small anyway
  while (LoopKey("StartDate",SoftFactorGroupr,1,foundf)) begin
    testf = false;
    if (DateInRange(SoftFactorGroupr.StartDate,RepSpec.sStartDate,RepSpec.sEndDate)) then begin
      testf = true;
    end;
    if (DateInRange(SoftFactorGroupr.EndDate,RepSpec.sStartDate,RepSpec.sEndDate)) then begin
      testf = true;
    end;
    if (DateInRange(RepSpec.sStartDate,SoftFactorGroupr.StartDate,SoftFactorGroupr.EndDate)) then begin
      testf = true;
    end;
    if (DateInRange(RepSpec.sEndDate,SoftFactorGroupr.StartDate,SoftFactorGroupr.EndDate)) then begin
      testf = true;
    end;
    if (foundf==false) then begin
      testf = false;
    end;
    if (testf) then begin
      rwcnt = MatRowCnt(SoftFactorGroupr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(SoftFactorGroupr,i,SoftFactorGrouprw);
        testf = true;
        if ((nonblankdate(SoftFactorGrouprw.StartDate)) or (nonblankdate(SoftFactorGrouprw.EndDate))) then begin
          testf = false;
          if (DateInRange(SoftFactorGrouprw.StartDate,RepSpec.sStartDate,RepSpec.sEndDate)) then begin
            testf = true;
          end;
          if (DateInRange(SoftFactorGrouprw.EndDate,RepSpec.sStartDate,RepSpec.sEndDate)) then begin
            testf = true;
          end;
          if (DateInRange(RepSpec.sStartDate,SoftFactorGrouprw.StartDate,SoftFactorGrouprw.EndDate)) then begin
            testf = true;
          end;
          if (DateInRange(RepSpec.sEndDate,SoftFactorGrouprw.StartDate,SoftFactorGrouprw.EndDate)) then begin
            testf = true;
          end;
        end;
        if (testf) then begin
          inarrf = false;
          if (nonblank(RepSpec.f1)) then begin
            if (SoftFactorGrouprw.EmployeeCode!=RepSpec.f1) then begin
              inarrf = true;
            end;
          end;
          for (j=0;j<acnt;j=j+1) begin
            if (aemp[j]==SoftFactorGrouprw.EmployeeCode) then begin
              inarrf = true;
            end;
          end;
          if (inarrf==false) then begin
            testf = true;
            Userr.Code = SoftFactorGrouprw.EmployeeCode;
//            if (ReadFirstMain(Userr,1,true)==false) then begin testf = false; end;
            if (FindTheUser(Userr)==false) then begin testf = false; end;
            if (Userr.TerminatedFlag!=0) then begin testf = false; end;
            if (Userr.Closed!=0) then begin testf = false; end;
            if (testf) then begin
              aemp[acnt] = SoftFactorGrouprw.EmployeeCode;
              aempname[acnt] = SoftFactorGrouprw.EmployeeName;
              adat[acnt] = bldat;
              aLoyalty[acnt] = 0;
              aAttitude[acnt] = 0;
              aLearningCurve[acnt] = 0;
              aCustomerRelations[acnt] = 0;
              aSalesEffort[acnt] = 0;
              aWorkEffort[acnt] = 0;
              aResponsibility[acnt] = 0;
              aInternalTraining[acnt] = 0;
              aPrivateLife[acnt] = 0;
              acompcode[acnt] = compcode;
              acnt = acnt + 1;
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure PrintAnalysisOverview(record RcVc RepSpec,array string aemp,array string aempname,array Date adat,array Integer aLoyalty,array Integer aAttitude,
                             array Integer aLearningCurve,array Integer aCustomerRelations,array Integer aSalesEffort,
                             array Integer aWorkEffort,array Integer aResponsibility,array Integer aInternalTraining,
                             array Integer aPrivateLife,array string acompcode,Integer acnt)
begin
  Integer i;
  string 20 lastuser;
  string 60 lastusername;
  string 20 lastcompcode;
  record UserVc Userr;
  Integer factors,positives,negatives,expected;
  Boolean printedf;
  Integer rmLoy,rmAtt,rmLeaCu,rmCusRel,rmSalEff,rmWorkEff,rmResp,rmIntTra,rmPriLife;
  Date lasttd;
  
  lastuser = "";
  lastusername = "";
  lastcompcode = "";
  for (i=0;i<acnt;i=i+1) begin
    if (aemp[i]!=lastuser) then begin
      if (nonblank(lastuser)) then begin
        if (RepSpec.flags[0]!=0) then begin
          StartFormat(15);
          OutStringID(0,"DblSoftFactDet",lastuser,false,lastcompcode);
          OutString(2,0,lastusername,false);
          OutString(3,0,factors,true);
          OutDate(4,0,lasttd,true);
          OutLongInt(5,0,DateDiff(CurrentDate,lasttd),true);
          OutString(6,0,negatives,true);
          OutString(7,0,expected,true);
          OutString(8,0,positives,true);
          if (rmLoy>1) or (rmAtt>1) or (rmLeaCu>1) or (rmCusRel>1) or (rmSalEff>1) or (rmWorkEff>1) or (rmResp>1) or (rmIntTra>1) or (rmPriLife>1) then begin
            OutString(1,0,"+",true);
          end;
          EndFormat;
        end else begin
          StartFormat(15);
           OutStringID(0,"DblSoftFactDet",lastuser,false,lastcompcode);
           OutString(2,0,lastusername,false);
           OutString(3,0,factors,true);
           OutString(4,0,negatives,true);
           OutString(5,0,expected,true);
           OutString(6,0,positives,true);
          EndFormat;
        end;
        rmLoy = 0; rmAtt = 0; rmLeaCu = 0; rmCusRel = 0; rmSalEff = 0; rmWorkEff = 0; rmResp = 0; rmIntTra = 0; rmPriLife = 0;
      end;
      lastuser = aemp[i];
      lastusername = aempname[i];
      lastcompcode = acompcode[i];
      factors = 0;
      positives = 0;
      negatives = 0;
      expected = 0;
    end;
    if (nonblankdate(adat[i])) then begin
      factors = factors + 1;
    end;
    switch (aLoyalty[i]) begin
      case 1: negatives = negatives + 1; rmLoy = rmLoy + 1;
      case 2: expected = expected + 1; if (rmLoy>0) then begin rmLoy = rmLoy - 1; end;
      case 3: positives = positives + 1; if (rmLoy>0) then begin rmLoy = rmLoy - 1; end;
    end;
    switch (aAttitude[i]) begin
      case 1: negatives = negatives + 1; rmAtt = rmAtt + 1;
      case 2: expected = expected + 1; if (rmAtt>0) then begin rmAtt = rmAtt - 1; end;
      case 3: positives = positives + 1; if (rmAtt>0) then begin rmAtt = rmAtt - 1; end;
    end;
    switch (aLearningCurve[i]) begin
      case 1: negatives = negatives + 1; rmLeaCu = rmLeaCu + 1;
      case 2: expected = expected + 1; if (rmLeaCu>0) then begin rmLeaCu = rmLeaCu - 1; end;
      case 3: positives = positives + 1; if (rmLeaCu>0) then begin rmLeaCu = rmLeaCu - 1; end;
    end;
    switch (aCustomerRelations[i]) begin
      case 1: negatives = negatives + 1; rmCusRel = rmCusRel + 1;
      case 2: expected = expected + 1; if (rmCusRel>0) then begin rmCusRel = rmCusRel - 1; end;
      case 3: positives = positives + 1; if (rmCusRel>0) then begin rmCusRel = rmCusRel - 1; end;
    end;
    switch (aSalesEffort[i]) begin
      case 1: negatives = negatives + 1; rmSalEff = rmSalEff + 1;
      case 2: expected = expected + 1; if (rmSalEff>0) then begin rmSalEff = rmSalEff - 1; end;
      case 3: positives = positives + 1; if (rmSalEff>0) then begin rmSalEff = rmSalEff - 1; end;
    end;
    switch (aWorkEffort[i]) begin
      case 1: negatives = negatives + 1; rmWorkEff = rmWorkEff + 1;
      case 2: expected = expected + 1; if (rmWorkEff>0) then begin rmWorkEff = rmWorkEff - 1; end;
      case 3: positives = positives + 1; if (rmWorkEff>0) then begin rmWorkEff = rmWorkEff - 1; end;
    end;
    switch (aResponsibility[i]) begin
      case 1: negatives = negatives + 1; rmResp = rmResp + 1;
      case 2: expected = expected + 1;  if (rmResp>0) then begin rmResp = rmResp - 1; end;
      case 3: positives = positives + 1; if (rmResp>0) then begin rmResp = rmResp - 1; end;
    end;
    switch (aInternalTraining[i]) begin
      case 1: negatives = negatives + 1; rmIntTra = rmIntTra + 1;
      case 2: expected = expected + 1; if (rmIntTra>0) then begin rmIntTra = rmIntTra - 1; end;
      case 3: positives = positives + 1; if (rmIntTra>0) then begin rmIntTra = rmIntTra - 1; end;
    end;
    switch (aPrivateLife[i]) begin
      case 1: negatives = negatives + 1; rmPriLife = rmPriLife + 1;
      case 2: expected = expected + 1;  if (rmPriLife>0) then begin rmPriLife = rmPriLife - 1; end;
      case 3: positives = positives + 1;  if (rmPriLife>0) then begin rmPriLife = rmPriLife - 1; end;
    end;
    lasttd = adat[i];
  end;
  if (nonblank(lastuser)) then begin
    if (RepSpec.flags[0]!=0) then begin
      StartFormat(15);
      OutStringID(0,"DblSoftFactDet",lastuser,false,lastcompcode);
      OutString(2,0,lastusername,false);
      OutString(3,0,factors,true);
      OutDate(4,0,lasttd,true);
      OutLongInt(5,0,DateDiff(CurrentDate,lasttd),true);
      OutString(6,0,negatives,true);
      OutString(7,0,expected,true);
      OutString(8,0,positives,true);
      if (rmLoy>1) or (rmAtt>1) or (rmLeaCu>1) or (rmCusRel>1) or (rmSalEff>1) or (rmWorkEff>1) or (rmResp>1) or (rmIntTra>1) or (rmPriLife>1) then begin
        OutString(1,0,"+",true);
      end;
      EndFormat;
    end else begin
      StartFormat(15);
      OutStringID(0,"DblSoftFactDet",lastuser,false,lastcompcode);
      OutString(2,0,lastusername,false);
      OutString(3,0,factors,true);
      OutString(4,0,negatives,true);
      OutString(5,0,expected,true);
      OutString(6,0,positives,true);
      EndFormat;
    end;
  end;
  return;
end;

procedure ClearAnalysisArrays(var array string aemp,var array string aempname,var array Date adat,var array Integer aLoyalty,var array Integer aAttitude,
                             var array Integer aLearningCurve,var array Integer aCustomerRelations,var array Integer aSalesEffort,
                             var array Integer aWorkEffort,var array Integer aResponsibility,var array Integer aInternalTraining,
                             var array Integer aPrivateLife,var array string acompcode,var Integer acnt)
begin
  Integer i;
  Date bldat;

  for (i=0;i<acnt;i=i+1) begin
    aLoyalty[i] = 0;
    aAttitude[i] = 0;
    aLearningCurve[i] = 0;
    aCustomerRelations[i] = 0;
    aSalesEffort[i] = 0;
    aWorkEffort[i] = 0;
    aResponsibility[i] = 0;
    aInternalTraining[i] = 0;
    aPrivateLife[i] = 0;
    aemp[i] = "";
    aempname[i] = "";
    adat[i] = bldat;
  end;
  acnt = 0;
  return;
end;

procedure SoftFactAnalysisOverview(record RcVc RepSpec)
begin
  record CompaniesBlock CompaniesRec;
  row CompaniesBlock comprw;
  Integer i,rwcnt;
  Integer oldcomp;
  Boolean testf;
  Integer rw;
  string 255 tstr;
  array string 20 aemp;
  array string 60 aempname;
  array Date adat;
  array Integer aLoyalty;
  array Integer aAttitude;
  array Integer aLearningCurve;
  array Integer aCustomerRelations;
  array Integer aSalesEffort;
  array Integer aWorkEffort;
  array Integer aResponsibility;
  array Integer aInternalTraining;
  array Integer aPrivateLife;
  array string 20 acompcode;
  Integer acnt;

  BlockLoad(CompaniesRec);
  oldcomp = CurrentCompany;
  rwcnt = MatRowCnt(CompaniesRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CompaniesRec,i,comprw);
    testf = true;
    if (nonblank(RepSpec.FirstAcc)) then begin
      if (RepSpec.FirstAcc!=comprw.CompCode) then begin
        testf = false;
      end;
    end;
    if (nonblank(RepSpec.LastAcc)) then begin
      if (RepSpec.LastAcc!=comprw.CompCode) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      if (SetCompanyCode(comprw.CompCode,false)) then begin
        acnt = 0;
        SoftFactorAnalysis(RepSpec,comprw.CompCode,
                           aemp,aempname,adat,aLoyalty,aAttitude,aLearningCurve,aCustomerRelations,aSalesEffort,
                           aWorkEffort,aResponsibility,aInternalTraining,aPrivateLife,acompcode,acnt);
        if (acnt>0) then begin
          StartFormat(15);
          OutString(0,0,comprw.CompCode,false);
          OutString(2,0,comprw.CompName,false);
          EndFormat;
          Gray_Divider(0,1);
          if (RepSpec.flags[0]!=0) then begin
            StartFormat(15);
            OutString(0,0,USetStr(17901),false);
            OutString(2,0,USetStr(17902),false);
            OutString(3,0,USetStr(17903),true);
            OutString(4,0,USetStr(17904),true);
            OutString(5,0,USetStr(17905),true);
            OutString(6,0,USetStr(17906),true);
            OutString(7,0,USetStr(17907),true);
            OutString(8,0,USetStr(17908),true);
            OutString(1,0,USetStr(17909),true);          
            EndFormat;
          end else begin
            StartFormat(15);
            OutString(0,0,USetStr(17901),false);
            OutString(2,0,USetStr(17902),false);
            OutString(3,0,USetStr(17910),true);
            OutString(4,0,USetStr(17911),true);
            OutString(5,0,USetStr(17912),true);
            OutString(6,0,USetStr(17913),true);
            EndFormat;
          end;
          Gray_Divider(0,1);
          PrintAnalysisOverview(RepSpec,aemp,aempname,adat,aLoyalty,aAttitude,aLearningCurve,aCustomerRelations,aSalesEffort,
                                aWorkEffort,aResponsibility,aInternalTraining,aPrivateLife,acompcode,acnt);
          Gray_Divider(0,1);
          StartFormat(15);
          EndFormat;
          ClearAnalysisArrays(aemp,aempname,adat,aLoyalty,aAttitude,aLearningCurve,aCustomerRelations,aSalesEffort,
                              aWorkEffort,aResponsibility,aInternalTraining,aPrivateLife,acompcode,acnt);
        end;
      end;
    end;
  end;
  ResetCompany(oldcomp);
  return;
end;

procedure PrintAnswers(string emp,string empname,Date dat,Integer Loyalty,Integer Attitude,Integer LearningCurve,Integer CustomerRelations,
                       Integer SalesEffort,Integer WorkEffort,Integer Responsibility,Integer InternalTraining,Integer PrivateLife,string compcode)
begin
  string 5 smin,splus,snorm;

  smin = "-";
  splus = "+";
  snorm = " ";
  StartFormat(15);
  OutStringID(0,"DblSoftFactRep",DateToString(dat,"DD/MM/YYYY"),false,emp & ":" & compcode);
  switch (Loyalty) begin
    case 1: OutString(2,0,smin,true);
    case 2: OutString(2,0,snorm,true);
    case 3: OutString(2,0,splus,true);
  end;
  switch (Attitude) begin
    case 1: OutString(3,0,smin,true);
    case 2: OutString(3,0,snorm,true);
    case 3: OutString(3,0,splus,true);
  end;
  switch (LearningCurve) begin
    case 1: OutString(4,0,smin,true);
    case 2: OutString(4,0,snorm,true);
    case 3: OutString(4,0,splus,true);
  end;
  switch (CustomerRelations) begin
    case 1: OutString(5,0,smin,true);
    case 2: OutString(5,0,snorm,true);
    case 3: OutString(5,0,splus,true);
  end;
  switch (SalesEffort) begin
    case 1: OutString(6,0,smin,true);
    case 2: OutString(6,0,snorm,true);
    case 3: OutString(6,0,splus,true);
  end;
  switch (WorkEffort) begin
    case 1: OutString(7,0,smin,true);
    case 2: OutString(7,0,snorm,true);
    case 3: OutString(7,0,splus,true);
  end;
  switch (Responsibility) begin
    case 1: OutString(8,0,smin,true);
    case 2: OutString(8,0,snorm,true);
    case 3: OutString(8,0,splus,true);
  end;
  switch (InternalTraining) begin
    case 1: OutString(9,0,smin,true);
    case 2: OutString(9,0,snorm,true);
    case 3: OutString(9,0,splus,true);
  end;
  switch (PrivateLife) begin
    case 1: OutString(1,0,smin,true);
    case 2: OutString(1,0,snorm,true);
    case 3: OutString(1,0,splus,true);
  end;
  EndFormat;
  return;
end;

procedure PrintAnalysisDetailed(array string aemp,array string aempname,array Date adat,array Integer aLoyalty,array Integer aAttitude,
                             array Integer aLearningCurve,array Integer aCustomerRelations,array Integer aSalesEffort,
                             array Integer aWorkEffort,array Integer aResponsibility,array Integer aInternalTraining,
                             array Integer aPrivateLife,array string acompcode,Integer acnt)
begin
  Integer i;

  for (i=0;i<acnt;i=i+1) begin
    PrintAnswers(aemp[i],aempname[i],adat[i],aLoyalty[i],aAttitude[i],aLearningCurve[i],aCustomerRelations[i],
                 aSalesEffort[i],aWorkEffort[i],aResponsibility[i],aInternalTraining[i],aPrivateLife[i],acompcode[i]);
  end;
  return;
end;

procedure PrintAnswerHeader()
begin
  StartFormat(15);
  OutString(2,0,USetStr(17914),true);
  OutString(3,0,USetStr(17915),true);
  OutString(4,0,USetStr(17916),true);
  OutString(5,0,USetStr(17917),true);
  OutString(6,0,USetStr(17918),true);
  OutString(7,0,USetStr(17919),true);
  OutString(8,0,USetStr(17920),true);
  OutString(9,0,USetStr(17921),true);
  OutString(1,0,USetStr(17922),true);
  EndFormat;
  Gray_Divider(0,1);
  return;
end;

procedure SoftFactAnalysisDetailed(record RcVc RepSpec)
begin
  record CompaniesBlock CompaniesRec;
  row CompaniesBlock comprw;
  Integer i,rwcnt;
  Integer oldcomp;
  Boolean testf;
  Integer rw;
  string 255 tstr;
  array string 20 aemp;
  array string 60 aempname;
  array Date adat;
  array Integer aLoyalty;
  array Integer aAttitude;
  array Integer aLearningCurve;
  array Integer aCustomerRelations;
  array Integer aSalesEffort;
  array Integer aWorkEffort;
  array Integer aResponsibility;
  array Integer aInternalTraining;
  array Integer aPrivateLife;
  array string 20 acompcode;
  Integer acnt;

  BlockLoad(CompaniesRec);
  oldcomp = CurrentCompany;
  rwcnt = MatRowCnt(CompaniesRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CompaniesRec,i,comprw);
    testf = true;
    if (nonblank(RepSpec.FirstAcc)) then begin
      if (RepSpec.FirstAcc!=comprw.CompCode) then begin
        testf = false;
      end;
    end;
    if (nonblank(RepSpec.LastAcc)) then begin
      if (RepSpec.LastAcc!=comprw.CompCode) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      if (SetCompanyCode(comprw.CompCode,false)) then begin
        acnt = 0;
        SoftFactorAnalysis(RepSpec,comprw.CompCode,
                           aemp,aempname,adat,aLoyalty,aAttitude,aLearningCurve,aCustomerRelations,aSalesEffort,
                           aWorkEffort,aResponsibility,aInternalTraining,aPrivateLife,acompcode,acnt);
        if (acnt>0) then begin
          StartFormat(15);
          OutString(0,0,aemp[0],false);
          OutString(50,0,aempname[0],false);
          EndFormat;
          Gray_Divider(0,1);
          PrintAnswerHeader;
          PrintAnalysisDetailed(aemp,aempname,adat,aLoyalty,aAttitude,aLearningCurve,aCustomerRelations,aSalesEffort,
                                aWorkEffort,aResponsibility,aInternalTraining,aPrivateLife,acompcode,acnt);
          Gray_Divider(0,1);
          StartFormat(15);
          EndFormat;
          ClearAnalysisArrays(aemp,aempname,adat,aLoyalty,aAttitude,aLearningCurve,aCustomerRelations,aSalesEffort,
                              aWorkEffort,aResponsibility,aInternalTraining,aPrivateLife,acompcode,acnt);
        end;
      end;
    end;
  end;
  ResetCompany(oldcomp);
  return;
end;

procedure PrintAnswerLine(string desc,Integer answer,string comment)
begin
  string 255 tstr;

  switch (answer) begin
    case 1: tstr = USetStr(17923);
    case 2: tstr = USetStr(17912);
    case 3: tstr = USetStr(17913);
  end;
  StartFormat(15);
  OutString(0,0,desc,false);
  OutString(2,0,tstr,false);
  OutString(3,0,comment,false);
  EndFormat;
  return
end;

procedure SoftFactAnalysisOneRecord(record RcVc RepSpec)
begin
  record SoftFactorVc SoftFactorr;
  record CompaniesBlock CompaniesRec;
  row CompaniesBlock comprw;
  Integer i,rwcnt;
  Integer oldcomp;
  Boolean testf;
  Integer rw;
  string 255 tstr;
  string 20 smin,splus,snorm;
  record UserVc Userr;

  smin = USetStr(17923);
  splus = USetStr(17913);
  snorm = USetStr(17912);
  BlockLoad(CompaniesRec);
  oldcomp = CurrentCompany;
  rwcnt = MatRowCnt(CompaniesRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CompaniesRec,i,comprw);
    testf = true;
    if (nonblank(RepSpec.FirstAcc)) then begin
      if (RepSpec.FirstAcc!=comprw.CompCode) then begin
        testf = false;
      end;
    end;
    if (nonblank(RepSpec.LastAcc)) then begin
      if (RepSpec.LastAcc!=comprw.CompCode) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      if (SetCompanyCode(comprw.CompCode,false)) then begin
        SoftFactorr.EmployeeCode = RepSpec.f1;
        SoftFactorr.TransDate = RepSpec.d1;
        if (ReadFirstKey("EmployeeCode",SoftFactorr,2,true)) then begin
          Userr.Code = SoftFactorr.EmployeeCode;
//          if (ReadFirstMain(Userr,1,true)==false) then begin testf = false; end;
          if (FindTheUser(Userr)==false) then begin testf = false; end;
          if (Userr.TerminatedFlag!=0) then begin testf = false; end;
          if (Userr.Closed!=0) then begin testf = false; end;
          if (testf) then begin
            StartFormat(15);
            OutString(80,0,"Userr.Code",false);
            OutString(180,0,Userr.Code,false);
            OutString(280,0,Userr.Closed,false);
            EndFormat;
            StartFormat(15);
            OutStringID(0,"DblSoftFactRec",DateToString(SoftFactorr.TransDate,"DD/MM/YYYY"),false,SoftFactorr.EmployeeCode & ":" & comprw.CompCode);
            OutString(80,0,SoftFactorr.UserCode,false);
            EndFormat;
            StartFormat(15);
            OutString(0,0,SoftFactorr.EmployeeCode,false);
            OutString(80,0,SoftFactorr.EmployeeName,false);
            OutString(240,0,SoftFactorr.Department,false);
            EndFormat;
            StartFormat(15);
            EndFormat;
            PrintAnswerLine(USetStr(17914),SoftFactorr.Loyalty,SoftFactorr.LoyaltyStr);
            PrintAnswerLine(USetStr(17915),SoftFactorr.Attitude,SoftFactorr.AttitudeStr);
            PrintAnswerLine(USetStr(17924),SoftFactorr.LearningCurve,SoftFactorr.LearningCurveStr);
            PrintAnswerLine(USetStr(17925),SoftFactorr.CustomerRelations,SoftFactorr.CustomerRelationsStr);
            PrintAnswerLine(USetStr(17926),SoftFactorr.SalesEffort,SoftFactorr.SalesEffortStr);
            PrintAnswerLine(USetStr(17927),SoftFactorr.WorkEffort,SoftFactorr.WorkEffortStr);
            PrintAnswerLine(USetStr(17928),SoftFactorr.Responsibility,SoftFactorr.ResponsibilityStr);
            PrintAnswerLine(USetStr(17929),SoftFactorr.InternalTraining,SoftFactorr.InternalTrainingStr);
            PrintAnswerLine(USetStr(17930),SoftFactorr.PrivateLife,SoftFactorr.PrivateLifeStr);
            StartFormat(15);
            EndFormat;
            StartFormat(15);
            OutString(0,0,SoftFactorr.Comment,false);
            EndFormat;
            StartFormat(15);
            EndFormat;
            StartFormat(15);
            OutString(0,0,SoftFactorr.Improvement1,false);
            EndFormat;
            StartFormat(15);
            OutString(0,0,SoftFactorr.Improvement2,false);
            EndFormat;
            StartFormat(15);
            OutString(0,0,SoftFactorr.Improvement3,false);
            EndFormat;
            StartFormat(15);
            OutString(0,0,SoftFactorr.Improvement4,false);
            EndFormat;
            StartFormat(15);
            OutString(0,0,SoftFactorr.Improvement5,false);
            EndFormat;
          end;
        end;
      end;
    end;
  end;
  ResetCompany(oldcomp);
  return;
end;

global
procedure SoftFactAnalysisRn(var record RcVc RepSpec)
begin
  string 255 tstr;
  Integer rw;
  record CompaniesBlock CompaniesRec;
  row CompaniesBlock comprw;
  Integer i,rwcnt;
  record RcVc orgRepSpec;
  record DaughterCompBlock DCb;
  row DaughterCompBlock DCrw;
  
  StartReportJob(USetStr(17900));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;
  switch (RepSpec.flags[10]) begin
    case 0:
      if (RepSpec.flags[0]!=0) then begin
        SetRepCol(2,50);
        SetRepCol(3,170);
        SetRepCol(4,230);
        SetRepCol(5,270);
        SetRepCol(6,310);
        SetRepCol(7,360);
        SetRepCol(8,410);
      end else begin
        SetRepCol(2,50);
        SetRepCol(3,240);
        SetRepCol(4,320);
        SetRepCol(5,400);
        SetRepCol(6,480);
      end;
/* This code is rubbish, why depend on Consolidation. If you DON'T check that checkbox it will show ALL countires, which is what we want...
      if (RepSpec.IncDaughter!=0) then begin
        RecordCopy(orgRepSpec,RepSpec);
        BlockLoad(DCb);
        rwcnt = MatRowCnt(DCb);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(DCb,i,DCrw);
          if (SetCompanyCode(DCrw.CompCode,false)) then begin
            RecordCopy(RepSpec,orgRepSpec);
            RepSpec.LastAcc = DCrw.CompCode;
            SoftFactAnalysisOverview(RepSpec);
          end;
        end;
      end else begin
*/
        SoftFactAnalysisOverview(RepSpec);      
//      end;
    case 1:
      SetRepCol(2,80);
      SetRepCol(3,130);
      SetRepCol(4,180);
      SetRepCol(5,230);
      SetRepCol(6,280);
      SetRepCol(7,330);
      SetRepCol(8,380);
      SetRepCol(9,430);
      SoftFactAnalysisDetailed(RepSpec);
    case 2:
      SetRepCol(2,120);
      SetRepCol(3,250);
      SoftFactAnalysisOneRecord(RepSpec);
  end;
  EndJob;
  return;
end;

