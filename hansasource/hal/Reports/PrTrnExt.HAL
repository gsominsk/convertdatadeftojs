external procedure HTArtGroup(string, var string);external procedure HTItemClass(string,var string);external function Boolean HasItemClassification();external function Boolean HasItemGroups();external procedure HT2Per(Date, Date , var string);globalprocedure PrTranPrintHeader(record RcVc RepSpec,Date sd,Date ed,Integer ArtMode,Integer flags0,string fromproj,string toproj,string fromitem,string toitem,string frompers,string topers, string objectstr)begin  Integer rw;  string 255 tstr;  rw = 1;  if (ArtMode==0) then begin    tstr = USetStr(1159);  end;  if (ArtMode==1) then begin    tstr = USetStr(1160);  end;  if (ArtMode==2) then begin    tstr = USetStr(3567);  end;  if (ArtMode==3) then begin    tstr = USetStr(3568);  end;  Header(rw,tstr,1);  rw = rw + 1;  if (nonblank(objectstr)) then begin    tstr = USetStr(3321);    tstr = tstr & " : ";    tstr = tstr & objectstr;    Header(rw,tstr,1);    rw = rw + 1;  end;  if ((blank(fromproj)) and (blank(toproj))) then begin    tstr = USetStr(3564);  end else begin    tstr = USetStr(1829);    tstr = tstr & fromproj;    if (fromproj<>toproj) then begin      tstr = tstr & " : " & toproj;    end;  end;  Header(rw,tstr,1);  if (flags0==0) then begin    tstr = USetStr(1178);   end;  if (flags0==1) then begin    tstr = USetStr(3565);   end;  if (flags0==2) then begin    tstr = USetStr(3566);   end;  Header(rw,tstr,0);  rw = rw + 1;  HT2Per(sd,ed,tstr);  Header(rw,tstr,0);  if ((blank(fromitem)) and (blank(toitem))) then begin    tstr = USetStr(1106);  end else begin    tstr = USetStr(1107);    tstr = tstr & fromitem;    if (fromitem<>toitem) then begin      tstr = tstr & " : " & toitem;    end;  end;  Header(rw,tstr,1);  rw = rw + 1;  if (HasItemGroups) then begin    HTArtGroup(RepSpec.f4,tstr);    if (nonblank(tstr)) then begin      Header(rw,tstr,1);      rw = rw + 1;    end;  end;  if (HasItemClassification) then begin    HTItemClass(RepSpec.f5,tstr);    if (nonblank(tstr)) then begin      Header(rw,tstr,1);      rw = rw + 1;    end;  end;  if (RepSpec.flags[12]==0) then begin    tstr = USetStr(2369);   end else begin    tstr = USetStr(6650);  end;              Header(rw,tstr,0);  if ((blank(frompers)) and (blank(topers))) then begin    tstr = USetStr(3569);  end else begin    tstr = USetStr(3570);    tstr = tstr & frompers;    if (frompers<>topers) then begin      tstr = tstr & " : " & topers;    end;  end;      Header(rw,tstr,1);  rw = rw + 1;  return;end;globalprocedure PRTransPrintStrings1(Integer str1,Integer str2,Integer str3,Integer str4,Integer str5,Integer str6,Integer str7,Integer str8)begin  StartFormat(15);  OutString(0,0,USetStr(str1),false);  OutString(3,0,USetStr(str2),false);    OutString(4,0,USetStr(str3),false);  OutString(5,0,USetStr(str4),false);   OutString(6,0,USetStr(str5),true);    OutString(7,0,USetStr(str6),true);  OutString(8,0,USetStr(str7),true);  OutString(9,0,USetStr(str8),true);  EndFormat;  return;end;globalprocedure PRTransPrintStrings2(Integer str1,Integer str2,Integer str3,Integer str4)begin  StartFormat(15);  OutString(0,0,USetStr(str1),false);  OutString(3,0,USetStr(str2),false);    OutString(4,0,USetStr(str3),false);  OutString(5,0,USetStr(str4),false);   EndFormat;  return;end;globalprocedure PRTransPrintStringsNrs2(Integer str1,Integer str2,Integer str3)begin  StartFormat(15);  OutString(0,0,USetStr(str1),false);  OutString(3,0,USetStr(str2),false);  OutString(4,0,USetStr(str3),false);  EndFormat;  return;end; globalprocedure PrintInfo1(string str1,date str2,string str3,Integer oVc,LongInt nr,string str5,val val6,string str7,val val8,string dblstr,string curncy)begin  string 255 dblstrnr;  StartFormat(15);  OutStringID(0,"DblPR",str1,false,dblstr);  OutDate(3,0,str2,false);  OutString(4,0,str3,false);  switch (oVc) begin    case 1: dblstrnr = "DblTSVc";    case 2: dblstrnr = "DblVIVc";    case 3: dblstrnr = "DblExpVc";    case 4: dblstrnr = "DblSHVc";    case 5: dblstrnr = "DblActVc";    case 6: dblstrnr = "DblRetVc";    case 7: dblstrnr = "DblSDVc";    case 100: dblstrnr = "DblIVVc";  end;  OutLongInt(5,dblstrnr,nr,false);  OutString(6,0,str5,true);  OutVal(7,0,val6,M4Val,true);  OutString(8,0,str7,true);  OutVal(9,0,val8,M4Val,true);  OutString(470,0,curncy,false);  EndFormat;  return;end;globalprocedure PrintInfo2(Integer str1,Integer str2,Integer str3,Integer str4,Integer str5,Integer str6,Integer str7,Integer str8,Integer str9)begin StartFormat(15);  OutString(0,0,USetStr(str1),false);  OutString(2,0,USetStr(str2),false);  OutString(85,0,USetStr(str3),false);  OutString(4,0,USetStr(str4),false);  OutString(5,0,USetStr(str5),false);  OutString(6,0,USetStr(str6),true);  OutString(7,0,USetStr(str7),true);  OutString(8,0,USetStr(str8),true);  OutString(9,0,USetStr(str9),true);  Endformat;  return;end;globalprocedure PrintInfo3(val val1,val val2,val val3,val val4,string str5,val val6,val val7,val val8,val val9)begin  StartFormat(15);  OutVal(0,0,val1,M4Val,false);  OutVal(2,0,val2,M4Val,false);  OutVal(85,0,val3,M4Val,false);  OutVal(4,0,val4,M4Val,false);  OutString(5,0,str5,false);  OutVal(6,0,val6,M4Val,true);  OutVal(7,0,val7,M4Val,true);  OutVal(8,0,val8,M4Val,true);  OutVal(9,0,val9,M4Val,true);  EndFormat;  return;end;globalprocedure PrintTot1(Integer flags1,integer flags25,val tssum,Integer flags2,val pisum,Integer flags3,val expsum,integer flags24,val delsum,integer flags26,val rgsum, integer flags27,val sdsum,                    val tsqty,val expqty,val piqty)begin  if (flags1==1) or (flags25==1) then begin    if (tssum <> 0) then begin      StartFormat(15);      OutString(150,0,USetStr(3561),false);      OutVal(295,0,tssum,M4Val,true);      OutVal(345,0,tsqty,M4Val,true);      EndFormat;    end;  end;  if (flags2==1) then begin    if (pisum <> 0) then begin      StartFormat(15);      OutString(150,0,USetStr(3562),false);      OutVal(295,0,pisum,M4Val,true);      OutVal(345,0,piqty,M4Val,true);      EndFormat;    end;  end;  if (flags3==1) then begin    if (expsum <> 0) then begin      StartFormat(15);      OutString(150,0,USetStr(3563),false);      OutVal(295,0,expsum,M4Val,true);      OutVal(345,0,expqty,M4Val,true);      EndFormat;    end;   end;     if (flags24==1) then begin    if (delsum <> 0) then begin      StartFormat(15);      OutString(150,0,USetStr(3577),false);      OutVal(295,0,delsum,M4Val,true);      EndFormat;    end;   end;  if (flags26==1) then begin    if (rgsum <> 0) then begin      StartFormat(15);      OutString(150,0,USetStr(3578),false);      OutVal(295,0,(0-rgsum),M4Val,true);      EndFormat;    end;   end;  if (flags27==1) then begin    if (sdsum <> 0) then begin      StartFormat(15);      OutString(150,0,USetStr(3586),false);      OutVal(295,0,sdsum,M4Val,true);      EndFormat;    end;   end;  return;end;globalprocedure PrintDifTot(Integer flags1,integer flags25,val stssum,val diftssum,Integer flags2,                      val spisum,val difpisum,Integer flags3,val sexpsum,val difexpsum,                      Integer flags24,val sdelsum,val difdelsum,                      Integer flags26,val srgsum,val difrgsum,                      Integer flags27,val ssdsum,val difsdsum)begin  val regtssum;    val tsproc;    val regpisum;  val piproc;    val regexpsum;  val expproc;    val regsdsum;  val sdproc;    val regdelsum;  val delproc;    val regrgsum;  val rgproc;    val diftotsum;  val regtotsum;    val stotsum;  val totproc;    diftotsum = diftssum + difpisum + difexpsum + difdelsum + difrgsum + difsdsum;    stotsum = stssum + spisum + sexpsum + sdelsum + srgsum + ssdsum;  regtotsum = stotsum - diftotsum;  totproc = (stotsum/regtotsum)*100;if (diftotsum <> 0) or (regtotsum<>0) or (stotsum<>0) then begin  Gray_Divider(0,1);  StartFormat(15);  OutString(240,0,USetStr(3571),false);  OutString(305,0,USetStr(3556),false);  OutString(380,0,USetStr(3553),false);  OutString(480,0,USetStr(3558),true);  EndFormat;    if (flags1==1) or (flags25==1) then begin    regtssum = stssum - diftssum;    if (stssum <> 0) then begin      StartFormat(15);      OutString(50,0,USetStr(3561),false);      tsproc = (stssum/regtssum)*100;      OutVal(240,0,regtssum,M4Val,false);      OutVal(300,0,stssum,M4Val,false);      OutVal(380,0,tsproc,M4Val,false);      OutVal(480,0,diftssum,M4Val,true);      EndFormat;    end;  end;       if (flags2==1) then begin    regpisum = spisum - difpisum;          if (spisum <> 0) then begin      StartFormat(15);      OutString(50,0,USetStr(3562),false);      piproc = (spisum/regpisum)*100;      OutVal(240,0,regpisum,M4Val,false);      OutVal(300,0,spisum,M4Val,false);      OutVal(380,0,piproc,M4Val,false);      OutVal(480,0,difpisum,M4Val,true);      EndFormat;    end;  end;  if (flags3==1) then begin    regexpsum = sexpsum - difexpsum;        if (sexpsum <> 0) then begin      StartFormat(15);      OutString(50,0,USetStr(3563),false);      expproc = (sexpsum/regexpsum)*100;      OutVal(240,0,regexpsum,M4Val,false);      OutVal(300,0,sexpsum,M4Val,false);      OutVal(380,0,expproc,M4Val,false);      OutVal(480,0,difexpsum,M4Val,true);      EndFormat;    end;   end; if (flags24==1) then begin    regdelsum = sdelsum - difdelsum;        if (sdelsum <> 0) then begin      StartFormat(15);      OutString(50,0, USetStr(3577),false);       delproc = (sdelsum/regdelsum)*100;      OutVal(240,0,regdelsum,M4Val,false);      OutVal(300,0,sdelsum,M4Val,false);      OutVal(380,0,delproc,M4Val,false);      OutVal(480,0,difdelsum,M4Val,true);      EndFormat;    end;   end;  if (flags26==1) then begin    regrgsum = srgsum - difrgsum;        if (srgsum <> 0) then begin      StartFormat(15);      OutString(50,0,USetStr(3578),false);       rgproc = (srgsum/regrgsum)*100;      OutVal(240,0,regrgsum,M4Val,false);      OutVal(300,0,srgsum,M4Val,false);      OutVal(380,0,rgproc,M4Val,false);      OutVal(480,0,difrgsum,M4Val,true);      EndFormat;    end;   end;  if (flags27==1) then begin    regsdsum = ssdsum - difsdsum;        if (ssdsum <> 0) then begin      StartFormat(15);      OutString(50,0,USetStr(3578),false);       sdproc = (ssdsum/regsdsum)*100;      OutVal(175,0,sdproc,M4Val,false);      OutVal(240,0,regsdsum,M4Val,false);      OutVal(300,0,ssdsum,M4Val,false);      OutVal(380,0,rgproc,M4Val,false);      OutVal(480,0,difsdsum,M4Val,true);      EndFormat;    end;   end;  StartFormat(15);  OutString(50,0,USetStr(3549),false);  OutVal(240,0,regtotsum,M4Val,false);  OutVal(300,0,stotsum,M4Val,false);     OutVal(380,0,totproc,M4Val,false);  OutVal(480,0,diftotsum,M4Val,true);  EndFormat;  StartFormat(20);  EndFormat;     end;  return;end;globalprocedure PrintDetInfo1(string str1,Date str2,string str3,Integer vc,string str5,string comment,Date InvAfter,LongInt invoice)begin  StartFormat(15);  OutString(0,0,str1,false);  OutDate(3,0,str2,false);  OutString(5,0,str3,false);    if (vc==1) then begin    OutString(340,0,USetStr(3572),false);  end;  if (vc==2) then begin    OutString(340,0,USetStr(3573),false);  end;  if (vc==3) then begin    OutString(340,0,USetStr(3574),false);  end;    if (vc==4) then begin    OutString(340,0, USetStr(3580),false);   end;  if (vc==5) then begin    OutString(340,0, USetStr(3579),false);   end;  if (vc==6) then begin    OutString(340,0, USetStr(3581),false);   end;  if (vc==7) then begin    OutString(340,0, USetStr(3585),false);   end;    OutString(480,0,str5,true);  EndFormat;  if nonblank(comment) or nonblankdate(InvAfter) or (invoice<>-1) then begin  	StartFormat(15);  	if nonblank(comment) then begin  		OutString(20,0,comment,false);  	end;	  	if (nonblankdate(InvAfter)) then begin    	OutString(200,0,USetStr(3575),false)    	OutString(300,0,InvAfter,false);  	end;  	if (invoice<>-1) then begin    	OutString(380,0,USetStr(3576),false)    	OutString(480,0,invoice,true);  	end;  	EndFormat;  end;	  return;end;