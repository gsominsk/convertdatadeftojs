external procedure HT2Per(Date, Date , var string);
external function Integer GetIntYc(Date);
external function val FindAccBalance(string,string,date,record ObjBalVc,Integer,Integer,Integer,string,Integer);
external function Boolean GetPM(string,var string,var string);
external procedure OutputReportIndent(record RCVc,Integer);

procedure PrintTransactions(record RcVc RepSpec,string accnumber,Integer startintyc,Integer endintyc,var val totunrecval,var val totunreccurval)
BEGIN
  record MainVc mainr;
  record TRVc TRr;
  row TRVc TRrw;
  Integer i,rwcnt;
  Boolean TrHs,testf;
  val unrecval,unreccurval;
  String 60 objstr;

  objstr = RepSpec.ObjStr;
  mainr.IntYc = startintyc;
  mainr.AccNumber = accnumber;
  mainr.TransDate = RepSpec.sStartDate;
  TrHs = true;
  ResetLoop(mainr);
  while (LoopKey("TransDate",mainr,1,TrHs)) begin
    if (DateInRange(mainr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      testf = true;
      if (mainr.IntYc<startintyc) then begin 
        testf = false; 
      end;
      if (mainr.IntYc>endintyc) then begin 
        testf = false; 
      end;
      if (mainr.AccNumber<>accnumber) then begin 
        testf = false;
      end;
      if (testf) then begin
      if (mainr.FileName=="TRVc") then begin
        TRr.Number = mainr.TransNr;
        TRr.IntYc = mainr.IntYc;
        if (ReadFirstMain(TRr,2,true)) then begin
          if (mainr.TransDate==TRr.TransDate) then begin
            rwcnt = MatRowCnt(TRr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(TRr,i,TRrw);
              testf = true;
              if (TRrw.stp!=1) then begin testf = false; end;
              if (TRrw.ovst!=0) then begin testf = false; end;
              if (TRrw.AccNumber!=accnumber) then begin testf = false; end;
              if (SetInSet(objstr,TRrw.Objects)==false) then begin testf = false; end;
              if (TRrw.Reconsf!=0) then begin
                if (nonblankdate(TRrw.ReconDate)) then begin
                  if (DateInRange(TRrw.ReconDate,RepSpec.sStartDate,RepSpec.sEndDate)) then begin
                    testf = false;
                  end;
                end else begin
                  testf = false;
                end;
              end;
              if (testf) then begin
                if (RepSpec.basecurncy==0) then begin
                  unrecval = TRrw.DebVal-TRrw.CredVal;
                 end else begin
                  unrecval = TRrw.DebVal2-TRrw.CredVal2;
                end;
                unreccurval = TRrw.CurDebVal-TRrw.CurCredVal;
                StartFormat(15);
                OutString(0,"DblTrans",StrTRCode(TRr.IntYc) & "." & TRr.Number,false);
                OutDate(2,0,TRr.TransDate,false);
                OutString(3,0,TRr.Comment,false);
                OutVal(1,0,unrecval,M4Val,true);
//                    OutVal(6,0,unreccurval,M4Val,true);
                EndFormat;
                totunrecval = totunrecval + unrecval;
                totunreccurval = totunreccurval + unreccurval;
              end;
            end;
          end;
        end;
      end;
      end;
    end;
  end;
  return;
end;

global
procedure BankRecRn(record RcVc RepSpec)
begin
  string 20 accnumber;
  string 255 tstr;
  Integer rw;
  record ObjBalVc ObjBalr;
  val t;
  val totopunrecval,totopunreccurval;
  val totipunrecval,totipunreccurval;
  val totobcunrecval,totobcunreccurval;
  
  if (GetPM(RepSpec.f1,accnumber,tstr)==false) then begin
  end;    
  StartReportJob(USetStr(16090));
   rw = rw + 1;
   HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   Header(rw,USetStr(16099) & ": " & accnumber,1);
  EndHeader;
  SetRepCol(2,85);
  SetRepCol(3,155);
  SetRepCol(4,170);
  SetRepCol(5,410);
  SetRepCol(6,470);
  SetRepCol(7,480);
  StartFormat(15);
  OutString(0,0,USetStr(16091),false);
  OutputReportIndent(RepSpec,2);
  OutVal(1,0,RepSpec.vals0,M4Val,true);
  EndFormat;

  StartFormat(15);
  OutString(0,0,USetStr(16092),false);
  EndFormat;
  PrintTransactions(RepSpec,accnumber,IVYc,IVYc,totopunrecval,totopunreccurval);
  PrintTransactions(RepSpec,accnumber,OPYc,OPYc,totopunrecval,totopunreccurval);
  PrintTransactions(RepSpec,accnumber,PPYc,PPYc,totopunrecval,totopunreccurval);
  PrintTransactions(RepSpec,accnumber,CLOutYc,CLOutYc,totopunrecval,totopunreccurval);
  StartFormat(15);
  OutString(0,0,USetStr(16094),false);
  OutputReportIndent(RepSpec,2);
  OutVal(1,0,totopunrecval,M4Val,true);
  EndFormat;
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(16093),false);
  EndFormat;
  PrintTransactions(RepSpec,accnumber,IPYc,IPYc,totipunrecval,totipunreccurval);
  PrintTransactions(RepSpec,accnumber,CLinYc,CLinYc,totipunrecval,totipunreccurval);
  StartFormat(15);
  OutString(0,0,USetStr(16094),false);
  OutputReportIndent(RepSpec,2);
  OutVal(1,0,totipunrecval,M4Val,true);
  EndFormat;
  StartFormat(15);
  EndFormat;

  StartFormat(15);
  OutString(0,0,USetStr(16098),false);
  EndFormat;
  PrintTransactions(RepSpec,accnumber,GetIntYc(RepSpec.sStartDate),GetIntYc(RepSpec.sEndDate),totobcunrecval,totobcunreccurval);
  StartFormat(15);
  OutString(0,0,USetStr(16094),false);
  OutputReportIndent(RepSpec,2);
  OutVal(1,0,totobcunrecval,M4Val,true);
  EndFormat;
  StartFormat(15);
  EndFormat;

  StartFormat(15);
  OutString(0,0,USetStr(16095),false);
  OutputReportIndent(RepSpec,2);
  OutVal(1,0,RepSpec.vals0+totipunrecval+totopunrecval+totobcunrecval,M4Val,true);
  EndFormat;

  ObjBalr.AccNumber = accnumber;
  ObjBalr.Object = "";
  if (ReadFirstMain(ObjBalr,2,true)==false) then begin
    ObjBalr.AccNumber = accnumber;
    ObjBalr.Object = "";
  end;
  tstr = "";
  t = FindAccBalance(accnumber,"",RepSpec.sEndDate,ObjBalr,0,RepSpec.basecurncy,0,tstr,RepSpec.IncDaughter);
  StartFormat(15);
  OutString(0,0,USetStr(16096),false);
  OutputReportIndent(RepSpec,2);
  OutVal(1,0,t,M4Val,true);
  EndFormat;

  StartFormat(15);
  OutString(0,0,USetStr(16097),false);
  OutputReportIndent(RepSpec,2);
  OutVal(1,0,t-(RepSpec.vals0+totipunrecval+totopunrecval+totobcunrecval),M4Val,true);
  EndFormat;
  
  EndJob;
  return;
end;