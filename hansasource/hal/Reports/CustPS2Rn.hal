external procedure CUCreditLimit(record CUVc,Date,string,var val,var LongInt);
external procedure IVCashCUPSList(record RcVc,string,Integer);
external function Boolean HasModSO();
external function Boolean HasModSL();
external procedure PurgeTRExtYc(record PurgeTRVc,var string);
external procedure PrintCustClass(string);
external procedure CustPS_PrintAPPrepaymentAmount(string,record IVVc,var val,var val,var Boolean);
external procedure SubCashRows_IVVc(record IVVc,Boolean,var val,var val);
external function Boolean CheckTodoAcessAct(record ActVc,string);
external procedure PrintCustCourseEvents(string);
external procedure PrintCuArtSTRn(record RcVc,record CUVc,LongInt);
external procedure PrintCUQT(record CUVc,string,Integer);
external procedure PrintCUMonthBal(record CUVc);
external procedure AgreementCUPSList(record RcVc,string,Integer,Integer);
external procedure RentResCUPSList(record RcVc,string,Integer);
external procedure WSCUPSList(record RcVc,string,Integer);
external procedure SVOCUPSList(record RcVc,string,Integer);
external procedure TBBUCUPSList(record RcVc,string,Integer);
external procedure PRCUPSList(record RcVc,string,Integer);
external procedure PrintCUOR(record CUVc,string,Integer);
external procedure CQCUPSList(record RcVc,string,Integer);
external procedure PSFindPaydAmount(record IPrsVc,var val);
external procedure PrintSMSes(record CUVc,Integer);
external procedure CountPeriods(var Integer);
external function Boolean FindCustomerRelation(string,string,var record CUVc);
external function Integer GetIntYc(Date);
external function string 255 CreateInvoiceNumber(LongInt,string);
external procedure PrintChecks(record CUVc,var val,Record RcVc);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function LongInt DateDiff(Date,Date);
external procedure TRExtYc(record TRVc,var string);
external procedure BeginCurncyTotals(var Integer);
external procedure CustomersAddress(record CUVc);
external function Boolean WrapAndPrint(Integer,string,Integer);
external procedure FindFiscalYear(Date,var Date,var Date);
external procedure SumAged(Date,Integer,Integer,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val);
external procedure GetOnAccBalance(record RcVc,string,string,Boolean,Integer,var val,var val,var val,var val,var val,var val,var val,record SMVc,
                   Array string,Array val,var Integer);
external procedure GetFindCustBalance(string,LongInt,var val,var val,var val,var val,Integer,Integer,Integer,Integer,Integer,Integer,Boolean,var Boolean);
external procedure RunCOCULines(record COCUServiceVc,Boolean,Integer,Integer,Integer,Integer,Boolean,var Date,var val,var val,var val);
external procedure PrintMarketplaceSubscriptions(record CUVc);

// Add support for CredManVc
function
Integer PSPartPayments(string salescurrency,record IVVc IVp,var val prepayp,val cash,val cashb1,LongInt latedays)
BEGIN
  Integer res;
  record IPrsVc IPrsr;
  record IVVc IVr;
  record PurgeTRVc PurgeTRr;
  record TRVc TRr;
  record CLInVc CLInr;
  row CLInVc CLInrw;
  row TRVc TRrw;
  Integer i,rwcnt;
  Boolean found;
  val amnt,amntb1,bal;
  Boolean first;
  string 255 argnr;
  string 255 tstr;
  
  if (nonblank(salescurrency)) then begin
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
      bal = -IVp.Sum4 - cash;
    end else begin
      bal = IVp.Sum4 - cash;
    end;
  end else begin
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
      bal = -IVp.BaseSum4 - cashb1;
    end else begin
      bal = IVp.BaseSum4 - cashb1;
    end;
  end;
  if (cashb1!=0) then begin
    if (PocketVersion) then begin
      if (first) then begin
        StartFormat(15);
        argnr = CreateInvoiceNumber(IVp.SerNr,IVp.OfficialSerNr);
        OutString(0,"DblCustPS2",argnr,false);
        OutDate(90,0,IVp.InvDate,false);
        EndFormat;
      end;
      StartFormat(15);
      tstr = USetStr(1150);
      tstr = tstr & ":";
      tstr = tstr & IVp.SerNr;
      OutString(0,0,tstr,false);
      OutDate(90,0,IVp.TransDate,false);
      OutValBiDi(305,0,cash,M4Val,true,355);
      OutString(390,0,IVp.PayDeal,false);
      OutLongInt(430,0,IVp.LastRemndr,true);
      if (first) then begin
        if (latedays<0) then begin          
          OutString(480,0,latedays,true);
        end;  
        first = false;
      end;
      EndFormat;
      res = res + 1;
    end else begin
      StartFormat(15);
      if (first) then begin
        argnr = CreateInvoiceNumber(IVp.SerNr,IVp.OfficialSerNr);
        OutString(0,"DblCustPS2",argnr,false);
        OutDate(70,0,IVp.InvDate,false);
      end;
      res = res + 1;
      tstr = USetStr(1150);
      tstr = tstr & ":";
      tstr = tstr & IVp.SerNr;
      OutString(130,0,tstr,false);
      OutDate(220,0,IVp.TransDate,false);
      OutValBiDi(305,0,cash,M4Val,true,355);
      OutValBiDi(380,0,bal,M4Val,true,420);
      OutString(390,0,IVp.PayDeal,false);
      OutLongInt(430,0,IVp.LastRemndr,true);
      if (first) then begin
        if (latedays<0) then begin          
          OutString(480,0,latedays,true);
        end;  
        first = false;
      end;
      EndFormat;
    end;
  end;
  first = true;
  IVr.CredInv = IVp.SerNr;
  found = true;
  while (LoopKey("CredInv",IVr,1,found)) begin
    if (IVr.CredInv==IVp.SerNr) then begin
      if (IVr.Invalid!=0) then begin
        goto LPSPartPayments;
      end;
      amnt = IVr.Sum4;
      amntb1 = IVr.BaseSum4;
      if (nonblank(salescurrency)) then begin
        bal = bal - amnt;
      end else begin
        bal = bal - amntb1;
      end;
      if (PocketVersion) then begin
        if (first) then begin
          StartFormat(15);
          argnr = CreateInvoiceNumber(IVp.SerNr,IVp.OfficialSerNr);
          OutString(0,"DblCustPS2",argnr,false);
          OutDate(90,0,IVp.InvDate,false);
          EndFormat;
        end;
        StartFormat(15);
        tstr = USetStr(2433);
        tstr = tstr & ":";
        tstr = tstr & IVr.SerNr;
        OutString(0,0,tstr,false);
        OutValBiDi(305,0,amnt,M4Val,true,355);
        OutValBiDi(380,0,bal,M4Val,true,420);
        OutString(390,0,IVp.PayDeal,false);
        OutLongInt(430,0,IVp.LastRemndr,true);
        if (first) then begin
          if (latedays<0) then begin          
            OutLongInt(480,0,latedays,true);
          end;  
          first = false;
        end;
        EndFormat;
      end else begin
        StartFormat(15);
        if (first) then begin
          argnr = CreateInvoiceNumber(IVp.SerNr,IVp.OfficialSerNr);
          OutString(0,"DblCustPS2",argnr,false);
          OutDate(70,0,IVp.InvDate,false);
        end;
        tstr = USetStr(2433);
        tstr = tstr & ":";
        tstr = tstr & IVr.SerNr;
        OutString(130,0,tstr,false);
        OutDate(220,0,IVr.InvDate,false);
        OutValBiDi(305,0,amnt,M4Val,true,355);
        OutStringBiDi(309,0,IVr.CurncyCode,false,320);
        OutValBiDi(380,0,bal,M4Val,true,420);
        OutString(390,0,IVp.PayDeal,false);
        OutLongInt(430,0,IVp.LastRemndr,true);
        if (first) then begin
          if (latedays<0) then begin          
             OutLongInt(480,0,latedays,true);
           end;  
          first = false;
        end;
        EndFormat;
      end;
    end else begin
      found = false;
    end;  
LPSPartPayments:;    
  end;
  IPrsr.IVNr = IVp.SerNr;
  IPrsr.TransType = kIPrsTransTypeReceipt;
  found = true;
  while (LoopKey("IVKey",IPrsr,2,found)) begin
    if (found) then begin
      if (IPrsr.IVNr!=IVp.SerNr) then begin found = false; end;
    end;  
    if (found) then begin
      if ((IPrsr.TransType!=kIPrsTransTypeReceipt) and (IPrsr.TransType!=kIPrsTransTypeNLTransaction) and (IPrsr.TransType!=kIPrsTransTypePurgeNLTransaction) and (IPrsr.TransType!=kIPrsTransTypeCashIn)) then begin found = false; end;
    end;  
    if (found) then begin
      switch (IPrsr.TransType) begin
        case kIPrsTransTypeCashIn:
          CLInr.SerNr = IPrsr.TransNr;
          if (ReadFirstMain(CLInr,1,true)) then begin
            if (CLInr.TransDate==IPrsr.TransDate)then begin
              rwcnt = MatRowCnt(CLInr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(CLInr,i,CLInrw);
                if (CLInrw.TransNr==IVp.SerNr) then begin
                  amnt = CLInrw.Sum;
                  amntb1 = MulRateToBase1(CLInr.CurncyCode,CLInrw.Sum,CLInr.FrRate,CLInr.ToRateB1,CLInr.ToRateB2,CLInr.BaseRate1,CLInr.BaseRate2,DefaultCurRoundOff);  
                  if (nonblank(salescurrency)) then begin
                    bal = bal - amnt;
                  end else begin
                    bal = bal - amntb1;
                  end;
                  StartFormat(15);
                  if (first) then begin
                    argnr = CreateInvoiceNumber(IVp.SerNr,IVp.OfficialSerNr);
                    OutString(0,"DblCustPS2",argnr,false);
                    OutDate(70,0,IVp.InvDate,false);
                  end;
                  res = res + 1;
                  tstr = USetStr(1193) & "." & CLInr.SerNr;
                  OutString(130,0,tstr,false);
                  OutDate(220,0,IPrsr.CustDate,false);
                  OutValBiDi(305,0,amnt,M4Val,true,355);
                  OutStringBiDi(309,0,CLInr.CurncyCode,false,320);
                  OutValBiDi(380,0,bal,M4Val,true,420);
                  OutString(390,0,IVp.PayDeal,false);
                  OutLongInt(430,0,IVp.LastRemndr,true);
                  if (first) then begin
                    if (latedays<0) then begin          
                      OutLongInt(480,0,latedays,true);
                    end;  
                    first = false;
                  end;
                  EndFormat;
                end;
            end;  
          end;
        end;
        case kIPrsTransTypePurgeNLTransaction:
          PurgeTRr.Number = IPrsr.TransNr;
          PurgeTRr.IntYc = GetIntYc(IPrsr.TransDate);
          PurgeTRr.TransRow = IPrsr.TransRow;
          if (ReadFirstMain(PurgeTRr,3,true)) then begin
            if (PurgeTRr.TransDate==IPrsr.TransDate)then begin
              if (PurgeTRr.SerNr==IVp.SerNr) then begin
                amnt = PurgeTRr.CurCredVal - PurgeTRr.CurDebVal;
                amntb1 = PurgeTRr.CredVal - PurgeTRr.DebVal;                      
                if ((PurgeTRr.CurDebVal==0) and (PurgeTRr.CurCredVal==0)) then begin
                  amnt = PurgeTRr.CredVal - PurgeTRr.DebVal;                      
                end;
                if (nonblank(salescurrency)) then begin
                  bal = bal - amnt;
                end else begin
                  bal = bal - amntb1;
                end;
                StartFormat(15);
                if (first) then begin
                  argnr = CreateInvoiceNumber(IVp.SerNr,IVp.OfficialSerNr);
                  OutString(0,"DblCustPS2",argnr,false);
                  OutDate(70,0,IVp.InvDate,false);
                end;
                res = res + 1;
                tstr = USetStr(1151);
                tstr = tstr & ":";
                PurgeTRExtYc(PurgeTRr,argnr);                      
                tstr = tstr & argnr;
                OutString(130,0,tstr,false);
                OutDate(220,0,IPrsr.CustDate,false);
                OutValBiDi(305,0,amnt,M4Val,true,355);
                OutStringBiDi(309,0,PurgeTRr.Curncy,false,320);
                OutValBiDi(380,0,bal,M4Val,true,420);
                OutString(390,0,IVp.PayDeal,false);
                OutLongInt(430,0,IVp.LastRemndr,true);
                if (first) then begin
                  if (latedays<0) then begin          
                    OutLongInt(480,0,latedays,true);
                  end;  
                  first = false;
                end;
                EndFormat;
            end;
          end;
        end;
        case kIPrsTransTypeNLTransaction:
          TRr.Number = IPrsr.TransNr;
          TRr.IntYc = GetIntYc(IPrsr.TransDate);
          if (ReadFirstMain(TRr,2,true)) then begin
            if (TRr.TransDate==IPrsr.TransDate)then begin
              rwcnt = MatRowCnt(TRr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(TRr,i,TRrw);
                if (TRrw.ovst==0) then begin
                  if (TRrw.stp==1) then begin
                    if (TRrw.SerNr==IVp.SerNr) then begin
                      amnt = TRrw.CurCredVal - TRrw.CurDebVal;
                      amntb1 = TRrw.CredVal - TRrw.DebVal;                      
                      if ((TRrw.CurDebVal==0) and (TRrw.CurCredVal==0)) then begin
                        amnt = TRrw.CredVal - TRrw.DebVal;                      
                      end;
                      if (nonblank(salescurrency)) then begin
                        bal = bal - amnt;
                      end else begin
                        bal = bal - amntb1;
                      end;
                      StartFormat(15);
                      if (first) then begin
                        argnr = CreateInvoiceNumber(IVp.SerNr,IVp.OfficialSerNr);
                        OutString(0,"DblCustPS2",argnr,false);
                        OutDate(70,0,IVp.InvDate,false);
                      end;
                      res = res + 1;
                      tstr = USetStr(1151);
                      tstr = tstr & ":";
                      TRExtYc(TRr,argnr);                      
                      tstr = tstr & argnr;
                      OutString(130,0,tstr,false);
                      OutDate(220,0,IPrsr.CustDate,false);
                      OutValBiDi(305,0,amnt,M4Val,true,355);
                      OutStringBiDi(309,0,TRrw.Curncy,false,320);
                      OutValBiDi(380,0,bal,M4Val,true,420);
                      OutString(390,0,IVp.PayDeal,false);
                      OutLongInt(430,0,IVp.LastRemndr,true);
                      if (first) then begin
                        if (latedays<0) then begin          
                          OutLongInt(480,0,latedays,true);
                        end;  
                        first = false;
                      end;
                      EndFormat;
                  end;
                end;
              end;
            end;  
          end;
        end;
      case kIPrsTransTypeReceipt:
        PSFindPaydAmount(IPrsr,amnt);        
        amntb1 = MulRateToBase1(IVp.CurncyCode,amnt,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
        if (nonblank(salescurrency)) then begin
          bal = bal - amnt;
        end else begin
          bal = bal - amntb1;
        end;
        if (PocketVersion) then begin
          if (first) then begin
            StartFormat(15);
            argnr = CreateInvoiceNumber(IVp.SerNr,IVp.OfficialSerNr);
            OutString(0,"DblCustPS2",argnr,false);
            OutDate(90,0,IVp.InvDate,false);
            EndFormat;
          end;
          StartFormat(15);
          tstr = USetStr(1151);
          tstr = tstr & ":";
          tstr = tstr & IPrsr.TransNr;
          OutString(0,0,tstr,false);
          OutDate(90,0,IPrsr.CustDate,false);
          OutValBiDi(305,0,amnt,M4Val,true,355);
          OutString(390,0,IVp.PayDeal,false);
          OutLongInt(430,0,IVp.LastRemndr,true);
          if (first) then begin
            if (latedays<0) then begin          
              OutLongInt(480,0,latedays,true);
            end;  
            first = false;
          end;
          EndFormat;
          res = res + 1;
        end else begin
          StartFormat(15);
          if (first) then begin
            argnr = CreateInvoiceNumber(IVp.SerNr,IVp.OfficialSerNr);
            OutString(0,"DblCustPS2",argnr,false);
            OutDate(70,0,IVp.InvDate,false);
          end;
          res = res + 1;
          tstr = USetStr(1151);
          tstr = tstr & ":";
          tstr = tstr & IPrsr.TransNr;
          OutString(130,0,tstr,false);
          OutDate(220,0,IPrsr.CustDate,false);
          OutValBiDi(305,0,amnt,M4Val,true,355);
          OutStringBiDi(309,0,IVp.CurncyCode,false,320);
          OutValBiDi(380,0,bal,M4Val,true,420);
          OutString(390,0,IVp.PayDeal,false);
          OutLongInt(430,0,IVp.LastRemndr,true);
          if (first) then begin
            if (latedays<0) then begin          
              OutString(480,0,latedays,true);
            end;  
            first = false;
          end;
          EndFormat;
        end;
      end;
    end;
  end;  
  CustPS_PrintAPPrepaymentAmount(salescurrency,IVp,bal,prepayp,first);
  PSPartPayments = res;
  RETURN;
END;

function string 255 FindDealer(string code)
BEGIN
  record CUToCUVc CUToCUr;
  
  CUToCUr.ToCU = code;
  if (ReadFirstKey("ToCU",CUToCUr,1,true)) then begin
  end;
  FindDealer = CUToCUr.FromCU;
  RETURN;
END;

procedure PrintAgedLine(Integer nrofper,Integer per,Integer p1,Integer p2,val s1,val s2)
BEGIN
  string 255 tstr2,tstr3;
  
  if (nrofper==per) then begin
    if (s1!=0) then begin
      tstr2 = p1 + 1;
      tstr2 = tstr2 & " - ";
      tstr2 = tstr2 & p2;
      StartFormat(15);
      OutString(270,0,tstr2,false);
      OutValBiDi(470,0,s1,M4Val,true,510);
      EndFormat;
    end;
    if (s2!=0) then begin
      tstr2 = p2 + 1;
      tstr2 = tstr2 & " - ";
      StartFormat(15);
      OutString(270,0,tstr2,false);
      OutValBiDi(470,0,s2,M4Val,true,510);
      EndFormat;
    end;
  end else begin
    if (nrofper>per) then begin
      if (s1!=0) then begin
        tstr2 = p1 + 1;
        tstr2 = tstr2 & " - ";
        tstr2 = tstr2 & p2;
        StartFormat(15);
        OutString(270,0,tstr2,false);
        OutValBiDi(470,0,s1,M4Val,true,510);
        EndFormat;
      end;
    end;
  end;
  RETURN;
END;

procedure PSListInvoices(record RcVc RepSpec,record CUVc CUp,var val pstotduep,var val pstotopenp,Integer printopen,Integer nrofinv,Boolean printf)
BEGIN
  record IVVc IVr;
  record ARVc ARr;
  Boolean found,testf;
  val rs;
  Boolean inAR;
  string 255 tstr,argnr;
  LongInt latedays;
  Integer lines;
  Date sd,ed;
  val sum,sum2,sumincur,sumbooked,sumnow,sumdiff,rval,rsb1,bal;
  val sact,s0,s1,s16,s31,s4,s5,s6,s7;
  val prepay;
  val totar,totdue,tot;
  record SMVc CurTotalsr;
  Integer lastpaidnr,keynr;
  Integer nrofper;
  val cashrs,cashrsb1;
  Array string 10 debaccs;
  Array val debbal;
  Integer debcnt;
  
  totar = 0;
  totdue = 0;
  if (printf) then begin
    if (printopen==0) then begin
      goto LPSListInvoices;
    end;  
    StartFormat(15);
    OutString(0,0,USetStr(6674),false);
    EndFormat;
    Black_Divider(0,1);
    StartFormat(15);
    OutString(0,0,USetStr(2706),false);
    OutString(70,0,USetStr(2707),false);
    OutString(130,0,USetStr(5042),false);
    OutString(220,0,USetStr(2708),false);
    OutStringAdjustBiDi(305,0,USetStr(2709),true,M4Val,355);
    OutStringAdjustBiDi(380,0,USetStr(18370),true,M4Val,420);
    OutString(390,0,USetStr(2710),false);
    if ((ProgramType!=typFirstOffice) and 
        (ProgramType!=typFirstOfficeSmall) and 
        (ProgramType!=typFirstOfficePro) and 
        IsBooks==false) then begin
      OutString(445,0,USetStr(2711),true);
    end;      
    OutStringAdjustBiDi(480,0,USetStr(2712),true,M4Val,530);
    EndFormat;
    Gray_Divider(0,1);
  end;
  keynr = 1;
  IVr.CustCode = CUp.Code;
  found = true;
  while (LoopBackKey("CustDate",IVr,keynr,found)) begin
    if (found) then begin
      if (IVr.CustCode!=CUp.Code) then begin found = false; end;
    end;  
    if (found) then begin
      testf = true;
      if (IVr.Invalid!=0) then begin
        testf = false;
      end;
      if (IVr.OKFlag==0) then begin
        testf = false;
      end;
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        if (IVr.CredInv>0) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        latedays = 0;
        inAR = false;
        ARr.InvoiceNr = IVr.SerNr;
        if (ReadFirstMain(ARr,1,true)) then begin inAR = true; end;
        if (inAR) then begin
        end else begin
          if (lastpaidnr<nrofinv) then begin
            if (printf) then begin
              SubCashRows_IVVc(IVr,false,cashrs,cashrsb1);
              prepay = blankval;
              if (IVr.InvType!=kInvoiceTypeCash and IVr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) and (IVr.Sum4>-cashrs) then begin
                lines = PSPartPayments(CUp.CurncyCode,IVr,prepay,cashrs,cashrsb1,latedays);
              end else begin
                StartFormat(15);
                argnr = CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr);
                OutString(0,"DblCustPS2",argnr,false);
                OutDate(70,0,IVr.InvDate,false);
                OutDate(220,0,IVr.InvDate,false);
                OutValBiDi(305,0,IVr.Sum4,M4Val,true,355);
                OutStringBiDi(309,0,IVr.CurncyCode,false,320);
                OutValBiDi(380,0,0.00,M4Val,true,420);
//                OutVal(380,0,IVr.BaseSum4,M4Val,true);
                OutString(390,0,IVr.PayDeal,false);
                OutLongInt(430,0,IVr.LastRemndr,true);
                EndFormat;            
              end;
              lastpaidnr = lastpaidnr + 1;
            end;
          end;
        end;
      end;
    end;
  end;
  
  ARr.CustCode = CUp.Code;
  found = true;
  while (LoopBackKey("CustCode",ARr,1,found)) begin
    if (ARr.CustCode!=CUp.Code) then begin
      found = false;
    end;
    if (found) then begin
      IVr.SerNr = ARr.InvoiceNr;
      if (ReadFirstMain(IVr,1,true)) then begin
        if (RepSpec.ArtMode!=0) then begin
          if (nonblankdate(RepSpec.d1)) then begin
            if (IVr.TransDate<RepSpec.d1) then begin
              goto LSKIPIV;
            end;
          end;
        end;      
        if (IVr.Invalid!=0) then begin
          goto LSKIPIV;
        end;
        if (printf) then begin
          SubCashRows_IVVc(IVr,true,cashrs,cashrsb1);
          if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
            if (IVr.CredInv<0) then begin
              IVr.Sum4 = -IVr.Sum4;
            end;
          end;
        end;
        rs = MulRateToBase1(IVr.CurncyCode,ARr.RVal,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
        totar = totar + rs;
        latedays = DateDiff(ARr.DueDate,CurrentDate);
        if (latedays<0) then begin
          totdue = totdue + rs;
        end;  
        if (nonblank(CUp.CurncyCode)) then begin
          bal = ARr.RVal;
        end else begin
          bal = rs;
        end;
        SumAged(CurrentDate,latedays,0,rs,sact,s0,s1,s16,s31,s4,s5,s6,s7);
        prepay = blankval;
        prepay = blankval;
        if (printf) then begin
          if (PocketVersion) then begin          
            StartFormat(15);
            tstr = CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr);
            OutString(0,"DblCustPS2",tstr,false);
            OutDate(90,0,IVr.InvDate,false);
            OutValBiDi(305,0,rs,M4Val,true,355);
            OutString(340,0,IVr.PayDeal,false);
            if (latedays<0) then begin          
              OutStringAdjustBiDi(480,0,latedays,true,M4Val,530);
            end;  
            EndFormat;
          end else begin
            if (IVr.Sum4!=ARr.RVal) then begin
              lines = PSPartPayments(CUp.CurncyCode,IVr,prepay,0,0,latedays);
            end else begin
              StartFormat(15);
              tstr = CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr);
              OutString(0,"DblCustPS2",tstr,false);
              OutDate(70,0,IVr.InvDate,false);
              if (IVr.InvType==kInvoiceTypeInterest) then begin
                OutString(140,0,USetStr(2731),false);          
              end;
              OutString(220,0,"...........",false);
              OutValBiDi(305,0,ARr.RVal,M4Val,true,355);
              OutStringBiDi(309,0,IVr.CurncyCode,false,320);
              OutValBiDi(380,0,bal,M4Val,true,420);
              OutString(390,0,IVr.PayDeal,false);
              OutLongInt(430,0,IVr.LastRemndr,true);
              if (latedays<0) then begin          
                OutStringAdjustBiDi(480,0,latedays,true,M4Val,530);
              end;  
              EndFormat;
            end;
          end;
          if (cashrs!=IVr.Sum4) then begin
            lines = PSPartPayments(CUp.CurncyCode,IVr,prepay,IVr.Sum4-cashrs,IVr.BaseSum4-cashrsb1,latedays);
          end;
        end;
LSKIPIV:;
      end;
    end;
  end;
  RepSpec.flags[29] = 0;
  GetOnAccBalance(RepSpec,CUp.Code,CUp.CurncyCode,false,1,sum,sum2,rval,sumbooked,sumnow,sumincur,sumdiff,CurTotalsr,debaccs,debbal,debcnt);
  if (sum!=0) then begin
    totar = totar + sum;
    if (printf) then begin
      StartFormat(15);
      OutString(220,0,USetStr(2497),false);
      OutValBiDi(305,0,sum,M4Val,true,355);
      EndFormat;
    end;
  end;
  if (printf) then begin
    StartFormat(10);
    EndFormat;
    Black_Divider(270,480);
    if (RepSpec.repname=="CustPS2Rn") then begin  
      LongInt p1,p2;
      record AgedBlock Agedb;
      string 255 tstr1,tstr2,tstr3;
      
      CountPeriods(nrofper);
      BlockLoad(Agedb);
      p1 = Agedb.Per1;
      p2 = Agedb.Per2;
      if (p1==-1) then begin nrofper = nrofper + 1; p1 = 15; end;
      if (p2==-1) then begin nrofper = nrofper + 1; p2 = 30; end;
/*
      tstr1 = "0 - ";
      tstr2 = p1;
      tstr1 = tstr1 & tstr2;
*/      
      tstr1 = USetStr(2521);
      StartFormat(15);
      OutString(270,0,tstr1,false);
      OutValBiDi(470,0,s0,M4Val,true,510);
      EndFormat;
      
      PrintAgedLine(nrofper,2,-1,p1,s1,s16);
      PrintAgedLine(nrofper,2,p1,p2,s16,s31);
      PrintAgedLine(nrofper,3,Agedb.Per2,Agedb.Per3,s31,s4);
      PrintAgedLine(nrofper,4,Agedb.Per3,Agedb.Per4,s4,s5);
      PrintAgedLine(nrofper,5,Agedb.Per4,Agedb.Per5,s6,s7);
      PrintAgedLine(nrofper,6,Agedb.Per5,Agedb.Per6,s6,s7);      
      
    end;
    if (HasModSL or BuildProductCode!="StandardCRM") then begin
      StartFormat(15);
      OutString(270,0,USetStr(2713),false);
      OutValBiDi(470,0,totar,M4Val,true,510);
      EndFormat;
      StartFormat(15);
      OutString(270,0,USetStr(2714),false);
      OutValBiDi(470,0,totdue,M4Val,true,510);
      EndFormat;
    end;
    pstotduep = pstotduep + totdue;
    pstotopenp = pstotopenp + totar;
    totdue = blankval;
    totar = blankval;
  end;
  if (RepSpec.flags[25]==1) then begin  
    PrintChecks(CUp,totar,RepSpec);
  end;  
  pstotduep = pstotduep + totar;
  pstotopenp = pstotopenp + totar;
  if (pstotduep<0) then begin pstotduep = 0; end;
LPSListInvoices:;
  Black_Divider(0,1);
  StartFormat(15);
  EndFormat;
  return;
end;

global
procedure ContactCU(string custcode)
begin
  record ContactRelVc ContactRelr;
  record CUVc ContactCUr;
  Boolean found,testf,prntf,firstf;

  firstf = true;
  ContactRelr.CustCode = custcode;
  found = true;
  while (LoopKey("CompKey",ContactRelr,1,found)) begin
    if (ContactRelr.CustCode!=custcode) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (FindCustomerRelation(ContactRelr.CustCode,ContactRelr.ContactName,ContactCUr)==false) then begin//needed at all?
        testf = false;
      end;
      if (ContactCUr.blockedFlag!=0) then begin testf = false; end;
      if (ContactRelr.Invalid!=0) then begin testf = false; end;
      if (testf) then begin
        if (firstf) then begin
          StartFormat(15);
           OutString(0,0,USetStr(2736),false);
          EndFormat;
          Black_Divider(0,1);
          firstf = false;
        end;
        StartFormat(15);
        OutStringID(30,"DblContCUVc",ContactCUr.Name,false,ContactCUr.Code);
        OutString(220,0,ContactCUr.Phone,false);
        OutString(350,0,ContactCUr.Mobile,false);
        EndFormat;
        prntf = true;
      end;
    end;
  end;
  if (firstf==false) then begin
    Black_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;
  return;
end;

global
procedure CUAsContact(string custcode)
begin
  record ContactRelVc ContactRelr;
  record CUVc MainCUr;
  Boolean found,testf,prntf,firstf;

  firstf = true;
  ContactRelr.ContactCode = custcode;
  found = true;
  while (LoopKey("ContactCode",ContactRelr,1,found)) begin
    if (ContactRelr.ContactCode!=custcode) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (FindCustomerRelation(ContactRelr.CustCode,ContactRelr.ContactName,MainCUr)==false) then begin//needed at all?
        testf = false;
      end;
      if (MainCUr.blockedFlag!=0) then begin testf = false; end;
      if (ContactRelr.Invalid!=0) then begin testf = false; end;
      if (testf) then begin
        MainCUr.Code = ContactRelr.CustCode;
        if (ReadFirstMain(MainCUr,1,true)) then begin
          if (firstf) then begin
            StartFormat(15);
             OutString(0,0,USetStr(2698),false);
            EndFormat;
            Black_Divider(0,1);
            firstf = false;
          end;
          StartFormat(15);
          OutStringID(30,"DblContCUVc",MainCUr.Name,false,MainCUr.Code);
          OutString(220,0,MainCUr.Phone,false);
          OutString(350,0,MainCUr.Mobile,false);
          EndFormat;
          prntf = true;
        end;
      end;
    end;
  end;
  if (firstf==false) then begin
    Black_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;
  return;
end;

procedure RepCO(record RcVc RepSpec,record COVc COr)
BEGIN
  Integer i,rwcnt;
  row COVc COrw;
  val s,q;
  string 255 tstr;
  
  tstr = COr.SerNr;
  if (COr.ChildSerNr>0) then begin
    tstr = tstr & "." & COr.ChildSerNr;
  end;
  StartFormat(15);
  OutStringID(0,"DblCOVc",tstr,false,COr.ChildSerNr);
  OutDate(70,0,COr.CODate,false);
  OutVal(200,0,COr.Sum1,M4Val,true);
  OutString(210,0,"" & COr.startDate & "-" & COr.endDate,false);
  OutString(350,0,COr.InvComment,false);
  EndFormat;
  if (RepSpec.ArtMode==1) then begin
    rwcnt = MatRowCnt(COr);
    for (i = 0 ; i<rwcnt ;i=i+1) begin
      MatRowGet(COr,i,COrw);
      StartFormat(15);
      OutString(50,0,COrw.ArtCode,false);
      OutVal(150,0,COrw.Quant,M4Qty,true);
      OutVal(250,0,COrw.Sum,M4Val,true);
      OutString(350,0,COrw.Spec,false);
      EndFormat;
      q = q + COrw.Quant;
      s = s + COrw.Sum;
    end;
    Gray_Divider(50,1);
    StartFormat(15);
    OutString(50,0,USetStr(13137),false);
    OutVal(250,0,q,M4Qty,true);
    OutVal(350,0,s,M4Val,true);
    EndFormat;
    StartFormat(10);
    EndFormat;
  end;
  RETURN;
END;

procedure RepCOCU(record RcVc RepSpec,record COCUServiceVc COCUServicer)
BEGIN
  val tiv,tio,tip;
  date validuntil; 
  
  StartFormat(15);
  OutLongInt(0,"DblCOCUServiceVc",COCUServicer.SerNr,false);
  OutDate(70,0,COCUServicer.CODate,false);
//  OutVal(200,0,COCUServicer.Sum1,M4Val,true);
  OutString(210,0,"" & COCUServicer.startDate & "-" & COCUServicer.endDate,false);
  OutString(350,0,COCUServicer.InvComment,false);
  EndFormat;
  if (RepSpec.ArtMode==1) then begin
/*
    rwcnt = MatRowCnt(COCUServicer);
    for (i = 0 ; i<rwcnt ;i=i+1) begin
      MatRowGet(COCUServicer,i,COCUServicerw);
      StartFormat(15);
      OutString(50,0,COCUServicerw.ArtCode,false);
      OutVal(150,0,COCUServicerw.Quant,M4Qty,true);
      OutVal(250,0,COCUServicerw.Sum,M4Val,true);
      OutString(350,0,COCUServicerw.Spec,false);
      EndFormat;
      q = q + COCUServicerw.Quant;
      s = s + COCUServicerw.Sum;
    end;
    Gray_Divider(50,1);
    StartFormat(15);
    OutString(50,0,USetStr(13137),false);
    OutVal(250,0,q,M4Qty,true);
    OutVal(350,0,s,M4Val,true);
    EndFormat;
    StartFormat(10);
    EndFormat;
*/
  end;
  if (CurrentCompany==63) then begin  //Hansaworld UK Company only
    SetRepCol(2,60);
    SetRepCol(3,160);
    SetRepCol(4,320);
    SetRepCol(5,400);
    SetRepCol(6,250);
    SetRepCol(7,155);
    SetRepCol(8,340);
    SetRepCol(9,410);
    RunCOCULines(COCUServicer,true,1,RepSpec.basecurncy,RepSpec.IncDaughter,0,false,validuntil,tiv,tio,tip);
    Gray_Divider(0,1);
    StartFormat(10);
    EndFormat;
  end;
  RETURN;
END;

procedure COCUPSList(record RcVc RepSpec,string custcode,Integer notokd,Integer nrofco,string ContractClass)
BEGIN
  record COCUServiceVc COCUServicer;
  record COVc COr;
  Boolean found;
  Integer count;
  Boolean testf,firstf;

  firstf = true;
  COr.CustCode = custcode;
  found = true;
  count = 0;
  while (LoopBackKey("CustCode",COr,1,found)) begin
    if (COr.CustCode!=custcode) then begin found = false; end;
    if (nrofco!=-1) then begin 
      if (count>=nrofco) then begin found = false; end;
    end;  
    if (found) then begin
      testf = true;
      if (COr.OKFlag==0) then begin
        if (notokd==0) then begin testf = false; end;
      end;        
      if (nonblank(ContractClass)) then begin
        if (COr.ContractClass!=ContractClass) then begin testf = false; end;
      end;
      if (testf) then begin
        if (firstf) then begin
          StartFormat(15);
          OutString(0,0,USetStr(2751),false);
          EndFormat;
          Black_Divider(0,1);
          StartFormat(15);
          OutString(0,0,USetStr(2741),false);
          OutString(70,0,USetStr(6682),false);
          OutString(200,0,USetStr(2328),true);
          OutString(210,0,USetStr(3013),false);
          OutString(350,0,USetStr(6685),false);
          EndFormat;
          Gray_Divider(0,1);
          firstf = false;
        end;      
        RepCO(RepSpec,COr);
        count = count + 1;
      end;
    end;
  end;
  if (firstf==false) then begin
    Black_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;

  firstf = true;
  COCUServicer.CustCode = custcode;
  found = true;
  count = 0;
  while (LoopBackKey("CustCode",COCUServicer,1,found)) begin
    if (COCUServicer.CustCode!=custcode) then begin found = false; end;
    if (nrofco!=-1) then begin 
      if (count>=nrofco) then begin found = false; end;
    end;  
    if (found) then begin
      testf = true;
      if (COCUServicer.OKFlag==0) then begin
        if (notokd==0) then begin testf = false; end;
      end;        
      if (testf) then begin
        if (firstf) then begin
          StartFormat(15);
          OutString(0,0,USetStr(2760),false);
          EndFormat;
          Black_Divider(0,1);
          StartFormat(15);
          OutString(0,0,USetStr(2741),false);
          OutString(70,0,USetStr(6682),false);
          OutString(200,0,USetStr(2328),true);
          OutString(210,0,USetStr(3013),false);
          OutString(350,0,USetStr(6685),false);
          EndFormat;
          Gray_Divider(0,1);
          firstf = false;
        end;      
        RepCOCU(RepSpec,COCUServicer);
        count = count + 1;
      end;
    end;
  end;
  if (firstf==false) then begin
    Black_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;
  RETURN;
END;

procedure RepRentQT(record RcVc RepSpec,record RentQTVc RentQTr)
BEGIN
  Integer i,rwcnt;
  row RentQTVc RentQTrw;
  
  StartFormat(15);
  OutLongInt(0,"DblRentQT",RentQTr.SerNr,false);
  OutDate(80,0,RentQTr.TransDate,false);
  OutDate(150,0,RentQTr.startDate,false);
  OutDate(220,0,RentQTr.endDate,false);
  OutString(290,0,RentQTr.InvComment,false);
//  OutValBiDi(470,0,RentQTr.Total,M4Val,true,510); // No such value yet..
  EndFormat;
  if (RepSpec.ArtMode==1) then begin
    rwcnt = MatRowCnt(RentQTr);
    for (i = 0 ; i<rwcnt ;i=i+1) begin
      MatRowGet(RentQTr,i,RentQTrw);
      StartFormat(15);
      OutString(50,0,RentQTrw.ArtCode,false);
      OutVal(150,0,RentQTrw.Quant,M4Qty,true);
      OutVal(250,0,RentQTrw.Sum,M4Val,true);
      OutString(350,0,RentQTrw.Spec,false);
      EndFormat;
    end;
    StartFormat(10);
    EndFormat;
  end;
  RETURN;
END;

procedure RentQTCUPSList(record RcVc RepSpec,string custcode,Integer inclrjctd,Integer nrofco)
BEGIN
  record RentQTVc RentQTr;
  Boolean found;
  Integer count;
  Boolean testf,firstf;

  firstf = true;
  RentQTr.CustCode = custcode;
  found = true;
  while (LoopBackKey("CustCode",RentQTr,1,found)) begin
    if (RentQTr.CustCode!=custcode) then begin found = false; end;
    if (nrofco!=-1) then begin 
      if (count>=nrofco) then begin found = false; end;
    end;  
    if (found) then begin
      testf = true;
      if (RentQTr.Rejected==1) then begin
        if (inclrjctd==0) then begin testf = false; end;
      end;        
      if (testf) then begin
        if (firstf) then begin
          StartFormat(15);
          OutString(0,0,USetStr(5557),false);
          OutString(80,0,USetStr(6682),false);
          OutString(150,0,USetStr(12876),false);
          OutString(220,0,USetStr(12877),false);
          OutString(290,0,USetStr(6685),false);
          EndFormat;
          Gray_Divider(0,1);
          firstf = false;
        end;      
        RepRentQT(RepSpec,RentQTr);
      end;
    end;
  end;
  if (firstf==false) then begin
    Gray_Divider(0,1);
  end;
  RETURN;
END;

procedure PrintFirstLineOfNote(record ActVc Actr)
begin
  record NotepadVc Noter;
  record RLinkVc RLr;
  Integer notenr;
  string 255 tstr;

  notenr = 1;
  if (ReadRecordLink(Actr,notenr,Noter,RLr)) then begin
  
    if (LineTextCnt(Noter)>0) then begin
      tstr = LineTextGet(Noter,0);
      StartFormat(15);
      OutString(80,0,"Note",false); //USetStr(6675)
      OutString(140,0,tstr,false);
      EndFormat;
    end;
  end;
  return;
end;

procedure RepAct(record RcVc RepSpec,record ActVc Actr,Integer sortord)
BEGIN
  Integer i,rwcnt;
  row ActVc Actrw;

  if (sortord==0) then begin// pr. customer 
    StartFormat(15);
//     OutLongInt(0,"DblActVc",Actr.SerNr,false);
     if (Actr.OKFlag==0) then begin 
       OutString(0,0,"",false);
     end else begin
       OutString(0,0,USetStr(10115),false);
     end;
     OutStringID(0,"DblActRec",Actr.TransDate,false,Actr.SerNr);//DblActRec
     OutString(70,0,Actr.ActType,false);
     OutStringID(120,"DblPersAct",Actr.MainPersons,false,Actr.CUCode);//DblPersAct
     OutString(180,0,Actr.Contact,false);
     if (WrapAndPrint(300,Actr.Comment,60)) then begin
       EndFormat;
     end;     
    if (RepSpec.ArtMode==1) then begin
      rwcnt = MatRowCnt(Actr);
      for (i=0; i<rwcnt ;i=i+1) begin
        MatRowGet(Actr,i,Actrw);
        StartFormat(15);
        OutString(20,0,Actrw.TextCode,false);
        if (WrapAndPrint(80,Actrw.Text,130)) then begin
          EndFormat;
        end;     
      end;
      PrintFirstLineOfNote(Actr);
    end;
  end;
  if (sortord==1) then begin// pr. person 
    StartFormat(15);
//     OutLongInt(0,"DblActRec",Actr.SerNr,false);
     if (Actr.OKFlag==0) then begin 
       OutString(0,0,"",false);
     end else begin
       OutString(0,0,USetStr(10115),false);
     end;
     OutStringID(50,"DblActRec",Actr.TransDate,false,Actr.SerNr);//DblActRec
     OutString(120,0,Actr.ActType,false);
     OutString(160,"DblCustAct",Actr.CUCode,false);//DblCustAct
     OutString(180,0,Actr.Contact,false);//DblCustAct
     if (WrapAndPrint(340,Actr.Comment,28)) then begin
       EndFormat;
     end;     
//    EndFormat; // Wrap function will do this if neccesary
    if (RepSpec.ArtMode==1) then begin
      rwcnt = MatRowCnt(Actr);
      for (i = 0 ; i<rwcnt ;i=i+1) begin
        MatRowGet(Actr,i,Actrw);
        StartFormat(15);
        OutString(80,0,Actrw.TextCode,false);
        if (WrapAndPrint(140,Actrw.Text,70)) then begin
          EndFormat;
        end;     
//        EndFormat; // Wrap function will do this if neccesary
      end;
      PrintFirstLineOfNote(Actr);
    end;
  end;
  RETURN;
END;

function Integer NrOfActivitiesOfType(string custcode,string acttype)
begin
  Integer res;
  Boolean found;
  record ActVc Actr;
  
  Actr.CUCode = custcode;
  Actr.ActType = acttype;
  found = true;
  while (LoopKey("CUCodeActType",Actr,2,found)) begin
    if (Actr.CUCode!=custcode) then begin found = false; end;
    if (Actr.ActType!=acttype) then begin found = false; end;
    if (found) then begin
       if (Actr.Invalid==0) then begin
         res = res + 1;
       end;
    end;
  end;
  NrOfActivitiesOfType = res;
  return;
end;

procedure PrintActivityClasses(string acttypegrcode,string comment,string custcode,var Boolean firstf)
begin
  record ActTypeVc ActTyper;
  Boolean found;
  record ActVc Actr;
  Integer noclass;

  if (blank(acttypegrcode)) then begin
//    noclass = NrOfActivitiesOfType(custcode,"");
  end;
  ResetLoop(ActTyper);
  found = true;
  ActTyper.ActTypeGr = acttypegrcode;
  while (LoopKey("ActTypeGr",ActTyper,1,found)) begin
    if (ActTyper.ActTypeGr!=acttypegrcode) then begin
      found = false;
    end;
    if (found) then begin
      Actr.CUCode = custcode;
      Actr.ActType = ActTyper.Code;
      if (ReadFirstKey("CUCodeActType",Actr,2,true)) then begin
//first one can be Invlaidated...      
        if (firstf) then begin
          StartFormat(15);
          OutString(0,0,USetStr(11682),false);
          EndFormat;
          Black_Divider(0,1);
          firstf = false;
        end;
        noclass = noclass + NrOfActivitiesOfType(custcode,ActTyper.Code);
      end;
    end;  
  end;
  if (blank(acttypegrcode)) then begin
    noclass = noclass + NrOfActivitiesOfType(custcode,"");
  end;
  if (noclass!=0) then begin
    StartFormat(15);
    if (blank(acttypegrcode)) then begin
      OutStringID(50,"DblActClassCUPS",USetStr(11685),false,custcode);
    end else begin
      OutStringID(50,"DblActClassCUPS",acttypegrcode,false,custcode);
    end;
    OutString(150,0,comment,false);
    OutString(350,0,noclass,false);
    EndFormat;
  end;
  return;
end;
        
global
procedure ActCUPSList(var record RcVc RepSpec,string custcode,Integer nrofact,Integer notokd,string excludeacttypes,string prcode,Integer showactclas)
BEGIN
  record UserVc Userr;
  Boolean TrHs,found;
  Boolean testf;
  record ActVc Actr;
  record ActTypeGrVc ActTypeGrr;
  Integer count;
  Boolean firstf;
  string 200 key;

  if (showactclas!=0) then begin  
    firstf = true;
    PrintActivityClasses("",USetStr(11684),custcode,firstf);

    TrHs = true;
    ActTypeGrr.Code = "";
    while (LoopMain(ActTypeGrr,1,TrHs)) begin
      if (TrHs) then begin
        PrintActivityClasses(ActTypeGrr.Code,ActTypeGrr.Comment,custcode,firstf);
      end;
    end;
  end else begin
    count = -1;
    Actr.CUCode = custcode;
//  Actr.TransDate = CurrentDate;
    RepSpec.ArtMode = 1;
    RepSpec.flags[1] = 1;
    RepSpec.flags[2] = notokd;
    firstf = true;
    ResetLoop(Actr);
    TrHs = true;
    while (LoopBackKey("CUCode",Actr,1,TrHs)) begin//CUCodeActType
      if (TrHs) then begin
        if (Actr.CUCode!=custcode) then begin TrHs = false; end;
      end;  
      if (nrofact!=-1) and (count!=-1) then begin  
        if (count>=nrofact) then begin
          TrHs = false;
        end;  
      end;  
      if (TrHs) then begin
        testf = true;
        if (testf) then begin
          if (Actr.OKFlag==0) then begin
            if (RepSpec.flags[2]==0) then  begin
              testf = false;
            end;
          end;
        end;      
        if (nonblank(prcode)) then begin
          if (prcode!=Actr.PRCode) then begin testf = false; end;
        end;
        if ((nonblank(Actr.ActType)) and (nonblank(excludeacttypes))) then begin
          if (SetInSet(Actr.ActType,excludeacttypes)) then begin testf = false; end;
        end;
        if (Actr.Invalid!=0) then begin testf = false; end;
        if (testf) then begin
//          testf = CheckTodoAcessAct(Actr,CurrentUser);
        end;
        if (testf) then begin
          if (Actr.OKFlag!=0) then begin
            count = count + 1;
          end;  
          if (firstf) then begin
            if (Actr.OKFlag!=0) then begin
              count = count + 1;
            end;
            StartFormat(15);
            OutString(0,0,USetStr(6678),false);
            EndFormat;
            Black_Divider(0,1);
            if (nonblank(prcode)) then begin
              Gray_Divider(0,1);
              StartFormat(15);
              OutString(0,0,USetStr(6680),false);
              EndFormat;
            end;
            StartFormat(15);
            OutString(0,0,USetStr(6682),false);
            OutString(70,0,USetStr(6676),false);
            OutString(120,0,USetStr(6684),false);
            OutString(180,0,USetStr(6688),false);
            OutString(300,0,USetStr(6685),false);
            EndFormat;
            Gray_Divider(0,1);
            firstf = false;
          end;
          RepAct(RepSpec,Actr,0);
        end;
      end;
    end;
// Could have done better with a function call....
    Userr.CustCode = custcode;
    if (ReadFirstKey("CustCode",Userr,1,true)) then begin
      key = "UserMain:" & Userr.Code;
      count = -1;
      RepSpec.ArtMode = 1;
      RepSpec.flags[1] = 1;
      RepSpec.flags[2] = notokd;
      firstf = true;
      ResetLoop(Actr);
      TrHs = true;
      while (LoopBackKey(key,Actr,1,TrHs)) begin//CUCodeActType
        if (nrofact!=-1) and (count!=-1) then begin  
          if (count>=nrofact) then begin
            TrHs = false;
          end;  
        end;  
        if (TrHs) then begin
          testf = true;
          if (testf) then begin
            if (Actr.OKFlag==0) then begin
              if (RepSpec.flags[2]==0) then  begin
                testf = false;
              end;
            end;
          end;      
          if (nonblank(prcode)) then begin
            if (prcode!=Actr.PRCode) then begin testf = false; end;
          end;
          if ((nonblank(Actr.ActType)) and (nonblank(excludeacttypes))) then begin
            if (SetInSet(Actr.ActType,excludeacttypes)) then begin testf = false; end;
          end;
          if (Actr.Invalid!=0) then begin testf = false; end;
          if (testf) then begin
//            testf = CheckTodoAcessAct(Actr,CurrentUser);
          end;
          if (testf) then begin
            if (Actr.OKFlag!=0) then begin
              count = count + 1;
            end;  
            if (firstf) then begin
              if (Actr.OKFlag!=0) then begin
                count = count + 1;
              end;
              StartFormat(15);
              OutString(0,0,USetStr(6681),false);
              EndFormat;
              Black_Divider(0,1);
              if (nonblank(prcode)) then begin
                Gray_Divider(0,1);
                StartFormat(15);
                OutString(0,0,USetStr(6680),false);
                EndFormat;
              end;
              StartFormat(15);
              OutString(0,0,USetStr(6682),false);
              OutString(70,0,USetStr(6676),false);
              OutString(120,0,USetStr(6684),false);
              OutString(180,0,USetStr(6688),false);
              OutString(300,0,USetStr(6685),false);
              EndFormat;
              Gray_Divider(0,1);
              firstf = false;
            end;
            RepAct(RepSpec,Actr,0);
          end;
        end;
      end;
    end;
  end;
  if (firstf==false) then begin
    Black_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;
  RETURN;
END;

global
procedure CustPSCustomersDetails(record RcVc RepSpec,Integer contactrelations,record CUVc CUp,Boolean cuf,Boolean onecuf)
begin
  val turn,limit,due,balp,onacc;
  Date sd,ed;
  record CSVc CSr;
  record VSVc VSr;
  string 255 dealer,tstr;
  record MailSettingsBlock MBr;
  record CUVc InvoiceToCUr;
  record CreditLimitBlock CreditLimitRec;
  val culimit,velimit;
  LongInt culimitdays,velimitdays;
  LongInt limitdays;
  Boolean limitdaysf;

  BlockLoad(MBr);
  turn = 0;
  FindFiscalYear(CurrentDate,sd,ed);  
  if (nonblankdate(sd)) then begin
    if (cuf) then begin
      CSr.CustCode = CUp.Code;
      if (ReadFirstMain(CSr,1,true)) then begin
        turn = GetTurnover(CUp,"salesexclvat",RepSpec.sStartDate,RepSpec.sEndDate);
      end;
    end else begin
      VSr.VECode = CUp.Code;
      if (ReadFirstMain(VSr,1,true)) then begin
        turn = GetTurnover(CUp,"vesalesexclvat",RepSpec.sStartDate,RepSpec.sEndDate);
      end;
    end;
  end;
  if (blank(CUp.InvoiceToCode)) then begin
    CUCreditLimit(CUp,CurrentDate,"sales",culimit,culimitdays);
    CUCreditLimit(CUp,CurrentDate,"purchase",velimit,velimitdays);
  end;
  
  if (PocketVersion) then begin
    StartFormat(15);
    OutString(15,"DblCUVc",CUp.Code,false);
    OutString(290,0,CUp.Phone,false);
    EndFormat;
    StartFormat(15);
    OutString(15,0,CUp.Name,false);
    EndFormat;
    if (nonblank(CUp.WarnText1)) then begin
      StartFormat(15);
      OutString(11,0,USetStr(2717),false);
      OutString(4,0,CUp.WarnText1,false);
      EndFormat;
    end;
    StartFormat(15);
    OutString(11,0,USetStr(2704),false);
    OutVal(320,0,turn,M4Val,true);
    EndFormat;
    if (cuf) then begin
      if (nonblank(limit)) then begin
        StartFormat(15);
        OutString(11,0,USetStr(2716),false);
        OutString(320,0,culimit,true);
        EndFormat;
      end;
    end else begin
      if (nonblank(limit)) then begin
        StartFormat(15);
        OutString(11,0,USetStr(2716),false);
        OutString(320,0,velimit,true);
        EndFormat;
      end;
    end;
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(0,0,USetStr(2706),false);
    OutString(90,0,USetStr(2707),false);
    OutString(320,0,USetStr(2709),true);
    OutString(340,0,USetStr(2710),false);
    OutString(390,0,USetStr(2712),true);
    EndFormat;
  end else begin
    if (onecuf) then begin
      StartFormat(15);
  //    OutString(15,"DblCUVc",CUp.Code,false);
      OutStringID(420,"DblNewAct",USetStr(2732),false,CUp.Code);
      EndFormat;
      StartFormat(15);
       OutString(0,0,USetStr(2737),false);
      EndFormat;
      Black_Divider(0,1);
      StartFormat(15);
      OutStringID(0,"DblCUVc",CUp.Name,false,CUp.Code);
      if (HasModSL or BuildProductCode!="StandardCRM") then begin
        OutString(320,0,USetStr(2704),false);
        OutVal(1,0,turn,M4Val,true);
      end;
      EndFormat;
      StartFormat(15);
      OutString(0,0,CUp.InvAddr0,false);
      
      BlockLoad(CreditLimitRec);
      if (HasModSL or HasModSO or BuildProductCode!="StandardCRM") then begin
        if (cuf) then begin
          due = blankval;
          balp = blankval;
          if (nonblank(CUp.InvoiceToCode)) then begin
            InvoiceToCUr.Code = CUp.InvoiceToCode;
            ReadFirstMain(InvoiceToCUr,1,true);
            limit = InvoiceToCUr.CreditLimit;
            limitdays = InvoiceToCUr.CreditLimitDays;
            GetFindCustBalance(CUp.InvoiceToCode,limitdays,limit,balp,due,onacc,CreditLimitRec.Base,CreditLimitRec.OwnCheques,CreditLimitRec.ThirdCheques,
                               CreditLimitRec.IOUCheques,CreditLimitRec.ThirdIOUCheques,CreditLimitRec.ORSaveWarn,false,limitdaysf);
          end else begin
            limit = culimit;
            limitdays = culimitdays;
            GetFindCustBalance(CUp.Code,limitdays,limit,balp,due,onacc,CreditLimitRec.Base,CreditLimitRec.OwnCheques,CreditLimitRec.ThirdCheques,
                               CreditLimitRec.IOUCheques,CreditLimitRec.ThirdIOUCheques,CreditLimitRec.ORSaveWarn,false,limitdaysf);
          end;
        end else begin
          limit = velimit;
        end;
        if (blank(limit)) then begin limit = 0; end;
        OutString(320,0,USetStr(2716),false);
        OutVal(1,0,limit,M4Val,true);
      end;
      EndFormat;
      StartFormat(15);
      OutString(0,0,CUp.InvAddr1,false);
      if (HasModSL or HasModSO) then begin
        if (nonblank(limit)) then begin
          OutString(320,0,USetStr(26000),false);
          OutVal(1,0,balp,M4Val,true);
        end;
      end;
      EndFormat;
      StartFormat(15);
      OutString(0,0,CUp.InvAddr2,false);
      if (HasModSL or HasModSO) then begin
        if (nonblank(limit)) then begin
          OutString(320,0,USetStr(26001),false);
          OutVal(1,0,limit-balp,M4Val,true);
        end;
      end;
      EndFormat;
      StartFormat(15);
      OutString(0,0,CUp.InvAddr3,false);
      if (HasModSL or HasModSO or BuildProductCode!="StandardCRM") then begin
        if (RepSpec.flags[29]!=0) then begin
          switch (CUp.CustType) begin
            case 0: OutStringID(320,"DblKrediidiinfoComp",USetStr(2733),false,CUp.Code);
            case 1: OutStringID(320,"DblKrediidiinfoPers",USetStr(2733),false,CUp.Code);
          end;
        end;
      end;
      EndFormat;
      if (nonblank(CUp.InvAddr4)) then begin
        StartFormat(15);
        OutString(0,0,CUp.InvAddr4,false);
        EndFormat;
      end;
      dealer = FindDealer(CUp.Code);
      if (nonblank(dealer)) then begin
        StartFormat(15);
        OutString(15,0,USetStr(2734),false);
        OutString(0,0,dealer,false);
        EndFormat;
      end;
      if (nonblank(CUp.Comment)) then begin
        StartFormat(15);
        OutString(0,0,USetStr(2718),false);
        OutString(100,0,CUp.Comment,false);
        EndFormat;
      end;
      if (nonblank(CUp.WarnText1)) then begin
        StartFormat(15);
        OutString(0,0,USetStr(2717),false);
        OutString(100,0,CUp.WarnText1,false);
        EndFormat;
      end;
      Black_Divider(0,1);
      StartFormat(15);
      EndFormat;
    end else begin
      StartFormat(15);
      OutString(15,"DblCUVc",CUp.Code,false);
      OutString(100,0,CUp.Name,false);
      OutString(290,0,CUp.Phone,false);
      EndFormat;
    end;
    PrintCustClass(CUp.Classification);    
    if (contactrelations!=0) then begin
      ContactCU(CUp.Code);
      CUAsContact(CUp.Code);
    end;
  end;  
  return;
end;      

// Add support for CredManVc
global
procedure PSPrintCust(record RcVc RepSpec,record CUVc CUp,var val pstotduep,var val pstotopenp,Integer nrofinv,Integer printopen)
BEGIN
  record ARVc ARr;
  record IVVc IVr;
  record IPrsVc IPrsr;
  Boolean found,testf;
  LongInt latedays;
  val sum,sum2,rval,sumbooked,sumnow,sumincur,sumdiff;
  record SMVc CurTotalsr;
  Array string 10 debaccs;
  Array val debbal;
  Integer debcnt;

  if (RepSpec.UsedOnly==0) then begin
    PSListInvoices(RepSpec,CUp,pstotduep,pstotopenp,printopen,nrofinv,true);
  end;
  if (RepSpec.UsedOnly==1) then begin
    testf = false;
    ARr.CustCode = CUp.Code;
    if (ReadFirstKey("CustCode",ARr,1,true)) then begin
      testf = true;
    end;  
    GetOnAccBalance(RepSpec,CUp.Code,CUp.CurncyCode,false,1,sum,sum2,rval,sumbooked,sumnow,sumincur,sumdiff,CurTotalsr,debaccs,debbal,debcnt);
    if (sum!=0) then begin testf = true; end;    
    if (testf) then begin
      PSListInvoices(RepSpec,CUp,pstotduep,pstotopenp,printopen,nrofinv,true);
    end;
  end;
  if (RepSpec.UsedOnly==2) then begin
    ARr.CustCode = CUp.Code;
    testf = false;
    found = true;
    while (LoopKey("CustCode",ARr,1,found)) begin
      if (found) then begin
        if (CUp.Code!=ARr.CustCode) then begin found = false; end;
      end;  
      if (found) then begin
        latedays = DateDiff(ARr.DueDate,CurrentDate);
        if (latedays<0) then begin
          testf = true;
          found = false;
        end;
      end;
    end;
    if (testf) then begin
      PSListInvoices(RepSpec,CUp,pstotduep,pstotopenp,printopen,nrofinv,true);
    end;
  end;
  return;
end;

global
procedure RunCustPS2Rn(var record RcVc RepSpec,record CustPSVc CuPSr)
BEGIN
  record CUVc CUr;
  val PStotdue;
  val PStotopen;
  string 255 fromcu,tocu;
  Boolean TrHs,testf;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt;

  SetRepCol(2,80);
  SetRepCol(3,320);
  SetRepCol(4,100);
  BeginCurncyTotals(curcnt);
  if (PocketVersion) then begin
    StartFormat(15);
    OutString(11,0,USetStr(2701),false);
    OutString(290,0,USetStr(2703),false);
    EndFormat;
    StartFormat(15);
    OutString(11,0,USetStr(2702),false);
    EndFormat;
    Gray_Divider(0,1);
  end else begin
/*  
    StartFormat(15);
    OutString(11,0,USetStr(2701),false);
    OutString(4,0,USetStr(2702),false);
    EndFormat;
*/    
  end;
  fromcu = FirstInRange(RepSpec.f1,20);
  tocu = LastInRange(RepSpec.f1,20);
  CUr.Code = fromcu;
  TrHs = true;
  while (LoopMain(CUr,1,TrHs)) begin
    if (nonblank(tocu)) then begin
      if (CUr.Code>tocu) then begin
        TrHs = false;
      end;
    end;    
    testf = true;
    if (CUr.CUType==0) then begin testf = false; end;
    if (TrHs and testf) then begin
      CustPSCustomersDetails(RepSpec,CuPSr.ContactRelations,CUr,true,true);
      if (RepSpec.flags[15]==1) then begin
        ActCUPSList(RepSpec,CUr.Code,RepSpec.vals0,RepSpec.flags[14],RepSpec.f6,"",RepSpec.SimVerf);
      end;

      if (HasModSL or BuildProductCode!="StandardCRM") then begin
        PSPrintCust(RepSpec,CUr,PStotdue,PStotopen,RepSpec.flags[10],RepSpec.flags[11]);
      end;
      if (RepSpec.flags[26]==1) then begin
        RentQTCUPSList(RepSpec,CUr.Code,RepSpec.flags[27],RepSpec.flags[28]);
      end;
      if (RepSpec.flags[19]==1) then begin
        PrintCUMonthBal(CUr);
      end;
      if (RepSpec.flags[20]==1) then begin
        PrintCuArtSTRn(RepSpec,CUr,RepSpec.long1);
      end;
      if (RepSpec.flags[21]==1) then begin
        PrintCUQT(CUr,RepSpec.FirstAcc,RepSpec.vals2);
      end;
      if (RepSpec.flags[23]==1) then begin
        PrintCUOR(CUr,RepSpec.LastAcc,RepSpec.vals3);
      end;
      if (RepSpec.flags[16]==1) then begin
        COCUPSList(RepSpec,CUr.Code,RepSpec.flags[17],RepSpec.vals1,CuPSr.ContractClass);
      end;
      if (RepSpec.flags[26]==1) then begin
        CQCUPSList(RepSpec,CUr.Code,RepSpec.flags[28]);
      end;      
      if (CuPSr.Projects==1) then begin
        PRCUPSList(RepSpec,CUr.Code,CuPSr.NrOfPR);
      end;      
      if (CuPSr.ProjectBudgets==1) then begin
        TBBUCUPSList(RepSpec,CUr.Code,CuPSr.NrOfTBBU);
      end;      
      if (CuPSr.Agreements==1) then begin
        AgreementCUPSList(RepSpec,CUr.Code,CuPSr.NrOfAgreements,1);
      end;      
      if (CuPSr.RentalReservations==1) then begin
        RentResCUPSList(RepSpec,CUr.Code,CuPSr.NrOfRentRes);
      end;      
      if (CuPSr.ServiceOrders==1) then begin
        SVOCUPSList(RepSpec,CUr.Code,CuPSr.NrOfSVO);
      end;      
      if (CuPSr.WorkSheets==1) then begin
        WSCUPSList(RepSpec,CUr.Code,CuPSr.NrOfWS);
      end;      
      if (CuPSr.IVCash==1) then begin
        IVCashCUPSList(RepSpec,CUr.Code,CuPSr.NrOfIVCash);
      end;      
      PrintCustCourseEvents(CUr.Code);

      if (RepSpec.flags[13]==1) then begin
        PrintSMSes(CUr,RepSpec.vals4);
      end;
      PrintMarketplaceSubscriptions(CUr);
    end;
  end;
  RETURN;
END;

