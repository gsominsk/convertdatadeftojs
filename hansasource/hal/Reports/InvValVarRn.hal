external function Integer ItemCostPerLocation(record INVc);
external function Integer FindYVars(string,string,string);
external procedure ExtractObj(string,var Integer,var string);
external function val GetStockQty(string,string,Date,Boolean);
external function Boolean CheckVARSubsets(record VARVc,string,string);
external function roundmode GetCostRoundMode(record RoundBlock);
external function roundmode SetRoundModeD(Integer);
external function val QtyUsedBeforeDate(record ItemHistVc,Boolean,Date);
external function Boolean ConsigmentStock(string,string,Date);
external procedure BackDatStock(string,string,string,var val,Date,Integer);
external function Boolean TestArtCodeMatch(string,string);
external procedure PrintOneBatch(string,string,val,Boolean);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure InvListOneItem(record RcVc,Integer,record INVc,string,record CostAccBlock,Boolean,var Boolean,var Boolean,var string,var val,var val,var val,var val,roundmode,var val,string,vector val);

procedure PrintInvValRnHeader(record RcVc RepSpec)
begin
  StartFormat(15);
  OutString(0,0,USetStr(2325),false);
  OutString(2,0,USetStr(2326),false);
  OutString(3,0,USetStr(2330),true);
  if (RepSpec.flags[15]==1) then begin
    OutString(360,0,USetStr(7593),true);
  end;  
  if (RepSpec.flags[11]==1) then begin
    OutString(4,0,USetStr(2350),true);
  end else begin
    OutString(4,0,USetStr(2331),true);
  end;
  OutString(1,0,USetStr(2332),true);
  EndFormat;
  return;
end;

/* Is this function not used??? */
procedure InvValItemLine(record INVc INr,val q,val gps,val s,var val sum1,var val sum2,var val sum3,Boolean withcost)
begin
  record INVc INNamer;
  
  if ((q<>0) or (gps<>0) or (s<>0)) then begin
    if (ReadFirstItem(INr.Code,INNamer,true,true)==false) then begin 
      INNamer.Name = INr.Name;
    end;
    StartFormat(15);
    OutString(0,0,INr.Code,false);
    OutString(2,0,INNamer.Name,false);
    OutVal(3,0,q,M4Qty,true);
    OutString(5,0,INr.Unittext,false);
    if (withcost) then begin
      OutVal(4,0,gps,M4Val,true);
    end;  
    OutVal(1,0,s,M4Val,true);
    EndFormat;
    sum1 = sum1 + q;
    sum2 = sum2 + gps;
    sum3 = sum3 + s;
  end;
  return;
end;

global
procedure InvValVarRn(record RcVc RepSpec)
begin
  record RoundBlock RoundRec;
  record CostAccBlock CostAccRec;
  record MainStockBlock mst;
  record ItemStatusVc ISr;
  record INVc INr;
  string 255 lastgroup;
  Boolean itemout,grout;
  Boolean testf;
  Boolean TrHs;
  val groupqty,groupsum;
  string 20 location;
  val nr,nrq2,sum1;
  record CostAccBlock CAb;
  vector val vlocationtotals;
  integer keys;

  BlockLoad(CAb);  
  BlockLoad(mst);
  BlockLoad(CostAccRec);
  BlockLoad(RoundRec);
  itemout = false;
  grout = false;
  StartReportJob(USetStr(11131));
  EndHeader;
  PrintInvValRnHeader(RepSpec);
  SetRepCol(2,120);
  SetRepCol(3,350);
  SetRepCol(4,415);
  SetRepCol(5,300);

  keys = 1;
  if (blank(RepSpec.f2)) then begin
//    location = mst.MainStock; // Needs to read ONLY the ISr of 
//why ? what if Item was never in main locarion ? 
  end else begin
    location = RepSpec.f2;
    keys = 2;
  end; 
  Gray_Divider(0,1);
  TrHs = true;
  ISr.Code = RepSpec.f1;
  while (LoopMain(ISr,keys,TrHs)) begin   
    if (ISr.Code!=RepSpec.f1) then begin
      TrHs = false;
    end;
    testf = true;
    if (TrHs==false) then begin testf = false; end;
    if (nonblank(location)) then begin
      if (location<>ISr.Location) then begin
        testf = false; 
      end;
    end;
    if (ISr.Location==";;;") then begin
      testf = false;
    end;
    if (ISr.Instock<=0) then begin testf = false; end;
    if (testf) then begin
      if (ReadFirstItem(ISr.Code,INr,false,false)) then begin 
        INr.Code = ISr.Code;
        InvListOneItem(RepSpec,0,INr,ISr.Variety,CAb,true,itemout,grout,lastgroup,sum1,nr,groupqty,groupsum,GetCostRoundMode(RoundRec),nrq2,"",vlocationtotals);
      end;
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  OutVal(3,0,nr,M4UVal,true);
  if (RepSpec.flags[15]==1) then begin  
    OutVal(360,0,nrq2,M4UVal,true);
  end;  
  OutVal(1,0,sum1,M45Val,true);
  EndFormat;
  EndJob;
  return;
end;

global
function val ConsigmentStockQty(string item,string location,Date dp)
begin
  record LocationVc Locr;
  record SerBalVc SBr;
  record BatchTextVc btr;
  val q,res;
  Boolean found,foundloc;
  
  if (blankdate(dp)) or (dp==CurrentDate) then begin
    foundloc = true;
    Locr.Code = location;
    while (LoopMain(Locr,1,foundloc)) begin
      if (nonblank(location)) then begin
        if (Locr.Code!=location) then begin 
          foundloc = false;
        end;
      end;
      if (foundloc) then begin
        ResetLoop(SBr);
        q = 0.00001;
        SBr.Item = item;
        SBr.Location = Locr.Code;
        SBr.Quant = q;
        found = true;
        while (LoopKey("ItemQuant",SBr,3,found)) begin
          if (SBr.Item!=item) then begin found = false; end;
          if (SBr.Location!=Locr.Code) then begin found = false; end;
          if (SBr.Quant<q) then begin found = false; end;
          if (found) then begin
            btr.ArtCode = SBr.Item;
            btr.SerialNr = SBr.Serial;
            if (ReadFirstMain(btr,2,true)) then begin
              if (btr.ConsigStock!=0) then begin
                res = res + SBr.Quant;
              end;
            end;
          end;
        end;
      end;
    end;
  end else begin
    res = ConsigmentStockQty(item,location,CurrentDate);    
    BackDatStock(item,location,"",q,dp,2);
    res = res + q;
  end;
  ConsigmentStockQty = res;
  return;
end;

global
function val FindSerialNrBalance(string ArtCode,string SerialNr,string location,Date dp)
begin
  val res;
  record ItemHistVc IHr;
  Boolean found;
  val soldqty;
  Boolean testf;
  Integer keys;
  string 255 ckey;

  IHr.ArtCode = artcode;
  IHr.TransDate = dp;
  keys = 2;
  ckey = "ArtCode";
  if (nonblank(location)) then begin
    IHr.Location = location;
    keys = 3;
    ckey = "ArtCodeLoc";
  end;
  found = true;
  while (LoopBackKey(ckey,IHr,keys,found)) begin
    if (IHr.ArtCode!=artcode) then begin found = false; end;
    if (nonblank(location)) then begin
      if (IHr.Location!=location) then begin found = false; end;
    end;
    if (IHr.TransDate>dp) then begin found = false; end;
    if (found) then begin 
      testf = true;
      if (IHr.SerialNr!=serialnr) then begin testf = false; end;
      if (IHr.Invalid!=0) then begin testf = false; end;
      if (testf) then begin
        switch (IHr.FileName) begin
          case "PUVc":
            res = res + IHr.Qty;
          case "RetVc":
            res = res + IHr.Qty;
          case "IVVc":
            res = res + IHr.Qty;
          case "SDVc":
            res = res + IHr.Qty;
          case "SHVc":
            res = res + IHr.Qty;
          case "INTransferVc":
            res = res + IHr.Qty;
          case "WSVc":
            res = res + IHr.Qty;
          case "RetPUVc":
            res = res + IHr.Qty;
          case "InternMovAVc":
            res = res + IHr.Qty;
          case "ProdVc":
            res = res + IHr.Qty;
          case "StockMovVc":
            res = res + IHr.Qty;              
        end;
      end;
    end;
  end;
  FindSerialNrBalance = res;
  return;
end;

global
procedure PrintSerialNumbers_InvVal2(record INVc INr,string item,Integer itemtype,val qtp,Date dp,string location,Integer consstock,Integer inclvarieties)
BEGIN
  record SerBalVc SBr;
  record ItemHistVc IHr;
  Boolean found;
  val q,rem,snrbal;
  Boolean first,testf,printf;
  string 200 thelocation;
  Integer keys;
  string 255 ckey;
  array string 255 aserialnrs;
  LongInt i,acnt;
  record BatchTextVc BTr;
  record CostAccBlock CAb;
  vector val vsernr;
  Boolean fifodatef;
  Date sd;

  first = true;
  if (blankdate(dp)) then begin
    q = 0.00001;
    SBr.Item = item;
    found = true;
    while (LoopMain(SBr,1,found)) begin
      testf = true;
      if (inclvarieties!=0) then begin
        if (SBr.Item!=item) then begin testf = false; end;
      end else begin
        if (TestArtCodeMatch(SBr.Item,item)==false) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        if (SBr.Quant>=q) then begin
          printf = false;
          if (blank(location) or (location==SBr.Location)) then begin
            if (first) then begin
              Gray_Divider(2,300);
            end;
            switch (consstock) begin
              case 0: printf = true;
              case 1: 
                BTr.ArtCode = SBr.Item;
                BTr.SerialNr = SBr.Serial;
                if (ReadFirstMain(BTr,2,true)) then begin
                  if (BTr.ConsigStock==0) then begin
                    printf = true;
                  end;
                end else begin
                  printf = true;
                end;
              case 2:
                BTr.ArtCode = SBr.Item;
                BTr.SerialNr = SBr.Serial;
                if (ReadFirstMain(BTr,2,true)) then begin
                  if (BTr.ConsigStock!=0) then begin
                    printf = true;
                  end;
                end;
            end;
            if (printf) then begin
              PrintOneBatch(item,SBr.Serial,SBr.Quant,first);
            end;
            first = false;
          end;
        end;
      end;
    end;
    if (first==false) then begin // this means there were some serienumbers 
      Gray_Divider(2,300);
      StartFormat(10);
      EndFormat;
    end;
  end else begin
    fifodatef = true;
    if (ItemCostPerLocation(INr)==0) then begin //TVI-003
      fifodatef = false;
    end;
    BlockLoad(CAb);  
    first = true;
    rem = Round(qtp,SetRoundModeD(0));
    if (rem<=0) then begin goto LPrintSerialNumbers; end;
    sd.year = 1980; sd.month = 1; sd.day = 1;
    IHr.ArtCode = item;
    IHr.TransDate = sd;
    keys = 2;
    ckey = "ArtCode";
    if (nonblank(location)) then begin
      IHr.Location = location;
      keys = 3;
      ckey = "ArtCodeLoc";
    end;
    found = true;
    while (LoopKey(ckey,IHr,keys,found)) begin
      if (IHr.ArtCode!=item) then begin found = false; end;
      if (nonblank(location)) then begin
        if (IHr.Location!=location) then begin found = false; end;
      end;
      if (IHr.TransDate>dp) then begin found = false; end;
      if (found) then begin 
        testf = true;
/* Array never set...
        for (i=0;i<acnt;i=i+1) begin
          if (IHr.SerialNr==aserialnrs[i]) then begin
            i = acnt;
            testf = false;
          end;
        end; 
*/
        if (IHr.Invalid!=0) then begin testf = false; end;
        if (IHr.StockAffectf==0) then begin testf = false; end;
        if (IHr.ItemType!=kItemTypeStocked) then begin testf = false; end;
        if (testf) then begin 
          printf = true;
          switch (consstock) begin
            case 0:
            case 1: 
              if (ConsigmentStock(IHr.ArtCode,IHr.SerialNr,dp)) then begin
//              if (IHr.ConsigStock!=0) then begin
                printf = false;
              end;
            case 2: 
              if (ConsigmentStock(IHr.ArtCode,IHr.SerialNr,dp)==false) then begin
//              if (IHr.ConsigStock==0) then begin
                printf = false;
              end;
          end;
          if (printf) then begin  
          switch (IHr.FileName) begin
            case "PUVc":
              if (CAb.FIFOPerSerialNr) then begin
                snrbal = IHr.Qty - QtyUsedBeforeDate(IHr,fifodatef,dp);
              end else begin
                snrbal = FindSerialNrBalance(IHr.ArtCode,IHr.SerialNr,location,dp) - vsernr[IHr.SerialNr];
              end;
              if (snrbal>0) then begin
                if (first) then begin
                  Gray_Divider(2,300);
                end;
                PrintOneBatch(IHr.ArtCode,IHr.SerialNr,snrbal,first);
                first = false;
                vsernr[IHr.SerialNr] = vsernr[IHr.SerialNr] + snrbal;
                rem = rem - snrbal; 
                if (rem<=0) then begin goto LPrintSerialNumbers; end;
              end;
            case "RetVc":
              if (CAb.FIFOPerSerialNr) then begin
                snrbal = IHr.Qty - QtyUsedBeforeDate(IHr,fifodatef,dp);
              end else begin
                snrbal = FindSerialNrBalance(IHr.ArtCode,IHr.SerialNr,location,dp) - vsernr[IHr.SerialNr];
              end;
              if (snrbal>0) then begin
                if (first) then begin
                  Gray_Divider(2,300);
                end;
                PrintOneBatch(IHr.ArtCode,IHr.SerialNr,snrbal,first);
                first = false;
                vsernr[IHr.SerialNr] = vsernr[IHr.SerialNr] + snrbal;
                rem = rem - snrbal; 
                if (rem<=0) then begin goto LPrintSerialNumbers; end;
              end;
            case "StockMovVc":
              if (IHr.Qty>0) then begin
                if (CAb.FIFOPerSerialNr) then begin
                  snrbal = IHr.Qty - QtyUsedBeforeDate(IHr,fifodatef,dp);
                end else begin
                  snrbal = FindSerialNrBalance(IHr.ArtCode,IHr.SerialNr,location,dp) - vsernr[IHr.SerialNr];
                end;
                if (snrbal>0) then begin
                  if (first) then begin
                    Gray_Divider(2,300);
                  end;
                  PrintOneBatch(IHr.ArtCode,IHr.SerialNr,snrbal,first);
                  first = false;
                  rem = rem - snrbal; 
                  if (rem<=0) then begin goto LPrintSerialNumbers; end;
                end;
              end;
            case "ProdVc":
              if (IHr.Qty>0) then begin
                if (CAb.FIFOPerSerialNr) then begin
                  snrbal = IHr.Qty - QtyUsedBeforeDate(IHr,fifodatef,dp);
                end else begin
                  snrbal = FindSerialNrBalance(IHr.ArtCode,IHr.SerialNr,location,dp) - vsernr[IHr.SerialNr];
                end;
                if (snrbal>0) then begin
                  if (first) then begin
                    Gray_Divider(2,300);
                  end;
                  PrintOneBatch(IHr.ArtCode,IHr.SerialNr,snrbal,first);
                  first = false;
                  vsernr[IHr.SerialNr] = vsernr[IHr.SerialNr] + snrbal;
                  rem = rem - snrbal; 
                  if (rem<=0) then begin goto LPrintSerialNumbers; end;
                end;
              end;
            case "ProdOperationVc":
              if (IHr.Qty>0) then begin
                if (CAb.FIFOPerSerialNr) then begin
                  snrbal = IHr.Qty - QtyUsedBeforeDate(IHr,fifodatef,dp);
                end else begin
                  snrbal = FindSerialNrBalance(IHr.ArtCode,IHr.SerialNr,location,dp) - vsernr[IHr.SerialNr];
                end;
                if (snrbal>0) then begin
                  if (first) then begin
                    Gray_Divider(2,300);
                  end;
                  PrintOneBatch(IHr.ArtCode,IHr.SerialNr,snrbal,first);
                  first = false;
                  vsernr[IHr.SerialNr] = vsernr[IHr.SerialNr] + snrbal;
                  rem = rem - snrbal; 
                  if (rem<=0) then begin goto LPrintSerialNumbers; end;
                end;
              end;
            case "IVVc":
              if (IHr.Qty>0) then begin
                if (CAb.FIFOPerSerialNr) then begin
                  snrbal = IHr.Qty - QtyUsedBeforeDate(IHr,fifodatef,dp);
                end else begin
                  snrbal = FindSerialNrBalance(IHr.ArtCode,IHr.SerialNr,location,dp) - vsernr[IHr.SerialNr];
                end;
                if (snrbal>0) then begin
                  if (first) then begin
                    Gray_Divider(2,300);
                  end;
                  PrintOneBatch(IHr.ArtCode,IHr.SerialNr,snrbal,first);
                  first = false;
                  vsernr[IHr.SerialNr] = vsernr[IHr.SerialNr] + snrbal;
                  rem = rem - snrbal; 
                  if (rem<=0) then begin goto LPrintSerialNumbers; end;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
LPrintSerialNumbers:;
  end;
  return;
end;

global
procedure PrintSerialNumbers_InvVal(record INVc INr,string item,Integer itemtype,val qtp,Date dp,string location,Integer consstock)
begin
  PrintSerialNumbers_InvVal2(INr,item,itemtype,qtp,dp,location,consstock,0);
  return;
end;

global
procedure AddSupersessionsInvList(record RcVc RepSpec,record INVc aINp,string variety,record CostAccBlock CAb,roundmode roundof,string dblstr,
                                     var val sum1p,var val nrp,var val nrq2p)
begin
  val instock,instock2,orginstock;
  record SupersessionINVc SINr;
  record INVc INr;
  Boolean found,varf;
  val consiginstock;
  record ItemSettingBlock ISb;
  Boolean itemout,grout;
  string 255 lastgroup;
  val groupqty,groupsum;
  vector val vlocationtotals;

  sum1p = blankval;
  nrp = blankval;
  nrq2p = blankval;
  BlockLoad(ISb);
  if (ISb.UseSupersessionIN!=0) then begin
    switch (RepSpec.flags[21]) begin
      case 0:        
        found = true;
        SINr.NewArtCode = aINp.Code;
        while (LoopKey("ActNewArtCode",SINr,1,found)) begin
          if (SINr.NewArtCode!=aINp.Code) then begin found = false; end;
          if (found) then begin
            INr.Code = SINr.OldArtCode;
            if (ReadFirstMain(INr,1,true)) then begin
              if (INr.ItemType==1) then begin    
                InvListOneItem(RepSpec,0,INr,variety,CAb,false,itemout,grout,lastgroup,sum1p,nrp,groupqty,groupsum,roundof,nrq2p,dblstr,vlocationtotals);
              end;
            end;
          end;
        end;
    end;
  end;
  return;
end;

procedure InvListForOneVariety(string group,record RcVc RepSpec,record INVc INr,string itsz,string mask,string mskrep,string subsets,
                               var Array string items,var Array val itemqty,var Integer isrs)
begin
  record VARVc VARr;
  Boolean found,testf;
  Integer insz;
  string 255 artcode,itemcode;
  record INVc tmpINr;

  tmpINr = INr;
  itemcode = tmpINr.Code;
  if (itsz!=".") then begin
    insz = StringToInt(itsz);
  end;
  found = true;
  VARr.VARGCode = group;
  while (LoopKey("VARGCode",VARr,1,found)) begin
    if (VARr.VARGCode!=group) then begin
      found = false;
    end;
    if (found) then begin
      if (itsz!=".") then begin
        artcode = itemcode & VARr.Code;
      end else begin
        artcode = itemcode & itsz & VARr.Code;
      end;      
      tmpINr.Code = artcode;
      testf = true;
      if (nonblank(subsets)) then begin
        if (CheckVARSubsets(VARr,subsets,mask)==false) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        items[isrs] = artcode;
        itemqty[isrs] = GetStockQty(artcode,RepSpec.f2,RepSpec.d1,false);
        isrs = isrs + 1;
      end;
    end;
  end;
  return;
end;

procedure InvListForTwoVariety(string group1,string group2,record RcVc RepSpec,record INVc INr,string itsz,string mask,string mskrep,string subsets,
                               var Array string items,var Array val itemqty,var Integer isrs)
begin
  record VARVc VARr1;
  Boolean found1,testf;
  record VARVc VARr2;
  Boolean found2;
  Integer insz;
  string 255 artcode,artcode1,itemcode,itsz1,itsz2;
  record VARGVc VARGr;
  record INVc tmpINr;

  tmpINr = INr;
  itemcode = tmpINr.Code;
  found1 = true;
  VARr1.VARGCode = group1;
  while (LoopKey("VARGCode",VARr1,1,found1)) begin
    if (VARr1.VARGCode!=group1) then begin
      found1 = false;
    end;
    if (found1) then begin
      VARGr.Code = VARr1.VARGCode;
      ReadFIrstMain(VARGr,1,true);
      itsz1 = VARGr.VarSize;
      if (itsz1!=".") then begin
        insz = StringToInt(itsz1);
      end;
      if (itsz1!=".") then begin
        artcode = itemcode & VARr1.Code;
      end else begin
        artcode = itemcode & itsz1 & VARr1.Code;
      end;      
      artcode1 = artcode;
      testf = true;
      if (nonblank(subsets)) then begin
        if (CheckVARSubsets(VARr1,subsets,mask)==false) then begin
          testf = false;
        end;
      end;
      
      if (testf) then begin
        ResetLoop(VARr2);
        found2 = true;
        VARr2.VARGCode = group2;
        while (LoopKey("VARGCode",VARr2,1,found2)) begin
          if (VARr2.VARGCode!=group2) then begin
            found2 = false;
          end;
          if (found2) then begin  
            artcode = artcode1;
            VARGr.Code = VARr2.VARGCode;
            ReadFIrstMain(VARGr,1,true);
            itsz2 = VARGr.VarSize;
            if (itsz2!=".") then begin
              itsz2 = StringToInt(itsz2);
            end;
            if (itsz2!=".") then begin
              artcode = artcode & VARr2.Code;
            end else begin
              artcode = artcode & itsz2 & VARr2.Code;
            end;      
            tmpINr.Code = artcode;
            testf = true;
            if (nonblank(subsets)) then begin
              if (CheckVARSubsets(VARr2,subsets,mask)==false) then begin
                testf = false;
              end;
            end;
            if (testf) then begin
              items[isrs] = artcode;
              itemqty[isrs] = GetStockQty(artcode,RepSpec.f2,RepSpec.d1,false);
              isrs = isrs + 1;
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure InvListForThreeVariety(string group1,string group2,string group3,record RcVc RepSpec,record INVc INr,string itsz,string mask,string mskrep,string subsets,
                               var Array string items,var Array val itemqty,var Integer isrs)
begin
  record VARVc VARr1;
  Boolean found1;
  record VARVc VARr2;
  Boolean found2;
  record VARVc VARr3;
  Boolean found3,testf;
  record VARGVc VARGr;
  Integer insz1,insz2,insz3;
  string 255 artcode,artcode1,artcode2,itemcode,itemname,itsz1,itsz2,itsz3;
  record INVc tmpINr;

  tmpINr = INr;
  itemcode = tmpINr.Code;
  found1 = true;
  VARr1.VARGCode = group1;
  while (LoopKey("VARGCode",VARr1,1,found1)) begin
    if (VARr1.VARGCode!=group1) then begin
      found1 = false;
    end;
    if (found1) then begin
      VARGr.Code = VARr1.VARGCode;
      ReadFIrstMain(VARGr,1,true);
      itsz1 = VARGr.VarSize;
      if (itsz1!=".") then begin
        insz1 = StringToInt(itsz1);
      end;
      if (itsz1!=".") then begin
        artcode = itemcode & VARr1.Code;
      end else begin
        artcode = itemcode & itsz1 & VARr1.Code;
      end;      
      artcode1 = artcode;
      testf = true;
      if (nonblank(subsets)) then begin
        if (CheckVARSubsets(VARr1,subsets,mask)==false) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        ResetLoop(VARr2);
        found2 = true;
        VARr2.VARGCode = group2;
        while (LoopKey("VARGCode",VARr2,1,found2)) begin
          if (VARr2.VARGCode!=group2) then begin
            found2 = false;
          end;
          if (found2) then begin  
            artcode = artcode1;
            VARGr.Code = VARr2.VARGCode;
            ReadFIrstMain(VARGr,1,true);
            itsz2 = VARGr.VarSize;
            if (itsz2!=".") then begin
              insz2 = StringToInt(itsz2);
            end;
            if (itsz2!=".") then begin
              artcode = artcode & VARr2.Code;
            end else begin
              artcode = artcode & itsz2 & VARr2.Code;
            end;      
            artcode2 = artcode;

            testf = true;
            if (nonblank(subsets)) then begin
              if (CheckVARSubsets(VARr2,subsets,mask)==false) then begin
                testf = false;
              end;
            end;
            if (testf) then begin
              ResetLoop(VARr3);
              found3 = true;
              VARr3.VARGCode = group3;
              while (LoopKey("VARGCode",VARr3,1,found3)) begin
                if (VARr3.VARGCode!=group3) then begin
                  found3 = false;
                end;
                if (found3) then begin
                  artcode = artcode2;
                  VARGr.Code = VARr3.VARGCode;
                  ReadFIrstMain(VARGr,1,true);
                  itsz3 = VARGr.VarSize;
                  if (itsz3!=".") then begin
                    insz3 = StringToInt(itsz3);
                  end;
                  if (itsz3!=".") then begin
                    artcode = artcode & VARr3.Code;
                  end else begin
                    artcode = artcode & itsz3 & VARr3.Code;
                  end;      
                  tmpINr.Code = artcode;
                  testf = true;
                  if (nonblank(subsets)) then begin
                    if (CheckVARSubsets(VARr3,subsets,mask)==false) then begin
                      testf = false;
                    end;
                  end;
                  if (testf) then begin
                    items[isrs] = artcode;
                    itemqty[isrs] = GetStockQty(artcode,RepSpec.f2,RepSpec.d1,false);
                    isrs = isrs + 1;
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

global
procedure InvListVarieties(record RcVc RepSpec,record INVc INr,string sz,string mask,string mskrep,string subsets,record CostAccBlock CAb,Boolean printf,var Boolean itemoutp,
                          var Boolean groutp,var string lastgroup,var val sum1p,var val nrp,var val groupqtyp,var val groupsump,roundmode roundof,var val nrq2p,string dblstr,
                          vector val vlocationtotals)
begin
  Integer nrofy,pos,i,cnt;
  Array string 20 ac;
  string 255 xpos,ypos,zpos,tstr;
  Array string 20 items;
  Array val itemqty;
  Integer isrs;
  string 255 variety;
  record INVc tmpINr;

  cnt = 0;
  pos = 0;
  for (i=0;i<20;i=i+1) begin
    ExtractObj(mask,pos,tstr);
    if (nonblank(tstr)) then begin
      ac[i] = tstr;
      cnt = cnt + 1;
    end else begin
      i = 20;
    end;
  end;
  if (cnt>0) then begin xpos = ac[0]; end;
  if (cnt>1) then begin ypos = ac[1]; end;
  if (cnt>2) then begin zpos = ac[2]; end;

  isrs = 0;
  nrofy = FindYVars(ypos,subsets,mask);
  switch (cnt) begin
    case 1: InvListForOneVariety(xpos,RepSpec,INr,sz,mask,mskrep,subsets,items,itemqty,isrs);
    case 2: InvListForTwoVariety(xpos,ypos,RepSpec,INr,sz,mask,mskrep,subsets,items,itemqty,isrs);
    case 3: InvListForThreeVariety(xpos,ypos,zpos,RepSpec,INr,sz,mask,mskrep,subsets,items,itemqty,isrs);
  end;
  tmpINr = INr;
  for (i=0;i<isrs;i=i+1) begin
    INr.Code = tmpINr.Code;
    variety = Right(items[i],len(items[i]) - len(INr.Code));
    InvListOneItem(RepSpec,0,INr,variety,CAb,true,itemoutp,groutp,lastgroup,sum1p,nrp,groupqtyp,groupsump,roundof,nrq2p,dblstr,vlocationtotals);
  end;
  return;
end;