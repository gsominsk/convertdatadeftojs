external function LongInt MonthDiff(Date,Date);
external function Boolean SetInSet2(string,string);
external function val CurMonthWrOfQty(Date,Integer,record AT2UnitVc,var val);
external procedure RevaluationOnDate(Integer,Integer,string,Date,Date,var val,var val,var string);
external procedure DeprSegmentNew(Integer,record DprModVc,Date,Date,val,var val,var val,val);
external procedure DeprSegment(Date,Date,Integer,record DprModVc,Date,Date,Date,val,var val,var val,var val,var val,var Integer,val);
external procedure HT2Per(Date, Date , var string);
external procedure HTModel(Integer,var string);
external procedure HTValuesPerMonth(Integer,var string);
external procedure HTInventoryNrs(string,string,var string);
external procedure AddSMDprRowRows(record RcVc,record AT2UnitVc,val,val,Integer,var record SMVc,var string);
external function Boolean GetNextData_Asset(Integer,record AT2UnitVc,record DprModVc,Date,Date,Integer,Boolean,
                                            var Date,var string,var val,var val,var val,var Date,var val,var val,var Boolean);
external function Boolean GetLastDprStartVal(Integer,string,val,var val,var val);
external function Boolean GetLastOfficialDprStartVal(Integer,string,val,var val,var val);
external procedure HTOBJ(string,var string);
external procedure HTClasses(string,string,var string);
external function Boolean CheckifAT2UnitSold(string,Date);
external procedure PrintSMRecord(record SMVc,Integer);
external procedure SMSumup(var record SMVc);
external function Boolean GetInventoryNrWrofSoldQuant(string,Date,Date,var val,var val,var val,var Date);

function Date LastDprDate(Date dat,string InventoryNr,Integer Model,Integer typ,var val revinitdeprval) 
begin
  Date res;
  record AT2DprVc ATDprr;
  Boolean TrHs;
  record InvrsVc Invrsr;
  
  TrHs = true;
  Invrsr.InventoryNr = InventoryNr;
  Invrsr.FileName = "AT2DprVc";
  Invrsr.TransDate = dat;
  while (LoopBackKey("FileName",Invrsr,3,TrHs)) begin
    if (Invrsr.InventoryNr!=InventoryNr) then begin TrHs = false; end;
    if (Invrsr.FileName!="AT2DprVc") then begin TrHs = false; end;
    if (Invrsr.TransDate>dat) then begin TrHs = false; end;
    if (TrHs) then begin
      ATDprr.SerNr = Invrsr.TransNr;
      if (ReadFirstMain(ATDprr,1,true)) then begin
        switch (typ) begin
          case 0:
            switch (Model) begin
              case 0:
                res = ATDprr.StartingDate1;
              case 1:
                res = ATDprr.StartingDate2;
            end;
          case 1:
            res = ATDprr.EndDate;
            switch (Model) begin
              case 0:
                revinitdeprval = ATDprr.InitDeprVal1;
              case 1:
                revinitdeprval = ATDprr.InitDeprVal2;
            end;
        end;
        TrHs = false;
      end;
    end;    
  end;
  LastDprDate = res;
  return;      
end;      

function Boolean DprYearsPassed(Date sd,Integer years,Date ed)
BEGIN
  Boolean res;
  Date td;
  
  td = sd;
  td.year = td.year + years;
  td = AddDay(td,-1);
  if (ed>=td) then begin
    res = true;
  end;
  DprYearsPassed = res;
  RETURN;
END;

global
function Boolean AT2GetStartVal(Integer Model2,string InventoryNr,Date sd1,Date sd2,val startval,var val portstartval,var val resval)
BEGIN
  record AT2DprVc Dpr;
  Boolean res;
  
  res = false;
  portstartval = blankval;
  Dpr.InventoryNr = InventoryNr;
  if (ReadLastKey("InventoryNr",Dpr,1,true)) then begin
      if (Model2==0) then begin    
        if (sd1==Dpr.StartingDate1) then begin
          portstartval = Dpr.StartVal;
          resval = Dpr.ResVal + Dpr.LandVal;
          res = true;
        end;
      end;  
      if (Model2==1) then begin    
        if (sd2==Dpr.StartingDate2) then begin
          portstartval = Dpr.StartVal2;
          resval = Dpr.ResVal + Dpr.LandVal;
          res = true;
        end;
      end;  
  end;
  if (portstartval==blankval) then begin
    portstartval = startval;
  end;  
  AT2GetStartVal = res; 
  RETURN;        
END;

procedure PrintAT2DprHeader(record RcVc RepSpec)
BEGIN      
  Integer rw;
  string 255 tstr;
  string 30 frinv,toinv;
  
  frinv = FirstInRange(RepSpec.f2,30);    
  toinv = LastInRange(RepSpec.f2,30);    
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw, tstr, 1);
  rw = rw + 1;
  HTModel(RepSpec.flags[1],tstr);
  Header(rw, tstr, 0);
  HTInventoryNrs(frinv,toinv,tstr);
  Header(rw, tstr, 1);
  rw = rw + 1;
  HTValuesPerMonth(RepSpec.Comparison,tstr);
  Header(rw, tstr, 0);
  if (nonblank(RepSpec.f1)) then begin
    tstr = USetStr(7111);
    tstr = tstr & " ";
    tstr = tstr & RepSpec.f1;
    Header(rw, tstr, 1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.AccStr)) then begin
    tstr = USetStr(7117);
    tstr = tstr & " ";
    tstr = tstr & RepSpec.AccStr;
    Header(rw, tstr, 1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.f3)) then begin
    HTClasses(RepSpec.f3,RepSpec.f3,tstr);
    Header(rw, tstr, 1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.ObjStr)) then begin
    HTOBJ(RepSpec.ObjStr,tstr);
    Header(rw, tstr, 1);
    rw = rw + 1;
  end;  
  RETURN;
END;

procedure PrintInventoryNrDescr(Boolean partf,record AT2UnitVc ATUnitr,Integer ArtMode)
BEGIN      
  if (ArtMode==1) then begin
    StartFormat(15);
     if (partf) then begin
       OutString(15,"DblAT2UnitVc",ATUnitr.InventoryNr,false);          
     end else begin
       OutString(0,"DblAT2UnitVc",ATUnitr.InventoryNr,false);          
     end;
     OutString(100,0,ATUnitr.Description,false);
     OutString(300,0,ATUnitr.SerialNr,false);
     OutString(410,0,USetStr(5279),false);
     OutVal(1,0,ATUnitr.Quantity,M4Val,true);
    EndFormat;
    if (nonblank(ATUnitr.Comment)) then begin
      StartFormat(15);
       OutString(100,0,ATUnitr.Comment,false);
      EndFormat;
    end;
  end else begin
  end;
  RETURN;      
END;
      
/*      
procedure PrintInventoryNrResult(record AT2UnitVc ATUnitr,val InitDeprVal,val PurchVal,val startval,val invdprbef,var val invdprv,val invrevdprv,val invrevdprbef,
                                 val wrofsum,val wrofdprsum,val revbef,val fwdbal,val endbal,
                                 Integer ArtMode,Integer InclRevDpr)
BEGIN   
  if (ArtMode==1) then begin
    if ((invdprbef+ATUnitr.ResVal+ATUnitr.LandVal)>=startval) then begin
      invdprv = 0;
    end;   
    StartFormat(15);
     OutString(100,0,USetStr(5292),false);
     OutVal(4,0,InitDeprVal,M4Val,true);
    EndFormat;    
    StartFormat(15);
     OutString(100,0,USetStr(5288),false);
     OutVal(4,0,fwdbal+revbef-wrofsum,M4Val,true);
     OutVal(5,0,(startval-PurchVal-revbef),M4Val,true);
     OutVal(1,0,endbal,M4Val,true);
    EndFormat;    
    StartFormat(15);
     OutString(100,0,USetStr(5289),false);
     OutVal(4,0,invdprbef-wrofdprsum,M4Val,true);
     OutVal(5,0,invdprv,M4Val,true);
     OutVal(1,0,(invdprv+invdprbef-wrofdprsum),M4Val,true);
    EndFormat;    
    if (InclRevDpr!=0) then begin
      if (invrevdprbef!=0) or (invrevdprv!=0) then begin
        StartFormat(15);
         OutString(100,0,USetStr(5278),false);
         OutVal(4,0,invrevdprbef,M4Val,true);
         OutVal(5,0,invrevdprv,M4Val,true);
         OutVal(1,0,(invrevdprv+invrevdprbef),M4Val,true);
        EndFormat;
      end;
    end; 
     StartFormat(15);
     OutString(100,0,USetStr(5290),false);
     OutVal(4,0,(fwdbal+revbef-wrofsum)-(invdprbef-wrofdprsum),M4Val,true);//-InitDeprVal
     OutVal(5,0,(startval-startval-invdprv),M4Val,true);
     OutVal(1,0,(fwdbal+revbef-wrofsum)-(invdprv+(invdprbef-wrofdprsum)),M4Val,true);//+InitDeprVal
    EndFormat;    
    Gray_Divider(0,1);
  end else begin
    StartFormat(15);
     OutString(0,"DblAT2UnitVc",ATUnitr.InventoryNr,false);
     OutString(2,0,ATUnitr.Description,false);
     OutVal(3,0,PurchVal,M4Val,true);
     OutVal(4,0,(PurchVal-invdprbef),M4Val,true);//-InitDeprVal
     OutVal(5,0,(startval-PurchVal),M4Val,true);
     OutVal(6,0,invdprv,M4Val,true);
     OutVal(1,0,(startval-(invdprv+invdprbef)),M4Val,true);//+InitDeprVal + wrofsum
    EndFormat;    
  end;  
  RETURN;          
END;          
*/

procedure PrintInventoryNrResult(Boolean partf,record AT2UnitVc ATUnitr,val InitDeprVal,val PurchVal,val startval,val invdprbef,var val invdprv,val invrevdprv,val invrevdprbef,
                                 val wrofsum,val wrofdprsum,val revbef,val fwdbal,val endbal,
                                 Integer ArtMode,Integer InclRevDpr,Integer SkipDisposed)
BEGIN
  if ((invdprbef+ATUnitr.ResVal)>=startval) then begin
    invdprv = 0;
  end;
  if (ArtMode==1) then begin
    StartFormat(15);
     OutString(100,0,USetStr(5292),false);
     OutVal(4,0,InitDeprVal,M4Val,true);
    EndFormat;    
    StartFormat(15);
     OutString(100,0,USetStr(5288),false);
     OutVal(4,0,PurchVal,M4Val,true);
     OutVal(5,0,(startval-PurchVal),M4Val,true);
     OutVal(1,0,startval,M4Val,true);
    EndFormat;    
    StartFormat(15);
     OutString(100,0,USetStr(5289),false);
     OutVal(4,0,invdprbef,M4Val,true);
     OutVal(5,0,invdprv,M4Val,true);
     OutVal(1,0,(invdprv+invdprbef),M4Val,true);
    EndFormat;      
    StartFormat(15);
     OutString(100,0,USetStr(5290),false);
     OutVal(4,0,(PurchVal-invdprbef),M4Val,true);//-InitDeprVal
     OutVal(5,0,(startval-PurchVal-invdprv),M4Val,true);
     if ((startval-wrofsum)<=0) then begin
       OutVal(1,0,startval-wrofsum,M4Val,true);//+InitDeprVal
     end else begin
       OutVal(1,0,(startval-(invdprv+invdprbef)),M4Val,true);//+InitDeprVal
     end;
    EndFormat;    
    Gray_Divider(0,1);
  end else begin
    StartFormat(15);
     if (partf) then begin
       OutString(15,"DblAT2UnitVc",ATUnitr.InventoryNr,false);
     end else begin
       OutString(0,"DblAT2UnitVc",ATUnitr.InventoryNr,false);
     end;
     OutString(2,0,ATUnitr.Description,false);
     OutVal(3,0,PurchVal,M4Val,true);
     OutVal(4,0,(PurchVal-invdprbef),M4Val,true);//-InitDeprVal
     OutVal(5,0,(startval-PurchVal),M4Val,true);
     OutVal(6,0,invdprv,M4Val,true);
     switch (SkipDisposed) begin
       case 0://Incl Disposed
         OutVal(1,0,(startval-(invdprv+invdprbef)),M4Val,true);//+InitDeprVal
       case 1://Skip Disposed
         if ((startval-wrofsum)<=0) then begin
           OutVal(1,0,(startval-wrofsum),M4Val,true);//+InitDeprVal
         end else begin
           OutVal(1,0,(startval-(invdprv+invdprbef+wrofsum)),M4Val,true);//+InitDeprVal
         end;
       case 2://Include Disposed in Period
         OutVal(1,0,(startval-(invdprv+invdprbef)),M4Val,true);//+InitDeprVal
     end;
    EndFormat;    
  end;  
  RETURN;
END;

procedure PrintInventoryNrResultTotals(val resval,val InitDeprVal,val PurchVal,val startval,val invdprbef,var val invdprv,val wrofsum,val revbef,Integer ArtMode,Integer SkipDisposed)
BEGIN
  if ((invdprbef+resval)>=startval) then begin
    invdprv = 0;
  end;
  if (ArtMode==1) then begin
    StartFormat(15);
     OutString(100,0,USetStr(5292),false);
     OutVal(4,0,InitDeprVal,M4Val,true);
    EndFormat;        
    StartFormat(15);
     OutString(100,0,USetStr(5288),false);
     OutVal(4,0,PurchVal,M4Val,true);
     OutVal(5,0,startval-PurchVal,M4Val,true);
     OutVal(1,0,startval,M4Val,true);
    EndFormat;    
    StartFormat(15);
     OutString(100,0,USetStr(5289),false);
     OutVal(4,0,invdprbef,M4Val,true);
     OutVal(5,0,invdprv,M4Val,true);
    OutVal(1,0,invdprv+invdprbef,M4Val,true);
    EndFormat;    
    StartFormat(15);
     OutString(100,0,USetStr(5290),false);
     OutVal(4,0,PurchVal-invdprbef,M4Val,true);//-InitDeprVal
     OutVal(5,0,startval-startval-invdprv,M4Val,true);
     switch (SkipDisposed) begin
       case 0://Incl Disposed
         OutVal(1,0,startval-(invdprv+invdprbef),M4Val,true);//+InitDeprVal
       case 1://Skip Disposed
         if ((startval-wrofsum)<=0) then begin
           OutVal(1,0,startval-wrofsum,M4Val,true);//+InitDeprVal
         end else begin
           if ((startval-(invdprv+invdprbef)-wrofsum)<0) then begin
             OutVal(1,0,startval-(invdprv+invdprbef),M4Val,true);//+InitDeprVal
           end else begin
             OutVal(1,0,startval-(invdprv+invdprbef)-wrofsum,M4Val,true);//+InitDeprVal
           end;
         end;
       case 2://Include Disposed in Period
         OutVal(1,0,startval-(invdprv+invdprbef),M4Val,true);//+InitDeprVal
     end;
    EndFormat;    
    Gray_Divider(0,1);
  end else begin
    StartFormat(15);
     OutString(2,0,USetStr(5290),false);
     OutVal(3,0,PurchVal,M4Val,true);
     OutVal(4,0,PurchVal-invdprbef,M4Val,true);//-InitDeprVal
     OutVal(5,0,startval-PurchVal,M4Val,true);
     OutVal(6,0,invdprv,M4Val,true);
     switch (SkipDisposed) begin
       case 0://Incl Disposed
          OutVal(1,0,(startval-(invdprv+invdprbef)),M4Val,true);//+InitDeprVal
       case 1://Skip Disposed
         if ((startval-wrofsum)<=0) then begin
           OutVal(1,0,(startval-wrofsum),M4Val,true);//+InitDeprVal
         end else begin
           if ((startval-(invdprv+invdprbef)-wrofsum)<0) then begin
             OutVal(1,0,(startval-(invdprv+invdprbef)),M4Val,true);//+InitDeprVal
           end else begin
             OutVal(1,0,(startval-(invdprv+invdprbef+wrofsum)),M4Val,true);//+InitDeprVal
           end;
         end;
       case 2://Include Disposed in Period
         OutVal(1,0,(startval-(invdprv+invdprbef)),M4Val,true);//+InitDeprVal
     end;
    EndFormat;  
  end;  
  RETURN;          
END;
          
procedure PrintDprModelInfo(record DprModVc DMr,Date sd, Date ed)
begin
  string 255 tstr,t2;
  
  tstr = USetStr(5293);
  tstr = tstr & " ";
  t2 = sd;
  tstr = tstr & t2;
  t2 = ed;
  tstr = tstr & ":";
  tstr = tstr & t2;
  StartFormat(15);
   OutString(20,0,tstr,false);
   tstr = DMr.Description;
   tstr = tstr & " ";
   if (DMr.DeprPerc==0) then begin
     t2 = 100/DMr.LifecycleYears;
   end else begin
     t2 = DMr.DeprPerc;
   end;
   tstr = tstr & t2;
   tstr = tstr & "%";
   OutString(200,0,tstr,false);
  EndFormat; 
  return;
end;

global
function Boolean CheckAssetCatMatch(string category,string AT2Class,string f3)
BEGIN
  record AT2Vc ATCatr;
  Boolean res;
  string 20 ATClass;
 
  res = true;
  if (blank(category)) then begin
    if (nonblank(f3)) then begin         
      if (AT2Class!=f3) then begin
        res = false;
      end;
    end;
  end else begin
    ATCatr.Code = category;
    if (ReadFirstMain(ATCatr,1,true)) then begin
      ATClass = AT2Class;
      if (blank(ATClass)) then begin
        ATClass = ATCatr.AT2Class;
      end;
      if (nonblank(f3)) then begin         
        if (ATClass!=f3) then begin
          res = false;
        end;
      end else begin
        res = true;
      end;
      if (ATCatr.Exclude!=0) then begin
        res = false;
      end;
    end;
  end;
  CheckAssetCatMatch = res;
  RETURN;
END;

global
function Boolean CheckAssetDepMatch(string InventoryNr,string depcode,record RcVc RepSpec,var Date enddate) 
BEGIN
  Boolean res,TrHs;
  record InvrsVc Invrsr;
  record AT2TakeVc ATTaker;
  Date blankd;
  
  enddate = blankd;
  if (depcode==RepSpec.AccStr) then begin 
    res = true;
  end;
  TrHs = true;
  Invrsr.InventoryNr = InventoryNr;
  Invrsr.FileName = "AT2TakeVc";
  Invrsr.TransDate = RepSpec.sStartDate;
  while (LoopBackKey("FileName",Invrsr,3,TrHs)) begin
    if (Invrsr.InventoryNr!=InventoryNr) then begin TrHs = false; end;
    if (Invrsr.FileName!="AT2TakeVc") then begin TrHs = false; end;
    if (Invrsr.TransDate>RepSpec.sEndDate) then begin TrHs = false; end;
    if (TrHs) then begin        
      ATTaker.SerNr = Invrsr.TransNr;
      if (ReadFirstMain(ATTaker,1,true)) then begin
        if (ATTaker.PhysCheckf==0) then begin
          if (ATTaker.DepCode==RepSpec.AccStr) then begin
            res = true;
            TrHs = false;
            enddate = ATTaker.TransDate;
          end else begin
            res = false;
            TrHs = false;
          end;
        end;          
      end;
    end;
  end;    
  CheckAssetDepMatch = res;
  RETURN;
END;

global
function Boolean CheckAssetRespPersonMatch(string InventoryNr,string atunitperson,string specperson,Date startdate,Date enddate) 
BEGIN
  Boolean res,TrHs;
  record InvrsVc Invrsr;
  record AT2TakeVc ATTaker;
  Date blankd;
  
  if (atunitperson==specperson) then begin 
    res = true;
  end;
    TrHs = true;
    Invrsr.InventoryNr = InventoryNr;
    Invrsr.FileName = "AT2TakeVc";
    Invrsr.TransDate = startdate;
    while (LoopBackKey("FileName",Invrsr,2,TrHs)) begin
      if (Invrsr.InventoryNr!=InventoryNr) then begin TrHs = false; end;
      if (Invrsr.FileName!="AT2TakeVc") then begin TrHs = false; end;
      if (Invrsr.TransDate>enddate) then begin TrHs = false; end;
      if (TrHs) then begin        
        ATTaker.SerNr = Invrsr.TransNr;
        if (ReadFirstMain(ATTaker,1,true)) then begin
          if (ATTaker.PhysCheckf==1) then begin
            if (ATTaker.RespPerson==specperson) then begin
              res = true;
              TrHs = false;
            end else begin
              res = false;
              TrHs = false;
            end;
          end;          
        end;
      end;
    end;    
  CheckAssetRespPersonMatch = res;
  RETURN;
END;

procedure FindLastAssetDepartment(record AT2UnitVc ATUnitr,Date ed,var string res,var Date resd) 
BEGIN
  Boolean TrHs;
  record InvrsVc Invrsr;
  record AT2TakeVc ATTaker;
  
  res = ATUnitr.DepCode;
  TrHs = true;
  Invrsr.InventoryNr = ATUnitr.InventoryNr;
  Invrsr.FileName = "AT2TakeVc";
  Invrsr.TransDate = ed;
  while (LoopBackKey("FileName",Invrsr,3,TrHs)) begin
    if (Invrsr.InventoryNr!=ATUnitr.InventoryNr) then begin TrHs = false; end;
    if (Invrsr.FileName!="AT2TakeVc") then begin TrHs = false; end;
    if (Invrsr.TransDate>ed) then begin TrHs = false; end;
    if (TrHs) then begin
      ATTaker.SerNr = Invrsr.TransNr;
      if (ReadFirstMain(ATTaker,1,true)) then begin
        if (ATTaker.PhysCheckf==0) then begin
          res = ATTaker.DepCode;
          resd = ATTaker.TransDate;
          TrHs = false;
        end;
      end;
    end;
  end;    
  RETURN;
END;

global
function Integer GetDprModelDeprMethod(string dmcode)
BEGIN
  Integer res;
  record DprModVc DMr;
  
  res = -1;
  DMr.Code = dmcode;
  if (ReadFirstMain(DMr,1,true)) then begin
    res = DMr.DeprMethod;
  end;
  GetDprModelDeprMethod = res;
  RETURN;
END;

procedure DepreciationCalculation(Integer Model,Integer Comparison,Integer ArtMode,Integer PrintPeriodVals,Integer mode,Integer InclRevDpr,Integer SkipDisposed,
                             record AT2UnitVc ATUnitr,var record DprModVc DMr,Boolean dprmodelf,
                             val purchval,var val startval,var val resval,
                             Date startdate,Date enddate,
                             var val invdpr,var val invrevdpr,
                             var val totacumdpr,var val totrevacumdpr,
                             var val assetqty,
                             var val wrofqty,var val wrofsum,var val wrofdprsum,
                             var val lastrevval,var val revinperiod)
begin
  Integer lComparison;
  Date nexted,wrofd,lstartdate,lenddate;
  Date sd,ed,blankd;
  string 10 nextdmcode,dmcode;
  val nextstartval,nextresval,nextinitdeprval,nextwrofqty,tmp;
  Boolean stopdprf,qdeductedf;
  val dpr,dpr2,revval;
  val t,acumdpr,revacumdpr,q,nextwrdpr,nwrdpr,lassetqty,revinitdeprval;
  record AT2AccBlock AT2Ab;
  Boolean assetrevaluatedf;
  Date lastdprd;
  Date dtd;
  val dstartval,dresval;
  string 255 ddmcode;
  
  lassetqty = assetqty;
  if (lassetqty<=0) then begin
    dpr = (startval-resval);
    if (dpr<0) then begin dpr = 0; end;
    invdpr = dpr;
    goto LDepreciationCalculation;
  end;
  BlockLoad(AT2Ab);
  lComparison = Comparison;
  if (lComparison==2) then begin
    lComparison = DMr.DeprPeriod;
  end;
  lstartdate = startdate;
  lenddate = enddate;
//StopAlert("lstartdate " & lstartdate & " lenddate " & lenddate);
  if (lstartdate>lenddate) then begin
    goto LDepreciationCalculation;
  end;

  switch (lComparison) begin
    case 0:    
      lstartdate.day = 1;
      lenddate.day = DaysInMonth(lenddate.year,lenddate.month);
    case 1: ;
    case 2:
      lstartdate.day = 1;
      lenddate.day = DaysInMonth(lenddate.year,lenddate.month);
    case 3:
      lstartdate.day = 1;
      lenddate.day = DaysInMonth(lenddate.year,lenddate.month);
  end;
  switch (DMr.DeprMethod) begin  
    case 5:
      lastdprd = LastDprDate(enddate,ATUnitr.InventoryNr,Model,0,revinitdeprval);
      assetrevaluatedf = nonblankdate(lastdprd);
  end;

  while (GetNextData_Asset(Model,ATUnitr,DMr,lstartdate,lenddate,lComparison,assetrevaluatedf,nexted,nextdmcode,nextstartval,nextresval,nextinitdeprval,wrofd,nextwrofqty,nextwrdpr,stopdprf)) begin
    qdeductedf = false;
    nwrdpr = 0;
/*
    if (AT2Ab.LastMonthDispDprCalc!=0) then begin
      switch (lComparison) begin
        case 0: 
          if (startdate==lstartdate) then begin          
            q = CurMonthWrOfQty(lstartdate,lComparison,ATUnitr,nwrdpr);
            lassetqty = lassetqty - q;
            if (q!=0) then begin
              wrofsum = wrofsum + nextwrofqty*startval;
              wrofdprsum = wrofdprsum + q*nwrdpr;
              qdeductedf = true;
            end;
          end;
        case 2: 
          if (startdate==lstartdate) then begin
            q = CurMonthWrOfQty(lstartdate,lComparison,ATUnitr,nwrdpr);
            lassetqty = lassetqty - q;
            if (q!=0) then begin
              wrofsum = wrofsum + nextwrofqty*startval;
              wrofdprsum = wrofdprsum + nextwrofqty*nextwrdpr;
              qdeductedf = true;
            end;
          end;          
      end;
    end;   
*/    
    RevaluationOnDate(Model,lComparison,ATUnitr.InventoryNr,lstartdate,blankd,startval,resval,dmcode);
    if (HasLocalization("LTU")) then begin
      dstartval = blankval;
      RevaluationOnDate(3,lComparison,ATUnitr.InventoryNr,lstartdate,enddate,dstartval,dresval,ddmcode);
    end;
    
//StopAlert("sd " & sd & " ed " & ed & " nextwrofqty " & nextwrofqty & " lassetqty " & lassetqty);

//StopAlert("sd " & sd & " ed " & ed & " nextstartval " & nextstartval & " startval " & startval & " lstartdate " & lstartdate);
    if (nonblank(dmcode)) then begin
      if (dmcode!=DMr.Code) then begin
        DMr.Code = dmcode;
        if (ReadFirstMain(DMr,1,true)) then begin end;
      end;
    end;
    
    sd = lstartdate;
    ed = nexted;
    if (sd>ed) then begin    
      goto LDepreciationCalculation;
    end;
    if (nextstartval!=0) then begin
      revval = nextstartval - purchval;
    end;
    revinperiod = revval;
    
//StopAlert("lassetqty " & lassetqty & " startval " & startval & " resval " & resval & " nextwrofqty  " & nextwrofqty & " sd " & sd & " ed " & ed);

    if ((lassetqty*(startval-resval))>totacumdpr) then begin
      switch (DMr.DeprMethod) begin  
        case 1: DeprSegmentNew(lComparison,DMr,sd,ed,startval,dpr,resval,totacumdpr);
        case 2: DeprSegmentNew(lComparison,DMr,sd,ed,startval,dpr,resval,acumdpr+totacumdpr);
        case 3: DeprSegmentNew(lComparison,DMr,sd,ed,startval,dpr,resval,acumdpr+totacumdpr);
        case 4: DeprSegmentNew(lComparison,DMr,sd,ed,startval,dpr,resval,totacumdpr);
        case 5: DeprSegmentNew(lComparison,DMr,sd,ed,startval,dpr,resval,acumdpr+totacumdpr);
      end; 
    end;
    if (HasLocalization("LTU")) then begin
      if (blank(dstartval)==false) then begin
        startval = dstartval;
      end;
    end;
    invdpr = invdpr + lassetqty*dpr;
    if (lassetqty==0) then begin
      dpr = (startval-resval);
      if (dpr<0) then begin dpr = 0; end;
      invdpr = dpr;
    end else begin
      if (invdpr>(lassetqty*startval-lassetqty*resval)) then begin
//        invdpr = invdpr - lassetqty*dpr;
        invdpr = invdpr - lassetqty*startval-lassetqty*resval;
        dpr = (startval-resval);
        if ((invdpr+dpr)>(lassetqty*startval-lassetqty*resval)) then begin
          dpr = (startval-resval-invdpr);
        end;
        if (dpr<0) then begin dpr = 0; end;
        invdpr = invdpr + lassetqty*dpr;
      end; 
    end;
    if (revval!=0) then begin
      dpr2 = blankval; 
      DeprSegmentNew(lComparison,DMr,sd,ed,revval,dpr2,resval,totrevacumdpr);
      invrevdpr = invrevdpr + dpr2*lassetqty;
    end;
//StopAlert("sd " & sd & " ed " & ed & " dpr " & dpr & " revval " & revval);

    if ((ArtMode==1) and (mode==1)) begin
      if (dprmodelf) then begin
        PrintDprModelInfo(DMr,sd,ed);
      end;
      if (dpr!=0) and (PrintPeriodVals!=0)  then begin
        t = dpr*lassetqty; 
        PrintInventoryNrResult(false,ATUnitr,0.00,purchval*ATUnitr.Quantity,startval*ATUnitr.Quantity,0,t,0,dpr2*lassetqty,wrofsum,wrofdprsum,revinperiod*ATUnitr.Quantity,0,0,ArtMode,InclRevDpr,SkipDisposed);
      end;
    end;    
    if (nonblank(nextdmcode)) then begin
      if (nextdmcode!=DMr.Code) then begin
        DMr.Code = nextdmcode;
        if (ReadFirstMain(DMr,1,true)) then begin end;
      end;
    end;
//    if (AT2Ab.LastMonthDispDprCalc!=0) then begin
    if (false) then begin
      switch (lComparison) begin
        otherwise 
          if (qdeductedf==false) then begin
            lassetqty = lassetqty - nextwrofqty;
            wrofsum = wrofsum + nextwrofqty*startval;
            wrofdprsum = wrofdprsum + nextwrofqty*nextwrdpr;
          end;
      end;
    end else begin    
      switch (SkipDisposed) begin
        case 0:
          lassetqty = lassetqty - nextwrofqty;
          wrofsum = wrofsum + nextwrofqty*startval;
          wrofdprsum = wrofdprsum + nextwrofqty*nextwrdpr;
        case 1:
  //      lassetqty = lassetqty - nextwrofqty;
        case 2:
          lassetqty = lassetqty - nextwrofqty;
//          wrofsum = wrofsum + nextwrofqty*startval;
          wrofsum = wrofsum + nextwrofqty*startval;
          wrofdprsum = wrofdprsum + nextwrofqty*nextwrdpr;
      end;      
    end;
//StopAlert("2.lassetqty " & lassetqty & " SkipDisposed " & SkipDisposed & " nextwrofqty  " & nextwrofqty & " sd " & sd & " ed " & ed);
    wrofqty = wrofqty + nextwrofqty;
    switch (SkipDisposed) begin
      case 0:
      case 1:
        if (lassetqty<=0) then begin
          goto LDepreciationCalculation;
        end;
      case 2:
    end;
    if (DateInRange(wrofd,startdate,enddate)) then begin
    end;
    
    acumdpr = acumdpr + dpr;
    lstartdate = AddDay(nexted,1);
    lenddate = enddate;

//StopAlert("lstartdate " & lstartdate & " lenddate " & lenddate);

    if (nonblank(nextstartval)) then begin
      startval = nextstartval;        
    end else begin
      nextstartval = startval;
    end;

    lastrevval = revval;
    if (nonblank(nextresval)) then begin
      resval = nextresval;
    end;    
    dpr = 0;
    if (lenddate>enddate) then begin
      goto LDepreciationCalculation;
    end;
  end;
LDepreciationCalculation:;  
  totacumdpr = totacumdpr + acumdpr;
  totrevacumdpr = totrevacumdpr + revacumdpr;

  switch (SkipDisposed) begin
    case 0:
    case 1:
      assetqty = lassetqty;
  end;
  RETURN;
END;

/*
          if (DateInRange(wrofd,sStartDate,sEndDate)) then begin
            wrofsum = wrofsum + wrofqty*startval;
            lastwrofd = wrofd;
            totwrofqty = totwrofqty + wrofqty;
            totwrofsum = totwrofsum + wrofsum;
          end;
          if (nonblankdate(wrofd)) then begin//wrofd<sStartDate
            switch (DMr.DeprMethod) begin
              case 1: dprbefwrof = dprbefwrof + dprv;
              case 2: dprbefwrof = dprbefwrof + dprbef;
              case 3: dprbefwrof = dprbefwrof + dprbef;
            end;
          end;
          totwrofsum = totwrofsum - dprbefwrof;
        end;

*/

procedure OneInventoryNrDepreciation_DepreciationBeforeCurrentPeriod_SVK(record AT2UnitVc orgATUr,record DprModVc DMr,
                                    Integer mode,Integer ArtMode,Date sStartDate,
                                    Integer Model,Integer UseFiscalVal,Integer LastOfficialRev,Integer Comparison,Integer SkipDisposed,
                                    Integer InclRevDpr,Integer PrintPeriodVals,
                                    val assetqty,val purchval,var val startval,val resval,val wrofqty,val wrofsum,val wrofdprsum,
                                    Date stdprdate,Date aenddatebef,
                                    var val acumdpr,var val invdprbef)
begin
  Date pysd,ed,fullyearsd,enddatebef,td;
  record AT2UnitVc ATUr;
  val t,lastrevval;
  val fullyearacumdpr,fullyearrevacumdpr,fullyearinvdprbef,fullyearinvrevdprbef;
  val pyinvdprv,pyinvrevdprv,pyacumdpr,pyrevacumdpr,pyinvdprbef,pyinvrevdprbef;
  Boolean testf;

  RecordCopy(ATUr,orgATUr);
  invdprbef = blankval;

  td = orgATUr.StartingDate1; td.month = 1; td.day = 1;
  ATUr.StartingDate1 = td;
  enddatebef = aenddatebef; enddatebef.month = 12; enddatebef.day = 31;

  fullyearsd = ATUr.StartingDate1;
  pysd = stdprdate;
  if (pysd<enddatebef and pysd.year!=GetYear(sStartDate)) then begin
    testf = true;
  end;
  while (testf) begin
    ed = pysd; ed.month = 12; ed.day = 31;
    
    pyinvdprv = blankval;
    pyacumdpr = fullyearacumdpr;


    DepreciationCalculation(Model,Comparison,ArtMode,PrintPeriodVals,mode,InclRevDpr,SkipDisposed,ATUr,DMr,true,purchval,startval,resval,pysd,ed,pyinvdprv,pyinvrevdprv,pyacumdpr,pyrevacumdpr,assetqty,wrofqty,wrofsum,wrofdprsum,lastrevval,t);
    invdprbef = invdprbef + pyinvdprv;

    DepreciationCalculation(Model,Comparison,ArtMode,PrintPeriodVals,mode,InclRevDpr,SkipDisposed,ATUr,DMr,false,purchval,startval,resval,fullyearsd,ed,fullyearinvdprbef,fullyearinvrevdprbef,fullyearacumdpr,fullyearrevacumdpr,assetqty,wrofqty,wrofsum,wrofdprsum,lastrevval,t);

    pysd = AddYear(pysd,1); pysd.month = 1; pysd.day = 1;
    
    fullyearsd = AddYear(fullyearsd,1);

    if (pysd>enddatebef) then begin
      testf = false;
    end;

  end;
  if (MatRowCnt(DMr)>0) then begin
    if ((enddatebef.year-stdprdate.year+1)==MatRowCnt(DMr)) then begin
//last year of revaluation takes it all
      invdprbef = startval;
    end;
  end;

  acumdpr = fullyearacumdpr;
  if (acumdpr>=startval) then begin
    acumdpr = invdprbef;
  end;

  return;
end;

global
procedure OneInventoryNrDepreciation(record AT2UnitVc ATUnitr,Integer mode,Integer ArtMode,Date sStartDate,Date sEndDate,
                                     Integer Model,Integer UseFiscalVal,Integer LastOfficialRev,Integer Comparison,Integer SkipDisposed,
                                     Integer InclRevDpr,Integer PrintPeriodVals,
                                     var val totwrofqty,var val totwrofsum,var val totwrofdprsum,var val purchval,var val startval,var val invdprv,var val invdprbef,
                                     var val invrevdprv,var val invrevdprbef,var val revbef,var val fwdassetqty,var val assetqty,
                                     var val thestartval)
begin
  string 20 dmcode;
  Date sd,pd,ed,td,dprstartdate,startdate,enddate,usedfromdate,enddatebef,revenddate;
  val dprbef,resval,mindprval,dprv,portstartval,lastrevval,revinitdeprval;
  val wrofsum,t,wrofqty,wrofdprsum,aqty;
  val wq,sq;
  record DprModVc DMr;
  Boolean skipwriteof,wroff,stopdprf;  
  Date bd,wrofd;
  Date nextsd,nexted;
  Date stdprdate;
  Integer lComparison,alreadydonef;
  val acumdpr,revacumdpr;
  Date lastdprd;
  record AT2UnitVc tmpATUr;
  
  invdprv = blankval;
  invdprbef = blankval;
  totwrofqty = blankval;
  startdate = sStartDate;
  if (blank(startdate)) then begin
    startdate = CurrentDate;
  end;
  enddate = sEndDate;
  assetqty = ATUnitr.Quantity;

  if (assetqty==0) then begin
    assetqty = 1;
  end;
  resval = ATUnitr.ResVal + ATUnitr.LandVal;
  mindprval = ATUnitr.MinDprVal; 
  if (blank(startval)) then begin
    startval = ATUnitr.PurchVal;
  end;
  if (blank(purchval)) then begin
    purchval = ATUnitr.PurchVal;
  end;
  usedfromdate = ATUnitr.PurchaseDate;
  if (nonblankdate(ATUnitr.UsedFromDate)) then begin
    usedfromdate = ATUnitr.UsedFromDate;
  end;
  switch (Model) begin
    case 0:
      dmcode = ATUnitr.Model1;
      sd = ATUnitr.StartingDate1;
      pd = ATUnitr.StartingDate1; 
      dprbef = ATUnitr.InitDeprVal1*ATUnitr.Quantity;
      stdprdate = ATUnitr.StartingDate1;
    case 1:
      dmcode = ATUnitr.Model2;
      sd = ATUnitr.StartingDate2;
      pd = ATUnitr.StartingDate2; 
      dprbef = ATUnitr.InitDeprVal2*ATUnitr.Quantity;
      if (ATUnitr.PurchVal2>0) then begin
        if (blank(startval)) then begin
          startval = ATUnitr.PurchVal2;
        end;
        if (nonblank(ATUnitr.PurchVal2)) then begin
          purchval = ATUnitr.PurchVal2;
        end;
      end;
      stdprdate = ATUnitr.StartingDate2;
  end;  
  if (stdprdate>startdate) then begin
    startdate = stdprdate;
  end;
  if (UseFiscalVal!=0) then begin
    startval = ATUnitr.FiscalVal;
    purchval = ATUnitr.FiscalVal;
  end;

  DMr.Code = dmcode;
  if (ReadFirstMain(DMr,1,true)) then begin end;
  lComparison = Comparison;
  if (lComparison==2) then begin
    lComparison = DMr.DeprPeriod;
  end;
  if (DMr.LifecycleYears>0) then begin
    if (nonblankdate(usedfromdate)) then begin
      if (AddYear(usedfromdate,DMr.LifecycleYears)<enddate) then begin
        lastdprd = LastDprDate(sEndDate,ATUnitr.InventoryNr,Model,0,revinitdeprval);
        if (nonblankdate(lastdprd)) then begin
          enddate = AddYear(lastdprd,DMr.LifecycleYears);     
          enddate = AddDay(enddate,-1);
        end else begin
          enddate = AddYear(usedfromdate,DMr.LifecycleYears);     
          enddate = AddDay(enddate,-1);
        end;
        if (enddate>sEndDate) then begin
          enddate = sEndDate;
        end;
      end;
    end;
  end else begin
    revenddate = LastDprDate(sEndDate,ATUnitr.InventoryNr,Model,1,revinitdeprval);
  end; 
//  skipwriteof = DMr.DeprPeriod==2;     
  switch (SkipDisposed) begin
    case 0:
      wrofd.day = 1; wrofd.month = 1; wrofd.year = 1980;
      if (GetInventoryNrWrofSoldQuant(ATUnitr.InventoryNr,wrofd,enddate,wq,sq,wrofdprsum,wrofd)) then begin end;
    case 1:
      wrofd.day = 1; wrofd.month = 1; wrofd.year = 1980;
      if (GetInventoryNrWrofSoldQuant(ATUnitr.InventoryNr,wrofd,enddate,wq,sq,wrofdprsum,wrofd)) then begin end;
      assetqty = assetqty - (wq+sq);
  //    purchval = purchval*(assetqty/ATUnitr.Quantity);
    case 2:
      wrofd.day = 1; wrofd.month = 1; wrofd.year = 1980;
      if (GetInventoryNrWrofSoldQuant(ATUnitr.InventoryNr,wrofd,enddate,wq,sq,wrofdprsum,wrofd)) then begin end;
/*jjtmp
      if (wrofd<startdate) then begin
        assetqty = assetqty - (wq+sq);
      end;
*/
  end;
  
  startval = purchval;//only for declining
  switch (LastOfficialRev) begin
    case 0:
      if (AT2GetStartVal(Model,ATUnitr.InventoryNr,ATUnitr.StartingDate1,ATUnitr.StartingDate2,startval,startval,resval)) then begin end;
    case 1:
      if (GetLastDprStartVal(Model,ATUnitr.InventoryNr,startval,portstartval,t)) then begin end;
      startval = portstartval;
    case 2:
      if (GetLastOfficialDprStartVal(Model,ATUnitr.InventoryNr,startval,portstartval,t)) then begin end;
      startval = portstartval;
  end;
  invdprbef = dprbef;
  acumdpr = dprbef;
  wroff = false;
  enddatebef = AddDay(startdate,-1);
  if (DMr.LifecycleYears>0) then begin
    if (nonblankdate(usedfromdate)) then begin
      if (AddYear(usedfromdate,DMr.LifecycleYears)<enddatebef) then begin
//        enddatebef = AddYear(usedfromdate,DMr.LifecycleYears);
//        enddatebef = AddDay(enddatebef,-1);
//what is it used for ? 
// if u have realuation that has more years then Dpr Model on asset 
//for example start from 011007 and 2 years and rev. is 010609 and 3 years, report for 12 09 is wrong fwd bal
      end;
    end;
  end;

  if (HasLocalization("CZE,SVK")) then begin
    OneInventoryNrDepreciation_DepreciationBeforeCurrentPeriod_SVK(ATUnitr,DMr,mode,ArtMode,sStartDate,Model,UseFiscalVal,LastOfficialRev,Comparison,SkipDisposed,
                                    InclRevDpr,PrintPeriodVals,assetqty,purchval,startval,resval,wrofqty,wrofsum,wrofdprsum,stdprdate,enddatebef,acumdpr,invdprbef);
  end else begin
    DepreciationCalculation(Model,Comparison,ArtMode,PrintPeriodVals,mode,InclRevDpr,SkipDisposed,ATUnitr,DMr,true,purchval,startval,resval,stdprdate,enddatebef,invdprbef,invrevdprbef,acumdpr,revacumdpr,assetqty,wrofqty,wrofsum,wrofdprsum,lastrevval,revbef);
  end;
  
  if (blank(revinitdeprval)==false) then begin
//    invdprbef = revinitdeprval;
  end;
  thestartval = startval;

  fwdassetqty = assetqty;
//  totwrofdprsum = totwrofdprsum + wrofdprsum;
//  totwrofsum = totwrofsum + wrofsum;
  switch (SkipDisposed) begin
    case 0:  //this is done above
      aqty = assetqty - wrofqty;
/*      
      if (wrofd<startdate) then begin
      end;
*/      
    case 1:  //this is done above
      aqty = assetqty;
    otherwise
      aqty = assetqty - wrofqty;
  end;
  if (aqty>0) then begin
    if (HasLocalization("CZE,SVK")) then begin
      RecordCopy(tmpATUr,ATUnitr);

      td = ATUnitr.StartingDate1; td.month = 1; td.day = 1;
      tmpATUr.StartingDate1 = td;
      DepreciationCalculation(Model,Comparison,ArtMode,PrintPeriodVals,mode,InclRevDpr,SkipDisposed,tmpATUr,DMr,true,purchval,startval,resval,startdate,enddate,invdprv,invrevdprv,acumdpr,revacumdpr,aqty,wrofqty,wrofsum,wrofdprsum,lastrevval,t);
    end else begin
      DepreciationCalculation(Model,Comparison,ArtMode,PrintPeriodVals,mode,InclRevDpr,SkipDisposed,ATUnitr,DMr,true,purchval,startval,resval,startdate,enddate,invdprv,invrevdprv,acumdpr,revacumdpr,aqty,wrofqty,wrofsum,wrofdprsum,lastrevval,t);
    end;
  end else begin
    invdprbef = startval - resval;
  end;
  
  totwrofsum = totwrofsum + wrofsum;
  totwrofdprsum = totwrofdprsum + wrofdprsum;

//StopAlert("invdprbef " & invdprbef& " invdprv " & invdprv);
  if (DMr.LifecycleYears>0) then begin
    if (DMr.LifecycleYears==1) then begin
//      invdprv = invdprv - invdprbef;
//what is it for ? 
    end else begin
      if (DprYearsPassed(usedfromdate,DMr.LifecycleYears,sEndDate)) then begin
        if (DprYearsPassed(usedfromdate,DMr.LifecycleYears,sStartDate)) then begin
          invdprbef = ATUnitr.Quantity*startval;
        end else begin
          if (DprYearsPassed(usedfromdate,DMr.LifecycleYears-1,sEndDate)) then begin//last year
            if (assetqty>0) then begin
              if ((invdprbef + invdprv)<(ATUnitr.Quantity*startval)) then begin
//StopAlert("invdprv " & invdprv & " wrofsum " & wrofsum);                
                invdprv = ATUnitr.Quantity*startval - invdprbef;
              end;
            end;
          end;
        end;
      end;
    end;
  end else begin
    if (nonblankdate(revenddate)) then begin
      if (DateInRange(revenddate,sStartDate,sEndDate)) and (MonthDiff(sStartDate,sEndDate)==12) then begin
            if (assetqty>0) then begin
              if ((invdprbef + invdprv)<(ATUnitr.Quantity*startval)) then begin
//StopAlert("invdprv " & invdprv & " wrofsum " & wrofsum);
                invdprv = ATUnitr.Quantity*startval - invdprbef;
              end;
            end;
      end;
    end;
  end;
  if ((invdprv+invdprbef)>(ATUnitr.Quantity*startval)) then begin
    if (invdprbef>(ATUnitr.Quantity*startval)) then begin
      invdprbef = ATUnitr.Quantity*startval;
    end else begin
      invdprv = ATUnitr.Quantity*startval - invdprbef;
    end;
  end;
  
  if (purchval<startval) then begin
    t = startval*ATUnitr.Quantity;
  end else begin
    t = purchval*ATUnitr.Quantity;
  end;
//StopAlert("2. invdprv " & invdprv & " invdprbef " & invdprbef & " t " & t & " resval " & resval);  
  if ((invdprv+invdprbef)>(t - ATUnitr.Quantity*resval)) then begin
    if (invdprv!=0) then begin
      if (invdprbef>(t - ATUnitr.Quantity*resval)) then begin
        invdprbef = t - ATUnitr.Quantity*resval;
        invdprv = 0;
      end else begin
        invdprv = t-invdprbef-ATUnitr.Quantity*resval;
      end;
    end else begin
      invdprbef = t-ATUnitr.Quantity*resval;
    end;
  end; 
//StopAlert(" invdprv " & invdprv & " invdprbef " & invdprbef & " t " & t & " startval " & startval);  

LSKIPASSET:; 
  return;
end;

procedure AT2DeprCalculation_Parts(Boolean printf,record RcVc RepSpec,string MotherInventoryNr,
                                   var val partswrofqty,var val partswrofsum,var val partswrofdprsum,var val partspurchval,var val partsstartval,var val partsinvdprv,
                                   var val partsinvdprbef,var val partsinvrevdprv,var val partsinvrevdprbef,var val partsrevbef,var val partsfwdassetqty,
                                   var val partsassetqty,var val partsthestartval)
begin
  record AT2UnitVc ATUnitr;
  Boolean found;
  val wrofqty,wrofsum,wrofdprsum,purchval,startval,invdprv,invdprbef,invrevdprv,invrevdprbef,revbef,fwdassetqty,assetqty,thestartval;
  val InitDeprVal;

  partswrofqty = blankval;
  partswrofsum = blankval;
  partswrofdprsum = blankval;
  partspurchval = blankval;
  partsstartval = blankval;
  partsinvdprv = blankval;
  partsinvdprbef = blankval;
  partsinvrevdprv = blankval;
  partsinvrevdprbef = blankval;
  partsrevbef = blankval;
  partsfwdassetqty = blankval;
  partsassetqty = blankval;
  partsthestartval = blankval;
  
  found = nonblank(MotherInventoryNr);
  ATUnitr.MotherInvNr = MotherInventoryNr;
  while (LoopKey("MotherInvNr",ATUnitr,1,found)) begin
    if (ATUnitr.MotherInvNr!=MotherInventoryNr) then begin found = false; end; 
    if (found) then begin
      wrofqty = blankval;
      wrofsum = blankval;
      wrofdprsum = blankval;
      purchval = blankval;
      startval = blankval;
      invdprv = blankval;
      invdprbef = blankval;
      invrevdprv = blankval;
      invrevdprbef = blankval;
      revbef = blankval;
      fwdassetqty = blankval;
      assetqty = blankval;
      thestartval = blankval;
      if (RepSpec.flags[12]==2) then begin
        if (RepSpec.ArtMode!=0) then begin
          PrintInventoryNrDescr(true,ATUnitr,RepSpec.ArtMode);
        end;
      end;
      OneInventoryNrDepreciation(ATUnitr,1,RepSpec.ArtMode,RepSpec.sStartDate,RepSpec.sEndDate,
                                 RepSpec.flags[1],RepSpec.flags[7],RepSpec.flags[3],RepSpec.Comparison,RepSpec.flags[5],
                                 RepSpec.flags[10],RepSpec.flags[11],
                                 wrofqty,wrofsum,wrofdprsum,purchval,startval,invdprv,invdprbef,invrevdprv,invrevdprbef,revbef,fwdassetqty,assetqty,thestartval);

      if (RepSpec.flags[12]==2) then begin
        switch (RepSpec.flags[0]) begin
          case 0:
            InitDeprVal = ATUnitr.InitDeprVal1*ATUnitr.Quantity;
          case 1:
            InitDeprVal = ATUnitr.InitDeprVal2*ATUnitr.Quantity;
        end;
        if (printf) then begin
          PrintInventoryNrResult(true,ATUnitr,InitDeprVal,thestartval*assetqty,startval*assetqty,invdprbef,
                                 invdprv,invrevdprv,invrevdprbef,wrofsum,wrofdprsum,
                                 revbef*ATUnitr.Quantity,ATUnitr.Quantity*purchval,assetqty*startval,
                                 RepSpec.ArtMode,RepSpec.flags[10],RepSpec.flags[5]);
        end;
      end;

      partswrofqty = partswrofqty + wrofqty;
      partswrofsum = partswrofsum + wrofsum;
      partswrofdprsum = partswrofdprsum + wrofdprsum;
      partspurchval = partspurchval + purchval;
      partsstartval = partsstartval + startval;
      partsinvdprv = partsinvdprv + invdprv;
      partsinvdprbef = partsinvdprbef + invdprbef;
      partsinvrevdprv = partsinvrevdprv + invrevdprv;
      partsinvrevdprbef = partsinvrevdprbef + invrevdprbef;
      partsrevbef = partsrevbef + revbef;
      partsfwdassetqty = partsfwdassetqty + fwdassetqty;
      partsassetqty = partsassetqty + assetqty;
      partsthestartval = partsthestartval + thestartval;

    end;
  end;
  return;
end;

global
updating procedure AT2DeprStoreSimulation(record SMVc SMr)
begin
  SMr.SerNr = NextSerNr("SMVc",SMr.TransDate,-1,false,"");  
  RecordInsert(SMr,false);
  return;
end;

global
procedure AT2DeprCalculation(record RcVc RepSpec,Integer mode,var val totinitdprval,var val totpurchval,var val totstartval,var val totdprbef,var val totdprv,var val totresval,var val totwrofsum,var val totrevbef,
                                      var val totthestartval)
BEGIN
  record AT2UnitVc ATUnitr;
  Boolean TrHs,found,testf,writtenoff,assetqtynegf;
  string 30 frinv,toinv;
  string 20 frcat,tocat;
  Date startdate;
  val invdprbef,invdprv,purchval,startval,thestartval;
  val InitDeprVal,t,wrofsum,wrofqty,wrofdprsum;
  val classinvdprbef,classinvdprv,classpurchval,classwrofsum,classstartval,classwrofdprsum;
  string 20 dmcode,nextdmcode;  
  Date movddate,wrofd;
  record SMVc SMr;
  string 30 keystr;
  Date blankd;
  string 255 commentstr,tstr;
  val dprbefwrof;
  Integer sorting;
  string 20 lastat2class;
  record DprModVc DMr;
  val invrevdprv,invrevdprbef,revbef,assetqty,fwdassetqty;
  val totwrofdprsum;
  val partswrofqty,partswrofsum,partswrofdprsum,partspurchval,partsstartval,partsinvdprv,partsinvdprbef,partsinvrevdprv,partsinvrevdprbef,partsrevbef,partsfwdassetqty,partsassetqty,partsthestartval;
  
  frinv = FirstInRange(RepSpec.f2,30);    
  toinv = LastInRange(RepSpec.f2,30);    
  frcat = FirstInRange(RepSpec.f1,30);    
  tocat = LastInRange(RepSpec.f1,30);    
  TrHs = true;
  RecordNew(SMr);
  switch (RepSpec.flags[9]) begin
    case 0:
      keystr = "InventoryNr";
      sorting = 0;
    case 1:
      keystr = "AT2Class";
      sorting = 1;
  end;
  if (mode!=1) then begin 
    keystr = "AT2Code";
    ATUnitr.AT2Code = frcat;
    sorting = 5;
  end;
  ATUnitr.InventoryNr = frinv;
  while (LoopKey(keystr,ATUnitr,1,TrHs)) begin
    testf = true;
    if (nonblank(RepSpec.f2)) then begin      
      switch (sorting) begin
        case 0:
          if (ATUnitr.InventoryNr>toinv) then begin TrHs = false; end;
        otherwise
          if (ATUnitr.InventoryNr>toinv) then begin testf = false; end;
          if (ATUnitr.InventoryNr<frinv) then begin testf = false; end;
      end;  
    end;  
    if (nonblank(RepSpec.f1)) then begin      
      switch (sorting) begin
        case 0:
          if (ATUnitr.AT2Code<frcat) then begin testf = false; end;
          if (ATUnitr.AT2Code>tocat) then begin testf = false; end;
        otherwise
          if (ATUnitr.AT2Code<frcat) then begin TrHs = false; end;
          if (ATUnitr.AT2Code>tocat) then begin TrHs = false; end;
      end;
    end;  
    if (CheckAssetCatMatch(ATUnitr.AT2Code,ATUnitr.AT2Class,RepSpec.f3)==false) then begin testf = false; end;
    if (nonblank(RepSpec.AccStr)) then begin      
      FindLastAssetDepartment(ATUnitr,RepSpec.sEndDate,tstr,movddate);
      if (RepSpec.AccStr!=tstr) then begin
        testf = false;
      end;
    end;  
    if (nonblank(RepSpec.ObjStr)) then begin      
      if (SetInSet2(RepSpec.ObjStr,ATUnitr.Objects)==false) then begin testf = false; end;
    end;  
    if (RepSpec.flags[4]!=0) then begin
      if (ATUnitr.Activef!=0) then begin
        testf = false;
      end;
    end;
    switch (RepSpec.flags[5]) begin
      case 0:
      case 1:
        if (CheckifAT2UnitSold(ATUnitr.InventoryNr,AddDay(RepSpec.sEndDate,1))) then begin
          testf = false;
        end;
      case 2:
    end;
    switch (RepSpec.flags[6]) begin
      case 0:
        switch (RepSpec.flags[1]) begin
          case 0:
            if (ATUnitr.StartingDate1>RepSpec.sEndDate) then begin testf = false; end;
            if (blankdate(ATUnitr.StartingDate1)) then begin testf = false; end;
          case 1:
            if (ATUnitr.StartingDate2>RepSpec.sEndDate) then begin testf = false; end;
            if (blankdate(ATUnitr.StartingDate2)) then begin testf = false; end;
         end;
       case 1:  
         if (ATUnitr.PurchaseDate>RepSpec.sEndDate) then begin testf = false; end;
    end;
    if (testf) then begin
      if (RepSpec.flags[12]!=0) then begin
        testf = blank(ATUnitr.MotherInvNr);
      end;
    end;
    found = TrHs and testf;
    if (found) then begin
      assetqtynegf = false;
      if (sorting==1) then begin
        if (mode==1) then begin    
          if (nonblank(lastat2class)) then begin
            if (lastat2class!=ATUnitr.AT2Class) then begin
              switch (RepSpec.ArtMode) begin
                case 0:
                  Gray_Divider(2,1);
                  StartFormat(15);
                   OutString(100,0,lastat2class,false);
                   OutVal(3,0,classpurchval,M4Val,true);
                   OutVal(4,0,classpurchval-classinvdprbef,M4Val,true);
                   OutVal(6,0,classinvdprv,M4Val,true);
                   OutVal(1,0,(classstartval-(classinvdprv+classinvdprbef+classwrofsum)),M4Val,true);
                  EndFormat;
                  Gray_Divider(2,1);
                  classinvdprv = blankval;
                  classinvdprbef = blankval;
                  classpurchval = blankval;
                  classwrofsum = blankval;
                  classwrofdprsum = blankval;
                  classstartval = blankval;
              end;
            end;
          end;
        end;
      end;     
      if (blank(commentstr)) then begin
        commentstr = ATUnitr.InventoryNr;
      end;
      if (mode==1) then begin    
        PrintInventoryNrDescr(false,ATUnitr,RepSpec.ArtMode);
      end;        
      if (RepSpec.flags[12]!=0) and (RepSpec.ArtMode==0) then begin
        if (mode!=0) then begin       
          AT2DeprCalculation_Parts(false,RepSpec,ATUnitr.InventoryNr,
                                   partswrofqty,partswrofsum,partswrofdprsum,partspurchval,partsstartval,partsinvdprv,partsinvdprbef,partsinvrevdprv,
                                   partsinvrevdprbef,partsrevbef,partsfwdassetqty,partsassetqty,partsthestartval);
        end;
      end;
      wrofsum = blankval;
      purchval = blankval;
      startval = blankval;
      invdprv = blankval;
      invdprbef = blankval;
      invrevdprv = blankval;
      invrevdprbef = blankval;
      if (HasLocalization("CZE,SVK")) then begin
        OneInventoryNrDepreciation(ATUnitr,mode,RepSpec.ArtMode,RepSpec.sStartDate,RepSpec.sEndDate,
                                   RepSpec.flags[1],RepSpec.flags[7],RepSpec.flags[3],RepSpec.Comparison,RepSpec.flags[5],
                                   RepSpec.flags[10],RepSpec.flags[11],
                                   wrofqty,wrofsum,wrofdprsum,purchval,startval,invdprv,invdprbef,invrevdprv,invrevdprbef,revbef,fwdassetqty,assetqty,thestartval);
      end else begin
        OneInventoryNrDepreciation(ATUnitr,mode,RepSpec.ArtMode,RepSpec.sStartDate,RepSpec.sEndDate,
                                   RepSpec.flags[1],RepSpec.flags[7],RepSpec.flags[3],RepSpec.Comparison,RepSpec.flags[5],
                                   RepSpec.flags[10],RepSpec.flags[11],
                                   wrofqty,wrofsum,wrofdprsum,purchval,startval,invdprv,invdprbef,invrevdprv,invrevdprbef,revbef,fwdassetqty,assetqty,thestartval);
      end;
      if (wrofqty!=0) then begin
        if (RepSpec.ArtMode!=0) begin
          StartFormat(15);
           OutString(200,0,USetStr(9648),false);
           OutVal(320,0,wrofqty,M4Val,true);
          EndFormat;
        end;
      end;
      testf = true;
      switch (RepSpec.flags[5]) begin
        case 0:
        case 1:
          if (assetqty<=0) then begin testf = false; end;
        case 2:
//          if (assetqty<=0) then begin testf = false; end;//jjtmp
      end;
      if (testf==false) then begin
        goto LSKIPASSET;
      end;
      switch (RepSpec.flags[0]) begin
        case 0:
          InitDeprVal = ATUnitr.InitDeprVal1*ATUnitr.Quantity;
        case 1:
          InitDeprVal = ATUnitr.InitDeprVal2*ATUnitr.Quantity;
      end;
      classinvdprbef = classinvdprbef + invdprbef;
      classinvdprv = classinvdprv + invdprv;
      classwrofsum = classwrofsum + wrofsum;
      classwrofdprsum = classwrofdprsum + wrofdprsum;
      classpurchval = classpurchval + purchval*ATUnitr.Quantity;
      classstartval = classstartval + thestartval*ATUnitr.Quantity;      
      if (mode==1) then begin  
        totinitdprval = totinitdprval + InitDeprVal;
        totrevbef = totrevbef + revbef;
        totpurchval = totpurchval + purchval*assetqty;
        totdprbef = totdprbef + invdprbef;
        totdprv = totdprv + invdprv;  
        totresval = totresval +  ATUnitr.ResVal*assetqty;
        switch (RepSpec.flags[1]) begin
          case 0: DMr.Code = ATUnitr.Model1;
          case 1: DMr.Code = ATUnitr.Model2;
        end;

        if (assetqtynegf) then begin
          totstartval = 0;
          totthestartval = 0;
        end else begin
          totstartval = totstartval + startval*assetqty;
          if (ReadFirstMain(DMr,1,true)) then begin end;
          switch (DMr.DeprMethod) begin//what is this
            case 0:
              totthestartval = totthestartval + assetqty*thestartval;
            case 1:
              totthestartval = totthestartval + assetqty*thestartval;
            otherwise
  //            startval = startval + InitDeprVal*assetqty;
              
              totthestartval = totthestartval + assetqty*thestartval;
          end;
        end;
        if (RepSpec.ArtMode==0) then begin
          if (mode!=0) then begin  
            switch (RepSpec.flags[12]) begin
              case 1:
                t = invdprv + partsinvdprv;
                PrintInventoryNrResult(false,ATUnitr,InitDeprVal,thestartval*assetqty+partsthestartval,startval*assetqty+partsstartval,invdprbef+partsinvdprbef,
                                       t,invrevdprv+partsinvrevdprv,invrevdprbef+partsinvrevdprbef,wrofsum+partswrofsum,wrofdprsum+partswrofdprsum,
                                       revbef*ATUnitr.Quantity+partsrevbef,ATUnitr.Quantity*purchval+partspurchval,assetqty*startval+partsstartval,
                                       RepSpec.ArtMode,RepSpec.flags[10],RepSpec.flags[5]);
    
              case 2:
                t = invdprv + partsinvdprv;
                PrintInventoryNrResult(false,ATUnitr,InitDeprVal,thestartval*assetqty+partsthestartval,startval*assetqty+partsstartval,invdprbef+partsinvdprbef,
                                       t,invrevdprv+partsinvrevdprv,invrevdprbef+partsinvrevdprbef,wrofsum+partswrofsum,wrofdprsum+partswrofdprsum,
                                       revbef*ATUnitr.Quantity+partsrevbef,ATUnitr.Quantity*purchval+partspurchval,assetqty*startval+partsstartval,
                                       RepSpec.ArtMode,RepSpec.flags[10],RepSpec.flags[5]);
   
                if (mode!=0) then begin       
                  AT2DeprCalculation_Parts(true,RepSpec,ATUnitr.InventoryNr,
                                           partswrofqty,partswrofsum,partswrofdprsum,partspurchval,partsstartval,partsinvdprv,partsinvdprbef,partsinvrevdprv,
                                           partsinvrevdprbef,partsrevbef,partsfwdassetqty,partsassetqty,partsthestartval);
                end;
              otherwise
                PrintInventoryNrResult(false,ATUnitr,InitDeprVal,thestartval*assetqty,startval*assetqty,invdprbef,invdprv,invrevdprv,invrevdprbef,wrofsum,wrofdprsum,revbef*ATUnitr.Quantity,ATUnitr.Quantity*purchval,assetqty*startval,RepSpec.ArtMode,RepSpec.flags[10],RepSpec.flags[5]);
            end;
            totwrofsum =  partswrofsum + totwrofsum;
            totwrofdprsum = partswrofdprsum + totwrofdprsum;
            totpurchval = partspurchval + totpurchval;
            totstartval = partsstartval + totstartval;
            totdprv = partsinvdprv + totdprv;
            totdprbef = partsinvdprbef + totdprbef;
            totrevbef = partsrevbef + totrevbef;
            totthestartval = partsthestartval + totthestartval;
      

//var val totinitdprval,,var val totresval,,
                                      
                                            
          end;
        end else begin
//        t = invdprv;
//        PrintInventoryNrResult(ATUnitr,InitDeprVal,thestartval*ATUnitr.Quantity,startval*ATUnitr.Quantity,invdprbef,t,invrevdprv,invrevdprbef,wrofsum,wrofdprsum,revbef*ATUnitr.Quantity,ATUnitr.Quantity*purchval,assetqty*startval,RepSpec.ArtMode,RepSpec.flags[10]);
          PrintInventoryNrResult(false,ATUnitr,InitDeprVal,thestartval*assetqty,startval*assetqty,invdprbef,invdprv,invrevdprv,invrevdprbef,wrofsum,wrofdprsum,revbef*ATUnitr.Quantity,ATUnitr.Quantity*purchval,assetqty*startval,RepSpec.ArtMode,RepSpec.flags[10],RepSpec.flags[5]);
          switch (RepSpec.flags[12]) begin
            case 2:
              if (mode!=0) then begin       
                AT2DeprCalculation_Parts(true,RepSpec,ATUnitr.InventoryNr,
                                         partswrofqty,partswrofsum,partswrofdprsum,partspurchval,partsstartval,partsinvdprv,partsinvdprbef,partsinvrevdprv,
                                         partsinvrevdprbef,partsrevbef,partsfwdassetqty,partsassetqty,partsthestartval);
              end;
          end;
        end;
        

        totwrofsum = totwrofsum + wrofsum;
        totwrofdprsum = totwrofdprsum + wrofdprsum; 
        wrofsum = blankval;
      end;
      if (mode!=1) then begin       
        AddSMDprRowRows(RepSpec,ATUnitr,invdprv,invrevdprv,mode,SMr,commentstr);
        if (mode==0) then begin
          MaintTrace(ATUnitr.InventoryNr);
        end;  
      end;

      lastat2class = ATUnitr.AT2Class;      
    end; 
LSKIPASSET:;
  end;//LoopMain(ATUnitr)
  if (sorting==1) then begin
    if (mode==1) then begin    
      if (nonblank(lastat2class)) then begin
          switch (RepSpec.ArtMode) begin
            case 0:
              Gray_Divider(2,1);
              StartFormat(15);
               OutString(100,0,lastat2class,false);
               OutVal(3,0,classpurchval,M4Val,true);
               OutVal(4,0,classpurchval-classinvdprbef,M4Val,true);
               OutVal(6,0,classinvdprv,M4Val,true);
               OutVal(1,0,(classstartval-(classinvdprv+classinvdprbef+classwrofsum)),M4Val,true);
              EndFormat;
              Gray_Divider(2,1);
          end;
      end;
    end;
  end;

  if (mode!=1) then begin//for maintanance 
    if (RepSpec.flags[6]==0) then begin
      SMr.Comment = RepSpec.f2;
      if (SMr.SerNr<=0) then begin
        SMr.SerNr = NextSerNr("SMVc",SMr.TransDate,-1,false,"");  
      end;
      if (mode==0) then begin
        if (MatRowCnt(SMr)>0) then begin
          if (SMr.SerNr>0) then begin
            commentstr = commentstr & ATUnitr.InventoryNr;
            SMSumup(SMr);             
            SMr.Comment = USetStr(9649);
            SMr.Comment = SMr.Comment & ": " & RepSpec.sStartDate;
            SMr.Comment = SMr.Comment & ":" & RepSpec.sEndDate;
            qupdating.AT2DeprStoreSimulation(SMr);
//            if (RecordInsert(SMr,false)) then begin end;
          end;  
        end;  
      end;  
      if (mode==2) then begin      
        if (MatRowCnt(SMr)>0) then begin 
          SMSumup(SMr);             
          PrintSMRecord(SMr,1);
        end;  
      end;          
    end;
  end;  
  
  return;
end;

global
updating procedure AT2DeprRn(record RcVc RepSpec)
begin    
  val totdprbef,totdprv,totinitdprval,totpurchval,totstartval,totresval,totwrofsum,totrevbef,totthestartval;
  
  StartReportJob(USetStr(9635));
  PrintAT2DprHeader(RepSpec);
  EndHeader;
  SetRepCol(2,70);
  SetRepCol(3,220);
  if (RepSpec.ArtMode==0) then begin
    SetRepCol(4,300);
    SetRepCol(5,360);
    SetRepCol(6,420);
    StartFormat(15);    
     OutString(0,0,USetStr(9001),false);
     OutString(2,0,USetStr(9002),false);
     OutString(3,0,USetStr(8780),true);
     OutString(4,0,USetStr(2495),true);
     OutString(5,0,USetStr(9651),true);
     OutString(6,0,USetStr(5284),true);
     OutString(1,0,USetStr(5298),true);
    EndFormat;
    Gray_Divider(0,1);
  end else begin
    SetRepCol(4,320);
    SetRepCol(5,400);
    StartFormat(15);
     OutString(4,0,USetStr(5283),true);
     OutString(5,0,USetStr(5284),true);
     OutString(1,0,USetStr(5298),true);
    EndFormat;    
    Gray_Divider(0,1);
  end;
  AT2DeprCalculation(RepSpec,1,totinitdprval,totpurchval,totstartval,totdprbef,totdprv,totresval,totwrofsum,totrevbef,totthestartval);
  Black_Divider(0,1);
  if (RepSpec.ArtMode==0) then begin
    PrintInventoryNrResultTotals(totresval,totinitdprval,totthestartval,totstartval,totdprbef,totdprv,totwrofsum,totrevbef,RepSpec.ArtMode,RepSpec.flags[5]);
  end else begin
    PrintInventoryNrResultTotals(totresval,totinitdprval,totthestartval,totstartval,totdprbef,totdprv,totwrofsum,totrevbef,RepSpec.ArtMode,RepSpec.flags[5]);
  end;
  Black_Divider(0,1);
  EndJob;
  return;
end;


