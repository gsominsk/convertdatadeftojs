external procedure AutomatedSalesOrderly(string);
external procedure ToStrTRCode(var string,Integer,LongInt);
external procedure HT2Per(Date, Date , var string);
external procedure TRExtYc(record TRVc,var string);
external procedure FindFiscalYear(Date,var Date,var Date);
external procedure GetNext2Sep(string,var Integer,var string);
external procedure GetNextToken(string,var Integer,var string);
external function Boolean GetNextTokenReturn(string,var Integer,var string);

procedure ExportTotal(string desc,val totservval,val tototherval,val totexpval,val totexpreprval,val totexpcashval,
                      val totexpotherval,val totpinv)
begin
  StartFormat(15);
   ExportString("");
   ExportString("");
   ExportString("");
   ExportString("");
   ExportString("");
   ExportString(desc);
   ExportVal(totservval,M4Val);
   ExportVal(tototherval,M4Val);
   ExportVal(totservval+tototherval,M4Val);
   ExportVal(totpinv,M4Val);
   ExportVal(totexpval,M4Val);
   ExportVal(totexpcashval,M4Val);
   ExportVal(totexpotherval,M4Val);
   ExportVal(totexpcashval+totexpotherval,M4Val);
   ExportString("");
   ExportString("");
  EndFormat;
  return;
end;

procedure FileRow(record TRVc TRr,val servval,val otherval,val expval,val expreprval,val expcashval,val expotherval,val pinv,
                  var val totservval,var val tototherval,var val totexpval,var val totexpreprval,var val totexpcashval,
                  var val totexpotherval,var val totpinv,var LongInt runnr)
BEGIN
  record IVVc IVr;
  record VIVc VIr;
  string 255 company,address,comment,number;
  record CUVc CUr;
  Date td;

  comment = TRr.Comment;
  address = TRr.RefStr;
  number = TRr.Number;
  td = TRr.TransDate;
  if (TRr.IntYc<IVYc) then begin
    ToStrTRCode(number,TRr.IntYc,TRr.Number);
  end;
  switch (TRr.IntYc) begin
    case IVYc: 
      IVr.SerNr = TRr.Number;
      if (ReadFirstMain(IVr,1,true)) then begin 
        company = IVr.Addr0;
        comment = IVr.InvComment;
        CUr.Code = IVr.CustCode;
        ReadFirstMain(CUr,1,true);
        number = TRr.Number;
      end;
    case VIYc: 
      VIr.SerNr = TRr.Number;
      if (ReadFirstMain(VIr,1,true)) then begin 
        company = VIr.VEName;
        comment = VIr.Comment;
        CUr.Code = VIr.VECode;
        ReadFirstMain(CUr,1,true);
        number = VIr.InvoiceNr & " (" & TRr.Number & ")";
        td = VIr.InvDate;
      end;
  end;
  StartFormat(15);
   ExportLongInt(runnr);
   ExportDate(td);
   ExportString(number);   
   ExportString(company);
   ExportString(CUr.InvAddr0 & " " & CUr.InvAddr1 & " " & CUr.InvAddr2);
   ExportString(TRr.Comment);      
   ExportVal(servval,M4Val);
   ExportVal(otherval,M4Val);
   ExportVal(servval+otherval,M4Val);   
   ExportVal(pinv,M4Val);
   ExportVal(expval,M4Val);
   ExportVal(expcashval,M4Val);
   ExportVal(expotherval,M4Val);
   ExportVal(expcashval+expotherval,M4Val);
   ExportString("");
   ExportString("");
  EndFormat;
  totservval = totservval + servval;
  tototherval = tototherval + otherval;
  totexpval = totexpval + expval;
  totexpreprval = totexpreprval + expreprval;
  totexpcashval = totexpcashval + expcashval;
  totexpotherval = totexpotherval + expotherval;
  totpinv = totpinv + pinv;
  runnr = runnr + 1;
  RETURN;
END;

procedure PrinterRow(record TRVc TRr,val servval,val otherval,val expval,val expreprval,val expcashval,val expotherval,val pinv,
                    var val totservval,var val tototherval,var val totexpval,var val totexpreprval,var val totexpcashval,
                    var val totexpotherval,var val totpinv,
                    var val acumservval,var val acumotherval,var val acumexpval,var val acumexpreprval,var val acumexpcashval,
                    var val acumexpotherval,var val acumpinv,
                    var LongInt runnr)
BEGIN
  record IVVc IVr;
  record VIVc VIr;
  record CUVc VEr;
  string 255 company,address1,address2,address3,comment,number,refstr;
  Date td;
  Integer invalid;

  comment = TRr.Comment;
  refstr = TRr.RefStr;
  number = TRr.Number;
  td = TRr.TransDate;
  if (TRr.IntYc<IVYc) then begin
    ToStrTRCode(number,TRr.IntYc,TRr.Number);
  end;
  switch (TRr.IntYc) begin
    case IVYc: 
      IVr.SerNr = TRr.Number;
      if (ReadFirstMain(IVr,1,true)) then begin 
        company = IVr.Addr0;
        address1 = IVr.Addr1;
        address2 = IVr.Addr2;
        address3 = IVr.Addr3;
        comment = IVr.InvComment;
        number = TRr.Number;
        invalid = IVr.Invalid;
      end;
    case VIYc: 
      VIr.SerNr = TRr.Number;
      if (ReadFirstMain(VIr,1,true)) then begin 
        company = VIr.VEName;
        VEr.Code = VIr.VECode;
        if (ReadFirstMain(VEr,1,true)) then begin end;
        company = VIr.VEName;
        address1 = VEr.InvAddr0;
        address2 = VEr.InvAddr1;
        address3 = VEr.InvAddr2;
        comment = VIr.Comment;
        number = VIr.InvoiceNr & " (" & TRr.Number & ")";
        td = VIr.InvDate;
        invalid = VIr.Invalid;
      end;
  end;
  StartFormat(15);
   OutLongInt(0,0,runnr,false);
   OutDateOvst(30,0,td,false,invalid);
   OutStringID(90,"DblTRIDVc",number,false,TRr.Number & ":" & TRr.IntYc);
   OutValOvst(3,0,servval,M4Val,true,invalid);
   OutValOvst(4,0,otherval,M4Val,true,invalid);
   OutValOvst(5,0,servval+otherval,M4Val,true,invalid);
   OutValOvst(6,0,pinv,M4Val,true,invalid);
   OutValOvst(7,0,expval,M4Val,true,invalid);
//   OutValOvst(7,0,expreprval,M4Val,true,invalid);
   OutValOvst(8,0,expcashval,M4Val,true,invalid);
   OutValOvst(440,0,expotherval,M4Val,true,invalid);
   OutValOvst(1,0,expcashval+expotherval,M4Val,true,invalid);
  EndFormat;

  if (invalid==0) then begin
    totservval = totservval + servval;
    tototherval = tototherval + otherval;
    totexpval = totexpval + expval;
    totexpreprval = totexpreprval + expreprval;
    totexpcashval = totexpcashval + expcashval;
    totexpotherval = totexpotherval + expotherval;
    totpinv = totpinv + pinv;

    acumservval = acumservval + servval;
    acumotherval = acumotherval + otherval;
    acumexpval = acumexpval + expval;
    acumexpreprval = acumexpreprval + expreprval;
    acumexpcashval = acumexpcashval + expcashval;
    acumexpotherval = acumexpotherval + expotherval;
    acumpinv = acumpinv + pinv;      

    AddToAccumulator(0,servval);
    AddToAccumulator(1,otherval);
    AddToAccumulator(2,servval+otherval);
    AddToAccumulator(3,pinv);
    AddToAccumulator(4,expval);
  //  AddToAccumulator(5,expreprval);
    AddToAccumulator(6,expcashval);
    AddToAccumulator(7,expotherval);
    AddToAccumulator(8,expcashval+expotherval);

    AddToAccumulator(10,servval);
    AddToAccumulator(11,otherval);
    AddToAccumulator(12,servval+otherval);
    AddToAccumulator(13,pinv);
    AddToAccumulator(14,expval);
  //  AddToAccumulator(15,expreprval);
    AddToAccumulator(16,expcashval);
    AddToAccumulator(17,expotherval);
    AddToAccumulator(18,expcashval+expotherval);
  end;
  
  if (nonblank(company)) then begin
    StartFormat(15);
     OutString(30,0,company,false);
    EndFormat;
  end;
  if (nonblank(address1)) or (nonblank(address2)) or (nonblank(address3)) then begin
    StartFormat(15);
     OutString(30,0,address1 & " " & address2 & " " & address3,false);
    EndFormat;
  end;
  if (nonblank(refstr)) then begin
    StartFormat(15);
     OutString(30,0,refstr,false);
    EndFormat;
  end;
  if (nonblank(TRr.Comment)) then begin
    StartFormat(15);
     OutString(30,0,TRr.Comment,false);
    EndFormat;
  end;
  Gray_Divider(0,1);
  
  StartFooter(45,true);
   Black_Divider(0,1);

   OutString(50,0,USetStr(2413),false);
   OutAccumulator(3,0,M4Val,true);
   OutAccumulator(4,1,M4Val,true);
   OutAccumulator(5,2,M4Val,true);
   OutAccumulator(6,3,M4Val,true);
   OutAccumulator(7,4,M4Val,true);
//   OutAccumulator(7,5,M4Val,true);
   OutAccumulator(8,6,M4Val,true);
   OutAccumulator(440,7,M4Val,true);
   OutAccumulator(1,8,M4Val,true);

   OutString(50,0,USetStr(2412),false);
   OutAccumulator(3,20,M4Val,true);
   OutAccumulator(4,21,M4Val,true);
   OutAccumulator(5,22,M4Val,true);
   OutAccumulator(6,23,M4Val,true);
   OutAccumulator(7,24,M4Val,true);
//   OutAccumulator(7,25,M4Val,true);
   OutAccumulator(8,26,M4Val,true);
   OutAccumulator(440,27,M4Val,true);
   OutAccumulator(1,28,M4Val,true);

   CopyAccumulator(20,10);
   CopyAccumulator(21,11);
   CopyAccumulator(22,12);
   CopyAccumulator(23,13);
   CopyAccumulator(24,14);
   CopyAccumulator(25,15);
   CopyAccumulator(26,16);
   CopyAccumulator(27,17);
   CopyAccumulator(28,18);
   
   ClearAccumulator(0);
   ClearAccumulator(1);
   ClearAccumulator(2);
   ClearAccumulator(3);
   ClearAccumulator(4);
   ClearAccumulator(5);
   ClearAccumulator(6);
   ClearAccumulator(7);
   ClearAccumulator(8);

   OutString(50,0,USetStr(2414),false);
   OutAccumulator(3,10,M4Val,true);
   OutAccumulator(4,11,M4Val,true);
   OutAccumulator(5,12,M4Val,true);
   OutAccumulator(6,13,M4Val,true);
   OutAccumulator(7,14,M4Val,true);
//   OutAccumulator(7,15,M4Val,true);
   OutAccumulator(8,16,M4Val,true);
   OutAccumulator(440,17,M4Val,true);
   OutAccumulator(1,18,M4Val,true);

  EndFooter;    

  runnr = runnr + 1;
  RETURN;
END;

procedure ScreenRow(record TRVc TRr,row TRVc updTRrw,val servval,val otherval,val expval,val expreprval,val expcashval,val expotherval,val pinv,
                    val servvalovst,val othervalovst,val expvalovst,val expreprvalovst,val expcashvalovst,val expothervalovst,val pinvovst,
                    var val totservval,var val tototherval,var val totexpval,var val totexpreprval,var val totexpcashval,
                    var val totexpotherval,var val totpinv,var LongInt runnr)
BEGIN
  record IVVc IVr;
  record VIVc VIr;
  record CUVc VEr;
  string 255 company,address1,address2,address3,comment,number,refstr,tstr;
  Date td;
  Integer invalid;

  comment = TRr.Comment;
  refstr = TRr.RefStr;
  number = TRr.Number;
  td = TRr.TransDate;
  if (TRr.IntYc<IVYc) then begin
    ToStrTRCode(number,TRr.IntYc,TRr.Number);
  end;
  switch (TRr.IntYc) begin
    case IVYc: 
      IVr.SerNr = TRr.Number;
      if (ReadFirstMain(IVr,1,true)) then begin 
        company = IVr.Addr0;
        address1 = IVr.Addr1;
        address2 = IVr.Addr2;
        address3 = IVr.Addr3;
        comment = IVr.InvComment;
        invalid = IVr.Invalid;
      end;
      if (IsStandardProduct) then begin
        number = TRr.RefStr;
        if (blank(number)) then begin
          number = IVr.SerNr & " (" & TRr.Number & ")";
        end;
      end;
    case VIYc: 
      VIr.SerNr = TRr.Number;
      if (ReadFirstMain(VIr,1,true)) then begin 
        VEr.Code = VIr.VECode;
        if (ReadFirstMain(VEr,1,true)) then begin end;
        company = VIr.VEName;
        address1 = VEr.InvAddr0;
        address2 = VEr.InvAddr1;
        address3 = VEr.InvAddr2;
        comment = VIr.Comment;
        number = VIr.InvoiceNr & " (" & TRr.Number & ")";
        td = VIr.InvDate;
        invalid = VIr.Invalid;
      end;
      if (IsStandardProduct) then begin
        number = TRr.RefStr;
        if (blank(number)) then begin
          number = VIr.InvoiceNr & " (" & TRr.Number & ")";
        end;
      end;
    otherwise 
      if (IsStandardProduct) then begin
        if (nonblank(TRr.RefStr)) then begin
          number = TRr.RefStr;
        end;
      end;
  end;
  StartFormat(15);
   OutLongInt(0,0,runnr,false);
   OutDateOvst(30,0,td,false,invalid);
   OutStringID(90,"DblTRIDVc",number,false,TRr.Number & ":" & TRr.IntYc);
//   OutString(290,"DblTRIDVc",TRr.RegDate & ":" & TRr.RegTime,false);
  EndFormat;
  if (nonblank(company)) then begin
    StartFormat(15);
     OutString(30,0,company,false);
    EndFormat;
  end;
  if (nonblank(address1)) then begin
    StartFormat(15);
     OutString(30,0,address1,false);
    EndFormat;
  end;
  if (nonblank(address2)) then begin
    StartFormat(15);
     OutString(30,0,address2,false);
    EndFormat;
  end;
  if (nonblank(address3)) then begin
    StartFormat(15);
     OutString(30,0,address3,false);
    EndFormat;
  end;  
  if (nonblank(TRr.Comment)) then begin
    StartFormat(15);
     OutString(30,0,TRr.Comment,false);
    EndFormat;
  end;
  if ((servvalovst!=0) or (othervalovst!=0) or (pinvovst!=0) or (expvalovst!=0) or (expreprvalovst!=0) or (expcashvalovst!=0) or (expothervalovst!=0)) then begin
    StartFormat(15);  
     OutDate(30,0,updTRrw.UpdDate,false);
     OutString(90,0,updTRrw.Sign,false);
     OutValOvst(3,0,servvalovst,M4Val,true,1);
     OutValOvst(4,0,othervalovst,M4Val,true,1);
     OutValOvst(5,0,servvalovst+othervalovst,M4Val,true,1);
     OutValOvst(6,0,pinvovst,M4Val,true,1);
     OutValOvst(7,0,expvalovst,M4Val,true,1);
//   OutValOvst(7,0,expreprvalovst,M4Val,true,1);
     OutValOvst(8,0,expcashvalovst,M4Val,true,1);
     OutValOvst(440,0,expothervalovst,M4Val,true,1);
     OutValOvst(1,0,expcashvalovst+expothervalovst,M4Val,true,1);
    EndFormat;
  end;
  StartFormat(15); 
   if (invalid!=0) then begin
     if (TRr.IntYc==IVYc) or (TRr.IntYc==VIYc) then begin
       OutDate(30,0,updTRrw.UpdDate,false);
       OutString(90,0,updTRrw.Sign,false);
     end;
   end;
   OutValOvst(3,0,servval,M4Val,true,invalid);
   OutValOvst(4,0,otherval,M4Val,true,invalid);
   OutValOvst(5,0,servval+otherval,M4Val,true,invalid);
   OutValOvst(6,0,pinv,M4Val,true,invalid);
   OutValOvst(7,0,expval,M4Val,true,invalid);
//   OutValOvst(7,0,expreprval,M4Val,true,invalid);
   OutValOvst(8,0,expcashval,M4Val,true,invalid);
   OutValOvst(440,0,expotherval,M4Val,true,invalid);
   OutValOvst(1,0,expcashval+expotherval,M4Val,true,invalid);
  EndFormat;
     
  if (invalid==0) then begin
    totservval = totservval + servval;
    tototherval = tototherval + otherval;
    totexpval = totexpval + expval;
    totexpreprval = totexpreprval + expreprval;
    totexpcashval = totexpcashval + expcashval;
    totexpotherval = totexpotherval + expotherval;
    totpinv = totpinv + pinv;
  end;
  runnr = runnr + 1;
  RETURN;
END;

function Boolean CheckAccount(string AccNumber,string Desc)
BEGIN
  string 255 Nitem;
  string 255 Nitem2;
  string 255 NRu;
  string 5 nsep;
  Integer np;
  Boolean res;

  if (blank(Desc)) then begin goto LCheckAccount; end; 
  np = 0;
  GetNext2Sep(Desc,np,nsep);
  while (GetNextTokenReturn(Desc,np,Nitem)) begin
    GetNext2Sep(Desc,np,nsep);
    if (nsep==".") then begin
      GetNextToken(Desc,np,NRu);
      GetNext2Sep(Desc,np,nsep);
    end else begin
      NRu = "";
    end;    
    if (nsep==":") then begin
      GetNextToken(Desc,np,Nitem2);
      GetNext2Sep(Desc,np,nsep);
    end else begin
      Nitem2 = "";
    end;    
    if (blank(Nitem2)) then begin
      if (Nitem==AccNumber) then begin 
        res = true; 
        goto LCheckAccount;
      end;
    end else begin
      if (Nitem<Nitem2) then begin
        if ((AccNumber>=Nitem) and (AccNumber<=Nitem2)) then begin 
          res = true; 
          goto LCheckAccount;
        end;
      end else begin
        if ((AccNumber<=Nitem2) and (AccNumber>=Nitem)) then begin 
          res = true; 
          goto LCheckAccount;
        end;
      end;
    end;
  end;
LCheckAccount:;  
  CheckAccount = res;
  RETURN;
END;

procedure TransactionSums(record TRVc TRr,row TRVc TRrw,var val salesandservval,var val othersalesval,var val expensev,
                          var val expensereprv,var val expensecashv,var val expenseotherv,var val pinv,var string description)
BEGIN
  record IncExpBookVc IncExpBookr;
  Boolean TrHs,testf;
  val v;
  record IVVc IVr;
  record VIVc VIr;

  TrHs = true;
  IncExpBookr.IdKey = 0; 
  while (LoopMain(IncExpBookr,1,TrHs)) begin
    if (TrHs) then begin
      testf = false;
      if (CheckAccount(TRrw.AccNumber,IncExpBookr.Desc)) then begin testf = true; end;
      if (testf==false) then begin
        if (CheckAccount(TRrw.AccNumber,IncExpBookr.Desc2)) then begin testf = true; end;
      end;
      if (testf==false) then begin
        if (CheckAccount(TRrw.AccNumber,IncExpBookr.Desc3)) then begin testf = true; end;
      end;
      if (TRr.IntYc==PUYc) then begin testf = false; end;
      if (testf) then begin
        if (TRr.IntYc<IVYc) then begin
          if (blank(description)) then begin
            description = TRrw.Comment;
          end else begin
            description = description & ", ";
            description = description & TRrw.Comment;
          end;
        end else begin
          switch (TRr.IntYc) begin
            case IVYc: 
//              IVr.SerNr = TRr.Number;
//              if (ReadFirstMain(IVr,1,true)) then begin 
//                description = IVr.InvComment;
//              end;
              if (blank(description)) then begin
                description = TRrw.Comment;
              end else begin
                description = description & ", ";
                description = description & TRrw.Comment;
              end;
            case VIYc: 
//              VIr.SerNr = TRr.Number;
//              if (ReadFirstMain(VIr,1,true)) then begin 
//                description = VIr.Comment;
//              end;
              if (blank(description)) then begin
                description = TRrw.Comment;
              end else begin
                description = description & ", ";
                description = description & TRrw.Comment;
              end;
            case ExpYc: 
              if (blank(description)) then begin
                description = TRrw.Comment;
              end else begin
                description = description & ", ";
                description = description & TRrw.Comment;
              end;
          end;
          if (blank(description)) then begin
            description = TRr.Comment;
          end;
        end;
        description = Left(description,60);
        switch (IncExpBookr.Type) begin
          case 1:
            v = TRrw.CredVal - TRrw.DebVal;
            salesandservval = salesandservval + v;
          case 2:
            v = TRrw.CredVal - TRrw.DebVal;
            othersalesval = othersalesval + v;
          case 3:
            v = TRrw.DebVal - TRrw.CredVal;
            pinv = pinv + v;
          case 4:
            v = TRrw.DebVal - TRrw.CredVal;
            expensev = expensev + v;
          case 5:
            v = TRrw.DebVal - TRrw.CredVal;
            expensereprv = expensereprv + v;
          case 6:
            v = TRrw.DebVal - TRrw.CredVal;
            expensecashv = expensecashv + v;
          case 7:
            v = TRrw.DebVal - TRrw.CredVal;
            expenseotherv = expenseotherv + v;
        end;
        TrHs = false;
      end;
    end;
  end;  
  if (nonblank(description)) then begin
    TRr.Comment = description;
  end;
  RETURN;
END;

global
procedure IncExpBookRn(record RcVc RepSpec)
BEGIN
  record TRVc TRr;
  row TRVc TRrw,updTRrw;
  Integer i,rwcnt,rw,updmarkrow;
  Boolean TrHs;
  LongInt runnr;
  val salesandservv,othersalesv,expensev,expensereprv,expensecashv,expenseotherv,pinv;
  val salesandservvovst,othersalesvovst,expensevovst,expensereprvovst,expensecashvovst,expenseothervovst,pinvovst;
  val totservval,tototherval,totexpval,totexpreprval,totexpcashval,totexpotherval,totpinv;
  val acumservval,acumotherval,acumexpval,acumexpreprval,acumexpcashval,acumexpotherval,acumpinv;
  Date fsdate,fedate;
  string 255 description,tstr;
  record CYBlock CYb;
  
  runnr = 1;
  if (RepSpec.long1>0) then begin
    runnr = RepSpec.long1;
  end;
  BlockLoad(CYb);
  StartReportJob(USetStr(14300));
   rw = 1;
   HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   if (nonblank(CYb.Addr0)) then begin
     Header(rw,CYb.Addr0,0);
     rw = rw + 1;
   end;
   if (nonblank(CYb.Addr1)) then begin
     Header(rw,CYb.Addr1,0);
     rw = rw + 1;
   end;
   if (nonblank(CYb.Addr2)) then begin
     Header(rw,CYb.Addr2,0);
     rw = rw + 1;
   end;
  EndHeader;
  
  switch (RepSpec.Media) begin
    case mtScreen:
      SetRepCol(2,80);
      SetRepCol(3,140);
      SetRepCol(4,180);
      SetRepCol(5,230);
      SetRepCol(6,280);
      SetRepCol(7,330);
      SetRepCol(8,380);
      
      StartFormat(15);
       OutString(30,0,USetStr(14302),false);
       OutString(160,0,USetStr(14313),true);
       OutString(410,0,USetStr(14314),true);
      EndFormat;
      StartFormat(15);
       OutString(0,0,USetStr(14301),false);
       OutString(30,0,USetStr(14304),false);
       OutString(90,0,USetStr(14303),false);
       OutString(3,0,USetStr(14308),true);
       OutString(4,0,USetStr(14310),true);
       OutString(5,0,USetStr(14315),true);
       OutString(6,0,USetStr(14317),true);
       OutString(7,0,USetStr(18400),true);
       OutString(8,0,USetStr(18402),true);
       OutString(430,0,USetStr(18404),true);
       OutString(1,0,USetStr(18406),true);
      EndFormat;
      StartFormat(15);
       OutString(30,0,USetStr(14307),false);
       OutString(3,0,USetStr(14309),true);
       OutString(4,0,USetStr(14311),true);
       OutString(5,0,USetStr(14316),true);
       OutString(6,0,USetStr(14318),true);
       OutString(7,0,USetStr(18401),true);
       OutString(8,0,USetStr(18403),true);
       OutString(430,0,USetStr(18405),true);
       OutString(1,0,USetStr(18407),true);
      EndFormat;
      Gray_Divider(0,1);
    case mtPamFax:
      goto LPrinterHeader;
    case mtPdf:
      goto LPrinterHeader;
    case mtPrinter:
LPrinterHeader:;    
      SetRepCol(2,170);
      SetRepCol(3,200);
      SetRepCol(4,240);
      SetRepCol(5,280);
      SetRepCol(6,320);
      SetRepCol(7,360);
      SetRepCol(8,400);      
      StartHeader2(45,true);
      StartFormat(15);
       OutString(30,0,USetStr(14302),false);
       OutString(220,0,USetStr(14313),true);
       OutString(420,0,USetStr(14314),true);
      EndFormat;
      StartFormat(15);
       OutString(0,0,USetStr(14301),false);
       OutString(30,0,USetStr(14304),false);
       OutString(90,0,USetStr(14303),false);
       OutString(200,0,USetStr(14308),true);
       OutString(240,0,USetStr(14310),true);
       OutString(280,0,USetStr(14315),true);
       OutString(320,0,USetStr(14317),true);
       OutString(360,0,USetStr(18400),true);
       OutString(400,0,USetStr(18402),true);
       OutString(440,0,USetStr(18404),true);
       OutString(1,0,USetStr(18406),true);
      EndFormat;
      StartFormat(15);
       OutString(30,0,USetStr(14307),false);
       OutString(200,0,USetStr(14309),true);
       OutString(240,0,USetStr(14311),true);
       OutString(280,0,USetStr(14316),true);
       OutString(320,0,USetStr(14318),true);
       OutString(360,0,USetStr(18401),true);
       OutString(400,0,USetStr(18403),true);
       OutString(440,0,USetStr(18405),true);
       OutString(1,0,USetStr(18407),true);
      EndFormat;    
      Black_Divider(0,1);   
      EndHeader2;     
    case mtExcel:
      goto LExportHeader;
    case mtFile:
LExportHeader:;    
      StartFormat(15);
       ExportString("");
       ExportString("");
       ExportString("");
       ExportString(USetStr(14319));
       ExportString("");
       ExportString("");
       ExportString("");
       ExportString(USetStr(14313));
       ExportString("");
       ExportString("");
       ExportString("");
       ExportString("");
       ExportString("");
       ExportString(USetStr(14314));
       ExportString("");
       ExportString("");
      EndFormat;

      StartFormat(15);
       ExportString(USetStr(14301));
       ExportString(USetStr(18412));
       ExportString(USetStr(18413));
       ExportString(USetStr(18414));
       ExportString(USetStr(18415));
       ExportString(USetStr(18416));
       ExportString(USetStr(18417));
       ExportString(USetStr(18418));
       ExportString(USetStr(18419));
       ExportString(USetStr(18420));
       ExportString(USetStr(18421));
       ExportString(USetStr(18422));
       ExportString(USetStr(18423));
       ExportString(USetStr(18424));
       ExportString(USetStr(18425));
       ExportString(USetStr(18426));
      EndFormat;
  end;  
  
  FindFiscalYear(RepSpec.sStartDate,fsdate,fedate);  
  TrHs = true;
  TRr.TransDate = fsdate; 
  while (LoopKey("TransDate",TRr,1,TrHs)) begin
    if (TRr.TransDate>=RepSpec.sStartDate) then begin TrHs = false; end;
//  TRr.RegDate = fsdate; 
//  while (LoopKey("RegDate",TRr,1,TrHs)) begin
//    if (TRr.RegDate>=RepSpec.sStartDate) then begin TrHs = false; end;
    if (TrHs) then begin
      salesandservv = blankval;
      othersalesv = blankval;
      expensev = blankval;
      expensereprv = blankval;
      expensecashv = blankval;
      expenseotherv = blankval;
      pinv = blankval;
      description = "";
      rwcnt = MatRowCnt(TRr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(TRr,i,TRrw);
        if ((TRrw.stp==1) and ((TRrw.ovst==0))) then begin
          TransactionSums(TRr,TRrw,salesandservv,othersalesv,expensev,expensereprv,expensecashv,expenseotherv,pinv,description);
        end;
      end;
      if ((salesandservv!=0) or (othersalesv!=0) or (expensev!=0) or (expensereprv!=0) or (expensecashv!=0) or (expenseotherv!=0) or (pinv!=0)) then begin
        runnr = runnr + 1;
        acumservval = acumservval + salesandservv;
        acumotherval = acumotherval + othersalesv;
        acumexpval = acumexpval + expensev;
        acumexpreprval = acumexpreprval + expensereprv;
        acumexpcashval = acumexpcashval + expensecashv;
        acumexpotherval = acumexpotherval + expenseotherv;
        acumpinv = acumpinv + pinv;      
        switch (RepSpec.Media) begin
          case mtPrinter:
            AddToAccumulator(10,salesandservv);
            AddToAccumulator(11,othersalesv);
            AddToAccumulator(12,salesandservv+othersalesv);
            AddToAccumulator(13,pinv);
            AddToAccumulator(14,expensev);
            AddToAccumulator(15,expensereprv);
            AddToAccumulator(16,expensecashv);
            AddToAccumulator(17,expenseotherv);
            AddToAccumulator(18,expensereprv+expensecashv+expenseotherv);

            AddToAccumulator(20,salesandservv);
            AddToAccumulator(21,othersalesv);
            AddToAccumulator(22,salesandservv+othersalesv);
            AddToAccumulator(23,pinv);
            AddToAccumulator(24,expensev);
            AddToAccumulator(25,expensereprv);
            AddToAccumulator(26,expensecashv);
            AddToAccumulator(27,expenseotherv);
            AddToAccumulator(28,expensereprv+expensecashv+expenseotherv);
        end;
      end;
    end;
  end;
  ResetLoop(TRr);
  TrHs = true;
  TRr.TransDate = RepSpec.sStartDate; 
  while (LoopKey("TransDate",TRr,1,TrHs)) begin
    if (TRr.TransDate>RepSpec.sEndDate) then begin TrHs = false; end;
//to get chronology
//  TRr.RegDate = RepSpec.sStartDate; 
//  while (LoopKey("RegDate",TRr,1,TrHs)) begin
//    if (TRr.RegDate>RepSpec.sEndDate) then begin TrHs = false; end;
    if (TrHs) then begin
      salesandservv = blankval;
      othersalesv = blankval;
      expensev = blankval;
      expensereprv = blankval;
      expensecashv = blankval;
      expenseotherv = blankval;
      pinv = blankval;

      salesandservvovst = blankval;
      othersalesvovst = blankval;
      expensevovst = blankval;
      expensereprvovst = blankval;
      expensecashvovst = blankval;
      expenseothervovst = blankval;
      pinvovst = blankval;
      description = "";

      ClearRow(TRr,updTRrw,2);
      updmarkrow = -1;
      rwcnt = MatRowCnt(TRr);      
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(TRr,i,TRrw);
        if (TRrw.stp==2) then begin
          updmarkrow = i;
          CopyRow(TRr,TRrw,updTRrw);
        end;
      end;
      
      if (TRr.IntYc<IVYc) then begin
        for (i=0;i<updmarkrow;i=i+1) begin
          MatRowGet(TRr,i,TRrw);
          if (TRrw.stp==1) then begin
            TransactionSums(TRr,TRrw,salesandservvovst,othersalesvovst,expensevovst,expensereprvovst,expensecashvovst,expenseothervovst,pinvovst,description);
          end;
        end;
      end;
      
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(TRr,i,TRrw);
        if (TRr.IntYc<IVYc) then begin
          if ((TRrw.stp==1) and ((TRrw.ovst==0))) then begin
            TransactionSums(TRr,TRrw,salesandservv,othersalesv,expensev,expensereprv,expensecashv,expenseotherv,pinv,description);
          end;
        end else begin
          if (TRrw.stp==1) then begin
            TransactionSums(TRr,TRrw,salesandservv,othersalesv,expensev,expensereprv,expensecashv,expenseotherv,pinv,description);
          end;
        end;
      end;

      if ((salesandservv!=0) or (othersalesv!=0) or (expensev!=0) or (expensereprv!=0) or (expensecashv!=0) or (expenseotherv!=0) or (pinv!=0)) then begin
        if (nonblank(description)) then begin
          TRr.Comment = description;
        end;
        switch (RepSpec.Media) begin
          case mtFile: FileRow(TRr,salesandservv,othersalesv,expensev,expensereprv,expensecashv,expenseotherv,pinv,
                                   totservval,tototherval,totexpval,totexpreprval,totexpcashval,totexpotherval,totpinv,runnr);
          case mtExcel: FileRow(TRr,salesandservv,othersalesv,expensev,expensereprv,expensecashv,expenseotherv,pinv,
                                   totservval,tototherval,totexpval,totexpreprval,totexpcashval,totexpotherval,totpinv,runnr);
          case mtPrinter: PrinterRow(TRr,salesandservv,othersalesv,expensev,expensereprv,expensecashv,expenseotherv,pinv,
                                   totservval,tototherval,totexpval,totexpreprval,totexpcashval,totexpotherval,totpinv,
                                   acumservval,acumotherval,acumexpval,acumexpreprval,acumexpcashval,acumexpotherval,acumpinv,runnr);
          case mtPamFax: PrinterRow(TRr,salesandservv,othersalesv,expensev,expensereprv,expensecashv,expenseotherv,pinv,
                                   totservval,tototherval,totexpval,totexpreprval,totexpcashval,totexpotherval,totpinv,
                                   acumservval,acumotherval,acumexpval,acumexpreprval,acumexpcashval,acumexpotherval,acumpinv,runnr);
          case mtPdf: PrinterRow(TRr,salesandservv,othersalesv,expensev,expensereprv,expensecashv,expenseotherv,pinv,
                                   totservval,tototherval,totexpval,totexpreprval,totexpcashval,totexpotherval,totpinv,
                                   acumservval,acumotherval,acumexpval,acumexpreprval,acumexpcashval,acumexpotherval,acumpinv,runnr);
          case mtScreen: ScreenRow(TRr,updTRrw,salesandservv,othersalesv,expensev,expensereprv,expensecashv,expenseotherv,pinv,
                                   salesandservvovst,othersalesvovst,expensevovst,expensereprvovst,expensecashvovst,expenseothervovst,pinvovst,
                                   totservval,tototherval,totexpval,totexpreprval,totexpcashval,totexpotherval,totpinv,runnr);
        end;
      end;            
    end;
  end;  
  switch (RepSpec.Media) begin
    case mtFile: ExportTotal(USetStr(14299),totservval,tototherval,totexpval,totexpreprval,totexpcashval,totexpotherval,totpinv);
    case mtExcel: ExportTotal(USetStr(14299),totservval,tototherval,totexpval,totexpreprval,totexpcashval,totexpotherval,totpinv);
    case mtScreen:
        Black_Divider(0,1);   
        StartFormat(15);
         OutVal(3,0,totservval,M4Val,true);
         OutVal(4,0,tototherval,M4Val,true);
         OutVal(5,0,totservval+tototherval,M4Val,true);
         OutVal(6,0,totpinv,M4Val,true);
         OutVal(7,0,totexpval,M4Val,true);
//         OutVal(7,0,totexpreprval,M4Val,true);
         OutVal(8,0,totexpcashval,M4Val,true);
         OutVal(440,0,totexpotherval,M4Val,true);
         OutVal(1,0,totexpcashval+totexpotherval,M4Val,true);
        EndFormat;                        
  end;
  EndJob;
  AutomatedSalesOrderly("HasIntegratedNL+Run_IncExpBookRn");
  return;
end;
