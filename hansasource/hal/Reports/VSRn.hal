external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external procedure BeginCurncyTotals(var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure HT2Per(Date, Date , var string);
external procedure HTLevCat(string, var string);
external procedure HTCustClass(string,var string);
external procedure HTCustClassType(string,var string);
external function Boolean SetInSet2(string,string);
external procedure ClassTypef(string,string,var Boolean);

global
procedure VSRn(record RcVc RepSpec)
begin
  string 255 frcc,tocc;
  record CUVc VEr;
  record VSVc VSr;
  Boolean TrHs,stfound;
  val s,sum1;
  Boolean testf;
  string 255 tstr;
  Integer rw;
  string 20 frgr,togr,lastgr;
  string 20 keystr;
  val grs;
  Boolean vecatf;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt;
  
  if (RepSpec.wholemonthf==0) then begin
    MessageBox(1163,"");
    goto LVSRn;
  end;
  BeginCurncyTotals(curcnt);
  frcc = FirstInRange(RepSpec.f1,20);
  tocc = LastInRange(RepSpec.f1,20);
  frgr = FirstInRange(RepSpec.f2,10);
  togr = LastInRange(RepSpec.f2,10);

  StartReportJob(USetStr(4061));
   rw = 1;
   if (nonblank(RepSpec.f1)) then begin
     tstr = USetStr(1213);
     tstr = tstr & RepSpec.f1;
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
   HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   if (nonblank(RepSpec.f2)) then begin
     HTLevCat(RepSpec.f2,tstr);
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
   HTCustClass(RepSpec.f4,tstr);
   if (nonblank(tstr)) then begin
     Header(rw,tstr,1);
     rw = rw + 1;
   end; 
   HTCustClassType(RepSpec.f5,tstr);
   if (nonblank(tstr)) then begin
     Header(rw,tstr,1);
     rw = rw + 1;
   end; 
  EndHeader;
  SetRepCol(2,60);
  SetRepCol(3,288);
  SetRepCol(4,384);
  StartFormat(15);
  OutString(0,0,USetStr(4062),false);
  OutString(2,0,USetStr(4063),false);
  OutString(1,0,USetStr(4064),true);
  EndFormat;
  
  if (blank(RepSpec.f2)) then begin
    VEr.Code = frcc;
    keystr = "Code";    
  end else begin
    vecatf = true;
    VEr.VECat = frgr;
    keystr = "VECat";    
  end;
  Gray_Divider(0,1);
  TrHs = true;
  while (LoopKey(keystr,VEr,1,TrHs)) begin
    testf = true;
    if (vecatf==false) then begin
      if (nonblank(tocc)) then begin
        if (VEr.Code>tocc) then begin
          TrHs = false;
        end;
      end;
      if (nonblank(RepSpec.f2)) then begin
        if (VEr.VECat<frgr) then begin testf = false; end;
        if (VEr.VECat>togr) then begin testf = false; end;
      end;
    end else begin
      if (nonblank(togr)) then begin
        if (VEr.VECat>togr) then begin
          TrHs = false;
        end;
      end;      
      if (nonblank(RepSpec.f1)) then begin
        if (VEr.Code<frcc) then begin testf = false; end;
        if (VEr.Code>tocc) then begin testf = false; end;
      end;
    end; 
    if (testf) then begin
      if (nonblank(RepSpec.f4)) then begin
        if (SetInSet2(RepSpec.f4,VEr.Classification)==false) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.f5)) then begin
        if (testf) then begin
          testf = false;
          ClassTypef(RepSpec.f5,VEr.Classification,testf);
        end;
      end;
    end; 
    if (TrHs==false) then begin testf = false; end;
    if (VEr.VEType==0) then begin testf = false; end;
    if (testf) then begin      
      VSr.VECode = VEr.Code;
      stfound = ReadFirstMain(VSr,1,true);
      if (stfound==true) then begin
        if (RepSpec.flags[1]==1) then begin
          s = GetTurnover(VEr,"vesalesexclvat",RepSpec.sStartDate,RepSpec.sEndDate);
        end else begin
          s = GetTurnover(VEr,"vesalesinclvat",RepSpec.sStartDate,RepSpec.sEndDate);            
        end;  
      end else begin
        s = 0;
      end;
      if (vecatf) then begin
        if (nonblank(lastgr)) then begin
          if (VEr.VECat!=lastgr) then begin
            Gray_Divider(300,1);
            StartFormat(15);
             OutString(300,0,lastgr,false);
             OutVal(1,0,grs,M4Val,true);
            EndFormat;
            grs = blankval;
          end;
        end;
        grs = grs + s;
        lastgr = VEr.VECat;
      end;
      StartFormat(15);
       OutString(0,"DblCUVc",VEr.Code,false);
       OutString(2,0,VEr.Name,false);
       OutVal(1,0,s,M4Val,true);
      EndFormat;
      sum1 = s + sum1;
      AddCurncyTotals(acur,av1,curcnt,VEr.VECurncyCode,s);
    end;
  end;
  if (vecatf) then begin
    if (grs!=0) then begin
      Gray_Divider(300,1);
      StartFormat(15);
      OutString(300,0,lastgr,false);
      OutVal(1,0,grs,M4Val,true);
      EndFormat;
    end;
  end;  
  Gray_Divider(0,1);
  PrintCurncyTotals(acur,av1,av2,av3,curcnt,480,-1,-1,320,false,RepSpec.PocketPC);
  EndJob;
LVSRn:;
  return;
end;