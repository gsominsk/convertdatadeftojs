external function string 255 NodeURL(record CloudNodeVc);external function Boolean TreatServiceError(LongInt,string,string);external function boolean RunOneLineOutCommand(string,var string);external function Boolean IsDigit(string);function boolean IsVersionFromCloud(string vercode)begin  boolean res;  record HansaVersionVc HVr;  HVr.Code = vercode;  res = ReadFirstMain(HVr,1,true);  IsVersionFromCloud = res;  return;end;function string 255 DetectVersion(record LocalCloudServerVc LCSr,record RcVc RepSpec,boolean uselogf)begin  string 255 verstr;  record HansaVersionVc HVr;  LongInt verbuild;  boolean verfoundf;  HVr.Code = LCSr.HansaVersion;  verfoundf = ReadFirstMain(HVr,1,true);  if (uselogf) then begin    RunOneLineOutCommand("grep -a \" (build \" " & LCSr.DataFolder & "/hansa.log |grep -v \"during import\"|grep -v VerifyHMAC|cut -c21- |tail -1",verstr);    if (blank(verstr)) then begin      if (verfoundf==false) then begin        verstr = "Version missing";      end else begin        if (HVr.Version>0) then begin          verbuild = (HVr.Version * 1000000) + (HVr.SubVersion * 10000) + HVr.RunningBuild;          verstr = HVr.Name & " (build " & verbuild & ")";        end else begin          verstr = LCSr.HansaVersion;        end;      end;    end;    verstr = verstr & " *";  end else begin    if (ReadFirstMain(HVr,1,true)==false) then begin      verstr = "Version missing";    end else begin      verbuild = (HVr.Version * 1000000) + (HVr.SubVersion * 10000) + HVr.RunningBuild;      verstr = HVr.Name & " (build " & verbuild & ")";    end;  end;  DetectVersion = verstr;  return;end;globalprocedure GetServerVersions(record RcVc RepSpec,array uuid lcsarr_c,array uuid lcsarr_l,var array string aversions,var array string anames)begin  LongInt i,n;  string 255 tmp;  record LocalCloudServerVc LCSr;  boolean testf;  for (i = 0; i < lcsarr_c.length; i = i + 1) begin    LCSr.UUID = lcsarr_c[i];    if (ReadFirstMain(LCSr,1,true)) then begin      anames[anames.length] = LCSr.Name;      aversions[aversions.length] = DetectVersion(LCSr,RepSpec,false);    end;  end;  for (i = 0; i < lcsarr_l.length; i = i + 1) begin    LCSr.UUID = lcsarr_l[i];    if (ReadFirstMain(LCSr,1,true)) then begin      anames[anames.length] = LCSr.Name;      aversions[aversions.length] = DetectVersion(LCSr,RepSpec,true);    end;  end;end;procedure ListServerVersionsOnNode(record CloudNodeVc CNr,record RcVc RepSpec,array uuid lcsarr_c,array uuid lcsarr_l)begin  array string 255 aversions,anames;  string 255 url;  LongInt stat;  boolean failf;  Integer i;    if (CNr.Closed!=0) then begin    goto LListServerVersionsOnNode;  end;  if (CNr.ReachableFlag==0) then begin    goto LListServerVersionsOnNode;  end;  if ((CNr.NodeType==kCloudNodeTypeAuto) and (RepSpec.flags[3]==1)) then begin    goto LListServerVersionsOnNode;  end;  url = NodeURL(CNr);  stat = CallService(url).GetServerVersions(repspec,lcsarr_c,lcsarr_l,aversions,anames);  failf = TreatServiceError(stat,url,"GetServerVersions");    if (failf) then begin    goto LListServerVersionsOnNode;  end;  for (i = 0; i<aversions.length; i = i + 1) begin    StartFormat(15);    OutString(0,0,anames[i],false);    OutString(220,0,aversions[i],false);    OutString(400,0,CNr.Code,false);    EndFormat;  end;    if (aversions.length>0) then begin    StartFormat(1);    Gray_Divider(0,1);    EndFormat;  end;LListServerVersionsOnNode:;  return;end;globalprocedure ListServerVersionsRn(record RcVc RepSpec)begin  record CloudNodeVc CNr;  record RemoteCloudServerVc RCSr;  boolean testf;  array uuid lcsarr_c,lcsarr_l;  StartReportJob("List server versions");  EndHeader;  StartFormat(15);  OutString(0,0,"Server name",false);  OutString(220,0,"Version (* means it isn't from the cloud)",false);  OutString(400,0,"Node",false);  EndFormat;  StartFormat(1);  Black_Divider(0,1);  EndFormat;  while (LoopMain(CNr,0,true)) begin    while (LoopMain(RCSr,1,true))    begin      testf = true;      if (RCSr.Closed!=0) then begin testf = false; end;      if (testf and (RCSr.OnDemandFlag==1) and (RepSpec.flags[0]==1)) then begin testf = false; end;      if (testf and nonblank(RCSr.CUCode) and (RepSpec.flags[1]==1)) then begin testf = false; end;      if (testf and IsVersionFromCloud(RCSr.HansaVersion) and (RepSpec.flags[2]==1)) then begin testf = false; end;      if (testf) then begin        if (!IsVersionFromCloud(RCSr.HansaVersion)) then begin          lcsarr_l[lcsarr_l.length] = RCSr.UUID;        end else begin          lcsarr_c[lcsarr_c.length] = RCSr.UUID;        end;      end;    end;    if ((lcsarr_c.length>0) or (lcsarr_l.length>0)) then begin      ListServerVersionsOnNode(CNr,RepSpec,lcsarr_c,lcsarr_l);    end;  end;  EndJob;  return;end;