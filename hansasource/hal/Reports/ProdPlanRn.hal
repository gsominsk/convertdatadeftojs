external procedure HTArtGroup(string, var string);
external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external procedure HTItems(string,var string);
external procedure HTITs(string,string,var string);
external procedure DebugInfoArray(string,array record SMVc,Integer,Date,record RcVc);
external procedure CombineAndAddPlan(array record SMVc,array record SMVc,var array record SMVc,Integer,var Integer,string,Boolean,record RcVc);
external procedure AppendPOPlanToForecastArray(var array record SMVc,Integer,string,Boolean,record RcVc);
external procedure AppendProdPlanToForecastArray(var array record SMVc,Integer,string,Boolean,record RcVc);
external procedure AppendStockSMToForecastArray(var array record SMVc,Integer,record RcVc);
external procedure BuildTheItemArray(array record SMVc,Integer,var array string,var array Integer,var Integer);
external procedure BuildTheForecastArray(var array record SMVc,var Integer,Date,Date,string,Boolean,record RcVc);
external procedure HT2Per(Date,Date,var string);
external procedure AppendMaxCalculations(var array record SMVc,var Integer,Integer,Boolean,record RcVc);
external function LongInt GetStockPolicyMonths();
external procedure BuildCurStockPlusForecastSM(var array record SMVc,var Integer,Date,Date,string,array string,Integer,record RcVc);
external procedure PrintForecastNumbers(Date,array record SMVc,var Integer,array string,array Integer,Integer,record RcVc,Boolean,Boolean,Integer,string);
external procedure CopySMArray(array record SMVc,var array record SMVc,Integer);
external procedure AssumeCorrectPlans(var array record SMVc,Integer,Integer,record RcVc);
external procedure ConvertToAvgPerDay(var array record SMVc,Integer,record RcVc);
external procedure DebugSelection(record RcVc);
external procedure DebugOption(record RcVc);

global
procedure ProdPlanRn(record RcVc RepSpec)
BEGIN
  array record SMVc aSMr;    // Projected Month Close
  array record SMVc amaxSMr; // Maximal Stock Level
  array record SMVc aresSMr; // The plan that will get printed
  string 255 tstr;
  Integer rw;
  Integer asmcnt,arescnt,asmcnt2;
  array string 20 aitems;
  array Integer atype;
  Integer acnt;
  Date actualstartdate,actualenddate;
  record SFPeriodsBlock SFPb; 
  string 255 frit,toit;
  
  frit = FirstInRange(RepSpec.f3,20);
  toit = LastInRange(RepSpec.f3,20);
  if (blankdate(RepSpec.d1)) then begin
    RepSpec.d1 = CurrentDate;
  end;
  StartReportJob(USetStr(16315));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (nonblank(RepSpec.LastAcc)) then begin
    Header(rw,USetStr(18201) & " " & RepSpec.LastAcc,0)
  end else begin
    Header(rw,USetStr(18204),0)
  end;
  Header(rw,USetStr(18200) & " " & RepSpec.d1,1)
  rw = rw + 1;
  HTITs(frit,toit,tstr);
  Header(rw,tstr,0);
  HTItems(RepSpec.f1,tstr);
  Header(rw,tstr,1);  
  if (HasItemGroups) then begin
    HTArtGroup(RepSpec.f3,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasItemClassification) then begin
    HTItemClass(RepSpec.f2,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;  
  EndHeader;
  SetRepCol(2,55);
  SetRepCol(3,180);
  
  BlockLoad(SFPb);
  asmcnt = 0;
  if (nonblankdate(RepSpec.d1)) then begin
    actualstartdate = RepSpec.d1;
    if (actualstartdate>RepSpec.sStartDate) then begin
      StartFormat(15);
      OutString(0,0,USetStr(16317),false);
      EndFormat;
      StartFormat(15);
      EndFormat;
      actualstartdate = RepSpec.sStartDate;
      goto LProdPlanRn;
    end;
  end else begin
    actualstartdate = RepSpec.sStartDate;
  end;
  DebugSelection(RepSpec);

  switch (SFPb.PeriodType) begin
    case kForecastPeriodTypeMonths:
      actualenddate = AddMonth(RepSpec.sEndDate,GetStockPolicyMonths+1);
    case kForecastPeriodTypeWeeks:
      actualenddate = AddDay(RepSpec.sEndDate,(GetStockPolicyMonths+1)*7);
  end;
  
  BuildTheForecastArray(aSMr,asmcnt,RepSpec.sStartDate,actualenddate,RepSpec.LastAcc,false,RepSpec);
  BuildTheItemArray(aSMr,asmcnt,aitems,atype,acnt);

  CopySMArray(aSMr,amaxSMr,asmcnt);
  asmcnt2 = asmcnt;
  AppendMaxCalculations(amaxSMr,asmcnt2,RepSpec.flags[3],true,RepSpec);

  BuildCurStockPlusForecastSM(aSMr,asmcnt,actualstartdate,RepSpec.sStartDate,RepSpec.LastAcc,aitems,acnt,RepSpec);
  //to build data for month before specified period, openeing balance/number 
  AppendMaxCalculations(aSMr,asmcnt,RepSpec.flags[3],false,RepSpec);
  // what is this thing doing ? 

  AppendStockSMToForecastArray(aSMr,asmcnt,RepSpec);

  CombineAndAddPlan(aSMr,amaxSMr,aresSMr,asmcnt,arescnt,RepSpec.LastAcc,true,RepSpec);
  
  if (RepSpec.flags[1]!=0) then begin
    AppendPOPlanToForecastArray(aresSMr,arescnt,RepSpec.LastAcc,true,RepSpec);
  end;
  if (RepSpec.flags[2]!=0) then begin
    AppendProdPlanToForecastArray(aresSMr,arescnt,RepSpec.LastAcc,true,RepSpec);
  end;
  if (RepSpec.flags[5]!=0) then begin
    AssumeCorrectPlans(aresSMr,arescnt,1,RepSpec);
  end;

  if (RepSpec.flags[6]!=0) then begin
    ConvertToAvgPerDay(aresSMr,arescnt,RepSpec);
  end;

  PrintForecastNumbers(actualstartdate,aresSMr,arescnt,aitems,atype,acnt,RepSpec,false,true,2,"");
  DebugOption(RepSpec);
LProdPlanRn:;  
  EndJob;
  RETURN;
END;

