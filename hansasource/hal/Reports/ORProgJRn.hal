external procedure BeginCurncyTotals(var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external procedure HT2Per(Date, Date , var string);
external procedure HTDetailLevel(Integer, var string);
external procedure HTSupplier(string, var string);
external procedure HTNr(Integer,Integer,LongInt,LongInt,var string);

procedure RepORProg(record ORProgVc ORProgr)
begin
  Integer i,rwcnt;
  row ORProgVc ORProgrw;

  StartFormat(15);
  OutLongInt(0,"DblORProgVc",ORProgr.SerNr,false);
  OutDate(70,0,ORProgr.OrdDate,false);
  OutString(140,0,ORProgr.VECode,false);
  OutString(240,0,ORProgr.VEName,false);
  if nonblank(ORProgr.CurncyCode) then begin
    OutString(460,0,ORProgr.CurncyCode,false);
  end;
  EndFormat;
  rwcnt = MatRowCnt(ORProgr);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(ORProgr,i,ORProgrw);
    if (ORProgrw.stp==1) then  begin
      StartFormat(15);
      OutString(20,0,ORProgrw.ArtCode,false);
      OutVal(124,0,ORProgrw.Quant,M4UVal,true);
      OutString(130,0,ORProgrw.Spec,false);
      OutVal(340,0,ORProgrw.Price,M423Val,true);
      OutString(370,0,ORProgrw.Recepy,true);
      OutVal(460,0,ORProgrw.Sum,M4Val,true);
      OutString(480,0,ORProgrw.VATCode,true);
      EndFormat;
    end;
  end;
  Black_Divider(380,460);
  StartFormat(15);
  OutVal(260,0,ORProgr.Sum1,M4Val,true);
  OutVal(360,0,ORProgr.Sum3,M4Val,true);
  OutVal(460,0,ORProgr.Sum4,M4Val,true);
  EndFormat;
  return;
end;

function Boolean ItemInRange(record ORProgVc ORProgr,string itemsel,string itgroupsel)
begin
  Boolean res;
  Integer i,rwcnt;
  row ORProgVc ORProgrw;
  string 30 frin,toin;

  res = false;
  frin = FirstInRange(itemsel,20);
  toin = LastInRange(itemsel,20);
  rwcnt = MatRowCnt(ORProgr);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(ORProgr,i,ORProgrw);
    if ((ORProgrw.ArtCode>=frin) and (ORProgrw.ArtCode<=toin)) then begin
      res = true;
    end;
  end;
  ItemInRange = res;
  return;
end;

global
procedure ORProgJRn(record RcVc RepSpec)
begin
  record ORProgVc ORProgr;
  record MainStockBlock MSr;
  Boolean TrHs;
  val iv;
  val TotSum;
  Boolean testf;
  LongInt afr,ato;
  string 255 tstr;
  Integer rw;
  string 20 ckey;
  Integer curcnt;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;

  rw = 1;
  afr = FirstInRange(RepSpec.f1,30);
  ato = LastInRange(RepSpec.f1,30);
  BlockLoad(MSr);
  TotSum = 0;
  BeginCurncyTotals(curcnt);
  StartReportJob(USetStr(4941));
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if nonblank(RepSpec.f1) then begin
    HTNr(1823,1822,afr,ato,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  HTDetailLevel(RepSpec.ArtMode,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTSupplier(RepSpec.f2,tstr);
  if nonblank(tstr) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f3)) then begin
      tstr = USetStr(2768);
      tstr = tstr & ": " & RepSpec.f3;
      Header(rw,tstr,1);
      rw = rw + 1;
  end; 
  EndHeader;
  
  if (RepSpec.ArtMode==0) then  begin
    SetRepCol(2,60);
    SetRepCol(3,140);
    SetRepCol(4,220);
    SetRepCol(5,300);
    SetRepCol(6,440);
    SetRepCol(7,450);
  end;
  if (RepSpec.ArtMode==0) then  begin
    StartFormat(15);
    OutString(0,0,"Number",false);
    OutString(2,0,"Order Date",false);
    OutString(3,0,"Maintenance",false);
    OutString(4,0,"Changed",false);
    OutString(5,0,"Supplier",false);
    OutString(6,0,"Amount",true);
    EndFormat;
  end;
  if (RepSpec.ArtMode==1)  then  begin
    StartFormat(15);
    OutString(0,0,USetStr(4942),false);
    OutString(70,0,USetStr(4943),false);
    EndFormat;
  end;
  ORProgr.SerNr = afr;
  if (RepSpec.ArtMode==0) then begin
    Black_Divider(0,1);
  end;
  
  if (RepSpec.flags[0]==0) then begin
    ckey = "SerNr";
  end else begin
    ckey = "OrdDate";
  end;
  TrHs = true;
  while LoopKey(ckey,ORProgr,1,TrHs) begin
  	testf = true;
    if (ato<>-1) then begin
      if (ORProgr.SerNr>ato) then begin
      	if (RepSpec.flags[0]==0) then begin
          TrHs = false;
		end;
        testf = false;
      end;
    end;
    if (afr<>-1) and (RepSpec.flags[0]==1)then begin
      if (ORProgr.SerNr<afr) then begin
      	testf = false;
      end;
    end;
    if (nonblank(RepSpec.f2) and (RepSpec.f2<>ORProgr.VECode)) then begin
       testf = false;
    end;
    if (testf) then begin
      if ((nonblank(RepSpec.f3)) and (RepSpec.f3<>ORProgr.Location)) then begin 
        testf = false; 
        if ((MSr.MainStock==RepSpec.f3) and (blank(ORProgr.Location))) then begin
          testf = true;
        end;
      end;
    end;
    if (DateInRange(ORProgr.OrdDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;
    if (ORProgr.Closed==1) then begin
      if (RepSpec.flags[1]<>1) then begin
        testf = false;
      end;
    end;
    if ((nonblank(RepSpec.f4)) or (nonblank(RepSpec.f5))) then begin
      if (ItemInRange(ORProgr,RepSpec.f4,RepSpec.f5)==false) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      if ((RepSpec.ArtMode==0) or (RepSpec.ArtMode==1)) then begin
        iv = ORProgr.Sum4;
      end;
      if (RepSpec.ArtMode==2) then begin
        iv = ORProgr.Sum1;
      end;
      TotSum = TotSum + iv;
      AddCurncyTotals(acur,av1,curcnt,ORProgr.CurncyCode,iv);
      if  (RepSpec.ArtMode==1) then begin
        Gray_Divider(0,1);
        RepORProg(ORProgr);
      end;
      if (RepSpec.ArtMode==0) then begin
        StartFormat(15);
        OutLongInt(0,"DblORProgVc",ORProgr.SerNr,false);
        OutDate(2,0,ORProgr.OrdDate,false);
        OutDate(3,0,ORProgr.OrdDate,false);
        OutDate(4,0,ORProgr.OrdDate,false);
        OutString(5,0,ORProgr.VECode,false);
        OutVal(6,0,iv,M4Val,true);
        OutString(7,0,ORProgr.CurncyCode,false);
        EndFormat;
       end;
    end;
  end;
  Black_Divider(0,1);
  if (RepSpec.ArtMode==1) then begin
    PrintCurncyTotals(acur,av1,av2,av3,curcnt,460,-1,-1,140,true,RepSpec.PocketPC);
  end else begin
    PrintCurncyTotals(acur,av1,av2,av3,curcnt,440,-1,-1,140,true,RepSpec.PocketPC);
  end; 
  EndJob;
  return;
end;

