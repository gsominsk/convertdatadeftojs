external function Boolean HasItemClassification();
external function Boolean HasMultiLocations();
external function Boolean HasCategories();
external function Boolean HasContactClassification();
external function Boolean ContactInGroupClass(string,string,string,string,string,string);
external procedure HTCustCat(string,var string);
external procedure HTCustClass(string,var string);
external procedure HTClasses(string,string,var string);
external procedure HTLocations(string, string, var string);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure HTItems(string,var string);
external procedure HTITs(string,string,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure HTSaleMan(string, var string);
external procedure HTNr(Integer,Integer,LongInt,LongInt,var string);
external procedure HTCusts(string,string,var string);
external procedure HT2Per(Date, Date , var string);

procedure HTDetailLevel ( Integer lev,var string res )
begin
   res = "";
  if ( lev == 0 ) then begin res = USetStr(1159); end;
  if ( lev == 1 ) then begin res = USetStr(1160); end;
  return;
end; 

procedure RepQT( record QTVc QTp,record RcVc RepSpec)
begin
  Integer i,rwcnt;
  Row QTVc QTrw;
  Boolean testf;
  record INVc INr;
  string 20 frit,toit;
  string 20 frin,toin;
  val sum1,sum3,sum4;
  val vatv,t1;
  
  frit = FirstInRange(RepSpec.f3,20);
  toit = LastInRange(RepSpec.f3,20);
  frin = FirstInRange(RepSpec.f4,20);
  toin = LastInRange(RepSpec.f4,20);
  StartFormat(15);
  OutString(0,"DblQuote",QTp.SerNr,false);
  OutDate(130,0,QTp.QTDate,false);
  OutString(220,0,QTp.PayDeal,false);
  OutDate(440,0,QTp.MakeContactDate,true);
  EndFormat;
  StartFormat(15);
  OutString(50,0,QTp.CustCode,false);
  OutString(200,0,QTp.Addr0,false);
  EndFormat;
  StartFormat(15);
  OutString(50,0,QTp.CustCat,false);
  OutString(200,0,QTp.Addr1,false);
  EndFormat;
  StartFormat(15);
  OutString(50,0,QTp.OurContact,false);      
  OutString(200,0,QTp.Addr2,false);
  EndFormat;
  StartFormat(15);
  OutString(50,0,QTp.Phone,false);
  OutString(200,0,QTp.Addr3,false);
  EndFormat;
  if (nonblank(QTp.CustContact)) then begin
    StartFormat(15);
    OutString(200,0,QTp.CustContact,false);      
    EndFormat;
  end;
  if (nonblank(QTp.CurncyCode)) then begin
    StartFormat(15);
    OutStringBiDi(460,0,QTp.CurncyCode,true,440);
    EndFormat;
  end;
  sum1 = blankval; sum3 = blankval; sum4 = blankval;
  rwcnt = MatRowCnt(QTp);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(QTp,i,QTrw);
    testf = true;
    if (QTrw.stp!=1 and QTrw.stp!=kInvoiceRowTypeHeader and QTrw.stp!=kInvoiceRowTypeSubtotal) then begin testf = false; end;
    if (testf) then begin
      if (nonblank(RepSpec.f3)) then begin
        if (ReadFirstItem(QTrw.ArtCode,INr,true,false)) then begin
          if (INr.Group<frit) then begin testf = false; end;
          if (INr.Group>toit) then begin testf = false; end;
        end;
      end;
    end;
    if (nonblank(RepSpec.f4)) then begin
      if (ReadFirstItem(QTrw.ArtCode,INr,true,false)) then begin
        if (INr.Code<frin) then begin testf = false; end;
        if (INr.Code>toin) then begin testf = false; end;
      end;
    end;
    if (testf) then begin
      StartFormat(15);
      OutString(20,0,QTrw.ArtCode,false);
      OutStringAdjustBiDi(124,0,QTrw.Quant,true,M4Val,154);
      OutString(130,0,QTrw.Spec,false);
      OutStringAdjustBiDi(340,0,QTrw.Price,true,M4Val,370);
      OutStringAdjustBiDi(370,0,QTrw.vRebate,true,M4Val,420);
      OutStringAdjustBiDi(460,0,QTrw.Sum,true,M4Val,495);
      OutString(480,0,QTrw.VATCode,true);
      EndFormat;
      MulVATIV(QTrw.VATCode,QTrw.Sum,vatv,t1,QTp.InclVAT,QTp.NoTAXonVAT);
      sum1 = sum1 + QTrw.Sum;
      sum3 = sum3 + vatv;
      if (QTp.InclVAT>0) then begin
        sum4 = sum4 + QTrw.Sum;
      end else begin
        sum4 = sum4 + QTrw.Sum + vatv;
      end;
    end;
  end;
  Black_Divider(380,460);
  StartFormat(15);
  if (QTp.ExportFlag!=0) then begin
    OutString(20,0,USetStr(2568),false);
  end;
  OutString(100,0,QTp.Objects,false);
  if (nonblank(RepSpec.f3)) or (nonblank(RepSpec.f4)) then begin
    OutStringAdjustBiDi(260,0,sum1,true,M4Val,300);
    OutStringAdjustBiDi(360,0,sum3,true,M4Val,400);
    OutStringAdjustBiDi(460,0,sum4,true,M4Val,495);
  end else begin
    OutStringAdjustBiDi(260,0,QTp.Sum1,true,M4Val,300);
    OutStringAdjustBiDi(360,0,QTp.Sum3,true,M4Val,400);
    OutStringAdjustBiDi(460,0,QTp.Sum4,true,M4Val,495);
  end;
  EndFormat;
  return;
end;

procedure PrintQTListTotals(string curcode,val totqty,val subtot,val total)
begin
  StartFormat(15);
  if (blank(totqty)==false) then begin
    OutString(220,0,USetStr(2687),false);
    OutValBiDi(295,0,totqty,M40Val,true,335);
  end;
  OutString(330,0,USetStr(2685),false);
  OutValBiDi(410,0,subtot,M4Val,true,455);
  OutValBiDi(460,0,total,M4Val,true,495);
  OutString(470,0,curcode,false);
  EndFormat;
  return;
end;

function Boolean TestSelection(record RcVc RepSpec,record QTVc QTr)
begin
  Boolean testf;
  Integer i,rwcnt;
  row QTVc QTrw;
  string 5 frclass,toclass;
  string 20 frit,toit;
  string 20 frin,toin;
  Date mcd;
  val temp;
  record INVc INr;
  LongInt afr,ato;
  
  afr = FirstInRange(RepSpec.f1,10);
  ato = LastInRange(RepSpec.f1,10);
  frclass = FirstInRange(RepSpec.FirstAcc,5);
  toclass = LastInRange(RepSpec.FirstAcc,5);
  frit = FirstInRange(RepSpec.f3,20);
  toit = LastInRange(RepSpec.f3,20);
  frin = FirstInRange(RepSpec.f4,20);
  toin = LastInRange(RepSpec.f4,20);

  testf = true; 
  if (ato!=-1) and (QTr.SerNr>ato) then begin testf = false; end;
  if (afr!=-1) and (QTr.SerNr<afr) then begin testf = false; end;
  if (RepSpec.flags[2]==0) then begin
    if (QTr.Closed!=0) then begin testf = false; end;
  end;
  if (RepSpec.flags[3]==0) then begin
    if (QTr.Rejected==0) then begin testf = false; end;
  end;
  if (RepSpec.flags[4]==0) then begin
    if (QTr.Rejected==2) then begin testf = false; end;
  end;
  if (RepSpec.flags[5]==0) then begin
    if (QTr.Rejected==1) then begin testf = false; end;
  end;
  if (nonblank(RepSpec.TransStr)) then begin
    if (QTr.Location!=RepSpec.TransStr) then begin testf = false; end;
  end;
  if (testf) then begin
    if (nonblank(RepSpec.FirstAcc)) then begin
      if (QTr.QuoteClass<frclass)  then begin testf = false; end;
      if (QTr.QuoteClass>toclass)  then begin testf = false; end;
    end;
  end;
  
  if (nonblank(RepSpec.f2) and (RepSpec.f2!=QTr.CustCode)) then begin testf = false; end;
  if (nonblank(RepSpec.AccStr) and (RepSpec.AccStr!=QTr.SalesMan)) then begin testf = false; end;

  if (DateInRange(QTr.QTDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;
  if (nonblank(RepSpec.Stext)) then begin
    mcd = StringToDate(QTr.MakeContactDate);
    if (nonblankdate(mcd)) then begin
      if (DateInRange(mcd,RepSpec.d1,RepSpec.d2)==false) then begin
        testf = false;
      end; 
    end else begin
      if (nonblank(QTr.MakeContactDate)) then begin
        if (QTr.MakeContactDate!=RepSpec.Stext ) then begin
          testf = false;
        end;
      end;
    end;
  end; 
  if (nonblank(RepSpec.ObjStr)) then begin
    if (QTr.SalesGroup <> RepSpec.ObjStr) then begin
      testf = false;
    end;
  end;
  if (nonblank(RepSpec.f6)) then begin
    if (SetInSet(RepSpec.f6,QTr.Objects)==false) then begin
      testf = false;
    end;
  end;
  if (RepSpec.vals0 <> 0) then begin
    temp = MulRateToBase1(QTr.CurncyCode,QTr.Sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
    if (temp<RepSpec.vals0) then begin
      testf = false;
    end;
  end;
  if (testf) then begin
    testf = ContactInGroupClass(QTr.CustCode,RepSpec.LastAcc,RepSpec.f10,"CUST","","");    
    if (RepSpec.vals0!=0) then begin
      temp = MulRateToBase1(QTr.CurncyCode,QTr.Sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
      if (temp<RepSpec.vals0) then begin
        testf = false;
      end; 
    end;
  end;
  if (testf) then begin
    if (nonblank(RepSpec.f4)) then begin
      testf = false;
      rwcnt = MatRowCnt(QTr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(QTr,i,QTrw);
        if (ReadFirstItem(QTrw.ArtCode,INr,true,false)) then begin
          if (INr.Code>=frin) and (INr.Code<=toin) then begin
            testf = true;
            i = rwcnt;
          end;
        end;
      end;
    end;
  end;

  if (testf) then begin
    if (nonblank(RepSpec.f3) or nonblank(RepSpec.f5)) then begin
      testf = false;
      rwcnt = MatRowCnt(QTr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(QTr,i,QTrw);
        if (ReadFirstItem(QTrw.ArtCode,INr,true,false)) then begin
          if (INr.Group>=frit) and (INr.Group<=toit) then begin
            testf = true;
            i = rwcnt;
          end;
          if (nonblank(RepSpec.f5)) then begin
            if (SetInSet(RepSpec.f5,INr.DispGroups)) then begin 
              testf = true;
              i = rwcnt;
            end;
          end;
        end;            
      end;
    end;
  end;
  TestSelection = testf;
  return;
end;
      
global
procedure QTJRn(record RcVc RepSpec )
begin
  record QTVc QTr;
  row QTVc QTrw;
  record BaseCurBlock bascur;
  record QuoteClassBlock QCb;
  row QuoteClassBlock QCbrw;
  Boolean TrHs,TrHs1,test2f;
  val Tot1Sum,Tot2Sum;
  val sub1tot,sub2tot;
  integer frclassrownr,tocloassrownr;
  val Tot1SumG,Tot2SumG;
  val sub1totG,sub2totG;
  Boolean testf;
  LongInt afr,ato;
  String 255 tstr;
  string 5 frclass,toclass;
  string 20 frit,toit;
  string 20 frin,toin;
  Integer rw;
  Integer i,rwcnt,rwclasscnt,k;
  val temp;
  record INVc INr;
  Date mcd;
  val sum1,sum4,vatv,t1,rowsum1,rowsum4,totqty;
  
  BlockLoad(bascur);
  BlockLoad(QCb);
  afr = FirstInRange(RepSpec.f1,10);
  ato = LastInRange(RepSpec.f1,10);
  RepSpec.d1 = StringToDate(FirstInRange(RepSpec.Stext,10));
  RepSpec.d2 = StringToDate(LastInRange(RepSpec.Stext,10));
  frclass = FirstInRange(RepSpec.FirstAcc,5);
  toclass = LastInRange(RepSpec.FirstAcc,5);
  frit = FirstInRange(RepSpec.f3,20);
  toit = LastInRange(RepSpec.f3,20);
  frin = FirstInRange(RepSpec.f4,20);
  toin = LastInRange(RepSpec.f4,20);
  frclassrownr = -1;
  tocloassrownr = -1;
  rwclasscnt = MatRowCnt(QCb);
  if (nonblank(RepSpec.FirstAcc)) then begin
    rwclasscnt = MatRowCnt(QCb);
    for (i=0;i<rwclasscnt;i=i+1) begin
      MatRowGet(QCb,i,QCbrw);
      if (QCbrw.Code==frclass) then begin 
        frclassrownr = i; 
      end;
      if (QCbrw.Code==toclass) then begin 
        tocloassrownr = i; 
        rwclasscnt = i; 
      end;
    end;
  end;  
  
  rw = 1;
  
  StartReportJob(USetStr(2681));
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTDetailLevel(RepSpec.ArtMode,tstr);
  Header(rw,tstr,0);
  HTNr(2689,2690,afr,ato,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (nonblank(RepSpec.FirstAcc)) then begin 
    Header(rw,USetStr(8326) & ": " & RepSpec.FirstAcc,0); 
  end;
  if (nonblank(RepSpec.f3)) then begin
    HTITs(frit,toit,tstr);
    Header(rw,tstr,0);
  end;
  HTCusts(RepSpec.f2,RepSpec.f2,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (HasCategories) then begin
    HTCustCat(RepSpec.LastAcc,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasContactClassification) then begin
    HTCustClass(RepSpec.f10,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (nonblank(RepSpec.f4)) then begin
    HTItems(RepSpec.f4,tstr);
    Header(rw,tstr,0);
  end;
  HTSaleMan(RepSpec.AccStr,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;  
  end; 
  if (RepSpec.vals0 <> 0) then begin
    tstr = USetStr(2697) & " " & RepSpec.vals0;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (HasMultiLocations) then begin
    HTLocations(RepSpec.TransStr,RepSpec.TransStr,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (HasItemClassification) then begin
    HTClasses(RepSpec.f5,RepSpec.f5,tstr);
    Header(rw,tstr,1); 
    rw = rw + 1; 
  end;
  EndHeader;
  sub1tot = 0;
  sub2tot = 0;
  

  if (RepSpec.ArtMode == 0) or nonblank(RepSpec.FirstAcc) then begin
    StartFormat(15);
    OutString(0,0,USetStr(2682),false);
    OutString(50,0,USetStr(2683),false);
    OutString(95,0,USetStr(2691),false);
    OutString(170,0,USetStr(2684),false);
    OutString(290,0,USetStr(2680),false);
    if blank(RepSpec.AccStr) then begin
      OutString(330,0,USetStr(4908),false);
    end;
    OutStringAdjustBiDi(410,0,USetStr(2328),true,M4Val,445);
    OutStringAdjustBiDi(460,0,USetStr(2329),true,M4Val,445);
    EndFormat;
  end;
  if ( RepSpec.ArtMode == 1 ) then begin
    StartFormat(15);
    OutString(0,0,USetStr(2682),false);
    OutString(130,0,USetStr(2683),false);
    OutString(440,0,USetStr(2691),true);
    EndFormat;
  end;
  QTr.SerNr = afr;
  if (RepSpec.ArtMode==0) then begin
    Gray_Divider(0,1);
  end;
  TrHs = true;
if (RepSpec.flags[1] == 0) then begin
  while LoopMain(QTr,1,TrHs) begin
    if (ato!=-1) and (QTr.SerNr>ato) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = TestSelection(RepSpec,QTr);
      if (testf) then begin
        if (nonblank(RepSpec.f3)) or (nonblank(RepSpec.f4)) or (nonblank(RepSpec.f5)) then begin
          sum1 = blankval;
          sum4 = blankval;
          rwcnt = MatRowCnt(QTr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(QTr,i,QTrw);
            if (ReadFirstItem(QTrw.ArtCode,INr,true,false)) then begin
              test2f = true;
              if (nonblank(RepSpec.f3)) then begin
                if (INr.Group<frit) or (INr.Group>toit) then begin
                  test2f = false;
                end;
              end;
              if (nonblank(RepSpec.f4)) then begin
                if (INr.Code<frin) or (INr.Code>toin) then begin
                  test2f = false;
                end;
              end;
              if (nonblank(RepSpec.f5)) then begin
                if (SetInSet(RepSpec.f5,INr.DispGroups)==false) then begin 
                  testf = false;
                end;
              end;
              if (test2f) then begin
                sum1 = sum1 + QTrw.Sum;
                sum4 = sum4 + QTrw.Sum;
                MulVATIV(QTrw.VATCode,QTrw.Sum,vatv,t1,QTr.InclVAT,QTr.NoTAXonVAT);
                rowsum1 = QTrw.Sum;
                rowsum4 = QTrw.Sum;
                if (QTr.InclVAT>0) then begin
                  sum1 = sum1 - vatv;
                  rowsum1 = rowsum1 - vatv;
                end else begin
                  sum4 = sum4 + vatv;
                  rowsum4 = rowsum4 + vatv;
                end;
                temp = MulRateToBase1(QTr.CurncyCode,rowsum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
                Tot1Sum = Tot1Sum + temp;
                temp = MulRateToBase1(QTr.CurncyCode,rowsum1,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
                sub1tot = sub1tot + temp;

                if (RepSpec.flags[12]==1) then begin
                  temp = MulRateToBase2(QTr.CurncyCode,rowsum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
                  Tot2Sum = Tot2Sum + temp;
                  temp = MulRateToBase2(QTr.CurncyCode,rowsum1,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
                  sub2tot = sub2tot + temp;
                end;
              end;
            end;
          end;          
        end else begin
          if (QTr.InclVAT>0) then begin
            sum1 = QTr.Sum1 - QTr.Sum3;
          end else begin
            sum1 = QTr.Sum1;
          end;
          sum4 = QTr.Sum4;
          temp = MulRateToBase1(QTr.CurncyCode,sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
          Tot1Sum = Tot1Sum + temp;
          temp = MulRateToBase1(QTr.CurncyCode,sum1,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
          sub1tot = sub1tot + temp;
          if (RepSpec.flags[12]==1) then begin
            temp = MulRateToBase2(QTr.CurncyCode,sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
            Tot2Sum = Tot2Sum + temp;
            temp = MulRateToBase2(QTr.CurncyCode,sum1,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
            sub2tot = sub2tot + temp;
          end;
        end;
        if ( RepSpec.ArtMode == 1 ) then begin
          Gray_Divider(0,1);
          RepQT(QTr,RepSpec);
        end;
        if ( RepSpec.ArtMode == 0 ) then begin
          StartFormat(15);
          OutString(0,"DblQuote",QTr.SerNr,false);
          OutDate(50,0,QTr.QTDate,false);
          OutDate(95,0,QTr.MakeContactDate,false);
          OutString(170,0,QTr.Addr0,false);
          OutString(290,0,QTr.Sign,false);
          if blank(RepSpec.AccStr) then begin
            OutString(330,0,QTr.SalesMan,false);
          end;
          OutStringAdjustBiDi(410,0,sum1,true,M4Val,445);
          OutStringAdjustBiDi(460,0,sum4,true,M4Val,505);
          OutString(470,0,QTr.CurncyCode,false);
          EndFormat;
        end;
        totqty = totqty + 1;
      end;
    end;
  end;
  Gray_Divider(0,1);
  PrintQTListTotals(bascur.BaseCur1,totqty,sub1tot,Tot1Sum);
  if ((bascur.BaseCur1<>bascur.BaseCur2) and (RepSpec.flags[12]==1)) then begin
    Gray_Divider(290,1);
    PrintQTListTotals(bascur.BaseCur2,blankval,sub2tot,Tot2Sum);
  end;
end;


  
// Nadja New part - sorting by Quotation Class
if (RepSpec.flags[1]==1) then begin
    Boolean clout;

    for (k=frclassrownr;k<=tocloassrownr;k=k+1) begin
      MatRowGet(QCb,k,QCbrw);
      QTr.QuoteClass = QCbrw.Code; 
   //   QTr.SerNr = afr;
      clout = true;
      TrHs = true;
      ResetLoop(QTr);
      while LoopKey("QuoteClass",QTr,1,TrHs) begin
        if  (QTr.QuoteClass<>QCbrw.Code) then begin TrHs = false; end;
        if (TrHs) then begin
          testf = TestSelection(RepSpec,QTr);
          if (testf) then begin
            if (clout) then begin 
              StartFormat(15);
              OutString(5,0,QCbrw.Code,false);
              OutString(60,0,QCbrw.Comment,false);
              EndFormat;
              Black_Divider(0,1);
              clout = false;
            end;
            if (QTr.InclVAT>0) then begin
              sum1 = QTr.Sum1 - QTr.Sum3;
            end else begin
              sum1 = QTr.Sum1;
            end;
            temp = MulRateToBase1(QTr.CurncyCode,QTr.Sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
            Tot1Sum = Tot1Sum + temp;
            temp = MulRateToBase1(QTr.CurncyCode,sum1,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
            sub1tot = sub1tot + temp;
            if (RepSpec.flags[12]==1) then begin
              temp = MulRateToBase2(QTr.CurncyCode,QTr.Sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
              Tot2Sum = Tot2Sum + temp;
              temp = MulRateToBase2(QTr.CurncyCode,sum1,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
              sub2tot = sub2tot + temp;
            end;
            if ( RepSpec.ArtMode == 1 ) then begin
              RepQT(QTr,RepSpec);
              Gray_Divider(0,1);
            end;
            if ( RepSpec.ArtMode == 0 ) then begin
                StartFormat(15);
                OutString(0,"DblQuote",QTr.SerNr,false);
                OutDate(50,0,QTr.QTDate,false);
                OutDate(110,0,QTr.MakeContactDate,false);
                OutString(190,0,QTr.Addr0,false);
                if blank(RepSpec.AccStr) then begin
                  OutString(330,0,QTr.SalesMan,false);
                end;
                if (QTr.InclVAT>0) then begin
                  OutStringAdjustBiDi(410,0,QTr.Sum1 - QTr.Sum3,true,M4Val,445);
                end else begin
                  OutStringAdjustBiDi(410,0,QTr.Sum1,true,M4Val,445);
                end;
                OutStringAdjustBiDi(465,0,QTr.Sum4,true,M4Val,505);
                OutString(470,0,QTr.CurncyCode,false);
                EndFormat;
            end;
            totqty = totqty + 1;
          end;
        end;
    end;    //while
    if ((sub1tot<>0) or (Tot1Sum<>0)) then begin
      PrintQTListTotals(bascur.BaseCur1,blankval,sub1tot,Tot1Sum);
      if ((bascur.BaseCur1<>bascur.BaseCur2) and (RepSpec.flags[12]==1)) then begin
        Gray_Divider(290,1);
        PrintQTListTotals(bascur.BaseCur2,blankval,sub2tot,Tot2Sum);
      end;
    end;  
    //sum for globals
    sub1totG = sub1totG + sub1tot;
    Tot1SumG = Tot1SumG + Tot1Sum;
    sub2totG = sub2totG + sub2tot;
    Tot2SumG = Tot2SumG + Tot2Sum;
    sub1tot = 0;
    Tot1Sum = 0;
    sub2tot = 0;
    Tot2Sum = 0;
   end;//for
   //global total
   Black_Divider(0,1);
   StartFormat(15);
   OutString(5,0,USetStr(2687) & " ",false);
   EndFormat;
   PrintQTListTotals(bascur.BaseCur1,totqty,sub1totG,Tot1SumG);
   if ((bascur.BaseCur1<>bascur.BaseCur2) and (RepSpec.flags[12]==1)) then begin
      Gray_Divider(290,1);
      PrintQTListTotals(bascur.BaseCur2,blankval,sub2totG,Tot2SumG);
   end;
  end;
  EndJob;
  return;
end;

