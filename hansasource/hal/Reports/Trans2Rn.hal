external procedure BeginCurncyTotals(var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external function Integer TypeOfCurncy(var string,var Integer);
external procedure GetFullCurncyRateText(Boolean,var string,val,val,val,val,val);
external procedure TRExtYc(record TRVc,var string);

procedure ToStrTRCode(var string rstr,Integer ycp,LongInt nrp)
begin
  string 255 t2;
  
  t2 = nrp;
  rstr = StrTRCode(ycp);
  if (nonblank(rstr)) then begin
    rstr = rstr & ".";
  end;  
  rstr = rstr & t2;
  return;
end;

procedure TransFormat(record TRVc TRr)
BEGIN
  record AccVc Accr;
  record BaseCurBlock bcr;
  record CYBlock CompYear;
  row TRVc TRrw;
  Boolean Accs;
  Integer i,rwcnt,pbc,oldstyle;
  string 255 tstr;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt;
  val cv,dv,bv;
  Integer curtype;

  BeginCurncyTotals(curcnt);
  BlockLoad(bcr);
  BlockLoad(CompYear);
  rwcnt = MatRowCnt(TRr);  
  StartFormat(15);
  EndFormat;
  TRExtYc(TRr,tstr);
  StartFormat(15);
  OutString(0,0,CompYear.CompName,false);
  OutString(350,0,USetStr(3041),true);
  OutString(1,0,tstr,true);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(3042),false);
  OutString(60,0,TRr.Comment,false);
  OutString(350,0,USetStr(3043),true);
  OutDate(1,0,TRr.RegDate,true);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(3044),false);
  OutString(60,0,TRr.Sign,false);
  OutString(350,0,USetStr(3045),true);
  OutDate(1,0,TRr.TransDate,true);
  EndFormat;
  StartFormat(15);
  OutString(350,0,USetStr(3057),true);
  OutString(1,0,TRr.RefStr,true);
  EndFormat;
  StartFormat(60);
  EndFormat;
  StartFormat(15);
  OutString(15,0,USetStr(3046),false);
  OutString(60,0,USetStr(3047),false);
  OutString(160,0,USetStr(3048),false);
  OutString(380,0,USetStr(3049),true);
  OutString(1,0,USetStr(3050),true);
  EndFormat;
  StartFormat(2);
  EndFormat;
  
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TRr,i,TRrw);
    pbc = pbc + 1;
    if (pbc>68) then begin
      pbc = 0;
      NewPage(false);
      StartFormat(120);
      EndFormat;
    end;
    if (TRrw.stp==1) then begin
      Accr.AccNumber = TRrw.AccNumber;
      Accs = ReadFirstMain(Accr,1,true);
      StartFormat(15);
      tstr = "";
      if (nonblank(TRrw.Comment)) then begin 
        tstr = TRrw.Comment;
      end else begin
        if (Accs) then begin 
          tstr = Accr.Comment;
        end;    
      end;      
      OutStringOvst(15,0,TRrw.AccNumber,false,TRrw.ovst);
      OutStringOvst(60,0,TRrw.Objects,false,TRrw.ovst);
      OutStringOvst(160,0,tstr,false,TRrw.ovst);
      OutValOvst(380,0,TRrw.DebVal,M4Val,true,TRrw.ovst);
      OutValOvst(1,0,TRrw.CredVal,M4Val,true,TRrw.ovst);
      EndFormat;
      pbc = pbc + 1;
      if ((nonblank(TRrw.Curncy)) and (bcr.BaseCur1!=TRrw.Curncy)) then begin
        StartFormat(15);
        OutStringOvst(200,0,TRrw.Curncy,false,TRrw.ovst);
        oldstyle = -1;
        if (TypeOfCurncy(TRrw.Curncy,oldstyle)==0) then begin
          GetFullCurncyRateText(true,tstr,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2);
        end else begin
          GetFullCurncyRateText(false,tstr,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2);
        end;  
        OutStringOvst(280,0,tstr,true,TRrw.ovst);
        OutValOvst(380,0,TRrw.CurDebVal,M4Val,true,TRrw.ovst);
        OutValOvst(1,0,TRrw.CurCredVal,M4Val,true,TRrw.ovst);
        EndFormat;
        pbc = pbc + 1;
      end;
      if (TRrw.ovst==0) then begin
        oldstyle = -1;
        curtype = TypeOfCurncy(TRrw.Curncy,oldstyle);
        switch (curtype) begin
          case 0: cv = TRrw.CurCredVal; dv = TRrw.CurDebVal;
          case 1: cv = TRrw.CredVal; dv = TRrw.DebVal;
          case 2: cv = TRrw.CredVal2; dv = TRrw.DebVal2;
        end;        
        AddCurncyTotals(acur,av1,curcnt,TRrw.Curncy,dv);
        AddCurncyTotals(acur,av2,curcnt,TRrw.Curncy,cv);
      end;
    end;
    if (TRrw.stp==2) then begin
      tstr = USetStr(3051);
      tstr = TRrw.Sign;
      StartFormat(15);
      OutString(15,0,USetStr(3052),false);
      OutDate(150,0,TRrw.UpdDate,false);
      OutString(280,0,tstr,true);
      if (TRrw.OldTransDate!=TRr.TransDate) then begin
        OutString(420,0,USetStr(3053),true);
        OutDate(1,0,TRrw.OldTransDate,true);
      end;
      EndFormat;
      pbc = pbc + 1;
    end;
    if (TRrw.stp==3) then begin
      ToStrTRCode(tstr,TRrw.CorrYc,TRrw.CorrNr);
      StartFormat(15);
      OutString(180,0,USetStr(3054),true);
      OutString(200,0,tstr,false);
      OutString(350,0,USetStr(3055),true);
      OutDate(370,0,TRrw.CorrDate,false);
      EndFormat;
      pbc = pbc + 1;
    end;    
    if (TRrw.stp==4) then begin
      ToStrTRCode(tstr,TRrw.CorrYc,TRrw.CorrNr);
      StartFormat(15);
      OutString(180,0,USetStr(3056),true);
      OutString(200,0,tstr,false);
      EndFormat;
      pbc = pbc + 1;
    end;
  end; 
  Gray_Divider(300,1);
  StartFormat(15);
   OutString(260,0,bcr.BaseCur1,false);
   OutVal(380,0,TRr.DSum,M4Val,true);
   OutVal(1,0,TRr.CSum,M4NegVal,true);
  EndFormat;
  StartFormat(15);
   OutString(260,0,bcr.BaseCur2,false);
   OutVal(380,0,TRr.DSum2,M4Val,true);
   OutVal(1,0,TRr.CSum2,M4NegVal,true);
  EndFormat;
  StartFormat(5);
  EndFormat;
  PrintCurncyTotals(acur,av1,av2,av3,curcnt,380,480,-1,260,false,0);//RepSpec.PocketPC
  RETURN;
END;

global
procedure Trans2Rn(record RcVc RepSpec)
BEGIN
  Integer yc1,yc2;
  LongInt n1,n2;
  Boolean testf;
  record TRVc TRr;
  Boolean TrHs;

  n1 = FirstTransInRange(RepSpec.f1);
  n2 = LastTransInRange(RepSpec.f1);
  yc1 = FirstTransTypeInRange(RepSpec.f1);
  yc2 = LastTransTypeInRange(RepSpec.f1);

  StartReportJob(""); 
  EndHeader;
/*  
  if ((RepSpec.Media!=1)) then begin
    StartFormat(0);
     OutString(0,0,USetStr(1048),false);
    EndFormat;
    goto L99;
  end;
*/
  TRr.Number = n1;
  TRr.IntYc = yc1;
  if (TRr.Number==-1) then begin TRr.Number = 0; end;
  TrHs = true;
  while (LoopMain(TRr,2,TrHs)) begin
    if (TrHs) then begin
      if (nonblank(RepSpec.f1)) then begin
        if (TRr.IntYc>yc2) then begin TrHs = false; end;
        if (TRr.IntYc==yc2) then begin
          if (TRr.Number>n2) then begin TrHs = false; end;
        end;  
      end;
    end;
    testf = true;
    if (TrHs==false) then begin testf = false; end;
    if (DateInRange(TRr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
      testf = false;
    end;
    if (testf) then begin
        TransFormat(TRr);
        NewPage(false);
    end;
  end;
L99:;  
  EndJob;
  RETURN;
END;
