external procedure GetBaseCurncy(Integer,var string);
external updating procedure MakeProjectInvoice2(record RcVc,record PRVc,record IVVc,record XSVc,Boolean,
                              Boolean,Boolean,Boolean,Boolean,
                              var val,var val,var val,var val,var val,
                              var Boolean,var record TBBUVc,var record TBBUVc,
                              var vector val,var Array string,var Array string,var Integer,
                              var Array record TBIVVc,var Integer);
external procedure FindBudgetRow(string,string,string,Integer,var Date,var Integer);
external function Boolean BuildBudget(string,record TBBUVc,Array Integer,var Integer);
external procedure ProjectHeader(record RcVc,record PRVc,Integer);
external procedure GetPRItemName(string,string,var string);
external procedure GetProjectStats(string,Boolean,Boolean,var val,var val,var val);
external procedure PRSumDownPay(record PRVc,var val,var val,Date,var string,var Boolean);
external procedure FindBudgetSum(string,string,string,Array Integer,Integer,var val);
external procedure GetPRClassName(string,var string);
external procedure FindInvoice2Method(string,string,string,Date,Integer,var record TBBUVc,var Integer,Boolean);
external procedure AddProjValue(Boolean,Boolean,var val,val,val,val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure GetPRItemCost(string,string,string,string,Integer,var val);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);

function Boolean IsAsBudgeted(record TBBUVc TBBUr)
BEGIN
  Boolean res;
  row TBBUVc TBBUrw;
  Integer i,rwcnt;
  
  if ((TBBUr.BudTime==1) or (TBBUr.BudOther==1) or (TBBUr.BudMaterial==1) or (TBBUr.BudStocked==1)) then begin
    res = true;
    goto LIsAsBudgeted;
  end;
  rwcnt = MatRowCnt(TBBUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUr,i,TBBUrw);
    if (TBBUrw.BudType==2) then begin
      res = true;
      goto LIsAsBudgeted;
    end;
  end;
LIsAsBudgeted:;  
  IsAsBudgeted = res;
  RETURN;
END;

procedure GetPRItemName2(string code,var string name)
begin
  record INVc INr;
  
  name="";
  INr.Code = code;
  if (ReadFirstMain(INr,1,true)) then begin
    name = INr.Name;
  end;
  return;
end;


procedure GetPRItemName3(record TBIVVc TBIVp,var string name)
begin

  name = "";
  switch (TBIVp.oVc) begin
    case 1: 
      name  = USetStr(1432);
    case 2: 
      name = USetStr(1152); 
    case 3: 
      name = USetStr(1170); 
    case 4: 
      name = USetStr(1158); 
    case 5: 
      name = USetStr(1845); 
  end;
  if (nonblank(name)) then begin
    name = name & " ";
    name = name  & TBIVp.SerNr;    
  end;
  return;
end;

procedure ProjectInvSugg4_TBIVVc(record RcVc RepSpec,record PRVc PRp,Integer ItemMode,Integer ItemType,Boolean detailf,Array Integer uarr,Integer uarrcnt,
                                 var Boolean headerf,var val prsum,var val tsumbud)
BEGIN
  record TBIVVc TBIVr;
  Boolean found,testf;
  Date dt;
  val t,sum;
  string 255 tstr,lastcomment;
  string 20 lastitem,lastempl;
  val lastprice,rowqty,bsum,thisprice;
  val sumbud,tsum;
  string 20 dblstr;
  Integer budtype;
  record ProjInfoRepVc ProjInfoRepr;

  TBIVr.PRCode = PRp.Code;
  TBIVr.Invoice = -1;
  TBIVr.oVc = 1;
  found = true;
  ProjInfoRepr.Signature = CurrentUser;
  ReadFirstMain(ProjInfoRepr,1,true);
  while (LoopKey("InvKey",TBIVr,3,found)) begin
    testf = true;
    if (TBIVr.PRCode!=PRp.Code) then begin found = false; end;
    if (TBIVr.Invoice!=-1) then begin found = false; end;
    if (nonblankdate(RepSpec.d1)) then begin
      if (TBIVr.TransDate>RepSpec.d1) then begin
        testf = false;
      end;;
      if (testf) then begin
        if (nonblankdate(TBIVr.InvAfter)) then begin
          if (RepSpec.d1<TBIVr.InvAfter) then begin testf = false; end;
        end;
      end;
    end;
    if (testf) then begin
    switch (ItemMode) begin
      case 0:
        if ((TBIVr.oVc<2) or (TBIVr.oVc>3)) then begin testf = false; end;
        if (TBIVr.ItemType!=0) then begin testf = false; end;
      case 1:
        testf = false;
        if (((TBIVr.oVc==1) or (TBIVr.oVc==2) or (TBIVr.oVc==4) or (TBIVr.oVc==6)) and (TBIVr.ItemType==1)) then begin testf = true; end;
      case 3:
        if (TBIVr.ItemType!=3) then begin testf = false; end;
      case 5:
        testf = false;
        if ((((TBIVr.oVc==1) or (TBIVr.oVc==4)) and (TBIVr.ItemType==0)) or (TBIVr.ItemType==5)) then begin testf = true; end;
    end;
    end;
    
    if (SetInSet(RepSpec.ObjStr,TBIVr.Objects)==false) then begin testf = false; end;
    FindBudgetRow(TBIVr.PRCode,TBIVr.ArtCode,TBIVr.EMCode,ItemType,dt,budtype);
    if (nonblankdate(dt)) then begin
      if (nonblankdate(RepSpec.d1)) then begin
        if (dt>RepSpec.d1) then begin testf = false; end;
      end else begin
        if (dt>CurrentDate) then begin testf = false; end;
      end;
    end;
    if (!found) then begin testf = false; end;
    if (testf) then begin
      if (headerf==false) then begin
        StartFormat(15);
        if (detailf) then begin
          OutString(0,0,USetStr(4842),false);
        end else begin
          OutString(0,0,USetStr(4843),false);
        end;
        EndFormat;
        Gray_Divider(0,1);
        ProjectHeader(RepSpec,PRp,3);
        headerf = true;
      end;
      if (blank(PRp.CurncyCode)) then begin        
        thisprice = TBIVr.Price;
      end else begin
        thisprice = TBIVr.PriceInCur;
      end;
      if (blank(lastitem)) then begin
        lastitem = TBIVr.ArtCode;
        lastempl = TBIVr.EMCode;
        lastprice = thisprice;
        lastcomment = TBIVr.Comment;
        dblstr = TBIVr.SerNr;
        dblstr = dblstr & ",";
        dblstr = dblstr & TBIVr.Row;
        dblstr = dblstr & ",";
        dblstr = dblstr & TBIVr.PRCode;
        dblstr = dblstr & ",";
        dblstr = dblstr & TBIVr.oVc;
      end;
      testf = false;
      switch (ItemMode) begin
        case 0:
          if ((TBIVr.ArtCode!=lastitem) or
              (TBIVr.EMCode!=lastempl) or
              (thisprice!=lastprice) or
              (TBIVr.Comment!=lastcomment)) then begin
            testf = true;
          end;
        case 1:
          if ((TBIVr.ArtCode!=lastitem) or
              (TBIVr.EMCode!=lastempl) or
              (thisprice!=lastprice) or
              (TBIVr.Comment!=lastcomment)) then begin
            testf = true;
          end;
        case 3:
          if ((TBIVr.ArtCode!=lastitem) or
              (TBIVr.EMCode!=lastempl) or
              (thisprice!=lastprice)) then begin
            testf = true;
          end;
          lastcomment = "";
        case 0:
          if ((TBIVr.ArtCode!=lastitem) or
              (TBIVr.EMCode!=lastempl) or
              (thisprice!=lastprice) or
              (TBIVr.Comment!=lastcomment)) then begin
            testf = true;
          end;
      end;
      
      if (testf) then begin
        StartFormat(15);
        OutStringID(20,"DblPRSpec",lastitem,false,dblstr);
        OutStringID(80,"DblPR",lastempl,false,dblstr);
        OutVal(120,0,rowqty,M4UVal,true);
        if (RepSpec.flags[29]!=0) then begin
          if (ProjInfoRepr.DetailedOnly!=0) then begin
            GetPRItemName(lastitem,lastcomment,tstr);
            OutStringID(125,"DblPR",tstr,false,dblstr);
          end;
          if (ProjInfoRepr.InclPrice!=0) then begin
            OutVal(290,0,lastprice,M423Val,true);
          end;
        end else begin
          if (RepSpec.flags[12]!=0) then begin
            GetPRItemName(lastitem,lastcomment,tstr);
            OutStringID(125,"DblPR",tstr,false,dblstr);
          end;
          if (RepSpec.flags[11]!=0) then begin
            OutVal(290,0,lastprice,M423Val,true);
          end;
        end;
        OutVal(370,0,tsum,M4Val,true);
        OutValID(450,"DblTSBud",bsum,M4Val,true,TBIVr.PRCode);
        EndFormat;
        sumbud = sumbud + bsum;
        rowqty = blankval;
        tsum = blankval;
        bsum = blankval;
        if (blank(lastitem)) or (lastempl!=TBIVr.EMCode) or (lastitem!=TBIVr.ArtCode) then begin
          dblstr = TBIVr.SerNr;
          dblstr = dblstr & ",";
          dblstr = dblstr & TBIVr.Row;
          dblstr = dblstr & ",";
          dblstr = dblstr & TBIVr.PRCode;
          dblstr = dblstr & ",";
          dblstr = dblstr & TBIVr.oVc;
        end;
        lastitem = TBIVr.ArtCode;
        lastempl = TBIVr.EMCode;
        if (blank(PRp.CurncyCode)) then begin        
          lastprice = TBIVr.Price;
        end else begin
          lastprice = TBIVr.PriceInCur;
        end;
      end;
      FindBudgetSum(TBIVr.PRCode,TBIVr.ArtCode,TBIVr.EMCode,uarr,uarrcnt,t);
      rowqty = rowqty + TBIVr.Qty;
      if (blank(PRp.CurncyCode)) then begin        
        sum = sum + TBIVr.Sum;
        tsum = tsum + TBIVr.Sum;
        prsum = prsum + TBIVr.Sum;
      end else begin
        if (nonblank(TBIVr.SumInCur)) then begin
          sum = sum + TBIVr.SumInCur;
          tsum = tsum + TBIVr.SumInCur;
          prsum = prsum + TBIVr.SumInCur;
        end else begin
          sum = sum + TBIVr.Sum;
          tsum = tsum + TBIVr.Sum;
          prsum = prsum + TBIVr.Sum;
        end;
      end;
      bsum = bsum + t;
    end;
  end;
  if ((tsum!=0) or (bsum!=0)) then begin
    if (headerf==false) then begin
      StartFormat(15);
      if (detailf) then begin
        OutString(0,0,USetStr(4842),false);
      end else begin
        OutString(0,0,USetStr(4843),false);
      end;      
      EndFormat;
      Gray_Divider(0,1);
      ProjectHeader(RepSpec,PRp,3);
      headerf = true;
    end;
    StartFormat(15);
    OutStringID(20,"DblPRSpec",lastitem,false,dblstr);
    OutStringID(80,"DblPR",lastempl,false,dblstr);
    OutVal(120,0,rowqty,M4UVal,true);
    if (RepSpec.flags[29]!=0) then begin
      if (ProjInfoRepr.DetailedOnly!=0) then begin
        GetPRItemName(lastitem,"",tstr);
        OutStringID(125,"DblPR",tstr,false,dblstr);
      end;
      if (ProjInfoRepr.InclPrice!=0) then begin
        OutVal(290,0,lastprice,M423Val,true);
      end;
    end else begin
      if (RepSpec.flags[12]!=0) then begin
        GetPRItemName(lastitem,"",tstr);
        OutStringID(125,"DblPR",tstr,false,dblstr);
      end;
      if (RepSpec.flags[11]!=0) then begin
        OutVal(290,0,lastprice,M423Val,true);
      end;
    end;
    OutVal(370,0,tsum,M4Val,true);
    if (bsum!=0) then begin
      OutValID(450,"DblTSBud",bsum,M4Val,true,PRp.Code);
    end;
    EndFormat;
    sumbud = sumbud + bsum;
    rowqty = blankval;
    tsum = blankval;
    bsum = blankval;
  end;
  if ((sum!=0) or (bsum!=0)) then begin
    Black_Divider(240,455);
    StartFormat(15);
    switch (ItemMode) begin
      case 0:
        OutString(280,0,USetStr(6794),true);
      case 1:
        OutString(280,0,USetStr(6795),true);
      case 3:
        OutString(280,0,USetStr(6793),true);
      case 5:
        OutString(280,0,USetStr(6799),true);
    end;    
    OutVal(370,0,sum,M4Val,true);
    OutVal(450,0,sumbud,M4Val,true);
    EndFormat;
    tsumbud = tsumbud + sumbud;
    StartFormat(10);
    EndFormat;
    sum = blankval;
    sumbud = blankval;
//    headerf = false;
  end;
  RETURN;
END; 

Function Boolean TestForBudget(record RcVc RepSpec,record TBBUVc TBBUp,Integer rowno)
begin
  Boolean testf;
  row TBBUVc TBBUrw;
  
  testf = true;
  MatRowGet(TBBUp,rowno,TBBUrw);
  if (TBBUrw.BudType==3) then begin testf = false; end;
  if (TBBUrw.Invoiced!=-1) then begin testf = false;  end;
  if ((RepSpec.flags[1]!=0)) then begin
    switch (TBBUrw.ItemType) begin
      case 0:
        if (TBBUp.BudOther==0) then begin
          if (TBBUrw.BudType!=2) then begin testf = false; end;
        end else begin
          if (TBBUrw.BudType==1) then begin testf = false; end;
        end;
      case 1:
        if (TBBUp.BudStocked==0) then begin
          if (TBBUrw.BudType!=2) then begin testf = false; end;
        end else begin
          if (TBBUrw.BudType==1) then begin testf = false; end;
        end;
      case 3:
        if (TBBUp.BudTime==0) then begin
          if (TBBUrw.BudType!=2) then begin testf = false; end;
        end else begin
          if (TBBUrw.BudType==1) then begin testf = false; end;
        end;
      case 5:
        if (TBBUp.BudMaterial==0) then begin
          if (TBBUrw.BudType!=2) then begin testf = false; end;
        end else begin
          if (TBBUrw.BudType==1) then begin testf = false; end;
        end;
    end;
  end;  
  if (nonblankdate(TBBUrw.InvAfter)) then begin
    if (nonblankdate(RepSpec.d1)) then begin
      if (TBBUrw.InvAfter>RepSpec.d1) then begin testf = false; end;  
    end else begin
      if (TBBUrw.InvAfter>CurrentDate) then begin testf = false; end;    
    end;
  end;
  if (SetInSet(RepSpec.ObjStr,TBBUrw.Objects)==false) then begin testf = false; end;  
  TestForBudget = testf;
end;

global
function Boolean ProjectInvSugg4(record RcVc RepSpec,record PRVc PRp,Boolean detailf,var val totsum,var val totbudg)
BEGIN
  Boolean headerf;
  Boolean testf;
  val t;
  record INVc INr;
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  Array Integer uarr;
  Integer uarracnt;
  Boolean notallshipped;
  val prsum;
  string 255 tstr;
  Boolean budfound,dummyf;
  val sumbud,tsumbud;
  val bud,invd,slask;  
  Integer i,rwcnt;
  
  budfound = BuildBudget(PRp.Code,TBBUr,uarr,uarracnt);

  ProjectInvSugg4_TBIVVc(RepSpec,PRp,3,3,detailf,uarr,uarracnt,headerf,prsum,tsumbud);  
  ProjectInvSugg4_TBIVVc(RepSpec,PRp,0,0,detailf,uarr,uarracnt,headerf,prsum,tsumbud);
  ProjectInvSugg4_TBIVVc(RepSpec,PRp,5,0,detailf,uarr,uarracnt,headerf,prsum,tsumbud);  
  ProjectInvSugg4_TBIVVc(RepSpec,PRp,1,0,detailf,uarr,uarracnt,headerf,prsum,tsumbud);
    
  if (headerf or (RepSpec.flags[1]==0) or (IsAsBudgeted(TBBUr))) then begin
    rwcnt = MatRowCnt(TBBUr);
    for (i=0;i<rwcnt;i=i+1) begin
      if (uarr[i]==0) then begin
        MatRowGet(TBBUr,i,TBBUrw);
        testf = TestForBudget(RepSpec,TBBUr,i);
        if (testf) then begin
          if (headerf==false) then begin
            StartFormat(15);
            if (detailf) then begin
              OutString(0,0,USetStr(4842),false);
            end else begin
              OutString(0,0,USetStr(4843),false);
            end;
            EndFormat;
            Gray_Divider(0,1);
            ProjectHeader(RepSpec,PRp,3);
            headerf = true;
          end;
          StartFormat(15);
          if (nonblank(TBBUrw.ArtCode)) then begin
            INr.Code = TBBUrw.ArtCode;
            if (ReadFirstMain(INr,1,true)) then begin
              tstr = INr.Name;
              if (nonblank(TBBUrw.EMCode)) then begin
                tstr = tstr & ", ";
                tstr = tstr & TBBUrw.EMCode;
              end;
              OutStringID(100,"DblTSBud",tstr,false,PRp.Code);
            end else begin
              OutStringID(100,"DblTSBud",TBBUrw.EMCode,false,PRp.Code);
            end;
            OutValID(450,"DblTSBud",TBBUrw.Sum,M4Val,true,PRp.Code);
          end else begin
            tstr = TBBUrw.Comment;
            if (nonblank(TBBUrw.EMCode)) then begin
              tstr = tstr & ", ";
              tstr = tstr & TBBUrw.EMCode;
            end;
            OutStringID(100,"DblTSBud",tstr,false,PRp.Code);
            tstr = "(";
            tstr = tstr & TBBUrw.Sum;
            tstr = tstr & ")";
            OutStringID(450,"DblTSBud",tstr,true,PRp.Code);
          end;
          EndFormat;
          sumbud = sumbud + TBBUrw.Sum;
        end;
      end;
    end;
    if (sumbud!=0) then begin
      Black_Divider(240,455);
      StartFormat(15);
      OutVal(450,0,sumbud,M4Val,true);
      EndFormat;
      tsumbud = tsumbud + sumbud;
      StartFormat(10);
      EndFormat;
    end;
    StartFormat(15);
    EndFormat;
  end;
  if (prsum!=0 or (tsumbud!=0)) then begin
    Black_Divider(240,455);
    StartFormat(15);
    OutString(280,0,USetStr(6796),true);
    OutVal(370,0,prsum,M4Val,true);
    OutVal(450,0,tsumbud,M4Val,true);
    EndFormat;
    StartFormat(10);
    EndFormat;
    bud = blankval;
    invd = blankval;
    slask = blankval;
    GetProjectStats(PRp.Code,true,false,bud,invd,slask);
    StartFormat(15);
    OutString(250,0,USetStr(4827),false);
    OutVal(450,0,invd,M4Val,true);
    EndFormat;
    PRSumDownPay(PRp,invd,slask,CurrentDate,tstr,dummyf);
    StartFormat(15);
    OutString(250,0,USetStr(4848),false);
    OutVal(450,0,invd-PRp.DownPaySent,M4Val,true);
    EndFormat;
    invd = PRp.DownPaySent + PRp.DownPayRedcd;
    StartFormat(15);
    OutString(250,0,USetStr(4847),false);
    OutVal(450,0,invd,M4Val,true);
    EndFormat;
    Gray_Divider(0,1);
  end;
  totsum = totsum + prsum;
  totbudg = totbudg + tsumbud;
  ProjectInvSugg4 = headerf;
  RETURN;
END;


procedure ProjectInvSugg2_TBIVVc(record RcVc RepSpec,record PRVc PRp,Boolean detailf,Integer ItemMode,Integer ItemType,var Boolean headerf,var Array Integer uarr,Integer uarrcnt,var val prsum,var val tsumbud)
begin
  record TBIVVc TBIVp;
  Boolean found;
  val sum,tsum;
  Boolean testf;
  val t;
  integer rownr;
  date dt;
  string 255 lastitem;
  val bsum;
  LongInt prrecid;
  string 255 tstr;
  val sumbud;
  val bud,invd,slask;
  string 20 dblstr;
  Integer budtype;

  TBIVp.PRCode = PRp.Code;
  TBIVp.Invoice = -1;
  TBIVp.oVc = 1;
  found = true;
  while (LoopKey("InvKey",TBIVp,3,found)) begin
    testf = true;
   if (TBIVp.PRCode<>PRp.Code) then begin found = false; end;
    if (TBIVp.Invoice!=-1) then begin found = false; end;
    if (nonblankdate(RepSpec.d1)) then begin
      if (TBIVp.TransDate>RepSpec.d1) then begin 
        testf = false;
      end;  
      if (testf) then begin
        if (nonblankdate(TBIVp.InvAfter)) then begin
          if (TBIVp.InvAfter>RepSpec.d1) then begin 
            testf = false; 
          end;
        end;
      end;
    end;
    if (testf) then begin
    switch (ItemMode) begin
      case 0:
        testf = false;
        if ((TBIVp.oVc==2) or (TBIVp.oVc==3) or (TBIVp.oVc==5)) and (TBIVp.ItemType==0) then begin testf = true; end;  
      case 1:
        testf = false;      
        if (((TBIVp.oVc==1) or (TBIVp.oVc==2) or (TBIVp.oVc==4) or (TBIVp.oVc==6) or (TBIVp.oVc==7)) and (TBIVp.ItemType==1)) then begin testf = true; end;  
      case 3:
        if (TBIVp.ItemType!=3) then begin testf = false; end;
      case 5:
        testf = false;
        if ((((TBIVp.oVc==1) or (TBIVp.oVc==4)) and (TBIVp.ItemType==0)) or (TBIVp.ItemType==5)) then begin testf = true; end;  
    end;
    end;
    if (SetInSet(RepSpec.ObjStr,TBIVp.Objects)==false) then begin testf = false; end;
    FindBudgetRow(TBIVp.PRCode,TBIVp.ArtCode,TBIVp.EMCode,ItemType,dt,budtype);
    if (nonblankdate(dt)) then begin
      if (nonblankdate(RepSpec.d1)) then begin
        if (dt>RepSpec.d1) then begin 
          testf = false;
        end;  
      end else begin
        if (dt>CurrentDate) then begin
          testf = false;
        end;   
      end;
    end;
    if (found == false) then begin 
      testf = false; 
    end;
    if (testf) then begin
      if (headerf==false) then begin
        StartFormat(15);
        if (detailf) then begin
          OutString(0,0,USetStr(4842),false);
        end else begin
          OutString(0,0,USetStr(4843),false);
        end;  
        EndFormat;
        Gray_Divider(0,1);
        ProjectHeader(RepSpec,PRp,2);
        headerf = true;
      end;
      if (blank(lastitem)) then begin
        lastitem = TBIVp.ArtCode;
        dblstr = TBIVp.SerNr;
        dblstr = dblstr & ";";
        dblstr = dblstr & TBIVp.Row;    
        dblstr = dblstr & ";";
        dblstr = dblstr & TBIVp.PRCode;    
        dblstr = dblstr & ";";
        dblstr = dblstr & TBIVp.oVc;    
      end;
      if (TBIVp.ArtCode<>lastitem) then begin
        StartFormat(15);
        OutStringID(20,"DblPRSpec",lastitem,false,dblstr);
        GetPRItemName(lastitem,"",tstr);
        OutStringID(100,0,tstr,false,dblstr);
        OutVal(350,0,tsum,M4Val,true);
        if (bsum!=0) then begin
          OutValID(450,"DblTSBud",bsum,M4Val,true,PRp.Code);
        end;        
        OutString(1,0,PRp.CurncyCode,true);
        EndFormat;
        sumbud = sumbud + bsum;
        tsum = blankval;
        bsum = blankval;
        lastitem = TBIVp.ArtCode;
        dblstr = TBIVp.SerNr;
        dblstr = dblstr & ";";
        dblstr = dblstr & TBIVp.Row;    
        dblstr = dblstr & ";";
        dblstr = dblstr & TBIVp.PRCode;    
        dblstr = dblstr & ";";
        dblstr = dblstr & TBIVp.oVc;    
      end;
//      if (budtype==0) then begin // No. I don't agree :)
        FindBudgetSum(TBIVp.PRCode,TBIVp.ArtCode,TBIVp.EMCode,uarr,uarrcnt,t);
        if (blank(PRp.CurncyCode)) then begin        
          sum = sum + TBIVp.Sum;
          tsum = tsum + TBIVp.Sum;
          prsum = prsum + TBIVp.Sum;
        end else begin
          if (nonblank(TBIVp.SumInCur)) then begin
            sum = sum + TBIVp.SumInCur;
            tsum = tsum + TBIVp.SumInCur;
            prsum = prsum + TBIVp.SumInCur;
          end else begin
            sum = sum + TBIVp.Sum;
            tsum = tsum + TBIVp.Sum;
            prsum = prsum + TBIVp.Sum;
          end;
        end;
        bsum = bsum + t;
//      end;
    end;
  end;
  if ((tsum!=0) or (bsum!=0)) then begin
    if (headerf==false) then begin
      StartFormat(15);
      if (detailf) then begin
        OutString(0,0,USetStr(4842),false);
      end else begin
        OutString(0,0,USetStr(4843),false);
      end;  
      EndFormat;
      Gray_Divider(0,1);
      ProjectHeader(RepSpec,PRp,2);
      headerf = true;
    end;
    StartFormat(15);
    OutStringID(20,"DblPRSpec",lastitem,false,dblstr);
    GetPRItemName(lastitem,"",tstr);
    OutStringID(100,0,tstr,false,dblstr);
    OutVal(350,0,tsum,M4Val,true);
    if (bsum!=0) then begin
      OutValID(450,"DblTSBud",bsum,M4Val,true,PRp.Code);
    end;
    OutString(1,0,PRp.CurncyCode,true);
    EndFormat;
    sumbud = sumbud + bsum;
    tsum = blankval;
    bsum = blankval;
  end;
  if ((sum!=0) or (sumbud!=0)) then begin
    Black_Divider(240,455);
    StartFormat(15);    
    switch (ItemMode) begin
      case 0:
        OutString(280,0,USetStr(6794),true);
      case 1:
        OutString(280,0,USetStr(6795),true);
      case 3:
        OutString(280,0,USetStr(6793),true);
      case 5:
        OutString(280,0,USetStr(6799),true);
    end;    
    OutVal(350,0,sum,M4Val,true);
    OutVal(450,0,sumbud,M4Val,true);
    EndFormat;
    tsumbud = tsumbud + sumbud;
    StartFormat(10);
    EndFormat;
    sum = blankval;
    sumbud = blankval;
  end;
Ljjdebug:;  
  return;
end;

global 
function Boolean ProjectInvSugg2(record RcVc RepSpec,record PRVc PRp,Boolean detailf,var val totsum,var val totbudg)
begin
  Boolean found;
  Boolean head;
  Integer curvc;
  Boolean testf; 
  record TBBUVc TBBUp;
  Array integer uarr; 
  Boolean notallshipped;
  val bsum;
  LongInt prrecid;
  val prsum,tsumbud,sumbud;
  string 255 tstr;
  Boolean budfound;
  Boolean dummyf; 
  row TBBUVc TBBUrw;
  Integer i,rwcnt;
  record INVc INr;
  string 255 tmp;
  val bud,invd,slask;
  Integer uarracnt;
  record ProjInfoRepVc ProjInfoRepr;

  head = false;
  notallshipped = false;
  curvc = 0;
  budfound = BuildBudget(PRp.Code,TBBUp,uarr,uarracnt);

  //Service
  if (TBBUp.BudTime==0) then begin
    ProjectInvSugg2_TBIVVc(RepSpec,PRp,detailf,3,3,head,uarr,uarracnt,prsum,tsumbud);  
  end;
  //Purchases 
  if (TBBUp.BudOther==0) then begin
    ProjectInvSugg2_TBIVVc(RepSpec,PRp,detailf,0,0,head,uarr,uarracnt,prsum,tsumbud);
  end;
  //Material 
  if (TBBUp.BudMaterial==0) then begin
    ProjectInvSugg2_TBIVVc(RepSpec,PRp,detailf,5,0,head,uarr,uarracnt,prsum,tsumbud);  
  end;
  //Stocked items 
  if (TBBUp.BudStocked==0) then begin
    ProjectInvSugg2_TBIVVc(RepSpec,PRp,detailf,1,0,head,uarr,uarracnt,prsum,tsumbud);
  end;
  if ((head or (RepSpec.flags[1]==0)) or (IsAsBudgeted(TBBUp))) then begin
    rwcnt = MatRowCnt(TBBUp);   
    for (i=0;i<rwcnt;i=i+1) begin
      if (uarr[i]==0) then begin
        MatRowGet(TBBUp,i,TBBUrw);
        testf = TestForBudget(RepSpec,TBBUp,i);
        if (testf) then begin
          if (head==false) then begin
            StartFormat(15);
            if (detailf) then begin
              OutString(0,0,USetStr(4842),false);
            end else begin
              OutString(0,0,USetStr(4843),false);
            end;  
            EndFormat;
            Gray_Divider(0,1);
            ProjectHeader(RepSpec,PRp,2);
            head = true;
          end;
          INr.Code = TBBUrw.ArtCode;
          if (ReadFirstMain(INr,1,true)) then begin end;
          StartFormat(15);
          if (INr.ItemType==3) or (INr.ItemType==0) then begin
            OutStringID(20,"DblPRSpec",TBBUrw.ArtCode,false,PRp.Code & ":" & i);
          end else begin
            OutString(20,0,TBBUrw.ArtCode,false);
          end;
          if (nonblank(TBBUrw.ArtCode)) then begin
            ProjInfoRepr.Signature = CurrentUser;
            ReadFirstMain(ProjInfoRepr,1,true);
            if (RepSpec.flags[29]!=0) then begin
              if (ProjInfoRepr.ShowItemDescriptionBudget==0) then begin
                if (true) then begin
                  tstr = INr.Name;
                  if (nonblank(TBBUrw.EMCode)) then begin
                    tstr = tstr & ", ";
                  end;
                  tstr = tstr & TBBUrw.EMCode;
                  OutStringID(100,0,tstr,false,PRp.Code);
                end else begin
                  OutStringID(100,0,TBBUrw.EMCode,false,PRp.Code);
                end;
              end else begin
                OutString(100,0,TBBUrw.Comment,false); 
              end;
            end else begin
              if (RepSpec.flags[13]==0) then begin
                if (true) then begin
                  tstr = INr.Name;
                  if (nonblank(TBBUrw.EMCode)) then begin
                    tstr = tstr & ", ";
                  end;
                  tstr = tstr & TBBUrw.EMCode;
                  OutStringID(100,0,tstr,false,PRp.Code);
                end else begin
                  OutStringID(100,0,TBBUrw.EMCode,false,PRp.Code);
                end;
              end else begin
                OutString(100,0,TBBUrw.Comment,false); 
              end;
            end;
            OutValID(450,"DblTSBud",TBBUrw.Sum,M4Val,true,PRp.Code);
          end else begin
            tstr = TBBUrw.Comment;
            OutStringID(100,"DblTSBud",tstr,false,PRp.Code);
            tmp = ValToString(TBBUrw.Sum,M4Val,"","",2);
            tstr = "(";
            tstr = tstr & tmp;
            tstr = tstr & ")";
            OutStringID(450,"DblTSBud",tstr,true,PRp.Code);
          end;
          EndFormat;
          sumbud = sumbud + TBBUrw.Sum;
        end;
      end;
    end;
    
    if (sumbud<>0) then begin
      Black_Divider(240,455);
      StartFormat(15);
      OutVal(450,0,sumbud,M4Val,true);
      EndFormat;
      tsumbud = tsumbud + sumbud;
      StartFormat(10);
      EndFormat;
    end;
  
      if (prsum<>0) then begin     
        if (head==false) then begin
          StartFormat(15);
          if (detailf) then begin
            OutString(0,0,USetStr(4842),false);
          end else begin
            OutString(0,0,USetStr(4843),false);
          end;  
          EndFormat;
          Gray_Divider(0,1);
          ProjectHeader(RepSpec,PRp,2);
          head = true;
        end;
        Black_Divider(240,455);
        StartFormat(15);
        OutString(280,0,USetStr(6796),true);
        OutVal(350,0,prsum,M4Val,true);
        OutVal(450,0,tsumbud,M4Val,true);
        EndFormat;
        StartFormat(10);
        EndFormat;
      end;
      bud = blankval;
      invd = 0;
      slask = blankval;
      GetProjectStats(PRp.Code,true,false,bud,invd,slask);
      if (nonblank(invd)) then begin
        if (head==false) then begin
          StartFormat(15);
          if (detailf) then begin
            OutString(0,0,USetStr(4842),false);
          end else begin
            OutString(0,0,USetStr(4843),false);
          end;  
          EndFormat;
          Gray_Divider(0,1);
          ProjectHeader(RepSpec,PRp,2);
          head = true;
        end;
        StartFormat(15);
        OutString(250,0,USetStr(4827),false);
        OutVal(450,0,invd,M4Val,true);
        EndFormat;
      end;
      tstr = "";
      PRSumDownPay(PRp,invd,slask,CurrentDate,tstr,dummyf);
      if (invd<>0) then begin
        if (head==false) then begin
          StartFormat(15);
          if (detailf) then begin
            OutString(0,0,USetStr(4842),false);
          end else begin
            OutString(0,0,USetStr(4843),false);
          end;  
          EndFormat;
          Gray_Divider(0,1);
          ProjectHeader(RepSpec,PRp,2);
          head = true;
        end;
        StartFormat(15);
        OutString(250,0,USetStr(4848),false);
        OutVal(450,0,invd-PRp.DownPaySent,M4Val,true);
        EndFormat;
        invd = PRp.DownPaySent + PRp.DownPayRedcd;
        StartFormat(15);
        OutString(250,0,USetStr(4847),false);
        OutVal(450,0,invd,M4Val,true);
        EndFormat;
        Gray_Divider(0,1);
        prsum = prsum - invd;
      end;  
  end;
  totsum  = totsum + prsum;
  totbudg = totbudg + tsumbud; 
  return;
end;

function String 255 PrintCurOrOther(string curncy,string other)
begin
  string 255 res;
  string 10 basecur1;
  
  GetBaseCurncy(1,basecur1);
  if ((blank(curncy)) or (curncy==basecur1)) then begin
    res = other;
  end else begin
    res = curncy;
  end;
  PrintCurOrOther = res;
  return;
end;
                      
global 
updating function Boolean ProjectInvSugg(record RcVc RepSpec,record PRVc PRp,Boolean detailf,var val tottb,var val totbudg2,var val totpb,var val totinvd,var val dpinvbl,var val dpinvd,var val totact)
begin
  record IVVc IVp;
  Integer rwcnt,i;
  row IVVc IVrw;
  val xval,totval;
  val suminvd,sumbud,sumact;
  Boolean res;
  val sumtb,sumpb;
  record XSVc XSr;
  val t;
  record PRVc PR2p;  
  string 1 blankstring;
  boolean noflag;
  boolean invoiced,invable;
  Boolean budfound;
  record TBBUVc oldTBBUr,TBBUr;
  vector val vwipcost;
  Array string 10 awipacc;
  Array string 10 awipbalacc;
  Integer awipacccnt;
  Array record TBIVVc aupdTBIVr;
  Integer aupdacnt;

  res = false;  
  MakeProjectInvoice2(RepSpec,PRp,IVp,XSr,false,detailf,false,false,true,suminvd,sumbud,sumtb,sumpb,sumact,budfound,oldTBBUr,TBBUr,vwipcost,awipacc,awipbalacc,awipacccnt,aupdTBIVr,aupdacnt);
  if (RepSpec.flags[1]==1) then begin
    if (blank(IVp.Sum4)) then begin 
      goto LProjectInvSugg; 
    end;
  end;  
  rwcnt = MatRowCnt(IVp);
  if (rwcnt>0) then begin
    StartFormat(15);
    if (detailf) then begin
      OutString(0,0,USetStr(4842),false);
    end else begin
      OutString(0,0,USetStr(4843),false);
    end;  
    EndFormat;
    Gray_Divider(0,1);
    ProjectHeader(RepSpec,PRp,0);
    res = true;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVp,i,IVrw);
      switch (IVrw.stp) begin
        case 5:
          StartFormat(15);
          if (blank(IVrw.Spec)) then begin
            OutString(130,0,USetStr(4869),false);
          end else begin
            OutString(130,0,IVrw.Spec,false);
          end;  
          OutVal(450,0,IVrw.Sum,M4Val,true);
          OutString(460,0,PrintCurOrOther(IVp.CurncyCode,IVrw.VATCode),false);
          EndFormat;
        case kInvoiceRowTypeRetention:
          StartFormat(15);
          OutString(20,0,IVrw.ArtCode,false);
          OutVal(124,0,IVrw.Quant,M4UVal,true);
          OutString(130,0,IVrw.Spec,false);
          OutVal(340,0,IVrw.Price,M423Val,true);
          OutVal(370,0,IVrw.vRebate,M41Val,true);
          OutVal(450,0,IVrw.Sum,M4Val,true);
          OutString(460,0,PrintCurOrOther(IVp.CurncyCode,IVrw.VATCode),false);
          EndFormat;
        otherwise
          StartFormat(15);
          OutString(20,0,IVrw.ArtCode,false);
          OutVal(124,0,IVrw.Quant,M4UVal,true);
          OutString(130,0,IVrw.Spec,false);
          OutVal(340,0,IVrw.Price,M423Val,true);
          OutVal(370,0,IVrw.vRebate,M41Val,true);
          OutVal(450,0,IVrw.Sum,M4Val,true);
          OutString(460,0,PrintCurOrOther(IVp.CurncyCode,IVrw.VATCode),false);
          EndFormat;
      end;
    end;
    Gray_Divider(300,480);
    StartFormat(15);
    OutString(250,0,USetStr(4835),false);
    OutVal(450,0,IVp.Sum1,M4Val,true);
    OutString(460,0,PrintCurOrOther(IVp.CurncyCode,IVrw.VATCode),false);
    EndFormat;
    StartFormat(15);
    OutString(250,0,USetStr(4836),false);
    OutVal(450,0,IVp.Sum3,M4Val,true);
    OutString(460,0,PrintCurOrOther(IVp.CurncyCode,IVrw.VATCode),false);
    EndFormat;
    StartFormat(15);
    OutString(250,0,USetStr(4837),false);
    OutVal(450,0,IVp.Sum4,M4Val,true);
    OutString(460,0,PrintCurOrOther(IVp.CurncyCode,IVrw.VATCode),false);
    EndFormat;
  end;
  if (rwcnt==0) then begin
    if (RepSpec.flags[1]==1) then begin goto LProjectInvSugg; end;
  end;  
  if (res==false) then begin 
    Gray_Divider(0,1);
    ProjectHeader(RepSpec,PRp,0);
  end;
  StartFormat(10);
  EndFormat;
  GetProjectStats(PRp.Code,true,false,sumbud,suminvd,t);
  StartFormat(15);
  OutString(20,0,USetStr(5520),false);
  OutVal(200,0,sumtb,M4Val,true);
  OutString(250,0,USetStr(4825),false);
  OutVal(450,0,sumbud,M4Val,true);
  EndFormat;  
  StartFormat(15);
  OutString(20,0,USetStr(5521),false);
  OutVal(200,0,sumpb,M4Val,true);
  OutString(250,0,USetStr(4827),false);
  OutVal(450,0,suminvd,M4Val,true);
  EndFormat;
  StartFormat(15);
/*activities == time  
  OutString(20,0,USetStr(5524),false);
  OutVal(200,0,sumact,M4Val,true);  
*/  
  blankstring = "";
  noflag = false;
  PRSumDownPay(PRp,xval,totval,CurrentDate,blankstring,noflag);
  
  xval = xval - PRp.DownPaySent;
  OutString(250,0,USetStr(4848),false);
  OutVal(450,0,xval,M4Val,true);
  EndFormat;
  totact = totact + sumact;
  tottb = tottb + sumtb;
  totbudg2 = totbudg2 + sumbud;
  totpb = totpb + sumpb;
  totinvd = totinvd + suminvd;
  dpinvbl = dpinvbl + xval;
  StartFormat(15);
  PR2p.Code = PRp.Code;
  if ReadFirstMain(PR2p,1,true) then begin
    xval  = PR2p.DownPaySent + PR2p.DownPayRedcd;
    OutString(250,0,USetStr(4847),false);
    OutVal(450,0,xval,M4Val,true);
    dpinvd = dpinvd + xval; 
  end;  
  EndFormat;  
  Gray_Divider(0,1); 

LProjectInvSugg:; 
  ProjectInvSugg = res;
  return;
end;

procedure ProjectInvSugg3_TBIVVc(record RcVc RepSpec,record PRVc PRp,Integer ItemMode,Integer ItemType,Boolean detailf,Array Integer uarr,Integer uarrcnt,
                                 var Boolean headerf,var val tsum,var val tsumbud)
BEGIN
  record TBIVVc TBIVr;
  Boolean found,testf;
  Date dt;
  val t,sum;
  string 255 tstr;
  string 20 dblstr;
  val sumbud,tbivsum;
  Integer budtype;
  record ProjInfoRepVc ProjInfoRepr;
  
  TBIVr.PRCode = PRp.Code;
  TBIVr.Invoice = -1;
  TBIVr.oVc = 1;
  found = true;
  ProjInfoRepr.Signature = CurrentUser;
  ReadFirstMain(ProjInfoRepr,1,true);
  while (LoopKey("InvKey",TBIVr,3,found)) begin
    testf = true;
    if (TBIVr.PRCode!=PRp.Code) then begin found = false; end;
    if (TBIVr.Invoice!=-1) then begin found = false; end;
    if (nonblankdate(RepSpec.d1)) then begin
      if (TBIVr.TransDate>RepSpec.d1) then begin
        testf = false;
      end;;
      if (testf) then begin
        if (nonblankdate(TBIVr.InvAfter)) then begin
          if (RepSpec.d1<TBIVr.InvAfter) then begin testf = false; end;
        end;
      end;
    end;
    if (testf) then begin
    switch (ItemMode) begin
      case 0:
        if ((TBIVr.oVc<2) or (TBIVr.oVc>3)) then begin testf = false; end;
        if (TBIVr.ItemType!=0) then begin testf = false; end;
      case 1:
        testf = false;
        if (((TBIVr.oVc==1) or (TBIVr.oVc==2) or (TBIVr.oVc==4) or (TBIVr.oVc==6)) and (TBIVr.ItemType==1)) then begin testf = true; end;
      case 3:
        if (TBIVr.ItemType!=3) then begin testf = false; end;
      case 5:
        testf = false;
        if ((((TBIVr.oVc==1) or (TBIVr.oVc==4)) and (TBIVr.ItemType==0)) or (TBIVr.ItemType==5)) then begin testf = true; end;
    end;
    end;
    if (SetInSet(RepSpec.ObjStr,TBIVr.Objects)==false) then begin testf = false; end;
    FindBudgetRow(TBIVr.PRCode,TBIVr.ArtCode,TBIVr.EMCode,ItemType,dt,budtype);
    if (nonblankdate(dt)) then begin
      if (nonblankdate(RepSpec.d1)) then begin
        if (dt>RepSpec.d1) then begin testf = false; end;
      end else begin
        if (dt>CurrentDate) then begin testf = false; end;
      end;
    end;
    if (!found) then begin testf = false; end;
    if (testf) then begin
      if (headerf==false) then begin
        StartFormat(15);
        if (detailf) then begin
          OutString(0,0,USetStr(4842),false);
        end else begin
          OutString(0,0,USetStr(4843),false);
        end;
        EndFormat;
        Gray_Divider(0,1);
        ProjectHeader(RepSpec,PRp,1);
        headerf = true;
      end;
      dblstr = TBIVr.SerNr;
      dblstr = dblstr & ",";
      dblstr = dblstr & TBIVr.Row;
      dblstr = dblstr & ",";
      dblstr = dblstr & TBIVr.PRCode;
      dblstr = dblstr & ",";
      dblstr = dblstr & TBIVr.oVc;      
      StartFormat(15);
      OutStringID(20,"DblPR",TBIVr.ArtCode,false,dblstr);
      OutStringID(80,"DblPR",TBIVr.EMCode,false,dblstr);
      OutVal(135,0,TBIVr.InvQty,M4UVal,true);
      if (RepSpec.flags[29]!=0) then begin
        switch (ProjInfoRepr.DetailedOnly) begin
          case 0: ;
          case 1:
            GetPRItemName(TBIVr.ArtCode,TBIVr.Comment,tstr);
            OutStringID(145,"DblPR",tstr,false,dblstr);
          case 2:
            GetPRItemName2(TBIVr.ArtCode,tstr);
            OutStringID(145,"DblPR",tstr,false,dblstr);
          case 3:
            GetPRItemName3(TBIVr,tstr);
            OutStringID(145,"DblPR",tstr,false,dblstr);
        end;
        if (ProjInfoRepr.InclPrice!=0) then begin
          if (blank(PRp.CurncyCode)) then begin
            OutVal(300,0,TBIVr.Price,M423Val,true);
          end else begin
            OutVal(300,0,TBIVr.PriceInCur,M423Val,true);
          end;
        end;
      end else begin
        switch (RepSpec.flags[12]) begin
          case 0: ;
          case 1:
            GetPRItemName(TBIVr.ArtCode,TBIVr.Comment,tstr);
            OutStringID(145,"DblPR",tstr,false,dblstr);
          case 2:
            GetPRItemName2(TBIVr.ArtCode,tstr);
            OutStringID(145,"DblPR",tstr,false,dblstr);
          case 3:
            GetPRItemName3(TBIVr,tstr);
            OutStringID(145,"DblPR",tstr,false,dblstr);
        end;
        if (RepSpec.flags[11]!=0) then begin
          if (blank(PRp.CurncyCode)) then begin
            OutVal(300,0,TBIVr.Price,M423Val,true);
          end else begin
            OutVal(300,0,TBIVr.PriceInCur,M423Val,true);
          end;
        end;
      end;
      OutVal(330,0,TBIVr.Discount,M41Val,true);
      if (blank(PRp.CurncyCode)) then begin
        tbivsum = TBIVr.Sum;
      end else begin
        tbivsum = TBIVr.SumInCur;
      end;
      OutVal(385,0,tbivsum,M4Val,true);
      FindBudgetSum(TBIVr.PRCode,TBIVr.ArtCode,TBIVr.EMCode,uarr,uarrcnt,t);
      OutValID(455,"DblTSBud",t,M4Val,true,PRp.Code);
      OutString(1,0,PRp.CurncyCode,true);
      EndFormat;
      if (RepSpec.flags[29]!=0) then begin
        if (ProjInfoRepr.DetailedOnly==2) then begin
          StartFormat(15);
          OutStringID(40,"DblPR",TBIVr.TransDate,false,dblstr);
          OutStringID(125,"DblPR",TBIVr.Comment,false,dblstr);
          EndFormat;
        end;
      end else begin
        if (RepSpec.flags[12]==2) then begin
          StartFormat(15);
          OutStringID(40,"DblPR",TBIVr.TransDate,false,dblstr);
          OutStringID(125,"DblPR",TBIVr.Comment,false,dblstr);
          EndFormat;
        end;
      end;
      sumbud = sumbud + t;
      sum = sum + tbivsum;
      tsum = tsum + tbivsum;
    end;
  end;
  if ((sum!=0) or (sumbud!=0)) then begin
    Black_Divider(240,455);
    StartFormat(15);
    switch (ItemMode) begin
      case 0:
        OutString(280,0,USetStr(6794),true);
      case 1:
        OutString(280,0,USetStr(6795),true);
      case 3:
        OutString(280,0,USetStr(6793),true);
      case 5:
        OutString(280,0,USetStr(6799),true);
    end;    
    OutVal(385,0,sum,M4Val,true);
    OutValID(455,"DblTSBud",sumbud,M4Val,true,PRp.Code);
    EndFormat;
    tsumbud = tsumbud + sumbud;
    sumbud = blankval;
    StartFormat(10);
    EndFormat;
    sum = blankval;
  end;
  RETURN;
END;

global
function Boolean ProjectInvSugg3(record RcVc RepSpec,record PRVc PRp,Boolean detailf,var val totsum,var val totbudg)
BEGIN
  Boolean found;
  Boolean headerf;
  val sum,tsum;
  Boolean testf;
  Boolean notallshipped;
  val sumbud,tsumbud;
  Boolean budfound;
  string 255 tstr;
  val bud,invd,slask;
  Array Integer uarr;
  Integer uarrcnt;
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  Integer i,rwcnt;
  Boolean dummyf;
  record ProjInfoRepVc ProjInfoRepr;
  
  budfound = BuildBudget(PRp.Code,TBBUr,uarr,uarrcnt);  
  ProjectInvSugg3_TBIVVc(RepSpec,PRp,3,3,detailf,uarr,uarrcnt,headerf,tsum,tsumbud);//time
  ProjectInvSugg3_TBIVVc(RepSpec,PRp,0,0,detailf,uarr,uarrcnt,headerf,tsum,tsumbud);//purchases
  ProjectInvSugg3_TBIVVc(RepSpec,PRp,5,0,detailf,uarr,uarrcnt,headerf,tsum,tsumbud);//material
  ProjectInvSugg3_TBIVVc(RepSpec,PRp,1,0,detailf,uarr,uarrcnt,headerf,tsum,tsumbud);//stocked    

  if ((headerf or (RepSpec.flags[1]==0)) or (IsAsBudgeted(TBBUr))) then begin
    ProjInfoRepr.Signature = CurrentUser;
    ReadFirstMain(ProjInfoRepr,1,true);
    if (headerf==false) then begin
      StartFormat(15);
      if (detailf) then begin
        OutString(0,0,USetStr(4842),false);
      end else begin
        OutString(0,0,USetStr(4843),false);
      end;
      EndFormat;
      Gray_Divider(0,1);
      ProjectHeader(RepSpec,PRp,1);
      headerf = true;
    end;
    rwcnt = MatRowCnt(TBBUr);
    for (i=0;i<rwcnt;i=i+1) begin
      if (uarr[i]==0) then begin
        MatRowGet(TBBUr,i,TBBUrw);
        testf = TestForBudget(RepSpec,TBBUr,i);
        if (testf) then begin
          StartFormat(15);
          OutStringID(20,"DblTSBud",TBBUrw.ArtCode,false,PRp.Code);
          OutStringID(80,"DblTSBud",TBBUrw.EMCode,false,PRp.Code);
          OutVal(135,0,TBBUrw.Qty,M4Val,true);
          if (RepSpec.flags[29]!=0) then begin
            switch (ProjInfoRepr.DetailedOnly) begin
              case 0: ;
              case 1:
//                GetPRItemName(TBBUrw.ArtCode,TBBUrw.Comment,tstr);
                OutStringID(145,"DblTSBud",TBBUrw.Comment,false,PRp.Code);
              case 2:
                GetPRItemName2(TBBUrw.ArtCode,tstr);
                OutStringID(125,"DblTSBud",tstr,false,PRp.Code);
              case 3:
//                GetPRItemName3(TBIVp,tstr);??
                OutStringID(125,"DblTSBud",tstr,false,PRp.Code);
            end;
          end else begin
            switch (RepSpec.flags[12]) begin
              case 0: ;
              case 1:
//                GetPRItemName(TBBUrw.ArtCode,TBBUrw.Comment,tstr);
                OutStringID(145,"DblTSBud",TBBUrw.Comment,false,PRp.Code);
              case 2:
                GetPRItemName2(TBBUrw.ArtCode,tstr);
                OutStringID(125,"DblTSBud",tstr,false,PRp.Code);
              case 3:
//                GetPRItemName3(TBIVp,tstr);??
                OutStringID(125,"DblTSBud",tstr,false,PRp.Code);
            end;
          end;
          OutVal(300,0,TBBUrw.Price,M4Val,true);
          OutVal(330,0,TBBUrw.Discount,M4Val,true);
          OutValID(470,"DblTSBud",TBBUrw.Sum,M4Val,true,PRp.Code);
          EndFormat;
          if (RepSpec.flags[29]!=0) then begin
            if (RepSpec.flags[12]==2) then begin
              StartFormat(15);
              OutStringID(125,"DblTSBud",TBBUrw.Comment,false,PRp.Code);
              EndFormat;
            end;
          end else begin
            if (ProjInfoRepr.DetailedOnly==2) then begin
              StartFormat(15);
              OutStringID(125,"DblTSBud",TBBUrw.Comment,false,PRp.Code);
              EndFormat;
            end;
          end;
          if (nonblank(TBBUrw.ArtCode)) then begin
            sumbud = sumbud + TBBUrw.Sum;
          end;
        end;
      end;
    end;
  end;
  if (sumbud!=0) then begin
    Black_Divider(240,455);
    StartFormat(15);
    OutString(280,0,USetStr(4825),true);
    OutVal(450,0,sumbud,M4Val,true);
    EndFormat;
    tsumbud = tsumbud + sumbud;
    StartFormat(10);
    EndFormat;
  end;
  if (tsum!=0 or tsumbud!=0) then begin    
    Black_Divider(240,455);
    StartFormat(15);
    OutString(280,0,USetStr(6796),true);
    OutVal(385,0,tsum,M4Val,true);
    OutVal(455,0,tsumbud,M4Val,true);
    EndFormat;
    StartFormat(15);
    EndFormat;
    bud = blankval;
    invd = blankval;
    slask = blankval;
    GetProjectStats(PRp.Code,true,false,bud,invd,slask);
    StartFormat(15);
    OutString(250,0,USetStr(4827),false);
    OutVal(455,0,invd,M4Val,true);
    OutString(1,0,PRp.CurncyCode,true);
    EndFormat;
    PRSumDownPay(PRp,invd,slask,CurrentDate,tstr,dummyf);
    StartFormat(15);
    OutString(250,0,USetStr(4848),false);
    OutVal(455,0,invd-PRp.DownPaySent,M4Val,true);
    EndFormat;
    invd = PRp.DownPaySent + PRp.DownPayRedcd;
    StartFormat(15);
    OutString(250,0,USetStr(4847),false);
    OutVal(455,0,invd,M4Val,true);
    EndFormat;
    Gray_Divider(0,1);
  end;
  totsum = totsum + tsum;
  totbudg = totbudg + tsumbud;
  ProjectInvSugg3 = headerf;
  RETURN;
END;

function Boolean TestPRStatSpec(record ProjInfoRepVc ProjInfoRepr,record TBBUVc TBBUp,Integer ItemType)
begin
  Boolean res;
  row TBBUVc TBBUrw;
  record INVc INr;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(TBBUp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUp,i,TBBUrw);
    if (TBBUrw.Invoiced==-2) then begin goto L88TestPRStatSpec; end;      
    INr.Code = TBBUrw.ArtCode;
    if (ReadFirstMain(INr,1,true)==false) then begin goto L88TestPRStatSpec; end;
    if (ItemType!=-1) then begin
      if (ItemType!=5) then begin
        if ((INr.ItemType!=ItemType) or (INr.ItemMaterial==1)) then begin goto L88TestPRStatSpec; end;
      end else begin
        if ((INr.ItemMaterial==0) or (INr.ItemType!=0)) then begin goto L88TestPRStatSpec; end;
      end;
    end;
    
    res = true;
    goto LTestPRStatSpec;
L88TestPRStatSpec:;      
  end;
LTestPRStatSpec:;  
  TestPRStatSpec = res;
  return;
end;

procedure PRStatusHeader(record ProjInfoRepVc ProjInfoRepr,record PRVc PRr,string prcode,string prname,string custcode,string custname,Integer showcust)
begin
  string 255 tstr;
  
  if (ProjInfoRepr.OverviewType>0) then begin
    Gray_Divider(0,1);
    StartFormat(15);
    OutStringID(0,"DblPRVc",prcode,false,prcode);
    if (ProjInfoRepr.ShowBy==0) then begin
      OutStringID(60,0,prname,false,prcode);
    end else begin
      GetPRClassName(PRr.PRClass,tstr);        
      OutString(60,0,tstr,false);             
    end;  
    if (showcust!=0) then begin
      OutString(280,"DblCUVc",custcode,false);
      OutString(340,0,custname,false);
    end;
    EndFormat;
  end;
  return;
end;

procedure PRStatusBudgetAdd(record ProjInfoRepVc ProjInfoRepr,record TBBUVc TBBUp,record TBIVVc TBIVp,record PRVc PRp,var string oldem,var string oldin,
                          Boolean amounts,var val invablep,var val invoicedp,var val budgetp,var Integer budtp,
                          var val invableincurp,var val invoicedincurp,var val budgetincurp,
                          Integer itemtype)
begin
  row TBBUVc TBBUrw;
  record INVc INr;
  Integer i,rwcnt;
  Integer intyp;
  Boolean costf;
  val invablesum,cost,invablesumincur;
  
  rwcnt = MatRowCnt(TBBUp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUp,i,TBBUrw);
    if (TBBUrw.Invoiced==-2) then begin goto L88PRStatusBudgetAdd; end;;
    if ((oldem==TBIVp.EMCode) and (oldin==TBIVp.ArtCode)) then begin goto L88PRStatusBudgetAdd; end;
    if (TBBUrw.ArtCode!=TBIVp.ArtCode) then begin goto L88PRStatusBudgetAdd; end;
    if (nonblank(TBBUrw.EMCode)) then begin
      if (TBBUrw.EMCode!=TBIVp.EMCode) then begin
        goto L88PRStatusBudgetAdd;
      end;
    end;
    oldem = TBIVp.EMCode;
    oldin = TBIVp.ArtCode;
    budtp = TBBUrw.BudType;
    if (budtp==0) then begin
      intyp = TBBUrw.ItemType;
    end;
    if (TBBUrw.ItemType==0) then begin
      INr.Code = TBBUrw.ArtCode;
      if (ReadFirstMain(INr,1,true)) then begin
        if (INr.ItemMaterial!=0) then begin
          intyp = 5;
        end;
      end;
    end;
    if (intyp!=itemtype) then begin goto L88PRStatusBudgetAdd; end;
    switch (intyp) begin
      case 1: budtp = TBBUp.BudStocked+1;
      case 3: budtp = TBBUp.BudTime+1;
      case 5: budtp = TBBUp.BudMaterial+1;
      otherwise budtp = TBBUp.BudOther+1;
    end;
    if ((ProjInfoRepr.FunctionType==3)) then begin budtp = 1; end;
    invablesum = TBBUrw.Sum;
    invablesumincur = TBBUrw.Sum;
    if (PRp.StopInvoicing!=0) then begin 
      invablesum = blankval; 
      invablesumincur = blankval; 
    end;
    invablesum = MulRateToBase1(TBBUp.CurncyCode,invablesum,TBBUp.FrRate,TBBUp.ToRateB1,TBBUp.ToRateB2,TBBUp.BaseRate1,TBBUp.BaseRate2,DefaultCurRoundOff);
    switch (budtp) begin// here : 1 - running, 2 - fixed 
      case 1:
       if (ProjInfoRepr.FunctionType!=1) then begin 
         AddProjValue(amounts,costf,budgetp,invablesum,TBBUrw.Cost,TBBUrw.Qty);
         if (ProjInfoRepr.AmountinCurrency!=0) and (nonblank(TBBUp.CurncyCode)) then begin
           AddProjValue(amounts,costf,budgetincurp,invablesumincur,TBBUrw.Cost,TBBUrw.Qty);
         end;
       end;
      case 2:
        if (costf==false) then begin
          if (TBBUrw.Invoiced<=0) then begin
            AddProjValue(amounts,costf,invablep,invablesum,TBBUrw.Cost,TBBUrw.Qty);
            if (ProjInfoRepr.AmountinCurrency!=0) and (nonblank(TBBUp.CurncyCode)) then begin
              AddProjValue(amounts,costf,invableincurp,invablesumincur,TBBUrw.Cost,TBBUrw.Qty);
            end;
          end else begin
            AddProjValue(amounts,costf,invoicedp,invablesum,TBBUrw.Cost,TBBUrw.Qty);
            if (ProjInfoRepr.AmountinCurrency!=0) and (nonblank(TBBUp.CurncyCode)) then begin
              AddProjValue(amounts,costf,invoicedincurp,invablesumincur,TBBUrw.Cost,TBBUrw.Qty);
            end;
          end;
        end;
        if (ProjInfoRepr.FunctionType!=1) then begin AddProjValue(amounts,costf,budgetp,invablesum,TBBUrw.Cost,TBBUrw.Qty); end;
      case 3: ;
    end;    
    TBBUrw.Invoiced = -2;
    MatRowPut(TBBUp,i,TBBUrw);
L88PRStatusBudgetAdd:;
  end;
  return;
end;

procedure PRStatusCostAdd(record TBIVVc TBIVp,Boolean amounts,var val budgetp,var val budgetincurp)
begin
  if (amounts==false) then begin
    budgetp = TBIVp.InvQty;
  end else begin
    budgetp = TBIVp.InvQty*TBIVp.CostPrice;
    budgetincurp = TBIVp.InvQty*TBIVp.CostPriceInCur;
  end;
  return;
end;

procedure PRAddPTToList(record ProjInfoRepVc ProjInfoRepr,Array string aincode,Array string aemcode,Array string aprcode,Array string adblstr,Array Date adate,
                      Array val ainvoicable, Array val anotdone,Array val ainvoiced,Array val abudget,Array val abudgetcur,Array val acost,
                      Array string acomment,Array string adblroutine,var Integer acnt,
                      string ArtCode,string EMCode,string PRCode,string dblstr,Date TransDate,var val invablep,
                      val invoicedp,var val budgetp,var val budgetcurp,val costp,string comment,string dblroutine, Integer notdone)
begin
  Boolean found;
  Date bldat;
  Integer i;
  record INVc INr;
  val lcostp;
  
  if (ProjInfoRepr.AmountorQty==0) then begin
    lcostp = costp;
  end else begin
    lcostp = invablep + invoicedp;
  end;

  for (i=0;i<acnt;i=i+1) begin
    switch(ProjInfoRepr.OverviewType) begin
      case 0:
        if (notdone==1) then begin 
          anotdone[i] = anotdone[i] + invablep;
        end else begin  
          ainvoicable[i] = ainvoicable[i] + invablep;
        end; 
        ainvoiced[i] = ainvoiced[i] + invoicedp;
        abudget[i] = abudget[i] + budgetp;
        abudgetcur[i] = abudgetcur[i] + budgetcurp;
        acost[i] = acost[i] + lcostp;
        acomment[i] = "";
      case 1:
        if (notdone==1) then begin 
          anotdone[i] = anotdone[i] + invablep;
        end else begin  
          ainvoicable[i] = ainvoicable[i] + invablep;
        end;
        ainvoiced[i] = ainvoiced[i] + invoicedp;
        abudget[i] = abudget[i] + budgetp;
        abudgetcur[i] = abudgetcur[i] + budgetcurp;
        acost[i] = acost[i] + lcostp;
        acomment[i] = "";
      case 2:
        if (aincode[i]!=ArtCode) then begin goto L88PRAddPTToList; end;
        acomment[i] = "";
//        aemcode[i] = "";
        adate[i] = bldat;
        if (notdone==1) then begin 
          anotdone[i] = anotdone[i] + invablep;
        end else begin  
          ainvoicable[i] = ainvoicable[i] + invablep;
        end;  
        ainvoiced[i] = ainvoiced[i] + invoicedp;
        abudget[i] = abudget[i] + budgetp;
        abudgetcur[i] = abudgetcur[i] + budgetcurp;
        acost[i] = acost[i] + lcostp;
        found = true;
      case 3:
        if (aincode[i]!=ArtCode) then begin goto L88PRAddPTToList; end;
        if (aemcode[i]!=EMCode) then begin goto L88PRAddPTToList; end;
        if (notdone==1) then begin 
          anotdone[i] = anotdone[i] + invablep;
        end else begin  
          ainvoicable[i] = ainvoicable[i] + invablep;
        end;      
        ainvoiced[i] = ainvoiced[i] + invoicedp;
        abudget[i] = abudget[i] + budgetp;
        abudgetcur[i] = abudgetcur[i] + budgetcurp;
        acost[i] = acost[i] + lcostp;
        acomment[i] = "";
        found = true;
      case 4: ;
    end;
L88PRAddPTToList:;
  end;
  if (found==false) then begin
    aincode[acnt] = ArtCode;
    if (ProjInfoRepr.OverviewType==2) then begin
      if (ReadFirstItem(ArtCode,INr,false,false)) then begin end;
      aemcode[acnt] = INr.Name;
    end else begin
      aemcode[acnt] = EMCode;
    end;
    acomment[acnt] = comment;
    aprcode[acnt] = PRCode;
    adblstr[acnt] = dblstr;
    adblroutine[acnt] = dblroutine;
    adate[acnt] = TransDate;
    if (notdone==1) then begin 
      anotdone[acnt] = anotdone[acnt] + invablep;
    end else begin  
      ainvoicable[acnt] = ainvoicable[acnt] + invablep;
    end;   
    ainvoiced[acnt] = invoicedp;
    abudget[acnt] = budgetp;
    abudgetcur[acnt] = budgetcurp;
    acost[acnt] = lcostp;
    acnt = acnt + 1;
  end;
  return;
end;

procedure PRStatusDoSumup(val invablep,val invoicedp,val budgetp,var val addinvablep,var val addinvoicedp,var val addbudgetp)
begin
  addinvoicedp = addinvoicedp + invoicedp;
  addbudgetp = addbudgetp + budgetp;
  addinvablep = addinvablep + invablep;
  return;
end;

function Boolean AddNotDoneAct(record ProjInfoRepVc ProjInfoRepr,string prcode,
                               Array string aincode,Array string aemcode,Array string aprcode,Array string adblstr,Array Date adate,
                               Array val ainvoicable,Array val anotdone,Array val ainvoiced,Array val abudget,Array val abudgetcur,Array val acost,
                               Array string acomment,Array string adblroutine,var Integer acnt,
                               Boolean amounts,
                               var val invable,var val invoiced,var val budget,var val budgetcur,
                               var val grinvoiced,var val grnotdone,var val grinvable,var val grbudget,var val grcost,
                               var val prinvable,var val prinnotdone,var val prinvoiced,var val prbudget,var val prcost)
                               
begin
  record ActVc Actr;
  Boolean found,testf;
  val v,q;
  Boolean res;
  Integer notdone; 
  
  res = false;
  found = true;
  Actr.PRCode = prcode;
  Actr.OKFlag = 0;
  while (LoopKey("PRCode",Actr,3,found)) begin
    budget = blankval;
    invoiced = blankval;
    invable = blankval;
    if (Actr.PRCode!=prcode) then begin found = false; end;
    if (Actr.OKFlag!=0) then begin found = false; end;
    testf = found;
    if (Actr.CalTimeFlag!=1) then begin testf = false; end;
    if (testf) then begin
      q = TimeToVal(Actr.CostTime);
      GetPRItemCost(prcode,Actr.MainPersons,Actr.ItemCode,Actr.TimeClass,3,v);
      AddProjValue(amounts,true,invable,blankval,v,q);
      if (Actr.OKFlag<>1) then begin 
        notdone = 1;
      end;
      PRAddPTToList(ProjInfoRepr,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                  Actr.ItemCode,Actr.MainPersons,prcode,"",Actr.TransDate,invable,invoiced,budget,budgetcur,v*q,
                  Actr.Comment,"",notdone);
      PRStatusDoSumup(invable,invoiced,budget,grinvable,grinvoiced,grbudget);
      grnotdone = grnotdone + invable;
      grinvable = grinvable - invable;
      PRStatusDoSumup(invable,invoiced,budget,prinvable,prinvoiced,prbudget);
      prinnotdone = prinnotdone + invable;
      prinvable = prinvable - invable;
      if ((invable!=0) or (invoiced!=0) or (budget!=0)) then begin res = true; end;
    end;
  end;
  AddNotDoneAct = res;
  return;
end;

procedure PRStatusBudgNoTrans(record ProjInfoRepVc ProjInfoRepr,record PRVc PRp,Array string aincode,Array string aemcode,Array string aprcode,Array string adblstr,
                              Array Date adate,
                              Array val ainvoicable,Array val anotdone,Array val ainvoiced,Array val abudget,Array val abudgetcur,Array val acost,
                              Array string acomment,Array string adblroutine,var Integer acnt,
                              record TBBUVc TBBUp,Boolean amounts,var val invablep,
                              var val invoicedp,var val budgetp,var Integer budtp,Integer ItemType,
                              var val invableincurp,var val invoicedincurp,var val budgetincurp)
begin
  row TBBUVc TBBUrw;
  record INVc INr;
  val invable,invoiced,invoicedincur,budget,budgetincur;
  val oinvable,oinvablesum;
  Integer i,rwcnt;
  Boolean costf;
  Date blankd;
  string 255 dblroutine;
  val invablesum,invablesumincur;
  
  invablep = blankval;
  invoicedp = blankval;
  budgetp = blankval;
  rwcnt = MatRowCnt(TBBUp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUp,i,TBBUrw);
    if (TBBUrw.Invoiced==-2) then begin goto L88PRStatusBudgNoTrans; end;       
    INr.Code = TBBUrw.ArtCode;
    if (ReadFirstMain(INr,1,true)==false) then begin goto L88PRStatusBudgNoTrans; end;

    if (ItemType!=5) then begin
      if ((INr.ItemType!=ItemType) or (INr.ItemMaterial==1)) then begin goto L88PRStatusBudgNoTrans; end;
    end else begin
      if ((INr.ItemMaterial==0) or (INr.ItemType!=0)) then begin goto L88PRStatusBudgNoTrans; end;
    end;
    invable = blankval;
    invoiced = blankval;
    budget = blankval;
    budtp = TBBUrw.BudType;
    if (ProjInfoRepr.FunctionType==3) then begin budtp = 0; end;
    if (budtp==0) then begin
      switch (TBBUrw.ItemType) begin
        case 1: budtp = TBBUp.BudStocked+1;
        case 3: budtp = TBBUp.BudTime+1;
        case 5: budtp = TBBUp.BudMaterial+1;
        otherwise budtp = TBBUp.BudOther+1;
      end;
    end;
    invablesumincur = TBBUrw.Sum;
    invablesum = MulRateToBase1(TBBUp.CurncyCode,TBBUrw.Sum,TBBUp.FrRate,TBBUp.ToRateB1,TBBUp.ToRateB2,TBBUp.BaseRate1,TBBUp.BaseRate2,DefaultCurRoundOff);
    if (PRp.StopInvoicing!=0) then begin 
      invablesum = blankval; 
      invablesumincur = blankval; 
    end;
    oinvablesum = invablesum;
    if (ProjInfoRepr.FunctionType==3) then begin      
      invablesum = blankval;
      invablesumincur = blankval;
    end;
    switch (budtp) begin// here : 1 - running, 2 - fixed 
      case 1:
        if (ProjInfoRepr.FunctionType!=1) then begin
          AddProjValue(amounts,costf,budget,invablesum,TBBUrw.Cost,TBBUrw.Qty);
          if (ProjInfoRepr.AmountinCurrency!=0) and (nonblank(TBBUp.CurncyCode)) then begin
            AddProjValue(amounts,costf,budgetincurp,invablesumincur,TBBUrw.Cost,TBBUrw.Qty);
          end;
        end;
      case 2:
          if (TBBUrw.Invoiced<=0) then begin
            AddProjValue(amounts,costf,invable,invablesum,TBBUrw.Cost,TBBUrw.Qty);
            if (ProjInfoRepr.AmountinCurrency!=0) and (nonblank(TBBUp.CurncyCode)) then begin
              AddProjValue(amounts,costf,invableincurp,invablesumincur,TBBUrw.Cost,TBBUrw.Qty);
            end;
            oinvable = invable;
            if (ProjInfoRepr.FunctionType==3) then begin
              invable = blankval;
            end;
          end else begin
            oinvable = invable;
            if (ProjInfoRepr.FunctionType==3) then begin
              invable = blankval;
            end;
            AddProjValue(amounts,costf,invoiced,invablesum,TBBUrw.Cost,TBBUrw.Qty);
            if (ProjInfoRepr.AmountinCurrency!=0) and (nonblank(TBBUp.CurncyCode)) then begin
              AddProjValue(amounts,costf,invoicedincurp,invablesumincur,TBBUrw.Cost,TBBUrw.Qty);
            end;
          end;
          invablesum = oinvablesum;
          if (ProjInfoRepr.FunctionType!=1) then begin 
            AddProjValue(amounts,costf,budget,invablesum,TBBUrw.Cost,TBBUrw.Qty);
            if (ProjInfoRepr.AmountinCurrency!=0) and (nonblank(TBBUp.CurncyCode)) then begin
              AddProjValue(amounts,costf,budgetincurp,invablesumincur,TBBUrw.Cost,TBBUrw.Qty);
            end;
          end;
      case 3: ;// internal 
    end;
    dblroutine = "DblTBBUVc";
    if (budtp==1) then begin
      dblroutine = "";
    end;

    PRAddPTToList(ProjInfoRepr,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                TBBUrw.ArtCode,TBBUrw.EMCode,TBBUp.PRCode,TBBUp.PRCode,blankd,invable,invoiced,budget,budgetincur,blankval,"",dblroutine,0);
    TBBUrw.Invoiced = -2;
    PRStatusDoSumup(invable,invoiced,budget,invablep,invoicedp,budgetp);
    PRStatusDoSumup(invablesumincur,invoicedincur,budgetincur,invableincurp,invoicedincurp,budgetincurp);
L88PRStatusBudgNoTrans:;
  end;
  return;
end;

procedure FISortPTList(Array string aincode,Array string aemcode,Array string aprcode,
                     Array string adblstr,Array Date adate,
                     Array val ainvoicable,Array val anotdone,Array val ainvoiced,Array val abudget,Array val acost,Array string acomment,
                     Array string adblroutine,Integer acnt)
begin
  Integer i;
  Boolean changedf;
  string 255 tmpincode,tmpemcode,tmpprcode,tmpdblstr,tmpcomment,tmpdblroutine;
  Date tmpdate;
  val tmpinvoicable,tmpinvoiced,tmpbudget,tmpcost;
  Integer tmpanotdone;
  
  changedf = true;
  while (changedf) begin
    changedf = false;
    for (i=0;i<acnt-1;i=i+1) begin
      if (aincode[i]>aincode[i+1]) then begin
        changedf = true;
        tmpincode = aincode[i];
        tmpemcode = aemcode[i];
        tmpprcode = aprcode[i];        
        tmpdblstr = adblstr[i];        
        tmpdate = adate[i];
        tmpinvoicable = ainvoicable[i];
        tmpinvoiced = ainvoiced[i];
        tmpbudget = abudget[i];
        tmpcost = acost[i];
        tmpcomment = acomment[i];
        tmpdblroutine = adblroutine[i];
        tmpanotdone = anotdone[i]; 
        
        aincode[i] = aincode[i+1];
        aemcode[i] = aemcode[i+1];
        aprcode[i] = aprcode[i+1];
        adblstr[i] = adblstr[i+1];
        adate[i] = adate[i+1];
        ainvoicable[i] = ainvoicable[i+1];
        ainvoiced[i] = ainvoiced[i+1];
        abudget[i] = abudget[i+1];
        acost[i] = acost[i+1];
        acomment[i] = acomment[i+1];
        adblroutine[i] = adblroutine[i+1];
        anotdone[i] = anotdone[i+1]; 
        
        aincode[i+1] = tmpincode;
        aemcode[i+1] = tmpemcode;
        aprcode[i+1] = tmpprcode;
        adblstr[i+1] = tmpdblstr;
        adate[i+1] = tmpdate;
        ainvoicable[i+1] = tmpinvoicable;
        ainvoiced[i+1] = tmpinvoiced;
        abudget[i+1] = tmpbudget;
        acost[i+1] = tmpcost;
        acomment[i+1] = tmpcomment;
        adblroutine[i+1] = tmpdblroutine;
        anotdone[i+1] = tmpanotdone; 
      end;
    end;
  end;
  return;
end;

procedure PrintPRPTList(record ProjInfoRepVc ProjInfoRepr,Array string aincode,Array string aemcode,Array string aprcode,
                      Array string adblstr,Array Date adate,
                      Array val ainvoicable, Array val anotdone,Array val ainvoiced,Array val abudget,Array val acost,Array string acomment,
                      Array string adblroutine,Integer acnt)
begin
  Integer i;
  val diff;

  if (ProjInfoRepr.OverviewType<1) then begin goto LPrintPRPTListrecord; end;
  FISortPTList(aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,acost,acomment,adblroutine,acnt);

  for (i=0;i<acnt;i=i+1) begin
    diff = ainvoiced[i] + ainvoicable[i];
    diff = diff + anotdone[i];
    diff = diff - abudget[i];
    if (ProjInfoRepr.FunctionType==0) then begin diff = -diff; end;
    StartFormat(15);
    if (blank(aprcode[i])) then begin
      OutString(15,0,aincode[i],false);
      OutString(80,0,aemcode[i],false);
      if (nonblankdate(adate[i])) then begin
        OutDate(135,0,adate[i],false);
      end;
      if (ProjInfoRepr.NotOKAct==1) then begin 
        OutVal(220,0,anotdone[i],M4Val,true);
      end;  
      OutVal(270,0,ainvoicable[i],M4Val,true);
      OutVal(320,0,ainvoiced[i],M4Val,true);
      OutVal(400,0,abudget[i],M4Val,true);
      if (ProjInfoRepr.CostType!=0) then begin
        OutVal(480,0,acost[i],M4Val,true);
      end else begin
        OutVal(480,0,diff,M4Val,true);
      end;
    end else begin
      OutStringID(15,0,aincode[i],false,adblstr[i]);
      if (ProjInfoRepr.ShowContactInfo==0) then begin
        OutStringID(80,0,aemcode[i],false,adblstr[i]);
        if (nonblankdate(adate[i])) then begin
          OutStringID(135,0,adate[i],false,adblstr[i]);
        end;
      end else begin
        OutStringID(80,adblroutine[i],acomment[i],false,adblstr[i]);
      end;  
      switch (adblroutine[i]) begin
        case "DblPrTranRn":
          if (ProjInfoRepr.OverviewType!=2) then begin
            if (ProjInfoRepr.NotOKAct==1) then begin 
              OutVal(220,0,anotdone[i],M4Val,true);
            end;  
            OutValID(270,"DblPrTranRn",ainvoicable[i],M4Val,true,aprcode[i] & "," & aincode[i] & "," & aemcode[i]);
          end else begin
            if (ProjInfoRepr.NotOKAct==1) then begin 
              OutVal(220,0,anotdone[i],M4Val,true);
            end;  
            OutValID(270,adblroutine[i],ainvoicable[i],M4Val,true,adblstr[i]);
          end;
        otherwise
          if (ProjInfoRepr.NotOKAct==1) and (anotdone[i]<>0) then begin 
            OutVal(220,0,anotdone[i],M4Val,true);
          end;  
          OutValID(270,adblroutine[i],ainvoicable[i],M4Val,true,adblstr[i]);
      end;
      switch (adblroutine[i]) begin
        case "DblPrTranRn":
          if (ProjInfoRepr.OverviewType!=2) then begin
            OutValID(320,"DblPrTranRnInvd",ainvoiced[i],M4Val,true,aprcode[i] & "," & aincode[i] & "," & aemcode[i]);
          end else begin
            OutValID(320,"DblPrTranRnInvd",ainvoiced[i],M4Val,true,aprcode[i] & "," & aincode[i]);
          end;
        otherwise
          OutValID(320,adblroutine[i],ainvoiced[i],M4Val,true,adblstr[i]);
      end;
      OutValID(400,"DblTSBud",abudget[i],M4Val,true,aprcode[i]);
      if (ProjInfoRepr.CostType!=0) then begin
        OutValID(480,0,acost[i],M4Val,true,adblstr[i]);
      end else begin
        OutValID(480,0,diff,M4Val,true,adblstr[i]);
      end;
    end;
    EndFormat;
  end;
LPrintPRPTListrecord:;
  return;
end;

procedure PRStatPrintGrSumup(record ProjInfoRepVc ProjInfoRepr,Integer strnr,var val grinvoicedp,var val grinvablep,var val grbudgetp,var val grcostp,var val grnotdone)
begin
  val diff;
  
  if (ProjInfoRepr.OverviewType==0) then begin goto LPRStatPrintGrSumup; end;
  diff = grinvoicedp + grinvablep;
  diff = diff + grnotdone;
  diff = diff - grbudgetp;
  if (ProjInfoRepr.FunctionType==0) then begin diff = -diff; end;
  if (ProjInfoRepr.OverviewType!=1) then begin Black_Divider(170,480); end;
  StartFormat(15);
  OutString(15,0,"",false);
  OutString(80,0,"",false);
  OutString(170,0,USetStr(strnr),true);
  if (ProjInfoRepr.NotOKAct==1) then begin 
    OutVal(220,0,grnotdone,M4Val,true); 
  end;  
  OutVal(270,0,grinvablep,M4Val,true); 
  OutVal(320,0,grinvoicedp,M4Val,true);
  OutVal(400,0,grbudgetp,M4Val,true);
  if (ProjInfoRepr.CostType!=0) then begin
    OutVal(480,0,grcostp,M4Val,true);
  end else begin
    OutVal(480,0,diff,M4Val,true);
  end;
  EndFormat;
  if (ProjInfoRepr.OverviewType!=1) then begin
    StartFormat(15);
    EndFormat;
  end;
LPRStatPrintGrSumup:;
  grbudgetp = blankval;
  grinvoicedp = blankval;
  grinvablep = blankval;
  grcostp = blankval;
  grnotdone = blankval;
  return;
end;

procedure ClearArrays(Array string aincode,Array string aemcode,Array string aprcode,Array string adblstr,Array Date adate,
                     Array val ainvoicable,Array val anotdone,Array val ainvoiced,Array val abudget,Array val abudgetcur,Array val acost,Array string acomment,
                     Array string adblroutine,var Integer acnt)
begin
  Integer i;
  Date blankd;
  
  for (i=0;i<acnt;i=i+1) begin
    aincode[i] = "";
    aemcode[i] = "";
    aprcode[i] = "";
    adblstr[i] = "";
    adblroutine[i] = "";
    acomment[i] = "";
    adate[i] = blankd;
    ainvoicable[i] = blankval;
    ainvoiced[i] = blankval;
    abudget[i] = blankval;
    abudgetcur[i] = blankval;
    acost[i] = blankval;
    anotdone[i] = blankval;
  end;
  acnt = 0;
  return;
end;

function Boolean PRStatusDownpayable(record ProjInfoRepVc ProjInfoRepr,Array string aincode,Array string aemcode,Array string aprcode,Array string adblstr,Array Date adate,
                                     Array val ainvoicable, Array val anotdone,Array val ainvoiced,Array val abudget,Array val abudgetcur,Array val acost,Array string acomment,
                                     Array string adblroutine,var Integer acnt,
                                     record PRVc PRp,var val downpayedp,var val downpayablep,Boolean amounts,var val prinvable, var val prinvoiced,
                                     string dblroutine,var val downpayusedp,var val prinvableincur,var val prinvoicedincur,var val downpayedincurp,var val downpayableincurp,var val downpayusedincurp)
begin
  Boolean res;
  row PRVc PRrw;
  Integer rwcnt,i;
  val t,value1,value2,t1;
  val downpayd,downpayble;
  string 5 tstr;
  record IVVc IVr;
  Boolean testf,rowfoundf;
  val value1incur,value2incur;
  val downpaydincur,downpaybleincur;
  
  if (ProjInfoRepr.DownpaymentType==0) then begin goto LPRStatusDownpayable; end;
  if (amounts==false) then begin goto LPRStatusDownpayable; end;
  
  rwcnt = MatRowCnt(PRp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PRp,i,PRrw);
    testf = true;
    if (testf) then begin
      res = true;
      t = StringToVal(PRrw.ValStr,M4Val);
      value1 = blankval;
      value2 = blankval;
      if (PRrw.InvFlag!=2) then begin
        if ((PRrw.InvNr!=-1) or (PRrw.InvFlag!=0)) then begin
          value1 = MulWithRateToBase1(PRp.CurncyCode,prrw.PlanDate,t,DefaultCurRoundOff);
          value1incur = t;
        end else begin
          value2 = MulWithRateToBase1(PRp.CurncyCode,prrw.PlanDate,t,DefaultCurRoundOff);
          value2incur = t;
        end;
      end;
      downpayd = downpayd + value1;
      downpayble = downpayble + value2;

      downpaydincur = downpaydincur + value1incur;
      downpaybleincur = downpaybleincur + value2incur;
      t = blankval;
      PRAddPTToList(ProjInfoRepr,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                  tstr,tstr,tstr,tstr,PRrw.PlanDate,value2,value1,t1,t,blankval,"",dblroutine,0);
    end;
  end;
  if (ProjInfoRepr.DownpaymentType>1) then begin
    prinvable = prinvable - downpayd;
    prinvableincur = prinvableincur - downpaydincur;
    if (ProjInfoRepr.DownpaymentType==2) then begin
      if (prinvable<0) then begin
        prinvable = 0;
        prinvableincur = 0;
      end;
    end;
  end;
  downpayablep = downpayble;
  downpayedp = downpayd;
  downpayusedp = PRp.DownPayRedcd;

  downpayableincurp = downpaybleincur;
  downpayedincurp = downpaydincur;
  downpayusedincurp = PRp.DownPayRedcd;

LPRStatusDownpayable:;
  PRStatusDownpayable = res;
  return;
end;

global
procedure PrintPRSpecStats(record ProjInfoRepVc ProjInfoRepr,record PRVc PRr,var val budgetp,var val invoicedp,var val invablep,var val nondone,Boolean amounts,var val totcostp)
begin
  record TBIVVc TBIVr;
  record TBBUVc TBBUr;
  Integer budtp;
  Integer oldtype;
  Boolean budfound;
  Boolean found;
  Boolean firstf;
  Boolean firstf2;
  Boolean testf;
  Boolean grouppr;
  Boolean notallshipped;
  val budget,invoiced,invable,diff;
  val grbudget,grinvoiced,grinvable,grcost,grnodone;
  val prbudget,prinvoiced,prinvable,prnotdone;
  val downpayed,downpayable,downpayedused;
  string 255 oldem,oldin,tstr,dblstr,dblroutine;
  Boolean headerf,projstathf;
  Boolean costf;
  Array string 20 aincode;
  Array string 100 aemcode;
  Array string 20 aprcode;
  Array string 20 adblstr;
  Array string 20 adblroutine;
  Array Date adate;
  Array val ainvoicable;
  Array val anotdone;
  Array val ainvoiced;
  Array val abudget;
  Array val abudgetcur;
  Array val acost;
  Array string 60 acomment;
  Integer acnt;
  record PRVc sPRr;
  Integer i,subpram;
  array string 20 subproject;
  string 20 wproj;
  val invablesum,invablesumincur,cost,prcost;
  val invableincur,invoicedincur,budgetincur;
  val grinvableincur,grinvoicedincur,grbudgetincur,grcostincur;
  val prbudgetincur,prinvoicedincur,prinvableincur,prcostincur;
  val downpayedincur,downpayableincur,downpayedusedincur;
  val SumInCur,CostPriceInCur;
  val grnotdone;
  
  subpram = 1;
  subproject[0] = PRr.Code;  
  firstf = true;
  firstf2 = true;
  grouppr = true;

  for (i=0;i<subpram;i=i+1) begin  
    wproj = subproject[i];      
    TBBUr.PRCode = wproj;
    budfound = ReadFirstMain(TBBUr,1,true);
    if (budfound) then begin
      budfound = TestPRStatSpec(ProjInfoRepr,TBBUr,3);
    end;
    if (budfound) then begin
      projstathf = true;
      if (!headerf) then begin
        PRStatusHeader(ProjInfoRepr,PRr,PRr.Code,PRr.Name,PRr.CustCode,PRr.CustName,ProjInfoRepr.ShowContactInfo);
        headerf = true;
        firstf = false;
      end;      
    end;
    TBIVr.PRCode = wproj;
    TBIVr.Invoice = -1;
    TBIVr.oVc = 1;
    ResetLoop(TBIVr);
    found = true;
    while (LoopKey("MainKey",TBIVr,1,found)) begin
      testf = true;
      budget = blankval;
      invoiced = blankval;
      invable = blankval;

      invoicedincur = blankval;
      invableincur = blankval;
      budgetincur = blankval;
      if (TBIVr.PRCode!=wproj) then begin found = false; end;
      if (TBIVr.ItemType!=3) then begin testf = false; end;
      if (TBIVr.oVc!=1) and (TBIVr.oVc!=2) and (TBIVr.oVc!=3) and (TBIVr.oVc!=5) then begin testf = false; end;   
      if (!found) then begin testf = false; end;
      if (testf) then begin
        if (!headerf) then begin
          if (projstathf) then begin
            PRStatusHeader(ProjInfoRepr,PRr,PRr.Code,PRr.Name,PRr.CustCode,PRr.CustName,ProjInfoRepr.ShowContactInfo);
            projstathf = false;
          end;
        end;
        grouppr = false;
        if (firstf) then begin
          firstf = false;
          oldtype = TBIVr.ItemType;
        end else begin
          if (TBIVr.ItemType!=oldtype) then begin
          end;
        end;
        budtp = 0; // here : 0 - running, 1 - fixed 
        if (budfound) then begin
          FindInvoice2Method(wproj,TBIVr.ArtCode,TBIVr.EMCode,CurrentDate,TBIVr.ItemType,TBBUr,budtp,false);
        end;
        if ((ProjInfoRepr.FunctionType==3)) then begin budtp = 0; end;
        if (budtp==0) then begin
          invablesum = TBIVr.Sum;
          invablesumincur = TBIVr.SumInCur;
          if (PRr.StopInvoicing!=0) then begin 
            invablesum = blankval; 
            invablesumincur = blankval; 
          end;
          if (ProjInfoRepr.AmountinCurrency!=0) then begin
            SumInCur = TBIVr.SumInCur;
            CostPriceInCur = TBIVr.CostPriceInCur;
            if (SumInCur==0) then begin 
              SumInCur = TBIVr.Sum;
            end;  
            if (CostPriceInCur==0) then begin 
              CostPriceInCur = TBIVr.CostPrice;
            end; 
          end;  
          if ((TBIVr.Invoice==-1) or ((TBIVr.Invoice!=-1) and (nonblankdate(TBIVr.InvDate)))) then begin
            if (TBIVr.Invoice<0) then begin
              AddProjValue(amounts,costf,invable,TBIVr.Sum,TBIVr.CostPrice,TBIVr.InvQty);
              if (ProjInfoRepr.AmountinCurrency!=0) then begin
                AddProjValue(amounts,costf,invableincur,SumInCur,CostPriceInCur,TBIVr.InvQty);
              end;
            end else begin
              AddProjValue(amounts,costf,invoiced,TBIVr.Sum,TBIVr.CostPrice,TBIVr.InvQty);
              if (ProjInfoRepr.AmountinCurrency!=0) then begin
                AddProjValue(amounts,costf,invoicedincur,SumInCur,CostPriceInCur,TBIVr.InvQty);
              end;
            end;
          end else begin
            AddProjValue(amounts,costf,invoiced,TBIVr.Sum,TBIVr.CostPrice,TBIVr.InvQty);            
            if (ProjInfoRepr.AmountinCurrency!=0) then begin
              AddProjValue(amounts,costf,invoicedincur,SumInCur,CostPriceInCur,TBIVr.InvQty);
            end;
          end;
        end;
        if (budfound) then begin
          PRStatusBudgetAdd(ProjInfoRepr,TBBUr,TBIVr,PRr,oldem,oldin,amounts,invable,invoiced,budget,budtp,invableincur,invoicedincur,budgetincur,3);
        end;
        if (ProjInfoRepr.FunctionType==1) then begin PRStatusCostAdd(TBIVr,amounts,budget,budgetincur); end;
        if (!headerf) then begin
          PRStatusHeader(ProjInfoRepr,PRr,PRr.Code,PRr.Name,PRr.CustCode,PRr.CustName,ProjInfoRepr.ShowContactInfo);
          headerf = true;
          firstf = false;
        end;      
        dblroutine = "DblPR";
        switch (ProjInfoRepr.OverviewType) begin
          case 2:
            dblstr = TBIVr.PRCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.ArtCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.EMCode;
            dblroutine = "DblPrTranRn";
          case 3:
            dblstr = TBIVr.PRCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.ArtCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.EMCode;
            dblroutine = "DblPrTranRn";
          case 4:
            dblstr = TBIVr.SerNr;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.Row;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.PRCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.oVc;
        end;

        if (ProjInfoRepr.AmountinCurrency!=0) and (nonblank(TBIVr.CurncyCode)) then begin
          if (ProjInfoRepr.AmountorQty!=0) then begin
            cost = TBIVr.Qty;
          end else begin
            cost = TBIVr.CostPriceInCur*TBIVr.Qty;
          end;
          PRAddPTToList(ProjInfoRepr,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                      TBIVr.ArtCode,TBIVr.EMCode,PRr.Code,dblstr,TBIVr.TransDate,invableincur,invoicedincur,budgetincur,budgetincur,cost,
                      TBIVr.Comment,dblroutine,0);
        end else begin
          if (ProjInfoRepr.AmountorQty!=0) then begin
            cost = TBIVr.Qty;
          end else begin
            cost = TBIVr.CostPrice*TBIVr.Qty;
          end;
          PRAddPTToList(ProjInfoRepr,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                      TBIVr.ArtCode,TBIVr.EMCode,PRr.Code,dblstr,TBIVr.TransDate,invable,invoiced,budget,budgetincur,cost,
                      TBIVr.Comment,dblroutine,0);
//here                      
        end;
        PRStatusDoSumup(invable,invoiced,budget,grinvable,grinvoiced,grbudget);
        PRStatusDoSumup(invable,invoiced,budget,prinvable,prinvoiced,prbudget);
        PRStatusDoSumup(invableincur,invoicedincur,budgetincur,grinvableincur,grinvoicedincur,grbudgetincur);
        PRStatusDoSumup(invableincur,invoicedincur,budgetincur,prinvableincur,prinvoicedincur,prbudgetincur);
      end;
    end;
    if (ProjInfoRepr.NotOKAct!=0) then begin
      if (AddNotDoneAct(ProjInfoRepr,wproj,aincode,aemcode,aprcode,adblstr,adate,
                             ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                             amounts,invable,invoiced,budget,budgetincur,
                             grinvoiced,grnotdone,grinvable,grbudget,grcost,
                             prinvable,prnotdone,prinvoiced,prbudget,prcost)) then begin
                           
        grouppr = false;
      end;
    end;    
    if (budfound) then begin
      PRStatusBudgNoTrans(ProjInfoRepr,PRr,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                          TBBUr,amounts,invable,invoiced,budget,budtp,3,invableincur,invoicedincur,budgetincur);
      PRStatusDoSumup(invable,invoiced,budget,grinvable,grinvoiced,grbudget);
      PRStatusDoSumup(invable,invoiced,budget,prinvable,prinvoiced,prbudget);

      PRStatusDoSumup(invableincur,invoicedincur,budgetincur,grinvableincur,grinvoicedincur,grbudgetincur);
      PRStatusDoSumup(invableincur,invoicedincur,budgetincur,prinvableincur,prinvoicedincur,prbudgetincur);

      if ((invable!=0) or (invoiced!=0) or (budget!=0)) then begin grouppr = false; end;
    end;
  end;  
  
  if (grouppr==false) then begin
    PrintPRPTList(ProjInfoRepr,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,acost,acomment,adblroutine,acnt);
    grcost = prcost;
    if (ProjInfoRepr.AmountinCurrency!=0 and nonblank(TBIVr.CurncyCode)) then begin
      PRStatPrintGrSumup(ProjInfoRepr,6793,grinvoicedincur,grinvableincur,grbudgetincur,grcostincur,grnotdone);
    end else begin
      PRStatPrintGrSumup(ProjInfoRepr,6793,grinvoiced,grinvable,grbudget,grcost,grnotdone);
    end;
    grouppr = true;
  end;
  ClearArrays(aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt);
  
  for (i=0;i<subpram;i=i+1) begin  
    wproj=subproject[i];      
    TBBUr.PRCode = wproj;
    budfound = ReadFirstMain(TBBUr,1,true);
    if (budfound) then begin
      budfound = TestPRStatSpec(ProjInfoRepr,TBBUr,0);
    end;
    if (budfound) then begin
      projstathf = true;
      if (!headerf) then begin
        PRStatusHeader(ProjInfoRepr,PRr,PRr.Code,PRr.Name,PRr.CustCode,PRr.CustName,ProjInfoRepr.ShowContactInfo);
        headerf = true;
        firstf = false;
      end;      
    end;
  
    ResetLoop(TBIVr);
    TBIVr.PRCode = wproj;
    TBIVr.Invoice = -1;
    TBIVr.oVc = 1;
  // Purchase 
    found = true;
    while (LoopKey("MainKey",TBIVr,1,found)) begin
      testf = true;
      budget = blankval;
      invoiced = blankval;
      invable = blankval;

      budgetincur = blankval;
      invoicedincur = blankval;
      invableincur = blankval;
      if (TBIVr.PRCode!=wproj) then begin found = false; end;
      if ((TBIVr.oVc<1) or (TBIVr.oVc>4)) then begin testf = false; end;
      if (TBIVr.oVc==1) then begin
        if (TBIVr.ItemType!=0) then begin testf = false; end;
      end else begin 
        if (TBIVr.ItemType!=0) then begin testf = false; end;
      end;
      if (!found) then begin testf = false; end;
      if (testf) then begin
        if (!headerf) then begin
          if (projstathf) then begin
            PRStatusHeader(ProjInfoRepr,PRr,PRr.Code,PRr.Name,PRr.CustCode,PRr.CustName,ProjInfoRepr.ShowContactInfo);
            projstathf = false;
          end;
        end;
        grouppr = false;
        budtp = 0; // here : 0 - running, 1 - fixed 
        if (budfound) then begin FindInvoice2Method(PRr.Code,TBIVr.ArtCode,TBIVr.EMCode,CurrentDate,TBIVr.ItemType,TBBUr,budtp,false); end;
        if (ProjInfoRepr.FunctionType==3) then begin budtp = 0; end;
        if (budtp==0) then begin
          invablesum = TBIVr.Sum;
          invablesumincur = TBIVr.SumInCur;
          if (PRr.StopInvoicing!=0) then begin 
            invablesum = blankval; 
            invablesumincur = blankval; 
          end;
           if (ProjInfoRepr.AmountinCurrency!=0) then begin
            SumInCur = TBIVr.SumInCur;
            CostPriceInCur = TBIVr.CostPriceInCur;
            if (SumInCur==0) then begin 
              SumInCur = TBIVr.Sum;
            end;  
            if (CostPriceInCur==0) then begin 
              CostPriceInCur = TBIVr.CostPrice;
            end; 
          end;  
          if ((TBIVr.Invoice==-1) or 
             ((TBIVr.Invoice!=-1) and (nonblankdate(TBIVr.InvDate)) )) then begin
            if (TBIVr.Invoice<0) then begin            
              AddProjValue(amounts,costf,invable,TBIVr.Sum,TBIVr.CostPrice,TBIVr.InvQty);
              if (ProjInfoRepr.AmountinCurrency!=0) then begin
                AddProjValue(amounts,costf,invableincur,SumInCur,CostPriceInCur,TBIVr.InvQty);
              end;
            end else begin
              AddProjValue(amounts,costf,invoiced,TBIVr.Sum,TBIVr.CostPrice,TBIVr.InvQty);            
              if (ProjInfoRepr.AmountinCurrency!=0) then begin
                AddProjValue(amounts,costf,invoicedincur,SumInCur,CostPriceInCur,TBIVr.InvQty);
              end;
            end;
          end else begin
            AddProjValue(amounts,costf,invoiced,TBIVr.Sum,TBIVr.CostPrice,TBIVr.InvQty);            
            if (ProjInfoRepr.AmountinCurrency!=0) then begin
              AddProjValue(amounts,costf,invoicedincur,SumInCur,CostPriceInCur,TBIVr.InvQty);
            end;
          end;
        end;
        if (budfound) then begin 
          PRStatusBudgetAdd(ProjInfoRepr,TBBUr,TBIVr,PRr,oldem,oldin,amounts,invable,invoiced,budget,budtp,invableincur,invoicedincur,budgetincur,0);
        end;
        if (ProjInfoRepr.FunctionType==1) then begin PRStatusCostAdd(TBIVr,amounts,budget,budgetincur); end;
        if (!headerf) then begin
          if (firstf) then begin
            PRStatusHeader(ProjInfoRepr,PRr,PRr.Code,PRr.Name,PRr.CustCode,PRr.CustName,ProjInfoRepr.ShowContactInfo);
            firstf = false;
          end;
        end;
        dblroutine = "DblPR";
        switch (ProjInfoRepr.OverviewType) begin
          case 2:
            dblstr = TBIVr.PRCode;
            dblroutine = "DblPrTranRn";
          case 3:
            dblstr = TBIVr.PRCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.ArtCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.EMCode;
            dblroutine = "DblPrTranRn";
          case 4:
            dblstr = TBIVr.SerNr;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.Row;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.PRCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.oVc;
        end;
        if (ProjInfoRepr.AmountinCurrency!=0) and (nonblank(TBIVr.CurncyCode)) then begin
          if (ProjInfoRepr.AmountorQty!=0) then begin
            cost = TBIVr.Qty;
          end else begin
            cost = TBIVr.CostPriceInCur*TBIVr.Qty;
          end;
        end else begin
          if (ProjInfoRepr.AmountorQty!=0) then begin
            cost = TBIVr.Qty;
          end else begin
            cost = TBIVr.CostPrice*TBIVr.Qty;
          end;
        end;
        PRAddPTToList(ProjInfoRepr,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                    TBIVr.ArtCode,TBIVr.EMCode,TBIVr.PRCode,dblstr,TBIVr.TransDate,invable,invoiced,budget,budgetincur,cost,
                    TBIVr.Comment,dblroutine,0);
        PRStatusDoSumup(invable,invoiced,budget,grinvable,grinvoiced,grbudget);
        PRStatusDoSumup(invable,invoiced,budget,prinvable,prinvoiced,prbudget);
        
        PRStatusDoSumup(invableincur,invoicedincur,budgetincur,grinvableincur,grinvoicedincur,grbudgetincur);
        PRStatusDoSumup(invableincur,invoicedincur,budgetincur,prinvableincur,prinvoicedincur,prbudgetincur);
                
      end;
    end;
    
    if (budfound) then begin
      PRStatusBudgNoTrans(ProjInfoRepr,PRr,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                          TBBUr,amounts,invable,invoiced,budget,budtp,0,invableincur,invoicedincur,budgetincur);
      PRStatusDoSumup(invable,invoiced,budget,grinvable,grinvoiced,grbudget);
      PRStatusDoSumup(invable,invoiced,budget,prinvable,prinvoiced,prbudget);

      PRStatusDoSumup(invableincur,invoicedincur,budgetincur,grinvableincur,grinvoicedincur,grbudgetincur);
      PRStatusDoSumup(invableincur,invoicedincur,budgetincur,prinvableincur,prinvoicedincur,prbudgetincur);
     
      if ((invable!=0) or (invoiced!=0) or (budget!=0)) then begin grouppr = false; end;
    end;
  end; 
  
  if (grouppr==false) then begin
    PrintPRPTList(ProjInfoRepr,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,acost,acomment,adblroutine,acnt);
    grcost = prcost;
    PRStatPrintGrSumup(ProjInfoRepr,6794,grinvoiced,grinvable,grbudget,grcost,grnotdone);
    grouppr = true;
  end;
  ClearArrays(aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt);  
    
  for (i=0;i<subpram;i=i+1) begin  
    projstathf = false;    
    wproj = subproject[i]; 
    TBBUr.PRCode = wproj;
    budfound = ReadFirstMain(TBBUr,1,true);
    if (budfound) then begin
      budfound = TestPRStatSpec(ProjInfoRepr,TBBUr,5);
    end;
    if (budfound) then begin
      if (!headerf) then begin
        PRStatusHeader(ProjInfoRepr,PRr,PRr.Code,PRr.Name,PRr.CustCode,PRr.CustName,ProjInfoRepr.ShowContactInfo);
        headerf = true;
        firstf = false;
      end;      
      projstathf = true;
    end;
        
    ResetLoop(TBIVr);
    TBIVr.PRCode = wproj;
    TBIVr.Invoice = -1;
    TBIVr.oVc = 1;
  // Material 
    found = true;
    while (LoopKey("MainKey",TBIVr,1,found)) begin
      testf = true;
      budget = blankval;
      invoiced = blankval;
      invable = blankval;
      if (TBIVr.PRCode!=wproj) then begin found = false; end;
      if (testf) then begin
        if (TBIVr.ItemType!=5) then begin testf = false; end;
      end;
      if (!found) then begin testf = false; end;
      if (testf) then begin
        if (!headerf) then begin
          if (projstathf) then begin
            PRStatusHeader(ProjInfoRepr,PRr,PRr.Code,PRr.Name,PRr.CustCode,PRr.CustName,ProjInfoRepr.ShowContactInfo);
            projstathf = false;
          end;
        end;
        grouppr = false;
        budtp = 0; // here : 0 - running, 1 - fixed 
        if (budfound) then begin FindInvoice2Method(PRr.Code,TBIVr.ArtCode,TBIVr.EMCode,CurrentDate,5,TBBUr,budtp,false); end;
        if (ProjInfoRepr.FunctionType==3) then begin budtp = 0; end;
        if (budtp==0) then begin
          invablesum = TBIVr.Sum;
          invablesumincur = TBIVr.SumInCur;
          if (PRr.StopInvoicing!=0) then begin 
            invablesum = blankval; 
            invablesumincur = blankval; 
          end;
          if (ProjInfoRepr.AmountinCurrency!=0) then begin
            SumInCur = TBIVr.SumInCur;
            CostPriceInCur = TBIVr.CostPriceInCur;
            if (SumInCur==0) then begin 
              SumInCur = TBIVr.Sum;
            end;  
            if (CostPriceInCur==0) then begin 
              CostPriceInCur = TBIVr.CostPrice;
            end; 
          end;  
          if ((TBIVr.Invoice==-1) or 
             ((TBIVr.Invoice!=-1) and (nonblankdate(TBIVr.InvDate)))) then begin
            if (TBIVr.Invoice<0) then begin            
              AddProjValue(amounts,costf,invable,TBIVr.Sum,TBIVr.CostPrice,TBIVr.InvQty);
              if (ProjInfoRepr.AmountinCurrency!=0) then begin
                 AddProjValue(amounts,costf,invableincur,SumInCur,CostPriceInCur,TBIVr.InvQty);
              end;
            end else begin
              AddProjValue(amounts,costf,invoiced,TBIVr.Sum,TBIVr.CostPrice,TBIVr.InvQty);            
              if (ProjInfoRepr.AmountinCurrency!=0) then begin
                AddProjValue(amounts,costf,invoicedincur,SumInCur,CostPriceInCur,TBIVr.InvQty);
              end;
            end;
          end else begin
            AddProjValue(amounts,costf,invoiced,TBIVr.Sum,TBIVr.CostPrice,TBIVr.InvQty);            
            if (ProjInfoRepr.AmountinCurrency!=0) then begin
              AddProjValue(amounts,costf,invoicedincur,SumInCur,CostPriceInCur,TBIVr.InvQty);
            end;
          end;
        end;
        if (budfound) then begin
          PRStatusBudgetAdd(ProjInfoRepr,TBBUr,TBIVr,PRr,oldem,oldin,amounts,invable,invoiced,budget,budtp,invableincur,invoicedincur,budgetincur,5);
        end;
        if (ProjInfoRepr.FunctionType==1) then begin PRStatusCostAdd(TBIVr,amounts,budget,budgetincur); end;
        if (!headerf) then begin
          if (firstf) then begin
            PRStatusHeader(ProjInfoRepr,PRr,PRr.Code,PRr.Name,PRr.CustCode,PRr.CustName,ProjInfoRepr.ShowContactInfo);
            firstf = false;
          end;
        end;
        dblroutine = "DblPR";
        switch (ProjInfoRepr.OverviewType) begin
          case 2:
            dblstr = TBIVr.PRCode;
            dblroutine = "DblPrTranRn";
          case 3:
            dblstr = TBIVr.PRCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.ArtCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.EMCode;
            dblroutine = "DblPrTranRn";
          case 4:
            dblstr = TBIVr.SerNr;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.Row;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.PRCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.oVc;
        end;
        if (ProjInfoRepr.AmountinCurrency!=0) and (nonblank(TBIVr.CurncyCode)) then begin
          if (ProjInfoRepr.AmountorQty!=0) then begin
            cost = TBIVr.Qty;
          end else begin
            cost = TBIVr.CostPriceInCur*TBIVr.Qty;
          end;
        end else begin
          if (ProjInfoRepr.AmountorQty!=0) then begin
            cost = TBIVr.Qty;
          end else begin
            cost = TBIVr.CostPrice*TBIVr.Qty;
          end;
        end;
        PRAddPTToList(ProjInfoRepr,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                    TBIVr.ArtCode,TBIVr.EMCode,TBIVr.PRCode,dblstr,TBIVr.TransDate,invable,invoiced,budget,budgetincur,cost,
                    TBIVr.Comment,dblroutine,0);
        PRStatusDoSumup(invable,invoiced,budget,grinvable,grinvoiced,grbudget);
        PRStatusDoSumup(invable,invoiced,budget,prinvable,prinvoiced,prbudget);
        
        PRStatusDoSumup(invableincur,invoicedincur,budgetincur,grinvableincur,grinvoicedincur,grbudgetincur);
        PRStatusDoSumup(invableincur,invoicedincur,budgetincur,prinvableincur,prinvoicedincur,prbudgetincur);
              
      end;
    end;
    
    if (budfound) then begin
      PRStatusBudgNoTrans(ProjInfoRepr,PRr,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                          TBBUr,amounts,invable,invoiced,budget,budtp,5,invableincur,invoicedincur,budgetincur);
      PRStatusDoSumup(invable,invoiced,budget,grinvable,grinvoiced,grbudget);
      PRStatusDoSumup(invable,invoiced,budget,prinvable,prinvoiced,prbudget);

      PRStatusDoSumup(invableincur,invoicedincur,budgetincur,grinvableincur,grinvoicedincur,grbudgetincur);
      PRStatusDoSumup(invableincur,invoicedincur,budgetincur,prinvableincur,prinvoicedincur,prbudgetincur);
     
      if ((invable!=0) or (invoiced!=0) or (budget!=0)) then begin grouppr = false; end;
    end;
  end;  
  
  if (grouppr==false) then begin
    PrintPRPTList(ProjInfoRepr,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,acost,acomment,adblroutine,acnt);
    grcost = prcost;
    PRStatPrintGrSumup(ProjInfoRepr,6799,grinvoiced,grinvable,grbudget,grcost,grnotdone);
    grouppr = true;
  end;
  ClearArrays(aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt);
  
  for (i=0;i<subpram;i=i+1) begin  
    wproj = subproject[i]; 
    TBBUr.PRCode = wproj;
    budfound = ReadFirstMain(TBBUr,1,true);
    if (budfound) then begin
      budfound = TestPRStatSpec(ProjInfoRepr,TBBUr,1);
    end;    
    if (budfound) then begin
      if (!headerf) then begin
        PRStatusHeader(ProjInfoRepr,PRr,PRr.Code,PRr.Name,PRr.CustCode,PRr.CustName,ProjInfoRepr.ShowContactInfo);
        headerf = true;
        firstf = false;
      end;      
      projstathf = true;
    end;
 
    ResetLoop(TBIVr);
    TBIVr.PRCode = wproj;
    TBIVr.Invoice = -1;
    TBIVr.oVc = 1;
  // Stocked Items 
    found = true;
    while (LoopKey("MainKey",TBIVr,1,found)) begin
      testf = true;
      budget = blankval;
      invoiced = blankval;
      invable = blankval;
      if (TBIVr.PRCode!=wproj) then begin found = false; end;
      if (testf) then begin
        testf = false;
        if (((TBIVr.oVc==1) or (TBIVr.oVc==4) or (TBIVr.oVc==6) or (TBIVr.oVc==7)) and (TBIVr.ItemType==1)) then begin testf = true; end;
      end;
      if (!found) then begin testf = false; end;
      if (testf) then begin
        if (!headerf) then begin
          if (projstathf) then begin
            PRStatusHeader(ProjInfoRepr,PRr,PRr.Code,PRr.Name,PRr.CustCode,PRr.CustName,ProjInfoRepr.ShowContactInfo);
            projstathf = false;
          end;
        end;
        grouppr = false;
        budtp = 0; // here : 0 - running, 1 - fixed 
        if (budfound) then begin FindInvoice2Method(PRr.Code,TBIVr.ArtCode,TBIVr.EMCode,CurrentDate,TBIVr.ItemType,TBBUr,budtp,false); end;
        if (ProjInfoRepr.FunctionType==3) then begin budtp = 0; end;
        if (budtp==0) then begin
          invablesum = TBIVr.Sum;
          invablesumincur = TBIVr.SumInCur;
          if (PRr.StopInvoicing!=0) then begin 
            invablesum = blankval; 
            invablesumincur = blankval; 
          end;
           if (ProjInfoRepr.AmountinCurrency!=0) then begin
            SumInCur = TBIVr.SumInCur;
            CostPriceInCur = TBIVr.CostPriceInCur;
            if (SumInCur==0) then begin 
              SumInCur = TBIVr.Sum;
            end;  
            if (CostPriceInCur==0) then begin 
              CostPriceInCur = TBIVr.CostPrice;
            end; 
          end;  
          if ((TBIVr.Invoice==-1) or 
             ((TBIVr.Invoice!=-1) and (nonblankdate(TBIVr.InvDate)))) then begin
            if (TBIVr.Invoice<0) then begin            
              AddProjValue(amounts,costf,invable,TBIVr.Sum,TBIVr.CostPrice,TBIVr.InvQty);
              if (ProjInfoRepr.AmountinCurrency!=0) then begin
                 AddProjValue(amounts,costf,invableincur,SumInCur,CostPriceInCur,TBIVr.InvQty);
              end;
            end else begin
              AddProjValue(amounts,costf,invoiced,TBIVr.Sum,TBIVr.CostPrice,TBIVr.InvQty);            
              if (ProjInfoRepr.AmountinCurrency!=0) then begin
                AddProjValue(amounts,costf,invoicedincur,SumInCur,CostPriceInCur,TBIVr.InvQty);
              end;
            end;
          end else begin
            AddProjValue(amounts,costf,invoiced,TBIVr.Sum,TBIVr.CostPrice,TBIVr.InvQty);            
            if (ProjInfoRepr.AmountinCurrency!=0) then begin
              AddProjValue(amounts,costf,invoicedincur,SumInCur,CostPriceInCur,TBIVr.InvQty);
            end;
          end;
        end;
        if (budfound) then begin
          PRStatusBudgetAdd(ProjInfoRepr,TBBUr,TBIVr,PRr,oldem,oldin,amounts,invable,invoiced,budget,budtp,invableincur,invoicedincur,budgetincur,1);
        end;
        if (ProjInfoRepr.FunctionType==1) then begin PRStatusCostAdd(TBIVr,amounts,budget,budgetincur); end;
        if (!headerf) then begin
          if (firstf) then begin
            PRStatusHeader(ProjInfoRepr,PRr,PRr.Code,PRr.Name,PRr.CustCode,PRr.CustName,ProjInfoRepr.ShowContactInfo);
            firstf = false;
          end;
        end;
        dblroutine = "DblPR";
        switch (ProjInfoRepr.OverviewType) begin
          case 2:
            dblstr = TBIVr.PRCode;
            dblroutine = "DblPrTranRn";
          case 3:
            dblstr = TBIVr.PRCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.ArtCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.EMCode;
            dblroutine = "DblPrTranRn";
          case 4:
            dblstr = TBIVr.SerNr;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.Row;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.PRCode;
            dblstr = dblstr & ",";
            dblstr = dblstr & TBIVr.oVc;
        end;
        if (ProjInfoRepr.AmountinCurrency!=0) and (nonblank(TBIVr.CurncyCode)) then begin
          if (ProjInfoRepr.AmountorQty!=0) then begin
            cost = TBIVr.Qty;
          end else begin
            cost = TBIVr.CostPriceInCur*TBIVr.Qty;
          end;
        end else begin
          if (ProjInfoRepr.AmountorQty!=0) then begin
            cost = TBIVr.Qty;
          end else begin
            cost = TBIVr.CostPrice*TBIVr.Qty;
          end;
        end;
        PRAddPTToList(ProjInfoRepr,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                    TBIVr.ArtCode,TBIVr.EMCode,TBIVr.PRCode,dblstr,TBIVr.TransDate,invable,invoiced,budget,budgetincur,cost,
                    TBIVr.Comment,dblroutine,0);
        PRStatusDoSumup(invable,invoiced,budget,grinvable,grinvoiced,grbudget);
        PRStatusDoSumup(invable,invoiced,budget,prinvable,prinvoiced,prbudget);
        
        PRStatusDoSumup(invableincur,invoicedincur,budgetincur,grinvableincur,grinvoicedincur,grbudgetincur);
        PRStatusDoSumup(invableincur,invoicedincur,budgetincur,prinvableincur,prinvoicedincur,prbudgetincur);
                      
      end;
    end;
    
    if (budfound) then begin
      PRStatusBudgNoTrans(ProjInfoRepr,PRr,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,
                          TBBUr,amounts,invable,invoiced,budget,budtp,1,invableincur,invoicedincur,budgetincur);
      PRStatusDoSumup(invable,invoiced,budget,grinvable,grinvoiced,grbudget);
      PRStatusDoSumup(invable,invoiced,budget,prinvable,prinvoiced,prbudget);

      PRStatusDoSumup(invableincur,invoicedincur,budgetincur,grinvableincur,grinvoicedincur,grbudgetincur);
      PRStatusDoSumup(invableincur,invoicedincur,budgetincur,prinvableincur,prinvoicedincur,prbudgetincur);

      if ((invable!=0) or (invoiced!=0) or (budget!=0)) then begin grouppr = false; end;
    end;
  end;  
  
  if (grouppr==false) then begin
    PrintPRPTList(ProjInfoRepr,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,acost,acomment,adblroutine,acnt);
    grcost = prcost;
    PRStatPrintGrSumup(ProjInfoRepr,6779,grinvoiced,grinvable,grbudget,grcost,grnotdone);
    grouppr = true;
  end;
  ClearArrays(aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt);
// Down payments 
  for (i=0;i<subpram;i=i+1) begin  
    wproj=subproject[i]; 
    TBBUr.PRCode = wproj;
    budfound = ReadFirstMain(TBBUr,1,true);
    if (budfound) then begin
      budfound = TestPRStatSpec(ProjInfoRepr,TBBUr,-1);
    end;
    if (budfound) then begin
      projstathf = true;
      if (!headerf) then begin
        PRStatusHeader(ProjInfoRepr,PRr,PRr.Code,PRr.Name,PRr.CustCode,PRr.CustName,ProjInfoRepr.ShowContactInfo);
        headerf = true;
        firstf = false;
      end;      
    end;

    sPRr.Code=wproj;
    if ReadFirstMain(sPRr,1,true) then begin
       
      if (PRStatusDownpayable(ProjInfoRepr,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,abudgetcur,acost,acomment,adblroutine,acnt,sPRr,downpayed,downpayable,amounts,prinvable,prinvoiced,"DblPR",downpayedused,prinvableincur,prinvoicedincur,downpayedincur,downpayableincur,downpayedusedincur)) then begin

        if (!headerf) then begin
          if (projstathf) then begin
            PRStatusHeader(ProjInfoRepr,PRr,PRr.Code,PRr.Name,PRr.CustCode,PRr.CustName,ProjInfoRepr.ShowContactInfo);
            projstathf = false;
          end;
        end;
        if (!headerf) then begin
          PRStatusHeader(ProjInfoRepr,PRr,PRr.Code,PRr.Name,PRr.CustCode,PRr.CustName,ProjInfoRepr.ShowContactInfo);
          headerf = true;
          firstf = false;
        end;

        PrintPRPTList(ProjInfoRepr,aincode,aemcode,aprcode,adblstr,adate,ainvoicable,anotdone,ainvoiced,abudget,acost,acomment,adblroutine,acnt);
        budget = blankval;
        if (downpayable>prinvable) then begin
          if (ProjInfoRepr.DownpaymentType!=3) then begin
            prinvable = downpayable;
            prinvableincur = downpayableincur;
          end;
        end;

        prinvoiced = prinvoiced + downpayed + downpayedused;
        prinvable = prinvable - downpayedused;

        prinvoicedincur = prinvoicedincur + downpayedincur + downpayedusedincur;
        prinvableincur = prinvableincur - downpayedusedincur;

        if (!headerf) then begin
          PRStatusHeader(ProjInfoRepr,PRr,PRr.Code,PRr.Name,PRr.CustCode,PRr.CustName,ProjInfoRepr.ShowContactInfo);
          headerf = true;
          firstf = false;
        end;
        PRStatPrintGrSumup(ProjInfoRepr,4869,downpayed,downpayable,budget,grcost,grnotdone);
        if (ProjInfoRepr.AmountinCurrency!=0) and (nonblank(PRr.CurncyCode)) then begin
          PRStatPrintGrSumup(ProjInfoRepr,4869,downpayedincur,downpayableincur,budgetincur,grcost,grnotdone);
        end;
      end;
      
    end;
  end;
  
  if (ProjInfoRepr.AmountinCurrency!=0) and (nonblank(PRr.CurncyCode)) then begin
    if (ProjInfoRepr.FunctionType==3) then begin
      diff = prinvableincur;
    end else begin
      diff = prinvoicedincur + prinvableincur;
    end;
    diff = diff + prnotdone;
    diff = diff - prbudgetincur;  
  end else begin
    if (ProjInfoRepr.FunctionType==3) then begin
      diff = prinvable;
    end else begin
      diff = prinvoiced + prinvable;
    end;
    diff = diff + prnotdone;
    diff = diff - prbudget;  
  end;

  if (ProjInfoRepr.FunctionType==0) then begin diff = -diff; end;
  if ((firstf==false) or budfound) then begin
      if ((prinvable!=0) or (prinvoiced!=0) or (prbudget!=0) or (prcost!=0)) then begin
        if (ProjInfoRepr.OverviewType==0) then begin
          StartFormat(15);
          OutStringID(0,"DblPRVc",PRr.Code,false,PRr.Code);
          if (ProjInfoRepr.ShowBy==0) then begin
            OutStringID(60,0,PRr.Name,false,PRr.Code);
          end else begin
            GetPRClassName(PRr.PRClass,tstr);        
            OutString(60,0,tstr,false);                   
          end;  
        end else begin
          Black_Divider(170,480);
          StartFormat(15);
          OutString(15,0,"",false);
          OutString(80,0,"",false);
          OutString(170,0,USetStr(6796),true);
        end;
        if (ProjInfoRepr.AmountinCurrency!=0) and (nonblank(PRr.CurncyCode)) then begin
          OutVal(270,0,prinvableincur,M4Val,true);
          OutVal(320,0,prinvoicedincur,M4Val,true);
          OutVal(400,0,prbudgetincur,M4Val,true);
        end else begin
          if (ProjInfoRepr.NotOKAct==1) then begin 
            OutVal(220,0,prnotdone,M4Val,true);
          end;  
          OutVal(270,0,prinvable,M4Val,true);
          OutVal(320,0,prinvoiced,M4Val,true);
          OutVal(400,0,prbudget,M4Val,true);
        end;
        if (ProjInfoRepr.FunctionType==2) then begin
          diff = prinvable + prinvoiced;
          OutVal(9,0,diff,M4Val,true);
        end else begin
          if (ProjInfoRepr.FunctionType==0) then begin
            OutVal(9,0,diff,M4Val,true);
          end else begin
            OutVal(9,0,prcost,M4Val,true);
          end;
        end;
        if (ProjInfoRepr.AmountinCurrency!=0) and (nonblank(PRr.CurncyCode)) then begin
          OutString(470,0,PRr.CurncyCode,false);
        end;
        EndFormat;
        if (ProjInfoRepr.OverviewType!=0) then begin
          StartFormat(15);
          EndFormat;
        end;
      end;
  end;
  if (ProjInfoRepr.CostType==1) then begin
    totcostp = totcostp + prcost;
  end;   
  invoicedp = invoicedp + prinvoiced;
  budgetp = budgetp + prbudget;
  invablep = invablep + prinvable;
  nondone = nondone + prnotdone;
  return;
end;