procedure HT2Per(Date a,Date b, var string tstr)
BEGIN
  string 255 tstr2;
  
  tstr2 = PackStrDate(a);
  tstr = USetStr(3013);
  tstr = tstr & tstr2;
  tstr = tstr & " : ";
  tstr2 = PackStrDate(b);
  tstr = tstr & tstr2;
  RETURN;
END;

global
procedure AT2WriteJRn(record RcVc RepSpec)
begin
  record AT2WrofVc AT2Write;
  record AT2UnitVc ATUnitr;
  Boolean found;
  Boolean testf;
  LongInt frrec,torec;
  row AT2WrofVc AT2Writerw;
  string 255 tstr;
  Integer rwcnt;
  Integer i;
  Integer rw;
  val totsales,sval,totdprval,totpurval;
  
  totsales = 0; 
  frrec = FirstInRange(RepSpec.f1,20);
  torec =  LastInRange(RepSpec.f1,20);
 
  StartReportJob(USetStr(8840));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw +1;
  if (nonblank(RepSpec.f1)) then begin
    tstr = USetStr(8842);
    tstr = tstr & " ";
    tstr = tstr & RepSpec.f1;
    Header(rw,tstr,1);
    rw = rw + 1;
  end; 
  if (nonblank(RepSpec.f3)) then begin
    tstr = USetStr(8841);
    tstr = tstr & " ";
    tstr = tstr & RepSpec.f3;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.AccStr)) then begin
    tstr = USetStr(8843);
    tstr = tstr & " ";
    tstr = tstr & RepSpec.AccStr;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;  
  if (RepSpec.ArtMode==0) then begin
    tstr = USetStr(6671);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (RepSpec.ArtMode==1) then begin
    tstr = USetStr(6667);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (RepSpec.flags[1]==1) then begin
    if (RepSpec.flags[2]==0) then begin
      tstr = USetStr(8851);
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    if (RepSpec.flags[2]==1) then begin
      tstr = USetStr(8853);
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if ((RepSpec.flags[1]==0) and (RepSpec.flags[2]==1)) then begin
    tstr = USetStr(8852);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
    
  EndHeader;
 
  StartFormat(15);
   OutString(0,0,USetStr(8848),false);
   OutString(70,0,USetStr(8846),false);
   OutString(140,0,USetStr(8856),false);
   OutString(200,0,USetStr(8855),false);   
   if (RepSpec.ArtMode==1) then begin  
     OutString(280,0,USetStr(8847),true);
     OutString(360,0,USetStr(9734),true);
     OutString(430,0,USetStr(8854),true);
     OutString(1,0,UsetStr(5298),true);
   end else begin
     OutString(250,0,USetStr(8849),false);
   end;
  EndFormat;
  Black_Divider(0,1);   
  found = true;
  AT2Write.SerNr = frrec;
  while (LoopKey("SerNr",AT2Write,1,found)) begin
    testf = true;
    if (frrec<>-1) then begin
      if (AT2Write.SerNr>torec) then begin
        found = false;
      end;
    end; 
    if (found) then begin
      if (nonblankdate(RepSpec.sStartDate)) then begin
        if (RepSpec.sStartDate>AT2Write.TransDate) then begin
          testf = false;
        end;
        if (RepSpec.sEndDate<AT2Write.TransDate) then begin
         testf = false;
        end;
     end;
      if (nonblank(RepSpec.f1)) then begin
       if (AT2Write.SerNr>torec) then begin
         testf = false;
       end;
     end;     
     if (nonblank(RepSpec.AccStr)) then begin
       if (AT2Write.Account<>RepSpec.AccStr) then begin
         testf = false;
       end;
     end;
  
     if (nonblank(RepSpec.f3)) then begin
       if (AT2Write.DepCode<>RepSpec.f3) then begin
         testf = false;
       end;
     end;
  
     if (RepSpec.flags[1]==0) then begin
       if (AT2Write.Writeoff==0) then begin
         testf = false;
       end;
     end;
     if (RepSpec.flags[2]==0) then begin
       if (AT2Write.Writeoff==1) then begin
         testf = false;
       end;
     end;
     if (testf) then begin
       if (nonblank(RepSpec.f2)) then begin
         testf = false;
         rwcnt = MatRowCnt(AT2Write);
         for (i=0;i<rwcnt;i=i+1) begin
           MatRowGet(AT2Write,i,AT2Writerw);
           if (AT2Writerw.InventoryNr==RepSpec.f2) then begin
             testf = true;
             i = rwcnt;
           end;
         end;
       end;
     end;
     if (testf) then begin
       StartFormat(15);
         OutStringOvst(0,"DblAT2WrofVc",AT2Write.SerNr,false,AT2Write.Invalid);
         OutDateOvst(70,0,AT2Write.TransDate,false,AT2Write.Invalid);
         switch (AT2Write.Writeoff) begin
           case 0: OutStringOvst(140,0,USetStr(8851),false,AT2Write.Invalid);
           case 1: OutStringOvst(140,0,USetStr(8852),false,AT2Write.Invalid);
         end;
         OutStringOvst(200,0,AT2Write.Sign,false,AT2Write.Invalid);
         OutStringOvst(250,0,AT2Write.Comment,false,AT2Write.Invalid);  
       EndFormat;
     
        if (RepSpec.ArtMode==1) then begin
          StartFormat(5);
          EndFormat;
          rwcnt = MatRowCnt(AT2Write);
          if (rwcnt<1) then begin
            Black_Divider(0,1);
          end; 
          if (rwcnt>0) then begin 
            Gray_Divider(20,1)
            StartFormat(20);
              OutString(20,0,USetStr(8826),false);
              OutString(150,0,USetStr(8809),false);
            EndFormat;
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(AT2Write,i,AT2Writerw);
              StartFormat(15);
                OutStringOvst(20,"DblAT2UnitVc",AT2Writerw.InventoryNr,false,AT2Write.Invalid);
                OutStringOvst(150,0,AT2Writerw.Description,false,AT2Write.Invalid);
                sval = AT2Writerw.SalesVal;
                ATUnitr.InventoryNr = AT2Writerw.InventoryNr;
                if (ReadFirstMain(ATUnitr,1,true)) then begin
                  if (sval==0) then begin
                    sval = ATUnitr.PurchVal;
                  end;
                end;  
                OutStringOvst(280,0,ATUnitr.PurchVal,true,AT2Write.Invalid);  
                OutValOvst(360,0,AT2Writerw.DprVal,M4Val,true,AT2Write.Invalid);
                OutValOvst(430,0,sval,M4Val,true,AT2Write.Invalid);
                OutValOvst(1,0,sval-AT2Writerw.DprVal,M4Val,true,AT2Write.Invalid);
              EndFormat;
              if (AT2Write.Invalid==0) then begin
                totsales = totsales + sval;  
                totdprval = totdprval + AT2Writerw.DprVal;  
                totpurval = totpurval + ATUnitr.PurchVal;
              end;
            end;   
            Black_Divider(0,1); 
         end;
       end;  
     end; //testf
   end;  //found
  end;   //While
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
     OutString(150,0,USetStr(8830),false);
     OutVal(280,0,totpurval,M4Val,true);
     OutVal(360,0,totdprval,M4Val,true);
     OutVal(430,0,totsales,M4Val,true);
     OutVal(1,0,totsales-totdprval,M4Val,true);
    EndFormat;
  end;
  EndJob;
  return;
end;
