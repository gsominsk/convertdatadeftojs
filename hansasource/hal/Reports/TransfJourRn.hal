external function LongInt YearsOld(Date);
external procedure PrintObsPerGuest(String,String,date);
external procedure GetStateDesc(Integer,Var String);

global
procedure TransfJourRn(record RcVc RepSpec)
begin
  record RouteVc Router;
  record CUVc Profiler;
  record TransferVc Transfer;
  Row TransferVc Transferw;
  Boolean skip,Cont;
  record JobVc Jobr;
  Val Tot;
  String 255 tstr;
  Integer i,pax,gcnt;
  array string 20 GuestList;
  
  StartReportJob(USetStr(11225));
  EndHeader;
  
  Tot = 0;
  SetRepCol(2,40);
  SetRepCol(3,135);  
  SetRepCol(4,175); 
  SetRepCol(5,200); 
  SetRepCol(6,270);
  SetRepCol(7,330); 
  SetRepCol(8,380); 
  SetRepCol(9,470); 
  
  StartFormat(15);
  OutString(0,0,USetStr(11226),false);
  OutString(2,0,USetStr(11227),false);
  OutString(3,0,USetStr(11228),false);
  OutString(4,0,USetStr(11229),false);
  OutString(5,0,USetStr(11230),false);
  OutString(6,0,USetStr(11231),false);
  OutString(7,0,USetStr(11232),false);
  OutString(8,0,USetStr(11233),false);
  if (RepSpec.flags[2]==1) then begin
    OutString(9,0,USetStr(11234),true);
  end else begin
    OutString(9,0,USetStr(11235),true);
  end;
  EndFormat;
  Black_Divider(0,1);
  
  Cont = true;
  Transfer.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",Transfer,1,Cont)) begin
    Skip = false;
    If (Transfer.TransDate>RepSpec.sEndDate) then begin
      Skip = true;
      Cont = false;
    end;
    if nonblank(RepSpec.f1) then begin
      if (RepSpec.f1 <> Transfer.MainPersons) then begin 
        Skip = true;
      end;   
    end;
    if nonblank(RepSpec.f2) then begin
      if (RepSpec.f2 <> Transfer.Route) then begin 
        Skip = true;
      end;   
    end;
    if nonblank(RepSpec.f3) then begin
      if (RepSpec.f3 <> Transfer.ExcurType) then begin 
        Skip = true;
      end;   
    end;
    if nonblank(RepSpec.f4) then begin
      if (RepSpec.f4 <> Transfer.VehicleNr) then begin 
        Skip = true;
      end;   
    end;
    if (RepSpec.flags[5]==0) then begin
      if (Transfer.Status==4) then begin
        Skip = true;
      end;
    end;
    if (RepSpec.flags[4]==0) then begin
      if (RepSpec.flags[1]<>5) then begin
        if (RepSpec.flags[1]<> Transfer.Status) then begin 
          Skip = true;
        end;   
      end;
    end else begin
      if (RepSpec.flags[1]==Transfer.Status) then begin 
        Skip = true;
      end;
    end;

    if (not skip) then begin
      Pax = MatRowCnt(Transfer);
      StartFormat(15);
      OutString(0,"DblTransferVc",Transfer.SerNr,false);
      tstr = DateToString(Transfer.TransDate,"DD/MM");
      tstr = tstr & "  " & left(Transfer.StartTime,5) & " - " & left(Transfer.EndTime,5);
      OutString(2,0,tstr,false);
      GetStateDesc(Transfer.Status,tstr);
      OutString(3,0,left(tstr,4),false);      
//      OutString(4,"DblExcursionVc",Transfer.NrEvent,false);
      OutString(5,"DblExcurTypeVc",Transfer.ExcurType,false);
      OutString(6,0,Transfer.VehicleNr,false);
      OutString(7,0,Transfer.MainPersons,false);
      OutString(8,0,Transfer.Route,false);
      if (RepSpec.flags[2]==1) then begin
        Router.Code = Transfer.Route;
        if (ReadFirstMain(Router,1,true)) then begin
          OutVal(40,0,Router.Distance,M4Qty,true);  //LO Or 9
          Tot = Tot + Router.Distance;
        end;
      end else begin
        OutLongInt(9,0,Pax,true);
        Tot = Tot + Pax;
      end;  
      EndFormat;
      if (RepSpec.flags[3]==1) then begin
        for(i=0;i<Pax;i=i+1) begin
          StartFormat(15);
          MatRowGet(Transfer,i,Transferw);
          if (Transferw.JobNr<>-1) then begin
            Jobr.SerNr = Transferw.JobNr;
            if readfirstmain(Jobr,1,true) then begin
              if (Jobr.Mother<>-1) then begin
                tstr = Jobr.Mother;
                tstr = tstr & " -> " & Jobr.SerNr;
              end else begin
                tstr = Jobr.SerNr;
              end;
              OutString(2,0,tstr,false);
              tstr = Jobr.ResUsage  & "-" & Jobr.ResCode;
            end;
          end;  
          OutString(3,0,Transferw.GuestName,false);
          Profiler.Code = Transferw.GuestCode;
          if readfirstmain(Profiler,1,true) then begin
            OutString(6,0,Profiler.Nationality,false);
            OutString(7,0,USetStr(11236) & YearsOld(Profiler.BirthDate),false);
            OutString(9,0,tstr,true);
            gcnt = gcnt +1; 
            GuestList[gcnt] = Profiler.Code;
          end;
          EndFormat;
        end;
        if (Pax<>0) then begin
          EndFormat;
        end;
      end;
    //  Gray_Divider(0,1);
    end;
  end;
  // footer
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(11237),false);
  OutVal(9,0,Tot,M4Val,true);
  EndFormat;

  if (RepSpec.flags[10]==1) then begin
    StartFormat(15);
    OutString(0,0,USetStr(12165),false);
    EndFormat;
    Black_Divider(0,1);
    for(i=1;i<=gcnt;i=i+1) begin
      PrintObsPerGuest(GuestList[i],RepSpec.f5,RepSpec.sStartDate);
    end;
  end; 
  
  
  EndJob;
  return;
end;
