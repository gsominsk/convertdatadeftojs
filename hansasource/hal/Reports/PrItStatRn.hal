external procedure HTArtGroup(string, var string);
external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean ItemInItemGroupOrClass(string,string,string);
external function Boolean HasContactClassification();
external function Boolean HasCategories();
external procedure HTCustCat(string,var string);
external procedure HTCustClass(string,var string);
external function Boolean ContactInGroupClass(string,string,string,string,string,string);
external procedure HT2Per(Date, Date , var string);

function val findinvhour(record RcVc RepSpec, string ItemCode)
begin
  val res;
  Record TBIVVc TBr;
  Record PRVc PRr;
  Boolean testf,found;
  string 20 toitem, fromitem;
  
  res = 0;
  found = true; 
  TBr.ArtCode = ItemCode; 
  while (LoopKey("ArtCode",TBr,1,found)) begin
    if (found) then begin
      if (TBr.ArtCode <> ItemCode) then begin
        found = false;
      end;
    end;
    if (found) then begin
      testf = true;
      if (DateInRange(TBr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
        testf = false; 
      end;
      if (nonblank(RepSpec.f4)) then begin
        if (RepSpec.f4 <> TBr.INGroup) then begin
          testf = false;
        end;
      end;  
      if (testf) then begin
        testf = ItemInItemGroupOrClass(TBr.ArtCode,"",RepSpec.f8);
      end;        
      if (nonblank(RepSpec.f1)) then begin
        if (RepSpec.f1 <> TBr.EMCode) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.f5)) then begin
        PRr.Code = TBr.PRCode;
        if (ReadFirstMain(PRr,1,true)) then begin
          if (RepSpec.f5 <> PRr.CustCode) then begin
            testf = false;
          end;
        end;  
      end;
      if (testf) then begin
        if (nonblank(RepSpec.f7) or nonblank(RepSpec.f6)) then begin
          PRr.Code = TBr.PRCode;
          if (ReadFirstMain(PRr,1,true)) then begin
            testf = ContactInGroupClass(PRr.CustCode,RepSpec.f7,RepSpec.f6,"CUST","","");
          end;
        end;
      end;
      if (nonblank(RepSpec.f2)) then begin
        if (RepSpec.f2 <> TBr.PRCode) then begin
          testf = false;
        end;
      end;  
      if (TBr.ItemType <> 3) then begin
        testf = false;
      end;
      if (RepSpec.ArtMode == 0) then begin
        if (TBr.Invoice== -1) then begin
           testf = false;
        end;
      end;   
      if (RepSpec.ArtMode == 1) then begin
        if (TBr.Invoice <> -1) then begin
           testf = false;
        end;
      end;   
      if (nonblank(RepSpec.ObjStr)) then begin
       if (SetInSet(TBr.Objects,RepSpec.ObjStr)==false) then begin
         testf = false;
       end; 
      end;
      if (nonblank(RepSpec.ObjStr)) then begin
        if (blank(TBr.Objects)) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        res = res + TBr.InvQty;
      end;
    end;
  end;
  findinvhour = res;
 return;
end;

function val findreghour(record RcVc RepSpec, string ItemCode)
begin
  val res;
  Record TBIVVc TBr;
  Record PRVc PRr;
  Boolean testf,found;

  res = 0;
  found = true;
  TBr.ArtCode = ItemCode;
   while (LoopKey("ArtCode",TBr,1,found)) begin
     if (found) then begin
       if (TBr.ArtCode <> ItemCode) then begin
         found = false;
       end;
     end;
     if (found) then begin
       testf = true;
       if (DateInRange(TBr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
         testf = false; 
       end;
      if (nonblank(RepSpec.f1)) then begin
        if (RepSpec.f1 <> TBr.EMCode) then begin
          testf = false;
        end;
      end;  
      if (nonblank(RepSpec.f5)) then begin
        PRr.Code = TBr.PRCode;
        if (ReadFirstMain(PRr,1,true)) then begin
          if (RepSpec.f5 <> PRr.CustCode) then begin
            testf = false;
          end;
        end;  
      end;
      if (testf) then begin
        if (nonblank(RepSpec.f7) or nonblank(RepSpec.f6)) then begin
          PRr.Code = TBr.PRCode;
          if (ReadFirstMain(PRr,1,true)) then begin
            testf = ContactInGroupClass(PRr.CustCode,RepSpec.f7,RepSpec.f6,"CUST","","");
          end;
        end;
      end;      
      if (nonblank(RepSpec.f4)) then begin
         if (RepSpec.f4 <> TBr.INGroup) then begin
           testf = false;
         end;
      end; 
      if (testf) then begin
        testf = ItemInItemGroupOrClass(TBr.ArtCode,"",RepSpec.f8);
      end;
       if (nonblank(RepSpec.f2)) then begin
         if (RepSpec.f2 <> TBr.PRCode) then begin
           testf =false;
         end;
       end;  
      if (TBr.ItemType <> 3) then begin
        testf = false;
      end;  
        if (RepSpec.ArtMode == 0) then begin
        if (TBr.Invoice== -1) then begin
           testf = false;
        end;
      end;   
      if (RepSpec.ArtMode == 1) then begin
        if (TBr.Invoice <> -1) then begin
           testf = false;
        end;
      end;   
      if (nonblank(RepSpec.ObjStr)) then begin
       if (SetInSet(TBr.Objects,RepSpec.ObjStr)==false) then begin
         testf = false;
       end; 
      end;
      if (nonblank(RepSpec.ObjStr)) then begin
        if (blank(TBr.Objects)) then begin
          testf = false;
        end;
      end;    
      if (testf) then begin
       res = res + TBr.Qty;
    end;
   end;
  end;
  findreghour = res;
 return;
end;

function val findinvval(record RcVc RepSpec, string ItemCode)
begin
  val res;
  Record TBIVVc TBr;
  Record PRVc PRr;
  Boolean testf,found;

  res = 0;
  found = true;
  TBr.ArtCode = ItemCode; 
  while (LoopKey("ArtCode",TBr,1,found)) begin
  if (found) then begin
       if (TBr.ArtCode <> ItemCode) then begin
         found = false;
       end;
     end;
     if (found) then begin
       testf = true;
       if (DateInRange(TBr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
         testf = false; 
       end;
      if (nonblank(RepSpec.f1)) then begin
        if (RepSpec.f1 <> TBr.EMCode) then begin
          testf = false;
        end;
      end;  
      if (nonblank(RepSpec.f5)) then begin
        PRr.Code = TBr.PRCode;
        if (ReadFirstMain(PRr,1,true)) then begin
          if (RepSpec.f5 <> PRr.CustCode) then begin
            testf = false;
          end;
        end;  
      end;
      if (testf) then begin
        if (nonblank(RepSpec.f7) or nonblank(RepSpec.f6)) then begin
          PRr.Code = TBr.PRCode;
          if (ReadFirstMain(PRr,1,true)) then begin
            testf = ContactInGroupClass(PRr.CustCode,RepSpec.f7,RepSpec.f6,"CUST","","");
          end;
        end;
      end;      
      if (nonblank(RepSpec.f4)) then begin
        if (RepSpec.f4 <> TBr.INGroup) then begin
          testf = false;
        end;
      end;  
      if (testf) then begin
        testf = ItemInItemGroupOrClass(TBr.ArtCode,"",RepSpec.f8);
      end;        
       if (nonblank(RepSpec.f2)) then begin
         if (RepSpec.f2 <> TBr.PRCode) then begin
           testf =false;
         end;
       end;  
      if (TBr.ItemType <> 3) then begin
        testf = false;
      end;    
      if (RepSpec.ArtMode == 0) then begin
        if (TBr.Invoice== -1) then begin
           testf = false;
        end;
      end;   
      if (RepSpec.ArtMode == 1) then begin
        if (TBr.Invoice <> -1) then begin
           testf = false;
        end;
      end;   
    if (nonblank(RepSpec.ObjStr)) then begin
     if (SetInSet(TBr.Objects,RepSpec.ObjStr)==false) then begin
       testf = false;
     end; 
    end;
    if (nonblank(RepSpec.ObjStr)) then begin
      if (blank(TBr.Objects)) then begin
        testf = false;
      end;
    end;    if (testf) then begin
      res = res + TBr.Sum;
    end;
  end;
  end;
  findinvval = res;
 return;
end;

function val findcostval(record RcVc RepSpec, string ItemCode)
begin
  val res;
  Record TBIVVc TBr;
  Record PRVc PRr;
  Boolean testf,found;

  res = 0;
  found = true;
  TBr.ArtCode = ItemCode; 
  while (LoopKey("ArtCode",TBr,1,found)) begin
    if (found) then begin
      if (TBr.ArtCode <> ItemCode) then begin
         found = false;
       end;
     end;
     if (found) then begin
       testf = true;
       if (DateInRange(TBr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
         testf = false; 
       end;
      if (nonblank(RepSpec.f1)) then begin
        if (RepSpec.f1 <> TBr.EMCode) then begin
          testf = false;
        end;
      end;  
      if (nonblank(RepSpec.f5)) then begin
        PRr.Code = TBr.PRCode;
        if (ReadFirstMain(PRr,1,true)) then begin
          if (RepSpec.f5 <> PRr.CustCode) then begin
            testf = false;
          end;
        end;  
      end;
      if (testf) then begin
        if (nonblank(RepSpec.f7) or nonblank(RepSpec.f6)) then begin
          PRr.Code = TBr.PRCode;
          if (ReadFirstMain(PRr,1,true)) then begin
            testf = ContactInGroupClass(PRr.CustCode,RepSpec.f7,RepSpec.f6,"CUST","","");
          end;
        end;
      end;      
      if (nonblank(RepSpec.f4)) then begin
        if (RepSpec.f4 <> TBr.INGroup) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        testf = ItemInItemGroupOrClass(TBr.ArtCode,"",RepSpec.f8);
      end;        
      if (nonblank(RepSpec.f2)) then begin
        if (RepSpec.f2 <> TBr.PRCode) then begin
          testf = false;
        end;
      end;      
      if (TBr.ItemType <> 3) then begin
        testf = false;
      end;    
      if (RepSpec.ArtMode == 0) then begin
        if (TBr.Invoice== -1) then begin
           testf = false;
        end;
      end;   
      if (RepSpec.ArtMode == 1) then begin
        if (TBr.Invoice <> -1) then begin
           testf = false;
        end;
      end;   
      if (nonblank(RepSpec.ObjStr)) then begin
       if (SetInSet(TBr.Objects,RepSpec.ObjStr)==false) then begin
         testf = false;
       end; 
      end;
      if (nonblank(RepSpec.ObjStr)) then begin
        if (blank(TBr.Objects)) then begin
          testf = false;
        end;
      end;    if (testf) then begin
      res = res + (TBr.Qty*TBr.CostPrice);
    end;
   end;
  end;
  findcostval = res;
 return;
end;

global 
Procedure PrItemStatRn(record RcVc RepSpec)
BEGIN
  Record INVc INr;
  val invval, costval, invhour, reghour, gpperc, gptot;
  val totinvval, totcostval, totinvhour, totreghour;
  Boolean TrHs, testf;
  integer rw;
  string 20 fromitem, toitem,itemcode;
  string 255 tstr;
  fromitem= FirstInRange(RepSpec.f3,20);
  toitem= LastInRange(RepSpec.f3,20);
  
  invhour = 0;
  reghour= 0;     
  invval = 0;
  costval = 0;
  gptot = 0;
  gpperc = 0;   
  StartReportJob(USetStr(10930));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (RepSpec.ArtMode == 0) then begin
    tstr = USetStr(4827);
    Header(rw,tstr,0);
  end;
  if (RepSpec.ArtMode == 1) then begin
    tstr = USetStr(8722);
    Header(rw,tstr,0);
  end;
  if (RepSpec.ArtMode == 2) then begin
    tstr = USetStr(4827);
    tstr = tstr & " - " & USetStr(4842);
    Header(rw,tstr,0);
  end;
  if (nonblank(RepSpec.f1)) then begin
    tstr = USetStr(3559);
    tstr = tstr & ": " & RepSpec.f1; 
    Header(rw,tstr,1);
    rw = rw +1;
  end; 
  if (nonblank(RepSpec.f2)) then begin
    tstr = USetStr(3550);
    tstr = tstr & ": " & RepSpec.f2; 
    Header(rw,tstr,1);
    rw = rw +1;
  end;
  if (nonblank(RepSpec.f3)) then begin
    tstr = USetStr(3542);
    tstr = tstr & ": " & RepSpec.f3; 
    Header(rw,tstr,1);
    rw = rw +1;
  end;
  if (HasItemGroups) then begin
    HTArtGroup(RepSpec.f4,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasItemClassification) then begin
    HTItemClass(RepSpec.f8,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;  
  if (nonblank(RepSpec.f5)) then begin
    tstr = USetStr(3527);
    tstr = tstr & ": " & RepSpec.f5; 
    Header(rw,tstr,1);
    rw = rw +1;
  end;
  if (HasCategories) then begin
    HTCustCat(RepSpec.f7,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasContactClassification) then begin
    HTCustClass(RepSpec.f6,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  EndHeader;
  TrHs = true; 
  StartFormat(15);
    OutString(0,0,USetStr(3542),false);
    OutString(40,0,USetStr(4866),false);
    OutString(180,0,USetStr(3551),true);
    OutString(230,0,USetStr(3552),true);
    tstr = USetStr(2633);
    tstr = tstr & " " & USetStr(6764);
    OutString(300,0,tstr,true); //& " " USetStr(6764),true);
    OutString(370,0,USetStr(3554),true);
    tstr = USetStr(3555);
    tstr = tstr & " " & USetStr(3553);
    OutString(410,0,tstr,true); // & " " USetStr(3553),true);
    OutString(1,0,USetStr(3555),true);
  EndFormat;
  Black_Divider(0,1);
  INr.Code = fromitem;
  while (LoopMain(INr,1,TrHs)) begin
   if (TrHs) then begin
     if (nonblank(RepSpec.f3)) then begin
       if (INr.Code>toitem) then begin
         TrHs = false;
       end;
     end;
   end; 
   if (TrHs) then begin
      testf=true;
      if (INr.ItemType<>3) then begin
        testf = false;
      end;
      if (testf) then begin    
         invhour = findinvhour(RepSpec,INr.Code);
         reghour = findreghour(RepSpec,INr.Code);
         invval = findinvval(RepSpec,INr.Code);
         costval = findcostval(RepSpec,INr.Code);
         totinvhour = totinvhour + invhour;
         totreghour = totreghour + reghour;
         totinvval = totinvval + invval;
         totcostval = totcostval + costval;
         gpperc = 100-((costval/invval)*100);
         gptot = invval - costval; 
         if (reghour<>0) or (invhour<>0) then begin
          StartFormat(15);
            OutString(0,0,INr.Code,false);
            OutString(40,0,left(INr.Name,20),false);
            OutVal(180,0,reghour,M4Qty,true);
            OutVal(230,0,invhour,M4Qty,true);
            OutVal(300,0,invval,M4Val,true);
            OutVal(370,0,costval,M4Val,true);
            OutVal(410,0,gpperc,M4Val,true);
            OutVal(1,0,gptot,M4Val,true);
          EndFormat;           
        end;
      end; // testf   
    end; // TrHs
  end; //while
  Black_Divider(0,1);
    gpperc = 100-((totcostval/totinvval)*100);
    gptot = totinvval - totcostval;
  StartFormat(15);
    OutString(0,0,USetStr(8724),false);
    OutVal(180,0,totreghour,M4Qty,true);
    OutVal(230,0,totinvhour,M4Qty,true);
    Outval(300,0,totinvval,M4Val,true);
    OutVal(370,0,totcostval,M4Val,true);
    OutVal(410,0,gpperc,M4Val,true);
    OutVal(1,0,gptot,M4Val,true);
  EndFormat;
   
  EndJob;
  
 RETURN; 
 END;
