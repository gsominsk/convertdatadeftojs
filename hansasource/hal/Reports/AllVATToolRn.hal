external function string 255 removenextlistitem(var string,string);
external procedure AllVATRn_PrintArrayVI(record RcVc,var array string,var LongInt);
external function Boolean HasMultiCurrency();
external function roundmode GetVATRoundModeRB();
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external procedure GetCurncyRoundoff(string,string,string,var roundmode,var roundmode,var roundmode);
external procedure AllVATRn_AddToArrayVI(record RcVc,record VIVc,record SMVc,Date,val,var val,var val,var val,var array string,var LongInt);
external procedure AllVATRn_PrintVATBase(record RcVc,Integer,record SMVc,Integer,Integer,Integer,roundmode);
external function Integer GetIntYc(Date);
external function val FindPaidInPeriod_IVVc(record IVVc,Boolean,Date,Date);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure GetVATdouble(string,var val,var val,Integer);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure SetupVATBase(var record SMVc,var Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val FindVAT(string,val,Integer,Integer);
external procedure HT2Per(Date, Date , var string);
external function val MulWithRateToBase1(var string,Date,val,roundmode);

function string 255 ArgDateToString(date d)
begin
  ArgDateToString = DateToString(d,"YYYYMMDD");
  return;
end;

function date ArgStringToDate(string datestr)
begin
  Date res;
  
  if (len(datestr)==8) then begin
    res.year = StringToInt(left(datestr,4));
    res.month = StringToInt(mid(datestr,4,2));
    res.day = StringToInt(mid(datestr,6,2));
  end;
  
  ArgStringToDate = res;
  return;
end;

procedure AddActualVATBase(var record SMVc SMr,string vatcode,val t,val vatval,Integer vatcnt,Integer InclVAT,Integer NoTAXonVAT)
begin
  row SMVc SMrw;
  Integer i;
  record RoundBlock RoundRec;
  val vatv,tax1;
  
  BlockLoad(RoundRec);
  for (i=0; i<vatcnt; i=i+1) begin
    MatRowGet(SMr,i,SMrw);          
    if (SMrw.VATCode==VATCode) then begin
      SMrw.DebVal = SMrw.DebVal + t;
      SMrw.DebVal2 = SMrw.DebVal2 + vatval;
      MatRowPut(SMr,i,SMrw);
      goto LAddActualVATBase;
    end;
  end;      
LAddActualVATBase:;
  return;
end;

procedure CalcVATBaseVAT(record SMVc SMr,Integer inclvat,Integer NoTAXonVAT,Integer vatcnt,val vatval)
BEGIN
  Integer i;
  val t,t1;
  row SMVc SMrw;
  record RoundBlock RoundRec;
  val s3,tax1;
  
  BlockLoad(RoundRec);
  s3 = blankval;
  tax1 = blankval;
  for (i=0;i<vatcnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw);            
    if (SMrw.VATCode=="19") then begin
    switch (RoundRec.VATCalcWay) begin
      case 0:
        MulVATIV(SMrw.VATCode,SMrw.DebVal,t,t1,inclvat,NoTAXonVAT);
        t = Round(t,DefaultRoundMode);
        SMrw.DebVal2 = SMrw.DebVal2 + t;
        s3 = s3 + t ;
        t1 = Round(t1,DefaultRoundMode);
        tax1 = t1 + tax1;
        MatRowPut(SMr,i,SMrw);            
      case 1:
        s3 = SMrw.DebVal2 + s3;
    end;
    end;
  end;
  s3 = Round(s3,DefaultRoundMode);
  tax1 = Round(tax1,DefaultRoundMode);
  if ((vatval-s3)!=0) then begin
    for (i=0;i<vatcnt;i=i+1) begin
      MatRowGet(SMr,i,SMrw);
      if (SMrw.DebVal!=0) then begin
        SMrw.DebVal2 = SMrw.DebVal2 + (vatval-s3);
        MatRowPut(SMr,i,SMrw);            
        i = vatcnt;
      end;
    end;
  end;
  RETURN;
END;

global
procedure AllVATRn_PrintDeatailedHeader(Integer strid,Integer strid2,Integer strid3,record RcVc RepSpec)
begin
  Integer p1,p2,p3,p4,p5,p6,p7,p8,p9,p45;

  p1= 55;
  p2= 70;
  p3= 124;
  p4= 165;
  p45= 200;  
  p5= 315;
  p6= 375;
  p7= 445;
  p8= 455;
  p9 =480;

  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(strid),false);
  OutString(p3,0,"",false);
  OutString(p8,0,"",true);
  EndFormat;
  StartFormat(15);
  if (RepSpec.flags[6]==0) then begin
    OutString(0,0,USetStr(5202),false);
    OutString(p2,0,USetStr(strid3),false);
    if (strid==7370) or (strid==7374) then begin
      OutString(p3,0,USetStr(7373),false);
    end else begin
      OutString(p3,0,USetStr(2358),false);
    end;
    OutString(p4,0,USetStr(strid2),false);
    if (RepSpec.flags[12]==1) then begin 
      OutString(p45,0,USetStr(28222),false);
    end;      
  end;
  OutString(255,0,USetStr(5210),true);       //This means excluding VAT
  OutString(p5,0,USetStr(7343),true);       //This means excluding VAT
  OutString(p6,0,USetStr(5233),true);
  OutString(p7,0,USetStr(2368),true);
  if (HasMultiCurrency) then begin
    OutString(p9,0,USetStr(7804),true);
  end;
  EndFormat;
  Gray_Divider(0,1);
  return;
end;

procedure AddVATToVATArray(record SMVc VATInr,var record SMVc TotVATr,Boolean calcvatf)
BEGIN
  Integer i,vatcnt;
  row SMVc VATInrw;
  row SMVc TotVATrw;
  val vatv,tax1;
  
  vatcnt = MatRowCnt(TotVATr);
  for (i=0;i<vatcnt;i=i+1) begin
    MatRowGet(VATInr,i,VATInrw);
    MatRowGet(TotVATr,i,TotVATrw);
    if (VATInrw.DebVal!=0) then begin
      TotVATrw.VATCode = VATInrw.VATCode;
      TotVATrw.DebVal = TotVATrw.DebVal + MulRateToBase1(VATInrw.CurncyCode,VATInrw.DebVal,VATInrw.FrRate,VATInrw.ToRateB1,VATInrw.ToRateB2,VATInrw.BaseRate1,VATInrw.BaseRate2,DefaultCurRoundOff);
      if (calcvatf) then begin
        MulVATIV(VATInrw.VATCode,VATInrw.DebVal,vatv,tax1,0,0);
        vatv = Round(vatv,GetVATRoundModeRB);
        TotVATrw.DebVal2 = TotVATrw.DebVal2 + vatv;
      end else begin
        TotVATrw.DebVal2 = TotVATrw.DebVal2 + VATInrw.DebVal2;
      end;
      MatRowPut(TotVATr,i,TotVATrw);
    end;
  end;
  RETURN;
END;

procedure GetInvType(Integer nr, var String it, var Integer sign)
Begin
  sign = 1;
  if (nr==kInvoiceTypeNormal or nr==kInvoiceTypeNormalSpecialSales) begin
    it = USetStr(1150);
  end;
  if (nr==kInvoiceTypeCash or nr==kInvoiceTypeCashInvoiceReceiptPRT) begin
    it = USetStr(2488);
  end;
  if (nr==kInvoiceTypeCredit or nr==kInvoiceTypeCreditSpecialSales) begin
    it = USetStr(2433);
    sign = -1;
  end;
  if (nr==kInvoiceTypeInterest) begin
    it = USetStr(2547);
  end;
  Return;
end;

procedure GetPInvType(Integer pnr, var String pit, var Integer psign)
Begin
  psign = 1;
  if (pnr==1) begin
    pit = USetStr(1152);
  end;
  if (pnr==2) begin
    pit = USetStr(2488);
  end;
  if (pnr==3) begin
   pit = USetStr(2433);
    psign = -1;
  end;
  if (pnr==4 or pnr==5) begin
   pit = USetStr(2547);
  end;
  Return;
end;
//Look up the VAT value

global
procedure AllVATRn_OverviewAddToVAT(record IVVc IVr,record SMVc VATr,Integer sign,val paidcoef)
begin
  Integer i,rwcnt;
  Integer j,SMrwcnt;
  row IVVc IVrw;
  Boolean vatfound;
  row SMVc VATrw;
  val nettfrominv,nettfrominvInclVat;

  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    nettfrominvInclVat = 0;
    if ((IVrw.stp == kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent or 
        IVrw.stp == kInvoiceRowTypeDownpayment)) then begin
//      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
//        IVrw.Sum = -IVrw.Sum;
//      end;
      nettfrominv  =  mulratetobase1(IVr.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff)*sign;
      nettfrominv = nettfrominv*paidcoef;
      if (IVr.InclVAT>0) then begin
        nettfrominvInclVat = FindVAT(IVrw.VATCode,nettfrominv,IVr.InclVAT,IVr.NoTAXonVAT);
      end;
      vatfound = false;
      SMrwcnt = MatRowCnt(VATr);
      for (j=0;j<SMrwcnt;j=j+1) begin
        MatRowGet(VATr,j,VATrw);
        if (VATrw.VATCode==IVrw.VATCode) then begin
          //Add your values
          VATrw.DebVal =  VATrw.DebVal + nettfrominv - nettfrominvInclVat;
          VATrw.CredVal =  VATrw.CredVal + FindVAT(IVrw.VATCode,nettfrominv,IVr.InclVAT,IVr.NoTAXonVAT);
          MatRowPut(VATr,j,VATrw);
          vatfound = true;
        end;
      end;
      if (vatfound==false and nonblank(IVrw.VATCode)) then begin
        VATrw.VATCode = IVrw.VATCode;
        VATrw.DebVal =   nettfrominv - nettfrominvInclVat;
        VATrw.CredVal = FindVAT(IVrw.VATCode,nettfrominv,IVr.InclVAT,IVr.NoTAXonVAT);
        MatRowPut(VATr,SMrwcnt,VATrw);
      end;
    end;
  end;
  return;
end;

global
procedure AllAVATRn_OverviewAddToArrayIV_NotTotals(record IVVc IVr,Date td,string invt,Integer sign,var val tt,var val tBase,var val tvat,
                                    record SMVc VATr,val paidcoef,integer officialnoflag,var array string aInvoices,var LongInt aInvCnt)
begin
  Integer p1,p2,p3,p4,p5,p6,p7,p8,p9,p45;
  val tv,tmp,VATTemp;
  string 255 tstr,tstr1;

  if (officialnoflag==1) then begin 
    tstr = IVr.OfficialSerNr;
    tstr1 = removenextlistitem(tstr,"-");
    aInvoices[aInvCnt] = removenextlistitem(tstr,"-") & ":" & IVr.SerNr & ":" & ArgDateToString(td);
  end else begin
    aInvoices[aInvCnt] = IVr.SerNr & ":" & ArgDateToString(td);
  end; 
  aInvCnt = aInvCnt +1;
  if (IVr.InclVAT>0) then begin
    tv = IVr.Sum1 - IVr.Sum3;
  end else begin
    tv = IVr.Sum1;
  end;
  tmp = (mulratetobase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff)*sign);
  tmp = tmp *paidcoef;  
  tt = tt + tmp;
  tmp = (mulratetobase1(IVr.CurncyCode,tv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff)*sign);
  tmp = tmp *paidcoef;  
  tBase = tBase + tmp;
  AllVATRn_OverviewAddToVAT(IVr,VATr,sign,paidcoef);
  tmp = (mulratetobase1(IVr.CurncyCode,IVr.Sum3,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff)*sign);
  tmp = tmp *paidcoef;
  tvat = tvat + tmp;
  return;
end;          

global
procedure AllAVATRn_OverviewPrintArrayIV_NotTotals(integer officialnoflag,integer paidcoef,var array string aInvoices,var LongInt aInvCnt)
begin
  Integer p1,p2,p3,p4,p5,p6,p7,p8,p9,p45;
  integer i,rwcnt,sign;
  record IVVc IVr;
  string 255 tstr,tstr1,InvoiceNo;
  String 6 invt;
  val tv,tmp,tmp2,VATTemp;
  Date td;

  p1= 55;
  p2= 70;
  p3= 124;
  p4= 165;
  p45= 200;
  p5= 285;
  p6= 345;
  p7= 415;
  p8= 455;
  p9= 480;
  
  for (i=0; i<aInvCnt; i=i+1) begin
    if (officialnoflag==1) then begin 
      tstr = aInvoices[i];
      tstr1 = removenextlistitem(tstr,":");
      InvoiceNo = removenextlistitem(tstr,":");  
      tstr1 =  removenextlistitem(tstr,":");
      td = ArgStringToDate(tstr1);      
    end else begin
      tstr = aInvoices[i];
      InvoiceNo = removenextlistitem(tstr,":");
      tstr1 =  removenextlistitem(tstr,":");
      td = ArgStringToDate(tstr1);
    end;
    IVr.SerNr = InvoiceNo;
    if (ReadFirstMain(IVr,1,true)) then begin
      GetInvType(IVr.InvType,invt,sign);
    
      StartFormat(15);
      OutDate(p1,0,td,true);
      OutLongInt(p2,"Dbl2IVVc",IVr.SerNr,false);
      OutString(p3,0,invt,false);
      OutString(p4,0,IVr.CustCode,false);
      if (officialnoflag==1) then begin 
        OutStringID(p45,"Dbl3IVVc",IVr.OfficialSerNr,false,IVr.SerNr);
      end;    
      if (IVr.InclVAT>0) then begin
        tv = IVr.Sum1 - IVr.Sum3;
      end else begin
        tv = IVr.Sum1;
      end;
      tmp = mulratetobase1(IVr.CurncyCode,tv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff) * sign;
      tmp = tmp *paidcoef;  
      OutVal(p5,0,tmp,M4Val,true);//nett
      tmp2 = mulratetobase1(IVr.CurncyCode,IVr.Sum3,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff)*sign;
      tmp2 = tmp2 *paidcoef;     
      OutVal(p6,0,tmp2,M4Val,true);//vat
      tmp = mulratetobase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff)*sign;
      tmp = tmp *paidcoef;  
      OutVal(p7,0,tmp,M4Val,true);//total
      tmp = (mulratetobase1(IVr.CurncyCode,tv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff)*sign);
      tmp = tmp2/(tmp*paidcoef)*100;
      OutVal(p8,0,tmp,M4Val,true);//Effective Rate
      if (HasMultiCurrency) then begin
        OutString(p9,0,IVr.CurncyCode,true);
      end;
      EndFormat;
    end;  
  end;  
  return;
end;        

procedure IPBookVATInvoice(record RcVc RepSpec,record SMVc VATr,record IVVc IVr,Date td,val paidcoef,
                           var val tt,var val tBase,var val tvat,var array string aInvoices,var LongInt aInvCnt)
begin
  string 6 invt;
  Integer sign;
  val tv,tmp;

  GetInvType(IVr.InvType,invt,sign);
  if (RepSpec.flags[6]==0) then begin
    AllAVATRn_OverviewAddToArrayIV_NotTotals(IVr,td,invt,sign,tt,tBase,tvat,VATr,paidcoef,RepSpec.flags[12],aInvoices,aInvCnt);
  end;
  if (RepSpec.flags[6]==1) then begin
    AllVATRn_OverviewAddToVAT(IVr,VATr,sign,paidcoef);
    tmp = (mulratetobase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff)*sign);
    tmp = tmp*paidcoef;
    tt = tt + tmp;
//        tBase = tBase + (mulratetobase1(IVr.CurncyCode,IVr.Sum1,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff)*sign);
    tmp = (mulratetobase1(IVr.CurncyCode,tv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff)*sign);
    tmp = tmp*paidcoef;
    tBase = tBase + tmp;
//                VATTemp = (mulratetobase1(IVr.CurncyCode,IVr.Sum3,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff)*sign*100)/(mulratetobase1(IVr.CurncyCode,IVr.Sum1,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff)*sign);          
    tmp = (mulratetobase1(IVr.CurncyCode,IVr.Sum3,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff)*sign);
    tmp = tmp*paidcoef;
    tvat = tvat + tmp;
  end;
  return;
end;          

procedure AllVATRn_OverviewAddIPToVAT(record IPVc IPr,row IPVc IPrw,record SMVc VATr,val paidcoef)
begin
  Integer j,SMrwcnt;
  Boolean vatfound;
  row SMVc VATrw;
  val nettfrominv

  nettfrominv  =  MulWithRateToBase1(IPrw.RecCurncy,IPr.TransDate,IPrw.RecVal-IPrw.VATVal,DefaultCurRoundOff);
  nettfrominv = nettfrominv*paidcoef;
  vatfound = false;
  SMrwcnt = MatRowCnt(VATr);
  for (j=0;j<SMrwcnt;j=j+1) begin
    MatRowGet(VATr,j,VATrw);
    if (VATrw.VATCode==IPrw.VATCode) then begin
      //Add your values
      VATrw.DebVal =  VATrw.DebVal + nettfrominv;
      VATrw.CredVal =  VATrw.CredVal + MulWithRateToBase1(IPrw.RecCurncy,IPr.TransDate,IPrw.VATVal,DefaultCurRoundOff);
      MatRowPut(VATr,j,VATrw);
      vatfound = true;
    end;
  end;
  if (vatfound==false) then begin
    VATrw.VATCode = IPrw.VATCode;
    VATrw.DebVal =   nettfrominv;
    VATrw.CredVal =  VATrw.CredVal + MulWithRateToBase1(IPrw.RecCurncy,IPr.TransDate,IPrw.VATVal,DefaultCurRoundOff);
    MatRowPut(VATr,SMrwcnt,VATrw);
  end;
  return;
end;

procedure AllAVATRn_OverviewPrintIP(record IPVc IPr,row IPVc IPrw,Date td,var val tt,var val tBase,var val tvat,
                                    record SMVc VATr,val paidcoef)
begin
  Integer p1,p2,p3,p4,p5,p6,p7,p8,p9;
  val tv,tmp;

  p2= 70;
  p3= 124;
  p4= 165;
  p5= 285;
  p6= 345;
  p7= 415;
  p8= 455;
  p9 =480;
  StartFormat(15);
  OutDate(0,0,td,false);
  OutLongInt(p2,"DblIPVc",IPr.SerNr,false);
  OutLongInt(p3,0,IPrw.CUPNr,false);
  OutString(p4,0,IPrw.CustCode,false);
  tmp = MulWithRateToBase1(IPrw.RecCurncy,IPr.TransDate,IPrw.RecVal-IPrw.VATVal,DefaultCurRoundOff);
  tmp = tmp *paidcoef;  
  tBase = tBase + tmp;
  OutVal(p5,0,tmp,M4Val,true);
  OutVal(p6,0,IPrw.VATVal,M4Val,true);
  tmp = MulWithRateToBase1(IPrw.RecCurncy,IPr.TransDate,IPrw.RecVal,DefaultCurRoundOff);
  tmp = tmp *paidcoef;  
  tt = tt + tmp;
  OutVal(p7,0,tmp,M4Val,true);

  tmp = (IPrw.VATVal*paidcoef*100)/(IPrw.RecVal-IPrw.VATVal*paidcoef);
  OutVal(p8,0,tmp,M4Val,true);
  if (HasMultiCurrency) then begin
    OutString(p9,0,IPrw.RecCurncy,true);
  end;
  EndFormat;
  AllVATRn_OverviewAddIPToVAT(IPr,IPrw,VATr,paidcoef);
  tmp = MulWithRateToBase1(IPrw.RecCurncy,IPr.TransDate,IPrw.VATVal,DefaultCurRoundOff);
  tmp = tmp *paidcoef;
  tvat = tvat + tmp;
  return;
end;          

procedure AllAVATRn_DetailedPrintIP(record IPVc IPr,row IPVc IPrw,Date td,var val tt,var val tBase,var val tvat,
                                    record SMVc VATr,val paidcoef)
begin
  Integer p1,p2,p3,p4,p5,p6,p7,p8,p9;
  val tv,tmp;
  val vatprc,tax1;
  record CUVc CUr;  

  p1= 55;
  p2= 70;
  p3= 124;
  p4= 165;
  p5= 315;
  p6= 375;
  p7= 445;
  p8= 455;
  p9 =480;
  
  CUr.Code = IPrw.CustCode;
  ReadFirstMain(CUr,1,true);
  StartFormat(15);
  OutDate(0,0,td,false);
  OutLongInt(p2,"DblIPVc",IPr.SerNr,false);
  OutLongInt(p3,0,IPrw.CUPNr,false);
//  OutString(p4,0,CUr.VATNr,false); //This should not be printed.
  tmp = MulWithRateToBase1(IPrw.RecCurncy,IPr.TransDate,IPrw.RecVal-IPrw.VATVal,DefaultCurRoundOff);
  tmp = tmp *paidcoef;  
  tBase = tBase + tmp;
  if (blank(IPrw.VATCode)) then begin
    vatprc = (IPrw.VATVal*paidcoef*100)/(IPrw.RecVal-IPrw.VATVal*paidcoef);
  end else begin
    GetVATdouble(IPrw.VATCode,vatprc,tax1,0);
  end;
  OutString(200,0,IPrw.VATCode,false);
  OutVal(255,0,vatprc,M4Val,true);
  OutVal(p5,0,tmp,M4Val,true);
  OutVal(p6,0,IPrw.VATVal,M4Val,true);
  tmp = MulWithRateToBase1(IPrw.RecCurncy,IPr.TransDate,IPrw.RecVal,DefaultCurRoundOff);

  tmp = tmp *paidcoef;  
  tt = tt + tmp;
  OutVal(p7,0,tmp,M4Val,true);
  if (HasMultiCurrency) then begin
    OutString(p9,0,IPrw.RecCurncy,true);
  end;
  EndFormat;
  AllVATRn_OverviewAddIPToVAT(IPr,IPrw,VATr,paidcoef);
  tmp = MulWithRateToBase1(IPrw.RecCurncy,IPr.TransDate,IPrw.VATVal,DefaultCurRoundOff);
  tmp = tmp *paidcoef;
  tvat = tvat + tmp;
  return;
end;          

procedure IPPrint(record RcVc RepSpec,record SMVc VATr,record IPVc IPr,row IPVc IPrw,Date td,val paidcoef,
                           var val tt,var val tBase,var val tvat)
begin
  val tv,tmp;

  if (RepSpec.flags[6]==0) then begin
    if (RepSpec.flags[14]==0) then begin
      AllAVATRn_OverviewPrintIP(IPr,IPrw,td,tt,tBase,tvat,VATr,paidcoef);
    end else begin
      AllAVATRn_DetailedPrintIP(IPr,IPrw,td,tt,tBase,tvat,VATr,paidcoef);
    end;
  end;
  if (RepSpec.flags[6]==1) then begin
    AllVATRn_OverviewAddIPToVAT(IPr,IPrw,VATr,paidcoef);
    tmp = MulWithRateToBase1(IPrw.RecCurncy,IPr.TransDate,IPrw.RecVal-IPrw.VATVal,DefaultCurRoundOff);
    tmp = tmp *paidcoef;  
    tBase = tBase + tmp;
    tmp = MulWithRateToBase1(IPrw.RecCurncy,IPr.TransDate,IPrw.RecVal,DefaultCurRoundOff);
    tmp = tmp *paidcoef;  
    tt = tt + tmp;
    tmp = MulWithRateToBase1(IPrw.RecCurncy,IPr.TransDate,IPrw.VATVal,DefaultCurRoundOff);
    tmp = tmp *paidcoef;
    tvat = tvat + tmp;
  end;
  return;
end;          

procedure AllVATRn_OverviewAddOPToVAT(record OPVc OPr,row OPVc OPrw,record SMVc VATr,val paidcoef)
begin
  Integer j,SMrwcnt;
  Boolean vatfound;
  row SMVc VATrw;
  val nettfrominv;

  nettfrominv  =  MulWithRateToBase1(OPrw.RecCurncy,OPr.TransDate,OPrw.RecVal-OPrw.VATVal,DefaultCurRoundOff);
  nettfrominv = nettfrominv*paidcoef;
  vatfound = false;
  SMrwcnt = MatRowCnt(VATr);
  for (j=0;j<SMrwcnt;j=j+1) begin
    MatRowGet(VATr,j,VATrw);
    if (VATrw.VATCode==OPrw.VATCode) then begin
      //Add your values
      VATrw.DebVal =  VATrw.DebVal + nettfrominv;
      VATrw.CredVal =  VATrw.CredVal + MulWithRateToBase1(OPrw.RecCurncy,OPr.TransDate,OPrw.VATVal,DefaultCurRoundOff);
      MatRowPut(VATr,j,VATrw);
      vatfound = true;
    end;
  end;
  if (vatfound==false) then begin

    VATrw.VATCode = OPrw.VATCode;
    VATrw.DebVal =   nettfrominv;
    VATrw.CredVal =  VATrw.CredVal + MulWithRateToBase1(OPrw.RecCurncy,OPr.TransDate,OPrw.VATVal,DefaultCurRoundOff);
    MatRowPut(VATr,SMrwcnt,VATrw);
  end;
  return;
end;

procedure AllAVATRn_OverviewPrintOP(record OPVc OPr,row OPVc OPrw,Date td,var val tt,var val tBase,var val tvat,
                                    record SMVc VATr,val paidcoef)
begin
  Integer p1,p2,p3,p4,p5,p6,p7,p8,p9;
  val tv,tmp;

  p2= 70;
  p3= 124;
  p4= 165;
  p5= 285;
  p6= 345;
  p7= 415;
  p8= 455;
  p9 =480;
  StartFormat(15);
  OutDate(0,0,td,false);
  OutLongInt(p2,"DblOPVc",OPr.SerNr,false);
  OutLongInt(p3,0,OPrw.PrepayNr,false);
  OutString(p4,0,OPrw.VECode,false);
  tmp = MulWithRateToBase1(OPrw.RecCurncy,OPr.TransDate,OPrw.RecVal-OPrw.VATVal,DefaultCurRoundOff);
  tmp = tmp *paidcoef;  
  tBase = tBase + tmp;
  OutVal(p5,0,tmp,M4Val,true);
  OutVal(p6,0,OPrw.VATVal,M4Val,true);
  tmp = MulWithRateToBase1(OPrw.RecCurncy,OPr.TransDate,OPrw.RecVal,DefaultCurRoundOff);
  tmp = tmp *paidcoef;  
  tt = tt + tmp;
  OutVal(p7,0,tmp,M4Val,true);

  tmp = (OPrw.VATVal*paidcoef*100)/(OPrw.RecVal-OPrw.VATVal*paidcoef);
  OutVal(p8,0,tmp,M4Val,true);
  if (HasMultiCurrency) then begin
    OutString(p9,0,OPrw.RecCurncy,true);
  end;
  EndFormat;
  AllVATRn_OverviewAddOPToVAT(OPr,OPrw,VATr,paidcoef);
  tmp = MulWithRateToBase1(OPrw.RecCurncy,OPr.TransDate,OPrw.VATVal,DefaultCurRoundOff);
  tmp = tmp *paidcoef;
  tvat = tvat + tmp;
  return;
end;          

procedure AllAVATRn_DetailedPrintOP(record OPVc OPr,row OPVc OPrw,Date td,var val tt,var val tBase,var val tvat,
                                    record SMVc VATr,val paidcoef)
begin
  Integer p1,p2,p3,p4,p5,p6,p7,p8,p9;
  val tv,tmp;
  val vatprc,tax1;
  record CUVc CUr;  

  p1= 55;
  p2= 70;
  p3= 124;
  p4= 165;
  p5= 315;
  p6= 375;
  p7= 445;
  p8= 455;
  p9 =480;
  
  CUr.Code = OPrw.VECode;
  ReadFirstMain(CUr,1,true);
  StartFormat(15);
  OutDate(0,0,td,false);
  OutLongInt(p2,"DblOPVc",OPr.SerNr,false);
  OutLongInt(p3,0,OPrw.PrepayNr,false);
//  OutString(p4,0,CUr.VATNr,false); //This should not be printed.
  tmp = MulWithRateToBase1(OPrw.RecCurncy,OPr.TransDate,OPrw.RecVal-OPrw.VATVal,DefaultCurRoundOff);
  tmp = tmp *paidcoef;  
  tBase = tBase + tmp;
  if (blank(OPrw.VATCode)) then begin
    vatprc = (OPrw.VATVal*paidcoef*100)/(OPrw.RecVal-OPrw.VATVal*paidcoef);
  end else begin
    GetVATdouble(OPrw.VATCode,vatprc,tax1,0);
  end;
  OutString(200,0,OPrw.VATCode,false);
  OutVal(255,0,vatprc,M4Val,true);
  OutVal(p5,0,tmp,M4Val,true);
  OutVal(p6,0,OPrw.VATVal,M4Val,true);
  tmp = MulWithRateToBase1(OPrw.RecCurncy,OPr.TransDate,OPrw.RecVal,DefaultCurRoundOff);

  tmp = tmp *paidcoef;  
  tt = tt + tmp;
  OutVal(p7,0,tmp,M4Val,true);
  if (HasMultiCurrency) then begin
    OutString(p9,0,OPrw.RecCurncy,true);
  end;
  EndFormat;
  AllVATRn_OverviewAddOPToVAT(OPr,OPrw,VATr,paidcoef);
  tmp = MulWithRateToBase1(OPrw.RecCurncy,OPr.TransDate,OPrw.VATVal,DefaultCurRoundOff);
  tmp = tmp *paidcoef;
  tvat = tvat + tmp;
  return;
end;          

procedure OPPrint(record RcVc RepSpec,record SMVc VATr,record OPVc OPr,row OPVc OPrw,Date td,val paidcoef,
                           var val tt,var val tBase,var val tvat)
begin
  val tv,tmp;

  if (RepSpec.flags[6]==0) then begin
    if (RepSpec.flags[14]==0) then begin
      AllAVATRn_OverviewPrintOP(OPr,OPrw,td,tt,tBase,tvat,VATr,paidcoef);
    end else begin
      AllAVATRn_DetailedPrintOP(OPr,OPrw,td,tt,tBase,tvat,VATr,paidcoef);
    end;
  end;
  if (RepSpec.flags[6]==1) then begin
    AllVATRn_OverviewAddOPToVAT(OPr,OPrw,VATr,paidcoef);
    tmp = MulWithRateToBase1(OPrw.RecCurncy,OPr.TransDate,OPrw.RecVal-OPrw.VATVal,DefaultCurRoundOff);
    tmp = tmp *paidcoef;  
    tBase = tBase + tmp;
    tmp = MulWithRateToBase1(OPrw.RecCurncy,OPr.TransDate,OPrw.RecVal,DefaultCurRoundOff);
    tmp = tmp *paidcoef;  
    tt = tt + tmp;
    tmp = MulWithRateToBase1(OPrw.RecCurncy,OPr.TransDate,OPrw.VATVal,DefaultCurRoundOff);
    tmp = tmp *paidcoef;
    tvat = tvat + tmp;
  end;
  return;
end;          

global
procedure AllVATRn_DetailedAddtoArrayIV(record RcVc RepSpec,record IVVc IVr,record SMVc AllVATr,Date td,val paidcoef,var val totnet,var val totvat,var val totbrut,var Boolean printheadf,var array string aInvoices,var LongInt aInvCnt)
begin
  string 6 invt;
  val tv,net,vat,brut,tax1;
  val tvat;
  Integer vatcnt;
  integer i,rwcnt,sign;
  row IVVc IVrw;
  Integer p1,p2,p3,p4,p5,p6,p7,p8,p9,p45;
  record SMVc VATr;
  roundmode roundlines,rndtotal,roundvat;
  Boolean testf;
  string 255 tstr,tstr1;

  p1= 55;
  p2= 70;
  p3= 124;
  p4= 165;
  p45 = 220;
  p5= 315;
  p6= 375;
  p7= 445;
  p8= 455;
  p9= 480;
  
  GetInvType(IVr.InvType,invt,sign);
//  if (nonblank(RepSpec.f2)) then begin
//    rwcnt = MatRowCnt(IVr);
//    for (i=0;i<rwcnt;i=i+1) begin
//      MatRowGet(IVr,i,IVrw);
//      testf = true;
//      if (nonblank(RepSpec.f2)) then begin
//        if (SetInSet(IVrw.VATCode,RepSpec.f2)==false) then begin
//          testf = false;
//        end;
//      end;
//      if (testf) then begin
//        tv = tv + IVrw.Sum;
//        MulVATIV(IVrw.VATCode,IVrw.Sum,vat,tax1,IVr.InclVAT,IVr.NoTAXonVAT);
//        tvat = tvat + vat;
//        if (IVr.InclVAT>0) then begin
//          tv = tv - vat;
//          brut = brut + IVrw.Sum;
//        end else begin
//          brut = brut + IVrw.Sum + vat + tax1;
//        end;
//      end;
//    end;
//  end else begin
    if (IVr.InclVAT>0) then begin
      tv = IVr.Sum1 - IVr.Sum3;
    end else begin
      tv = IVr.Sum1;
    end;
    tvat = IVr.Sum3;
    brut = IVr.Sum4;
//  end;
  net = MulRateToBase1(IVr.CurncyCode,tv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff)*sign;
  net = net*paidcoef;
  vat = MulRateToBase1(IVr.CurncyCode,tvat,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff)*sign;
  vat = vat*paidcoef;
  brut = MulRateToBase1(IVr.CurncyCode,brut,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff)*sign;
  brut = brut*paidcoef;   
  if (brut!=0) then begin
    if (RepSpec.flags[12]==1) then begin 
      tstr = IVr.OfficialSerNr;
      tstr1 = removenextlistitem(tstr,"-");
      aInvoices[aInvCnt] = removenextlistitem(tstr,"-") & ":" & IVr.SerNr & ":" & ValToString(paidcoef,M4Val,"",".",0) & ":" & ArgDateToString(td);
    end else begin
      aInvoices[aInvCnt] = IVr.SerNr & ":" & ValToString(paidcoef,M4Val,"",".",0) & ":" & ArgDateToString(td);
    end; 
    aInvCnt = aInvCnt +1;   
  end;
// The sign variable above is already taking the credit note value into effect. This is reversing it again.   
//  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
//    net = -net;
//  end;
  GetCurncyRoundoff(IVr.CurncyCode,IVr.PayDeal,"IVVc",rndtotal,roundlines,roundvat);
//  s3 = Round(s3,roundvat);
  
  totnet = totnet + net*paidcoef;
  totvat = totvat + vat;
  totbrut = totbrut + brut;
  SetupVATBase(VATr,vatcnt);
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    testf = true;
    if (nonblank(RepSpec.f2)) then begin
      if (SetInSet(IVrw.VATCode,RepSpec.f2)==false) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==5) then begin
        if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
          IVrw.Sum = -IVrw.Sum;
        end;
        tv = MulRateToBase1(IVr.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
        MulVATIV(IVrw.VATCode,IVrw.Sum*paidcoef,vat,tax1,IVr.InclVAT,IVr.NoTAXonVAT);
        vat = MulRateToBase1(IVr.CurncyCode,vat,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
        if (IVr.InclVAT>0) then begin
          tv = tv - vat;
        end;
        AddActualVATBase(VATr,IVrw.VATCode,tv*paidcoef,vat,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);

//      AddVATBase(VATr,IVrw.VATCode,IVrw.Sum*paidcoef,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);
      end;
    end;
  end;
  AddVATToVATArray(VATr,AllVATr,false);
  return;
end;

global
procedure AllVATRn_DetailedPtArrayIV(record RcVc RepSpec,record SMVc AllVATr,var Boolean printheadf,var array string aInvoices,var LongInt aInvCnt)
begin
  string 6 invt;
  Integer sign;
  val tv,net,vat,brut,tax1;
  val tvat,paidcoef;
  Integer vatcnt;
  Integer i,rwcnt,j,rwcnt2;
  row IVVc IVrw;
  Integer p1,p2,p3,p4,p5,p6,p7,p8,p9,p45;
  record SMVc VATr;
  roundmode roundlines,rndtotal,roundvat;
  Boolean testf;
  string 255 tstr,tstr1,InvoiceNo;
  record IVVc IVr;
  Date td;

  p1= 55;
  p2= 70;
  p3= 124;
  p4= 165;
  p45 = 200;
  p5= 315;
  p6= 375;
  p7= 445;
  p8= 455;
  p9= 480;
  
  if (printheadf) then begin
    AllVATRn_PrintDeatailedHeader(2430,7347,5201,RepSpec);
    printheadf = false;
  end;
  for (i=0; i<aInvCnt; i=i+1) begin
    if (RepSpec.flags[12]==1) then begin 
      tstr = aInvoices[i];
      tstr1 = removenextlistitem(tstr,":");
      InvoiceNo = removenextlistitem(tstr,":"); 
      tstr1 =  removenextlistitem(tstr,":");
      paidcoef = StringToVal(tstr1,M4Val);
      tstr1 =  removenextlistitem(tstr,":");
      td = ArgStringToDate(tstr1);        
    end else begin
      tstr = aInvoices[i];
      InvoiceNo = removenextlistitem(tstr,":"); 
      tstr1 =  removenextlistitem(tstr,":");
      paidcoef = StringToVal(tstr1,M4Val);   
      tstr1 =  removenextlistitem(tstr,":");
      td = ArgStringToDate(tstr1);         
    end;
    IVr.SerNr = InvoiceNo;
    if (ReadFirstMain(IVr,1,true)) then begin
      GetInvType(IVr.InvType,invt,sign);
      StartFormat(15);
      OutDate(0,0,td,false);
      OutLongInt(p2,"Dbl2IVVc",IVr.SerNr,false);
      OutString(p3,0,invt,false);
      OutString(p4,0,IVr.VATNr,false);
      if (RepSpec.flags[12]==1) then begin 
        OutStringID(p45,"Dbl3IVVc",IVr.OfficialSerNr,false,IVr.SerNr);
      end;  
      if ((RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel)) then begin
        OutString(0,0,"",false);
      end;

    //  if (nonblank(RepSpec.f2)) then begin
    //    rwcnt = MatRowCnt(IVr);
    //    for (i=0;i<rwcnt;i=i+1) begin
    //      MatRowGet(IVr,i,IVrw);
    //      testf = true;
    //      if (nonblank(RepSpec.f2)) then begin
    //        if (SetInSet(IVrw.VATCode,RepSpec.f2)==false) then begin
    //          testf = false;
    //        end;
    //      end;
    //      if (testf) then begin
    //        tv = tv + IVrw.Sum;        
    //        MulVATIV(IVrw.VATCode,IVrw.Sum,vat,tax1,IVr.InclVAT,IVr.NoTAXonVAT);
    //        tvat = tvat + vat;
    //        if (IVr.InclVAT>0) then begin
    //          tv = tv - vat;
    //          brut = brut + IVrw.Sum;
    //        end else begin
    //          brut = brut + IVrw.Sum + vat + tax1;
    //        end;
    //      end;
    //    end;
    //  end else begin
        if (IVr.InclVAT>0) then begin
          tv = IVr.Sum1 - IVr.Sum3;
        end else begin
          tv = IVr.Sum1;
        end;
        tvat = IVr.Sum3;
        brut = IVr.Sum4;
    //  end;
      net = MulRateToBase1(IVr.CurncyCode,tv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff)*sign;
      net = net*paidcoef;
      vat = MulRateToBase1(IVr.CurncyCode,tvat,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff)*sign;
      vat = vat*paidcoef;
      brut = MulRateToBase1(IVr.CurncyCode,brut,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff)*sign;
      brut = brut*paidcoef;  
      OutVal(p5,0,net,M4Val,true);//nett
      OutVal(p6,0,vat,M4Val,true);//vat
      OutVal(p7,0,brut,M4Val,true);
      if (HasMultiCurrency) then begin
        OutString(p9,0,IVr.CurncyCode,true);
      end;
      EndFormat;
      GetCurncyRoundoff(IVr.CurncyCode,IVr.PayDeal,"IVVc",rndtotal,roundlines,roundvat);
      SetupVATBase(VATr,vatcnt);
      rwcnt2 = MatRowCnt(IVr);
      for (j=0;j<rwcnt2;j=j+1) begin
        MatRowGet(IVr,j,IVrw);
        testf = true;
        if (nonblank(RepSpec.f2)) then begin
          if (SetInSet(IVrw.VATCode,RepSpec.f2)==false) then begin
            testf = false;
          end;
        end;
        if (testf) then begin
          if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==5) then begin
            if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
              IVrw.Sum = -IVrw.Sum;
            end;
            tv = MulRateToBase1(IVr.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            MulVATIV(IVrw.VATCode,IVrw.Sum*paidcoef,vat,tax1,IVr.InclVAT,IVr.NoTAXonVAT);       
            vat = MulRateToBase1(IVr.CurncyCode,vat,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            if (IVr.InclVAT>0) then begin
              tv = tv - vat;
            end;                
            AddActualVATBase(VATr,IVrw.VATCode,tv*paidcoef,vat,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);
    //      AddVATBase(VATr,IVrw.VATCode,IVrw.Sum*paidcoef,blankval,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT);
          end;
        end;
      end;    
      AllVATRn_PrintVATBase(RepSpec,sign,VATr,vatcnt,IVr.InclVAT,IVr.NoTAXonVAT,roundvat);
    end;
  end;
  return;
end;

global
procedure AllVATRn_DetailedAddtoArrayVI(record RcVc RepSpec,record VIVc VIr,record SMVc AllVATr,Date td,val paidcoef,var val totnet,var val totvat,var val totbrut,var Boolean printheadf,var array string aInvoices,var LongInt aInvCnt)
begin
  string 6 invt;
  Integer sign;
  val tv,net,vat,brut,vivat,tmp,nettfrominv,rowvat,rowtax1;
  Integer vatcnt;
  Integer i,rwcnt;
  row VIVc VIrw;
  Integer p1,p2,p3,p4,p5,p6,p7,p8,p9,p45;
  record SMVc VATr;
  Boolean testf;
  string 255 tstr,tstr1;  

  p1= 55;
  p2= 70;
  p3= 124;
  p4= 165;
  p45= 200;
  p5= 315;
  p6= 375;
  p7= 445;
  p8= 455;
  p9 =480;

  if (RepSpec.flags[12]==1) then begin 
    tstr = VIr.InvoiceNr;
    tstr1 = removenextlistitem(tstr,"-");
    aInvoices[aInvCnt] = removenextlistitem(tstr,"-") & ":" & VIr.SerNr & ":" & ValToString(paidcoef,M4Val,ThousandSeparator,DecimalSeparator,0) & ":" & ArgDateToString(td);
  end else begin
    aInvoices[aInvCnt] = VIr.SerNr & ":" & ValToString(paidcoef,M4Val,ThousandSeparator,DecimalSeparator,0) & ":" & ArgDateToString(td);
  end; 
  aInvCnt = aInvCnt +1;   

  GetPInvType(VIr.InvType,invt,sign);
  if (blank(VIr.VATVal)) then begin
    tv = VIr.PayVal - VIr.CalcVATVal;
    vivat = VIr.CalcVATVal;
  end else begin
    tv = VIr.PayVal - VIr.VATVal;
    vivat = VIr.VATVal;
  end;
  net = MulRateToBase1(VIr.CurncyCode,tv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign;
  vat = MulRateToBase1(VIr.CurncyCode,vivat,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign;
  brut = MulRateToBase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign;
  tmp = MulRateToBase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign;
  tmp = tmp*paidcoef;
  net = net * paidcoef;
  vat = vat * paidcoef;
  brut = brut * paidcoef;
  totnet = totnet + net;
  totvat = totvat + vat;
  totbrut = totbrut + brut;
  SetupVATBase(VATr,vatcnt);
  rwcnt = MatRowCnt(VIr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIr,i,VIrw);
    testf = true;
    if (nonblank(RepSpec.f2)) then begin
      if (SetInSet(VIrw.VATCode,RepSpec.f2)==false) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      nettfrominv  =  mulratetobase1(VIr.CurncyCode,VIrw.Sum,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign;
      nettfrominv = nettfrominv * paidcoef;
      if (VIrw.stp==1) then begin
        if (nonblank(VIr.VATVal) and VIr.CalcVATVal!=VIr.VATVal) then begin
          rowvat = blankval;
        end else begin
          MulVATIV(VIrw.VATCode,nettfrominv,rowvat,rowtax1,0,VIr.NoTAXonVAT);
        end;
        AddActualVATBase(VATr,VIrw.VATCode,nettfrominv,rowvat,vatcnt,0,VIr.NoTAXonVAT);
      end;
    end;
  end;
  if (nonblank(VIr.VATVal)) then begin
    if (VIr.CalcVATVal!=VIr.VATVal) then begin
      CalcVATBaseVAT(VATr,0,VIr.NoTAXonVAT,vatcnt,VIr.VATVal);
    end;
  end;
  AddVATToVATArray(VATr,AllVATr,false);
  return;
end;

global
procedure AllVATRn_DetailedPrintArrayVI(record RcVc RepSpec,var Boolean printheadf,var array string aInvoices,var LongInt aInvCnt)
begin
  Integer sign;
  Integer vatcnt;
  Integer i,rwcnt;
  row VIVc VIrw;
  Integer p1,p2,p3,p4,p5,p6,p7,p8,p9,p45;
  record SMVc VATr;
  Boolean testf;
  val paidcoef;
  record VIVc VIr;
  integer rwcnt2,j;
  string 255 tstr,tstr1,InvoiceNo;
  string 6 invt;
  val tv,net,vat,brut,vivat,tmp;
  Date td;

  p1= 55;
  p2= 70;
  p3= 124;
  p4= 165;
  p45= 200;
  p5= 315;
  p6= 375;
  p7= 445;
  p8= 455;
  p9 =480;

  if (printheadf) then begin
    AllVATRn_PrintDeatailedHeader(4041,7347,5201,RepSpec);
    printheadf = false;
  end;  
  for (i=0; i<aInvCnt; i=i+1) begin
    if (RepSpec.flags[12]==1) then begin 
      tstr = aInvoices[i];
      tstr1 = removenextlistitem(tstr,":");
      InvoiceNo = removenextlistitem(tstr,":"); 
      tstr1 =  removenextlistitem(tstr,":");
      paidcoef = StringToVal(tstr1,M4Val);
      tstr1 =  removenextlistitem(tstr,":");
      td = ArgStringToDate(tstr1);
    end else begin
      tstr = aInvoices[i];
      InvoiceNo = removenextlistitem(tstr,":"); 
      tstr1 =  removenextlistitem(tstr,":");
      paidcoef = StringToVal(tstr1,M4Val);  
      tstr1 =  removenextlistitem(tstr,":");
      td = ArgStringToDate(tstr1);          
    end;
    VIr.SerNr = InvoiceNo;
    if (ReadFirstMain(VIr,1,true)) then begin
      GetPInvType(VIr.InvType,invt,sign);
      StartFormat(15); 
      OutDate(0,0,td,false);
      OutLongInt(p2,"DblVIVc",VIr.SerNr,false);
      OutString(p3,0,invt,false);
      OutString(p4,0,VIr.VATNr,false);
      if (RepSpec.flags[12]==1) then begin 
        OutStringID(p45,"DblVIVc",VIr.InvoiceNr,false,VIr.SerNr);
      end;   
      if ((RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel)) then begin
        OutString(0,0,"",false);
      end;
      if (blank(VIr.VATVal)) then begin
        tv = VIr.PayVal - VIr.CalcVATVal;
        vivat = VIr.CalcVATVal;
      end else begin
        tv = VIr.PayVal - VIr.VATVal;
        vivat = VIr.VATVal;
      end;
      net = MulRateToBase1(VIr.CurncyCode,tv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign;
      vat = MulRateToBase1(VIr.CurncyCode,vivat,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign;
      brut = MulRateToBase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign;
      tmp = MulRateToBase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)*sign;
      tmp = tmp*paidcoef;      
      OutVal(p5,0,net,M4Val,true);//nett
      OutVal(p6,0,vat,M4Val,true);//vat
      OutVal(p7,0,tmp,M4Val,true);
      if (HasMultiCurrency) then begin
        OutString(p9,0,VIr.CurncyCode,true);
      end;
      EndFormat;
      SetupVATBase(VATr,vatcnt);
      rwcnt2 = MatRowCnt(VIr);
      for (j=0;j<rwcnt2;j=j+1) begin
        MatRowGet(VIr,j,VIrw);
        testf = true;
        if (nonblank(RepSpec.f2)) then begin
          if (SetInSet(VIrw.VATCode,RepSpec.f2)==false) then begin
            testf = false;
          end;
        end;
        if (testf) then begin
          if (VIrw.stp==1) then begin
            if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
              AddVATBase(VATr,VIrw.VATCode,-VIrw.Sum*paidcoef,blankval,vatcnt,0,VIr.NoTAXonVAT);
            end else begin
              AddVATBase(VATr,VIrw.VATCode,VIrw.Sum*paidcoef,blankval,vatcnt,0,VIr.NoTAXonVAT);
            end;
          end;
        end;
      end;
      if (nonblank(VIr.VATVal)) then begin
        if (VIr.CalcVATVal!=VIr.VATVal) then begin
          CalcVATBaseVAT(VATr,0,VIr.NoTAXonVAT,vatcnt,VIr.VATVal);
        end;
      end;
      AllVATRn_PrintVATBase(RepSpec,sign,VATr,vatcnt,0,0,SetRoundModeD(2));
    end;
  end;
  return;
end;

// Add support for CredManVc
global
procedure AllVATRn_IPBookVAT(record RcVc RepSpec,record SMVc AllVATr,var val tt,var val tBase,var val tvat)
begin
  record IPrsVc IPrsr;
  Boolean found,testf;
  record IVVc IVr;
  record IPVc IPr;
  row IPVc IPrw;
  record CLInVc CLInr;
  row CLInVc CLInrw;  
  record PurgeTRVc PurgeTRr;
  record TRVc TRr;
  row TRVc TRrw;
  Integer i,rwcnt;
  val paidcoef; 
  LongInt lastivnr;
  val tv;
  Boolean printheadf;
  LongInt frnr,tonr;  
  array string 255 aInvoices;
  LongInt aInvCnt;

  frnr = FirstInRange(RepSpec.f1,10);
  tonr = LastInRange(RepSpec.f1,10);
  found = true;
  IPrsr.TransDate = RepSpec.sStartDate;
  IPrsr.IVNr = 1;
  while (LoopKey("TransDate",IPrsr,2,found)) begin
    if (IPrsr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (IPrsr.IVNr<=0) then begin testf = false; end;
      if (lastivnr>0) then begin
        if (lastivnr==IPrsr.IVNr) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.f1)) then begin
        if (IPrsr.IVNr<frnr) then begin testf = false; end;
        if (IPrsr.IVNr>tonr) then begin testf = false; end;
      end;
      if (testf) then begin
        switch (IPrsr.TransType) begin
          case kIPrsTransTypeInvoice:
            IVr.SerNr = IPrsr.TransNr;
            if (ReadFirstMain(IVr,1,true)) then begin
              if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin 
                if (IVr.Invalid==0) then begin
                  paidcoef = 1;
  /*                
                  if (IVr.InvType!=kInvoiceTypeCash) and (IVr.InvType!=kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales) then begin 
                    tv = FindPaidInPeriod_IVVc(IVr,false,RepSpec.sStartDate,RepSpec.sEndDate);
                    paidcoef = tv/IVr.Sum4;
                  end;
  */                
                  if (paidcoef!=0) then begin
                    if (RepSpec.flags[14]==0) then begin
                      IPBookVATInvoice(RepSpec,AllVATr,IVr,IPrsr.TransDate,paidcoef,tt,tBase,tvat,aInvoices,aInvCnt);
                    end else begin
                      AllVATRn_DetailedAddtoArrayIV(RepSpec,IVr,AllVATr,IPrsr.TransDate,paidcoef,tBase,tvat,tt,printheadf,aInvoices,aInvCnt);
                    end;
                  end;
                end;
              end;
//              lastivnr = IVr.SerNr;
            end;
          case kIPrsTransTypeReceipt:
            IPr.SerNr = IPrsr.TransNr;
            if (ReadFirstMain(IPr,1,true)) then begin
              rwcnt = MatRowCnt(IPr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(IPr,i,IPrw);
                if ((IPrw.ovst==0)) then begin
                  if (IPrw.InvoiceNr==IPrsr.IVNr) then begin
                    if (IPrw.stp==1) then begin
                      if (IPrw.PayDate==IPrsr.CustDate) then begin
                        IVr.SerNr = IPrsr.IVNr;
                        if (ReadFirstMain(IVr,1,true)) then begin
                          if (IVr.Invalid==0) then begin
                            paidcoef = IPrw.InvVal/IVr.Sum4;
                            if (paidcoef!=0) then begin
                              if (RepSpec.flags[14]==0) then begin
                                IPBookVATInvoice(RepSpec,AllVATr,IVr,IPrsr.TransDate,paidcoef,tt,tBase,tvat,aInvoices,aInvCnt);
                              end else begin
                                AllVATRn_DetailedAddtoArrayIV(RepSpec,IVr,AllVATr,IPrsr.TransDate,paidcoef,tBase,tvat,tt,printheadf,aInvoices,aInvCnt);
                              end;
                            end;
                          end;
                        end;
                      end;    
                    end;
                  end;
                end;
              end;
            end;             
          case kIPrsTransTypePurgeNLTransaction:
            PurgeTRr.Number = IPrsr.TransNr;
            PurgeTRr.IntYc = GetIntYc(IPrsr.TransDate);
            PurgeTRr.TransRow = IPrsr.TransRow;
            if (ReadFirstMain(PurgeTRr,3,true)) then begin
              if ((PurgeTRr.Typ==1) and (PurgeTRr.SerNr==IPrsr.IVNr)) then begin
                if (PurgeTRr.CompCode==IPrsr.CustCode) then begin
                  IVr.SerNr = IPrsr.IVNr;
                  if (ReadFirstMain(IVr,1,true)) then begin
                    if (IVr.Invalid==0) then begin
                      tv = PurgeTRr.CurCredVal - PurgeTRr.CurDebVal;
                      if (tv==0) then begin
                        tv = PurgeTRr.CredVal - PurgeTRr.DebVal;
                      end;                        
                      paidcoef = tv/IVr.Sum4;
                      if (paidcoef!=0) then begin
                        if (RepSpec.flags[14]==0) then begin
                          IPBookVATInvoice(RepSpec,AllVATr,IVr,IPrsr.TransDate,paidcoef,tt,tBase,tvat,aInvoices,aInvCnt);
                        end else begin
                          AllVATRn_DetailedAddtoArrayIV(RepSpec,IVr,AllVATr,IPrsr.TransDate,paidcoef,tBase,tvat,tt,printheadf,aInvoices,aInvCnt);
                        end;
                      end;
                    end;
                  end;
                end;  
              end;
            end;                      
          case kIPrsTransTypeNLTransaction:
            TRr.Number = IPrsr.TransNr;
            TRr.IntYc = GetIntYc(IPrsr.TransDate);
            if (ReadFirstMain(TRr,2,true)) then begin
              rwcnt = MatRowCnt(TRr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(TRr,i,TRrw);
                if ((TRrw.Typ==1) and (TRrw.SerNr==IPrsr.IVNr)) then begin
                  if (TRrw.CompCode==IPrsr.CustCode) then begin
                    IVr.SerNr = IPrsr.IVNr;
                    if (ReadFirstMain(IVr,1,true)) then begin
                      if (IVr.Invalid==0) then begin
                        tv = TRrw.CurCredVal - TRrw.CurDebVal;
                        if (tv==0) then begin
                          tv = TRrw.CredVal - TRrw.DebVal;
                        end;                        
                        paidcoef = tv/IVr.Sum4;
                        if (paidcoef!=0) then begin
                          if (RepSpec.flags[14]==0) then begin
                            IPBookVATInvoice(RepSpec,AllVATr,IVr,IPrsr.TransDate,paidcoef,tt,tBase,tvat,aInvoices,aInvCnt);
                          end else begin
                            AllVATRn_DetailedAddtoArrayIV(RepSpec,IVr,AllVATr,IPrsr.TransDate,paidcoef,tBase,tvat,tt,printheadf,aInvoices,aInvCnt);
                          end;
                        end;
                      end;
                    end;
                  end;  
                end;
              end;
            end;                      
          case kIPrsTransTypeCashIn:
            CLInr.SerNr = IPrsr.TransNr;
            if (ReadFirstMain(CLInr,1,true)) then begin
              if (CLInr.Invalid==0) then begin
                rwcnt = MatRowCnt(CLInr);
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(CLInr,i,CLInrw);
                  if ((CLInrw.Type==1) and (CLInrw.TransNr==IPrsr.IVNr)) then begin
                    if (CLInr.CUCode==IPrsr.CustCode) then begin
                      IVr.SerNr = IPrsr.IVNr;
                      if (ReadFirstMain(IVr,1,true)) then begin
                        if (IVr.Invalid==0) then begin
                          paidcoef = CLInrw.Sum/IVr.Sum4;
                          if (paidcoef!=0) then begin
                            if (RepSpec.flags[14]==0) then begin
                              IPBookVATInvoice(RepSpec,AllVATr,IVr,IPrsr.TransDate,paidcoef,tt,tBase,tvat,aInvoices,aInvCnt);
                            end else begin
                              AllVATRn_DetailedAddtoArrayIV(RepSpec,IVr,AllVATr,IPrsr.TransDate,paidcoef,tBase,tvat,tt,printheadf,aInvoices,aInvCnt);
                            end;
                          end;
                        end;
                      end;
                    end;
                  end;
                end;
              end;
            end;                      
          case kIPrsTransTypeCashOut:
        end;
      end;
    end;
  end;
  if (RepSpec.flags[14]==0) then begin
    if (RepSpec.flags[12]==1) then begin 
      SortStringArray(aInvoices);
    end;  
    AllAVATRn_OverviewPrintArrayIV_NotTotals(RepSpec.flags[12],paidcoef,aInvoices,aInvCnt);
  end else begin
    if (RepSpec.flags[12]==1) then begin 
      SortStringArray(aInvoices);
    end;  
    AllVATRn_DetailedPtArrayIV(RepSpec,AllVATr,printheadf,aInvoices,aInvCnt);
  end;
  return;
end;

// Add support for CredManVc
global
procedure AllVATRn_PrintIP(record RcVc RepSpec,record SMVc AllVATr,var val tt,var val tBase,var val tvat)
begin
  record IPrsVc IPrsr;
  Boolean found,testf;
  record IPVc IPr;
  row IPVc IPrw;
  Integer i,rwcnt;
  val paidcoef; 
  LongInt lastivnr;
  val tv;
  Boolean printheadf;
  Integer IPBookVAT;
  record AccBlock ARb;
  record CUVc CUr;

  BlockLoad(ARb);
  found = true;
  IPrsr.TransDate = RepSpec.sStartDate;
  IPrsr.IVNr = 0;
  while (LoopKey("TransDate",IPrsr,2,found)) begin
    if (IPrsr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (IPrsr.IVNr>0) then begin testf = false; end;
      if (lastivnr>0) then begin
        if (lastivnr==IPrsr.IVNr) then begin testf = false; end;
      end;
      if (testf) then begin
        switch (IPrsr.TransType) begin
          case kIPrsTransTypeInvoice:
          case kIPrsTransTypeReceipt:
            IPr.SerNr = IPrsr.TransNr;
            if (ReadFirstMain(IPr,1,true)) then begin
              rwcnt = MatRowCnt(IPr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(IPr,i,IPrw);
                if (IPrw.ovst==0) then begin
                  testf = true;
                  switch (RepSpec.flags[7]) begin
                    case 1: if (IPrw.VATVal!=0) then begin testf = false; end;
                    case 2:if (IPrw.VATVal==0) then begin testf = false; end;
                  end;
                  if (nonblank(RepSpec.f2)) then begin
                    if (SetInSet(IPrw.VATCode,RepSpec.f2)==false) then begin
                      testf = false;
                    end;
                  end;
                  CUr.Code = IPrw.CustCode;
                  ReadFirstMain(CUr,1,true);
                  switch (CUr.IPBookVAT) begin
                    case 1:
                      IPBookVAT = 1;
                    case 2:
                      IPBookVAT = 0;
                    otherwise
                      IPBookVAT = ARb.IPBookVAT;
                  end;
                  if (IPBookVAT==0) then begin testf = false; end;
                  if (testf) then begin
                    if (IPrw.InvoiceNr<=0) then begin
                      paidcoef = 1;
                      if (IPrw.stp==kReceiptRowTypeNormal) then begin
//                        if (RepSpec.flags[14]==0) then begin
                          IPPrint(RepSpec,AllVATr,IPr,IPrw,IPrsr.TransDate,paidcoef,tt,tBase,tvat);
//                        end else begin
//                          AllVATRn_DetailedAddtoArrayIV(RepSpec,IVr,AllVATr,IPrsr.TransDate,paidcoef,tBase,tvat,tt,printheadf);
//                        end;
                      end;
                    end;
                  end;
                end;
              end;
            end;             
          case kIPrsTransTypePurgeNLTransaction:
          case kIPrsTransTypeNLTransaction:
          case kIPrsTransTypeCashIn:
          case kIPrsTransTypeCashOut:
        end;
      end;
    end;
  end;
  return;
end;

global
procedure AllVATRn_OPBookVAT(record RcVc RepSpec,record SMVc AllVATr,var val tt,var val tBase,var val tvat)
begin
  record OPrsVc OPrsr;
  Boolean found,testf;
  record VIVc VIr;
  record OPVc OPr;
  row OPVc OPrw;
  record CLOutVc CLOutr;
  row CLOutVc CLOutrw;  
  record PurgeTRVc PurgeTRr;
  record TRVc TRr;
  row TRVc TRrw;
  Integer i,rwcnt,vatcnt;
  val paidcoef; 
  LongInt lastvinr;
  val tv;
  Boolean printheadf;
  LongInt frnr,tonr;
  array string 255 aInvoices;
  LongInt aInvCnt;  
  
  frnr = FirstInRange(RepSpec.f1,10);
  tonr = LastInRange(RepSpec.f1,10);
  found = true;
  SetupVATBase(AllVATr,vatcnt);
  OPrsr.TransDate = RepSpec.sStartDate;
  OPrsr.VINr = 1;
  while (LoopKey("TransDate",OPrsr,2,found)) begin
    if (OPrsr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (lastvinr>0) then begin
        if (lastvinr==OPrsr.VINr) then begin testf = false; end;
      end;
      if (OPrsr.VINr<=0) then begin testf = false; end;
      if (nonblank(RepSpec.f1)) then begin
        if (OPrsr.VINr<frnr) then begin testf = false; end;
        if (OPrsr.VINr>tonr) then begin testf = false; end;
      end;
      if (testf) then begin
        switch (OPrsr.TransType) begin
          case kOPrsTransTypeInvoice:
            VIr.SerNr = OPrsr.TransNr;
            if (ReadFirstMain(VIr,1,true)) then begin
              if (VIr.InvType==kInvoiceTypeEmployee or VIr.InvType==kInvoiceTypeCash or VIr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin 
                if (VIr.Invalid==0) then begin
                  paidcoef = 1;
  /*                
                  if (VIr.InvType!=kInvoiceTypeCash) and (VIr.InvType!=kInvoiceTypeCredit and VIr.InvType!=kInvoiceTypeCreditSpecialSales) then begin 
  //                  tv = FindPaidInPeriod_VIVc(VIr,false,RepSpec.sStartDate,RepSpec.sEndDate);
                    paidcoef = tv/VIr.PayVal;
                  end;
  */                
                  if (paidcoef!=0) then begin
                    if (RepSpec.flags[14]==0) then begin
                      AllVATRn_AddToArrayVI(RepSpec,VIr,AllVATr,OPrsr.TransDate,paidcoef,tvat,tBase,tt,aInvoices,aInvCnt);
                    end else begin
                      AllVATRn_DetailedAddtoArrayVI(RepSpec,VIr,AllVATr,OPrsr.TransDate,paidcoef,tBase,tvat,tt,printheadf,aInvoices,aInvCnt);
                    end;
                  end;
                end;
              end;
//              lastvinr = VIr.SerNr;
            end;
          case kOPrsTransTypePayment:
            OPr.SerNr = OPrsr.TransNr;
            if (ReadFirstMain(OPr,1,true)) then begin
              rwcnt = MatRowCnt(OPr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(OPr,i,OPrw);
                if ((OPrw.ovst==0)) then begin
                  if (OPrw.VISerNr==OPrsr.VINr) then begin
                    if (OPrw.stp==kPaymentRowTypeNormal) then begin
                      VIr.SerNr = OPrsr.VINr;
                      if (ReadFirstMain(VIr,1,true)) then begin
                        if (VIr.Invalid==0) then begin
                          paidcoef = OPrw.PInvVal/VIr.PayVal;
                          if (paidcoef!=0) then begin
                            if (RepSpec.flags[14]==0) then begin                          
                              AllVATRn_AddToArrayVI(RepSpec,VIr,AllVATr,OPrsr.TransDate,paidcoef,tvat,tBase,tt,aInvoices,aInvCnt);
                            end else begin
                              AllVATRn_DetailedAddtoArrayVI(RepSpec,VIr,AllVATr,OPrsr.TransDate,paidcoef,tBase,tvat,tt,printheadf,aInvoices,aInvCnt);
                            end;
                          end;
                        end;
                      end;
                    end;
                  end;
                end;
              end;
            end;             
          case kOPrsTransTypePurgeNLTransaction:
            PurgeTRr.Number = OPrsr.TransNr;
            PurgeTRr.IntYc = GetIntYc(OPrsr.TransDate);
            if (ReadFirstMain(PurgeTRr,2,true)) then begin
              if ((PurgeTRr.Typ==1) and (PurgeTRr.SerNr==OPrsr.VINr)) then begin
                if (PurgeTRr.CompCode==OPrsr.VECode) then begin
                  VIr.SerNr = OPrsr.VINr;
                  if (ReadFirstMain(VIr,1,true)) then begin
                    if (VIr.Invalid==0) then begin
                      tv = PurgeTRr.CurDebVal-PurgeTRr.CurCredVal;
                      if (tv==0) then begin
                        tv = PurgeTRr.DebVal - PurgeTRr.CredVal;
                      end;                        
                      paidcoef = tv/VIr.PayVal;
                      if (paidcoef!=0) then begin
                        if (RepSpec.flags[14]==0) then begin
                          AllVATRn_AddToArrayVI(RepSpec,VIr,AllVATr,OPrsr.TransDate,paidcoef,tvat,tBase,tt,aInvoices,aInvCnt);
                        end else begin
                          AllVATRn_DetailedAddtoArrayVI(RepSpec,VIr,AllVATr,OPrsr.TransDate,paidcoef,tBase,tvat,tt,printheadf,aInvoices,aInvCnt);
                        end;
                      end;
                    end;
                  end;
                end;  
              end;
            end;                      
          case kOPrsTransTypeNLTransaction:
            TRr.Number = OPrsr.TransNr;
            TRr.IntYc = GetIntYc(OPrsr.TransDate);
            if (ReadFirstMain(TRr,2,true)) then begin
              rwcnt = MatRowCnt(TRr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(TRr,i,TRrw);
                if ((TRrw.Typ==1) and (TRrw.SerNr==OPrsr.VINr)) then begin
                  if (TRrw.CompCode==OPrsr.VECode) then begin
                    VIr.SerNr = OPrsr.VINr;
                    if (ReadFirstMain(VIr,1,true)) then begin
                      if (VIr.Invalid==0) then begin
                        tv = TRrw.CurDebVal-TRrw.CurCredVal;
                        if (tv==0) then begin
                          tv = TRrw.DebVal - TRrw.CredVal;
                        end;                        
                        paidcoef = tv/VIr.PayVal;
                        if (paidcoef!=0) then begin
                          if (RepSpec.flags[14]==0) then begin
                            AllVATRn_AddToArrayVI(RepSpec,VIr,AllVATr,OPrsr.TransDate,paidcoef,tvat,tBase,tt,aInvoices,aInvCnt);
                          end else begin
                            AllVATRn_DetailedAddtoArrayVI(RepSpec,VIr,AllVATr,OPrsr.TransDate,paidcoef,tBase,tvat,tt,printheadf,aInvoices,aInvCnt);
                          end;
                        end;
                      end;
                    end;
                  end;  
                end;
              end;
            end;                      
          case kOPrsTransTypeCashOut:
            CLOutr.SerNr = OPrsr.TransNr;
            if (ReadFirstMain(CLOutr,1,true)) then begin
              if (CLOutr.Invalid==0) then begin
                rwcnt = MatRowCnt(CLOutr);
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(CLOutr,i,CLOutrw);
                  if ((CLOutrw.Type==2) and (CLOutrw.TransNr==OPrsr.VINr)) then begin
                    if (CLOutr.CUCode==OPrsr.VECode) then begin
                      VIr.SerNr = OPrsr.VINr;
                      if (ReadFirstMain(VIr,1,true)) then begin
                        if (VIr.Invalid==0) then begin
                          paidcoef = CLOutrw.Sum/VIr.PayVal;
                          if (paidcoef!=0) then begin
                            if (RepSpec.flags[14]==0) then begin
                              AllVATRn_AddToArrayVI(RepSpec,VIr,AllVATr,OPrsr.TransDate,paidcoef,tvat,tBase,tt,aInvoices,aInvCnt);
                            end else begin
                              AllVATRn_DetailedAddtoArrayVI(RepSpec,VIr,AllVATr,OPrsr.TransDate,paidcoef,tBase,tvat,tt,printheadf,aInvoices,aInvCnt);
                            end;
                          end;
                        end;
                      end;
                    end;
                  end;
                end;
              end;
            end;                      
          case kOPrsTransTypeCashIn:
        end;
      end;
    end;
  end;
 if (RepSpec.flags[14]==0) then begin
    if (RepSpec.flags[12]==1) then begin 
      SortStringArray(aInvoices);
    end;  
    AllVATRn_PrintArrayVI(RepSpec,aInvoices,aInvCnt);
  end else begin
    if (RepSpec.flags[12]==1) then begin 
      SortStringArray(aInvoices);
    end;
    AllVATRn_DetailedPrintArrayVI(RepSpec,printheadf,aInvoices,aInvCnt);
  end;  
  return;
end;

global
procedure AllVATRn_PrintOP(record RcVc RepSpec,record SMVc AllVATr,var val tt,var val tBase,var val tvat)
begin
  record OPrsVc OPrsr;
  Boolean found,testf;
  record OPVc OPr;
  row OPVc OPrw;
  Integer i,rwcnt;
  val paidcoef; 
  LongInt lastVInr;
  val tv;
  Boolean printheadf;
  Integer OPBookVAT;
  record APAccBlock APAb;
  record CUVc VEr;

  found = true;
  OPrsr.TransDate = RepSpec.sStartDate;
  OPrsr.VINr = 0;
  while (LoopKey("TransDate",OPrsr,2,found)) begin
    if (OPrsr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (OPrsr.VINr>0) then begin testf = false; end;
      if (lastVInr>0) then begin
        if (lastVInr==OPrsr.VINr) then begin testf = false; end;
      end;
      if (testf) then begin
        switch (OPrsr.TransType) begin
          case kOPrsTransTypeInvoice:
          case kOPrsTransTypePayment:
            OPr.SerNr = OPrsr.TransNr;
            if (ReadFirstMain(OPr,1,true)) then begin
              rwcnt = MatRowCnt(OPr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(OPr,i,OPrw);
                if (OPrw.ovst==0) then begin
                  testf = true;
                  switch (RepSpec.flags[7]) begin
                    case 1: if (OPrw.VATVal!=0) then begin testf = false; end;
                    case 2:if (OPrw.VATVal==0) then begin testf = false; end;
                  end;
                  if (nonblank(RepSpec.f2)) then begin
                    if (SetInSet(OPrw.VATCode,RepSpec.f2)==false) then begin
                      testf = false;
                    end;
                  end;
                  VEr.Code = OPrw.VECode;
                  ReadFirstMain(VEr,1,true);
                  switch (VEr.OPBookVAT) begin
                    case 1:
                      OPBookVAT = 1;
                    case 2:
                      OPBookVAT = 0;
                    otherwise
                      OPBookVAT = APAb.OPBookVAT;
                  end;
                  if (OPBookVAT==0) then begin testf = false; end;
                  if (testf) then begin
                    if (OPrw.VISerNr<=0) then begin
                      paidcoef = 1;
                      if (OPrw.stp==kPaymentRowTypeNormal) then begin
// The recOPts are pretty detailed already, one per line...
//                        if (RepSpec.flags[14]==0) then begin
                          OPPrint(RepSpec,AllVATr,OPr,OPrw,OPrsr.TransDate,paidcoef,tt,tBase,tvat);
//                        end else begin
//                          AllVATRn_DetailedAddtoArrayVI(RepSpec,VIr,AllVATr,OPrsr.TransDate,paidcoef,tBase,tvat,tt,printheadf,aInvoices,aInvCnt);
//                        end;
                      end;
                    end;
                  end;
                end;
              end;
            end;             
          case 2:
          case 3:
          case 4:
        end;
      end;
    end;
  end;
  return;
end;

