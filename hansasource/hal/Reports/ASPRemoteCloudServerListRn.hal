external procedure GetLastServerListActivityDate(array record RemoteCloudServerVc,var array Date);
external procedure GetRemoteCloudServersData(array record RemoteCloudServerVc,var array Date,var array val,var array Integer);
external function string 255 FileSizeToString(Val);

procedure ShowSingleCloudNode(array record RemoteCloudServerVc aRCSr,vector Boolean vrcsvals,string cncode,record RCVc RepSpec,var Integer cnt)
begin
  record CloudNodeVc CNr;
  record CUVc CUr;
  record RemoteCloudServerVc RCSr;
  record HansaVersionVc HVr;
  Integer i;
  array Date Actarr;
  array val aRCSDBSize;
  array Integer aRCShals;
  Boolean testf;
  string 255 tstr;

  if (aRCSr.length>0) then begin
    cnt = 0;
    StartFormat(15);
    CNr.Code = cncode;
    if (ReadFirstMain(CNr,1,true)) then begin
      OutString(0,0,CNr.Code,false);
      OutString(80,0,CNr.AmazonInstanceType,false);
      OutString(130,0,CNr.HostName,false);
    end;
    EndFormat;
    GetRemoteCloudServersData(aRCSr,Actarr,aRCSDBSize,aRCShals);
//    if (RepSpec.flags[4]==1) then begin
//      GetLastServerListActivityDate(aRCSr,Actarr);
//    end;
    for (i=0;i<aRCSr.length;i=i+1) begin
      testf = true;
      if (nonblankdate(RepSpec.d1)) then begin
        if (Actarr[i]<RepSpec.d1) then begin testf = false; end;
      end;
      if (nonblankdate(RepSpec.d2)) then begin
        if (Actarr[i]>RepSpec.d2) then begin testf = false; end;
      end;
      if (testf) then begin
        RCSr = aRCSr[i];
        StartFormat(15);
        CUr.Code = RCSr.CUCode; 
        ReadFirstMain(Cur,1,true);
        HVr.Code = RCSr.HansaVersion;
        ReadFirstMain(HVr,1,true);
        tstr = RCSr.Name;
        if (len(tstr)>22) then begin
          tstr = left(tstr,19) & "...";
        end;
        if (blank(tstr)) then begin
          tstr = "[blank name]";
        end;
        OutStringID(0,"DblRCSVc",tstr,false,RCSr.UUID);
        OutString(3,"DblCUVc",RCSr.CUCode,false);
        OutString(4,0,CUr.eMail,false);
        OutString(235,0,FileSizeToString(aRCSDBSize[i]),true);
        if (aRCShals[i]!=0) then begin
          OutString(250,0,uchr(10004),true);
        end;
        if (vrcsvals["BACKUP_SETUP" & i]) then begin
          OutString(265,0,uchr(10004),true);
        end else begin
          OutString(265,0,uchr(10060),true);
        end;
        OutString(5,0,RCSr.HansaVersion,false);
        OutString(6,0,StringFromSet(367,RCSr.CurrentStatus),false);
        //OutString(6,0,HVr.ProductCode,false);
        if (RepSpec.flags[4]==1) then begin
          OutString(7,0,Actarr[i],false);
        end;
        EndFormat;
        cnt = cnt + 1;
      end;
    end;
    StartFormat(15);
    OutString(0,0,UsetStr(38592) & " " & cnt,false);
    EndFormat;
    StartFormat(1);
    Gray_divider(0,1);
    EndFormat;
  end;
  return;
end;

global
procedure ASPRemoteCloudServerListRn(record RCVc RepSpec)
begin
  record RemoteCloudServerVc RCSr;
  record CloudNodeVc CNr;
  Boolean TrHs,testf,backupsetupf;
  string 255 lastc;
  Integer rw,cnt,tot;
  string 255 tstr;
  record HansaVersionVc HVr;
  record CUVc CUr;
  Integer stat,l;
  Date td;
  array record RemoteCloudServerVc aRCSr;
  vector Boolean vrcsvals;

  StartReportJob(USetStr(38590));
  
  rw = 1;
  if (nonblank(RepSpec.f1)) then begin
    tstr = "Cloud Node:" & RepSpec.f1;
    Header(rw,tstr,1);
  end;
  if (nonblank(RepSpec.f4)) then begin
    Header(rw,"Customer:" & RepSpec.f4,1); rw = rw + 1;
  end;
  if (nonblank(RepSpec.f3)) then begin
    Header(rw,"Version:" & RepSpec.f3,1); rw = rw + 1;
  end;
  if (nonblank(RepSpec.f2)) then begin
    Header(rw,"Product:" & RepSpec.f2,1); rw = rw + 1;
  end;
  if (nonblank(RepSpec.f2)) then begin
    Header(rw,"Country:" & RepSpec.f5,1); rw = rw + 1;
  end;
  if (nonblank(RepSpec.d1)) then begin
    Header(rw,"Last Act. from Date:" & RepSpec.d1,1); rw = rw + 1;
  end;
  if (nonblank(RepSpec.d2)) then begin
    Header(rw,"Last Act. to Date:" & RepSpec.d2,1); rw = rw + 1;
  end;
  EndHeader;
  
  SetRepCol(3,80);
  SetRepCol(4,120);
  SetRepCol(5,270);
  SetRepCol(6,390);
  SetRepCol(7,440);
  
//  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
    OutString(0,0,"Server Name",false);
    OutString(3,0,"Cust. Code",false);
    OutString(4,0,"Email",false);
    OutString(235,0,"DB Size",true);
    OutString(265,0,"Backup",true);
    OutString(5,0,"Version",false);
    OutString(6,0,"Current Status",false);
    if (nonblank(RepSpec.d1)) then begin
      OutString(7,0,"Last Activity",false);
    end;
    EndFormat;
    StartFormat(1);
    Gray_divider(0,1);
    EndFormat;
//  end;
  
  RCSr.Controller = RepSpec.f1;
  TrHs = true;
  stat = -1;
  if (nonblank(RepSpec.f6)) then begin
    stat = SetFromString(367,RepSpec.f6);
  end;
  while (LoopKey("Controller",RCSr,1,TrHs)) begin
    if (nonblank(RepSpec.f1) and RCSr.Controller!=RepSpec.f1) then begin
      TrHs = false;
    end else begin
      testf = true;
      if (RepSpec.flags[12]==0 and RCSr.Closed!=0) then begin
        testf = false;
      end;
      if (RepSpec.flags[12]==1 and RCSr.Closed==0) then begin
        testf = false;
      end;
      if (RepSpec.flags[1]==1 and blank(RCSr.CUCode)) then begin
        testf = false;
      end;
      if (nonblank(RepSpec.f4) and RCSr.CUCode!=RepSpec.f4) then begin
        testf = false;
      end;
      if (RepSpec.flags[10]==1 and RCSr.FastCheckFlag!=1) then begin
        testf = false;
      end;
      if (stat>-1 and RCSr.CurrentStatus!=stat) then begin
        testf = false;
      end;
      if (testf) then begin
        CNr.Code = RCSr.Controller;
        if (ReadFirstMain(CNr,1,true)) then begin
          if (CNr.NodeType!=kCloudNodeTypeStandardCloudTest and RepSpec.flags[3]==1) then begin
            testf = false;
          end;
        end;
      end;
      if (testf) then begin
        CUr.Code = RCSr.CUCode;
        if (ReadFirstMain(CUr,1,true)) then begin
          if (nonblank(RepSpec.f5) and RepSpec.f5!=CUr.CountryCode) then begin
            testf = false;
          end;
        end else begin
          if (nonblank(RepSpec.f5)) then begin
            testf = false;
          end;
        end;
      end;  
      if (testf and (nonblank(RepSpec.f2) or nonblank(RepSpec.f3))) then begin
        HVr.Code = RCSr.HansaVersion;
        if (ReadFirstMain(HVr,1,true)) then begin
          if (nonblank(RepSpec.f2)) then begin
            if (RepSpec.f2!=HVr.ProductCode) then begin
              testf = false;
            end;
          end;
          if (nonblank(RepSpec.f3)) then begin
            if (RepSpec.f3!=left(RCSr.HansaVersion,len(RepSpec.f3))) then begin
              if (RepSpec.f3!=left(HVr.Name,len(RepSpec.f3))) then begin
                testf = false;
              end;
            end;
          end;
        end else begin
          testf = false;
        end;
      end;
      backupsetupf = RCSr.BackupFolder=="Backup" and nonblanktime(RCSr.BackupTime);
      switch (RepSpec.flags[13]) begin
        case 1: if (backupsetupf==true) then begin testf = false; end;
        case 2: if (backupsetupf==false) then begin testf = false; end;
      end;
      if (testf) then begin
        if (RCSr.Controller!=lastc) then begin
          ShowSingleCloudNode(aRCSr,vrcsvals,lastc,RepSpec,cnt);
          lastc = RCSr.Controller;
          tot = tot + cnt;
          ClearArray(aRCSr);
        end;
        l = aRCSr.length;
        aRCSr[l] = RCSr;
        vrcsvals["BACKUP_SETUP" & l] = backupsetupf;
      end;
    end;
  end;
  ShowSingleCloudNode(aRCSr,vrcsvals,lastc,RepSpec,cnt);
  tot = tot + cnt;
  if (tot>0) then begin
    StartFormat(15);
    OutString(0,0,UsetStr(38593) & " " & tot,false);
    EndFormat;
  end else begin
    StartFormat(15);
    OutString(0,0,UsetStr(38594),false);
    EndFormat;  
  end;

  EndJob;
  return;
end;