external procedure HTResClass(string,var string);
external procedure HTResLoc(string,var string);
external procedure PrintGuestObservation(record JobVc,Date,Date,Date,string,string,string);
external procedure GetSugProgramOnDay(Record JobVc,Date,var String,var Boolean,Record RcVc);
external function Boolean IsCancelState(String);
//external procedure PrintGuestObs(Record JobVc,Date);
external procedure JobBubSort40(var array Record JobVc,Integer);
external function integer GetGuestsInJob(record JobVc);

function Boolean CheckedIn(string status)
BEGIN
  Boolean res;
  record ReservationStatusVc rsr;

  res = false;
  rsr.Code = status;
  if (ReadFirstMain(rsr,1,true)) then begin
    if (rsr.StatType==3) then begin
      res = true;
    end;
  end;
  CheckedIn = res;  
  RETURN;
END;

function integer GetTravelTimeToHotel(string EvenPlace,Boolean Tof) 
begin
  record ResortBlock ResortBlockr;
  integer res;
  record RouteVc Router;
  String 100 tstr;
  
  blockload(ResortBlockr);
  if (Tof) then begin
    tstr = EvenPlace & "-" & ResortBlockr.HotelEventPlace;
  end else begin
    tstr = ResortBlockr.HotelEventPlace & "-" & EvenPlace;
  end;
  Router.Code = tstr;
  if readfirstmain(Router,1,true) then begin
    res = GetMinute(Router.Duration) + 60 * GetHour(Router.Duration);
  end else begin
    //stopalert("Strech " & tstr & " doesnt exist.");
  end;
  GetTravelTimeToHotel = res;
  return;
end;

//LO40PASSED
global
procedure GetRealLeavingTimes(Record JobVc Jobr,Boolean Leaving,var time HardTime,var time SoftTime)
begin
  record ResEventTypeVc ResEventTyper;
  row ResEventTypeVc ResEventTyperw;
  Integer rows,i,TravelTime;
  Record ExcurTypeVc ExcurTyper;
  Boolean FromMother;
  
  ResEventTyper.SerNr = Jobr.SerNr;
  if readfirstmain(ResEventTyper,1,true) then begin
    goto LGetRealLeavingTimes1;
  end;
  ResEventTyper.SerNr = Jobr.Mother;
  if readfirstmain(ResEventTyper,1,true) then begin
    FromMother = true;
    goto LGetRealLeavingTimes1;
  end;
  goto LGetRealLeavingTimes2;
LGetRealLeavingTimes1:;
  rows = MatRowCnt(ResEventTyper);
  if (rows==0) then begin goto LGetRealLeavingTimes2; end;
  if (Leaving) then begin
    MatRowGet(ResEventTyper,rows-1,ResEventTyperw);
  end else begin
    MatRowGet(ResEventTyper,0,ResEventTyperw);
  end;
  ExcurTyper.Code = ResEventTyperw.EventType;
  if readfirstmain(ExcurTyper,1,true) then begin
    if (Leaving) then begin
       HardTime = ExcurTyper.StartTime;
       SoftTime = AddMinutes(HardTime,-ExcurTyper.BeforeTime1); 
       TravelTime = GetTravelTimeToHotel(ExcurTyper.Place,false); 
       SoftTime = AddMinutes(SoftTime,-TravelTime);
    end else begin
       HardTime = ExcurTyper.EndTime;
       //!! SoftTime = AddMinutes(HardTime,-ExcurTyper.BeforeTime2); 
       TravelTime = GetTravelTimeToHotel(ExcurTyper.Place,true); 
       SoftTime = AddMinutes(HardTime,TravelTime); 
    end;
  end;
LGetRealLeavingTimes2:;  
  return;
end;

global
function boolean IsTDBefore(date d1,time t1,date d2,time t2)
begin
  Boolean res;
  res = false;
  if (d1<d2) then begin
    res = true;
  end else begin
    if (d1==d2) then begin
      if (t1 < t2) then begin
        res = true;
      end;
    end;
  end;
  IsTDBefore = res;
  return;
end;

global
function boolean IsTDAfter(date d1,time t1,date d2,time t2)
begin
  boolean res;
  res = false;
  if (d1>d2) then begin
    res = true;
  end else begin
    if (d1==d2) then begin
      if (t1 >= t2) then begin
        res = true;
      end;
    end;
  end;
  IsTDAfter = res;
  return;
end;

/*5.2*/ //make code nicer
Function Boolean InHouseSelect(Record RcVc RepSpec,Record JobVc Jobr,var Boolean foundf,String CheckInState)
begin 
  Record ResVc Roomr;
  Boolean sel;
  
  //Filters on dates not on reservation status !
  sel = false;

  //If 'foundf' returns 'false', the main loop stops. This cannot be correct. The main loop uses index 'ResStatus'
  //that has nothing to do with dates. This is a bug... fixed.

//  if (Jobr.TransDate > RepSpec.d1) then begin
//    foundf = false;
//  end else begin

    if ((RepSpec.flags[2]==1) or (not IsCancelState(Jobr.ResStatus))) then begin
// If a guest is still checked in after it's planned checkout stay, it should still be listed as in house.
//      if (IsTDBefore(Jobr.TransDate,Jobr.StartTime,RepSpec.d1,RepSpec.sStartTime) and
//          IsTDBefore(RepSpec.d1,RepSpec.sStartTime,Jobr.EndDate,Jobr.EndTime)) then begin

        if ((RepSpec.f4==Jobr.Type) or (blank(RepSpec.f4))) then begin
          Roomr.Code = Jobr.ResCode;
          if readfirstmain(Roomr,1,true) then begin
            if ((RepSpec.f1==Roomr.Class) or (blank(RepSpec.f1))) then begin
              if ((RepSpec.f2==Roomr.ResLoc) or (blank(RepSpec.f2))) then begin
                if ((RepSpec.f3==Roomr.Category) or (blank(RepSpec.f3))) then begin
//                  if ((RepSpec.flags[6]==0) or CheckedIn(Jobr.ResStatus)) then begin//this must be equal to checkinstate in settings, or?
                  if ((RepSpec.flags[6]==0) or (Jobr.ResStatus==CheckInState)) then begin
                    sel = true;
                  end;
                end;
              end;     
            end;
          end;
        end;
//      end;
    end;
//  end;
  InHouseSelect = sel;
  return;
end;  


global
procedure PrintJobLine(Record JobVc Jobr,var Integer cnt,Record RcVc RepSpec,var Integer totpersons)
begin
  string 255 tstr;
  Record RcVc MyRepSpec;
  Integer rw,i,rwcnt;
  Row JobVc Jobrw;
  Date vMan;
  Time HardTime,SoftTime;
  Boolean dummy;
  Integer pers;
  
  vMan = AddDay(RepSpec.d1,1);
  
  StartFormat(15);
  OutStringID(0,"DblJobVcID",Jobr.ResCode,false,Jobr.SerNr);
  tstr = DateToString(Jobr.TransDate,"DD") & " / " & DateToString(Jobr.EndDate,"DD");
  OutString(2,0,tstr,false);
  tstr = "DblJobVc";
  if (RepSpec.flags[1]==1) then begin
    tstr = "DblResEventTypeVc";
  end;
  pers = GetGuestsInJob(Jobr);
//  OutLongInt(3,0,pers,false);
  OutString(3,0,Jobr.Type,false);
  totpersons = totpersons + pers;
  OutString(4,0,Jobr.ResUsage,false); tstr = "";
  rwcnt = MatRowCnt(Jobr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Jobr,i,Jobrw); 
    OutString(5,0,left(Jobrw.CUName,25),false);
    tstr = "";
    if (RepSpec.d1==Jobr.TransDate) then begin      //LO40 NEEED SWITCHING CHECK !
      GetRealLeavingTimes(Jobr,false,HardTime,SoftTime);
      tstr = left(HardTime,5) & "/" & left(SoftTime,5); 
    end;
    if (RepSpec.d1==Jobr.EndDate) then begin 
      GetRealLeavingTimes(Jobr,true,HardTime,SoftTime);
      tstr = left(HardTime,5) & "/" & left(SoftTime,5); 
    end;
    OutString(6,0,tstr,false); tstr = ""; 
    cnt = cnt + 1;
    GetSugProgramOnDay(Jobr,RepSpec.d1,tstr,dummy,MyRepSpec); 
    OutString(7,0,tstr,false); tstr = "";
    GetSugProgramOnDay(Jobr,vMan,tstr,dummy,MyRepSpec); 
    OutString(8,0,tstr,true);
  end; 
  EndFormat; 
  return;     
end;
 
global
procedure PrintJobLine2(Record JobVc Jobr,var Integer cnt,Record RcVc RepSpec,var Integer totpersons)
begin
  string 255 tstr;
  Record RcVc MyRepSpec;
  Integer rw,i,rwcnt;
  Row JobVc Jobrw;
  Date vMan;
  Time HardTime,SoftTime;
  Integer pers;
  
  vMan = AddDay(RepSpec.d1,1);

  StartFormat(15);
  OutStringID(0,"DblJobVcID",Jobr.ResCode,false,Jobr.SerNr);
  tstr = DateToString(Jobr.TransDate,"DD") & " " & USetStr(11167) & " " & DateToString(Jobr.EndDate,"DD");
  OutString(2,0,tstr,false);
  tstr = "DblJobVc";
  if (RepSpec.flags[1]==1) then begin
    tstr = "DblResEventTypeVc";
  end;
  pers = GetGuestsInJob(Jobr);
//  OutLongInt(3,0,pers,false);
  OutString(3,0,Jobr.Type,false);
  totpersons = totpersons + pers;
  OutString(4,0,Jobr.ResUsage,false); tstr = "";
  
  rwcnt = MatRowCnt(Jobr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Jobr,i,Jobrw);
    OutString(5,0,left(Jobr.CUName,20),false);
    if (RepSpec.UsedOnly!=0) then begin
      switch (RepSpec.FirstAcc) begin      
        case "RsrtEventVc":
          OutStringID(6,"DblJobToRsrtEvent",left(Jobrw.CUName,25),false,Jobrw.GuestCode & "," & Jobr.SerNr);
        otherwise
          OutStringID(6,"DblGuestToRestAcc",left(Jobrw.CUName,25),false,Jobrw.GuestCode & "," & Jobr.SerNr);
      end;
    end else begin
      OutStringID(6,"DblProfileVc",left(Jobrw.CUName,25),false,Jobrw.GuestCode);
    end;
    cnt = cnt + 1;
  end;
  EndFormat; 
  return;     
end;

global
procedure InHouseRn(Record RcVc RepSpec)
begin
  Record JobVc Jobr;
  record ReservationStatusVc ReservationStatusr;
  Boolean foundf;
  String 255 tstr;
  Date vMan;
  Integer cnt,rw,maxstay,i;
  Array Record JobVc vJobSerNr;
  Integer vcnt;
  String 20 ResCode;
  LongInt JobSerNr;
  Integer totpersons;
  
  StartReportJob(USetStr(11155));
  rw = 1;
  tstr = USetStr(11191) & ": " & RepSpec.d1;
  Header(rw,tstr,1);
  rw = rw + 1;
  HTResLoc(RepSpec.f2,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTResClass(RepSpec.f1,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;

  maxstay = 90;
  vMan = AddDay(RepSpec.d1,1);

  SetRepCol(2,80);
  SetRepCol(3,120);
  SetRepCol(4,160);
  SetRepCol(5,190);
  SetRepCol(6,345);
  SetRepCol(7,400);
  SetRepCol(8,480);

  StartFormat(15);
  OutString(0,0,USetStr(11158),false);   
  OutString(2,0,USetStr(11157),false);
  OutString(3,0,USetStr(10201),false);
  OutString(4,0,USetStr(11159),false);
  OutString(5,0,USetStr(11160),false);
  if (RepSpec.flags[5]==1) then begin
    OutString(6,0,USetStr(10347),false);
    tstr = DateToString(RepSpec.d1,"DD/MM");
    OutString(7,0,tstr,false);
    tstr = DateToString(vMan,"DD/MM");
    OutString(8,0,tstr,true);
  end else begin
//    OutString(6,0,USetStr(9973),false);
    OutString(6,0,USetStr(11164),false);
//    OutString(8,0,USetStr(10364),true);
  end;
  EndFormat;  
  Gray_Divider(0,1);
  
  // Idea: Filter on days not on reservation states;
  cnt = 0; vcnt= 0;
/*  
  foundf = true;
  Jobr.TransDate = AddDay(RepSpec.d1,-maxstay);
  while LoopKey("TransDate",Jobr,1,foundf) begin
    if InHouseSelect(RepSpec,Jobr,foundf,Hotelsettings.ChInSt) then begin
      vcnt = vcnt+1;
      vJobSerNr[vcnt]= Jobr;
    end;
  end;
*/

  while LoopMain(ReservationStatusr,1,true) begin
    if (ReservationStatusr.StatType==3) then begin //Checked-In
      foundf = true;
      Jobr.ResStatus = ReservationStatusr.Code;
      ResetLoop(Jobr);
      while LoopKey("ResStatus",Jobr,1,foundf) begin
        if (Jobr.ResStatus!=ReservationStatusr.Code) then begin foundf = false; end;
        if (foundf) then begin
          if InHouseSelect(RepSpec,Jobr,foundf,ReservationStatusr.Code) then begin
            vcnt = vcnt+1;
            vJobSerNr[vcnt]= Jobr;
          end;
        end;
      end;
    end;
  end;

  JobBubSort40(vJobSerNr,vcnt);
  
  for(i=1;i<=vcnt;i=i+1) begin
    Jobr = vJobSerNr[i];
    Switch (RepSpec.flags[5]) begin
      case 0: PrintJobLine2(Jobr,cnt,RepSpec,totpersons);
      case 1: PrintJobLine(Jobr,cnt,RepSpec,totpersons);
    end;
  end;
    
  Gray_Divider(0,1);
  tstr = totpersons;
  StartFormat(15);
  OutString(0,0,USetStr(11161) & tstr,false);
  EndFormat;
  StartFormat(15);
  EndFormat;
  
  if (RepSpec.flags[4]==1) then begin
    StartFormat(15);
    OutString(0,0,USetStr(11163),false);
    EndFormat;
    for(i=1;i<=vcnt;i=i+1) begin
      Jobr = vJobSerNr[i];
//      PrintGuestObs(Jobr,RepSpec.d1);
      PrintGuestObservation(Jobr,RepSpec.sStartDate,RepSpec.sEndDate,RepSpec.d1,"","","");
    end;
  end; 
  EndJob;
  return;
end;

