external procedure TRExtYc(record TRVc,var string);
external function Boolean HasExtraNLComment();
external procedure HT2Per(Date, Date , var string);

procedure CheckRows(record TRVc TRr,String AcNumb,Var Integer RowNr,Var Boolean AccFound)
begin
  row TRVc TRrw;
  Integer i,r;
  Boolean fnd;

  i = 0;
  fnd = false;
  r = RowNr;
  while (i<r) begin
    MatRowGet(TRr,i,TRrw);
    if (TRrw.AccNumber==AcNumb) then begin
      RowNr = i;
      fnd = true;
    end;
    i = i + 1;
  end;
  AccFound = fnd;
  return;
end;

procedure CorrectBooking(var record TRVc TRr)
begin
  Row TRVc TRrw;
  Integer i;
  Integer NrRows;

  NrRows = MatRowCnt(TRr);
  for (i=0;i<NrRows;i=i+1) begin
    MatRowGet(TRr,i,TRrw);
    if (TRrw.ovst==0) then begin
      if (TRrw.DebVal < TRrw.CredVal) then begin
        TRrw.CredVal = TRrw.CredVal - TRrw.DebVal;
        TRrw.DebVal  = 0;
      end else begin
        TRrw.DebVal  = TRrw.DebVal - TRrw.CredVal;
        TRrw.CredVal = 0;
      end;
    end;
    MatRowPut(TRr,i,TRrw);
  end;
  return;
end;

procedure PrintBooking(record RcVc RepSpec,record TRVc TRr,Var LongInt seqnr,Boolean SumAs,Boolean prvatcod,Boolean prtrtype,Integer fiscaltype)
begin
  row TRVc TRrw;
  integer j,rows;
  Integer p1,p2,p3,p4,p5,p6,p7,p8;
  String 30 line,tstr;
  record TRVc orgTRr;
  Boolean testf,headerf;

// Positions
  p1 = 0;
  p2 = 40;
  p3 = 100;
  p4 = 210;
  p5 = 360;
  p6 = 410;
  p7 = 480;
  p8 = 20;

  if (MatRowCnt(TRr)==0) then begin
    goto LPrintBooking;
  end;
  if (prtrtype) then begin
    line = StrTrCode(TRr.IntYc);
  end else begin
    line = "";
  end;
  headerf = true;
  if (HasLocalization("ARG")) then begin
    RecordCopy(orgTRr,TRr);
    while (MatRowCnt(TRr)>0) begin
      MatRowDelete(TRr,0);
    end;
    rows = MatRowCnt(orgTRr);
    for (j=0;j<rows;j=j+1) begin
      MatRowGet(orgTRr,j,TRrw);
      testf = true;
      if (TRrw.DebVal==0) then begin testf = false; end;
      switch (fiscaltype) begin
        case -2:
          if (TRrw.SAFTType==kTransactionFiscalTypeYearEndStage1 or TRrw.SAFTType==kTransactionFiscalTypeYearEndStage2) then begin
            testf = false;
          end;
        case kTransactionFiscalTypeYearEndStage1:
          if (TRrw.SAFTType!=kTransactionFiscalTypeYearEndStage1) then begin
            testf = false;
          end;
        case kTransactionFiscalTypeYearEndStage2:
          if (TRrw.SAFTType!=kTransactionFiscalTypeYearEndStage2) then begin
            testf = false;
          end;
        otherwise
      end;
      if (testf) then begin
        MatRowPut(TRr,MatRowCnt(TRr),TRrw);
      end;
    end;
    for (j=0;j<rows;j=j+1) begin
      MatRowGet(orgTRr,j,TRrw);
      testf = true;
      if (TRrw.CredVal==0) then begin testf = false; end;
      switch (fiscaltype) begin
        case -2:
          if (TRrw.SAFTType==kTransactionFiscalTypeYearEndStage1 or TRrw.SAFTType==kTransactionFiscalTypeYearEndStage2) then begin
            testf = false;
          end;
        case kTransactionFiscalTypeYearEndStage1:
          if (TRrw.SAFTType!=kTransactionFiscalTypeYearEndStage1) then begin
            testf = false;
          end;
        case kTransactionFiscalTypeYearEndStage2:
          if (TRrw.SAFTType!=kTransactionFiscalTypeYearEndStage2) then begin
            testf = false;
          end;
        otherwise
      end;
      if (testf) then begin
        if (headerf) then begin
          StartFormat(15);
          TRExtYc(TRr,tstr);
          OutStringID(p1,"DblTrans2",seqnr,false,tstr);
          OutDate(p2,0,TRr.TransDate,false);
          OutString(p3,0,left(TRr.Comment,40),false);
          if nonblank(TRr.RefStr) then begin
            line = line & "/( " & TRr.RefStr & " )";
          end;
          OutStringAdjustBiDi(p7,0,line,true,M4Val,p7+40);
          EndFormat;
          headerf = false;
        end;
        MatRowPut(TRr,MatRowCnt(TRr),TRrw);
      end;
    end;
  end;

  rows = MatRowCnt(TRr);
  for (j=0;j<rows;j=j+1) begin
    MatRowGet(TRr,j,TRrw);
    testf = false;
    if (TRrw.stp==1) and (TRrw.ovst==0) then begin
      testf = true;
    end;
    switch (fiscaltype) begin
      case -2:
        if (TRrw.SAFTType==kTransactionFiscalTypeYearEndStage1 or TRrw.SAFTType==kTransactionFiscalTypeYearEndStage2) then begin
          testf = false;
        end;
      case kTransactionFiscalTypeYearEndStage1:
        if (TRrw.SAFTType!=kTransactionFiscalTypeYearEndStage1) then begin
          testf = false;
        end;
      case kTransactionFiscalTypeYearEndStage2:
        if (TRrw.SAFTType!=kTransactionFiscalTypeYearEndStage2) then begin
          testf = false;
        end;
      otherwise
    end;
    if (testf) then begin
      if (headerf) then begin
        StartFormat(15);
        TRExtYc(TRr,tstr);
        OutStringID(p1,"DblTrans2",seqnr,false,tstr);
        OutDate(p2,0,TRr.TransDate,false);
        OutString(p3,0,left(TRr.Comment,40),false);
        if nonblank(TRr.RefStr) then begin
          line = line & "/( " & TRr.RefStr & " )";
        end;
        OutStringAdjustBiDi(p7,0,line,true,M4Val,p7+40);
        EndFormat;
        headerf = false;
      end;
      StartHeader2(50,false);
      StartFormat(20);
        OutString(200,0,USetStr(2412),false)
        OutAccumulator(p5,4,M4Val,true);
         if (prvatcod) then begin
          OutAccumulator(460,5,M4Val,true);
        end else begin
          OutAccumulator(p7,5,M4Val,true);
        end;
      EndFormat;
      EndHeader2;

      StartFooter(30,true);
        Black_Divider(0,1);
/*        
        OutString(200,0,USetStr(2412),false)
        OutAccumulator(p5,4,M4Val,true);
        OutAccumulator(5,5,M4Val,true);
*/        
        OutString(200,0,USetStr(2413),false)
        OutAccumulator(p5,0,M4Val,true);
         if (prvatcod) then begin
          OutAccumulator(460,1,M4Val,true);
        end else begin
          OutAccumulator(p7,1,M4Val,true);
        end;
        ClearAccumulator(0);
        ClearAccumulator(1);
        OutString(200,0,USetStr(2414),false)
        OutAccumulator(p5,2,M4Val,true);
        if (prvatcod) then begin
          OutAccumulator(460,3,M4Val,true);
        end else begin
          OutAccumulator(p7,3,M4Val,true);
        end;
        CopyAccumulator(4,2);
        CopyAccumulator(5,3);
      EndFooter;
          
      StartFormat(15);        
      OutStringOvst(p8,0,TRrw.AccNumber,false,TRrw.ovst);
      OutStringOvst(p3,0,left(TRrw.Comment,35),false,TRrw.ovst);
      if (HasExtraNLComment) and (nonblank(TRrw.ExtraComment)) then begin
        OutStringovst(p3,0,left(TRrw.ExtraComment,35),false,TRrw.ovst);
      end;
      if (SumAs) then begin
        if (RepSpec.Media==mtFile) or (RepSpec.Media==mtClipboard) or (RepSpec.Media==mtExcel) then begin
          OutString(p8,0,"",false);
          OutString(p8,0,"",false);
        end;
        if (TRrw.DebVal==0) then begin TRrw.DebVal = blankval; end;
        if (TRrw.CredVal==0) then begin TRrw.CredVal = blankval; end;
        OutValOvstBiDi(p5,0,TRrw.DebVal,M4Val,true,TRrw.ovst,p5+50); 
        OutValOvstBiDi(p7,0,TRrw.CredVal,M4Val,true,TRrw.ovst,p7+40); 
      end else begin
        if (RepSpec.Media==mtFile) or (RepSpec.Media==mtClipboard) or (RepSpec.Media==mtExcel) then begin
          OutString(p8,0,"",false);
          OutString(p8,0,"",false);
        end;
        OutValOvstBiDi(p5,0,TRrw.DebVal,M4Val,true,TRrw.ovst,p5+50);
        if (prvatcod) then begin
          OutValOvst(460,0,TRrw.CredVal,M4Val,true,TRrw.ovst);
          OutLongIntOvst(1,0,TRrw.VATCode,true,TRrw.ovst);
        end else begin
          OutValOvstBiDi(p7,0,TRrw.CredVal,M4Val,true,TRrw.ovst,p7+40);
        end;
      end;
      EndFormat;      

      AddToAccumulator(0,TRrw.DebVal);
      AddToAccumulator(1,TRrw.CredVal);
      AddToAccumulator(2,TRrw.DebVal);
      AddToAccumulator(3,TRrw.CredVal);

    end;
  end;
  if (headerf==false) then begin
    Gray_Divider(0,1);
    seqnr = seqnr + 1;
  end;
LPrintBooking:;  
  return;
end;

Function
Boolean CheckForPrint(record RcVc RepSpec,var record TRVc sumTRr,Date transdat,var Integer curmonth,var Boolean foundf,Integer sorting,Boolean prvatcod,Boolean prtrtype,Integer fiscaltype,var LongInt seqnr)
begin
  Integer i;
  Boolean res;
  
  res = false;
  i = GetMonth(transdat);
  if ((foundf==false) or ((i<>curmonth) and (sorting==2))) then begin    // first of the serie
    if (i<>curmonth) then begin
      if (curmonth>0) then begin
        CorrectBooking(sumTRr);
        PrintBooking(RepSpec,sumTRr,seqnr,true,prvatcod,prtrtype,fiscaltype);
      end;
      curmonth = i;
    end;
    foundf = true;
    res = true;
  end;
  CheckForPrint = res;
  return;
end;

procedure UpdateSummary(var record TRVc sumTRr,record TRVc TRr,Integer fiscaltype)
begin
  Integer i,rows,RowNr;
  Row TRVc TRrw,MemTRrw;
  Boolean AccFound,testf;
  val addCred,addDeb;

  rows = MatRowCnt(TRr);
  for (i=0;i<rows;i=i+1) begin
    MatRowGet(TRr,i,TRrw);
    testf = false;
    if (TRrw.stp==1) and (TRrw.ovst==0) then begin
      testf = true;
    end;
    switch (fiscaltype) begin
      case -2:
        if (TRrw.SAFTType==kTransactionFiscalTypeYearEndStage1 or TRrw.SAFTType==kTransactionFiscalTypeYearEndStage2) then begin
          testf = false;
        end;
      case kTransactionFiscalTypeYearEndStage1:
        if (TRrw.SAFTType!=kTransactionFiscalTypeYearEndStage1) then begin
          testf = false;
        end;
      case kTransactionFiscalTypeYearEndStage2:
        if (TRrw.SAFTType!=kTransactionFiscalTypeYearEndStage2) then begin
          testf = false;
        end;
      otherwise
    end;
    if (testf) then begin
      RowNr = MatRowCnt(sumTRr);
      CheckRows(sumTRr,TRrw.AccNumber,RowNr,AccFound);
      if (AccFound) then begin
        MatRowGet(sumTRr,RowNr,MemTRrw);
      end else begin
        MemTRrw.stp = 1;
        MemTRrw.AccNumber = TRrw.AccNumber;
        MemTRrw.Comment = TRrw.Comment;
        MemTRrw.DebVal = 0;
        MemTRrw.CredVal = 0;
      end;
      // Update row
      if (TRrw.CredVal<>-1) then begin
        addCred = TRrw.CredVal;
      end else begin
        addCred = 0;
      end;
      if (TRrw.DebVal<>-1) then begin
        addDeb = TRrw.DebVal;
      end else begin
        addDeb = 0;
      end;
      MemTRrw.DebVal  = MemTRrw.DebVal + addDeb;
      MemTRrw.CredVal = MemTRrw.CredVal + addCred;
      MatRowPut(sumTRr,RowNr,MemTRrw);
    end;
  end; // for
  return
end;

procedure TransListPerTransactionFiscalType(record RcVc RepSpec,Boolean prvatcod,var LongInt seqnr,Integer fiscaltype)
begin
  String 20 mykey;
  Record TRVc TRr;
  Record TRVc MemIVTRr;
  Record TRVc MemVITRr;
  Record TRVc MemIPTRr;
  Record TRVc MemOPTRr;
  Row TRVc TRrw,MemTRrw;
  Integer p1,p2,p3,p4,p5,p6,p7,p8;
  Boolean found,treatedf;
  Boolean invfound,vinvfound,ipfound,opfound,Res,prtrtype;
  Integer i,j,curivmonth,curvimonth,curipmonth,curopmonth;
  LongInt rows;
  Val addCred,addDeb;
  Integer rw;
  string 200 tstr;
  Boolean AccFound;

// Positions
  p1 = 0;
  p2 = 40;
  p3 = 100;
  p4 = 210;
  p5 = 360;
  p6 = 410;
  p7 = 480;
  p8 = 20;

// Get parameters & Init
  found = true;
  invfound = false;
  vinvfound = false;
  curivmonth = -1;
  curvimonth = -1;
  curipmonth = -1;
  curopmonth = -1;


  if (RepSpec.flags[1]==1) then begin
    prtrtype = false;
  end else begin
    prtrtype = true;
  end;
  if (RepSpec.flags[10]==0) then begin
    mykey = "Number";
  end;
  if ((RepSpec.flags[10]==1) or (RepSpec.flags[10]==2)) then begin
    mykey = "TransDate";               
  end;
  while (LoopKey(mykey,TRr,2,found)) begin
    if (DateInRange(TRr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)) then begin
      treatedf = false;
      if ((RepSpec.flags[12] == 1) and (TRr.IntYc==IVYc)) then begin
        if (CheckForPrint(RepSpec,MemIVTRr,TRr.TransDate,curivmonth,invfound,RepSpec.flags[10],prvatcod,prtrtype,fiscaltype,seqnr)) then begin
          RecordNew(MemIVTRr);
          MemIVTRr.TransDate = RepSpec.sEndDate;
          MemIVTRr.Comment =  USetStr(8590);
          if (RepSpec.flags[10]==2) then begin
            MemIVTRr.RefStr = USetStr(curivmonth + 2780);
          end;
          MemIVTRr.IntYc = TRr.IntYc;
        end;
        UpdateSummary(MemIVTRr,TRr,fiscaltype);
        treatedf = true;
      end;
      if ((RepSpec.flags[11] == 1) and (TRr.IntYc==VIYc)) then begin            
        if (CheckForPrint(RepSpec,MemVITRr,TRr.TransDate,curvimonth,vinvfound,RepSpec.flags[10],prvatcod,prtrtype,fiscaltype,seqnr)) then begin
          RecordNew(MemVITRr);
          MemVITRr.TransDate = RepSpec.sEndDate;
          MemVITRr.Comment = USetStr(8590);
          if (RepSpec.flags[10]==2) then begin
            MemVITRr.RefStr = USetStr(curvimonth + 2780);
          end;
          MemVITRr.IntYc = TRr.IntYc;
        end;
        UpdateSummary(MemVITRr,TRr,fiscaltype);
        treatedf = true;
      end;
      if ((RepSpec.flags[13] == 1) and (TRr.IntYc==IPYc)) then begin
        if (CheckForPrint(RepSpec,MemIPTRr,TRr.TransDate,curipmonth,ipfound,RepSpec.flags[10],prvatcod,prtrtype,fiscaltype,seqnr)) then begin
          RecordNew(MemIPTRr);
          MemIPTRr.TransDate = RepSpec.sEndDate;
          MemIPTRr.Comment =  USetStr(8590);
          if (RepSpec.flags[10]==2) then begin
            MemIPTRr.RefStr = USetStr(curipmonth + 2780);
          end;
          MemIPTRr.IntYc = TRr.IntYc;
        end;
        UpdateSummary(MemIPTRr,TRr,fiscaltype);
        treatedf = true;
      end;
      if ((RepSpec.flags[14] == 1) and (TRr.IntYc==OPYc)) then begin            
        if (CheckForPrint(RepSpec,MemOPTRr,TRr.TransDate,curopmonth,opfound,RepSpec.flags[10],prvatcod,prtrtype,fiscaltype,seqnr)) then begin
          RecordNew(MemOPTRr);
          MemOPTRr.TransDate = RepSpec.sEndDate;
          MemOPTRr.Comment = USetStr(8590);
          if (RepSpec.flags[10]==2) then begin
            MemOPTRr.RefStr = USetStr(curopmonth + 2780);
          end;
          MemOPTRr.IntYc = TRr.IntYc;
        end;
        UpdateSummary(MemOPTRr,TRr,fiscaltype);
        treatedf = true;
      end;
      if (treatedf==false) then begin   // Normal case
        if ((TRr.IntYc!=OPYc) and (TRr.IntYc!=IPYc) and (TRr.IntYc!=IVYc) and (TRr.IntYc!=VIYc)) then begin
          PrintBooking(RepSpec,TRr,seqnr,false,prvatcod,prtrtype,fiscaltype);
        end;
      end;
    end; // date if
  end;  // while
  if (invfound) then begin
    CorrectBooking(MemIVTRr);
    PrintBooking(RepSpec,MemIVTRr,seqnr,true,prvatcod,prtrtype,fiscaltype);
  end;
  if (vinvfound) then begin
    CorrectBooking(MemVITRr);
    PrintBooking(RepSpec,MemVITRr,seqnr,true,prvatcod,prtrtype,fiscaltype);
  end;
  if (ipfound) then begin
    CorrectBooking(MemIPTRr);
    PrintBooking(RepSpec,MemIPTRr,seqnr,true,prvatcod,prtrtype,fiscaltype);
  end;
  if (opfound) then begin
    CorrectBooking(MemOPTRr);
    PrintBooking(RepSpec,MemOPTRr,seqnr,true,prvatcod,prtrtype,fiscaltype);
  end;

  return;
end;

// ***********************************
// DESC: Informe Diario de Bookings
// DATE: 9 - 99
// IN  : periodo

global
procedure TransListRn(record RcVc RepSpec)
begin
  String 20 mykey;
  LongInt seqnr;
  Integer rw;
  string 200 tstr;
  Integer p1,p2,p3,p4,p5,p6,p7,p8;
  Boolean prvatcod;

// Get parameters & Init
  seqnr = RepSpec.FirstVer;
  if (seqnr==-1) then begin seqnr = 1; end;
  
  p1 = 0;
  p2 = 40;
  p3 = 100;
  p4 = 210;
  p5 = 360;
  p6 = 410;
  p7 = 480;
  p8 = 20;
  
// Header
  StartReportJob(USetStr(8580));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;

  StartFormat(15);
  OutString(0,0,USetStr(8581),false);
  OutString(p2,0,USetStr(8582),false);
  OutString(p3,0,USetStr(8583),false);
  if (RepSpec.flags[6]==1) then begin
    OutString(460,0,USetStr(8584),true);
    OutString(1,0,USetStr(8585),true);
    prvatcod = true;
  end else begin
    OutString(p7,0,USetStr(8584),true);
    prvatcod = false;
  end;
  EndFormat;
  StartFormat(15);
  OutString(p1,0,USetStr(8586),false);
  OutString(p3,0,USetStr(8587),false);
  if (RepSpec.Media==mtFile) or (RepSpec.Media==mtClipboard) or (RepSpec.Media==mtExcel) then begin
    OutString(0,0,"",false);
    OutString(0,0,"",false);
  end;
  OutStringAdjustBiDi(p5,0,USetStr(8588),True,M4Val,p5+50);
  OutStringAdjustBiDi(p7,0,USetStr(8589),true,M4Val,p7+40);
  EndFormat;
  Gray_Divider(0,1);
  
  TransListPerTransactionFiscalType(RepSpec,prvatcod,seqnr,kTransactionFiscalTypeYearEndStage2);
  TransListPerTransactionFiscalType(RepSpec,prvatcod,seqnr,-2);
  TransListPerTransactionFiscalType(RepSpec,prvatcod,seqnr,kTransactionFiscalTypeYearEndStage1);

//  TransListPerTransactionFiscalType(RepSpec,prvatcod,seqnr,-1);
  Gray_Divider(0,1);
  EndJob;
  return;
end;
