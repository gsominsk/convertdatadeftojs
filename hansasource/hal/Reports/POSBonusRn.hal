external function Integer CountObjects(string);
external function string 255 CreateInvoiceNumber(LongInt,string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure HT2Per(Date, Date , var string);
external procedure HTSaleMan(string, var string);

procedure PrintIVCashHeader(record RcVc RepSpec,string user,record IVCashVc IVCashr,var LongInt oldSerNr)
begin
  record CUVc CUr;
  string 255 tstr;
  
  if (oldSerNr!=IVCashr.SerNr) then begin
    StartFormat(15);
    tstr = CreateInvoiceNumber(IVCashr.SerNr,IVCashr.OfficialSerNr);
    OutString(0,"DblIVCashVc",tstr,false);
    OutDate(55,0,IVCashr.InvDate,false);

    OutString(115,0,IVCashr.CustCode,false);
    OutString(175,0,IVCashr.Addr0,false);
    OutString(320,0,user,false);
    if (RepSpec.flags[5]!=0) then begin        
      CUr.Code = IVCashr.CustCode;
      if (ReadFirstMain(CUr,1,true)) then begin
        if (nonblank(CUr.Department)) then begin
          OutString(410,0,CUr.Department,false);
        end;  
      end;
    end;  
    oldSerNr = IVCashr.SerNr;
    EndFormat;
  end;
  return;
end;

procedure CalcBonus(string artcode,record UserVc Userr,string custcode,val sum,
                    var val pp,var val bp,Integer itembonus,val vals0)
begin
  record INVc INr;
  record CUVc CUr;
  record BonusDefVc BFr;
  row BonusDefVc BFrw;
  integer i,rwcnt;
  boolean foundf;
  boolean skipf;
  val reb;
  
  bp = 0;
  pp = blankval;
  reb = 0;
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    foundf = true;
    BFr.UserCode = Userr.Code;
    while (LoopMain(BFr,1,foundf)) begin
      skipf = false;
      if (nonblank(BFr.UserCode)) and (BFr.UserCode != Userr.Code) then begin
        foundf = false;
        skipf = true;
      end;
      if (nonblank(BFr.CustCode)) and (BFr.CustCode != CUr.Code) then begin
        skipf = true;
      end;
      if (nonblank(BFr.CustCat)) and (BFr.CustCat != CUr.CustCat) then begin
        skipf = true;
      end;
      if (foundf) and (skipf==false) then begin
        rwcnt = MatRowCnt(BFr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(BFr,i,BFrw);
          if (BFrw.CodeType==0) then begin
            INr.Code = artcode;
            if (ReadFirstItem(artcode,INr,true,true)) then begin
              if (INr.Bonus==0) then begin
                if (INr.Group==BFrw.ItemCode) then begin
                  pp = BFrw.BonusPrc;
                end;
              end else begin
                pp = INr.Bonus;
              end;
            end;
          end else begin
            INr.Code = artcode;
            if (ReadFirstItem(artcode,INr,true,true)) then begin
              if (INr.Bonus==0) then begin
                if (INr.Code==BFrw.ItemCode) then begin
                  pp = BFrw.BonusPrc;
                end;
              end else begin
                pp = INr.Bonus;
              end;
            end;
          end; 
        end;
        if (blank(pp)) then begin
          pp = BFr.BonusPrc;
        end;
      end;      
    end;
  end;
  switch (itembonus) begin
    case 0:
      if (blank(pp)) then begin
        pp = vals0;
        if (blank(pp)) then begin
          pp = Userr.Bonus;
        end;
      end;
    case 1:
      if (pp==0) then begin
        pp = vals0;
        if (pp==0) then begin
          INr.Code = artcode;
          if (ReadFirstItem(artcode,INr,true,true)) then begin
            if (INr.Bonus!=0) then begin
              pp = INr.Bonus;
            end;
          end;
          if (blank(pp)) then begin
            pp = Userr.Bonus;
          end;
        end;
      end;
  end;
  if ((pp>=-100) and (pp<=100)) then begin
    reb = pp/100;
    bp = sum*reb;
  end;
  return;
end;

function Boolean BonusRowPrint(val bonusbase,val bonus,Integer withbalance,Integer withbonus)
begin
  Boolean res;
  
  res = true;
  if (withbalance==1) then begin
    if (bonusbase==0) then begin
      if (bonus==0) then begin
        res = false;
      end;
    end;
  end;      
  if (withbonus==1) then begin
    if (bonus==0) then begin
      res = false;
    end;
  end;    
  BonusRowPrint = res;
  return;
end;

procedure BonusResults(record RcVc RepSpec,string user,string username,val base,val sales,val bonus,val cost,val rowsum)
begin
  if (RepSpec.ArtMode==0) then begin
    if (RepSpec.flags[0]==0) then begin
      Gray_Divider(200,480);
    end;
  end;
  StartFormat(15);
  if (RepSpec.ArtMode==0) then begin
    if (RepSpec.flags[9]!=0) then begin
      OutString(130,0,USetStr(4915),false);
      OutVal(4,0,sales,M4Val,true);
      OutVal(5,0,cost,M4Val,true);
      OutVal(6,0,base,M4Val,true);
      if (RepSpec.flags[1]==1) then begin
        OutVal(7,0,(base*100)/rowsum,M4Val,true);
      end;
    end else begin
      if (blank(user)) then begin
        OutString(200,0,username,false);
      end else begin
        OutString(200,0,USetStr(4915),false);
      end;
      OutVal(7,0,base,M4Val,true);
    end;
    OutVal(8,0,bonus/base*100,M4Val,true);
  end else begin 
    if (nonblank(username)) then begin
      OutString(0,0,user,false);
      OutString(55,0,username,false);
    end else begin
      OutString(0,0,USetStr(4914),false);
    end;
    if (RepSpec.flags[9]!=0) then begin
      OutVal(4,0,sales,M4Val,true);
      OutVal(5,0,cost,M4Val,true);
      OutVal(6,0,base,M4Val,true);
//      OutVal(7,0,((base-cost)*100)/sales,M4Val,true);
      if (RepSpec.flags[1]==1) then begin
        OutVal(7,0,(base*100)/sales,M4Val,true);
      end;
    end else begin
      OutVal(315,0,sales,M4Val,true);
      if (RepSpec.flags[1]==1) then begin
        OutVal(7,0,((base-cost)*100)/sales,M4Val,true);
      end else begin
        OutVal(7,0,bonus/base*100,M4Val,true);
      end;
    end;
  end;
  OutVal(480,0,bonus,M4Val,true);
  EndFormat;
  if (RepSpec.flags[0]==0) or (RepSpec.flags[9]!=0) or (RepSpec.flags[8]!=0) then begin
    Gray_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;  
 
  return;
end;

procedure UserBonus(record RcVc RepSpec,record UserVc Userr,
                    var val totbase,var val totbonus,var val totcost,var val totsales,var val totgp)
begin
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer i,j,rwcnt,assfrrownr,asstorownr;
  Boolean found,testf,firstivf;
  record TaxMatrixVc TMr;
  val sales,rowsum,rs,nrofsalesman,base;
  val bprcnt,bonus;
  val ivbase,ivbprcnt,ivbonus,ivcost,ivsales,ivrowsum,ivgp;
  val usbase,usbprcnt,usbonus,uscost,ussales,usrowsum,usgp;
  LongInt oldSerNr;
  string 255 salesass;
  vector Integer vassrownr,vasscnt;

  firstivf = true;
  nrofsalesman = 1.00;
  IVCashr.InvDate = RepSpec.d1;
  found = true;
  while (LoopKey("InvDate",IVCashr,1,found)) begin
    if ((nonblankdate(RepSpec.d1)) and (IVCashr.InvDate<RepSpec.d1)) then begin
      found = false;
    end;   
    if ((nonblankdate(RepSpec.d2)) and (IVCashr.InvDate>RepSpec.d2)) then begin
      found = false;
    end;      
    if (found) then begin
      testf = true;
      if (testf) then begin
        salesass = "";
        if (IVCashr.OKFlag==0) then begin testf = false; end;
        if (IVCashr.Invalid!=0) then begin testf = false; end;
        if (nonblank(RepSpec.Stext)) then begin
          if (RepSpec.Stext!=IVCashr.BranchID) then begin testf = false; end;
        end;
        switch (RepSpec.flags[2]) begin
          case 2:
            if (SetInSet(Userr.Code,IVCashr.Bagger)==false) then begin 
              testf = false;
            end;
          otherwise
            if (testf) then begin
              testf = false;
              assfrrownr = 0;
              rwcnt = MatRowCnt(IVCashr);
              asstorownr = rwcnt;
              
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(IVCashr,i,IVCashrw);
                if (IVCashrw.stp==kInvoiceRowTypeSalesAssistant) then begin
                  vassrownr[IVCashrw.SalesAssistant] = i;
                  vasscnt[IVCashrw.SalesAssistant] = vasscnt[IVCashrw.SalesAssistant] + 1;
                  salesass = IVCashrw.SalesAssistant;
                  for (j=i+1;j<rwcnt;j=j+1) begin
                    MatRowGet(IVCashr,j,IVCashrw);
                    if (IVCashrw.stp==kInvoiceRowTypeSalesAssistant) then begin
                      vasscnt[salesass] = vasscnt[salesass] + 1;
                    end else begin
                      j = rwcnt;
                    end;
                  end;
                  for (j=i-1;j>=0;j=j-1) begin
                    MatRowGet(IVCashr,j,IVCashrw);
                    if (IVCashrw.stp==kInvoiceRowTypeSalesAssistant) then begin
                      vasscnt[salesass] = vasscnt[salesass] + 1;
                    end else begin
                      j = -1;
                    end;
                  end;
                end;
              end;
              
              salesass = "";
              assfrrownr = 0;
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(IVCashr,i,IVCashrw);
                switch (RepSpec.flags[2]) begin
                  case 0:
                    if (IVCashrw.stp==kInvoiceRowTypeNormal or IVCashrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
                      if (nonblank(IVCashrw.Salesmen)) then begin
                        if (SetInSet(Userr.Code,IVCashrw.Salesmen)) then begin 
                          testf = true; 
                          i = rwcnt;
                        end;
                      end else begin
                        if (SetInSet(Userr.Code,IVCashr.SalesMan)) then begin 
                          testf = true; 
                          i = rwcnt;
                        end;
                      end;
                    end;
                  case 1:
                    if (IVCashrw.stp==kInvoiceRowTypeSalesAssistant) then begin                                      
                      if (SetInSet(Userr.Code,IVCashrw.SalesAssistant)) then begin 
                        testf = true; 
                        assfrrownr = i;
                        salesass = IVCashrw.SalesAssistant;
                      end else begin
                        if (nonblank(salesass) and i>asstorownr and asstorownr>0) then begin
                          i = rwcnt;
                        end;
                      end;
                    end else begin
                      if ((IVCashrw.stp==kInvoiceRowTypeNormal or IVCashrw.stp==kInvoiceRowTypeStructuredItemComponent) and nonblank(salesass)) then begin
                        asstorownr = i;
                      end;
                    end;
                end;
              end;
            end;
        end;
      end;
      if (testf) then begin
        ivsales = blankval; ivcost = blankval; ivbase = blankval; ivbonus = blankval;
        if (firstivf) then begin
          if (RepSpec.ArtMode==0) then begin
            StartFormat(15);
            if (nonblank(IVCashr.SalesMan)) then begin
              OutString(0,0,Userr.Code,false);
              OutString(55,0,Userr.Name,false);
            end else begin
              OutString(0,0,USetStr(4914),false);
            end;
            EndFormat;
            Gray_Divider(0,480);
          end;
          firstivf = false;
        end;
        switch (RepSpec.flags[2]) begin
          case 0: nrofsalesman = CountObjects(IVCashr.SalesMan);
          case 1: nrofsalesman = vasscnt[Userr.Code];
          case 2: nrofsalesman = CountObjects(IVCashr.Bagger);
        end;
        rwcnt = MatRowCnt(IVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVCashr,i,IVCashrw);
          testf = true;
          if (IVCashrw.Sum==0) and (IVCashrw.BasePrice==0) then begin testf = false; end;
          if (IVCashrw.stp!=kInvoiceRowTypeNormal and IVCashrw.stp!=kInvoiceRowTypeStructuredItemComponent and IVCashrw.stp!=kInvoiceRowTypeGiftVoucherSold) then begin
            testf = false;
          end;
          switch (RepSpec.flags[2]) begin
            case 1:
              if (i<assfrrownr or i>asstorownr) then begin testf = false; end;
              if (salesass!=Userr.Code) then begin testf = false; end;
          end;
          
          if (testf) then begin
          
            sales = MulRateToBase1(IVCashr.CurncyCode,IVCashrw.Sum,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
            rowsum = sales;
            UnpackRowFieldMatrix(IVCashrw,"TaxMatrix",TMr);
            FindSalesExVat(TMr,IVCashrw.VATCode,sales,IVCashr.InclVAT,IVCashr.NoTAXonVAT,sales);
            if (RepSpec.flags[1]!=0) then begin
              rs = IVCashrw.rowGP;
            end else begin
              FindSalesExVat(TMr,IVCashrw.VATCode,rowsum,IVCashr.InclVAT,IVCashr.NoTAXonVAT,rowsum);
              rs = rowsum;
            end;
            base = rs / nrofsalesman;
            CalcBonus(IVCashrw.ArtCode,Userr,IVCashr.CustCode,base,bprcnt,bonus,RepSpec.flags[7],RepSpec.vals0);
            if (IVCashr.InvType==kPOSInvoiceTypeCredit) then begin
              bonus = -bonus;
              rs = -rs;
              base = -base;
              sales = -sales;
              IVCashrw.BasePrice = -IVCashrw.BasePrice;
            end;
            if (BonusRowPrint(IVCashrw.Sum,bonus,RepSpec.UsedOnly,RepSpec.flags[6])) then begin
              ivcost = ivcost + IVCashrw.BasePrice*IVCashrw.Quant;
              ivbase = ivbase + base;
              ivsales = ivsales + sales;
              ivbonus = ivbonus + bonus;
              ivrowsum = ivrowsum + rowsum;
              switch (RepSpec.ArtMode) begin
                case 0:
                  PrintIVCashHeader(RepSpec,Userr.Code,IVCashr,oldSerNr);
                  StartFormat(15);
                  if (RepSpec.flags[9]!=0) then begin
                    if (RepSpec.flags[3]!=0) then begin
                      OutString(12,0,left(IVCashrw.Spec,25),false);
                    end;
                    OutVal(150,0,IVCashrw.Quant,M4Val,true);
                    OutVal(2,0,MulRateToBase1(IVCashr.CurncyCode,IVCashrw.Price,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff),M4Val,true);
                    OutVal(3,0,MulRateToBase1(IVCashr.CurncyCode,IVCashrw.Sum/IVCashrw.Quant,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff),M4Val,true);
                    OutVal(4,0,sales,M4Val,true);
                    OutVal(5,0,IVCashrw.BasePrice*IVCashrw.Quant,M4Val,true);
                    OutVal(6,0,base,M4Val,true);
                    OutVal(7,0,(base*100)/rowsum,M4Val,true);
                  end else begin
                    if (RepSpec.flags[3]!=0) then begin
                      OutString(115,0,left(IVCashrw.Spec,30),false);
                    end;
                    OutVal(350,0,rs,M4Val,true);
                    OutVal(7,0,base,M4Val,true);
                  end;
                  OutVal(8,0,bprcnt,M4Val,true);
                  OutVal(480,0,bonus,M4Val,true);
                  EndFormat;                  
              end;
              ivgp = ivgp + (base*100)/rowsum;
            end;
            
          end;
        end;
        switch (RepSpec.ArtMode) begin
          case 1:
            if (RepSpec.flags[8]!=0) then begin
                StartFormat(15);
                OutLongInt(0,"DblIVVc",IVCashr.SerNr,false);
                OutDate(55,0,IVCashr.InvDate,false);
                OutString(105,0,IVCashr.CustCode,false);
                OutString(165,0,Left(IVCashr.Addr0,20),false);
                EndFormat;
            end;
          otherwise
            if (ivbase!=0) or (ivbprcnt!=0) or (ivbonus!=0) then begin
              if (RepSpec.flags[9]!=0) then begin
                Gray_Divider(100,1);
              end else begin
                Gray_Divider(310,1);
              end;
              StartFormat(15);
              if (RepSpec.flags[9]!=0) then begin
                OutVal(4,0,ivsales,M4Val,true);
                OutVal(5,0,ivcost,M4Val,true);
                OutVal(6,0,ivbase,M4Val,true);
                //OutVal(7,0,(ivbase*100)/ivrowsum,M4Val,true);
                OutVal(7,0,ivgp,M4Val,true);
              end else begin
                OutVal(7,0,ivbase,M4Val,true);
              end;
              OutVal(8,0,(ivbonus/ivbase)*100,M4Val,true);
              OutVal(480,0,ivbonus,M4Val,true);
              EndFormat;
            end;
        end;
        usbase = usbase + ivbase;
        usbonus = usbonus + ivbonus;
        uscost = uscost + ivcost;
        ussales = ussales + ivsales;
        usgp = usgp + ivgp;        
      end;
    end;
  end;
  if (firstivf==false) then begin
    BonusResults(RepSpec,Userr.Code,Userr.Name,usbase,ussales,usbonus,uscost,usrowsum);   
  end;
  totbase = totbase + usbase;
  totbonus = totbonus + usbonus;
  totcost = totcost + uscost;
  totsales = totsales + ussales;
  totgp = totgp + usgp;        
  return;
end;
  
global
procedure POSBonusRn(record RcVc RepSpec)
begin
  record UserVc Userr;
  Boolean found,testf;
  string 20 frus,tous;
  Integer rw;
  string 255 tstr;
  val totbase,totbonus,totcost,totsales,totgp;
  
  frus = FirstInRange(RepSpec.f1,20);
  tous = LastInRange(RepSpec.f1,20);

  StartReportJob(USetStr(38560));
  rw = 1;
  if ((blankdate(RepSpec.d1)) and (blankdate(RepSpec.d2))) then begin
    RepSpec.d1 = RepSpec.sStartDate;
    RepSpec.d2 = RepSpec.sEndDate;
  end;
  HT2Per(RepSpec.d1,RepSpec.d2,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTSaleMan(RepSpec.f1,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (RepSpec.ArtMode==0) then begin
    tstr = USetStr(4916);
  end else begin
    tstr = USetStr(4917);
  end;  
  Header(rw,tstr,0);
  switch (RepSpec.flags[2]) begin
    case 0: tstr = USetStr(38561);
    case 1: tstr = USetStr(38562);
    case 2: tstr = USetStr(38563);
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;
  
  SetRepCol(2,190);
  SetRepCol(3,240);
  SetRepCol(4,285);
  SetRepCol(5,325);
  SetRepCol(6,375);
  SetRepCol(7,410);
  SetRepCol(8,440);

  StartFormat(15)
  if (RepSpec.ArtMode==0) then begin
    OutString(0,0,USetStr(4902),false);
    OutString(55,0,USetStr(5205),false); 
    if (RepSpec.flags[3]!=0) then begin
      OutString(115,0,USetStr(4923),false);
    end;  
    if (RepSpec.flags[4]!=0) then begin
      OutString(235,0,USetStr(2354),false);
    end;  
    if (RepSpec.flags[9]!=0) then begin
      OutString(2,0,USetStr(17574),true); 
      OutString(3,0,USetStr(17575),true); 
      if (RepSpec.flags[1]!=0) then begin
        OutString(4,0,USetStr(4899),true); 
      end else begin
        OutString(4,0,USetStr(4900),true); 
      end;
      OutString(5,0,USetStr(4929),true); 
      OutString(6,0,USetStr(17573),true); 
      if (RepSpec.flags[1]==1) then begin 
        OutString(7,0,USetStr(17571),true); 
      end;
    end else begin
      if (RepSpec.flags[1]==0) then begin
        OutString(350,0,USetStr(4900),true); 
      end else begin
        OutString(350,0,USetStr(17570),true); 
      end;
      OutString(7,0,USetStr(17573),true); 
    end;
    OutString(8,0,USetStr(4904),true);
  end else begin
    OutString(0,0,USetStr(4908),false);
    if (RepSpec.flags[9]!=0) then begin
      OutString(4,0,USetStr(4899),true); 
      OutString(5,0,USetStr(17572),true);
      OutString(6,0,USetStr(17573),true); 
    end else begin
      OutString(315,0,USetStr(17573),true); 
    end;
    if (RepSpec.flags[1]==0) then begin
      OutString(7,0,USetStr(4904),true); 
    end else begin
      OutString(7,0,USetStr(17570),true); 
    end;
  end;
  OutString(480,0,USetStr(4905),true);   
  EndFormat;
  Gray_Divider(0,1);

  found = true;
  Userr.Code = frus;
  while (LoopMain(Userr,1,found)) begin
    if (nonblank(RepSpec.f1)) then begin
      if (Userr.Code>tous) then begin found = false; end;
    end;
    if (found) then begin
      UserBonus(RepSpec,Userr,totbase,totbonus,totcost,totsales,totgp);
    end;
  end;
  BonusResults(RepSpec,"",USetStr(4906),totbase,totsales,totbonus,totcost,blankval);   
  EndJob;
  return;
end;