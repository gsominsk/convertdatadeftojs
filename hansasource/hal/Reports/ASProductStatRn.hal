procedure PerpareStoreArray(string frst,string tost,var Array string astore,var Array string astorename,var Integer acnt)
begin
  record ASStoreVc ASSr;
  Boolean found;
  
  acnt = 0;
  found = true;
  ASSr.Code = frst;
  while (LoopMain(ASSr,1,found)) begin
    if (nonblank(tost)) then begin
      if (ASSr.Code>tost) then begin found = false; end;
    end;
    if (found) then begin
      astore[acnt] = ASSr.Code;
      astorename[acnt] = ASSr.Comment;
      acnt = acnt + 1;
    end;
  end;
  return;
end;

global
procedure ASProductStatRn(record RcVc RepSpec)
begin
  record ASProductStatusVc ASPSr;
  record ASCountryVc ASCr;
  record ASProductVc ASPr;
  Boolean found,testf;
  string 255 frcp,tocp;
  string 255 frpr,topr;
  string 255 frst,tost;
  string 255 lastascountry;
  Array string 255 astore;
  Array string 255 astorename;
  Integer i,acnt,pos;
  vector LongInt vstorestat;
  vector LongInt vsubmissionstat;
  
  StartReportJob(USetStr(31240));
  EndHeader;
  frpr = FirstInRange(RepSpec.f1,20);
  topr = LastInRange(RepSpec.f1,20);
  frst = FirstInRange(RepSpec.f2,20);
  tost = LastInRange(RepSpec.f2,20);
  frcp = FirstInRange(RepSpec.f3,20);
  tocp = LastInRange(RepSpec.f3,20);

  PerpareStoreArray(frst,tost,astore,astorename,acnt);
  vstorestat[0] = 0; vstorestat[1] = 0; vstorestat[2] = 0; vstorestat[3] = 0;
  vsubmissionstat[0] = 0; vsubmissionstat[1] = 0;
  found = true;
  ASPSr.ASCountry = frcp;
  while (LoopKey("ASCountry",ASPSr,1,found)) begin
    if (nonblank(RepSpec.f3)) then begin
      if (ASPSr.ASCountry>tocp) then begin found = false; end;
    end;
    if (found) then begin
      testf = true;
      if (nonblank(RepSpec.f1)) then begin
        if (ASPSr.ASProduct<frpr) then begin testf = false; end;
        if (ASPSr.ASProduct>topr) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.f2)) then begin
        if (ASPSr.ASStore<frst) then begin testf = false; end;
        if (ASPSr.ASStore>tost) then begin testf = false; end;
      end;
      if (blank(ASPSr.ASCountry)) then begin testf = false; end;
      if (testf) then begin
        if (ASPSr.ASCountry!=lastascountry) then begin
          if (nonblank(lastascountry)) then begin
            Gray_Divider(0,1);
            StartFormat(15);
            EndFormat;
          end;
          ASCr.Code = ASPSr.ASCountry;
          ReadFirstMain(ASCr,1,true);
          StartFormat(15);
          OutString(0,0,ASPSr.ASCountry & "   " & ASCr.Comment,false);
          EndFormat;
          StartFormat(15);
          OutString(0,0,USetStr(31241),false);
          for (i=0;i<acnt;i=i+1) begin
            OutString(100 + i*80,0,astorename[i],false);           
          end;
          EndFormat;
          Gray_Divider(0,1);
        end;
        ASPr.Code = ASPSr.ASProduct;
        ReadFirstMain(ASPr,1,true);
        StartFormat(15);
        OutString(0,0,ASPr.Comment,false);
        pos = 0;
        for (i=0;i<acnt;i=i+1) begin
          if (astore[i]==ASPSr.ASStore) then begin
            pos = 100 + i*80;
            i = acnt;
          end;
        end;
        OutStringID(pos,"DblASProductVc",StringFromSet(558,ASPSr.StoreStatus),false,ASPSr.SerNr);
        EndFormat;
        vstorestat[ASPSr.StoreStatus] = vstorestat[ASPSr.StoreStatus] + 1;
        vsubmissionstat[ASPSr.SubmissionStatus] = vsubmissionstat[ASPSr.SubmissionStatus] + 1;
        lastascountry = ASPSr.ASCountry;
      end;
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(31258),false);
  OutString(200,0,USetStr(32774),true);
  EndFormat;
  Black_Divider(0,200);  
  StartFormat(15);
   OutString(0,0,StringFromSet(558,kAppStoreProductStoreForSale),false);
   OutLongInt(200,0,vstorestat[kAppStoreProductStoreForSale],true);
  EndFormat;
  StartFormat(15);
   OutString(0,0,StringFromSet(558,kAppStoreProductStoreAccepted),false);
   OutLongInt(200,0,vstorestat[kAppStoreProductStoreAccepted],true);
  EndFormat;
  StartFormat(15);
   OutString(0,0,StringFromSet(558,kAppStoreProductStoreNotAccepted),false);
   OutLongInt(200,0,vstorestat[kAppStoreProductStoreNotAccepted],true);
  EndFormat;
//  StartFormat(15);
//   OutString(0,0,StringFromSet(558,kAppStoreProductStoreNeverSubmit),false);
//   OutLongInt(200,0,vstorestat[kAppStoreProductStoreNeverSubmit],true);
//  EndFormat;
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  StartFormat(15);
  OutString(0,0,USetStr(31250),false);
  OutString(200,0,USetStr(32774),true);
  EndFormat;
  Black_Divider(0,200);    
   OutString(0,0,StringFromSet(559,kAppStoreProductSubmissionStatusNone),false);
   OutLongInt(200,0,vsubmissionstat[kAppStoreProductSubmissionStatusNone],true);
  EndFormat;
  StartFormat(15);
   OutString(0,0,StringFromSet(559,kAppStoreProductSubmissionStatusReview),false);
   OutLongInt(200,0,vsubmissionstat[kAppStoreProductSubmissionStatusReview],true);
  EndFormat;
  EndJob;
  return;
end;