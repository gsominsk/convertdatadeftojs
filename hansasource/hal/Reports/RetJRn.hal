external procedure HTReasons(string,string,var string);
external procedure HT2Per(Date, Date,var string);
external procedure HTDetailLevel(Integer, var string);
external procedure HTCusts(string, string, var string);
external procedure HTOKF(Integer, Integer, var string); 
external procedure HTNr(Integer,Integer,LongInt,LongInt,var string);

global
procedure RetGoodsJRn(record RcVc RepSpec)
begin
  record RetVc Retr;
  Boolean TrHs;
  Boolean testf;
  LongInt frorder,toorder;
  LongInt frsvo,tosvo;
  LongInt snfr,snto;
  String 60 frcc,tocc;
  String 255 ckey;
  Integer keys;
  val retq,retv,ort,rowt;
  row RetVc Retrw;
  Integer i;
  Integer rwcnt;
  string 255 tstr;
  Integer rw;
  record ORVc ORr;
  val totqty,totcost;

  snfr = FirstInRange(RepSpec.f1,20);
  snto = LastInRange(RepSpec.f1,20);
  frorder = FirstInRange(RepSpec.TransStr,20);
  toorder =  LastInRange(RepSpec.TransStr,20);
  frcc = FirstInRange(RepSpec.f2,20);
  tocc = LastInRange(RepSpec.f2,20);
  frsvo = FirstInRange(RepSpec.f4,20);
  tosvo =  LastInRange(RepSpec.f4,20);

  StartReportJob(USetStr(10780));    
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTDetailLevel(RepSpec.ArtMode,tstr);
  Header(rw,tstr,0);
  if blank(RepSpec.f1) then begin
    tstr = USetStr(10781);
  end else begin
    tstr = USetStr(10782) & ": " & RepSpec.f1;
  end;
   
  Header(rw,tstr,1);
  rw = rw + 1;
  HTNr(2589,2584,frorder,toorder,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTCusts(frcc,tocc,tstr);
  Header(rw,tstr,1);
  rw = rw + 1; 
  HTOKF(RepSpec.flags[1],RepSpec.flags[2],tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTReasons(RepSpec.AccStr,RepSpec.AccStr,tstr);
  Header(rw,tstr,0);
  if (nonblank(RepSpec.f3)) then begin
    tstr = USetStr(2768);
    tstr = tstr & ": " & RepSpec.f3;
     Header(rw,tstr,1);
    rw = rw + 1;
  end;
  
  EndHeader;
  
  SetRepCol(2,60);
  SetRepCol(3,130);
  SetRepCol(4,200);
  SetRepCol(5,260);
  SetRepColBiDi(6,420,460);
  SetRepColBiDi(7,480,520);

  StartFormat(15);
  OutString(0,0,USetStr(10783),false);
  OutString(2,0,USetStr(10784),false);
  OutString(3,0,USetStr(10785),false);
  OutString(4,0,USetStr(10786),false);
  OutString(5,0,USetStr(10787),false);
  OutStringAdjust(7,0,USetStr(2928),true,M4Val);
  EndFormat;
    
  if RepSpec.ArtMode==1 then begin
    StartFormat(15);
    OutString(0,0,USetStr(10788),false);
    OutString(2,0,USetStr(10789),false);
    OutString(4,0,USetStr(10790),false);
    OutString(5,0,USetStr(10791),false);
    OutStringAdjust(6,0,USetStr(10792),true,M4Val);
    OutStringAdjust(7,0,USetStr(10793),true,M4Val);
    EndFormat;
  end;
  Black_Divider(0,1);

  ckey = "SerNr";
  Retr.SerNr = snfr;
  keys = 1;

  TrHs = true;

  while LoopKey(ckey,Retr,keys,TrHs) begin
  testf = true;
   
  if (snto<>-1) then begin
    if (Retr.SerNr>snto) then begin
      TrHs = false;
    end;
  end;
  if nonblank(RepSpec.f2) then begin
    if ((tocc<Retr.CustCode) or (frcc>Retr.CustCode)) then begin
      testf = false;
    end;
  end;
  if (TrHs and testf) then begin
    if nonblank(RepSpec.TransStr) then begin
      if ((Retr.OrdNr<frorder) or (Retr.OrdNr>toorder)) then begin
        testf = false;
      end;
    end;
    if (DateInRange(Retr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
      testf = false;
    end;
        
    if ((RepSpec.flags[1]==0) and (Retr.OKFlag==0)) then begin
      testf = false;
    end;
    if ((RepSpec.flags[2]==0) and (Retr.OKFlag!=0)) then begin
      testf = false;
    end;
//locationperrow    
    if ((nonblank(RepSpec.f3)) and (RepSpec.f3<>Retr.Location)) then begin 
       testf = false; 
    end;
    if (nonblank(RepSpec.AccStr)) then begin
      if (RepSpec.AccStr!=Retr.Reason) then begin testf = false; end;
    end;
    if (nonblank(RepSpec.f4)) then begin
      if ((Retr.SVONr<frsvo) or (Retr.SVONr>tosvo)) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      retq = blankval;
      retv = blankval;
      rwcnt = MatRowCnt(Retr);
      for (i=0; i<rwcnt; i=i+1) begin
        MatRowGet(Retr,i,Retrw);
        retq = retq + Retrw.Quant;
        retv = retv + Retrw.CostPrice*Retrw.Quant;
      end;
      StartFormat(15);
      OutLongInt(0,"DblRet",Retr.SerNr,false);
      OutDate(2,0,Retr.TransDate,false);
      OutLongInt(3,"DblORVc",Retr.OrdNr,false);
      OutString(4,0,Retr.CustCode,false);
      OutString(5,0,Retr.CustName,false);
      OutVal(6,0,retv,M4Val,true);
      OutVal(7,0,retq,M4Val,true);
      EndFormat;
      totqty = totqty + retq;
      totcost = totcost + retv;
      if (RepSpec.ArtMode==1) then begin
        for (i=0; i<rwcnt; i=i+1) begin
          MatRowGet(Retr,i,Retrw);
          Gray_Divider(0,1); 
          StartFormat(15);
          OutString(0,0,Retrw.ArtCode,false);
          OutString(2,0,Retrw.Spec,false);
          OutValBiDi(4,0,Retrw.UPrice,M4Val,false,300);
          OutString(5,0,Retrw.Extra,false);
          OutVal(6,0,Retrw.CostPrice,M4Val,true);
          OutVal(7,0,Retrw.Quant,M4Qty,true);
          EndFormat;             
        end;
      end;       
      if (RepSpec.ArtMode==1) then begin 
        Gray_Divider(4,1);    
        StartFormat(15);
        OutString(4,0,USetStr(10794),false);
        OutVal(6,0,retv,M4Val,true);
        OutVal(7,0,retq,M4Val,true);
        EndFormat;  
        Black_Divider(0,1); 
      end;      
    end;
  end;
  end;
  Gray_Divider(0,1); 
  StartFormat(15);
  OutVal(6,0,totcost,M4Val,true);
  OutVal(7,0,totqty,M4Qty,true);
  EndFormat;  
  EndJob;
  return;
end;



