external procedure PrintCurTotalsRow(record SMVc,Integer,Integer,Integer,Integer,Integer);
external function roundmode SetRoundModeD(Integer);
external function Boolean COCUServiceIntTest(Boolean,record RcVc,LongInt,LongInt,string,string,record COCUServiceVc);
external function Boolean BuildIVFromCOCUServiceRep(record RcVc,record COCUServiceVc,var record IVVc,var LongInt);
external function string 255 CreateInvoiceNumber(LongInt,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external procedure HT2Per(Date, Date , var string);
external procedure AddCurTotalsRow(string,val,val,val,var record SMVc);
external function Boolean CheckCustomerBlocked(string);
external procedure HTVends(string, string, var string); 
external procedure HTObj(string, var string);
external function Boolean HasMultiCurrency();
external function string 255 SetCompanyLanguage();
external procedure ResetCompanyLanguage(string);

procedure PrintCurTotalsRow(record SMVc CurTotalsr,Integer snr,Integer curcol,Integer col1,Integer col2,Integer col3)
BEGIN
  row SMVc CurTotalsrw;
  Integer i,rwcnt;
    
  rwcnt = MatRowCnt(CurTotalsr);    
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CurTotalsr,i,CurTotalsrw);
    if ((CurTotalsrw.DebVal!=blankval) or (CurTotalsrw.DebVal2!=blankval) or (CurTotalsrw.CurDebVal!=blankval)) then begin
      StartFormat(15);
       if (snr!=-1) then begin
         OutString(130,0,USetStr(snr),false);
       end else begin
         OutString(curcol,0,CurTotalsrw.CurncyCode,false);
       end;
       if ((col1>-1) and (CurTotalsrw.DebVal!=blankval)) then begin    
         OutVal(col1,0,CurTotalsrw.DebVal,M4Val,true);
       end;
       if ((col2>-1) and (CurTotalsrw.DebVal2!=blankval)) then begin    
         OutVal(col2,0,CurTotalsrw.DebVal2,M4Val,true);
       end;  
       if ((col3>-1) and (CurTotalsrw.CurDebVal!=blankval)) then begin    
         OutVal(col3,0,CurTotalsrw.CurDebVal,M4Val,true);
       end;  
       if (snr!=-1) then begin
         OutString(480,0,CurTotalsrw.CurncyCode,true);
       end;  
      EndFormat;
    end;  
  end;
  RETURN;
END;

function Boolean HansaMailExcludeDaughterCompany(Integer IncDaughter,string compcode)
begin
  Boolean res;
  Integer compnr;
  
  compnr = StringToInt(compcode);
  switch (IncDaughter) begin
    case 1:
      if (compnr>=1) and (compnr<=23) then begin
        res = true;
      end;
      if (compnr>=29) and (compnr<=35) then begin
        res = true;
      end;
      if (compnr>=41) and (compnr<=43) then begin
        res = true;
      end;
      if (compnr>=45) and (compnr<=56) then begin
        res = true;
      end;
      if (compnr>=59) and (compnr<=61) then begin
        res = true;
      end;
      if (compnr>=68) and (compnr<=73) then begin
        res = true;
      end;
      if (compnr>=75) and (compnr<=78) then begin
        res = true;
      end;
      if (compnr>=80) and (compnr<=84) then begin
        res = true;
      end;
      if (compnr>=87) and (compnr<=88) then begin
        res = true;
      end;

      switch (compcode) begin
        case "26": res = true;
        case "27": res = true;
        case "38": res = true;    
        case "94": res = true;    
        case "100": res = true;    
        case "103": res = true; //Kenya
        case "105": res = true; //Zimbabve
      end;
    case 2:
      if (compnr>=1) and (compnr<=18) then begin
        res = true;
      end;
      if (compnr>=20) and (compnr<=23) then begin
        res = true;
      end;
      if (compnr>=29) and (compnr<=35) then begin
        res = true;
      end;
      if (compnr>=41) and (compnr<=43) then begin
        res = true;
      end;
      if (compnr>=45) and (compnr<=56) then begin
        res = true;
      end;
      if (compnr>=60) and (compnr<=61) then begin
        res = true;
      end;
      if (compnr>=75) and (compnr<=78) then begin
        res = true;
      end;
      if (compnr>=82) and (compnr<=84) then begin
        res = true;
      end;

      switch (compcode) begin
        case "27": res = true;
        case "38": res = true;    
        case "69": res = true;    
        case "80": res = true;    
        case "88": res = true;    
        case "100": res = true;    
      end;

  end;
  HansaMailExcludeDaughterCompany = res;
  return;
end;

procedure COCUServiceRepInvoiceOverview(record BaseCurBlock bascur,LongInt contractnr,record IVVc IVr)
begin
  val sum1,sum4;
  
  StartFormat(15);
//  OutString(0,0,CreateInvoiceNumber(IVr.SerNr),false);
  OutString(0,"DblCOCUServiceVc",contractnr,false);
  OutString(50,"DblCUVc",IVr.CustCode,false);
  OutString(100,0,IVr.Addr0,false);
  OutVal(220,0,IVr.Sum1,M4Val,true);
  OutVal(300,0,IVr.Sum4,M4Val,true);
  if (bascur.BaseCur1=="EUR") then begin
    OutVal(380,0,IVr.Sum1,M4Val,true);
    OutVal(460,0,IVr.Sum4,M4Val,true);
  end;
  if (bascur.BaseCur2=="EUR") then begin
    OutVal(380,0,MulRateToBase2(IVr.CurncyCode,IVr.Sum1,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff),M4Val,true);
    OutVal(460,0,MulRateToBase2(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff),M4Val,true);
  end;
  EndFormat;
  return;
end;

procedure COCUServiceRepInvoice(LongInt contractnr,record IVVc IVr,Integer com)
begin
  record ARVc ARr;
  row IVVc IVrw;
  string 255 tstr,t2;
  Integer i,rwcnt;
  val qty,sum1,sum3;

  qty = 0;
  StartFormat(15);
  OutStringID(0,"DblCOCUServiceVc",CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr),false,contractnr);
  tstr = "";
  if (IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeNormalSpecialSales) then begin
    tstr = USetStr(1803);
  end;
  if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
    tstr = USetStr(1804);
  end;
  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
    tstr = USetStr(1805);
  end;
  if (IVr.InvType==kInvoiceTypeInterest) then begin
    tstr = USetStr(1810);
  end;
  if (IVr.InvType==kInvoiceTypeDebit) then begin
    tstr = USetStr(23250);
  end;
  if (IVr.InvType==kInvoiceTypePrepayment) then begin
    tstr = USetStr(1876);
  end;
  OutString(50,0,tstr,false);
  OutDate(130,0,IVr.InvDate,false);
  OutDate(220,0,IVr.PayDate,false);
  OutString(270,0,IVr.pdComment,false);
  OutLongInt(350,0,IVr.OrderNr,false);
  if (IVr.OKFlag==0) then begin
    OutString(480,0,USetStr(2366),true);
  end;
  EndFormat;
  StartFormat(15);
  OutString(50,"DblCUVc",IVr.CustCode,false);
  OutString(220,0,IVr.Addr0,false);
  EndFormat;
  StartFormat(15);
  OutString(50,0,IVr.CustCat,false);
  OutString(220,0,IVr.Addr1,false);
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(50,0,IVr.OurContact,false);
  OutString(220,0,IVr.Addr2,false);
  EndFormat;
  if (nonblank(IVr.Addr3)) then begin
    StartFormat(15);
    OutString(220,0,IVr.Addr3,false);
    EndFormat;
  end;
  if (nonblank(IVr.ClientContact)) then begin
    StartFormat(15);
    OutString(220,0,IVr.ClientContact,false);
    EndFormat;
  end;
  if (nonblank(IVr.CurncyCode)) then begin
    StartFormat(15);
    OutString(460,0,IVr.CurncyCode,true);
    EndFormat;
  end;
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp==3) then begin
      StartFormat(15);
      t2 = USetStr(1807);
      tstr = IVrw.OrdRow;
      t2 = t2 & tstr;
      OutString(130,0,t2,false);
      EndFormat;
    end;
    if ((IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==4)) then begin
      StartFormat(15);
      qty = qty + IVrw.Quant;
      OutString(20,0,IVrw.ArtCode,false);
      OutVal(104,0,IVrw.Quant,M4UVal,true);
      OutString(110,0,IVrw.Spec,false);
      OutVal(350,0,IVrw.Price,M423Val,true);
      OutVal(380,0,IVrw.vRebate,M41Val,true);
      OutVal(460,0,IVrw.Sum,M4Val,true);
      OutString(480,0,IVrw.VATCode,true);
      EndFormat;
    end;
    if (IVrw.stp==5) then begin
      StartFormat(15);
      OutString(20,0,USetStr(4869),false);
      OutString(130,0,IVrw.Spec,false);
      OutVal(460,0,IVrw.Sum,M4Val,true);
      OutString(480,0,IVrw.VATCode,true);
      EndFormat;
    end;
  end;
  if (IVr.FrPrice<>0) then begin
    StartFormat(15);
    OutString(20,0,IVr.FrItem,false);
    OutString(104,0,"1",true);
    OutVal(350,0,IVr.FrPrice,M4Val,true);
    OutVal(460,0,IVr.FrPrice,M4Val,true);
    OutString(480,0,IVr.FrVATCode,true);
    EndFormat;
  end;
  Black_Divider(380,460);
  StartFormat(15);
  if (IVr.ExportFlag!=0) then begin
    OutString(20,0,USetStr(2367),false);
  end;
  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
    sum1 = -IVr.Sum1;
    sum3 = -IVr.Sum3;
  end else begin
    sum1 = IVr.Sum1;
    sum3 = IVr.Sum3;
  end;
  OutString(70,0,USetStr(2645),false);
  OutString(150,0,USetStr(3185),false);
  OutString(230,0,USetStr(6707),false);
  OutVal(460,0,sum1,M4Val,true);//280
  OutVal(104,0,qty,M4UVal,true);
  OutString(150,0,IVr.Objects,false);
  OutVal(230,0,sum3,M4Val,false);

  EndFormat;
  if (com<>0) then begin
    if (nonblank(IVr.InvComment)) then begin
      StartFormat(15);
      OutString(0,0,IVr.InvComment,false);
      EndFormat;
    end;
  end;
  ARr.InvoiceNr = IVr.SerNr;
  if (ReadFirstMain(ARr,1,true)) then begin
    sum1 = IVr.Sum4 - ARr.RVal;
  end else begin
    if (IVr.OKFlag==1) then begin
      sum1 = IVr.Sum4;
    end else begin
      sum1 = 0;  
    end;  
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(20,0,USetStr(2432),false);
  OutVal(460,0,sum1,M4Val,true);
  EndFormat;  
  return;
end;

procedure RunCOCUServiceInvRn(record RcVc RepSpec,
                              var val cnet,var val cneteur,var val ctot,var val ctoteur,var record SMVc CurTotalsr)
BEGIN
  record COCUServiceVc COCUServicer;
  record IVVc IVr;
  Boolean TrHs,testf;
  string 255 frcu,tocu;
  LongInt frco,toco;
  val tot,net;
  string 255 ckey;
  Integer keys,detailinv;
  string 255 tstr,oldlang;
  Integer rw;
  LongInt ivcnt,invnr;
  Integer invDtype,invDays;
  Integer shortestline,oldshortestline;
  record SRBlock SRRec;
  record BaseCurBlock bascur;
  LongInt oldser;

  oldlang = SetCompanyLanguage;

  BlockLoad(SRRec);
  BlockLoad(bascur);
  frcu = FirstInRange(RepSpec.f1,20);
  tocu = LastInRange(RepSpec.f1,20);
  frco = FirstInRange(RepSpec.f2,20);
  toco = LastInRange(RepSpec.f2,20);  
  if (RepSpec.flags[0]==0) then begin
    ckey = "SerNr";
    keys = 1;
  end else begin
    ckey = "CustCode";
    COCUServicer.CustCode = frcu;
    keys = 2;
  end;
  COCUServicer.SerNr = frco;
  TrHs = true;
  while (LoopKey(ckey,COCUServicer,keys,TrHs)) begin
    if (RepSpec.flags[0]==0) then begin
      if (toco!=-1) then begin
        if (COCUServicer.SerNr>toco) then begin TrHs = false; end;
      end;  
    end;
    if (RepSpec.flags[0]==1) then begin
      if (nonblank(RepSpec.f1)) then begin
        if (tocu<COCUServicer.CustCode) then begin TrHs = false; end;
        if (frcu>COCUServicer.CustCode) then begin TrHs = false; end;
      end;
    end;
    testf = COCUServiceIntTest(TrHs,RepSpec,frco,toco,frcu,tocu,COCUServicer);
    if (testf) then begin
      if (BuildIVFromCOCUServiceRep(RepSpec,COCUServicer,IVr,oldser)) then begin
        switch (RepSpec.ArtMode) begin
          case 0:
            Gray_Divider(0,1);
            COCUServiceRepInvoice(COCUServicer.SerNr,IVr,0);
          case 2:
            COCUServiceRepInvoiceOverview(bascur,COCUServicer.SerNr,IVr);
        end;
        AddCurTotalsRow(IVr.CurncyCode,IVr.Sum1,IVr.Sum4,blankval,CurTotalsr);
        tot = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
        ctot = ctot + tot;
        net = MulRateToBase1(IVr.CurncyCode,IVr.Sum1,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
        cnet = cnet + net;
        if (RepSpec.IncDaughter!=0) then begin
          if (bascur.BaseCur1=="EUR") then begin
            cneteur = cneteur + net;
            ctoteur = ctoteur + tot;
          end else begin
            if (bascur.BaseCur2=="EUR") then begin
              tot = MulRateToBase2(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
              ctoteur = ctoteur + tot;
              net = MulRateToBase2(IVr.CurncyCode,IVr.Sum1,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
              cneteur = cneteur + net;
            end;
          end;
        end;
      end;
    end;
  end;
  ResetCompanyLanguage(oldlang);

  return;
end;

function boolean IncludeToHansaMailReport(string compcode, record HMCOCUServiceBlock HMCOCUServiceBl,integer IncDaughter)
begin
  row HMCOCUServiceBlock HMCOCUServicerw;
  boolean res;
  integer i,rwcnt;
  
  res = false;
  rwcnt = MatRowCnt(HMCOCUServiceBl);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(HMCOCUServiceBl,i,HMCOCUServicerw);
    if (HMCOCUServicerw.CompCode==compcode) then begin
      if (IncDaughter==1) and (HMCOCUServicerw.CompType==0) then begin 
        res = true;
        i = rwcnt;
      end;  
      if (IncDaughter==2)  then begin 
        res = true;
        i = rwcnt;
      end; 
    end;
  end;  
      
  IncludeToHansaMailReport = res;
  return;
end;  
  

function Boolean TestDaughterComp(string compcode,record DaughterCompBlock DCb)
begin
  Boolean res;
  row DaughterCompBlock DCrw;
  Integer i,rwcnt;

  res = true;
  rwcnt = MatRowCnt(DCb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(DCb,i,DCrw);
    if (DCrw.CompCode==compcode) then begin
      if (nonblankdate(DCrw.StartDate)) then begin
        if (DCrw.StartDate>CurrentDate) then begin res = false; end;
      end;
      if (nonblankdate(DCrw.EndDate)) then begin
        if (DCrw.EndDate<CurrentDate) then begin res = false; end;
      end;
      i = rwcnt;
    end;
  end;
  TestDaughterComp = res;
  return;
end;


global
procedure COCUServiceInvRn(record RcVc RepSpec)
BEGIN
  record COCUServiceVc COCUServicer;
  record IVVc IVr;
  record SMVc CurTotalsr;
  Boolean TrHs,testf;
  string 255 frcu,tocu;
  LongInt frco,toco;
  val TotSum,TotSumeur;
  val NetSum,t,NetSumeur;
  string 255 ckey;
  Integer keys,detailinv;
  string 255 tstr;
  Integer rw;
  LongInt ivcnt,invnr;
  Integer invDtype,invDays;
  Integer shortestline,oldshortestline;
  record SRBlock SRRec;
  LongInt oldser;
  record CYBlock CYb;
  record CompaniesBlock Compb;
  row CompaniesBlock Compbrw;
  Integer i,rwcnt;
  Integer oldcomp;
  val cnet,cneteur,ctot,ctoteur;
  record RcVc OrgRepSpec;
  record ConsolidationBlock Consb;
  record DaughterCompBlock DCb;
  record HMCOCUServiceBlock HMCOCUServiceBl;
  
  BlockLoad(HMCOCUServiceBl);
  BlockLoad(SRRec);
  BlockLoad(DCb);
  if (RepSpec.IncDaughter!=0) then begin
    StartReportJob("Consolidated " & USetStr(5640));
  end else begin
    StartReportJob(USetStr(5640));
  end;
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (nonblank(RepSpec.f3)) then begin
    tstr = USetStr(5641);
    tstr = tstr & "  ";
    tstr = tstr & RepSpec.f3;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f4)) then begin
    HTVends(RepSpec.f4, RepSpec.f4,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.ObjStr)) then begin
    HTObj(RepSpec.ObjStr,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f7)) then begin
    tstr = "Exclude Class: " & RepSpec.f7;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  EndHeader;
  SetRepCol(2,430);
  RecordNew(CurTotalsr); // Should use the new BeginCurncyTotals made in HAL
  frcu = FirstInRange(RepSpec.f1,20);
  tocu = LastInRange(RepSpec.f1,20);
  frco = FirstInRange(RepSpec.f2,20);
  toco = LastInRange(RepSpec.f2,20);  
  if (RepSpec.IncDaughter==0) and (RepSpec.flags[29]==0) then begin
    RunCOCUServiceInvRn(RepSpec,NetSum,cneteur,TotSum,ctoteur,CurTotalsr);
    Gray_Divider(0,1);
    StartFormat(15);
    OutVal(480,0,NetSum,M4Val,true);
    EndFormat;
    StartFormat(15);
    OutVal(480,0,TotSum,M4Val,true);
    EndFormat;
  end else begin
    StartFormat(15);
    OutString(240,0,"Local Currency",false);
    OutString(400,0,"EUR",false);
    EndFormat;
    switch (RepSpec.ArtMode) begin
      case 2:
        StartFormat(15);
        OutString(0,0,"Contract",false);
        OutString(50,0,"Customer",false);
        OutString(100,0,"Name",false);
        OutString(230,0,"Inv. Date",false);
        OutString(280,0,"Due Date",false);
        OutString(380,0,"Net",true);
        OutString(460,0,"Brutto",true);
        EndFormat;
      otherwise
        StartFormat(15);
        OutString(0,0,"Company",false);
        OutString(220,0,"Net",true);
        OutString(300,0,"Brutto",true);
        OutString(380,0,"Net",true);
        OutString(460,0,"Brutto",true);
        EndFormat;
    end;
    Gray_Divider(0,1);

    RecordCopy(orgRepSpec,RepSpec);
    oldcomp = CurrentCompany;
    BlockLoad(Compb);
    rwcnt = MatRowCnt(Compb);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Compb,i,Compbrw);
      testf = true;
/*      
      if (HansaMailExcludeDaughterCompany(RepSpec.IncDaughter,Compbrw.CompCode)) then begin
        testf = false;
      end;
*/      
      //new check from a new setting
//      testf = TestDaughterComp(Compbrw.CompCode,DCb);
//must be possible to run from any company
      if (testf) then begin
        if (IncludeToHansaMailReport(Compbrw.CompCode,HMCOCUServiceBl,RepSpec.IncDaughter)==false) then begin 
          testf = false;
        end;
      end;
      if (testf) then begin
//      if (RepSpec.flags[29]==0 or RepSpec.flags[29]==i+1) then begin
      if (RepSpec.flags[29]==0 or RepSpec.flags[29]==StringToInt(Compbrw.CompCode)) then begin
        if (SetCompanyCode(Compbrw.CompCode,false)) then begin
          RecordCopy(RepSpec,orgRepSpec);
          BlockLoad(Consb);
          RepSpec.basecurncy = Consb.ConsCrncy;
          cnet = blankval; cneteur = blankval;
          ctot = blankval; ctoteur = blankval;
          RunCOCUServiceInvRn(RepSpec,cnet,cneteur,ctot,ctoteur,CurTotalsr);
          if (cnet!=0) or (cneteur!=0) or (ctot!=0) or (ctoteur!=0) then begin
          if (RepSpec.IncDaughter!=0) then begin
            StartFormat(15);
            OutStringID(0,"DblConsCOCUSIRn",Compbrw.CompName,false,StringToInt(Compbrw.CompCode));
            OutVal(220,0,Round(cnet,SetRoundModed(0)),M4UVal,true);
            OutVal(300,0,Round(ctot,SetRoundModed(0)),M4UVal,true);
            OutVal(380,0,Round(cneteur,SetRoundModed(0)),M4UVal,true);
            OutVal(460,0,Round(ctoteur,SetRoundModed(0)),M4UVal,true);
            EndFormat;

            NetSum = NetSum + cnet;
            NetSumeur = NetSumeur + cneteur;
            TotSum = TotSum + ctot;
            TotSumeur = TotSumeur + ctoteur;
          end;
          end;
        end;
      end;
      end;
    end;  
    Gray_Divider(0,1);
    StartFormat(15);
    OutVal(220,0,Round(NetSum,SetRoundModed(0)),M4UVal,true);
    OutVal(300,0,Round(TotSum,SetRoundModed(0)),M4UVal,true);
    OutVal(380,0,Round(NetSumeur,SetRoundModed(0)),M4UVal,true);
    OutVal(460,0,Round(TotSumeur,SetRoundModed(0)),M4UVal,true);
    EndFormat;
    ResetCompany(oldcomp);
  end;
  Gray_Divider(0,1);
  PrintCurTotalsRow(CurTotalsr,-1,150,420,480,-1);  
  
  EndJob;
  RETURN;
END;
 
 