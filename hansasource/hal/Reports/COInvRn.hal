external function Boolean SetInSet2(string,string);
external function Boolean HasContactClassification();
external function Boolean HasCategories();
external procedure HTCustCat(string,var string);
external procedure HTCustClass(string,var string);
external procedure HTArtGroup(string, var string);        
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();     
external procedure HTItemClass(string,var string);
external procedure HTItem(string,var string);   
external procedure SetLastInvoiceDate(var record COVc,Integer,Date);
external procedure FindShortestPeriod(record COVc,var Date,var Date,var Integer,var LongInt,var Date,var Date,var Integer,var Integer,var Date,var Integer);
external function string 255 CreateInvoiceNumber(LongInt,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external updating function Integer GroupInvoicingCO(record RcVc,var LongInt,Boolean);
external function Integer GetCUCOInvDef(string);
external procedure MakeInvFromCO(record RcVc,var record COVc,var record IVVc,Date,Date,Date,Integer,Integer,Integer);
external procedure HT2Per(Date, Date , var string);
external procedure PrintCurTotalsRow(record SMVc,Integer,Integer,Integer,Integer,Integer);
external procedure AddCurTotalsRow(string,val,val,val,var record SMVc);
external function Boolean CheckCustomerBlocked(string);
external procedure HTVends(string, string, var string);
external procedure HTObj(string, var string);

global
procedure CORepInvoice(record IVVc IVr,record COVc COr,Integer com)
begin
  record ARVc ARr;
  row IVVc IVrw;
  string 255 tstr,t2;
  Integer i,rwcnt;
  val qty,sum1,sum3;

  qty = 0;
  StartFormat(15);
  OutString(0,0,CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr),false);
  tstr = "";
  if (IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeNormalSpecialSales) then begin
    tstr = USetStr(1803);
  end;
  if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
    tstr = USetStr(1804);
  end;
  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
    tstr = USetStr(1805);
  end;
  if (IVr.InvType==kInvoiceTypeInterest) then begin
    tstr = USetStr(1810);
  end;
  if (IVr.InvType==kInvoiceTypeDebit) then begin
    tstr = USetStr(23250);
  end;
  if (IVr.InvType==kInvoiceTypePrepayment) then begin
    tstr = USetStr(1876);
  end;
  OutString(50,0,tstr,false);
  OutDate(130,0,IVr.InvDate,false);
  OutDate(220,0,IVr.PayDate,false);
  OutString(270,0,IVr.pdComment,false);
  OutLongInt(350,0,IVr.OrderNr,false);
  if (IVr.OKFlag==0) then begin
    OutString(480,0,USetStr(2366),true);
  end;
  EndFormat;
  StartFormat(15);
  OutString(50,"DblCUVc",IVr.CustCode,false);
  OutString(220,0,IVr.Addr0,false);
  EndFormat;
  StartFormat(15);
  OutString(50,0,IVr.CustCat,false);
  OutString(220,0,IVr.Addr1,false);
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(50,0,IVr.OurContact,false);
  OutString(220,0,IVr.Addr2,false);
  EndFormat;
  if (nonblank(IVr.Addr3)) then begin
    StartFormat(15);
    OutString(220,0,IVr.Addr3,false);
    EndFormat;
  end;
  if (nonblank(IVr.ClientContact)) then begin
    StartFormat(15);
    OutString(220,0,IVr.ClientContact,false);
    EndFormat;
  end;
  if (nonblank(IVr.CurncyCode)) then begin
    StartFormat(15);
    OutString(460,0,IVr.CurncyCode,true);
    EndFormat;
  end;
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp==3) then begin
      StartFormat(15);
      t2 = USetStr(1807);
      tstr = IVrw.OrdRow;
      t2 = t2 & tstr;
      OutString(130,0,t2,false);
      EndFormat;
    end;
    if ((IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==4)) then begin
      StartFormat(15);
      qty = qty + IVrw.Quant;
      OutString(20,0,IVrw.ArtCode,false);
      OutVal(104,0,IVrw.Quant,M4UVal,true);
      if (Left(IVrw.Spec,len(USetStr(1168)))==USetStr(1168)) then begin
        OutStringID(110,"DblCOIDVc",IVrw.Spec,false,COr.SerNr & ":" & COr.ChildSerNr);
      end else begin      
        OutString(110,0,IVrw.Spec,false);
      end;
      OutVal(350,0,IVrw.Price,M423Val,true);
      OutVal(380,0,IVrw.vRebate,M41Val,true);
      OutVal(460,0,IVrw.Sum,M4Val,true);
      OutString(480,0,IVrw.VATCode,true);
      EndFormat;
    end;
    if (IVrw.stp==5) then begin
      StartFormat(15);
      OutString(20,0,USetStr(4869),false);
      OutString(130,0,IVrw.Spec,false);
      OutVal(460,0,IVrw.Sum,M4Val,true);
      OutString(480,0,IVrw.VATCode,true);
      EndFormat;
    end;
  end;
  if (IVr.FrPrice<>0) then begin
    StartFormat(15);
    OutString(20,0,IVr.FrItem,false);
    OutString(104,0,"1",true);
    OutVal(350,0,IVr.FrPrice,M4Val,true);
    OutVal(460,0,IVr.FrPrice,M4Val,true);
    OutString(480,0,IVr.FrVATCode,true);
    EndFormat;
  end;
  Black_Divider(380,460);
  StartFormat(15);
  if (IVr.ExportFlag!=0) then begin
    OutString(20,0,USetStr(2367),false);
  end;
  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
    sum1 = -IVr.Sum1;
    sum3 = -IVr.Sum3;
  end else begin
    sum1 = IVr.Sum1;
    sum3 = IVr.Sum3;
  end;
  OutString(70,0,USetStr(2645),false);
  OutString(150,0,USetStr(3185),false);
  OutString(230,0,USetStr(6707),false);
  OutVal(460,0,sum1,M4Val,true);//280
  OutVal(104,0,qty,M4UVal,true);
  OutString(150,0,IVr.Objects,false);
  OutVal(230,0,sum3,M4Val,false);

  EndFormat;
  if (com<>0) then begin
    if (nonblank(IVr.InvComment)) then begin
      StartFormat(15);
      OutString(0,0,IVr.InvComment,false);
      EndFormat;
    end;
  end;
  ARr.InvoiceNr = IVr.SerNr;
  if (ReadFirstMain(ARr,1,true)) then begin
    sum1 = IVr.Sum4 - ARr.RVal;
  end else begin
    if (IVr.OKFlag==1) then begin
      sum1 = IVr.Sum4;
    end else begin
      sum1 = 0;  
    end;  
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(20,0,USetStr(2432),false);
  OutVal(460,0,sum1,M4Val,true);
  EndFormat;  
  return;
end;

global
updating procedure COInvRn(record RcVc RepSpec)
BEGIN
  record COVc COr;
  row COVc COrw;
  record IVVc IVr;
  record SMVc CurTotalsr;
  Boolean TrHs,testf;
  Date invdate,invpers,invpere;
  string 255 frcu,tocu;
  LongInt frco,toco;
  val TotSum;
  val NetSum,t;
  string 255 ckey;
  Integer keys,detailinv;
  string 255 tstr;
  Integer rw;
  LongInt ivcnt,invnr;
  Integer invDtype,invDays;
  Date startDate,endDate,lastInvDate,oldinvpers,coinvdate;
  LongInt perLength;
  Integer shortestline,oldshortestline;
  record SRBlock SRRec;
  record CUVc CUr;
  
  BlockLoad(SRRec);
  StartReportJob(USetStr(5640));
   rw = 1;
   if (nonblankdate(RepSpec.d1)) or (nonblankdate(RepSpec.d2)) then begin
     HT2Per(RepSpec.d1,RepSpec.d2,tstr);
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
   if (nonblank(RepSpec.f3)) then begin
     tstr = USetStr(5641);
     tstr = tstr & "  ";
     tstr = tstr & RepSpec.f3;
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
  if (nonblank(RepSpec.f4)) then begin
    HTVends(RepSpec.f4, RepSpec.f4,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.ObjStr)) then begin
    HTObj(RepSpec.ObjStr,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f5)) then begin
    HTItem(RepSpec.f5,tstr);  
    tstr = tstr & RepSpec.f5;
    Header(rw,tstr,1);  
    rw = rw + 1;  
  end;  
  if (HasItemClassification) then begin
    HTItemClass(RepSpec.f6,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end; 
  end;   
  if (HasItemGroups) then begin
    HTArtGroup(RepSpec.AccStr,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;    
  if (HasCategories) then begin
    HTCustCat(RepSpec.f7,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasContactClassification) then begin
    HTCustClass(RepSpec.Stext,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;  
  EndHeader;
  SetRepCol(2,430);
  RecordNew(CurTotalsr); // Should use the new BeginCurncyTotals made in HAL
  if (RepSpec.ArtMode==1) then begin
    GroupInvoicingCO(RepSpec,ivcnt,false);
    goto LCOInvRn;
  end;  
  frcu = FirstInRange(RepSpec.f1,20);
  tocu = LastInRange(RepSpec.f1,20);
  frco = FirstInRange(RepSpec.f2,20);
  toco = LastInRange(RepSpec.f2,20);  
  if (RepSpec.flags[0]==0) then begin
    ckey = "SerNr";
    keys = 2;
  end;
  if (RepSpec.flags[0]==1) then begin
    ckey = "CustCode";
    COr.CustCode = frcu;
    keys = 3;
  end;
  COr.SerNr = frco;
  COr.ChildSerNr = -1;
  TrHs = true;
  while (LoopKey(ckey,COr,keys,TrHs)) begin
    testf = true;
    if (COr.OKFlag==0) then begin testf = false; end;
    FindShortestPeriod(COr,invpers,oldinvpers,oldshortestline,perLength,startDate,endDate,invDtype,invDays,lastInvDate,shortestline);
    if (nonblankdate(lastInvDate)) then begin
      if (lastInvDate>RepSpec.d2) then begin testf = false; end;
    end;
    if (RepSpec.flags[0]==0) then begin
      if (toco!=-1) then begin
        if (COr.SerNr>toco) then begin TrHs = false; end;
      end;  
    end;
    if (RepSpec.flags[0]==1) then begin
      if (nonblank(RepSpec.f1)) then begin
        if (tocu<COr.CustCode) then begin TrHs = false; end;
        if (frcu>COr.CustCode) then begin TrHs = false; end;
      end;
    end;
    if (RepSpec.flags[0]==0) then begin
      if (nonblank(RepSpec.f1)) then begin
        if (tocu<COr.CustCode) then begin testf = false; end;
        if (frcu>COr.CustCode) then begin testf = false; end;
      end;
    end;
    if (RepSpec.flags[0]==1) then begin
      if (toco!=-1) then begin
        if (COr.SerNr>toco) then begin testf = false; end;
      end;  
    end;
    if (nonblank(RepSpec.f3)) then begin
      if (SetInSet(COr.ContractClass,RepSpec.f3)==false) then begin testf = false; end;
    end;
    if (nonblank(RepSpec.f4)) then begin
      if (SetInSet(RepSpec.f4, COr.VECode)==false) then begin testf = false; end;
    end;
    if (nonblank(RepSpec.ObjStr)) then begin
      if (SetInSet(RepSpec.ObjStr,COr.Objects)==false) then begin testf = false; end;
    end;
    if (CheckCustomerBlocked(COr.CustCode)) then begin testf = false; end;
    if (testf) then begin
      CUr.Code = COr.CustCode;
      if (ReadFirstMain(CUr,1,true)==false) then begin testf = false; end;
      if (nonblank(RepSpec.Stext) and testf) then begin
        if (SetInSet2(RepSpec.Stext,CUr.Classification)==false) then begin
          testf = false;
        end;
      end;
    end;
    if (testf) then begin
      if (nonblank(RepSpec.f7)) then begin
        if (RepSpec.f7!=CUr.CustCat) then begin
          testf = false;
        end;
      end;
    end;    
    if (TrHs==false) then begin testf = false; end;
    if (testf) then begin
      if (perLength<=0) then begin goto LCOInvRnLoopEnd; end;
      if (blankdate(startDate)) then begin goto LCOInvRnLoopEnd; end;
      invpers = startDate;
      if (nonblank(COr.InvoiceToCode)) then begin
        detailinv = GetCUCOInvDef(COr.InvoiceToCode);
      end else begin
        detailinv = GetCUCOInvDef(COr.CustCode);
      end;  
LNextCOInv:;
      FindShortestPeriod(COr,invpers,oldinvpers,oldshortestline,perLength,startDate,endDate,invDtype,invDays,lastInvDate,shortestline);
      if (perLength<=0) then begin goto LCOInvRnLoopEnd; end;
      if (nonblankdate(endDate)) then begin
        if (invpers>endDate) then begin goto LCOInvRnLoopEnd; end;
        if (nonblankdate(COr.CancelDate)) then begin
          if (invpers>COr.CancelDate) then begin goto LCOInvRnLoopEnd; end;
        end;
      end else begin
        if (invDtype==0) then begin
          if (AddDay(invpers,-invDays)>RepSpec.d2) then begin goto LCOInvRnLoopEnd; end;
        end else begin
          if (invpers>RepSpec.d2) then begin goto LCOInvRnLoopEnd; end;
        end;
      end;
      if (nonblankdate(COr.CancelDate)) then begin
        if (invpers>COr.CancelDate) then begin goto LCOInvRnLoopEnd; end;
      end;
      if (COr.perType==0) then begin
        invpere = AddMonth(invpers,perLength);
      end else begin
        invpere = AddDay(invpers,perLength);
      end;
      invpere = AddDay(invpere,-1);
      if (invDtype==0) then begin
        invdate = AddDay(invpers,-invDays); // invpers
      end else begin
        invdate = AddDay(invpers,invDays);
      end;
      if (lastInvDate>=invdate) then begin goto LSkip; end;
      if (DateInRange(invdate,RepSpec.d1,RepSpec.d2)) then begin
        coinvdate = invdate;
        if (nonblankdate(RepSpec.RegDate)) then begin invdate = RepSpec.RegDate; end;
        RecordNew(IVr);
        MakeInvFromCO(RepSpec,COr,IVr,invdate,invpers,invpere,detailinv,-1,shortestline);
        
        IVr.SerNr = NextSerNr("IVVc",IVr.TransDate,SRRec.LastCOInvNr,false,IVr.LangCode);
        if (invnr==-1) then begin
          invnr = IVr.SerNr;
        end else begin
          invnr = invnr + 1;
          IVr.SerNr = invnr;
        end;
        if (IVr.Sum4!=0) then begin
          Gray_Divider(0,1);
          CORepInvoice(IVr,COr,0);
          AddCurTotalsRow(IVr.CurncyCode,IVr.Sum1,IVr.Sum4,blankval,CurTotalsr);
          t = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          TotSum = TotSum + t;
          t = MulRateToBase1(IVr.CurncyCode,IVr.Sum1,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          NetSum = NetSum + t;
        end;
        SetLastInvoiceDate(COr,shortestline,coinvdate);
      end;
LSkip:;
      invpers = AddDay(invpere,1);
      goto LNextCOInv;
LCOInvRnLoopEnd:;
    end;
  end;
LCOInvRn:;  
  Gray_Divider(0,1);
  StartFormat(15);
  OutVal(480,0,NetSum,M4Val,true);
  EndFormat;
  StartFormat(15);
  OutVal(480,0,TotSum,M4Val,true);
  EndFormat;
  Gray_Divider(0,1);
  PrintCurTotalsRow(CurTotalsr,-1,150,420,480,-1);  
  EndJob;
  RETURN;
END;
