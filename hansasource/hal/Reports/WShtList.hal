external function boolean CheckItemGroupClassification(string,string,string);
external function Boolean SetInSet2(string,string);
external procedure HTItemClass(string,var string);
external procedure WSSumup(record WSVc);
external procedure HTOKF(Integer,Integer, var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure HTITs(string,string,var string);
external procedure HTItems(string,var string);
external procedure HTLocations(string, string, var string);
external procedure HTPers(string,var string);
external procedure HTDetailLevel(integer, var string);
external procedure HTCusts(string, string, var string);
external procedure HTStdProb(string, var string);
external procedure HTWSheet(LongInt, LongInt, var string);
external procedure HTWOrder(LongInt , LongInt , var string);
external procedure HTProject(string ,var string);
external procedure HT2Per(Date, Date , var string);

procedure RepWS(record RcVc RepSpec,record WSVc WSOp)
begin
  Integer i,rwcnt;
  row WSVc WSrw;
  Boolean testf;
  string 20 frin,toin;
  string 20 frit,toit;
  record INVc INr;

  frin = FirstInRange(RepSpec.f4,20);
  toin = LastInRange(RepSpec.f4,20);
  frit = FirstInRange(RepSpec.Stext,20);
  toit = LastInRange(RepSpec.Stext,20);
  StartFormat(15);
  OutString(0,"DblWSVc",WSOp.SerNr,false);
  OutDate(60,0,WSOp.TransDate,false);
  OutLongInt(120,0,WSOp.WONr,false);
  EndFormat;
  StartFormat(15);
  OutString(50,0,WSOp.CustCode,false);
  OutString(200,0,WSOp.Addr0,false);
  EndFormat;
  rwcnt = MatRowCnt(WSOp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(WSOp,i,WSrw);
    testf = true;
    if (WSrw.stp!=1) then begin testf = false; end;
    if (nonblank(RepSpec.f4)) then begin
      if (WSrw.ArtCode<frin) or (WSrw.ArtCode>toin) then begin 
        testf = false;
      end;
    end;
    if (nonblank(RepSpec.Stext) or nonblank(RepSpec.f8)) then begin
      if (CheckItemGroupClassification(WSrw.ArtCode,RepSpec.Stext,RepSpec.f8)==false) then begin 
        testf = false;
      end;      
    end;
    if (testf) then begin    
      StartFormat(15);
      OutString(20,0,WSrw.ArtCode,false);
      OutString(114,0,WSrw.Quant,true);
      OutString(120,0,WSrw.Spec,false);
      OutString(330,0,WSrw.Price,true);
      OutString(360,0,WSrw.vRebate,true);
      OutString(460,0,WSrw.Sum,true);
      OutString(480,0,WSrw.VATCode,true);
      EndFormat;
    end;
  end;
  Black_Divider(380,460);
  StartFormat(15);
  if (WSOp.ExportFlag!=0) then begin
    OutString(20,0,USetStr(2568),false);
  end;
  OutString(100,0,WSOp.Objects,false);
  OutString(260,0,WSOp.Sum1,true);
  OutString(360,0,WSOp.Sum3,true);
  OutString(460,0,WSOp.Sum4,true);
  EndFormat;
return;
end;

global
procedure WSListRn(record RcVc RepSpec)
begin
  record WSVc tmpWSr;
  record WSVc WSr;
  row WSVc WSrw;
  Integer i,rwcnt;
  Boolean TrHs;
  Boolean testf;
  val iv;
  val TotSum;
  LongInt afr;
  LongInt ato;
  string 255 tstr;
  Integer rw;
  LongInt frwo;
  LongInt towo;
  string 20 frin,toin;
  string 20 frit,toit;
  string 20 frc,toc;
  record INVc INr;
  
  frwo = FirstInRange(RepSpec.f3,30);
  towo =  LastInRange(RepSpec.f3,30);
  afr = FirstInRange(RepSpec.f1,30);
  ato =  LastInRange(RepSpec.f1,30);
  frin = FirstInRange(RepSpec.f4,20);
  toin = LastInRange(RepSpec.f4,20);
  frit = FirstInRange(RepSpec.Stext,20);
  toit = LastInRange(RepSpec.Stext,20);
  frc = FirstInRange(RepSpec.f2,20);
  toc = LastInRange(RepSpec.f2,20);
  rw = 1;
  TotSum = 0;
  StartReportJob(USetStr(7730));
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTWSheet(afr,ato,tstr);
  Header(rw,tstr,0);
  HTOKF(RepSpec.flags[1],RepSpec.flags[3],tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (RepSpec.ArtMode==2) then begin
    tstr = USetStr(5127);
  end else begin
    HTDetailLevel(RepSpec.ArtMode,tstr);
  end;
  Header(rw,tstr,0);


  if (nonblank(RepSpec.f2)) then begin
    HTCusts(frc,toc,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;

  if (nonblank(RepSpec.f3)) then begin
    HTWOrder(frwo,towo,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.TransStr)) then begin
    HTPers(RepSpec.TransStr,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.AccStr)) then begin
    HTProject(RepSpec.AccStr,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.FirstAcc)) then begin
    HTLocations(RepSpec.FirstAcc,RepSpec.FirstAcc,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f4)) then begin
    HTItems(RepSpec.f4,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.Stext)) then begin
    HTITs(frit,toit,tstr);
    Header(rw,tstr,0);
  end;
  if (nonblank(RepSpec.f8)) then begin 
    HTItemClass(RepSpec.f8,tstr);
    Header(rw,tstr,1);  
    rw = rw + 1;  
  end;
  EndHeader;

  if ((RepSpec.ArtMode==2) or (RepSpec.ArtMode==0)) then begin
    StartFormat(15);
    OutString(0,0,USetStr(2562),false);
    OutString(60,0,USetStr(2563),false);
    OutString(140,0,USetStr(2564),false);
    OutString(440,0,USetStr(2567),true);
    EndFormat;
  end;
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
    OutString(0,0,USetStr(2562),false);
    OutString(60,0,USetStr(2563),false);
    OutString(120,0,USetStr(7731),false);
    EndFormat;
  end;
  WSr.SerNr = afr;
  if (RepSpec.ArtMode==0) then begin
    Gray_Divider(0,1);
  end;
  TrHs = true;
  while (LoopMain(WSr,1,TrHs)) begin
    if (ato <> -1) then begin
      if (WSr.SerNr > ato) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      testf = false;
      if (RepSpec.flags[3]==1) then begin /* OKed */
        if (WSr.OKFlag<>0) then begin
          testf = true;
        end;
      end;
      if (RepSpec.flags[1]==1) then begin /* Not OKed */
        if (WSr.OKFlag==0) then begin
          testf = true;
        end;
      end;
      if (nonblank(RepSpec.f2) and (RepSpec.f2<>WSr.CustCode)) then begin
        testf = false;
      end;
      if (nonblank(RepSpec.TransStr)) then begin
        if (RepSpec.TransStr<>WSr.EMCode) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.FirstAcc)) then begin
        if (RepSpec.FirstAcc!=WSr.Location) then begin
          testf = false;
        end;
      end;

      if ((WSr.TransDate<RepSpec.sStartDate) or (WSr.TransDate>RepSpec.sEndDate)) then begin
        testf = false;
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (towo<>-1) then begin
          if (WSr.WONr>towo) then begin
            testf = false;
          end;
        end;
        if (WSr.WONr<frwo) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        if ((nonblank(RepSpec.Stext)) or (nonblank(RepSpec.f4)) or (nonblank(RepSpec.f8))) then begin
          testf = false;
          rwcnt = MatRowCnt(WSr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(WSr,i,WSrw);
            if (nonblank(RepSpec.f4)) then begin
              if (WSrw.ArtCode>=frin) and (WSrw.ArtCode<=toin) then begin 
                testf = true;              
                i = rwcnt;
              end;
            end;
            if (testf==false) then begin               
              if (CheckItemGroupClassification(WSrw.ArtCode,RepSpec.Stext,RepSpec.f8)==true) then begin 
                testf = true;              
                i = rwcnt;
              end;
            end;
          end;
        end;
      end;
      if (testf) then begin
        if (nonblank(RepSpec.Stext)) or (nonblank(RepSpec.f4)) then begin
          rwcnt = MatRowCnt(WSr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(WSr,i,WSrw);
            testf = true;
            if (WSrw.stp!=1) then begin testf = false; end;
            if (nonblank(RepSpec.f4)) then begin
              if (WSrw.ArtCode<frin) or (WSrw.ArtCode>toin) then begin 
                testf = false;
              end;
            end;
            if (nonblank(RepSpec.Stext) or nonblank(RepSpec.f8)) then begin
              if (ReadFirstItem(WSrw.ArtCode,INr,false,true)) then begin
                if (nonblank(RepSpec.Stext)) then begin
                  if (INr.Group<frit) or (INr.Group>toit) then begin 
                    testf = false;
                  end;
                end;
                if (nonblank(RepSpec.f8)) then begin
                  if (SetInSet2(RepSpec.f8,INr.DispGroups)==false) then begin
                    testf = false;
                  end;
                end;
              end;
            end;
            if (testf) then begin 
              MatRowPut(tmpWSr,MatRowCnt(tmpWSr),WSrw);
            end;
          end;
          WSSumup(tmpWSr);
          if ((RepSpec.ArtMode==0) or (RepSpec.ArtMode==1)) then begin
            iv = tmpWSr.Sum4;
          end;
          if (RepSpec.ArtMode==2) then begin
            iv = tmpWSr.Sum1;
          end;
        end else begin
          if ((RepSpec.ArtMode==0) or (RepSpec.ArtMode==1)) then begin
            iv = WSr.Sum4;
          end;
          if (RepSpec.ArtMode==2) then begin
            iv = WSr.Sum1;
          end;
        end;
        TotSum = TotSum + iv;
        if (RepSpec.ArtMode==1) then begin
          Gray_Divider(0,1);
          RepWS(RepSpec,WSr);
        end;
        if ((RepSpec.ArtMode==2) or (RepSpec.ArtMode==0)) then begin
          StartFormat(15);
          OutString(0,"DblWSVc",WSr.SerNr,false);
          OutDate(60,0,WSr.TransDate,false);
          OutString(140,0,WSr.Addr0,false);
          OutVal(440,0,iv,M4VAl,true);
          EndFormat;
        end;
      end;
    end;
  end;
  Gray_Divider(0,1);
  EndJob;
  return;
end;
