external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);external procedure SetupVATBase(var record SMVc,var Integer);external procedure HTClasses(string,string,var string);external procedure HTBranchIDs(string,string,var string);external procedure HTRestAcc(string,var string);external procedure HT2Per(Date, Date , var string);procedure CalcRowGP(record RestAccVc RAr,string artcode,string vatcode,val quant,val baseprice,val pricefactor,val sump,val price,var val rowgp)begin  val t,s,rowsum;  val qty,sum;  record TaxMatrixVc TMr;  if (quant==0) then begin    qty = 1;  end else begin    qty = quant;  end;    if (nonblank(artcode)) then begin    t = qty * baseprice;    if (pricefactor<>0) then begin      t = t/pricefactor;    end;    if (sump==0) then begin      sum = qty * price;    end else begin      sum = sump;    end;      s = sum;    UnpackFieldMatrix(RAr,"TaxMatrix",TMr);    FindSalesExVat(TMr,vatcode,s,1,0,rowsum);    rowgp = rowsum - t;  end else begin    rowgp = 0;  end;  return;end;globalprocedure RestAccGPRn(record RcVc RepSpec)begin  Integer rw;  string 255 tstr,frbr,tobr;  Boolean found,testf;   record RestAccVc RAr;  row RestAccVc RArw;  Integer i,rwcnt,vatcnt;  string 255 index;  LongInt frbt,tobt,btcnt;  val tiv,tev;  record SMVc VATr;  row SMVc VATrw;  val qty,gp,rowsum;  val btgp,gpperc,btsum,btbp;  val totbtgp,totbtsum,totbtbp;  record TaxMatrixVc TMr;    frbt = FirstInRange(RepSpec.f1,20);  tobt = LastInRange(RepSpec.f1,20);  frbr = FirstInRange(RepSpec.f2,20);  tobr = LastInRange(RepSpec.f2,20);  StartReportJob(USetStr(19620));  rw = 1;  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);  Header(rw,tstr,1);  rw = rw + 1;  HTClasses(RepSpec.LastAcc,RepSpec.LastAcc,tstr);  Header(rw,tstr,0);   HTRestAcc(RepSpec.f1,tstr);  Header(rw,tstr,1);  rw = rw + 1;  HTBranchIDs(frbr,tobr,tstr);  Header(rw,tstr,1);  rw = rw + 1;   EndHeader;    switch (RepSpec.ArtMode) begin    case 0:      SetRepCol(2,60);      SetRepCol(3,125);      SetRepColBiDi(8,360,400);      SetRepColBiDi(9,420,460);      SetRepColBiDi(7,480,520);      StartFormat(15);      OutString(0,0,USetStr(19621),false);      OutString(2,0,USetStr(19622),false);      OutString(3,0,USetStr(19623),false);      OutStringAdjust(8,0,USetStr(19625),true,M4Val);      OutStringAdjust(9,0,USetStr(19626),true,M4Val);      OutStringAdjust(7,0,USetStr(19627),true,M4Val);      EndFormat;    case 1:      SetRepCol(2,60);      SetRepCol(3,125);      SetRepColBiDi(4,104,150);      SetRepColBiDi(8,360,400);      SetRepColBiDi(9,420,460);      SetRepColBiDi(7,480,520);      StartFormat(15);      OutString(0,0,USetStr(19621),false);      OutString(2,0,USetStr(19622),false);      OutString(3,0,USetStr(19624),false);      OutStringAdjust(8,0,USetStr(19625),true,M4Val);      OutStringAdjust(9,0,USetStr(19628),true,M4Val);      OutStringAdjust(7,0,USetStr(19626),true,M4Val);      EndFormat;  end;  Gray_Divider(0,1);  btcnt = 0;  found = true;  if (nonblank(RepSpec.f1)) then begin    index = "SerNr";    RAr.SerNr = frbt;  end else begin    switch (RepSpec.flags[0]) begin      case 0:        index = "ReportingDate";        RAr.ReportingDate = RepSpec.sStartDate;      case 1:        index = "TransDate";        RAr.TransDate = RepSpec.sStartDate;    end;  end;  while (LoopKey(index,RAr,1,found)) begin    switch (index) begin      case "SerNr":        if (RAr.SerNr>tobt) then begin found = false; end;      case "ReportingDate":        if (DateInRange(RAr.ReportingDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin found = false; end;      case "TransDate":        if (DateInRange(RAr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin found = false; end;    end;    if (found) then begin      testf = true;      if (RAr.Closed==0) then begin testf = false; end;      switch (RepSpec.flags[0]) begin        case 0:          if (DateInRange(RAr.ReportingDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;        case 1:          if (DateInRange(RAr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;      end;      if (nonblank(RepSpec.LastAcc)) then begin        if (RepSpec.LastAcc!=RAr.Class) then begin testf = false; end;      end;      if (nonblank(RepSpec.f2)) then begin        if (RepSpec.f2!=RAr.BranchID) then begin testf = false; end;      end;      if (testf) then begin        btgp = blankval;        btsum = blankval;        btbp = blankval;        switch (RepSpec.ArtMode) begin          case 0:            rwcnt = MatRowCnt(RAr);            for (i=0;i<rwcnt;i=i+1) begin              MatRowGet(RAr,i,RArw);              if (RArw.ovst==0) then begin                switch (RArw.stp) begin                  case kInvoiceRowTypeStructuredItemComponent:                    goto LkInvoiceRowTypeNormal1;                  case kInvoiceRowTypeNormal:LkInvoiceRowTypeNormal1:;                   if (RArw.rowGP==0) then begin                     CalcRowGP(RAr,RArw.VATCode,RArw.ArtCode,RArw.Quant,RArw.BasePrice,RArw.PriceFactor,RArw.Sum,RArw.Price,gp);                     end else begin                     gp = RArw.rowGP;                   end;                   btgp = btgp + gp;                   btsum = btsum + RArw.Sum;                end;              end;            end;            StartFormat(15);            OutString(0,"DblRestAccVc",RAr.SerNr,false);            switch (RepSpec.flags[0]) begin              case 0:                OutDate(2,0,RAr.ReportingDate,false);              case 1:                OutDate(2,0,RAr.TransDate,false);            end;            OutString(3,0,RAr.CUCode,false);            OutVal(8,0,RAr.Sum4,M4Val,true);            OutVal(9,0,btgp,M4Val,true);            gpperc = (btgp/btsum)*100;            OutVal(7,0,gpperc,M4Val,true);            EndFormat;            totbtgp = totbtgp + btgp;            totbtsum = totbtsum + btsum;          case 1:            qty = blankval;            SetupVATBase(VATr,vatcnt);                      StartFormat(15);            OutString(0,"DblRestAccVc",RAr.SerNr,false);            OutDate(2,0,RAr.ReportingDate,false);            OutDate(3,0,RAr.TransDate,false);            EndFormat;            rwcnt = MatRowCnt(RAr);            for (i=0;i<rwcnt;i=i+1) begin              MatRowGet(RAr,i,RArw);              if (RArw.ovst==0) then begin                switch (RArw.stp) begin                  case kInvoiceRowTypeStructuredItemComponent:                    goto LkInvoiceRowTypeNormal;                  case kInvoiceRowTypeNormal:LkInvoiceRowTypeNormal:;                                      AddVATBase(VATr,RArw.VATCode,RArw.Sum,blankval,vatcnt,1,0);                    UnpackRowFieldMatrix(RArw,"TaxMatrix",TMr);                    FindSalesExVat(TMr,RArw.VATCode,RArw.Sum,1,0,rowsum);                    StartFormat(15);                     OutString(15,0,RArw.ArtCode,false);                     OutVal(4,0,RArw.Quant,M4UVal,true);                     OutString(110,0,RArw.Spec,false);                     OutVal(8,0,rowsum,M423Val,true);                     OutVal(9,0,RArw.Quant*RArw.BasePrice,M4Val,true);                     OutVal(7,0,rowsum-RArw.Quant*RArw.BasePrice,M4Val,true);                    EndFormat;                    btsum = btsum + rowsum;                    btbp = btbp + RArw.Quant*RArw.BasePrice;                    qty = qty + RArw.Quant;                end;              end;            end;            Black_Divider(80,1);            StartFormat(15);            OutVal(4,0,qty,M4Val,true);            OutVal(8,0,btsum,M4Val,true);            OutVal(9,0,btbp,M4Val,true);            OutVal(7,0,btsum-btbp,M4Val,true);            EndFormat;            totbtsum = totbtsum + btsum;            totbtbp = totbtbp + btbp;            Gray_Divider(0,1);        end;      end;    end;  end;  Gray_Divider(0,1);  switch (RepSpec.ArtMode) begin    case 0:      StartFormat(15);      OutVal(8,0,totbtsum,M4Val,true);      OutVal(9,0,totbtgp,M4Val,true);      gpperc = (totbtgp/totbtsum)*100;      OutVal(7,0,gpperc,M4Val,true);      EndFormat;    case 1:      StartFormat(15);      OutVal(8,0,totbtsum,M4Val,true);      OutVal(9,0,totbtbp,M4Val,true);      OutVal(7,0,totbtsum-totbtbp,M4Val,true);      EndFormat;  end;  EndJob;  return;end;