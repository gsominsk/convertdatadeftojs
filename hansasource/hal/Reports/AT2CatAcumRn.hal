external function Boolean GetNextData_Asset(Integer,record AT2UnitVc,record DprModVc,Date,Date,Integer,Boolean,var Date,var string,var val,var val,var val,var Date,var val,var val,var Boolean);
external procedure DeprSegment(Date,Date,Integer,record DprModVc,Date,Date,Date,val,var val,var val,var val,var val,var Integer,val);
external function Boolean GetLastDprStartVal(Integer,string,val,var val,var val);
external procedure FindInvNrMovements(string,string,string,Date,var Date,var Date,var Date,Boolean);
external procedure HTDepartments(string,string,var string);
external procedure HTObj(string,var string);
external procedure HTCategories(string,string,var string);

procedure InvNrDeprCalcFrToDate(record AT2UnitVc ATUnitr,val vals0,Integer Comparison,Integer startfromlast,Integer Model,var val invdprbef,var val invdprv,Date sStartDate,Date sEndDate)
BEGIN
/*at2rewrite*/
  Boolean found,wroff;
  Date sd,pd,ed,wrofd;
  Date dprstartdate,stdprdate,startdate,enddate;
  val startval,dprbef,dprv,mindprval,resval,nextstartval,nextresval,nextinitdeprval;
  val portstartval,InitDeprVal,t,wrofsum,wrofqty,wrofdpr;
  string 20 dmcode,nextdmcode;  
  Integer alreadydonef;
  Boolean stopdprf,skipwriteof,Loopf;
  record DprModVc DMr;

  startdate = sStartDate;
  enddate = sEndDate;
  if (Model==0) then begin    
    dmcode = ATUnitr.Model1;
    sd = ATUnitr.StartingDate1;
    pd = ATUnitr.StartingDate1; 
    dprbef = ATUnitr.InitDeprVal1;   
    stdprdate = ATUnitr.StartingDate1;
  end;  
  if (Model==1) then begin    
    dmcode = ATUnitr.Model2;
    sd = ATUnitr.StartingDate2;
    pd = ATUnitr.StartingDate2; 
    dprbef = ATUnitr.InitDeprVal2;
    stdprdate = ATUnitr.StartingDate2;
  end;  
  DMr.Code = dmcode;
  if (ReadFirstMain(DMr,1,true)) then begin end;
  resval = ATUnitr.ResVal + ATUnitr.LandVal;
  mindprval = ATUnitr.MinDprVal; 
  startval = ATUnitr.PurchVal;


  if (pd<sStartDate) then begin
    pd = sStartDate;
  end;
  ed = sEndDate;
    
  dprv = 0;
  if (startfromlast!=0) then begin
    alreadydonef = 0;    
  end else begin
    alreadydonef = 2;    
  end;  
  found = true;
  if (found) then begin
    invdprv = 0;
    if (startfromlast!=0) then begin
      if (GetLastDprStartVal(Model,ATUnitr.InventoryNr,startval,portstartval,t)) then begin end;
    end;
    nextdmcode = dmcode;
    wroff = false;
    pd = sStartDate;
    dprstartdate = sd;
    nextstartval = startval;
      /*
StartFormat(15);
 OutString(0,0,"JJdpr0",false); 
       OutDate(320,0,sd,false);
       OutDate(380,0,pd,false);
       OutDate(420,0,ed,false);
 
EndFormat;
*/
    Loopf = true;
    while (GetNextData_Asset(Model,ATUnitr,DMr,startdate,enddate,Comparison,false,ed,nextdmcode,nextstartval,nextresval,nextinitdeprval,wrofd,wrofqty,wrofdpr,stopdprf) and Loopf) begin
      /*
StartFormat(15);
 OutString(0,0,"JJdpr1",false); 
       OutDate(320,0,sd,false);
       OutDate(380,0,pd,false);
       OutDate(420,0,ed,false);
 
EndFormat;
      */
      if (sd<sEndDate) then begin          
        ed = AddDay(ed,-1);
        if (Comparison==0) then begin
          ed = AddDay(ed,-GetDay(ed) + DaysInMonth(GetYear(ed),GetMonth(ed)));
        end;  
        if (blankdate(ed) or (sd>ed)) then begin
          ed = sEndDate;
        end;        
        if (startfromlast!=0) then begin
          startval = portstartval;
        end;
        if (sd>pd) then begin
          pd = sd;
        end;          
        DeprSegment(stdprdate,ATUnitr.PurchaseDate,Comparison,DMr,sd,pd,ed,startval,dprbef,dprv,resval,mindprval,alreadydonef,invdprbef+invdprv);
        invdprbef = invdprbef + dprbef;
        invdprv = invdprv + dprv;         
      end else begin
        Loopf = false;
      end;
      dprstartdate = AddDay(ed,2);
        
      pd = AddDay(ed,1);
      sd = pd;
      if (pd<sStartDate) then begin
        pd = sStartDate;
      end;
      ed = sEndDate;        
      dmcode = nextdmcode;
      if (nonblank(nextstartval)) then begin
        startval = nextstartval;
      end;
        
      dprbef = 0;
      dprv = 0;
    end;
      
    if (wroff) then begin
    end else begin
      if (sd<sEndDate) then begin
        if (startfromlast!=0) then begin
          startval = portstartval;
        end; 

        if (sd>pd) then begin
          pd = sd;
        end;
        DeprSegment(stdprdate,ATUnitr.PurchaseDate,Comparison,DMr,sd,pd,ed,startval,dprbef,dprv,resval,mindprval,alreadydonef,invdprbef+invdprv);
        invdprbef = invdprbef + dprbef;
        invdprv = invdprv + dprv;
      end;
    end;            
    if (Model==0) then begin
      InitDeprVal = ATUnitr.InitDeprVal1;
    end;  
    if (Model==1) then begin
      InitDeprVal = ATUnitr.InitDeprVal2;
    end; 
    if ((invdprv+invdprbef)>startval) then begin
      if (invdprv!=0) then begin
        invdprv = startval-invdprbef-resval;
      end else begin
        invdprbef = startval-resval;
      end;
    end; 
      
               
//        PrintInventoryNrResult(InitDeprVal,ATUnitr.PurchVal,startval,invdprbef,invdprv);
  end;     
  
  RETURN;
END;

procedure GetInvNrDataDepSum(record RcVc RepSpec,record AT2UnitVc ATUnitp,string depcode,var val dprval)
BEGIN
  record InvrsVc Invrsr;
  record AT2WrofVc ATWrofr;
  row AT2WrofVc ATWrofrw;  
  Date ed,wrofd;
  Boolean movinf;
  val dprbef,tv;
  Date t1,t2,t3;
    
  dprval = blankval;  
  Invrsr.InventoryNr = ATUnitp.InventoryNr;
  Invrsr.FileName = "AT2WrofVc";
  if (ReadFirstKey("FileName",Invrsr,2,true)) then begin 
    ATWrofr.SerNr = Invrsr.TransNr;
    if (ReadFirstMain(ATWrofr,1,true)) then begin
      if (Invrsr.Row<MatRowCnt(ATWrofr)) then begin
        MatRowGet(ATWrofr,Invrsr.Row,ATWrofrw);
        wrofd = ATWrofr.TransDate;
      end;
    end;  
  end;

  
  FindInvNrMovements(ATUnitp.InventoryNr,ATUnitp.DepCode,depcode,ATUnitp.StartingDate1,t1,t2,t3,true);
  if (nonblankdate(t2)) then begin
    movinf = true;    
  end;
  if (blankdate(t3)) then begin
    t3 = RepSpec.d1;
  end;  
  if (nonblankdate(wrofd)) then begin    
    if (t3>wrofd) then begin
      t3 = wrofd;
    end;
  end;  
  if (t3>RepSpec.d1) then begin
    t3 = RepSpec.d1;
  end;
  if (t2>t3) then begin
    movinf = false;    
  end;
  if (movinf) then begin
/*  
    ed = AddDay(t2,-1); 
    InvNrDeprCalcFrToDate(ATUnitp,RepSpec.vals0,RepSpec.Comparison,RepSpec.flags[3],RepSpec.flags[1],dprbef,dprval,t1,ed);
    movval = movval - dprval;
*/
    ed = AddDay(t2,-1); 
    ed = AddDay(ed,-GetDay(ed) + DaysInMonth(GetYear(ed),GetMonth(ed)));
    
    InvNrDeprCalcFrToDate(ATUnitp,RepSpec.vals0,RepSpec.Comparison,RepSpec.flags[3],RepSpec.flags[1],tv,dprbef,ATUnitp.StartingDate1,ed);         
    tv = 0;
    ed = AddDay(t3,-1); 
    ed = AddDay(ed,-GetDay(ed) + DaysInMonth(GetYear(ed),GetMonth(ed)));

    InvNrDeprCalcFrToDate(ATUnitp,RepSpec.vals0,RepSpec.Comparison,RepSpec.flags[3],RepSpec.flags[1],tv,dprval,t2,ed);

    if (ATUnitp.DepCode==depcode) then begin
      dprval = dprval + ATUnitp.InitDeprVal1;  
    end;
  end;     
  dprval = dprval * ATUnitp.Quantity;
  RETURN;
END;

procedure GetCategoryName(string category,var string res)
BEGIN
  record AT2Vc ATCatr;
  
  res = "";
  ATCatr.Code = category;
  if (ReadFirstMain(ATCatr,1,true)) then begin
    res = ATCatr.Description;
  end;
  RETURN;
END;

procedure AddToDepArray(string depcode,string depdesc,val dprval,
                        Array string adepcode,Array string adepdesc,Array val adepdprval,var Integer arrcnt)
BEGIN
  Integer i;
  
  for (i=1;i<=arrcnt;i=i+1) begin
    if (adepcode[i]==depcode) then  begin
      adepdprval[i] = adepdprval[i] + dprval;
      goto LAddToDepArray;
    end;
    if (blank(adepcode[i])) then begin
      goto LAddToDepArrayBreak;
    end;
  end;
  arrcnt = arrcnt + 1;
  i = arrcnt;
LAddToDepArrayBreak:;  
  adepcode[i] = depcode;
  adepdesc[i] = depdesc;
  adepdprval[i] = dprval;
LAddToDepArray:;
  RETURN;
END;

procedure PrintDepArray(Array string adepcode,Array string adepdesc,Array val adepdprval,Integer arrcnt)
BEGIN
  Integer i;
  
  for (i=1;i<=arrcnt;i=i+1) begin
    if (nonblank(adepcode[i])) then begin
      StartFormat(15);
       OutString(70,0,adepcode[i],false);
       OutString(150,0,adepdesc[i],false);
       OutVal(480,0,adepdprval[i],M4Val,true);
      EndFormat;
    end;
  end;
  RETURN;
END;

procedure InitDepArray(Array string adepcode,Array string adepdesc,Array val adepdprval,Integer arrcnt)
BEGIN
  Integer i;
  
  for (i=1;i<=arrcnt;i=i+1) begin
    adepcode[i] = "";
    adepdesc[i] = "";
    adepdprval[i] = 0;  
  end;
  RETURN;
END;


procedure PrintDepartmentDepreciation(record RcVc RepSpec,record AT2UnitVc ATUnitr,string frdep,string todep,var val catdprval,string category,var Boolean printcatf,
                                      Array string adepcode,Array string adepdesc,Array val adepdprval,var Integer arrcnt)
BEGIN
  Boolean TrHs;
  record DepVc Depr;
  val dprval;
  string 255 tstr;
  
  TrHs = true;
  Depr.Code = frdep;
  while (LoopMain(Depr,1,TrHs)) begin
    if (nonblank(todep)) then begin
      if (Depr.Code>todep) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      GetInvNrDataDepSum(RepSpec,ATUnitr,Depr.Code,dprval);
      if (dprval!=blankval) then begin
        if (printcatf) then begin
          StartFormat(15);
           OutString(0,0,category,false);
           GetCategoryName(category,tstr);
           OutString(100,0,tstr,false);
          EndFormat;
          Gray_Divider(0,200);
          printcatf = false;
        end;
        AddToDepArray(Depr.Code,Depr.Description,dprval,adepcode,adepdesc,adepdprval,arrcnt);
        /*
        StartFormat(15);
         OutString(70,0,Depr.Code,false);
         OutString(150,0,Depr.Description,false);
         OutVal(480,0,dprval,M4Val,true);
        EndFormat;
        */
        catdprval = catdprval + dprval;
      end;  
    end;  
  end; 
  RETURN;
END;

procedure PrintCategoryDepreciation(record RcVc RepSpec,string frcategory,string tocategory,record DepVc Depr,var val depdprval,var Boolean printdepf)
BEGIN
  Boolean TrHs,testf;
  record AT2UnitVc ATUnitr;  
  string 20 lastcat;
  val dprval,catdprval;
  
  depdprval = blankval;
  TrHs = true;
  ATUnitr.AT2Code = frcategory;
  while (LoopKey("AT2Code",ATUnitr,1,TrHs)) begin  
    if ((lastcat!=ATUnitr.AT2Code) and (nonblank(lastcat))) then begin    
      if (catdprval!=blankval) then begin
        if (printdepf) then begin
          StartFormat(15);
           OutString(0,0,Depr.Code,false);
           OutString(100,0,Depr.Description,false);
          EndFormat;
          Gray_Divider(0,200);
          printdepf = false;
        end;      
        StartFormat(15);
         OutString(70,0,lastcat,false);
         OutVal(480,0,catdprval,M4Val,true);
        EndFormat;
        depdprval = depdprval + catdprval;
        catdprval = blankval;
      end;
    end;
    if (nonblank(tocategory)) then begin
      if (ATUnitr.AT2Code>tocategory) then begin
        TrHs = false;
      end;
    end;
    testf = true;
    if (nonblank(RepSpec.ObjStr)) then begin
      if (SetInSet(RepSpec.ObjStr,ATUnitr.Objects)==false) then begin
        testf = false;
      end;
    end;            
    if (TrHs and testf) then begin
      GetInvNrDataDepSum(RepSpec,ATUnitr,Depr.Code,dprval);
      catdprval = catdprval + dprval;
    end;
    lastcat = ATUnitr.AT2Code;
  end;
  if (catdprval!=blankval) then begin
    if (printdepf) then begin
      StartFormat(15);
       OutString(0,0,Depr.Code,false);
       OutString(100,0,Depr.Description,false);
      EndFormat;
      Gray_Divider(0,200);
      printdepf = false;
    end;        
    StartFormat(15);
     OutString(70,0,lastcat,false);
     OutVal(480,0,catdprval,M4Val,true);
    EndFormat;
    depdprval = depdprval + catdprval;
  end;      
  RETURN;
END;

procedure PrintDepartmentCategory(record RcVc RepSpec,string frdep,string todep,string frcategory,string tocategory,var val totdprval)
BEGIN
  Boolean TrHs;
  record DepVc Depr;
  val depdprval;
  Boolean printdepf;

  TrHs = true;
  Depr.Code = frdep;
  while (LoopMain(Depr,1,TrHs)) begin
    if (nonblank(todep)) then begin
      if (Depr.Code>todep) then begin
        TrHs = false;
      end;
    end;  
    if (TrHs) then begin
      printdepf = true;
      PrintCategoryDepreciation(RepSpec,frcategory,tocategory,Depr,depdprval,printdepf);
      if (depdprval!=blankval) then begin
        Gray_Divider(0,1);
        StartFormat(15);
         OutString(300,0,Depr.Code,false);
         OutVal(480,0,depdprval,M4Val,true);
         totdprval = totdprval + depdprval;
        EndFormat;
      end;  
    end;
  end;
  RETURN;
END;

procedure PrintCategoryDepartment(record RcVc RepSpec,string frdep,string todep,string frcategory,string tocategory,var val totdprval)
BEGIN
  Boolean TrHs,testf;
  record AT2UnitVc ATUnitr;
  string 20 lastcat;
  val catdprval,catqty;
  Boolean printcatf;
  Array string 20 adepcode;
  Array string 60 adepdesc;
  Array val adepdprval;
  Integer arrcnt;
  
  printcatf = true;
  TrHs = true;
  ATUnitr.AT2Code = frcategory;
  while (LoopKey("AT2Code",ATUnitr,1,TrHs)) begin
    if (nonblank(ATUnitr.AT2Code)) then begin
    if ((lastcat!=ATUnitr.AT2Code) and (nonblank(lastcat))) then begin
      if (catdprval!=blankval) then begin
        PrintDepArray(adepcode,adepdesc,adepdprval,arrcnt);
        InitDepArray(adepcode,adepdesc,adepdprval,arrcnt);
        Gray_Divider(300,1);
        StartFormat(15);
         OutString(300,0,lastcat,false);
         OutVal(420,0,catqty,M4Qty,true);
         OutVal(480,0,catdprval,M4Val,true);
        EndFormat;
        totdprval = totdprval + catdprval;
        catdprval = blankval;
        catqty = blankval;
        Gray_Divider(0,1);
        printcatf = true;
      end;
    end;
    if (nonblank(tocategory)) then begin
      if (ATUnitr.AT2Code>tocategory) then begin
        TrHs = false;
      end;
    end;
    testf = true;
    if (nonblank(RepSpec.ObjStr)) then begin
      if (SetInSet(RepSpec.ObjStr,ATUnitr.Objects)==false) then begin
        testf = false;
      end;
    end;    
    if (TrHs and testf) then begin    
      PrintDepartmentDepreciation(RepSpec,ATUnitr,frdep,todep,catdprval,ATUnitr.AT2Code,printcatf,adepcode,adepdesc,adepdprval,arrcnt);
      catqty = catqty + ATUnitr.Quantity;
    end;
    end;
    lastcat = ATUnitr.AT2Code;
  end;
  if (catdprval!=blankval) then begin
    PrintDepArray(adepcode,adepdesc,adepdprval,arrcnt);  
    Gray_Divider(300,1);
    StartFormat(15);
     OutString(300,0,lastcat,false);
     OutVal(420,0,catqty,M4Qty,true);
     OutVal(480,0,catdprval,M4Val,true);
    EndFormat;
    totdprval = totdprval + catdprval;
  end;
  RETURN;
END;

global
procedure AT2CatAcumRn(record RcVc RepSpec)
BEGIN
  string 20 frcategory,tocategory;
  string 10 frdep,todep;
  Integer rw;
  string 255 tstr;
  val totdprval;
  
  frdep = FirstInRange(RepSpec.f1,10);
  todep = LastInRange(RepSpec.f1,10);
  frcategory = FirstInRange(RepSpec.f2,20);
  tocategory = LastInRange(RepSpec.f2,20);
  
  StartReportJob(USetStr(9730));
   rw = 1;  
   HTDepartments(frdep,todep,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   if (RepSpec.flags[0]==0) then begin
     tstr = USetStr(9737);
   end;
   if (RepSpec.flags[0]==1) then begin
     tstr = USetStr(9738);
   end;
   Header(rw,tstr,0);
   HTCategories(frcategory,tocategory,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   if (nonblank(RepSpec.ObjStr)) then begin
     HTObj(RepSpec.ObjStr,tstr);
     Header(rw,tstr,1);
     rw = rw + 1;     
   end;
   tstr = RepSpec.d1;
   Header(rw,tstr,1);
   rw =rw +1;   
  EndHeader;
  
  if (blankdate(RepSpec.d1)) then begin
    goto LEnd;
  end;
  if (RepSpec.flags[0]==0) then begin
    StartFormat(15);
     OutString(0,0,USetStr(9731),false);
     OutString(70,0,USetStr(9732),false);
     OutString(480,0,USetStr(9734),true);
    EndFormat;
    Gray_Divider(0,1);
    PrintCategoryDepartment(RepSpec,frdep,todep,frcategory,tocategory,totdprval);
  end;  
  
  if (RepSpec.flags[0]==1) then begin
    StartFormat(15);
     OutString(0,0,USetStr(9732),false);
     OutString(70,0,USetStr(9731),false);
     OutString(480,0,USetStr(9734),true);
    EndFormat;
    Gray_Divider(0,1);
    PrintDepartmentCategory(RepSpec,frdep,todep,frcategory,tocategory,totdprval);
  end;

  Gray_Divider(0,1);
  StartFormat(15);
   OutString(300,0,USetStr(9735),false);
   OutVal(480,0,totdprval,M4UVal,true);
  EndFormat;  
LEnd:;  
  EndJob;        
  RETURN;
END;
