external procedure HTItem(string,var string);
external procedure HTArtGroup(string, var string);
external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean SetInSet2(string,string);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure HT2Per(Date, Date,var string);
external procedure HTDetailLevel(Integer, var string);
external procedure HTOKF(Integer,Integer, var string);
external procedure HTNr(Integer,Integer,LongInt,LongInt,var string);

function Boolean FindBasePriceChange(string artcode,Date td,var record BPCVc BPCr,var row BPCVc BPCrw)
begin
  Boolean res;
  Boolean found,testf;
  string 255 keystr;
  Integer i,rwcnt;
  
  RecordClear(BPCr);
  ClearRow(BPCr,BPCrw,1);
  keystr = "ArtCode:" & artcode;
  BPCr.TransDate = td;
  found = true;
  while (LoopBackKey(keystr,BPCr,2,found)) begin
    if (BPCr.TransDate>td) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
//      if (BPCr.OKFlag==0) then begin testf = false; end;
      if (testf) then begin
        rwcnt = MatRowCnt(BPCr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(BPCr,i,BPCrw);
          if (BPCrw.ArtCode==artcode) then begin
            res = true;            
            goto LFindBasePriceChange;
          end;
        end;
      end;
    end;
  end;
LFindBasePriceChange:;  
  FindBasePriceChange = res;
  return;
end;

global
procedure PUListRn(record RcVc RepSpec)
begin
  string 20 frit,toit;
  string 20 frin,toin;
  Integer rw;
  String 255 tstr;
  String 20 ckey;
  LongInt frorder,toorder;
  LongInt afr,ato;
  LongInt cnt;
  record INVc INr;
  record PUVc PUr;
  row PUVc PUrw;
  Integer i,rwcnt;
  Boolean found,testf;
  val vatv,t1,diff;
  vector val vtot;
  record BPCVc BPCr;
  row BPCVc BPCrw;

  frit = FirstInRange(RepSpec.Stext,20);
  toit = LastInRange(RepSpec.Stext,20);
  frin = FirstInRange(RepSpec.LastAcc,20);
  toin = LastInRange(RepSpec.LastAcc,20);
  afr = FirstInRange(RepSpec.f1,30);
  ato = LastInRange(RepSpec.f1,30);

  frorder = FirstInRange(RepSpec.TransStr,20);
  toorder = LastInRange(RepSpec.TransStr,20);

  StartReportJob(USetStr(2601));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;

  HTDetailLevel(RepSpec.ArtMode,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;

  HTNr(2608,2609,afr,ato,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;

  HTNr(2610,2611,frorder,toorder,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;  
  
  switch (RepSpec.flags[6]) begin
    case 0: tstr = USetStr(2598);
    case 1: tstr = USetStr(2599);
    case 2: tstr = USetStr(2600);
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
  
  switch (RepSpec.flags[7]) begin
    case 0: tstr = USetStr(27450);
    case 1: tstr = USetStr(27451);
    case 2: tstr = USetStr(27452);
  end;
  Header(rw,tstr,1);
  rw = rw + 1;

  tstr = "";
  if nonblank(RepSpec.f2) then begin
    tstr = USetStr(1213);
    tstr = tstr & RepSpec.f2;
  end;
  if nonblank(tstr) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f3)) then begin
    tstr = USetStr(2768);
    tstr = tstr & ": " & RepSpec.f3;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;

  HTOKF(RepSpec.flags[1],RepSpec.flags[2],tstr);
  Header(rw,tstr,1);
  rw = rw + 1; 
  HTItem(RepSpec.LastAcc,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (HasItemGroups) then begin
    HTArtGroup(RepSpec.Stext,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasItemClassification) then begin
    HTItemClass(RepSpec.f7,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;  
  EndHeader;
  SetRepCol(2,30);
  SetRepCol(3,200);
  SetRepCol(4,220);
  SetRepCol(5,270);
  SetRepCol(6,320);
  SetRepCol(7,360);
  SetRepCol(8,400);
  SetRepCol(9,445);

  StartFormat(15);
  OutString(0,0,USetStr(19501),false);
  OutString(2,0,USetStr(19502),false);
  OutString(130,0,USetStr(19503),false);
  OutString(170,0,USetStr(19504),false);
  OutStringAdjustBiDi(4,0,USetStr(19505),true,M4Val,515);
  OutStringAdjustBiDi(5,0,USetStr(19506),true,M4Val,515);
  OutStringAdjustBiDi(6,0,USetStr(19507),true,M4Val,515);
  OutStringAdjustBiDi(7,0,USetStr(19508),true,M4Val,515);
  OutStringAdjustBiDi(8,0,USetStr(19509),true,M4Val,515);
  OutStringAdjustBiDi(9,0,USetStr(19510),true,M4Val,515);
  OutStringAdjustBiDi(1,0,USetStr(19511),true,M4Val,515);
  EndFormat;
  Gray_Divider(0,1);
  cnt = 1;

  ckey = "TransDate";
  PUr.TransDate = RepSpec.sStartDate;
  found = true;        
  while LoopKey(ckey,PUr,1,found) begin
    if (PUr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    if (found) then begin
      testf = true;
      switch (RepSpec.flags[5]) begin
        case 1:
          if (nonblank(RepSpec.f1)) then begin
            if (PUr.SerNr<afr) then begin testf = false; end;
            if (PUr.SerNr>ato) then begin testf = false; end;
          end;
        case 2:
          if (nonblank(RepSpec.f1)) then begin
            if (PUr.SerNr<afr) then begin testf = false; end;
            if (PUr.SerNr>ato) then begin testf = false; end;
          end;
      end;
      if (nonblank(RepSpec.f2) and (RepSpec.f2<>PUr.VECode)) then begin
        testf = false;
      end;
      if nonblank(RepSpec.TransStr) then begin
        if ((PUr.PONr<frorder) or (PUr.PONr>toorder)) then begin
          testf = false;
        end;
      end;
      if ((PUr.TransDate<RepSpec.sStartDate) or (PUr.TransDate>RepSpec.sEndDate)) then begin
        testf = false;
      end;
      if ((RepSpec.flags[1]==0) and (PUr.OKFlag==0)) then begin testf = false; end;
      if ((RepSpec.flags[2]==0) and (PUr.OKFlag<>0)) then begin testf = false; end;
      if (PUr.Invalid!=0) then begin testf = false; end;
      if (testf) then begin
        rwcnt = MatRowCnt(PUr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(PUr,i,PUrw);
          ReadFirstItem(PUrw.ArtCode,INr,false,true);
          testf = true;
          if (nonblank(RepSpec.LastAcc)) then begin
            if (INr.Code<frin) or (INr.Code>toin) then begin 
              testf = false;
            end;
          end;
          if (nonblank(RepSpec.Stext)) then begin
            if (INr.Group<frit) or (INr.Group>toit) then begin 
              testf = false;              
            end; 
          end;
          if (testf) then begin
            if (nonblank(RepSpec.f7)) then begin
              if (SetInSet2(RepSpec.f7,INr.DispGroups)==false) then begin
                testf = false;
              end;
            end;            
          end;
          if (testf) then begin
            diff = blankval;
            StartFormat(15);
             OutStringID(0,"DblPUVc",cnt,false,PUr.SerNr);
             OutString(2,0,PUrw.ArtCode,false);
             OutString(130,0,PUr.TransDate,false);
             OutString(170,0,PUrw.UnitCode,false);
             OutVal(4,0,PUrw.Quant,M4Qty,true);
             OutVal(5,0,PUrw.UPrice,M45Val,true);
             OutVal(6,0,PUrw.Quant*PUrw.UPrice,M4Val,true);
             if (FindBasePriceChange(INr.Code,PUr.TransDate,BPCr,BPCrw)) then begin
               diff = PUrw.Quant*BPCrw.BasePriceAfter - PUrw.Quant*PUrw.UPrice;
             end;
             OutVal(7,0,diff,M4Val,true);
             MulVATIV(PUrw.VATCode,PUrw.Sum + diff,vatv,t1,PUr.InclVAT,PUr.NoTAXonVAT);
             OutVal(8,0,vatv,M4Val,true);
             OutVal(9,0,PUrw.Quant*PUrw.UPrice+vatv,M4Val,true);
             OutVal(1,0,(PUrw.Quant*PUrw.UPrice+vatv)/PUrw.Quant,M4Val,true);
            EndFormat;
            vtot["col06"] = vtot["col06"] + PUrw.Quant;
            vtot["col07"] = vtot["col07"] + PUrw.Quant*PUrw.UPrice;
            vtot["col08"] = vtot["col08"] + diff;
            vtot["col09"] = vtot["col09"] + vatv;
            vtot["col10"] = vtot["col10"] + PUrw.Quant*PUrw.UPrice+vatv;
            vtot["col11"] = vtot["col11"] + (PUrw.Quant*PUrw.UPrice+vatv)/PUrw.Quant;
            cnt = cnt + 1;
          end;
        end;
      end;
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
   OutVal(4,0,vtot["col06"],M4Qty,true);
   OutVal(5,0,vtot["col06"],M45Val,true);
   OutVal(6,0,vtot["col07"],M4Val,true);
   OutVal(7,0,vtot["col08"],M4Val,true);
   OutVal(8,0,vtot["col09"],M4Val,true);
   OutVal(9,0,vtot["col10"],M4Val,true);
   OutVal(1,0,vtot["col11"],M4Val,true);
  EndFormat;
  StartFormat(30);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(19512),false);
  OutString(150,0,USetStr(19513),false);
  OutString(300,0,USetStr(19514),false);
  EndFormat;
  EndJob;
  return;
end;