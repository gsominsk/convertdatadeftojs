external function Boolean HasMultiLocations();
external procedure HTLocations(string, string, var string);
external function Boolean WrapAndPrint(Integer,string,Integer);
external procedure HTOrder(LongInt,LongInt,var string );
external procedure HT2Per(Date, Date , var string);

procedure PrintHeader()
BEGIN
  StartFormat(15);
  OutString(0,0,USetStr(2325),false);
  OutString(60,0,USetStr(2326),false);
  OutString(180,0,USetStr(2358),false);
  OutString(280,0,USetStr(7633),true);
  OutString(340,0,USetStr(7634),true);
  OutString(420,0,USetStr(7632),true);
//  OutString(440,0,USetStr(4856),true);
  OutString(1,0,USetStr(2355),true);   
  EndFormat;
  Gray_Divider(0,1);
  RETURN;
END;

procedure PrintSTP(string stdproblem)
BEGIN
  record StandProblemVc STPr;
  
  STPr.Code = stdproblem;
  if (ReadFirstMain(STPr,1,true)) then begin
      StartFormat(15);
      OutString(0,"DblStandProblemVc",STPr.Code,false);
      OutString(100,0,STPr.ShortDesc,false);
      EndFormat;
      if nonblank(STPr.Comment1) then begin
        StartFormat(15);
        OutString(0,0,STPr.Comment1,false);
        EndFormat;
      end;
      if nonblank(STPr.Comment2) then begin
        StartFormat(15);
        OutString(0,0,STPr.Comment2,false);
        EndFormat;
      end;
      if nonblank(STPr.Comment3) then begin
        StartFormat(15);
        OutString(0,0,STPr.Comment3,false);
        EndFormat;
      end;
      Gray_Divider(0,200);
  end;
  RETURN;
END;
        
procedure PrintSVOTInfo(string serialnr)
BEGIN
  Integer ti,tirwcnt;
  record SVOTextVc SVOTr;
  row SVOTextVc SVOTrw;

  SVOTr.SerialNr = serialnr;
  if (ReadFirstMain(SVOTr,1,true)) then begin
    tirwcnt = MatRowCnt(SVOTr);
    for (ti=0;ti<tirwcnt;ti=ti+1) begin
      MatRowGet(SVOTr,ti,SVOTrw);
      StartFormat(15);
      OutString(15,0,SVOTrw.Spec,false);
      EndFormat;
    end;
    Gray_Divider(0,200);
  end;
  RETURN;
END;

procedure PrintSVOInfo(record SVOVc SVOr)
BEGIN
  StartFormat(15);
  OutString(0,0,USetStr(7629),false);
  OutLongInt(110,"DblSVOVc",SVOr.SerNr,false);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(7628),false);
  OutString(70,0,SVOr.CustCode,false);
  OutString(110,0,SVOr.Addr0,false);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(8151),false);
  OutDate(70,0,SVOr.TransDate,false);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(8152),false);
  OutString(70,0,SVOr.PlanShip,false);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(8153),false);
  OutString(70,0,SVOr.Addr1,false);
  EndFormat;
  StartFormat(5);
  EndFormat;
  if (nonblank(SVOr.Comment1)) then begin
    StartFormat(15);
    OutString(60,0,SVOr.Comment1,false);
    EndFormat;
  end;  
  if (nonblank(SVOr.Comment2)) then begin
    StartFormat(15);
    OutString(60,0,SVOr.Comment2,false);
    EndFormat;
  end;  
  if (nonblank(SVOr.Comment3)) then begin
    StartFormat(15);
    OutString(60,0,SVOr.Comment3,false);
    EndFormat;
  end;  
  if (nonblank(SVOr.Comment4)) then begin
    StartFormat(15);
    OutString(60,0,SVOr.Comment4,false);
  EndFormat;
  end;  
  Gray_Divider(0,1);
  RETURN;
END;
    
procedure PrintWSIV(record RcVc RepSpec,LongInt fror,LongInt toor,record SVOVc SVOr,row SVOVc SVOrw,var Boolean printf,var val TotWSIV)    
begin    
  Boolean TrHs,testf,printed;
  record WSIVVc WSIVr;
  
  TrHs = true;        
  ResetLoop(WSIVr);
  WSIVr.SVONr = SVOr.SerNr;
  while (LoopKey("SVONr",WSIVr,1,TrHs)) begin
    testf = true;
    if (RepSpec.flags[0]==1) then begin 
      if (WSIVr.InvNr>0) then begin
        testf = false; 
      end;  
    end;
    if (WSIVr.SVONr!=SVOr.SerNr) then begin
      TrHs = false;
    end;          
    if (testf and TrHs) then begin
      if (printf) then begin
        printed = true;
        if (fror!=toor) then begin
          PrintSVOInfo(SVOr);
        end;
        PrintSVOTInfo(SVOrw.SerialNr);
        PrintSTP(SVOrw.StandProblem);
        PrintHeader;
        printf = false;
      end;
      if (SVOrw.SerialNr==WSIVr.MotherNr) then begin
        StartFormat(15);
        printed = true;
        OutStringID(0,"DblWSIVVc",WSIVr.ArtCode,false,WSIVr.CUCode & "," & WSIVr.RecType & "," & WSIVr.SerNr & "," & WSIVr.Row);
        OutString(60,0,Left(WSIVr.Comment,25),false);
        switch (WSIVr.Type) begin
          case 1: OutString(180,0,USetStr(8154),false);
          case 2: OutString(180,0,USetStr(8155),false);
          case 3: OutString(180,0,USetStr(8156),false);
          case 4: OutString(180,0,USetStr(7768),false);
        end;
        switch (WSIVr.RecType) begin
          case kWSIVRecTypeReturnGoods:
            WSIVr.InvQty = -WSIVr.InvQty;
            WSIVr.UsedQty = -WSIVr.UsedQty;
            WSIVr.Sum = -WSIVr.Sum;
        end;
        OutVal(280,0,WSIVr.UsedQty,M4Qty,true);
        if (WSIVr.InvNr>0) then begin
          OutVal(340,0,WSIVr.InvQty,M4Qty,true);
        end else begin
          if (WSIVr.Type==1) then begin
            OutVal(340,0,WSIVr.InvQty,M4Qty,true);
          end else begin
            OutString(380,0,"0",true);
          end;
        end;  
        OutVal(420,0,WSIVr.CostPrice,M4Val,true);
        OutVal(480,0,WSIVr.Sum,M4Val,true);
        EndFormat;
        TotWSIV = TotWSIV + WSIVr.Sum;
       end;
     end;  
  end;
  if (printed) then begin
    Black_Divider(0,1);
  end;
  return;
end;
            
procedure PrintWorkOrders(record RcVc RepSpec,record SVOVc SVOr)
begin
  record WOVc WOr;
  Boolean found;
  Integer count;
  Boolean testf,firstf;

  firstf = true;
  found = true;
  WOr.SVOSerNr = SVOr.SerNr;
  while (LoopBackKey("SVOSerNr",WOr,1,found)) begin
    if (WOr.SVOSerNr!=SVOr.SerNr) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (testf) then begin
        if (firstf) then begin
          StartFormat(15);
          OutString(0,0,USetStr(8162),false);
          EndFormat;
          Black_Divider(0,1);
          StartFormat(15);
          OutString(0,0,USetStr(2741),false);
          OutString(70,0,USetStr(2623),false);
          EndFormat;
          Gray_Divider(0,1);
          firstf = false;
        end;      
        StartFormat(15);
        OutString(0,"DblWOVc",WOr.SerNr,false);
        OutDate(70,0,WOr.TransDate,false);
        EndFormat;
      end;
    end;
  end;
  if (firstf==false) then begin
    Black_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;
  return;
end;

procedure PrintInvoices(record RcVc RepSpec,record SVOVc SVOr)
begin
  record IVVc IVr;
  Boolean found;
  Integer count;
  Boolean testf,firstf;

  firstf = true;
  found = true;
  IVr.SVONr = SVOr.SerNr;
  while (LoopBackKey("SVONr",IVr,1,found)) begin
    if (IVr.SVONr!=SVOr.SerNr) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (testf) then begin
        if (firstf) then begin
          StartFormat(15);
          OutString(0,0,USetStr(8163),false);
          EndFormat;
          Black_Divider(0,1);
          StartFormat(15);
          OutString(0,0,USetStr(2741),false);
          OutString(70,0,USetStr(2623),false);
          EndFormat;
          Gray_Divider(0,1);
          firstf = false;
        end;      
        StartFormat(15);
        OutString(0,"DblIVVc",IVr.SerNr,false);
        OutDate(70,0,IVr.TransDate,false);
        EndFormat;
      end;
    end;
  end;
  if (firstf==false) then begin
    Black_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;
  return;
end;
  
procedure PrintOffHires(record RcVc RepSpec,record SVOVc SVOr)
begin
  record OffHireVc OHr;
  Boolean found;
  Integer count;
  Boolean testf,firstf;

  firstf = true;
  found = true;
  OHr.SVONr = SVOr.SerNr;
  while (LoopBackKey("SVONr",OHr,1,found)) begin
    if (OHr.SVONr!=SVOr.SerNr) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (testf) then begin
        if (firstf) then begin
          StartFormat(15);
          OutString(0,0,USetStr(11404),false);
          EndFormat;
          Black_Divider(0,1);
          StartFormat(15);
          OutString(0,0,USetStr(2741),false);
          OutString(70,0,USetStr(2623),false);
          EndFormat;
          Gray_Divider(0,1);
          firstf = false;
        end;      
        StartFormat(15);
        OutString(0,"DblOffHireVc",OHr.SerNr,false);
        OutDate(70,0,OHr.TransDate,false);
        EndFormat;
      end;
    end;
  end;
  if (firstf==false) then begin
    Black_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;
  return;
end;

procedure PrintDispatches(record RcVc RepSpec,record SVOVc SVOr)
begin
  record DispatchVc Dispatchr;
  Boolean found;
  Integer count;
  Boolean testf,firstf;

  firstf = true;
  found = true;
  Dispatchr.SVONr = SVOr.SerNr;
  while (LoopBackKey("SVONr",Dispatchr,1,found)) begin
    if (Dispatchr.SVONr!=SVOr.SerNr) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (testf) then begin
        if (firstf) then begin
          StartFormat(15);
          OutString(0,0,USetStr(11403),false);
          EndFormat;
          Black_Divider(0,1);
          StartFormat(15);
          OutString(0,0,USetStr(2741),false);
          OutString(70,0,USetStr(2623),false);
          EndFormat;
          Gray_Divider(0,1);
          firstf = false;
        end;      
        StartFormat(15);
        OutString(0,"DblDispatchVc",Dispatchr.SerNr,false);
        OutDate(70,0,Dispatchr.TransDate,false);
        EndFormat;
      end;
    end;
  end;
  if (firstf==false) then begin
    Black_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;
  return;
end;

procedure PrintFirstLineOfActivityNote(record ActVc Actr)
begin
  record NotepadVc Noter;
  record RLinkVc RLr;
  Integer notenr;
  string 255 tstr;

  notenr = 1;
  if (ReadRecordLink(Actr,notenr,Noter,RLr)) then begin
  
    if (LineTextCnt(Noter)>0) then begin
      tstr = LineTextGet(Noter,0);
      StartFormat(15);
      OutString(80,0,"Note",false); //USetStr(6675)
      OutString(140,0,tstr,false);
      EndFormat;
    end;
  end;
  return;
end;

procedure PrintActivity(record RcVc RepSpec,record ActVc Actr)
begin
  Integer i,rwcnt;
  row ActVc Actrw;

  StartFormat(15);
   if (Actr.OKFlag==0) then begin 
     OutString(0,0,"",false);
   end else begin
     OutString(0,0,USetStr(10115),false);
   end;
   OutStringID(50,"DblActRec",Actr.TransDate,false,Actr.SerNr);
   OutString(120,0,Actr.ActType,false);
   OutString(160,"DblCustAct",Actr.MainPersons,false);
   if (WrapAndPrint(200,Actr.Comment,60)) then begin
     EndFormat;
   end;     
  if (RepSpec.ArtMode==1) then begin
    rwcnt = MatRowCnt(Actr);
    for (i = 0 ; i<rwcnt ;i=i+1) begin
      MatRowGet(Actr,i,Actrw);
      StartFormat(15);
      OutString(80,0,Actrw.TextCode,false);
      if (WrapAndPrint(140,Actrw.Text,70)) then begin
        EndFormat;
      end;     
    end;
    PrintFirstLineOfActivityNote(Actr);
  end;
  return;
end;

procedure PrintActivities(record RcVc RepSpec,record SVOVc SVOr)
begin
  Boolean found,firstf,testf;
  record ActVc Actr;
  
  firstf = true;
  found = true;
  Actr.SVOSerNr = SVOr.SerNr;
  while (LoopKey("SVOSerNr",Actr,1,found)) begin
    if (found) then begin
      if (Actr.SVOSerNr!=SVOr.SerNr) then begin found = false; end;
    end;  
    if (found) then begin
      testf = true;
      if (Actr.Invalid==1) then begin
        testf = false;
      end;
      if (testf) then begin
        if (firstf) then begin
          StartFormat(15);
          OutString(0,0,USetStr(6678),false);
          EndFormat;
          Black_Divider(0,1);
          StartFormat(15);
          OutString(50,0,USetStr(6682),false);
          OutString(120,0,USetStr(6676),false);
          OutString(160,0,USetStr(6684),false);
          OutString(200,0,USetStr(6685),false);
          EndFormat;
          Gray_Divider(0,1);
          firstf = false;
        end;
        PrintActivity(RepSpec,Actr);
      end;
    end;
  end;
  if (firstf==false) then begin
    Black_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;
  return;
end;
               
procedure PrintPurchaseOrder(record RcVc RepSpec,record POVc POr)
begin
  Integer i,rwcnt;
  row POVc POrw;
  
  StartFormat(15);
  OutString(0,0,USetStr(4942),false);
  OutString(60,0,USetStr(4943),false);
  OutString(120,0,USetStr(4944),false);
  OutString(180,0,"",false);
  OutString(1,0,USetStr(2638),true);
  EndFormat;
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,"DblPOVc",POr.SerNr,false);
  OutDate(60,0,POr.TransDate,false);
  OutString(120,"DblCUVc",POr.VECode,false);
  OutString(180,0,POr.Addr0,false);
  OutDate(1,0,POr.PlanShip,true);
  EndFormat;
  rwcnt = MatRowCnt(POr);
  StartFormat(15);
  OutString(40,0,USetStr(8279),false);
  OutString(140,0,USetStr(8280),false);
  OutString(400,0,USetStr(5050),true);
  OutString(1,0,USetStr(5051),true);
  EndFormat;
  Gray_Divider(40,1);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POr,i,POrw);
    StartFormat(15);
    OutString(40,"DblINVc",POrw.ArtCode,false);
    OutString(140,0,POrw.Spec,false);
    OutVal(400,0,POrw.Quant,M4UVal,true);
    OutVal(1,0,POrw.Shipd1,M4UVal,true);
    EndFormat;
  end;
  return;
end;

procedure PrintPurchaseOrders(record RcVc RepSpec,record SVOVc SVOr)
begin
  Boolean found,testf,printf;
  record POVc POr;
  
  found = true;
  POr.SVONr = SVOr.SerNr;
  while (LoopKey("SVONr",POr,1,found)) begin
    if (found) then begin
      if (POr.SVONr!=SVOr.SerNr) then begin found = false; end;
    end;  
    if (found) then begin
      testf = true;
      if (testf) then begin
        if (!printf) then begin
          StartFormat(15);
          OutString(0,0,USetStr(14569),false);
          EndFormat;
          Black_Divider(0,1);
          printf = true;
        end else begin
          StartFormat(15);
          EndFormat;
        end;
        PrintPurchaseOrder(RepSpec,POr);
      end;
    end;
  end;
  if (printf) then begin
    Black_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;
  return;
end;
               
global
procedure SVOStaRn(record RcVc RepSpec)
begin
  record SVOVc SVOr;
  row SVOVc SVOrw;
  Integer i,rwcnt;
  Boolean TrHs,TrHsSVO,printf,testf,testSVOf;
  string 255 tstr;
  LongInt fror,toor;
  Integer rw;
  val TotWSIV;
  
  tstr = USetStr(8150);
  if (RepSpec.long1!=-1) then begin
//    tstr = tstr & RepSpec.long1;
  end;  
  if (blankdate(RepSpec.sStartDate)) then begin RepSpec.sStartDate = CurrentDate; end;
  if (blankdate(RepSpec.sEndDate)) then begin RepSpec.sEndDate = CurrentDate; end;
  fror = FirstInRange(RepSpec.f1,10);
  toor = LastInRange(RepSpec.f1,10);
  StartReportJob(tstr);
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTOrder(fror,toor,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (HasMultiLocations) then begin 
    HTLocations(RepSpec.FirstAcc,RepSpec.FirstAcc,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;  
  end;
  if (RepSpec.flags[0]==1) then begin
    tstr = USetStr(8159);
    Header(rw,tstr,1);
    rw = rw + 1;
  end else begin
    tstr = USetStr(8158);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  EndHeader;
  
  if (RepSpec.long1!=-1) then begin
    fror = RepSpec.long1;
    toor = RepSpec.long1;
  end;  
  SVOr.SerNr = fror;
  TrHsSVO = true;
  while (LoopMain(SVOr,1,TrHsSVO)) begin
    TotWSIV = blankval;
    if (toor!=-1) then begin
      if (SVOr.SerNr>toor) then begin TrHsSVO = false; end;
    end;  
    testSVOf = true;
    if (RepSpec.long1<=0) then begin
      if (DateInRange(SVOr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testSVOf = false; end;
    end;
    if (nonblank(RepSpec.FirstAcc)) then begin    /* Location  */
      if (SVOr.ServLocation!=RepSpec.FirstAcc) then begin testSVOf = false; end;
    end;
    printf = true;
    if (TrHsSVO and testSVOf) then begin
      if (fror==toor) then begin
        PrintSVOInfo(SVOr);
      end;
      PrintWorkOrders(RepSpec,SVOr);
      PrintOffHires(RepSpec,SVOr);
      PrintDispatches(RepSpec,SVOr);
      PrintActivities(RepSpec,SVOr);
      PrintPurchaseOrders(RepSpec,SVOr);
      PrintInvoices(RepSpec,SVOr);
      rwcnt = MatRowCnt(SVOr);
      for (i=0;i<rwcnt;i = i +1) begin
        MatRowGet(SVOr,i,SVOrw);        
        PrintWSIV(RepSpec,fror,toor,SVOr,SVOrw,printf,TotWSIV);
        //if (printf) then begin Black_Divider(0,1); end;        
      end;
      if (TotWSIV>0) then begin  //rb
        Gray_divider(380,1);  //rb
        StartFormat(15);  //rb
        OutVal(480,0,TotWSIV,M4Val,true);
        EndFormat;
      end;      
    end;
  end;  
  EndJob;
  return;
end;
