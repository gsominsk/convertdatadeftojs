external function Boolean DateTimeInsideDateTime(Date,Time,Date,Time,Date,Time,Date,Time);
external procedure vTimeDiff(Time,Time,var val);
external function LongInt DateDiff(Date,Date);
external function Time AddTime_Minutes(Time,Time);
external function Time TimeDiff(Time,Time);
external function LongInt TimeDiffInSeconds(Time,Time);
external procedure HT2Per(Date, Date , var string);
external procedure HTPers(string,var string);

function Time CalcDuration(Date ed,Time et,Date sd,Time st)
begin
  Time res;
  Time t;
  Integer days;
  LongInt seconds;
  
  if (ed==sd) then begin
    res = TimeDiff(st,et);  
  end else begin
    t.hour = 23; t.minute = 59; t.second = 59;
    seconds = TimeDiffInSeconds(st,t);
    t.hour = 0; t.minute = 0; t.second = 0;
    seconds = seconds + TimeDiffInSeconds(t,et);
    if (seconds>24*60*60) then begin
      t.hour = 23; t.minute = 59; t.second = 59;
      res = t;
    end else begin
      res = TimeDiff(st,t);  
      t.hour = 0; t.minute = 0; t.second = 0;
      t = TimeDiff(t,et);
      res = AddTime_Minutes(res,t);
      days = DateDiff(ed,sd);
      if (days>1) then begin
        t.hour = 23; t.minute = 59; t.second = 59;
        res = t;
      end;
    end;  
  end;        
/*
should have been DUration and below code
    Actr.CostTime = TimeDiff(st,t);  
    t.hour = 0; t.minute = 0; t.second = 0;
    t = TimeDiff(t,et);
    Actr.CostTime = AddTime_Minutes(Actr.CostTime,t);
    days = DateDiff(ed,sd);
    if (days>1) then begin
      AddTime(Actr.CostTime,(days-1)*3600,Actr.CostTime);
    end;
*/  
  CalcDuration = res;  
  return;
end;

global
function val CalcTimeDiff(Date ed,Time et,Date sd,Time st)
begin
  val res,tmp;
  Time t;
  Integer days;
  LongInt seconds;
  
  if (blank(et)) then begin
    goto LCalcTimeDiff;
  end;
  if (ed==sd) then begin
    vTimeDiff(st,et,res);
  end else begin
    t.hour = 23; t.minute = 59; t.second = 59;
    seconds = TimeDiffInSeconds(st,t);
    t.hour = 0; t.minute = 0; t.second = 0;
    seconds = seconds + TimeDiffInSeconds(t,et);
    t.hour = 23; t.minute = 59; t.second = 59;
    vTimeDiff(st,t,res);
    t.hour = 0; t.minute = 0; t.second = 0;
    vTimeDiff(t,et,tmp);
    res = res + tmp;
    
    days = DateDiff(ed,sd);
    if (days>1) then begin
      res = res + 24*(days-1);
    end;
  end;        
LCalcTimeDiff:;
  CalcTimeDiff = res;  
  return;
end;

function Boolean PrintHoursWorkedPerUser(record UserVc Userr,Date td,Date StartDate,Time StartTime,Date EndDate,Time EndTime,Boolean printheaderf,
                                         var Boolean dateheaderf,var val tottimev)
begin
  Boolean res,testf,prntdf;
  record ActVc Actr;
  Boolean found,userheaderf,hoursworkedprntedf;
  val timev;

  tottimev = blankval;
  userheaderf = true;
  found = true;
  Actr.TodoFlag = kTodoFlagWorkHours;
  Actr.CalTimeFlag = kCalTimeFlagTime;
  Actr.TransDate = td;
  while (LoopKey("TodoUserMain:" & Userr.Code,Actr,3,found)) begin
    if (Actr.TodoFlag!=kTodoFlagWorkHours) then begin found = false; end;
    if (Actr.CalTimeFlag!=kCalTimeFlagTime) then begin found = false; end;
    if (Actr.TransDate!=td) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (printheaderf==false) then begin
        if (DateTimeInsideDateTime(StartDate,StartTime,EndDate,EndTime,
                                   Actr.TransDate,Actr.StartTime,Actr.EndDate,Actr.EndTime)==false) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        prntdf = false;
        if (printheaderf) then begin
          if (dateheaderf) then begin
            StartFormat(15);
             OutDate(0,0,td,false);
             OutString(80,0,USetStr(2792+GetDateID(td)),false);
            EndFormat;
            Gray_Divider(0,1);
            dateheaderf = false;
          end;
          if (userheaderf) then begin
            StartFormat(15);
             OutString(0,0,Userr.Code,false);
             OutString(2,0,Userr.Name,false);
             OutString(3,0,USetStr(18488),false);
             OutString(4,0,Actr.StartTime,false);
             OutString(5,0,Actr.EndTime,false);
             OutDate(6,0,Actr.EndDate,false);
             if (Actr.EndDate!=Actr.TransDate) then begin
               OutString(415,0,USetStr(22175),false);
             end;
             timev = CalcTimeDiff(Actr.EndDate,Actr.EndTime,Actr.TransDate,Actr.StartTime);
             OutVal(1,0,timev,M4Val,true);
             tottimev = tottimev + timev;  
            EndFormat;
            userheaderf = false;
            prntdf = true;
          end;
        end;
        if (prntdf==false) then begin
          StartFormat(15);
           OutString(3,0,USetStr(18488),false);
           OutString(4,0,Actr.StartTime,false);
           OutString(5,0,Actr.EndTime,false);
           OutDate(6,0,Actr.EndDate,false);
           if (Actr.EndDate!=Actr.TransDate) then begin
             OutString(415,0,USetStr(22175),false);
           end;
           timev = CalcTimeDiff(Actr.EndDate,Actr.EndTime,Actr.TransDate,Actr.StartTime);
           OutVal(1,0,timev,M4Val,true);
           tottimev = tottimev + timev;
          EndFormat;
        end;
        res = true;
      end;
    end;
  end;
  if (tottimev!=0) then begin
    Gray_Divider(3,1);
    StartFormat(15);
     OutString(3,0,USetStr(18489),false);
     OutVal(1,0,tottimev,M4Val,true);
    EndFormat;
  end;
  PrintHoursWorkedPerUser = res;
  return;
end;

procedure PrintHoursPerUser(record RcVc RepSpec,record UserVc Userr,Date td,var Boolean dateheaderf)
begin
  record ActVc Actr;
  Boolean found,userheaderf,hoursworkedprntedf;
  val timev,tottimev;
  
  userheaderf = true;
  found = true;
  Actr.TodoFlag = kTodoFlagWorkHours;
  Actr.CalTimeFlag = kCalTimeFlagProfile;
  Actr.TransDate = td;
  while (LoopKey("TodoUserMain:" & Userr.Code,Actr,3,found)) begin
    if (Actr.TodoFlag!=kTodoFlagWorkHours) then begin found = false; end;
    if (Actr.CalTimeFlag!=kCalTimeFlagProfile) then begin found = false; end;
    if (Actr.TransDate!=td) then begin found = false; end;
    if (found) then begin
      if (dateheaderf) then begin
        StartFormat(15);
         OutDate(0,0,td,false);
         OutString(2,0,USetStr(2792+GetDateID(td)),false);
        EndFormat;
        Gray_Divider(0,1);
        dateheaderf = false;
      end;
//      if (userheaderf) then begin
        StartFormat(15);
         OutString(0,0,Userr.Code,false);
         OutString(2,0,Userr.Name,false);
         OutString(3,0,"Planned",false);
         OutString(4,0,Actr.StartTime,false);
         OutString(5,0,Actr.EndTime,false);
         OutDate(6,0,Actr.EndDate,false);
         vTimeDiff(Actr.StartTime,Actr.EndTime,timev);
         timev = CalcTimeDiff(Actr.EndDate,Actr.EndTime,Actr.TransDate,Actr.StartTime);
         OutVal(1,0,timev,M4Val,true);
        EndFormat;
        userheaderf = false;
//      end;
      switch (RepSpec.flags[0]) begin
        case 0:
          hoursworkedprntedf = PrintHoursWorkedPerUser(Userr,td,Actr.TransDate,Actr.StartTime,Actr.EndDate,Actr.EndTime,false,dateheaderf,tottimev);
          Gray_Divider(0,1);
          StartFormat(15);
          EndFormat;
      end;
    end;
  end;
  switch (RepSpec.flags[0]) begin
    case 0:
      if (hoursworkedprntedf==false) then begin
        hoursworkedprntedf = PrintHoursWorkedPerUser(Userr,td,Actr.TransDate,Actr.StartTime,Actr.EndDate,Actr.EndTime,true,dateheaderf,tottimev);
      end;
  end;
  if (userheaderf==false) then begin
    Gray_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;
  return;
end;

procedure PrintUsersHours(record RcVc RepSpec,string frus,string tous,Date td)
begin
  record UserVc Userr;
  Boolean found,dateheaderf;
  
  dateheaderf = true;
  found = true;
  Userr.Code = frus;
  while (LoopMain(Userr,1,found)) begin
    if (nonblank(tous)) then begin
      if (Userr.Code>tous) then begin found = false; end;
    end;
    if (found) then begin
      PrintHoursPerUser(RepSpec,Userr,td,dateheaderf);
    end;
  end;
  return;
end;

global
procedure WorkHoursAnaRn(record RcVc RepSpec)
begin
  Integer rw;
  string 255 tstr;
  string 255 frus,tous;
  Date td;

  frus = FirstInRange(RepSpec.f1,10);
  tous = LastInRange(RepSpec.f1,10);
  StartReportJob(USetStr(18480));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTPers(RepSpec.f1,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;
  SetRepCol(2,70);
  SetRepCol(3,200);
  SetRepCol(4,260);
  SetRepCol(5,310);
  SetRepCol(6,360);
  SetRepCol(7,1);

  StartFormat(15);
   OutString(0,0,USetStr(18481),false);
   OutString(2,0,USetStr(18482),false);
   OutString(3,0,USetStr(18483),false);
   OutString(4,0,USetStr(18484),false);
   OutString(5,0,USetStr(18485),false);
   OutString(6,0,USetStr(18486),false);
   OutString(1,0,USetStr(18487),true);

  EndFormat;
  Gray_Divider(0,1);
  
  td = RepSpec.sStartDate;
  while (td<=RepSpec.sEndDate) begin
    PrintUsersHours(RepSpec,frus,tous,td);
    td = AddDay(td,1);
  end;  
  EndJob;
  return;
end;