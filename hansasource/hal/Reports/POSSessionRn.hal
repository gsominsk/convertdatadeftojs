external procedure HT2Per(Date, Date , var string);

procedure FindPOSSessionStart(record RcVc RepSpec,var record POSEventVc POEventStartr)
begin
  record POSEventVc POSEventr;
  Boolean found,res;

  RecordClear(POEventStartr);
  POSEventr.MachineName = RepSpec.f1;
  POSEventr.Drawer = RepSpec.f4;
  POSEventr.TransDate = RepSpec.sStartDate;
  POSEventr.TransTime = RepSpec.sStartTime;
  found = true;
  while (LoopBackKey("MachineName",POSEventr,4,found)) begin
    if ((POSEventr.TransDate<RepSpec.sStartDate) or ((POSEventr.TransDate==RepSpec.sStartDate) and (POSEventr.TransTime<RepSpec.sStartTime))) then begin
      if ((POSEventr.Event==1) and (POSEventr.MachineName==RepSpec.f1) and (POSEventr.Drawer==RepSpec.f4))  then begin
        res = true;
        goto LFindPOSSessionStart;
      end;
      if ((POSEventr.Event!=1) and (POSEventr.MachineName==RepSpec.f1) and (POSEventr.Drawer==RepSpec.f4))  then begin
        goto LFindPOSSessionStart;
      end;
    end else begin
      goto LFindPOSSessionStart;
    end;
  end;
LFindPOSSessionStart:;  
  if (res) then begin
    RecordCopy(POEventStartr,POSEventr);
  end;
  return;
end;

procedure FindPOSSessionEnd(record RcVc RepSpec,var record POSEventVc POEventEndr)
begin
  record POSEventVc POSEventr;
  Boolean found,res;

  RecordClear(POEventEndr);
  POSEventr.MachineName = RepSpec.f1;
  POSEventr.Drawer = RepSpec.f4;
  POSEventr.TransDate = RepSpec.sStartDate;
  POSEventr.TransTime = RepSpec.sStartTime;
  found = true;
  while (LoopKey("MachineName",POSEventr,4,found)) begin
    if ((POSEventr.TransDate>RepSpec.sStartDate) or ((POSEventr.TransDate==RepSpec.sStartDate) and (POSEventr.TransTime>RepSpec.sStartTime))) then begin
      if ((POSEventr.Event==2) and (POSEventr.MachineName==RepSpec.f1) and (POSEventr.Drawer==RepSpec.f4))  then begin
        res = true;
        goto LFindPOSSessionEnd;
      end;
      if ((POSEventr.Event!=2) and (POSEventr.MachineName==RepSpec.f1) and (POSEventr.Drawer==RepSpec.f4))  then begin
        goto LFindPOSSessionEnd;
      end;
    end else begin
      goto LFindPOSSessionEnd;
    end;
  end;
LFindPOSSessionEnd:;  
  if (res) then begin
    RecordCopy(POEventEndr,POSEventr);
  end;
  return;
end;

procedure POSSessionRnRun(record RcVc RepSpec,Boolean recprinterf)
begin
  record POSEventVc POSEventStartr;
  record POSEventVc POSEventEndr;
  Integer rw;
  string 255 tstr;

  if (recprinterf==false) then begin
    StartReportJob(USetStr(17820));
    rw = 1;
    HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
    Header(rw,USetStr(12541) & ": " & RepSpec.f1,1);
    rw = rw + 1;
    Header(rw,USetStr(12542) & ": " & RepSpec.f4,1);
    rw = rw + 1;
    EndHeader;
  end else begin
  end;
  FindPOSSessionStart(RepSpec,POSEventStartr);
  FindPOSSessionEnd(RepSpec,POSEventEndr);
  if (recprinterf==true) then begin
    StartFormat(15);
     OutString(0,0,USetStr(17827),false);
     OutString(120,0,USetStr(17826),false);
     OutString(180,0,USetStr(17821),false);
     OutString(240,0,USetStr(17822),false);
     OutString(300,0,USetStr(17823),false);
     OutString(360,0,USetStr(17824),false);
     OutString(420,0,USetStr(17825),false);
    EndFormat;
    Gray_Divider(0,1);

    StartFormat(15);
     OutString(0,0,USetStr(17828),false);
     OutString(120,0,POSEventStartr.SerNr,false);
     OutString(180,0,POSEventStartr.MachineName,false);
     OutString(240,0,POSEventStartr.Drawer,false);
     OutString(300,0,POSEventStartr.Sign,false);
     OutString(360,0,POSEventStartr.TransDate,false);
     OutString(420,0,POSEventStartr.TransTime,false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(17829),false);
     OutString(120,0,POSEventEndr.SerNr,false);
     OutString(180,0,POSEventEndr.MachineName,false);
     OutString(240,0,POSEventEndr.Drawer,false);
     OutString(300,0,POSEventEndr.Sign,false);
     OutString(360,0,POSEventEndr.TransDate,false);
     OutString(420,0,POSEventEndr.TransTime,false);
    EndFormat;
  end else begin
    StartFormat(15);
     OutString(0,0,USetStr(17828),false);
     OutString(100,0,POSEventStartr.TransDate,false);
     OutString(160,0,POSEventStartr.TransTime,false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(17821),false);
     OutString(80,0,POSEventStartr.MachineName,false);
     OutString(140,0,USetStr(17822),false);
     OutString(200,0,POSEventStartr.Drawer,false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(17823),false);
     OutString(80,0,POSEventStartr.Sign,false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(17829),false);
     OutString(100,0,POSEventEndr.TransDate,false);
     OutString(160,0,POSEventEndr.TransTime,false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(17821),false);
     OutString(80,0,POSEventEndr.MachineName,false);
     OutString(140,0,USetStr(17822),false);
     OutString(200,0,POSEventEndr.Drawer,false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(17823),false);
     OutString(80,0,POSEventEndr.Sign,false);
    EndFormat;
  end;
  EndJob;
  return;
end;

global
procedure POSSessionRn(record RcVc RepSpec)
begin
  POSSessionRnRun(RepSpec,false);
  return;
end;

global
procedure POSSessionReceiptRn(record RcVc RepSpec)
begin
  POSSessionRnRun(RepSpec,true);
  return;
end;
