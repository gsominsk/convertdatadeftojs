external function roundmode GetTotalRoundMode(record RoundBlock);
external procedure GetAccPeriodComments(Integer,Date,var string,var string,var string,var string,var string,var string,var string);
external function roundmode SetRoundModeD(Integer);
external function string 255 CreateInvoiceNumber(LongInt,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure PrintAgedLine(val,val,val,val,val,val,val,val,val,val,val,Integer,Integer,string);
external function LongInt DateDiff(Date,Date);
external procedure HTCusts(string,string,var string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure CountPeriods(var Integer);
external procedure SumAged(Date,Integer,Integer,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val);

procedure PrintAgedHeader(Date d1,Integer nrofper)
begin
  record AgedBlock AgedRec;
  string 30 tstr1,tstr2,tstr3,tstr4,tstr5,tstr6,tstr7;
  LongInt p1,p2;
  Date agedate;

  BlockLoad(AgedRec);  
  if (AgedRec.UseAccPeriod) then begin
    agedate = d1;
    if (blankdate(agedate)) then begin agedate = CurrentDate; end;
    GetAccPeriodComments(1,agedate,tstr1,tstr2,tstr3,tstr4,tstr5,tstr6,tstr7);
    if (nrofper<=1) then begin
      tstr2 = tstr2 & " - ";
    end;
    if (nrofper<=2) then begin
      tstr3 = tstr3 & " - ";
    end;
    if (nrofper<=3) then begin
      tstr4 = tstr4 & " - ";
    end;
    if (nrofper<=4) then begin
      tstr5 = tstr5 & " - ";
    end;
    if (nrofper<=5) then begin
      tstr6 = tstr6 & " - ";
    end;
    tstr7 = tstr7 & " - ";
  end else begin
    p1 = AgedRec.Per1;
    p2 = AgedRec.Per2;
    if (p1==-1) then begin p1 = 15; end;
    if (p2==-1) then begin p2 = 30; end;
    tstr1 = "0 - " & p1;
    tstr2 = "" & p1+1 & " - " & p2;
    tstr3 = "" & p2+1 & " - "; 
    if (AgedRec.Per3>-1) then begin tstr3 = tstr3 & AgedRec.Per3; end;
    tstr4 = "" & AgedRec.Per3+1 & " - ";
    if (AgedRec.Per4>-1) then begin tstr4 = tstr4 & AgedRec.Per4; end;
    tstr5 = "" & AgedRec.Per4+1 & " - ";
    if (AgedRec.Per5>-1) then begin tstr5 = tstr5 & AgedRec.Per5; end;
    tstr6 = "" & AgedRec.Per5+1 & " - ";
    if (AgedRec.Per6>-1) then begin tstr6 = tstr6 & AgedRec.Per6; end;
    tstr7 = "" & AgedRec.Per6+1 & " - ";
  end;
  StartFormat(15);
  OutString(2,0,USetStr(4052),true);
  OutString(3,0,tstr1,true);
  OutString(4,0,tstr2,true);
  OutString(5,0,tstr3,true);
  if (nrofper>2) then begin
    OutString(6,0,tstr4,true);
  end;
  if (nrofper>3) then begin
    OutString(7,0,tstr5,true);
  end;
  if (nrofper>4) then begin
    OutString(8,0,tstr6,true);
  end;
  if (nrofper>5) then begin
    OutString(9,0,tstr7,true);
  end;
  OutString(1,0,USetStr(4046),true);
  EndFormat;
  Gray_Divider(0,1);
  return;
end;

procedure MakePeriodString(LongInt per1,LongInt per2,var string res)
begin
  string 255 tstr;
  
  res = per1;
  res = res & " - ";
  if (per2<>-1) then begin
     tstr = per2;
     res = res & tstr;
  end;  
  return;
end;

procedure PrintPeriodString(string tstr,string strid,val valp,var Boolean firstf)
begin
  if (valp<>0) then begin
    StartFormat(15);
    if (firstf) then begin
      OutString(130,0,USetStr(2382),false);
      firstf = false;
    end;
    OutString(200,0,tstr,false);
    OutString(260,0,strid,false);
    OutVal(380,0,valp,M4Val,true);
    EndFormat;
  end;  
  return;
end;

procedure PrintAged(val sact,val s0,val s1, val s2, val s3, val s4, val s5, val s6, val s7,Integer nrofper)
begin
  LongInt per1,per2;
  record AgedBlock AgedRec;
  string 255 tstr;
  Boolean firstf;
 
  BlockLoad(AgedRec);
  
  per1 = AgedRec.Per1;
  per2 = AgedRec.Per2;
  if (per1==-1) then begin per1 = 15; end;
  if (per2==-1) then begin per1 = 30; end;

  StartFormat(15);
  OutString(130,0,USetStr(2521),false);
  OutVal(380,0,s0,M4Val,true);
  EndFormat;
  firstf = true;
  MakePeriodString(1,per1,tstr);  
  PrintPeriodString(tstr, USetStr(2383),s1,firstf);
  MakePeriodString(per1+1,per2,tstr);  
  PrintPeriodString(tstr, USetStr(2383),s2,firstf);
  if (nrofper==2) then begin
    MakePeriodString(per2+1,-1,tstr);
    PrintPeriodString(tstr, USetStr(2383),s3,firstf);
  end else begin  
    MakePeriodString(per2+1,AgedRec.Per3,tstr);  
    PrintPeriodString(tstr, USetStr(2383),s3,firstf);
  end;
  if (nrofper==3) then begin
    MakePeriodString(AgedRec.Per3+1,-1,tstr);  
    PrintPeriodString(tstr,USetStr(2383),s4,firstf);
  end else begin
    if (nrofper>3) then begin
      MakePeriodString(AgedRec.Per3+1,AgedRec.Per4,tstr);  
      PrintPeriodString(tstr,USetStr(2383),s4,firstf);
    end;  
  end;
  if (nrofper==4) then begin
    MakePeriodString(AgedRec.Per4+1,-1,tstr);  
    PrintPeriodString(tstr,USetStr(2383),s5,firstf);
  end else begin
    if (nrofper>4) then begin 
      MakePeriodString(AgedRec.Per4+1,AgedRec.Per5,tstr);  
      PrintPeriodString(tstr,USetStr(2383),s5,firstf);
    end;  
  end;
  if (nrofper==5) then begin
    MakePeriodString(AgedRec.Per5+1,-1,tstr);  
    PrintPeriodString(tstr, USetStr(2383),s6,firstf);
  end else begin  
    if (nrofper>5) then begin
      MakePeriodString(AgedRec.Per5+1,AgedRec.Per6,tstr);  
      PrintPeriodString(tstr,USetStr(2383),s6,firstf);
    end;
  end;  
  if (nrofper==6) then begin
    MakePeriodString(AgedRec.Per6+1,-1,tstr);  
    PrintPeriodString(tstr,USetStr(2383),s7,firstf);
  end;  
return;
end;

procedure PrintNSumIPInstall(record RcVc RepSpec,record IVVc IVp,var val ARSump,var val sact,var val s0,var val s1,var val s2,var val s3,var val s4,var val s5,var val s6,var val s7)
BEGIN
  record ARInstallVc ARIr;
  record RoundBlock RoundRec;
  Boolean TrHs;
  LongInt latedays;
  string 255 tstr;
  record AgedBlock Agedb;
  Date thed;

  thed = RepSpec.d1;
  if (blankdate(thed)) then begin 
    thed = CurrentDate;
  end;

  BlockLoad(Agedb);
  BlockLoad(RoundRec);  
  ARIr.InvoiceNr = IVp.SerNr;
  TrHs = true;
  while (LoopMain(ARIr,1,TrHs)) begin
    if (ARIr.InvoiceNr!=IVp.SerNr) then begin TrHs = false; end;
    if (TrHs) then begin
      latedays = DateDiff(ARIr.DueDate,CurrentDate);
      ARSump = ARSump + ARIr.BookRVal;
      if (RepSpec.flags[0]==0) then begin
        StartFormat(15);
        OutDate(0,0,ARIr.DueDate,false);
        tstr = CreateInvoiceNumber(ARIr.InvoiceNr,IVp.OfficialSerNr);
        OutString(70,"DblAR",tstr,false);
        OutString(120,0,ARIr.CustCode,false);
        OutString(200,0,IVp.Addr0,false);//OutString(200,320,0,IVp.Addr0,M4Str,false,false);
        OutVal(400,0,ARIr.BookRVal,M4Val,true);
        OutVal(480,0,ARSump,M4Val,true);
        EndFormat;
      end;
      SumAged(thed,-latedays,Agedb.ActualInvoices,ARIr.BookRVal,sact,s0,s1,s2,s3,s4,s5,s6,s7);
    end;
  end;
  RETURN;
END;

function 
Boolean CheckRepSpecParameters(record RcVc RepSpec,LongInt invnr)
begin
  record IVVc IVr;
  Boolean res;
      
  res = true;  
  if ((nonblank(RepSpec.AccStr)) or (nonblank(RepSpec.f4))) then begin
    IVr.SerNr = invnr;
    if (readfirstmain(IVr,1,true)) then begin
      if (nonblank(RepSpec.AccStr)) then begin
        if (SetInSet(RepSpec.AccStr,IVr.SalesMan)==false) then begin res = false; end;
      end;
      if (nonblank(RepSpec.f4)) then begin
        If ((SetInSet(RepSpec.f4,IVr.Objects))==false) then begin
          res = false;
        end;  
      end;
    end;
  end;
  CheckRepSpecParameters = res;
  return;
end;

global
procedure IPProgRn(record RcVc RepSpec)
BEGIN
  record ARVc ARr;
  record IVVc IVr;
  record IPVc IPr;
  row IPVc IPrw;
  Boolean Accs;
  record ObjVc OBr;
  string 255 ckey,tstr,t2;
  Integer i,rwcnt,rw,nrofper;
  Boolean TrHs,found,testf;
  val ARSum,IPVal,tv;
  val sact,s0,s1,s2,s3,s4,s5,s6,s7,tot;
  val fr,to1,to2,br1,br2;
  LongInt latedays;
  Date pd,blankd,thed;
  record AgedBlock Agedb;
  record AccBlock ARAb;
  record RoundBlock RoundRec;
  Boolean rebf;

  BlockLoad(Agedb);  
  BlockLoad(ARAb); 
  BlockLoad(RoundRec);

  thed = RepSpec.d1;
  if (blankdate(thed)) then begin 
    thed = CurrentDate;
  end;
  StartReportJob(USetStr(2371));
   rw = 1;
   HTCusts(RepSpec.f2,RepSpec.f2,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   if (RepSpec.flags[0]==0) then begin
     tstr = USetStr(2379);
   end else begin
     tstr = USetStr(2380);
   end;  
   Header(rw,tstr,0);
   if (RepSpec.ArtMode==1) then begin
     tstr = USetStr(2378);
   end else begin
     tstr = USetStr(2377);
   end;  
   Header(rw,tstr,1);
   rw = rw + 1;
  EndHeader;
  if (RepSpec.flags[0]==0) then begin
    SetRepCol(3,288);
    SetRepCol(4,384);
    SetRepCol(5,480-(96*1.5));
  end else begin
    CountPeriods(nrofper);
    if (nrofper==2) then begin
      SetRepCol(2,250);
      SetRepCol(3,300);
      SetRepCol(4,350);
      SetRepCol(5,400);
    end;
    if (nrofper==3) then begin
      SetRepCol(2,100);
      SetRepCol(3,180);
      SetRepCol(4,260);
      SetRepCol(5,320);
      SetRepCol(6,400);
    end;
    if (nrofper==4) then begin
      SetRepCol(2,80);
      SetRepCol(3,160);
      SetRepCol(4,240);
      SetRepCol(5,320);
      SetRepCol(6,380);
      SetRepCol(7,430);
    end;
    if (nrofper==5) then begin
      SetRepCol(2,60);
      SetRepCol(3,120);
      SetRepCol(4,180);
      SetRepCol(5,240);
      SetRepCol(6,300);
      SetRepCol(7,360);
      SetRepCol(8,420);    
    end;
    if (nrofper==6) then begin
      SetRepCol(2,50);
      SetRepCol(3,100);
      SetRepCol(4,150);
      SetRepCol(5,200);
      SetRepCol(6,250);
      SetRepCol(7,300);
      SetRepCol(8,350);
      SetRepCol(9,400);
    end;
  end;

  if (RepSpec.ArtMode==1) then begin
    ckey = "RebDate";
//    ARr.ARRebDate.year = BlankM4Date;
  end else begin
    ckey = "DueDate";
//    ARr.DueDate.year = BlankM4Date;
  end;
  if (RepSpec.flags[0]==0) then begin
    StartFormat(15);
    if (IsStandardProduct) then begin
      OutString(0,0,USetStr(6776),false);
    end else begin
      OutString(0,0,USetStr(2372),false);
    end;
    OutString(70,0,USetStr(2373),false);
    OutString(120,0,USetStr(2376),false);
    OutString(400,0,USetStr(2374),true);
    OutString(480,0,USetStr(2375),true);
    EndFormat;
  end else begin
    PrintAgedHeader(RepSpec.d1,nrofper);
  end;
  ARr.InvoiceNr = 0;
  if (RepSpec.flags[0]==0) then  begin
    Gray_Divider(0,1);
  end;  
  TrHs = true;
  while (LoopKey(ckey,ARr,2,TrHs)) begin
    testf = true;
    if (RepSpec.ArtMode==1) then begin
      pd = ARr.ARRebDate;
    end else begin
      pd = ARr.DueDate;
    end;
    if (nonblankdate(RepSpec.d1)) then begin
      if (pd>RepSpec.d1) then begin TrHs = false; end;
    end;  
    if (TrHs==false) then begin testf = false; end;
    if (testf) then begin
      if (blank(RepSpec.f2) or (RepSpec.f2==ARr.CustCode)) then begin
      
      if (CheckRepSpecParameters(RepSpec,ARr.InvoiceNr)) then begin
      
        IVr.SerNr = ARr.InvoiceNr;
        found = ReadFirstMain(IVr,1,true);
        if ((found==false) or (IVr.InstallmentInv==0)) then begin
          if (RepSpec.flags[2]!=0) then begin
            if (IVr.DisputedFlag!=0) then begin testf = false; end;
          end;
        end;
        if (IVr.Invalid!=0) then begin testf = false; end;
        if (testf) then begin    
        if (IVr.InstallmentInv==0) then begin    
          if (RepSpec.ArtMode==1) then begin
            IPVal = blankval;
            if (IVr.pdvrebt!=0) then begin
              latedays = DateDiff(ARr.ARRebDate,thed);
              IPVal = ARr.RVal;
              if (latedays>=0) then begin
                if (ARAb.DiscCashVAT!=0) then begin
                  tv = IPVal - IVr.Sum3;
                  tv = tv*IVr.pdvrebt;
                  tv = tv/100;
                  tv = Round(tv,GetTotalRoundMode(RoundRec));
                end else begin
                  tv = IPVal*IVr.pdvrebt;
                  tv = tv/100;
                  tv = Round(tv,GetTotalRoundMode(RoundRec));
                end;
                IPVal = IPVal - tv;
                rebf = true;
              end;
            end;
            if (!rebf) then begin
              if (IVr.pdvrebt2!=0) then begin
                latedays = DateDiff(ARr.ARRebDate2,thed);
                if (latedays>=0) then begin
                  if (ARAb.DiscCashVAT!=0) then begin
                    tv = IPVal - IVr.Sum3;
                    tv = tv*IVr.pdvrebt2;
                    tv = tv/100;
                    tv = Round(tv,GetTotalRoundMode(RoundRec));
                  end else begin
                    tv = tv*IVr.pdvrebt2;
                    tv = tv/100;
                    tv = Round(tv,GetTotalRoundMode(RoundRec));
                  end;
                  IPVal = IPVal - tv;
                end;
              end;
            end;
            if (IPVal==blankval) then begin
              latedays = DateDiff(ARr.DueDate,thed);          
              IPVal = ARr.RVal;
            end;
          end else begin
            latedays = DateDiff(ARr.DueDate,thed);          
            IPVal = ARr.RVal;
          end;
          GetFullCurncyRate(IVr.CurncyCode,pd,fr,to1,to2,br1,br2);          
          IPVal = MulRateToBase1(IVr.CurncyCode,IPVal,fr,to1,to2,br1,br2,DefaultCurRoundOff);
          ARSum = ARSum + IPVal;
          if (RepSpec.flags[0]==0) then begin
            if (IPVal==blankval) then begin IPVal = 0; end;
            if (ARSum==blankval) then begin ARSum = 0; end;
            StartFormat(15);
            OutDate(0,0,pd,false);
            tstr = CreateInvoiceNumber(ARr.InvoiceNr,ARr.OfficialSerNr);
            OutString(70,"DblAR",tstr,false);
            OutString(120,0,ARr.CustCode,false);
            OutString(180,0,IVr.Addr0,false);//OutString(200,320,0,IVp.Addr0,M4Str,false,false);
            OutVal(400,0,IPVal,M4Val,true);
            OutVal(480,0,ARSum,M4Val,true);
            EndFormat;
          end;
          SumAged(thed,-latedays,Agedb.ActualInvoices,IPVal,sact,s0,s1,s2,s3,s4,s5,s6,s7);  
        end else begin
          PrintNSumIPInstall(RepSpec,IVr,ARSum,sact,s0,s1,s2,s3,s4,s5,s6,s7);
        end;
        end;
      end;
      end;
    end;  
  end;
  if (RepSpec.flags[0]==0) then begin
    Gray_Divider(0,1);
  end;  
  if (RepSpec.flags[0]==1) then begin
    tot = s0 + s1;
    tot = tot + s2;
    tot = tot + s3;
    tot = tot + s4;
    tot = tot + s5;
    tot = tot + s6;
    tot = tot + s7;
    tot = tot + sact;
    PrintAgedLine(sact,s0,s1,s2,s3,s4,s5,s6,s7,blankval,tot,nrofper,480,"");
  end;
  if (RepSpec.flags[1]!=0) then begin
    StartFormat(15);
    if (RepSpec.flags[0]==0) then begin
      OutString(0,0,USetStr(2366),false);
    end else begin
      OutString(140,0,USetStr(2366),false);
    end;
    EndFormat;
    IVr.OKFlag = 0;
    IVr.PayDate = blankd;
    IVr.SerNr = -1;
    TrHs = true;
    while (LoopKey("OKFlagPayDate",IVr,2,TrHs)) begin
      if (IVr.OKFlag!=0) then begin TrHs = false; end;
      if (TrHs) then begin
        testf = true;        
        pd = IVr.PayDate;
        if (nonblankdate(RepSpec.d1)) then begin
          if (RepSpec.ArtMode==1) then begin
            if (pd>RepSpec.d1) then begin testf = false; end;
          end else begin
            if (pd>RepSpec.d1) then begin testf = false; end;
          end;          
        end;  
        if (nonblank(RepSpec.f2) and (RepSpec.f2!=IVr.CustCode)) then begin testf = false; end;
        if (testf) then begin
          if (nonblank(RepSpec.ObjStr)) then begin 
            if (SetInSet(RepSpec.ObjStr,IVr.Objects)==false) then begin testf = false; end;
          end else begin
            if ((testf==true) and (nonblank(RepSpec.ObjType))) then begin    
              testf = false;
              OBr.OTCode = RepSpec.ObjType;
              OBr.Code = "";
              Accs = true;
              while (LoopKey("OTCode",OBr,1,Accs)) begin
                if ((Accs==true) and (RepSpec.ObjType==OBr.OTCode)) then begin
                  if (SetInSet(OBr.Code,IVr.Objects)==true) then begin
                    testf = true;
                    Accs = false;
                  end;
                end;
              end; 
            end;
          end;
        end;  
        if (testf) then begin
          if (RepSpec.ArtMode==1) then begin
            latedays = DateDiff(IVr.PayDate,thed);
            if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
              IPVal = -IVr.Sum4;
            end else begin
              IPVal = IVr.Sum4;
            end;
            if (IVr.pdvrebt!=0) then begin
              tv = IPVal*IVr.pdvrebt;
              tv = tv/100;
              tv = Round(tv,SetRoundModeD(0));
              IPVal = IPVal - tv;
            end;
//pdvrebt2            
          end else begin
            latedays = DateDiff(IVr.PayDate,thed);
            if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
              IPVal = -IVr.Sum4;
            end else begin
              IPVal = IVr.Sum4;
            end;
          end;
          GetFullCurncyRate(IVr.CurncyCode,pd,fr,to1,to2,br1,br2);          
          IPVal = MulRateToBase1(IVr.CurncyCode,IPVal,fr,to1,to2,br1,br2,DefaultCurRoundOff);
          ARSum = ARSum + IPVal;
          if (RepSpec.flags[0]==0) then begin
            if (IPVal==blankval) then begin IPVal = 0; end;
            if (ARSum==blankval) then begin ARSum = 0; end;
            StartFormat(15);
            OutDate(0,0,pd,false);
            tstr = CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr);
            OutString(70,"DblAR",tstr,false);
            OutString(120,0,IVr.CustCode,false);
            OutString(200,0,IVr.Addr0,false);//OutString(200,320,0,IVp.Addr0,M4Str,false,false);
            OutVal(400,0,IPVal,M4Val,true);
            OutVal(480,0,ARSum,M4Val,true);
            EndFormat;
          end;
          SumAged(thed,latedays,Agedb.ActualInvoices,IPVal,sact,s0,s1,s2,s3,s4,s5,s6,s7); 
        end;
      end;
    end;    
    if (RepSpec.flags[0]==0) then begin 
      Gray_Divider(0,1);    
    end; 
    if (RepSpec.flags[0]==1) then begin
      PrintAged(sact,s0,s1,s2,s3,s4,s5,s6,s7,nrofper);      
    end;        
  end;
  if (RepSpec.flags[2]!=0) then begin
    StartFormat(15);
    tstr = USetStr(2366) & " ";
    tstr = tstr & USetStr(3250);
    if (RepSpec.flags[0]==0) then begin
      OutString(0,0,tstr,false);
    end else begin
      OutString(140,0,tstr,false);
    end;
    EndFormat;
    ARSum = 0;
    s0 = 0;
    s1 = 0;
    s2 = 0;
    s3 = 0;
    s4 = 0;
    s5 = 0;
    s6 = 0;
    s7 = 0;
    IPr.OKFlag = 0;
    IPr.SerNr = -1;
    TrHs = true;
    while (LoopKey("OKMark",IPr,2,TrHs)) begin
      if (IVr.OKFlag!=0) then begin TrHs = false; end;
      if (TrHs) then begin
        testf = true;        
        pd = IPr.TransDate;
        if (nonblankdate(RepSpec.d1)) then begin
          if (RepSpec.ArtMode==1) then begin
            if (pd>RepSpec.d1) then begin testf = false; end;
          end else begin
            if (pd>RepSpec.d1) then begin testf = false; end;
          end;          
        end;  
        if (testf) then begin
          rwcnt = MatRowCnt(IPr);
          for (i=0; i<rwcnt; i=i+1) begin
            MatRowGet(IPr,i,IPrw);
            if ((nonblank(RepSpec.f2) and (RepSpec.f2==IPrw.CustCode)) or (blank(RepSpec.f2))) then begin
              if (RepSpec.ArtMode==1) then begin
                latedays = DateDiff(IPrw.PayDate,thed);
                IPVal = IPrw.BankVal;
              end else begin
                latedays = DateDiff(IPrw.PayDate,thed);
                IPVal = IPrw.BankVal;
              end;
              GetFullCurncyRate(IPrw.BankCurncy,pd,fr,to1,to2,br1,br2);          
              IPVal = MulRateToBase1(IPrw.BankCurncy,IPVal,fr,to1,to2,br1,br2,DefaultCurRoundOff);
              ARSum = ARSum + IPVal;
              if (RepSpec.flags[0]==0) then begin
                StartFormat(15);
                OutDate(0,0,pd,false);
                OutLongInt(70,0,IPr.SerNr,false);
                OutString(120,0,IPrw.CustCode,false);
                OutVal(400,0,IPVal,M4Val,true);
                OutVal(480,0,ARSum,M4Val,true);
                EndFormat;
              end;
              SumAged(thed,latedays,Agedb.ActualInvoices,IPVal,sact,s0,s1,s2,s3,s4,s5,s6,s7);  
            end;
          end;
        end;
      end;
    end; 
 
    if (RepSpec.flags[0]==0) then begin
      Gray_Divider(0,1);    
    end;  
    if (RepSpec.flags[0]==1) then begin
      PrintAged(sact,s0,s1,s2,s3,s4,s5,s6,s7,nrofper);        
    end;        
  end;

  EndJob;
  RETURN;
END;
