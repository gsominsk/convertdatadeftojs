external procedure ARPrintDueDetailedInstalmenInvoice(record IVVc,record RcVc,record CUVc,Integer,Integer);
external procedure FindInstalmentInvoiceBalance(record RcVc,record IVVc,Date,var val,var val);
external function LongInt CalculateLateDaysInstallmentInv(LongInt,Date,Date,Date,Boolean);
external function LongInt CalculateLateDays(Date,Date,Date,Boolean,Boolean);
external function Boolean ConvertPurgeNLTrans_IVVc(record PurgeTRVc,record IPrsVc,record CUVc,Boolean,var record IVVc);
external function Boolean ConvertNLTrans_IVVc(record TRVc,record IPrsVc,record CUVc,Boolean,var record IVVc);
external procedure GetARAcc(string,var string);
external function Boolean IsIVinActualPeriod(Date,Integer,Integer);
external procedure ARRnRateDifferencesDetailed(record RcVc,record IVVc,record ARVc,record CUVc,val,val,Date,Boolean,
                            var val,var val,var val,var val,var Boolean,
                            var string,var Boolean,var record SMVc);
external procedure ARRnRateDifferences(record RcVc,record IVVc,val,val,Date,var val,var val,var val,var val,
                            var string,var Boolean ,var record SMVc);
external procedure PrintARAged(record RcVc,val,val,val,val,val,val,val,val,val,val,val,Integer,val,val,val,val,val,val,val,val,val,val);
external procedure PrintARReportTotals(record RcVc,Integer,val,val,val,val,val,val,val,val,val,val,Array val);
external function Boolean ARInvoiceTest(record RcVc,record IVVc,Boolean);
external procedure ARRnAddToDebtorsAccounts(string,Integer,val,Array string,Array val,var Integer);
external procedure ARRnPrintDebtorsAccounts(Array string,Array val,var Integer);
external procedure ARRnGetInvBalance(record IVVc,var Date,Integer,var val,var val,var LongInt);
external procedure SumAgedInstalmenInvoice(record RcVc,record CUVc,Date,record IVVc,Integer,var val,var val,var val,var val,var val,var val,var val,var val,var val);
external procedure SubCashRows_IVVc(record IVVc,Boolean,var val,var val);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure PrintPrepaymentsNrsIP(Integer,record RcVc,string,Boolean,Integer,Integer);
external function Boolean ObjectTypeMatch(string,string);
external procedure BeginCurncyTotals(var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external procedure PrintCurTotalsRow(record SMVc,Integer,Integer,Integer,Integer,Integer);
external procedure AddCurTotalsRow(string,val,val,val,var record SMVc);
external procedure PrintHeaderAR(record RcVc);
external procedure PrintHeaderAR2(record RcVc,Date,Integer,Integer,Integer);
external procedure SubPrePayments(record IVVc,var val,var val);
external procedure PrintOnAccountInfo(record CUVc,val,val,var Boolean,record RcVc,record SMVc,Boolean);
external procedure GetOnAccBalance(record RcVc,string,string,Boolean,Integer,var val,var val,var val,var val,var val,var val,var val,record SMVc,
                   Array string,Array val,var Integer);
external procedure Base1ToBase2(var val,Date,var val);
external procedure ARWithLogg(record CUVc,var array string,var array val,var Integer,record RcVc,record IVVc,record IPrsVc,record TRVc,var val,Integer,Boolean);
external procedure ARPrintDueDetailed(record IVVc,record RcVc,string,string,val,val,val,val,val,val,val,val,val,var val,Integer);
external procedure ARRPrintOverView(record CUVc,record IVVc,record IPrsVc,record TRVc,record RcVc,val,val,LongInt);
external procedure PrintAgedLine(val,val,val,val,val,val,val,val,val,val,val,Integer,Integer,string);
external procedure SumAged(Date,Integer,Integer,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val);
external procedure CountPeriods(var Integer);
external procedure ClassTypef(string,string,var boolean);
external procedure AddInstalmentInvoiceBalanceTotals(record RcVc,record IVVc,Date,var Array val,var Array val,var Array val);

global
function LongInt CalcARRnColumnSpacing(LongInt nrofper,Integer UseAccPeriod,var LongInt colwidth,var LongInt colstart,var LongInt col2start)
begin
  LongInt ncols;
  
  ncols = nrofper;
  if (UseAccPeriod==0) then begin
    ncols = ncols + 1;
  end;
  
  if (ncols==1) then begin colstart = 300; end;
  if (ncols==2) then begin colstart = 280; end;
  if (ncols==3) then begin colstart = 260; end;
  if (ncols==4) then begin colstart = 220; end;
  if (ncols==5) then begin colstart = 205; end;
  if (ncols==6) then begin colstart = 200; end;
  if (ncols==7) then begin colstart = 200; end;
  
  colwidth = (475 - colstart) / (ncols + 1); // 5 extra px. for total column
  col2start = colstart + colwidth;
  
  CalcARRnColumnSpacing = ncols;
  return;
end;

global
procedure RunARRn(record RcVc RepSpec,var val tot1Sum)
BEGIN
  record ARVc ARr;
  record CUVc CUr;
  record IVVc IVr;
  record PurgeTRVc PurgeTRr;
  record TRVc TRr;
  record IPrsVc IPrsr;
  Boolean TrHs,CUs,CustOut,backdatf;
  Boolean testf,first1f,first2f;
  val AR1Sum,AR2Sum,CurSum;
  val tot2Sum,totCurSum;
  LongInt latedays;
  Integer i,rwcnt,keys,nrofper;
  val sact,s0,s1,s2,s3,s4,s5,s6,s7;
  val sactb2,s0b2,s1b2,s2b2,s3b2,s4b2,s5b2,s6b2,s7b2;
  Array val ss;
//  val ss0,ss1,ss2,ss3,ss4,ss5,ss6,ss7;
  Array val ssb2;  
//  val ss0b2,ss1b2,ss2b2,ss3b2,ss4b2,ss5b2,ss6b2,ss7b2;
  string 255 frcc,tocc;
  val rs,rs2;
  val rval,tot,totb2,rvalb1;
  val sum,sum2,blval;
  Array val overduetot;
  Array val currenttot;
  Array val notduetot;
  val Total1Due,Total2Due,Total1NotDue,Total2NotDue,TotOnAcc,TotalCurDue,TotalCurNotDue;
  Array val TotalCurrent;
  val sumdiff,sumcurncy,sumbooked,sumnow;
  val totdiff,totbooked,totnow;
  val sactinv,s0inv,s1inv,s2inv,s3inv,s4inv,s5inv,s6inv,s7inv,totinv;
  string 255 ckey,invindex;
  record SMVc CurTotalsr;  //addcurencytotals
  record SMVc OnAccCurTotalsr;  //addcurencytotals
  row SMVc OnAccCurTotalsrw;
  Array string 10 debaccs;
  Array val debbal;
  Integer debcnt;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt,pos;
  Date agedate;
  string 255 lastcurncycode;
  Boolean onecurncyf;
  record AgedBlock Agedb;
  Boolean ivfound;
  LongInt colstart,colwidth,col2start,ncols;
  val onaccsumbooked,onaccsumnow,onaccsumcurncy,onaccsumdiff,totonacctmp;
  record AgedBlock AgedRec;
  
  BlockLoad(AgedRec);
  tot1Sum = blankval;
  BlockLoad(Agedb);
  debcnt = -1;
  if (nonblankdate(RepSpec.d1)) then begin
    backdatf = true;
    agedate = RepSpec.d1;
  end else begin
    backdatf = false;
    agedate = CurrentDate;
  end;  
  frcc = FirstInRange(RepSpec.f1,20);
  tocc = LastInRange(RepSpec.f1,20);
  CountPeriods(nrofper);
  if ((RepSpec.ArtMode==2) or (RepSpec.ArtMode==5)) then begin    
    ncols = CalcARRnColumnSpacing(nrofper,Agedb.UseAccPeriod,colwidth,colstart,col2start);
    
    SetRepColBiDi(2,colstart,col2start);
    SetRepColBiDi(3,colstart + colwidth,col2start + colwidth);
    SetRepColBiDi(4,colstart + (colwidth * 2),col2start + (colwidth * 2));
    if (ncols>=2) then begin SetRepColBiDi(5,colstart + (colwidth * 3),col2start + (colwidth * 3)); end;
    if (ncols>=3) then begin SetRepColBiDi(6,colstart + (colwidth * 4),col2start + (colwidth * 4)); end;
    if (ncols>=4) then begin SetRepColBiDi(7,colstart + (colwidth * 5),col2start + (colwidth * 5)); end;
    if (ncols>=5) then begin SetRepColBiDi(8,colstart + (colwidth * 6),col2start + (colwidth * 6)); end;
    if (ncols>=6) then begin SetRepColBiDi(9,colstart + (colwidth * 7),col2start + (colwidth * 7)); end;
  end;
  
  PrintHeaderAR2(RepSpec,agedate,nrofper,Agedb.ActualInvoices,Agedb.SeparateOnAcc);
  if (RepSpec.ArtMode==4) or (RepSpec.ArtMode==6) then begin
    RecordNew(CurTotalsr);
    RecordNew(OnAccCurTotalsr);
  end;
  
  invindex = "CustInv";
/*  
  invindex = "CustCode";
  switch (RepSpec.flags[22]) begin
    case 1: invindex = "CustInv";
  end;
*/  
  totCurSum = blankval;
  tot1Sum = blankval;
  tot2Sum = blankval;
  if (RepSpec.flags[1]==1) then begin
    CUr.Name = "";
    CUr.Code = "";
    ckey = "Name";
//    CUs = m4_ReadFirstLCKey(CUVc,ckey,&CUr,1,false,&LLoop2);
    keys = 1;
    CUs = LoopKey(ckey,CUr,1,true);
    if (CUs==false) then begin goto L99; end;
    first1f = true;        
  end else begin
    if (blank(RepSpec.f3)) then begin    
      CUr.Code = frcc;
      ckey = "Code";
//      CUs = m4_ReadFirstLCKey(CUVc,ckey,&CUr,1,false,&LLoop2);
      keys = 1;
      CUs = LoopKey(ckey,CUr,1,true);      
      if (CUs==false) then begin goto L99; end;            
      first1f = true;        
    end else begin
      CUr.CustCat = RepSpec.f3;
      CUr.Code = frcc;
      ckey = "Group";
      keys = 2;
//      CUs = m4_ReadFirstLCKey(CUVc,ckey,&CUr,2,false,&LLoop2);
      CUs = LoopKey(ckey,CUr,2,true);
      if (CUs==false) then begin goto L99; end;
      first1f = true;        
    end;
  end;
L22:;
  onecurncyf = true;
  lastcurncycode = "";
  
  if (CUs==false) then begin goto L88; end;
//    CUs = m4_ReadLogicalCKey(CUVc,ckey,LLoop2++,&CUr);
    if (first1f) then begin 
      first1f = false; 
      ResetLoop(CUr);      
    end;
    CUs = LoopKey(ckey,CUr,keys,true);  
    if (CUs) then begin
      testf = true;
      if (CUr.CUType==0) then begin testf = false; end;
      if (nonblank(RepSpec.f9)) then begin
        if (RepSpec.f9!=CUr.MainPartner) then begin
          testf = false;
        end;
      end;
      if (RepSpec.flags[1]==1) then begin
        if (nonblank(RepSpec.f1)) then begin
          if (CUr.Code<frcc) then begin
            testf = false;
          end;
          if (CUr.Code>tocc) then begin
            testf = false;
          end;
        end;    
        if (nonblank(RepSpec.f3)) then begin 
          if (CUr.CustCat<>RepSpec.f3) then begin
            testf = false;
          end;
        end;    
      end else begin
        if (nonblank(RepSpec.f1)) then begin
          if (CUr.Code<frcc) then begin
            CUs = false;
          end;
          if (CUr.Code>tocc) then begin
            CUs = false;
          end;
        end;    
        if (nonblank(RepSpec.f3)) then begin 
          if (CUr.CustCat<>RepSpec.f3) then begin
            testf = false;
          end;
        end;    
        if (nonblank(tocc)) then begin
          if (CUr.Code>tocc) then begin
            CUs = false;
          end;
        end;    
      end;
    end;
  if (CUs==false) then begin goto L88; end;
  if (testf==false) then begin goto L22; end;
  CustOut = false;
  if (RepSpec.ArtMode!=4) and (RepSpec.ArtMode!=6) and (RepSpec.ArtMode!=3) then begin
    RecordNew(CurTotalsr);
    RecordNew(OnAccCurTotalsr);
  end;
  BeginCurncyTotals(curcnt);
  CurSum = 0;
  AR1Sum = 0;
  AR2Sum = 0;
  rwcnt = 0;
  sact = 0; sactb2 = 0;
  s0 = 0; s0b2 = 0;
  s1 = 0; s1b2 = 0;
  s2 = 0; s2b2 = 0;
  s3 = 0; s3b2 = 0;
  s4 = 0; s4b2 = 0;
  s5 = 0; s5b2 = 0;
  s6 = 0; s6b2 = 0;
  s7 = 0; s7b2 = 0;
  if (RepSpec.flags[2]==1) then begin
    s0 = CurSum + s0;
  end else begin
    s0 = AR1Sum + s0;
  end;  

  if (backdatf) then begin
    ResetLoop(IPrsr);
    IPrsr.CustCode = CUr.Code;
    IPrsr.TransType = kIPrsTransTypeInvoice;
    TrHs = LoopKey("CustType",IPrsr,2,true);    
    first2f = true;            
  end else begin
    ARr.CustCode = CUr.Code;
    ARr.InvoiceNr = 0;
//    TrHs = m4_ReadFirstLCKey(ARVc,"CustCode",&ARr,2,false,&LLoop1);
    ResetLoop(ARr);
    TrHs = LoopKey(invindex,ARr,1,true);
    first2f = true;
  end;
  if (RepSpec.flags[21]==1) then begin TrHs = false; end;
  while (TrHs==true) begin
    testf = false;
    if (backdatf) then begin
      if (first2f) then begin 
        first2f = false; 
        ResetLoop(IPrsr); 
      end;
      TrHs = LoopKey("CustType",IPrsr,2,true);    
      if (TrHs) then begin 
        if (CUr.Code<>IPrsr.CustCode) then begin TrHs = false; end;
        if (IPrsr.TransType!=kIPrsTransTypeInvoice) then begin TrHs = false; end;
//        if (IPrsr.TransType>kIPrsTransTypeNLInvoice) then begin TrHs = false; end;
//        if (IPrsr.CustDate>agedate) then begin TrHs = false; end;
      end;  
      if (TrHs) then begin
        testf = true;
        RecordClear(IVr);
        switch (IPrsr.TransType) begin
          case kIPrsTransTypeInvoice:
            IVr.SerNr = IPrsr.TransNr;
            testf = ReadFirstMain(IVr,1,true);
          case kIPrsTransTypePurgeNLTransaction:
            PurgeTRr.Number = IPrsr.TransNr;
            PurgeTRr.IntYc = IPrsr.IntYc;
            PurgeTRr.TransRow = IPrsr.TransRow;
            if (ReadFirstMain(PurgeTRr,3,true)) then begin
              testf = ConvertPurgeNLTrans_IVVc(PurgeTRr,IPrsr,CUr,false,IVr);
            end;
          case kIPrsTransTypeNLTransaction:
            TRr.Number = IPrsr.TransNr;
            TRr.IntYc = IPrsr.IntYc;
            if (ReadFirstMain(TRr,2,true)) then begin
              testf = ConvertNLTrans_IVVc(TRr,IPrsr,CUr,false,IVr);
            end;
          otherwise
            testf = false;
        end;
        if (testf) then begin
          testf = ARInvoiceTest(RepSpec,IVr,backdatf);          
/*          
          if (RepSpec.flags[22]==0) then begin
            latedays = DateDiff(IVr.PayDate,agedate);
          end else begin
            latedays = DateDiff(IVr.InvDate,agedate);
          end;
*/          

          if ((IVr.InstallmentInv==1) and (RepSpec.flags[19]!=0)) then begin
            latedays = CalculateLateDaysInstallmentInv(IVr.SerNr,IVr.InvDate,IVr.PayDate,agedate,RepSpec.flags[22]!=0);
          end else begin
            latedays = CalculateLateDays(IVr.InvDate,IVr.PayDate,agedate,RepSpec.flags[22]!=0,RepSpec.ArtMode!=2 and RepSpec.ArtMode!=5);
          end;
          if (RepSpec.flags[0]<>0) then begin 
            if (latedays>=0) then begin 
              testf = false; 
            end;
          end;
          if (RepSpec.long1>0) then begin          
            if (-latedays<=RepSpec.long1) then begin
              testf = false; 
            end;
          end;
          if ((nonblank(RepSpec.f3)) and (RepSpec.f3<>CUr.CustCat)) then begin testf = false; end;
          if (nonblank(RepSpec.f4)) then begin
            if (SetInSet(RepSpec.f4,CUr.Classification)==false) then begin
              testf = false;
            end;
          end;
          if (nonblank(RepSpec.f5)) then begin
            if (testf) then begin
              testf = false;
              ClassTypef(RepSpec.f5,CUr.Classification,testf);
            end;
          end;
          if (testf) then begin
            rvalb1 = blankval;
            if ((IVr.InvType<>kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales) and (IVr.InvType<>kInvoiceTypeCash and IVr.InvType<>kInvoiceTypeCashInvoiceReceiptPRT)) then begin
              if ((IVr.InstallmentInv==1) and (RepSpec.flags[19]!=0)) then begin
                FindInstalmentInvoiceBalance(RepSpec,IVr,agedate,rval,rvalb1);
              end else begin
                rval = IVr.Sum4;
                if (nonblank(IVr.CurncyCode)) then begin
                  rvalb1 = IVr.BaseSum4;
                end;
                if (rvalb1==0) then begin
                  rvalb1 = MulRateToBase1(IVr.CurncyCode,rval,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);                
                end;
              end;
            end;
            if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
              if (IVr.CredInv==-1) then begin
                rval = -IVr.Sum4;
                if (nonblank(IVr.CurncyCode)) then begin
                  rvalb1 = -IVr.BaseSum4;
                end;
                if (rvalb1==0) then begin
                  rvalb1 = MulRateToBase1(IVr.CurncyCode,rval,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                end;
              end else begin
                rval = blankval;
                rvalb1 = blankval;
              end;    
            end;
            if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
              rval = blankval;
              rvalb1 = blankval;
            end;       
            if (IVr.TransDate>RepSpec.d1) then begin          
              rval = blankval;
              rvalb1 = blankval;
              testf = false;            
            end else begin
              if ((IVr.InstallmentInv==1) and (RepSpec.flags[19]!=0)) then begin
              end else begin
                ARRnGetInvBalance(IVr,RepSpec.d1,IVr.InvType,rval,rvalb1,latedays);
              end;
              SubPrePayments(IVr,rval,rvalb1);
              if (IVr.InvType!=kInvoiceTypeCash and IVr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) then begin
                SubCashRows_IVVc(IVr,false,rval,rvalb1);
              end;
              rs = rvalb1;
//                rs = MulRateToBase1(IVr.CurncyCode,rval,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
  //            rs2 = MulRateToBase2(IVr.CurncyCode,rval,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
              Base1ToBase2(rs,IVr.TransDate,rs2);
              if (rval==0) then begin testf = false; end;
              if (blank(RepSpec.vals0)==false) then begin
                if (rval<RepSpec.vals0) then begin testf = false; end;
              end;
              if (blank(RepSpec.vals1)==false) then begin
                if (rval>RepSpec.vals1) then begin testf = false; end;
              end;
              if (testf) then begin
                if (IVr.InstallmentInv==1) then begin
                  AddInstalmentInvoiceBalanceTotals(RepSpec,IVr,agedate,overduetot,currenttot,notduetot);
                end else begin
                  if (Agedb.ActualInvoices!=0) then begin
                    if (latedays<0) then begin
                      overduetot[1] = overduetot[1] + rs;
                      overduetot[2] = overduetot[2] + rs2;
                      overduetot[0] = overduetot[0] + rval;
                    end else begin
                      if (latedays==0) then begin
                        currenttot[1] = currenttot[1] + rs;
                        currenttot[2] = currenttot[2] + rs2;
                        currenttot[0] = currenttot[0] + rval;
                      end else begin
                        notduetot[1] = notduetot[1] + rs;
                        notduetot[2] = notduetot[2] + rs2;
                        notduetot[0] = notduetot[0] + rval;
                      end;
                    end;
                  end else begin
                    if (latedays<0) then begin
                      overduetot[1] = rs + overduetot[1];
                      overduetot[2] = rs2 + overduetot[2];
                      overduetot[0] = overduetot[0] + rval;
                    end else begin
                      notduetot[1] = notduetot[1] + rs;
                      notduetot[2] = notduetot[2] + rs2;
                      notduetot[0] = notduetot[0] + rval;
                    end;
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
    end else begin
      ivfound = false;
      if (first2f) then begin first2f = false; ResetLoop(ARr); end;
      TrHs = LoopKey(invindex,ARr,1,true);      
      if (TrHs) then begin 
        if (CUr.Code<>ARr.CustCode) then begin TrHs = false; end;
      end;  
      if (TrHs) then begin
        IVr.SerNr = ARr.InvoiceNr;
        ivfound = ReadFirstMain(IVr,1,true);
        if (ivfound) then begin
          if ((IVr.InstallmentInv==1) and (RepSpec.flags[19]!=0)) then begin
            latedays = CalculateLateDaysInstallmentInv(IVr.SerNr,IVr.InvDate,IVr.PayDate,agedate,RepSpec.flags[22]!=0);
          end else begin
            latedays = CalculateLateDays(IVr.InvDate,ARr.DueDate,agedate,RepSpec.flags[22]!=0,RepSpec.ArtMode!=2 and RepSpec.ArtMode!=5);
          end;
        end else begin
          latedays = CalculateLateDays(ARr.DueDate,ARr.DueDate,agedate,RepSpec.flags[22]!=0,RepSpec.ArtMode!=2 and RepSpec.ArtMode!=5);
        end;
        
        if ((RepSpec.flags[0]==0) or (latedays<0)) then begin
          if ((blank(RepSpec.f3)) or (RepSpec.f3==CUr.CustCat)) then begin testf = true; end;
          if ((blank(RepSpec.f4)) or (SetInSet(RepSpec.f4,CUr.Classification)==true)) then begin
            testf = true;
          end;
          if (nonblank(RepSpec.f5)) then begin
            if (testf) then begin
              testf = false;
              ClassTypef(RepSpec.f5,CUr.Classification,testf);
            end;
          end;
        end;
        if (RepSpec.flags[0]<>0) then begin 
          if (latedays>=0) then begin 
            testf = false; 
          end;
        end;
        if (RepSpec.long1>0) then begin          
          if (-latedays<=RepSpec.long1) then begin
            testf = false; 
          end;
        end;
      end;
      if (nonblank(RepSpec.CurncyCode)) then begin
        if (ARr.ARCurncyCode!=RepSpec.CurncyCode) then begin          
          testf = false;
        end;
      end;
      if (testf) then begin
        rval = ARr.RVal;
        if (ivfound) then begin
          if ((IVr.InstallmentInv==1) and (RepSpec.flags[19]!=0)) then begin
            FindInstalmentInvoiceBalance(RepSpec,IVr,CurrentDate,rval,rs);
          end else begin
            rs = ARr.BookRVal;
          end;
//          Base1ToBase2(rs,IVr.TransDate,rs2);
          rs2 = MulRateToBase2(IVr.CurncyCode,rval,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          if (nonblank(RepSpec.f2)) then begin
            if (SetInSet(RepSpec.f2,IVr.SalesMan)==false) then begin testf = false; end;
          end;
          if (nonblank(RepSpec.TransStr)) then begin
            if (IVr.SalesGroup!=RepSpec.TransStr) then begin testf = false; end; 
          end;
          if (nonblank(RepSpec.f4)) then begin
            if (SetInSet(RepSpec.f4,CUr.Classification)==false) then begin
              testf = false;
            end;
          end;
          if (nonblank(RepSpec.Language)) then begin
            if (RepSpec.Language!=IVr.LangCode) then begin
               testf = false;
            end;
          end;
          if (nonblank(RepSpec.AccStr)) then begin
            if (RepSpec.AccStr!=IVr.ARAcc) then begin
              testf = false;
            end;
          end;
          if (nonblank(RepSpec.f5)) then begin
            if (testf) then begin
              testf = false;
              ClassTypef(RepSpec.f5,CUr.Classification,testf);
            end;
          end;
          if (IVr.Invalid<>0) then begin testf = false; end;
          if ((RepSpec.flags[13]==1) and (IVr.InvType!=kInvoiceTypeInterest)) then begin testf = false; end;
          if ((RepSpec.flags[15]==1) and (IVr.InvType!=kInvoiceTypeDownpayment)) then begin testf = false; end;
          if (nonblank(RepSpec.ObjStr)) then begin
            if (SetInSet(RepSpec.ObjStr,IVr.Objects)==false) then begin
              testf = false;
            end;
          end;
          if ((testf==true) and (nonblank(RepSpec.ObjType))) then begin
            testf = ObjectTypeMatch(IVr.Objects,RepSpec.ObjType);            
          end;
          if (RepSpec.flags[16]==1) then begin
            if (IVr.NoRemndrFlag==1) then begin
              testf = false;
            end;
          end;
          if (RepSpec.flags[17]==1) then begin
            if (IVr.NoColectionFlag==1) then begin
              testf = false;
            end;
          end;          
          if (testf) then begin
            if (RepSpec.flags[3]==1) then begin
              if (IVr.DisputedFlag==1) then begin
                testf = false;
              end;
            end;
          end;
          if (testf) then begin
            if (RepSpec.flags[3]==2) then begin
              if (IVr.DisputedFlag<>1) then begin
                testf = false;
              end;
            end;
          end;
        end else begin
          rs = ARr.BookRVal;
          Base1ToBase2(rs,ARr.DueDate,rs2);
          IVr.CustCode = ARr.CustCode;
          IVr.Addr0 = CUr.Name;
          IVr.SerNr = ARr.InvoiceNr;
          IVr.InvDate = ARr.InvDate;
          IVr.PayDate = ARr.DueDate;
          IVr.CurncyCode = ARr.ARCurncyCode;
          if (nonblank(RepSpec.f2)) then begin testf = false; end;
        end;
        if (blank(RepSpec.vals0)==false) then begin
          if (rval<RepSpec.vals0) then begin testf = false; end;
        end;
        if (blank(RepSpec.vals1)==false) then begin
          if (rval>RepSpec.vals1) then begin testf = false; end;
        end;
        if (testf) then begin
          if (ivfound and IVr.InstallmentInv==1) then begin
            AddInstalmentInvoiceBalanceTotals(RepSpec,IVr,CurrentDate,overduetot,currenttot,notduetot);
          end else begin
            if (latedays<0) then begin
              overduetot[1] = rs + overduetot[1];
              overduetot[2] = rs2 + overduetot[2];
              overduetot[0] = overduetot[0] + rval;
            end else begin
              if (latedays==0) and (Agedb.ActualInvoices!=0) then begin
                currenttot[1] = currenttot[1] + rs;
                currenttot[2] = currenttot[2] + rs2;
                currenttot[0] = currenttot[0] + rval;
              end else begin
                notduetot[1] = notduetot[1] + rs;
                notduetot[2] = notduetot[2] + rs2;
                notduetot[0] = notduetot[0] + rval;
              end;
            end;
          end;
        end;
      end;
    end;
    if (testf) then begin
        if ((CustOut==false) and (RepSpec.ArtMode<>3) and (RepSpec.ArtMode<>2) and (RepSpec.ArtMode<>4) and (RepSpec.ArtMode<>6) and (RepSpec.ArtMode!=10)) then begin
          Gray_Divider(0,1);
          StartFormat(15);
           OutString(0,"DblCUVc",CUr.Code,false);
           OutString(100,0,CUr.Name,false);
           OutString(280,0,CUr.Phone,false);
           if (RepSpec.flags[2]==1) then begin
             OutString(480,0,CUr.CurncyCode,true);
           end;  
          EndFormat;          
          CustOut = true;
        end;
        if ((RepSpec.ArtMode==0) or (RepSpec.ArtMode==1)) then begin
          if (IVr.Addr0<>CUr.Name) then begin
            StartFormat(15);
            OutString(100,0,IVr.Addr0,false);
            EndFormat;
          end;
        end;
        AR1Sum = rs + AR1Sum;
        AR2Sum = rs2 + AR2Sum;
        CurSum = rval + CurSum;
        rwcnt = rwcnt + 1;
        if ((RepSpec.flags[18]!=0) and (RepSpec.ArtMode!=4) and (RepSpec.ArtMode!=6)) then begin
          if (blank(IVr.ARAcc)) then begin
            GetARAcc(IVr.CustCode,IVr.ARAcc);
          end;
          ARRnAddToDebtorsAccounts(IVr.ARAcc,IVr.InvType,rs,debaccs,debbal,debcnt);
        end;
        if (RepSpec.ArtMode==0) then begin// Historik 
          ARWithLogg(CUr,acur,av1,curcnt,RepSpec,IVr,IPrsr,TRr,rval,rwcnt,backdatf);
        end;        
        if (RepSpec.ArtMode==1) then begin// Overview        
          ARRPrintOverView(CUr,IVr,IPrsr,TRr,RepSpec,rval,rs,latedays);
          AddCurncyTotals(acur,av1,curcnt,IVr.CurncyCode,rval);
        end;
        if (RepSpec.ArtMode==2) then begin// Aged
          if ((IVr.InstallmentInv==1) and (RepSpec.flags[19]!=0)) then begin
            SumAgedInstalmenInvoice(RepSpec,CUr,agedate,IVr,Agedb.ActualInvoices,sact,s0,s1,s2,s3,s4,s5,s6,s7);
          end else begin
            if (RepSpec.flags[2]==0) then begin
              SumAged(agedate,latedays,Agedb.ActualInvoices,rs,sact,s0,s1,s2,s3,s4,s5,s6,s7);
              SumAged(agedate,latedays,Agedb.ActualInvoices,rs2,sactb2,s0b2,s1b2,s2b2,s3b2,s4b2,s5b2,s6b2,s7b2);
            end else begin
              if (nonblank(CUr.CurncyCode)) then begin
                SumAged(agedate,latedays,Agedb.ActualInvoices,rval,sact,s0,s1,s2,s3,s4,s5,s6,s7);
              end else begin
                SumAged(agedate,latedays,Agedb.ActualInvoices,rs,sact,s0,s1,s2,s3,s4,s5,s6,s7);
                SumAged(agedate,latedays,Agedb.ActualInvoices,rs2,sactb2,s0b2,s1b2,s2b2,s3b2,s4b2,s5b2,s6b2,s7b2);
              end;
            end;
          end;
        end;
        if (RepSpec.ArtMode==3) then begin// Saldo          
          AddCurTotalsRow(IVr.CurncyCode,rval,blankval,blankval,CurTotalsr);
        end;
        if (RepSpec.ArtMode==4) then begin// rate difference 
          ARRnRateDifferences(RepSpec,IVr,rval,rs,agedate,sumnow,sumcurncy,sumbooked,sumdiff,lastcurncycode,onecurncyf,CurTotalsr);
//          GetOnAccBalance(RepSpec,CUr.Code,CUr.CurncyCode,backdatf,RepSpec.flags[2],sum,sum2,rval,onaccsumbooked,onaccsumnow,onaccsumcurncy,onaccsumdiff,OnAccCurTotalsr,debaccs,debbal,debcnt);
//          sumbooked = sumbooked - onaccsumbooked;
//          sumnow = sumnow - onaccsumnow;
//          sumcurncy = sumcurncy - onaccsumcurncy;
//          sumdiff = sumdiff + onaccsumdiff;
        end;
        if (RepSpec.ArtMode==6) then begin// rate difference detailed 
          ARRnRateDifferencesDetailed(RepSpec,IVr,ARr,CUr,rval,rs,agedate,backdatf,
                            sumnow,sumcurncy,sumbooked,sumdiff,CustOut,lastcurncycode,onecurncyf,CurTotalsr);
        end;

        if (RepSpec.ArtMode==5) then begin// Detailed  Aged          
          sactinv = 0;
          s0inv = 0;
          s1inv = 0;
          s2inv = 0;
          s3inv = 0;
          s4inv = 0;
          s5inv = 0;
          s6inv = 0;
          s7inv = 0;
          totinv = 0;
          if ((IVr.InstallmentInv==1) and (RepSpec.flags[19]!=0)) then begin
            SumAgedInstalmenInvoice(RepSpec,CUr,agedate,IVr,Agedb.ActualInvoices,sact,s0,s1,s2,s3,s4,s5,s6,s7);
          end else begin
            if (RepSpec.flags[2]==0) then begin
              SumAged(agedate,latedays,Agedb.ActualInvoices,rs,sactinv,s0inv,s1inv,s2inv,s3inv,s4inv,s5inv,s6inv,s7inv);
            end else begin
              SumAged(agedate,latedays,Agedb.ActualInvoices,rval,sactinv,s0inv,s1inv,s2inv,s3inv,s4inv,s5inv,s6inv,s7inv);
            end;
          end;
          totinv = s0inv + s1inv;
          totinv = totinv + s2inv;
          totinv = totinv + s3inv;
          totinv = totinv + s4inv;
          totinv = totinv + s5inv;
          totinv = totinv + s6inv;
          totinv = totinv + s7inv;
          totinv = totinv + sactinv;
          if ((IVr.InstallmentInv==1) and (RepSpec.flags[19]!=0)) then begin
            ARPrintDueDetailedInstalmenInvoice(IVr,RepSpec,CUr,Agedb.ActualInvoices,nrofper);
          end else begin
            ARPrintDueDetailed(IVr,RepSpec,CUr.CurncyCode,CUr.Objects,sactinv,s0inv,s1inv,s2inv,s3inv,s4inv,s5inv,s6inv,s7inv,totinv,nrofper);
          end;
          if (RepSpec.flags[2]==0) or (nonblank(CUr.CurncyCode)) then begin
            sact = sactinv + sact;
            s0 = s0inv + s0;
            s1 = s1inv + s1;
            s2 = s2inv + s2;
            s3 = s3inv + s3;
            s4 = s4inv + s4;
            s5 = s5inv + s5;
            s6 = s6inv + s6;
            s7 = s7inv + s7;
          end else begin
            sact = sact + MulRateToBase1(IVr.CurncyCode,sactinv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            s0 = s0 + MulRateToBase1(IVr.CurncyCode,s0inv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            s1 = s1 + MulRateToBase1(IVr.CurncyCode,s1inv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            s2 = s2 + MulRateToBase1(IVr.CurncyCode,s2inv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            s3 = s3 + MulRateToBase1(IVr.CurncyCode,s3inv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            s4 = s4 + MulRateToBase1(IVr.CurncyCode,s4inv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            s5 = s5 + MulRateToBase1(IVr.CurncyCode,s5inv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            s6 = s6 + MulRateToBase1(IVr.CurncyCode,s6inv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            s7 = s7 + MulRateToBase1(IVr.CurncyCode,s7inv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          end;
        end;
L55:;
    end;
  end;
//  find out and print on account receipts 
testf = true;
if (nonblank(RepSpec.f2)) then begin
  if (CUr.SalesMan<>RepSpec.f2) then begin
    testf = false;
  end;  
end;
/*
if (nonblank(RepSpec.TransStr)) then begin
  if (CUr.SalesGroup<>RepSpec.TransStr) then begin
    testf = false;
  end;  
end;
*/
if (RepSpec.flags[1]==1) then begin
  if (nonblank(RepSpec.f3)) then begin
    if (CUr.CustCat<>RepSpec.f3) then begin testf = false; end;
  end;    
end;  
if (nonblank(RepSpec.f4)) then begin
  if (SetInSet(RepSpec.f4,CUr.Classification)==false) then begin
    testf = false;
  end;
end;
if (nonblank(RepSpec.f5)) then begin
  if (testf) then begin
    testf = false;
    ClassTypef(RepSpec.f5,CUr.Classification,testf);
  end;
end;
if (testf) then begin
    rval = 0;
    if (RepSpec.flags[21]<2) then begin    
      if (RepSpec.flags[13]==0) then begin
        GetOnAccBalance(RepSpec,CUr.Code,CUr.CurncyCode,backdatf,RepSpec.flags[2],sum,sum2,rval,onaccsumbooked,onaccsumnow,onaccsumcurncy,onaccsumdiff,OnAccCurTotalsr,debaccs,debbal,debcnt);
        sumbooked = sumbooked - onaccsumbooked;
        sumnow = sumnow - onaccsumnow;
        sumcurncy = sumcurncy - onaccsumcurncy;
        sumdiff = sumdiff + onaccsumdiff;
        if (RepSpec.flags[2]!=0) then begin          
          for (i=0;i<MatRowCnt(OnAccCurTotalsr);i=i+1) begin
            MatRowGet(OnAccCurTotalsr,i,OnAccCurTotalsrw);
            AddCurncyTotals(acur,av1,curcnt,OnAccCurTotalsrw.CurncyCode,OnAccCurTotalsrw.DebVal);
          end;
        end;
        if (RepSpec.ArtMode==3) then begin// Saldo          
          for (i=0;i<MatRowCnt(OnAccCurTotalsr);i=i+1) begin
            MatRowGet(OnAccCurTotalsr,i,OnAccCurTotalsrw);
            AddCurTotalsRow(OnAccCurTotalsrw.CurncyCode,OnAccCurTotalsrw.DebVal,blankval,blankval,CurTotalsr);
          end;
        end;

        RecordNew(OnAccCurTotalsr);
        if (nonblank(CUr.CurncyCode)) then begin
          if (RepSpec.flags[2]!=0) then begin          
//            TotOnAcc = TotOnAcc + rval;//difrent customers have difrent curencies
            TotOnAcc = TotOnAcc + sum;
          end else begin
            TotOnAcc = TotOnAcc + sum;
          end;
        end else begin
          TotOnAcc = TotOnAcc + sum;
        end;
      end;
    end;
    if (blank(CUr.CurncyCode)) then begin //or (CUr.CurncyCode==bcur.BaseCur1) ? 
      if (rval==0) then begin
        sum = 0;
      end;
    end;
    AR1Sum = sum + AR1Sum;
    AR2Sum = sum2 + AR2Sum;
    CurSum = rval + CurSum;
  if (RepSpec.ArtMode==0) then begin
    if (sum<>0) then begin
      PrintOnAccountInfo(CUr,rval,sum,CustOut,RepSpec,CurTotalsr,backdatf);
    end;
  end;
  if (RepSpec.ArtMode==0 or RepSpec.ArtMode==1) then begin
    if ((sum<>0) or (rval<>0)) then begin
      if (RepSpec.flags[2]==0) then begin
        if (CustOut==false) then begin
          Gray_Divider(0,1);
          StartFormat(15);
          OutString(0,"DblCUVc",CUr.Code,false);
          OutString(100,0,CUr.Name,false);
          OutString(280,0,CUr.Phone,false);
          if (RepSpec.flags[2]==1) then begin
            OutString(480,0,CUr.CurncyCode,true);
          end;
          EndFormat;
          CustOut = true;
        end;
        StartFormat(15);
        OutString(140,0,USetStr(11857),false);
        if (RepSpec.ArtMode==0) then begin
          OutValBiDi(480,0,sum,M4Val,true,520);
        end else begin
          OutValBiDi(450,0,sum,M4Val,true,490);
        end;
        EndFormat;
        if (RepSpec.flags[20]!=0) then begin
          PrintPrepaymentsNrsIP(RepSpec.flags[2],RepSpec,CUr.Code,backdatf,140,450);
        end;        
      end else begin
        PrintOnAccountInfo(CUr,rval,sum,CustOut,RepSpec,CurTotalsr,backdatf);
      end;
      if (nonblank(CUr.CurncyCode)) then begin
        AddCurncyTotals(acur,av1,curcnt,CUr.CurncyCode,rval);
      end;
    end;
  end;
  if (RepSpec.ArtMode==4) then begin
    if (sumdiff<>0) then begin
      StartFormat(15);
       OutString(0,0,CUr.Name,false);
       if (onecurncyf) then begin
         OutVal(240,0,sumcurncy,M4Val,true);
       end;
       OutVal(320,0,sumnow,M4Val,true);
       OutVal(400,0,sumbooked,M4Val,true);
       OutVal(480,0,sumdiff,M4Val,true);
      EndFormat;
      totdiff = sumdiff + totdiff;
      totbooked = sumbooked + totbooked;
      totnow = sumnow + totnow;
    end;
    sumdiff = 0;
    sumbooked = 0;
    sumnow = 0;
    sumcurncy = 0;
  end;
  if (RepSpec.ArtMode==6) then begin
    if (sumdiff<>0) then begin
      if (CustOut==false) then begin
        StartFormat(15);
         OutString(0,"DblCUVc",CUr.Code,false);
         OutString(100,0,CUr.Name,false);
         if (RepSpec.flags[2]==1) then begin
           OutString(480,0,CUr.CurncyCode,true);
         end;  
        EndFormat;
        CustOut = true;
      end;              
      Gray_Divider(200,1);
      StartFormat(15);
       if (onecurncyf) then begin
         OutVal(240,0,sumcurncy,M4Val,true);
       end;
       OutVal(320,0,sumnow,M4Val,true);
       OutVal(400,0,sumbooked,M4Val,true);
       OutVal(480,0,sumdiff,M4Val,true);
      EndFormat;
      totdiff = sumdiff + totdiff;
      totbooked = sumbooked + totbooked;
      totnow = sumnow + totnow;
    end;
    sumdiff = 0;
    sumbooked = 0;
    sumnow = 0;
    sumcurncy = 0;
  end;
  if (RepSpec.ArtMode==2) then begin
    testf = true;
    if ((sact==0) and (s0==0) and (s1==0) and (s2==0) and (s3==0) and  (s4==0) and  (s5==0) and (s6==0) and (s7==0) and (sum==0)) then begin testf = false; end;        
    if (testf) then begin
/*    
      if (RepSpec.flags[2]==1) then begin
        s0 = rval + s0;
      end else begin
        s0 = sum + s0;
      end;  
*/      
      tot = s0 + s1;
      tot = tot + s2;
      tot = tot + s3;
      tot = tot + s4;
      tot = tot + s5;
      tot = tot + s6;
      tot = tot + s7;
      tot = tot + sact;
      if (RepSpec.flags[2]==1) then begin
        tot = tot + rval;
      end else begin
        tot = tot + sum;
      end;  

      StartFormat(15);
       OutString(0,"DblCUVc",CUr.Code,false);
       OutString(48,0,CUr.Name,false);
       if (RepSpec.flags[2]==1) then begin
         if (blank(CUr.CurncyCode)) then begin
           PrintAgedLine(sact,s0,s1,s2,s3,s4,s5,s6,s7,sum,tot,nrofper,480,CUr.Code);
         end else begin
           PrintAgedLine(sact,s0,s1,s2,s3,s4,s5,s6,s7,rval,tot,nrofper,464,CUr.Code);
           OutString(465,0,CUr.CurncyCode,false);
         end;
       end else begin
         PrintAgedLine(sact,s0,s1,s2,s3,s4,s5,s6,s7,sum,tot,nrofper,480,CUr.Code);
       end;
      EndFormat;
    end;
  end;
  if (RepSpec.ArtMode==5) then begin
    testf = true;
    if ((sact==0) and (s0==0) and (s1==0) and (s2==0) and (s3==0) and (s4==0) and (s5==0) and (s6==0) and (s7==0) and (sum==0)) then begin testf = false; end;
    if (testf) then begin
      if (sum<>0) then begin
        PrintOnAccountInfo(CUr,rval,sum,CustOut,RepSpec,CurTotalsr,backdatf);
      end;
/*      
      if (RepSpec.flags[2]==1) then begin
        s0 = rval + s0;
      end else begin
        s0 = sum + s0;
      end;  
*/      
      tot = s0 + s1;
      tot = tot + s2;
      tot = tot + s3;
      tot = tot + s4;
      tot = tot + s5;
      tot = tot + s6;
      tot = tot + s7;
      tot = tot + sact;
      if (RepSpec.flags[2]==1) then begin
        tot = tot + rval;
      end else begin
        tot = tot + sum;
      end;  
      if (Agedb.ActualInvoices!=0) then begin
        Black_Divider(150,480);
      end else begin
        Black_Divider(200,480);
      end;
      StartFormat(15);
      if (RepSpec.flags[2]==1) then begin
        if (blank(CUr.CurncyCode)) then begin
          PrintAgedLine(sact,s0,s1,s2,s3,s4,s5,s6,s7,blval,tot,nrofper,480,""); // CUr.Code
        end else begin
          PrintAgedLine(sact,s0,s1,s2,s3,s4,s5,s6,s7,blval,tot,nrofper,464,""); // CUr.Code
          OutString(465,0,CUr.CurncyCode,false);
        end;
      end else begin
        PrintAgedLine(sact,s0,s1,s2,s3,s4,s5,s6,s7,blval,tot,nrofper,480,""); // CUr.Code
      end;
      EndFormat;
    end;
  end;
end;
 
 Total1Due = Total1Due + overduetot[1];
 TotalCurDue = TotalCurDue + overduetot[0];
 Total2Due = Total2Due + overduetot[2];
 
 Total1NotDue = Total1NotDue + notduetot[1];
 TotalCurNotDue = TotalCurNotDue + notduetot[0];
 TotalCurrent[0] = TotalCurrent[0] + currenttot[0];
 TotalCurrent[1] = TotalCurrent[1] + currenttot[1];
 TotalCurrent[2] = TotalCurrent[2] + currenttot[2];
 
 if ((RepSpec.ArtMode==0) or (RepSpec.ArtMode==1)) then begin
   if (CustOut==true) then begin
     if (RepSpec.flags[2]==0) then begin
       if (RepSpec.ArtMode==0) then begin
         Black_Divider(290,480);
       end else begin
         Black_Divider(290,450);
       end;
     end;
     if (RepSpec.flags[2]==1) then begin
       if (RepSpec.ArtMode==0) then begin
         PrintCurncyTotals(acur,av1,av2,av3,curcnt,450,-1,-1,320,false,RepSpec.PocketPC);
       end else begin
         PrintCurncyTotals(acur,av1,av2,av3,curcnt,450,-1,-1,320,false,RepSpec.PocketPC);
       end;
       Black_Divider(290,460);
     end;
     StartFormat(15);
      OutString(320,0,USetStr(2424),true);
      if (nonblank(RepSpec.CurncyCode)) and (RepSpec.flags[2]==1) then begin
        OutValBiDi(450,0,CurSum,M4Val,true,490);
      end else begin
        pos = 450;
        if (RepSpec.ArtMode==0) then begin
          if (RepSpec.flags[2]==0) then begin
            pos = 480;
          end;
        end;
        if (RepSpec.flags[2]==0) then begin
          OutValBiDi(pos,0,AR1Sum,M4Val,true,520);
        end else begin
          if (nonblank(CUr.CurncyCode)) then begin
            OutValBiDi(pos,0,CurSum,M4Val,true,500);
          end else begin
            OutValBiDi(pos,0,AR1Sum,M4Val,true,500);
          end;
        end;
      end;
     EndFormat;
     if (overduetot[1]<>0) then begin
        StartFormat(15);
         OutString(320,0,USetStr(2527),true);
         if (nonblank(RepSpec.CurncyCode)) and (RepSpec.flags[2]!=0) then begin
           OutValBiDi(450,0,overduetot[0],M4Val,true,490);
         end else begin
           if (RepSpec.flags[2]!=0) and (nonblank(CUr.CurncyCode)) then begin
             OutValBiDi(450,0,overduetot[0],M4Val,true,490);
           end else begin
             OutValBiDi(450,0,overduetot[1],M4Val,true,490);
           end;
         end;
        EndFormat;
     end;
     if (currenttot[1]<>0) then begin
        StartFormat(15);
         OutString(320,0,USetStr(2520),true);
         if (nonblank(RepSpec.CurncyCode)) and (RepSpec.flags[2]==1) then begin
           OutVal(1,0,currenttot[0],M4Val,true);
         end else begin
           OutVal(1,0,currenttot[1],M4Val,true);
         end;
        EndFormat;
     end;
     if (notduetot[1]<>0) then begin
        StartFormat(15);
         OutString(320,0,USetStr(2521),true);
         if (nonblank(RepSpec.CurncyCode)) and (RepSpec.flags[2]==1) then begin
           OutValBiDi(450,0,notduetot[0],M4Val,true,490);
         end else begin
           if (RepSpec.ArtMode==0 or RepSpec.ArtMode==1) then begin
           if (RepSpec.flags[2]!=0) and (nonblank(CUr.CurncyCode)) then begin
               OutValBiDi(450,0,notduetot[0],M4Val,true,500);
             end else begin
               OutValBiDi(450,0,notduetot[1],M4Val,true,500);
             end;
           end else begin
             OutValBiDi(450,0,notduetot[1],M4Val,true,490);
           end;
         end;
        EndFormat;
     end;
   end;
 end; 
 if (RepSpec.ArtMode==2) then begin
   if (CustOut==true) then begin
     Black_Divider(400,480);
     StartFormat(15);
      OutVal(480,0,AR1Sum,M4Val,true);
     EndFormat;
   end;
 end; 
 if (RepSpec.ArtMode==3) then begin
      if (AR1Sum==0) then begin goto L77; end;
       if (overduetot[1]!=0) then begin
        StartFormat(15);
        OutString(420,0,USetStr(2527),true);
        if (RepSpec.flags[2]!=0) and (nonblank(CUr.CurncyCode)) then begin
          OutValBiDi(480,0,overduetot[0],M4Val,true,520);
        end else begin
          OutValBiDi(480,0,overduetot[1],M4Val,true,520);
        end;
        EndFormat;
      end;  
      if (currenttot[1]<>0) then begin
        StartFormat(15);
         OutString(420,0,USetStr(2520),true);
         OutValBiDi(480,0,currenttot[1],M4Val,true,520);
        EndFormat;
      end;
      if (notduetot[1]<>0) then begin
        StartFormat(15);
         OutString(420,0,USetStr(2521),true);
         OutValBiDi(480,0,notduetot[1],M4Val,true,520);
        EndFormat;
      end;    
      if (overduetot[1]!=0) or (notduetot[1]<>0) or (currenttot[1]<>0) then begin        
        Gray_Divider(400,480);
      end;
      StartFormat(15);
      OutString(0,"DblCUVc",CUr.Code,false);
      OutString(100,0,CUr.Name,false);
      if (RepSpec.flags[2]!=0) and (nonblank(CUr.CurncyCode)) then begin
        OutValBiDi(380,0,CurSum,M4Val,true,420);
        OutString(385,0,CUr.CurncyCode,false);
        OutValBiDi(480,0,CurSum,M4Val,true,520);
      end else begin
        OutValBiDi(480,0,AR1Sum,M4Val,true,520);
      end;
      EndFormat;
      if (RepSpec.flags[2]!=0) and (nonblank(CUr.CurncyCode)) then begin
        Gray_Divider(350,480);
      end else begin
        Gray_Divider(400,480);
      end;
  end;
  overduetot[1] = blankval;
  overduetot[2] = blankval;
  overduetot[0] = blankval;
  notduetot[1] = blankval;
  notduetot[2] = blankval;
  notduetot[0] = blankval;
  currenttot[1] = blankval;
  currenttot[2] = blankval;
  currenttot[0] = blankval;
  if (RepSpec.ArtMode==5) then begin
    if (CustOut==true) then begin
      StartFormat(15);
      EndFormat;
    end;
  end; 
L77:;
  tot1Sum = AR1Sum + tot1Sum;
  tot2Sum = AR2Sum + tot2Sum;
  totCurSum = CurSum + totCurSum;

  ss[0] = s0 + ss[0];
  ss[1] = s1 + ss[1];
  ss[2] = s2 + ss[2];
  ss[3] = s3 + ss[3];
  ss[4] = s4 + ss[4];
  ss[5] = s5 + ss[5];
  ss[6] = s6 + ss[6];
  ss[7] = s7 + ss[7];
  ss[8] = sact + ss[8];

/*  
  ss0 = s0 + ss0;
  ss1 = s1 + ss1;
  ss2 = s2 + ss2;
  ss3 = s3 + ss3;
  ss4 = s4 + ss4;
  ss5 = s5 + ss5;
  ss6 = s6 + ss6;
  ss7 = s7 + ss7;
*/  
  ssb2[0] = ssb2[0] + s0b2;
  ssb2[1] = ssb2[1] + s1b2;
  ssb2[2] = ssb2[2] + s2b2;
  ssb2[3] = ssb2[3] + s3b2;
  ssb2[4] = ssb2[4] + s4b2;
  ssb2[5] = ssb2[5] + s5b2;
  ssb2[6] = ssb2[6] + s6b2;
  ssb2[7] = ssb2[7] + s7b2;
  ssb2[8] = ssb2[8] + sactb2;
/*  
  ss0b2 = s0b2 + ss0b2;
  ss1b2 = s1b2 + ss1b2;
  ss2b2 = s2b2 + ss2b2;
  ss3b2 = s3b2 + ss3b2;
  ss4b2 = s4b2 + ss4b2;
  ss5b2 = s5b2 + ss5b2;
  ss6b2 = s6b2 + ss6b2;
  ss7b2 = s7b2 + ss7b2;
*/  
  goto L22;
L88:;
  if (RepSpec.ArtMode!=10) then begin
    Gray_Divider(0,1);
  end;
  if ((RepSpec.ArtMode==2) or (RepSpec.ArtMode==5)) then begin
    tot = ss[0] + ss[1];
    tot = ss[2] + tot;
    tot = ss[3] + tot;
    tot = ss[4] + tot;
    tot = ss[5] + tot;
    tot = ss[6] + tot;
    tot = ss[7] + tot;
    tot = ss[8] + tot;
    totb2 = totb2 + ssb2[0];
    totb2 = totb2 + ssb2[1];
    totb2 = totb2 + ssb2[2];
    totb2 = totb2 + ssb2[3];
    totb2 = totb2 + ssb2[4];
    totb2 = totb2 + ssb2[5];
    totb2 = totb2 + ssb2[6];
    totb2 = totb2 + ssb2[7];
    totb2 = totb2 + ssb2[8];
    
    if (RepSpec.ArtMode==5) then begin
      totonacctmp = blval;
      if (AgedRec.SeparateOnAcc!=0 and AgedRec.ActualInvoices==0) then begin totonacctmp = TotOnAcc; end;
      PrintARAged(RepSpec,ss[8],ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],totonacctmp,tot+TotOnAcc,nrofper,
                        ssb2[8],ssb2[0],ssb2[1],ssb2[2],ssb2[3],ssb2[4],ssb2[5],ssb2[6],ssb2[7],totb2);
    end else begin
      PrintARAged(RepSpec,ss[8],ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],TotOnAcc,tot+TotOnAcc,nrofper,
                        ssb2[8],ssb2[0],ssb2[1],ssb2[2],ssb2[3],ssb2[4],ssb2[5],ssb2[6],ssb2[7],totb2);
    end;
  end;
  if ((RepSpec.flags[2]==1) and (RepSpec.ArtMode==2)) then begin goto L99; end;
//  if ((RepSpec.flags[2]==1) and (RepSpec.ArtMode==3)) then begin goto L99; end;
  if ((RepSpec.flags[2]==1) and (RepSpec.ArtMode==5)) then begin goto L99; end;
  
  if (RepSpec.ArtMode!=10) then begin
    PrintARReportTotals(RepSpec,Agedb.ActualInvoices,tot1Sum,Total1Due,Total1NotDue,TotOnAcc,tot2Sum,Total2Due,Total2NotDue,totCurSum,TotalCurDue,TotalCurNotDue,TotalCurrent);
    if (RepSpec.ArtMode==3) then begin
      if (RepSpec.flags[2]==1) then begin
        StartFormat(5);
        EndFormat;
        PrintCurTotalsRow(CurTotalsr,-1,290,450,-1,-1);
      end;
    end;
  end;
  
  if (RepSpec.ArtMode==4) or (RepSpec.ArtMode==6) then begin
    StartFormat(15);
    OutVal(320,0,totnow,M4Val,true);
    OutVal(400,0,totbooked,M4Val,true);
    OutVal(480,0,totdiff,M4Val,true);
    EndFormat;
    PrintCurTotalsRow(CurTotalsr,-1,150,240,-1,-1);
  end;
  if ((RepSpec.flags[18]!=0) and (RepSpec.ArtMode!=4) and (RepSpec.ArtMode!=6)) then begin
    ARRnPrintDebtorsAccounts(debaccs,debbal,debcnt);
  end;  
L99:;
  RETURN;
END;


global
procedure ARRn(record RcVc RepSpec)
BEGIN
  val tot1Sum;
  
  StartReportJob(USetStr(2430));
   PrintHeaderAR(RepSpec);
  EndHeader;  

  RunARRn(RepSpec,tot1Sum);
  EndJob;
  RETURN;
END;
