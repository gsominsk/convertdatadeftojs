external function Boolean IsCancelState(string);
external function LongInt YearsOld(Date);

procedure GuestList(Record JobVc Jobr,LongInt rsvnr)
begin
  Integer rwcnt,i;
  Record CUVc CUr;
  row JobVc Jobrw;
  record JobVc subJobr;
  Boolean found;
  String 30 ckey;
  LongInt minorcnt; 

  minorcnt = 0;
  rwcnt = MatRowCnt(Jobr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Jobr,i,Jobrw);
    CUr.Code = Jobrw.GuestCode;
    if (rsvnr>0) then begin
      OutString(0,"DblJobVc",rsvnr,false);
    end;
    OutString(2,0,Jobr.ResCode,false);
    OutString(3,"DblProfileVc",Jobrw.GuestCode,false);
    OutString(4,0,Jobrw.CUName,false);
    if ReadFirstMain(CUr,1,true) then begin
      StartFormat(15);
      if (CUr.Gender==0) then begin
        OutString(5,0,USetStr(9925),false);
      end else begin
        OutString(5,0,USetStr(9926),false);
      end;      
      OutString(6,0,YearsOld(CUr.BirthDate),true);
      OutString(7,0,CUr.Nationality,false);
      OutDate(8,0,CUr.BirthDate,true);
      EndFormat;
      if ((YearsOld(CUr.BirthDate)<21) and (YearsOld(CUr.BirthDate)>0)) then begin
        minorcnt= minorcnt+1;
      end;
    end;
  end;  
  found = true;
  ckey = "Mother:" & Jobr.SerNr;
  SetLoopPosition(subJobr,0);
  subJobr.Mother = Jobr.SerNr;  
  while (LoopKey(ckey,subJobr,1,found)) begin
    if (subJobr.Mother == Jobr.SerNr) then begin
       if (IsCancelState(subJobr.ResStatus)==false) then begin
         GuestList(subJobr,subJobr.SerNr);
       end;
    end else begin
      found = false;
    end;
  end;
  if (minorcnt>0) then begin
    Gray_Divider(0,1);
    StartFormat(15);
    EndFormat;
    StartFormat(15);
    OutString(100,0,USetStr(9927) & ": ",false);
    OutLongInt(240,0,minorcnt,true);
    EndFormat;
  end;
  return; 
end;

procedure RoomingListPerReservation(Record RcVc RepSpec)
begin
  record JobVc Jobr;
  Integer rw;

  Jobr.SerNr = FirstInRange(RepSpec.f1,20);
  if (ReadFirstMain(Jobr,1,true)) then begin
    rw = 1;
    StartReportJob(USetStr(10185));
    Header(rw,USetStr(10199) & ": " & Jobr.TransDate,1);
    rw = rw + 1;
    Header(rw,USetStr(10200) & ": " & Jobr.EndDate,1);
    rw = rw + 1;
    EndHeader;
    switch (Jobr.ReservationType) begin      
      case kReservationTypeNormal:
        if (MatRowCnt(Jobr)>0) then begin
          SetRepCol(2,5);
          SetRepCol(3,50);
          SetRepCol(4,100); 
          SetRepCol(5,270); 
          SetRepCol(6,330);
          SetRepCol(7,365);
          SetRepCol(8,480);
      
          StartFormat(15);
          OutString(2,0,USetStr(9919),false);
          OutString(3,0,USetStr(9921),false);
          OutString(4,0,USetStr(8178),false);
          OutString(5,0,USetStr(9928),false);
          OutString(6,0,USetStr(9929),true);
          OutString(7,0,USetStr(9939),false);
          OutString(8,0,USetStr(9940),true);
          EndFormat;
          Gray_Divider(10,0);
          StartFormat(15);
          GuestList(Jobr,-1);
          EndJob;
        end;
      case kReservationTypeGroup:
        SetRepCol(2,40);
        SetRepCol(3,80);
        SetRepCol(4,140); 
        SetRepCol(5,310); 
        SetRepCol(6,370);
        SetRepCol(7,385);
        SetRepCol(8,480);
        StartFormat(15);
        OutString(0,0,USetStr(9913),false);
        OutString(2,0,USetStr(9919),false);
        OutString(3,0,USetStr(9921),false);
        OutString(4,0,USetStr(8178),false);
        OutString(5,0,USetStr(9928),false);
        OutString(6,0,USetStr(9929),true);
        OutString(7,0,USetStr(9939),false);
        OutString(8,0,USetStr(9940),true);
        EndFormat;
        Gray_Divider(10,0);
        GuestList(Jobr,-1);
        EndJob;
    end;
  end;
  return; 
end;

procedure GuestListPerRoom(record JobVc Jobr,LongInt rsvnr,var array record JobVc aJobr)
begin
  record JobVc subJobr;
  Boolean found;
  String 30 ckey;

  aJobr[aJobr.length] = Jobr;
  found = true;
  ckey = "Mother:" & Jobr.SerNr;
  subJobr.Mother = Jobr.SerNr;  
  while (LoopKey(ckey,subJobr,1,found)) begin
    if (subJobr.Mother!=Jobr.SerNr) then begin
      found = false;
    end;
    if (found) then begin
       if (IsCancelState(subJobr.ResStatus)==false) then begin
         aJobr[aJobr.length] = subJobr;
       end;
    end;
  end;
  return; 
end;

procedure SortReservations(array record JobVc aJobr)
begin
  record JobVc Jobr;
  record JobVc tmpJobr;
  Integer i;
  Boolean changef;
  
  changef = true;
  while (changef) begin
    changef = false;
    for (i=0;i<aJobr.length-1;i=i+1) begin
      RecordCopy(Jobr,aJobr[i]);
      RecordCopy(tmpJobr,aJobr[i+1]);
      if (Jobr.ResCode>tmpJobr.ResCode) then begin
        changef = true;
        aJobr[i+1] = Jobr;
        aJobr[i] = tmpJobr;
      end;
    end;
  end;
  return; 
end;

procedure PrintReservations(array record JobVc aJobr)
begin
  record JobVc Jobr;
  row JobVc Jobrw;
  record CUVc CUr;
  Integer i,ri,rwcnt;
  Integer minorcnt; 

  for (i=0;i<aJobr.length;i=i+1) begin
    RecordCopy(Jobr,aJobr[i]);

    rwcnt = MatRowCnt(Jobr);
    for (ri=0;ri<rwcnt;ri=ri+1) begin
      MatRowGet(Jobr,ri,Jobrw);
      CUr.Code = Jobrw.GuestCode;
      if (Jobr.SerNr>0) then begin
        OutString(0,"DblJobVc",Jobr.SerNr,false);
      end;
      OutString(2,0,Jobr.ResCode,false);
      OutString(3,"DblProfileVc",Jobrw.GuestCode,false);
      OutString(4,0,Jobrw.CUName,false);
      if (ReadFirstMain(CUr,1,true)) then begin
        StartFormat(15);
        if (CUr.Gender==0) then begin
          OutString(5,0,USetStr(9925),false);
        end else begin
          OutString(5,0,USetStr(9926),false);
        end;      
        OutString(6,0,YearsOld(CUr.BirthDate),true);
        OutString(7,0,CUr.Nationality,false);
        OutDate(8,0,CUr.BirthDate,true);
        EndFormat;
        if ((YearsOld(CUr.BirthDate)<21) and (YearsOld(CUr.BirthDate)>0)) then begin
          minorcnt = minorcnt + 1;
        end;
      end;
    end;  

    
  end;
  if (minorcnt>0) then begin
    Gray_Divider(0,1);
    StartFormat(15);
    EndFormat;
    StartFormat(15);
    OutString(100,0,USetStr(9927) & ": ",false);
    OutLongInt(240,0,minorcnt,true);
    EndFormat;
  end;
  return; 
end;

procedure RoomingListPerRoom(record RcVc RepSpec)
begin
  record JobVc Jobr;
  array record JobVc aJobr;
  
  StartReportJob(USetStr(10185));
  EndHeader;
  Jobr.SerNr = FirstInRange(RepSpec.f1,20);
  if (ReadFirstMain(Jobr,1,true)) then begin
    SetRepCol(2,40);
    SetRepCol(3,80);
    SetRepCol(4,140); 
    SetRepCol(5,310); 
    SetRepCol(6,370);
    SetRepCol(7,385);
    SetRepCol(8,480);
    StartFormat(15);
    OutString(0,0,USetStr(9913),false);
    OutString(2,0,USetStr(9919),false);
    OutString(3,0,USetStr(9921),false);
    OutString(4,0,USetStr(8178),false);
    OutString(5,0,USetStr(9928),false);
    OutString(6,0,USetStr(9929),true);
    OutString(7,0,USetStr(9939),false);
    OutString(8,0,USetStr(9940),true);
    EndFormat;
    Gray_Divider(10,0);
    switch (Jobr.ReservationType) begin      
      case kReservationTypeNormal:
        if (MatRowCnt(Jobr)>0) then begin
          GuestListPerRoom(Jobr,-1,aJobr);
        end;
      case kReservationTypeGroup:
        GuestListPerRoom(Jobr,-1,aJobr);
    end;
  end;
  SortReservations(aJobr);
  PrintReservations(aJobr);
  EndJob;
  return; 
end;

global
procedure RoomingListRn(record RcVc RepSpec)
begin
  switch (RepSpec.flags[0]) begin
    case 0: RoomingListPerReservation(RepSpec);
    case 1: RoomingListPerRoom(RepSpec);
  end;
  return;
end;
