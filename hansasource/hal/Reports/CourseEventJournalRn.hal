external procedure HT2Per(Date, Date , var string);

procedure AddToArray(string CountryCode, 
                   string CurncyCode,
                   val value,
                   integer qty,
                    var array string country_code,
                    var array string country_cur,                    
                    var array val country_val,
                    var array integer country_participants,
                    var integer counter)
begin
  integer i;
  boolean foundf;
  
  foundf = false;
  for(i=0;i<counter;i=i+1) begin
    if(country_code[i] == CountryCode) then begin
      foundf = true;
      country_val[i] = country_val[i] + value;
      country_participants[i] = country_participants[i] + qty;
    end;
  end;
  
  if(foundf == false) then begin
    country_code[counter] = CountryCode;  
    country_cur[counter] = CurncyCode;      
    country_val[counter] = value;
    country_participants[counter] =  qty;    
    counter = counter + 1;
  end;

  return;
end;


procedure CreateSortArray(var array integer country_participants,
                           var integer counter,
                           var array integer sort_array)
begin
  integer i,j;
  boolean foundf;
  integer position;
  
  foundf = false;
  for(i=0;i<counter;i=i+1) begin
     position = 0;
    for(j=0;j<counter;j=j+1) begin
      if(j<>i) then begin
        if(country_participants[i] < country_participants[j]) then begin
          position = position + 1;
        end;
      end;
    end;
    while(sort_array[position] > 0) begin
      position = position + 1;
    end;
    sort_array[position] = i;
  end;

  return;
end;

procedure RunCourseEventJournal(record RcVc RepSpec,
                    var array string country_code,
                    var array string country_cur,
                    var array val country_val,
                    var array integer country_participants,
                    var integer counter,
                    var array integer sort_array)
begin
  record CourseEventVc CourseEventr;
  row CourseEventVc CourseEventrw;  
  //record CountryVc Countryr;
  integer i,rwcnt;
  boolean TrHs,testf;
  integer qty,tot_qty;
  val value;
  
  array string 20 salesman_code,salesman_cur;
  array val salesman_val;
  array integer salesman_participants;  
  array integer sort_array2;  
  integer counter2,j;
  integer cancelled,tot_cancelled;
  string 60 status;
  
  if (RepSpec.flags[5]==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(16710),false);
    OutString(50,0,USetStr(16701),false);
    OutString(120,0,USetStr(16711),false);  
    OutString(170,0,USetStr(16712),false);
    OutString(260,0,USetStr(16713),true);  
    OutString(300,0,USetStr(16714),true);
    OutString(340,0,USetStr(16715),true);
    OutString(380,0,USetStr(16716),true);  
    OutString(390,0,USetStr(16720),false);  
    OutString(460,0,USetStr(16717),true);  
    EndFormat;
    Gray_Divider(0,1);
  end;
  
  TrHs = true;
  CourseEventr.CourseCode = RepSpec.f1;
  
  while (LoopKey("TransDate",CourseEventr,1,TrHs)) begin   
    if (TrHs) then begin
      testf = true;      
      if (nonblank(RepSpec.f1)) then begin 
        if (CourseEventr.CourseCode <> RepSpec.f1) then begin
          testf = false;    
        end;
      end;      
      if (DateInRange(CourseEventr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
        testf = false;
      end;      
      if (RepSpec.ArtMode == 1) then begin
        if (CourseEventr.StatusFlag <> 0) then begin
          testf = false;
        end;
      end;
      if (RepSpec.ArtMode == 2) then begin
        if (CourseEventr.StatusFlag <> 1) then begin
          testf = false;
        end;
      end;      
      if (RepSpec.ArtMode == 3) then begin
        if (CourseEventr.StatusFlag <> 2) then begin
          testf = false;
        end;
      end;      
      if (nonblank(RepSpec.f2)) then begin
        if(RepSpec.f2 <> CourseEventr.CountryCode) then begin
          testf = false;
        end;
      end;      
      if (RepSpec.flags[0]==0) then begin
        if(MatRowCnt(CourseEventr) == 0) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.f4) and CourseEventr.SalesMan!=RepSpec.f4) then begin
        testf = false;
      end;
      
      if (testf) then begin
        qty = 0;
        value = 0;
        cancelled = 0;
        rwcnt = MatRowCnt(CourseEventr);
        for(i=0;i<rwcnt;i=i+1) begin
          MatRowGet(CourseEventr,i,CourseEventrw);
          if(nonblank(RepSpec.f3)) then begin
            if(RepSpec.f3 <> CourseEventrw.Reference) then begin
              goto LSkipOnSalesMan;
            end;
          end;
          if (CourseEventrw.Status==kCourseEventPaticipantStatusPaying or (CourseEventrw.Status==kCourseEventPaticipantStatusNotPaying and RepSpec.flags[1]==1)) then begin
            if (CourseEventrw.Price>0) then begin
              value = value + CourseEventrw.Price;
            end else begin
              value = value + CourseEventr.Price;
            end;
            qty = qty + 1;
          end else begin
            if (CourseEventrw.Status==kCourseEventPaticipantStatusStandby) then begin
              cancelled = cancelled + 1;
            end;
          end;
LSkipOnSalesMan:;          
        end;
        

        if(RepSpec.flags[0]==0) then begin
          if(qty == 0) then begin
            goto LSkipOnSalesMan2;
          end;
        end;
        
        if (RepSpec.flags[5]==0) then begin
          StartFormat(15);
          OutStringID(0,"DblCourseEventVc",CourseEventr.SerNr,false,CurrentCompany);
          OutStringID(40,"DblCourseVc",CourseEventr.CourseCode,false,CurrentCompany);
          OutString(120,0,CourseEventr.CountryCode,false);        
          OutString(170,0,CourseEventr.TransDate,false);
          OutString(260,0,CourseEventr.SalesMan,true);        
          OutLongInt(300,0,CourseEventr.MaxPersons,true);
          OutString(340,0,qty,true);
          OutString(380,0,cancelled,true);        

          switch (CourseEventr.StatusFlag) begin
            case 0:            
              status = USetStr(16727);
            case 1:
              status = USetStr(16728);
            case 2:
              status = USetStr(16729);
          end;
          OutString(390,0,status,false);

          OutVal(460,0,value,M4Val,true);
          OutString(465,0,CourseEventr.CurncyCode,false);
          EndFormat;
        
          if (RepSpec.flags[2] == 1) then begin
            if (rwcnt > 0) then begin
              StartFormat(15);        
              EndFormat;          
              StartFormat(15);              
              OutString(50,0,USetStr(16718),false);
              OutString(260,0,USetStr(16719),false);        
              OutString(1,0,USetStr(16720),true);
              EndFormat;                           
              Gray_Divider(50,1);
            end;      
          end;
        
          for (i=0;i<rwcnt;i=i+1) begin
            StartFormat(15);              
            MatRowGet(CourseEventr,i,CourseEventrw);

            if (nonblank(RepSpec.f3)) then begin
              if (RepSpec.f3 <> CourseEventrw.Reference) then begin
                goto LSkipOnSalesMan3;
              end;
            end;

          
            if (not(RepSpec.flags[1]==0 and CourseEventrw.Status==kCourseEventPaticipantStatusNotPaying)) then begin
              if (RepSpec.flags[2] == 1) then begin          
                OutString(50,0,CourseEventrw.ContactName,false);
                OutString(260,0,CourseEventrw.Reference,false);        
                status = "";              
                switch(CourseEventrw.Status) begin
                  case kCourseEventPaticipantStatusPaying:            
                  case kCourseEventPaticipantStatusCancelled:
                    status = USetStr(16721);
                  case kCourseEventPaticipantStatusNotPaying:
                    status = USetStr(16722);
                  case kCourseEventPaticipantStatusPreliminary:
                    status = USetStr(16729);
                end;
                OutString(1,0,status,true);
              end;
            end;      
            if (CourseEventr.StatusFlag!=2) then begin
              AddToArray(CourseEventrw.Reference,
                    CourseEventr.CurncyCode,
                     CourseEventrw.Price,
                     1,
                      salesman_code,
                      salesman_cur,
                      salesman_val,
                      salesman_participants,
                      counter2);
              end;      
            end;
LSkipOnSalesMan3:;                
        end;
        if(RepSpec.flags[2] == 1) and (RepSpec.flags[5]==0) then begin               
          EndFormat;                
          StartFormat(15);        
          EndFormat;                
          Gray_Divider(0,1);          
        end;
        
        if (CourseEventr.StatusFlag!=2) then begin
          tot_qty = tot_qty + qty;
          tot_cancelled = tot_cancelled + cancelled;
          AddToArray(CourseEventr.CountryCode,
                   CourseEventr.CurncyCode,
                     value,
                     qty,country_code,
                      country_cur,
                      country_val,
                      country_participants,
                      counter);
        end;
      end;
LSkipOnSalesMan2:;      
    end;
  end;
  if (RepSpec.flags[5]==0) then begin
    if(RepSpec.flags[2] == 0) then begin                 
      Gray_Divider(0,1);
    end;
    StartFormat(15);
    OutString(0,0,USetStr(16723),false);
    OutVal(340,0,tot_qty,M40Val,true);  
    OutVal(380,0,tot_cancelled,M40Val,true);
    EndFormat;
  end;

  CreateSortArray(salesman_participants,
                   counter2,
                   sort_array2);

  if (RepSpec.flags[5]==0) then begin
    StartFormat(15);
    EndFormat;
    StartFormat(15);
    EndFormat;
    StartFormat(15);  
    OutString(0,0,USetStr(16726),false);
    EndFormat;
    StartFormat(15);    
    OutString(0,0,USetStr(16709),false);  
    OutString(250,0,USetStr(16717),true);  
    OutString(400,0,USetStr(16724),true);      
    EndFormat;
    Gray_Divider(0,1);  
    tot_qty = 0;
    for (i=0;i<counter2;i=i+1) begin
      StartFormat(15);    
      if (blank(salesman_code[sort_array2[i]])) then begin
        OutString(0,0,"WEB",false);      
      end else begin
        OutString(0,"DblSalesManJournal",salesman_code[sort_array2[i]],false);  
      end;
      OutString(250,0,salesman_val[sort_array2[i]],true);
      OutString(255,0,salesman_cur[sort_array2[i]],false);    
      OutString(400,0,salesman_participants[sort_array2[i]],true);      
      tot_qty = tot_qty + salesman_participants[sort_array2[i]];
      EndFormat;
    end;
    Gray_Divider(0,1);    
    StartFormat(15);      
    OutString(0,0,USetStr(16723),false);  
    OutString(400,0,tot_qty,true);        
    EndFormat; 
  end;
  return;
end;

global 
procedure CourseEventJournalRn (record RcVc RepSpec)
begin
  integer rw;
  string 255 tstr;
  record CompaniesBlock Cb;
  record CountryVc Countryr;
  row CompaniesBlock Cbrw;
  Integer i,rwcnt;
  Integer oldcomp;
  array string 20 country_code,country_cur;
  array val country_val;
  array integer country_participants;
  integer counter;
  array integer sort_array;
  integer tot_qty;
  
  counter = 0;
  
//  RepSpec.Stext = RepSpec.sStartDate2 & ":" & RepSpec.sEndDate2;
//only when reportnigperiods on
  rw = 1;
  StartReportJob(USetStr(16700));
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (nonblank(RepSpec.f1)) then begin
    tstr = USetStr(16701) & ": " & RepSpec.f1;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (RepSpec.ArtMode == 0) then begin
    tstr = USetStr(16702);
    Header(rw,tstr,1);
  end;
  if (RepSpec.ArtMode == 1) then begin
    tstr = USetStr(16703);
    Header(rw,tstr,1);
  end;
  if (RepSpec.ArtMode == 2) then begin
    tstr = USetStr(16704);
    Header(rw,tstr,1);
  end;
  if (RepSpec.ArtMode == 3) then begin
    tstr = USetStr(16705);
    Header(rw,tstr,1);
  end;
  rw = rw + 1;  
  if (blank(RepSpec.f2)) then begin
    tstr = USetStr(16706);
    Header(rw,tstr,1);
  end else begin
    tstr = USetStr(16707) & ": " & RepSpec.f2;
    Header(rw,tstr,1);  
  end;
  rw = rw + 1;  
  if (blank(RepSpec.f3)) then begin
    tstr = USetStr(16708);
    Header(rw,tstr,1);
  end else begin
    tstr = USetStr(16709) & ": " & RepSpec.f3;
    Header(rw,tstr,1);  
  end;  
  EndHeader;

  if (RepSpec.flags[3]==0) then begin
    RunCourseEventJournal(RepSpec,country_code,
                      country_cur,
                      country_val,
                      country_participants,
                      counter,sort_array);
  end else begin
    oldcomp = CurrentCompany;  
    BlockLoad(Cb);
    rwcnt = MatRowCnt(Cb);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Cb,i,Cbrw);
      if (blank(Cbrw.TCPIP) and (blank(Cbrw.PresenceCode))) then begin
        if (SetCompanyCode(Cbrw.CompCode,false)) then begin
          if (RepSpec.flags[5]==0) then begin

            StartFormat(15);
            OutString(0,0,USetStr(7661) & ":",false);
            OutString(80,0,Cbrw.CompCode,false);
            OutString(100,0,Cbrw.CompName,false);
            EndFormat;
            Black_Divider(0,200);
          end;
          RunCourseEventJournal(RepSpec,country_code,
                      country_cur,
                      country_val,
                      country_participants,
                      counter,sort_array);
          if (RepSpec.flags[5]==0) then begin
            StartFormat(30);
            EndFormat;  
          end;
        end;
      end;
    end;
    ResetCompany(oldcomp);
  end;
  
    
  CreateSortArray(country_participants,
                    counter,
                    sort_array);
  if (RepSpec.flags[5]==0) then begin
    StartFormat(15);
    EndFormat;
    StartFormat(15);
    EndFormat;
  end;
  
  StartFormat(15);  
  OutString(0,0,USetStr(16725),false);
  EndFormat;
  StartFormat(15);    
  OutString(0,0,USetStr(16711),false);  
  OutString(250,0,USetStr(16717),true);  
  OutString(400,0,USetStr(16724),true);      
  EndFormat;
  Gray_Divider(0,1);  
  
  tot_qty = 0;
  for(i=0;i<counter;i=i+1) begin
    StartFormat(15);   
    if (blank(country_code[sort_array[i]])) then begin
      OutString(0,0,"International",false);      
    end else begin
      Countryr.Code = country_code[sort_array[i]];
      if(ReadFirstMain(Countryr,1,true)) then begin
        OutStringID(0,"DblCountryJournal",Countryr.Comment,false,Countryr.Code);        
      end else begin
        OutString(0,0,country_code[sort_array[i]],false);  
      end;
    end;
    OutString(250,0,country_val[sort_array[i]],true);
    OutString(255,0,country_cur[sort_array[i]],false);    
    OutString(400,0,country_participants[sort_array[i]],true);      
    tot_qty = tot_qty + country_participants[sort_array[i]];
    EndFormat;
  end;
  Gray_Divider(0,1);    
  StartFormat(15);      
  OutString(0,0,USetStr(16723),false);  
  OutString(400,0,tot_qty,true);        
  EndFormat;  


  
  EndJob;
  return;
end;
