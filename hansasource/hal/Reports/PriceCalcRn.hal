external procedure GetJobClassifications(record JobVc,var string);
external procedure GroupJobClassifications(string,boolean,var array string,var array integer,var integer);
external procedure GetJobExtras(record JobVc,var array date,var array string,var array integer,var integer);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external function string 20 FindJobCustomerCode(record JobVc);
external procedure SetupIVFromShopBask2(var record IVVc,Integer,string,string,string,string,val,val,val,val,val);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external procedure CalcSum(val,val,val,val,var val,Integer);

function string 255 BuildClassString(string qualstr,integer cnt,array string aguestcclass,array integer aguestcclasscnt,integer cclasscnt)
begin
  integer i;
  string 255 res,tstr1;
  
  res = qualstr & ": " & cnt;
  for (i=0;i<cclasscnt;i=i+1) begin
    tstr1 = tstr1 & aguestcclass[i] & ":" & aguestcclasscnt[i] & ",";
  end;
  tstr1 = Mid(tstr1,0,Len(tstr1)-1);
  if nonblank(tstr1) then begin
    res = res & " (" & tstr1 & ")";
  end;
  BuildClassString = res;
  return;
end;

function integer FormatGuestValue(longint value)
begin
  integer res;
  
  if (value==-1) then begin
    res = 0;
  end else begin
    res = value;
  end;
  FormatGuestValue = res;
  return;
end;

procedure PrintReservationHeader(record JobVc Jobr)
begin
  transaction integer datcol,calccol,personcol,prcol,totcol,hrw;
  string 255 cclass,tstr,tstr1;
  integer i,adultcnt,childcnt;
  array string 255 aadultcclass,achildcclass;
  array integer aadultcclasscnt,achildcclasscnt;
  
  GetJobClassifications(Jobr,cclass);
  GroupJobClassifications(cclass,true,aadultcclass,aadultcclasscnt,adultcnt);
  GroupJobClassifications(cclass,false,achildcclass,achildcclasscnt,childcnt);
  
  //First row
  StartFormat(15);
  OutStringID(datcol,"DblJobVcID",USetStr(27001) & ": " & Jobr.SerNr,false,Jobr.SerNr);
  OutString(calccol,0,USetStr(27003) & ": " & Jobr.TransDate,false);
  tstr = BuildClassString(USetStr(27005),FormatGuestValue(Jobr.Persons),aadultcclass,aadultcclasscnt,adultcnt);
  OutString(personcol,0,tstr,false);
  OutString(prcol,0,USetStr(27010) & ": " & Jobr.ResUsage,false);
  OutString(480,0,USetStr(27014) & ": " & Jobr.Sum4,true);
  EndFormat;
  
  //Second row
  StartFormat(15);
  OutString(calccol,0,USetStr(27004) & ": " & Jobr.EndDate,false);
  tstr = Jobr.Type;
  if nonblank(Jobr.ResCode) then begin
    tstr = Jobr.ResCode;
  end;
  tstr = BuildClassString(USetStr(27006),FormatGuestValue(Jobr.Children),achildcclass,achildcclasscnt,childcnt);
  OutString(personcol,0,tstr,false);
  if nonblank(Jobr.ResCode) then begin
    OutString(prcol,0,USetStr(27011) & ": " & Jobr.ResCode,false);
  end else begin
    OutString(prcol,0,USetStr(27011) & ": " & Jobr.Type,false);
  end;
  OutString(480,0,USetStr(27015) & ": " & Jobr.Sum4ExclDisc,true);
  EndFormat;
  
  //Third Row
  StartFormat(15);
  OutString(calccol,0,USetStr(27012) & ": " & Jobr.NrOfDays,false);
  OutString(personcol,0,USetStr(27013) & ": " & Jobr.CUCode & " " & Jobr.CUName,false);
  OutString(480,0,USetStr(27016) & ": " & Jobr.TotalSum4,true);  
  EndFormat;
  Black_Divider(1,0);
  return;
end;

procedure PrintResColumnHeaders
begin
  transaction integer datcol,calccol,prcol,totcol;

  StartFormat(15);
  OutString(datcol,0,USetStr(27002),false);
  OutString(calccol,0,USetStr(27007),false);
  OutString(prcol,0,USetStr(27008),false);
  OutString(totcol,0,USetStr(27009),true);
  EndFormat;
  Gray_Divider(1,0);
  return;
end;

procedure PrintAccommoation(longint JobSerNr,row JobPriceVc JobPricerw,var val bal)
begin
  string 255 tstr;
  transaction integer datcol,calccol,prcol,totcol;

  StartFormat(15);
  OutStringID(datcol,"DblJobPriceVcID",JobPricerw.StayDay,false,JobSerNr);
  tstr = USetStr(27020);
  if nonblank(JobPricerw.PriceCalc) then begin
    tstr = tstr & ": " & JobPricerw.PriceCalc;
  end;
  OutString(calccol,0,tstr,false);
  if nonblank(JobPricerw.PriceRules) then begin
    OutString(prcol,"DblPriceRulesVc",JobPricerw.PriceRules,false);
  end else begin
    OutString(prcol,0,USetStr(27017),false);
  end;
  OutString(totcol,0,JobPricerw.Sum,true);
  EndFormat;
  bal = bal+ JobPricerw.Sum;
  return;
end;

procedure PrintPackageExtras(record JobVc Jobr,date tdate,array date adate,array string aartcode,array integer aqty,integer cnt,var val bal)
begin 
  record INVc INr;
  record IVVc IVr;
  integer i;
  boolean foundf,calcpricef,dummyf;
  string 255 indesc,vatcod,tax2code,salesacc,location,taxtemplatecode;
  val price,reb,basep,tax2prc;
  transaction integer datcol,calccol,prcol,totcol,usediscount;
  
  SetupIVFromShopBask2(IVr,Jobr.InclVAT,Jobr.PriceList,Jobr.ResUsage,FindJobCustomerCode(Jobr),Jobr.CurncyCode,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
  for (i=0;i<cnt;i=i+1) begin
    if (tdate==adate[i]) then begin
      INr.Code = aartcode[i];
      ReadFirstMain(INr,1,true);
      GetItemPriceDiscount3(aartcode[i],aqty[i],INr,IVr.CurncyCode,
                            IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,
                            IVr.LangCode,IVr.CustCat,IVr.PriceList,IVr.RebCode,
                            price,indesc,reb,vatcod,basep,salesacc,IVr.ExportFlag,calcpricef,tdate,IVr.TransTime,
                            IVr.CustCode,true,dummyf,IVr.PayDeal,tax2code,tax2prc,IVr.Region,location,taxtemplatecode);
      CalcSum(aqty[i],price,1,reb,price,usediscount);
      StartFormat(15);
      OutString(calccol,0,indesc & " x " & aqty[i],false);
      OutString(prcol,"DblINVc",aartcode[i],false);
      OutString(totcol,0,price,true);
      EndFormat;
      bal = bal + price;
      foundf = true;
    end else begin
      if (foundf==true) then begin
        i = cnt;
      end;
    end;
  end;
  return;
end;

procedure PrintDayBalance(val bal,boolean dividerf)
begin
  transaction integer prcol,totcol;
  
  StartFormat(15);
  OutString(prcol,0,USetStr(27019),false);
  OutString(totcol,0,bal,true);
  Gray_Divider(440,480);
  EndFormat;
  if (dividerf==true) then begin
    Gray_Divider(prcol,480);
  end;
  return;
end;

procedure PrintResBalance(val bal)
begin
  transaction integer prcol,totcol;
  
  StartFormat(15);
  OutString(prcol,0,USetStr(27021),false);
  OutString(totcol,0,bal,true);
  EndFormat;
  return;
end;

procedure PrintPriceDetails(record JobVc Jobr)
begin
  record JobPriceVc JobPricer;
  row JobPriceVc JobPricerw;
  integer i,rwcnt,cnt;
  array date adate;
  array string 20 aartcode;
  array integer aqty;
  val bal,total;
  boolean jobpricef;
  transaction integer datcol,calccol,prcol,totcol;
  
  JobPricer.RecType = 0;
  JobPricer.SerNr = Jobr.SerNr;
  JobPricer.RowNr = 0;
  if (ReadFirstMain(JobPricer,3,true)==true) then begin
    GetJobExtras(Jobr,adate,aartcode,aqty,cnt);
    rwcnt = MatRowCnt(JobPricer);
    jobpricef = (rwcnt<>0);
    for (i=0;i<rwcnt;i=i+1) begin
      bal = 0;
      MatRowGet(JobPricer,i,JobPricerw);
      PrintAccommoation(Jobr.SerNr,JobPricerw,bal);
      PrintPackageExtras(Jobr,JobPricerw.StayDay,adate,aartcode,aqty,cnt,bal);
      PrintDayBalance(bal,(i<>(rwcnt-1)));
      total = total + bal;
    end;
  end;
  if (jobpricef==true) then begin
    PrintResBalance(total);
    Gray_Divider(1,0);
  end;
  return;
end;

global
procedure PriceDetailsRn(record RcVc RepSpec)
begin
  record JobVc Jobr;
  record JobPriceVc JobPricer;
  record GeneralOptionBlock GenOptRec;
  integer hrw;
  transaction integer datcol,calccol,personcol,prcol,totcol,usediscount;
  boolean foundresf,firstresf,foundprf;
  
  hrw = 1;
  datcol = 0;
  calccol = 60;
  personcol = 180;
  prcol = 340;
  totcol = 480;
  BlockLoad(GenOptRec);
  usediscount = GenOptRec.UseDiscount;
  StartReportJob(USetStr(27000));
  if (RepSpec.long1<>-1) then begin
    Header(hrw,USetStr(27001) & ": " & RepSpec.long1,1);
    Jobr.SerNr = RepSpec.long1;    
  end;
  EndHeader;
  firstresf = true;
  foundresf = true;
  while LoopMain(Jobr,1,foundresf) begin
    foundprf = true;
    if (RepSpec.long1<>-1) and (Jobr.SerNr<>RepSpec.long1) then begin foundprf = false; end;
    if (foundprf==true) then begin
      PrintReservationHeader(Jobr);
      if (firstresf==true) then begin
        PrintResColumnHeaders;
        firstresf = false;
      end;
      PrintPriceDetails(Jobr);
    end;
  end;
  EndJob;
  return;
end;