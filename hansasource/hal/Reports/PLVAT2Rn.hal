external procedure GetVATRow(string,var row VATCodeBlock);
external function Integer VATType(string);
external procedure GetMonthText(string,Date,var string);
external procedure HT2Per(Date, Date , var string);
external procedure GetCLOut(record TRVc,record RcVc,record BaseCurBlock,integer,val,var string, var string,var string,var string,var val,var val,var string);
external procedure GetTransactions(record TRVc,record RcVc, record BaseCurBlock ,record VATCodeBlock ,record VATBlock,boolean,integer,var string ,var string ,var string ,var string ,var val ,var val,var val,var string );
external procedure GetVATInvoices(record TRVc,record RcVc, record BaseCurBlock,record VATCodeBlock,integer,var string ,var string ,var string ,var string,integer,var val,var val,var val,var string,var string,boolean,var string,var string);
external procedure GetVATInvoices2(record TRVc,record RcVc, record BaseCurBlock,record VATCodeBlock,integer,var string ,var string ,var string ,var string,integer,var val,var val,var val,var string,var string,boolean,var string,var string,Integer,
                                   array string,array string,array val,array val,array longint,array string,
                                   array string,array string,array date,array val,array string,array string,
                                   array string,array string,array string,var integer,vector val,array string);

external procedure GetVATExpVc(record TRVc,record RcVc, record BaseCurBlock,var  val ,integer ,
                               var val ,var val , var val, var val, var val, var val,var integer,
                               array string,array string,array val,array val,array longint,array string,
                               array string,array string,array date,array val,array string,array string,
                               array string,array string,array string,var integer,vector val,array string);
external procedure GetPayments(record TRVc,string,record RcVc, record BaseCurBlock,string ,integer ,Integer,var val ,var val , var val, var val, var val, var val,var integer,Boolean,
                               array string,array string,array val,array val,array longint,array string,
                               array string,array string,array date,array val,array string,array string,
                               array string,array string,array string,var integer/*,Integer,Integer*/,vector val,array string);
external procedure GetInvoices(record TRVc ,record RcVc, record BaseCurBlock ,record VATCodeBLock,integer,var string,var string,var string ,var string ,var val ,var val,var boolean,var string);
external procedure getcurrentrate(record RcVc,record BaseCurBlock,string,val,val,val,string,var val,var val);
external procedure GetVECurrncyVal(record RcVc,string ,date,val,var val,var string );
external function val AbsoluteVal(val);
external function boolean IsDocNumPPR(string);
external procedure SeperateSerAndNr(string,var string,var string);
external procedure GetLatVATSalesRows(record RcVc,boolean,
                        array string,array string,array val,array val,array longint,array string,
                        array string,array string,array date,array val,array string,array string,
                        array string,array string,var integer,
                        var val,var val,var val,var val,var val,var val,array string,vector val,array string);
external function boolean ExcludeTrType(string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);


function string 10 GetVATCodeTaxCode(string taxcode)
begin
  record TaxRulesVc TaxRr;
  string 10 res;
  Taxrr.Code = taxcode;
  res = "G";
  if (ReadFirstMain(Taxrr,1,true)) then begin
    res = Taxrr.TaxCode;
  end;
  //LogText(0,taxcode);
  //LogText(0,res);

  GetVATCodeTaxCode = res;
  return;
end;

function string 10 GetVATCodeTaxType(string taxcode,string defstr)
begin
  record TaxRulesVc TaxRr;
  string 10 res;
  Taxrr.Code = taxcode;
  res = defstr;
  if (ReadFirstMain(Taxrr,1,true)) then begin
    if (nonblank(Taxrr.TaxType)) then begin
      res = Taxrr.TaxType;
    end;
  end;
  //LogText(0,taxcode);
  //LogText(0,res);

  GetVATCodeTaxType = res;
  return;
end;

global
function string 20 GetOffInvPart(string invnr,integer partf)
begin
  string 20 ivserie,ivnumber;
  string 20 res;
  
  if (StripnonDigits(left(invnr,3))=="") then begin
    ivserie = left(invnr,3);
    ivnumber = StripNonDigits(invnr);
    end else begin
      if (StripNonDigits(right(invnr,3))=="") then begin
        ivserie = right(invnr,3);
        ivnumber = StripNonDigits(invnr);
      end;
    end;
    if (partf==0) then begin//number
      if (ivserie<>"") then begin
        res = ivnumber;
    end else begin
      res = invnr;
    end;
  end else begin//serie
    res = ivserie;
  end;

  GetOffInvPart = res;
  return;
end;

global
function string 5 GetTaxRuleTransType(record TRVc TRr)
begin
  record TaxRulesVc TaxRr;
  row VATCodeBlock VatCoderw;
  row TRVc TRrw;
  integer i,rwcnt;
  string 5 res;
    
  res = "";
  rwcnt = MatRowCnt(TRr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TRr,i,TRrw);
    GetVATRow(TRrw.VATCode,VATCoderw);
    if (nonblank(VATCoderw.TaxRules)) then begin
      TaxRr.Code = VATCoderw.TaxRules;
      if (ReadFirstMain(TaxRr,1,true)) then begin
        if (nonblank(TaxRr.TaxCode)) then begin
          if (TaxRr.TaxCode=="R1" or TaxRr.TaxCode=="R2" or TaxRr.TaxCode=="R3") then begin
          //if (nonblank(TaxRr.TaxCode)) then begin
            if (TaxRr.VATType==1) then begin
              res = TaxRr.TaxCode;
            end;
          end;
          i = rwcnt;
        end;
      end;
    end;
  end;

  GetTaxRuleTransType = res;
  return;
end;

function string 5 GetTaxRuleDocType(record TRVc TRr,string type)
begin
  record TaxRulesVc TaxRr;
  row VATCodeBlock VatCoderw;
  row TRVc TRrw;
  integer i,rwcnt;
  string 5 res;

  res = type;
  rwcnt = MatRowCnt(TRr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TRr,i,TRrw);
    GetVATRow(TRrw.VATCode,VATCoderw);
    if (nonblank(VATCoderw.TaxRules)) then begin
      TaxRr.Code = VATCoderw.TaxRules;
      if (ReadFirstMain(TaxRr,1,true)) then begin
        if (nonblank(TaxRr.TaxType)) then begin
          res = TaxRr.TaxType;
          i = rwcnt;
        end;
      end;
    end;
  end;

  GetTaxRuleDocType = res;
  return;
end;

function string 2 GetTransType(string supp,string trtype)
begin
  record CUVc CUr;
  string 2 TransType;

  if (nonblank(trtype)) then begin
    TransType = trtype;
  end else begin
    TransType = "A";
    if (blank(supp)) then begin
      TransType = "T";
    end else begin
      CUr.Name = supp;
      if (readfirstkey("VEActName",CUr,1,true)) then begin
        if (blank(CUr.VATNr) or mid(CUr.VATNr,6,1)=="-") then begin//or StripNonDigits(left(Cur.VATNr,2))<>""
          TransType = "N";
        end else begin
          if (CUr.ExportFlag==2 or CUr.ExportFlag==4) then begin
            TransType = "I";
          end;
        end;
      end;
    end;
  end;

  GetTransType = TransType;
  return;
end;

global
procedure ConvertValToBaseCurncy(record RCVc RepSpec,val sum,val vat,string curncyCode,val FrRate,val ToRateB1,val ToRateB2,val BaseRate1,val BaseRate2,var val nsum,var val nvat)
begin
  
  if (RepSpec.basecurncy==0) then begin
    nvat = MulRateToBase1(curncyCode,vat,FrRate,ToRateB1,ToRateB2,BaseRate1,BaseRate2,DefaultCurRoundOff);
    nsum = MulRateToBase1(curncyCode,sum,FrRate,ToRateB1,ToRateB2,BaseRate1,BaseRate2,DefaultCurRoundOff);
  end else begin
    nvat = MulRateToBase2(curncyCode,vat,FrRate,ToRateB1,ToRateB2,BaseRate1,BaseRate2,DefaultCurRoundOff);
    nsum = MulRateToBase2(curncyCode,sum,FrRate,ToRateB1,ToRateB2,BaseRate1,BaseRate2,DefaultCurRoundOff);
  end; 

  return;
end; 

global
procedure GetPLVAT2Rows(record RcVc RepSpec,boolean customsf,
                        array string asupp,array string arcode,array val apaysum,array val apayvat,array longint ainvoicenr,array string adocname,
                        array string adocnr,array string adocnr2,array date atransdate,array val acurpaysum,array string acurcode,array string adoctype,
                        array string addwincode,array string addsernr,var integer size,
                        var val total,var val totvat,var val mintot,var val minvat,var val maxtot,var val maxvat,array string TransType2,vector val vsuppval,array string asuppcode)//KZS
begin
  record TRVc TRr;
  row TRVc TRrw;
  boolean foundf,showf,testf,payf;
  integer rw,rwc;
  integer i,rwcnt;
  integer num;
  record APAccBlock APAccbl;
  record VATBlock VATBl;
  record VATCodeBlock VATCodebl;
  row VATCodeBlock VATCoderw,VATCoderw2;
  record TaxRulesVc TaxRr;
  Record BaseCurBlock BCb;
  record ExpVc Expr;
  record CLOutVc CLOutr;
  record CUVc CUr;
  boolean exclf,VatImportf;
  val vatproc;
  Val total2,totvat2;
  Val paysum,payvat,curpaysum;
  val mintot2,minvat2;
  val maxtot2,maxvat2,t1,t2;
  val temp,t;
  string 255 tstr;
  string 100 supp;
  string 50 rcode;
  string 50 trdate;
  string 100 docnr,docnr2;
  string 50 docdate;
  string 50 invoicenr;
  string 10 vatcode;
  string 20 lastacc;
  string 10 docname;
  string 5 curcode;
  string 2 TransType;
  string 25 ddwincode;
  string 25 ddsernr;
  val torate,fromrate;
  string 10 doctype;
  string 30 suppcode;
  
  blockload(APAccBl);
  blockLoad(BCb);
  blockLoad(VATBl);
  blockload(VATCodeBl);

  totvat = 0;
  total = 0;
  mintot = 0;
  minvat = 0;
  maxvat = 0;
  maxtot = 0;
  size = 0;
  num = 1;
  if (customsf) then begin
    vatproc = 21;
    TRr.TransDate=RepSpec.sStartDate;
    while(loopkey("TransDate",TRr,1,true) and (TRr.TransDate<=RepSpec.sEndDate)) begin
      if (TRr.TransDate>=RepSpec.sStartDate) then begin
        foundf = false;
        doctype = 0;
        docnr = "";
        docnr2 = "";
        payvat = 0;
        paysum = 0;
        rwc = MatRowCnt(TRr);
        for (rw=0;rw<rwc;rw=rw+1) begin
          MatRowGet(TRr,rw,TRrw);
          VatImportf = VATType(TRrw.VATCode)==7;
          GetVATRow(TRrw.VATCode,VATCoderw);
          payf = false;
          if (nonblank(VatCoderw.PayPurchVATAcc) and SetInset(VatCoderw.PayPurchVATAcc,VATbl.VATCustomsAcc)) then begin
            payf = true;
          end;
          if (Trrw.stp==1 and (setinset(TRrw.AccNumber,VATBl.VATCustomsAcc) or (VatImportf) /*or (TRr.IntYc == OPYc and TRrw.AccNumber == APAccbl.VATAcc)*/) and (TRrw.ovst==0)) then begin
          
            if (TRr.IntYc==VIYc and payf==false and RepSpec.flags[7]==0) then begin//ienakoshie rekini    (preces)--------------------
            GetVATInvoices2(TRr,RepSpec,bcb,VATCodeBl,rw,supp,rcode,docnr,docdate,1,payvat,paysum,curpaysum,curcode,docname,true,TransType,suppcode,0,
                          asupp,arcode,apaysum,apayvat,ainvoicenr,adocname,
                          adocnr,adocnr2,atransdate,acurpaysum,acurcode,adoctype,
                          addwincode,addsernr,TransType2,size,vsuppval,asuppcode);
              foundf = false;
              total = total + paysum;
              totvat = totvat + payvat;

              rw = rwc;
            end;
            if (TRr.IntYc==OPYc and RepSpec.flags[1]==0) then begin//maksaajuma uzdevumi  
            //trace(Trr.Number,vatimportf);
              GetPayments(TRr,TRrw.AccNumber,RepSpec,bcb,TRrw.VATCode,rw,1,payvat,paysum,curpaysum,t,t,t,num,true,
                          asupp,arcode,apaysum,apayvat,ainvoicenr,adocname,
                          adocnr,adocnr2,atransdate,acurpaysum,acurcode,adoctype,
                          addwincode,addsernr,TransType2,size,vsuppval,asuppcode);
              foundf = false;
              total = total + paysum;
              totvat = totvat + payvat;
              rw = rwc;
            end; 
            if (TRr.IntYc==ExpYc and RepSpec.flags[3]==0) then begin //avansa noreekini  
              Expr.SerNr = TRr.Number;
              testf = ReadFirstMain(Expr,1,true);
              supp = "";
              rcode = "";          
              Expr.SerNr = TRr.Number;
              testf = ReadFirstMain(Expr,1,true);
              //getcurrentrate(RepSpec,bcb,Expr.CurncyCode,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.TransDate,fromRate,ToRate);
              //payvat = Expr.CalcVATVal * torate / fromrate;
              //paysum = (Expr.PayVal-Expr.CalcVATVal) *torate / fromrate;     
              ConvertValToBaseCurncy(RepSpec,(Expr.PayVal-Expr.CalcVATVal),Expr.CalcVATVal,Expr.CurncyCode,
              Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,paysum,payvat);
              curpaysum = Expr.PayVal-Expr.CalcVATVal;
              curcode = Expr.CurncyCode;
              docnr = UsetStr(16023) & " " & TRr.Number; //TODO: should this rather be Exprw.DocNr / Exprw.Identifier is DocNr is blank??
              docdate = TRr.TransDate;
              doctype = "P";
              ddwincode = "DblExpVc";
              ddsernr = Trr.Number;
              foundf = true;
            end;
            if (TRr.IntYc<180 and RepSpec.flags[8]==0 and TRrw.VATCode<>"") then begin//gramatojumi
              GetTransactions(TRr,RepSpec,bcb,VATCodebl,VATBl,true,rw,supp,rcode,docnr,docdate,payvat,paysum,curpaysum,curcode);
              doctype = 1;
              foundf = true;
              ddwincode = "DblTRVcID";
              ddsernr = Trr.Number & ":" & Trr.IntYc;
            end;
            if (TRr.IntYc==CLOutYc and RepSPec.flags[5]==0) then begin//kases izdevumu orderis
              CLOutr.SerNr = TRr.Number;
              testf = readFirstmain(CLOutr,1,true);
              docnr = USetStr(1194) & TRr.Number;
              doctype = "P";
              docdate = TRr.TransDate;
              docnr = CLOutr.Comment; //TODO: should this show in the report? for non-customs side, its TRr.RefStr. Which should it be?
              CUr.Code = CLOutr.CUCode;
              if (readFirstMain(Cur,1,true)) then begin
                supp = CUr.Name;
                rcode = CUr.VATNr; 
              end
              else begin
                supp ="";
                rcode = "";
              end;       
              //getcurrentrate(RepSpec,bcb,CLOutr.CurncyCode,CLOutr.FrRate,CLOutr.ToRateB1,CLOutr.ToRateB2,CLOutr.TransDate,fromRate,ToRate);
              
              ConvertValToBaseCurncy(RepSpec,0,CLOutr.NetVal,CLOutr.CurncyCode,CLOutr.FrRate,CLOutr.ToRateB1,CLOutr.ToRateB2,CLOutr.BaseRate1,CLOutr.BaseRate2,paysum,payvat);
              paysum = payvat * 100 / vatproc;     
              curpaysum = CLOutr.NetVal;
              GetVECurrncyVal(RepSpec,CUr.Code,docdate,paysum,curpaysum,curcode);
              foundf = true;
              ddwincode = "DblCLOutID";
              ddsernr = Trr.Number;
            end;
            if (foundf) then begin 
              if (payvat!=0) then begin
                TransType2[size] = GetVATCodeTaxCode(VATCoderw.TaxRules);//GetTaxRuleTransType(TRr);
                total = total + paysum;
                totvat = totvat + payvat;
                asupp[size] = supp;
                arcode[size] = rcode;
                apaysum[size] = paysum;
                apayvat[size] = payvat;
                acurpaysum[size] = curpaysum;
                acurcode[size] = curcode;
                adocnr[size] = docnr;
                adocnr2[size] = docnr2;
                adoctype[size] = doctype;
                atransdate[size] = TRr.TransDate;
                addwincode[size] = ddwincode;
                addsernr[size] = ddsernr;
                size = size + 1;
                rw = rwc;
              end;
            end;
          end;
        end;
      end;
    end;
  end else begin
    TRr.TransDate = RepSpec.sStartDate;
    While(loopkey("TransDate",TRr,1,true) and (TRr.TransDate<=RepSpec.sEndDate)) begin 
      if (TRr.TransDate>=RepSpec.sStartDate) then begin
        foundf = false;
        rwc = MatRowCnt(TRr);
        lastacc = " ";
        for (rw=0;rw <rwc;rw=rw+1) begin
          doctype = 0;
          docnr = "";
          docnr2 = "";
          payvat = 0;
          paysum = 0;
          MatRowGet(TRr,rw,TRrw);
          rwcnt = matrowcnt(VATCodeBl);
          showf = false;
          if (Trrw.stp<>1) then begin
            rwcnt = 0;
            showf = false;
          end;
          if (RepSpec.f1<>"" and SetInSet(TRrw.VATCode,RepSPec.f1)) then begin
            rwcnt = 0;
            showf = false;
          end;
          for (i=0;i<rwcnt;i=i+1) begin
            Matrowget(VATCodebl,i,VATCoderw);
            showf = false;
            TaxRr.Code = VatCoderw.TaxRules;
            if (ReadFirstMain(TaxRr,1,true)) then begin end;
            VatImportf = TaxRr.VATType==7;
            if (setinset(TRrw.AccNumber,VATBl.VATCustomsAcc)==false and (VatImportf==false) and (TRrw.VATCode==VATCoderw.VATCode)) then begin
              if  ((TRrw.AccNumber==VATCoderw.PurchVATAcc and blank(VATCoderw.PayPurchVATAcc) or TRrw.AccNumber==VATCoderw.PayPurchVATAcc) or 
                (TRr.IntYc==OPYc and TRrw.AccNumber==APAccbl.VATAcc) or
                (Trr.IntYc==IVYc and Trrw.AccNumber==VATCoderw.SalesVATAcc)) and 
                ((TRrw.DebVal>0 or TRrw.CredVal<0) or ((TRr.IntYc==OPYc and RepSpec.flags[9]==1) or (TRr.IntYc==203 and RepSpec.flags[10]==1)) ) then begin
                showf = true;
                i = rwcnt;
                vatproc = VATCoderw.ExVatpr;
              end;
            end;
          end;
          if (showf and TRrw.ovst==0) then begin
            if (TRr.IntYc==VIYc and RepSpec.flags[7]==0) then begin//ienakoshie rekini    (preces)--------------------               
              GetVATInvoices2(TRr,RepSpec,bcb,VATCodeBl,rw,supp,rcode,docnr,docdate,-1,payvat,paysum,t1,tstr,docname,false,TransType,suppcode,1,
                              asupp,arcode,apaysum,apayvat,ainvoicenr,adocname,
                              adocnr,adocnr2,atransdate,acurpaysum,acurcode,adoctype,
                              addwincode,addsernr,TransType2,size,vsuppval,asuppcode);
              foundf = false;
              total = total + paysum;
              totvat = totvat + payvat;
              rw = rwc;
            end; 
            if (TRr.IntYc==OPYc and RepSpec.flags[1]==0) then begin//maksaajuma uzdevumi   
              GetPayments(TRr,TRrw.AccNumber,RepSpec,bcb,TRrw.VATCode,rw,-1,payvat,paysum,maxtot2,maxvat2,mintot2,minvat2,num,false,
                asupp,arcode,apaysum,apayvat,ainvoicenr,adocname,
                adocnr,adocnr2,atransdate,acurpaysum,acurcode,adoctype,
                addwincode,addsernr,TransType2,size,vsuppval,asuppcode);
              totvat = totvat + payvat + maxvat2 + minvat2;
              total = total + paysum + maxtot2 + mintot2;
              maxtot = maxtot + maxtot2;
              maxvat = maxvat + maxvat2;
              mintot = mintot + mintot2;
              minvat = minvat + minvat2;
              foundf = false;
              rw = rwc;
            end; 
            if (TRr.IntYc==ExpYc and RepSpec.flags[3]==0 and  lastacc != TRrw.AccNumber) then begin //avansa noreekini  
              GetVATExpVc(TRr,RepSpec,bcb,vatproc,rw,payvat,paysum,maxtot2,maxvat2,mintot2,minvat2,num,
                        asupp,arcode,apaysum,apayvat,ainvoicenr,adocname,
                        adocnr,adocnr2,atransdate,acurpaysum,acurcode,adoctype,addwincode,addsernr,TransType2,size,vsuppval,asuppcode);

              totvat = totvat + payvat +  maxvat2 + minvat2;
              total = total + paysum +  maxtot2 + mintot2;
              mintot = mintot + mintot2;
              minvat = minvat + minvat2;
              rw = rwc;
            end;
            if (TRr.IntYc==IVYc and nonblank(TRrw.DebVal) and RepSpec.flags[6]==0) then begin// rekini
              GetInvoices(TRr,RepSpec,bcb,VATCodebl,rw,supp,rcode,docnr,docdate,payvat,paysum,exclf,suppcode);
              if (exclf) then begin
                foundf = false;
              end else begin
                docnr2 = GetOffInvPart(docnr,1);
                docnr = GetOffInvPart(docnr,0);
                docname = USetStr(16025);
                doctype = 4;
                rw = rwc;
                foundf = true;
              end;
              ddwincode = "DblIVVc";
              ddsernr = Trr.Number;
            end;
            if (TRr.IntYc<180 and RepSpec.flags[8]==0 and nonblank(TRrw.VATCode)) then begin//gramatojumi
              GetTransactions(TRr,RepSpec,bcb,VATCodebl,VATBl,false,rw,supp,rcode,docnr,docdate,payvat,paysum,t1,tstr);
              doctype = 5;
              docname = "";
              suppcode = tstr;
              rw = rwc;
              foundf = true; 
              ddwincode = "DblTRVcID";
              ddsernr = Trr.Number & ":" & Trr.IntYc;
            end;
            if (TRr.IntYc==CLOutYc and RepSpec.flags[5]==0) then begin//kases izdevumu orderis ---------
              GetCLOut(TRr,RepSpec,bcb,rw,vatproc,supp,rcode,docnr,docdate,payvat,paysum,suppcode);
              docname = USetStr(16023);
              doctype = 2;
              rw = rwc;
              foundf = true;
              ddwincode = "DblCLOutVc";
              ddsernr = Trr.Number;
            end;
            if (left(UpperCase(docnr),4) == "AKTS") then begin
              docnr = Trim(right(docnr,len(docnr)-4));
              docname = USetStr(16028);
              ddwincode = "DblTRVcID";
              ddsernr = Trr.Number;
            end;
            lastacc = TRrw.AccNumber;
            if (foundf and payvat<>0) then begin
              showf = true;      
              total = total + paysum;
              totvat = totvat + payvat;
              if (AbsoluteVal(paysum) < AbsoluteVal(RepSpec.vals0) and nonblank(RepSpec.vals0)) then begin
                if nonblank(suppcode) then begin
                  vsuppval[suppcode] = vsuppval[suppcode] + paysum;
                end else begin
                  minvat = minvat + payvat;
                  mintot = mintot + paysum;
                  showf  = false;
                end;
              end;

              if  (showf) then begin
                TransType2[size] = GetVATCodeTaxCode(VATCoderw.TaxRules);//GetTaxRuleTransType(TRr);
                asupp[size] = supp;
                asuppcode[size]= suppcode;
                arcode[size] = rcode;
                apaysum[size] = paysum;
                apayvat[size] = payvat;
                ainvoicenr[size] = InvoiceNr;
                adocname[size] = docname;
                adocnr[size] = docnr;
                adocnr2[size] = docnr2;
                adoctype[size] = GetVATCodeTaxType(VATCoderw.TaxRules,doctype);
                atransdate[size] = TRr.TransDate;
                addwincode[size] = ddwincode;
                addsernr[size] = ddsernr;
                size = size + 1;
              end;        
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure Customs(record RcVc RepSpec,var integer num)
begin
  val totvat,total;
  val mintot,minvat,maxtot,maxvat;
  array string 100 asupp;
  array string 50 arcode;
  array val apaysum;
  array val apayvat;
  array longint ainvoicenr;
  array string 10 adocname;
  array string 100 adocnr,adocnr2;
  array date atransdate;
  array val acurpaysum;
  array string 5 acurcode;
  array string 10 adoctype;
  array string 25 addwincode;
  array string 25 addsernr;
  integer i,size;
  array string 2 TransType;
  array string 30 asuppcode;
  vector val vsuppval;
  string 5 trtype;

  Black_divider(0,1);
  StartFormat(25);
  endformat;  
  StartFormat(15);
  OutString(100,0,USetStr(16019),false);
  endFormat;  
  StartFormat(10);
  Endformat;  
  Black_divider(0,1);
  StartFormat(15);
  OutString(260,0,USetStr(16020),true);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(16007),false);
  OutString(20,0,UsetStr(16008),false);
  OutString(130,0,USetStr(16009),false);//PVN reg nr.
  OutString(200,0,USetStr(31992),false);//K.//what is K???

  OutString(260,0,USetStr(16010),true); 
  OutString(300,0,USetStr(16011),true);
  OutString(320,0,USetStr(16018),false);
  OUTString(375,0,USetStr(16014),false);
  OutString(1,0,USetStr(16015),true);
  EndFormat;
  Black_divider(0,1);

  GetPLVAT2Rows(RepSpec,true,
                asupp,arcode,apaysum,apayvat,ainvoicenr,adocname,
                adocnr,adocnr2,atransdate,acurpaysum,acurcode,adoctype,addwincode,addsernr,size,
                total,totvat,mintot,minvat,maxtot,maxvat,TransType,vsuppval,asuppcode);

  for (i=0;i<size;i=i+1) begin
    trtype = GetTransType(asupp[i],TransType[i]);

    StartFormat(15);
    OutString(0,0,i+1,false);
    OutString(20,0,asupp[i],false);
    OutString(130,0,arcode[i],false);
    OutString(200,0,trtype,false);
    OUtString(260,0,apaysum[i],true);
    OutString(300,0,apayvat[i],true);
    OutString(340,0,acurpaysum[i],true);
    OutString(370,0,acurcode[i],true);              
    if (adocnr[i]=="") then begin adocnr[i] = "     "; end;
    OutStringID(375,addwincode[i],adocnr[i],false,addsernr[i]);
    OutString(1,0,atransdate[i],true);
    endFormat;
  end;
  num = num + i;
  Gray_Divider(0,1);  
  StartFormat(15); 
  OutString(20,0,"",false);
  OutString(30,0,"",false);

  OutString(12,0,USetStr(16016),false);
  OutVal(260,0,total,M4Val,true);
  OutVal(300,0,totvat,M4Val,true);
  EndFormat; 
  Black_Divider(0,1);  
  
  return;
end;

procedure SalesVAT(record RcVc RepSpec,integer num)
begin
  val totvat,total;
  val mintot,minvat,maxtot,maxvat;
  array string 100 asupp;
  array string 50 arcode;
  array val apaysum;
  array val apayvat;
  array longint ainvoicenr;
  array string 10 adocname;
  array string 100 adocnr,adocnr2;
  array date atransdate;
  array val acurpaysum;
  array string 5 acurcode;
  //array integer adoctype;
  array string 5 adoctype;
  array string 25 addwincode;
  array string 25 addsernr;
  integer i,size,cnt;
  boolean showf;
  array string 2 TransType;
  array string 30 asuppcode;
  vector val vsuppval;
  vector integer vsuppindex;

  Black_divider(0,1);
  StartFormat(25);
  endformat;  
  StartFormat(15);
  OutString(100,0,USetStr(31991),false);
  endFormat;  
  StartFormat(10);
  Endformat;  
  Black_divider(0,1);
  StartFormat(15);
  OutString(290,0,USetStr(16020),true);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(16007),false);
  OutString(20,0,UsetStr(16008),false);
  OutString(130,0,USetStr(16009),false);//PVN reg nr.
  OutString(200,0,USetStr(31994),false); 
  OutString(290,0,USetStr(16010),true); 
  OutString(340,0,USetStr(16011),true);
  //OutString(320,0,USetStr(16018),false);
  OUTString(370,0,USetStr(31993),false);
  OUTString(410,0,USetStr(16014),false);
  OutString(1,0,USetStr(16015),true);
  EndFormat;
  Black_divider(0,1);
  cnt = 0;
  GetLatVATSalesRows(RepSpec,false,asupp,arcode,apaysum,apayvat,ainvoicenr,adocname,adocnr,adocnr2,atransdate,acurpaysum,acurcode,adoctype,addwincode,addsernr,size,total,totvat,mintot,minvat,maxtot,maxvat,TransType,vsuppval,asuppcode);
  for (i=0;i<size;i=i+1) begin
    showf = true;
    if (nonblank(asuppcode[i]) and ExcludeTrType(TransType[i])==false) then begin
       if (AbsoluteVal(apaysum[i])<AbsoluteVal(RepSpec.vals0) and nonblank(RepSpec.vals0)) then begin
         if (vsuppval[asuppcode[i]]>=AbsoluteVal(RepSpec.vals0) and nonblank(RepSpec.vals0) and RepSpec.flags[15]==0) then begin
           if (vsuppindex[asuppcode[i]]>0) then begin
             apaysum[vsuppindex[asuppcode[i]]] = apaysum[vsuppindex[asuppcode[i]]] + apaysum[i];
             apayvat[vsuppindex[asuppcode[i]]] = apayvat[vsuppindex[asuppcode[i]]] + apayvat[i];
           end else begin
             asupp[size] = asupp[i];
             adoctype[size] = "V";
             arcode[size] = arcode[i];
             apaysum[size] = apaysum[i];
             apayvat[size] = apayvat[i];
             vsuppindex[asuppcode[i]] = size;
             size = size + 1;
           end;
           showf = false;
         end else begin
           mintot = mintot + apaysum[i];
           minvat = minvat + apayvat[i];
           showf = false;
         end;
       end;
     end;
    if (showf) then begin
      cnt = cnt + 1;
      StartFormat(15);
      //OutStringID(0,addwincode[i],num+i,false,addsernr[i]);
      OutString(0,0,cnt,false);
      //OutString(0,0,addsernr[i],false);
      OutString(20,0,asupp[i],false);
      if (adoctype[i]=="V") then begin
        OutString(130,0,arcode[i],false);     
        OutString(200,0,"",false);
        OutString(290,0,apaysum[i],true);
        OutString(340,0,apayvat[i],true);
        OutString(370,0,adoctype[i],false);
      end else begin
        OutString(130,0,arcode[i],false);
        OutString(200,0,TransType[i],false);
        OUtString(290,0,apaysum[i],true);
        OutString(340,0,apayvat[i],true);
        //OutString(340,0,acurpaysum[i],true);
        //OutString(370,0,acurcode[i],true);              
        //OutString(375,0,adocnr[i],false);
        OutString(370,0,adoctype[i],false);
        if (adocnr[i]=="") then begin adocnr[i] = "     "; end;
        OutStringID(410,addwincode[i],adocnr[i],false,addsernr[i]);
        OutString(1,0,atransdate[i],true);
      end;
      endFormat;
    end;
  end;
  if (maxtot!=0) then begin
    StartFormat(15);
    //OutString(20,0,UsetStr(14301) & " X",false);
    OutString(20,0,"",false);
    OutString(30,0,"",false);
    OutString(40,0,"",false);
    OutString(200,0,"",false);
    OutVal(290,0,maxtot,M4Val,true);
    OutVal(340,0,maxvat,M4Val,true);
    OutString(370,0,"X",false);

    EndFormat;
    //total = total + maxtot;
    //totvat = totvat + maxvat;
  end;
  if (mintot!=0) then begin
    StartFormat(15);
    //OutString(20,0,USetStr(16017),false);
    OutString(20,0,"",false);
    OutString(30,0,"",false);
    OutString(40,0,"",false);

    OutString(200,0,"",false);   
    OutVal(290,0,mintot,M4Val,true);
    OutVal(340,0,minvat,M4Val,true);
    OutString(370,0,"T",false);
    EndFormat;
  end;
  
  Gray_Divider(0,1);  
  StartFormat(15); 
  OutString(20,0,"",false);
  OutString(30,0,"",false);
  OutString(40,0,"",false);
  OutString(12,0,USetStr(16016),false);
  OutVal(290,0,total,M4Val,true);
  OutVal(340,0,totvat,M4Val,true);
  EndFormat; 
  Black_Divider(0,1);  
  
  return;
end;

global
procedure PLVAT2Rn(record RcVc RepSPec)
begin
  record CYBlock CYBl;
  Val total,totvat;
  Val paysum,payvat;
  val mintot,minvat;
  val maxtot,maxvat;
  string 255 tstr;
  
  array string 100 asupp;
  array string 50 arcode;
  array string 2 TransType;
  array val apaysum;
  array val apayvat;
  array longint ainvoicenr;
  array string 10 adocname;
  array string 100 adocnr,adocnr2;
  array date atransdate;
  array val acurpaysum;
  array string 5 acurcode;
  array string 10 adoctype;
  array string 25 addwincode;
  array string 25 addsernr;
  string 2 trtype;
  integer i,size,cnt;
  integer period;
  vector val vsuppval;
  array string 30 asuppcode;
  vector integer vsuppindex;
  boolean showf;
  
  blockLoad(CYBl);
  StartReportNoHeaderJob(USetStr(6900));

  SetRepCol(2,20);
  SetRepCol(3,130);
  SetRepCol(4,210);
  SetRepCol(5,280);
  SetRepCol(6,330);
  SetRepCol(7,360);
  SetRepCol(8,400);
  SetRepCol(9,450);
  
  StartFormat(30);
  endformat;
  
  period = GetMonth(RepSpec.sEndDate) - GetMonth(RepSpec.sStartDate) + 1;
  if (period<0) then begin
    period = period + 12;
  end;
  switch (period) begin
    case 1:tstr = GetMonth(RepSpec.sStartDate) & ". " & LowerCase(UsetStr(9641));
    case 3:tstr = ((GetMonth(RepSpec.sStartDate)/3)+1) & ". " & LowerCase(UsetStr(9137));
    case 6:tstr = ((GetMonth(RepSpec.sStartDate)/6)+1) & ". " & LowerCase(UsetStr(32030));
    otherwise
      MessageBox(17258,"");
      //goto LPLVAT2Rn;
  end;
  StartFormat(15);
   outString(120,0,USetStr(16001),false);
  endformat;
  //GetMonthText("",RepSpec.sStartDate,tstr);
  tstr = valtostring(Getyear(RepSpec.sStartDate),M4Val,"",".",1) & USetStr(16003) & tstr;

  StartFormat(15);
   OutString(180,0,USetStr(16002),false);
   OutString(290,0,tstr,false);
  endformat;
  
  StartFormat(10);
  endformat;
  StartFormat(15);
   OutString(12,0,USetStr(16004),false);
   OutString(1,0,CYBl.CompName,true);
  endformat;
  StartFormat(25);
   OutString(12,0,USetStr(16005),false);
   OutString(1,0,CYBl.VATNr,true);
  endformat;
  if (RepSpec.flags[21] == 1) then begin
    StartFormat(15);
     OutString(100,0,USetStr(16006),false);  
    endformat;
    Black_divider(0,1);
    StartFormat(15);
    OutString(5,0,USetStr(16020),true);
    //OutString(7,0,USetStr(16027),false);
    EndFormat;
    StartFormat(12);
    OutString(0,0,USetStr(16007),false);
    OutString(2,0,UsetStr(16008),false);
    OutString(3,0,USetStr(16009),false);//PVN reg nr.
    OutString(4,0,USetStr(31992),false);//PVN reg nr.
    OutString(5,0,USetStr(16010),true); 
    OutString(6,0,USetStr(16011),true);
    OutString(7,0,USetStr(31993),false);
    OutString(8,0,USetStr(16013) & "   " & USetStr(16014) ,false);
    OutString(1,0,USetStr(16015),true);
    EndFormat;
    StartFormat(5);
    EndFormat;
    Black_Divider(0,1);

    GetPLVAT2Rows(RepSpec,false,
                  asupp,arcode,apaysum,apayvat,ainvoicenr,adocname,
                  adocnr,adocnr2,atransdate,acurpaysum,acurcode,adoctype,addwincode,addsernr,size,
                  total,totvat,mintot,minvat,maxtot,maxvat,TransType,vsuppval,asuppcode);
                          
    for (i=0;i<size;i=i+1) begin
      showf = true;
      if (nonblank(asuppcode[i]) and ExcludeTrType(TransType[i])==false) then begin
        if (AbsoluteVal(apaysum[i])<AbsoluteVal(RepSpec.vals0) and nonblank(RepSpec.vals0)) then begin
          if (vsuppval[asuppcode[i]]>=AbsoluteVal(RepSpec.vals0) and nonblank(RepSpec.vals0) and RepSpec.flags[15]==0) then begin
            if (vsuppindex[asuppcode[i]]>0) then begin
              apaysum[vsuppindex[asuppcode[i]]] = apaysum[vsuppindex[asuppcode[i]]] + apaysum[i];
              apayvat[vsuppindex[asuppcode[i]]] = apayvat[vsuppindex[asuppcode[i]]] + apayvat[i];
            end else begin
              asupp[size] = asupp[i];
              adoctype[size] = "V";
              apaysum[size] = apaysum[i];
              apayvat[size] = apayvat[i];
              arcode[size] = arcode[i];
              vsuppindex[asuppcode[i]] = size;
              size = size + 1;
            end;
            showf = false;
          end else begin
            mintot = mintot + apaysum[i];
            minvat = minvat + apayvat[i];
            showf = false;
          end;
        end;
      end;
      if (showf) then begin
        cnt = cnt + 1;
        trtype = GetTransType(asupp[i],TransType[i]);
        StartFormat(15);
        OutString(0,0,cnt,false);
        OutString(2,0,asupp[i],false);
        if (adoctype[i] == "V") then begin
          OutString(3,0,arcode[i],false);
          OUtString(4,0,adoctype[i],false);  
          OUtString(5,0,apaysum[i],true);
          OutString(6,0,apayvat[i],true);
        end else begin
          OutString(3,0,arcode[i],false);
          OutString(4,0,trtype,false);
          OUtString(5,0,apaysum[i],true);
          OutString(6,0,apayvat[i],true);
          //outString(8,0,ainvoicenr[i],false);
          //OUtString(7,0,adocname[i],false);
          OUtString(7,0,adoctype[i],false);
          if (adocnr2[i] & adocnr[i]=="") then begin adocnr2[i] = "     "; end;  
          OutStringID(8,addwincode[i],adocnr2[i] & " " & adocnr[i],false,addsernr[i]);
          OutString(1,0,atransdate[i],true);
        end;
        endFormat;
      end;
    end;
    
    if (mintot!=0) then begin
      StartFormat(15);
      OutString(30,0,"",false);
      OutString(40,0,"",false);
      OutString(50,0,"",false);
      OutString(100,0,USetStr(16017),false);
      OutVal(5,0,mintot,M4Val,true);
      OutVal(6,0,minvat,M4Val,true);
      EndFormat;
    end;
    StartFormat(15);
    Gray_Divider(0,1);
    OutString(20,0,"",false);
    OutString(30,0,"",false);
    OutString(12,0,USetStr(16016),false);
    OutString(3,0,arcode[i],false);
    OutVal(5,0,total,M4val,true);
    OutVal(6,0,totvat,M4Val,true);
    endformat;
  end;

  size = size+1;
  if (RepSpec.flags[22]==1) then begin
    Customs(RepSpec,size);
  end;
  if (RepSpec.flags[23]==1) then begin
    SalesVAT(RepSpec,size);
  end;

  StartFormat(40);
  EndFormat;
  StartFormat(14);
  OutString(30,0,USetStr(9342) ,false);
  OutString(300,0,USetStr(9692),false);
  Endformat;
  Black_divider(100,200);
  Black_divider(380,470);
  StartFormat(30);
  OutString(130,0,USetStr(8844),false);
  OutString(400,0,USetStr(8844),false);
  endFormat;

LPLVAT2Rn:;
  EndJob;

  return;
end;
