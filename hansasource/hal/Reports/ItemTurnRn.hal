external function Boolean FindST2(string,string,string,string,var record STVc);
external procedure HTClasses(string,string,var string);
external procedure HTBranchIDs(string,string,var string);
external function Boolean CheckVARSubsets(record VARVc,string,string);
external function Integer FindYVars(string,string,string);
external procedure ExtractObj(string,var Integer,var string);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external function roundmode SetRoundModeD(Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external procedure HT2Per(Date, Date , var string);
external procedure HTITs(string,string,var string);
external function Boolean SetInSet2(string,string);

function LongInt GetPos(Date dat)
begin
  Integer res;
  
  res = (GetYear(dat) * 12) + GetMonth(dat);
  GetPos = res;
end;

global
procedure GetItemLocationTurnover(string artcode,record INVc INr,Boolean varf,Date startdate,Date enddate,string fromloc,string toloc,string branch,string class,Integer sumf,var val s)
begin
  record ItemHistVc ItemHistr;
  record LocationVc Locr;
  record IVVc IVr;
  row IVVc IVrw;
  Integer i,rwcnt;
  Boolean locfoundf,foundf,testf;
  val t;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  record RestAccVc RAr;
  row RestAccVc RArw;
  record TaxMatrixVc TMr;
  record INVc tmpINr;
  Boolean ivfound;
  record STVc STr;
  string 255 variety;
  
  tmpINr = INr;
  tmpINr.Code = artcode;
  variety = Right(artcode,len(artcode)-len(INr.Code));
  if (blank(fromloc) and blank(toloc)) then begin
    if (sumf==0) then begin
      if (FindST2(INr.Code,branch,class,variety,STr)) then begin
        STr.ArtCode = artcode;
        s = GetTurnover(STr,"quant",startdate,enddate);
      end;
    end else begin
      if (FindST2(INr.Code,branch,class,variety,STr)) then begin
        STr.ArtCode = artcode;
        s = GetTurnover(STr,"salesexclvat",startdate,enddate);
      end;
    end;
  end else begin
// Support register would be nice...but...
    s = 0;
    Locr.Code = fromloc;
    locfoundf = true;
    while (LoopMain(Locr,1,locfoundf)) begin
      if (nonblank(toloc)) then begin
        if (Locr.Code>toloc) then begin
          locfoundf = false;
        end;
      end;
      if (locfoundf) then begin
        foundf = true;
        ResetLoop(ItemHistr);
        ItemHistr.ArtCode = INr.Code;
        ItemHistr.Location = Locr.Code;
        ItemHistr.TransDate = startdate;
        while (LoopKey("ArtCodeLoc",ItemHistr,3,foundf)) begin
          if ((ItemHistr.ArtCode!=INr.Code) or (ItemHistr.Location!=Locr.Code) or (ItemHistr.TransDate>enddate)) then begin
            foundf = false;
          end;
          testf = foundf;
          if (ItemHistr.FileName!="IVVc") then begin
            testf = false;
          end;
          if (varf) then begin
            if (artcode!=ItemHistr.ArtCode & ItemHistr.Variety) then begin
              testf = false;
            end;
          end;
          if (nonblank(class)) then begin
            testf = false;
          end;            
          if (testf) then begin
            IVr.SerNr = ItemHistr.TransNr;
            ivfound = ReadFirstMain(IVr,1,true);
            if (nonblank(branch)) then begin
              if (IVCashr.BranchID!=branch) then begin testf = false; end;
            end;
          end;
          if (testf) then begin
            if (sumf==0) then begin
              s = s - ItemHistr.Qty;
            end else begin
              if (ivfound) then begin
                testf = true;
                rwcnt = MatRowCnt(IVr);
                if (ItemHistr.Row<0 or ItemHistr.Row>=rwcnt) then begin
                  testf = false;
                end;
                if (testf) then begin
                  MatRowGet(IVr,ItemHistr.Row,IVrw);
                  UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
                  FindSalesExVat(TMr,IVrw.VATCode,IVrw.Sum,IVr.InclVAT,IVr.NoTAXonVAT,t);
                  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                    s = s - MulRateToBase1(IVr.CurncyCode,t,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,SetRoundModeD(2));
                  end else begin
                    s = s + MulRateToBase1(IVr.CurncyCode,t,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,SetRoundModeD(2));
                  end;
                end;
              end;
            end;
          end;
        end;
        foundf = true;
        ResetLoop(IVCashr);
        IVCashr.TransDate = startdate;
        while (LoopKey("ArtCode:" & artcode,IVCashr,1,foundf)) begin
          if (IVCashr.TransDate>enddate) then begin foundf = false; end;
          testf = foundf;
          if (testf) then begin
            if (IVCashr.Location!=Locr.Code)  then begin testf = false; end;
            if (nonblank(branch)) then begin
              if (IVCashr.BranchID!=branch) then begin testf = false; end;
            end;
            if (nonblank(class)) then begin
              testf = false;
            end;            
            if (testf) then begin
              rwcnt = MatRowCnt(IVCashr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(IVCashr,i,IVCashrw);
                if (IVCashrw.ArtCode==artcode) then begin
                  if (sumf==0) then begin
                    s = s + IVCashrw.Quant;
                  end else begin
                    UnpackRowFieldMatrix(IVCashrw,"TaxMatrix",TMr);
                    FindSalesExVat(TMr,IVCashrw.VATCode,IVCashrw.Sum,IVCashr.InclVAT,IVCashr.NoTAXonVAT,t);
                    s = s + MulRateToBase1(IVCashr.CurncyCode,t,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,SetRoundModeD(2));
                  end;
                end;
              end;
            end;
          end;
        end;
        foundf = true;
        ResetLoop(RAr);
        RAr.ReportingDate = startdate;
        while (LoopKey("ArtCode:" & artcode,RAr,1,foundf)) begin
          if (RAr.ReportingDate>enddate) then begin foundf = false; end;
          testf = foundf;
          if (testf) then begin
            if (RAr.Location!=Locr.Code)  then begin testf = false; end;
            if (nonblank(branch)) then begin
              if (RAr.BranchID!=branch) then begin testf = false; end;
            end;
            if (nonblank(class)) then begin
              if (RAr.Class!=class) then begin testf = false; end;
            end;
            
            if (testf) then begin
              rwcnt = MatRowCnt(RAr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(RAr,i,RArw);
                if (RArw.ArtCode==artcode) then begin
                  if (sumf==0) then begin
                    s = s + RArw.Quant;
                  end else begin
                    UnpackRowFieldMatrix(RArw,"TaxMatrix",TMr);
                    FindSalesExVat(TMr,RArw.VATCode,RArw.Sum,1,0,t);
                    s = s + t;
                  end;
                end;
              end;
            end;
          end;
        end;

      end;
    end;
  end;
  return;
end;

procedure OneItemSpec(record RcVc RepSpec,string artcode,record INVc INr,Boolean varf,string fromloc,string toloc,string branch,string class)
BEGIN
  Date mdate,ndate;
  LongInt mocur,moend;
  val s;
  record SMVc SMr;
  row SMVc SMrw;
  Integer i,rwcnt,dinm;
  Boolean testf;
  
  RecordNew(SMr);
  mdate = AddMonth(RepSpec.sStartDate,-1);
  moend = GetPos(RepSpec.sEndDate);
  mocur = GetPos(RepSpec.sStartDate);
  while (mocur<moend) begin
    if (nonblank(artcode)) then begin
      mdate = AddMonth(mdate,1);                               
      dinm = DaysInMonth(GetYear(mdate),GetMonth(mdate));
      ndate = AddDay(mdate,dinm-GetDay(mdate));
      GetItemLocationTurnover(artcode,INr,varf,mdate,ndate,fromloc,toloc,branch,class,RepSpec.ArtMode,s);
      rwcnt = MatRowCnt(SMr);
      SMrw.DebVal = s;
      MatRowPut(SMr,rwcnt,SMrw);      
      mocur = GetPos(mdate);
    end;   
  end;
  rwcnt = MatRowCnt(SMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw); 
    if (SMrw.DebVal!=0) then begin
      testf = true;
      i = rwcnt;
    end;
  end;
  if (testf) then begin
    StartFormat(15);
    OutString(0,"DblINVc",artcode,false);
    OutString(70,0,INr.Name,false);
    dinm = 0;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(SMr,i,SMrw); 
      OutValBiDi(40+dinm*40,0,SMrw.DebVal,M4Val,true,95+dinm*40);
      dinm = dinm + 1;
    end;
    EndFormat;  
    Gray_Divider(0,1);
  end;
  RETURN;     
END;

procedure PrintItemWithOneVariety(string group,record RcVc RepSpec,record INVc INr,Boolean varf,string fromloc,string toloc,string branch,string class,string itsz,string mask,string mskrep,string subsets)
begin
  record VARVc VARr;
  Boolean found,testf;
  Integer insz;
  string 255 artcode,itemcode;
  record INVc tmpINr;

  tmpINr = INr;
  itemcode = tmpINr.Code;
  if (itsz!=".") then begin
    insz = StringToInt(itsz);
  end;
  found = true;
  VARr.VARGCode = group;
  while (LoopKey("VARGCode",VARr,1,found)) begin
    if (VARr.VARGCode!=group) then begin
      found = false;
    end;
    if (found) then begin
      if (itsz!=".") then begin
        artcode = itemcode & VARr.Code;
      end else begin
        artcode = itemcode & itsz & VARr.Code;
      end;      
      testf = true;
      if (nonblank(subsets)) then begin
        if (CheckVARSubsets(VARr,subsets,mask)==false) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        INr.Name = tmpINr.Name & ", "  & VARr.Comment;
        OneItemSpec(RepSpec,artcode,INr,varf,fromloc,toloc,branch,class);
      end;
    end;
  end;
  return;
end;
      
procedure PrintItemWithTwoVarieties(string group1,string group2,record RcVc RepSpec,record INVc INr,Boolean varf,string fromloc,string toloc,string branch,string class,string itsz,string mask,string mskrep,string subsets)
begin
  record VARVc VARr1;
  Boolean found1,testf;
  record VARVc VARr2;
  Boolean found2;
  Integer insz;
  string 255 artcode,artcode1,itemcode,itsz1,itsz2;
  record VARGVc VARGr;
  record INVc tmpINr;

  tmpINr = INr;
  itemcode = tmpINr.Code;
  found1 = true;
  VARr1.VARGCode = group1;
  while (LoopKey("VARGCode",VARr1,1,found1)) begin
    if (VARr1.VARGCode!=group1) then begin
      found1 = false;
    end;
    if (found1) then begin
      VARGr.Code = VARr1.VARGCode;
      ReadFIrstMain(VARGr,1,true);
      itsz1 = VARGr.VarSize;
      if (itsz1!=".") then begin
        insz = StringToInt(itsz1);
      end;
      if (itsz1!=".") then begin
        artcode = itemcode & VARr1.Code;
      end else begin
        artcode = itemcode & itsz1 & VARr1.Code;
      end;      
      artcode1 = artcode;
      testf = true;
      if (nonblank(subsets)) then begin
        if (CheckVARSubsets(VARr1,subsets,mask)==false) then begin
          testf = false;
        end;
      end;
      
      if (testf) then begin
        ResetLoop(VARr2);
        found2 = true;
        VARr2.VARGCode = group2;
        while (LoopKey("VARGCode",VARr2,1,found2)) begin
          if (VARr2.VARGCode!=group2) then begin
            found2 = false;
          end;
          if (found2) then begin  
            artcode = artcode1;
            VARGr.Code = VARr2.VARGCode;
            ReadFIrstMain(VARGr,1,true);
            itsz2 = VARGr.VarSize;
            if (itsz2!=".") then begin
              itsz2 = StringToInt(itsz2);
            end;
            if (itsz2!=".") then begin
              artcode = artcode & VARr2.Code;
            end else begin
              artcode = artcode & itsz2 & VARr2.Code;
            end;      
            tmpINr.Code = artcode;
            testf = true;
            if (nonblank(subsets)) then begin
              if (CheckVARSubsets(VARr2,subsets,mask)==false) then begin
                testf = false;
              end;
            end;
            if (testf) then begin
              INr.Name = tmpINr.Name & ", "  & VARr1.Comment & ", "  & VARr2.Comment;
              OneItemSpec(RepSpec,artcode,INr,varf,fromloc,toloc,branch,class);
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure PrintItemWithThreeVarieties(string group1,string group2,string group3,record RcVc RepSpec,record INVc INr,Boolean varf,string fromloc,string toloc,string branch,string class,string itsz,string mask,string mskrep,string subsets)
begin
  record VARVc VARr1;
  Boolean found1;
  record VARVc VARr2;
  Boolean found2;
  record VARVc VARr3;
  Boolean found3,testf;
  record VARGVc VARGr;
  Integer insz1,insz2,insz3;
  string 255 artcode,artcode1,artcode2,itemcode,itemname,itsz1,itsz2,itsz3;
  record INVc tmpINr;

  tmpINr = INr;
  itemcode = tmpINr.Code;
  found1 = true;
  VARr1.VARGCode = group1;
  while (LoopKey("VARGCode",VARr1,1,found1)) begin
    if (VARr1.VARGCode!=group1) then begin
      found1 = false;
    end;
    if (found1) then begin
      VARGr.Code = VARr1.VARGCode;
      ReadFIrstMain(VARGr,1,true);
      itsz1 = VARGr.VarSize;
      if (itsz1!=".") then begin
        insz1 = StringToInt(itsz1);
      end;
      if (itsz1!=".") then begin
        artcode = itemcode & VARr1.Code;
      end else begin
        artcode = itemcode & itsz1 & VARr1.Code;
      end;      
      artcode1 = artcode;
      testf = true;
      if (nonblank(subsets)) then begin
        if (CheckVARSubsets(VARr1,subsets,mask)==false) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        ResetLoop(VARr2);
        found2 = true;
        VARr2.VARGCode = group2;
        while (LoopKey("VARGCode",VARr2,1,found2)) begin
          if (VARr2.VARGCode!=group2) then begin
            found2 = false;
          end;
          if (found2) then begin  
            artcode = artcode1;
            VARGr.Code = VARr2.VARGCode;
            ReadFIrstMain(VARGr,1,true);
            itsz2 = VARGr.VarSize;
            if (itsz2!=".") then begin
              insz2 = StringToInt(itsz2);
            end;
            if (itsz2!=".") then begin
              artcode = artcode & VARr2.Code;
            end else begin
              artcode = artcode & itsz2 & VARr2.Code;
            end;      
            artcode2 = artcode;

            testf = true;
            if (nonblank(subsets)) then begin
              if (CheckVARSubsets(VARr2,subsets,mask)==false) then begin
                testf = false;
              end;
            end;
            if (testf) then begin
              ResetLoop(VARr3);
              found3 = true;
              VARr3.VARGCode = group3;
              while (LoopKey("VARGCode",VARr3,1,found3)) begin
                if (VARr3.VARGCode!=group3) then begin
                  found3 = false;
                end;
                if (found3) then begin
                  artcode = artcode2;
                  VARGr.Code = VARr3.VARGCode;
                  ReadFIrstMain(VARGr,1,true);
                  itsz2 = VARGr.VarSize;
                  if (itsz2!=".") then begin
                    insz2 = StringToInt(itsz2);
                  end;
                  if (itsz2!=".") then begin
                    artcode = artcode & VARr3.Code;
                  end else begin
                    artcode = artcode & itsz2 & VARr3.Code;
                  end;      
                  tmpINr.Code = artcode;
                  testf = true;
                  if (nonblank(subsets)) then begin
                    if (CheckVARSubsets(VARr3,subsets,mask)==false) then begin
                      testf = false;
                    end;
                  end;
                  if (testf) then begin
                    INr.Name = tmpINr.Name & ", "  & VARr1.Comment & ", "  & VARr2.Comment & ", "  & VARr3.Comment;
                    OneItemSpec(RepSpec,artcode,INr,varf,fromloc,toloc,branch,class);
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure OneVarietyItemSpec(record RcVc RepSpec,record INVc INr,Boolean varf,string fromloc,string toloc,string branch,string class,string sz,string mask,string mskrep,string subsets)
begin
  Boolean found;
  Integer nrofy,pos,i,cnt;
  Array string 20 ac;
  string 255 xpos,ypos,zpos,tstr;
  Array string 20 items;
  Array val itemqty;
  Integer isrs;
  string 255 variety;
  record INVc tmpINr;

  cnt = 0;
  pos = 0;
  for (i=0;i<20;i=i+1) begin
    ExtractObj(mask,pos,tstr);
    if (nonblank(tstr)) then begin
      ac[i] = tstr;
      cnt = cnt + 1;
    end else begin
      i = 20;
    end;
  end;
  if (cnt>0) then begin xpos = ac[0]; end;
  if (cnt>1) then begin ypos = ac[1]; end;
  if (cnt>2) then begin zpos = ac[2]; end;

  nrofy = FindYVars(ypos,subsets,mask);
  switch (cnt) begin
    case 1: PrintItemWithOneVariety(xpos,RepSpec,INr,varf,fromloc,toloc,branch,class,sz,mask,mskrep,subsets);
    case 2: PrintItemWithTwoVarieties(xpos,ypos,RepSpec,INr,varf,fromloc,toloc,branch,class,sz,mask,mskrep,subsets);
    case 3: PrintItemWithThreeVarieties(xpos,ypos,zpos,RepSpec,INr,varf,fromloc,toloc,branch,class,sz,mask,mskrep,subsets);
  end;
  return;     
end;

procedure HTItems(string frin,string toin,var string tstr)
begin
  string 255 t2;
  
  if (nonblank(frin)) then begin
    if (frin==toin) then begin
      tstr = USetStr(2463);
      tstr = tstr & ": ";
      tstr = tstr & frin;    
    end else begin
      tstr = USetStr(8661);
      tstr = tstr & ": ";
      tstr = tstr & frin;
      tstr = tstr & ":";
      tstr = tstr & toin;
    end;  
  end else begin
    tstr = USetStr(2336);
  end;  
return;
end;

procedure DoItemTurnRn(record RcVc RepSpec,string fromart,string toart,string fromloc,string toloc,string branch,string class)
begin
  record INVc INr;
  Boolean TrHs,testf;
  string 255 keystr;
  Boolean varf;
  string 60 sz,msk,mskrep;  
  string 200 varsubset;  

  Gray_Divider(0,1);
  keystr = "Code";
  INr.Code = fromart;
  if (nonblank(RepSpec.FirstAcc)) then begin
    keystr = "Group";
    INr.Group = RepSpec.FirstAcc;
  end;
  TrHs = true;  
  while (LoopKey(keystr,INr,1,TrHs)) begin
     switch (keystr) begin
       case "Group":
         if (INr.Group>RepSpec.FirstAcc) then begin
           TrHs = false;
         end;
       otherwise
         if (nonblank(toart)) then begin
           if (INr.Code>toart) then begin
             TrHs = false;
           end;
         end;    
     end;
     if (TrHs) then begin
       testf = true;
       switch (keystr) begin
         case "Group":
           if (nonblank(RepSpec.f1)) then begin
             if (INr.Code<toart) then begin testf = false; end;
             if (INr.Code>toart) then begin testf = false; end;
           end;    
         otherwise
           if (nonblank(RepSpec.FirstAcc)) then begin
             if (INr.Group<>RepSpec.FirstAcc) then begin
               testf = false;
             end;
           end;
       end;
       if (nonblank(RepSpec.f4)) then begin
         if (SetInSet2(RepSpec.f4,INr.DispGroups)==false) then begin
           testf = false;
         end;
       end;
       if (testf) then begin
          varf = false;
          if (RepSpec.flags[2]!=0) then begin
            varf = FindItemVAR(INr.Code,sz,msk,mskrep,varsubset);
          end;         
         if (varf) then begin
           OneVarietyItemSpec(RepSpec,INr,varf,fromloc,toloc,branch,class,sz,msk,mskrep,varsubset);
         end else begin
           OneItemSpec(RepSpec,INr.Code,INr,varf,fromloc,toloc,branch,class);
         end;
       end;  
     end;
  end;
  return;
end;

global
procedure ItemTurnRn(record RcVc RepSpec)
begin
  record LocationVc Locr;
  string 20 fromart,toart;
  string 20 fromloc,toloc;
  string 255 tstr;
  Date dat;
  Boolean foundf;
  Integer rw,i;
  
  fromart = FirstInRange(RepSpec.f1,20);
  toart = LastInRange(RepSpec.f1,20);
  fromloc = FirstInRange(RepSpec.f2,20);
  toloc = LastInRange(RepSpec.f2,20);
  StartReportJob(USetStr(8660));
  rw = rw + 1;  
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;  
  HTBranchIDs(RepSpec.f6,RepSpec.f6,tstr);
  Header(rw,tstr,0);
  HTItems(fromart,toart,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTClasses(RepSpec.LastAcc,RepSpec.LastAcc,tstr);
  Header(rw,tstr,0);
  HTITs(RepSpec.FirstAcc,RepSpec.FirstAcc,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;

  if (RepSpec.wholemonthf==0) then begin
    StartFormat(15);
     OutString(0,0,USetStr(1163),false);
    EndFormat;
    goto LItemTurnRn;
  end;
  dat = RepSpec.sStartDate;
  StartFormat(15);
  if (RepSpec.Media==mtFile or RepSpec.Media==mtClipBoard or RepSpec.Media==mtExcel) then begin
    OutString(0,0,"",false);
    OutString(0,0,"",false);
  end;
  for (i=1;i<=12;i=i+1) begin
    OutStringAdjustBiDi(40*i,0,USetStr(8661 + GetMonth(dat)),true,M4Val,40*i+55);
    dat = AddMonth(dat,1);
  end;
  EndFormat;
  if (RepSpec.flags[1]==1) then begin
    Locr.Code = fromloc;
    foundf = true;
    while (LoopMain(Locr,1,foundf)) begin
      if (nonblank(RepSpec.f2)) then begin
        if (Locr.Code>toloc) then begin
          foundf = false;
        end;
      end;
      if (foundf) then begin
        StartFormat(15);
        OutString(0,0,Locr.Code,false);
        OutString(80,0,Locr.Name,false);
        EndFormat;
        DoItemTurnRn(RepSpec,fromart,toart,Locr.Code,Locr.Code,RepSpec.f6,RepSpec.LastAcc);
        StartFormat(15);
        EndFormat;
      end;
    end;
  end else begin
    DoItemTurnRn(RepSpec,fromart,toart,fromloc,toloc,RepSpec.f6,RepSpec.LastAcc);
  end;
LItemTurnRn:;  
  EndJob; 
  return;
end;
