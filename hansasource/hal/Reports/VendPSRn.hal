external procedure PurgeTRExtYc(record PurgeTRVc,var string);
external procedure CustPSCustomersDetails(record RcVc,Integer,record CUVc,Boolean,Boolean);
external procedure PrintSMSes(record CUVc,Integer);
external procedure ContactCU(string);
external procedure ActCUPSList(var record RcVc,string,Integer,Integer,string,string,Integer);
external function Integer GetIntYc(Date);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function LongInt DateDiff(Date,Date);
external procedure TRExtYc(record TRVc,var string);
external procedure HTSupps(string,string,var string);
external procedure HTSuppGroup(string,var string);
external procedure HTInvFrom(Integer,Integer, Date, var string);
external procedure FindFiscalYear(Date,var Date,var Date);
external procedure SumAged(Date,Integer,Integer,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val);
external procedure APGetOnAccBalance(record RcVc,record CUVc,Boolean,var val,var val,var val,var val,var val,var val,var val,
                   Array string,Array val,var Integer,Array string,Array val,var Integer);
external procedure FindRowAddPU(Integer,record PUVc,var record PUVc,Integer,Integer,Boolean);

procedure PrintVEPO(record CUVc VEr,string poclass,Integer flags24)
BEGIN
  Boolean firstf;
  record POVc POr;
  Boolean TrHs,testf;
  Integer ponr;

  firstf = true;
  TrHs = true;
  POr.VECode = VEr.Code;
  while (LoopBackKey("VECode",POr,1,TrHs)) begin
    if (POr.VECode!=VEr.Code) then begin
      TrHs = false;
    end;
    if (ponr>=flags24) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(poclass)) then begin
        if (POr.POClass!=poclass) then begin
          testf = false;
        end;
      end;  
      if (testf) then begin
        if (firstf) then begin
          StartFormat(15);
          OutString(0,0,USetStr(2611),false);
          EndFormat;
				  Black_Divider(0,1);
          StartFormat(15);
          OutString(0,0,USetStr(2584),false);
          OutString(70,0,USetStr(2623),false);
          OutString(200,0,USetStr(2328),true);
          EndFormat;    
          Gray_Divider(0,1);
          firstf = false;
        end;
        StartFormat(15);
        ponr = ponr + 1;
        OutString(0,"DblPOVc",POr.SerNr,false);
        OutDate(70,0,POr.TransDate,false);
        OutVal(200,0,POr.Sum1,M4Val,true);
        EndFormat;        
      end;
    end;    
  end;
  if (firstf==false) then begin
    Black_Divider(0,1);
    StartFormat(15);
    EndFormat;        
  end;
  RETURN;
END;

procedure AddToPurchase(record PUVc PUp,var record PUVc PU2p,Integer unitconvcalc)
BEGIN
  row PUVc PUrw;
  Integer i,rwcnt;

  rwcnt = MatRowCnt(PUp);
  for (i = 0;i<rwcnt;i=i+1) begin
    MatRowGet(PUp,i,PUrw);
    FindRowAddPU(0,PUp,PU2p,i,unitconvcalc,false);
  end;
  RETURN;
END;

procedure PrintVeArtSTRn(record CUVc VEr,LongInt nrofmonths)
BEGIN
  Date sd,ed;
  Boolean TrHs;
  record PUVc PUr;
  record PUVc PUAcumr;
  row PUVc PUrw;
  Integer i,rwcnt;
  val q,s;
  Boolean testf,firstf;
  record MainStockBlock MainStockRec;
  
  firstf = true;
  BlockLoad(MainStockRec);
//  ed = AddMonth(CurrentDate,-1);
  ed = CurrentDate;
  ed = AddDay(ed,-GetDay(ed) + DaysInMonth(GetYear(ed),GetMonth(ed)));
  sd = AddMonth(ed,-nrofmonths);
  sd = AddDay(sd,-GetDay(sd)+1);
  TrHs = true;
  PUr.VECode = VEr.Code;
  PUAcumr.VECode = "";
  TrHs = true;
  testf = true;
  while (LoopKey("VECode",PUr,1,TrHs)) begin
    if (PUr.VECode<>VEr.Code) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      testf = true;
      if (DateInRange(PUr.TransDate,sd,ed)==false) then begin testf = false; end;
      if (PUr.OKFlag==0) then begin testf = false; end;
      if (testf) then begin
        if (PUAcumr.VECode!=PUr.VECode) then begin
          RecordNew(PUAcumr);
          PUAcumr.VECode = PUr.VECode;
          PUAcumr.VEName = PUr.VEName;
          PUAcumr.CurncyCode = PUr.CurncyCode;
          PUAcumr.ShipCost = blankval;
          PUAcumr.CustomsCost = blankval;
          PUAcumr.ExtraCost = blankval;
          PUAcumr.SumCostPrice = blankval;
          PUAcumr.SumQuant = blankval;
          PUAcumr.ToRateB1 = blankval;
        end;
        AddToPurchase(PUr,PUAcumr,MainStockRec.UnitConvCalc);
      end;
    end;
  end;
  rwcnt = MatRowCnt(PUAcumr);  
  if (rwcnt>0) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PUAcumr,i,PUrw);
      if ((PUrw.Quant!=0) or (PUrw.CostPrice!=0)) then begin
        if (firstf) then begin
				  StartFormat(15);
				  OutString(0,0,USetStr(2739),false);
				  EndFormat;
				  Black_Divider(0,1);
				  StartFormat(15);
				   OutString(0,0,USetStr(3523),false);
				   OutString(190,0,USetStr(7590),true);
				   OutString(270,0,USetStr(7591),true);
				  EndFormat;
				  Gray_Divider(0,1);
				  firstf = false;
        end;
        StartFormat(15);
         OutString(0,0,PUrw.ArtCode,false);//DblVEINStat this doesn'w work
         OutVal(190,0,PUrw.Quant,M4Qty,true);
         OutVal(270,0,PUrw.CostPrice,M4Val,true);
        EndFormat;        
      end;
    end;
  end;    
  if (firstf==false) then begin
	  Black_Divider(0,1);
	  StartFormat(15);
	  EndFormat;
	end;
  RETURN;
END;

procedure PrintVEMonthBal(record CUVc VEr)
BEGIN
  Integer i,rwcnt;
  Date sd,ed,td,td2;
  val s;
  Boolean firstf;
  
  firstf = true;
  ed = AddMonth(CurrentDate,0);//-1
  ed = AddDay(ed,-GetDay(ed) + DaysInMonth(GetYear(ed),GetMonth(ed)));
  
  sd = AddMonth(ed,-11);
  sd = AddDay(sd,-GetDay(sd)+1);
  for (td=sd;td<=ed;td=AddMonth(td,1)) begin
    td2 = AddMonth(td,1);
    td2 = AddDay(td2,-1);
    td2 = AddDay(td2,-GetDay(td2) + DaysInMonth(GetYear(td2),GetMonth(td2)));
    s = GetTurnover(VEr,"vesalesexclvat",td,td2);
    if (s!=0) then begin
      if (firstf) then begin
			  StartFormat(15);
			  OutString(0,0,USetStr(2738),false);
			  EndFormat;
			  Black_Divider(0,1);
			  StartFormat(15);
			   OutString(0,0,USetStr(2991),false);
			   OutString(100,0,USetStr(9567),false);
			   OutString(270,0,USetStr(9838),true);
			  EndFormat;
			  Gray_Divider(0,1);
			  firstf = false;
			end;
      StartFormat(15);
       OutString(0,0,USetStr(2780+GetMonth(td)),false);
       OutLongInt(100,0,GetYear(td),false);
       OutVal(270,0,s,M4Val,true);
      EndFormat;
    end;  
  end;
  if (firstf==false) then begin
	  Black_Divider(0,1);
	  StartFormat(15);
	  EndFormat;
	end;
  RETURN;
END;

procedure PrintPrepaymentAmount(record VIVc VIp,var val prepayp) 
BEGIN
  row VIVc VIrw;
  Integer i,rwcnt;
  val t;
  string 255 tstr,t2;

  rwcnt = MatRowCnt(VIp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIp,i,VIrw);
    if (VIrw.PrepayNr!=-1) then begin
      t = MulRateToBase1(VIp.CurncyCode,VIrw.PrepayAmount,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,DefaultCurRoundOff);
      prepayp = prepayp + t;
      StartFormat(15);
      tstr = USetStr(2497);
      tstr = tstr & ":";
      t2 = VIrw.PrepayNr;
      tstr = tstr & t2;
      OutStringOvst(120,0,tstr,false,VIp.Invalid);
      OutValOvst(280,0,t,M4Val,true,VIp.Invalid);
      OutStringOvst(380,0,VIp.PayDeal,false,VIp.Invalid);
      EndFormat;
    end;
  end;
  RETURN;
END;

procedure PSVEFindPaydAmount(record OPrsVc OPrsp,var val ap)
BEGIN
  record OPVc OPr;
  row OPVc OPrw;
  Integer i,rwcnt;
  
  ap = 0;
  OPr.SerNr = OPrsp.TransNr;
  if (ReadFirstMain(OPr,1,true)) then begin
    if ((OPr.OrderedFlag!=0) and (OPr.RejectedFlag==0)) then begin
      rwcnt = MatRowCnt(OPr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(OPr,i,OPrw);
        if ((OPrw.stp==1) and (OPrw.ovst==0)) then begin
          if (OPrw.VISerNr==OPrsp.VINr) then begin
            ap = ap + OPrw.PInvVal;
          end;
        end;
      end;
    end;
  end;
  RETURN;
END;

function Integer PSVEPartPayments(record VIVc VIp,var val prepayp,var val bal)
BEGIN
  record VIVc VIr;
  record OPrsVc OPrsr;
  Integer res;
  Boolean found;
  val amnt;
  string 255 tstr,t2;
  record PurgeTRVc PurgeTRr;
  record TRVc TRr;
  row TRVc TRrw;
  record CLOutVc CLoutr;
  row CLOutVc CLOutrw;
  Integer i,rwcnt;
  
  VIr.CredInv = VIp.SerNr;
  found = true;
  while (LoopKey("CredInv",VIr,1,found)) begin
    if (VIr.CredInv==VIp.SerNr) then begin
      amnt = MulRateToBase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
      bal = bal - amnt;
      StartFormat(15);
      tstr = USetStr(2433);
      tstr = tstr & ":";
      t2 = VIr.SerNr;
      tstr = tstr & t2;
      OutStringOvst(120,0,tstr,false,VIr.Invalid);
      OutDateOvst(200,0,VIr.TransDate,false,VIr.Invalid);
      OutValOvst(300,0,amnt,M4Val,true,VIr.Invalid);
      OutValOvst(360,0,bal,M4Val,true,VIr.Invalid);
      OutStringOvst(380,0,VIp.PayDeal,false,VIr.Invalid);
      EndFormat;
    end else begin
      found = false;
    end;  
  end;  
  
  OPrsr.VINr = VIp.SerNr;
  OPrsr.TransType = 1;
  found = true;
  while (LoopKey("VIKey",OPrsr,2,found)) begin
    if (found) then begin
      if (OPrsr.VINr!=VIp.SerNr) then begin found = false; end;
    end;  
    if (found) then begin
      if ((OPrsr.TransType!=1) and (OPrsr.TransType!=2)) then begin found = false; end;
    end;  
    if (found) then begin
      switch (OPrsr.TransType) begin
        case 3:
          CLOutr.SerNr = OPrsr.TransNr;
          if (ReadFirstMain(CLOutr,1,true)) then begin
            if (CLOutr.TransDate==OPrsr.TransDate)then begin
              rwcnt = MatRowCnt(CLOutr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(CLOutr,i,CLOutrw);
                if (CLOutrw.TransNr==VIp.SerNr) then begin
                  amnt = CLOutrw.Sum;
                  bal = bal - amnt;
                  StartFormat(15);
                  res = res + 1;
                  tstr = USetStr(1194) & "." & CLOutr.SerNr;
                  OutString(120,0,tstr,false);
                  OutDate(200,0,CLOutr.TransDate,false);
                  OutVal(300,0,amnt,M4Val,true);
                  OutVal(360,0,bal,M4Val,true);
                  OutString(380,0,VIp.PayDeal,false);
                  EndFormat;
                end;
            end;  
          end;
        end;      
        case kOPrsTransTypePurgeNLTransaction:
          PurgeTRr.Number = OPrsr.TransNr;
          PurgeTRr.IntYc = GetIntYc(OPrsr.TransDate);
          PurgeTRr.TransRow = OPrsr.TransRow;
          if (ReadFirstMain(PurgeTRr,3,true)) then begin
            if (PurgeTRr.TransDate==OPrsr.TransDate)then begin
              if (PurgeTRr.SerNr==VIp.SerNr) then begin
                amnt = PurgeTRr.CurDebVal - PurgeTRr.CurCredVal;
                if ((PurgeTRr.CurDebVal==0) and (PurgeTRr.CurCredVal==0)) then begin
                  amnt = PurgeTRr.DebVal - PurgeTRr.CredVal;                      
                end;
                bal = bal - amnt;
                StartFormat(15);
                res = res + 1;
                tstr = USetStr(1153);
                tstr = tstr & ":";
                PurgeTRExtYc(PurgeTRr,t2);                      
                tstr = tstr & t2;
                OutString(120,0,tstr,false);
                OutDate(200,0,OPrsr.TransDate,false);
                OutVal(300,0,amnt,M4Val,true);
                OutVal(360,0,bal,M4Val,true);
                OutString(380,0,VIp.PayDeal,false);
                EndFormat;
            end;
          end;
        end;
        case kOPrsTransTypeNLTransaction:
          TRr.Number = OPrsr.TransNr;
          TRr.IntYc = GetIntYc(OPrsr.TransDate);
          if (ReadFirstMain(TRr,2,true)) then begin
            if (TRr.TransDate==OPrsr.TransDate)then begin
              rwcnt = MatRowCnt(TRr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(TRr,i,TRrw);
                if (TRrw.ovst==0) then begin
                  if (TRrw.stp==1) then begin
                    if (TRrw.SerNr==VIp.SerNr) then begin
                      amnt = TRrw.CurDebVal - TRrw.CurCredVal;
                      if ((TRrw.CurDebVal==0) and (TRrw.CurCredVal==0)) then begin
                        amnt = TRrw.DebVal - TRrw.CredVal;                      
                      end;
                      bal = bal - amnt;
                      StartFormat(15);
                      res = res + 1;
                      tstr = USetStr(1153);
                      tstr = tstr & ":";
                      TRExtYc(TRr,t2);                      
                      tstr = tstr & t2;
                      OutString(120,0,tstr,false);
                      OutDate(200,0,OPrsr.TransDate,false);
                      OutVal(300,0,amnt,M4Val,true);
                      OutVal(360,0,bal,M4Val,true);
                      OutString(380,0,VIp.PayDeal,false);
                      EndFormat;
                  end;
                end;
              end;
            end;  
          end;
        end;
      case 1:    
        PSVEFindPaydAmount(OPrsr,amnt);
        if (amnt!=0) then begin
          amnt = MulRateToBase1(VIp.CurncyCode,amnt,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,DefaultCurRoundOff);
          bal = bal - amnt;
          StartFormat(15);
          res = res + 1;
          tstr = USetStr(1153);
          tstr = tstr & ":";
          t2 = OPrsr.TransNr;
          tstr = tstr & t2;
          OutStringOvst(120,0,tstr,false,VIr.Invalid);
          OutDateOvst(200,0,OPrsr.TransDate,false,VIr.Invalid);
          OutValOvst(300,0,amnt,M4Val,true,VIr.Invalid);
          OutVal(360,0,bal,M4Val,true);
          OutStringOvst(380,0,VIp.PayDeal,false,VIr.Invalid);
          EndFormat;
        end;
      end;
    end;
  end;
  PrintPrepaymentAmount(VIp,prepayp);
  PSVEPartPayments = res;
  return;
end;

procedure PSVEListInvoices(record RcVc RepSpec,record CUVc VEp,var LongInt frp,var val pstotduep,var val pstotopenp,Integer printopen)
begin
  record VIVc VIr;
  record APVc APr;
  record VSVc VSr;
  Boolean found,printf;
  val rs,turn;
  Boolean inAP;
  string 255 tstr;
  val totar,totdue;
  LongInt latedays;
  Integer lines;
  Date sd,ed;
  val sum,sumincur,bal;
  val sact,s0,s1,s16,s31,s4,s5,s6,s7;
  val prepay,sumdiff,sumnow,sumbooked,rval,sum2;
  Array string 10 credaccs;
  Array val credbal;
  Integer credcnt;
  val NrOfNotPaidVI;
  array val av1;
  array string 20 acur;
  Integer curcnt;

  printf = true;
  turn = 0;
  totar = 0;
  totdue = 0;
  FindFiscalYear(CurrentDate,sd,ed);    
  if (nonblankdate(sd)) then begin
    VSr.VECode = VEp.Code;
    if (ReadFirstMain(VSr,1,true)) then begin
      turn = GetTurnover(VEp,"vesalesexclvat",RepSpec.sStartDate,RepSpec.sEndDate);      
    end;
  end;
  
  StartFormat(15);
  OutString(0,0,USetStr(4016),false);
  EndFormat;
  Black_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(2706),false);
  OutString(60,0,USetStr(2707),false);
  OutString(200,0,USetStr(2708),false);
  OutString(300,0,USetStr(2709),true);  
  OutString(360,0,USetStr(3149),true);  
  OutString(380,0,USetStr(2710),false);
  OutString(435,0,USetStr(2711),true);
  OutString(480,0,USetStr(2712),true);
  EndFormat;

  Gray_Divider(0,1);
  VIr.SerNr = frp;
  VIr.VECode = VEp.Code;
  found = true;
  while (LoopBackKey("VECode",VIr,2,found)) begin
    if (found) then begin
      if (VIr.VECode!=VEp.Code) then begin found = false; end;
    end;  
    if (found) then begin
      APr.SerNr = VIr.SerNr;
      inAP = ReadFirstMain(APr,1,true);
      if (inAP) then begin
        if (RepSpec.flags[11]!=0) then begin
          rs = MulRateToBase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
          if (VIr.InvType==kInvoiceTypeCredit) then begin
            rs = -rs;
          end;
          bal = rs;
          StartFormat(15);
          OutLongIntOvst(0,"DblVePerVI",VIr.SerNr,false,VIr.Invalid);
          OutDateOvst(60,0,VIr.InvDate,false,VIr.Invalid);
          OutStringOvst(200,0,"...........",false,VIr.Invalid);
          OutValOvst(300,0,rs,M4Val,true,VIr.Invalid);
          OutValOvst(360,0,bal,M4Val,true,VIr.Invalid);
          OutStringOvst(380,0,VIr.PayDeal,false,VIr.Invalid);
          totar = totar + rs;
          latedays = DateDiff(APr.DueDate,CurrentDate);
          if (latedays<0) then begin
            totdue = totdue + rs;
            OutLongIntOvst(480,0,latedays,true,VIr.Invalid);
          end;
          EndFormat;
          lines = PSVEPartPayments(VIr,prepay,bal);
          if (latedays<0) then begin
            SumAged(CurrentDate,latedays,0,rs,sact,s0,s1,s16,s31,s4,s5,s6,s7);        
          end;
        end;
      end else begin
        if (NrOfNotPaidVI<RepSpec.vals0) then begin
          rs = MulRateToBase1(VIr.CurncyCode,APr.RVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
          if (VIr.InvType==kInvoiceTypeCredit) then begin
            rs = -rs;
          end;
          StartFormat(15);
          OutLongIntOvst(0,"DblVePerVI",VIr.SerNr,false,VIr.Invalid);
          OutDateOvst(60,0,VIr.InvDate,false,VIr.Invalid);
          OutStringOvst(200,0,"...........",false,VIr.Invalid);
          OutValOvst(300,0,rs,M4Val,true,VIr.Invalid);
          OutStringOvst(380,0,VIr.PayDeal,false,VIr.Invalid);
          totar = totar + rs;
          latedays = DateDiff(APr.DueDate,CurrentDate);
          if (latedays<0) then begin
            totdue = totdue + rs;
            OutLongIntOvst(480,0,latedays,true,VIr.Invalid);
          end;
          EndFormat;
          lines = PSVEPartPayments(VIr,prepay,bal);
          NrOfNotPaidVI = NrOfNotPaidVI + 1;
        end;
      end;
    end;
  end;
  s31 = s31 + s4 + s5 + s6 + s7;
/*  done in above loop
  APr.VECode = VEp.Code;
  found = true;
  while (LoopKey("VECode",APr,1,found)) begin
    if (APr.VECode!=VEp.Code) then begin
      found = false;
    end;
    if (found) then begin
      VIr.SerNr = APr.SerNr;
      if (ReadFirstMain(VIr,1,true)) then begin
        if (printf) then begin
          lines = PSVEPartPayments(VIr,prepay);
        end;
        rs = MulRateToBase1(VIr.CurncyCode,APr.RVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
        totar = totar + rs;
        latedays = DateDiff(APr.DueDate,CurrentDate);
        if (latedays<0) then begin
          totdue = totdue + rs;
        end;  
        SumAged(CurrentDate,latedays,0,rs,sact,s0,s1,s16,s31,s4,s5,s6,s7);
        s31 = s31 + s4 + s5 + s6 + s7;
        if (printf) then begin
          StartFormat(15);
          OutLongIntOvst(0,"DblVePerVI",VIr.SerNr,false,VIr.Invalid);
          OutDateOvst(60,0,VIr.InvDate,false,VIr.Invalid);
          OutStringOvst(200,0,"...........",false,VIr.Invalid);
          OutValOvst(300,0,rs,M4Val,true,VIr.Invalid);
          OutStringOvst(380,0,VIr.PayDeal,false,VIr.Invalid);
          totar = totar + rs;
          latedays = DateDiff(APr.DueDate,CurrentDate);
          if (latedays<0) then begin
            totdue = totdue + rs;
            OutLongIntOvst(480,0,latedays,true,VIr.Invalid);
          end;
          EndFormat;
        end;
      end;
    end;
  end;
*/  
  APGetOnAccBalance(RepSpec,VEp,false,sum,sum2,rval,sumbooked,sumnow,sumincur,sumdiff,credaccs,credbal,credcnt,acur,av1,curcnt);  
  if (sum!=0) then begin
    if (nonblank(VEp.VECurncyCode)) then begin
      totar = totar + rval;
      StartFormat(15);
      OutString(180,0,USetStr(2497),false);
      OutVal(300,0,rval,M4Val,true);
      EndFormat;
    end else begin
      totar = totar + sum;
      StartFormat(15);
      OutString(180,0,USetStr(2497),false);
      OutVal(300,0,sum,M4Val,true);
      EndFormat;
    end;
  end;
  StartFormat(10);
  EndFormat;
  Black_Divider(270,480);
  begin  
      LongInt p1,p2;
      record AgedBlock AgedRec;
      string 255 tstr1,tstr2,tstr3;
      
      BlockLoad(AgedRec);
      p1 = AgedRec.Per1;
      p2 = AgedRec.Per2;
      if (p1==-1) then begin p1 = 15; end;
      if (p2==-1) then begin p2 = 30; end;
      tstr1 = "0 - ";
      tstr2 = p1;
      tstr1 = tstr1 & tstr2;
      p1 = p1 + 1;
      tstr2 = p1;
      tstr2 = tstr2 & " - ";
      tstr3 = p2;
      tstr2 = tstr2 & tstr3;
      p2 = p2 + 1;
      tstr3 = p2;
      tstr3 = tstr3 & " - ";
      StartFormat(15);
      OutString(270,0,tstr1,false);
      OutVal(470,0,s1,M4Val,true);
      EndFormat;
      StartFormat(15);
      OutString(270,0,tstr2,false);
      OutVal(470,0,s16,M4Val,true);
      EndFormat;
      StartFormat(15);
      OutString(270,0,tstr3,false);
      OutVal(470,0,s31,M4Val,true);
      EndFormat;
  end;
  StartFormat(15);
  OutString(270,0,USetStr(2713),false);
  OutVal(470,0,totar,M4Val,true);
  EndFormat;
  StartFormat(15);
  OutString(270,0,USetStr(4017),false);
  OutVal(470,0,totdue,M4Val,true);
  EndFormat;
  Black_Divider(0,1);
  StartFormat(10);
  EndFormat;
  pstotduep = pstotduep + totdue;
  pstotopenp = pstotopenp + totar;
LPSVEListInvoices:;
  RETURN;
END;

procedure PrintPUs(record CUVc VEr)
BEGIN
  record PUVc PUr;
  string 255 tstr,t2;
  Boolean firstf,found;

  firstf = true;
  found = true;
  PUr.SerNr = -1;
  PUr.VECode = VEr.Code;
  while (LoopKey("VECode",PUr,3,found)) begin
    if (PUr.VECode!=VEr.Code) then begin found = false; end;
    if (found) then begin
        if (firstf) then begin
          StartFormat(15);
          OutString(0,0,USetStr(2609),false);
          EndFormat;
          Gray_Divider(0,100);
          StartFormat(15);
          OutString(0,0,USetStr(2602),false);
          OutString(60,0,USetStr(2603),false);
          OutString(160,0,USetStr(2604),false);
          OutString(200,0,USetStr(2607),false);
          OutString(280,0,USetStr(2620),true);
          OutString(400,0,USetStr(2614),true);
          OutString(480,0,USetStr(2615),true);
          EndFormat;
          firstf = false;
        end;
        t2 = PUr.SerNr;
        tstr = USetStr(1157);
        tstr = tstr & ".";
        tstr = tstr & t2;
        StartFormat(15);
        OutStringID(0,"DblPU",tstr,false,PUr.SerNr);
        OutDate(60,0,PUr.TransDate,false);
        OutLongInt(160,0,PUr.PONr,false);
        OutString(200,0,PUr.Comment,false);
        OutVal(320,0,PUr.SumQuant,M4UVal,true);
        OutVal(400,0,PUr.ShipCost,M4UVal,true);
        OutVal(480,0,PUr.CustomsCost,M4UVal,true);
        EndFormat;
      end;
    end;
  RETURN;
END;
  
procedure PSPrintVend(record RcVc RepSpec,record CUVc VEp,var val pstotduep,var val pstotopenp,Integer nrofinv,Integer printopen)
begin
  record APVc APr;
  record VIVc VIr;
  record OPrsVc OPrsr;
  Boolean found;
  Integer count;
  LongInt InvFrom;
  Boolean testf ;
  LongInt latedays;

  if (RepSpec.flags[12]!=0) then begin
    if (RepSpec.ArtMode==0) then begin// Including last nrofinv payd invoices 
      VIr.SerNr = 1000000000;
      APr.VECode = VEp.Code;
      if (ReadFirstKey("VECode",APr,1,true)) then begin
        VIr.SerNr = APr.SerNr;
      end;    
      VIr.VECode = VEp.Code;
      found = true;
      found = LoopBackKey("VECode",VIr,2,found);


      while ((count<nrofinv) and (found)) begin
        if (found) then begin
          if (VIr.VECode!=VEp.Code) then begin found = false; end;
        end;  
        if (found) then begin
          APr.SerNr = VIr.SerNr;
          if (ReadFirstMain(APr,1,true)==false) then begin
            count = count + 1;
            InvFrom = VIr.SerNr;
          end;
        end;
        found = LoopBackKey("VECode",VIr,2,found);      
      end;
      if (count<nrofinv) then begin
        InvFrom = -1;
      end;

      if (InvFrom==-1) then begin
//        APr.VECode = VEp.Code;
//        if (ReadLastKey("VECode",APr,1,true)) then begin
//          InvFrom = APr.SerNr;
//        end;  
        VIr.VECode = VEp.Code;
        if (ReadLastKey("VECode",VIr,1,true)) then begin
          InvFrom = VIr.SerNr;
        end;  
      end;
    end;

    if (RepSpec.ArtMode==1) then begin// all invoices from a certain date   
        OPrsr.VECode = VEp.Code;
        OPrsr.TransDate = RepSpec.d1;
        OPrsr.TransType = 0; // invoice 
        found = true;
        while (LoopMain(OPrsr,3,found)) begin
          if (OPrsr.VECode!=VEp.Code) then begin found = false; end;
          if (found and OPrsr.TransType==0) then begin
            if (OPrsr.TransNr>InvFrom) then begin
              InvFrom = OPrsr.TransNr;
            end;
            found = false;
          end;
        end;
    end;
// InvFrom now contains the first invoice that we run from 
    if (RepSpec.UsedOnly==0) then begin
      PSVEListInvoices(RepSpec,VEp,InvFrom,pstotduep,pstotopenp,printopen);
    end;
    if (RepSpec.UsedOnly==1) then begin
      APr.VECode = VEp.Code;
      if (ReadFirstKey("VECode",APr,1,true)) then begin
        testf = true;
      end;  
      if (testf) then begin
        PSVEListInvoices(RepSpec,VEp,InvFrom,pstotduep,pstotopenp,printopen);
      end;
    end;
    if (RepSpec.UsedOnly==2) then begin
      APr.VECode = VEp.Code;
      testf = false;
      found = true;
      while (LoopKey("VECode",APr,1,found)) begin
        if (found) then begin
          if (VEp.Code!=APr.VECode) then begin found = false; end;
        end;  
        if (found) then begin
          latedays = DateDiff(APr.DueDate,CurrentDate);
          if (latedays<0) then begin
            testf = true;
            found = false;
          end;
        end;
      end;
      if (testf) then begin
        PSVEListInvoices(RepSpec,VEp,InvFrom,pstotduep,pstotopenp,printopen);
      end;
    end;
  end;
  if (RepSpec.flags[13]!=0) then begin
    PrintPUs(VEp);
  end;  
  if (RepSpec.flags[18]==1) then begin
    ActCUPSList(RepSpec,VEp.Code,RepSpec.vals2,RepSpec.flags[17],RepSpec.f6,"",0);
  end;
  RETURN;
END;

global
procedure VendPSRn(record RcVc RepSpec)
BEGIN
  record CUVc VEr;
  string 20 frve,tove;
  Boolean TrHs,testf;
  val PStotdue;
  val PStotopen;
  string 255 tstr;
  Integer rw;
  record VEPSVc VEPSr;
  
  VEPSr.Signature = RepSpec.f6;
  if (ReadFirstMain(VEPSr,1,true)) then begin
    RepSpec.ArtMode = 0;
    RepSpec.vals0 = VEPSr.NrOfVI;
    RepSpec.flags[11] = VEPSr.NotOKVI;
    RepSpec.flags[12] = VEPSr.Invoices;
    if (VEPSr.Invoices==0) then begin
      RepSpec.vals0 = 0;
      RepSpec.flags[11] = 0;
    end;
    RepSpec.flags[13] = VEPSr.ShowPU;
    RepSpec.flags[14] = VEPSr.MonthBal;
    RepSpec.flags[15] = VEPSr.VEItem;      
    RepSpec.long1 = VEPSr.VEItemMonthNr;
    RepSpec.flags[23] = VEPSr.Orders;
    RepSpec.vals1 = VEPSr.NrOfPO;
    RepSpec.LastAcc = VEPSr.POClass;

    if (blank(VEPSr.NrOfAct)) then begin
      RepSpec.vals2 = -1;
    end else begin
      RepSpec.vals2 = VEPSr.NrOfAct;
    end;
    RepSpec.flags[17] = VEPSr.NotOKAct;
    RepSpec.flags[18] = VEPSr.Activities;
   
    RepSpec.flags[19] = VEPSr.SMSes;
    RepSpec.vals3 = VEPSr.NrOfSMS;
  end else begin
    if (RepSpec.flags[10]==0) then begin
      RepSpec.flags[10] = 5;
    end;
    RepSpec.flags[11] = 1;
  end;
  // ArtMode==1, All invoices 
  // ArtMode==0, Last 5 invoices 
  frve = FirstInRange(RepSpec.f1,20);
  tove = LastInRange(RepSpec.f1,20);  
  StartReportJob(USetStr(4015));    
    rw = 1;
    HTSupps(frve,tove,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
    if (RepSpec.UsedOnly==1) then begin
      tstr = USetStr(6651);
      Header(rw,tstr,0);
    end;
    HTSuppGroup(RepSpec.f3,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;  
    HTInvFrom(RepSpec.vals0,RepSpec.ArtMode,RepSpec.d1,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  EndHeader;
  StartFormat(15);
  OutString(15,0,USetStr(2701),false);
  OutString(100,0,USetStr(2702),false);
  OutString(290,0,USetStr(2703),false);
  EndFormat;
  Gray_Divider(0,1);
  VEr.Code = frve;
  TrHs = true;
  while (LoopMain(VEr,1,TrHs)) begin
    testf = true;
    if (nonblank(tove)) then begin
      if (VEr.Code>tove) then begin
        TrHs = false;
      end;
    end;    
    if (nonblank(RepSpec.f3)) then begin
      if (RepSpec.f3!=VEr.VECat) then begin
        testf = false;
      end;
    end;    
    if (VEr.VEType==0) then begin testf = false; end;
    if (TrHs and testf) then begin
      CustPSCustomersDetails(RepSpec,0,VEr,false,true);
      PSPrintVend(RepSpec,VEr,PStotdue,PStotopen,RepSpec.flags[10],RepSpec.flags[11]);
      if (RepSpec.flags[14]!=0) then begin
        PrintVEMonthBal(VEr);
      end;
      if (RepSpec.flags[15]!=0) then begin
        PrintVeArtSTRn(VEr,RepSpec.long1);
      end;
      if (RepSpec.flags[23]==1) then begin
        PrintVEPO(VEr,RepSpec.LastAcc,RepSpec.vals1);
      end;
      if (RepSpec.flags[19]==1) then begin
        PrintSMSes(VEr,RepSpec.vals3);
      end;
        
      if (RepSpec.flags[1]==1) then begin
        if (RepSpec.Media==1) then begin
          NewPage(false);
        end;
      end;    
    end;
  end;
  EndJob;
  return;
end;

global
procedure VEPSRn(record RcVc RepSpec)
begin
  record CUVc VEr;
  string 20 frve,tove;
  Boolean TrHs,testf;
  val PStotdue;
  val PStotopen;
  string 255 tstr;
  Integer rw;
  
  
  // ArtMode==1, All invoices 
  // ArtMode==0, Last 5 invoices 
  RepSpec.flags[10] = 5;
  RepSpec.flags[11] = 1;
  frve = FirstInRange(RepSpec.f1,20);
  tove = LastInRange(RepSpec.f1,20);  
  StartReportJob(USetStr(4015));    
    rw = 1;
    HTSupps(frve,tove,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
    if (RepSpec.UsedOnly==1) then begin
      tstr = USetStr(6651);
      Header(rw,tstr,0);
    end;
    HTSuppGroup(RepSpec.f3,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;  
    HTInvFrom(RepSpec.flags[10],RepSpec.ArtMode,RepSpec.d1,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  EndHeader;
  RepSpec.flags[12] = 1;
  VEr.Code = frve;
  TrHs = true;
  while (LoopMain(VEr,1,TrHs)) begin
    testf = true;
    if (nonblank(tove)) then begin
      if (VEr.Code>tove) then begin
        TrHs = false;
      end;
    end;    
    if (nonblank(RepSpec.f3)) then begin
      if (RepSpec.f3!=VEr.VECat) then begin
        testf = false;
      end;
    end;    
    if (VEr.VEType==0) then begin testf = false; end;
    if (TrHs and testf) then begin
      CustPSCustomersDetails(RepSpec,0,VEr,false,true);
      PSPrintVend(RepSpec,VEr,PStotdue,PStotopen,RepSpec.flags[10],RepSpec.flags[11]);        
    end;
  end;

  EndJob;
  RETURN;
END;
