external procedure HT2Per(Date, Date , var string);


procedure PrintMailStatus(record RcVc RepSpec,LongInt mailnr)
begin
  record UserVc Userr;
  record ConfVc Mailboxr;
  Boolean found,testf;
  Boolean foundmr;
  Integer accode;
  string 255 index,tstr;
  record MailReadVc MRr;
  Date td;

  found = true;
  while (LoopKey("ActCode",Userr,1,found)) begin
    if (found) then begin
      testf = true;      
      if (nonblank(RepSpec.f3) and RepSpec.f3!=Userr.Code) then begin
        testf = false;
      end;
      if (testf) then begin
        Mailboxr.AddrCode = Userr.Code;
        if (ReadFirstKey("AddrCode",Mailboxr,1,true)) then begin
          td = "";
          accode = kMailStatusCreated;
          ResetLoop(MRr);
          foundmr = true;
          MRr.mailSerNr = mailnr;
          MRr.mailBoxNr = Mailboxr.SerNr;
          while (LoopKey("mailNrmailBoxNr",MRr,2,foundmr)) begin
            if (MRr.mailSerNr!=mailnr) then begin foundmr = false; end;
            if (MRr.mailBoxNr!=Mailboxr.SerNr) then begin foundmr = false; end;
            if (foundmr) then begin
              if (MRr.accode>=kMailStatusPostponed) then begin
                accode = MRr.accode;
                td = MRr.fDate;
              end else begin
                if (MRr.accode==kMailStatusRead) then begin
                  accode = MRr.accode;
                  td = MRr.fDate;
                end;
              end;
            end;
          end;
          if (RepSpec.flags[1]!=0) then begin
            switch (RepSpec.flags[1]) begin 
              case 1:
                if (accode!=kMailStatusRejected) then begin
                  testf = false;
                end;
              case 2:
                if (accode!=kMailStatusAccepted) then begin
                  testf = false;
                end;
            end;
          end;
          if (testf) then begin
            StartFormat(15);
            OutString(15,0,Mailboxr.AddrName,false);
            switch (accode) begin
              case kMailStatusRead:   tstr = USetStr(8145);
              case kMailStatusAccepted:   tstr = USetStr(38541);
              case kMailStatusRejected:   tstr = USetStr(38542);
              case kMailStatusPostponed:  tstr = USetStr(38540);
              otherwise tstr = USetStr(8139);
            end;
            OutString(150,0,tstr,false);
            OutDate(210,0,td,false);
            EndFormat;
          end;
        end;
      end;
    end;
  end;
  return;
end;
        
procedure PrintMailsStatus(record RcVc RepSpec,record ConfVc Confr)
begin
  record MailVc Mailr;
  Boolean found,testf;
  string 255 index,tstr;
  
  found = true;
  index = "UserTime:" & Confr.SerNr;
  Mailr.TransDate = RepSpec.sStartDate;
  while (LoopKey(index,Mailr,1,found)) begin
    if (DateInRange(Mailr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (testf) then begin
        tstr = Mailr.Header;
        if (blank(tstr)) then begin tstr = USetStr(11710); end;
        StartFormat(15);
        OutStringID(0,"DblMailVc",tstr,false,Mailr.SerNr);
        EndFormat;
        StartFormat(15);
        OutString(15,0,USetStr(40103),false);
        OutString(150,0,USetStr(40104),false);
        OutString(210,0,USetStr(40105),false);
        EndFormat;
        Gray_Divider(0,250);
        PrintMailStatus(RepSpec,Mailr.SerNr);
        Gray_Divider(0,250);
        StartFormat(5);
        EndFormat;
      end;
    end;
  end;
  return;
end;


procedure PrintUserMailStatus(record RcVc RepSpec,LongInt mailboxnr,record MailVc Mailr)
begin
  Boolean foundmr,testf;
  Integer accode;
  string 255 index,tstr;
  record MailReadVc MRr;
  Date td;

  td = "";
  accode = kMailStatusCreated;
  foundmr = true;
  MRr.mailSerNr = Mailr.SerNr;
  MRr.mailBoxNr = mailboxnr;
  while (LoopKey("mailNrmailBoxNr",MRr,2,foundmr)) begin
    if (MRr.mailSerNr!=Mailr.SerNr) then begin foundmr = false; end;
    if (MRr.mailBoxNr!=mailboxnr) then begin foundmr = false; end;
    if (foundmr) then begin
      if (MRr.accode>=kMailStatusPostponed) then begin
        accode = MRr.accode;
        td = MRr.fDate;
      end else begin
        if (MRr.accode==kMailStatusRead) then begin
          accode = MRr.accode;
          td = MRr.fDate;
        end;
      end;
    end;
  end;
  testf = true;
  if (RepSpec.flags[1]!=0) then begin
    switch (RepSpec.flags[1]) begin 
      case 1:
        if (accode!=kMailStatusRejected) then begin
          testf = false;
        end;
      case 2:
        if (accode!=kMailStatusAccepted) then begin
          testf = false;
        end;
    end;
  end;
  if (testf) then begin
    StartFormat(15);
    tstr = Mailr.Header;
    if (blank(tstr)) then begin tstr = USetStr(11710); end;
    StartFormat(15);
    OutStringID(15,"DblMailVc",tstr,false,Mailr.SerNr);
    switch (accode) begin
      case kMailStatusRead:   tstr = USetStr(8145);
      case kMailStatusAccepted:   tstr = USetStr(38541);
      case kMailStatusRejected:   tstr = USetStr(38542);
      case kMailStatusPostponed:  tstr = USetStr(38540);
      otherwise tstr = USetStr(8139);
    end;
    OutString(350,0,tstr,false);
    OutDate(400,0,td,false);
    EndFormat;
  end;

  return;
end;

procedure PrintUserMailsStatus(record RcVc RepSpec,record ConfVc Confr,LongInt mailboxnr)
begin
  record MailVc Mailr;
  Boolean found,testf;
  string 255 index,tstr;
  
  found = true;
  index = "UserTime:" & Confr.SerNr;
  Mailr.TransDate = RepSpec.sStartDate;
  while (LoopKey(index,Mailr,1,found)) begin
    if (DateInRange(Mailr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (testf) then begin
        PrintUserMailStatus(RepSpec,mailboxnr,Mailr);
      end;
    end;
  end;
  return;
end;

procedure PrintUsersMailsStatus(record RcVc RepSpec,record ConfVc Confr)
begin
  record UserVc Userr;
  record ConfVc Mailboxr;
  Boolean found,testf;

  found = true;
  while (LoopKey("ActCode",Userr,1,found)) begin
    if (found) then begin
      testf = true;      
      if (nonblank(RepSpec.f3) and RepSpec.f3!=Userr.Code) then begin
        testf = false;
      end;
      if (testf) then begin
        Mailboxr.AddrCode = Userr.Code;
        if (ReadFirstKey("AddrCode",Mailboxr,1,true)) then begin
          StartFormat(15);
          OutString(0,0,Userr.Code,false);
          OutString(60,0,Userr.Name,false);
          EndFormat;
          StartFormat(15);
          OutString(15,0,"Mail",false);
          OutString(350,0,USetStr(40104),false);
          OutString(400,0,USetStr(40105),false);
          EndFormat;
          Gray_Divider(0,440);
          PrintUserMailsStatus(RepSpec,Confr,Mailboxr.SerNr);
          Gray_Divider(0,440);
          StartFormat(5);
          EndFormat;
        end;
      end;
    end;
  end;
  return;
end;

global
procedure MailAcptncStatRn(record RcVc RepSpec)
begin
  string 255 tstr;
  Integer rw;
  record ConfVc Confr;
  
  StartReportJob(USetStr(40100));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  if (nonblank(RepSpec.f1)) then begin
    tstr = USetStr(40101) & ": " & RepSpec.f1;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  EndHeader;
  if (blank(RepSpec.f1)) then begin
    StartFormat(15);
     OutString(0,0,USetStr(40102),false);
    EndFormat;
    goto LAcptedMailRn;
  end;
  Confr.AddrName = RepSpec.f1;
  if (ReadFirstKey("AddrName",Confr,1,true)==false) then begin
    StartFormat(15);
     OutString(0,0,USetStr(40102),false);
    EndFormat;
    goto LAcptedMailRn;
  end;
  
  switch (RepSpec.flags[0]) begin
    case 0:
      PrintMailsStatus(RepSpec,Confr);
    case 1:
      PrintUsersMailsStatus(RepSpec,Confr);
  end;
LAcptedMailRn:;  
  EndJob;
  return;
end;