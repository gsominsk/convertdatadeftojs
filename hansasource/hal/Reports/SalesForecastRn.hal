external procedure HTArtGroup(string, var string);
external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean ItemInItemGroupOrClass(string,string,string);
external procedure HTItems(string,var string);
external procedure BuildTheItemArray(array record SMVc,Integer,var array string,var array Integer,var Integer);
external procedure BuildTheForecastArray(var array record SMVc,var Integer,Date,Date,string,Boolean,record RcVc);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure NegateArray(var array record SMVc,Integer,record RcVc);
external procedure HT2Per(Date,Date,var string);
external function val FindItemForecast(record SMVc,string,Boolean,Integer);

global
procedure SalesForecastRn(record RcVc RepSpec)
BEGIN
  record INVc INr;
  record ITVc ITr;
  record SMVc SMr;
  array record SMVc aSMr;
  row SMVc SMrw;
  string 20 frin,toin;
  string 255 tstr;
  Integer rw;
  Date sd,ed;
  Integer ai,asmcnt;
  Integer i,rwcnt;
  Boolean foundf,testf;
  val q,s,tq,ts;
  array string 20 aitems;
  array Integer atype;
  Integer acnt;
  Date actualenddate;
  record SFPeriodsBlock SFPb; 
      
  StartReportJob(USetStr(16328));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (nonblank(RepSpec.LastAcc)) then begin
    Header(rw,USetStr(18201) & " " & RepSpec.LastAcc,0)
  end else begin
    Header(rw,USetStr(18204),0)
  end;
  HTItems(RepSpec.f1,tstr);
  Header(rw,tstr,1); 
  rw = rw + 1;
  if (HasItemGroups) then begin
    HTArtGroup(RepSpec.f3,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasItemClassification) then begin
    HTItemClass(RepSpec.f2,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  EndHeader;
  frin = FirstInRange(RepSpec.f1,20);
  toin = LastInRange(RepSpec.f1,20);
  SetRepCol(2,55);
  
  BlockLoad(SFPb);
  asmcnt = 0;
  actualenddate = RepSpec.sEndDate;
  BuildTheForecastArray(aSMr,asmcnt,RepSpec.sStartDate,actualenddate,RepSpec.LastAcc,true,RepSpec);
  BuildTheItemArray(aSMr,asmcnt,aitems,atype,acnt);
  NegateArray(aSMr,asmcnt,RepSpec);
  StartFormat(15);
  OutString(0,0,USetStr(16321),false);
  OutString(2,0,USetStr(16322),false);
  switch (SFPb.PeriodType) begin
    case kForecastPeriodTypeMonths:
      for (i=1;i<asmcnt;i=i+1) begin
        SMr = aSMr[i];
        OutString(((i-1)*(370/asmcnt)) + 170,0,DateToString(SMr.TransDate,"MM/YY"),true);
      end;
    case kForecastPeriodTypeWeeks:
      for (i=1;i<asmcnt;i=i+1) begin
        SMr = aSMr[i];
        OutString(((i-1)*(370/asmcnt)) + 170,0,DateToString(SMr.TransDate,"DD/MM/YY"),true);
      end;
  end;
  EndFormat;
  Gray_Divider(0,1);
  foundf = true;

  for (i=0;i<acnt;i=i+1) begin
    testf = true;
    if (nonblank(toin)) then begin
      if ((aitems[i]<frin) or (aitems[i]>toin)) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      testf = ItemInItemGroupOrClass(aitems[i],RepSpec.f3,RepSpec.f2);
    end;
    if (testf) then begin
      if (atype[i]==0) then begin
        ITr.Code = aitems[i];
        if (ReadFirstMain(ITr,1,true)) then begin
          StartFormat(15);
          OutString(0,0,ITr.Code,false);
          OutString(2,0,ITr.Comment,false);
          for (ai=1;ai<asmcnt;ai=ai+1) begin
            SMr = aSMr[ai];
            if (RepSpec.flags[1]==0) then begin
              OutVal(((ai-1)*(370/asmcnt)) + 170,0,FindItemForecast(SMr,ITr.Code,true,0),M4UVal,true);
            end else begin
              OutVal(((ai-1)*(370/asmcnt)) + 170,0,FindItemForecast(SMr,ITr.Code,false,0),M4Val,true);
            end;
          end;
          EndFormat;
        end;
      end else begin
        if (ReadFirstItem(aitems[i],INr,true,true)) then begin
          StartFormat(15);
          OutString(0,0,INr.Code,false);
          OutString(2,0,INr.Name,false);
          for (ai=1;ai<asmcnt;ai=ai+1) begin
            SMr = aSMr[ai];
            if (RepSpec.flags[1]==0) then begin
              OutVal(((ai-1)*(370/asmcnt)) + 170,0,FindItemForecast(SMr,INr.Code,true,1),M4UVal,true);
            end else begin
              OutVal(((ai-1)*(370/asmcnt)) + 170,0,FindItemForecast(SMr,INr.Code,false,1),M4Val,true);
            end;
          end;
          EndFormat;
        end;
      end;
    end;
  end;
  Gray_Divider(0,1);
  EndJob;
  RETURN;
END;

