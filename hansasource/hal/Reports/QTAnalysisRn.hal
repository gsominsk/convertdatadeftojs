external function roundmode SetRoundModeD(Integer);
external procedure HTProjects(string,string,var string);
external procedure QTVc_PasteQuant(var record QTVc,Integer,Boolean,var Boolean);
external function Boolean QTVc_PasteArtCode(var record QTVc,Integer,var string,var string);
external procedure HT2Per(Date, Date , var string);
external procedure HTCusts(string, string, var string);

procedure AddQTToQT(record QTVc QTr,var record QTVc collQTr)
begin
  row QTVc QTrw;
  row QTVc collQTrw;
  Integer rwcnt,i;
  Integer collrwcnt,colli;
  Boolean foundf;
  
  rwcnt = MatRowCnt(QTr);
  if (MatRowCnt(collQTr)==0) then begin
    RecordCopy(collQTr,QTr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowDelete(collQTr,0);
    end;
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(QTr,i,QTrw);
    if (nonblank(QTrw.ArtCode) and QTrw.Quant>0) then begin
      collrwcnt = MatRowCnt(collQTr);
      foundf = false;
      for (colli=0;colli<collrwcnt;colli=colli+1) begin
        MatRowGet(collQTr,colli,collQTrw);
        if (collQTrw.ArtCode==QTrw.ArtCode) then begin
          collQTrw.Quant = collQTrw.Quant + QTrw.Quant;
          MatRowPut(collQTr,colli,QTrw);
          foundf = true;
          colli = collrwcnt;
        end;
      end;
      if (foundf==false) then begin
        MatRowPut(collQTr,collrwcnt,QTrw);
      end;
    end;
  end;
  return;
end;

procedure AnalyseAndPrintQT(string cucode,string cuname,string dblclck,record QTVc collQTr,LongInt nrofqts,array LongInt aqtser,
                            var val reptotqtq,var val reptotactualq,var val reptotqtsum,var val reptotactuals,var val reptotlicsum)
begin
  row QTVc collQTrw;
  record QTVc QTr;
  record QTVc causeQTr;
  record QTVc tempQTr;
  row QTVc QTrw;
  row QTVc QTrw2;
  record QTAnalysisVc QTAnalysisr;
  row QTAnalysisVc QTAnalysisrw;
  Integer rwcnt,i,j;
  Integer collrwcnt,colli;
  Integer qtrwcnt;
  string 200 inwarning,warning;
  Boolean chsum,foundf;
  val actualq,actuals;
  val totq,tots,atotq,atots;
  LongInt t;
  val totqtq,totactualq,totqtsum,totactuals,totlicsum;
  record INVc INr;
  
  totq = 0;
  tots = 0;
  atotq = 0;
  atots = 0;
  rwcnt = MatRowCnt(collQTr);
  RecordCopy(QTr,collQTr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowDelete(QTr,0);
  end;
  RecordCopy(causeQTr,QTr);
  collrwcnt = MatRowCnt(collQTr);
  for (colli=0;colli<collrwcnt;colli=colli+1) begin
    MatRowGet(collQTr,colli,collQTrw);
    QTAnalysisr.ItemCode = collQTrw.ArtCode;
    if (ReadFirstMain(QTAnalysisr,1,true)) then begin
      MatRowPut(causeQTr,MatRowCnt(causeQTr),collQTrw);
      rwcnt = MatRowCnt(QTAnalysisr);
      for (i=0;i<rwcnt;i=i+1) begin        
        MatRowGet(QTAnalysisr,i,QTAnalysisrw);
        INr.Code = QTAnalysisrw.ItemCode;
        if (ReadFIrstMain(INr,1,true)) then begin end;
        QTrw.ArtCode = QTAnalysisrw.ItemCode;
        QTrw.Quant = collQTrw.Quant * QTAnalysisrw.Ratio;
        qtrwcnt = MatRowCnt(QTr);
        foundf = false;
        for (j=0;j<qtrwcnt;j=j+1) begin
          MatRowGet(QTr,j,QTrw2);
          if (QTrw2.ArtCode==QTrw.ArtCode) then begin
            QTrw2.Quant = QTrw2.Quant + QTrw.Quant;
            QTrw.Price = INr.UPrice1;
            MatRowPut(QTr,j,QTrw2);
            QTVc_PasteQuant(QTr,j,false,chsum);
            foundf = true;
            j = qtrwcnt;
            totqtq = totqtq + QTrw.Quant;
          end;
        end;
        if (foundf==false) then begin
          MatRowPut(QTr,qtrwcnt,QTrw);
          if (QTVc_PasteArtCode(QTr,qtrwcnt,inwarning,warning)) then begin
          end;
          MatRowGet(QTr,qtrwcnt,QTrw);
          QTrw.Quant = collQTrw.Quant * QTAnalysisrw.Ratio;
          QTrw.Price = INr.UPrice1;
          MatRowPut(QTr,qtrwcnt,QTrw);
          QTVc_PasteQuant(QTr,qtrwcnt,false,chsum);

          MatRowGet(QTr,qtrwcnt,QTrw);
          totqtq = totqtq + QTrw.Quant;
        end;
      end;
    end;
  end;
  rwcnt = MatRowCnt(QTr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(QTr,i,QTrw);
    if (blank(QTrw.ArtCode)) then begin
      MatRowDelete(QTr,i);
      i = i -1;
      rwcnt = MatRowCnt(QTr);
    end;
  end;
  if (rwcnt>0) then begin
    StartFormat(15);
    OutString(0,dblclck,cucode,false);
    OutString(2,0,cuname,false);
    EndFormat;
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(0,0,USetStr(17511) & " " & nrofqts & " " & USetStr(17512),false);
    EndFormat;
    j = 0;
    for (i=0;i<nrofqts;i=i+1) begin
      tempQTr.SerNr = aqtser[i];
//      if (ReadFirstMain(tempQTr,1,true)) then begin
        if (j==0) then begin
          StartFormat(15);
        end;
//        OutLongInt(j,"DblQTVc",tempQTr.SerNr,false);
        OutLongInt(j,"DblQTVc",aqtser[i],false);
        j = j + 70;
        if (j>400) then begin
          j = 0;
        end;
        if (j==0) then begin
          EndFormat;
        end;
//      end;
    end;
    if (j!=0) then begin
      EndFormat;
    end;
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(0,0,USetStr(17513),false);
    OutString(6,0,USetStr(17514),true);
    OutString(8,0,USetStr(17515),true);
    EndFormat;
    Gray_Divider(0,1);
    rwcnt = MatRowCnt(causeQTr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(causeQTr,i,QTrw);
      StartFormat(15);
      OutString(0,"DblINVc",QTrw.ArtCode,false);
      OutString(3,0,Left(QTrw.Spec,25),false);
      OutVal(6,0,QTrw.Quant,M4UVal,true);
      OutVal(8,0,QTrw.Sum,M4UVal,true);
      totlicsum = totlicsum + QTrw.Sum;
      EndFormat;
    end;
    rwcnt = MatRowCnt(QTr);
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(4,0,USetStr(17514),false);
    OutString(7,0,USetStr(17515),false);
    EndFormat;
    StartFormat(15);
    OutString(0,0,USetStr(17516),false);
    OutString(4,0,USetStr(17517),true);
    OutString(5,0,USetStr(17518),true);
    OutString(6,0,USetStr(17519),true);
    OutString(7,0,USetStr(17517),true);
    OutString(8,0,USetStr(17518),true);
    OutString(1,0,USetStr(17519),true);
    EndFormat;
    Gray_Divider(0,1);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(QTr,i,QTrw);
      actualq = 0;
      actuals = 0;
      for (colli=0;colli<collrwcnt;colli=colli+1) begin
        MatRowGet(collQTr,colli,collQTrw);
        if (collQTrw.ArtCode==QTrw.ArtCode) then begin
          actualq = collQTrw.Quant;
          actuals = collQTrw.Sum;
          colli = collrwcnt;
        end;
      end;
      StartFormat(15);
      OutString(0,"DblINVc",QTrw.ArtCode,false);
      OutString(3,0,Left(QTrw.Spec,25),false);
      OutVal(4,0,QTrw.Quant,M4UVal,true);
      OutVal(5,0,actualq,M4UVal,true);
      totactualq = totactualq + actualq;
      t = Round((actualq/QTrw.Quant)*100,SetRoundModeD(0));
      OutString(6,0,"" & t & "%",true);
      OutVal(7,0,QTrw.Sum,M4Val,true);
      totqtsum = totqtsum + QTrw.Sum;
      OutVal(8,0,actuals,M4Val,true);
      totactuals = totactuals + actuals;
      t = Round((actuals/QTrw.Sum)*100,SetRoundModeD(0));
      OutString(1,0,"" & t & "%",true);
      EndFormat;
      totq = totq + QTrw.Quant;
      tots = tots + QTrw.Sum;
      atotq = atotq + actualq;
      atots = atots + actuals;
    end;
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(3,0,USetStr(17520),false);
    OutVal(4,0,totqtq,M4UVal,true);
    OutVal(5,0,totactualq,M4UVal,true);
    OutVal(7,0,totqtsum,M4Val,true);
    OutVal(8,0,totactuals,M4Val,true);
    EndFormat;
    StartFormat(15);
    OutString(3,0,USetStr(17523),false);
    OutVal(7,0,totqtsum/totlicsum,M4Val,true);
    OutVal(8,0,totactuals/totlicsum,M4Val,true);
    EndFormat;
    StartFormat(15);
    OutString(4,0,USetStr(17521) & " % ",false);
    t = Round((atotq/totq)*100,SetRoundModeD(0));
    OutString(6,0,"" & t & "%",true);
    OutString(7,0,USetStr(17522) & " ",false);
    t = Round((atots/tots)*100,SetRoundModeD(0));
    OutString(1,0,"" & t & "%",true);
    EndFormat;
    Gray_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;
  reptotqtq = reptotqtq + totqtq;
  reptotactualq = reptotactualq + totactualq;
  reptotqtsum = reptotqtsum + totqtsum;
  reptotactuals = reptotactuals + totactuals;
  reptotlicsum = reptotlicsum + totlicsum;  
  return;
end;

procedure HTQT(String str, var string res)
begin
  String 255 tstr;
  LongInt a;
  LongInt b;

  a = FirstInRange(str,20);
  b = LastInRange(str,20);
  if (a==-1 and b==-1) then begin
   res = "All Quotations";
  end else begin
   res = "Quotations: ";
   tstr = "" & a;
   res = res & tstr;
   if (a<>b) then begin
    res = res & " : " & b;
   end;
  end;
  return;
end;

procedure HTQTClass(string str, var string res)
begin
  String 255 tstr;
  LongInt a;
  LongInt b;

  if (blank(str)) then begin
    res = "All Classes";
  end else begin
    res = "Class: " & str;
  end;
  return;
end;

procedure HTGrouping(Integer group, var string res)
begin
  String 255 tstr;
  LongInt a;
  LongInt b;

  switch (group) begin
    case 1: res = "Grouping: Projects";
    otherwise res = "Grouping: Customers";
  end;
  return;
end;

global
procedure QTAnalysisRn(record RcVc RepSpec)
begin
  record QTVc QTr;
  record QTVc collQTr;
  record CUVc CUr;
  record PRVc PRr;
  array string 20 acust;
  array string 20 aproj;
  LongInt acustcnt,aprojcnt,i,nrofqts;
  LongInt rw;
  string 255 tstr;
  Boolean foundf,testf,needtoadd;
  array LongInt aqtser;
  LongInt frqt,toqt;
  string 255 frpr,topr;
  string 255 ckey;
  val reptotqtq,reptotactualq,reptotqtsum,reptotactuals,reptotlicsum,t;
  
  frqt = FirstInRange(RepSpec.f1,20);
  toqt = LastInRange(RepSpec.f1,20);
  frpr = FirstInRange(RepSpec.f2,20);
  topr = LastInRange(RepSpec.f2,20);
  StartReportJob(USetStr(17510));
  rw = 1;
  acustcnt = 0;
  aprojcnt = 0;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTProjects(frpr,topr,tstr);
  Header(rw,tstr,0);

  HTQT(RepSpec.f1,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTQTClass(RepSpec.FirstAcc,tstr);
  Header(rw,tstr,0);
  HTCusts(RepSpec.LastAcc,RepSpec.LastAcc,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTGrouping(RepSpec.flags[0],tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;
  SetRepCol(2,100);
  SetRepCol(3,60);
  SetRepCol(4,230);
  SetRepCol(5,280);
  SetRepCol(6,330);
  SetRepCol(7,380);
  SetRepCol(8,430);
  foundf = true;
  
  ckey = "QTDate";
  QTr.QTDate = RepSpec.sStartDate;
  while (LoopKey(ckey,QTr,1,foundf)) begin
    if (QTr.QTDate>RepSpec.sEndDate) then begin
      foundf = false;
    end;
    testf = foundf;
    if (nonblank(RepSpec.FirstAcc)) then begin
      if (QTr.QuoteClass!=RepSpec.FirstAcc) then begin
        testf = false;
      end;
    end;
    if (nonblank(RepSpec.LastAcc)) then begin
      if (QTr.CustCode!=RepSpec.LastAcc) then begin
        testf = false;
      end;
    end;
    if (nonblank(RepSpec.f1)) then begin
      if (QTr.SerNr<frqt) then begin testf = false; end;
      if (QTr.SerNr>toqt) then begin testf = false; end;
    end;
    if (nonblank(RepSpec.f2)) then begin
      if (QTr.PRCode<frpr) then begin testf = false; end;
      if (QTr.PRCode>topr) then begin testf = false; end;
    end;

    if (testf) then begin
      needtoadd = true;
      switch (RepSpec.flags[0]) begin
        case 1:
          if (nonblank(QTr.PRCode)) then begin
            for (i=0;i<aprojcnt;i=i+1) begin
              if (aproj[i]==QTr.PRCode) then begin
                needtoadd = false;
                i = aprojcnt;
              end;
            end;
            if (needtoadd) then begin
              aproj[aprojcnt] = QTr.PRCode;
              aprojcnt = aprojcnt + 1;
            end;
          end else begin
            for (i=0;i<acustcnt;i=i+1) begin
              if (acust[i]==QTr.CustCode) then begin
                needtoadd = false;
                i = acustcnt;
              end;
            end;
            if (needtoadd) then begin
              acust[acustcnt] = QTr.CustCode;
              acustcnt = acustcnt + 1;
            end;
          end;                    
        otherwise
          for (i=0;i<acustcnt;i=i+1) begin
            if (acust[i]==QTr.CustCode) then begin
              needtoadd = false;
              i = acustcnt;
            end;
          end;
          if (needtoadd) then begin
            acust[acustcnt] = QTr.CustCode;
            acustcnt = acustcnt + 1;
          end;
      end;
    end;
  end;
  
  switch (RepSpec.flags[0]) begin
    case 1:
      for (i=0;i<aprojcnt;i=i+1) begin
        PRr.Code = aproj[i];
        if (ReadFirstMain(PRr,1,true)) then begin
          nrofqts = 0;
          foundf = true;
          RecordNew(collQTr);
          ResetLoop(QTr);
          QTr.CustCode = PRr.CustCode;
          QTr.QTDate = RepSpec.sStartDate;
          while (LoopKey("CustDate",QTr,2,foundf)) begin
            if (QTr.CustCode!=PRr.CustCode) then begin
              foundf = false;
            end;
            if (QTr.QTDate>RepSpec.sEndDate) then begin
              foundf = false;
            end;
            testf = foundf;
            if (nonblank(RepSpec.FirstAcc)) then begin
              if (QTr.QuoteClass!=RepSpec.FirstAcc) then begin
                testf = false;
              end;
            end;
            if (nonblank(RepSpec.f1)) then begin
              if (QTr.SerNr<frqt) then begin testf = false; end;
              if (QTr.SerNr>toqt) then begin testf = false; end;
            end;
            if (QTr.PRCode!=PRr.Code) then begin testf = false; end;
            if (testf) then begin
              AddQTToQT(QTr,collQTr);
              aqtser[nrofqts] = QTr.SerNr;
              nrofqts = nrofqts + 1;
            end;
          end;
          AnalyseAndPrintQT(PRr.Code,PRr.Name,"DblTBBUVc",collQTr,nrofqts,aqtser,reptotqtq,reptotactualq,reptotqtsum,reptotactuals,reptotlicsum);
        end;
      end;
  end;
  for (i=0;i<acustcnt;i=i+1) begin
    CUr.Code = acust[i];
    if (ReadFirstMain(CUr,1,true)) then begin
      nrofqts = 0;
      foundf = true;
      RecordNew(collQTr);
      ResetLoop(QTr);
      QTr.CustCode = CUr.Code;
      QTr.QTDate = RepSpec.sStartDate;
      while (LoopKey("CustDate",QTr,2,foundf)) begin
        if (QTr.CustCode!=CUr.Code) then begin
          foundf = false;
        end;
        if (QTr.QTDate>RepSpec.sEndDate) then begin
          foundf = false;
        end;
        testf = foundf;
        if (nonblank(RepSpec.FirstAcc)) then begin
          if (QTr.QuoteClass!=RepSpec.FirstAcc) then begin
            testf = false;
          end;
        end;
        if (nonblank(RepSpec.f1)) then begin
          if (QTr.SerNr<frqt) then begin testf = false; end;
          if (QTr.SerNr>toqt) then begin testf = false; end;
        end;
        if (nonblank(RepSpec.f2)) then begin
          if (QTr.PRCode<frpr) then begin testf = false; end;
          if (QTr.PRCode>topr) then begin testf = false; end;
        end;
        if (testf) then begin
          AddQTToQT(QTr,collQTr);
          aqtser[nrofqts] = QTr.SerNr;
          nrofqts = nrofqts + 1;
        end;
      end;
      AnalyseAndPrintQT(CUr.Code,CUr.Name,"DblCUVc",collQTr,nrofqts,aqtser,reptotqtq,reptotactualq,reptotqtsum,reptotactuals,reptotlicsum);
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(3,0,"Totals",false);
  OutVal(4,0,reptotqtq,M4UVal,true);
  OutVal(5,0,reptotactualq,M4UVal,true);
  OutVal(7,0,reptotqtsum,M4Val,true);
  OutVal(8,0,reptotactuals,M4Val,true);
  EndFormat;
  StartFormat(15);
  OutString(3,0,"Services/Licenses",false);
  OutVal(7,0,reptotqtsum/reptotlicsum,M4Val,true);
  OutVal(8,0,reptotactuals/reptotlicsum,M4Val,true);
  EndFormat;
  StartFormat(15);
  OutString(4,0,"Total Qty % ",false);
  t = Round((reptotactualq/reptotqtq)*100,SetRoundModeD(0));
  tstr = ValToString(t,M4UVal,"","",0);
  OutString(6,0,"" & tstr & "%",true);
  OutString(7,0,"Total Sum % ",false);
  t = Round((reptotactuals/reptotqtsum)*100,SetRoundModeD(0));
  tstr = ValToString(t,M4UVal,"","",0);
  OutString(1,0,"" & tstr & "%",true);
  EndFormat;
  Gray_Divider(0,1);

  EndJob;
  return;
end;
