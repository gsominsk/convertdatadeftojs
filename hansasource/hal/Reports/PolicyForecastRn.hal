external procedure HTArtGroup(string, var string);
external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external procedure HTItems(string,var string);
external procedure BuildTheItemArray(array record SMVc,Integer,var array string,var array Integer,var Integer);
external procedure BuildTheForecastArray(var array record SMVc,var Integer,Date,Date,string,Boolean,record RcVc);
external procedure HT2Per(Date,Date,var string);
external procedure AppendMaxCalculations(var array record SMVc,var Integer,Integer,Boolean,record RcVc);
external function LongInt GetStockPolicyMonths();
external procedure PrintForecastNumbers(Date,array record SMVc,var Integer,array string,array Integer,Integer,record RcVc,Boolean,Boolean,Integer,string);
external procedure AppendTheProdNeeds(var array record SMVc,var Integer,Date,Date,string,Boolean,record RcVc);
external procedure AppendAutoProductions(array record SMVc,Integer,Integer,record RcVc);
external procedure NegateArray(var array record SMVc,Integer,record RcVc);
external procedure DebugSelection(record RcVc);
external procedure DebugOption(record RcVc);

global
procedure PolicyForecastRn(record RcVc RepSpec)
BEGIN
  array record SMVc aSMr;
  string 255 tstr;
  Integer rw;
  Integer asmcnt;
  array string 20 aitems;
  array Integer atype;
  Integer acnt;
  Date actualenddate,dummydate;
  record SFPeriodsBlock SFPb; 
  
  if (blankdate(RepSpec.d1)) then begin
    RepSpec.d1 = CurrentDate;
  end;
  StartReportJob(USetStr(16318));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (nonblank(RepSpec.LastAcc)) then begin
    Header(rw,USetStr(18201) & " " & RepSpec.LastAcc,0)
  end else begin
    Header(rw,USetStr(18204),0)
  end;
  HTItems(RepSpec.f1,tstr);
  Header(rw,tstr,1);  
  rw = rw + 1;
  if (HasItemGroups) then begin
    HTArtGroup(RepSpec.f5,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasItemClassification) then begin
    HTItemClass(RepSpec.f7,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  EndHeader;
  SetRepCol(2,55);
  SetRepCol(3,170);

  BlockLoad(SFPb);
  asmcnt = 0;

  switch (SFPb.PeriodType) begin
    case kForecastPeriodTypeMonths:
      actualenddate = AddMonth(RepSpec.sEndDate,GetStockPolicyMonths+1);
    case kForecastPeriodTypeWeeks:
      actualenddate = AddDay(RepSpec.sEndDate,(GetStockPolicyMonths+1)*7);
  end;

  DebugSelection(RepSpec);
  BuildTheForecastArray(aSMr,asmcnt,RepSpec.sStartDate,actualenddate,RepSpec.LastAcc,true,RepSpec);
  AppendTheProdNeeds(aSMr,asmcnt,RepSpec.sStartDate,actualenddate,RepSpec.LastAcc,false,RepSpec);
  AppendMaxCalculations(aSMr,asmcnt,RepSpec.flags[3],true,RepSpec);
  AppendAutoProductions(aSMr,asmcnt,RepSpec.flags[7],RepSpec);
  BuildTheItemArray(aSMr,asmcnt,aitems,atype,acnt);
  NegateArray(aSMr,asmcnt,RepSpec);
  PrintForecastNumbers(dummydate,aSMr,asmcnt,aitems,atype,acnt,RepSpec,false,true,RepSpec.flags[4],"");
  DebugOption(RepSpec);
  EndJob;
  RETURN;
END;

