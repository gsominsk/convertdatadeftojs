external function Boolean FindICS(string,string,string,string,var record ICSVc);
external procedure ItemDateTurnover(string,string,string,string,string,string,Date,Date,string,var val);
external function Boolean TestArtCodeMatch(string,string);
external procedure PrintHeaderCuArt(record RcVc);
external procedure PrintStrings(record RcVc);
external procedure PrintStrings2(string,val,val,val,val);
external procedure PrintStrings3(val,val,val,val);
external procedure PrintStrings4(string,string,string,val,val,val,val,val,val);
external procedure PrintGroup(string);
external procedure GetITName(string,string,var string);
external procedure Base1ToBase2(var val,Date,var val);
external function Boolean SetInSet2(string,string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);

procedure GetDateBalance(string item,string variety,string cust,string branchid,string class,record ICSVc ICSp,string colname,Date bdp,var val vp,Integer basecurncy)
BEGIN
  val rv;
  Date nbd,td;
  
 
  if (blankdate(bdp)) then begin goto LGetDateBalance; end;  
  td = bdp;  
  nbd = AddDay(bdp,1);
  if (GetDay(nbd)<>1) then begin
    td = AddMonth(bdp,-1);  
    nbd = AddDay(bdp,-(GetDay(bdp)-1));    
    ItemDateTurnover(item,variety,cust,branchid,class,colname,nbd,bdp,"",rv);
  end;
  vp = GetBalance(ICSp,colname,td);
  if (colname<>"quant") then begin
    if (basecurncy!=0) then begin
      td = CurrentDate;
      Base1ToBase2(vp,td,vp);
      Base1ToBase2(rv,td,rv);
    end;  
  end;  
  vp = rv + vp;
LGetDateBalance:;
  RETURN;
END;

procedure GetDateStartBalance(string item,string variety,string cust,string branchid,string class,record ICSVc ICSp,string colname,Date bdp,var val vp,Integer basecurncy)
BEGIN
  Date sbd;
  
  sbd = AddDay(bdp,-1);
  GetDateBalance(item,variety,cust,branchid,class,ICSp,colname,sbd,vp,basecurncy);
  RETURN;
END;

global
procedure GetDateTurnover(string item,string variety,string cust,string branchid,string class,record ICSVc ICSp,string colname,Date sdp,Date edp,var val vp,Integer basecurncy)
BEGIN
  val v1,v2;
  
  GetDateStartBalance(item,variety,cust,branchid,class,ICSp,colname,sdp,v1,basecurncy);
  GetDateBalance(item,"",cust,branchid,class,ICSp,colname,edp,v2,basecurncy);
  vp = v2 - v1;    
  RETURN;
END;

procedure PrintItem(record RcVc RepSpec,record INVc INr,record CUVc CUp,record ICSVc ICSp,var Boolean cuPrinted,var string oldgrp,
                   var val p1qper,var val p1sper,var val p2qper,var val p2sper,var val itp2q,var val itp2s,var val itp1q,var val itp1s)
begin
  string 255 fromart,toart;
  Date StartDate1,StartDate2;
  Date EndDate1,EndDate2;
  val p1q,p1s,p2q,p2s;
  val diffq,diffs;
  string 255 tstr;
  
  fromart = FirstInRange(RepSpec.Period2Str,20);
  toart = LastInRange(RepSpec.Period2Str,20);
  StartDate1 = StringToDate(fromart);
  EndDate1 = StringToDate(toart);
  fromart = FirstInRange(RepSpec.Stext,20);
  toart = LastInRange(RepSpec.Stext,20);
  StartDate2 = StringToDate(fromart);
  EndDate2 = StringToDate(toart);
  
  GetDateTurnover(INr.Code,ICSp.Variety,CUp.Code,RepSpec.f6,RepSpec.LastAcc,ICSp,"quant",StartDate1,EndDate1,p1q,RepSpec.basecurncy);          
  GetDateTurnover(INr.Code,ICSp.Variety,CUp.Code,RepSpec.f6,RepSpec.LastAcc,ICSp,"salesexclvat",StartDate1,EndDate1,p1s,RepSpec.basecurncy);
  GetDateTurnover(INr.Code,ICSp.Variety,CUp.Code,RepSpec.f6,RepSpec.LastAcc,ICSp,"quant",StartDate2,EndDate2,p2q,RepSpec.basecurncy);
  GetDateTurnover(INr.Code,ICSp.Variety,CUp.Code,RepSpec.f6,RepSpec.LastAcc,ICSp,"salesexclvat",StartDate2,EndDate2,p2s,RepSpec.basecurncy);
  
  if ((p1s!=0) or (p2s!=0) or (p1q!=0) or (p2q!=0)) then begin
    p1sper = p1s + p1sper;
    p2sper = p2s + p2sper;
    p1qper = p1q + p1qper;
    p2qper = p2q + p2qper;
    diffs = p1s - p2s;
    diffq = p1q - p2q;
    if (RepSpec.flags[1]==0) then begin
      if (cuPrinted==false) then begin
        StartFormat(15);
        OutString(0,"DblCUVc",CUp.Code,false);
        OutString(50,0,CUp.Name,false);
        EndFormat;
        cuPrinted = true;
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (oldgrp<>INr.Group) then begin
          PrintGroup(INr.Group);
          oldgrp = INr.Group;
        end;
      end;
      if (blank(ICSp.Variety)) then begin
        PrintStrings4("CuArtSTVarDblClk",INr.Code,INr.Name,p2q,p2s,p1q,p1s,diffq,diffs);
      end else begin
        PrintStrings4("",INr.Code,INr.Name,p2q,p2s,p1q,p1s,diffq,diffs);
      end;
    end else begin             
      if (oldgrp<>INr.Group)  then begin
        if ((itp2q!=0) or (itp2s!=0) or (itp1q!=0) or (itp1s!=0)) then begin
          if (cuPrinted==false) then begin
            StartFormat(15);
            OutString(0,"DblCUVc",CUp.Code,false);
            OutString(50,0,CUp.Name,false);
            EndFormat;
            cuPrinted = true;
          end;              
          if (nonblank(oldgrp)) then begin
            GetITName(oldgrp,"",tstr);
            PrintStrings4("CuArtSTGroupDblClk",oldgrp,tstr,itp2q,itp2s,itp1q,itp1s,itp1q-itp2q,itp1s-itp2s);
            itp1s = blankval;
            itp2s = blankval;
            itp1q = blankval;
            itp2q = blankval;
          end;  
        end;              
        oldgrp = INr.Group;
      end;
      itp1s = itp1s + p1s;
      itp2s = itp2s + p2s;
      itp1q = itp1q + p1q;
      itp2q = itp2q + p2q;            
    end;          
  end;
  
  return;
end;

function Boolean PrintCustItem(record CUVc CUp,record RcVc RepSpec,var val p1tots,var val p2tots,var val p1totq,var val p2totq)
begin
  Boolean cuPrinted;
  record ICSVc ICSp;
  record INVc INr,INNamer;
  string 40 ckey;
  string 255 fromart,toart;
  string 255 fromgrp,togrp;
  string 255 oldgrp;
  string 255 tstr,branchid,class;
  Integer keys;
  Boolean TrHs,stfound,skipf;
  val p1qper,p1sper,p2qper,p2sper;
  val diffq,diffs;
  val itp1q,itp1s,itp2q,itp2s;

  cuPrinted = false;
  fromart = FirstInRange(RepSpec.f2,20);
  toart = LastInRange(RepSpec.f2,20);
  fromgrp = FirstInRange(RepSpec.f3,20);
  togrp = LastInRange(RepSpec.f3,20);
  oldgrp = "";
  if (RepSpec.flags[1]==0) then begin
    if (nonblank(RepSpec.f3)) then begin
      INr.Group = fromgrp;
      INr.Code = fromart;
      ckey = "Group";
      keys = 2;
    end else begin
      INr.Code = fromart;
      ckey = "Code";
      keys = 1;
    end;
  end else begin
    INr.Group = fromgrp;
    INr.Code = fromart;
    ckey = "Group";
    keys = 2;
  end;  
  TrHs = true;
  while (LoopKey(ckey,INr,keys,TrHs)) begin
    if (TrHs) then begin
      if (nonblank(RepSpec.f3)) then begin
        if (INr.Group>togrp) then begin TrHs = false; end;
      end else begin
        if (nonblank(toart)) then begin
          if (INr.Code>toart) then begin TrHs = false; end;
        end;  
      end;
    end;
    if (TrHs) then begin
      skipf = false; 
      if (nonblank(RepSpec.f2)) then begin      
        if (nonblank(fromart)) then begin
          if (INr.Code<fromart) then begin skipf = true; end;
        end;  
        if (nonblank(toart)) then begin
          if (INr.Code>toart) then begin skipf = true; end;
        end;  
      end;
      if (nonblank(RepSpec.f5)) then begin
        if (SetInSet2(RepSpec.f5,INr.DispGroups)==false) then begin
          skipf = true;
        end;
      end;
      if (skipf==false) then begin
        if (RepSpec.flags[2]==0) then begin
          stfound = FindICS(CUp.Code,INr.Code,RepSpec.f6,RepSpec.LastAcc,ICSp);
          if (TestArtCodeMatch(ICSp.ArtCode,INr.Code)==false) then begin
            stfound = false;
          end;
          if (ICSp.CustCode<>CUp.Code) then begin
            stfound = false;
          end;
          ICSp.ArtCode = INr.Code;
          if (stfound==true) then begin
            ICSp.Variety = "";
            PrintItem(RepSpec,INr,CUp,ICSp,cuPrinted,oldgrp,p1qper,p1sper,p2qper,p2sper,itp2q,itp2s,itp1q,itp1s);
          end;
        end else begin
          ResetLoop(ICSp);
          ICSp.CustCode = CUp.Code;
          ICSp.ArtCode = INr.Code;
          branchid = RepSpec.f6;
//          branchid = RepSpec.LastAcc;// what is that ??
          if (blank(branchid)) then begin branchid = ";;;"; end;
          if (blank(class)) then begin class = ";;;"; end;
          ICSp.BranchID = branchid;
          ICSp.Class = class;
          stfound = true;
          while (LoopMain(ICSp,4,stfound)) begin
            if (ICSp.CustCode!=CUp.Code) then begin stfound = false; end;
            if (ICSp.BranchID!=branchid) then begin stfound = false; end;
            if (ICSp.Class!=class) then begin stfound = false; end;
            if (TestArtCodeMatch(ICSp.ArtCode,INr.Code)==false) then begin
              stfound = false;
            end;
            if (stfound) then begin
              INr.Code = ICSp.ArtCode & ICSp.Variety;
              if (ReadFirstItem(ICSp.ArtCode & ICSp.Variety,INNamer,true,false)) then begin 
                INr.Name = INNamer.Name;
              end;
              PrintItem(RepSpec,INr,CUp,ICSp,cuPrinted,oldgrp,p1qper,p1sper,p2qper,p2sper,itp2q,itp2s,itp1q,itp1s);
            end;
          end;
        end;
      end;
    end;    
  end;
  if ((itp2q!=0) or (itp2s!=0) or (itp1q!=0) or (itp1s!=0)) then begin
    if (cuPrinted==false) then begin
      StartFormat(15);
      OutString(0,"DblCUVc",CUp.Code,false);
      OutString(50,0,CUp.Name,false);
      EndFormat;
      cuPrinted = true;
    end;  
    GetITName(oldgrp,"",tstr);
    PrintStrings4("CuArtSTGroupDblClk",oldgrp,tstr,itp2q,itp2s,itp1q,itp1s,itp1q-itp2q,itp1s-itp2s);
  end;  
  if ((blank(RepSpec.f2)) and (blank(RepSpec.f3))) then begin
  end;
  if (cuPrinted) then begin
    Gray_Divider(0,1);
    StartFormat(15);
    diffs = p1sper - p2sper;
    diffq = p1qper - p2qper;
    OutString(15,0,"",false);
    OutString(60,0,"",false);
    OutValBiDi(190,0,p2qper,M4UVal,true,250);
    OutValBiDi(260,0,p2sper,M4Val,true,300);
    OutValBiDi(300,0,p1qper,M4UVal,true,360);
    OutValBiDi(370,0,p1sper,M4Val,true,410);
    OutValBiDi(410,0,diffq,M4UVal,true,470);
    OutValBiDi(480,0,diffs,M4Val,true,510);
    EndFormat;
    StartFormat(15);
    EndFormat;
  end;
  p1totq = p1qper;
  p1tots = p1sper;
  p2totq = p2qper;
  p2tots = p2sper;
  PrintCustItem = cuPrinted;
  return;
end;

global
procedure CuArtSTRn(record RcVc RepSpec)
begin
  record CUVc CUr;
  record CCatVc CCatR;
  string 255 fromcust,tocust;
  string 255 fromcat,tocat;
  val cup1s,cup2s;
  val cup1q,cup2q;
  val catp1tots,catp2tots;
  val catp1totq,catp2totq;
  val p1tots,p2tots;
  val p1totq,p2totq;
  val diffs,diffq;
  Boolean catflag,catfound;
  Boolean matchf,printedf,firstf;
  Boolean testf,TrHs;

//  RepSpec.Stext = RepSpec.sStartDate2 & ":" & RepSpec.sEndDate2;
//only when reportnigperiods on
  catflag = false;
  catfound = false;
  fromcust = FirstInRange(RepSpec.f1,20);
  tocust = LastInRange(RepSpec.f1,20);
  fromcat = FirstInRange(RepSpec.ObjStr,20);
  tocat = LastInRange(RepSpec.ObjStr,20);
  
  if (blank(RepSpec.f1)) then begin
    if (nonblank(tocat)) then begin
      catflag = true;
      CCatR.Code = fromcat;
      if (nonblank(CCatR.Code)) then begin
        matchf = true;
      end else begin
        matchf = false;
      end;  
      if (LoopMain(CCatR,1,matchf)==false) then begin goto LCuArtSTRn; end;
      if (CCatR.Code>tocat) then begin goto LCuArtSTRn; end;
      firstf = true;    
    end;
  end;
  StartReportJob(USetStr(2470)); 
   PrintHeaderCuArt(RepSpec);
  EndHeader;
L22:;
  if (catflag) then begin
    if (firstf) then begin firstf = false; StepBack(CCatR); end;    
    catfound = LoopMain(CCatR,1,true);  
    if (catfound==false) then begin goto L88; end;
    if (CCatR.Code>tocat) then begin goto L88; end;
    StartFormat(15);
     OutString(0,0,USetStr(1114),false);
     OutString(100,0,CCatR.Code,false);
     OutString(130,0,CCatR.Comment,false);
    EndFormat;
    Black_Divider(0,1);
    ResetLoop(CUr);    
  end;
  printedf = false;
  PrintStrings(RepSpec);
  Gray_Divider(0,1);
  CUr.Code = fromcust;
  TrHs = true;
  while (LoopMain(CUr,1,TrHs)) begin
    if (TrHs) then begin
      if (nonblank(tocust)) then begin
        if (CUr.Code>tocust) then begin
          TrHs = false;
        end;
      end;    
    end;
    if (TrHs) then begin
      testf = true;
      if (catflag) then begin
        if (CCatR.Code<>CUr.CustCat) then begin
          testf = false;
        end;  
      end;  
      if (nonblank(RepSpec.f4)) then begin
        if (SetInSet2(RepSpec.f4,CUr.Classification)==false) then begin
          testf = false;
        end;
      end;      
      if ((nonblank(RepSpec.AccStr)) and (SetInSet(RepSpec.AccStr,CUr.Objects)==false))  then begin       
        testf = false;
      end;
      if ((nonblank(RepSpec.AccStr)) and (blank(CUr.Objects)))  then begin       
        testf = false;
      end;
      if ((nonblank(RepSpec.TransStr)) and (CUr.CountryCode<>RepSpec.TransStr))  then begin
        testf = false;
      end;
      if (CUr.CUType==0) then begin testf = false; end;      
      if (testf) then begin
        if (PrintCustItem(CUr,RepSpec,cup1s,cup2s,cup1q,cup2q)) then begin
          printedf = true;
        end;  
        p1tots = cup1s + p1tots;
        p2tots = cup2s + p2tots;
        p1totq = cup1q + p1totq;
        p2totq = cup2q + p2totq;
        catp1tots = cup1s + catp1tots;
        catp2tots = cup2s + catp2tots;
        catp1totq = cup1q + catp1totq;
        catp2totq = cup2q + catp2totq;
      end;
    end;
  end;
  if (catflag) then begin
    Black_Divider(0,1);
    PrintStrings2(CCatR.Code,catp2totq,catp2tots,catp1totq,catp1tots);
    catp1tots = blankval;
    catp2tots = blankval;
    catp1totq = blankval;
    catp2totq = blankval;
    goto L22;
  end;
L88:;
  Black_Divider(0,1);
  PrintStrings3(p1tots,p2tots,p1totq,p2totq);
  EndJob;
LCuArtSTRn:;
  RETURN;
END;
