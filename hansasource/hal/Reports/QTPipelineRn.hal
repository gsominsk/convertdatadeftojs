external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure GetMonthText(string,Date,var string);
external procedure OutEmpty(record RcVc,Integer);

procedure findleastamount(val rs, var val lamount)
begin
  if (lamount == 0)  then begin
    lamount = rs;
  end;
  if (lamount > rs) then begin
    lamount = rs;
  end;
  return;
end;

procedure findhigestamount(val rs, var val hamount)
begin
  if (hamount == 0)  then begin
    hamount = rs;
  end;
  if (hamount < rs) then begin
    hamount = rs;
  end;
  return;
end;

procedure EndOfReport(record RcVc RepSpec,val TotSum,val totqt,val mostamount,val lessamount,val totprob,val avgprob,val totestimates)
begin
  val calcval;
  val avgval;
  Integer EmptiesNeeded;
  
  StartFormat(15);
  OutString(230,0,USetStr(2687),false);    
  OutEmpty(RepSpec,4);
  if (RepSpec.flags[1]!=0) then begin
    OutVal(6,0,TotSum,M4Val,true);
    OutVal(7,0,totestimates,M4Val,true);
    EmptiesNeeded = 5;
  end else begin
    OutVal(7,0,TotSum,M4Val,true);
    EmptiesNeeded = 4;
  end;
  EndFormat;
  calcval = (Totsum*RepSpec.vals0)/100;
  StartFormat(15);
  OutString(230,0,USetStr(11031),false);
  OutEmpty(RepSpec,EmptiesNeeded);
  OutVal(7,0,totqt,M40Val,true);
  EndFormat;   
  StartFormat(15);
  avgval = TotSum/totqt;
  OutString(230,0,USetStr(11032),false);
  OutEmpty(RepSpec,EmptiesNeeded);
  OutStringAdjust(7,0,avgval,true,M4Val);
  EndFormat;   
  StartFormat(15);
  OutString(230,0,USetStr(11019),false);
  OutEmpty(RepSpec,EmptiesNeeded);
  OutStringAdjust(7,0,mostamount,true,M4Val);
  EndFormat;
  StartFormat(15);
  OutString(230,0,USetStr(11020),false);
  OutEmpty(RepSpec,EmptiesNeeded);
  OutStringAdjust(7,0,lessamount,true,M4Val);
  EndFormat;
  StartFormat(15);
  OutString(230,0,USetStr(11033),false);
  OutEmpty(RepSpec,EmptiesNeeded);
  OutStringAdjust(7,0,calcval,true,M4Val);
  EndFormat;
  StartFormat(15);
  OutString(230,0,USetStr(11034),false);
  OutEmpty(RepSpec,EmptiesNeeded);
  OutStringAdjust(7,0,totprob,true,M4Val);
  EndFormat;
  StartFormat(15);
  OutString(230,0,USetStr(11035),false);
  OutEmpty(RepSpec,EmptiesNeeded);
  OutStringAdjust(7,0,avgprob,true,M4Val);
  EndFormat;   
  return;
end;
  
procedure GetClass(string tstr,var array string cl,var integer i)  
begin  
  string 1 ch;
  String 5 str;
  Integer pos,le;
        
  str = "";
  i = 0;
  le=len(tstr);
  for (pos=0; pos<=le; pos=pos+1) begin
    ch = Mid(tstr,pos,1); 
    if (ch==",") then begin
      cl[i] = str;
      i = i+1;
      str = "";
      goto lx;
    end;
    str = str & ch;
    lx:;
  end;
  cl[i] = str; 
  return;
end;

procedure QuotationLoop(record RcVc RepSpec,string salesman,var val totsum2,var val totsum3,var val totprob,var val avgprob,var val TotSum,var val totqt,var val lessamount,var val mostamount,var val totestimates)
begin
  Array string 5 cl;
  Integer i,j;
  string 50 ckey;
  String 255 mnth3;
  String 20 mnth,mnth2;
  record QTVc QTr;
  Boolean found,found2,testf;
  val prob,iv,rs;

  if (nonblank(RepSpec.f4)) then begin
    GetClass(RepSpec.f4,cl,i);  
  end else begin
    i=0;
    cl[i] = "";
  end;
  mnth = "";
  ResetLoop(QTr);
  found = true;
  QTr.Rejected = 0;
  QTr.RejectDate = "";
  ckey = "Rejected";
  if (nonblank(salesman)) then begin
    ckey = ckey & ":";
    ckey = ckey & salesman;
  end;
  while (LoopKey(ckey,QTr,2,found)) begin   
    if (QTr.Rejected<>0) then begin
      found = false;
    end;    
    if (found) then begin
      testf = true;  
      if nonblank(RepSpec.f2) then begin
        if (RepSpec.f2<>QTr.SalesMan) then begin
          testf = false;
        end;
      end;
      if nonblank(RepSpec.f4) then begin
        found2=false;
        for (j=0; j<=i; j=j+1) begin
          if ((cl[j]!="") and (cl[j]==QTr.QuoteClass)) then begin
            found2 = true;
          end;
        end;
        if (found2==false) then begin testf=false; end;
      end;      
      if (RepSpec.vals2 > 0) then begin
        if (QTr.Probability < 1) then begin
          prob = 100;
        end else begin
          prob = QTr.Probability;
        end;
        if (QTr.Probability < RepSpec.vals2) then begin
          testf = false;
        end;
      end;
      if (QTr.Closed==1) then begin
        testf = false;
      end;
      if (QTr.OrderNr<>-1) then begin
        testf = false;
      end;         
      if (nonblankDate(RepSpec.d1)) then begin
        if (QTr.RejectDate > RepSpec.d1) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.ObjStr)) then begin
        if (QTr.SalesGroup!=RepSpec.ObjStr) then begin found = false; end;
      end;
      if (testf) then begin  
        iv = QTr.Sum1;
        rs = MULRATETOBASE1(QTr.CurncyCode,iv,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
        findleastamount(rs, lessamount);
        findhigestamount(rs, mostamount);
        if (QTr.Probability<1) then begin
           prob = 100;
        end else begin
          prob = QTr.Probability;
        end;
        if (testf) then begin
          mnth2 = GetMonth(QTr.RejectDate);
          if (mnth<>mnth2 and (nonblankdate(QTr.RejectDate))) then begin
            if (blank(mnth)) then begin mnth = mnth2; end;
            if (totsum2!=0) then begin
              Gray_Divider(0,1);
              StartFormat(15);
              OutString(4,0,USetStr(2687),false);    
              OutEmpty(RepSpec,4);
              if (RepSpec.flags[1]!=0) then begin
                OutVal(6,0,totsum2,M4Val,true);
                OutVal(7,0,totsum3,M4Val,true);
              end else begin
                OutVal(7,0,totsum2,M4Val,true);
              end;
              EndFormat;
              totestimates = totestimates + totsum3;
              totsum2 = 0;
              totsum3 = 0;
            end;
            if (mnth!="") then begin
//              GetMonthText(QTr.LangCode,QTr.RejectDate,mnth3);
              mnth3 = USetStr(2780+GetMonth(QTr.RejectDate)) & " " & GetYear(QTr.RejectDate);
              StartFormat(15);
              OutString(15,0,mnth3,false);// &" "& GetYear(QTr.RejectDate)
              EndFormat;
              Gray_Divider(0,1);
            end;
            mnth = mnth2;
          end;
          StartFormat(15);
          OutLongInt(0,"DblQuote",QTr.SerNr,false);
          OutString(2,0,left(QTr.Addr0,20),false);
          OutString(3,0,QTr.SalesMan,false);
          OutLongInt(4,0,QTr.Probability,false);
          OutDate(5,0,QTr.RejectDate,false);
          if (RepSpec.flags[1]!=0) then begin
            OutStringAdjust(6,0,rs,true,M4Val);
            OutStringAdjust(7,0,((prob*rs)/100),true,M4Val);
          end else begin
            OutStringAdjust(7,0,rs,true,M4Val);
          end;
          EndFormat;
          totsum2 = totsum2 + rs;
          totsum3 = totsum3 + ((prob*rs)/100);
          totprob = totprob + ((prob*rs)/100);
          avgprob = avgprob + prob;
          TotSum = TotSum + rs;
          totqt = totqt +1;
        end;
      end; 
    end; 
  end; 
  return;
end;
      
global
procedure QTPipelineRn(record RcVc RepSpec)
begin
  Boolean found2;
  Integer rw;
  string 255 tstr;
  val calcval;
  val TotSum,totsum2,totsum3;
  val totqt;
  val avgprob,tavgprob;
  val totprob;
  val lessamount,mostamount;
  val totestimates;
  record UserVc User;
  Boolean found;
  
  avgprob = 0;
  tavgprob = 0;
  totqt = 0;
  lessamount = 0;
  mostamount = 0;
  
  StartReportJob(USetStr(11029));
  rw = 1;
  tstr = USetStr(8320);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (blank(RepSpec.f4)) then begin
    tstr = USetStr(8325);
  end else begin
    tstr = USetStr(8326);
    tstr = tstr & RepSpec.f4;
  end;    
  Header(rw,tstr,1);    
  rw = rw + 1;  
  EndHeader;
  SetRepCol(2,50);
  SetRepCol(3,190);
  SetRepCol(4,250);
  SetRepCol(5,295);
  if (RepSpec.flags[1]!=0) then begin
    SetRepColBiDi(6,420,460);
  end else begin
    SetRepColBiDi(6,480,520);
  end;
  SetRepColBiDi(7,480,520);
  StartFormat(15);
  OutString(0,0,USetStr(12071),false);
  OutString(2,0,USetStr(11003),false);
  OutString(3,0,USetStr(11004),false);
  OutString(4,0,USetStr(8328),false);
  OutString(5,0,USetStr(11038),false);
  if (RepSpec.flags[1]!=0) then begin
    OutStringAdjust(6,0,USetStr(12010),true,M4Val);
    OutStringAdjust(7,0,USetStr(12016),true,M4Val);
  end else begin
    OutStringAdjust(7,0,USetStr(12010),true,M4Val);
  end;
  EndFormat;
  Gray_Divider(0,1);
  
  totsum2 = 0;
  if (RepSpec.flags[0]!=0) then begin
    User.Code = RepSpec.f2;
    found = true;
    while (LoopMain(User,1,found)) begin
      if (nonblank(RepSpec.f2)) then begin
        if (User.Code!=RepSpec.f2) then begin found = false; end;
      end;
      if (found) then begin
        QuotationLoop(RepSpec,User.Code,totsum2,totsum3,totprob,avgprob,TotSum,totqt,lessamount,mostamount,totestimates);
      end;
    end;
  end else begin
    QuotationLoop(RepSpec,"",totsum2,totsum3,totprob,avgprob,TotSum,totqt,lessamount,mostamount,totestimates);
  end;
  
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(4,0,USetStr(2687),false);    
  OutEmpty(RepSpec,4);
  if (RepSpec.flags[1]!=0) then begin
    OutVal(6,0,totsum2,M4Val,true);
    OutVal(7,0,totsum3,M4Val,true);
  end else begin
    OutVal(7,0,totsum2,M4Val,true);
  end;
  EndFormat;
  totestimates = totestimates + totsum3;
  Black_Divider(0,1);
  avgprob = avgprob/totqt;
  EndOfReport(RepSpec, TotSum,totqt,mostamount,lessamount,totprob,avgprob,totestimates);
  EndJob;
  return;
end;
