external function Boolean HasDepartments();
external function Boolean IsEnterprise();
external function Boolean HasItemGroups();
external function Boolean HasModIN();
external function Boolean HasMultiLocations();

external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external function Boolean FindICS(string,string,string,string,var record ICSVc);
external function Boolean FindST(string,string,string,var record STVc);
external procedure HTClasses(string,string,var string);
external procedure HTBranchIDs(string,string,var string);
external function roundmode GetVATRoundModeRB();
external function roundmode DefaultRoundMode();
external function val FindCostPrice(string,string,string,val,val,Boolean);
external procedure ItemDateTurnover(string,string,string,string,string,string,Date,Date,string,var val);
external procedure GetStockValue(string,string,var record ItemStatusVc);
external function Boolean TestArtCodeMatch(string,string);
external procedure HT2Per(Date,Date,var string);
external procedure HTArtSel(string,string,var string);
external procedure HTDepartment(string,var string);
external procedure HTArtGroup(string, var string);
external procedure HTCusts(string, string, var string);
external procedure HTDetailLevel(Integer, var string);
external procedure GetDateTurnover(string,string,string,string,string,record ICSVc,string,Date,Date,var val,Integer);
external procedure FindFiscalYear(Date,var Date,var Date);
external procedure HTArts(string, string, var string);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external procedure Base1ToBase2(var val,Date,var val);
external procedure ValToHALString(val,string,var string);
external function Boolean SetInSet2(string,string);
external procedure HTLocations(string,string,var string);

procedure ItemGetDateTurnoverLocation(string artcode,string variety,string custcode,string branch,string orclass,string colname,Date sdp,Date edp,
                                      var val res,Integer basecurncy,string location)
begin
  ItemDateTurnover(artcode,variety,custcode,branch,orclass,colname,sdp,edp,location,res);
  if (colname<>"quant") then begin
    if (basecurncy!=0) then begin
      Base1ToBase2(res,CurrentDate,res);
    end;
  end;
  return;
end;

procedure MakeMarginString(val t,var string res)
BEGIN
  string 255 tstr;

  ValToHALString(t,"2",tstr);  
  if (t<0) then begin
    res = "-";
    res = "";
  end else begin
    res = "+";
  end;
  res = res & tstr;
  res = res & "%";
  RETURN;
END;

function val GetPriceListPrice(string artcode,string plcode)
BEGIN
  record PLVc PLr;  
  val res;
  
  if (nonblank(plcode)) then begin
    PLr.ArtCode = artcode;
    PLr.PLCode = plcode;
    if (ReadFirstKey("Date",PLr,2,true)) then begin
      res = PLr.ExVatPrice;
    end;
  end;
  GetPriceListPrice = res;
  RETURN;
END;

function Boolean ArtStatCUGroup1(Boolean wholemonthf,Date sd,Date ed,Integer basecurncy,string ItemCode,string cat,
                                 var val qgrp,var val sgrp,var val gpsgrp,string location,string branch,string orclass)
BEGIN
  Boolean TrHs,stfound,testf;
  Boolean res,locationf;
  record CUVc CUr;
  record ICSVc ICSp;
  val s,q,gps;

  CUr.CustCat = cat;
  if (wholemonthf) then begin
    StartFormat(15);
     OutString(0,0,USetStr(1163),false);
    EndFormat;
    goto LArtStatCUGroup1;
  end;
  locationf = nonblank(location);
  TrHs = true;
  while (LoopKey("Group",CUr,1,TrHs)) begin
    if (CUr.CustCat!=cat) then begin
      TrHs = false;
    end;  
    testf = true;
    if (CUr.CUType==0) then begin testf = false; end;
    if (TrHs and testf) then begin
      ICSp.ArtCode = ItemCode;
      ICSp.CustCode = CUr.Code;
      stfound = FindICS(CUr.Code,ItemCode,branch,orclass,ICSp);
      if (TestArtCodeMatch(ICSp.ArtCode,ItemCode)==false) then begin
        stfound = false;
      end;
      if (ICSp.CustCode<>CUr.Code) then begin
        stfound = false;
      end;
      if (stfound==true) then begin
        res = true;
        if (locationf==false) then begin
          ICSp.ArtCode = ItemCode;//this will require to be changed when we allow to have stats per variety
          ICSp.Variety = "";
          GetDateTurnover(ItemCode,"",CUr.Code,branch,orclass,ICSp,"quant",sd,ed,q,basecurncy);
          GetDateTurnover(ItemCode,"",CUr.Code,branch,orclass,ICSp,"salesexclvat",sd,ed,s,basecurncy);
          GetDateTurnover(ItemCode,"",CUr.Code,branch,orclass,ICSp,"grossprofit",sd,ed,gps,basecurncy);
        end else begin
          ItemGetDateTurnoverLocation(ItemCode,"",CUr.Code,branch,orclass,"quant",sd,ed,q,basecurncy,location);
          ItemGetDateTurnoverLocation(ItemCode,"",CUr.Code,branch,orclass,"salesexclvat",sd,ed,s,basecurncy,location);
          ItemGetDateTurnoverLocation(ItemCode,"",CUr.Code,branch,orclass,"grossprofit",sd,ed,gps,basecurncy,location);
        end;
        qgrp = qgrp + q;
        sgrp = sgrp + s;
        gpsgrp = gpsgrp + gps;
      end;
    end;
  end;
LArtStatCUGroup1:;
  ArtStatCUGroup1 = res;
  RETURN;  
END;

function Boolean ArtStatCUGroup2(Date sd,Date ed,Integer basecurncy, string ItemCode,string cat,Date ystartdate,Date yenddate,
                                 var val qgrp,var val sgrp,var val gpsgrp,var val yqgrp,var val ysgrp,var val ygpsgrp,
                                 string location,string branch,string orclass)
BEGIN
  record CUVc CUr;
  record ICSVc ICSp;
  Boolean TrHs,stfound,testf;
  val s,q,gps;
  Boolean res;
  Boolean locationf;

  CUr.CustCat = cat;
  locationf = nonblank(location);
  TrHs = true;
  while (LoopKey("Group",CUr,1,TrHs)) begin
    if (CUr.CustCat!=cat) then begin
      TrHs = false;
    end;  
    testf = true;
    if (CUr.CUType==0) then begin testf = false; end;    
    if (TrHs and testf) then begin
      stfound = FindICS(CUr.Code,ItemCode,branch,orclass,ICSp);
      if (TestArtCodeMatch(ICSp.ArtCode,ItemCode)==false) then begin
        stfound = false;
      end;
      if (ICSp.CustCode<>CUr.Code) then begin
        stfound = false;
      end;
      if (stfound==true) then begin
        res = true;
        if (locationf==false) then begin
          ICSp.ArtCode = ItemCode;//this will require to be changed when we allow to have stats per variety
          ICSp.Variety = "";
          GetDateTurnover(ItemCode,"",CUr.Code,branch,orclass,ICSp,"quant",sd,ed,q,basecurncy);
          GetDateTurnover(ItemCode,"",CUr.Code,branch,orclass,ICSp,"salesexclvat",sd,ed,s,basecurncy);
          GetDateTurnover(ItemCode,"",CUr.Code,branch,orclass,ICSp,"grossprofit",sd,ed,gps,basecurncy);
        end else begin
          ItemGetDateTurnoverLocation(ItemCode,"",CUr.Code,branch,orclass,"quant",sd,ed,q,basecurncy,location);
          ItemGetDateTurnoverLocation(ItemCode,"",CUr.Code,branch,orclass,"salesexclvat",sd,ed,s,basecurncy,location);
          ItemGetDateTurnoverLocation(ItemCode,"",CUr.Code,branch,orclass,"grossprofit",sd,ed,gps,basecurncy,location);
        end;
        qgrp = qgrp + q;
        sgrp = sgrp + s;
        gpsgrp = gpsgrp + gps;
        if (locationf==false) then begin
          GetDateTurnover(ItemCode,ICSp.Variety,CUr.Code,branch,orclass,ICSp,"quant",ystartdate,yenddate,q,basecurncy);
          GetDateTurnover(ItemCode,ICSp.Variety,CUr.Code,branch,orclass,ICSp,"salesexclvat",ystartdate,yenddate,s,basecurncy);
          GetDateTurnover(ItemCode,ICSp.Variety,CUr.Code,branch,orclass,ICSp,"grossprofit",ystartdate,yenddate,gps,basecurncy);
        end else begin
          ItemGetDateTurnoverLocation(ItemCode,"",CUr.Code,branch,orclass,"quant",ystartdate,yenddate,q,basecurncy,location);
          ItemGetDateTurnoverLocation(ItemCode,"",CUr.Code,branch,orclass,"salesexclvat",ystartdate,yenddate,s,basecurncy,location);
          ItemGetDateTurnoverLocation(ItemCode,"",CUr.Code,branch,orclass,"grossprofit",ystartdate,yenddate,gps,basecurncy,location);
        end;
        yqgrp = yqgrp + q;
        ysgrp = ysgrp + s;
        ygpsgrp = ygpsgrp + gps;
      end;        
    end;
  end;
  ArtStatCUGroup2 = res;
  RETURN;
END;

procedure ItemGetDateBalance(string item,string variety,string cust,string branch,string orclass,record INVc INr,string colname,Date bdp,var val vp,Integer basecurncy)
BEGIN
  val rv;
  Date nbd,td;
  record STVc STr;
  
  if (blankdate(bdp)) then begin goto LItemGetDateBalance; end;  
  td = bdp;  
  nbd = AddDay(bdp,1);
  if (GetDay(nbd)<>1) then begin
    td = AddMonth(bdp,-1);  
    nbd = AddDay(bdp,-(GetDay(bdp)-1));    
    ItemDateTurnover(item,variety,cust,branch,orclass,colname,nbd,bdp,"",rv);
  end;
  STr.ArtCode = INr.Code;
  STr.BranchID = branch;
  STr.Class = orclass;
  STr.Variety = variety;
  vp = GetBalance(STr,colname,td);  
  if (colname<>"quant") then begin
    if (basecurncy!=0) then begin
      td = CurrentDate;  
      Base1ToBase2(vp,td,vp);
      Base1ToBase2(rv,td,rv);
    end;
  end;
  vp = rv + vp;
LItemGetDateBalance:;
  RETURN;
END;

procedure ItemGetDateStartBalance(string item,string variety,string cust,string branch,string orclass,record INVc INr,string colname,Date bdp,var val vp,Integer basecurncy)
BEGIN
  Date sbd;
  
  sbd = AddDay(bdp,-1);
  ItemGetDateBalance(item,variety,cust,branch,orclass,INr,colname,sbd,vp,basecurncy);
  RETURN;
END;

global
procedure ItemGetDateTurnover(string artcode,string variety,string custcode,string branch,string orclass,record INVc INr,string colname,Date sdp,
                              Date edp,var val res,Integer basecurncy)
BEGIN
  val v1,v2;
  
  ItemGetDateStartBalance(artcode,variety,custcode,branch,orclass,INr,colname,sdp,v1,basecurncy);
  ItemGetDateBalance(artcode,variety,custcode,branch,orclass,INr,colname,edp,v2,basecurncy);
  res = v2 - v1;
  return;
end;

global
procedure PrintArtSTRnHeader(integer detailf,date sd,date ed,string incode,string ingrps,string cucat,string cucode,integer media,
                             string depmtn,string inclass,integer basecur,boolean usedonly,boolean wholemonthf,string pricelist,
                             string locations,string branch,string orclass)
begin
  string 255 tstr;
  Integer rw;

  rw = 1;
  HT2Per(sd,ed,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (IsEnterprise) then begin
    HTBranchIDs(branch,branch,tstr);
    Header(rw,tstr,0);
  end;
  if ((ProgramType!=typFirstOffice) and (IsBooks==false)) then begin
    HTDetailLevel(detailf,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if ((nonblank(incode)) or (blank(depmtn))) then begin
    HTArtSel(incode,ingrps,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end else begin
    if (HasDepartments) then begin
      HTDepartment(depmtn,tstr);
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    if (HasItemGroups) then begin
      HTArtGroup(ingrps,tstr);
      if (nonblank(tstr)) then begin
        Header(rw,tstr,1);
        rw = rw + 1;
      end;
    end;
  end;
  if (IsEnterprise) then begin
    HTClasses(orclass,orclass,tstr);
    Header(rw,tstr,0);
  end;
  HTCusts(cucode,cucode,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (HasMultiLocations) then begin
    HTLocations(FirstInRange(locations,10),LastInRange(locations,10),tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  return;
end;

procedure GetLocationsArray(string frloc,string toloc,boolean doallf,var integer loccnt,var array string alocations,var array string alocnames)
begin
  record LocationVc Locationr;
  boolean TrHs;
  string 10 ltoloc;
  
  loccnt = 0;
  TrHs = true;
  if doallf then begin
    ltoloc = "";
    Locationr.Code = "";
  end else begin
    ltoloc = toloc;
    Locationr.Code = frloc;
  end;
  while LoopMain(Locationr,1,TrHs) begin
    if (nonblank(ltoloc)) and (Locationr.Code>ltoloc) then begin TrHs = false; end;
    if TrHs then begin
      alocations[loccnt] = Locationr.Code;
      alocnames[loccnt] = Locationr.Name;
      loccnt = loccnt+1;
    end;
  end;
  return;
end;

procedure ArtStatList2(date sd,date ed,string incode,string ingrps,string cucat,string cucode,string depmtn,
                       string inclass,integer basecur,boolean wholemonthf,string pricelist,boolean doreportjobf,
                       string locations,string branch,string orclass)

BEGIN
  record INVc INr;
  record ItemStatusVc ISr;
  record STVc STr;
  record ICSVc ICSp;
  record CCatVc CCatR;  
  val s,q,q2,sum1,sum2,sum3,gps;
  val ys,yq,ygps,t0;
  val onorder,onstock,minprice,pricelistprice;
  val tots,totq,totgps;
  val totys,totyq,totygps;
  val tottots,tottotq,tottotgps;
  val tottotys,tottotyq,tottotygps;
  val gp,ygp;
  val t;
  val tmpq,tmps,tmpgps;
  val tmpyq,tmpys,tmpygps;
  string 2 vatcode;  
  string 255 tstr,location;
  string 20 fromart,toart;
  string 255 fromgrp,togrp;
  string 255 frcat,tocat;
  string 255 frcc,tocc;
  string 255 frloc,toloc;
  string 255 oldgrp;
  string 30 ckey,lastgroup;
  Integer keys,loccnt,i;
  Boolean found;
  Boolean TrHs,stfound,testf;
  Boolean firstf,icsf;
  Boolean catflag,catfound;
  Boolean matchf,printf;
  Boolean locationf;
  Date FStartDate,FEndDate,blankd;
  record AccBlock ARAccRec;
  array string 255 alocations,alocnames;
  array val alocqty,alocs,alocgps;
  array val aylocqty,aylocs,aylocgps;
  record TaxMatrixVc TMr;
  
  if doreportjobf then begin
    StartReportJob(USetStr(2461));
    EndHeader;
  end;
  if (wholemonthf) then begin
    StartFormat(15);
     OutString(0,0,USetStr(1163),false);
    EndFormat;
    goto LArtStatList2;
  end;
  FindFiscalYear(CurrentDate,FStartDate,FEndDate);  
  if  (blankdate(FStartDate)) then begin
    FStartDate = sd;
    FEndDate = ed;
  end;
  fromart = FirstInRange(incode,20);
  toart = LastInRange(incode,20);
  frcc = FirstInRange(ingrps,5);
  tocc = LastInRange(ingrps,5);
  frcat = FirstInRange(cucat,5);
  tocat = LastInRange(cucat,5);
  frloc = FirstInRange(locations,10);
  toloc = LastInRange(locations,10);
  locationf = nonblank(locations);
  GetLocationsArray(frloc,toloc,false,loccnt,alocations,alocnames);
  printf = false;
  firstf = true;
  if (nonblank(cucode)) then begin
    icsf = true;
  end else begin
    if (nonblank(tocat)) then begin
      catflag = true;
      CCatR.Code = frcat;
      if (nonblank(CCatR.Code)) then begin
        matchf = true;
      end else begin
        matchf = false;
      end;  
      if (LoopMain(CCatR,1,matchf)==false) then begin goto LArtStatList2; end;
      if (CCatR.Code>tocat) then begin goto LArtStatList2; end;
    end;
  end;
  if (nonblank(ingrps)) then begin 
    lastgroup = frcc;
  end else begin
    lastgroup = "";
  end;  
  SetRepColBiDi(2,90,130);
  SetRepColBiDi(3,220,260);
  SetRepColBiDi(4,370,410);
  SetRepColBiDi(5,470,505);
LCCATBEGIN2:;
  if (catflag) then begin
    if (firstf) then begin firstf = false; StepBack(CCatR); end;    
    catfound = LoopMain(CCatR,1,true);
    if (catfound==false) then begin goto L882; end;
    if (CCatR.Code>tocat) then begin goto L882; end;
    StartFormat(15);
    OutString(0,0,USetStr(1114),false);
    OutString(100,0,CCatR.Code,false);
    OutString(130,0,CCatR.Comment,false);
    EndFormat;
    Gray_Divider(0,1);
    ResetLoop(INr);  
  end;
  StartFormat(15);
  HT2Per(sd,ed,tstr);
  OutString(11,0,tstr,false);
  HT2Per(FStartDate,FEndDate,tstr);
  OutString(180,0,tstr,false);
  EndFormat;
  StartFormat(15);
    OutStringAdjust(2,0,USetStr(2464),true,M4Val);
    OutStringAdjust(3,0,USetStr(2464),true,M4Val);
    OutStringAdjust(4,0,USetStr(2726),true,M4Val);
    OutStringAdjust(5,0,USetStr(2729),true,M4Val);
  EndFormat;
  StartFormat(15);
    OutStringAdjust(2,0,USetStr(2466),true,M4Val);
    OutStringAdjust(3,0,USetStr(2466),true,M4Val);
    OutStringAdjust(4,0,USetStr(2727),true,M4Val);
    OutStringAdjust(5,0,USetStr(2730),true,M4Val);
  EndFormat;
  StartFormat(15);
    OutStringAdjust(2,0,USetStr(2725),true,M4Val);
    OutStringAdjust(3,0,USetStr(2725),true,M4Val);
    OutStringAdjust(4,0,USetStr(5130),true,M4Val);
    OutStringAdjust(5,0,USetStr(2759),true,M4Val);
  EndFormat;
  if (nonblank(ingrps)) then begin 
    INr.Code = fromart;
    INr.Group = frcc;
    ckey = "Group";
    keys = 2;
  end else begin
    INr.Code = fromart;
    ckey = "Code";
    keys = 1;
  end;
  found = true;
  while (LoopKey(ckey,INr,keys,found)) begin
    testf = true;
    if (nonblank(toart)) then begin
      if (INr.Code>toart) then begin
        if (blank(ingrps)) then begin
          found=false;
        end else begin
          testf = false;
        end;
      end;
    end;      
    if (found) then begin
      if (nonblank(ingrps)) then begin
        if (INr.Group>tocc) then begin
          if (nonblank(ingrps)) then begin
            found = false;
          end else begin
            testf = false;
          end;
        end;  
        if (INr.Group<frcc) then begin
          if (nonblank(ingrps)) then begin
            found = false;
          end else begin
            testf = false;
          end;  
        end;
      end;
    end;  
    if (nonblank(inclass)) then begin
      if (SetInSet2(inclass,INr.DispGroups)==false) then begin
        testf = false;
      end;
    end;
    if (found) then begin
      if (nonblank(depmtn)) then begin      
        if (depmtn!=INr.Department) then begin
          testf = false;
        end;
      end;
    end;      
    if (found==false) then begin testf = false; end;
    if (testf) then begin
      if (nonblank(ingrps)) then begin
        if (lastgroup!=INr.Group) then begin
          gp = totgps*100;
          gp = gp/tots;
          ygp = totygps*100;
          ygp = ygp/totys;
          if (catflag==false) then begin
            Black_Divider(0,1);
            StartFormat(5);
            EndFormat;
            StartFormat(15);
            if (blank(ingrps)) then begin
              HTArts(fromart,toart,tstr);
            end else begin
              HTArtGroup(lastgroup,tstr);
            end;  
            OutString(15,0,tstr,false);
            EndFormat;
            StartFormat(5);
            EndFormat;
            StartFormat(15);
              OutVal(2,0,totq,M4Qty,true);
              OutVal(3,0,totyq,M4Qty,true);
            EndFormat;
            StartFormat(15);
              OutVal(2,0,tots,M4Val,true);
              OutVal(3,0,totys,M4Val,true);
            EndFormat;
            StartFormat(15);
              OutVal(2,0,gp,M4Val,true);
              OutVal(3,0,ygp,M4Val,true);
            EndFormat;
            tots = blankval;
            totq = blankval;
            totgps = blankval;
            totys = blankval;
            totyq = blankval;
            totygps = blankval;
          end;
          lastgroup = INr.Group;
        end;
      end;
      s = blankval;
      q = blankval;
      gps = blankval;
      ys = blankval;
      yq = blankval;
      ygps = blankval;      
      for (i=0;i<loccnt;i=i+1) begin
        alocqty[i] = blankval;
        alocs[i] = blankval;
        alocgps[i] = blankval;
        aylocqty[i] = blankval;
        aylocs[i] = blankval;
        aylocgps[i] = blankval;
      end;
      if (icsf==false) then begin
        if (catflag) then begin
          if (locationf==false) then begin
            stfound = ArtStatCUGroup2(sd,ed,basecur,INr.Code,CCatR.Code,FStartDate,FEndDate,q,s,gps,yq,ys,ygps,"",branch,orclass);
          end else begin
            for (i=0;i<loccnt;i=i+1) begin
              stfound = stfound or ArtStatCUGroup2(sd,ed,basecur,INr.Code,CCatR.Code,FStartDate,FEndDate,tmpq,tmps,tmpgps,tmpyq,tmpys,tmpygps,alocations[i],branch,orclass);
              alocqty[i] = tmpq;
              alocs[i] = tmps;
              alocgps[i] = tmpgps;
              q = q+tmpq;
              s = s+tmps;
              gps = gps+tmpgps;
              aylocqty[i] = tmpyq;
              aylocs[i] = tmpys;
              aylocgps[i] = tmpygps;
              yq = yq+tmpyq;
              ys = ys+tmpys;
              ygps = ygps+tmpygps;
            end;
          end;
        end else begin
          stfound = FindST(INr.Code,branch,orclass,STr);
          if (TestArtCodeMatch(STr.ArtCode,INr.Code)==false) then begin
            stfound = false;
          end;
          if (stfound) then begin
            if (locationf==false) then begin
              ItemGetDateTurnover(INr.Code,"","",branch,orclass,INr,"quant",sd,ed,q,basecur);
              ItemGetDateTurnover(INr.Code,"","",branch,orclass,INr,"salesexclvat",sd,ed,s,basecur);
              ItemGetDateTurnover(INr.Code,"","",branch,orclass,INr,"grossprofit",sd,ed,gps,basecur);
              ItemGetDateTurnover(INr.Code,"","",branch,orclass,INr,"quant",FStartDate,FEndDate,yq,basecur);
              ItemGetDateTurnover(INr.Code,"","",branch,orclass,INr,"salesexclvat",FStartDate,FEndDate,ys,basecur);
              ItemGetDateTurnover(INr.Code,"","",branch,orclass,INr,"grossprofit",FStartDate,FEndDate,ygps,basecur);
            end else begin
              for (i=0;i<loccnt;i=i+1) begin
                ItemGetDateTurnoverLocation(INr.Code,"","",branch,orclass,"quant",sd,ed,tmpq,basecur,alocations[i]);
                ItemGetDateTurnoverLocation(INr.Code,"","",branch,orclass,"salesexclvat",sd,ed,tmps,basecur,alocations[i]);
                ItemGetDateTurnoverLocation(INr.Code,"","",branch,orclass,"grossprofit",sd,ed,tmpgps,basecur,alocations[i]);
                alocqty[i] = tmpq;
                alocs[i] = tmps;
                alocgps[i] = tmpgps;
                q = q+tmpq;
                s = s+tmps;
                gps = gps+tmpgps;
                ItemGetDateTurnoverLocation(INr.Code,"","",branch,orclass,"quant",FStartDate,FEndDate,tmpq,basecur,alocations[i]);
                ItemGetDateTurnoverLocation(INr.Code,"","",branch,orclass,"salesexclvat",FStartDate,FEndDate,tmps,basecur,alocations[i]);
                ItemGetDateTurnoverLocation(INr.Code,"","",branch,orclass,"grossprofit",FStartDate,FEndDate,tmpgps,basecur,alocations[i]);
                aylocqty[i] = tmpq;
                aylocs[i] = tmps;
                aylocgps[i] = tmpgps;
                yq = yq+tmpq;
                ys = ys+tmps;
                ygps = ygps+tmpgps;
              end;
            end;
          end;
        end;
      end else begin
        stfound = FindICS(cucode,INr.Code,branch,orclass,ICSp);
        if (TestArtCodeMatch(ICSp.ArtCode,INr.Code)==false) then begin
          stfound = false;
        end;
        if (ICSp.CustCode<>cucode) then begin
          stfound = false;
        end;
        if (stfound==true) then begin
          if (locationf==false) then begin
            ICSp.ArtCode = INr.Code;//this will require to be changed when we allow to have stats per variety
            ICSp.Variety = "";
            GetDateTurnover(INr.Code,"",cucode,branch,orclass,ICSp,"quant",sd,ed,q,basecur);
            GetDateTurnover(INr.Code,"",cucode,branch,orclass,ICSp,"salesexclvat",sd,ed,s,basecur);
            GetDateTurnover(INr.Code,"",cucode,branch,orclass,ICSp,"grossprofit",sd,ed,gps,basecur);
            GetDateTurnover(INr.Code,"",cucode,branch,orclass,ICSp,"quant",FStartDate,FEndDate,yq,basecur);
            GetDateTurnover(INr.Code,"",cucode,branch,orclass,ICSp,"salesexclvat",FStartDate,FEndDate,ys,basecur);
            GetDateTurnover(INr.Code,"",cucode,branch,orclass,ICSp,"grossprofit",FStartDate,FEndDate,ygps,basecur);
          end else begin          
            for (i=0;i<loccnt;i=i+1) begin
              ItemGetDateTurnoverLocation(INr.Code,"",cucode,branch,orclass,"quant",sd,ed,tmpq,basecur,alocations[i]);
              ItemGetDateTurnoverLocation(INr.Code,"",cucode,branch,orclass,"salesexclvat",sd,ed,tmps,basecur,alocations[i]);
              ItemGetDateTurnoverLocation(INr.Code,"",cucode,branch,orclass,"grossprofit",sd,ed,tmpgps,basecur,alocations[i]);
              alocqty[i] = tmpq;
              alocs[i] = tmps;
              alocgps[i] = tmpgps;
              q = q+tmpq;
              s = s+tmps;
              gps = gps+tmpgps;
              ItemGetDateTurnoverLocation(INr.Code,"",cucode,branch,orclass,"quant",FStartDate,FEndDate,tmpq,basecur,alocations[i]);
              ItemGetDateTurnoverLocation(INr.Code,"",cucode,branch,orclass,"salesexclvat",FStartDate,FEndDate,tmps,basecur,alocations[i]);
              ItemGetDateTurnoverLocation(INr.Code,"",cucode,branch,orclass,"grossprofit",FStartDate,FEndDate,tmpgps,basecur,alocations[i]);
              aylocqty[i] = tmpq;
              aylocs[i] = tmps;
              aylocgps[i] = tmpgps;
              yq = yq+tmpq;
              ys = ys+tmps;
              ygps = ygps+tmpgps;
            end;
          end;
        end;
      end;
      if (stfound==true) then begin
        printf = true;
        Gray_Divider(0,1);
        StartFormat(15);
          OutString(15,0,INr.Code,false);
          OutString(150,0,INr.Name,false);
        EndFormat;
        StartFormat(10);
        EndFormat;

        tots = tots + s;
        totys = totys + ys;
        totq = totq + q;
        totyq = totyq + yq;
        totgps = totgps + gps;
        totygps = totygps + ygps;
        tottots = tottots + s;
        tottotys = tottotys + ys;
        tottotq = tottotq + q;
        tottotyq = tottotyq + yq;
        tottotgps = tottotgps + gps;
        tottotygps = tottotygps + ygps;
/*
        ISr.Code = INr.Code;
        ISr.Location = "";
        if (ReadFirstMain(ISr,1,true)) then begin
        end;        
*/        
        GetStockValue(INr.Code,"",ISr);
        onstock = ISr.Instock;
        onorder = ISr.OrddOut;
        minprice = FindCostPrice(INr.Code,"","",ISr.Instock,0,false);
        minprice = minprice/ISr.Instock;
        minprice = Round(minprice,DefaultRoundMode);
        pricelistprice = GetPriceListPrice(INr.Code,pricelist);
        if (basecur!=0) then begin
          Base1ToBase2(minprice,CurrentDate,minprice);
          Base1ToBase2(INr.InPrice,CurrentDate,INr.InPrice);
          Base1ToBase2(pricelistprice,CurrentDate,pricelistprice);
          Base1ToBase2(INr.UPrice1,CurrentDate,INr.UPrice1);
        end;
        StartFormat(15);
          OutVal(2,0,q,M4Qty,true);
          OutVal(3,0,yq,M4Qty,true);
          OutVal(4,0,INr.InPrice,M4Val,true);
          OutVal(5,0,onstock,M4Qty,true);
        EndFormat;
        StartFormat(15);
          OutVal(2,0,s,M4Val,true);
          OutVal(3,0,ys,M4Val,true);
          OutVal(4,0,minprice,M4Val,true);
          OutVal(5,0,onorder,M4Qty,true);
        EndFormat;
        gp = gps*100;
        gp = gp/s;
        ygp = ygps*100;
        ygp = ygp/ys;
        StartFormat(15);
          OutVal(2,0,gp,M4Val,true);
          OutVal(3,0,ygp,M4Val,true);
          if (ARAccRec.BasePriceInclVAT>0) then begin
            GetItemVATCode(INr.Code,0,vatcode,true);
            FindSalesExVat(TMr,vatcode,INr.UPrice1,1,0,t);
            OutVal(4,0,t,M4Val,true);
          end else begin
            OutVal(4,0,INr.UPrice1,M4Val,true);
          end;
          OutVal(5,0,pricelistprice,M4Val,true);
        EndFormat;
      end;
    end;
  end;
  if (nonblank(ingrps)) then begin
    gp = totgps*100;
    gp = gp/tots;
    ygp = totygps*100;
    gp = gp/tots;
    ygp = ygp/totys;
    if (catflag==false) then begin
      if (blank(ingrps)) then begin
        HTArts(fromart,toart,tstr);
      end else begin
        HTArtGroup(lastgroup,tstr);
      end;          
      Black_Divider(0,1);
      StartFormat(5);
      EndFormat;
      StartFormat(15);
        OutString(15,0,tstr,false);
      EndFormat;
      StartFormat(5);
      EndFormat;
      StartFormat(15);
        OutVal(2,0,totq,M4Qty,true);
        OutVal(3,0,totyq,M4Qty,true);
      EndFormat;
      StartFormat(15);
        OutVal(2,0,tots,M4Val,true);
        OutVal(3,0,totys,M4Val,true);
      EndFormat;
      StartFormat(15);
        OutVal(2,0,gp,M4Val,true);
        OutVal(3,0,ygp,M4Val,true);
      EndFormat;
    end;
  end;
  if (catflag) then begin
    Black_Divider(0,1);
    StartFormat(5);
    EndFormat;
    if (printf) then begin
      StartFormat(15);
      OutString(0,0,USetStr(1114),false);
      OutString(100,0,CCatR.Code,false);
      OutString(130,0,CCatR.Comment,false);
      EndFormat;
      StartFormat(5);
      EndFormat;
      StartFormat(15);
      OutVal(2,0,totq,M4Qty,true);
      OutVal(3,0,totyq,M4Qty,true);
      EndFormat;
      StartFormat(15);
      OutVal(2,0,tots,M4Val,true);
      OutVal(3,0,totys,M4Val,true);
      EndFormat;
      StartFormat(15);
      OutVal(2,0,gp,M4Val,true);
      OutVal(3,0,ygp,M4Val,true);
      EndFormat;
    end;
    Gray_Divider(0,1);
    StartFormat(15);
    EndFormat;
    tots = blankval;
    totq = blankval;
    totgps = blankval;
    totys = blankval;
    totyq = blankval;
    totygps = blankval;
    printf = false;
    goto LCCATBEGIN2;
  end;
L882:;
  StartFormat(10);
  EndFormat;
  Black_Divider(0,1);
  StartFormat(5);
  EndFormat;
  StartFormat(15);
  if (blank(ingrps)) then begin
    HTArts(fromart,toart,tstr);
  end else begin
    HTArtGroup(ingrps,tstr);
  end;  
  OutString(15,0,tstr,false);
  EndFormat;
  StartFormat(5);
  EndFormat;
  StartFormat(15);
    OutVal(2,0,tottotq,M4Qty,true);
    OutVal(3,0,tottotyq,M4Qty,true);
  EndFormat;
  StartFormat(15);
    OutVal(2,0,tottots,M4Val,true);
    OutVal(3,0,tottotys,M4Val,true);
  EndFormat;
  gp = tottotgps*100;
  gp = gp / tottots;
  ygp = tottotygps*100;
  ygp = ygp/tottotys;
  StartFormat(15);
    OutVal(2,0,gp,M4Val,true);
    OutVal(3,0,ygp,M4Val,true);
  EndFormat;
  Black_Divider(0,1);
LArtStatList2:;
  if doreportjobf then begin
    EndJob;
  end;
  return;
end;

global
procedure DoArtSTRn(integer detailf,date sd,date ed,string incode,string ingrps,string cucat,string cucode,integer media,
                    string depmtn,string inclass,integer basecur,boolean usedonly,boolean wholemonthf,string pricelist,
                    string locations,string branch,string orclass,boolean showlocf,boolean doreportjobf)
begin
  string 255 tstr;
  record INVc INr;
  record STVc STr;
  record ICSVc ICSp;
  record CCatVc CCatR;
  Boolean TrHs,stfound;
  val s,q,q2,sum1,sum2,sum3,gps;
  val gs1,gs2,gs3;
  val t;
  val tmpq,tmps,tmpgps;
  string 255 fromart,toart;
  string 255 fromgrp,togrp;
  string 255 frcat,tocat;
  string 255 frloc,toloc;
  string 255 oldgrp;
  string 30 ckey;
  Integer keys,loccnt,i;
  Boolean skipf,firstf;
  Boolean firstgrp;
  Boolean grpsumprntd;
  Boolean icsf;
  Boolean catflag;
  Boolean catfound;
  Boolean matchf;
  Boolean withcost,varf;
  Boolean locationf,doalllocf;
  array string 255 alocations,alocnames;
  array val alocqty,alocs,alocgps;
  string 60 sz,msk,mskrep;
  string 200 varsubset;

  withcost = true;
  if ((ProgramType==typFirstOffice) or 
      (ProgramType==typFirstOfficeSmall) or 
      (ProgramType==typFirstOfficeCurrency) or
      (IsStandardProduct) or
      (IsBooks and !ValuePack(1))) then begin withcost = false; end;
  if (detailf) then begin
     ArtStatList2(sd,ed,incode,ingrps,cucat,cucode,depmtn,inclass,basecur,wholemonthf,pricelist,doreportjobf,locations,branch,orclass);
     goto LDoArtSTRn;
  end;
  firstgrp = true;
  fromart = FirstInRange(incode,20);
  toart = LastInRange(incode,20);
  fromgrp = FirstInRange(ingrps,5);
  togrp = LastInRange(ingrps,5);
  frcat = FirstInRange(cucat,5);
  tocat = LastInRange(cucat,5);
  frloc = FirstInRange(locations,10);
  toloc = LastInRange(locations,10);

  if (nonblank(cucode)) then begin
    icsf = true;
  end else begin
    if (nonblank(tocat)) then begin
      catflag = true;
      CCatR.Code = frcat;
      if (nonblank(CCatR.Code)) then begin
        matchf = true;
      end else begin
        matchf = false;
      end;
      if (LoopMain(CCatR,1,matchf)==false) then begin goto LDoArtSTRn; end;
      if (CCatR.Code>tocat) then begin goto LDoArtSTRn; end;
      firstf = true;    
    end;
  end;
  if (doreportjobf) then begin
    StartReportJob(USetStr(2461));
    PrintArtSTRnHeader(detailf,sd,ed,incode,ingrps,cucat,cucode,media,depmtn,inclass,basecur,usedonly,wholemonthf,pricelist,locations,branch,orclass);
    EndHeader;
  end;
  SetRepCol(2,60);
  SetRepColBiDi(3,288,328);
  SetRepColBiDi(4,380,420);
  SetRepCol(5,293);
  SetRepCol(6,140);
  SetRepCol(9,221);
  SetRepCol(8,250);
  
  TrHs = true;
  locationf = nonblank(locations) or (showlocf==true);
  doalllocf = blank(locations) and (showlocf==true);
  GetLocationsArray(frloc,toloc,doalllocf,loccnt,alocations,alocnames);
LCCATBEGIN:;
  if (catflag) then begin
    if (firstf) then begin firstf = false; StepBack(CCatR); end;    
    catfound = LoopMain(CCatR,1,true);  
    if (catfound==false) then begin goto L88; end;
    if (CCatR.Code>tocat) then begin goto L88; end;
    StartFormat(15);
    OutString(0,0,USetStr(1114),false);
    OutString(100,0,CCatR.Code,false);
    OutString(130,0,CCatR.Comment,false);
    EndFormat;
    Gray_Divider(0,1);
    ResetLoop(INr);
  end;

  StartFormat(15);
   OutString(0,0,USetStr(2462),false);
   OutString(2,0,USetStr(2463),false);
//   OutString(8,0,USetStr(2465),true);
   OutStringAdjust(3,0,USetStr(2464),true,M4Val);
   if (media==mtFile) or (media==mtExcel) then begin
     OutString(100,0,"",false);
   end;
   if (withcost) then begin
     OutStringAdjust(4,0,USetStr(2468),true,M4Val);
   end;  
   if (HasModIN) then begin
     OutString(420,0,USetStr(5129),true);
   end;
   OutStringAdjustBiDi(1,0,USetStr(2466),true,M4Val,515);
  EndFormat;
  oldgrp = "";
  if (nonblank(ingrps)) then begin
    INr.Group = fromgrp;
    INr.Code = fromart;
    ckey = "Group";
    keys = 2;
  end else begin
    INr.Code = fromart;
    ckey = "Code";
    keys = 1;
  end;
  Gray_Divider(0,1);
  TrHs = true;
  while (LoopKey(ckey,INr,keys,TrHs)) begin
    skipf = false;    
    if (nonblank(toart)) then begin
      if (INr.Code>toart) then begin
        if (blank(ingrps)) then begin
          TrHs = false;
        end else begin
          skipf = true;
        end;
      end;
    end;
    if (TrHs) then begin
      if (nonblank(togrp)) then begin
        if (INr.Group>togrp) then begin
          if (nonblank(ingrps)) then begin
            TrHs = false;
          end else begin
            skipf = true;
          end;
        end;
      end;  
      if (nonblank(fromgrp)) then begin
        if (INr.Group<fromgrp) then begin
          if (nonblank(ingrps)) then begin
            TrHs = false;
          end else begin
            skipf = true;
          end;  
        end;
      end;
    end;

    if (TrHs) then begin          
      if (nonblank(depmtn)) then begin
        if (depmtn!=INr.Department) then begin skipf = true; end;
      end;  
      if (nonblank(ingrps)) then begin
        if (nonblank(fromart)) then begin
          if (INr.Code<fromart) then begin skipf = true; end;
        end;  
        if (nonblank(toart)) then begin
          if (INr.Code>toart) then begin skipf = true; end;
        end;  
      end;
      if (nonblank(inclass)) then begin
        if (SetInSet2(inclass,INr.DispGroups)==false) then begin
          skipf = true;
        end;
      end;
      if (skipf==false) then begin
        s = 0;
        q = 0;
        gps = 0;        
        for (i=0;i<loccnt;i=i+1) begin
          alocqty[i] = blankval;
          alocs[i] = blankval;
          alocgps[i] = blankval;
        end;
        if (icsf==false) then begin
          if (catflag) then begin
            if (locationf==false) then begin
              stfound = ArtStatCUGroup1(wholemonthf,sd,ed,basecur,INr.Code,CCatR.Code,q,s,gps,"",branch,orclass);
            end else begin
              for (i=0;i<loccnt;i=i+1) begin
                stfound = stfound or ArtStatCUGroup1(wholemonthf,sd,ed,basecur,INr.Code,CCatR.Code,tmpq,tmps,tmpgps,alocations[i],branch,orclass);
                alocqty[i] = tmpq;
                alocs[i] = tmps;
                alocgps[i] = tmpgps;
                q = q+tmpq;
                s = s+tmps;
                gps = gps+tmpgps;
              end;
            end;
          end else begin
            stfound = FindST(INr.Code,branch,orclass,STr);
            if (TestArtCodeMatch(STr.ArtCode,INr.Code)==false) then begin
              stfound = false;
            end;
            if (stfound==true) then begin
              if (locationf==false) then begin
                ItemGetDateTurnover(INr.Code,"","",branch,orclass,INr,"quant",sd,ed,q,basecur);
                ItemGetDateTurnover(INr.Code,"","",branch,orclass,INr,"salesexclvat",sd,ed,s,basecur);
                ItemGetDateTurnover(INr.Code,"","",branch,orclass,INr,"grossprofit",sd,ed,gps,basecur);
              end else begin
                for (i=0;i<loccnt;i=i+1) begin
                  ItemGetDateTurnoverLocation(INr.Code,"","",branch,orclass,"quant",sd,ed,tmpq,basecur,alocations[i]);
                  ItemGetDateTurnoverLocation(INr.Code,"","",branch,orclass,"salesexclvat",sd,ed,tmps,basecur,alocations[i]);
                  ItemGetDateTurnoverLocation(INr.Code,"","",branch,orclass,"grossprofit",sd,ed,tmpgps,basecur,alocations[i]);
                  alocqty[i] = tmpq;
                  alocs[i] = tmps;
                  alocgps[i] = tmpgps;
                  q = q + tmpq;
                  s = s + tmps;
                  gps = gps + tmpgps;
                end;
              end;
            end;
          end;
        end else begin
          stfound = FindICS(cucode,INr.Code,branch,orclass,ICSp);
          if (TestArtCodeMatch(ICSp.ArtCode,INr.Code)==false) then begin
            stfound = false;
          end;
          if (ICSp.CustCode<>cucode) then begin
            stfound = false;
          end;
          if (stfound==true) then begin
            if (locationf==false) then begin
              ICSp.ArtCode = INr.Code;//this will require to be changed when we allow to have stats per variety
              ICSp.Variety = "";
              GetDateTurnover(INr.Code,"",cucode,branch,orclass,ICSp,"quant",sd,ed,q,basecur);
              GetDateTurnover(INr.Code,"",cucode,branch,orclass,ICSp,"salesexclvat",sd,ed,s,basecur);
              GetDateTurnover(INr.Code,"",cucode,branch,orclass,ICSp,"grossprofit",sd,ed,gps,basecur);
            end else begin
              for (i=0;i<loccnt;i=i+1) begin
                ItemGetDateTurnoverLocation(INr.Code,"",cucode,branch,orclass,"quant",sd,ed,tmpq,basecur,alocations[i]);
                ItemGetDateTurnoverLocation(INr.Code,"",cucode,branch,orclass,"salesexclvat",sd,ed,tmps,basecur,alocations[i]);
                ItemGetDateTurnoverLocation(INr.Code,"",cucode,branch,orclass,"grossprofit",sd,ed,tmpgps,basecur,alocations[i]);
                alocqty[i] = tmpq;
                alocs[i] = tmps;
                alocgps[i] = tmpgps;
                q = q+tmpq;
                s = s+tmps;
                gps = gps+tmpgps;
              end;
            end;
          end;
        end;
        
        if (usedonly) then begin
          if ((s==0) and (q==0)) then begin 
            goto LSKIP;
          end;    
        end;
        
        if (nonblank(ingrps)) then begin
          if (oldgrp!=INr.Group) then begin
            if (firstgrp==false) then begin
              if (catflag==false) then begin
                Gray_Divider(0,1);
                StartFormat(15);
                OutString(0,0,USetStr(2474),false);
                OutString(100,0,oldgrp,false);
                OutVal(3,0,gs2,M4Val,true);
                OutVal(4,0,gs3,M4Val,true);
                OutValBiDi(1,0,gs1,M4Val,true,515);
                EndFormat;
                StartFormat(15);
                EndFormat;
                grpsumprntd = true;
                gs1 = 0;
                gs2 = 0;
                gs3 = 0;
              end;
            end;
          end;
        end;        
        varf = FindItemVAR(INr.Code,sz,msk,mskrep,varsubset);

        tstr = " ";
        tstr = INr.Unittext;
        StartFormat(15);
         if (varf) then begin
           OutString(0,"ArtSTVarDblClk",INr.Code,false);
         end else begin
           OutString(0,"DblINVc",INr.Code,false);
         end;
         OutString(2,0,INr.Name,false);
//         OutVal(8,0,GetPriceListPrice(INr.Code,RepSpec.FirstAcc),M4Val,true);
         OutVal(3,0,q,M4Qty,true);
         OutString(5,0,tstr,false);         
         if (withcost) then begin
           OutVal(4,0,gps,M4Val,true);
         end;  
         t = gps * 100;
         t = t / s;
         MakeMarginString(t,tstr);
         if (HasModIN) then begin
           OutString(420,0,tstr,true);      
         end;
         OutValBiDi(1,0,s,M4Val,true,515);
        EndFormat;
        
        //Print locations
        if locationf and showlocf then begin
          for (i=0;i<loccnt;i=i+1) begin
            if (usedonly==false) or (alocs[i]<>0) or (alocqty[i]<>0) then begin
              StartFormat(15);
              OutString(2,0,"  " & alocations[i] & " - " & alocnames[i],false);
              OutVal(3,0,alocqty[i],M4Qty,true);
              if (withcost) then begin
                OutVal(4,0,alocgps[i],M4Val,true);
              end;  
              t = alocgps[i] * 100;
              t = t / alocs[i];
              MakeMarginString(t,tstr);
              if (HasModIN) then begin
                OutString(420,0,tstr,true);      
              end;
              OutValBiDi(1,0,alocs[i],M4Val,true,515);
              EndFormat;
            end;
          end;
          Gray_Divider(0,1);
        end;
        
        sum1 = sum1 + s;
        sum2 = sum2 + q;
        sum3 = sum3 + gps;
        gs1 = gs1 + s;
        gs2 = gs2 + q;
        gs3 = gs3 + gps;
        oldgrp = INr.Group;
        firstgrp = false;      
      end;
LSKIP:;
    end;
  end;
  if (blank(ingrps)) then begin
    if (blank(toart)) then begin
      if (icsf==false) then begin
        s = 0;
        q = 0;
        gps = 0;
        if (catflag) then begin
          if (locationf==false) then begin
            stfound = ArtStatCUGroup1(wholemonthf,sd,ed,basecur,"",CCatR.Code,q,s,gps,"",branch,orclass);
          end else begin
            for (i=0;i<loccnt;i=i+1) begin
              stfound = stfound or ArtStatCUGroup1(wholemonthf,sd,ed,basecur,"",CCatR.Code,tmpq,tmps,tmpgps,alocations[i],branch,orclass);
              alocqty[i] = tmpq;
              alocs[i] = tmps;
              alocgps[i] = tmpgps;
              q = q+tmpq;
              s = s+tmps;
              gps = gps+tmpgps;
            end;
          end;
        end else begin
          stfound = FindST("",branch,orclass,STr);
          if (stfound) then begin
            INr.Code = "";
            if (locationf==false) then begin
              ItemGetDateTurnover("","","",branch,orclass,INr,"quant",sd,ed,q,basecur);
              ItemGetDateTurnover("","","",branch,orclass,INr,"salesexclvat",sd,ed,s,basecur);
              ItemGetDateTurnover("","","",branch,orclass,INr,"grossprofit",sd,ed,gps,basecur);          
            end else begin            
              for (i=0;i<loccnt;i=i+1) begin
                ItemGetDateTurnoverLocation("","","",branch,orclass,"quant",sd,ed,tmpq,basecur,alocations[i]);
                ItemGetDateTurnoverLocation("","","",branch,orclass,"salesexclvat",sd,ed,tmps,basecur,alocations[i]);
                ItemGetDateTurnoverLocation("","","",branch,orclass,"grossprofit",sd,ed,tmpgps,basecur,alocations[i]);
                alocqty[i] = tmpq;
                alocs[i] = tmps;
                alocgps[i] = tmpgps;
                q = q+tmpq;
                s = s+tmps;
                gps = gps+tmpgps;
              end;
            end;
          end;
        end;
        if ((s!=0) or (q!=0) or (gps!=0)) then begin
          StartFormat(15);
          OutString(0,0,USetStr(2467),false);
          OutVal(3,0,q,M4Qty,true);
          OutVal(4,0,gps,M4Val,true);
          OutValBiDi(1,0,s,M4Val,true,515);
          EndFormat;
        end;  
        sum1 = sum1 + s;
        sum2 = sum2 + q;
        sum3 = sum3 + gps;
      end;
    end;
  end;  
  if (icsf==true) then begin
    stfound = FindICS(cucode,"",branch,orclass,ICSp);
    if (stfound==true) then begin
      INr.Code = "";
      if (locationf==false) then begin
        GetDateTurnover(INr.Code,"",cucode,branch,orclass,ICSp,"quant",sd,ed,q,basecur);
        GetDateTurnover(INr.Code,"",cucode,branch,orclass,ICSp,"salesexclvat",sd,ed,s,basecur);
        GetDateTurnover(INr.Code,"",cucode,branch,orclass,ICSp,"grossprofit",sd,ed,gps,basecur);
      end else begin
        for (i=0;i<loccnt;i=i+1) begin
          ItemGetDateTurnoverLocation("","",cucode,branch,orclass,"quant",sd,ed,tmpq,basecur,alocations[i]);
          ItemGetDateTurnoverLocation("","",cucode,branch,orclass,"salesexclvat",sd,ed,tmps,basecur,alocations[i]);
          ItemGetDateTurnoverLocation("","",cucode,branch,orclass,"grossprofit",sd,ed,tmpgps,basecur,alocations[i]);
          alocqty[i] = tmpq;
          alocs[i] = tmps;
          alocgps[i] = tmpgps;
          q = q+tmpq;
          s = s+tmps; 
          gps = gps+tmpgps;
        end;
      end;
      StartFormat(15);
      OutString(0,0,USetStr(2467),false);
      OutVal(3,0,q,M4Qty,true);
      OutVal(4,0,gps,M4Val,true);
      OutValBiDi(1,0,s,M4Val,true,515);
      EndFormat;
      sum1 = sum1 + s;
      sum2 = sum2 + q;
      sum3 = sum3 + gps;
    end;
  end;  
  if (catflag) then begin
    Gray_Divider(0,1);
    StartFormat(15);
    OutVal(3,0,gs2,M4Val,true);
    OutVal(4,0,gs3,M4Val,true);
    OutValBiDi(1,0,gs1,M4Val,true,515);
    gs1 = 0;
    gs2 = 0;
    gs3 = 0;
    EndFormat;
    StartFormat(15);
    EndFormat;
    goto LCCATBEGIN;
  end;  
L88:;
  if (grpsumprntd) then begin
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(0,0,USetStr(2474),false);
    OutString(100,0,oldgrp,false);
    OutVal(3,0,gs2,M4Val,true);
    OutVal(4,0,gs3,M4Val,true);
    OutValBiDi(1,0,gs1,M4Val,true,515);
    EndFormat;
    StartFormat(10);
    EndFormat;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  if (media==mtFile) or (media==mtExcel) then begin
    OutString(100,0,"",false);
    OutString(100,0,"",false);
  end;
  OutVal(3,0,sum2,M4Val,true);
  if (media==mtFile) or (media==mtExcel) then begin
    OutString(100,0,"",false);
  end;
  if (withcost) then begin
    OutVal(4,0,sum3,M4Val,true);
  end;  
  if (media==mtFile) or (media==mtExcel) then begin
    OutString(100,0,"",false);
  end;
  OutValBiDi(1,0,sum1,M4Val,true,515);
  EndFormat;
  if doreportjobf then begin
    EndJob;
  end;
LDoArtSTRn:;  
  return;
end;

global
procedure ArtSTRn(record RcVc RepSpec)
begin
  DoArtSTRn(RepSpec.ArtMode,RepSpec.sStartDate,RepSpec.sEndDate,RepSpec.f1,RepSpec.f3,RepSpec.ObjStr,
            RepSpec.f2,RepSpec.Media,RepSpec.AccStr,RepSpec.f4,RepSpec.basecurncy,RepSpec.UsedOnly==1,
            RepSpec.wholemonthf==0,RepSpec.FirstAcc,RepSpec.f5,RepSpec.f6,RepSpec.LastAcc,RepSpec.flags[1]==1,true);
  return;
end;
