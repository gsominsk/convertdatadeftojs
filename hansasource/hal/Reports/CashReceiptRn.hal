external procedure BeginCurncyTotals(var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean GetPMRow(string,var row PMBlock);
external procedure HT2Per(Date, Date,var string);

procedure AddToOrderClassArray(Array string aorderclass,Array val aorderclasssum,var Integer orderclasscnt,string oderclass,val sum)
begin
  Integer i;
  
  for (i=0;i<orderclasscnt;i=i+1) begin
    if (oderclass==aorderclass[i]) then begin
      aorderclasssum[i] = aorderclasssum[i] + sum;
      goto LAddToOrderClassArray;
    end;
  end;
  aorderclass[orderclasscnt] = oderclass;
  aorderclasssum[orderclasscnt] = sum;
  orderclasscnt = orderclasscnt + 1;
LAddToOrderClassArray:;  
  return;
end;

procedure PrintOrderClassArray(Array string aorderclass,Array val aorderclasssum,Integer orderclasscnt)
begin
  Integer i;

  StartFormat(15);
  EndFormat;
  StartFormat(15);
   OutString(300,0,USetStr(17500),false);
   OutString(1,0,USetStr(17496),true);
  EndFormat;
  Gray_Divider(0,1);
  for (i=0;i<orderclasscnt;i=i+1) begin
    StartFormat(15);
     OutString(300,0,aorderclass[i],false);
     OutVal(1,0,aorderclasssum[i],M4Val,true);
    EndFormat;
  end;
  return;
end;

procedure AddToToPayModeVector(string pmmode,val sumb1,val sum,Array string apmmodes,Array val apmmodesumb1,Array val apmmodesum,Integer acnt)
begin
  Integer i;
    
  for (i=0;i<acnt;i=i+1) begin
    if (pmmode==apmmodes[i]) then begin
      apmmodesum[i] = apmmodesum[i] + sum;
      apmmodesumb1[i] = apmmodesumb1[i] + sumb1;
      goto LAddToToPayModeVector;
    end;
  end;
  apmmodes[acnt] = pmmode;
  apmmodesum[acnt] = sum;
  apmmodesumb1[acnt] = sumb1;
LAddToToPayModeVector:;  
  return;
end;

procedure AddReceiptsToPayModeVector(record RcVc RepSpec,record DefCashBlock DCb,
                                    Integer acnt,Array string apmmodes,Array val apmmodesumb1,Array val apmmodesum,var val totipsumb1,var val totipsum,
                                    var Integer curcnt,Array val av1,Array string acur)
begin
  record IPVc IPr;
  row IPVc IPrw;
  Integer i,rwcnt;
  Boolean found,testf;
  string 255 pmmode;
  val b1v;

  found = true;
  IPr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",IPr,1,found)) begin
    if (IPr.TransDate>RepSpec.sEndDate) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (IPr.OKFlag==0) then begin testf = false; end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (IPr.MachineName!=RepSpec.AccStr) then begin testf = false; end;
      end;
      if (testf) then begin
        rwcnt = MatRowCnt(IPr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IPr,i,IPrw);
          switch (IPrw.stp) begin
            case 1:
              testf = true;
              if (nonblank(IPrw.PayMode)) then begin
                pmmode = IPrw.PayMode;
              end else begin
                pmmode = IPr.PayMode;
              end;                
              if (nonblank(RepSpec.FirstAcc)) then begin
                if (pmmode!=RepSpec.FirstAcc) then begin testf = false; end; 
              end;
              if (testf) then begin
                b1v = MulWithRateToBase1(IPrw.RecCurncy,IPr.TransDate,IPrw.RecVal,DefaultCurRoundOff);   
                AddToToPayModeVector(pmmode,b1v,IPrw.RecVal,apmmodes,apmmodesumb1,apmmodesum,acnt);
                totipsum = totipsum + IPrw.RecVal;
                totipsumb1 = totipsumb1 + b1v;
                AddCurncyTotals(acur,av1,curcnt,IPrw.RecCurncy,IPrw.RecVal);
              end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure AddInvoicesToPayModeVector(record RcVc RepSpec,record DefCashBlock DCb,
                                     Integer acnt,Array string apmmodes,Array val apmmodesumb1,Array val apmmodesum,
                                     var val totivb1sum,var val totivsum,var val totdownsum,
                                     Array string aorderclass,Array val aorderclasssum,var Integer orderclasscnt,
                                     var Integer curcnt,Array val av1,Array string acur)
begin
  record IVVc orgIVr;
  record IVVc IVr;
  record ORVc ORr;
  row IVVc IVrw;
  Integer i,rwcnt;
  Boolean found,testf,downpayf;
  val sign,b1v;
  string 255 pmmode,cashpmmode;
  
  found = true;
  IVr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",IVr,1,found)) begin
    if (IVr.TransDate>RepSpec.sEndDate) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (IVr.OKFlag==0) then begin testf = false; end;
      if (IVr.Invalid!=0) then begin testf = false; end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (IVr.MachineName!=RepSpec.AccStr) then begin testf = false; end;
      end;
      if (testf) then begin
        sign = 1;
        pmmode = "";
        downpayf = false;
        switch (IVr.InvType) begin
          case kInvoiceTypeCreditSpecialSales: 
            goto LkInvoiceTypeCredit;
          case kInvoiceTypeCredit:
LkInvoiceTypeCredit:;
            sign = -1;
            orgIVr.SerNr = IVr.CredInv;
            if (ReadFirstMain(orgIVr,1,true)) then begin
            end;
          case kInvoiceTypeDownpayment:
            downpayf = true;
        end;   
        if (downpayf) then begin
          ORr.SerNr = IVr.OrderNr;
          if (ReadFirstMain(ORr,1,true)) then begin
          end;
        end;
        
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          testf = false;
          switch (IVrw.stp) begin
            case kInvoiceRowTypeGiftVoucherPayment:
              if (nonblank(IVrw.PayMode)) then begin
                pmmode = IVrw.PayMode;
              end else begin
                pmmode = DCb.DefGCRPayMode;
              end;                
              testf = true;
            case kInvoiceRowTypeLoyaltyPointsPayment:
              if (nonblank(IVrw.PayMode)) then begin
                pmmode = IVrw.PayMode;
              end else begin
                pmmode = DCb.DefCashPayMode;
              end;
              cashpmmode = pmmode;
              testf = true;
            case kInvoiceRowTypeCashPayment:
              if (nonblank(IVrw.PayMode)) then begin
                pmmode = IVrw.PayMode;
              end else begin
                pmmode = DCb.DefCashPayMode;
              end;
              cashpmmode = pmmode;
              testf = true;
            case kInvoiceRowTypeCreditCardPayment:
              if (nonblank(IVrw.PayMode)) then begin
                pmmode = IVrw.PayMode;
              end else begin
                pmmode = DCb.DefCCPayMode;
              end;                
              testf = true;
            case kInvoiceRowTypeDownpayment:
            case kInvoiceRowTypeChequePayment:
              if (nonblank(IVrw.PayMode)) then begin
                pmmode = IVrw.PayMode;
              end else begin
                pmmode = DCb.DefCCPayMode;
              end;                
              testf = true;          
          end;
          if (nonblank(RepSpec.FirstAcc)) then begin
            if (nonblank(pmmode)) then begin
              if (pmmode!=RepSpec.FirstAcc) then begin testf = false; end;
            end;
          end;
          if (testf) then begin
            b1v = MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            AddToToPayModeVector(pmmode,sign*b1v,sign*IVrw.Sum,apmmodes,apmmodesumb1,apmmodesum,acnt);
            if (downpayf) then begin
              AddToOrderClassArray(aorderclass,aorderclasssum,orderclasscnt,ORr.OrderClass,sign*IVrw.Sum);
              totdownsum = totdownsum + sign*IVrw.Sum;
              AddCurncyTotals(acur,av1,curcnt,IVr.CurncyCode,IVrw.Sum);
            end else begin
              totivsum = totivsum + sign*IVrw.Sum;
              totivb1sum = totivb1sum + sign*b1v;
              AddCurncyTotals(acur,av1,curcnt,IVrw.CurncyCode,IVrw.Sum);
            end;
          end;
        end;        

//         b1v = MulRateToBase1(IVr.CurncyCode,IVr.RetnValue,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
//         AddToToPayModeVector(pmmode,-(sign*b1v),-(sign*IVr.RetnValue),apmmodes,apmmodesumb1,apmmodesum,acnt);
//         if (downpayf) then begin
//           AddToOrderClassArray(aorderclass,aorderclasssum,orderclasscnt,ORr.OrderClass,-(sign*IVr.RetnValue));
//          totdownsum = totdownsum - sign*IVr.RetnValue;
//         end;

      end;
    end;
  end;
  
  return;
end;

procedure AddPOSInvoicesToPayModeVector(record RcVc RepSpec,record DefCashBlock DCb,
                                     Integer acnt,Array string apmmodes,Array val apmmodesumb1,Array val apmmodesum,
                                     var val totivb1sum,var val totivsum,var val totdownsum,
                                     Array string aorderclass,Array val aorderclasssum,var Integer orderclasscnt,
                                     var Integer curcnt,Array val av1,Array string acur)
begin
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  Boolean found,testf;
  val sign,b1v;
  string 255 pmmode,cashpmmode;
  
  found = true;
  IVCashr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",IVCashr,1,found)) begin
    if (IVCashr.TransDate>RepSpec.sEndDate) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (IVCashr.OKFlag==0) then begin testf = false; end;
      if (IVCashr.Invalid!=0) then begin testf = false; end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (IVCashr.LocalMachineCode!=RepSpec.AccStr) then begin testf = false; end;
      end;
      if (testf) then begin
        sign = 1;
        pmmode = DCb.DefCashPayMode;
        if (nonblank(RepSpec.FirstAcc)) then begin
          if (DCb.DefCashPayMode==RepSpec.FirstAcc) then begin
            b1v = MulRateToBase1(IVCashr.CurncyCode,IVCashr.CashValue,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
            AddToToPayModeVector(DCb.DefCashPayMode,sign*b1v,sign*IVCashr.CashValue,apmmodes,apmmodesumb1,apmmodesum,acnt);
            totivb1sum = totivb1sum + sign*b1v;
            AddCurncyTotals(acur,av1,curcnt,IVCashr.CurncyCode,IVCashr.CashValue);
          end;
          if (IVCashr.PayDeal==RepSpec.FirstAcc) then begin
            b1v = MulRateToBase1(IVCashr.CurncyCode,IVCashr.RecValue,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
            AddToToPayModeVector(IVCashr.PayDeal,sign*b1v,sign*IVCashr.RecValue,apmmodes,apmmodesumb1,apmmodesum,acnt);
            totivb1sum = totivb1sum + sign*b1v;
            AddCurncyTotals(acur,av1,curcnt,IVCashr.CurncyCode,IVCashr.RecValue);
          end;
          if (IVCashr.PayDeal2==RepSpec.FirstAcc) then begin
            b1v = MulRateToBase1(IVCashr.CurncyCode,IVCashr.RecValue2,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
            AddToToPayModeVector(IVCashr.PayDeal2,sign*b1v,sign*IVCashr.RecValue2,apmmodes,apmmodesumb1,apmmodesum,acnt);
            totivb1sum = totivb1sum + sign*b1v;
            AddCurncyTotals(acur,av1,curcnt,IVCashr.CurncyCode,IVCashr.RecValue2);
          end;
        end else begin
          b1v = MulRateToBase1(IVCashr.CurncyCode,IVCashr.CashValue,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
          AddToToPayModeVector(DCb.DefCashPayMode,sign*b1v,sign*IVCashr.CashValue,apmmodes,apmmodesumb1,apmmodesum,acnt);
          totivb1sum = totivb1sum + sign*b1v;
          AddCurncyTotals(acur,av1,curcnt,IVCashr.CurncyCode,IVCashr.CashValue);

          b1v = MulRateToBase1(IVCashr.CurncyCode,IVCashr.RecValue,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
          AddToToPayModeVector(IVCashr.PayDeal,sign*b1v,sign*IVCashr.RecValue,apmmodes,apmmodesumb1,apmmodesum,acnt);
          totivb1sum = totivb1sum + sign*b1v;
          AddCurncyTotals(acur,av1,curcnt,IVCashr.CurncyCode,IVCashr.RecValue);
          
          b1v = MulRateToBase1(IVCashr.CurncyCode,IVCashr.RecValue2,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
          AddToToPayModeVector(IVCashr.PayDeal2,sign*b1v,sign*IVCashr.RecValue2,apmmodes,apmmodesumb1,apmmodesum,acnt);
          totivb1sum = totivb1sum + sign*b1v;
          AddCurncyTotals(acur,av1,curcnt,IVCashr.CurncyCode,IVCashr.RecValue2);
        end;
        rwcnt = MatRowCnt(IVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVCashr,i,IVCashrw);
          testf = false;
          switch (IVCashrw.stp) begin
            case kInvoiceRowTypeGiftVoucherPayment:
              if (nonblank(IVCashrw.PayMode)) then begin
                pmmode = IVCashrw.PayMode;
              end else begin
                pmmode = DCb.DefGCRPayMode;
              end;                
              testf = true;
            case kInvoiceRowTypeLoyaltyPointsPayment:
              if (nonblank(IVCashrw.PayMode)) then begin
                pmmode = IVCashrw.PayMode;
              end else begin
                pmmode = DCb.DefCashPayMode;
              end;
              cashpmmode = pmmode;
              testf = true;
            case kInvoiceRowTypeCashPayment:
              if (nonblank(IVCashrw.PayMode)) then begin
                pmmode = IVCashrw.PayMode;
              end else begin
                pmmode = DCb.DefCashPayMode;
              end;
              cashpmmode = pmmode;
              testf = true;
            case kInvoiceRowTypeCreditCardPayment:
              if (nonblank(IVCashrw.PayMode)) then begin
                pmmode = IVCashrw.PayMode;
              end else begin
                pmmode = DCb.DefCCPayMode;
              end;                
              testf = true;
            case kInvoiceRowTypeDownpayment:
            case kInvoiceRowTypeChequePayment:
              if (nonblank(IVCashrw.PayMode)) then begin
                pmmode = IVCashrw.PayMode;
              end else begin
                pmmode = DCb.DefCCPayMode;
              end;                
              testf = true;          
          end;
          if (nonblank(RepSpec.FirstAcc)) then begin
            if (nonblank(pmmode)) then begin
              if (pmmode!=RepSpec.FirstAcc) then begin testf = false; end;
            end;
          end;
          if (testf) then begin
            b1v = MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);
            AddToToPayModeVector(pmmode,sign*b1v,sign*IVCashrw.Sum,apmmodes,apmmodesumb1,apmmodesum,acnt);
            totivsum = totivsum + sign*IVCashr.Sum4;
            totivb1sum = totivb1sum + sign*b1v;
            AddCurncyTotals(acur,av1,curcnt,IVCashrw.CurncyCode,IVCashrw.Sum);
          end;
        end;        
        b1v = MulRateToBase1(IVCashr.CurncyCode,IVCashr.RetValue,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
        AddToToPayModeVector(pmmode,-(sign*b1v),-(sign*IVCashr.RetValue),apmmodes,apmmodesumb1,apmmodesum,acnt);
        AddCurncyTotals(acur,av1,curcnt,IVCashrw.CurncyCode,-(sign*IVCashr.RetValue));
        totivb1sum = totivb1sum - sign*b1v;
      end;
    end;
  end;
  
  return;
end;

procedure AddBarTabsToPayModeVector(record RcVc RepSpec,record DefCashBlock DCb,
                                     Integer acnt,Array string apmmodes,Array val apmmodesumb1,Array val apmmodesum,
                                     var val totbartabb1sum,var val totbartabsum,var val totdownsum,
                                     Array string aorderclass,Array val aorderclasssum,var Integer orderclasscnt,
                                     var Integer curcnt,Array val av1,Array string acur)
begin
  record RestAccVc orgRestAccr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  Integer i,rwcnt;
  Boolean found,testf;
  val sign,b1v;
  string 255 pmmode,cashpmmode;
  
  found = true;
  RestAccr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",RestAccr,1,found)) begin
    if (RestAccr.TransDate>RepSpec.sEndDate) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (RestAccr.Closed!=1) then begin testf = false; end;
      if (RestAccr.Invalid!=0) then begin testf = false; end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (RestAccr.MachineName!=RepSpec.AccStr) then begin testf = false; end;
      end;
      if (testf) then begin
        sign = 1;
        pmmode = "";
        rwcnt = MatRowCnt(RestAccr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(RestAccr,i,RestAccrw);
          testf = false;
          switch (RestAccrw.stp) begin
            case kInvoiceRowTypeGiftVoucherPayment:
              if (nonblank(RestAccrw.PayMode)) then begin
                pmmode = RestAccrw.PayMode;
              end else begin
                pmmode = DCb.DefGCRPayMode;
              end;                
              testf = true;
            case kInvoiceRowTypeLoyaltyPointsPayment:
              if (nonblank(RestAccrw.PayMode)) then begin
                pmmode = RestAccrw.PayMode;
              end else begin
                pmmode = DCb.DefCashPayMode;
              end;
              cashpmmode = pmmode;
              testf = true;
            case kInvoiceRowTypeCashPayment:
              if (nonblank(RestAccrw.PayMode)) then begin
                pmmode = RestAccrw.PayMode;
              end else begin
                pmmode = DCb.DefCashPayMode;
              end;
              cashpmmode = pmmode;
              testf = true;
            case kInvoiceRowTypeCreditCardPayment:
              if (nonblank(RestAccrw.PayMode)) then begin
                pmmode = RestAccrw.PayMode;
              end else begin
                pmmode = DCb.DefCCPayMode;
              end;                
              testf = true;
            case kInvoiceRowTypeDownpayment:
            case kInvoiceRowTypeChequePayment:
              if (nonblank(RestAccrw.PayMode)) then begin
                pmmode = RestAccrw.PayMode;
              end else begin
                pmmode = DCb.DefCCPayMode;
              end;                
              testf = true;          
          end;
          if (nonblank(RepSpec.FirstAcc)) then begin
            if (nonblank(pmmode)) then begin
              if (pmmode!=RepSpec.FirstAcc) then begin testf = false; end;
            end;
          end;
          if (testf) then begin
            b1v = MulRateToBase1(RestAccrw.CurncyCode,RestAccrw.Sum,RestAccrw.FrRate,RestAccrw.ToRateB1,RestAccrw.ToRateB2,RestAccrw.BaseRate1,RestAccrw.BaseRate2,DefaultCurRoundOff);
            AddToToPayModeVector(pmmode,sign*b1v,sign*RestAccrw.Sum,apmmodes,apmmodesumb1,apmmodesum,acnt);
              totbartabsum = totbartabsum + sign*RestAccr.Sum4;
              totbartabb1sum = totbartabb1sum + sign*b1v;
              AddCurncyTotals(acur,av1,curcnt,RestAccrw.CurncyCode,RestAccrw.Sum);
          end;
        end;        
        //b1v = MulRateToBase1(RestAccr.CurncyCode,RestAccr.RetnValue,RestAccr.FrRate,RestAccr.ToRateB1,RestAccr.ToRateB2,RestAccr.BaseRate1,RestAccr.BaseRate2,DefaultCurRoundOff);
        b1v = RestAccr.RetValue;
        AddToToPayModeVector(pmmode,-(sign*b1v),-(sign*RestAccr.RetValue),apmmodes,apmmodesumb1,apmmodesum,acnt);
      end;
    end;
  end;
  
  return;
end;
procedure AddBarTabRowToPayModeArray(record IVVc IVarray,record RestAccVc RestAccr,row RestAccVc RestAccrw,string paymode)
begin
  row IVVc IVarrayrw;
  
  ClearRow(IVarray,IVarrayrw,1);
  IVarrayrw.Comment = "DblRestAccVc";
  IVarrayrw.PayMode = paymode;
  IVarrayrw.ServiceDelDate = RestAccr.TransDate;
  IVarrayrw.Spec = RestAccr.Addr0;
  IVarrayrw.CUServiceHistNr = RestAccr.SerNr;
  IVarrayrw.SerialNr = USetStr(17506);
  IVarrayrw.NotUpdStockFlag = 0;
  IVarrayrw.Sum = RestAccrw.Sum;
  IVarrayrw.CurncyCode = RestAccrw.CurncyCode;
  IVarrayrw.BasePrice = MulRateToBase1(RestAccrw.CurncyCode,RestAccrw.Sum,RestAccrw.FrRate,RestAccrw.ToRateB1,RestAccrw.ToRateB2,RestAccrw.BaseRate1,RestAccrw.BaseRate2,DefaultCurRoundOff);
  MatRowPut(IVarray,MatRowCnt(IVarray),IVarrayrw);
  return;
end;

procedure AddBarTabsToPayModeArray(record RcVc RepSpec,record IVVc IVarray,var val totbartabb1sum,var val totbartabsum,var val totdownsum,
                                    Array string aorderclass,Array val aorderclasssum,var Integer orderclasscnt,var Integer curcnt,Array val av1,Array string acur)
begin
  record RestAccVc orgRestAccr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  Integer i,rwcnt;
  Boolean found,testf,downpayf;
  val sign,ivpaysum;
  string 255 pmmode;
  
  found = true;
  RestAccr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",RestAccr,1,found)) begin
    if (RestAccr.TransDate>RepSpec.sEndDate) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (RestAccr.Closed!=1) then begin testf = false; end;
      if (RestAccr.Invalid!=0) then begin testf = false; end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (RestAccr.MachineName!=RepSpec.AccStr) then begin testf = false; end;
      end;
      if (testf) then begin
        sign = 1;
        ivpaysum = 0;  
        pmmode = "";
        downpayf = false;        
        rwcnt = MatRowCnt(RestAccr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(RestAccr,i,RestAccrw);
          RestAccrw.Sum = sign*RestAccrw.Sum;
          testf = true;
          if (nonblank(RepSpec.FirstAcc)) then begin
            if (RestAccrw.PayMode!=RepSpec.FirstAcc) then begin testf = false; end; 
          end;
          if (testf) then begin
            switch (RestAccrw.stp) begin
              case kInvoiceRowTypeGiftVoucherPayment:
                ivpaysum = ivpaysum + sign*RestAccrw.Sum;
                AddBarTabRowToPayModeArray(IVarray,RestAccr,RestAccrw,RestAccrw.PayMode);
                totbartabsum = totbartabsum + RestAccrw.Sum;
                totbartabb1sum = totbartabb1sum + MulRateToBase1(RestAccrw.CurncyCode,RestAccrw.Sum,RestAccrw.FrRate,RestAccrw.ToRateB1,RestAccrw.ToRateB2,RestAccrw.BaseRate1,RestAccrw.BaseRate2,DefaultCurRoundOff);
                AddCurncyTotals(acur,av1,curcnt,RestAccrw.CurncyCode,RestAccrw.Sum);
              case kInvoiceRowTypeLoyaltyPointsPayment:
                RestAccrw.Sum = RestAccrw.Sum - RestAccr.RetValue;
                ivpaysum = ivpaysum + sign*RestAccrw.Sum;
                AddBarTabRowToPayModeArray(IVarray,RestAccr,RestAccrw,RestAccrw.PayMode);
                totbartabsum = totbartabsum + RestAccrw.Sum;
                totbartabb1sum = totbartabb1sum + MulRateToBase1(RestAccrw.CurncyCode,RestAccrw.Sum,RestAccrw.FrRate,RestAccrw.ToRateB1,RestAccrw.ToRateB2,RestAccrw.BaseRate1,RestAccrw.BaseRate2,DefaultCurRoundOff);
                AddCurncyTotals(acur,av1,curcnt,RestAccrw.CurncyCode,RestAccrw.Sum);
              case kInvoiceRowTypeCashPayment:
                RestAccrw.Sum = RestAccrw.Sum - RestAccr.RetValue;
                ivpaysum = ivpaysum + sign*RestAccrw.Sum;
                AddBarTabRowToPayModeArray(IVarray,RestAccr,RestAccrw,RestAccrw.PayMode);
                totbartabsum = totbartabsum + RestAccrw.Sum;
                totbartabb1sum = totbartabb1sum + MulRateToBase1(RestAccrw.CurncyCode,RestAccrw.Sum,RestAccrw.FrRate,RestAccrw.ToRateB1,RestAccrw.ToRateB2,RestAccrw.BaseRate1,RestAccrw.BaseRate2,DefaultCurRoundOff);
                AddCurncyTotals(acur,av1,curcnt,RestAccrw.CurncyCode,RestAccrw.Sum);
              case kInvoiceRowTypeCreditCardPayment:
                ivpaysum = ivpaysum + sign*RestAccrw.Sum;
                AddBarTabRowToPayModeArray(IVarray,RestAccr,RestAccrw,RestAccrw.PayMode);
                totbartabsum = totbartabsum + RestAccrw.Sum;
                totbartabb1sum = totbartabb1sum + MulRateToBase1(RestAccrw.CurncyCode,RestAccrw.Sum,RestAccrw.FrRate,RestAccrw.ToRateB1,RestAccrw.ToRateB2,RestAccrw.BaseRate1,RestAccrw.BaseRate2,DefaultCurRoundOff);
                AddCurncyTotals(acur,av1,curcnt,RestAccrw.CurncyCode,RestAccrw.Sum);
              case kInvoiceRowTypeChequePayment:
                ivpaysum = ivpaysum + sign*RestAccrw.Sum;
                AddBarTabRowToPayModeArray(IVarray,RestAccr,RestAccrw,RestAccrw.PayMode);
                totbartabsum = totbartabsum + RestAccrw.Sum;
                totbartabb1sum = totbartabb1sum + MulRateToBase1(RestAccrw.CurncyCode,RestAccrw.Sum,RestAccrw.FrRate,RestAccrw.ToRateB1,RestAccrw.ToRateB2,RestAccrw.BaseRate1,RestAccrw.BaseRate2,DefaultCurRoundOff);
                AddCurncyTotals(acur,av1,curcnt,RestAccrw.CurncyCode,RestAccrw.Sum);
            end;            
          end;
        end;        
      end;
    end;
  end;
  return;
end;

procedure PrintPayModeVector(Integer acnt,Array string apmmodes,Array string apmmodenames,Array val apmmodesumb1,Array val apmmodesum,val totivb1sum,val totivsum,val totivcashb1sum,val totivcashsum,val totdownsum,val totipsumb1,val totipsum,val totbartabb1sum,val totbartabsum)
begin
  Boolean found;
  Integer i;
  val tot;

  for (i=0;i<acnt;i=i+1) begin
    if (apmmodesum[i]!=0) then begin
      StartFormat(15);
       OutString(0,0,apmmodenames[i],false);
//       OutVal(410,0,apmmodesum[i],M4Val,true);
       OutVal(1,0,apmmodesumb1[i],M4Val,true);
      EndFormat;
      tot = tot + apmmodesumb1[i];
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
   OutString(300,0,USetStr(17486),false);
   OutVal(1,0,totivb1sum,M4Val,true);
  EndFormat;
  StartFormat(15);
   OutString(300,0,USetStr(17503),false);
   OutVal(1,0,totivcashb1sum,M4Val,true);
  EndFormat;
  StartFormat(15);
   OutString(300,0,USetStr(17507),false);
   OutVal(1,0,totbartabb1sum,M4Val,true);
  EndFormat;
  StartFormat(15);
   OutString(300,0,USetStr(17487),false);
   OutVal(1,0,totipsumb1,M4Val,true);
  EndFormat;
  StartFormat(15);
   OutString(300,0,USetStr(17488),false);
   OutVal(1,0,totdownsum,M4Val,true);
  EndFormat;
  Gray_Divider(0,1);
  StartFormat(15);
   OutString(300,0,USetStr(17489),false);
   OutVal(1,0,tot,M4Val,true);
  EndFormat;
  return;
end;

procedure InitPMArray(record PMBlock PMb,Array string apmmodes,Array string apmmodenames,Array val apmmodesumb1,Array val apmmodesum)
begin
  row PMBlock PMrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(PMb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PMb,i,PMrw);
    apmmodes[i] = PMrw.Code;
    apmmodenames[i] = PMrw.Comment;
    apmmodesum[i] = blankval;
    apmmodesumb1[i] = blankval;
  end;
  return;
end;

procedure CashReceipt_Overview(record RcVc RepSpec,var Integer curcnt)
begin
  record DefCashBlock DCb;
  record PMBlock PMb;
  Array string 255 apmmodes;
  Array string 255 apmmodenames;
  Array val apmmodesumb1;
  Array val apmmodesum;
  val totivsum,totivb1sum,totivcashsum,totivcashb1sum,totipsumb1,totipsum,totdownsum;
  Array string 255 aorderclass;
  Array val aorderclasssum;
  Integer orderclasscnt;
  array val av1,av2,av3;
  array string 20 acur;
  val totbartabb1sum,totbartabsum;
  
  BlockLoad(DCb);
  BlockLoad(PMb);
  InitPMArray(PMb,apmmodes,apmmodenames,apmmodesumb1,apmmodesum);
  AddInvoicesToPayModeVector(RepSpec,DCb,MatRowCnt(PMb),apmmodes,apmmodesumb1,apmmodesum,totivb1sum,totivsum,totdownsum,aorderclass,aorderclasssum,orderclasscnt,curcnt,av1,acur);
  AddPOSInvoicesToPayModeVector(RepSpec,DCb,MatRowCnt(PMb),apmmodes,apmmodesumb1,apmmodesum,totivcashb1sum,totivcashsum,totdownsum,aorderclass,aorderclasssum,orderclasscnt,curcnt,av1,acur);
  AddBarTabsToPayModeVector(RepSpec,DCb,MatRowCnt(PMb),apmmodes,apmmodesumb1,apmmodesum,totbartabb1sum,totbartabsum,totdownsum,aorderclass,aorderclasssum,orderclasscnt,curcnt,av1,acur);
  AddReceiptsToPayModeVector(RepSpec,DCb,MatRowCnt(PMb),apmmodes,apmmodesumb1,apmmodesum,totipsumb1,totipsum,curcnt,av1,acur);
  PrintPayModeVector(MatRowCnt(PMb),apmmodes,apmmodenames,apmmodesumb1,apmmodesum,totivb1sum,totivsum,totivcashb1sum,totivcashsum,totdownsum,totipsumb1,totipsum,totbartabb1sum,totbartabsum);
  Gray_Divider(300,1);
  StartFormat(15);
   OutString(300,0,USetStr(1185),false);
   OutString(1,0,USetStr(17496),true);
  EndFormat;
  Gray_Divider(300,1);
  PrintCurncyTotals(acur,av1,av2,av3,curcnt,1,-1,-1,300,false,RepSpec.PocketPC);
  PrintOrderClassArray(aorderclass,aorderclasssum,orderclasscnt);
  return;
end;

procedure AddInvoiceRowToPayModeArray(record IVVc IVarray,record IVVc IVr,row IVVc IVrw,string paymode,Boolean dpf)
begin
  row IVVc IVarrayrw;
  
  ClearRow(IVarray,IVarrayrw,1);
  IVarrayrw.Comment = "DblIVVc";
  IVarrayrw.PayMode = paymode;
  IVarrayrw.ServiceDelDate = IVr.TransDate;
  IVarrayrw.Spec = IVr.Addr0;
  IVarrayrw.CUServiceHistNr = IVr.SerNr;
//   if (dpf==false) then begin
//     IVarrayrw.SerialNr = USetStr(17491); //Receipt
//     IVarrayrw.NotUpdStockFlag = 1;
//   end else begin
    IVarrayrw.SerialNr = USetStr(17501); // Invoice
    IVarrayrw.NotUpdStockFlag = 0;
//   end;
  IVarrayrw.Sum = IVrw.Sum;
  IVarrayrw.CurncyCode = IVrw.CurncyCode;
  IVarrayrw.BasePrice = MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
  MatRowPut(IVarray,MatRowCnt(IVarray),IVarrayrw);
  return;
end;

procedure AddReceiptRowToPayModeArray(record IVVc IVarray,record IPVc IPr,row IPVc IPrw,string paymode)
begin
  row IVVc IVarrayrw;
  
  ClearRow(IVarray,IVarrayrw,1);
  IVarrayrw.Comment = "DblIPVc";
  IVarrayrw.PayMode = paymode;
  IVarrayrw.ServiceDelDate = IPr.TransDate;
  IVarrayrw.Spec = IPrw.CustName;
  IVarrayrw.CUServiceHistNr = IPr.SerNr;
  IVarrayrw.SerialNr = USetStr(17491);
  IVarrayrw.Sum = IPrw.RecVal;
  IVarrayrw.CurncyCode = IPrw.RecCurncy;
  IVarrayrw.BasePrice = MulWithRateToBase1(IPrw.RecCurncy,IPr.TransDate,IPrw.RecVal,DefaultCurRoundOff);
  IVarrayrw.NotUpdStockFlag = 2;
  MatRowPut(IVarray,MatRowCnt(IVarray),IVarrayrw);
  return;
end;

procedure AddReceiptsToPayModeArray(record RcVc RepSpec,record IVVc IVarray,var val totipsumb1,var val totipsum,var Integer curcnt,Array val av1,Array string acur)
begin
  record IPVc IPr;
  row IPVc IPrw;
  Integer i,rwcnt;
  Boolean found,testf;
  string 255 pmmode;
  val b1v;

  found = true;
  IPr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",IPr,1,found)) begin
    if (IPr.TransDate>RepSpec.sEndDate) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (IPr.OKFlag==0) then begin testf = false; end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (IPr.MachineName!=RepSpec.AccStr) then begin testf = false; end;
      end;
      if (testf) then begin
        rwcnt = MatRowCnt(IPr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IPr,i,IPrw);
          pmmode = "";
          switch (IPrw.stp) begin
            case 1:
              if (nonblank(IPrw.PayMode)) then begin
                pmmode = IPrw.PayMode;
              end else begin
                pmmode = IPr.PayMode;
              end;                
              testf = true;
              if (nonblank(RepSpec.FirstAcc)) then begin
                if (pmmode!=RepSpec.FirstAcc) then begin testf = false; end; 
              end;
              if (testf) then begin
                AddReceiptRowToPayModeArray(IVarray,IPr,IPrw,pmmode);
                totipsum = totipsum + IPrw.RecVal;
                b1v = MulWithRateToBase1(IPrw.RecCurncy,IPr.TransDate,IPrw.RecVal,DefaultCurRoundOff);   
                totipsumb1 = totipsumb1 + b1v;
                AddCurncyTotals(acur,av1,curcnt,IPrw.RecCurncy,IPrw.RecVal);
              end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure AddInvoicesToPayModeArray(record RcVc RepSpec,record IVVc IVarray,var val totivb1sum,var val totivsum,var val totdownsum,
                                    Array string aorderclass,Array val aorderclasssum,var Integer orderclasscnt,var Integer curcnt,Array val av1,Array string acur)
begin
  record IVVc orgIVr;
  record IVVc IVr;
  row IVVc IVrw;
  record ORVc ORr;
  Integer i,rwcnt;
  Boolean found,testf,downpayf;
  val sign,ivpaysum;
  string 255 pmmode;
  
  found = true;
  IVr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",IVr,1,found)) begin
    if (IVr.TransDate>RepSpec.sEndDate) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (IVr.OKFlag==0) then begin testf = false; end;
      if (IVr.Invalid!=0) then begin testf = false; end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (IVr.MachineName!=RepSpec.AccStr) then begin testf = false; end;
      end;
      if (testf) then begin
        sign = 1;
        ivpaysum = 0;  
        pmmode = "";
        downpayf = false;
        switch (IVr.InvType) begin
          case kInvoiceTypeCreditSpecialSales: 
            goto LkInvoiceTypeCredit;
          case kInvoiceTypeCredit:
LkInvoiceTypeCredit:;
            sign = -1;
            orgIVr.SerNr = IVr.CredInv;
            if (ReadFirstMain(orgIVr,1,true)) then begin
            end;
          case kInvoiceTypeDownpayment:
            downpayf = true;
        end;    
        if (downpayf) then begin
          ORr.SerNr = IVr.OrderNr;
          if (ReadFirstMain(ORr,1,true)) then begin
          end;
        end;
        
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          IVrw.Sum = sign*IVrw.Sum;
          testf = true;
          if (nonblank(RepSpec.FirstAcc)) then begin
            if (IVrw.PayMode!=RepSpec.FirstAcc) then begin testf = false; end; 
          end;
          if (testf) then begin
            switch (IVrw.stp) begin
              case kInvoiceRowTypeGiftVoucherPayment:
                ivpaysum = ivpaysum + sign*IVrw.Sum;
                AddInvoiceRowToPayModeArray(IVarray,IVr,IVrw,IVrw.PayMode,downpayf);
                if (downpayf) then begin
                  totdownsum = totdownsum + IVrw.Sum;
                end else begin
                  totivsum = totivsum + IVrw.Sum;
                  totivb1sum = totivb1sum + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                  AddCurncyTotals(acur,av1,curcnt,IVrw.CurncyCode,IVrw.Sum);
                end;
                if (downpayf) then begin
                  AddToOrderClassArray(aorderclass,aorderclasssum,orderclasscnt,ORr.OrderClass,sign*IVrw.Sum);
                end;
              case kInvoiceRowTypeLoyaltyPointsPayment:
/*              
                if (IVr.InvType==kInvoiceTypeCash) then begin
                  IVrw.Sum = IVrw.Sum - IVr.RetnValue;
                end;
*/                
                IVrw.Sum = IVrw.Sum - IVr.RetnValue;
                ivpaysum = ivpaysum + sign*IVrw.Sum;

                AddInvoiceRowToPayModeArray(IVarray,IVr,IVrw,IVrw.PayMode,downpayf);
                if (downpayf) then begin
                  totdownsum = totdownsum + IVrw.Sum;
                end else begin
                  totivsum = totivsum + IVrw.Sum;
                  totivb1sum = totivb1sum + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                  AddCurncyTotals(acur,av1,curcnt,IVrw.CurncyCode,IVrw.Sum);
                end;
                if (downpayf) then begin
                  AddToOrderClassArray(aorderclass,aorderclasssum,orderclasscnt,ORr.OrderClass,sign*IVrw.Sum);
                end;
              case kInvoiceRowTypeCashPayment:
/*              
                if (IVr.InvType==kInvoiceTypeCash) then begin
                  IVrw.Sum = IVrw.Sum - IVr.RetnValue;
                end;
*/                
//                IVrw.Sum = IVrw.Sum - IVr.RetnValue;
                ivpaysum = ivpaysum + sign*IVrw.Sum;
                AddInvoiceRowToPayModeArray(IVarray,IVr,IVrw,IVrw.PayMode,downpayf);
                if (downpayf) then begin
                  totdownsum = totdownsum + IVrw.Sum;
                  AddCurncyTotals(acur,av1,curcnt,IVrw.CurncyCode,IVrw.Sum);
                end else begin
                  totivsum = totivsum + IVrw.Sum;
                  totivb1sum = totivb1sum + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                  AddCurncyTotals(acur,av1,curcnt,IVrw.CurncyCode,IVrw.Sum);
                end;
                if (downpayf) then begin
                  AddToOrderClassArray(aorderclass,aorderclasssum,orderclasscnt,ORr.OrderClass,sign*IVrw.Sum);
                end;
              case kInvoiceRowTypeCreditCardPayment:
                ivpaysum = ivpaysum + sign*IVrw.Sum;
                AddInvoiceRowToPayModeArray(IVarray,IVr,IVrw,IVrw.PayMode,downpayf);
                if (downpayf) then begin
                  totdownsum = totdownsum + IVrw.Sum;
                end else begin
                  totivsum = totivsum + IVrw.Sum;
                  totivb1sum = totivb1sum + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                  AddCurncyTotals(acur,av1,curcnt,IVrw.CurncyCode,IVrw.Sum);
                end;
                if (downpayf) then begin
                  AddToOrderClassArray(aorderclass,aorderclasssum,orderclasscnt,ORr.OrderClass,sign*IVrw.Sum);
                end;
              case kInvoiceRowTypeChequePayment:
                ivpaysum = ivpaysum + sign*IVrw.Sum;
                AddInvoiceRowToPayModeArray(IVarray,IVr,IVrw,IVrw.PayMode,downpayf);
                if (downpayf) then begin
                  totdownsum = totdownsum + IVrw.Sum;
                end else begin
                  totivsum = totivsum + IVrw.Sum;
                  totivb1sum = totivb1sum + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                  AddCurncyTotals(acur,av1,curcnt,IVrw.CurncyCode,IVrw.Sum);
                end;
                if (downpayf) then begin
                  AddToOrderClassArray(aorderclass,aorderclasssum,orderclasscnt,ORr.OrderClass,sign*IVrw.Sum);
                end;  
              case 5:
//                ivpaysum = ivpaysum + sign*IVrw.Sum;
//                AddInvoiceRowToPayModeArray(IVarray,IVr,IVrw,IVrw.PayMode,downpayf);
//                if (downpayf) then begin
//                  totdownsum = totdownsum + IVrw.Sum;
//                end else begin
//                  totivsum = totivsum + IVrw.Sum;
//                end;
            end;            
          end;
        end;        
      end;
    end;
  end;
  return;
end;

procedure AddPOSInvoiceRowToPayModeArray(record IVVc IVarray,record IVCashVc IVCashr,val sum,val sumb1,string curncycode,string paymode,Boolean dpf)
begin
  row IVVc IVarrayrw;
  
  if (sum!=0) then begin
    ClearRow(IVarray,IVarrayrw,1);
    IVarrayrw.Comment = "DblIVCashVc";
    IVarrayrw.PayMode = paymode;
    IVarrayrw.ServiceDelDate = IVCashr.TransDate;
    IVarrayrw.Spec = IVCashr.Addr0;
    IVarrayrw.CUServiceHistNr = IVCashr.SerNr;
    if (dpf) then begin
      IVarrayrw.SerialNr = USetStr(17491);
      IVarrayrw.NotUpdStockFlag = 1;
    end else begin
      IVarrayrw.SerialNr = USetStr(17505);
      IVarrayrw.NotUpdStockFlag = 0;
    end;
    IVarrayrw.Sum = sum;
    IVarrayrw.CurncyCode = curncycode;
    IVarrayrw.BasePrice = sumb1;
    MatRowPut(IVarray,MatRowCnt(IVarray),IVarrayrw);
  end;
  return;
end;

procedure AddPOSInvoicesToPayModeArray(record RcVc RepSpec,record IVVc IVarray,var val totivb1sum,var val totivsum,var val totdownsum,
                                    Array string aorderclass,Array val aorderclasssum,var Integer orderclasscnt,var Integer curcnt,Array val av1,Array string acur)
begin
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  Boolean found,testf;
  val sign,ivpaysum,b1v;
  string 255 pmmode;
  record DefCashBlock DCb;
  
  BlockLoad(DCb);
  found = true;
  IVCashr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",IVCashr,1,found)) begin
    if (IVCashr.TransDate>RepSpec.sEndDate) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (IVCashr.OKFlag==0) then begin testf = false; end;
      if (IVCashr.Invalid!=0) then begin testf = false; end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (IVCashr.LocalMachineCode!=RepSpec.AccStr) then begin testf = false; end;
      end;
      if (testf) then begin
        sign = 1;
        if (nonblank(RepSpec.FirstAcc)) then begin
          if (DCb.DefCashPayMode==RepSpec.FirstAcc) then begin
            IVCashr.CashValue = IVCashr.CashValue - IVCashr.RetValue;
            ivpaysum = ivpaysum + sign*IVCashr.CashValue;
            b1v = MulRateToBase1(IVCashr.CurncyCode,IVCashr.CashValue,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
            AddPOSInvoiceRowToPayModeArray(IVarray,IVCashr,IVCashr.CashValue,b1v,IVCashr.CurncyCode,IVCashrw.PayMode,false);
            totivsum = totivsum + IVCashr.CashValue;
            totivb1sum = totivb1sum + b1v;
            AddCurncyTotals(acur,av1,curcnt,IVCashr.CurncyCode,IVCashr.CashValue);
          end;
          if (IVCashr.PayDeal==RepSpec.FirstAcc) then begin
            ivpaysum = ivpaysum + sign*IVCashr.RecValue;
            b1v = MulRateToBase1(IVCashr.CurncyCode,IVCashr.RecValue,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
            AddPOSInvoiceRowToPayModeArray(IVarray,IVCashr,IVCashr.RecValue,b1v,IVCashr.CurncyCode,IVCashrw.PayMode,false);
            totivsum = totivsum + IVCashr.RecValue;
            totivb1sum = totivb1sum + b1v;
            AddCurncyTotals(acur,av1,curcnt,IVCashr.CurncyCode,IVCashr.RecValue);
          end;
          if (IVCashr.PayDeal2==RepSpec.FirstAcc) then begin
            ivpaysum = ivpaysum + sign*IVCashr.RecValue2;
            b1v = MulRateToBase1(IVCashr.CurncyCode,IVCashr.RecValue2,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
            AddPOSInvoiceRowToPayModeArray(IVarray,IVCashr,IVCashr.RecValue,b1v,IVCashr.CurncyCode,IVCashrw.PayMode,false);
            totivsum = totivsum + IVCashr.RecValue2;
            totivb1sum = totivb1sum + b1v;
            AddCurncyTotals(acur,av1,curcnt,IVCashr.CurncyCode,IVCashr.RecValue2);
          end;
        end else begin
          IVCashr.CashValue = IVCashr.CashValue - IVCashr.RetValue;
          ivpaysum = ivpaysum + sign*IVCashr.CashValue;
          b1v = MulRateToBase1(IVCashr.CurncyCode,IVCashr.CashValue,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
          AddPOSInvoiceRowToPayModeArray(IVarray,IVCashr,IVCashr.CashValue,b1v,IVCashr.CurncyCode,IVCashrw.PayMode,false);
          totivsum = totivsum + IVCashr.CashValue;
          totivb1sum = totivb1sum + b1v;
          AddCurncyTotals(acur,av1,curcnt,IVCashr.CurncyCode,IVCashr.CashValue);

          ivpaysum = ivpaysum + sign*IVCashr.RecValue;
          b1v = MulRateToBase1(IVCashr.CurncyCode,IVCashr.RecValue,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
          AddPOSInvoiceRowToPayModeArray(IVarray,IVCashr,IVCashr.RecValue,b1v,IVCashr.CurncyCode,IVCashrw.PayMode,false);
          totivsum = totivsum + IVCashr.RecValue;
          totivb1sum = totivb1sum + b1v;
          AddCurncyTotals(acur,av1,curcnt,IVCashr.CurncyCode,IVCashr.RecValue);

          ivpaysum = ivpaysum + sign*IVCashr.RecValue2;
          b1v = MulRateToBase1(IVCashr.CurncyCode,IVCashr.RecValue2,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
          AddPOSInvoiceRowToPayModeArray(IVarray,IVCashr,IVCashr.RecValue,b1v,IVCashr.CurncyCode,IVCashrw.PayMode,false);
          totivsum = totivsum + IVCashr.RecValue2;
          totivb1sum = totivb1sum + b1v;
          AddCurncyTotals(acur,av1,curcnt,IVCashr.CurncyCode,IVCashr.RecValue2);
        end;

        ivpaysum = 0;  
        pmmode = "";
                
        rwcnt = MatRowCnt(IVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVCashr,i,IVCashrw);
          IVCashrw.Sum = sign*IVCashrw.Sum;
          testf = true;
          if (nonblank(RepSpec.FirstAcc)) then begin
            if (IVCashrw.PayMode!=RepSpec.FirstAcc) then begin testf = false; end; 
          end;
          if (testf) then begin
            switch (IVCashrw.stp) begin
              case kInvoiceRowTypeGiftVoucherPayment:
                ivpaysum = ivpaysum + sign*IVCashrw.Sum;
                b1v = MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);
                AddPOSInvoiceRowToPayModeArray(IVarray,IVCashr,IVCashrw.Sum,b1v,IVCashrw.CurncyCode,IVCashrw.PayMode,false);
                totivsum = totivsum + IVCashrw.Sum;
                totivb1sum = totivb1sum + b1v;
                AddCurncyTotals(acur,av1,curcnt,IVCashrw.CurncyCode,IVCashrw.Sum);
              case kInvoiceRowTypeLoyaltyPointsPayment:
                IVCashrw.Sum = IVCashrw.Sum - IVCashr.RetValue;
                ivpaysum = ivpaysum + sign*IVCashrw.Sum;
                b1v = MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);

                AddPOSInvoiceRowToPayModeArray(IVarray,IVCashr,IVCashrw.Sum,b1v,IVCashrw.CurncyCode,IVCashrw.PayMode,false);
                totivsum = totivsum + IVCashrw.Sum;
                totivb1sum = totivb1sum + b1v;
                AddCurncyTotals(acur,av1,curcnt,IVCashrw.CurncyCode,IVCashrw.Sum);
              case kInvoiceRowTypeCashPayment:
//                IVCashrw.Sum = IVCashrw.Sum - IVCashr.RetValue;
                ivpaysum = ivpaysum + sign*IVCashrw.Sum;
                b1v = MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);
                AddPOSInvoiceRowToPayModeArray(IVarray,IVCashr,IVCashrw.Sum,b1v,IVCashrw.CurncyCode,IVCashrw.PayMode,false);
                totivsum = totivsum + IVCashrw.Sum;
                totivb1sum = totivb1sum + b1v;
                AddCurncyTotals(acur,av1,curcnt,IVCashrw.CurncyCode,IVCashrw.Sum);
              case kInvoiceRowTypeCreditCardPayment:
                ivpaysum = ivpaysum + sign*IVCashrw.Sum;
                b1v = MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);

                AddPOSInvoiceRowToPayModeArray(IVarray,IVCashr,IVCashrw.Sum,b1v,IVCashrw.CurncyCode,IVCashrw.PayMode,false);
                totivsum = totivsum + IVCashrw.Sum;
                totivb1sum = totivb1sum + b1v;
                AddCurncyTotals(acur,av1,curcnt,IVCashrw.CurncyCode,IVCashrw.Sum);
              case kInvoiceRowTypeChequePayment:
                ivpaysum = ivpaysum + sign*IVCashrw.Sum;
                b1v = MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);

                AddPOSInvoiceRowToPayModeArray(IVarray,IVCashr,IVCashrw.Sum,b1v,IVCashrw.CurncyCode,IVCashrw.PayMode,false);
                totivsum = totivsum + IVCashrw.Sum;
                totivb1sum = totivb1sum + b1v;
                AddCurncyTotals(acur,av1,curcnt,IVCashrw.CurncyCode,IVCashrw.Sum);
            end;            
          end;
        end;        
      end;
    end;
  end;
  return;
end;

procedure SortPayModeArray(record RcVc RepSpec,record IVVc IVarray)
begin
  Integer i,rwcnt;
  row IVVc IVarrayrw;
  row IVVc nextIVarrayrw;
  row IVVc tmpIVarrayrw;
  Boolean changef;
  
  rwcnt = MatRowCnt(IVarray);
  changef = true;
  while (changef) begin
    changef = false;
    for (i=0;i<rwcnt-1;i=i+1) begin
      MatRowGet(IVarray,i,IVarrayrw);
      MatRowGet(IVarray,i+1,nextIVarrayrw);
       if ((IVarrayrw.PayMode>nextIVarrayrw.PayMode))
//         or ((IVarrayrw.PayMode==nextIVarrayrw.PayMode) and (IVarrayrw.NotUpdStockFlag>nextIVarrayrw.NotUpdStockFlag))) 
       then begin
         changef = true;
         CopyRow(IVarray,IVarrayrw,tmpIVarrayrw);
         CopyRow(IVarray,nextIVarrayrw,IVarrayrw);
         CopyRow(IVarray,tmpIVarrayrw,nextIVarrayrw);
         MatRowPut(IVarray,i,IVarrayrw);
         MatRowPut(IVarray,i+1,nextIVarrayrw);
       end;
    end;
  end;
  return;
end;

procedure PrintPayModeArray(record RcVc RepSpec,record IVVc IVarray,val totivb1sum,val totivsum,val totivcashb1sum,val totivcashsum,val totipsumb1,val totipsum,val totdownsum,val totivbartabsum,val totivbartabb1sum)
begin
  Integer i,rwcnt;
  row IVVc IVarrayrw;
  string 255 lastpmmode,lastpmmodename;
  row PMBlock PMrw;
  record PDVc PDr;
  val totpm;  
  val tot;

  rwcnt = MatRowCnt(IVarray);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVarray,i,IVarrayrw);
    if (lastpmmode!=IVarrayrw.PayMode) then begin
      if (nonblank(lastpmmode)) then begin
        Gray_Divider(0,1);
        StartFormat(15);
         OutString(300,0,lastpmmodename,false);
         OutVal(1,0,totpm,M4Val,true);
        EndFormat;
        StartFormat(15);
        EndFormat;
        totpm = blankval;
      end;
      StartFormat(15);
      if (GetPMRow(IVarrayrw.PayMode,PMrw)) then begin
        OutString(0,0,PMrw.Comment,false);
        lastpmmodename = PMrw.Comment;
      end else begin
        PDr.Code = IVarrayrw.PayMode;
        ReadFirstMain(PDr,1,true)
        OutString(0,0,PDr.pdComment,false);
        lastpmmodename = PDr.pdComment;
      end;
      EndFormat;
      Gray_Divider(0,1);
    end;
    StartFormat(15);
     OutDate(0,0,IVarrayrw.ServiceDelDate,false);
     OutString(70,0,IVarrayrw.Spec,false);
     switch (IVarrayrw.NotUpdStockFlag) begin
       case 0: OutLongInt(270,IVarrayrw.Comment,IVarrayrw.CUServiceHistNr,false);
       case 1: OutLongInt(270,IVarrayrw.Comment,IVarrayrw.CUServiceHistNr,false);
       case 2: OutLongInt(270,IVarrayrw.Comment,IVarrayrw.CUServiceHistNr,false);
     end;
     OutString(330,0,IVarrayrw.SerialNr,false);
     OutVal(410,0,IVarrayrw.Sum,M4Val,true);
     OutString(415,0,IVarrayrw.CurncyCode,false);
     OutVal(1,0,IVarrayrw.BasePrice,M4Val,true);
    EndFormat;
    lastpmmode = IVarrayrw.PayMode;
    totpm = totpm + IVarrayrw.BasePrice;
  end;
  if (nonblank(lastpmmode)) then begin
    Gray_Divider(0,1);
    StartFormat(15);
     OutString(300,0,lastpmmodename,false);
     OutVal(1,0,totpm,M4Val,true);
    EndFormat;
  end;

  StartFormat(15);
  EndFormat;
  Gray_Divider(0,1);
  StartFormat(15);
   OutString(300,0,USetStr(17486),false);
   OutVal(1,0,totivb1sum,M4Val,true);
  EndFormat;
  tot = tot + totivb1sum;
  StartFormat(15);
   OutString(300,0,USetStr(17503),false);
   OutVal(1,0,totivcashb1sum,M4Val,true);
  EndFormat;
  tot = tot + totivcashb1sum;
  StartFormat(15);
   OutString(300,0,USetStr(17507),false);
   OutVal(1,0,totivbartabb1sum,M4Val,true);
  EndFormat;
  tot = tot + totivbartabb1sum;
  StartFormat(15);
   OutString(300,0,USetStr(17487),false);
   OutVal(1,0,totipsumb1,M4Val,true);
  EndFormat;
  tot = tot + totipsumb1;
  StartFormat(15);
   OutString(300,0,USetStr(17488),false);
   OutVal(1,0,totdownsum,M4Val,true);
  EndFormat;
  tot = tot + totdownsum;
  Gray_Divider(0,1);
  StartFormat(15);
   OutString(300,0,USetStr(17489),false);
   OutVal(1,0,tot,M4Val,true);
  EndFormat;
  return;
end;

procedure CashReceipt_Detailed_Per_Paymode(record RcVc RepSpec,var Integer curcnt)
begin
  record DefCashBlock DCb;
  val totivsum,totivb1sum,totivcashsum,totivcashb1sum,totipsumb1,totipsum,totdownsum;
  record IVVc IVarray;
  Array string 255 aorderclass;
  Array val aorderclasssum;
  Integer orderclasscnt;
  array val av1,av2,av3;
  array string 20 acur;
  val totbartabb1sum,totbartabsum;
  
  BlockLoad(DCb);
  AddInvoicesToPayModeArray(RepSpec,IVarray,totivb1sum,totivsum,totdownsum,aorderclass,aorderclasssum,orderclasscnt,curcnt,av1,acur);
  AddPOSInvoicesToPayModeArray(RepSpec,IVarray,totivcashb1sum,totivcashsum,totdownsum,aorderclass,aorderclasssum,orderclasscnt,curcnt,av1,acur);
  AddBarTabsToPayModeArray(RepSpec,IVarray,totbartabb1sum,totbartabsum,totdownsum,aorderclass,aorderclasssum,orderclasscnt,curcnt,av1,acur);
  AddReceiptsToPayModeArray(RepSpec,IVarray,totipsumb1,totipsum,curcnt,av1,acur);
  SortPayModeArray(RepSpec,IVarray);
  PrintPayModeArray(RepSpec,IVarray,totivb1sum,totivsum,totivcashb1sum,totivcashsum,totipsumb1,totipsum,totdownsum,totbartabb1sum,totbartabsum);
  Gray_Divider(300,1);
  StartFormat(15);
   OutString(300,0,USetStr(1185),false);
   OutString(1,0,USetStr(17496),true);
  EndFormat;
  Gray_Divider(300,1);
  PrintCurncyTotals(acur,av1,av2,av3,curcnt,1,-1,-1,300,false,RepSpec.PocketPC);
  PrintOrderClassArray(aorderclass,aorderclasssum,orderclasscnt);
  return;
end;

procedure PrintInvoices(record RcVc RepSpec,Boolean dpf,var val totivb1sum,var val totivsum,var val totdownsum,
                        Array string aorderclass,Array val aorderclasssum,var Integer orderclasscnt,var Integer curcnt,Array val av1,Array string acur)
begin
  record IVVc orgIVr;
  record IVVc IVr;
  row IVVc IVrw;
  Boolean found,testf,headerf;
  val sign,b1v;
  Integer i,rwcnt;
  string 255 pmmode;
  record ORVc ORr;

  headerf = true;
  found = true;
  IVr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",IVr,1,found)) begin
    if (IVr.TransDate>RepSpec.sEndDate) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (IVr.OKFlag==0) then begin testf = false; end;
      if (IVr.Invalid!=0) then begin testf = false; end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (IVr.MachineName!=RepSpec.AccStr) then begin testf = false; end;
      end;
      if (testf) then begin
        sign = 1;
        pmmode = "";
        switch (IVr.InvType) begin
          case kInvoiceTypeCreditSpecialSales: goto LkInvoiceTypeCredit;
          case kInvoiceTypeCredit:
            LkInvoiceTypeCredit:;
            sign = -1;
            orgIVr.SerNr = IVr.CredInv;
            if (ReadFirstMain(orgIVr,1,true)) then begin
            end else begin
            end;
            if (dpf) then begin
              testf = false;
            end;
          case kInvoiceTypeDownpayment:
            if (dpf==false) then begin
              testf = false;
            end;
          otherwise
            if (dpf) then begin
              testf = false;
            end;
        end;    
        
        if (testf) then begin
          if (dpf) then begin
            ORr.SerNr = IVr.OrderNr;
            if (ReadFirstMain(ORr,1,true)) then begin
            end;
          end;
          rwcnt = MatRowCnt(IVr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVr,i,IVrw);
            testf = true;
            if (nonblank(RepSpec.FirstAcc)) then begin
              if (IVrw.PayMode!=RepSpec.FirstAcc) then begin testf = false; end; 
            end;
            if (testf) then begin
              testf = false;
              switch (IVrw.stp) begin
                case kInvoiceRowTypeGiftVoucherPayment:
                  testf = true;
                case kInvoiceRowTypeLoyaltyPointsPayment:
                  testf = true;
                case kInvoiceRowTypeChequePayment:
                  testf = true;
                case kInvoiceRowTypeCashPayment:
                  testf = true;
                case kInvoiceRowTypeCreditCardPayment:
                  testf = true;
              end;            
              if (testf) then begin
                switch (IVrw.stp) begin
                  case kInvoiceRowTypeCashPayment:
//                    IVrw.Sum = IVrw.Sum - IVr.RetnValue;
                  case kInvoiceRowTypeLoyaltyPointsPayment:
                    IVrw.Sum = IVrw.Sum - IVr.RetnValue;
                end;
                IVrw.Sum = sign*IVrw.Sum;
                if (headerf) then begin
                  if (dpf) then begin
                    Gray_Divider(0,1);
                  end;
                  StartFormat(15);
                   if (dpf) then begin
                     OutString(0,0,USetStr(17498),false);
                   end else begin
                     OutString(0,0,USetStr(17497),false);
                   end;
                  EndFormat;
                  Gray_Divider(0,1);
                  headerf = false;
                end;
                if (blank(IVrw.CurncyCode)) then begin
                  b1v = MulRateToBase1(IVr.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);                  ;
                end else begin
                  b1v = MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);                  ;
                end;
                StartFormat(15);
                 OutDate(0,0,IVr.TransDate,false);
                 OutString(70,0,IVr.Addr0,false);
                 OutString(260,"DblIVVc",IVr.SerNr,false);
//                  if (dpf) then begin
//                    OutString(330,0,USetStr(17491),false);
//                  end else begin
                   OutString(330,0,USetStr(17501),false);
//                  end;
                 OutVal(410,0,IVrw.Sum,M4Val,true);
                 OutString(415,0,IVrw.CurncyCode,false);
                 OutVal(1,0,b1v,M4Val,true);
                EndFormat;
                if (dpf) then begin
                  totdownsum = totdownsum + b1v;
                  AddToOrderClassArray(aorderclass,aorderclasssum,orderclasscnt,ORr.OrderClass,IVrw.Sum);
                  AddCurncyTotals(acur,av1,curcnt,IVrw.CurncyCode,IVrw.Sum);
                end else begin
                  totivsum = totivsum + IVrw.Sum;
                  totivb1sum = totivb1sum + b1v;
                  AddCurncyTotals(acur,av1,curcnt,IVrw.CurncyCode,IVrw.Sum);
                end;
              end;
            end;
          end;                  
        end;
      end;
    end;
  end;
  return;
end;

procedure PrintPOSInvoices(record RcVc RepSpec,var val totivb1sum,var val totivsum,var val totdownsum,
                        Array string aorderclass,Array val aorderclasssum,var Integer orderclasscnt,var Integer curcnt,Array val av1,Array string acur)
begin
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Boolean found,testf,headerf;
  val sign,b1v;
  Integer i,rwcnt;
  string 255 pmmode;
  record DefCashBlock DCb;

  BlockLoad(DCb);
  headerf = true;
  found = true;
  IVCashr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",IVCashr,1,found)) begin
    if (IVCashr.TransDate>RepSpec.sEndDate) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (IVCashr.OKFlag==0) then begin testf = false; end;
      if (IVCashr.Invalid!=0) then begin testf = false; end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (IVCashr.LocalMachineCode!=RepSpec.AccStr) then begin testf = false; end;
      end;
      if (testf) then begin
        sign = 1;
        if (nonblank(RepSpec.FirstAcc)) then begin
          if (DCb.DefCashPayMode==RepSpec.FirstAcc) then begin
            if (headerf) then begin
              StartFormat(15);
               OutString(0,0,USetStr(17504),false);
              EndFormat;
              Gray_Divider(0,1);
              headerf = false;
            end;
            b1v = MulRateToBase1(IVCashr.CurncyCode,IVCashr.CashValue-IVCashr.RetValue,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);                  ;
            StartFormat(15);
             OutDate(0,0,IVCashr.TransDate,false);
             OutString(70,0,IVCashr.Addr0,false);
             OutString(260,"DblIVCashVc",IVCashr.SerNr,false);
             OutString(330,0,USetStr(17505),false);
             OutVal(410,0,IVCashr.CashValue-IVCashr.RetValue,M4Val,true);
             OutString(415,0,IVCashr.CurncyCode,false);
             OutVal(1,0,b1v,M4Val,true);
            EndFormat;
            totivsum = totivsum + IVCashr.CashValue-IVCashr.RetValue;
            totivb1sum = totivb1sum + b1v;
            AddCurncyTotals(acur,av1,curcnt,IVCashrw.CurncyCode,IVCashr.CashValue-IVCashr.RetValue);
          end;
          if (IVCashr.PayDeal==RepSpec.FirstAcc) then begin
            if (headerf) then begin
              StartFormat(15);
               OutString(0,0,USetStr(17504),false);
              EndFormat;
              Gray_Divider(0,1);
              headerf = false;
            end;
            b1v = MulRateToBase1(IVCashr.CurncyCode,IVCashr.RecValue,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);                  ;
            StartFormat(15);
             OutDate(0,0,IVCashr.TransDate,false);
             OutString(70,0,IVCashr.Addr0,false);
             OutString(260,"DblIVCashVc",IVCashr.SerNr,false);
             OutString(330,0,USetStr(17505),false);
             OutVal(410,0,IVCashr.RecValue,M4Val,true);
             OutString(415,0,IVCashr.CurncyCode,false);
             OutVal(1,0,b1v,M4Val,true);
            EndFormat;
            totivsum = totivsum + IVCashr.RecValue;
            totivb1sum = totivb1sum + b1v;
            AddCurncyTotals(acur,av1,curcnt,IVCashrw.CurncyCode,IVCashr.RecValue);
          end;
          if (IVCashr.PayDeal2==RepSpec.FirstAcc) then begin
            if (headerf) then begin
              StartFormat(15);
               OutString(0,0,USetStr(17504),false);
              EndFormat;
              Gray_Divider(0,1);
              headerf = false;
            end;
            b1v = MulRateToBase1(IVCashr.CurncyCode,IVCashr.RecValue2,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);                  ;
            StartFormat(15);
             OutDate(0,0,IVCashr.TransDate,false);
             OutString(70,0,IVCashr.Addr0,false);
             OutString(260,"DblIVCashVc",IVCashr.SerNr,false);
             OutString(330,0,USetStr(17505),false);
             OutVal(410,0,IVCashr.RecValue2,M4Val,true);
             OutString(415,0,IVCashr.CurncyCode,false);
             OutVal(1,0,b1v,M4Val,true);
            EndFormat;
            totivsum = totivsum + IVCashr.RecValue2;
            totivb1sum = totivb1sum + b1v;
            AddCurncyTotals(acur,av1,curcnt,IVCashrw.CurncyCode,IVCashr.RecValue2);
          end;
        end else begin
          if (IVCashr.CashValue!=0) then begin
            if (headerf) then begin
              StartFormat(15);
               OutString(0,0,USetStr(17504),false);
              EndFormat;
              Gray_Divider(0,1);
              headerf = false;
            end;
            b1v = MulRateToBase1(IVCashr.CurncyCode,IVCashr.CashValue-IVCashr.RetValue,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);                  ;
            StartFormat(15);
             OutDate(0,0,IVCashr.TransDate,false);
             OutString(70,0,IVCashr.Addr0,false);
             OutString(260,"DblIVCashVc",IVCashr.SerNr,false);
             OutString(330,0,USetStr(17505),false);
             OutVal(410,0,IVCashr.CashValue-IVCashr.RetValue,M4Val,true);
             OutString(415,0,IVCashr.CurncyCode,false);
             OutVal(1,0,b1v,M4Val,true);
            EndFormat;
            totivsum = totivsum + IVCashr.CashValue-IVCashr.RetValue;
            totivb1sum = totivb1sum + b1v;
            AddCurncyTotals(acur,av1,curcnt,IVCashrw.CurncyCode,IVCashr.CashValue-IVCashr.RetValue);
          end;
          if (IVCashr.RecValue!=0) then begin
            if (headerf) then begin
              StartFormat(15);
               OutString(0,0,USetStr(17504),false);
              EndFormat;
              Gray_Divider(0,1);
              headerf = false;
            end;
            b1v = MulRateToBase1(IVCashr.CurncyCode,IVCashr.RecValue,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);                  ;
            StartFormat(15);
             OutDate(0,0,IVCashr.TransDate,false);
             OutString(70,0,IVCashr.Addr0,false);
             OutString(260,"DblIVCashVc",IVCashr.SerNr,false);
             OutString(330,0,USetStr(17505),false);
             OutVal(410,0,IVCashr.RecValue,M4Val,true);
             OutString(415,0,IVCashr.CurncyCode,false);
             OutVal(1,0,b1v,M4Val,true);
            EndFormat;
            totivsum = totivsum + IVCashr.RecValue;
            totivb1sum = totivb1sum + b1v;
            AddCurncyTotals(acur,av1,curcnt,IVCashrw.CurncyCode,IVCashr.RecValue);
          end;
          if (IVCashr.RecValue2!=0) then begin
            if (headerf) then begin
              StartFormat(15);
               OutString(0,0,USetStr(17504),false);
              EndFormat;
              Gray_Divider(0,1);
              headerf = false;
            end;
            b1v = MulRateToBase1(IVCashr.CurncyCode,IVCashr.RecValue2,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);                  ;
            StartFormat(15);
             OutDate(0,0,IVCashr.TransDate,false);
             OutString(70,0,IVCashr.Addr0,false);
             OutString(260,"DblIVCashVc",IVCashr.SerNr,false);
             OutString(330,0,USetStr(17505),false);
             OutVal(410,0,IVCashr.RecValue2,M4Val,true);
             OutString(415,0,IVCashr.CurncyCode,false);
             OutVal(1,0,b1v,M4Val,true);
            EndFormat;
            totivsum = totivsum + IVCashr.RecValue2;
            totivb1sum = totivb1sum + b1v;
            AddCurncyTotals(acur,av1,curcnt,IVCashrw.CurncyCode,IVCashr.RecValue2);
          end;
        end;

        pmmode = "";
        if (testf) then begin
          rwcnt = MatRowCnt(IVCashr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVCashr,i,IVCashrw);
            testf = true;
            if (nonblank(RepSpec.FirstAcc)) then begin
              if (IVCashrw.PayMode!=RepSpec.FirstAcc) then begin testf = false; end; 
            end;
            if (testf) then begin
              testf = false;
              switch (IVCashrw.stp) begin
                case kInvoiceRowTypeGiftVoucherPayment:
                  testf = true;
                case kInvoiceRowTypeLoyaltyPointsPayment:
                  testf = true;
                case kInvoiceRowTypeChequePayment:
                  testf = true;
                case kInvoiceRowTypeCashPayment:
                  testf = true;
                case kInvoiceRowTypeCreditCardPayment:
                  testf = true;
              end;            
              if (testf) then begin
                switch (IVCashrw.stp) begin
                  case kInvoiceRowTypeCashPayment:
                    IVCashrw.Sum = IVCashrw.Sum - IVCashr.RetValue;
                  case kInvoiceRowTypeLoyaltyPointsPayment:
                    IVCashrw.Sum = IVCashrw.Sum - IVCashr.RetValue;
                end;
                IVCashrw.Sum = sign*IVCashrw.Sum;
                if (headerf) then begin
                  StartFormat(15);
                   OutString(0,0,USetStr(17504),false);
                  EndFormat;
                  Gray_Divider(0,1);
                  headerf = false;
                end;
                b1v = MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);                  ;
                StartFormat(15);
                 OutDate(0,0,IVCashr.TransDate,false);
                 OutString(70,0,IVCashr.Addr0,false);
                 OutString(260,"DblIVCashVc",IVCashr.SerNr,false);
                 OutString(330,0,USetStr(17505),false);
                 OutVal(410,0,IVCashrw.Sum,M4Val,true);
                 OutString(415,0,IVCashrw.CurncyCode,false);
                 OutVal(1,0,b1v,M4Val,true);
                EndFormat;
                totivsum = totivsum + IVCashrw.Sum;
                totivb1sum = totivb1sum + b1v;
                AddCurncyTotals(acur,av1,curcnt,IVCashrw.CurncyCode,IVCashrw.Sum);
              end;
            end;
          end;                  
        end;
      end;
    end;
  end;
  return;
end;

procedure PrintReceipts(record RcVc RepSpec,var val totipsumb1,var val totipsum,var Integer curcnt,Array val av1,Array string acur)
begin
  record IPVc IPr;
  row IPVc IPrw;
  Integer i,rwcnt;
  Boolean found,testf,headerf;
  string 255 pmmode;
  val b1v;

  headerf = true;
  found = true;
  IPr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",IPr,1,found)) begin
    if (IPr.TransDate>RepSpec.sEndDate) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (IPr.OKFlag==0) then begin testf = false; end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (IPr.MachineName!=RepSpec.AccStr) then begin testf = false; end;
      end;
      if (testf) then begin
        rwcnt = MatRowCnt(IPr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IPr,i,IPrw);
          switch (IPrw.stp) begin
            case 1:
              if (nonblank(IPrw.PayMode)) then begin
                pmmode = IPrw.PayMode;
              end else begin
                pmmode = IPr.PayMode;
              end;                
              if (nonblank(RepSpec.FirstAcc)) then begin
                if (pmmode!=RepSpec.FirstAcc) then begin testf = false; end; 
              end;
              if (testf) then begin
                if (headerf) then begin
                  StartFormat(15);
                  OutString(0,0,USetStr(17499),false);
                  EndFormat;
                  Gray_Divider(0,1);
                  headerf = false;
                end;
                b1v = MulWithRateToBase1(IPrw.RecCurncy,IPr.TransDate,IPrw.RecVal,DefaultCurRoundOff);   
                StartFormat(15);
                 OutDate(0,0,IPr.TransDate,false);
                 OutString(70,0,IPrw.CustName,false);
                 OutString(260,"DblIPVc",IPr.SerNr,false);
                 OutString(330,0,USetStr(17491),false);
                 OutVal(410,0,IPrw.RecVal,M4Val,true);
                 OutString(415,0,IPrw.RecCurncy,false);
                 OutVal(1,0,b1v,M4Val,true);
                EndFormat;
                totipsum = totipsum + IPrw.RecVal;
                totipsumb1 = totipsumb1 + b1v;
                AddCurncyTotals(acur,av1,curcnt,IPrw.RecCurncy,IPrw.RecVal);
              end;
          end;          
        end;
      end;
    end;
  end;
  return;
end;

procedure PrintBarTabs(record RcVc RepSpec,var val totbarb1sum,var val totbarsum,var val totdownsum,
                        Array string aorderclass,Array val aorderclasssum,var Integer orderclasscnt,var Integer curcnt,Array val av1,Array string acur)
begin
  record RestAccVc orgRestAccr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  Boolean found,testf,headerf;
  val sign,b1v;
  Integer i,rwcnt;
  string 255 pmmode;

  headerf = true;
  found = true;
  RestAccr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",RestAccr,1,found)) begin
    if (RestAccr.TransDate>RepSpec.sEndDate) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (RestAccr.Closed!=1) then begin testf = false; end;
      if (RestAccr.Invalid!=0) then begin testf = false; end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (RestAccr.MachineName!=RepSpec.AccStr) then begin testf = false; end;
      end;
      if (testf) then begin
        sign = 1;
        pmmode = "";
        if (testf) then begin
          rwcnt = MatRowCnt(RestAccr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(RestAccr,i,RestAccrw);
            testf = true;
            if (nonblank(RepSpec.FirstAcc)) then begin
              if (RestAccrw.PayMode!=RepSpec.FirstAcc) then begin testf = false; end; 
            end;
            if (testf) then begin
              testf = false;
              switch (RestAccrw.stp) begin
                case kInvoiceRowTypeGiftVoucherPayment:
                  testf = true;
                case kInvoiceRowTypeLoyaltyPointsPayment:
                  testf = true;
                case kInvoiceRowTypeChequePayment:
                  testf = true;
                case kInvoiceRowTypeCashPayment:
                  testf = true;
                case kInvoiceRowTypeCreditCardPayment:
                  testf = true;
              end;            
              if (testf) then begin
                switch (RestAccrw.stp) begin
                  case kInvoiceRowTypeCashPayment:
                  //nk  RestAccrw.Sum = RestAccrw.Sum - RestAccr.RetnValue;
                  case kInvoiceRowTypeLoyaltyPointsPayment:
                  //nk  RestAccrw.Sum = RestAccrw.Sum - RestAccr.RetnValue;
                end;
                RestAccrw.Sum = sign*RestAccrw.Sum;
                if (headerf) then begin
                  StartFormat(15);
                  OutString(0,0,USetStr(17506),false);
                  EndFormat;
                  Gray_Divider(0,1);
                  headerf = false;
                end;
               // if (blank(RestAccrw.CurncyCode)) then begin
                //  b1v = MulRateToBase1(RestAccr.CurncyCode,RestAccrw.Sum,RestAccr.FrRate,RestAccr.ToRateB1,RestAccr.ToRateB2,RestAccr.BaseRate1,RestAccr.BaseRate2,DefaultCurRoundOff);                  ;
                //end else begin
                  b1v = MulRateToBase1(RestAccrw.CurncyCode,RestAccrw.Sum,RestAccrw.FrRate,RestAccrw.ToRateB1,RestAccrw.ToRateB2,RestAccrw.BaseRate1,RestAccrw.BaseRate2,DefaultCurRoundOff);                  ;
                //end;
                StartFormat(15);
                 OutDate(0,0,RestAccr.TransDate,false);
                 OutString(70,0,RestAccr.Addr0,false);
                 OutString(260,"DblRestAccVc",RestAccr.SerNr,false);
                 OutString(330,0,USetStr(17506),false);
                 OutVal(410,0,RestAccrw.Sum,M4Val,true);
                 OutString(415,0,RestAccrw.CurncyCode,false);
                 OutVal(1,0,b1v,M4Val,true);
                EndFormat;
                totbarsum = totbarsum + RestAccrw.Sum;
                totbarb1sum = totbarb1sum + b1v;
                AddCurncyTotals(acur,av1,curcnt,RestAccrw.CurncyCode,RestAccrw.Sum);
              end;
              
            end;
          end;                  
        end;
      end;
    end;
  end;
  return;
end;

procedure CashReceipt_Detailed_Per_Register(record RcVc RepSpec,var Integer curcnt)
begin
  val totivsum,totivb1sum,totivcashsum,totivcashb1sum,totipsumb1,totipsum,b1totipsum,totdownsum,tot;
  Array string 255 aorderclass;
  Array val aorderclasssum;
  Integer orderclasscnt;
  array val av1,av2,av3;
  array string 20 acur;
  val totbartabsum,totbartab1sum;

  PrintInvoices(RepSpec,false,totivb1sum,totivsum,totdownsum,aorderclass,aorderclasssum,orderclasscnt,curcnt,av1,acur);  
  if (totivsum!=0) then begin
    Gray_Divider(0,1);
    StartFormat(15);
     OutString(300,0,USetStr(17486),false);
     OutVal(1,0,totivb1sum,M4Val,true);
    EndFormat;
    StartFormat(15);
    EndFormat;
  end;
  PrintInvoices(RepSpec,true,totivb1sum,totivsum,totdownsum,aorderclass,aorderclasssum,orderclasscnt,curcnt,av1,acur);  
  if (totdownsum!=0) then begin
    Gray_Divider(0,1);
    StartFormat(15);
     OutString(300,0,USetStr(17488),false);
     OutVal(1,0,totdownsum,M4Val,true);
    EndFormat;
    StartFormat(15);
    EndFormat;
  end;
  PrintPOSInvoices(RepSpec,totivcashb1sum,totivcashsum,totdownsum,aorderclass,aorderclasssum,orderclasscnt,curcnt,av1,acur);  
  if (totivcashsum!=0) then begin
    Gray_Divider(0,1);
    StartFormat(15);
     OutString(300,0,USetStr(17503),false);
     OutVal(1,0,totivcashb1sum,M4Val,true);
    EndFormat;
    StartFormat(15);
    EndFormat;
  end;
  PrintBarTabs(RepSpec,totbartab1sum,totbartabsum,totdownsum,aorderclass,aorderclasssum,orderclasscnt,curcnt,av1,acur); 
  if (totbartabsum!=0) then begin
    Gray_Divider(0,1);
    StartFormat(15);
     OutString(300,0,USetStr(17507),false);
     OutVal(1,0,totbartab1sum,M4Val,true);
    EndFormat;
    StartFormat(15);
    EndFormat;
  end;
  PrintReceipts(RepSpec,totipsumb1,totipsum,curcnt,av1,acur);
  if (totipsum!=0) then begin
    Gray_Divider(0,1);
    StartFormat(15);
     OutString(300,0,USetStr(17487),false);
     OutVal(1,0,totipsumb1,M4Val,true);
    EndFormat;
    StartFormat(15);
    EndFormat;
  end;

  Gray_Divider(0,1);
  StartFormat(15);
   OutString(300,0,USetStr(17486),false);
   OutVal(1,0,totivb1sum,M4Val,true);
  EndFormat;
  tot = tot + totivb1sum;
  StartFormat(15);
   OutString(300,0,USetStr(17503),false);
   OutVal(1,0,totivcashb1sum,M4Val,true);
  EndFormat;
  tot = tot + totivcashb1sum;
  StartFormat(15);
   OutString(300,0,USetStr(17507),false);
   OutVal(1,0,totbartab1sum,M4Val,true);
  EndFormat;
  tot = tot + totbartab1sum;
  StartFormat(15);
   OutString(300,0,USetStr(17487),false);
   OutVal(1,0,totipsumb1,M4Val,true);
  EndFormat;
  tot = tot + totipsumb1;
  StartFormat(15);
   OutString(300,0,USetStr(17488),false);
   OutVal(1,0,totdownsum,M4Val,true);
  EndFormat;
  tot = tot + totdownsum;
  Gray_Divider(0,1);
  StartFormat(15);
   OutString(300,0,USetStr(17489),false);
   OutVal(1,0,tot,M4Val,true);
  EndFormat;
  Gray_Divider(300,1);
  StartFormat(15);
   OutString(300,0,USetStr(1185),false);
   OutString(1,0,USetStr(17496),true);
  EndFormat;
  Gray_Divider(300,1);
  PrintCurncyTotals(acur,av1,av2,av3,curcnt,1,-1,-1,300,false,RepSpec.PocketPC);

  PrintOrderClassArray(aorderclass,aorderclasssum,orderclasscnt);
  return;
end;

global
procedure CashReceiptRn(record RcVc RepSpec)
begin
  Integer rw;
  string 255 tstr;
  Integer curcnt;

  StartReportJob(USetStr(17480));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (nonblank(RepSpec.FirstAcc)) then begin
    tstr = USetStr(1140);
    tstr = tstr & RepSpec.FirstAcc;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  switch (RepSpec.flags[0]) begin
    case 0: tstr = USetStr(17481);
    case 1: tstr = USetStr(17482);
    case 2: tstr = USetStr(17483);
  end;

  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;

  BeginCurncyTotals(curcnt);
  switch (RepSpec.flags[0]) begin
    case 0:
      StartFormat(15);
       OutString(0,0,USetStr(17484),false);
       OutString(1,0,USetStr(17485),true);
      EndFormat;
    case 1:
      StartFormat(15);
       OutString(0,0,USetStr(17492),false);
       OutString(70,0,USetStr(17493),false);
       OutString(260,0,USetStr(17502),false);
       OutString(330,0,USetStr(17495),false);
       OutString(1,0,USetStr(17496),true);
      EndFormat;    
    case 2:
      StartFormat(15);
       OutString(0,0,USetStr(17492),false);
       OutString(70,0,USetStr(17493),false);
       OutString(260,0,USetStr(17502),false);
       OutString(330,0,USetStr(17495),false);
       OutString(1,0,USetStr(17496),true);
      EndFormat;    
  end;
  Gray_Divider(0,1);

  
  switch (RepSpec.flags[0]) begin
    case 0: CashReceipt_Overview(RepSpec,curcnt);
    case 1: CashReceipt_Detailed_Per_Paymode(RepSpec,curcnt);
    case 2: CashReceipt_Detailed_Per_Register(RepSpec,curcnt);
  end;
  EndJob;
  return;
end;
