external procedure ToStrTRCode(var string,Integer,LongInt);

procedure PrintHeader(var Boolean hf)
begin 
  if (hf==false) then begin
    StartFormat(15);
     OutString(0,0,"No.",false);
     OutString(80,0,"Date",false);
     OutString(240,0,"Amount",true);
     OutString(250,0,"No.",false);
     OutString(330,0,"Date",false);
     OutString(420,0,"Amount",true);
     OutString(1,0,"Balance",true);
    EndFormat;
    Gray_Divider(0,1);
    hf = true;
  end;
  return;
end;

procedure DaylyResults(record RcVc RepSpec,record BaseCurBlock BCb,string acc1,string acc2,string object1,string object2,Date td,Boolean corspf,Boolean balf,
                       var val totv,var val balv,
                       var Boolean acchf,var Boolean objhf,var Boolean hf,vector Boolean vtralreadyprinted)
begin
  record MainVc Mainr;
  Boolean found,testf;
  record TRVc TRr;
  row TRVc TRrw;
  Integer i,rwcnt;
  string 255 tstr,acc,object;
  record ObjVc Objr;
  record AccVc Accr;
  val v;

  if (corspf==false) then begin
    acc = acc1;
    object = object1;
  end else begin
    acc = acc2;
    object = object2;
  end;
  Mainr.AccNumber = acc;
  Mainr.TransDate = td;
  found = true;
  while (LoopMain(Mainr,2,found)) begin
    if (Mainr.AccNumber!=acc) then begin found = false; end;
    if (Mainr.TransDate!=td) then begin found = false; end;
    if (found) then begin
      switch (Mainr.FileName) begin
        case "TRVc":
          TRr.Number = Mainr.TransNr;
          TRr.IntYc = Mainr.IntYc;
/*
StartFormat(15);                
 ToStrTRCode(tstr,TRr.IntYc,TRr.Number);
 OutString(200,"DblTrans",tstr,false);
 OutString(300,0,acc,false);
 OutString(400,0,CurrentCompany,false);
EndFormat;
*/
          if (vtralreadyprinted[TRr.IntYc & "." & TRr.Number]==false) then begin
            if (ReadFirstMain(TRr,2,true)) then begin            
              rwcnt = MatRowCnt(TRr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(TRr,i,TRrw);
                testf = true;
                if (TRrw.AccNumber!=acc) then begin testf = false; end;
                if (SetInSet(object,TRrw.Objects)==false) then begin testf = false; end;
                if (nonblank(RepSpec.ObjStr)) then begin
                  if (SetInSet(RepSpec.ObjStr,TRrw.Objects)==false) then begin testf = false; end;
                end;
                if (TRrw.ovst!=0) then begin testf = false; end;
                if (TRrw.stp!=1) then begin testf = false; end;
                if (testf) then begin
                  PrintHeader(hf);
                  v = blankval;
                  v = TRrw.CredVal - TRrw.DebVal;
                  if (balf==false) then begin
                    if (acchf==false) then begin
                      Accr.AccNumber = acc1;
                      ReadFirstMain(Accr,1,true);
                    
                      StartFormat(15);
                       OutString(0,0,Accr.AccNumber,false);
                       OutString(80,0,Accr.Comment,false);

                       Accr.AccNumber = acc2;
                       ReadFirstMain(Accr,1,true);
                       OutString(250,0,Accr.AccNumber,false);
                       OutString(330,0,Accr.Comment,false);
                      EndFormat;
                      Gray_Divider(0,1);
                      acchf = true;
                    end;

                    if (objhf==false) then begin
                      StartFormat(15);
                       Objr.Code = object1;
                       ReadFirstMain(Objr,1,true);
                       OutString(0,0,object1,false);
                       OutString(80,0,Objr.Comment,false);
                       Objr.Code = object2;
                       ReadFirstMain(Objr,1,true);
                       OutString(250,0,object2,false);
                       OutString(330,0,Objr.Comment,false);
                      EndFormat;
                      objhf = true;
                    end; 
                  
                    balv = balv + v;
                 
                    ToStrTRCode(tstr,TRr.IntYc,TRr.Number);
                    StartFormat(15);
                    if (corspf==false) then begin
                      OutString(0,"DblTrans",tstr,false);
                      OutDate(80,0,td,false);
                      OutVal(240,0,v,M4Val,true);
                    end else begin
                      OutString(250,0,tstr,false);
                      OutDate(330,0,td,false);
                      OutVal(420,0,v,M4Val,true);
                    end;
                    OutVal(1,0,balv,M4Val,true);
                    EndFormat;
                    totv = totv + v;
                    vtralreadyprinted[TRr.IntYc & "." & TRr.Number] = true;
                  end else begin
                    balv = balv + v;
                  end;
                end;
              end;
            end;
          end;
      end;
    end;
  end;
  return;
end;

procedure ICACPerCompany(record RcVc RepSpec,record BaseCurBlock BCb,record UserDefRepICACLVc UDRICACLr,var val tot,var val totcorsp,var val totbal)
begin
  Integer oldcomp;
  row UserDefRepICACLVc UDRICACLrw;
  Integer i,rwcnt;
  val v,corspv,balv;
  Boolean testf,acchf,objhf,hf;
  Date td;
  vector Boolean vtralreadyprinted;
  val accv,acorspv,accbalv;

  oldcomp = CurrentCompany;  
  
  testf = true;
  rwcnt = MatRowCnt(UDRICACLr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(UDRICACLr,i,UDRICACLrw);
    testf = true;
    if (RepSpec.flags[0]!=0) then begin//calculate Balance
      td = RepSpec.sStartDate;
      while (td<=RepSpec.sEndDate) begin    
        DaylyResults(RepSpec,BCb,UDRICACLrw.AccNumber,UDRICACLrw.CorspAccNumber,UDRICACLr.Object,UDRICACLr.CorspObject,td,false,true,v,balv,acchf,objhf,hf,vtralreadyprinted);
        if (SetCompanyCode(UDRICACLr.CompCode,false)) then begin
          DaylyResults(RepSpec,BCb,UDRICACLrw.AccNumber,UDRICACLrw.CorspAccNumber,UDRICACLr.Object,UDRICACLr.CorspObject,td,true,true,corspv,balv,acchf,objhf,hf,vtralreadyprinted);
        end;
        ResetCompany(oldcomp);
        td = AddDay(td,1);
      end;
      if (balv==0) then begin testf = false; end;
    end;
    if (testf) then begin
      objhf = false;
      acchf = false;
      ClearVector(vtralreadyprinted);
      v = blankval;
      corspv = blankval;
      balv = blankval;
      td = RepSpec.sStartDate;
      while (td<=RepSpec.sEndDate) begin    
        DaylyResults(RepSpec,BCb,UDRICACLrw.AccNumber,UDRICACLrw.CorspAccNumber,UDRICACLr.Object,UDRICACLr.CorspObject,td,false,false,v,balv,acchf,objhf,hf,vtralreadyprinted);
        if (SetCompanyCode(UDRICACLr.CompCode,false)) then begin
          DaylyResults(RepSpec,BCb,UDRICACLrw.AccNumber,UDRICACLrw.CorspAccNumber,UDRICACLr.Object,UDRICACLr.CorspObject,td,true,false,corspv,balv,acchf,objhf,hf,vtralreadyprinted);
        end;
        ResetCompany(oldcomp);
        td = AddDay(td,1);
      end;
      if (objhf) then begin
        Gray_Divider(0,1);
        StartFormat(15);
         OutVal(240,0,v,M4Val,true);
         OutVal(420,0,corspv,M4Val,true);
         OutVal(1,0,balv,M4Val,true);
        EndFormat;
        StartFormat(15);
        EndFormat;
        accv = accv + v;
        acorspv = acorspv + corspv;
        accbalv = accbalv + balv;
      end;
    end;
  end;
  
  if (v!=0) or (corspv!=0) or (balv!=0) then begin
    Gray_Divider(0,1);
    StartFormat(15);
     OutVal(240,0,v,M4Val,true);
     OutVal(420,0,corspv,M4Val,true);
     OutVal(1,0,balv,M4Val,true);
    EndFormat;
    StartFormat(15);
    EndFormat;
    tot = tot + accv;
    totcorsp = totcorsp + acorspv;
    totbal = totbal + accbalv;
  end;
  
  ResetCompany(oldcomp);
  return;
end;

global
procedure ICACRn(record RcVc RepSpec)
begin
  record UserDefRepVc UDRr;
  record UserDefRepICACLVc UDRICACLr;
  Boolean found,testf;
  string 255 index;
  record BaseCurBlock BCb;
  val tot,totcorsp,totbal;

  BlockLoad(BCb);
  if (blank(RepSpec.shortname)) then begin
    UDRr.shortname = RepSpec.repname;
  end else begin
    UDRr.shortname = RepSpec.shortname;
  end;
  if (ReadFirstMain(UDRr,1,true)==false) then begin
    UDRr.shortname = RepSpec.repname;
    if (ReadFirstMain(UDRr,1,true)==false) then begin
      MessageBox(3167,"");
      goto LICACRn;
    end;
  end;  
  StartReportJob(UsetStr(38530));
  EndHeader;
  
  SetRepCol(2,50);
  SetRepCol(3,288);
  SetRepCol(4,384);
  SetRepCol(5,480);

  index = "ShortIDKey:" & RepSpec.shortname;
  UDRICACLr.IdKey = 0; 
  found = true;
  while (LoopKey(index,UDRICACLr,1,found)) begin
    if (found) then begin
      testf = true;
      if (nonblank(RepSpec.f1)) then begin
        if (UDRICACLr.CompCode!=RepSpec.f1) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        ICACPerCompany(RepSpec,BCb,UDRICACLr,tot,totcorsp,totbal);
      end;
    end;
  end;
  if (tot!=0) or (totcorsp!=0) or (totbal!=0) then begin
    Gray_Divider(0,1);
    StartFormat(15);
     OutVal(240,0,tot,M4Val,true);
     OutVal(420,0,totcorsp,M4Val,true);
     OutVal(1,0,totbal,M4Val,true);
    EndFormat;
    StartFormat(15);
    EndFormat;
  end;

  EndJob;
LICACRn:;  
  return;
end;
