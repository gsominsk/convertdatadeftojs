external function string 255 GetRegionName(string);
external procedure PrintRegionVATCodeJ(Array string,Array val,Array val,var Integer);
external procedure AddToRegionVATCodeJ(string,val,val,Array string,Array val,Array val,var Integer);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external procedure GetCurncyComment(string,var string);

procedure GetItemEANTextAndCode(string itemcode,var string eantext,var string eancode)
begin
  record INVc INr;
  record ITVc ITr;
  record CommodityVc Commodityr;
  string 20 ccode;
  
  eantext = USetStr(13831);
  ccode = "";
  INr.Code = itemcode;
  if (ReadFirstMain(INr,1,true)) then begin
    if (nonblank(INr.EUCodex)) then begin
      ccode = INr.EUCodex;
    end else begin
      ITr.Code = INr.Group;
      if (ReadFirstMain(ITr,1,true)) then begin
        if (nonblank(ITr.EUCodex)) then begin
          ccode = ITr.EUCodex;
        end;
      end;
    end;
  end;
  if (nonblank(ccode)) then begin
    Commodityr.Number = ccode;
    if (ReadFirstMain(Commodityr,1,true)) then begin
      eantext = Commodityr.Comment;    
    end;
  end;
  eancode = ccode;

  return;
end;

procedure  GetTaxPerc(string region,string eancode,date wdate,var val tax1perc,var val tax2perc)
begin
  record RSTaxVc RSTaxr;
  row RSTaxVc RSTaxrw;
  integer i,ar;
  string 40 ckey;


  tax1perc = -1;
  tax2perc = -1;
  ckey = "RegionEUCodex:" & eancode;
  RSTaxr.Region = region;
  if (ReadFirstKey("Region",RSTaxr,1,true)) then begin
    if (RSTaxr.RegionTAXPrc>=0) then begin
      tax2perc = RSTaxr.RegionTAXPrc;
    end;
    ar = MatRowCnt(RSTaxr);
    for (i=0;i<ar;i=i+1) begin
      MatRowGet(RSTaxr,i,RSTaxrw);
      if (eancode==RSTaxrw.EUCodex) then begin
        if (RSTaxrw.TAXPrc>=0) then begin
          tax1perc = RSTaxrw.TAXPrc;
          i = ar;
        end;
      end; 
    end;  
  end;
  return;
end;

procedure PrintRegVATCodeJHeader(record RcVc RepSpec)
begin
  string 255 tstr;
  record CYBlock CYr;
  record RegionVc Regionr;
  record BaseCurBlock BaseCurr;

  BlockLoad(CYr);
  BlockLoad(BaseCurr);
 
  tstr = USetStr(13832) & CYr.CompName;
  StartFormat(15);OutString(0,0,tstr,false);EndFormat;
  tstr = USetStr(13833) & CYr.VATNr;
  StartFormat(15);OutString(0,0,tstr,false);EndFormat;
  tstr = USetStr(13834) & CYr.OrgNr;
  StartFormat(15);OutString(0,0,tstr,false);EndFormat;
  tstr = USetStr(13835) & RepSpec.sStartDate & ":" & RepSpec.sEndDate;
  StartFormat(15);OutString(0,0,tstr,false);EndFormat;
  if (RepSpec.basecurncy==0) then begin
    GetCurncyComment(BaseCurr.BaseCur1,tstr);
  end else begin  
    GetCurncyComment(BaseCurr.BaseCur2,tstr);
  end;  
  tstr = USetStr(13838) & tstr;
  StartFormat(15);OutString(0,0,tstr,false);EndFormat;
  if (nonblank(RepSpec.f1)) then begin
    Regionr.Code = RepSpec.f1;
    if (ReadFirstMain(Regionr,1,true)) then begin
      tstr = Regionr.Name;
    end;
    tstr = USetStr(13839) & tstr;
    StartFormat(15);OutString(0,0,tstr,false);EndFormat;
  end;


  Gray_Divider(0,1);
  return;
end;

global
procedure RegVATCodeJRn(record RcVc RepSpec)
begin
  record IVVc IVr;
  row IVVc IVrw;
  boolean TrHs,testf,testfrow;
  string 255 tstr;
  integer i,ar;
  date sdate,edate;
  string 60 eantext;
  string 20 eancode;
  record ORVc ORr; //as temporary array
  row ORVc ORrw,ORrw1; //as temporary array
  longint j,maxr;
  boolean found;
  val sum,t,ssum,stax,tax,tax1per,tax2per;
  Array val regiontotv,regiontaxv;
  Array string 255 regiontot;
  Integer regioncnt;
  string 255 lastregion;
  val lastregionsum,lastregiontax;
  record TaxMatrixVc TMr;

  sdate = RepSpec.sStartDate;
  edate = RepSpec.sEndDate;
  
  StartReportNoHeaderJob(USetStr(13830));
  if (blank(RepSpec.f1)) then begin
    SetRepCol(2,55);
    SetRepCol(3,145);
    SetRepCol(4,220);
    SetRepCol(5,320);
    SetRepCol(6,370);
    SetRepCol(7,430);
  end else begin
    SetRepCol(2,60);
    SetRepCol(4,160);
    SetRepCol(5,330);
    SetRepCol(6,380);
    SetRepCol(7,430);
  end;
  
  PrintRegVATCodeJHeader(RepSpec);
   
  if (blank(RepSpec.f1)) then begin
    StartFormat(15);
    OutString(0,0,USetStr(13840),false);
    OutString(2,0,USetStr(13841),false);
    OutString(3,0,USetStr(13842),false);
    OutString(4,0,USetStr(13843),false);
    OutString(325,0,USetStr(13844),true);
    OutString(380,0,USetStr(13845),true);
    OutString(7,0,USetStr(13846),true);
    OutString(1,0,USetStr(13847),true);
    EndFormat;
  end else begin
    StartFormat(15);
    OutString(0,0,USetStr(13840),false);
    OutString(2,0,USetStr(13841),false);
    OutString(4,0,USetStr(13843),false);
    OutString(5,0,USetStr(13844),true);
    OutString(6,0,USetStr(13845),true);
    OutString(7,0,USetStr(13846),true);
    OutString(1,0,USetStr(13847),true);
    EndFormat;  
  end;
  Gray_Divider(0,1);
  
  TrHs = true;
  maxr = 0;
  IVr.TransDate = sdate;
  While (LoopKey("TransDate",IVr,1,TrHs)) begin
    testf = true; 
    if (IVr.TransDate>edate) then begin
      TrHs = false; testf = false;
    end;
    if (IVr.OKFlag==0) then begin
      testf = false;
    end;
    if (IVr.Invalid<>0) then begin
      testf = false;
    end; 
    if (RepSpec.flags[2]==0) and (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
      testf = false;
    end;
    if (nonblank(RepSpec.f1)) and (RepSpec.f1<>IVr.Region) then begin
      testf = false;   
    end;
    if (blank(IVr.OfficialSerNr)) then begin
      testf = false;       
    end;
    if (testf) then begin
      ar = MatRowCnt(IVr);
      for (i=0;i<ar;i=i+1) begin
        MatRowGet(IVr,i,IVrw);
        testfrow = true;      
        if (blank(IVrw.ArtCode)) or ((IVrw.stp!=kInvoiceRowTypeNormal) and (IVrw.stp!=kInvoiceRowTypeStructuredItemComponent)) then begin
          testfrow = false;
        end;
        if (nonblank(RepSpec.f2)) then begin
          if (SetInSet(IVrw.VATCode,RepSpec.f2)) then begin
            testfrow = false;
          end;
        end;
        if (testfrow) then begin
          found = false;
          GetItemEANTextAndCode(IVrw.ArtCode,eantext,eancode);
          UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
          FindSalesExVat(TMr,IVrw.VATCode,IVrw.Sum,IVr.InclVAT,IVr.NoTAXonVAT,t);
          if (RepSpec.basecurncy==0) then begin
            sum = MulRateToBase1(IVr.CurncyCode,t,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          end else begin
            sum = MulRateToBase2(IVr.CurncyCode,t,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          end;
          if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
            sum  = -sum;
          end;
          
          for (j=0;j<maxr;j=j+1) begin
            MatRowGet(ORr,j,ORrw);
            if (ORrw.PickingTime == eancode) and (ORrw.ShipNote==IVr.OfficialSerNr) then begin
              found = true;
              ORrw.Sum = ORrw.Sum + sum;
              MatRowPut(ORr,j,ORrw);
              j = maxr;
            end;
          end;
          if (not(found)) then begin
            ORrw.ShipNote = IVr.OfficialSerNr;
            ORrw.PickingDate = IVr.TransDate;
            ORrw.VECode = IVr.Region;
            ORrw.Objects = eantext;
            ORrw.PickingTime = eancode;
            ORrw.Sum = sum;
            ORrw.SerialNr = IVr.SerNr;
            MatRowPut(ORr,maxr,ORrw);
            maxr = maxr + 1;
          end;          
        end;
      end;
    end;
  end;
  
  for (i=0;i<maxr-1;i=i+1) begin
    MatRowGet(ORr,i,ORrw);
    for (j=i;j<maxr;j=j+1) begin
      MatRowGet(ORr,j,ORrw1);
      if (ORrw1.VECode<ORrw.VECode) or
        ((ORrw1.VECode==ORrw.VECode) and (ORrw1.PickingDate<ORrw.PickingDate)) or
        ((ORrw1.VECode==ORrw.VECode) and (ORrw1.PickingDate==ORrw.PickingDate) and (ORrw1.VECode<ORrw.VECode)) or
        ((ORrw1.VECode==ORrw.VECode) and (ORrw1.PickingDate==ORrw.PickingDate) and (ORrw1.VECode==ORrw.VECode) and (ORrw1.ShipNote<ORrw.ShipNote)) then begin
        MatRowPut(ORr,j,ORrw);
        MatRowPut(ORr,i,ORrw1);
        MatRowGet(ORr,i,ORrw);
      end;  
    end;
  end;
 
  ssum = 0;
  stax = 0;
  for (j=0;j<maxr;j=j+1) begin
    MatRowGet(ORr,j,ORrw);
    if (lastregion!=ORrw.VECode) then begin
      Gray_Divider(3,1);
      tstr = GetRegionName(lastregion);
      if (blank(tstr)) then begin
        tstr = USetStr(13831);
      end;
      StartFormat(15);
       OutString(3,0,tstr,false);
       OutVal(7,0,lastregionsum,M4Val,true);
       OutVal(1,0,lastregiontax,M4Val,true);
      EndFormat;    
      Gray_Divider(3,1);
      lastregionsum = blankval;
      lastregiontax = blankval;
    end;
    StartFormat(15);
    OutDate(0,0,ORrw.PickingDate,false);
    OutStringID(2,"DblIVVc",ORrw.ShipNote,false,ORrw.SerialNr);
    tstr = GetRegionName(ORrw.VECode);
    if (blank(RepSpec.f1)) then begin
      OutString(3,0,tstr,false);
    end;  
    OutString(4,0,ORrw.Objects,false);

    GetTaxPerc(ORrw.VECode,ORrw.PickingTime,ORrw.PickingDate,tax1per,tax2per);
    if (tax1per>=0) and (nonblank(ORrw.PickingTime)) then begin
      OutVal(5,0,tax1per,M4Val,true);
    end else begin
      OutString(5,0,USetStr(13848),true);
    end;
    if (tax2per>=0) and (nonblank(ORrw.PickingTime)) then begin
      OutVal(6,0,tax2per,M4Val,true);
    end else begin
      OutString(6,0,USetStr(13848),true);
    end;
    OutVal(7,0,ORrw.Sum,M4Val,true);
    if (tax1per<0) then begin tax1per = 0; end;
    if (tax2per<0) then begin tax2per = 0; end;
    tax = ORrw.Sum * tax1per/100 * tax2per/100;
    OutVal(1,0,tax,M4Val,true);
    EndFormat;    
    ssum = ssum + ORrw.Sum;
    stax = stax + tax;
    AddToRegionVATCodeJ(ORrw.VECode,ORrw.Sum,tax,regiontot,regiontotv,regiontaxv,regioncnt);
    lastregion = ORrw.VECode;
    lastregionsum = lastregionsum + ORrw.Sum;
    lastregiontax = lastregiontax + tax;
  end;
  if (lastregionsum!=0) or (lastregiontax!=0) then begin
    Gray_Divider(3,1);
    StartFormat(15);
      OutString(3,0,GetRegionName(lastregion),false);
      OutVal(7,0,lastregionsum,M4Val,true);
      OutVal(1,0,lastregiontax,M4Val,true);
    EndFormat;    
    Gray_Divider(3,1);
  end;
  
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(4,0,USetStr(13849),false);
  OutVal(7,0,ssum,M4Val,true);
  OutVal(1,0,stax,M4Val,true);
  EndFormat;    


  PrintRegionVATCodeJ(regiontot,regiontotv,regiontaxv,regioncnt);
  
  EndJob;

  return;
end;