external function Boolean HasContactClassification();
external function Boolean HasCategories();
external procedure HTLevCat(string,var string);
external procedure HTCustClass(string,var string);
external function Boolean ContactInGroupClass2(string,string,string,string,string,string,string);
external procedure HTOKF(Integer,Integer, var string);
external function Boolean TestArtCodeMatch(string,string);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external function roundmode DefaultRoundMode();
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure BeginCurncyTotals(var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external procedure HTNr(Integer, Integer, LongInt, LongInt, var string);
external procedure HTDetailLevel(Integer, var string);
external procedure HTSupplier(string, var string);
external function Boolean POCheckPlanShipRows(string,record POVc);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure HTCustClass(string,var string);
external procedure HTCustClassType(string,var string);
external function Boolean SetInSet2(string,string);
external procedure ClassTypef(string,string,var Boolean);

procedure CalcSumFact(var val t,val fact)
BEGIN
  val t2;
  
  if (fact!=0) then begin
    t2 = t/fact;
    t = Round(t2,DefaultRoundMode);
  end;
  RETURN;
END;

procedure POValue(record RcVc RepSpec,record POVc POp,var val notshipd,var val notinvd,Integer UseDiscount,Integer showqtys)
BEGIN
  row POVc POrw;
  Integer i,rwcnt;
  val t,t2,sum;
  string 255 prcode;
  Boolean testf;
  
  notshipd = blankval;
  notinvd = blankval;
  rwcnt = MatRowCnt(POp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POp,i,POrw);
    testf = true;
    if (nonblank(RepSpec.AccStr)) then begin
      prcode = POrw.PRCode;
      if (blank(prcode)) then begin
        prcode = POp.PRCode;
      end;
      if (RepSpec.AccStr!=prcode) then begin testf = false; end;
    end;
    if (testf) then begin
      t = POrw.Quant - POrw.Shipd2;
      t2 = POrw.Quant - POrw.Invd;
      if (showqtys==0) then begin
        CalcSum(t,POrw.Price,POrw.PriceFactor,POrw.vRebate,sum,UseDiscount);
        CalcSumFact(sum,POrw.PIFactor);
        notshipd = notshipd + sum;
        CalcSum(t2,POrw.Price,POrw.PriceFactor,POrw.vRebate,sum,UseDiscount);
        CalcSumFact(sum,POrw.PIFactor);
        notinvd = notinvd + sum;
      end else begin
        notshipd = notshipd + t;
        notinvd = notinvd + t2;
      end;
    end;
  end;
  RETURN;
END;

function Boolean HasShippedQty(record POVc POp,Integer opt)
begin
  Boolean res;
  row POVc POrw;
  Integer i,rwcnt;
  val rcvd,rcvdok,qty;
  
  rwcnt = MatRowCnt(POp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POp,i,POrw);
    rcvd = POrw.Shipd1;
    rcvdok = POrw.Shipd2;
    qty = POrw.Quant;
    switch (opt) begin
      case 1:
        if (rcvd==0) and (qty!=0) then begin
          res = true;
        end;  
      case 2:
        if ((rcvdok<qty) and (rcvdok!=0)) or (rcvd!=0) then begin
          res = true;
        end;  
    end;
    if (res) then begin
      i = rwcnt;
    end;
  end;
  HasShippedQty = res;
  return;
end;

procedure RepPOStock(record RcVc RepSpec,record POVc POp,var val minordsump,Integer UseDiscount)
BEGIN
  row POVc POrw;
  Integer i,rwcnt;
  val qty,rowv,tot;
  Boolean testf;
  string 255 prcode;

  StartFormat(15);
  OutLongInt(0,"DblPOVc",POp.SerNr,false);
  OutDate(130,0,POp.TransDate,false);
  OutString(220,0,POp.PayDeal,false);
  OutString(480,0,POp.PlanShip,true);
  EndFormat;
  StartFormat(15);
  OutString(50,0,POp.VECode,false);
  OutString(200,0,POp.Addr0,false);
  EndFormat;
  StartFormat(15);
  OutString(200,0,POp.Addr1,false);
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(50,0,POp.OurContact,false);
  OutString(200,0,POp.Addr2,false);
  EndFormat;
  StartFormat(15);
  OutString(200,0,POp.Addr3,false);
  EndFormat;
  StartFormat(15);
  OutString(200,0,POp.VEContact,false);
  OutString(480,0,POp.CurncyCode,true);
  EndFormat;
  rwcnt = MatRowCnt(POp);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(POp,i,POrw);
    if (POrw.stp==1) then begin
      testf = true;
      if (RepSpec.OnlyUnprntd!=0) then begin
        if (POrw.Quant<=POrw.Shipd2) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.AccStr)) then begin
        prcode = POrw.PRCode;
        if (blank(prcode)) then begin
          prcode = POp.PRCode;
        end;
        if (RepSpec.AccStr!=prcode) then begin testf = false; end;
      end;
      if (blank(POrw.ArtCode)) then begin
        testf = false;
      end;
      if (testf) then begin
        qty = POrw.Quant - POrw.Shipd1;
        CalcSum(qty,POrw.Price,POrw.PriceFactor,POrw.vRebate,rowv,UseDiscount);
        CalcSumFact(rowv,POrw.PIFactor);
        StartFormat(15);
        OutString(20,0,POrw.ArtCode,false);
        OutValBiDi(95,0,qty,M4UVal,true,150);
        OutString(100,0,POrw.PlanShipRow,false);
        OutString(170,0,POrw.Spec,false);
        OutValBiDi(380,0,POrw.Price,M423Val,true,420);
        OutValBiDi(420,0,POrw.vRebate,M41Val,true,460);
        OutValBiDi(480,0,rowv,M4Val,true,520);
        EndFormat;
        if (rowv>=0) then begin
          tot = tot + rowv;
        end;
      end;
    end;
  end;
  Gray_Divider(350,480);
  StartFormat(15);
  OutValBiDi(400,0,minordsump,M4Val,true,440);
  OutValBiDi(480,0,tot,M4Val,true,520);
  EndFormat;
  RETURN;
END;

procedure POStockNotShipped(record RcVc RepSpec,record POVc POp)
BEGIN
  row POVc POrw;
  Integer i,rwcnt;
  val t;
  Boolean testf;
  string 255 prcode;

  StartFormat(15);
  OutLongInt(0,"DblPOVc",POp.SerNr,false);
  OutDate(130,0,POp.TransDate,false);
  OutString(210,0,POp.VECode,false);
  OutString(300,0,POp.Addr0,false);
  OutString(480,0,POp.PlanShip,true);
  EndFormat;
  if (nonblank(POp.Addr1)) then begin
    StartFormat(15);
    OutString(300,0,POp.Addr1,false);
    StartFormat(15);
  end;
  EndFormat;
  if (nonblank(POp.Addr2)) then begin
    StartFormat(15);
    OutString(300,0,POp.Addr2,false);
    EndFormat;
  end;
  if (nonblank(POp.Addr3)) then begin
    StartFormat(15);
    OutString(300,0,POp.Addr3,false);
    EndFormat;
  end;
  StartFormat(10);
  EndFormat;
  StartFormat(15);
  OutStringAdjustBiDi(315,0,USetStr(2633),true,M4Val,365);
  OutStringAdjustBiDi(360,0,USetStr(2631),true,M4Val,410);
  OutStringAdjustBiDi(420,0,USetStr(5051),true,M4Val,460);
  OutStringAdjustBiDi(480,0,USetStr(2630),true,M4Val,520);
  EndFormat;
  rwcnt = MatRowCnt(POp);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(POp,i,POrw);
    if (POrw.stp==1) then begin
      testf = true;
      if (RepSpec.OnlyUnprntd!=0) then begin
        if (POrw.Quant<=POrw.Shipd2) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.AccStr)) then begin
        prcode = POrw.PRCode;
        if (blank(prcode)) then begin
          prcode = POp.PRCode;
        end;
        if (RepSpec.AccStr!=prcode) then begin testf = false; end;
      end;
      if (blank(POrw.ArtCode)) then begin
        testf = false;
      end;
      if (testf) then begin
        StartFormat(15);
        OutString(20,0,POrw.ArtCode,false);
        OutString(104,0,POrw.Spec,false);
        OutValBiDi(315,0,POrw.Invd,M4UVal,true,365);
        OutValBiDi(360,0,POrw.Quant,M4UVal,true,410);
        OutValBiDi(420,0,POrw.Shipd2,M4UVal,true,460);
        t = POrw.Quant - POrw.Shipd1;
        OutValBiDi(480,0,t,M4UVal,true,520);
        EndFormat;
      end;
    end;
  end;
  RETURN;
END;

function
Boolean MyHasOrderedQty(record POVc POp,record RcVc RepSpec,String ItemCode)
BEGIN
  Boolean res;
  row POVc POrw;
  Integer i,rwcnt;
  val t, pending;
 
 if (blank(ItemCode)) then begin 
    res = false;
    goto DoExit; 
  end;
  res = false;
  rwcnt = MatRowCnt(POp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POp,i,POrw);
    t = POrw.Quant + t;
    if (RepSpec.flags[2]!=0) then begin
      pending = POrw.Quant - POrw.Shipd2;
    end;
    if (RepSpec.flags[3]!=0) then begin
      pending = POrw.Quant - POrw.Shipd2;
    end;
    if (RepSpec.flags[6]!=0) then begin
      pending = POrw.Quant - POrw.Invd;
    end;
    if ((POrw.ArtCode == ItemCode) and (pending==0)) then begin
      res = false;
      goto DoExit;
    end;
  end;
  if (t==0) then begin
    res = true;
  end; 
DoExit:;
  MyHasOrderedQty = res;
  return;
end;

global 
procedure POOrdStockRn(record RcVc RepSpec)
begin
  record CUVc VEr;
  record INVc INr;  
  record POVc POr;
  row POVc POrw;
  Boolean TrHs,testf,test2f;
  val t,t2;
  Integer i,rwcnt;
  Boolean item;
  string 255 frgr,togr;  
  val TotQty,TotLev,TotNotLev,TotInv,TotSum,TotNotinvd;
  LongInt afr,ato;
  string 255 ckey;
  val minsum;
  string 255 tstr,planship;
  Integer rw;
  record GeneralOptionBlock GenOptRec;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt;
  string 255 prcode;
  val notshipd,notinvd;
  string 60 sz,msk,mskrep;
  string 200 varsubset;

  afr = FirstInRange(RepSpec.f1,10);
  ato = LastInRange(RepSpec.f1,10);
  frgr = FirstInRange(RepSpec.f3,10);
  togr = LastInRange(RepSpec.f3,10);
  BlockLoad(GenOptRec);
  BeginCurncyTotals(curcnt);
    
  StartReportJob(USetStr(5041));
  if (RepSpec.PocketPC==0) then begin
    rw = 1;
    HTNr(1823,1822,afr,ato,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
    HTDetailLevel(RepSpec.ArtMode,tstr);
    Header(rw,tstr,0);
    HTSupplier(RepSpec.f2,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;  
    if (nonblank(RepSpec.LastAcc)) then begin
      tstr = USetStr(1107) & RepSpec.LastAcc;
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    if (nonblank(RepSpec.TransStr)) then begin
      tstr = USetStr(2768) & RepSpec.TransStr;
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end else begin
   rw = 1; 
   HTDetailLevel(RepSpec.ArtMode,tstr);
   Header(rw,tstr,0);
   rw = rw + 1;
  end;
  if (HasContactClassification) then begin
    HTCustClass(RepSpec.f4,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  HTCustClassType(RepSpec.f5,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end; 
  if (HasCategories) then begin
    HTLevCat(RepSpec.f8,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  HTOKF(RepSpec.flags[7],RepSpec.flags[8],tstr);
  Header(rw,tstr,0);
  EndHeader;
  SetRepCol(2,404);
  SetRepCol(3,520-(2*96));
  SetRepCol(4,540-(3*96));
  SetRepCol(5,430);
  SetRepColBiDi(6,410,450);
  SetRepColBiDi(7,466,500);
  if (RepSpec.ArtMode==0) then begin
    if (RepSpec.PocketPC==0) then begin
      StartFormat(15);
      OutString(0,0,USetStr(5042),false);
      OutString(60,0,USetStr(5043),false);
      OutString(140,0,USetStr(5044),false);
      if (RepSpec.flags[4]!=0) then begin
        OutStringAdjustBiDi(360,0,USetStr(5056),true,M4Val,370);
      end;  
      OutStringAdjust(6,0,USetStr(18880),true,M4Val);
      OutStringAdjust(7,0,USetStr(5047),true,M4Val);
      EndFormat;
    end else begin
      StartFormat(15);
      OutString(0,0,USetStr(5042),false);
      OutString(100,0,USetStr(5044),false);
      OutString(1,0,USetStr(5047),true);
      EndFormat;
    end;
  end;
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
    OutString(0,0,USetStr(5042),false);
    OutString(130,0,USetStr(5043),false);
    OutString(210,0,USetStr(5044),false);
    if (RepSpec.flags[4]!=0) then begin
      OutString(400,0,USetStr(5056),true);
    end;  
    OutString(480,0,USetStr(5053),true);
    EndFormat;
  end;
  if (RepSpec.ArtMode==2) then begin
    if (RepSpec.flags[10]==0) then begin
      StartFormat(15);
      OutString(0,0,USetStr(5042),false);
      OutString(50,0,USetStr(5043),false);
      OutString(110,0,USetStr(5053),false);
      OutString(165,0,USetStr(5052),false);
      OutStringAdjustBiDi(335,0,USetStr(5054),true,M4Val,340);
      OutStringAdjustBiDi(395,0,USetStr(2640),true,M4Val,420);
      OutStringAdjustBiDi(455,0,USetStr(5045),true,M4Val,490);
      EndFormat;
    end;
    if (RepSpec.flags[10]==1) then begin//quantity
      StartFormat(15);
      OutString(0,0,USetStr(5042),false);
      OutString(50,0,USetStr(5043),false);
      OutString(110,0,USetStr(5053),false);
      OutString(175,0,USetStr(5052),false);
      OutStringAdjustBiDi(260,0,USetStr(2631),true,M4Val,320);
      OutStringAdjustBiDi(330,0,USetStr(5051),true,M4Val,385);
      OutStringAdjustBiDi(410,0,USetStr(5054),true,M4Val,455);
      OutStringAdjustBiDi(1,0,USetStr(18880),true,M4Val,520);
      EndFormat;
    end;
  end;
  Gray_Divider(0,1);
  POr.SerNr = afr;
  POr.OSFlag = 1;
  POr.OrderStockFlag = 1;
  POr.VECode = "";
  if (RepSpec.flags[6]!=0) then begin // Not Invoiced 
    ckey = "OrderStockFlag";
  end else begin
    ckey = "OSFlag";
  end;
  if (RepSpec.ArtMode==0) then begin
    Gray_Divider(0,1);
  end;  
  TrHs = true;
  while (LoopKey(ckey,POr,2,TrHs)) begin
    if (TrHs) then begin
      if (ato!=-1) then begin
        if (POr.SerNr>ato) then begin
          TrHs = false;
        end;
      end;    
    end;
    if (TrHs) then begin
      testf = false;
      if (RepSpec.flags[2]!=0) then begin // Not Shipped 
        if ((POr.PUFlag==0) and HasShippedQty(POr,1)) then begin testf = true; end;
      end;
      if (RepSpec.flags[3]!=0) then begin // Part Shipped 
        if ((POr.PUFlag==0) and HasShippedQty(POr,2)) then begin testf = true; end;
      end;
      if (RepSpec.flags[6]!=0) then begin // Not Invoiced 
        if (POr.InvFlag<1) then begin 
          if (POr.PUFlag!=0) then begin
            testf = true; 
          end;
        end;
      end else begin
        if (POr.PUFlag==1) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.TransStr)) then begin
        if (RepSpec.TransStr!=POr.Location) then begin testf = false; end;
      end;  
      if (nonblank(RepSpec.f7)) then begin 
        if (POr.OrderType!=SetFromString(433,RepSpec.f7)) then begin testf = false; end;
      end;
      if (POr.OKFlag==0) then begin
        if (RepSpec.flags[7]==0) then begin testf = false; end;
      end;
      if (POr.OKFlag!=0) then begin
        if (RepSpec.flags[8]==0) then begin testf = false; end;
      end;      

/*      
      if (nonblank(RepSpec.AccStr)) then begin
        if (RepSpec.AccStr!=POr.PRCode) then begin testf = false; end;
      end;  
*/      
      if (nonblank(RepSpec.f2) and (RepSpec.f2!=POr.VECode)) then begin 
        testf = false; 
      end;
      if (MyHasOrderedQty(POr,RepSpec,RepSpec.LastAcc)) then begin testf = false; end;
      if (testf) then begin
        if (nonblank(RepSpec.Stext)) then begin
          if (POCheckPlanShipRows(RepSpec.Stext,POr)==false) then begin testf = false; end;
        end;
      end;
      if (testf) then begin
        testf = ContactInGroupClass2(POr.VECode,RepSpec.f8,RepSpec.f4,RepSpec.f5,"SUPP","","");
      end;      
      rwcnt = MatRowCnt(POr);

      item = false;
      if ((testf) and (nonblank(RepSpec.LastAcc))) then begin        
        for (i = 0 ; i<rwcnt ;i=i+1) begin
          MatRowGet(POr,i,POrw);
          if (POrw.stp==1) then begin
            if (TestArtCodeMatch(POrw.ArtCode,RepSpec.LastAcc)) then begin
              item = true;
              i = rwcnt;
            end;
          end;
        end;
        if (item==false) then begin testf = false; end;
      end;

      item = false;
      if ((testf) and (nonblank(RepSpec.f3) or nonblank(RepSpec.f6))) then begin        
        for (i = 0 ; i<rwcnt ;i=i+1) begin
          MatRowGet(POr,i,POrw);
          if (ReadFirstItem(POrw.ArtCode,INr,true,false)) then begin
            item = true;
            if (nonblank(RepSpec.f3)) then begin
              if ((INr.Group<frgr) or (INr.Group>togr)) then begin
                item = false;
              end;
            end;
            if (nonblank(RepSpec.f6)) then begin
              if (SetInSet(RepSpec.f6,INr.DispGroups)==false) then begin
                item = false;
              end;
            end;
            if (item) then begin
              i = rwcnt;
            end;
          end;
        end;
        if (item==false) then begin testf = false; end;
      end;

      item = false;
      if ((testf) and (nonblank(RepSpec.Stext))) then begin        
        for (i = 0 ; i<rwcnt ;i=i+1) begin
          MatRowGet(POr,i,POrw);
          if (nonblank(POrw.PlanShipRow)) then begin
            if (POrw.PlanShipRow==RepSpec.Stext) then begin
              item = true;
            end;
          end else begin
            if ((POr.PlanShip==RepSpec.Stext) or (blank(POr.PlanShip))) then begin // Should the ones without planned date appear or not?
              item = true;
            end;
          end;
        end;
        if (item==false) then begin testf = false; end;
      end;

      if ((testf) and (nonblank(RepSpec.AccStr))) then begin        
        item = false;
        for (i = 0 ; i<rwcnt ;i=i+1) begin
          MatRowGet(POr,i,POrw);
          if (POrw.stp==1) then begin
            if (nonblank(RepSpec.AccStr)) then begin
              prcode = POrw.PRCode;
              if (blank(prcode)) then begin
                prcode = POr.PRCode;
              end;
              if (RepSpec.AccStr==prcode) then begin 
                item = true; 
                i = rwcnt;                
              end;
            end;              
          end;
        end;
        if (item==false) then begin testf = false; end;
      end;

      if (nonblank(RepSpec.ObjType)) then begin 
        if (POr.POClass!=RepSpec.ObjType) then begin 
          testf = false; 
        end;
      end;
      if (testf) then begin
        minsum = blankval;
        if (RepSpec.flags[4]!=0) then begin          
          VEr.Code = POr.VECode;
          if (ReadFirstMain(VEr,1,true)) then begin
            minsum = VEr.MinOrdSum;
          end;
        end;
        if (RepSpec.ArtMode==1) then begin
          Gray_Divider(0,1);
          if (RepSpec.flags[10]==0) then begin
            RepPOStock(RepSpec,POr,minsum,GenOptRec.UseDiscount); 
          end else begin
            POStockNotShipped(RepSpec,POr); //break;?
          end;
          POValue(RepSpec,POr,notshipd,notinvd,GenOptRec.UseDiscount,RepSpec.flags[10]);
          AddCurncyTotals(acur,av1,curcnt,POr.CurncyCode,notshipd);
          AddCurncyTotals(acur,av2,curcnt,POr.CurncyCode,notinvd);
        end;
        if (RepSpec.ArtMode==0) then begin
          POValue(RepSpec,POr,notshipd,notinvd,GenOptRec.UseDiscount,RepSpec.flags[10]);
          AddCurncyTotals(acur,av1,curcnt,POr.CurncyCode,notshipd);
          AddCurncyTotals(acur,av2,curcnt,POr.CurncyCode,notinvd);
          if (RepSpec.PocketPC==0) then begin
            StartFormat(15);
            OutLongInt(0,"DblPOVc",POr.SerNr,false);
            if (RepSpec.flags[5]!=0) then begin
              OutString(60,0,POr.PlanShip,false);
            end else begin
              OutDate(60,0,POr.TransDate,false);
            end;  
            OutString(140,0,POr.Addr0,false);
            if (RepSpec.flags[4]!=0) then begin
              OutValBiDi(360,0,minsum,M4Val,true,370);
            end;  
            OutVal(6,0,notinvd,M4Val,true);
            OutVal(7,0,notshipd,M4Val,true);
            if (RepSpec.flags[10]==0) then begin
              OutString(470,0,POr.CurncyCode,false);
            end;
            EndFormat;
          end else begin
            StartFormat(15);
            OutLongInt(0,"DblPOVc",POr.SerNr,false);
            OutString(100,0,Left(POr.Addr0,15),false);
            OutVal(400,0,notinvd,M4Val,true);
            OutVal(466,0,notshipd,M4Val,true);
            OutString(465,0,POr.CurncyCode,false);
            EndFormat;
          end;
        end;
        if (RepSpec.ArtMode==2) then begin
          rwcnt = MatRowCnt(POr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(POr,i,POrw);
            testf = true;
            if (nonblank(RepSpec.LastAcc)) then begin
              if (FindItemVAR(POrw.ArtCode,sz,msk,mskrep,varsubset)) then begin
                if (Left(POrw.ArtCode,Len(RepSpec.LastAcc))!=RepSpec.LastAcc) then begin 
                  testf = false;
                end;
              end else begin
                if (POrw.ArtCode!=RepSpec.LastAcc) then begin 
                  testf = false;
                end;
              end;
            end;                    
            if (testf) then begin
              test2f = true;
              if (nonblank(RepSpec.f3) or nonblank(RepSpec.f6)) then begin
                if (ReadFirstItem(POrw.ArtCode,INr,true,false)) then begin
                  if (nonblank(RepSpec.f3)) then begin
                    if (INr.Group<frgr) then begin test2f = false; end;
                    if (INr.Group>togr) then begin test2f = false; end;
                  end;
                  if (nonblank(RepSpec.f6)) then begin
                    if (SetInSet(RepSpec.f6,INr.DispGroups)==false) then begin
                      test2f = false;
                    end;
                  end;
                end;
              end;
              if (RepSpec.OnlyUnprntd!=0) then begin
                if (POrw.Quant==POrw.Shipd1) then begin test2f = false; end;
              end;
              if (nonblank(POrw.PlanShipRow)) then begin
                planship = POrw.PlanShipRow;
                if (nonblank(RepSpec.Stext)) then begin
                  if ((POrw.PlanShipRow!=RepSpec.Stext) and (nonblank(POrw.PlanShipRow))) then begin
                    test2f = false;
                  end;
                end;
              end else begin
                planship = POr.PlanShip;
                if (nonblank(RepSpec.Stext)) then begin
                  if ((POr.PlanShip!=RepSpec.Stext) and (nonblank(POr.PlanShip))) then begin
                    test2f = false;
                  end;
                end;
              end;
              if (nonblank(RepSpec.AccStr)) then begin
                prcode = POrw.PRCode;
                if (blank(prcode)) then begin
                  prcode = POr.PRCode;
                end;
                if (RepSpec.AccStr!=prcode) then begin test2f = false; end;
              end;
              if (blank(POrw.ArtCode)) then begin
                test2f = false;
              end;              
              if (test2f) then begin
                StartFormat(15);
                OutLongInt(0,"DblPOVc",POr.SerNr,false);
                OutDate(50,0,POr.TransDate,false);
                OutString(110,0,planship,false);
                OutString(165,0,POrw.ArtCode,false);
                if (RepSpec.flags[10]==0) then begin
                  t = POrw.Quant - POrw.Shipd1;
                  CalcSum(t,POrw.Price,POrw.PriceFactor,POrw.vRebate,t2,GenOptRec.UseDiscount);
                  CalcSumFact(t2,POrw.PIFactor);
                  OutValBiDi(335,0,t,M4UVal,true,340);
                  OutValBiDi(395,0,POrw.Price,M4Val,true,420);
                  OutValBiDi(455,0,t2,M4Val,true,490);
                  OutString(465,0,POr.CurncyCode,false);
                  TotQty = TotQty + t;
                  AddCurncyTotals(acur,av1,curcnt,POr.CurncyCode,t2);
                end;
                if (RepSpec.flags[10]==1) then begin
                      // here we should use the factor to calculate the correct price!!! 
                  OutValBiDi(260,0,POrw.Quant,M4UVal,true,320);
                  OutValBiDi(330,0,POrw.Shipd1,M4UVal,true,385);
                  t = POrw.Quant - POrw.Shipd1;
                  if (t<0) then begin t = blankval; end;
                  TotNotLev = TotNotLev + t;
                  OutValBiDi(410,0,t,M4UVal,true,455);
                  t = POrw.Quant - POrw.Invd;
                  OutValBiDi(1,0,t,M4UVal,true,520);
                  TotNotinvd = TotNotinvd + t;
                  TotLev = TotLev + POrw.Shipd1;
                  TotQty = TotQty + POrw.Quant;
                end;
                EndFormat;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  Gray_Divider(0,1);
  if (RepSpec.ArtMode==2) then begin
    StartFormat(15);
    if (RepSpec.flags[10]==0) then begin
      OutValBiDi(335,0,TotQty,M4UVal,true,340);
    end;
    if (RepSpec.flags[10]==1) then begin
      OutValBiDi(260,0,TotQty,M4UVal,true,320);
      OutValBiDi(330,0,TotLev,M4UVal,true,385);
      OutValBiDi(410,0,TotNotLev,M4UVal,true,455);
      OutValBiDi(1,0,TotNotinvd,M4UVal,true,520);
    end;
    EndFormat;
  end;
  switch (RepSpec.ArtMode) begin
    case 0:
      PrintCurncyTotals(acur,av3,av2,av1,curcnt,-1,6,465,300,true,RepSpec.PocketPC);
    case 1:
      PrintCurncyTotals(acur,av3,av2,av1,curcnt,-1,6,1,300,true,RepSpec.PocketPC);
    case 2:
      PrintCurncyTotals(acur,av3,av2,av1,curcnt,-1,6,455,300,true,RepSpec.PocketPC);
  end;
  Gray_Divider(0,1);
  EndJob;
  RETURN;
END;
