external function Boolean HasContactClassification();
external procedure HTCustClass(string,var string);
external function Boolean SetInSet2(string,string);
external function val MulWithRateToBase2(var string,Date,val,roundmode);
external function val MulWithRateToBase1(var string,Date,val,roundmode);

procedure RepCo(record COVc COr)
begin
  Integer k;
  Integer rwc;
  row COVc COrws;
  val x;

  StartFormat(15);
  OutStringID(0,"DblCOVc",COr.SerNr,false,COr.ChildSerNr);
  OutDate(130,0,COr.CODate,false);
  if (COr.OKFlag==0) then begin
   OutString(480,0,USetStr(2366),true);
  end;
  EndFormat;
  StartFormat(15);
  OutDate(50,0,COr.startDate,false);
  OutDate(200,0,COr.endDate,false);
  EndFormat;
  StartFormat(15);
  OutString(50,0,COr.CustCode,false);
  OutString(200,0,COr.Addr0,false);
  EndFormat;
  StartFormat(15);
  OutString(50,0,COr.CustCat,false);
  OutString(200,0,COr.Addr1,false);
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(50,0,COr.OurContact,false);
  OutString(200,0,COr.Addr2,false);
  EndFormat;
  if (nonblank(COr.Addr3)) then begin
   StartFormat(15);
   OutString(200,0,COr.Addr3,false);
   EndFormat;
  end;
  if (nonblank(COr.ClientContact)) then begin
   StartFormat(15);
   OutString(200,0,COr.ClientContact,false);
   EndFormat;
  end;
  if (nonblank(COr.CurncyCode)) then begin
   StartFormat(15);
   OutString(460,0,COr.CurncyCode,true);
   EndFormat;
  end;
  rwc = MatRowCnt(COr);
  for (k = 0 ; k<rwc ;k=k+1) begin
   MatRowGet(COr,k,COrws);
   if COrws.stp == 1 then begin
    StartFormat(15);
    OutString(20,0,COrws.ArtCode,false);
    OutString(124,0,COrws.Quant,true);
    OutString(130,0,COrws.Spec,false);
    OutString(340,0,COrws.Price,true);
    OutString(370,0,COrws.vRebate,true);
    OutString(460,0,COrws.Sum,true);
    if (COrws.RowType==1) then begin
      OutString(465,0,"*",false); // Should have some other design :-D
    end;
    OutString(480,0,COrws.VATCode,true);
    EndFormat;
   end;
  end;
  if (COr.FrPrice<>0) then begin
   x=1;
   StartFormat(15);
   OutString(20,0,COr.FrItem,false);
   OutString(124,0,x,true);
   OutString(340,0,COr.FrPrice,true);
   OutString(460,0,COr.FrPrice,true);
   OutString(480,0,COr.FrVATCode,true);
   EndFormat;
  end;
  Black_Divider(380,460);
  StartFormat(15);
  if (COr.ExportFlag!=0) then begin
   OutString(20,0,USetStr(2367),false);
  end;
  OutString(100,0,COr.Objects,false);
  OutString(260,0,COr.Sum1,true);
  OutString(360,0,COr.Sum3,true);
  OutString(460,0,COr.Sum4,true);
  EndFormat;
return;
end;


procedure PrintCOListTotals(string curcode,val subtot,val totsum)
begin
  StartFormat(15);
  OutString(260,0,USetStr(7257),false);
  OutString(440,0,subtot,true);
  OutString(445,0,curcode,false);
  EndFormat;
  StartFormat(15);
  OutString(260,0,USetStr(7258),false);
  OutString(440,0,totsum,true);
  OutString(445,0,curcode,false);
  EndFormat;
  return;
end;

function Boolean TestItemSelection(record COVc COr,string withitem,string withoutitem,Integer andflag)
begin
  row COVc COrw;
  Integer i;
  Integer rwcnt;
  Boolean res;
  Boolean ison;
  Boolean isnoton;

  res = true;
  ison = true;
  isnoton = true;
  rwcnt = MatRowCnt(COr);
  if ((nonblank(withitem)) or (nonblank(withoutitem))) then begin
    if (nonblank(withitem)) then begin
      ison = false;
    end;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(COr,i,COrw);
      if (COrw.stp == 1) then begin
        if ((nonblank(withitem)) and (nonblank(COrw.ArtCode))) then begin
          if (SetInSet(COrw.ArtCode,withitem)) then begin
            ison = true;
          end;
        end;
        if (nonblank(withoutitem)) then begin
          if (SetInSet(COrw.ArtCode,withoutitem)) then begin
            isnoton = false;
          end;
        end;
      end;
    end;
  end;
  if (andflag==1) then begin
    if ((ison==false) and (isnoton==false)) then begin
      res = false;
    end;
  end else begin
    if ((ison==false) or (isnoton==false)) then begin
      res = false;
    end;
  end;
  TestItemSelection = res;
  return;
end;

procedure PrintContractHeading(record RcVc RepSpec)
begin
  if (nonblank(RepSpec.f5)) then begin
    Black_Divider(0,1);
    StartFormat(15);
    EndFormat;
    StartFormat(15);
    OutString(0,0,USetStr(14162),false);
    OutString(60,0,RepSpec.f5,false);
    OutString(120,0,RepSpec.f6,false);
    EndFormat;
    Gray_Divider(0,1);
  end;
  if (RepSpec.ArtMode==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(7250),false);
    OutString(50,0,USetStr(7252),false);
    OutString(285,0,USetStr(7253),false);
    OutString(365,0,USetStr(7254),false);
    OutString(445,0,USetStr(7255),false);
    EndFormat;
  end;
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
    OutString(0,0,USetStr(7250),false);
    OutString(130,0,USetStr(7251),false);
    EndFormat;
  end;
  if (RepSpec.ArtMode==0) then begin
    Gray_Divider(0,1);
  end; 
  return;
end;

function val COReportRn(record RcVc RepSpec,LongInt afr,LongInt ato,string frcc,string tocc)
begin
  record COVc COr;
  record CUVc CUr;
  record CCatVc CCatR;
  record BaseCurBlock bascur;
  Boolean testf;
  Boolean TrHs;
  Boolean found;
  Boolean curncyflag;
  Boolean datesort;
  String 20 mykey;
  Integer cocnt;
  val Tot1Sum,Tot2Sum;
  val sub1tot,sub2tot;
  val res;
  Boolean firstf;

  BlockLoad(bascur);
  curncyflag = false;
  datesort = false;
  cocnt = 0;
  firstf = true;
  Tot1Sum = 0;
  Tot2Sum = 0;
  sub1tot = 0;
  sub2tot = 0;
  res = 0;
  COr.SerNr = afr;
  COr.ChildSerNr = "";
  TrHs = true;
  while (LoopMain(COr,2,TrHs)) begin
    TrHs = true;
    if (TrHs) then begin
      if (ato <> -1) then begin
       if (COr.SerNr>ato) then begin
        TrHs = false;
       end;
      end;
    end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.f2)) then begin
       if (frcc>COr.CustCode) then begin
        testf = false;
       end;
       if (tocc<COr.CustCode) then begin
        testf = false;
       end;
      end;
      switch (RepSpec.flags[1]) begin
        case 1:
          if (COr.OKFlag!=0) then begin
            testf = false;
          end;
        case 2:
          if (COr.OKFlag==0) then begin
            testf = false;
          end;
      end;
      switch (RepSpec.flags[3]) begin
        case 1:
          if (COr.Accepted!=0) then begin
            testf = false;
          end;
        case 2:
          if (COr.Accepted==0) then begin
            testf = false;
          end;
      end;
      if (nonblank(RepSpec.LastAcc)) then begin
        if (COr.VECode!=RepSpec.LastAcc) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        testf = TestItemSelection(COr,RepSpec.f3,RepSpec.f4,RepSpec.flags[2]);
      end;
      if (nonblank(RepSpec.FirstAcc)) then begin
        if (RepSpec.FirstAcc<>COr.ContractClass) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.ObjStr)) then begin
        if (RepSpec.ObjStr<>COr.CurncyCode) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.ObjType)) then begin
        if (RepSpec.ObjType<>COr.PriceList) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        CUr.Code = COr.CustCode;
        if (ReadFirstMain(CUr,1,true)) then begin
          if (nonblank(RepSpec.AccStr)) then begin
            if (CUr.CustCat!=RepSpec.AccStr) then begin
              testf = false;
            end;
          end;
          if (nonblank(RepSpec.Stext)) then begin
            if (SetInSet2(RepSpec.Stext,CUr.Classification)==false) then begin
              testf = false;
            end;
          end;
        end;
      end;
      if (testf) then begin
       if (firstf) then begin
         PrintContractHeading(RepSpec);
         firstf = false;
       end;
       cocnt=cocnt+1;
       if (RepSpec.ArtMode==1) then begin
        Gray_Divider(0,1);
        RepCo(COr);
       end;
       if (RepSpec.ArtMode==0) then begin
        StartFormat(15);
        OutStringID(0,"DblCOVc",COr.SerNr,false,COr.ChildSerNr);
        OutString(50,"DblCUVc",COr.CustCode,false);
        OutString(120,0,COr.Addr0,false);
        OutDate(320,0,COr.startDate,true);
        OutDate(400,0,COr.endDate,true);
        OutDate(480,0,COr.lastInvDate,true);
        EndFormat;
       end;
       if ((RepSpec.ArtMode==0) or (RepSpec.ArtMode==1)) then begin
         if ((RepSpec.IncDaughter==0) or (RepSpec.basecurncy==0)) then begin
           sub1tot = sub1tot + MulWithRateToBase1(COr.CurncyCode,CurrentDate,COr.Sum1,DefaultCurRoundOff);
           sub2tot = sub2tot + MulWithRateToBase2(COr.CurncyCode,CurrentDate,COr.Sum1,DefaultCurRoundOff);
           Tot1Sum = Tot1Sum + MulWithRateToBase1(COr.CurncyCode,CurrentDate,COr.Sum4,DefaultCurRoundOff);
           Tot2Sum = Tot2Sum + MulWithRateToBase2(COr.CurncyCode,CurrentDate,COr.Sum4,DefaultCurRoundOff);
         end else begin
           sub1tot = sub1tot + MulWithRateToBase2(COr.CurncyCode,CurrentDate,COr.Sum1,DefaultCurRoundOff);
           sub2tot = sub2tot + MulWithRateToBase1(COr.CurncyCode,CurrentDate,COr.Sum1,DefaultCurRoundOff);
           Tot1Sum = Tot1Sum + MulWithRateToBase2(COr.CurncyCode,CurrentDate,COr.Sum4,DefaultCurRoundOff);
           Tot2Sum = Tot2Sum + MulWithRateToBase1(COr.CurncyCode,CurrentDate,COr.Sum4,DefaultCurRoundOff);
         end;
       end;
      end;
    end;
  end;
  if (firstf==false) then begin
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(0,0,USetStr(7256),false);
    OutString(100,0,cocnt,false);
    EndFormat;
//    Gray_Divider(0,1);
    if (RepSpec.basecurncy==0) then begin
      PrintCOListTotals(bascur.BaseCur1,sub1tot,Tot1Sum);
      if ((RepSpec.flags[12]==1) and (bascur.BaseCur1<>bascur.BaseCur2)) then begin
        Gray_Divider(260,1);
        PrintCOListTotals(bascur.BaseCur2,sub2tot,Tot2Sum);
      end;
    end else begin
      PrintCOListTotals(bascur.BaseCur2,sub1tot,Tot1Sum);
      if ((RepSpec.flags[12]==1) and (bascur.BaseCur1<>bascur.BaseCur2)) then begin
        Gray_Divider(260,1);
        PrintCOListTotals(bascur.BaseCur1,sub2tot,Tot2Sum);
      end;
    end;
    res = res + Tot1Sum;
  end;
  COReportRn = res;
  return;
end;

function val COReportRnCons(record RcVc RepSpec,string afr,string ato,string frcc,string tocc)
begin
  record DaughterCompBlock DaughterCompRec;
  row DaughterCompBlock DaughterComprw;
  record ConsolidationBlock cr;
  Integer i,rwcnt;
  Integer oldcomp;
  val res;

  res = 0;
  oldcomp = CurrentCompany;  
  BlockLoad(DaughterCompRec);
  rwcnt = MatRowCnt(DaughterCompRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(DaughterCompRec,i,DaughterComprw);
    if (SetCompanyCode(DaughterComprw.CompCode,false)) then begin
      BlockLoad(cr);
      RepSpec.basecurncy = cr.ConsCrncy;  
      RepSpec.f5 = DaughterComprw.CompCode;
      RepSpec.f6 = DaughterComprw.CompName;
      res = res + COReportRn(RepSpec,afr,ato,frcc,tocc);
    end;  
  end;
  ResetCompany(oldcomp);
  COReportRnCons = res;
  return;
end;

global
procedure CORn(record RcVc RepSpec)
begin
  LongInt afr;
  LongInt ato;
  String 20 frcc;
  String 20 tocc;
  String 255 tstr;
  Integer rw;
  val res;

  rw = 1;
  res = 0;
  StartReportJob(USetStr(5541));
  afr = FirstInRange(RepSpec.f1,20);
  ato =  LastInRange(RepSpec.f1,20);
  frcc = FirstInRange(RepSpec.f2,20);
  tocc =  LastInRange(RepSpec.f2,20);
  if ((afr == -1) and (ato == -1)) then begin
    tstr = USetStr(6661);
  end else begin
    tstr = USetStr(1168);
    tstr = tstr & afr;
    if (afr<>ato) then begin
    tstr = tstr & " : " & ato;
    end;
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
  if nonblank(RepSpec.FirstAcc) then begin 
    Header(rw,USetStr(8326) & ": " & RepSpec.FirstAcc,1);   
    rw = rw + 1; 
  end;

  if (nonblank(RepSpec.f3)) then begin
    Header(rw,USetStr(2462) & ": " & RepSpec.f3,1);   
    rw = rw + 1; 
  end;
  if (nonblank(RepSpec.f4)) then begin
    Header(rw,USetStr(2467) & ": " & RepSpec.f4,1);   
    rw = rw + 1; 
  end;
  if (HasContactClassification) then begin 
    HTCustClass(RepSpec.Stext,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;  
  end;  
  EndHeader;
  SetRepCol(2,430);
  res = res + COReportRn(RepSpec,afr,ato,frcc,tocc);
  if (RepSpec.IncDaughter!=0) then begin
    res = res + COReportRnCons(RepSpec,afr,ato,frcc,tocc);
    StartFormat(15);
    EndFormat;
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(260,0,USetStr(7236),false);
    OutVal(440,0,res,M4Val,true);
    EndFormat;
  end;
  EndJob;
  return;
end;
