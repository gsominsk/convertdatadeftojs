external procedure HT2Per(Date,Date,var string);
external procedure HTLocalMachines(string,string,var string);
external procedure HTPayModes(string,string,var string);

procedure SubtractRetValue_IVVc(var record IVVc IVr)
begin
  row IVVc IVrw;
  val RemRetValue;
  Integer i,rwcnt;
  
  RemRetValue = IVr.RetValue;
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypeCashPayment) then begin
      if (RemRetValue > IVrw.Sum) then begin
        RemRetValue = RemRetValue - IVrw.Sum;
        IVrw.Sum = 0;
      end else begin
        IVrw.Sum = IVrw.Sum - RemRetValue;
        RemRetValue = 0;
      end;
      MatRowPut(IVr,i,IVrw);
    end;
  end;
  
  if (RemRetValue>0) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.stp==kInvoiceRowTypeCashPayment or IVrw.stp==kInvoiceRowTypeCreditCardPayment or 
        IVrw.stp==kInvoiceRowTypeChequePayment or IVrw.stp==kInvoiceRowTypeLoyaltyPointsPayment) then begin
        if (RemRetValue > IVrw.Sum) then begin
          RemRetValue = RemRetValue - IVrw.Sum;
          IVrw.Sum = 0;
        end else begin
          IVrw.Sum = IVrw.Sum - RemRetValue;
          RemRetValue = 0;
        end;
        MatRowPut(IVr,i,IVrw);
      end;
    end;
  end;
  
  return;
end;

procedure SubtractRetValue_IVCashVc(var record IVCashVc IVCashr)
begin
  row IVCashVc IVCashrw;
  val RemRetValue;
  Integer i,rwcnt;
  
  RemRetValue = IVCashr.RetValue;
  rwcnt = MatRowCnt(IVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    if (IVCashrw.stp==kInvoiceRowTypeCashPayment) then begin
      if (IVCashr.Sum4>=0) then begin
        if (RemRetValue > IVCashrw.Sum) then begin
          RemRetValue = RemRetValue - IVCashrw.Sum;
          IVCashrw.Sum = 0;
        end else begin
          IVCashrw.Sum = IVCashrw.Sum - RemRetValue;
          RemRetValue = 0;
        end;
      end else begin
        if (RemRetValue < IVCashrw.Sum) then begin
          RemRetValue = RemRetValue - IVCashrw.Sum;
          IVCashrw.Sum = 0;
        end else begin
          IVCashrw.Sum = IVCashrw.Sum - RemRetValue;
          RemRetValue = 0;
        end;
      end;
      MatRowPut(IVCashr,i,IVCashrw);
    end;
  end;
  
  if (RemRetValue>0) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVCashr,i,IVCashrw);
      if (IVCashrw.stp==kInvoiceRowTypeCashPayment or IVCashrw.stp==kInvoiceRowTypeCreditCardPayment or 
        IVCashrw.stp==kInvoiceRowTypeChequePayment or IVCashrw.stp==kInvoiceRowTypeLoyaltyPointsPayment) then begin
        if (IVCashr.Sum4>=0) then begin
          if (RemRetValue > IVCashrw.Sum) then begin
            RemRetValue = RemRetValue - IVCashrw.Sum;
            IVCashrw.Sum = 0;
          end else begin
            IVCashrw.Sum = IVCashrw.Sum - RemRetValue;
            RemRetValue = 0;
          end;
        end else begin
          if (RemRetValue < IVCashrw.Sum) then begin
            RemRetValue = RemRetValue - IVCashrw.Sum;
            IVCashrw.Sum = 0;
          end else begin
            IVCashrw.Sum = IVCashrw.Sum - RemRetValue;
            RemRetValue = 0;
          end;
        end;
        MatRowPut(IVCashr,i,IVCashrw);
      end;
    end;
  end;
  
  return;
end;

procedure Sales_IVVc(string machinecode,record RcVc RepSpec,vector val vpmsalesmachine,vector val vpmsalestotal)
begin
  record IVVc IVr;
  row IVVc IVrw;
  Integer i,rwcnt;
  Boolean found,testf;
  Boolean alliscash,addedf;
  val vopen;
  
  found = true;
  IVr.MachineName = machinecode;
  IVr.TransDate = RepSpec.sStartDate;
  while (LoopKey("MachineName",IVr,2,found)) begin
    if (IVr.MachineName!=machinecode) then begin found = false; end;
    if (DateInRange(IVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (IVr.OKFlag==0) then begin testf = false; end;
      if (IVr.Invalid!=0) then begin testf = false; end;
      if (testf) then begin
        SubtractRetValue_IVVc(IVr);
        addedf = false;
        if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
          alliscash = true;
        end else begin
          alliscash = false;
        end;
        vopen = IVr.Sum4;
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          testf = false;
          MatRowGet(IVr,i,IVrw);
          switch (IVrw.stp) begin
            case kInvoiceRowTypeCashPayment: testf = true;
            case kInvoiceRowTypeCreditCardPayment: testf = true;
            case kInvoiceRowTypeChequePayment: testf = true;
            case kInvoiceRowTypeLoyaltyPointsPayment: testf = true;
          end;
          if (nonblank(RepSpec.AccStr)) then begin
            if (IVrw.PayMode!=RepSpec.AccStr) then begin testf = false; end;
          end;
          if (testf) then begin
            vpmsalesmachine[IVrw.PayMode] = vpmsalesmachine[IVrw.PayMode] + IVrw.Sum;
            vpmsalestotal[IVrw.PayMode] = vpmsalestotal[IVrw.PayMode] + IVrw.Sum;
            vopen = vopen - IVrw.Sum;
            addedf = true;
          end;
        end;
        if (IVr.Sum4>0) then begin
          if (vopen<=0) then begin alliscash = true; end;
        end else begin
          if (vopen>=0) then begin alliscash = true; end;
        end;
        if ((alliscash) and (addedf==false)) then begin
          if ((blank(RepSpec.AccStr)) or (IVr.PayDeal==RepSpec.AccStr)) then begin
            vpmsalesmachine[IVr.PayDeal] = vpmsalesmachine[IVr.PayDeal] + IVr.Sum4;
            vpmsalestotal[IVr.PayDeal] = vpmsalestotal[IVr.PayDeal] + IVr.Sum4;
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure Sales_IVCashVc(string machinecode,record RcVc RepSpec,vector val vpmsalesmachine,vector val vpmsalestotal)
begin
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  Boolean found,testf;
  
  found = true;
  IVCashr.LocalMachineCode = machinecode;
  IVCashr.TransDate = RepSpec.sStartDate;
  while (LoopKey("LocalMachineCode",IVCashr,2,found)) begin
    if (IVCashr.LocalMachineCode!=machinecode) then begin found = false; end;
    if (DateInRange(IVCashr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (IVCashr.OKFlag==0) then begin testf = false; end;
      if (IVCashr.Invalid!=0) then begin testf = false; end;
      if (testf) then begin
        SubtractRetValue_IVCashVc(IVCashr);
        if (blank(RepSpec.AccStr) or IVCashr.PayDeal==RepSpec.AccStr) then begin
          if (IVCashr.RecValue!=0) then begin
            vpmsalesmachine[IVCashr.PayDeal] = vpmsalesmachine[IVCashr.PayDeal] + IVCashr.RecValue;
            vpmsalestotal[IVCashr.PayDeal] = vpmsalestotal[IVCashr.PayDeal] + IVCashr.RecValue;
          end;
        end;
        if (blank(RepSpec.AccStr) or IVCashr.PayDeal2==RepSpec.AccStr) then begin
          if (IVCashr.RecValue2!=0) then begin
            vpmsalesmachine[IVCashr.PayDeal2] = vpmsalesmachine[IVCashr.PayDeal2] + IVCashr.RecValue2;
            vpmsalestotal[IVCashr.PayDeal2] = vpmsalestotal[IVCashr.PayDeal2] + IVCashr.RecValue2;
          end;
        end;
        rwcnt = MatRowCnt(IVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          testf = false;
          MatRowGet(IVCashr,i,IVCashrw);
          switch (IVCashrw.stp) begin
            case kInvoiceRowTypeCashPayment: testf = true;
            case kInvoiceRowTypeCreditCardPayment: testf = true;
            case kInvoiceRowTypeChequePayment: testf = true;
            case kInvoiceRowTypeLoyaltyPointsPayment: testf = true;
            case kInvoiceRowTypeGiftVoucherPayment: testf = true;
          end;
          if (nonblank(RepSpec.AccStr)) then begin
            if (IVCashrw.PayMode!=RepSpec.AccStr) then begin testf = false; end;
          end;
          if (testf) then begin
            vpmsalesmachine[IVCashrw.PayMode] = vpmsalesmachine[IVCashrw.PayMode] + IVCashrw.Sum;
            vpmsalestotal[IVCashrw.PayMode] = vpmsalestotal[IVCashrw.PayMode] + IVCashrw.Sum;
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure Collections_CashVc(string machinecode,record RcVc RepSpec,vector val vpmcollmachine,vector val vpmcolltotal)
begin
  record CashVc Cashr;
  row CashVc Cashrw;
  Integer i,rwcnt;
  Boolean found,testf;
  
  found = true;
  Cashr.MachineName = machinecode;
  Cashr.TransDate = RepSpec.sStartDate;
  while (LoopKey("MachineNameTransDate",Cashr,2,found)) begin
    if (Cashr.MachineName!=machinecode) then begin found = false; end;
    if (DateInRange(Cashr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (Cashr.OKFlag==0) then begin testf = false; end;
      if (Cashr.Invalid!=0) then begin testf = false; end;
      if (Cashr.Event!=0 and Cashr.Event!=1) then begin testf = false; end;
      if (testf) then begin      
        rwcnt = MatRowCnt(Cashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(Cashr,i,Cashrw);
          if (nonblank(RepSpec.AccStr)) then begin
            if (Cashrw.PMCode!=RepSpec.AccStr) then begin testf = false; end;
          end;
          if (testf) then begin
            if (Cashr.Event==0) then begin
              vpmcollmachine[Cashrw.PMCode] = vpmcollmachine[Cashrw.PMCode] + Cashrw.Amount;
              vpmcolltotal[Cashrw.PMCode] = vpmcolltotal[Cashrw.PMCode] + Cashrw.Amount;
            end else begin
              vpmcollmachine[Cashrw.PMCode] = vpmcollmachine[Cashrw.PMCode] - Cashrw.Amount;
              vpmcolltotal[Cashrw.PMCode] = vpmcolltotal[Cashrw.PMCode] - Cashrw.Amount;
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure PrintMachineResult(record LocalMachineVc LMr,record PMBlock PMb,vector val vpmsales,vector val vpmcoll)
begin
  row PMBlock PMbrw;
  Integer i,rwcnt;
  val sales,coll;
  Boolean headf;
  
  headf = true;
  rwcnt = MatRowCnt(PMb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PMb,i,PMbrw);
    if (vpmsales[PMbrw.Code]!=0) or (vpmcoll[PMbrw.Code]!=0) then begin
      if (headf) then begin
        StartFormat(15);
         OutString(0,0,USetStr(28105) & ":  " & LMr.Code,false);
        EndFormat;
        Gray_Divider(0,1);
        headf = false;
      end;    
      StartFormat(15);
       OutString(0,0,PMbrw.Code,false);
       OutString(2,0,PMbrw.Comment,false);
       OutVal(8,0,vpmsales[PMbrw.Code],M4Val,true);
       OutVal(9,0,vpmcoll[PMbrw.Code],M4Val,true);
       OutVal(1,0,vpmsales[PMbrw.Code]-vpmcoll[PMbrw.Code],M4Val,true);
      EndFormat;
      sales = sales + vpmsales[PMbrw.Code];
      coll = coll + vpmcoll[PMbrw.Code];
    end;
  end;
  if (headf==false) then begin
    Gray_Divider(0,1);
    StartFormat(15);
     OutString(0,0,USetStr(28106),false);
     OutVal(8,0,sales,M4Val,true);
     OutVal(9,0,coll,M4Val,true);
     OutVal(1,0,sales-coll,M4Val,true);
    EndFormat;
    StartFormat(15);
    EndFormat;
  end;
  return;
end;

procedure PrintTotalResult(record PMBlock PMb,vector val vpmsales,vector val vpmcoll)
begin
  row PMBlock PMbrw;
  Integer i,rwcnt;
  val sales,coll;
  
  rwcnt = MatRowCnt(PMb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PMb,i,PMbrw);
    if (vpmsales[PMbrw.Code]!=0) or (vpmcoll[PMbrw.Code]!=0) then begin
      StartFormat(15);
       OutString(0,0,PMbrw.Code,false);
       OutString(2,0,PMbrw.Comment,false);
       OutVal(8,0,vpmsales[PMbrw.Code],M4Val,true);
       OutVal(9,0,vpmcoll[PMbrw.Code],M4Val,true);
       OutVal(1,0,vpmsales[PMbrw.Code]-vpmcoll[PMbrw.Code],M4Val,true);
      EndFormat;
      sales = sales + vpmsales[PMbrw.Code];
      coll = coll + vpmcoll[PMbrw.Code];
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
   OutString(0,0,USetStr(28106),false);
   OutVal(8,0,sales,M4Val,true);
   OutVal(9,0,coll,M4Val,true);
   OutVal(1,0,sales-coll,M4Val,true);
  EndFormat;
  return;
end;

procedure CollectionsAnalysisPerMachine(record RcVc RepSpec,record PMBlock PMb,record LocalMachineVc LMr,vector val vpmsalestotal,vector val vpmcolltotal)
begin
  vector val vpmsalesmachine;
  vector val vpmcollmachine;

  if (RepSpec.flags[1]!=0) then begin
    Sales_IVVc(LMr.Code,RepSpec,vpmsalesmachine,vpmsalestotal);
  end;
  if (RepSpec.flags[2]!=0) then begin
    Sales_IVCashVc(LMr.Code,RepSpec,vpmsalesmachine,vpmsalestotal);
  end;
  Collections_CashVc(LMr.Code,RepSpec,vpmcollmachine,vpmcolltotal);
  if (RepSpec.ArtMode==1) then begin
    PrintMachineResult(LMr,PMb,vpmsalesmachine,vpmcollmachine);
  end;
  return;
end;

global
procedure CollectionsAnalysisRn(record RcVc RepSpec)
begin
  Integer rw;
  string 255 tstr;
  string 255 frlm,tolm;
  record LocalMachineVc LMr;
  Boolean found;
  vector val vpmsalestotal;
  vector val vpmcolltotal;
  record PMBlock PMb;

  BlockLoad(PMb);
  frlm = FirstInRange(RepSpec.f1,10);
  tolm = LastInRange(RepSpec.f1,10);
  StartReportJob(USetStr(28100));
   rw = 1;
   HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   HTLocalMachines(frlm,tolm,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   HTPayModes(RepSpec.AccStr,RepSpec.AccStr,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
  EndHeader;
  SetRepCol(2,50);
  SetRepCol(8,360);
  SetRepCol(9,420);

  StartFormat(15);
   OutString(0,0,USetStr(28101),false);
   OutString(8,0,USetStr(28102),true);
   OutString(9,0,USetStr(28103),true);
   OutString(1,0,USetStr(28104),true);
  EndFormat;
  Gray_Divider(0,1);
  
  found = true;
  LMr.Code = frlm;
  while (LoopMain(LMr,1,found)) begin
    if (nonblank(RepSpec.f1)) and (RepSpec.f1!="*") then begin
      if (LMr.Code>tolm) then begin found = false; end;
    end;
    if (found) then begin
      CollectionsAnalysisPerMachine(RepSpec,PMb,LMr,vpmsalestotal,vpmcolltotal);
    end;
  end;
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
     OutString(0,0,USetStr(28101),false);
     OutString(8,0,USetStr(28102),true);
     OutString(9,0,USetStr(28103),true);
     OutString(1,0,USetStr(28104),true);
    EndFormat;
    Gray_Divider(0,1);
  end;
  PrintTotalResult(PMb,vpmsalestotal,vpmcolltotal);
  EndJob;
  return;
end;