external function Boolean IsEnterprise();
external procedure HTResClass(string,var string);
external procedure HTResLoc(string,var string);
external procedure PrintGuestObservation(record JobVc,Date,Date,Date,string,string,string);
//external procedure PrintGuestObs(Record JobVc,Date);
external procedure GetSugProgramOnDay(Record JobVc,Date,var String,var Boolean,Record RcVc);
external function Boolean IsCancelState(String);
external procedure GetRealLeavingTimes(Record JobVc,Boolean,var time,var time);

global
function boolean CheckInSelect(Record RcVc RepSpec,Record JobVc Jobr,var boolean foundf)
begin
  Boolean sel,testf;
  Record HotelBlock HotelBlock;  
  record ResVc Resr;

  BlockLoad(HotelBlock);
  sel = false;
  if (Jobr.TransDate <> RepSpec.d1) then begin
    foundf = false;
  end else begin
/*  
    if (((RepSpec.flags[2]==0) and (Jobr.ResStatus<>HotelBlock.ChOutSt)) or 
        ((RepSpec.flags[2]==1) and (Jobr.ResStatus<>HotelBlock.ChInSt) and (Jobr.ResStatus<>HotelBlock.ChOutSt)) or
        ((RepSpec.flags[2]==2) and (Jobr.ResStatus==HotelBlock.ChInSt))) then begin
*/    
    testf = true;
    switch (RepSpec.flags[2]) begin
      case 0: if (Jobr.ResStatus==HotelBlock.ChOutSt) then begin testf = false; end;
      case 1: if (Jobr.ResStatus==HotelBlock.ChInSt) or (Jobr.ResStatus==HotelBlock.ChOutSt) then begin testf = false; end;
      case 2: if (Jobr.ResStatus!=HotelBlock.ChInSt) then begin testf = false; end;
    end;
    Resr.Code = Jobr.ResCode;
    ReadFirstMain(Resr,1,true);
    if (nonblank(RepSpec.f3)) then begin
      if (Resr.ResLoc!=RepSpec.f3) then begin testf = false; end;
    end;
    if (nonblank(RepSpec.f6)) then begin
      if (SetInSet(RepSpec.f6,Resr.Class)==false) then begin testf = false; end;
    end;


    if (testf) then begin
      
      if not IsCancelState(Jobr.ResStatus) then begin
        if (RepSpec.flags[3]==1) then begin
          sel = true;
        end else begin
          if ((Jobr.SwitchFlag<>1) and (Jobr.SwitchFlag<>3)) then begin //LO40 Checkout from ChangeRoom
            sel = true;
          end;
        end;  
      end;
    end; 
  end;  
  CheckInSelect = sel;
  return;
end;

global
procedure JobBubSort40(var array Record JobVc Table,Integer TableSize)
begin
  LongInt Run,i;
  Record JobVc Jobr1,Jobr2;

  for (Run=2; Run<=(TableSize - 1); Run=Run+1) begin
    for(i= TableSize;i>=Run;i=i-1) begin
      Jobr1 = Table[i];
      Jobr2 = Table[i-1];
      if (Jobr1.ResCode < Jobr2.ResCode) then begin
        Table[i] = Jobr2;
        Table[i-1] = Jobr1;
      end;
    end;
  end;  
  return;    
end;

global
procedure JobBubSort40ResStatus(var array Record JobVc Table,Integer TableSize)
begin
  LongInt Run,i;
  Record JobVc Jobr1,Jobr2;

  for (Run=2; Run<=(TableSize - 1); Run=Run+1) begin
    for(i= TableSize;i>=Run;i=i-1) begin
      Jobr1 = Table[i];
      Jobr2 = Table[i-1];
      if (Jobr1.ResStatus > Jobr2.ResStatus) then begin
        Table[i] = Jobr2;
        Table[i-1] = Jobr1;
      end;
    end;
  end;
  return;    
end;
/*
// A global version of this exists, it is just slightly different.
procedure PrintGuestObs(Record JobVc Jobr,Date RepDate)
begin
  Record GuestObserVc GuestObser;
  Integer rowcnt,i;
  Row JobVc Jobrw;
  Boolean TsHr,firstf;
  
  if nonblank(Jobr.Comment) then begin
    StartFormat(15);  
//    OutString(0,0,Jobr.ResCode,false); 
//    OutString(2,0,USetStr(12125),false);
    OutString(5,0,Jobr.Comment,false);
    EndFormat;    
  end;
  
  rowcnt = MatRowCnt( Jobr );
  for(i=0; i<rowcnt; i=i+1) begin
    MatRowGet(Jobr,i,Jobrw);
    Resetloop(GuestObser);
    firstf = true; TsHr = true;
    GuestObser.Guest = Jobrw.GuestCode;
    while (LoopKey("Guest",GuestObser,1,TsHr)) begin
      if (GuestObser.Guest==Jobrw.GuestCode) then begin
        if ((GuestObser.Type==0) or (GuestObser.Type==2) or (GuestObser.Type==4)) then begin
          if (firstf) then begin 
            firstf = false;
            StartFormat(15);
              OutString(3,0,Jobr.ResCode,false); 
            EndFormat;
          end;
          StartFormat(15);
          OutLongInt(4,"DblGuestObserVc",GuestObser.SerNr,false);
          OutString(5,0,left(Jobrw.CUName,25),false);
          OutString(200,0,GuestObser.Comment,false);
          EndFormat;
        end else begin
          if (GuestObser.TransDate==RepDate) then begin
            if (firstf) then begin 
              firstf = false;
              StartFormat(15);
                OutString(3,0,Jobr.ResCode,false); 
              EndFormat;
            end;
            StartFormat(15);
            OutLongInt(4,"DblGuestObserVc",GuestObser.SerNr,false);
            OutString(5,0,left(Jobrw.CUName,25),false);
            OutString(200,0,GuestObser.Comment,false);
            EndFormat;
          end;
        end; 
      end else begin
        TsHr = false;
      end;   
    end;     
  end;

  return;
end;
*/
global
procedure CheckInRn(Record RcVc RepSpec)
begin
  Record JobVc Jobr;
  row JobVc Jobrw;
  Integer rw,i,rwcnt,cnt,memcnt,j;
  boolean testf, foundf,dummy,skip;
  String 255 tstr,tmp;
  Record RcVc MyRepSpec;
  Record HotelBlock HotelBlock;  
  Time HardTime,SoftTime;
  Array Record JobVc aJobSerNr;
  Integer acnt;
  Boolean firstf;
  record ReservationStatusVc ResStatr;
  string 20 oldresstat;
  
  StartReportJob(USetStr(11165));
  rw = 1;
  tstr = USetStr(11091) & ": " & RepSpec.d1;
  Header(rw,tstr,1);
  rw = rw + 1;
  HTResLoc(RepSpec.f3,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTResClass(RepSpec.f6,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;

  SetRepCol(2,55);
  SetRepCol(3,110);
  SetRepCol(4,185);
  SetRepCol(5,215);
  SetRepCol(6,330);
  SetRepCol(8,345);
  SetRepCol(7,415);

  cnt = 0;
  StartFormat(15);
  OutString(0,0,USetStr(9964),false);
  OutString(2,0,USetStr(9956),false);
  OutString(3,0,USetStr(9971),false);
  if (IsEnterprise) then begin
    OutString(4,0,USetStr(11159),false);
  end;
  OutString(5,0,UsetStr(9973),false);
  tstr = USetStr(11162) & DateToString(RepSpec.d1,"DD/MM");
  if (RepSpec.flags[5]==1) then begin
    OutString(6,0,tstr,true);
    OutString(7,0,USetStr(10152),true);
  end else begin
//    OutString(6,0,USetStr(11166),true);
    if (IsEnterprise) then begin
      OutString(8,0,USetStr(10284),false);  
    end;
    OutString(7,0,USetStr(10275),true);  
  end;
  OutString(1,0,USetStr(9989),true);
  EndFormat;

  Black_Divider(0,1);
  firstf = true;
  BlockLoad(HotelBlock);

  acnt = 0;
  Jobr.TransDate = RepSpec.d1;
  foundf = true;
  while LoopKey("TransDate",Jobr,1,foundf) begin
    if CheckInSelect(RepSpec,Jobr,foundf) then begin
      acnt = acnt+1;
      aJobSerNr[acnt]= Jobr;       
    end;
  end;  
  
  if (RepSpec.flags[7]==0) then begin
    JobBubSort40ResStatus(aJobSerNr,acnt);
  end else begin
    JobBubSort40(aJobSerNr,acnt);
  end;
  
  for(j=1;j<=acnt;j=j+1) begin
    Jobr = aJobSerNr[j];
    tstr = "DblJobVc";
    if (RepSpec.flags[1]==1) then begin
      tstr = "DblResEventTypeVc";
    end;
    if (RepSpec.flags[7]==0) then begin
      if (oldresstat!=Jobr.ResStatus) then begin
        if (firstf==false) then begin
          Gray_Divider(0,1);
        end;
        oldresstat = Jobr.ResStatus;
        ResStatr.Code = oldresstat;
        if (ReadFirstMain(ResStatr,1,true)) then begin
          StartFormat(15);
          OutString(0,0,ResStatr.Comment,false);
          EndFormat;
        end;
        Gray_Divider(0,1);
        firstf = false;
      end;
    end;
    rwcnt = MatRowCnt(Jobr);
    StartFormat(15);
    OutLongInt(0,tstr,Jobr.Mother,false);
    OutLongInt(2,tstr,Jobr.SerNr,false);
    OutStringID(3,"DblJobVcID",Jobr.ResCode,false,Jobr.SerNr);
    if (IsEnterprise) then begin
      OutString(4,0,Jobr.ResUsage,false);
    end;
    switch (RepSpec.flags[5]) begin
      case 0:
        OutString(5,0,Left(Jobr.CUName,20),false);
        if (IsEnterprise) then begin
          OutString(8,0,Jobr.Type,false);          
        end;
        OutString(7,0,left(Jobr.StartTime,5),true);
        OutString(1,0,Jobr.EndDate,true);
        EndFormat;      
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(Jobr,i,Jobrw);
          StartFormat(15);
          OutString(5,0,Jobrw.CUName,false);
          EndFormat;      
        end;
      case 1:
        if (rwcnt==1) then begin
          MatRowGet(Jobr,0,Jobrw);
          OutString(5,0,Left(Jobrw.CUName,20),false);
        end else begin
          OutString(5,0,Left(Jobr.CUName,20),false);
        end;
        GetSugProgramOnDay(Jobr,RepSpec.d1,tmp,dummy,MyRepSpec);
        if (nonblank(tmp)) then begin
          OutString(6,0,tmp,true);
        end;
        GetRealLeavingTimes(Jobr,false,HardTime,SoftTime);
        tmp = left(HardTime,5) & "/" & left(SoftTime,5);  
        OutString(7,0,tmp,true);
        OutString(1,0,Jobr.EndDate,true);
        EndFormat;      
        if (rwcnt>1) then begin
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(Jobr,i,Jobrw);
            StartFormat(15);
            OutString(5,0,Left(Jobrw.CUName,20),false);
            EndFormat;
          end;      
        end;
    end;
    if (RepSpec.flags[6]==1) then begin
//      PrintGuestObs(Jobr,RepSpec.d1);
      PrintGuestObservation(Jobr,RepSpec.d1,RepSpec.d1,RepSpec.d1,"","","");
    end;
    if (rwcnt==0) then begin
      rwcnt = 1;
    end;
    cnt = cnt + rwcnt;
    if (j<acnt) then begin
      Gray_Divider(0,1);
    end;
  end;
  Black_Divider(0,1);
  tstr = cnt;
  StartFormat(15);
  OutString(0,0,"" & USetStr(10138) " " & tstr & " " & USetStr(10139),false);
  EndFormat;
  EndJob;
  return;
end;

