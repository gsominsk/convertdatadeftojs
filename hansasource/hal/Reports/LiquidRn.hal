external procedure HT2Per(Date, Date , var string);
external procedure PrintLiquidityOwnCheck(var Date,var val,var val,var val,record RcVc);
external procedure PrintLiquiditySM(var Date,var val,var val,var val,record RcVc);
external procedure PrintLiquidityAR(var Date,var val,var val,var val,record RcVc);
external procedure PrintLiquidityAP(var Date,var val,var val,var val,record RcVc);
external procedure PrintLiquidityCheck(var Date,var val,var val,var val,record RcVc);
external procedure GetAccStartBalance(string,string,Date,record ObjBalVc,Integer,Integer,string,Integer,var val);

function val FindStartBalance(string fracc,string toacc,Date d)
begin
  val res;
  record AccVc Accr;
  Boolean found,ObjBals;  
  record ObjBalVc ObjBalr;
  val Sb;
  
  if (nonblank(fracc)) then begin
    found = true;
    Accr.AccNumber = fracc;
    while (LoopMain(Accr,1,found)) begin
      if (Accr.AccNumber>toacc) then begin found = false; end;
      if (found) then begin
        ObjBalr.AccNumber = Accr.AccNumber;
        ObjBalr.Object = "";    
        ObjBals = ReadFirstMain(ObjBalr,2,true);
        GetAccStartBalance(Accr.AccNumber,"",d,ObjBalr,0,0,"",0,Sb);
        res = res + Sb;
      end;
    end;
  end;
  FindStartBalance = res;
  return;
end;

function
Integer GetNextVc(Date app,Date arp,Date smp,Date ownchkp,Date chkp)
BEGIN
  Integer res;
  Integer year;
  Integer AR,VI,SM,CHECK,OWNCHECK;
  
  AR =1; VI = 2; SM = 3; CHECK = 4; OWNCHECK = 5;
  res = 0;
  if (app<=arp) then begin 
    if (app<=smp) then begin 
      if (app<=ownchkp) then begin
        if (app<=chkp) then begin
          res = VI;
          year = GetYear(app);
        end else begin
          res = CHECK;
          year = GetYear(chkp);
        end;
      end else begin
        if (ownchkp<=chkp) then begin
          res = OWNCHECK;
          year = GetYear(ownchkp);
        end else begin
          res = CHECK;
          year = GetYear(chkp);
        end;
      end;
    end else begin 
      if (smp<=ownchkp) then begin
        if (smp<=chkp) then begin
          res = SM;
          year = GetYear(smp);
        end else begin
          res = CHECK;
          year = GetYear(chkp);
        end;
      end else begin
        if (ownchkp<=chkp) then begin
          res = OWNCHECK;
          year = GetYear(ownchkp);
        end else begin
          res = CHECK;
          year = GetYear(chkp);
        end;
      end;
    end; 
  end else begin
    if (arp<=smp) then begin 
      if (arp<=ownchkp) then begin
        if (arp<=chkp) then begin
          res = AR;
          year = GetYear(arp);
        end else begin
          res = CHECK;
          year = GetYear(chkp);
        end;
      end else begin
        if (ownchkp<=chkp) then begin
          res = OWNCHECK;
          year = GetYear(ownchkp);
        end else begin
          res = CHECK;
          year = GetYear(chkp);
        end;
      end;
    end else begin 
      if (smp<=ownchkp) then begin
        if (smp<=chkp) then begin
          res = SM;
          year = GetYear(smp);
        end else begin
          res = CHECK;
          year = GetYear(chkp);
        end;
      end else begin
        if (ownchkp<=chkp) then begin
          res = OWNCHECK;
          year = GetYear(ownchkp);
        end else begin
          res = CHECK;
          year = GetYear(chkp);
        end;
      end;
    end;
  end;
  if (year==9999) then begin res = 0; end;
  GetNextVc = res;
  RETURN;
END;

global
procedure LiquidityRn(record RcVc RepSpec)
BEGIN
  Boolean done;
  Date apdate,ardate,smdate,ownchkdate,chkdate;
  Date curdt,prdt;  
  Integer nextVc;
  val sumd,sumc,tot,balan;
  val totc,totd;
  val dayd,dayc;
  val startbal;
  Integer CHECK,OWNCHECK,VI,SM,AR;
  Date EndDate;
  record SysFormatBlock SysRec;
  string 5 decavg;
  string 5 thoavg;
  string 255 tstr;
  string 255 fracc,toacc;
  Integer rw;
   
  BlockLoad(SysRec);
  decavg = SysRec.decimalPt;
  thoavg = SysRec.thousSep;  
  AR = 1;
  VI = 2;
  SM = 3;
  CHECK = 4;
  OWNCHECK = 5;
  fracc = FirstInRange(RepSpec.f1,10);
  toacc = LastInRange(RepSpec.f1,10);
  StartReportJob(USetStr(6720));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw +1;
  if (nonblank(RepSpec.f1)) then begin
    tstr = USetStr(6731);
    tstr = tstr & " ";
    tstr = tstr & RepSpec.f1;
    Header(rw,tstr,1);
    rw = rw + 1;
  end; 
  EndHeader;
  SetRepCol(2,60);
  SetRepCol(3,150);
  SetRepCol(4,220);
  switch (RepSpec.flags[0]) begin
    case 0:
      StartFormat(15);
      OutString(0,0,USetStr(6721),false);
      OutString(60,0,USetStr(6722),false);
      if (RepSpec.flags[2]<>0) then begin
        OutString(3,0,USetStr(6727),false);
      end else begin
        OutString(3,0,USetStr(6723),false);
      end;  
      OutString(4,0,USetStr(6727),false);
      OutStringAdjustBiDi(360,0,USetStr(6724),true,M4Val,410);
      OutStringAdjustBiDi(420,0,USetStr(6725),true,M4Val,465);
      OutStringAdjustBiDi(480,0,USetStr(6726),true,M4Val,520);
      EndFormat;
    case 1:
      StartFormat(15);
      OutString(0,0,USetStr(6721),false);
      OutStringAdjustBiDi(280,0,USetStr(6724),true,M4Val,320);
      OutStringAdjustBiDi(380,0,USetStr(6725),true,M4Val,420);
      OutStringAdjustBiDi(480,0,USetStr(6726),true,M4Val,520);
      EndFormat;
    case 3:
      switch (RepSpec.Media) begin
        case mtFile:
          StartFormat(15);
          OutString(0,0,USetStr(6721),false);
          OutString(60,0,USetStr(6728),false);
          OutString(160,0,USetStr(6729),true);
          OutString(170,0,USetStr(6722),false);
          if (RepSpec.flags[2]<>0) then begin
            OutString(200,0,USetStr(6727),false);
          end else begin
            OutString(200,0,USetStr(6723),false);
          end;  
          OutString(320,0,USetStr(6727),false);
          OutString(340,0,USetStr(6730),false);
          OutString(360,0,USetStr(6724),true);
          OutString(420,0,USetStr(6725),true);
          OutString(480,0,USetStr(6726),true);
          EndFormat;
        otherwise
          StartFormat(15);
          OutString(0,0,USetStr(6721),false);
          OutString(60,0,USetStr(6728),false);
          OutString(160,0,USetStr(6729),true);
          OutString(170,0,USetStr(6722),false);
          OutStringAdjustBiDi(320,0,USetStr(6724),true,M4Val,360);
          OutStringAdjustBiDi(400,0,USetStr(6725),true,M4Val,440);
          OutStringAdjustBiDi(480,0,USetStr(6726),true,M4Val,520);
          EndFormat;
          StartFormat(15);
          if (RepSpec.flags[2]<>0) then begin
            OutString(0,0,USetStr(6727),false);
          end else begin
            OutString(0,0,USetStr(6723),false);
          end;  
          OutString(70,0,USetStr(6727),false);
          OutString(300,0,USetStr(6730),false);
          EndFormat;
      end;
  end;
  Gray_Divider(0,1);
  balan = 0;
  startbal = FindStartBalance(fracc,toacc,AddDay(CurrentDate,1));
  balan = balan + startbal;
  totd = totd + startbal;
  StartFormat(15);
   OutString(0,0,USetStr(14242),false);
   OutVal(1,0,startbal,M4Val,true);
  EndFormat;
  nextVc = 0;
  apdate = RepSpec.sStartDate;
  ardate = RepSpec.sStartDate;
  smdate = RepSpec.sStartDate;
  ownchkdate = RepSpec.sStartDate;
  chkdate = RepSpec.sStartDate;  
  done = false;  
  if ((blankdate(RepSpec.sStartDate)==true) or (blankdate(RepSpec.sEndDate)==true)) then begin
    done = true;
  end;
  if (blankdate(RepSpec.d1)) then begin
    EndDate = RepSpec.sEndDate;
  end else begin
    EndDate = RepSpec.d1;
  end;  
  while (done==false) begin  
    nextVc = GetNextVc(apdate,ardate,smdate,ownchkdate,chkdate);
    if (nextVc==0) then begin done = true; end;    
    if (nextVc==AR) then begin    
      prdt = ardate;
      if (ardate>EndDate) then begin done = true; end;
    end;       
    if (nextVc==VI) then begin
      prdt = apdate;
      if (apdate>EndDate) then begin done = true; end;
    end;    
    if (nextVc==SM) then begin
      prdt = smdate;
      if (smdate>EndDate) then begin done = true; end;
    end;    
    if (nextVc==OWNCHECK) then begin
      prdt = ownchkdate;
      if (ownchkdate>EndDate) then begin done = true; end;
    end;    
    if (nextVc==CHECK) then begin
      prdt = chkdate;
      if (chkdate>EndDate) then begin done = true; end;
    end;            
    if (done==false) then begin        
      if (blankdate(curdt)) then begin curdt = prdt; end;           
      if ((curdt<>prdt) and (nonblankdate(curdt))) then begin   
        if (RepSpec.flags[0]==1) then begin        
          StartFormat(15);          
          OutDate(0,0,curdt,false);
          if (dayd<>0) then begin
            OutValBiDi(280,0,dayd,M4Val,true,320);
          end;  
          if (dayc<>0) then begin
            if (RepSpec.Media==mtFile) then begin
              OutString(0,0,"",false);
            end;
            OutValBiDi(380,0,dayc,M4Val,true,420);
          end;  
          OutValBiDi(480,0,balan,M4Val,true,520);
          EndFormat;          
          dayd = 0;
          dayc = 0;
          curdt = prdt;          
        end;        
      end;            
      if (nextVc==VI) then begin
        PrintLiquidityAP(apdate,balan,sumd,sumc,RepSpec);
        prdt = apdate;
      end;
      if (nextVc==AR) then begin
        PrintLiquidityAR(ardate,balan,sumd,sumc,RepSpec);
        prdt = ardate;
      end;
      if (nextVc==SM) then begin
        PrintLiquiditySM(smdate,balan,sumd,sumc,RepSpec);
        prdt = smdate;
      end;
      if (nextVc==OWNCHECK) then begin
        PrintLiquidityOwnCheck(ownchkdate,balan,sumd,sumc,RepSpec);
        prdt = ownchkdate;
      end;
      if (nextVc==CHECK) then begin
        PrintLiquidityCheck(chkdate,balan,sumd,sumc,RepSpec);
        prdt = chkdate;
      end;
      dayd = dayd + sumd;
      dayc = dayc + sumc;
      totd = totd + sumd;
      totc = totc + sumc;
    end;             
  end;   
  if ((curdt<>prdt) and (nonblankdate(curdt))) then begin
    if (RepSpec.flags[0]==1) then begin
      StartFormat(15);
      OutDate(0,0,curdt,false);
      if (dayd>0) then begin
        OutValBiDi(280,0,dayd,M4Val,true,320);
      end;  
      if (dayc>0) then begin
        OutValBiDi(380,0,dayc,M4Val,true,420);
      end;  
      OutValBiDi(480,0,balan,M4Val,true,520);
      EndFormat;
      dayd = 0;
      dayc = 0;
      curdt = prdt;
    end;
  end;
  
  Gray_Divider(0,1);
  tot = totd - totc;
  StartFormat(15);
  if (RepSpec.flags[18]!=0) then begin
    switch (RepSpec.flags[0]) begin
      case 3:
        if (RepSpec.Media==mtFile) then begin
        end else begin
          tstr = ValToString(totd,M4Val,thoavg,decavg,0);
          tstr = Mid(tstr,0,Len(tstr)-3);
          OutStringAdjustBiDi(320,0,tstr,true,M4Val,360);
          tstr = ValToString(totc,M4Val,thoavg,decavg,0);
          tstr = Mid(tstr,0,Len(tstr)-3);
          OutStringAdjustBiDi(400,0,tstr,true,M4Val,440);
          tstr = ValToString(tot,M4Val,thoavg,decavg,0);
          tstr = Mid(tstr,0,Len(tstr)-3);
          OutStringAdjustBiDi(480,0,tstr,true,M4Val,520);
        end;
      otherwise
        tstr = ValToString(totd,M4Val,thoavg,decavg,0);
        tstr = Mid(tstr,0,Len(tstr)-3);
        OutStringAdjustBiDi(360,0,tstr,true,M4Val,410);
        tstr = ValToString(totc,M4Val,thoavg,decavg,0);
        tstr = Mid(tstr,0,Len(tstr)-3);
        OutStringAdjustBiDi(420,0,tstr,true,M4Val,465);
        tstr = ValToString(tot,M4Val,thoavg,decavg,0);
        tstr = Mid(tstr,0,Len(tstr)-3);
        OutStringAdjustBiDi(480,0,tstr,true,M4Val,520);
    end;      
  end else begin
    if (RepSpec.Media==mtFile) then begin
      OutString(0,0,"",false);
      OutString(0,0,"",false);
      OutString(0,0,"",false);
      OutString(0,0,"",false);
    end;
    switch (RepSpec.flags[0]) begin
      case 1:
        OutValBiDi(280,0,totd,M4Val,true,320);
        OutValBiDi(380,0,totc,M4Val,true,420);
        OutValBiDi(480,0,tot,M4Val,true,520);
      case 3:
        if (RepSpec.Media==mtFile) then begin
          OutString(0,0,"",false);
          OutString(0,0,"",false);
          OutString(0,0,"",false);
        end;
        OutValBiDi(320,0,totd,M4Val,true,360);
        OutValBiDi(400,0,totc,M4Val,true,440);
        OutValBiDi(480,0,tot,M4Val,true,520);
      otherwise
        OutValBiDi(360,0,totd,M4Val,true,410);
        OutValBiDi(420,0,totc,M4Val,true,465);
        OutValBiDi(480,0,tot,M4Val,true,520);
    end;
  end;               
  EndFormat;
  Gray_Divider(0,1);
  EndJob;
  RETURN;
END;
