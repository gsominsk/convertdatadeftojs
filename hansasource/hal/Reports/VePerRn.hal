external function Boolean HasContactClassification();
external function Boolean HasMultiCurrency();
external procedure PrintCurncyTotalsToFile(array string,array val,array val,array val,Integer,Integer,Integer,
                                  Integer,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external procedure PrintVePerForm(record RcVc,record CUVc,val,val,
                                  var array Integer,var array LongInt,var array string,
                                  var array Date,var array Date,var array val,var array val,var array val,var array string,
                                  var Integer);
external procedure VEPer_PrintPurgeTransaction(record RcVc,record CUVc,record OPrsVc,val,
                             var array string,var array val,var array val,var array val,var Integer,
                             var Boolean,var val,var val,var val,var val,var val,record BaseCurBlock,Boolean,
                             var array Integer,var array LongInt,var array string,var array Date,var array Date,var array val,var array val,var array val,var array string,var Integer);
external procedure VEPer_PrintTransaction(record RcVc,record CUVc,record OPrsVc,val,
                             var array string,var array val,var array val,var array val,var Integer,
                             var Boolean,var val,var val,var val,var val,var val,record BaseCurBlock,Boolean,
                             var array Integer,var array LongInt,var array string,var array Date,var array Date,var array val,var array val,var array val,var array string,var Integer);
external procedure VEPer_PrintPayment(record RcVc,record CUVc,record OPrsVc,record BaseCurBlock,
                             var array string,var array val,var array val,var array val,var Integer,
                             var Boolean,var val,var val,var val,var val,var val,Boolean,
                             var array Integer,var array LongInt,var array string,var array Date,var array Date,var array val,var array val,var array val,var array string,var Integer);
external procedure VEPer_PrintInvoice(record RcVc,record CUVc,record BaseCurBlock,LongInt,
                             var array string,var array val,var array val,var array val,var Integer,
                             var val,var val,var val,var val,var val,Boolean,
                             var array Integer,var array LongInt,var array string,var array Date,var array Date,var array val,var array val,var array val,var array string,var Integer);
external procedure VEPer_PrintDataForInvoice(record RcVc,record CUVc,record BaseCurBlock,LongInt,
                             val,var Boolean,
                             var array string,var array val,var array val,var array val,var Integer,
                             var val,var val,var val,var val,var val,Boolean,
                             var array Integer,var array LongInt,var array string,var array Date,var array Date,var array val,var array val,var array val,var array string,var Integer);
external procedure HT2Per(Date, Date , var string);
external procedure VendListTransCLInRevPrepVE(record RcVc,record OPrsVc,record CUVc,var val,var val,record BaseCurBlock,Integer,var array string,var array val,var array val,Boolean,
                                     var array Integer,var array LongInt,var array string,var array Date,var array Date,var array val,var array val,var array val,var array string,var Integer);
external procedure VendListTransCLIn(record RcVc,record OPrsVc,record CUVc,var val,var val,var val,var val,record BaseCurBlock,Integer,var array string,var array val,var array val,Boolean,
                                     var array Integer,var array LongInt,var array string,var array Date,var array Date,var array val,var array val,var array val,var array string,var Integer);
external procedure VendListTransCLOut(record RcVc,record OPrsVc,record CUVc,var val,var val,var val,var val,record BaseCurBlock,Integer,var array string,var array val,var array val,Boolean,
                                      var array Integer,var array LongInt,var array string,var array Date,var array Date,var array val,var array val,var array val,var array string,var Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure BeginCurncyTotals(var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external procedure GetBaseCurncy(Integer,var string);
external procedure HTDetailLevel(Integer, var string);
external procedure HTVends(string, string, var string);
external procedure HTLevCat(string, var string);
external procedure VEGetStartBalance(record CUVc,string,string,Date ,var val);
external function val VEGetEndBalance(record CUVc,string,string,Date );
external procedure HTCustClass(string,var string);
external procedure HTCustClassType(string,var string);
external function Boolean SetInSet2(string,string);
external procedure ClassTypef(string,string,var Boolean);

procedure VEPer_PrintTotals(record RcVc RepSpec,Boolean custout,Boolean printf,
                            val balp,val totgain,val totloss,val SumDebet,val SumCredit)
BEGIN
  val v;
  
  v = SumCredit - SumDebet;   
  if (custout and (printf or RepSpec.flags[2]==0)) then begin
    Black_Divider(9,1);
    switch (RepSpec.Media) begin
      case mtFile:
        goto LVEPer_PrintTotalstoFile;
      case mtExcel:
LVEPer_PrintTotalstoFile:;      
        StartFormat(15);
        OutString(100,0,"",false);
        OutString(6,0,USetStr(3192),false);
        OutString(100,0,"",false);
        OutVal(3,0,SumDebet,M4Val,true);
        OutVal(4,0,SumCredit,M4Val,true);
        EndFormat;
      otherwise
        StartFormat(15);
        OutString(6,0,USetStr(3192),false);
        OutVal(3,0,SumDebet,M4Val,true);
        OutVal(4,0,SumCredit,M4Val,true);
        EndFormat;
        if ((RepSpec.flags[2]==0) or (RepSpec.flags[2]==1)) then begin  
          if (totgain<>0) then begin                                          
            StartFormat(15);
            OutString(6,0,USetStr(3200),false);
            OutVal(3,0,totgain,M4Val,true);
            EndFormat;
            v = v + totgain;
          end;  
          if (totloss<>0) then begin                                          
            StartFormat(15);
            OutString(6,0,USetStr(3201),false);
            OutVal(4,0,totloss,M4Val,true);
            EndFormat;
            v = v + totloss;
          end;  
        end;  
    end;
  end;  
  StartFormat(5);
  EndFormat;
  v = -v;
  if (printf or RepSpec.flags[2]==0) then begin
    switch (RepSpec.Media) begin
      case mtFile:
        goto LVEPer_PrintTotalstoFile2;
      case mtExcel:
LVEPer_PrintTotalstoFile2:;      
        StartFormat(15);
        OutString(100,0,"",false);
        OutString(6,0,USetStr(3194),false);
        OutString(100,0,"",false);
        OutVal(3,0,v,M4DVal,true);
        OutVal(4,0,v,M4CVal,true);
        EndFormat;
        StartFormat(15);
        OutString(100,0,"",false);
        OutString(6,0,USetStr(3195),false);
        OutString(100,0,"",false);
        OutString(100,0,"",false);
        OutString(100,0,"",false);
        OutString(100,0,"",false);
        OutVal(3,0,balp,M4DVal,true);
        OutVal(4,0,balp,M4CVal,true);
        EndFormat;     
      otherwise
        StartFormat(15);
        OutString(6,0,USetStr(3194),false);
        OutVal(3,0,v,M4DVal,true);
        OutVal(4,0,v,M4CVal,true);
        EndFormat;
        StartFormat(15);
        OutString(6,0,USetStr(3195),false);
        OutVal(2,0,balp,M4Val,true);
        EndFormat;     
    end; 
  end;  
  Gray_Divider(0,1);       
  RETURN;
END;

global
function val OrderedOPSum(record RcVc RepSpec,record CUVc VEr)
BEGIN
  record BaseCurBlock bascur;
  record OPrsVc OPrsr;
  record OPVc OPr;
  row OPVc OPrw;
  Integer i,rwcnt;
  Boolean found,testf;
  val res;

  BlockLoad(bascur);
  OPrsr.VECode = VEr.Code;
  OPrsr.TransDate = RepSpec.sStartDate;
  found = true;  
  while (LoopMain(OPrsr,2,found)) begin
    if (found) then begin
      if (OPrsr.VECode<>VEr.Code) then begin
        found = false;
      end;
    end;    
    if (found) then begin
      if (OPrsr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    end;    
    if (found) then begin
      if (OPrsr.TransType==1) then begin      
        OPr.SerNr = OPrsr.TransNr;
        if (ReadFirstMain(OPr,1,true)) then begin
          testf = true;
          if (OPr.RejectedFlag==1) then begin testf = false; end;
          if (OPrsr.TransDate<>OPr.TransDate) then begin testf = false; end;          
          if (OPr.DoneFlag!=0) then begin testf = false; end;          
          if (OPr.OrderedFlag==0) then begin testf = false; end;          
          if (testf) then begin
            rwcnt = MatRowCnt(OPr);
            for (i = 0; i<rwcnt; i=i+1) begin
              MatRowGet(OPr,i,OPrw);
              if (OPrw.ovst<>0) then begin goto LORDEREDOPSUMSKIPROW; end;
              if ((OPrw.VISerNr==OPrsr.VINr) and (OPrw.VECode==VEr.Code)) then begin
                if (((OPrw.stp==1) or (OPrw.stp==5)) and (OPrw.ovst==0)) then begin  
                  res = res + OPrw.BankVal;                   
                end;
              end;
LORDEREDOPSUMSKIPROW:;                
            end;
          end;//testf                
        end;
      end;
    end;
  end;
  OrderedOPSum = res;
  return;
END;

global
procedure VendHead(record RcVc RepSpec,record CUVc VEr,var val startbalp,Integer inbase)
BEGIN
  string 10 curncy;

  StartFormat(15);  
  OutString(0,"DblCUVc",VEr.Code,false);
  OutString(60,0,VEr.Name,false);        
  OutString(350,0,VEr.VATNr,false);        
  if (HasMultiCurrency) then begin
    if ((nonblank(VEr.VECurncyCode)) and (inbase==1)) then begin
      OutString(1,0,VEr.VECurncyCode,true);
    end else begin
      GetBaseCurncy(1,curncy);
      OutString(1,0,curncy,true);
    end;  
  end;
  EndFormat;    
  Gray_Divider(0,1);
  switch (RepSpec.Media) begin
    case mtFile:
      goto LVendHeadtoFile;
    case mtExcel:
LVendHeadtoFile:;    
      StartFormat(15);
      OutString(0,0,USetStr(3184),false);
      OutString(65,0,USetStr(2435),false);
      OutString(115,0,USetStr(2436),false);
      OutStringAdjust(3,0,USetStr(4190),true,M4Val);
      OutStringAdjust(4,0,USetStr(4191),true,M4Val);
      if (HasMultiCurrency) then begin
        if (inbase==0) then begin
          OutString(420,0,USetStr(3201) & "/" & USetStr(3200),true);
        end;
      end;
      if (RepSpec.flags[2]==1) then begin
        OutString(8,0,USetStr(4195),true);
      end;
      OutStringAdjust(2,0,USetStr(4189),true,M4Val);
      EndFormat;  
    otherwise
      StartFormat(15);
      OutString(0,0,USetStr(3184),false);
      OutString(65,0,USetStr(2435),false);
      OutString(115,0,USetStr(2436),false);
      OutStringAdjust(3,0,USetStr(4190),true,M4Val);
      OutStringAdjust(4,0,USetStr(4191),true,M4Val);
      if (HasMultiCurrency) then begin
        if (inbase==0) then begin
          OutString(420,0,USetStr(3201) & "/" & USetStr(3200),true);
        end;
      end;
      OutStringAdjust(2,0,USetStr(4189),true,M4Val);
      EndFormat;  
  end;
  Gray_Divider(0,1);
  switch (RepSpec.Media) begin
    case mtFile:
      goto LVendHeadtoFile2;
    case mtExcel:
LVendHeadtoFile2:;    
      StartFormat(15);
      OutString(0,0,"",false);
      OutString(6,0,USetStr(4192),false);
      OutString(420,0,"",false);
      OutString(420,0,"",false);
      OutString(420,0,"",false);
      OutString(420,0,"",false);
      OutVal(1,0,startbalp,M4Val,true);
      EndFormat;  
    otherwise
      StartFormat(15);
      OutString(6,0,USetStr(4192),false);
      OutVal(2,0,startbalp,M4Val,true);
      EndFormat;  
  end;
  return;
end;

global
procedure VendListTrans(var array string acur,var array val av1,var array val av2,var array val av3,var Integer curcnt,record CUVc VEr,var val balp,record RcVc RepSpec,
                        Boolean reportf)
begin
  record OPrsVc OPrsr;
  record BaseCurBlock bascur;
  val StartBal;
  val SumDebet,SumCredit;
  Boolean custout;
  Boolean found;
  val totgain,totloss;
  Boolean printf; 
  
  Array Integer adocRwtype;
  Array LongInt adocInvoiceNr;
  Array Date adocInvDate;
  Array Date adocDueDate;
  Array val adocRVal;
  Array val adocCredVal;
  Array val adocDebVal;
  Array string 20 adocVEInvNo;
  Array string 5 adocCurncyCode;
  Integer adoccnt;
  
  BlockLoad(bascur);
  custout = false;
  printf = true;
  StartBal = balp;
  if ((RepSpec.flags[1]==0) or (balp<>0)) then begin
    VendHead(RepSpec,VEr,balp,RepSpec.flags[2]);
    custout = true;
  end;

  OPrsr.VECode = VEr.Code;
  OPrsr.TransDate = RepSpec.sStartDate;
  found = true;  
  while (LoopMain(OPrsr,2,found)) begin
    if (found) then begin
      if (OPrsr.VECode<>VEr.Code) then begin
        found = false;
      end;
    end;    
    if (found) then begin
      if (OPrsr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    end;    
    if (found) then begin
      if (reportf) then begin
        if (custout==false) then begin
          VendHead(RepSpec,VEr,balp,RepSpec.flags[2]);
          custout = true;
        end;
      end;

//Trace("v=" & v," cuscurval=" & cuscurval);                   
//Trace(""," OPrsr.TransType=" & OPrsr.TransType);                   

      if (OPrsr.TransType==kOPrsTransTypeInvoice) then begin
        VEPer_PrintInvoice(RepSpec,VEr,bascur,OPrsr.TransNr,acur,av1,av2,av3,curcnt,balp,totgain,totloss,SumDebet,SumCredit,reportf,
                           adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);
      end;
      if (OPrsr.TransType==kOPrsTransTypePayment) then begin      
        VEPer_PrintPayment(RepSpec,VEr,OPrsr,bascur,acur,av1,av2,av3,curcnt,custout,balp,totloss,totgain,SumDebet,SumCredit,reportf,
                           adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);        
      end;
      if (OPrsr.TransType==kOPrsTransTypePurgeNLTransaction) then begin
        VEPer_PrintPurgeTransaction(RepSpec,VEr,OPrsr,StartBal,acur,av1,av2,av3,curcnt,custout,balp,totloss,totgain,SumDebet,SumCredit,bascur,reportf,
                           adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);        
      end;
      if (OPrsr.TransType==kOPrsTransTypeNLTransaction) then begin
        VEPer_PrintTransaction(RepSpec,VEr,OPrsr,StartBal,acur,av1,av2,av3,curcnt,custout,balp,totloss,totgain,SumDebet,SumCredit,bascur,reportf,
                           adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);        
      end;
      if (OPrsr.TransType==kOPrsTransTypeCashOut) then begin
        VendListTransCLOut(RepSpec,OPrsr,VEr,balp,totloss,totgain,SumDebet,bascur,curcnt,acur,av2,av3,reportf,
                           adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);        
      end;    
      if (OPrsr.TransType==kOPrsTransTypeCashIn) then begin
        VendListTransCLIn(RepSpec,OPrsr,VEr,balp,totloss,totgain,SumCredit,bascur,curcnt,acur,av2,av3,reportf,
                           adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);        
      end;    
      if (OPrsr.TransType==kOPrsTransTypeReverseSupplierPrepayment) then begin
        VendListTransCLInRevPrepVE(RepSpec,OPrsr,VEr,balp,SumCredit,bascur,curcnt,acur,av2,av3,reportf,
                           adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);        
      end;    
    end;
  end;
  if (reportf) then begin
    VEPer_PrintTotals(RepSpec,custout,printf,balp,totgain,totloss,SumDebet,SumCredit);
  end else begin
    PrintVePerForm(RepSpec,VEr,StartBal,balp,
                   adocRwtype,adocInvoiceNr,adocVEInvNo,
                   adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,
                   adoccnt);
  end;
  return;
end;

procedure VendListTrans_SortOnInvoice(var array string acur,var array val av1,var array val av2,var array val av3,var Integer curcnt,record CUVc VEr,var val balp,record RcVc RepSpec,
                                      Boolean reportf)
BEGIN
  record OPrsVc OPrsr;
  record OPrsVc OPrs2r;
  record BaseCurBlock bascur;
  val StartBal;
  val SumDebet,SumCredit;
  Boolean custout;
  Boolean found;
  val totgain,totloss;
  Boolean printf; 
  
  Array Integer adocRwtype;
  Array LongInt adocInvoiceNr;
  Array Date adocInvDate;
  Array Date adocDueDate;
  Array val adocRVal;
  Array val adocCredVal;
  Array val adocDebVal;
  Array string 20 adocVEInvNo;
  Array string 5 adocCurncyCode;
  Integer adoccnt;
  
  BlockLoad(bascur);
  custout = false;
  printf = true;
  StartBal = balp;
  if ((RepSpec.flags[1]==0) or (balp<>0)) then begin
    VendHead(RepSpec,VEr,balp,RepSpec.flags[2]);
    custout = true;
  end;

  OPrsr.VECode = VEr.Code;
  OPrsr.TransDate = RepSpec.sStartDate;
  found = true;  
  while (LoopMain(OPrsr,2,found)) begin
    if (found) then begin
      if (OPrsr.VECode<>VEr.Code) then begin
        found = false;
      end;
    end;    
    if (found) then begin
        if (OPrsr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    end;    
    if (found) then begin
      if (custout==false) then begin
        VendHead(RepSpec,VEr,balp,RepSpec.flags[2]);
        custout = true;
      end;
      if (OPrsr.TransType==0) then begin
        if (OPrsr.VINr==OPrsr.TransNr) then begin
          VEPer_PrintInvoice(RepSpec,VEr,bascur,OPrsr.TransNr,acur,av1,av2,av3,curcnt,balp,totgain,totloss,SumDebet,SumCredit,reportf,
                             adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);                        
          VEPer_PrintDataForInvoice(RepSpec,VEr,bascur,OPrsr.TransNr,StartBal,custout,acur,av1,av2,av3,curcnt,balp,totgain,totloss,SumDebet,SumCredit,reportf,
                             adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);                        
        end;
      end;
      if (OPrsr.TransType==1) then begin      
        if (OPrsr.VINr<=0) then begin
          VEPer_PrintPayment(RepSpec,VEr,OPrsr,bascur,acur,av1,av2,av3,curcnt,custout,balp,totloss,totgain,SumDebet,SumCredit,reportf,
                             adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);                                  
        end else begin
          OPrs2r.VINr = OPrsr.VINr;
          OPrs2r.TransType = 0;
          if (ReadFirstKey("VIKey",OPrs2r,2,true)) then begin 
            if (DateInRange(OPrs2r.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
              VEPer_PrintPayment(RepSpec,VEr,OPrsr,bascur,acur,av1,av2,av3,curcnt,custout,balp,totloss,totgain,SumDebet,SumCredit,reportf,
                                 adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);                        
            end;
          end;
        end;
      end;
      if (OPrsr.TransType==kOPrsTransTypePurgeNLTransaction) then begin
        if (OPrsr.VINr<=0) then begin
          VEPer_PrintPurgeTransaction(RepSpec,VEr,OPrsr,StartBal,acur,av1,av2,av3,curcnt,custout,balp,totloss,totgain,SumDebet,SumCredit,bascur,reportf,
                                 adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);                        
        end;
      end;
      if (OPrsr.TransType==kOPrsTransTypeNLTransaction) then begin
        if (OPrsr.VINr<=0) then begin
          VEPer_PrintTransaction(RepSpec,VEr,OPrsr,StartBal,acur,av1,av2,av3,curcnt,custout,balp,totloss,totgain,SumDebet,SumCredit,bascur,reportf,
                                 adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);                        
        end;
      end;
      if (OPrsr.TransType==3) then begin
        if (OPrsr.VINr<=0) then begin
          VendListTransCLOut(RepSpec,OPrsr,VEr,balp,totloss,totgain,SumDebet,bascur,curcnt,acur,av2,av3,reportf,
                           adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);        
        end;
      end;    
      if (OPrsr.TransType==4) then begin
        if (OPrsr.VINr<=0) then begin
          VendListTransCLIn(RepSpec,OPrsr,VEr,balp,totloss,totgain,SumCredit,bascur,curcnt,acur,av2,av3,reportf,
                           adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);        
        end;
      end;    
      if (OPrsr.TransType==kOPrsTransTypeReverseSupplierPrepayment) then begin
        if (OPrsr.VINr<=0) then begin
          VendListTransCLInRevPrepVE(RepSpec,OPrsr,VEr,balp,SumCredit,bascur,curcnt,acur,av2,av3,reportf,
                           adocRwtype,adocInvoiceNr,adocVEInvNo,adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,adoccnt);        
        end;
      end;    
    end;
  end;
  if (reportf) then begin
    VEPer_PrintTotals(RepSpec,custout,printf,balp,totgain,totloss,SumDebet,SumCredit);
  end else begin
    PrintVePerForm(RepSpec,VEr,StartBal,balp,
                   adocRwtype,adocInvoiceNr,adocVEInvNo,
                   adocInvDate,adocDueDate,adocRVal,adocCredVal,adocDebVal,adocCurncyCode,
                   adoccnt);
  end;
  RETURN;
END;

global
procedure RunVePer(record RcVc RepSpec,Boolean reportf,var array val acurv1,var array val acurv2,var array val acurv3,var array string acur,var Integer curcnt,var val TotStartBal,var val TotEndBal)
begin
  record CUVc VEr;
  string 255 frcc,tocc;
  record VSVc VSr;
  Boolean TrHs,stfound,testf;
  val StartBal;
  val DiffBal,EndBal,EndBalPlus,EndBalMinus;
  val v,t;
  record RcVc oldRepSpec;
  Date td;

  frcc = FirstInRange(RepSpec.f1,20);
  tocc = LastInRange(RepSpec.f1,20);

  VEr.Code = frcc;
  TrHs = true;
  while (LoopMain(VEr,1,TrHs)) begin
    testf = true;
    if (nonblank(tocc)) then begin
      if (VEr.Code>tocc) then begin
        TrHs = false;
      end;
    end;      
    if (TrHs) then begin
      if (nonblank(RepSpec.f2)) then begin
        if (RepSpec.f2<>VEr.VECat) then begin testf = false; end;
      end;
    end;    
    if (TrHs==false) then begin testf = false; end;
    if (VEr.VEType==0) then begin testf = false; end;
    if (testf==true) then begin 
      if (nonblank(RepSpec.f4)) then begin
        if (SetInSet2(RepSpec.f4,VEr.Classification)==false) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.f5)) then begin
        if (testf) then begin
          testf = false;
          ClassTypef(RepSpec.f5,VEr.Classification,testf);
        end;
      end;
    end;
    if (testf) then begin
      VSr.VECode = VEr.Code;
      stfound = ReadFirstMain(VSr,1,true);
      if (stfound==true) then begin
        if ((RepSpec.flags[2]==1) and (nonblank(VEr.VECurncyCode))) then begin
          VEGetStartBalance(VEr,"vesalesinclvat",RepSpec.CurncyCode,RepSpec.sStartDate,StartBal);
          VEGetStartBalance(VEr,"vepaidvalue",RepSpec.CurncyCode,RepSpec.sStartDate,v);
          StartBal = StartBal + v;

//          EndBal = GetBalance(VEr,"vesalesinclvat",RepSpec.sEndDate);
//          v = GetBalance(VEr,"vepaidvalue",RepSpec.sEndDate);

          EndBal = VEGetEndBalance(VEr,"vesalesinclvat",RepSpec.CurncyCode,RepSpec.sEndDate);
          v = VEGetEndBalance(VEr,"vepaidvalue",RepSpec.CurncyCode,RepSpec.sEndDate);

          EndBal = EndBal + v;
          if (RepSpec.flags[3]==0) then begin
            RecordCopy(oldRepSpec,RepSpec);
            td.day = 1; td.month = 1; td.year = 1980;
            oldRepSpec.sStartDate = td;
            oldRepSpec.sEndDate = AddDay(RepSpec.sStartDate,-1);
            t = OrderedOPSum(oldRepSpec,VEr);
            StartBal = StartBal + t;
            EndBal = EndBal + t;
          end;
          DiffBal = StartBal - EndBal;
        end else begin
          VEGetStartBalance(VEr,"vebalance",RepSpec.CurncyCode,RepSpec.sStartDate,StartBal);
//          EndBal = GetBalance(VEr,"vebalance",RepSpec.CurncyCode,RepSpec.sEndDate);
          EndBal = VEGetEndBalance(VEr,"vebalance",RepSpec.CurncyCode,RepSpec.sEndDate);
          if (RepSpec.flags[3]==0) then begin
            RecordCopy(oldRepSpec,RepSpec);
            td.day = 1; td.month = 1; td.year = 1980;
            oldRepSpec.sStartDate = td;
            oldRepSpec.sEndDate = AddDay(RepSpec.sStartDate,-1);
            t = OrderedOPSum(oldRepSpec,VEr);
            StartBal = StartBal + t;
            EndBal = EndBal + t;
          end;
          DiffBal = StartBal - EndBal;
        end;
      end else begin
        StartBal = 0;
        EndBal = 0;
        DiffBal = 0;
      end;
      TotStartBal = TotStartBal + StartBal;      
      if (RepSpec.ArtMode==0) then begin   
          if (RepSpec.flags[3]==0) then begin
            t = OrderedOPSum(RepSpec,VEr);
            DiffBal = DiffBal - t;
            EndBal = EndBal + t;
          end;
          testf = false;          
          if (RepSpec.flags[1]<>0) then begin
            if ((StartBal==0) and (DiffBal==0) and (EndBal==0)) then begin testf = true; end;
          end;  
          if (testf==false) then begin
             DiffBal = -DiffBal;
             if (reportf) then begin
               StartFormat(15);
               OutString(0,"DblCUVc",VEr.Code,false);
               OutString(60,0,VEr.Name,false);
               OutVal(3,0,StartBal,M4Val,true);
               OutVal(4,0,DiffBal,M4Val,true);
               OutVal(2,0,EndBal,M4Val,true);
               OutString(465,0,VEr.VECurncyCode,false);
               EndFormat;
             end;
             if (EndBal<0) then begin
               EndBalMinus = EndBalMinus + EndBal;
             end else begin
               EndBalPlus = EndBalPlus + EndBal;
             end;   
          end;
          AddCurncyTotals(acur,acurv1,curcnt,VEr.VECurncyCode,StartBal);
          AddCurncyTotals(acur,acurv2,curcnt,VEr.VECurncyCode,DiffBal);
          AddCurncyTotals(acur,acurv3,curcnt,VEr.VECurncyCode,EndBal);
          TotEndBal = TotEndBal + EndBal;                       
      end;      
      if (RepSpec.ArtMode==1) then begin      
         testf = false;
          if (RepSpec.flags[1]<>0) then begin
            if ((StartBal==0) and (DiffBal==0) and (EndBal==0)) then begin 
              testf = true; 
            end;
          end;  
          if (testf==false) then begin
            AddCurncyTotals(acur,acurv1,curcnt,VEr.VECurncyCode,StartBal);
            EndBal = StartBal;
            if (RepSpec.flags[9]==0) then begin
              VendListTrans(acur,acurv1,acurv2,acurv3,curcnt,VEr,EndBal,RepSpec,reportf);
            end else begin
              VendListTrans_SortOnInvoice(acur,acurv1,acurv2,acurv3,curcnt,VEr,EndBal,RepSpec,reportf);
            end;
            AddCurncyTotals(acur,acurv3,curcnt,VEr.VECurncyCode,StartBal);
            TotEndBal = TotEndBal + EndBal;
          end;
      end;      
    end;    
  end;
  return;
end;

global
procedure VePerRn(record RcVc RepSpec)
begin
  record VSVc VSr;
  Boolean TrHs,stfound,testf;
  val sum1;
  val StartBal;
  val DiffBal,EndBal,EndBalPlus,EndBalMinus;
  string 255 frcc,tocc;
  val TotStartBal;
  val TotEndBal;
  val v,t;
  string 255 tstr;
  Integer rw;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt;
  Date td;
  
  frcc = FirstInRange(RepSpec.f1,20);
  tocc = LastInRange(RepSpec.f1,20);

  BeginCurncyTotals(curcnt);
  StartReportJob(USetStr(4180));
   rw = 1;
   HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;      
   HTDetailLevel(RepSpec.ArtMode,tstr);
   Header(rw,tstr,0);          
   HTVends(frcc,tocc,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;         
   if (nonblank(RepSpec.f2)) then begin
     HTLevCat(RepSpec.f2,tstr);
     Header(rw,tstr,1);
     rw = rw + 1;          
   end;
   if (RepSpec.flags[1]==1) then begin
     tstr = USetStr(6651);
     Header(rw,tstr,1);
     rw = rw + 1;          
   end;
   if (HasContactClassification) then begin 
     HTCustClass(RepSpec.f4,tstr);
     if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
     end; 
     HTCustClassType(RepSpec.f5,tstr);
     if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
     end;
   end;
   if (HasMultiCurrency) then begin
     if ((RepSpec.flags[2]==1) and (ProgramType<>4)) then begin
       tstr = USetStr(6650);
       Header(rw,tstr,1);
       rw = rw + 1;         
     end;
     if (RepSpec.flags[2]==0) then begin
       tstr = USetStr(2369);
       Header(rw,tstr,1);
       rw = rw + 1;         
     end;
   end;
  EndHeader;
  if (RepSpec.wholemonthf==0) then begin
    StartFormat(15);
      OutString(0,0,USetStr(1163),false);
    EndFormat;
    goto L99;
  end;
  
  if (RepSpec.ArtMode==0) or (RepSpec.flags[2]==1) then begin
    SetRepColBiDi(2,460,495);
    SetRepColBiDi(3,298,338);
    SetRepColBiDi(4,384,424);
  end else begin
    SetRepColBiDi(2,480,515);
    SetRepColBiDi(3,298,338);
    SetRepColBiDi(4,358,398);
  end;
  SetRepCol(5,293);
  SetRepCol(6,130);
  SetRepCol(7,305);
  SetRepCol(8,389);  
  SetRepCol(9,221); 
  if (RepSpec.ArtMode==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(5223),false);
    OutString(60,0,USetStr(2483),false);
    OutStringAdjust(3,0,USetStr(2495),true,M4Val);
    OutStringAdjust(4,0,USetStr(2496),true,M4Val);
    OutStringAdjust(2,0,USetStr(2489),true,M4Val);
    EndFormat;
    Gray_Divider(0,1);
  end;
  
  RunVePer(RepSpec,true,av1,av2,av3,acur,curcnt,TotStartBal,TotEndBal);

  if (RepSpec.flags[2]==0) then begin
    StartFormat(15);
    switch (RepSpec.Media) begin
      case mtFile:
        goto LVEPer_PrintTotalstoFile3;
      case mtExcel:
LVEPer_PrintTotalstoFile3:;
        OutString(0,0,"",false);
        OutString(0,0,"",false);
        OutString(0,0,"",false);
        OutStringAdjust(3,0,USetStr(2495),true,M4Val);
        OutStringAdjust(4,0,USetStr(2496),true,M4Val);
        OutString(0,0,"",false);
        OutStringAdjust(2,0,USetStr(2489),true,M4Val);
      otherwise
        OutStringAdjust(3,0,USetStr(2495),true,M4Val);
        OutStringAdjust(4,0,USetStr(2496),true,M4Val);
        OutStringAdjust(2,0,USetStr(2489),true,M4Val);
    end;
    EndFormat;
    Gray_Divider(0,1);
//    v = TotStartBal - TotEndBal;
    v = TotEndBal - TotStartBal;
    StartFormat(15);
    OutString(6,0,USetStr(2429),false);
    OutVal(3,0,TotStartBal,M4Val,true);
    OutVal(4,0,v,M4Val,true);
    OutVal(2,0,TotEndBal,M4Val,true);
    EndFormat;
  end else begin
    StartFormat(15);
    switch (RepSpec.Media) begin
      case mtFile:
        goto LVEPer_PrintTotalstoFile4;
      case mtExcel:
LVEPer_PrintTotalstoFile4:;
        OutString(0,0,"",false);
        OutString(0,0,"",false);
        OutString(0,0,"",false);
        OutStringAdjust(3,0,USetStr(2495),true,M4Val);
        OutStringAdjust(4,0,USetStr(2496),true,M4Val);
        OutString(0,0,"",false);
        OutStringAdjust(2,0,USetStr(2489),true,M4Val);
      otherwise
        OutStringAdjust(3,0,USetStr(2495),true,M4Val);
        OutStringAdjust(4,0,USetStr(2496),true,M4Val);
        OutStringAdjust(2,0,USetStr(2489),true,M4Val);
    end;
    EndFormat;
    Gray_Divider(0,1);
    switch (RepSpec.Media) begin
      case mtFile:
        goto LVEPer_PrintTotalstoFile5;
      case mtExcel:
LVEPer_PrintTotalstoFile5:;
        PrintCurncyTotalsToFile(acur,av1,av2,av3,curcnt,2,3,0,4,0,2,1,6,true,RepSpec.PocketPC);
      otherwise
        PrintCurncyTotals(acur,av1,av2,av3,curcnt,3,4,2,6,true,RepSpec.PocketPC);
    end;
  end;
  if ((RepSpec.ArtMode==0) and ((EndBalPlus<>0) or (EndBalMinus<>0)))then begin
    StartFormat(15);
    OutString(6,0,USetStr(7324),false);
    OutVal(2,0,EndBalPlus,M4Val,true);
    OutString(6,0,USetStr(7325),false);
    OutVal(2,0,EndBalMinus,M4Val,true);
    EndFormat;
  end;
L99:;  
  EndJob;
  return;
end;
