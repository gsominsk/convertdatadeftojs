external procedure AutomatedSalesOrderly(string);
external function Boolean IsEnterprise();

external procedure GetNextToken(string,var Integer,var string);
external function Boolean GetNextTokenReturn(string,var Integer,var string);
external procedure GetNext2Sep(string,var Integer,var string);
external function Boolean FindStringInString(string,string);
external function Boolean AccInRange(string,string);
external procedure LstRegDat(var string);

procedure ListSalesCodes()
BEGIN
  record SalesCodeBlock SalesCoder;
  row SalesCodeBlock SalesCoderw;
  Integer rwcnt,i;
  
  BlockLoad(SalesCoder);
  rwcnt = MatRowCnt(SalesCoder);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SalesCoder,i,SalesCoderw);
    StartFormat(15);
    OutString(0,0,SalesCoderw.Code,false);
    OutString(50,0,SalesCoderw.SalesAccDom,false);
    OutString(150,0,SalesCoderw.SalesAccEU,false);
    OutString(250,0,SalesCoderw.SalesAccExp,false);
    OutString(350,0,SalesCoderw.Comment,false);
    EndFormat;
  end;
  RETURN;
END;

procedure Bud2List()
BEGIN
  record Bud2Vc Bud2r;
  Boolean TrHs;

  StartFormat(20);
  OutString(0,0,USetStr(3401),false);
  EndFormat;
  StartFormat(20);
  OutString(0,0,USetStr(3402),false);
  OutString(80,0,USetStr(3403),false);
  OutString(150,0,USetStr(3404),false);
  EndFormat;
  TrHs = true;
  while (LoopKey("ObjAccKey",Bud2r,1,TrHs)) begin
    if (TrHs) then begin
    Gray_Divider(0,1);
//    Bud2Sumup(&Bud2r);
    StartFormat(15);
    OutString(0,0,Bud2r.AccNumber,false);
    OutString(80,0,Bud2r.Objects,false);
    OutString(150,0,Bud2r.Comment,false);
    EndFormat;
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(20);
  EndFormat;
  RETURN;
END;


procedure Bud1List()
BEGIN
  Boolean first;
  record Bud1Vc Bud1r;
  Boolean TrHs;

  StartFormat(20);
  OutString(0,0,USetStr(3381),false);
  EndFormat;
  StartFormat(20);
  OutString(0,0,USetStr(3382),false);
  OutString(60,0,USetStr(3383),false);
  OutString(130,0,USetStr(3389),false);
  OutString(230,0,USetStr(3384),false);
  OutString(480,0,USetStr(3390),true);
  EndFormat;
  first = true;
  TrHs = true;
  while (LoopKey("ObjAccKey",Bud1r,1,TrHs)) begin
    if (TrHs) then begin
      Gray_Divider(0,1);
//      Bud1Sumup(&Bud1r);
      StartFormat(15);
      OutString(0,0,Bud1r.AccNumber,false);
      OutString(60,0,Bud1r.Objects,false);
      OutString(130,0,Bud1r.BFCode,false);
      OutString(230,0,Bud1r.Comment,false);
      OutVal(480,0,Bud1r.BudSum,M4Val,true);
      EndFormat;
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(20);
  EndFormat;
  RETURN;
END;

procedure BFList()
BEGIN
  record BFVc BFr;
  row BFVc BFrw;
  Boolean TrHs;
  Integer i,rwcnt;
  Integer ri;
  string 255 tstr;
  val pv;

  StartFormat(20);
  OutString(0,0,USetStr(3281),false);
  EndFormat;
  StartFormat(20);
  OutString(0,0,USetStr(3282),false);
  OutString(50,0,USetStr(3283),false);
  OutString(250,0,USetStr(3284),true);
  OutString(350,0,USetStr(3285),true);
  EndFormat;
  TrHs = true;
  BFr.BFCode = "";
  while (LoopMain(BFr,1,TrHs)) begin
    StartFormat(15);
    OutString(0,0,BFr.BFCode,false);
    OutString(50,0,BFr.Comment,false);
    OutVal(300,0,BFr.Sum,M4Val,true);
    EndFormat;
    rwcnt = MatRowCnt(BFr);
    for (i=0; i<rwcnt; i=i+1) begin
      MatRowGet(BFr,i,BFrw);
      pv = BFrw.crvval * 100;
      pv = pv / BFr.Sum;
      ri = i+1;
      tstr = ri;//M4ToPackStr(&ri,M4Int,tstr);
      StartFormat(15);
      OutString(100,0,tstr,false);
      OutVal(250,0,BFrw.crvval,M4Val,true);
      OutVal(350,0,pv,M4Val,true);
      EndFormat;
    end;
    StartFormat(15);
    EndFormat;
  end;
  StartFormat(20);
  EndFormat;
  RETURN;
END;

procedure AutList(record RcVc RepSpec)
BEGIN
  record AutVc Autr;
  row AutVc Autrw;
  Boolean TrHs;
  Integer rwcnt;
  Integer i;

  StartFormat(20);
  OutString(0,0,3121,false);
  EndFormat;
  Autr.Code = RepSpec.FirstAcc;
  TrHs = true;
  while (LoopMain(Autr,1,TrHs)) begin
    if (TrHs) then begin
      if ((Autr.Code>RepSpec.LastAcc) and (nonblank(RepSpec.LastAcc))) then begin
        TrHs = false;
      end;  
    end;    
    if (TrHs) then begin
      StartFormat(15);
      OutString(0,0,Autr.Code,false);
      OutString(100,0,Autr.Comment,false);
      EndFormat;
      rwcnt = MatRowCnt(Autr);
      for (i = 0 ; i<rwcnt; i=i+1) begin
        MatRowGet(Autr,i,Autrw);
        StartFormat(15);
        OutString(40,0,Autrw.AccNumber,false);
        OutString(100,0,Autrw.objstr,false);
        OutString(200,0,Autrw.comstr,false);
        OutString(380,0,Autrw.dstr,true);
        OutString(1,0,Autrw.cstr,true);
        EndFormat;
      end;
    end;
  end;
  StartFormat(20);
  EndFormat;
  RETURN;
END;

procedure ObjectList()
BEGIN
  Boolean Accs;
  record ObjVc Objr;

  StartFormat(20);
  OutString(0,0,USetStr(3321),false);
  EndFormat;
  StartFormat(20);
  OutString(0,0,USetStr(3322),false);
  OutString(50,0,USetStr(3323),false);
  OutString(280,0,USetStr(3324),false);
  EndFormat;
  Accs = true;
  Objr.Code = "";
  while (LoopMain(Objr,1,Accs)) begin
      StartFormat(15);
      OutString(0,0,Objr.Code,false);
      OutString(50,0,Objr.Comment,false);
      OutString(280,0,Objr.OTCode,false);
      if (Objr.MultiYear!=0) then begin
        OutString(1,0,USetStr(3325),true);
      end;  
      if (Objr.TerminateFlag!=0) then begin
        OutString(480,0,USetStr(7009),true);
      end;  
      EndFormat;
  end;
  StartFormat(20);
  EndFormat;
  RETURN;
END;

procedure OTList()
BEGIN
  Boolean Accs;
  record OTVc OTr;

  StartFormat(20);
  OutString(0,0,USetStr(3301),false);
  EndFormat;
  StartFormat(20);
  OutString(0,0,USetStr(3302),false);
  OutString(50,0,USetStr(3303),false);
  EndFormat;
  Accs = true;
  OTr.Code = "";
  while (LoopMain(OTr,1,Accs)) begin
    StartFormat(15);
    OutString(0,0,OTr.Code,false);
    OutString(50,0,OTr.Comment,false);
    EndFormat;
  end;
  StartFormat(20);
  EndFormat;
  RETURN;
END;

// AccInRange and a lot of other functions Moved to Tools9.hal

function Boolean CanBeFuncName(string c)
begin
  Boolean res;
  
  res = false;
  if (asc(c)>=48 and asc(c)<=57) then begin // 0..9
    res = true;
  end;
  if (asc(c)>=65 and asc(c)<=90) then begin // A..Z
    res = true;
  end;
  if (asc(c)==95) then begin // _
    res = true;
  end;
  if (asc(c)>=97 and asc(c)<=122) then begin // a..z
    res = true;
  end;
  
  CanBeFuncName = res;
  return;
end;

function Boolean GetNextFunction(string Formula,var Integer pos,var string FuncName,var array string Params,var Integer ParamCount)
begin
  Boolean res,PosInFuncName,PosInParams;
  Integer i,cnt;
  string 1 c;
  
  cnt = Len(Formula);
  FuncName = "";
  Params[0] = "";
  ParamCount = 0;
  PosInFuncName = true;
  PosInParams = false;
  
  for (i=pos;i<cnt;i=i+1) begin
    c = Mid(Formula,i,1);
    switch (c) begin
      case "(":
        PosInFuncName = false;
        PosInParams = true;
      case ")":
        res = true;
        pos = i + 1;
        ParamCount = ParamCount + 1;
        i = cnt;
      case ",":
        ParamCount = ParamCount + 1;
        Params[ParamCount] = "";
    otherwise
      if (PosInFuncName) then begin
        if (CanBeFuncName(c)) then begin
          FuncName = FuncName & c;
        end;
      end;
      if (PosInParams) then begin
        Params[ParamCount] = Params[ParamCount] & c;
      end;
    end;
  end;
  
  for (i=0;i<ParamCount;i=i+1) begin
    if (Left(Params[i],1)=="""" and Right(Params[i],1)=="""") then begin
      Params[i] = Mid(Params[i],1,Len(Params[i]) - 2);
    end;
  end;
  
  GetNextFunction = res;
  return;
end;

function Boolean AccInFormula(string Acc,string Formula)
begin
  Boolean res;
  string 255 AccFunctions,FuncName;
  array string 255 Params;
  Integer pos,ParamCount,i;
  
  AccFunctions = "Result,Balance,VATResult,VATBalance,ObjResult";
  
  while (!res and GetNextFunction(Formula,pos,FuncName,Params,ParamCount)) begin
    if (SetInSet(FuncName,AccFunctions)) then begin
      if (Acc>=FirstInRange(Params[0],10) and Acc<=LastInRange(Params[0],10)) then begin
        res = true;
      end;
    end;
  end;
  
  AccInFormula = res;
  return;
end;

procedure AddRange(var string tstr,string marks,string id)
BEGIN
  string 255 istr;

  istr = id; //M4ToPackStr(&id,M4Long,istr); why we have packdate only
  if (nonblank(tstr)) then begin
    tstr = tstr & ",";
  end;  
  tstr = tstr & marks;
  tstr = tstr & istr;
  RETURN;
END;

procedure FindBRDefs(string shortname,string accn,var string res)
BEGIN
  record UserDefRepVc UserDefRepr;
  record UserDefRepLinesVc UserDefRepLinesr;
  row UserDefRepVc UDRrw;
  Boolean foundf,found2f,testf;
  string 255 ckey;
  string 255 mark;
  Boolean addflag;
  string 255 Nitem;
  string 255 Nitem2;
  string 255 NRu;
  string 5 nsep;
  Boolean Accs;
  Integer np;
  Integer i,rwcnt;
  
  res = "";
  foundf = true;
  UserDefRepr.shortname = shortname;
  while (LoopMain(UserDefRepr,1,foundf)) begin
    if (nonblank(shortname)) then begin
      if (UserDefRepr.shortname!=shortname) then begin foundf = false; end;
    end;
    testf = foundf;
    if (testf) then begin
      switch (UserDefRepr.Type) begin
        case kUserDefRepKFR: mark = USetStr(3278);
        case kUserDefRepBal: mark = USetStr(3270);
        case kUserDefRepRes: mark = USetStr(3271);
        case kUserDefRepVAT: mark = USetStr(3279);
      end;
      if (UserDefRepr.Type==kUserDefRepKFR or UserDefRepr.Type==kUserDefRepVAT) then begin
        rwcnt = MatRowCnt(UserDefRepr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(UserDefRepr,i,UDRrw);
          if (AccInFormula(accn,UDRrw.defstr)) then begin 
            AddRange(res,mark,UDRrw.Code); 
          end;
        end;
      end else begin
        ResetLoop(UserDefRepLinesr);
        ckey = "ShortIDKey:" & UserDefRepr.shortname;
        UserDefRepLinesr.IdKey = 0; 
        found2f = true;
        while (LoopKey(ckey,UserDefRepLinesr,1,found2f)) begin
          if (UserDefRepLinesr.RsType==1) then begin
  /*        
            if (FindStringInString(UserDefRepLinesr.Desc,accn)) then begin AddRange(res,mark,UserDefRepLinesr.IdKey); end;
            if (FindStringInString(UserDefRepLinesr.Desc2,accn)) then begin AddRange(res,mark,UserDefRepLinesr.IdKey); end;
            if (FindStringInString(UserDefRepLinesr.Desc3,accn)) then begin AddRange(res,mark,UserDefRepLinesr.IdKey); end;
  */

            nsep = ""; Nitem = ""; Nitem2 = "";
            np = 0;
            addflag = false; 
            GetNext2Sep(UserDefRepLinesr.Desc,np,nsep);
            while (GetNextTokenReturn(UserDefRepLinesr.Desc,np,Nitem)) begin
              if (nsep=="-") then begin
                addflag = false; 
              end else begin
                addflag = true;
              end;
              GetNext2Sep(UserDefRepLinesr.Desc,np,nsep);
              if (nsep==".") then begin
                GetNextToken(UserDefRepLinesr.Desc,np,NRu);
                GetNext2Sep(UserDefRepLinesr.Desc,np,nsep);
              end else begin
                NRu = "";
              end;    
              if (nsep==":") then begin
                GetNextToken(UserDefRepLinesr.Desc,np,Nitem2);
                GetNext2Sep(UserDefRepLinesr.Desc,np,nsep);
              end else begin
                Nitem2 = "";
              end;   
              if (blank(Nitem2)) then begin
                if (accn==Nitem) then begin 
                  AddRange(res,mark,UserDefRepLinesr.IdKey);
                end;
              end else begin
                if (accn>=Nitem) and (accn<=Nitem2) then begin 
                  AddRange(res,mark,UserDefRepLinesr.IdKey);
                end;
              end;
            end;
            if (len(res)>240) then begin
              res = res & "....";
              goto LFindBRDefs;
            end;
            nsep = ""; Nitem = ""; Nitem2 = "";
            np = 0;
            addflag = false; 
            GetNext2Sep(UserDefRepLinesr.Desc2,np,nsep);
            while (GetNextTokenReturn(UserDefRepLinesr.Desc2,np,Nitem)) begin
              if (nsep=="-") then begin
                addflag = false; 
              end else begin
                addflag = true;
              end;
              GetNext2Sep(UserDefRepLinesr.Desc2,np,nsep);
              if (nsep==".") then begin
                GetNextToken(UserDefRepLinesr.Desc2,np,NRu);
                GetNext2Sep(UserDefRepLinesr.Desc2,np,nsep);
              end else begin
                NRu = "";
              end;    
              if (nsep==":") then begin
                GetNextToken(UserDefRepLinesr.Desc2,np,Nitem2);
                GetNext2Sep(UserDefRepLinesr.Desc2,np,nsep);
              end else begin
                Nitem2 = "";
              end;   
              if (blank(Nitem2)) then begin
                if (accn==Nitem) then begin 
                  AddRange(res,mark,UserDefRepLinesr.IdKey);
                end;
              end else begin
                if (accn>=Nitem) and (accn<=Nitem2) then begin 
                  AddRange(res,mark,UserDefRepLinesr.IdKey);
                end;
              end;
            end;
            if (len(res)>240) then begin
              res = res & "....";
              goto LFindBRDefs;
            end;          
            nsep = ""; Nitem = ""; Nitem2 = "";
            np = 0;
            addflag = false; 
            GetNext2Sep(UserDefRepLinesr.Desc3,np,nsep);
            while (GetNextTokenReturn(UserDefRepLinesr.Desc3,np,Nitem)) begin
              if (nsep=="-") then begin
                addflag = false; 
              end else begin
                addflag = true;
              end;
              GetNext2Sep(UserDefRepLinesr.Desc3,np,nsep);
              if (nsep==".") then begin
                GetNextToken(UserDefRepLinesr.Desc3,np,NRu);
                GetNext2Sep(UserDefRepLinesr.Desc3,np,nsep);
              end else begin
                NRu = "";
              end;    
              if (nsep==":") then begin
                GetNextToken(UserDefRepLinesr.Desc3,np,Nitem2);
                GetNext2Sep(UserDefRepLinesr.Desc3,np,nsep);
              end else begin
                Nitem2 = "";
              end;   
              if (blank(Nitem2)) then begin
                if (accn==Nitem) then begin 
                  AddRange(res,mark,UserDefRepLinesr.IdKey);
                end;
              end else begin
                if (accn>=Nitem) and (accn<=Nitem2) then begin 
                  AddRange(res,mark,UserDefRepLinesr.IdKey);
                end;
              end;
            end;
            if (len(res)>240) then begin
              res = res & "....";
              goto LFindBRDefs;
            end;                      
          end;
        end;
      end;
    end;
  end;
LFindBRDefs:;
  RETURN;
END;

procedure PrintObjects(record RcVc RepSpec,string ObjType)
begin
  record ObjVc Objr;
  Boolean found,testf,otheaderf;
  
  found = true;
  Objr.OTCode = ObjType;
  while (LoopKey("OTCode",Objr,1,found)) begin
    if (Objr.OTCode!=ObjType) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (RepSpec.flags[14]!=0) then begin
        if (Objr.TerminateFlag!=0) then begin testf = false; end;
      end;
      if (testf) then begin
        if (otheaderf==false) then begin
          StartFormat(15);
          OutString(100,0,USetStr(3280),false);
          OutString(200,0,ObjType,false);
          EndFormat;
          otheaderf = true;
        end;
        StartFormat(15);
        OutString(100,0,Objr.Code,false);
        OutString(200,0,Objr.Comment,false);
        EndFormat;
      end;
    end;
  end;
  return;
end;

procedure AccList(record RcVc RepSpec)
BEGIN
  string 255 dstr,tstr;
  string 255 fracc,toacc;
  string 255 frotacc,tootacc;
  record AccVc Accr;
  Boolean Accs,testf;
  record OTCheckBlock OTCb;
  row OTCheckBlock OTCbrw;
  Integer oti,otrwcnt;
  LongInt pos;

  BlockLoad(OTCb);
  otrwcnt = MatRowCnt(OTCb);
  fracc = FirstInRange(RepSpec.f1,10);
  toacc = LastInRange(RepSpec.f1,10);
  StartFormat(20);
  OutString(0,0,USetStr(3261),false);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(3262),false);
  OutString(50,0,USetStr(3263),false);

  if (RepSpec.flags[2]==1) then begin
    OutString(185,0,USetStr(3274),true);
    if (IsEnterprise) then begin
      OutString(205,0,USetStr(3273),false);
    end;
    OutString(260,0,USetStr(3272),false);
  end else begin
    OutString(300,0,USetStr(3274),true);
    if (IsEnterprise) then begin
      OutString(360,0,USetStr(3273),false);
    end;
  end;
  OutString(1,0,USetStr(3264),true);
  EndFormat;
  Gray_Divider(0,1);
  Accr.AccNumber = fracc;
  Accs = true;
  while (LoopMain(Accr,1,Accs)) begin
    if (nonblank(RepSpec.f1)) then begin
      if (Accr.AccNumber>toacc) then begin Accs = false; end;
    end;
    if (Accs) then begin  
      testf = true;
      if (RepSpec.flags[13]!=0) then begin
        if (Accr.blockedFlag!=0) then begin testf = false; end;
      end;
      if (testf) then begin  
        if (RepSpec.flags[2]==1) then begin
          FindBRDefs(RepSpec.AccStr,Accr.AccNumber,dstr);
        end;  
        if (Accr.AccType==0) then begin
          tstr = USetStr(3265);
        end;  
        if (Accr.AccType==1) then begin
          tstr = USetStr(3266);
        end;  
        if (Accr.AccType==2) then begin
          tstr = USetStr(3267);
        end;  
        if (Accr.AccType==3) then begin
          tstr = USetStr(3268);
        end;  
        if (Accr.AccType==4) then begin
          tstr = USetStr(3269);
        end;  
        StartFormat(15);
        OutString(0,0,Accr.AccNumber,false);
        if (RepSpec.flags[2]==1) then begin
          OutString(50,0,Left(Accr.Comment,30),false);
          OutString(200,0,Accr.VATCode,true);
          if (IsEnterprise) then begin
            OutString(210,0,Accr.AutCode,false);
          end;
          OutString(260,0,dstr,false);
        end else begin
          OutString(50,0,Accr.Comment,false);
          OutString(310,0,Accr.VATCode,true);
          if (IsEnterprise) then begin
            OutString(360,0,Accr.AutCode,false);
          end;
        end;
        if (Accr.GroupAcc!=0) then begin
          OutLongInt(400,0,Accr.GroupAcc,false);
        end;
        if (Accr.blockedFlag!=0) then begin
          OutString(420,0,USetStr(34400),false);
        end;  
        OutString(1,0,tstr,true);
        EndFormat;
        if (RepSpec.flags[3]!=0) then begin
          for (oti=0;oti<otrwcnt;oti=oti+1) begin
            MatRowGet(OTCb,oti,OTCbrw);
            pos = 0;
            GetNextSubstring(OTCbrw.Accs,pos,",",tstr);
            while (nonblank(tstr)) begin
              frotacc = FirstInRange(tstr,10);
              tootacc = LastInRange(tstr,10);
          
              if ((Accr.AccNumber>=frotacc) and (Accr.AccNumber<=tootacc)) then begin
                PrintObjects(RepSpec,OTCbrw.ObjType);
              end;
              GetNextSubstring(OTCbrw.Accs,pos,",",tstr);
            end;
          end;
        end;
      end;
    end;
  end;
  StartFormat(20);
  EndFormat;
  RETURN;
END;

procedure CompList()
BEGIN
  record CYBlock CompYear;

  BlockLoad(CompYear);
  StartFormat(15);
  OutString(0,0,USetStr(3341),false);
  OutString(150,0,CompYear.CompName,false);
  EndFormat;
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(3342),false);
  OutString(150,0,CompYear.Addr0,false);
  EndFormat;
  StartFormat(15);
  OutString(150,0,CompYear.Addr1,false);
  EndFormat;
  StartFormat(15);
  OutString(150,0,CompYear.Addr2,false);
  EndFormat;
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(3343),false);
  OutString(150,0,CompYear.OrgNr,false);
  EndFormat;
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  EndFormat;
  RETURN;
END;

global
procedure SysRn(record RcVc RepSpec)
BEGIN  
  string 255 tstr;
  
  StartReportJob(USetStr(3120));
  LstRegDat(tstr);
  Header(2,tstr,0);
  EndHeader;
    
  if (RepSpec.flags[1]<>0) then begin CompList; end;
  if (RepSpec.flags[2]<>0) then begin AccList(RepSpec); end;
  if (RepSpec.flags[3]<>0) then begin OTList; end;
  if (RepSpec.flags[4]<>0) then begin ObjectList; end;
  if (RepSpec.flags[6]<>0) then begin AutList(RepSpec); end;
  if (RepSpec.flags[7]<>0) then begin BFList; end;
  if (RepSpec.flags[8]<>0) then begin Bud1List; end;
  if (RepSpec.flags[9]<>0) then begin Bud2List; end;
  if (RepSpec.flags[10]<>0) then begin  end;
  if (RepSpec.flags[11]<>0) then begin ListSalesCodes; end;
  if (RepSpec.flags[12]<>0) then begin AccList(RepSpec); end;
  EndJob;
  RETURN;
END;

global
procedure AccListRn(record RcVc RepSpec)
begin  
  string 255 tstr;
  
  StartReportJob(USetStr(3122));
  EndHeader;    
  if (RepSpec.flags[2]<>0) then begin AccList(RepSpec); end;
  if (RepSpec.flags[12]<>0) then begin AccList(RepSpec); end;
  EndJob;
  AutomatedSalesOrderly("HasIntegratedNL+Run_AccListRn");
  return;
end;
