external function roundmode DefaultRoundMode();
external procedure GetAccDCBalance(string,string,Date,record ObjBalVc,Integer,Integer,Integer,string,var val,var val,Integer);

procedure AddAcc1DaughterDCBalance(record AccVc Accr,string objstr,Date bdp,val prcp,Integer simf,
                                   Integer basecurncy,Integer crncy,string crncycode,var val dvp,var val cvp)
BEGIN
  record ObjBalVc ObjBalr;
  val d;
  val c;

  ObjBalr.AccNumber = Accr.AccNumber;
  ObjBalr.Object = objstr;    
//  if (ReadFirstMain(ObjBalr,2,true)) then begin // This is neccesary, otherwise the report is VEERY slow.
  if (true) then begin // This is neccesary, otherwise grand daughther amounts not shown if daughters amounts are none
    GetAccDCBalance(Accr.AccNumber,objstr,bdp,ObjBalr,simf,basecurncy,crncy,crncycode,d,c,1);
    if (Accr.Conspr>0) then begin
      d = d * prcp;
      d = d / 100;
      d = Round(d,DefaultRoundMode);
      c = c * prcp;
      c = c / 100;
      c = Round(c,DefaultRoundMode);
    end;
    dvp = dvp + d;
    cvp = cvp + c;
  end;
  RETURN;    
END;

global 
function Boolean GetOwnerPrc(Date dp,var Date edp,var val vp)
BEGIN
  record OwnerPrcVc OwnerPrcr;
  Boolean res;

  res = false;
  vp = 100;
  OwnerPrcr.Date = dp;
  if (ReadLastMain(OwnerPrcr,1,false)) then begin
    edp = OwnerPrcr.Date;
    vp = OwnerPrcr.Prc;
    res = true;
  end;
  GetOwnerPrc = res;
  RETURN;
END;

procedure GetAcc1DaughterDCBalance(string accstr,string objstr,Date bdp,Integer simf,Integer abasecurncy,
                                  Integer crncy,string crncycode,var val dvp,var val cvp)
BEGIN
  record AccVc Accr;
  record ConsolidationBlock cr;
  Boolean Accs,testf;
  Date ed;
  val prc;
  string 255 blankstr;
  Integer basecurncy;
    
  dvp = 0;
  cvp = 0;
  basecurncy = abasecurncy;
  blankstr = "";
  BlockLoad(cr);
  if (basecurncy!=kReportBCOneConsolidationRate) then begin
    basecurncy = cr.ConsCrncy;  
  end;
  if (GetOwnerPrc(bdp,ed,prc)) then begin end;
  Accr.ConsAccNumber = accstr;
  Accr.AccNumber = "";
  Accs = true;
  while (LoopKey("ConsAccNumber",Accr,1,Accs)) begin
    if (Accr.ConsAccNumber<>accstr) then begin Accs = false; end;
    if (Accs) then begin
      AddAcc1DaughterDCBalance(Accr,objstr,bdp,prc,simf,basecurncy,0,blankstr,dvp,cvp);
    end;
  end;
  testf = true;
  Accr.AccNumber = accstr;
  if (ReadFirstMain(Accr,1,true)==false) then begin testf = false; end;//goto L99;
  if (nonblank(Accr.ConsAccNumber)) then begin testf = false; end;//goto L99;
  if (testf) then begin
    AddAcc1DaughterDCBalance(Accr,objstr,bdp,prc,simf,basecurncy,0,blankstr,dvp,cvp);
  end;
//L99:;
  RETURN;
END;

global
function Integer GetLocalCompanyNr(string CompCode,Boolean all)
BEGIN
  Integer i,rwcnt;
  record CompaniesBlock CompRec;
  row CompaniesBlock Comprw;
  Integer res;
  
  res = -1;
  BlockLoad(CompRec);
  rwcnt = MatRowCnt(CompRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CompRec,i,Comprw);
    if (CompCode==Comprw.CompCode) then begin
      if ((blank(Comprw.TCPIP)) or (all)) then begin
        res = i + 1;
        i = rwcnt;
      end;
    end;
  end;
  GetLocalCompanyNr = res;
  RETURN;
END;

global
procedure GetAccDaughtersDCBalance(string accstr,string objstr,Date bdp,Integer simf,Integer basecurncy,
                                  Integer crncy,string crncycode,var val dvp,var val cvp)
BEGIN
  record DaughterCompBlock DCb;
  row DaughterCompBlock DCrw;
  Integer i,rwcnt;
  Integer oldcomp;
  val d;
  val c;
  Date thed;
  transaction string 255 gConsolidationDaughterCompany;

  thed = bdp;
  oldcomp = CurrentCompany;  
  BlockLoad(DCb);
  rwcnt = MatRowCnt(DCb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(DCb,i,DCrw);
    if ((blank(gConsolidationDaughterCompany)) or (DCrw.CompCode==gConsolidationDaughterCompany)) then begin
    if (SetCompanyCode(DCrw.CompCode,false)) then begin
      thed = bdp;
      if (nonblankdate(DCrw.StartDate)) then begin
        if (bdp<DCrw.StartDate) then begin 
          goto LGetAccDaughtersDCBalance;
        end else begin
          GetAcc1DaughterDCBalance(accstr,objstr,bdp,simf,basecurncy,crncy,crncycode,d,c);
          dvp = dvp + d;
          cvp = cvp + c;
/*          
please, carefull when changin this one
          GetAccDaughtersDCBalance(accstr,objstr,bdp,simf,basecurncy,crncy,crncycode,dvp,cvp);//daughters of daughters,  it is needed 
          GetAcc1DaughterDCBalance(accstr,objstr,DCrw.StartDate,simf,basecurncy,crncy,crncycode,d,c);
          dvp = dvp - d;
          cvp = cvp - c;
          d = blankval; c = blankval;
          GetAccDaughtersDCBalance(accstr,objstr,DCrw.StartDate,simf,basecurncy,crncy,crncycode,d,c);daughters of daughters,  it is needed 
          dvp = dvp - d;
          cvp = cvp - c;
*/
          goto LGetAccDaughtersDCBalance;
        end;
      end;
      if (nonblankdate(DCrw.EndDate)) then begin
        if (thed>DCrw.EndDate) then begin  thed = DCrw.EndDate; end;
      end;
      GetAcc1DaughterDCBalance(accstr,objstr,thed,simf,basecurncy,crncy,crncycode,d,c);
      dvp = dvp + d;
      cvp = cvp + c;
//      GetAccDaughtersDCBalance(accstr,objstr,thed,simf,basecurncy,crncy,crncycode,dvp,cvp);
//daughters of daughters,  it is needed 
//it is not needed for Trial Balance, since GetAcc1DaughterDCBalance already reads daughters of daughters
    end;  
    end;  
LGetAccDaughtersDCBalance:;
  end;
  ResetCompany(oldcomp);
  return;
end;         
