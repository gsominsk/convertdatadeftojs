
external function Boolean CheckifAT2UnitSold(string,Date);
external function Boolean CheckDepAndDate(record AT2UnitVc,string,Date);
external procedure HTInventoryNrs(string,string,var string);
external procedure HTDetailLevel(Integer, var string);
external procedure HTDepartment(string,var string);
external procedure HTCategories(string,string,var string);

procedure GetAssetDepMatch(string InventoryNr,var Date enddate,var string dep) 
BEGIN
  Boolean TrHs;
  record InvrsVc Invrsr;
  record AT2TakeVc ATTaker;

  TrHs = true;
  Invrsr.InventoryNr = InventoryNr;
  Invrsr.FileName = "AT2TakeVc";
  while (LoopBackKey("FileName",Invrsr,2,TrHs)) begin
    if (Invrsr.InventoryNr!=InventoryNr) then begin TrHs = false; end;
    if (Invrsr.FileName!="AT2TakeVc") then begin TrHs = false; end;
    if (TrHs) then begin    
      ATTaker.SerNr = Invrsr.TransNr;
      if (ReadFirstMain(ATTaker,1,true)) then begin
        if (ATTaker.PhysCheckf==0) then begin
          if (ATTaker.TransDate<=enddate) then begin
            TrHs = false;
            dep = ATTaker.DepCode;
          end;     
        end;
      end;
    end;
  end;    
  RETURN;
END;

procedure GetAssetUserMatch(string InventoryNr,var Date enddate,var string us) 
BEGIN
  Boolean TrHs;
  record InvrsVc Invrsr;
  record AT2TakeVc ATTaker;

  TrHs = true;
  Invrsr.InventoryNr = InventoryNr;
  Invrsr.FileName = "AT2TakeVc";
  while (LoopBackKey("FileName",Invrsr,2,TrHs)) begin
    if (Invrsr.InventoryNr!=InventoryNr) then begin TrHs = false; end;
    if (Invrsr.FileName!="AT2TakeVc") then begin TrHs = false; end;
    if (TrHs) then begin    
      ATTaker.SerNr = Invrsr.TransNr;
      if (ReadFirstMain(ATTaker,1,true)) then begin
        if (ATTaker.PhysCheckf==0) then begin
          if (ATTaker.TransDate<=enddate) then begin
            TrHs = false;
            us = ATTaker.RespPerson;
          end;     
        end;
      end;
    end;
  end;    
  RETURN;
END;

function
Boolean CheckAssetDepMatch(string InventoryNr,string depcode,string AccStr,var Date enddate) 
BEGIN
  Boolean res,TrHs, res2;
  record InvrsVc Invrsr;
  record AT2TakeVc ATTaker;
  Date blankd;

  if (depcode==AccStr) then begin 
    res2 = true;
  end;   
  TrHs = true;
  Invrsr.InventoryNr = InventoryNr;
  Invrsr.FileName = "AT2TakeVc";
  while (LoopBackKey("FileName",Invrsr,2,TrHs)) begin
    if (Invrsr.InventoryNr!=InventoryNr) then begin TrHs = false; end;
    if (Invrsr.FileName!="AT2TakeVc") then begin TrHs = false; end;

    if (TrHs) then begin        
      ATTaker.SerNr = Invrsr.TransNr;
      if (ReadFirstMain(ATTaker,1,true)) then begin
        if (ATTaker.PhysCheckf==0) then begin
          if (ATTaker.DepCode==AccStr) then begin
            if (ATTaker.TransDate<=enddate) then begin
              res2 = true;
              TrHs = false;
            end;
          end;     
          if (ATTaker.DepCode!=AccStr) then begin
            if (ATTaker.TransDate<=enddate)  then begin
              res2 =false;
              TrHs = false;
            end;
          end;
        end;
      end;
    end;
  end;    
  res = res2;
  CheckAssetDepMatch = res;
  RETURN;
END;

function
Boolean CheckAssetUserMatch(string InventoryNr,string user,string TransStr,var Date enddate) 
BEGIN
  Boolean res,TrHs, res2;
  record InvrsVc Invrsr;
  record AT2TakeVc ATTaker;
  Date blankd;

  if (user==TransStr) then begin 
    res2 = true;
  end;   
  TrHs = true;
  Invrsr.InventoryNr = InventoryNr;
  Invrsr.FileName = "AT2TakeVc";
  while (LoopBackKey("FileName",Invrsr,2,TrHs)) begin
    if (Invrsr.InventoryNr!=InventoryNr) then begin TrHs = false; end;
    if (Invrsr.FileName!="AT2TakeVc") then begin TrHs = false; end;

    if (TrHs) then begin        
      ATTaker.SerNr = Invrsr.TransNr;
      if (ReadFirstMain(ATTaker,1,true)) then begin
        if (ATTaker.PhysCheckf==0) then begin
          if (ATTaker.RespPerson==TransStr) then begin
            if (ATTaker.TransDate<=enddate) then begin
              res2 = true;
              TrHs = false;
            end;
          end;     
          if (ATTaker.RespPerson!=TransStr) then begin
            if (ATTaker.TransDate<=enddate)  then begin
              res2 =false;
              TrHs = false;
            end;
          end;
        end;
        end;
    end;
  end;    
  res = res2;
  CheckAssetUserMatch = res;
  RETURN;
END;

procedure PrintDepreciationData(string dmcode,string dmcode2,Date sd1,Date sd2,val StartVal,val StartVal2,val ResVal,var Boolean firstf)
BEGIN
  if (firstf) then begin
    StartFormat(15);
    OutString(50,0,USetStr(5475) & "1",false);
    OutString(130,0,USetStr(5475)& "2",false);
    OutString(210,0,USetStr(8833)& "1",false);
    OutString(265,0,USetStr(8833)& "2",false);
    OutString(320,0,"Lik." & USetStr(5288),false);
    OutString(425,0,USetStr(5478),true);
    OutString(480,0,USetStr(5481),true);
    EndFormat;
    Gray_Divider(55,480)  
    firstf = false;
    StartFormat(15);
    OutString(0,0,USetStr(7787),false);
    end else begin
     StartFormat(15);
    OutString(0,0,USetStr(9719),false);
  end;
  OutDate(50,0,sd1,false);
  OutDate(130,0,sd2,false);
  OutString(210,0,dmcode,false);
  OutString(265,0,dmcode2,false);
  OutString(320,0,ResVal,false);
  OutString(425,0,StartVal,true);
  OutString(480,0,StartVal2,true);
  EndFormat;  
  RETURN;
END;

procedure PrintDprModels(record RcVc RepSpec,record AT2UnitVc ATUnitr,var val stval1,var val stval2) 
BEGIN
  record AT2DprVc ATDprr;
  Boolean firstf,TrHs;
  
  firstf = true;
  PrintDepreciationData(ATUnitr.Model1,ATUnitr.Model2,ATUnitr.StartingDate1,ATUnitr.StartingDate2,ATUnitr.PurchVal,ATUnitr.PurchVal,ATUnitr.ResVal,firstf);
  stval1= ATUnitr.PurchVal;
  stval2= ATUnitr.PurchVal;
  ATDprr.InventoryNr = ATUnitr.InventoryNr;
  TrHs = true;
  while (LoopKey("InventoryNr",ATDprr,1,TrHs)) begin
    if (ATDprr.InventoryNr!=ATUnitr.InventoryNr) then begin TrHs = false; end;
    if (ATDprr.StartingDate1>Repspec.d1) then begin TrHs = false; end;
    if (TrHs) then begin
      PrintDepreciationData(ATDprr.Model1,ATDprr.Model2,ATDprr.StartingDate1,ATDprr.StartingDate2,ATDprr.StartVal,ATDprr.StartVal2,ATDprr.ResVal,firstf);
      stval1 = ATDprr.StartVal;
      stval2 = ATDprr.StartVal2;
    end;    
  end;
  Gray_Divider(55,480)  
  RETURN;      
END;      

global
procedure AT2ListdataRn(record RcVc RepSpec)
BEGIN
  record AT2UnitVc ATUnitr;
  record DepVc Depr;
  record AT2Vc AT2r;
  record UserVc Userr;
  Boolean TrHs,testf,found2;
  string 30 frinv,toinv;
  val totval,totval1,totval2;  
  Date blankd;
  string 20 frcategory,tocategory;
  string 10 dep;
  string 5 us;
  Integer rw;
  string 255 tstr;
  val stval1,stval2;

  stval1 =0;
  stval2 =0;
  frinv = FirstInRange(RepSpec.f1,30);
  toinv = LastInRange(RepSpec.f1,30);
  frcategory = FirstInRange(RepSpec.f2,20);
  tocategory = LastInRange(RepSpec.f2,20); 
  
  StartReportJob(USetStr(9000));
  if (blankdate(RepSpec.d1)) then begin
     RepSpec.d1 = CurrentDate;
   end;

  rw = 1;
  HTDetailLevel(RepSpec.ArtMode,tstr);
  Header(rw, tstr, 1);
  rw = rw + 1;
  HTInventoryNrs(frinv,toinv,tstr);
  Header(rw, tstr, 0);
  if (blank(RepSpec.AccStr)) then begin
    tstr = USetStr(9736);
  end else begin
  Depr.Code=RepSpec.AccStr;
  if (ReadFirstMain(Depr,1,true)) then begin
    tstr = USetStr(9732);
    tstr = tstr & " : "& RepSpec.AccStr;
    if (nonblank(Depr.Description)) then begin
      tstr = tstr & " ( "& Depr.Description & " ) ";
      end;
  end;
  end;
  Header(rw, tstr, 1);
  rw = rw + 1;
  if (blank( frcategory) and blank(tocategory)) then begin
    tstr = USetStr(9132);
  end else begin
    AT2r.Code=frcategory;
    if (ReadFirstMain(AT2r,1,true)) then begin
      tstr = USetStr(7111);
      tstr = tstr & " : "& frcategory;
      if (nonblank(AT2r.Description)) then begin
        tstr = tstr & " ( "& AT2r.Description & " ) ";
      end;
      if (frcategory <> tocategory) then begin
        AT2r.Code=tocategory;
        if (ReadFirstMain(AT2r,1,true)) then begin
          tstr = tstr & " : "& tocategory;
          if (nonblank(AT2r.Description)) then begin
            tstr = tstr & " ( "& AT2r.Description & " ) ";
          end;
        end;
      end;
    end;
  end;
  Header(rw, tstr, 1);
  rw = rw + 1;
  if (nonblank(RepSpec.TransStr)) then begin
    Userr.Code=RepSpec.TransStr;
    if (ReadFirstMain(Userr,1,true)) then begin
      tstr = "Mat.ats.";
      tstr = tstr & " : "& RepSpec.TransStr;
      if (nonblank(Userr.Name)) then begin
        tstr = tstr & " ( "& Userr.Name & " ) ";
      end;
    end;
    Header(rw, tstr, 1);
    rw = rw + 1;
  end;  
  tstr = "Data" & " : "& RepSpec.d1;
  Header(rw, tstr, 1);
  EndHeader;
  if (RepSpec.ArtMode==0) then begin
    StartFormat(15);
     OutString(0,0,USetStr(9001),false);
     OutString(60,0,USetStr(9002),false);
     OutString(300,0,USetStr(8776),false);
     OutString(480,0,USetStr(8780),true);
//     OutString(400,0,USetStr(8776),true);
    EndFormat;  
  end else begin
    StartFormat(15);
     OutString(0,0,USetStr(9001),false);
     OutString(100,0,USetStr(9002),false);
    EndFormat;  
  end;  
  Gray_Divider(0,480);
  ATUnitr.InventoryNr = frinv;
  ATUnitr.AT2Code = frcategory;
  TrHs = true;
  found2 = true;
  while (LoopMain(ATUnitr,1,TrHs)) begin
    if (nonblank(RepSpec.f1)) then begin
      if (ATUnitr.InventoryNr>toinv) then begin
        TrHs = false; 
      end;
    end;
    found2 = true;
    if (TrHs) then begin
      if (nonblank(tocategory))  then begin
        if (ATUnitr.AT2Code > tocategory) then begin
          found2 =false;           
        end; 
      end;
    end;
    if (TrHs  == true) then begin
      if (nonblank(frcategory))  then begin
        if (ATUnitr.AT2Code < frcategory) then begin
          found2 = false;      
        end; 
      end;
    end;
    if (TrHs==false) then begin
      found2 = false;
    end;

    if (found2) then begin
      testf = true;
      if (RepSpec.d1<ATUnitr.PurchaseDate) then begin
        testf = false;
      end;
      if (nonblank(RepSpec.AccStr)) then begin      
        if (CheckAssetDepMatch(ATUnitr.InventoryNr,ATUnitr.DepCode,RepSpec.AccStr,RepSpec.d1)==false) then begin testf = false; end;
      end; 
      if (nonblank(RepSpec.TransStr)) then begin
        if (CheckAssetUserMatch(ATUnitr.InventoryNr,ATUnitr.RespPerson,RepSpec.TransStr,RepSpec.d1)==false) then begin testf = false; end;
      end;
      if (RepSpec.flags[4]==0) then begin
        if (ATUnitr.Activef == 1) then begin
           testf= false;
        end;
      end; 
      if (nonblank(RepSpec.f2)) then begin
        if (ATUnitr.AT2Code!=RepSpec.f2) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        if (CheckifAT2UnitSold(ATUnitr.InventoryNr,RepSpec.d1)) then begin
          testf = false;
        end;
      end;  
      if (testf) then begin
        if (RepSpec.ArtMode==0) then begin
          StartFormat(15);
          OutString(0,0,ATUnitr.InventoryNr,false);
          OutString(60,0,ATUnitr.Description,false);
          OutString(300,0,ATUnitr.PurchaseDate,false);
          OutString(480,0,ATUnitr.PurchVal,true);
          EndFormat;
        end;
        if (RepSpec.ArtMode==1) then begin
          StartFormat(15);
          OutString(0,0,ATUnitr.InventoryNr,false);
          OutString(100,0,ATUnitr.Description,false);
          OutString(300,0,ATUnitr.AT2Code,false);
          EndFormat;

          if (nonblank(ATUnitr.VECode)) then begin
            StartFormat(15);
            OutString(200,0,USetStr(5465),true);
            OutString(220,0,ATUnitr.VECode,false);
            OutString(300,0,ATUnitr.VEName,false);
            EndFormat;
          end;
	      dep = ATUnitr.DepCode;
          GetAssetDepMatch(ATUnitr.InventoryNr,RepSpec.d1,dep);
          StartFormat(15);
          OutString(200,0,USetStr(5466),true);
          OutString(220,0,dep,false);
	      Depr.Code=dep;
          if (ReadFirstMain(Depr,1,true)) then begin
            OutString(300,0,Depr.Description,false);
          end;
          EndFormat;
          if (nonblank(ATUnitr.SerialNr)) then begin
            StartFormat(15);
            OutString(200,0,USetStr(5467),true);
            OutString(220,0,ATUnitr.SerialNr,false);
            EndFormat;
          end;
          us = ATUnitr.RespPerson;
          GetAssetUserMatch(ATUnitr.InventoryNr,RepSpec.d1,us);
          StartFormat(15);
          OutString(200,0,USetStr(5468),true);
          OutString(220,0,us,false);
          Userr.Code=us;
          if (ReadFirstMain(Userr,1,true)) then begin
            OutString(300,0,Userr.Name,false);
          end;          
          EndFormat;
          if ((nonblankdate(ATUnitr.PurchaseDate)) or (ATUnitr.PurchVal<>0)) then begin
            StartFormat(15);
            OutString(200,0,USetStr(5469),true);
            OutDate(220,0,ATUnitr.PurchaseDate,false);
            OutString(300,0,ATUnitr.PurchVal,false);
            EndFormat;
          end;
          if (nonblankdate(ATUnitr.EndDate)) then begin
            StartFormat(15);
            OutString(200,0,USetStr(5470),true);
            OutDate(220,0,ATUnitr.EndDate,false);
            EndFormat;
          end;
          if (nonblank(ATUnitr.Objects)) then begin
            StartFormat(15);
            OutString(200,0,USetStr(5480),true);
            OutString(220,0,ATUnitr.Objects,false);
            EndFormat;
          end;
          if (nonblank(ATUnitr.Quantity)) then begin
            StartFormat(15);
            OutString(200,0,USetStr(5471),true);
            OutString(220,0,ATUnitr.Quantity,false);
            EndFormat;
          end;
          if (nonblank(ATUnitr.InitDeprVal1)) then begin
            StartFormat(15);
            OutString(200,0,USetStr(5328),true);
            OutString(220,0,ATUnitr.InitDeprVal1,false);
            EndFormat;
          end;
          if (nonblank(ATUnitr.InsuranceVal)) then begin
            StartFormat(15);
            OutString(200,0,USetStr(5473),true);
            OutVal(220,0,ATUnitr.InsuranceVal,M4UVal,false);
            EndFormat;
          end;
          if (nonblank(ATUnitr.Comment)) then begin
            StartFormat(15);
            OutString(200,0,USetStr(5474),true);
            OutString(220,0,ATUnitr.Comment,false);
            EndFormat;
          end;
          StartFormat(5);
          EndFormat;
          PrintDprModels(RepSpec,ATUnitr,stval1,stval2);
          if (stval1!=0) then begin
              totval1 = totval1+ stval1;  
          end else begin
              totval1= totval1 + ATUnitr.PurchVal;  
          end;
          if (stval2!=0) then begin
              totval2 = totval2+ stval2;  
          end else begin
              totval2= totval2 + ATUnitr.PurchVal;  
          end;
          StartFormat(15);
          EndFormat;
          Gray_Divider(0,1);
        end;  
        totval = totval + ATUnitr.PurchVal;
      end;
    end;
  end;
 if (RepSpec.ArtMode==0) then begin
    Gray_Divider(0,1);
 end;
  StartFormat(15);
  OutString(200,0,USetStr(8830) & " : ",true);
   if (RepSpec.ArtMode==0) then begin
  OutString(480,0,totval,true);
  end else begin
  OutString(300,0,totval,false);
  end;
  OutString(425,0,totval1,true);
  OutString(480,0,totval2,true);
  EndFormat;  
  EndJob;
  RETURN;
END;
