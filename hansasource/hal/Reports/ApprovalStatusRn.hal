external function val GetAcceptanceSum_SDVc(record SDVc);external function roundmode SetRoundModeD(Integer);external function roundmode DefaultRoundMode();external procedure HTApprovalStatus(Integer,Integer,Integer,Integer,Integer,var string);external procedure HTPers(string,var string);external procedure HT2Per(Date, Date , var string);procedure PrintActivities(string user,record AcceptanceRulesVc Acptr,string acttype,string actresult,string astatus,record RcVc RepSpec)begin  record ActVc Actr;  Boolean found,testf;  string 255 tstr,status,requester,index;  val amount;  record ExpVc Expr;  record PUVc PUr;  record IntORVc IntORr;  record LeaveApplicationVc LAr;  record LeaveTransferVc LTr;  record OPVc OPr;  record TBBUVc TBBUr;  record VIVc VIr;  record POVc POr;  record QTVc QTr;  record IVVc IVr;  record ORVc ORr;  record SDVc SDr;  record RLinkVc RLr;  string 255 fromsernr;  found = true;  index = "AcptUserMain:" & user;    Actr.ActType = acttype;  Actr.ActResult = actresult;  while (LoopKey(index,Actr,2,found)) begin    if (Actr.ActType!=acttype) then begin found = false; end;    if (Actr.ActResult!=actresult) then begin found = false; end;    if (found) then begin      status = astatus;      testf = true;      if (nonblank(Actr.ActResult)) then begin        if (nonblank(actresult)) then begin          if (Actr.OKFlag==0) then begin            status = USetStr(28421);          end else begin            if (Actr.ActResult!=actresult) then begin testf = false; end;                end;        end;      end else begin             if (nonblank(actresult)) then begin          if (Actr.OKFlag==0) then begin status = USetStr(28421); end;                if (Actr.ActResult!=actresult) then begin testf = false; end;              end;      end;      if (DateInRange(Actr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin        testf = false;      end;      switch (Acptr.Register) begin        case kAcceptanceExp:          if (ReadRecordLink(Actr,1,Expr,RLr)==false) then begin testf = false; end;          fromsernr = Expr.SerNr;        case kAcceptanceIntOR:          if (ReadRecordLink(Actr,1,IntORr,RLr)==false) then begin testf = false; end;          fromsernr = IntORr.SerNr;        case kAcceptanceCashIV:          if (ReadRecordLink(Actr,1,IVr,RLr)==false) then begin testf = false; end;          fromsernr = IVr.SerNr;        case kAcceptanceCredIV:          if (ReadRecordLink(Actr,1,IVr,RLr)==false) then begin testf = false; end;          fromsernr = IVr.SerNr;        case kAcceptanceIV:          if (ReadRecordLink(Actr,1,IVr,RLr)==false) then begin testf = false; end;          fromsernr = IVr.SerNr;        case kAcceptanceLeaveApplication:          if (ReadRecordLink(Actr,1,LAr,RLr)==false) then begin testf = false; end;          fromsernr = LAr.SerNr;        case kAcceptanceLeaveTransfer:          if (ReadRecordLink(Actr,1,LTr,RLr)==false) then begin testf = false; end;          fromsernr = LTr.SerNr;        case kAcceptanceOP:          if (ReadRecordLink(Actr,1,OPr,RLr)==false) then begin testf = false; end;          fromsernr = OPr.SerNr;        case kAcceptanceOR:          if (ReadRecordLink(Actr,1,ORr,RLr)==false) then begin testf = false; end;          fromsernr = ORr.SerNr;        case kAcceptancePO:          if (ReadRecordLink(Actr,1,POr,RLr)==false) then begin testf = false; end;          fromsernr = POr.SerNr;        case kAcceptancePU:          if (ReadRecordLink(Actr,1,PUr,RLr)==false) then begin testf = false; end;          fromsernr = PUr.SerNr;        case kAcceptanceQT:          if (ReadRecordLink(Actr,1,QTr,RLr)==false) then begin testf = false; end;          fromsernr = QTr.SerNr;        case kAcceptanceSD:          if (ReadRecordLink(Actr,1,SDr,RLr)==false) then begin testf = false; end;          fromsernr = SDr.SerNr;        case kAcceptanceTBBU:          if (ReadRecordLink(Actr,1,TBBUr,RLr)==false) then begin testf = false; end;          fromsernr = TBBUr.PRCode;        case kAcceptanceVI:          if (ReadRecordLink(Actr,1,VIr,RLr)==false) then begin testf = false; end;          fromsernr = VIr.SerNr;      end;      if (testf) then begin        amount = blankval;        requester = "";        switch (Acptr.Register) begin          case kAcceptanceExp:            tstr = USetStr(28440);            amount = Expr.PayVal;            requester = Expr.Person;          case kAcceptancePU:            tstr = USetStr(28441);            amount = PUr.PayVal;          case kAcceptanceIntOR:            tstr = USetStr(28442);//            amount = PUr.PayVal;            requester = IntORr.OurUser;          case kAcceptanceLeaveApplication:            tstr = USetStr(28443);          case kAcceptanceLeaveTransfer:            tstr = USetStr(28444);          case kAcceptanceOP:            tstr = USetStr(28445);            amount = OPr.CurPayVal;//            requester = OPr.SalesMan;          case kAcceptanceTBBU:            tstr = USetStr(28446);            amount = TBBUr.TotSum;            requester = TBBUr.SalesMan;          case kAcceptanceVI:            tstr = USetStr(28447);            amount = VIr.PayVal;            requester = VIr.SalesMan;          case kAcceptancePO:            tstr = USetStr(28448);            amount = POr.Sum4;            requester = POr.SalesMan;          case kAcceptanceQT:            tstr = USetStr(28449);            amount = QTr.Sum4;            requester = QTr.SalesMan;          case kAcceptanceIV:            tstr = USetStr(28450);            amount = IVr.Sum4;            requester = IVr.SalesMan;          case kAcceptanceOR:            tstr = USetStr(28451);            amount = ORr.Sum4;            requester = ORr.SalesMan;          case kAcceptanceSD:            tstr = USetStr(28452);            amount = GetAcceptanceSum_SDVc(SDr);        end;        StartFormat(15);         OutString(0,0,tstr,false);         OutStringID(2,"DblActVc",fromsernr,false,Actr.SerNr);         OutDate(3,0,Actr.TransDate,false);         OutString(4,0,requester,false);         OutString(5,0,Actr.MainPersons,false);         OutString(6,0,status,false);         OutString(1,0,amount,true);        EndFormat;      end;    end;  end;  return;end;procedure PrintActivitiesforApprovalRule(record RcVc RepSpec,record AcceptanceRulesVc Acptr)begin  string 255 status;  record UserVc Userr;  Boolean found;  string 255 frper,toper;  frper = FirstInRange(RepSpec.f1,20);  toper = LastInRange(RepSpec.f1,20);  found = true;  Userr.Code = frper;  while (LoopMain(Userr,1,found)) begin    if (nonblank(RepSpec.f1)) then begin      if (Userr.Code>toper) then begin found = false; end;    end;    if (found) then begin      if (RepSpec.flags[0]!=0) then begin        status = USetStr(28421);        PrintActivities(Userr.Code,Acptr,Acptr.AcceptanceActType,"",status,RepSpec);      end;      if (RepSpec.flags[1]!=0) then begin        status = USetStr(28422);        PrintActivities(Userr.Code,Acptr,Acptr.AcceptanceActType,Acptr.AcceptedActType,status,RepSpec);      end;      if (RepSpec.flags[2]!=0) then begin        status = USetStr(28423);        PrintActivities(Userr.Code,Acptr,Acptr.AcceptanceActType,Acptr.RejectedActType,status,RepSpec);      end;      if (RepSpec.flags[3]!=0) then begin        status = USetStr(28424);        PrintActivities(Userr.Code,Acptr,Acptr.AcceptanceActType,Acptr.NotNeededActType,status,RepSpec);      end;      if (RepSpec.flags[4]!=0) then begin        status = USetStr(28432);        PrintActivities(Userr.Code,Acptr,Acptr.AcceptanceActType,Acptr.CancelledActType,status,RepSpec);      end;      if (RepSpec.flags[5]!=0) then begin        status = USetStr(28433);        PrintActivities(Userr.Code,Acptr,Acptr.AcceptanceActType,Acptr.ForwardedActType,status,RepSpec);      end;    end;  end;  return;end;globalprocedure ApprovalStatusRn(record RcVc RepSpec)begin  string 255 tstr;  Integer rw;  record AcceptanceRulesVc Acptr;  Boolean found;  rw = 1;  StartReportJob(USetStr(28420));  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);  Header(rw,tstr,1);  rw = rw + 1;  HTPers(RepSpec.f1,tstr);  Header(rw,tstr,1);  rw = rw + 1;  HTApprovalStatus(RepSpec.flags[0],RepSpec.flags[1],RepSpec.flags[2],RepSpec.flags[3],RepSpec.flags[4],tstr);  Header(rw,tstr,1);  rw = rw + 1;  EndHeader;  SetRepCol(2,100);  SetRepCol(3,150);  SetRepCol(4,220);  SetRepCol(5,300);  SetRepCol(6,350);  StartFormat(15);   OutString(0,0,USetStr(28425),false);   OutString(2,0,USetStr(28426),false);   OutString(3,0,USetStr(28427),false);   OutString(4,0,USetStr(28430),false);   OutString(5,0,USetStr(28428),false);   OutString(6,0,USetStr(28429),false);   OutString(1,0,USetStr(28431),true);  EndFormat;  Gray_Divider(0,1);  found = true;  while (LoopMain(Acptr,1,found)) begin    if (found) then begin      PrintActivitiesforApprovalRule(RepSpec,Acptr);    end;  end;  EndJob;  return;end;