external procedure OutEmpty(record RcVc,Integer);
external function Boolean GetPD(var record PDVc);
external procedure ClearCurncyTotals(array string,array val,array val,array val,var Integer);
external procedure AddCurncyTotalsToTotalCurncyTotals(array string,array val,array val,array val,Integer,array string,array val,array val,array val,var Integer);
external procedure BeginCurncyTotals(var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external function Boolean ConvertNLTrans_VIVc(record TRVc,record OPrsVc,record CUVc,Boolean,var record VIVc);
external procedure PrintOnAccountInfo(record CUVc,val,val,var Boolean,record RcVc,record SMVc,Boolean);
external procedure APPrintDueDetailed(record VIVc,record RcVc,string,string,val,val,val,val,val,val,val,val,val,val,var val,Integer);
external procedure AddToCreditorsAccounts(string,Integer,val,Array string,Array val,var Integer);
external procedure PrintAPTotals(record RcVc,string,val,val,val,val,val);
external procedure PrintCreditorsAccounts(Array string,Array val,var Integer);
external function Boolean APRPrintOverView(record VIVc,record OPrsVc,record TRVc,record RcVc,val,val,LongInt);
external procedure SumAgedInstalmenVI(Date,LongInt,var val,var val,var val,var val,var val,var val,var val,var val,var val);
external function Integer TypeOfCurncy(var string,var Integer);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulWithRateToBase2(var string,Date,val,roundmode);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external function LongInt DateDiff(Date,Date);
external procedure PrintPrepaymentsNrsOP(record RcVc,Boolean,string,Boolean,Integer,Integer);
external procedure PrintHeaderAP1(string,string,record RcVc);
external procedure PrintHeaderAP2(record RcVc,Integer); 
external procedure SumAged(Date,Integer,Integer,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val);
external procedure APGetOnAccBalance(record RcVc,record CUVc,Boolean,var val,var val,var val,var val,var val,var val,var val,
                   Array string,Array val,var Integer,Array string,Array val,var Integer);
external function Boolean APWithLogg2(record RcVc,record CUVc,record VIVc,record OPrsVc,record TRVc,var val,var val,Integer,Boolean);
external procedure PrintAgedLine(val,val,val,val,val,val,val,val,val,val,val,Integer,Integer,string);
external procedure CountPeriods(var Integer);
external procedure SubAPPrePayments(record VIVc,var val,var val);
external procedure GetAPInvBalance(record VIVc,Date,Integer,var val,var val,var LongInt);
external procedure Base1ToBase2(var val,Date,var val);
external function Boolean SetInSet2(string,string);
external procedure ClassTypef(string,string,var Boolean);

global
procedure RunAPRn(record RcVc RepSpec,var val tot1Sum)
begin
  record APVc APr;
  record CUVc VEr;
  record VIVc VIr;
  record TRVc TRr;
  record OPrsVc OPrsr;
  Boolean TrHs,VendOut,VEs;
  Boolean backdatf,testf,testf2,firstf,first2f,first3f,foundclosed;
  string 255 tstr;
  string 255 frve,tove;
  string 255 ckey;
  LongInt latedays,keys;
  Integer rwcnt,nrofper;
  val AP1Sum,CurSum,totSum,AP2Sum;
  val sact,s0,s1,s2,s3,s4,s5,s6,s7;
  val sactb2,s0b2,s1b2,s2b2,s3b2,s4b2,s5b2,s6b2,s7b2;
  Array val ss;
  Array val ssb2;  
  val rs,rs2,rval;
  val sum,sum2,tot,totb2,t2;
  val due1tot,Total1due,due2tot,Total2due,notdue1tot,Total1notdue,notdue2tot,Total2notdue,TotOnAcc;
  val sumdiff,sumbooked,sumnow,sumcurncy;
  val totdiff,totbooked,totnow;
  record BaseCurBlock bascur;
  val tot2Sum;
  val vt;
  Date thedate,curdate;
  Boolean vifoundf;
  Array string 10 credaccs;
  Array val credbal;
  Integer credcnt;
  val onaccsumbooked,onaccsumnow,onaccsumcurncy,onaccsumdiff;
  Integer oldstyle;
  record AgedBlock Ab;
  val sactinv,s0inv,s1inv,s2inv,s3inv,s4inv,s5inv,s6inv,s7inv,totinv;
  record SMVc CurTotalsr;  //addcurencytotals
  val totCurSum;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt;
  array val atotv1;
  array val atotv2;
  array val atotv3;
  array string 20 atotcur;
  Integer curtotcnt;
  LongInt frpddays,topddays,pdays;
  record PDVc PDr;
  vector val vtots;

  totCurSum = blankval;
  tot1Sum = blankval;
  BlockLoad(Ab);  
  credcnt = -1;
  curdate = CurrentDate;
  BlockLoad(bascur);
  foundclosed = false;
  thedate = RepSpec.d1;
  if (BlankDate(thedate)) then begin
    if ((RepSpec.flags[3]!=0) or (RepSpec.flags[5]!=0)) then begin
      thedate = CurrentDate;
    end;
  end;
  if (blankdate(thedate)) then begin
    backdatf = false;
  end else begin
    backdatf = true;
  end;  
  frve = FirstInRange(RepSpec.f1,20);
  tove = LastInRange(RepSpec.f1,20);
  frpddays = FirstInRange(RepSpec.f6,5);
  topddays = LastInRange(RepSpec.f6,5);
  first3f = true;
  CountPeriods(nrofper);
  if ((RepSpec.ArtMode==2) or (RepSpec.ArtMode==5)) then begin
    if (Ab.UseAccPeriod) then begin
      if (nrofper==2) then begin
        SetRepColBiDi(2,250,290);
        SetRepColBiDi(3,300,340);
        SetRepColBiDi(4,350,390);
        SetRepColBiDi(5,400,440);
      end;
      if (nrofper==3) then begin
        SetRepColBiDi(2,230,270);
        SetRepColBiDi(3,290,330);
        SetRepColBiDi(4,350,390);
        SetRepColBiDi(5,410,450);
      end;
      if (nrofper==4) then begin
        SetRepColBiDi(2,240,280);
        SetRepColBiDi(3,280,320);
        SetRepColBiDi(4,320,360);
        SetRepColBiDi(5,360,400);
        SetRepColBiDi(6,400,440);
      end;
      if (nrofper==5) then begin
        SetRepColBiDi(2,232,272);
        SetRepColBiDi(3,260,300);
        SetRepColBiDi(4,294,334);
        SetRepColBiDi(5,334,374);
        SetRepColBiDi(6,380,420);
        SetRepColBiDi(7,430,470);
      end;
      if (nrofper==6) then begin
        SetRepColBiDi(2,200,240);
        SetRepColBiDi(3,229,269);
        SetRepColBiDi(4,263,303);
        SetRepColBiDi(5,303,343);
        SetRepColBiDi(6,350,390);
        SetRepColBiDi(7,396,436);
        SetRepColBiDi(8,430,470);    
      end;
    end else begin
      if (nrofper==2) then begin
        SetRepColBiDi(2,250,290);
        SetRepColBiDi(3,300,340);
        SetRepColBiDi(4,350,390);
        SetRepColBiDi(5,400,440);
      end;
      if (nrofper==3) then begin
        SetRepColBiDi(2,240,280);
        SetRepColBiDi(3,280,320);
        SetRepColBiDi(4,320,360);
        SetRepColBiDi(5,360,400);
        SetRepColBiDi(6,400,440);
      end;
      if (nrofper==4) then begin
        SetRepColBiDi(2,230,270);
        SetRepColBiDi(3,263,303);
        SetRepColBiDi(4,296,336);
        SetRepColBiDi(5,329,369);
        SetRepColBiDi(6,362,402);
        SetRepColBiDi(7,395,415);
      end;
      if (nrofper==5) then begin
        SetRepColBiDi(2,220,260);
        SetRepColBiDi(3,249,289);
        SetRepColBiDi(4,278,318);
        SetRepColBiDi(5,307,347);
        SetRepColBiDi(6,336,376);
        SetRepColBiDi(7,365,405);
        SetRepColBiDi(8,394,434);
      end;
      if (nrofper==6) then begin
        SetRepColBiDi(2,210,250);
        SetRepColBiDi(3,235,275);
        SetRepColBiDi(4,260,300);
        SetRepColBiDi(5,285,325);
        SetRepColBiDi(6,310,350);
        SetRepColBiDi(7,335,375);
        SetRepColBiDi(8,360,400);
        SetRepColBiDi(9,385,425);
      end;
    end;
  end;
  PrintHeaderAP2(RepSpec,nrofper);
  if (RepSpec.flags[1]==1) then begin
    VEr.Name = "";
    VEr.Code = "";
    ckey = "Name";
    VEs = LoopKey(ckey,VEr,1,true);//VEs = m4_ReadFirstLCKey(CUVc,ckey,&VEr,1,false,&LLoop2);
    keys = 1;
    firstf = true;
  end else begin
    if (blank(RepSpec.f3)) then begin
      VEr.Code = frve;
      ckey = "Code";
      VEs = LoopKey(ckey,VEr,1,true);//VEs = m4_ReadFirstLMain(CUVc,&VEr,1,false,&LLoop2);
      keys = 1;
      firstf = true;
    end else begin
      VEr.VECat = RepSpec.f3;
      VEr.Code = frve;
      ckey = "VECat";
      VEs = LoopKey(ckey,VEr,2,true);//VEs = m4_ReadFirstLCKey(CUVc,ckey,&VEr,2,false,&LLoop2);
      keys = 2;
      firstf = true;
    end;
  end;
L22:;
  if (VEs==false) then begin goto L88; end;
    if (firstf) then begin 
      firstf = false; 
      ResetLoop(VEr);      
    end;
    VEs = LoopKey(ckey,VEr,keys,true);//VEs = m4_ReadLogicalCKey(CUVc,ckey,LLoop2++,&VEr);
    testf2 = true;
    if (VEr.VEType==0) then begin testf2 = false; end;
    if (VEs) then begin
      if (RepSpec.flags[1]==1) then begin
        if (nonblank(tove)) then begin
          if (VEr.Code<frve) then begin
            testf2 = false;
          end;
          if (VEr.Code>tove) then begin
            testf2 = false;
          end;
        end;    
      end else begin
        if (nonblank(tove)) then begin
          if (VEr.Code>tove) then begin
            VEs = false;
          end;
        end;    
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (VEr.VECat<>RepSpec.f3) then begin
          testf2 = false;
        end;
      end;   
      if (nonblank(RepSpec.f4)) then begin
        if (SetInSet2(RepSpec.f4,VEr.Classification)==false) then begin
          testf2 = false;
        end;
      end;
      if (nonblank(RepSpec.f5)) then begin
        if (testf2) then begin
          testf2 = false;
          ClassTypef(RepSpec.f5,VEr.Classification,testf2);
        end;
      end;
    end;
    
  if (VEs==false) then begin goto L88; end;
  if (testf2==false) then begin goto L22; end;
  ClearCurncyTotals(acur,av1,av2,av3,curcnt);
  VendOut = false;  
  CurSum = 0;
  AP1Sum = 0;
  AP2Sum = 0;
  s0 = 0; s0b2 = 0;
  s1 = 0; s1b2 = 0;
  s2 = 0; s2b2 = 0;
  s3 = 0; s3b2 = 0;
  s4 = 0; s4b2 = 0;
  s5 = 0; s5b2 = 0;
  s6 = 0; s6b2 = 0;
  s7 = 0; s7b2 = 0;
  rwcnt = 0;
  if (RepSpec.flags[2]==1) then begin
    s0 = CurSum + s0;
  end else begin
    s0 = AP1Sum + s0;
  end;  
  if (backdatf) then begin
    ResetLoop(OPrsr);
    OPrsr.VECode = VEr.Code;
    if (RepSpec.flags[24]!=0) then begin
      TrHs = LoopKey("VECode",OPrsr,1,true);    
    end else begin
      OPrsr.TransType = kOPrsTransTypeInvoice;
      TrHs = LoopKey("VECode",OPrsr,2,true);    
    end;
    first2f = true;            
  end else begin
    APr.VECode = VEr.Code;
    APr.SerNr = 0;
    first2f = true;
    ResetLoop(APr);
    TrHs = LoopKey("VECode",APr,2,true);//TrHs = m4_ReadFirstLCKey(APVc,"VECode",&APr,2,false,&LLoop1);
  end;
  
  if (RepSpec.flags[21]==1) then begin TrHs = false; end;
  while (TrHs==true) begin
    testf = false;
    if (backdatf) then begin
      if (first2f) then begin
        first2f = false;
        ResetLoop(OPrsr);
        OPrsr.VECode = VEr.Code;
      end;
      if (RepSpec.flags[24]!=0) then begin
        TrHs = LoopKey("VECode",OPrsr,1,true);    
      end else begin
        TrHs = LoopKey("VECode",OPrsr,3,true);    
      end;
      if (TrHs) then begin
        if (VEr.Code<>OPrsr.VECode) then begin TrHs = false; end;
        if (RepSpec.flags[24]==0) then begin
          if (OPrsr.TransType!=kOPrsTransTypeInvoice) then begin TrHs = false; end;
          if (OPrsr.TransDate>thedate) then begin TrHs = false; end;
        end;
      end;
      if (TrHs) then begin
        testf = true;
        RecordClear(VIr);
        switch (OPrsr.TransType) begin
          case kOPrsTransTypeInvoice:
            VIr.SerNr = OPrsr.TransNr;
            testf = ReadFirstMain(VIr,1,true);
          case kOPrsTransTypeNLTransaction:
            TRr.Number = OPrsr.TransNr;
            TRr.IntYc = OPrsr.IntYc;
            if (ReadFirstMain(TRr,2,true)) then begin
              testf = ConvertNLTrans_VIVc(TRr,OPrsr,VEr,false,VIr);
            end;
          otherwise
            testf = false;
        end;

        if (OPrsr.TransDate>thedate) then begin testf = false; end;
        if (testf) then begin
          switch (RepSpec.flags[22]) begin
            case 1:
              latedays = DateDiff(VIr.InvDate,thedate);
            case 2:
              latedays = DateDiff(VIr.TransDate,thedate);
            otherwise
              latedays = DateDiff(VIr.DueDate,thedate);
          end;
          if ((RepSpec.flags[0]<>0) and (latedays>=0)) then begin testf = false; end;
          if (nonblank(RepSpec.f6)) then begin
            pdays = VIr.pdays;
            if (pdays<0) then begin
              PDr.Code = VIr.PayDeal;
              GetPD(PDr);
              pdays = PDr.pdays;
            end;
            if (pdays<frpddays) then begin testf = false; end;
            if (pdays>topddays) then begin testf = false; end;
          end;
          if (VIr.TransDate>thedate) then begin testf = false; end;
  //        if (VIr.InvType==kInvoiceTypeCash) then begin testf = false; end;//moed down
          if (VIr.Invalid<>0) then begin testf = false; end;
          if (RepSpec.flags[3]==0) then begin
            if (VIr.OKFlag==0) then begin testf = false; end;
          end;  
          if (RepSpec.flags[23]!=0) then begin
            if (VIr.Closed!=0) then begin testf = false; end;
          end;        
          if ((nonblank(RepSpec.f3)) and (RepSpec.f3<>VEr.VECat)) then begin testf = false; end;
          if ((nonblank(RepSpec.AccStr)) and (RepSpec.AccStr<>VIr.SalesMan)) then begin testf = false; end;
  //        if ((nonblank(RepSpec.f2)) and (RepSpec.f2<>VEr.SalesGroup)) then begin testf = false; end;
  //Invoice has salesgroup
          if ((nonblank(RepSpec.ObjStr)) and (SetInSet(RepSpec.ObjStr,VIr.Objects)==false)) then begin testf = false; end;
          if (nonblank(RepSpec.Language)) then begin
            if (RepSpec.Language!=VIr.LangCode) then begin
              testf = false;
            end;
          end;
          if (nonblank(RepSpec.FirstAcc)) then begin
            if (RepSpec.FirstAcc!=VIr.APAcc) then begin
              testf = false;
            end;
          end;
          if (nonblank(RepSpec.f2)) then begin
            if (VIr.SalesGroup<>RepSpec.f2) then begin
              testf = false;
            end;
          end;          
          if (nonblank(RepSpec.CurncyCode)) then begin
            if (VIr.CurncyCode!=RepSpec.CurncyCode) then begin          
              testf = false;
            end;
          end;
//!          
          if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
            if (VIr.CredInv==-1) then begin
              rval = 0 - VIr.PayVal;
            end else begin
              rval = 0;
            end;
          end else begin
            rval = VIr.PayVal;
          end;
          if (VIr.InvType==kInvoiceTypeEmployee or VIr.InvType==kInvoiceTypeCash or VIr.InvType==kInvoiceTypeCashInvoiceReceiptPRT or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
            rval = blankval;
          end;
          rs = MulRateToBase1(VIr.CurncyCode,rval,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
          GetAPInvBalance(VIr,thedate,RepSpec.flags[14],rval,rs,latedays);
          SubAPPrePayments(VIr,rval,rs);
          rs = rs - MulRateToBase1(VIr.CurncyCode,VIr.WithHoldingTax,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
          rval = rval - VIr.WithHoldingTax;
          Base1ToBase2(rs,VIr.TransDate,rs2); /* wierd */
//          rs = MulRateToBase1(VIr.CurncyCode,rval,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff); 
//          rs2 = MulRateToBase2(VIr.CurncyCode,rval,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
          if (rval==0) then begin testf = false; end;
          if (testf) then begin
            if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
              if (VIr.CredInv==-1) then begin
                rval = 0 - VIr.PayVal;
              end else begin
                rval = 0;
              end;
            end else begin
              rval = VIr.PayVal;
            end;
            if (VIr.InvType==kInvoiceTypeEmployee or VIr.InvType==kInvoiceTypeCash or VIr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
              rval = blankval;
            end;
            rs = MulRateToBase1(VIr.CurncyCode,rval,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
            GetAPInvBalance(VIr,thedate,RepSpec.flags[14],rval,rs,latedays);
            SubAPPrePayments(VIr,rval,rs);
            rs = rs - MulRateToBase1(VIr.CurncyCode,VIr.WithHoldingTax,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
//            rval = rval - VIr.WithHoldingTax;
            Base1ToBase2(rs,VIr.TransDate,rs2); /* wierd */
  //          rs = MulRateToBase1(VIr.CurncyCode,rval,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff); 
  //          rs2 = MulRateToBase2(VIr.CurncyCode,rval,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
            if (rval==0) then begin testf = false; end;
            if (testf) then begin
              if (latedays<0) then begin
                due1tot = due1tot + rs;
                due2tot = due2tot + rs2;
              end else begin
                notdue1tot = notdue1tot + rs;
                notdue2tot = notdue2tot + rs2;
              end;
            end;  
          end;
        end;
      end;
    end else begin
      if (first2f) then begin
        first2f = false;
        ResetLoop(APr);
      end;
      TrHs = LoopKey("VECode",APr,2,true);//TrHs = m4_ReadLogicalCKey(APVc,"VECode",LLoop1++,&APr);
      if (TrHs) then begin
        if (VEr.Code<>APr.VECode) then begin TrHs = false; end;
      end;  
      if (TrHs) then begin
        testf = true;
        VIr.SerNr = APr.SerNr;
        vifoundf = ReadFirstMain(VIr,1,true);
        if (VIr.Invalid<>0) then begin testf = false; end;
        if ((nonblank(RepSpec.AccStr)) and (RepSpec.AccStr<>VIr.SalesMan)) then begin testf = false; end;
        if ((nonblank(RepSpec.ObjStr)) and (SetInSet(RepSpec.ObjStr,VIr.Objects)==false)) then begin testf = false; end;
        if ((nonblank(RepSpec.f2)) and (RepSpec.f2<>VIr.SalesGroup)) then begin testf = false; end;
        switch (RepSpec.flags[22]) begin
          case 1:
            latedays = DateDiff(VIr.InvDate,curdate);
          case 2:
            latedays = DateDiff(VIr.TransDate,curdate);
          otherwise
            latedays = DateDiff(APr.DueDate,curdate);
        end;
        if (APr.RVal<0) then begin
          if (latedays>0) then begin latedays = 0; end;
        end;
        if (nonblank(RepSpec.f6)) then begin
          pdays = VIr.pdays;
          if (pdays<0) then begin
            PDr.Code = VIr.PayDeal;
            GetPD(PDr);
            pdays = PDr.pdays;
          end;
          if (pdays<frpddays) then begin testf = false; end;
          if (pdays>topddays) then begin testf = false; end;
        end;
        if ((RepSpec.flags[0]==0) or (latedays<0)) then begin
          if ((nonblank(RepSpec.f3)) and (RepSpec.f3!=VEr.VECat)) then begin
            testf = false;
          end;
        end;
        if (RepSpec.flags[0]<>0) then begin 
          if (latedays>=0) then begin 
            testf = false; 
          end;
        end;
        if (nonblank(RepSpec.FirstAcc)) then begin
          if (RepSpec.FirstAcc!=VIr.APAcc) then begin
            testf = false;
          end;
        end;
        if (nonblank(RepSpec.Language)) then begin
          if (RepSpec.Language!=VIr.LangCode) then begin
            testf = false;
          end;
        end;
        if (RepSpec.flags[23]!=0) then begin
          if (VIr.Closed!=0) then begin testf = false; end;
        end;        
      end;
      if (nonblank(RepSpec.CurncyCode)) then begin
        if (APr.CurncyCode!=RepSpec.CurncyCode) then begin          
          testf = false;
        end;
      end;
      if (testf) then begin
        rval = APr.RVal;        
        if (vifoundf) then begin
          if (nonblank(RepSpec.f6)) then begin
            pdays = VIr.pdays;
            if (pdays<0) then begin
              PDr.Code = VIr.PayDeal;
              GetPD(PDr);
              pdays = PDr.pdays;
            end;
            if (pdays<frpddays) then begin testf = false; end;
            if (pdays>topddays) then begin testf = false; end;
          end;
          if (RepSpec.flags[2]==1) then begin
            rval = APr.RVal;
            rs = MulRateToBase1(VIr.CurncyCode,rval,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);                       
            rs2 = MulRateToBase2(VIr.CurncyCode,rval,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
          end else begin
            rval = APr.BookRVal;
            rs = APr.BookRVal;
            rs2 = MulRateToBase2(VIr.CurncyCode,APr.RVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);             
          end;  
        end else begin
           if (RepSpec.flags[2]==1) then begin
             rs = APr.RVal;
             rs2 = MulRateToBase2(VIr.CurncyCode,APr.RVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
           end else begin
             rs = APr.BookRVal;
             rs2 = MulWithRateToBase2(APr.CurncyCode,curdate,APr.RVal,DefaultCurRoundOff);
           end;  
           VIr.VECode = APr.VECode;
           VIr.VEName = VEr.Name;
           VIr.SerNr = APr.SerNr;
           VIr.InvDate = APr.DueDate;
           VIr.CurncyCode = APr.CurncyCode;
           VIr.DueDate = APr.DueDate;
        end;
        if (latedays<0) then begin
          due1tot = due1tot + rs;
          due2tot = due2tot + rs2;
        end else begin
          notdue1tot = notdue1tot + rs;
          notdue2tot = notdue2tot + rs2;
        end;
      end;
    end;
    if (testf) then begin
        if ((VendOut==false) and (RepSpec.ArtMode!=3) and (RepSpec.ArtMode!=4) and (RepSpec.ArtMode!=6) and (RepSpec.ArtMode!=2) and (RepSpec.ArtMode!=10)) then begin
          Gray_Divider(0,1);
          StartFormat(15);
          OutString(0,"DblCUVc",VEr.Code,false);
          OutString(100,0,VEr.Name,false);
          OutString(280,0,VEr.Phone,false);
          if (RepSpec.flags[2]==1) then begin
            OutString(468,0,VEr.VECurncyCode,false);
          end;  
          EndFormat;
          VendOut = true;
        end;
        AP1Sum = AP1Sum + rs;
        AP2Sum = AP2Sum + rs2;
        CurSum = CurSum + rval;
        rwcnt = rwcnt + 1;
        if ((RepSpec.flags[18]!=0) and (RepSpec.ArtMode!=4) and (RepSpec.ArtMode!=6)) then begin
          AddToCreditorsAccounts(VIr.APAcc,VIr.InvType,rs,credaccs,credbal,credcnt);
        end;        
        if (RepSpec.ArtMode==0) then begin// Historik 
          foundclosed = APWithLogg2(RepSpec,VEr,VIr,OPrsr,TRr,rval,rs,rwcnt,backdatf);
        end;
        if (RepSpec.ArtMode==1) then begin// Overview 
          foundclosed = APRPrintOverView(VIr,OPrsr,TRr,RepSpec,rval,rs,latedays);        
          AddCurncyTotals(acur,av1,curcnt,VIr.CurncyCode,rval);
        end;
        if (RepSpec.ArtMode==2) then begin// Aged
          if ((VIr.InstallmentInv==1) and (RepSpec.flags[19]!=0)) then begin
            if (RepSpec.flags[2]==0) then begin
              SumAgedInstalmenVI(curdate,VIr.SerNr,sact,s0,s1,s2,s3,s4,s5,s6,s7);
            end else begin
              if (nonblank(VEr.VECurncyCode)) then begin
                SumAgedInstalmenVI(curdate,VIr.SerNr,sact,s0,s1,s2,s3,s4,s5,s6,s7);
              end else begin
                SumAgedInstalmenVI(curdate,VIr.SerNr,sact,s0,s1,s2,s3,s4,s5,s6,s7);
              end;
            end;
          end else begin
            if (RepSpec.flags[2]==0) then begin
              SumAged(thedate,latedays,0,rs,sact,s0,s1,s2,s3,s4,s5,s6,s7);
              SumAged(thedate,latedays,0,rs2,sactb2,s0b2,s1b2,s2b2,s3b2,s4b2,s5b2,s6b2,s7b2);
            end else begin
              if (nonblank(VEr.VECurncyCode)) then begin
                SumAged(thedate,latedays,0,rval,sact,s0,s1,s2,s3,s4,s5,s6,s7);
              end else begin
                SumAged(thedate,latedays,0,rs,sact,s0,s1,s2,s3,s4,s5,s6,s7);
                SumAged(thedate,latedays,0,rs2,sactb2,s0b2,s1b2,s2b2,s3b2,s4b2,s5b2,s6b2,s7b2);
              end;
            end;
          end;
        end;
        if (RepSpec.ArtMode==3) then begin// Saldo             
          if (RepSpec.flags[2]==1) then begin
            AddCurncyTotals(acur,av1,curcnt,VIr.CurncyCode,rval);
          end else begin
            AddCurncyTotals(acur,av1,curcnt,"",rval);
          end;
        end;
        if (RepSpec.ArtMode==4) then begin// rate difference              
          if (backdatf) then begin
            rval = rval - VIr.WithHoldingTax;
          end;
          if (HasLocalization("POL")) then begin
            if (backdatf) then begin
              t2 = MulWithRateToBase1(VIr.CurncyCode,AddDay(thedate,1),rval,DefaultCurRoundOff);          
            end else begin
              t2 = MulWithRateToBase1(VIr.CurncyCode,AddDay(curdate,1),APr.RVal,DefaultCurRoundOff);
            end;  
          end else begin
            if (backdatf) then begin
              t2 = MulWithRateToBase1(VIr.CurncyCode,thedate,rval,DefaultCurRoundOff);          
            end else begin
              t2 = MulWithRateToBase1(VIr.CurncyCode,curdate,APr.RVal,DefaultCurRoundOff);
            end;  
          end;  
          if ((t2 - rs)<>0) then begin
            sumbooked = sumbooked + rs;
            sumnow = sumnow + t2;
            if (backdatf) then begin
              sumcurncy = sumcurncy + rval;
            end else begin
              sumcurncy = sumcurncy + APr.RVal;
            end;
            t2 = t2 - rs;
            sumdiff = sumdiff + t2;
            AddCurncyTotals(acur,av1,curcnt,VIr.CurncyCode,rval);
          end;
          
          APGetOnAccBalance(RepSpec,VEr,backdatf,sum,sum2,rval,onaccsumbooked,onaccsumnow,onaccsumcurncy,onaccsumdiff,credaccs,credbal,credcnt,acur,av1,curcnt);
          sumbooked = sumbooked - onaccsumbooked;
          sumnow = sumnow - onaccsumnow;
          sumcurncy = sumcurncy - onaccsumcurncy;
          sumdiff = sumdiff + onaccsumdiff;
          TotOnAcc = TotOnAcc - sum;
        end;
        if (RepSpec.ArtMode==6) then begin// rate difference detailed
          if (backdatf) then begin
            rval = rval - VIr.WithHoldingTax;
          end;
          if (HasLocalization("POL")) then begin
            if (backdatf) then begin
              t2 = MulWithRateToBase1(VIr.CurncyCode,AddDay(thedate,1),rval,DefaultCurRoundOff);
            end else begin
              t2 = MulWithRateToBase1(VIr.CurncyCode,AddDay(curdate,1),APr.RVal,DefaultCurRoundOff);
            end;  
          end else begin
            if (backdatf) then begin
              t2 = MulWithRateToBase1(VIr.CurncyCode,thedate,rval,DefaultCurRoundOff);
            end else begin
              t2 = MulWithRateToBase1(VIr.CurncyCode,curdate,APr.RVal,DefaultCurRoundOff);
            end;  
          end;
          if ((t2 - rs)<>0) then begin
            sumbooked = sumbooked + rs;
            sumnow = sumnow + t2;
            if (backdatf) then begin
              sumcurncy = sumcurncy + rval;
            end else begin
              sumcurncy = sumcurncy + APr.RVal;
            end;
            if (VendOut==false) then begin
              StartFormat(15);
               OutString(0,"DblCUVc",VEr.Code,false);
               OutString(100,0,VEr.Name,false);
               if (RepSpec.flags[2]==1) then begin
                OutString(468,0,VEr.VECurncyCode,false);
               end;  
              EndFormat;
              VendOut = true;
            end;          
            tstr = VIr.SerNr;
            if (nonblank(VIr.InvoiceNr)) then begin
              tstr = tstr & ", (";
              tstr = tstr & VIr.InvoiceNr;
              tstr = tstr & ")";
            end;
            StartFormat(15);
             OutString(0,"DblAP",tstr,false);
             if (backdatf) then begin
               OutVal(260,0,rval,M4Val,true);
             end else begin
               OutVal(260,0,APr.RVal,M4Val,true);
             end;
             OutVal(320,0,t2,M4Val,true);
             OutVal(400,0,rs,M4Val,true);
             OutVal(480,0,t2 - rs,M4Val,true);
            EndFormat;          
          end;
          t2 = t2 - rs;
          sumdiff = sumdiff + t2;
        end;
        if (RepSpec.ArtMode==5) then begin// Detailed Aged
            sactinv = 0; s0inv = 0; s1inv = 0; s2inv = 0; s3inv = 0; s4inv = 0; s5inv = 0; s6inv = 0; s7inv = 0;
            totinv = 0;
            if (RepSpec.flags[2]==0) then begin
              SumAged(thedate,latedays,0,rs,sactinv,s0inv,s1inv,s2inv,s3inv,s4inv,s5inv,s6inv,s7inv);
            end else begin
              SumAged(thedate,latedays,0,rval,sactinv,s0inv,s1inv,s2inv,s3inv,s4inv,s5inv,s6inv,s7inv);
            end;
            totinv = s0inv + s1inv;
            totinv = totinv + s2inv;
            totinv = totinv + s3inv;
            totinv = totinv + s4inv;
            totinv = totinv + s5inv;
            totinv = totinv + s6inv;
            totinv = totinv + s7inv;
            totinv = totinv + sactinv;
            APPrintDueDetailed(VIr,RepSpec,VEr.VECurncyCode,VEr.Objects,sactinv,s0inv,s1inv,s2inv,s3inv,s4inv,s5inv,s6inv,s7inv,sum,totinv,nrofper);
            if (RepSpec.flags[2]==0) or (nonblank(VEr.VECurncyCode)) then begin
              sact = sactinv + sact;
              s0 = s0inv + s0;
              s1 = s1inv + s1;
              s2 = s2inv + s2;
              s3 = s3inv + s3;
              s4 = s4inv + s4;
              s5 = s5inv + s5;
              s6 = s6inv + s6;
              s7 = s7inv + s7;

              vtots[0] = vtots[0] + s0inv;
              vtots[1] = vtots[1] + s1inv;
              vtots[2] = vtots[2] + s2inv;
              vtots[3] = vtots[3] + s3inv;
              vtots[4] = vtots[4] + s4inv;
              vtots[5] = vtots[5] + s5inv;
              vtots[6] = vtots[6] + s6inv;
              vtots[7] = vtots[7] + s7inv;
              vtots[8] = vtots[8] + sactinv;

            end else begin
              sact = sactinv + sact;
              s0 = s0inv + s0;
              s1 = s1inv + s1;
              s2 = s2inv + s2;
              s3 = s3inv + s3;
              s4 = s4inv + s4;
              s5 = s5inv + s5;
              s6 = s6inv + s6;
              s7 = s7inv + s7;
              
              vtots[0] = vtots[0] + MulRateToBase1(VIr.CurncyCode,s0inv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
              vtots[1] = vtots[1] + MulRateToBase1(VIr.CurncyCode,s1inv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
              vtots[2] = vtots[2] + MulRateToBase1(VIr.CurncyCode,s2inv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
              vtots[3] = vtots[3] + MulRateToBase1(VIr.CurncyCode,s3inv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
              vtots[4] = vtots[4] + MulRateToBase1(VIr.CurncyCode,s4inv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
              vtots[5] = vtots[5] + MulRateToBase1(VIr.CurncyCode,s5inv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
              vtots[6] = vtots[6] + MulRateToBase1(VIr.CurncyCode,s6inv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
              vtots[7] = vtots[7] + MulRateToBase1(VIr.CurncyCode,s7inv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
              vtots[8] = vtots[8] + MulRateToBase1(VIr.CurncyCode,sactinv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
/*              
              s0 = s0 + MulRateToBase1(VIr.CurncyCode,s0inv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
              s1 = s1 + MulRateToBase1(VIr.CurncyCode,s1inv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
              s2 = s2 + MulRateToBase1(VIr.CurncyCode,s2inv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
              s3 = s3 + MulRateToBase1(VIr.CurncyCode,s3inv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
              s4 = s4 + MulRateToBase1(VIr.CurncyCode,s4inv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
              s5 = s5 + MulRateToBase1(VIr.CurncyCode,s5inv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
              s6 = s6 + MulRateToBase1(VIr.CurncyCode,s6inv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
              s7 = s7 + MulRateToBase1(VIr.CurncyCode,s7inv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
*/              
            end;
        end;
L55:;
    end;
  end;
//find out onaccount receipts
  rval = 0;
  if (RepSpec.flags[21]<2) then begin    
    APGetOnAccBalance(RepSpec,VEr,backdatf,sum,sum2,rval,onaccsumbooked,onaccsumnow,onaccsumcurncy,onaccsumdiff,credaccs,credbal,credcnt,acur,av1,curcnt);
    
    sumbooked = sumbooked - onaccsumbooked;
    sumnow = sumnow - onaccsumnow;
    sumcurncy = sumcurncy - onaccsumcurncy;
    sumdiff = sumdiff + onaccsumdiff;
    TotOnAcc = TotOnAcc - sum;
    if (RepSpec.ArtMode==6) then begin
      if (onaccsumdiff<>0) then begin
        if (VendOut==false) then begin
          StartFormat(15);
           OutString(0,"DblCUVc",VEr.Code,false);
           OutString(100,0,VEr.Name,false);
           if (RepSpec.flags[2]==1) then begin
             OutString(468,0,VEr.VECurncyCode,false);
           end;  
          EndFormat;
          VendOut = true;
        end;          
        StartFormat(15);
        OutString(50,0,USetStr(2497),false);
        OutVal(260,0,onaccsumcurncy,M4Val,true);
        OutVal(320,0,onaccsumnow,M4Val,true);
        OutVal(400,0,onaccsumbooked,M4Val,true);
        OutVal(480,0,onaccsumdiff,M4Val,true);
        EndFormat;
      end;
    end;
  end;
  if (rval==0) then begin
    sum = 0;
  end;
  AP1Sum = AP1Sum + sum;
  AP2Sum = AP2Sum + sum2;
  CurSum = CurSum + rval;
  if (RepSpec.ArtMode==0) then begin
    if (sum<>0) then begin
      if ((VendOut==false) and (RepSpec.ArtMode<>3) and (RepSpec.ArtMode<>4)) then begin
        Gray_Divider(0,1);
        StartFormat(15);
        OutString(0,"DblCUVc",VEr.Code,false);
        OutString(100,0,VEr.Name,false);
        OutString(280,0,VEr.Phone,false);
        if (RepSpec.flags[2]==1) then begin
          OutString(468,0,VEr.VECurncyCode,false);
        end;  
        EndFormat;
        VendOut = true;
      end;
      StartFormat(15);
      OutString(185,0,USetStr(11857),false);
      if (RepSpec.flags[2]==1) then begin
        OutValBiDi(450,0,rval,M4Val,true,420);
      end else begin
        OutValBiDi(1,0,sum,M4Val,true,420);
      end;
      EndFormat;
      if (RepSpec.flags[13]!=0) then begin
        if (RepSpec.flags[2]==1) then begin
          PrintPrepaymentsNrsOP(RepSpec,RepSpec.flags[2]!=0,VEr.Code,backdatf,185,450);
        end else begin
          PrintPrepaymentsNrsOP(RepSpec,RepSpec.flags[2]!=0,VEr.Code,backdatf,185,480);
        end;
      end;            
    end;
  end;
  if (RepSpec.ArtMode==1) then begin
    if (sum<>0) then begin
      if ((VendOut==false) and (RepSpec.ArtMode<>3) and (RepSpec.ArtMode<>4)) then begin
        Gray_Divider(0,1);
        StartFormat(15);
        OutString(0,"DblCUVc",VEr.Code,false);
        OutString(100,0,VEr.Name,false);
        OutString(280,0,VEr.Phone,false);
        if (RepSpec.flags[2]==1) then begin
          OutString(468,0,VEr.VECurncyCode,false);
        end;  
        EndFormat;
        VendOut = true;
      end;
      StartFormat(15);
      OutString(150,0,USetStr(11857),false);
      if (RepSpec.flags[2]==1) then begin
        OutVal(450,0,rval,M4Val,true);
      end else begin
        OutVal(1,0,sum,M4Val,true);
      end;
      EndFormat;
      if (RepSpec.flags[13]!=0) then begin
        if (RepSpec.flags[2]==1) then begin
          PrintPrepaymentsNrsOP(RepSpec,RepSpec.flags[2]!=0,VEr.Code,backdatf,150,450);
        end else begin
          PrintPrepaymentsNrsOP(RepSpec,RepSpec.flags[2]!=0,VEr.Code,backdatf,150,480);
        end;
      end;
    end;
  end;
  if (RepSpec.ArtMode==4) then begin
    if (sumdiff<>0) then begin
      StartFormat(15);
      OutString(0,"DblCUVc",VEr.Code,false);
      OutString(60,0,VEr.Name,false);
      OutVal(260,0,sumcurncy,M4Val,true);
      OutVal(320,0,sumnow,M4Val,true);
      OutVal(400,0,sumbooked,M4Val,true);
      OutVal(480,0,sumdiff,M4Val,true);
      EndFormat;
      totdiff = totdiff + sumdiff;
      totbooked = totbooked + sumbooked;
      totnow = totnow + sumnow;
    end;
  end;
  if (RepSpec.ArtMode==6) then begin
    if (sumdiff<>0) then begin
      Gray_Divider(200,1);
      StartFormat(15);
      OutVal(260,0,sumcurncy,M4Val,true);
      OutVal(320,0,sumnow,M4Val,true);
      OutVal(400,0,sumbooked,M4Val,true);
      OutVal(480,0,sumdiff,M4Val,true);
      EndFormat;
      totdiff = totdiff + sumdiff;
      totbooked = totbooked + sumbooked;
      totnow = totnow + sumnow;
    end;
  end;
  if (RepSpec.ArtMode==2) then begin
    testf = true;
    if ((s0==0) and (s1==0) and (s2==0) and (s3==0) and  (s4==0) and  (s5==0) and (s6==0) and (s7==0) and (sum==0)) then begin
      testf = false;
    end;  
    if (testf) then begin
/*      
done inside PrintAgedLine     
      if (RepSpec.flags[2]==1) then begin
        s0 = s0 + rval;
      end else begin
        s0 = s0 + sum;
      end;  
*/        
      tot = s0 + s1;
      if (RepSpec.flags[2]==1) then begin
        tot = tot + rval;
      end else begin
        tot = tot + sum;
      end;
      tot = tot + s2;
      tot = tot + s3;
      tot = tot + s4;
      tot = tot + s5;
      tot = tot + s6;
      tot = tot + s7;
      StartFormat(15);
      OutString(0,"DblCUVc",VEr.Code,false);
      OutString(70,0,VEr.Name,false);
      if (RepSpec.flags[2]==1) then begin
        PrintAgedLine(sact,s0,s1,s2,s3,s4,s5,s6,s7,rval,tot,nrofper,464,"");
        OutString(468,0,VEr.VECurncyCode,false);
      end else begin
        PrintAgedLine(sact,s0,s1,s2,s3,s4,s5,s6,s7,sum,tot,nrofper,480,"");
        vtots[0] = vtots[0] + sum;
        vtots[0] = vtots[0] + s0;
        vtots[1] = vtots[1] + s1;
        vtots[2] = vtots[2] + s2;
        vtots[3] = vtots[3] + s3;
        vtots[4] = vtots[4] + s4;
        vtots[5] = vtots[5] + s5;
        vtots[6] = vtots[6] + s6;
        vtots[7] = vtots[7] + s7;
        vtots[8] = vtots[8] + sact;
//here        
      end;
      EndFormat;
    end;
  end;
  if (RepSpec.ArtMode==5) then begin
    testf = true;
    if ((sact==0) and (s0==0) and (s1==0) and (s2==0) and (s3==0) and (s4==0) and (s5==0) and (s6==0) and (s7==0) and (sum==0)) then begin testf = false; end;
    if (testf) then begin
      if (sum<>0) then begin
        PrintOnAccountInfo(VEr,rval,sum,VendOut,RepSpec,CurTotalsr,backdatf);
      end;
/*      
done inside PrintAgedLine           
      if (RepSpec.flags[2]==1) then begin
        s0 = rval + s0;
      end else begin
        s0 = sum + s0;
      end;  
*/      
      tot = s0 + s1;
      if (RepSpec.flags[2]==1) then begin
        tot = tot + rval;
      end else begin
        tot = tot + sum;
      end;
      tot = tot + s2;
      tot = tot + s3;
      tot = tot + s4;
      tot = tot + s5;
      tot = tot + s6;
      tot = tot + s7;
      tot = tot + sact;
      Black_Divider(200,480);
      StartFormat(15);
      OutEmpty(RepSpec,2);
      if (RepSpec.flags[2]==1) then begin
        PrintAgedLine(sact,s0,s1,s2,s3,s4,s5,s6,s7,sum,tot,nrofper,464,"");
        OutString(468,0,VEr.VECurncyCode,false);
      end else begin
        PrintAgedLine(sact,s0,s1,s2,s3,s4,s5,s6,s7,sum,tot,nrofper,480,"");
//        vtots[0] = vtots[0] + sum; //already done above
//        vtots[0] = vtots[0] + s0; //already done above
      end;
      EndFormat;
    end;
  end;
  if (RepSpec.ArtMode==0) then begin
    if (VendOut==true) then begin
      if (RepSpec.flags[2]==1) then begin
        PrintCurncyTotals(acur,av1,av2,av3,curcnt,450,-1,-1,320,false,RepSpec.PocketPC);
        AddCurncyTotalsToTotalCurncyTotals(acur,av1,av2,av3,curcnt,atotcur,atotv1,atotv2,atotv3,curtotcnt);
        ClearCurncyTotals(acur,av1,av2,av3,curcnt);
        Black_Divider(400,480);
        if (nonblank(VEr.VECurncyCode)) then begin
          StartFormat(15);
          OutString(320,0,USetStr(2424),true);
          OutString(360,0,VEr.VECurncyCode,false);
          OutValBiDi(450,0,CurSum,M4Val,true,520);
          EndFormat;
        end;
      end else begin
        Black_Divider(400,480);
      end;
      StartFormat(15);
      OutString(320,0,USetStr(4047),true);
      if (RepSpec.flags[2]==1) then begin
        OutValBiDi(450,0,AP1Sum,M4Val,true,520);
      end else begin
        OutValBiDi(480,0,AP1Sum,M4Val,true,520);
      end;
      EndFormat;
      Total1due = Total1due + due1tot;
      Total2due = Total2due + due2tot;      
      Total1notdue = Total1notdue + notdue1tot;
      Total2notdue = Total2notdue + notdue2tot;      
    end;
  end;
  if (RepSpec.ArtMode==1) then begin
    if (VendOut==true) then begin
      if (RepSpec.flags[2]==1) then begin
        PrintCurncyTotals(acur,av1,av2,av3,curcnt,450,-1,-1,320,false,RepSpec.PocketPC);
        AddCurncyTotalsToTotalCurncyTotals(acur,av1,av2,av3,curcnt,atotcur,atotv1,atotv2,atotv3,curtotcnt);
        ClearCurncyTotals(acur,av1,av2,av3,curcnt);
        Black_Divider(400,480);
        if (nonblank(VEr.VECurncyCode)) then begin
          StartFormat(15);
          OutString(320,0,USetStr(2424),true);
          OutString(360,0,VEr.VECurncyCode,false);
          OutVal(450,0,CurSum,M4Val,true);
          EndFormat;
        end;
      end else begin
        Black_Divider(400,480);
      end;
      StartFormat(15);
      OutString(320,0,USetStr(4047),true);
      if (RepSpec.flags[2]==1) then begin
        OutVal(450,0,AP1Sum,M4Val,true);
      end else begin
        OutVal(480,0,AP1Sum,M4Val,true);
      end;
      EndFormat;
      if (due1tot<>0) then begin
        StartFormat(15);
        OutString(320,0,USetStr(4060),true);
        if (RepSpec.flags[2]==1) then begin
          OutVal(450,0,due1tot,M4Val,true);
        end else begin
          OutVal(480,0,due1tot,M4Val,true);
        end;
        EndFormat;
        Total1due = Total1due + due1tot;
        Total2due = Total2due + due2tot;              
      end;      
      if (notdue1tot<>0) then begin
        StartFormat(15);
        OutString(320,0,USetStr(4051),true);
        if (RepSpec.flags[2]==1) then begin
          OutVal(450,0,notdue1tot,M4Val,true);
        end else begin
          OutVal(480,0,notdue1tot,M4Val,true);
        end;
        EndFormat;
        Total1notdue = Total1notdue + notdue1tot;
        Total2notdue = Total2notdue + notdue2tot;              
      end;      
    end;
  end;
  if (RepSpec.ArtMode==2) then begin
    if (VendOut==true) then begin
      Black_Divider(400,480);
      StartFormat(15);
       OutVal(480,0,AP1Sum,M4Val,true);
      EndFormat;
    end;
    Total1due = Total1due + due1tot;
    Total2due = Total2due + due2tot;                    
    Total1notdue = Total1notdue + notdue1tot;
    Total2notdue = Total2notdue + notdue2tot;                    
  end;
  if (RepSpec.ArtMode==3) then begin
    if (RepSpec.flags[2]==0) then begin
      if (AP1Sum==0) then begin goto L77; end;
    end;   
    if (RepSpec.flags[2]==1) then begin
      if (CurSum==0) then begin goto L77; end;
    end;
    if (first3f) then begin
      first3f = false;
    end else begin
      StartFormat(5);
      Gray_Divider(310,1);
      EndFormat;
    end;
    StartFormat(15);
    OutString(0,"DblCUVc",VEr.Code,false);
    OutString(100,0,VEr.Name,false);
    if (RepSpec.flags[2]==1) then begin
      if (blank(VEr.VECurncyCode)) then begin
        OutValBiDi(480,0,AP1Sum,M4Val,true,520);
      end else begin
        OutString(320,0,VEr.VECurncyCode,false);
        OutValBiDi(480,0,CurSum,M4Val,true,520);
      end;
    end else begin
      OutValBiDi(480,0,AP1Sum,M4Val,true,520);
    end;  
    EndFormat;
    PrintCurncyTotals(acur,av1,av2,av3,curcnt,1,-1,-1,320,false,RepSpec.PocketPC);
    AddCurncyTotalsToTotalCurncyTotals(acur,av1,av2,av3,curcnt,atotcur,atotv1,atotv2,atotv3,curtotcnt);
    ClearCurncyTotals(acur,av1,av2,av3,curcnt);
    Total1due = Total1due + due1tot;
    Total2due = Total2due + due2tot;                  
    Total1notdue = Total1notdue + notdue1tot;
    Total2notdue = Total2notdue + notdue2tot;                  
  end;  
  if (RepSpec.ArtMode==5) then begin
    if (VendOut==true) then begin
      StartFormat(15);
      EndFormat;
    end;
    Total1due = Total1due + due1tot;
    Total2due = Total2due + due2tot;                  
    Total1notdue = Total1notdue + notdue1tot;
    Total2notdue = Total2notdue + notdue2tot;  
  end; 
L77:;
  due1tot = 0;
  due2tot = 0;
  notdue1tot = 0;
  notdue2tot = 0;
  tot1Sum = AP1Sum + tot1Sum;
  tot2Sum = AP2Sum + tot2Sum;
  totCurSum = CurSum + totCurSum;

  ss[0] = s0 + ss[0];
  if (RepSpec.flags[2]==1) then begin
    ss[0] = rval + ss[0];
  end else begin
    ss[0] = sum + ss[0];
  end;
  ss[1] = s1 + ss[1];
  ss[2] = s2 + ss[2];
  ss[3] = s3 + ss[3];
  ss[4] = s4 + ss[4];
  ss[5] = s5 + ss[5];
  ss[6] = s6 + ss[6];
  ss[7] = s7 + ss[7];
  ss[8] = sact + ss[8];

  ssb2[0] = ssb2[0] + s0b2;
  ssb2[1] = ssb2[1] + s1b2;
  ssb2[2] = ssb2[2] + s2b2;
  ssb2[3] = ssb2[3] + s3b2;
  ssb2[4] = ssb2[4] + s4b2;
  ssb2[5] = ssb2[5] + s5b2;
  ssb2[6] = ssb2[6] + s6b2;
  ssb2[7] = ssb2[7] + s7b2;

  sumcurncy = 0;
  sumdiff = 0;
  sumbooked = 0;
  sumnow = 0;
  goto L22;
L88:;
  if (RepSpec.ArtMode!=10) then begin
    Gray_Divider(0,1);
  end;
  switch (RepSpec.ArtMode) begin
    case 0:
      PrintCurncyTotals(atotcur,atotv1,atotv2,atotv3,curtotcnt,450,-1,-1,320,false,RepSpec.PocketPC);
    case 1:
      PrintCurncyTotals(atotcur,atotv1,atotv2,atotv3,curtotcnt,450,-1,-1,320,false,RepSpec.PocketPC);
    case 3:
      PrintCurncyTotals(atotcur,atotv1,atotv2,atotv3,curtotcnt,1,-1,-1,320,false,RepSpec.PocketPC);
  end;
  if ((RepSpec.ArtMode==2) or (RepSpec.ArtMode==5)) then begin
/*  
    tot = ss[0] + ss[1];
    tot = ss[2] + tot;
    tot = ss[3] + tot;
    tot = ss[4] + tot;
    tot = ss[5] + tot;
    tot = ss[6] + tot;
    tot = ss[7] + tot;
    tot = ss[8] + tot;
*/
    tot = vtots[0] + vtots[1];
    tot = vtots[2] + tot;
    tot = vtots[3] + tot;
    tot = vtots[4] + tot;
    tot = vtots[5] + tot;
    tot = vtots[6] + tot;
    tot = vtots[7] + tot;
    tot = vtots[8] + tot;

    totb2 = totb2 + ssb2[0];
    totb2 = totb2 + ssb2[1];
    totb2 = totb2 + ssb2[2];
    totb2 = totb2 + ssb2[3];
    totb2 = totb2 + ssb2[4];
    totb2 = totb2 + ssb2[5];
    totb2 = totb2 + ssb2[6];
    totb2 = totb2 + ssb2[7];
    
    StartFormat(15);
    OutEmpty(RepSpec,2);
     if (RepSpec.flags[2]==1) then begin
       PrintAgedLine(vtots[8],vtots[0],vtots[1],vtots[2],vtots[3],vtots[4],vtots[5],vtots[6],vtots[7],blankval,tot,nrofper,464,"");
     end else begin
       PrintAgedLine(vtots[8],vtots[0],vtots[1],vtots[2],vtots[3],vtots[4],vtots[5],vtots[6],vtots[7],blankval,tot,nrofper,480,"");
     end;
    EndFormat;
    if (RepSpec.flags[12]!=0) then begin
      StartFormat(15);
      PrintAgedLine(ssb2[8],ssb2[0],ssb2[1],ssb2[2],ssb2[3],ssb2[4],ssb2[5],ssb2[6],ssb2[7],blankval,totb2,nrofper,480,"");
      EndFormat;
    end;
    StartFormat(15);
    EndFormat;
  end;
  if ((RepSpec.flags[2]==1) and (RepSpec.ArtMode==3)) then begin goto L99; end;
  if ((RepSpec.flags[2]==1) and (RepSpec.ArtMode==2)) then begin goto L99; end;
  if ((RepSpec.flags[2]==1) and (RepSpec.ArtMode==5)) then begin goto L99; end;
  if (RepSpec.ArtMode<>4) and (RepSpec.ArtMode<>6) and (RepSpec.ArtMode<>10) then begin
    PrintAPTotals(RepSpec,bascur.BaseCur1,tot1Sum,Total1due,Total1notdue,-TotOnAcc,totCurSum);
    if ((bascur.BaseCur1<>bascur.BaseCur2) and (RepSpec.flags[12]==1)) then begin
      Gray_Divider(290,1);
      PrintAPTotals(RepSpec,bascur.BaseCur2,tot2Sum,Total2due,Total2notdue,blankval,blankval);
    end;
  end;
/*    
  if (RepSpec.ArtMode!=4) then begin
    StartFormat(15);
    OutString(380,0,USetStr(4048),true);
    OutVal(480,0,totSum,M4Val,true);
    EndFormat;
    if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
    OutString(380,0,USetStr(4060),true);
    OutVal(480,0,Totaldue,M4Val,true);
    EndFormat;
    end;
  end;
*/  
  if (RepSpec.ArtMode==4) or (RepSpec.ArtMode==6) then begin
    StartFormat(15);
    OutVal(320,0,totnow,M4Val,true);
    OutVal(400,0,totbooked,M4Val,true);
    OutVal(480,0,totdiff,M4Val,true);
    EndFormat;
    PrintCurncyTotals(acur,av1,av2,av3,curcnt,260,-1,-1,150,false,RepSpec.PocketPC);
  end;
  if ((RepSpec.flags[18]!=0) and (RepSpec.ArtMode!=4) and RepSpec.ArtMode!=6) then begin
    PrintCreditorsAccounts(credaccs,credbal,credcnt);
  end;
L99:;
  if (foundclosed and (RepSpec.ArtMode<>4) and (RepSpec.ArtMode<>6)) then begin
    StartFormat(15);
    OutString(50,0,USetStr(1225),false);
    EndFormat;
  end;
L999:;
  return;
end;

global
procedure APRn(record RcVc RepSpec)
begin
  string 255 frve,tove;
  val tot1Sum;
  
  frve = FirstInRange(RepSpec.f1,20);
  tove = LastInRange(RepSpec.f1,20);
  StartReportJob(USetStr(4041)); 
   PrintHeaderAP1(frve,tove,RepSpec);   
  EndHeader;
  RunAPRn(RepSpec,tot1Sum);
  EndJob;
  return;
end;
