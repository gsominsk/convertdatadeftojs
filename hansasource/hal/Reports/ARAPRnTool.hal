external procedure SubAPPrePayments(record VIVc,var val,var val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure GetAPInvBalance(record VIVc,Date,Integer,var val,var val,var LongInt);
external procedure SubCashRows_IVVc(record IVVc,Boolean,var val,var val);
external procedure SubPrePayments(record IVVc,var val,var val);
external procedure ARRnGetInvBalance(record IVVc,var Date,Integer,var val,var val,var LongInt);
external procedure HTSaleMan(string, var string);
external procedure HTCustCat(string,var string);
external procedure HTCustClass(string,var string);
external procedure HTCustClassType(string,var string);
external procedure HTPLDetailLevel(Integer,var string);
external procedure HTObj(string,var string);
external procedure HTOT(string,var string);
external procedure HTCusts(string, string, var string);
external procedure HTInvSel(Integer, var string);
external function string 255 CreateInvoiceNumber(LongInt,string);
external procedure APGetOnAccBalance(record RcVc,record CUVc,Boolean,var val,var val,var val,var val,var val,var val,var val,
                   Array string,Array val,var Integer,Array string,Array val,var Integer);
external procedure PrintOnAccountInfo(record CUVc,val,val,var Boolean,record RcVc,record SMVc,Boolean);
external procedure GetOnAccBalance(record RcVc,string,string,Boolean,Integer,var val,var val,var val,var val,var val,var val,var val,record SMVc,
                   Array string,Array val,var Integer);
external procedure Base1ToBase2(var val,Date,var val);
external function Boolean ObjectTypeMatch(string,string);
external function LongInt DateDiff(Date,Date);
external procedure ClassTypef(string,string,var boolean);
external function string 255 CreateInvoiceNumberDisputedMark(LongInt,string,Integer);

global
function Boolean TestIVInvoiceARAP(record RcVc RepSpec,record IVVc IVr)
begin
  Boolean testf;
  
  testf = true;
  if (IVr.Invalid!=0) then begin testf = false; end;
  if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin testf = false; end;
  switch (RepSpec.flags[3]) begin
    case 1:
      if (IVr.DisputedFlag!=0) then begin testf = false; end;
    case 2:
      if (IVr.DisputedFlag==0) then begin testf = false; end;
  end;

  if (nonblank(RepSpec.Language)) then begin
    if (RepSpec.Language!=IVr.LangCode) then begin
       testf = false;
    end;
  end;
  if (nonblank(RepSpec.ObjStr))  then begin
    if (SetInSet(RepSpec.ObjStr,IVr.Objects)==false) then begin testf = false; end;
  end;
/*        
  if (nonblank(RepSpec.TransStr)) then begin
    if (RepSpec.TransStr!=IVr.SalesMan) then begin testf = false; end;
  end;
*/
  if (testf) then begin
    if (nonblank(RepSpec.ObjType)) then begin
      testf = ObjectTypeMatch(IVr.Objects,RepSpec.ObjType);            
    end;
  end;
  TestIVInvoiceARAP = testf;
  return;
end;

global
function Boolean TestVIInvoiceARAP(record RcVc RepSpec,record VIVc VIr)
begin
  Boolean testf;
  
  testf = true;
  if (VIr.Invalid!=0) then begin testf = false; end;
  if (VIr.InvType==kInvoiceTypeEmployee or VIr.InvType==kInvoiceTypeCash or VIr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin testf = false; end;
  switch (RepSpec.flags[3]) begin
    case 1:
      if (VIr.Closed!=0) then begin testf = false; end;
    case 2:
      if (VIr.Closed==0) then begin testf = false; end;
  end;
  if (nonblank(RepSpec.Language)) then begin
    if (RepSpec.Language!=VIr.LangCode) then begin
       testf = false;
    end;
  end;
  if (nonblank(RepSpec.ObjStr))  then begin
    if (SetInSet(RepSpec.ObjStr,VIr.Objects)==false) then begin testf = false; end;
  end;
/*        
  if (nonblank(RepSpec.TransStr)) then begin
    if (RepSpec.TransStr!=VIr.SalesMan) then begin testf = false; end;
  end;
*/
  if (testf) then begin
    if (nonblank(RepSpec.ObjType)) then begin
      testf = ObjectTypeMatch(VIr.Objects,RepSpec.ObjType);            
    end;
  end;
  TestVIInvoiceARAP = testf;
  return;
end;

global
function Boolean APARPrintOverView(record VIVc VIr,record RcVc RepSpec,val rval,val rs,LongInt latedays,Boolean negf)
begin
  string 255 tstr;
  Boolean foundclosed;
  record AgedBlock Ab;
  
  BlockLoad(Ab);
  tstr = USetStr(1152) & ":" & VIr.SerNr;
  if (nonblank(VIr.InvoiceNr)) then begin
    tstr = tstr & ", (";
    tstr = tstr & VIr.InvoiceNr;
    tstr = tstr & ")";
  end;
  if (VIr.Closed==1) then begin
    tstr = tstr & " (*) ";
    foundclosed = true;
  end;            
  StartFormat(15);
  OutString(15,"DblLiquid",tstr,false);
  if (RepSpec.flags[5]==0) then begin
    OutDate(160,0,VIr.InvDate,false);
  end else begin
    OutDate(160,0,VIr.RebDate,false);
  end;
  OutString(220,0,VIr.PayDeal,false);
  OutDate(240,0,VIr.DueDate,false);
  if (Ab.ShowDelayDays!=0) then begin
    if (latedays<0) then begin
      OutLongInt(345,0,-latedays,true);
    end else begin
      OutString(345,0, "0",true);
    end;  
  end else begin
    if (latedays != -1) then begin
      OutLongInt(345,0,latedays,true);
    end else begin
      OutString(345,0, "-1",true);
    end;  
  end;
  if (RepSpec.flags[2]==1) then begin
    OutValBiDi(450,0,rval,M4Val,true,490);
    OutString(480,0,VIr.CurncyCode,true);
  end else begin
    if (negf) then begin
      OutValBiDi(450,0,rs,M4NegVal,true,490);
    end else begin
      OutValBiDi(450,0,rs,M4Val,true,490);
    end;
  end;  
  EndFormat;
LAPARPrintOverView:;  
  APARPrintOverView = foundclosed;
  return;
end;

global
procedure ARAPPrintOverView(record IVVc IVr,record RcVc RepSpec,val rval,val rs,LongInt latedays)
begin
  string 255 tstr;
  record AgedBlock Ab;
  
  BlockLoad(Ab);
   StartFormat(15);
    if (RepSpec.flags[23]!=0) then begin
      OutStringID(15,"DblAR",IVr.OfficialSerNr,false,IVr.SerNr);
//      OutString(100,"DblAR",IVr.SerNr,false);
    end else begin
      tstr = CreateInvoiceNumberDisputedMark(IVr.SerNr,"",IVr.DisputedFlag);
      tstr = USetStr(1150) & ":" & tstr;
      OutString(15,"DblLiquid",tstr,false);
    end;
    OutDate(160,0,IVr.InvDate,false);
    OutString(220,0,IVr.PayDeal,false);
    OutDate(240,0,IVr.PayDate,false);
//    OutLongInt(310,0,latedays,true);
    tstr = "DblBadCU";
    if ((ProgramType==9) or (ProgramType==15) or (ProgramType==20) or (IsBooks)) then begin
      tstr = "";
    end;
      tstr = "";
    if (Ab.ShowDelayDays!=0) then begin
      if (latedays<0) then begin
        OutStringID(345,tstr,-latedays,true,IVr.SerNr);
      end else begin
        OutStringID(345,tstr,0,true,IVr.SerNr);
      end;
    end else begin      
      OutStringID(345,tstr,latedays,true,IVr.SerNr);
    end;
    OutLongInt(360,0,IVr.LastRemndr,true);
    if (RepSpec.flags[2]==1) then begin
      OutValBiDi(450,0,rval,M4Val,true,490);
      OutString(480,0,IVr.CurncyCode,true);
    end else begin
      OutValBiDi(450,0,rs,M4Val,true,490);
    end;
   EndFormat;
LARAPPrintOverView:;   
  if ((RepSpec.flags[14]!=0) and (nonblank(IVr.InvComment))) then begin
    StartFormat(15);
    OutString(150,0,IVr.InvComment,false);
    EndFormat;
  end;
  return;         
end;

global
procedure PrintARAPPerDate_Backdated(record RcVc RepSpec,record CUVc CUr,var Boolean CustHeaderf,
                                       var val Total1Due,var val Total2Due,var val TotalCurDue,
                                       var val Total1NotDue,var val Total2NotDue,var val TotalCurNotDue,
                                       var val totCurSum,var val totbase1Sum,var val totbase2Sum,var val TotOnAcc)
begin
  Boolean foundar,testf,foundap,found;
  record OPrsVc OPrsr;
  record IPrsVc IPrsr;  
  record IVVc IVr;
  record VIVc VIr;
  Date agedate;
  LongInt latedays;
  val rvalb1,rvalb2;
  val onaccb1,onaccb2,rval,onaccbooked,onaccnow,onacccurncy,onaccdiff;
  val aponaccb1,aponaccb2,aprval,aponaccbooked,aponaccnow,aponacccurncy,aponaccdiff;
  record SMVc CurTotalsr;  //addcurencytotals
  Array string 10 debaccs;
  Array val debbal;
  Integer debcnt;
  Array string 10 credaccs;
  Array val credbal;
  Integer credcnt;
  val Base1Sum,Base2Sum,CurSum;
  Array val duetot;
  Array val notduetot;
  Date lastd;
  string 255 typ;
  array val av1;
  array string 20 acur;
  Integer curcnt;
  
  lastd.year = 1980; lastd.month = 1; lastd.day = 1;
  if (RepSpec.flags[21]!=1) then begin
    found = true;
  end;
  found = true;
  while (found) begin
    IPrsr.TransType = kIPrsTransTypeInvoice;
    IPrsr.CustCode = CUr.Code;
    IPrsr.TransDate = lastd;
    foundar = LoopKey("TransType",IPrsr,3,true);
    if (IPrsr.TransType!=kIPrsTransTypeInvoice) then begin
      foundar = false;
    end;
    if (IPrsr.CustCode!=CUr.Code) then begin
      foundar = false;
    end;
    
    OPrsr.TransType = 0;
    OPrsr.VECode = CUr.Code;
    OPrsr.TransDate = lastd;
    foundap = LoopKey("TransType",OPrsr,3,true);
    if (OPrsr.TransType!=0) then begin
      foundap = false;
    end;
    if (OPrsr.VECode!=CUr.Code) then begin
      foundap = false;
    end;

/*
StartFormat(15);    
 OutString(0,0,"AR",false);
 OutString(100,0,ARr.InvoiceNr,false);
 OutString(200,0,ARr.DueDate,false);
 OutString(300,0,lastd,false);
EndFormat;
StartFormat(15);    
 OutString(0,0,"AP",false);
 OutString(100,0,APr.SerNr,false);
 OutString(200,0,APr.DueDate,false);
 OutString(300,0,lastd,false);
EndFormat;
*/

    typ = "";
    if (foundar) then begin
      if (foundap) then begin
        if (IPrsr.TransDate>OPrsr.TransDate) then begin
          typ = "AP";
          lastd = OPrsr.TransDate;
          StepBack(IPrsr);
        end else begin
          typ = "AR";
          lastd = IPrsr.TransDate;
          StepBack(OPrsr);
        end;
      end else begin
        typ = "AR";
        lastd = IPrsr.TransDate;
      end;
    end else begin
      if (foundap) then begin
        typ = "AP";
        lastd = OPrsr.TransDate;
      end else begin
        found = false;
      end;
    end;
    if (lastd>RepSpec.d1) then begin
      foundar = false;
      foundap = false;
      typ = "";
    end;
    switch (typ) begin
      case "AR":
        IVr.SerNr = IPrsr.TransNr;
        if (ReadFirstMain(IVr,1,true)) then begin
        end;
        testf = TestIVInvoiceARAP(RepSpec,IVr);

        if (RepSpec.flags[22]==0) then begin
          latedays = DateDiff(IVr.PayDate,RepSpec.d1);
        end else begin
          if (IVr.SerNr>0) then begin
            latedays = DateDiff(IVr.InvDate,RepSpec.d1);
          end else begin
            latedays = DateDiff(IVr.PayDate,RepSpec.d1);
          end;
        end;
        if (RepSpec.flags[0]!=0) then begin 
          if (latedays>=0) then begin 
            testf = false; 
          end else begin          
            if (RepSpec.long1>0) then begin          
              if (-latedays<=RepSpec.long1) then begin
                testf = false; 
              end;
            end;
          end;
        end;
        if (testf) then begin
          switch (IVr.InvType) begin
            case kInvoiceTypeCashInvoiceReceiptPRT:
              rval = blankval;
              rvalb1 = blankval;
            case kInvoiceTypeCash:
              rval = blankval;
              rvalb1 = blankval;
            case kInvoiceTypeEmployee:
              rval = blankval;
              rvalb1 = blankval;
            case kInvoiceTypeCreditSpecialSales: goto LkInvoiceTypeCredit;
            case kInvoiceTypeCredit:
              LkInvoiceTypeCredit:;
              if (IVr.CredInv==-1) then begin
                rval = -IVr.Sum4;
                rvalb1 = -IVr.BaseSum4;
                if (rvalb1==0) then begin rvalb1 = rval; end;
              end else begin
                rval = blankval;
                rvalb1 = blankval;
              end;
            otherwise
              rval = IVr.Sum4;
              rvalb1 = IVr.BaseSum4;
              if (rvalb1==0) then begin rvalb1 = rval; end;
          end;          
          ARRnGetInvBalance(IVr,RepSpec.d1,IVr.InvType,rval,rvalb1,latedays);
          SubPrePayments(IVr,rval,rvalb1);
          SubCashRows_IVVc(IVr,false,rval,rvalb1);          
          Base1ToBase2(rvalb1,IVr.TransDate,rvalb2);
          if (rval==0) then begin testf = false; end;
        end;
        if (testf) then begin
          switch (RepSpec.ArtMode) begin
            case 0:
              if (CustHeaderf) then begin
                Gray_Divider(0,1);
                StartFormat(15);
                OutString(0,"DblCUVc",CUr.Code,false);
                OutString(100,0,CUr.Name,false);
                 OutString(280,0,CUr.Phone,false);
                 if (RepSpec.flags[2]==1) then begin
                   OutString(480,0,CUr.CurncyCode,true);
                 end;  
                EndFormat;          
                CustHeaderf = false;
              end;
              ARAPPrintOverView(IVr,RepSpec,rval,rvalb1,latedays);                  
          end;
          Base1Sum = Base1Sum + rvalb1;
          Base2Sum = Base2Sum + rvalb2;
          CurSum = CurSum + rval;

          if (latedays<0) then begin
            duetot[0] = duetot[0] + rval;
            duetot[1] = duetot[1] + rvalb1;
            duetot[2] = duetot[2] + rvalb2;
          end else begin
            notduetot[0] = notduetot[0] + rval;
            notduetot[1] = notduetot[1] + rvalb1;
            notduetot[2] = notduetot[2] + rvalb2;
          end;
        end;
        
      case "AP":

        VIr.SerNr = OPrsr.TransNr;
        if (ReadFirstMain(VIr,1,true)) then begin
        end;
        testf = TestVIInvoiceARAP(RepSpec,VIr);
        
        if (RepSpec.flags[22]==0) then begin
          latedays = DateDiff(VIr.DueDate,RepSpec.d1);
        end else begin
          if (IVr.SerNr>0) then begin
            latedays = DateDiff(VIr.InvDate,RepSpec.d1);
          end else begin
            latedays = DateDiff(VIr.DueDate,RepSpec.d1);
          end;
        end;
        if (RepSpec.flags[0]!=0) then begin 
          if (latedays>=0) then begin 
            testf = false; 
          end else begin          
            if (RepSpec.long1>0) then begin          
              if (-latedays<=RepSpec.long1) then begin
                testf = false; 
              end;
            end;
          end;
        end;
        if (testf) then begin
         switch (IVr.InvType) begin
            case kInvoiceTypeCashInvoiceReceiptPRT:
              rval = blankval;
            case kInvoiceTypeCash:
              rval = blankval;
            case kInvoiceTypeCreditSpecialSales: goto LkInvoiceTypeCredit;
            case kInvoiceTypeCredit:
              LkInvoiceTypeCredit:;
              if (IVr.CredInv==-1) then begin
                rval = 0-VIr.PayVal;
              end else begin
                rval = blankval;
              end;
            otherwise
            rval = VIr.PayVal;
          end;
          rvalb1 = MulRateToBase1(VIr.CurncyCode,rval,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
          GetAPInvBalance(VIr,RepSpec.d1,RepSpec.flags[14],rval,rvalb1,latedays);
          SubAPPrePayments(VIr,rval,rvalb1);
          rvalb1 = rvalb1 - VIr.WithHoldingTax;
          Base1ToBase2(rvalb1,VIr.TransDate,rvalb2);
        end;
        if (testf) then begin
          switch (RepSpec.ArtMode) begin
            case 0:
              if (CustHeaderf) then begin
                Gray_Divider(0,1);
                StartFormat(15);
                OutString(0,"DblCUVc",CUr.Code,false);
                OutString(100,0,CUr.Name,false);
                 OutString(280,0,CUr.Phone,false);
                 if (RepSpec.flags[2]==1) then begin
                   OutString(480,0,CUr.CurncyCode,true);
                 end;  
                EndFormat;          
                CustHeaderf = false;
              end;
              APARPrintOverView(VIr,RepSpec,rval,rvalb1,latedays,true);
          end;
          Base1Sum = Base1Sum - rvalb1;
          Base2Sum = Base2Sum - rvalb2;
          CurSum = CurSum - rval;
          if (latedays<0) then begin
            duetot[0] = duetot[0] - rval;
            duetot[1] = duetot[1] - rvalb1;
            duetot[2] = duetot[2] - rvalb2;
          end else begin
            notduetot[0] = notduetot[0] - rval;
            notduetot[1] = notduetot[1] - rvalb1;
            notduetot[2] = notduetot[2] - rvalb2;
          end;
        end;
    end;
  end;
      
  if (RepSpec.flags[21]<2) then begin    
    GetOnAccBalance(RepSpec,CUr.Code,CUr.CurncyCode,true,RepSpec.flags[2],onaccb1,onaccb2,rval,onaccbooked,onaccnow,onacccurncy,onaccdiff,CurTotalsr,debaccs,debbal,debcnt);
    APGetOnAccBalance(RepSpec,CUr,true,aponaccb1,aponaccb2,aprval,aponaccbooked,aponaccnow,aponacccurncy,aponaccdiff,credaccs,credbal,credcnt,acur,av1,curcnt);
    onaccb1 = onaccb1 - aponaccb1; onaccb2 = onaccb2 - aponaccb2; rval = rval - aprval;
    onaccbooked = onaccbooked - aponaccbooked; onaccnow = onaccnow - aponaccnow; onacccurncy = onacccurncy - aponacccurncy;
    onaccdiff = onaccdiff - aponaccdiff ;

    Base1Sum = Base1Sum + onaccb1;
    Base2Sum = Base2Sum + onaccb2;
    CurSum = CurSum + rval;
    if (nonblank(CUr.CurncyCode)) then begin
      if (RepSpec.flags[2]!=0) then begin          
        TotOnAcc = TotOnAcc + rval;
      end else begin
        TotOnAcc = TotOnAcc + onaccb1;
      end;
    end else begin
      TotOnAcc = TotOnAcc + onaccb1;
    end;

    if ((onaccb1!=0) or (rval!=0)) then begin
        switch (RepSpec.ArtMode) begin
          case 0:
            if (RepSpec.flags[2]==0) then begin
              if (CustHeaderf==false) then begin
                Gray_Divider(0,1);
                StartFormat(15);
                OutString(0,"DblCUVc",CUr.Code,false);
                OutString(100,0,CUr.Name,false);
                OutString(280,0,CUr.Phone,false);
                if (RepSpec.flags[2]==1) then begin
                  OutString(480,0,CUr.CurncyCode,true);
                end;
                EndFormat;
                CustHeaderf = true;
              end;
              StartFormat(15);
              OutString(130,0,USetStr(2497),false);
              OutValBiDi(450,0,onaccb1,M4Val,true,490);
              EndFormat;
            end else begin
              PrintOnAccountInfo(CUr,rval,onaccb1,CustHeaderf,RepSpec,CurTotalsr,false);
            end;
      end;
    end;
  end;
  switch (RepSpec.ArtMode) begin
    case 1:
      StartFormat(15);
       OutString(0,"DblCUVc",CUr.Code,false);
       OutString(100,0,CUr.Name,false);
       if (nonblank(RepSpec.CurncyCode)) and (RepSpec.flags[2]==1) then begin
         OutVal(5,0,CurSum,M4Val,true);
       end else begin
         OutVal(5,0,Base1Sum,M4Val,true);
       end;
      EndFormat;
    case 0:
      Black_Divider(290,450);
      StartFormat(15);
       OutString(320,0,USetStr(2424),true);
       if (nonblank(RepSpec.CurncyCode)) and (RepSpec.flags[2]==1) then begin
         OutVal(5,0,CurSum,M4Val,true);
       end else begin
         OutVal(5,0,Base1Sum,M4Val,true);
       end;
      EndFormat;
  end;
  if (duetot[1]!=0) then begin
    StartFormat(15);
     OutString(320,0,USetStr(2527),true);
     if (nonblank(RepSpec.CurncyCode)) and (RepSpec.flags[2]==1) then begin
       OutValBiDi(450,0,duetot[0],M4Val,true,490);
     end else begin
       OutValBiDi(450,0,duetot[1],M4Val,true,490);
     end;
    EndFormat;
  end;
  if (notduetot[1]!=0) then begin
    StartFormat(15);
     OutString(320,0,USetStr(2521),true);
     if (nonblank(RepSpec.CurncyCode)) and (RepSpec.flags[2]==1) then begin
       OutValBiDi(450,0,notduetot[0],M4Val,true,490);
     end else begin
       OutValBiDi(450,0,notduetot[1],M4Val,true,490);
     end;
    EndFormat;
  end;
  switch (RepSpec.ArtMode) begin
    case 1:
      Gray_Divider(250,1);
  end;
  TotalCurDue = TotalCurDue + duetot[0];
  Total1Due = duetot[1] + Total1Due;
  Total2Due = duetot[2] + Total2Due;

  TotalCurNotDue = TotalCurNotDue + notduetot[0];
  Total1NotDue = Total1NotDue + notduetot[1];
  Total2NotDue = Total2NotDue + notduetot[2];

  totCurSum = totCurSum + CurSum;
  totbase1Sum = totbase1Sum + Base1Sum;
  totbase2Sum = totbase2Sum + Base2Sum;

  return;
end;
