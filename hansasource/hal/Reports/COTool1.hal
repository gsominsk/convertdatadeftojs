external function Boolean SetInSet2(string,string);
external procedure RowCalculateTaxMatrix_IVVc(var record IVVc,Integer,row IVVc);
external procedure RoundRowSum(string,string,string,var val);
external procedure AddWithholdingTaxesRows_IVVc(var record IVVc);
external procedure AddPerceptionTaxesRows_IVVc(var record IVVc);
external procedure GetAccAccrual(string,var string);
external procedure PastePDInInv(var record IVVc,string,Boolean);
external function Date FindDueDateInAccPeriod(Date);
external procedure SetLastInvoiceDate(var record COVc,Integer,Date);
external procedure FindShortestPeriod(record COVc,var Date,var Date,var Integer,var LongInt,var Date,var Date,var Integer,var Integer,var Date,var Integer);
external procedure ORSumup(var record ORVc);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure RegionPerceptionTax(string,string,string,string,var string,var val);
external function string 20 GetTax2Acc(string);
external procedure GetTaxesDiscounts(string,Date,string,string,var val,var val);
external procedure SetCOInvOnceRows(var record COVc,Date,LongInt);
external function val MulWithRateToBase2(var string,Date,val,roundmode);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external function LongInt DateDiff(Date,Date);
external procedure CORepInvoice(record IVVc,record COVc,Integer);
external procedure GetBaseCurncy(Integer,var string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean GetPD(var record PDVc);
external procedure CalcSum(val,val,val,val,var val,Integer);
external updating procedure CreateCOIV(record COVc,record IVVc);
external procedure IVSumup(var record IVVc,Boolean);
external function Integer GetCUCOInvDef(string);
external procedure PasteCOInvoiceTo(var record IVVc,string);
external updating procedure InvCreateActivity(record COVc,string,string,string,Integer);
external procedure IVMultiLineText(record IVVc,record INVc,string,Integer);
external function LongInt GetCurUserLastNr(string);
external procedure IVVc_PastePriceList(var record IVVc);
external function Boolean CheckCustomerBlocked(string);

global
procedure GetCountryName(string code,string langcode,var string res)
BEGIN
  record CountryVc Cr;
  row CountryVc Crw;
  Integer i,rwcnt;
  
  res = "";
  Cr.Code = code;
  if (ReadFirstMain(Cr,1,true)) then begin
    rwcnt = MatRowCnt(Cr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Cr,i,Crw);
      if (langcode==Crw.LangCode) then begin
        res = Crw.Text;
      end;
    end;
    if (blank(res)) then begin
      res = Cr.Comment;
    end;
  end;
  RETURN;
END;

/* Another solution
procedure CalcInstallDays(record PDVc PDr,Date invdat,Date paydat,var Date newpaydat)
begin
  record InstallmentVc Intr;
  row InstallmentVc Insrw;
  Integer rwcnt,i;
  date tdr;
  
  tdr = invdat;
  if (PDr.pdays==-1) then begin
    Intr.Code = PDr.Installment;
    if (ReadFirstMain(Intr,1,true)) then begin
      rwcnt = MatRowCnt(Intr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Intr,i,Insrw);
        if (Insrw.Months!=-1) then begin
          tdr = AddMonth(tdr,Insrw.Months);
        end;
        if (Insrw.Days!=-1) then begin
          tdr = AddDay(tdr,Insrw.Days);
        end;
      end;
    end;
  end else begin
    tdr = paydat;
  end;
  newpaydat = tdr;
  return;
end;
*/

procedure IVCalcInstallment2(record IVVc IVp,Date tdp,val sump,string instcode,var LongInt pdaysp)
begin
  record InstallmentVc Intr;
  row InstallmentVc Insrw;
  Integer rwcnt,i;
  date tdr;
  val sum,t;
  Boolean found,delf,firstf;
  record IVVc origIVr;
  string 20 linstcode;
  record PDVc PDr;
  record JobVc Jobr;
  Date lasttdr;
  
  linstcode = instcode;
  if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
    origIVr.SerNr = IVp.CredInv;
    if (ReadFirstMain(origIVr,1,true)) then begin 
      PDr.Code = origIVr.PayDeal;
      if (GetPD(PDr)) then begin    
        linstcode = PDr.Installment;
      end;
    end;
  end;
  tdr = tdp;
  lasttdr = tdp;
  pdaysp = 0;
  if (sump==0) then begin
    delf = true;
  end else begin
    delf = false;
  end;
  lasttdr = IVp.InvDate;
  Intr.Code = linstcode;

  if (ReadFirstMain(Intr,1,true)) then begin
    firstf = true;
    rwcnt = MatRowCnt(Intr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Intr,i,Insrw);
      switch (Insrw.Type) begin
        case 0: 
//goto LSKIPDateCalc;        
          if (firstf) then begin
            tdr = tdp;
            firstf = false;
          end else begin
            tdr = lasttdr;
          end;
        case 1: 
          tdr = lasttdr;
        case 2:
          if (firstf) then begin
            tdr = tdp;
            if (IVp.JobNr>0) then begin
              Jobr.SerNr = IVp.JobNr;
              if (ReadFirstMain(Jobr,1,true)) then begin
                tdr = Jobr.TransDate;
              end;
            end;
            firstf = false;
          end else begin
            tdr = lasttdr;
          end;
      end;
      if (Insrw.Months!=-1) then begin
        tdr = AddMonth(tdr,Insrw.Months);
      end;
      if (Insrw.Days!=-1) then begin
        tdr = AddDay(tdr,Insrw.Days);
      end;
      if (tdr<lasttdr) then begin
        tdr = lasttdr;
      end;
      lasttdr = tdr;
    end;
    pdaysp = DateDiff(tdr,tdp);
LSKIPDateCalc:;    
  end;
  return;
end;

global
procedure IVVc_CalculatePayDate(var record IVVc IVp)
begin
  record AccBlock ARAb;
  record PDVc PDr;
  Date td;
  LongInt restdays;
  
  BlockLoad(ARAb);
  PDr.Code = IVp.PayDeal;
  if (GetPD(PDr)) then begin end;
  
  if (IVp.pdays!=-1) then begin
    if (ARAb.DueDateBasedOnServDelDate==0) then begin
      IVp.PayDate = AddDay(IVp.InvDate,IVp.pdays);
    end else begin
      IVp.PayDate = AddDay(IVp.ServiceDelDate,IVp.pdays);
    end;
  end else begin
    IVp.PayDate = IVp.InvDate;
  end;  
  if (PDr.PDType==4) then begin
    IVp.PayDate = IVp.InvDate;
    td = IVp.InvDate;
    td = AddMonth(td,1);
    if (IVp.pdays==0) then begin td = AddMonth(td,1); end;
    td = AddDay(td,-GetDay(td) + 1);//1
    if (IVp.InvType<kInvoiceTypeInterest) then begin IVp.InvType = kInvoiceTypeNormal; end;
    restdays = DateDiff(td,IVp.InvDate);
    if (IVp.pdays>=0) then begin restdays = restdays -1; end;
    IVp.pdays = IVp.pdays + restdays;
    if (IVp.pdays!=-1) then begin
      if (ARAb.DueDateBasedOnServDelDate==0) then begin
        IVp.PayDate = AddDay(IVp.InvDate,IVp.pdays);
      end else begin
        IVp.PayDate = AddDay(IVp.ServiceDelDate,IVp.pdays);
      end;
    end else begin
      IVp.PayDate = IVp.InvDate;
    end;
  end;
  if (PDr.PDType==6) then begin
    IVp.PayDate = FindDueDateInAccPeriod(IVp.InvDate);
    if (PDr.pdays>0) then begin
      IVp.PayDate = AddDay(IVp.PayDate,PDr.pdays);
    end;
  end;
  if (nonblank(PDr.Installment)) then begin
    if ((IVp.InvType==kInvoiceTypeNormal or IVp.InvType==kInvoiceTypeNormalSpecialSales) or (IVp.InvType==kInvoiceTypeInterest)) then begin
      IVCalcInstallment2(IVp,IVp.PayDate,IVp.Sum4,PDr.Installment,restdays);
      IVp.InstallmentInv = 1;
      if (restdays!=-1) then begin
        if (ARAb.DueDateBasedOnServDelDate==0) then begin
          IVp.PayDate = AddDay(IVp.PayDate,restdays);
        end else begin
          IVp.PayDate = AddDay(IVp.ServiceDelDate,restdays);
        end;
      end;
    end;
  end;
  return;
end;
    
function
Boolean CheckifINonIV(record COVc COp,Integer corow,var record IVVc IVp,Integer UseDiscount)
BEGIN
  row COVc COrw;
  row IVVc IVrw;
  Integer i,rwcnt;
  Boolean res;
  val tv;
  
  res = false;
  MatRowGet(COp,corow,COrw);
  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (IVrw.ArtCode==COrw.ArtCode) then begin
      IVrw.Quant = IVrw.Quant + COrw.Quant;
      CalcSum(IVrw.Quant,IVrw.Price,IVrw.PriceFactor,IVrw.vRebate,tv,UseDiscount);
      IVrw.Sum = tv;      
      MatRowPut(IVp,i,IVrw);
      res = true;
      goto LCheckifINonIV;
    end;
  end;
LCheckifINonIV:;  
  CheckifINonIV = res;
  RETURN;
END;

procedure MakeInvFromCO3(record RcVc RepSpec,var record COVc COp,var record IVVc IVp,Date ivdp,Date sdp,Date edp,Integer detailinv,var Integer rownr,Integer shortestline)
begin
  record GeneralOptionBlock GenOptRec;
  record INVc INr;
  row COVc COrw;
  row IVVc IVrw;
  val tax2prc,tax2reb;
  string 10 tax2code;
  val tv,price,t;
  Integer i,rwcnt;
  string 255 tstr,t2;
  Boolean testf;
  record TaxMatrixVc TMr;

  BlockLoad(GenOptRec);
  rwcnt = MatRowCnt(COp);
  if (detailinv==0) then begin
    if (RepSpec.flags[4]==0) then begin
      tstr = USetStr(1168);
      t2 = COp.SerNr;
      tstr = tstr & t2;
      if (COp.ChildSerNr!=-1) then begin
        t2 = COp.ChildSerNr;
        tstr = tstr & ":";
        tstr = tstr & t2;
      end;
      ClearRow(IVp,IVrw,1);
      IVrw.Spec = tstr;
      IVrw.TaxTemplateCode = COrw.TaxTemplateCode;
      UnpackRowFieldMatrix(COrw,"TaxMatrix",TMr);
      PackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
      RowCalculateTaxMatrix_IVVc(IVp,rownr,IVrw);
      MatRowPut(IVp,rownr,IVrw);
      rownr = rownr + 1;
    end;
    if (nonblank(COp.InvoiceToCode)) then begin
      tstr = USetStr(7252);
      tstr = tstr & ": ";
      tstr = tstr & COp.Addr0;
      ClearRow(IVp,IVrw,1);
      IVrw.Spec = tstr;
      MatRowPut(IVp,rownr,IVrw);
      rownr = rownr + 1;
    end;
    tstr = USetStr(1169);
    t2 = sdp;
    tstr = tstr & t2;
    tstr = tstr & ":";
    t2 = edp;
    tstr = tstr & t2;
    ClearRow(IVp,IVrw,1);
    IVrw.Spec = tstr;
    MatRowPut(IVp,rownr,IVrw);
    rownr = rownr + 1;
    if (nonblank(RepSpec.ObjStr)) then begin
      ClearRow(IVp,IVrw,1);
      IVrw.Spec = RepSpec.ObjStr;
      MatRowPut(IVp,rownr,IVrw);
      rownr = rownr + 1;
    end;
    ClearRow(IVp,IVrw,1);
    IVrw.Spec = "-----------";
    MatRowPut(IVp,rownr,IVrw);
    rownr = rownr + 1;
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(COp,i,COrw);
    testf = true;
    if (detailinv==1) then begin
      if (CheckifINonIV(COp,i,IVp,GenOptRec.UseDiscount)) then begin 
        testf = false;
      end;
    end;
    if (COrw.RowType==1) then begin
      if (COrw.InvoiceNo>0) then begin
        testf = false;
      end;
      if (nonblankdate(COrw.InvoiceAfter)) then begin
        if (COrw.InvoiceAfter>IVp.InvDate) then begin
          testf = false;
        end;
      end;
    end;
    if (testf) then begin
      if (ReadFirstItem(COrw.ArtCode,INr,false,false)) then begin end;
    end;
    if (COrw.RowType==100) then begin testf = false; end;
    if (nonblank(RepSpec.AccStr)) then begin
      if (nonblank(COrw.ArtCode)) then begin
        if (INr.Group!=RepSpec.AccStr) then begin testf = false; end;
      end;
    end;
    if (testf) then begin 
      if (nonblank(RepSpec.f5)) then begin
        if (nonblank(COrw.ArtCode)) then begin
          if (INr.Code!=RepSpec.f5) then begin testf = false; end;
        end;
      end;
    end;  
    if (testf) then begin 
      if (nonblank(RepSpec.f6)) then begin
        if (nonblank(COrw.ArtCode)) then begin
          if (SetInSet2(RepSpec.f6,INr.DispGroups)==false) then begin
            testf = false;
          end;
        end;
      end;
    end;
    if (shortestline>-1) then begin
      if (shortestline!=i) then begin
        testf = false;
      end;
    end else begin
      if ((COrw.perLength>0) or (nonblankdate(COrw.startDate)) or (nonblankdate(COrw.endDate))) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      COrw.InvoiceNo = IVp.SerNr;
      MatRowPut(COp,i,COrw);
      ClearRow(IVp,IVrw,1);
// Why don't we use if (IVVc_PasteArtCode(IVp,rownr,inwarning,false)) then begin here, we will miss updating this function with new things....
      IVrw.Recepy = INr.Recepy;
      IVrw.ArtCode = COrw.ArtCode;
      IVrw.UnitCode = INr.Unittext;
      IVrw.Perceptions = INr.Perceptions;
      IVrw.UnitCode = INr.Unittext;
      IVrw.Quant = COrw.Quant;
      IVrw.Spec = COrw.Spec;
      IVrw.vRebate = COrw.vRebate;
      IVrw.PriceFactor = COrw.PriceFactor;
      if (RepSpec.flags[1]==0) then begin
        price = COrw.Price;
      end;
      if (RepSpec.flags[1]==1) then begin
        price = MulWithRatetoBase1(COp.CurncyCode,IVp.InvDate,COrw.Price,DefaultCurRoundOff);
      end;
      if (RepSpec.flags[1]==2) then begin
        price = MulWithRatetoBase2(COp.CurncyCode,IVp.InvDate,COrw.Price,DefaultCurRoundOff);
      end;
      IVrw.Price = price;
      CalcSum(IVrw.Quant,IVrw.Price,IVrw.PriceFactor,IVrw.vRebate,tv,GenOptRec.UseDiscount);  
      IVrw.Sum = tv;
      IVrw.SalesAcc = COrw.SalesAcc;
      IVrw.Objects = COrw.Objects;
      IVrw.BasePrice = COrw.BasePrice;
      IVrw.rowGP = COrw.rowGP;
      IVrw.VATCode = COrw.VATCode;
      IVrw.PeriodCode = COrw.PeriodCode;
      if ((COp.normalFactor!=0) and (COrw.Quant!=0)) then begin
        tv = COrw.Quant*COp.normalFactor;
        IVrw.Quant = tv;
        CalcSum(tv,price,COrw.PriceFactor,COrw.vRebate,t,GenOptRec.UseDiscount);  
        IVrw.Sum = t;
      end;
      RoundRowSum(IVp.CurncyCode,IVp.PayDeal,"IVVc",IVrw.Sum);
      if (IVrw.Price==0) and (IVrw.Sum==0) then begin
        IVrw.Sum = blankval;
      end;
      RegionPerceptionTax(IVp.CustCode,IVp.Region,INr.EUCodex,INr.Group,tax2code,tax2prc);
      GetTaxesDiscounts(IVp.CustCode,IVp.TransDate,IVrw.VATCode,tax2code,t,tax2reb);
      if (IVp.NoTax2==0) then begin
        IVrw.TAX2Code = tax2code;
        IVrw.TAX2Prc = tax2prc;
        IVrw.TAX2Reb = tax2reb;
        IVrw.TAX2Acc = GetTax2Acc(IVrw.TAX2Code);
      end;
      if (IVp.NoTax1==0) then begin
        IVrw.TAX1Reb = t;
      end;
      if (blank(IVrw.PeriodCode)) then begin
        GetAccAccrual(IVrw.SalesAcc,tstr);
        IVrw.PeriodCode = tstr;
      end;
      IVrw.TaxTemplateCode = COrw.TaxTemplateCode;
      UnpackRowFieldMatrix(COrw,"TaxMatrix",TMr);
      PackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
      RowCalculateTaxMatrix_IVVc(IVp,rownr,IVrw);
      MatRowPut(IVp,rownr,IVrw);
      rownr = rownr + 1;
    end;
  end;
  if (nonblank(RepSpec.TransStr)) then begin
     INr.Code = RepSpec.TransStr;
     if (ReadFirstMain(INr,1,true)) then begin
       ClearRow(IVp,IVrw,1);
       IVrw.Spec = INr.Name;
       rownr = MatRowCnt(IVp);
       MatRowPut(IVp,rownr,IVrw);
       if ((INr.ExplodeRec==0) or (blank(IVrw.Recepy))) then begin
         IVMultiLineText(IVp,INr,IVp.LangCode,rownr);
       end;
     end;
  end;
  AddPerceptionTaxesRows_IVVc(IVp);
  AddWithholdingTaxesRows_IVVc(IVp);
  IVSumup(IVp,true);
  return;
end;

procedure MakeInvFromCO2(record RcVc RepSpec,record COVc COp,var record IVVc IVp,Date ivdp,Date sdp,Date edp,Boolean addcof,Integer detailinv,Integer shortestline)
BEGIN
  val fr,to1,to2,br1,br2;  
  Integer rownr;
  string 20 curcode;  

  IVp.InvDate = ivdp;
  IVp.TransDate = ivdp;
  if (nonblank(RepSpec.FirstAcc)) then begin
    IVp.PayDeal = RepSpec.FirstAcc;  
  end;  
  PastePDInInv(IVp,"",false);
  if (nonblank(RepSpec.LastAcc)) then begin
    IVp.PayDate = StringToDate(RepSpec.LastAcc);
  end;  
  IVp.CurncyCode = COp.CurncyCode;
  curcode = IVp.CurncyCode;
  GetFullCurncyRate(curcode,IVp.TransDate,fr,to1,to2,br1,br2);
  IVp.CurncyCode = curcode;
  IVp.FrRate = fr;
  IVp.ToRateB1 = to1;
  IVp.ToRateB2 = to2;
  IVp.BaseRate1 = br1;
  IVp.BaseRate2 = br2;
  IVp.LastRemndr = 0;
  IVp.LangCode = RepSpec.Language;
  if (nonblank(RepSpec.FirstAcc)) then begin
    IVp.SalesMan = RepSpec.FirstAcc;
  end;
  rownr = MatRowCnt(IVp);
  MakeInvFromCO3(RepSpec,COp,IVp,ivdp,sdp,edp,detailinv,rownr,shortestline);
  RETURN;
END;

global
procedure MakeInvFromCO(record RcVc RepSpec,var record COVc COp,var record IVVc IVp,Date ivdp,Date sdp,Date edp,Integer detailinv,Integer updstockf,Integer shortestline)
BEGIN
  Integer rownr;
  val fr,to1,to2,br1,br2;
  string 255 curcode;
  record CUVc CUr;

  if (updstockf!=-1) then begin
    IVp.UpdStockFlag = updstockf;
  end;
  CUr.Code = COp.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
  end;
  IVp.NoTax1 = CUr.NoTax1;
  IVp.NoTax2 = CUr.NoTax2;
  IVp.ExportFlag = COp.ExportFlag;
  if ((IVp.ExportFlag==1) or (IVp.ExportFlag==2)) then begin
    CUr.Code = COp.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
    end;
  end;  
//  RecordNew(IVp);
  IVp.InvDate = ivdp;
  IVp.TransDate = ivdp;
  if (blankdate(ivdp)) then begin
    IVp.InvDate = CurrentDate;
    IVp.TransDate = CurrentDate;
  end;
  IVp.OKFlag = 0;
  IVp.InvType = 0;
  IVp.LastRemndr = 0;

  IVp.CustCode = COp.CustCode;
  IVp.Addr0 = COp.Addr0;
  IVp.Sorting = COp.Sorting;
  IVp.Addr1 = COp.Addr1;
  IVp.Addr2 = COp.Addr2;
  IVp.Addr3 = COp.Addr3;
  IVp.InvAddr3 = COp.InvAddr3;
  IVp.InvAddr4 = COp.InvAddr4;
  IVp.Region = CUr.Region;
  IVp.InvCountry = CUr.CountryCode;
  IVp.OurContact = COp.OurContact;
  IVp.ClientContact = COp.ClientContact;
  IVp.ExportFlag = COp.ExportFlag;
  IVp.PayDeal = COp.PayDeal;
  IVp.CustCat = COp.CustCat;
  IVp.PriceList = COp.PriceList;
  IVp.Objects = COp.Objects;
  IVp.InclVAT = COp.InclVAT;
//  IVp.NoTAXonVAT = COp.NoTAXonVAT;
//  IVp.TotalwoTAX = COp.TotalwoTAX;
  IVp.InvComment = COp.InvComment;
  IVp.SalesMan = COp.SalesMan;
  if (RepSpec.flags[1]==0) then begin
    IVp.CurncyCode = COp.CurncyCode;
    curcode = COp.CurncyCode;
  end;
  if (RepSpec.flags[1]==1) then begin
    GetBaseCurncy(1,curcode);
    IVp.CurncyCode = curcode;
  end;
  if (RepSpec.flags[1]==2) then begin
    GetBaseCurncy(2,curcode);
    IVp.CurncyCode = curcode;
  end;
  GetFullCurncyRate(curcode,IVp.TransDate,fr,to1,to2,br1,br2);
  IVp.CurncyCode = curcode;
  IVp.FrRate = fr;
  IVp.ToRateB1 = to1;
  IVp.ToRateB2 = to2;
  IVp.BaseRate1 = br1;
  IVp.BaseRate2 = br2;

  IVp.LangCode = COp.LangCode;
  if (blank(IVp.LangCode)) then begin
    IVp.LangCode = RepSpec.Language;    
  end;
  IVp.FrPrice = COp.FrPrice;
  IVp.FrItem = COp.FrItem;
  IVp.FrBase = COp.FrBase;
  IVp.FrVATCode = COp.FrVATCode;
  IVp.FrObjects = COp.FrObjects;
  IVp.FrGP = COp.FrGP;
  IVp.FrGPPercent = COp.FrGPPercent;
  IVp.VATNr = COp.VATNr;
  IVp.CustTaxTemplateCode = COp.CustTaxTemplateCode;
  IVp.ShipDeal = COp.ShipDeal;
  IVp.ShipAddr0 = COp.ShipAddr0;
  IVp.ShipAddr1 = COp.ShipAddr1;
  IVp.ShipAddr2 = COp.ShipAddr2;
  IVp.ShipAddr3 = COp.ShipAddr3;
  IVp.DelAddr3 = COp.DelAddr3;
  IVp.DelAddr4 = COp.DelAddr4;
  IVp.ShipMode = COp.ShipMode;
  IVp.DelCountry = CUr.DelCountry;
  if (nonblank(COp.Location)) then begin
    IVp.Location = COp.Location;
  end;
  IVp.PRCode = COp.PRCode;
  IVp.FrSalesAcc = COp.FrSalesAcc;
  IVp.CreditCard = COp.CreditCard;
  IVp.AuthorizationCode = COp.AuthorizationCode;
  if (nonblank(RepSpec.LastAcc)) then begin
    IVp.PayDate = StringToDate(RepSpec.LastAcc);
  end;
  if (nonblank(COp.InvoiceToCode)) then begin
    PasteCOInvoiceTo(IVp,COp.InvoiceToCode);
    IVp.OrgCust = COp.CustCode;
  end;
  if (nonblank(RepSpec.FirstAcc)) then begin
    IVp.PayDeal = RepSpec.FirstAcc;  
  end;
  PastePDInInv(IVp,"",false);
  IVp.FrPrice = COp.FrPrice;
  if (nonblank(RepSpec.FirstAcc)) then begin
    IVp.SalesMan = RepSpec.FirstAcc;
  end;
  rownr = 0;
  MakeInvFromCO3(RepSpec,COp,IVp,ivdp,sdp,edp,detailinv,rownr,shortestline);
  RETURN;
END;

updating function Boolean FindCustIV(record RcVc RepSpec,record COVc COp,Date invdatep,Date invpers,Date invperep,Integer detailinv,Integer shortestline,record IVVc IVp)
BEGIN
  record IVVc IVr;
  record IVVc oldIVr;
  Boolean TrHs,testf;
  Date invdate;
  Boolean res;
  Integer error;

  res = false;
  if (blankdate(RepSpec.d1)) then begin 
    invdate = CurrentDate; 
  end;
  if (blankdate(invdate)) then begin 
    invdate = RepSpec.RegDate;
  end;
  if (blankdate(invdate)) then begin 
    invdate = invdatep;
  end;
  
  IVr.InvDate = invdate;
  TrHs = true;
  while (LoopBackKey("InvDate",IVr,1,TrHs)) begin
    testf = true;
    if (IVr.InvDate!=invdate) then begin TrHs = false; end;
    if (IVr.CustCode!=COp.InvoiceToCode) then begin testf = false; end;
    if (IVr.OKFlag!=0) then begin testf = false; end;
    if (TrHs and testf) then begin
      RecordCopy(oldIVr,IVr);
      MakeInvFromCO2(RepSpec,COp,IVr,invdatep,invpers,invperep,true,detailinv,shortestline);
      error = RecordUpdate(oldIVr,IVr,true);      
      RecordCopy(IVp,IVr);
      res = true;
      goto LFindCustIV;
    end;
  end;
LFindCustIV:;
  FindCustIV = res;
  RETURN;
END;

global
updating function LongInt ConvertIVToOR(var record IVVc IVr)
BEGIN
  record COIVVc COIVr;
  record COIVVc oldCOIVr;
  record ORVc ORr;
  row ORVc ORrw;
  row IVVc IVrw;
  record SRBlock SRRec;
  LongInt newnr,res;
  Integer i,rwcnt;
  Boolean foundf;
  
  RecordNew(ORr);
  ORr.OrdDate = IVr.TransDate;
  BlockLoad(SRRec);
  newnr = GetCurUserLastNr("ORVc");
  if (newnr==-1) then begin
    newnr = SRRec.LastOrdNr;
  end;
  ORr.SerNr = NextSerNr("ORVc",ORr.OrdDate,newnr,false,"");
  ORr.CustCode = IVr.CustCode;
  ORr.Addr0 = IVr.Addr0;
  ORr.Addr1 = IVr.Addr1;
  ORr.Addr2 = IVr.Addr2;
  ORr.Addr3 = IVr.Addr3;
  ORr.InvAddr3 = IVr.InvAddr3;
  ORr.InvAddr4 = IVr.InvAddr4;
  ORr.CustCat = IVr.CustCat;
  ORr.PayDeal = IVr.PayDeal;
  ORr.VATNr = IVr.VATNr;
  ORr.ExportFlag = IVr.ExportFlag;
  ORr.CustContact = IVr.ClientContact;
  ORr.OurContact = IVr.OurContact;
  ORr.Objects = IVr.Objects;
  ORr.SalesMan = IVr.SalesMan;
  ORr.CurncyCode = IVr.CurncyCode;
  ORr.LangCode = IVr.LangCode;
  ORr.PriceList = IVr.PriceList;
  ORr.PRCode = IVr.PRCode;
  ORr.Comment = IVr.InvComment;
  ORr.CustOrdNr = IVr.CustOrdNr;
  ORr.Sorting = IVr.Sorting;
  ORr.InclVAT = IVr.InclVAT;
  ORr.NoTAXonVAT = IVr.NoTAXonVAT;
  ORr.TotalwoTAX = IVr.TotalwoTAX;
  ORr.FrRate = IVr.FrRate;
  ORr.ToRateB1 = IVr.ToRateB1;
  ORr.ToRateB2 = IVr.ToRateB2;
  ORr.BaseRate1 = IVr.BaseRate1;
  ORr.BaseRate2 = IVr.BaseRate2;
  ORr.CustVATCode = IVr.CustVATCode;
  ORr.VATNr = IVr.VATNr;  
  ORr.RebCode = IVr.RebCode;
  ORr.Phone = IVr.Phone;
  ORr.Fax = IVr.Fax;
  ORr.DelAddrCode = IVr.DelAddrCode;
  ORr.Region = IVr.Region;
  ORr.ShipAddr0 = IVr.ShipAddr0;
  ORr.ShipAddr1 = IVr.ShipAddr1;
  ORr.ShipAddr2 = IVr.ShipAddr2;
  ORr.ShipAddr3 = IVr.ShipAddr3;
  ORr.DelAddr3 = IVr.DelAddr3;
  ORr.DelAddr4 = IVr.DelAddr4;
  ORr.ShipMode = IVr.ShipMode;
  ORr.ShipDeal = IVr.ShipDeal;
  ORr.CreditCard = IVr.CreditCard;
  ORr.AuthorizationCode = IVr.AuthorizationCode;
  ORr.Location = IVr.Location;
  ORr.DiscPerc = IVr.DiscPerc;
  ORr.DiscSum = IVr.DiscSum;
  ORr.TotVolume = IVr.TotVolume;
  ORr.TotWeight = IVr.TotWeight;
  ORr.TotQty = IVr.TotQty;  
  ORr.Commision = IVr.Commision;
  ORr.FrPrice = IVr.FrPrice;
  ORr.FrBase = IVr.FrBase;
  ORr.FrItem = IVr.FrItem;
  ORr.FrVATCode = IVr.FrVATCode;
  ORr.FrObjects = IVr.FrObjects;
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    ClearRow(ORr,ORrw,1);
    ORrw.stp = 1;
    ORrw.ArtCode = IVrw.ArtCode;
    ORrw.Quant = IVrw.Quant;
    ORrw.Spec = IVrw.Spec;
    ORrw.Price = IVrw.Price;
    ORrw.vRebate = IVrw.vRebate;
    ORrw.SalesAcc = IVrw.SalesAcc;
    ORrw.VATCode = IVrw.VATCode;
    ORrw.Objects = IVrw.Objects;
    ORrw.SerialNr = IVrw.SerialNr;
    ORrw.PriceFactor = IVrw.PriceFactor;
    ORrw.Recepy = IVrw.Recepy;
    ORrw.MotherArtCode = IVrw.MotherArtCode;
    ORrw.RecipeQuant = IVrw.RecipeQuant;
    ORrw.VARList = IVrw.VARList;
    ORrw.UnitCode = IVrw.UnitCode;
    ORrw.UnitFactQuant = IVrw.UnitFactQuant;
    ORrw.UnitFactPrice = IVrw.UnitFactPrice;
    ORrw.UnitXval = IVrw.UnitXval;
    ORrw.UnitYval = IVrw.UnitYval;
    ORrw.UnitZval = IVrw.UnitZval;
    ORrw.TAX2Code = IVrw.TAX2Code;
    ORrw.TAX2Prc = IVrw.TAX2Prc;
    ORrw.TAX2Reb = IVrw.TAX2Reb;
    ORrw.TAX1Reb = IVrw.TAX1Reb;
    ORrw.TAX2Acc = IVrw.TAX2Acc;
    ORrw.Sum = IVrw.Sum;
    MatRowPut(ORr,i,ORrw);
  end;
  ORSumup(ORr);
  if (RecordInsert(ORr,false))  then begin
    res = ORr.SerNr;
LNextOne:;
    ResetLoop(COIVr);
    COIVr.IVNr = IVr.SerNr;
    COIVr.Type = 0;
    foundf = true;
    while (LoopKey("IVNr",COIVr,2,foundf)) begin
      if (COIVr.IVNr!=IVr.SerNr) then begin foundf = false; end;
      if (COIVr.Type!=0) then begin foundf = false; end;
      if (foundf) then begin
        RecordCopy(oldCOIVr,COIVr);
        COIVr.IVNr = ORr.SerNr;
        COIVr.Type = 1;
        if (RecordUpdate(oldCOIVr,COIVr,false)) then begin
        end;
        goto LNextOne;
      end;
    end;
    RecordDelete(IVr);
  end;
  ConvertIVToOR = res;
  RETURN;
END;

updating function Integer LocSaveCreatedIV(record RcVc RepSpec,var record IVVc IVp,record COVc COr,var LongInt ivcnt)
BEGIN
  Integer res;
  LongInt newnr;
  record SRBlock SRRec;
  string 255 sstr;
  Boolean testf;
  Boolean updatf;
  record IVVc oldIVp;
 
  RecordCopy(oldIVp,IVp);
  updatf = false;
  BlockLoad(SRRec);
  if (IVp.SerNr<=0) then begin
    newnr = GetCurUserLastNr("IVVc");
    if (newnr==-1) then begin
      newnr = SRRec.LastInvNr;
    end;
    IVp.SerNr = NextSerNr("IVVc",IVp.TransDate,newnr,false,IVp.LangCode); 
    if (IVp.SerNr<=0) then begin
      res = 1747;
      goto LLocSaveCreatedIV;
    end;
  end else begin
    updatf = true;
  end;
  IVSumup(IVp,true);
  if (RepSpec.repname!="COInvRn") then begin
    if (MatRowCnt(IVp)>0) then begin
      IVp.UpdStockFlag = RepSpec.flags[2];
      if (RepSpec.flags[3]==0) then begin//0 - means OK contract
        IVp.OKFlag = 0;
      end else begin
        IVp.OKFlag = 1;
      end;
      IVp.NoEInvoice = RepSpec.flags[5];
      if (updatf) then begin
//        if (RecordUpdate(oldIVp,IVp,false)==0)  then begin
//        end;
        if (RecordStore(IVp,true)) then begin
        end;
      end else begin
        if (RecordInsert(IVp,false))  then begin
          ivcnt = ivcnt + 1;
        end;
      end;
    end;
  end else begin
    CORepInvoice(IVp,COr,0);
  end;
LLocSaveCreatedIV:;  
  LocSaveCreatedIV = res;
  RETURN;
END;

updating function Boolean PasteCOInInv(record RcVc RepSpec,var record COVc COp,var record IVVc IVp,Boolean maintf)
BEGIN
  row COVc COrw;
  Boolean res,ivfoundf,testf,invdatesetf;
  Date invpers,invpere,invdate;
  Integer detailinv;
  Integer invDtype,invDays;
  Date startDate,endDate,lastInvDate,oldinvpers,coinvdate;
  LongInt perLength;
  Integer shortestline,oldshortestline;
  
  res = false;
  testf = true;
  if (COp.OKFlag==0) then begin testf = false; end;
  if (blankdate(COp.startDate)) then begin testf = false; end;
  if (nonblank(COp.InvoiceToCode)) then begin
    detailinv = GetCUCOInvDef(COp.InvoiceToCode);
  end else begin
    detailinv = GetCUCOInvDef(COp.CustCode);
  end;  
  FindShortestPeriod(COp,invpers,oldinvpers,oldshortestline,perLength,startDate,endDate,invDtype,invDays,lastInvDate,shortestline);
  if (nonblankdate(lastInvDate)) then begin
    if (lastInvDate>=RepSpec.d2) then begin testf = false; end;
  end;
  
  if (nonblank(RepSpec.f3)) then begin
    if (RepSpec.f3!=COp.ContractClass) then begin testf = false; end;
  end;
  if (testf) then begin
    if (CheckCustomerBlocked(COp.CustCode)) then begin testf = false; end;
  end;
  if (testf) then begin
    if (perLength<=0) then begin goto LPasteCOInInv; end;
    invpers = startDate;
LPasteCOInInvLoopBegin:;
    FindShortestPeriod(COp,invpers,oldinvpers,oldshortestline,perLength,startDate,endDate,invDtype,invDays,lastInvDate,shortestline);
    if (perLength<=0) then begin goto LPasteCOInInv; end;
    if (nonblankdate(endDate)) then begin
      if (invpers>endDate) then begin goto LPasteCOInInv; end;
      if (nonblankdate(COp.CancelDate)) then begin
        if (invpers>COp.CancelDate) then begin goto LPasteCOInInv; end;
      end;
    end else begin
      if (invDtype==0) then begin
        if (AddDay(invpers,-invDays)>RepSpec.d2) then begin goto LPasteCOInInv; end;
      end else begin
        if (invpers>RepSpec.d2) then begin goto LPasteCOInInv; end;
      end;
    end;            
    if (COp.perType==0) then begin
      invpere = AddMonth(invpers,perLength);
    end else begin
      invpere = AddDay(invpers,perLength);
    end;
    invpere = AddDay(invpere,-1);
    if (invDtype==0) then begin
      invdate = AddDay(invpers,-invDays); // invpers
    end else begin
      invdate = AddDay(invpers,invDays);
    end;
    coinvdate = invdate;
    if (lastInvDate>=invdate) then begin goto LSkip; end;
    if (nonblankdate(RepSpec.RegDate)) then begin 
      if (invdatesetf==false) then begin
        invdate = RepSpec.RegDate; 
        invdatesetf = true;
      end;
    end;    
    if (DateInRange(invdate,RepSpec.d1,RepSpec.d2)) then begin
      ivfoundf = false;
      if (nonblank(COp.InvoiceToCode)) then begin
        ivfoundf = FindCustIV(RepSpec,COp,invdate,invpers,invpere,detailinv,shortestline,IVp);
        res = ivfoundf;
      end;
      if (ivfoundf==false) then begin      
        if (MatRowCnt(IVp)==0) then begin
          MakeInvFromCO(RepSpec,COp,IVp,invdate,invpers,invpere,detailinv,-1,shortestline);
        end else begin
          MakeInvFromCO2(RepSpec,COp,IVp,invdate,invpers,invpere,false,detailinv,shortestline);
        end;
        res = true;
      end;
      SetLastInvoiceDate(COp,shortestline,coinvdate);
    end;
LSkip:;
    invpers = AddDay(invpere,1);
    goto LPasteCOInInvLoopBegin;
LPasteCOInInv:;
  end;
  PasteCOInInv = res;
  RETURN;
END;

updating function Integer  CUGroupInvCO(record RcVc RepSpec,var record CUVc CUp,var LongInt ivcnt,Boolean maintf)
BEGIN
  Integer err;
  record COVc COr;
  record COVc oldCOr;
  record IVVc IVr; 
  Boolean found,savef,testf;
  Integer rows;
  LongInt frco,toco,res;
  Integer error;
  Boolean firstf;
  string 100 keyname;
  Boolean convtoord;
  vector Boolean vconrf;
  
  convtoord = false;
  RecordNew(IVr);
  IVr.UpdStockFlag = 0;
  IVr.OrderNr = -1;
  IVr.SVONr = -1;
  IVr.SerNr = -1;
  if (nonblankdate(RepSpec.RegDate)) then begin
   IVr.InvDate = RepSpec.RegDate;
   IVr.TransDate = RepSpec.RegDate;
  end;
  if (blank(IVr.LangCode)) then begin
    IVr.LangCode = RepSpec.Language;
  end;
  firstf = true;
  frco = FirstInRange(RepSpec.f2,20);
  toco = LastInRange(RepSpec.f2,20);
  COr.InvoiceToCode = CUp.Code;
  keyname = "InvoiceToCode";
LCUGroupInvCOStart:;
  found = true;
  ResetLoop(COr);
  while (LoopKey(keyname,COr,1,found)) begin
    if (found) then begin
      if (firstf) then begin
        if (COr.InvoiceToCode!=CUp.Code) then begin found = false; end;
      end else begin
        if (COr.CustCode!=CUp.Code) then begin found = false; end;
      end;
    end;
    testf = true;
    if (found==false) then begin testf = false; end;
    if (blankdate(COr.startDate)) then begin testf = false; end;
    if (COr.OKFlag==0) then begin testf = false; end;    
    if (nonblankdate(COr.lastInvDate)) then begin
      if (COr.lastInvDate>RepSpec.d2) then begin testf = false; end;
    end;    
    if (nonblank(RepSpec.f2)) then begin
      if (COr.SerNr<frco) then begin testf = false; end;
      if (COr.SerNr>toco) then begin testf = false; end;
    end;    
    if (nonblank(RepSpec.f3)) then begin
      if (RepSpec.f3!=COr.ContractClass) then begin testf = false; end;
    end;    
    if (nonblank(IVr.CustCode)) then begin
      if (nonblank(COr.InvoiceToCode)) then begin
        if (COr.InvoiceToCode!=IVr.CustCode) then begin testf = false; end;
      end else begin
        if (COr.InvoiceToCode!=IVr.CustCode) then begin testf = false; end;
      end;
    end;
    if (vconrf[COr.SerNr & ":" & COr.ChildSerNr]) then begin testf = false; end;
    if (testf) then begin
      vconrf[COr.SerNr & ":" & COr.ChildSerNr] = true;
      rows = MatRowCnt(IVr);
      RecordCopy(oldCOr,COr);
      if (PasteCOInInv(RepSpec,COr,IVr,maintf)) then begin
        if (maintf) then begin
          err = LocSaveCreatedIV(RepSpec,IVr,COr,ivcnt);
          if (err!=0) then begin
            goto LCUGroupInvCO;
          end;
          CreateCOIV(COr,IVr);
          if (COr.CreateRegister!=0) then begin // If one is order, all becomes order.
            convtoord = true;
          end;
          SetCOInvOnceRows(COr,IVr.InvDate,IVr.SerNr);
          error = RecordUpdate(oldCOr,COr,true);
          if (error!=0) then begin
            InvCreateActivity(oldCOr,oldCOr.SerNr,USetStr(error),CurrentUser,CurrentCompany);            
          end;
        end;
      end;
    end;
  end;
  if (firstf) then begin
    firstf = false;
    COr.CustCode = CUp.Code;
    keyname = "CustCode";
    goto LCUGroupInvCOStart;
  end;
  if (convtoord) then begin
    res = ConvertIVToOR(IVr);
  end;
LCUGroupInvCO:;  
  CUGroupInvCO = err;
  RETURN;
END;

/*5.2*/
global
updating function Integer GroupInvoicingCO(record RcVc RepSpec,var LongInt ivcnt,Boolean maintf)
BEGIN
  record CUVc CuR;
  string 255 frcc,tocc;
  Boolean TrHs;
  Boolean testf;
  Integer res;
  
  frcc = FirstInRange(RepSpec.f1,20);
  tocc = LastInRange(RepSpec.f1,20);
  CuR.Code = frcc;
  TrHs = true;
  while (LoopMain(CuR,1,TrHs)) begin
    if (TrHs) then begin
      if (nonblank(tocc)) then begin
        if (CuR.Code>tocc) then begin
          TrHs = false;
        end;
      end;
    end;      
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.f4)) then begin
        if (CuR.CustCat!=RepSpec.f4) then begin testf = false; end;
      end;  
      if (CuR.OnHoldFlag!=0) then begin testf = false; end;
      if (CuR.blockedFlag!=0) then begin testf = false; end;
      if (CUr.CUType==0) then begin testf = false; end;
      if (testf) then begin
        res = CUGroupInvCO(RepSpec,CuR,ivcnt,maintf);
        if (res!=0) then begin
          goto LGroupInvoicingCO;
        end;
      end;
    end;
  end;  
LGroupInvoicingCO:;  
  GroupInvoicingCO = res;
  RETURN;
END;
