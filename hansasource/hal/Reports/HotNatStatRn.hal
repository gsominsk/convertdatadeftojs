external procedure HT2Per(Date, Date , var string);

procedure PrintCountry(record CountryVc Countryr,integer CountryCount)
begin
  StartFormat(15);
  OutString(0,0,Countryr.Code,false);
  OutString(100,0,Countryr.Comment,false);
  OutLongInt(300,0,CountryCount,true);
  EndFormat;
end;

procedure PrintRegion(record CountryRegionVc CountryRegionr,integer RegionCount,boolean PrintInDetail)
begin
  StartFormat(15);
  if not PrintInDetail then begin
    OutString(0,0,CountryRegionr.Code,false);
  end else begin
    Gray_Divider(100,300);
    OutString(0,0,USetStr(18447) & " " & CountryRegionr.Code,false);
  end;
  OutString(100,0,CountryRegionr.Comment,false);
  OutLongInt(300,0,RegionCount,true);
  EndFormat;
end;

procedure GetRegionRecord(string RegionCode,var record CountryRegionVc CountryRegionr)
begin
  CountryRegionr.Code = RegionCode;
  ReadFirstMain(CountryRegionr,1,true);
end;

procedure GetCountryRecord(string CountryCode,var record CountryVc Countryr)
begin
  Countryr.Code = CountryCode;
  ReadFirstMain(Countryr,1,true);
end;

global
procedure HotNatStatRn(record RcVc RepSpec)
begin
  Integer rw,CountryCnt,TotalGuestCnt,TotRegionCnt;
  string 255 tstr;
  record CountryRegionVc CountryRegionr, LastRegionr;
  record CountryVc Countryr, LastCountryr;
  record GuestrsVc Guestrsr;
  Boolean found,foundguest;
  string 255 index;
  
  StartReportJob(USetStr(18440));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  switch (RepSpec.flags[0]) begin
    case 0: tstr = USetStr(18441);
    case 1: tstr = USetStr(18442);
    case 2: tstr = USetStr(18443);
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;
  TotalGuestCnt = 0;
  StartFormat(15);
   OutString(0,0,USetStr(18444),false);
   OutString(100,0,USetStr(18445),false);
   OutString(300,0,USetStr(18446),true);
  EndFormat;
  Gray_Divider(0,1);
  switch (RepSpec.flags[0]) begin
    case 0: index = "Code";
    case 1: index = "Region";
    case 2: index = "Region";
  end;
  found = true;
  while (LoopKey(index,Countryr,1,found)) begin
    if (found) then begin
      if blank(LastRegionr.Code) then begin
        GetRegionRecord(Countryr.Region,LastRegionr);
      end;
      ResetLoop(Guestrsr);
      CountryCnt = 0;
      foundguest = true;
      Guestrsr.CountryCode = Countryr.Code;
      Guestrsr.TransDate = RepSpec.sStartDate;
      while (LoopKey("CountryCode",Guestrsr,2,foundguest)) begin
        if (Guestrsr.CountryCode!=Countryr.Code) then begin
          foundguest = false;
        end;
        if (Guestrsr.TransDate>RepSpec.sEndDate) then begin
          foundguest = false;
        end;
        if (foundguest) then begin
          CountryCnt = CountryCnt + 1;
        end;
      end;
      if (CountryCnt>0) then begin
        switch (RepSpec.flags[0]) begin
          case 0:
            PrintCountry(Countryr,CountryCnt);
          case 1:
            if (LastRegionr.Code!=Countryr.Region) then begin
              PrintRegion(LastRegionr,TotRegionCnt,false);
              TotRegionCnt = 0;
            end;
            TotRegionCnt = TotRegionCnt + CountryCnt;
          case 2:
            if (LastRegionr.Code!=Countryr.Region) then begin
              PrintRegion(LastRegionr,TotRegionCnt,true);
              PrintCountry(Countryr,CountryCnt);
              TotRegionCnt = 0;
            end else begin
              PrintCountry(Countryr,CountryCnt);
            end;
            TotRegionCnt = TotRegionCnt + CountryCnt;
        end;
        TotalGuestCnt = TotalGuestCnt + CountryCnt;
            end;
      if (LastRegionr.Code <> Countryr.Region) then begin
        GetRegionRecord(Countryr.Region,LastRegionr);
        end;
      end;
  end;
  if TotRegionCnt>0 then begin
    switch (RepSpec.flags[0]) begin
      case 1:
        PrintRegion(LastRegionr,TotRegionCnt,false);
      case 2:
        PrintRegion(LastRegionr,TotRegionCnt,true);
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
   OutString(100,0,USetStr(18447),false);
   OutLongInt(300,0,TotalGuestCnt,true);
  EndFormat;
  EndJob;
  return;
end;