external function val FindVAT(string,val,Integer,Integer);
external function val FindRentQTSumRent(record RentQTVc);
external function val FindRentQTSumCharge(record RentQTVc);
external function val FindRentQTSumChargePlain(record RentQTVc);
external function val FindRentQTSumService(record RentQTVc);

procedure PrintRentQTDetPriceHead()
begin
  StartFormat(15);
  OutString(0,0,USetStr(2682),false);
  OutString(2,0,USetStr(12875),false);
  OutString(4,0,USetStr(12876),false);
  OutString(5,0,USetStr(12877),false);
  OutString(1,0,USetStr(12886),true);
  EndFormat;
  Gray_Divider(0,1);
  return;
end;

global
procedure PrintRentQTDetPriceDetail(record RentQTVc RentQTr)
begin
  Row  RentQTVc RentQTrw;
  Integer i,rwcnt;
  val t;

  StartFormat(15);
  OutLongInt(0,"DblRentQT",RentQTr.SerNr,false);
  OutString(2,0,RentQTr.CustCode,false);
  OutString(3,0,RentQTr.Addr0,false);
  OutDate(4,0,RentQTr.startDate,false);
  OutDate(5,0,RentQTr.endDate,false);
  OutString(1,0,RentQTr.AgreeType,true);
  EndFormat;
  if (nonblank(RentQTr.DealerCode)) then begin
    StartFormat(15);
    OutString(2,0,RentQTr.DealerCode,false);
    OutString(3,0,RentQTr.DealerName,false);
    EndFormat;
  end;
  StartFormat(15);
  EndFormat;
  rwcnt = MatRowCnt(RentQTr);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(RentQTr,i,RentQTrw);
    if (nonblank(RentQTrw.ArtCode)) then begin
      StartFormat(15);
      OutStringID(20,"DblAdvPrRentQT",RentQTrw.ArtCode,false,"" & RentQTr.SerNr & ":" & i);
      OutVal(100,0,RentQTrw.Quant,M4UVal,true);
      OutString(106,0,RentQTrw.Spec,false);
      OutString(340,0,RentQTrw.Price,true);
      OutVal(360,0,RentQTrw.vRebate,M41Val,true);
      t = RentQTrw.Sum - FindVAT(RentQTrw.VATCode,RentQTrw.Sum,RentQTr.InclVAT,0);
      if (t==0) then begin
        t = BlankVal;
      end;
      OutVal(9,0,t,M4Val,true);
      OutString(1,0,RentQTrw.VATCode,true);
      EndFormat;      
    end;
  end;     
  Gray_Divider(8,460);
  t = FindRentQTSumRent(RentQTr);
  if (t!=0) then begin
    StartFormat(15);
    OutString(8,0,USetStr(12883),false);
    OutVal(9,0,t,M4Val,true);
    EndFormat;
  end;
  t = FindRentQTSumCharge(RentQTr);
  if (t!=0) then begin
    StartFormat(15);
    OutString(8,0,USetStr(12884),false);
    OutVal(9,0,t,M4Val,true);
    EndFormat;
  end;
  t = FindRentQTSumChargePlain(RentQTr);
  if (t!=0) then begin
    StartFormat(15);
    OutString(8,0,USetStr(12889),false);
    OutVal(9,0,t,M4Val,true);
    EndFormat;
  end;
  t = FindRentQTSumService(RentQTr);
  if (t!=0) then begin
    StartFormat(15);
    OutString(8,0,USetStr(12885),false);
    OutVal(9,0,t,M4Val,true);
    EndFormat;
  end;
  StartFormat(15);
  OutString(8,0,USetStr(12881),false);
  OutVal(9,0,RentQTr.Sum3,M4Val,true);
  EndFormat;
  StartFormat(15);
  OutString(8,0,USetStr(12880),false);
  OutVal(9,0,RentQTr.Sum4,M4Val,true);
  EndFormat;
  return;
end;

global
procedure RentQTAdvPricesRn(record RcVc RepSpec)
BEGIN
  record RentQTVc RentQTr;
  Boolean TrHs;
  LongInt afr,ato;

  afr = FirstInRange(RepSpec.f1,10);
  ato = LastInRange(RepSpec.f1,10);
  StartReportJob(USetStr(11295));
  EndHeader;
  SetRepCol(2,80);
  SetRepCol(3,140);
  SetRepCol(4,300);
  SetRepCol(5,370);
  SetRepCol(8,300);
  SetRepCol(9,460);
  TrHs = true;
  RentQTr.SerNr = afr;
  while (LoopMain(RentQTr,1,TrHs)) begin
    if ((ato!=-1) and (RentQTr.SerNr>ato)) then begin 
      TrHs = false;
    end;
    if (TrHs) then begin
      PrintRentQTDetPriceHead;
      PrintRentQTDetPriceDetail(RentQTr);
    end;
  end;
  EndJob;
  RETURN;
END;