external procedure HTArtGroup(string, var string);
external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean ItemInItemGroupOrClass(string,string,string);
external procedure GetStockValue(string,string,var record ItemStatusVc);
external procedure HTArtSel(string ,string ,var string);

procedure FindHistory(string item, string st1, string st2, date fromd, var val df)
begin
record ORVc ORr;
row ORVc ORrw;
integer i,rwcnt;
boolean TrHs,found;
val ord1,ord2,sdf;
ord1 = 0;
ord2 = 0;
sdf = 0;

ResetLoop(ORr);
TrHs = true;

ORr.OrdDate = fromd;
while LoopKey("OrdDate",ORr,1,TrHs) begin
    found = true;
  if ORr.ShipFlag == 1 then begin found = false; end;
    //if ORr.Reserved == 1 then begin found = false; end;  
    if ORr.Closed == 1 then begin found = false; end;  
    if found and ((ORr.Location == st1) or (ORr.Location == st2)) then begin 
       rwcnt = MatRowCnt(ORr);
       for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(ORr,i,ORrw);
          if (item == ORrw.ArtCode) then begin
            if (ORr.Location == st1) then begin
                ord1 = ord1 + ORrw.Quant;
                if ord1 >= df then begin
                   df = ord1;
                   goto L99;
                end else begin
                   df = df - ORrw.Quant;
                end;
            end;
            if (ORr.Location == st2) then begin
                ord2 = ord2 + ORrw.Quant;
                if ord2 >= df then begin
                  df = ord1;
          goto L99;
                end else begin
                  df = df - ORrw.Quant;
                end;
            end;
         end;
        end;
    end;
end;
L99:;
df = ord1;
return;
end; 
      
procedure OutSimple(val f1,val f2,val af2,var val toship )
begin
if  f2 < 0 then begin 
  if f1 >0 then begin
    if f1 > af2 then begin 
       toship = af2;
  end else begin
     toship = f1;
    end;
  end;
end; 
return;
end;

global
procedure StDifRn(record RcVc RepSpec)
begin
  Record INVc INr;
  Record ItemStatusVc ISr;
  Boolean TrHs,found;
  string 50 fromart,toart;
  string 5 frcc,tocc;
  string 255 tstr;
  Integer rw;
  val stock1,stock2,order1,order2,free1,free2,absfree2,dif;
  val to1,to2,ts1,ts2,totship,totable;

  fromart = FirstInRange(RepSpec.f1,50);
  toart   = LastInRange(RepSpec.f1,50);
  frcc = FirstInRange(RepSpec.f3,5);
  tocc = LastInRange(RepSpec.f3,5);

  StartReportJob(USetStr(10910));
  rw = 1;
  if nonblank(RepSpec.f1) or nonblank(RepSpec.f3) then begin
    HTArtSel(RepSpec.f1,RepSpec.f3,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end; 
  if (HasItemGroups and blank(RepSpec.f3)) then begin
    HTArtGroup(RepSpec.f3,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasItemClassification) then begin
    HTItemClass(RepSpec.f4,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;  
  if nonblank(RepSpec.AccStr) then begin /* location */
    tstr = "1 " & USetStr(2768) & ": ";
    tstr = tstr & RepSpec.AccStr;
    Header(rw,tstr,1);
    rw = rw +1;
  end;

  if nonblank(RepSpec.LastAcc) then begin /* location */
    tstr = "2 " & USetStr(2768) & ": ";
    tstr = tstr & RepSpec.LastAcc;
    Header(rw,tstr,1);
    rw = rw +1;
  end;
  if (RepSpec.flags[1]==1) then begin 
    tstr = " " & USetStr(10911) & " ";
    Header(rw,tstr,1);
    rw = rw +1;
  end;
  EndHeader;

  SetRepCol(2,85);
  SetRepColBiDi(3,280,320);
  SetRepColBiDi(4,320,360);
  SetRepColBiDi(5,360,400);
  SetRepColBiDi(6,400,440);
  SetRepColBiDi(7,440,480);
  SetRepColBiDi(8,480,515);

  StartFormat(15);
  OutString(0,0,USetStr(2762),false);
  OutString(2,0,USetStr(2763),false);
  OutStringAdjust(3,0," " & USetStr(10912),true,M4Val);
  OutStringAdjust(4,0,USetStr(10913),true,M4Val);
  OutStringAdjust(5,0," " & USetStr(10914),true,M4Val);
  OutStringAdjust(6,0,USetStr(10915),true,M4Val);
  OutStringAdjust(7,0,"1->2",true,M4Val);
  OutStringAdjust(8,0,USetStr(10916),true,M4Val);
  EndFormat;
  Gray_Divider(0,1);
  to1 = 0;
  to2 = 0;
  ts1 = 0;
  ts2 = 0;
  totship = 0;
  totable = 0;
  TrHs = true;
  INr.Code = fromart;
  while (LoopMain(INr,1,TrHs)) begin
    found = true;
    if (nonblank(RepSpec.f3)) then begin
      if ((INr.Group<frcc) or (INr.Group>tocc)) then begin
        found = false;
      end;
    end;
    if nonblank(RepSpec.f1) then begin
      if (nonblank(toart)) then begin
        if INr.Code>toart then begin
           found = false;
          TrHs = false;
        end;
      end;
    end;
    if (found) then begin
      found = ItemInItemGroupOrClass(INr.Code,RepSpec.f3,RepSpec.f4);
    end;    
    if (INr.Terminated==1) then begin
      found = false;
    end;
    if (found) then begin
      if (INr.ItemType==1) then begin
        GETSTOCKVALUE(INr.Code,RepSpec.AccStr,ISr);
        stock1 = ISr.Instock;
        //order1 = ISr. RsrvQty;
        order1 = ISr.OrddOut;
        GETSTOCKVALUE(INr.Code,RepSpec.LastAcc,ISr);
        stock2 = ISr.Instock;
        order2 = ISr.OrddOut;
   
        free1 = stock1 - order1;
        free2 = stock2 - order2;
        absfree2 = 0 - free2;
      
        dif = 0;
        if (order2<>0) then begin
          if RepSpec.flags[1] == 0 then begin
            OutSimple(free1,free2,absfree2,dif); 
          end;
          // Sales Order History
          if (RepSpec.flags[1]==1) then begin
            if (order2==0) or (order1==0) or (free2>=0) then begin 
              OutSimple(free1,free2,absfree2,dif); 
            end else begin
              if free1 >= absfree2 then begin 
                OutSimple(free1,free2,absfree2,dif);
              end else begin
                if (stock1<>0) then begin
                  if (stock1 >= absfree2) then begin
                    dif = absfree2;
                  end else begin
                    dif = absfree2 - stock1;
                    FindHistory(INr.Code,RepSpec.AccStr,RepSpec.LastAcc,RepSpec.d1,dif);
                    dif = dif + stock1;
                  end;
                end;
              end;
            end;
          end;
        end; 
        if ((dif<>0) and (RepSpec.flags[2]==1)) or (RepSpec.flags[2]==0) then begin
          StartFormat(15);
          OutString(0,0,INr.Code,false);
          OutString(2,0,INr.Name,false);
          if (order1<>0) then begin 
            OutVal(3,0,order1,M4Val,true); 
            to1 = to1 + order1;
          end;
          if (stock1<>0) then begin 
            OutVal(4,0,stock1,M4Val,true);
            ts1 = ts1 + stock1;
          end;
          if (order2<>0) then begin 
            OutVal(5,0,order2,M4Val,true);
            to2 = to2 + order2; 
          end;
          if (stock2<>0) then begin 
            OutVal(6,0,stock2,M4Val,true);
            ts2 = ts2 + stock2; 
          end;
          if (dif<>0) then begin 
            OutVal(7,0,dif,M4Val,true); 
            totship = totship + dif;
          end;
          if (free1<>0)  then begin 
            OutVal(8,0,free1,M4Val,true);
            totable = totable + free1; 
          end;
          EndFormat;
        end;
      end; 
    end;
  end;
  Gray_Divider(0,1);
  OutString(0,0,"  " & USetStr(10917) & " ",false);
  OutVal(3,0,to1,M4Val,true);
  OutVal(4,0,ts1,M4Val,true);
  OutVal(5,0,to2,M4Val,true);
  OutVal(6,0,ts2,M4Val,true);
  OutVal(7,0,totship,M4Val,true);
  OutVal(8,0,totable,M4Val,true);
  EndJob;
  return;
end;
