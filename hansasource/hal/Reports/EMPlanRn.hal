external function roundmode SetRoundModeD(Integer);

/* Is just support functions for Employee Statistics now */
external function LongInt DateDiff(Date,Date);

Function
val FindTargHours(val diff,LongInt days,val hours)
begin
  val vhours,vdays;
  val localdiff;
  val res;
  
  vhours = hours;
  vdays = days;
  res = BlankVal;
  if ((days>0) and (hours>0)) then begin
    localdiff = diff;
    while (localdiff>vdays) begin
      res = res + vhours;
      localdiff = localdiff - vdays;
    end;
    if (localdiff>0) then begin
      res = res + ((vhours / vdays) * localdiff);
      res = Round(res,SetRoundModeD(2));//
//      res = Round(res+49999.00/100000.00,0);// I find it odd
    end;
  end;
  FindTargHours = res;
  return;
end;

procedure FindTargetBefore(var record TargTimeVc TTp,string person,Date sStartDate,Date sEndDate,var Boolean befexists)
begin
  record TargTimeVc TargTimer;
  Boolean TrHs;
  
  befexists = false;
  TrHs = true;
  TargTimer.Person = person;
  while (LoopMain(TargTimer,1,TrHs)) begin
    if (TargTimer.Person!=person) then begin TrHs = false; end;
    if (TrHs) then begin
      if (TargTimer.StartDate<=sStartDate) then begin
        RecordCopy(TTp,TargTimer);
        befexists = true;
      end else begin
        TrHs = false;
      end;
    end;
  end;
  return;
end;

procedure FindTargetLast(var record TargTimeVc TTp,string person,Date sStartDate,Date sEndDate,var Boolean lastexists)
begin
  record TargTimeVc TargTimer;
  Boolean TrHs;
  
  lastexists = false;
  TrHs = true;
  TargTimer.Person = person;
  while (LoopMain(TargTimer,1,TrHs)) begin
    if (TargTimer.Person!=person) then begin TrHs = false; end;
    if (TrHs) then begin
      if (TargTimer.StartDate>sEndDate) then begin
        TrHs = false;
      end else begin
        if (TargTimer.StartDate>=sStartDate) then begin
          RecordCopy(TTp,TargTimer);
          lastexists = true;
        end;
      end;
    end;
  end;
  return;
end;

Function
val AddupTargetTypes(val diff,record TargTimeVc TTp,string type,string actgroup,Boolean addblanks)
begin
  row TargTimeVc TargTimerw;
  record ActTypeVc ATr;  
  val res;
  Integer i,rwcnt;
  Boolean testf;

  res = 0;
  rwcnt = MatRowCnt(TTp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TTp,i,TargTimerw);
    testf = false;
    if (nonblank(actgroup)) then begin
      ATr.Code = TargTimerw.ActType;
      if (ReadFirstMain(ATr,1,true)) then begin
        if (ATr.ActTypeGr==actgroup) then begin 
          testf = true;
        end;
      end;
    end else begin
      if (nonblank(type)) then begin
        if (TargTimerw.ActType==type) then begin
          testf = true;
        end;
      end else begin
        if (addblanks) then begin
          testf = true;
        end;
      end;
    end;    
    if (testf) then begin
      res = res + FindTargHours(diff,TargTimerw.Days,TargTimerw.Hours);
    end;
  end;
  AddupTargetTypes = res;
  return;
end;

global
function val AddUpTargetFirst(record TargTimeVc TTp,Boolean befexists,Boolean lastexists,Date firstdat,Date startdat,Date enddat,Date targenddat,string type,string actgroup,Boolean addblanks)
begin
  val res,diff;
  
  res = 0;
  diff = 0;
  if (befexists) then begin
    if (NonBlankDate(firstdat)) then begin
      diff = DateDiff(firstdat,startdat);
    end else begin
      if (lastexists) then begin
        diff = DateDiff(targenddat,startdat);
      end else begin
        diff = DateDiff(AddDay(enddat,1),startdat);
      end;
    end;
    res = AddupTargetTypes(diff,TTp,type,actgroup,addblanks);
  end;
  AddUpTargetFirst = res;
  return;
end;

Function
val AddUpTargetLast(record TargTimeVc TTp,Boolean lastexists,Date enddat,string type,string actgroup,Boolean addblanks)
begin
  val res,diff;
  
  res = 0;
  if (lastexists) then begin
    diff = DateDiff(AddDay(enddat,1),TTp.StartDate);
    res = AddupTargetTypes(diff,TTp,type,actgroup,addblanks);
  end;
  AddUpTargetLast = res;
  return;
end;

Function
val AddAllOtherTargets(string person,record RcVc RepSpec,Date befdate,Boolean befexists,Date aftdate,Boolean lastexists,var Date firstdat,string type,string actgroup,Boolean addblanks)
begin
  record TargTimeVc TargTimer;
  record TargTimeVc TargTimeTempr;
  row TargTimeVc TargTimerw;
  Integer i,rwcnt;
  Boolean TrHs;
  val coef,diff,t;
  val res;

  res = blankval;
  TrHs = true;
  TargTimer.Person = person;
  if (befexists) then begin
    TargTimer.StartDate = AddDay(befdate,1);
  end;
  while (LoopMain(TargTimer,2,TrHs)) begin
    if (TargTimer.Person!=person) then begin
      TrHs = false;
    end;
    if (lastexists) then begin
      if (TargTimer.StartDate==aftdate) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      if (DateInRange(TargTimer.StartDate,RepSpec.sStartDate,RepSpec.sEndDate)) then begin
        if (BlankDate(firstdat)) then begin
          firstdat = TargTimer.StartDate;
        end;
        RecordCopy(TargTimeTempr,TargTimer);
        if (lastexists) then begin
          diff = DateDiff(aftdate,TargTimeTempr.StartDate);
        end else begin
          diff = DateDiff(RepSpec.sEndDate,TargTimeTempr.StartDate);
        end;
        if (LoopMain(TargTimer,1,TrHs)) then begin
          if (TargTimer.Person==person) then begin
            if (DateInRange(TargTimer.StartDate,RepSpec.sStartDate,RepSpec.sEndDate)) then begin
              diff = DateDiff(TargTimer.StartDate,TargTimeTempr.StartDate);
            end;
          end;
          StepBack(TargTimer);
        end;
        res = res + AddupTargetTypes(diff,TargTimeTempr,type,actgroup,addblanks);
      end;
    end;  
  end;
  AddAllOtherTargets = res;
  return;
end;

global
procedure FindTargetTimeOverView(record RcVc RepSpec,string person,var val res,string frtyp,string totyp,string actgroup)
BEGIN
  record TargTimeVc TargTime2r;
  record TargTimeVc TargTime3r;
  Boolean befexists,lastexists;
  Date firstdat;
    
  FindTargetBefore(TargTime2r,person,RepSpec.sStartDate,RepSpec.sEndDate,befexists);
  FindTargetLast(TargTime3r,person,RepSpec.sStartDate,RepSpec.sEndDate,lastexists);
  res = AddAllOtherTargets(person,RepSpec,TargTime2r.StartDate,befexists,TargTime3r.StartDate,lastexists,firstdat,frtyp,actgroup,true);
  res = res + AddUpTargetFirst(TargTime2r,befexists,lastexists,firstdat,RepSpec.sStartDate,RepSpec.sEndDate,TargTime3r.StartDate,frtyp,actgroup,true);
  res = res + AddUpTargetLast(TargTime3r,lastexists,RepSpec.sEndDate,frtyp,actgroup,true);
  RETURN;
END;

global
procedure FindTargetTimeForType(record RcVc RepSpec,string person,string type,string actgrop,var val res)
BEGIN
  record TargTimeVc TargTime2r;
  record TargTimeVc TargTime3r;
  Boolean befexists,lastexists;
  Date firstdat;
    
  FindTargetBefore(TargTime2r,person,RepSpec.sStartDate,RepSpec.sEndDate,befexists);
  FindTargetLast(TargTime3r,person,RepSpec.sStartDate,RepSpec.sEndDate,lastexists);
  res = AddAllOtherTargets(person,RepSpec,TargTime2r.StartDate,befexists,TargTime3r.StartDate,lastexists,firstdat,type,actgrop,false);
  res = res + AddUpTargetFirst(TargTime2r,befexists,lastexists,firstdat,RepSpec.sStartDate,RepSpec.sEndDate,TargTime3r.StartDate,type,actgrop,false);
  res = res + AddUpTargetLast(TargTime3r,lastexists,RepSpec.sEndDate,type,actgrop,false);
  RETURN;
END;
