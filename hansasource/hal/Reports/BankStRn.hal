external procedure GetBaseCurncy(Integer,var string);
external procedure GetAccStartBalance(string,string,Date,record ObjBalVc,Integer,Integer,string,Integer,var val);
external procedure ToStrTRCode(var string,Integer,LongInt);
external function Boolean GetAccName(string,var string,Integer);
external procedure HT2Per(Date, Date , var string);
external function val MulWithRateToBase1(var string,Date,val,roundmode);

procedure PrintHeaderRow(string dblstr,string nr,Integer type,Date td,string comment,string refstr)
begin
  Gray_Divider(0,1);
  StartFormat(15);
   OutString(0,dblstr,nr,false);
   OutString(80,0,USetStr(16490+type),false);
   OutDate(160,0,td,false);
   OutString(240,0,comment,false);
   OutString(370,0,refstr,false);   
  EndFormat;  
  Gray_Divider(0,1);
  return;
end;
  
procedure PrintRow(string description,string refstr,val v,Boolean debf,var val bal)
begin  
  StartFormat(15);
   OutString(15,0,Left(description,25),false);
   OutString(190,0,Left(refstr,25),false);
   if (debf) then begin
     OutString(370,0,v,true);
     bal = bal + v;
   end else begin   
     OutString(420,0,v,true);
     bal = bal - v;
   end;
   OutString(480,0,bal,true);
  EndFormat;
  return;
end;

procedure PrintPayments(record RcVc RepSpec,string pmcode,var val totcred,var val bal)
begin
  record OPVc OPr;
  row OPVc OPrw;
  Integer i,rwcnt;
  Boolean found,testf,payheaderf;
  string 255 ckey,paymode;
  val v;
  
  found = true;
  ckey = "PayMode:" & pmcode;
  OPr.TransDate = RepSpec.sStartDate;
  while (LoopKey(ckey,OPr,1,found)) begin
    if (DateInRange(OPr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (OPr.DoneFlag==0) then begin
        if (RepSpec.flags[1]==0) then begin
          testf = false;
        end;
      end;
      if (OPr.DoneFlag!=0) then begin
        if (RepSpec.flags[2]==0) then begin
          testf = false;
        end;
      end;
      if (OPr.Invalid!=0) then begin testf = false; end;
      if (testf) then begin
        payheaderf = false;
        rwcnt = MatRowCnt(OPr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(OPr,i,OPrw);
          paymode = OPrw.PayMode;
          if (blank(paymode)) then begin
            paymode = OPr.PayMode;
          end;
          if (paymode==pmcode) then begin
            if (OPrw.stp!=5) and (OPrw.ovst==0) then begin 
              if (payheaderf==false) then begin
                PrintHeaderRow("DblOPVc",OPr.SerNr,0,OPr.TransDate,OPr.BankName,OPr.PayNumber);
                payheaderf = true;
              end;
              v = MulWithRateToBase1(OPrw.BankCurncy,OPr.TransDate,OPrw.BankVal,DefaultCurRoundOff);
              PrintRow(OPrw.Comment,OPrw.rkPayNumber,v,false,bal);
              totcred = totcred + v;
            end;  
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure PrintReceipts(record RcVc RepSpec,string pmcode,var val totdeb,var val totcred,var val bal)
begin
  record IPVc IPr;
  row IPVc IPrw;
  Integer i,rwcnt;
  Boolean found,testf,recheaderf;
  string 255 ckey,paymode;  
  val v;
  
  found = true;
  ckey = "PayMode:" & pmcode;
  IPr.TransDate = RepSpec.sStartDate;
  while (LoopKey(ckey,IPr,1,found)) begin
    if (DateInRange(IPr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (IPr.OKFlag==0) then begin
        if (RepSpec.flags[1]==0) then begin
          testf = false;
        end;
      end;
      if (IPr.OKFlag!=0) then begin
        if (RepSpec.flags[2]==0) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        recheaderf = false;
        rwcnt = MatRowCnt(IPr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IPr,i,IPrw);
          paymode = IPrw.PayMode;
          if (blank(paymode)) then begin
            paymode = IPr.PayMode;
          end;
          if (paymode==pmcode) then begin
            if (recheaderf==false) then begin
              PrintHeaderRow("DblIPVc",IPr.SerNr,1,IPr.TransDate,IPr.Comment,IPr.RecNumber);
              recheaderf = true;
            end;
            v = MulWithRateToBase1(IPrw.BankCurncy,IPr.TransDate,IPrw.BankVal,DefaultCurRoundOff);
            if (IPrw.stp==1) then begin 
              PrintRow(IPrw.CustName,IPrw.rkRecNumber,v,true,bal);
              totdeb = totdeb + v;
            end;  
            if (IPrw.stp==7) then begin 
              PrintRow(IPrw.CustName,IPrw.rkRecNumber,v,false,bal);
              totcred = totcred + v;
            end; 
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure PrintPPayments(record RcVc RepSpec,string pmcode,var val totcred,var val bal)
begin
  record PPVc PPr;
  row PPVc PPrw;
  Integer i,rwcnt;
  Boolean found,testf,ppayheaderf;
  string 255 ckey,paymode;
  val v;
  
  found = true;
  ckey = "PayMode:" & pmcode;
  PPr.TransDate = RepSpec.sStartDate;
  while (LoopKey(ckey,PPr,1,found)) begin
    if (DateInRange(PPr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (PPr.DoneFlag==0) then begin
        if (RepSpec.flags[1]==0) then begin
          testf = false;
        end;
      end;
      if (PPr.DoneFlag!=0) then begin
        if (RepSpec.flags[2]==0) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        ppayheaderf = false;
        rwcnt = MatRowCnt(PPr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(PPr,i,PPrw);
          paymode = PPrw.PayMode;
          if (blank(paymode)) then begin
            paymode = PPr.PayMode;
          end;
          if (paymode==pmcode) then begin
            if (ppayheaderf==false) then begin
              PrintHeaderRow("DblPPVc",PPr.SerNr,2,PPr.TransDate,PPr.BankName,"");
              ppayheaderf = true;
            end;
            v = MulWithRateToBase1(PPr.CurncyCode,PPr.TransDate,PPrw.PayVal,DefaultCurRoundOff);
            PrintRow(PPrw.Comment,PPrw.rkPayNumber,v,false,bal);
            totcred = totcred + v;
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure GetDebCred(string accnr,row TRVc TRrw,var val dv,var val cv)
begin
  record AccVc Accr;
  string 10 basecur2;
  
  dv = TRrw.DebVal;
  cv = TRrw.CredVal;
  Accr.AccNumber = accnr;
  if (ReadFirstMain(Accr,1,true)) then begin
    if (nonblank(Accr.Curncy)) then begin
      GetBaseCurncy(2,basecur2);
      if (Accr.Curncy==basecur2) then begin
        dv = TRrw.DebVal2;
        cv = TRrw.CredVal2;
      end;
      if (Accr.Curncy==TRrw.Curncy) then begin
        dv = TRrw.CurDebVal;
        cv = TRrw.CurCredVal;
      end;
    end;
  end;
  return;
end;

/*
removed AccNumber index from TRVc
procedure PrintTransactions(record RcVc RepSpec,var val totdeb,var val totcred,var val bal)
begin
  record TRVc TRr;
  row TRVc TRrw;
  Integer i,rwcnt;
  Boolean found,testf,debf,trheaderf;
  string 255 ckey,tstr;
  val dv,cv,v;
  
  found = true;
  ckey = "AccNumber:" & RepSpec.AccStr;
  TRr.TransDate = RepSpec.sStartDate;
  while (LoopKey(ckey,TRr,1,found)) begin
    if (DateInRange(TRr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (TRr.IntYc>=IVYc) then begin testf = false; end;
      if (testf) then begin
        trheaderf = false;
        rwcnt = MatRowCnt(TRr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(TRr,i,TRrw);
          if (TRrw.AccNumber==RepSpec.AccStr) then begin
            if (trheaderf==false) then begin
              ToStrTRCode(tstr,TRr.IntYc,TRr.Number);
              PrintHeaderRow("DblTrans",tstr,3,TRr.TransDate,TRr.Comment,TRr.RefStr);
              trheaderf = true;
            end;
            GetDebCred(RepSpec.AccStr,TRrw,dv,cv);
            if (dv>0) then begin
              v = dv;
              debf = true;
              totdeb = totdeb + v;
            end;
            if (cv>0) then begin
              v = cv;
              debf = false;
              totcred = totcred + v;
            end;
            PrintRow(TRrw.Comment,"",v,debf,bal);
          end;
        end;
      end;
    end;
  end;
  return;
end;
*/

procedure PrintTransactions(record RcVc RepSpec,var val totdeb,var val totcred,var val bal)
begin
  record TRVc TRr;
  row TRVc TRrw;
  Integer i,rwcnt;
  Boolean found,testf,debf,trheaderf;
  string 255 ckey,tstr;
  val dv,cv,v;
  record MainVc mainr;
  
  found = true;
  mainr.AccNumber = RepSpec.AccStr;
  mainr.TransDate = RepSpec.sStartDate;
  while (LoopMain(mainr,2,found)) begin
    if (mainr.AccNumber!=RepSpec.AccStr) then begin
      found = false;
    end;
    if (DateInRange(TRr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
      found = false;
    end;
    if (found) then begin
      if (mainr.FileName=="TRVc") and (TRr.IntYc<IVYc) then begin
        TRr.Number = mainr.TransNr;
        TRr.IntYc = mainr.IntYc;
        if (ReadFirstMain(TRr,2,true)) then begin
          if (mainr.TransDate==TRr.TransDate) then begin
            trheaderf = false;
            rwcnt = MatRowCnt(TRr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(TRr,i,TRrw);
              if (TRrw.AccNumber==RepSpec.AccStr) then begin
                if (trheaderf==false) then begin
                  ToStrTRCode(tstr,TRr.IntYc,TRr.Number);
                  PrintHeaderRow("DblTrans",tstr,3,TRr.TransDate,TRr.Comment,TRr.RefStr);
                  trheaderf = true;
                end;
                GetDebCred(RepSpec.AccStr,TRrw,dv,cv);
                if (dv>0) then begin
                  v = dv;
                  debf = true;
                  totdeb = totdeb + v;
                end;
                if (cv>0) then begin
                  v = cv;
                  debf = false;
                  totcred = totcred + v;
                end;
                PrintRow(TRrw.Comment,"",v,debf,bal);
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

global
procedure BankStRn(record RcVc RepSpec)
begin
  string 255 tstr;
  Integer rw;
  record PMBlock PMb;
  row PMBlock PMbrw;
  Integer i,rwcnt;
  val bal;
  Boolean accheaderf;
  val totdeb,totcred;
  record ObjBalVc ObjBalr;
  
  StartReportJob(USetStr(16480));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;
  if (blank(RepSpec.AccStr)) then begin
    goto LBankStRn;
  end;
  StartFormat(15);
   OutString(0,0,USetStr(16481),false);
   OutString(80,0,USetStr(16482),false);
   OutString(160,0,USetStr(16483),false);
   OutString(240,0,USetStr(16484),false);
   OutString(370,0,USetStr(16485),false);   
  EndFormat;
  Gray_Divider(0,1);
  StartFormat(15);
   OutString(15,0,USetStr(16486),false);
   OutString(190,0,USetStr(16485),false);
   OutString(370,0,USetStr(16487),true);
   OutString(420,0,USetStr(16488),true);
   OutString(480,0,USetStr(16489),true);
  EndFormat;
  BlockLoad(PMb);
  rwcnt = MatRowCnt(PMb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PMb,i,PMbrw);
    if (PMbrw.AccNr==RepSpec.AccStr) then begin
      if (accheaderf==false) then begin
        if (GetAccName(PMbrw.AccNr,tstr,60)==false) then begin end;        
        ObjBalr.AccNumber = PMbrw.AccNr;
        ObjBalr.Object = "";    
        if (ReadFirstMain(ObjBalr,2,true)) then begin end;
        GetAccStartBalance(PMbrw.AccNr,"",RepSpec.sStartDate,ObjBalr,0,0,"",0,bal);
        StartFormat(15);
         OutString(0,0,PMbrw.AccNr,false);
         OutString(100,0,tstr,false);
         OutVal(480,0,bal,M4Val,true);
        EndFormat;
        accheaderf = true;
      end;
      PrintPayments(RepSpec,PMbrw.Code,totcred,bal);
      PrintReceipts(RepSpec,PMbrw.Code,totdeb,totcred,bal);
      PrintPPayments(RepSpec,PMbrw.Code,totcred,bal);
    end;
  end;
  PrintTransactions(RepSpec,totdeb,totcred,bal);
  Gray_Divider(0,1);
  StartFormat(15);
   OutVal(370,0,totdeb,M4Val,true);
   OutVal(420,0,totcred,M4Val,true);
   OutVal(480,0,bal,M4Val,true);
  EndFormat;
LBankStRn:;  
  EndJob;
  return;
end;