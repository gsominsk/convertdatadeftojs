external procedure HTDetailLevel(Integer, var string);
external procedure HTOKF(Integer,Integer, var string);
external procedure HT2Per(Date, Date , var string);

procedure RepStockRev(record SRVc SRr, var val totp,record RcVc RepSpec)
BEGIN
  Integer i,rwcnt;
  row SRVc SRrw;
  val amount, total,t;
  Boolean testf;
  record MainStockBlock MainStockRec;
  
  BlockLoad(MainStockRec);
  testf=true;
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
    OutLongInt(0,"DblSRVc",SRr.SerNr,false);
    OutDate(60,0,SRr.TransDate,false);
    OutString(130,0,SRr.Location,false);
    OutString(190,0,SRr.SRVarAcc,false);
    OutString(230,0,SRr.Objects,false);
    EndFormat;
    Gray_Divider(0,1);
  end;
  rwcnt = MatRowCnt(SRr);
  for (i = 0 ;i<rwcnt ;i=i+1) begin
    MatRowGet(SRr,i,SRrw);
    if (SRrw.Qty<>0) then begin
      amount = SRrw.DiffFIFORowVal;
      /*
      if (amount==0) then begin
        amount = SRrw.Qty*SRrw.FIFO;
      end;
      */
      total = total + amount;
      if (RepSpec.ArtMode==1) then begin
        StartFormat(15);
        OutString(20,0,SRrw.ArtCode,false);
        OutString(60,0,SRrw.SerialNr,false);
        OutString(130,0,SRrw.Spec,false);
        OutString(190,0,SRrw.SRVarAcc,false);
        OutString(230,0,SRrw.Objects,false);
        if (RepSpec.flags[3]==1) then begin
          if (SRrw.Coefficient==0) then begin
            t = SRrw.Qty;
          end else begin
            if (MainStockRec.UnitConvCalc==0) then begin
              t = SRrw.Qty*SRrw.Coefficient;
            end else begin
              t = SRrw.Qty/SRrw.Coefficient;
            end;
          end;  
          OutVal(290,0,t,M4Qty,true);
        end;  
        OutVal(335,0,SRrw.Qty,M4Val,true);
        OutVal(380,0,SRrw.FIFORowVal,M4Val,true);
        OutVal(430,0,SRrw.NewFIFORowVal,M4Val,true);
        OutVal(480,0,amount,M4Val,true);
        EndFormat;
      end;
    end;
  end;
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
    OutString(0,0,SRr.Comment,false);
    OutVal(480,0,total,M4Val,true);
    EndFormat;
  end;
  totp = totp + total;  
  return;
end;

function
Boolean DateInTheRange(Date check,Date start,Date enddate)
BEGIN
  Boolean res;

  res = true;
  if (nonblankdate(start)) then begin
    if (check<start) then begin res = false; end;
  end;
  if (nonblankdate(enddate)) then begin
    if (check>enddate) then begin res = false; end;
  end;
  DateInTheRange = res;
  return;
end;

global
procedure StockRevJRn(record RcVc RepSpec)
BEGIN
  record SRVc SRr;
  record MainStockBlock MainStockRec;
  Boolean TrHs;
  Boolean testf;
  val total,sum;
  string 255 fracc,toacc,frloc,toloc;
  string 255 tstr;
  LongInt afr,ato;
  Integer rw;

  BlockLoad(MainStockRec);
  rw = 1;
  afr = FirstInRange(RepSpec.f1,20);
  ato = LastInRange(RepSpec.f1,20);
  fracc = FirstInRange(RepSpec.TransStr,10);
  toacc = LastInRange(RepSpec.TransStr,10);
  frloc = FirstInRange(RepSpec.f3,10);
  toloc = LastInRange(RepSpec.f3,10);

  StartReportJob(USetStr(28460));
  
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTDetailLevel(RepSpec.ArtMode,tstr);
  Header(rw,tstr,0);
  HTOKF(RepSpec.flags[1],RepSpec.flags[2],tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;  
  tstr = RepSpec.f1;
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.TransStr)) then begin
    tstr = USetStr(28461);
    tstr = tstr & " ";
    tstr = tstr & RepSpec.TransStr;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f3)) then begin
    tstr = USetStr(28462);
    tstr = tstr & " ";
    tstr = tstr & RepSpec.f3;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f2)) then begin
    tstr = USetStr(28465);
    tstr = tstr & " ";
    tstr = tstr & RepSpec.f2;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  EndHeader;
    
  if (RepSpec.ArtMode==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(28464),false);
    OutString(60,0,USetStr(28463),false);
    OutString(130,0,USetStr(28462),false);
    OutString(190,0,USetStr(28461),false);
    OutString(230,0,USetStr(28465),false);
    OutString(300,0,USetStr(28468),false);
    EndFormat;
  end;
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
    OutString(0,0,USetStr(28464),false);
    OutString(60,0,USetStr(28463),false);  
    OutString(130,0,USetStr(28462),false);
    OutString(190,0,USetStr(28461),false);
    OutString(230,0,USetStr(28465),false);
    if (RepSpec.flags[3]==1) then begin
      OutString(290,0,USetStr(28467),true);
    end;  
    OutString(335,0,USetStr(28466),true);
    OutString(380,0,USetStr(28469),true);
    OutString(430,0,USetStr(28470),true);
    OutString(480,0,USetStr(28471),true);
    EndFormat;
  end;
  if (RepSpec.ArtMode==0) then begin
    Gray_Divider(0,1);
  end;  
  SRr.SerNr = afr;
  TrHs = true;
  while (LoopMain(SRr,1,TrHs)) begin
    if (ato<>-1) then begin
      if (SRr.SerNr>ato) then begin
        TrHs = false;
      end; 
    end;          
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.TransStr)) then begin
        if (SRr.SRVarAcc<fracc) then begin testf = false; end;
        if (SRr.SRVarAcc>toacc) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (blank(SRr.Location)) then begin
          if ((frloc<>MainStockRec.MainStock) and (toloc<>MainStockRec.MainStock)) then begin
            testf = false;
          end;
        end else begin
          if (SRr.Location<frloc) then begin testf = false; end;
          if (SRr.Location>toloc) then begin testf = false; end;
        end;  
      end;
      if ((nonblank(RepSpec.f2)) and (SetInSet(RepSpec.f2,SRr.Objects)==false)) then begin testf = false; end;
      if (DateInTheRange(SRr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;
      if ((RepSpec.flags[1]==0) and (SRr.OKFlag==0)) then begin testf = false; end;
      if ((RepSpec.flags[2]==0) and (SRr.OKFlag!=0)) then begin testf = false; end;
      if (testf) then  begin
        if (RepSpec.ArtMode==1) then begin
          Gray_Divider(0,1);
          RepStockRev(SRr,total,RepSpec);
        end;
        if (RepSpec.ArtMode==0) then begin
          sum = 0;
          StartFormat(15);
          OutLongInt(0,"DblSRVc",SRr.SerNr,false);
          OutDate(60,0,SRr.TransDate,false);             
          OutString(130,0,SRr.Location,false);
          OutString(190,0,SRr.SRVarAcc,false);
          OutString(230,0,SRr.Objects,false);
          OutString(300,0,SRr.Comment,false);
          if (RepSpec.flags[4]<>0) then begin
            RepStockRev(SRr,sum,RepSpec);
            total = total + sum;
            OutVal(1,0,sum,M4Val,true);
          end;
          EndFormat;
        end;
      end;
    end; // TrHs
  end;  // While
  if (RepSpec.flags[4]<>0) then begin
    Gray_Divider(0,1);
    OutVal(480,0,total,M4Val,true);
    Gray_Divider(0,1);
  end;
  EndJob;
  return;
end;
