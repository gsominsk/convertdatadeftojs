/*new and not working
global 
function Boolean CorspTRTest(record TRVc TRp,record AccVc MainAccp,Integer trrow,var val debvalp,var val credvalp)
begin
  Boolean res;
  Integer i,rwcnt;
  row TRVc TRrw;
  row TRVc corspTRrw;
  row TRVc mainTRrw;
  Boolean testf,runbalzerodf;
  val runbal;
  val debval,credval;

  MatRowGet(TRp,trrow,corspTRrw);
  rwcnt = MatRowCnt(TRp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TRp,i,TRrw);
    if (i==trrow) then begin
      if (TRrw.AccNumber==MainAccp.AccNumber) then begin
        CopyRow(TRp,TRrw,mainTRrw);
        i = rwcnt;
      end;
    end;
  end;
  runbalzerodf = false;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TRp,i,TRrw);
    testf = true;
    if (TRrw.stp!=1) then begin testf = false; end;
    if (TRrw.ovst!=0) then begin testf = false; end;
    if (TRrw.CorspSer!=corspTRrw.CorspSer) then begin testf = false; end;
    if (testf) then begin
      debval = debval + TRrw.DebVal;
      credval = credval + TRrw.CredVal;

//Trace("debval " & debval," credval " & credval);        

      runbal = runbal + TRrw.DebVal;
      runbal = runbal - TRrw.CredVal;            
      if (runbal!=0) then begin
        testf = false;
      end else begin
        if (i<trrow) then begin
          testf = false;
          runbalzerodf = true;
        end;
      end;
      if (runbalzerodf) then begin
        runbalzerodf = false;
        goto LCorspTRTestSkip;
      end;
      if (mainTRrw.DebVal!=0) then begin
        if (corspTRrw.DebVal!=0) then begin
          testf = false;
        end;
      end;
      if (mainTRrw.CredVal!=0) then begin
        if (corspTRrw.CredVal!=0) then begin
          testf = false;
        end;
      end;
//Trace("testf " & testf, " runbal " & runbal & " TRrw.AccNumber " & TRrw.AccNumber & " TRrw.DebVal " & TRrw.DebVal);
      if (testf) then begin
        debvalp = corspTRrw.DebVal;
        credvalp = corspTRrw.CredVal;
        if (mainTRrw.DebVal!=0) then begin
          if (corspTRrw.CredVal>mainTRrw.DebVal) then begin
            credvalp = mainTRrw.DebVal;
            debvalp = blankval;
          end;
        end;
        if (mainTRrw.CredVal!=0) then begin
          if (corspTRrw.DebVal>mainTRrw.CredVal) then begin
            credvalp = blankval;
            debvalp = mainTRrw.CredVal;
          end;
        end;
        res = true;
        goto LCorspTRTest;
      end;
LCorspTRTestSkip:;      
    end;
  end;
LCorspTRTest:;  
  CorspTRTest = res;
  return;
end;
*/

global
function Boolean CorspTRIgnore(string accnumber)
begin
  Boolean res;
  record AccBlock Accb;
  
  BlockLoad(Accb);
  if (accnumber==Accb.RndAcc or accnumber==Accb.BaseRoundOffAcc or accnumber==Accb.EMURndOffAcc or accnumber==Accb.RateRndOffAcc) then begin
    res = true;
  end;
  CorspTRIgnore = res;
  return;
end;

global 
function Boolean CorspTRTest(record TRVc TRp,record AccVc MainAccp,Integer trrow,var val debvalp,var val credvalp)
begin
  Boolean res;
  row TRVc TRrw;
  row TRVc corspTRrw;
  Integer i,rwcnt;
  val runbal;
  Integer mainaccrow;
  Integer firstdebrow;
  Integer firstcredrow;
  Integer debcnt;
  Integer credcnt;
  Integer pos,pos1;
  Boolean accexists,testf;
  LongInt corspser;
  val debsum,credsum;
  Boolean skipdlineaddf;

  res = false;  
  mainaccrow = -1;
  firstdebrow = -1;
  firstcredrow = -1;
  debcnt = 0;
  credcnt = 0;
  accexists = false;
  MatRowGet(TRp,trrow,corspTRrw);
  corspser = corspTRrw.CorspSer;

  rwcnt = MatRowCnt(TRp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TRp,i,TRrw);
    testf = true;
    if (TRrw.stp<>1) then begin testf = false; end;
    if (TRrw.ovst<>0) then begin testf = false; end;
    if (TRrw.CorspSer<>corspser) then begin testf = false; end;
    if (testf) then begin
      if (TRrw.AccNumber==MainAccp.AccNumber) then begin
        if (TRrw.DebVal<>0) then begin
          if (CorspTRIgnore(TRrw.AccNumber)==false) then begin
            debsum = debsum + TRrw.DebVal;
          end;
        end;  
        if (TRrw.CredVal<>0) then begin
          if (CorspTRIgnore(TRrw.AccNumber)==false) then begin
            credsum = credsum + TRrw.CredVal;
          end;
        end;  
        accexists = true;                      
      end;
      skipdlineaddf = false;
/*      
Lithuanians dont like it, they think amount < 1 should be includeded in corespondence
      if ((TRrw.DebVal>0) and (TRrw.DebVal<1) and (debcnt>0)) then begin
        skipdlineaddf = true;
      end;
      if ((TRrw.CredVal>0) and (TRrw.CredVal<1) and (credcnt>0)) then begin
        skipdlineaddf = true;
      end;
*/      
      if (skipdlineaddf==false) then begin
        if (TRrw.DebVal>0) then begin
          if (CorspTRIgnore(TRrw.AccNumber)==false) then begin
            debcnt = debcnt + 1;
          end;
          if (firstdebrow==-1) then begin firstdebrow = i; end;
        end;
        if (TRrw.CredVal>0) then begin
          if (CorspTRIgnore(TRrw.AccNumber)==false) then begin
            credcnt = credcnt + 1;
          end;
          if (firstcredrow==-1) then begin firstcredrow = i; end;
        end;    
        if (TRrw.DebVal<0) then begin
          if (CorspTRIgnore(TRrw.AccNumber)==false) then begin
            debcnt = debcnt + 1;
          end;
          if (firstdebrow==-1) then begin firstdebrow = i; end;
        end;
        if (TRrw.CredVal<0) then begin
          if (CorspTRIgnore(TRrw.AccNumber)==false) then begin
            credcnt = credcnt + 1;
          end;
          if (firstcredrow==-1) then begin firstcredrow = i; end;
        end;
      end;
      runbal = runbal + TRrw.DebVal;
      runbal = runbal - TRrw.CredVal;            
      if (runbal==0) then begin
        if (i>=trrow) then begin
          if (((debcnt==1) and (firstdebrow==trrow)) or ((credcnt==1) and (firstcredrow==trrow))) then begin
            if (accexists) then begin
              debvalp = debsum;
              credvalp = credsum;
              res = true;
            end;
            goto LCorspTRTest;
          end;
          if (debcnt==1) then begin mainaccrow = firstdebrow; end;
          if (credcnt==1) then begin mainaccrow = firstcredrow; end;          
          if (mainaccrow<0) then begin goto LCorspTRTest; end;
          MatRowGet(TRp,mainaccrow,TRrw);
          if (MainAccp.AccNumber==TRrw.AccNumber) then begin
            debsum = debvalp;
            credsum = credvalp;
            debvalp = credsum;
            credvalp = debsum;            
            res = true;
          end;
          goto LCorspTRTest;
LSKIPROW:;          
        end;
        debsum = 0;
        credsum = 0;
        debcnt = 0;
        credcnt = 0;
        firstdebrow = -1;
        firstcredrow = -1;
        accexists = false;
      end;
    end;  //testf    
  end;
LCorspTRTest:;
  CorspTRTest = res;
  return;
end;

procedure ReadCorspTRRowSums(record TRVc TRp,record AccVc MainAccp,record AccVc CorAccp,var val SumDebet,var val SumCredit)
BEGIN
  Integer i,rwcnt;
  row TRVc TRrw;
  string 255 corspaccs,objs;
  val sv;
  Boolean dcflag;
  
  rwcnt = MatRowCnt(TRp);
  for (i=0;i<rwcnt;i=i+1 ) begin
    MatRowGet(TRp,i,TRrw);
    if (TRrw.stp==1) then begin
      if (TRrw.AccNumber<>MainAccp.AccNumber) then begin
        if (TRrw.AccNumber==CorAccp.AccNumber) then begin  
          if (CorspTRTest(TRp,MainAccp,i,TRrw.DebVal,TRrw.CredVal)) then begin
            SumDebet = SumDebet + TRrw.DebVal;
            SumCredit = SumCredit + TRrw.CredVal;                    
          end;       
        end;    
      end;
    end;  
  end;
  RETURN;
END;

global
procedure CorspAccSums(record RcVc RepSpec,record AccVc MainAccp,string CorAcc,var val SumDebet,var val SumCredit)
begin
  Integer i,rwcnt;
  record TRVc TRr;
  row TRVc TRrw;
  string 255 corspaccs,objs;
  val sv;
  Boolean dcflag;
  record AccVc CorAccp;
  Boolean found,found2,testf;
  record MainVc mainr;
  record AccVc CorAccr; 
  
  found = true;
  CorAccr.AccNumber = CorAcc;
  while (LoopMain(CorAccr,1,found)) begin
    if (CorAccr.AccNumber!=CorAcc) then begin found = false; end;
    if (found) then begin
      mainr.AccNumber = MainAccp.AccNumber;
      mainr.TransDate = RepSpec.sStartDate;
      found2 = true;
      ResetLoop(mainr);
      while (LoopMain(mainr,2,found2)) begin
        testf = true;
        if (mainr.AccNumber<>MainAccp.AccNumber) then begin found2 = false; end;
        if (DateInRange(mainr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin found2 = false; end;
        if (found2 and testf) then begin
          if (mainr.FileName=="TRVc") then begin
            TRr.Number = mainr.TransNr;
            TRr.IntYc = mainr.IntYc;
            if (ReadFirstMain(TRr,2,true)) then begin                
              if (mainr.TransDate==TRr.TransDate) then begin
                ReadCorspTRRowSums(TRr,MainAccp,CorAccr,SumDebet,SumCredit);  
              end;
            end;                            
          end;
        end;          
      end;
    end;
  end;
  return;
end;

procedure  FindCorespondingAccounts(string frcoracc,string tocoracc,record AccVc MainAccp,Date td,record SMVc SMr)
BEGIN
  record AccVc CorAccr; 
  record MainVc mainr;
  record TRVc TRr;
  row SMVc SMrw;
  Boolean found,found2,testf,existf;
  val SumDebet,SumCredit,v;
  Integer rwcnt,i;
  Integer j;
  string 255 tstr;
  
  found = true;
  CorAccr.AccNumber = frcoracc;
  while (LoopMain(CorAccr,1,found)) begin
    if (nonblank(tocoracc) and (CorAccr.AccNumber>tocoracc)) then begin found = false; end;
    if (found) then begin
      mainr.AccNumber = MainAccp.AccNumber;
      mainr.TransDate = td;
      found2 = true;
      ResetLoop(mainr);
      while (LoopMain(mainr,2,found2)) begin
        testf = true;
        if (mainr.AccNumber<>MainAccp.AccNumber) then begin found2 = false; end;
        if (mainr.TransDate<>td) then begin testf = false; end;
        if (found2 and testf) then begin
          if (mainr.FileName=="TRVc") then begin
            TRr.Number = mainr.TransNr;
            TRr.IntYc = mainr.IntYc;
            if (ReadFirstMain(TRr,2,true)) then begin                
              if (mainr.TransDate==TRr.TransDate) then begin
                ReadCorspTRRowSums(TRr,MainAccp,CorAccr,SumDebet,SumCredit);  
              end;
            end;                            
          end;
        end;          
      end;
      if ((SumDebet<>0) or (SumCredit<>0)) then begin 
        existf = false;
        rwcnt = MatRowCnt(SMr);
        tstr = td;
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(SMr,i,SMrw);
          if ((SMrw.AccNumber==CorAccr.AccNumber) and (SMrw.Objects==tstr) and (SMrw.DebVal<>0.00)) then begin
            SMrw.DebVal = SumDebet + SMrw.DebVal;
            MatRowPut(SMr,i,SMrw);             
            i = rwcnt;
            existf = true;
          end;  
          if ((SMrw.AccNumber==CorAccr.AccNumber) and (SMrw.Objects==tstr) and (SMrw.CredVal<>0.00)) then begin
            SMrw.CredVal = SumCredit + SMrw.CredVal;
            MatRowPut(SMr,i,SMrw); 
            i = rwcnt;
            existf = true;
          end;  
        end;  
        if (existf==false) then begin  
          if (SumDebet<>0) then begin      
            SMrw.AccNumber = CorAccr.AccNumber;          
            SMrw.DebVal = SumDebet;
            SMrw.CredVal = 0;
            SMrw.Objects = td;
            MatRowPut(SMr,rwcnt,SMrw); 
          end;  
          if (SumCredit<>0) then begin      
            rwcnt = MatRowCnt(SMr);
            SMrw.AccNumber = CorAccr.AccNumber;          
            SMrw.CredVal = SumCredit;
            SMrw.DebVal = 0;
            SMrw.Objects = td;
            MatRowPut(SMr,rwcnt,SMrw); 
          end;  
        end;
        SumDebet = 0;
        SumCredit = 0;
      end;
    end;
  end; 
  RETURN;
END;

procedure PrintResults(record SMVc SMr)
BEGIN
  record SMVc SM2r;
  row SMVc SMrw;
  row SMVc SM2rw;
  Boolean testf;
  Integer i,rwcnt,j;
  Integer m;
  string 255 laststr,tstr,firstacc;
  Integer pos,pos1,zmiana;
  Date td,enddate;
  row SMVc res;
  row SMVc acum;
  row SMVc tmp;
  val crowtot,drowtot;
  
  RecordNew(SM2r);
  rwcnt = MatRowCnt(SMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    SM2rw.AccNumber = SMrw.AccNumber;
    SM2rw.Objects = SMrw.Objects;
    SM2rw.DebVal = SMrw.DebVal;
    SM2rw.CredVal = SMrw.CredVal;
    MatRowPut(SM2r,i,SM2rw);
  end;
 // Sorting;
  zmiana = 1;
  while (zmiana==1) begin
    zmiana = 0;
    for (i=0;i<rwcnt-1;i=i+1) begin
      MatRowGet(SM2r,i,res);
      MatRowGet(SM2r,i+1,acum);
      if ((res.AccNumber>acum.AccNumber)/* and (res.DebVal<acum.DebVal)*/) then begin
        zmiana = 1;
        tmp.AccNumber = res.AccNumber;
        tmp.Objects = res.Objects;
        tmp.DebVal = res.DebVal;
        tmp.CredVal = res.CredVal;

        res.AccNumber = acum.AccNumber;
        res.Objects = acum.Objects;
        res.DebVal = acum.DebVal;
        res.CredVal = acum.CredVal;

        acum.AccNumber = tmp.AccNumber;
        acum.Objects = tmp.Objects;
        acum.DebVal = tmp.DebVal;
        acum.CredVal = tmp.CredVal;
        MatRowPut(SM2r,i,res);
        MatRowPut(SM2r,i+1,acum);        
      end;
    end;
  end;   
 // Sorting; 
  pos = 80;
  zmiana = 0;
  rwcnt = MatRowCnt(SM2r);  
  StartFormat(15);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SM2r,i,SMrw);
    testf = true; 
    for (j=0;j<i;j=j+1) begin
      MatRowGet(SM2r,j,SM2rw);
      if (SM2rw.AccNumber==SMrw.AccNumber) then begin
        testf = false; 
        goto L12;
      end;
      if (SMrw.DebVal==0.00) then begin
        testf = false; 
        goto L12;
      end;
    end;
L12:;        
    if (testf) then begin
      pos1 = pos+zmiana*35;
      OutString(pos1,0,SMrw.AccNumber,true);   
      zmiana = zmiana + 1;
    end;  
  end;
  OutString(240,0,USetStr(2567),true);  
  pos = 280;
  zmiana = 0;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SM2r,i,SMrw);
    testf = true; 
    for (j=0;j<i;j=j+1) begin
      MatRowGet(SM2r,j,SM2rw);
      if (SM2rw.AccNumber==SMrw.AccNumber) then begin
        testf = false; 
        goto L22;
      end;
      if (SMrw.CredVal==0.00) then begin
        testf = false; 
        goto L22;
      end;      
    end;
L22:;    
    if (testf) then begin
      pos1 = pos+zmiana*35;
      OutString(pos1,0,SMrw.AccNumber,true);
      zmiana = zmiana + 1;
    end;  
  end;  
  OutString(440,0,USetStr(2567),true);
  OutString(480,0,USetStr(2507),true);
  EndFormat;
//test only  
/*
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SM2r,i,SMrw);
  StartFormat(15);
    OutString(0,0,SMrw.AccNumber,false);
    OutString(100,0,SMrw.Objects,false);
    OutVal(200,0,SMrw.DebVal,M4Val,false);
    OutVal(300,0,SMrw.CredVal,M4Val,false);
  EndFormat;
  end;  
*/
  rwcnt = MatRowCnt(SMr);  
  if (rwcnt>0) then begin
    MatRowGet(SMr,0,SMrw);
    td = StringToDate(SMrw.Objects);
    MatRowGet(SMr,rwcnt-1,SMrw);
    enddate = StringToDate(SMrw.Objects);
    while (td<=enddate) begin
      tstr = td;
      testf = true;    
      laststr = "";
      zmiana = -1;
      pos = 80;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(SM2r,i,SMrw);
        if (SMrw.Objects==tstr and SMrw.DebVal<>0) then begin
          if (testf) then begin
            StartFormat(15);    
            OutString(0,0,SMrw.Objects,false);
            testf = false;
          end;
          if (SMrw.AccNumber<>laststr) then begin
            if (SMrw.DebVal<>0) then begin
              laststr = SMrw.AccNumber;
              zmiana = zmiana + 1;                    
            end;  
          end;
          if (SMrw.DebVal<>0) then begin
            pos1 = pos + zmiana*35;
            OutVal(pos1,0,SMrw.DebVal,M4Val,true);        
            drowtot = drowtot + SMrw.DebVal;
          end;  
        end;      
      end;
      if (drowtot<>0) then begin
        OutVal(240,0,drowtot,M4Val,true);
      end;
      laststr = "";
      zmiana = -1;
      pos = 280;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(SM2r,i,SMrw);
        if (SMrw.Objects==tstr and SMrw.CredVal<>0) then begin
          if (testf) then begin
            StartFormat(15);    
            OutString(0,0,SMrw.Objects,false);
            testf = false;
          end;
          if (SMrw.AccNumber<>laststr) then begin
            if (SMrw.CredVal<>0) then begin
              laststr = SMrw.AccNumber;
              zmiana = zmiana + 1;                    
            end;  
          end;
          if (SMrw.CredVal<>0) then begin
            pos1 = pos + zmiana*35;
            OutVal(pos1,0,SMrw.CredVal,M4Val,true);        
            crowtot = crowtot + SMrw.CredVal;          
          end;  
        end;      
      end;                     
      if (testf==false) then begin
        if (crowtot<>0) then begin
          OutVal(440,0,crowtot,M4Val,true);
        end;  
        OutVal(480,0,drowtot-crowtot,M4Val,true);
        crowtot = 0;
        drowtot = 0;
        EndFormat;    
      end;           
      td = AddDay(td,1);
    end;
  end;  
  RETURN;
END;

global 
procedure Corsp2Rn(record RcVc RepSpec)
BEGIN
  record AccVc Accr;
  string 10 FirstAcc,LastAcc;
  string 10 frcoracc,tocoracc;
  Boolean TrHs;
  record SMVc SMr;
  Date td;
  
  FirstAcc = FirstInRange(RepSpec.AccStr,10);
  LastAcc = LastInRange(RepSpec.AccStr,10);
  frcoracc = FirstInRange(RepSpec.f2,10);
  tocoracc = LastInRange(RepSpec.f2,10);    
  
  StartReportJob(USetStr(9360));
  EndHeader; 
  StartFormat(15);    
   OutString(0,0,USetStr(2563),false);
   OutString(50,0,USetStr(2502),false);
  EndFormat;
  RecordNew(SMr);
  td = RepSpec.sStartDate;
  while (td<=RepSpec.sEndDate) begin
    Accr.AccNumber = FirstAcc;
    TrHs = true;
    ResetLoop(Accr);
    while (LoopMain(Accr,1,TrHs)) begin
      if (nonblank(LastAcc) and (Accr.AccNumber>LastAcc)) then begin TrHs = false; end;
      if (TrHs) then begin
        FindCorespondingAccounts(frcoracc,tocoracc,Accr,td,SMr);
      end;  
    end;  
    td = AddDay(td,1);
  end;
  PrintResults(SMr);
  EndJob;  
  RETURN;
END;
