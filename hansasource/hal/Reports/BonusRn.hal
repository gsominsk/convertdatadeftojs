external function Integer CountObjects(string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function string 255 CreateInvoiceNumber(LongInt,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external procedure HT2Per(Date, Date , var string);
external procedure HTSaleMan(string, var string);
external procedure PSFindPaydAmount2(record IVVc,record IPrsVc,Boolean,var val,var val,var Date);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);

function Boolean CheckPayDeal(string paydeal)
BEGIN
  record PDVc PDr;
  Boolean res;
   
  res = true;
  PDr.Code = paydeal;
  if (ReadFirstMain(PDr,1,true)) then begin
    if (PDr.PDType==kInvoiceTypeDebit) then begin 
      res = false;
    end;  
  end;
  CheckPayDeal = res;
  return;
END;
  
procedure PrintIVCashHeader(record RcVc RepSpec,string user,record IVCashVc IVCashr,var LongInt oldSerNr)
BEGIN
  record CUVc CUr;
  string 255 tstr;
  
  if (oldSerNr!=IVCashr.SerNr) then begin
    StartFormat(15);
    tstr = CreateInvoiceNumber(IVCashr.SerNr,IVCashr.OfficialSerNr);
    OutString(0,"DblIVCashVc",tstr,false);
    OutDate(55,0,IVCashr.InvDate,false);

    OutString(115,0,IVCashr.CustCode,false);
    OutString(175,0,IVCashr.Addr0,false);
    OutString(320,0,user,false);
    if (RepSpec.flags[5]!=0) then begin        
      CUr.Code = IVCashr.CustCode;
      if (ReadFirstMain(CUr,1,true)) then begin
        if (nonblank(CUr.Department)) then begin
          OutString(410,0,CUr.Department,false);
        end;  
      end;
    end;  
    oldSerNr = IVCashr.SerNr;
    EndFormat;
  end;
END;

procedure PrintIVHeader(record RcVc RepSpec,string user,record IVVc IVr,var LongInt oldSerNr)
BEGIN
  record CUVc CUr;
  string 255 tstr;
  
  if (oldSerNr!=IVr.SerNr) then begin
    StartFormat(15);
    tstr = CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr);
    OutString(0,"DblCustPS2",tstr,false);
    OutDate(55,0,IVr.InvDate,false);

    OutString(115,0,IVr.CustCode,false);
    OutString(175,0,IVr.Addr0,false);
    OutString(320,0,user,false);
    if (RepSpec.flags[5]!=0) then begin        
      CUr.Code = IVr.CustCode;
      if (ReadFirstMain(CUr,1,true)) then begin
        if (nonblank(CUr.Department)) then begin
          OutString(410,0,CUr.Department,false);
        end;  
      end;
    end;  
    oldSerNr = IVr.SerNr;
    EndFormat;
  end;
END;

procedure PSFindPaydAmountCLIn(record IPrsVc IPrsp,var val ap,var Date dp)
BEGIN
  record CLInVc CLInr;
  row CLInVc CLInrw;
  Integer i,rwcnt;
  
  ap = 0;
  CLInr.SerNr = IPrsp.TransNr;
  if (ReadFirstMain(CLInr,1,true)) then begin
    rwcnt = MatRowCnt(CLInr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CLInr,i,CLInrw);
      if (CLInrw.Type==1) then begin
        if (CLInrw.TransNr==IPrsp.IVNr) then begin
          if (CLInr.TransDate==IPrsp.CustDate) then begin
            ap = CLInrw.Sum + ap;
          end;    
          dp = CLInr.TransDate;
        end;
      end;
    end;
  end;
  RETURN;
END;

procedure PSFindPaydAmountPurgeTR(record IPrsVc IPrsp,var val ap,var Date dp)
begin
  record PurgeTRVc PurgeTRr;
  Integer i,rwcnt;
  
  ap = 0;
  PurgeTRr.Number = IPrsp.TransNr;
  PurgeTRr.IntYc = IPrsp.IntYc;
  PurgeTRr.TransRow = IPrsp.TransRow;
  if (ReadFirstMain(PurgeTRr,3,true)) then begin
    if (PurgeTRr.SerNr==IPrsp.IVNr) then begin
      if (PurgeTRr.TransDate==IPrsp.CustDate) then begin
        ap = ap + (PurgeTRr.DebVal - PurgeTRr.CredVal);
      end;    
      dp = PurgeTRr.TransDate;
    end;
  end;
  return;
end;

procedure PSFindPaydAmountTR(record IPrsVc IPrsp,var val ap,var Date dp)
begin
  record TRVc TRr;
  row TRVc TRrw;
  Integer i,rwcnt;
  
  ap = 0;
  TRr.Number = IPrsp.TransNr;
  TRr.IntYc = IPrsp.IntYc;
  if (ReadFirstMain(TRr,2,true)) then begin
    rwcnt = MatRowCnt(TRr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TRr,i,TRrw);
        if (TRrw.SerNr==IPrsp.IVNr) then begin
          if (TRr.TransDate==IPrsp.CustDate) then begin
            ap = ap + (TRrw.DebVal - TRrw.CredVal);
          end;    
          dp = TRr.TransDate;
        end;
    end;
  end;
  return;
end;

procedure BonusRptDetailedHeader(Integer nr)
BEGIN
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(nr),false); 
  EndFormat;
  Gray_Divider(0,480);
  StartFormat(15);
  EndFormat;
  RETURN;
END;

procedure CalcBonus(string art,record UserVc Userr,string cu,val sum,var val pp,var val bp,Integer flags7,val vals0)
BEGIN
  record INVc INr;
  record CUVc CUr;
  record BonusDefVc BonusDefr;
  row BonusDefVc BonusDefrw;
  integer i,rwcnt;
  boolean foundf;
  boolean skipf;
  val reb;
  
  bp = 0;
  pp = blankval;
  reb = 0;
  CUr.Code = cu;
  if (ReadFirstMain(CUr,1,true)) then begin
    foundf = true;
    BonusDefr.UserCode = Userr.Code;
    while (LoopMain(BonusDefr,1,foundf)) begin
      skipf = false;
      if (nonblank(BonusDefr.UserCode)) and (BonusDefr.UserCode != Userr.Code) then begin
        foundf = false;
        skipf = true;
      end;
      if (nonblank(BonusDefr.CustCode)) and (BonusDefr.CustCode != CUr.Code) then begin
        skipf = true;
      end;
      if (nonblank(BonusDefr.CustCat)) and (BonusDefr.CustCat != CUr.CustCat) then begin
        skipf = true;
      end;
      if (foundf) and (skipf==false) then begin
        rwcnt = MatRowCnt(BonusDefr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(BonusDefr,i,BonusDefrw);
          if (BonusDefrw.CodeType == 0) then begin
            INr.Code = art;
            if (ReadFirstItem(art,INr,true,true)) then begin
              if (INr.Bonus==0) then begin
                if (INr.Group==BonusDefrw.ItemCode) then begin
                  pp = BonusDefrw.BonusPrc;
                end;
              end else begin
                pp = INr.Bonus;
              end;
            end;
          end else begin
            INr.Code = art;
            if (ReadFirstItem(art,INr,true,true)) then begin
              if (INr.Bonus==0) then begin
                if (INr.Code==BonusDefrw.ItemCode) then begin
                  pp = BonusDefrw.BonusPrc;
                end;
              end else begin
                pp = INr.Bonus;
              end;
            end;
          end; 
        end;
        if (blank(pp)) then begin
          pp = BonusDefr.BonusPrc;
        end;
      end;      
    end;
  end;
  switch (flags7) begin
    case 0:
      if (blank(pp)) then begin
        pp = vals0;
        if (blank(pp)) then begin
          pp = Userr.Bonus;
        end;
      end;
    case 1:
      if (pp==0) then begin
        pp = vals0;
        if (pp==0) then begin
          INr.Code = art;
          if (ReadFirstItem(art,INr,true,true)) then begin
            if (INr.Bonus!=0) then begin
              pp = INr.Bonus;
            end;
          end;
          if (blank(pp)) then begin
            pp = Userr.Bonus;
          end;
        end;
      end;
  end;
  if ((pp>=-100) and (pp<=100)) then begin
    reb = pp/100;
    bp = sum*reb;
  end;
  RETURN;
END;

procedure AddRptResults(var val totbonusbase,var val totbon,var val totcost,var val totsales,var val totrowsum,
                        val rowbonusbase,val rowsales,val rowbon,var val totcred,val rowcred,val rowcost,val rowsum)
BEGIN
  totbon = totbon + rowbon;
  totbonusbase = totbonusbase + rowbonusbase;
  totsales = totsales + rowsales;
  totcred = totcred + rowcred;
  totcost = totcost + rowcost;
  totrowsum = totrowsum + rowsum;
  RETURN;
END;

procedure BonusRptResults(record RcVc RepSpec,string salesman,string salesmanname,val rowbonusbase,val rowsales,val rowbon,val rowcred,val rowcost,val userrowsum)
begin
  val sales;

  if (RepSpec.flags[0]==0) then begin
    Gray_Divider(200,480);
  end;  
  StartFormat(15);
  if (RepSpec.flags[0]==0) then begin
    if (RepSpec.flags[9]!=0) then begin
      OutString(130,0,USetStr(4915),false);
      OutVal(4,0,rowsales,M4Val,true);
      OutVal(5,0,rowcost,M4Val,true);
      OutVal(6,0,rowbonusbase,M4Val,true);
      if (RepSpec.flags[1]==1) then begin
        OutVal(7,0,(rowbonusbase*100)/userrowsum,M4Val,true);
      end;
    end else begin
      OutString(200,0,USetStr(4915),false);
      OutVal(7,0,rowbonusbase,M4Val,true);
    end;
    OutVal(8,0,rowbon/rowbonusbase*100,M4Val,true);
  end else begin 
    sales = rowbonusbase + rowcred;
    if (sales==0) then begin 
      sales = blankval;
    end;  
    if (nonblank(salesman)) then begin
      OutString(0,0,salesman,false);
      OutString(55,0,salesmanname,false);
    end else begin
      OutString(0,0,USetStr(4914),false);
    end;
    OutVal(215,0,rowcred,M4Val,true);
    if (RepSpec.flags[9]!=0) then begin
      OutVal(4,0,rowsales,M4Val,true);
      OutVal(5,0,rowcost,M4Val,true);
      OutVal(6,0,rowbonusbase,M4Val,true);
//      OutVal(7,0,((rowbonusbase-rowcost)*100)/rowsales,M4Val,true);
      if (RepSpec.flags[1]==1) then begin
        OutVal(7,0,(rowbonusbase*100)/rowsales,M4Val,true);
      end;
    end else begin
      OutVal(315,0,sales,M4Val,true);
      if (RepSpec.flags[1]==1) then begin
        OutVal(7,0,rowbonusbase,M4Val,true);
//        OutVal(7,0,((rowbonusbase-rowcost)*100)/rowsales,M4Val,true);
      end;
    end;
  end;
  OutVal(480,0,rowbon,M4Val,true);
  EndFormat;
  if (RepSpec.flags[0]==0) or (RepSpec.flags[9]!=0) or (RepSpec.flags[8]!=0) then begin
    Gray_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;  
 
  return;
end;

function Boolean BonusRowPrint(val totbonusbase,val totbon,Integer UsedOnly,Integer onlywbonus)
begin
  Boolean res;
  
  res = true;
  if (UsedOnly==1) then begin
    if (totbonusbase==0) then begin
      if (totbon==0) then begin
        res = false;
      end;
    end;
  end;      
  if (onlywbonus==1) then begin
    if (totbon==0) then begin
      res = false;
    end;
  end;    
  BonusRowPrint = res;
  return;
end;

procedure PrintIVCash(record UserVc Userr,record RcVc RepSpec,
                      var Boolean firstivf,
                      var val usercred,var val userbon,var val userbonusbase,var val usersales,var val usercost,var val userrowsum,var val upinvsales,var val upinvbon)
begin
  record IVCashVc IVCashr;
  record INVc INr;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  Boolean found,testf;
  val ivbb,ivbprcnt,ivbon,ivcost,ivsales,ivrowsum;
  val nrofsalesman;
  val rs,sales,base,gp,rowsum,bprcnt,bon;
  record TaxMatrixVc TMr;
  LongInt oldSerNr;
  val totinvgp;

  IVCashr.InvDate = RepSpec.d1;
  IVCashr.SalesMan = Userr.Code;
  found = true;
  IVCashr.InvDate = RepSpec.d1;
//        while (LoopKey("InvDate:" & Userr.Code,IVCashr,1,found)) begin //no Salesmen from matrix
  while (LoopKey("InvDate",IVCashr,1,found)) begin
    if ((nonblankdate(RepSpec.d1)) and (IVCashr.InvDate<RepSpec.d1)) then begin
      found = false;
    end;   
    if ((nonblankdate(RepSpec.d2)) and (IVCashr.InvDate>RepSpec.d2)) then begin
      found = false;
    end;      
    if (found) then begin
      testf = true;
      if (IVCashr.OKFlag==0) then begin testf = false; end;
      if (IVCashr.Invalid!=0) then begin testf = false; end;
      if (nonblank(RepSpec.Stext)) then begin
        if (RepSpec.Stext!=IVCashr.BranchID) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,IVCashr.Objects)==false) then begin testf = false; end;
      end;
      if (testf) then begin
        testf = false;
        rwcnt = MatRowCnt(IVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVCashr,i,IVCashrw);
          if (IVCashrw.stp==kInvoiceRowTypeNormal) or (IVCashrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVCashrw.stp==kInvoiceRowTypeCorrection) then begin
            if (nonblank(IVCashrw.Salesmen)) then begin
              if (SetInSet(Userr.Code,IVCashrw.Salesmen)) then begin 
                testf = true; 
                i = rwcnt;
              end;
            end else begin
              if (SetInSet(Userr.Code,IVCashr.SalesMan)) then begin 
                testf = true; 
                i = rwcnt;
              end;
            end;
          end;
        end;
      end;
      if (testf) then begin
        ivsales = blankval; ivcost = blankval; ivbb = blankval; ivbon = blankval;
        if (firstivf) then begin
          if (RepSpec.flags[0]==0) then begin
            StartFormat(15);
            if (nonblank(IVCashr.SalesMan)) then begin
              OutString(0,0,Userr.Code,false);
              OutString(55,0,Userr.Name,false);
            end else begin
              OutString(0,0,USetStr(4914),false);
            end;
            EndFormat;
            Gray_Divider(0,480);
          end;
          firstivf = false;
        end;
        nrofsalesman = CountObjects(IVCashr.SalesMan);
        rwcnt = MatRowCnt(IVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVCashr,i,IVCashrw);
          testf = true;
          if (nonblank(RepSpec.f6)) then begin
            if (ReadFirstItem(IVCashrw.ArtCode,INr,true,true)) then begin
              if (SetInSet(RepSpec.f6,INr.DispGroups)) then begin
                testf = false;
              end;
            end;
          end;
          if ((IVCashrw.stp!=kInvoiceRowTypeNormal) and (IVCashrw.stp!=kInvoiceRowTypeStructuredItemComponent) and (IVCashrw.stp!=kInvoiceRowTypeCorrection) and (IVCashrw.stp!=kInvoiceRowTypeDownpayment)) then begin testf = false; end;               
          if (testf) then begin
            testf = false; 
            if (nonblank(IVCashrw.Salesmen)) then begin
              if (SetInSet(Userr.Code,IVCashrw.Salesmen)) then begin 
                testf = true; 
              end;
            end else begin
              if (SetInSet(Userr.Code,IVCashr.SalesMan)) then begin 
                testf = true; 
              end;
            end;
          end;
          if (testf) then begin
            if (IVCashrw.stp==kInvoiceRowTypeCorrection) then begin
              IVCashrw.Sum = -IVCashrw.Sum;
              IVCashrw.BasePrice = -IVCashrw.Sum;
              IVCashrw.rowGP = -IVCashrw.rowGP;
            end;
            
            if (IVCashrw.Sum!=0) or (IVCashrw.BasePrice!=0) then begin
              sales = MulRateToBase1(IVCashr.CurncyCode,IVCashrw.Sum,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
              UnpackRowFieldMatrix(IVCashrw,"TaxMatrix",TMr);
              FindSalesExVat(TMr,IVCashrw.VATCode,sales,IVCashr.InclVAT,IVCashr.NoTAXonVAT,sales);
              rowsum = MulRateToBase1(IVCashr.CurncyCode,IVCashrw.Sum,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
              FindSalesExVat(TMr,IVCashrw.VATCode,rowsum,IVCashr.InclVAT,IVCashr.NoTAXonVAT,rowsum);
              if (RepSpec.flags[1]!=0) then begin
                rs = IVCashrw.rowGP;//already in base 1
              end else begin
                rs = rowsum;
              end;
              base = rs / nrofsalesman;
              CalcBonus(IVCashrw.ArtCode,Userr,IVCashr.CustCode,base,bprcnt,bon,RepSpec.flags[7],RepSpec.vals0);
              usercred = usercred + rs;                    
              if (BonusRowPrint(IVCashrw.Sum,bon,RepSpec.UsedOnly,RepSpec.flags[6])) then begin
                userbon = userbon + bon;
                userbonusbase = userbonusbase + base;
                usersales = usersales + sales;
                usercost = usercost + IVCashrw.BasePrice*IVCashrw.Quant;
                userrowsum = userrowsum + rowsum;
                upinvsales = upinvsales + rs;
                upinvbon = upinvbon + bon;
                if (RepSpec.flags[0]==0) then begin
                  PrintIVCashHeader(RepSpec,Userr.Code,IVCashr,oldSerNr);
                  StartFormat(15);
                  if (RepSpec.flags[9]!=0) then begin
                    if (RepSpec.flags[3]!=0) then begin
                      OutString(12,0,left(IVCashrw.Spec,25),false);
                    end;
                    OutVal(150,0,IVCashrw.Quant,M4Val,true);
                    OutVal(2,0,MulRateToBase1(IVCashr.CurncyCode,IVCashrw.Price,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff),M4Val,true);
                    OutVal(3,0,MulRateToBase1(IVCashr.CurncyCode,IVCashrw.Sum/IVCashrw.Quant,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff),M4Val,true);
                    OutVal(4,0,sales,M4Val,true);
                    OutVal(5,0,IVCashrw.BasePrice*IVCashrw.Quant,M4Val,true);
                    OutVal(6,0,base,M4Val,true);
                    OutVal(7,0,(base*100)/rowsum,M4Val,true);
                    totinvgp = totinvgp + (base*100)/rowsum;
                  end else begin
                    if (RepSpec.flags[3]!=0) then begin
                      OutString(115,0,left(IVCashrw.Spec,30),false);
                    end;
                    OutVal(350,0,rs,M4Val,true);
                    OutVal(7,0,base,M4Val,true);
                  end;
                  OutVal(8,0,bprcnt,M4Val,true);
                  OutVal(480,0,bon,M4Val,true);
                  EndFormat;
                  ivcost = ivcost + IVCashrw.BasePrice*IVCashrw.Quant;
                  ivbb = ivbb + base;
                  ivsales = ivsales + sales;
                  ivbon = ivbon + bon;
                  ivrowsum = ivrowsum + rowsum;
                end;
              end;
            end;
          end;
        end;
        if (RepSpec.flags[0]==1) then begin
          if (RepSpec.flags[8]!=0) then begin
            if (upinvsales!=0) or (upinvbon!=0) then begin
              StartFormat(15);
              OutLongInt(0,"DblIVVc",IVCashr.SerNr,false);
              OutDate(55,0,IVCashr.InvDate,false);
              OutString(105,0,IVCashr.CustCode,false);
              OutString(165,0,Left(IVCashr.Addr0,20),false);
              OutVal(7,0,upinvsales,M4Val,true);
              OutVal(480,0,upinvbon,M4Val,true);
              EndFormat;
            end;
            upinvsales = 0;
            upinvbon = 0;
          end;
        end;
        if (ivbb!=0) or (ivbprcnt!=0) or (ivbon!=0) then begin
          if (RepSpec.flags[9]!=0) then begin
            Gray_Divider(100,1);
          end else begin
            Gray_Divider(310,1);
          end;
          StartFormat(15);
          if (RepSpec.flags[9]!=0) then begin
            OutVal(4,0,ivsales,M4Val,true);
            OutVal(5,0,ivcost,M4Val,true);
            OutVal(6,0,ivbb,M4Val,true);
            //OutVal(7,0,(ivbb*100)/ivrowsum,M4Val,true);
            OutVal(7,0,totinvgp,M4Val,true);
            totinvgp = 0;
          end else begin
            OutVal(7,0,ivbb,M4Val,true);
          end;
          OutVal(8,0,(ivbon/ivbb)*100,M4Val,true);
          OutVal(480,0,ivbon,M4Val,true);
          EndFormat;
        end;            
      end;
    end;
  end;
  return;
end;

procedure BonusRptPaidPrint(record RcVc RepSpec,record UserVc Userr,var val totbonusbase,var val totbon,var val totcred,var val totcost,var val totsales,var val totrowsum,var Boolean headerfp)
BEGIN
  record ARVc ARr;
  record IVVc IVr;
  row IVVc IVrw;
  record IPrsVc IPrsr;
  Boolean found,testf;
  Boolean firstf;
  vector Boolean CUPAddedf;
  val rowbon,rowbonusbase,rowsales,rowsum;
  val rowcred,v,rowcost;
  val bonus,bprcnt,rs,paid,t,sales,tb1,cost;
  val payprc,preayv;
  LongInt oldSerNr;
  Integer rwcnt,i;
  Date paydate;
  string 255 argnr;
  record INVc INr;
  val ivbb,ivsales,ivbprcnt,ivbon,ivbprccnt,ivcost;
  val base,nrofsalesman;
  record TaxMatrixVc TMr;
  val x,y;
  val totinvgp;

  oldSerNr = -1;
  firstf = true;
  IPrsr.TransDate = RepSpec.d1;
  found = true;
  while (LoopKey("TransDate",IPrsr,1,found)) begin
    testf = false;
    if (found) then begin
      if ((nonblankdate(RepSpec.d2)) and (IPrsr.TransDate>RepSpec.d2)) then begin found = false; end;
    end;  
    if (found) then begin
      testf = true;
      if (IPrsr.TransType==kIPrsTransTypeCashOut) then begin testf = false; end;
      if (IPrsr.TransType==kIPrsTransTypeReverseCustomerPrepayment) then begin testf = false; end;

      if (IPrsr.TransType==kIPrsTransTypeInvoice) then begin 
        IVr.SerNr = IPrsr.IVNr;
        testf = ReadFirstMain(IVr,1,true);
        if (nonblank(RepSpec.ObjStr)) then begin
          if (SetInSet(RepSpec.ObjStr,IVr.Objects)==false) then begin testf = false; end;
        end;
        if (RepSpec.flags[11]==1) then begin
          if (CheckPayDeal(IVr.PayDeal)==false) then begin 
            testf = false;
          end;
        end;
        if (testf) then begin
          testf = false;
          rwcnt = MatRowCnt(IVr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVr,i,IVrw);
            if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeCorrection) or ((IVrw.stp==kInvoiceRowTypeDownpayment) and (RepSpec.flags[10]==1)) then begin
              if (nonblank(IVrw.Salesmen)) then begin
                if (SetInSet(Userr.Code,IVrw.Salesmen)) then begin 
                  testf = true; 
                  i = rwcnt;
                end;
              end else begin
                if (SetInSet(Userr.Code,IVr.SalesMan)) then begin 
                  testf = true; 
                  i = rwcnt;
                end;
              end;
            end;
          end;
        end;

        if (testf) then begin
          ARr.InvoiceNr = IVr.SerNr;
          if (ReadFirstMain(ARr,1,true)) then begin end;
          if (true) then begin 
            if (ARr.BookRVal==IVr.BaseSum4) then begin 
              testf = false; 
            end else begin
              if (IVr.InvType!=kInvoiceTypeCash and IVr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) then begin
                testf = false; 
              end;
              rwcnt = MatRowCnt(IVr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(IVr,i,IVrw);
                if (IVrw.stp==kInvoiceRowTypePrepayment) then begin
                  if (IVrw.CUPNr!=-1) then begin
                    testf = true; 
                    i = rwcnt; 
                  end;
                end;
              end;
            end;
          end;
        end;      
      end;
      if (IPrsr.TransType==kIPrsTransTypeReceipt) or (IPrsr.TransType==kIPrsTransTypeCashIn) or (IPrsr.TransType==kIPrsTransTypeNLTransaction) or (IPrsr.TransType==kIPrsTransTypePurgeNLTransaction) then begin
        IVr.SerNr = IPrsr.IVNr;
        testf = ReadFirstMain(IVr,1,true);
        if (testf) then begin
          if (IVr.OKFlag==0) then begin testf = false; end;
          if (IVr.Invalid!=0) then begin testf = false; end;
          if (nonblank(RepSpec.ObjStr)) then begin
            if (SetInSet(RepSpec.ObjStr,IVr.Objects)==false) then begin testf = false; end;
          end;
          if (nonblank(RepSpec.Stext)) then begin
            if (RepSpec.Stext!=IVr.BranchID) then begin testf = false; end;
          end;
          if (RepSpec.flags[11]==1) then begin
            if (CheckPayDeal(IVr.PayDeal)==false) then begin 
              testf = false;
            end;
          end;
        end;
        if (testf) then begin
          testf = false;
          rwcnt = MatRowCnt(IVr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVr,i,IVrw);
            if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeCorrection) or ((IVrw.stp==kInvoiceRowTypeDownpayment) and (RepSpec.flags[10]==1)) then begin
              if (nonblank(IVrw.Salesmen)) then begin
                if (SetInSet(Userr.Code,IVrw.Salesmen)) then begin 
                  testf = true; 
                  i = rwcnt;
                end;
              end else begin
                if (SetInSet(Userr.Code,IVr.SalesMan)) then begin 
                  testf = true; 
                  i = rwcnt;
                end;
              end;
            end;
          end;
        end;
      end;     
    end;
    if (testf) then begin      
      paid = blankval;
      rwcnt = MatRowCnt(IVr);
      if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
        paid = IVr.Sum4;
      end else begin
        if (CUPAddedf[IVr.SerNr]==false) then begin
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVr,i,IVrw);
            if (IVrw.stp==kInvoiceRowTypePrepayment) then begin
              if (IVrw.CUPNr!=-1) then begin
                if (DateInRange(IVr.TransDate,RepSpec.d1,RepSpec.d2)) then begin
                  paid = paid + IVrw.Sum;
                  CUPAddedf[IVr.SerNr] = true;
                end;
              end;
            end;
          end;
        end;
      end;
      if (IPrsr.TransType==kIPrsTransTypeReceipt) then begin
        PSFindPaydAmount2(IVr,IPrsr,false,t,tb1,paydate);
        paid = paid + t;
      end;
      if (IPrsr.TransType==kIPrsTransTypePurgeNLTransaction) then begin
        PSFindPaydAmountPurgeTR(IPrsr,t,paydate);      
        paid = paid + t;
      end;
      if (IPrsr.TransType==kIPrsTransTypeNLTransaction) then begin
        PSFindPaydAmountTR(IPrsr,t,paydate);      
        paid = paid + t;
      end;
      if (IPrsr.TransType==kIPrsTransTypeCashIn) then begin
        PSFindPaydAmountCLIn(IPrsr,t,paydate);      
        paid = paid + t;
      end;
      if (paid==IVr.Sum4) then begin
        payprc = 1;
      end else begin
        if (paid>=0) then begin
//          payprc = (IVr.Sum4 - paid)/IVr.Sum4;  //mathematics ... ES
          payprc = paid/IVr.Sum4;
        end else begin
          if (-paid==IVr.Sum4) then begin
            payprc = -1;
          end else begin
//            payprc = (IVr.Sum4 + paid)/IVr.Sum4; //mathematics ... ES
            payprc = paid/IVr.Sum4;
          end;
        end;
      end; 
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        paid = -paid;
      end;      
      preayv = blankval;
/*      
      if (IPrsr.TransType==kIPrsTransTypeReceipt) then begin
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          if (IVrw.stp==kInvoiceRowTypePrepayment) then begin
            preayv = preayv + IVrw.Sum;
          end;
        end;
      end;
*/      
      if (paid==0) then begin
        testf = false;
      end;
      if (RepSpec.flags[10]==0) then begin
        if (IVr.InvType==kInvoiceTypeDownpayment) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.Stext)) then begin
        if (RepSpec.Stext!=IVr.BranchID) then begin testf = false; end;
      end;
      if (testf) then begin
        nrofsalesman = CountObjects(IVr.SalesMan);
        ivbb = blankval;
        ivsales = blankval;
        ivbprcnt = blankval;
        ivbprccnt = 0;
        ivbon = blankval;
        ivcost = blankval;
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          testf = true;
          if (nonblank(RepSpec.f6)) then begin
            if (ReadFirstItem(IVrw.ArtCode,INr,true,true)) then begin
              if (SetInSet(RepSpec.f6,INr.DispGroups)) then begin
                testf = false;
              end;
            end;
          end;
          if (nonblank(IVrw.Salesmen)) then begin
            if (SetInSet(Userr.Code,IVrw.Salesmen)==false) then begin testf = false; end;
          end else begin
            if (SetInSet(Userr.Code,IVr.SalesMan)==false) then begin testf = false; end;
          end;

          if (((IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeCorrection) or (IVrw.stp==kInvoiceRowTypeDownpayment)) and (testf)) then begin
            if (IVrw.Sum!=0) then begin
              if (firstf) then begin
                if (headerfp) then begin
                  BonusRptDetailedHeader(1330); // Invoices 
                  headerfp = false;
                end;
                if (RepSpec.flags[0]==0) then begin
                  StartFormat(15);
                  OutString(0,0,Userr.Code,false);
                  OutString(55,0,Userr.Name,false);
                  EndFormat;
                  Gray_Divider(0,480);
                end;
              end;
              firstf = false;
              v = IVrw.Sum - (IVrw.Sum*preayv)/IVr.Sum4;
              sales = MulRateToBase1(IVr.CurncyCode,v,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
              if (RepSpec.flags[1]==0) then begin
                v = IVrw.Sum - (IVrw.Sum*preayv)/IVr.Sum4;
                rs = MulRateToBase1(IVr.CurncyCode,v,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
              end else begin
                rs = IVrw.rowGP - (IVrw.rowGP*preayv)/IVr.Sum4;
              end;
              UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
              rs = rs*payprc;
              if (RepSpec.flags[1]!=0) then begin
                sales = rs;
              end else begin
                FindSalesExVat(TMr,IVrw.VATCode,rs,IVr.InclVAT,IVr.NoTAXonVAT,rs);
              end;
              base = rs / nrofsalesman;
              cost = IVrw.Quant*IVrw.BasePrice;
              CalcBonus(IVrw.ArtCode,Userr,IVr.CustCode,base,bprcnt,bonus,RepSpec.flags[7],RepSpec.vals0);
              if ((IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) and (base>0)) then begin
                bonus = -bonus;
                IVrw.Sum = -IVrw.Sum;
                sales = -sales;
                rs = -rs;
                base = -base;
                cost = -cost;
                IVrw.BasePrice = -IVrw.BasePrice;
              end;
              rowbonusbase = rowbonusbase + rs;
              rowsales = rowsales + sales;
              rowbon = rowbon + bonus;
              rowcost = rowcost + cost;
              if (RepSpec.flags[0]==0) then begin
                if (BonusRowPrint(IVrw.Sum,bonus,RepSpec.UsedOnly,RepSpec.flags[6])) then begin
                  PrintIVHeader(RepSpec,Userr.Code,IVr,oldSerNr);
                  if (RepSpec.flags[9]!=0) then begin
                    if (RepSpec.flags[3]!=0) then begin
                      OutString(12,0,left(IVrw.Spec,25),false);
                    end;
                    OutVal(150,0,IVrw.Quant,M4Val,true);
                    OutVal(2,0,IVrw.Price,M4Val,true);
                    OutVal(3,0,IVrw.Sum/IVrw.Quant,M4Val,true);
                    OutVal(4,0,sales,M4Val,true);
                    OutVal(5,0,IVrw.BasePrice*IVrw.Quant,M4Val,true);
                    OutVal(6,0,base,M4Val,true);
                    if (RepSpec.flags[1]==1) then begin 
                      OutVal(7,0,(base*100)/sales,M4Val,true);
                      totinvgp = totinvgp + (base*100)/sales;
                    end; 
                  end else begin
                    if (RepSpec.flags[3]!=0) then begin
                      OutString(115,0,left(IVrw.Spec,30),false);
                    end;
                    OutVal(350,0,rs,M4Val,true);
                    OutVal(7,0,base,M4Val,true);
                  end;
                  OutVal(8,0,bprcnt,M4Val,true);
                  OutVal(480,0,bonus,M4Val,true);
                  EndFormat;
                  ivbb = ivbb + rs;
                  ivsales = ivsales + sales;
                  ivbprcnt = ivbprcnt + bprcnt;
                  ivbprccnt = ivbprccnt + 1.00;
                  ivbon = ivbon + bonus;
                  ivcost = ivcost + cost;
                end;
              end else begin
                ivbb = ivbb + rs;
                ivsales = ivsales + sales;
                ivbon = ivbon + bonus;
                ivcost = ivcost + cost;
              end;
            end;
          end;
        end;
        
        
        if (RepSpec.flags[0]!=0) then begin
          if (RepSpec.flags[8]!=0) then begin
            if (ivbb!=0) or (ivbon!=0) then begin
              StartFormat(15);
              OutString(0,"DblIVVc",IVr.SerNr,false);
              OutDate(55,0,IVr.InvDate,false);
              OutString(105,0,IVr.CustCode,false);
              OutString(165,0,Left(IVr.Addr0,20),false);
              //OutVal(7,0,ivbb,M4Val,true);
              if (RepSpec.flags[1]==1) then begin 
                OutVal(7,0,totinvgp,M4Val,true);
              end;
              OutVal(480,0,ivbon,M4Val,true);
              EndFormat;
            end;
          end;
        end else begin
          if (ivbb!=0) or (ivbprcnt!=0) or (ivbon!=0) then begin
            Gray_Divider(320,1);
            StartFormat(15);
            if (RepSpec.flags[1]==1) then begin 
              OutVal(7,0,ivbb,M4Val,true);
            end;
            OutVal(8,0,ivbprcnt/ivbprccnt,M4Val,true);
            OutVal(480,0,ivbon,M4Val,true);
            EndFormat;
          end;
        end;
      end;
    end;
  end;
  PrintIVCash(Userr,RepSpec,firstf,
              rowcred,rowbon,rowbonusbase,rowsales,rowcost,rowsum,x,y);
  if (firstf==false) then begin
    AddRptResults(totbonusbase,totbon,totcost,totsales,totrowsum,rowbonusbase,rowsales,rowbon,totcred,rowcred,rowcost,rowsum);
    BonusRptResults(RepSpec,Userr.Code,Userr.Name,rowbonusbase,rowsales,rowbon,rowcred,rowcost,rowsum);
    rowbonusbase = blankval;
  end;
  RETURN;
END;

procedure BonusRptPaid(record RcVc RepSpec,var val totbonusbase,var val totbon,var val totcred,var val totcost,var val totsales,var val totrowsum,var Boolean headerfp)
BEGIN
  record UserVc UserR;
  Boolean found;
  string 255 frus,tous;
  
  frus = FirstInRange(RepSpec.f1,20);
  tous = LastInRange(RepSpec.f1,20);
  found = true;
  UserR.Code = frus;
  while (LoopMain(UserR,1,found)) begin
    if (nonblank(RepSpec.f1)) then begin
      if (UserR.Code>tous) then begin
        found = false;
      end;
    end;    
    if (found) then begin
      BonusRptPaidPrint(RepSpec,Userr,totbonusbase,totbon,totcred,totcost,totsales,totrowsum,headerfp);
    end;  
  end;
  return;
end;

function Boolean CreditToCashInv(record IVVc IVp)
begin
  Boolean res;
  record IVVc IV2r;
  
  IV2r.SerNr = IVp.CredInv;
  if (ReadFirstMain(IV2r,1,true)) then begin
    if (IV2r.InvType==kInvoiceTypeCash or IV2r.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
      res = true;
    end;  
  end;
  CreditToCashInv = res;
  return;
end;

global
procedure BonusRn(var record RcVc RepSpec)
begin
  record UserVc Userr;
  record IVVc IVr;
  record CUVc CUr;
  row IVVc IVrw;
  Boolean found;
  val bon,totbon,bprcnt,totbonusbase,totcost,totsales,totrowsum;
  val userbon,userbonusbase,usersales,userrowsum;
  val totcred,usercred,rs,usercost,sales,base,gp,rowsum;
  Integer rwcnt,i;
  Boolean testf,skipf;
  LongInt oldSerNr;
  Boolean cashnotes,firstivf;
  string 255 tstr;
  Integer rw;
  string 20 frus,tous;
  record INVc INr;
  val ivbb,ivbprcnt,ivbon,ivcost,ivsales,ivrowsum;
  val upinvsales,upinvbon;
  val nrofsalesman;
  Boolean userfound;
  record TaxMatrixVc TMr;
  val totinvgp;
  
  frus = FirstInRange(RepSpec.f1,20);
  tous = LastInRange(RepSpec.f1,20);
  StartReportJob(USetStr(4901));
  rw = 1;
  if ((blankdate(RepSpec.d1)) and (blankdate(RepSpec.d2))) then begin
    RepSpec.d1 = RepSpec.sStartDate;
    RepSpec.d2 = RepSpec.sEndDate;
  end;
  HT2Per(RepSpec.d1,RepSpec.d2,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if(RepSpec.flags[0]==1) then begin
    tstr = USetStr(1159);
  end else begin
    tstr = USetStr(1160);
  end;  
  Header(rw,tstr,0);
  HTSaleMan(RepSpec.f1,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (RepSpec.ArtMode==0) then begin
    tstr = USetStr(4912);
  end else begin
    tstr = USetStr(4913);
  end;  
  Header(rw,tstr,0);
  if (RepSpec.flags[1]==0) then begin
    tstr = USetStr(4916);
  end else begin
    tstr = USetStr(4917);
  end;  
  Header(rw,tstr,1);
  rw = rw + 1;
  if (RepSpec.flags[9]!=0) then begin
    Header(rw,USetStr(17576),0);
  end;
  if (RepSpec.flags[11]!=0) then begin
    Header(rw,USetStr(17577),0);
  end;
  EndHeader;
  SetRepCol(2,190);
  SetRepCol(3,240);
  SetRepCol(4,285);
  SetRepCol(5,325);
  SetRepCol(6,375);
  SetRepCol(7,410);
  SetRepCol(8,440);
  StartFormat(15);
  OutString(0,0,USetStr(4908),false); 
  EndFormat;
  StartFormat(15)
  if (RepSpec.flags[0]==0) then begin
    OutString(0,0,USetStr(4902),false);
    if (RepSpec.ArtMode!=0) then begin
      OutString(55,0,USetStr(5205),false); 
    end else begin
      OutString(55,0,USetStr(5205),false); 
    end;  
    if (RepSpec.flags[3]!=0) then begin
      OutString(115,0,USetStr(4923),false);
    end;  
    if (RepSpec.flags[4]!=0) then begin
      OutString(235,0,USetStr(2354),false);
    end;  
    if (RepSpec.flags[9]!=0) then begin
      OutString(2,0,USetStr(17574),true); 
      OutString(3,0,USetStr(17575),true); 
      if (RepSpec.flags[1]!=0) then begin
        OutString(4,0,USetStr(4899),true); 
      end else begin
        OutString(4,0,USetStr(4900),true); 
      end;
      OutString(5,0,USetStr(4929),true); 
      OutString(6,0,USetStr(17573),true); 
      if (RepSpec.flags[1]==1) then begin 
        OutString(7,0,USetStr(17571),true); 
      end;
    end else begin
      if (RepSpec.flags[1]==0) then begin
        OutString(350,0,USetStr(4900),true); 
      end else begin
        OutString(350,0,USetStr(17570),true); 
      end;
      OutString(7,0,USetStr(17573),true); 
    end;
    OutString(8,0,USetStr(4904),true);
  end else begin
    if (RepSpec.flags[0]==1) then begin
      OutString(315,0,USetStr(4911),true); 
    end;
    if (RepSpec.flags[9]!=0) then begin
      OutString(4,0,USetStr(4899),true); 
      OutString(5,0,USetStr(17572),true);
      OutString(6,0,USetStr(17573),true); 
    end;
    if (RepSpec.flags[1]==0) then begin
     // OutString(7,0,USetStr(17571),true); 
    end else begin
      OutString(7,0,USetStr(17570),true); 
    end;
  end;
  OutString(480,0,USetStr(4905),true);   
  EndFormat;
  Gray_Divider(0,1);
  if (RepSpec.ArtMode==0) then begin
    userfound = true;
    Userr.Code = frus;
    while (LoopMain(Userr,1,userfound)) begin
      if (nonblank(RepSpec.f1)) then begin
        if (Userr.Code>tous) then begin userfound = false; end;
      end;
      if (userfound) then begin
        userbon = blankval;
        userbonusbase = blankval;
        usersales = blankval;
        usercred = blankval;
        usercost = blankval;

        ResetLoop(IVr); 
        RecordClear(IVr);  
        IVr.InvDate = RepSpec.d1;
        IVr.SalesMan = frus;
        found = true;
        firstivf = true;
        IVr.InvDate = RepSpec.d1;
//        while (LoopKey("InvDate:" & Userr.Code,IVr,1,found)) begin //no Salesmen from matrix
        while (LoopKey("InvDate",IVr,1,found)) begin
          if ((nonblankdate(RepSpec.d1)) and (IVr.InvDate<RepSpec.d1)) then begin
            found = false;
          end;   
          if ((nonblankdate(RepSpec.d2)) and (IVr.InvDate>RepSpec.d2)) then begin
            found = false;
          end;      
          if (found) then begin
            testf = true;
            if (IVr.OKFlag==0) then begin testf = false; end;
            if (IVr.InvType==kInvoiceTypePrepayment) then begin testf = false; end;
            if (IVr.Invalid!=0) then begin testf = false; end;
            if ((RepSpec.ArtMode==1) and (testf==true)) then begin
              if ((IVr.InvType!=kInvoiceTypeCash and IVr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) and (IVr.InvType!=kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales)) then begin testf = false; end;
            end;  
            if (RepSpec.ArtMode==1) then begin
              if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                if (CreditToCashInv(IVr)==false) then begin
                  testf = false;              
                end;
              end;
            end;      
            if (nonblank(RepSpec.Stext)) then begin
              if (RepSpec.Stext!=IVr.BranchID) then begin testf = false; end;
            end;
            if (nonblank(RepSpec.ObjStr)) then begin
              if (SetInSet(RepSpec.ObjStr,IVr.Objects)==false) then begin testf = false; end;
            end;
            if (RepSpec.flags[10]==0) then begin
              if (IVr.InvType==kInvoiceTypeDownpayment) then begin testf = false; end;
            end;
            if (RepSpec.flags[11]==1) then begin
              if (CheckPayDeal(IVr.PayDeal)==false) then begin 
                testf = false;
              end;
            end;
            if (testf) then begin
              testf = false;
              rwcnt = MatRowCnt(IVr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(IVr,i,IVrw);
                if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeCorrection) or ((IVrw.stp==kInvoiceRowTypeDownpayment) and (RepSpec.flags[10]==1)) then begin
                  if (nonblank(IVrw.Salesmen)) then begin
                    if (SetInSet(Userr.Code,IVrw.Salesmen)) then begin 
                      testf = true; 
                      i = rwcnt;
                    end;
                  end else begin
                    if (SetInSet(Userr.Code,IVr.SalesMan)) then begin 
                      testf = true; 
                      i = rwcnt;
                    end;
                  end;
                end;
              end;
            end;
            if (testf) then begin
              ivsales = blankval; ivcost = blankval; ivbb = blankval; ivbon = blankval;
              if (firstivf) then begin
                if (RepSpec.flags[0]==0) then begin
                  StartFormat(15);
                  if (nonblank(IVr.SalesMan)) then begin
                    OutString(0,0,Userr.Code,false);
                    OutString(55,0,Userr.Name,false);
                  end else begin
                    OutString(0,0,USetStr(4914),false);
                  end;
                  EndFormat;
                  Gray_Divider(0,480);
                end;
                firstivf = false;
              end;
              nrofsalesman = CountObjects(IVr.SalesMan);
              rwcnt = MatRowCnt(IVr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(IVr,i,IVrw);
                testf = true;
                if (nonblank(RepSpec.f6)) then begin
                  if (ReadFirstItem(IVrw.ArtCode,INr,true,true)) then begin
                    if (SetInSet(RepSpec.f6,INr.DispGroups)) then begin
                      testf = false;
                    end;
                  end;
                end;
                if ((IVrw.stp!=kInvoiceRowTypeNormal) and (IVrw.stp!=kInvoiceRowTypeStructuredItemComponent) and (IVrw.stp!=kInvoiceRowTypeCorrection) and (IVrw.stp!=kInvoiceRowTypeDownpayment)) then begin testf = false; end;               
                if (testf) then begin
                  testf = false; 
                  if (nonblank(IVrw.Salesmen)) then begin
                    if (SetInSet(Userr.Code,IVrw.Salesmen)) then begin 
                      testf = true; 
                    end;
                    nrofsalesman = CountObjects(IVrw.Salesmen);
                  end else begin
                    if (SetInSet(Userr.Code,IVr.SalesMan)) then begin 
                      testf = true; 
                    end;
                  end;
                end;
                if (testf) then begin
                  if (IVrw.stp==kInvoiceRowTypeCorrection) then begin
                    IVrw.Sum = -IVrw.Sum;
                    IVrw.BasePrice = -IVrw.Sum;
                    IVrw.rowGP = -IVrw.rowGP;
                  end;
                  rowsum = 0;
                  if (IVrw.Sum!=0) or (IVrw.BasePrice!=0) then begin
                    sales = MulRateToBase1(IVr.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                    UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
                    FindSalesExVat(TMr,IVrw.VATCode,sales,IVr.InclVAT,IVr.NoTAXonVAT,sales);
                    rowsum = MulRateToBase1(IVr.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                    FindSalesExVat(TMr,IVrw.VATCode,rowsum,IVr.InclVAT,IVr.NoTAXonVAT,rowsum);
                    if (RepSpec.flags[1]!=0) then begin
                      rs = IVrw.rowGP;//already in base 1
                    end else begin
                      rs = rowsum;
                    end;
                    base = rs / nrofsalesman;
                    CalcBonus(IVrw.ArtCode,Userr,IVr.CustCode,base,bprcnt,bon,RepSpec.flags[7],RepSpec.vals0);
                    if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                      bon = -bon;
                      usercred = usercred + rs;                    
                      rs = -rs;
                      base = -base;
                      sales = -sales;
                      IVrw.BasePrice = -IVrw.BasePrice;
                    end;
                    if (BonusRowPrint(IVrw.Sum,bon,RepSpec.UsedOnly,RepSpec.flags[6])) then begin
                      userbon = userbon + bon;
                      userbonusbase = userbonusbase + base;
                      usersales = usersales + sales;
                      usercost = usercost + IVrw.BasePrice*IVrw.Quant;
                      userrowsum = userrowsum + rowsum;
                      upinvsales = upinvsales + rs;
                      upinvbon = upinvbon + bon;
                      if (RepSpec.flags[0]==0) then begin
                        PrintIVHeader(RepSpec,Userr.Code,IVr,oldSerNr);
                        StartFormat(15);
                        if (RepSpec.flags[9]!=0) then begin
                          if (RepSpec.flags[3]!=0) then begin
                            OutString(12,0,left(IVrw.Spec,25),false);
                          end;
                          OutVal(150,0,IVrw.Quant,M4Val,true);
                          OutVal(2,0,MulRateToBase1(IVr.CurncyCode,IVrw.Price,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff),M4Val,true);
                          OutVal(3,0,MulRateToBase1(IVr.CurncyCode,IVrw.Sum/IVrw.Quant,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff),M4Val,true);
                          OutVal(4,0,sales,M4Val,true);
                          OutVal(5,0,IVrw.BasePrice*IVrw.Quant,M4Val,true);
                          OutVal(6,0,base,M4Val,true);
                          if (RepSpec.flags[1]==1) then begin
                            OutVal(7,0,(base*100)/rowsum,M4Val,true);
                            totinvgp = totinvgp + (base*100)/rowsum;
                          end;
                        end else begin
                          if (RepSpec.flags[3]!=0) then begin
                            OutString(115,0,left(IVrw.Spec,30),false);
                          end;
                          OutVal(350,0,rs,M4Val,true);
                          OutVal(7,0,base,M4Val,true);
                        end;
                        OutVal(8,0,bprcnt,M4Val,true);
                        OutVal(480,0,bon,M4Val,true);
                        EndFormat;
                        ivcost = ivcost + IVrw.BasePrice*IVrw.Quant;
                        ivbb = ivbb + base;
                        ivsales = ivsales + sales;
                        ivbon = ivbon + bon;
                        ivrowsum = ivrowsum + rowsum;
                      end;
                    end;
                  end;
                end;
              end;
              if (RepSpec.flags[0]==1) then begin
                if (RepSpec.flags[8]!=0) then begin
                  if (upinvsales!=0) or (upinvbon!=0) then begin
                    StartFormat(15);
                    OutLongInt(0,"DblIVVc",IVr.SerNr,false);
                    OutDate(55,0,IVr.InvDate,false);
                    OutString(105,0,IVr.CustCode,false);
                    OutString(165,0,Left(IVr.Addr0,20),false);
                    OutVal(7,0,upinvsales,M4Val,true);
                    OutVal(480,0,upinvbon,M4Val,true);
                    EndFormat;
                  end;
                  upinvsales = 0;
                  upinvbon = 0;
                end;
              end;
              if (ivbb!=0) or (ivbprcnt!=0) or (ivbon!=0) then begin
                if (RepSpec.flags[9]!=0) then begin
                  Gray_Divider(100,1);
                end else begin
                  Gray_Divider(310,1);
                end;
                StartFormat(15);
                if (RepSpec.flags[9]!=0) then begin
                  OutVal(4,0,ivsales,M4Val,true);
                  OutVal(5,0,ivcost,M4Val,true);
                  OutVal(6,0,ivbb,M4Val,true);
                  //OutVal(7,0,(ivbb*100)/ivrowsum,M4Val,true);
                  if (RepSpec.flags[1]==1) then begin
                    OutVal(7,0,(ivbb*100)/ivsales,M4Val,true);
                  end;
                  totinvgp = 0;
                end else begin
                  OutVal(7,0,ivbb,M4Val,true);
                end;
                OutVal(8,0,(ivbon/ivbb)*100,M4Val,true);
                OutVal(480,0,ivbon,M4Val,true);
                EndFormat;
              end;            
            end;
          end;
        end;
        PrintIVCash(Userr,RepSpec,firstivf,
                    usercred,userbon,userbonusbase,usersales,usercost,userrowsum,upinvsales,upinvbon);

        if (blank(userbonusbase)==false) then begin
          AddRptResults(totbonusbase,totbon,totcost,totsales,totrowsum,userbonusbase,usersales,userbon,totcred,usercred,usercost,userrowsum);
          BonusRptResults(RepSpec,UserR.Code,UserR.Name,userbonusbase,usersales,userbon,usercred,usercost,userrowsum);
        end;      
      end;
    end;
  end else begin
    BonusRptPaid(RepSpec,totbonusbase,totbon,totcred,totcost,totsales,totrowsum,cashnotes);    
  end;
  if (RepSpec.flags[0]==1) then begin
    if (RepSpec.flags[9]!=0) then begin
    end else begin
      Black_Divider(200,480);
      StartFormat(15);
      OutVal(215,0,totcred,M4Val,true);
      rs = totbonusbase + totcred;
      OutVal(315,0,rs,M4Val,true);
      if (RepSpec.flags[1]==1) then begin
//        OutVal(7,0,((totbonusbase-totcost)*100)/rs,M4Val,true);
        OutVal(7,0,totbonusbase,M4Val,true);
      end;
      OutVal(480,0,totbon,M4Val,true);
      EndFormat;
      StartFormat(15);
      EndFormat;
    end;
  end;
  Black_Divider(200,480);
  StartFormat(15);
  if (RepSpec.flags[9]!=0) then begin
    OutString(130,0,USetStr(4906),false);
    OutVal(4,0,totsales,M4Val,true);
    OutVal(5,0,totcost,M4Val,true);
    OutVal(6,0,totbonusbase,M4Val,true);
    if (RepSpec.flags[1]==1) then begin
      if (RepSpec.flags[0]==0) then begin
        OutVal(7,0,(totbonusbase*100)/totsales,M4Val,true);
      end else begin
//      OutVal(7,0,((totbonusbase-totcost)*100)/totsales,M4Val,true);
       OutVal(7,0,(totbonusbase*100)/totsales,M4Val,true);
      end;
    end;
  end else begin
    OutString(200,0,USetStr(4906),false);
    OutVal(7,0,totbonusbase,M4Val,true);
//    if (RepSpec.flags[1]==1) then begin
//      OutVal(7,0,((totbonusbase-totcost)*100)/rs,M4Val,true);//  rs is last invoice , last row  base ...
//    end;
  end;
  OutVal(480,0,totbon,M4Val,true);
  EndFormat;
  EndJob;

  return;
end;
