external function Boolean HasMultiLocations();
external function Boolean IsEnterprise();
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function roundmode SetRoundModeD(Integer);
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure HT2Per(Date, Date , var string);
external procedure HTDetailLevel(Integer, var string);
external procedure HTOKF(Integer,Integer, var string);

procedure TotRepPur(record RcVc RepSpec,record PUVc PUp, var val totex,var val totvat,var val totsum,Integer qty2,Integer unitconvcalc)
begin
  Integer i,rwcnt;
  row PUVc PUrw;
  val total,rowval,t,totvatv,totpayv,ms,s;
  string 255 tstr;
  string 255 frloc,toloc;
  Boolean prntedf,stockedf;
  record SMVc VATr;
  Integer vatcnt;
  record INVc INr;
  
  frloc = FirstInRange(RepSpec.LastAcc,10);
  toloc = LastInRange(RepSpec.LastAcc,10);
  
  RecordNew(VATr);
  SetupVATBase(VATr,vatcnt);            
  total = blankval;
  totvatv = blankval;
  totpayv = blankval;
  rwcnt = MatRowCnt(PUp);
  for (i = 0 ; i<rwcnt ;i = i + 1) begin
    MatRowGet(PUp,i,PUrw);
    if ((PUrw.stp==3) or (PUrw.ovst!=0)) then begin
      goto LSKIPPUROW;
    end;
    if (nonblank(RepSpec.LastAcc)) then begin
      tstr = PUrw.Location;
      if (blank(tstr)) then begin
        tstr = PUp.Location;
      end;
      if (tstr<frloc) then begin goto LSKIPPUROW; end;
      if (tstr>toloc) then begin goto LSKIPPUROW; end;
    end;
    if (RepSpec.flags[11]!=0) then begin
      ReadFirstItem(PUrw.ArtCode,INr,true,false);
      if (INr.ItemType==kItemTypeStocked) then begin
        stockedf = true;
      end else begin
        goto LSKIPPUROW;
      end;
    end;
    if (PUrw.Quant<>0 and RepSpec.ArtMode==1) then begin   
//    rowval = PUrw.Quant * PUrw.UPrice; 
      rowval = PUrw.Quant * PUrw.CostPrice; 
      if (prntedf==false) then begin
        Gray_Divider(0,1)
        StartFormat(15);
        OutString(0,0,USetStr(5002),false);
        if (HasMultiLocations) then begin
          OutString(60,0,PUp.Location,false);
        end;
        OutLongInt(130,"DblPU",PUp.SerNr,false);
        OutDate(200,0,PUp.TransDate,false);
        OutString(300,0,PUp.VECode,false);
        OutString(350,0,PUp.VEName,false);
        EndFormat;
        prntedf = true;
      end;
      StartFormat(15);
      OutString(15,0,PUrw.ArtCode,false);
      OutString(105,0,PUrw.Spec,false);
      if (qty2==1) then begin
        if (unitconvcalc==0) then begin
          t = PUrw.Quant * PUrw.Coefficient;
        end else begin
          t = PUrw.Quant / PUrw.Coefficient;
        end;
        OutVal(320,0,t,M4Val,true);
      end;    
      OutVal(420,0,PUrw.Quant,M4Qty,true);
      OutVal(480,0,rowval,M4Val,true);
      EndFormat;
      total = total + rowval;
      AddVATBase(VATr,PUrw.VATCode,Round(PUrw.Quant*PUrw.CostPrice,SetRoundModeD(2)),blankval,vatcnt,PUp.InclVAT,PUp.NoTAXonVAT);//when changing round to 5 pls look in IN>>Register>>Good receipt - wrong round off on VAT
      s = s + Round(PUrw.Quant*PUrw.CostPrice,SetRoundModeD(5));
    end;
LSKIPPUROW:;   
  end;
  if (prntedf) then begin
    CalcVATBaseVAT(VATr,PUp.InclVAT,PUp.NoTAXonVAT,vatcnt,ms,t);
    totvatv = ms;
    if (PUp.InclVAT!=0) then begin
      totpayv = s;
    end else begin
      totpayv = s + totvatv;
    end;
    
    StartFormat(15);
    OutString(350,0,USetStr(2355),false);
    OutVal(480,0,total,M4Val,true);
    EndFormat;
    StartFormat(15);
    OutString(350,0,USetStr(2356),false);
    OutVal(480,0,totvatv,M4Val,true);
    EndFormat;
    StartFormat(15);
    OutString(350,0,USetStr(2357),false);
    OutVal(480,0,totpayv,M4Val,true);
    EndFormat;
  end;
  totex = totex + total;
  totvat = totvat + totvatv;
  totsum = totsum + totpayv;
  if (RepSpec.ArtMode==0) then begin
    if (RepSpec.flags[11]==0 or stockedf) then begin
      StartFormat(15);
      OutString(0,0,USetStr(5002),false);
      if (HasMultiLocations) then begin
        OutString(60,0,PUp.Location,false);
      end;
      OutLongInt(130,"DblPU",PUp.SerNr,false);
      OutDate(200,0,PUp.TransDate,false);
      OutString(300,0,PUp.VECode,false);
      OutString(350,0,PUp.VEName,false);
      EndFormat;
    end;
  end;
  return;
end;

procedure TotRepRet(record RcVc RepSpec,record RetVc Retp, var val totex,var val totvat,var val totsum,Integer unitconvcalc)
begin
  Integer i,rwcnt;
  row RetVc Retrw;
  val total,rowval,t;
  string 255 tstr;
  string 255 frloc,toloc;
  Boolean testf,prntedf;
  record INVc INr;

  frloc = FirstInRange(RepSpec.LastAcc,10);
  toloc = LastInRange(RepSpec.LastAcc,10);

  total = 0;
  rwcnt = MatRowCnt(Retp);
  for (i = 0 ; i<rwcnt ;i = i + 1) begin
    MatRowGet(Retp,i,Retrw);
    testf = true;
    if (nonblank(RepSpec.LastAcc)) then begin
      tstr = Retrw.Location;
      if (blank(tstr)) then begin
        tstr = Retp.Location;
      end; 
      if (tstr<frloc) then begin testf = false; end;
      if (tstr>toloc) then begin testf = false; end;
    end;
    if (Retrw.Quant==0) then begin testf = false; end;
    if (testf) then begin
      if (RepSpec.flags[11]!=0) then begin
        ReadFirstItem(Retrw.ArtCode,INr,true,false);
        if (INr.ItemType!=kItemTypeStocked) then begin
          testf = false;
        end;
      end;
    end;     
    if (testf) then begin
      if (prntedf==false) then begin
        StartFormat(15);
        OutString(0,0,USetStr(5029),false);
        if (HasMultiLocations) then begin
          OutString(60,0,Retp.Location,false);
        end;
        OutLongInt(130,"DblRet",Retp.SerNr,false);
        OutDate(200,0,Retp.TransDate,false);
        OutString(300,0,Retp.CustCode,false);
        OutString(350,0,Retp.CustName,false);
        EndFormat;
        prntedf = true;
      end;
      rowval = Retrw.Quant * Retrw.UPrice; 
      StartFormat(15);
      OutString(15,0,Retrw.ArtCode,false);
      OutString(105,0,Retrw.Spec,false);
      OutVal(420,0,Retrw.Quant,M4Qty,true);
      OutVal(480,0,rowval,M4Val,true);
      EndFormat;
      total = total + rowval;
    end;
  end;
  if (prntedf) then begin
    StartFormat(15);
    OutString(350,0,USetStr(2355),false);
    OutVal(480,0,total,M4Val,true);
    EndFormat;
  end;
  totex = totex + total;
  totsum = totsum + total;
  return;
end;

procedure TotRepStockMov(record StockMovVc SMp, var val totex,var val totvat,var val totsum, Boolean purchf,Integer qty2,Integer unitconvcalc,record RcVc RepSpec)
begin
  Integer i,rwcnt;
  row StockMovVc SMrw;
  val total,rowval,t;
  Boolean testf;
  record INVc INr;

  StartFormat(15);
  OutString(0,0,USetStr(5012),false);
  if (purchf) then begin
   OutString(60,0,SMp.ToLocation,false);
  end else begin
   OutString(60,0,SMp.FrLocation,false);
  end;   
  OutLongInt(130,"DblStockMov",SMp.SerNr,false);
  OutDate(200,0,SMp.TransDate,false);
  if (purchf) then begin
  OutString(300,0,SMp.FrLocation,false);
  end else begin
    OutString(300,0,SMp.ToLocation,false);
  end;  
  EndFormat;

  total = 0;
  rwcnt = MatRowCnt(SMp);
  for (i = 0 ; i<rwcnt ;i = i + 1) begin
   MatRowGet(SMp,i,SMrw);
   testf = true;
   if (SMrw.Quant==0) then begin
     testf = false;
   end;
   if (testf) then begin
     if (RepSpec.flags[11]!=0) then begin
       ReadFirstItem(SMrw.ArtCode,INr,true,false);
       if (INr.ItemType!=kItemTypeStocked) then begin
         testf = false;
       end;
     end;
   end;     
   if (testf) then begin
     StartFormat(15);
     OutString(15,0,SMrw.ArtCode,false);
     OutString(105,0,SMrw.Spec,false);
     if (qty2==1) then begin
       if (unitconvcalc==0) then begin
         t = SMrw.Quant * SMrw.Coefficient;
       end else begin
         t = SMrw.Quant / SMrw.Coefficient;
       end;
       OutVal(320,0,t,M4Val,true);
     end;          
     OutVal(420,0,SMrw.Quant,M4Qty,true);
     if (purchf) then begin
        rowval = SMrw.Quant * SMrw.NewPrice;
      OutVal(480,0,rowval,M4Val,true);
     end else begin
      OutVal(480,0,SMrw.FIFORowVal,M4Val,true);
     end;
     EndFormat;
     if (purchf) then begin
      total = total + rowval;
     end else begin
        total = total + SMrw.FIFORowVal;
     end;   
   end;
  end;
  StartFormat(15);
  OutString(350,0,USetStr(2355),false);
  OutVal(480,0,total,M4Val,true);
  EndFormat;
  totex = totex + total;
  totsum = totsum + total;
  return;
end;

procedure TotRepProd(record ProdVc Prodp, var val totex,var val totvat,var val totsum, Boolean purchf,Integer qty2,Integer unitconvcalc,record RcVc RepSpec)
begin
  Integer i,rwcnt;
  row ProdVc PDrw;
  val  total,rowval,recqty,fifoval,t;
  Boolean testf;
  record INVc INr;

  StartFormat(15);
  OutString(0,0,USetStr(5016),false);
  if (HasMultiLocations) then begin
    OutString(60,0,Prodp.Location,false);
  end;
  OutLongInt(130,"DblProd",Prodp.SerNr,false);
  OutDate(200,0,Prodp.ProdDate,false);
  EndFormat;

  total = 0;
  rwcnt = MatRowCnt(Prodp);
  for (i = 0 ; i<rwcnt ;i = i + 1) begin
   MatRowGet(Prodp,i,PDrw);
   testf = true;
   if (purchf) then begin
    if (PDrw.OutQty==0) then begin testf = false; end;
   end else begin
    if (PDrw.InQty==0) then begin testf = false; end;
   end;
   if (purchf==false) then begin
     if (PDrw.FIFORowVal==0) then begin testf = false; end;
   end;    
   if (testf) then begin
     if (RepSpec.flags[11]!=0) then begin
       ReadFirstItem(PDrw.Item,INr,true,false);
       if (INr.ItemType!=kItemTypeStocked) then begin
         testf = false;
       end;
     end;
   end;     
   if (testf) then   begin
     StartFormat(15);
     OutString(15,0,PDrw.Item,false);
     OutString(105,0,PDrw.Comment,false);
     if (purchf) then begin
       if (qty2==1) then begin
         if (unitconvcalc==0) then begin
           t = PDrw.OutQty * PDrw.Coefficient;
         end else begin
           t = PDrw.OutQty / PDrw.Coefficient;
         end;
         OutVal(320,0,t,M4Val,true);
       end;                      
       switch (Prodp.RowsHoldActualQty) begin
         case 1: recqty = PDrw.OutQty;
         otherwise recqty = PDrw.OutQty * Prodp.Qty;
       end;      
       rowval = recqty * PDrw.ItemCost;
       OutVal(420,0,recqty,M4Qty,true);
       OutVal(480,0,rowval,M4Val,true);
     end else begin
       if (qty2==1) then begin
         if (unitconvcalc==0) then begin
           t = PDrw.InQty * PDrw.Coefficient;
         end else begin
           t = PDrw.InQty / PDrw.Coefficient;
         end;
         OutVal(320,0,t,M4Val,true);
       end;               
       switch (Prodp.RowsHoldActualQty) begin
         case 1: recqty = PDrw.InQty;
         otherwise recqty = PDrw.InQty * Prodp.Qty;
       end;       
       fifoval = PDrw.FIFORowVal * recqty;
       OutVal(420,0,recqty,M4Qty,true);
       OutVal(480,0,fifoval,M4Val,true);
     end;
     EndFormat;
     if (purchf) then begin
      total = total + rowval;
     end else begin
       total = total + fifoval;
     end;  
   end;
  end;
  StartFormat(15);
  OutString(350,0,USetStr(2355),false);
  OutVal(480,0,total,M4Val,true);
  EndFormat;
  totex = totex + total;
  totsum = totsum + total;
  return;
end;

procedure TotRepProdO(record ProdOperationVc ProdOpp, var val totex,var val totvat,var val totsum, Boolean purchf,Integer qty2,Integer unitconvcalc,record RcVc RepSpec)
begin
  Integer i,rwcnt;
  row ProdOperationVc PDrw;
  val  total,rowval,recqty,fifoval,t;
  Boolean testf;
  record INVc INr;

  StartFormat(15);
  OutString(0,0,USetStr(5016),false);
  if (HasMultiLocations) then begin
    OutString(60,0,ProdOpp.Location,false);
  end;
  OutLongInt(130,"DblProd",ProdOpp.SerNr,false);
  OutDate(200,0,ProdOpp.ProdDate,false);
  EndFormat;

  total = 0;
  rwcnt = MatRowCnt(ProdOpp);
  for (i = 0 ; i<rwcnt ;i = i + 1) begin
   MatRowGet(ProdOpp,i,PDrw);
   testf = true;
   if (purchf) then begin
    if (PDrw.OutQty==0) then begin testf = false; end;
   end else begin
    if (PDrw.InQty==0) then begin testf = false; end;
   end;
   if (purchf==false) then begin
     if (PDrw.FIFORowVal==0) then begin testf = false; end;
   end;    
   if (testf) then begin
     if (RepSpec.flags[11]!=0) then begin
       ReadFirstItem(PDrw.Item,INr,true,false);
       if (INr.ItemType!=kItemTypeStocked) then begin
         testf = false;
       end;
     end;
   end;     
   if (testf) then   begin
     StartFormat(15);
     OutString(15,0,PDrw.Item,false);
     OutString(105,0,PDrw.Comment,false);
     if (purchf) then begin
       if (qty2==1) then begin
         if (unitconvcalc==0) then begin
           t = PDrw.OutQty * PDrw.Coefficient;
         end else begin
           t = PDrw.OutQty / PDrw.Coefficient;
         end;
         OutVal(320,0,t,M4Val,true);
       end;                      
       switch (ProdOpp.RowsHoldActualQty) begin
         case 1: recqty = PDrw.OutQty;
         otherwise recqty = PDrw.OutQty * ProdOpp.Qty;
       end;      
       rowval = recqty * PDrw.ItemCost;
       OutVal(420,0,recqty,M4Qty,true);
       OutVal(480,0,rowval,M4Val,true);
     end else begin
       if (qty2==1) then begin
         if (unitconvcalc==0) then begin
           t = PDrw.InQty * PDrw.Coefficient;
         end else begin
           t = PDrw.InQty / PDrw.Coefficient;
         end;
         OutVal(320,0,t,M4Val,true);
       end;               
       switch (ProdOpp.RowsHoldActualQty) begin
         case 1: recqty = PDrw.InQty;
         otherwise recqty = PDrw.InQty * ProdOpp.Qty;
       end;       
       fifoval = PDrw.FIFORowVal * recqty;
       OutVal(420,0,recqty,M4Qty,true);
       OutVal(480,0,fifoval,M4Val,true);
     end;
     EndFormat;
     if (purchf) then begin
      total = total + rowval;
     end else begin
       total = total + fifoval;
     end;  
   end;
  end;
  StartFormat(15);
  OutString(350,0,USetStr(2355),false);
  OutVal(480,0,total,M4Val,true);
  EndFormat;
  totex = totex + total;
  totsum = totsum + total;
  return;
end;

global
procedure StockInRn(record RcVc RepSpec)
begin
  record PUVc PUr;
  record StockMovVc SMr;
  row StockMovVc SMrw;
  record ProdVc Prodr;
  record ProdOperationVc ProdOr;
  record RetVc Retr;
  row RetVc Retrw;
  record INVc INr;
  Boolean firstloopf;
  Boolean testf,tmpf;
  Boolean foundPU, foundSM, foundProd, foundProdOper;
  Boolean foundPUPU,foundSMSM,foundProdProd,foundProdOp,foundRet,foundRetRet;
  val totex,totvat,totsum;
  string 255 frloc,toloc;
  Date curDate,tmpDate;
  string 255 tstr,t2;
  Integer rw;
  LongInt li;
  record MainStockBlock MainStockRec;
  Integer i,rwcnt;
  
  BlockLoad(MainStockRec);
  firstloopf = true;
  tmpf = false;
  frloc = FirstInRange(RepSpec.LastAcc,10);
  toloc = LastInRange(RepSpec.LastAcc,10);
  StartReportJob(USetStr(7592));
  
    rw = 1;
    HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
    HTDetailLevel(RepSpec.ArtMode,tstr);
    Header(rw,tstr,0);
    HTOKF(RepSpec.flags[1],RepSpec.flags[2],tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;        
    if (nonblank(RepSpec.LastAcc)) then begin
      Header(rw,RepSpec.LastAcc,1);
      rw = rw + 1;
    end;
    if (RepSpec.flags[11]!=0) then begin
      Header(rw,USetStr(11690),0);
    end;
    if (RepSpec.flags[3]==1) then begin
      tstr = USetStr(5002);
    end;
    if (IsEnterprise) then begin
      if (RepSpec.flags[4]==1) then begin
       t2 = USetStr(5012);
       tstr = tstr & ",";
       tstr = tstr & t2;
     end;
     if (RepSpec.flags[5]==1) then begin
       t2 = USetStr(5016);
       tstr = tstr & ",";
       tstr = tstr & t2;
     end;
     if (RepSpec.flags[7]==1) then begin
       t2 = USetStr(2057);
       tstr = tstr & ",";
       tstr = tstr & t2;
     end;
     Header(rw,tstr,1);
   end;     
  
  EndHeader;
  if (RepSpec.ArtMode==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(7581),false);
    if (HasMultiLocations) then begin
      OutString(60,0,USetStr(7582),false);
    end;
    OutString(130,0,USetStr(7583),false);
    OutString(200,0,USetStr(7584),false);
    OutString(300,0,USetStr(7585),false);
    OutString(350,0,USetStr(7586),false);
    EndFormat;
  end;
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
    OutString(0,0,USetStr(7581),false);
    if (HasMultiLocations) then begin
      OutString(60,0,USetStr(7582),false);
    end;
    OutString(130,0,USetStr(7583),false);
    OutString(200,0,USetStr(7584),false);
    OutString(300,0,USetStr(7585),false);
    OutString(350,0,USetStr(7586),false);
    EndFormat;
    StartFormat(15);
    OutString(15,0,USetStr(7588),false);
    OutString(105,0,USetStr(7589),false);
    if (RepSpec.flags[6]==1) then begin
          OutString(320,0,USetStr(7593),true);
        end;  
    OutString(420,0,USetStr(7590),true);
    OutString(480,0,USetStr(7591),true);
    EndFormat;
  end;

  curDate = RepSpec.sStartDate;
  tmpDate = RepSpec.sStartDate;
  if (RepSpec.ArtMode==0) then begin
    Gray_Divider(0,1);
  end;
  Retr.TransDate = curDate;
  PUr.TransDate = curDate;
  SMr.TransDate = curDate;
  Prodr.ProdDate = curDate;

  if (RepSpec.flags[3]==1) then begin
    foundPUPU = true;
  end else begin
    foundPUPU = false;
  end;
  if (RepSpec.flags[4]==1) then begin
    foundSMSM = true;
  end else begin
    foundSMSM = false;
  end;
  if (RepSpec.flags[5]==1) then begin
    foundProdProd = true;
  end else begin
    foundProdProd = false;
  end;
  if (RepSpec.flags[7]==1) then begin
    foundRetRet = true;
  end else begin
    foundRetRet = false;
  end;
  if (RepSpec.flags[8]==1) then begin
    foundProdOp = true;
  end else begin
    foundProdOp = false;
  end;
  
  while ((curDate<=RepSpec.sEndDate) and ((foundPUPU==true) or (foundRetRet==true) or (foundSMSM==true) or (foundProdProd==true) or (foundProdOp==true))) begin

    if (foundPUPU) then begin
      foundPU = true;
      while (LoopKey("TransDate",PUr,2,foundPU)) begin
        testf = true;
        if (curDate<>PUr.TransDate) then begin    
          if (firstloopf) then  begin
           tmpDate = PUr.TransDate;
           tmpf = true;
          end;        
          testf = false;
        end;
        if (testf) then begin
          
          if (RepSpec.ArtMode==0) then begin
            if (nonblank(RepSpec.LastAcc)) then begin
              if (PUr.Location<frloc) then begin testf = false; end;
              if (PUr.Location>toloc) then begin testf = false; end;
            end;    
          end;
          if ((RepSpec.flags[1]==0) and (PUr.OKFlag==0)) then begin testf = false; end;
          if ((RepSpec.flags[2]==0) and (PUr.OKFlag<>0)) then begin testf = false; end;
          if (PUr.Invalid!=0) then begin testf = false; end;             
          if (testf) then begin
            TotRepPur(RepSpec,PUr, totex,totvat,totsum,RepSpec.flags[6],MainStockRec.UnitConvCalc);
          end;
          
        end else begin
          foundPU = false;
          if (RepSpec.sEndDate<PUr.TransDate) then begin
            foundPUPU = false;
          end;
        end;    
      end;
    end;
    if (blankdate(PUr.TransDate)) then begin
      foundPUPU = false;
    end;
    if (foundPU==false) then begin
      StepBack(PUr)
    end;     
    if (foundRetRet) then begin
      foundRet = true;
      while (LoopKey("TransDate",Retr,2,foundRet)) begin
        testf = true;
        if (curDate<>Retr.TransDate) then begin    
          if (firstloopf) then  begin
            if ((tmpDate>Retr.TransDate) or (tmpf==false)) then begin
              tmpDate = Retr.TransDate;
              tmpf = true;
            end;
          end;
          
          testf = false;
        end;
        if (testf) then begin
          if (RepSpec.ArtMode==0) then begin
            if (nonblank(RepSpec.LastAcc)) then begin
              if (Retr.Location<frloc) then begin testf = false; end;
              if (Retr.Location>toloc) then begin testf = false; end;
            end;    
          end;
          if ((RepSpec.flags[1]==0) and (Retr.OKFlag==0)) then begin testf = false; end;
          if ((RepSpec.flags[2]==0) and (Retr.OKFlag<>0)) then begin testf = false; end;
          if (testf) then begin
            testf = false;
            rwcnt = MatRowCnt(Retr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(Retr,i,Retrw);
              if (nonblank(Retrw.ArtCode)) then begin
                ReadFirstItem(Retrw.ArtCode,INr,true,false);
                if (INr.ItemType==kItemTypeStocked) then begin
                  testf = true;
                  i = rwcnt;
                end;
              end;    
            end; 
          end;
          
          if (testf) then begin
           if (RepSpec.ArtMode==1) then begin
              Gray_Divider(0,1);
              TotRepRet(RepSpec,Retr, totex,totvat,totsum,MainStockRec.UnitConvCalc);
           end;
           if (RepSpec.ArtMode==0) then begin
              StartFormat(15);
              OutString(0,0,USetStr(5029),false);
              if (HasMultiLocations) then begin
                OutString(60,0,Retr.Location,false);
              end;
              OutLongInt(130,"DblRet",Retr.SerNr,false);
              OutDate(200,0,Retr.TransDate,false);
              OutString(300,0,Retr.CustCode,false);
              OutString(350,0,Retr.CustName,false);
              EndFormat;
           end;
          end;
          
        end else begin
       //    foundPU = false;
       //   if (RepSpec.sEndDate<PUr.TransDate) then begin
         foundRet = false;
          if (RepSpec.sEndDate<Retr.TransDate) then begin
            foundRetRet = false;
          end;
        end;    
      end;
    end;
    if (blankdate(Retr.TransDate)) then begin
      foundRetRet = false;
    end;
    if (foundRet==false) then begin
      StepBack(Retr)
    end;     
    if (foundSMSM) then begin
      foundSM = true;
      while (LoopKey("TransDate",SMr,2,foundSM)) begin
        testf = true;
        if (curDate<>SMr.TransDate) then begin
          if (firstloopf) then begin
          if ((tmpDate>SMr.TransDate) or (tmpf==false)) then begin
            tmpDate = SMr.TransDate;
            tmpf = true;
          end;
            end;    
          testf = false;
        end;
        if (testf) then begin
          if (nonblank(RepSpec.LastAcc)) then begin
            if (SMr.ToLocation<frloc) then begin testf = false; end;
            if (SMr.ToLocation>toloc) then begin testf = false; end;
          end;
          if ((RepSpec.flags[1]==0) and (SMr.OKFlag==0)) then begin testf = false; end;
          if ((RepSpec.flags[2]==0) and (SMr.OKFlag<>0)) then begin testf = false; end;
          if (testf) then begin
            testf = false;
            rwcnt = MatRowCnt(SMr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(SMr,i,SMrw);
              if (nonblank(SMrw.ArtCode)) then begin
                ReadFirstItem(SMrw.ArtCode,INr,true,false);
                if (INr.ItemType==kItemTypeStocked) then begin
                  testf = true;
                  i = rwcnt;
                end;
              end;    
            end; 
          end;
          if (testf) then begin
            if (RepSpec.ArtMode==1) then begin
              Gray_Divider(0,1);
              TotRepStockMov(SMr, totex,totvat,totsum, true,RepSpec.flags[6],MainStockRec.UnitConvCalc,RepSpec);
            end;
            if (RepSpec.ArtMode==0) then begin
              StartFormat(15);
              OutString(0,0,USetStr(5012),false);
              if (HasMultiLocations) then begin
                OutString(60,0,SMr.ToLocation,false);
              end;
              OutLongInt(130,"DblStockMov",SMr.SerNr,false);
              OutDate(200,0,SMr.TransDate,false);
              OutString(300,0,SMr.FrLocation,false);
              EndFormat;
            end;
          end;
        end else begin
          foundSM = false;
          if (RepSpec.sEndDate<SMr.TransDate) then begin
            foundSMSM = false;
          end;
        end;  
      end;
   end;
   if (blankdate(SMr.TransDate)) then begin
     foundSMSM = false;
   end;
   if (foundSM==false) then begin   
     StepBack(SMr);
   end;     

   if (foundProdProd) then begin
    foundProd = true;
    while (LoopKey("ProdDate",Prodr,2,foundProd)) begin
      testf = true;
      if (curDate<>Prodr.ProdDate) then begin
        if (firstloopf) then begin
        if ((tmpDate>Prodr.ProdDate) or (tmpf==false)) then begin
          tmpDate = Prodr.ProdDate;
          tmpf = true;
        end;
        end;  
        testf = false;
      end;
      if (testf) then begin
        if (nonblank(RepSpec.LastAcc)) begin
          if (Prodr.Location<frloc) then begin testf = false; end;
          if (Prodr.Location>toloc) then begin testf = false; end;
        end;
        if ((RepSpec.flags[1]==0) and ((Prodr.PRStatusFlag<>3) and (Prodr.PRStatusFlag<>5))) then begin testf = false; end;
        if ((RepSpec.flags[2]==0) and ((Prodr.PRStatusFlag==3) or (Prodr.PRStatusFlag==5))) then begin testf = false; end;
        if (testf) then begin
         if (RepSpec.ArtMode==1) then begin
                    Gray_Divider(0,1);
            TotRepProd(Prodr, totex,totvat,totsum, true,RepSpec.flags[6],MainStockRec.UnitConvCalc,RepSpec);
         end;
         if (RepSpec.ArtMode==0) then begin
            StartFormat(15);
            OutString(0,0,USetStr(5016),false);
            if (HasMultiLocations) then begin
              OutString(60,0,Prodr.Location,false);
            end;
            OutLongInt(130,"DblProd",Prodr.SerNr,false);
            OutDate(200,0,Prodr.ProdDate,false);
            EndFormat;
         end;
        end;
      end else begin
        foundProd = false;
        if (RepSpec.sEndDate<Prodr.ProdDate) then begin
          foundProdProd = false;
        end;
      end;  
     end;
   end;
   if (blankdate(Prodr.ProdDate)) then begin
     foundProdProd = false;
   end;
   if (foundProd==false) then begin
     StepBack(Prodr);
   end;     

   if (foundProdOp) then begin
    foundProdOper = true;
    while (LoopKey("ProdDate",ProdOr,2,foundProdOper)) begin
      testf = true;
      if (curDate<>ProdOr.ProdDate) then begin
        if (firstloopf) then begin
        if ((tmpDate>ProdOr.ProdDate) or (tmpf==false)) then begin
          tmpDate = ProdOr.ProdDate;
          tmpf = true;
        end;
        end;  
        testf = false;
      end;
      if (testf) then begin
        if (nonblank(RepSpec.LastAcc)) begin
          if (ProdOr.Location<frloc) then begin testf = false; end;
          if (ProdOr.Location>toloc) then begin testf = false; end;
        end;
        if ((RepSpec.flags[1]==0) and ((ProdOr.PRStatusFlag<>3) and (ProdOr.PRStatusFlag<>5))) then begin testf = false; end;
        if ((RepSpec.flags[2]==0) and ((ProdOr.PRStatusFlag==3) or (ProdOr.PRStatusFlag==5))) then begin testf = false; end;
        if (testf) then begin
         if (RepSpec.ArtMode==1) then begin
                    Gray_Divider(0,1);
            TotRepProdO(ProdOr, totex,totvat,totsum, true,RepSpec.flags[6],MainStockRec.UnitConvCalc,RepSpec);
         end;
         if (RepSpec.ArtMode==0) then begin
            StartFormat(15);
            OutString(0,0,USetStr(5016),false);
            if (HasMultiLocations) then begin
              OutString(60,0,ProdOr.Location,false);
            end;
            OutLongInt(130,"DblProd",ProdOr.SerNr,false);
            OutDate(200,0,ProdOr.ProdDate,false);
            EndFormat;
         end;
        end;
      end else begin
        foundProdOper = false;
        if (RepSpec.sEndDate<ProdOr.ProdDate) then begin
          foundProdOp = false;
        end;
      end;  
     end;
   end;
   if (blankdate(ProdOr.ProdDate)) then begin
     foundProdOp = false;
   end;
   if (foundProdOper==false) then begin
     StepBack(ProdOr);
   end;     

    if (firstloopf) then begin
      curDate = AddDay(tmpDate,-1);
      firstloopf = false;
    end;
    curDate = AddDay(curDate,1);
  end;
  
  if (RepSpec.ArtMode==1) then begin
     Gray_Divider(0,1);
     StartFormat(15);
     OutString(350,0,USetStr(2355),false);
     OutVal(480,0,totex,M4Val,true);
     EndFormat;
     StartFormat(15);
     OutString(350,0,USetStr(2356),false);
     OutVal(480,0,totvat,M4Val,true);
     EndFormat;
     StartFormat(15);
     OutString(350,0,USetStr(2357),false);
     OutVal(480,0,totsum,M4Val,true);
     EndFormat;
     Gray_Divider(0,1);
  end;
  EndJob;
  return;
end;
