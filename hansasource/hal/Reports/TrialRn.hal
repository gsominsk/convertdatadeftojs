external procedure AutomatedSalesOrderly(string);
external procedure HTReportingExchangeRates(Integer,var string);
external function roundmode DefaultRoundMode();
external function Boolean GetOwnerPrc(Date,var Date,var val);
external procedure ExtractObj(string,var Integer,var string);
external procedure BeginCurncyTotals(var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external procedure GetAccTurnover(string,string,Date,Date,record ObjBalVc,string,Integer,Integer,Integer,var val,var val);
external procedure FindFiscalYear(Date,var Date,var Date);
external function Boolean AccInRange(string,string);
external procedure TransAccTurnover(string,string,Date,Date,Integer,Integer,Integer,string,string,var val,var val);
external procedure GetAccStartBalance(string,string,Date,record ObjBalVc,Integer,Integer,string,Integer,var val);
external procedure ListPerTrans(record RcVc);
external procedure HT2Per(Date, Date , var string);
external procedure LstRegDat(var string);
external procedure HTAccs(string,string,Integer, var string);
external procedure HTObj(string,var string);
external procedure HTVatNr(string,var string);
external function Boolean DatePrel(Date);
external procedure HTAccPer(Date,Date,var string);
external procedure MockObjFromVATCode(string,var string);
external procedure GetAccountDescription2(string,string,var string);

procedure TrialLine(record RcVc RepSpec,Integer c1,string t1,string t2,val Sp1,val Sp2,val Sp3,val dv,val cv,Boolean negf,string dblstr)
BEGIN
  val s1,s2,s3,sdv,scv;
  string 255 tstr;

  s1 = Sp1;
  s2 = Sp2;
  s3 = Sp3;
  sdv = dv;
  scv = cv;
  if (negf) then begin
    s1 = -s1;
    s2 = -s2;
    s3 = -s3;
    sdv = -sdv;
    scv = -scv;
  end;
  StartFormat(15);
  OutStringID(c1,dblstr,t1,false,CurrentCompany);
  if (nonblank(t2)) then begin
    tstr = t2;
    GetAccountDescription2(t1,RepSpec.Language,tstr);            
    OutString(2,0,tstr,false);
  end else begin
    OutString(2,0,t2,false);
  end;  
  OutVal(9,0,s1,M4Val,true);
  if (RepSpec.flags[6]==1) then begin
    OutVal(7,0,sdv,M4Val,true);
    OutVal(8,0,scv,M4Val,true);
  end;
  OutVal(4,0,s2,M4Val,true);
  OutVal(5,0,s3,M4Val,true);
  EndFormat;
  RETURN;
END;

procedure TrialHeader(record RcVc RepSpec,Boolean resUseAccum,Date AccumStartDate)
BEGIN
  record BaseCurBlock Basecb;
  Integer rw;
  string 255 tstr;

  BlockLoad(BaseCb);
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  LstRegDat(tstr);
  Header(rw,tstr,0);
  if (resUseAccum) then begin
    HTAccPer(AccumStartDate,RepSpec.sEndDate,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  HTAccs(RepSpec.FirstAcc,RepSpec.LastAcc,RepSpec.UsedOnly,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;  
  if (nonblank(RepSpec.ObjStr)) then begin
    HTObj(RepSpec.ObjStr,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  HTVatNr(RepSpec.f1,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;    
  if (RepSpec.SimVerf==1) then begin
    tstr = USetStr(3019);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (DatePrel(RepSpec.sEndDate)) begin
    tstr = USetStr(3023);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  
  if (RepSpec.flags[4]==1) then begin
    tstr = USetStr(6652);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (RepSpec.flags[5]==1) then begin
    tstr = USetStr(6650);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f3)) then begin
    Header(rw,USetStr(6649) & ": " & RepSpec.f3,1);
    rw = rw + 1;
  end;
  HTReportingExchangeRates(RepSpec.flags[10],tstr);
  Header(rw,tstr,0);
  if (nonblank(RepSpec.CurncyCode)) then begin
    tstr = USetStr(7672);
    tstr = tstr & ": ";
    tstr = tstr & RepSpec.CurncyCode;
    Header(rw,tstr,1);
    rw = rw + 1;
  end else begin
    if (RepSpec.flags[5]==0) then begin
      tstr = USetStr(7672);
      tstr = tstr & ": ";
      if (RepSpec.basecurncy==0) or (RepSpec.basecurncy==kReportBCOneConsolidationRate) then begin
        tstr = tstr & BaseCb.BaseCur1;
      end else begin
        tstr = tstr & BaseCb.BaseCur2;
      end;
      Header(rw,tstr,1);
      rw = rw + 1; 
    end;
  end;
  RETURN;
END;

global
function Boolean CalcTrialRnForAccount(record AccVc Accr,record RcVc RepSpec,record CYBlock CYb,record ConsolidationBlock cr,
                            Boolean resUseAccum,Date FYStartDate,Date FYEndDate,val prc,
                            var Boolean first,var string lastgroup,                            
                            array string acur,array val av1,array val av2,array val av3,var Integer curcnt,
                            var val Sdv,var val Scv,var val Sbd,var val Pbd, var val Ebd,
                            var val Sbs,var val Pbs,var val Ebs,
                            var Boolean negf,var string dblstr,var val Sb,var val Pb,var val Eb,var val dv,var val cv)
begin
  record ObjBalVc ObjBalr;
  record ObjBalVc exclObjBalr;
  val eSb,ePb,eEb;
  val edv,ecv;
  val t;
  Boolean Vws,Objbals,exclObjbals;
  Boolean testf;
  string 255 tstr,RU,oldcrncy;
  Date sd;

  oldcrncy = RepSpec.CurncyCode;
  testf = true;
  RU = RepSpec.ObjStr;
  if (nonblank(RepSpec.f1)) then begin
    MockObjFromVATCode(RepSpec.f1,RU);
  end;
  if (RepSpec.flags[5]==1) then begin
    if (nonblank(Accr.Curncy)) then begin
//      MockObjFromVATCode(Accr.Curncy,RU);
//we can not use mock obj for currency cause it is possible to specify Object parameters window and does not work for not full months
      if (blank(RepSpec.CurncyCode)) then begin        
        RepSpec.CurncyCode = Accr.Curncy;
      end;
    end;
  end;
  ObjBalr.AccNumber = Accr.AccNumber;
  ObjBalr.Object = RU;
  Objbals = ReadFirstMain(ObjBalr,2,true);
  if (Objbals==false) then begin
    if (RepSpec.IncDaughter==1) then begin
      ObjBalr.AccNumber = Accr.AccNumber;
      ObjBalr.Object = RU;
    end;
  end;
  if (nonblank(RepSpec.f3)) then begin
    exclObjBalr.AccNumber = Accr.AccNumber;
    exclObjBalr.Object = RepSpec.f3;
    exclObjbals = ReadFirstMain(exclObjBalr,2,true);
    if (exclObjbals==false) then begin
      if (RepSpec.IncDaughter==1) then begin
        exclObjbals = true;
        exclObjBalr.AccNumber = Accr.AccNumber;
        exclObjBalr.Object = RepSpec.f3;
      end;
    end;
  end;
  
  if ((Accr.AccType==kAccTypeIncome) or (Accr.AccType==kAccTypeExpense)) then begin
    if (resUseAccum==true) then begin
      sd = AddDay(RepSpec.sStartDate,-1);
      t = blankval;
      GetAccTurnover(Accr.AccNumber,RU,FYStartDate,sd,ObjBalr,RepSpec.CurncyCode,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,t,Sb);
      GetAccTurnover(Accr.AccNumber,RU,FYStartDate,RepSpec.sEndDate,ObjBalr,RepSpec.CurncyCode,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,t,Eb);
      Pb = Eb - Sb;
      if (exclObjbals) then begin
        GetAccTurnover(Accr.AccNumber,RepSpec.f3,FYStartDate,sd,exclObjBalr,RepSpec.CurncyCode,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,t,eSb);
        GetAccTurnover(Accr.AccNumber,RepSpec.f3,FYStartDate,RepSpec.sEndDate,exclObjBalr,RepSpec.CurncyCode,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,t,eEb);
        ePb = eEb - eSb;
      end;
    end else begin
      Sb = 0;
      eSb = 0;
      t = blankval;
      GetAccTurnover(Accr.AccNumber,RU,RepSpec.sStartDate,RepSpec.sEndDate,ObjBalr,RepSpec.CurncyCode,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,t,Eb);
      Pb = Eb - Sb;
      if (exclObjbals) then begin
        GetAccTurnover(Accr.AccNumber,RepSpec.f3,RepSpec.sStartDate,RepSpec.sEndDate,exclObjBalr,RepSpec.CurncyCode,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,t,eEb);
        ePb = eEb - eSb;
      end;
    end;
  end;
  if ((Accr.AccType==kAccTypeAsset) or (Accr.AccType==kAccTypeLiability) or (Accr.AccType==kAccTypeEquity)) then begin
    GetAccStartBalance(Accr.AccNumber,RU,RepSpec.sStartDate,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.CurncyCode,RepSpec.IncDaughter,Sb);
    GetAccTurnover(Accr.AccNumber,RU,RepSpec.sStartDate,RepSpec.sEndDate,ObjBalr,RepSpec.CurncyCode,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,Sb,Pb);
    Eb = Sb + Pb;
    if (exclObjbals) then begin
      GetAccStartBalance(Accr.AccNumber,RepSpec.f3,RepSpec.sStartDate,exclObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.CurncyCode,RepSpec.IncDaughter,eSb);
      GetAccTurnover(Accr.AccNumber,RepSpec.f3,RepSpec.sStartDate,RepSpec.sEndDate,exclObjBalr,RepSpec.CurncyCode,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,eSb,ePb);
      eEb = eSb + ePb;
    end;
  end;      
  if (RepSpec.flags[6]==1) then begin
    dv = 0;
    cv = 0;
    TransAccTurnover(Accr.AccNumber,RU,RepSpec.sStartDate,RepSpec.sEndDate,RepSpec.SimVerf,RepSpec.basecurncy,0,RepSpec.CurncyCode,"",dv,cv);        
    if (exclObjbals) then begin
      edv = 0;
      ecv = 0;
      TransAccTurnover(Accr.AccNumber,RepSpec.f3,RepSpec.sStartDate,RepSpec.sEndDate,RepSpec.SimVerf,RepSpec.basecurncy,0,RepSpec.CurncyCode,"",edv,ecv);        
    end;
  end;
  Sb = Sb - eSb;
  Eb = Eb - eEb;
  Pb = Pb - ePb;
  dv = dv - edv;
  cv = cv - ecv;
  if (RepSpec.UsedOnly==1) then begin
    if ((Sb==0) and (Pb==0) and (Eb==0)) then begin testf = false; end;
  end;  
  if (testf) then begin
    if (Accr.Conspr>0) then begin
    if (prc<100) then begin
      Sb = Sb * prc;
      Sb = Sb / 100;
      Sb = Round(Sb,DefaultRoundMode);
      Pb = Pb * prc;
      Pb = Pb / 100;
      Pb = Round(Pb,DefaultRoundMode);
      Eb = Eb * prc;
      Eb = Eb / 100;
      Eb = Round(Eb,DefaultRoundMode);
    end;
    end;
    if ((RepSpec.flags[5]==0) and (RepSpec.flags[9]==0)) then begin
      if (first==false) then begin
        if (lastgroup!=Left(Accr.AccNumber,1)) then begin
          Black_Divider(300,480);
          tstr = USetStr(3248);
          TrialLine(RepSpec,0,tstr,"",Sbd,Pbd,Ebd,Sdv,Scv,false,"");
          StartFormat(10);
          EndFormat;
          Sbd = 0;
          Pbd = 0;
          Ebd = 0;
          Sdv = 0;
          Scv = 0;
        end;
      end;  
    end;  
    first = false;
    lastgroup = Left(Accr.AccNumber,1);

    negf = true;
    if (Accr.AccType==kAccTypeAsset) then begin
      if (CYb.NS1[0]==0) then begin
        negf = false;
      end;          
    end;
    if (Accr.AccType==kAccTypeLiability) then begin
      if (CYb.NS1[1]==0) then begin
        negf = false;
      end;          
    end;
    if (Accr.AccType==kAccTypeEquity) then begin
      if (CYb.NS1[2]==0) then begin
        negf = false;
      end;        
    end;
    if (Accr.AccType==kAccTypeIncome) then begin
      if (CYb.NS1[3]==0) then begin
        negf = false;
      end;          
    end;
    if (Accr.AccType==kAccTypeExpense) then begin
      if (CYb.NS1[4]==0) then begin
        negf = false;
      end;        
    end;      
    if (negf) then begin  
      Sdv = Sdv - dv;
      Scv = Scv - cv;
      Sbs = Sbs - Sb;
      Pbs = Pbs - Pb;
      Ebs = Ebs - Eb;
      Sbd = Sbd - Sb;
      Pbd = Pbd - Pb;
      Ebd = Ebd - Eb;
    end else begin
      Sdv = Sdv + dv;
      Scv = Scv + cv;
      Sbs = Sbs + Sb;
      Pbs = Pbs + Pb;
      Ebs = Ebs + Eb;
      Sbd = Sbd + Sb;
      Pbd = Pbd + Pb;
      Ebd = Ebd + Eb;
    end;
    dblstr = "DblNL";
    if (RepSpec.IncDaughter!=0) then begin
      dblstr = "DblNLSpec";
    end;
//    TrialLine(RepSpec,0,Accr.AccNumber,Accr.Comment,Sb,Pb,Eb,dv,cv,negf,dblstr);
    if (RepSpec.flags[5]==1) then begin
      AddCurncyTotals(acur,av1,curcnt,Accr.Curncy,Sb);
      AddCurncyTotals(acur,av2,curcnt,Accr.Curncy,Pb);
      AddCurncyTotals(acur,av3,curcnt,Accr.Curncy,Eb);
    end;
  end;
  RepSpec.CurncyCode = oldcrncy;
  CalcTrialRnForAccount = testf;
  return;
end;

procedure TrialRnForAccount(record AccVc Accr,record RcVc RepSpec,record CYBlock CYb,record ConsolidationBlock cr,
                            Boolean resUseAccum,Date FYStartDate,Date FYEndDate,val prc,
                            var Boolean first,var string lastgroup,                            
                            array string acur,array val av1,array val av2,array val av3,var Integer curcnt,
                            var val Sdv,var val Scv,var val Sbd,var val Pbd, var val Ebd,
                            var val Sbs,var val Pbs,var val Ebs)
begin
  string 255 dblstr;
  Boolean negf;
  val Sb,Pb,Eb,dv,cv;
  Boolean triallinef;

   if (CalcTrialRnForAccount(Accr,RepSpec,CYb,cr,resUseAccum,FYStartDate,FYEndDate,prc,
                            first,lastgroup,acur,av1,av2,av3,curcnt,
                            Sdv,Scv,Sbd,Pbd,Ebd,Sbs,Pbs,Ebs,
                            negf,dblstr,Sb,Pb,Eb,dv,cv)) then begin
    triallinef = true;
  end;

  if (triallinef) then begin
    TrialLine(RepSpec,0,Accr.AccNumber,Accr.Comment,Sb,Pb,Eb,dv,cv,negf,dblstr);
  end;
  return;
end;

global
procedure TrialRn(var record RcVc RepSpec)
begin
  record AccVc Accr;
  record CYBlock CYb;
  val Sdv,Scv;
  val Sbd,Pbd,Ebd;
  val Sbs,Pbs,Ebs;
  Boolean Vws,resUseAccum;
  Boolean first,testf,cmpf;
  string 1 lastgroup;
  string 255 tstr;
  Date FYStartDate,FYEndDate;
  record ConsolidationBlock cr;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt;
  Integer pos;
  Integer oldcomp,curcomp;
  val prc;
  Date ed;
  string 255 fracc,toacc;
  transaction string 255 gConsolidationDaughterCompany;

  gConsolidationDaughterCompany = RepSpec.f4;
  if (RepSpec.critname=="SB2RClass") then begin//Consolidation    
    BlockLoad(cr);
    RepSpec.basecurncy = cr.ConsCrncy;  
    if (RepSpec.flags[10]!=0) then begin
      RepSpec.basecurncy = kReportBCOneConsolidationRate;
    end;
  end;
  first = true;
  if (nonblank(RepSpec.f1)) then begin
    if (RepSpec.wholemonthf==0) then begin
//      SetEFErr(1163,NIL,offset(RcType,sEndDate));
//      goto LTrialRn;
    end;
    if (nonblank(RepSpec.ObjStr)) then begin
//      SetEFErr(1166,NIL,offset(RcType,ObjStr));
//      goto LTrialRn;
    end;
  end;
  BlockLoad(CYb);
  RepSpec.Comparison = 0;
  RepSpec.FirstAcc = FirstInRange(RepSpec.AccStr,10);
  RepSpec.LastAcc = LastInRange(RepSpec.AccStr,10);
  resUseAccum = false;
  FindFiscalYear(RepSpec.sStartDate,FYStartDate,FYEndDate);
  if (FYStartDate!=RepSpec.sStartDate) then begin
    resUseAccum = true;
  end;
  StartReportJob(USetStr(3241));
  TrialHeader(RepSpec,resUseAccum,FYStartDate);
  EndHeader;
  
  BeginCurncyTotals(curcnt);
  SetRepCol(2,50);
  if (RepSpec.flags[6]==0) then begin
    SetRepCol(9,288);
    SetRepCol(3,288);
    SetRepCol(4,384);
  end else begin
    SetRepCol(9,200);
    SetRepCol(7,270);
    SetRepCol(8,340);
    SetRepCol(4,410);
  end;
  SetRepCol(5,480);
  SetRepCol(6,15);
  StartFormat(20);
  OutString(0,0,USetStr(3242),false);
  OutString(50,0,USetStr(3243),false);
  OutString(9,0,USetStr(3244),true);
  if (RepSpec.flags[6]==1) then begin
    OutString(7,0,USetStr(3251),true);
    OutString(8,0,USetStr(3252),true);
  end;
  OutString(4,0,USetStr(3245),true);
  OutString(5,0,USetStr(3246),true);
  EndFormat;  
  lastgroup = " ";
  if (nonblank(RepSpec.f2)) then begin
    cmpf = true;
    oldcomp = CurrentCompany;
    pos = 0;
    ExtractObj(RepSpec.f2,pos,tstr);
    curcomp = StringToInt(tstr);
    if (curcomp!=oldcomp) then begin
      cmpf = SetCompany(curcomp,false);
    end;
    if (cmpf) then begin
      if (GetOwnerPrc(RepSpec.sStartDate,ed,prc)) then begin end;
      ExtractObj(RepSpec.f2,pos,tstr);
      while (nonblank(tstr)) begin
        fracc = FirstInRange(tstr,10);
        toacc = LastInRange(tstr,10);
        ResetLoop(Accr);
        Accr.AccNumber = fracc;
        Vws = true;
        while (LoopMain(Accr,1,Vws)) begin
          if (nonblank(toacc)) then begin
            if (Accr.AccNumber>toacc) then begin Vws = false; end;
          end;  
          if (Vws) then begin
            testf = true;
            if (/*(Accr.blockedFlag!=0) or */(Accr.GroupAcc!=0)) then begin
              testf = false;
            end;
            if (testf) then begin
              TrialRnForAccount(Accr,RepSpec,CYb,cr,resUseAccum,FYStartDate,FYEndDate,prc,
                                first,lastgroup,acur,av1,av2,av3,curcnt,
                                Sdv,Scv,Sbd,Pbd,Ebd,Sbs,Pbs,Ebs);
            end;
          end;
        end;
        
        ExtractObj(RepSpec.f2,pos,tstr);
      end;
    end;
    ResetCompany(oldcomp);
  end else begin  
    prc = 100;
    Accr.AccNumber = RepSpec.FirstAcc;
    Vws = true;
    while (LoopMain(Accr,1,Vws)) begin
      if (nonblank(RepSpec.LastAcc)) then begin
        if (Accr.AccNumber>RepSpec.LastAcc) then begin Vws = false; end;
      end;  
      if (Vws) then begin
        testf = true;
        if (nonblank(RepSpec.AccStr)) then begin
          if (AccInRange(Accr.AccNumber,RepSpec.AccStr)==false) then begin
            testf = false;
          end;
        end;
        if (/*(Accr.blockedFlag!=0) or */(Accr.GroupAcc!=0)) then begin
          testf = false;
         end;
         if (testf) then begin
           TrialRnForAccount(Accr,RepSpec,CYb,cr,resUseAccum,FYStartDate,FYEndDate,prc,
                             first,lastgroup,acur,av1,av2,av3,curcnt,
                             Sdv,Scv,Sbd,Pbd,Ebd,Sbs,Pbs,Ebs);
         end;
      end;
    end;
  end;
  if ((RepSpec.flags[5]==0) and (RepSpec.flags[9]==0)) then begin
    Black_Divider(300,480);
    tstr = USetStr(3248);
    TrialLine(RepSpec,0,tstr,"",Sbd,Pbd,Ebd,Sdv,Scv,false,"");
  end;
  StartFormat(15);
  EndFormat;
  if (RepSpec.flags[5]==0) then begin
    tstr = USetStr(3247);
    TrialLine(RepSpec,0,tstr,"",Sbs,Pbs,Ebs,Sdv,Scv,false,"");
  end else begin
    PrintCurncyTotals(acur,av1,av2,av3,curcnt,9,4,5,100,true,RepSpec.PocketPC);
  end;
  if (RepSpec.flags[4]==1) then begin ListPerTrans(RepSpec); end;
  EndJob;
LTrialRn:;
  AutomatedSalesOrderly("HasIntegratedNL+Run_TrialRn");
  RETURN;
END;
