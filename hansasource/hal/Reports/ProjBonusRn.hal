external procedure SubCashRows_IVVc(record IVVc,Boolean,var val,var val);
external procedure SubPrePayments(record IVVc,var val,var val);
external procedure ARRnGetInvBalance(record IVVc,var Date,Integer,var val,var val,var LongInt);
external procedure HT2Per(Date, Date , var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);

function val PrintBonusLine(record TBIVVc TBIVr,val tbsum,val bonuspr,string custcode,string custname)
begin
  val res;
  string 255 dblstr;
  
  res = (tbsum / 100) * bonuspr;
  dblstr = TBIVr.SerNr;
  dblstr = dblstr & ",";
  dblstr = dblstr & TBIVr.Row;
  dblstr = dblstr & ",";
  dblstr = dblstr & TBIVr.PRCode;
  dblstr = dblstr & ",";
  dblstr = dblstr & TBIVr.oVc;
  StartFormat(15);
  OutString(0,"DblPRVc",TBIVr.PRCode,false);
  OutStringID(2,"DblCUVc",Left(custname,25),false,custcode);
  OutStringID(3,"DblPR",TBIVr.TransDate,false,dblstr);
  switch (TBIVr.oVc) begin
    case 1: dblstr = "DblTSVc";
    case 2: dblstr = "DblVIVc";
    case 3: dblstr = "DblExpVc";
    case 4: dblstr = "DblSHVc";
    case 5: dblstr = "DblActVc";
    case 6: dblstr = "DblRetVc";
    case 7: dblstr = "DblSDVc";
    otherwise dblstr = "";
  end;
  OutString(4,dblstr,TBIVr.SerNr,false);
  OutString(5,"DblIVVc",TBIVr.Invoice,false);
  OutVal(7,0,TBIVr.InvQty,M4UVal,true);
  OutVal(8,0,tbsum,M4Val,true);
  OutVal(1,0,res,M4Val,true);
  EndFormat;
  PrintBonusLine = res;
  return;
end;

function val PrintTBBUBonusLine(record TBBUVc TBBUr,row TBBUVc TBBUrw,val tbsum,val bonuspr,string custcode,string custname)
begin
  val res;
  string 255 dblstr;
  
  res = (tbsum / 100) * bonuspr;
  StartFormat(15);
  OutString(0,"DblPRVc",TBBUr.PRCode,false);
  OutStringID(2,"DblCUVc",Left(custname,25),false,custcode);
  OutStringID(3,"DblTBBUVc",TBBUr.TransDate,false,TBBUr.PRCode);
  OutString(5,"DblIVVc",TBBUrw.Invoiced,false);
  OutVal(7,0,TBBUrw.Qty,M4UVal,true);
  OutVal(8,0,tbsum,M4Val,true);
  OutVal(1,0,res,M4Val,true);
  EndFormat;
  PrintTBBUBonusLine = res;
  return;
end;

procedure FindPaidAmount(record IVVc IVr,val opensum,Date frdat,Date todat,var val paid,var val coeff)
begin
  record IPrsVc IPrsr;
  record IPVc IPr;
  row IPVc IPrw;
  row IVVc IVrw;
  Integer rwcnt,i;
  Boolean res,foundf;
  val bonusbased;

  paid = 0;
  bonusbased = 0;
  if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
    paid = IVr.Sum4;
    bonusbased = IVr.Sum4;
  end else begin
    paid = IVr.Sum4 - opensum;
    bonusbased = paid;
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      switch (IVrw.stp) begin
        case kInvoiceRowTypeDownpayment:
          paid = paid - IVrw.Sum;
          bonusbased = bonusbased - IVrw.Sum;
      end;
    end;
  end;
/*  
  res = false;
  IPrsr.IVNr = IVr.SerNr;
//  IPrsr.TransDate = frdat;
  foundf = true;
  while (LoopKey("IVKeyTransDate",IPrsr,1,foundf)) begin
    if (IPrsr.IVNr<>IVr.SerNr) then begin foundf = false; end;
    if (foundf) then begin
      if (IPrsr.TransDate>todat) then begin
        foundf = false;
      end;
    end;
    if (foundf) then begin
      if (DateInRange(IPrsr.TransDate,frdat,todat)) then begin
        IPr.SerNr = IPrsr.TransNr;
        if (ReadFirstMain(IPr,1,true)) then begin
          rwcnt = MatRowCnt(IPr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IPr,i,IPrw);
            if (IPrw.InvoiceNr==IVr.SerNr) then begin
              paid = paid + IPrw.InvVal;
              if (IPrw.stp==1) then begin
                bonusbased = bonusbased + IPrw.InvVal;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
*/  
  coeff = bonusbased / paid;
  return;
end;

function Boolean AlreadyTreated(LongInt invnr,array LongInt ainv,LongInt acnt)
begin
  Boolean res;
  LongInt i;
  
  res = false;
  for (i=0;i<acnt;i=i+1) begin
    if (ainv[i]==invnr) then begin
      res = true;
      i = acnt;
    end;
  end;
  AlreadyTreated = res;
end;

procedure InvoicedInPeriod(record RcVc RepSpec)
begin
  Boolean foundf,testf;
  Boolean tbfoundf,tbtestf;
  record TBIVVc TBIVr;
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  record IPrsVc IPrsr;
  record IVVc IVr;
  record IPVc IPr;
  row IVVc IVrw;
  row IPVc IPrw;
  record INVc INr;
  Integer rwcnt,i;
  val t,bonus,inv,qty,paid,coeff;
  Boolean printedf;
  array LongInt ainv;
  LongInt acnt;
  LongInt latedays;
  val rval,rvalb1;
  
  acnt = 0;
  printedf = false;
  bonus = 0;
  qty = 0;
  inv = 0;
  IPrsr.TransDate = RepSpec.sStartDate;
  IPrsr.TransType = kIPrsTransTypeInvoice;
  foundf = true;
  while (LoopKey("TransDate",IPrsr,2,foundf)) begin
    if (IPrsr.TransDate>RepSpec.sEndDate) then begin
      foundf = false;
    end;
    testf = foundf;
    switch (IPrsr.TransType) begin
      case kIPrsTransTypeInvoice:
        IVr.SerNr = IPrsr.TransNr;
        testf = ReadFirstMain(IVr,1,true);
        if (blank(IVr.PRCode)) then begin
          testf = false;
        end;
        if (RepSpec.flags[1]==1) then begin
          if (IVr.InvType!=kInvoiceTypeCash and IVr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) then begin
            rval = IVr.Sum4;
            if (nonblank(IVr.CurncyCode)) then begin rvalb1 = IVr.BaseSum4; end;
            if (rvalb1==0) then begin rvalb1 = rval; end;
            ARRnGetInvBalance(IVr,RepSpec.sEndDate,IVr.InvType,rval,rvalb1,latedays);
            SubPrePayments(IVr,rval,rvalb1);
            SubCashRows_IVVc(IVr,false,rval,rvalb1);
            if (rval!=0.00) then begin
              testf = false;
            end;
          end;
        end;
      case kIPrsTransTypeReceipt:
        IVr.SerNr = IPrsr.IVNr;
        testf = ReadFirstMain(IVr,1,true);
        if (blank(IVr.PRCode)) then begin
          testf = false;
        end;
        if (RepSpec.flags[1]==0) then begin
          testf = false;
        end;
      case kIPrsTransTypePurgeNLTransaction:
        testf = false;
      case kIPrsTransTypeNLTransaction:
        testf = false;
    end;
    if (testf) then begin
      coeff = 1;
      if (RepSpec.flags[1]==1) then begin
        FindPaidAmount(IVr,rval,IVr.TransDate,RepSpec.sEndDate,paid,coeff);
        if (paid<IVr.Sum4) then begin
          testf = false;
        end;
      end;
    end;
    if (testf) then begin
      if (AlreadyTreated(IVr.SerNr,ainv,acnt)) then begin
        testf = false;
      end else begin
        ainv[acnt] = IVr.SerNr;
        acnt = acnt + 1;
      end;
    end;
    if (testf) then begin
      ResetLoop(TBIVr);
      tbfoundf = true;
      TBIVr.Invoice = IVr.SerNr;
      TBIVr.PRCode = IVr.PRCode;
      while (LoopKey("InvKey",TBIVr,2,tbfoundf)) begin
        if (TBIVr.Invoice!=IVr.SerNr) then begin tbfoundf = false; end;
        if (TBIVr.PRCode!=IVr.PRCode) then begin tbfoundf = false; end;
        tbtestf = tbfoundf;
        if (nonblank(RepSpec.f1)) then begin
          if (ReadFirstItem(TBIVr.ArtCode,INr,false,false)) then begin
            if (SetInSet(RepSpec.f1,INr.DispGroups)) then begin
              tbtestf = false;
            end;
          end;
        end;
        if (nonblank(RepSpec.f2)) then begin
          if (RepSpec.f2!=TBIVr.EMCode) then begin
            tbtestf = false;
          end;
        end;
        if (tbtestf) then begin
          t = TBIVr.Sum * coeff;
          bonus = bonus + PrintBonusLine(TBIVr,t,RepSpec.vals0,IVr.CustCode,IVr.Addr0);
          qty = qty + TBIVr.InvQty;
          inv = inv + t;
          printedf = true;
        end;
      end;
      TBBUr.PRCode = IVr.PRCode;
      if (ReadFirstMain(TBBUr,1,true)) then begin
        if (TBBUr.BudTime==0 and TBBUr.BudStocked==0 and TBBUr.BudMaterial==0 and TBBUr.BudOther==0) then begin
          testf = false;
        end;
        if (testf) then begin
          rwcnt = MatRowCnt(TBBUr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(TBBUr,i,TBBUrw);
            if (TBBUrw.BudType==0 or TBBUrw.BudType==2) then begin            
              if (ReadFirstItem(TBBUrw.ArtCode,INr,false,false)) then begin
                testf = true;
                switch (INr.ItemType) begin
                  case kItemTypePlain:
                    if (INr.ItemMaterial!=0) then begin
                      if (TBBUr.BudMaterial==0 and TBBUrw.BudType!=2) then begin
                        testf = false;
                      end;
                    end else begin
                      if (TBBUr.BudOther==0 and TBBUrw.BudType!=2) then begin
                        testf = false;
                      end;
                    end;
                  case kItemTypeStocked:
                    if (TBBUr.BudStocked==0 and TBBUrw.BudType!=2) then begin
                      testf = false;
                    end;
                  case kItemTypeService:
                    if (TBBUr.BudTime==0 and TBBUrw.BudType!=2) then begin
                      testf = false;
                    end;
                end;
                if (testf) then begin
                  t = TBBUrw.Sum * coeff;
                  bonus = bonus + PrintTBBUBonusLine(TBBUr,TBBUrw,t,RepSpec.vals0,IVr.CustCode,IVr.Addr0);
                  qty = qty + TBBUrw.Qty;
                  inv = inv + t;
                  printedf = true;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  if (printedf) then begin
    Gray_Divider(0,1);
    OutVal(7,0,qty,M4UVal,true);
    OutVal(8,0,inv,M4Val,true);
    OutVal(1,0,bonus,M4Val,true);
    StartFormat(15);
    EndFormat;
  end;
  return;
end;

global
procedure ProjBonusRn(record RcVc RepSpec)
begin
  Boolean found,testf;
  record IPrsVc IPrsr;
  string 255 tstr;
  Integer rw;
  
  StartReportJob(USetStr(3590));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  switch (RepSpec.flags[1]) begin
    case 0:  tstr = USetStr(3598);
    case 1:  tstr = USetStr(3599);
  end;
  Header(rw,tstr,0);
  if (nonblank(RepSpec.f1)) then begin
    tstr = USetStr(3596) & " ";
    tstr = tstr & RepSpec.f1;
    Header(rw,tstr,1);
  end;
  rw = rw + 1;
  if (nonblank(RepSpec.vals0)) then begin
    tstr = USetStr(3595) & " ";
    tstr = tstr & RepSpec.vals0;
    Header(rw,tstr,0);
  end;
  if (nonblank(RepSpec.f2)) then begin
    tstr = USetStr(3597) & " ";
    tstr = tstr & RepSpec.f2;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  EndHeader;

  SetRepCol(2,50);
  SetRepCol(3,180); 
  SetRepCol(4,235); 
  SetRepCol(5,290); 
  SetRepCol(7,370);
  SetRepCol(8,430);

  StartFormat(15);
  OutString(0,0,USetStr(3550),false);
  OutString(2,0,USetStr(3591),false);
  OutString(3,0,USetStr(3592),false);
  OutString(4,0,USetStr(3593),false);
  OutString(5,0,USetStr(3600),false);
  OutString(7,0,USetStr(3552),true);
  OutString(8,0,USetStr(3594),true);
  OutString(1,0,USetStr(3595),true);
  EndFormat;
  Gray_Divider(0,1);

  InvoicedInPeriod(RepSpec);

  EndJob;
  return;
end;
