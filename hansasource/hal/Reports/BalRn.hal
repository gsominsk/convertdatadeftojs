external procedure AutomatedSalesOrderly(string);
external procedure SumBalRnVectors(string,LongInt,Boolean,vector val,vector val,vector val,vector val,vector val,vector val,vector Boolean,Array record UserDefRepLinesVc,Integer);
external procedure ListPerTrans(record RcVc);
external procedure FindAccSD(Date,var Date,var Boolean);
external procedure FindRepDefHeader(string,string,var string);
external function Boolean GetNextSep(string,var Integer,var string);
external procedure AGrHeader(record RcVc,Boolean,Boolean,Date);
external procedure SumListPerBal(string,Integer,var Array val,var Array val,var Array val,
                                 var Array val,var Array val,var Array val,Integer,var Array LongInt,Boolean);
external procedure AGrSumLine(record RcVc,Integer,string,string,string,
                              val,val,val,val,val,val,Boolean,val,Boolean,Boolean,string,LongInt,Boolean,Boolean);
external procedure GetUserDefRepDescription(record UserDefRepLinesVc,string,var string);
external procedure Get2WholePeriods(record RcVc,Date,Date,var string,var string);
external procedure GetNotStr(Integer,var string);
external procedure GetNext2Sep(string,var Integer,var string);
external procedure GetNextToken(string,var Integer,var string);
external function Boolean GetNextTokenReturn(string,var Integer,var string);
external procedure GetAccountDescription2(string,string,var string);
external procedure SumLine2(record RcVc,Boolean,string,string,string,var val,var val,var val,var val,var val,
                            var val,Boolean,val,Boolean,Date,Integer,LongInt,Boolean);
external function Boolean AccRuPerBal(record RcVc,Boolean,string,string,var val,var val,var val,var val,var val,var val,
                                      Integer,Boolean,Date,Date,Date);
external function Boolean AccObjTypePerBal(record RcVc,Boolean,string,string,var val,var val,var val,var val,var val,var val,
                                      Integer,Boolean,Date,Date,Date);
external procedure InitValArray(Integer,var Array val);
external procedure InitLongArray(Integer,var Array LongInt);


procedure ALPB2(record RcVc RepSpec,Boolean PLf,record UserDefRepLinesVc UserDefRepLinesr,record AccVc Accp,string anru,
                var val S3bp,var val Pbp,var val Ebp,var val S4bp,var val S5bp,var val S6bp,
                Boolean addflag,val goms,var Boolean headflagp,Boolean resUseAccum,Date AccumStartDate,Boolean printf)
BEGIN
  Boolean negf,usedf;
  val S3b1,Pb1,Eb1,S4b1,S5b1,S6b1;
  string 255 nru;
  record CYBlock CompYear;
  string 255 tstr,tstr2;
  
//  if (AccBlockedTest((AccessView*)appSlotArr[gCurSlot].ast_Accessp,Accp->AccNumber)) then goto LALPB2;
  BlockLoad(CompYear);
  nru = anru;//??
  nru = RepSpec.ObjStr;//??
  if (blank(RepSpec.ObjType)) or (RepSpec.flags[2]!=0) then begin
    usedf = AccRuPerBal(RepSpec,PLf,Accp.AccNumber,nru,S3b1,Pb1,Eb1,S4b1,S5b1,S6b1,UserDefRepLinesr.DCSide,resUseAccum,AccumStartDate,RepSpec.sStartDate,RepSpec.sEndDate);
  end else begin
    usedf = AccObjTypePerBal(RepSpec,PLf,Accp.AccNumber,nru,S3b1,Pb1,Eb1,S4b1,S5b1,S6b1,UserDefRepLinesr.DCSide,resUseAccum,AccumStartDate,RepSpec.sStartDate,RepSpec.sEndDate);
  end;
/*  
  if (UserDefRepLinesr.DCSaldo==1) then begin
    if (Eb1<0) then begin goto LALPB2; end;
  end;
  if (UserDefRepLinesr.DCSaldo==2) then begin
    if (Eb1>=0) then begin goto LALPB2; end;
  end;
*/  
  switch (RepSpec.Comparison) begin
    case 0:
      if (UserDefRepLinesr.DCSaldo==1) then begin
        if (Eb1<0) then begin goto LALPB2; end;
      end;
      if (UserDefRepLinesr.DCSaldo==2) then begin
        if (Eb1>0) then begin goto LALPB2; end;
      end;
      if (Eb1==0) then begin
        if (UserDefRepLinesr.DCSaldo==1) then begin
          if (Pb1>0) then begin goto LALPB2; end;
        end;
        if (UserDefRepLinesr.DCSaldo==2) then begin
          if (Pb1<0) then begin goto LALPB2; end;
        end;
      end;
    otherwise
      if (UserDefRepLinesr.DCSaldo==1) then begin
        if (Pb1<0) then begin goto LALPB2; end;
      end;
      if (UserDefRepLinesr.DCSaldo==2) then begin
        if (Pb1>0) then begin goto LALPB2; end;
      end;
  end;      
  GetUserDefRepDescription(UserDefRepLinesr,RepSpec.Language,tstr2);  
  if (nonblank(tstr2)) then begin// UserDefRepLinesr->Comment
    if ((((RepSpec.AccSpec==1) or (RepSpec.AccSpec==4)) and ((Pb1!=0) or (S3b1!=0) or (S4b1!=0) or (S5b1!=0) or (S6b1!=0) or(Eb1!=0) or (usedf))) 
        or (RepSpec.AccSpec==0) or (nonblank(RepSpec.ObjType))) then begin
      if (headflagp==false) then begin
        if (printf) then begin
          StartFormat(15);
          OutString(0,0,tstr2,false); 
          EndFormat;
          headflagp = true;
          Gray_Divider(0,1);
        end;
      end;
      negf = true;
      if (Accp.AccType==0) then begin
        if (CompYear.NS0[0]==0) then begin
          negf = false;
        end;
      end;
      if (Accp.AccType==1) then begin
        if (CompYear.NS0[1]==0) then begin
          negf = false;
        end;
      end;
      if (Accp.AccType==2) then begin
        if (CompYear.NS0[2]==0) then begin
          negf = false;
        end;
      end;
      if (Accp.AccType==3) then begin
        if (CompYear.NS0[3]==0) then begin
          negf = false;
        end;
      end;
      if (Accp.AccType==4) then begin
        if (CompYear.NS0[4]==0) then begin
          negf = false;
        end;
      end;                    
      GetAccountDescription2(Accp.AccNumber,RepSpec.Language,tstr);            
      if (blank(RepSpec.ObjType)) then begin
        AGrSumLine(RepSpec,0,Accp.AccNumber,tstr,UserDefRepLinesr.SpecCode,S3b1,Pb1,Eb1,S4b1,S5b1,S6b1,negf,goms,PLf,resUseAccum,"DblNL",UserDefRepLinesr.IdKey,usedf,printf);
      end else begin
        SumLine2(RepSpec,PLf,Accp.AccNumber,tstr,UserDefRepLinesr.SpecCode,S3b1,Pb1,Eb1,S4b1,S5b1,S6b1,negf,goms,resUseAccum,AccumStartDate,UserDefRepLinesr.DCSide,UserDefRepLinesr.IdKey,printf);
      end;      
    end;
  end;
  if (addflag==true) then begin
    S3bp = S3bp + S3b1;
    S4bp = S4bp + S4b1;
    S5bp = S5bp + S5b1;
    S6bp = S6bp + S6b1;
    Pbp = Pbp + Pb1;
    Ebp = Ebp + Eb1;
  end else begin
    S3bp = S3bp - S3b1;
    S4bp = S4bp - S4b1;
    S5bp = S5bp - S5b1;
    S6bp = S6bp - S6b1;
    Pbp = Pbp - Pb1;
    Ebp = Ebp - Eb1;
  end;
LALPB2:;
  RETURN;
END;

procedure ALPBEnd(record RcVc RepSpec,Boolean PLf,string Comment,string extracode,val S3bp,val Pbp,val Ebp,
                  val S4bp,val S5bp,val S6bp,Boolean negf,val goms,Boolean aheadflag,Boolean resUseAccum,LongInt idkey,Boolean printf)
BEGIN
  string 255 tstr;

  if ((RepSpec.AccSpec==0) or (RepSpec.AccSpec==1) or (RepSpec.AccSpec==4)) then begin
    if (aheadflag==true) then begin
      tstr = USetStr(3143) & Comment;
      if (nonblank(Comment)) then begin
        Gray_Divider(0,1);
        AGrSumLine(RepSpec,0,tstr,"",extracode,S3bp,Pbp,Ebp,S4bp,S5bp,S6bp,negf,goms,PLf,resUseAccum,"",idkey,false,printf);
        StartFormat(15);
        EndFormat;
      end;
    end;
  end;
  if (RepSpec.AccSpec==2) then begin
    if (nonblank(Comment)) then begin
      AGrSumLine(RepSpec,0,Comment,"",extracode,S3bp,Pbp,Ebp,S4bp,S5bp,S6bp,negf,goms,PLf,resUseAccum,"",idkey,false,printf);
    end;
  end;
  if (RepSpec.AccSpec==3) then begin
    if ((S3bp!=0) or (S4bp!=0) or (S5bp!=0) or (S6bp!=0) or (Pbp!=0)) then begin
      if (nonblank(Comment)) then begin
        AGrSumLine(RepSpec,0,Comment,"",extracode,S3bp,Pbp,Ebp,S4bp,S5bp,S6bp,negf,goms,PLf,resUseAccum,"",idkey,false,printf);
      end;
    end;
  end;
  RETURN;
END;

global
procedure AccListPerBal(record RcVc RepSpec,Boolean PLf,record UserDefRepLinesVc UserDefRepLinesr,var val S3bp,var val Pbp,
                        var val Ebp,var val S4bp,var val S5bp,var val S6bp,Boolean negf,val goms,Boolean resUseAccum,
                        Date AccumStartDate,Boolean printf)
BEGIN
  record AccVc Accr;
  Boolean addflag;
  string 255 Nitem;
  string 255 Nitem2;
  string 255 NRu;
  string 5 nsep;
  Boolean Accs;
  Integer np;
  Boolean headflag;
  string 255 tstr;

  S3bp = 0;
  S4bp = 0;
  S5bp = 0;
  S6bp = 0;
  Pbp = 0;
  Ebp = 0;
  headflag = false;
  np = 0;
  GetNext2Sep(UserDefRepLinesr.Desc,np,nsep);
  while (GetNextTokenReturn(UserDefRepLinesr.Desc,np,Nitem)) begin
    if (nsep=="-") then begin
      addflag = false; 
    end else begin
      addflag = true;
    end;
    GetNext2Sep(UserDefRepLinesr.Desc,np,nsep);
    if (nsep==".") then begin
      GetNextToken(UserDefRepLinesr.Desc,np,NRu);
      GetNext2Sep(UserDefRepLinesr.Desc,np,nsep);
    end else begin
      NRu = "";
    end;    
    if (nsep==":") then begin
      GetNextToken(UserDefRepLinesr.Desc,np,Nitem2);
      GetNext2Sep(UserDefRepLinesr.Desc,np,nsep);
    end else begin
      Nitem2 = "";
    end;    
    Accr.AccNumber = Nitem;
    if (blank(Nitem2)) then begin
      Accs = ReadFirstMain(Accr,1,true);
      if ((Accs) and (Accr.GroupAcc==0)) then begin
        ALPB2(RepSpec,PLf,UserDefRepLinesr,Accr,NRu,S3bp,Pbp,Ebp,S4bp,S5bp,S6bp,addflag,goms,headflag,resUseAccum,AccumStartDate,printf);
      end;
    end else begin
      if (Nitem<Nitem2) then begin
        ResetLoop(Accr);
        Accs = true;
        while (LoopMain(Accr,2,Accs)) begin
          if (Accs==true) then begin
            if (Accr.AccNumber>Nitem2) then begin Accs = false; end;
          end;
          if ((Accs) and (Accr.GroupAcc==0)) then begin
            ALPB2(RepSpec,PLf,UserDefRepLinesr,Accr,NRu,S3bp,Pbp,Ebp,S4bp,S5bp,S6bp,addflag,goms,headflag,resUseAccum,AccumStartDate,printf);
          end;
        end;
      end else begin
        ResetLoop(Accr);
        Accr.AccNumber = Nitem;
        Accs = LoopBackKey("AccNumber",Accr,1,true);
        while (Accs) begin
          if (Accs==true) then begin
            if (Accr.AccNumber<Nitem2) then begin Accs = false; end;
          end;  
          if ((Accs) and (Accr.GroupAcc==0)) then begin
            ALPB2(RepSpec,PLf,UserDefRepLinesr,Accr,NRu,S3bp,Pbp,Ebp,S4bp,S5bp,S6bp,addflag,goms,headflag,resUseAccum,AccumStartDate,printf);
          end;  
          Accs = LoopBackKey("AccNumber",Accr,1,true);//Accs = m4_ReadLogicalMain(AccVc,LLoop1--,&Accr);
        end;
      end;
    end;
  end;
  np = 0;
  GetNext2Sep(UserDefRepLinesr.Desc2,np,nsep);
  while (GetNextTokenReturn(UserDefRepLinesr.Desc2,np,Nitem)) begin
    if (nsep=="-") then begin
      addflag = false; 
    end else begin
      addflag = true;
    end;  
    GetNext2Sep(UserDefRepLinesr.Desc2,np,nsep);
    if (nsep==".") then begin
      GetNextToken(UserDefRepLinesr.Desc2,np,NRu);
      GetNext2Sep(UserDefRepLinesr.Desc2,np,nsep);
    end else begin
      NRu = "";
    end;    
    if (nsep==":") then begin
      GetNextToken(UserDefRepLinesr.Desc2,np,Nitem2);
      GetNext2Sep(UserDefRepLinesr.Desc2,np,nsep);
    end else begin
      Nitem2 = "";
    end;    
    Accr.AccNumber = Nitem;
    if (blank(Nitem2)) then begin
      Accs = ReadFirstMain(Accr,1,true);
      if ((Accs) and  (Accr.GroupAcc==0)) then begin
        ALPB2(RepSpec,PLf,UserDefRepLinesr,Accr,NRu,S3bp,Pbp,Ebp,S4bp,S5bp,S6bp,addflag,goms,headflag,resUseAccum,AccumStartDate,printf);
      end;    
    end else begin
      if (Nitem<Nitem2) then begin
        ResetLoop(Accr);
        Accs = true;
        while (LoopMain(Accr,2,Accs)) begin
          if (Accs==true) then begin
            if (Accr.AccNumber>Nitem2) then begin Accs = false; end;
          end;  
          if ((Accs) and  (Accr.GroupAcc==0)) then begin
            ALPB2(RepSpec,PLf,UserDefRepLinesr,Accr,NRu,S3bp,Pbp,Ebp,S4bp,S5bp,S6bp,addflag,goms,headflag,resUseAccum,AccumStartDate,printf);
          end;
        end;
      end else begin
        ResetLoop(Accr);
        Accr.AccNumber = Nitem;
        Accs = LoopBackKey("AccNumber",Accr,1,true);
        while (Accs) begin
          if (Accs==true) then begin
            if (Accr.AccNumber<Nitem2) then begin Accs = false; end;
          end;  
          if ((Accs) and  (Accr.GroupAcc==0)) then begin
            ALPB2(RepSpec,PLf,UserDefRepLinesr,Accr,NRu,S3bp,Pbp,Ebp,S4bp,S5bp,S6bp,addflag,goms,headflag,resUseAccum,AccumStartDate,printf);
          end;  
          Accs = LoopBackKey("AccNumber",Accr,1,true);//Accs = m4_ReadLogicalMain(AccVc,LLoop1--,&Accr);
        end;
      end;
    end;
  end;
  np = 0;
  GetNext2Sep(UserDefRepLinesr.Desc3,np,nsep);
  while (GetNextTokenReturn(UserDefRepLinesr.Desc3,np,Nitem)) begin
    if (nsep=="-") then begin
      addflag = false; 
    end else begin
      addflag = true;
    end;  
    GetNext2Sep(UserDefRepLinesr.Desc3,np,nsep);
    if (nsep==".") then begin
      GetNextToken(UserDefRepLinesr.Desc3,np,NRu);
      GetNext2Sep(UserDefRepLinesr.Desc3,np,nsep);
    end else begin
      NRu = "";
    end;    
    if (nsep==":") then begin
      GetNextToken(UserDefRepLinesr.Desc3,np,Nitem2);
      GetNext2Sep(UserDefRepLinesr.Desc3,np,nsep);
    end else begin
      Nitem2 = "";
    end;    
    Accr.AccNumber = Nitem;
    if (blank(Nitem2)) then begin
      Accs = ReadFirstMain(Accr,1,true);
      if ((Accs) and  (Accr.GroupAcc==0)) then begin
        ALPB2(RepSpec,PLf,UserDefRepLinesr,Accr,NRu,S3bp,Pbp,Ebp,S4bp,S5bp,S6bp,addflag,goms,headflag,resUseAccum,AccumStartDate,printf);
      end;
    end else begin
      if (Nitem<Nitem2) then begin
        ResetLoop(Accr);
        Accs = true;
        while (LoopMain(Accr,2,Accs)) begin
          if (Accs==true) then begin
            if (Accr.AccNumber>Nitem2) then begin Accs = false; end;
          end;  
          if ((Accs) and  (Accr.GroupAcc==0)) then begin
            ALPB2(RepSpec,PLf,UserDefRepLinesr,Accr,NRu,S3bp,Pbp,Ebp,S4bp,S5bp,S6bp,addflag,goms,headflag,resUseAccum,AccumStartDate,printf);
          end;  
        end;
      end else begin
        ResetLoop(Accr);
        Accr.AccNumber = Nitem;
        Accs = LoopBackKey("AccNumber",Accr,1,true);
        while (Accs) begin
          if (Accs==true) then begin
            if (Accr.AccNumber<Nitem2) then begin
              Accs = false;
            end;  
          end;  
          if ((Accs) and  (Accr.GroupAcc==0)) then begin
            ALPB2(RepSpec,PLf,UserDefRepLinesr,Accr,NRu,S3bp,Pbp,Ebp,S4bp,S5bp,S6bp,addflag,goms,headflag,resUseAccum,AccumStartDate,printf);
          end;
          Accs = LoopBackKey("AccNumber",Accr,1,true);
        end;
      end;
    end;
  end;
  GetUserDefRepDescription(UserDefRepLinesr,RepSpec.Language,tstr);
  ALPBEnd(RepSpec,PLf,tstr,UserDefRepLinesr.SpecCode,S3bp,Pbp,Ebp,S4bp,S5bp,S6bp,negf,goms,headflag,resUseAccum,UserDefRepLinesr.IdKey,printf);// UserDefRepLinesr.Comment
  RETURN;
END;

global
function Integer CountLinesInUserDefRep(record UserDefRepVc UserDefRepr)
begin
  record UserDefRepLinesVc UserDefRepLinesr;
  string 60 ckey;
  Boolean foundf;
  Integer cnt;
  
  cnt = 0;
  ckey = "ShortIDKey:" & UserDefRepr.shortname;
  UserDefRepLinesr.IdKey = 0; 
  foundf = true;
  while (LoopKey(ckey,UserDefRepLinesr,1,foundf)) begin
    cnt = cnt + 1;
  end;
  CountLinesInUserDefRep = cnt;
  return;
end;

procedure BalRn_Old(record RcVc RepSpec)
BEGIN
  record UserDefRepVc UserDefRepr;
  record UserDefRepLinesVc UserDefRepLinesr;
  record CYBlock CompYear;
  record ConsolidationBlock cr;
  Array val S3ba;
  Array val S4ba;
  Array val S5ba;
  Array val S6ba;
  Array val Pba;
  Array val Eba;  
  Array LongInt aida;
  val tmpS3ba,tmpS4ba,tmpS5ba,tmpS6ba,tmpPba,tmpEba;
  string 255 tstr,notstr,per1,per2;
  val Goms;
  Boolean negf,AGrs;
  Boolean PLf,headerf,resUseAccum;
  Integer i,aid,nr;
  Integer aidn,maxrsums;
  Date AccumStartDate;
  string 60 ckey;
  
  PLf = false;
  headerf = true;
  if (RepSpec.CalledFromHAL==0) then begin
    if (((RepSpec.AccSpec==2) or (RepSpec.AccSpec==3)) and (nonblank(RepSpec.ObjType))) then begin
      MessageBox(1072,"");
      goto LBalRn;
    end;
  end;
  BlockLoad(CompYear);
  
  if (blank(RepSpec.shortname)) then begin
    UserDefRepr.shortname = RepSpec.repname;
  end else begin
    UserDefRepr.shortname = RepSpec.shortname;
  end;
  if (ReadFirstMain(UserDefRepr,1,true)==false) then begin
    MessageBox(3167,"");
    goto LBalRn;
  end;
  
  maxrsums = CountLinesInUserDefRep(UserDefRepr);
  InitValArray(maxrsums,S3ba);
  InitValArray(maxrsums,S4ba);
  InitValArray(maxrsums,S5ba);
  InitValArray(maxrsums,S6ba);
  InitValArray(maxrsums,Pba);
  InitValArray(maxrsums,Eba);
  InitLongArray(maxrsums,aida);
  if (RepSpec.critname=="ConsBalRClass") then begin    
    BlockLoad(cr);
    RepSpec.basecurncy = cr.ConsCrncy;  
  end;
  
  resUseAccum = false;
  if ((PLf==true) and (RepSpec.Comparison==0)) then begin
    FindAccSD(RepSpec.sStartDate,AccumStartDate,resUseAccum);// StartDate
  end;  

  if (RepSpec.CalledFromHAL==0) then begin
    FindRepDefHeader(RepSpec.repname,RepSpec.shortname,tstr);
    if (nonblank(RepSpec.f1)) then begin
      tstr = RepSpec.f1;
    end;  
  
    if (RepSpec.flags[5]!=0) then begin 
      headerf = false;
    end;  
    if (headerf) then begin
      StartReportJob(tstr);//StartReportTJob(tstr,headerf,0);
      AGrHeader(RepSpec,PLf,resUseAccum,AccumStartDate);
      EndHeader;
    end else begin
      StartReportNoHeaderJob(tstr);
    end;
    SetRepCol(2,50);
    SetRepCol(3,288);
    SetRepCol(4,384);
    SetRepCol(5,480);
    SetRepCol(6,15);
  end;
  aidn = -1;
  if (RepSpec.CalledFromHAL==0) then begin
    if (PLf==false) then begin
      GetNotStr(RepSpec.Notation,notstr);
      StartFormat(20);
      tstr = "";
      OutString(11,0,tstr,true); // To make export to file look better 
      OutString(20,0,tstr,true);
      if (RepSpec.Comparison==0) then begin
        tstr = USetStr(3147);
        tstr = tstr & notstr;
        OutString(3,0,tstr,true);
        tstr = USetStr(3148);
        tstr = tstr & notstr;
        OutString(4,0,tstr,true);
        tstr = USetStr(3149);
        tstr = tstr & notstr;
        OutString(5,0,tstr,true);
      end;
      if (RepSpec.Comparison==2) then begin
        tstr = USetStr(3150);
        tstr = tstr & notstr;
        OutString(3,0,tstr,true);
        tstr = USetStr(3151);
        tstr = tstr & notstr;
        OutString(4,0,tstr,true);
        tstr = USetStr(3152);
        tstr = tstr & notstr;
        OutString(5,0,tstr,true);
      end;
      if (RepSpec.Comparison==3) then begin
        tstr = USetStr(3153);
        tstr = tstr & notstr;
        OutString(3,0,tstr,true);
        tstr = USetStr(3154);
        tstr = tstr & notstr;
        OutString(4,0,tstr,true);
        tstr = USetStr(3155);
        tstr = tstr & notstr;
        OutString(5,0,tstr,true);
      end;
      if (RepSpec.Comparison==4) then begin
        Get2WholePeriods(RepSpec,RepSpec.sStartDate,RepSpec.sEndDate,per1,per2);
        tstr = "";
        OutString(3,0,tstr,true);
        OutString(4,0,per1,true);
        OutString(5,0,per2,true);
      end;
      if (RepSpec.Comparison==5) then begin
        tstr = USetStr(3173);
        tstr = tstr & notstr;
        OutString(3,0,tstr,true);
        tstr = USetStr(3147);
        tstr = tstr & notstr;
        OutString(4,0,tstr,true);
        tstr = USetStr(3149);
        tstr = tstr & notstr;
        OutString(5,0,tstr,true);
      end;
      EndFormat;
    end else begin
      GetNotStr(RepSpec.Notation,notstr);
      StartFormat(20);
      tstr = "";
      OutString(11,0,tstr,true); // To make export to file look better 
      OutString(20,0,tstr,true);
      if (RepSpec.Comparison==0) then begin
        tstr = USetStr(3156);
        tstr = tstr & notstr;
        if (resUseAccum==true) then begin
          OutString(4,0,tstr,true);
        end;  
        tstr = USetStr(3157);
        tstr = tstr & notstr;
        OutString(5,0,tstr,true);
      end;
      if (RepSpec.Comparison==1) then begin
        tstr = USetStr(3158);
        tstr = tstr & notstr;
        OutString(3,0,tstr,true);
        tstr = USetStr(3159);
        tstr = tstr & notstr;
        OutString(4,0,tstr,true);
        OutString(5,0,USetStr(3160),true);
      end;
      if (RepSpec.Comparison==2) then begin
        tstr = USetStr(3161);
        tstr = tstr & notstr;
        OutString(3,0,tstr,true);
        tstr = USetStr(3162);
        tstr = tstr & notstr;
        OutString(4,0,tstr,true);
        OutString(5,0,USetStr(3163),true);
      end;
      if (RepSpec.Comparison==3) then begin
        tstr = USetStr(3164);
        tstr = tstr & notstr;
        OutString(3,0,tstr,true);
        tstr = USetStr(3165);
        tstr = tstr & notstr;
        OutString(4,0,tstr,true);
        OutString(5,0,USetStr(3166),true);
      end;
      if (RepSpec.Comparison==4) then begin
        Get2WholePeriods(RepSpec,RepSpec.sStartDate,RepSpec.sEndDate,per1,per2);
        tstr = USetStr(3173);
        tstr = tstr & notstr;
        OutString(3,0,tstr,true);
        OutString(4,0,per1,true);
        OutString(5,0,per2,true);
      end;
      EndFormat;
    end;
  end;
  if ((nonblank(RepSpec.ObjType)) and (RepSpec.AccSpec==2)) then begin
    StartFormat(20);
    OutString(0,0,USetStr(1565),false);
    EndFormat;
    goto L88LBalRn;
  end;
  
  ckey = "ShortIDKey:" & UserDefRepr.shortname;
  UserDefRepLinesr.IdKey = 0; 
  AGrs = ReadFirstKey(ckey,UserDefRepLinesr,1,false);
  if (AGrs==false) then begin
    StartFormat(20);
    OutString(0,0,USetStr(3167),false);
    EndFormat;
  end;
  UserDefRepLinesr.IdKey = 0; 
  AGrs = true;
  while (LoopKey(ckey,UserDefRepLinesr,1,AGrs)) begin
    if (AGrs) then begin
      if (UserDefRepLinesr.RsType==3) then begin//RsHead
        GetUserDefRepDescription(UserDefRepLinesr,RepSpec.Language,tstr);        
        StartFormat(15);
        OutString(0,0,tstr,false);// UserDefRepLinesr.Comment
        EndFormat;
      end;
      if (UserDefRepLinesr.RsType==2) then begin//RsSum
        if (aidn<maxrsums) then begin
          aidn = aidn + 1;
        end; 
        aida[aidn] = UserDefRepLinesr.IdKey;
        aid = aidn;
        SumListPerBal(UserDefRepLinesr.Desc,aid,S3ba,Pba,Eba,S4ba,S5ba,S6ba,maxrsums,aida,true);
        SumListPerBal(UserDefRepLinesr.Desc2,aid,S3ba,Pba,Eba,S4ba,S5ba,S6ba,maxrsums,aida,false);
        SumListPerBal(UserDefRepLinesr.Desc3,aid,S3ba,Pba,Eba,S4ba,S5ba,S6ba,maxrsums,aida,false);
        negf = false;
        if (UserDefRepLinesr.AccType==0) then begin
          if (CompYear.NS0[0]!=0) then begin
            negf = true;
          end;
        end;
        if (UserDefRepLinesr.AccType==1) then begin
          if (CompYear.NS0[1]!=0) then begin
            negf = true;
          end;
        end;
        if (UserDefRepLinesr.AccType==2) then begin
          if (CompYear.NS0[2]!=0) then begin
            negf = true;
          end;
        end;
        if (UserDefRepLinesr.AccType==3) then begin
          if (CompYear.NS0[3]!=0) then begin
            negf = true;
          end;
        end;
        if (UserDefRepLinesr.AccType==4) then begin
          if (CompYear.NS0[4]!=0) then begin
            negf = true;
          end;
        end;              
        
        if (nonblank(UserDefRepLinesr.Comment)) then begin
          GetUserDefRepDescription(UserDefRepLinesr,RepSpec.Language,tstr);        
          AGrSumLine(RepSpec,0,tstr,"",UserDefRepLinesr.SpecCode,S3ba[aid],Pba[aid],Eba[aid],
                     S4ba[aid],S5ba[aid],S6ba[aid],negf,Goms,PLf,resUseAccum,"",UserDefRepLinesr.IdKey,false,true);
        end;
      end;
      if (UserDefRepLinesr.RsType==1) then begin//RsRange
        negf = true;
        if (UserDefRepLinesr.AccType==0) then begin
          if (CompYear.NS0[0]==0) then begin
            negf = false;
          end;
        end;
        if (UserDefRepLinesr.AccType==1) then begin
          if (CompYear.NS0[1]==0) then begin
            negf = false;
          end;
        end;
        if (UserDefRepLinesr.AccType==2) then begin
          if (CompYear.NS0[2]==0) then begin
            negf = false;
          end;
        end;
        if (UserDefRepLinesr.AccType==3) then begin
          if (CompYear.NS0[3]==0) then begin
           negf = false;
          end;
        end;
        if (UserDefRepLinesr.AccType==4) then begin
          if (CompYear.NS0[4]==0) then begin
            negf = false;
          end;
        end;              
        if (aidn<maxrsums) then begin
          aidn = aidn + 1;
        end;  
        aida[aidn] = UserDefRepLinesr.IdKey;
        aid = aidn;
        
//this is not working like IVr.Sum4 passed to procedure
//        AccListPerBal(RepSpec,PLf,UserDefRepLinesr,S3ba[aid],Pba[aid],Eba[aid],S4ba[aid],S5ba[aid],S6ba[aid],negf,Goms,resUseAccum);

        AccListPerBal(RepSpec,PLf,UserDefRepLinesr,tmpS3ba,tmpPba,tmpEba,tmpS4ba,tmpS5ba,tmpS6ba,negf,Goms,resUseAccum,AccumStartDate,true);
        S3ba[aid] = tmpS3ba;
        S4ba[aid] = tmpS4ba;
        S5ba[aid] = tmpS5ba;
        S6ba[aid] = tmpS6ba;
        Pba[aid] = tmpPba;
        Eba[aid] = tmpEba;        
      end;
      if (UserDefRepLinesr.RsType==4) then begin//RsNewPage
        if (RepSpec.Media!=mtScreen) then begin
          NewPage(false);
        end;  
      end;
    end;
  end;
  if (RepSpec.flags[4]!=0) then begin
    RepSpec.f1 = "";    
    ListPerTrans(RepSpec);
  end;  
  if (RepSpec.Notation==3) then begin
    Goms = Goms*100;
    StartFormat(15);
    OutString(0,0,USetStr(3170),false);
    OutVal(340,0,Goms,M4Val,true);
    EndFormat;
  end;
L88LBalRn:;
  if (RepSpec.CalledFromHAL==0) then begin
    EndJob;
  end;  
LBalRn:;  
  RETURN;
END;

global
procedure BalRnCalcRsTypeAccounts(record RcVc RepSpec,string shortname,Boolean PLf,Boolean negf,val Goms,Boolean resUseAccum,date AccumStartDate,
                        vector val S3ba,vector val Pba,vector val Eba,
                        vector val S4ba,vector val S5ba,vector val S6ba,
                        vector Boolean sumsv,
                        Array record UserDefRepLinesVc aUserDefRepLinesr,var Integer udrlcnt)
begin
  record UserDefRepLinesVc UserDefRepLinesr;
  Boolean AGrs;
  string 255 ckey;
  val tmpS3ba,tmpS4ba,tmpS5ba,tmpS6ba,tmpPba,tmpEba;
  
  ckey = "ShortIDKey:" & shortname;
  UserDefRepLinesr.IdKey = 0; 
  AGrs = true;
  while (LoopKey(ckey,UserDefRepLinesr,1,AGrs)) begin
    if (AGrs) then begin
      switch (UserDefRepLinesr.RsType) begin
        case kRsTypeAccounts:
          AccListPerBal(RepSpec,PLf,UserDefRepLinesr,tmpS3ba,tmpPba,tmpEba,tmpS4ba,tmpS5ba,tmpS6ba,negf,Goms,resUseAccum,AccumStartDate,false);
          S3ba[UserDefRepLinesr.IdKey] = tmpS3ba;
          S4ba[UserDefRepLinesr.IdKey] = tmpS4ba;
          S5ba[UserDefRepLinesr.IdKey] = tmpS5ba;
          S6ba[UserDefRepLinesr.IdKey] = tmpS6ba;
          Pba[UserDefRepLinesr.IdKey] = tmpPba;
          Eba[UserDefRepLinesr.IdKey] = tmpEba; 
          sumsv[UserDefRepLinesr.IdKey] = true;       
        case kRsTypeSum:
          sumsv[UserDefRepLinesr.IdKey] = false;       
        case kRsTypeText:
          sumsv[UserDefRepLinesr.IdKey] = true;       
        case kRsTypePageBreak:
          sumsv[UserDefRepLinesr.IdKey] = true;       
      end;
      aUserDefRepLinesr[udrlcnt] = UserDefRepLinesr;
      udrlcnt = udrlcnt + 1;
    end;
  end;
  return;
end;

global
procedure CalcRsTypeSum(vector val S3ba,vector val Pba,vector val Eba,
                        vector val S4ba,vector val S5ba,vector val S6ba,
                        vector Boolean sumsv, 
                        Array record UserDefRepLinesVc aUserDefRepLinesr,Integer udrlcnt,LongInt theIdKey)
begin
  Integer udrli;
  record UserDefRepLinesVc UserDefRepLinesr;
  Boolean testf;
  
  for (udrli=0;udrli<udrlcnt;udrli=udrli+1) begin //if this in multilevel sums dont work in Balance Sheet, like Sum = Sub sum1 + sub sum2
//  for (udrli=udrlcnt-1;udrli>=0;udrli=udrli-1) begin
    UserDefRepLinesr = aUserDefRepLinesr[udrli];
    testf = true;
    if (theIdKey>=0) then begin
      if (UserDefRepLinesr.IdKey!=theIdKey) then begin testf = false; end;
    end;
    if (testf) then begin
      switch (UserDefRepLinesr.RsType) begin      
        case kRsTypeSum:
          if (sumsv[UserDefRepLinesr.IdKey]==false) then begin
            SumBalRnVectors(UserDefRepLinesr.Desc,UserDefRepLinesr.IdKey,true,S3ba,Pba,Eba,S4ba,S5ba,S6ba,sumsv,aUserDefRepLinesr,udrlcnt);
            SumBalRnVectors(UserDefRepLinesr.Desc2,UserDefRepLinesr.IdKey,false,S3ba,Pba,Eba,S4ba,S5ba,S6ba,sumsv,aUserDefRepLinesr,udrlcnt);
            SumBalRnVectors(UserDefRepLinesr.Desc3,UserDefRepLinesr.IdKey,false,S3ba,Pba,Eba,S4ba,S5ba,S6ba,sumsv,aUserDefRepLinesr,udrlcnt);
            sumsv[UserDefRepLinesr.IdKey] = true;
          end;
      end;
    end;
  end;
  return;
end;  

procedure BalRn_New(record RcVc RepSpec)
begin
  record UserDefRepVc UserDefRepr;
  record UserDefRepLinesVc UserDefRepLinesr;
  record CYBlock CYb;
  Boolean PLf,headerf,resUseAccum,AGrs,negf,testf;
  record ConsolidationBlock cr;
  string 255 tstr,notstr,per1,per2,ckey;
  val Goms;
  Date AccumStartDate;
  val tmpS3ba,tmpS4ba,tmpS5ba,tmpS6ba,tmpPba,tmpEba;
  vector val S3ba;
  vector val S4ba;
  vector val S5ba;
  vector val S6ba;
  vector val Pba;
  vector val Eba;  
  vector Boolean sumsv;
  Array record UserDefRepLinesVc aUserDefRepLinesr;
  Integer udrli,udrlcnt;

  PLf = false;
  headerf = true;
  if (RepSpec.CalledFromHAL==0) then begin
    if (((RepSpec.AccSpec==2) or (RepSpec.AccSpec==3)) and (nonblank(RepSpec.ObjType))) then begin
      MessageBox(1072,"");
      goto LBalRn_New;
    end;
  end;
  BlockLoad(CYb);  
  if (blank(RepSpec.shortname)) then begin
    UserDefRepr.shortname = RepSpec.repname;
  end else begin
    UserDefRepr.shortname = RepSpec.shortname;
  end;
  if (ReadFirstMain(UserDefRepr,1,true)==false) then begin
    UserDefRepr.shortname = RepSpec.repname;
    if (ReadFirstMain(UserDefRepr,1,true)==false) then begin
      MessageBox(3167,"");
      goto LBalRn_New;
    end;
  end;  
  if (RepSpec.critname=="ConsBalRClass") then begin    
    BlockLoad(cr);
    RepSpec.basecurncy = cr.ConsCrncy;  
  end;  
  resUseAccum = false;
  if (RepSpec.CalledFromHAL==0) then begin
    FindRepDefHeader(RepSpec.repname,RepSpec.shortname,tstr);
    if (nonblank(RepSpec.f1)) then begin
      tstr = RepSpec.f1;
    end;  
  
    if (RepSpec.flags[5]!=0) then begin 
      headerf = false;
    end;  
    if (headerf) then begin
      StartReportJob(tstr);//StartReportTJob(tstr,headerf,0);
      AGrHeader(RepSpec,PLf,resUseAccum,AccumStartDate);
      EndHeader;
    end else begin
      StartReportNoHeaderJob(tstr);
    end;
    SetRepCol(2,50);
    SetRepCol(3,288);
    SetRepCol(4,384);
    SetRepCol(5,480);
    SetRepCol(6,15);
  end;
  if (RepSpec.CalledFromHAL==0) then begin
    GetNotStr(RepSpec.Notation,notstr);
    StartFormat(20);
    tstr = "";
    OutString(11,0,tstr,true); // To make export to file look better 
    OutString(20,0,tstr,true);
    if (RepSpec.Comparison==0) then begin
      tstr = USetStr(3147);
      tstr = tstr & notstr;
      OutString(3,0,tstr,true);
      tstr = USetStr(3148);
      tstr = tstr & notstr;
      OutString(4,0,tstr,true);
      tstr = USetStr(3149);
      tstr = tstr & notstr;
      OutString(5,0,tstr,true);
    end;
    if (RepSpec.Comparison==2) then begin
      tstr = USetStr(3150);
      tstr = tstr & notstr;
      OutString(3,0,tstr,true);
      tstr = USetStr(3151);
      tstr = tstr & notstr;
      OutString(4,0,tstr,true);
      tstr = USetStr(3152);
      if (nonblank(RepSpec.FirstAcc)) then begin
        tstr = tstr & notstr & " " & USetStr(3176) & " """ & RepSpec.FirstAcc &  """";
      end else begin
        tstr = tstr & notstr;
      end;
      OutString(5,0,tstr,true);
    end;
    if (RepSpec.Comparison==3) then begin
      tstr = USetStr(3153);
      tstr = tstr & notstr;
      OutString(3,0,tstr,true);
      tstr = USetStr(3154);
      tstr = tstr & notstr;
      OutString(4,0,tstr,true);
      tstr = USetStr(3155);
      if (nonblank(RepSpec.FirstAcc)) then begin
        tstr = tstr & notstr & " " & USetStr(3176) & " """ & RepSpec.FirstAcc &  """";
      end else begin
        tstr = tstr & notstr;
      end;
      OutString(5,0,tstr,true);
    end;
    if (RepSpec.Comparison==4) then begin
      Get2WholePeriods(RepSpec,RepSpec.sStartDate,RepSpec.sEndDate,per1,per2);
      tstr = "";
      OutString(3,0,tstr,true);
      OutString(4,0,per1,true);
      OutString(5,0,per2,true);
    end;
    if (RepSpec.Comparison==5) then begin
      tstr = USetStr(3173);
      tstr = tstr & notstr;
      OutString(3,0,tstr,true);
      tstr = USetStr(3147);
      tstr = tstr & notstr;
      OutString(4,0,tstr,true);
      tstr = USetStr(3149);
      tstr = tstr & notstr;
      OutString(5,0,tstr,true);
    end;
    EndFormat;
  end;
  if ((nonblank(RepSpec.ObjType)) and (RepSpec.AccSpec==2)) then begin
    StartFormat(20);
    OutString(0,0,USetStr(1565),false);
    EndFormat;
    goto L88LBalRn_New;
  end;
  
  ckey = "ShortIDKey:" & UserDefRepr.shortname;
  UserDefRepLinesr.IdKey = 0; 
  AGrs = ReadFirstKey(ckey,UserDefRepLinesr,1,false);
  if (AGrs==false) then begin
    StartFormat(20);
    OutString(0,0,USetStr(3167),false);
    EndFormat;
  end;
//calculate  
  BalRnCalcRsTypeAccounts(RepSpec,UserDefRepr.shortname,PLf,negf,Goms,resUseAccum,AccumStartDate,
    S3ba,Pba,Eba,S4ba,S5ba,S6ba,sumsv,aUserDefRepLinesr,udrlcnt);
//sums
  CalcRsTypeSum(S3ba,Pba,Eba,S4ba,S5ba,S6ba,sumsv,aUserDefRepLinesr,udrlcnt,-1);

//print
  for (udrli=0;udrli<udrlcnt;udrli=udrli+1) begin
    UserDefRepLinesr = aUserDefRepLinesr[udrli];
    switch (UserDefRepLinesr.RsType) begin
      case kRsTypeAccounts:
        negf = true;
        if (UserDefRepLinesr.AccType==kAccTypeAsset) then begin
          if (CYb.NS0[0]==0) then begin
            negf = false;
          end;
        end;
        if (UserDefRepLinesr.AccType==kAccTypeLiability) then begin
          if (CYb.NS0[1]==0) then begin
            negf = false;
          end;
        end;
        if (UserDefRepLinesr.AccType==kAccTypeEquity) then begin
          if (CYb.NS0[2]==0) then begin
            negf = false;
          end;
        end;
        if (UserDefRepLinesr.AccType==kAccTypeIncome) then begin
          if (CYb.NS0[3]==0) then begin
           negf = false;
          end;
        end;
        if (UserDefRepLinesr.AccType==kAccTypeExpense) then begin
          if (CYb.NS0[4]==0) then begin
            negf = false;
          end;
        end;              
        AccListPerBal(RepSpec,PLf,UserDefRepLinesr,tmpS3ba,tmpPba,tmpEba,tmpS4ba,tmpS5ba,tmpS6ba,negf,Goms,resUseAccum,AccumStartDate,true);
      case kRsTypeSum:
        testf = true;
        
        if (RepSpec.AccSpec==3 and HasLocalization("FIN")) then begin
          if (S3ba[UserDefRepLinesr.IdKey]==0 and
              Pba[UserDefRepLinesr.IdKey]==0 and
              Eba[UserDefRepLinesr.IdKey]==0 and
              S4ba[UserDefRepLinesr.IdKey]==0 and
              S5ba[UserDefRepLinesr.IdKey]==0 and
              S6ba[UserDefRepLinesr.IdKey]==0) then begin
            testf = false;
          end;
        end;
        
        if (testf) then begin
          negf = false;
          if (UserDefRepLinesr.AccType==kAccTypeAsset) then begin
            if (CYb.NS0[0]!=0) then begin
              negf = true;
            end;
          end;
          if (UserDefRepLinesr.AccType==kAccTypeLiability) then begin
            if (CYb.NS0[1]!=0) then begin
              negf = true;
            end;
          end;
          if (UserDefRepLinesr.AccType==kAccTypeEquity) then begin
            if (CYb.NS0[2]!=0) then begin
              negf = true;
            end;
          end;
          if (UserDefRepLinesr.AccType==kAccTypeIncome) then begin
            if (CYb.NS0[3]!=0) then begin
              negf = true;
            end;
          end;
          if (UserDefRepLinesr.AccType==kAccTypeExpense) then begin
            if (CYb.NS0[4]!=0) then begin
              negf = true;
            end;
          end;                        
          if (nonblank(UserDefRepLinesr.Comment)) then begin
            GetUserDefRepDescription(UserDefRepLinesr,RepSpec.Language,tstr);        
            AGrSumLine(RepSpec,0,tstr,"",UserDefRepLinesr.SpecCode,S3ba[UserDefRepLinesr.IdKey],Pba[UserDefRepLinesr.IdKey],Eba[UserDefRepLinesr.IdKey],
                       S4ba[UserDefRepLinesr.IdKey],S5ba[UserDefRepLinesr.IdKey],S6ba[UserDefRepLinesr.IdKey],negf,Goms,PLf,resUseAccum,"",UserDefRepLinesr.IdKey,false,true);
          end;
        end;
      case kRsTypeText:
        GetUserDefRepDescription(UserDefRepLinesr,RepSpec.Language,tstr);        
        StartFormat(15);
        OutString(0,0,tstr,false);// UserDefRepLinesr.Comment
        EndFormat;
      case kRsTypePageBreak:
        if (RepSpec.Media!=mtScreen) then begin
          NewPage(false);
        end;  
    end;
  end;
  
  if (RepSpec.flags[4]!=0) then begin
    RepSpec.f1 = "";    
    ListPerTrans(RepSpec);
  end;  
  if (RepSpec.Notation==3) then begin
    Goms = Goms*100;
    StartFormat(15);
    OutString(0,0,USetStr(3170),false);
    OutVal(340,0,Goms,M4Val,true);
    EndFormat;
  end;
L88LBalRn_new:;
  if (RepSpec.CalledFromHAL==0) then begin
    EndJob;
  end;  
LBalRn_New:;  
  return;
end;

global
procedure BalRn(record RcVc RepSpec)
begin
//  BalRn_Old(RepSpec);
  BalRn_New(RepSpec);
  AutomatedSalesOrderly("HasIntegratedNL+Run_BalRn");
  return;
end;
