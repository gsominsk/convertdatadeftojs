external procedure HTItem(string,var string);
external procedure HTArtGroup(string, var string);
external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean ItemInItemGroupOrClass(string,string,string);
external procedure HTCustCat(string,var string);
external procedure HTCustClass(string,var string);
external function Boolean ContactInGroupClass(string,string,string,string,string,string);

procedure CurRentResRn2(record RcVc RepSpec, record LocationVc Locationr, var val tqty, var val totamount) 
begin
  record RentResVc Rentr;
  record AgreementVc Agreementr;
  record INVc INr;
  record CUVc CUr;
  boolean TrHs, testf,firstf;
  val qty,amount;
  
  TrHs = true;
  firstf = true;
  Rentr.Location = Locationr.Code;
  while (LoopKey("Location",Rentr,1,TrHs)) begin
    if (TrHs) then begin
      if (Rentr.Location!=Locationr.Code) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.f3)) then begin
        if (Rentr.Code!=RepSpec.f3) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.f1)) then begin 
        Agreementr.SerNr = Rentr.AgreementNr;
        if (ReadFirstMain(Agreementr,1,true)) then begin
          if (Agreementr.CustCode <> RepSpec.f1) then begin
            testf = false;
          end;
        end;
      end;
      if (testf) then begin 
        Agreementr.SerNr = Rentr.AgreementNr;
        if (ReadFirstMain(Agreementr,1,true)) then begin
          testf = ContactInGroupClass(Agreementr.CustCode,RepSpec.f2,RepSpec.f6,"CUST","","");
        end;
      end; 
      if (nonblank(RepSpec.FirstAcc)) then begin 
        if (Rentr.Group<>RepSpec.FirstAcc) then begin
          testf = false;
        end;  
      end;
      if (testf) then begin
        testf = ItemInItemGroupOrClass(Rentr.Code,RepSpec.f4,RepSpec.f7);
      end;      
      if (nonblankdate(Rentr.EndDate)) then begin
        if (Rentr.EndDate < CurrentDate) then begin
          testf = false;
        end;
      end;
      if (Rentr.TransDate > CurrentDate) then begin
        testf = false;
      end;
      if (testf) then begin
        if (firstf) then begin
          StartFormat(15);
          OutString(0,0,Locationr.Code,false);
          OutString(40,0,Locationr.Name,false);
          EndFormat;
          StartFormat(15);
          OutString(0,0,USetStr(12841),false);
          OutString(90,0,USetStr(12842),false);
          OutString(170,0,USetStr(12843),false);
          OutString(250,0,USetStr(12844),false);
          OutString(310,0,USetStr(12845),false);
          OutString(380,0,USetStr(12846),false);
          OutString(1,0,USetStr(12847),true);
          EndFormat;
          Gray_Divider(0,1);
          firstf = false;
        end;
        
        StartFormat(15);
        OutString(0,0,Rentr.Code,false);
        OutString(90,0,Rentr.SerialNr,false);
        OutString(170,"DblAgreementVc",Rentr.AgreementNr,false);
        OutStringID(250,"DblRentResVc",Rentr.SerNr,false,Rentr.SerNr);
         Agreementr.SerNr = Rentr.AgreementNr;
        if (ReadFirstMain(Agreementr,1,true)) then begin
          OutString(310,0,Agreementr.CustCode,false);
        end;
        OutString(380,0,Rentr.TransDate,false);
        OutVal(1,0,Rentr.Price,M4Val,true);
        EndFormat;
        qty = qty + 1;
        tqty = tqty + 1;
        amount = amount + Rentr.Price;
        totamount = totamount + Rentr.Price;
      end;
    end;
  end;
  if (qty > 0) then begin
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(0,0,USetStr(12848),false);
    OutVal(140,0,qty,M40Val,true);
    OutString(420,0,USetStr(12849),true);
    OutVal(1,0,amount,M4Val,true);
    EndFormat;
    StartFormat(15);
    EndFormat;
  end;
return;
end;

global 
procedure CurRentResRn(record RcVc RepSpec)
begin
  record LocationVc Locationr;
  val s, tqty,totamount;
  boolean TrHs;
  integer rw;
  string 255 tstr; 
  
  StartReportJob(USetStr(12840));
  rw = 1;
  HTCustCat(RepSpec.f2,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  HTCustClass(RepSpec.f6,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  HTItem(RepSpec.f3,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (HasItemGroups) then begin
    HTArtGroup(RepSpec.f4,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasItemClassification) then begin
    HTItemClass(RepSpec.f7,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;  
  EndHeader;
  TrHs = true;
  Locationr.Code = RepSpec.f5;
  while (LoopMain(Locationr,1,TrHs)) begin
    if (TrHs) then begin
      if (nonblank(RepSpec.f5)) then begin
        if (Locationr.Code!=RepSpec.f5) then begin
          TrHs = false;
        end;
      end;
    end;
    if (TrHs) then begin
     CurRentResRn2(RepSpec,Locationr,tqty,totamount);
    end;
  end;
  if (tqty > 0) then begin
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(0,0,USetStr(12848),false);
    OutVal(140,0,tqty,M40Val,true);
    OutString(420,0,USetStr(12849),true);
    Outval(1,0,totamount,M4Val,true);
    EndFormat;
  end;
 
  EndJob;
  return;
end;