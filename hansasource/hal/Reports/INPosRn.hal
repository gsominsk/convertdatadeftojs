external procedure HTArtGroup(string, var string);
external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean ItemInItemGroupOrClass(string,string,string);
external procedure HTPositions(string, string, var string);
external procedure HTLocations(string, string, var string);
external procedure HTItems(string,var string);

global
procedure PrintItemsAtPosition2(string artcode,string position,string serialnr,string location,var val qty,
                               Boolean printposf,Integer flags0,string locarea,record RcVc RepSpec)
begin
  record POSVc POSr;
  record PISVc PISr;
  Boolean TrHs,testf,found,test2f;
  record INVc INr;
  record ItemHistVc IHr;
  array string 255 asernr;
  vector val asernrqty;
  vector Boolean asernrf;
  LongInt l;

  TrHs = true;
  PISr.Position = position;
  while (LoopKey("Position",PISr,1,TrHs)) begin
    ClearStringArray(asernr);
    ClearVector(asernrqty);
    ClearVector(asernrf);
    if (nonblank(position)) then begin
      if (PISr.Position<>position) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(artcode)) then begin
        if (PISr.ArtCode<>artcode) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        testf = ItemInItemGroupOrClass(PISr.ArtCode,RepSpec.f5,RepSpec.f6);
      end;
      if (testf) then begin 
        if (nonblank(locarea)) then begin
          if (PISr.LocArea<> locarea) then begin
            testf = false;
          end;
        end;
      end; 
      if (testf) then begin 
        if (nonblank(location)) then begin
          if (PISr.Location<>location) then begin
            testf = false;    
          end;  
        end;
      end; 
      if (testf) then begin 
        if (PISr.Location==";;;") then begin
          testf = false;    
        end;      
      end; 
      if (testf) then begin 
        if (PISr.Instock==0) and (PISr.InStockMov==0) then begin
          testf = false;
        end;      
      end; 
      if (testf) then begin 
        if (flags0<4) then begin
          POSr.Code = PISr.Position;
          if (ReadFirstMain(POSr,1,true)) then begin
            if (POSr.Status!=flags0) then begin testf = false; end;
          end;
        end;      
      end; 
      if (testf) then begin
        if (nonblank(serialnr)) then begin
          IHr.Position = PISr.Position;
          IHr.ArtCode = PISr.ArtCode;
          if (ReadFirstKey("Position",IHr,2,true)) then begin
            if (IHr.RemQty<=0 and IHr.SerialNr!=serialnr) then begin testf = false; end; 
          end else begin
            testf = false;
          end;
        end;
      end;
      if (testf) then begin
        StartFormat(15);
         if (printposf) then begin
           OutString(0,0,PISr.Position,false);
         end;
         OutString(50,0,PISr.Location,false);
         OutString(110,0,PISr.ArtCode & PISr.Variety,false);
         if (nonblank(serialnr)) then begin
           OutString(180,0,IHr.SerialNr,false);
         end;
         INr.Code = PISr.ArtCode;
         if (ReadFirstMain(INr,1,true)) then begin
           OutString(250,0,left(INr.Name,20),false);   
         end;
         OutVal(430,0,PISr.InStockMov,M4UVal,true);
         OutVal(480,0,PISr.Instock,M4UVal,true);
         EndFormat;
         if (blank(serialnr)) then begin
           if (INr.SerNrf!=0) then begin
             ResetLoop(IHr);
             found = true;
             IHr.Position = PISr.Position;
             IHr.ArtCode = PISr.ArtCode;
             while (LoopKey("Position",IHr,2,found)) begin
               test2f = true;
               if (IHr.Position!=PISr.Position) then begin found = false; end;
               if (IHr.ArtCode!=PISr.ArtCode) then begin found = false; end;
               if (IHr.Variety!=PISr.Variety) then begin test2f = false; end;
               if (IHr.Location!=PISr.Location) then begin test2f = false; end;
               if (found and test2f) then begin
                 if (asernrf[IHr.SerialNr]==false) then begin
                   asernr[asernr.length] = IHr.SerialNr;
                   asernrqty[IHr.SerialNr] = IHr.Qty;
                   asernrf[IHr.SerialNr] = true;
                 end else begin
                   asernrqty[IHr.SerialNr] = asernrqty[IHr.SerialNr] + IHr.Qty;
                 end;
               end;
             end;
             for (l=0;l<asernr.length;l=l+1) begin
               if (asernrqty[asernr[l]]!=0) then begin
                 StartFormat(15);
                 OutString(180,0,asernr[l],false);
                 OutVal(1,0,asernrqty[asernr[l]],M4Val,true);
                 EndFormat;
                end;
             end;
           end;
         end;
         qty = qty + PISr.Instock;
      end;
    end;
  end;
  return;
end;

global
procedure PrintItemsAtPosition(string artcode,string position,string serialnr,string location,var val qty,
                               Boolean printposf,Integer flags0,string locarea)
begin
  record RcVc RepSpec;

  PrintItemsAtPosition2(artcode,position,serialnr,location,qty,printposf,flags0,locarea,RepSpec);
end;

global
procedure INPosRn(record RcVc RepSpec)
begin
  val qty;
  string 255 tstr;
  string 255 frpos,topos;
  integer rw;
  
  frpos = FirstInRange(RepSpec.f2,10);
  topos = LastInRange(RepSpec.f2,10);
  StartReportJob(USetStr(13550));
  rw = 1;
  tstr = USetStr(13558);
  tstr = tstr & ": " & USetStr(18570 + RepSpec.flags[0]);
  Header(rw,tstr,1);  
  rw = rw + 1; 
  HTItems(RepSpec.f1,tstr);
  Header(rw,tstr,1);  
  rw = rw + 1; 
  if (HasItemGroups) then begin
    HTArtGroup(RepSpec.f5,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasItemClassification) then begin
    HTItemClass(RepSpec.f6,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;  
  HTPositions(frpos,topos,tstr);
  Header(rw,tstr,0);
  if (nonblank(RepSpec.f3)) then begin
    HTLocations(RepSpec.f3,RepSpec.f3,tstr);
    Header(rw,tstr,1);
  end;
  if (nonblank(RepSpec.LastAcc)) then begin
    tstr = USetStr(6657) & " ";
    tstr = tstr & RepSpec.LastAcc;
    Header(rw,tstr,1);
    rw = rw + 1; 
  end;

  EndHeader;
  StartFormat(15);
  OutString(0,0,USetStr(13551),false);
  OutString(50,0,USetStr(13552),false);
  OutString(110,0,USetStr(13553),false);
  OutString(180,0,USetStr(13557),false);
  OutString(250,0,USetStr(13554),false);
  OutString(430,0,USetStr(13556),true);
  OutString(480,0,USetStr(13555),true);
  EndFormat;
  qty = 0;
  Gray_Divider(0,1);
  PrintItemsAtPosition2(RepSpec.f1,RepSpec.f2,RepSpec.LastAcc,RepSpec.f3,qty,true,RepSpec.flags[0],RepSpec.f4,RepSpec);
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(13559),false);
  OutVal(1,0,qty,M4UVal,true);
  EndFormat;
  EndJob;
  return;
end;