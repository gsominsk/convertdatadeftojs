external procedure HT2Per(Date, Date , var string);
external procedure HTEmployees(string,string,var string);
external procedure HTProject(string,var string);

procedure PrintEmpStatusHeader(record RcVc RepSpec)
BEGIN
  Integer rw;
  string 255 tstr;
  string 5 frem,toem;
   
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;  
  if (nonblank(RepSpec.f2)) then begin
    HTProject(RepSpec.f2,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;  
  end;  
  frem = FirstInRange(RepSpec.f1,5);
  toem = LastInRange(RepSpec.f1,5);
  HTEmployees(frem,toem,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;  
  RETURN;
END;

function
Boolean GetEmpToInvoice(string code,Date frp,Date top,var val timep,var val matp,var val purp,var val stop,string project)
BEGIN
  record TBIVVc TBIVr;
  Boolean found,testf;
  Boolean res;
  
  res = true;
  timep = 0;
  matp = 0;
  purp = 0;
  stop = 0;
  found = true;
  TBIVr.EMCode = code;
  while (LoopKey("EMCode",TBIVr,1,found)) begin
    if (top<TBIVr.TransDate) then begin found = false; end;
    if (TBIVr.EMCode<>code) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (nonblank(project)) then begin
        if (project<>TBIVr.PRCode) then begin testf = false; end;
      end;  
      if (frp>TBIVr.TransDate) then begin testf = false; end;
      if (TBIVr.Invoice<>-1) then begin testf = false; end;
      if (testf) then begin
        if ((TBIVr.oVc==1) and (TBIVr.ItemType==3)) then begin
          timep = timep + TBIVr.Sum;
        end;
        if ((TBIVr.oVc==5) and (TBIVr.ItemType==3)) then begin
          timep = timep + TBIVr.Sum;
        end;
        if ((TBIVr.oVc==2) or (TBIVr.oVc==3)) then begin
          purp = purp + TBIVr.Sum;
        end;
        if ((((TBIVr.oVc==1) or (TBIVr.oVc==4)) and (TBIVr.ItemType==0)) or (TBIVr.ItemType==5)) then begin
          matp = matp + TBIVr.Sum;
        end;
        if (((TBIVr.oVc==6) or (TBIVr.oVc==7) or (TBIVr.oVc==4)) and (TBIVr.ItemType==1)) then begin
          stop = stop + TBIVr.Sum;
        end;
      end;
    end;
  end;
  if ((purp==0) and (matp==0) and (timep==0) and (stop==0)) then begin res = false; end;
  GetEmpToInvoice = res;
  RETURN;
END;

function
Boolean GetEmpInvoiced(string code,Date frp,Date top,var val timep,var val matp,var val purp,var val stop,string project)
BEGIN
  record TBIVVc TBIVr;
  LongInt LLoop1;
  Boolean found,testf;
  Boolean res;
  
  timep = 0;
  purp = 0;
  matp = 0;
  stop = 0;
  res = true;
  found = true;
  TBIVr.EMCode = code;
  while (LoopKey("EMCode",TBIVr,1,found)) begin
    if (top<TBIVr.TransDate) then begin found = false; end;
    if (TBIVr.EMCode<>code) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (nonblank(project)) then begin
        if (project<>TBIVr.PRCode) then begin testf = false; end;
      end;  
      if (frp>TBIVr.TransDate) then begin testf = false; end;
      if (TBIVr.Invoice==-1) then begin testf = false; end;
      if (testf) then begin
        if ((TBIVr.oVc==1) and (TBIVr.ItemType==3)) then begin
          timep = timep + TBIVr.Sum;
        end;
        if ((TBIVr.oVc==5) and (TBIVr.ItemType==3)) then begin
          timep = timep + TBIVr.Sum;
        end;
        if ((TBIVr.oVc==2) or (TBIVr.oVc==3)) then begin
          purp = purp + TBIVr.Sum;
        end;
        if ((((TBIVr.oVc==1) or (TBIVr.oVc==4)) and (TBIVr.ItemType==0)) or (TBIVr.ItemType==5)) then begin
          matp = matp + TBIVr.Sum;
        end;
        if (((TBIVr.oVc==6) or (TBIVr.oVc==7) or (TBIVr.oVc==4)) and (TBIVr.ItemType==1)) then begin
          stop = stop + TBIVr.Sum;
        end;
      end;
    end;
  end;
  if ((purp==0) and (matp==0) and (timep==0) and (stop==0)) then begin res = false; end;
  GetEmpInvoiced = res;
  RETURN;
END;

global
procedure EmpStatusRn(record RcVc RepSpec)
BEGIN
  record UserVc USr;
  Boolean found;
  string 255 frem,toem;
  val invtime,toinvtime,totinvtime,tottoinvtime;
  val invpur,toinvpur,totinvpur,tottoinvpur;
  val invmat,toinvmat,totinvmat,tottoinvmat;
  val invsto,toinvsto,totinvsto,tottoinvsto;
  val t;
  Boolean inv,toinv;
  
  StartReportJob(USetStr(6800));
  PrintEmpStatusHeader(RepSpec);
  EndHeader;
  if (RepSpec.ArtMode==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(6807),false);
    OutString(320,0,USetStr(6801),true);
    OutString(400,0,USetStr(6802),true);
    OutString(480,0,USetStr(6803),true);
    EndFormat;
  end;
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
    OutString(0,0,USetStr(6807),false);
    OutString(240,0,USetStr(6804),true);
    OutString(320,0,USetStr(6805),true);
    OutString(400,0,USetStr(6806),true);
    OutString(480,0,USetStr(6808),true);
    EndFormat;
  end;
  Gray_Divider(0,1);
  frem = FirstInRange(RepSpec.f1,5);
  toem = LastInRange(RepSpec.f1,5);
  USr.Code = frem;
  found = true;
  while (LoopMain(USr,1,found)) begin
    if (nonblank(toem)) then begin
      if (USr.Code>toem) then begin found = false; end;
    end;  
    if (found) then begin
      inv = GetEmpInvoiced(USr.Code,RepSpec.sStartDate,RepSpec.sEndDate,invtime,invmat,invpur,invsto,RepSpec.f2);
      toinv = GetEmpToInvoice(USr.Code,RepSpec.sStartDate,RepSpec.sEndDate,toinvtime,toinvmat,toinvpur,toinvsto,RepSpec.f2);
      if ((inv==true) or (toinv==true)) then begin

        if (RepSpec.ArtMode==0) then begin
          StartFormat(15);
          OutString(0,0,USr.Name,false);
          EndFormat;
          StartFormat(15);
          OutString(100,0,USetStr(6804),false);
          OutVal(320,0,toinvtime,M4Val,true);
          OutVal(400,0,invtime,M4Val,true);
          t = invtime + toinvtime;
          OutVal(480,0,t,M4Val,true);
          EndFormat;
          StartFormat(15);
          OutString(100,0,USetStr(6805),false);
          OutVal(320,0,toinvmat,M4Val,true);
          OutVal(400,0,invmat,M4Val,true);
          t = invmat + toinvmat;
          OutVal(480,0,t,M4Val,true);
          EndFormat;
          StartFormat(15);
          OutString(100,0,USetStr(6806),false);
          OutVal(320,0,toinvpur,M4Val,true);
          OutVal(400,0,invpur,M4Val,true);
          t = invpur + toinvpur;
          OutVal(480,0,t,M4Val,true);
          EndFormat;
          StartFormat(15);
          OutString(100,0,USetStr(6808),false);
          OutVal(320,0,toinvsto,M4Val,true);
          OutVal(400,0,invsto,M4Val,true);
          t = invsto + toinvsto;
          OutVal(480,0,t,M4Val,true);
          EndFormat;
        end;
        
        if (RepSpec.ArtMode==1) then begin
          StartFormat(15);
          OutString(0,0,USr.Name,false);
          EndFormat;
          StartFormat(15);
          OutString(100,0,USetStr(6801),false);
          OutVal(240,0,toinvtime,M4Val,true);
          OutVal(320,0,toinvmat,M4Val,true);
          OutVal(400,0,toinvpur,M4Val,true);
          OutVal(480,0,toinvsto,M4Val,true);
          EndFormat;
          StartFormat(15);
          OutString(100,0,USetStr(6802),false);
          OutVal(240,0,invtime,M4Val,true);
          OutVal(320,0,invmat,M4Val,true);
          OutVal(400,0,invpur,M4Val,true);
          OutVal(480,0,invsto,M4Val,true);
          EndFormat;
          StartFormat(15);
          OutString(100,0,USetStr(6803),false);
          t = invtime + toinvtime;
          OutVal(240,0,t,M4Val,true);
          t = invmat + toinvmat;
          OutVal(320,0,t,M4Val,true);
          t = invpur + toinvpur;
          OutVal(400,0,t,M4Val,true);
          t = invsto + toinvsto;
          OutVal(480,0,t,M4Val,true);
          EndFormat;
        end;

        totinvtime = totinvtime + invtime;
        totinvmat = totinvmat + invmat;
        totinvpur = totinvpur + invpur;
        totinvsto = totinvsto + invsto;
        tottoinvtime = tottoinvtime + toinvtime;
        tottoinvmat = tottoinvmat + toinvmat;
        tottoinvpur = tottoinvpur + toinvpur;
        tottoinvsto = tottoinvsto + toinvsto;
      end;
    end;
  end;
  Gray_Divider(0,1);
  if ((totinvmat<>0) or (totinvpur<>0) or (totinvtime<>0) or (tottoinvtime<>0) or
      (tottoinvpur<>0) or (tottoinvmat<>0)) then begin

    if (RepSpec.ArtMode==0) then begin
      StartFormat(15);
      OutString(0,0,USetStr(6803),false);
      EndFormat;
      StartFormat(15);
      OutString(100,0,USetStr(6804),false);
      OutVal(320,0,tottoinvtime,M4Val,true);
      OutVal(400,0,totinvtime,M4Val,true);
      t = totinvtime + tottoinvtime;
      OutVal(480,0,t,M4Val,true);
      EndFormat;
      StartFormat(15);
      OutString(100,0,USetStr(6805),false);
      OutVal(320,0,tottoinvmat,M4Val,true);
      OutVal(400,0,totinvmat,M4Val,true);
      t = totinvmat + tottoinvmat;
      OutVal(480,0,t,M4Val,true);
      EndFormat;
      StartFormat(15);
      OutString(100,0,USetStr(6806),false);
      OutVal(320,0,tottoinvpur,M4Val,true);
      OutVal(400,0,totinvpur,M4Val,true);
      t = totinvpur + tottoinvpur;
      OutVal(480,0,t,M4Val,true);
      EndFormat;
      StartFormat(15);
      OutString(100,0,USetStr(6808),false);
      OutVal(320,0,tottoinvsto,M4Val,true);
      OutVal(400,0,totinvsto,M4Val,true);
      t = totinvsto + tottoinvsto;
      OutVal(480,0,t,M4Val,true);
      EndFormat;
    end;
    
    if (RepSpec.ArtMode==1) then begin
      StartFormat(15);
      OutString(0,0,USetStr(6803),false);
      EndFormat;
      StartFormat(15);
      OutString(100,0,USetStr(6801),false);
      OutVal(240,0,tottoinvtime,M4Val,true);
      OutVal(320,0,tottoinvmat,M4Val,true);
      OutVal(400,0,tottoinvpur,M4Val,true);
      OutVal(480,0,tottoinvsto,M4Val,true);
      EndFormat;
      StartFormat(15);
      OutString(100,0,USetStr(6802),false);
      OutVal(240,0,totinvtime,M4Val,true);
      OutVal(320,0,totinvmat,M4Val,true);
      OutVal(400,0,totinvpur,M4Val,true);
      OutVal(480,0,totinvsto,M4Val,true);
      EndFormat;
      StartFormat(15);
      OutString(100,0,USetStr(6803),false);
      t = totinvtime + tottoinvtime;
      OutVal(240,0,t,M4Val,true);
      t = totinvmat + tottoinvmat;
      OutVal(320,0,t,M4Val,true);
      t = totinvpur + tottoinvpur;
      OutVal(400,0,t,M4Val,true);
      t = totinvsto + tottoinvsto;
      OutVal(480,0,t,M4Val,true);
      EndFormat;
    end;
  end;
  EndJob;
  RETURN;
END;
