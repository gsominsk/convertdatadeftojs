external procedure HT2Per(Date, Date , var string);
external function LongInt TimeDiffInSeconds(Time,Time);
external function roundmode SetRoundMOdeD(integer);

function val Max(val a,val b)
begin
  val res;
  
  if (a>=b) then begin
    res = a;
  end else begin
    res = b;
  end;
  Max = res;
  return;
end;

procedure PrintArray(string tag,Array string acountry,vector val vcountrycounter,vector val vcountrypages)
begin
  Integer i,cnt;
  val totcounter,totpages,mval;

  for (i=0;i<acountry.length;i=i+1) begin
    StartFormat(15);
     OutString(0,0,acountry[i],false);
     OutVal(2,0,vcountrycounter[acountry[i]],M4Val,true);
     OutVal(3,0,vcountrycounter[acountry[i]]/vcountrypages[acountry[i]],M4Val,true);
//     OutString(4,0,"<div></div>",false);
    EndFormat;
    totcounter = totcounter + vcountrycounter[acountry[i]];
    totpages = totpages + vcountrypages[acountry[i]];
    mval = Max(mval,vcountrycounter[acountry[i]]);
  end;
  Gray_Divider(0,1);
  StartFormat(15);
   OutString(0,0,USetStr(33664),false);
   OutVal(2,0,totcounter,M4Val,true);
   OutVal(3,0,totcounter/totpages,M4Val,true);
  EndFormat;
  
  if (acountry.length>0) then begin
    StartFormatChart(150);
    ChartBegin(-1,"$" & tag,kChartTypeBar,kChartLegendTypeNone,0,0);
    ChartXAxis(0,mval,"");
    ChartYAxis(0,11,"");
    ChartTheme("Shrooms");
    ChartDataSeriesBegin(tag);
    cnt = acountry.length;
    if (cnt>10) then begin cnt = 10; end;
    for (i=0;i<cnt;i=i+1) begin
      ChartDatum(vcountrycounter[acountry[i]],acountry[i]);
    end;
    EndChartDataSeries;      
    EndChart;
    EndFormat;
  end;
  StartFormat(15);
  EndFormat;
  return;
end;

procedure PrintArray2(Array string acountry,vector val vcountrycounter)
begin
  Integer i;
  val totcounter;

  for (i=0;i<acountry.length;i=i+1) begin
    StartFormat(15);
     OutString(0,0,acountry[i],false);
     OutVal(3,0,vcountrycounter[acountry[i]],M4Val,true);
    EndFormat;
    totcounter = totcounter + vcountrycounter[acountry[i]];
  end;
  Gray_Divider(0,1);
  StartFormat(15);
   OutString(0,0,USetStr(33664),false);
   OutVal(2,0,totcounter,M4Val,true);
  EndFormat;
  return;
end;

procedure AddToArray(string tstr,Array string acountry)
begin
  Integer i;
  
  for (i=0;i<acountry.length;i=i+1) begin
    if (acountry[i]==tstr) then begin
      goto LAddToArray;
    end;
  end;
  acountry[acountry.length] = tstr;
LAddToArray:;  
  return;
end;

procedure WebStatVisitsPerLocation(record RcVc RepSpec)
begin
  string 255 tstr,index,frcntr,tocntr;
  record WebNGStatVc WebNGSr;
  Boolean found,testf;
  Array string 255 acountry;
  vector val vcountrycounter;
  vector val vcountrypages;

  StartFormat(15);  
   OutString(0,0,USetStr(33670),false);
  EndFormat;
  Gray_Divider(0,80);
  StartFormat(15);
   OutString(0,0,USetStr(33661),false);
   OutString(2,0,USetStr(33662),true);
   OutString(3,0,USetStr(33663),true);
  EndFormat;
  Gray_Divider(0,1);
  found = true;
  index = "AccessDate";
  WebNGSr.AccessDate = RepSpec.sStartDate;
  //WebNGSr.Country = frcntr;
  while (LoopKey(index,WebNGSr,1,found)) begin
    if (WebNGSr.AccessDate>RepSpec.sEndDate) then begin 
      found = false;
    end else begin
      testf = true;
      if (nonblank(RepSpec.f1) and WebNGSr.Country!=RepSpec.f1) then begin testf = false; end;
      if (testf) then begin
        if (WebNGSr.Counter>0) then begin
          vcountrycounter[WebNGSr.Country] = vcountrycounter[WebNGSr.Country] + WebNGSr.Counter;
          vcountrypages[WebNGSr.Country] = vcountrypages[WebNGSr.Country] + 1;
        end;
        AddToArray(WebNGSr.Country,acountry);
      end;
    end;
  end;
  SortStringArray(acountry);
  PrintArray("PerLocation",acountry,vcountrycounter,vcountrypages);
  return;
end;

procedure WebStatMostVisited(record RcVc RepSpec)
begin
  string 255 tstr,index,frcntr,tocntr;
  record WebNGStatVc WebNGSr;
  Boolean found,testf;
  Array string 255 apath;
  vector val vpathcounter;
  vector val vpathpages;

  StartFormat(15);  
   OutString(0,0,USetStr(33671),false);
  EndFormat;
  Gray_Divider(0,80);
  StartFormat(15);
   OutString(0,0,USetStr(33661),false);
   OutString(2,0,USetStr(33662),true);
   OutString(3,0,USetStr(33663),true);
  EndFormat;
  Gray_Divider(0,80);
  found = true;
  index = "AccessDate";
  WebNGSr.AccessDate = RepSpec.sStartDate;
  //WebNGSr.Country = frcntr;
  while (LoopKey(index,WebNGSr,1,found)) begin
    if (WebNGSr.AccessDate>RepSpec.sEndDate) then begin 
      found = false;
    end else begin
      testf = true;
      if (nonblank(RepSpec.f1) and WebNGSr.Country!=RepSpec.f1) then begin testf = false; end;
      if (testf) then begin
        if (WebNGSr.Counter>0) then begin
          vpathcounter[WebNGSr.PathRequested] = vpathcounter[WebNGSr.PathRequested] + WebNGSr.Counter;
          vpathpages[WebNGSr.PathRequested] = vpathpages[WebNGSr.PathRequested] + 1;
        end;
        AddToArray(WebNGSr.PathRequested,apath);
      end;
    end;
  end;
  SortStringArray(apath);
  PrintArray("MostVisited",apath,vpathcounter,vpathpages);
  return;
end;

procedure WebStatVisitsSources(record RcVc RepSpec)
begin
  string 255 tstr,index,frcntr,tocntr;
  record WebNGStatVc WebNGSr;
  Boolean found,testf;
  Array string 255 ahost;
  vector val vhostcounter;
  vector val vhostpages;

  StartFormat(15);  
   OutString(0,0,USetStr(33672),false);
  EndFormat;
  Gray_Divider(0,80);
  StartFormat(15);
   OutString(0,0,USetStr(33661),false);
   OutString(2,0,USetStr(33662),true);
   OutString(3,0,USetStr(33663),true);
  EndFormat;
  Gray_Divider(0,80);
  found = true;
  index = "AccessDate";
  WebNGSr.AccessDate = RepSpec.sStartDate;
  //WebNGSr.Country = frcntr;
  while (LoopKey(index,WebNGSr,1,found)) begin
    if (WebNGSr.AccessDate>RepSpec.sEndDate) then begin 
      found = false;
    end else begin
      testf = true;
      if (nonblank(RepSpec.f1) and WebNGSr.Country!=RepSpec.f1) then begin testf = false; end;
      if (testf) then begin
        if (WebNGSr.Counter>0) then begin
          vhostcounter[WebNGSr.Host] = vhostcounter[WebNGSr.Host] + WebNGSr.Counter;
          vhostpages[WebNGSr.Host] = vhostpages[WebNGSr.Host] + 1;
        end;
        AddToArray(WebNGSr.Host,ahost);
      end;
    end;
  end;
  SortStringArray(ahost);
  PrintArray("VisitSources",ahost,vhostcounter,vhostpages);
  return;
end;

procedure WebStatMasterBanner(record RcVc RepSpec)
begin
  string 255 tstr,index,frcntr,tocntr;
  record WebNGStatVc WebNGSr;
  Boolean found,testf;
  Array string 255 amasban;
  vector val vmasbancounter;
  vector val vmasbanpages;

  StartFormat(15);  
   OutString(0,0,USetStr(33673),false);
  EndFormat;
  Gray_Divider(0,80);
  StartFormat(15);
   OutString(0,0,USetStr(33665),false);
   OutString(3,0,USetStr(33667),true);
  EndFormat;
  found = true;
  index = "AccessDate";
  WebNGSr.AccessDate = RepSpec.sStartDate;
  //WebNGSr.Country = frcntr;
  while (LoopKey(index,WebNGSr,1,found)) begin
    if (WebNGSr.AccessDate>RepSpec.sEndDate) then begin 
      found = false;
    end else begin
      testf = true;
      if (nonblank(RepSpec.f1) and WebNGSr.Country!=RepSpec.f1) then begin testf = false; end;
      if (WebNGSr.Type!=kWebAccessMasterBannner)  then begin testf = false; end;
      if (testf) then begin
        if (WebNGSr.Counter>0) then begin
          vmasbancounter[WebNGSr.Type] = vmasbancounter[WebNGSr.Type] + WebNGSr.Counter;
          vmasbanpages[WebNGSr.Type] = vmasbanpages[WebNGSr.Type] + 1;
        end;
        AddToArray(WebNGSr.Type,amasban);
      end;
    end;
  end;
  PrintArray("MasterBanner",amasban,vmasbancounter,vmasbanpages);
  return;
end;

procedure WebStatELearning(record RcVc RepSpec)
begin
  string 255 tstr,index,frcntr,tocntr;
  record WebNGStatVc WebNGSr;
  Boolean found,testf;
  Array string 255 aelearn;
  vector val velearncounter;
  vector val velearnpages;

  StartFormat(15);  
   OutString(0,0,USetStr(33674),false);
  EndFormat;
  Gray_Divider(0,80);
  StartFormat(15);
   OutString(0,0,USetStr(33665),false);
   OutString(3,0,USetStr(33667),true);
  EndFormat;
  found = true;
  index = "AccessDate";
  WebNGSr.AccessDate = RepSpec.sStartDate;
  //WebNGSr.Country = frcntr;
  while (LoopKey(index,WebNGSr,1,found)) begin
    if (WebNGSr.AccessDate>RepSpec.sEndDate) then begin 
      found = false;
    end else begin
      testf = true;
      if (nonblank(RepSpec.f1) and WebNGSr.Country!=RepSpec.f1) then begin testf = false; end;
      if (WebNGSr.PathRequested!="/elearning" and WebNGSr.PathRequested!="/partnerportal")  then begin testf = false; end;
      if (testf) then begin
        if (WebNGSr.Counter>0) then begin
          velearnpages[WebNGSr.PathRequested] = velearnpages[WebNGSr.PathRequested] + 1;
        end;
        AddToArray(WebNGSr.Type,aelearn);
      end;
    end;
  end;
  PrintArray2(aelearn,velearnpages);
  return;
end;

procedure WebStatOverview(record RcVc RepSpec)
begin
  string 255 index,lastpage;
  record WebNGStatVc WebNGSr;
  LongInt sessions,cnt,exitcnt,nrusers,avgtimecnt,sessiontimes,totalpages;
  time starttime,endtime;
  Integer i,arrcnt,arrcnt1,arrcnt2;
  Boolean found,testf,userfound,pagefound;
  Array string 255 ausers,apages,alanguages,acountries;
  Array LongInt apagesviews,anrlanguages,anrcountries;
  val bouncerate,newusers,val1,val2;
  UUID tuuid,lastsession;
  vector Integer aexits,asessions;
  val tval;
  
  StartFormat(15);
  EndFormat;
  Black_Divider(0,1);
  StartFormat(15);
  EndFormat;
  StartFormat(15);  
    OutString(0,0,USetStr(33675),false);
  EndFormat;
  Gray_Divider(0,80);
  found = true;
  StartFormat(15);
  OutString(0,0,USetStr(33676),false);
  OutString(150,0,USetStr(33677),true);
  OutString(300,0,USetStr(33678),true);
  OutString(400,0,USetStr(33679),true);
  OutString(1,0,USetStr(33680),true);
  EndFormat;
  sessions = 0;
  cnt = 0;
  exitcnt = 0;
  nrusers = 0;
  avgtimecnt = 0;
  sessiontimes = 0;
  totalpages = 0;
  arrcnt = 0;
  arrcnt1 = 0;
  arrcnt2 = 0;
  index = "Sessions";
  WebNGSr.AccessDate = RepSpec.sStartDate;
  WebNGSr.SessionID = tuuid;
  WebNGSr.StartTime = "00:00";
  while (LoopKey(index,WebNGSr,2,found)) begin
    if (WebNGSr.AccessDate>RepSpec.sEndDate) then begin 
      found = false;
    end else begin
      testf = true;
      if (nonblank(RepSpec.f1) and WebNGSr.Country!=RepSpec.f1) then begin testf = false; end;
      if (blank(WebNGSr.SessionID) or blank(WebNGSr.StartTime) or blank(WebNGSr.EndTime)) then begin
        testf = false;
      end;
      if (testf) then begin
        totalpages = totalpages + 1;
        if (nonblank(WebNGSr.UserCode)) then begin
          if (nrusers==0) then begin
            ausers[0] = WebNGSr.UserCode;
            nrusers = 1;
          end else begin
            userfound = false;
            for (i=0;i<nrusers;i=i+1) begin
              if (ausers[i]==WebNGSr.UserCode) then begin
                userfound = true;
                goto LSkip;
              end;
            end;
LSkip:;
            if (userfound==false) then begin
              ausers[nrusers] = WebNGSr.UserCode;
              nrusers = nrusers + 1;
            end;
          end;
        end;
        if (nonblank(WebNGSr.PathRequested) and WebNGSr.Counter>0) then begin
          pagefound = false;
          if (arrcnt!=0) then begin
            for (i=0;i<arrcnt;i=i+1) begin
              if (apages[i]==WebNGSr.PathRequested) then begin
                apagesviews[i] = apagesviews[i] + WebNGSr.Counter;
                pagefound = true;
              end;
            end;
          end;
          if (pagefound==false) then begin
            apages[arrcnt] = WebNGSr.PathRequested;
            apagesviews[arrcnt] = WebNGSr.Counter;
            arrcnt = arrcnt + 1;
          end;
        end;
        if (nonblank(WebNGSr.Country) and WebNGSr.Counter>0) then begin
          pagefound = false;
          if (arrcnt1!=0) then begin
            for (i=0;i<arrcnt1;i=i+1) begin
              if (acountries[i]==WebNGSr.Country) then begin
                anrcountries[i] = anrcountries[i] + WebNGSr.Counter;
                pagefound = true;
              end;
            end;
          end;
          if (pagefound==false) then begin
            acountries[arrcnt1] = WebNGSr.Country;
            anrcountries[arrcnt1] = WebNGSr.Counter;
            arrcnt1 = arrcnt1 + 1;
          end;
        end;
        if (nonblank(WebNGSr.LangRequested) and WebNGSr.Counter>0) then begin
          pagefound = false;
          if (arrcnt2!=0) then begin
            for (i=0;i<arrcnt2;i=i+1) begin
              if (alanguages[i]==WebNGSr.LangRequested) then begin
                anrlanguages[i] = anrlanguages[i] + WebNGSr.Counter;
                pagefound = true;
              end;
            end;
          end;
          if (pagefound==false) then begin
            alanguages[arrcnt2] = WebNGSr.LangRequested;
            anrlanguages[arrcnt2] = WebNGSr.Counter;
            arrcnt2 = arrcnt2 + 1;
          end;
        end;
        if (WebNGSr.SessionID!=lastsession and !blankuuid(lastsession)) then begin
          if (cnt==0) then begin
            aexits[lastpage] = aexits[lastpage] + 1;
          end;
          asessions[WebNGSr.PathRequested] = asessions[WebNGSr.PathRequested] + 1;          

          sessiontimes = sessiontimes + TimeDiffInSeconds(starttime,endtime);
          avgtimecnt = avgtimecnt + 1;
          sessions = sessions + 1;
          lastsession = WebNGSr.SessionID;
          lastpage = WebNGSr.PathRequested;
          cnt = 0;
        end else begin
          cnt = cnt + 1;
          lastpage = WebNGSr.PathRequested;
          asessions[lastpage] = asessions[lastpage] + 1;          
          lastsession = WebNGSr.SessionID;
          starttime = WebNGSr.StartTime;
          if (nonblank(endtime)) then begin
            if (endtime<WebNGSr.EndTime) then begin
              endtime = WebNGSr.EndTime;
            end;
          end else begin
            endtime = WebNGSr.EndTime;
          end;
        end;
      end;
    end;
  end;
  if (cnt==0) then begin
    aexits[WebNGSr.PathRequested] = aexits[WebNGSr.PathRequested] + 1;
  end;

  sessiontimes = sessiontimes + TimeDiffInSeconds(starttime,endtime);
  avgtimecnt = avgtimecnt + 1;
  sessions = sessions + 1;

  val1 = exitcnt;
  val2 = sessions;
  bouncerate = (val1 / val2) * 100;
  val1 = sessions;
  val2 = totalpages;
  newusers = (val1 / val2) * 100;
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,sessions,false);
  OutString(150,0,nrusers,true);
  OutString(300,0,sessiontimes / avgtimecnt,true);
  //OutString(400,0,bouncerate,true);
  OutVal(1,0,newusers,M4Val,true);
  EndFormat;
  Gray_Divider(0,1);
  if (arrcnt>0) then begin
    StartFormat(15);
    EndFormat;
    StartFormat(15);
    OutString(0,0,USetStr(33681),false);
    OutString(300,0,USetStr(33682),true);
    EndFormat;
    Gray_Divider(0,1);
    for (i=0;i<arrcnt;i=i+1) begin
      StartFormat(15);
      OutString(0,0,apages[i],false);
      OutString(300,0,apagesviews[i],true);
      tval = aexits[apages[i]]*100/asessions[apages[i]];
      OutString(400,0,tval,true);
      EndFormat;
    end;
    Gray_Divider(0,1);
  end;
  if (arrcnt1>0) then begin
    StartFormat(15);
    EndFormat;
    StartFormat(15);
    OutString(0,0,USetStr(33683),false);
    OutString(300,0,USetStr(33684),true);
    EndFormat;
    Gray_Divider(0,1);
    for (i=0;i<arrcnt1;i=i+1) begin
      StartFormat(15);
      OutString(0,0,acountries[i],false);
      OutString(300,0,anrcountries[i],true);
      EndFormat;
    end;
    Gray_Divider(0,1);
  end;
  if (arrcnt2>0) then begin
    StartFormat(15);
    EndFormat;
    StartFormat(15);
    OutString(0,0,USetStr(33685),false);
    OutString(300,0,USetStr(33683),true);
    EndFormat;
    Gray_Divider(0,1);
    for (i=0;i<arrcnt2;i=i+1) begin
      StartFormat(15);
      OutString(0,0,alanguages[i],false);
      OutString(300,0,anrlanguages[i],true);
      EndFormat;
    end;
    Gray_Divider(0,1);
  end;

  return;
end;

global
procedure WebStatRn(record RcVc RepSpec)
begin
  string 255 tstr,frcntr,tocntr;
  Integer rw;
  
  frcntr = FirstInRange(RepSpec.f1,20);
  tocntr = LastInRange(RepSpec.f1,20);
  StartReportJob(USetStr(33660));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;
  SetRepCol(2,250);
  SetRepCol(3,400);
  SetRepCol(4,440);
  WebStatVisitsPerLocation(RepSpec);
  WebStatMostVisited(RepSpec);
  WebStatVisitsSources(RepSpec);
  WebStatMasterBanner(RepSpec);
  WebStatELearning(RepSpec);
  WebStatOverview(RepSpec);
  EndJob;
  return;
end;