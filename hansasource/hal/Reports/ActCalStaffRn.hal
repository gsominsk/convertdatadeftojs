external procedure HT2Per(Date, Date , var string);
external procedure vTimeDiff(Time,Time,var val);

procedure PrintStaffActivities(record RcVc RepSpec,record UserVc Userr,var val tottimev,var LongInt actcnt)
BEGIN
  record ActVc Actr;
  row ActVc Actrw;
  Boolean TrHs,testf,firstf,oneperson,firstdate;
  string 255 ckey;
  string 255 tstr;
  Date oldDate;
  Time timet,blanktimet;
  val timev,totv;
  Integer i,rwcnt;
  LongInt useractcnt;
  val usertottimev;

  totv = 0;
  useractcnt = 0;
  usertottimev = blankval;
  firstf = true;
  oneperson = true;
  firstdate = true;
  oldDate = AddYear(oldDate,-2);  
  Actr.TransDate = RepSpec.sStartDate;
  Actr.TodoFlag = 0;
  ckey = "UserMain:";
  ckey = ckey & Userr.Code;
  TrHs = true;
  while (LoopKey(ckey,Actr,1,TrHs)) begin // can't we rewrite this to use key called DateUserMain
    if (Actr.TodoFlag!=0) then begin TrHs = false; end;
    testf = false;
    if (TrHs) then begin
      testf = true;
      if (DateInRange(Actr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;
      if (Actr.Invalid!=0) then begin testf = false; end;
      if (Actr.PrivateFlag!=0) then begin
        if ((SetInSet(CurrentUser,Actr.MainPersons)==false) and
            (SetInSet(CurrentUser,Actr.CCPersons)==false)) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        if (firstf) then begin
          StartFormat(15);
          OutString(0,0,Userr.Code,false);
          OutString(2,0,Userr.Name,false);
          OutString(4,0,Userr.IDCode,false);
          EndFormat; 
          Gray_Divider(0,1);
          StartFormat(15);
          OutString(0,0,USetStr(14281),false);
          OutString(2,0,USetStr(14284),false);
          OutString(4,0,USetStr(14288),false);
          OutString(6,0,USetStr(14289),true);
          EndFormat; 
          Gray_Divider(0,1);
          firstf = false;
        end;
        StartFormat(15);
        if (oldDate!=Actr.TransDate) then begin
          if (firstdate==false) then begin
//            OutVal(440,0,totv,M4Val,true);
          end;
          OutDate(0,0,Actr.TransDate,false);
          firstdate = false;
        end;
        OutString(2,0,Actr.StartTime,false);
        if ((nonblankdate(Actr.EndDate)) and (Actr.TransDate!=Actr.EndDate)) then begin
          OutString(3,0,"***",false);
        end else begin
          OutString(3,0,Actr.EndTime,false);
        end;
        if (nonblank(Actr.Comment)) then begin
          OutStringID(4,"DblActRec",Actr.Comment,false,Actr.SerNr);
        end else begin
          OutStringID(4,"DblActRec","-",false,Actr.SerNr);
        end;
        OutStringID(5,"DblCUVc",Left(Actr.CUName,25),false,Actr.CUCode);
        timet = blanktimet;
        if (Actr.CalTimeFlag==1) then begin
          if (nonblanktime(Actr.CostTime)) then begin
            vTimeDiff(timet,Actr.CostTime,timev);
          end else begin
            vTimeDiff(Actr.EndTime,Actr.StartTime,timev);
          end;  
          OutVal(6,0,timev,M4Val,true);
          usertottimev = usertottimev + timev;
          totv = totv + timev;
        end else begin
          if (Actr.CalTimeFlag==2) then begin
            OutString(6,0,USetStr(9826),true);
          end;
        end;         
        if (Actr.OKFlag!=0) then begin
          OutString(7,0,USetStr(6691),false);
        end;
        EndFormat;
        oldDate = Actr.TransDate;
        useractcnt = useractcnt + 1;
      end;
    end;
  end;
  if (firstf==false) then begin
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(0,0,USetStr(6690),false);
    OutLongInt(3,0,useractcnt,false);
    OutString(5,0,USetStr(6683),false);
    OutVal(460,0,usertottimev,M4Val,true);  
    EndFormat;
    StartFormat(15);
    EndFormat;
    Black_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;
  tottimev = tottimev + usertottimev;
  actcnt = actcnt + useractcnt;
  RETURN;
END;

global
procedure ActCalStaffRn(record RcVc RepSpec)
BEGIN
  record UserVc Userr;
  string 20 frus,tous;
  Boolean foundf,testf;
  record CYBlock CompRec;
  record CalDispGroupBlock CalDispGroupRec;
  row CalDispGroupBlock CalDispGrouprw;
  val tottimev;
  LongInt actcnt;
  Integer i,rwcnt,rw;
  string 255 usersstr,tstr;
  
  foundf = true;
  usersstr = "";
  if (nonblank(RepSpec.AccStr)) then begin
    BlockLoad(CalDispGroupRec);
    rwcnt = MatRowCnt(CalDispGroupRec);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CalDispGroupRec,i,CalDispGrouprw);
      if (CalDispGrouprw.Code==RepSpec.AccStr) then begin
        usersstr = CalDispGrouprw.DefStr;
        i = rwcnt;
      end;
    end;
  end;
  BlockLoad(CompRec);
  frus = FirstInRange(RepSpec.f1,20);
  tous = LastInRange(RepSpec.f1,20);
  StartReportJob(USetStr(6950));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  tstr = USetStr(20507) & " " & CompRec.OrgNr;
  Header(rw,tstr,0);
  rw = rw + 1;
  if (nonblank(RepSpec.f1)) then begin
    Header(rw,RepSpec.f1,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.AccStr)) then begin
    Header(rw,RepSpec.AccStr,1);
    rw = rw + 1;
  end;
  EndHeader;
  SetRepCol(2,60);
  SetRepCol(3,105);
  SetRepCol(4,150);
  SetRepCol(5,300);
  SetRepCol(6,460);
  SetRepCol(7,465);
  Userr.Code = frus;
  while (LoopMain(Userr,1,foundf)) begin
    if (nonblank(RepSpec.f1)) then begin
      if (Userr.Code>tous) then begin
        foundf = false;
      end;
    end;
    testf = foundf;
    if (nonblank(usersstr)) then begin
      if (SetInSet(Userr.Code,usersstr)==false) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      PrintStaffActivities(RepSpec,Userr,tottimev,actcnt);
    end;
  end;
  EndJob;
  RETURN;
END;
