external procedure HT2Per(Date, Date , var string);

procedure SharesTrsfSortedOnTrsfNumber(record RcVc RepSpec,var vector val vbal)
begin
  record SharesTranVc STr;
  row SharesTranVc STrw;
  Integer i,rwcnt;
  Boolean found,testf;
  string 255 frus,tous;
  
  frus = FirstInRange(RepSpec.f1,20);
  tous = LastInRange(RepSpec.f1,20);
  found = true;
  STr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",STr,1,found)) begin
    if (DateInRange(STr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (STr.OKFlag==0) then begin testf = false; end;
      if (nonblank(RepSpec.f1)) then begin
        if (STr.BuyUserCode<frus) then begin testf = false; end;
        if (STr.BuyUserCode>tous) then begin testf = false; end;
        if (STr.SellUserCode<frus) then begin testf = false; end;
        if (STr.SellUserCode>tous) then begin testf = false; end;
      end;
      if (testf) then begin
        rwcnt = MatRowCnt(STr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(STr,i,STrw);
          vbal["BUY"] = vbal["BUY"] + STrw.Qty;
          StartFormat(15);
           OutString(0,"DblSharesTranVc",STr.SerNr,false);
           OutDate(2,0,STr.TransDate,false);
           OutString(3,0,STr.BuyName,false);
           OutVal(4,0,STrw.Qty,M4Val,true);
           OutVal(1,0,vbal["TOTAL"],M4Val,true);
          EndFormat;
          if (nonblank(STr.SellUserCode)) then begin
            vbal["SELL"] = vbal["SELL"] + STrw.Qty;
            vbal["TOTAL"] = vbal["TOTAL"] - STrw.Qty;
            StartFormat(15);
             OutString(0,"DblSharesTranVc",STr.SerNr,false);
             OutDate(2,0,STr.TransDate,false);
             OutString(3,0,STr.SellName,false);
             OutVal(5,0,STrw.Qty,M4Val,true);
             OutVal(1,0,vbal["TOTAL"],M4Val,true);
            EndFormat;
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure AddSharesCertHistRecord(record SharesCertHistVc SCHr,record SharesCertHistVc sumSCHr)
begin
  sumSCHr.Qty = sumSCHr.Qty + SCHr.Qty;
  return;
end;

procedure PrintSharesCertHistRecord(record RcVc RepSpec,record SharesCertHistVc SCHr,var vector val vbal)
begin
  StartFormat(15);
   OutString(0,"DblSharesTranVc",SCHr.TransNr,false);
   OutDate(2,0,SCHr.TransDate,false);
   switch (SCHr.Type) begin
     case kSharesCertHistTypeBuy:
       OutVal(4,0,SCHr.Qty,M4Val,true);
       vbal["BUY"] = vbal["BUY"] + SCHr.Qty;
       vbal["TOTAL"] = vbal["TOTAL"] - SCHr.Qty;
     case kSharesCertHistTypeAllotment:
       OutVal(5,0,SCHr.Qty,M4Val,true);
       vbal["TOTAL"] = vbal["TOTAL"] + SCHr.Qty;
       vbal["SELL"] = vbal["SELL"] + SCHr.Qty;
     case kSharesCertHistTypeSell:
       OutVal(5,0,SCHr.Qty,M4Val,true);
       vbal["TOTAL"] = vbal["TOTAL"] + SCHr.Qty;
       vbal["SELL"] = vbal["SELL"] + SCHr.Qty;
   end;
   OutVal(1,0,vbal["TOTAL"],M4Val,true);
  EndFormat;
  return;
end;

procedure SharesTrsfSortedOnPerson(record RcVc RepSpec,var vector val vbal)
begin
  record SharesCertHistVc SCHr;
  record SharesCertHistVc sumSCHr;
  record SharesCertHistVc lastSCHr;
  Boolean found,testf,schtestf;
  string 255 frus,tous;
  string 255 index;
  Integer keys;
  vector val ubal;

  frus = FirstInRange(RepSpec.f1,20);
  tous = LastInRange(RepSpec.f1,20);
  found = true;
  if (nonblank(RepSpec.f1)) then begin
    SCHr.Person = frus;
    SCHr.TransDate = RepSpec.sStartDate;
    keys = 2;
  end else begin
    keys = 1;
  end;
  while (LoopKey("Person",SCHr,keys,found)) begin
    if (nonblank(RepSpec.f1)) then begin
      if (SCHr.Person>tous) then begin found = false; end;
      if (DateInRange(SCHr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin found = false; end;
    end;
    if (found) then begin
      testf = true;
      if (DateInRange(SCHr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;
      if (testf) then begin
        if (lastSCHr.SerNr<=0) then begin//first time
          RecordCopy(sumSCHr,SCHr);
        end else begin
          schtestf = true;
          if (lastSCHr.FileName==SCHr.FileName) and (lastSCHr.TransNr==SCHr.TransNr) and (lastSCHr.Row==SCHr.Row) and (lastSCHr.Type==SCHr.Type) and (lastSCHr.Person==SCHr.Person) then begin
            schtestf = false;
          end;
          if (schtestf) then begin
            PrintSharesCertHistRecord(RepSpec,sumSCHr,ubal);
            RecordCopy(sumSCHr,SCHr);
          end else begin
            AddSharesCertHistRecord(SCHr,sumSCHr);
          end;
        end;
        if (lastSCHr.Person!=SCHr.Person) then begin
          if (nonblank(lastSCHr.Person)) then begin
            Gray_Divider(0,1);
            StartFormat(15);
             OutVal(4,0,ubal["BUY"],M4Val,true);
             OutVal(5,0,ubal["SELL"],M4Val,true);
             OutVal(1,0,ubal["TOTAL"],M4Val,true);
            EndFormat;
            StartFormat(15);
            EndFormat;
          end;
          StartFormat(15);
           OutString(0,0,USetStr(19533) & ":  " & SCHr.PersonName,false);
          EndFormat;
          Gray_Divider(0,100);
          StartFormat(15);
           OutString(2,0,USetStr(19537),false);
          EndFormat;
          vbal["BUY"] = vbal["BUY"] + ubal["BUY"];
          vbal["SELL"] = vbal["SELL"] + ubal["SELL"];
          vbal["TOTAL"] = vbal["TOTAL"] + ubal["TOTAL"];
          ubal["BUY"] = blankval;
          ubal["SELL"] = blankval;
          ubal["TOTAL"] = blankval;
        end;
      end;
      RecordCopy(lastSCHr,SCHr);
    end;
  end;
  if (sumSCHr.Qty!=0) then begin
    PrintSharesCertHistRecord(RepSpec,sumSCHr,ubal);
    Gray_Divider(0,1);
    StartFormat(15);
     OutVal(4,0,ubal["BUY"],M4Val,true);
     OutVal(5,0,ubal["SELL"],M4Val,true);
     OutVal(1,0,ubal["TOTAL"],M4Val,true);
    EndFormat;
    vbal["BUY"] = vbal["BUY"] + ubal["BUY"];
    vbal["SELL"] = vbal["SELL"] + ubal["SELL"];
    vbal["TOTAL"] = vbal["TOTAL"] + ubal["TOTAL"];
  end;
  return;
end;

global
procedure SharesTrsfRn(record RcVc RepSpec)
begin
  Integer oldcomp;
  Integer rw;
  string 255 tstr;
  vector val vbal;

  oldcomp = CurrentCompany;
  if (SetCompany(1,false)) then begin end;

  StartReportJob(USetStr(19520));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  tstr = USetStr(19521) & ": " & USetStr(19522+RepSpec.flags[1]);
  Header(rw,tstr,0);
  Header(rw,USetStr(19530) & ":" & CurrentUser,1);
  rw = rw + 1;
  tstr = USetStr(19524) & ": " & USetStr(19525+RepSpec.flags[0]);
  Header(rw,tstr,0);
  EndHeader;
  SetRepCol(2,50);
  SetRepCol(3,110);
  SetRepCol(4,360);
  SetRepCol(5,420);

  switch (RepSpec.flags[1]) begin  
    case 0:
      StartFormat(15);
       OutString(0,0,USetStr(19531),false);
       OutString(2,0,USetStr(19532),false);
       OutString(4,0,USetStr(19534),true);
       OutString(5,0,USetStr(19535),true);
       OutString(1,0,USetStr(19536),true);
      EndFormat;
      Black_Divider(0,1);
      SharesTrsfSortedOnPerson(RepSpec,vbal);
      Gray_Divider(0,1);
      StartFormat(15);
       OutVal(4,0,vbal["BUY"],M4Val,true);
       OutVal(5,0,vbal["SELL"],M4Val,true);
       OutVal(1,0,vbal["TOTAL"],M4Val,true);
      EndFormat;
    case 1:
      StartFormat(15);
       OutString(0,0,USetStr(19531),false);
       OutString(2,0,USetStr(19532),false);
       OutString(3,0,USetStr(19533),false);
       OutString(4,0,USetStr(19534),true);
       OutString(5,0,USetStr(19535),true);
       OutString(1,0,USetStr(19536),true);
      EndFormat;
      Gray_Divider(0,1);
      SharesTrsfSortedOnTrsfNumber(RepSpec,vbal);
      Gray_Divider(0,1);
      StartFormat(15);
       OutVal(4,0,vbal["BUY"],M4Val,true);
       OutVal(5,0,vbal["SELL"],M4Val,true);
       OutVal(1,0,vbal["TOTAL"],M4Val,true);
      EndFormat;
      StartFormat(15);
       OutString(3,0,USetStr(19537),false);
      EndFormat;
      StartFormat(15);
       OutString(3,0,USetStr(19536),false);
      EndFormat;
    case 1:
  end;
  EndJob;
  ResetCompany(oldcomp);
  return;
end;