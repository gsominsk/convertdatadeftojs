external function val STCompFindSerialNrQty(string,string,string,string,string,var string);
external procedure HTItemClass(string,var string);
external function Boolean IsEnterprise();
external function Boolean HasMultiCurrency();
external function Boolean HasContactClassification();
external function val AbsoluteVal(val);
external procedure BackDatStock(string,string,string,var val,Date,Integer);
external procedure FindLastSTForItem(record RcVc,string,Date,var record StockTakeVc);
external procedure FindStockValueAtPosition(string,string,string,var record PISVc);
external function Boolean TestArtCodeMatch(string,string);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure HTLocations(string,string, var string);
external function val GetStockQty(string,string,Date,Boolean);
external procedure HTArts(string, string, var string);
external procedure HTArtGroup(string, var string);
external procedure HTCustClass(string,var string);
external procedure HTCustClassType(string,var string);
external function Boolean SetInSet2(string,string);
external procedure ItemClassTypef(string,string,var Boolean);


procedure FindLastST(record RcVc RepSpec,string item,Integer SerNrf,Date fromdate,var Date lastdatep,var val unitsp,var val instock,
                    var array val counteda,var array string batcha,var array string posa,var Integer arrcnt,
                    var val unitprice,string variety)
BEGIN
  record ItemHistVc IHr;
  record StockTakeVc StockTaker;
  row StockTakeVc StockTakerw;
  Boolean TrHs,testf;
  Integer rwcnt,i,keys;
  val t;
  Integer slen;
  record MainStockBlock MainStockRec;
  string 255 keystr;
  Date td;

  lastdatep = td;
  unitprice = blankval;
  instock = blankval;
  BlockLoad(MainStockRec);
  td = AddYear(td,-GetYear(td));
//  if (RepSpec.flags[3]==0) then begin
    if (nonblank(variety)) then begin
      keystr = "ArtCodeVariety";
      keys = 3;
      IHr.Variety = variety;
    end else begin
      keystr = "ArtCode";
      keys = 2;
    end;
    IHr.ArtCode = item;
    IHr.TransDate = CurrentDate;
    TrHs = true;
    while (LoopBackKey(keystr,IHr,keys,TrHs)) begin
      if (IHr.ArtCode<>item) then begin TrHs = false; end;
      if (nonblank(variety)) then begin
        if (IHr.Variety!=variety) then begin TrHs = false; end;
      end;
      if (IHr.TransDate<fromdate) then begin
        TrHs = false;
      end;
      if (TrHs) then begin
        if (IHr.FileName=="StockTakeVc") then begin
          StockTaker.SerNr = IHr.TransNr;
          if (ReadFirstMain(StockTaker,1,true)) then begin
            rwcnt = MatRowCnt(StockTaker);
            if ((IHr.Row<rwcnt) and (IHr.Row>-1)) then begin
              MatRowGet(StockTaker,IHr.Row,StockTakerw);
              testf = true;
              if (nonblank(variety)) then begin
                if ((item & variety)!=StockTakerw.ArtCode) then begin testf = false; end;
              end else begin
//                if (item!=StockTakerw.ArtCode) then begin testf = false; end;
//                if (item!=Left(StockTakerw.ArtCode,len(item))) then begin testf = false; end;
                if (TestArtCodeMatch(StockTakerw.ArtCode,item)==false) then begin testf = false; end;
              end;
              if (nonblank(RepSpec.AccStr)) then begin
                if (nonblank(StockTakerw.Location)) then begin
                  if (StockTakerw.Location<>RepSpec.AccStr) then begin testf = false; end;
                end else begin
                  if (nonblank(StockTaker.Location)) then begin
                    if (StockTaker.Location<>RepSpec.AccStr) then begin testf = false; end;
                  end else begin
                    if (MainStockRec.MainStock<>RepSpec.AccStr) then begin testf = false; end;
                  end;
                end;
              end;
              if (nonblank(RepSpec.LastAcc)) then begin
                if (StockTakerw.Position!=RepSpec.LastAcc) then begin testf = false; end;
              end;
              if (IHr.Invalid!=0) then begin testf = false; end;
              if (testf) then begin
                if (StockTaker.TransDate<>td) then begin
                  t = 0;
                  t = StockTakerw.Qty + t;
                  unitprice = unitprice + StockTakerw.BasePrice;
                end else begin
                  t = StockTakerw.Qty + t;
                  unitprice = unitprice + StockTakerw.BasePrice;
                end;
                if (SerNrf==0) then begin
                  if (blank(instock)) then begin
                    instock = StockTakerw.InStock;
                  end;
                end else begin
                  instock = instock + StockTakerw.InStock;
                end;
                if (nonblank(StockTakerw.SerialNr)) then begin
                  batcha[arrcnt] = StockTakerw.SerialNr;
                  counteda[arrcnt] = StockTakerw.Qty;
                  posa[arrcnt] = StockTakerw.Position;
                  arrcnt = arrcnt + 1;
                end;
                td = StockTaker.TransDate;
                lastdatep = StockTaker.TransDate;
//                TrHs = false;//if many serianl numbers for one item then we stop in the middle of it
              end;
            end;
          end;
        end;
      end;   
    end;  
L99:;
  unitsp = t;
  RETURN;
END;

procedure PrintSTCompOneItem(record RcVc RepSpec,record INVc INr,Boolean varf,string variety,string serialnr,Date dat1,val diff,val units,val instock,val instock2,var val totinprice)
begin
  string 200 dblstr;  
  record INVc locINr;
  Boolean testf

  if (diff!=0) or (units!=0) or (instock!=0) then begin
    testf = true;
  end;
  if (blank(RepSpec.vals0)==false) then begin
    if (AbsoluteVal(diff* INr.InPrice)<RepSpec.vals0) then begin testf = false; end;
  end;
  if (testf) then begin
    if (nonblank(variety)) then begin
      ReadFirstItem(INr.Code & variety,locINr,true,true);
    end else begin
      locINr = INr; 
    end;

    StartFormat(15);
    dblstr = "DblINVc";
    if (varf) then begin
      dblstr = "DblINVc";
    end;      
    OutString(0,dblstr,INr.Code & variety,false);
    OutString(2,0,locINr.Name,false);
    switch (RepSpec.flags[1]) begin
      case 0:    
        OutDate(3,0,dat1,true);
        if (nonblank(serialnr)) then begin
          OutString(280,0,serialnr,false);
        end else begin
          OutString(280,0,RepSpec.LastAcc,false);
        end;
        if (RepSpec.flags[0]!=0) then begin OutVal(330,0,instock2,M4UVal,true); end;
        OutVal(4,0,instock,M4UVal,true);
        OutVal(5,0,units,M4UVal,true);      
        OutVal(1,0,diff,M4UVal,true);
      case 1:
        OutString(240,0,instock,true);
        OutString(290,0,INr.InPrice,true);
        OutString(330,0,instock * INr.InPrice,true);      
        OutString(370,0,units,true);
        OutVal(420,0,diff,M4UVal,true);
        OutVal(1,0,diff* INr.InPrice,M4Val,true);
        totinprice = totinprice + diff* INr.InPrice;
      case 2:    
        OutString(3,0,INr.InvCode,true);
        OutString(280,0,RepSpec.LastAcc,false);
        if (RepSpec.flags[0]!=0) then begin OutVal(330,0,instock2,M4UVal,true); end;
        OutVal(4,0,instock,M4UVal,true);
        OutVal(5,0,units,M4UVal,true);      
        OutVal(1,0,diff,M4UVal,true);
    end;
    EndFormat;
  end;
  return;
end;

procedure DoSTCompOneItem(record RcVc RepSpec,record INVc INr,Boolean varf,string variety,var Boolean itemoutf,var val inp,var val inq2p,var val countp,var val diffp,var val totinprice)
begin
  Boolean plhit,testf,found;
  val instock,instock2,units,diff,uprice;
  Date dat1,laststdate;
  string 200 dblstr;  
  record PISVc PISr;
  array val counteda;
  array string 20 batcha;
  array string 255 posa;
  Integer i,arrcnt;
  record INVc IN2r;
  record SerBalVc SerBalr;
  string 255 serialnr;

  plhit = true;
  uprice = INr.InPrice;

  FindLastST(RepSpec,INr.Code,INr.SerNrf,RepSpec.RegDate,laststdate,units,instock,counteda,batcha,posa,arrcnt,uprice,variety);

  dat1 = laststdate;
  RecordCopy(IN2r,INr);
  IN2r.Code = INr.Code & variety;
  if (RepSpec.flags[3]==3) then begin
    if (blankdate(dat1)) then begin
      goto LDoSTCompOneItem;
    end;
  end;
  if (nonblankdate(RepSpec.RegDate)) then begin
    if (RepSpec.RegDate<>dat1) then begin dat1 = RepSpec.RegDate; end;
  end;  
  if (blankdate(dat1)) then begin dat1 = CurrentDate; end;
  if (blank(instock)) or (INr.SerNrf!=0) then begin
    if (nonblank(RepSpec.LastAcc)) then begin
      if (blank(RepSpec.AccStr)) then begin
        FindStockValueAtPosition(INr.Code & variety,";;;",RepSpec.LastAcc,PISr);
      end else begin
        FindStockValueAtPosition(INr.Code & variety,RepSpec.AccStr,RepSpec.LastAcc,PISr);
      end;
      instock = PISr.Instock;
      BackDatStock(INr.Code & variety,RepSpec.AccStr,RepSpec.LastAcc,instock,dat1,0);
    end else begin
      instock = GetStockQty(INr.Code & variety,RepSpec.AccStr,dat1,false);
    end;
  end;

  if (RepSpec.flags[0]!=0) then begin
    instock2 = GetStockQty(INr.Code & variety,RepSpec.AccStr,dat1,true);
  end;
//    if ((blankdate(laststdate)) or (units==0)) then begin//this must be wrong
  if (blankdate(laststdate)) then begin
    switch (RepSpec.flags[3]) begin    
      case 0:
        units = 0;
        diff = units - instock;
      case 2:
        diff = 0;
      otherwise
        diff = units - instock;
    end;
  end else begin
    diff = units - instock;
  end;
  if (RepSpec.ArtMode==0) then begin
    if (diff!=0) or (units!=0) or (instock!=0) then begin
      testf = true;
    end;
    if (RepSpec.flags[4]!=0) then begin
      if (diff==0) then begin testf = false; end;
    end;
    if (testf) then begin
      if (RepSpec.flags[5]==0) then begin
        PrintSTCompOneItem(RepSpec,INr,varf,variety,"",dat1,diff,units,instock,instock2,totinprice);
        inp = instock + inp;
        inq2p = instock2 + inq2p;
        countp = units + countp;
        diffp = diffp + diff;
      end else begin
        switch (IN2r.SerNrf) begin
          case 0:
            PrintSTCompOneItem(RepSpec,INr,varf,variety,"",dat1,diff,units,instock,instock2,totinprice);
            inp = instock + inp;
            inq2p = instock2 + inq2p;
            countp = units + countp;
            diffp = diffp + diff;
          case 1:
          
            switch (RepSpec.flags[3]) begin
              case 3:
                goto LCASE0;
              case 2:
                goto LCASE0;
              case 1:
                goto LCASE0;
              case 0:
LCASE0:;          
                for (i=0;i<arrcnt;i=i+1) begin
                  SerBalr.Item = IN2r.Code;
                  SerBalr.Location = RepSpec.AccStr;
                  SerBalr.Serial = batcha[i];
                  if (ReadFirstKey("Serial",SerBalr,3,true)) then begin
                    diff = counteda[i] - SerBalr.Quant;
                    PrintSTCompOneItem(RepSpec,INr,varf,variety,batcha[i],dat1,diff,counteda[i],SerBalr.Quant,instock2,totinprice);
                  end;
                end;
            end;                                 
          case 2:
            if (arrcnt>0) then begin
              for (i=0;i<arrcnt;i=i+1) begin
                instock = STCompFindSerialNrQty(INr.Code,variety,batcha[i],RepSpec.AccStr,posa[i],serialnr);
                diff = counteda[i] - instock;
                PrintSTCompOneItem(RepSpec,INr,varf,variety,batcha[i],dat1,diff,counteda[i],instock,instock2,totinprice);
              end;
            end;
            
            if (RepSpec.flags[5]!=0) then begin
              ResetLoop(SerBalr);
              SerBalr.Item = IN2r.Code;
              SerBalr.Location = RepSpec.AccStr;
              found = true;
              while (LoopMain(SerBalr,2,found)) begin
                if (SerBalr.Item!=IN2r.Code) then begin found = false; end;
                if (SerBalr.Location!=RepSpec.AccStr) then begin found = false; end; 
                if (found) then begin
                  testf = true;
                  for (i=0;i<arrcnt;i=i+1) begin
                    if (SerBalr.Serial==batcha[i]) then begin 
                      testf = false; 
                      i = arrcnt;
                    end;
                  end;
                  if (testf) then begin
                    instock = STCompFindSerialNrQty(INr.Code,variety,SerBalr.Serial,RepSpec.AccStr,RepSpec.LastAcc,serialnr);
                    PrintSTCompOneItem(RepSpec,INr,varf,variety,SerBalr.Serial,dat1,-instock,0,instock,instock2,totinprice);
                  end;
                end;
              end;                
            end else begin
              if (arrcnt==0) then begin
                instock = STCompFindSerialNrQty(INr.Code,variety,"",RepSpec.AccStr,RepSpec.LastAcc,serialnr);
                PrintSTCompOneItem(RepSpec,INr,varf,variety,"",dat1,diff,units,instock,instock2,totinprice);
              end;
            end;
        end;
      end;
    end;
  end;
LDoSTCompOneItem:;  
  return;
end;

procedure RemoveFromLastSTForItem(string item,string position,var record StockTakeVc resStockTaker,Boolean testposf)
begin
  Integer resi,resrwcnt;
  row StockTakeVc resStockTakerw;
  Boolean testf;

  resrwcnt = MatRowCnt(resStockTaker);
  for (resi = (resrwcnt - 1); resi>=0; resi = resi - 1) begin
    MatRowGet(resStockTaker,resi,resStockTakerw);
    testf = true;
    if (item!=resStockTakerw.ArtCode) then begin testf = false; end;
    if (testposf) then begin
      if (position!=resStockTakerw.Position) then begin testf = false; end;
    end;
    if (testf) then begin
      MatRowDelete(resStockTaker,resi);
    end;
  end;
LRemoveFromLastSTForItem:;  
  return;
end;
       
procedure STCompOneItem(record RcVc RepSpec,record INVc INr,var Boolean itemoutf,var val inp,var val inq2p,var val countp,var val diffp, var val totinprice)
begin
  Boolean plhit,varf,found,testf;
  val instock,instock2,units,diff,uprice;
  Date dat1,laststdate;
  string 60 sz,msk,mskrep;  
  string 200 varsubset,dblstr;  
  record PISVc PISr;
  record ItemStatusVc ISr;
  Integer keys;
  record StockTakeVc combStockTaker;
  row StockTakeVc combStockTakerw;
  Integer combi,combrwcnt;

  itemoutf = true;
  plhit = true;
  if (INr.ItemType==1) then begin
    varf = FindItemVAR(INr.Code,sz,msk,mskrep,varsubset);
    uprice = INr.InPrice;
    if (varf) then begin
      FindLastSTForItem(RepSpec,INr.Code,RepSpec.RegDate,combStockTaker);
      combrwcnt = MatRowCnt(combStockTaker);
      for (combi=0;combi<combrwcnt;combi=combi+1) begin
        MatRowGet(combStockTaker,combi,combStockTakerw);
      end;

      found = true;
      ISr.Code = INr.Code;
      keys = 1;
      if (nonblank(RepSpec.AccStr)) then begin
        ISr.Location = RepSpec.AccStr;
        keys = 2;
      end;
      while (LoopMain(ISr,keys,found)) begin    
        if (ISr.Code!=INr.Code) then begin found = false; end;
        if (nonblank(RepSpec.AccStr)) then begin
          if (ISr.Location!=RepSpec.AccStr) then begin
            found = false;
          end;
        end;
        if (found) then begin
          testf = true;
          if (nonblank(RepSpec.AccStr)) then begin
            if (ISr.Location==";;;") then begin
              testf = false;
            end;
          end else begin
            if (ISr.Location!=";;;") then begin
              testf = false;
            end;
          end;
          if (blank(ISr.Variety)) then begin testf = false; end;
          if (testf) then begin
            DoSTCompOneItem(RepSpec,INr,varf,ISr.Variety,itemoutf,inp,inq2p,countp,diffp,totinprice);
            RemoveFromLastSTForItem(ISr.Code & ISr.Variety,"",combStockTaker,false);
          end;
        end;
      end;
      combrwcnt = MatRowCnt(combStockTaker);
      for (combi=0;combi<combrwcnt;combi=combi+1) begin
        MatRowGet(combStockTaker,combi,combStockTakerw);
        DoSTCompOneItem(RepSpec,INr,varf,right(combStockTakerw.ArtCode,len(combStockTakerw.ArtCode)-len(INr.Code)),itemoutf,inp,inq2p,countp,diffp,totinprice);
      end;
    end else begin
      DoSTCompOneItem(RepSpec,INr,varf,"",itemoutf,inp,inq2p,countp,diffp,totinprice);
    end;
  end;
LSTCompOneItem:;  
  return;
end;


procedure STCompOneItem_PerPosition(record RcVc orgRepSpec,record INVc INr,var Boolean itemout,var val instock,var val instock2,var val counted,var val diff,var val totinprice)
begin
  record PISVc PISr;      
  Boolean found;
  record RcVc RepSpec;
  Integer combi,combrwcnt;
  record StockTakeVc combStockTaker;
  row StockTakeVc combStockTakerw;
  string 60 sz,msk,mskrep;  
  string 200 varsubset;  
  Boolean varf;
  Integer segs;
  vector Boolean vtreatedf;
  
  varf = FindItemVAR(INr.Code,sz,msk,mskrep,varsubset);

  FindLastSTForItem(orgRepSpec,INr.Code,orgRepSpec.RegDate,combStockTaker);

  found = true;
  PISr.Location = orgRepSpec.AccStr;
  PISr.ArtCode = INr.Code;
  segs = 2;
  if (nonblank(orgRepSpec.LastAcc)) then begin
    PISr.Position = orgRepSpec.LastAcc;
    segs = 3;
  end;
  while (LoopKey("Location",PISr,segs,found)) begin
    if (PISr.Location!=orgRepSpec.AccStr) then begin found = false; end;
    if (PISr.ArtCode!=INr.Code) then begin found = false; end;
    if (nonblank(orgRepSpec.LastAcc)) then begin
      if (PISr.Position!=orgRepSpec.LastAcc) then begin found = false; end;
    end;
    if (found) then begin
      RecordCopy(RepSpec,orgRepSpec);
      RepSpec.LastAcc = PISr.Position;     
      DoSTCompOneItem(RepSpec,INr,varf,PISr.Variety,itemout,instock,instock2,counted,diff,totinprice);
      RemoveFromLastSTForItem(PISr.ArtCode & PISr.Variety,PISr.Position,combStockTaker,true);
    end;
  end;

  combrwcnt = MatRowCnt(combStockTaker);
  for (combi=0;combi<combrwcnt;combi=combi+1) begin
    MatRowGet(combStockTaker,combi,combStockTakerw);
    if (vtreatedf[combStockTakerw.ArtCode & "??" & combStockTakerw.Position]==false) then begin
      RecordCopy(RepSpec,orgRepSpec);
      RepSpec.LastAcc = combStockTakerw.Position;     
      DoSTCompOneItem(RepSpec,INr,varf,right(combStockTakerw.ArtCode,len(combStockTakerw.ArtCode)-len(INr.Code)),itemout,instock,instock2,counted,diff,totinprice);
      vtreatedf[combStockTakerw.ArtCode & "??" & combStockTakerw.Position] = true;
    end;
//    RemoveFromLastSTForItem(combStockTakerw.ArtCode,combStockTakerw.Position,combStockTaker,true);
  end;
  return;
end;

procedure STLoopIN(record RcVc RepSpec,var val instock,var val instock2,var val counted,var val diff,var val totinprice)
BEGIN
  string 255 ckey;
  Integer keys;
  string 255 lastgroup;
  Boolean itemout,testf;
  record INVc INr;
  string 255 fromart,toart;
  string 255 frit,toit;
  Boolean TrHs;
  record LocationVc Locr;

  itemout = false;
  fromart = FirstInRange(RepSpec.f1,20);
  toart = LastInRange(RepSpec.f1,20);
  frit = FirstInRange(RepSpec.f3,20);
  toit = LastInRange(RepSpec.f3,20);
  INr.Code = fromart;
  switch (RepSpec.flags[2]) begin
    case 1:
      ckey = "Group";
    case 2:
      ckey = "InvCode";
    otherwise
      ckey = "Code";
  end;
  keys = 1;  
  Gray_Divider(0,1);
  TrHs = true;
  while (LoopKey(ckey,INr,keys,TrHs)) begin
    testf = true;
    if (TrHs) then begin
      if (nonblank(RepSpec.f3)) then begin
        switch (RepSpec.flags[2]) begin
          case 2:
            if (INr.Group>toit) then begin
              testf = false;
            end;
          case 1:
            if (INr.Group>toit) then begin
              TrHs = false;
            end;
          otherwise
            if (INr.Group>toit) then begin
              testf = false;
            end;
        end;
      end;
    end;        
    if (TrHs) then begin
      if (nonblank(RepSpec.f1)) then begin
        switch (RepSpec.flags[2]) begin
          case 1:
            if (INr.Code>toart) then begin
              testf = false;
            end;
          case 2:
            if (INr.Code>toart) then begin
              testf = false;
            end;
          otherwise
            if (INr.Code>toart) then begin
              TrHs = false;
            end;
        end;
      end;
    end;        
    if (TrHs) then begin
      if (nonblank(RepSpec.f3)) then begin
        if (INr.Group<frit) then begin
          testf = false;
        end;
      end;
    end;    
    if (nonblank(RepSpec.f4)) then begin
      if (SetInSet2(RepSpec.f4,INr.DispGroups)==false) then begin
        testf = false;
      end;
    end;
    if (nonblank(RepSpec.f5)) then begin
      if (testf==true) then begin
        testf = false;
        ItemClassTypef(RepSpec.f5,INr.DispGroups,testf);
      end;
    end;  
    if (TrHs==false) then begin testf = false; end;
    if (testf) then begin      
      if (nonblank(RepSpec.AccStr)) then begin
        Locr.Code = RepSpec.AccStr;
        ReadFirstMain(Locr,1,true);
        if (Locr.RequirePos!=0) then begin
          STCompOneItem_PerPosition(RepSpec,INr,itemout,instock,instock2,counted,diff,totinprice);
//          STCompOneItem(RepSpec,INr,itemout,instock,instock2,counted,diff);
        end else begin
          STCompOneItem(RepSpec,INr,itemout,instock,instock2,counted,diff,totinprice);
        end;
      end else begin
        STCompOneItem(RepSpec,INr,itemout,instock,instock2,counted,diff,totinprice);
      end;
    end;
  end;
  RETURN;
END;

global
procedure STCompRn(record RcVc RepSpec)
BEGIN
  val instock,counted,instock2,diff;
  Integer vatflag;
  string 255 tstr;
  Integer rw;
  string 20 frart,toart;
  val totinprice;

  if (blankdate(RepSpec.RegDate)) then begin RepSpec.RegDate = CurrentDate; end;
  frart = FirstInRange(RepSpec.f1,20);
  toart = LastInRange(RepSpec.f1,20);
  vatflag = 0;
  StartReportJob(USetStr(2770));
   rw = 1;
   if ((nonblank(RepSpec.f1)) or (blank(RepSpec.AccStr))) then begin
     HTArts(frart,toart,tstr);
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
   if (blank(RepSpec.vals0)==false) then begin
     Header(rw,USetStr(2902) & ": " & RepSpec.vals0,0);
   end;
   if (HasContactClassification) then begin
     HTItemClass(RepSpec.f4,tstr);
     Header(rw,tstr,1);
     rw = rw + 1;   
     HTCustClassType(RepSpec.f5,tstr);
     if (nonblank(tstr)) then begin
       Header(rw,tstr,1);
       rw = rw + 1;
     end;  
    end;     
   if (nonblank(RepSpec.AccStr)) then begin
     if (nonblank(RepSpec.LastAcc)) then begin
       tstr = USetStr(2779) & " " & RepSpec.LastAcc;
       Header(rw,tstr,0);
     end;
     HTLocations(RepSpec.AccStr,RepSpec.AccStr,tstr);
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
   if (nonblank(RepSpec.f2)) then begin
     tstr = USetStr(2768);
     tstr = tstr & RepSpec.f2;
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
   HTArtGroup(RepSpec.f3,tstr);
   if (nonblank(tstr)) then begin
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
   if (HasMultiCurrency) then begin
     if (RepSpec.flags[1]==0) then begin
       tstr = USetStr(2345);
     end;  
     if (RepSpec.flags[1]==1) then begin
       tstr = USetStr(2346);
     end;
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
   switch (RepSpec.flags[3]) begin
     case 0: tstr = USetStr(2776);
     case 2: tstr = USetStr(2777);
     case 3: tstr = USetStr(2778);
   end;
   Header(rw,tstr,0);
   if (nonblankdate(RepSpec.RegDate)) then begin
     tstr = RepSpec.RegDate;
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
  EndHeader;
  SetRepCol(2,75);
  SetRepCol(3,270);
  SetRepCol(4,380);
  SetRepCol(5,430);
  StartFormat(15);

  if ((RepSpec.ArtMode==0) or (RepSpec.ArtMode==2)) then begin
    OutString(0,0,USetStr(2325),false);
    OutString(2,0,USetStr(2326),false);
    switch (RepSpec.flags[1]) begin
      case 0:
        OutString(3,0,USetStr(2773),true);
//      OutString(280,0,USetStr(2779),false);
        if (RepSpec.flags[0]!=0) then  begin OutString(330,0,USetStr(7593),true); end;
        OutString(4,0,USetStr(2765),true);
        OutString(5,0,USetStr(2771),true);
        OutString(1,0,USetStr(2772),true);
      case 1:
        OutString(240,0,USetStr(2765),true);
        OutString(290,0,UsetStr(2774),true);
        OutString(330,0,UsetStr(2775),true);
        OutString(370,0,USetStr(2771),true);
        OutString(420,0,USetStr(2772),true);
        OutString(1,0,USetStr(2901),true);
      case 2:
        OutString(3,0,USetStr(2767),true);
        if (RepSpec.flags[0]!=0) then  begin OutString(330,0,USetStr(7593),true); end;
        OutString(4,0,USetStr(2765),true);
        OutString(5,0,USetStr(2771),true);
        OutString(1,0,USetStr(2772),true);
    end;
  end;
  if (RepSpec.ArtMode==1) then begin
    OutString(0,0,USetStr(2325),false);
    OutString(2,0,USetStr(2326),false);
    EndFormat;
    StartFormat(15);
    OutString(80,0,USetStr(2344),false);
    OutString(3,0,USetStr(2330),true);
    if (RepSpec.flags[0]!=0) then  begin OutString(330,0,USetStr(7593),true); end;
    if (RepSpec.flags[11]==1) then begin
      OutString(4,0,USetStr(2350),true);
    end else begin
      OutString(4,0,USetStr(2331),true);
    end;
    OutString(1,0,USetStr(2332),true);
  end;
  EndFormat;
  
  instock = blankval;
  counted = blankval;
  instock2 = blankval;

  STLoopIN(RepSpec,instock,instock2,counted,diff,totinprice);
  
  if (RepSpec.ArtMode==0) then begin
    Gray_Divider(0,1);
  end;  
  StartFormat(15);
  switch (RepSpec.flags[1]) begin
    case 0:
      if (RepSpec.flags[0]!=0) then  begin OutVal(330,0,instock2,M4UVal,true); end;
      OutVal(4,0,instock,M4UVal,true);
      OutVal(5,0,counted,M4UVal,true);
      OutVal(1,0,diff,M4UVal,true);
    case 1:
      OutVal(240,0,instock,M4UVal,true);
      //if (RepSpec.flags[0]!=0) then  begin OutVal(350,0,instock2,M4UVal,true); end;
      OutVal(370,0,counted,M4UVal,true);
      OutVal(420,0,diff,M4UVal,true);
      OutVal(1,0,totinprice,M4Val,true);
    case 2:
      if (RepSpec.flags[0]!=0) then  begin OutVal(330,0,instock2,M4UVal,true); end;
      OutVal(4,0,instock,M4UVal,true);
      OutVal(5,0,counted,M4UVal,true);
      OutVal(1,0,diff,M4UVal,true);
  end;
  EndFormat;
  EndJob; 
  RETURN;
END;

procedure CombineStockTake(string item,record StockTakeVc StockTaker,var record StockTakeVc resStockTaker)
begin
  Integer i,rwcnt;
  Integer resi,resrwcnt;
  row StockTakeVc StockTakerw;
  row StockTakeVc resStockTakerw;
  string 255 variety;
  
  rwcnt = MatRowCnt(StockTaker);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(StockTaker,i,StockTakerw);
    variety = right(StockTakerw.ArtCode,len(StockTakerw.ArtCode)-len(item));
//    if (item==Left(StockTakerw.ArtCode,len(StockTakerw.ArtCode)-len(variety))) then begin 
    if (TestArtCodeMatch(StockTakerw.ArtCode,item)) then begin
      resrwcnt = MatRowCnt(resStockTaker);
      if (resrwcnt==0) then begin
        CopyRow(StockTaker,StockTakerw,resStockTakerw);
        MatRowPut(resStockTaker,resrwcnt,resStockTakerw);
      end else begin
        for (resi=0;resi<resrwcnt;resi=resi+1) begin
          MatRowGet(resStockTaker,resi,resStockTakerw);
          if (StockTakerw.ArtCode==resStockTakerw.ArtCode) and (StockTakerw.SerialNr==resStockTakerw.SerialNr) and (StockTakerw.Position==resStockTakerw.Position) then begin
            resStockTakerw.Qty = resStockTakerw.Qty + StockTakerw.Qty;
            MatRowPut(resStockTaker,resi,resStockTakerw);
          end else begin
            CopyRow(StockTaker,StockTakerw,resStockTakerw);
            MatRowPut(resStockTaker,resrwcnt,resStockTakerw);
            resi = resrwcnt;
          end;
        end;
      end;
    end;
  end;

  RETURN;
END;

procedure STCompOneVarItem(record RcVc RepSpec,record INVc INr,string variety,var val inp,var val inq2p,var val countp)
BEGIN
  val instock,instock2,units,diff,uprice;
  Date dat1,laststdate;
  record PISVc PISr;
  array val counteda;
  array string 20 batcha;
  array string 255 posa;
  Integer i,arrcnt;  

  uprice = INr.InPrice;
  FindLastST(RepSpec,INr.Code,INr.SerNrf,RepSpec.RegDate,laststdate,units,instock,counteda,batcha,posa,arrcnt,uprice,variety);
  dat1 = laststdate;
  if (RepSpec.flags[3]==3) then begin
    if (blankdate(dat1)) then begin
      goto LSTCompOneVarItem;
    end;
  end;
  if (nonblankdate(RepSpec.RegDate)) then begin
    if (RepSpec.RegDate<>dat1) then begin dat1 = RepSpec.RegDate; end;
  end;  
  if (blankdate(dat1)) then begin dat1 = CurrentDate; end;
  if (blank(instock)) then begin
    if (nonblank(RepSpec.LastAcc)) then begin
      FindStockValueAtPosition(INr.Code & variety,RepSpec.AccStr,RepSpec.LastAcc,PISr);
      instock = PISr.Instock;
    end else begin
      instock = GetStockQty(INr.Code & variety,RepSpec.AccStr,dat1,false);
    end;
  end;
  if (RepSpec.flags[0]!=0) then begin
    instock2 = GetStockQty(INr.Code & variety ,RepSpec.AccStr,dat1,true);
  end;
  if (blankdate(laststdate)) then begin
    switch (RepSpec.flags[3]) begin    
      case 0:
        units = 0;
        diff = units - instock;
      case 2:
        diff = 0;
      otherwise
        diff = units - instock;
    end;
  end else begin
    diff = units - instock;
  end;
  if (units!=0) or (instock!=0) then begin
    StartFormat(15);
    OutString(0,0,INr.Code & variety,false);
    OutString(2,0,INr.Name,false);
    OutDate(3,0,dat1,true);
    if (nonblank(RepSpec.LastAcc)) then begin
      OutString(290,0,RepSpec.LastAcc,false);
    end;
    OutVal(4,0,instock,M4UVal,true);
    if (RepSpec.flags[0]!=0) then begin OutVal(350,0,instock2,M4UVal,true); end;
    OutVal(5,0,units,M4UVal,true);
    OutVal(1,0,diff,M4UVal,true);
    EndFormat;
  end;
  inp = instock + inp;
  inq2p = instock2 + inq2p;
  countp = units + countp;
LSTCompOneVarItem:;  
  RETURN;
END;

procedure STCompOneVarItem_PerPosition(record RcVc orgRepSpec,record INVc INr,var val inp,var val inq2p,var val countp)
BEGIN
  record PISVc PISr;      
  Boolean found,testf;
  Integer combi,combrwcnt;
  record StockTakeVc combStockTaker;
  row StockTakeVc combStockTakerw;
  record RcVc RepSpec;

  FindLastSTForItem(orgRepSpec,INr.Code,orgRepSpec.RegDate,combStockTaker);

  found = true;
  PISr.Location = orgRepSpec.AccStr;
  PISr.ArtCode = INr.Code;
  PISr.Position = orgRepSpec.LastAcc;
  while (LoopKey("Location",PISr,3,found)) begin
    if (PISr.Location!=orgRepSpec.AccStr) then begin found = false; end;
    if (PISr.ArtCode!=INr.Code) then begin found = false; end;
    if (nonblank(orgRepSpec.LastAcc)) then begin
      if (PISr.Position!=orgRepSpec.LastAcc) then begin found = false; end;
    end;
    if (found) then begin
      RecordCopy(RepSpec,orgRepSpec);
      RepSpec.LastAcc = PISr.Position;     
      STCompOneVarItem(RepSpec,INr,PISr.Variety,inp,inq2p,countp);
      RemoveFromLastSTForItem(PISr.ArtCode & PISr.Variety,PISr.Position,combStockTaker,true);
    end;
  end;
  combrwcnt = MatRowCnt(combStockTaker);
  for (combi=0;combi<combrwcnt;combi=combi+1) begin
    MatRowGet(combStockTaker,combi,combStockTakerw);
    testf = true;
    if (combStockTakerw.ArtCode!=INr.Code) then begin testf = false; end;
    if (testf) then begin
      RecordCopy(RepSpec,orgRepSpec);
      RepSpec.LastAcc = combStockTakerw.Position;     
      STCompOneVarItem(RepSpec,INr,right(combStockTakerw.ArtCode,len(combStockTakerw.ArtCode)-len(INr.Code)),inp,inq2p,countp);
    end;
  end;

 LSTCompOneVarItem_PerPosition:;  
  RETURN;
END;

global
procedure STDblVarCompRn(record RcVc RepSpec)
BEGIN
  record INVc INr;
  record ItemStatusVc ISr;
  Boolean testf,treatedf;
  Boolean TrHs;
  string 255 tstr;
  string 20 frart,toart;
  val instock,counted,instock2;
  Integer rw;
  record LocationVc Locr;

  if (blankdate(RepSpec.RegDate)) then begin RepSpec.RegDate = CurrentDate; end;
  Locr.Code = RepSpec.AccStr;
  if (ReadFirstMain(Locr,1,true)) then begin end;
  frart = FirstInRange(RepSpec.f1,20);
  toart = LastInRange(RepSpec.f1,20);
  StartReportJob(USetStr(2770));
  rw = 1;
  if (nonblank(RepSpec.f1)) then begin
    HTArts(frart,toart,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  EndHeader;
  SetRepCol(2,100);
  SetRepCol(3,285);
  SetRepCol(4,380);
  SetRepCol(5,430);
  StartFormat(15);
  OutString(0,0,USetStr(2325),false);
  OutString(2,0,USetStr(2326),false);
  OutString(3,0,USetStr(2773),true);
  OutString(290,0,USetStr(2779),false);
  OutString(4,0,USetStr(2765),true);
  if (RepSpec.flags[0]!=0) then  begin OutString(350,0,USetStr(7593),true); end;
  OutString(5,0,USetStr(2771),true);
  OutString(1,0,USetStr(2772),true);
  EndFormat;
  Gray_Divider(0,1);
  instock = blankval;
  counted = blankval;
  instock2 = blankval;

  if (nonblank(RepSpec.AccStr)) then begin
    if (Locr.RequirePos!=0) then begin
      INr.Code = RepSpec.f1;
      TrHs = true;
      while (LoopKey("Code",INr,1,TrHs)) begin
        if (INr.Code!=RepSpec.f1) then begin TrHs = false; end;          
        if (TrHs) then begin
          testf = true;
          if (testf) then begin
            STCompOneVarItem_PerPosition(RepSpec,INr,instock,instock2,counted);
          end;
        end;
      end;
      treatedf = true;
    end;
  end;

  if (treatedf==false) then begin
    ISr.Code = RepSpec.f1;
    if (nonblank(RepSpec.AccStr)) then begin
      ISr.Location = RepSpec.AccStr;
    end else begin
      ISr.Location = ";;;";
    end;
    TrHs = true;
    while (LoopMain(ISr,2,TrHs)) begin    
      if (ISr.Code!=RepSpec.f1) then begin
        TrHs = false;
      end;
      testf = true;
      if (nonblank(RepSpec.AccStr)) then begin
        if (ISr.Location!=RepSpec.AccStr) then begin
          testf = false;
        end;
        if (ISr.Location==";;;") then begin
          testf = false;
        end;
      end else begin
        if (ISr.Location!=";;;") then begin
          testf = false;
        end;
      end;
      if (TrHs==false) then begin testf = false; end;
      if (testf) then begin
        if (ReadFirstItem(ISr.Code & ISr.Variety,INr,true,true)) then begin
          STCompOneVarItem(RepSpec,INr,ISr.Variety,instock,instock2,counted);
        end;
      end;
    end;  
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  if (RepSpec.flags[1] == 0) then begin
    OutVal(4,0,instock,M4UVal,true);
    if (RepSpec.flags[0]!=0) then  begin OutVal(350,0,instock2,M4UVal,true); end;
    OutVal(5,0,counted,M4UVal,true);
  end else begin
    OutVal(260,0,instock,M4UVal,true);
    if (RepSpec.flags[0]!=0) then  begin OutVal(350,0,instock2,M4UVal,true); end;
    OutVal(430,0,counted,M4UVal,true);
  end;
  EndFormat;
  EndJob; 
  RETURN;
END;
