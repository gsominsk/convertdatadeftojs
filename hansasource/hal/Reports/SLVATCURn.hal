external function roundmode GetVATRoundModeRB();
external function roundmode DefaultRoundMode();
external procedure GetVATdouble(string,var val,var val,Integer);
external function val FindVAT(string,val,Integer,Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure HTCusts(string, string, var string);
external procedure HT2Per(Date, Date , var string);
external procedure HTInvTypes2(Integer,Integer,Integer,Integer,Integer,Integer,var string);

procedure InsertBlankLine()
begin
  StartFormat(15);
  EndFormat;
  return;
end;

procedure PrintVATArrayHeader()
begin
  OutString(200,0,USetStr(18289),false); 
  OutString(320,0,USetStr(11456),true);  
  OutString(400,0,USetStr(18113),true); 
  OutString(480,0,USetStr(9583),true); 
  return;
end;

procedure AddToVATArray(record SMVc VATr,string vatcode,val sum,val vatv)
BEGIN
  row SMVc VATrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(VATr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATr,i,VATrw);
    if (vatcode==VATrw.VATCode) then begin
      VATrw.DebVal = VATrw.DebVal + sum;
      VATrw.CredVal = VATrw.CredVal + vatv;
      MatRowPut(VATr,i,VATrw);
      goto LAddToVATArray;
    end;
  end;
LAddToVATArray:;  
  RETURN;
END;

procedure SetupVATArray(var record SMVc VATr)
BEGIN
  row SMVc SMrw;
  Integer rwcnt,i;
  record VATCodeBlock VATRec;
  row VATCodeBlock VATrw;
  
  RecordNew(VATr);
  BlockLoad(VATRec);  
  rwcnt = MatRowCnt(VATRec);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(VATRec,i,VATrw);
    SMrw.AccNumber = VATrw.PurchVATAcc;
    SMrw.VATCode = VATrw.VATCode;
    SMrw.DebVal = blankval;
    SMrw.CredVal = blankval;
    if (nonblank(VATrw.IncVatpr)) then begin
      SMrw.CurCredVal = VATrw.IncVatpr;
    end else begin
      SMrw.CurCredVal = VATrw.ExVatpr;
    end;
    MatRowPut(VATr,i,SMrw);
  end;
  RETURN;
END;

procedure CalcVAT(record SMVc VATr,Integer inclvat)
BEGIN
  Integer i,vatcnt;
  val t,lv;
  row SMVc VATrw;
  record RoundBlock RoundRec;
  
  BlockLoad(RoundRec);
  vatcnt = MatRowCnt(VATr);
  for (i=0;i<vatcnt;i=i+1) begin
    MatRowGet(VATr,i,VATrw); 
    if (VATrw.DebVal!=0) then begin           
      switch (RoundRec.VATCalcWay) begin
        case 0:
          lv = VATrw.DebVal;
          if (lv<0) then begin
            lv = -VATrw.DebVal;
          end;
          t = FindVAT(VATrw.VATCode,lv,inclvat,0);//jjtax
          t = Round(t,GetVATRoundModeRB);
          if (VATrw.DebVal<0) then begin
            t = -t;
          end;
          if (inclvat!=0) then begin
            VATrw.DebVal = VATrw.DebVal - t;
          end;
          VATrw.CredVal = t;
        case 1:
        //already calculated
      end;
      MatRowPut(VATr,i,VATrw);
    end;
  end;
  RETURN;
END;

procedure PrintInvTypeIfNeeded(var Boolean firstf,Integer inv,Integer cred,Integer posinv,Integer bartab)
begin
  string 255 tstr;
  
  if (firstf==false) then begin
    goto LPrintInvTypeIfNeeded;
  end;
  
  firstf = false;
  HTInvTypes2(inv,0,cred,0,posinv,bartab,tstr);
  if (posinv!=0 or bartab!=0) then begin
    InsertBlankLine;
  end;
  StartFormat(15);
  OutString(0,0,tstr,false);
  EndFormat;
  Black_Divider(0,180);
  
LPrintInvTypeIfNeeded:;
end;

procedure PrintVATArray(record SMVc VATr,Integer strid,string custcode)
BEGIN
  row SMVc VATrw;
  Integer rwcnt,i;
  val totvat,totvatbase,vatprc,tax1;
  Boolean testf,prntdf;

  StartFormat(15);
  OutString(0,0,USetStr(strid),false);
  OutString(100,0,custcode,false);  
  PrintVATArrayHeader; 
  EndFormat;
  Black_Divider(0,1);
  rwcnt = MatRowCnt(VATr);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(VATr,i,VATrw);
    testf = false;
    if ((VATrw.DebVal!=blankval) or (VATrw.CredVal!=blankval)) then begin
      testf = true;
    end;
    if (testf) then begin
      StartFormat(15);
       OutString(200,0,VATrw.VATCode,false);
       OutVal(320,0,VATrw.DebVal,M4Val,true);
       GetVATdouble(VATrw.VATCode,vatprc,tax1,0);
       OutVal(400,0,vatprc,M4Val,true);
       OutVal(480,0,VATrw.CredVal,M4Val,true);
      EndFormat;
      totvat = totvat + VATrw.CredVal;
      totvatbase = totvatbase + VATrw.DebVal;
      prntdf = true;
    end;
  end;
  if (prntdf) then begin
    Gray_Divider(200,1);
    StartFormat(15);
     OutVal(320,0,totvatbase,M4Val,true);
     OutVal(480,0,totvat,M4Val,true);
    EndFormat;
  end;
  Gray_Divider(0,1);
LPrintVATArray:;
  RETURN;
END;

procedure AddVATToVATArray(record SMVc VATInr,var record SMVc TotVATr)
BEGIN
  Integer i,vatcnt;
  row SMVc VATInrw;
  row SMVc TotVATrw;
  
  vatcnt = MatRowCnt(TotVATr);
  for (i=0;i<vatcnt;i=i+1) begin
    MatRowGet(VATInr,i,VATInrw);
    MatRowGet(TotVATr,i,TotVATrw);
    TotVATrw.VATCode = VATInrw.VATCode;
    TotVATrw.CredVal = TotVATrw.CredVal + VATInrw.CredVal;
    TotVATrw.DebVal = TotVATrw.DebVal + VATInrw.DebVal;
    MatRowPut(TotVATr,i,TotVATrw);
  end;
  RETURN;
END;

global
procedure SLVATCURn(record RcVc RepSpec)
BEGIN
  string 20 frcu,tocu;
  string 255 tstr;
  Integer rw,i,rwcnt;
  Boolean TrHs,testf,firstf;
  record SMVc DomesticVATr,EUVATr,ExportVATr,CUVATr,IVVATr;
  record IVVc IVr;
  row IVVc IVrw;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  val vatv,sum;
  string 20 lastcu;
  
  frcu = FirstInRange(RepSpec.f2,20);
  tocu = LastInRange(RepSpec.f2,20);
  StartReportJob(USetStr(13480));
   rw = 1;
   HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   HTCusts(frcu,tocu,tstr);
   Header(rw,tstr,0);
   HTInvTypes2(RepSpec.flags[0],0,RepSpec.flags[1],0,RepSpec.flags[6],RepSpec.flags[7],tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
  EndHeader;
  SetupVATArray(DomesticVATr);
  SetupVATArray(EUVATr);
  SetupVATArray(ExportVATr);
  
  firstf = true;
  if (RepSpec.flags[0]!=0 or RepSpec.flags[1]!=0) then begin
    TrHs = true;
  end else begin
    TrHs = false;
  end;
  IVr.CustCode = frcu;
  while LoopKey("CustCode",IVr,1,TrHs) begin
    if (nonblank(tocu)) then begin
      if (IVr.CustCode>tocu) then begin TrHs = false; end;
    end else begin
      if (nonblank(frcu)) then begin 
        if (IVr.CustCode!=frcu) then begin TrHs = false; end;
      end;
    end;
    if (TrHs) then begin
      testf = true;
      if (RepSpec.flags[0]==0) then begin
        if (IVr.InvType!=kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales) then begin testf = false; end;
      end;
      if (RepSpec.flags[1]==0) then begin
        if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin testf = false; end;
      end;
      switch (RepSpec.flags[2]) begin
        case 1: if (IVr.FiscalFlag==0) then begin testf = false; end;
        case 2: if (IVr.FiscalFlag!=0) then begin testf = false; end;
      end;
      if (RepSpec.flags[3]==0) then begin
        if (IVr.ExportFlag==0) then begin testf = false; end;
      end;
      if (RepSpec.flags[4]==0) then begin
        if ((IVr.ExportFlag==1) or (IVr.ExportFlag==3)) then begin testf = false; end;
      end;
      if (RepSpec.flags[5]==0) then begin
        if ((IVr.ExportFlag==2) or (IVr.ExportFlag==4)) then begin testf = false; end;
      end;
      if (DateInRange(IVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;
      if (IVr.OKFlag==0) then begin testf = false; end;
      if (IVr.Invalid!=0) then begin testf = false; end;
      if (testf) then begin
        SetupVATArray(IVVATr);
        if (IVr.CustCode!=lastcu) then begin
          if (nonblank(lastcu)) then begin
            PrintInvTypeIfNeeded(firstf,RepSpec.flags[0],RepSpec.flags[1],0,0);
            PrintVATArray(CUVATr,13481,lastcu);
            InsertBlankLine;
          end;
          SetupVATArray(CUVATr);
        end;
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          sum = MulRateToBase1(IVr.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
            sum = -sum;
          end;            
          vatv = FindVAT(IVrw.VATCode,sum,IVr.InclVAT,IVr.NoTAXonVAT);                    
          AddToVATArray(IVVATr,IVrw.VATCode,sum,vatv);
        end;
        CalcVAT(IVVATr,IVr.InclVAT);
        AddVATToVATArray(IVVATr,CUVATr);
        switch (IVr.ExportFlag) begin
          case 0: AddVATToVATArray(IVVATr,DomesticVATr);
          case 1: AddVATToVATArray(IVVATr,EUVATr);
          case 2: AddVATToVATArray(IVVATr,ExportVATr);
          case 3: AddVATToVATArray(IVVATr,EUVATr);
          case 4: AddVATToVATArray(IVVATr,ExportVATr);
        end;
        lastcu = IVr.CustCode;
      end;
    end;
  end;
  if (nonblank(lastcu)) then begin
    PrintInvTypeIfNeeded(firstf,RepSpec.flags[0],RepSpec.flags[1],0,0);
    PrintVATArray(CUVATr,13481,lastcu);
    InsertBlankLine;
  end;
  
  firstf = true;
  lastcu = "";
  SetupVATArray(CUVATr);
  if (RepSpec.flags[6]!=0) then begin
    TrHs = true;
  end else begin
    TrHs = false;
  end;
  IVCashr.CustCode = frcu;
  while LoopKey("CustCode",IVCashr,1,TrHs) begin
    if (nonblank(tocu)) then begin
      if (IVCashr.CustCode>tocu) then begin TrHs = false; end;
    end else begin
      if (nonblank(frcu)) then begin 
        if (IVCashr.CustCode!=frcu) then begin TrHs = false; end;
      end;
    end;
    if (TrHs) then begin
      testf = true;
      switch (RepSpec.flags[2]) begin
        case 1: if (IVCashr.FiscalFlag==0) then begin testf = false; end;
        case 2: if (IVCashr.FiscalFlag!=0) then begin testf = false; end;
      end;
      if (RepSpec.flags[3]==0) then begin
        testf = false;
      end;
      if (DateInRange(IVCashr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;
      if (IVCashr.OKFlag==0) then begin testf = false; end;
      if (IVCashr.Invalid!=0) then begin testf = false; end;
      if (testf) then begin
        SetupVATArray(IVVATr);
        if (IVCashr.CustCode!=lastcu) then begin
          if (nonblank(lastcu)) then begin
            PrintInvTypeIfNeeded(firstf,0,0,1,0);
            PrintVATArray(CUVATr,13481,lastcu);
            InsertBlankLine;
          end;
          SetupVATArray(CUVATr);
        end;
        rwcnt = MatRowCnt(IVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVCashr,i,IVCashrw);
          sum = MulRateToBase1(IVCashr.CurncyCode,IVCashrw.Sum,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
          vatv = FindVAT(IVCashrw.VATCode,sum,IVCashr.InclVAT,IVCashr.NoTAXonVAT);                    
          AddToVATArray(IVVATr,IVCashrw.VATCode,sum,vatv);
        end;
        CalcVAT(IVVATr,IVCashr.InclVAT);
        AddVATToVATArray(IVVATr,CUVATr);
        AddVATToVATArray(IVVATr,DomesticVATr);
        lastcu = IVCashr.CustCode;
      end;
    end;
  end;
  if (nonblank(lastcu)) then begin
    PrintInvTypeIfNeeded(firstf,0,0,1,0);
    PrintVATArray(CUVATr,13481,lastcu);
    InsertBlankLine;
  end;
  
  firstf = true;
  lastcu = "";
  SetupVATArray(CUVATr);
  if (RepSpec.flags[7]!=0) then begin
    TrHs = true;
  end else begin
    TrHs = false;
  end;
  RestAccr.CUCode = frcu;
  while LoopKey("CUCode",RestAccr,1,TrHs) begin
    if (nonblank(tocu)) then begin
      if (RestAccr.CUCode>tocu) then begin TrHs = false; end;
    end else begin
      if (nonblank(frcu)) then begin 
        if (RestAccr.CUCode!=frcu) then begin TrHs = false; end;
      end;
    end;
    if (TrHs) then begin
      testf = true;
      switch (RepSpec.flags[2]) begin
        case 1: if (RestAccr.FiscalFlag==0) then begin testf = false; end;
        case 2: if (RestAccr.FiscalFlag!=0) then begin testf = false; end;
      end;
      if (RepSpec.flags[3]==0) then begin
        testf = false;
      end;
      if (DateInRange(RestAccr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;
      if (RestAccr.Closed==0) then begin testf = false; end;  // Not OK-ed
      if (RestAccr.Invalid!=0) then begin testf = false; end; // Invalidated     
      if (testf) then begin
        SetupVATArray(IVVATr);
        if (RestAccr.CUCode!=lastcu) then begin
          if (nonblank(lastcu)) then begin
            PrintInvTypeIfNeeded(firstf,0,0,0,1);
            PrintVATArray(CUVATr,13481,lastcu);
            InsertBlankLine;
          end;
          SetupVATArray(CUVATr);
        end;
        rwcnt = MatRowCnt(RestAccr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(RestAccr,i,RestAccrw);
          sum = MulRateToBase1(RestAccrw.CurncyCode,RestAccrw.Sum,RestAccrw.FrRate,RestAccrw.ToRateB1,RestAccrw.ToRateB2,RestAccrw.BaseRate1,RestAccrw.BaseRate2,DefaultCurRoundOff);
          vatv = FindVAT(RestAccrw.VATCode,sum,RestAccr.InclVAT,0);                    
          AddToVATArray(IVVATr,RestAccrw.VATCode,sum,vatv);
        end;
        CalcVAT(IVVATr,RestAccr.InclVAT);
        AddVATToVATArray(IVVATr,CUVATr);
        AddVATToVATArray(IVVATr,DomesticVATr);
        lastcu = RestAccr.CUCode;
      end;
    end;
  end;
  if (nonblank(lastcu)) then begin
    PrintInvTypeIfNeeded(firstf,0,0,0,1);
    PrintVATArray(CUVATr,13481,lastcu);
    InsertBlankLine;
  end;
  
  InsertBlankLine;
  StartFormat(15);
  OutString(0,0,USetStr(13485),false);
  EndFormat;
  Black_Divider(0,180);
  if (RepSpec.flags[3]!=0) then begin
    PrintVATArray(DomesticVATr,13482,"");
    InsertBlankLine;
  end;
  if (RepSpec.flags[4]!=0) then begin
    PrintVATArray(EUVATr,13483,"");
    InsertBlankLine;
  end;
  if (RepSpec.flags[5]!=0) then begin
    PrintVATArray(ExportVATr,13484,"");
  end;
  EndJob;
  RETURN;
END;