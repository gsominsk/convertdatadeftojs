external function Boolean GetInventoryNrWrofSoldQuant(string,Date,Date,var val,var val,var val,var Date);
external procedure FindFiscalYear(Date,var Date,var Date);
external procedure GetCategoryNLAccounts(Integer,string,var string,var string,var string,var string,var string,var string,var string,var string,var string,var string,
                                         var string,var string,var string,var string);
external procedure OneAT2UnitDeprCalculation(Integer,Integer,Integer,Boolean,Date,Date,string,var val,var val,var val,var val,var string,val,val,Boolean);
external procedure GetDepreciationPrc(string,var val);
external procedure GetDepreciationPrcWithRows(Date,Date,string,var val);


global
procedure FindAT2WriteofData(string InventoryNr,var Date res,var string comment)
BEGIN
  record InvrsVc Inrsr;
  record AT2WrofVc Wrofr;
  Date blankd;
  
  res = blankd;
  comment = "";
  Inrsr.FileName = "AT2WrofVc";
  Inrsr.InventoryNr = InventoryNr;
  if (ReadFirstKey("FileName",Inrsr,2,true)) then begin
    Wrofr.SerNr = Inrsr.TransNr;
    if (ReadFirstMain(Wrofr,1,true)) then begin    
      res = Wrofr.TransDate;
      comment = Wrofr.Comment;
    end;  
  end;
  RETURN;
END;

global
procedure FindAssetDepartment(record AT2UnitVc ATUnitr,var string res) 
BEGIN
  Boolean TrHs;
  record InvrsVc Invrsr;
  record AT2TakeVc ATTaker;
  
  res = ATUnitr.DepCode;
  TrHs = true;
  Invrsr.InventoryNr = ATUnitr.InventoryNr;
  Invrsr.FileName = "AT2TakeVc";
  while (LoopBackKey("FileName",Invrsr,2,TrHs)) begin
    if (Invrsr.InventoryNr!=ATUnitr.InventoryNr) then begin TrHs = false; end;
    if (Invrsr.FileName!="AT2TakeVc") then begin TrHs = false; end;
    if (TrHs) then begin
      ATTaker.SerNr = Invrsr.TransNr;
      if (ReadFirstMain(ATTaker,1,true)) then begin
        if (ATTaker.PhysCheckf==0) then begin
          res = ATTaker.DepCode;
          TrHs = false;
        end;
      end;
    end;
  end;    
  RETURN;
END;

global
procedure FindAssetRespPerson(record AT2UnitVc ATUnitr,var string res) 
BEGIN
  Boolean TrHs;
  record InvrsVc Invrsr;
  record AT2TakeVc ATTaker;
  
  res = ATUnitr.RespPerson;
  TrHs = true;
  Invrsr.InventoryNr = ATUnitr.InventoryNr;
  Invrsr.FileName = "AT2TakeVc";
  while (LoopBackKey("FileName",Invrsr,2,TrHs)) begin
    if (Invrsr.InventoryNr!=ATUnitr.InventoryNr) then begin TrHs = false; end;
    if (Invrsr.FileName!="AT2TakeVc") then begin TrHs = false; end;
    if (TrHs) then begin
      ATTaker.SerNr = Invrsr.TransNr;
      if (ReadFirstMain(ATTaker,1,true)) then begin
        if (ATTaker.PhysCheckf==1) then begin
          res = ATTaker.RespPerson;
          TrHs = false;
        end;
      end;
    end;
  end;    
  RETURN;
END;

procedure PrintInventoryNrData(record RcVc RepSpec,record AT2UnitVc ATUnitr,val assetq,Date FEndDate)
BEGIN
  record AT2Vc AT2Catr;
  record DprModVc DprModr;
  string 255 t1,t2,t3,tstr,asset1objstr,depr1objstr,cost1objstr,asset2objstr,depr2objstr,cost2objstr,AT2Class,revdepr1acc,revdepr1objects,capcorr1acc,capcorr1objects;
  val tv1,tv2,tv3,t;
  LongInt l;
  Date td,startingdate;
  
  AT2Catr.Code = ATUnitr.AT2Code;
  if (ReadFirstMain(AT2Catr,1,true)) then begin end;
  if (RepSpec.flags[1]==0) then begin
    DprModr.Code = ATUnitr.Model1;
    if (ReadFirstMain(DprModr,1,true)) then begin end;
  end else begin
    DprModr.Code = ATUnitr.Model2;
    if (ReadFirstMain(DprModr,1,true)) then begin end;
  end;
  
  StartFormat(15);
   OutString(0,0,USetStr(10597) & ": ",false);
   OutString(40,"DblAT2UnitVc",ATUnitr.InventoryNr,false);
   OutString(100,0,USetStr(10598) & ": ",false);
   OutString(160,0,ATUnitr.Description,false);   
   OutString(300,0,USetStr(10599) & ": ",false);
   OutString(360,0,ATUnitr.AT2Code,false);   
   OutString(410,0,USetStr(10600) & ": ",false);
   OutVal(480,0,assetq,M4Qty,true);
  EndFormat;
  StartFormat(15);
   OutString(12,0,USetStr(10601) & ": ",false);
   if (blank(ATUnitr.VEInvoiceNr)) then begin
     OutLongInt(70,0,ATUnitr.VISerNr,false);
   end else begin
     OutString(70,0,ATUnitr.VEInvoiceNr,false);
   end;
   OutString(140,0,ATUnitr.VECode,false);
   OutString(200,0,ATUnitr.VEName,false);
   OutString(400,0,ATUnitr.Objects,false);
  EndFormat;
  StartFormat(15);
   OutString(12,0,USetStr(10561) & ": ",false);
   OutDate(85,0,ATUnitr.PurchaseDate,false);
   OutString(155,0,USetStr(10563) & ": ",false);
   OutDate(220,0,ATUnitr.ProdDate,false);
   if (ATUnitr.NewUsedf==0) then begin
     tstr = USetStr(9638);
   end;
   if (ATUnitr.NewUsedf==1) then begin
     tstr = USetStr(9639);
   end;
   OutString(290,0,USetStr(10570) & ": ",false);
   OutString(330,0,tstr,false);
   OutString(370,0,USetStr(10602),false);
   OutDate(430,0,ATUnitr.UsedFromDate,false);   
  EndFormat;
  StartFormat(15);
   OutString(12,0,USetStr(10571) & ": ",false);
   FindAssetDepartment(ATUnitr,tstr); 
   OutString(70,0,tstr,false);
   OutString(135,0,USetStr(10572) & ": ",false);
   FindAssetRespPerson(ATUnitr,tstr); 
   OutString(200,0,tstr,false);
   OutString(260,0,USetStr(10573) & ": ",false);
   OutString(330,0,ATUnitr.MotherInvNr,false);
   if (ATUnitr.Activef!=0) then begin
     OutString(400,0,USetStr(10606),false);
   end;
  EndFormat;
  StartFormat(15);
   OutString(12,0,USetStr(10564) & ": ",false);
   OutString(70,0,ATUnitr.SerialNr,false);
   OutString(135,0,USetStr(10565) & ": ",false);
   OutString(200,0,ATUnitr.WarrantyNr,false);
   OutString(260,0,USetStr(10566) & ": ",false);
   OutString(330,0,ATUnitr.ContractNr,false);
  EndFormat;
  StartFormat(15);
   OutString(12,0,USetStr(10574) & ": ",false);
   if (RepSpec.flags[1]==0) then begin
     OutString(70,0,ATUnitr.Model1,false);
   end else begin
     OutString(70,0,ATUnitr.Model2,false);
   end;
   OutString(135,0,USetStr(10579) & ": ",false);
   if (RepSpec.flags[1]==0) then begin
     OutVal(200,0,ATUnitr.InitDeprVal1,M4Val,false);
   end else begin
     OutVal(200,0,ATUnitr.InitDeprVal2,M4Val,false);
   end;
   OutString(260,0,USetStr(10562) & ": ",false);
   if (RepSpec.flags[1]==0) then begin
     OutDate(330,0,ATUnitr.StartingDate1,false);
   end else begin
     OutDate(330,0,ATUnitr.StartingDate2,false);
   end;
   OutString(400,0,USetStr(10603),false);
   OutString(460,0,ATUnitr.ModelMin,false);   
  EndFormat;
  StartFormat(15);
   AT2Class = ATUnitr.AT2Class;
   if (blank(AT2Class)) then begin
     AT2Class = AT2Catr.AT2Class;
   end;
   GetCategoryNLAccounts(RepSpec.flags[1],AT2Class,t1,t2,t3,tstr,asset1objstr,depr1objstr,cost1objstr,asset2objstr,depr2objstr,cost2objstr,revdepr1acc,revdepr1objects,capcorr1acc,capcorr1objects);
   OutString(12,0,USetStr(10576) & ": ",false);
   OutString(70,0,t1,false);
   OutString(135,0,USetStr(10577) & ": ",false);
   OutString(200,0,t2,false);
   OutString(260,0,USetStr(10578) & ": ",false);
   OutString(330,0,t3,false);
   OutString(400,0,USetStr(10604),false);
   OutString(465,0,ATUnitr.ModelMax,false);   
  EndFormat;
  StartFormat(15);
   OutString(12,0,USetStr(10607) & ": ",false);
   OutVal(70,0,ATUnitr.PurchVal,M4Val,false);   
   OutString(135,0,USetStr(10568) & ": ",false);
   OutVal(200,0,ATUnitr.VATVal,M4Val,false);   
   OutString(260,0,USetStr(10569) & ": ",false);
   OutVal(330,0,ATUnitr.VATReclaimed,M4Val,false);   
   OutString(400,0,USetStr(10605),false);
   OutString(460,0,ATUnitr.MinDprVal,false);   
  EndFormat;
  StartFormat(15);
   OutString(12,0,USetStr(10580) & ": ",false);
   OutVal(70,0,ATUnitr.SubsidyVal,M4Val,false);   
   OutString(135,0,USetStr(10581) & ": ",false);
   OutVal(200,0,ATUnitr.InvestVal,M4Val,false);   
   OutString(280,0,USetStr(10582) & ": ",false);
   OutVal(340,0,ATUnitr.ResVal,M4Val,false);   
   OutString(400,0,USetStr(10583) & ": ",false);
   OutVal(460,0,ATUnitr.LandVal,M4Val,false);   
  EndFormat;
  StartFormat(15);
   OutString(12,0,USetStr(10584) & ": ",false);
   OutVal(70,0,ATUnitr.FiscalVal,M4Val,false);   
   OutString(135,0,USetStr(10585) & ": ",false);
   OutVal(200,0,ATUnitr.InsuranceVal,M4Val,false);   
   OutString(260,0,USetStr(10586) & ": ",false);
   OutDate(330,0,ATUnitr.EndDate,false);   
  EndFormat;
  StartFormat(15);
   OutString(12,0,DprModr.Description,false);
   if (DprModr.DeprPeriod==0) then begin
     tstr = USetStr(9641);
   end;
   if (DprModr.DeprPeriod==2) then begin
     tstr = USetStr(9642);
   end;
   if (DprModr.DeprPeriod==3) then begin
     tstr = USetStr(9650);
   end;
   OutString(130,0,tstr,false);
   if (DprModr.DeprMethod==0) then begin
     tstr = USetStr(9643);
   end;
   if (DprModr.DeprMethod==1) then begin
     tstr = USetStr(9644);
   end;
   if (DprModr.DeprMethod==2) then begin
     tstr = USetStr(9645);
   end;
   if (DprModr.DeprMethod==3) then begin
     tstr = USetStr(9646);
   end;
   if (DprModr.DeprMethod==4) then begin
     tstr = USetStr(9647);
   end;
   OutString(200,0,tstr,false);
   OutString(370,0,USetStr(10593),false);
   if (DprModr.LifecycleYears>0) then begin
     tv1 = DprModr.LifecycleYears;
     OutVal(430,0,100/tv1,M4Val,false);   
   end else begin
     OutVal(430,0,DprModr.DeprPerc,M4Val,false);   
   end;
  EndFormat;
  StartFormat(15);
   OutString(12,0,USetStr(10589) & ": ",false);
   l = GetYear(ATUnitr.EndDate) - GetYear(ATUnitr.PurchaseDate) + 1;
   if (DprModr.LifecycleYears>0) then begin
     OutLongInt(85,0,DprModr.LifecycleYears,false);  
   end else begin
     OutLongInt(85,0,100/DprModr.DeprPerc,false);  
   end;
   tv3 = blankval;
   if (RepSpec.flags[1]==0) then begin
     startingdate = ATUnitr.StartingDate1;
   end else begin
     startingdate = ATUnitr.StartingDate2;
   end;
   if (blankdate(startingdate)) then begin
     startingdate = ATUnitr.UsedFromDate;
   end;
   if (blankdate(startingdate)) then begin
     startingdate = ATUnitr.PurchaseDate;
   end;
   OneAT2UnitDeprCalculation(RepSpec.Comparison,RepSpec.flags[3],RepSpec.flags[1],false,startingdate,RepSpec.d1,ATUnitr.InventoryNr,tv1,tv2,t,t,tstr,tv3,ATUnitr.ResVal,false);
   tv1 = tv1;
   OutString(135,0,USetStr(10587) & ": ",false);
   OutVal(210,0,tv2+tv1,M4Val,false);
   OutString(260,0,USetStr(10588) & ": ",false);
   OutVal(330,0,tv1,M4Val,false);
   FindAT2WriteofData(ATUnitr.InventoryNr,td,tstr);
   OutString(370,0,USetStr(10590) & ": ",false);
   if (td<RepSpec.d1) then begin
     OutDate(430,0,td,false);  
   end;
  EndFormat;
  Gray_Divider(0,1);
  StartFormat(5);
  EndFormat;  
  RETURN;
END;

global
function Boolean AT2ExcludeCategory(string at2code)
BEGIN
  Boolean res;
  record AT2Vc ATr;
  
  ATr.Code = at2code;
  if (ReadFirstMain(ATr,1,true)) then begin
    if (ATr.Exclude!=0) then begin res = true; end;
  end;
  AT2ExcludeCategory = res;
  RETURN;
END;

global
function Boolean GetLastDprStartValInFiscalYear(Date FStartDate,Date FEndDate,Integer Model2,string InventoryNr,val startval,var val portstartval,var val resval)
BEGIN
  record AT2DprVc Dpr;
  Boolean res;
  string 30 keystr;
  Boolean testf;
  
  res = false;
  portstartval = blankval;
  switch (Model2) begin
    case 0: 
      keystr = "StartingDate1";
      Dpr.StartingDate1 = FEndDate;
    case 1: 
      keystr = "StartingDate2";
      Dpr.StartingDate2 = FEndDate;
  end;
  Dpr.InventoryNr = InventoryNr;
  if (ReadLastKey(keystr,Dpr,2,false)) then begin
    testf = true;
    if (Dpr.InventoryNr!=InventoryNr) then begin testf = false; end;
    switch (Model2) begin
      case 0: 
        if (Dpr.StartingDate1>FEndDate) then begin testf = false; end;
      case 1: 
        if (Dpr.StartingDate2>FEndDate) then begin testf = false; end;
    end;
    if (testf) then begin
      res = true;
      switch (Model2) begin
        case 0: portstartval = Dpr.StartVal;
        case 1: portstartval = Dpr.StartVal2;
      end;
      resval = Dpr.ResVal;
    end;
  end;
  if (portstartval==blankval) then begin
    portstartval = startval;
  end;  
  GetLastDprStartValInFiscalYear = res; 
  RETURN;        
END;

global
procedure AT2HistPortRn(record RcVc RepSpec)
begin
  record AT2DprVc LastDprr;
  record AT2UnitVc ATUnitr;
  Boolean TrHs,found,testf,printf,stoploopf;
  Date FStartDate,FEndDate;
  string 30 frinv,toinv,tstr;  
  record YearBlock YearRec;
  row YearBlock YearRecrw;    
  Integer y,yrwcnt;
  val assetq,wq,sq;
  val revval;
  val dprbef,dprv,t,dprprc1,dprprc2,svp;
  Date td,curdate,td2,startdate,wrofd;
  val acumdpr,purchval,wrofdprsum;
    
  curdate = CurrentDate;
  if (blankdate(RepSpec.d1)) then begin
    RepSpec.d1 = CurrentDate;
  end;
  frinv = FirstInRange(RepSpec.f2,30);
  toinv = LastInRange(RepSpec.f2,30);
  BlockLoad(YearRec);
  yrwcnt = MatRowCnt(YearRec);
  StartReportJob(USetStr(10560));
  EndHeader;
  found = true;
  ATUnitr.InventoryNr = frinv;
  while (LoopMain(ATUnitr,1,found)) begin
    if (nonblank(RepSpec.f2)) then begin
      if (ATUnitr.InventoryNr>toinv) then begin found = false; end;
    end;
    testf = !AT2ExcludeCategory(ATUnitr.AT2Code);
    if (found and testf) then begin
      purchval = ATUnitr.PurchVal;
      if (RepSpec.flags[1]==0) then begin
        GetDepreciationPrc(ATUnitr.Model1,dprprc1);
      end else begin
        GetDepreciationPrc(ATUnitr.Model2,dprprc1);
      end;
      FindFiscalYear(curdate,FStartDate,FEndDate);  
      assetq = ATUnitr.Quantity; 
      if (GetInventoryNrWrofSoldQuant(ATUnitr.InventoryNr,ATUnitr.PurchaseDate,FEndDate,wq,sq,wrofdprsum,wrofd)) then begin
        assetq = assetq - (wq + sq);
      end;
      PrintInventoryNrData(RepSpec,ATUnitr,assetq,FEndDate);
      StartFormat(15);
       OutString(0,0,USetStr(10591),false);
       OutString(50,0,USetStr(10592),false);
       OutString(145,0,USetStr(10593),true);
       OutString(185,0,USetStr(10600),true);
       OutString(240,0,USetStr(10594),true);
       OutString(300,0,USetStr(10567),true);
       OutString(360,0,USetStr(10596),true);
       OutString(420,0,USetStr(10587),true);
       OutString(480,0,USetStr(10595),true);
      EndFormat;
      assetq = ATUnitr.Quantity; 
      acumdpr = ATUnitr.InitDeprVal1;
      Gray_Divider(0,1);
      if (RepSpec.flags[1]==0) then begin
        startdate = ATUnitr.StartingDate1;
      end else begin
        startdate = ATUnitr.StartingDate2;
      end;
      if (blankdate(startdate)) then begin
        startdate = ATUnitr.UsedFromDate;
      end;
      if (blankdate(startdate)) then begin
        startdate = ATUnitr.PurchaseDate;
      end;
      td = startdate;
//      FindFiscalYear(ATUnitr.PurchaseDate,td,td2); 
      if (blankdate(td)) then begin
        td = CurrentDate;
      end;
      while ((td<=RepSpec.d1) and (stoploopf==false)) begin
        FStartDate = td;
        FEndDate.year = FStartDate.year;
        FEndDate.month = 12;
        FEndDate.day = 31;
        dprbef = 0;
        dprv = 0;
        t = blankval;
/*
moved down
        if (GetInventoryNrWrofSoldQuant(ATUnitr.InventoryNr,FStartDate,FEndDate,wq,sq,wrofdprsum,wrofd)) then begin
          assetq = assetq - (wq + sq);
        end;
*/
//StopAlert("assetq " & assetq);        
        if (GetLastDprStartValInFiscalYear(FStartDate,FEndDate,RepSpec.flags[1],ATUnitr.InventoryNr,purchval,svp,t)) then begin end;
        purchval = svp;
        if (ATUnitr.Activef==0) then begin
          dprbef = blankval;
          dprv = blankval;
          OneAT2UnitDeprCalculation(RepSpec.Comparison,RepSpec.flags[3],RepSpec.flags[1],false,FStartDate,FEndDate,ATUnitr.InventoryNr,dprbef,dprv,t,t,tstr,svp,ATUnitr.ResVal,false);
//StopAlert("FStartDate " & FStartDate & " FEndDate " & FEndDate & " dprbef " & dprbef & " dprv " & dprv & " svp " & svp);          
        end;
        acumdpr = acumdpr + dprv;
        if (assetq>0) and (dprv!=0) then begin
          StartFormat(15);
           OutLongInt(0,0,GetYear(td),false);
           OutString(50,0,ATUnitr.InventoryNr,false);
           TrHs = true; 
           dprprc2 = -1;       
           LastDprr.InventoryNr = ATUnitr.InventoryNr;
           LastDprr.TransDate = FEndDate;
           if (ReadLastKey("DateInventoryNr",LastDprr,2,false)) then begin
            if (LastDprr.InventoryNr==ATUnitr.InventoryNr) then begin
              if (LastDprr.TransDate>=FStartDate) then begin
                if (LastDprr.TransDate<=FEndDate) then begin
                   revval = LastDprr.StartVal;
                   printf = true;
                   GetDepreciationPrcWithRows(LastDprr.TransDate,FEndDate,LastDprr.Model1,dprprc2);
                 end;
               end;
             end;
           end;
           if (dprprc2!=-1) then begin
             OutVal(145,0,dprprc2,M4Val,true);
           end else begin
             if (RepSpec.flags[1]!=0) then begin
               GetDepreciationPrcWithRows(ATUnitr.PurchaseDate,FEndDate,ATUnitr.Model2,dprprc1);
             end else begin
               GetDepreciationPrcWithRows(ATUnitr.PurchaseDate,FEndDate,ATUnitr.Model1,dprprc1);
             end;
             OutVal(145,0,dprprc1,M4Val,true);
           end;
           OutVal(185,0,assetq,M4Val,true);
           OutVal(240,0,revval,M4Val,true);
           OutVal(300,0,assetq*ATUnitr.PurchVal,M4Val,true);
           OutVal(360,0,dprv,M4Val,true);
           OutVal(420,0,acumdpr-wrofdprsum,M4Val,true);
           t = ATUnitr.Quantity*purchval-acumdpr;
           if (t<0) then begin t = 0; end;
           OutVal(480,0,t,M4Val,true);
           if (t==0) then begin stoploopf = true; end;  
          EndFormat;
        end;
        if (GetInventoryNrWrofSoldQuant(ATUnitr.InventoryNr,FStartDate,FEndDate,wq,sq,wrofdprsum,wrofd)) then begin
          assetq = assetq - (wq + sq);
        end;
        td = AddDay(FEndDate,1);
      end;
      Black_Divider(0,1);
    end;  
  end;
  EndJob;
  RETURN;
END;
