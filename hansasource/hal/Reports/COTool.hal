external procedure SubCashRows_IVVc(record IVVc,Boolean,var val,var val);
external procedure SubPrePayments(record IVVc,var val,var val);
external procedure ARRnGetInvBalance(record IVVc,var Date,Integer,var val,var val,var LongInt);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function val MulWithRateToBase2(var string,Date,val,roundmode);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external procedure PSFindPaydAmount2(record IVVc,record IPrsVc,Boolean,var val,var val,var Date);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetCountryName(string,string,var string);
external function string 255 AddStr(string,string,string);

global
procedure PasteCOInvoiceTo(var record IVVc IVp,string newcu)
BEGIN
  record CUVc CUr;
  Boolean addr4f;
  string 255 countryname;

  CUr.Code = newcu;
  if (ReadFirstMain(CUr,1,true)) then begin
    IVp.CustCode = CUr.Code;
    IVp.Addr0 = CUr.Name;
    IVp.Addr1 = CUr.InvAddr0;
    IVp.ExportFlag = CUr.ExportFlag;
    GetCountryName(CUr.CountryCode,IVp.LangCode,countryname);
    addr4f = true;
    if (blank(IVp.Addr1)) then begin
      IVp.Addr1 = CUr.Sorting & "  " & CUr.InvAddr4; 
      addr4f = false;
   end;
    IVp.Addr2 = CUr.InvAddr1;
    if ((blank(IVp.Addr2)) and (addr4f)) then begin
      IVp.Addr2 = CUr.Sorting & "  " & CUr.InvAddr4;
      if ((IVp.ExportFlag==1) or (IVp.ExportFlag==2)) then begin
        IVp.Addr2 = IVp.Addr2 & "  " & countryname;
      end;      
      addr4f = false;
    end;
    IVp.Addr3 = CUr.InvAddr2;
    if ((blank(IVp.Addr3)) and (addr4f)) then begin
      IVp.Addr3 = CUr.Sorting & "  " & CUr.InvAddr4;
      if ((IVp.ExportFlag==1) or (IVp.ExportFlag==2)) then begin
        IVp.Addr3 = IVp.Addr3 & "  " & countryname;
      end;      
      addr4f = false;
    end;
    IVp.InvAddr3 = CUr.InvAddr3;
    if ((blank(IVp.InvAddr3)) and (addr4f)) then begin
      IVp.InvAddr3 = CUr.Sorting & "  " & CUr.InvAddr4;
      if ((IVp.ExportFlag==1) or (IVp.ExportFlag==2)) then begin
        IVp.InvAddr3 = IVp.InvAddr3 & "  " & countryname;
      end;      
      addr4f = false;
    end;
    if (addr4f) then begin
      IVp.InvAddr4 = CUr.Sorting & "  " & CUr.InvAddr4;
      if ((IVp.ExportFlag==1) or (IVp.ExportFlag==2)) then begin
        IVp.InvAddr4 = IVp.InvAddr4 & "  " & countryname;
      end;      
    end;
      
    if (blank(IVp.ShipAddr0)) then begin
      IVp.ShipAddr0 = CUr.Name;
      IVp.ShipAddr1 = CUr.DelAddr0;
      IVp.ShipAddr2 = CUr.DelAddr1;
      IVp.ShipAddr3 = CUr.DelAddr2;
      IVp.DelAddr3 = CUr.DelAddr3;
      IVp.DelAddr4 = CUr.DelAddr4;
    end;
    IVp.PayDeal = CUr.PayDeal;
    IVp.VATNr = CUr.VATNr;
    IVp.RegNr1 = CUr.RegNr1;
  end;
  RETURN;
END;

global
procedure ContractFindReceiptAmount(record IVVc IVr,Date enddate,var val paid)
BEGIN
  LongInt latedays;
  Date td;
  val v,v1,paidb1;

  td = enddate;
  paid = IVr.Sum4;
  paidb1 = IVr.BaseSum4;
  ARRnGetInvBalance(IVr,td,1,paid,paidb1,latedays);  
  SubPrePayments(IVr,v,v1);
  paid = paid - v;
  paidb1 = paidb1 - v1;
  v = 0;
  v1 = 0;
  SubCashRows_IVVc(IVr,true,v,v1);
  paid = paid - v;
  paidb1 = paidb1 - v1;
  paid = -paid;
  paidb1 = -paidb1;
  RETURN;
END;

global
updating procedure CreateCOIV(record COVc COr,record IVVc IVr)
BEGIN
  record COIVVc COIVr;

  if ((IVr.SerNr!=-1) and (COr.SerNr!=-1)) then begin
    COIVr.CONr = COr.SerNr;
    COIVr.COChildNr = COr.ChildSerNr;
    COIVr.IVNr = IVr.SerNr;
    COIVr.Type = 0;
    if (ReadFirstMain(COIVr,0,true)==false) then begin
      COIVr.CONr = COr.SerNr;
      COIVr.COChildNr = COr.ChildSerNr;
      COIVr.IVNr = IVr.SerNr; 
      COIVr.Type = 0;
      if (RecordStore(COIVr,false)) then begin 
      end;
    end;
  end;
  RETURN;
END;

global
updating procedure CreateCOIVFromOrd(record ORVc ORr,record IVVc IVr)
BEGIN
  record COIVVc COIVr;
  record COIVVc COIV2r;

  COIVr.IVNr = ORr.SerNr;
  COIVr.Type = 1;
  if (ReadFirstKey("IVNr",COIVr,2,true)) then begin
    COIV2r.CONr = COIVr.CONr;
    COIV2r.COChildNr = COIVr.COChildNr;
    COIV2r.IVNr = IVr.SerNr; 
    COIV2r.Type = 0; 
    if (ReadFirstMain(COIV2r,0,true)==false) then begin
      COIV2r.CONr = COIVr.CONr;
      COIV2r.COChildNr = COIVr.COChildNr;
      COIV2r.IVNr = IVr.SerNr; 
      COIV2r.Type = 0; 
      if (RecordStore(COIV2r,false)) then begin 
      end;
    end;
  end;
  RETURN;
END;

global
updating procedure DeleteCOIVs(record IVVc IVr)
BEGIN
  Boolean TrHs;
  record COIVVc COIVr;
  record COVc COr;
  record COVc oldCOr;
  row IVVc IVrw;
  row COVc COrw;
  Integer ivi,ivrwcnt;
  Integer coi,corwcnt;
  Boolean changedf;
  
  COIVr.IVNr = IVr.SerNr;
  COIVr.Type = 0;
  changedf = false;
  TrHs = true;
  while (LoopKey("IVNr",COIVr,2,TrHs)) begin
    if (COIVr.IVNr!=IVr.SerNr) then begin TrHs = false; end;
    if (TrHs) then begin
      if (IVr.OKFlag!=0) then begin
        COr.SerNr = COIVr.CONr;
        COr.ChildSerNr = COIVr.COChildNr;
        if (ReadFirstMain(COr,2,true)) then begin
          RecordCopy(oldCOr,COr);
          ivrwcnt = MatRowCnt(IVr);
          corwcnt = MatRowCnt(COr);
          for (ivi=0;ivi<ivrwcnt;ivi=ivi+1) begin
            MatRowGet(IVr,ivi,IVrw);
            if (nonblank(IVrw.ArtCode)) then begin
              for (coi=0;coi<corwcnt;coi=coi+1) begin
                MatRowGet(COr,coi,COrw);
                if (IVrw.ArtCode==COrw.ArtCode) then begin
                  if (COrw.InvCnt>0) then begin
                    COrw.InvCnt = COrw.InvCnt - IVrw.Quant;
                    coi = corwcnt;
                    changedf = true;
                  end;
                end;
              end;
            end;
          end;
          if (changedf) then begin
            if (RecordUpdate(oldCOr,COr,true)==0) then begin
            end;
          end;
        end;
      end;
      RecordDelete(COIVr);
      StepBack(COIVr);
    end;
  end;
  RETURN;
END;

global
updating procedure UpdateCOIV(record IVVc IVr)
BEGIN
  record COIVVc COIVr;
  record COVc COr;
  record COVc oldCOr;
  row IVVc IVrw;
  row COVc COrw;
  Integer ivi,ivrwcnt;
  Integer coi,corwcnt;
  val leftv;
  Boolean changedf;

  if (IVr.OKFlag!=0) then begin
    COIVr.IVNr = IVr.SerNr;
    COIVr.Type = 0;
    if (ReadFirstKey("IVNr",COIVr,2,true)) then begin
      COr.SerNr = COIVr.CONr;
      COr.ChildSerNr = COIVr.COChildNr;
      if (ReadFirstMain(COr,1,true)) then begin
        RecordCopy(oldCOr,COr);
        ivrwcnt = MatRowCnt(IVr);
        corwcnt = MatRowCnt(COr);
        for (ivi=0;ivi<ivrwcnt;ivi=ivi+1) begin
          MatRowGet(IVr,ivi,IVrw);
          if (nonblank(IVrw.ArtCode)) then begin
            leftv = IVrw.Quant;
            for (coi=0;coi<corwcnt;coi=coi+1) begin
              MatRowGet(COr,coi,COrw);
              if (IVrw.ArtCode==COrw.ArtCode) then begin
                COrw.InvCnt = COrw.InvCnt + leftv;
                MatRowPut(COr,coi,COrw);
                changedf = true;
                coi = corwcnt;
              end;
            end;
          end;
        end;
        if (changedf) then begin
          if (RecordUpdate(oldCOr,COr,false)==0) then begin
          end;
        end;
      end;
    end;
  end;
  RETURN;
END;

global
function Integer GetCUCOInvDef(string custcode)
BEGIN
  Integer res;
  record CUCODefValVc CUCODefr;  

  res = 0;
  CUCODefr.CustCode = custcode;
  if (ReadFirstMain(CUCODefr,1,true)) then begin
    res = CUCODefr.DetailInvoice;
  end;
  GetCUCOInvDef = res;
  RETURN;
END;

global
updating procedure CreateSummaryActivity(string codes,string comment,string curuser)
BEGIN
  record ActVc Actr;
  
  RecordNew(Actr);
  Actr.TransDate = CurrentDate;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  Actr.Comment = codes & "   " & comment;
  Actr.MainPersons = curuser;
  Actr.TodoFlag = 1;
  Actr.CalTimeFlag = 0;
  if (RecordStore(Actr,false)) then begin 
  end;
  RETURN;
END;

global
updating procedure InvCreateActivity(record COVc COr,string codes,string comment,string curuser,Integer curcomp)
BEGIN
  record ActVc Actr;
  
  RecordNew(Actr);
  Actr.TransDate = CurrentDate;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  Actr.Comment = AddStr(codes,comment,"   ");
  Actr.MainPersons = COr.SalesMan;
  if (COr.SalesMan!=curuser) then begin
    Actr.CCPersons = curuser;
  end;
  Actr.TodoFlag = 1;
  Actr.CalTimeFlag = 0;
  if (RecordStore(Actr,false)) then begin 
    CreateRecordLink(Actr,curcomp,COr,curcomp);  
  end;
  RETURN;
END;

global
procedure SetCOInvOnceRows(var record COVc COp,Date InvDate,LongInt serno)
begin
  row COVc COrw;
  Integer i,rwcnt;
  Boolean testf;

  rwcnt = MatRowCnt(COp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(COp,i,COrw);
    testf = true;
    if (COrw.RowType!=1) then begin testf = false; end;
    if (COrw.InvoiceNo>=0) then begin testf = false; end;
    if (nonblankdate(COrw.InvoiceAfter)) then begin
      if (COrw.InvoiceAfter>InvDate) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      COrw.InvoiceNo = serno;
      MatRowPut(COp,i,COrw);
    end;
  end;
  return;
end;

