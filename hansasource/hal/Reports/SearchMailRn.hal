external function Boolean SetInSet2(string,string);
external function Integer CheckConfAccess(record ConfVc,record ConfVc);
external function Integer FirstToRow(record MailVc,var string); 
external procedure HT2Per(Date, Date , var string);
external procedure FindUserMailboxName(string,var string,var string);
external function Integer InString2(string,string);
remote updating procedure SetReadFlagHal(LongInt,Integer);

procedure PrintMailLine(record MailVc Mailr,string tostr,LongInt sz)
begin
  row MailVc Mailrw;
  string 255 tstr,subj;
  Integer rwcnt,rowtype;

  rwcnt = MatRowCnt(Mailr);
  if (rwcnt>0) then begin
    tstr = "";
    MatRowGet(Mailr,0,Mailrw);
    if (tostr==Mailrw.AddrCode) then begin
      rowtype = FirstToRow(Mailr,tstr);
      if (rowtype==0) then begin
        tstr = USetStr(11709) & " " & tstr;
      end;
    end else begin
      tstr = Mailrw.AddrCode;
    end;
  end;
  subj = Mailr.Header;
  if (blank(subj)) then begin
    subj = USetStr(11710);
  end;
  StartFormat(15);
  OutStringID(0,"DblMailVc",subj,false,Mailr.SerNr);
  OutString(2,0,tstr,false);
  if (sz>0) then begin
    OutString(5,0,sz,true);
  end;
  OutDate(3,0,Mailr.TransDate,false);
  OutString(4,0,Mailr.TransTime,false);
  EndFormat;
  return;
end;

procedure AddSortOnSize(record MailVc Mailr,var array LongInt asernr,var array LongInt asize,var LongInt acnt)
begin
  record RLinkVc RLr;
  record Attach2Vc Attach2r;
  LongInt i;
  LongInt sz;
  
  i = 1;
  sz = 0;
  while (ReadRecordLink(Mailr,i,Attach2r,RLr)) begin
    sz = sz + Attach2r.FileSize;
    i = i + 1;
  end;
  asernr[acnt] = Mailr.SerNr;
  asize[acnt] = sz;
  acnt = acnt + 1;
  return;
end;

function Boolean SearchForAttachment(record MailVc Mailr,string linkname)
begin
  Boolean res,found,testf;
  record RLinkVc RLr;
  string 255 tstr;
  
  res = true;
  if (nonblank(linkname)) then begin
    res = false;
    tstr = BuildRecordIdStr(Mailr,CurrentCompany);
    RLr.FromRecidStr = tstr;
    found = true;
    while (LoopKey("MainKey",RLr,1,found)) begin
      if (RLr.FromRecidStr!=tstr) then begin
        found = false;
      end;
      if (found) then begin
        testf = true;
        if (InString2(RLr.Comment,linkname)<0) then begin
          testf = false;
        end;
        if (testf) then begin
          res = true;
          goto LSearchForAttachment;
        end;
      end;
    end;
  end;
LSearchForAttachment:;
  SearchForAttachment = res;
  return;
end;

global
procedure SearchNow(record RcVc RepSpec,string mailboxnr,LongInt curusermailboxnr,string tostr,var Integer cnt)
begin
  record MailVc Mailr;
  record MailVc Mail2r;
  record RLinkVc RLr;
  record Attach2Vc Attach2r;
  row MailVc Mailrw;
  Boolean TrHs,testf,testtextf,attachf;
  string 255 ckey;
  LongInt i,rwcnt;
  array LongInt asernr;
  array LongInt asize;
  LongInt j,acnt;
  date cstd,cend;
  record MailReadVc MRr;

  cstd = StringToDate(FirstInRange(RepSpec.Stext,10));
  cend = StringToDate(LastInRange(RepSpec.Stext,10));

  acnt = 0;
  ckey = "UserTime:";
  ckey = ckey & mailboxnr;
  Mailr.TransDate = RepSpec.sEndDate;
  TrHs = true;
  while (LoopBackKey(ckey,Mailr,1,TrHs)) begin
    if (Mailr.TransDate < RepSpec.sStartDate) then begin 
       TrHs = false;
    end;
    /* fix 
    if (Mailr.TransDate > RepSpec.sEndDate) then begin 
       TrHs = false;
    end;
    */
    if (TrHs) then begin
      testf = true;
      MRr.mailSerNr = Mailr.SerNr;
      MRr.accode = kMailStatusCreated;        
      if (ReadFirstKey("accode",MRr,2,true)) then begin
        if (DateInRange(MRr.fDate,cstd,cend)==false) then begin 
          testf = false;
        end;
      end;
      if (Mailr.TransDate>RepSpec.sEndDate) then begin 
        testf = false;
      end;
      if (testf) then begin
        rwcnt = MatRowCnt(Mailr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(Mailr,i,Mailrw);
          if (Mailrw.Mailbox==StringToLongInt(mailboxnr)) then begin
            i = rwcnt;
          end;
        end;
        MRr.mailSerNr = Mailr.SerNr;
        MRr.mailBoxNr = curusermailboxnr;
//        MRr.accode = 100;
        if (ReadLastKey("mailNrmailBoxNr",MRr,2,true)) then begin
        end;
        if (MRr.mailSerNr!=Mailr.SerNr) or (MRr.mailBoxNr!=curusermailboxnr) then begin
          RecordClear(MRr);
        end;
        switch (RepSpec.flags[2]) begin
          case 1: 
            switch (Mailrw.RowTyp) begin
              case kMailRowTypeFrom:              
                switch (MRr.accode) begin
                  case kMailStatusUnread:
                  otherwise testf = false;
                end;
              case kMailRowTypeTo:              
                switch (MRr.accode) begin
                  case kMailStatusRead: testf = false;
                  otherwise ;
                end;
              case kMailRowTypeCC:              
                switch (MRr.accode) begin
                  case kMailStatusRead: testf = false;
                  otherwise ;
                end;
              case kMailRowTypeBCC:              
                switch (MRr.accode) begin
                  case kMailStatusRead: testf = false;
                  otherwise ;
                end;
            end;
          case 2: 
            switch (Mailrw.RowTyp) begin
              case kMailRowTypeFrom:              
                switch (MRr.accode) begin
                  case kMailStatusUnread:
                    testf = false;
                  otherwise
                end;
              case kMailRowTypeTo:              
                switch (MRr.accode) begin
                  case kMailStatusUnread: testf = false;
                  otherwise
                end;
              case kMailRowTypeCC:              
                switch (MRr.accode) begin
                  case kMailStatusUnread: testf = false;
                  otherwise
                end;
              case kMailRowTypeBCC:              
                switch (MRr.accode) begin
                  case kMailStatusUnread: testf = false;
                  otherwise
                end;
            end;
        end;
      end;
      if (testf) then begin
        rwcnt = MatRowCnt(Mailr);
        if (nonblank(RepSpec.f1)) then begin
          testf = false;        
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(Mailr,i,Mailrw);
            if (RepSpec.ArtMode==0) then begin
              switch (Mailrw.RowTyp) begin
                case kMailRowTypeTo:
                  if (RepSpec.f1==Mailrw.AddrCode) then begin
                    testf = true;
                  end else begin
                    if (InString2(Mailrw.AddrCode,RepSpec.f1)>=0) then begin
                      testf = true;
                    end;
                  end;
                case kMailRowTypeCC:                
                  if (RepSpec.f1==Mailrw.AddrCode) then begin
                    testf = true;
                  end else begin
                    if (InString2(Mailrw.AddrCode,RepSpec.f1)>=0) then begin
                      testf = true;
                    end;
                  end;
              end;
            end;
            if (RepSpec.ArtMode == 2) then begin
              if (RepSpec.f1==Mailrw.AddrCode) then begin
                testf = true;
              end else begin
                if (InString2(Mailrw.AddrCode,RepSpec.f1)>=0) then begin
                  testf = true;
                end;
              end;
            end;
            if (RepSpec.ArtMode == 1) then begin
              if (Mailrw.RowTyp == kMailRowTypeFrom) then begin
                if (RepSpec.f1==Mailrw.AddrCode) then begin
                  testf = true;
                end else begin
                  if (InString2(Mailrw.AddrCode,RepSpec.f1)>=0) then begin
                    testf = true;
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
      if (RepSpec.flags[1]>0) then begin
        if (ReadRecordLink(Mailr,1,Attach2r,RLr)) then begin
          if (RepSpec.flags[1]==2) then begin
            testf = false;
          end;
          if (RepSpec.flags[1]==1) then begin
            AddSortOnSize(Mailr,asernr,asize,acnt);
            if (RepSpec.long2>0) then begin
              if (asize[acnt-1]<RepSpec.long2) then begin
                testf = false;
              end;
            end;
          end;
        end else begin
          if ((RepSpec.flags[1]==1) or (RepSpec.flags[1]==3)) then begin
            testf = false;
          end;
        end;
      end;
      testtextf = true;
      if (nonblank(RepSpec.f2)) then begin
        testtextf = false;
        RecordNew(Mail2r);
        if ((RepSpec.flags[0]==0) or (RepSpec.flags[0]==1)) then begin
          RecordCopy(Mail2r,Mailr);
        end;
        if ((RepSpec.flags[0]==0) or (RepSpec.flags[0]==2)) then begin
          AddToText(Mailr.Header,Mail2r);
        end;
        if (Mail2r.HtmlFlag!=0) then begin
          if (StringInHtml(RepSpec.f2,Mail2r)) then begin
            testtextf = true;
          end;
        end;
        if (testtextf==false) then begin
          if (StringInText(RepSpec.f2,Mail2r)) then begin
            testtextf = true;
          end;
        end;
      end;    
      attachf = true;
      if (nonblank(RepSpec.f3)) then begin
        attachf = SearchForAttachment(Mailr,RepSpec.f3);
      end;
      if (testf and nonblank(RepSpec.f4)) then begin
        if (SetInSet2(RepSpec.f4,Mailr.Tags)==false) then begin
          testf = false;
        end;
      end;
      if (testf and testtextf and attachf) then begin
        if (RepSpec.flags[3]==0) then begin
          PrintMailLine(Mailr,tostr,asize[acnt-1]);
        end;
        cnt = cnt + 1;
      end;  
    end;
  end;
/* Sorting for later
  for (i=0;i<acnt;i=i+1) begin
    
  end;
*/
  return;
end;

global
procedure SearchHeader(record RcVc RepSpec)
begin
  string 255 tstr;
  Integer rw;
  
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (RepSpec.long1<=0) then begin
    tstr = "User: ";
    tstr = tstr & CurrentUser;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f1)) then begin
    if (RepSpec.ArtMode == 0) then begin
      tstr = USetStr(11701) & " " & RepSpec.f1;
    end;
    if (RepSpec.ArtMode == 1) then begin    
      tstr = USetStr(11702) & " " & RepSpec.f1;
    end;
    if (RepSpec.ArtMode == 2) then begin
      tstr = USetStr(11703) & " " & RepSpec.f1;
    end;
    Header(rw,tstr,1);
    rw = rw + 1;  
  end;
  if (nonblank(RepSpec.f2)) then begin
    tstr = USetStr(11704) & " " & RepSpec.f2;
    Header(rw,tstr,1);
  end;
  return;
end;

global
procedure SearchMailRn(record RcVc RepSpec)
begin
  string 255 mailboxnr,mbrno,tostr;
  integer cnt;
  
  cnt = 0;
  StartReportJob(USetStr(11700));
  SearchHeader(RepSpec);
  EndHeader;
  SetRepCol(2,200);
  SetRepCol(3,370);
  SetRepCol(4,440);
  SetRepCol(5,360);
  StartFormat(15);
  OutString(0,0,USetStr(11705),false);
  OutString(2,0,USetStr(11706),false);
  OutString(5,0,USetStr(10870),true);
  OutString(3,0,USetStr(11707),false);
  OutString(4,0,USetStr(11708),false);
  EndFormat;
  Gray_Divider(0,1);
  FindUserMailboxName(CurrentUser,mbrno,tostr); 
  if (RepSpec.long1>0) then begin
    mailboxnr = RepSpec.long1;
  end else begin
    mailboxnr = mbrno;
  end;

  SearchNow(RepSpec,mailboxnr,StringToLongInt(mbrno),tostr,cnt)

  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(11711),false);
  OutVal(100,0,cnt,M40Val,true);
  EndFormat;
  EndJob;
  return;
end;

global
procedure SearchThisConference(record RcVc RepSpec,record ConfVc UserMailBoxr,LongInt mailboxnr,LongInt curusermailboxnr,string tostr,var Integer cnt)
begin
  record ConfVc Conf2r;
  row ConfVc Conf2rw;
  row ConfVc Confrw;
  Boolean TrHs;
  string 255 ckey;
  Integer accessf;
  Integer rwcnt,i;
  Integer yrwcnt,yi;
  
  ckey = "SubConfAddrName:";
  ckey = ckey & mailboxnr;
  TrHs = true;
  while (LoopKey(ckey,Conf2r,1,TrHs)) begin
    accessf = CheckConfAccess(UserMailBoxr,Conf2r);
    if (accessf>0) then begin
      SearchNow(RepSpec,Conf2r.SerNr,curusermailboxnr,tostr,cnt)
      SearchThisConference(RepSpec,UserMailBoxr,Conf2r.SerNr,curusermailboxnr,tostr,cnt);
    end;
  end;
  return;
end;

global
procedure SearchMailConfRn(record RcVc RepSpec)
begin
  record ConfVc Confr;
  integer cnt;
  string 60 curusermailboxcode,curusermailboxname;  

//  RepSpec.Stext = RepSpec.sStartDate2 & ":" & RepSpec.sEndDate2;
//only when reportnigperiods on
  FindUserMailboxName(CurrentUser,curusermailboxcode,curusermailboxname);  
  cnt = 0;
  StartReportJob(USetStr(11700));
  SearchHeader(RepSpec);
  EndHeader;
  SetRepCol(2,200);
  SetRepCol(3,370);
  SetRepCol(4,440);
  SetRepCol(5,360);
  StartFormat(15);
  OutString(0,0,USetStr(11705),false);
  OutString(2,0,USetStr(11706),false);
  OutString(5,0,USetStr(10870),true);
  OutString(3,0,USetStr(11707),false);
  OutString(4,0,USetStr(11708),false);
  EndFormat;
  Gray_Divider(0,1);
  if (RepSpec.long1>-1) then begin
    Confr.AddrCode = CurrentUser;
    if (ReadFirstKey("AddrCode",Confr,1,true)) then begin
      SearchThisConference(RepSpec,Confr,RepSpec.long1,Confr.AddrName,StringToLongInt(curusermailboxcode),cnt);
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(11711),false);
  OutVal(100,0,cnt,M40Val,true);
  EndFormat;
  EndJob;
  return;
end;

