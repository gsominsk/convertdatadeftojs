external function Boolean ReadAcceptanceRules(Integer,string,var record AcceptanceRulesVc);
external function Boolean HasModCRM();
external function Boolean IsEnterprise();
external function Boolean HasModIN();
external function Boolean HasModProd();
external procedure PrintApprovalAcivity(record AcceptanceRulesVc,record ActVc,var Boolean);
external function val GetORRowReserv(LongInt,string,string,var val,var string,var string,Boolean);
external function string 255 CreateInvoiceNumber(LongInt,string);
external procedure GetStockValue(string,string,var record ItemStatusVc);
external function Boolean WrapAndPrint(Integer,string,Integer);
external procedure PrintProdOrdInfo(record ProdOrderVc,val);
external procedure FindProdOrdOutItem(record ProdOrderVc,var string,var val);
external procedure PrintOperations(record RcVc,record ProdVc);

procedure PrintActivity(record ActVc Actr)
BEGIN
  Integer i,rwcnt;
  row ActVc Actrw;
  
  StartFormat(15);
   OutLongInt(0,"DblActVc",Actr.SerNr,false);
   OutStringID(50,"DblActRec",Actr.TransDate,false,Actr.SerNr);
   OutString(110,0,Actr.ActType,false);
   OutString(160,"DblPersAct",Actr.MainPersons,false);
   OutString(210,0,Actr.Contact,false);
   if (WrapAndPrint(340,Actr.Comment,28)) then begin
     EndFormat;
   end;
  rwcnt = MatRowCnt(Actr);
  for (i=0; i<rwcnt ;i=i+1) begin
    MatRowGet(Actr,i,Actrw);
    StartFormat(15);
    OutString(80,0,Actrw.TextCode,false);
    if (WrapAndPrint(140,Actrw.Text,67)) then begin
      EndFormat;
    end;
  end;
  if (rwcnt>1) then begin
    StartFormat(10);
    EndFormat;
  end;
  RETURN;
END;

procedure PrintActivityActivities(record ActVc Actr)
BEGIN
  record ActVc LinkActr;
  record RLinkVc RLinkr;
  Integer actnr;

  actnr = 1;
  while (ReadRecordLink(Actr,actnr,LinkActr,RLinkr)) begin
    PrintActivity(LinkActr);
    actnr = actnr + 1;
  end;  
  RETURN;
END;

procedure PrintOrderActivities(record ORVc ORr)
BEGIN
  record ActVc Actr;
  record RLinkVc RLinkr;
  Integer actnr;

  StartFormat(15);
  OutString(0,0,USetStr(11291),false);
  EndFormat;
  StartFormat(15);
  OutString(50,0,USetStr(6682),false);
  OutString(110,0,USetStr(6687),false);
  OutString(160,0,USetStr(6684),false);
  OutString(210,0,USetStr(6688),false);
  OutString(340,0,USetStr(6685),false);
  EndFormat;
  actnr = 1;
  while (ReadRecordLink(ORr,actnr,Actr,RLinkr)) begin
    PrintActivity(Actr);
    PrintActivityActivities(Actr);
    actnr = actnr + 1;
  end;  
  RETURN;
END;

procedure StockNotShipped2(record ORVc ORp)
BEGIN
  Integer i,rwcnt;
  row ORVc ORrw;
  record ItemStatusVc ISr;
  val rem,toship,totgp,resrv,v,blval;
  string 255 location,tstr,t2;
  
  rwcnt = MatRowCnt(ORp);
  StartFormat(15);
  OutLongInt(0,"DblORVc",ORp.SerNr,false);
  OutDate(90,0,ORp.OrdDate,false);
  OutString(180,0,ORp.CustCode,false);
  OutString(250,0,ORp.Addr0,false);
  OutString(480,0,ORp.PlanShip,true);
  EndFormat;
  if (nonblank(ORp.Addr1)) then begin
    StartFormat(15);
    OutString(250,0,ORp.Addr1,false);
    EndFormat;
  end;
  if (nonblank(ORp.Addr2)) then begin
    StartFormat(15);
    OutString(250,0,ORp.Addr2,false);
    EndFormat;
  end;
  if (nonblank(ORp.Addr3)) then begin
    StartFormat(15);
    OutString(250,0,ORp.Addr3,false);
    EndFormat;
  end;
  StartFormat(10);
  EndFormat;
  StartFormat(15);
  OutString(230,0,USetStr(5501),true);
  if (IsBooks==false) then begin
    OutStringID(280,"DblORReservStatus",USetStr(5510),true,ORp.SerNr);
  end;
  OutString(320,0,USetStr(5511),true);
  OutString(360,0,USetStr(5502),true);
  OutString(400,0,USetStr(5503),true);
  OutString(440,0,USetStr(5504),true);
  OutString(480,0,USetStr(5505),true);
  EndFormat;
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(ORp,i,ORrw);
    if (ORrw.stp==kInvoiceRowTypeNormal or ORrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
      location = ORrw.Location;
      if (blank(location)) then begin
        location = ORp.Location;
      end;
      if (blank(ORrw.ArtCode)) then begin
        RecordNew(ISr);
      end else begin
        GetStockValue(ORrw.ArtCode,location,ISr);
      end;
      rem = ORrw.Quant - ORrw.Shipd1;
      if (rem<=ISr.Instock) then begin
        toship = rem;
      end else begin
        toship = ISr.Instock;
      end;  
      resrv = blval;
      if (ISr.StockRsrvQty!=0) then begin
        resrv = GetORRowReserv(ORp.SerNr,ORrw.ArtCode,ORrw.SerialNr,v,tstr,t2,false);
      end;
      if (toship<0) then begin
        toship = 0;
      end;  
      if (blank(ORrw.ArtCode)) then begin
        rem = blankval;
        toship = blankval;
      end;
      StartFormat(15);
      OutString(12,0,ORrw.ArtCode,false);
      OutString(90,0,Left(ORrw.Spec,30),false);
      OutVal(230,0,ORrw.Quant,M4UVal,true);
      OutVal(280,0,resrv,M4UVal,true);
      OutVal(320,0,ORrw.Shipd1-ORrw.Shipd2,M4UVal,true);
      OutVal(360,0,ORrw.Shipd2,M4UVal,true);
      OutVal(400,0,rem,M4UVal,true);
      OutVal(440,0,ISr.Instock,M4UVal,true);
      OutVal(480,0,toship,M4UVal,true);
      EndFormat;
      totgp = totgp + ORrw.rowGP;
    end;
  end;
  if (UserCanAction("ViewCostPrice",true)) then begin
    StartFormat(15);
    OutString(280,0,USetStr(5401),true);
    OutVal(480,0,totgp,M4Val,true);
    EndFormat;
  end;
  RETURN;
END;

procedure RepProd(record ProdVc Prodr)
begin
  record RcVc RepSpec;
  integer i,rwcnt;
  
  if (nonblank(Prodr.Routing)) then begin
    StartFormat(15);
    OutStringID(0,"DblProdVcID",USetStr(16463) & " " & Prodr.SerNr,false,Prodr.SerNr);
    OutString(260,0,USetStr(16410+Prodr.PRStatusFlag),false);
    EndFormat;
    RepSpec.ArtMode = 0;
    PrintOperations(RepSpec,Prodr);
  end else begin
    StartFormat(15);
    OutStringID(0,"DblProdVcID",USetStr(16463) & " " & Prodr.SerNr,false,Prodr.SerNr);
    OutString(260,0,USetStr(16410+Prodr.PRStatusFlag),false);
    EndFormat;
  end;
  return;
end;

procedure RepProdOrd(record ProdOrderVc ProdOrdr)
begin
  string 20 outitem;
  val divby;
  
  FindProdOrdOutItem(ProdOrdr,outitem,divby);
  PrintProdOrdInfo(ProdOrdr,divby);
  StartFormat(15);
  OutString(300,0,USetStr(12433),false);
  OutVal(1,0,ProdOrdr.Finished,M4Qty,true);
  EndFormat;
  StartFormat(15);
  OutString(300,0,USetStr(12434),false);
  OutVal(1,0,ProdOrdr.Discarded,M4Qty,true);
  EndFormat;
  Gray_Divider(300,1);
  StartFormat(15);
  OutString(300,0,USetStr(12435),false);
  OutVal(1,0,(ProdOrdr.Qty/divby)-ProdOrdr.Finished,M4Qty,true);
  EndFormat;
  return;
end;

procedure RepShip(record SHVc SHp,var val ordtot,var val shptot)
begin
  Integer i,rwcnt;
  row SHVc SHrw;
  
  StartFormat(15);
  OutLongInt(0,"IVInfoSH",SHp.SerNr,false);
  OutDate(60,0,SHp.ShipDate,false);
  OutLongInt(130,0,SHp.OrderNr,false);
  OutString(200,0,SHp.CustCode,false);
  OutString(300,0,SHp.Addr0,false);
  EndFormat;
  StartFormat(15);
  OutString(60,0,SHp.ShipMode,false);
  OutString(300,0,SHp.Addr1,false);
  StartFormat(15);
  EndFormat;
  if (nonblank(SHp.Addr2)) then begin
    StartFormat(15);
    OutString(300,0,SHp.Addr2,false);
    EndFormat;
  end;
  if (nonblank(SHp.Addr3)) then begin
    StartFormat(15);
    OutString(300,0,SHp.Addr3,false);
    EndFormat;
  end;
  StartFormat(15);
  OutString(20,0,USetStr(5506) & ": " & SHp.TotVolume,false);
  OutString(120,0,USetStr(5507) & ": " & SHp.TotWeight,false);
  OutString(220,0,USetStr(5508) & ": " & SHp.Packages,false);
  OutString(320,0,USetStr(5509) & ": " & SHp.TransportNumber,false);
  EndFormat;
  StartFormat(15);
  EndFormat;
  rwcnt = MatRowCnt(SHp);
  for (i = 0 ; i<rwcnt ; i=i+1) begin
    MatRowGet(SHp,i,SHrw);
    StartFormat(15);
    OutString(20,0,SHrw.ArtCode,false);
    OutString(120,0,SHrw.Spec,false);
    OutString(300,0,SHrw.SerialNr,false);
    OutVal(400,0,SHrw.Ordered,M4UVal,true);
    if (SHp.OKFlag==0) then begin
      OutVal(440,0,SHrw.Ship,M4UVal,true);
    end;
    if (SHp.OKFlag!=0) then begin
      OutVal(480,0,SHrw.Ship,M4UVal,true);
    end;
    EndFormat;
    ordtot = ordtot + SHrw.Ordered;
    shptot = shptot + SHrw.Ship;
  end;
 return;
end;

procedure RepReturnedGoods(record RetVc Retp,var val ordtot,var val shptot)
begin
  Integer i,rwcnt;
  row RetVc Retrw;
  
  StartFormat(15);
  OutLongInt(0,"DblRet",Retp.SerNr,false);
  OutDate(60,0,Retp.TransDate,false);
  OutLongInt(130,0,Retp.OrdNr,false);
  OutString(200,0,Retp.CustCode,false);
  OutString(300,0,Retp.CustName,false);
  EndFormat;
  rwcnt = MatRowCnt(Retp);
  for (i = 0 ; i<rwcnt ; i=i+1) begin
    MatRowGet(Retp,i,Retrw);
    StartFormat(15);
    OutString(20,0,Retrw.ArtCode,false);
    OutString(120,0,Retrw.Spec,false);
    OutString(300,0,Retrw.SerialNr,false);
    if (Retp.Type==1) then begin
      OutVal(420,0,Retrw.Quant,M4Qty,true);
    end else begin
      OutVal(480,0,-Retrw.Quant,M4Qty,true);
    end;  
    EndFormat;
    if (Retp.Type==1) then begin
      ordtot = ordtot + Retrw.Quant;
    end else begin
      shptot = shptot - Retrw.Quant;
    end;  
  end;
 return;
end;

procedure RepInvoice(record IVVc IVr,Integer com)
begin
  row IVVc IVrw;
  string 255 tstr,t2;
  Integer i,rwcnt;
  val qty,sum1,sum3,arop;
  record ARVc ARr;

  qty = 0;
  StartFormat(15);
  OutString(0,"DblCustPS2",CreateInvoiceNumber(IVr.SerNr,IVr.OfficialSerNr),false);
  tstr = "";
  if (IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeNormalSpecialSales) then begin
    tstr = USetStr(1803);
  end;
  if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
    tstr = USetStr(1804);
  end;
  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
    tstr = USetStr(1805);
  end;
  if (IVr.InvType==kInvoiceTypeInterest) then begin
    tstr = USetStr(1810);
  end;
  if (IVr.InvType==kInvoiceTypeDebit) then begin
    tstr = USetStr(23250);
  end;
  if (IVr.InvType==kInvoiceTypePrepayment) then begin
    tstr = USetStr(1806);
  end;
  if (IVr.InvType==kInvoiceTypeDownpayment) then begin
    tstr = USetStr(1818);
  end;
  OutString(50,0,tstr,false);
  OutDate(90,0,IVr.InvDate,false);
  OutDate(220,0,IVr.PayDate,false);
  OutString(270,0,IVr.pdComment,false);
  OutLongInt(350,0,IVr.OrderNr,false);
  if (IVr.OKFlag==0) then begin
    OutString(480,0,USetStr(2366),true);
  end;
  EndFormat;
  StartFormat(15);
  OutString(50,0,IVr.CustCode,false);
  OutString(220,0,IVr.Addr0,false);
  EndFormat;
  StartFormat(15);
  OutString(50,0,IVr.CustCat,false);
  OutString(220,0,IVr.Addr1,false);
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(50,0,IVr.OurContact,false);
  OutString(220,0,IVr.Addr2,false);
  EndFormat;
  if (IVr.Addr3<>"") then begin
    StartFormat(15);
    OutString(220,0,IVr.Addr3,false);
    EndFormat;
  end;
  if (IVr.ClientContact<>"") then begin
    StartFormat(15);
    OutString(220,0,IVr.ClientContact,false);
    EndFormat;
  end;
  if (IVr.CurncyCode<>"") then begin
    StartFormat(15);
    OutString(460,0,IVr.CurncyCode,true);
    EndFormat;
  end;
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp==3) then begin
      StartFormat(15);
      t2 = USetStr(1807);
      tstr = CreateInvoiceNumber(IVrw.OrdRow,IVrw.CredOfficialSerNr);
      t2 = t2 & tstr;
      OutString(130,0,t2,false);
      EndFormat;
    end;
    if ((IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==4)) then begin
      StartFormat(15);
      qty = qty + IVrw.Quant;
      OutString(20,0,IVrw.ArtCode,false);
      OutVal(104,0,IVrw.Quant,M4UVal,true);
      OutString(110,0,IVrw.Spec,false);
      OutVal(350,0,IVrw.Price,M423Val,true);
      OutVal(380,0,IVrw.vRebate,M41Val,true);
      OutVal(460,0,IVrw.Sum,M4Val,true);
      OutString(480,0,IVrw.VATCode,true);
      EndFormat;
    end;
    if (IVrw.stp==5) then begin
      StartFormat(15);
      OutString(20,0,USetStr(4869),false);
      OutString(130,0,IVrw.Spec,false);
      OutVal(460,0,IVrw.Sum,M4Val,true);
      OutString(480,0,IVrw.VATCode,true);
      EndFormat;
    end;
  end;
  if (IVr.FrPrice<>0) then begin
    StartFormat(15);
    OutString(20,0,IVr.FrItem,false);
    OutString(104,0,"1",true);
    OutVal(350,0,IVr.FrPrice,M4Val,true);
    OutVal(460,0,IVr.FrPrice,M4Val,true);
    OutString(480,0,IVr.FrVATCode,true);
    EndFormat;
  end;
  Black_Divider(380,460);
  StartFormat(15);
  if (IVr.ExportFlag!=0) then begin
    OutString(20,0,USetStr(2367),false);
  end;
  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
    sum1 = -IVr.Sum1;
    sum3 = -IVr.Sum3;
  end else begin
    sum1 = IVr.Sum1;
    sum3 = IVr.Sum3;
  end;
  OutString(70,0,USetStr(2645),false);
  OutString(150,0,USetStr(3185),false);
  OutString(230,0,USetStr(6707),false);
  OutVal(460,0,sum1,M4Val,true);//280
  OutVal(104,0,qty,M4UVal,true);
  OutString(150,0,IVr.Objects,false);
  OutVal(230,0,sum3,M4Val,false);
  OutVal(460,0,IVr.Sum4,M4Val,true);
  EndFormat;
  if (com<>0) then begin
    if (nonblank(IVr.InvComment)) then begin
      StartFormat(15);
      OutString(0,0,IVr.InvComment,false);
      EndFormat;
    end;
  end;
  ARr.InvoiceNr = IVr.SerNr;
  if (ReadFirstMain(ARr,1,true)) then begin
    arop = IVr.Sum4 - ARr.RVal;
  end else begin
    if (IVr.OKFlag<>0) then begin 
      arop = IVr.Sum4;
    end else begin
      arop = 0; 
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(20,0,USetStr(2432),false);
  OutString(380,0,ARr.ARCurncyCode,true);
  OutVal(460,0,arop,M4Val,true);  
  EndFormat;
  return;
end;

procedure PrintPrePayments(LongInt ordno)
begin
  record ARPayVc ARPayr;
  record ARPayHistVc ARPayHistr;
  Boolean foundf,testf;
  val pptot;
  string 60 keyname,dblstr;
  Boolean mainkey;
  val v,bv;
/*  
  mainkey = true;
  ARPayHistr.OrderNr = ordno;
  if (ReadFirstKey("OrderNr",ARPayHistr,1,true)) then begin
    keyname = "OrderNr";
    mainkey = false;
  end;
  if (mainkey) then begin
    keyname = "MainKey";
  end;
*/  
  keyname = "OrderNr";//always order no, otherwise prepayments for other customer pop up in order status
  ARPayHistr.CUPNr = ordno;
  ARPayHistr.OrderNr = ordno;
  foundf = true;
  ResetLoop(ARPayHistr);
  while (LoopKey(keyname,ARPayHistr,1,foundf)) begin
    if (mainkey) then begin
      if (ARPayHistr.CUPNr!=ordno) then begin
        foundf = false;
      end;
    end else begin
      if (ARPayHistr.OrderNr!=ordno) then begin
        foundf = false;
      end;
    end;
    if (foundf) then begin
      if (ARPayHistr.FileName=="IPVc") or (ARPayHistr.FileName=="CLInVc")  or (ARPayHistr.FileName=="CLOutVc") then begin
        StartFormat(15);
        switch (ARPayHistr.FileName) begin
          case "IPVc": dblstr = "DblCuPerIP"; v = ARPayHistr.Val; bv = ARPayHistr.BookVal;
          case "CLInVc": dblstr = "DblCLInVc"; v = ARPayHistr.Val; bv = ARPayHistr.BookVal;
          case "CLOutVc": dblstr = "DblCLOutVc"; v = -ARPayHistr.Val; bv = -ARPayHistr.BookVal;
        end;
        OutString(0,dblstr,ARPayHistr.SerNr,false);
        OutDate(60,0,ARPayHistr.TransDate,false);
        OutString(130,0,ARPayHistr.CustCode,false);     
        OutString(250,0,v,false);
        OutString(350,0,ARPayHistr.CurncyCode,false)       
        OutString(1,0,bv,true);
        EndFormat;
        pptot = pptot + bv;
      end;    
    end;     
  end;
  /* 
  if (mainkey==false) then begin
    ResetLoop(ARPayHistr);
    ARPayHistr.CUPNr = ordno;
    foundf = true;
    ResetLoop(ARPayHistr);
    while (LoopKey("MainKey",ARPayHistr,1,foundf)) begin
      if (ARPayHistr.CUPNr!=ordno) then begin
        foundf = false;
      end;
      testf = true;
      if (ARPayHistr.OrderNr>0) then begin
        testf = false;
      end;
      if (testf and foundf) then begin
        if (ARPayHistr.FileName=="IPVc") or (ARPayHistr.FileName=="CLInVc")  or (ARPayHistr.FileName=="CLOutVc") then begin
          StartFormat(15);
          switch (ARPayHistr.FileName) begin
            case "IPVc": dblstr = "DblCuPerIP"; v = ARPayHistr.Val; bv = ARPayHistr.BookVal;
            case "CLInVc": dblstr = "DblCLInVc"; v = ARPayHistr.Val; bv = ARPayHistr.BookVal;
            case "CLOutVc": dblstr = "CLOutVc"; v = -ARPayHistr.Val; bv = -ARPayHistr.BookVal;
          end;
          OutString(0,dblstr,ARPayHistr.SerNr,false);
          OutDate(60,0,ARPayHistr.TransDate,false);
          OutString(130,0,ARPayHistr.CustCode,false);     
          OutString(250,0,v,false);
          OutString(350,0,ARPayHistr.CurncyCode,false)       
          OutString(1,0,bv,true);
          EndFormat;
          pptot = pptot + bv;
        end;
      end;    
    end;     
  end; 
  */
  Gray_Divider(0,1);
  if (pptot<>0) then begin
    StartFormat(15);
    OutString(0,0,UsetStr(2357),false);
    OutString(1,0,pptot,true);
    EndFormat;      
    pptot = 0;
    if (mainkey) then begin
      keyname = "CUPNr";
    end;
    ARPayr.CUPNr=ordno;
    ARPayr.OrderNr = ordno;
    foundf = true;
    while (LoopKey(keyname,ARPayr,1,foundf)) begin
      if (mainkey) then begin
        if (ARPayr.CUPNr!=ordno) then begin
          foundf = false;
        end;
      end else begin
        if (ARPayr.OrderNr!=ordno) then begin
          foundf = false;
        end;
      end;
      if (foundf) then begin
        pptot = pptot + ARPayr.BookRVal;
      end;
    end; 
    /*
    if (mainkey==false) then begin
      ResetLoop(ARPayr);
      ARPayr.CUPNr=ordno;
      foundf = true;
      while (LoopKey("CUPNr",ARPayr,1,foundf)) begin
        if (ARPayr.CUPNr!=ordno) then begin
          foundf = false;
        end;
        testf = true;
        if (ARPayr.OrderNr>0) then begin
          foundf = false;
        end;
        if (foundf and testf) then begin
          pptot = pptot + ARPayr.BookRVal;
        end;
      end; 
    end;
    */    
    StartFormat(15);
    OutString(0,0,UsetStr(7825),false);
    OutString(1,0,pptot,true);
    EndFormat;  
  end;
  
  StartFormat(30);
  EndFormat;  
  return;
end;

global
procedure ORPrintApprovalActivities(record ORVc ORr)
begin
  record ActVc Actr;
  record AcceptanceRulesVc Acptr;
  Integer actnr;
  record RLinkVc RLr;
  Boolean firstf;

  ReadAcceptanceRules(kAcceptanceOR,ORr.CustCode,Acptr);
  actnr = 1;
  while (ReadRecordLink(ORr,actnr,Actr,RLr)) begin
    PrintApprovalAcivity(Acptr,Actr,firstf);      
    actnr = actnr + 1;
  end;
  return;
end;

global
procedure ORInfoRn(record RcVc RepSpec)
BEGIN
  record ORVc ORp;
  record ProdVc Prodr;
  record ProdOrderVc ProdOrdr;
  record SHVc SHr;
  record RetVc Retr;
  record IVVc IVr;
  Boolean found,TrHs,testf;
  val ortot,shtot;
  LongInt fror,toor,lastornr;
  record XSrsVc XSrsr;
  
  fror = FirstInRange(RepSpec.f1,10);
  toor = LastInRange(RepSpec.f1,10);
  
  StartReportJob(USetStr(5500));
  EndHeader;
  SetRepCol(2,404);
  SetRepCol(3,520-(2*96));
  SetRepCol(4,540-(3*96));
  SetRepCol(5,430);

  TrHs = true;
  ORp.SerNr = fror;
  while (LoopMain(ORp,1,TrHs)) begin
    if (ORp.SerNr>toor) then begin TrHs = false; end;
    if (TrHs) then begin
      StartFormat(15);
      OutString(0,0,USetStr(2622),false);
      OutString(90,0,USetStr(2623),false);
      OutString(180,0,USetStr(2624),false);
      OutString(480,0,USetStr(2638),true);
      EndFormat;
      Gray_Divider(0,1);
      StockNotShipped2(ORp);
      Gray_Divider(0,1);
      StartFormat(15);
      EndFormat;
      StartFormat(15);
      EndFormat;  
      
  /* productions */
      if (HasModProd) then begin
        StartFormat(15);
        OutString(0,0,USetStr(1338),false);
        EndFormat;
        StartFormat(15);
        OutString(0,0,USetStr(16451),false);
        OutString(200,0,USetStr(16452),false);
        OutString(260,0,USetStr(16453),false);
        OutString(360,0,USetStr(16454),true);
        OutString(420,0,USetStr(16455),true);
        OutString(480,0,USetStr(16456),true);
        EndFormat;
        Gray_Divider(0,1);
        Prodr.OrderNr = ORp.SerNr;
        found = true;
        while (LoopKey("OrderNr",Prodr,1,found)) begin
          if (found) then begin
            if (Prodr.OrderNr!=ORp.SerNr) then begin
              found = false;
            end;
          end;
          if (found) then begin
            RepProd(Prodr);
            Gray_Divider(0,1);
          end;
        end;
        StartFormat(15);
        EndFormat;
        StartFormat(15);
        EndFormat;
        Gray_Divider(0,1);
      /* production orders */
        StartFormat(15);
        OutString(0,0,USetStr(1830),false);
        EndFormat;
        StartFormat(15);
        OutString(0,0,USetStr(12421),false);
        OutString(110,0,USetStr(12422),true);
        OutString(120,0,USetStr(12429),false);
        OutString(155,0,USetStr(12432),false);
        OutString(220,0,USetStr(12425),false);
        OutString(280,0,USetStr(12423),false);
        OutString(1,0,USetStr(12431),true);
        EndFormat;
        Gray_Divider(0,1);
        ProdOrdr.SalesOrder = ORp.SerNr;
        found = true;
        while (LoopKey("SalesOrder",ProdOrdr,1,found)) begin
          if (found) then begin
            if (ProdOrdr.SalesOrder!=ORp.SerNr) then begin
              found = false;
            end;
          end;
          if (found) then begin
            RepProdOrd(ProdOrdr);
            Gray_Divider(0,1);
          end;
        end;
        StartFormat(15);
        EndFormat;
        StartFormat(15);
        EndFormat;
        Gray_Divider(0,1);
      end;
      
  /* shipments */
      if (HasModIN) then begin
        StartFormat(15);
        OutString(0,0,USetStr(1334),false);
        EndFormat;
        StartFormat(15);
        OutString(0,0,USetStr(2582),false);
        OutString(60,0,USetStr(2583),false);
        OutString(130,0,USetStr(2584),false);
        OutString(200,0,USetStr(2585),false);
        OutString(300,0,USetStr(2586),false);
        OutString(400,0,USetStr(2590),true);
        OutString(440,0,USetStr(5511),true);
        OutString(480,0,USetStr(2591),true);
        EndFormat;
        Gray_Divider(0,1);
        SHr.OrderNr = ORp.SerNr;
        found = true;
        while (LoopKey("OrderKey",SHr,1,found)) begin
          if (found) then begin
            if (SHr.OrderNr<>ORp.SerNr) then begin
              found = false;
            end;      
          end;
          if (found) then begin      
            ortot = 0;
            shtot = 0;
            RepShip(SHr,ortot,shtot);
            Gray_Divider(0,1);
          end;
        end;
        StartFormat(15);
        EndFormat;
        StartFormat(15);
        EndFormat;      
        Gray_Divider(0,1);
      end;
  
      if (IsEnterprise) then begin
    /* returned goods */
        StartFormat(15);
        OutString(0,0,USetStr(2057),false);
        EndFormat;
        Retr.OrdNr = ORp.SerNr;
        found = true;
        while (LoopKey("OrdNr",Retr,1,found)) begin
          if (found) then begin
            if (Retr.OrdNr<>ORp.SerNr) then begin
              found = false;
            end;  
          end;
          if (found) then begin      
            ortot = 0;
            shtot = 0;
            RepReturnedGoods(Retr,ortot,shtot);
            Gray_Divider(0,1);
          end;
        end;
        StartFormat(15);
        EndFormat;
        StartFormat(15);
        EndFormat;      
        Gray_Divider(0,1);  
      end;
  
      if (IsEnterprise) then begin
    /*prepayments*/
        StartFormat(15);
        EndFormat;
        StartFormat(15);
        OutString(0,0,USetStr(2574),false);
        EndFormat;
        StartFormat(15);
        OutString(0,0,USetStr(2352),false);
        OutString(60,0,USetStr(2353),false);
        OutString(130,0,USetStr(2585),false);
        OutString(250,0,USetStr(2575),false);
        OutString(350,0,USetStr(2576),false);
        OutString(1,0,USetStr(2577),true);
        EndFormat;
        Gray_Divider(0,1);
        PrintPrePayments(ORp.SerNr);
      end;
  
  /* invoices */
      StartFormat(15);
      OutString(0,0,USetStr(1330),false);
      EndFormat;
      StartFormat(15);
      OutString(0,0,USetStr(2352),false);
      OutString(60,0,USetStr(2353),false);
      OutString(120,0,USetStr(2354),false);
      OutString(300,0,USetStr(2358),false);
      OutString(2,0,USetStr(2357),true);
      EndFormat;
      Gray_Divider(0,1);
      IVr.OrderNr = ORp.SerNr;
      found = true;
      while (LoopKey("OrderNr",IVr,1,found)) begin
        if (found) then begin
          if (IVr.OrderNr<>ORp.SerNr) then begin
            found = false;
          end;      
        end;
        if (found) then begin
          if (IVr.Invalid==0) then begin
            RepInvoice(IVr,1);
            Gray_Divider(0,1);
          end;  
        end;
      end;

      XSrsr.TransType = 0;
      XSrsr.FromFileName = "ORVc";
      XSrsr.FromSerNr = ORp.SerNr;
      found = true;
      ResetLoop(XSrsr);
      while (LoopKey("From",XSrsr,3,found)) begin
        if (XSrsr.TransType!=0) then begin found = false; end;
        if (XSrsr.FromFileName!="ORVc") then begin found = false; end;
        if (XSrsr.FromSerNr!=ORp.SerNr) then begin found = false; end;
        if (found) then begin
          testf = true;
          if (lastornr==ORp.SerNr) then begin testf = false; end;
          if (testf) then begin
            IVr.SerNr = XSrsr.ToSerNr;
            if (ReadFirstMain(IVr,1,true)) then begin
              RepInvoice(IVr,1);
              Gray_Divider(0,1);
            end;
          end;
          if (XSrsr.FromFileName=="ORVc") then begin
            lastornr = XSrsr.FromSerNr;
          end;
        end;
      end;

      
      Gray_Divider(0,1);
      if (IsEnterprise or HasModCRM) then begin
        PrintOrderActivities(ORp);
      end;
      if (IsEnterprise) then begin
        ORPrintApprovalActivities(ORp);
      end;
    end;

  end;
  EndJob;
  RETURN;
END;
