external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);

global
function LongInt FindSHNrForkLiftQueueArray(var LongInt curforkliftquenr,var string forklift,
                                            LongInt PickActiveSHNr,LongInt PickActiveForkLiftQueNr,string PickForkLift)
BEGIN
  LongInt res;
  record ForkLiftQueVc ForkLiftQuer;
  Boolean found;
  
  if (PickActiveForkLiftQueNr>0) then begin 
    ForkLiftQuer.SerNr = PickActiveForkLiftQueNr;
    if (ReadFirstMain(ForkLiftQuer,1,true)) then begin 
      res = PickActiveSHNr;
      curforkliftquenr = ForkLiftQuer.SerNr;
      forklift = ForkLiftQuer.ForkLift;
    end;
  end else begin
    if (nonblank(PickForkLift)) then begin
      ForkLiftQuer.ForkLift = PickForkLift;
      ForkLiftQuer.QueType = 0;
      ForkLiftQuer.Status = 2;
      if (ReadFirstKey("ForkLift",ForkLiftQuer,3,true)) then begin found = true; end;
      if (found) then begin 
        res = ForkLiftQuer.SHNr; 
        curforkliftquenr = ForkLiftQuer.SerNr;
        forklift = ForkLiftQuer.ForkLift;
        goto LFindSHNrForkLiftQueueArray;
      end;
      ForkLiftQuer.ForkLift = PickForkLift;
      ForkLiftQuer.QueType = 0;
      ForkLiftQuer.Status = 0;
      if (ReadFirstKey("ForkLift",ForkLiftQuer,3,true)) then begin found = true; end;
      if (found) then begin 
        if (nonblank(ForkLiftQuer.ForkLiftSystemID)) then begin
          res = ForkLiftQuer.SHNr; 
          curforkliftquenr = ForkLiftQuer.SerNr;
          forklift = ForkLiftQuer.ForkLift;
          goto LFindSHNrForkLiftQueueArray;
        end;
      end;
    end;
  end;  
LFindSHNrForkLiftQueueArray:;  
  FindSHNrForkLiftQueueArray = res;
  RETURN;
END;

global
procedure ForkLiftQueueArray(string location,string forklift,var Array string alabel,var Array string aitem,var Array string aitemname,var Array string alocarea,var Array val aqty,
                             var Array Integer afullpallet,var Array string aforkliftnr,var Integer acnt,Boolean printf,
                             LongInt PickActiveSHNr,LongInt PickActiveForkLiftQueNr,string PickForkLift)
BEGIN
  record ForkLiftQueVc ForkLiftQuer;
  Boolean TrHs,testf;
  string 60 artcode,lastartcode;
  val quant;
  LongInt l,lastSHNr,lastshipno;
  Integer cnt,keys;
  record ForkLiftQueVc nextForkLiftQuer;
  string 5 ForkLiftNr;
  record LocationVc Locr;
  record INVc INr;
  
  Locr.Code = location;
  ReadFirstMain(Locr,1,true);
  if (Locr.RequirePos==0) then begin goto LForkLiftQueueArray; end;
  ForkLiftNr = forklift;
  if (blank(ForkLiftNr)) then begin
    lastSHNr = FindSHNrForkLiftQueueArray(l,ForkLiftNr,PickActiveSHNr,PickActiveForkLiftQueNr,PickForkLift);
    if (blank(ForkLiftNr)) then begin goto LForkLiftQueueArray; end;  
  end;

  acnt = 0;
  TrHs = true;
  ForkLiftQuer.QueType = 0;
  ForkLiftQuer.Status = 2;
  ForkLiftQuer.ForkLift = ForkLiftNr;
  keys = 3;
  while (LoopKey("ForkLift",ForkLiftQuer,keys,TrHs)) begin
    if (ForkLiftQuer.QueType!=0) then begin TrHs = false; end;
    if (ForkLiftQuer.Status!=2) then begin TrHs = false; end;
    if (ForkLiftQuer.ForkLift!=ForkLiftNr) then begin TrHs = false; end;
    if (printf==false) then begin
      if (cnt>4) then begin TrHs = false; end;
    end;
    if (TrHs) then begin      
      testf = true;
      artcode = ForkLiftQuer.ArtCode;
      quant = ForkLiftQuer.Quant;
      if (blank(artcode)) then begin testf = false; end;
      if (Locr.WHMForkLiftSystem==1) then begin
        if (ForkLiftQuer.FullPallet!=0) then begin testf = false; end;
      end;
      if (ForkLiftQuer.Done!=0) then begin testf = false; end;
      if (PickActiveSHNr!=-1) then begin
        if (ForkLiftQuer.SHNr!=PickActiveSHNr) then begin testf = false; end;
      end;
      if (testf) then begin
        if (printf) then begin
          StartFormat(15);
           OutString(0,0,artcode,false);
//           OutStringID(70,0,ForkLiftQuer.ForkLift,false,ForkLiftQuer.SerNr);
//           OutStringID(120,"DblForkLiftNotEnou","Not enough",false,ForkLiftQuer.SerNr);
//           OutStringID(200,"DblForkLifttoPos","Go to shelf",false,ForkLiftQuer.SerNr);
//           OutStringID(270,"DblForkLifttoWraper","Go to wraper",false,ForkLiftQuer.SerNr);
//           OutStringID(340,"DblForkLifttoDelPos","Go out",false,ForkLiftQuer.SerNr);
           OutString(80,0,ForkLiftQuer.LocArea,false);
           OutString(200,0,ForkLiftQuer.FrPosCode,false);
           OutVal(1,0,quant,M4Qty,true);
          EndFormat;
        end else begin
          if (ForkLiftQuer.FullPallet==0) then begin
            alabel[acnt] = USetStr(14503) & ForkLiftQuer.FrPosCode;
          end else begin
            if (Locr.WHMForkLiftSystem==1) then begin
              alabel[acnt] = "";
            end else begin
              alabel[acnt] = USetStr(14503) & ForkLiftQuer.FrPosCode;
            end;
          end;
          aitem[acnt] = ForkLiftQuer.ArtCode;
          alocarea[acnt] = ForkLiftQuer.LocArea;
          aqty[acnt] = ForkLiftQuer.Quant;
          afullpallet[acnt] = ForkLiftQuer.FullPallet;
          aforkliftnr[acnt] = ForkLiftQuer.SerNr;
          if (ReadFirstItem(ForkLiftQuer.ArtCode,INr,true,true)) then begin end;
          aitemname[acnt] = INr.Name;
          
//StopAlert("aartcode " & artcode[acnt] & " aforkliftnr " & aforkliftnr[acnt] & " aqty " & aqty[acnt]);
          acnt = acnt + 1;
          lastshipno = ForkLiftQuer.SHNr;
        end;
        cnt = cnt + 1;
      end;
    end;
  end;

  ResetLoop(ForkLiftQuer);
  TrHs = true;
  ForkLiftQuer.QueType = 0;
  ForkLiftQuer.Status = 1;
  ForkLiftQuer.ForkLift = ForkLiftNr;
  keys = 3;
  while (LoopKey("ForkLift",ForkLiftQuer,keys,TrHs)) begin
    if (ForkLiftQuer.QueType!=0) then begin TrHs = false; end;
    if (ForkLiftQuer.Status!=1) then begin TrHs = false; end;
    if (ForkLiftQuer.ForkLift!=ForkLiftNr) then begin TrHs = false; end;
    if (printf==false) then begin
      if (cnt>4) then begin TrHs = false; end;
    end;
    if (TrHs) then begin      
      testf = true;
      artcode = ForkLiftQuer.ArtCode;
      quant = ForkLiftQuer.Quant;
      if (blank(artcode)) then begin testf = false; end;
      if (Locr.WHMForkLiftSystem==1) then begin
        if (ForkLiftQuer.FullPallet!=0) then begin testf = false; end;
      end;
      if (ForkLiftQuer.Done!=0) then begin testf = false; end;
      if (PickActiveSHNr!=-1) then begin
        if (ForkLiftQuer.SHNr!=PickActiveSHNr) then begin testf = false; end;
      end;
      if (testf) then begin
        if (printf) then begin
          StartFormat(15);
           OutString(0,0,artcode,false);
//           OutStringID(70,0,ForkLiftQuer.ForkLift,false,ForkLiftQuer.SerNr);
//           OutStringID(120,"DblForkLiftNotEnou","Not enough",false,ForkLiftQuer.SerNr);
//           OutStringID(200,"DblForkLifttoPos","Go to shelf",false,ForkLiftQuer.SerNr);
//           OutStringID(270,"DblForkLifttoWraper","Go to wraper",false,ForkLiftQuer.SerNr);
//           OutStringID(340,"DblForkLifttoDelPos","Go out",false,ForkLiftQuer.SerNr);
           OutString(80,0,ForkLiftQuer.LocArea,false);
           OutString(200,0,ForkLiftQuer.FrPosCode,false);
           OutVal(1,0,quant,M4Qty,true);
          EndFormat;
        end else begin
          if (ForkLiftQuer.FullPallet==0) then begin
            alabel[acnt] = USetStr(14503) & ForkLiftQuer.FrPosCode;
          end else begin
            if (Locr.WHMForkLiftSystem==1) then begin
              alabel[acnt] = "";
            end else begin
              alabel[acnt] = USetStr(14503) & ForkLiftQuer.FrPosCode;
            end;
          end;
          aitem[acnt] = ForkLiftQuer.ArtCode;
          alocarea[acnt] = ForkLiftQuer.LocArea;
          aqty[acnt] = ForkLiftQuer.Quant;
          afullpallet[acnt] = ForkLiftQuer.FullPallet;
          aforkliftnr[acnt] = ForkLiftQuer.SerNr;
          if (ReadFirstItem(ForkLiftQuer.ArtCode,INr,true,true)) then begin end;
          aitemname[acnt] = INr.Name;
//StopAlert("aartcode " & artcode[acnt] & " aforkliftnr " & aforkliftnr[acnt] & " aqty " & aqty[acnt]);
          acnt = acnt + 1;
          lastshipno = ForkLiftQuer.SHNr;
        end;
        cnt = cnt + 1;
      end;
    end;
  end;
  
  ResetLoop(ForkLiftQuer);
  TrHs = true;
  ForkLiftQuer.QueType = 0;
  ForkLiftQuer.Status = 0;
  ForkLiftQuer.ForkLift = ForkLiftNr;
  keys = 3;
  while (LoopKey("ForkLift",ForkLiftQuer,keys,TrHs)) begin
    if (ForkLiftQuer.QueType!=0) then begin TrHs = false; end;
    if (ForkLiftQuer.Status!=0) then begin TrHs = false; end;
    if (ForkLiftQuer.ForkLift!=ForkLiftNr) then begin TrHs = false; end;
    if (printf==false) then begin
      if (cnt>4) then begin TrHs = false; end;
    end;
    if (TrHs) then begin      
      testf = true;
      artcode = ForkLiftQuer.ArtCode;
      quant = ForkLiftQuer.Quant;
      if (blank(artcode)) then begin testf = false; end;
      if (ForkLiftQuer.Done!=0) then begin testf = false; end;
      if (PickActiveSHNr!=-1) then begin
        if (ForkLiftQuer.SHNr!=PickActiveSHNr) then begin testf = false; end;
      end;
      if (testf) then begin
        if (printf) then begin
          StartFormat(15);
           OutString(0,0,artcode,false);
//           OutStringID(70,0,ForkLiftQuer.ForkLift,false,ForkLiftQuer.SerNr);
//           OutStringID(120,"DblForkLiftNotEnou","Not enough",false,ForkLiftQuer.SerNr);
//           OutStringID(200,"DblForkLifttoPos","Go to shelf",false,ForkLiftQuer.SerNr);
//           OutStringID(270,"DblForkLifttoWraper","Go to wraper",false,ForkLiftQuer.SerNr);
//           OutStringID(340,"DblForkLifttoDelPos","Go out",false,ForkLiftQuer.SerNr);
           OutString(80,0,ForkLiftQuer.LocArea,false);
           OutString(200,0,ForkLiftQuer.FrPosCode,false);
           OutVal(1,0,quant,M4Qty,true);
          EndFormat;
        end else begin
          alabel[acnt] = USetStr(14503) & ForkLiftQuer.FrPosCode;
          aitem[acnt] = ForkLiftQuer.ArtCode;
          alocarea[acnt] = ForkLiftQuer.LocArea;
          aqty[acnt] = ForkLiftQuer.Quant;
          afullpallet[acnt] = ForkLiftQuer.FullPallet;
          aforkliftnr[acnt] = ForkLiftQuer.SerNr;
          if (ReadFirstItem(ForkLiftQuer.ArtCode,INr,true,true)) then begin end;
          aitemname[acnt] = INr.Name;
//StopAlert("aartcode " & artcode[acnt] & " aforkliftnr " & aforkliftnr[acnt] & " aqty " & aqty[acnt]);
          acnt = acnt + 1;
        end;
        cnt = cnt + 1;
      end;
    end;
  end;
LForkLiftQueueArray:;  
  RETURN;
END;

global
procedure OrdersToForkLiftRn(record RcVc RepSpec)
BEGIN
  Array string 40 alabel;
  Array string 40 aitem;
  Array string 40 aarea;
  Array val aqty;
  Array Integer afullpallet;
  Array string 20 aforkliftnr;
  Array string 255 aitemname;
  Integer acnt;  
  
  StartReportJob(USetStr(14500));
  Header(1,RepSpec.f1,1);
  EndHeader;
  StartFormat(15);
   OutString(0,0,USetStr(14501),false);
   OutString(80,0,USetStr(14504),false);
   OutString(200,0,USetStr(14505),false);
   OutString(1,0,USetStr(14502),true);
  EndFormat;  
  Gray_Divider(0,1);
  if (nonblank(RepSpec.f1)) then begin
    ForkLiftQueueArray(RepSpec.f2,StringToLongInt(RepSpec.f1),alabel,aitem,aitemname,aarea,aqty,afullpallet,aforkliftnr,acnt,true,-1,-1,"");  
  end;
  EndJob;
  RETURN;
END;