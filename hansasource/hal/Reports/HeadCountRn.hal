external procedure HTDepartments(string,string,var string);
external procedure HTJobTitles(string,string,var string);
external procedure HT2Per(Date, Date , var string);
external procedure HTDetailLevel(Integer, var string);

procedure PrintHeader(record RcVc RepSpec)
begin
  Integer rw;
  string 255 tstr;

  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTJobTitles(RepSpec.f3,RepSpec.f3,tstr);
  Header(rw,tstr,0);
  HTDepartments(RepSpec.FirstAcc,RepSpec.FirstAcc,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  Header(rw,USetStr(19221+RepSpec.flags[0]),0);
  HTDetailLevel(RepSpec.ArtMode,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  tstr = "";
  if (RepSpec.flags[1]!=0) then begin
    if (nonblank(tstr)) then begin
      tstr = tstr & ", ";
    end;
    tstr = tstr & USetStr(19224);
  end;
  if (RepSpec.flags[2]!=0) then begin
    if (nonblank(tstr)) then begin
      tstr = tstr & ", ";
    end;
    tstr = tstr & USetStr(19225);
  end;
  if (RepSpec.flags[3]!=0) then begin
    if (nonblank(tstr)) then begin
      tstr = tstr & ", ";
    end;
    tstr = tstr & USetStr(19226);
  end;
  if (RepSpec.flags[4]!=0) then begin
    if (nonblank(tstr)) then begin
      tstr = tstr & ", ";
    end;
    tstr = tstr & USetStr(19227);
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
  return;
end;

function Boolean TestSelection_HRMCOVc(record HRMCOVc HRMCOr,Integer test,record RcVc RepSpec)
begin
  Boolean testf;

  testf = true;
  switch (test) begin
    case 0:
      if (DateInRange(HRMCOr.StartDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;
    case 1:
      if (DateInRange(HRMCOr.EndDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;
  end;
  if (nonblank(RepSpec.f3)) then begin
    if (HRMCOr.JobTitle!=RepSpec.f3) then begin testf = false; end;
  end;
  if (nonblank(RepSpec.FirstAcc)) then begin
    if (HRMCOr.DepCode!=RepSpec.FirstAcc) then begin testf = false; end;
  end;
  TestSelection_HRMCOVc = testf;
  return;
end;

function Boolean TestSelection_HRMCOChangeVc(record HRMCOChangeVc HRMCOCr,record RcVc RepSpec)
begin
  Boolean testf;

  testf = true;
  if (HRMCOCr.OKFlag==0) then begin testf = false; end;
  if (DateInRange(HRMCOCr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;
  if (nonblank(RepSpec.f3)) then begin
    if (HRMCOCr.JobTitle!=RepSpec.f3) then begin testf = false; end;
  end;
  if (nonblank(RepSpec.FirstAcc)) then begin
    if (HRMCOCr.DepCode!=RepSpec.FirstAcc) then begin testf = false; end;
  end;
  TestSelection_HRMCOChangeVc = testf;
  return;
end;

procedure PrintClassData_Gender(vector val vcount)
begin
  Boolean found,testf;
  record HRMCOClassVc HRMCOCr;
  vector val vtotcount;
  val tot;
  
  vtotcount["MALE"] = vtotcount["MALE"] + vcount["" & ":" & "MALE"] ;
  vtotcount["FEMALE"] = vtotcount["FEMALE"] + vcount["" & ":" & "FEMALE"] ;
  vtotcount["TOTAL"] = vtotcount["TOTAL"] + vcount["" & ":" & "TOTAL"] ;
  
  found = true;
  while (LoopMain(HRMCOCr,1,found)) begin
    if (found) then begin
      testf = true;
      if (vcount[HRMCOCr.Code & ":" & "MALE"]==0) and (vcount[HRMCOCr.Code & ":" & "FEMALE"]==0) then begin
        testf = false;
      end;
      if (testf) then begin
        vtotcount["MALE"] = vtotcount["MALE"] + vcount[HRMCOCr.Code & ":" & "MALE"] ;
        vtotcount["FEMALE"] = vtotcount["FEMALE"] + vcount[HRMCOCr.Code & ":" & "FEMALE"] ;
        vtotcount["TOTAL"] = vtotcount["TOTAL"] + vcount[HRMCOCr.Code & ":" & "TOTAL"];
        
        tot = vcount[HRMCOCr.Code & ":" & "MALE"] + vcount[HRMCOCr.Code & ":" & "FEMALE"];
        StartFormat(15);
         OutString(0,0,HRMCOCr.Code,false);
         OutString(50,0,HRMCOCr.Name,false);
         OutVal(2,0,vcount[HRMCOCr.Code & ":" & "MALE"],M40Val,true);
         OutVal(3,0,vcount[HRMCOCr.Code & ":" & "FEMALE"],M40Val,true);
         OutVal(4,0,tot,M40Val,true);
         OutVal(5,0,vcount[HRMCOCr.Code & ":" & "TOTAL"],M40Val,true);
        EndFormat;
      end;
    end;
  end;
  Gray_Divider(0,1);
  tot = vtotcount["MALE"] + vtotcount["FEMALE"];
  StartFormat(15);
   OutString(0,0,USetStr(19231),false);
   OutVal(2,0,vtotcount["MALE"],M40Val,true);
   OutVal(3,0,vtotcount["FEMALE"],M40Val,true);
   OutVal(4,0,tot,M40Val,true);
   OutVal(5,0,vtotcount["TOTAL"],M40Val,true);
  EndFormat;
  return;
end;

procedure PrintContract_Detailed(record RcVc RepSpec,Integer testdate)
begin
  record HRMCOVc HRMCOr;
  record CUVc CUEr;
  Boolean found,testf;

  StartFormat(10);
  EndFormat;
  StartFormat(15);
   OutString(15,0,USetStr(19233),false);
   if (testdate==0) then begin
     OutString(80,0,USetStr(19234),false);
   end else begin
     OutString(80,0,USetStr(19234),false);
   end;
   OutString(130,0,USetStr(19235),false);
   OutString(250,0,USetStr(19236),false);
   OutString(350,0,USetStr(19237),false);
   OutString(400,0,USetStr(19238),false);
   OutString(450,0,USetStr(19239),false);
  EndFormat;
  Gray_Divider(15,1);
  ResetLoop(HRMCOr);
  found = true;
  while (LoopKey("ActClass",HRMCOr,1,found)) begin
    if (found) then begin
      testf = TestSelection_HRMCOVc(HRMCOr,testdate,RepSpec);
      if (testf) then begin
        CUEr.Code = HRMCOr.Employee;
        ReadFirstMain(CUEr,1,true);
        StartFormat(15);
         OutLongInt(15,"DblHRMCOVc",HRMCOr.SerNr,false);
         OutDate(80,0,HRMCOr.StartDate,false);
         OutString(130,0,HRMCOr.Name,false);
         OutString(250,0,HRMCOr.JobTitle,false);
         OutString(350,0,HRMCOr.DepCode,false);
         OutString(400,0,USetStr(19240+CUEr.Gender),false);
         OutString(450,0,CUEr.Ethnicity,false);
        EndFormat;
      end;
    end;
  end;
  Gray_Divider(15,1);
  return;
end;

procedure PrintNewHires_Gender(record RcVc RepSpec)
begin
  record HRMCOVc HRMCOr;
  record HRMCOClassVc HRMCOCr;
  Boolean found,testf;
  vector val vcount;
  vector val vtotcount;
  record CUVc CUEr;
  val tot;
  
  StartFormat(15);
   OutString(0,0,USetStr(19228),false);
   OutString(2,0,USetStr(19229),true);
   OutString(3,0,USetStr(19230),true);
   OutString(4,0,USetStr(19231),true);
   OutString(5,0,USetStr(19232),true);
  EndFormat;
  Gray_Divider(0,1);
  found = true;
  while (LoopKey("ActClass",HRMCOr,1,found)) begin
    if (found) then begin
      vcount[HRMCOr.Class & ":" & "TOTAL"] = vcount[HRMCOr.Class & ":" & "TOTAL"] + 1;
      testf = TestSelection_HRMCOVc(HRMCOr,0,RepSpec);
      if (testf) then begin
        CUEr.Code = HRMCOr.Employee;
        ReadFirstMain(CUEr,1,true);
        switch (CUEr.Gender) begin
          case 0:
            vcount[HRMCOr.Class & ":" & "MALE"] = vcount[HRMCOr.Class & ":" & "MALE"] + 1;
          case 1:
            vcount[HRMCOr.Class & ":" & "FEMALE"] = vcount[HRMCOr.Class & ":" & "FEMALE"] + 1;
        end;
      end;
    end;
  end;
  PrintClassData_Gender(vcount);
  return;
end;

procedure PrintEtnicityData(Integer strid,vector val vcount)
begin
  record EthnicityBlock Ethnicityb;
  row EthnicityBlock Ethnicitybrw;
  Integer i,rwcnt;
  record HRMCOClassVc HRMCOCr;
  Boolean found;
  vector val vtotcount;
  val hcnt,tot,tmp;
  Integer mul;
  
  BlockLoad(Ethnicityb);
  rwcnt = MatRowCnt(Ethnicityb);
  mul = 220/rwcnt;
  StartFormat(15);
   OutString(0,0,USetStr(strid),false);
   for (i=0;i<rwcnt;i=i+1) begin
     MatRowGet(Ethnicityb,i,Ethnicitybrw);
     OutString(220+i*mul,0,Ethnicitybrw.Ethnicity,true);
   end;
   OutString(440,0,USetStr(19231),true);
   OutString(1,0,USetStr(19232),true);
  EndFormat;
  Gray_Divider(0,1);
  

  vtotcount[""] = vtotcount[""] + vcount["" & ":" & ""];                 
  tot = tot + vcount["" & ":" & ""];
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Ethnicityb,i,Ethnicitybrw);
    vtotcount[Ethnicitybrw.Ethnicity] = vtotcount[Ethnicitybrw.Ethnicity] + vcount["" & ":" & Ethnicitybrw.Ethnicity];                 
    tot = tot + vcount["" & ":" & Ethnicitybrw.Ethnicity];
  end;
  hcnt = hcnt + vcount["" & ":" & "TOTAL"];
  
  found = true;
  while (LoopMain(HRMCOCr,1,found)) begin
    if (found) then begin
      tmp = 0;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Ethnicityb,i,Ethnicitybrw);
        tmp = tmp + vcount[HRMCOCr.Code & ":" & Ethnicitybrw.Ethnicity];
      end;
      if (tmp!=0) then begin
        tot = blankval;
        StartFormat(15);
         OutString(0,0,HRMCOCr.Code,false);
         OutString(50,0,HRMCOCr.Name,false);
         for (i=0;i<rwcnt;i=i+1) begin
           MatRowGet(Ethnicityb,i,Ethnicitybrw);
           OutVal(220+i*mul,0,vcount[HRMCOCr.Code & ":" & Ethnicitybrw.Ethnicity],M40Val,true);
           vtotcount[Ethnicitybrw.Ethnicity] = vtotcount[Ethnicitybrw.Ethnicity] + vcount[HRMCOCr.Code & ":" & Ethnicitybrw.Ethnicity];                 
           tot = tot + vcount[HRMCOCr.Code & ":" & Ethnicitybrw.Ethnicity];
         end;
         OutVal(440,0,tot,M40Val,true);
         OutVal(1,0,vcount[HRMCOCr.Code & ":" & "TOTAL"],M40Val,true);
         hcnt = hcnt + vcount[HRMCOCr.Code & ":" & "TOTAL"];
       end;
     end;  
  end;
  tot = blankval;
  EndFormat;
  Gray_Divider(0,1);
  StartFormat(15);
   OutString(0,0,USetStr(19231),false);
   for (i=0;i<rwcnt;i=i+1) begin
     MatRowGet(Ethnicityb,i,Ethnicitybrw);
     OutVal(220+i*mul,0,vtotcount[Ethnicitybrw.Ethnicity],M40Val,true);
     tot = tot + vtotcount[Ethnicitybrw.Ethnicity];
   end;
   OutVal(440,0,tot,M40Val,true);
   OutVal(1,0,hcnt,M40Val,true);
  EndFormat;
  return;
end;

procedure PrintNewHires_Ethnicity(record RcVc RepSpec)
begin
  record HRMCOVc HRMCOr;
  record HRMCOClassVc HRMCOCr;
  Boolean found,testf;
  vector val vcount;
  vector val vtotcount;
  record CUVc CUEr;
  val tot;
  
  found = true;
  while (LoopKey("ActClass",HRMCOr,1,found)) begin
    if (found) then begin
      vcount[HRMCOr.Class & ":" & "TOTAL"] = vcount[HRMCOr.Class & ":" & "TOTAL"] + 1;
      testf = TestSelection_HRMCOVc(HRMCOr,0,RepSpec);
      if (testf) then begin
        CUEr.Code = HRMCOr.Employee;
        ReadFirstMain(CUEr,1,true);
        vcount[HRMCOr.Class & ":" & CUEr.Ethnicity] = vcount[HRMCOr.Class & ":" & CUEr.Ethnicity] + 1;
      end;
    end;
  end;
  PrintEtnicityData(19228,vcount);
  return;
end;

procedure PrintDepartmentData(Integer Media,Integer strid,vector val vcount)
begin
  record DepVc Depr;
  Integer i,rwcnt;
  record HRMCOClassVc HRMCOCr;
  Boolean found;
  vector val vtotcount;
  val tot,tmp,hcnt;
  Integer mul;
  Array string 255 adepcode;

  found = true;
  while (LoopMain(Depr,1,found)) begin
    if (found) then begin
      adepcode[rwcnt] = Depr.Code;
      rwcnt = rwcnt + 1;
    end;
  end;    
  switch (Media) begin
    case mtFile:
    case mtExcel:
    otherwise
      if (rwcnt>9) then begin
        goto LPrintDepartmentData;
      end;
  end;
  
  mul = 230/rwcnt;
  StartFormat(15);
   OutString(0,0,USetStr(strid),false);
   for (i=0;i<rwcnt;i=i+1) begin
     OutString(220+i*mul,0,adepcode[i],true);
   end;
   OutString(440,0,USetStr(19231),true);
   OutString(1,0,USetStr(19232),true);
  EndFormat;
  Gray_Divider(0,1);
  for (i=0;i<rwcnt;i=i+1) begin
    vtotcount[adepcode[i]] = vtotcount[adepcode[i]] + vcount["" & ":" & adepcode[i]];                 
  end;
  tot = tot + vcount["" & ":" & "TOTAL"];

  found = true;
  while (LoopMain(HRMCOCr,1,found)) begin
    if (found) then begin
      tmp = 0;
      for (i=0;i<rwcnt;i=i+1) begin
        tmp = tmp + vcount[HRMCOCr.Code & ":" & adepcode[i]];
      end;      
      if (tmp!=0) then begin
        tot = blankval;
        StartFormat(15);
         OutString(0,0,HRMCOCr.Code,false);
         OutString(50,0,HRMCOCr.Name,false);
         for (i=0;i<rwcnt;i=i+1) begin
           OutVal(220+i*mul,0,vcount[HRMCOCr.Code & ":" & adepcode[i]],M40Val,true);
           vtotcount[adepcode[i]] = vtotcount[adepcode[i]] + vcount[HRMCOCr.Code & ":" & adepcode[i]];                 
           tot = tot + vcount[HRMCOCr.Code & ":" & adepcode[i]];
         end;
         OutVal(440,0,tot,M40Val,true);
         OutVal(1,0,vcount[HRMCOCr.Code & ":" & "TOTAL"],M40Val,true);
         hcnt = hcnt + vcount[HRMCOCr.Code & ":" & "TOTAL"];
       end;
     end;  
  end;
  EndFormat;
  tot = blankval;
  Gray_Divider(0,1);
  StartFormat(15);
   OutString(0,0,USetStr(19231),false);
   for (i=0;i<rwcnt;i=i+1) begin
     OutVal(220+i*mul,0,vtotcount[adepcode[i]],M40Val,true);
     tot = tot + vtotcount[adepcode[i]];
   end;
   OutVal(440,0,tot,M40Val,true);
   OutVal(1,0,hcnt,M40Val,true);
  EndFormat;
LPrintDepartmentData:;  
  return;
end;

procedure PrintNewHires_Department(record RcVc RepSpec)
begin
  record HRMCOVc HRMCOr;
  record HRMCOClassVc HRMCOCr;
  Boolean found,testf;
  vector val vcount;
  vector val vtotcount;
  record CUVc CUEr;
  val tot;
  
  found = true;
  while (LoopKey("ActClass",HRMCOr,1,found)) begin
    if (found) then begin
      vcount[HRMCOr.Class & ":" & "TOTAL"] = vcount[HRMCOr.Class & ":" & "TOTAL"] + 1;
      testf = TestSelection_HRMCOVc(HRMCOr,0,RepSpec);
      if (testf) then begin
        vcount[HRMCOr.Class & ":" & HRMCOr.DepCode] = vcount[HRMCOr.Class & ":" & HRMCOr.DepCode] + 1;
      end;
    end;
  end;
  PrintDepartmentData(RepSpec.Media,19228,vcount);
  return;
end;

procedure PrintNewHires(record RcVc RepSpec)
begin
  if (RepSpec.flags[1]==0) then begin goto LPrintNewHires; end;
  switch (RepSpec.flags[0]) begin
    case 0:
      PrintNewHires_Department(RepSpec);
    case 1:
      PrintNewHires_Gender(RepSpec);
    case 2:
      PrintNewHires_Ethnicity(RepSpec);
  end;
  if (RepSpec.ArtMode!=0) then begin
    PrintContract_Detailed(RepSpec,0);
  end;
  StartFormat(15);
  EndFormat;
LPrintNewHires:;  
  return;
end;

procedure PrintJobChanges_Gender(record RcVc RepSpec)
begin
  record HRMCOChangeVc HRMCOChanger;
  record HRMCOClassVc HRMCOCr;
  record HRMCOVc HRMCOr;
  Boolean found,testf;
  vector val vcount;
  vector val vtotcount;
  record CUVc CUEr;
  val tot;
  
  StartFormat(15);
   OutString(0,0,USetStr(19225),false);
   OutString(2,0,USetStr(19229),true);
   OutString(3,0,USetStr(19230),true);
   OutString(4,0,USetStr(19231),true);
   OutString(5,0,USetStr(19232),true);
  EndFormat;
  Gray_Divider(0,1);
  found = true;
  while (LoopKey("ActClass",HRMCOr,1,found)) begin
    if (found) then begin
      vcount[HRMCOr.Class & ":" & "TOTAL"] = vcount[HRMCOr.Class & ":" & "TOTAL"] + 1;
    end;
  end;

  found = true;
  while (LoopKey("ActClass",HRMCOChanger,1,found)) begin
    if (found) then begin
      testf = TestSelection_HRMCOChangeVc(HRMCOChanger,RepSpec);
      if (testf) then begin
        CUEr.Code = HRMCOChanger.Employee;
        ReadFirstMain(CUEr,1,true);
        switch (CUEr.Gender) begin
          case 0:
            vcount[HRMCOChanger.Class & ":" & "MALE"] = vcount[HRMCOChanger.Class & ":" & "MALE"] + 1;
          case 1:
            vcount[HRMCOChanger.Class & ":" & "FEMALE"] = vcount[HRMCOChanger.Class & ":" & "FEMALE"] + 1;
        end;
      end;
    end;
  end;
  PrintClassData_Gender(vcount);
  return;
end;

procedure PrintJobChanges_Ethnicity(record RcVc RepSpec)
begin
  record HRMCOChangeVc HRMCOChanger;
  record HRMCOClassVc HRMCOCr;
  record HRMCOVc HRMCOr;
  Boolean found,testf;
  vector val vcount;
  vector val vtotcount;
  record CUVc CUEr;
  val tot;
  
  found = true;
  while (LoopKey("ActClass",HRMCOr,1,found)) begin
    if (found) then begin
      vcount[HRMCOr.Class & ":" & "TOTAL"] = vcount[HRMCOr.Class & ":" & "TOTAL"] + 1;
    end;
  end;

  found = true;
  while (LoopKey("ActClass",HRMCOChanger,1,found)) begin
    if (found) then begin
      testf = TestSelection_HRMCOChangeVc(HRMCOChanger,RepSpec);
      if (testf) then begin
        CUEr.Code = HRMCOChanger.Employee;
        ReadFirstMain(CUEr,1,true);
        vcount[HRMCOChanger.Class & ":" & CUEr.Ethnicity] = vcount[HRMCOr.Class & ":" & CUEr.Ethnicity] + 1;
      end;
    end;
  end;
  PrintEtnicityData(19225,vcount);
  return;
end;

procedure PrintJobChanges_Department(record RcVc RepSpec)
begin
  record HRMCOChangeVc HRMCOChanger;
  record HRMCOClassVc HRMCOCr;
  record HRMCOVc HRMCOr;
  Boolean found,testf;
  vector val vcount;
  vector val vtotcount;
  val tot;
  
  found = true;
  while (LoopKey("ActClass",HRMCOr,1,found)) begin
    if (found) then begin
      vcount[HRMCOr.Class & ":" & "TOTAL"] = vcount[HRMCOr.Class & ":" & "TOTAL"] + 1;
    end;
  end;

  found = true;
  while (LoopKey("ActClass",HRMCOChanger,1,found)) begin
    if (found) then begin
      testf = TestSelection_HRMCOChangeVc(HRMCOChanger,RepSpec);
      if (testf) then begin
        vcount[HRMCOChanger.Class & ":" & HRMCOChanger.DepCode] = vcount[HRMCOr.Class & ":" & HRMCOChanger.DepCode] + 1;
      end;
    end;
  end;
  PrintDepartmentData(RepSpec.Media,19225,vcount);
  return;
end;

procedure PrintJobChanges_Detailed(record RcVc RepSpec)
begin
  record HRMCOChangeVc HRMCOChanger;
  record CUVc CUEr;
  Boolean found,testf;

  StartFormat(10);
  EndFormat;
  StartFormat(15);
   OutString(15,0,USetStr(19242),false);
   OutString(80,0,USetStr(19245),false);
   OutString(130,0,USetStr(19235),false);
   OutString(250,0,USetStr(19236),false);
   OutString(350,0,USetStr(19237),false);
   OutString(400,0,USetStr(19238),false);
   OutString(450,0,USetStr(19239),false);
  EndFormat;
  Gray_Divider(15,1);
  ResetLoop(HRMCOChanger);
  found = true;
  while (LoopKey("ActClass",HRMCOChanger,1,found)) begin
    if (found) then begin
      testf = TestSelection_HRMCOChangeVc(HRMCOChanger,RepSpec);
      if (testf) then begin
        CUEr.Code = HRMCOChanger.Employee;
        ReadFirstMain(CUEr,1,true);
        StartFormat(15);
         OutLongInt(15,"DblHRMCOChangeVc",HRMCOChanger.SerNr,false);
         OutDate(80,0,HRMCOChanger.TransDate,false);
         OutString(130,0,HRMCOChanger.Name,false);
         OutString(250,0,HRMCOChanger.JobTitle,false);
         OutString(350,0,HRMCOChanger.DepCode,false);
         OutString(400,0,USetStr(19240+CUEr.Gender),false);
         OutString(450,0,CUEr.Ethnicity,false);
        EndFormat;
      end;
    end;
  end;
  Gray_Divider(15,1);
  return;
end;

procedure PrintJobChanges(record RcVc RepSpec)
begin
  if (RepSpec.flags[2]==0) then begin goto LPrintJobChanges; end;
  switch (RepSpec.flags[0]) begin
    case 0:
      PrintJobChanges_Department(RepSpec);
    case 1:
      PrintJobChanges_Gender(RepSpec);
    case 2:
      PrintJobChanges_Ethnicity(RepSpec);
  end;
  if (RepSpec.ArtMode!=0) then begin
    PrintJobChanges_Detailed(RepSpec);
  end;
  StartFormat(15);
  EndFormat;
LPrintJobChanges:;  
  return;
end;

procedure PrintTerminationsLine_Gender(Integer reason,vector val vcount)
begin
  val tot;
  
  tot = vcount[reason & ":" & "MALE"] + vcount[reason & ":" & "FEMALE"];
  if (tot!=0) then begin
    StartFormat(15);
     OutString(0,0,StringFromSet(470,reason),false);
     OutVal(2,0,vcount[reason & ":" & "MALE"],M40Val,true);
     OutVal(3,0,vcount[reason & ":" & "FEMALE"],M40Val,true);
     OutVal(4,0,tot,M40Val,true);
    EndFormat;
  end;
  return;
end;

procedure PrintTerminations_Gender(record RcVc RepSpec)
begin
  record HRMCOVc HRMCOr;
  record HRMCOClassVc HRMCOCr;
  Boolean found,testf;
  vector val vcount;
  vector val vtotcount;
  record CUVc CUEr;
  val tot;
  
  StartFormat(15);
   OutString(0,0,USetStr(19226),false);
   OutString(2,0,USetStr(19229),true);
   OutString(3,0,USetStr(19230),true);
   OutString(4,0,USetStr(19231),true);
  EndFormat;
  Gray_Divider(0,1);
  found = true;
  while (LoopKey("Reason",HRMCOr,1,found)) begin
    if (found) then begin
      testf = TestSelection_HRMCOVc(HRMCOr,1,RepSpec);
      if (testf) then begin
        CUEr.Code = HRMCOr.Employee;
        ReadFirstMain(CUEr,1,true);
        switch (CUEr.Gender) begin
          case 0:
            vcount[HRMCOr.Reason & ":" & "MALE"] = vcount[HRMCOr.Reason & ":" & "MALE"] + 1;
            vtotcount["MALE"] = vtotcount["MALE"] + 1;
          case 1:
            vcount[HRMCOr.Reason & ":" & "FEMALE"] = vcount[HRMCOr.Reason & ":" & "FEMALE"] + 1;
            vtotcount["FEMALE"] = vtotcount["FEMALE"] + 1;
        end;
      end;
    end;
  end;

  PrintTerminationsLine_Gender(kHRMCOReasonResignation,vcount);
  PrintTerminationsLine_Gender(kHRMCOReasonNonRenewal,vcount);
  PrintTerminationsLine_Gender(kHRMCOReasonDismissalOperational,vcount);
  PrintTerminationsLine_Gender(kHRMCOReasonDismissalMisconduct,vcount);
  PrintTerminationsLine_Gender(kHRMCOReasonDismissalIncapacity,vcount);
  PrintTerminationsLine_Gender(kHRMCOReasonDismissalRetirement,vcount);
  PrintTerminationsLine_Gender(kHRMCOReasonDismissalDeath,vcount);
  Gray_Divider(0,1);
  
  tot = vtotcount["MALE"] + vtotcount["FEMALE"];
  StartFormat(15);
   OutString(0,0,USetStr(19231),false);
   OutVal(2,0,vtotcount["MALE"],M40Val,true);
   OutVal(3,0,vtotcount["FEMALE"],M40Val,true);
   OutVal(4,0,tot,M40Val,true);
  EndFormat;
  return;
end;

procedure PrintTerminationsLine_Ethnicity(Integer reason,vector val vcount,record EthnicityBlock Ethnicityb)
begin
  val tot;
  row EthnicityBlock Ethnicitybrw;
  Integer i,rwcnt;
  Integer mul;
  
  rwcnt = MatRowCnt(Ethnicityb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Ethnicityb,i,Ethnicitybrw);
    tot = tot + vcount[reason & ":" & Ethnicitybrw.Ethnicity];
  end;

  if (tot!=0) then begin
    mul = 220/rwcnt;
    StartFormat(15);
     OutString(0,0,StringFromSet(470,reason),false);
     for (i=0;i<rwcnt;i=i+1) begin
       MatRowGet(Ethnicityb,i,Ethnicitybrw);
       OutVal(220+i*mul,0,vcount[reason & ":" & Ethnicitybrw.Ethnicity],M40Val,true);
     end;
     OutVal(1,0,tot,M40Val,true);
    EndFormat;
  end;

  return;
end;

procedure PrintTerminations_Ethnicity(record RcVc RepSpec)
begin
  record HRMCOVc HRMCOr;
  record HRMCOClassVc HRMCOCr;
  Boolean found,testf;
  vector val vcount;
  vector val vtotcount;
  record CUVc CUEr;
  val tot;
  record EthnicityBlock Ethnicityb;
  row EthnicityBlock Ethnicitybrw;
  Integer i,rwcnt;
  Integer mul;
  
  BlockLoad(Ethnicityb);
  found = true;
  while (LoopKey("Reason",HRMCOr,1,found)) begin
    if (found) then begin
      testf = TestSelection_HRMCOVc(HRMCOr,1,RepSpec);
      if (testf) then begin
        CUEr.Code = HRMCOr.Employee;
        ReadFirstMain(CUEr,1,true);
        vcount[HRMCOr.Reason & ":" & CUEr.Ethnicity] = vcount[HRMCOr.Reason & ":" & CUEr.Ethnicity] + 1;
        vtotcount[CUEr.Ethnicity] = vtotcount[CUEr.Ethnicity] + 1;
      end;
    end;
  end;

  rwcnt = MatRowCnt(Ethnicityb);
  mul = 220/rwcnt;
  StartFormat(15);
   OutString(0,0,USetStr(19226),false);
   for (i=0;i<rwcnt;i=i+1) begin
     MatRowGet(Ethnicityb,i,Ethnicitybrw);
     OutString(220+i*mul,0,Ethnicitybrw.Ethnicity,true);
   end;
   OutString(1,0,USetStr(19231),true);
  EndFormat;
  Gray_Divider(0,1);

  PrintTerminationsLine_Ethnicity(kHRMCOReasonResignation,vcount,Ethnicityb);
  PrintTerminationsLine_Ethnicity(kHRMCOReasonNonRenewal,vcount,Ethnicityb);
  PrintTerminationsLine_Ethnicity(kHRMCOReasonDismissalOperational,vcount,Ethnicityb);
  PrintTerminationsLine_Ethnicity(kHRMCOReasonDismissalMisconduct,vcount,Ethnicityb);
  PrintTerminationsLine_Ethnicity(kHRMCOReasonDismissalIncapacity,vcount,Ethnicityb);
  PrintTerminationsLine_Ethnicity(kHRMCOReasonDismissalRetirement,vcount,Ethnicityb);
  PrintTerminationsLine_Ethnicity(kHRMCOReasonDismissalDeath,vcount,Ethnicityb);
  Gray_Divider(0,1);
  
  StartFormat(15);
   OutString(0,0,USetStr(19226),false);
   for (i=0;i<rwcnt;i=i+1) begin
     MatRowGet(Ethnicityb,i,Ethnicitybrw);
     OutVal(220+i*mul,0,vtotcount[Ethnicitybrw.Ethnicity],M40Val,true);
     tot = tot + vtotcount[Ethnicitybrw.Ethnicity];
   end;
   OutVal(1,0,tot,M40Val,true);
  EndFormat;

  return;
end;

procedure PrintTerminationsLine_Ethnicity(Integer reason,vector val vcount,record EthnicityBlock Ethnicityb)
begin
  val tot;
  row EthnicityBlock Ethnicitybrw;
  Integer i,rwcnt;
  Integer mul;
  
  rwcnt = MatRowCnt(Ethnicityb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Ethnicityb,i,Ethnicitybrw);
    tot = tot + vcount[reason & ":" & Ethnicitybrw.Ethnicity];
  end;

  if (tot!=0) then begin
    mul = 220/rwcnt;
    StartFormat(15);
     OutString(0,0,StringFromSet(470,reason),false);
     for (i=0;i<rwcnt;i=i+1) begin
       MatRowGet(Ethnicityb,i,Ethnicitybrw);
       OutVal(220+i*mul,0,vcount[reason & ":" & Ethnicitybrw.Ethnicity],M40Val,true);
     end;
     OutVal(1,0,tot,M40Val,true);
    EndFormat;
  end;

  return;
end;

procedure PrintTerminationsLine_Department(Integer reason,vector val vcount,Array string adepcode,Integer rwcnt)
begin
  val tot,hcnt;
  Integer i;
  Integer mul;
  
  for (i=0;i<rwcnt;i=i+1) begin
    hcnt = hcnt + vcount[reason & ":" & adepcode[i]];
  end;

  if (hcnt!=0) then begin
    mul = 230/rwcnt;
    StartFormat(15);
     OutString(0,0,StringFromSet(470,reason),false);
     for (i=0;i<rwcnt;i=i+1) begin
       OutVal(220+i*mul,0,vcount[reason & ":" & adepcode[i]],M40Val,true);
//       tot = tot + vcount[reason & ":" & adepcode[i]];
     end;
//     OutVal(440,0,tot,M40Val,true);
     OutVal(1,0,hcnt,M40Val,true);
    EndFormat;
  end;

  return;
end;

procedure PrintTerminations_Department(record RcVc RepSpec)
begin
  record HRMCOVc HRMCOr;
  record HRMCOClassVc HRMCOCr;
  Boolean found,testf;
  vector val vcount;
  vector val vtotcount;
  val tot;
  Integer i,rwcnt;
  Integer mul;
  record DepVc Depr;
  Array string 255 adepcode;

  found = true;
  while (LoopMain(Depr,1,found)) begin
    if (found) then begin
      adepcode[rwcnt] = Depr.Code;
      rwcnt = rwcnt + 1;
    end;
  end;    
  switch (RepSpec.Media) begin
    case mtFile:
    case mtExcel:
    otherwise
      if (rwcnt>9) then begin
        goto LPrintTerminations_Department;
      end;
  end;

  found = true;
  while (LoopKey("Reason",HRMCOr,1,found)) begin
    if (found) then begin
      testf = TestSelection_HRMCOVc(HRMCOr,1,RepSpec);
      if (testf) then begin
        vcount[HRMCOr.Reason & ":" & HRMCOr.DepCode] = vcount[HRMCOr.Reason & ":" & HRMCOr.DepCode] + 1;
        vtotcount[HRMCOr.DepCode] = vtotcount[HRMCOr.DepCode] + 1;
      end;
    end;
  end;

  mul = 230/rwcnt;
  StartFormat(15);
   OutString(0,0,USetStr(19226),false);
   for (i=0;i<rwcnt;i=i+1) begin
     OutString(220+i*mul,0,adepcode[i],true);
   end;
   OutString(1,0,USetStr(19231),true);
  EndFormat;
  Gray_Divider(0,1);

  PrintTerminationsLine_Department(kHRMCOReasonResignation,vcount,adepcode,rwcnt);
  PrintTerminationsLine_Department(kHRMCOReasonNonRenewal,vcount,adepcode,rwcnt);
  PrintTerminationsLine_Department(kHRMCOReasonDismissalOperational,vcount,adepcode,rwcnt);
  PrintTerminationsLine_Department(kHRMCOReasonDismissalMisconduct,vcount,adepcode,rwcnt);
  PrintTerminationsLine_Department(kHRMCOReasonDismissalIncapacity,vcount,adepcode,rwcnt);
  PrintTerminationsLine_Department(kHRMCOReasonDismissalRetirement,vcount,adepcode,rwcnt);
  PrintTerminationsLine_Department(kHRMCOReasonDismissalDeath,vcount,adepcode,rwcnt);

  Gray_Divider(0,1);
  
  StartFormat(15);
   OutString(0,0,USetStr(19226),false);
   for (i=0;i<rwcnt;i=i+1) begin
     OutVal(220+i*mul,0,vtotcount[adepcode[i]],M40Val,true);
     tot = tot + vtotcount[adepcode[i]];
   end;
   OutVal(1,0,tot,M40Val,true);
  EndFormat;
LPrintTerminations_Department:;
  return;
end;

procedure PrintTerminations(record RcVc RepSpec)
begin
  if (RepSpec.flags[3]==0) then begin goto LPrintTerminations; end;
  switch (RepSpec.flags[0]) begin
    case 0:
      PrintTerminations_Department(RepSpec);
    case 1:
      PrintTerminations_Gender(RepSpec);
    case 2:
      PrintTerminations_Ethnicity(RepSpec);
  end;
  if (RepSpec.ArtMode!=0) then begin
    PrintContract_Detailed(RepSpec,1);
  end;
  StartFormat(15);
  EndFormat;
LPrintTerminations:;  
  return;
end;

procedure PrintTraining_Gender(record RcVc RepSpec)
begin
  record CourseEventVc CEr;
  record HRMCOClassVc HRMCOCr;
  record HRMCOVc HRMCOr;
  Boolean found,testf,foundce;
  vector val vcount;
  vector val vtotcount;
  record CUVc CUEr;
  val tot;
  string 255 keystr;
  
  StartFormat(15);
   OutString(0,0,USetStr(19227),false);
   OutString(2,0,USetStr(19229),true);
   OutString(3,0,USetStr(19230),true);
   OutString(4,0,USetStr(19231),true);
   OutString(5,0,USetStr(19232),true);
  EndFormat;

  Gray_Divider(0,1);
  found = true;
  while (LoopKey("ActClass",HRMCOr,1,found)) begin
    if (found) then begin
      vcount[HRMCOr.Class & ":" & "TOTAL"] = vcount[HRMCOr.Class & ":" & "TOTAL"] + 1;
      testf = TestSelection_HRMCOVc(HRMCOr,2,RepSpec);
      if (testf) then begin
        testf = false;
        
        ResetLoop(CEr);
        keystr = "ContactCode:" & HRMCOr.Employee; 
        foundce = true;
        CEr.TransDate = RepSpec.sStartDate;
        while (LoopKey(keystr,CEr,1,foundce)) begin
          if (CEr.TransDate>RepSpec.sEndDate) then begin
            foundce = false;
          end;
          if (foundce) then begin
            testf = true;
            foundce = false;
          end;
        end;
      end;
            
      if (testf) then begin      
        CUEr.Code = HRMCOr.Employee;
        ReadFirstMain(CUEr,1,true);
        switch (CUEr.Gender) begin
          case 0:
            vcount[HRMCOr.Class & ":" & "MALE"] = vcount[HRMCOr.Class & ":" & "MALE"] + 1;
          case 1:
            vcount[HRMCOr.Class & ":" & "FEMALE"] = vcount[HRMCOr.Class & ":" & "FEMALE"] + 1;
        end;
      end;
    end;
  end;
  PrintClassData_Gender(vcount);
  return;
end;

procedure PrintTraining_Ethnicity(record RcVc RepSpec)
begin
  record CourseEventVc CEr;
  record HRMCOClassVc HRMCOCr;
  record HRMCOVc HRMCOr;
  Boolean found,testf,foundce;
  vector val vcount;
  vector val vtotcount;
  record CUVc CUEr;
  val tot;
  string 255 keystr;
  
  found = true;
  while (LoopKey("ActClass",HRMCOr,1,found)) begin
    if (found) then begin
      vcount[HRMCOr.Class & ":" & "TOTAL"] = vcount[HRMCOr.Class & ":" & "TOTAL"] + 1;
      testf = TestSelection_HRMCOVc(HRMCOr,2,RepSpec);
      if (testf) then begin
        testf = false;
        
        ResetLoop(CEr);
        keystr = "ContactCode:" & HRMCOr.Employee; 
        foundce = true;
        CEr.TransDate = RepSpec.sStartDate;
        while (LoopKey(keystr,CEr,1,foundce)) begin
          if (CEr.TransDate>RepSpec.sEndDate) then begin
            foundce = false;
          end;
          if (foundce) then begin
            testf = true;
            foundce = false;
          end;
        end;
      end;
            
      if (testf) then begin      
        CUEr.Code = HRMCOr.Employee;
        ReadFirstMain(CUEr,1,true);
        vcount[HRMCOr.Class & ":" & CUEr.Ethnicity] = vcount[HRMCOr.Class & ":" & CUEr.Ethnicity] + 1;
      end;
    end;
  end;
  PrintEtnicityData(19227,vcount);
  return;
end;

procedure PrintTraining_Department(record RcVc RepSpec)
begin
  record CourseEventVc CEr;
  record HRMCOClassVc HRMCOCr;
  record HRMCOVc HRMCOr;
  Boolean found,testf,foundce;
  vector val vcount;
  vector val vtotcount;
  val tot;
  string 255 keystr;
  
  found = true;
  while (LoopKey("ActClass",HRMCOr,1,found)) begin
    if (found) then begin
      vcount[HRMCOr.Class & ":" & "TOTAL"] = vcount[HRMCOr.Class & ":" & "TOTAL"] + 1;
      testf = TestSelection_HRMCOVc(HRMCOr,2,RepSpec);
      if (testf) then begin
        testf = false;
        
        ResetLoop(CEr);
        keystr = "ContactCode:" & HRMCOr.Employee; 
        foundce = true;
        CEr.TransDate = RepSpec.sStartDate;
        while (LoopKey(keystr,CEr,1,foundce)) begin
          if (CEr.TransDate>RepSpec.sEndDate) then begin
            foundce = false;
          end;
          if (foundce) then begin
            testf = true;
            foundce = false;
          end;
        end;
      end;
            
      if (testf) then begin      
        vcount[HRMCOr.Class & ":" & HRMCOr.DepCode] = vcount[HRMCOr.Class & ":" & HRMCOr.DepCode] + 1;
      end;
    end;
  end;
  PrintDepartmentData(RepSpec.Media,19227,vcount);
  return;
end;

procedure PrintTraining_Detailed(record RcVc RepSpec)
begin
  record CourseEventVc CEr;
  record HRMCOVc HRMCOr;
  record CUVc CUEr;
  Boolean found,foundce,testf;
  string 255 keystr;

  StartFormat(10);
  EndFormat;
  StartFormat(15);
   OutString(15,0,USetStr(19243),false);
   OutString(80,0,USetStr(19204),false);
   OutString(130,0,USetStr(19235),false);
   OutString(250,0,USetStr(19236),false);
   OutString(350,0,USetStr(19237),false);
   OutString(400,0,USetStr(19238),false);
   OutString(450,0,USetStr(19239),false);
  EndFormat;
  Gray_Divider(15,1);
  found = true;
  while (LoopKey("ActClass",HRMCOr,1,found)) begin
    if (found) then begin
      testf = TestSelection_HRMCOVc(HRMCOr,2,RepSpec);
      if (testf) then begin
        testf = false;
        
        ResetLoop(CEr);
        keystr = "ContactCode:" & HRMCOr.Employee; 
        foundce = true;
        CEr.TransDate = RepSpec.sStartDate;
        while (LoopKey(keystr,CEr,1,foundce)) begin
          if (CEr.TransDate>RepSpec.sEndDate) then begin
            foundce = false;
          end;
          if (foundce) then begin
            testf = true;
            goto LCourseEventFound;
          end;
        end;
      end;            
LCourseEventFound:;      
      if (testf) then begin      
        CUEr.Code = HRMCOr.Employee;
        ReadFirstMain(CUEr,1,true);
        StartFormat(15);
         OutLongInt(15,"DblCourseEventVc",CEr.SerNr,false);
         OutDate(80,0,CEr.TransDate,false);
         OutString(130,0,HRMCOr.Name,false);
         OutString(250,0,HRMCOr.JobTitle,false);
         OutString(350,0,HRMCOr.DepCode,false);
         OutString(400,0,USetStr(19240+CUEr.Gender),false);
         OutString(450,0,CUEr.Ethnicity,false);
        EndFormat;
      end;
    end;
  end;
  Gray_Divider(15,1);
  return;
end;

procedure PrintTraining(record RcVc RepSpec)
begin
  if (RepSpec.flags[4]==0) then begin goto LPrintTraining; end;
  switch (RepSpec.flags[0]) begin
    case 0:
      PrintTraining_Department(RepSpec);
    case 1:
      PrintTraining_Gender(RepSpec);
    case 2:
      PrintTraining_Ethnicity(RepSpec);
  end;
  if (RepSpec.ArtMode!=0) then begin
    PrintTraining_Detailed(RepSpec);
  end;
  StartFormat(15);
  EndFormat;
LPrintTraining:;  
  return;
end;

global
procedure HeadCountRn(record RcVc RepSpec)
begin
  StartReportJob(USetStr(19220));
   PrintHeader(RepSpec);
  EndHeader;
  SetRepCol(2,200);
  SetRepCol(3,260);
  SetRepCol(4,320);
  SetRepCol(5,380);
  
  PrintNewHires(RepSpec);
  PrintJobChanges(RepSpec);
  PrintTraining(RepSpec);
  PrintTerminations(RepSpec);
  
  EndJob;
  return;
end;