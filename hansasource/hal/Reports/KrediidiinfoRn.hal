external function string 255 RemoveStringFromString(string,string);
external function Boolean WrapAndPrint(Integer,string,Integer);
external procedure GetAreaFromFile(Area,string);
external procedure SendTextParameter(string,var Area);
external procedure SendFunctionVersion(string,string,var Area);
external updating function Boolean SendServiceRequest(string,Boolean,area,var Area);

/*
updating function Integer SendReqestToHTS(record CUVc CUr,Integer custtype,var xml reply)
begin
  Boolean res;
  Area a_req,a_reply;
  string 255 tstr,service;
  Integer send;
    
  if (blank(CUr.RegNr1)) then begin 
    send = -1; 
  end;  
  switch (custtype) begin
    case 0:  send = 1;
    case 1:  send = 2;
  end;
  if (send!=0) then begin
    SendFunctionVersion("50.2","",a_req);
    SendTextParameter(send,a_req);
    SendTextParameter(CurrentUser,a_req);
    SendTextParameter(CUr.RegNr1,a_req);
    switch (send) begin
      case 1: service = "KREDIIDIINFOCOMPANY";
      case 2: service = "KREDIIDIINFOPERSON";
    end;    
    res = SendServiceRequest(service,true,a_req,a_reply); 
    reply = ParseXMLArea(a_reply);
  end;
  SendReqestToHTS = send;
  return;
end;
*/

procedure SwedishCustomerData(xml xreply,Integer res,record CUVc CUr)
begin
  Array string 255 aFieldNames;
  Array string 255 aFieldValues;
  Integer i,acnt,Firmatecknarenr; 
  string 255 xkey,xkeyrow,tstr,Firmatecknare; 
  Area atmp;
  xml atmpxml;

  if (res==1) then begin
    xkey = "soap:Envelope/soap:Body/DataImportCompanyResponse/DataImportCompanyResult/FieldNames/";
    i = 0;  
    acnt = 0;
    while (XmlNodeExists(xreply,xkey & "string[" & i & "]")) begin
      xkeyrow = xkey & "string[" & i & "]";
      aFieldNames[acnt] = XmlGet(xreply,xkeyrow);
      if (aFieldNames[acnt]=="Firmatecknare") then begin
        Firmatecknarenr = acnt;
      end;
      acnt = acnt + 1;
      i = i+1;    
    end;

    xkey = "soap:Envelope/soap:Body/DataImportCompanyResponse/DataImportCompanyResult/FieldValues/";
    i = 0;  
    acnt = 0;
    while (XmlNodeExists(xreply,xkey & "string[" & i & "]")) begin
      xkeyrow = xkey & "string[" & i & "]";
      aFieldValues[acnt] = XmlGet(xreply,xkeyrow);
      if (acnt==Firmatecknarenr) then begin
        Firmatecknare = aFieldValues[acnt];
      end;
      acnt = acnt + 1;
      i = i+1;    
    end;
    AddTextToArea("<businesscheck>",atmp);
    for (i=0;i<acnt;i=i+1) begin
      if (aFieldNames[i]=="Firmatecknare") then begin
//        tstr = RemoveStringFromString(aFieldValues[i],chr(13));
//        tstr = RemoveStringFromString(aFieldValues[i],chr(10));
//        AddTextToArea("<" & aFieldNames[i]  & ">" & tstr & "</" & aFieldNames[i] & ">",atmp);  
      end else begin
        AddTextToArea("<" & aFieldNames[i]  & ">" & aFieldValues[i] & "</" & aFieldNames[i] & ">",atmp);  
      end;
    end;    
//  CreateFile("jj.txt");
//  CloseFile;
//  WriteAreaToFile(atmp,"jj.txt",0);
    
    AddTextToArea("</businesscheck>",atmp);

    atmpxml = ParseXMLArea(atmp);  

    StartFormat(15);
     OutString(0,0,CUr.RegNr1,false);
     OutString(2,0,CUr.VATNr,false);
    EndFOrmat;
    StartFormat(15);
//     OutString(0,0,CUr.Name,false);
     OutString(0,0,XmlGet(atmpxml,"businesscheck/Namn"),false);
    EndFOrmat;
    StartFormat(15);
//     OutString(0,0,CUr.InvAddr0,false);
     OutString(0,0,XmlGet(atmpxml,"businesscheck/Adress"),false);
    EndFOrmat;
    StartFormat(15);
//     OutString(0,0,CUr.InvAddr1,false);
    tstr = XmlGet(atmpxml,"businesscheck/Postnummer") & " " & XmlGet(atmpxml,"businesscheck/Postort");
     OutString(0,0,tstr,false);
    EndFOrmat;
    Gray_Divider(0,1);
    StartFormat(15);
    EndFormat;
    
    StartFormat(15);
     OutString(0,0,USetStr(16850),false);
    EndFOrmat;
    StartFormat(15);
     OutString(0,0,USetStr(16851),false);
     OutString(3,0,XmlGet(atmpxml,"businesscheck/Limit"),false);
    EndFOrmat;
    
    StartFormat(15);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(16852),false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(16853),false);
     OutString(2,0,XmlGet(atmpxml,"businesscheck/Status"),false);
     OutString(3,0,USetStr(16854),false);
     OutString(4,0,XmlGet(atmpxml,"businesscheck/Moms"),false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(16855),false);
     OutString(2,0,XmlGet(atmpxml,"businesscheck/Arbetsgivaravgifter"),false);
     OutString(3,0,USetStr(16856),false);
     OutString(4,0,XmlGet(atmpxml,"businesscheck/Aktiekapital"),false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(16857),false);
     OutString(2,0,XmlGet(atmpxml,"businesscheck/Fskatt"),false);
     OutString(3,0,USetStr(16858),false);
     OutString(4,0,XmlGet(atmpxml,"businesscheck/RegdatumNuvarandeFirma"),false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(16859),false);
     OutString(2,0,XmlGet(atmpxml,"businesscheck/VD"),false);
     OutString(3,0,USetStr(16860),false);
     OutString(4,0,XmlGet(atmpxml,"businesscheck/Koncern"),false);
    EndFormat;


    StartFormat(15);
    EndFOrmat;
    StartFormat(15);
     OutString(0,0,USetStr(16862),false);
     OutString(2,0,XmlGet(atmpxml,"businesscheck/Bokslutsperiod"),false);
    EndFOrmat;
    StartFormat(15);
     OutString(0,0,USetStr(16863),false);
     OutString(2,0,XmlGet(atmpxml,"businesscheck/AktiekapitalValuta"),false);
     OutString(3,0,USetStr(16864),false);
     OutString(4,0,XmlGet(atmpxml,"businesscheck/Omsattning"),false);
    EndFOrmat;
    StartFormat(15);
     OutString(0,0,USetStr(16865),false);
     OutString(2,0,XmlGet(atmpxml,"businesscheck/ResultatEfterFinansnetto"),false);
     OutString(3,0,USetStr(16866),false);
     OutString(4,0,XmlGet(atmpxml,"businesscheck/AretsResultat"),false);
    EndFOrmat;
    StartFormat(15);
     OutString(0,0,USetStr(16867),false);
     OutString(2,0,XmlGet(atmpxml,"businesscheck/Kassalikviditet"),false);
     OutString(3,0,USetStr(16868),false);
     OutString(4,0,XmlGet(atmpxml,"businesscheck/Soliditet"),false);
    EndFOrmat;
    StartFormat(15);
     OutString(0,0,USetStr(16877),false);
     OutString(2,0,XmlGet(atmpxml,"businesscheck/Rating"),false);
     OutString(3,0,USetStr(16878),false);
     OutString(4,0,XmlGet(atmpxml,"businesscheck/RatingText"),false);
    EndFOrmat;

    StartFormat(15);
    EndFOrmat;
    StartFormat(15);
     OutString(0,0,USetStr(16869),false);
     OutString(2,0,USetStr(16870),false);
     OutString(3,0,USetStr(16871),false);
     OutString(4,0,USetStr(16872),false);
    EndFOrmat;
    StartFormat(15);
     OutString(0,0,USetStr(16873),false);
     OutString(2,0,XmlGet(atmpxml,"businesscheck/AnsokningarAntal"),false);
     OutString(3,0,XmlGet(atmpxml,"businesscheck/AnsokningarSumma"),false);
     OutString(4,0,XmlGet(atmpxml,"businesscheck/SenasteAnsokningDatum"),false);
    EndFOrmat;
    StartFormat(15);
     OutString(0,0,USetStr(16874),false);
     OutString(2,0,XmlGet(atmpxml,"businesscheck/AnmarkningarAntal"),false);
     OutString(3,0,XmlGet(atmpxml,"businesscheck/AnmarkningarSumma"),false);
     OutString(4,0,XmlGet(atmpxml,"businesscheck/SenasteAnmarkningDatum"),false);
    EndFOrmat;

    StartFormat(15);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(16875),false);
     OutString(2,0,XmlGet(atmpxml,"businesscheck/SkuldsaldoSumma"),false);
     OutString(3,0,USetStr(16875),false);
     OutString(4,0,XmlGet(atmpxml,"businesscheck/UtmatningText"),false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(16861),false);
     Firmatecknare = ConvertStringFromCodePage("UTF-8",Firmatecknare);
     if (WrapAndPrint(2,Firmatecknare,100)) then begin
       EndFormat;
     end;

  end;    
  return;
end;

procedure EstonianCustomerData(xml reply,Integer res,record CUVc CUr)
begin
  string 255 tstr,score,errcode,errstr;
  LongInt i;
  LongInt acnt;
  Array Date asd;
  Array val asum,amaxsum;
  Boolean changedf;
  Date sd,ed;
  val sum,maxsum;

  if (res==1) then begin
    errcode = XmlGet(reply,"error/code");    
    errstr = XmlGet(reply,"error/desc"); 
    tstr = XmlGet(reply,"volgnevused/isik/nimi");
    score = XmlGet(reply,"volgnevused/skooring/skoor");
    if (blank(tstr)) and (blank(score)) then begin
      StartFormat(15);
       OutString(0,0,USetStr(20231),false);
       OutString(100,0,errcode,false);
       OutString(200,0,errstr,false);
      EndFormat;
      goto LEstonianCustomerData;
    end;
    StartFormat(15);
     OutString(0,0,tstr,false);
     OutString(80,0,CUr.RegNr1,false);     
     OutString(360,0,USetStr(15056),true);
     OutString(480,0,score,true);
    EndFormat;     
    StartFormat(15);
    EndFormat;        

    StartFormat(15);
     OutString(0,0,USetStr(15063),false);
    EndFormat;        
    StartFormat(15);
     OutString(0,0,USetStr(15064),false);
    EndFormat;        
    StartFormat(15);
     OutString(0,0,USetStr(15065),false);
    EndFormat;        
    StartFormat(15);
    EndFormat;        
    StartFormat(15);
     OutString(50,0,USetStr(15060),false);
     OutString(220,0,USetStr(15061),true);
     OutString(320,0,USetStr(15062),true);
     OutString(330,0,USetStr(15055),false);
    EndFormat;        
    Gray_Divider(0,1);
    i = 0;
    acnt = 0;   
    i = 0;
    while (XmlNodeExists(reply,"volgnevused/maksuamet/mh[" & i & "]")) begin
      tstr = XmlGet(reply,"volgnevused/maksuamet/mh[" & i & "]/seisuga");
      asd[acnt] = StringToDate(tstr);
      tstr = XmlGet(reply,"volgnevused/maksuamet/mh[" & i & "]/saldo");
      asum[acnt] = StringToVal(tstr,M4Val);
      tstr = XmlGet(reply,"volgnevused/maksuamet/mh[" & i & "]/viivis");
      amaxsum[acnt] = StringToVal(tstr,M4Val);
      i = i + 1;
      acnt = acnt + 1;
    end;    
    changedf = true;
    while (changedf) begin
      changedf = false;  
      for (i=0;i<acnt-1;i=i+1) begin
        if (asd[i]<asd[i+1]) then begin
          changedf = true;
          sd = asd[i+1];
          sum = asum[i+1];
          maxsum = amaxsum[i+1];
          asd[i+1] = asd[i];
          asum[i+1] = asum[i];
          amaxsum[i+1] = amaxsum[i];
          asd[i] = sd;
          asum[i] = sum;
          amaxsum[i] = maxsum;
        end;
      end;
    end;
/*this makes report look crappy*/    
    for (i=0;i<acnt;i=i+1) begin
      StartFormat(15);
       OutDate(50,0,asd[i],false);
       OutVal(220,0,asum[i],M4Val,true);
       OutVal(320,0,amaxsum[i],M4Val,true);
      EndFormat;        
    end;
/*    this makes it look bad as well
    for (i=0;i<50;i=i+1) begin
      StartFormat(15);
      OutString(50,0,"1",false);
      OutString(220,0,"2",false);
      OutString(320,0,"3",false);
      EndFormat;        
    end;
*/    
    Gray_Divider(0,1);

    StartFormat(15);
     OutString(0,0,USetStr(15069),false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(15070),false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(15071),false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(15072),false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(15073),false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(15074),false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(15075),false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(15076),false);
    EndFormat;    
    StartFormat(15);
     OutString(0,0,USetStr(15077),false);
    EndFormat;    
    StartFormat(15);
    EndFormat;                
    StartFormat(15);
     OutString(15,0,USetStr(15051),false);
     OutString(90,0,USetStr(15052),false);
     OutString(260,0,USetStr(15053),true);
     OutString(390,0,USetStr(15054),true);
     OutString(400,0,USetStr(15055),false);
    EndFormat;        
    Gray_Divider(0,1);
    i = 0;
    while (XmlNodeExists(reply,"volgnevused/mh_register/regliikmed/mh[" & i & "]")) begin
      StartFormat(15);
       OutDate(15,0,XmlGet(reply,"volgnevused/mh_register/regliikmed/mh[" & i & "]/algus"),false);
       OutDate(90,0,XmlGet(reply,"volgnevused/mh_register/regliikmed/mh[" & i & "]/lopp"),false);
       switch (XmlGet(reply,"volgnevused/mh_register/regliikmed/mh[" & i & "]/summa")) begin
         case "A": OutString(260,0,"501 - 1 000",true);
         case "B": OutString(260,0,"1 001 - 5 000",true);
         case "C": OutString(260,0,"5 001 - 10 000",true);
         case "D": OutString(260,0,"10 001 - 100 000",true);
         case "E": OutString(260,0,"100 001 - 200 000",true);
         case "F": OutString(260,0,"200 001 - 1 000 000",true);
       end;
       switch (XmlGet(reply,"volgnevused/mh_register/regliikmed/mh[" & i & "]/max_summa")) begin
         case "A": OutString(390,0,"501 - 1 000",true);
         case "B": OutString(390,0,"1 001 - 5 000",true);
         case "C": OutString(390,0,"5 001 - 10 000",true);
         case "D": OutString(390,0,"10 001 - 100 000",true);
         case "E": OutString(390,0,"100 001 - 200 000",true);
         case "F": OutString(390,0,"200 001 - 1 000 000",true);
       end;
       OutString(400,0,XmlGet(reply,"volgnevused/mh_register/regliikmed/mh[" & i & "]/sektor"),false);
      EndFormat;        
      i = i + 1;
    end;
    Gray_Divider(0,1);

    StartFormat(15);
     OutString(0,0,USetStr(15078),false);
    EndFormat;
    StartFormat(15);
    EndFormat;

    StartFormat(15);
     OutString(15,0,USetStr(15051),false);
     OutString(90,0,USetStr(15052),false);
     OutString(260,0,USetStr(15053),true);
     OutString(390,0,USetStr(15054),true);
    EndFormat;        
    Gray_Divider(0,1);
    i = 0;
    while (XmlNodeExists(reply,"volgnevused/mh_register/muud/mh[" & i & "]")) begin
      StartFormat(15);
       OutString(15,0,XmlGet(reply,"volgnevused/mh_register/muud/mh[" & i & "]/kreeditor"),false);
      EndFormat;        
      StartFormat(15);
       OutDate(15,0,XmlGet(reply,"volgnevused/mh_register/muud/mh[" & i & "]/algus"),false);
       OutDate(90,0,XmlGet(reply,"volgnevused/mh_register/muud/mh[" & i & "]/lopp"),false);
       switch (XmlGet(reply,"volgnevused/mh_register/muud/mh[" & i & "]/summa")) begin
         case "A": OutString(260,0,"501 - 1 000",true);
         case "B": OutString(260,0,"1 001 - 5 000",true);
         case "C": OutString(260,0,"5 001 - 10 000",true);
         case "D": OutString(260,0,"10 001 - 50 000",true);
         case "E": OutString(260,0,"50 001 - 200 000",true);
         case "F": OutString(260,0,"200 001 - 1 000 000",true);
         case "G": OutString(260,0,">1 000 000",true);
       end;
       switch (XmlGet(reply,"volgnevused/mh_register/muud/mh[" & i & "]/max_summa")) begin
         case "A": OutString(390,0,"501 - 1 000",true);
         case "B": OutString(390,0,"1 001 - 5 000",true);
         case "C": OutString(390,0,"5 001 - 10 000",true);
         case "D": OutString(390,0,"10 001 - 50 000",true);
         case "E": OutString(390,0,"50 001 - 200 000",true);
         case "F": OutString(390,0,"200 001 - 1 000 000",true);
         case "G": OutString(390,0,">1 000 000",true);
       end;
      EndFormat;        
      i = i + 1;
    end;
    Gray_Divider(0,1);
    StartFormat(15);
     OutString(0,0,USetStr(15066),false);
    EndFormat;        
    StartFormat(15);
     OutString(0,0,USetStr(15067),false);
    EndFormat;        
    StartFormat(15);
     OutString(0,0,USetStr(15068),false);
    EndFormat;        
    StartFormat(15);
    EndFormat;        
    i = 0;
    while (XmlNodeExists(reply,"volgnevused/tolliamet/teade[" & i & "]")) begin
      StartFormat(15);
       OutString(15,0,XmlGet(reply,"volgnevused/tolliamet/teade[" & i & "]"),false);
      EndFormat;        
      i = i + 1;
    end;
  end;
  if (res==2) then begin  
    errcode = XmlGet(reply,"error/code");    
    errstr = XmlGet(reply,"error/desc"); 
    tstr = XmlGet(reply,"volgnevused/isik/nimi");
    score = XmlGet(reply,"volgnevused/skooring/skoor");
    if (blank(tstr)) and (blank(score)) then begin
      StartFormat(15);
       OutString(0,0,USetStr(20231),false);
       OutString(100,0,errcode,false);
       OutString(200,0,errstr,false);
      EndFormat;
      goto LEstonianCustomerData;
    end;
    StartFormat(15);
     OutString(0,0,tstr,false);
     OutString(80,0,CUr.RegNr1,false);
     OutString(360,0,USetStr(15056),true);
     OutString(480,0,score,true);
    EndFormat;        

    StartFormat(15);
     OutString(0,0,USetStr(15069),false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(15070),false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(15071),false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(15072),false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(15073),false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(15074),false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(15075),false);
    EndFormat;
    StartFormat(15);
     OutString(0,0,USetStr(15076),false);
    EndFormat;    
    StartFormat(15);
     OutString(0,0,USetStr(15077),false);
    EndFormat;    
    StartFormat(15);
    EndFormat;                
    StartFormat(15);
     OutString(0,0,USetStr(15051),false);
     OutString(80,0,USetStr(15052),false);
     OutString(240,0,USetStr(15053),true);
     OutString(320,0,USetStr(15054),true);
     OutString(330,0,USetStr(15055),false);
    EndFormat;        
    Gray_Divider(0,1);
    i = 0;
    while (XmlNodeExists(reply,"volgnevused/mh_register/regliikmed/mh[" & i & "]")) begin
      tstr = XmlGet(reply,"volgnevused/mh_register/regliikmed/mh[" & i & "]/algus");
      sd = StringToDate(tstr);
      tstr = XmlGet(reply,"volgnevused/mh_register/regliikmed/mh[" & i & "]/lopp");
      ed = StringToDate(tstr);
      tstr = XmlGet(reply,"volgnevused/mh_register/regliikmed/mh[" & i & "]/summa");
      sum = StringToVal(tstr,M4Val);
      tstr = XmlGet(reply,"volgnevused/mh_register/regliikmed/mh[" & i & "]/max_summa");
      maxsum = StringToVal(tstr,M4Val);
      tstr = XmlGet(reply,"volgnevused/mh_register/regliikmed/mh[" & i & "]/sektor");
      i = i + 1;
      StartFormat(15);
       OutDate(0,0,sd,false);
       OutDate(80,0,ed,false);
       OutVal(240,0,sum,M4Val,true);
       OutVal(320,0,maxsum,M4Val,true);
       OutString(330,0,tstr,false);
      EndFormat;        
    end;    
    StartFormat(15);
     OutString(0,0,USetStr(15078),false);
    EndFormat;
    StartFormat(15);
    EndFormat;

    StartFormat(15);
     OutString(15,0,USetStr(15051),false);
     OutString(90,0,USetStr(15052),false);
     OutString(260,0,USetStr(15053),true);
     OutString(390,0,USetStr(15054),true);
     OutString(400,0,USetStr(15055),false);
    EndFormat;        
    Gray_Divider(0,1);
    i = 0;
    while (XmlNodeExists(reply,"volgnevused/mh_register/muud/mh[" & i & "]")) begin
      StartFormat(15);
       OutString(15,0,XmlGet(reply,"volgnevused/mh_register/muud/mh[" & i & "]/kreeditor"),false);
      EndFormat;        
      StartFormat(15);
       OutDate(15,0,XmlGet(reply,"volgnevused/mh_register/muud/mh[" & i & "]/algus"),false);
       OutDate(90,0,XmlGet(reply,"volgnevused/mh_register/muud/mh[" & i & "]/lopp"),false);
       switch (XmlGet(reply,"volgnevused/mh_register/muud/mh[" & i & "]/summa")) begin
         case "A": OutString(260,0,"501 - 1 000",true);
         case "B": OutString(260,0,"1 001 - 5 000",true);
         case "C": OutString(260,0,"5 001 - 10 000",true);
         case "D": OutString(260,0,"10 001 - 50 000",true);
         case "E": OutString(260,0,"50 001 - 200 000",true);
         case "F": OutString(260,0,"200 001 - 1 000 000",true);
         case "G": OutString(260,0,">1 000 000",true);
       end;
       switch (XmlGet(reply,"volgnevused/mh_register/muud/mh[" & i & "]/max_summa")) begin
         case "A": OutString(390,0,"501 - 1 000",true);
         case "B": OutString(390,0,"1 001 - 5 000",true);
         case "C": OutString(390,0,"5 001 - 10 000",true);
         case "D": OutString(390,0,"10 001 - 50 000",true);
         case "E": OutString(390,0,"50 001 - 200 000",true);
         case "F": OutString(390,0,"200 001 - 1 000 000",true);
         case "G": OutString(390,0,">1 000 000",true);
       end;
      EndFormat;        
      i = i + 1;
    end;
  end;
LEstonianCustomerData:;  
  return;
end;

global
updating procedure KrediidiinfoRn(record RcVc RepSpec)
begin
  xml reply;
  Integer res;
  record CUVc CUr;
  record InternetEnablerBlock IEb;
  record ModuleBlock Mb;
  Area a_reply;
  
  BlockLoad(IEb);
  BlockLoad(Mb);
  res = -1;

  CUr.Code = RepSpec.f1;
  if (ReadFIrstMain(CUr,1,true)) then begin end;
  SetFileOnServer(true);
  GetAreaFromFile(a_reply,"tmp\\ki-" & CUr.Code & ".xml");
  Delete_File("tmp\\ki-" & CUr.Code & ".xml");
  SetFileOnServer(false);  
  
  StartReportJob(USetStr(15050));
  EndHeader;
  
  SetRepCol(2,120);
  SetRepCol(3,240);
  SetRepCol(4,360);
  if (GetAreaLength(a_reply)<=1) then begin
    res = -1;
  end else begin
    res = 1;
  end; 
  reply = ParseXMLArea(a_reply);
  
  if (IEb.RegInCountry==0) then begin
    StartFormat(15);
     OutString(0,0,USetStr(20242),false);
    EndFormat;
    goto LKrediidiinfoRn;
  end;

  if (res==-1) then begin
    StartFormat(15);
     OutString(0,"DblCUVc",RepSpec.f1,false);
     OutString(100,0,"no RegNr",false);
    EndFormat;
    goto LKrediidiinfoRn;
  end;
  
  StartFormat(15);
   OutString(0,0,USetStr(2923),false);
  EndFormat;
  switch (IEb.RegInCountry) begin
    case 7:  EstonianCustomerData(reply,res,CUr);
    case 16: EstonianCustomerData(reply,res,CUr);
    case 25: EstonianCustomerData(reply,res,CUr);
    case 3:  SwedishCustomerData(reply,res,CUr);
  end;

  switch (IEb.RegInCountry) begin
    case 3:
    otherwise
      StartFormat(15);
      EndFormat;
      StartFormat(15);
       OutString(0,0,USetStr(15079),false);
      EndFormat;
      StartFormat(15);
       OutString(0,0,USetStr(15080),false);
      EndFormat;
      StartFormat(15);
       OutString(0,0,USetStr(15081),false);
      EndFormat;
  end;
 LKrediidiinfoRn:; 

  EndJob;
  RETURN;
END;

global
function Boolean SendKIReportFileToServer(record HTSFileVc HTSFiler)
begin
  Boolean res;
  Area a;
  string 255 filename;
  
  SetFileOnServer(true);
  GetRecordBlob(HTSFiler,"Math",a); 
  CreateFile(HTSFiler.FileName);
  CloseFile;
  WriteAreaToFile(a,HTSFiler.FileName,0);
  SetFileOnServer(false);
  res = true;
  SendKIReportFileToServer = res;
  return;
end;
