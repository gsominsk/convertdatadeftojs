external function Boolean ContactInGroupClass(string,string,string,string,string,string);
external procedure HTCustCat(string,var string);
external procedure HTCustClass(string,var string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function LongInt DateDiff(Date,Date);
external procedure HT2Per(Date, Date , var string);

global 
Procedure QTAccRn(record RcVc RepSpec)
BEGIN
  Record QTVc QTr;
  Boolean TrHs, testf;
  integer rw;
  LongInt fromqt;
  LongInt toqt;
  LongInt decdays,totdaysr, totdaysa;
  string 255 tstr;
  val rej, acc;
  val valrej, valacc;
  val valavg;
  string 255 str;
  val wonperc,totval;
  val lessdays, mostdays;
  val lessamount, mostamount;
  val rs, iv,totgp;
  
  fromqt= FirstInRange(RepSpec.f1,20);
  toqt= LastInRange(RepSpec.f1,20);
 
  rs = 0;
  lessdays = 0;
  mostdays = 0;
  lessamount = 0;
  mostamount = 0;
  totval = 0;
  rej = 0;
  acc = 0;
  valrej = 0;
  valacc = 0;
  totdaysr = 0;
  totdaysa = 0;
  decdays = 0;
  wonperc = 0;
  
  StartReportJob(USetStr(11000));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;  
  if (nonblank(RepSpec.f1)) then begin
    tstr = USetStr(11001);
    tstr = tstr & ": " & RepSpec.f1;
    Header(rw,tstr,1); 
    rw = rw + 1;  
  end;
  if (nonblank(RepSpec.f2)) then begin
    tstr = USetStr(2692);
    tstr = tstr & ": " & RepSpec.f2;
    Header(rw,tstr,1); 
    rw = rw + 1;  
  end;
  if (nonblank(RepSpec.f3)) then begin
    tstr = USetStr(2684);
    tstr = tstr & ": " & RepSpec.f3;
    Header(rw,tstr,1); 
    rw = rw + 1;  
  end;
  HTCustCat(RepSpec.f9,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  HTCustClass(RepSpec.f10,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.ObjStr)) then begin
    tstr = USetStr(11025);
    tstr = tstr & ": " & RepSpec.ObjStr;
    Header(rw,tstr,1); 
    rw = rw + 1;  
  end;
  if (RepSpec.vals0 > 0) then begin
    tstr = USetStr(11025);
    tstr = tstr & RepSpec.vals0;
    Header(rw,tstr,1);
    rw = rw + 1;  
  end;
  EndHeader;
  
  StartFormat(15);
    OutString(0,0,USetStr(11001),false);
    OutString(50,0,USetStr(11002),false);
    OutString(100,0,USetStr(11003),false);
    OutString(200,0,USetStr(11004),false);
    OutString(290,0,USetStr(11005),true);
    OutString(350,0,USetStr(11006),true);
    OutString(380,0,USetStr(11007),true);
    OutString(390,0,USetStr(11008),false);
    OutStringAdjustBiDi(1,0,USetStr(11009),true,M4Val,520);
  EndFormat;
  Black_Divider(0,1);
  TrHs = true; 
  QTr.RejectDate = RepSpec.sStartDate;
  QTr.Rejected = 1;
  while (LoopKey("Rejected",QTr,2,TrHs)) begin   
   if (QTr.Rejected > 2) then begin
     TrHs = false;
   end;
   if (QTr.RejectDate>RepSpec.sEndDate) then begin
     TrHs = false;
   end;   
         
   if (TrHs) then begin
     testf=true;
     if (RepSpec.vals0 > 0) then begin
       iv = QTr.Sum1;   
       rs = MULRATETOBASE1(QTr.CurncyCode,iv,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
     if (RepSpec.vals0 >= rs) then begin
           testf = false;
        end;
     end; 
     if (nonblank(RepSpec.f1)) then begin
       if (fromqt > QTr.SerNr) then begin
         testf = false;
       end; 
       if (toqt < QTr.SerNr) then begin
         testf = false;
       end;      
      end;     
     if (nonblank(RepSpec.f2)) then begin
        if (RepSpec.f2<>QTr.SalesMan) then begin
           testf=false;
        end;
     end;
     if (nonblank(RepSpec.f4) and (RepSpec.f4<>QTr.QuoteClass)) then begin
        testf = false;
      end;
       if (nonblank(RepSpec.f3)) then begin
        if (RepSpec.f3<>QTr.CustCode) then begin
           testf=false;
        end;
     end;
     if (testf) then begin 
       testf = ContactInGroupClass(QTr.CustCode,RepSpec.f9,RepSpec.f10,"CUST","","");    
     end; 
     if (nonblank(RepSpec.ObjStr)) then begin
        if (RepSpec.ObjStr<>QTr.SalesGroup) then begin
          testf = false;
        end;
     end;
     if (QTr.Closed == 1) then begin
       testf = false;
     end;
     if (DateInRange(Qtr.RejectDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin 
       testf = false;
     end;
      if (testf) then begin 
        iv = QTr.Sum1;   
        rs = MULRATETOBASE1(QTr.CurncyCode,iv,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
 
       if (QTr.Rejected == 1) then begin
          rej = rej + 1;
          valrej = valrej + rs;
          str = USetStr(11022);
          decdays = DateDiff(QTr.RejectDate,QTr.QTDate);  
          totdaysr = totdaysr + decdays;
       end;
       if (QTr.Rejected == 2) then begin
          acc = acc + 1;
          valacc = valacc + rs;
          str = USetStr(11023);
          decdays = DateDiff(QTr.RejectDate,QTr.QTDate); 
          totdaysa = totdaysa + decdays;   
          totgp = totgp + QTr.TotGP;
          if (lessdays == 0) then begin
             lessdays = decdays;
          end;
          if (lessdays > decdays) then begin
             lessdays = decdays;
          end;
          if (mostdays == 0) then begin 
             mostdays = decdays;
          end;
          if (mostdays < decdays) then begin
             mostdays = decdays;
          end;  
         if (lessamount == 0) then begin
             lessamount = rs;
          end;
          if (lessamount > rs) then begin
             lessamount = rs;
          end;
          if (mostamount == 0) then begin 
             mostamount = rs;
          end;
          if (mostamount < rs) then begin
             mostamount = rs;
          end;  
       end;
       totval = totval + rs;
       
       StartFormat(15);
       OutLongInt(0,"DblQuote",QTr.SerNr,false);
       OutString(50,0,QTr.CustCode,false);
       OutString(100,0,QTr.Addr0,false);
       OutString(200,0,QTr.SalesMan,false);
       OutDate(290,0,QTr.QTDate,true);
       OutDate(350,0,QTr.RejectDate,true);
       OutString(380,0,decdays,true);
       OutString(390,0,str,false);
       OutStringAdjustBiDi(1,0,rs,true,M4Val,520);
       EndFormat;
           
        
      end; // testf   
    end; // TrHs
  end; //while
  Black_Divider(0,1);
  StartFormat(15);
   OutString(0,0,USetStr(11021),false);
   OutStringAdjustBiDi(1,0,totval,true,M4Val,520);
  EndFormat;
  StartFormat(15);
    OutStringAdjustBiDi(120,0,USetStr(11010),true,M4Val,160);
    OutStringAdjustBiDi(160,0,USetStr(11011),true,M4Val,200);
    OutStringAdjustBiDi(230,0,USetStr(11012),true,M4Val,260);
    OutString(270,0,USetStr(11007),true);
  EndFormat;
  StartFormat(15);
    OutString(0,0,USetStr(11013),false);
    OutStringAdjustBiDi(120,0,valacc,true,M4Val,160);
    OutValBiDi(160,0,acc,M40Val,true,200);
    valavg = valacc/acc;
    OutStringAdjustBiDi(230,0,valavg,true,M4Val,260);
    totdaysa = (totdaysa/acc);
    OutString(270,0,totdaysa,true);
  EndFormat; 
  StartFormat(15);
    OutString(0,0,USetStr(11014),false);
    OutStringAdjustBiDi(120,0,valrej,true,M4Val,160);
    OutValBiDi(160,0,rej,M40Val,true,200);
    valavg = valrej/rej;
    OutStringAdjustBiDi(230,0,valavg,true,M4Val,260);
    totdaysr = totdaysr/rej;
    OutString(270,0,totdaysr,true);
  EndFormat; 
  wonperc = (acc/(acc+rej))*100;
  StartFormat(15);
  EndFormat;
  StartFormat(15);
    OutString(0,0,USetStr(11015),false);
    OutStringAdjustBiDi(120,0,wonperc,true,M4Val,160);
    OutString(122,0,USetStr(11016),false);
  EndFormat;
  StartFormat(15);
    Outstring(0,0,USetStr(11017),false);
    OutValBiDi(120,0,mostdays,M40Val,true,160);
  EndFormat;
  StartFormat(15);
    OutString(0,0,USetStr(11018),false);
    OutValBiDi(120,0,lessdays,M40Val,true,160);
  EndFormat;
  StartFormat(15);
    OutString(0,0,USetStr(11019),false);
    OutStringAdjustBiDi(120,0,mostamount,true,M4Val,160);
  EndFormat;
  StartFormat(15);
    OutString(0,0,USetStr(11020),false);
    OutStringAdjustBiDi(120,0,lessamount,true,M4Val,160);
  EndFormat;
  StartFormat(15);
    OutString(0,0,USetStr(11024),false);
    OutStringAdjustBiDi(120,0,totgp,true,M4Val,160);
  EndFormat;
  EndJob;
  
 RETURN; 
 END;
#endif
