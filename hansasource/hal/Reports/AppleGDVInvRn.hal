external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);

procedure SortItemArray(Array string aartcodes,Array val aqtys,Integer acnt)
begin
  Integer i;
  Integer changing;
  string 255 artcode;
  val qty;

  changing = 1;
  while (changing==1) begin
    changing = 0;
    for (i=0;i<acnt-1;i=i+1) begin
      if (aartcodes[i]<aartcodes[i+1]) then begin
        changing = 1;
        artcode = aartcodes[i];
        qty = aqtys[i];
                
        aartcodes[i] = aartcodes[i+1];
        aqtys[i] = aqtys[i+1];
        
        aartcodes[i+1] = artcode;
        aqtys[i+1] = qty;        
      end;
    end;
  end;
  return;
end;

procedure ExportLine(string artcode,record VEStoreIDVc VESr,val qty)
begin
  record INVc INr;
  
  if (ReadFirstItem(artcode,INr,true,false)) then begin end;
  StartFormat(15);
   OutString(0,0,DateToString(CurrentDate,"YYYYMMDD"),false);
   OutString(80,0,VESr.VEStoreID,false);
   OutString(140,0,VESr.Region,false);
   OutString(180,0,INr.Code,false);
   OutString(260,0,Left(INr.Name,25),false);
   OutVal(1,0,qty,M4Val,true);
   OutString(1,0,"",false);
   OutString(1,0,"",false);
  EndFormat;
  return;
end;

procedure AddToItemArray(string artcode,val qty,Array string aartcodes,Array val aqtys,var Integer acnt)
begin
  Integer i;
  
  for (i=0;i<acnt;i=i+1) begin
    if (artcode==aartcodes[i]) then begin
      aqtys[i] = aqtys[i] + qty;
      goto LAddToItemArray;
    end;
  end;
  aartcodes[acnt] = artcode;
  aqtys[acnt] = qty;
  acnt = acnt + 1;
LAddToItemArray:;  
  return;
end;

procedure PrintLine(string artcode,record VEStoreIDVc VESr,val qty)
begin
  record INVc INr;
  
  if (ReadFirstItem(artcode,INr,true,false)) then begin end;
  StartFormat(15);
   OutString(0,0,DateToString(CurrentDate,"YYYYMMDD"),false);
   OutString(80,0,VESr.VEStoreID,false);
   OutString(140,0,VESr.Region,false);
   OutString(180,0,INr.Code,false);
   OutString(260,0,Left(INr.Name,25),false);
   OutVal(1,0,qty,M4Val,true);
  EndFormat;
  return;
end;

procedure PrintLineHeader()
begin
  StartFormat(15);
   OutString(0,0,USetStr(17581),false);
   OutString(80,0,USetStr(17582),false);
   OutString(140,0,USetStr(17583),false);
   OutString(180,0,USetStr(17584),false);
   OutString(260,0,USetStr(17585),false);
   OutString(1,0,USetStr(17586),true);
  EndFormat;
  return;
end;

procedure ExportLineHeader()
begin
  StartFormat(15);
   OutString(0,0,USetStr(17581),false);
   OutString(80,0,USetStr(17582),false);
   OutString(140,0,USetStr(17583),false);
   OutString(180,0,USetStr(17584),false);
   OutString(260,0,USetStr(17585),false);
   OutString(1,0,USetStr(17586),true);
   OutString(1,0,USetStr(17587),true);
   OutString(1,0,USetStr(17588),true);
  EndFormat;
  return;
end;

procedure AppleGDVInvForStore(record RcVc RepSpec,record VEStoreIDVc VESr,Array string aartcodes,Array val aqtys,var Integer acnt)
begin
  record ItemStatusVc ISr;
  record INVc INr;
  Boolean found,testf;
  Integer i;

  found = true;  
  ISr.Location = VESr.Location;
  while (LoopKey("Location",ISr,2,found)) begin
    if (ISr.Location!=VESr.Location) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (ISr.Location==";;;") then begin testf = false; end;
      if (nonblank(RepSpec.f1)) then begin
        INr.Code = ISr.Code;
        ReadFirstMain(INr,1,true);   
        if (SetInSet(RepSpec.f1,INr.DispGroups)==false) then begin testf = false; end;
      end;
      if (testf) then begin  
        AddToItemArray(ISr.Code,ISr.Instock,aartcodes,aqtys,acnt);
      end;
    end;
  end;
  return;
end;

global
procedure AppleGDVInvRn(record RcVc RepSpec)
begin
  record VEStoreIDVc VESr;
  Boolean found;
  record VEStoreIDVc lastVESr;
  Array string 255 aartcodes;
  Array val aqtys;
  Integer acnt,i;
  
  StartReportJob(USetStr(17580));
  EndHeader;
  switch (RepSpec.Media) begin
    case mtFile:
      ExportLineHeader;
    case mtExcel:
      ExportLineHeader;
    otherwise
      PrintLineHeader;
  end;
  Gray_Divider(0,1);
  found = true;
  VESr.VECode = RepSpec.FirstAcc;
  while (LoopKey("VEStoreID",VESr,2,found)) begin
    if (nonblank(RepSpec.FirstAcc)) then begin
      if (VESr.VECode!=RepSpec.FirstAcc) then begin found = false; end;
    end;
    if (found) then begin
      if (nonblank(lastVESr.VEStoreID)) then begin
        if (VESr.VEStoreID!=lastVESr.VEStoreID) then begin
          SortItemArray(aartcodes,aqtys,acnt);
          for (i=0;i<acnt;i=i+1) begin
            if (aqtys[i]!=0) then begin
              switch (RepSpec.Media) begin
                case mtFile:
                  ExportLine(aartcodes[i],lastVESr,aqtys[i]);
                case mtExcel:
                  ExportLine(aartcodes[i],lastVESr,aqtys[i]);
                otherwise
                  PrintLine(aartcodes[i],lastVESr,aqtys[i]);
              end;
            end;
          end;
          for (i=0;i<acnt;i=i+1) begin
            aartcodes[i] = "";
            aqtys[i] = blankval;
          end;
          acnt = 0;
        end;
      end;
      AppleGDVInvForStore(RepSpec,VESr,aartcodes,aqtys,acnt);
      RecordCopy(lastVESr,VESr);
    end;
  end;  
  
  if (acnt>0) then begin
    SortItemArray(aartcodes,aqtys,acnt);
    for (i=0;i<acnt;i=i+1) begin
      if (aqtys[i]!=0) then begin
        switch (RepSpec.Media) begin
          case mtFile:
            ExportLine(aartcodes[i],lastVESr,aqtys[i]);
          case mtExcel:
            ExportLine(aartcodes[i],lastVESr,aqtys[i]);
          otherwise
            PrintLine(aartcodes[i],lastVESr,aqtys[i]);
        end;
      end;
    end;
  end;  
  
  EndJob;
  return;
end;