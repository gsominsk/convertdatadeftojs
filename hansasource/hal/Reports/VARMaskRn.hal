external procedure HTItem(string,var string);
external procedure HTArtGroup(string, var string);
external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean ItemInItemGroupOrClass(string,string,string);
external function Boolean TestArtCodeMatch(string,string);
external function Boolean ItemHasVarieties(string,string,Boolean);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function val GetStockQty(string,string,Date,Boolean);
external procedure HTLocations(string, string, var string);
external procedure ExtractObj(string,var Integer,var string);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external function Boolean ItemHasVarieties2(string,string,string,string,Boolean);

function Integer ExtractVARSubsets(string ostr,var Integer pos,var string rstr)
BEGIN
  Integer semicolon;
  string 1 c1;

  rstr = "";
L47:;
  if (pos>len(ostr)) then begin semicolon = 1; goto L999; end;
  c1 = Mid(ostr,pos,1); 
  pos = pos + 1;
  if ((c1==",") or (c1==".") or (c1==";")) then begin
    if (c1==";") then begin
      semicolon = 1;
    end;
    if (len(rstr)==0) then begin 
      goto L47; 
    end;
    goto L888;
  end;
  if ((len(rstr)<20)) then begin 
    rstr = rstr & c1;
  end;
  goto L47;
L888:;
  if (pos>len(ostr)) then begin semicolon = 1; goto L999; end;
  c1 = Mid(ostr,pos,1);  
  pos = pos + 1;
  if ((c1==",") or (c1==".") or (c1==";")) then begin goto L888; end;
  pos = pos - 1;
L999:;
  ExtractVARSubsets = semicolon;
  RETURN;
END;

global
function Boolean CheckVARSubsets(record VARVc VARr,string varsubset,string msk)
begin
  Boolean res;
  Integer pos;
  string 20 vstr;
  Integer semicol;
  Array string 20 varmaskarr;
  Integer arrcnt;
  
  res = false;
  pos = 0;
  ExtractObj(msk,pos,vstr);
  while (nonblank(vstr)) begin
    varmaskarr[arrcnt] = vstr;
    arrcnt = arrcnt + 1;
    ExtractObj(msk,pos,vstr);
  end;
    
  pos = 0;
  semicol = semicol + ExtractVARSubsets(varsubset,pos,vstr);
  while (nonblank(vstr)) begin
    if (VARr.Code==vstr) then begin
      res = true;
      goto LCheckVARSubsets;
    end;
    if (vstr=="*") then begin
      if (VARr.VARGCode==varmaskarr[semicol-1]) then begin
        res = true;
        goto LCheckVARSubsets;
      end;
    end;
    semicol = semicol + ExtractVARSubsets(varsubset,pos,vstr);
  end;
LCheckVARSubsets:;
  CheckVARSubsets = res;
  return;
end;

/* I need to know how many Columns we are going to print, to calculate the distance between them */
global
function Integer FindYVars(string yvars,string varsubset,string msk)
begin
  record VARVc VARr;
  Boolean foundf,testf;
  Integer vars;
  
  vars = 0;
  foundf = true;
  VARr.VARGCode = yvars;
  while (LoopKey("VARGCode",VARr,1,foundf)) begin
    if (VARr.VARGCode<>yvars) then begin
      foundf = false;
    end;
    testf = foundf;
    if (nonblank(varsubset)) then begin
      if (CheckVARSubsets(VARr,varsubset,msk)==false) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      vars = vars + 1;
    end;
  end;
  FindYVars = vars;
  return;
end;

/* I Create a proper string of varieties, and then I send that into the ItemHasVarieties function for each string in the Array */
Function
val FindVARVal(Array string items,Array val itemqty,Integer strcnt,string incode,string xpos,string xposgr,string ypos,string yposgr,string zpos,var string itsz,var string msk,var string varsubset)
begin
  record VARGVc VARGr;
  string 60 varstr;
  string 60 emptystr;
  Integer i;
  val qty;
  
  qty = BlankVal;
  emptystr = "                                                            ";
  VARGr.Code = xposgr;
  if (ReadFirstMain(VARGr,1,true)) then begin
    if ((VARGr.VarSize>="0") and (VARGr.VarSize<="9")) then begin
      varstr = xpos;
      if (blank(xpos)) then begin
        varstr = Left(emptystr,StringToInt(VARGr.VarSize));
      end;
    end else begin
      varstr = xpos;
      if ((nonblank(ypos)) or (nonblank(zpos))) then begin
        varstr = varstr & VARGr.VarSize;
      end;
    end;
  end;
  VARGr.Code = yposgr;
  if (ReadFirstMain(VARGr,1,true)) then begin
    if ((VARGr.VarSize>="0") and (VARGr.VarSize<="9")) then begin
      varstr = varstr & ypos;
      if (blank(ypos)) then begin
        varstr = varstr & Left(emptystr,StringToInt(VARGr.VarSize));
      end;
    end else begin
      varstr = varstr & ypos;
      if (nonblank(zpos)) then begin
        varstr = varstr & VARGr.VarSize;
      end;
    end;
  end;
  varstr = varstr & zpos;
  for (i=0;i<strcnt;i=i+1) begin
//    if (ItemHasVarieties(items[i],varstr,true)) then begin
    if (ItemHasVarieties2(items[i],itsz,msk,varstr,true)) then begin
      qty = qty + itemqty[i];
    end;
  end;
  FindVARVal = qty;
  return;
end;

/* Printing the Variety mask of One level (which means only rows, or only columns, I did only rows) */
procedure PrintVARItemMsk1(record INVc INr,Array string items,Array val itemqty,Integer strcnt,string location,string xpos,Integer all,var string itsz,var string msk,var string varsubset,Boolean sttakvar,Boolean showqtyf)
begin
  record VARVc VARr;
  Boolean foundf;
  Integer i;
  val v;
  Boolean firstf,testf;

  firstf = true;
  foundf = true;
  VARr.VARGCode = xpos;
  while (LoopKey("VARGCode",VARr,1,foundf)) begin
    if (VARr.VARGCode<>xpos) then begin
      foundf = false;
    end;
    if (foundf) then begin
      testf = true;
      if (nonblank(varsubset)) then begin
        if (CheckVARSubsets(VARr,varsubset,msk)==false) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        v = FindVARVal(items,itemqty,strcnt,INr.Code,VARr.Code,VARr.VARGCode,"","","",itsz,msk,varsubset);
        if (v!=0 or all==1) then begin
          if (firstf) then begin
            StartFormat(15);
            OutString(0,"InvValVarDbl",INr.Code,false);
            OutString(2,0,INr.Name,false);
            OutString(4,0,INr.Unittext,false);
            EndFormat;
            Gray_Divider(0,1);
            firstf = false;
          end;
          StartFormat(15);
          OutString(0,0,VARr.Code,false);
          OutString(50,0,VARr.Comment,false);
          if (sttakvar) then begin
            if (showqtyf) then begin
              OutVal(290,0,v,M4UVal,true);
              OutString(310,0,"____",true);
            end else begin
              OutString(300,0,"_____",true);
            end;
          end else begin
            OutVal(300,0,v,M4UVal,true);
          end;
          EndFormat;
        end;
      end;
    end;
  end;
  if (firstf==false) then begin
    Gray_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;
  return;
end;

/* Printing the Variety mask of Two levels (which means rows and columns) */
procedure PrintVARItemMsk2(Integer inpos,record INVc INr,Array string items,Array val itemqty,Integer strcnt,string location,string xpos,string ypos,string zpos,Integer nrofy,Boolean printf,Integer all,var string itsz,var string msk,var string varsubset,Boolean sttakvar,Boolean showqtyf)
begin
  record VARGVc VARGr;
  record VARVc VARr;
  record VARVc VAR2r;
  record VARVc VAR3r;
  Boolean foundf,foundf2;
  Boolean firstf,testf,test2f;
  Integer i;
  val rowcolval;
  Boolean secondprinted;

  if (printf) then begin
    StartFormat(15);
    OutString(inpos,"InvValVarDbl",INr.Code,false);
    OutString(2,0,INr.Name,false);
    OutString(4,0,INr.Unittext,false);
    EndFormat;
    Gray_Divider(0,1);
    StartFormat(15);
    VARGr.Code = xpos;
    ReadFIrstMain(VARGr,1,true);
    OutString(0,0,VARGr.Comment,false);
    VARGr.Code = ypos;
    ReadFIrstMain(VARGr,1,true);
    OutString(300,0,VARGr.Comment,false);
    EndFormat;
  end;
  foundf = true;
  firstf = true;
  VARr.VARGCode = xpos;
  while (LoopKey("VARGCode",VARr,1,foundf)) begin
    if (VARr.VARGCode<>xpos) then begin
      foundf = false;
    end;
    if (foundf) then begin
      testf = true;
      foundf2 = true;
      VAR2r.VARGCode = ypos;

      ResetLoop(VAR2r);
      if (nonblank(varsubset)) then begin
        if (CheckVARSubsets(VARr,varsubset,msk)==false) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
      i = 1;
      foundf2 = true;
      secondprinted = false;
      while (LoopKey("VARGCode",VAR2r,1,foundf2)) begin
        if (VAR2r.VARGCode<>ypos) then begin
          foundf2 = false;
        end;
        if (foundf2) then begin
          test2f = true;
          if (nonblank(varsubset)) then begin
            if (CheckVARSubsets(VAR2r,varsubset,msk)==false) then begin
              test2f = false;
            end;
          end;
          if (test2f) then begin

            if (firstf) then begin
              if (secondprinted==false) then begin
                StartFormat(15);
                secondprinted = true;
              end;
              OutString(((400/nrofy)*i)+80,0,VAR2r.Comment,true);
            end else begin
              rowcolval = FindVARVal(items,itemqty,strcnt,INr.Code,VARr.Code,VARr.VARGCode,VAR2r.Code,VAR2r.VARGCode,zpos,itsz,msk,varsubset);
              if ((rowcolval<>0) or (all==1)) then begin
                if (secondprinted==false) then begin
                  StartFormat(15);
                  OutString(0,0,VARr.Comment,false);
                  secondprinted = true;
                end;
                if (sttakvar) then begin
                  if (showqtyf) then begin
                    OutVal(((400/nrofy)*i)+60,0,rowcolval,M4UVal,true);
                    OutString(((400/nrofy)*i)+80,0,"____",true);
                  end else begin
                    OutString(((400/nrofy)*i)+90,0,"____",true);
                  end;
                end else begin
                  OutVal(((400/nrofy)*i)+80,0,rowcolval,M4UVal,true);
                end;
              end;
            end;
            i = i + 1;
          end;
        end;
      end;
      if (secondprinted) then begin
        EndFormat;
      end;
      if (firstf) then begin
        StepBack(VARr);
        firstf = false;
      end;
      end;
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  EndFormat;
  return;
end;

/* Printing the Variety mask of more than two levels (which means print the 2 version and repeat it) */
procedure PrintVARItemMsk3(Integer inpos,record INVc INr,Array string items,Array val itemqty,Integer strcnt,string location,string xpos,string ypos,string zpos,Integer nrofy,Integer all,var string itsz,var string msk,var string varsubset,Boolean sttakvar,Boolean showqtyf)
begin
  record VARVc VARr;
  Boolean foundf;
  Integer i;

  StartFormat(15);
  OutString(inpos,"InvValVarDbl",INr.Code,false);
  OutString(2,0,INr.Name,false);
  OutString(4,0,INr.Unittext,false);
  EndFormat;
  Gray_Divider(0,1);
  foundf = true;
  VARr.VARGCode = zpos;
  while (LoopKey("VARGCode",VARr,1,foundf)) begin
    if (VARr.VARGCode<>zpos) then begin
      foundf = false;
    end;
    if (foundf) then begin
        StartFormat(15);
        OutString(0,0,VARr.Comment,false);
        EndFormat;
        Gray_Divider(0,1);
        PrintVARItemMsk2(inpos,INr,items,itemqty,strcnt,location,xpos,ypos,VARr.Code,nrofy,false,all,itsz,msk,varsubset,sttakvar,showqtyf);
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  EndFormat;
  return;
end;

procedure PrintItemVarStockValues(record INVc INr,string location)
begin
  record ItemStatusVc ISr;
  record INVc IN2r;
  Integer keys;
  Boolean foundf,testf;
  string 255 tstr;
  val t;

  StartFormat(15);
  EndFormat;
  
  StartFormat(15);
  OutString(0,0,USetStr(11134),false);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(2325),false);
  OutString(90,0,USetStr(11174),false);
  OutString(150,0,USetStr(2326),false);
  OutString(280,0,USetStr(2342),true);
  OutString(330,0,USetStr(2343),true);
  OutString(380,0,USetStr(11154),true);
  OutString(430,0,USetStr(2347),true);
  OutString(480,0,USetStr(11770),true);
  EndFormat;
  Gray_Divider(0,1);
  keys = 1;
  ISr.Code = INr.Code;
  ISr.Location = location;
  if (nonblank(location)) then begin
    keys = 2;
  end;
  foundf = true;
  while (LoopMain(ISr,keys,foundf)) begin
    if (ISr.Code!=INr.Code) then begin foundf = false; end;
    testf = foundf;
    if (keys==2) then begin
      if (ISr.Location!=location) then begin
        testf = false;
      end;
    end;
    if (ISr.Location==";;;") then begin
      testf = false;
    end;
    if (testf) then begin
      tstr = "";
      StartFormat(15);
      OutString(0,0,ISr.Code & ISr.Variety,false);
      if (nonblank(ISr.Variety)) then begin
        if (ReadFirstItem(ISr.Code & ISr.Variety,IN2r,true,false)) then begin
          tstr = IN2r.Name;
        end;
      end else begin
        if (ReadFirstItem(ISr.Code,IN2r,true,false)) then begin
          tstr = IN2r.Name;
        end;        
      end;
      OutString(90,0,ISr.Location,false);
      OutString(150,0,Left(tstr,25),false);
      OutVal(280,0,ISr.Instock,M4UVal,true);
      OutVal(330,0,ISr.OrddOut,M4UVal,true);
      t = ISr.Instock-ISr.OrddOut;
      OutVal(380,0,t,M4UVal,true);
      OutVal(430,0,ISr.POUnOKQty,M4UVal,true);
      OutVal(480,0,ISr.ProdOrd,M4UVal,true);
      EndFormat;
    end;
  end;
  return;
end;

global
function Boolean FillItemVarArray(string ItemCode,string location,date thedat,var array string items,var array val itemqty,var Integer isrs,var string sz,var string msk,var string mskrep,var string varsubset)
begin
  record ItemStatusVc ISr;
  Boolean varf,foundf,testf;
  vector Boolean vvarietyf;
  
  isrs = 0;
  varf = false;
  if (FindItemVAR(ItemCode,sz,msk,mskrep,varsubset)) then begin
    varf = true;
  end;
  if (nonblank(mskrep)) then begin
//    msk = mskrep;
  end;
  ISr.Code = ItemCode;
  foundf = true;
  while (LoopMain(ISr,2,foundf)) begin    
    if (ISr.Code!=ItemCode) then begin
      foundf = false;
    end;
    testf = true;
    if (foundf==false) then begin
      testf = false;
    end;
    if (sz>="0") and (sz<="9") then begin
      if (Left(ISr.Code & ISr.Variety,StringToInt(sz))<>ItemCode) then begin
        testf = false;
      end;           
    end else begin
      if (Left(ISr.Code & ISr.Variety,len(ItemCode)+1)<>ItemCode & sz) then begin
        testf = false;
      end; 
    end;
    if (nonblank(location)) then begin
      if (location<>ISr.Location) then begin
        testf = false; 
      end;
    end;
    
    // if (ISr.Location==";;;") then begin // as alternative fix, add "and nonblank(location)" here
    //   testf = false;
    // end;
    
    if (vvarietyf[ISr.Code & ISr.Variety]==true) then begin testf = false; end;
    if (testf) then begin
      vvarietyf[ISr.Code & ISr.Variety] = true;
      items[isrs] = ISr.Code & ISr.Variety;
      itemqty[isrs] = GetStockQty(ISr.Code & ISr.Variety,ISr.Location,thedat,false);
      isrs = isrs + 1;
    end;
  end;
  FillItemVarArray = varf;
  return;
end;

/* First we read this item complete Stock Status into an Array (two actually, Code and Qty) */
/* Then we figure out the Mask and call the apropriate function */
global
procedure PrintItemVarReport2(Integer inpos,record INVc INr,string location,string position,Integer all,Date thedat,Boolean sttakvar,Boolean showqtyf)
begin
  Array string 20 ac;
  Array string 20 items;
  Array val itemqty;
  string 20 xpos,ypos;
  Integer pos,i,cnt,isrs;
  Integer nrofy;
  string 60 sz,msk,mskrep;
  string 30 tstr;
  string 200 varsubset;

  if (INr.ItemType==1) then begin
    if (FillItemVarArray(INr.Code,location,thedat,items,itemqty,isrs,sz,msk,mskrep,varsubset)) then begin
      cnt = 0;
      xpos = "";
      ypos = "";
      pos = 0;
      for (i = 0 ; i<20 ; i=i+1) begin
        ExtractObj(mskrep,pos,tstr);
        if (nonblank(tstr)) then begin
          ac[i] = tstr;
          cnt = cnt + 1;
        end else begin
          i = 20;
        end;
      end;
      if (cnt>0) then begin xpos = ac[0]; end;
      if (cnt>1) then begin ypos = ac[1]; end;
      switch (cnt) begin
        case 1:
          PrintVARItemMsk1(INr,items,itemqty,isrs,location,xpos,all,sz,msk,varsubset,sttakvar,showqtyf);
        case 2:
          nrofy = FindYVars(xpos,varsubset,msk);
          PrintVARItemMsk2(inpos,INr,items,itemqty,isrs,location,ypos,xpos,"",nrofy,true,all,sz,msk,varsubset,sttakvar,showqtyf);//to make it consitent with variety entry
      otherwise
        nrofy = FindYVars(ypos,varsubset,msk);
        pos = 2;
        while (pos<cnt) begin
          PrintVARItemMsk3(inpos,INr,items,itemqty,isrs,location,xpos,ypos,ac[pos],nrofy,all,sz,msk,varsubset,sttakvar,showqtyf);
          pos = pos + 1;
        end;
      end;
    end;
  end;
  return;
end;

global
procedure PrintItemVarReport(Integer inpos,record INVc INr,string location,string position,Integer all,Date thedat,Boolean sttakvar)
begin
  PrintItemVarReport2(inpos,INr,location,position,all,thedat,sttakvar,false);
  return;
end;

/* Just a simple loop over items, calling the PrintItemVarReport */
global
procedure VARMaskStockRn(record RcVc RepSpec)
begin
  record INVc INr;
  Boolean foundf,testf;
  string 30 fromart,toart;
  string 20 location;
  Integer rw;
  string 255 tstr;
  
  StartReportJob(USetStr(11130));
   rw = 1;
   HTItem(RepSpec.f1,tstr);
   if (nonblank(tstr)) then begin
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
   if (HasItemGroups) then begin
     HTArtGroup(RepSpec.f3,tstr);
     if (nonblank(tstr)) then begin
       Header(rw,tstr,1);
       rw = rw + 1;
     end;
   end;
   if (HasItemClassification) then begin
     HTItemClass(RepSpec.f4,tstr);
     if (nonblank(tstr)) then begin
       Header(rw,tstr,1);
       rw = rw + 1;
     end;
   end;   
   HTLocations(RepSpec.f2,RepSpec.f2,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
  EndHeader;
  SetRepCol(2,80);
  SetRepCol(4,440);
  fromart = FirstInRange(RepSpec.f1,20);
  toart = LastInRange(RepSpec.f1,20);
  location = RepSpec.f2;
  foundf = true;
  INr.Code = fromart;
  while (LoopMain(INr,1,foundf)) begin
    if (nonblank(toart)) begin
      if (INr.Code>toart) then begin
        foundf = false;
      end;
    end;
    testf = true;
    if (foundf==false) then begin
      testf = false;
    end;
    if (testf) then begin
      testf = ItemInItemGroupOrClass(INr.Code,RepSpec.f3,RepSpec.f4);
    end;    
    if (nonblank(RepSpec.f3)) then begin
      if (INr.Group!=RepSpec.f3) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      PrintItemVarReport(0,INr,location,"",RepSpec.flags[1],RepSpec.d1,false);
      if (RepSpec.flags[19]!=0) then begin
        PrintItemVarStockValues(INr,location);
      end;
    end;
  end;
  EndJob;
  return;
end;

global
procedure VarMaskVarRn(record RcVc RepSpec)
begin
  record INVc INr;

  INr.Code = RepSpec.f1;
  if (ReadFirstMain(INr,1,true)) then begin
    StartReportJob(USetStr(11130));
    EndHeader;
    SetRepCol(2,80);
    SetRepCol(4,440);
    PrintItemVarReport(0,INr,RepSpec.f2,"",0,RepSpec.d1,false);
    EndJob;
  end;
  return;
end;

