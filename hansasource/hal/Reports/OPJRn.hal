external function Boolean HasContactClassification();
external function Boolean HasCategories();
external procedure HTLevCat(string,var string);
external procedure HTCustClass(string,var string);
external function Boolean ContactInGroupClass(string,string,string,string,string,string);
external function Boolean IsEnterprise();
external function Boolean CanRegisterOnMedia(string,Integer);
external procedure HTVends(string, string, var string);
external procedure HT2Per(Date, Date , var string);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external procedure BeginCurncyTotals(var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external procedure HTNr(Integer,Integer,LongInt,LongInt,var string);
external procedure HTCustClass(string,var string);
external procedure HTCustClassType(string,var string);
external function Boolean SetInSet2(string,string);
external procedure ClassTypef(string,string,var Boolean);
external function Boolean GetPMRow(string,var row PMBlock);
external function val EPaySignReq_GetReqWeight(val);
external function val GetOPSignedWeight(LongInt,var string);

external function Boolean HasModCheck();
external function Boolean HasPLIntegratedWithNL();
external function Boolean HasIntegratedNL();

procedure OrdSettings2(Integer notord,Integer ord,Integer recon,Integer bounc,Integer OK,var string res)
BEGIN
  string 255 tstr;
  
  res = "";
  if (notord==1) then begin
    res = USetStr(1326);
  end;  
  if (notord==1 and ord==1 and recon==0) then begin
    tstr = USetStr(1319);
    res = res & tstr;
  end else begin
    if (notord==1 and ord==1 and recon==1) then begin
      tstr = USetStr(1327);
      res = res & tstr;
    end;
  end;
  if (ord==1) then begin
    tstr = USetStr(1328);
    res = res & tstr;
  end;
  if ((notord==1 or ord==1) and recon==1) then begin
    tstr = USetStr(1319);
    res = res & tstr;
  end;
  if (recon==1) then begin
    tstr = USetStr(1329);
    res = res & tstr;
  end;
  if (notord==1 or ord==1 or recon==1) then begin
    if (bounc==1) then begin
      tstr = USetStr(1319);
      res = res & tstr;
      tstr = USetStr(1415);
      res = res & tstr;
    end;
    if ((OK == 1) and (nonblank(res))) then begin
      res = res & USetStr(1319) & USetStr(8193);
    end;
  end;
  if ((OK == 1) and (blank(res))) then begin
    res = USetStr(1138);
  end;
  RETURN;
END;

procedure GetPInvType(Integer pnr, var String pit)
Begin
  if (pnr==kInvoiceTypeNormal or pnr==kInvoiceTypeNormalSpecialSales) begin
    pit = USetStr(1152);
  end;
  if (pnr==kInvoiceTypeCash or pnr==kInvoiceTypeCashInvoiceReceiptPRT) begin
    pit = USetStr(2488);
  end;
  if (pnr==kInvoiceTypeCredit or pnr==kInvoiceTypeCreditSpecialSales) begin
   pit = USetStr(7340);
  end;
  if (pnr==kInvoiceTypeInterest) begin
   pit = USetStr(7341);
  end;
  Return;
end;

function Boolean CheckSuppCode(string accstr,string classif,string cltype,string repspectcustcat,record OPVc OPr)
begin
  Boolean res;
  row OPVc OPrw;
  Integer i,rwcnt;
  record CUVc VEr;
  Boolean test,testf;
    
  res = false;
  test = false;
  rwcnt = MatRowCnt(OPr);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(OPr,i,OPrw);
    if nonblank(accstr) then begin
      if (accstr==OPrw.VECode) then begin
        res = true;
        if blank(classif) and blank(cltype) and blank(repspectcustcat) then begin
          goto L99;
        end;  
      end;
    end;
    VEr.Code = OPrw.VECode; 
    ReadFirstMain(VEr,1,true);
    if (nonblank(classif) or nonblank(cltype) or nonblank(repspectcustcat)) then begin
      if (res==false) then begin
        testf = true;
        if (testf) then begin
          testf = ContactInGroupClass("",repspectcustcat,classif,"SUPP",VEr.VECat,VEr.Classification);
        end;
        if (testf) then begin
          if (nonblank(cltype)) then begin
            test = false;
            ClassTypef(cltype,VEr.Classification,test);
            if (test==true) then begin
              res = true;  
              goto L99;
            end;
          end else begin
            res = true;  
            goto L99;
          end;
        end;
      end;
    end;
  end;  
L99:;  
  CheckSuppCode = res;
  return;
end;

function boolean SortByChequeNr(var array Integer aPos,array LongInt aCheq,Integer rwcnt2)
begin
  Integer i,changing;
  Integer tmppos;
  
  changing = 1;
  while (changing==1) begin
    changing = 0;
    for (i=0; i<rwcnt2-1; i=i+1) begin
      if (aCheq[aPos[i]]>aCheq[aPos[i+1]]) then begin
        changing = 1;
        tmppos = aPos[i];
        aPos[i] = aPos[i+1];
        aPos[i+1] = tmppos;
      end;
    end;
  end;
  return;
end;

global
procedure OPJRn(record RcVc RepSpec)
BEGIN
  Integer ovst;
  Boolean TrHs;
  Boolean VIs, compcodef, currf;
  Integer i,j;
  record OPVc OPr;
  record VIVc VIr;
  record CUVc VEr;
  record TRVc TRr;
  record TRVc TR2r;
  row OPVc OPrw;
  row TRVc TRrw;
  row TRVc TR2rw; 
  Integer rwcnt, rwcnt2;
  val opsum,baseval,basefee;
  val totopsum, accum;
  Integer pmrows,verwcnt;
  Integer PMn;
  Boolean testf,firstf;
  record BFVc BFr;
  row BFVc BFrw;
  record PMBlock PMRec;
  row PMBlock pmrw; 
  LongInt afr,ato;
  string 255 tstr, pinvt, compcode;
  string 20 tcomp,tcomp2;
 //Will be required  string 5 tcurrncy;
  Integer rw;
  record BaseCurBlock bascur;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt;
  val ReqWeight,SignedWeight;
  row PMBlock PMRow;
  record BankVc Bankr;
  longint frChNr,toChNr;
  array Integer aRowNr;
  array LongInt aCheq;
  
  BlockLoad(bascur);
  BlockLoad(PMRec);
  afr = FirstInRange(RepSpec.f1,10);
  ato = LastInRange(RepSpec.f1,10);
  frChNr = StringToLongInt(FirstInRange(RepSpec.f6,10));
  toChNr = StringToLongInt(LastInRange(RepSpec.f6,10));
  if (CanRegisterOnMedia("OPVc",RepSpec.Media)==false) then begin
    goto LOPJRn;
  end;
  OPr.SerNr = afr;
  StartReportJob(USetStr(4081));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  if (RepSpec.ArtMode == 0) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
    Header(rw, USetStr(8311),0);
    OrdSettings2(RepSpec.flags[0],RepSpec.flags[1],RepSpec.flags[2],RepSpec.flags[3],RepSpec.flags[4],tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;  
    HTVends(RepSpec.AccStr,RepSpec.AccStr,tstr);
    Header(rw, tstr,0);
    if (nonblank(RepSpec.f3)) then begin
      tstr = USetStr(1140);
      tstr = tstr & RepSpec.f3;
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    HTNr(4092,4093,afr,ato,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (RepSpec.ArtMode == 1) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
    Header(rw, USetStr(1192),0);
    OrdSettings2(RepSpec.flags[0],RepSpec.flags[1],RepSpec.flags[2],RepSpec.flags[3],RepSpec.flags[4],tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;  
    HTVends(RepSpec.AccStr,RepSpec.AccStr,tstr);
    Header(rw, tstr,0);
    if (nonblank(RepSpec.f3)) then begin
      tstr = USetStr(1140);
      tstr = tstr & RepSpec.f3;
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
    HTNr(4092,4093,afr,ato,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (IsBooks==false) then begin
    HTCustClass(RepSpec.f4,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end; 
    HTCustClassType(RepSpec.f5,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end; 
    if (HasCategories) then begin
      HTLevCat(RepSpec.f7,tstr);
      if (nonblank(tstr)) then begin
        Header(rw,tstr,1);
        rw = rw + 1;
      end;
    end;    
  end;
  EndHeader;
  BeginCurncyTotals(curcnt);
  SetRepCol(2,100);
  SetRepCol(3,200);
  SetRepCol(6,288);
  SetRepCol(4,384);
  if (RepSpec.ArtMode == 0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(4087),false);
    OutString(60,0,USetStr(4088),false);
    OutString(130,0,USetStr(4089),false);
    OutString(200,0,USetStr(4090),false);
    OutString(280,0,USetStr(4091),false);
    EndFormat;
    StartFormat(20);
    OutString(0,0,USetStr(4082),false);
    if (HasIntegratedNL) then begin
      OutString(60,0,USetStr(4083),false);
    end;
    if (HasModCheck) then begin
      OutString(100,0,USetStr(8457),false);
    end;
    OutString(160,0,USetStr(4084),false);
    if (IsEnterprise) then begin
      OutStringAdjustBiDi(390,0,USetStr(4085),true,M4Val,430);
    end;
    OutStringAdjustBiDi(450,0,USetStr(4086),true,M4Val,490);
    EndFormat;
  end;
  if (RepSpec.ArtMode == 1) then begin
    StartFormat(15);
    OutString(0,0,USetStr(8286),false);
    OutString(130,0, USetStr(4122),true);
    OutString(200,0, USetStr(5205),true);
    OutString(205,0, USetStr(5201),false);
    OutString(255,0, USetStr(2358),false);
    OutString(300,0, USetStr(4082),false);
    OutString(400,0,USetStr(8457),true);
    OutStringAdjustBiDi(460,0,USetStr(4086),true,M4Val,500);
    EndFormat;
    Gray_Divider(0,1);   
  end;
  if (RepSpec.ArtMode==2) then begin
    StartFormat(15);
    OutString(0,0,USetStr(4087),false);
    OutString(40,0,USetStr(5201),false);
    OutString(80,0,USetStr(8457),false);
    OutString(140,0,USetStr(4088),false);
    OutString(190,0,USetStr(4089),false);
    OutString(260,0,USetStr(4090),false);
    OutString(340,0,USetStr(4091),false);
    EndFormat;
    StartFormat(20);
    OutString(170,0,USetStr(4084),false);
    OutStringAdjustBiDi(450,0,USetStr(4086),true,M4Val,500);
    EndFormat;
    Gray_Divider(0,1);   
  end;
  pmrows = MatRowCnt(PMRec);
  for (i = 0; i<pmrows; i=i+1) begin
    BFrw.crvval = 0;
    MatRowPut(BFr,i,BFrw);
  end;
  TrHs = true;
  while (LoopMain(OPr,1,TrHs)) begin
    if (ato<>-1) then begin
      if (OPr.SerNr>ato) then begin
        TrHs = false;
      end;
    end;    
    if (TrHs) then begin
      testf = false;
      if ((ato==-1) or (OPr.SerNr<=ato)) then begin testf = true; end;
      if (nonblankdate(RepSpec.sStartDate)) then begin
        if (OPr.TransDate<RepSpec.sStartDate) then begin testf = false; end;
      end;  
      if (nonblankdate(RepSpec.sEndDate)) then begin
        if (OPr.TransDate>RepSpec.sEndDate) then begin testf = false; end;
      end;
      if (testf==true) then begin
        if (nonblank(RepSpec.f3)) then begin
          testf = false;
          rwcnt = MatRowCnt(OPr);
          for (i = 0; i<rwcnt; i=i+1) begin
            MatRowGet(OPr,i,OPrw);
            tstr = OPrw.PayMode;
            if (blank(tstr)) then begin
              tstr = OPr.PayMode;
            end;
            if (RepSpec.f3==tstr) then begin
              testf = true;
            end;
          end;
        end;
      end;
      if (RepSpec.flags[5]!=0) then begin
        testf = false;
        if (GetPMRow(OPr.PayMode,PMRow)) then begin
          if (nonblank(PMRow.BankCode)) then begin
            Bankr.Code = PMRow.BankCode;
            if (ReadFirstMain(Bankr,1,true)) then begin
              if (Bankr.Bank==80) then begin
                ReqWeight = EPaySignReq_GetReqWeight(OPr.CurPayVal);
                SignedWeight = GetOPSignedWeight(OPr.SerNr,tstr);
                if (SignedWeight<ReqWeight) then begin
                  testf = true;
                end;
              end;
            end;
          end;
        end;
      end;
      if (testf) then begin
        testf = false;
        if (RepSpec.flags[0]==1) then begin
          if (OPr.DoneFlag==0) then begin testf = true; end;
          if (OPr.OrderedFlag<>0) then begin testf = false; end;
        end;
        if (RepSpec.flags[1]==1) then begin
          if (OPr.OrderedFlag<>0) then begin testf = true; end;
          if (OPr.DoneFlag<>0) then begin testf = false; end;
          if (OPr.RejectedFlag<>0) then begin testf = false; end;
        end;
        if (RepSpec.flags[4]==1) then begin
          if (OPr.DoneFlag<>0) then begin testf = true; end;
          if (OPr.RejectedFlag<>0) then begin testf = false; end;
        end;
        if (RepSpec.flags[3]==1) then begin
          if (OPr.RejectedFlag<>0) then begin testf = true; end;
        end;
        if (nonblank(RepSpec.AccStr) or nonblank(RepSpec.f4) or nonblank(RepSpec.f5) or nonblank(RepSpec.f7)) then begin
          if (CheckSuppCode(RepSpec.AccStr,RepSpec.f4,RepSpec.f5,RepSpec.f7,OPr)==false) then begin
            testf = false;
          end;
        end;
        if (nonblank(RepSpec.TransStr)) then begin
          if (RepSpec.TransStr!=OPr.PayNumber) then begin
            testf = false;
          end;
        end;        
      end;
      if (OPr.Invalid!=0) then begin testf = false; end;
      if (testf) then begin
        firstf = true;
        if (RepSpec.ArtMode == 0) then begin
          PMn = 0;
          opsum = 0;
          rwcnt = MatRowCnt(OPr);
          for (i=0 ; i<rwcnt; i=i+1) begin
            MatRowGet(OPr,i,OPrw);
            testf = true;
            if (nonblank(RepSpec.f3)) then begin
              testf = false;
              tstr = OPrw.PayMode;
              if (blank(tstr)) then begin
                tstr = OPr.PayMode;
              end;
              if (RepSpec.f3==tstr) then begin
                testf = true;
              end;
            end;
            if (nonblank(RepSpec.AccStr)) then begin
              if (RepSpec.AccStr<>OPrw.VECode) then begin
                testf = false;
              end;
            end;
            if (nonblank(RepSpec.f6)) then begin
              if (OPrw.ChequeNr==-1) then begin
                testf = false;
              end else begin
                if ((OPrw.ChequeNr<frChNr) or (OPrw.ChequeNr>toChNr)) then begin
                  testf = false;
                end;
              end;
            end;
            if (testf==true) then begin 
              if (nonblank(RepSpec.f4) or nonblank(RepSpec.f5) or nonblank(RepSpec.f7)) then begin
                VEr.Code = OPrw.VECode;
                if ReadFirstMain(VEr,1,true) then begin end;
                if (testf) then begin
                  testf = ContactInGroupClass("",RepSpec.f7,RepSpec.f4,"SUPP",VEr.VECat,VEr.Classification);
                end;
                if (testf) then begin
                  if (nonblank(RepSpec.f5)) then begin
                    testf = false;
                    ClassTypef(RepSpec.f5,VEr.Classification,testf);
                  end;
                end;
              end;  
            end;
            if (testf==true) then begin
              if (firstf) then begin
                Gray_Divider(0,1);
                StartFormat(15);
                OutLongInt(0,"DblOPVc",OPr.SerNr,false);
                OutDate(60,0,OPr.RegDate,false);
                OutDate(130,0,OPr.TransDate,false);
                OutString(200,0,OPr.Sign,false);
                OutString(280,0,OPr.BankAcc,false);
                EndFormat;
                firstf = false;
              end;
              VIr.SerNr = OPrw.VISerNr;
              VIs = ReadFirstMain(VIr,1,true);
              ovst = OPrw.ovst;
              baseval = OPrw.B1BankVal;
              if (blank(baseval)) then begin
                if (OPrw.BankCurncy==bascur.BaseCur1) then begin
                  baseval = OPrw.BankVal;
                end else begin
                  baseval = MulWithRateToBase1(OPrw.RecCurncy,OPr.TransDate,OPrw.RecVal,DefaultCurRoundOff);
                end;
              end;
              basefee = MulWithRateToBase1(OPrw.BankCurncy,OPr.TransDate,OPrw.BankFeeVal,DefaultCurRoundOff);
              if ((ovst==0) and (OPrw.stp<>5)) then begin
                opsum = opsum + baseval + basefee;
              end;
              StartFormat(15);
              OutLongIntOvst(0,0,OPrw.VISerNr,false,ovst);
              if (HasIntegratedNL) then begin
                OutStringOvst(60,0,OPrw.BankAcc,false,ovst);
              end;
              if (HasModCheck) then begin
                OutLongIntOvst(100,0,OPrw.ChequeNr,false,ovst);
              end;
              OutStringOvst(160,0,OPrw.Comment,false,ovst); 
              if (OPrw.stp==5) then begin
                OutValOvstBiDi(390,0,OPrw.RecVal,M4Val,true,ovst,430); 
              end  else begin
                OutValOvstBiDi(450,0,OPrw.RecVal,M4Val,true,ovst,490); 
              end;  
              OutStringOvst(455,0,OPrw.RecCurncy,false,ovst); 
              EndFormat;
              AddCurncyTotals(acur,av1,curcnt,OPrw.RecCurncy,OPrw.RecVal);
              if (OPrw.BankFeeVal<>0) then begin
                StartFormat(15);
                OutStringOvst(160,0,USetStr(4095),false,ovst); 
                OutValOvstBiDi(450,0,OPrw.BankFeeVal,M4Val,true,ovst,490); 
                OutStringOvst(455,0,OPrw.BankCurncy,false,ovst); 
                EndFormat;
              end;
              if ((ovst==0) and (OPrw.stp!=5)) then begin
                tstr = OPrw.PayMode;
                if (blank(tstr)) then begin
                  tstr = OPr.PayMode;
                end;
                totopsum = totopsum + baseval + basefee;
                if (nonblank(tstr)) then begin
                  for (j = 0; j<pmrows; j=j+1) begin
                    MatRowGet(PMRec,j,pmrw);
                    MatRowGet(BFr,j,BFrw);
                    if (pmrw.Code==tstr) then begin
                      BFrw.crvval = BFrw.crvval + baseval + basefee;
                      MatRowPut(BFr,j,BFrw);
                    end;
                  end;
                end;
              end;
            end;
          end;
        end;
        if (RepSpec.ArtMode == 1) then begin
          PMn = 0;
          opsum = 0;
          pinvt = "";
          rwcnt = MatRowCnt(OPr);
          for (i=0 ; i<rwcnt; i=i+1) begin
            MatRowGet(OPr,i,OPrw);
            testf = true;
            if (nonblank(RepSpec.f3)) then begin
              testf = false;
              tstr = OPrw.PayMode;
              if (blank(tstr)) then begin
                tstr = OPr.PayMode;
              end;
              if (RepSpec.f3==tstr) then begin
                testf = true;
              end;
            end;
            if (nonblank(RepSpec.AccStr)) then begin
              if (RepSpec.AccStr<>OPrw.VECode) then begin
                testf = false;
              end;
            end;
            if (nonblank(RepSpec.f6)) then begin
              if (OPrw.ChequeNr==-1) then begin
                testf = false;
              end else begin
                if ((OPrw.ChequeNr<frChNr) or (OPrw.ChequeNr>toChNr)) then begin
                  testf = false;
                end;
              end;
            end;
            if (testf==true) then begin 
              VEr.Code = OPrw.VECode;
              if ReadFirstMain(VEr,1,true) then begin end;
              if (nonblank(RepSpec.f4) or nonblank(RepSpec.f5) or nonblank(RepSpec.f7)) then begin
                if (testf) then begin
                  testf = ContactInGroupClass("",RepSpec.f7,RepSpec.f4,"SUPP",VEr.VECat,VEr.Classification);
                end;
                if (testf) then begin
                  if (nonblank(RepSpec.f5)) then begin
                    testf = false;
                    ClassTypef(RepSpec.f5,VEr.Classification,testf);
                  end;
                end;
              end;  
            end;
            if (testf==true) then begin
              VIr.SerNr = OPrw.VISerNr;
              VIs = ReadFirstMain(VIr,1,true);
              TRrw.DueDate = VIr.InvDate;
              TRrw.Comment = VEr.Name;
              GetPInvType(VIr.InvType,pinvt);
              TRrw.Sign = pinvt;
              ovst = OPrw.ovst;
              baseval = MulWithRateToBase1(OPrw.RecCurncy,OPr.TransDate,OPrw.RecVal,DefaultCurRoundOff);
              basefee = MulWithRateToBase1(OPrw.BankCurncy,OPr.TransDate,OPrw.BankFeeVal,DefaultCurRoundOff);
              if ((ovst==0) and (OPrw.stp<>5)) then begin
                opsum = opsum + baseval + basefee;
              end;
              rwcnt2 = MatRowCnt(TRr);
//              if (OPrw.stp<>5) then begin
              TRrw.stp = OPrw.stp;
              TRrw.CompCode = OPrw.VECode;
              TRrw.BRSerNr = OPrw.VISerNr;
              if (OPrw.stp<>5) then begin
                TRrw.DebVal = OPrw.RecVal;
              end else begin
                TRrw.DebVal = -OPrw.RecVal;
              end;
              TRrw.Curncy = OPrw.RecCurncy;
              AddCurncyTotals(acur,av1,curcnt,OPrw.RecCurncy,OPrw.RecVal);
              TRrw.SerNr = OPrw.ChequeNr;
              TRrw.Objects = OPr.SerNr;//Trans No
              TRrw.UpdDate= OPr.TransDate;//PI Date
              MatRowPut(TRr,rwcnt2,TRrw);
              if (OPrw.BankFeeVal<>0) then begin
                TRrw.CompCode = OPrw.VECode;
                TRrw.Curncy = OPrw.BankCurncy;
                TRrw.BRSerNr = -1;
                TRrw.DebVal = OPrw.BankFeeVal;
                TRrw.SerNr = -1;
                TRrw.Objects = USetStr(4095);
                TRrw.UpdDate = OPr.RegDate;
                MatRowPut(TRr,rwcnt2+1,TRrw);
              end;
              if ((ovst==0) and (OPrw.stp!=5)) then begin
                tstr = OPrw.PayMode;
                if (blank(tstr)) then begin
                  tstr = OPr.PayMode;
                end;
                if (nonblank(tstr)) then begin
                  for (j = 0; j<pmrows; j=j+1) begin
                    MatRowGet(PMRec,j,pmrw);
                    MatRowGet(BFr,j,BFrw);
                    if (pmrw.Code==tstr) then begin
                      if (OPrw.BankCurncy==bascur.BaseCur1) then begin
                        baseval = OPrw.BankVal;
                      end else begin
                        baseval = MulWithRateToBase1(OPrw.RecCurncy,OPr.TransDate,OPrw.RecVal,DefaultCurRoundOff);
                      end;
                      basefee = MulWithRateToBase1(OPrw.BankCurncy,OPr.TransDate,OPrw.BankFeeVal,DefaultCurRoundOff);
                      BFrw.crvval = BFrw.crvval + baseval + basefee;
                      totopsum = totopsum + baseval + basefee;
                      MatRowPut(BFr,j,BFrw);
                    end;
                  end;
                end;
              end;
//              end;
            end;
          end;
        end;
        if (RepSpec.ArtMode == 2) then begin
          PMn = 0;
          opsum = 0;
          rwcnt = MatRowCnt(OPr);
          for (i=0 ; i<rwcnt; i=i+1) begin
            MatRowGet(OPr,i,OPrw);
            testf = true;
            if (nonblank(RepSpec.f3)) then begin
              testf = false;
              tstr = OPrw.PayMode;
              if (blank(tstr)) then begin
                tstr = OPr.PayMode;
              end;
              if (RepSpec.f3==tstr) then begin
                testf = true;
              end;
            end;
            if (nonblank(RepSpec.AccStr)) then begin
              if (RepSpec.AccStr<>OPrw.VECode) then begin
                testf = false;
              end;
            end;
            if (OPrw.ChequeNr==-1) then begin
              testf = false;
            end;
            if (nonblank(RepSpec.f6)) then begin
              if ((OPrw.ChequeNr<frChNr) or (OPrw.ChequeNr>toChNr)) then begin
                testf = false;
              end;
            end;
            if (testf==true) then begin 
              if (nonblank(RepSpec.f4) or nonblank(RepSpec.f5) or nonblank(RepSpec.f7)) then begin
                VEr.Code = OPrw.VECode;
                if ReadFirstMain(VEr,1,true) then begin end;
                if (testf) then begin
                  testf = ContactInGroupClass("",RepSpec.f7,RepSpec.f4,"SUPP",VEr.VECat,VEr.Classification);
                end;
                if (testf) then begin
                  if (nonblank(RepSpec.f5)) then begin
                    testf = false;
                    ClassTypef(RepSpec.f5,VEr.Classification,testf);
                  end;
                end;
              end;  
            end;
            if (testf==true) then begin
              VIr.SerNr = OPrw.VISerNr;
              VIs = ReadFirstMain(VIr,1,true);
              ovst = OPrw.ovst;
              baseval = MulWithRateToBase1(OPrw.RecCurncy,OPr.TransDate,OPrw.RecVal,DefaultCurRoundOff);
              basefee = MulWithRateToBase1(OPrw.BankCurncy,OPr.TransDate,OPrw.BankFeeVal,DefaultCurRoundOff);
              if ((ovst==0) and (OPrw.stp<>5)) then begin
                opsum = opsum + baseval + basefee;
              end;
              rwcnt2 = MatRowCnt(TRr);
              TRrw.stp = OPrw.stp;
              TRrw.Objects = OPr.SerNr;//Trans No
              TRrw.DueDate = OPr.RegDate;
              TRrw.UpdDate= OPr.TransDate;//PI Date
              TRrw.Sign = OPr.Sign;
              TRrw.BRSerNr = OPrw.VISerNr;
              TRrw.SerNr = OPrw.ChequeNr;
              TRrw.Comment = OPrw.Comment;
              TRrw.TFromCode = OPr.BankAcc;
              if (OPrw.stp<>5) then begin
                TRrw.DebVal = OPrw.RecVal;
              end else begin
                TRrw.DebVal = -OPrw.RecVal;
              end;
              TRrw.Curncy = OPrw.RecCurncy;
              AddCurncyTotals(acur,av1,curcnt,OPrw.RecCurncy,OPrw.RecVal);
              MatRowPut(TRr,rwcnt2,TRrw);
              aRowNr[rwcnt2] = rwcnt2;
              aCheq[rwcnt2] = OPrw.ChequeNr;
              if (OPrw.BankFeeVal<>0) then begin
                TRrw.Curncy = OPrw.BankCurncy;
                TRrw.BRSerNr = -1;
                TRrw.DebVal = OPrw.BankFeeVal;
                TRrw.SerNr = OPrw.ChequeNr;
                TRrw.Comment = USetStr(4095);
                MatRowPut(TRr,rwcnt2+1,TRrw);
                aRowNr[rwcnt2+1] = rwcnt2+1;
                aCheq[rwcnt2+1] = OPrw.ChequeNr;
              end;
              if ((ovst==0) and (OPrw.stp!=5)) then begin
                tstr = OPrw.PayMode;
                if (blank(tstr)) then begin
                  tstr = OPr.PayMode;
                end;
                if (nonblank(tstr)) then begin
                  for (j = 0; j<pmrows; j=j+1) begin
                    MatRowGet(PMRec,j,pmrw);
                    MatRowGet(BFr,j,BFrw);
                    if (pmrw.Code==tstr) then begin
                      if (OPrw.BankCurncy==bascur.BaseCur1) then begin
                        baseval = OPrw.BankVal;
                      end else begin
                        baseval = MulWithRateToBase1(OPrw.RecCurncy,OPr.TransDate,OPrw.RecVal,DefaultCurRoundOff);
                      end;
                      basefee = MulWithRateToBase1(OPrw.BankCurncy,OPr.TransDate,OPrw.BankFeeVal,DefaultCurRoundOff);
                      BFrw.crvval = BFrw.crvval + baseval + basefee;
                      totopsum = totopsum + baseval + basefee;
                      MatRowPut(BFr,j,BFrw);
                    end;
                  end;
                end;
              end;
            end;
          end;
          if (rwcnt2 > 1) then begin
            SortByChequeNr(aRowNr,aCheq,MatRowCnt(TRr));
          end;
        end;
        if (RepSpec.ArtMode == 0) then begin
          if (opsum<>0) then begin
            Black_Divider(350,1);
            StartFormat(15);
            OutValBiDi(450,0,opsum,M4Val,true,490);
            EndFormat;
          end;
        end;
      end;
    end;
  end;
  if (RepSpec.ArtMode == 1) then begin
    TrHs = true;
    ResetLoop(TR2r);
    VEr.Code = "";
    TrHs = true;
    while (LoopMain(VEr,1,TrHs)) begin//!!! loop over all supleier ?     
      rwcnt = MatRowCnt (TRr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(TRr,i,TRrw);
        if (TRrw.CompCode == VEr.Code) then begin
          verwcnt = MatRowCnt(TR2r);
          TR2rw.Sign = TRrw.Sign;
          TR2rw.DueDate = TRrw.DueDate;
          TR2rw.CompCode = TRrw.CompCode;
          TR2rw.BRSerNr = TRrw.BRSerNr; 
          TR2rw.Comment = TRrw.Comment;
          TR2rw.DebVal = TRrw.DebVal;
          TR2rw.Curncy = TRrw.Curncy;
          TR2rw.SerNr = TRrw.SerNr;
          TR2rw.Objects = TRrw.Objects;//Trans No
          TR2rw.UpdDate = TRrw.UpdDate;//PI Date
          TR2rw.stp = TRrw.stp;
          MatRowPut(TR2r,verwcnt,TR2rw);
        end;
      end;
    end;
    rwcnt2 = MatRowCnt(TR2r);
    accum = 0;
    currf = true;
    for (i=0 ; i<rwcnt2; i=i+1) begin
      compcodef = false;
      compcode = TR2rw.CompCode;
      MatRowGet(TR2r,i,TR2rw);
      if (compcode <> TR2rw.CompCode) or (I== 0) then begin
        StartFormat(15);
        OutString(0,0,TR2rw.Comment,false);
        accum = 0;
        EndFormat;
      end;      
      StartFormat(15);
      OutString(0,0,TR2rw.CompCode,false);
      OutDate(130,0,TR2rw.UpdDate,true);//Pay Date
      OutDate(200,0,TR2rw.DueDate,true);
      OutLongInt(205,0,TR2rw.BRSerNr,false);
      OutString(255,0,TR2rw.Sign,false);
      OutString(300,0,TR2rw.Objects,false);//Ser No
      OutLongInt(400,0,TR2rw.SerNr,true);
      OutValBiDi(460,0,TR2rw.DebVal,M4Val,true,500);      
      OutString(465,0,TR2rw.Curncy,false);
      EndFormat;
      VEr.Code = TR2rw.CompCode;
      if (ReadFirstMain(VEr,1,true)) then begin
      end;          
      baseval = MulWithRateToBase1(TR2rw.Curncy,TR2rw.UpdDate,TR2rw.DebVal,DefaultCurRoundOff);      
      if (TR2rw.stp<>5) then begin
        accum = accum + baseval;      
      end else begin
//        accum = accum + baseval;      
      end;
      if (i+1 <= rwcnt2) then begin
        MatRowGet(TR2r,i+1,TR2rw);
        tcomp = TR2rw.CompCode;
      end else begin
        tcomp = "";
      end;
      MatRowGet(TR2r,i,TR2rw);
      tcomp2 = TR2rw.CompCode;
      //tcurrncy = TR2rw.Curncy;
      if (tcomp2 <> tcomp) then begin
        compcodef = true;
      end;
      if (compcodef) or (tcomp == "") then begin 
        Gray_Divider(330,1);
        StartFormat(15);
        if ((RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel)) then begin 
          OutString(0,0,"",false);
          OutString(130,0,"",true);
          OutString(200,0,"",true);
          OutString(205,0,"",false);
          OutString(255,0,"",false);
          OutString(300,0,"",false);
        end;
        OutString(400,0,USetStr(4094),false);
        OutValBiDi(460,0,accum,M4Val,true,500);
        EndFormat;
      end;
    end;
  end;
  if (RepSpec.ArtMode == 2) then begin
    TrHs = true;
    accum = 0;
    currf = true;
    rwcnt = MatRowCnt(TRr);
    for (i=0; i<rwcnt; i= i+1) begin
      MatRowGet(TRr,aRowNr[i],TRrw);
      if (TRrw.Comment <> USetStr(4095)) then begin
        StartFormat(15);
        OutString(0,"DblOPVc",TRrw.Objects,false);
        OutLongInt(40,0,TRrw.BRSerNr,false);
        OutLongInt(80,0,TRrw.SerNr,false);
        OutDate(167,0,TRrw.UpdDate,true);//Pay Date
        OutDate(225,0,TRrw.DueDate,true);
        OutString(260,0,TRrw.Sign,false);
        OutString(340,0,TRrw.TFromCode,false);
        EndFormat;
      end;
      StartFormat(15);
      OutStringOvst(170,0,TRrw.Comment,false,ovst); 
      if (OPrw.stp==5) then begin
        OutValOvst(390,0,TRrw.DebVal,M4Val,true,ovst); 
      end  else begin
        OutValOvst(450,0,TRrw.DebVal,M4Val,true,ovst); 
      end;  
      OutStringOvst(455,0,TRrw.Curncy,false,ovst); 
      EndFormat;
      baseval = MulWithRateToBase1(TRrw.Curncy,TRrw.UpdDate,TRrw.DebVal,DefaultCurRoundOff);      
      if (TR2rw.stp<>5) then begin
        accum = accum + baseval;      
      end;
    end;
    Gray_Divider(330,1);
    StartFormat(15);
    if ((RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel)) then begin 
      OutString(0,0,"",false);
      OutString(130,0,"",true);
      OutString(200,0,"",true);
      OutString(205,0,"",false);
      OutString(255,0,"",false);
      OutString(300,0,"",false);
    end;
    OutString(400,0,USetStr(4094),false);
    OutVal(460,0,accum,M4Val,true);
    EndFormat;
  end;
  if (RepSpec.ArtMode == 0) then begin
    Gray_Divider(0,1);
    StartFormat(10);
    EndFormat;
    for (i=0; i<pmrows; i=i+1) begin
      MatRowGet(PMRec,i,pmrw);
      MatRowGet(BFr,i,BFrw);
      if (BFrw.crvval<>0) then begin  
        StartFormat(15);
        OutString(50,0,pmrw.Code,false);
        OutString(100,0,pmrw.Comment,false);
        OutVal(370,0,BFrw.crvval,M4Val,true);
        EndFormat;
      end;
    end;
    Black_Divider(6,370);
    StartFormat(15);
    OutString(100,0,USetStr(2429),false); 
    OutVal(370,0,totopsum,M4Val,true);
    EndFormat;
  end;
  if (RepSpec.ArtMode > 0) then begin
    Gray_Divider(0,1);
    StartFormat(10);
    EndFormat;
    for (i=0; i<pmrows; i=i+1) begin
      MatRowGet(PMRec,i,pmrw);
      MatRowGet(BFr,i,BFrw);
      if (BFrw.crvval<>0) then begin  
        StartFormat(15);
        OutString(50,0,pmrw.Code,false);
        OutString(100,0,pmrw.Comment,false);
        OutVal(370,0,BFrw.crvval,M4Val,true);
        EndFormat;
      end;
    end;
    Black_Divider(6,370);
    StartFormat(15);
    OutString(100,0,USetStr(2429),false); 
    OutVal(370,0,totopsum,M4Val,true);
    EndFormat;
  end;
  StartFormat(15);
  EndFormat;
  Black_Divider(0,1);
  if (IsBooks==false) then begin
    StartFormat(15);
    OutString(50,0,USetStr(4096),false);
    EndFormat;
  end;
  PrintCurncyTotals(acur,av1,av2,av3,curcnt,370,-1,-1,250,false,RepSpec.PocketPC);
  StartFormat(15);
  EndFormat;
  EndJob; 
LOPJRn:;
  RETURN;
END;
