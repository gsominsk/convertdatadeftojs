external procedure YcToStr(Integer,var string);
external procedure GetAccPeriodComments(Integer,Date,var string,var string,var string,var string,var string,var string,var string);
external procedure PrintAgedLine(val,val,val,val,val,val,val,val,val,val,val,Integer,Integer,string);
external function string 255 GetSupplierOnAccountAC(string);
external procedure GetAPAcc(string,var string);
external function LongInt DateDiff(Date,Date);
external procedure SumAged(Date,Integer,Integer,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val);
external function Integer GetIntYc(Date);
external procedure HTObj(string,var string);
external procedure HTOT(string,var string);
external function Boolean ObjectTypeMatch(string,string);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure HTVends(string, string, var string);
external procedure HTInvSel(Integer, var string);
external procedure HTAmount(Integer, var string);
external procedure HTSort2(Integer, var string);
external procedure HTLevCat(string, var string);
external procedure HTPLDetailLevel(Integer,var string);
external procedure HTSaleMan(string, var string);
external function Integer TypeOfCurncy(var string,var Integer);
external procedure HTCustClass(string,var string);
external procedure HTCustClassType(string,var string);

global
procedure PrintHeaderAP1(string frve,string tove,record RcVc RepSpec)
BEGIN
   string 255 tstr;
   Integer rw;

   rw = 1;
   HTVends(frve,tove,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   HTInvSel(RepSpec.flags[0],tstr);
   Header(rw,tstr,0);
   HTAmount(RepSpec.flags[2],tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   HTPLDetailLevel(RepSpec.ArtMode,tstr);
   Header(rw,tstr,0);
   HTSort2(RepSpec.flags[1],tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   HTLevCat(RepSpec.f3,tstr);
   if (nonblank(tstr)) then begin
     Header(rw,tstr,1);
     rw = rw + 1;
   end;  
   if (IsBooks==false) then begin
     HTCustClass(RepSpec.f4,tstr);
     if (nonblank(tstr)) then begin
       Header(rw,tstr,1);
       rw = rw + 1;
     end; 
     HTCustClassType(RepSpec.f5,tstr);
     if (nonblank(tstr)) then begin
       Header(rw,tstr,1);
       rw = rw + 1;   
     end;
   end;
   if (nonblank(RepSpec.AccStr)) then begin
     HTSaleMan(RepSpec.AccStr,tstr);
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
   tstr = RepSpec.d1;
   if (nonblank(tstr)) then begin
     Header(rw,tstr,1);
     rw = rw + 1;
   end;  
  if (RepSpec.ObjStr<>"") then begin
    HTObj(RepSpec.ObjStr,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end else begin
    if (RepSpec.ObjType<>"") then begin
      HTOT(RepSpec.ObjType,tstr);
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;  
  RETURN;
END;

procedure PrintPLAgedHeader(record RcVc RepSpec,Integer nrofper,Boolean fraserf)
begin
  record AgedBlock AgedRec;
  string 30 tstr1,tstr2,tstr3,tstr4,tstr5,tstr6,tstr7;
  LongInt p1,p2;
  Date agedate;

  BlockLoad(AgedRec);  
  if (AgedRec.UseAccPeriod) then begin
    agedate = RepSpec.d1;
    if (blankdate(agedate)) then begin agedate = CurrentDate; end;
    GetAccPeriodComments(0,agedate,tstr1,tstr2,tstr3,tstr4,tstr5,tstr6,tstr7);
    if (nrofper<=1) then begin
      tstr2 = tstr2 & " - ";
    end;
    if (nrofper<=2) then begin
      tstr3 = tstr3 & " - ";
    end;
    if (nrofper<=3) then begin
      tstr4 = tstr4 & " - ";
    end;
    if (nrofper<=4) then begin
      tstr5 = tstr5 & " - ";
    end;
    if (nrofper<=5) then begin
      tstr6 = tstr6 & " - ";
    end;
    tstr7 = tstr7 & " - ";
    StartFormat(15);
    OutString(0,0,USetStr(4042),false);
    OutString(50,0,USetStr(4049),false);
/*    
    if (fraserf) then begin
      OutString(150,0,USetStr(6924),false);
    end;
*/    
    if (AgedRec.ActualInvoices==0) then begin
      OutStringAdjust(2,0,USetStr(4051),true,M4Val);
    end else begin
      OutString(175,0,USetStr(4051),true);
      OutStringAdjust(2,0,USetStr(4059),true,M4Val);
    end;
    OutStringAdjust(3,0,tstr1,true,M4Val);
    OutStringAdjust(4,0,tstr2,true,M4Val);
    OutStringAdjust(5,0,tstr3,true,M4Val);
    if (nrofper>3) then begin
      OutStringAdjust(6,0,tstr4,true,M4Val);
    end;
    if (nrofper>4) then begin
      OutStringAdjust(7,0,tstr5,true,M4Val);
    end;
    if (nrofper>5) then begin
      OutStringAdjust(8,0,tstr6,true,M4Val);
    end;
    if (nrofper>6) then begin
      OutStringAdjust(9,0,tstr7,true,M4Val);
    end;
    if (RepSpec.ArtMode==5) then begin
      if (RepSpec.flags[2]==1) then begin
        OutStringAdjustBiDi(464,0,USetStr(2434),true,M4Val,504);
      end else begin
        OutStringAdjustBiDi(1,0,USetStr(2434),true,M4Val,520);
      end;
    end else begin
      if (RepSpec.flags[2]==1) then begin
        OutStringAdjustBiDi(464,0,USetStr(2424),true,M4Val,504);
      end else begin
        OutStringAdjustBiDi(1,0,USetStr(2424),true,M4Val,520);
      end;
    end;
    EndFormat;
  end else begin
    p1 = AgedRec.Per1;
    p2 = AgedRec.Per2;
    if (p1==-1) then begin p1 = 15; end;
    if (p2==-1) then begin p2 = 30; end;
    tstr1 = "0 - " & p1;
    tstr2 = "" & p1+1 & " - " & p2;
    tstr3 = "" & p2+1 & " - "; 
    if (AgedRec.Per3>-1) then begin tstr3 = tstr3 & AgedRec.Per3; end;
    tstr4 = "" & AgedRec.Per3+1 & " - ";
    if (AgedRec.Per4>-1) then begin tstr4 = tstr4 & AgedRec.Per4; end;
    tstr5 = "" & AgedRec.Per4+1 & " - ";
    if (AgedRec.Per5>-1) then begin tstr5 = tstr5 & AgedRec.Per5; end;
    tstr6 = "" & AgedRec.Per5+1 & " - ";
    if (AgedRec.Per6>-1) then begin tstr6 = tstr6 & AgedRec.Per6; end;
    tstr7 = "" & AgedRec.Per6+1 & " - ";
    StartFormat(15);
    OutString(0,0,USetStr(4042),false);
    OutString(50,0,USetStr(4049),false);
    if (fraserf) then begin
      OutString(150,0,USetStr(6924),false);
    end;
    OutStringAdjust(2,0,USetStr(4051),true,M4Val);
    OutStringAdjust(3,0,tstr1,true,M4Val);
    OutStringAdjust(4,0,tstr2,true,M4Val);
    OutStringAdjust(5,0,tstr3,true,M4Val);
    if (nrofper>2) then begin
      OutStringAdjust(6,0,tstr4,true,M4Val);
    end;
    if (nrofper>3) then begin
      OutStringAdjust(7,0,tstr5,true,M4Val);
    end;
    if (nrofper>4) then begin
      OutStringAdjust(8,0,tstr6,true,M4Val);
    end;
    if (nrofper>5) then begin
      OutStringAdjust(9,0,tstr7,true,M4Val);
    end;
    if (RepSpec.flags[2]==1) then begin
      OutStringAdjustBiDi(464,0,USetStr(2424),true,M4Val,504);
    end else begin
      OutStringAdjustBiDi(1,0,USetStr(2424),true,M4Val,520);
    end;
    EndFormat;
  end;
  Gray_Divider(0,1);
  return;
end;

global
procedure PrintHeaderAP2(record RcVc RepSpec,Integer nrofper)
BEGIN
  LongInt p1,p2;
  record AgedBlock AgedRec;
  string 255 tstr,tstr1,tstr2,tstr3;
  Boolean fraserf;
      
  fraserf = false;    
  BlockLoad(AgedRec);
  if (RepSpec.ArtMode==0) then begin
    StartFormat(15);
     OutString(0,0,USetStr(4042),false);
     OutString(100,0,USetStr(4049),false);
    EndFormat;
    StartFormat(15);
     OutString(15,0,USetStr(4043),false);
     if (RepSpec.flags[5]==0) then begin
       OutString(185,0,USetStr(4003),false);
     end else begin
       OutString(185,0,USetStr(4011),false);
     end;
     OutString(310,0,USetStr(4044),true);
     OutStringAdjustBiDi(380,0,USetStr(4046),true,M4Val,420);
     if (RepSpec.flags[2]==0) then begin
       OutStringAdjustBiDi(425,0,USetStr(3201),true,M4Val,465);
     end;
     OutStringAdjustBiDi(480,0,USetStr(4047),true,M4Val,520);
    EndFormat;
  end;
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
     OutString(0,0,USetStr(4042),false);
     OutString(100,0,USetStr(4049),false);
    EndFormat; 
    StartFormat(15);
     OutString(20,0,USetStr(4043),false);
     if (RepSpec.flags[5]==0) then begin
       OutString(150,0,USetStr(4003),false);
     end else begin
       OutString(150,0,USetStr(4011),false);
     end;
     OutString(230,0,USetStr(4044),false);
     OutString(345,0,USetStr(4045),true);
     OutString(450,0,USetStr(4046),true);
    EndFormat;
  end;
  if ((RepSpec.ArtMode==2) or (RepSpec.ArtMode==5)) then begin
    PrintPLAgedHeader(RepSpec,nrofper,fraserf);
  end;
  if (RepSpec.ArtMode==3) then begin
      StartFormat(15);
      OutString(0,0,USetStr(4042),false);
      OutStringAdjustBiDi(480,0,USetStr(4047),true,M4Val,520);
      EndFormat;
      Gray_Divider(0,1);
  end;
  if (RepSpec.ArtMode==4) or (RepSpec.ArtMode==6) then begin
      StartFormat(15);
      OutString(0,0,USetStr(4042),false);
//      OutString(200,0,USetStr(4043),false);//, this is very wrong
      OutString(260,0,USetStr(2528),true); 
      OutString(320,0,USetStr(2440),true);
      OutString(400,0,USetStr(2439),true);
      OutString(480,0,USetStr(2529),true);
      EndFormat;
      Gray_Divider(0,1);
  end;
  RETURN;
END;

global
procedure PrintPrepaymentsNrsOP(record RcVc RepSpec,Boolean curncyf,string vecode,Boolean backdate,Integer pos1,Integer pos2)
BEGIN
  record APPayHistVc APPayHistr; 
  record OPPVc APPayr;
  Boolean found,testf;
  string 255 tstr,curncycode;
  record OPVc OPr;
  row OPVc OPrw;
  record CLOutVc CLOutr;
  row CLOutVc CLOutrw;
  record CLInVc CLInr;
  row CLInVc CLInrw;
  Integer i,rwcnt;
  LongInt prepno;
  val prepbal;
  
  if (backdate==false) then begin
    found = true;
    APPayr.VECode = vecode;
    ResetLoop(APPayr);
    while LoopKey("VECode",APPayr,1,found) begin
      if (APPayr.VECode<>vecode) then begin 
        found = false; 
      end;
      if (found) then begin
        testf = true;
        if (nonblank(RepSpec.CurncyCode)) then begin
          if (APPayr.CurncyCode!=RepSpec.CurncyCode) then begin          
            testf = false;
          end;
        end;
        if (testf) then begin
          APPayHistr.VEPNr = APPayr.SerNr;
          ReadFirstMain(APPayHistr,1,true);
          
          if ((nonblank(RepSpec.ObjType)) or (nonblank(RepSpec.ObjStr))) then begin
            OPr.SerNr = APPayHistr.SerNr;
            if (ReadFirstMain(OPr,1,true)) then begin
              rwcnt = MatRowCnt(OPr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(OPr,i,OPrw);
                if (OPrw.PrepayNr==APPayr.SerNr) then begin
                  if (nonblank(RepSpec.ObjType)) then begin
                    testf = ObjectTypeMatch(OPrw.Objects,RepSpec.ObjType);
                  end;
                  if (nonblank(RepSpec.ObjStr)) then begin
                    testf = SetInSet(RepSpec.ObjStr,OPrw.Objects);
                  end;
                end;
              end;
            end;
          end;
        end;
        if (nonblank(RepSpec.FirstAcc)) then begin
          if (nonblank(APPayHistr.APAcc)) then begin
            if (RepSpec.FirstAcc!=APPayHistr.APAcc) then begin
              testf = false;
            end;
          end else begin
            if (GetSupplierOnAccountAC(APPayHistr.VECode)!=RepSpec.FirstAcc) then begin
              testf = false;
            end;
          end;
        end;                  
        if (testf) then begin
          StartFormat(15);
          tstr = APPayr.SerNr;
          OutStringID(pos1,"DblPrHisPL",tstr,false,vecode);
          if (curncyf==false) then begin
            OutVal(pos2,0,-APPayr.BookRVal,M4Val,true);
          end else begin
            OutVal(pos2,0,-APPayr.PPVal,M4Val,true);
            OutString(pos2+10,0,APPayr.CurncyCode,false);
          end;
          EndFormat;
        end;
      end;
    end;
  end else begin
    APPayHistr.VECode = vecode;
    found = true;
    while (LoopKey("VEPNrVECode",APPayHistr,1,found)) begin
      if (found) then begin
        testf = true;
        if (APPayHistr.VECode<>vecode) then begin 
          found = false; 
          testf = false;
        end;
        if (RepSpec.d1<APPayHistr.TransDate) then begin
          testf = false;
        end;
        if (nonblank(RepSpec.FirstAcc)) then begin
          if (nonblank(APPayHistr.APAcc)) then begin
            if (RepSpec.FirstAcc!=APPayHistr.APAcc) then begin
              testf = false;
            end;
          end else begin
            if (GetSupplierOnAccountAC(APPayHistr.VECode)!=RepSpec.FirstAcc) then begin
              testf = false;
            end;
          end;
        end;
        if (testf) then begin
          if (APPayHistr.FileName=="OPVc") then begin
            if ((nonblank(RepSpec.ObjType)) or (nonblank(RepSpec.ObjStr))) then begin
              OPr.SerNr = APPayHistr.SerNr;
              if (ReadFirstMain(OPr,1,true)) then begin
                rwcnt = MatRowCnt(OPr);
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(OPr,i,OPrw);
                  if (OPrw.PrepayNr==APPayHistr.VEPNr) then begin
                    if (nonblank(RepSpec.ObjType)) then begin
                      testf = ObjectTypeMatch(OPrw.Objects,RepSpec.ObjType);
                    end;
                    if (nonblank(RepSpec.ObjStr)) then begin
                      testf = SetInSet(RepSpec.ObjStr,OPrw.Objects);
                    end;
                 end;
                end;
              end;
            end;
          end;
          if (APPayHistr.FileName=="CLOutVc") then begin
            if ((nonblank(RepSpec.ObjType)) or (nonblank(RepSpec.ObjStr))) then begin
              CLOutr.SerNr = APPayHistr.SerNr;
              if (ReadFirstMain(CLOutr,1,true)) then begin
                rwcnt = MatRowCnt(CLOutr);
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(CLOutr,i,CLOutrw);
                  if (CLOutrw.Type==4) then begin
                    if (CLOutrw.TransNr==APPayHistr.VEPNr) then begin
                      if (nonblank(RepSpec.ObjType)) then begin
                        testf = ObjectTypeMatch(CLOutr.Objects,RepSpec.ObjType);
                      end;
                      if (nonblank(RepSpec.ObjStr)) then begin
                        testf = SetInSet(RepSpec.ObjStr,CLOutr.Objects);
                      end;
                      i = rwcnt;
                    end;
                  end;
                end;
              end;
            end;
          end;
          if (APPayHistr.FileName=="CLInVc") then begin
            if ((nonblank(RepSpec.ObjType)) or (nonblank(RepSpec.ObjStr))) then begin
              CLInr.SerNr = APPayHistr.SerNr;
              if (ReadFirstMain(CLInr,1,true)) then begin
                rwcnt = MatRowCnt(CLInr);
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(CLInr,i,CLInrw);
                  if (CLInrw.Type==5) then begin
                    if (CLInrw.TransNr==APPayHistr.VEPNr) then begin
                      if (nonblank(RepSpec.ObjType)) then begin
                         testf = ObjectTypeMatch(CLInr.Objects,RepSpec.ObjType);
                      end;
                     if (nonblank(RepSpec.ObjStr)) then begin
                       testf = SetInSet(RepSpec.ObjStr,CLInr.Objects);
                     end;
                     i = rwcnt;
                    end;
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
      if (testf) then begin
        if (prepno<>APPayHistr.VEPNr) then begin
          if ((prepno<>-1) and (prepbal<>0)) then begin
            StartFormat(15);
            tstr = prepno;
            OutStringID(pos1,"DblPrHisPL",tstr,false,vecode);
            OutVal(pos2,0,prepbal,M4Val,true);
            if (RepSpec.flags[2]!=0) then begin
              OutString(pos2+10,0,curncycode,false);
            end;
            EndFormat;
            prepbal = 0;
          end;
        end;          
        prepno = APPayHistr.VEPNr;
        curncycode = APPayHistr.CurncyCode;
        if ((APPayHistr.FileName=="VIVc") or (APPayHistr.FileName=="CLInVc")) then begin
          if (curncyf==false) then begin
            prepbal = prepbal - APPayHistr.BookVal;
          end else begin
            prepbal = prepbal - APPayHistr.Val;
          end;
        end else begin
          if (curncyf==false) then begin
            prepbal = prepbal + APPayHistr.BookVal;
          end else begin
            prepbal = prepbal + APPayHistr.Val;
          end;
        end;  
      end;
    end;
    if ((prepno<>-1) and (prepbal<>0)) then begin
      StartFormat(15);
      tstr = prepno;
      OutStringID(pos1,"DblPrHisPL",tstr,false,vecode);
      OutVal(pos2,0,prepbal,M4Val,true);
      if (curncyf) then begin
        OutString(pos2+10,0,curncycode,false);
      end;
      EndFormat; 
    end;
  end;
  RETURN;
END;

procedure APFindPaydAmount2(record OPrsVc OPrsp,Integer noordered,var val ap,var val apbase)
BEGIN
  record OPVc OPr;
  row OPVc OPrw;
  Integer i,rwcnt;
  val rs;
  
  ap = 0;
  OPr.SerNr = OPrsp.TransNr;
  if (ReadFirstMain(OPr,1,true)) then begin
    if ((OPr.OrderedFlag!=0) and (OPr.RejectedFlag==0) and (OPr.Invalid==0)) then begin
      if (OPr.TransDate==OPrsp.TransDate) then begin
        rwcnt = MatRowCnt(OPr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(OPr,i,OPrw);
          if ((OPrw.ovst==0)) then begin
            if (OPrw.VISerNr==OPrsp.VINr) then begin
              if ((OPrw.stp==1) or (OPrw.stp==5)) then begin
                rs = OPrw.PInvVal;
                ap = ap + rs;
                rs = MulWithRateToBase1(OPrw.PInvCurncy,OPr.TransDate,OPrw.PInvVal,DefaultCurRoundOff);
                apbase = apbase + rs;
              end;  
            end;
          end;
        end;
      end;
    end;
    if (noordered!=0) then begin
      if ((OPr.OrderedFlag!=0) and (OPr.DoneFlag==0)) then begin
        ap = 0;
      end;
    end;
  end;
  RETURN;
END;

global
procedure GetAPInvBalance(record VIVc OrgVIr,Date baldatep,Integer noordered,var val rvalp,var val basevalp,var LongInt latedays)
BEGIN
  record VIVc VIr;
  record PurgeTRVc PurgeTRr;
  record TRVc TRr;
  row TRVc TRrw;
  record CLInVc CLInr;
  row CLInVc CLInrw;
  record CLOutVc CLOutr;
  row CLOutVc CLOutrw;
  record OPrsVc OPrsr;
  Boolean found,first;
  val amnt,t,t2,basp;
  Integer res;  
  Integer h1,h2;
  Integer i,rwcnt,oldstyle;
  Boolean vicredf;
  val tinivcurrate,rategain;

  first = true;
  res = 0;
  h1=100; h2=170;
  OPrsr.VINr = OrgVIr.SerNr;
  if (OrgVIr.SerNr>0) then begin
    found = true;
  end;
  while (LoopKey("VIKey",OPrsr,1,found)) begin
    if (found) then begin
      if (OPrsr.VINr<>OrgVIr.SerNr) then begin found = false; end;
    end;  
    if (found) then begin
      if (OPrsr.TransType==0) then begin
        if (OPrsr.TransDate<=baldatep) then begin
          if (OPrsr.TransNr<>OrgVIr.SerNr) then begin
            VIr.SerNr = OPrsr.TransNr;
            if (ReadFirstMain(VIr,1,true)) then begin
              if (VIr.Invalid==0) then begin
              if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                if (OrgVIr.InvType!=kInvoiceTypeEmployee and OrgVIr.InvType!=kInvoiceTypeCash and OrgVIr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) then begin
                  t = -VIr.PayVal;
                  rvalp = rvalp + t;
                  basevalp = basevalp + MulRateToBase1(VIr.CurncyCode,t,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
                  vicredf = true;
                  if (rvalp<0) then begin
                    if (latedays>0) then begin latedays = 0; end;
                  end;
                end;
              end else begin
                rvalp = rvalp + VIr.PayVal;
                basevalp = basevalp + MulRateToBase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
              end;
              end;
            end;  
          end;
        end;  
      end;
      if (OPrsr.TransType==1) then begin      
        if (OPrsr.TransDate<=baldatep) then begin
          APFindPaydAmount2(OPrsr,noordered,amnt,basp);
          t = -amnt;
          t2 = -basp;
          rvalp = rvalp + t;
//          basevalp = basevalp + t2;
          basevalp = basevalp - MulRateToBase1(OrgVIr.CurncyCode,amnt,OrgVIr.FrRate,OrgVIr.ToRateB1,OrgVIr.ToRateB2,OrgVIr.BaseRate1,OrgVIr.BaseRate2,DefaultCurRoundOff);
          if (vicredf) then begin
            if (rvalp<0) then begin
              if (latedays>0) then begin latedays = 0; end;
            end;
          end;
        end;
      end;
      if (OPrsr.TransType==kOPrsTransTypePurgeNLTransaction) then begin
        PurgeTRr.Number = OPrsr.TransNr;
        PurgeTRr.IntYc = GetIntYc(OPrsr.TransDate);                
        PurgeTRr.TransRow = OPrsr.TransRow;
        if (ReadFirstMain(PurgeTRr,3,true)) then begin
          if ((PurgeTRr.TransDate==OPrsr.TransDate) and (PurgeTRr.TransDate<=baldatep)) then begin
            t = 0;
            if (PurgeTRr.Typ==2) then begin
              if (PurgeTRr.SerNr==OrgVIr.SerNr) then begin
                if ((PurgeTRr.CurDebVal<>0) or (PurgeTRr.CurCredVal<>0)) then begin              
                  t = PurgeTRr.CurCredVal - PurgeTRr.CurDebVal;
                  basevalp = basevalp + (PurgeTRr.CredVal - PurgeTRr.DebVal);
                end else begin
                  t = PurgeTRr.CredVal - PurgeTRr.DebVal;
                  basevalp = basevalp + t;
                end;                        
                if (TypeOfCurncy(PurgeTRr.Curncy,oldstyle)==2) then begin
                  t = PurgeTRr.CredVal2 - PurgeTRr.DebVal2;
                end;
                rvalp = rvalp + t;
                if (vicredf) then begin
                  if (rvalp<0) then begin
                    if (latedays>0) then begin latedays = 0; end;
                  end;
                end;
              end;  
            end;    
          end;
        end;
      end;
      if (OPrsr.TransType==kOPrsTransTypeNLTransaction) then begin
        TRr.Number = OPrsr.TransNr;
        TRr.IntYc = GetIntYc(OPrsr.TransDate);                
        if (ReadFirstMain(TRr,2,true)) then begin
          if ((TRr.TransDate==OPrsr.TransDate) and (TRr.TransDate<=baldatep)) then begin
            t = 0;

            rwcnt = MatRowCnt(TRr);
            for (i=0; i<rwcnt; i=i+1) begin
              MatRowGet(TRr,i,TRrw);
              if (TRrw.ovst==0) then begin
                if (TRrw.stp==1) and (TRrw.Typ==2) then begin
                  if (TRrw.SerNr==OrgVIr.SerNr) then begin
                    if ((TRrw.CurDebVal<>0) or (TRrw.CurCredVal<>0)) then begin              
                      t = TRrw.CurCredVal - TRrw.CurDebVal;
                      basevalp = basevalp + (TRrw.CredVal - TRrw.DebVal);
                    end else begin
                      t = TRrw.CredVal - TRrw.DebVal;
                      basevalp = basevalp + t;
                    end;                        
                    if (TypeOfCurncy(TRrw.Curncy,oldstyle)==2) then begin
                      t = TRrw.CredVal2 - TRrw.DebVal2;
                    end;
                    rvalp = rvalp + t;
                    if (vicredf) then begin
                      if (rvalp<0) then begin
                        if (latedays>0) then begin latedays = 0; end;
                      end;
                    end;
                  end;  
                end;    
              end;
            end;

          end;
        end;
      end;
      if (OPrsr.TransType==3) then begin
        CLOutr.SerNr = OPrsr.TransNr;
        if (ReadFirstMain(CLOutr,1,true)) then begin
          if ((CLOutr.TransDate==OPrsr.TransDate) and (CLOutr.TransDate<=baldatep) and (CLOutr.Invalid==0)) then begin
            t = 0;

            rwcnt = MatRowCnt(CLOutr);
            for (i=0; i<rwcnt; i=i+1) begin
              MatRowGet(CLOutr,i,CLOutrw);
              if (CLOutrw.Type==2) then begin
                if (CLOutrw.TransNr==OrgVIr.SerNr) then begin
                  t = CLOutrw.Sum;
                  tinivcurrate = MulRateToBase1(CLOutr.CurncyCode,t,OrgVIr.FrRate,OrgVIr.ToRateB1,OrgVIr.ToRateB2,OrgVIr.BaseRate1,OrgVIr.BaseRate2,DefaultCurRoundOff);
                  basevalp = basevalp - tinivcurrate;                  
//                  basevalp = basevalp - MulRateToBase1(CLOutr.CurncyCode,t,CLOutr.FrRate,CLOutr.ToRateB1,CLOutr.ToRateB2,CLOutr.BaseRate1,CLOutr.BaseRate2,DefaultCurRoundOff);
                  rvalp = rvalp - t;
                  if (vicredf) then begin
                    if (rvalp<0) then begin
                      if (latedays>0) then begin latedays = 0; end;
                    end;
                  end;
                end;  
              end;    
            end;

          end;
        end;
      end;
      if (OPrsr.TransType==4) then begin
        CLInr.SerNr = OPrsr.TransNr;
        if (ReadFirstMain(CLInr,1,true)) then begin
          if ((CLInr.TransDate==OPrsr.TransDate) and (CLInr.TransDate<=baldatep) and (CLInr.Invalid==0)) then begin
            t = 0;

            rwcnt = MatRowCnt(CLInr);
            for (i=0; i<rwcnt; i=i+1) begin
              MatRowGet(CLInr,i,CLInrw);
              if (CLInrw.Type==2) then begin
                if (CLInrw.TransNr==OrgVIr.SerNr) then begin
                  t = CLInrw.Sum;
                  tinivcurrate = MulRateToBase1(CLInr.CurncyCode,t,OrgVIr.FrRate,OrgVIr.ToRateB1,OrgVIr.ToRateB2,OrgVIr.BaseRate1,OrgVIr.BaseRate2,DefaultCurRoundOff);
//                  basevalp = basevalp - MulRateToBase1(CLInr.CurncyCode,t,CLInr.FrRate,CLInr.ToRateB1,CLInr.ToRateB2,CLInr.BaseRate1,CLInr.BaseRate2,DefaultCurRoundOff);
                  basevalp = basevalp + tinivcurrate;
                  rvalp = rvalp + t;
                  if (vicredf) then begin
                    if (rvalp<0) then begin
                      if (latedays>0) then begin latedays = 0; end;
                    end;
                  end;
                end;  
              end;    
            end;

          end;
        end;
      end;
                  
    end;
  end;
  RETURN;
END;

global
procedure SumAgedInstalmenVI(Date curdat,LongInt SerNr,var val sact,var val s0,var val s1,var val s2,var val s3,var val s4,var val s5,var val s6,var val s7)
begin
  record APInstallVc APIr;
  Boolean TrHs;
  LongInt latedays;

  APIr.VISerNr = SerNr;
  TrHs = true;
  while (LoopKey("VISerNr",APIr,1,TrHs)) begin
    if (APIr.VISerNr!=SerNr) then begin TrHs = false; end;
    if (TrHs) then begin
      latedays = DateDiff(APIr.DueDate,CurrentDate);
      SumAged(curdat,latedays,0,APIr.BookRVal,sact,s0,s1,s2,s3,s4,s5,s6,s7);
    end;
  end;
  return;
end;

function Boolean PrintInstallments(record VIVc VIr,record RcVc RepSpec,val rval,val rs,var Boolean foundclosed)
begin
  record APInstallVc APIr;
  Boolean TrHs;
  LongInt latedays;
  string 255 tstr;
  Boolean res;

  foundclosed = false;
  tstr = VIr.SerNr;
  if (nonblank(VIr.InvoiceNr)) then begin
    tstr = tstr & ", (";
    tstr = tstr & VIr.InvoiceNr;
    tstr = tstr & ")";
  end;
  if (VIr.Closed==1) then begin
    tstr = tstr & " (*) ";
    foundclosed = true;
  end;            
  APIr.VISerNr = VIr.SerNr;
  TrHs = true;
  while (LoopKey("VISerNr",APIr,1,TrHs)) begin
    if (APIr.VISerNr!=VIr.SerNr) then begin TrHs = false; end;
    if (TrHs) then begin
      latedays = DateDiff(APIr.DueDate,CurrentDate);
      StartFormat(15);
      OutString(20,"DblAP",tstr,false);
      OutDate(150,0,VIr.InvDate,false);
      OutString(210,0,VIr.PayDeal,false);
      OutDate(230,0,APIr.DueDate,false);
      if (latedays!=-1) then begin
        OutLongInt(345,0,latedays,true);
      end else begin
        OutString(345,0, "0",true);
      end;  
      if (RepSpec.flags[2]==1) then begin
        OutVal(450,0,APIr.RVal,M4Val,true);
        OutString(480,0,VIr.CurncyCode,true);
      end else begin
        OutVal(480,0,APIr.BookRVal,M4Val,true);
      end;  
      EndFormat;
      res = true;
    end;
  end;
  PrintInstallments = res;
  return;
end;

global
function Boolean APRPrintOverView(record VIVc VIr,record OPrsVc OPrsr,record TRVc TRr,record RcVc RepSpec,val rval,val rs,LongInt latedays)
begin
  string 255 tstr,tstr2,dblstr;
  Boolean foundclosed;
  record AgedBlock Ab;
  
  if ((VIr.InstallmentInv==1) and (RepSpec.flags[19]!=0)) then begin
    if (PrintInstallments(VIr,RepSpec,rval,rs,foundclosed)) then begin
      goto LAPRPrintOverView;
    end;
  end;
  BlockLoad(Ab);
  switch (OPrsr.TransType) begin
    case kOPrsTransTypeInvoice:
      tstr = VIr.SerNr;
      if (nonblank(VIr.InvoiceNr)) then begin
        tstr = tstr & ", (";
        tstr = tstr & VIr.InvoiceNr;
        tstr = tstr & ")";
      end;
      dblstr = "DblAP";
    case kOPrsTransTypeNLTransaction:
      tstr = VIr.SerNr;
      if (nonblank(VIr.InvoiceNr)) then begin
        tstr = tstr & ", (";
        tstr = tstr & VIr.InvoiceNr;
        tstr = tstr & ")";
      end;
      dblstr = "DblTrans2";
      YcToStr(TRr.IntYc,tstr2);     
      tstr2 = tstr2 & "." & TRr.Number;
    case kOPrsTransTypePurgeNLTransaction:
      tstr = VIr.SerNr;
      if (nonblank(VIr.InvoiceNr)) then begin
        tstr = tstr & ", (";
        tstr = tstr & VIr.InvoiceNr;
        tstr = tstr & ")";
      end;
      dblstr = "DblTrans2";
      YcToStr(TRr.IntYc,tstr2);     
      tstr2 = tstr2 & "." & TRr.Number;
  end;
  
  if (VIr.Closed==1) then begin
    tstr = tstr & " (*) ";
    foundclosed = true;
  end;
  StartFormat(15);
  OutStringID(20,dblstr,tstr,false,tstr2);
  if (RepSpec.flags[5]==0) then begin
    OutDate(150,0,VIr.InvDate,false);
  end else begin
    OutDate(150,0,VIr.RebDate,false);
  end;
  OutString(210,0,VIr.PayDeal,false);
  OutDate(230,0,VIr.DueDate,false);
  if (Ab.ShowDelayDays!=0) then begin
    if (latedays<0) then begin
      OutLongInt(345,0,-latedays,true);
    end else begin
      OutString(345,0, "0",true);
    end;  
  end else begin
    if (latedays <> -1) then begin
      OutLongInt(345,0,latedays,true);
    end else begin
      OutString(345,0, "-1",true);
    end;  
  end;
  if (RepSpec.flags[2]==1) then begin
    OutVal(450,0,rval,M4Val,true);
    OutString(480,0,VIr.CurncyCode,true);
  end else begin
    OutVal(480,0,rs,M4Val,true);
  end;  
  EndFormat;
LAPRPrintOverView:;  
  APRPrintOverView = foundclosed;
  return;
end;

global
procedure PrintCreditorsAccounts(Array string credaccs,Array val credbal,var Integer credcnt)
begin
  Integer i;
  
  Gray_Divider(290,1);
  for (i=0;i<=credcnt;i=i+1) begin
    StartFormat(15);
    OutString(290,0,credaccs[i],false);
    OutVal(480,0,credbal[i],M4Val,true);
    EndFormat;
  end;
  return;
end;

global
procedure PrintAPTotals(record RcVc RepSpec,string curcode,val ivtot,val ivdue,val ivnotdue,val onacc,val totCurSum)
begin
  if (RepSpec.flags[2]==1) and (nonblank(RepSpec.CurncyCode)) then begin
    StartFormat(15);
    OutString(290,0,USetStr(4048),false);
    OutValBiDi(450,0,totCurSum,M4Val,true,480);
    OutString(460,0,RepSpec.CurncyCode,false);
    EndFormat;
  end;
  StartFormat(15);
  OutString(290,0,USetStr(4048),false);
  OutValBiDi(450,0,ivtot,M4Val,true,480);
  OutString(460,0,curcode,false);
  EndFormat;
  StartFormat(15);
  OutString(290,0,USetStr(4060),false);
  OutValBiDi(450,0,ivdue,M4Val,true,480);
  OutString(460,0,curcode,false);
  EndFormat;
  StartFormat(15);
  OutString(290,0,USetStr(4051),false);
  OutValBiDi(450,0,ivnotdue,M4Val,true,480);
  OutString(460,0,curcode,false);
  EndFormat;
  if (onacc!=0) then begin
    StartFormat(15);
    OutString(290,0,USetStr(2497),false);
    OutValBiDi(450,0,onacc,M4Val,true,480);
    OutString(460,0,curcode,false);
    EndFormat;
  end;
  return;
end;

global
procedure AddToCreditorsAccounts(string apacc,Integer invtype,val vp,Array string credaccs,Array val credbal,var Integer credcnt)
begin
  Integer i;
  
  for (i=0;i<=credcnt;i=i+1) begin
    if (apacc==credaccs[i]) then begin
      switch (invtype) begin
        case kInvoiceTypeCredit:
          credbal[i] = credbal[i] + vp;
        case kInvoiceTypeCreditSpecialSales:
          credbal[i] = credbal[i] + vp;
        otherwise
          credbal[i] = credbal[i] + vp;          
      end;
      goto LAddToCreditorsAccounts;
    end;
  end;
  credcnt = credcnt + 1;
  credaccs[credcnt] = apacc;
  switch (invtype) begin
    case kInvoiceTypeCredit:
      credbal[credcnt] = vp;
    case kInvoiceTypeCreditSpecialSales:
      credbal[credcnt] = vp;
    otherwise
      credbal[credcnt] = vp;
  end;
LAddToCreditorsAccounts:;  
  return;
end;

global
procedure APPrintDueDetailed(record VIVc VIr,record RcVc RepSpec,string curcode,string objects,val sactinv,val s0inv,val s1inv,val s2inv,val s3inv,val s4inv,val s5inv,val s6inv,val s7inv,val onaccsum,var val totinv,Integer nrofper)
begin
  record ARVc AR2r;
  val t,vatel;
  string 255 tstr,tstr1;
  
  tstr = VIr.SerNr;
  if (nonblank(VIr.InvoiceNr)) then begin
    tstr = tstr & ", (";
    tstr = tstr & VIr.InvoiceNr;
    tstr = tstr & ")";
  end;
  if (VIr.Closed==1) then begin
    tstr = tstr & " (*) ";
  end;            
  StartFormat(15);
  if (RepSpec.flags[23]!=0) then begin
    OutString(11,"DblAP",tstr,false);
    OutDate(120,0,VIr.InvDate,false);
    OutDate(175,0,VIr.DueDate,false);
  end else begin
    OutString(11,"DblAP",tstr,false);
    if (nrofper>4) then begin
      OutDate(100,0,VIr.DueDate,false);
    end else begin
      OutDate(100,0,VIr.InvDate,false);
      OutDate(145,0,VIr.DueDate,false);
    end;
  end;
  if (RepSpec.flags[2]==1) then begin
    PrintAgedLine(sactinv,s0inv,s1inv,s2inv,s3inv,s4inv,s5inv,s6inv,s7inv,onaccsum,totinv,nrofper,464,"");
    OutString(468,0,VIr.CurncyCode,false);
  end else begin
    PrintAgedLine(sactinv,s0inv,s1inv,s2inv,s3inv,s4inv,s5inv,s6inv,s7inv,onaccsum,totinv,nrofper,480,"");
  end;
  EndFormat;
  return;
end;
