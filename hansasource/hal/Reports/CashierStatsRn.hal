external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure BeginCurncyTotals(var Integer);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external procedure HTClasses(string,string,var string);
external procedure HTSalesmen(string,string,var string);
external procedure HTLocations(string,string,var string);
external procedure HT2Per(Date, Date , var string);
external procedure HTCusts(string, string, var string);
external procedure HTCustCat(string,var string);

procedure PrintResults(Integer showcur,string branchid,Array string asalesman,var Integer asalescnt,
                       vector val cash,vector val onacc,vector val nrofinv,
                       Array string acur,vector val av1,vector val av2,var Integer curcnt)
begin
  Integer i,c;
  val tcash,tonacc,tnrofinv;
  Array val av3;

  if (asalescnt<=0) then begin
    goto LPrintResults;
  end;
  StartFormat(15);
   OutString(0,0,branchid,false);
  EndFormat;
  Gray_Divider(0,100);
  SortStringArray(asalesman);
  
  for (i=0;i<asalescnt;i=i+1) begin
    StartFormat(15);
     OutString(50,0,asalesman[i],false);
     OutVal(2,0,cash[branchid & ":" & asalesman[i]],M4Val,true);
     OutVal(3,0,onacc[branchid & ":" & asalesman[i]],M4Val,true);
     OutVal(1,0,nrofinv[branchid & ":" & asalesman[i]],M4Val,true);
    EndFormat;
    if (showcur) then begin
      StartFormat(5);
      EndFormat;
      Gray_Divider(150,1);
      for (c=0;c<curcnt;c=c+1) begin
        if ((av1[acur[c] & ":" & branchid & ":" & asalesman[i]]!=0) or
           (av2[acur[c] & ":" & branchid & ":" & asalesman[i]]!=0)) then begin
          StartFormat(15);
           OutString(150,0,acur[c],false);
           if (av1[acur[c] & ":" & branchid & ":" & asalesman[i]]!=0) then begin
             OutVal(2,0,av1[acur[c] & ":" & branchid & ":" & asalesman[i]],M4Val,true);
           end else begin
             OutVal(3,0,0,M4Val,true);
           end;
           if (av2[acur[c] & ":" & branchid & ":" & asalesman[i]]!=0) then begin
             OutVal(3,0,av2[acur[c] & ":" & branchid & ":" & asalesman[i]],M4Val,true);
           end else begin
             OutVal(3,0,0,M4Val,true);
           end;
          EndFormat;
        end;
      end;
      if (i!=asalescnt-1) then begin
        Gray_Divider(0,1);
      end;
    end;
    tcash = tcash + cash[branchid & ":" & asalesman[i]];
    tonacc = tonacc + onacc[branchid & ":" & asalesman[i]];
    tnrofinv = tnrofinv + nrofinv[branchid & ":" & asalesman[i]];
  end;

  Gray_Divider(0,1);
  StartFormat(15);
   OutString(0,0,USetStr(28696),false);
   OutVal(2,0,tcash,M4Val,true);
   OutVal(3,0,tonacc,M4Val,true);
   OutVal(1,0,tnrofinv,M4Val,true);
  EndFormat;
  
  asalescnt = 0;
  curcnt = 0;

LPrintResults:;
//  ClearVector(cash);
//  ClearVector(onacc);
//  ClearVector(nrofinv);
  return;
end;

procedure AddToSalesmenArray(string salesman,Array string asalesman,var Integer asalescnt)
begin
  Integer i;
  
  for (i=0;i<asalescnt;i=i+1) begin
    if (asalesman[i]==salesman) then begin
      goto LAddToSalesmenArray;
    end;
  end;
  asalesman[asalescnt] = salesman;
  asalescnt = asalescnt + 1;
LAddToSalesmenArray:;  
  return;
end;

procedure AddCurncyTotals(var Array string cur,var Integer curcnt,var vector val v1,string vf,string curncy,val a)
begin
  record BaseCurBlock bascur;
  Integer i;
  string 20 code;
  Boolean foundf;
  
  foundf = false;
  code = curncy;
  if (blank(code)) then begin
    BlockLoad(bascur);
    code = bascur.BaseCur1;
  end;
  v1[code & ":" & vf] = v1[code & ":" & vf] + a;
  
  for (i=0;i<curcnt;i=i+1) begin
    if (code==cur[i]) then begin
      foundf = true;
      i = curcnt;
    end;
  end;
  if (foundf==false) then begin
    cur[curcnt] = code;
    curcnt = curcnt + 1;
  end;
  return;
end;

procedure POSInvoicesData(record RcVc RepSpec)
begin
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  Boolean found,testf;
  string 255 frcu,tocu;
  string 255 frbr,tobr;
  Array string 255 asalesman;
  Integer asalescnt;
  val v;
  vector val av1;
  vector val av2;
  vector val av3;
  Array string 20 acur;
  Integer curcnt;
  string 255 lastbr;
  vector val cash,onacc,nrofinv;

  frcu = FirstInRange(RepSpec.f1,20);
  tocu = LastInRange(RepSpec.f1,20);
  frbr = FirstInRange(RepSpec.f2,20);
  tobr = LastInRange(RepSpec.f2,20);
  found = true;
  IVCashr.BranchID = frbr;
  IVCashr.TransDate = RepSpec.sStartDate;
  while (LoopKey("BranchID",IVCashr,2,found)) begin
    if (nonblank(RepSpec.f2)) then begin
      if (IVCashr.BranchID<frbr) then begin found = false; end;
      if (IVCashr.BranchID>tobr) then begin found = false; end;
    end;
    if (DateInRange(IVCashr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (IVCashr.OKFlag==0) then begin testf = false; end;
      if (IVCashr.Invalid!=0) then begin testf = false; end;
      if (nonblank(RepSpec.f1)) then begin
        if (IVCashr.CustCode<frcu) then begin testf = false; end;
        if (IVCashr.CustCode>tocu) then begin testf = false; end;
      end;
      if (testf) then begin
        if (lastbr!=IVCashr.BranchID) and (nonblank(lastbr)) then begin
          PrintResults(RepSpec.flags[0],lastbr,asalesman,asalescnt,cash,onacc,nrofinv,acur,av1,av2,curcnt);
          cash[IVCashr.BranchID & ":" & IVCashr.SalesMan] = 0;
          onacc[IVCashr.BranchID & ":" & IVCashr.SalesMan] = 0;
        end;
        rwcnt = MatRowCnt(IVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVCashr,i,IVCashrw);
          v = MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);
          switch (IVCashrw.stp) begin
            case kInvoiceRowTypeCashPayment:
              cash[IVCashr.BranchID & ":" & IVCashr.SalesMan] = cash[IVCashr.BranchID & ":" & IVCashr.SalesMan] + v;
              AddToSalesmenArray(IVCashr.SalesMan,asalesman,asalescnt);
              if (RepSpec.flags[0]) then begin
                AddCurncyTotals(acur,curcnt,av1,IVCashr.BranchID & ":" & IVCashr.SalesMan,IVCashrw.CurncyCode,IVCashrw.Sum);
              end;
            case kInvoiceRowTypeOnAccountPayment:
              onacc[IVCashr.BranchID & ":" & IVCashr.SalesMan] = onacc[IVCashr.BranchID & ":" & IVCashr.SalesMan] + v;
              AddToSalesmenArray(IVCashr.SalesMan,asalesman,asalescnt);
              if (RepSpec.flags[0]) then begin
                AddCurncyTotals(acur,curcnt,av2,IVCashr.BranchID & ":" & IVCashr.SalesMan,IVCashrw.CurncyCode,IVCashrw.Sum);
              end;
          end;
        end;
        nrofinv[IVCashr.BranchID & ":" & IVCashr.SalesMan] = nrofinv[IVCashr.BranchID & ":" & IVCashr.SalesMan] + 1;
      end;
      lastbr = IVCashr.BranchID;
    end;
  end;
  PrintResults(RepSpec.flags[0],lastbr,asalesman,asalescnt,cash,onacc,nrofinv,acur,av1,av2,curcnt);

  return;
end;

global
procedure CashierStatsRn(record RcVc RepSpec)
begin
  string 255 frcu,tocu;
  Integer rw;
  string 255 tstr;

  frcu = FirstInRange(RepSpec.f1,20);
  tocu = LastInRange(RepSpec.f1,20);

  StartReportJob(USetStr(28690));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTCusts(frcu,tocu,tstr);
  Header(rw,tstr,0);
  if (nonblank(RepSpec.FirstAcc)) then begin
    HTCustCat(RepSpec.FirstAcc,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.LastAcc)) then begin
    HTSalesmen(RepSpec.LastAcc,RepSpec.LastAcc,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;  
  if (nonblank(RepSpec.AccStr)) then begin
    HTLocations(RepSpec.AccStr,RepSpec.AccStr,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;  
  HTClasses(RepSpec.f4,RepSpec.f4,tstr);
  Header(rw,tstr,1); 
  rw = rw + 1; 
  EndHeader;
  if (blank(RepSpec.f2)) then begin
    StartFormat(15);
     OutString(0,0,USetStr(28697),false);
    EndFormat;
    goto LCashierStatsRn;
  end;
  SetRepCol(2,300);
  SetRepCol(3,360);
  SetRepCol(4,420);

  StartFormat(15);
   OutString(0,0,USetStr(28691),false);
   OutString(50,0,USetStr(28692),false);
   OutString(2,0,USetStr(28693),true);
   OutString(3,0,USetStr(28694),true);
   OutString(1,0,USetStr(28695),true);
  EndFormat;
  Gray_Divider(0,1);

/*
  if (RepSpec.flags[1]!=0) then begin
    InvoicesData(RepSpec,sex,svbl,sexempt,vat,qty,cost);
  end;
*/  
  if (RepSpec.flags[2]!=0) then begin
    POSInvoicesData(RepSpec);
  end;
LCashierStatsRn:;
  EndJob;
  return;
end;