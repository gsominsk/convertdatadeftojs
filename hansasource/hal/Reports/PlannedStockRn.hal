/*
external procedure GetStockValue(string,string,var record ItemStatusVc);

procedure FindCustCode(string location, var string custcode)
begin
  record CUrLocationVc Locr;
  
  Locr.Location = location;
  if (ReadFirstMain(Locr,1,true)) then begin
    custcode = Locr.CustCode;
  end;
  return;
end;

function val  FindMinLevel(record INVc INr,string location)
begin
  val minlevel;
  record MinPerLocVc MPLr;
  
  MPLr.ItemCode = INr.Code;
  MPLr.Location = location;
  if (ReadFirstMain(MPLr,2,true)) then begin
    minlevel = MPLr.MinLevel;
  end else begin
    minlevel = INr.MinLevel;
  end;
  FindMinLevel = minlevel;
  return; 
end;

procedure FindSOQty(record INVc INr, record RcVc RepSpec, var val soqty)
begin
  record INrsVc INrsr;
  record ORVc ORr;
  boolean TrHs,testf;
  
  INrsr.FileName = "Fut3ORVc";
  INrsr.ItemCode = INr.Code;
  TrHs = true;
  while (LoopKey("FileName",INrsr,2,TrHs)) begin
    if (TrHs) then begin
      if (INrsr.FileName <> "Fut3ORVc") then begin
        TrHs = false;  
      end;
      if (INrsr.ItemCode <> INr.Code) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      testf = true;
      if (INrsr.TransDate > RepSpec.d1) then begin
        testf = false;
      end;
      if (INrsr.Location <> RepSpec.f4) then begin
        testf = false;
      end;
      if (testf) then begin
        ORr.SerNr = INrsr.TransNr;
        if (ReadFirstMain(ORr,1,true)) then begin
          if (ORr.Closed == 1) then begin
            testf = false;
          end;
        end;
        if (testf) then begin
          soqty = soqty + INrsr.Quant2;
        end;
      end;
    end;
  end;
  return;
end;


procedure FindPOQty(record INVc INr, record RcVc RepSpec, var val poqty)
begin
  record INrsVc INrsr;
  boolean TrHs,testf;

  INrsr.FileName = "Fut1POVc";
  INrsr.ItemCode = INr.Code;
  TrHs = true;
  while (LoopKey("FileName",INrsr,2,TrHs)) begin
    if (TrHs) then begin
      if (INrsr.FileName <> "Fut1POVc") then begin
        TrHs = false;  
      end;
      if (INrsr.ItemCode <> INr.Code) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      testf = true;
      if (INrsr.TransDate > RepSpec.d1) then begin
        testf = false;
      end;
      if (INrsr.Location <> RepSpec.f4) then begin
        testf = false;
      end;
      if (testf) then begin
        poqty = poqty + INrsr.Quant2;
      end;
    end;
  end;
  return;
end;

global
procedure PlannedStockRn(record RcVc RepSpec)
BEGIN
  record MainStockBlock Mainr;
  record INVc INr;
  record ItemStatusVc ISr;
  record INrsVc INrsr;
  Boolean TrHs, testf;
  integer rw;
  string 255 tstr;
  val minlevel,poqty,soqty,newstock,toorder;
  string 20 custcode;
  BlockLoad(Mainr);
  RepSpec.f4 = Mainr.MainStock;
  
  StartReportJob(USetStr(15190));
  rw = 1;
  if (nonblank(RepSpec.d1)) then begin
    tstr = "Datum tom: " & RepSpec.d1;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f1)) then begin
    tstr = "Artikel: " & RepSpec.f1;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f3)) then begin
    tstr = "Artikelgrupp: " & RepSpec.f3;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f4)) then begin
    tstr = "Lager: " & RepSpec.f4;
    Header(rw,tstr,1);
  end;
  EndHeader;

  StartFormat(15);
  OutString(0,0,USetStr(15191),false);
  OutString(100,0,USetStr(15192),true);
  OutString(160,0,USetStr(15193),true);
  OutString(220,0,USetStr(15194),true);
  OutString(280,0,USetStr(15195),true);
  OutString(340,0,USetStr(15196),true);
  OutString(400,0,USetStr(15197),true);
  EndFormat;
  Gray_Divider(0,1);
  TrHs = true;
  FindCustCode(RepSpec.f4,custcode);
  INr.Code = RepSpec.f1;  
  while (LoopMain(INr,1,TrHs)) begin
   if (TrHs) then begin
     if (nonblank(RepSpec.f1)) then begin
       if (RepSpec.f1 <> INr.Code) then begin
         TrHs = false;
       end;
     end;
   end;
   if (TrHs) then begin
     testf = true;
     if (nonblank(RepSpec.f3)) then begin
       if (INr.Group <> RepSpec.f3) then begin
         testf = false;
       end;
     end;
     if (INr.Terminated <> 0) then begin
       testf = false;
     end;
     if (INr.ItemType == 0) then begin
       testf = false;
     end;
     if (testf) then begin
       minlevel = FindMinLevel(INr,RepSpec.f4);
       GetStockValue(INr.Code,RepSpec.f4,ISr);
       soqty = 0;
       poqty = 0;
       FindSOQty(INr,RepSpec,soqty);
       FindPOQty(INr,RepSpec,poqty);
       if (minlevel <> 0) or (soqty <> 0) or (poqty <> 0) or (ISr.Instock <> 0) then begin 
         newstock = ISr.Instock - soqty + poqty;
         toorder = minlevel - newstock;
         if (RepSpec.flags[2] == 1) then begin
           if (toorder < 1) then begin
             testf = false;
           end;
         end;
         if (testf) then begin
           StartFormat(15);
           OutString(0,"DblINVc",INr.Code,false);
           OutVal(100,0,ISr.Instock,M40Val,true);
           soqty = soqty *-1;
           OutVal(160,0,soqty,M40Val,true);
           OutVal(220,0,poqty,M40Val,true);
           OutVal(280,0,newstock,M40Val,true);
           OutVal(340,0,minlevel,M40Val,true);
           if (toorder > 0) then begin
           OutVal(400,0,toorder,M40Val,true);
           end;
           EndFormat;
         end;
       end;
     end;
   end;  
 end; 
 Gray_Divider(0,1);
 EndJob;
 RETURN;
END;


*/