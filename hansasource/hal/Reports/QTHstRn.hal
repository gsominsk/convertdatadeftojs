external function Boolean HasMultiLocations();
external function Boolean HasCategories();
external function Boolean HasContactClassification();
external function Boolean ContactInGroupClass(string,string,string,string,string,string);
external procedure HTCustCat(string,var string);
external procedure HTCustClass(string,var string);
external procedure HTLocations(string, string, var string);
external function LongInt DateDiff(Date,Date);
external procedure HT2Per(Date, Date , var string);

procedure findproject(string ProjectNo)
begin
  record PRVc PRr;
  
  PRr.Code = ProjectNo;
  if (ReadFirstMain(PRr,1,true)) then begin
    StartFormat(15);
    OutString(0,0,USetStr(15217),false);
    OutString(80,"DblPRCode",PRr.Code,false);
    OutString(200,0,PRr.Leader,false);
    OutString(250,0,left(PRr.Name,30),false);
    OutString(440,0,PRr.StartDate,true);
    EndFormat;
  end;
  
  return;
end;

procedure findprojbudget(string ProjectNo)
begin
  record TBBUVc TBUr;
  
  TBUr.PRCode = ProjectNo;
  if (ReadFirstMain(TBUr,1,true)) then begin
    StartFormat(15);
    OutString(0,0,USetStr(22418),false);
    OutString(80,0,TBUr.PRCode,false);
    OutString(250,0,left(TBUr.PRName,30),false);
    OutString(440,0,TBUr.TransDate,true);
    EndFormat;
  end;
  
  return;
end;


procedure findprojinvoices(string ProjectNo)
begin
  record IVVc IVr;
  boolean TrHs;
  TrHs = true;
  IVr.PRCode = ProjectNo;
  while (LoopKey("PRCode",IVr,1,true)) begin
   if (IVr.PRCode <> ProjectNo) then begin
     TrHs = false;
   end;
   if (TrHs) then begin
     StartFormat(15);
     if (IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeNormalSpecialSales) then begin
       OutString(0,0,USetStr(14345),false);
     end;
     if (IVr.InvType==kInvoiceTypeDownpayment) then begin
       OutString(0,0,USetStr(1872),false);
     end;
     if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
       OutString(0,0,USetStr(11056),false);
     end;
     OutString(80,"DblCustPS2",IVr.SerNr,false);
     OutString(200,0,IVr.SalesMan,false);
     OutString(440,0,IVr.TransDate,true);
     EndFormat;
    end;
  end;
  
  return;
end;

procedure finddel(LongInt ORSerNr,Date QTDate)
begin
  Record SHVc SHr;
  Boolean TrHs, testf;
  string 255 str;
  val decdays, totdaysa, noqt;
  val avgval;
 
  TrHs = true; 
  SHr.OrderNr = ORSerNr;
  while (LoopKey("OrderKey",SHr,1,TrHs)) begin
    if (TrHs) then begin
      if (SHr.OrderNr<>ORSerNr) then begin 
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      testf = true;
  
        if (testf) then begin
            decdays = DateDiff(SHr.ShipDate,QTDate); 
            StartFormat(15);
             OutString(0,0,USetStr(11049),false);
             OutString(80,"IVInfoSH",SHr.SerNr,false);
             if (SHr.OKFlag <> 0) then begin
               OutString(200,0,USetStr(11050),false);
             end else begin
               OutString(200,0,USetStr(11051),false); 
             end;
             OutDate(440,0,SHr.ShipDate,true);
             OutVal(1,0,decdays,M40Val,true);
            EndFormat;
        end; 
      end; 
    end; 
  return;
end;  
 
procedure findret(LongInt ORSerNr,Date QTDate)
begin
  Record RetVc Retr;
  Boolean TrHs, testf;
  string 255 str;
  val decdays;
 
  TrHs = true; 
  Retr.OrdNr = ORSerNr;
  while (LoopKey("OrdNr",Retr,2,TrHs)) begin
    if (TrHs) then begin
      if (Retr.OrdNr<>ORSerNr) then begin 
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      testf = true;
  
        if (testf) then begin
            decdays = DateDiff(Retr.TransDate,QTDate); 
            StartFormat(15);
             OutString(0,0,USetStr(11052),false);
             OutString(80,0,Retr.SerNr,false);
             if (Retr.OKFlag <> 0) then begin
               OutString(200,0,USetStr(11053),false);
             end else begin
               OutString(200,0,USetStr(11054),false); 
             end;
             OutDate(440,0,Retr.TransDate,true);
             OutVal(1,0,decdays,M40Val,true);
            EndFormat;
        end; 
      end; 
    end; 
  return;
end;  
  

procedure findinv(LongInt ORSerNr,Date QTDate)
begin
  Record IVVc IVr;
  Boolean TrHs, testf;
  string 255 str;
  val decdays, totdaysa, noqt;
  val avgval;
 
  TrHs = true; 
  IVr.OrderNr = ORSerNr;
  while (LoopKey("OrderNr",IVr,2,TrHs)) begin
    if (TrHs) then begin
      if (IVr.OrderNr<>ORSerNr) then begin 
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      testf = true;
  
        if (testf) then begin
            decdays = DateDiff(IVr.InvDate,QTDate); 
            StartFormat(15);
             if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeNormalSpecialSales) or (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
             OutString(0,0,USetStr(11055),false);
             end;
             if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
             OutString(0,0,USetStr(11056),false);
             end;
             if (IVr.InvType==kInvoiceTypeDownpayment) then begin
             OutString(0,0,USetStr(11057),false);
             end;
             OutString(80,"DblCustPS2",IVr.SerNr,false);
             if (IVr.OKFlag<>0) then begin
               OutString(200,0,USetStr(11053),false);
             end else begin
               OutString(200,0,USetStr(11054),false);
             end;
             OutDate(440,0,IVr.InvDate,true);
             OutVal(1,0,decdays,M40Val,true);
            EndFormat;
        end; 
      end; 
    end; 
  return;
end;   

procedure findorder(LongInt QTSerNr,Date QTDate)
begin
  Record ORVc ORr;
  Boolean TrHs, testf;
  string 255 str;
  val decdays, totdaysa, noqt;
  val avgval;
 
  noqt = 0;
  TrHs = true; 
  ORr.QuoteNr = QTSerNr;
  while (LoopKey("QuoteNr",ORr,1,TrHs)) begin
    if (TrHs) then begin
      if (ORr.QuoteNr<>QTSerNr) then begin 
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      testf = true;
      if (testf) then begin
            decdays = DateDiff(ORr.OrdDate,QTDate); 
       //    
            StartFormat(15);
             OutString(0,0,USetStr(11058),false);
             OutString(80,"DblORVc",ORr.SerNr,false);
             if (ORr.Closed <> 0) then begin
               OutString(200,0,USetStr(11059),false);
             end;
             OutDate(440,0,ORr.OrdDate,true);
             OutVal(1,0,decdays,M40Val,true);
            EndFormat;
      end; 
      finddel(ORr.SerNr,QTDate);
      findret(ORr.SerNr,QTDate);
      findinv(ORr.SerNr,QTDate);
    end; 
  end; 
  return;
end;         

global 
procedure QTHstRn(record RcVc RepSpec)
begin
  Record QTVc QTr;
  Boolean TrHs, firstf, testf;
  LongInt frqt,toqt;
  string 255 tstr;
  val decdays;
  val rw;   
  firstf = true;
  frqt = FirstInRange(RepSpec.f1,20);
  toqt = LastInRange(RepSpec.f1,20);
 
  StartReportJob(USetStr(11040));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;  
  if (HasMultiLocations) then begin
    HTLocations(RepSpec.TransStr,RepSpec.TransStr,tstr);
    Header(rw,tstr,0);
  end;
  if (HasCategories) then begin
    HTCustCat(RepSpec.f9,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasContactClassification) then begin
    HTCustClass(RepSpec.f10,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (nonblank(RepSpec.f1)) then begin
    tstr = USetStr(11001);
    tstr = tstr & ": " & RepSpec.f1;
    Header(rw,tstr,1); 
    rw = rw + 1;  
  end;
  if (nonblank(RepSpec.f2)) then begin
    tstr = USetStr(2692);
    tstr = tstr & ": " & RepSpec.f2;
    Header(rw,tstr,1); 
    rw = rw + 1;  
  end;
  if (nonblank(RepSpec.f3)) then begin
    tstr = USetStr(2684);
    tstr = tstr & ": " & RepSpec.f3;
    Header(rw,tstr,1); 
    rw = rw + 1;  
  end;
  if (nonblank(RepSpec.ObjStr)) then begin
    tstr = USetStr(11025);
    tstr = tstr & ": " & RepSpec.ObjStr;
    Header(rw,tstr,1); 
    rw = rw + 1;  
  end;
  if (RepSpec.vals0 > 0) then begin
    tstr = USetStr(11025);
    tstr = tstr & RepSpec.vals0;
    Header(rw,tstr,1);
    rw = rw + 1;  
  end;
  EndHeader;
  
  StartFormat(15);
    OutString(0,0,USetStr(11041),false);
    OutString(50,0,USetStr(11042),false);
    OutString(100,0,USetStr(11043),false);
    OutString(200,0,USetStr(11044),false);
    OutString(250,0,USetStr(11045),false);
    OutString(320,0,USetStr(11046),false);
    OutString(440,0,USetStr(11047),true);
    OutString(1,0,USetStr(11048),true);
  EndFormat;
  Black_Divider(0,1);
  TrHs = true; 
  QTr.RejectDate = RepSpec.sStartDate;
  while (LoopKey("RejectDate",QTr,1,TrHs)) begin   
     if (DateInRange(QTr.RejectDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin 
       TrHs = false;
     end;
    if (TrHs) then begin    
    
     testf = true;
     if (nonblank(RepSpec.f1)) then begin
       if (QTr.SerNr<frqt) then begin   
         testf = false;
       end;
       if (QTr.SerNr>toqt) then begin
         testf = false;
       end;      
     end;            
     if (nonblank(RepSpec.f2)) then begin
       if (RepSpec.f2<>QTr.SalesMan) then begin
           testf=false;
       end;
     end;
      if (nonblank(RepSpec.TransStr)) then begin
        if (QTr.Location!=RepSpec.TransStr) then begin testf = false; end;
      end;
     if (nonblank(RepSpec.f4) and (RepSpec.f4<>QTr.QuoteClass)) then begin
        testf = false;
      end;
       if (nonblank(RepSpec.f3)) then begin
        if (RepSpec.f3<>QTr.CustCode) then begin
           testf=false;
        end;
     end;
     if (nonblank(RepSpec.ObjStr)) then begin
        if (RepSpec.ObjStr<>QTr.SalesGroup) then begin
          testf = false;
        end;
     end;
     if (QTr.Rejected <> 2) then begin
       testf = false;
     end;
     if (testf) then begin 
       testf = ContactInGroupClass(QTr.CustCode,RepSpec.f9,RepSpec.f10,"CUST","","");    
     end;   
     firstf = true;
     if (testf) then begin 
        if (firstf) then begin         
        end else begin
          Gray_Divider(0,1); 
        end;
        StartFormat(15);
        firstf = false;
        decdays = DateDiff(QTr.RejectDate,QTr.QTDate); 
        OutString(0,"DblQuote",QTr.SerNr,false); 
        OutString(50,0,QTr.CustCode,false);
        OutString(100,0,QTr.Addr0,false);
        OutString(200,0,QTr.SalesMan,false);
        OutDate(250,0,Qtr.QTDate,false);
        OutDate(320,0,QTr.RejectDate,false);
        OutVal(1,0,decdays,M40Val,true);
        EndFormat;
        if (blank(QTr.PRCode)) then begin
          findorder(QTr.SerNr,QTr.RejectDate);
        end;
        if (nonblank(QTr.PRCode)) then begin
          findproject(QTr.PRCode);
          findprojbudget(QTr.PRCode);
          findprojinvoices(QTr.PRCode);
        end;
        Gray_Divider(0,1);
     end; // testf   
   end; // TrHs
  end; //while
  EndJob;
  
 RETURN; 
 END;
#endif
