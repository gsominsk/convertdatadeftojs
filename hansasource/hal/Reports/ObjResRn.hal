external procedure HT2CompPer(Date,Date,var string);
external procedure GetAccTurnover(string,string,Date,Date,record ObjBalVc,string,Integer,Integer,Integer,var val,var val);
external procedure ListPerTrans(record RcVc);
external procedure HTObj(string,var string);
external procedure HTOT(string,var string);
external procedure LstRegDat(var string);
external procedure HT2Per(Date,Date,var string);

procedure AddToValArray(val v,Integer type,
                        Array val ORpperbalance0,Array val ORpperbalance1,Array val ORpperbalance2,Array val ORpperbalance3,Array val ORpperbalance4,
                        Integer objcount)
BEGIN
  switch (type) begin
    case 0: ORpperbalance0[objcount] = ORpperbalance0[objcount] + v;
    case 1: ORpperbalance1[objcount] = ORpperbalance1[objcount] + v;
    case 2: ORpperbalance2[objcount] = ORpperbalance2[objcount] + v;
    case 3: ORpperbalance3[objcount] = ORpperbalance3[objcount] + v;
    case 4: ORpperbalance4[objcount] = ORpperbalance4[objcount] + v;
  end;
  RETURN;
END;

function
Integer FindAccType(string acc)
BEGIN
  record AccVc Accr;
  Integer res;
  
  res = 0;
  Accr.AccNumber = acc;
  if (ReadFirstMain(Accr,1,true)) then begin
    res = Accr.AccType;
  end;
  FindAccType = res;
  RETURN;
END;

procedure ObjResHeader(record RcVc RepSpec,Date sStartDate2,Date sEndDate2)
BEGIN
  string 255 tstr;
  Integer rw;
  record BaseCurBlock BC;
  
  BlockLoad(BC);
      
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  LstRegDat(tstr);
  Header(rw,tstr,0);
  if (nonblank(RepSpec.ObjType)) then begin
    HTOT(RepSpec.ObjType,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.ObjStr)) then begin
    HTObj(RepSpec.ObjStr,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (RepSpec.SimVerf==1) then begin
    tstr = USetStr(3019);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (RepSpec.flags[4]==1) then begin
    tstr = USetStr(5212);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  
  tstr = USetStr(2513);
  if (repspec.basecurncy==0) then begin
    tstr=tstr & BC.BaseCur1;
  end;
  if (repspec.basecurncy==1) then begin
    tstr=tstr & " " & BC.BaseCur2;
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
  if (RepSpec.flags[20]!=0) then begin
    HT2CompPer(sStartDate2,sEndDate2,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  RETURN;
END;

procedure FindBeginningOfTime(var Date dp)
BEGIN
  record YearBlock YearRec;
  row YearBlock Yearrw;
  Integer rwcnt,i;
  Date blankd;
  
  dp = blankd;
  BlockLoad(YearRec);
  rwcnt = MatRowCnt(YearRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(YearRec,i,Yearrw);
    if (dp<Yearrw.StartDate) then begin
      dp = Yearrw.StartDate;
    end;
  end;
  RETURN;
END;

global
procedure ObjResRn(record RcVc RepSpec)
BEGIN
  record ObjBalVc ObjBalr;
  record ObjVc Objr;
  record TRVc TRr;
  Integer i,line;
  Integer rwcnt,type;
  string 255 frobj,toobj;
  string 255 fracc,toacc;
  string 255 fromart,toart;
  Boolean testf;
  Boolean found,objfnd;
  LongInt objcount;
  Date sd;
  Date sStartDate2,sEndDate2;
  val t;
  val perturn,ackturn;
  val per3,per4,pertot,per32,per42,pertot2;
  val ack3,ack4,acktot;
  
  Array string 20 ORpobject;
  Array string 255 ORpobjectname;
  Array val ORpperbalance0;
  Array val ORpperbalance1;
  Array val ORpperbalance2;
  Array val ORpperbalance3;
  Array val ORpperbalance4;
  Array val ORpackbalance0;
  Array val ORpackbalance1;
  Array val ORpackbalance2;
  Array val ORpackbalance3;
  Array val ORpackbalance4;

  Array string 20 OR2pobject;
  Array string 255 OR2pobjectname;
  Array val OR2pperbalance0;
  Array val OR2pperbalance1;
  Array val OR2pperbalance2;
  Array val OR2pperbalance3;
  Array val OR2pperbalance4;
  Array val OR2packbalance0;
  Array val OR2packbalance1;
  Array val OR2packbalance2;
  Array val OR2packbalance3;
  Array val OR2packbalance4;
  
  fromart = FirstInRange(RepSpec.Stext,20);
  toart = LastInRange(RepSpec.Stext,20);
  sStartDate2 = StringToDate(fromart);
  sEndDate2 = StringToDate(toart);
  frobj = FirstInRange(RepSpec.ObjStr,20);
  toobj = LastInRange(RepSpec.ObjStr,20);
  fracc = FirstInRange(RepSpec.AccStr,20);
  toacc = LastInRange(RepSpec.AccStr,20);
  FindBeginningOfTime(sd);
  objcount = 0;  
  StartReportJob(USetStr(5061));
   ObjResHeader(RepSpec,sStartDate2,sEndDate2);
  EndHeader;
  SetRepCol(2,50);
  SetRepCol(8,450 - (47*5));
  SetRepCol(3,450 - (47*4));
  SetRepCol(4,450 - (47*3));
  SetRepCol(5,450 - (47*2));
  SetRepCol(6,403);
  SetRepCol(7,450);
  if (RepSpec.flags[20]!=0) then begin
    StartFormat(15);
    OutString(220,0,USetStr(2472),false);
    EndFormat;
  end;  
  StartFormat(15);
  OutString(15,0,USetStr(5062),false);
  if (RepSpec.Media==mtScreen) then begin
    if (RepSpec.flags[20]!=0) then begin
      OutString(240,0,USetStr(5063),true);
      OutString(300,0,USetStr(5064),true);
      OutString(360,0,USetStr(5063),true);
      OutString(420,0,USetStr(5064),true);
      OutString(480,0,USetStr(5067),true);
    end else begin
      OutString(280,0,USetStr(5063),true);
      OutString(380,0,USetStr(5064),true);
      OutString(480,0,USetStr(5067),true);
    end;
  end else begin
    OutString(180,0,USetStr(5063),true);
    OutString(240,0,USetStr(5064),true);
    OutString(300,0,USetStr(5067),true);
    OutString(360,0,USetStr(5065),true);
    OutString(420,0,USetStr(5066),true);
    OutString(480,0,USetStr(5068),true);
  end;
  EndFormat;
  Gray_Divider(0,1);
  if (Mid(RepSpec.ObjStr,Len(frobj),1)==":") or (frobj==toobj) then begin  
    Objr.Code = frobj;
  end;
  found = true;
  while (LoopMain(Objr,1,found)) begin
    testf = true;
    if (found) then begin
      if (nonblank(toobj)) then begin
        if (Mid(RepSpec.ObjStr,Len(frobj),1)==":") or (frobj==toobj) then begin  
          if (Objr.Code>toobj) then begin 
            found = false; 
            testf = false;
          end;
        end else begin 
          if (SetInSet(Objr.Code,RepSpec.ObjStr)==false) then begin
            testf = false;
          end;
        end;  
      end;
    end;
    if (found) then begin
      if (Objr.TerminateFlag!=0) then begin testf = false; end;
      if (nonblank(RepSpec.ObjType)) then begin
        if (Objr.OTCode!=RepSpec.ObjType) then begin testf = false; end;
      end;
    end;
    if (testf) then begin
      ORpobject[objcount] = Objr.Code;
      ORpobjectname[objcount] = Objr.Comment;
      if (RepSpec.flags[20]!=0) then begin
        OR2pobject[objcount] = Objr.Code;
        OR2pobjectname[objcount] = Objr.Comment;
      end;
      objcount = objcount + 1;
      ObjBalr.Object = Objr.Code;
      ObjBalr.AccNumber = fracc;
      objfnd = true;
      ResetLoop(ObjBalr);
      while (LoopKey("ObjAccKey",ObjBalr,2,objfnd)) begin
        if (objfnd) then begin
          if (ObjBalr.Object!=Objr.Code) then begin
            objfnd = false;
          end;
          if (nonblank(toacc)) then begin
            if (ObjBalr.AccNumber>toacc) then begin
              objfnd = false;
            end;
          end;
        end;
        if (objfnd) then begin
          line = -1;
          for (i=0;i<objcount;i=i+1) begin
            if (ORpobject[i]==ObjBalr.Object) then begin
              line = i;
              goto LBreak;
            end;
          end;
LBreak:;          
          if (line>-1) then begin
            type = FindAccType(ObjBalr.AccNumber);
            t = blankval;
            GetAccTurnover(ObjBalr.AccNumber,ObjBalr.Object,RepSpec.sStartDate,RepSpec.sEndDate,
                           ObjBalr,RepSpec.CurncyCode,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,t,perturn);
            t = blankval;
            GetAccTurnover(ObjBalr.AccNumber,ObjBalr.Object,sd,RepSpec.sEndDate,
                           ObjBalr,RepSpec.CurncyCode,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,t,ackturn);
            if (type==3) then begin
              perturn = -perturn;
              ackturn = -ackturn;
            end;
            AddToValArray(perturn,type,ORpperbalance0,ORpperbalance1,ORpperbalance2,ORpperbalance3,ORpperbalance4,objcount-1);
            AddToValArray(ackturn,type,ORpackbalance0,ORpackbalance1,ORpackbalance2,ORpackbalance3,ORpackbalance4,objcount-1);            
            if (RepSpec.flags[20]!=0) then begin
              t = blankval;
              GetAccTurnover(ObjBalr.AccNumber,ObjBalr.Object,sStartDate2,sEndDate2,
                             ObjBalr,RepSpec.CurncyCode,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,t,perturn);
              t = blankval;
              GetAccTurnover(ObjBalr.AccNumber,ObjBalr.Object,sd,sEndDate2,
                             ObjBalr,RepSpec.CurncyCode,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,t,ackturn);
              if (type==3) then begin
                perturn = -perturn;
                ackturn = -ackturn;
              end;
              AddToValArray(perturn,type,OR2pperbalance0,OR2pperbalance1,OR2pperbalance2,OR2pperbalance3,OR2pperbalance4,objcount-1);
              AddToValArray(ackturn,type,OR2packbalance0,OR2packbalance1,OR2packbalance2,OR2packbalance3,OR2packbalance4,objcount-1);            
            end;
          end;
        end;
      end;
    end;  // if testf 
  end;  // while 
  for (i=0;i<objcount;i=i+1) begin
    if (RepSpec.flags[5]!=0) then begin
      testf = false;
      if (RepSpec.Media==mtScreen) then begin
        if ((ORpperbalance3[i]==0) and (ORpperbalance4[i]==0)) then begin goto L33ObjResRn; end;
      end else begin
        if ((ORpperbalance3[i]==0) and (ORpperbalance4[i]==0)) then begin
          if ((ORpackbalance3[i]==0) and (ORpackbalance4[i]==0)) then begin goto L33ObjResRn; end;
        end;
      end;
    end;
    if (RepSpec.Media==mtScreen) then begin
      StartFormat(15);
      OutString(15,0,ORpobject[i],false);
      OutString(80,0,ORpobjectname[i],false);
      if (RepSpec.flags[20]!=0) then begin
        OutVal(240,0,OR2pperbalance3[i],M4Val,true);
        OutVal(300,0,OR2pperbalance4[i],M4Val,true);
        OutVal(360,0,ORpperbalance3[i],M4Val,true);
        OutVal(420,0,ORpperbalance4[i],M4Val,true);
        t = ORpperbalance3[i] - ORpperbalance4[i];
        pertot = pertot + t;
        OutVal(480,0,t,M4Val,true);
        t = OR2pperbalance3[i] - OR2pperbalance4[i];
        pertot2 = pertot2 + t;
      end else begin
        OutVal(280,0,ORpperbalance3[i],M4Val,true);
        OutVal(380,0,ORpperbalance4[i],M4Val,true);
        t = ORpperbalance3[i] - ORpperbalance4[i];
        pertot = pertot + t;
        OutVal(480,0,t,M4Val,true);
      end;
      per3 = per3 + ORpperbalance3[i];
      per4 = per4 + ORpperbalance4[i];
      per32 = per32 + OR2pperbalance3[i];
      per42 = per42 + OR2pperbalance4[i];
      EndFormat;
    end else begin
      StartFormat(15);
      OutString(15,0,ORpobject[i],false);
      OutString(50,0,ORpobjectname[i],false);
      OutVal(180,0,ORpperbalance3[i],M4Val,true);
      OutVal(240,0,ORpperbalance4[i],M4Val,true);
      t = ORpperbalance3[i] - ORpperbalance4[i];
      pertot = pertot + t;
      OutVal(300,0,t,M4Val,true);
      per3 = per3 + ORpperbalance3[i];
      per4 = per4 + ORpperbalance4[i];
      OutVal(360,0,ORpackbalance3[i],M4Val,true);
      OutVal(420,0,ORpackbalance4[i],M4Val,true);
      t = ORpackbalance3[i] - ORpackbalance4[i];
      acktot = acktot + t;
      OutVal(480,0,t,M4Val,true);
      ack3 = ack3 + ORpackbalance3[i];
      ack4 = ack4 + ORpackbalance4[i];
      EndFormat;
    end;
L33ObjResRn:;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  if (RepSpec.Media==mtScreen) then begin
    if (RepSpec.flags[20]!=0) then begin
      OutVal(240,0,per32,M4Val,true);
      OutVal(300,0,per42,M4Val,true);
      OutVal(360,0,per3,M4Val,true);
      OutVal(420,0,per4,M4Val,true);
      OutVal(480,0,pertot,M4Val,true);
    end else begin
      OutVal(280,0,per3,M4Val,true);
      OutVal(380,0,per4,M4Val,true);
      OutVal(480,0,pertot,M4Val,true);
    end;
  end else begin
    if (RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel) then begin
      OutString(100,0,"",false);
      OutString(100,0,"",false);
    end;
    OutVal(180,0,per3,M4Val,true);
    OutVal(240,0,per4,M4Val,true);
    OutVal(300,0,pertot,M4Val,true);
    OutVal(360,0,ack3,M4Val,true);
    OutVal(420,0,ack4,M4Val,true);
    OutVal(480,0,acktot,M4Val,true);
  end;
  EndFormat;  
  if (RepSpec.flags[4]!=0) then begin 
    ListPerTrans(RepSpec); 
  end;
  EndJob;
LObjResRn:;
  RETURN;
END;
