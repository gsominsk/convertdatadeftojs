external procedure Base1ToOther(var string,val,val,val,val,val,val,var val,roundmode);
external function Boolean SetInSet2(string,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure HT2Per(Date,Date, var string);
external procedure HTITs(string,string,var string);
external procedure HTPRClass(string, var string);
external procedure HTProjects(string,string,var string);

procedure HTAmountsInCur(Integer flg, var string res)
begin
  if (flg!=0) then begin
    res = USetStr(18312);
  end else begin
    res = USetStr(18311);
  end;
  return;
end;

procedure HTPRStage(string args, var string res)
begin
  res = "";
  if (nonblank(args)) then begin
     res = USetStr(18310);
     res = res & " " & args;
  end;
  return;
end;

procedure HTPRClassification(string args, var string res)
begin
  res = "";
  if (nonblank(args)) then begin
     res = USetStr(18301);
     res = res & " " & args;
  end;
  return;
end;

procedure HTPRLeader(string args, var string res)
begin
  res = "";
  if (nonblank(args)) then begin
     res = USetStr(18183);
     res = res & " " & args;
  end;
  return;
end;

procedure PRActBud_Heaeder(record RcVc RepSpec)
begin
  Integer rw;
  string 255 tstr;
  string 255 frpr,topr;
  string 255 frit,toit;

  rw = 1;
  frpr = FirstInRange(RepSpec.f1,20);
  topr = LastInRange(RepSpec.f1,20);
  frit = FirstInRange(RepSpec.f2,20);
  toit = LastInRange(RepSpec.f2,20);

  if ((nonblankdate(RepSpec.d1)) or (nonblankdate(RepSpec.d2))) then begin
    HT2Per(RepSpec.d1,RepSpec.d2,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;  

  HTProjects(frpr,topr,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTPRClass(RepSpec.FirstAcc,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,0);
  end;
  HTPRClassification(RepSpec.LastAcc,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1; 
  end;
  HTPRStage(RepSpec.Stext,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1; 
  end;
  HTAmountsInCur(RepSpec.flags[2],tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1; 
  end;
  HTITs(frit,toit,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTPRLeader(RepSpec.AccStr,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,0);
  end;
  return;
end;

procedure PRActBud_Heaeder_PerPage(record RcVc RepSpec)
begin

  if (RepSpec.flags[2]==0) then begin
    StartFormat(15);
     OutString(170,0,USetStr(18303),false);
     OutString(300,0,USetStr(18304),false);
     if (RepSpec.flags[3]!=0) then begin
       OutString(430,0,USetStr(18305),false);
     end else begin
       OutString(430,0,USetStr(18316),false);   
     end;
    EndFormat;
  end else begin
    StartFormat(15);
     OutString(160,0,USetStr(18303),false);
     OutString(285,0,USetStr(18304),false);
     if (RepSpec.flags[3]!=0) then begin
       OutString(410,0,USetStr(18305),false);
     end else begin
       OutString(410,0,USetStr(18316),false);   
     end;
    EndFormat;
  end;
  StartFormat(15);
   OutString(0,0,USetStr(18308),false);
   OutString(3,0,USetStr(18309),false);
   OutString(4,0,USetStr(18306),true);
   OutString(5,0,USetStr(18307),true);
   OutString(6,0,USetStr(18306),true);
   OutString(7,0,USetStr(18307),true);
   OutString(8,0,USetStr(18306),true);
   OutString(9,0,USetStr(18307),true);
  EndFormat;
  Gray_Divider(0,1);
  StartHeader2(50,false);
  StartFormat(15);
   OutString(170,0,USetStr(18303),false);
   OutString(300,0,USetStr(18304),false);
   OutString(430,0,USetStr(18305),false);
  EndFormat;
  StartFormat(15);
   OutString(0,0,USetStr(18308),true);
   OutString(2,0,USetStr(18309),true);
   OutString(4,0,USetStr(18306),true);
   OutString(5,0,USetStr(18307),true);
   OutString(6,0,USetStr(18306),true);
   OutString(7,0,USetStr(18307),true);
   OutString(8,0,USetStr(18306),true);
   OutString(9,0,USetStr(18307),true);
  EndFormat;
  Gray_Divider(0,1);
  EndHeader2;
  return;
end;

procedure AddCurncyTotals(string curncy,val income,array string acur,vector val v,var Integer acurcnt)
begin
  Integer i;
  string 255 lcurncy;  
  record BaseCurBlock BCb;
  
  lcurncy = curncy;
  if (blank(lcurncy)) then begin
    BlockLoad(BCb);
    lcurncy = BCb.BaseCur1;
  end;
  for (i=0;i<acurcnt;i=i+1) begin
    if (lcurncy==acur[i]) then begin
      v[lcurncy] = v[lcurncy] + income;
      goto LAddCurncyTotals;
    end;
  end;
  v[lcurncy] = v[lcurncy] + income;
  acur[acurcnt] = lcurncy;
  acurcnt = acurcnt + 1;
LAddCurncyTotals:;  
  return;
end;

procedure PrintCurncyTotals(array string acur,vector val vtotactualincome,vector val vtotactualcost,vector val vtotbudgetcost,vector val vtotbudgetincome,Integer acurcnt)
begin
  Integer i;
  
  for (i=0;i<acurcnt;i=i+1) begin
    StartFormat(15);
     OutString(70,0,acur[i],false);
     OutVal(4,0,vtotactualincome[acur[i]],M4Val,true);
     OutVal(5,0,vtotbudgetincome[acur[i]],M4Val,true);
     OutVal(6,0,vtotactualcost[acur[i]],M4Val,true);
     OutVal(7,0,vtotbudgetcost[acur[i]],M4Val,true);
     OutVal(8,0,vtotactualincome[acur[i]]-vtotactualcost[acur[i]],M4Val,true);
     OutVal(9,0,vtotbudgetincome[acur[i]]-vtotbudgetcost[acur[i]],M4Val,true);
    EndFormat;
  end;
  return;
end;

procedure FindItemBudget(record RcVc RepSpec,record TBBUVc TBBUr,string artcode,Array string aitembuddone,var Integer aitembuddonecnt,
                         var val budgetincome,var val budgetcost,
                         array string acur,vector val vtotbudgetcost,vector val vtotbudgetincome,var Integer acurcnt)
begin
  Integer i,rwcnt;
  Integer ai;
  row TBBUVc TBBUrw;
  val v;
  Boolean testf;
  
  budgetincome = blankval;
  budgetcost = blankval;
  rwcnt = MatRowCnt(TBBUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUr,i,TBBUrw);
    testf = true;
    if (TBBUrw.ArtCode!=artcode) then begin testf = false; end;
    if (nonblank(RepSpec.Stext)) then begin
      if (TBBUrw.PRStage!=RepSpec.Stext) then begin testf = false; end;
    end;
    if (testf) then begin
      for (ai=0;ai<aitembuddonecnt;ai=ai+1) begin
        if (aitembuddone[ai]==artcode) then begin
          goto LFindItemBudget;
        end;
      end;
      switch (RepSpec.flags[3]) begin
        case 0:
          budgetincome = budgetincome + TBBUrw.Qty;
          budgetcost = budgetcost + TBBUrw.Qty;
        case 1:
          v = TBBUrw.Sum;
          if (RepSpec.flags[2]==0) then begin
            if (nonblank(TBBUr.CurncyCode)) then begin
              v = MulRateToBase1(TBBUr.CurncyCode,v,TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,DefaultCurRoundOff);
            end;
          end;
          budgetincome = budgetincome + v;
          v = TBBUrw.Qty*TBBUrw.Cost;
          if (RepSpec.flags[2]!=0) then begin
            if (nonblank(TBBUr.CurncyCode)) then begin
              Base1ToOther(TBBUr.CurncyCode,v,TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,v,DefaultCurRoundOff);
            end;
          end;
          budgetcost = budgetcost + v;
      end;
      AddCurncyTotals(TBBUr.CurncyCode,TBBUrw.Sum,acur,vtotbudgetincome,acurcnt);
      AddCurncyTotals(TBBUr.CurncyCode,TBBUrw.Qty*v,acur,vtotbudgetcost,acurcnt);
    end;
  end;
  aitembuddone[aitembuddonecnt] = artcode;
  aitembuddonecnt = aitembuddonecnt + 1;
LFindItemBudget:;  
  return;
end;

procedure AddToItemArray(string artcode,string artname,val actualincome,val budgetincome,val actualcost,val budgetcost,
                         Array string aartcode,Array string aartname,Array val aactualincome,Array val abudgetincome,
                         Array val aactualcost,Array val abudgetcost,var Integer acnt)
begin
  Integer i;
  
  for (i=0;i<acnt;i=i+1) begin
    if (artcode==aartcode[i]) then begin
      aactualincome[i] = aactualincome[i] + actualincome;
      abudgetincome[i] = abudgetincome[i] + budgetincome;
      aactualcost[i] = aactualcost[i] + actualcost;
      abudgetcost[i] = abudgetcost[i] + budgetcost;
      goto LAddToItemArray;
    end;
  end;
  aartcode[acnt] = artcode;
  aartname[acnt] = artname;
  aactualincome[acnt] = actualincome;
  abudgetincome[acnt] = budgetincome;
  aactualcost[acnt] = actualcost;
  abudgetcost[acnt] = budgetcost;
  acnt = acnt + 1;
LAddToItemArray:;  
  return;
end;

procedure PrintItemArray(Array string aartcode,Array string aartname,Array val aactualincome,Array val abudgetincome,
                         Array val aactualcost,Array val abudgetcost,Integer acnt)
begin
  Integer i;

  for (i=0;i<acnt;i=i+1) begin
    StartFormat(15);
     OutString(11,0,aartcode[i],false)
     OutString(55,0,Left(aartname[i],10),false)
     OutVal(4,0,aactualincome[i],M4Val,true);
     OutVal(5,0,abudgetincome[i],M4Val,true);
     OutVal(6,0,aactualcost[i],M4Val,true);
     OutVal(7,0,abudgetcost[i],M4Val,true);
     OutVal(8,0,aactualincome[i]-aactualcost[i],M4Val,true);
     OutVal(9,0,abudgetincome[i]-abudgetcost[i],M4Val,true);
    EndFormat;
  end;
  return;
end;

procedure RunItPerItemType2(record RcVc RepSpec,record PRVc PRr,Integer itemtype,
                            var val typeactualincome,var val typeactualcost,var val typebudgetincome,var val typebudgetcost,
                            array string acur,vector val vtotactualincome,vector val vtotactualcost,vector val vtotbudgetincome,vector val vtotbudgetcost,var Integer acurcnt,Boolean printf)
begin
  string 255 frit,toit;
  record TBIVVc TBIVr;
  Boolean found,testf,prbudf,subprfound;
  record INVc INr;
  val actualincome,actualcost;
  val budgetincome,budgetcost;
  val v;
  Integer keys;
  Date td;
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  integer i,ar;
  Array string 255 aitembuddone;
  Integer aitembuddonecnt;
  string 255 keystr;
  Integer sorting;
  val subprtypeactualincome,subprtypeactualcost,subprtypebudgetincome,subprtypebudgetcost;
  record PRVc SubPRr;
  
  Integer acnt;
  Array string 255 aartcode;
  Array string 255 aartname;
  Array val aactualincome;
  Array val abudgetincome;
  Array val aactualcost;
  Array val abudgetcost;
  
  typeactualincome = blankval; typeactualcost = blankval; typebudgetincome = blankval; typebudgetcost = blankval;
  TBBUr.PRCode = PRr.Code;
  prbudf = ReadFirstMain(TBBUr,1,true);
  frit = FirstInRange(RepSpec.f2,20);
  toit = LastInRange(RepSpec.f2,20);
  found = true;
  keys = 2;
  TBIVr.PRCode = PRr.Code;
  TBIVr.ItemType = itemtype;
  if ((nonblankdate(RepSpec.d1)) or (nonblankdate(RepSpec.d2))) then begin
    keys = 2;
    if (nonblankdate(RepSpec.d1)) then begin
      TBIVr.TransDate = RepSpec.d1;
    end else begin
      td.year = 1980; td.month = 1; td.day = 1;
      TBIVr.TransDate = td;
    end;
  end;
  keystr = "ItemType";
  sorting = 0;
  switch (RepSpec.ArtMode) begin
    case 2:
      keystr = "ItemTypeArtCode";
      sorting = 1;
      keys = 2;
  end;
  
  if (prbudf) then begin
    ar = MatRowCnt(TBBUr);
    for (i=0;i<ar;i=i+1) begin
      MatRowGet(TBBUr,i,TBBUrw);
      if (TBBUrw.ItemType==itemtype) then begin
        FindItemBudget(RepSpec,TBBUr,TBBUrw.ArtCode,aitembuddone,aitembuddonecnt,budgetincome,budgetcost,acur,vtotbudgetincome,vtotbudgetcost,acurcnt);
        switch (RepSpec.ArtMode) begin
          case 2:
            ReadFirstItem(TBBUrw.ArtCode,INr,true,false);          
            AddToItemArray(TBBUrw.ArtCode,INr.Name,actualincome,budgetincome,actualcost,budgetcost,
                           aartcode,aartname,aactualincome,abudgetincome,aactualcost,abudgetcost,acnt);          
        end;
        typebudgetincome = typebudgetincome + budgetincome;
        typebudgetcost = typebudgetcost + budgetcost;
      end;
    end;
  end;
  
  while (LoopKey(keystr,TBIVr,keys,found)) begin
    if (TBIVr.PRCode!=PRr.Code) then begin found = false; end;
    if (TBIVr.ItemType!=itemtype) then begin found = false; end;
    switch (sorting) begin
      case 0:
        if (nonblankdate(RepSpec.d2)) then begin
          if (TBIVr.TransDate>RepSpec.d2) then begin found = false; end;     
        end;    
    end;
    if (found) then begin
      testf = true;
      if (nonblankdate(RepSpec.d2)) then begin
        if (DateInRange(TBIVr.TransDate,RepSpec.d1,RepSpec.d2)==false) then begin testf = false; end;     
      end;    
      if (nonblank(RepSpec.Stext)) then begin
        if (TBIVr.PRStage!=RepSpec.Stext) then begin testf = false; end;
      end;
      if (testf) then begin
        if (nonblank(RepSpec.f2)) then begin
          if (ReadFirstItem(TBIVr.ArtCode,INr,true,false)) then begin
            if (INr.Group<frit) then begin testf = false; end;
            if (INr.Group>toit) then begin testf = false; end;
          end;
        end;
      end;
      if (testf) then begin
        switch (RepSpec.flags[3]) begin
          case 0:
            actualincome = TBIVr.Qty;
            actualcost = TBIVr.Qty;
          case 1:
            v = TBIVr.Sum;
            
            if (RepSpec.flags[2]!=0) then begin
              if (nonblank(TBBUr.CurncyCode)) then begin
                v = TBIVr.SumInCur;
              end;
            end;
            actualincome = v;
            v = TBIVr.Qty*TBIVr.CostPrice;
            
            if (RepSpec.flags[2]!=0) then begin
              if (nonblank(TBBUr.CurncyCode)) then begin
                v = TBIVr.Qty*TBIVr.CostPriceInCur;
              end;
            end;
            actualcost = v;
        end;        
        if (actualincome==0) then begin actualincome = blankval; end;
        if (actualcost==0) then begin actualcost = blankval; end;
        if (prbudf) then begin
          FindItemBudget(RepSpec,TBBUr,TBIVr.ArtCode,aitembuddone,aitembuddonecnt,budgetincome,budgetcost,acur,vtotbudgetincome,vtotbudgetcost,acurcnt);
        end;
        switch (RepSpec.ArtMode) begin
          case 2:
            ReadFirstItem(TBIVr.ArtCode,INr,true,false);          
            AddToItemArray(TBIVr.ArtCode,INr.Name,actualincome,budgetincome,actualcost,budgetcost,
                           aartcode,aartname,aactualincome,abudgetincome,aactualcost,abudgetcost,acnt);

        end;
        if (TBIVr.SumInCur==0) then begin
          AddCurncyTotals(TBIVr.CurncyCode,TBIVr.Qty*TBIVr.CostPrice,acur,vtotactualcost,acurcnt);
        end else begin
          AddCurncyTotals(TBIVr.CurncyCode,TBIVr.Qty*TBIVr.CostPriceInCur,acur,vtotactualcost,acurcnt);
        end;


        if (TBIVr.SumInCur==0) then begin
          AddCurncyTotals(TBIVr.CurncyCode,TBIVr.Sum,acur,vtotactualincome,acurcnt);
        end else begin
          AddCurncyTotals(TBIVr.CurncyCode,TBIVr.SumInCur,acur,vtotactualincome,acurcnt);
        end;

        typeactualincome = typeactualincome + actualincome;
        typeactualcost = typeactualcost + actualcost;
        typebudgetincome = typebudgetincome + budgetincome;
        typebudgetcost = typebudgetcost + budgetcost;
      end;              
    end;
  end;
  if (prbudf) then begin
    switch (itemtype) begin
      case 0:
        if (TBBUr.BudOther==1) then begin
          if (typeactualincome>TBBUr.SumOther) then begin
            typeactualincome = TBBUr.SumOther;
            typeactualcost = budgetcost;
          end;
        end;
      case 1:
        if (TBBUr.BudStocked==1) then begin
          if (typeactualincome>TBBUr.SumStocked) then begin
            typeactualincome = TBBUr.SumStocked;
            typeactualcost = budgetcost;
          end;
        end;
      case 3:
        if (TBBUr.BudTime==1) then begin
          if (typeactualincome>TBBUr.SumTime) then begin
            typeactualincome = TBBUr.SumTime;
            typeactualcost = budgetcost;
          end;
        end;
      case 5:
        if (TBBUr.BudMaterial==1) then begin
          if (typeactualincome>TBBUr.SumMaterial) then begin
            typeactualincome = TBBUr.SumMaterial;
            typeactualcost = budgetcost;
          end;
        end;
    end;
  end;
  if (RepSpec.flags[0]!=0) then begin
    SubPRr.MotherCode = PRr.Code;
    subprfound = true;
    while (LoopKey("MotherCode",SubPRr,1,subprfound)) begin
      if (SubPRr.MotherCode!=PRr.Code) then begin
        subprfound = false;
      end;
      if (subprfound) then begin
        subprtypeactualincome = blankval;
        subprtypeactualcost = blankval;
        subprtypebudgetincome = blankval;
        subprtypebudgetcost = blankval;
        RunItPerItemType2(RepSpec,SubPRr,itemtype,
                          subprtypeactualincome,subprtypeactualcost,subprtypebudgetincome,subprtypebudgetcost,
                          acur,vtotactualincome,vtotactualcost,vtotbudgetincome,vtotbudgetcost,acurcnt,false);
        typeactualincome = typeactualincome + subprtypeactualincome;
        typeactualcost = typeactualcost + subprtypeactualcost;
        typebudgetincome = typebudgetincome + subprtypebudgetincome;
        typebudgetcost = typebudgetcost + subprtypebudgetcost;
      end;
    end;
  end;
  if (printf) then begin
    switch (RepSpec.ArtMode) begin
      case 1:
        if (typeactualincome!=0) or (typebudgetincome!=0) or (typeactualcost!=0) or (typebudgetcost!=0) then begin
          StartFormat(15);
          OutString(30,0,USetStr(18313) & " " & USetStr(18314+itemtype),false);
          OutVal(4,0,typeactualincome,M4Val,true);
          OutVal(5,0,typebudgetincome,M4Val,true);
          OutVal(6,0,typeactualcost,M4Val,true);
          OutVal(7,0,typebudgetcost,M4Val,true);
          OutVal(8,0,typeactualincome-typeactualcost,M4Val,true);
          OutVal(9,0,typebudgetincome-typebudgetcost,M4Val,true);
          EndFormat;
          Gray_Divider(11,1);
        end;
      case 2:    
        if (typeactualincome!=0) or (typebudgetincome!=0) or (typeactualcost!=0) or (typebudgetcost!=0) then begin
          PrintItemArray(aartcode,aartname,aactualincome,abudgetincome,aactualcost,abudgetcost,acnt);
          Gray_Divider(11,1);
          
          StartFormat(15);
          OutString(30,0,USetStr(18313) & " " & USetStr(18314+itemtype),false);
          OutVal(4,0,typeactualincome,M4Val,true);
          OutVal(5,0,typebudgetincome,M4Val,true);
          OutVal(6,0,typeactualcost,M4Val,true);
          OutVal(7,0,typebudgetcost,M4Val,true);
          OutVal(8,0,typeactualincome-typeactualcost,M4Val,true);
          OutVal(9,0,typebudgetincome-typebudgetcost,M4Val,true);
          EndFormat;
          Gray_Divider(11,1);
        end;
    end;
  end;
  return;
end;

procedure RunItPerItemType(record RcVc RepSpec,record PRVc PRr,Integer itemtype,
                           var val typeactualincome,var val typeactualcost,var val typebudgetincome,var val typebudgetcost,
                           array string acur,vector val vtotactualincome,vector val vtotactualcost,vector val vtotbudgetincome,vector val vtotbudgetcost,var Integer acurcnt)
begin
  RunItPerItemType2(RepSpec,PRr,itemtype,
                    typeactualincome,typeactualcost,typebudgetincome,typebudgetcost,
                    acur,vtotactualincome,vtotactualcost,vtotbudgetincome,vtotbudgetcost,acurcnt,true);
end;

global
procedure PRActBudRn(record RcVc RepSpec)
begin
  record PRVc PRr;
  string 255 frpr,topr;
  Boolean found,testf,prheaderf;
  val typeactualincome,typeactualcost,typebudgetincome,typebudgetcost;
  val practualincome,practualcost,prbudgetincome,prbudgetcost;
  vector val vtotactualcost,vtotactualincome,vtotbudgetincome,vtotbudgetcost;
  val totactualcost,totactualincome,totbudgetincome,totbudgetcost;
  array string 20 acur;
  Integer acurcnt;
  record BaseCurBlock BCb;
  
  BlockLoad(BCb);
  frpr = FirstInRange(RepSpec.f1,20);
  topr = LastInRange(RepSpec.f1,20);
  
  StartReportJob(USetStr(18300));
  PRActBud_Heaeder(RepSpec);
  EndHeader;
  if (RepSpec.flags[2]==0) then begin
    SetRepCol(3,50);
    SetRepCol(4,160);
    SetRepCol(5,220);
    SetRepCol(6,290);
    SetRepCol(7,350);
    SetRepCol(8,420);
    SetRepCol(9,480);
  end else begin
    SetRepCol(3,50);
    SetRepCol(4,160);
    SetRepCol(5,210);
    SetRepCol(6,280);
    SetRepCol(7,330);
    SetRepCol(8,400);
    SetRepCol(9,450);
  end;
  PRActBud_Heaeder_PerPage(RepSpec);
  
  PRr.Code = frpr;
  found = true;
  while (LoopMain(PRr,1,found)) begin
    if (nonblank(RepSpec.f1)) then begin
      if (PRr.Code>topr) then begin found = false; end;
    end;
    if (found) then begin
      testf = true;
      if (PRr.Terminated!=0) then begin
        if (RepSpec.flags[1]==0) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.FirstAcc)) then begin
        if (PRr.PRClass!=RepSpec.FirstAcc) then begin testf = false; end; 
      end;
      if (nonblank(RepSpec.LastAcc)) then begin
        if (SetInSet2(RepSpec.LastAcc,PRr.PRClassification)==false) then begin testf = false; end; 
      end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (PRr.Leader!=RepSpec.AccStr) then begin testf = false; end; 
      end;
      if (testf) then begin
        practualincome = blankval; practualcost = blankval; prbudgetincome = blankval; prbudgetcost = blankval;
        switch (RepSpec.ArtMode) begin
          case 1:
            StartFormat(15);
             OutString(0,"DblPRVc",PRr.Code,false)
             OutString(3,0,PRr.Name,false)
            EndFormat;
          case 2:
            StartFormat(15);
             OutString(0,"DblPRVc",PRr.Code,false)
             OutString(3,0,PRr.Name,false)
            EndFormat;
        end;

        RunItPerItemType(RepSpec,PRr,3,typeactualincome,typeactualcost,typebudgetincome,typebudgetcost,acur,vtotactualincome,vtotactualcost,vtotbudgetincome,vtotbudgetcost,acurcnt);
        practualincome = practualincome + typeactualincome;
        practualcost = practualcost + typeactualcost;
        prbudgetincome = prbudgetincome + typebudgetincome;
        prbudgetcost = prbudgetcost + typebudgetcost;

        RunItPerItemType(RepSpec,PRr,0,typeactualincome,typeactualcost,typebudgetincome,typebudgetcost,acur,vtotactualincome,vtotactualcost,vtotbudgetincome,vtotbudgetcost,acurcnt);
        practualincome = practualincome + typeactualincome;
        practualcost = practualcost + typeactualcost;
        prbudgetincome = prbudgetincome + typebudgetincome;
        prbudgetcost = prbudgetcost + typebudgetcost;

        RunItPerItemType(RepSpec,PRr,5,typeactualincome,typeactualcost,typebudgetincome,typebudgetcost,acur,vtotactualincome,vtotactualcost,vtotbudgetincome,vtotbudgetcost,acurcnt);
        practualincome = practualincome + typeactualincome;
        practualcost = practualcost + typeactualcost;
        prbudgetincome = prbudgetincome + typebudgetincome;
        prbudgetcost = prbudgetcost + typebudgetcost;

        RunItPerItemType(RepSpec,PRr,1,typeactualincome,typeactualcost,typebudgetincome,typebudgetcost,acur,vtotactualincome,vtotactualcost,vtotbudgetincome,vtotbudgetcost,acurcnt);
        practualincome = practualincome + typeactualincome;
        practualcost = practualcost + typeactualcost;
        prbudgetincome = prbudgetincome + typebudgetincome;
        prbudgetcost = prbudgetcost + typebudgetcost;

        totactualincome = totactualincome + practualincome;
        totactualcost = totactualcost + practualcost;
        totbudgetincome = totbudgetincome + prbudgetincome;        
        totbudgetcost = totbudgetcost + prbudgetcost;

        switch (RepSpec.ArtMode) begin
          case 2:
            StartFormat(15);
             OutString(30,0,USetStr(18313) & " " & USetStr(18308),false)
             OutVal(4,0,practualincome,M4Val,true);
             OutVal(5,0,prbudgetincome,M4Val,true);
             OutVal(6,0,practualcost,M4Val,true);
             OutVal(7,0,prbudgetcost,M4Val,true);
             OutVal(8,0,practualincome-practualcost,M4Val,true);
             OutVal(9,0,prbudgetincome-prbudgetcost,M4Val,true);
            EndFormat;
          case 1:
            StartFormat(15);
             OutString(30,0,USetStr(18313) & " " & USetStr(18308),false)
             OutVal(4,0,practualincome,M4Val,true);
             OutVal(5,0,prbudgetincome,M4Val,true);
             OutVal(6,0,practualcost,M4Val,true);
             OutVal(7,0,prbudgetcost,M4Val,true);
             OutVal(8,0,practualincome-practualcost,M4Val,true);
             OutVal(9,0,prbudgetincome-prbudgetcost,M4Val,true);
            EndFormat;
          case 0:
            StartFormat(15);
             OutString(0,"DblPRVc",PRr.Code,false)
             OutString(3,0,Left(PRr.Name,10),false)
             OutVal(4,0,practualincome,M4Val,true);
             OutVal(5,0,prbudgetincome,M4Val,true);
             OutVal(6,0,practualcost,M4Val,true);
             OutVal(7,0,prbudgetcost,M4Val,true);
             OutVal(8,0,practualincome-practualcost,M4Val,true);
             OutVal(9,0,prbudgetincome-prbudgetcost,M4Val,true);
             if (RepSpec.flags[2]!=0) then begin
               if (blank(PRr.CurncyCode)) then begin
                 OutString(470,0,BCb.BaseCur1,false);
               end else begin
                 OutString(470,0,PRr.CurncyCode,false);
               end;
             end;
            EndFormat;
        end;

      end;
    end;
  end;
  Gray_Divider(0,1);
  if (RepSpec.flags[2]==0) or (RepSpec.flags[3]==0) then begin
    StartFormat(15);
     OutString(30,0,USetStr(18313),false)
     OutVal(4,0,totactualincome,M4Val,true);
     OutVal(5,0,totbudgetincome,M4Val,true);
     OutVal(6,0,totactualcost,M4Val,true);
     OutVal(7,0,totbudgetcost,M4Val,true);
     OutVal(8,0,totactualincome-totactualcost,M4Val,true);
     OutVal(9,0,totbudgetincome-totbudgetcost,M4Val,true);
    EndFormat;
  end else begin  
    PrintCurncyTotals(acur,vtotactualincome,vtotactualcost,vtotbudgetincome,vtotbudgetcost,acurcnt);
  end;
  EndJob;
  return;
end;
