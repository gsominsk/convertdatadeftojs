external function Boolean HasModIN();
external procedure HTLocations(string,string,var string);
external function val GetStockQty(string,string,Date,Boolean);
external function Boolean HasItemGroups();
external function Boolean TestArtCodeMatch(string,string);
external procedure HTArtSel(string,string, var string);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external function Boolean SetInSet2(string,string);

global
procedure ArtRn(record RcVc RepSpec)
begin
  Record INVc INr;
  record BarcodeVc Barcoder;
  record ITVc ITr;
  Boolean TrHs,foundf;
  val sum1;
  String 5 vatc;
  String 5 lastgroup;
  String 20 fromart,toart;
  String 20 frcc,tocc;
  String 60 ckey;
  String 100 namestr;
  String 255 tstr;
  Integer vatflag;
  Integer keys;
  Integer rw;
  Boolean plhit;
  Boolean itemout;
  Boolean testf;
  val qty;
  val instock;
  record PLVc PLLr;  

  rw = 1;
  fromart = FirstInRange(RepSpec.f1,20);
  toart = LastInRange(RepSpec.f1,20);
  frcc = FirstInRange(RepSpec.f3,20);
  tocc = LastInRange(RepSpec.f3,20);

  vatflag = 0;
  itemout = false;
  lastgroup = "";

  StartReportJob(USetStr(2324));
  HTArtSel(RepSpec.f1,RepSpec.f3,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (RepSpec.flags[2]==0) then begin
    tstr = USetStr(1187);
  end;
  if (RepSpec.flags[2]==1) then begin
    tstr = USetStr(1188);
  end;
  if (RepSpec.flags[2]==2) then begin
    tstr = USetStr(1189);
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
  if (nonblank(RepSpec.f3)) then begin 
    tstr = USetStr(1135);
    tstr = tstr & RepSpec.f3;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.AccStr)) then begin 
    tstr = USetStr(1156);
    tstr = tstr & RepSpec.AccStr;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  HTLocations(RepSpec.f5,RepSpec.f5,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (nonblank(RepSpec.FirstAcc)) then begin 
    tstr = USetStr(2321) & ": " & RepSpec.FirstAcc;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  EndHeader;
  SetRepCol(2,80);
  SetRepCol(3,128);
  SetRepCol(4,384);
  StartFormat(15);
  OutString(0,0,USetStr(2325),false);
  if (RepSpec.flags[7]!=0) then begin
    OutString(2,0,USetStr(2326) & " / " & USetStr(8600),false);
  end else begin
    OutString(2,0,USetStr(2326),false);
  end;
  if (HasItemGroups) then begin
    OutString(210,0,USetStr(2338),false);
  end;
  OutString(260,0,USetStr(2327),false);
  OutString(290,0,USetStr(2337),false);
  if nonblank(RepSpec.FirstAcc) then begin 
    OutString(370,0,RepSpec.FirstAcc & " " & USetStr(2335),true);
  end;  
  if (HasModIN) then begin
    OutString(420,0,USetStr(2330),true);
  end;
  OutStringAdjustBiDi(1,0,USetStr(2335),true,M4Val,515);
  EndFormat;
  sum1 = 0;
  if (RepSpec.flags[2]==0) then begin
    INr.Code = fromart;
    ckey = "Code";
    keys = 1;
  end;
  if (RepSpec.flags[2]==1) then begin
    INr.Group = frcc;
    INr.Code = fromart;
    ckey = "Group";
    keys = 2;
  end;
  if (RepSpec.flags[2]==2) then begin
    INr.Name = "";
    ckey = "Name";
    keys = 1;
  end;
  Gray_Divider(0,1);
  TrHs = true;
  while (LoopKey(ckey,INr,keys,TrHs)) begin
    TrHs = true;
    testf = true;
    if (RepSpec.AccStr<>"") then begin
      if (INr.Department<>RepSpec.AccStr) then begin
       testf = false;
      end;
    end;
    if (RepSpec.flags[2]==0) then begin
      if (TrHs) then begin
       if (tocc<>"") then begin
        if (INr.Group > tocc) then begin
          testf = false;
        end;
       end;
      end;
      if (TrHs) then begin
       if (frcc<>"") then begin
        if (INr.Group < frcc) then begin
          testf = false;
        end;
       end;
      end;
      if (TrHs) then begin
       if (toart<>"") then begin
        if (INr.Code > toart) then begin
          TrHs = false;
        end;
       end;
      end;
   end;
   if (RepSpec.flags[2]==1) then begin
      if (TrHs) then begin
       if (tocc<>"") then begin
        if (INr.Group > tocc) then begin
          TrHs = false;
        end;
       end;
      end;
      if (TrHs) then begin
       if (toart<>"") then begin
        if (INr.Code > toart) then begin
          testf = false;
        end;
       end;
      end;
      if (TrHs) then begin
       if (fromart<>"") then begin
        if (INr.Code < fromart) then begin
          testf = false;
        end;
       end;
      end;
   end;
   if (RepSpec.flags[2]==2) then begin
      if (TrHs) then begin
       if (tocc<>"") then begin
        if (INr.Group > tocc) then begin
          testf = false;
        end;
       end;
      end;
      if (TrHs) then begin
       if (frcc<>"") then begin
        if (INr.Group < frcc) then begin
          testf = false;
        end;
       end;
      end;
      if (TrHs) then begin
       if (nonblank(toart)) then begin
        if (INr.Code > toart) then begin
          testf = false;
        end;
       end;
      end;
      if (TrHs) then begin
       if (nonblank(fromart)) then begin
        if (INr.Code < fromart) then begin
          testf = false;
        end;
       end;
      end;
   end;
   if (TrHs==false) then begin
    testf = false;
   end;
   if (nonblank(RepSpec.f4)) then begin
     if (SetInSet2(RepSpec.f4,INr.DispGroups)==false) then begin
       testf = false;
     end;
   end; 
   if (INr.Terminated<>0) then begin
     if (RepSpec.flags[10]==0) then begin
       testf = false;
     end;
   end;
   if (RepSpec.flags[3]==0) then begin
     if (INr.ItemType==0) then begin
       testf = false;
     end;
   end;
   if (RepSpec.flags[4]==0) then begin
     if (INr.ItemType==1) then begin
       testf = false;
     end;
   end;
   if (RepSpec.flags[5]==0) then begin
     if (INr.ItemType==2) then begin
       testf = false;
     end;
   end;
   if (RepSpec.flags[6]==0) then begin
     if (INr.ItemType==3) then begin
       testf = false;
     end;
   end;
   if (testf) then begin
     if (GetItemNameStr(1,namestr,RepSpec.Stext,INr.Name,INr.Code)) then begin end;
     if (RepSpec.flags[2]==1) then begin
       if (lastgroup <> INr.Group) then begin
         if (itemout==true) then begin
           Gray_Divider(0,1);
         end;
         StartFormat(15);
         OutString(20,0,INr.Group,false);
         ITr.Code=INr.Group;
         if (ReadFirstMain(ITr,1,true)) then begin
          OutString(100,0,ITr.Comment,false);
         end;
         EndFormat;
         Gray_Divider(0,1);
         lastgroup = INr.Group;
       end;
     end;
     itemout = true;
     GetItemVATCode(INr.Code,0,vatc,false);
     plhit = true;
     StartFormat(15);
     OutString(0,"DblINVc",INr.Code,false);
     switch (RepSpec.Media) begin
       case mtScreen:  
         OutString(2,0,left(namestr,60),false);
       otherwise
         OutString(2,0,namestr,false);
     end;    
     if (HasItemGroups) then begin
      OutString(210,0,INr.Group,false);
     end;
     OutString(260,0,INr.Unittext,false);
     OutString(300,0,INr.VATCode,false);
     if (nonblank(RepSpec.FirstAcc)) then begin 
       PLLr.PLCode = RepSpec.FirstAcc;
       PLLr.ArtCode = INr.Code;
       if ReadFirstMain(PLLr,2,true) then begin 
         OutStringAdjustBiDi(360,0,PLLr.ExVatPrice,true,M4Val,405);
       end else begin 
         OutString(360,0,"",true);
       end;
     end;
     instock = GetStockQty(INr.Code,RepSpec.f5,CurrentDate,false);
     if (instock==0) then begin
       instock = blankval; 
     end;
     if (HasModIN) then begin
       OutStringAdjustBiDi(420,0,instock,true,M4Val,460);
     end;
     //OutVal(1,0,INr.UPrice1,M4Val,true); (M423Val cant be printed)
     OutStringAdjustBiDi(1,0,INr.UPrice1,true,M4Val,515);
     EndFormat;
     qty = qty + 1;
     if (RepSpec.flags[7]!=0) then begin
       if (nonblank(INr.BarCode)) then begin
         StartFormat(15);
         OutString(2,0,INr.BarCode,false);
         EndFormat;
       end;
       Barcoder.Itemcode = INr.Code;
       foundf = true;
       ResetLoop(Barcoder);
       while (LoopKey("Itemcode",Barcoder,1,foundf)) begin
         if (TestArtCodeMatch(Barcoder.Itemcode,INr.Code)==false) then begin
           foundf = false;
         end;
         if (foundf) then begin
           StartFormat(15);
           OutString(15,0,Barcoder.Barcode,false);
           OutString(150,0,Barcoder.Itemcode,false);
           OutString(300,0,Barcoder.Comment,false);
           EndFormat;
         end;
       end;
     end;
   end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  OutValBiDi(0,0,qty,M40Val,false,85);
  EndFormat;
  EndJob;
  return;
end;

