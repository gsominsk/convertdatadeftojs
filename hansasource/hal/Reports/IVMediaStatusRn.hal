/*
function Integer FindERecordStatus(Integer status,string custid,LongInt sernr,string filename,var string errstr)
begin
  Integer res;
  record ERecordStatusVc ERSr;
  
  res = -1;
  ERSr.FileName = filename;
  ERSr.Status = status;
  ERSr.CustID = custid;
  ERSr.CustSerNr = sernr;
  if (ReadLastKey("FileNameStatus",ERSr,4,true)) then begin
    res = status;
    if (ERSr.FileName!=filename) then begin res = -1; end;
    if (ERSr.Status!=status) then begin res = -1; end;
    if (ERSr.CustID!=custid) then begin res = -1; end;
    if (StringToLongInt(ERSr.CustSerNr)!=sernr) then begin res = -1; end;
    if (res!=-1) then begin
      errstr = ERSr.Comment;
    end;
  end;
  FindERecordStatus = res;
  return; 
end;
*/

function Integer FindERecordStatus(Integer status,string custid,LongInt sernr,string filename,var string errstr)
begin
  Integer res;
  record ERecordStatusVc ERSr;
  Boolean found;
  
  res = -1;
  ERSr.FileName = filename;
  ERSr.CustID = custid;
  ERSr.CustSerNr = sernr;
  ERSr.CompNr = CurrentCompany;
  found = true;
  while (LoopBackKey("CustIDSerNr",ERSr,3,found)) begin
    if (ERSr.FileName!=filename) then begin found = false; end;
    if (ERSr.CustID!=custid) then begin found = false; end;
    if (StringToLongInt(ERSr.CustSerNr)!=sernr) then begin found = false; end;
    if (found) then begin
      res = ERSr.Status;
      errstr = ERSr.Comment;
      found = false;
    end;
  end;
  FindERecordStatus = res;
  return; 
end;

global
function integer GetSMSStatusFromETaskQueue(LongInt sernr,var string errstr)
begin
  record SMSVc SMSr;
  record ETasksQueueVc ETQr;
  boolean foundf;
  integer res;

  res = -1;
  SMSr.SerNr = sernr;
  if (ReadFirstMain(SMSr,1,true)) then begin
    foundf = true;
    ETQr.FileName = "SMSVc";
    ETQr.CompNr = CurrentCompany;
    ETQr.TransDate = SMSr.TransDate;
    while (LoopKey("FileName",ETQr,3,foundf)) begin
      if (ETQr.FileName!="SMSVc" or ETQr.CompNr!=CurrentCompany or ETQr.TransDate!=SMSr.TransDate) then begin
        foundf = false;
      end;
      if (foundf) then begin
        if (ETQr.RecSerNr==SMSr.SerNr) begin
          res = ETQr.Status;
          errstr = ETQr.ErrorStr;
          if (blank(errstr)) then begin
            errstr = USetStr(20239);
          end;
        end;
      end; 
    end;
  end;
  GetSMSStatusFromETaskQueue = res;
  return;
end;

global
function Integer ERecordStatus(string custid,string custcode,LongInt sernr,string filename,var string errstr)
begin
  Integer res;
  record ERecordStatusVc ERSr;
  Boolean ersrf;
  
  errstr = "";
  res = FindERecordStatus(-1,custid,sernr,filename,errstr);
/*  
  res = FindERecordStatus(1,custid,sernr,filename,errstr);
  if (res==-1) then begin
    res = FindERecordStatus(0,custid,sernr,filename,errstr);
  end;
  if (res==-1) then begin
    res = FindERecordStatus(6,custid,sernr,filename,errstr);
  end;
  if (res==-1) then begin
    res = FindERecordStatus(5,custid,sernr,filename,errstr);
  end;
  if (res==-1) then begin
    res = FindERecordStatus(4,custid,sernr,filename,errstr);
  end;
  if (res==-1) then begin
    res = FindERecordStatus(3,custid,sernr,filename,errstr);
  end;
  if (res==-1) then begin
    res = FindERecordStatus(2,custid,sernr,filename,errstr);
  end;

  if (res==-1) then begin
    res = FindERecordStatus(1,custcode,sernr,filename,errstr);
  end;
  if (res==-1) then begin
    res = FindERecordStatus(0,custcode,sernr,filename,errstr);
  end;
  if (res==-1) then begin
    res = FindERecordStatus(6,custcode,sernr,filename,errstr);
  end;
  if (res==-1) then begin
    res = FindERecordStatus(5,custcode,sernr,filename,errstr);
  end;
  if (res==-1) then begin
    res = FindERecordStatus(4,custcode,sernr,filename,errstr);
  end;
  if (res==-1) then begin
    res = FindERecordStatus(3,custcode,sernr,filename,errstr);
  end;
  if (res==-1) then begin
    res = FindERecordStatus(2,custcode,sernr,filename,errstr);
  end;  
*/  
  if (res==-1 and filename=="SMSVc") then begin
    res = GetSMSStatusFromETaskQueue(sernr,errstr);
  end;
  ERecordStatus = res;
  return;
end;

global
procedure IVMediaStatusRn(record RcVc RepSpec)
begin
  record IVVc IVr;
  Boolean found,testf,einvf;  
  String 20 mykey;
  Integer sorting,keys,erstatus;
  string 255 frcu,tocu,errstr;
  LongInt friv,toiv;
  record EInvoiceQueVc EIQr;
  record InternetEnablerBlock IEb;
  
  BlockLoad(IEb);
  frcu = FirstInRange(RepSpec.f2,20);
  tocu = LastInRange(RepSpec.f2,20);
  friv = FirstInRange(RepSpec.f1,20);
  toiv = LastInRange(RepSpec.f1,20);
  StartReportJob(USetStr(17050));
  EndHeader;
  StartFormat(15);
   OutString(0,0,USetStr(17055),false);
   OutString(80,0,USetStr(17056),false);
   OutString(140,0,USetStr(17057),false);
   OutString(200,0,USetStr(17058),false);
   OutString(280,0,USetStr(17059),false);
   OutString(340,0,USetStr(17060),false);
  EndFormat;
  Gray_Divider(0,1);
  
  found = true;
  IVr.TransDate = RepSpec.sStartDate;
  mykey = "TransDate";
  sorting = 0;
  keys = 1;
  if (nonblank(RepSpec.f2)) then begin
    mykey = "CustDate";
    IVr.CustCode = frcu;
    IVr.InvDate = RepSpec.sStartDate;
    sorting = 1;
    keys = 2;
  end;
  if (nonblank(RepSpec.f1)) then begin
    mykey = "SerNr";
    IVr.SerNr = friv;
    sorting = 2;
    keys = 1;
  end;
    
  while (LoopKey(mykey,IVr,keys,found)) begin
    switch (sorting) begin
      case 0:
        if (DateInRange(IVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
          found = false;
        end;
      case 1:
        if (nonblank(RepSpec.f2)) then begin
           if (IVr.CustCode<frcu) then begin found = false; end;
           if (IVr.CustCode>tocu) then begin found = false; end;
        end;
      case 2:
        if (nonblank(RepSpec.f1)) then begin
           if (IVr.SerNr<friv) then begin found = false; end;
           if (IVr.SerNr>toiv) then begin found = false; end;
        end;
    end;
    if (found) then begin
      testf = true;
      if (DateInRange(IVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
        testf = false;
      end;
      if (nonblank(RepSpec.f2)) then begin
         if (IVr.CustCode<frcu) then begin testf = false; end;
         if (IVr.CustCode>tocu) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.f1)) then begin
         if (IVr.SerNr<friv) then begin testf = false; end;
         if (IVr.SerNr>toiv) then begin testf = false; end;
      end;
      if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
        if (RepSpec.flags[1]==0) then begin
          testf = false;
        end;
      end;
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        if (RepSpec.flags[2]==0) then begin
          testf = false;
        end;
      end;
      if (IVr.InvType==kInvoiceTypeInterest) then begin
        if (RepSpec.flags[3]==0) then begin
          testf = false;
        end;
      end;
      if ((IVr.InvType!=kInvoiceTypeCash and IVr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) and (IVr.InvType!=kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales) and (IVr.InvType!=kInvoiceTypeInterest)) then begin
        if (RepSpec.flags[0]==0) then begin
          testf = false;
        end;
      end;
      if (IVr.Invalid!=0) then begin testf = false; end;
      if (IVr.OKFlag==0) then begin testf = false; end;

      EIQr.FileName = "IVVc";
      EIQr.RecSerNr = IVr.SerNr;
      einvf = ReadFirstKey("FileName",EIQr,2,true);

      if (einvf) then begin
        if (RepSpec.flags[4]==0) then begin
          testf = false;
        end;
        erstatus = ERecordStatus(IEb.CustomerCode,IVr.CustCode,IVr.SerNr,"IVVc",errstr);
        if (RepSpec.flags[7]!=0) then begin
          if (erstatus==5) then begin
            testf = false;
          end;
        end;
      end else begin
        if (IVr.Prntdf!=0) then begin
          if (RepSpec.flags[5]==0) then begin
            testf = false;
          end;
        end else begin
          if (RepSpec.flags[6]==0) then begin
            testf = false;
          end;
        end;
        if (RepSpec.flags[8]!=0) then begin
          if (IVr.FInvExpFlag!=0) then begin
            testf = false;
          end;
        end;
      end;
      
      if (testf) then begin
        StartFormat(15);
         OutLongInt(0,"DblIVVc",IVr.SerNr,false);
         OutDate(80,0,IVr.TransDate,false);
         OutString(140,0,IVr.CustCode,false);
         switch (IVr.InvType) begin
           case kInvoiceTypeCashInvoiceReceiptPRT: OutString(200,0,USetStr(1804),false);
           case kInvoiceTypeCash: OutString(200,0,USetStr(1804),false);
           case kInvoiceTypeCredit: OutString(200,0,USetStr(1805),false);
           case kInvoiceTypeInterest: OutString(200,0,USetStr(1810),false);
           case kInvoiceTypeCreditSpecialSales: OutString(200,0,USetStr(1805),false);
           otherwise OutString(200,0,USetStr(1803),false);
         end;         
         if (einvf) then begin
           if (EIQr.Status!=0) then begin
             OutString(280,0,USetStr(17053),false);
           end else begin
             OutString(280,0,USetStr(17054),false);
           end;
           if (nonblank(errstr)) then begin
             OutString(340,0,errstr,false);
           end else begin
             switch (erstatus) begin
               case 5: OutString(340,0,USetStr(20225),false);
               case 4: OutString(340,0,USetStr(20224),false);
               case 3: OutString(340,0,USetStr(20223),false);
               case 2: OutString(340,0,USetStr(20222),false);
               case 1: OutString(340,0,USetStr(20221),false);
               case 0: OutString(340,0,USetStr(20220),false);
               otherwise
                 OutString(340,0,USetStr(17061),false);
             end;
           end;
         end else begin
           if (IVr.Prntdf!=0) then begin
             OutString(280,0,USetStr(17051),false);
           end else begin
             OutString(280,0,USetStr(17052),false);
           end;
           if (IVr.FInvExpFlag!=0) then begin
             OutString(340,0,USetStr(17062),false);
           end;
         end;
        EndFormat;
      end;
    end;
  end;
  EndJob;  
  return;
end;