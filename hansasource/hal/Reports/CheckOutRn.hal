external function Boolean IsEnterprise();
external procedure HTResClass(string,var string);
external procedure HTResLoc(string,var string);
external function Boolean AllowCheckout(record JobVc,var Boolean);
external procedure GetSugProgramOnDay(Record JobVc,Date,var String,var Boolean,Record RcVc);
external function Boolean IsCancelState(String);
external procedure GetRealLeavingTimes(Record JobVc,Boolean,var time,var time);
external procedure JobBubSort40(var array Record JobVc,Integer);
external procedure JobBubSort40ResStatus(var array Record JobVc,Integer);

procedure GetJobStatus(record JobVc Jobr,var string stat)
begin
  Boolean hasopen;
  
  stat = "Ready";
  if (AllowCheckout(Jobr,hasopen)==false) then begin
    stat = "Not Paid";
  end else begin
    if (hasopen) then begin
      stat = "Invoicable";
    end;
  end;
  return;
end;

procedure JobInvoiceNrs(LongInt JobNr,var string InvNrs)
begin
  Boolean Cont;
  Record IVVc IVr;
  
  InvNrs = "";
  Cont = true;
  IVr.SVONr = JobNr;
  While Loopkey("JobNr",IVr,1,Cont) begin
    if (IVr.JobNr <> JobNr) then begin
      Cont = false;
    end else begin
      if blank(InvNrs) then begin
        InvNrs = IVr.SerNr;
      end else begin  
        InvNrs = InvNrs & "," & IVr.SerNr;
      end;
    end;  
  end;
  return;
end;

function boolean CheckOutSelect(Record RcVc RepSpec,Record JobVc Jobr,var boolean foundf)
begin
  Boolean sel,testf;
  Record HotelBlock HotelBlock;  
  record ResVc Resr;

  BlockLoad(HotelBlock);
  sel = false;
  if (Jobr.TransDate > RepSpec.d1) then begin
    foundf = false;
  end else begin
    if (Jobr.EndDate == RepSpec.d1) then begin
/*
      if ((RepSpec.flags[2]==0) or (Jobr.ResStatus<>HotelBlock.ChOutSt)) then begin
        if not IsCancelState(Jobr.ResStatus) then begin
          if (RepSpec.flags[3]==1) then begin  
            sel = true;
          end else begin
            if ((Jobr.SwitchFlag<>2) or (Jobr.SwitchFlag<>3)) then begin //LO40 Checkout from ChangeRoom
              sel = true;
            end;
          end;
        end;    
      end;
*/
      testf = true;
      if (RepSpec.flags[2]!=0) then begin
        if (Jobr.ResStatus==HotelBlock.ChOutSt) then begin
          testf = false;
        end;
      end;
      if IsCancelState(Jobr.ResStatus) then begin
        testf = false;
      end;
      if (RepSpec.flags[3]!=1) then begin  
        if ((Jobr.SwitchFlag<2) and (Jobr.SwitchFlag>3)) then begin //LO40 Checkout from ChangeRoom
          testf = false;
        end;
      end;

      Resr.Code = Jobr.ResCode;
      ReadFirstMain(Resr,1,true);
      if (nonblank(RepSpec.f3)) then begin
        if (Resr.ResLoc!=RepSpec.f3) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.f6)) then begin
        if (SetInSet(RepSpec.f6,Resr.Class)==false) then begin testf = false; end;
      end;
      if (testf) then begin
        sel = true;
      end;           
    end; 
  end;  
  CheckOutSelect = sel;
  return;
end;

global
procedure CheckOutRn(Record RcVc RepSpec)
begin
  Record JobVc Jobr;
  Record HotelBlock HotelBlock;  
  row JobVc Jobrw;
  Integer rw,i,rwcnt,cnt,maxstay,memcnt,j;
  boolean testf, foundf,dummy,skip;
  String 120 tstr,tmp;
  Record RcVc MyRepSpec;
  Time HardTime,SoftTime;
  Array Record JobVc aJobSerNr;
  Integer acnt;
  Boolean firstf;
  record ReservationStatusVc ResStatr;
  string 20 oldresstat;

  StartReportJob(USetStr(11170));
  rw = 1;
  tstr = USetStr(11091) & ": " & RepSpec.d1;
  Header(rw,tstr,1);
  rw = rw + 1;
  HTResLoc(RepSpec.f3,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTResClass(RepSpec.f6,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;

  maxstay = 30;
  cnt = 0;
  SetRepCol(2,0);
  SetRepCol(3,55);
  SetRepCol(4,130);
  SetRepCol(5,160);
  SetRepCol(6,240);
  SetRepCol(8,360);
  SetRepCol(7,410);
  SetRepCol(9,480);

  StartFormat(15);
  OutString(2,0,USetStr(9956),false);
  OutString(3,0,USetStr(9971),false);
  if (IsEnterprise) then begin
    OutString(4,0,USetStr(11159),false);
  end;
  OutString(5,0,USetStr(9973),false);
  if (RepSpec.flags[5]==1) then begin
    OutString(6,0,USetStr(10152),false);  //9165
    tstr = DateToString(RepSpec.d1,"DD/MM");
    OutString(1,0,tstr,true);
  end else begin
    if (IsEnterprise) then begin
      OutString(8,0,USetStr(10284),false);  
    end;
    OutString(1,0,USetStr(10275),true);  
  end;
  EndFormat; 
  
  Black_Divider(0,1);
  firstf = true;
  BlockLoad(HotelBlock);
  
  // Idea: Filter on days not on reservation states;
  acnt = 0;
  foundf = true;
  Jobr.TransDate = AddDay(RepSpec.d1,-maxstay);
  while LoopKey("TransDate",Jobr,1,foundf) begin
    if CheckOutSelect(RepSpec,Jobr,foundf) then begin
      acnt= acnt+1;
      aJobSerNr[acnt]= Jobr;       
    end;
  end;    
  
  JobBubSort40(aJobSerNr,acnt);
  JobBubSort40ResStatus(aJobSerNr,acnt);
  
  for(j=1;j<=acnt;j=j+1) begin
    Jobr = aJobSerNr[j];
    tstr = "DblJobVc";
    if (RepSpec.flags[1]==1) then begin
      tstr = "DblResEventTypeVc";
    end;
    if (oldresstat!=Jobr.ResStatus) then begin
      if (firstf==false) then begin
        Gray_Divider(0,1);
      end;
      oldresstat = Jobr.ResStatus;
      ResStatr.Code = oldresstat;
      if (ReadFirstMain(ResStatr,1,true)) then begin
        StartFormat(15);
        OutString(0,0,ResStatr.Comment,false);
        EndFormat;
      end;
      Gray_Divider(0,1);
      firstf = false;
    end;
    rwcnt = MatRowCnt(Jobr);
    StartFormat(15);
    OutLongInt(0,tstr,Jobr.Mother,false);
    OutLongInt(2,tstr,Jobr.SerNr,false);
    OutStringID(3,"DblJobVcID",Jobr.ResCode,false,Jobr.SerNr);
    if (IsEnterprise) then begin
      OutString(4,0,Jobr.ResUsage,false);
    end;
    switch (RepSpec.flags[5]) begin
      case 0:
        OutString(5,0,Left(Jobr.CUName,20),false);
        if (IsEnterprise) then begin
          OutString(8,0,Jobr.Type,false);
        end;
        GetJobStatus(Jobr,tmp);
        OutString(7,0,tmp,false);
        OutString(1,0,left(Jobr.StartTime,5),true);
        EndFormat;      
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(Jobr,i,Jobrw);
          StartFormat(15);
          OutString(5,0,Jobrw.CUName,false);
          EndFormat;      
        end;
      case 1:
        if (rwcnt==1) then begin
          MatRowGet(Jobr,0,Jobrw);
          OutString(5,0,Left(Jobrw.CUName,20),false);
        end else begin
          OutString(5,0,Left(Jobr.CUName,20),false);
        end;
        GetSugProgramOnDay(Jobr,RepSpec.d1,tmp,dummy,MyRepSpec);
        if (nonblank(tmp)) then begin
          OutString(6,0,tmp,true);
        end;
        GetRealLeavingTimes(Jobr,false,HardTime,SoftTime);
        tmp = left(HardTime,5) & "/" & left(SoftTime,5);  
        OutString(1,0,tmp,true);
        EndFormat;      
        if (rwcnt>1) then begin
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(Jobr,i,Jobrw);
            StartFormat(15);
            OutString(5,0,Left(Jobrw.CUName,20),false);
            EndFormat;
          end;      
        end;
      case 2:
        OutString(6,0,Jobr.CUName,false);
        JobInvoiceNrs(Jobr.SerNr,tmp);
        OutLongInt(1,0,tmp,true);
        EndFormat;      
    end;
    if (rwcnt==0) then begin
      rwcnt = 1;
    end;
    cnt = cnt + rwcnt;
    if (j<acnt) then begin
      Gray_Divider(0,1);
    end;
  end;
  Black_Divider(0,1);
  StartFormat(15);
  OutString(0,0,"" & USetStr(10138) " " & cnt & " " & USetStr(10140),false);
  EndFormat;
  EndJob;
  return;
end;
