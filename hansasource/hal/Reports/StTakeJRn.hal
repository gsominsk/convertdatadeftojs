external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean TestArtCode(string,string,record INVc);
external function val FindCostPrice(string,string,string,val,val,Boolean);
external procedure HTNr(Integer,Integer,LongInt,LongInt,var string);

global
procedure StTakeJRn(record RcVc RepSpec)
BEGIN
  record StockTakeVc StockTaker;
  row StockTakeVc StockTakerw;
  row StockTakeVc StockTake2rw;
  val counted,totsum,rowsum,t,costprice,adjstockv;
  Boolean TrHs,testf,firstf,printf;
  Integer rwcnt,i,j;
  Integer vatflag;
  string 255 tstr;
  Integer rw;
  Date StTakeDate;
  LongInt frstt,tostt;
  string 60 keystr;
  record MainStockBlock MSb;
  record INVc INr;

  BlockLoad(MSb);
  frstt = FirstInRange(RepSpec.f1,10);
  tostt = LastInRange(RepSpec.f1,10);
  vatflag = 0;
  StartReportJob(USetStr(9677));
  rw = 1;
  tstr = USetStr(2768);
  tstr = tstr & RepSpec.f2;
  Header(rw,tstr,1);
  rw = rw + 1;
  tstr = RepSpec.RegDate;
  Header(rw,tstr,1);
  rw = rw + 1;
  HTNr(9678,9678,StringToLongInt(RepSpec.f1),StringToLongInt(RepSpec.f1),tstr);  
  Header(rw,tstr,1);
  EndHeader;
  SetRepCol(2,100);
  SetRepCol(3,320);
  SetRepCol(4,400);
  
  counted = 0;
  totsum = 0;

  StTakeDate = StringToDate(RepSpec.RegDate);
  
  firstf = true;
  TrHs = true;
  if (nonblankdate(StTakeDate)) then begin
    StockTaker.TransDate = StTakeDate;
    keystr = "TransDate";
  end else begin
    StockTaker.SerNr = frstt;
    keystr = "SerNr";
  end;  
  while (LoopKey(keystr,StockTaker,1,TrHs)) begin
    if (nonblankdate(StTakeDate)) then begin
      if (StockTaker.TransDate <> StTakeDate) then begin
        TrHs = false;
      end;
    end else begin
      if (nonblank(RepSpec.f1)) then begin
        if (StockTaker.SerNr>tostt) then begin TrHs = false; end;
      end;
    end;  
    testf = true;
    if (nonblank(RepSpec.f2)) then begin
      if (StockTaker.Location <> RepSpec.f2) then begin
        testf = false;
      end;
    end;
    if ((TrHs == true) and (testf == true)) then begin
       printf = true;
       rwcnt = MatRowCnt(StockTaker);
       for (i = 0 ; i<rwcnt ;i=i+1) begin
         MatRowGet(StockTaker,i,StockTakerw);
         if (printf) then begin
           if (firstf==false) then begin
             StartFormat(15);
             EndFormat;
           end;
           StartFormat(15);
           OutLongInt(0,"DblStockTakeVc",StockTaker.SerNr,false);
           OutDate(100,0,StockTaker.TransDate,false);
           OutString(200,0,StockTaker.Location,false);
           EndFormat;
           Gray_Divider(0,1);
           StartFormat(15);
           OutString(0,0,USetStr(9671),false);
           OutString(2,0,USetStr(9672),false);
           OutString(3,0,USetStr(9673),true);
           if (RepSpec.flags[0]!=0) then begin
             OutString(360,0,USetStr(7593),true);
           end;
           OutString(4,0,USetStr(9674),true);
           OutString(1,0,USetStr(9675),true);
           EndFormat;
           Gray_Divider(0,1);
           firstf = false;
           printf = false;
         end;
         ReadFirstItem(StockTakerw.ArtCode,INr,true,true);

         StartFormat(15);
         OutString(0,0,StockTakerw.ArtCode,false);
         OutString(2,0,StockTakerw.Spec,false);
         OutVal(3,0,StockTakerw.Qty,M4UVal,true);
         if (RepSpec.flags[0]!=0) then begin
           if (MSb.UnitConvCalc==0) then begin
             t = StockTakerw.Qty*StockTakerw.Coefficient;
           end else begin
             t = StockTakerw.Qty/StockTakerw.Coefficient;
           end;
           OutVal(360,0,t,M4UVal,true);
         end;
         
         adjstockv = blankval;
         for (j=0;j<i;j=j+1) begin
           MatRowGet(StockTaker,j,StockTake2rw);
           testf = true;
           if (TestArtCode(StockTake2rw.ArtCode,StockTakerw.ArtCode,INr)==false) then begin testf = false; end;
           if (testf) then begin
             adjstockv = adjstockv + StockTake2rw.Qty;  
           end;    
         end;

         
         rowsum = FindCostPrice(StockTakerw.ArtCode,StockTaker.Location,StockTakerw.SerialNr,StockTakerw.Qty,adjstockv,false);
         costprice = rowsum / StockTakerw.Qty;
         OutVal(4,0,costprice,M4Val,true);
         
         OutVal(1,0,rowsum,M4Val,true);
         EndFormat;
         counted = counted + StockTakerw.Qty;
         totsum = totsum + rowsum;
       end;
    end;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(150,0,USetStr(9676),false);
  OutVal(3,0,counted,M4UVal,true);
  OutVal(1,0,totsum,M4Val,true);
  EndFormat;
  EndJob; 
L99:;
  RETURN;
END;
