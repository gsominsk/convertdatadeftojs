external procedure MulM4OneRate(val,val,var val,roundmode,Boolean);
external procedure GetConsolidationRate(string,string,Date,var val,var val,var val,var val,var val);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external function val MulWithRateToBase2(var string,Date,val,roundmode);
external procedure GetObjs(string,string,var string);
external function Boolean  EobjInEobj(string,string);
external function Boolean IncludeSim(Integer,Integer);
external function Integer DateGetIntMonth(Date);
external function Integer TypeOfCurncy(var string,var Integer);
external procedure GetFullCurncyRateText(Boolean,var string,val,val,val,val,val);
external procedure ToStrTRCode(var string,Integer,LongInt);
external function Boolean CorspTRTest(record TRVc,record AccVc,Integer,var val,var val);
external procedure OutputReportIndent(record RCVc,Integer);
external procedure OutEmpty(record RcVc,Integer);

function Boolean WrapAndPrintOvst(Integer pos,string tstr,Integer rowlen,Integer ovst)
BEGIN
  Integer l,cnt;
  Boolean endlf;
  
  endlf = true;
  if (len(tstr)>rowlen) then begin
    l = len(tstr);
    while (cnt<=l) begin
      OutStringOvst(pos,0,Mid(tstr,cnt,rowlen),false,ovst);
      cnt = cnt + rowlen;
      if (cnt<rowlen) then begin
        EndFormat;
      end;
      endlf = false;
      if (cnt<l) then begin
        StartFormat(15);
        endlf = true;
      end;
    end;  
  end else begin
    OutStringOvst(pos,0,tstr,false,ovst);
  end;  
  WrapAndPrintOvst = endlf;
  RETURN;
END;

global
procedure AddToVATSum(record SMVc vatshp,string vc,val vp)
BEGIN
  Integer i,rwcnt;
  Integer hit;
  row SMVc VATSump;
  
  if (blank(vc)) then begin goto LAddToVATSum; end;
  hit = -1;
  rwcnt = MatRowCnt(vatshp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(vatshp,i,VATSump);
    if (VATSump.VATCode==vc) then begin
      hit = i;
      if (vp<0) then begin
        VATSump.CredVal = VATSump.CredVal - vp;
      end else begin
        VATSump.DebVal = VATSump.DebVal + vp;
      end;  
      MatRowPut(vatshp,i,VATSump);    
      goto LAddToVATSum;
    end;
  end;
  if (hit==-1) then begin
    ClearRow(vatshp,VATSump,1);
    VATSump.VATCode = vc;
    if (vp<0) then begin
      VATSump.CredVal = VATSump.CredVal - vp;
    end else begin
      VATSump.DebVal = VATSump.DebVal + vp;
    end;  
    MatRowPut(vatshp,rwcnt,VATSump);    
  end;
LAddToVATSum:;
  RETURN;
END;

global
procedure AddVATSumToVATSum(record SMVc fromvatshp,record SMVc tovatshp)
BEGIN
  Integer i,rwcnt;
  Integer j,jrwcnt;
  Integer hit;
  row SMVc fromVATSump;
  row SMVc toVATSump;
  
  rwcnt = MatRowCnt(fromvatshp);
  for (i=0;i<rwcnt;i=i+1) begin
    hit = -1;
    MatRowGet(fromvatshp,i,fromVATSump);
    jrwcnt = MatRowCnt(tovatshp);
    for (j=0;j<jrwcnt;j=j+1) begin
      MatRowGet(tovatshp,j,toVATSump);
      if (fromVATSump.VATCode==toVATSump.VATCode) then begin
        hit = i;
        toVATSump.CredVal = toVATSump.CredVal + fromVATSump.CredVal;
        toVATSump.DebVal = toVATSump.DebVal + fromVATSump.DebVal;
        MatRowPut(tovatshp,j,toVATSump);
        j = jrwcnt;
      end;
    end;
    if (hit==-1) then begin
      ClearRow(tovatshp,toVATSump,1);
      toVATSump.VATCode = fromVATSump.VATCode;
      toVATSump.CredVal = toVATSump.CredVal + fromVATSump.CredVal;
      toVATSump.DebVal = toVATSump.DebVal + fromVATSump.DebVal;
      MatRowPut(tovatshp,jrwcnt,toVATSump);    
    end;
  end;
  RETURN;
END;

procedure TRExtYc(record TRVc TRr,var string rstr)
BEGIN
  ToStrTRCode(rstr,TRr.IntYc,TRr.Number);
  RETURN;
END;

global
procedure HForm(record RcVc RepSpec,record AccVc Accp,val CurBal,val TotSumDebetCur,val TotSumCreditCur,Boolean printf)
BEGIN
  val fwdb,fwdcurb;
  record CYBlock CompYear;

  BlockLoad(CompYear);
  if (RepSpec.ArtMode==0) then begin
    if (printf) then begin
      Gray_Divider(0,1);
      StartFormat(15);
      OutString(0,0,USetStr(3183),false);
      OutString(2,0,USetStr(3184),false);
      if (RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel) then begin
        if (RepSpec.flags[6]!=0) or (nonblank(RepSpec.ObjType)) then begin
          OutString(6,0,USetStr(3185),false);
        end;
      end else begin
        if (nonblank(RepSpec.ObjType)) then begin
          if (RepSpec.flags[6]!=0) then begin
            OutString(7,0,USetStr(3185),false);
          end;
        end;    
      end;
      OutString(6,0,USetStr(3186),false);
      if (RepSpec.flags[24]==0) then begin
        OutEmpty(RepSpec,1);
        OutStringAdjustBiDi(3,0,USetStr(3187),true,M4Val,364);
        OutStringAdjustBiDi(4,0,USetStr(3188),true,M4Val,434);
        OutStringAdjustBiDi(5,0,USetStr(3189),true,M4Val,505);
      end else begin
        OutString(3,0,USetStr(7678),true);
        OutString(4,0,USetStr(7679),true);
        OutString(5,0,USetStr(7676),true);
      end;
      EndFormat;
      Gray_Divider(0,1);
    end;
  end;
  fwdb = CurBal;
  if (TotSumDebetCur!=0) then begin
    fwdcurb = TotSumDebetCur;
  end else begin
    fwdcurb = TotSumCreditCur;
  end;  
  if (Accp.AccType==0) then begin
    if (CompYear.NS1[0]==1) then begin
      fwdb = -fwdb;
//      fwdcurb = -fwdcurb;//Done in maininner
    end;    
  end;
  if (Accp.AccType==1) then begin
    if (CompYear.NS1[1]==1) then begin
      fwdb = -fwdb;
//      fwdcurb = -fwdcurb;//Done in maininner
    end;    
  end;
  if (Accp.AccType==2) then begin
    if (CompYear.NS1[2]==1) then begin
      fwdb = -fwdb;
//      fwdcurb = -fwdcurb;//Done in maininner
    end;    
  end;
  if (Accp.AccType==3) then begin
    if (CompYear.NS1[3]==1) then begin
      fwdb = -fwdb;
//      fwdcurb = -fwdcurb;//Done in maininner
    end;    
  end;
  if (Accp.AccType==4) then begin
    if (CompYear.NS1[4]==1) then begin
      fwdb = -fwdb;
//      fwdcurb = -fwdcurb;//Done in maininner
    end;    
  end;  
  if (RepSpec.ArtMode==0) then begin
    if (printf) then begin
      StartFormat(15);
      OutString(6,0,USetStr(3193),false);
      OutputReportIndent(RepSpec,5);
      OutValBiDi(5,0,fwdb,M4Val,true,505);
      EndFormat;
//      AddToAccumulator(4,fwdb); tohal which accumulator put it into
      if (nonblank(Accp.Curncy)) then begin
        StartFormat(15);
        OutString(6,0,Accp.Curncy,false);
        OutValBiDi(5,0,fwdcurb,M4Val,true,505);
        EndFormat;
      end;  
    end;
  end;
  RETURN;
END;

global
procedure PrintMainSubotalVATCodes(record SMVc VATSump,Boolean printf)
BEGIN
  row SMVc VATSumrw;
  val totdeb,totcred;
  string 255 tstr;
  Integer j,rwcnt;
  Integer i,vatrwcnt;
  record VATCodeBlock VATCodeRec;
  row VATCodeBlock VATCoderw;
    
  BlockLoad(VATCodeRec);
  if (printf) then begin
    StartFormat(15);
    EndFormat;
    StartFormat(15);
    OutString(60,0,USetStr(3198),false);
    OutString(3,0,USetStr(3187),true);
    OutString(4,0,USetStr(3188),true);
    EndFormat;
    Gray_Divider(100,4);
  end;
  vatrwcnt = MatRowCnt(VATCodeRec);
  rwcnt = MatRowCnt(VATSump);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATSump,i,VATSumrw);    
    for (j=0;j<vatrwcnt;j=j+1) begin
      MatRowGet(VATCodeRec,j,VATCoderw);    
      if (VATSumrw.VATCode==VATCoderw.VATCode) then begin
        tstr = VATCoderw.Comment;
      end;  
    end;
    if (printf) then begin
      StartFormat(15);
      OutString(60,0,VATSumrw.VATCode,false);
      OutString(90,0,tstr,false);
      OutVal(3,0,VATSumrw.DebVal,M4Val,true);
      OutVal(4,0,VATSumrw.CredVal,M4Val,true);
      EndFormat;
    end;
    totdeb = totdeb + VATSumrw.DebVal;
    totcred = totcred + VATSumrw.CredVal;
  end;
    
  if (printf) then begin
    Gray_Divider(100,4);
    StartFormat(15);
    OutVal(3,0,totdeb,M4Val,true);
    OutVal(4,0,totcred,M4Val,true);
    EndFormat;
  end;
  RETURN;    
END;

procedure MainLAccOut(record RcVc RepSpec,record AccVc Accp,Boolean printf)
BEGIN
  string 255 tstr,tstr2;
  row AccVc Accrw;
  Integer i,rwcnt;

  if (printf) then begin
  if (RepSpec.ArtMode==0) then begin
    StartFormat(15);
    tstr = USetStr(3182);
    tstr = tstr & Accp.AccNumber;
    tstr = tstr & "  ";
    tstr2 = "";
    if (nonblank(RepSpec.Language)) then begin
      rwcnt = MatRowCnt(Accp);
      for (i=0; i<rwcnt; i=i+1) begin
        MatRowGet(Accp,i,Accrw);
        if (RepSpec.Language==Accrw.LangCode) then begin
          tstr2 = Accrw.Text;
          goto LMainL;
        end;
      end;  
    end;
LMainL:;    
    if (nonblank(tstr2)) then begin
      tstr = tstr & tstr2;
    end else begin
      tstr = tstr & Accp.Comment;
    end;
    OutString(0,0,tstr,false);
    EndFormat;
  end;
  end;
  RETURN;
END;

procedure NLObjHeader(record ObjVc OBp,Boolean printf)
BEGIN
  if (printf) then begin
    StartFormat(15);
    OutString(0,0,USetStr(2512),false);
    OutString(40,0,OBp.Code,false);
    OutString(120,0,OBp.Comment,false);
    EndFormat;
    Black_Divider(0,1);
  end;
  RETURN;
END;

procedure MainLoopOutHeader(record RcVc RepSpec,Array Boolean mhrheaderf,Array string mhrvc,Array string mhrckey,Array LongInt mhrLLoop,Integer arrcnt,Boolean printf)
BEGIN
  record AccVc Accr;
  record ObjVc Objr;
  Boolean TrHs;

  if (mhrheaderf[arrcnt]==false) then begin
    if (nonblank(mhrckey[arrcnt])) then begin
      if (mhrvc[arrcnt]=="AccVc") then begin
        SetLoopPosition(Accr,mhrLLoop[arrcnt]-1);
        TrHs = true;
        if (LoopKey(mhrckey[arrcnt],Accr,1,TrHs)) then begin
          if (TrHs) then begin
            MainLAccOut(RepSpec,Accr,printf);
          end;
        end;
      end;
      if (mhrvc[arrcnt]=="ObjVc") then begin
        SetLoopPosition(Objr,mhrLLoop[arrcnt]-1);
        TrHs = true;
        if (LoopKey(mhrckey[arrcnt],Objr,1,TrHs)) then begin
          if (TrHs) then begin
            NLObjHeader(Objr,printf);
          end;
        end;
      end;
      mhrheaderf[arrcnt] = true;
    end;
  end;
  RETURN;
END;

global
procedure PrintMainHeaders(record RcVc RepSpec,var Boolean headeroutf,Array Boolean mhrheaderf,Array string mhrvc,Array string mhrckey,Array LongInt mhrLLoop,Boolean printf)
BEGIN
  MainLoopOutHeader(RepSpec,mhrheaderf,mhrvc,mhrckey,mhrLLoop,0,printf);//  MainLoopOutHeader(&mhp->mlr[0]);
  MainLoopOutHeader(RepSpec,mhrheaderf,mhrvc,mhrckey,mhrLLoop,1,printf);//  MainLoopOutHeader(&mhp->mlr[1]);
  MainLoopOutHeader(RepSpec,mhrheaderf,mhrvc,mhrckey,mhrLLoop,2,printf);//  MainLoopOutHeader(&mhp->mlr[2]);
  headeroutf = true;
  RETURN;
END;

global
procedure RForm3(record RcVc RepSpec,record TRVc TRp,record AccVc Accp,record BaseCurBlock BCb,Integer rownr,Date tdp,Integer ovst,string objs,
                 var Integer OldTransMonthp,var val mainosp,record SMVc vatshp,Integer basecurncy,string curncy,var val CurBal,
                 var val SumDebet,var val SumCredit,var val TotSumDebetCur,var val TotSumCreditCur,Boolean printf,
                 var array string acur,var array val av1,var array val av2,var array val av3,var Integer curcnt)
BEGIN
  string 255 tstr,tstr2;
  val tb,cv,dv,blankv,sv;
  Integer m,i;
  record CYBlock CompYear;
  string 10 crncy;
  row TRVc Trrp;
  val curd,curc;
  string 255 dblstr;
  val cerfr,certo1,certo2,cerbr1,cerbr2;

  MatRowGet(TRp,rownr,Trrp);
  if (RepSpec.flags[12]==kReportBCOneConsolidationRate) then begin
//    GetConsolidationRate(Trrp.AccNumber,BCb.BaseCur1,TRp.TransDate,cerfr,certo1,certo2,cerbr1,cerbr2);
    GetConsolidationRate(Trrp.AccNumber,BCb.BaseCur1,RepSpec.sEndDate,cerfr,certo1,certo2,cerbr1,cerbr2);
  end;
  BlockLoad(CompYear);
  m = DateGetIntMonth(TRp.TransDate);
  if (RepSpec.ArtMode==0) then begin
    if (OldTransMonthp!=0) then begin
      if (m!=OldTransMonthp) then begin
        if (printf) then begin
          Gray_Divider(8,1);
        end;
      end;
    end;      
  end;
  OldTransMonthp = m;
  if ((nonblank(curncy)) and (TypeOfCurncy(curncy,i)==0)) then begin
    cv = Trrp.CurCredVal;
    dv = Trrp.CurDebVal;
  end else begin
    if (basecurncy==0) or (RepSpec.flags[12]==kReportBCOneConsolidationRate) then begin
      cv = Trrp.CredVal;
      dv = Trrp.DebVal;
    end else begin
      cv = Trrp.CredVal2;
      dv = Trrp.DebVal2;
    end;
  end;
  if (RepSpec.flags[24]!=0) then begin
    tstr = "";
    if (Trrp.DebVal!=0) then begin
      dv = Trrp.DebVal2;
      cv = MulWithRateToBase2(tstr,TRp.TransDate,Trrp.DebVal,DefaultCurRoundOff);
    end else begin
      dv = -Trrp.CredVal2;
      cv = MulWithRateToBase2(tstr,TRp.TransDate,Trrp.CredVal,DefaultCurRoundOff);
      cv = -cv;
    end;
  end;
  if (ovst==0) then begin
    if (RepSpec.flags[12]==kReportBCOneConsolidationRate) then begin
      MulM4OneRate(dv,(certo1/cerfr)*100,dv,DefaultCurRoundOff,true);
      MulM4OneRate(cv,(certo1/cerfr)*100,cv,DefaultCurRoundOff,true);
    end;
    if (RepSpec.flags[20]!=0) then begin
      if (blank(cv)) then begin cv = 0; end;
      if (blank(dv)) then begin dv = 0; end;
    end;

    CurBal = dv + CurBal;
    CurBal = CurBal - cv;
    SumDebet = dv + SumDebet;
    SumCredit = SumCredit - cv;
    tb = CurBal;
    curd = Trrp.CurDebVal;
    curc = Trrp.CurCredVal;
//    if (BCb.BaseCur1==Trrp.Curncy) then begin//i think it is wierd to add cur to base cur values
      if (blank(curd)) then begin curd = Trrp.DebVal; end;
      if (blank(curc)) then begin curc = Trrp.CredVal; end;   
//    end;
    if (Accp.AccType==0) then begin
      if (CompYear.NS1[0]==1) then begin
        tb = -tb;
        curd = -curd;
        curc = -curc;
      end;        
    end;
    if (Accp.AccType==1) then begin
      if (CompYear.NS1[1]==1) then begin
        tb = -tb;
        curd = -curd;
        curc = -curc;
      end;        
    end;
    if (Accp.AccType==2) then begin
      if (CompYear.NS1[2]==1) then begin
        tb = -tb;
        curd = -curd;
        curc = -curc;
      end;      
    end;
    if (Accp.AccType==3) then begin
      if (CompYear.NS1[3]==1) then begin
        tb = -tb;
        curd = -curd;
        curc = -curc;
      end;      
    end;
    if (Accp.AccType==4) then begin
      if (CompYear.NS1[4]==1) then begin
        tb = -tb;
        curd = -curd;
        curc = -curc;
      end;      
    end;
    AddCurncyTotals(acur,av1,curcnt,Trrp.Curncy,-curc);//Accp
    AddCurncyTotals(acur,av1,curcnt,Trrp.Curncy,curd);                             
    mainosp = tb; 
    TotSumDebetCur = TotSumDebetCur + curd;
    TotSumCreditCur = TotSumCreditCur - curc;    
  end;
  if (RepSpec.flags[24]!=0) then begin
    tb = dv - cv;
  end;
  dblstr = "DblTrans";
  if (RepSpec.ArtMode==0) then begin 
    if (RepSpec.flags[23]==0) then begin
      TRExtYc(TRp,tstr);
    end else begin
      if (TRp.SeqNr>0) then begin
        tstr = TRp.SeqNr;
        dblstr = "DblTransSeqNr";
      end else begin
        tstr = TRp.Number;
        dblstr = "DblTrans";
      end;
/*    
      if (dv!=blankv) then begin RepSpec.long1 = RepSpec.long1 + 1; end;
      if (cv!=blankv) then begin RepSpec.long1 = RepSpec.long2 + 1; end;
*/      
    end;    

    if (printf) then begin
      StartFormat(15);
//      OutStringOvst(0,dblstr,tstr,false,ovst);
      OutStringID(0,dblstr,tstr,false,CurrentCompany); // Had to add Company as parameter...so lost the ovst...
      OutDateOvst(2,0,tdp,false,ovst);
      if ((RepSpec.flags[6]==1) or (RepSpec.flags[3]==1)) then begin
        OutStringOvst(7,0,objs,false,ovst);
      end else begin
        if (HasLocalization("FIN")==false) then begin
          OutStringOvst(7,0,TRp.Sign,false,ovst);
        end;
      end;
      tstr = "";
      if ((nonblank(TRp.RefStr)) and (RepSpec.flags[10]!=0)) then begin
        tstr = TRp.RefStr;
      end;
      if (nonblank(TRp.Comment)) then begin
        if (nonblank(tstr)) then begin tstr = tstr & ", "; end;
        tstr = tstr & TRp.Comment;
      end;
      if (nonblank(Trrp.Comment)) then begin
        tstr2 = Accp.Comment;
        tstr2 = Left(tstr2,len(Trrp.Comment));
        if (Trrp.Comment!=tstr2) then begin
          if (nonblank(tstr)) then begin tstr = tstr & ", "; end;
          tstr = tstr & Trrp.Comment;
        end;
        if (blank(tstr)) then begin
          tstr = Trrp.Comment;
        end;
      end;
      if (RepSpec.flags[7]==0) then begin
        if (RepSpec.Media!=mtFile) and (RepSpec.Media!=mtExcel) then begin
          EndFormat;
          StartFormat(15);
        end;
        OutStringOvst(50,0,tstr,false,ovst);//-1
      end;
      if (RepSpec.flags[7]==1) then begin
        if (RepSpec.flags[6]==1) then begin
          if (RepSpec.Media==mtFile) then begin
            OutString(6,0,tstr,false);
          end else begin
            if (WrapAndPrintOvst(6,tstr,20,ovst)) then begin
            end;
          end;
        end else begin
          if (RepSpec.Media==mtFile) then begin
            OutString(6,0,tstr,false);
          end else begin
            if (WrapAndPrintOvst(6,tstr,20,ovst)) then begin
            end;        
          end;
        end;  
      end;
      if (RepSpec.flags[7]==2) then begin
        if (RepSpec.flags[6]==1) then begin
          OutStringOvst(6,0,Left(tstr,16),false,ovst);//-1
        end else begin
          OutStringOvst(6,0,Left(tstr,16),false,ovst);//-248
        end;  
      end;
      OutValOvstBiDi(3,0,dv,M4Val,true,ovst,364);
      OutValOvstBiDi(4,0,cv,M4Val,true,ovst,434);

      if (ovst==0) then begin
        OutValOvstBiDi(5,0,tb,M4Val,true,ovst,505);
      end;
      OutStringOvst(1,0,Trrp.VATCode,true,ovst);
      sv = dv - cv;
      AddToVATSum(vatshp,Trrp.VATCode,sv);
      EndFormat;
      AddToAccumulator(0,dv);
      AddToAccumulator(1,cv);

      AddToAccumulator(2,dv);
      AddToAccumulator(3,cv);
      if (RepSpec.flags[8]!=0) then begin
        if (nonblank(Trrp.Curncy)) then begin
          StartFormat(15);
          OutStringOvst(2,0,Trrp.Curncy,false,ovst);
          crncy = Trrp.Curncy;
          i = -1;
          if (TypeOfCurncy(crncy,i)==0) then begin
            GetFullCurncyRateText(true,tstr,Trrp.FrRate,Trrp.ToRateB1,Trrp.ToRateB2,Trrp.BaseRate1,Trrp.BaseRate2);
          end else begin
            GetFullCurncyRateText(false,tstr,Trrp.FrRate,Trrp.ToRateB1,Trrp.ToRateB2,Trrp.BaseRate1,Trrp.BaseRate2);
          end;
          OutStringOvst(6,0,tstr,false,ovst);
          OutValOvstBiDi(3,0,Trrp.CurDebVal,M4Val,true,ovst,364);
          OutValOvstBiDi(4,0,Trrp.CurCredVal,M4Val,true,ovst,434);
          EndFormat;
        end;
      end;
    end else begin
      AddToAccumulator(4,dv);
      AddToAccumulator(5,cv);
    end;
  end;
  RETURN;
END;

global
procedure FBForm(record RcVc RepSpec,record FBVc FBp,Integer rownr,record AccVc Accp,string curncy,string comstr,var val dvalp,var val cvalp,
                 string objs,string vc,var Integer OldTransMonthp,var val mainosp,record SMVc vatshp,Integer basecurncy,
                 var val CurBal,var val SumDebet,var val SumCredit,var val TotSumDebetCur,var val TotSumCreditCur,Boolean printf,
                 var array string acur,var array val av1,var array val av2,var array val av3,var Integer curcnt)
BEGIN
  string 255 tstr,tstr2;
  val tb,dv,cv;
  Integer m;
  val sv;
  record CYBlock CompYear;
  row FBVc FBrwp;
  val curc,curd;
  string 255 loccurncy;
  Integer tmp;
  
  loccurncy = curncy;
  MatRowGet(FBp,rownr,FBrwp);
  BlockLoad(CompYear);
  m = DateGetIntMonth(FBp.TransDate);
  dv = dvalp;
  cv = cvalp;
  if (basecurncy==0) then begin
    cv = FBrwp.CredVal;
    dv = FBrwp.DebVal;
  end else begin
    cv = FBrwp.Cred2Val;
    dv = FBrwp.Deb2Val;
  end;
  if ((nonblank(curncy)) and (TypeOfCurncy(loccurncy,tmp)==0)) then begin
    cv = FBrwp.CurCredVal;
    dv = FBrwp.CurDebVal;
  end;
  
  if (RepSpec.ArtMode==0) then begin
    if (OldTransMonthp!=0) then begin
      if (m!=OldTransMonthp) then begin
        Gray_Divider(8,1);
      end;
    end;    
  end;
  if (RepSpec.flags[20]!=0) then begin
    if (blank(cv)) then begin cv = 0; end;
    if (blank(dv)) then begin dv = 0; end;
  end;
  OldTransMonthp = m;
  CurBal = CurBal + dv;
  CurBal = CurBal - cv;
  SumDebet = SumDebet + dv;
  SumCredit = SumCredit - cv;
  curd = FBrwp.CurDebVal;
  if (blank(curd)) then begin curd = FBrwp.DebVal; end;
  curc = FBrwp.CurCredVal;
  if (blank(curc)) then begin curc = FBrwp.CredVal; end;
  AddCurncyTotals(acur,av1,curcnt,FBrwp.CurncyCode,-curc);                             
  AddCurncyTotals(acur,av1,curcnt,FBrwp.CurncyCode,curd);                             
  tb = CurBal;
  if (Accp.AccType==0) then begin
    if (CompYear.NS1[0]==1) then begin
      tb = -tb;
      curc = -curc;
      curd = -curd;
    end;    
  end;
  if (Accp.AccType==1) then begin
    if (CompYear.NS1[1]==1) then begin
      tb = -tb;
      curc = -curc;
      curd = -curd;
    end;    
  end;
  if (Accp.AccType==2) then begin
    if (CompYear.NS1[2]==1) then begin
      tb = -tb;
      curc = -curc;
      curd = -curd;
    end;    
  end;
  if (Accp.AccType==3) then begin
    if (CompYear.NS1[3]==1) then begin
      tb = -tb;
      curc = -curc;
      curd = -curd;
    end;    
  end;
  if (Accp.AccType==4) then begin
    if (CompYear.NS1[4]==1) then begin
      tb = -tb;
      curc = -curc;
      curd = -curd;
    end;    
  end;      
  mainosp = tb; // already sign 
  TotSumDebetCur = TotSumDebetCur + curd;
  TotSumCreditCur = TotSumCreditCur - curc;
  if (RepSpec.ArtMode==0) then begin
    tstr = USetStr(1155);
    tstr = tstr & ":";
    tstr2 = FBp.SerNr;
    tstr = tstr & tstr2;
    if (printf) then begin
      StartFormat(15);
      OutString(0,0,tstr,false);
      OutDate(2,0,FBp.TransDate,false);
      if (RepSpec.flags[6]==1) then begin
        OutString(7,0,objs,false);
      end else begin
        OutString(7,0,FBp.Sign,false);
      end;
      tstr = "";
      if (nonblank(FBp.Comment)) then begin
        if (nonblank(tstr)) then begin tstr = tstr & ", "; end;
        tstr = tstr & FBp.Comment;
      end;
      if (nonblank(comstr)) then begin
        tstr2 = tstr2 & Accp.Comment;
        tstr2 = Left(tstr2,len(comstr));
        if (comstr!=tstr2) then begin
          if (nonblank(tstr)) then begin tstr = tstr & ", "; end;
          tstr = tstr & comstr;
        end;
      end;
      OutString(6,0,tstr,false);
      OutValBiDi(3,0,dv,M4Val,true,364);
      OutValBiDi(4,0,cv,M4Val,true,434);
      OutValBiDi(5,0,tb,M4Val,true,505);
      OutString(1,0,vc,true);
      sv = dvalp - cvalp;
      AddToVATSum(vatshp,vc,sv);
      AddToAccumulator(0,dv);
      AddToAccumulator(1,cv);

      AddToAccumulator(2,dv);
      AddToAccumulator(3,cv);	    
      EndFormat;
      if (RepSpec.flags[8]!=0) then begin
        if (nonblank(FBrwp.CurncyCode)) then begin
          StartFormat(15);
          OutString(2,0,FBrwp.CurncyCode,false);
          OutValBiDi(3,0,FBrwp.CurDebVal,M4Val,true,364);
          OutValBiDi(4,0,FBrwp.CurCredVal,M4Val,true,434);
          EndFormat;
        end;
      end;
    end else begin
      AddToAccumulator(4,dv);
      AddToAccumulator(5,cv);
    end;
  end;
  RETURN;
END;

global
procedure RADForm(record RcVc RepSpec,record RegArchiveDetailVc RADr,record AccVc Accp,string curncy,string comstr,var val dvalp,var val cvalp,
                 string objs,string vc,var Integer OldTransMonthp,var val mainosp,record SMVc vatshp,Integer basecurncy,
                 var val CurBal,var val SumDebet,var val SumCredit,var val TotSumDebetCur,var val TotSumCreditCur,Boolean printf,
                 var array string acur,var array val av1,var array val av2,var array val av3,var Integer curcnt)
BEGIN
  string 255 tstr,tstr2;
  val tb,dv,cv;
  Integer m;
  val sv;
  record CYBlock CompYear;
  val curc,curd;
  string 255 loccurncy;
  Integer tmp;
  
  loccurncy = curncy;
  BlockLoad(CompYear);
  m = DateGetIntMonth(RADr.TransDate);
  dv = dvalp;
  cv = cvalp;
  if (basecurncy==0) then begin
    cv = RADr.cv;
    dv = RADr.dv;
  end else begin
    cv = RADr.cv2;
    dv = RADr.dv2;
  end;
  if ((nonblank(curncy)) and (TypeOfCurncy(loccurncy,tmp)==0)) then begin
    cv = RADr.dcv;
    dv = RADr.ccv;
  end;
  
  if (RepSpec.ArtMode==0) then begin
    if (OldTransMonthp!=0) then begin
      if (m!=OldTransMonthp) then begin
        Gray_Divider(8,1);
      end;
    end;    
  end;
  if (RepSpec.flags[20]!=0) then begin
    if (blank(cv)) then begin cv = 0; end;
    if (blank(dv)) then begin dv = 0; end;
  end;
  OldTransMonthp = m;
  CurBal = CurBal + dv;
  CurBal = CurBal - cv;
  SumDebet = SumDebet + dv;
  SumCredit = SumCredit - cv;
  curd = RADr.dcv;
  if (blank(curd)) then begin curd = RADr.dv; end;
  curc = RADr.ccv;
  if (blank(curc)) then begin curc = RADr.cv; end;
  AddCurncyTotals(acur,av1,curcnt,RADr.ColName,-curc);                             
  AddCurncyTotals(acur,av1,curcnt,RADr.ColName,curd);                             
  tb = CurBal;
  if (Accp.AccType==0) then begin
    if (CompYear.NS1[0]==1) then begin
      tb = -tb;
      curc = -curc;
      curd = -curd;
    end;    
  end;
  if (Accp.AccType==1) then begin
    if (CompYear.NS1[1]==1) then begin
      tb = -tb;
      curc = -curc;
      curd = -curd;
    end;    
  end;
  if (Accp.AccType==2) then begin
    if (CompYear.NS1[2]==1) then begin
      tb = -tb;
      curc = -curc;
      curd = -curd;
    end;    
  end;
  if (Accp.AccType==3) then begin
    if (CompYear.NS1[3]==1) then begin
      tb = -tb;
      curc = -curc;
      curd = -curd;
    end;    
  end;
  if (Accp.AccType==4) then begin
    if (CompYear.NS1[4]==1) then begin
      tb = -tb;
      curc = -curc;
      curd = -curd;
    end;    
  end;      
  mainosp = tb; // already sign 
  TotSumDebetCur = TotSumDebetCur + curd;
  TotSumCreditCur = TotSumCreditCur - curc;
  if (RepSpec.ArtMode==0) then begin
    tstr = USetStr(1634);
    tstr = tstr & ":";
    tstr2 = RADr.SerNr;
    tstr = tstr & tstr2;
    if (printf) then begin
      StartFormat(15);
      OutString(0,0,tstr,false);
      OutDate(2,0,RADr.TransDate,false);
      if (RepSpec.flags[6]==1) then begin
        OutString(7,0,objs,false);
      end;
      tstr = "";
      if (nonblank(comstr)) then begin
        tstr2 = tstr2 & Accp.Comment;
        tstr2 = Left(tstr2,len(comstr));
        if (comstr!=tstr2) then begin
          if (nonblank(tstr)) then begin tstr = tstr & ", "; end;
          tstr = tstr & comstr;
        end;
      end;
      OutString(6,0,tstr,false);
      OutValBiDi(3,0,dv,M4Val,true,364);
      OutValBiDi(4,0,cv,M4NegVal,true,434);
      OutValBiDi(5,0,tb,M4Val,true,505);
      OutString(1,0,vc,true);
      sv = dvalp - cvalp;
      AddToVATSum(vatshp,vc,sv);
      AddToAccumulator(0,dv);
      AddToAccumulator(1,cv);

      AddToAccumulator(2,dv);
      AddToAccumulator(3,cv);	    
      EndFormat;
      if (RepSpec.flags[8]!=0) then begin
        if (nonblank(RADr.ColName)) then begin
          StartFormat(15);
          OutString(2,0,RADr.ColName,false);
          OutValBiDi(3,0,RADr.dcv,M4Val,true,364);
          OutValBiDi(4,0,RADr.ccv,M4Val,true,434);
          EndFormat;
        end;
      end;
    end else begin
      AddToAccumulator(4,dv);
      AddToAccumulator(5,cv);
    end;
  end;
  RETURN;
END;

procedure SMForm(record RcVc RepSpec,record SMVc SMp,record AccVc Accp,string comstr,row SMVc SMrw,
                 string objs,string vc,var Integer OldTransMonthp,
                 var val mainosp,record SMVc vatshp,Integer basecurncy,var val CurBal,var val SumDebet,var val SumCredit,
                 Boolean printf,var array string acur,var array val av1,var array val av2,var array val av3,var Integer curcnt)
BEGIN
  string 255 tstr,tstr2;
  val tb,dv,cv;
  val fr,to1,to2,br1,br2;
  Integer m;
  val sv;
  record CYBlock CompYear;
  Date dat;
  Integer tmp;
  string 20 loccurncy;
  Boolean curncyf;

  loccurncy = RepSpec.CurncyCode;
  curncyf = nonblank(loccurncy) and (TypeOfCurncy(loccurncy,tmp)==0);
  BlockLoad(CompYear);
  if (curncyf) then begin
    dv = SMrw.CurDebVal;
    cv = SMrw.CurCredVal;
    if (basecurncy==1) then begin
      dv = MulWithRateToBase2(loccurncy,SMp.TransDate,dv,DefaultCurRoundOff);
      cv = MulWithRateToBase2(loccurncy,SMp.TransDate,cv,DefaultCurRoundOff);
    end;
  end else begin
    dv = SMrw.DebVal;
    cv = SMrw.CredVal;
    if (basecurncy==1) then begin
      tstr = "";
      dv = MulWithRateToBase2(tstr,SMp.TransDate,dv,DefaultCurRoundOff);
      cv = MulWithRateToBase2(tstr,SMp.TransDate,cv,DefaultCurRoundOff);
    end;
  end;
  m = DateGetIntMonth(SMp.TransDate);
  if (RepSpec.ArtMode==0) then begin
    if (OldTransMonthp!=0) then begin
      if (m!=OldTransMonthp) then begin
        Gray_Divider(8,1);
      end;
    end;      
  end;
  if (RepSpec.flags[20]!=0) then begin
    if (blank(cv)) then begin cv = 0; end;
    if (blank(dv)) then begin dv = 0; end;
  end;
  OldTransMonthp = m;
  CurBal = CurBal + dv;
  CurBal = CurBal - cv;
  SumDebet = SumDebet + dv;
  SumCredit = SumCredit - cv;
  tb = CurBal;
  if (Accp.AccType==0) then begin
    if (CompYear.NS1[0]==1) then begin
      tb = -tb;
    end;    
  end;
  if (Accp.AccType==1) then begin
    if (CompYear.NS1[1]==1) then begin
      tb = -tb;
    end;    
  end;
  if (Accp.AccType==2) then begin
    if (CompYear.NS1[2]==1) then begin
      tb = -tb;
    end;    
  end;
  if (Accp.AccType==3) then begin
    if (CompYear.NS1[3]==1) then begin
      tb = -tb;
    end;    
  end;
  if (Accp.AccType==4) then begin
    if (CompYear.NS1[4]==1) then begin
      tb = -tb;
    end;    
  end;      
  mainosp = tb;
  if (RepSpec.ArtMode==0) then begin
    tstr = USetStr(1154);
    tstr = tstr & ":";
    tstr2 = SMp.SerNr;
    tstr = tstr & tstr2;
    dat = SMrw.TransDate; 
    if (blankdate(SMrw.TransDate)) then begin 
      dat = SMp.TransDate;
    end;
    if (printf) then begin
      StartFormat(15);
      OutStringID(0,"DblIDSMVc",tstr,false,SMp.SerNr);
      OutDate(2,0,dat,false);
      if (RepSpec.flags[6]==1) then begin
        OutString(7,0,objs,false);
      end else begin
        OutString(7,0,SMp.Sign,false);
      end;
      tstr = "";
      if ((nonblank(SMp.RefStr)) and (RepSpec.flags[10]!=0)) then begin
        tstr = tstr & SMp.RefStr;
      end;
      if (nonblank(SMp.Comment)) then begin
        if (nonblank(tstr)) then begin tstr = tstr & ", "; end;
        tstr = tstr & SMp.Comment;
      end;
/*
comment goes twice, comstr = SMp.Comment    
    if (nonblank(comstr)) then begin
      tstr2 = Accp.Comment;
      tstr2 = Left(tstr2,len(comstr));
      if (comstr!=tstr2) then begin
        if (nonblank(tstr)) then begin tstr = tstr & ", "; end;
        tstr = tstr & comstr;
      end;
    end;
*/    
      OutString(6,0,tstr,false);
      OutValBiDi(3,0,dv,M4Val,true,364);
      OutValBiDi(4,0,cv,M4Val,true,434);
      OutValBiDi(5,0,tb,M4Val,true,505);
      if (curncyf) then begin
        sv = SMrw.CurDebVal - SMrw.CurCredVal;
      end else begin
        sv = SMrw.DebVal - SMrw.CredVal;
      end;

      AddToVATSum(vatshp,vc,sv);
      AddToAccumulator(0,dv);
      AddToAccumulator(1,cv);

      AddToAccumulator(2,dv);
      AddToAccumulator(3,cv);	        
      EndFormat;
    end else begin
      AddToAccumulator(4,dv);
      AddToAccumulator(5,cv);
    end;
  end;
  RETURN;
END;

global
procedure ReadSMRow(record RcVc RepSpec,record SMVc SMp,string objstr,Date dtp,var Integer OldTransMonthp,var val mainosp,
                    record SMVc vatshp,Integer basecurncy,Integer simf,var Boolean FirstTrans,
                    var val CurBal,val TotSumDebetCur,val TotSumCreditCur,var val SumDebet,var val SumCredit,var LongInt TransCnt,
                    var Boolean headeroutf,Array Boolean mhrheaderf,Array string mhrvc,Array string mhrckey,Array LongInt mhrLLoop,
                    record AccVc Accp,Boolean printf,
                    var array string acur,var array val av1,var array val av2,var array val av3,var Integer curcnt)
BEGIN
  row SMVc SMrw;
  Integer i,rwcnt;
  string 255 tstr;
  string 255 objs;
  string 255 corspaccs;
  Boolean dcflag,first,testf;
  val blankv;
  
//  accp = MainLoopAccp(mhp);
  first = true;
  rwcnt = MatRowCnt(SMp);
  for (i = 0 ; i<rwcnt; i=i+1) begin
    MatRowGet(SMp,i,SMrw);
    if (SMrw.AccNumber==Accp.AccNumber) then begin
      testf = true;
      if (nonblankdate(SMrw.TransDate)) then begin
        if (dtp!=SMrw.TransDate) then begin testf = false; end;
      end else begin
        if (dtp!=SMp.TransDate) then begin testf = false; end;
      end;      
      if (testf) then begin
        if (IncludeSim(SMrw.RowSimStat,simf)) then begin
          corspaccs = "";
          dcflag = true;
          if (SMrw.DebVal==blankv) then begin dcflag = false; end;
          objs = "";
          objs = SMrw.Objects;
          if (nonblank(RepSpec.ObjType)) then begin
            GetObjs(RepSpec.ObjType,SMrw.Objects,objs);
          end;
          if ((blank(objstr) or (EobjInEobj(objstr,SMrw.Objects)==true))) then begin
          if ((blank(RepSpec.f3) or (EobjInEobj(RepSpec.f3,SMrw.Objects)==false))) then begin              
            if (blank(RepSpec.ObjType) or (RepSpec.flags[2]!=0 or nonblank(objs))) then begin
              tstr = SMp.RefStr;
              if (nonblank(tstr)) then begin
                tstr = tstr & ", ";
              end;
              tstr = tstr & SMrw.Comment;
              if (InString(tstr,RepSpec.Stext)!=0) then begin
                if (blank(RepSpec.f1) or (RepSpec.f1==SMrw.VATCode)) then begin
                  PrintMainHeaders(RepSpec,headeroutf,mhrheaderf,mhrvc,mhrckey,mhrLLoop,printf);
                  if (FirstTrans) then begin
                    HForm(RepSpec,Accp,CurBal,TotSumDebetCur,TotSumCreditCur,printf);
                    FirstTrans = false;
                  end;
                  if (RepSpec.flags[3]!=0) then begin objs = corspaccs; end;
                  SMForm(RepSpec,SMp,Accp,SMp.Comment,SMrw,objs,"SMVc",OldTransMonthp,
                         mainosp,vatshp,basecurncy,CurBal,SumDebet,SumCredit,printf,
                         acur,av1,av2,av3,curcnt);
                  TransCnt = TransCnt + 1;
                end;                  
              end;
            end;
          end;
          end;
        end;
      end;
    end;
  end;
  RETURN;
END;

global
procedure SetCorspAccs(record TRVc TRp,Integer rwcnt,string accnumber,Boolean dcflag,var string corspaccs)
BEGIN
  Integer i;
  Integer hits;
  row TRVc TRrw;
  record AccVc Accr;
  val DebVal,CredVal;
  
  hits = 0;
  Accr.AccNumber = accnumber;
  if (ReadFirstMain(Accr,1,true)) then begin end;  
  corspaccs = "";
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TRp,i,TRrw);
    if ((TRrw.ovst==0) and (TRrw.stp==1)) then begin
      if (((TRrw.DebVal!=0) and (dcflag==false)) or 
          ((TRrw.CredVal!=0) and (dcflag==true))) then begin
        DebVal = DebVal + TRrw.DebVal;
        CredVal = CredVal + TRrw.CredVal;
        if (CorspTRTest(TRp,Accr,i,DebVal,CredVal)) then begin       
          hits = hits + 1;
          if (hits==1) then begin
            corspaccs = TRrw.AccNumber;
          end;
          if ((hits==2) or (hits==3)) then begin
            corspaccs = corspaccs & ",";
            corspaccs = corspaccs & TRrw.AccNumber;
          end;
          if (hits==4) then begin
            corspaccs = corspaccs & "...";
            goto LSetCorspAccs;
          end;  
        end;
      end;
    end;
  end;
LSetCorspAccs:;
  RETURN;
END;
