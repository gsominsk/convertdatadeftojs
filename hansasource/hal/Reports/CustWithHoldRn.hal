external procedure HTCusts(string, string, var string);
external function val cur2b1(String,Date,Val);
external function val cur2b2(String,Date,Val);
external procedure GetPayModeText(string,var string);
external procedure GetCurncyComment(string,var string);
external function Boolean GetPMRow(string,var row PMBlock);

function Boolean CheckWithPM(string PayMode,array string whpaymodes, array Integer chektype, Integer k, Integer type)
begin
  Integer i;
  Boolean res;
  
  res = false;
  for (i=0;i<k;i=i+1) begin
    if (PayMode==whpaymodes[i]) and (type==chektype[i]) then begin 
      res = true;
    end;
  end;  
  CheckWithPM = res;
  return;
end;  

procedure CustWithHoldPerType(var val ssum,var array val asum, var array string  apm,var integer maxr, var val total,integer type,record RcVc RepSpec,array string whpaymodes, array integer checktype,integer n)
begin
  record IPVc IPr;
  row IPVc IPrw;
  record IVVc IVr;
  row IVVc IVrw;
  boolean TrHs,testf,testfrow,found;
  string 255 tstr;
  Integer i,ar,j;
  date sdate,edate;
  val sum,pmsum;
  string 20 ckey;
  boolean printed;
  
  sdate = RepSpec.sStartDate;
  edate = RepSpec.sEndDate;
 
  TrHs = true;
  //if (RepSpec.flags[6]==0) then begin 
  IPr.TransDate = sdate;
  ckey = "TransDate";
  //end;
  /*if (RepSpec.flags[6]==1) then begin 
    IPr.PayMode = RepSpec.f1;
    ckey = "PayMode";
  end;
  */
  while (LoopKey(ckey,IPr,1,TrHs)) begin
    testf = true; 
    if (IPr.TransDate>edate) then begin
      if (RepSpec.flags[6]==0) then begin 
        TrHs = false;
      end;  
      testf = false;
    end;
    if (IPr.OKFlag==0) then begin
      testf = false;
    end;
    if (IPr.Invalid<>0) then begin
      testf = false;
    end; 
    if (testf) then begin
      ar = MatRowCnt(IPr);
      for (i=0;i<ar;i=i+1) begin
        MatRowGet(IPr,i,IPrw);
        testfrow = true;      
        if (IPrw.ovst==1) or (IVrw.stp!=kReceiptRowTypeNormal) then begin
          testfrow = false;
        end;
        if (nonblank(RepSpec.f2)) then begin 
          if (IPrw.CustCode!=RepSpec.f2) then begin 
            testfrow = false;
          end;
        end;  
        if (blank(IPrw.PayMode)) then begin
          testfrow = false;
        end else begin
         // if nonblank(RepSpec.f1) then begin 
            if (CheckWithPM(IPrw.PayMode,whpaymodes,checktype,n,type)==false) then begin
              testfrow = false;
            end;  
         // end;
        end;
        if (nonblank(RepSpec.f1)) and (RepSpec.f1<>IPrw.PayMode) then begin
          testfrow = false;
        end;
        if (blank(IPrw.InvoiceNr)) then begin
          testfrow = false;
        end else begin
          IVr.SerNr = IPrw.InvoiceNr;
          if (ReadFirstMain(IVr,1,true)) then begin     
          end;
        end;
        if (testfrow) then begin
          if (printed==false) then begin
            printed = true;
            StartFormat(15);
            EndFormat;

            Gray_Divider(0,1);
            StartFormat(15);
            if (RepSpec.flags[6]==0) then begin 
              OutString(0,0,StringFromSet(36,type),false);
            end else begin
              GetPayModeText(RepSpec.f1,tstr);
              OutString(0,0,StringFromSet(36,type) & " " & tstr,false);
            end;  
            EndFormat;
            Gray_Divider(0,1);
            StartFormat(15);
            OutString(0,0,USetStr(13858),false);
            if (RepSpec.flags[2]==1)  then begin
              OutString(2,0,USetStr(13859),false);
              OutString(3,0,USetStr(13860),false);
              OutString(4,0,USetStr(13861),false);
              OutString(5,0,USetStr(13862) & "/" & USetStr(13863),false);
              OutString(1,0,USetStr(13864),true);
            end else begin
              OutString(3,0,USetStr(13860),false);
              OutString(4,0,USetStr(13861),false);
              OutString(5,0,USetStr(13862),false);
              OutString(6,0,USetStr(13863),false);
              OutString(1,0,USetStr(13864),true);
            end;
            EndFormat;
          end;
          if (RepSpec.basecurncy==0) then begin
            sum = cur2b1(IPrw.RecCurncy,IPr.TransDate,IPrw.RecVal);
          end else begin
            sum = cur2b2(IPrw.RecCurncy,IPr.TransDate,IPrw.RecVal);
          end;
          ssum = ssum + sum;
          pmsum = pmsum + sum;
        
      if (RepSpec.flags[2]==1) then begin
        StartFormat(15);  
        OutDate(0,0,IPr.TransDate,false);
        GetPayModeText(IPrw.PayMode,tstr);
        OutString(2,0,tstr,false);
        OutString(3,0,IPrw.rkRecNumber,false);
        OutStringID(4,"DblIVVc",IVr.OfficialSerNr,false,IVr.SerNr);
        OutString(5,0,IVr.VATNr,false);
        OutVal(1,0,sum,M4Val,true);
        EndFormat;      
        StartFormat(15);  
        OutString(5,0,IVr.Addr0,false);
        EndFormat;
        end else begin
        StartFormat(15);  
        OutDate(0,0,IPr.TransDate,false);
        OutString(3,0,IPrw.rkRecNumber,false);
        OutStringID(4,"DblIVVc",IVr.OfficialSerNr,false,IVr.SerNr);
        OutString(5,0,IVr.VATNr,false);
        OutString(6,0,IVr.Addr0,false);
        OutVal(1,0,sum,M4Val,true);
        EndFormat;
      end;
      if (RepSpec.flags[2]==1) then begin
        found = false;
        for (j=0;j<maxr;j=j+1) begin
          if (apm[j]==IPrw.PayMode) then begin
            found = true;
            asum[j] = asum[j] + sum;
            j = maxr;
          end;
        end;
        if (not(found)) then begin
          asum[maxr] = sum;
          apm[maxr] = IPrw.PayMode;
          maxr = maxr + 1;
        end;
      end;
      
        end;
      end;
    end;
  end;
  if (printed) then begin 
    Gray_Divider(0,1);  
    StartFormat(15);
    if (RepSpec.flags[6]==0) then begin 
      OutString(0,0,USetStr(13865) & " " &  StringFromSet(36,type),false);
    end;
    if (RepSpec.flags[6]==1) then begin 
      GetPayModeText(RepSpec.f2,tstr);
      OutString(0,0,USetStr(13865) & " " &  StringFromSet(36,type) & " " & tstr,false);
    end;
    OutVal(1,0,pmsum,M4Val,true);
    EndFormat;
    total = total + pmsum;
  end;  
  return;
end; 

procedure SortPMCustWithHoldPerType(var val ssum,var array val asum, var array string  apm,var integer maxr, var val xtotssum,integer type,record RcVc RepSpec,array string whpaymodes, array integer checktype,integer n)
begin
  Integer i,mrwcnt;
  row PMBlock pmrw;
  record PMBlock PMRec;
  val totssum;
  
    BlockLoad(PMRec);
    mrwcnt = MatRowCnt(PMRec);
    totssum = 0;
    StartFormat(15);
    EndFormat;
    StartFormat(15);
    OutString(0,0,StringFromSet(36,type),false);
    EndFormat;
    Black_Divider(0,1); 
    for (i=0; i<mrwcnt; i=i+1) begin
      MatRowGet(PMRec,i,pmrw);
      if (pmrw.CheckType==type)  then begin 
        RepSpec.f1 = pmrw.Code;
        CustWithHoldPerType(ssum,asum,apm,maxr,totssum,type,RepSpec,whpaymodes,checktype,n);
        RepSpec.f1 = "";
      end;
    end;
    if (totssum!=0) then begin 
      Black_Divider(0,1);  
      StartFormat(15);
      OutString(0,0,USetStr(13865) & " " &  StringFromSet(36,type),false);
      OutVal(1,0,totssum,M4Val,true);
      EndFormat;
    end; 
    xtotssum = xtotssum + totssum;

    return;
end;    


procedure CustWithHoldHeader(record RcVc RepSpec)
begin
  string 255 tstr;
  record CYBlock CYr;
  record BaseCurBlock BaseCurr;
  
  BlockLoad(CYr);
  BlockLoad(BaseCurr);
  
  tstr = USetStr(13851) & CYr.CompName;
  StartFormat(15);
  OutString(0,0,tstr,false);
  EndFormat;
  
  tstr = USetStr(13852) & CYr.VATNr;
  StartFormat(15);
  OutString(0,0,tstr,false);
  EndFormat;
  
  tstr = USetStr(13853) & RepSpec.sStartDate & ":" & RepSpec.sEndDate;
  StartFormat(15);
  OutString(0,0,tstr,false);
  EndFormat;
  
  if (RepSpec.basecurncy==0) then begin
    GetCurncyComment(BaseCurr.BaseCur1,tstr);
  end else begin  
    GetCurncyComment(BaseCurr.BaseCur2,tstr);
  end;  
  tstr = USetStr(13856) & tstr;
  StartFormat(15);
  OutString(0,0,tstr,false);
  EndFormat;
  if (nonblank(RepSpec.f1)) then begin
    GetPayModeText(RepSpec.f1,tstr);
    tstr = USetStr(13857) & tstr;
    StartFormat(15);OutString(0,0,tstr,false);EndFormat;
  end;
  if (nonblank(RepSpec.f2)) then begin
    GetPayModeText(RepSpec.f1,tstr);
    tstr = USetStr(13857) & tstr;
    StartFormat(15);
    OutString(0,0,tstr,false);
    EndFormat;
  end;
  if (nonblank(RepSpec.f2)) then begin
    HTCusts(RepSpec.f2,RepSpec.f2,tstr);
    StartFormat(15);
    OutString(0,0,tstr,false);
    EndFormat;
  end;
  Gray_Divider(0,1);
  return;
end;

procedure Fillwhpaymodes(record RcVc RepSpec,var array string whpaymodes,var array integer checktype, var Integer n)
begin
  Integer i,mrwcnt;
  row PMBlock pmrw;
  record PMBlock PMRec;

  n = 0;  
  BlockLoad(PMRec);
  mrwcnt = MatRowCnt(PMRec);
  if (RepSpec.flags[3]==1) then begin 
    for (i=0; i<mrwcnt; i=i+1) begin
      MatRowGet(PMRec,i,pmrw);
      if (pmrw.CheckType==kPayModeTypeWithholding)  then begin 
        whpaymodes[n]= pmrw.Code;
        checktype[n]= pmrw.CheckType;
        n = n + 1;
      end;
    end;
  end;
  
  if (RepSpec.flags[5]==1) then begin 
    for (i=0; i<mrwcnt; i=i+1) begin
      MatRowGet(PMRec,i,pmrw);
      if (pmrw.CheckType==kPayModeTypeRegionalWithholding)  then begin 
        whpaymodes[n]= pmrw.Code;
        checktype[n]= pmrw.CheckType;
        n = n + 1;
      end;
    end;  
  end;
  
  if (RepSpec.flags[4]==1) then begin 
    for (i=0; i<mrwcnt; i=i+1) begin
      MatRowGet(PMRec,i,pmrw);
      if (pmrw.CheckType==kPayModeTypeVATWithholding) then begin 
        whpaymodes[n]= pmrw.Code;
        checktype[n]= pmrw.CheckType;
        n = n + 1;
      end;
    end;  
  end;
  if (RepSpec.flags[7]==1) then begin 
    for (i=0; i<mrwcnt; i=i+1) begin
      MatRowGet(PMRec,i,pmrw);
      if (pmrw.CheckType==kPayModeTypeSocialInsuranceWithholding) then begin 
        whpaymodes[n]= pmrw.Code;
        checktype[n]= pmrw.CheckType;
        n = n + 1;
      end;
    end;  
  end;
  
  return;
end;


global
procedure CustWithHoldRn(record RcVc RepSpec)
begin
  string 255 tstr;
  val totssum,ssum;
  array string 2 apm;
  array val asum;
  Integer maxr,j;
  array string 5 whpaymodes;
  array integer checktype;
  Integer i,mrwcnt;
  row PMBlock PMrw;
  Integer n;
  Boolean found;

  maxr = 0;
  StartReportNoHeaderJob(USetStr(13850));  
  if (RepSpec.flags[2]==1) then begin
    SetRepCol(2,55);
    SetRepCol(3,120);
    SetRepCol(4,200);
    SetRepCol(5,290);
    end else begin
    SetRepCol(3,55);
    SetRepCol(4,130);
    SetRepCol(5,220);
    SetRepCol(6,295);
  end;
  
  CustWithHoldHeader(RepSpec);  
  Fillwhpaymodes(RepSpec,whpaymodes,checktype,n);
  if (nonblank(RepSpec.f1)) then begin 
    GetPMRow(RepSpec.f1,PMrw);
    CustWithHoldPerType(ssum,asum,apm,maxr,totssum,PMrw.CheckType,RepSpec,whpaymodes,checktype,n);
  end else begin 
    if (RepSpec.flags[6]==0) then begin 
      if (RepSpec.flags[3]==1) then begin 
        CustWithHoldPerType(ssum,asum,apm,maxr,totssum,kPayModeTypeWithholding,RepSpec,whpaymodes,checktype,n);
      end;  
      if (RepSpec.flags[4]==1) then begin 
        CustWithHoldPerType(ssum,asum,apm,maxr,totssum,kPayModeTypeVATWithholding,RepSpec,whpaymodes,checktype,n);
      end;  
      if (RepSpec.flags[5]==1) then begin 
        CustWithHoldPerType(ssum,asum,apm,maxr,totssum,kPayModeTypeRegionalWithholding,RepSpec,whpaymodes,checktype,n);
      end;
      if (RepSpec.flags[7]==1) then begin 
        CustWithHoldPerType(ssum,asum,apm,maxr,totssum,kPayModeTypeSocialInsuranceWithholding,RepSpec,whpaymodes,checktype,n);
      end;
    end;
    if (RepSpec.flags[6]==1) then begin 
      if (RepSpec.flags[3]==1) then begin 
        SortPMCustWithHoldPerType(ssum,asum,apm,maxr,totssum,kPayModeTypeWithholding,RepSpec,whpaymodes,checktype,n);
      end; 
      if (RepSpec.flags[5]==1) then begin 
        SortPMCustWithHoldPerType(ssum,asum,apm,maxr,totssum,kPayModeTypeRegionalWithholding,RepSpec,whpaymodes,checktype,n);
      end;  
      if (RepSpec.flags[4]==1) then begin 
        SortPMCustWithHoldPerType(ssum,asum,apm,maxr,totssum,kPayModeTypeVATWithholding,RepSpec,whpaymodes,checktype,n);
      end;
      if (RepSpec.flags[7]==1) then begin 
        SortPMCustWithHoldPerType(ssum,asum,apm,maxr,totssum,kPayModeTypeSocialInsuranceWithholding,RepSpec,whpaymodes,checktype,n);
      end;
      RepSpec.f1 = "";
    end;
  end;  
  StartFormat(15);
  EndFormat;
  Black_Divider(0,1);  
  StartFormat(15);
  OutString(6,0,USetStr(13865),false);
  OutVal(1,0,totssum,M4Val,true);
  EndFormat;

  if (RepSpec.flags[2]==1) then begin
    Gray_Divider(0,1);  
    for (j=0;j<maxr;j=j+1) begin
      GetPayModeText(apm[j],tstr);
      StartFormat(15);
      OutString(5,0,tstr,false);
      OutVal(1,0,asum[j],M4Val,true);
      EndFormat;
    end;
  end;
  EndJob;
  return;
end;