external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure HTClasses(string,string,var string);
external procedure HTITs(string,string,var string);
external procedure HTItems(string,var string);
external procedure AddToSoftF(record RcVc,record SoftFVc,string,val,val,val,Boolean,Boolean);
external procedure HT2Per(Date,Date,var string);
external procedure HTInvTypes2(Integer,Integer,Integer,Integer,Integer,Integer,var string);

function val Min(val v1,val v2)
begin
  val res;
  
  if (v1>v2) then begin
    res = v2;
  end else begin
    res = v1;
  end;
  Min = res;
  return;
end;

function val Max(val v1,val v2)
begin
  val res;
  
  if (v1>v2) then begin
    res = v1;
  end else begin
    res = v2;
  end;
  Max = res;
  return;
end;

procedure CombineRows_IVVc(row IVVc IVrw,var record IVVc combinedIVr,Boolean mbrf,Boolean inclvoid,Boolean creditf)
begin
  Integer iiv,ivrwcnt;
  row IVVc cIVrw;
  Boolean voidf;
  
  voidf = IVrw.ovst!=0;
  if (voidf and inclvoid==false) then begin goto LCombineRows_IVVc; end;
  ivrwcnt = MatRowCnt(combinedIVr);
  for (iiv=0;iiv<ivrwcnt;iiv=iiv+1) begin
    MatRowGet(combinedIVr,iiv,cIVrw);
    if (IVrw.ArtCode==cIVrw.ArtCode) then begin
      switch (IVrw.stp) begin
        case kInvoiceRowTypeMultiBuyDiscount:
          if (mbrf) then begin
            goto LkInvoiceRowTypeNormal1;
          end;
        case kInvoiceRowTypeStructuredItemComponent:
          goto LkInvoiceRowTypeNormal1;
        case kInvoiceRowTypeVoid:
          if (inclvoid) then begin
            voidf = true;
            goto LkInvoiceRowTypeNormal1;
          end;
        case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal1:;
          if (voidf==false) then begin
            if (creditf) then begin
              cIVrw.Quant = cIVrw.Quant - IVrw.Quant;
              cIVrw.Sum = cIVrw.Sum - IVrw.Sum;
            end else begin
              cIVrw.Quant = cIVrw.Quant + IVrw.Quant;
              cIVrw.Sum = cIVrw.Sum + IVrw.Sum;
            end;
            MatRowPut(combinedIVr,iiv,cIVrw);
          end;
          goto LCombineRows_IVVc;
        case kInvoiceRowTypeCorrection:
          if (voidf==false) then begin
            cIVrw.Quant = cIVrw.Quant - IVrw.Quant;
            cIVrw.Sum = cIVrw.Sum - IVrw.Sum;
            MatRowPut(combinedIVr,iiv,cIVrw);
          end;
          goto LCombineRows_IVVc;
      end;
    end;
  end;
  switch (IVrw.stp) begin
    case kInvoiceRowTypeMultiBuyDiscount:
      goto LkInvoiceRowTypeNormal11;
    case kInvoiceRowTypeStructuredItemComponent:
      goto LkInvoiceRowTypeNormal11;
    case kInvoiceRowTypeVoid:
      if (inclvoid) then begin
        voidf = true;
        goto LkInvoiceRowTypeNormal11;
      end;
    case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal11:;
      if (creditf) then begin
        IVrw.Quant = -IVrw.Quant;
        IVrw.Sum = -IVrw.Sum;
      end;
      CopyRow(combinedIVr,IVrw,cIVrw);
      if (voidf) then begin
        cIVrw.Quant = 0;
        cIVrw.Sum = 0;
        cIVrw.rowGP = 0;
      end;
    case kInvoiceRowTypeCorrection:
      cIVrw.stp = kInvoiceRowTypeNormal;
      if (voidf) then begin
        cIVrw.Quant = 0;
        cIVrw.Sum = 0;
        cIVrw.rowGP = 0;
      end else begin
        cIVrw.Quant = -cIVrw.Quant;
        cIVrw.Sum = -cIVrw.Sum;
      end;
  end;
  if (nonblank(cIVrw.ArtCode)) then begin
    MatRowPut(combinedIVr,ivrwcnt,cIVrw);
  end;
LCombineRows_IVVc:;
  return;
end;

procedure CombineRows_IVCashVc(row IVCashVc IVCashrw,var record IVCashVc combinedIVCashr,Boolean mbrf,Boolean inclvoid)
begin
  Integer iiv,ivrwcnt;
  row IVCashVc cIVCashrw;
  Boolean voidf;
  
  voidf = IVCashrw.ovst!=0;
  if (voidf and inclvoid==false) then begin goto LCombineRows_IVCashVc; end;
  ivrwcnt = MatRowCnt(combinedIVCashr);
  for (iiv=0;iiv<ivrwcnt;iiv=iiv+1) begin
    MatRowGet(combinedIVCashr,iiv,cIVCashrw);
    if (IVCashrw.ArtCode==cIVCashrw.ArtCode) then begin
      switch (IVCashrw.stp) begin
        case kInvoiceRowTypeMultiBuyDiscount:
          if (mbrf) then begin
            goto LkInvoiceRowTypeNormal2;
          end;
        case kInvoiceRowTypeStructuredItemComponent:
          goto LkInvoiceRowTypeNormal2;
        case kInvoiceRowTypeVoid:
          if (inclvoid) then begin
            voidf = true;
            goto LkInvoiceRowTypeNormal2;
          end;
        case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal2:;
          if (voidf==false) then begin
            cIVCashrw.Quant = cIVCashrw.Quant + IVCashrw.Quant;
            cIVCashrw.Sum = cIVCashrw.Sum + IVCashrw.Sum;
            MatRowPut(combinedIVCashr,iiv,cIVCashrw);
          end;
          goto LCombineRows_IVCashVc;
        case kInvoiceRowTypeCorrection:
          if (voidf==false) then begin
            cIVCashrw.Quant = cIVCashrw.Quant - IVCashrw.Quant;
            cIVCashrw.Sum = cIVCashrw.Sum - IVCashrw.Sum;
            MatRowPut(combinedIVCashr,iiv,cIVCashrw);
          end;
          goto LCombineRows_IVCashVc;
      end;
    end;
  end;
  switch (IVCashrw.stp) begin
    case kInvoiceRowTypeMultiBuyDiscount:
      goto LkInvoiceRowTypeNormal21;
    case kInvoiceRowTypeStructuredItemComponent:
      goto LkInvoiceRowTypeNormal21;
    case kInvoiceRowTypeVoid:
      if (inclvoid) then begin
        voidf = true;
        goto LkInvoiceRowTypeNormal21;
      end;
    case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal21:;
      CopyRow(combinedIVCashr,IVCashrw,cIVCashrw);
      if (voidf) then begin
        cIVCashrw.Quant = 0;
        cIVCashrw.Sum = 0;
        cIVCashrw.rowGP = 0;
      end;
    case kInvoiceRowTypeCorrection:
      cIVCashrw.stp = kInvoiceRowTypeNormal;
      if (voidf) then begin
        cIVCashrw.Quant = 0;
        cIVCashrw.Sum = 0;
        cIVCashrw.rowGP = 0;
      end else begin
        cIVCashrw.Quant = -cIVCashrw.Quant;
        cIVCashrw.Sum = -cIVCashrw.Sum;
      end;
  end;
  if (nonblank(cIVCashrw.ArtCode)) then begin
    MatRowPut(combinedIVCashr,ivrwcnt,cIVCashrw);
  end;
LCombineRows_IVCashVc:;
  return;
end;

function string 255 FindDiscountedItemArtCode_IVVc(record MultiBuyRebVc MBRr,string artcode,record IVVc combinedIVr)
begin
  string 255 res;
  row IVVc IVrw;
  Integer i,rwcnt;
  val sum,osum;
  
  switch (MBRr.RebType) begin
    case kMultiBuyDiscountTypeCheapest:
      sum = 1000000000000.00;
    case kMultiBuyDiscountTypeMostExpensive:
      sum = 0.00;
    otherwise
      ;
  end;
  rwcnt = MatRowCnt(combinedIVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(combinedIVr,i,IVrw);
    switch (IVrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkInvoiceRowTypeNormal3;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal3:;
        if (IVrw.ArtCode==artcode) then begin
          osum = sum;
          switch (MBRr.RebType) begin
            case kMultiBuyDiscountTypeCheapest:
              sum = Min(sum,IVrw.Price);
            case kMultiBuyDiscountTypeMostExpensive:
              sum = Max(sum,IVrw.Price);              
          end;
          if (sum!=osum) then begin
            res = IVrw.ArtCode;
          end;
        end;        
      case kInvoiceRowTypeCorrection:
    end;
  end;
  FindDiscountedItemArtCode_IVVc = res;
  return;
end;

function string 255 FindDiscountedItemArtCode_IVCashVc(record MultiBuyRebVc MBRr,string artcode,record IVCashVc combinedIVCashr)
begin
  string 255 res;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  val sum,osum;

  switch (MBRr.RebType) begin
    case kMultiBuyDiscountTypeCheapest:
      sum = 1000000000000.00;
    case kMultiBuyDiscountTypeMostExpensive:
      sum = 0.00;
    otherwise
      ;
  end;
  rwcnt = MatRowCnt(combinedIVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(combinedIVCashr,i,IVCashrw);
    switch (IVCashrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkInvoiceRowTypeNormal4;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal4:;
        if (IVCashrw.ArtCode==artcode) then begin
          osum = sum;
          switch (MBRr.RebType) begin
            case kMultiBuyDiscountTypeCheapest:
              sum = Min(sum,IVCashrw.Price);
            case kMultiBuyDiscountTypeMostExpensive:
              sum = Max(sum,IVCashrw.Price);              
          end;
          if (sum!=osum) then begin
            res = IVCashrw.ArtCode;
          end;
        end;        
      case kInvoiceRowTypeCorrection:
    end;
  end;
  FindDiscountedItemArtCode_IVCashVc = res;
  return;
end;

procedure INMultiBuyStat_IVVc(record SoftFVc SoftFr,record MultiBuyRebVc MBRr,record RcVc RepSpec,record SoftFVc totSoftFr)
begin
  record IVVc combinedIVr;
  record IVVc IVr;
  row IVVc IVrw;
  Integer i,rwcnt;
  string 255 keystr;
  Boolean found,testf,creditf;
  row MultiBuyRebVc MBRrw;
  Integer mbi,mbrwcnt;

  mbrwcnt = MatRowCnt(MBRr);
  found = true;
  keystr = "MBRCode:" & MBRr.Code;
  IVr.TransDate = RepSpec.sStartDate;
  while (LoopKey(keystr,IVr,1,found)) begin
    if (DateInRange(IVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (IVr.OKFlag==0) then begin testf = false; end;
      if (IVr.Invalid!=0) then begin testf = false; end;
      if (testf) then begin
        creditf = IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales;
        RecordClear(combinedIVr);
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          CombineRows_IVVc(IVrw,combinedIVr,false,RepSpec.flags[3]==0,creditf);
        end;

        rwcnt = MatRowCnt(combinedIVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(combinedIVr,i,IVrw);
          switch (IVrw.stp) begin
            case kInvoiceRowTypeMultiBuyDiscount:
              if (IVrw.MBRCode==MBRr.Code) then begin
                for (mbi=0;mbi<mbrwcnt;mbi=mbi+1) begin
                  MatRowGet(MBRr,mbi,MBRrw);
                  if (MBRr.Type==kMultiBuyTypeBOGOF) then begin
                    if (MBRrw.BuyQty!=0) then begin
                      IVrw.ArtCode = MBRrw.ArtCode;
                      IVrw.Quant = -MBRrw.BuyQty;
                      CombineRows_IVVc(IVrw,combinedIVr,true,RepSpec.flags[3]==0,creditf);
                      mbi = mbrwcnt;
                    end;
                  end;
                  if (MBRr.Type==kMultiBuyTypeAnyQty) then begin
                    if (nonblank(IVrw.MotherArtCode)) then begin
                      IVrw.ArtCode = IVrw.MotherArtCode;
                    end else begin
                      IVrw.ArtCode = FindDiscountedItemArtCode_IVVc(MBRr,MBRrw.ArtCode,combinedIVr);
                    end;
                    CombineRows_IVVc(IVrw,combinedIVr,true,RepSpec.flags[3]==0,creditf);
                    mbi = mbrwcnt;
                  end;
                end;
                i = rwcnt;
              end;              
          end;
        end;
        rwcnt = MatRowCnt(combinedIVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(combinedIVr,i,IVrw);
          switch (IVrw.stp) begin
            case kInvoiceRowTypeMultiBuyDiscount:
            otherwise
              for (mbi=0;mbi<mbrwcnt;mbi=mbi+1) begin
                MatRowGet(MBRr,mbi,MBRrw);
                if (IVrw.ArtCode==MBRrw.ArtCode) then begin
                  if (RepSpec.ArtMode==1) then begin
                    AddToSoftF(RepSpec,SoftFr,IVrw.ArtCode,IVrw.Quant,IVrw.Sum,IVrw.rowGP,creditf,RepSpec.flags[3]==0);
                  end;
                  AddToSoftF(RepSpec,totSoftFr,IVrw.ArtCode,IVrw.Quant,IVrw.Sum,IVrw.rowGP,creditf,RepSpec.flags[3]==0);
                end;
                mbi = mbrwcnt;
              end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure INMultiBuyStat_IVCashVc(record SoftFVc SoftFr,record MultiBuyRebVc MBRr,record RcVc RepSpec,record SoftFVc totSoftFr)
begin
  record IVCashVc combinedIVCashr;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  string 255 keystr;
  Boolean found,testf;
  row MultiBuyRebVc MBRrw;
  Integer mbi,mbrwcnt;

  mbrwcnt = MatRowCnt(MBRr);
  found = true;
  keystr = "MBRCode:" & MBRr.Code;
  IVCashr.TransDate = RepSpec.sStartDate;
  while (LoopKey(keystr,IVCashr,1,found)) begin
    if (DateInRange(IVCashr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (IVCashr.OKFlag==0) then begin testf = false; end;
      if (IVCashr.Invalid!=0) then begin testf = false; end;
      if (testf) then begin
        RecordClear(combinedIVCashr);
        
        rwcnt = MatRowCnt(IVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVCashr,i,IVCashrw);
          CombineRows_IVCashVc(IVCashrw,combinedIVCashr,false,RepSpec.flags[3]==0);
        end;
        rwcnt = MatRowCnt(combinedIVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(combinedIVCashr,i,IVCashrw);
          switch (IVCashrw.stp) begin
            case kInvoiceRowTypeMultiBuyDiscount:
              if (IVCashrw.MBRCode==MBRr.Code) then begin
                for (mbi=0;mbi<mbrwcnt;mbi=mbi+1) begin
                  MatRowGet(MBRr,mbi,MBRrw);
                  if (MBRr.Type==kMultiBuyTypeBOGOF) then begin
                    if (MBRrw.BuyQty!=0) then begin
                      IVCashrw.ArtCode = MBRrw.ArtCode;
                      IVCashrw.Quant = -MBRrw.BuyQty;
                      CombineRows_IVCashVc(IVCashrw,combinedIVCashr,true,RepSpec.flags[3]==0);
                      mbi = mbrwcnt;
                    end;
                  end;
                  if (MBRr.Type==kMultiBuyTypeAnyQty) then begin
                    if (nonblank(IVCashrw.MotherArtCode)) then begin
                      IVCashrw.ArtCode = IVCashrw.MotherArtCode;
                    end else begin
                      IVCashrw.ArtCode = FindDiscountedItemArtCode_IVCashVc(MBRr,MBRrw.ArtCode,combinedIVCashr);
                    end;
                    CombineRows_IVCashVc(IVCashrw,combinedIVCashr,true,RepSpec.flags[3]==0);
                    mbi = mbrwcnt;
                  end;
                end;
                i = rwcnt;
              end;              
          end;
        end;
        rwcnt = MatRowCnt(combinedIVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(combinedIVCashr,i,IVCashrw);
          switch (IVCashrw.stp) begin
            case kInvoiceRowTypeMultiBuyDiscount:
            otherwise
              for (mbi=0;mbi<mbrwcnt;mbi=mbi+1) begin
                MatRowGet(MBRr,mbi,MBRrw);
                if (IVCashrw.ArtCode==MBRrw.ArtCode) then begin
                  if (RepSpec.ArtMode==1) then begin
                    AddToSoftF(RepSpec,SoftFr,IVCashrw.ArtCode,IVCashrw.Quant,IVCashrw.Sum,IVCashrw.rowGP,false,RepSpec.flags[3]==0);
                  end;
                  AddToSoftF(RepSpec,totSoftFr,IVCashrw.ArtCode,IVCashrw.Quant,IVCashrw.Sum,IVCashrw.rowGP,false,RepSpec.flags[3]==0);
                  mbi = mbrwcnt;
                end;
              end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure PrintMultiBuyResult(record RcVc RepSpec,record MultiBuyRebVc MBRr,record SoftFVc SoftFr)
begin
  row SoftFVc SoftFrw;
  Integer i,rwcnt;  
  Boolean headf;
  val totq,tots,totgp;
  
  headf = true;
  rwcnt = MatRowCnt(SoftFr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SoftFr,i,SoftFrw);
    if (headf) then begin
      StartFormat(15);
       OutString(0,0,USetStr(28141) & ":  " & MBRr.Code,false);
      EndFormat;
      Gray_Divider(0,1);
      headf = false;
    end;
    StartFormat(15);
     OutString(0,0,SoftFrw.ArtCode,false);
     OutString(2,0,SoftFrw.Spec,false);
     if (RepSpec.ArtMode==1) then begin
       OutVal(5,0,SoftFrw.Quant,M4Val,true);
       OutVal(6,0,SoftFrw.Sum/SoftFrw.Quant,M4Val,true);
       OutVal(7,0,SoftFrw.BasePrice,M4Val,true);
       OutVal(8,0,SoftFrw.rowGP,M4Val,true);
       OutVal(9,0,(SoftFrw.rowGP/SoftFrw.Sum)*100,M4Val,true);
       OutVal(1,0,SoftFrw.Sum,M4Val,true);
     end else begin
       OutVal(9,0,SoftFrw.Quant,M4Val,true);
       OutVal(1,0,SoftFrw.Sum/SoftFrw.Quant,M4Val,true);
     end;
    EndFormat;
    totq = totq + SoftFrw.Quant;
    totgp = totgp + SoftFrw.rowGP;
    tots = tots + SoftFrw.Sum;
  end;
  if (headf==false) then begin
    Gray_Divider(0,1);
    StartFormat(15);
     OutString(0,0,USetStr(28106),false);
     if (RepSpec.ArtMode==1) then begin
       OutVal(5,0,totq,M4Val,true);
       OutVal(8,0,totgp,M4Val,true);
       OutVal(9,0,(totgp/tots)*100,M4Val,true);
       OutVal(1,0,tots,M4Val,true);
     end else begin
       OutVal(9,0,totq,M4Val,true);
       OutVal(1,0,tots/totq,M4Val,true);
     end;
    EndFormat;
    StartFormat(15);
    EndFormat;
  end;
  return;
end;

procedure PrintTotalResult(record RcVc RepSpec,record SoftFVc SoftFr)
begin
  row SoftFVc SoftFrw;
  Integer i,rwcnt;  
  val totq,tots,totgp;
  
  rwcnt = MatRowCnt(SoftFr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SoftFr,i,SoftFrw);
    StartFormat(15);
     OutString(0,0,SoftFrw.ArtCode,false);
     OutString(2,0,SoftFrw.Spec,false);
     if (RepSpec.ArtMode==1) then begin
       OutVal(5,0,SoftFrw.Quant,M4Val,true);
       OutVal(6,0,SoftFrw.Sum/SoftFrw.Quant,M4Val,true);
       OutVal(7,0,SoftFrw.BasePrice,M4Val,true);
       OutVal(8,0,SoftFrw.rowGP,M4Val,true);
       OutVal(9,0,(SoftFrw.rowGP/SoftFrw.Sum)*100,M4Val,true);
       OutVal(1,0,SoftFrw.Sum,M4Val,true);
     end else begin
       OutVal(9,0,SoftFrw.Quant,M4Val,true);
       OutVal(1,0,SoftFrw.Sum/SoftFrw.Quant,M4Val,true);
     end;
    EndFormat;
    totq = totq + SoftFrw.Quant;
    tots = tots + SoftFrw.Sum;
    totgp = totgp + SoftFrw.rowGP;
  end;
  Gray_Divider(0,1);
  StartFormat(15);
   OutString(0,0,USetStr(28106),false);
   if (RepSpec.ArtMode==1) then begin
     OutVal(5,0,totq,M4Val,true);
     OutVal(8,0,totgp,M4Val,true);
     OutVal(9,0,(totgp/tots)*100,M4Val,true);
     OutVal(1,0,tots,M4Val,true);
   end else begin
     OutVal(9,0,totq,M4Val,true);
     OutVal(1,0,tots/totq,M4Val,true);
   end;
  EndFormat;
  return;
end;

procedure INMultiBuyStat(record MultiBuyRebVc MBRr,record RcVc RepSpec,record SoftFVc totSoftFr)
begin
  record SoftFVc SoftFr;
  
  if (RepSpec.flags[1]!=0) then begin
    INMultiBuyStat_IVVc(SoftFr,MBRr,RepSpec,totSoftFr);
  end;
  if (RepSpec.flags[2]!=0) then begin
    INMultiBuyStat_IVCashVc(SoftFr,MBRr,RepSpec,totSoftFr);
  end;
  if (RepSpec.ArtMode==1) then begin
    SortRows(SoftFr,"ArtCode",true);
    PrintMultiBuyResult(RepSpec,MBRr,SoftFr);
  end;
  return;
end;

global
procedure HTMultiBuys(string mb,var string tstr)
begin
  if (nonblank(mb)) then begin
    tstr = USetStr(28142);
    tstr = tstr & " ";
    tstr = tstr & mb;
  end else begin
    tstr = USetStr(28143);
  end;
end;

global
procedure INMultiBuyStatRn(record RcVc RepSpec)
begin
  Integer rw;
  string 255 tstr;
  string 255 frmbr,tombr;
  string 255 frit,toit;
  record MultiBuyRebVc MBRr;
  Boolean found;
  record SoftFVc totSoftFr;

  frmbr = FirstInRange(RepSpec.f1,10);
  tombr = LastInRange(RepSpec.f1,10);
  frit = FirstInRange(RepSpec.f3,10);
  toit = LastInRange(RepSpec.f3,10);
  StartReportJob(USetStr(28140));
   rw = 1;
   HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   HTInvTypes2(RepSpec.flags[1],0,0,0,RepSpec.flags[2],0,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   HTMultiBuys(RepSpec.f1,tstr);
   Header(rw,tstr,0);
   HTItems(RepSpec.f2,tstr);
   Header(rw,tstr,1); 
   rw = rw + 1; 
   HTITs(frit,toit,tstr);
   Header(rw,tstr,0);
   HTClasses(RepSpec.f4,RepSpec.f4,tstr);
   Header(rw,tstr,1); 
   rw = rw + 1; 
  EndHeader;
  if (RepSpec.ArtMode==1) then begin
    SetRepCol(2,100);
    SetRepCol(5,210);
    SetRepCol(6,270);
    SetRepCol(7,330);
    SetRepCol(8,390);
    SetRepCol(9,420);
  end else begin
    SetRepCol(2,100);
    SetRepCol(9,420);
  end;
  StartFormat(15);
   OutString(0,0,USetStr(28121),false);
   OutString(2,0,USetStr(28122),false);
   if (RepSpec.ArtMode==1) then begin
     OutString(5,0,USetStr(28123),true);
     OutString(6,0,USetStr(28124),true);
     OutString(7,0,USetStr(28125),true);
     OutString(8,0,USetStr(28126),true);
     OutString(9,0,USetStr(28127),true);
     OutString(1,0,USetStr(28128),true);
   end else begin
     OutString(9,0,USetStr(28123),true);
     OutString(1,0,USetStr(28124),true);
   end;
  EndFormat;
  Gray_Divider(0,1);
  
  found = true;
  MBRr.Code = frmbr;
  while (LoopMain(MBRr,1,found)) begin
    if (MBRr.Code>tombr) then begin found = false; end;
    if (found) then begin
      INMultiBuyStat(MBRr,RepSpec,totSoftFr);
    end;
  end;
  SortRows(totSoftFr,"ArtCode",true);
  PrintTotalResult(RepSpec,totSoftFr);
  EndJob;
  return;
end;
