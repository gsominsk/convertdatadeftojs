#ifdef HAL
external procedure AddSubAccRow(record FBVc,string,val,val,val,val);
external procedure CheckObjectAccRow(record FBVc,string,string,val,val,val,val);
external procedure PrintSubaccVals(var record FBVc);
external procedure SortObjQtySubaccounts(record FBVc,record FBVc,Integer);
external procedure PrintObjQtySubAcc(record FBVc);

global
procedure ExpToIncomeAddup(val incv,val expv,var val res)
BEGIN
  if (incv<0) then begin
    if (expv<0) then begin
      res = incv - expv;
    end else begin
      res = incv + expv;
    end;
  end else begin
    if (expv<0) then begin
      res = incv + expv;
    end else begin
      res = incv - expv;
    end;  
  end;
  
  RETURN;
END;

global
procedure PrintObjectValues(record RcVc RepSpec,record FBVc totFBr,record FBVc FB2r,string accnumber,var string lastsubacc,string object,val v,
                            val q,val av,val aq,var val totobjq,var val totobjaq,var val totincobjv,var val totexpobjv,var val totincobjav,
                            var val totexpobjav,var val totobjexpbudv,var val totobjincbudv,var val totobjexprbudv,var val totobjincrbudv)
BEGIN
  record Bud1Vc Bud1r;
  row Bud1Vc Bud1rw;
  record Bud2Vc Bud2r;
  row Bud2Vc Bud2rw;
  Boolean testf;
  record AccVc Accr;
  string 255 tstr;
  string 10 subacc;
  Integer printer;
  val rbudv,budv;

  printer = 1;
  Accr.AccNumber = accnumber;
  if (ReadFirstMain(Accr,1,true)) then begin
    tstr = Left(Accr.Comment,35);
    if (Accr.AccType==3) then begin
      totincobjv = totincobjv + v;
      totincobjav = totincobjav + av;
    end;
    if (Accr.AccType==4) then begin
      totexpobjv = totexpobjv + v;
      totexpobjav = totexpobjav + av;
    end;
  end;
  testf = true;
  totobjq = totobjq + q;
  totobjaq = totobjaq + aq;
  if (RepSpec.flags[0]<>0) then begin
    CheckObjectAccRow(totFBr,accnumber,object,v,q,av,aq);
    subacc = Left(accnumber,1);
    if (subacc<>lastsubacc) then begin
      PrintSubaccVals(FB2r);
      lastsubacc = subacc;
    end;
    AddSubAccRow(FB2r,subacc,v,0,av,0);//JJ
  end;    
  StartFormat(15);
//           OutString(0,0,ObjBalr.Object,false);
   OutString(15,"DblAccVc",accnumber,false);
   OutString(45,0,tstr,false);
   OutVal(240,0,v,M4Val,true);
   OutVal(320,0,av,M4Val,true);
   Bud2r.AccNumber = accnumber;
   Bud2r.Objects = object;         
   if (ReadFirstMain(Bud2r,2,true)) then begin
     if (RepSpec.sStartDate<Bud2r.StartDate) then begin testf = false; end;
     if (RepSpec.sStartDate>Bud2r.EndDate) then begin testf = false; end;
     if (testf) then begin
       OutVal(400,0,Bud2r.BudSum,M4Val,true);
       if (Accr.AccType==3) then begin         
         totobjincrbudv = totobjincrbudv + Bud2r.BudSum;             
       end;
       if (Accr.AccType==4) then begin   
         totobjexprbudv = totobjexprbudv + Bud2r.BudSum;    
       end;
       rbudv = rbudv + Bud2r.BudSum;
     end;           
   end;
      
   Bud1r.AccNumber = accnumber;
   Bud1r.Objects = object;         
   if (ReadFirstMain(Bud1r,2,true)) then begin
     if (RepSpec.sStartDate<Bud1r.StartDate) then begin testf = false; end;
     if (RepSpec.sStartDate>Bud1r.EndDate) then begin testf = false; end;
     if (testf) then begin
       OutVal(480,0,Bud1r.YearVal,M4Val,true);
       if (Accr.AccType==3) then begin         
         totobjincbudv = totobjincbudv + Bud1r.YearVal;    
       end;
       if (Accr.AccType==4) then begin   
         totobjexpbudv = totobjexpbudv + Bud1r.YearVal;    
       end;
       budv = budv + Bud1r.BudSum;       
     end;           
   end;
  EndFormat;
  if (RepSpec.flags[0]<>0) then begin
    AddSubAccRow(FB2r,subacc,0,rbudv,0,budv);
  end;     
  RETURN;
END;

global
procedure PrintReportTotals(val totrepq,val totrepaq,val totincrepv,val totexprepv,val totincrepav,val totexprepav,val totrepincbudv,
                            val totrepexpbudv,val totrepincrbudv,val totrepexprbudv)
BEGIN
  val t1,t2,tb1,tb2;
  
  Black_Divider(0,1);         
  StartFormat(15);
  OutString(15,0,USetStr(8691),false);
  OutVal(240,0,totincrepv,M4Val,true);
  OutVal(320,0,totincrepav,M4Val,true);
  OutVal(400,0,totrepincrbudv,M4Val,true);
  OutVal(480,0,totrepincbudv,M4Val,true);
  EndFormat;      
  StartFormat(15);
  OutString(15,0,USetStr(8692),false);
  OutVal(240,0,totexprepv,M4Val,true);
  OutVal(320,0,totexprepav,M4Val,true);
  OutVal(400,0,totrepexprbudv,M4Val,true);
  OutVal(480,0,totrepexpbudv,M4Val,true);
  EndFormat;      
  StartFormat(15);
  OutString(15,0,USetStr(8688),false);
  ExpToIncomeAddup(totincrepv,totexprepv,t1);       
  OutVal(240,0,t1,M4Val,true);
  ExpToIncomeAddup(totincrepav,totexprepav,t2);       
  OutVal(320,0,t2,M4Val,true);
  ExpToIncomeAddup(totrepincrbudv,totrepexprbudv,tb2);       
  OutVal(400,0,tb2,M4Val,true);
  ExpToIncomeAddup(totrepincbudv,totrepexpbudv,tb1);       
  OutVal(480,0,tb1,M4Val,true);
  EndFormat;         
  StartFormat(15);
  OutString(15,0,USetStr(8689),false);
  OutVal(240,0,((t1)/totincrepv)*100,M4Val,true);
  OutVal(320,0,((t2)/totincrepav)*100,M4Val,true);
  OutVal(400,0,((tb2)/totrepincrbudv)*100,M4Val,true);
  OutVal(480,0,((tb1)/totrepincbudv)*100,M4Val,true);
  EndFormat;     
  StartFormat(15);
  OutString(15,0,USetStr(8683),false);
  OutVal(240,0,totrepq,M4Qty,true);
  OutVal(320,0,totrepaq,M4Qty,true);
  EndFormat;
  RETURN;
END;

global
procedure PrintObjectGroupTotal(var record FBVc totFBr,record FBVc FB2r,record RcVc RepSpec,string object,var string lastobjg,string lastobj,var val totogrq,//JJ
                                var val totograq,var val totincgrv,var val totexpgrv,var val totincgrav,var val totexpgrav,var val totgrincbudv,
                                var val totgrexpbudv,var val totgrincrbudv,var val totgrexprbudv,Integer last)
BEGIN
  string 20 gtstr;
  string 255 tstr;
  Integer smcnt,i;
  record FBVc totacFBr;
  row FBVc FBrw;
  val t1,t2,tb1,tb2;
  
  if (RepSpec.FirstVer>0) then begin
    gtstr = Left(object,RepSpec.FirstVer);
  end else begin
    gtstr = object;
  end;  
  
  if (RepSpec.FirstVer>0) then begin
    if ((gtstr<>lastobjg) or (last==2)) then begin
      if (CharacterMatch(lastobj,"0",len(lastobj))==false) then begin//JJ
        Black_Divider(0,480);    
        if (RepSpec.flags[0]==2) then begin  //JJ
          RecordNew(totacFBr);  
          smcnt = MatRowCnt(totFBr);    
          SortObjQtySubaccounts(totFBr,totacFBr,smcnt);
          PrintObjQtySubAcc(totacFBr);        
          RecordNew(totFBr);        
        end; 
        StartFormat(15);
        tstr = USetStr(3248) & " ";
        tstr = tstr & lastobjg;
        OutString(15,0,tstr,false);
        EndFormat;    
        StartFormat(15);
        OutString(20,0,USetStr(8691),false);
        OutVal(240,0,totincgrv,M4Val,true);
        OutVal(320,0,totincgrav,M4Val,true);
        OutVal(400,0,totgrincrbudv,M4Val,true);      
        OutVal(480,0,totgrincbudv,M4Val,true);      
        EndFormat;       
        StartFormat(15);
        OutString(20,0,USetStr(8692),false);
        OutVal(240,0,totexpgrv,M4Val,true);
        OutVal(320,0,totexpgrav,M4Val,true);
        OutVal(400,0,totgrexprbudv,M4Val,true);      
        OutVal(480,0,totgrexpbudv,M4Val,true);      
        EndFormat;       
        StartFormat(15);
        OutString(20,0,USetStr(8688),false);
        ExpToIncomeAddup(totincgrv,totexpgrv,t1);       
        OutVal(240,0,-t1,M4Val,true);
        ExpToIncomeAddup(totincgrav,totexpgrav,t2);       
        OutVal(320,0,-t2,M4Val,true);
        ExpToIncomeAddup(totgrincrbudv,totgrexprbudv,tb2);       
        OutVal(400,0,-tb2,M4Val,true);
        ExpToIncomeAddup(totgrincbudv,totgrexpbudv,tb1);       
        OutVal(480,0,-tb1,M4Val,true);
        EndFormat;       
        StartFormat(15);
        OutString(20,0,USetStr(8689),false);
        OutVal(240,0,((t1)/totincgrv)*100,M4Val,true);
        OutVal(320,0,((t2)/totincgrav)*100,M4Val,true);
        OutVal(400,0,((tb2)/totgrincrbudv)*100,M4Val,true);
        OutVal(480,0,((tb1)/totgrincbudv)*100,M4Val,true);
        EndFormat;   
        StartFormat(15);
        OutString(20,0,USetStr(8683),false);
        OutVal(240,0,totogrq,M4Qty,true);      
        OutVal(320,0,totograq,M4Qty,true);
        EndFormat;              
        if (RepSpec.flags[0]<>0) then begin
          if ((RepSpec.flags[2]==1) and (RepSpec.Media==1)) then begin//JJ         
            NewPage(false);
          end else begin
            StartFormat(15);     
            EndFormat;
          end;          
        end;
      end;
      lastobjg = gtstr;
//      printsubaccf = true;
      totogrq = 0;
      totograq = 0;
      totincgrav = 0;
      totexpgrav = 0;
      totincgrv = 0;
      totexpgrv = 0;
      totgrincbudv = 0;
      totgrexpbudv = 0;
      totgrincrbudv = 0;
      totgrexprbudv = 0;
    end;  
  end;  
/*  
  if ((RepSpec.flags[0]<>0) and (printsubaccf)) then begin  
  I leave it here for a while
        StartFormat(15);
         OutString(0,0,USetStr(8681),false);
        EndFormat;                
    RecordNew(totacFBr);  
    smcnt = MatRowCnt(totFBr);    
    SortObjQtySubaccounts(totFBr,totacFBr,smcnt);
    smcnt = MatRowCnt(totacFBr);    
    for (i=0;i<smcnt;i=i+1) begin
      MatRowGet(totacFBr,i,FBrw);
      StartFormat(15);
       OutString(0,0,FBrw.AccNumber,false);
	     GetAccountName(FBrw.AccNumber,tstr);
       OutString(30,0,tstr,false);
//       OutString(110,0,FBrw.Comment,false);
       OutVal(240,0,FBrw.DebVal,M4Val,true);
       OutVal(260,0,FBrw.CredVal,M4Val,true);
       OutVal(400,0,FBrw.Deb2Val,M4Val,true);
       OutVal(480,0,FBrw.Cred2Val,M4Val,true);
      EndFormat;                    
    end;  
    RecordNew(totFBr);
  end;   
  if ((last<>2) and (printsubaccf)) then begin
    StartFormat(15);
    EndFormat;                
  end;    
*/
  RETURN;
END;

global
procedure AddupTotals2(string lastobj,string objcode,var val totobjq,var val totobjaq,var val totincobjv,var val totexpobjv,
                      var val totincobjav,var val totexpobjav,var val totobjincbudv,var val totobjexpbudv,var val totobjincrbudv,var val totobjexprbudv,
                      var val totrepq,var val totrepaq,var val totincrepv,var val totexprepv,var val totincrepav,
                      var val totexprepav,var val totrepincbudv,var val totrepexpbudv,var val totrepincrbudv,var val totrepexprbudv,Boolean firstobjf,
                      integer first)
begin
  if (((lastobj<>objcode) and (firstobjf==false)) or (first==2 and firstobjf==false)) then begin
    totrepq = totrepq + totobjq;
    totrepaq = totrepaq + totobjaq;
    totincrepv = totincrepv + totincobjv;
    totexprepv = totexprepv + totexpobjv;
    totincrepav = totincrepav + totincobjav;
    totexprepav = totexprepav + totexpobjav;
    totrepincbudv = totrepincbudv + totobjincbudv;
    totrepexpbudv = totrepexpbudv + totobjexpbudv;
    totrepincrbudv = totrepincrbudv + totobjincrbudv;
    totrepexprbudv = totrepexprbudv + totobjexprbudv;
  end;     
  return;
end;

global
procedure AddupTotals(string lastobj,string objcode,var val totobjq,var val totobjaq,var val totincobjv,var val totexpobjv,
                      var val totincobjav,var val totexpobjav,var val totobjincbudv,var val totobjexpbudv,var val totobjincrbudv,var val totobjexprbudv,
                      var val totrepq,var val totrepaq,var val totincrepv,var val totexprepv,var val totincrepav,
                      var val totexprepav,var val totrepincbudv,var val totrepexpbudv,var val totrepincrbudv,var val totrepexprbudv,Boolean firstobjf)
begin
 AddupTotals2(lastobj,objcode,totobjq,totobjaq,totincobjv,totexpobjv,totincobjav,totexpobjav,totobjincbudv,totobjexpbudv,totobjincrbudv,totobjexprbudv,
              totrepq,totrepaq,totincrepv,totexprepv,totincrepav,totexprepav,totrepincbudv,totrepexpbudv,totrepincrbudv,totrepexprbudv,firstobjf,0);
  return;
end;
#endif
