external function string 60 AddObjectToObjectList(string,string);
external function roundmode DefaultRoundMode();
external procedure SplitEclass(string,var Array string);
external function Boolean CheckTTRPerRow(string,string,string,Boolean,var string,Integer);
external procedure AddSMRow(record SMVc,Date,string,string,string,string,val,Boolean,Boolean ,var val);
external function Integer CheckObjs(string,string,var string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure AddEuroCurncyNomTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,val,LongInt,Boolean,string,string,string,Integer);
external procedure AddEuroCurncyNomARTrRow(record TRVc,string,string,string,string,val,val,Boolean,
                                  Boolean,var val,string,val,val,val,val,val,
                                  val,val,string,LongInt,Integer,val,Date,LongInt,Boolean,string,string,string);
external function Boolean GetAccName(string,var string,Integer);

global
procedure AddEuroTrRow(record TRVc TRr,string acc,string objs,string vatcod,string comm,val valv,
                       val baserate1,val baserate2,Boolean accf,Boolean dcflag,var val totsump,Boolean negamf,string taccnumber,string tfilename,string tcode)
BEGIN  
  string 255 curncy;
  val nilv;
  
  nilv = -1;
  AddEuroCurncyNomTrRow(TRr,acc,objs,vatcod,comm,valv,accf,dcflag,totsump,curncy,nilv,nilv,nilv,baserate1,baserate2,nilv,nilv,nilv,-1,negamf,taccnumber,tfilename,tcode,0);
  RETURN;
END;

global
procedure AddEuroTrRowType(record TRVc TRr,string acc,string objs,string vatcod,string comm,val valv,
                       val baserate1,val baserate2,Boolean accf,Boolean dcflag,var val totsump,Boolean negamf,string taccnumber,string tfilename,string tcode,Integer typ)
begin  
  string 255 curncy;
  val nilv;
  Date blankd;
  
  nilv = -1;  
  AddEuroCurncyNomTrRow(TRr,acc,objs,vatcod,comm,valv,accf,dcflag,totsump,curncy,nilv,nilv,nilv,baserate1,baserate2,nilv,nilv,nilv,-1,negamf,taccnumber,tfilename,tcode,typ);
  return;
end;

global
procedure AddEuroTrRowTypeQty(record TRVc TRr,string acc,string objs,string vatcod,string comm,val valv,
                       val baserate1,val baserate2,Boolean accf,Boolean dcflag,var val totsump,Boolean negamf,string taccnumber,string tfilename,string tcode,Integer typ,
                       val qty)
begin  
  string 255 curncy;
  val nilv;
  Date blankd;
  
  nilv = -1;  
  AddEuroCurncyNomTrRow(TRr,acc,objs,vatcod,comm,valv,accf,dcflag,totsump,curncy,nilv,nilv,nilv,baserate1,baserate2,nilv,nilv,qty,-1,negamf,taccnumber,tfilename,tcode,typ);
  return;
end;

global
procedure SetTRObjectRows(var record TRVc TRr)
begin
  record CYBlock CYb;
  record ObjVc Objr;
  record ObjVc Obj2r;
  row TRVc TRrw;
  Integer i,j,rwcnt;
  string 255 errstr;
  string 60 preobj;
  Array string 20 ac;
  
  BlockLoad(CYb);
  if ((Importing==false) and (nonblank(CYb.Object))) then begin
    j = 0;
    SplitEclass(CYb.Object,ac);
    while (nonblank(ac[j])) begin
      Objr.Code = ac[j];
      if (ReadFirstMain(Objr,1,true)) then begin
        rwcnt = MatRowCnt(TRr);
        for (i=0; i<rwcnt; i=i+1) begin
          MatRowGet(TRr,i,TRrw);
          if (nonblank(TRrw.AccNumber)) then begin
            if (SetInSet(Objr.Code,TRrw.Objects)==false) then begin
              TRrw.Objects = AddObjectToObjectList(TRrw.Objects,Objr.Code);        
              if (CheckObjs(TRrw.AccNumber,TRrw.Objects,errstr)==0) then begin
                MatRowPut(TRr,i,TRrw);
              end else begin
                TRrw.Objects = Objr.Code;
                MatRowPut(TRr,i,TRrw);
              end;
            end;
          end;
        end;
      end;
      j = j + 1;
    end;
  end;
  return;
end;

// Moved TRSumup to TRVcWActionTool.hal

global
function Integer SMVc_AddRoundOffRow(var record SMVc SMr,Boolean defaultdcf,Date td,val t,var val TotSum)
begin
  Integer res;
  record AccBlock ARb;
  string 255 acc,accname;
  Boolean dcf;
  
  if (t==0) then begin
    goto LSMVc_AddRoundOffRow;
  end;
  BlockLoad(ARb);
  if (t>0) then begin
    acc = ARb.RndAcc;
    dcf = defaultdcf;
  end else begin
    acc = ARb.RndLossAcc;
    dcf = !defaultdcf;
  end;
  if (blank(acc)) then begin
    acc = ARb.RndAcc;
    dcf = defaultdcf;
  end;
  if (GetAccName(acc,accname,60)==false) then begin 
    res = 1904;
    goto LSMVc_AddRoundOffRow;
  end;
  AddSMRow(SMr,td,acc,"","",accname,t,true,dcf,TotSum);
LSMVc_AddRoundOffRow:;    
  SMVc_AddRoundOffRow = res;
  return;
end;

global
function Integer TRVc_AddRoundOffRow(var record TRVc TRr,val base1,val base2,
                                     string filename,Boolean defaultdcf,Boolean ttrf,Boolean negf,
                                     val tt,var val TotSum)
begin
  Integer res;
  record AccBlock ARb;
  string 255 acc,accname,taccnumber;
  Boolean dcf,accf;
  val t;

  t = Round(tt,DefaultRoundMode);
  if (t==0) then begin
    goto LTRVc_AddRoundOffRow;
  end;
  BlockLoad(ARb);
  if (t>0) then begin
    acc = ARb.RndAcc;
    dcf = defaultdcf;
  end else begin
    acc = ARb.RndLossAcc;
    dcf = defaultdcf;
  end;
  if (blank(acc)) then begin
    acc = ARb.RndAcc;
    dcf = defaultdcf;
  end;
  if (GetAccName(acc,accname,60)==false) then begin 
    res = 1904;
    goto LTRVc_AddRoundOffRow;
  end;
  if (ttrf) then begin
    accf = CheckTTRPerRow(filename,acc,"",dcf,taccnumber,0);
  end;
  AddEuroTrRow(TRr,acc,"","",accname,t,base1,base2,true,dcf,TotSum,negf,taccnumber,"","");
LTRVc_AddRoundOffRow:;    
  TRVc_AddRoundOffRow = res;
  return;
end;
