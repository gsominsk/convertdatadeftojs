external function roundmode SetRoundModeD(Integer);
external procedure HTArtSel(string,string, var string);
external procedure GetStockValue(string,string,var record ItemStatusVc);
external procedure GetItemLocationTurnover(string,record INVc,Boolean,Date,Date,string,string,string,string,Integer,var val);

function val FindMinLevel(record INVc INr,string location)
begin
  record MinPerLocVc MinPerLocr;
  val res;
  
  MinPerLocr.ItemCode = INr.Code;
  MinPerLocr.Location = location;
  if (ReadFirstMain(MinPerLocr,2,true)) then begin
    res = MinPerLocr.MinLevel;
  end else begin
    res = INr.MinLevel;
  end;
  FindMinLevel = res;
  return;
end;

procedure ItemLocationStatusHdr(record RcVc RepSpec,Integer x)
begin
  Integer j,cor,days;
  date startdate,enddate;
  
  StartFormat(15);
  cor = 0;
  OutString(cor,0,USetStr(17121),false);
  cor = cor + x + 125;
  OutString(cor,0,USetStr(17122),true);
  cor = cor + x + 30;
  OutString(cor,0,USetStr(17123),true);
  cor = cor + x + 30;
  if (RepSpec.flags[12]==1) then begin
    enddate = CurrentDate;
    days = GetDay(CurrentDate)-1;
    startdate = AddDay(CurrentDate,-days);
    for (j=0;j<RepSpec.long1;j=j+1) begin
      OutString(cor,0,USetStr(8661 + GetMonth(startdate)),true); // "Sale" & GetMonth(startdate),true);
      cor = cor + x + 30;
      startdate = AddMonth(startdate,-1);
    end;
    OutString(cor,0,USetStr(17124),true);
    cor = cor + x + 30;
    OutString(cor,0,USetStr(17119),true);
    cor = cor + x + 30;
  end;
  if (RepSpec.flags[14] == 1) then begin
    OutString(cor,0,USetStr(17127),true);
    cor = cor + x + 30;
  end;
  if (RepSpec.flags[15] == 1) then begin
    OutString(cor,0,USetStr(17128),true);
    cor = cor + x + 30;
  end;
  if (RepSpec.flags[13] == 1) then begin
    OutString(cor,0,USetStr(17126),true);
    cor = cor + x + 30;
  end;  
  if (RepSpec.flags[16] == 1) then begin
    OutString(cor,0,USetStr(17129),true);
  end;
    
  EndFormat;
  Gray_Divider(0,1);
end;

global
procedure ItemLocationStatusRn(record RcVc RepSpec)
begin
  record INVc INr;
  record LocationVc Locr;
  record ItemStatusVc ISp;
  String 255 tstr;
  String 20 fromart,toart,fromloc,toloc;
  Integer rw,i,j,cor,days,x;
  date startdate,enddate;
  val instock,onorder,purord,freestock,sale,minlev,totsale,cursale,average;
  val totinstock,tottotsale,totaverage,totfreestock,totonorder,totpurord;
  Boolean locfoundf,foundf,testf,firstf;
  array val sales;
  
  if (RepSpec.flags[12]==1) then begin
    x = 0;
  end else begin
    x = 30;
  end;
  
  fromart = FirstInRange(RepSpec.f1,20);
  toart =  LastInRange(RepSpec.f1,20);
  fromloc = FirstInRange(RepSpec.f2,20);
  toloc = LastInRange(RepSpec.f2,20);
  
  rw = 1;
  StartReportJob(USetStr(17120));
  HTArtSel(RepSpec.f1,"",tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  EndHeader;
  
  firstf = true;
  foundf = true;
  INr.Code = fromart;
  
  while (LoopMain(INr,1,foundf)) begin
    if (nonblank(toart) and (INr.Code>toart)) then begin foundf = false; end;
    testf = foundf;
    if (INr.Terminated==1) then begin testf = false; end;
    if (testf) then begin
      
      if (fromart<>toart) then begin
        if (firstf) then begin
          firstf = false;
        end else begin
          StartFormat(15);
          EndFormat;
          Black_Divider(0,1);
          StartFormat(15);
          EndFormat;
        end;
        StartFormat(15);
        OutString(0,0,INr.Code,false);
        OutString(120,0,INr.Name,false);
        EndFormat;
        Gray_Divider(0,1);
      end;

      ItemLocationStatusHdr(RepSpec,x);
      
      ResetLoop(Locr);
      Locr.Code = fromloc;
      locfoundf = true;
      
      totinstock = 0;
      totaverage = 0;
      tottotsale = 0;
      totfreestock = 0;
      totonorder = 0;
      totpurord = 0;
      
      for (j=0;j<RepSpec.long1;j=j+1) begin
        sales[j] = 0;
      end;
      
      while (LoopMain(Locr,1,locfoundf)) begin
        if ((nonblank(toloc)) and (Locr.Code>toloc)) then begin
          locfoundf = false;
        end;
        if (locfoundf) then begin
          GetStockValue(INr.Code,Locr.Code,ISp);
          instock   = ISp.Instock;
          onorder = ISp.OrddOut;
          purord  = ISp.POUnOKQty;
          minlev = FindMinLevel(INr,Locr.Code);
          freestock = instock - onorder;
          totfreestock = totfreestock + freestock;
          totinstock = totinstock + instock;
          totonorder = totonorder + onorder;
          totpurord = totpurord + purord;
          StartFormat(15);
          cor = 0;
          OutString(cor,0,Locr.Code & "  " & left(Locr.Name,30),false);
          cor = cor + x + 125;
          OutVal(cor,0,instock,M4UVal,true);
          cor = cor + x + 30;
          OutVal(cor,0,minlev,M4UVal,true);
          cor = cor + x + 30;
          if (RepSpec.flags[12] == 1) then begin
            enddate = CurrentDate;
            days = GetDay(CurrentDate)-1;
            startdate = AddDay(CurrentDate,-days);
            totsale = 0;
            for (j=0;j<RepSpec.long1;j=j+1) begin
              GetItemLocationTurnover(INr.Code,INr,false,startdate,enddate,Locr.Code,Locr.Code,"","",0,sale);
              OutVal(cor,0,sale,M4UVal,true);
              sales[j] = sales[j] + sale;
              totsale = totsale + sale;
              tottotsale = tottotsale + sale;
              if (j==0) then begin
                cursale = sale;
              end;
              cor = cor + x + 30;
              startdate = AddMonth(startdate,-1);
              enddate = AddDay(AddMonth(startdate,1),-1);
            end;
            average = Round(((totsale-cursale)/(RepSpec.long1-1)),SetRoundModeD(2));
            totaverage = totaverage + average;
            OutVal(cor,0,average,M4UVal,true);
            cor = cor + x + 30;
            OutVal(cor,0,totsale,M4UVal,true);
            cor = cor + x + 30;
          end;
          if (RepSpec.flags[14] == 1) then begin
            OutVal(cor,0,onorder,M4UVal,true);
            cor = cor + x + 30;
          end;
          if (RepSpec.flags[15] == 1) then begin
            OutVal(cor,0,purord,M4UVal,true);
            cor = cor + x + 30;
          end;
          if (RepSpec.flags[13] == 1) then begin
            OutVal(cor,0,freestock,M4UVal,true);
            cor = cor + x + 30;
          end;          
          if (RepSpec.flags[16] == 1) then begin
            OutVal(cor,0,INr.UPrice1,M4Val,true);
          end; 
          EndFormat;
        end;
      end;
            
      Gray_Divider(0,1);
      StartFormat(15);
      cor = 0;
      OutString(cor,0,USetStr(17119),false);
      cor = 125 + x;
      OutVal(cor,0,totinstock,M4UVal,true);
      cor = cor + x + 30;
      cor = cor + x + 30;
      if (RepSpec.flags[12] == 1) then begin
        for (j=0;j<RepSpec.long1;j=j+1) begin
          OutVal(cor,0,sales[j],M4UVal,true);
          cor = cor + x + 30;
        end;
        OutVal(cor,0,totaverage,M4UVal,true);
        cor = cor + x + 30;
        OutVal(cor,0,tottotsale,M4UVal,true);
        cor = cor + x + 30;
      end;
      if (RepSpec.flags[14] == 1) then begin
        OutVal(cor,0,totonorder,M4UVal,true);
        cor = cor + x + 30;
      end;
      if (RepSpec.flags[15] == 1) then begin
        OutVal(cor,0,totpurord,M4UVal,true);
        cor = cor + x + 30;
      end;
      if (RepSpec.flags[13] == 1) then begin
        OutVal(cor,0,totfreestock,M4UVal,true);
        cor = cor + x + 30;
      end;      
      EndFormat;      
    end;
  end;
  EndJob;
  return;
end;

