external procedure HTArtGroup(string, var string);
external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean ItemInItemGroupOrClass(string,string,string);
external procedure HTItems(string,var string);
external function roundmode SetRoundModeD(Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure ItemGetDateTurnover(string,string,string,string,string,record INVc,string,Date,Date,var val,Integer);
external procedure HT2Per(Date,Date,var string);
external procedure BuildForecastSM(var record SMVc,Date,Date,string,Boolean);

procedure PrintQty(string item,string comment,val qf,val q,val sf,val s)
begin
  val tmp;
  
  StartFormat(15);
  OutString(0,0,item,false);
  OutString(2,0,comment,false);
  OutVal(8,0,qf,M4UVal,true);
  OutVal(9,0,q,M4UVal,true);
  if (qf==0 and q!=0) then begin
    tmp = 100;
  end else begin
    tmp = (q - qf) / qf * 100;
  end;
  OutVal(1,0,tmp,M4Prcnt,true);
  EndFormat;
  return;
end;

procedure PrintSum(string item,string comment,val qf,val q,val sf,val s)
begin
  val tmp;

  StartFormat(15);
  OutString(0,0,item,false);
  OutString(2,0,comment,false);
  OutVal(8,0,sf,M4UVal,true);
  OutVal(9,0,s,M423Val,true);
  if (sf==0 and s!=0) then begin
    tmp = 100;
  end else begin
    tmp = (s - sf) / sf * 100;
  end;
  OutVal(1,0,tmp,M4Prcnt,true);
  EndFormat;
  return;
end;

procedure PrintBoth(string item,string comment,val qf,val q,val sf,val s)
begin
  val tmp;

  StartFormat(15);
  OutString(0,0,item,false);
  OutString(2,0,comment,false);
  OutVal(3,0,qf,M4UVal,true);
  OutVal(4,0,q,M4UVal,true);
  if (qf==0 and q!=0) then begin
    tmp = 100;
  end else begin
    tmp = (q - qf) / qf * 100;
  end;
  OutVal(5,0,tmp,M4Prcnt,true);
  OutVal(6,0,sf,M4UVal,true);
  OutVal(7,0,s,M423Val,true);
  if (sf==0 and s!=0) then begin
    tmp = 100;
  end else begin
    tmp = (s - sf) / sf * 100;
  end;
  OutVal(1,0,tmp,M4Prcnt,true);
  EndFormat;
  return;
end;

global
procedure SalesFCompRn(record RcVc RepSpec)
BEGIN
  record STVc STr;
  record INVc INr;
  record SMVc SMr;
  row SMVc SMrw;
  string 20 frin,toin;
  val q,s,tq,ts;
  Integer i,rwcnt;
  Boolean foundf,testf,testf2;
  string 255 tstr;
  Integer rw;
  
  StartReportJob(USetStr(16320));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (nonblank(RepSpec.LastAcc)) then begin
    Header(rw,USetStr(18201) & " " & RepSpec.LastAcc,0)
  end else begin
    Header(rw,USetStr(18204),0)
  end;
  HTItems(RepSpec.f1,tstr);
  Header(rw,tstr,1);  
  rw = rw + 1;
  if (HasItemGroups) then begin
    HTArtGroup(RepSpec.f3,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasItemClassification) then begin
    HTItemClass(RepSpec.f2,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  EndHeader;
  frin = FirstInRange(RepSpec.f1,20);
  toin = LastInRange(RepSpec.f1,20);
  SetRepCol(2,60);
  SetRepCol(3,180);
  SetRepCol(4,240);
  SetRepCol(5,300);
  SetRepCol(6,360);
  SetRepCol(7,420);
  SetRepCol(8,280);
  SetRepCol(9,380);
  switch (RepSpec.flags[1]) begin
    case 0:
      StartFormat(15);
      OutString(0,0,USetStr(16321),false);
      OutString(2,0,USetStr(16322),false);
      OutString(3,0,USetStr(16323),false);
      OutString(8,0,USetStr(16325),true);
      OutString(9,0,USetStr(16326),true);
      OutString(1,0,USetStr(16327),true);
      EndFormat;
    case 1:
      StartFormat(15);
      OutString(0,0,USetStr(16321),false);
      OutString(2,0,USetStr(16322),false);
      OutString(3,0,USetStr(16324),false);
      OutString(8,0,USetStr(16325),true);
      OutString(9,0,USetStr(16326),true);
      OutString(1,0,USetStr(16327),true);
      EndFormat;
    case 2:
      StartFormat(15);
      OutString(3,0,USetStr(16323),false);
      OutString(6,0,USetStr(16324),false);
      EndFormat;
      StartFormat(15);
      OutString(0,0,USetStr(16321),false);
      OutString(2,0,USetStr(16322),false);
      OutString(3,0,USetStr(16325),true);
      OutString(4,0,USetStr(16326),true);
      OutString(5,0,USetStr(16327),true);
      OutString(6,0,USetStr(16325),true);
      OutString(7,0,USetStr(16326),true);
      OutString(1,0,USetStr(16327),true);
      EndFormat;
  end;
  Gray_Divider(0,1);
  BuildForecastSM(SMr,RepSpec.sStartDate,RepSpec.sEndDate,RepSpec.LastAcc,true);
  rwcnt = MatRowCnt(SMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    testf = true;
    if (SMrw.RowSimStat==1) then begin
      if (nonblank(RepSpec.f1)) then begin
        if (SMrw.Objects<frin) then begin testf = false; end;
        if (SMrw.Objects>toin) then begin testf = false; end;
      end;
      if (testf) then begin
        testf = ItemInItemGroupOrClass(SMrw.Objects,RepSpec.f3,RepSpec.f2);
      end;
    end;
    if (testf) then begin
      s = 0;
      q = 0;
      if (SMrw.RowSimStat==0) then begin
        foundf = true;
        ResetLoop(INr);
        INr.Group = SMrw.Objects;
        while (LoopKey("Group",INr,1,foundf)) begin
          if (INr.Group!=SMrw.Objects) then begin
            foundf = false;
          end;
          testf2 = foundf;
          if (nonblank(RepSpec.f1)) then begin
            if (SMrw.Objects<frin) then begin testf2 = false; end;
            if (SMrw.Objects>toin) then begin testf2 = false; end;
          end;
          if (testf) then begin
            testf = ItemInItemGroupOrClass(SMrw.Objects,RepSpec.f3,RepSpec.f2);
          end;
          if (testf2) then begin
            STr.ArtCode = INr.Code;
            testf = ReadFirstMain(STr,1,true);
            if (testf==true) then begin
              ItemGetDateTurnover(INr.Code,"","","","",INr,"quant",RepSpec.sStartDate,RepSpec.sEndDate,tq,0);
              ItemGetDateTurnover(INr.Code,"","","","",INr,"salesexclvat",RepSpec.sStartDate,RepSpec.sEndDate,ts,0);
              q = q + tq;
              s = s + ts;
            end;
          end;
        end;
      end else begin
        if (ReadFirstItem(SMrw.Objects,INr,true,true)) then begin
          STr.ArtCode = SMrw.Objects;
          testf = ReadFirstMain(STr,1,true);         
          if (testf) then begin
            ItemGetDateTurnover(INr.Code,"","","","",INr,"quant",RepSpec.sStartDate,RepSpec.sEndDate,q,0);
            ItemGetDateTurnover(INr.Code,"","","","",INr,"salesexclvat",RepSpec.sStartDate,RepSpec.sEndDate,s,0);
          end;
        end;
      end;
      switch (RepSpec.flags[1]) begin
        case 0: PrintQty (SMrw.Objects,INr.Name,-round(SMrw.DebVal,SetRoundModeD(1)),q,-SMrw.CredVal,s);
        case 1: PrintSum (SMrw.Objects,INr.Name,-round(SMrw.DebVal,SetRoundModeD(1)),q,-SMrw.CredVal,s);
        case 2: PrintBoth(SMrw.Objects,INr.Name,-round(SMrw.DebVal,SetRoundModeD(1)),q,-SMrw.CredVal,s);
      end;
    end;
  end;
  Gray_Divider(0,1);
  EndJob;
  RETURN;
END;

