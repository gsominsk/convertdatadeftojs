external function Boolean HasContactClassification();
external function Boolean HasCategories();
external procedure HTCustCat(string,var string);
external procedure HTCustClass(string,var string);
external function Boolean ContactInGroupClass(string,string,string,string,string,string);
external procedure HTDetailLevel(Integer, var string);
external procedure HT2Per(Date, Date,var string);
external procedure HTNr(Integer,Integer,LongInt,LongInt,var string);

global 
procedure GoodsOutRn(record RcVc RepSpec)
begin
  record DispatchVc Disr;
  record CUVc Cur;
  row DispatchVc Disrw;
  integer rw,rwc;
  string 20 ckey;
  string 255 tstr;
  string 20 frdate;
  string 20 todate;
  boolean printf;
  boolean testf;

  StartReportjob(USetStr(11580));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  switch (RepSpec.flags[5]) begin
  case 0:
    ckey = "SerNr";
    tstr = USetStr(11581);
    Disr.SerNr = "";
  case 1:
    ckey = "TransDate";
    tstr = USetStr(11582);
    Disr.TransDate = RepSpec.sStartDate;
  case 2:
    ckey = "LocOK";
    tstr = "Lacation";
    Disr.Location = RepSpec.f3;
  end;
  tstr = USetStr(11586) & ":  " & tstr;
  header(rw,tstr,1);
  rw = rw + 1;
  if (repSpec.flags[1] == 1) then begin
    tstr = USetStr(11587);
    header(rw,tstr,1);
    rw = rw + 1;
  end;
  HTDetailLevel(RepSpec.ArtMode,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (HasCategories) then begin
    HTCustCat(RepSpec.f4,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasContactClassification) then begin
    HTCustClass(RepSpec.f5,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;  
  endHeader;
 
  setrepcol(2,50);
  setrepCol(3,200);
  SetRepCol(4,300);
  SetRepCol(5,350);
  SetrepCol(6,110);
  SetRepCol(7,450);
 
  StartFormat(20);
  OutString(0,0,USetStr(11584),false);
  OutString(50,0,USetStr(2603),false);
  OutString(120,0,USetStr(11583),false);
  OutString(190,0,USetStr(11585),false);
  OutString(320,0,USetStr(2607),false);
 // OutString(1,0,USetStr(11595),true);
  EndFormat;
  if RepSpec.ArtMode==1 then begin
    StartFormat(15);
    OutString(20,0,USetStr(11588),false);
    OutString(100,0,USetStr(11589),false);
 //   OutString(300,0,USetStr(11593),false);
 //   OutString(350,0,USetStr(11594),false);
    OutString(450,0,USetStr(11592),true);
    EndFormat;
    StartFormat(5);
    Black_divider(0,1);
    EndFormat;
  end;
  
  if (RepSpec.ArtMode==0) then begin
    Gray_Divider(0,1);
  end;
  while (loopKey(ckey,Disr,1,true)) begin
    printf = true;
    if (RepSpec.flags[1] == 0) and (Disr.OKFlag == 0) then begin
      printf = false;
    end;
    if (nonblank(RepSpec.f2)) then begin 
      CUr.Code = RepSpec.f2;
      if (readfirstmain(CUr,1,true)) then begin
        if (DIsr.CustCode != Cur.Code) then begin
          printf = false;
        end;
      end;
    end;
    if (printf) then begin
      printf = ContactInGroupClass(DIsr.CustCode,RepSpec.f4,RepSpec.f5,"CUST","","");
    end;        
    if (RepSpec.sStartDate > Disr.TransDate or RepSpec.sEndDate < Disr.TransDate) then begin
      printf = false;
    end;
    if (nonblank(RepSpec.f3) and RepSpec.f3 != Disr.Location) then begin
      printf = false;
    end;
    
    if (printf) then begin
      rwc = matrowcnt(Disr);
      if (RepSpec.ArtMode == 1) then begin
        Startformat(15);
        OutString(0,"DblDispatchVc",Disr.SerNr,false);
        OutString(50,0,Disr.TransDate,false);
        OutString(120,0,Disr.Location,false);
        OutString(190,0,Disr.Addr0,false);
        OutString(320,0,Disr.Comment,false);
      endformat;
      end;
      for (rw = 0; rw < rwc; rw = rw + 1) begin
        MatrowGet(Disr,rw,Disrw);
        if (RepSpec.ArtMode == 1) then begin
          Startformat(15);
          OutString(20,0,Disrw.ArtCode,false);
          OutString(100,0,Disrw.Spec,false);
          OutString(300,0,Disrw.SerialNr,false);
          OutString(450,0,DIsrw.Quant,true);
          endformat;  
        end;
      end;    
      if (RepSpec.ArtMode == 0) then begin
        Startformat(15);
        OutString(0,"DblDispatchVc",Disr.SerNr,false);
        OutString(50,0,Disr.TransDate,false);
        OutString(120,0,Disr.Location,false);
        OutString(190,0,Disr.Addr0,false);
        OutString(300,0,Disr.Comment,false);
        endformat;
      end else begin
        gray_divider(300,1);
      end;
    end;  
  end;

 // Black_divider(0,1);
  Endjob;

  return;
end;



global 
procedure GoodsInRn(record RcVc RepSpec)
begin

  record OffHireVc OffHirer;
  record CUVc Cur;
  row OffHireVc OffHirerw;
  integer rw,rwc;
  string 20 ckey;
  string 255 tstr;
  string 20 frdate;
  string 20 todate;
  boolean printf;
  boolean testf;
  
  // afr = FirstInRange(RepSpec.f1,30);
 // ato = LastInRange(RepSpec.f1,30);

  StartReportjob(USetStr(11597));

  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (repSpec.flags[1] == 1) then begin
    tstr = USetStr(11587);
    header(rw,tstr,1);
    rw = rw + 1;
  end;
 
  switch (RepSpec.flags[5]) begin
  case 0:
    ckey = "SerNr";
    tstr = USetStr(11581);
    OffHirer.SerNr = "";
  case 1:
    ckey = "TransDate";
    tstr = USetStr(11582);
    OffHirer.TransDate = RepSpec.sStartDate;
  case 2:
    ckey = "LocOK";
    tstr = USetStr(11583);
    OffHirer.Location = RepSpec.f3;
  end;
  tstr = USetStr(11586) & ":  " & tstr;
  header(rw,tstr,1);
  rw = rw + 1;
  HTDetailLevel(RepSpec.ArtMode,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (HasCategories) then begin
    HTCustCat(RepSpec.f4,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasContactClassification) then begin
    HTCustClass(RepSpec.f5,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;  
  endHeader;

  StartFormat(20);
  OutString(0,0,USetStr(11584),false);
  OutString(50,0,USetStr(2603),false);
  OutString(120,0,USetStr(11583),false);
  OutString(190,0,USetStr(11585),false);
  OutString(320,0,USetStr(2607),false);
//  OutString(1,0,USetStr(11595),true);
  EndFormat;

  if RepSpec.ArtMode==1 then begin
    StartFormat(15);
    OutString(11,0,USetStr(11588),false);
    OutString(100,0,USetStr(11589),false);
    OutString(300,0,USetStr(11590),false);
   // OutString(310,0,USetStr(11591),false);
    OutString(1,0,USetStr(11592),true);
    EndFormat;
    StartFormat(5);
    Black_divider(0,1);
    EndFormat;
  end;
  
  if (RepSpec.ArtMode==0) then begin
    Gray_Divider(0,1);
  end;
  while (loopKey(ckey,OffHirer,1,true)) begin
    printf = true;
    if (RepSpec.flags[1] == 0) and (OffHirer.OKFlag == 0) then begin
      printf = false;
    end;
    if (nonblank(RepSpec.f2)) then begin 
      CUr.Code = RepSpec.f2;
      if (readfirstmain(CUr,1,true)) then begin
        if (OffHirer.CustCode != Cur.Code) then begin
          printf = false;
        end;
      end;
    end;
    if (printf) then begin
      printf = ContactInGroupClass(OffHirer.CustCode,RepSpec.f4,RepSpec.f5,"CUST","","");
    end;    
    if (RepSpec.sStartDate > OffHirer.TransDate or RepSpec.sEndDate < OffHirer.TransDate) then begin
      printf = false;
    end;
    if (nonblank(RepSpec.f3) and RepSpec.f3 != OffHirer.Location) then begin
      printf = false;
    end;
    
    if (printf) then begin
      rwc = matrowcnt(OffHirer);
      if (RepSpec.ArtMode == 1) then begin
        Startformat(15);
        OutString(0,"DblOffHireVc",OffHirer.SerNr,false);
        OutString(50,0,OffHirer.TransDate,false);
        OutString(120,0,OffHirer.Location,false);
        OutString(190,0,OffHirer.Addr0,false);
        OutString(320,0,OffHirer.Comment,false);
        endformat;
      end;
      for (rw = 0; rw < rwc; rw = rw + 1) begin
        MatrowGet(OffHirer,rw,OffHirerw);
        if (RepSpec.ArtMode == 1) then begin
          Startformat(15);
          OutString(11,0,OffHirerw.ArtCode,false);
          OutString(100,0,OffHirerw.Spec,false);
          OutString(300,0,OffHirerw.SerialNr,false );
//          OutString(310,0,OffHirerw.Value,false);
          OutString(1,0,OffHirerw.Quant,true);
          endformat;  
        end;
      end;    
      if (RepSpec.ArtMode == 0) then begin
        Startformat(15);
        OutString(0,"DblOffHireVc",OffHirer.SerNr,false);
        OutString(50,0,OffHirer.TransDate,false);
        OutString(120,0,OffHirer.Location,false);
        OutString(190,0,OffHirer.Addr0,false);
        OutString(300,0,OffHirer.Comment,false);
        endformat;
      end else begin
        gray_divider(250,1);
      end;
    end;  
  end;

  Endjob;

  return;
end;

global 
procedure INTransferRn(record RcVc RepSpec)
begin

  record INTransferVc INTransferr;
  record CUVc Cur;
  row INTransferVc INTransferrw;
  integer rw,rwc;
  string 20 ckey;
  string 255 tstr;
  string 20 frdate;
  string 20 todate;
  boolean printf;
  boolean testf;
  
  // afr = FirstInRange(RepSpec.f1,30);
 // ato = LastInRange(RepSpec.f1,30);

  StartReportjob(USetStr(11596));

  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (repSpec.flags[1] == 1) then begin
    tstr = USetStr(11587);
    header(rw,tstr,1);
    rw = rw + 1;
  end;
 
  switch (RepSpec.flags[5]) begin
  case 0:
    ckey = "SerNr";
    tstr = USetStr(11581);
    INTransferr.SerNr = "";
  case 1:
    ckey = "TransDate";
    tstr = USetStr(11582);
    INTransferr.TransDate = RepSpec.sStartDate;
  case 2:
    ckey = "LocOK";
    tstr = USetStr(11583);
    INTransferr.Location = RepSpec.f3;
  end;
  tstr = USetStr(11586) & tstr;
  header(rw,tstr,1);
  rw = rw + 1;
  HTDetailLevel(RepSpec.ArtMode,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  endHeader;

  StartFormat(20);
  OutString(0,0,USetStr(11584),false);
  OutString(50,0,USetStr(2603),false);
  OutString(130,0,USetStr(11583),false);
//  OutString(155,0,USetStr(11585),false);
  OutString(300,0,USetStr(2607),false);
//  OutString(1,0,USetStr(11595),true);
  EndFormat;

  if RepSpec.ArtMode==1 then begin
    StartFormat(15);
    OutString(11,0,USetStr(11588),false);
    OutString(100,0,USetStr(11589),false);
    OutString(280,0,USetStr(11590),true);
    OutString(310,0,USetStr(11591),false);
    OutString(370,0,USetStr(11592),false);
    EndFormat;
    StartFormat(5);
    Black_divider(0,1);
    EndFormat;
  end;
  
  if (RepSpec.ArtMode==0) then begin
    Gray_Divider(0,1);
  end;
  while (loopKey(ckey,INTransferr,1,true)) begin
    printf = true;
/*
    if (RepSpec.flags[1] == 0) and (INTransferr.OKFlag == 0) then begin
      printf = false;
    end;
*/
    if (RepSpec.sStartDate > INTransferr.TransDate or RepSpec.sEndDate < INTransferr.TransDate) then begin
      printf = false;
    end;
    if (nonblank(RepSpec.f3) and RepSpec.f3 != INTransferr.Location) then begin
      printf = false;
    end;
    
    if (printf) then begin
      rwc = matrowcnt(INTransferr);
      if (RepSpec.ArtMode == 1) then begin
        Startformat(15);
        OutString(0,"DblINTransferVc",INTransferr.SerNr,false);
        OutString(50,0,INTransferr.TransDate,false);
        OutString(130,0,INTransferr.Location,false);
//        OutString(150,0,INTransferr.Addr0,false);
        OutString(300,0,left(INTransferr.Comment,30),false);
        endformat;
        for (rw = 0; rw < rwc; rw = rw + 1) begin
          MatrowGet(INTransferr,rw,INTransferrw);
          Startformat(15);
          OutString(11,0,INTransferrw.ArtCode,false);
          OutString(100,0,INTransferrw.Spec,false);
          OutString(280,0,INTransferrw.SerialNr,true );
          OutString(310,0,INTransferrw.Value,false);
          OutString(370,0,INTransferrw.Quant,false);
          endformat;  
        end;
      end;    
      if (RepSpec.ArtMode == 0) then begin
        Startformat(15);
        OutString(0,"DblINTransferVc",INTransferr.SerNr,false);
        OutString(50,0,INTransferr.TransDate,false);
        OutString(130,0,INTransferr.Location,false);
//        OutString(150,0,INTransferr.Addr0,false);
        OutString(300,0,left(INTransferr.Comment,30),false);
        endformat;
      end else begin
        gray_divider(250,1);
      end;
    end;  
  end;

  Endjob;

  return;
end;
