external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean ItemInItemGroupOrClass(string,string,string);
external procedure FindStockValue(string,string,var record ItemStatusVc);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure ExpandStructure(record INVc,string,string,Integer,var val,var val,Boolean);
external procedure HTArtSel(string,string, var string);
external procedure HTDetailLevel(Integer, var string);
external procedure HTSort1(Integer, var string);
external procedure ExpandProduction(string,string,string,Integer,var val,var val,Boolean,Integer);

procedure GetStockValue(string item,string location,var record ItemStatusVc ISp)
begin
  record INVc INr;
  record MainStockBlock MainStockRec;
  val stock,ord;

  BlockLoad(MainStockRec);
  if (ReadFirstItem(item,INr,false,false)) then begin
    if ((INr.ItemType==2) and (nonblank(INr.Recepy))) then begin
      ExpandStructure(INr,INr.Recepy,location,MainStockRec.UpdateAvailable,stock,ord,false);
      ISp.Instock = stock;
//      ISp.OrddOut = ord;  on order is increased if compnent in on orders
      ISp.Code = item;
      ISp.Location = location;
    end else begin
      FindStockValue(item,location,ISp);
    end;
  end;
  return;
end;

global
procedure MaxprodRn(record RcVc RepSpec)
BEGIN
  record INVc INr;
  record ITVc ITr;
  record ItemStatusVc ISr;
  Boolean TrHs,testf;
  val sum1,maxp,t;
  string 255 fromart,toart;
  string 255 frcc,tocc;
  string 255 lastgroup;
  string 255 ckey,tstr;
  Boolean itemout;
  Integer keys,rw;

  fromart = FirstInRange(RepSpec.f1,20);
  toart = LastInRange(RepSpec.f1,20);
  frcc = FirstInRange(RepSpec.f3,20);
  tocc = LastInRange(RepSpec.f3,20);
  itemout = false;
  lastgroup = "";
  StartReportJob(USetStr(5021));
   rw = 1;    
   HTArtSel(RepSpec.f1,RepSpec.f3,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   if (HasItemClassification) then begin
     HTItemClass(RepSpec.f2,tstr);
     if (nonblank(tstr)) then begin
       Header(rw,tstr,1);
       rw = rw + 1;
     end;
   end;   
   HTDetailLevel(RepSpec.ArtMode,tstr);
   Header(rw,tstr,0);
   HTSort1(RepSpec.flags[2],tstr);
   Header(rw,tstr,1);
   rw = rw + 1;
   if (RepSpec.flags[3]==1) then begin
     tstr = USetStr(6651);
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
  EndHeader;
  SetRepCol(2,90);
  SetRepCol(3,288);
  SetRepCol(4,384);
  StartFormat(15);
  OutString(0,0,USetStr(5022),false);
  OutString(2,0,USetStr(5023),false);
  OutString(300,0,USetStr(5024),true);
  OutString(360,0,USetStr(5025),true);
  OutString(440,0,USetStr(5026),true);
  EndFormat;
  if (RepSpec.flags[2]==0) then begin
    INr.Code = fromart;
    ckey = "Code";
    keys = 1;
  end else begin
    INr.Group = frcc;
    INr.Code = fromart;
    ckey = "Group";
    keys = 2;
  end;
  Gray_Divider(0,1);
  TrHs = true;
  while (LoopKey(ckey,INr,keys,TrHs==true)) begin
    testf = false;
    if (TrHs) then begin
      if (RepSpec.flags[2]==0) then begin
        if (nonblank(toart)) then begin
          if (INr.Code>toart) then begin
            TrHs = false;
          end;
        end;    
      end else begin
        if (nonblank(RepSpec.f3)) then begin
          if (INr.Group>tocc) then begin
            TrHs = false;
          end;
        end;    
      end;
    end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.AccStr)) then begin
        if (INr.Department!=RepSpec.AccStr) then begin
          testf = false;
        end;
      end;    
      if ((INr.ItemType<1) or (INr.ItemType>2)) then begin testf = false; end;
      if (blank(INr.Recepy)) then begin testf = false; end;
      if (nonblank(toart)) then begin
        if (INr.Code>toart) then begin
          testf = false;
        end;
      end;    
      if (nonblank(RepSpec.f3)) then begin
        if (INr.Group>tocc) then begin
          testf = false;
        end;
      end; 
      if (testf) then begin
        testf = ItemInItemGroupOrClass(INr.Code,"",RepSpec.f2);
      end;         
    end;
    if (testf) then begin
      if (RepSpec.flags[2]==1) then begin
        if (lastgroup!=INr.Group) then begin
          if (itemout==true) then begin
            Gray_Divider(0,1);
          end;  
          StartFormat(15);
          OutString(20,0,INr.Group,false);
          ITr.Code = INr.Group;
          if (ReadFirstMain(ITr,1,true)) then begin
            OutString(100,0,ITr.Comment,false);
          end;    
          EndFormat;
          Gray_Divider(0,1);
          lastgroup = INr.Group;
        end;
      end;
      itemout = true;
      GetStockValue(INr.Code,RepSpec.FirstAcc,ISr);      
      if (RepSpec.ArtMode==0) then begin
        t = -1;
        ExpandProduction(INr.Code,RepSpec.FirstAcc,INr.Recepy,1,maxp,t,false,RepSpec.flags[1]);
        StartFormat(15);
        OutString(0,0,INr.Code,false);
        OutString(2,0,INr.Name,false);
        OutVal(300,0,ISr.Instock,M4UVal,true);
        OutVal(360,0,ISr.OrddOut,M4UVal,true);
//        OutVal(430,0,maxp,M4UVal,true);
        OutString(430,0,ValToString(maxp,M4UVal,"",".",1),true);
        EndFormat;
      end else begin
        StartFormat(15);
        OutString(0,0,INr.Code,false);
        OutString(2,0,INr.Name,false);
        OutString(250,0,USetStr(5024),true);
        OutString(300,0,USetStr(5025),true);
        OutString(360,0,USetStr(5027),true);
        OutString(430,0,USetStr(5028),true);
        EndFormat;
        t = -1;
        ExpandProduction(INr.Code,RepSpec.FirstAcc,INr.Recepy,1,maxp,t,true,RepSpec.flags[1]);
        Black_Divider(2,1);
        StartFormat(15);
        OutVal(300,0,ISr.Instock,M4UVal,true);
        OutVal(360,0,ISr.OrddOut,M4UVal,true);
//        OutVal(430,0,maxp,M4UVal,true);
        OutString(430,0,ValToString(maxp,M4UVal,"",".",1),true);
        EndFormat;
        Gray_Divider(0,1);
      end;
    end;
  end;
  Gray_Divider(0,1);
  EndJob; 
  RETURN;
END;
