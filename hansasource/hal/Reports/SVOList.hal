external function Boolean HasMultiLocations();
external procedure HTLocations(string, string, var string);
external procedure HTSOrdStatus(Integer, Integer, Integer,var string);
external procedure HTWOrder(longint, longint,var string);
external procedure HTDetailLevel(Integer,var string);
external procedure HTCusts(string, string,var string);
external procedure HTStdProb(string,var string );
external procedure HT2Per(Date, Date , var string);

procedure HTSWOrdStat(Integer notm,Integer parm,Integer mad, var string res)
begin
  string 255 t2;

  res = "";
  if (notm==1) then begin
    t2 = USetStr(7746);
    res = res & t2;
  end;
  if (parm==1) then begin
    t2 = USetStr(7747);
    if (nonblank(res)) then begin
      res = res & " - ";
    end;
    res = res & t2;
  end;
  if (mad==1) then begin
    t2 = USetStr(7748);
    if (nonblank(res)) then begin
      res = res & " - ";
    end;
    res = res & t2;
  end;
return;
end;

procedure CheckWORow(record SVOVc SVOp, var Boolean made, var Boolean notmade)
begin
  Integer rwcnt,i;
  row SVOVc SVOrw;
  Boolean res;
  record WOVc WOr;

  rwcnt = MatRowCnt(SVOp);
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(SVOp,i,SVOrw);
    if (SVOrw.WOSerNr==-1) then begin
      notmade = true;
    end else begin
      WOr.SerNr = SVOrw.WOSerNr;
      if (ReadFirstMain(WOr,1,true)) then begin
        if (WOr.Closed==3) then begin
          made = true;
        end;
        if ((WOr.Closed==0) or (WOr.Closed==2)) then begin
          notmade = true;
        end;
      end;
    end;
  end;
return;
end;

procedure RepOrder(record SVOVc SVOp,Boolean showproblemf)
begin
  Integer i,rwcnt;
  row SVOVc SVOrw;
  record StandProblemVc STPr;

  StartFormat(15);
  OutString(0,"DblSVOVc",SVOp.SerNr,false);
  OutDate(130,0,SVOp.TransDate,false);
  OutString(220,0,SVOp.PayDeal,false);
  EndFormat;
  StartFormat(15);
  OutString(50,0,SVOp.CustCode,false);
  OutString(150,0,SVOp.Addr0,false);
  OutString(400,0,SVOp.Phone,false);
  EndFormat;
  StartFormat(15);
  OutString(50,0,SVOp.CustCat,false);
  OutString(200,0,SVOp.Addr1,false);
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(50,0,SVOp.OurContact,false);
  OutString(200,0,SVOp.Addr2,false);
  EndFormat;
  if (nonblank(SVOp.Addr3)) then begin
    StartFormat(15);
    OutString(200,0,SVOp.Addr3,false);
    EndFormat;
  end;
  if (nonblank(SVOp.CustContact)) then begin
    StartFormat(15);
    OutString(200,0,SVOp.CustContact,false);
    EndFormat;
  end;
  rwcnt = MatRowCnt(SVOp);
  if (rwcnt>0) then begin
    StartFormat(15);
    OutString(20,0,USetStr(12750),false);
    OutString(100,0,USetStr(12751),true);
    OutString(110,0,USetStr(12752),false);
    OutString(270,0,USetStr(12753),false);
    OutString(410,0,USetStr(12754),true);
    OutString(440,0,USetStr(12755),true);
    OutString(480,0,USetStr(12756),true);
    EndFormat;
    Gray_Divider(20,1);
  end;
  
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(SVOp,i,SVOrw);
    if (SVOrw.stp==1) then begin
      StartFormat(15);
      OutString(20,0,SVOrw.ArtCode,false);
      OutVal(100,0,SVOrw.Quant,M40Val,true);
      OutString(110,0,SVOrw.Spec,false);
      OutString(270,0,SVOrw.SerialNr,false);
      OutString(410,0,SVOrw.Price,true);
      OutString(440,0,SVOrw.VATCode,true);
      OutLongInt(480,0,SVOrw.WOSerNr,true);
      EndFormat;
      if (showproblemf) then begin
        STPr.Code = SVOrw.StandProblem;
        if (ReadFirstMain(STPr,1,true)) then begin
          StartFormat(15);
          OutString(200,"DblStandProblemVc",STPr.Code,false);
          OutString(250,0,STPr.ShortDesc,false);
          EndFormat;
          if nonblank(STPr.Comment1) then begin
            StartFormat(15);
            OutString(250,0,STPr.Comment1,false);
            EndFormat;
          end;
          if nonblank(STPr.Comment2) then begin
            StartFormat(15);
            OutString(250,0,STPr.Comment2,false);
            EndFormat;
          end;
          if nonblank(STPr.Comment3) then begin
            StartFormat(15);
            OutString(250,0,STPr.Comment3,false);
            EndFormat;
          end;
        end;
      end;                  
    end;
  end;
  Black_Divider(300,1);
  StartFormat(15);
  if (SVOp.ExportFlag!=0) then begin
    OutString(20,0,USetStr(2568),false);
  end;
  OutString(100,0,SVOp.Objects,false);
  OutString(330,0,SVOp.TotCost,true);
  OutString(410,0,SVOp.TotPrice,true);
  EndFormat;
  return;
end;

function Boolean CheckIfPartInvoiced(record SVOVc SVOr)
begin
  Boolean res;
  row SVOVc SVOrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(SVOr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SVOr,i,SVOrw);
    if (SVOrw.Invd!=0) then begin
      res = true;
      goto LCheckIfPartInvoiced;
    end;
  end;
LCheckIfPartInvoiced:;  
  CheckIfPartInvoiced = res;
  return;
end;

global
procedure SVOListRn(record RcVc RepSpec)
begin
  record SVOVc SVOr;
  Boolean TrHs;
  Boolean testf;
  val iv;
  val TotSum;
  LongInt afr;
  LongInt ato;
  string 255 tstr;
  Integer rw;
  Boolean womade;
  Boolean wonotmade;

  afr = FirstInRange(RepSpec.f1,30);
  ato = LastInRange(RepSpec.f1,30);
  rw = 1;
  TotSum = 0;
  StartReportJob(USetStr(7620));
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (HasMultiLocations) then begin 
    HTLocations(RepSpec.FirstAcc,RepSpec.FirstAcc,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;   
  end;
  HTSOrdStatus(RepSpec.flags[2],RepSpec.flags[3],RepSpec.flags[1],tstr);
  Header(rw,tstr,0);
  HTWOrder(afr,ato,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;  
  HTSWOrdStat(RepSpec.flags[4],RepSpec.flags[5],RepSpec.flags[6],tstr);
  Header(rw,tstr,0);
  rw = rw + 1;
  if (nonblank(RepSpec.f2)) then begin
    string 20 frc,toc;
    frc = FirstInRange(RepSpec.f2,20);
    toc = LastInRange(RepSpec.f2,20);
    HTCusts(frc,toc,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (RepSpec.ArtMode==2) then begin
    tstr = USetStr(5127);
  end else begin
    HTDetailLevel(RepSpec.ArtMode,tstr);
  end;
  Header(rw,tstr,0);
  if (nonblank(RepSpec.AccStr)) then begin
    tstr = USetStr(1825);
    tstr = tstr & RepSpec.AccStr;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.TransStr)) then begin
    HTStdProb(RepSpec.TransStr,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  EndHeader;
  if ((RepSpec.ArtMode==2) or (RepSpec.ArtMode==0)) then begin
    StartFormat(15);
    OutString(0,0,USetStr(2562),false);
    OutString(60,0,USetStr(2563),false);
    OutString(140,0,USetStr(2564),false);
    OutString(1,0,USetStr(2567),true);
    EndFormat;
  end;
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
    OutString(0,0,USetStr(2562),false);
    OutString(130,0,USetStr(2563),false);
    EndFormat;
  end;
  SVOr.SerNr = afr;
  if (RepSpec.ArtMode==0) then begin
    Gray_Divider(0,1);
  end;
  TrHs = true;
  while (LoopMain(SVOr,1,TrHs)) begin
    if (ato <> -1) then begin
      if (SVOr.SerNr > ato) then begin
      TrHs = false;
      end;
    end;
    if (TrHs) then begin
      testf = false;
      if (RepSpec.flags[3]==1) then begin /* Completed  */
        if ((SVOr.DoneMark<>0) or (SVOr.InvFlag!=0)) then begin
          testf = true;
        end;
      end;
      if (RepSpec.flags[2]==1) then begin /* Part Invoiced */
        if (testf==false) and (SVOr.InvFlag==0) then begin
          if (CheckIfPartInvoiced(SVOr)) then begin
            testf = true;
          end;
        end;
      end;
      if (RepSpec.flags[1]==1) then begin /* Not Completed */
        if (testf==false) and (SVOr.InvFlag==0) then begin
          if (CheckIfPartInvoiced(SVOr)==false) then begin
            testf = true;
          end;
        end;
      end;
      if (RepSpec.flags[7]==0) then begin /* Not Completed  */
        if (SVOr.DoneMark==0) then begin testf = false; end;
      end;
      if (RepSpec.flags[8]==0) then begin /* Completed  */
        if (SVOr.DoneMark!=0) then begin testf = false; end;
      end;
      if (nonblank(RepSpec.FirstAcc)) then begin  /* Location  */
        if (SVOr.ServLocation!=RepSpec.FirstAcc) then begin testf = false; end;
      end;    
      if (testf) then begin    
        if (RepSpec.flags[5]==1) then begin /* WO Part Made */
          testf = false;
          womade    = false;
          wonotmade = false;
          CheckWORow(SVOr, womade, wonotmade);
          if ((wonotmade==true) and (womade==true)) then begin
            testf = true;
          end;
        end;
        if (RepSpec.flags[4]==1) and (!testf) then begin /* WO Not Made */
          testf = false;
          womade    = false;
          wonotmade = false;
          CheckWORow(SVOr, womade, wonotmade);
          if ((wonotmade==true) and (womade==false)) then begin
            testf = true;
          end;
        end;        
        if (RepSpec.flags[6]==1) and (!testf) then begin /* WO Made */
          testf = false;
          womade    = false;
          wonotmade = false;
          CheckWORow(SVOr, womade, wonotmade);
          if ((wonotmade==false) and (womade==true)) then begin
            testf = true;
          end;
        end;        
      end;
      if (nonblank(RepSpec.f2) and (RepSpec.f2<>SVOr.CustCode)) then begin
        testf = false;
      end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (RepSpec.AccStr <> SVOr.OrderClass) then begin
          testf = false;
        end;
      end;
      if ((SVOr.TransDate < RepSpec.sStartDate) or (SVOr.TransDate > RepSpec.sEndDate)) then begin
        testf = false;
      end;
      if (testf) then begin
        if ((RepSpec.ArtMode==0) or (RepSpec.ArtMode==1)) then begin
          iv=SVOr.TotPrice;
        end;
        if (RepSpec.ArtMode==2) then begin
/*          iv = SVOr.Sum1;*/
        end;
        TotSum = TotSum + iv;
        if (RepSpec.ArtMode==1) then begin
          Gray_Divider(0,1);
          RepOrder(SVOr,RepSpec.flags[7]!=0);
        end;
        if ((RepSpec.ArtMode==2) or (RepSpec.ArtMode==0)) then begin
          StartFormat(15);
          OutString(0,"DblSVOVc",SVOr.SerNr,false);
          OutDate(60,0,SVOr.TransDate,false);
          OutString(140,0,SVOr.Addr0,false);
          OutVal(440,0,iv,M4VAl,true);
          EndFormat;
        end;
      end;
    end;
  end;
  Gray_Divider(0,1);
  EndJob;
  return;
end;

