#ifdef HAL

external procedure HTArtGroup(string, var string);
external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean ItemInItemGroupOrClass(string,string,string);
external procedure HTProjects(string,string,var string);
external procedure HTDetailLevel(Integer, var string);
external procedure HTQuantities(Integer,var string);
external procedure HT2Per(Date, Date , var string);

procedure HTItems(string frin,string toin,var string tstr)
begin
  string 255 t2;
  
  if (nonblank(frin)) then begin
    if (frin==toin) then begin
      tstr = USetStr(2463);
      tstr = tstr & ": ";
      tstr = tstr & frin;    
    end else begin
      tstr = USetStr(8661);
      tstr = tstr & ": ";
      tstr = tstr & frin;
      tstr = tstr & ":";
      tstr = tstr & toin;
    end;  
  end else begin
    tstr = USetStr(2336);
  end;  
return;
end;

procedure PrintPRPOHeader(record RcVc RepSpec)
BEGIN
  Integer rw;
  string 255 tstr;
  string 20 frpr,topr;
  string 20 frin,toin;

  frpr = FirstInRange(RepSpec.f1,20);
  topr = LastInRange(RepSpec.f1,20);  
  frin = FirstInRange(RepSpec.f2,20);
  toin = LastInRange(RepSpec.f2,20);  
  rw = 1;
  HTProjects(frpr,topr,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTDetailLevel(RepSpec.ArtMode,tstr);  
  Header(rw,tstr,0);  
  HTItems(frin,toin,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (HasItemGroups) then begin
    HTArtGroup(RepSpec.f3,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasItemClassification) then begin
    HTItemClass(RepSpec.f4,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;  
  HTQuantities(RepSpec.flags[1],tstr);  
  Header(rw,tstr,0);  
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw, tstr, 1);
  rw = rw + 1;    
  RETURN;
END;

procedure FindArtCodeIVDetail(record RcVc RepSpec,string artcode,string prcode,var val res,Integer flags1)
BEGIN
  record TBIVVc TBIVr;
  Boolean found,testf;
  
  res = blankval;
  found = true;
  TBIVr.PRCode = prcode;
  TBIVr.ArtCode = artcode;
  while (LoopKey("ArtCode",TBIVr,2,found)) begin
    testf = true;
    if (TBIVr.PRCode!=prcode) then begin found = false; end;
    if (TBIVr.ArtCode!=artcode) then begin found = false; end;
    if (TBIVr.Invoice==-1) then begin testf = false; end;
    if ((DateInRange(TBIVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) and (nonblankdate(TBIVr.TransDate))) then begin
      testf = false;
    end;    
    if (found and testf) then begin
      if (flags1==0) then begin 
        res = res + TBIVr.Sum;
      end;        
      if (flags1==1) then begin 
        res = res + TBIVr.InvQty;
      end;            
    end;
  end;
  RETURN;
END;

procedure FindArtCodeVIDetail(record RcVc RepSpec,string artcode,string prcode,var val res,Integer flags1)
BEGIN
  record TBIVVc TBIVr;
  Boolean found,testf;
  
  res = blankval;
  found = true;
  TBIVr.PRCode = prcode;
  TBIVr.oVc = 2;
  while (LoopMain(TBIVr,2,found)) begin
    testf = true;
    if (TBIVr.oVc!=2) then begin found = false; end;
    if (TBIVr.PRCode!=prcode) then begin found = false; end;
    if (TBIVr.ArtCode!=artcode) then begin testf = false; end;
    if ((DateInRange(TBIVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) and (nonblankdate(TBIVr.TransDate))) then begin
      testf = false;
    end;
    if (found and testf) then begin
      if (flags1==0) then begin 
        res = res + TBIVr.Sum;
      end;        
      if (flags1==1) then begin 
        res = res + TBIVr.InvQty;
      end;        
    end;
  end;  
  RETURN;
END;


procedure FindArtCodeBudget(record RcVc RepSpec,string artcode,string prcode,var val res,Integer flags1)
BEGIN
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  Integer i,rwcnt;

  res = blankval;
  TBBUr.PRCode = prcode;
  if (ReadFirstMain(TBBUr,1,true)) then begin
    if ((DateInRange(TBBUr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)) or (blankdate(TBBUr.TransDate))) then begin
      rwcnt = MatRowCnt(TBBUr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(TBBUr,i,TBBUrw);
        if (TBBUrw.ArtCode==artcode) then begin     
          if (flags1==0) then begin 
            res = res + TBBUrw.Sum;
          end;  
          if (flags1==1) then begin 
            res = res + TBBUrw.Qty;
          end;  
        end;
      end;  
    end;  
  end;  
  
  RETURN;
END;

procedure FindBudgetTotalOverview(record RcVc RepSpec,string prcode,var val buval)
BEGIN
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  Integer i,rwcnt;
  val t;
  string 20 frin,toin;
  boolean testf;
  
  frin = FirstInRange(RepSpec.f2,20);
  toin = LastInRange(RepSpec.f2,20);    
  buval = blankval;
  TBBUr.PRCode = prcode;
  if (ReadFirstMain(TBBUr,1,true)) then begin
    if ((DateInRange(TBBUr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)) or (blankdate(TBBUr.TransDate))) then begin
      rwcnt = MatRowCnt(TBBUr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(TBBUr,i,TBBUrw);
        testf = true;
        if (((blank(RepSpec.f2)) or ((TBBUrw.ArtCode>=frin) and (TBBUrw.ArtCode<=toin)))==false) then begin
          testf = false;
        end; 
        if (testf) then begin
          testf = ItemInItemGroupOrClass(TBBUrw.ArtCode,RepSpec.f3,RepSpec.f4);
        end;
        if (testf) then begin
          testf = (TBBUrw.stp==kInvoiceRowTypeNormal); 
        end;
        if (testf) then begin
          if (RepSpec.flags[1]==0) then begin
            if (TBBUrw.ItemType==0) then begin
              t = t + TBBUrw.Sum;
            end;  
          end;
          if (RepSpec.flags[1]==1) then begin
            if (TBBUrw.ItemType==0) then begin
              t = t + TBBUrw.Qty;
            end;  
          end;
        end;  
      end;
      buval = t;
    end;  
  end;
  RETURN;
END;

procedure AddToSMDet(string artcode,val sum,record SMVc SMDetr,Integer type)
BEGIN
  row SMVc SMrw;
  Integer i,rwcnt;
  Boolean addf;
  
  addf = true;
  rwcnt = MatRowCnt(SMDetr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMDetr,i,SMrw);
    if (SMrw.Objects==artcode) then begin
      if (type==0) then begin
        SMrw.DebVal = SMrw.DebVal + sum;
      end;  
      if (type==1) then begin
        SMrw.DebVal2 = SMrw.DebVal2 + sum;
      end;  
      if (type==2) then begin
        SMrw.CurDebVal = SMrw.CurDebVal + sum;
      end;  
      if (type==3) then begin
        SMrw.CredVal = SMrw.CredVal + sum;
      end;  
      addf = false;
      MatRowPut(SMDetr,i,SMrw);       
      i = rwcnt;
    end;
  end;
  if (addf) then begin
    ClearRow(SMDetr,SMrw,1);
    SMrw.Objects = artcode;
    if (type==0) then begin
      SMrw.DebVal = sum;
    end;  
    if (type==1) then begin
      SMrw.DebVal2 = sum;
    end;  
    if (type==2) then begin
      SMrw.CurDebVal = sum;
    end; 
    if (type==3) then begin
      SMrw.CredVal = sum;
    end;  
    MatRowPut(SMDetr,rwcnt,SMrw); 
  end;
  RETURN;
END;

procedure PrintDetails(record SMVc SMDetr,LongInt POSerNr)
BEGIN
  row SMVc SMrw;
  Integer i,rwcnt;
  record INVc INr;
  
  rwcnt = MatRowCnt(SMDetr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMDetr,i,SMrw);
    StartFormat(15);
//     OutLongInt(15,0,POSerNr,false);
     OutString(60,0,SMrw.Objects,false);
     INr.Code = SMrw.Objects;
     if (ReadFirstMain(INr,1,true)) then begin
       OutString(120,0,INr.Name,false);       
     end;
     OutVal(300,0,SMrw.DebVal,M4Val,true);
     OutVal(360,0,SMrw.CredVal,M4Val,true);
     OutVal(420,0,SMrw.DebVal2,M4Val,true);
     OutVal(480,0,SMrw.CurDebVal,M4Val,true);
    EndFormat;
  end;  
  RETURN;
END;

procedure FindBudgetDetail(record RcVc RepSpec,string prcode,var val buval,record SMVc SMDetr)
BEGIN
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  Integer i,rwcnt;
  val t;
  string 20 frin,toin;
  Boolean testf;
  
  frin = FirstInRange(RepSpec.f2,20);
  toin = LastInRange(RepSpec.f2,20);  
  buval = blankval;
  TBBUr.PRCode = prcode;
  if (ReadFirstMain(TBBUr,1,true)) then begin
    rwcnt = MatRowCnt(TBBUr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TBBUr,i,TBBUrw);
      testf = true;
      if ((nonblank(RepSpec.f2)) and ((TBBUrw.ArtCode<frin) and (TBBUrw.ArtCode>toin))) then begin     
        testf = false;
      end;
      if (testf) then begin
        testf = ItemInItemGroupOrClass(TBBUrw.ArtCode,RepSpec.f3,RepSpec.f4);
      end;      
      if ((DateInRange(TBBUr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) and (nonblankdate(TBBUr.TransDate))) then begin
        testf = false;
      end;
      if (testf) then begin
        testf = (TBBUrw.stp==kInvoiceRowTypeNormal); 
      end;      
      if (testf) then begin 
        if (TBBUrw.ItemType==0) then begin
          if (RepSpec.flags[1]==0) then begin
            AddToSMDet(TBBUrw.ArtCode,TBBUrw.Sum,SMDetr,0);
            t = TBBUr.SumOther;
          end;  
          if (RepSpec.flags[1]==1) then begin
            AddToSMDet(TBBUrw.ArtCode,TBBUrw.Qty,SMDetr,0);
            t = t + TBBUrw.Qty;
          end;
        end;  
      end;  
    end;
    buval = t;
  end;
  RETURN;
END;

procedure FindVIDetail(record RcVc RepSpec,string prcode,var val vival,record SMVc SMDetr)
BEGIN
  record TBIVVc TBIVr;
  Boolean found,testf;
  string 20 frin,toin;
  val t;
  
  frin = FirstInRange(RepSpec.f2,20);
  toin = LastInRange(RepSpec.f2,20);    
  vival = blankval;
  found = true;
  TBIVr.PRCode = prcode;
  TBIVr.oVc = 2;
  while (LoopMain(TBIVr,2,found)) begin
    testf = true;
    if (TBIVr.oVc!=2) then begin found = false; end;
    if (TBIVr.PRCode!=prcode) then begin found = false; end;
    if (TBIVr.ItemType!=0) then begin testf = false; end;
    if ((nonblank(RepSpec.f2)) and ((TBIVr.ArtCode>=frin) and (TBIVr.ArtCode<=toin))) then begin testf = false; end;    
    if (testf) then begin
      testf = ItemInItemGroupOrClass(TBIVr.ArtCode,RepSpec.f3,RepSpec.f4);
    end;
    if ((DateInRange(TBIVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) and (nonblankdate(TBIVr.TransDate))) then begin
      testf = false;
    end;      
    if (found and testf) then begin
      if (RepSpec.flags[1]==0) then begin
        t = TBIVr.InvQty*TBIVr.CostPrice;
        AddToSMDet(TBIVr.ArtCode,t,SMDetr,1);    
        vival = vival + t;
      end;  
      if (RepSpec.flags[1]==1) then begin
        AddToSMDet(TBIVr.ArtCode,TBIVr.InvQty,SMDetr,1);    
        vival = vival + TBIVr.InvQty;
      end;
    end;
  end;  
  RETURN;
END;

procedure FindIVDetail(record RcVc RepSpec,string prcode,var val ivval,record SMVc SMDetr)
BEGIN
  record TBIVVc TBIVr;
  Boolean found,testf;
  string 20 frin,toin;
  
  frin = FirstInRange(RepSpec.f2,20);
  toin = LastInRange(RepSpec.f2,20);      
  ivval = blankval;
  found = true;
  found = true;
  TBIVr.PRCode = prcode;
  while (LoopMain(TBIVr,1,found)) begin
    testf = true;
    if (TBIVr.PRCode!=prcode) then begin found = false; end;
    if (TBIVr.ItemType!=0) then begin testf = false; end;
    if (TBIVr.Invoice==-1) then begin testf = false; end;
    if ((nonblank(RepSpec.f2)) and ((TBIVr.ArtCode>=frin) and (TBIVr.ArtCode<=toin))) then begin testf = false; end;    
    if (testf) then begin
      testf = ItemInItemGroupOrClass(TBIVr.ArtCode,RepSpec.f3,RepSpec.f4);
    end;
    if ((DateInRange(TBIVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) and (nonblankdate(TBIVr.TransDate))) then begin
      testf = false;
    end;      
    if (found and testf) then begin
      if (RepSpec.flags[1]==0) then begin
        AddToSMDet(TBIVr.ArtCode,TBIVr.Sum,SMDetr,2);    
        ivval = ivval + TBIVr.Sum;
      end;  
      if (RepSpec.flags[1]==1) then begin
        AddToSMDet(TBIVr.ArtCode,TBIVr.InvQty,SMDetr,2);    
        ivval = ivval + TBIVr.InvQty;
      end;  
    end;
  end;
  RETURN;
END;

procedure FindPOTotalOverview(record RcVc RepSpec,string prcode,var val poval,var val buval,var val ivval,var val vival)
BEGIN
  record PRPOINVc PRPOINr;
  Boolean found,testf;
  record INVc INr;
  val t;
  string 20 frin,toin;
  
  frin = FirstInRange(RepSpec.f2,20);
  toin = LastInRange(RepSpec.f2,20);
  poval = blankval;
  PRPOINr.Project = prcode;
  found = true;
  while (LoopMain(PRPOINr,1,found)) begin
    testf = true;
    if (PRPOINr.Project!=prcode) then begin found = false; end;
    INr.Code = PRPOINr.Item;
    if (ReadFirstMain(INr,1,true)==false) then begin testf = false; end;
    if ((nonblank(RepSpec.f2)) and ((PRPOINr.Item>=frin) and (PRPOINr.Item<=toin))) then begin testf = false; end;
    if (testf) then begin
      testf = ItemInItemGroupOrClass(PRPOINr.Item,RepSpec.f3,RepSpec.f4);
    end;
    if ((DateInRange(PRPOINr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) and (nonblankdate(PRPOINr.TransDate))) then begin
      testf = false;
    end;
    if (found and testf) then begin
      if (RepSpec.flags[1]==0) then begin
        poval = poval + PRPOINr.POVal;
        if (INr.ItemType!=0) then begin 
          FindArtCodeBudget(RepSpec,PRPOINr.Item,PRPOINr.Project,t,RepSpec.flags[1]);
          buval = buval + t;        
          FindArtCodeVIDetail(RepSpec,PRPOINr.Item,PRPOINr.Project,t,RepSpec.flags[1]);
          vival = vival + t;
          FindArtCodeIVDetail(RepSpec,PRPOINr.Item,PRPOINr.Project,t,RepSpec.flags[1]);
          ivval = ivval + t;
        end;
      end;
      if (RepSpec.flags[1]==1) then begin
        poval = poval + PRPOINr.POQty;
        if (INr.ItemType!=0) then begin 
          FindArtCodeBudget(RepSpec,PRPOINr.Item,PRPOINr.Project,t,RepSpec.flags[1]);
          buval = buval + t;        
          FindArtCodeVIDetail(RepSpec,PRPOINr.Item,PRPOINr.Project,t,RepSpec.flags[1]);
          vival = vival + t;
          FindArtCodeIVDetail(RepSpec,PRPOINr.Item,PRPOINr.Project,t,RepSpec.flags[1]);
          ivval = ivval + t;
        end;
      end;      
    end;
  end;
  RETURN;
END;

procedure FindPODetail(record RcVc RepSpec,string prcode,var val poval,record SMVc SMDetr,var val buval,var val vival,var val ivval,var LongInt POSerNr)
BEGIN
  record PRPOINVc PRPOINr;
  record INVc INr;
  Integer  i,rwcnt;
  Boolean found,testf;
  val t;
  string 20 frin,toin;
  
  frin = FirstInRange(RepSpec.f2,20);
  toin = LastInRange(RepSpec.f2,20);      
  poval = blankval;
  found = true;
  PRPOINr.Project = prcode;
  while (LoopMain(PRPOINr,1,found)) begin
    testf = true;
    if (PRPOINr.Project!=prcode) then begin found = false; end;
    INr.Code = PRPOINr.Item;
    if (ReadFirstMain(INr,1,true)==false) then begin testf = false; end;
    if ((nonblank(RepSpec.f2)) and ((PRPOINr.Item<frin) or (PRPOINr.Item>toin))) then begin testf = false; end;        
    if (testf) then begin
      testf = ItemInItemGroupOrClass(PRPOINr.Item,RepSpec.f3,RepSpec.f4);
    end;
    if ((DateInRange(PRPOINr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) and (nonblankdate(PRPOINr.TransDate))) then begin
      testf = false;
    end;      
    if (found and testf) then begin   
      POSerNr = PRPOINr.POSerNr;    
      if (INr.ItemType==0) then begin
        if (RepSpec.flags[1]==0) then begin      
          AddToSMDet(PRPOINr.Item,PRPOINr.POVal,SMDetr,3);
        end;
        if (RepSpec.flags[1]==1) then begin
          AddToSMDet(PRPOINr.Item,PRPOINr.POQty,SMDetr,3);
        end;          
      end else begin
        if (RepSpec.flags[1]==0) then begin      
          AddToSMDet(PRPOINr.Item,PRPOINr.POVal,SMDetr,3);
          FindArtCodeBudget(RepSpec,PRPOINr.Item,PRPOINr.Project,t,RepSpec.flags[1]);
          buval = buval + t;
          AddToSMDet(PRPOINr.Item,t,SMDetr,0);
          FindArtCodeVIDetail(RepSpec,PRPOINr.Item,PRPOINr.Project,t,RepSpec.flags[1]);
          vival = vival + t;
          AddToSMDet(PRPOINr.Item,t,SMDetr,1);
          FindArtCodeIVDetail(RepSpec,PRPOINr.Item,PRPOINr.Project,t,RepSpec.flags[1]);
          ivval = ivval + t;          
          AddToSMDet(PRPOINr.Item,t,SMDetr,2);
        end;  
        if (RepSpec.flags[1]==1) then begin      
          AddToSMDet(PRPOINr.Item,PRPOINr.POQty,SMDetr,3);
          FindArtCodeBudget(RepSpec,PRPOINr.Item,PRPOINr.Project,t,RepSpec.flags[1]);
          buval = buval + t;          
          AddToSMDet(PRPOINr.Item,t,SMDetr,0);
          FindArtCodeVIDetail(RepSpec,PRPOINr.Item,PRPOINr.Project,t,RepSpec.flags[1]);
          vival = vival + t;
          AddToSMDet(PRPOINr.Item,t,SMDetr,1);
          FindArtCodeIVDetail(RepSpec,PRPOINr.Item,PRPOINr.Project,t,RepSpec.flags[1]);
          ivval = ivval + t;          
          AddToSMDet(PRPOINr.Item,t,SMDetr,2);
        end;  
      end;  
      if (RepSpec.flags[1]==0) then begin      
        poval = poval + PRPOINr.POVal;
      end;  
      if (RepSpec.flags[1]==1) then begin      
        poval = poval + PRPOINr.POQty;
      end;  
    end;
  end;
  RETURN;
END;

procedure FindVIandIVTotal(record RcVc RepSpec,string prcode,var val ivval,var val vival)
BEGIN
  record TBIVVc TBIVr;
  Boolean found,testf;
  val t;
  string 20 frin,toin;
  
  frin = FirstInRange(RepSpec.f2,20);
  toin = LastInRange(RepSpec.f2,20);    
  ivval = blankval;
  vival = blankval;
  found = true;
  TBIVr.PRCode = prcode;
  TBIVr.oVc = 2;
  while (LoopMain(TBIVr,2,found)) begin
    testf = true;
    if (TBIVr.oVc!=2) then begin found = false; end;
    if (TBIVr.PRCode!=prcode) then begin found = false; end;
    if (TBIVr.ItemType!=0) then begin testf = false; end;
    if ((nonblank(RepSpec.f2)) and ((TBIVr.ArtCode>=frin) and (TBIVr.ArtCode<=toin))) then begin testf = false; end;
    if (testf) then begin
      testf = ItemInItemGroupOrClass(TBIVr.ArtCode,RepSpec.f3,RepSpec.f4);
    end;    
    if ((DateInRange(TBIVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) and (nonblankdate(TBIVr.TransDate))) then begin
      testf = false;
    end;
    if (found and testf) then begin
      if (RepSpec.flags[1]==0) then begin    
        t = TBIVr.InvQty*TBIVr.CostPrice;
      end;
      if (RepSpec.flags[1]==1) then begin
        t = TBIVr.InvQty;
      end;        
      vival = vival + t;
    end;
  end;  
  ResetLoop(TBIVr);
  found = true;
  TBIVr.PRCode = prcode;
  while (LoopMain(TBIVr,1,found)) begin
    testf = true;
    if (TBIVr.PRCode!=prcode) then begin found = false; end;
    if (TBIVr.ItemType!=0) then begin testf = false; end;
    if (TBIVr.Invoice==-1) then begin testf = false; end;
    if ((nonblank(RepSpec.f2)) and ((TBIVr.ArtCode>=frin) and (TBIVr.ArtCode<=toin))) then begin testf = false; end;
    if (testf) then begin
      testf = ItemInItemGroupOrClass(TBIVr.ArtCode,RepSpec.f3,RepSpec.f4);
    end;    
    if ((DateInRange(TBIVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) and (nonblankdate(TBIVr.TransDate))) then begin
      testf = false;
    end;
    if (found and testf) then begin
      if (RepSpec.flags[1]==0) then begin
        ivval = ivval + TBIVr.Sum;
      end;
      if (RepSpec.flags[1]==1) then begin
        ivval = ivval + TBIVr.Qty;
      end;
    end;
  end;  
  RETURN;
END;

global
procedure PRPORn(record RcVc RepSpec)
BEGIN
  record SMVc SMDetr;
  record PRVc PRr;
  Boolean found;
  val buval,ivval,vival,poval;
  val totbuval,totivval,totvival,totpoval;
  string 20 frpr,topr;
  string 20 frin,toin;
  LongInt POSerNr;
  
  frpr = FirstInRange(RepSpec.f1,20);
  topr = LastInRange(RepSpec.f1,20);
  frin = FirstInRange(RepSpec.f2,20);
  toin = LastInRange(RepSpec.f2,20);  
  StartReportJob(USetStr(5570));
  PrintPRPOHeader(RepSpec);
  EndHeader;
  if (RepSpec.ArtMode==0) then begin    
    StartFormat(15);
     OutString(0,0,USetStr(5581),false);
     OutString(50,0,USetStr(6005),false);
     OutString(300,0,USetStr(5575),true);
     OutString(360,0,USetStr(5576),true);
     OutString(420,0,USetStr(5577),true);
     OutString(480,0,USetStr(5578),true);
    EndFormat;
  end;  
  if (RepSpec.ArtMode==1) then begin    
    StartFormat(15);
     OutString(0,0,USetStr(5581),false);
     OutString(60,0,USetStr(5582),false);
     OutString(300,0,USetStr(5575),true);
     OutString(360,0,USetStr(5576),true);
     OutString(420,0,USetStr(5577),true);
     OutString(480,0,USetStr(5578),true);
    EndFormat;
  end;  
  Gray_Divider(0,1);
  found = true;
  PRr.Code = frpr;
  while (LoopMain(PRr,1,found)) begin
    if (nonblank(topr)) then begin
      if (PRr.Code>topr) then begin found = false; end;
    end;
    if (found) then begin
      if (RepSpec.ArtMode==0) then begin    
        FindBudgetTotalOverview(RepSpec,PRr.Code,buval);
        FindVIandIVTotal(RepSpec,PRr.Code,ivval,vival);
        FindPOTotalOverview(RepSpec,PRr.Code,poval,buval,ivval,vival);
        if ((poval!=blankval) or (ivval!=blankval) or (vival!=blankval) or (buval!=blankval)) then begin
          StartFormat(15);
           OutString(0,0,PRr.Code,false);
           OutString(50,0,PRr.Name,false);
           OutVal(300,0,buval,M4Val,true);
           OutVal(360,0,poval,M4Val,true);
           OutVal(420,0,vival,M4Val,true);
           OutVal(480,0,ivval,M4Val,true);
          EndFormat;
        end;
      end;
      if (RepSpec.ArtMode==1) then begin
        RecordNew(SMDetr);
        FindBudgetDetail(RepSpec,PRr.Code,buval,SMDetr);
        FindVIDetail(RepSpec,PRr.Code,vival,SMDetr);
        FindIVDetail(RepSpec,PRr.Code,ivval,SMDetr);
        FindPODetail(RepSpec,PRr.Code,poval,SMDetr,buval,vival,ivval,POSerNr);
        if ((poval!=blankval) or (ivval!=blankval) or (vival!=blankval) or (buval!=blankval)) then begin
          StartFormat(15);
            OutString(0,0,PRr.Code,false);
            OutString(50,0,PRr.Name,false);
            OutString(300,0,PRr.CustCode,false);
            OutString(350,0,PRr.CustName,false);
          EndFormat;
          PrintDetails(SMDetr,POSerNr);
          Gray_Divider(250,1)
          StartFormat(15);
           OutString(180,0,USetStr(6796),false);
           OutVal(300,0,buval,M4Val,true);
           OutVal(360,0,poval,M4Val,true);
           OutVal(420,0,vival,M4Val,true);
           OutVal(480,0,ivval,M4Val,true);
          EndFormat;            
          Gray_Divider(0,1)
        end;  
      end;      
      totbuval = totbuval + buval;
      totpoval = totpoval + poval;
      totvival = totvival + vival;
      totivval = totivval + ivval;      
    end;  
  end;
  Gray_Divider(0,1)
  StartFormat(15);
   OutString(0,0,USetStr(6797),false);
   OutVal(300,0,totbuval,M4Val,true);
   OutVal(360,0,totpoval,M4Val,true);
   OutVal(420,0,totvival,M4Val,true);
   OutVal(480,0,totivval,M4Val,true);
  EndFormat;  
  EndJob;
  RETURN;
END;
#endif