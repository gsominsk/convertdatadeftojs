external function LongInt IPVcRecordDefaults(var record IPVc,record IPVc,LongInt,LongInt);external function Boolean PasteInvIn2IPr(var record IPVc,Integer,Date,var val,Boolean,var Boolean);external function date XmlGetDate(var xml,string,string);external procedure IPSumup(var record IPVc);external function Boolean IPVc_PasteCustCode(var record IPVc,Integer,var LongInt);external procedure IPVc_PasteRecCurncy(var record IPVc,Integer);external procedure IPVc_PasteVATCode(var record IPVc,Integer);external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);external procedure IPVc_PasteRecVal(var record IPVc,Integer);updating function Boolean IPDClassCustCode(var record IPVc IPr,Integer rownr)begin  Boolean res;  row  IPVc IPrw;  LongInt error;    res = true;  if (IPVc_PasteCustCode(IPr,rownr,error)) then begin end;  IPDClassCustCode = res;  return;end;  function Boolean InvoiceNrEFAfter(var record IPVc IPr,Integer rownr)begin  Boolean res,testf,installmentf;  row IPVc IPrw;  val chk;  res = true;  if (rownr>-1) then begin    MatRowGet(IPr,rownr,IPrw);    switch (IPrw.stp) begin      case 1:         testf = PasteInvIn2IPr(IPr,rownr,IPr.TransDate,chk,false,installmentf);    end;  end;  InvoiceNrEFAfter = res;  return;end;//this functiont returns true if it finds specific substring  function boolean StrInStr(string ko,string kur)begin  string 20 char;  string 1 check,check2;  integer leng,leng1,pos;  string 64 newS;  boolean res;    pos = 0;  newS = "";  leng = len(ko);  leng1 = len(kur);  if (ko=="") then begin     res = false;     goTo endo;    end;  while (leng1-leng>=pos) begin    char = mid(kur,pos,leng);    check = mid(kur,pos,1);    check2 = mid(kur,pos+leng,1);    if (char==ko) then begin      res = true;       goto endo;    end else begin      pos = pos+1;      res = false;    end;  end;endo:;  StrInStr = res;  return;end;    function boolean CheckIfAccountExists(string strAccNo)begin  record PMBlock PMBlk;  row PMBlock PMrw;  integer i,nCnt;  boolean bCont;  boolean res;    BlockLoad(PMBlk);  nCnt = MatRowCnt(PMBlk);  i = 0;  bCont = true;  while (bCont and (i<nCnt)) begin    MatRowGet(PMBlk,i,PMrw);    if (PMrw.BankNr==strAccNo) then begin      res = true;      bCont = false;    end;    i = i + 1;  end;    CheckIfAccountExists = res;  return;end;  procedure GetIPRecFromAr(record IPVc tIPr,boolean badIPf,string ccode,date pd,vector longint vPaymentlist,array Record IPVc arPaymentList,var integer arcnt)begin  record IPVc IPr;    if (vPaymentList[badIPf & ccode & DateToString(pd,"YYYYMMDD")]>0) then begin    IPr = arPaymentList[vPaymentList[badIPf & ccode & DateToString(pd,"YYYYMMDD")]];    RecordCopy(tIPr,IPr);  end else begin    RecordNew(IPr);    IPVcRecordDefaults(IPr,IPr,0,0);        IPr.RecNumber = 1;    IPr.TransDate = pd;    IPr.RegDate = pd;    IPr.PayCurCode = ccode;    IPr.Comment = badIPf;    vPaymentList[badIPf & ccode & DateToString(pd,"YYYYMMDD")] = arcnt;    arPaymentList[vPaymentList[badIPf & ccode & DateToString(pd,"YYYYMMDD")]] = IPr;    RecordCopy(tIPr,IPr);    arcnt = arcnt + 1;  end;  return;end;function string 1 lowercase2(string tstr)begin  string 20 res;    res = lowercase(tstr);/*    if (tstr=="Å") then begin    res = "Ç";  end;  if (tstr=="â") then begin    res = "ã";  end;  if (tstr=="î") then begin    res = "ï";  end;  if (tstr=="˛") then begin    res = "Æ";  end;  if (tstr=="±") then begin    res = "¥";  end;  if (tstr=="µ") then begin    res = "˙";  end;  if (tstr=="π") then begin    res = "∫";  end;  if (tstr=="ø") then begin    res = "¿";  end;  if (tstr=="·") then begin    res = "‰";  end;  if (tstr=="Ì") then begin    res = "";  end;  if (tstr=="Î") then begin    res = "Ï";  end;*/    lowercase2 = res;  return;end;procedure ConvertNameToLowerCase(var string tstr)begin  integer i,l;  string 255 res;  string 1 thischar,prevchar;  l = len(tstr);  for (i=0;i<l;i=i+1) begin    thischar = mid(tstr,i,1);    if (prevchar<>" " and i<>0) then begin      res = res & lowercase2(thischar);    end else begin      res = res & thischar;    end;    prevchar = thischar;  end;    tstr = res;  return;end;updatingprocedure PutIPRecToAr(record IPVc tIPr,boolean badIPf,string ccode,date pd,vector longint vPaymentlist,array Record IPVc arPaymentList)begin    if (MatRowCnt(tIPr)>290) then begin    IPSumup(tIPr);    tIPr.RecNumber = "";    tIPr.SerNr = NextSerNr("IPVc",CurrentDate,-1,false,"");    if (tIPr.Comment=="1") then begin      tIPr.Comment = USetStr(34204);    end else begin      tIPr.Comment = USetStr(34205);        end;    RecordStore(tIPr,true);    RecordNew(tIPr);    IPVcRecordDefaults(tIPr,tIPr,0,0);        tIPr.RecNumber = 1;    tIPr.TransDate = pd;    tIPr.RegDate = pd;    tIPr.PayCurCode = ccode;    tIPr.Comment = badIPf;  end;  arPaymentList[vPaymentList[badIPf & ccode & DateToString(pd,"YYYYMMDD")]] = tIPr;  return;end;procedure AddOneARToIP(record IPVc IPr,record ARVc ARr,var val res,date pd,string PaymtINfo,string RefNumber,string Curr,string vcode)begin  row IPVc IPrw;  val t;  integer rownr;    rownr = MatRowCnt(IPr);  ClearRow(IPr,IPrw,1);      IPrw.PayDate = pd;  IPrw.InvoiceNr = ARr.InvoiceNr;  MatRowPut(IPr,rownr,IPrw);  if (nonblank(IPrw.InvoiceNr)) begin     InvoiceNrEFAfter(IPr,rownr);   end;  MatRowGet(IPr,rownr,IPrw);  IPrw.VATCode = vcode;  MatRowPut(IPr,rownr,IPrw);  IPVc_PasteVATCode(IPr,rownr);  MatRowGet(IPr,rownr,IPrw);  IPrw.BankCurncy = curr;  if (IPrw.BankVal>res) then begin    IPrw.BankVal = res;    CurValToOtherCur(IPr.TransDate,IPrw.BankCurncy,res,IPrw.RecCurncy,t,defaultcurRoundOff);                            res = 0;                IPrw.RecVal = t;      MatRowPut(IPr,rownr,IPrw);    IPVc_PasteRecVal(IPr,rownr);    MatRowGet(IPr,rownr,IPrw);                  res =0;  end else begin          res = res - IPrw.BankVal;  end;  IPrw.rkRecNumber = RefNumber;  IPrw.Comment = left(PaymtInfo,200);  MatRowPut(IPr,rownr,IPrw);    return;end;procedure GetRefNumbersFromRefString(string tstr,var array Longint aRefNums)begin  Integer i,c;  string 100 m,numstr;  for (i=0;i<len(tstr);i=i+1) begin    m = mid(tstr,i,1);    c = asc(m);    if (c>10 and c<20) then begin      numstr = numstr & m;    end else begin      if (nonblank(numstr)) then begin        if (StringToLongInt(numstr)>0) then begin          aRefNums[aRefNums.length] = StringToLongInt(numstr);        end;      end;      numstr = "";    end;  end;  return;end;updatingfunction val FillIPWithAR(var record IPVc IPr,string clientID,string PaymtINfo,val sum,date pd,string RefNumber,string Curr,string clientname,string orgClientID,vector longint vAddedInv)begin  record FVImpFilterBlock FVImpBl;  row IPVc IPrw;  record ARVc Arr;  record IVVc IVr;  row FVImpFilterBlock FVImprw,DefFVImprw;  integer rw,rwc,rownr,j;  val res;  boolean continf,testf,foundf;  LongInt error;  array Longint aRefNums;    res = sum;  BlockLoad(FVImpBl);  rwc = MatRowCnt(FVImpBl);  GetRefNumbersFromRefString(PaymtInfo,aRefNums);  MatRowGet(FVImpBl,0,DefFVImprw);  foundf = false;  for (rw=1;rw<rwc;rw=rw+1) begin    MatRowGet(FVImpBl,rw,FVImprw);    if ((StrInStr(FVImprw.FilterStr,PaymtInfo) or blank(FVImprw.FilterStr)) and FVImpRw.ActionType==1 and res>0) then begin      if (aRefNums.length>0) then begin        for (j=0;j<aRefNums.length;j=j+1) begin          if (res>0) then begin            ResetLoop(ARr);            ARr.InvoiceNr = aRefNums[j];            if (ReadFirstKey("InvoiceNr",ARr,1,true)) then begin              if (clientID==ARr.CustCode) then begin                IVr.SerNr = ARr.InvoiceNr;                if (ReadFirstMain(IVr,1,true)) then begin                  if (IVr.InvDate<=pd) then begin                    vAddedInv[IVr.SerNr] = 1;                    AddOneARToIP(IPr,ARr,res,pd,PaymtInfo,RefNumber,Curr,FVImprw.VATCode);                    foundf = true;                  end;                end;              end;            end;          end;        end;      end;      if (res>0) then begin        ResetLoop(ARr);        ARr.CustCode = clientID;        continf = true;        while (LoopKey("CustCode",ARr,1,continf) and res>0) begin          if (ARr.CustCode!=clientID) then begin            continf = false;          end else begin            if (vAddedInv[ARr.InvoiceNr]<>1) then begin              IVr.SerNr = ARr.InvoiceNr;              if (ReadFirstMain(IVr,1,true)) then begin                if (IVr.InvDate<=pd) then begin                  vAddedInv[IVr.SerNr] = 1;                  AddOneARToIP(IPr,ARr,res,pd,PaymtInfo,RefNumber,Curr,FVImprw.VATCode);                  foundf = true;                end;              end;            end;          end;        end;      end;    end;    if ((StrInStr(FVImprw.FilterStr,PaymtInfo) or blank(FVImprw.FilterStr)) and FVImprw.ActionType==2 and res>0) then begin      rownr = MatRowCnt(IPr);      ClearRow(IPr,IPrw,1);        IPrw.CustCode = clientID;      MatRowPut(IPr,rownr,IPrw);      IPVc_PasteCustCode(IPr,rownr,error);      if (IPrw.CustCode=="") then begin         matrowGet(IPr,rownr,IPrw);        IPrw.CustName = clientname;         matrowPut(IPr,rownr,IPrw);                 end;      MatRowGet(IPr,rownr,IPrw);      IPrw.InvVal = res;      res = 0;      IPrw.VATCode = FVImprw.VATCode;      MatRowPut(IPr,rownr,IPrw);      IPVc_PasteVATCode(IPr,rownr);      MatRowGet(IPr,rownr,IPrw);      IPrw.PayDate = pd;      MatRowGet(IPr,rownr,IPrw);      IPrw.RecCurncy = curr;      IPrw.rkRecNumber = RefNumber;      IPrw.Comment = left(PaymtInfo,200);      IPrw.ARAcc = FVImprw.OnAccAcc;      MatRowPut(IPr,rownr,IPrw);      IPVc_PasteRecCurncy(IPr,rownr);      foundf = true;    end;    if (res<=0) then begin rw = rwc; end;  end;  if (res>0) then begin    rownr = MatRowCnt(IPr);    ClearRow(IPr,IPrw,1);      IPrw.CustCode = clientID;    IPrw.CustName = clientName;    IPrw.InvVal = res;    res = 0;    IPrw.VATCode = DefFVImprw.VATCode;    MatRowPut(IPr,rownr,IPrw);    IPVc_PasteVATCode(IPr,rownr);    MatRowGet(IPr,rownr,IPrw);    IPrw.PayDate = pd;    IPrw.RecCurncy = curr;    IPrw.rkRecNumber = RefNumber;    IPrw.Comment = left(PaymtInfo,200);    IPrw.ARAcc = DefFVImprw.OnAccAcc;    MatRowPut(IPr,rownr,IPrw);    IPVc_PasteRecCurncy(IPr,rownr);  end;    FillIPWithAR = res;  return;end;globalupdating procedure ImpBankFiDAViStaLatvia()begin  vector longint vPaymentList;  array record IPVc arPaymentList;  integer arcnt;  record PMBlock PMBlk;  record CUVc CUr;  row PMBlock PMrw;  record IPVc IPr,IPr3;  row IPVc IPrw;  integer rwcount,rwcnt,rw,rwc;  string 200 orgClientID;  xml xdata;  area a_data;  string 50 xproot;  date pd;  string 255 xstr,xval,tstr,PaymtInfo;  date start_date,end_date,td;  integer i,nCnt,xmlrownr,rownr,CCyi;  boolean bReady,bCont,continf,testf,badIPf;  string 255 clientID;   string 255 satString,RefNumber;  val sum,t,TotalBal;  string 20 tempStr,curpaycode;  string 200 clientName,clientClass;  integer imp,skip;  string 5 curr;  vector longint vAddedInv;    imp = 0;  skip = 0;  satString = "";    if (SetImportCodePage("CP1257")) then begin end;   while (TestEOF==false) begin    xstr = ImportField;    testf = NextImportLine(true);  end;  xdata = ParseXMLFile(GetImportFileName);  xproot = "FIDAVISTA/Statement";    // Root node exists?  bReady = XmlNodeExists(xdata,xproot);  if (!bReady) then begin    MessageBox(0,USetStr(34200) & " " & xproot);  end;    // Must be processed in one day  if (bReady) then begin    xstr = xproot & "/Period/";    start_date = XmlGetDate(xdata,xstr & "StartDate","YYYY-MM-DD");    end_date = XmlGetDate(xdata,xstr & "EndDate","YYYY-MM-DD");  end;  if (bReady) then begin    i = 0;    bCont = true;    while (bCont and XmlNodeExists(xdata,xproot & "/AccountSet[" & i & "]")) begin      if (i > 0) then begin        MessageBox(0,USetStr(34201));        bCont = false;        bReady = false;      end;      i = i + 1;    end;  end;    // Must have one or more transactions.  if (bReady) then begin    while (XmlNodeExists(xdata,xproot & "/AccountSet/CcyStmt[" & CCyi & "]")) begin        bReady = XmlNodeExists(xdata,xproot & "/AccountSet/CcyStmt[" & CCyi & "]/TrxSet");      if (bReady) then begin          goto TrxSetExists;      end;      CCyi = CCyi + 1;    end;    MessageBox(0,USetStr(34203));  end;TrxSetExists:;  arcnt = 0;  if (bReady) then begin    CCyi = 0;    // start reading payments    while (bCont and XmlNodeExists(xdata,xproot & "/AccountSet/CcyStmt[" & CCyi & "]")) begin        xmlrownr = 0;      curpaycode =  XmlGet(xdata,xproot & "/AccountSet/CcyStmt[" & CCyi & "]/CCy");      while (XmlNodeExists(xdata,xproot & "/AccountSet/CcyStmt[" & CCyi & "]/TrxSet[" & xmlrownr & "]")) begin        testf = true;        if (XmlGet(xdata,xproot & "/AccountSet/CcyStmt[" & CCyi & "]/TrxSet[" & xmlrownr & "]/CorD")<>"C") then begin          goto SkipR;        end;        clientName = XmlGet(xdata,xproot & "/AccountSet/CcyStmt[" & CCyi & "]/TrxSet[" & xmlrownr & "]/CPartySet/AccHolder/Name");        ConvertNameToLowerCase(ClientName);        clientID = XmlGet(xdata,xproot & "/AccountSet/CcyStmt[" & CCyi & "]/TrxSet[" & xmlrownr & "]/CPartySet/AccHolder/LegalID");        orgClientID = clientID;        start_date = XmlGetDate(xdata,xproot & "/Period/StartDate","YYYY-MM-DD");        end_date = XmlGetDate(xdata,xproot & "/Period/EndDate","YYYY-MM-DD");        td = XmlGetDate(xdata,xproot & "/AccountSet/CcyStmt[" & CCyi & "]/TrxSet[" & xmlrownr & "]/BookDate","YYYY-MM-DD");        pd = td;        tempStr = XmlGet(xdata,xproot & "/AccountSet/CcyStmt[" & CCyi & "]/TrxSet[" & xmlrownr & "]/TypeCode");        curr = XmlGet(xdata,xproot & "/AccountSet/CcyStmt[" & CCyi & "]/TrxSet[" & xmlrownr & "]/CPartySet/Ccy");        if (blank(curr)) then begin          curr =  XmlGet(xdata,xproot & "/AccountSet/CcyStmt/Ccy");        end;        clientClass = "";        badIPf = true;        Cur.VATNr = clientID;        if (clientID <> "" and len(clientID)>1) then begin          badIPf = false;          continf = false;          if (ReadFirstKey("VATNr",Cur,1,true)==false) then begin            Cur.RegNr1 = clientID;            if (ReadFirstKey("RegNr1",Cur,1,true)==false) then begin              Cur.Name = clientName;              if (ReadFirstKey("Name",Cur,1,true)==false) then begin                badIPf = true;                clientID = "";              end else begin clientID = Cur.Code; end;            end else begin clientID = Cur.Code; end;          end else begin clientID = Cur.Code; end;        end else begin Cur.Code = "xxx"; clientID = "";  end;                tempStr = XmlGet(xdata,xproot & "/AccountSet/CcyStmt[" & CCyi & "]/TrxSet[" & xmlrownr & "]/BankRef");        recordClear(IPr3);        resetloop(IPr3);        continf = true;        testf = true;        while (LoopMain(IPr3,1,continf)) begin              rwc = MatRowCnt(IPr3);          for (rw=0;rw<rwc;rw=rw+1) begin            MatRowGet(IPr3,rw,IPrw);            if (IPrw.rkRecNumber==tempStr) then begin              testf = false;              continf = false;              skip = skip + 1;            end;          end;        end;        if (testf) then begin          ClearRow(IPr,IPrw,1);          PaymtInfo =  XmlGet(xdata,xproot & "/AccountSet/CcyStmt[" & CCyi & "]/TrxSet[" & xmlrownr & "]/PmtInfo");          sum = StringToVal(XmlGet(xdata,xproot & "/AccountSet/CcyStmt[" & CCyi & "]/TrxSet[" & xmlrownr & "]/AccAmt"),M4Val);          RefNumber = XmlGet(xdata,xproot & "/AccountSet/CcyStmt[" & CCyi & "]/TrxSet[" & xmlrownr & "]/BankRef");           continf = true;          GetIPRecFromAr(IPr,badIPf,curr,pd,vPaymentList,arPaymentList,arcnt);          sum = FillIPWithAR(IPr,clientID,PaymtInfo,sum,pd,RefNumber,Curr,ClientName,orgClientID,vAddedInv);          PutIPRecToAr(Ipr,badIPf,curr,pd,vPaymentList,arPaymentList);          imp = imp +1;        end;        skipR:;        xmlrownr = xmlrownr + 1;      end;       CCyi = CCyi + 1;    end;  end;  for (i=0;i<arPaymentList.length;i=i+1) begin    IPr = arPaymentList[i];    IPr.RecNumber = "";    rwc = MatRowCnt(IPr);    IPSumup(IPr);    IPr.SerNr = NextSerNr("IPVc",IPr.TransDate,-1,false,"");    for (rw=0;rw<rwc;rw=rw+1) begin      MatRowGet(IPr,rw,IPrw);      if (IPrw.InvoiceNr<=0) then begin        IPrw.CUPNr = IPr.SerNr & rw;        MatRowPut(IPr,rw,IPrw);      end;    end;    if (IPr.Comment=="1") then begin      IPr.Comment = USetStr(34204);    end else begin      IPr.Comment = USetStr(34205);        end;    RecordStore(IPr,true);  end;  if (bReady) then begin    messageBox(0,USetStr(34206) & " " & imp & " " & UsetStr(34207) & " " & skip & " " & USetStr(34208));  end;  return;end;    