external function string 255 StripCharacter(string,string);
external function Boolean IsDigit(string);
external function val ValFromString(string,string,string);
external function Date DateFromString(string,string);

function Boolean BankAccountNumberMatches(string pmbanknr,string bankacc)
begin
  Boolean res;
  Integer i;
  string 255 tstr;
  
  while (i<len(bankacc)) begin
    if (IsDigit(Mid(bankacc,i,1))) then begin
      tstr = right(bankacc,len(bankacc)-i);
      i = len(bankacc);
    end;
    i = i + 1;
  end;
  if (Right(pmbanknr,len(tstr))==tstr) then begin
    res = true;
  end;
  BankAccountNumberMatches = res;
  return;
end;

global
function Boolean GetBankAccPMRow(record PMBlock PMb,string sortcode,string bankacc,var row PMBlock PMbrw)
begin
  Boolean res;
  Integer i,rwcnt;
  
  ClearRow(PMb,PMbrw,1);
  res = true;
  BlockLoad(PMb);
  rwcnt = MatRowCnt(PMb);
  for (i=0 ;i<rwcnt;i=i+1) begin
    MatRowGet(PMb,i,PMbrw);
    if (PMbrw.SortCode==sortcode or blank(sortcode)) and (BankAccountNumberMatches(PMbrw.BankNr,bankacc)) then begin
      goto LGetBankAccPMRow;
    end;
  end;
  res = false;
LGetBankAccPMRow:;
  GetBankAccPMRow = res;
  return;
end;

global
function Boolean GetAccNrPMRow(record PMBlock PMb,string accnr,var row PMBlock PMbrw)
begin
  Boolean res;
  Integer i,rwcnt;
  
  ClearRow(PMb,PMbrw,1);
  res = true;
  BlockLoad(PMb);
  rwcnt = MatRowCnt(PMb);
  for (i=0 ;i<rwcnt;i=i+1) begin
    MatRowGet(PMb,i,PMbrw);
    if (PMbrw.AccNr==accnr) then begin
      goto LGetAccNrPMRow;
    end;
  end;
  res = false;
LGetAccNrPMRow:;
  GetAccNrPMRow = res;
  return;
end;


updating procedure OFXBankTRIn(record RcVc RepSpec)
begin
  record CYBlock CYb;
  record PMBlock PMb;
  row PMBlock PMbrw;
  xml xdata;
  string 255 tstr,xkeytr,xkey;
  string 255 crncy,sortcode,bankacc;
  record BankTRVc BTRr;
  LongInt l;
  
  BlockLoad(CYb);
  BlockLoad(PMb);
  xdata = ParseXMLFile(GetImportFileName);
  xkey = "OFX/BANKMSGSRSV1/STMTTRNRS/STMTRS/";
  crncy = XmlGet(xdata,xkey & "CURDEF"); 

  sortcode = XmlGet(xdata,xkey & "BANKACCTFROM/BANKID"); 
  bankacc = XmlGet(xdata,xkey & "BANKACCTFROM/ACCTID"); 
  GetBankAccPMRow(PMb,sortcode,bankacc,PMbrw);

  xkey = "OFX/BANKMSGSRSV1/STMTTRNRS/STMTRS/BANKTRANLIST";
  
  l = 0;
  while (XmlNodeExists(xdata,xkey & "/STMTTRN[" & l & "]")) begin  
    xkeytr = xkey & "/STMTTRN[" & l & "]/";

    RecordNew(BTRr);
    BTRr.CurncyCode = crncy;
    BTRr.TypeRef = XmlGet(xdata,xkeytr & "TRNTYPE"); 
    BTRr.TransDate = DateFromString(XmlGet(xdata,xkeytr & "DTPOSTED"),"YYYYMMDD");
    BTRr.Sum = ValFromString(XmlGet(xdata,xkeytr & "TRNAMT"),".","");
    BTRr.OffReference = XmlGet(xdata,xkeytr & "CHECKNUM"); 
    BTRr.Reference = XmlGet(xdata,xkeytr & "NAME"); 
    BTRr.Comment = XmlGet(xdata,xkeytr & "MEMO"); 
    
    switch (Left(BTRr.TypeRef,1)) begin
      case "D":
        BTRr.PayBankAcc = PMbrw.SortCode & PMbrw.BankNr;
        if (blank(BTRr.PayBankAcc)) then begin
          BTRr.PayBankAcc = RepSpec.f20;
        end;
        BTRr.PayTransDate = BTRr.TransDate;
        BTRr.PayName = CYb.CompName;
        BTRr.PayReference = BTRr.Reference;
        BTRr.PayVATNr = CYb.VATNr;
        BTRr.PayRegNr1 = CYb.OrgNr;
      case "C":
        BTRr.RcpBankAcc = PMbrw.SortCode & PMbrw.BankNr;
        if (blank(BTRr.RcpBankAcc)) then begin
          BTRr.RcpBankAcc = RepSpec.f20;
        end;
        BTRr.RcpTransDate = BTRr.TransDate;
        BTRr.RcpName = CYb.CompName;
        BTRr.RcpReference = BTRr.Reference;
        BTRr.RcpVATNr = CYb.VATNr;
        BTRr.RcpRegNr1 = CYb.OrgNr;
    end;
    
    BTRr.SerNr = NextSerNr("BankTRVc",BTRr.TransDate,-1,false,"");
    if (BTRr.SerNr>0) then begin
      RecordStore(BTRr,false);
    end;
    l = l + 1;
  end;

  while (TestEOF==false) begin
    tstr = ImportField;
    if (NextImportLine(true)) then begin
    end;
  end;
  return;
end;

function string 255 ImportColumn(record CYBlock CYb,string inline,Integer col,string specbankacc,string fsep,string coldata,string dateformat,string decsep,string thosep,var record BankTRVc BTRr)
begin
  string 255 data,bankacc;
  Integer i;
  LongInt pos;

  pos = 0;
  while (i<col) begin
    GetNextSubstring(inline,pos,fsep,data);
    i = i + 1;  
  end;
  data = StripCharacter(data,"""");
  if (nonblank(data)) then begin
    switch (SetFromString(621,coldata)) begin
      case kBankTRFileColumnDate:
        BTRr.TransDate = DateFromString(data,dateformat);
      case kBankTRFileColumnTime:
  //      BTRr.TransTime = TimeFromString(data,"HHMMSS");
      case kBankTRFileColumnReference:
        BTRr.Reference = data;
      case kBankTRFileColumnType:
        BTRr.TypeRef = data;
      case kBankTRFileColumnStatus:
      case kBankTRFileColumnCurrency:
        BTRr.CurncyCode = data;
      case kBankTRFileColumnAmount:
        BTRr.Sum = ValFromString(data,decsep,"");
        if (BTRr.Sum>=0) then begin
          BTRr.TypeRef = "C";
        end else begin
          BTRr.TypeRef = "D";
        end;
      case kBankTRFileColumnReceipID:
        BTRr.OrdNumber = data;
      case kBankTRFileColumnBalance:
      case kBankTRFileColumnComment:
        BTRr.Comment = data;
      case kBankTRFileColumnBankAcc:
        bankacc = data;
    end;
    switch (Left(BTRr.TypeRef,1)) begin
      case "D":
        BTRr.PayBankAcc = bankacc;
        if (blank(BTRr.PayBankAcc)) then begin
          BTRr.PayBankAcc = specbankacc;
        end;
        BTRr.PayTransDate = BTRr.TransDate;
        BTRr.PayName = CYb.CompName;
        BTRr.PayReference = BTRr.Reference;
        BTRr.PayVATNr = CYb.VATNr;
        BTRr.PayRegNr1 = CYb.OrgNr;
      case "C":
        BTRr.RcpBankAcc = bankacc;
        if (blank(BTRr.RcpBankAcc)) then begin
          BTRr.RcpBankAcc = specbankacc;
        end;
        BTRr.RcpTransDate = BTRr.TransDate;
        BTRr.RcpName = CYb.CompName;
        BTRr.RcpReference = BTRr.Reference;
        BTRr.RcpVATNr = CYb.VATNr;
        BTRr.RcpRegNr1 = CYb.OrgNr;
    end;
  end;
  return;
end;

global
updating procedure CSVBankTRIn(record RcVc RepSpec)
begin
  string 255 inline;
  record BankTRVc BTRr;
  Integer col;
  record CYBlock CYb;
    
  BlockLoad(CYb);
  if (RepSpec.flags[0]!=0) then begin
    NextImportLine(true);
  end;
  while (TestEOF==false) begin
    inline = ImportField;
    RecordNew(BTRr);
    col = 1;
    ImportColumn(CYb,inline,col,RepSpec.f20,RepSpec.AccStr,RepSpec.f1,RepSpec.Stext,RepSpec.FirstAcc,RepSpec.LastAcc,BTRr); col = col + 1;
    ImportColumn(CYb,inline,col,RepSpec.f20,RepSpec.AccStr,RepSpec.f2,RepSpec.Stext,RepSpec.FirstAcc,RepSpec.LastAcc,BTRr); col = col + 1;
    ImportColumn(CYb,inline,col,RepSpec.f20,RepSpec.AccStr,RepSpec.f3,RepSpec.Stext,RepSpec.FirstAcc,RepSpec.LastAcc,BTRr); col = col + 1;
    ImportColumn(CYb,inline,col,RepSpec.f20,RepSpec.AccStr,RepSpec.f4,RepSpec.Stext,RepSpec.FirstAcc,RepSpec.LastAcc,BTRr); col = col + 1;
    ImportColumn(CYb,inline,col,RepSpec.f20,RepSpec.AccStr,RepSpec.f5,RepSpec.Stext,RepSpec.FirstAcc,RepSpec.LastAcc,BTRr); col = col + 1;
    ImportColumn(CYb,inline,col,RepSpec.f20,RepSpec.AccStr,RepSpec.f6,RepSpec.Stext,RepSpec.FirstAcc,RepSpec.LastAcc,BTRr); col = col + 1;
    ImportColumn(CYb,inline,col,RepSpec.f20,RepSpec.AccStr,RepSpec.f7,RepSpec.Stext,RepSpec.FirstAcc,RepSpec.LastAcc,BTRr); col = col + 1;
    ImportColumn(CYb,inline,col,RepSpec.f20,RepSpec.AccStr,RepSpec.f8,RepSpec.Stext,RepSpec.FirstAcc,RepSpec.LastAcc,BTRr); col = col + 1;
    ImportColumn(CYb,inline,col,RepSpec.f20,RepSpec.AccStr,RepSpec.f9,RepSpec.Stext,RepSpec.FirstAcc,RepSpec.LastAcc,BTRr); col = col + 1;
    ImportColumn(CYb,inline,col,RepSpec.f20,RepSpec.AccStr,RepSpec.f10,RepSpec.Stext,RepSpec.FirstAcc,RepSpec.LastAcc,BTRr); col = col + 1;

    if (BTRr.Sum!=0) then begin
      BTRr.SerNr = NextSerNr("BankTRVc",BTRr.TransDate,-1,false,"");
      if (BTRr.SerNr>0) then begin
        RecordStore(BTRr,false);
      end;
    end;
    if (NextImportLine(true)) then begin
    end;
  end;
  return;
end;

global
updating procedure BankTRIn(record RcVc RepSpec)
begin
  switch (RepSpec.ArtMode) begin
    case 0: OFXBankTRIn(RepSpec);
    case 1: CSVBankTRIn(RepSpec);
  end;
  return;
end;