external updating procedure AddRowFormDefOnImport(var record FormDefVc,row InvDefBlock);
external updating procedure StoreFormDefOnImport(record FormDefVc,string,string,string,string,string);
external procedure ImportInvDefBlockRow(var row InvDefBlock);

global
updating procedure ReadImportTagCredVIDefBlock(string thetag)
begin
  record CredVIDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"CredVIForm","WayListRClass","CredVIFClass","modPL","");
  return;
end;

global
updating procedure ReadImportTagWHCertDefBlock(string thetag)
begin
  record WHCertDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"WHCertificateForm","WHCertificateRClass","WHCertificateFClass","modPL","");
  return;
end;

global
updating procedure ReadImportTagWOrdDefBlock(string thetag)
begin
  record WOrdDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"WOrdForm","WOrdRClass","WOrdFClass","modSVO","");
  return;
end;

global
updating procedure ReadImportTagWSDefBlock(string thetag)
begin
  record WSDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"WSForm","WSRClass","WSFClass","modSVO","");
  return;
end;

global
updating procedure ReadImportTagInStaDefBlock(string thetag)
begin
  record InStaDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"InStaForm","IntraStaRClass","InStaFClass","modSL","");
  return;
end;

global
updating procedure ReadImportTagInStaPuDefBlock(string thetag)
begin
  record InStaPuDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"InStaPuForm","IntraStaPuRClass","InStaPuFClass","modPL","");
  return;
end;

global
updating procedure ReadImportTagItemLabelDefBlock(string thetag)
begin
  record ItemLabelDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"ItemLabelForm","ItemLabelRClass","ItemLabelFClass","modIN","");
  return;
end;

global
updating procedure ReadImportTagOwnChkLabDefBlock(string thetag)
begin
  record OwnChkLabDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"OwnChkLabForm","OwnChkLabRClass","OwnChkLabFClass","modCheck","");
  return;
end;

global
updating procedure ReadImportTagPalletLabDefBlock(string thetag)
begin
  record PalletLabDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"PalletLabForm","PalletLabRClass","PalletLabFClass","modWHM","");
  return;
end;

global
updating procedure ReadImportTagPLBookDefBlock(string thetag)
begin
  record PLBookDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"PLBookForm","PurchB3RClass","PLBookFClass","modPL","");
  return;
end;

global
updating procedure ReadImportTagProdLabelDefBlock(string thetag)
begin
  record ProdLabelDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"ProdLabelForm","ProdLabelRClass","ProdLabelFClass","modProd","");
  return;
end;

global
updating procedure ReadImportTagSHLabDefBlock(string thetag)
begin
  record SHLabDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"SHLabForm","SHLabRClass","SHLabFClass","modIN","");
  return;
end;

global
updating procedure ReadImportTagSLBookDefBlock(string thetag)
begin
  record SLBookDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"SLBookForm","SalesB2RClass","SLBookFClass","modSL","");
  return;
end;

global
updating procedure ReadImportTagVePerDefBlock(string thetag)
begin
  record VePerDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"VEPerForm","VEPerRClass","VEPerFClass","modPL","");
  return;
end;

global
updating procedure ReadImportTagroundoff2(string thetag)
begin
  record RoundBlock Roundr;
  
  if (NextImportLine(false)) begin
    Roundr.RndTotal = StringToInt(ImportField);
    Roundr.RndVat = StringToInt(ImportField);
    Roundr.RndFIFO = StringToInt(ImportField);
    Roundr.Discount = StringToInt(ImportField);
    Roundr.VATCalcWay = StringToInt(ImportField);
    Roundr.RndDefaultDecs = StringToInt(ImportField);
    Roundr.RndDefaultStep = StringToInt(ImportField);
    Roundr.RndDefaultMode = StringToInt(ImportField);
    Roundr.RndDefaultDirec = StringToInt(ImportField);
    Roundr.RndDefaultCurDecs = StringToInt(ImportField);
    Roundr.RndDefaultCurStep = StringToInt(ImportField);
    Roundr.RndDefaultCurMode = StringToInt(ImportField);
    Roundr.RndDefaultCurDirec = StringToInt(ImportField);
    Roundr.RndTotalDecs = StringToInt(ImportField);
    Roundr.RndTotalStep = StringToInt(ImportField);
    Roundr.RndTotalMode = StringToInt(ImportField);
    Roundr.RndTotalDirec = StringToInt(ImportField);
    Roundr.RndVATDecs = StringToInt(ImportField);
    Roundr.RndVATStep = StringToInt(ImportField);
    Roundr.RndVATMode = StringToInt(ImportField);
    Roundr.RndVATDirec = StringToInt(ImportField);
    Roundr.RndCostDecs = StringToInt(ImportField);
    Roundr.RndCostStep = StringToInt(ImportField);
    Roundr.RndCostMode = StringToInt(ImportField);
    Roundr.RndCostDirec = StringToInt(ImportField);
    Roundr.RndRowsumDecs = StringToInt(ImportField);
    Roundr.RndRowsumStep = StringToInt(ImportField);
    Roundr.RndRowsumMode = StringToInt(ImportField);
    Roundr.RndRowsumDirec = StringToInt(ImportField);
    BlockStore(Roundr);
  end;
  
  return;
end;

global
updating procedure ReadImportTagCashierDefBlock(string thetag)
begin
  record CashierDefBlock CashierDefr;
  
  if (NextImportLine(false)) begin
    CashierDefr.DefCustCode = ImportField;
    CashierDefr.POSNr = StringToLongint(ImportField);
    CashierDefr.CredAcc = ImportField;
    CashierDefr.WriteOffAcc = ImportField;
    CashierDefr.StartFromLastPOSBal = StringToInt(ImportField);
    CashierDefr.PrintDetNLTrans = StringToInt(ImportField);
    CashierDefr.Printer = StringToInt(ImportField);
    CashierDefr.TipPMCode = ImportField;
    CashierDefr.InclTipInCashup = StringToInt(ImportField);
    CashierDefr.InclOpenInvCashup = StringToInt(ImportField);
    CashierDefr.RequireOpenSession = StringToInt(ImportField);
    CashierDefr.DefInvoiceField = StringToInt(ImportField);
    CashierDefr.UpdStockMaint = StringToInt(ImportField);
    CashierDefr.UpdStockMaintTime = StringToTime(ImportField);
    CashierDefr.CashSalesToFiscalControlUnit = StringToInt(ImportField);
    CashierDefr.MultipleSessionsPerLocalMachine = StringToInt(ImportField);
    BlockStore(CashierDefr);
  end;
  
  return;
end;

global
updating procedure ReadImportTagDefCashBlock(string thetag)
begin
  record DefCashBlock DCb;
  
  if (NextImportLine(false)) begin
    DCb.DefCashPayMode = ImportField;
    DCb.DefCCPayMode = ImportField;
    DCb.DefGCSPayMode = ImportField;
    DCb.DefGCRPayMode = ImportField;
    DCb.DefGCSVATCode = ImportField;
    DCb.DefGCRVATCode = ImportField;
    DCb.DefCashPayDeal = ImportField;
    BlockStore(DCb);
  end;  
  return;
end;

global
updating procedure ReadImportTagAutoActionBlock(string thetag)
begin
  record AutoActionBlock AAb;
  
  if (NextImportLine(false)) begin
    AAb.OrderPrinting = StringToInt(ImportField);
    AAb.ShipPrinting = StringToInt(ImportField);
    AAb.InvoicePrinting = StringToInt(ImportField);
    AAb.TransactionPrinting = StringToInt(ImportField);
    AAb.InvoiceGen = StringToInt(ImportField);
    AAb.Or2Printing = StringToInt(ImportField);
    AAb.FreightPrinting = StringToInt(ImportField);
    AAb.EDIInvoice = StringToInt(ImportField);
    AAb.COInvoicePrinting = StringToInt(ImportField);
    AAb.CashInvoicePrinting = StringToInt(ImportField);
    AAb.PUPalletLabelPrinting = StringToInt(ImportField);
    AAb.ProdPalletLabelPrinting = StringToInt(ImportField);
    AAb.BarTabPrinting = StringToInt(ImportField);
    BlockStore(AAb);
  end;  
  return;
end;

global
updating procedure ReadImportTagBaseCurBlock(string thetag)
begin
  record BaseCurBlock BaseCurr;
  
  if (NextImportLine(false)) begin
    BaseCurr.BaseCur1 = ImportField;
    BaseCurr.BaseCur2 = ImportField;
    BaseCurr.StdBaseCur = ImportField;
    BaseCurr.NotBase1 = StringToInt(ImportField);
    BaseCurr.NotBase2 = StringToInt(ImportField);
    BlockStore(BaseCurr);
  end;
  
  return;
end;

global
updating procedure ReadImportTagsysformat(string thetag)
begin
  record SysFormatBlock SysFormatr;

  if (NextImportLine(true)) then begin end;
  SysFormatr.dateOrder = StringToInt(ImportField);
  SysFormatr.leadZday = StringToInt(ImportField);
  SysFormatr.leadZmonth = StringToInt(ImportField);
  SysFormatr.century = StringToInt(ImportField);
  SysFormatr.dateSep = ImportField;
  SysFormatr.decimalPt = ImportField;
  SysFormatr.thousSep = ImportField;
  BlockStore(SysFormatr);  
  return;
end;

global
updating procedure ReadImportTagARSDefBlock(string thetag)
begin
  record ARSDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"ARSForm","ARSRClass","ARSFClass","modSL","");
  return;
end;

global
updating procedure ReadImportTagAccBlock(string thetag)
begin
  record AccBlock Accr;
  
  if (NextImportLine(false)) then begin
    Accr.ARAcc = ImportField;
    Accr.RndAcc = ImportField;
    Accr.CredAcc = ImportField;
    Accr.ERebAcc = ImportField;
    Accr.VATBAcc = ImportField;
    Accr.CashAcc = ImportField;
    Accr.VATERAcc = ImportField;
    Accr.DoCosts = StringToInt(ImportField);
    Accr.IVRef = ImportField;
    Accr.IPRef = ImportField;
    Accr.RevInclVAT = StringToInt(ImportField);
    Accr.SLAccTest = StringToInt(ImportField);
    Accr.ExtraCostAcc = ImportField;
    Accr.RateGainAcc = ImportField;
    Accr.RateLossAcc = ImportField;
    Accr.RateRndOffAcc = ImportField;
    Accr.ARUseObj = StringToInt(ImportField);
    Accr.InvUpdStock = StringToInt(ImportField);
    Accr.CredUpdStockx = StringToInt(ImportField);
    Accr.StockAcc = ImportField;
    Accr.PurchAcc = ImportField;
    Accr.StockCostAcc = ImportField;
    Accr.DomSalesAcc = ImportField;
    Accr.EUSalesAcc = ImportField;
    Accr.ExpSalesAcc = ImportField;
    Accr.OnAccAcc = ImportField;
    Accr.VATCodeDom = ImportField;
    Accr.VATCodeEU = ImportField;
    Accr.VATCodeExp = ImportField;
    Accr.StockGainAcc = ImportField;
    Accr.VATCodeCtrl = StringToInt(ImportField);
    Accr.BasePriceInclVAT = StringToInt(ImportField);
    Accr.PUExtraAcc = ImportField;
    Accr.PUFreightAcc = ImportField;
    Accr.PUCustomsAcc = ImportField;
    Accr.OnAccVATAcc = ImportField;
    Accr.ReturnedAcc = ImportField;
    Accr.IPBookVAT = StringToInt(ImportField);
    Accr.DiscCashVAT = StringToInt(ImportField);
    Accr.ARonTR = StringToInt(ImportField);
    Accr.EMURndOffAcc = ImportField;
    Accr.EMUWriteOffAcc = ImportField;
    Accr.BaseRoundOffAcc = ImportField;
    Accr.ProdICostAcc = ImportField;
    Accr.ProdWCostAcc = ImportField;
    Accr.CashBackAcc = ImportField;
    Accr.DemandPPNo = StringToInt(ImportField);
    Accr.CommisionAcc = ImportField;
    Accr.IPCostObj = ImportField;
    Accr.PUCost1 = ImportField;
    Accr.PUCost2 = ImportField;
    Accr.PUCost3 = ImportField;
    Accr.PUCost4 = ImportField;
    Accr.PUCost5 = ImportField;
    Accr.UpdBaseRate = StringToInt(ImportField);
    Accr.UpdForeginRate = StringToInt(ImportField);
    Accr.CorSalesAcc = StringToInt(ImportField);
    Accr.CredInvWithNo = StringToInt(ImportField);
    Accr.ForceUniquePP = StringToInt(ImportField);
    Accr.SalesVAT = ImportField;
    Accr.SalesTAX = ImportField;
    Accr.BadARAcc = ImportField;
    Accr.CredDomSalesAcc = ImportField;
    Accr.CredEUSalesAcc = ImportField;
    Accr.CredExpSalesAcc = ImportField;
    Accr.CredVATCodeDom = ImportField;
    Accr.CredVATCodeEU = ImportField;
    Accr.CredVATCodeExp = ImportField;
    Accr.CredSalesAccs = StringToInt(ImportField);
    Accr.INTransferAcc = ImportField;
    Accr.IPTransBankRowPerCU = StringToInt(ImportField);
    Accr.BankRateGainAcc = ImportField;
    Accr.BankRateLossAcc = ImportField;
    Accr.PreIPVATAcc = ImportField;
    Accr.PreIPBookVAT = StringToInt(ImportField);
    Accr.BookCreditOnPurchAcc = StringToInt(ImportField);
    Accr.ObjectonBankAcc = StringToInt(ImportField);
    Accr.NoWarnOnDupVATnoOnCU = StringToInt(ImportField);
    Accr.NoTAXonVAT = StringToInt(ImportField);
    Accr.ChronologyforInvNo = StringToInt(ImportField);
    Accr.SkipObjectsOnIVFromHeader = StringToInt(ImportField);
    Accr.VATUseObj = StringToInt(ImportField);
    Accr.IntARAcc = ImportField;
    Accr.IntDomSalesAcc = ImportField;
    Accr.ItemPriceVar = ImportField;
    Accr.Cost1PriceVar = ImportField;
    Accr.Cost2PriceVar = ImportField;
    Accr.Cost3PriceVar = ImportField;
    Accr.Cost4PriceVar = ImportField;
    Accr.Cost5PriceVar = ImportField;
    Accr.CustomsPriceVar = ImportField;
    Accr.FreightPriceVar = ImportField;
    Accr.BookPriceVar = StringToInt(ImportField);
    Accr.RetPUAcc = ImportField;
    Accr.UsePUAccInRetPU = StringToInt(ImportField);
    Accr.BookedDiscount = StringToInt(ImportField);
    Accr.DiscountAcc = ImportField;
    Accr.NoOverPayIV = StringToInt(ImportField);
    Accr.StockLossAcc = ImportField;
    Accr.EUStockCostAcc = ImportField;
    Accr.ExpStockCostAcc = ImportField;
    Accr.EUPurchAcc = ImportField;
    Accr.ExpPurchAcc = ImportField;
    Accr.BookVATOnlyFromDownpayment = StringToInt(ImportField);
    Accr.BookVATonRateGain = StringToInt(ImportField);
    Accr.NoAutAutoTransOnCredIV = StringToInt(ImportField);
    Accr.SetDisputedFlagsOnCredIV = StringToInt(ImportField);
    Accr.PrintNegAmountsCredNote = StringToInt(ImportField);
    Accr.DueDateBasedOnServDelDate = StringToInt(ImportField);
    Accr.NoPasteVATToIP = StringToInt(ImportField);
    Accr.DiscardedAccount = ImportField;
    Accr.BookRateGainPerIPRow = StringToInt(ImportField);
    Accr.RndLossAcc = ImportField;
    Accr.WriteOffLossAcc = ImportField;
    Accr.ConsigStockAcc = ImportField;
    Accr.ConsigPurchAcc = ImportField;
    Accr.TotalwoTAX = StringToInt(ImportField);
    Accr.QualityControl = StringToInt(ImportField);
    Accr.SRVarAcc = ImportField;
    Accr.BBVarAcc = ImportField;
    Accr.InPriceVarAcc = ImportField;
    Accr.Tax1TmpAcc = ImportField;
    Accr.AllowItemWOCommodity = StringToInt(ImportField);
    Accr.ConnectCreditNotetoVI = StringToInt(ImportField);
    Accr.PostIVVATonVATCorr = StringToInt(ImportField);
    Accr.RetPUVar = ImportField;
    Accr.DisassembleProdVar = ImportField;
    Accr.DropShipCOSAccrualAcc = ImportField;
    Accr.DropSHVar = ImportField;
    Accr.CashSalesToFiscalControlUnit = StringToInt(ImportField);
    Accr.PostWriteOffVAT = StringToInt(ImportField);
    Accr.TaxTemplateCode = ImportField;
    Accr.TaxTemplateCodeEU = ImportField;
    Accr.TaxTemplateCodeExp = ImportField;
    Accr.ForexTRAcc = ImportField;
    
    BlockStore(Accr);
  end;
  
  return;
end;

global
updating procedure ReadImportTagVarietyBlock(string thetag)
begin
  record VarietyBlock Varietyr;
  
  if (NextImportLine(false)) then begin
    Varietyr.OpenVarPaste = StringToInt(ImportField);
    Varietyr.UseInfoFromRow = StringToInt(ImportField);
    Varietyr.AutoNewBarCode = StringToInt(ImportField);
    Varietyr.AutoNewPurItem = StringToInt(ImportField);
    
    BlockStore(Varietyr);
  end;
  
  return;
end;

global
updating procedure ReadImportTagMainStockBlock(string thetag)
begin
  record MainStockBlock MainStockr;
  
  if (NextImportLine(false)) then begin
    MainStockr.MainStock = ImportField;
    MainStockr.dontAllowOvership = StringToInt(ImportField);
    MainStockr.requireLocation = StringToInt(ImportField);
    MainStockr.DefServiceLoc = ImportField;
    MainStockr.updateSVGM = StringToInt(ImportField);
    MainStockr.UpdateAvailable = StringToInt(ImportField);
    MainStockr.CalcFIFO = StringToInt(ImportField);
    MainStockr.Chronology = StringToInt(ImportField);
    MainStockr.LastOKNr = StringToVal(ImportField,M4Val);
    MainStockr.DelivPlainItems = StringToInt(ImportField);
    MainStockr.AllowInvBeforeShip = StringToInt(ImportField);
    MainStockr.DelivSetBatch = StringToInt(ImportField);
    MainStockr.DelOrdQty = StringToInt(ImportField);
    MainStockr.RecevPlainItems = StringToInt(ImportField);
    MainStockr.UnitConvCalc = StringToInt(ImportField);
    MainStockr.StartClass = ImportField;
    MainStockr.NoSerOnPU = StringToInt(ImportField);
    MainStockr.DemandPosition = StringToInt(ImportField);
    MainStockr.SetDelDateToCurrent = StringToInt(ImportField);
    MainStockr.DontCalcWAPerLoc = StringToInt(ImportField);
    MainStockr.dontAllowOverreceive = StringToInt(ImportField);
    MainStockr.AllowInvBeforePU = StringToInt(ImportField);
    MainStockr.SortBatchOnBestBefore = StringToInt(ImportField);
    MainStockr.xForcePlanDelDate = StringToInt(ImportField);
    MainStockr.SamePriceforItemonSR = StringToInt(ImportField);
    MainStockr.PONoOnPURowsOnly = StringToInt(ImportField);
    MainStockr.StockCorectAfter = StringToDate(ImportField);
    MainStockr.RecalcStockNeeded = StringToInt(ImportField);
    MainStockr.ChronologyOkOnly = StringToInt(ImportField);
    
    BlockStore(MainStockr);
  end;
  
  return;
end;

global
updating procedure ReadImportTagOPTBlock(string thetag)
begin
  record OPTBlock OPTr;
  
  if (NextImportLine(false)) then begin
    OPTr.DOSFlag = StringToInt(ImportField);
    OPTr.OnDUEDate = StringToInt(ImportField);
    OPTr.Bankfees = StringToInt(ImportField);
    OPTr.NoMixCurOP = StringToInt(ImportField);
    OPTr.NoMixCurIP = StringToInt(ImportField);
    OPTr.ExpPath = ImportField;
    OPTr.MicroTKey1 = StringToLongint(ImportField);
    OPTr.MicroTKey2 = StringToLongint(ImportField);
    OPTr.MicroTKey3 = StringToLongint(ImportField);
    OPTr.MicroTKey4 = StringToLongint(ImportField);
    OPTr.IncChequeNo = StringToInt(ImportField);
    OPTr.BatchBooking = 1;    
    BlockStore(OPTr);
  end;  
  return;
end;

global
updating procedure ReadImportTagCustomerSettingBlock(string thetag)
begin
  record CustomerSettingBlock CustomerSettingr;
  
  if (NextImportLine(false)) then begin
    CustomerSettingr.DefCustCat = ImportField;
    CustomerSettingr.DefPayDeal = ImportField;
    CustomerSettingr.NoLetterPosting = StringToInt(ImportField);
    CustomerSettingr.NoMailPosting = StringToInt(ImportField);
    CustomerSettingr.OnAccount = StringToInt(ImportField);
    CustomerSettingr.AllowLogin = StringToInt(ImportField);
    CustomerSettingr.DemandCustomerCategory = StringToInt(ImportField);
    CustomerSettingr.ShowRegNr1notVATNr = StringToInt(ImportField);
    CustomerSettingr.DontUseAddrLookup = StringToInt(ImportField);
    CustomerSettingr.Region = ImportField;
    CustomerSettingr.CurrentUserasSalesman = 1;    
    BlockStore(CustomerSettingr);
  end;  
  return;
end;

updating procedure AddReportingPeriodRecord(row PeriodBlock Periodrw)
begin
  record ReportingPeriodVc RPr;

  RPr.Code = Periodrw.CodeStr;
  RPr.StartDate = Periodrw.FromDate;
  RPr.EndDate = Periodrw.ToDate;
  RPr.Comment = Periodrw.Comment;
  RPr.PeriodType = kPeriodTypeBlank;
  RPr.Period2Str = RPr.StartDate & ":" & RPr.EndDate;
  RecordStore(RPr,false);
  return;
end;
/*
global
updating procedure ReadImportTagperiods(string thetag)
begin
  ImportBlock("PeriodBlock");
  return;
end;
*/
global
updating procedure ReadImportTagperiods(string thetag)
begin
  record PeriodBlock Periodr;
  row PeriodBlock Periodrw;
  Integer i,rwcnt
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(Periodr,Periodrw,1);
    Periodrw.FromDate = StringToDate(ImportField);
    Periodrw.ToDate = StringToDate(ImportField);
    Periodrw.CodeStr = ImportField;
    Periodrw.Comment = ImportField;
    MatRowPut(Periodr,rwcnt,Periodrw);
    AddReportingPeriodRecord(Periodrw);
    rwcnt = rwcnt + 1;
  end;
  
  BlockStore(Periodr);
  
  return;
end;

global
updating procedure ReadImportTagQTMailBlock(string thetag)
begin
  record MailTextVc MailTextr;
  
  if (NextImportLine(false)) then begin
    MailTextr.Register = RegisterInterfaceName("QTVc");
    MailTextr.Header = ImportField;
    MailTextr.FirstTxt = ImportField;
    MailTextr.LastTxt = ImportField;
    if (RecordImportStore(MailTextr,false)) then begin
    end;
  end;  
  return;
end;

global
updating procedure ReadImportTagCashierDefBlock2(string thetag)
begin
  record CashierDefBlock CashierDefr;
  
  if (NextImportLine(false)) then begin
    ImportField;
    ImportField;
    CashierDefr.DefCustCode = ImportField;
    CashierDefr.POSNr = StringToLongint(ImportField);
    CashierDefr.CredAcc = ImportField;
    CashierDefr.WriteOffAcc = ImportField;
    CashierDefr.StartFromLastPOSBal = StringToInt(ImportField);
    CashierDefr.PrintDetNLTrans = StringToInt(ImportField);
    CashierDefr.Printer = StringToInt(ImportField);
    CashierDefr.TipPMCode = ImportField;
    CashierDefr.InclTipInCashup = StringToInt(ImportField);
    CashierDefr.InclOpenInvCashup = StringToInt(ImportField);
    CashierDefr.RequireOpenSession = StringToInt(ImportField);
    CashierDefr.DefInvoiceField = StringToInt(ImportField);
    CashierDefr.UpdStockMaint = StringToInt(ImportField);
    CashierDefr.UpdStockMaintTime = StringToTime(ImportField);
    CashierDefr.CashSalesToFiscalControlUnit = StringToInt(ImportField);
    CashierDefr.MultipleSessionsPerLocalMachine = StringToInt(ImportField);
    CashierDefr.DiscountItem = ImportField;
    CashierDefr.NoChangesPOSOnLiveSyncClient = StringToInt(ImportField);
    CashierDefr.CashupMaint = StringToInt(ImportField);
    CashierDefr.CashupMaintInterval = StringToTime(ImportField);
    CashierDefr.RestAccBookedDiscount = StringToInt(ImportField);
    CashierDefr.RestAccDiscountAcc = ImportField;
    CashierDefr.RestAccServiceChargeItem = ImportField;
    CashierDefr.RestAccARAcc = ImportField;
    CashierDefr.RequireReturnReason = StringToInt(ImportField);
    CashierDefr.RequireReturnCustomer = StringToInt(ImportField);
    CashierDefr.RestUpdStockMaint = StringToInt(ImportField);
    CashierDefr.RestUpdStockMaintTime = StringToTime(ImportField);
    CashierDefr.RestOKSD = StringToInt(ImportField);
    CashierDefr.RestBasePriceInclVAT = kBasePriceInclVAT;
    BlockStore(CashierDefr);
  end;
  return;
end;

global
updating procedure ReadImportTagPipelinOverviewBlock(string thetag)
begin
  record PipelinOverviewBlock PPb;
  row PipelinOverviewBlock PPbrw;
  Integer i,rwcnt;
  string 255 QuoteClass,ActType,LeadStatus;
  
  rwcnt = 0;
  while (NextImportLine(false)) begin
    ClearRow(PPb,PPbrw,1);
    PPbrw.ColumnName = ImportField;
    QuoteClass = ImportField;
    ActType = ImportField;
    LeadStatus = ImportField;
    if (nonblank(QuoteClass)) then begin
      PPbrw.Register = StringFromStringSet(584,"QTVc");
      PPbrw.RegisterFilter = QuoteClass;
      MatRowPut(PPb,rwcnt,PPbrw);
      rwcnt = rwcnt + 1;
    end;
    if (nonblank(ActType)) then begin
      PPbrw.Register = StringFromStringSet(584,"ActVc");
      PPbrw.RegisterFilter = ActType;
      MatRowPut(PPb,rwcnt,PPbrw);
      rwcnt = rwcnt + 1;
    end;
    if (nonblank(LeadStatus)) then begin
      PPbrw.Register = StringFromStringSet(584,"RCAEC6CB623613711B4350336D3571BA6302203D8Vc");
      PPbrw.RegisterFilter = LeadStatus;
      MatRowPut(PPb,rwcnt,PPbrw);
      rwcnt = rwcnt + 1;
    end;
  end;
  BlockStore(PPb);  
  return;
end;

global
updating procedure ReadImportTagPipeOverBlock2(string thetag)
begin
  record PipelinOverviewBlock POb;
  row PipelinOverviewBlock PObrw;
  Integer i,rwcnt
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(POb,PObrw,1);
    PObrw.ViewName = ImportField;
    PObrw.ColumnName = ImportField;
    PObrw.Register = ImportField;
    PObrw.RegisterFilter = ImportField;
    PObrw.Amounts = kAmountIncludingVAT;
    MatRowPut(POb,rwcnt,PObrw);
    rwcnt = rwcnt + 1;
  end;  
  BlockStore(POb);  
  return;
end;

procedure ReadImportTagUserPipelinOverviewVcRecord(record UserPipelinOverviewVc UPOr)
begin
  string 255 tstr;
  row UserPipelinOverviewVc UPOrw;
  integer rwcnt;
  
  RecordNew(UPOr);
  UPOr.UserCode = ImportField;
  UPOr.UserName = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(UPOr,UPOrw,1);
    UPOrw.ViewName = ImportField;
    UPOrw.ColumnName = ImportField;
    UPOrw.Register = ImportField;
    UPOrw.RegisterFilter = ImportField;
    UPOrw.Amounts = kAmountIncludingVAT;
    MatRowPut(UPOr,rwcnt,UPOrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagUserPipelinOverviewVc(string thetag)
begin
  record UserPipelinOverviewVc UPOr;
  
  while (NextImportLine(false)) begin
    ReadImportTagUserPipelinOverviewVcRecord(UPOr);
    RecordImportStore(UPOr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrUserPipelinOverviewVc(Integer compnr,string thetag)
begin
  record UserPipelinOverviewVc UPOr;
  
  UPOr.UserCode = ImportField;
  ReadRecordIdStrUserPipelinOverviewVc = BuildRecordIdStr(UPOr,compnr);
  return;
end;

global
updating procedure ReadImportTagRDBRegsBlock(string thetag)
begin
  record RDBRegsBlock RDBRb;
  row RDBRegsBlock RDBRbrw;
  Integer i,rwcnt
  
  rwcnt = 0;
  while (NextImportLine(false)) begin
    ClearRow(RDBRb,RDBRbrw,1);
    RDBRbrw.RegCode = ImportField;
    RDBRbrw.Valid = StringToInt(ImportField);
    RDBRbrw.Valid = 0;
    MatRowPut(RDBRb,rwcnt,RDBRbrw);
    rwcnt = rwcnt + 1;
  end;
  BlockStore(RDBRb);
  return;
end;

global
updating procedure ReadImportTagFInvoiceSLBlock(string thetag)
begin
  record FInvoiceSLBlock FInvoiceSLr;
  
  if (NextImportLine(false)) then begin
    FInvoiceSLr.Intermediator = ImportField;
    FInvoiceSLr.BeneficiaryID = ImportField;
    FInvoiceSLr.FInvFormat = 1;    
    BlockStore(FInvoiceSLr);
  end;
  
  return;
end;

global
updating procedure ReadImportTagIntServerTypeBlock(string thetag)
begin
  record IntServerTypeBlock IntServerTyper;
  
  if (NextImportLine(false)) then begin
    IntServerTyper.Server = StringToInt(ImportField);
    IntServerTyper.Server = IntServerTyper.Server + 32;    
    BlockStore(IntServerTyper);
  end;
  
  return;
end;

global
updating procedure ReadImportTagHotelBlock2(string thetag)
begin
  record HotelBlock Hotelb;
  
  if (NextImportLine(false)) then begin
    Hotelb.CheckOut = StringToTime(ImportField);
    Hotelb.ResBridgeAcc = ImportField;
    Hotelb.MBarGroup = ImportField;
    Hotelb.TempBook = StringToInt(ImportField);
    Hotelb.PointSys = StringToInt(ImportField);
    Hotelb.ToResStatus = ImportField;
    Hotelb.CheckIn = StringToTime(ImportField);
    Hotelb.ArtCode = ImportField;
    Hotelb.DomainName = ImportField;
    Hotelb.TelCentrStr1 = ImportField;
    Hotelb.TelCentrStr2 = ImportField;
    Hotelb.GuestMes = ImportField;
    Hotelb.CheckinMes = ImportField;
    Hotelb.CheckoutMes = ImportField;
    Hotelb.ChOutSt = ImportField;
    Hotelb.ChInSt = ImportField;
    Hotelb.CustCat1 = ImportField;
    Hotelb.CustCat2 = ImportField;
    Hotelb.DownPercent = StringToVal(ImportField,M4Qty);
    Hotelb.OverBook = StringToInt(ImportField);
    Hotelb.DiscItem = ImportField;
    Hotelb.DefCUCode = ImportField;
    Hotelb.FromResStatus = ImportField;
    Hotelb.ConfDays = StringToLongint(ImportField);
    Hotelb.DefSt = ImportField;
    Hotelb.DefChargeMode = StringToInt(ImportField);
    Hotelb.xDefInitialCharge = ImportField;
    Hotelb.NoshowStatus = ImportField;
    Hotelb.OutEventGr = ImportField;
    Hotelb.StartNewDay = StringToTime(ImportField);
    Hotelb.BlockStatus = ImportField;
    Hotelb.ForceBookOrigin = StringToInt(ImportField);
    Hotelb.DefResUsage = ImportField;
    Hotelb.SaveInShopBask = StringToInt(ImportField);
    Hotelb.GenItemToInv = ImportField;
    Hotelb.NoOfDaysToNoShow = StringToLongint(ImportField);
    Hotelb.EndOfDay = StringToTime(ImportField);
    Hotelb.SimilarResWarn = StringToInt(ImportField);
    Hotelb.ChargeSource = StringToInt(ImportField);
    Hotelb.AutoCheckInOut = StringToInt(ImportField);
    Hotelb.PriceUpgrade = StringToInt(ImportField);
    Hotelb.DemandGuestOnRes = StringToInt(ImportField);
    Hotelb.IncludePackage = StringToInt(ImportField);
    Hotelb.InclPrelOver = StringToInt(ImportField);
    Hotelb.InclPrelAvail = StringToInt(ImportField);
    Hotelb.GroupWillNotPay = StringToInt(ImportField);
    Hotelb.StoreWithPrice = StringToInt(ImportField);
    Hotelb.DownPayDeal = ImportField;
    Hotelb.CNDCode = ImportField;
    Hotelb.ResPlanDisplay = StringToInt(ImportField);
    Hotelb.ResCodeInGrid = StringToInt(ImportField);
    Hotelb.DefCClassDCode = ImportField;
    Hotelb.RequestPrice = StringToInt(ImportField);
    Hotelb.CClassDCType = ImportField;
    Hotelb.RSCCode = ImportField;
    Hotelb.RequestGuestClass = StringToInt(ImportField);
    Hotelb.DownForMotherRsrv = StringToInt(ImportField);
    Hotelb.DownForMotherRsrvIncDaughDet = StringToInt(ImportField);
    Hotelb.RequestNrOfGuests = StringToInt(ImportField);
    Hotelb.AllotmentSt = ImportField;
    Hotelb.CClassDCTypeChild = ImportField;
    Hotelb.WebDefCust = ImportField;
    Hotelb.WebResStatus = ImportField;
    Hotelb.WebBookOrigin = ImportField;
    Hotelb.WebDefCustCat = ImportField;
    Hotelb.WebDownPayDeal = ImportField;
    Hotelb.WebCNDCode = ImportField;
    Hotelb.WebDownPercent = StringToVal(ImportField,M4Qty);
    Hotelb.WebRSCCode = ImportField;
    Hotelb.WebWaitPayStatus = ImportField;
    Hotelb.WebDeletedStatus = ImportField;
    Hotelb.WebMaxFutureDate = StringToDate(ImportField);
    Hotelb.WebAutoAllocateRoom = StringToInt(ImportField);
    Hotelb.WebDontDelete = StringToInt(ImportField);
    Hotelb.WebIncludeUnavailable = StringToInt(ImportField);
    Hotelb.ForceGuestNationality = StringToInt(ImportField);
    Hotelb.DefVisitPurpose = ImportField;
    Hotelb.ForceVisitPurpose = StringToInt(ImportField);
    Hotelb.PostDiscount = StringToInt(ImportField);
    Hotelb.RackRatePLCode = ImportField;
    Hotelb.InvCurncy = ImportField;
    Hotelb.ClosedResStatus = ImportField;
    Hotelb.BasePriceInclVAT = kBasePriceSystemDefault;
    
    BlockStore(Hotelb);
  end;
  
  return;
end;
