updating procedure SetMailAddrStatus2(record MailVc Mailr,LongInt mailboxnr,Integer status)
begin
  LongInt res,rwcnt,i;
  record MailVc OldMailr;
  row MailVc Mailrw;
  //record ConfVc Confr;
  Boolean dummyf;
  
  //Confr.SerNr = mailboxnr;
  
  //if (ReadFirstMain(Confr,1,true)) then begin
    rwcnt = MatRowCnt(Mailr);
    for (i = 0; i<rwcnt; i = i + 1) begin
      MatRowGet(Mailr,i,Mailrw);
      
//      if (Mailrw.AddrCode==Confr.AddrName) then begin
      if (Mailrw.Mailbox==mailboxnr) then begin
        RecordCopy(OldMailr,Mailr);
        Mailrw.AddrStatus = 1; //status;
        MatRowPut(Mailr,i,Mailrw);
        dummyf = RecordUpdate(OldMailr,Mailr,false);
        goto out;
      end;
    end;
  //end;
  
out:;
  return;
end;

global
updating procedure ReadImportTagMailReadVc()
begin
  record MailReadVc MRr;
  record MailVc Mailr;
  
  while (NextImportLine(false)) begin
    RecordNew(MRr);
    ImportOneRecord(MRr,"MailReadVc");
    
    /*
    MRr.mailSerNr = StringToLongInt(ImportField);
    MRr.mailBoxNr = StringToLongInt(ImportField);
    MRr.accode = StringToInt(ImportField);
    MRr.fDate = StringToDate(ImportField);
    MRr.fTime = StringToTime(ImportField);
    
    RecordNew(Mailr);
    Mailr.SerNr = MRr.mailSerNr;
    if (ReadFirstMain(Mailr,1,true)) then begin
      if (MRr.accode==kMailStatusDeleted) then begin
        SetMailAddrStatus2(Mailr,MRr.mailBoxNr,MRr.accode);
      end;
    end;
    */
    
    if (RecordImportStore(MRr,false)) then begin end;
  end;
  
  return;
end;
