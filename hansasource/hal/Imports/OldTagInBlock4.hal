global
updating procedure InsertYear(var string yearcode,Date fdp,Date edp,Integer firstintyc)
begin
  record YearBlock YearRec;
  row YearBlock yearw;
  Integer rwcnt,i;
  Integer rwnr,curYearYc;

  BlockLoad(YearRec);
  rwcnt = MatRowCnt(YearRec);
  if (rwcnt==0) then begin
    if (firstintyc==0) then begin
      curYearYc = 50;
    end else begin
      curYearYc = firstintyc;//50
    end;
    rwnr = 0;
    goto L22;
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(YearRec,i,yearw);
    if (edp<yearw.StartDate) then begin
      curYearYc = yearw.IntYc - 5;
      rwnr = i;
      goto L22;
    end;
    if ((fdp==yearw.StartDate) and
        (edp==yearw.EndDate)) then begin
      yearcode = yearw.YearCode;
      goto L99;
    end;
  end;
  MatRowGet(YearRec,i-1,yearw);
  curYearYc = yearw.IntYc + 5;
  rwnr = i;
L22:;
  ClearRow(YearRec,yearw,1);
  yearw.YearCode = yearcode;
  yearw.StartDate = fdp;
  yearw.EndDate = edp;
  yearw.IntYc = curYearYc;
  MatRowPut(YearRec,rwnr,yearw);
  BlockStore(YearRec);
L99:;
  return;
end;

global
updating procedure ReadImportTagyearcode1(string thetag)
begin
  string 5 curYearCode;
  Date curYearstartdate;
  Date curYearenddate;
  Integer intyc;

  while (NextImportLine(false)) begin
    curYearCode = ImportField;
    curYearstartdate = StringToDate(ImportField);
    curYearenddate = StringToDate(ImportField);
    intyc = StringToInt(ImportField);
    InsertYear(curYearCode,curYearstartdate,curYearenddate,intyc);
  end;  
  return;
end;

global
updating procedure ReadImportTagCostModelBlock()
begin
  string 255 tstr;
  record CostAccBlock CAb;
  Integer oldcostmodel;

  BlockLoad(CAb);
  if (NextImportLine(true)) then begin end;
  oldcostmodel = StringToInt(ImportField);
  switch (oldcostmodel) begin
    case 1: CAb.PrimaryCostModel = 1;
    case 2: CAb.PrimaryCostModel = 2;
    case 4: CAb.PrimaryCostModel = 4;
    case 5: CAb.PrimaryCostModel = 3;
  end;
  CAb.QueuedCostModel = 0;
  CAb.CostPerc = StringToVal(ImportField,M4Qty);
  CAb.NoNLCostOnShip = StringToInt(ImportField);
  if (CAb.NoNLCostOnShip!=1) then begin
    CAb.NoNLCostOnShip = 0;
  end;
  BlockStore(CAb);
  return;
end;

global
procedure BlockFromOldbln(Integer oldbln,var string res)
begin
  res = "";      
  if (oldbln==140) then begin res = "InvDefBlock"; end;
  if (oldbln==141) then begin res = "RemDefBlock"; end;
  if (oldbln==142) then begin res = "IIDefBlock"; end;
  if (oldbln==143) then begin res = "CashDefBlock"; end;
  if (oldbln==144) then begin res = "CredDefBlock"; end;
  if (oldbln==146) then begin res = "Sh2DefBlock"; end;
  if (oldbln==147) then begin res = "PODefBlock"; end;
  if (oldbln==148) then begin res = "ARSDefBlock"; end;
//  if (oldbln==150) then begin res = "KeyBlock"; end;
  if (oldbln==151) then begin res = "OrdDefBlock"; end;
  if (oldbln==152) then begin res = "ProdSerBlock"; end;
  if (oldbln==154) then begin res = "OPDDefBlock"; end;
  if (oldbln==157) then begin res = "CuPerDefBlock"; end;
  if (oldbln==158) then begin res = "Sh3DefBlock"; end;
  if (oldbln==160) then begin res = "Sh1DefBlock"; end;
  if (oldbln==163) then begin res = "RepDefBlock"; end;
  if (oldbln==164) then begin res = "Key1Block"; end;
  if (oldbln==165) then begin res = "Key2Block"; end;
  if (oldbln==166) then begin res = "Key3Block"; end;
  if (oldbln==167) then begin res = "Key4Block"; end;
  if (oldbln==168) then begin res = "Key5Block"; end;
  if (oldbln==174) then begin res = "CuLabDefBlock"; end;
  if (oldbln==178) then begin res = "QTDefBlock"; end;
  if (oldbln==180) then begin res = "Or2DefBlock"; end;
  if (oldbln==183) then begin res = "Inv1DefBlock"; end;
  if (oldbln==184) then begin res = "Inv2DefBlock"; end;
  if (oldbln==185) then begin res = "Inv3DefBlock"; end;
  if (oldbln==187) then begin res = "IVSerBlock"; end;
  if (oldbln==188) then begin res = "IPSerBlock"; end;
  if (oldbln==189) then begin res = "VISerBlock"; end;
  if (oldbln==190) then begin res = "OPSerBlock"; end;
  if (oldbln==191) then begin res = "SMSerBlock"; end;
  if (oldbln==192) then begin res = "ORSerBlock"; end;
  if (oldbln==193) then begin res = "SHSerBlock"; end;
  if (oldbln==194) then begin res = "PUSerBlock"; end;
  if (oldbln==195) then begin res = "QTSerBlock"; end;
  if (oldbln==196) then begin res = "TSSerBlock"; end;
  if (oldbln==197) then begin res = "TRSerBlock"; end;
  if (oldbln==198) then begin res = "POSerBlock"; end;
  if (oldbln==199) then begin res = "POCQStatSerBlock"; end;
  if (oldbln==200) then begin res = "IVCashDefBlock"; end;
  if (oldbln==201) then begin res = "RetPUSerBlock"; end;

  if (oldbln==204) then begin res = "StockMovSerBlock"; end;
  
  if (oldbln==207) then begin res = "StockMovDefBlock"; end;
  
  if (oldbln==209) then begin res = "ItemLabelDefBlock"; end;
  if (oldbln==210) then begin res = "PurchaseDefBlock"; end;

  if (oldbln==212) then begin res = "PULabDefBlock"; end;
  
  if (oldbln==215) then begin res = "ProjectDefBlock"; end;
  
  if (oldbln==217) then begin res = "ATLabDefBlock"; end;
  
  if (oldbln==221) then begin res = "SHLabDefBlock"; end;
  if (oldbln==222) then begin res = "AdrLabDefBlock"; end;
  if (oldbln==225) then begin res = "ProdOrderDefBlock"; end;
  if (oldbln==226) then begin res = "TimeSheetDefBlock"; end;
  if (oldbln==228) then begin res = "ContractDefBlock"; end;
  if (oldbln==229) then begin res = "CLInDefBlock"; end;
  if (oldbln==230) then begin res = "CLOutDefBlock"; end;
  if (oldbln==231) then begin res = "CLInSerBlock"; end;
  if (oldbln==232) then begin res = "CLOutSerBlock"; end;
  if (oldbln==233) then begin res = "InkassoDefBlock"; end;
  if (oldbln==234) then begin res = "SDSerBlock"; end;
  if (oldbln==235) then begin res = "PersPayDefBlock"; end;
  if (oldbln==240) then begin res = "SDDefBlock"; end;
  if (oldbln==241) then begin res = "ActDefBlock"; end;
  if (oldbln==243) then begin res = "LetDefBlock"; end;
  if (oldbln==244) then begin res = "StockTakeSerBlock"; end;
  if (oldbln==247) then begin res = "ExpSerBlock"; end;
  if (oldbln==248) then begin res = "PPersSerBlock"; end;
//  if (oldbln==253) then begin res = "STRDefBlock"; end;
  if (oldbln==254) then begin res = "LetSerBlock"; end;
//  if (oldbln==256) then begin res = "STR2DefBlock"; end; 
  if (oldbln==257) then begin res = "SORDefBlock"; end;
  if (oldbln==259) then begin res = "TransNotDefBlock"; end;
  if (oldbln==260) then begin res = "ContQuoteDefBlock"; end;
  if (oldbln==261) then begin res = "CreditQueryDefBlock"; end;
  if (oldbln==262) then begin res = "ContDeliveryDefBlock"; end;
  if (oldbln==263) then begin res = "InsuranceDefBlock"; end;
  if (oldbln==264) then begin res = "ContSalesDefBlock"; end;
  if (oldbln==265) then begin res = "ActDocDefBlock"; end;
  if (oldbln==267) then begin res = "STR3DefBlock"; end; 
  if (oldbln==268) then begin res = "PFDefBlock"; end;
  if (oldbln==273) then begin res = "SVODefBlock"; end;
  if (oldbln==274) then begin res = "WOrdDefBlock"; end;
  if (oldbln==275) then begin res = "WSDefBlock"; end;
  if (oldbln==276) then begin res = "SVOSerBlock"; end;
  if (oldbln==277) then begin res = "WSSerBlock"; end;
  if (oldbln==278) then begin res = "WOSerBlock"; end;
  if (oldbln==279) then begin res = "TBBudgetDefBlock"; end;
  if (oldbln==280) then begin res = "ExpenseDefBlock"; end;
  if (oldbln==282) then begin res = "SVGMSerBlock"; end;
  if (oldbln==286) then begin res = "IPDDefBlock"; end;
  if (oldbln==287) then begin res = "VATRepDefBlock"; end;
  if (oldbln==289) then begin res = "SVGMFDefBlock"; end;
  if (oldbln==290) then begin res = "CUCOLabDefBlock"; end;
  if (oldbln==292) then begin res = "ProjectInfoDefBlock"; end;
  if (oldbln==293) then begin res = "ARDDefBlock"; end;
  if (oldbln==294) then begin res = "APDDefBlock"; end;
  if (oldbln==295) then begin res = "MBADefBlock"; end;
  if (oldbln==296) then begin res = "TransJDefBlock"; end;
//  if (oldbln==297) then begin res = "MainDefBlock"; end;
  if (oldbln==298) then begin res = "MailDefBlock"; end;
  if (oldbln==299) then begin res = "JobDefBlock"; end;
//  if (oldbln==300) then begin res = "PlaceLabDefBlock"; end;
  if (oldbln==301) then begin res = "JobSerBlock"; end;
  if (oldbln==302) then begin res = "OwnChkDefBlock"; end;
//  if (oldbln==303) then begin res = "PlaceLetDefBlock"; end;
//  if (oldbln==304) then begin res = "ResLetDefBlock"; end;
  if (oldbln==305) then begin res = "LoanStatusBlock"; end;
  if (oldbln==306) then begin res = "LoanSuccessBlock"; end;
  if (oldbln==307) then begin res = "CLIn1DefBlock"; end;
  if (oldbln==308) then begin res = "CLIn2DefBlock"; end;
  if (oldbln==309) then begin res = "CLOut1DefBlock"; end;
  if (oldbln==310) then begin res = "CLOut2DefBlock"; end;
  if (oldbln==311) then begin res = "CLOut3DefBlock"; end;
  if (oldbln==312) then begin res = "PRITHandleBlock"; end;
  if (oldbln==313) then begin res = "WIPCheckBlock"; end;
  if (oldbln==314) then begin res = "OP2DDefBlock"; end;
  if (oldbln==315) then begin res = "CustomsDefaultBlock"; end;
  if (oldbln==316) then begin res = "PriceRangeBlock"; end;
  if (oldbln==317) then begin res = "CustomsSerBlock"; end;
  if (oldbln==318) then begin res = "CustomOfficesBlock"; end;
  if (oldbln==319) then begin res = "CustomDecKeyBlock"; end;
  if (oldbln==320) then begin res = "CustomsDefBlock"; end;
  if (oldbln==321) then begin res = "SpecChargeDealBlock"; end;
  if (oldbln==322) then begin res = "OPTBlock"; end;
  if (oldbln==323) then begin res = "PayPlanSerBlock"; end;
//  if (oldbln==324) then begin res = "SalPaySerBlock"; end;
  if (oldbln==326) then begin res = "ContLabDefBlock"; end;
  if (oldbln==327) then begin res = "MailSettingsBlock"; end;
//  if (oldbln==328) then begin res = "BudgetQTDefBlock"; end;
  if (oldbln==329) then begin res = "BPChangeDefBlock"; end;
  if (oldbln==330) then begin res = "OrdSettBlock"; end;
  if (oldbln==331) then begin res = "GatewayBlock"; end;
  if (oldbln==332) then begin res = "AT2RevSerBlock"; end;
  if (oldbln==333) then begin res = "AT2PUSerBlock"; end;
  if (oldbln==334) then begin res = "AT2MovSerBlock"; end;
  if (oldbln==335) then begin res = "AT2RespSerBlock"; end;
  if (oldbln==336) then begin res = "AT2WrofSerBlock"; end;
  if (oldbln==337) then begin res = "AT2DprSerBlock"; end;
  if (oldbln==338) then begin res = "AT2TakeSerBlock"; end;
  if (oldbln==339) then begin res = "AT2RevDefBlock"; end;
  if (oldbln==340) then begin res = "AT2PUDefBlock"; end;
  if (oldbln==341) then begin res = "AT2MovDefBlock"; end;
  if (oldbln==342) then begin res = "AT2RespDefBlock"; end;
  if (oldbln==343) then begin res = "AT2WrofDefBlock"; end;
  if (oldbln==344) then begin res = "AT2DprDefBlock"; end;
  if (oldbln==345) then begin res = "AT2TakeDefBlock"; end;
  if (oldbln==346) then begin res = "IVCashSerBlock"; end;
  if (oldbln==347) then begin res = "FreightWeightBlock"; end;
  if (oldbln==348) then begin res = "POQTSerBlock"; end;
  if (oldbln==349) then begin res = "POQTDefBlock"; end;
  if (oldbln==350) then begin res = "IntORDefBlock"; end;
  if (oldbln==351) then begin res = "RetDefBlock"; end;
  if (oldbln==352) then begin res = "PRInvDefBlock"; end;
  if (oldbln==353) then begin res = "HotelBlock"; end;
  if (oldbln==354) then begin res = "AT2DefBlock"; end;
  if (oldbln==355) then begin res = "Key6Block"; end;
  if (oldbln==356) then begin res = "Key7Block"; end;
  if (oldbln==357) then begin res = "Key8Block"; end;
  if (oldbln==358) then begin res = "Key9Block"; end;
  if (oldbln==359) then begin res = "Key10Block"; end;
  if (oldbln==360) then begin res = "Key11Block"; end;
  if (oldbln==361) then begin res = "Key12Block"; end;
  if (oldbln==362) then begin res = "Key13Block"; end;
  if (oldbln==363) then begin res = "Key14Block"; end;
  if (oldbln==364) then begin res = "Key15Block"; end;
  if (oldbln==365) then begin res = "PRSerBlock"; end;
  if (oldbln==366) then begin res = "PORemDefBlock"; end;
  if (oldbln==367) then begin res = "POConfDefBlock"; end;
  if (oldbln==368) then begin res = "CheckSerBlock"; end;
  if (oldbln==369) then begin res = "OwnCheckSerBlock"; end;
  if (oldbln==370) then begin res = "ResAvSerBlock"; end;
  if (oldbln==371) then begin res = "WayListSerBlock"; end;
  if (oldbln==372) then begin res = "APSDefBlock"; end;
  if (oldbln==373) then begin res = "CLInColDefBlock"; end;
  if (oldbln==374) then begin res = "CLOutColDefBlock"; end;
  if (oldbln==375) then begin res = "WayListDefBlock"; end;
  if (oldbln==376) then begin res = "PrelPUDefBlock"; end;
  if (oldbln==377) then begin res = "PrelPUSerBlock"; end;
  if (oldbln==378) then begin res = "DBLogBlock"; end;
  if (oldbln==379) then begin res = "ResAvDefBlock"; end;
  if (oldbln==380) then begin res = "RestAccDefBlock"; end;
  if (oldbln==381) then begin res = "GuestDocDefBlock"; end;
  if (oldbln==382) then begin res = "LateCostSerBlock"; end;
  if (oldbln==383) then begin res = "LateCostDefBlock"; end;
  if (oldbln==384) then begin res = "FEIVSerBlock"; end;
  if (oldbln==385) then begin res = "FEVISerBlock"; end;
  if (oldbln==386) then begin res = "CouponSerBlock"; end;
  if (oldbln==387) then begin res = "IntORSerBlock"; end;
  if (oldbln==388) then begin res = "VATIVDefBlock"; end;
  if (oldbln==389) then begin res = "VATVIDefBlock"; end;
  if (oldbln==390) then begin res = "InStaDefBlock"; end;
  if (oldbln==391) then begin res = "InStaPuDefBlock"; end;
  if (oldbln==392) then begin res = "TAXRepDefBlock"; end;
  
  return;
end;

global
updating procedure ReadImportTagJobDescBlock(string thetag)
begin
  record JobDescBlock JDb;
  row JobDescBlock JDbrw;
  Integer i;
  record JobTitleVc JTr;
  
  while (NextImportLine(false)) begin
    ClearRow(JDb,JDbrw,1);
    JDbrw.Job = ImportField;
    MatRowPut(JDb,i,JDbrw);
    i = i + 1;
    JTr.Title = JDbrw.Job;
    if (nonblank(JTr.Title)) then begin
      RecordImportStore(JTr,false);
    end;
  end;
  BlockStore(JDb);
  return;
end;

global
updating procedure ReadImportTagNT7000NumbersBlock(string thetag)
begin
  record NT7000NumbersVc NTNr;
  record MainWHMBlock MainWHMb;
  
  BlockLoad(MainWHMb);
  NTNr.Location = MainWHMb.Location;
  if (NextImportLine(true)) then begin end;
  NTNr.OrdSentToNT7000 = StringToInt(ImportField);
  NTNr.LastAutomaticNr = StringToLongInt(ImportField);
  NTNr.LastPickingNr = StringToLongInt(ImportField);
  RecordStore(NTNr,false);
  return;
end;

global
updating procedure ReadImportTagNT7000Block(string thetag)
begin
  record NT7000ConnVc NTCr;
  record MainWHMBlock MainWHMb;
  
  BlockLoad(MainWHMb);
  NTCr.Location = MainWHMb.Location;
  if (NextImportLine(true)) then begin end;
  NTCr.NT7000ServerIP = ImportField;
  NTCr.NT7000ServerPort = StringToLongInt(ImportField);
  NTCr.MaxForkLiftForPickMode = StringToInt(ImportField);
  NTCr.ZeroTransTime = ImportField;
  NTCr.MaxTransTime = ImportField;
  RecordStore(NTCr,false);
  return;
end;

global
updating procedure ReadImportTagMainWHMBlock(string thetag)
begin
  record MainWHMBlock MainWHMb;
  record LocationVc Locr;
  
  if (NextImportLine(true)) then begin end;
  MainWHMb.DemandPosition = StringToInt(ImportField);
  MainWHMb.PalletArea = ImportField;
  MainWHMb.DefPUPosCode = ImportField;
  MainWHMb.DefProdPosCode = ImportField;
  MainWHMb.PickArea = ImportField;
  MainWHMb.Location = ImportField;
  MainWHMb.WraperPosCode = ImportField;
  MainWHMb.DeliveryPosCode = ImportField;
  MainWHMb.ForkLiftSystem = StringToInt(ImportField);
  MainWHMb.AutOKStockMovements = StringToInt(ImportField);
  MainWHMb.DeliveryArea = ImportField;
  MainWHMb.ExpressOrderClass = ImportField;
  MainWHMb.PickOrderPerArea = StringToInt(ImportField);
  MainWHMb.HighestPosCodeFirst = StringToInt(ImportField);
  MainWHMb.DefPUVECode = ImportField;
  if (nonblank(MainWHMb.Location)) then begin
    Locr.Code = MainWHMb.Location & "??";
    Locr.WHMPalletArea = MainWHMb.PalletArea;
    Locr.WHMDefPUPosCode = MainWHMb.DefPUPosCode;
    Locr.WHMDefProdPosCode = MainWHMb.DefProdPosCode;
    Locr.WHMPickArea = MainWHMb.PickArea;
    Locr.WHMWraperPosCode = MainWHMb.WraperPosCode;
    Locr.WHMDeliveryPosCode = MainWHMb.DeliveryPosCode;
    Locr.WHMForkLiftSystem = MainWHMb.ForkLiftSystem;
    Locr.WHMAutOKStockMovements = MainWHMb.AutOKStockMovements;
    Locr.WHMDeliveryArea = MainWHMb.DeliveryArea;
    Locr.WHMPickOrderPerArea = MainWHMb.PickOrderPerArea;
    Locr.WHMHighestPosCodeFirst = MainWHMb.HighestPosCodeFirst;
    Locr.WHMDefPUVECode = MainWHMb.DefPUVECode;
    Locr.WHMExpressOrderClass = MainWHMb.ExpressOrderClass;
    Locr.RequirePos = 1;
    RecordStore(Locr,false);
  end;
  return;
end;

global
updating procedure AddRowFormDefOnImport(var record FormDefVc FDr,row InvDefBlock InvDefbrw)
begin
  row FormDefVc FDrw;
  
  ClearRow(FDr,FDrw,1);
  FDrw.LangCode = InvDefbrw.LangCode;
  FDrw.UserGroup = InvDefbrw.UserGroup;
  FDrw.SerNr = InvDefbrw.SerNr;
  FDrw.FPCode = InvDefbrw.FPCode;
  FDrw.PrintGroupCode = InvDefbrw.PrintGroupCode;
  FDrw.intdocnr = InvDefbrw.intdocnr;
  FDrw.EformCode = InvDefbrw.EformCode;
  FDrw.Typ = InvDefbrw.Typ;
  MatRowPut(FDr,MatRowCnt(FDr),InvDefbrw);
  return;
end;

global
updating procedure StoreFormDefOnImport(record FormDefVc FDr,string repname,string critname,string defname,string modname,string shortname)
begin  
  record FormDefVc oldFDr;
  
  FDr.repname = repname;
  FDr.critname = critname;
  FDr.defname = defname;
  FDr.modname = modname;
  FDr.shortname = shortname;
  RecordCopy(oldFDr,FDr);
  if (ReadFirstMain(oldFDr,1,true)==false) then begin
    RecordStore(FDr,false);
  end;
  return;
end;

global
procedure ImportInvDefBlockRow(var row InvDefBlock InvDefbrw)
begin
  InvDefbrw.LangCode = ImportField;
  InvDefbrw.UserGroup = ImportField;
  InvDefbrw.SerNr = StringToLongInt(ImportField);
  InvDefbrw.FPCode = ImportField;
  InvDefbrw.PrintGroupCode = ImportField;
  InvDefbrw.intdocnr = StringToLongInt(ImportField);
  InvDefbrw.EformCode = ImportField;
  InvDefbrw.Typ = StringToInt(ImportField);
  return;
end;

global
updating procedure ReadImportTagInvDefBlock(string thetag)
begin
  record InvDefBlock InvDefb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(InvDefb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(InvDefb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(InvDefb);
  StoreFormDefOnImport(FDr,"InvForm","IVRClass","InvFClass","modSL","");
  return;
end;

global
updating procedure ReadImportTagAdrLabDefBlock(string thetag)
begin
  record AdrLabDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"AdrLabForm","AdrLabRClass","AdrLabFClass","modIN","");
  return;
end;

global
updating procedure ReadImportTagAPSDefBlock(string thetag)
begin
  record APSDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"APSForm","APSRClass","APSFClass","modPL","");
  return;
end;

global
updating procedure ReadImportTagAT2InDefBlock(string thetag)
begin
  record AT2InDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"AT2InForm","AT2InRClass","AT2InFClass","modAT2","");
  return;
end;

global
updating procedure ReadImportTagContLabDefBlock(string thetag)
begin
  record ContLabDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"ContLabForm","ContLabRClass","ContLabFClass","modCO","");
  return;
end;

global
updating procedure ReadImportTagCuLabDefBlock(string thetag)
begin
  record CuLabDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"CuLabForm","CuLabRClass","CuLabFClass","modCO","");
  return;
end;

global
updating procedure ReadImportTagCuPerDefBlock(string thetag)
begin
  record CuPerDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"CuPerForm","CuPerRClass","CuPerFClass","modSL","");
  return;
end;

global
updating procedure ReadImportTagActDocDefBlock(string thetag)
begin
  record ActDocDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"ActDocForm","ActDocRClass","ActDocFClass","modCRM","");
  return;
end;

global
updating procedure ReadImportTagAgreementDefBlock(string thetag)
begin
  record AgreementDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"AgreementForm","AgreementRClass","AgreementFClass","modRent","");
  return;
end;

global
updating procedure ReadImportTagAT2DefBlock(string thetag)
begin
  record AT2DefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"AT2Form","AT2RClass","AT2FClass","modAT2","");
  return;
end;

global
updating procedure ReadImportTagAT2MovDefBlock(string thetag)
begin
  record AT2MovDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"AT2MovForm","AT2MovRClass","AT2MovFClass","modAT2","");
  return;
end;

global
updating procedure ReadImportTagAT2RevDefBlock(string thetag)
begin
  record AT2RevDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"AT2RevForm","AT2RevRClass","AT2RevFClass","modAT2","");
  return;
end;

global
updating procedure ReadImportTagAT2TakeDefBlock(string thetag)
begin
  record AT2TakeDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"AT2TakeForm","AT2TakeRClass","AT2TakeFClass","modAT2","");
  return;
end;

global
updating procedure ReadImportTagAT2WrofDefBlock(string thetag)
begin
  record AT2WrofDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"AT2WrofForm","AT2WrofRClass","AT2WrofFClass","modAT2","");
  return;
end;

global
updating procedure ReadImportTagBPChangeDefBlock(string thetag)
begin
  record BPChangeDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"BPChangeForm","BasePriceChangeRClass","BasePriceChangeFClass","modIN","");
  return;
end;

global
updating procedure ReadImportTagCashDefBlock(string thetag)
begin
  record CashDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"CashInvForm","KIVRClass","IVCashFClass","modSL","");
  return;
end;

global
updating procedure ReadImportTagCLIn1DefBlock(string thetag)
begin
  record CLIn1DefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"CLIn1Form","CLIn1RClass","CLIn1FClass","modCL","");
  return;
end;

global
updating procedure ReadImportTagCLIn2DefBlock(string thetag)
begin
  record CLIn2DefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"CLIn2Form","CLIn2RClass","CLIn2FClass","modCL","");
  return;
end;

global
updating procedure ReadImportTagCLIn3DefBlock(string thetag)
begin
  record CLOut3DefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"CLIn3Form","CLIn3RClass","CLIn3FClass","modCL","");
  return;
end;

global
updating procedure ReadImportTagCLInColDefBlock(string thetag)
begin
  record CLInColDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"CLInColForm","CLInColRClass","CLInColFClass","modCL","");
  return;
end;

global
updating procedure ReadImportTagCLInDefBlock(string thetag)
begin
  record CLInDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"CLInForm","CLInRClass","CLInFClass","modCL","");
  return;
end;

global
updating procedure ReadImportTagCLOut1DefBlock(string thetag)
begin
  record CLOut1DefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"CLOut1Form","CLOut1RClass","CLOut1FClass","modCL","");
  return;
end;

global
updating procedure ReadImportTagCLOut2DefBlock(string thetag)
begin
  record CLOut2DefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"CLOut2Form","CLOut2RClass","CLOut2FClass","modCL","");
  return;
end;

global
updating procedure ReadImportTagCLOut3DefBlock(string thetag)
begin
  record CLOut3DefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"CLOut3Form","CLOut3RClass","CLOut3FClass","modCL","");
  return;
end;

global
updating procedure ReadImportTagCLOutColDefBlock(string thetag)
begin
  record CLOutColDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"CLOutColForm","CLOutColRClass","CLOutColFClass","modCL","");
  return;
end;

global
updating procedure ReadImportTagCLOutDefBlock(string thetag)
begin
  record CLOutDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"CLOutColForm","CLOutColRClass","CLOutColFClass","modCL","");
  return;
end;

global
updating procedure ReadImportTagCollectionDefBlock(string thetag)
begin
  record CollectionDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"CollectionForm","CollectionRClass","CollectionFClass","modRent","");
  return;
end;

global
updating procedure ReadImportTagContQuoteDefBlock(string thetag)
begin
  record ContQuoteDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"ContQuoteForm","ContQuoteRClass","ContQuoteFClass","modCO","");
  return;
end;

global
updating procedure ReadImportTagCreditQueryDefBlock(string thetag)
begin
  record CreditQueryDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"CreditQueryForm","CreditQueryRClass","CreditQueryFClass","modCO","");
  return;
end;

global
updating procedure ReadImportTagContractDefBlock(string thetag)
begin
  record ContractDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"ContractForm","ContractRClass","ContractFClass","modCO","");
  return;
end;

global
updating procedure ReadImportTagCredManDefBlock(string thetag)
begin
  record CredManDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"CredManForm","CredManDocRClass","CredManFClass","modCredMan","");
  return;
end;

global
updating procedure ReadImportTagCredManStatDefBlock(string thetag)
begin
  record CredManStatDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"CredManStatForm","CredManStatRClass","CredManStatFClass","modCredMan","");
  return;
end;

global
updating procedure ReadImportTagCustomsDefBlock(string thetag)
begin
  record CustomsDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"CustomsForm","CustomsRClass","CustomsFClass","modCustom","");
  return;
end;

global
updating procedure ReadImportTagDispatchDefBlock(string thetag)
begin
  record DispatchDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"DispatchForm","DispatchRClass","DispatchFClass","modIntStock","");
  return;
end;

global
updating procedure ReadImportTagDropSHDefBlock(string thetag)
begin
  record DropSHDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"DropSHForm","DropSHRClass","DropSHFClass","modPO","");
  return;
end;

global
updating procedure ReadImportTagExcurDocDefBlock(string thetag)
begin
  record ExcurDocDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"ExcurDocForm","ExcurDocRClass","ExcurDocFClass","modRsrt","");
  return;
end;

global
updating procedure ReadImportTagExpenseDefBlock(string thetag)
begin
  record ExpenseDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"ExpForm","ExpRClass","ExpFClass","modExp","");
  return;
end;

global
updating procedure ReadImportTagFEIVDefBlock(string thetag)
begin
  record FEIVDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"FEIVForm","FEIVRClass","FEIVFClass","modSL","");
  return;
end;

global
updating procedure ReadImportTagGCDefBlock(string thetag)
begin
  record GCDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"GCForm","GCRClass","GCFClass","modSL","");
  return;
end;

global
updating procedure ReadImportTagGuestDocDefBlock(string thetag)
begin
  record GuestDocDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"GuestDocForm","GuestDocForm","GuestDocRClass","modHotel","");
  return;
end;

global
updating procedure ReadImportTagHRMCODefBlock(string thetag)
begin
  record HRMCODefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"HRMCOForm","HRMCORClass","HRMCOFClass","modHRM","");
  return;
end;

global
updating procedure ReadImportTagHWContractDefBlock(string thetag)
begin
  record HWContractDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"HWContractForm","HWContractRClass","HWContractFClass","modOurContracts","");
  return;
end;

global
updating procedure ReadImportTagIntIVDefBlock(string thetag)
begin
  record IntIVDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"IntIIVForm","IntIVRClass","IntIVFClass","modSL","");
  return;
end;

global
updating procedure ReadImportTagInternMovDefBlock(string thetag)
begin
  record InternMovDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"InternMovForm","InternMovRClass","InternMovFClass","modIntStock","");
  return;
end;

global
updating procedure ReadImportTagIntORDefBlock(string thetag)
begin
  record IntORDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"IntORForm","IntORRClass","IntORFClass","modPO","");
  return;
end;

global
updating procedure ReadImportTagINTransferDefBlock(string thetag)
begin
  record INTransferDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"INTransferForm","INTransferRClass","INTransferFClass","modIntStock","");
  return;
end;

global
updating procedure ReadImportTagIVCashDefBlock(string thetag)
begin
  record IVCashDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"InvCashForm","IVCashRClass","IVCashFClass","modPOS","");
  return;
end;

global
updating procedure ReadImportTagInv1DefBlock(string thetag)
begin
  record Inv1DefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"Inv1Form","Inv1RClass","Inv1FClass","modSL","");
  return;
end;

global
updating procedure ReadImportTagPRInvDefBlock(string thetag)
begin
  record PRInvDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"ProjInvForm","PIVRClass","PRInvFClass","modSL","");
  return;
end;

/*
not existing, cash invoice
global
updating procedure ReadImportTagCashDefBlock(string thetag)
begin
  record CashDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"CashForm","CashRClass","CashFClass","modPOS","");
  return;
end;
*/

global
updating procedure ReadImportTagCredDefBlock(string thetag)
begin
  record CashDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"CredInvForm","CIVRClass","CredFClass","modSL","");
  return;
end;

global
updating procedure ReadImportTagIIDefBlock(string thetag)
begin
  record IIDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"IIInvForm","IIVRClass","IIFClass","modSL","");
  return;
end;

global
updating procedure ReadImportTagIPDDefBlock(string thetag)
begin
  record IPDDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"IPDForm","IPDRClass","IPDFClass","modSL","");
  return;
end;

global
updating procedure ReadImportTagJobDefBlock(string thetag)
begin
  record JobDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"JobForm","JobRClass","JobFClass","modHotel","");
  return;
end;

global
updating procedure ReadImportTagJob1DefBlock(string thetag)
begin
  record Job1DefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"Job1Form","Job1RClass","Job1FClass","modHotel","");
  return;
end;

global
updating procedure ReadImportTagJob2DefBlock(string thetag)
begin
  record Job2DefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"Job2Form","Job2RClass","Job2FClass","modHotel","");
  return;
end;

global
updating procedure ReadImportTagJob3DefBlock(string thetag)
begin
  record Job3DefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"Job3Form","Job3RClass","Job3FClass","modHotel","");
  return;
end;

global
updating procedure ReadImportTagLetDefBlock(string thetag)
begin
  record LetDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"LetForm","LetRClass","LetFClass","modHotel","");
  return;
end;

global
updating procedure ReadImportTagMailDefBlock(string thetag)
begin
  record MailDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"MailForm","MailRClass","MailFClass","modEmail","");
  return;
end;

global
updating procedure ReadImportTagOffHireDefBlock(string thetag)
begin
  record OffHireDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"OffHireForm","OffHireRClass","OffHireFClass","modIntStock","");
  return;
end;

global
updating procedure ReadImportTagOPDDefBlock(string thetag)
begin
  record OPDDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"OPDForm","OPDRClass","OPDFClass","modPL","");
  return;
end;

global
updating procedure ReadImportTagOP2DDefBlock(string thetag)
begin
  record OP2DDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"OP2DForm","OP2DRClass","OP2DFClass","modPL","");
  return;
end;

global
updating procedure ReadImportTagOrdDefBlock(string thetag)
begin
  record OrdDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"OrdForm","ORRClass","OrdFClass","modSO","");
  return;
end;

global
updating procedure ReadImportTagOr2DefBlock(string thetag)
begin
  record Or2DefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"Or2Form","Or2RClass","Or2FClass","modSO","");
  return;
end;

global
updating procedure ReadImportTagORProgDefBlock(string thetag)
begin
  record Or2DefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"ORProgForm","ORProgRClass","ORProgFClass","modPOProg","");
  return;
end;

global
updating procedure ReadImportTagOwnChkDefBlock(string thetag)
begin
  record OwnChkDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"OwnChkForm","OwnChkRClass","OwnChkFClass","modCheck","");
  return;
end;

global
updating procedure ReadImportTagPersPayDefBlock(string thetag)
begin
  record PersPayDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"PersPayForm","PPRClass","PPDFClass","modExp","");
  return;
end;

global
updating procedure ReadImportTagPOCODefBlock(string thetag)
begin
  record POCODefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"POCOForm","POCORClass","POCOFClass","modPL","");
  return;
end;

global
updating procedure ReadImportTagPODefBlock(string thetag)
begin
  record PODefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"POForm","PORClass","POFClass","modPO","");
  return;
end;

global
updating procedure ReadImportTagPOConfDefBlock(string thetag)
begin
  record POConfDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"POConfForm","POConfRClass","POConfFClass","modPO","");
  return;
end;

global
updating procedure ReadImportTagPORemDefBlock(string thetag)
begin
  record PORemDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"PORemForm","PORemRClass","PORemFClass","modPO","");
  return;
end;

global
updating procedure ReadImportTagPOQTDefBlock(string thetag)
begin
  record POQTDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"POQTForm","POQTRClass","POQTFClass","modPO","");
  return;
end;

global
updating procedure ReadImportTagProdOper2DefBlock(string thetag)
begin
  record ProdOper2DefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"ProdOperation2Form","ProdOperation2RClass","ProdOperation2FClass","modProd","");
  return;
end;

global
updating procedure ReadImportTagProdOrder2DefBlock(string thetag)
begin
  record ProdOrder2DefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"ProdOrder2Form","ProdOrder2RClass","ProdOrder2FClass","modProd","");
  return;
end;

global
updating procedure ReadImportTagProdOrder3DefBlock(string thetag)
begin
  record ProdOrder3DefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"ProdOrder3Form","ProdOrder3RClass","ProdOrder3FClass","modProd","");
  return;
end;

global
updating procedure ReadImportTagProdOrderDefBlock(string thetag)
begin
  record ProdOrderDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"ProdOrderForm","ProdOrderRClass","ProdOrderFClass","modProd","");
  return;
end;

global
updating procedure ReadImportTagProjectDefBlock(string thetag)
begin
  record ProjectDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"ProjectForm","ProjectRClass","ProjectFClass","modTS","");
  return;
end;

global
updating procedure ReadImportTagProjectInfoDefBlock(string thetag)
begin
  record ProjectInfoDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"ProjectInfoForm","ProjectInfoRClass","ProjectInfoFClass","modTS","");
  return;
end;

global
updating procedure ReadImportTagProjectTransDefBlock(string thetag)
begin
  record ProjectTransDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"ProjectTransForm","ProjectTransRClass","ProjectTransFClass","modTS","");
  return;
end;

global
updating procedure ReadImportTagPRScheduleDefBlock(string thetag)
begin
  record PRScheduleDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"PRScheduleForm","PRScheduleRClass","PRScheduleFClass","modTS","");
  return;
end;

global
updating procedure ReadImportTagPurchaseDefBlock(string thetag)
begin
  record PurchaseDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"PurchaseForm","PurchaseRClass","PurchaseFClass","modIN","");
  return;
end;

global
updating procedure ReadImportTagQTDefBlock(string thetag)
begin
  record QTDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"QTForm","QTRClass","QTFClass","modQT","");
  return;
end;

global
updating procedure ReadImportTagRemDefBlock(string thetag)
begin
  record RemDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"RemForm","RemRClass","RemFClass","modSL","");
  return;
end;

global
updating procedure ReadImportTagRentQTDefBlock(string thetag)
begin
  record RentQTDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"RentQTForm","RentQTRClass","RentQTFClass","modRent","");
  return;
end;

global
updating procedure ReadImportTagRentResDefBlock(string thetag)
begin
  record RentResDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"RentResForm","RentResRClass","RentResFClass","modRent","");
  return;
end;

global
updating procedure ReadImportTagResAvDefBlock(string thetag)
begin
  record ResAvDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"ResAvForm","ResAvRClass","ResAvFClass","modHotel","");
  return;
end;

global
updating procedure ReadImportTagRestAccDefBlock(string thetag)
begin
  record RestAccDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"RestAccForm","RestAccRClass","RestAccFClass","modRest","");
  return;
end;

global
updating procedure ReadImportTagRestAccCancDefBlock(string thetag)
begin
  record RestAccCancDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"RestAccCancelForm","RestAccRClass","RestAccCancelFClass","modRest","");
  return;
end;

global
updating procedure ReadImportTagRestAccFireDefBlock(string thetag)
begin
  record RestAccFODefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"RestAccFireOrderForm","RestAccRClass","RestAccFireOrderFClass","modRest","");
  return;
end;

global
updating procedure ReadImportTagRestAccFODefBlock(string thetag)
begin
  record RestAccFODefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"RestAccGuestBillForm","RestAccGuestBillRClass","RestAccGuestBillFClass","modRest","");
  return;
end;

global
updating procedure ReadImportTagRestAccRecDefBlock(string thetag)
begin
  record RestAccRecDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"RestAccReceiptForm","RestAccReceiptRClass","RestAccReceiptFClass","modRest","");
  return;
end;

global
updating procedure ReadImportTagRestAccKitchDefBlock(string thetag)
begin
  record RestAccKitchDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"RestAccKitchenForm","RestAccKitchenRClass","RestAccKitchenFClass","modRest","");
  return;
end;

global
updating procedure ReadImportTagRetDefBlock(string thetag)
begin
  record RetDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"RetForm","RetRClass","RetFClass","modIN","");
  return;
end;

global
updating procedure ReadImportTagRetPUDefBlock(string thetag)
begin
  record RetPUDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"RetPurchaseForm","RetPURClass","RetPUFClass","modIN","");
  return;
end;

global
updating procedure ReadImportTagRoutingPrDefBlock(string thetag)
begin
  record RoutingPrDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"RoutingPrForm","RoutingPrRClass","RoutingPrFClass","modProd","");
  return;
end;

global
updating procedure ReadImportTagRoutingPrOrdDefBlock(string thetag)
begin
  record RoutingPrOrdDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"RoutingPrOrdForm","RoutingPrOrdRClass","RoutingPrOrdFClass","modProd","");
  return;
end;

global
updating procedure ReadImportTagSDDefBlock(string thetag)
begin
  record SDDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"SDForm","SDRClass","SDFClass","modProd","");
  return;
end;

global
updating procedure ReadImportTagSh1DefBlock(string thetag)
begin
  record Sh1DefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"Sh1Form","Sh1RClass","Sh1FClass","modIN","");
  return;
end;

global
updating procedure ReadImportTagSh2DefBlock(string thetag)
begin
  record Sh2DefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"Sh2Form","Sh2RClass","Sh2FClass","modIN","");
  return;
end;

global
updating procedure ReadImportTagSh3DefBlock(string thetag)
begin
  record Sh3DefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"Sh3Form","Sh3RClass","Sh3FClass","modIN","");
  return;
end;

global
updating procedure ReadImportTagSLEUVATDefBlock(string thetag)
begin
  record SLEUVATDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"SLEUVATForm","SLEUVAT2RClass","SLEUVATFClass","modSL","");
  return;
end;

global
updating procedure ReadImportTagSRDefBlock(string thetag)
begin
  record SRDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"SRForm","SRRClass","SRFClass","modIN","");
  return;
end;

global
updating procedure ReadImportTagStockMovDefBlock(string thetag)
begin
  record StockMovDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"StockMovForm","StockMovRClass","StockMovFClass","modIN","");
  return;
end;

global
updating procedure ReadImportTagStockTakeDefBlock(string thetag)
begin
  record StockTakeDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"StockTakeForm","STRClass","StockTakeFClass","modIN","");
  return;
end;

global
updating procedure ReadImportTagSVGMFDefBlock(string thetag)
begin
  record SVGMFDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"SVGMForm","SVGMRClass","SVGMFClass","modSVO","");
  return;
end;

global
updating procedure ReadImportTagSVODefBlock(string thetag)
begin
  record SVODefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"SVOForm","SVORClass","SVOFClass","modSVO","");
  return;
end;

global
updating procedure ReadImportTagTBBudgetDefBlock(string thetag)
begin
  record TBBudgetDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"TBBudgetForm","TBBudgetRClass","TBBudgetFClass","modTS","");
  return;
end;

global
updating procedure ReadImportTagTimeSheetDefBlock(string thetag)
begin
  record TimeSheetDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"TimeSheetForm","TimeSheetRClass","TimeSheetFClass","modTS","");
  return;
end;

global
updating procedure ReadImportTagTourismLevyDefBlock(string thetag)
begin
  record TourismLevyDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"TourismLevyForm","TourismLevyRClass","TourismLevyFClass","modHotel","");
  return;
end;

global
updating procedure ReadImportTagTransferDocDefBlock(string thetag)
begin
  record TransferDocDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"TransferDocForm","TransferDocRClass","TransferDocFClass","modRsrt","");
  return;
end;

global
updating procedure ReadImportTagTRDefBlock(string thetag)
begin
  record TRDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"TRForm","TRRClass","TRFClass","modNL","");
  return;
end;

global
updating procedure ReadImportTagVATIVDefBlock(string thetag)
begin
  record VATIVDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"VATIVForm","VATIVRClass","VATIVFClass","modSL","");
  return;
end;

global
updating procedure ReadImportTagVATCIVDefBlock(string thetag)
begin
  record VATCIVDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"VATCIVForm","VATCIVRClass","VATCIVFClass","modSL","");
  return;
end;

global
updating procedure ReadImportTagVEIVDefBlock(string thetag)
begin
  record VEIVDefBlock Fb;
  row InvDefBlock InvDefbrw;
  Integer i;
  record FormDefVc FDr;
  
  RecordNew(FDr);
  while (NextImportLine(false)) begin
    ClearRow(Fb,InvDefbrw,1);
    ImportInvDefBlockRow(InvDefbrw);
    MatRowPut(Fb,i,InvDefbrw);
    AddRowFormDefOnImport(FDr,InvDefbrw);
    i = i + 1;
  end;
//  BlockStore(Fb);
  StoreFormDefOnImport(FDr,"VEIVForm","VEIVRClass","VEIVFClass","modPL","");
  return;
end;

global
updating procedure ReadImportTagPipeOverBlock3(string thetag)
begin
  record PipelinOverviewBlock PipelinOverviewr;
  row PipelinOverviewBlock PipelinOverviewrw;
  Integer i,rwcnt
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(PipelinOverviewr,PipelinOverviewrw,1);
    PipelinOverviewrw.ViewName = ImportField;
    PipelinOverviewrw.ColumnName = ImportField;
    PipelinOverviewrw.Register = ImportField;
    PipelinOverviewrw.RegisterFilter = ImportField;
    PipelinOverviewrw.Amounts = StringToInt(ImportField);
    PipelinOverviewrw.RegisterFilter2 = ImportField;
    PipelinOverviewrw.colnr = kButtonColourGray;
    MatRowPut(PipelinOverviewr,rwcnt,PipelinOverviewrw);
    rwcnt = rwcnt + 1;
  end;
  
  BlockStore(PipelinOverviewr);
  
  return;
end;
