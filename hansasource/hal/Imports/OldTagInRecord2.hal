external function Boolean FindTheUser(var record UserVc);
external procedure NextM4Number(string,var string);
external procedure Bud1Sumup(var record Bud1Vc);
external function Integer DateGetIntMonth(Date);
external procedure FindFiscalYear(Date,var Date,var Date);
external procedure CalcExtra(val,string,var val);
external procedure CalcSum(val,val,val,val,var val,Integer);
external function Integer GetItemTypeGroup(string,var string);
external function LongInt GetQtyConvImport(string);

global
procedure ReadImportTagActivitiesRecord(record ActVc Actr,var string subreccod,var LongInt subrecsernr,var Integer subrectyp)
begin
  row ActVc Actrw;
  Integer rwcnt;
  string 255 tstr;

    RecordNew(Actr);    
    Actr.CUCode = ImportField;
    Actr.TransDate = StringToDate(ImportField);
    Actr.StartTime = StringToTime(ImportField);
    Actr.MainPersons = ImportField;
    Actr.Contact = ImportField;
    Actr.ActType = ImportField;
    Actr.Comment = ImportField;
    Actr.OKFlag = StringToInt(ImportField);
    Actr.CUName = ImportField;
    tstr = ImportField; // MakeContact
    Actr.Phone = ImportField;
    Actr.EndTime = StringToTime(ImportField);
    subrectyp = StringToInt(ImportField);
    subrecsernr = StringToLongInt(ImportField);
    subreccod = ImportField; // SubRecCode
    tstr = ImportField; // xObjects
    Actr.ActResult = ImportField;
    Actr.EndDate = StringToDate(ImportField);
    Actr.PRCode = ImportField;
    Actr.CCPersons = ImportField;
    Actr.TodoFlag = StringToInt(ImportField);
    Actr.PrioLevel = StringToLongInt(ImportField);
    Actr.PrivateFlag = StringToInt(ImportField);
    Actr.CostTime = StringToTime(ImportField);
    Actr.Invalid = StringToInt(ImportField);
    Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");            
/* Perhaps we should create links in the RLink register when importing old Act. Links */

    rwcnt = 0;
    while (NextImportLine(false)) begin
      ClearRow(Actr,Actrw,1);
      Actrw.TextCode = ImportField;
      Actrw.Text = ImportField;
      MatRowPut(Actr,rwcnt,Actrw);
      rwcnt = rwcnt + 1;
    end;        
  return;
end;



global
procedure ReadImportTagImpBudgRecord(record Bud1Vc Bud1r)
begin
  row Bud1Vc Bud1rw;
  Integer i,cnt,curYearNrOfMonths,rwcnt;
  val startbal;
  Date buddat,curYearstartdate,curYearenddate;
  
  FindFiscalYear(CurrentDate,curYearstartdate,curYearenddate);
  curYearNrOfMonths = DateGetIntMonth(curYearenddate)-DateGetIntMonth(curYearstartdate)+1;
  RecordNew(Bud1r);
  Bud1r.AccNumber = ImportField;
  Bud1r.Objects = ImportField;
  startbal = StringToVal(ImportField,M4Val);
  buddat = curYearstartdate;
  rwcnt = 0;
  for (i=0 ;i<curYearNrOfMonths;i=i+1) begin
    Bud1rw.BudDate = buddat;
    buddat = AddMonth(buddat,1);
    Bud1rw.DefStr = ImportField;
    Bud1rw.sval = blankval;
    MatRowPut(Bud1r,rwcnt,Bud1rw);
    rwcnt = rwcnt + 1;
  end;
  Bud1Sumup(Bud1r);
  return;
end;

global
procedure ReadImportTagImpbudg1v2Record(record Bud1Vc Bud1r)
begin
  row Bud1Vc Bud1rw;
  Integer i,curYearNrOfMonths,rwcnt;
  val startbal;
  Date buddat,curYearstartdate,curYearenddate;
  Integer bfflag,valflag,prevflag;

  FindFiscalYear(CurrentDate,curYearstartdate,curYearenddate);
  curYearNrOfMonths = DateGetIntMonth(curYearenddate)-DateGetIntMonth(curYearstartdate)+1;

   RecordNew(Bud1r);
    Bud1r.AccNumber = ImportField;
    Bud1r.Objects = ImportField;
    Bud1r.Comment = ImportField;
    bfflag = StringToInt(ImportField);
    valflag = StringToInt(ImportField);
    prevflag = StringToInt(ImportField);
    Bud1r.BFCode = ImportField;
    Bud1r.YearVal = StringToVal(ImportField,M4Val);
    startbal = StringToVal(ImportField,M4Val);
    Bud1r.PrevProc = StringToVal(ImportField,M4Val);
    Bud1r.StartDate = curYearstartdate;
    Bud1r.EndDate = curYearenddate;
    buddat = curYearstartdate;
    rwcnt = 0;
    for (i=0 ;i<curYearNrOfMonths;i=i+1) begin
      Bud1rw.BudDate = buddat;
      buddat = AddMonth(buddat,1);
      if (valflag!=0) then begin
        Bud1rw.DefStr = ImportField;
      end else begin
        Bud1rw.DefStr = "";
      end;
      Bud1rw.sval = blankval;
    end;
    if (bfflag==0) then begin
      Bud1r.YearVal = blankval;
      Bud1r.BFCode = "";
    end;
    if (prevflag==0) then begin
      Bud1r.PrevProc = blankval;
    end;    
    Bud1Sumup(Bud1r);
  return;
end;

global
updating procedure ReadImportTagImpcostbudRecord(record PBVc PBr)
begin
  row PBVc PBrw;
  record TBIVVc TBIVr;
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  val b,t,t2;
  Integer rwcnt,i,burow;
  string 255 tstr;
  Date bd;

    RecordNew(PBr);
    PBr.Project = ImportField;
    PBr.Item = ImportField;
    PBr.Desc = ImportField;
    PBr.Estimate = StringToInt(ImportField);
    PBr.Value = StringToVal(ImportField,M4Val);
    PBr.Discount = StringToVal(ImportField,M4Val);
    PBr.PRName = ImportField;
    PBr.InvSeparately = StringToInt(ImportField);
    PBr.Sum = StringToVal(ImportField,M4Val);
    PBr.NoInvBefore = StringToDate(ImportField);
    PBr.SumInvoiced = StringToVal(ImportField,M4Val);
    rwcnt = 0;
    while (NextImportLine(false)) begin
      ClearRow(PBr,PBrw,1);
      PBrw.Descr = ImportField;
      PBrw.BudQty = StringToVal(ImportField,M4Qty);
      PBrw.SpentQty = StringToVal(ImportField,M4Qty);
      PBrw.Price = StringToVal(ImportField,M4Val);
      PBrw.Discount = StringToVal(ImportField,M4Val);
      PBrw.Markup = StringToVal(ImportField,M4Val);
      PBrw.Total = StringToVal(ImportField,M4Val);
      PBrw.Invoiced = StringToVal(ImportField,M4Val);      
      MatRowPut(PBr,rwcnt,PBrw);
      rwcnt = rwcnt + 1;
    end;        
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PBr,i,PBrw);
      if (PBrw.Total!=0) then begin
        RecordNew(TBIVr);
        TBIVr.oVc = 2;
        TBIVr.SerNr = -1;
        TBIVr.Row = -1;
        TBIVr.ItemType = 0;
        TBIVr.Comment = "";
        TBIVr.TransDate = CurrentDate;
        TBIVr.EMCode = "";
        TBIVr.PRCode = PBr.Project;
        TBIVr.ArtCode = PBr.Item;
        if (GetItemTypeGroup(TBIVr.ArtCode,tstr)==0) then begin end;
        TBIVr.INGroup = tstr;
        TBIVr.Objects = "";
        TBIVr.Qty = 1;
        TBIVr.InvQty = TBIVr.Qty;
        TBIVr.Invoice = -1;
        TBIVr.Discount = PBr.Discount;
        TBIVr.Markup = PBrw.Markup;
        TBIVr.Markup = TBIVr.Markup & "%";
        b = blankval;
        CalcSum(PBrw.SpentQty,PBrw.Price,0,b,t,0);
        TBIVr.Price = t - PBrw.Invoiced;
        CalcSum(TBIVr.InvQty,TBIVr.Price,0,TBIVr.Discount,t,0);
        TBIVr.Sum = t;
        CalcExtra(TBIVr.Sum,TBIVr.Markup,t);
        TBIVr.Sum = TBIVr.Sum + t;
        TBIVr.GP = blankval;
        TBIVr.InvAfter = bd;
        TBIVr.CostPrice = blankval;
        if (RecordStore(TBIVr,false)) then begin end;
      end;
      if (PBrw.Invoiced!=0) then begin
        RecordNew(TBIVr);
        TBIVr.oVc = 2;
        TBIVr.SerNr = -1;
        TBIVr.Row = -1;
        TBIVr.ItemType = 0;
        TBIVr.Comment = "";
        TBIVr.TransDate = CurrentDate;
        TBIVr.EMCode = "";
        TBIVr.PRCode = PBr.Project;
        TBIVr.ArtCode = PBr.Item;
        TBIVr.Qty = 1;
        TBIVr.InvQty = TBIVr.Qty;
        TBIVr.Invoice = -2;
        TBIVr.Discount = PBr.Discount;
        TBIVr.Markup = PBrw.Markup;
        TBIVr.Markup = TBIVr.Markup & "%";
        TBIVr.InvAfter = bd;
        b = blankval;
        CalcSum(PBrw.SpentQty,PBrw.Price,0,b,t,0);
        t2  = PBrw.Total - PBrw.Invoiced;
        TBIVr.Price = t - t2;
        CalcSum(TBIVr.InvQty,TBIVr.Price,0,TBIVr.Discount,t,0);
        TBIVr.Sum = t;
        CalcExtra(TBIVr.Sum,TBIVr.Markup,t);
        TBIVr.Sum = TBIVr.Sum + t;
        TBIVr.GP = blankval;
        TBIVr.CostPrice = blankval;
        if (RecordStore(TBIVr,false)) then begin end;
      end;
    end;
    RecordNew(TBBUr);
    TBBUr.PRCode = PBr.Project;
    if (ReadFirstMain(TBBUr,1,true)==false) then begin
      RecordNew(TBBUr);
      TBBUr.PRCode = PBr.Project;
      TBBUr.PRName = PBr.PRName;
      TBBUr.BudTime = 0;
      TBBUr.BudOther = 0;
      TBBUr.BudStocked = 0;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(PBr,i,PBrw);
        TBBUrw.ArtCode = PBr.Item;
        TBBUrw.Spec = PBr.Desc;
        TBBUrw.EMCode = "";
        TBBUrw.Discount = PBr.Discount;
        TBBUrw.Price = PBrw.Price;
        TBBUrw.Qty = PBrw.BudQty;
        TBBUrw.RowType = 0;
        TBBUrw.BudType = PBr.Estimate;
        TBBUrw.Invoiced = 0;
        if (TBBUrw.BudType==2) then begin 
          TBBUrw.BudType = 1;
        end;
        CalcSum(TBBUrw.Qty,TBBUrw.Price,0,TBBUrw.Discount,t,0);
        TBBUrw.Sum = t;
        if (TBBUrw.Qty!=0) then begin
          MatRowPut(TBBUr,i,TBBUrw);
        end;
      end;
      if (MatRowCnt(TBBUr)>0) then begin
        if (RecordStore(TBIVr,false)) then begin end;
      end else begin
        burow = MatRowCnt(TBBUr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(PBr,i,PBrw);
          TBBUrw.ArtCode = PBr.Item;
          TBBUrw.Spec = PBr.Desc;
          TBBUrw.EMCode = "";
          TBBUrw.Discount = PBr.Discount;
          TBBUrw.Price = PBrw.Price;
          TBBUrw.Qty = PBrw.BudQty;
          TBBUrw.Invoiced = 0;
          CalcSum(TBBUrw.Qty,TBBUrw.Price,0,TBBUrw.Discount,t,0);
          TBBUrw.Sum = t;
          if (TBBUrw.Qty!=0) then begin
            MatRowPut(TBBUr,burow+i,TBBUrw);
          end;
        end;
        if (MatRowCnt(TBBUr)>burow) then begin
          if (RecordStore(TBIVr,true)) then begin end;
        end;
      end;
    end;     
  return;
end;

global
procedure ReadImportTagEmailPop3BlockRecord(record Pop3ServVc P3Sr)
begin
  string 255 tstr;

  NextM4Number(P3Sr.Code,tstr);
  P3Sr.Code = tstr;
  P3Sr.Closedf = 0;
  P3Sr.IPaddr = ImportField;
  P3Sr.Portnr = StringToLongInt(ImportField);
  P3Sr.User = ImportField;
  P3Sr.Passw = ImportField;
  return;
end;

global
procedure ReadImportTagEmailAliasBlockRecord(record EmailAliasVc EmailAliasr)
begin
  string 255 tstr;

  NextM4Number(EmailAliasr.Pop3Serv,tstr);
  EmailAliasr.Pop3Serv = tstr;
  EmailAliasr.InternalName = "";
  EmailAliasr.Field = "Recv";
  EmailAliasr.MatchText = "";  
  EmailAliasr.Priority = 10;
  EmailAliasr.SetPrio = 0;
  EmailAliasr.FullHeader = 0;
  EmailAliasr.MatchText = ImportField;
  EmailAliasr.InternalName = ImportField;
  return;
end;

global
procedure ReadImportTagsigns1RecordRead(record UserVc Userr)
begin
  RecordNew(Userr);
  Userr.Code = ImportField;
  Userr.Name = ImportField;
  return;
end;

global
procedure ReadImportTagsalesmanRecordRead(record UserVc Userr)
begin
  RecordNew(Userr);
  Userr.Code = ImportField;
  Userr.Name = ImportField;
  Userr.TerminatedFlag = StringToInt(ImportField);
  Userr.Bonus = StringToVal(ImportField,M4Val);
  Userr.Code = ImportField;
  return;
end;

global
updating procedure ReadImportTagtimebudRecordRead(record TBVc TBr)
begin
  row TBVc TBrw;
  record TBIVVc TBIVr;
  record TBBUVc TBBUr;
  record TBBUVc oldTBBUr;
  row TBBUVc TBBUrw;
  Integer i,rwcnt,burow;
  string 255 tstr;
  Date bd;
  val t;

    RecordNew(TBr);
    TBr.Project = ImportField;
    TBr.Item = ImportField;
    TBr.Desc = ImportField;
    TBr.Estimate = StringToInt(ImportField);
    TBr.Value = StringToVal(ImportField,M4Val);
    TBr.Discount = StringToVal(ImportField,M4Val);
    TBr.PRName = ImportField;
    TBr.InvSeparately = StringToInt(ImportField);
    TBr.Sum = StringToVal(ImportField,M4Val);
    TBr.NoInvBefore = StringToDate(ImportField);
    TBr.SumInvoiced = StringToVal(ImportField,M4Val);
    rwcnt = 0;
    while (NextImportLine(false)) begin
      ClearRow(TBr,TBrw,1);
      TBrw.Person = ImportField;
      TBrw.BudQty = StringToVal(ImportField,M4Qty);
      TBrw.SpentQty = StringToVal(ImportField,M4Qty);
      TBrw.InvoicedQty = StringToVal(ImportField,M4Qty);
      TBrw.MarkupQty = StringToVal(ImportField,M4Qty);
      TBrw.ToInvoiceQty = StringToVal(ImportField,M4Qty);
      TBrw.Price = StringToVal(ImportField,M4Val);
      TBrw.CostInvd = StringToVal(ImportField,M4Val);
      TBrw.CostToInv = StringToVal(ImportField,M4Val);      
      MatRowPut(TBr,rwcnt,TBrw);
      rwcnt = rwcnt + 1;
    end;        
    rwcnt = MatRowCnt(TBr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TBr,i,TBrw);
      if (TBrw.ToInvoiceQty!=0) then begin
        TBIVr.oVc = 1;
        TBIVr.SerNr = -1;
        TBIVr.Row = -1;
        TBIVr.ItemType = 3;
        TBIVr.TransDate = CurrentDate;
        TBIVr.EMCode = TBrw.Person;
        TBIVr.PRCode = TBr.Project;
        TBIVr.ArtCode = TBr.Item;
        TBIVr.Qty = TBrw.ToInvoiceQty;
        TBIVr.InvQty = TBrw.ToInvoiceQty;
        TBIVr.Invoice = -1;
        TBIVr.Discount = TBr.Discount;
        TBIVr.Price = TBrw.Price;
        TBIVr.Comment = "";
        TBIVr.Objects = "";
        if (GetItemTypeGroup(TBIVr.ArtCode,tstr)==0) then begin end;
        TBIVr.INGroup = tstr;
        TBIVr.InvAfter = bd;
        CalcSum(TBIVr.InvQty,TBIVr.Price,0,TBIVr.Discount,t,0);
        TBIVr.Sum = t;
        TBIVr.Markup = TBrw.MarkupQty;
        CalcExtra(TBIVr.Sum,TBIVr.Markup,t);
        TBIVr.Sum = TBIVr.Sum + t;
        TBIVr.CostPrice = blankval;
        TBIVr.GP = blankval;
        if (TBrw.CostToInv!=0) then begin
          TBIVr.CostPrice = TBrw.CostToInv/TBIVr.Qty;
          TBIVr.GP = TBIVr.Sum - TBrw.CostToInv;
        end;
        if (RecordStore(TBIVr,false)) then begin end;
      end;
      if (TBrw.InvoicedQty!=0) then begin
        TBIVr.oVc = 1;
        TBIVr.SerNr = -1;
        TBIVr.Row = -1;
        TBIVr.ItemType = 3;
        TBIVr.TransDate = CurrentDate;
        TBIVr.EMCode = TBrw.Person;
        TBIVr.PRCode = TBr.Project;
        TBIVr.ArtCode = TBr.Item;
        TBIVr.Qty = TBrw.InvoicedQty;
        TBIVr.InvQty = TBrw.InvoicedQty;
        TBIVr.Invoice = -2;
        TBIVr.Discount = TBr.Discount;
        TBIVr.Price = TBrw.Price;
        TBIVr.Comment = "";
        TBIVr.InvAfter = bd;
        CalcSum(TBIVr.InvQty,TBIVr.Price,0,TBIVr.Discount,t,0);
        TBIVr.Sum = t;
        TBIVr.Markup = TBrw.MarkupQty;
        CalcExtra(TBIVr.Sum,TBIVr.Markup,t);
        TBIVr.Sum = TBIVr.Sum + t;
        TBIVr.CostPrice = blankval;
        TBIVr.GP = blankval;
        if (TBrw.CostToInv!=0) then begin
          TBIVr.CostPrice = TBrw.CostToInv/TBIVr.Qty;
          TBIVr.GP = TBIVr.Sum - TBrw.CostToInv;
        end;
        if (RecordStore(TBIVr,false)) then begin end;
      end;      
    end;

    TBBUr.PRCode = TBr.Project;
    if (ReadFirstMain(TBBUr,1,true)==false) then begin
      RecordCopy(oldTBBUr,TBBUr);
      TBBUr.PRCode = TBr.Project;
      TBBUr.PRName = TBr.PRName;
      TBBUr.BudTime = 0;
      TBBUr.BudOther = 0;
      TBBUr.BudStocked = 0;
      rwcnt = MatRowCnt(TBr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(TBr,i,TBrw);
        TBBUrw.ArtCode = TBr.Item;
        TBBUrw.Spec = TBr.Desc;
        TBBUrw.EMCode = TBrw.Person;
        TBBUrw.InvAfter = bd;
        TBBUrw.Discount = TBr.Discount;
        TBBUrw.Price = TBrw.Price;
        TBBUrw.Qty = TBrw.BudQty;
        TBBUrw.RowType = 0;
        TBBUrw.BudType = TBr.Estimate;
        TBBUrw.Invoiced = 0;
        if (TBBUrw.BudType==2) then begin
          TBBUrw.BudType = 1;
        end;
        CalcSum(TBBUrw.Qty,TBBUrw.Price,0,TBBUrw.Discount,t,0);
        TBBUrw.Sum = t;
        if (TBBUrw.Qty!=0) then begin
          MatRowPut(TBBUr,i,TBBUrw);
        end;
      end;
      if (MatRowCnt(TBBUr)>0) then begin
        if (RecordStore(TBIVr,true)) then begin end;
      end;
    end else begin
      burow = MatRowCnt(TBBUr);
      rwcnt = MatRowCnt(TBr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(TBr,i,TBrw);
        TBBUrw.ArtCode = TBr.Item;
        TBBUrw.Spec = TBr.Desc;
        TBBUrw.EMCode = TBrw.Person;
        TBBUrw.Discount = TBr.Discount;
        TBBUrw.Price = TBrw.Price;
        TBBUrw.Qty = TBrw.BudQty;
        TBBUrw.InvAfter = bd;
        TBBUrw.Invoiced = 0;
        CalcSum(TBBUrw.Qty,TBBUrw.Price,0,TBBUrw.Discount,t,0);//GenOptr.UseDiscount KH???
        TBBUrw.Sum = t;
        if (TBBUrw.Qty!=0) then begin
          MatRowPut(TBBUr,burow+i,TBBUrw);
        end;
      end;
      if (MatRowCnt(TBBUr)>burow) then begin
        if (RecordUpdate(oldTBBUr,TBBUr,false)==0) then begin
        end;
      end;
    end;    
  return;
end;

global
procedure ImpRMtext1Record(record RMVc RMr,Integer ver)
begin
  Integer i;

    RecordNew(RMr);
    RMr.Comment = USetStr(1881);
    switch (ver) begin
      case 1:
        while (NextImportLine(false)) begin
          i = StringToInt(ImportField);
          switch (i) begin
            case 0: RMr.txts0 = ImportField;
            case 1: RMr.txts1 = ImportField;
            case 2: RMr.txts2 = ImportField;
            case 3: RMr.txts3 = ImportField;
            case 4: RMr.txts4 = ImportField;
            case 5: RMr.txts5 = ImportField;
            case 6: RMr.txts6 = ImportField;
            case 7: RMr.txts7 = ImportField;
            case 8: RMr.txts8 = ImportField;
          end;
        end;      
      case 2:
        while (NextImportLine(false)) begin
          RMr.txts0 = ImportField;
          RMr.txts1 = ImportField;
          RMr.txts2 = ImportField;
          RMr.txts3 = ImportField;
          RMr.txts4 = ImportField;
          RMr.txts5 = ImportField;
          RMr.txts6 = ImportField;
          RMr.txts7 = ImportField;
          RMr.txts8 = ImportField;
        end;
    end;
  return;
end;

global
procedure ReadImportTagprice1RecordRead(var string item,var string t1,var string t2,var string t3,var string t4)
begin

  item = ImportField;
  t1 = ImportField;
  t2 = ImportField;
  t3 = ImportField;
  t4 = ImportField;    
  return;
end;

global
procedure ReadImportTagprislista1RecordRead(record PLDefVc PLDefr)
begin
  string 255 tstr;

  RecordNew(PLDefr);
  if (NextImportLine(true)) then begin end;
  tstr = ImportField;
  tstr = ImportField;
  PLDefR.Comment = ImportField;
  PLDefR.InclVAT = StringToInt(ImportField);
  if (NextImportLine(true)) then begin end;
  PLDefR.Code = "2";
  PLDefR.CurncyCode = "";
  return;
end;

global
procedure ReadImportTagclinRecordRead(record CLInVc CLInr)
begin

    RecordNew(CLInr);
    CLInr.SerNr = StringToLongInt(ImportField);
    CLInr.NetVal = StringToVal(ImportField,M4Val);
    CLInr.VATVal = StringToVal(ImportField,M4Val);
    CLInr.Total = StringToVal(ImportField,M4Val);
    CLInr.TransDate = StringToDate(ImportField);
    CLInr.PayMode = ImportField;
    CLInr.Person = ImportField;
    CLInr.CorspCode = ImportField;
    CLInr.CorspComment = ImportField;
    CLInr.CUCode = ImportField;
    CLInr.CUName = ImportField;
    CLInr.Addr0 = ImportField;
    CLInr.Addr1 = ImportField;
    CLInr.Addr2 = ImportField;
    CLInr.Comment = ImportField;
    CLInr.VATCode = ImportField;
    CLInr.OKFlag = StringToInt(ImportField);
    CLInr.ExportedFlag = StringToInt(ImportField);
    CLInr.RefStr = ImportField;
    CLInr.Objects = ImportField;
    CLInr.CurncyCode = ImportField;
    CLInr.FrRate = StringToVal(ImportField,M4Rate);
    CLInr.ToRateB1 = StringToVal(ImportField,M4Rate);
    CLInr.ToRateB2 = StringToVal(ImportField,M4Rate);
    CLInr.BaseRate1 = StringToVal(ImportField,M4Rate);
    CLInr.BaseRate2 = StringToVal(ImportField,M4Rate);
    CLInr.FileName = ImportField; 
    CLInr.FSerNr = StringToLongInt(ImportField);
    CLInr.TAX1Sum = StringToVal(ImportField,M4Val);
    CLInr.PMObjects = ImportField;
    CLInr.Addr3 = ImportField;
    CLInr.Addr4 = ImportField;
    CLInr.LangCode = ImportField;
    CLInr.ColFlag = StringToInt(ImportField);
    CLInr.Invalid = StringToInt(ImportField);
  return;
end;

global
procedure ReadImportTagcloutRecordRead(record CLOutVc CLOutr)
begin

    RecordNew(CLOutr);
    CLOutr.SerNr = StringToLongInt(ImportField);
    CLOutr.Total = StringToVal(ImportField,M4Val);
    CLOutr.TransDate = StringToDate(ImportField);
    CLOutr.PayMode = ImportField;
    CLOutr.Person = ImportField;
    CLOutr.CorspCode = ImportField;
    CLOutr.CorspComment = ImportField;
    CLOutr.CUCode = ImportField;
    CLOutr.CUName = ImportField;
    CLOutr.Comment = ImportField;
    CLOutr.OKFlag = StringToInt(ImportField);
    CLOutr.ExportedFlag = StringToInt(ImportField);
    CLOutr.Objects = ImportField;
    CLOutr.Addr0 = ImportField;
    CLOutr.Addr1 = ImportField;
    CLOutr.Addr2 = ImportField;
    CLOutr.CurncyCode = ImportField;
    CLOutr.FrRate = StringToVal(ImportField,M4Rate);
    CLOutr.ToRateB1 = StringToVal(ImportField,M4Rate);
    CLOutr.ToRateB2 = StringToVal(ImportField,M4Rate);
    CLOutr.BaseRate1 = StringToVal(ImportField,M4Rate);
    CLOutr.BaseRate2 = StringToVal(ImportField,M4Rate);
    CLOutr.NetVal = StringToVal(ImportField,M4Val);
    CLOutr.VATVal = StringToVal(ImportField,M4Val);
    CLOutr.VATCode = ImportField;    
    CLOutr.RefStr = ImportField;
    CLOutr.PMObjects = ImportField;
    CLOutr.Addr3 = ImportField;
    CLOutr.Addr4 = ImportField;    
    CLOutr.FileName = ImportField;     
    CLOutr.FSerNr = StringToLongInt(ImportField);
    CLOutr.LangCode = ImportField;
    CLOutr.ColFlag = StringToInt(ImportField);
    CLOutr.LocalMachineCode = ImportField;    
    CLOutr.Invalid = StringToInt(ImportField);
  return;
end;

global
function Integer ReadImportTagkgrupp3Record(record UserDefRepLinesVc UserDefRepLinesr,var Boolean firstrow)
begin
  row UserDefRepLinesVc UserDefRepLinesrw;
  Integer oBalResf;
  Integer rwcnt;

  RecordNew(UserDefRepLinesr);
  oBalResf = StringToInt(ImportField);
  if (firstrow) then begin
    firstrow = false;
  end;
  UserDefRepLinesr.RsType = StringToInt(ImportField);
  UserDefRepLinesr.IdKey = StringToLongInt(ImportField);
  UserDefRepLinesr.Desc = ImportField;
  UserDefRepLinesr.Comment = ImportField;
  UserDefRepLinesr.AccType = StringToInt(ImportField);
  UserDefRepLinesr.DCSide = StringToInt(ImportField);
  UserDefRepLinesr.DCSaldo = StringToInt(ImportField);
  UserDefRepLinesr.Desc2 = ImportField;
  UserDefRepLinesr.Desc3 = ImportField;
  UserDefRepLinesr.SpecCode = ImportField;
  rwcnt = 0;
  while (NextImportLine(false)) begin
    ClearRow(UserDefRepLinesr,UserDefRepLinesrw,1);
    UserDefRepLinesrw.LangCode = ImportField;
    UserDefRepLinesrw.Text = ImportField;
    MatRowPut(UserDefRepLinesr,rwcnt,UserDefRepLinesrw);
    rwcnt = rwcnt + 1;
  end; 
  ReadImportTagkgrupp3Record = oBalResf;
  return;
end;

global
function Integer ReadImportTagkgrupp2RecordRead(record UserDefRepLinesVc UserDefRepLinesr,var Boolean firstrow)
begin
  Integer oBalResf;

  RecordNew(UserDefRepLinesr);
  oBalResf = StringToInt(ImportField);
  if (firstrow) then begin
    firstrow = false;
  end;
  UserDefRepLinesr.RsType = StringToInt(ImportField);
  UserDefRepLinesr.IdKey = StringToLongInt(ImportField);
  UserDefRepLinesr.Desc = ImportField;
  UserDefRepLinesr.Comment = ImportField;
  UserDefRepLinesr.AccType = StringToInt(ImportField);
  UserDefRepLinesr.DCSide = StringToInt(ImportField);
  UserDefRepLinesr.DCSaldo = StringToInt(ImportField);
  UserDefRepLinesr.Desc2 = ImportField;
  UserDefRepLinesr.Desc3 = ImportField;
  UserDefRepLinesr.SpecCode = ImportField;
  return;
end;

global
procedure ReadImportTagCashierBalRecord(record CashierBalVc CashierBalr)
begin
  CashierBalr.UserCode = ImportField;
  CashierBalr.UserName = ImportField;
  CashierBalr.TransDate = StringToDate(ImportField);
  CashierBalr.StartBal = StringToVal(ImportField,M4Val);
  CashierBalr.EndBal = StringToVal(ImportField,M4Val);
  CashierBalr.OKFlag = StringToInt(ImportField);
  CashierBalr.Comment = ImportField;
  return;
end;

global
procedure ReadImportTagBudgetQuotationRecord(record BUQTVc BUQTr)
begin
  Integer rwcnt;
  row BUQTVc BUQTrw;

    RecordNew(BUQTr);  
    BUQTr.PRCode = ImportField;
    BUQTr.PRName = ImportField;
    BUQTr.BudTime = StringToInt(ImportField);
    BUQTr.BudOther = StringToInt(ImportField);
    BUQTr.SumTime = StringToVal(ImportField,M4Val);
    BUQTr.SumOther = StringToVal(ImportField,M4Val);
    BUQTr.Text0 = ImportField;
    BUQTr.Text1 = ImportField;
    BUQTr.Text2 = ImportField;
    BUQTr.Text3 = ImportField;
    BUQTr.Text4 = ImportField;
    BUQTr.Text5 = ImportField;
    BUQTr.Text6 = ImportField;
    BUQTr.Text7 = ImportField;
    BUQTr.Text8 = ImportField;
    BUQTr.Text9 = ImportField;
    BUQTr.Comment = ImportField;
    BUQTr.CustCode = ImportField;
    BUQTr.CustName = ImportField;
    BUQTr.BudStocked = StringToInt(ImportField);
    BUQTr.SumStocked = StringToVal(ImportField,M4Val);
    BUQTr.BudMaterial = StringToInt(ImportField);
    BUQTr.SumMaterial = StringToVal(ImportField,M4Val);
    BUQTr.SalesMan = ImportField;
    BUQTr.InvFlag = StringToInt(ImportField);
    BUQTr.LangCode = ImportField;
    BUQTr.Rejected = StringToInt(ImportField);
    BUQTr.RejectDate = StringToDate(ImportField);
    BUQTr.Markup = ImportField;
    BUQTr.SalesGroup = ImportField;
    BUQTr.TransDate = StringToDate(ImportField);
    BUQTr.TotSum = StringToVal(ImportField,M4Val);
    rwcnt = 0;
    while (NextImportLine(false)) begin
//      ClearRow(BUQTr,BUQTrw,BUQTrw.stp);
      BUQTrw.ArtCode = ImportField;
      BUQTrw.Spec = ImportField;
      BUQTrw.Qty = StringToVal(ImportField,M4UVal);
      BUQTrw.Price = StringToVal(ImportField,M423Val);
      BUQTrw.Discount = StringToVal(ImportField,M4Val);
      BUQTrw.Sum = StringToVal(ImportField,M4Val);
      BUQTrw.EMCode = ImportField;
      BUQTrw.RowType = StringToInt(ImportField);
      BUQTrw.BudType = StringToInt(ImportField);
      BUQTrw.ItemType = StringToInt(ImportField);
      BUQTrw.InvAfter = StringToDate(ImportField);
      BUQTrw.Invoiced = StringToLongInt(ImportField);
      BUQTrw.Comment = ImportField;
      BUQTrw.Cost = StringToVal(ImportField,M423Val);
      BUQTrw.GP = StringToVal(ImportField,M423Val);
      BUQTrw.TimeClass = ImportField;
      BUQTrw.Objects = ImportField;
      BUQTrw.InvDate = StringToDate(ImportField);
      BUQTrw.FromTBQT = StringToInt(ImportField);
      BUQTrw.stp = StringToInt(ImportField);
      BUQTrw.Markup = ImportField;
      BUQTrw.GM = StringToVal(ImportField,M41Val);
      BUQTrw.Recepy = ImportField;
      MatRowPut(BUQTr,rwcnt,BUQTrw);
      rwcnt = rwcnt + 1;
    end;    
  return;
end;

global
procedure ReadImportTagResAvVcRecordRead(record ResAvVc ResAvr)
begin
  row ResAvVc ResAvrw;
  string 255 sernr,dummy;
  Integer rwcnt;

    RecordNew(ResAvr);  
    sernr = ImportField;
    ResAvr.TransDate = StringToDate(ImportField);
    ResAvr.EndDate = StringToDate(ImportField);
    ResAvr.Comment = ImportField;
    ResAvr.SourceCode = ImportField;
    ResAvr.SourceName = ImportField;
    ResAvr.AgentPriceList = ImportField;
    ResAvr.AgentSum4 = StringToVal(ImportField,M4Val);
    ResAvr.OKFlag = StringToInt(ImportField);
    ResAvr.Closed = StringToInt(ImportField);
    ResAvr.TotPersons = StringToLongInt(ImportField);
    ResAvr.PubSum4 = StringToVal(ImportField,M4Val);
    ResAvr.MatherJobNr = StringToLongInt(ImportField);
    ResAvr.LangCode = ImportField;
    ResAvr.CUCode = ImportField;
    ResAvr.CUName = ImportField;
    ResAvr.NrOfDays = ImportField;
    dummy = ImportField;
    ResAvr.IncludePackage = StringToInt(ImportField);
    ResAvr.PrelFlag = StringToInt(ImportField);
    ResAvr.StartTime = StringToTime(ImportField);
    ResAvr.EndTime = StringToTime(ImportField);
    ResAvr.SerNr = StringToLongInt(sernr);
    if (sernr=="S") then begin
      ResAvr.SerNr = NextSerNr("ResAvVc",ResAvr.TransDate,-1,false,""); // S will give next free 
    end;      
    rwcnt = 0;
    while (NextImportLine(false)) begin
      ClearRow(ResAvr,ResAvrw,1);
      ResAvrw.ResType = ImportField;
      ResAvrw.QtyWanted = StringToVal(ImportField,M4Qty);
      ResAvrw.QtyAvailable = StringToVal(ImportField,M4Qty);
      ResAvrw.PubPriceList = ImportField;
      ResAvrw.Usage = ImportField;
      ResAvrw.AgentPrice = StringToVal(ImportField,M4Val);
      ResAvrw.AgentSum = StringToVal(ImportField,M4Val);
      ResAvrw.Persons = StringToLongInt(ImportField);
      ResAvrw.GuestCode = ImportField;
      ResAvrw.NoOfGuests = GetQtyConvImport(ImportField);
      ResAvrw.ArtCode = ImportField;
      ResAvrw.PubPrice = StringToVal(ImportField,M4Val);
      ResAvrw.PubSum = StringToVal(ImportField,M4Val);
      ResAvrw.CalcType = StringToInt(ImportField);
      ResAvrw.Comment = ImportField;
      ResAvrw.TransDate = StringToDate(ImportField);
      ResAvrw.EndDate = StringToDate(ImportField);
      MatRowPut(ResAvr,rwcnt,ResAvrw);
      rwcnt = rwcnt + 1;
    end;    
  return;
end;

global
procedure ReadImportTagAgreeTypeVcRecordRead(var record AgreeTypeVc AgreeTyper)
begin
  string 255 sernr,dummy;
  Integer rwcnt;

  RecordNew(AgreeTyper);  
  AgreeTyper.Code = ImportField;
  AgreeTyper.Comment = ImportField;
  AgreeTyper.perType = StringToInt(ImportField);
  AgreeTyper.perLength = StringToInt(ImportField);
  AgreeTyper.xInvPeriod = StringToInt(ImportField);
  AgreeTyper.xInvLength = StringToInt(ImportField);
  AgreeTyper.ChargeBankHol = StringToInt(ImportField);
  AgreeTyper.MinChargeQty = StringToVal(ImportField,M4Qty);
  AgreeTyper.MinChargeType = ImportField;
  return;
end;

global
procedure ReadImportTagRestBookingVcRecordRead(record RestBookingVc RestBookingr)
begin
  string 255 sernr,dummy;
  Integer rwcnt;

    RecordNew(RestBookingr);  
    sernr = ImportField;
    RestBookingr.BookDate = StringToDate(ImportField);
    RestBookingr.CUCode = ImportField;
    RestBookingr.CUName = ImportField;
    RestBookingr.Contact = ImportField;
    RestBookingr.ResCode = ImportField;
    RestBookingr.BookStart = StringToTime(ImportField);
    RestBookingr.BookEnd = StringToTime(ImportField);
    RestBookingr.Persons = StringToLongInt(ImportField);
    RestBookingr.Phone = ImportField;
    RestBookingr.Table = ImportField;
    
    RestBookingr.SerNr = StringToLongInt(sernr);
    if (sernr=="S") then begin
      RestBookingr.SerNr = NextSerNr("RestBookingVc",RestBookingr.BookDate,-1,false,""); // S will give next free 
    end;      
  return;
end;

global
procedure ReadImportTagEDIInvoicesRecord(record EDIIVVc EDIIVr)
begin
  Integer rwcnt,i;
  row EDIIVVc EDIIVrw;
  string 255 tstr;
  val sv;

    RecordNew(EDIIVr);      
    
    EDIIVr.SerNr = StringToLongInt(ImportField);
    EDIIVr.FrPrice = StringToVal(ImportField,M4Val);
    EDIIVr.FrBase = StringToVal(ImportField,M4Val);
    EDIIVr.FrItem = ImportField;
    EDIIVr.FrVATCode = ImportField;
    EDIIVr.FrObjects = ImportField;
    EDIIVr.OrgCust = ImportField;
    EDIIVr.FrGP = StringToVal(ImportField,M4Val);
    EDIIVr.FrGPPercent = StringToVal(ImportField,M4Val);
    EDIIVr.Sum0 = StringToVal(ImportField,M4Val);
    EDIIVr.Sum1 = StringToVal(ImportField,M4Val);
    EDIIVr.Sum2 = StringToVal(ImportField,M4Val);
    EDIIVr.Sum3 = StringToVal(ImportField,M4Val);
    EDIIVr.Sum4 = StringToVal(ImportField,M4Val);
    EDIIVr.VATNr = ImportField;
    EDIIVr.ShipDeal = ImportField;
    EDIIVr.ShipAddr0 = ImportField;
    EDIIVr.ShipAddr1 = ImportField;
    EDIIVr.ShipAddr2 = ImportField;
    EDIIVr.ShipAddr3 = ImportField;
    EDIIVr.ShipMode = ImportField;
    EDIIVr.Location = ImportField;
    EDIIVr.PRCode = ImportField;
    EDIIVr.FrSalesAcc = ImportField;
    EDIIVr.TAX1Sum = StringToVal(ImportField,M4Val);
    EDIIVr.CustVATCode = ImportField;
    EDIIVr.RebCode = ImportField;
    EDIIVr.CalcFinRef = ImportField;
    EDIIVr.Phone = ImportField;
    EDIIVr.Fax = ImportField;
    EDIIVr.IntCode = ImportField;
    EDIIVr.ARonTR = StringToInt(ImportField);
    EDIIVr.CustOrdNr = ImportField;
    EDIIVr.ExportedFlag = StringToInt(ImportField);
    EDIIVr.BaseSum4 = StringToVal(ImportField,M4Val);
    EDIIVr.FrRate = StringToVal(ImportField,M4Rate);
    EDIIVr.ToRateB2 = StringToVal(ImportField,M4Rate);
    EDIIVr.BaseRate1 = StringToVal(ImportField,M4Rate);
    EDIIVr.BaseRate2 = StringToVal(ImportField,M4Rate);
    EDIIVr.InvoiceNr = ImportField;
    EDIIVr.DiscPerc = StringToVal(ImportField,M4Val);
    EDIIVr.DiscSum = StringToVal(ImportField,M4Val);
    EDIIVr.TotGP = StringToVal(ImportField,M4Val);
    EDIIVr.LocOKNr = StringToVal(ImportField,M4Qty);
    EDIIVr.Invalid = StringToInt(ImportField);
    EDIIVr.CreditCard = ImportField;
    EDIIVr.AuthorizationCode = ImportField;
    EDIIVr.BatchNr = StringToLongInt(ImportField);
    EDIIVr.InvAddr3 = ImportField;
    EDIIVr.InvAddr4 = ImportField;
    EDIIVr.DelAddr3 = ImportField;
    EDIIVr.DelAddr4 = ImportField;
    EDIIVr.DelAddrCode = ImportField;
    EDIIVr.AutoGiro = StringToInt(ImportField);
    EDIIVr.SalesGroup = ImportField;
    EDIIVr.DisputedFlag = StringToInt(ImportField);
    EDIIVr.NoColectionFlag = StringToInt(ImportField);
    EDIIVr.FiscalFlag = StringToInt(ImportField);
    EDIIVr.OfficialSerNr = ImportField;
    
    rwcnt = 0;
    while (NextImportLine(false)) begin
      EDIIVrw.stp = StringToInt(ImportField);
      ClearRow(EDIIVr,EDIIVrw,EDIIVrw.stp);
      EDIIVrw.ArtCode = ImportField;
      EDIIVrw.Quant = StringToVal(ImportField,M4UVal);
      EDIIVrw.Price = StringToVal(ImportField,M423Val);
      EDIIVrw.Sum = StringToVal(ImportField,M4Val);
      EDIIVrw.vRebate = StringToVal(ImportField,M41Val);
      EDIIVrw.SalesAcc = ImportField;
      EDIIVrw.Objects = ImportField;
      EDIIVrw.OrdRow = StringToLongInt(ImportField);
      EDIIVrw.BasePrice = StringToVal(ImportField,M4Val);
      EDIIVrw.rowGP = StringToVal(ImportField,M4Val);
      EDIIVrw.FIFO = StringToVal(ImportField,M45Val);
      EDIIVrw.Spec = ImportField;
      EDIIVrw.VATCode = ImportField;
      EDIIVrw.Recepy = ImportField;
      EDIIVrw.SerialNr = ImportField;
      EDIIVrw.PriceFactor = StringToVal(ImportField,M45Val);
      EDIIVrw.VARList = ImportField;
      EDIIVrw.CUPNr = StringToLongInt(ImportField);
      EDIIVrw.FIFORowVal = StringToVal(ImportField,M45Val);
      EDIIVrw.Coefficient = StringToVal(ImportField,M45Val);
      EDIIVrw.CuAccCode = ImportField;
      EDIIVrw.ExciseNr = ImportField;
      EDIIVrw.PeriodCode = ImportField;
      EDIIVrw.UnitCode = ImportField;
      EDIIVrw.UnitFactQuant = StringToVal(ImportField,M4UVal);
      EDIIVrw.UnitFactPrice = StringToVal(ImportField,M423Val);
      EDIIVrw.UnitXval = StringToVal(ImportField,M4UVal);
      EDIIVrw.UnitYval = StringToVal(ImportField,M4UVal);
      EDIIVrw.UnitZval = StringToVal(ImportField,M4UVal);
      EDIIVrw.VECode = ImportField;
    
      MatRowPut(EDIIVr,rwcnt,EDIIVrw);
      rwcnt = rwcnt + 1;
    end; 
  return;
end;

global
procedure ReadImportTagUnivTestAnswerRecord(record UnivTestAnswerVc UTAr)
begin
  Integer rwcnt,i;
  row UnivTestAnswerVc UTArw;
  record UserVc Userr;

  RecordNew(UTAr);      
  
  UTAr.CourseCode = ImportField;
  UTAr.CourseName = ImportField;
  UTAr.LangCode = ImportField;
  UTAr.Person = ImportField;
  UTAr.PersonName = ImportField;
  UTAr.StartDate = StringToDate(ImportField);
  UTAr.StartTime = StringToTime(ImportField);
  UTAr.EndDate = StringToDate(ImportField);
  UTAr.EndTime = StringToTime(ImportField);
  UTAr.NoOfQuestions = StringToInt(ImportField);
  UTAr.CorrectAnswers = StringToInt(ImportField);  
  UTAr.CustCode = ImportField;
  if (blank(UTAr.CustCode)) then begin
    Userr.Code = UTAr.Person;
    if (FindTheUser(Userr)) then begin
    end;
    UTAr.CustCode = Userr.CustCode;  
  end;
  
  rwcnt = 0;
  while (NextImportLine(false)) begin
    ClearRow(UTAr,UTArw,1);

    UTArw.Question= ImportField;
    UTArw.Alt1= ImportField;
    UTArw.Alt2= ImportField;
    UTArw.Alt3= ImportField;
    UTArw.Answer = ImportField;
    UTArw.Alt4= ImportField;
    UTArw.Alt5= ImportField;
    UTArw.Alt6= ImportField;  
  
    MatRowPut(UTAr,rwcnt,UTArw);
    rwcnt = rwcnt + 1;
  end; 
  return;
end;

global
procedure ReadImportTagactvc2Record(record ActVc Actr)
begin
  Integer rwcnt,i;
  row ActVc Actrw;
  
  RecordNew(Actr);      
  
  Actr.SerNr = StringToLongInt(ImportField);
  Actr.MainPersons = ImportField;
  Actr.CCPersons = ImportField;
  Actr.TransDate = StringToDate(ImportField);
  Actr.EndDate = StringToDate(ImportField);
  Actr.StartTime = StringToTime(ImportField);
  Actr.EndTime = StringToTime(ImportField);
  Actr.CostTime = StringToTime(ImportField);
  Actr.CUCode = ImportField;
  Actr.CUName = ImportField;
  Actr.Contact = ImportField;
  Actr.Phone = ImportField;
  Actr.ActType = ImportField;
  Actr.ActResult = ImportField;
  Actr.OKFlag = StringToInt(ImportField);
  Actr.PrioLevel = StringToLongInt(ImportField);
  Actr.PrivateFlag = StringToInt(ImportField);
  Actr.TodoFlag = StringToInt(ImportField);
  Actr.CalTimeFlag = StringToInt(ImportField);
  Actr.PRCode = ImportField;
  Actr.ItemCode = ImportField;
  Actr.Comment = ImportField;
  Actr.LengthClass = StringToInt(ImportField);
  Actr.Resources = ImportField;
  Actr.Invalid = StringToInt(ImportField);
  Actr.TimeClass = ImportField;
  Actr.SymbNr = StringToInt(ImportField);
  Actr.Supervisor = ImportField;
  Actr.CreationDate = StringToDate(ImportField);
  Actr.LastChangedDate = StringToDate(ImportField);
  Actr.LangCode = ImportField;
  Actr.UserStr1 = ImportField;
  Actr.UserStr2 = ImportField;
  Actr.UserStr3 = ImportField;
  Actr.UserStr4 = ImportField;
  Actr.UserStr5 = ImportField;
  Actr.UserVal1 = StringToVal(ImportField,M4UVal);
  Actr.UserVal2 = StringToVal(ImportField,M4UVal);
  Actr.UserVal3 = StringToVal(ImportField,M4UVal);
  Actr.UserDate1 = StringToDate(ImportField);
  Actr.UserDate2 = StringToDate(ImportField);
  Actr.UserDate3 = StringToDate(ImportField);
  Actr.ArtCode = ImportField;
  Actr.SerialNr = ImportField;
  Actr.SVOSerNr = StringToLongInt(ImportField);
  Actr.ProdSerNr = StringToLongInt(ImportField);
  Actr.AlarmType = StringToInt(ImportField);
  Actr.AlarmWhen = StringToInt(ImportField);
  Actr.AlarmUnits = StringToInt(ImportField);
  Actr.ExternalType = StringToInt(ImportField);
  Actr.ExternalID = ImportField;
  Actr.InventoryNr = ImportField;
  Actr.ProdOpSerNr = StringToLongInt(ImportField);
  
  rwcnt = 0;
  while (NextImportLine(false)) begin
    ClearRow(Actr,Actrw,1);
    
    Actrw.TextCode = ImportField;
    Actrw.Text = ImportField;
    
    MatRowPut(Actr,rwcnt,Actrw);
    rwcnt = rwcnt + 1;
  end; 
  while (NextImportLine(false)) begin // Skipping the textfield added...
  end; 
  return;
end;

global
procedure ReadImportTagQualConVcRecordRead(record QualConVc QCr)
begin
  RecordNew(QCr);
  QCr.ArtCode = ImportField;
  QCr.SerialNr = ImportField;
  QCr.StatusCode = ImportField;
  QCr.AnalyseDate = StringToDate(ImportField);
  QCr.NewBestBefore = StringToDate(ImportField);
  QCr.NextAnalyseDate = StringToDate(ImportField);
  QCr.TestedBy = ImportField;
  QCr.Comment = ImportField;
  QCr.OKFlag = StringToInt(ImportField);
  QCr.SerNr = StringToLongInt(ImportField);
  QCr.AgreementNr = StringToLongInt(ImportField);
  QCr.RentResSerNo = StringToLongInt(ImportField);
  return;
end;

global
procedure ReadImportTagIVCashVcOrigRecord(record IVCashVc IVCashr)
begin
  row IVCashVc IVCashrw;
  integer rwcnt;
  
  RecordNew(IVCashr);
  IVCashr.SerNr = StringToLongint(ImportField);
  IVCashr.InvDate = StringToDate(ImportField);
  IVCashr.CustCode = ImportField;
  IVCashr.Addr0 = ImportField;
  IVCashr.Addr1 = ImportField;
  IVCashr.Addr2 = ImportField;
  IVCashr.Addr3 = ImportField;
  IVCashr.CustCat = ImportField;
  IVCashr.OKFlag = StringToInt(ImportField);
  IVCashr.ARonTR = StringToInt(ImportField);
  IVCashr.UpdStockFlag = StringToInt(ImportField);
  IVCashr.ExportedFlag = StringToInt(ImportField);
  IVCashr.InclVAT = StringToInt(ImportField);
  IVCashr.PayDate = StringToDate(ImportField);
  IVCashr.TransDate = StringToDate(ImportField);
  IVCashr.OurContact = ImportField;
  IVCashr.ClientContact = ImportField;
  IVCashr.SalesMan = ImportField;
  IVCashr.PayDeal = ImportField;
  IVCashr.RecValue = StringToVal(ImportField,M4Val);
  IVCashr.RetValue = StringToVal(ImportField,M4Val);
  IVCashr.Sum0 = StringToVal(ImportField,M4Val);
  IVCashr.Sum1 = StringToVal(ImportField,M4Val);
  IVCashr.Sum2 = StringToVal(ImportField,M4Val);
  IVCashr.Sum3 = StringToVal(ImportField,M4Val);
  IVCashr.Sum4 = StringToVal(ImportField,M4Val);
  IVCashr.VATNr = ImportField;
  IVCashr.BaseSum4 = StringToVal(ImportField,M4Val);
  IVCashr.FrRate = StringToVal(ImportField,M4Rate);
  IVCashr.ToRateB1 = StringToVal(ImportField,M4Rate);
  IVCashr.ToRateB2 = StringToVal(ImportField,M4Rate);
  IVCashr.BaseRate1 = StringToVal(ImportField,M4Rate);
  IVCashr.BaseRate2 = StringToVal(ImportField,M4Rate);
  IVCashr.CurncyCode = ImportField;
  IVCashr.LangCode = ImportField;
  IVCashr.CustOrdNr = ImportField;
  IVCashr.PriceList = ImportField;
  IVCashr.CustVATCode = ImportField;
  IVCashr.RebCode = ImportField;
  IVCashr.CreditCard = ImportField;
  IVCashr.AuthorizationCode = ImportField;
  IVCashr.InvComment = ImportField;
  IVCashr.LocOKNr = StringToVal(ImportField,M4Qty);
  IVCashr.Invalid = StringToInt(ImportField);
  IVCashr.Prntdf = StringToInt(ImportField);
  IVCashr.pdays = StringToLongint(ImportField);
  IVCashr.pdvrebt = StringToVal(ImportField,M4Qty);
  IVCashr.pdrdays = StringToLongint(ImportField);
  IVCashr.TotGP = StringToVal(ImportField,M4Val);
  IVCashr.Objects = ImportField;
  IVCashr.Location = ImportField;
  IVCashr.ARAcc = ImportField;
  IVCashr.POSNr = StringToLongint(ImportField);
  IVCashr.TransTime = StringToTime(ImportField);
  IVCashr.NLFlag = StringToInt(ImportField);
  IVCashr.CashValue = StringToVal(ImportField,M4Val);
  IVCashr.PayDeal2 = ImportField;
  IVCashr.RecValue2 = StringToVal(ImportField,M4Val);
  IVCashr.CreditCard2 = ImportField;
  IVCashr.AuthorizationCode2 = ImportField;
  IVCashr.TotQty = StringToVal(ImportField,M4Qty);
  IVCashr.TotWeight = StringToVal(ImportField,M4Qty);
  IVCashr.TotVolume = StringToVal(ImportField,M4Qty);
  IVCashr.LocalMachineCode = ImportField;
  IVCashr.InvAddr3 = ImportField;
  IVCashr.InvAddr4 = ImportField;
  IVCashr.DelAddrCode = ImportField;
  IVCashr.CashValueB2 = StringToVal(ImportField,M4Val);
  IVCashr.RetValueB2 = StringToVal(ImportField,M4Val);
  IVCashr.CashValueCur = StringToVal(ImportField,M4Val);
  IVCashr.RetValueCur = StringToVal(ImportField,M4Val);
  IVCashr.POSCurncyCode = ImportField;
  IVCashr.TAX1Sum = StringToVal(ImportField,M4Val);
  IVCashr.FiscalFlag = StringToInt(ImportField);
  IVCashr.OrderNr = StringToLongint(ImportField);
  IVCashr.StatVal = StringToVal(ImportField,M4Val);
  IVCashr.DrawerCode = ImportField;
  IVCashr.Region = ImportField;
  IVCashr.TAX2Sum = StringToVal(ImportField,M4Val);
  IVCashr.pdvrebt2 = StringToVal(ImportField,M4Qty);
  IVCashr.pdrdays2 = StringToLongint(ImportField);
  IVCashr.POSSalesNo = StringToLongint(ImportField);
  IVCashr.NoTAXonVAT = StringToLongint(ImportField);
  IVCashr.TotalwoTAX = StringToInt(ImportField);
  IVCashr.RegDate = StringToDate(ImportField);
  IVCashr.RegTime = StringToTime(ImportField);
  IVCashr.TendValue = StringToVal(ImportField,M4Val);
  IVCashr.TerminalID = ImportField;
  IVCashr.OfficialSerNr = ImportField;
  IVCashr.OfficialSerNr2 = ImportField;
  IVCashr.FiscalDeviceSeqNr = StringToLongint(ImportField);
  IVCashr.BranchID = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(IVCashr,IVCashrw,1);
    IVCashrw.stp = StringToInt(ImportField);
    IVCashrw.ArtCode = ImportField;
    IVCashrw.Quant = StringToVal(ImportField,M4UVal);
    IVCashrw.Price = StringToVal(ImportField,M423Val);
    IVCashrw.Sum = StringToVal(ImportField,M4Val);
    IVCashrw.vRebate = StringToVal(ImportField,M41Val);
    IVCashrw.SalesAcc = ImportField;
    IVCashrw.Objects = ImportField;
    IVCashrw.BasePrice = StringToVal(ImportField,M4Val);
    IVCashrw.rowGP = StringToVal(ImportField,M4Val);
    IVCashrw.FIFO = StringToVal(ImportField,M45Val);
    IVCashrw.Spec = ImportField;
    IVCashrw.VATCode = ImportField;
    IVCashrw.Recepy = ImportField;
    IVCashrw.SerialNr = ImportField;
    IVCashrw.PriceFactor = StringToVal(ImportField,M45Val);
    IVCashrw.FIFORowVal = StringToVal(ImportField,M45Val);
    IVCashrw.Coefficient = StringToVal(ImportField,M45Val);
    IVCashrw.ExciseNr = ImportField;
    IVCashrw.UnitCode = ImportField;
    IVCashrw.UnitFactQuant = StringToVal(ImportField,M4UVal);
    IVCashrw.UnitFactPrice = StringToVal(ImportField,M423Val);
    IVCashrw.UnitXval = StringToVal(ImportField,M4UVal);
    IVCashrw.UnitYval = StringToVal(ImportField,M4UVal);
    IVCashrw.UnitZval = StringToVal(ImportField,M4UVal);
    IVCashrw.OrdQuant = StringToVal(ImportField,M4UVal);
    IVCashrw.DownPaidSum = StringToVal(ImportField,M4Val);
    IVCashrw.OrdRow = StringToLongint(ImportField);
    IVCashrw.PosCode = ImportField;
    IVCashrw.TAX2Code = ImportField;
    IVCashrw.TAX2Prc = StringToVal(ImportField,M4Val);
    IVCashrw.TAX2Reb = StringToVal(ImportField,M4Val);
    IVCashrw.TAX1Reb = StringToVal(ImportField,M4Val);
    IVCashrw.TAX2Acc = ImportField;
    IVCashrw.GCNr = StringToLongint(ImportField);
    IVCashrw.PayMode = ImportField;
    IVCashrw.CreditCard = ImportField;
    IVCashrw.AuthorizationCode = ImportField;
    IVCashrw.CurncyCode = ImportField;
    IVCashrw.FrRate = StringToVal(ImportField,M4Rate);
    IVCashrw.ToRateB1 = StringToVal(ImportField,M4Rate);
    IVCashrw.ToRateB2 = StringToVal(ImportField,M4Rate);
    IVCashrw.BaseRate1 = StringToVal(ImportField,M4Rate);
    IVCashrw.BaseRate2 = StringToVal(ImportField,M4Rate);
    IVCashrw.VoidedRowNr = StringToLongint(ImportField);
    IVCashrw.Sign = ImportField;
    IVCashrw.ovst = StringToInt(ImportField);
    IVCashrw.VoidedSign = ImportField;
    IVCashrw.DiscApprovedBy = ImportField;
    MatRowPut(IVCashr,rwcnt,IVCashrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
procedure ReadImportTagartikel3Record_(record INVc INr)
begin
  row INVc INrw;
  integer rwcnt;
  
  RecordNew(INr);
  INr.Code = ImportField;
  INr.Name = ImportField;
  INr.Unittext = ImportField;
  INr.MinLevel = StringToVal(ImportField,M4Qty);
  INr.Objects = ImportField;
  INr.SalesAcc = ImportField;
  INr.UPrice1 = StringToVal(ImportField,M423Val);
  INr.ItemType = StringToInt(ImportField);
  INr.Group = ImportField;
  /*INr.x1 =*/ ImportField; // can't assign to M4Dummy...
  /*INr.x2 =*/ ImportField; // can't assign to M4Dummy...
  INr.InPrice = StringToVal(ImportField,M45Val);
  INr.InvCode = ImportField;
  INr.ExtraCost = StringToVal(ImportField,M4Val);
  INr.SerNrf = StringToInt(ImportField);
  INr.Department = ImportField;
  INr.Weight = StringToVal(ImportField,M45Val);
  INr.Volume = StringToVal(ImportField,M45Val);
  INr.EUCodex = ImportField;
  INr.InCurncyCode = ImportField;
  INr.Bonus = StringToVal(ImportField,M4Qty);
  INr.Recepy = ImportField;
  INr.Markup = StringToVal(ImportField,M4Qty);
  INr.x3 = ImportField;
  INr.BarCode = ImportField;
  INr.UpdateCost = StringToInt(ImportField);
  INr.LastPriceChange = StringToDate(ImportField);
  INr.CalcPrice = ImportField;
  INr.VATCode = ImportField;
  INr.PriceFactor = StringToVal(ImportField,M45Val);
  INr.Terminated = StringToInt(ImportField);
  INr.AvgMarkup = StringToVal(ImportField,M4Val);
  INr.LastPurchPrice = StringToVal(ImportField,M45Val);
  INr.LastPurchCurncyCode = ImportField;
  INr.WeighedAvPrice = StringToVal(ImportField,M45Val);
  INr.Conversion1 = StringToVal(ImportField,M45Val);
  INr.Conversion2 = StringToVal(ImportField,M45Val);
  INr.WarrantyLength = StringToVal(ImportField,M4Qty);
  INr.InvRecepy = ImportField;
  INr.EUSalesAcc = ImportField;
  INr.ExpSalesAcc = ImportField;
  INr.VATCodeEU = ImportField;
  INr.VATCodeExp = ImportField;
  INr.ChangePrice = StringToInt(ImportField);
  INr.RebCode = ImportField;
  INr.ExplodeRec = StringToInt(ImportField);
  INr.Unittext2 = ImportField;
  INr.UnitCoefficient = StringToVal(ImportField,M45Val);
  INr.WarnText1 = ImportField;
  INr.VARList = ImportField;
  INr.ItemMaterial = StringToInt(ImportField);
  INr.AlcPrc = StringToVal(ImportField,M4UVal);
  INr.DefaultSource = ImportField;
  INr.AlternativeCode = ImportField;
  INr.CostAcc = ImportField;
  INr.DefLocation = ImportField;
  INr.LastBasePriceChange = StringToDate(ImportField);
  INr.MaxLevel = StringToVal(ImportField,M4Qty);
  INr.LastPurchPrice2 = StringToVal(ImportField,M45Val);
  INr.Width = StringToVal(ImportField,M4UVal);
  INr.Height = StringToVal(ImportField,M4UVal);
  INr.Depth = StringToVal(ImportField,M4UVal);
  INr.ContractItem = ImportField;
  INr.Internal = StringToInt(ImportField);
  INr.InclItemFreight = StringToInt(ImportField);
  INr.FixedFreight = StringToVal(ImportField,M4Val);
  INr.DispGroups = ImportField;
  INr.HazLevCode = ImportField;
  INr.Density = StringToVal(ImportField,M45Val);
  INr.xClassification = ImportField;
  INr.CredSalesAcc = ImportField;
  INr.CredEUSalesAcc = ImportField;
  INr.CredExpSalesAcc = ImportField;
  INr.CredVATCode = ImportField;
  INr.CredVATCodeEU = ImportField;
  INr.CredVATCodeExp = ImportField;
  INr.RentalItem = ImportField;
  INr.CompUsage = ImportField;
  INr.colnr = StringToInt(ImportField);
  INr.VARMask = ImportField;
  INr.VARRepOrder = ImportField;
  INr.VARSubsets = ImportField;
  INr.LocArea = ImportField;
  INr.EKNCode = ImportField;
  INr.DefPalletItem = ImportField;
  INr.QtyonPallet = StringToVal(ImportField,M4UVal);
  INr.PalletWidth = StringToVal(ImportField,M4UVal);
  INr.PalletHeight = StringToVal(ImportField,M4UVal);
  INr.PalletDepth = StringToVal(ImportField,M4UVal);
  INr.Brand = ImportField;
  INr.BrandType = ImportField;
  INr.PickArea = ImportField;
  INr.SWWCode = ImportField;
  INr.RepaPricePerWeight = StringToVal(ImportField,M4Val);
  INr.PalletsInPickArea = StringToVal(ImportField,M4UVal);
  INr.DefPosWidth = StringToVal(ImportField,M4UVal);
  INr.DefPosHeight = StringToVal(ImportField,M4UVal);
  INr.DefPosDepth = StringToVal(ImportField,M4UVal);
  INr.InPriceB2 = StringToVal(ImportField,M45Val);
  INr.WeighedAvPriceB2 = StringToVal(ImportField,M45Val);
  INr.EUCostAcc = ImportField;
  INr.ExpCostAcc = ImportField;
  INr.PalletLayers = StringToVal(ImportField,M4UVal);
  INr.QtyonPalletLayer = StringToVal(ImportField,M4UVal);
  INr.UserStr1 = ImportField;
  INr.UserStr2 = ImportField;
  INr.UserStr3 = ImportField;
  INr.UserStr4 = ImportField;
  INr.UserStr5 = ImportField;
  INr.UserVal1 = StringToVal(ImportField,M4UVal);
  INr.UserVal2 = StringToVal(ImportField,M4UVal);
  INr.UserVal3 = StringToVal(ImportField,M4UVal);
  INr.UserDate1 = StringToDate(ImportField);
  INr.UserDate2 = StringToDate(ImportField);
  INr.UserDate3 = StringToDate(ImportField);
  INr.RentGroup = ImportField;
  INr.FAGroup = ImportField;
  INr.NetWeight = StringToVal(ImportField,M45Val);
  INr.PrimaryCostModel = StringToInt(ImportField);
  INr.QueuedCostModel = StringToInt(ImportField);
  INr.CostPerc = StringToVal(ImportField,M4Val);
  INr.FIFOPerSerialNr = StringToInt(ImportField);
  INr.FIFOPerLocation = StringToInt(ImportField);
  INr.WAPerLocation = StringToInt(ImportField);
  INr.CostPricePerLocation = StringToInt(ImportField);
  INr.NotForSales = StringToInt(ImportField);
  INr.SRUpdateCost = StringToInt(ImportField);
  INr.SuppSerialNr = ImportField;
  INr.MajStoneDet = ImportField;
  INr.Colour = ImportField;
  INr.Clarity = ImportField;
  INr.Cert = ImportField;
  INr.MinStoneDet = ImportField;
  INr.Metal = ImportField;
  INr.RowWeight = ImportField;
  INr.Size = ImportField;
  INr.Length = ImportField;
  INr.WatchBrand = ImportField;
  INr.StyleName = ImportField;
  INr.WatchMetal = ImportField;
  INr.Movement = ImportField;
  INr.BrcStr = ImportField;
  INr.Gender = ImportField;
  INr.Other = ImportField;
  INr.Other2 = ImportField;
  INr.Reference = ImportField;
  INr.Perceptions = StringToInt(ImportField);
  INr.Withholdings = StringToInt(ImportField);
  INr.TaxTemplateCode = ImportField;
  INr.TaxTemplateCodeEU = ImportField;
  INr.TaxTemplateCodeExp = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(INr,INrw,1);
    INrw.LangCode = ImportField;
    INrw.Text = ImportField;
    MatRowPut(INr,rwcnt,INrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;
