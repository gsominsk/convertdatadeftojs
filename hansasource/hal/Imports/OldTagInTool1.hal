external procedure ReadImportTagprislista1RecordRead(record PLDefVc);
external procedure ReadImportTagprice1RecordRead(var string,var string,var string,var string,var string);
external procedure ImpRMtext1Record(record RMVc,Integer);
external updating procedure ReadImportTagtimebudRecordRead(record TBVc);
external procedure ReadImportTagsalesmanRecordRead(record UserVc);
external procedure ReadImportTagsigns1RecordRead(record UserVc);
external procedure ReadImportTagEmailAliasBlockRecord(record EmailAliasVc);
external procedure ReadImportTagEmailPop3BlockRecord(record Pop3ServVc);
external updating procedure ReadImportTagImpcostbudRecord(record PBVc);
external procedure ReadImportTagImpbudg1v2Record(record Bud1Vc);
external procedure ReadImportTagImpBudgRecord(record Bud1Vc);
external procedure ReadImportTagActivitiesRecord(record ActVc,var string,var LongInt,var Integer);

external procedure CheckFlush(var Integer,Integer);
external procedure FBSumup(var record FBVc);
external function Boolean GetAccName(string,var string,Integer);
external updating procedure SetRemStatus(record IVVc,Boolean);
external procedure FindFiscalYear(Date,var Date,var Date);

updating procedure RLinkActImport(record ActVc Actr,Integer subrectyp,LongInt subrecsernr,string subreccod)
BEGIN
  record QTVc QTr;
  record ORVc ORr;
  record IVVc IVr;
  record PRVc PRr;
  record VIVc VIr;
  record LetVc Letr;
  record WOVc WOr;
  record COVc COr;
  Integer curcomp;
  
  curcomp = CurrentCompany;
  if ((subrectyp<1) or (subrectyp>8)) then begin
    goto LRLinkActImport;
  end;
  switch (subrectyp) begin
    case 1:
      QTr.SerNr  = subrecsernr;
      CreateRecordLink(Actr,curcomp,QTr,curcomp);
      CreateRecordLink(QTr,curcomp,Actr,curcomp);
    case 2:
      ORr.SerNr  = subrecsernr;
      CreateRecordLink(Actr,curcomp,ORr,curcomp);
      CreateRecordLink(ORr,curcomp,Actr,curcomp);
    case 3:
      IVr.SerNr  = subrecsernr;
      CreateRecordLink(Actr,curcomp,IVr,curcomp);  
      CreateRecordLink(IVr,curcomp,Actr,curcomp);  
    case 4: 
      PRr.Code = subreccod;
      CreateRecordLink(Actr,curcomp,PRr,curcomp);  
      CreateRecordLink(PRr,curcomp,Actr,curcomp);  
    case 5: 
      VIr.SerNr  = subrecsernr;
      CreateRecordLink(Actr,curcomp,VIr,curcomp);  
      CreateRecordLink(VIr,curcomp,Actr,curcomp);  
    case 6: 
      Letr.SerNr = subrecsernr;
      CreateRecordLink(Actr,curcomp,Letr,curcomp);  
      CreateRecordLink(Letr,curcomp,Actr,curcomp);  
    case 7: 
      WOr.SerNr  = subrecsernr;
      CreateRecordLink(Actr,curcomp,WOr,curcomp);  
      CreateRecordLink(WOr,curcomp,Actr,curcomp);  
    case 8: 
      COr.SerNr  = subrecsernr; 
      COr.ChildSerNr  = -1; 
      CreateRecordLink(Actr,curcomp,COr,curcomp);  
      CreateRecordLink(COr,curcomp,Actr,curcomp);  
  end;
LRLinkActImport:;
  RETURN;
END;

global
updating procedure ReadImportTagActivities()
begin
  record ActVc Actr;
  record ActVc Act2r;
  Integer cnt;
  string 255 subreccod;
  LongInt subrecsernr;
  Integer subrectyp;
  
  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagActivitiesRecord(Actr,subreccod,subrecsernr,subrectyp);
    if (subrectyp>0) then begin
      RLinkActImport(Actr,subrectyp,subrecsernr,subreccod);//todo
      if (subrectyp==4) then begin
        if (blank(Actr.PRCode)) then begin
          Actr.PRCode = subreccod;
        end;
      end;
    end;

    Act2r.CUCode = Actr.CUCode;
    Act2r.TransDate = Actr.TransDate;
    Act2r.StartTime = Actr.StartTime;
    if (ReadFirstMain(Act2r,3,true)) then begin
//      if (RecordUpdate(Act2r,Actr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Actr,false)) then begin end;
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagImpBudg()
begin
  record Bud1Vc Bud1r;
  Integer cnt;

  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagImpBudgRecord(Bud1r);

    if (RecordImportStore(Bud1r,false)) then begin end;
  end;
  return;
end;

global
updating procedure ReadImportTagImpbudg1v2()
begin
  record Bud1Vc Bud1r;
  Integer cnt;

  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);

    ReadImportTagImpbudg1v2Record(Bud1r);
    if (RecordImportStore(Bud1r,false)) then begin end;
  end;
  return;
end;

global
updating procedure ReadImportTagImpcostbud()
begin
  record PBVc PBr;
  Integer cnt;
  
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    
    ReadImportTagImpcostbudRecord(PBr);
    if (RecordImportStore(PBr,false)) then begin end;
  end;
  return;
end;

global
updating procedure ReadImportTagEmailPop3Block()
begin
  record Pop3ServVc P3Sr;
  record Pop3ServVc P3S2r;
  Integer cnt;

  RecordNew(P3Sr);
  P3S2r.Code = "999999";
  if (ReadLastMain(P3S2r,1,true)) then begin
    P3Sr.Code = P3S2r.Code;
  end;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);

    ReadImportTagEmailPop3BlockRecord(P3Sr);
    if (RecordImportStore(P3Sr,false)) then begin end;
  end;
  return;
end;

global
updating procedure ReadImportTagEmailAliasBlock()
begin
  record EmailAliasVc EmailAliasr;
  record EmailAliasVc EmailAlias2r;
  Integer cnt;

  RecordNew(EmailAliasr);
  EmailAlias2r.Pop3Serv = "999999";
  if (ReadLastMain(EmailAlias2r,1,true)) then begin
    EmailAliasr.Pop3Serv = EmailAlias2r.Pop3Serv;
  end;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);

    ReadImportTagEmailAliasBlockRecord(EmailAliasr);
    if (RecordImportStore(EmailAliasr,false)) then begin end;
  end;
  return;
end;

global
updating procedure ReadImportTagsigns1(string thetag)
begin
  record UserVc oldUserr;
  record UserVc Userr;
  Integer cnt;
  
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);

    ReadImportTagsigns1RecordRead(Userr);
    oldUserr.Code = Userr.Code;
    if (ReadFirstMain(oldUserr,1,true)) then begin
      if (blankuuid(Userr.UUID)) then begin
        Userr.UUID = oldUserr.UUID;
        Userr.ServerSequence = oldUserr.ServerSequence;
        Userr.SyncFlags = oldUserr.SyncFlags;
      end;
      if (RecordUpdate(oldUserr,Userr,false)==0) then begin end;
    end else begin
      if (nonblank(Userr.Code)) then begin
        if (RecordImportStore(Userr,false)) then begin end;
      end;
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagsalesman(string thetag)
begin
  record UserVc oldUserr;
  record UserVc Userr;
  Integer cnt;
  
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);

    ReadImportTagsalesmanRecordRead(Userr);
    oldUserr.Code = Userr.Code;
    if (ReadFirstMain(oldUserr,1,true)) then begin
      if (blankuuid(Userr.UUID)) then begin
        Userr.UUID = oldUserr.UUID;
        Userr.ServerSequence = oldUserr.ServerSequence;
        Userr.SyncFlags = oldUserr.SyncFlags;
      end;
      if (RecordUpdate(oldUserr,Userr,false)==0) then begin end;
    end else begin
      if (nonblank(Userr.Code)) then begin
        if (RecordImportStore(Userr,false)) then begin end;
      end;
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagtimebud(string thetag)
begin
  record TBVc TBr;
  Integer cnt;

  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    
    ReadImportTagtimebudRecordRead(TBr);
    if (RecordImportStore(TBr,false)) then begin end;
  end;
  return;
end;

updating procedure ImpRMtext1(Integer ver)
begin
  record RMVc RMr;
  Integer cnt;
  
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);

    ImpRMtext1Record(RMr,ver);
    if (RecordImportStore(RMr,false)) then begin end;    
  end;
  return;
end;

global
updating procedure ReadImportTagp_mtext1(string thetag)
begin
  ImpRMtext1(1);
  return;
end;

global
updating procedure ReadImportTagremindertext(string thetag)
begin
  ImpRMtext1(2);
  return;
end;

global
updating procedure ReadImportTagprice1(string thetag)
begin
  record INVc oldINr;
  record INVc INr;
  Integer cnt;
  Boolean found;
  string 255 item,t1,t2,t3,t4;
  
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    RecordNew(INr);

    ReadImportTagprice1RecordRead(item,t1,t2,t3,t4);

    INr.Code = item;
    found = ReadFirstMain(INr,1,true);
    if (found) then begin
      RecordCopy(oldINr,INr);
      if (nonblank(t1)) then begin
        INr.UPrice1 = StringToVal(t1,M423Val);
      end;
      if (nonblank(t3)) then begin
        INr.InPrice = StringToVal(t3,M423Val);
      end;
      if (nonblank(t4)) then begin
        INr.ExtraCost = StringToVal(t4,M4Val);
      end;
    end;
    if (found==true) then begin
      if (RecordUpdate(oldINr,INr,false)==0) then begin end;
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagprislista1(string thetag) // Isn't this the correct name?
begin
  record PLDefVc PLDefr;
  
  ReadImportTagprislista1RecordRead(PLDefr);
  if (RecordStore(PLDefR,false)) then begin end;
  return;
end;

// The function called ReadImportTagprice1 already exists in the top of the file
// Don't put it back again :-)

global
updating procedure ReadImportTaglfaktrader(string thetag)//?? what is it?
begin
  record VIVc VIr;
  record VIVc oldVIr;
  row VIVc VIrw;
  Boolean ivfound;
  Integer rwcnt,i,cnt;
  
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);

    VIr.SerNr = StringToLongInt(ImportField);
    ivfound = ReadFirstMain(VIr,1,true);
    RecordCopy(oldVIr,VIr);
    if (ivfound==false) then begin
      goto L30lfaktrader;
    end;
    rwcnt = MatRowCnt(VIr);
    ClearRow(VIr,VIrw,1);
    i = rwcnt;
    VIrw.stp = StringToInt(ImportField);
    switch (VIrw.stp) begin
      case 1: 
        VIrw.ovst = StringToInt(ImportField);
        VIrw.AccNumber = ImportField;
        VIrw.Objects = ImportField;
        VIrw.Comment = ImportField;
        VIrw.Sum = StringToVal(ImportField,M4Val);
        VIrw.Item = ImportField;
        VIrw.qty = StringToVal(ImportField,M4UVal);
        VIrw.PRCode = ImportField;
        VIrw.VATCode = ImportField;
        if (VIrw.ovst!=1) then begin VIrw.ovst = 0; end;
      case 3: 
        VIrw.ovst = StringToInt(ImportField);
        VIr.CredInv = StringToLongInt(ImportField);
    end;
    MatRowPut(VIr,i,VIrw);
    if (ivfound) then begin
      if (RecordUpdate(oldVIr,VIr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(VIr,false)) then begin end;
    end;
L30lfaktrader:;    
  end;
  return;
end;

global
updating procedure ReadImportTagp_mstat(string thetag)
begin
  record IVVc IVr;
  record IVVc oldIVr;
  Integer cnt;
  LongInt vl;

  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    RecordNew(IVr);
    IVr.SerNr = StringToLongInt(ImportField);
    IVr.LastRemndr = StringToLongInt(ImportField);
    vl = StringToLongInt(ImportField);
    IVr.LastRemDate = StringToDate(ImportField);
    SetRemStatus(IVr,false);
  end;
  return;
end;

global
updating procedure SaveFB(record FBVc FBr)
begin
  record FBVc oldFBr;
  
  oldFBr.SerNr = FBr.SerNr;
  if (ReadFirstMain(oldFBr,1,true)==false) then begin
    FBSumup(FBr);
    FBr.Balf = 0;
    if (RecordImportStore(FBr,false)) then begin end;
  end;
  return;
end;

global
procedure AddFBRow(record FBVc FBp,string acc,string comm,val valv,Boolean accf,Boolean dcflag,var val totsump)
BEGIN
  Integer i,rwcnt;
  Boolean found;
  row FBVc FBrw;
  val sv;
  
  if (valv==0) then begin goto LAddFBRow; end;
  if (blank(acc)) then begin goto LAddFBRow; end;
  found = false;
  rwcnt = MatRowCnt(FBp);
  if (accf) then begin
    for (i=0; i<rwcnt;i=i+1) begin
      MatRowGet(FBp,i,FBrw);
      if (acc!=FBrw.AccNumber) then begin goto L22AddFBRow; end;
    end;
  end else begin
    i = rwcnt;
  end;
  rwcnt = rwcnt + 1;
  ClearRow(FBp,FBrw,1);
  FBrw.AccNumber = acc;
  FBrw.Comment = comm;
L22AddFBRow:
  if (dcflag) then begin
    totsump = totsump + valv;
    sv = valv;
  end else begin
    totsump = totsump - valv;
    sv = -valv;
  end;
  if (sv>=0) then begin
    FBrw.DebVal = FBrw.DebVal + sv;
  end else begin
    FBrw.CredVal = FBrw.CredVal - sv;
  end;  
  sv = FBrw.DebVal - FBrw.CredVal;
  if (sv>=0) then begin
    FBrw.DebVal = sv;
    FBrw.CredVal = blankval;
  end else begin
    FBrw.DebVal = blankval;
    FBrw.CredVal = -sv;
  end;
  MatRowPut(FBp,i,FBrw);
LAddFBRow:;
  RETURN;
END;

global
updating procedure ReadImportTaginsaldon2(string thetag)
begin
  record FBVc FBr;
  row FBVc FBrw;
  Integer rwcnt,cnt;
  val TotSum;
  Date curYearstartdate,curYearenddate,prevYearDate;
  string 10 anr;
  string 255 obj,tstr;
  val sb,simb,pr,totsb,totsimsb;
  
  FindFiscalYear(CurrentDate,curYearstartdate,curYearenddate);
  prevYearDate = AddDay(curYearstartdate,1);
  prevYearDate = AddDay(prevYearDate,-2);
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    if (rwcnt==0) then begin
      RecordNew(FBr);
      FBr.TransDate = prevYearDate;
      FBr.SimFlag = 0;
      TotSum = 0;
    end;
    anr = ImportField;
    obj = ImportField;
    sb = StringToVal(ImportField,M4Val);
    simb = StringToVal(ImportField,M4Val);
    pr = StringToVal(ImportField,M4Val);
    if (blank(obj)) then begin
      totsb = totsb - sb;
      totsimsb = totsimsb - sb;
    end;
    if (blank(obj)) then begin
      if (GetAccName(anr,tstr,60)==false) then begin end;
      AddFBRow(FBr,anr,tstr,sb,false,true,TotSum);
      rwcnt = rwcnt + 1;
    end else begin
      if (GetAccName(anr,tstr,60)==false) then begin end;
    end;
    if (rwcnt>98) then begin
      FBr.SerNr = NextSerNr("FBVc",prevYearDate,-1,false,"");
      SaveFB(FBr);
      rwcnt = 0;
    end;
  end;
  if (rwcnt>0) then begin
    FBr.SerNr = NextSerNr("FBVc",prevYearDate,-1,false,"");
    SaveFB(FBr);
  end;  
  return;
end;

