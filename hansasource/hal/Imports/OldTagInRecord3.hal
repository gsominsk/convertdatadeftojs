external function string 20 FindProperUserDefName(string);
external function LongInt GetQtyConvImport(string);

updating procedure ImpNewBalRes(string shortname,string critname,string defname,Integer type)
begin
  record UserDefRepVc UserDefRepr;
  record UserDefRepVc oldUserDefRepr;
  record UserDefRepLinesVc UserDefRepLinesr;
  row UserDefRepLinesVc UserDefRepLinesrw;
  Integer i;
  Boolean storedf;
  
  UserDefRepr.shortname = FindProperUserDefName(shortname);
  UserDefRepr.critname = critname;
  UserDefRepr.defname = defname;
  UserDefRepr.Type = type;
  switch (UserDefRepr.Type) begin
    case kUserDefRepBal: UserDefRepr.repname = "BalRn";
    case kUserDefRepRes: UserDefRepr.repname = "ResRn";
  end;
  RecordCopy(oldUserDefRepr,UserDefRepr);
  if (ReadFirstMain(oldUserDefRepr,1,true)==false) then begin
    if (RecordImportStore(UserDefRepr,false)) then begin
    end;
    storedf = true;
  end;
  UserDefRepLinesr.shortname = UserDefRepr.shortname;
  while (NextImportLine(false)) begin
    UserDefRepLinesr.IdKey = StringToLongInt(ImportField);
    UserDefRepLinesr.Desc = ImportField;
    UserDefRepLinesr.Comment = ImportField;
    UserDefRepLinesr.RsType = StringToInt(ImportField);
    UserDefRepLinesr.AccType = StringToInt(ImportField);
    UserDefRepLinesr.Sign = ImportField;
    UserDefRepLinesr.DCSide = StringToInt(ImportField);
    UserDefRepLinesr.DCSaldo = StringToInt(ImportField);
    UserDefRepLinesr.Desc2 = ImportField;
    UserDefRepLinesr.Desc3 = ImportField;
    UserDefRepLinesr.SpecCode = ImportField;
    i = 0;
    while (NextImportLine(false)) begin
      UserDefRepLinesrw.LangCode = ImportField;
      UserDefRepLinesrw.Text = ImportField;
      MatRowPut(UserDefRepLinesr,i,UserDefRepLinesrw);
      i = i + 1;
    end;
    if (storedf) then begin
      if (RecordImportStore(UserDefRepLinesr,false)) then begin
      end;
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagBalGrVc(string thetag)
begin
  string 40 shortname;
  record UserDefRepVc UserDefRepr;
  record UserDefRepVc oldUserDefRepr;
  Integer cnt;
  
  switch (thetag) begin
    case "BalGrVc": shortname = "BalRn";
    case "BalGr1Vc": shortname = "Bal1Rn";
    case "BalGr2Vc": shortname = "Bal2Rn";
    case "BalGr3Vc": shortname = "Bal3Rn";
    case "BalGr4Vc": shortname = "Bal4Rn";
    case "BalGr5Vc": shortname = "Bal5Rn";
    case "BalGr6Vc": shortname = "Bal6Rn";
    case "BalGr7Vc": shortname = "Bal7Rn";
    case "BalGr8Vc": shortname = "Bal8Rn";
    case "BalGr9Vc": shortname = "Bal9Rn";
    case "BalGr10Vc": shortname = "Bal10Rn";
    case "BalGr11Vc": shortname = "Bal11Rn";
    case "BalGr12Vc": shortname = "Bal12Rn";
    case "BalGr13Vc": shortname = "Bal13Rn";
    case "BalGr14Vc": shortname = "Bal14Rn";
    case "BalGr15Vc": shortname = "Bal15Rn";
  end;
  ImpNewBalRes(shortname,"BalRClass","UserDefRepBalDClass",kUserDefRepBal);
  return;
end;

global
updating procedure ReadImportTagBalGr1Vc(string thetag)
begin
  ReadImportTagBalGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagBalGr2Vc(string thetag)
begin
  ReadImportTagBalGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagBalGr3Vc(string thetag)
begin
  ReadImportTagBalGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagBalGr4Vc(string thetag)
begin
  ReadImportTagBalGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagBalGr5Vc(string thetag)
begin
  ReadImportTagBalGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagBalGr6Vc(string thetag)
begin
  ReadImportTagBalGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagBalGr7Vc(string thetag)
begin
  ReadImportTagBalGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagBalGr8Vc(string thetag)
begin
  ReadImportTagBalGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagBalGr9Vc(string thetag)
begin
  ReadImportTagBalGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagBalGr10Vc(string thetag)
begin
  ReadImportTagBalGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagBalGr11Vc(string thetag)
begin
  ReadImportTagBalGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagBalGr12Vc(string thetag)
begin
  ReadImportTagBalGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagBalGr13Vc(string thetag)
begin
  ReadImportTagBalGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagBalGr14Vc(string thetag)
begin
  ReadImportTagBalGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagBalGr15Vc(string thetag)
begin
  ReadImportTagBalGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagResGrVc(string thetag)
begin
  string 40 shortname;
  record UserDefRepVc UserDefRepr;
  record UserDefRepVc oldUserDefRepr;
  Integer cnt;
  
  switch (thetag) begin
    case "ResGrVc": shortname = "ResRn";
    case "ResGr1Vc": shortname = "Res1Rn";
    case "ResGr2Vc": shortname = "Res2Rn";
    case "ResGr3Vc": shortname = "Res3Rn";
    case "ResGr4Vc": shortname = "Res4Rn";
    case "ResGr5Vc": shortname = "Res5Rn";
    case "ResGr6Vc": shortname = "Res6Rn";
    case "ResGr7Vc": shortname = "Res7Rn";
    case "ResGr8Vc": shortname = "Res8Rn";
    case "ResGr9Vc": shortname = "Res9Rn";
    case "ResGr10Vc": shortname = "Res10Rn";
    case "ResGr11Vc": shortname = "Res11Rn";
    case "ResGr12Vc": shortname = "Res12Rn";
    case "ResGr13Vc": shortname = "Res13Rn";
    case "ResGr14Vc": shortname = "Res14Rn";
    case "ResGr15Vc": shortname = "Res15Rn";
  end;
  ImpNewBalRes(shortname,"ResRClass","UserDefRepResDClass",kUserDefRepRes);
  return;
end;

global
updating procedure ReadImportTagResGr1Vc(string thetag)
begin
  ReadImportTagResGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagResGr2Vc(string thetag)
begin
  ReadImportTagResGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagResGr3Vc(string thetag)
begin
  ReadImportTagResGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagResGr4Vc(string thetag)
begin
  ReadImportTagResGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagResGr5Vc(string thetag)
begin
  ReadImportTagResGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagResGr6Vc(string thetag)
begin
  ReadImportTagResGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagResGr7Vc(string thetag)
begin
  ReadImportTagResGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagResGr8Vc(string thetag)
begin
  ReadImportTagResGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagResGr9Vc(string thetag)
begin
  ReadImportTagResGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagResGr10Vc(string thetag)
begin
  ReadImportTagResGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagResGr11Vc(string thetag)
begin
  ReadImportTagResGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagResGr12Vc(string thetag)
begin
  ReadImportTagResGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagResGr13Vc(string thetag)
begin
  ReadImportTagResGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagResGr14Vc(string thetag)
begin
  ReadImportTagResGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagResGr15Vc(string thetag)
begin
  ReadImportTagResGrVc(thetag);
  return;
end;

global
updating procedure ReadImportTagwindows(string thetag)
begin
  record WRVc WRr;
  record WRVc oldWRr;
  
  while (NextImportLine(false)) begin
    RecordNew(WRr);
    
    WRr.Sign = ImportField;
    WRr.WClassName = ImportField;
    WRr.Subset = ImportField;
    WRr.rtleft = StringToInt(ImportField);
    WRr.rttop = StringToInt(ImportField);
    WRr.rtright = StringToInt(ImportField);
    WRr.rtbottom = StringToInt(ImportField);
    WRr.vis = StringToInt(ImportField);
    WRr.startKey = StringToInt(ImportField);
    WRr.sortorder = StringToInt(ImportField);
    WRr.firsttile = StringToInt(ImportField);
    WRr.firstflip = StringToInt(ImportField);
    
    RecordCopy(oldWRr,WRr);
    
    if (ReadFirstMain(oldWRr,1,true)==false) then begin
      if (RecordImportStore(WRr,false)) then begin
      end;
    end;
  end;
  
  return;
end;

global
updating procedure ReadImportTagJobPriceVc(string thetag)
begin
  record JobPriceVc JPr;
  record JobPriceVc JP2r;
  row JobPricevc JPrw;
  integer rowcnt;
  
  while (NextImportLine(false)) begin
    RecordNew(JPr);
    JPr.SerNr = StringToLongInt(ImportField);
    JPr.RecType = StringToInt(ImportField);
    JPr.RowNr = StringToInt(ImportField);
    JPr.Comment = ImportField;
    JPr.TransDate = StringToDate(ImportField);
    JPr.EndDate = StringToDate(ImportField);
    JPr.StartTime = StringToTime(ImportField);
    JPr.EndTime = StringToTime(ImportField);
    JPr.NoOfGuests = GetQtyConvImport(ImportField); //Importing the old 'QtyConv' field here...
    JPr.Type = ImportField;
    JPr.ResUsage = ImportField;
    JPr.PriceList = ImportField;
    rowcnt = 0;
    while (NextImportLine(false)) begin
      ClearRow(JPr,JPrw,1);
      JPrw.StayDay = StringToDate(ImportField);
      JPrw.PriceList = ImportField;
      JPrw.vRebate = StringtoVal(ImportField,M45Val);
      JPrw.Price = StringtoVal(ImportField,M423Val);
      JPrw.Sum = StringtoVal(ImportField,M4Val);
      JPrw.ArtCode = ImportField;
      JPrw.VATCode = ImportField;
      JPrw.Qty = StringToVal(ImportField,M4Qty);
      JPrw.AgreedPrice = StringtoVal(ImportField,M423Val);
      JPrw.Person = ImportField;
      JPrw.CClass = ImportField;
      MatRowPut(JPr,rowcnt,JPrw)
      rowcnt = rowcnt+1;
    end;  
    JP2r.RecType = JPr.RecType;
    JP2r.SerNr = JPr.SerNr;
    JP2r.RowNr = JPr.RowNr;
    if (ReadFirstMain(JP2r,3,true)) then begin
      RecordUpdate(JP2r,JPr,false);
    end else begin
      RecordImportStore(JPr,false)
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagResAvVc2(string thetag)
begin
  record ResAvVc ResAvr;
  record ResAvVc ResAv2r;
  row ResAvVc ResAvrw;
  integer rowcnt;
  string 255 dummy;
  
  while (NextImportLine(false)) begin
    RecordNew(ResAvr);
    ResAvr.SerNr = StringToLongInt(ImportField);
    ResAvr.TransDate = StringToDate(ImportField);
    ResAvr.EndDate = StringToDate(ImportField);
    ResAvr.Comment = ImportField;
    ResAvr.SourceCode = ImportField;
    ResAvr.SourceName = ImportField;
    ResAvr.AgentPriceList = ImportField;
    ResAvr.AgentSum4 = StringToVal(ImportField,M4Val);
    ResAvr.OKFlag = StringToInt(ImportField);
    ResAvr.Closed = StringToInt(ImportField);
    ResAvr.TotPersons = StringToLongInt(ImportField);
    ResAvr.PubSum4 = StringToVal(ImportField,M4Val);
    ResAvr.MatherJobNr = StringToLongInt(ImportField);
    ResAvr.LangCode = ImportField;
    ResAvr.CUCode = ImportField;
    ResAvr.CUName = ImportField;
    ResAvr.NrOfDays = StringToLongInt(ImportField);
    dummy = ImportField; //xLangCode
    ResAvr.IncludePackage = StringToInt(ImportField);    
    ResAvr.PrelFlag = StringToInt(ImportField);
    ResAvr.StartTime = StringToTime(ImportField);
    ResAvr.EndTime = StringToTime(ImportField);
    ResAvr.LTxtCode = ImportField;
    ResAvr.GroupWillNotPay = StringToInt(ImportField);
    ResAvr.CustContact = ImportField;
    ResAvr.Sign = ImportField;
    ResAvr.RefStr = ImportField;
    ResAvr.BookOrigin = ImportField;
    rowcnt = 0;
    while (NextImportLine(false)) begin
      ClearRow(ResAvr,ResAvrw,1);
      ResAvrw.ResType = ImportField;
      ResAvrw.QtyWanted = StringToVal(ImportField,M4UVal);
      ResAvrw.QtyAvailable = StringtoVal(ImportField,M4Qty);
      ResAvrw.PubPriceList = ImportField;
      ResAvrw.Usage = ImportField;
      ResAvrw.AgentPrice = StringToVal(ImportField,M4Val);
      ResAvrw.AgentSum = StringToVal(ImportField,M4Val);
      ResAvrw.Persons = StringToLongInt(ImportField);
      ResAvrw.GuestCode = ImportField;
      ResAvrw.NoOfGuests = GetQtyConvImport(ImportField); //Importing the old 'QtyConv' field here...
      ResAvrw.ArtCode = ImportField;
      ResAvrw.PubPrice = StringToVal(ImportField,M4Val);
      ResAvrw.PubSum = StringToVal(ImportField,M4Val);
      ResAvrw.CalcType = StringToInt(ImportField);
      ResAvrw.Comment = ImportField;
      ResAvrw.TransDate = StringToDate(ImportField);
      ResAvrw.EndDate = StringToDate(ImportField);
      ResAvrw.StartTime = StringToTime(ImportField);
      ResAvrw.EndTime = StringToTime(ImportField);
      ResAvrw.AgentVat = StringToVal(ImportField,M4Val);
      ResAvrw.PubVat = StringToVal(ImportField,M4Val);
      ResAvrw.NrOfDays = StringToLongInt(ImportField);
      ResAvrw.Classification = ImportField;
      ResAvrw.Children = StringToLongInt(ImportField);
      ResAvrw.RefStr = ImportField;
      ResAvrw.BookOrigin = ImportField;
      MatRowPut(ResAvr,rowcnt,ResAvrw);
      rowcnt = rowcnt+1;
    end;
    ReadRecordTextField(ResAvr,"Math");
    ResAv2r.SerNr = ResAvr.SerNr;
    if (ReadFirstMain(ResAv2r,1,true)) then begin
      RecordUpdate(ResAv2r,ResAvr,false);
    end else begin
      RecordImportStore(ResAvr,false);
    end;
  end;
  
  return;
end;

global
updating procedure ReadImportTagResArtCodeVc(string thetag)
begin
  record ResArtCodeVc ResArtCoder;
  record ResArtCodeVc ResArtCode2r;

  while (NextImportLine(false)) begin
    RecordNew(ResArtCoder);
    ResArtCoder.ResType = ImportField;
    ResArtCoder.ResUsageCode = ImportField;
    ResArtCoder.WeekPart = StringToInt(ImportField);
    ResArtCoder.ArtCode = ImportField;
    ResArtCoder.Comment = ImportField;
    ResArtCoder.NoOfGuests = GetQtyConvImport(ImportField); //Importing the old 'QtyConv' field here...
    ResArtCoder.PriceForWholeRoom = StringToInt(ImportField);
    ResArtCoder.CClassDCode = ImportField;
    //Set main key field values
    ResArtCode2r.ResType = ResArtCoder.ResType;
    ResArtCode2r.ResUsageCode = ResArtCoder.ResUsageCode;
    ResArtCode2r.WeekPart = ResArtCoder.WeekPart;
    ResArtCode2r.NoOfGuests = ResArtCoder.NoOfGuests;    
    if (ReadFirstMain(ResArtCode2r,4,true)) then begin
      RecordUpdate(ResArtCode2r,ResArtCoder,false);
    end else begin
      RecordImportStore(ResArtCoder,false);
    end;
  end;
  
  return;
end;

global
procedure ReadImportTagCClassDRecord(record CClassDVc CCDr)
begin
  Integer rwcnt;
  row CClassDVc CCDrw;

  RecordNew(CCDr);      
  CCDr.Code = ImportField;
  CCDr.Comment = ImportField;
  rwcnt = 0;
  while (NextImportLine(false)) begin
    ClearRow(CCDr,CCDrw,1);
    CCDrw.CClass = ImportField;
    CCDrw.Type = StringToInt(ImportField);
    CCDrw.Percentage = StringToVal(ImportField,M4Qty);
    CCDrw.Percentage = CCDrw.Percentage & "%";
    MatRowPut(CCDr,rwcnt,CCDrw);
    rwcnt = rwcnt + 1;
  end;    
  return;
end;

procedure ReadImportTaguser1Record(record UserVc Userr)
begin
  row UserVc Userrw;
  integer rwcnt;
  
  RecordNew(Userr);
  Userr.Code = ImportField;
  Userr.Name = ImportField;
  Userr.OldPassWord = ImportField;
  Userr.AccessGroup = ImportField;
  Userr.CurOurContact = ImportField;
  Userr.LastOrdNr = StringToLongint(ImportField);
  Userr.LastShipNr = StringToLongint(ImportField);
  Userr.LastInvNr = StringToLongint(ImportField);
  Userr.LastPurNr = StringToLongint(ImportField);
  Userr.LastPayNr = StringToLongint(ImportField);
  Userr.LastTRNr = StringToLongint(ImportField);
  Userr.LastVINr = StringToLongint(ImportField);
  Userr.LastOPNr = StringToLongint(ImportField);
  Userr.TerminatedFlag = StringToInt(ImportField);
  Userr.Job = ImportField;
  Userr.JobGroup = ImportField;
  Userr.DisAllowOther = StringToInt(ImportField);
  Userr.Location = ImportField;
  Userr.Machines = ImportField;
  Userr.Tiller = ImportField;
  Userr.Bonus = StringToVal(ImportField,M4Val);
  Userr.CUCode = ImportField;
  Userr.CUName = ImportField;
  Userr.Phone1 = ImportField;
  Userr.Phone2 = ImportField;
  Userr.Fax1 = ImportField;
  Userr.Fax2 = ImportField;
  Userr.Comment = ImportField;
  Userr.PersAcc = ImportField;
  Userr.PersObjx = ImportField;
  Userr.BankAcc = ImportField;
  Userr.BankName = ImportField;
  Userr.CostPrHour = StringToVal(ImportField,M4Val);
  Userr.PricePrHour = StringToVal(ImportField,M4Val);
  Userr.emailAddr = ImportField;
  Userr.IDCode = ImportField;
  Userr.Spec = ImportField;
  Userr.limitedAccess = StringToInt(ImportField);
  Userr.NewPassWord = ImportField;
  Userr.LangCode = ImportField;
  Userr.SalesGroup = ImportField;
  Userr.Department = ImportField;
  Userr.LastCLInNr = StringToLongint(ImportField);
  Userr.LastCLOutNr = StringToLongint(ImportField);
  Userr.FTPLogin = StringToInt(ImportField);
  Userr.WebConf = ImportField;
  Userr.WebStartPage = ImportField;
  Userr.CostAcc = ImportField;
  Userr.LastIVCashNr = StringToLongint(ImportField);
  Userr.Closed = StringToInt(ImportField);
  Userr.OnlyVoiceLogin = StringToInt(ImportField);
  Userr.UserEditCtlf = StringToInt(ImportField);
  Userr.DateOrder = StringToInt(ImportField);
  Userr.LeadingZDay = StringToInt(ImportField);
  Userr.LeadingZMonth = StringToInt(ImportField);
  Userr.LeadingCentury = StringToInt(ImportField);
  Userr.DateSep = ImportField;
  Userr.DecimalPt = ImportField;
  Userr.ThousandSep = ImportField;
  Userr.ForceTimeEntry = StringToInt(ImportField);
  Userr.DateCreated = StringToDate(ImportField);
  Userr.Supervisor = ImportField;
  Userr.OneFunction = ImportField;
  Userr.TypeOfUser = StringToInt(ImportField);
  Userr.thousSepf = StringToInt(ImportField);
  Userr.CanUseOS = StringToInt(ImportField);
  Userr.Magic = StringToLongint(ImportField);
  Userr.Newf = StringToInt(ImportField);
  Userr.LastTTRNr = StringToLongint(ImportField);
  Userr.CustCode = ImportField;
  Userr.WindowType = StringToInt(ImportField);
  Userr.RegistrationNumber = StringToLongint(ImportField);
  Userr.StartLevel = StringToInt(ImportField);
  Userr.ServLocation = ImportField;
  Userr.ReservLocAccess = ImportField;
  Userr.ReservLocation = ImportField;
  Userr.MinPLCode = ImportField;
  Userr.Magic2 = StringToLongint(ImportField);
  Userr.DiscPassword = ImportField;
  Userr.LastOfficialSerNr = ImportField;
  Userr.LastDropSHNr = StringToLongint(ImportField);
  Userr.PasswordNeverExpires = StringToInt(ImportField);
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(Userr,Userrw,1);
    Userrw.Code = ImportField;
    Userrw.PRCode = ImportField;
    Userrw.Comment = ImportField;
    MatRowPut(Userr,rwcnt,Userrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTaguser1(string thetag)
begin
  record UserVc Userr;
  record UserVc User2r;
  
  while (NextImportLine(false)) begin
    ReadImportTaguser1Record(Userr);
    User2r.Code = Userr.Code;
    if (ReadFirstMain(User2r,1,true)) then begin
      if (blankuuid(Userr.UUID)) then begin
        Userr.UUID = User2r.UUID;
        Userr.ServerSequence = User2r.ServerSequence;
        Userr.SyncFlags = User2r.SyncFlags;
      end;
      if (RecordUpdate(User2r,Userr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Userr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStruser1(Integer compnr,string thetag)
begin
  record UserVc Userr;
  
  Userr.Code = ImportField;
  ReadRecordIdStruser1 = BuildRecordIdStr(Userr,compnr);
  return;
end;

procedure ReadImportTagpd2Record(record PDVc PDr)
begin
  row PDVc PDrw;
  integer rwcnt;
  
  RecordNew(PDr);
  PDr.Code = ImportField;
  PDr.PDType = StringToInt(ImportField);
  PDr.pdays = StringToLongint(ImportField);
  PDr.pdvrebt = StringToVal(ImportField,M4Qty);
  PDr.pdrdays = StringToLongint(ImportField);
  PDr.pdComment = ImportField;
  PDr.pdCashAcc = ImportField;
  PDr.PriceList = ImportField;
  PDr.Installment = ImportField;
  PDr.pdSalesAcc = ImportField;
  PDr.pdvrebt2 = StringToVal(ImportField,M4Qty);
  PDr.pdrdays2 = StringToLongint(ImportField);
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(PDr,PDrw,1);
    PDrw.LangCode = ImportField;
    PDrw.Text = ImportField;
    MatRowPut(PDr,rwcnt,PDrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagpd2(string thetag)
begin
  record PDVc PDr;
  record PDVc PD2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagpd2Record(PDr);
    PD2r.Code = PDr.Code;
    if (ReadFirstMain(PD2r,1,true)) then begin
      if (blankuuid(PDr.UUID)) then begin
        PDr.UUID = PD2r.UUID;
        PDr.ServerSequence = PD2r.ServerSequence;
        PDr.SyncFlags = PD2r.SyncFlags;
      end;
      if (RecordUpdate(PD2r,PDr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(PDr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrpd2(Integer compnr,string thetag)
begin
  record PDVc PDr;
  
  PDr.Code = ImportField;
  ReadRecordIdStrpd2 = BuildRecordIdStr(PDr,compnr);
  return;
end;

procedure ReadImportTagITVc1Record(record ITVc ITr)
begin
  row ITVc ITrw;
  integer rwcnt;
  
  RecordNew(ITr);
  ITr.Code = ImportField;
  ITr.Comment = ImportField;
  ITr.CostAcc = ImportField;
  ITr.InvAcc = ImportField;
  ITr.CostPerc = StringToVal(ImportField,M4Val);
  ITr.PrimaryCostModel = StringToInt(ImportField);
  ITr.Sign = ImportField;
  ITr.SalesAcc = ImportField;
  ITr.VATCodeDom = ImportField;
  ITr.VATCodeEU = ImportField;
  ITr.VATCodeExp = ImportField;
  ITr.EUSalesAcc = ImportField;
  ITr.ExpSalesAcc = ImportField;
  ITr.ExclFrLabPr = StringToInt(ImportField);
  ITr.Internal = StringToInt(ImportField);
  ITr.InclItemFreight = StringToInt(ImportField);
  ITr.FixedFreight = StringToVal(ImportField,M4Val);
  ITr.SwapAccounts = StringToInt(ImportField);
  ITr.PeriodCode = ImportField;
  ITr.PurchAcc = ImportField;
  ITr.CredSalesAcc = ImportField;
  ITr.CredEUSalesAcc = ImportField;
  ITr.CredExpSalesAcc = ImportField;
  ITr.CredVATCodeDom = ImportField;
  ITr.CredVATCodeEU = ImportField;
  ITr.CredVATCodeExp = ImportField;
  ITr.EUCodex = ImportField;
  ITr.WIPAcc = ImportField;
  ITr.Type = StringToInt(ImportField);
  ITr.CompUsage = ImportField;
  ITr.PriceVarianceAcc = ImportField;
  ITr.UsageVarianceAcc = ImportField;
  ITr.ClassType = ImportField;
  ITr.EUCostAcc = ImportField;
  ITr.ExpCostAcc = ImportField;
  ITr.EUPurchAcc = ImportField;
  ITr.ExpPurchAcc = ImportField;
  ITr.Objects = ImportField;
  ITr.ProdControl = ImportField;
  ITr.ProdWCostAcc = ImportField;
  ITr.QueuedCostModel = StringToInt(ImportField);
  ITr.FIFOPerSerialNr = StringToInt(ImportField);
  ITr.FIFOPerLocation = StringToInt(ImportField);
  ITr.WAPerLocation = StringToInt(ImportField);
  ITr.CostPricePerLocation = StringToInt(ImportField);
  ITr.TaxTemplateCode = ImportField;
  ITr.TaxTemplateCodeEU = ImportField;
  ITr.TaxTemplateCodeExp = ImportField;
  ITr.DiscountAcc = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(ITr,ITrw,1);
    ITrw.LangCode = ImportField;
    ITrw.Text = ImportField;
    MatRowPut(ITr,rwcnt,ITrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagITVc1(string thetag)
begin
  record ITVc ITr;
  record ITVc IT2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagITVc1Record(ITr);
    IT2r.Code = ITr.Code;
    if (ReadFirstMain(IT2r,1,true)) then begin
      if (blankuuid(ITr.UUID)) then begin
        ITr.UUID = IT2r.UUID;
        ITr.ServerSequence = IT2r.ServerSequence;
        ITr.SyncFlags = IT2r.SyncFlags;
      end;
      if (RecordUpdate(IT2r,ITr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(ITr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrITVc(Integer compnr,string thetag)
begin
  record ITVc ITr;
  
  ITr.Code = ImportField;
  ReadRecordIdStrITVc = BuildRecordIdStr(ITr,compnr);
  return;
end;

procedure ReadImportTagBarcodeVcRecord(record BarcodeVc Barcoder)
begin
  RecordNew(Barcoder);
  Barcoder.Barcode = ImportField;
  Barcoder.Itemcode = ImportField;
  Barcoder.Comment = ImportField;
  Barcoder.BarCodeSerialNo = ImportField;
  
  return;
end;

global
updating procedure ReadImportTagBarcodeVc(string thetag)
begin
  record BarcodeVc Barcoder;
  record BarcodeVc Barcode2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagBarcodeVcRecord(Barcoder);
    Barcode2r.Barcode = Barcoder.Barcode;
    if (ReadFirstMain(Barcode2r,1,true)) then begin
      if (blankuuid(Barcoder.UUID)) then begin
        Barcoder.UUID = Barcode2r.UUID;
        Barcoder.ServerSequence = Barcode2r.ServerSequence;
        Barcoder.SyncFlags = Barcode2r.SyncFlags;
      end;
      if (RecordUpdate(Barcode2r,Barcoder,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Barcoder,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrBarcodeVc(Integer compnr,string thetag)
begin
  record BarcodeVc Barcoder;
  
  Barcoder.Barcode = ImportField;
  ReadRecordIdStrBarcodeVc = BuildRecordIdStr(Barcoder,compnr);
  return;
end;

procedure ReadImportTagAccessVcRecord(record AccessVc Accessr)
begin
  row AccessVc Accessrw;
  integer rwcnt;
  
  RecordNew(Accessr);
  Accessr.Code = ImportField;
  Accessr.Comment = ImportField;
  Accessr.StartLevel = StringToInt(ImportField);
  Accessr.BlockAccs = ImportField;
  Accessr.OneFuncFlag = StringToInt(ImportField);
  Accessr.AccessGroup = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(Accessr,Accessrw,1);
    Accessrw.AccType = StringToInt(ImportField);
    Accessrw.AccName = ImportField;
    Accessrw.AccLevel = StringToInt(ImportField);
    Accessrw.OpenType = StringToInt(ImportField);
    MatRowPut(Accessr,rwcnt,Accessrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagAccessVc(string thetag)
begin
  record AccessVc Accessr;
  record AccessVc Access2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagAccessVcRecord(Accessr);
    Access2r.Code = Accessr.Code;
    if (ReadFirstMain(Access2r,1,true)) then begin
      if (blankuuid(Accessr.UUID)) then begin
        Accessr.UUID = Access2r.UUID;
        Accessr.ServerSequence = Access2r.ServerSequence;
        Accessr.SyncFlags = Access2r.SyncFlags;
      end;
      if (RecordUpdate(Access2r,Accessr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Accessr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrAccessVc(Integer compnr,string thetag)
begin
  string 120 res;
  record AccessVc Accessr;
  
  Accessr.Code = ImportField;
  ReadRecordIdStrAccessVc = BuildRecordIdStr(Accessr,compnr);
  return;
end;

procedure ReadImportTagobj2Record(record ObjVc Objr)
begin
  RecordNew(Objr);
  Objr.Code = ImportField;
  Objr.Comment = ImportField;
  Objr.MultiYear = StringToInt(ImportField);
  Objr.OTCode = ImportField;
  Objr.TerminateFlag = StringToInt(ImportField);
  Objr.AutoObjects = ImportField;
  return;
end;

global
updating procedure ReadImportTagobj2(string thetag)
begin
  record ObjVc Objr;
  record ObjVc Obj2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagobj2Record(Objr);
    Obj2r.Code = Objr.Code;
    if (ReadFirstMain(Obj2r,1,true)) then begin
      if (blankuuid(Objr.UUID)) then begin
        Objr.UUID = Obj2r.UUID;
        Objr.ServerSequence = Obj2r.ServerSequence;
        Objr.SyncFlags = Obj2r.SyncFlags;
      end;
      if (RecordUpdate(Obj2r,Objr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Objr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrobj2(Integer compnr,string thetag)
begin
  record ObjVc Objr;
  
  Objr.Code = ImportField;
  ReadRecordIdStrobj2 = BuildRecordIdStr(Objr,compnr);
  return;
end;

procedure ReadImportTagDIVcRecord(record DIVc DIr)
begin
  RecordNew(DIr);
  DIr.Code = ImportField;
  DIr.Name = ImportField;
  DIr.DispGroups = ImportField;
  DIr.CType = ImportField;
  DIr.colnr = StringToInt(ImportField);
  return;
end;

global
updating procedure ReadImportTagDIVc(string thetag)
begin
  record DIVc DIr;
  record DIVc DI2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagDIVcRecord(DIr);
    DI2r.Code = DIr.Code;
    if (ReadFirstMain(DI2r,1,true)) then begin
      if (blankuuid(DIr.UUID)) then begin
        DIr.UUID = DI2r.UUID;
        DIr.ServerSequence = DI2r.ServerSequence;
        DIr.SyncFlags = DI2r.SyncFlags;
      end;
      if (RecordUpdate(DI2r,DIr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(DIr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrDIVc(Integer compnr,string thetag)
begin
  record DIVc DIr;
  
  DIr.Code = ImportField;
  ReadRecordIdStrDIVc = BuildRecordIdStr(DIr,compnr);
  return;
end;

procedure ReadImportTagPOSButtonGroupsVcRecord(record POSButtonGroupsVc POSButtonGroupsr)
begin
  RecordNew(POSButtonGroupsr);
  POSButtonGroupsr.Code = ImportField;
  POSButtonGroupsr.Comment = ImportField;
  return;
end;

global
updating procedure ReadImportTagPOSButtonGroupsVc(string thetag)
begin
  record POSButtonGroupsVc POSButtonGroupsr;
  record POSButtonGroupsVc POSButtonGroups2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagPOSButtonGroupsVcRecord(POSButtonGroupsr);
    POSButtonGroups2r.Code = POSButtonGroupsr.Code;
    if (ReadFirstMain(POSButtonGroups2r,1,true)) then begin
      if (blankuuid(POSButtonGroupsr.UUID)) then begin
        POSButtonGroupsr.UUID = POSButtonGroups2r.UUID;
        POSButtonGroupsr.ServerSequence = POSButtonGroups2r.ServerSequence;
        POSButtonGroupsr.SyncFlags = POSButtonGroups2r.SyncFlags;
      end;
      if (RecordUpdate(POSButtonGroups2r,POSButtonGroupsr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(POSButtonGroupsr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrPOSButtonGroupsVc(Integer compnr,string thetag)
begin
  record POSButtonGroupsVc POSButtonGroupsr;
  
  POSButtonGroupsr.Code = ImportField;
  ReadRecordIdStrPOSButtonGroupsVc = BuildRecordIdStr(POSButtonGroupsr,compnr);
  return;
end;

procedure ReadImportTagPOSButtonsVcRecord(record POSButtonsVc POSButtonsr)
begin
  row POSButtonsVc POSButtonsrw;
  integer rwcnt;
  
  RecordNew(POSButtonsr);
  POSButtonsr.WindowClass = ImportField;
  POSButtonsr.POSButtonGroupCode = ImportField;
  POSButtonsr.Page = StringToInt(ImportField);
  POSButtonsr.Comment = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(POSButtonsr,POSButtonsrw,1);
    POSButtonsrw.ButtonType = StringToInt(ImportField);
    POSButtonsrw.Code = ImportField;
    POSButtonsrw.Label = ImportField;
    POSButtonsrw.colnr = StringToInt(ImportField);
    POSButtonsrw.KeyCode = StringToInt(ImportField);
    POSButtonsrw.Modifiers = StringToInt(ImportField);
    MatRowPut(POSButtonsr,rwcnt,POSButtonsrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagPOSButtonsVc(string thetag)
begin
  record POSButtonsVc POSButtonsr;
  record POSButtonsVc POSButtons2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagPOSButtonsVcRecord(POSButtonsr);
    POSButtons2r.WindowClass = POSButtonsr.WindowClass;
    POSButtons2r.POSButtonGroupCode = POSButtonsr.POSButtonGroupCode;
    POSButtons2r.Page = POSButtonsr.Page;
    if (ReadFirstMain(POSButtons2r,3,true)) then begin
      if (blankuuid(POSButtonsr.UUID)) then begin
        POSButtonsr.UUID = POSButtons2r.UUID;
        POSButtonsr.ServerSequence = POSButtons2r.ServerSequence;
        POSButtonsr.SyncFlags = POSButtons2r.SyncFlags;
      end;
      if (RecordUpdate(POSButtons2r,POSButtonsr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(POSButtonsr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrPOSButtonsVc(Integer compnr,string thetag)
begin
  record POSButtonsVc POSButtonsr;
  
  POSButtonsr.WindowClass = ImportField;
  POSButtonsr.POSButtonGroupCode = ImportField;
  POSButtonsr.Page = StringToInt(ImportField);
  ReadRecordIdStrPOSButtonsVc = BuildRecordIdStr(POSButtonsr,compnr);
  return;
end;

procedure ReadImportTagCashPrSetVcRecord(record CashPrSetVc CashPrSetr)
begin
  RecordNew(CashPrSetr);
  CashPrSetr.Code = ImportField;
  CashPrSetr.Name = ImportField;
  CashPrSetr.BaudRate = StringToInt(ImportField);
  CashPrSetr.Before = ImportField;
  CashPrSetr.After = ImportField;
  return;
end;

global
updating procedure ReadImportTagCashPrSetVc(string thetag)
begin
  record CashPrSetVc CashPrSetr;
  record CashPrSetVc CashPrSet2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagCashPrSetVcRecord(CashPrSetr);
    CashPrSet2r.Code = CashPrSetr.Code;
    if (ReadFirstMain(CashPrSet2r,1,true)) then begin
      if (blankuuid(CashPrSetr.UUID)) then begin
        CashPrSetr.UUID = CashPrSet2r.UUID;
        CashPrSetr.ServerSequence = CashPrSet2r.ServerSequence;
        CashPrSetr.SyncFlags = CashPrSet2r.SyncFlags;
      end;
      if (RecordUpdate(CashPrSet2r,CashPrSetr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(CashPrSetr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrCashPrSetVc(Integer compnr,string thetag)
begin
  record CashPrSetVc CashPrSetr;
  
  CashPrSetr.Code = ImportField;
  ReadRecordIdStrCashPrSetVc = BuildRecordIdStr(CashPrSetr,compnr);
  return;
end;

procedure ReadImportTagDrawerVcRecord(record DrawerVc Drawerr)
begin
  RecordNew(Drawerr);
  Drawerr.Code = ImportField;
  Drawerr.Name = ImportField;
  return;
end;

global
updating procedure ReadImportTagDrawerVc(string thetag)
begin
  record DrawerVc Drawerr;
  record DrawerVc Drawer2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagDrawerVcRecord(Drawerr);
    Drawer2r.Code = Drawerr.Code;
    if (ReadFirstMain(Drawer2r,1,true)) then begin
      if (blankuuid(Drawerr.UUID)) then begin
        Drawerr.UUID = Drawer2r.UUID;
        Drawerr.ServerSequence = Drawer2r.ServerSequence;
        Drawerr.SyncFlags = Drawer2r.SyncFlags;
      end;
      if (RecordUpdate(Drawer2r,Drawerr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Drawerr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrDrawerVc(Integer compnr,string thetag)
begin
  record DrawerVc Drawerr;
  
  Drawerr.Code = ImportField;
  ReadRecordIdStrDrawerVc = BuildRecordIdStr(Drawerr,compnr);
  return;
end;

procedure ReadImportTagCCMerchantIDVcRecord(record CCMerchantIDVc CCMerchantIDr)
begin
  RecordNew(CCMerchantIDr);
  CCMerchantIDr.Code = ImportField;
  CCMerchantIDr.Comment = ImportField;
  CCMerchantIDr.Partner = StringToInt(ImportField);
  CCMerchantIDr.LiveFlag = StringToInt(ImportField);
  return;
end;

global
updating procedure ReadImportTagCCMerchantIDVc(string thetag)
begin
  record CCMerchantIDVc CCMerchantIDr;
  record CCMerchantIDVc CCMerchantID2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagCCMerchantIDVcRecord(CCMerchantIDr);
    CCMerchantID2r.Code = CCMerchantIDr.Code;
    if (ReadFirstMain(CCMerchantID2r,1,true)) then begin
      if (blankuuid(CCMerchantIDr.UUID)) then begin
        CCMerchantIDr.UUID = CCMerchantID2r.UUID;
        CCMerchantIDr.ServerSequence = CCMerchantID2r.ServerSequence;
        CCMerchantIDr.SyncFlags = CCMerchantID2r.SyncFlags;
      end;
      if (RecordUpdate(CCMerchantID2r,CCMerchantIDr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(CCMerchantIDr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrCCMerchantIDVc(Integer compnr,string thetag)
begin
  record CCMerchantIDVc CCMerchantIDr;
  
  CCMerchantIDr.Code = ImportField;
  ReadRecordIdStrCCMerchantIDVc = BuildRecordIdStr(CCMerchantIDr,compnr);
  return;
end;

procedure ReadImportTagCCAccountIDVcRecord(record CCAccountIDVc CCAccountIDr)
begin
  RecordNew(CCAccountIDr);
  CCAccountIDr.Code = ImportField;
  CCAccountIDr.Comment = ImportField;
  CCAccountIDr.MerchantID = ImportField;
  CCAccountIDr.CurncyCode = ImportField;
  CCAccountIDr.LocalMachineCode = ImportField;
  CCAccountIDr.Type = StringToInt(ImportField);
  CCAccountIDr.AccountRef = ImportField;
  CCAccountIDr.RefundPW = ImportField;
  CCAccountIDr.TestAddress = StringToInt(ImportField);
  CCAccountIDr.KEY = ImportField;
  CCAccountIDr.SerialNr = ImportField;
  CCAccountIDr.TerminalID = ImportField;
  CCAccountIDr.DuplicateTime = StringToLongint(ImportField);
  CCAccountIDr.SendDelInfof = StringToInt(ImportField);
  CCAccountIDr.SendInvInfof = StringToInt(ImportField);
  CCAccountIDr.SendCorpInfof = StringToInt(ImportField);
  return;
end;

global
updating procedure ReadImportTagCCAccountIDVc(string thetag)
begin
  record CCAccountIDVc CCAccountIDr;
  record CCAccountIDVc CCAccountID2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagCCAccountIDVcRecord(CCAccountIDr);
    CCAccountID2r.Code = CCAccountIDr.Code;
    CCAccountID2r.Type = CCAccountIDr.Type;
    CCAccountID2r.LocalMachineCode = CCAccountIDr.LocalMachineCode;
    if (ReadFirstMain(CCAccountID2r,3,true)) then begin
      if (blankuuid(CCAccountIDr.UUID)) then begin
        CCAccountIDr.UUID = CCAccountID2r.UUID;
        CCAccountIDr.ServerSequence = CCAccountID2r.ServerSequence;
        CCAccountIDr.SyncFlags = CCAccountID2r.SyncFlags;
      end;
      if (RecordUpdate(CCAccountID2r,CCAccountIDr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(CCAccountIDr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrCCAccountIDVc(Integer compnr,string thetag)
begin
  record CCAccountIDVc CCAccountIDr;
  
  CCAccountIDr.Code = ImportField;
  CCAccountIDr.Type = StringToInt(ImportField);
  CCAccountIDr.LocalMachineCode = ImportField;
  ReadRecordIdStrCCAccountIDVc = BuildRecordIdStr(CCAccountIDr,compnr);
  return;
end;

procedure ReadImportTagBaseERVcRecord(record BaseERVc BaseERr)
begin
  RecordNew(BaseERr);
  BaseERr.Date = StringToDate(ImportField);
  BaseERr.Rate1 = StringToVal(ImportField,M4Rate);
  BaseERr.Rate2 = StringToVal(ImportField,M4Rate);
  return;
end;

global
updating procedure ReadImportTagBaseERVc(string thetag)
begin
  record BaseERVc BaseERr;
  record BaseERVc BaseER2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagBaseERVcRecord(BaseERr);
    BaseER2r.Date = BaseERr.Date;
    if (ReadFirstMain(BaseER2r,1,true)) then begin
      if (RecordImportStore(BaseERr,false)) then begin end;
    end else begin
      if (RecordImportStore(BaseERr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrBaseERVc(Integer compnr,string thetag)
begin
  record BaseERVc BaseERr;
  
  BaseERr.Date = StringToDate(ImportField);
  ReadRecordIdStrBaseERVc = BuildRecordIdStr(BaseERr,compnr);
  return;
end;

procedure ReadImportTagpldef1Record(record PLDefVc PLDefr)
begin
  row PLDefVc PLDefrw;
  integer rwcnt;
  
  RecordNew(PLDefr);
  PLDefr.Code = ImportField;
  PLDefr.Comment = ImportField;
  PLDefr.CurncyCode = ImportField;
  PLDefr.InclVAT = StringToInt(ImportField);
  PLDefr.DepPrice = StringToInt(ImportField);
  PLDefr.StartDate = StringToDate(ImportField);
  PLDefr.EndDate = StringToDate(ImportField);
  PLDefr.PLReplCode = ImportField;
  PLDefr.PLBasedOn = StringToInt(ImportField);
  PLDefr.VATCode = ImportField;
  PLDefr.BBVECode = ImportField;
  PLDefr.BBVarAcc = ImportField;
  PLDefr.BBGenTrans = StringToInt(ImportField);
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(PLDefr,PLDefrw,1);
    PLDefrw.ItemCode = ImportField;
    PLDefrw.Formula = ImportField;
    PLDefrw.CodeType = StringToInt(ImportField);
    PLDefrw.VATCode = ImportField;
    MatRowPut(PLDefr,rwcnt,PLDefrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagpldef1(string thetag)
begin
  record PLDefVc PLDefr;
  record PLDefVc PLDef2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagpldef1Record(PLDefr);
    PLDef2r.Code = PLDefr.Code;
    PLDef2r.StartDate = PLDefr.StartDate;
    if (ReadFirstMain(PLDef2r,2,true)) then begin
      if (blankuuid(PLDefr.UUID)) then begin
        PLDefr.UUID = PLDef2r.UUID;
        PLDefr.ServerSequence = PLDef2r.ServerSequence;
        PLDefr.SyncFlags = PLDef2r.SyncFlags;
      end;
      if (RecordUpdate(PLDef2r,PLDefr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(PLDefr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrpldef1(Integer compnr,string thetag)
begin
  record PLDefVc PLDefr;
  
  PLDefr.Code = ImportField;
  PLDefr.StartDate = StringToDate(ImportField);
  ReadRecordIdStrpldef1 = BuildRecordIdStr(PLDefr,compnr);
  return;
end;

procedure ReadImportTagpform1Record(record PFormVc PFormr)
begin
  RecordNew(PFormr);
  PFormr.Code = ImportField;
  PFormr.Comment = ImportField;
  PFormr.SelBase = StringToInt(ImportField);
  PFormr.Perc = StringToVal(ImportField,M4Qty);
  PFormr.Add1Val = StringToVal(ImportField,M4Qty);
  PFormr.RndTo = StringToInt(ImportField);
  PFormr.Add2Val = StringToVal(ImportField,M4Qty);
  return;
end;

global
updating procedure ReadImportTagpform1(string thetag)
begin
  record PFormVc PFormr;
  record PFormVc PForm2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagpform1Record(PFormr);
    PForm2r.Code = PFormr.Code;
    if (ReadFirstMain(PForm2r,1,true)) then begin
      if (blankuuid(PFormr.UUID)) then begin
        PFormr.UUID = PForm2r.UUID;
        PFormr.ServerSequence = PForm2r.ServerSequence;
        PFormr.SyncFlags = PForm2r.SyncFlags;
      end;
      if (RecordUpdate(PForm2r,PFormr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(PFormr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrpform1(Integer compnr,string thetag)
begin
  record PFormVc PFormr;
  
  PFormr.Code = ImportField;
  ReadRecordIdStrpform1 = BuildRecordIdStr(PFormr,compnr);
  return;
end;

procedure ReadImportTagreb1Record(record RebVc Rebr)
begin
  row RebVc Rebrw;
  integer rwcnt;
  
  RecordNew(Rebr);
  Rebr.Code = ImportField;
  Rebr.Comment = ImportField;
  Rebr.StaffCode = ImportField;
  Rebr.vra0 = StringToVal(ImportField,M41Val);
  Rebr.vra1 = StringToVal(ImportField,M41Val);
  Rebr.vra2 = StringToVal(ImportField,M41Val);
  Rebr.vra3 = StringToVal(ImportField,M41Val);
  Rebr.vra4 = StringToVal(ImportField,M41Val);
  Rebr.vra5 = StringToVal(ImportField,M41Val);
  Rebr.vra6 = StringToVal(ImportField,M41Val);
  Rebr.vra7 = StringToVal(ImportField,M41Val);
  Rebr.vra8 = StringToVal(ImportField,M41Val);
  Rebr.vra9 = StringToVal(ImportField,M41Val);
  Rebr.DiscAcc = ImportField;
  Rebr.DiscPerc = StringToVal(ImportField,M4Qty);
  Rebr.VATCode = ImportField;
  Rebr.FromDate = StringToDate(ImportField);
  Rebr.ToDate = StringToDate(ImportField);
  Rebr.Replaces = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(Rebr,Rebrw,1);
    Rebrw.ITCode = ImportField;
    Rebrw.StaffCode = ImportField;
    Rebrw.vra0 = StringToVal(ImportField,M41Val);
    Rebrw.vra1 = StringToVal(ImportField,M41Val);
    Rebrw.vra2 = StringToVal(ImportField,M41Val);
    Rebrw.vra3 = StringToVal(ImportField,M41Val);
    Rebrw.vra4 = StringToVal(ImportField,M41Val);
    Rebrw.vra5 = StringToVal(ImportField,M41Val);
    Rebrw.vra6 = StringToVal(ImportField,M41Val);
    Rebrw.vra7 = StringToVal(ImportField,M41Val);
    Rebrw.vra8 = StringToVal(ImportField,M41Val);
    Rebrw.vra9 = StringToVal(ImportField,M41Val);
    Rebrw.CodeType = StringToInt(ImportField);
    MatRowPut(Rebr,rwcnt,Rebrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagreb1(string thetag)
begin
  record RebVc Rebr;
  record RebVc Reb2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagreb1Record(Rebr);
    Reb2r.Code = Rebr.Code;
    Reb2r.FromDate = Rebr.FromDate;
    if (ReadFirstMain(Reb2r,2,true)) then begin
      if (blankuuid(Rebr.UUID)) then begin
        Rebr.UUID = Reb2r.UUID;
        Rebr.ServerSequence = Reb2r.ServerSequence;
        Rebr.SyncFlags = Reb2r.SyncFlags;
      end;
      if (RecordUpdate(Reb2r,Rebr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Rebr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrreb1(Integer compnr,string thetag)
begin
  record RebVc Rebr;
  
  Rebr.Code = ImportField;
  Rebr.FromDate = StringToDate(ImportField);
  ReadRecordIdStrreb1 = BuildRecordIdStr(Rebr,compnr);
  return;
end;

procedure ReadImportTagstaff1Record(record StaffVc Staffr)
begin
  RecordNew(Staffr);
  Staffr.Code = ImportField;
  Staffr.Comment = ImportField;
  Staffr.StaffType = StringToInt(ImportField);
  Staffr.Lim1 = StringToVal(ImportField,M4Qty);
  Staffr.Lim2 = StringToVal(ImportField,M4Qty);
  Staffr.Lim3 = StringToVal(ImportField,M4Qty);
  Staffr.Lim4 = StringToVal(ImportField,M4Qty);
  Staffr.Lim5 = StringToVal(ImportField,M4Qty);
  Staffr.Lim6 = StringToVal(ImportField,M4Qty);
  Staffr.Lim7 = StringToVal(ImportField,M4Qty);
  Staffr.Lim8 = StringToVal(ImportField,M4Qty);
  Staffr.Lim9 = StringToVal(ImportField,M4Qty);
  return;
end;

global
updating procedure ReadImportTagstaff1(string thetag)
begin
  record StaffVc Staffr;
  record StaffVc Staff2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagstaff1Record(Staffr);
    Staff2r.Code = Staffr.Code;
    if (ReadFirstMain(Staff2r,1,true)) then begin
      if (blankuuid(Staffr.UUID)) then begin
        Staffr.UUID = Staff2r.UUID;
        Staffr.ServerSequence = Staff2r.ServerSequence;
        Staffr.SyncFlags = Staff2r.SyncFlags;
      end;
      if (RecordUpdate(Staff2r,Staffr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Staffr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrstaff1(Integer compnr,string thetag)
begin
  record StaffVc Staffr;
  
  Staffr.Code = ImportField;
  ReadRecordIdStrstaff1 = BuildRecordIdStr(Staffr,compnr);
  return;
end;

procedure ReadImportTagcustdiscRecord(record CDVc CDr)
begin
  row CDVc CDrw;
  integer rwcnt;
  
  RecordNew(CDr);
  CDr.CustCode = ImportField;
  CDr.CustName = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(CDr,CDrw,1);
    CDrw.Item = ImportField;
    CDrw.Price = StringToVal(ImportField,M4Val);
    CDrw.Discount = StringToVal(ImportField,M4Qty);
    CDrw.TimeClass = ImportField;
    MatRowPut(CDr,rwcnt,CDrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagcustdisc(string thetag)
begin
  record CDVc CDr;
  record CDVc CD2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagcustdiscRecord(CDr);
    CD2r.CustCode = CDr.CustCode;
    if (ReadFirstMain(CD2r,1,true)) then begin
      if (blankuuid(CDr.UUID)) then begin
        CDr.UUID = CD2r.UUID;
        CDr.ServerSequence = CD2r.ServerSequence;
        CDr.SyncFlags = CD2r.SyncFlags;
      end;
      if (RecordUpdate(CD2r,CDr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(CDr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrcustdisc(Integer compnr,string thetag)
begin
  record CDVc CDr;
  
  CDr.CustCode = ImportField;
  ReadRecordIdStrcustdisc = BuildRecordIdStr(CDr,compnr);
  return;
end;

procedure ReadImportTagcpm1Record(record CPMVc CPMr)
begin
  row CPMVc CPMrw;
  integer rwcnt;
  
  RecordNew(CPMr);
  CPMr.Code = ImportField;
  CPMr.Comment = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(CPMr,CPMrw,1);
    CPMrw.ItemGroups = ImportField;
    CPMrw.Val = StringToVal(ImportField,M4Qty);
    CPMrw.FromAmount = StringToVal(ImportField,M4Qty);
    CPMrw.ToAmount = StringToVal(ImportField,M4Qty);
    MatRowPut(CPMr,rwcnt,CPMrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagcpm1(string thetag)
begin
  record CPMVc CPMr;
  record CPMVc CPM2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagcpm1Record(CPMr);
    CPM2r.Code = CPMr.Code;
    if (ReadFirstMain(CPM2r,1,true)) then begin
      if (blankuuid(CPMr.UUID)) then begin
        CPMr.UUID = CPM2r.UUID;
        CPMr.ServerSequence = CPM2r.ServerSequence;
        CPMr.SyncFlags = CPM2r.SyncFlags;
      end;
      if (RecordUpdate(CPM2r,CPMr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(CPMr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrcpm1(Integer compnr,string thetag)
begin
  record CPMVc CPMr;
  
  CPMr.Code = ImportField;
  ReadRecordIdStrcpm1 = BuildRecordIdStr(CPMr,compnr);
  return;
end;

procedure ReadImportTagpl1Record(record PLVc PLr)
begin
  RecordNew(PLr);
  PLr.PLCode = ImportField;
  PLr.Comment = ImportField;
  PLr.ArtCode = ImportField;
  PLr.ExVatPrice = StringToVal(ImportField,M423Val);
  PLr.SalesAcc = ImportField;
  PLr.CustCode = ImportField;
  PLr.NoOtherPricing = StringToInt(ImportField);
  PLr.VATCode = ImportField;
  PLr.DonotRecalculate = StringToInt(ImportField);
  PLr.CostPrice = StringToVal(ImportField,M4Val);
  PLr.BBGenTrans = StringToInt(ImportField);
  PLr.BBVarAcc = ImportField;
  return;
end;

global
updating procedure ReadImportTagpl1(string thetag)
begin
  record PLVc PLr;
  record PLVc PL2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagpl1Record(PLr);
    PL2r.PLCode = PLr.PLCode;
    PL2r.ArtCode = PLr.ArtCode;
    PL2r.CustCode = PLr.CustCode;
    if (ReadFirstMain(PL2r,3,true)) then begin
      if (RecordImportStore(PL2r,false)) then begin end;
    end else begin
      if (RecordImportStore(PLr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrpl1(Integer compnr,string thetag)
begin
  record PLVc PLr;
  
  PLr.PLCode = ImportField;
  PLr.ArtCode = ImportField;
  PLr.CustCode = ImportField;
  ReadRecordIdStrpl1 = BuildRecordIdStr(PLr,compnr);
  return;
end;

procedure ReadImportTagPLQVcRecord(record PLQVc PLQr)
begin
  row PLQVc PLQrw;
  integer rwcnt;
  
  RecordNew(PLQr);
  PLQr.PLCode = ImportField;
  PLQr.Comment = ImportField;
  PLQr.ArtCode = ImportField;
  PLQr.SalesAcc = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(PLQr,PLQrw,1);
    PLQrw.QtyLimit = StringToVal(ImportField,M4UVal);
    PLQrw.ExVatPrice = StringToVal(ImportField,M423Val);
    PLQrw.Formulae = ImportField;
    MatRowPut(PLQr,rwcnt,PLQrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagPLQVc(string thetag)
begin
  record PLQVc PLQr;
  record PLQVc PLQ2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagPLQVcRecord(PLQr);
    PLQ2r.PLCode = PLQr.PLCode;
    PLQ2r.ArtCode = PLQr.ArtCode;
    if (ReadFirstMain(PLQ2r,2,true)) then begin
      if (blankuuid(PLQr.UUID)) then begin
        PLQr.UUID = PLQ2r.UUID;
        PLQr.ServerSequence = PLQ2r.ServerSequence;
        PLQr.SyncFlags = PLQ2r.SyncFlags;
      end;
      if (RecordUpdate(PLQ2r,PLQr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(PLQr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrPLQVc(Integer compnr,string thetag)
begin
  record PLQVc PLQr;
  
  PLQr.PLCode = ImportField;
  PLQr.ArtCode = ImportField;
  ReadRecordIdStrPLQVc = BuildRecordIdStr(PLQr,compnr);
  return;
end;

procedure ReadImportTager1Record(record ERVc ERr)
begin
  RecordNew(ERr);
  ERr.CurncyCode = ImportField;
  ERr.Date = StringToDate(ImportField);
  ERr.ToRate1 = StringToVal(ImportField,M4Rate);
  ERr.ToRate2 = StringToVal(ImportField,M4Rate);
  ERr.FrRate = StringToVal(ImportField,M4Rate);
  ERr.PurchaseRateTo1 = StringToVal(ImportField,M4Rate);
  ERr.SalesRateTo1 = StringToVal(ImportField,M4Rate);
  return;
end;

global
updating procedure ReadImportTager1(string thetag)
begin
  record ERVc ERr;
  record ERVc ER2r;
  
  while (NextImportLine(false)) begin
    ReadImportTager1Record(ERr);
    ER2r.CurncyCode = ERr.CurncyCode;
    ER2r.Date = ERr.Date;
    if (ReadFirstMain(ER2r,2,true)) then begin
      if (blankuuid(ERr.UUID)) then begin
        ERr.UUID = ER2r.UUID;
        ERr.ServerSequence = ER2r.ServerSequence;
        ERr.SyncFlags = ER2r.SyncFlags;
      end;
      if (RecordUpdate(ER2r,ERr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(ERr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrer1(Integer compnr,string thetag)
begin
  record ERVc ERr;
  
  ERr.CurncyCode = ImportField;
  ERr.Date = StringToDate(ImportField);
  ReadRecordIdStrer1 = BuildRecordIdStr(ERr,compnr);
  return;
end;

procedure ReadImportTagCurncyCodeVcRecord(record CurncyCodeVc CurncyCoder)
begin
  RecordNew(CurncyCoder);
  CurncyCoder.CurncyCode = ImportField;
  CurncyCoder.Comment = ImportField;
  CurncyCoder.xRndTotal = StringToInt(ImportField);
  CurncyCoder.DefaultFrom = StringToVal(ImportField,M4Rate);
  CurncyCoder.DefaultTo1 = StringToVal(ImportField,M4Rate);
  CurncyCoder.DefaultTo2 = StringToVal(ImportField,M4Rate);
  CurncyCoder.MaxFrom = StringToVal(ImportField,M4Rate);
  CurncyCoder.MaxTo1 = StringToVal(ImportField,M4Rate);
  CurncyCoder.MaxTo2 = StringToVal(ImportField,M4Rate);
  CurncyCoder.MinFrom = StringToVal(ImportField,M4Rate);
  CurncyCoder.MinTo1 = StringToVal(ImportField,M4Rate);
  CurncyCoder.MinTo2 = StringToVal(ImportField,M4Rate);
  CurncyCoder.CurText = ImportField;
  CurncyCoder.MinorCurText = ImportField;
  CurncyCoder.NoChangeBase = StringToInt(ImportField);
  CurncyCoder.NoChangeForeign = StringToInt(ImportField);
  CurncyCoder.EMUCurncy = StringToInt(ImportField);
  CurncyCoder.EMUDate = StringToDate(ImportField);
  CurncyCoder.AutoRoundof = StringToVal(ImportField,M4Qty);
  CurncyCoder.AutoWriteof = StringToVal(ImportField,M4Qty);
  CurncyCoder.CurText1 = ImportField;
  CurncyCoder.CurText2 = ImportField;
  CurncyCoder.MinorCurText1 = ImportField;
  CurncyCoder.MinorCurText2 = ImportField;
  CurncyCoder.CurGender = StringToInt(ImportField);
  CurncyCoder.MinorCurGender = StringToInt(ImportField);
  CurncyCoder.xRoundLines = StringToInt(ImportField);
  CurncyCoder.xRoundVAT = StringToInt(ImportField);
  CurncyCoder.TaxOfficeCode = ImportField;
  return;
end;

global
updating procedure ReadImportTagCurncyCodeVc(string thetag)
begin
  record CurncyCodeVc CurncyCoder;
  record CurncyCodeVc CurncyCode2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagCurncyCodeVcRecord(CurncyCoder);
    CurncyCode2r.CurncyCode = CurncyCoder.CurncyCode;
    if (ReadFirstMain(CurncyCode2r,1,true)) then begin
      if (blankuuid(CurncyCoder.UUID)) then begin
        CurncyCoder.UUID = CurncyCode2r.UUID;
        CurncyCoder.ServerSequence = CurncyCode2r.ServerSequence;
        CurncyCoder.SyncFlags = CurncyCode2r.SyncFlags;
      end;
      if (RecordUpdate(CurncyCode2r,CurncyCoder,false)==0) then begin end;
    end else begin
      if (RecordImportStore(CurncyCoder,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrCurncyCodeVc(Integer compnr,string thetag)
begin
  record CurncyCodeVc CurncyCoder;
  
  CurncyCoder.CurncyCode = ImportField;
  ReadRecordIdStrCurncyCodeVc = BuildRecordIdStr(CurncyCoder,compnr);
  return;
end;

procedure ReadImportTagdoc2Record(record DocVc Docr)
begin
  row DocVc Docrw;
  integer rwcnt;
  
  RecordNew(Docr);
  Docr.Code = ImportField;
  Docr.Comment = ImportField;
  Docr.nrOfMatrixLinesOnly = StringToInt(ImportField);
  Docr.pcFormLines = StringToInt(ImportField);
  Docr.pcFormVisible = StringToInt(ImportField);
  Docr.pcFormMargin = StringToInt(ImportField);
  Docr.pcFormCRend = StringToInt(ImportField);
  Docr.nrofex = StringToInt(ImportField);
  Docr.DocName = ImportField;
  Docr.JobDf = StringToInt(ImportField);
  Docr.extext0 = ImportField;
  Docr.PaperTray0 = ImportField;
  Docr.extext1 = ImportField;
  Docr.PaperTray1 = ImportField;
  Docr.extext2 = ImportField;
  Docr.PaperTray2 = ImportField;
  Docr.extext3 = ImportField;
  Docr.PaperTray3 = ImportField;
  Docr.extext4 = ImportField;
  Docr.PaperTray4 = ImportField;
  Docr.DocType = StringToInt(ImportField);
  Docr.nrOfMatrixLinesFirst = StringToInt(ImportField);
  Docr.nrOfMatrixLinesMiddle = StringToInt(ImportField);
  Docr.nrOfMatrixLinesLast = StringToInt(ImportField);
  Docr.HalRoutine = ImportField;
  Docr.DontPrintf = StringToInt(ImportField);
  Docr.HeaderStyle = ImportField;
  Docr.HeaderHeight = StringToInt(ImportField);
  Docr.DescriptionStyle = ImportField;
  Docr.DescriptionHeight = StringToInt(ImportField);
  Docr.ItemlineStyle = ImportField;
  Docr.ItemlineHeight = StringToInt(ImportField);
  Docr.SubTotalStyle = ImportField;
  Docr.SubTotalHeight = StringToInt(ImportField);
  Docr.CreditInvStyle = ImportField;
  Docr.CreditInvHeight = StringToInt(ImportField);
  Docr.PrepaymentStyle = ImportField;
  Docr.PrepaymentHeight = StringToInt(ImportField);
  Docr.CodePage = StringToInt(ImportField);
  Docr.PdfOrient = StringToInt(ImportField);
  Docr.WtihholdingStyle = ImportField;
  Docr.WtihholdingHeight = StringToInt(ImportField);
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(Docr,Docrw,1);
    Docrw.unitType = StringToInt(ImportField);
    Docrw.xpos = StringToVal(ImportField,M4UVal);
    Docrw.ypos = StringToVal(ImportField,M4UVal);
    Docrw.unitWidth = StringToVal(ImportField,M4UVal);
    Docrw.unitHeight = StringToVal(ImportField,M4UVal);
    Docrw.unitStyle = ImportField;
    Docrw.unitText = ImportField;
    Docrw.just = StringToInt(ImportField);
    Docrw.lineHeight = StringToInt(ImportField);
    Docrw.fieldSetNr = StringToInt(ImportField);
    Docrw.clip = StringToInt(ImportField);
    Docrw.EscSeq = ImportField;
    Docrw.excludeFirst = StringToInt(ImportField);
    Docrw.excludeMiddle = StringToInt(ImportField);
    Docrw.excludeLast = StringToInt(ImportField);
    Docrw.excludeOnly = StringToInt(ImportField);
    Docrw.wordWrap = StringToInt(ImportField);
    Docrw.formatNr = StringToInt(ImportField);
    Docrw.PageSumType = StringToInt(ImportField);
    MatRowPut(Docr,rwcnt,Docrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagdoc2(string thetag)
begin
  record DocVc Docr;
  record DocVc Doc2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagdoc2Record(Docr);
    Doc2r.Code = Docr.Code;
    if (ReadFirstMain(Doc2r,1,true)) then begin
      if (blankuuid(Docr.UUID)) then begin
        Docr.UUID = Doc2r.UUID;
        Docr.ServerSequence = Doc2r.ServerSequence;
        Docr.SyncFlags = Doc2r.SyncFlags;
      end;
      if (RecordUpdate(Doc2r,Docr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Docr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrdoc2(Integer compnr,string thetag)
begin
  record DocVc Docr;
  
  Docr.Code = ImportField;
  ReadRecordIdStrdoc2 = BuildRecordIdStr(Docr,compnr);
  return;
end;

procedure ReadImportTagstylesRecord(record StyleVc Styler)
begin
  RecordNew(Styler);
  Styler.Code = ImportField;
  Styler.Comment = ImportField;
  Styler.MacFont = ImportField;
  Styler.MacSize = StringToInt(ImportField);
  Styler.MacFace = StringToInt(ImportField);
  Styler.WinFont = ImportField;
  Styler.WinSize = StringToInt(ImportField);
  Styler.WinFace = StringToInt(ImportField);
  Styler.AnsiChar = StringToInt(ImportField);
  Styler.CharSpacing = StringToVal(ImportField,M4Qty);
  Styler.LinuxFont = ImportField;
  Styler.LinuxSize = StringToInt(ImportField);
  Styler.LinuxFace = StringToInt(ImportField);
  Styler.BinaryFont = StringToInt(ImportField);
  Styler.PdfFontFile = ImportField;
  Styler.PdfFont = StringToInt(ImportField);
  Styler.PdfSize = StringToInt(ImportField);
  Styler.PdfFace = StringToInt(ImportField);
  return;
end;

global
updating procedure ReadImportTagstyles(string thetag)
begin
  record StyleVc Styler;
  record StyleVc Style2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagstylesRecord(Styler);
    Style2r.Code = Styler.Code;
    if (ReadFirstMain(Style2r,1,true)) then begin
      if (blankuuid(Styler.UUID)) then begin
        Styler.UUID = Style2r.UUID;
        Styler.ServerSequence = Style2r.ServerSequence;
        Styler.SyncFlags = Style2r.SyncFlags;
      end;
      if (RecordUpdate(Style2r,Styler,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Styler,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrstyles(Integer compnr,string thetag)
begin
  record StyleVc Styler;
  
  Styler.Code = ImportField;
  ReadRecordIdStrstyles = BuildRecordIdStr(Styler,compnr);
  return;
end;

procedure ReadImportTagPOSEventVcRecord(record POSEventVc POSEventr)
begin
  RecordNew(POSEventr);
  POSEventr.SerNr = StringToLongint(ImportField);
  POSEventr.Drawer = ImportField;
  POSEventr.MachineName = ImportField;
  POSEventr.TransDate = StringToDate(ImportField);
  POSEventr.TransTime = StringToTime(ImportField);
  POSEventr.Event = StringToInt(ImportField);
  POSEventr.NLTransDone = StringToInt(ImportField);
  POSEventr.Sign = ImportField;
  POSEventr.SalesGroup = ImportField;
  POSEventr.Members = ImportField;
  return;
end;

global
updating procedure ReadImportTagPOSEventVc(string thetag)
begin
  record POSEventVc POSEventr;
  record POSEventVc POSEvent2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagPOSEventVcRecord(POSEventr);
    if (ReadFirstMain(POSEvent2r,0,true)) then begin
      if (blankuuid(POSEventr.UUID)) then begin
        POSEventr.UUID = POSEvent2r.UUID;
        POSEventr.ServerSequence = POSEvent2r.ServerSequence;
        POSEventr.SyncFlags = POSEvent2r.SyncFlags;
      end;
      if (RecordUpdate(POSEvent2r,POSEventr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(POSEventr,false)) then begin end;
    end;
  end;
  
  return;
end;

procedure ReadImportTagPOSBalanceVcRecord(record POSBalanceVc POSBalancer)
begin
  RecordNew(POSBalancer);
  POSBalancer.SerNr = StringToLongint(ImportField);
  POSBalancer.Drawer = ImportField;
  POSBalancer.MachineName = ImportField;
  POSBalancer.TransDate = StringToDate(ImportField);
  POSBalancer.TransTime = StringToTime(ImportField);
  POSBalancer.Bal = StringToVal(ImportField,M4Val);
  POSBalancer.NLTransDone = StringToInt(ImportField);
  return;
end;

global
updating procedure ReadImportTagPOSBalanceVc(string thetag)
begin
  record POSBalanceVc POSBalancer;
  record POSBalanceVc POSBalance2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagPOSBalanceVcRecord(POSBalancer);
    POSBalance2r.SerNr = POSBalancer.SerNr;
    if (ReadFirstMain(POSBalance2r,1,true)) then begin
      if (blankuuid(POSBalancer.UUID)) then begin
        POSBalancer.UUID = POSBalance2r.UUID;
        POSBalancer.ServerSequence = POSBalance2r.ServerSequence;
        POSBalancer.SyncFlags = POSBalance2r.SyncFlags;
      end;
      if (RecordUpdate(POSBalance2r,POSBalancer,false)==0) then begin end;
    end else begin
      if (RecordImportStore(POSBalancer,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrPOSBalanceVc(Integer compnr,string thetag)
begin
  record POSBalanceVc POSBalancer;
  
  POSBalancer.SerNr = StringToLongint(ImportField);
  ReadRecordIdStrPOSBalanceVc = BuildRecordIdStr(POSBalancer,compnr);
  return;
end;

procedure ReadImportTagCashVcRecord(record CashVc Cashr)
begin
  row CashVc Cashrw;
  integer rwcnt;
  
  RecordNew(Cashr);
  Cashr.SerNr = StringToLongint(ImportField);
  Cashr.TransDate = StringToDate(ImportField);
  Cashr.TransTime = StringToTime(ImportField);
  Cashr.Drawer = ImportField;
  Cashr.MachineName = ImportField;
  Cashr.Comment = ImportField;
  Cashr.Total = StringToVal(ImportField,M4Val);
  Cashr.Event = StringToInt(ImportField);
  Cashr.Invalid = StringToInt(ImportField);
  Cashr.Sign = ImportField;
  Cashr.CredAcc = ImportField;
  Cashr.OKFlag = StringToInt(ImportField);
  Cashr.SkipUpdatTime = StringToInt(ImportField);
  Cashr.SalesGroup = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(Cashr,Cashrw,1);
    Cashrw.PMCode = ImportField;
    Cashrw.CurncyCodeCode = ImportField;
    Cashrw.Amount = StringToVal(ImportField,M4Val);
    MatRowPut(Cashr,rwcnt,Cashrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagCashVc(string thetag)
begin
  record CashVc Cashr;
  record CashVc Cash2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagCashVcRecord(Cashr);
    if (ReadFirstMain(Cash2r,0,true)) then begin
      if (blankuuid(Cashr.UUID)) then begin
        Cashr.UUID = Cash2r.UUID;
        Cashr.ServerSequence = Cash2r.ServerSequence;
        Cashr.SyncFlags = Cash2r.SyncFlags;
      end;
      if (RecordUpdate(Cash2r,Cashr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Cashr,false)) then begin end;
    end;
  end;
  
  return;
end;

procedure ReadImportTagLocalMachineVcRecord(record LocalMachineVc LocalMachiner)
begin
  RecordNew(LocalMachiner);
  LocalMachiner.Code = ImportField;
  LocalMachiner.Comment = ImportField;
  LocalMachiner.CompName = ImportField;
  LocalMachiner.Addr0 = ImportField;
  LocalMachiner.Addr1 = ImportField;
  LocalMachiner.Addr2 = ImportField;
  LocalMachiner.Addr3 = ImportField;
  LocalMachiner.Addr4 = ImportField;
  LocalMachiner.Tel = ImportField;
  LocalMachiner.FaxNo = ImportField;
  LocalMachiner.RegNr = ImportField;
  LocalMachiner.VATNo = ImportField;
  LocalMachiner.SyncSumPOS = StringToInt(ImportField);
  return;
end;

global
updating procedure ReadImportTagLocalMachineVc(string thetag)
begin
  record LocalMachineVc LocalMachiner;
  record LocalMachineVc LocalMachine2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagLocalMachineVcRecord(LocalMachiner);
    LocalMachine2r.Code = LocalMachiner.Code;
    if (ReadFirstMain(LocalMachine2r,1,true)) then begin
      if (blankuuid(LocalMachiner.UUID)) then begin
        LocalMachiner.UUID = LocalMachine2r.UUID;
        LocalMachiner.ServerSequence = LocalMachine2r.ServerSequence;
        LocalMachiner.SyncFlags = LocalMachine2r.SyncFlags;
      end;
      if (RecordUpdate(LocalMachine2r,LocalMachiner,false)==0) then begin end;
    end else begin
      if (RecordImportStore(LocalMachiner,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrLocalMachineVc(Integer compnr,string thetag)
begin
  record LocalMachineVc LocalMachiner;
  
  LocalMachiner.Code = ImportField;
  ReadRecordIdStrLocalMachineVc = BuildRecordIdStr(LocalMachiner,compnr);
  return;
end;

procedure ReadImportTagMultiBuyRebVcRecord(record MultiBuyRebVc MultiBuyRebr)
begin
  row MultiBuyRebVc MultiBuyRebrw;
  integer rwcnt;
  
  RecordNew(MultiBuyRebr);
  MultiBuyRebr.Code = ImportField;
  MultiBuyRebr.Comment = ImportField;
  MultiBuyRebr.RebArtCode = ImportField;
  MultiBuyRebr.RebArtName = ImportField;
  MultiBuyRebr.StartDate = StringToDate(ImportField);
  MultiBuyRebr.EndDate = StringToDate(ImportField);
  MultiBuyRebr.PLCode = ImportField;
  MultiBuyRebr.Type = StringToInt(ImportField);
  MultiBuyRebr.RebType = StringToInt(ImportField);
  MultiBuyRebr.Closed = StringToInt(ImportField);
  MultiBuyRebr.Location = ImportField;
  MultiBuyRebr.BuyAnyQty = StringToVal(ImportField,M4Qty);
  MultiBuyRebr.FixedDiscount = ImportField;
  MultiBuyRebr.FixedPrice = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(MultiBuyRebr,MultiBuyRebrw,1);
    MultiBuyRebrw.ArtCode = ImportField;
    MultiBuyRebrw.ArtName = ImportField;
    MultiBuyRebrw.BuyQty = StringToVal(ImportField,M4Qty);
    MultiBuyRebrw.GetQty = StringToVal(ImportField,M4Qty);
    MultiBuyRebrw.vRebate = StringToVal(ImportField,M41Val);
    MultiBuyRebrw.Price = StringToVal(ImportField,M423Val);
    MultiBuyRebrw.RebArtCode = ImportField;
    MultiBuyRebrw.RebArtName = ImportField;
    MatRowPut(MultiBuyRebr,rwcnt,MultiBuyRebrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagMultiBuyRebVc(string thetag)
begin
  record MultiBuyRebVc MultiBuyRebr;
  record MultiBuyRebVc MultiBuyReb2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagMultiBuyRebVcRecord(MultiBuyRebr);
    MultiBuyReb2r.Code = MultiBuyRebr.Code;
    if (ReadFirstMain(MultiBuyReb2r,1,true)) then begin
      if (blankuuid(MultiBuyRebr.UUID)) then begin
        MultiBuyRebr.UUID = MultiBuyReb2r.UUID;
        MultiBuyRebr.ServerSequence = MultiBuyReb2r.ServerSequence;
        MultiBuyRebr.SyncFlags = MultiBuyReb2r.SyncFlags;
      end;
      if (RecordUpdate(MultiBuyReb2r,MultiBuyRebr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(MultiBuyRebr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrMultiBuyRebVc(Integer compnr,string thetag)
begin
  record MultiBuyRebVc MultiBuyRebr;
  
  MultiBuyRebr.Code = ImportField;
  ReadRecordIdStrMultiBuyRebVc = BuildRecordIdStr(MultiBuyRebr,compnr);
  return;
end;

procedure ReadImportTagLoyaltyCardVcRecord(record LoyaltyCardVc LoyaltyCardr)
begin
  RecordNew(LoyaltyCardr);
  LoyaltyCardr.SerNr = ImportField;
  LoyaltyCardr.CustCode = ImportField;
  LoyaltyCardr.CustName = ImportField;
  LoyaltyCardr.LCMLevel = ImportField;
  LoyaltyCardr.StartDate = StringToDate(ImportField);
  LoyaltyCardr.ExpiryDate = StringToDate(ImportField);
  LoyaltyCardr.PointsTo = ImportField;
  LoyaltyCardr.PointsBalance = StringToVal(ImportField,M4Val);
  return;
end;

global
updating procedure ReadImportTagLoyaltyCardVc(string thetag)
begin
  record LoyaltyCardVc LoyaltyCardr;
  record LoyaltyCardVc LoyaltyCard2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagLoyaltyCardVcRecord(LoyaltyCardr);
    LoyaltyCard2r.SerNr = LoyaltyCardr.SerNr;
    if (ReadFirstMain(LoyaltyCard2r,1,true)) then begin
      if (blankuuid(LoyaltyCardr.UUID)) then begin
        LoyaltyCardr.UUID = LoyaltyCard2r.UUID;
        LoyaltyCardr.ServerSequence = LoyaltyCard2r.ServerSequence;
        LoyaltyCardr.SyncFlags = LoyaltyCard2r.SyncFlags;
      end;
      if (RecordUpdate(LoyaltyCard2r,LoyaltyCardr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(LoyaltyCardr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrLoyaltyCardVc(Integer compnr,string thetag)
begin
  record LoyaltyCardVc LoyaltyCardr;
  
  LoyaltyCardr.SerNr = ImportField;
  ReadRecordIdStrLoyaltyCardVc = BuildRecordIdStr(LoyaltyCardr,compnr);
  return;
end;

procedure ReadImportTagPointsHistVcRecord(record PointsHistVc PointsHistr)
begin
  RecordNew(PointsHistr);
  PointsHistr.FileName = ImportField;
  PointsHistr.TransNr = StringToLongint(ImportField);
  PointsHistr.TransDate = StringToDate(ImportField);
  PointsHistr.LMCardNr = ImportField;
  PointsHistr.CustCode = ImportField;
  PointsHistr.Points = StringToVal(ImportField,M4Val);
  PointsHistr.FWBalance = StringToVal(ImportField,M4Val);
  PointsHistr.PointsFrom = ImportField;
  PointsHistr.Location = ImportField;
  PointsHistr.Type = StringToInt(ImportField);
  PointsHistr.SerNr = NextSerNr("PointsHistVc",PointsHistr.TransDate,-1,false,"");
  return;
end;

global
updating procedure ReadImportTagPointsHistVc(string thetag)
begin
  record PointsHistVc PointsHistr;
  record PointsHistVc PointsHist2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagPointsHistVcRecord(PointsHistr);
    PointsHist2r.SerNr = PointsHistr.SerNr;
    if (ReadFirstMain(PointsHist2r,1,true)) then begin
      if (blankuuid(PointsHistr.UUID)) then begin
        PointsHistr.UUID = PointsHist2r.UUID;
        PointsHistr.ServerSequence = PointsHist2r.ServerSequence;
        PointsHistr.SyncFlags = PointsHist2r.SyncFlags;
      end;
      if (RecordUpdate(PointsHist2r,PointsHistr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(PointsHistr,false)) then begin end;
    end;
  end;
  
  return;
end;
/*
how to do it when mainindex is new field ?

global
function string 120 ReadRecordIdStrPointsHistVc(Integer compnr,string thetag)
begin
  record PointsHistVc PointsHistr;
  
  PointsHistr.TransNr = StringToLongint(ImportField);
  PointsHistr.FileName = ImportField;
  ReadRecordIdStrPointsHistVc = BuildRecordIdStr(PointsHistr,compnr);
  return;
end;
*/

procedure ReadImportTagPointsHistVcRecord2(record PointsHistVc PointsHistr)
begin
  RecordNew(PointsHistr);
  ImportField;
  ImportField;
  ImportField;
  PointsHistr.FileName = ImportField;
  PointsHistr.TransNr = StringToLongint(ImportField);
  PointsHistr.TransDate = StringToDate(ImportField);
  PointsHistr.LMCardNr = ImportField;
  PointsHistr.CustCode = ImportField;
  PointsHistr.Points = StringToVal(ImportField,M4Val);
  PointsHistr.FWBalance = StringToVal(ImportField,M4Val);
  PointsHistr.PointsFrom = ImportField;
  PointsHistr.Location = ImportField;
  PointsHistr.Type = StringToInt(ImportField);
  PointsHistr.SerNr = NextSerNr("PointsHistVc",PointsHistr.TransDate,-1,false,"");
  return;
end;

global
updating procedure ReadImportTagPointsHistVc2(string thetag)
begin
  record PointsHistVc PointsHistr;
  record PointsHistVc PointsHist2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagPointsHistVcRecord2(PointsHistr);
    PointsHist2r.SerNr = PointsHistr.SerNr;
    if (ReadFirstMain(PointsHist2r,1,true)) then begin
      if (blankuuid(PointsHistr.UUID)) then begin
        PointsHistr.UUID = PointsHist2r.UUID;
        PointsHistr.ServerSequence = PointsHist2r.ServerSequence;
        PointsHistr.SyncFlags = PointsHist2r.SyncFlags;
      end;
      if (RecordUpdate(PointsHist2r,PointsHistr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(PointsHistr,false)) then begin end;
    end;
  end;
  
  return;
end;

/*
how to do it when mainindex is new field ?
global
function string 120 ReadRecordIdStrPointsHistVc2(Integer compnr,string thetag)
begin
  record PointsHistVc PointsHistr;

    
  ReadRecordIdStrPointsHistVc2 = BuildRecordIdStr(PointsHistr,compnr);
  return;
end;
*/
procedure ReadImportTagLCMemberLevelVcRecord(record LCMemberLevelVc LCMemberLevelr)
begin
  RecordNew(LCMemberLevelr);
  LCMemberLevelr.Code = ImportField;
  LCMemberLevelr.Comment = ImportField;
  return;
end;

global
updating procedure ReadImportTagLCMemberLevelVc(string thetag)
begin
  record LCMemberLevelVc LCMemberLevelr;
  record LCMemberLevelVc LCMemberLevel2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagLCMemberLevelVcRecord(LCMemberLevelr);
    LCMemberLevel2r.Code = LCMemberLevelr.Code;
    if (ReadFirstMain(LCMemberLevel2r,1,true)) then begin
      if (blankuuid(LCMemberLevelr.UUID)) then begin
        LCMemberLevelr.UUID = LCMemberLevel2r.UUID;
        LCMemberLevelr.ServerSequence = LCMemberLevel2r.ServerSequence;
        LCMemberLevelr.SyncFlags = LCMemberLevel2r.SyncFlags;
      end;
      if (RecordUpdate(LCMemberLevel2r,LCMemberLevelr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(LCMemberLevelr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrLCMemberLevelVc(Integer compnr,string thetag)
begin
  record LCMemberLevelVc LCMemberLevelr;
  
  LCMemberLevelr.Code = ImportField;
  ReadRecordIdStrLCMemberLevelVc = BuildRecordIdStr(LCMemberLevelr,compnr);
  return;
end;

procedure ReadImportTagCouponVcRecord(record CouponVc Couponr)
begin
  RecordNew(Couponr);
  Couponr.SerNr = StringToLongint(ImportField);
  Couponr.CouponNr = ImportField;
  Couponr.CreditCardNr = ImportField;
  Couponr.IVNr = StringToLongint(ImportField);
  Couponr.ConsNr = StringToLongint(ImportField);
  Couponr.TransDate = StringToDate(ImportField);
  Couponr.CUCode = ImportField;
  Couponr.CUName = ImportField;
  Couponr.Comment = ImportField;
  Couponr.CardType = ImportField;
  Couponr.Amount = StringToVal(ImportField,M4Val);
  Couponr.Status = StringToInt(ImportField);
  Couponr.Direct = StringToInt(ImportField);
  Couponr.DepDate = StringToDate(ImportField);
  Couponr.Inst = StringToInt(ImportField);
  Couponr.AuthDate = StringToDate(ImportField);
  Couponr.CashDate = StringToDate(ImportField);
  Couponr.BatchNr = StringToInt(ImportField);
  Couponr.AuthorizationCode = ImportField;
  Couponr.InstrNr = StringToInt(ImportField);
  Couponr.MachineName = ImportField;
  Couponr.Objects = ImportField;
  Couponr.OriginType = StringToInt(ImportField);
  Couponr.CurncyCode = ImportField;
  Couponr.NLTransDate = StringToDate(ImportField);
  Couponr.Batch = ImportField;
  Couponr.CCTransID = ImportField;
  return;
end;

global
updating procedure ReadImportTagCouponVc(string thetag)
begin
  record CouponVc Couponr;
  record CouponVc Coupon2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagCouponVcRecord(Couponr);
    Coupon2r.SerNr = Couponr.SerNr;
    if (ReadFirstMain(Coupon2r,1,true)) then begin
      if (blankuuid(Couponr.UUID)) then begin
        Couponr.UUID = Coupon2r.UUID;
        Couponr.ServerSequence = Coupon2r.ServerSequence;
        Couponr.SyncFlags = Coupon2r.SyncFlags;
      end;
      if (RecordUpdate(Coupon2r,Couponr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Couponr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrCouponVc(Integer compnr,string thetag)
begin
  record CouponVc Couponr;
  
  Couponr.SerNr = StringToLongint(ImportField);
  ReadRecordIdStrCouponVc = BuildRecordIdStr(Couponr,compnr);
  return;
end;

procedure ReadImportTagenhet2Record(record UnitVc Unitr)
begin
  row UnitVc Unitrw;
  integer rwcnt;
  
  RecordNew(Unitr);
  Unitr.Code = ImportField;
  Unitr.Comment = ImportField;
  Unitr.VolWeighFact = StringToVal(ImportField,M4UVal);
  Unitr.QtyFact = StringToVal(ImportField,M4UVal);
  Unitr.AllowDim = StringToInt(ImportField);
  Unitr.CheckDim = StringToInt(ImportField);
  Unitr.CalcDimQty = StringToInt(ImportField);
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(Unitr,Unitrw,1);
    Unitrw.LangCode = ImportField;
    Unitrw.Text = ImportField;
    MatRowPut(Unitr,rwcnt,Unitrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagenhet2(string thetag)
begin
  record UnitVc Unitr;
  record UnitVc Unit2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagenhet2Record(Unitr);
    Unit2r.Code = Unitr.Code;
    if (ReadFirstMain(Unit2r,1,true)) then begin
      if (blankuuid(Unitr.UUID)) then begin
        Unitr.UUID = Unit2r.UUID;
        Unitr.ServerSequence = Unit2r.ServerSequence;
        Unitr.SyncFlags = Unit2r.SyncFlags;
      end;
      if (RecordUpdate(Unit2r,Unitr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Unitr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrenhet2(Integer compnr,string thetag)
begin
  record UnitVc Unitr;
  
  Unitr.Code = ImportField;
  ReadRecordIdStrenhet2 = BuildRecordIdStr(Unitr,compnr);
  return;
end;

procedure ReadImportTagGCSVcRecord(record GCSVc GCSr)
begin
  RecordNew(GCSr);
  GCSr.SerNr = StringToLongint(ImportField);
  GCSr.TransDate = StringToDate(ImportField);
  GCSr.Amount = StringToVal(ImportField,M4Val);
  GCSr.Comment = ImportField;
  GCSr.ExpiryDate = StringToDate(ImportField);
  GCSr.Closed = StringToInt(ImportField);
  GCSr.InvSerNr = StringToLongint(ImportField);
  GCSr.FileName = "RestAccVc";
  GCSr.BarCode = ImportField;
  GCSr.Balance = StringToVal(ImportField,M4Val);
  return;
end;

global
updating procedure ReadImportTagGCSVc(string thetag)
begin
  record GCSVc GCSr;
  record GCSVc GCS2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagGCSVcRecord(GCSr);
    GCS2r.SerNr = GCSr.SerNr;
    if (ReadFirstMain(GCS2r,1,true)) then begin
      if (blankuuid(GCSr.UUID)) then begin
        GCSr.UUID = GCS2r.UUID;
        GCSr.ServerSequence = GCS2r.ServerSequence;
        GCSr.SyncFlags = GCS2r.SyncFlags;
      end;
      if (RecordUpdate(GCS2r,GCSr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(GCSr,false)) then begin end;
    end;
  end;  
  return;
end;

procedure ReadImportTagFormDefVcRecord(record FormDefVc FDr)
begin
  Integer i,rwcnt;
  row FormDefVc FDrw;
  
  RecordNew(FDr);
  FDr.repname = ImportField;
  FDr.critname = ImportField;
  FDr.defname = ImportField;
  FDr.modname = ImportField;
  FDr.shortname = ImportField;

  rwcnt = 0;  
  while (NextImportLine(false)) begin
    ClearRow(FDr,FDrw,1);
    FDrw.LangCode = ImportField;
    FDrw.UserGroup = ImportField;
    FDrw.SerNr = StringToLongInt(ImportField);
    FDrw.FPCode = ImportField;
    FDrw.PrintGroupCode = ImportField;
    FDrw.intdocnr = StringToLongInt(ImportField);
    FDrw.EformCode = ImportField;
    FDrw.Typ = StringToInt(ImportField);
    MatRowPut(FDr,rwcnt,FDrw);
    rwcnt = rwcnt + 1;
  end;
  return;
end;

global
updating procedure ReadImportTagFormDefVc(string thetag)
begin
  record FormDefVc FDr;
  record FormDefVc FD2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagFormDefVcRecord(FDr);
    FD2r.repname = FDr.repname;
    FD2r.shortname = FDr.shortname;
    if (ReadFirstMain(FD2r,2,true)) then begin
      if (blankuuid(FDr.UUID)) then begin
        FDr.UUID = FD2r.UUID;
        FDr.ServerSequence = FD2r.ServerSequence;
        FDr.SyncFlags = FD2r.SyncFlags;
      end;
      if (RecordUpdate(FD2r,FDr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(FDr,false)) then begin end;
    end;
  end;  
  return;
end;

global
function string 120 ReadRecordIdStrGCSVc(Integer compnr,string thetag)
begin
  record GCSVc GCSr;
  
  GCSr.SerNr = StringToLongint(ImportField);
  ReadRecordIdStrGCSVc = BuildRecordIdStr(GCSr,compnr);
  return;
end;

procedure ReadImportTagGCRVcRecord(record GCRVc GCRr)
begin
  RecordNew(GCRr);
  GCRr.SerNr = StringToLongint(ImportField);
  GCRr.TransDate = StringToDate(ImportField);
  GCRr.Amount = StringToVal(ImportField,M4Val);
  GCRr.Comment = ImportField;
  GCRr.ExpiryDate = StringToDate(ImportField);
  GCRr.BarCode = ImportField;
  GCRr.InvSerNr = StringToLongint(ImportField);
  GCRr.GCSSerNr = StringToLongint(ImportField);
  GCRr.FileName = "IVVc";
  return;
end;

global
updating procedure ReadImportTagGCRVc2(string thetag)
begin
  record GCRVc GCRr;
  record GCRVc GCR2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagGCRVcRecord(GCRr);
    GCR2r.SerNr = GCRr.SerNr;
    if (ReadFirstMain(GCR2r,1,true)) then begin
      if (blankuuid(GCRr.UUID)) then begin
        GCRr.UUID = GCR2r.UUID;
        GCRr.ServerSequence = GCR2r.ServerSequence;
        GCRr.SyncFlags = GCR2r.SyncFlags;
      end;
      if (RecordUpdate(GCR2r,GCRr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(GCRr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrGCRVc(Integer compnr,string thetag)
begin
  record GCRVc GCRr;
  
  GCRr.SerNr = StringToLongint(ImportField);
  ReadRecordIdStrGCRVc = BuildRecordIdStr(GCRr,compnr);
  return;
end;

procedure ReadImportTagGCVcRecord(record GCVc GCr)
begin
  RecordNew(GCr);
  GCr.SerNr = StringToLongint(ImportField);
  GCr.TransDate = StringToDate(ImportField);
  GCr.Amount = StringToVal(ImportField,M4Val);
  GCr.Comment = ImportField;
  GCr.ExpiryDate = StringToDate(ImportField);
  GCr.OKFlag = StringToInt(ImportField);
  GCr.Closed = StringToInt(ImportField);
  GCr.BarCode = ImportField;
  return;
end;

global
updating procedure ReadImportTagGCVc(string thetag)
begin
  record GCVc GCr;
  record GCVc GC2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagGCVcRecord(GCr);
    GC2r.SerNr = GCr.SerNr;
    if (ReadFirstMain(GC2r,1,true)) then begin
      if (blankuuid(GCr.UUID)) then begin
        GCr.UUID = GC2r.UUID;
        GCr.ServerSequence = GC2r.ServerSequence;
        GCr.SyncFlags = GC2r.SyncFlags;
      end;
      if (RecordUpdate(GC2r,GCr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(GCr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrGCVc(Integer compnr,string thetag)
begin
  record GCVc GCr;
  
  GCr.SerNr = StringToLongint(ImportField);
  ReadRecordIdStrGCVc = BuildRecordIdStr(GCr,compnr);
  return;
end;

procedure ReadImportTagSerialPortDeviceVcRecord(record SerialPortDeviceVc SPDr)
begin
  RecordNew(SPDr);

  SPDr.Code = ImportField;
  SPDr.DeviceType = StringToInt(ImportField);
  SPDr.LocalMachineCode = ImportField;
  SPDr.Printer = StringToInt(ImportField);
  SPDr.Port = ImportField;
  SPDr.BaudRate = StringToLongint(ImportField);
  SPDr.ByteSize = StringToInt(ImportField);
  SPDr.Parity = StringToInt(ImportField);
  SPDr.StopBits = StringToInt(ImportField);
  SPDr.Codepage = StringToInt(ImportField);
  SPDr.FlowControl = StringToInt(ImportField);
  SPDr.EscSeqBefore = ImportField;
  SPDr.EscSeqAfter = ImportField;
  SPDr.FailureCode = ImportField;
  return;
end;

global
updating procedure ReadImportTagSerialPortDeviceVc(string thetag)
begin
  record SerialPortDeviceVc SPDr;
  record SerialPortDeviceVc SPD2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagSerialPortDeviceVcRecord(SPDr);
    SPD2r.Code = SPDr.Code;
    if (ReadFirstMain(SPD2r,1,true)) then begin
      if (blankuuid(SPDr.UUID)) then begin
        SPDr.UUID = SPD2r.UUID;
        SPDr.ServerSequence = SPD2r.ServerSequence;
        SPDr.SyncFlags = SPD2r.SyncFlags;
      end;
      if (RecordUpdate(SPD2r,SPDr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(SPDr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrSerialPortDeviceVc(Integer compnr,string thetag)
begin
  record SerialPortDeviceVc SPDr;
  
  SPDr.Code = ImportField;
  ReadRecordIdStrSerialPortDeviceVc = BuildRecordIdStr(SPDr,compnr);
  return;
end;

procedure ReadImportTagModifiersVcRecord(record ModifiersVc Modr)
begin
  Integer i,rwcnt;
  row ModifiersVc Modrw;
  
  RecordNew(Modr);
  Modr.Code = ImportField;
  Modr.Comment = ImportField;
  Modr.ArtCode = ImportField;

  rwcnt = 0;  
  while (NextImportLine(false)) begin
    ClearRow(Modr,Modrw,1);
    Modrw.Item = ImportField;
    Modrw.Name = ImportField;
    Modrw.Group = StringToInt(ImportField);
    MatRowPut(Modr,rwcnt,Modrw);
    rwcnt = rwcnt + 1;
  end;
  return;
end;

global
updating procedure ReadImportTagModifiersVc(string thetag)
begin
  record ModifiersVc Modr;
  record ModifiersVc Mod2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagModifiersVcRecord(Modr);
    Mod2r.Code = Modr.Code;
    if (ReadFirstMain(Mod2r,1,true)) then begin
      if (blankuuid(Modr.UUID)) then begin
        Modr.UUID = Mod2r.UUID;
        Modr.ServerSequence = Mod2r.ServerSequence;
        Modr.SyncFlags = Mod2r.SyncFlags;
      end;
      if (RecordUpdate(Mod2r,Modr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Modr,false)) then begin end;
    end;
  end;  
  return;
end;

global
function string 120 ReadRecordIdStrModifiersVc(Integer compnr,string thetag)
begin
  record ModifiersVc Modr;
  
  Modr.Code = ImportField;
  ReadRecordIdStrModifiersVc = BuildRecordIdStr(Modr,compnr);
  return;
end;

procedure ReadImportTagSplitINVcRecord(record SplitINVc SplitINr)
begin
  RecordNew(SplitINr);
  SplitINr.FromArtCode = ImportField;
  SplitINr.FromArtName = ImportField;
  SplitINr.ToArtCode = ImportField;
  SplitINr.ToArtName = ImportField;
  SplitINr.Factor = StringtoVal(ImportField,M4Val);
  return;
end;

global
updating procedure ReadImportTagSplitINVc(string thetag)
begin
  record SplitINVc SplitINr;
  record SplitINVc SplitIN2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagSplitINVcRecord(SplitINr);
    SplitIN2r.FromArtCode = SplitINr.FromArtCode;
    SplitIN2r.ToArtCode = SplitINr.ToArtCode;
    if (ReadFirstMain(SplitIN2r,2,true)) then begin
      if (blankuuid(SplitINr.UUID)) then begin
        SplitINr.UUID = SplitIN2r.UUID;
        SplitINr.ServerSequence = SplitIN2r.ServerSequence;
        SplitINr.SyncFlags = SplitIN2r.SyncFlags;
      end;
      if (RecordUpdate(SplitIN2r,SplitINr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(SplitINr,false)) then begin end;
    end;
  end;  
  return;
end;

global
function string 120 ReadRecordIdStrSplitINVc(Integer compnr,string thetag)
begin
  record SplitINVc SplitINr;
  
  SplitINr.FromArtCode = ImportField;
  SplitINr.ToArtCode = ImportField;
  ReadRecordIdStrSplitINVc = BuildRecordIdStr(SplitINr,compnr);
  return;
end;
