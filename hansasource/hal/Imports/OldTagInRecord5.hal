external function string 255 StrReplace(string,string,string); 

//webtexts
procedure ReadImportTagWebTextVcRecord(record WebTextVc WebTextr)
begin
  string 255 tstr;
  row WebTextVc WebTextrw;
  integer rwcnt;
  
  RecordNew(WebTextr);
  WebTextr.Code = ImportField;
  WebTextr.Comment = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(WebTextr,WebTextrw,1);
    WebTextrw.LangCode = ImportField;
    WebTextrw.Comment = ImportField;
    MatRowPut(WebTextr,rwcnt,WebTextrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagWebTextVc(string thetag)
begin
  record WebTextVc WebTextr;
  
  while (NextImportLine(false)) begin
    ReadImportTagWebTextVcRecord(WebTextr);
    RecordImportStore(WebTextr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrWebTextVc(Integer compnr,string thetag)
begin
  record WebTextVc WebTextr;
  
  WebTextr.Code = ImportField;
  ReadRecordIdStrWebTextVc = BuildRecordIdStr(WebTextr,compnr);
  return;
end;

//structures
procedure ReadImportTagWebNGStructVcRecord(record WebNGStructVc WebNGStructr)
begin
  string 255 tstr;
  RecordNew(WebNGStructr);
  WebNGStructr.SerNr = StringToLongint(ImportField);
  WebNGStructr.Mother = StringToLongint(ImportField);
  WebNGStructr.Type = StringToInt(ImportField);
  WebNGStructr.Name = ImportField;
  WebNGStructr.Comment = ImportField;
  WebNGStructr.Closed = StringToInt(ImportField);
  WebNGStructr.HALFunc = ImportField;
  WebNGStructr.WebPage = ImportField;
  WebNGStructr.NeedsLogin = StringToInt(ImportField);
  WebNGStructr.LogAccess = StringToInt(ImportField);
  
  return;
end;

global
updating procedure ReadImportTagWebNGStructVc(string thetag)
begin
  record WebNGStructVc WebNGStructr;
  
  while (NextImportLine(false)) begin
    ReadImportTagWebNGStructVcRecord(WebNGStructr);
    RecordImportStore(WebNGStructr,false);
  end;
  
  return;
end;

//pages
procedure ReadImportTagWebNGPageVcRecord(record WebNGPageVc WebNGPager)
begin
  string 255 tstr;
  row WebNGPageVc WebNGPagerw;
  integer rwcnt;
  
  RecordNew(WebNGPager);
  WebNGPager.Code = ImportField;
  WebNGPager.Comment = ImportField;
  WebNGPager.DontInheritStyle = StringToInt(ImportField);
  WebNGPager.DontInheritSiteElements = StringToInt(ImportField);
  WebNGPager.StyleSheet = ImportField;
  WebNGPager.TemplatePage = ImportField;
  WebNGPager.PageTitle = ImportField;
  WebNGPager.BodyClass = ImportField;
  WebNGPager.DivID = ImportField;
  WebNGPager.DivClass = ImportField;
  WebNGPager.EncapsulateInDiv = StringToInt(ImportField);
  WebNGPager.NeedsLogin = StringToInt(ImportField);
  WebNGPager.TemporaryPage = StringToInt(ImportField);
  WebNGPager.DefLangCode = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(WebNGPager,WebNGPagerw,1);
    WebNGPagerw.WebElement = ImportField;
    WebNGPagerw.Position = StringToInt(ImportField);
    WebNGPagerw.NamedPosition = ImportField;
    MatRowPut(WebNGPager,rwcnt,WebNGPagerw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagWebNGPageVc(string thetag)
begin
  record WebNGPageVc WebNGPager;
  
  while (NextImportLine(false)) begin
    ReadImportTagWebNGPageVcRecord(WebNGPager);
    RecordImportStore(WebNGPager,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrWebNGPageVc(Integer compnr,string thetag)
begin
  record WebNGPageVc WebNGPager;
  
  WebNGPager.Code = ImportField;
  ReadRecordIdStrWebNGPageVc = BuildRecordIdStr(WebNGPager,compnr);
  return;
end;

//webelements
procedure ReadImportTagWebNGElementVcRecord(record WebNGElementVc WebNGElementr)
begin
  string 255 tstr;
  row WebNGElementVc WebNGElementrw;
  integer rwcnt;
  
  RecordNew(WebNGElementr);
  WebNGElementr.Code = ImportField;
  WebNGElementr.Comment = ImportField;
  WebNGElementr.Type = StringToInt(ImportField);
  WebNGElementr.HALFunc = ImportField;
  WebNGElementr.WebMenu = ImportField;
  WebNGElementr.TemplateElement = ImportField;
  WebNGElementr.DivID = ImportField;
  WebNGElementr.DivClass = ImportField;
  WebNGElementr.NoDiv = StringToInt(ImportField);
  WebNGElementr.LinkToStruct = StringToLongint(ImportField);
  WebNGElementr.DefLangCode = ImportField;
  WebNGElementr.WrapContentInDiv = StringToInt(ImportField);
  WebNGElementr.ContentDivID = ImportField;
  WebNGElementr.ContentDivClass = ImportField;
  WebNGElementr.LogAccess = StringToInt(ImportField);
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(WebNGElementr,WebNGElementrw,1);
    WebNGElementrw.WebElement = ImportField;
    WebNGElementrw.Position = StringToInt(ImportField);
    MatRowPut(WebNGElementr,rwcnt,WebNGElementrw);
    rwcnt = rwcnt + 1;
  end;
  
  while (NextImportLine(false)) begin
    tstr = ImportField;
    if nonblank(tstr) then begin
      AddToText(tstr,WebNGElementr);
      if (ImportIntoText(WebNGElementr)) then begin
      end;
    end;
  end;
  
  return;
end;

global
updating procedure ReadImportTagWebNGElementVc(string thetag)
begin
  record WebNGElementVc WebNGElementr;
  
  while (NextImportLine(false)) begin
    ReadImportTagWebNGElementVcRecord(WebNGElementr);
    RecordImportStore(WebNGElementr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrWebNGElementVc(Integer compnr,string thetag)
begin
  record WebNGElementVc WebNGElementr;
  
  WebNGElementr.Code = ImportField;
  ReadRecordIdStrWebNGElementVc = BuildRecordIdStr(WebNGElementr,compnr);
  return;
end;

//content
procedure ReadImportTagWebNGContentVcRecord(record WebNGContentVc WebNGContentr)
begin
  string 255 tstr;
  RecordNew(WebNGContentr);
  WebNGContentr.SerNr = StringToLongint(ImportField);
  WebNGContentr.Comment = ImportField;
  WebNGContentr.SpecDate = StringToDate(ImportField);
  WebNGContentr.ContentStyle = ImportField;
  WebNGContentr.Country = ImportField;
  WebNGContentr.DefLangCode = ImportField;
  WebNGContentr.ContentCategory = ImportField;
  WebNGContentr.LinkToStruct = StringToLongint(ImportField);
  WebNGContentr.ExcludeCountries = ImportField;
  WebNGContentr.ElementCode = ImportField;
  WebNGContentr.Versions = ImportField;
  
  return;
end;

global
updating procedure ReadImportTagWebNGContentVc(string thetag)
begin
  record WebNGContentVc WebNGContentr;
  
  while (NextImportLine(false)) begin
    ReadImportTagWebNGContentVcRecord(WebNGContentr);
    RecordImportStore(WebNGContentr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrWebNGContentVc(Integer compnr,string thetag)
begin
  record WebNGContentVc WebNGContentr;
  
  WebNGContentr.SerNr = StringToLongint(ImportField);
  ReadRecordIdStrWebNGContentVc = BuildRecordIdStr(WebNGContentr,compnr);
  return;
end;

//web translations
procedure ReadImportTagWebNGTranslateVcRecord(record WebNGTranslateVc WebNGTranslater)
begin
  string 255 tstr;
  row WebNGTranslateVc WebNGTranslaterw;
  integer rwcnt;
  
  RecordNew(WebNGTranslater);
  WebNGTranslater.Code = ImportField;
  WebNGTranslater.Sorting = StringToLongint(ImportField);
  WebNGTranslater.Comment = ImportField;
  WebNGTranslater.LastChanged = StringToDate(ImportField);
  WebNGTranslater.dummy = StringToDate(ImportField);
  WebNGTranslater.dummy2 = ImportField;
  WebNGTranslater.LangCode = ImportField;
  WebNGTranslater.HtmlTranslation = StringToInt(ImportField);
  WebNGTranslater.FileName = StringToInt(ImportField);
  WebNGTranslater.dummy3 = ImportField;
  
  rwcnt = 0;
  
  ReadRecordTextField(WebNGTranslater,"Math2");

  while (NextImportLine(false)) begin
    ClearRow(WebNGTranslater,WebNGTranslaterw,1);
    WebNGTranslaterw.OverviewText = ImportField;
    MatRowPut(WebNGTranslater,rwcnt,WebNGTranslaterw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagWebNGTranslateVc(string thetag)
begin
  record WebNGTranslateVc WebNGTranslater;
  
  while (NextImportLine(false)) begin
    ReadImportTagWebNGTranslateVcRecord(WebNGTranslater);
    RecordImportStore(WebNGTranslater,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrWebNGTranslateVc(Integer compnr,string thetag)
begin
  record WebNGTranslateVc WebNGTranslater;
  
  WebNGTranslater.Code = ImportField;
  WebNGTranslater.LangCode = ImportField;
  WebNGTranslater.Sorting = StringToLongint(ImportField);
  WebNGTranslater.FileName = StringToInt(ImportField);
  ReadRecordIdStrWebNGTranslateVc = BuildRecordIdStr(WebNGTranslater,compnr);
  return;
end;

//web menus
procedure ReadImportTagWebNGMenuVcRecord(record WebNGMenuVc WebNGMenur)
begin
  string 255 tstr;
  row WebNGMenuVc WebNGMenurw;
  integer rwcnt;
  
  RecordNew(WebNGMenur);
  WebNGMenur.Code = ImportField;
  WebNGMenur.Comment = ImportField;
  WebNGMenur.LinkToStruct = StringToLongint(ImportField);
  WebNGMenur.ExtraArgs = ImportField;
  WebNGMenur.Target = ImportField;
  WebNGMenur.NoSession = StringToInt(ImportField);
  WebNGMenur.ParentMenu = ImportField;
  WebNGMenur.GoToURL = ImportField;
  WebNGMenur.LinkPict = ImportField;
  WebNGMenur.WebElement = ImportField;
  WebNGMenur.ShowWhenLoggedIn = StringToInt(ImportField);
  WebNGMenur.ShowWhenLoggedOut = StringToInt(ImportField);
  WebNGMenur.MenuClass = ImportField;
  WebNGMenur.ActMenuClass = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(WebNGMenur,WebNGMenurw,1);
    WebNGMenurw.LangCode = ImportField;
    WebNGMenurw.Text = ImportField;
    MatRowPut(WebNGMenur,rwcnt,WebNGMenurw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagWebNGMenuVc(string thetag)
begin
  record WebNGMenuVc WebNGMenur;
  
  while (NextImportLine(false)) begin
    ReadImportTagWebNGMenuVcRecord(WebNGMenur);
    RecordImportStore(WebNGMenur,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrWebNGMenuVc(Integer compnr,string thetag)
begin
  record WebNGMenuVc WebNGMenur;
  
  WebNGMenur.Code = ImportField;
  ReadRecordIdStrWebNGMenuVc = BuildRecordIdStr(WebNGMenur,compnr);
  return;
end;

//web countries
procedure ReadImportTagWebNGCountryVcRecord(record WebNGCountryVc WebNGCountryr)
begin
  string 255 tstr;
  row WebNGCountryVc WebNGCountryrw;
  integer rwcnt;
  
  RecordNew(WebNGCountryr);
  WebNGCountryr.Code = ImportField;
  WebNGCountryr.Comment = ImportField;
  WebNGCountryr.CurncyCode = ImportField;
  WebNGCountryr.DefaultLanguage = ImportField;
  WebNGCountryr.AllowedLanguages = ImportField;
  WebNGCountryr.CountryRegion = ImportField;
  WebNGCountryr.HMCompany = StringToInt(ImportField);
  WebNGCountryr.ShowOnWeb = StringToInt(ImportField);
  WebNGCountryr.OvrCountry = ImportField;
  WebNGCountryr.WebMailConference = ImportField;
  WebNGCountryr.IsoCode = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(WebNGCountryr,WebNGCountryrw,1);
    WebNGCountryrw.LangCode = ImportField;
    WebNGCountryrw.Text = ImportField;
    MatRowPut(WebNGCountryr,rwcnt,WebNGCountryrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagWebNGCountryVc(string thetag)
begin
  record WebNGCountryVc WebNGCountryr;
  
  while (NextImportLine(false)) begin
    ReadImportTagWebNGCountryVcRecord(WebNGCountryr);
    RecordImportStore(WebNGCountryr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrWebNGCountryVc(Integer compnr,string thetag)
begin
  record WebNGCountryVc WebNGCountryr;
  
  WebNGCountryr.Code = ImportField;
  ReadRecordIdStrWebNGCountryVc = BuildRecordIdStr(WebNGCountryr,compnr);
  return;
end;

//web language
procedure ReadImportTagWebNGLanguageVcRecord(record WebNGLanguageVc WebNGLanguager)
begin
  string 255 tstr;
  row WebNGLanguageVc WebNGLanguagerw;
  integer rwcnt;
  
  RecordNew(WebNGLanguager);
  WebNGLanguager.Code = ImportField;
  WebNGLanguager.Comment = ImportField;
  WebNGLanguager.HMProglang = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(WebNGLanguager,WebNGLanguagerw,1);
    WebNGLanguagerw.LangCode = ImportField;
    WebNGLanguagerw.Text = ImportField;
    MatRowPut(WebNGLanguager,rwcnt,WebNGLanguagerw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagWebNGLanguageVc(string thetag)
begin
  record WebNGLanguageVc WebNGLanguager;
  
  while (NextImportLine(false)) begin
    ReadImportTagWebNGLanguageVcRecord(WebNGLanguager);
    RecordImportStore(WebNGLanguager,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrWebNGLanguageVc(Integer compnr,string thetag)
begin
  record WebNGLanguageVc WebNGLanguager;
  
  WebNGLanguager.Code = ImportField;
  ReadRecordIdStrWebNGLanguageVc = BuildRecordIdStr(WebNGLanguager,compnr);
  return;
end;

//web content style
procedure ReadImportTagWebNGContentStyleVcRecord(record WebNGContentStyleVc WebNGContentStyler)
begin
  string 255 tstr;
  RecordNew(WebNGContentStyler);
  WebNGContentStyler.Code = ImportField;
  WebNGContentStyler.Comment = ImportField;
  WebNGContentStyler.DivID = ImportField;
  WebNGContentStyler.DivClass = ImportField;
  WebNGContentStyler.NoDiv = StringToInt(ImportField);
  WebNGContentStyler.ListViewFlag = StringToInt(ImportField);
  WebNGContentStyler.HandlerAppNode = StringToLongint(ImportField);
  WebNGContentStyler.ElementCount = StringToLongint(ImportField);
  WebNGContentStyler.ElementTemplate = ImportField;
  WebNGContentStyler.HeadingClass = ImportField;
  WebNGContentStyler.PrintDate = StringToInt(ImportField);
  WebNGContentStyler.CommentFlag = StringToInt(ImportField);
  WebNGContentStyler.SortingFlag = StringToInt(ImportField);
  WebNGContentStyler.GroupByCountry = StringToInt(ImportField);
  WebNGContentStyler.GroupByCategory = StringToInt(ImportField);
  WebNGContentStyler.CountryHeaderDivClass = ImportField;
  WebNGContentStyler.CatHeaderDivClass = ImportField;
  WebNGContentStyler.PageTemplate = ImportField;
  WebNGContentStyler.PrintDateList = StringToInt(ImportField);
  WebNGContentStyler.CommentListFlag = StringToInt(ImportField);
  WebNGContentStyler.ListDateClass = ImportField;
  WebNGContentStyler.DateClass = ImportField;
  WebNGContentStyler.ListTextClass = ImportField;
  WebNGContentStyler.TextClass = ImportField;
  WebNGContentStyler.ListHeadingClass = ImportField;
  
  return;
end;

global
updating procedure ReadImportTagWebNGContentStyleVc(string thetag)
begin
  record WebNGContentStyleVc WebNGContentStyler;
  
  while (NextImportLine(false)) begin
    ReadImportTagWebNGContentStyleVcRecord(WebNGContentStyler);
    RecordImportStore(WebNGContentStyler,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrWebNGContentStyleVc(Integer compnr,string thetag)
begin
  record WebNGContentStyleVc WebNGContentStyler;
  
  WebNGContentStyler.Code = ImportField;
  ReadRecordIdStrWebNGContentStyleVc = BuildRecordIdStr(WebNGContentStyler,compnr);
  return;
end;

//web comp country
procedure ReadImportTagWebNGCompCountryVcRecord(record WebNGCompCountryVc WebNGCompCountryr)
begin
  string 255 tstr;
  row WebNGCompCountryVc WebNGCompCountryrw;
  integer rwcnt;
  
  RecordNew(WebNGCompCountryr);
  WebNGCompCountryr.CompanyNr = StringToInt(ImportField);
  WebNGCompCountryr.Comment = ImportField;
  WebNGCompCountryr.Country = ImportField;
  WebNGCompCountryr.GroupID = ImportField;
  WebNGCompCountryr.GroupDesc = ImportField;
  WebNGCompCountryr.CountryDefault = StringToInt(ImportField);
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(WebNGCompCountryr,WebNGCompCountryrw,1);
    WebNGCompCountryrw.LangCode = ImportField;
    WebNGCompCountryrw.Text = ImportField;
    WebNGCompCountryrw.GroupDesc = ImportField;
    MatRowPut(WebNGCompCountryr,rwcnt,WebNGCompCountryrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagWebNGCompCountryVc(string thetag)
begin
  record WebNGCompCountryVc WebNGCompCountryr;
  
  while (NextImportLine(false)) begin
    ReadImportTagWebNGCompCountryVcRecord(WebNGCompCountryr);
    RecordImportStore(WebNGCompCountryr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrWebNGCompCountryVc(Integer compnr,string thetag)
begin
  record WebNGCompCountryVc WebNGCompCountryr;
  
  WebNGCompCountryr.CompanyNr = StringToInt(ImportField);
  ReadRecordIdStrWebNGCompCountryVc = BuildRecordIdStr(WebNGCompCountryr,compnr);
  return;
end;

//web cont cat
procedure ReadImportTagWebNGContentCatVcRecord(record WebNGContentCatVc WebNGContentCatr)
begin
  string 255 tstr;
  row WebNGContentCatVc WebNGContentCatrw;
  integer rwcnt;
  
  RecordNew(WebNGContentCatr);
  WebNGContentCatr.Code = ImportField;
  WebNGContentCatr.Comment = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(WebNGContentCatr,WebNGContentCatrw,1);
    WebNGContentCatrw.LangCode = ImportField;
    WebNGContentCatrw.Text = ImportField;
    MatRowPut(WebNGContentCatr,rwcnt,WebNGContentCatrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagWebNGContentCatVc(string thetag)
begin
  record WebNGContentCatVc WebNGContentCatr;
  
  while (NextImportLine(false)) begin
    ReadImportTagWebNGContentCatVcRecord(WebNGContentCatr);
    RecordImportStore(WebNGContentCatr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrWebNGContentCatVc(Integer compnr,string thetag)
begin
  record WebNGContentCatVc WebNGContentCatr;
  
  WebNGContentCatr.Code = ImportField;
  ReadRecordIdStrWebNGContentCatVc = BuildRecordIdStr(WebNGContentCatr,compnr);
  return;
end;

procedure ReadImportTagSubscriptionVcRecord(record SubscriptionVc Subscriptionr)
begin
  string 255 tstr;
  RecordNew(Subscriptionr);
  Subscriptionr.SerNr = StringToLongint(ImportField);
  Subscriptionr.CUCode = ImportField;
  Subscriptionr.CUName = ImportField;
  Subscriptionr.SubIN = StringToLongint(ImportField);
  Subscriptionr.Function = ImportField;
  Subscriptionr.Quant = StringToVal(ImportField,M4Val);
  Subscriptionr.Price = StringToVal(ImportField,M4Val);
  Subscriptionr.Currency = ImportField;
  Subscriptionr.PeriodLength = StringToInt(ImportField);
  Subscriptionr.StartDate = StringToDate(ImportField);
  Subscriptionr.EndDate = StringToDate(ImportField);
  Subscriptionr.PaidUntilDate = StringToDate(ImportField);
  Subscriptionr.BillingType = StringToInt(ImportField);
  Subscriptionr.CreditCard = ImportField;
  Subscriptionr.Closed = StringToInt(ImportField);
  Subscriptionr.IssuedUntilDate = StringToDate(ImportField);
  Subscriptionr.UserCode = ImportField;
  Subscriptionr.TrialFlag = StringToInt(ImportField);
  Subscriptionr.Type = StringToInt(ImportField);
  Subscriptionr.DealerCode = ImportField;
  Subscriptionr.DealerName = ImportField;
  Subscriptionr.SubINPackageCode = ImportField;
  
  return;
end;

global
updating procedure ReadImportTagSubscriptionVc(string thetag)
begin
  record SubscriptionVc Subscriptionr;
  
  while (NextImportLine(false)) begin
    ReadImportTagSubscriptionVcRecord(Subscriptionr);
    RecordImportStore(Subscriptionr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrSubscriptionVc(Integer compnr,string thetag)
begin
  record SubscriptionVc Subscriptionr;
  
  Subscriptionr.SerNr = StringToLongint(ImportField);
  ReadRecordIdStrSubscriptionVc = BuildRecordIdStr(Subscriptionr,compnr);
  return;
end;


//For Distimo Reviews Old Records:

procedure ReadImportTagAppStoreReviewVcRecord(record AppStoreReviewVc AppStoreReviewr)
begin
  string 255 tstr;
  area value,areatomd5;
  
  RecordNew(AppStoreReviewr);
  AppStoreReviewr.UUID = StringToUUID(ImportField); // NewAutosyncRegister
  ImportField; // NewAutosyncRegister
  ImportField; // NewAutosyncRegister
  AppStoreReviewr.DistimoID = ImportField;
  AppStoreReviewr.SKU = ImportField;
  AppStoreReviewr.Name = ImportField;
  AppStoreReviewr.Version = ImportField;
  AppStoreReviewr.Rating = ImportField;
  AppStoreReviewr.Title = ImportField;
  AppStoreReviewr.Comment = ImportField;
  AppStoreReviewr.User = ImportField;
  AppStoreReviewr.TransDate = StringToDate(ImportField);
  AppStoreReviewr.Country = ImportField;
  AppStoreReviewr.SerNr = ImportField;
  AppStoreReviewr.Hash = ImportField;
  
  while (NextImportLine(false)) begin
    tstr = ImportField;
    if nonblank(tstr) then begin
      AddToText(tstr,AppStoreReviewr);
      if (ImportIntoText(AppStoreReviewr)) then begin
      end;
    end;
  end;
  
  if (blank(AppStoreReviewr.Hash)) then begin
    AddTextToArea(AppStoreReviewr.SKU,areatomd5);
    AddTextToArea(AppStoreReviewr.Name,areatomd5);
    AddTextToArea(AppStoreReviewr.Version,areatomd5);
    AddTextToArea(AppStoreReviewr.Rating,areatomd5);
    AddTextToArea(AppStoreReviewr.Title,areatomd5);
    AddAreaToTextField(value,AppStoreReviewr);
    AddAreaToArea(value,areatomd5);
    AddTextToArea(AppStoreReviewr.User,areatomd5);
    AddTextToArea(AppStoreReviewr.Country,areatomd5);
    AppStoreReviewr.Hash = MD5Area(areatomd5);
  end;
  
  return;
end;

global
updating procedure ReadImportTagAppStoreReviewVc(string thetag)
begin
  record AppStoreReviewVc AppStoreReviewr;
  
  while (NextImportLine(false)) begin
    ReadImportTagAppStoreReviewVcRecord(AppStoreReviewr);
    RecordImportStore(AppStoreReviewr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrAppStoreReviewVc(Integer compnr,string thetag)
begin
  record AppStoreReviewVc AppStoreReviewr;
  
  AppStoreReviewr.SerNr = NextSerNr("AppStoreReviewVc",AppStoreReviewr.TransDate,-1,false,"");
  ReadRecordIdStrAppStoreReviewVc = BuildRecordIdStr(AppStoreReviewr,compnr);
  return;
end;

procedure ReadImportTagSWMVcRecord(record SWMVc SWMr)
begin
  string 255 tstr;
  RecordNew(SWMr);
  SWMr.SerNr = StringToLongint(ImportField);
  SWMr.TransDate = StringToDate(ImportField);
  SWMr.TransTime = StringToTime(ImportField);
  SWMr.CloudWatchpointNr = StringToLongint(ImportField);
  SWMr.ContactCode = ImportField;
  SWMr.ContactName = ImportField;
  SWMr.Mobile = ImportField;
  SWMr.Controller = ImportField;
  SWMr.RemoteCloudServer = StringToUUID(ImportField);
  SWMr.ServerName = ImportField;
  SWMr.DurStatus = StringToInt(ImportField);
  
  return;
end;

global
updating procedure ReadImportTagSWMVc(string thetag)
begin
  record SWMVc SWMr;
  
  while (NextImportLine(false)) begin
    ReadImportTagSWMVcRecord(SWMr);
    RecordImportStore(SWMr,false);
  end;
  
  return;
end;

procedure ReadImportTagCurncyCodeVc2Record(record CurncyCodeVc CurncyCoder)
begin
  string 255 tstr;
  RecordNew(CurncyCoder);
  CurncyCoder.UUID = StringToUUID(ImportField); // NewAutosyncRegister
  ImportField; // NewAutosyncRegister
  ImportField; // NewAutosyncRegister
  CurncyCoder.CurncyCode = ImportField;
  CurncyCoder.Comment = ImportField;
  CurncyCoder.xRndTotal = StringToInt(ImportField);
  CurncyCoder.DefaultFrom = StringToVal(ImportField,M4Rate);
  CurncyCoder.DefaultTo1 = StringToVal(ImportField,M4Rate);
  CurncyCoder.DefaultTo2 = StringToVal(ImportField,M4Rate);
  CurncyCoder.MaxFrom = StringToVal(ImportField,M4Rate);
  CurncyCoder.MaxTo1 = StringToVal(ImportField,M4Rate);
  CurncyCoder.MaxTo2 = StringToVal(ImportField,M4Rate);
  CurncyCoder.MinFrom = StringToVal(ImportField,M4Rate);
  CurncyCoder.MinTo1 = StringToVal(ImportField,M4Rate);
  CurncyCoder.MinTo2 = StringToVal(ImportField,M4Rate);
  CurncyCoder.CurText = ImportField;
  CurncyCoder.MinorCurText = ImportField;
  CurncyCoder.NoChangeBase = StringToInt(ImportField);
  CurncyCoder.NoChangeForeign = StringToInt(ImportField);
  CurncyCoder.EMUCurncy = StringToInt(ImportField);
  CurncyCoder.EMUDate = StringToDate(ImportField);
  CurncyCoder.AutoRoundof = StringToVal(ImportField,M4Qty);
  CurncyCoder.AutoWriteof = StringToVal(ImportField,M4Qty);
  CurncyCoder.CurText1 = ImportField;
  CurncyCoder.CurText2 = ImportField;
  CurncyCoder.MinorCurText1 = ImportField;
  CurncyCoder.MinorCurText2 = ImportField;
  CurncyCoder.CurGender = StringToInt(ImportField);
  CurncyCoder.MinorCurGender = StringToInt(ImportField);
  CurncyCoder.xRoundLines = StringToInt(ImportField);
  CurncyCoder.xRoundVAT = StringToInt(ImportField);
  CurncyCoder.TaxOfficeCode = ImportField;
  
  return;
end;

global
updating procedure ReadImportTagCurncyCodeVc2(string thetag)
begin
  record CurncyCodeVc CurncyCoder;
  
  while (NextImportLine(false)) begin
    ReadImportTagCurncyCodeVc2Record(CurncyCoder);
    RecordImportStore(CurncyCoder,false);
  end;
  
  return;
end;


procedure ReadImportTagActHistVcRecord(record ActHistVc ActHistr)
begin
  string 255 tstr;
  RecordNew(ActHistr);
  ActHistr.SerNr = StringToLongint(ImportField);
  ActHistr.RecordNr = StringToLongint(ImportField);
  ActHistr.TransDate = StringToDate(ImportField);
  ActHistr.TransTime = StringToTime(ImportField);
  
  return;
end;

global
updating procedure ReadImportTagActHistVc(string thetag)
begin
  record ActHistVc ActHistr;
  
  while (NextImportLine(false)) begin
    ReadImportTagActHistVcRecord(ActHistr);
    RecordImportStore(ActHistr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrActHistVc(Integer compnr,string thetag)
begin
  record ActHistVc ActHistr;
  
  ActHistr.SerNr = StringToLongint(ImportField);
  ReadRecordIdStrActHistVc = BuildRecordIdStr(ActHistr,compnr);
  return;
end;

procedure ReadImportTagSubscriptionTransVcRecord(record SubscriptionTransVc SubscriptionTransr)
begin
  string 255 tstr;
  row SubscriptionTransVc SubscriptionTransrw;
  integer rwcnt;
  
  RecordNew(SubscriptionTransr);
  SubscriptionTransr.SerNr = StringToLongint(ImportField);
  SubscriptionTransr.CUCode = ImportField;
  SubscriptionTransr.Amount = StringToVal(ImportField,M4Val);
  ImportField;//SubscriptionTransr.xDate = 
  SubscriptionTransr.BillingType = StringToInt(ImportField);
  SubscriptionTransr.Paid = StringToInt(ImportField);
  SubscriptionTransr.CreatedDate = StringToDate(ImportField);
  SubscriptionTransr.PaidDate = StringToDate(ImportField);
  SubscriptionTransr.InvoiceNo = StringToLongint(ImportField);
  SubscriptionTransr.InvoiceCompCode = ImportField;
  SubscriptionTransr.CurrencyCode = ImportField;
  SubscriptionTransr.PaidMark = StringToInt(ImportField);
  SubscriptionTransr.FailedPaymentCnt = StringToInt(ImportField);
  SubscriptionTransr.ToBeInvoiceNo = StringToLongint(ImportField);
  SubscriptionTransr.AuthorizationCode = ImportField;
  SubscriptionTransr.ReasonCode = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(SubscriptionTransr,SubscriptionTransrw,1);
    SubscriptionTransrw.Subscription = StringToLongint(ImportField);
    SubscriptionTransrw.PeriodStartDate = StringToDate(ImportField);
    SubscriptionTransrw.PeriodEndDate = StringToDate(ImportField);
    SubscriptionTransrw.RowSum = StringToVal(ImportField,M4Val);
    MatRowPut(SubscriptionTransr,rwcnt,SubscriptionTransrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagSubscriptionTransVc(string thetag)
begin
  record SubscriptionTransVc SubscriptionTransr;
  
  while (NextImportLine(false)) begin
    ReadImportTagSubscriptionTransVcRecord(SubscriptionTransr);
    RecordImportStore(SubscriptionTransr,false);
  end;
  
  return;
end;

procedure ReadImportTagUserPipeOverVc2Record(record UserPipelinOverviewVc UserPipelinOverviewr)
begin
  string 255 tstr;
  row UserPipelinOverviewVc UserPipelinOverviewrw;
  integer rwcnt;
  
  RecordNew(UserPipelinOverviewr);
  UserPipelinOverviewr.UserCode = ImportField;
  UserPipelinOverviewr.UserName = ImportField;
  UserPipelinOverviewr.DefaultViewName = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(UserPipelinOverviewr,UserPipelinOverviewrw,1);
    UserPipelinOverviewrw.ViewName = ImportField;
    UserPipelinOverviewrw.ColumnName = ImportField;
    UserPipelinOverviewrw.Register = ImportField;
    UserPipelinOverviewrw.RegisterFilter = ImportField;
    UserPipelinOverviewrw.Amounts = StringToInt(ImportField);
    UserPipelinOverviewrw.RegisterFilter2 = ImportField;
    UserPipelinOverviewrw.colnr = kButtonColourGray;
    MatRowPut(UserPipelinOverviewr,rwcnt,UserPipelinOverviewrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagUserPipeOverVc2(string thetag)
begin
  record UserPipelinOverviewVc UserPipelinOverviewr;
  
  while (NextImportLine(false)) begin
    ReadImportTagUserPipeOverVc2Record(UserPipelinOverviewr);
    RecordImportStore(UserPipelinOverviewr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrUserPipeOverVc2(Integer compnr,string thetag)
begin
  record UserPipelinOverviewVc UserPipelinOverviewr;
  
  UserPipelinOverviewr.UserCode = ImportField;
  ReadRecordIdStrUserPipeOverVc2 = BuildRecordIdStr(UserPipelinOverviewr,compnr);
  return;
end;

procedure ReadImportTagSubscriptionVc2Record(record SubscriptionVc Subscriptionr)
begin
  string 255 tstr;
  row SubscriptionVc Subscriptionrw;
  integer rwcnt;
  
  RecordNew(Subscriptionr);
  Subscriptionr.SerNr = StringToLongint(ImportField);
  Subscriptionr.CUCode = ImportField;
  Subscriptionr.CUName = ImportField;
  Subscriptionr.SubIN = StringToLongint(ImportField);
  Subscriptionr.Function = ImportField;
  Subscriptionr.Quant = StringToVal(ImportField,M4Val);
  Subscriptionr.Price = StringToVal(ImportField,M4Val);
  Subscriptionr.Currency = ImportField;
  Subscriptionr.PeriodLength = StringToInt(ImportField);
  Subscriptionr.StartDate = StringToDate(ImportField);
  Subscriptionr.EndDate = StringToDate(ImportField);
  Subscriptionr.PaidUntilDate = StringToDate(ImportField);
  Subscriptionr.BillingType = StringToInt(ImportField);
  Subscriptionr.CreditCard = ImportField;
  Subscriptionr.Closed = StringToInt(ImportField);
  Subscriptionr.IssuedUntilDate = StringToDate(ImportField);
  Subscriptionr.UserCode = ImportField;
  Subscriptionr.TrialFlag = StringToInt(ImportField);
  Subscriptionr.Type = StringToInt(ImportField);
  Subscriptionr.DealerCode = ImportField;
  Subscriptionr.DealerName = ImportField;
  Subscriptionr.SubINPackageCode = ImportField;
  Subscriptionr.IntStdActivCodeNr = StringToLongint(ImportField);
  Subscriptionr.VAT = StringToVal(ImportField,M4Val);
  Subscriptionr.VATCode = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(Subscriptionr,Subscriptionrw,1);
    Subscriptionrw.Function = ImportField;
    Subscriptionrw.PeriodLength = StringToInt(ImportField);
    Subscriptionrw.Quant = StringToVal(ImportField,M4Val);
    MatRowPut(Subscriptionr,rwcnt,Subscriptionrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagSubscriptionVc2(string thetag)
begin
  record SubscriptionVc Subscriptionr;
  
  while (NextImportLine(false)) begin
    ReadImportTagSubscriptionVc2Record(Subscriptionr);
    RecordImportStore(Subscriptionr,false);
  end;
  
  return;
end;


procedure ReadImportTagResVcRecord(record ResVc Resr)
begin
  string 255 tstr;
  
  RecordNew(Resr);
  Resr.Code = ImportField;
  Resr.Name = ImportField;
  Resr.Contact = ImportField;
  Resr.BankAcc = ImportField;
  Resr.BankName = ImportField;
  Resr.Comment0 = ImportField;
  Resr.Terminated = StringToInt(ImportField);
  Resr.Number = ImportField;
  Resr.Class = ImportField;
  Resr.Type = ImportField;
  Resr.Spec = ImportField;
  Resr.Category = ImportField;
  Resr.xMode = ImportField;
  Resr.xDescription = ImportField;
  Resr.xKey = ImportField;
  Resr.JobGroup = ImportField;
  Resr.ResLoc = ImportField;
  Resr.LTxtCode = ImportField;
  Resr.DefArtCode = ImportField;
  Resr.AreaCode = ImportField;
  Resr.InvoiceBy = StringToInt(ImportField);
  Resr.xPich = ImportField;
  Resr.ResStatus = ImportField;
  Resr.InvAsGroup = StringToInt(ImportField);
  Resr.MaxPersons = StringToLongint(ImportField);
  Resr.PosX = StringToLongint(ImportField);
  Resr.PosY = StringToLongint(ImportField);
  Resr.Smoking = StringToInt(ImportField);
  Resr.Addr1 = ImportField;
  Resr.Addr2 = ImportField;
  Resr.Addr3 = ImportField;
  Resr.Comment1 = ImportField;
  Resr.Comment2 = ImportField;
  Resr.Phone = ImportField;
  Resr.Fax = ImportField;
  Resr.eMail = ImportField;
  Resr.wwwAddr = ImportField;
  Resr.Equipment1 = ImportField;
  Resr.Equipment2 = ImportField;
  Resr.Equipment3 = ImportField;
  Resr.MaxExtraBeds = StringToLongint(ImportField);
  Resr.MaxChildren = StringToLongint(ImportField);
  Resr.MaxPax = StringToLongint(ImportField);
  Resr.Sort = StringToInt(ImportField);
  Resr.Objects = ImportField;
  Resr.Resources = ImportField;
  
  return;
end;

global
updating procedure ReadImportTagResVc(string thetag)
begin
  record ResVc Resr;
  
  while (NextImportLine(false)) begin
    ReadImportTagResVcRecord(Resr);
    RecordImportStore(Resr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrResVc(Integer compnr,string thetag)
begin
  record ResVc Resr;
  
  Resr.Code = ImportField;
  ReadRecordIdStrResVc = BuildRecordIdStr(Resr,compnr);
  return;
end;
