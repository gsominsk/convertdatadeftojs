global
updating procedure ReadImportTagAgeLimits()
begin
  ImportBlock("AgedBlock");
  return;
end;

global
updating procedure ReadImportTagAccountUsageSL()
begin
  string 255 tstr;
  record ModuleBlock mt;
  record AccBlock AccRec;
  Boolean modstoref;

  BlockLoad(mt);
  if (NextImportLine(true)) then begin end;
  AccRec.ARAcc = ImportField;
  AccRec.RndAcc = ImportField;
  AccRec.CredAcc = ImportField;
  AccRec.ERebAcc = ImportField;
  AccRec.VATBAcc = ImportField;
  AccRec.CashAcc = ImportField;
  AccRec.VATERAcc = ImportField;
  AccRec.DoCosts = StringToInt(ImportField);
  AccRec.IVRef = ImportField;
  AccRec.IPRef = ImportField;
  AccRec.RevInclVAT = StringToInt(ImportField);
  AccRec.SLAccTest = StringToInt(ImportField);
  AccRec.ExtraCostAcc = ImportField;
  AccRec.RateGainAcc = ImportField;
  AccRec.RateLossAcc = ImportField;
  AccRec.RateRndOffAcc = ImportField;
  AccRec.ARUseObj = StringToInt(ImportField);
  tstr = ImportField;
  if (nonblank(tstr)) then begin
    AccRec.InvUpdStock = StringToInt(tstr);
  end else begin
    AccRec.InvUpdStock = 1;
  end;
  tstr = ImportField;
  if (tstr=="1") then begin
    mt.CredUpdStock = StringToInt(tstr);
    modstoref = true;
  end;
  AccRec.StockAcc = ImportField;
  AccRec.PurchAcc = ImportField;
  AccRec.StockCostAcc = ImportField;
  AccRec.DomSalesAcc = ImportField;
  AccRec.EUSalesAcc = ImportField;
  AccRec.ExpSalesAcc = ImportField;
  AccRec.OnAccAcc = ImportField;
  AccRec.VATCodeDom = ImportField;
  AccRec.VATCodeEU = ImportField;
  AccRec.VATCodeExp = ImportField;
  AccRec.StockGainAcc = ImportField;
  AccRec.VATCodeCtrl = StringToInt(ImportField);
  AccRec.BasePriceInclVAT = StringToInt(ImportField);
  AccRec.PUExtraAcc = ImportField;
  AccRec.PUFreightAcc = ImportField;
  AccRec.PUCustomsAcc = ImportField;
  AccRec.OnAccVATAcc = ImportField;
  AccRec.ReturnedAcc = ImportField;
  AccRec.IPBookVAT = StringToInt(ImportField);
  AccRec.DiscCashVAT = StringToInt(ImportField);
  AccRec.ARonTR = StringToInt(ImportField); 
  AccRec.EMURndOffAcc = ImportField;
  AccRec.EMUWriteOffAcc = ImportField;
  AccRec.BaseRoundOffAcc = ImportField;
  if (blank(AccRec.EMURndOffAcc)) then begin
    AccRec.EMURndOffAcc = AccRec.RateRndOffAcc;
  end;
  if (blank(AccRec.EMUWriteOffAcc)) then begin
    AccRec.EMUWriteOffAcc = AccRec.RateRndOffAcc;
  end;
  if (blank(AccRec.BaseRoundOffAcc)) then begin
    AccRec.BaseRoundOffAcc = AccRec.RateRndOffAcc;
  end;
  AccRec.ProdICostAcc = ImportField;
  AccRec.ProdWCostAcc = ImportField;
  AccRec.CashBackAcc = ImportField;
  AccRec.DemandPPNo = StringToInt(ImportField); 
  AccRec.CommisionAcc = ImportField;
  AccRec.IPCostObj = StringToInt(ImportField); 
  AccRec.PUCost1 = ImportField;
  AccRec.PUCost2 = ImportField;
  AccRec.PUCost3 = ImportField;
  AccRec.PUCost4 = ImportField;
  AccRec.PUCost5 = ImportField;
  AccRec.UpdBaseRate = StringToInt(ImportField); 
  AccRec.UpdForeginRate = StringToInt(ImportField); 
  AccRec.CorSalesAcc = StringToInt(ImportField); 
  AccRec.CredInvWithNo = StringToInt(ImportField);   
  AccRec.ForceUniquePP = StringToInt(ImportField); 
  AccRec.SalesVAT = ImportField; 
  AccRec.SalesTAX = ImportField; 
  AccRec.BadARAcc = ImportField; 
  AccRec.CredDomSalesAcc = ImportField; 
  AccRec.CredEUSalesAcc = ImportField; 
  AccRec.CredExpSalesAcc = ImportField; 
  AccRec.CredVATCodeDom = ImportField; 
  AccRec.CredVATCodeEU = ImportField; 
  AccRec.CredVATCodeExp = ImportField; 
  AccRec.CredSalesAccs = StringToInt(ImportField);
  AccRec.INTransferAcc = ImportField; 
  AccRec.IPTransBankRowPerCU = StringToInt(ImportField); 
  AccRec.BankRateGainAcc = ImportField; 
  AccRec.BankRateLossAcc = ImportField; 
  AccRec.PreIPVATAcc = ImportField; 
  AccRec.PreIPBookVAT = StringToInt(ImportField);   
  if (modstoref) then begin
    BlockStore(mt);
  end;
  BlockStore(AccRec);
  return;
end;

global
updating procedure ReadImportTagCompanyInfo()
begin
  record CYBlock CYRec;  
  Integer j;
  string 255 tstr;
  record ModuleBlock ModuleRec;

  BlockLoad(ModuleRec);
  if (NextImportLine(true)) then begin end;
  CYRec.CompName = ImportField;
  if (NextImportLine(true)) then begin end;
  CYRec.Addr0 = ImportField;
  if (NextImportLine(true)) then begin end;
  CYRec.Addr1 = ImportField;
  if (NextImportLine(true)) then begin end;
  CYRec.Addr2 = ImportField;
  if (NextImportLine(true)) then begin end;
  tstr = ImportField;
  if (NextImportLine(true)) then begin end;
  CYRec.OrgNr = ImportField;
  CYRec.Phone = ImportField;
  CYRec.Fax = ImportField;
  CYRec.Bank1 = ImportField;
  CYRec.Bank2 = ImportField;
  CYRec.DebCode = ImportField;
  CYRec.CredCode = ImportField;
  CYRec.usePrel = StringToInt(ImportField); 
  CYRec.VATNr = ImportField;
  CYRec.Addr3 = ImportField;
  CYRec.Addr4 = ImportField;

  if (NextImportLine(true)==true) then begin
    for (j=0;j<=4;j=j+1) begin
      switch (j) begin
        case 0: CYRec.NS0[0] = StringToInt(ImportField); 
        case 1: CYRec.NS0[1] = StringToInt(ImportField); 
        case 2: CYRec.NS0[2] = StringToInt(ImportField); 
        case 3: CYRec.NS0[3] = StringToInt(ImportField); 
        case 4: CYRec.NS0[4] = StringToInt(ImportField); 
      end;
    end;
    for (j=0;j<=4;j=j+1) begin
      switch (j) begin
        case 0: CYRec.NS1[0] = StringToInt(ImportField); 
        case 1: CYRec.NS1[1] = StringToInt(ImportField); 
        case 2: CYRec.NS1[2] = StringToInt(ImportField); 
        case 3: CYRec.NS1[3] = StringToInt(ImportField); 
        case 4: CYRec.NS1[4] = StringToInt(ImportField); 
      end;
    end;
    for (j=0;j<=4;j=j+1) begin
      switch (j) begin
        case 0: CYRec.NS2[0] = StringToInt(ImportField); 
        case 1: CYRec.NS2[1] = StringToInt(ImportField); 
        case 2: CYRec.NS2[2] = StringToInt(ImportField); 
        case 3: CYRec.NS2[3] = StringToInt(ImportField); 
        case 4: CYRec.NS2[4] = StringToInt(ImportField); 
      end;
    end;
  end;
  if (NextImportLine(true)==true) then begin
    CYRec.trSkipObj = StringToInt(ImportField); 
    CYRec.trSkipCom = StringToInt(ImportField); 
    CYRec.trDoNVTest = StringToInt(ImportField); 
    CYRec.VATLaw = StringToInt(ImportField); 
    CYRec.CharSet = StringToInt(ImportField); 
    CYRec.CountryCode = ImportField;
    CYRec.LangCode = ImportField;
  end;
  if (NextImportLine(true)==true) then begin    
    CYRec.DefaultPerStart = StringToDate(ImportField); 
    CYRec.DefaultPerEnd = StringToDate(ImportField); 
    CYRec.BankCode = ImportField;

    ModuleRec.FirstDate = StringToDate(ImportField); 
    ModuleRec.LastDate = StringToDate(ImportField); 
    BlockStore(ModuleRec);
  end;
  if (NextImportLine(true)==true) then begin
    CYRec.TRCheckCorsp = StringToInt(ImportField); 
    CYRec.HomeCommunity = ImportField;
    CYRec.OrgNr2 = ImportField;
    CYRec.TRSortObjs = StringToInt(ImportField); 
    CYRec.reportFontSize = StringToInt(ImportField); 
    CYRec.Object = ImportField;
    CYRec.emailAddr = ImportField;
    CYRec.wwwAddr = ImportField;
    CYRec.ANACode = ImportField;
    CYRec.Manager = ImportField;
    CYRec.ChiefAccountant = ImportField;
    CYRec.entryFont = ImportField;
    CYRec.reportFont = ImportField;
    CYRec.Addr3 = ImportField;
    CYRec.Addr4 = ImportField;
    CYRec.LineOfBusiness = ImportField;
    CYRec.DBEncoding = ImportField;
    CYRec.DefMailEncoding = ImportField;
  end;
  BlockStore(CYRec);
  return;
end;

global
updating procedure ReadImportTagCYBlock()
begin
  record CYBlock CYb;  

  if (NextImportLine(true)) then begin end;

  BlockLoad(CYb);
  CYb.CompName = ImportField;
  CYb.Addr0 = ImportField;
  CYb.Addr1 = ImportField;
  CYb.Addr2 = ImportField;
  CYb.Phone = ImportField;
  CYb.Fax = ImportField;
  CYb.OrgNr = ImportField;
  CYb.Bank1 = ImportField;
  CYb.Bank2 = ImportField;
  CYb.NS0[0] = StringToInt(ImportField);
  CYb.NS0[1] = StringToInt(ImportField);
  CYb.NS0[2] = StringToInt(ImportField);
  CYb.NS0[3] = StringToInt(ImportField);
  CYb.NS0[4] = StringToInt(ImportField);
  CYb.NS1[0] = StringToInt(ImportField);
  CYb.NS1[1] = StringToInt(ImportField);
  CYb.NS1[2] = StringToInt(ImportField);
  CYb.NS1[3] = StringToInt(ImportField);
  CYb.NS1[4] = StringToInt(ImportField);
  CYb.NS2[0] = StringToInt(ImportField);
  CYb.NS2[1] = StringToInt(ImportField);
  CYb.NS2[2] = StringToInt(ImportField);
  CYb.NS2[3] = StringToInt(ImportField);
  CYb.NS2[4] = StringToInt(ImportField);
  CYb.trSkipObj = StringToInt(ImportField);
  CYb.trSkipCom = StringToInt(ImportField);
  CYb.trDoNVTest = StringToInt(ImportField);
  CYb.ResAcc = ImportField;
  CYb.LYResAcc = ImportField;
  CYb.VATNr = ImportField;
  CYb.VATLaw = StringToInt(ImportField);
  CYb.CharSet = StringToInt(ImportField);
  CYb.entryFont = ImportField;
  CYb.reportFont = ImportField;
  CYb.DebCode = ImportField;
  CYb.CredCode = ImportField;
  CYb.skipOnNormDebCred = StringToInt(ImportField);
  CYb.warnOnAutOverWrite = StringToInt(ImportField);
  CYb.CalcResAcc = ImportField;
  CYb.beepWarnAuto = StringToInt(ImportField);
  CYb.usePrel = StringToInt(ImportField);
  CYb.DefaultPerStart = StringToDate(ImportField);
  CYb.BankCode = ImportField;
  CYb.DefaultPerEnd = StringToDate(ImportField);
  CYb.TRCheckCorsp = StringToInt(ImportField);
  CYb.HomeCommunity = ImportField;
  CYb.OrgNr2 = ImportField;
  CYb.CountryCode = ImportField;
  CYb.LangCode = ImportField;
  CYb.TRSortObjs = StringToInt(ImportField);
  CYb.reportFontSize = StringToInt(ImportField);
  CYb.Object = ImportField;
  CYb.emailAddr = ImportField;
  CYb.wwwAddr = ImportField;
  CYb.ANACode = ImportField;
  CYb.Manager = ImportField;
  CYb.ChiefAccountant = ImportField;
  CYb.Addr3 = ImportField;
  CYb.Addr4 = ImportField;
  CYb.LineOfBusiness = ImportField;
  CYb.DBEncoding = ImportField;
  CYb.DefMailEncoding = ImportField;
  CYb.CalculateRateDiff = StringToInt(ImportField);
  CYb.LockedLevel = StringToInt(ImportField);
  CYb.LockedBy = ImportField;
  CYb.AccInCompLang = StringToInt(ImportField);
  CYb.MirrorWindow = StringToInt(ImportField);
  CYb.NegativeAmounts = StringToInt(ImportField);
  CYb.AllowTransDateEdit = StringToInt(ImportField);
  CYb.BankName = ImportField;
  CYb.AddVATCodeToVATAccRows = StringToInt(ImportField);
  CYb.EInvoiceAccount = ImportField;
  CYb.TRWarnOnNonChronology = StringToInt(ImportField);
  CYb.EInvoiceAccount2 = ImportField;
  CYb.CompanyType = StringToInt(ImportField);
  CYb.TRBlockSubsytemRows = StringToInt(ImportField);
  CYb.UseTaxTemplatesforTaxCalc = StringToInt(ImportField);

  BlockStore(CYb);
  return;
end;

global
updating procedure ReadImportTagDownPayment()
begin
  record DownPayBlock DownPayRec;
  
  if (NextImportLine(true)) then begin end;
  DownPayRec.PayDeal = ImportField;
  DownPayRec.ArtCode = ImportField;
  DownPayRec.Percentage = StringToVal(ImportField,M4Val); 
  DownPayRec.CalcMode = StringToInt(ImportField); 
  if (NextImportLine(true)) then begin end;
  DownPayRec.TextA = ImportField;
  if (NextImportLine(true)) then begin end;
  DownPayRec.TextB = ImportField;
  if (NextImportLine(true)) then begin end;
  DownPayRec.TextC = ImportField;
  if (NextImportLine(true)) then begin end;
  DownPayRec.TextD = ImportField;
  if (NextImportLine(true)) then begin end;
  DownPayRec.ConnPrePayAndSalesOrder = StringToInt(ImportField);
  DownPayRec.VATCode = ImportField;
  BlockStore(DownPayRec);
  return;
end;

global
updating procedure ReadImportTagSalesCodes()
begin
  record SalesCodeBlock SalesCodeRec;
  row SalesCodeBlock SalesCoderw;
  Integer i,rwcnt;
  string 255 tstr;
  
  rwcnt = 0;
  while (NextImportLine(false)) begin
    ClearRow(SalesCodeRec,SalesCoderw,1);
    SalesCoderw.Code = ImportField;
    tstr = ImportField;
    tstr = ImportField;
    SalesCoderw.SalesAccDom = ImportField;
    SalesCoderw.SalesAccEU = ImportField;
    SalesCoderw.Comment = ImportField;
    tstr = ImportField;
    SalesCoderw.SalesAccExp = ImportField;
    if (blank(SalesCoderw.SalesAccExp)) then begin
      SalesCoderw.SalesAccExp = SalesCoderw.SalesAccEU;
    end;
    MatRowPut(SalesCodeRec,rwcnt,SalesCoderw);
    rwcnt = rwcnt + 1;
  end;
  BlockStore(SalesCodeRec);
  return;
end;

global
updating procedure ReadImportTagDateAndNumericFormat()
begin
  record SysFormatBlock SysFormatRec;

  if (NextImportLine(true)) then begin end;
  SysFormatRec.dateOrder = StringToInt(ImportField); 
  SysFormatRec.leadZday = StringToInt(ImportField); 
  SysFormatRec.leadZmonth = StringToInt(ImportField); 
  SysFormatRec.century = StringToInt(ImportField); 
  SysFormatRec.dateSep = ImportField;
  SysFormatRec.decimalPt = ImportField;
  SysFormatRec.thousSep = ImportField;
  if (blank(SysFormatRec.decimalPt)) then begin
    SysFormatRec.decimalPt = ".";
  end;
  if (blank(SysFormatRec.thousSep)) then begin
    SysFormatRec.thousSep = " ";
  end;
  BlockStore(SysFormatRec);
  return;
end;

global
updating procedure ReadImportTagStockSettings()
begin
  record MainStockBlock MainStockRec;
  record ItemSettingBlock ISTr;

  BlockLoad(ISTr);
  if (NextImportLine(true)) then begin end;
  MainStockRec.MainStock = ImportField;
  MainStockRec.dontAllowOvership = StringToInt(ImportField); 
  MainStockRec.requireLocation = StringToInt(ImportField); 
  ISTr.DefIGroup = ImportField;
  MainStockRec.DefServiceLoc = ImportField;
  MainStockRec.updateSVGM = StringToInt(ImportField); 
  MainStockRec.UpdateAvailable = StringToInt(ImportField); 
  ISTr.UniqueBarCode = StringToInt(ImportField); 
  ISTr.BestBefore = StringToInt(ImportField); 
  ISTr.ShowItemStatus = StringToInt(ImportField); 
  ISTr.BarCodeLength = StringToInt(ImportField); 
  MainStockRec.CalcFIFO = StringToInt(ImportField); 
  MainStockRec.Chronology = StringToInt(ImportField); 
  MainStockRec.LastOKNr = StringToVal(ImportField,M4Qty); 
  ISTr.DefItemType = 1;
  if (ISTr.BarCodeLength==1) then begin
    ISTr.BarCodeLength = 13;
  end;  
  BlockStore(ISTr);
  BlockStore(MainStockRec);
  return;
end;

global
updating procedure ReadImportTagWCToConfAlias()
begin
  record ConfAliasVc ConfAliasr;
  
  while (NextImportLine(false)) begin
    RecordNew(ConfAliasr);
    ConfAliasr.Code = ImportField;
    ConfAliasr.WebConf = ImportField;
    ConfAliasr.Comment = ImportField;
    ConfAliasr.MailQty = StringToLongInt(ImportField);
    if (RecordInsert(ConfAliasr,false)) then begin
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagReportDefinitions()
begin
  record RepDefBlock RepDefRec;
  row RepDefBlock RepDefrw;
  Integer i,rwcnt,rn;
  
  rwcnt = 0;
  while (NextImportLine(false)) begin
    ClearRow(RepDefRec,RepDefrw,1);
    RepDefrw.repname = ImportField;
    RepDefrw.shortname = ImportField;
    RepDefrw.header = ImportField;
    rn = StringToInt(RepDefrw.repname);
    switch (rn) begin
      case 37: RepDefrw.repname = "Key1Rn";
      case 38: RepDefrw.repname = "Key2Rn";
      case 39: RepDefrw.repname = "Key3Rn";
      case 40: RepDefrw.repname = "Key4Rn";
      case 41: RepDefrw.repname = "Key5Rn";
      case 42: RepDefrw.repname = "Bal1Rn";
      case 43: RepDefrw.repname = "Bal2Rn";
      case 44: RepDefrw.repname = "Bal3Rn";
      case 45: RepDefrw.repname = "Bal4Rn";
      case 46: RepDefrw.repname = "Bal5Rn";
      case 47: RepDefrw.repname = "Res1Rn";
      case 48: RepDefrw.repname = "Res2Rn";
      case 49: RepDefrw.repname = "Res3Rn";
      case 50: RepDefrw.repname = "Res4Rn";
      case 51: RepDefrw.repname = "Res5Rn";
    end;
    MatRowPut(RepDefRec,rwcnt,RepDefrw);
    rwcnt = rwcnt + 1;
  end;
  BlockStore(RepDefRec);
  return;
end;

global
updating procedure ReadImportTagAccountUsageLoan()
begin
  record CuAccBlock CuAccRec;
  row CuAccBlock CuAccrw;
  Integer i,rwcnt,rn;
  
  rwcnt = 0;
  while (NextImportLine(false)) begin
    ClearRow(CuAccRec,CuAccrw,1);
    CuAccrw.Comment = USetStr(1881);
    CuAccrw.InterestAcc = ImportField;
    CuAccrw.InstallmentAcc = ImportField;
    CuAccrw.TopayLoanAcc = ImportField;
    CuAccrw.TopayInterestAcc = ImportField;
    CuAccrw.TopayLoanDebAcc = ImportField;
    CuAccrw.TmpAcc = ImportField;
    CuAccrw.VATCode = ImportField;
    CuAccrw.CheckObj = StringToInt(ImportField); 
    CuAccrw.YearDays = StringToInt(ImportField); 
    CuAccrw.ARInstallmentAcc = ImportField;
    CuAccrw.ARInterestAcc = ImportField;
    MatRowPut(CuAccRec,rwcnt,CuAccrw);
    rwcnt = rwcnt + 1;    
  end;
  BlockStore(CuAccRec);
  return;
end;

global
function string 20 FindProperUserDefName(string shortname)
begin
  record RepDefBlock RepDefb;
  row RepDefBlock RepDefbrw;
  Integer i,rwcnt;
  string 20 res;
  
  res = shortname;
  BlockLoad(RepDefb);
  rwcnt = MatRowCnt(RepDefb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RepDefb,i,RepDefbrw);
    if (RepDefbrw.repname==shortname) then begin
      if (nonblank(RepDefbrw.shortname)) then begin
        res = RepDefbrw.shortname;
        i = rwcnt;
      end;
    end;
  end;
  FindProperUserDefName = res;
  return;
end;

updating procedure ImpNewKeyVat(string shortname,string critname,string defname,Integer type)
begin
  record UserDefRepVc UserDefRepr;
  record UserDefRepVc oldUserDefRepr;
  row UserDefRepVc UserDefReprw;
  Integer i;
  
  UserDefRepr.shortname = FindProperUserDefName(shortname);
  UserDefRepr.critname = critname;
  UserDefRepr.defname = defname;
  UserDefRepr.Type = type;
  switch (UserDefRepr.Type) begin
    case kUserDefRepKFR: UserDefRepr.repname = "KeyRn";
    case kUserDefRepVAT: UserDefRepr.repname = "VAT2Rn";
  end;
  while (NextImportLine(false)) begin
    UserDefReprw.Code = ImportField;
    UserDefReprw.Comment = ImportField;
    UserDefReprw.defstr = ImportField;
    UserDefReprw.DeclareBox = StringToInt(ImportField);
    MatRowPut(UserDefRepr,i,UserDefReprw);
    i = i + 1;
  end;
  RecordCopy(oldUserDefRepr,UserDefRepr);
  if (ReadFirstMain(oldUserDefRepr,1,true)==false) then begin
    if (RecordImportStore(UserDefRepr,false)) then begin
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagnyckel1(string thetag)
begin
  Integer oldbln;
  string 40 shortname;
  
  oldbln = StringToInt(ImportField);
  switch (oldbln) begin
    case 150: shortname = "KeyRn";
    case 164: shortname = "Key1Rn";
    case 165: shortname = "Key2Rn";
    case 166: shortname = "Key3Rn";
    case 167: shortname = "Key4Rn";
    case 168: shortname = "Key5Rn";
    case 355: shortname = "Key6Rn";
    case 356: shortname = "Key7Rn";
    case 357: shortname = "Key8Rn";
    case 358: shortname = "Key9Rn";
    case 359: shortname = "Key10Rn";
    case 360: shortname = "Key11Rn";
    case 361: shortname = "Key12Rn";
    case 362: shortname = "Key13Rn";
    case 363: shortname = "Key14Rn";
    case 364: shortname = "Key15Rn";
  end;
  ImpNewKeyVat(shortname,"KeyRClass","UserDefRepKeyDClass",kUserDefRepKFR);
  return;
end;

global
updating procedure ReadImportTagVAT2Block(string thetag)
begin
  ImpNewKeyVat("VAT2Rn","VATRClass","UserDefRepVATDClass",kUserDefRepVAT);
  return;
end;

global
updating procedure ReadImportTagmomsdef(string thetag)
begin
  ImpNewKeyVat("VAT2Rn","VATRClass","UserDefRepVATDClass",kUserDefRepVAT);
  return;
end;

global
updating procedure ReadImportTagKeyBlock(string thetag)
begin
  ImpNewKeyVat("KeyRn","KeyRClass","UserDefRepKeyDClass",kUserDefRepKFR);
  return;
end;

global
updating procedure ReadImportTagKey1Block(string thetag)
begin
  ImpNewKeyVat("Key1Rn","KeyRClass","UserDefRepKeyDClass",kUserDefRepKFR);
  return;
end;

global
updating procedure ReadImportTagKey2Block(string thetag)
begin
  ImpNewKeyVat("Key2Rn","KeyRClass","UserDefRepKeyDClass",kUserDefRepKFR);
  return;
end;

global
updating procedure ReadImportTagKey3Block(string thetag)
begin
  ImpNewKeyVat("Key3Rn","KeyRClass","UserDefRepKeyDClass",kUserDefRepKFR);
  return;
end;

global
updating procedure ReadImportTagKey4Block(string thetag)
begin
  ImpNewKeyVat("Key4Rn","KeyRClass","UserDefRepKeyDClass",kUserDefRepKFR);
  return;
end;

global
updating procedure ReadImportTagKey5Block(string thetag)
begin
  ImpNewKeyVat("Key5Rn","KeyRClass","UserDefRepKeyDClass",kUserDefRepKFR);
  return;
end;

global
updating procedure ReadImportTagKey6Block(string thetag)
begin
  ImpNewKeyVat("Key6Rn","KeyRClass","UserDefRepKeyDClass",kUserDefRepKFR);
  return;
end;

global
updating procedure ReadImportTagKey7Block(string thetag)
begin
  ImpNewKeyVat("Key7Rn","KeyRClass","UserDefRepKeyDClass",kUserDefRepKFR);
  return;
end;

global
updating procedure ReadImportTagKey8Block(string thetag)
begin
  ImpNewKeyVat("Key8Rn","KeyRClass","UserDefRepKeyDClass",kUserDefRepKFR);
  return;
end;

global
updating procedure ReadImportTagKey9Block(string thetag)
begin
  ImpNewKeyVat("Key9Rn","KeyRClass","UserDefRepKeyDClass",kUserDefRepKFR);
  return;
end;

global
updating procedure ReadImportTagKey10Block(string thetag)
begin
  ImpNewKeyVat("Key10Rn","KeyRClass","UserDefRepKeyDClass",kUserDefRepKFR);
  return;
end;

global
updating procedure ReadImportTagKey11Block(string thetag)
begin
  ImpNewKeyVat("Key11Rn","KeyRClass","UserDefRepKeyDClass",kUserDefRepKFR);
  return;
end;

global
updating procedure ReadImportTagKey12Block(string thetag)
begin
  ImpNewKeyVat("Key12Rn","KeyRClass","UserDefRepKeyDClass",kUserDefRepKFR);
  return;
end;

global
updating procedure ReadImportTagKey13Block(string thetag)
begin
  ImpNewKeyVat("Key13Rn","KeyRClass","UserDefRepKeyDClass",kUserDefRepKFR);
  return;
end;

global
updating procedure ReadImportTagKey14Block(string thetag)
begin
  ImpNewKeyVat("Key14Rn","KeyRClass","UserDefRepKeyDClass",kUserDefRepKFR);
  return;
end;

global
updating procedure ReadImportTagKey15Block(string thetag)
begin
  ImpNewKeyVat("Key15Rn","KeyRClass","UserDefRepKeyDClass",kUserDefRepKFR);
  return;
end;

updating procedure ImpNewKeyVatCol(string shortname)
begin
  record UserDefRepColumnsVc UserDefRepColumnsr;
  record UserDefRepColumnsVc oldUserDefRepColumnsr;
  row UserDefRepColumnsVc UserDefRepColumnsrw;
  Integer i;
  
  UserDefRepColumnsr.shortname = FindProperUserDefName(shortname);
  while (NextImportLine(false)) begin
    UserDefRepColumnsrw.Comment = ImportField;
    UserDefRepColumnsrw.ColType = StringToInt(ImportField);
    UserDefRepColumnsrw.PeriodType = StringToInt(ImportField);
    UserDefRepColumnsrw.PeriodOffset = StringToInt(ImportField);
    UserDefRepColumnsrw.PeriodLength = StringToInt(ImportField);
    UserDefRepColumnsrw.Objects = ImportField;
    UserDefRepColumnsrw.AddInfo = ImportField;
    UserDefRepColumnsrw.ColCode = i + 1;
    MatRowPut(UserDefRepColumnsr,i,UserDefRepColumnsrw);
    i = i + 1;
  end;
  RecordCopy(oldUserDefRepColumnsr,UserDefRepColumnsr);
  if (ReadFirstMain(oldUserDefRepColumnsr,1,true)==false) then begin
    if (RecordImportStore(UserDefRepColumnsr,false)) then begin
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagKeyColBlock(string thetag)
begin
  ImpNewKeyVatCol("KeyRn");
  return;
end;

global
updating procedure ReadImportTagKeyCol1Block(string thetag)
begin
  ImpNewKeyVatCol("Key1Rn");
  return;
end;

global
updating procedure ReadImportTagKeyCol2Block(string thetag)
begin
  ImpNewKeyVatCol("Key2Rn");
  return;
end;

global
updating procedure ReadImportTagKeyCol3Block(string thetag)
begin
  ImpNewKeyVatCol("Key3Rn");
  return;
end;

global
updating procedure ReadImportTagKeyCol4Block(string thetag)
begin
  ImpNewKeyVatCol("Key4Rn");
  return;
end;

global
updating procedure ReadImportTagKeyCol5Block(string thetag)
begin
  ImpNewKeyVatCol("Key5Rn");
  return;
end;

global
updating procedure ReadImportTagKeyCol6Block(string thetag)
begin
  ImpNewKeyVatCol("Key6Rn");
  return;
end;

global
updating procedure ReadImportTagKeyCol7Block(string thetag)
begin
  ImpNewKeyVatCol("Key7Rn");
  return;
end;

global
updating procedure ReadImportTagKeyCol8Block(string thetag)
begin
  ImpNewKeyVatCol("Key8Rn");
  return;
end;

global
updating procedure ReadImportTagKeyCol9Block(string thetag)
begin
  ImpNewKeyVatCol("Key9Rn");
  return;
end;

global
updating procedure ReadImportTagKeyCol10Block(string thetag)
begin
  ImpNewKeyVatCol("Key10Rn");
  return;
end;

global
updating procedure ReadImportTagKeyCol11Block(string thetag)
begin
  ImpNewKeyVatCol("Key11Rn");
  return;
end;

global
updating procedure ReadImportTagKeyCol12Block(string thetag)
begin
  ImpNewKeyVatCol("Key12Rn");
  return;
end;

global
updating procedure ReadImportTagKeyCol13Block(string thetag)
begin
  ImpNewKeyVatCol("Key13Rn");
  return;
end;

global
updating procedure ReadImportTagKeyCol14Block(string thetag)
begin
  ImpNewKeyVatCol("Key14Rn");
  return;
end;

global
updating procedure ReadImportTagKeyCol15Block(string thetag)
begin
  ImpNewKeyVatCol("Key15Rn");
  return;
end;

updating procedure ChangeAllUserDef(string repname,string shortname)
begin
  record UserDefRepVc UserDefRepr;
  record UserDefRepVc oldUserDefRepr;
  record UserDefRepLinesVc UserDefRepLinesr;
  record UserDefRepLinesVc oldUserDefRepLinesr;
  record UserDefRepColumnsVc UserDefRepColumnsr;
  record UserDefRepColumnsVc oldUserDefRepColumnsr;
  Boolean foundf;
  
  foundf = true;
  UserDefRepr.shortname = repname;
  while (LoopMain(UserDefRepr,1,foundf)) begin
    if (UserDefRepr.shortname!=repname) then begin
      foundf = false;
    end;
    if (foundf) then begin
      RecordCopy(oldUserDefRepr,UserDefRepr);
      UserDefRepr.shortname = shortname;
      if (RecordUpdate(oldUserDefRepr,UserDefRepr,false)) then begin
      end;
      StepBack(UserDefRepr);
    end;
  end;
  foundf = true;
  UserDefRepLinesr.shortname = repname;
  while (LoopMain(UserDefRepLinesr,1,foundf)) begin
    if (UserDefRepLinesr.shortname!=repname) then begin
      foundf = false;
    end;
    if (foundf) then begin
      RecordCopy(oldUserDefRepLinesr,UserDefRepLinesr);
      UserDefRepLinesr.shortname = shortname;
      if (RecordUpdate(oldUserDefRepLinesr,UserDefRepLinesr,false)) then begin
      end;
      StepBack(UserDefRepLinesr);
    end;
  end;
  foundf = true;
  UserDefRepColumnsr.shortname = repname;
  while (LoopMain(UserDefRepColumnsr,1,foundf)) begin
    if (UserDefRepColumnsr.shortname!=repname) then begin
      foundf = false;
    end;
    if (foundf) then begin
      RecordCopy(oldUserDefRepColumnsr,UserDefRepColumnsr);
      UserDefRepColumnsr.shortname = shortname;
      if (RecordUpdate(oldUserDefRepColumnsr,UserDefRepColumnsr,false)) then begin
      end;
      StepBack(UserDefRepColumnsr);
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagRepDefBlock(string thetag)
begin
  record RepDefBlock RepDefb;
  row RepDefBlock RepDefbrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    RepDefbrw.repname = ImportField;
    RepDefbrw.shortname = ImportField;
    RepDefbrw.header = ImportField;
    ChangeAllUserDef(RepDefbrw.repname,RepDefbrw.shortname);
    MatRowPut(RepDefb,i,RepDefbrw);
    i = i + 1;
  end;
  BlockStore(RepDefb);
  return;
end;

global
updating procedure ReadImportTagRepDefBlock2(string thetag)
begin
  record RepDefBlock RepDefb;
  row RepDefBlock RepDefbrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    RepDefbrw.repname = ImportField;
    RepDefbrw.shortname = ImportField;
    RepDefbrw.header = ImportField;
    MatRowPut(RepDefb,i,RepDefbrw);
    i = i + 1;
  end;
  BlockStore(RepDefb);
  return;
end;

global
updating procedure ReadImportTagbets_tt1(string thetag)
begin
  ImportBlock("PMBlock");
  return;
end;

global
updating procedure ReadImportTagfaktr_nta1(string thetag)
begin
  ImportBlock("PMBlock");
  return;
end;

global
updating procedure ReadImportTagf_retag1(string thetag)
begin
  record CYBlock CompYear;

  BlockLoad(CompYear);
  if (NextImportLine(true)) then begin end;
  CompYear.CompName = ImportField;
  CompYear.Addr0 = ImportField;
  CompYear.Addr1 = ImportField;
  CompYear.Addr2 = ImportField;
  CompYear.Phone = ImportField;
  CompYear.Fax = ImportField;
  CompYear.OrgNr = ImportField;
  CompYear.Bank1 = ImportField;
  CompYear.Bank2 = ImportField;
  if (NextImportLine(true)) then begin end;
  BlockStore(CompYear);
  return;
end;

global
updating procedure ReadImportTaglevSR1(string thetag)
begin
  record SRBlock SRRec;
  string 255 tstr;

  BlockLoad(SRRec);
  if (NextImportLine(true)) then begin end;
  tstr = ImportField;
  if (nonblank(tstr)) then begin
    SRRec.LastTrVINr = StringToLongInt(tstr);
  end else begin
    SRRec.LastTrVINr = -1;
  end;
  tstr = ImportField;
  if (nonblank(tstr)) then begin
    SRRec.LastOPNr = StringToLongInt(tstr);
  end else begin
    SRRec.LastOPNr = -1;
  end;
  tstr = ImportField;
  if (nonblank(tstr)) then begin
    SRRec.LastVINr = StringToLongInt(tstr);
  end else begin
    SRRec.LastVINr = -1;
  end;
  tstr = ImportField;
  if (nonblank(tstr)) then begin
    SRRec.LastTrOPNr = StringToLongInt(tstr);
  end else begin
    SRRec.LastTrOPNr = -1;
  end;
  SRRec.LastVECode = ImportField;
  SRRec.LastInvDate = StringToDate(ImportField); 
  if (NextImportLine(true)) then begin end;
  BlockStore(SRRec);
  return;
end;

global
updating procedure ReadImportTagserier1(string thetag)
begin
  record SRBlock SRRec;
  string 255 tstr;

  BlockLoad(SRRec);
  if (NextImportLine(true)) then begin end;
  tstr = ImportField;
  if (nonblank(tstr)) then begin
    SRRec.LastOrdNr = StringToLongInt(tstr);
  end else begin
    SRRec.LastOrdNr = -1;
  end;
  if (NextImportLine(true)) then begin end;
  tstr = ImportField;
  if (nonblank(tstr)) then begin
    SRRec.LastShipNr = StringToLongInt(tstr);
  end else begin
    SRRec.LastShipNr = -1;
  end;
  if (NextImportLine(true)) then begin end;
  tstr = ImportField;
  if (nonblank(tstr)) then begin
    SRRec.LastInvNr = StringToLongInt(tstr);
  end else begin
    SRRec.LastInvNr = -1;
  end;
  if (NextImportLine(true)) then begin end;
  tstr = ImportField;
  if (nonblank(tstr)) then begin
    SRRec.LastPurNr = StringToLongInt(tstr);
  end else begin
    SRRec.LastPurNr = -1;
  end;
  if (NextImportLine(true)) then begin end;
  tstr = ImportField;
  if (nonblank(tstr)) then begin
    SRRec.LastPayNr = StringToLongInt(tstr);
  end else begin
    SRRec.LastPayNr = -1;
  end;
  if (NextImportLine(true)) then begin end;
  tstr = ImportField;
  if (nonblank(tstr)) then begin
    SRRec.LastTrInvNr = StringToLongInt(tstr);
  end else begin
    SRRec.LastTrInvNr = -1;
  end;
  if (NextImportLine(true)) then begin end;
  tstr = ImportField;
  if (nonblank(tstr)) then begin
    SRRec.LastIntNr = StringToLongInt(tstr);
  end else begin
    SRRec.LastIntNr = -1;
  end;  
  if (NextImportLine(true)) then begin end;
  BlockStore(SRRec);
  return;
end;

global
updating procedure ReadImportTagSMS()
begin
  record BAJobBlock BAJobb;
  record BASHBlock BASHb;
  record BAORBlock BAORb;
  
  BASHb.SMS = StringToInt(ImportField);
  BASHb.LTxtCode = ImportField;
  BASHb.CClass = ImportField;
  BlockStore(BASHb);

  BAORb.SMS = StringToInt(ImportField);
  BAORb.LTxtCode = ImportField;
  BAORb.CClass = ImportField;
  BAORb.ORClass = ImportField;
  BlockStore(BAORb);

  BAJobb.SMS = StringToInt(ImportField);
  BAJobb.LTxtCode = ImportField;
  BAJobb.ResStatus = ImportField;
  BlockStore(BAJobb);
  return;
end;

global
updating procedure ReadImportTagroundoff()
begin
  record RoundBlock Rb;
  record DefValDecimalsBlock DVDb;
  
  BlockLoad(DVDb);
  BlockLoad(Rb);
  if (NextImportLine(true)) then begin end;
  Rb.RndTotal = StringToInt(ImportField);
  Rb.RndVat = StringToInt(ImportField);
  Rb.RndFIFO = StringToInt(ImportField);
  Rb.Discount = StringToInt(ImportField);
  Rb.VATCalcWay = StringToInt(ImportField);

  Rb.RndDefaultDecs = DVDb.DefaultValDecimals;
  if (Rb.RndDefaultDecs<0) then begin
    Rb.RndDefaultDecs = 2;
  end;
  Rb.RndDefaultStep = kRoundingStepNone;
  if (Rb.RndDefaultDecs==10) then begin
    Rb.RndDefaultDecs = 2;
    Rb.RndDefaultStep = kRoundingStep5;
  end;
  Rb.RndDefaultMode = kRoundingModeHalfUp;
  Rb.RndDefaultDirec = kRoundingDirectionToFromPosInf;

  Rb.RndDefaultCurDecs = DVDb.DefaultCurRoundOff;
  if (Rb.RndDefaultCurDecs<0) then begin
    Rb.RndDefaultCurDecs = 2;
  end;
  Rb.RndDefaultCurStep = kRoundingStepNone;
  if (Rb.RndDefaultDecs==10) then begin
    Rb.RndDefaultCurDecs = 2;
    Rb.RndDefaultCurStep = kRoundingStep5;
  end;
  Rb.RndDefaultCurMode = kRoundingModeHalfUp;
  Rb.RndDefaultCurDirec = kRoundingDirectionToFromPosInf;

  Rb.RndTotalDecs = Rb.RndTotal;
  Rb.RndTotalStep = kRoundingStepNone;
  if (Rb.RndTotal==10) then begin
    Rb.RndTotalDecs = 2;
    Rb.RndTotalStep = kRoundingStep5;
  end;
  Rb.RndTotalMode = kRoundingModeHalfUp;
  Rb.RndTotalDirec = kRoundingDirectionToFromPosInf;
  
  Rb.RndVATDecs = Rb.RndVat;
  Rb.RndVATStep = kRoundingStepNone;
  if (Rb.RndVat==10) then begin
    Rb.RndVATDecs = 2;
    Rb.RndVATStep = kRoundingStep5;
  end;
  Rb.RndVATMode = kRoundingModeHalfUp;
  Rb.RndVATDirec = kRoundingDirectionToFromPosInf;

  Rb.RndCostDecs = Rb.RndFIFO;
  Rb.RndCostStep = kRoundingStepNone;
  if (Rb.RndFIFO==10) then begin
    Rb.RndCostDecs = 2;
    Rb.RndCostStep = kRoundingStep5;
  end;
  Rb.RndCostMode = kRoundingModeHalfUp;
  Rb.RndCostDirec = kRoundingDirectionToFromPosInf;

  Rb.RndRowsumDecs = 2;
  Rb.RndRowsumStep = kRoundingStepNone;
  Rb.RndRowsumMode = kRoundingModeHalfUp;
  Rb.RndRowsumDirec = kRoundingDirectionToFromPosInf;
  
  BlockStore(Rb);
  return;
end;

global
updating procedure ReadImportTagCurncyRoundOffBlock()
begin
  Integer rwcnt;
  record CurncyRoundOffBlock CROb;
  row CurncyRoundOffBlock CRObrw;
  
  rwcnt = 0;
  while (NextImportLine(false)) begin
    ClearRow(CROb,CRObrw,1);
    CRObrw.CurncyCode = ImportField;
    CRObrw.RndTotal = StringToInt(ImportField);
    CRObrw.RndLine = StringToInt(ImportField);
    CRObrw.RndVAT = StringToInt(ImportField);
    CRObrw.PayDeal = ImportField;
    
    CRObrw.RndTotalDecs = CRObrw.RndTotal;
    CRObrw.RndTotalStep = kRoundingStepNone;
    if (CRObrw.RndTotal==10) then begin
      CRObrw.RndTotalDecs = 2;
      CRObrw.RndTotalStep = kRoundingStep5;
    end;
    CRObrw.RndTotalMode = kRoundingModeHalfUp;
    CRObrw.RndTotalDirec = kRoundingDirectionToFromPosInf;

    CRObrw.RndVATDecs = CRObrw.RndVAT;
    CRObrw.RndVATStep = kRoundingStepNone;
    if (CRObrw.RndVAT==10) then begin
      CRObrw.RndVATDecs = 2;
      CRObrw.RndVATStep = kRoundingStep5;
    end;
    CRObrw.RndVATMode = kRoundingModeHalfUp;
    CRObrw.RndVATDirec = kRoundingDirectionToFromPosInf;

    CRObrw.RndRowsumDecs = CRObrw.RndLine;
    CRObrw.RndRowsumStep = kRoundingStepNone;
    if (CRObrw.RndLine==10) then begin
      CRObrw.RndRowsumDecs = 2;
      CRObrw.RndRowsumStep = kRoundingStep5;
    end;
    CRObrw.RndRowsumMode = kRoundingModeHalfUp;
    CRObrw.RndRowsumDirec = kRoundingDirectionToFromPosInf;
    
    MatRowPut(CROb,rwcnt,CRObrw);
    rwcnt = rwcnt + 1;
  end;
  BlockStore(CROb);
  return;
end;
