external procedure ReadImportTagartikel3Record_(record INVc);
external procedure ReadImportTagIVCashVcOrigRecord(record IVCashVc);
external procedure ReadImportTagQualConVcRecordRead(record QualConVc);
external procedure ReadImportTagactvc2Record(record ActVc);
external procedure ReadImportTagUnivTestAnswerRecord(record UnivTestAnswerVc);
external procedure ReadImportTagEDIInvoicesRecord(record EDIIVVc);
external procedure ReadImportTagRestBookingVcRecordRead(record RestBookingVc);
external procedure ReadImportTagResAvVcRecordRead(record ResAvVc);
external procedure ReadImportTagAgreeTypeVcRecordRead(var record AgreeTypeVc);
external procedure ReadImportTagBudgetQuotationRecord(record BUQTVc);
external procedure ReadImportTagCashierBalRecord(record CashierBalVc);
external function Integer ReadImportTagkgrupp2RecordRead(record UserDefRepLinesVc,var Boolean);
external function Integer ReadImportTagkgrupp3Record(record UserDefRepLinesVc,var Boolean);
external procedure ReadImportTagcloutRecordRead(record CLOutVc);
external procedure ReadImportTagclinRecordRead(record CLInVc);

external function Boolean PasteCustInQT(var record QTVc,string,string,var string,Boolean);
external procedure QTSumup(var record QTVc);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external procedure GetItemSalesAcc(string,Integer,var string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetBaseCurncy(Integer,var string);
external procedure CheckFlush(var Integer,Integer);

global
updating procedure ReadImportTagclin(string thetag)
begin
  record CLInVc CLInr;
  record CLInVc oldCLInr;
  Integer cnt;

  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);

    ReadImportTagclinRecordRead(CLInr);
    oldCLInr.SerNr = CLInr.SerNr;
    if (ReadFirstMain(oldCLInr,1,true)) then begin
    end else begin
      if (RecordImportStore(CLInr,false)) then begin end;
    end;

  end;
  return;
end;

global
updating procedure ReadImportTagclout(string thetag)
begin
  record CLOutVc CLOutr;
  record CLOutVc oldCLOutr;
  Integer cnt;

  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);

    ReadImportTagcloutRecordRead(CLOutr);
    oldCLOutr.SerNr = CLOutr.SerNr;
    if (ReadFirstMain(oldCLOutr,1,true)) then begin
    end else begin
      if (RecordImportStore(CLOutr,false)) then begin end;
    end;

  end;
  return;
end;

updating procedure StoreUserDefRepLinesVc(record UserDefRepLinesVc UserDefRepLinesr,string shortname)
begin
  if (UserDefRepLinesr.IdKey!=0) then begin
    UserDefRepLinesr.shortname = shortname;
    if (RecordImportStore(UserDefRepLinesr,false)) then begin end;
  end;
  return;
end;

global
updating procedure ReadImportTagkgrupp3(string tag)
begin
  record UserDefRepLinesVc UserDefRepLinesr;
  Integer cnt;
  Boolean firstrow;

  firstrow = true;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);

    switch (ReadImportTagkgrupp3Record(UserDefRepLinesr,firstrow)) begin
      case  0: StoreUserDefRepLinesVc(UserDefRepLinesr,"BalRn");
      case  1: StoreUserDefRepLinesVc(UserDefRepLinesr,"ResRn");
      case 25: StoreUserDefRepLinesVc(UserDefRepLinesr,"BalRn");
      case 26: StoreUserDefRepLinesVc(UserDefRepLinesr,"ResRn");
      case 34: StoreUserDefRepLinesVc(UserDefRepLinesr,"Bal1Rn");
      case 35: StoreUserDefRepLinesVc(UserDefRepLinesr,"Bal2Rn");
      case 36: StoreUserDefRepLinesVc(UserDefRepLinesr,"Bal3Rn");
      case 37: StoreUserDefRepLinesVc(UserDefRepLinesr,"Bal4Rn");
      case 38: StoreUserDefRepLinesVc(UserDefRepLinesr,"Bal5Rn");
      case 39: StoreUserDefRepLinesVc(UserDefRepLinesr,"Res1Rn");
      case 40: StoreUserDefRepLinesVc(UserDefRepLinesr,"Res2Rn");
      case 41: StoreUserDefRepLinesVc(UserDefRepLinesr,"Res3Rn");
      case 42: StoreUserDefRepLinesVc(UserDefRepLinesr,"Res4Rn");
      case 43: StoreUserDefRepLinesVc(UserDefRepLinesr,"Res5Rn");
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagkgrupp2(string thetag)
begin
  record UserDefRepLinesVc UserDefRepLinesr;
  Boolean firstrow;
  Integer cnt;

  firstrow = true;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);

    switch (ReadImportTagkgrupp2RecordRead(UserDefRepLinesr,firstrow)) begin
      case  0: StoreUserDefRepLinesVc(UserDefRepLinesr,"BalRn");
      case  1: StoreUserDefRepLinesVc(UserDefRepLinesr,"ResRn");
      case 25: StoreUserDefRepLinesVc(UserDefRepLinesr,"BalRn");
      case 26: StoreUserDefRepLinesVc(UserDefRepLinesr,"ResRn");
      case 34: StoreUserDefRepLinesVc(UserDefRepLinesr,"Bal1Rn");
      case 35: StoreUserDefRepLinesVc(UserDefRepLinesr,"Bal2Rn");
      case 36: StoreUserDefRepLinesVc(UserDefRepLinesr,"Bal3Rn");
      case 37: StoreUserDefRepLinesVc(UserDefRepLinesr,"Bal4Rn");
      case 38: StoreUserDefRepLinesVc(UserDefRepLinesr,"Bal5Rn");
      case 39: StoreUserDefRepLinesVc(UserDefRepLinesr,"Res1Rn");
      case 40: StoreUserDefRepLinesVc(UserDefRepLinesr,"Res2Rn");
      case 41: StoreUserDefRepLinesVc(UserDefRepLinesr,"Res3Rn");
      case 42: StoreUserDefRepLinesVc(UserDefRepLinesr,"Res4Rn");
      case 43: StoreUserDefRepLinesVc(UserDefRepLinesr,"Res5Rn");
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagCashierBal()
begin
  record CashierBalVc CashierBalr;
  record CashierBalVc CashierBal2r;
  Integer cnt;

  RecordNew(CashierBalr);
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);

    ReadImportTagCashierBalRecord(CashierBalr);
    if (RecordImportStore(CashierBalr,false)) then begin end;
  end;
  return;
end;

updating procedure CreateQTFromBUQT(record BUQTVc BUQTr)
begin
  record NotepadVc Noter;
  record QTVc QTr;
  record QTVc oldQTr;
  row QTVc QTrw;
  row BUQTVc BUQTrw;
  string 255 tstr;
  Integer i,rwcnt;
  Integer companynr;
  val fr,to1,to2,br1,br2;

  RecordNew(QTr);
  
  QTr.QTDate = BUQTr.TransDate;
  QTr.CustCode = BUQTr.CustCode;
  if (PasteCustInQT(QTr,QTr.CustCode,"",tstr,true)) then begin end;  
  GetBaseCurncy(1,tstr);
  QTr.CurncyCode = tstr;
  GetFullCurncyRate(QTr.CurncyCode,QTr.QTDate,fr,to1,to2,br1,br2);
  QTr.FrRate = fr;
  QTr.ToRateB1 = to1;
  QTr.ToRateB2 = to2;  
  QTr.BaseRate1 = br1;
  QTr.BaseRate2 = br2;  
  QTr.SalesMan = BUQTr.SalesMan;
  QTr.Sign = BUQTr.SalesMan;
  QTr.LangCode = BUQTr.LangCode;
  QTr.InvoiceToCode = "";
  QTr.Closed = 0;
  QTr.BuildOn = 0;
  QTr.PRCode = BUQTr.PRCode;
  QTr.Comment = BUQTr.Comment;
  QTr.PriceList = "";
  QTr.RebCode = "";
  QTr.Rejected = BUQTr.Rejected;
  QTr.RejectDate = BUQTr.RejectDate;
  QTr.Markup = BUQTr.Markup;
  QTr.BudTime = BUQTr.BudTime;
  QTr.SumTime = BUQTr.SumTime;
  QTr.BudOther = BUQTr.BudOther;
  QTr.SumOther = BUQTr.SumOther;
  QTr.BudStocked = BUQTr.BudStocked;
  QTr.SumStocked = BUQTr.SumStocked;
  QTr.BudMaterial = BUQTr.BudMaterial;
  QTr.SumMaterial = BUQTr.SumMaterial;
  rwcnt = MatRowCnt(BUQTr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(BUQTr,i,BUQTrw);
    ClearRow(QTr,QTrw,1);
    QTrw.ArtCode = BUQTrw.ArtCode;
    QTrw.Quant = BUQTrw.Qty;
    QTrw.Price = BUQTrw.Price;
    QTrw.Sum = BUQTrw.Sum;
    QTrw.vRebate = BUQTrw.Discount;
    GetItemSalesAcc(QTrw.ArtCode,QTr.ExportFlag,tstr);
    QTrw.SalesAcc = tstr;
    QTrw.Objects = BUQTrw.Objects;
    QTrw.BasePrice = blankval;
    QTrw.rowGP = blankval;
    GetItemVATCode(QTrw.ArtCode,QTr.ExportFlag,tstr,false);
    QTrw.VATCode = tstr;
    QTrw.Spec = BUQTrw.Comment;
    QTrw.Recepy = BUQTrw.Recepy;
    QTrw.EMCode = BUQTrw.EMCode;
    QTrw.Markup = BUQTrw.Markup;
    QTrw.TimeClass = BUQTrw.TimeClass;
    QTrw.InvAfter = BUQTrw.InvAfter;
    QTrw.Invoiced = BUQTrw.Invoiced;
    QTrw.InvDate = BUQTrw.InvDate;
    QTrw.ItemType = BUQTrw.ItemType;
    QTrw.RowType = BUQTrw.RowType;
    QTrw.BudType = BUQTrw.BudType;
    MatRowPut(QTr,i,QTrw);
  end;    
  QTSumup(QTr);
  QTr.SerNr = NextSerNr("QTVc",QTr.QTDate,-1,false,"");  
  oldQTr.SerNr = QTr.SerNr;
  if (ReadFirstMain(oldQTr,1,true)==false) then begin  
    if (RecordImportStore(QTr,false)) then begin end;
    CopyRecordLinks(BUQTr,QTr);
    
    RecordNew(Noter);  
    rwcnt = LineTextCnt(BUQTr);
    for (i=0;i<rwcnt;i=i+1) begin
      tstr = LineTextGet(BUQTr,i);
      LineTextPut(Noter,i,tstr);      
    end;  
    if (RecordStore(Noter,false)) then begin
      CreateRecordLink(Noter,CurrentCompany,QTr,CurrentCompany);  
      CreateRecordLink(QTr,CurrentCompany,Noter,CurrentCompany);  
    end;

    RecordNew(Noter);
    rwcnt = 0;
    LineTextPut(Noter,rwcnt,BUQTr.Text0);      
    rwcnt = rwcnt + 1;
    LineTextPut(Noter,rwcnt,BUQTr.Text1);      
    rwcnt = rwcnt + 1;
    LineTextPut(Noter,rwcnt,BUQTr.Text2);      
    rwcnt = rwcnt + 1;
    LineTextPut(Noter,rwcnt,BUQTr.Text3);      
    rwcnt = rwcnt + 1;
    LineTextPut(Noter,rwcnt,BUQTr.Text4);      
    rwcnt = rwcnt + 1;
    LineTextPut(Noter,rwcnt,BUQTr.Text5);      
    rwcnt = rwcnt + 1;
    LineTextPut(Noter,rwcnt,BUQTr.Text6);      
    rwcnt = rwcnt + 1;
    LineTextPut(Noter,rwcnt,BUQTr.Text7);      
    rwcnt = rwcnt + 1;
    LineTextPut(Noter,rwcnt,BUQTr.Text8);      
    rwcnt = rwcnt + 1;
    LineTextPut(Noter,rwcnt,BUQTr.Text9);
    rwcnt = rwcnt + 1;
    if (RecordStore(Noter,false)) then begin
      CreateRecordLink(Noter,CurrentCompany,QTr,CurrentCompany);  
      CreateRecordLink(QTr,CurrentCompany,Noter,CurrentCompany);  
    end;
  end;  
  return;
end;

global
updating procedure ReadImportTagBudgetQuotation()
BEGIN
  record BUQTVc BUQTr;
  Integer cnt;

  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);

    ReadImportTagBudgetQuotationRecord(BUQTr);
//NO STORING, WE CREATE QTVC INSTEAD
    CreateQTFromBUQT(BUQTr);
  end;
  RETURN;
END;

global
updating procedure ReadImportTagResAvVc(string thetag)
begin
  Integer cnt;
  record ResAvVc ResAvr;
  record ResAvVc ResAv2r;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);

    ReadImportTagResAvVcRecordRead(ResAvr);
    ResAv2r.SerNr = ResAvr.SerNr;
    if (ReadFirstMain(ResAv2r,1,true)) then begin
//      if (RecordUpdate(ResAv2r,ResAvr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(ResAvr,false)) then begin end;
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagAgreeTypeVc(string thetag)
begin
  Integer cnt;
  record AgreeTypeVc AgreeTyper;
  record AgreeTypeVc AgreeType2r;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagAgreeTypeVcRecordRead(AgreeTyper);
    AgreeType2r.Code = AgreeTyper.Code;
    if (ReadFirstMain(AgreeType2r,1,true)) then begin
//      if (RecordUpdate(AgreeType2r,AgreeTyper,false)==0) then begin end;
    end else begin
      if (RecordImportStore(AgreeTyper,false)) then begin end;
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagRestBookingVc(string thetag)
begin
  Integer cnt;
  record RestBookingVc RestBookingr;
  record RestBookingVc RestBooking2r;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);

    ReadImportTagRestBookingVcRecordRead(RestBookingr);
    RestBooking2r.SerNr = RestBookingr.SerNr;
    if (ReadFirstMain(RestBooking2r,1,true)) then begin
//      if (RecordUpdate(RestBooking2r,RestBookingr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(RestBookingr,false)) then begin end;
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagEDIInvoices()
begin
  record EDIIVVc EDIIVr;
  record EDIIVVc EDIIV2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
   
    ReadImportTagEDIInvoicesRecord(EDIIVr);
    EDIIV2r.SerNr = EDIIVr.SerNr;
    if (ReadFirstMain(EDIIV2r,1,true)) then begin
//      if (RecordUpdate(EDIIV2r,EDIIVr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(EDIIVr,false)) then begin end;
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagUnivTestAnswerVc()
begin
  record UnivTestAnswerVc UTAr;

  while (NextImportLine(false)) begin
    ReadImportTagUnivTestAnswerRecord(UTAr);
    if (RecordImportStore(UTAr,false)) then begin end;
  end;
  return;
end;

global
updating procedure ReadImportTagactvc2()
begin
  record ActVc Actr;
  
  while (NextImportLine(false)) begin
    ReadImportTagactvc2Record(Actr);
    if (RecordImportStore(Actr,false)) then begin end;
  end;
  
  return;
end;

global
updating procedure ReadImportTagQualConVc(string thetag)
begin
  record QualConVc QCr;
  record QualConVc oldQCr;
  Integer cnt;

  while (NextImportLine(false)) begin
    ReadImportTagQualConVcRecordRead(QCr);
    oldQCr.SerNr = QCr.SerNr;
    if (ReadFirstMain(oldQCr,1,true)==false) then begin
      if (RecordImportStore(QCr,false)) then begin end;
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagIVCashVc(string thetag)
begin
  record IVCashVc IVCashr;
  record IVCashVc IVCash2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagIVCashVcOrigRecord(IVCashr);
    IVCash2r.SerNr = IVCash2r.SerNr;
    if (ReadFirstMain(IVCash2r,1,true)) then begin
//      if (RecordUpdate(IVCash2r,IVCashr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(IVCashr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
updating procedure ReadImportTagartikel3(string thetag)
begin
  record INVc INr;
  record INVc IN2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagartikel3Record_(INr);
    IN2r.Code = INr.Code;
    if (ReadFirstMain(IN2r,1,true)) then begin
//      if (RecordUpdate(IN2r,INr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(INr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
updating procedure ReadImportTagGCRVcs(Integer ver)
begin
  record GCRVc GCRr;
  record GCRVc GCR2r;
  record GCSVc GCSr;
  record GCSVc oldGCSr;

  while (NextImportLine(false)) begin
    RecordClear(GCRr);
    GCRr.SerNr = StringToLongInt(ImportField);
    GCRr.TransDate = StringToDate(ImportField);
    GCRr.Amount = StringToVal(ImportField,M4Val);
    GCRr.Comment = ImportField;
    GCRr.ExpiryDate = StringToDate(ImportField);
    GCRr.BarCode = ImportField;
    GCRr.InvSerNr = StringToLongInt(ImportField);
    GCRr.FileName = "IVVc";
    if (ReadFirstMain(GCR2r,2,true)) then begin
//      if (RecordUpdate(GCR2r,GCRr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(GCRr,false)) then begin 
        GCSr.SerNr = GCRr.SerNr;
        if (ReadFirstMain(GCSr,1,true)) then begin
          RecordCopy(oldGCSr,GCSr);
          GCSr.Balance = GCSr.Balance - GCRr.Amount;
          RecordUpdate(oldGCSr,GCSr,true);
        end;
      end;
    end;
  end;
  return;
end;
