external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure ReadImportTagDprModsRecord(record DprModVc);
external procedure ReadImportTagTimeSheetRecord(record TSVc);
external procedure ReadImportTagSuppliersRecord(record VEVc);
external procedure ReadImportTagVarietiesRecord(record VARVc);
external procedure ReadImportTagUnitsRecord(record UnitVc);
external procedure ReadImportTagShipDealsRecord(record ShipDealVc);
external procedure ReadImportTagProj2Record(record PRVc);
external procedure ReadImportTagAssetsRecord(record ATVc);

external procedure CheckFlush(var Integer,Integer);
external updating procedure ReadImportTagActivities();
external updating procedure ReadImportTagAccounts();
external updating procedure ReadImportTagAttachments();
external updating procedure ReadImportTagPurchaseOrders();
external updating procedure ReadImportTagSimulations();
external updating procedure ReadImportTagOrders();
external updating procedure ReadImportTagPayments();
external updating procedure ReadImportTagInvoices();
external updating procedure ReadImportTagReceipts(Integer);
external procedure FindUserMailboxName(string,var string,var string);
external function Integer DateGetIntMonth(Date);
external procedure FindFiscalYear(Date,var Date,var Date);
external procedure Bud2Sumup(var record Bud2Vc);
external procedure BFSumup(var record BFVc);

global
procedure ReadImportTagAccessGroupsRecord(record AccessVc Accessr)
begin
  RecordNew(Accessr);        
  Accessr.Code = ImportField;
  return;
end;

updating procedure ReadImportTagAccessGroups()
begin
  record AccessVc Accessr;
  record AccessVc Access2r;
  Integer cnt;
  
  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagAccessGroupsRecord(Accessr);
    
    Access2r.Code = Accessr.Code;
    if (ReadFirstMain(Access2r,1,true)) then begin
      if (blankuuid(Accessr.UUID)) then begin
        Accessr.UUID = Access2r.UUID;
        Accessr.ServerSequence = Access2r.ServerSequence;
        Accessr.SyncFlags = Access2r.SyncFlags;
      end;
      if (RecordUpdate(Access2r,Accessr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Accessr,false)) then begin end;
    end;
  end;
  return;
end;

updating procedure ReadImportTagAssets()
begin
  record ATVc ATr;
  record ATVc AT2r;
  Integer cnt;
  
  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);    
    ReadImportTagAssetsRecord(ATr);

    AT2r.Code = ATr.Code;
    if (ReadFirstMain(AT2r,1,true)) then begin
      if (RecordUpdate(AT2r,ATr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(ATr,false)) then begin end;
    end;
  end;
  return;
end;

global 
procedure ReadImportTagAssets2Record(record ATVc ATr)
begin
  row ATVc ATrw;
  Integer cnt,rwcnt;

  RecordNew(ATr);  
  ATr.Code = ImportField;
  ATr.Description = ImportField;
  ATr.ATClass = ImportField;
  ATr.Owner = ImportField;
  ATr.Department = ImportField;
  ATr.SerialNo = ImportField;
  ATr.PurchaseDate = StringToDate(ImportField);
  ATr.Comment = ImportField;
  ATr.BookedDepr = StringToVal(ImportField,M4Val);
  ATr.PurchVal = StringToVal(ImportField,M4Val);  
  ATr.EndDate = StringToDate(ImportField);
  ATr.VECode = ImportField;
  ATr.VEName = ImportField;
  ATr.InsuranceVal = StringToVal(ImportField,M4Val);  
  ATr.StockDate = StringToDate(ImportField);  
  ATr.Quantity = StringToVal(ImportField,M4Qty);  
  ATr.SalesVal = StringToVal(ImportField,M4Val);  
  ATr.FinalDeprVal = StringToVal(ImportField,M4Val);  
  ATr.Objects = ImportField;
  ATr.Inactive = StringToInt(ImportField);  
  ATr.InitDeprVal = StringToVal(ImportField,M4Val);  
  rwcnt = 0;
  while (NextImportLine(false)) begin
    ClearRow(ATr,ATrw,1);
    ATrw.StartDate = StringToDate(ImportField); 
    ATrw.Model1 = ImportField;
    ATrw.Model2 = ImportField;
    ATrw.StartVal = StringToVal(ImportField,M4Val); 
    ATrw.StartVal2 = blankval;
    ATrw.Comment = ImportField;
    MatRowPut(ATr,rwcnt,ATrw);
    rwcnt = rwcnt + 1;
  end;
  return;
end;

updating procedure ReadImportTagAssets2()
begin
  record ATVc ATr;
  record ATVc AT2r;
  Integer cnt;
  
  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagAssets2Record(ATr);
    
    AT2r.Code = ATr.Code;
    if (ReadFirstMain(AT2r,1,true)) then begin
      if (RecordUpdate(AT2r,ATr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(ATr,false)) then begin end;
    end;
  end;
  return;
end;

global
procedure ReadImportTagBanksRecord(record BankVc Bankr)
begin
  RecordNew(Bankr);    
  Bankr.Code = ImportField;
  Bankr.Name = ImportField;
  Bankr.Nr1 = ImportField;
  Bankr.Nr2 = ImportField;
  return;
end;

updating procedure ReadImportTagBanks()
begin
  record BankVc Bankr;
  record BankVc Bank2r;
  Integer cnt;
  
  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);    
    ReadImportTagBanksRecord(Bankr);
    
    Bank2r.Code = Bankr.Code;
    if (ReadFirstMain(Bank2r,1,true)) then begin
      if (RecordUpdate(Bank2r,Bankr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Bankr,false)) then begin end;
    end;
  end;
  return;
end;

global
procedure ReadImportTagBudgetKeysRecord(record BFVc BFr)
begin
  row BFVc BFrw;
  Integer rwcnt;
  val t;

  RecordNew(BFr);
  BFr.BFCode = ImportField;
  BFr.Comment = ImportField;
  rwcnt = 0;
L22ReadImportTagBudgetKeys:;
  t = StringToVal(ImportField,M4Val);
  if (blank(t)) then begin goto LReadImportTagBudgetKeys; end;
  ClearRow(BFr,BFrw,1);
  BFrw.crvval = t;
  MatRowPut(BFr,rwcnt,BFrw);
  rwcnt = rwcnt + 1;
  goto L22ReadImportTagBudgetKeys;
LReadImportTagBudgetKeys:;
  BFSumup(BFr);    
  return;
end;

updating procedure ReadImportTagBudgetKeys()
begin
  record BFVc BFr;
  record BFVc BF2r;
  Integer cnt;
  
  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagBudgetKeysRecord(BFr);
    
    BF2r.BFCode = BFr.BFCode;
    if (ReadFirstMain(BF2r,1,true)) then begin
//      if (RecordUpdate(BF2r,BFr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(BFr,false)) then begin end;
    end;
  end;
  return;
end;

global
procedure ReadImportTagRevBudgetsRecord(record Bud2Vc Budr)
begin
  row Bud2Vc Budrw;
  Integer rwcnt,i;
  val startbal;
  Date buddat,bd,curYearstartdate,curYearenddate;
  Integer valflag,bud1flag,curYearNrOfMonths;

  FindFiscalYear(CurrentDate,curYearstartdate,curYearenddate);
  curYearNrOfMonths = DateGetIntMonth(curYearenddate)-DateGetIntMonth(curYearstartdate)+1;

  RecordNew(Budr);
  Budr.AccNumber = ImportField;
  Budr.Objects = ImportField;
  Budr.Comment = ImportField;
  bud1flag = StringToInt(ImportField);
  valflag = StringToInt(ImportField);
  Budr.Bud1Proc = StringToVal(ImportField,M4Val);
  startbal = StringToVal(ImportField,M4Val);
  Budr.StartDate = curYearstartdate;
  Budr.EndDate = curYearenddate;
  buddat = curYearstartdate;
  for (i=0 ;i<curYearNrOfMonths;i=i+1) begin
    ClearRow(Budr,Budrw,1);
    Budrw.BudDate = buddat;
    buddat = AddMonth(buddat,1);
    Budrw.BudDate = bd;
    if (valflag!=0) then begin
      Budrw.DefStr = ImportField;
    end else begin
      Budrw.DefStr = "";
    end;
    Budrw.sval = blankval;
    MatRowPut(Budr,i,Budrw);
  end;
  if (bud1flag==0) then begin
    Budr.Bud1Proc = blankval;
  end;
  Bud2Sumup(Budr);
  return;
end;

updating procedure ReadImportTagRevBudgets()
begin
  record Bud2Vc Budr;
  record Bud2Vc Bud2r;
  Integer cnt;
  
  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagRevBudgetsRecord(Budr);
    
    Bud2r.AccNumber = Budr.AccNumber;
    Bud2r.Objects = Budr.Objects;
    Bud2r.StartDate = Budr.StartDate;
    if (ReadFirstMain(Bud2r,3,true)) then begin
//      if (RecordUpdate(Bud2r,Budr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Budr,false)) then begin end;
    end;
  end;
  return;
end;

global
procedure ReadImportTagConferencesRecord(record ConfVc Confr,Integer ver)
begin
  Date dat;
  string 255 tstr;

  Confr.SerNr = NextSerNr("ConfVc",CurrentDate,-1,false,"");
  switch (ver) begin
    case 1:
      Confr.AddrName = ImportField;
      Confr.AddrCode = ImportField;      
      Confr.MotherConf = -1;
      Confr.Class = kConfClassMailbox;
    case 2:
      Confr.AddrName = ImportField;
      tstr = ImportField;
      Confr.AddrCode = "";
      Confr.MotherConf = 0;
      Confr.Class = StringToInt(ImportField);
    case 3:
      Confr.SerNr = StringToLongInt(ImportField);
      Confr.AddrName = ImportField;
      Confr.AddrCode = ImportField;        
      Confr.MotherConf = StringToLongInt(ImportField);
      Confr.Class = StringToInt(ImportField);
  end;    
  return;
end;

updating procedure ReadImportTagConferences(Integer ver)
begin
  record ConfVc Confr;
  record ConfVc Conf2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    RecordNew(Confr);
    ReadImportTagConferencesRecord(Confr,ver);

    Conf2r.SerNr = Confr.SerNr;
    if (ReadFirstMain(Conf2r,1,true)) then begin
      if (blankuuid(Confr.UUID)) then begin
        Confr.UUID = Conf2r.UUID;
        Confr.ServerSequence = Conf2r.ServerSequence;
        Confr.SyncFlags = Conf2r.SyncFlags;
      end;
      if (RecordUpdate(Conf2r,Confr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Confr,false)) then begin end;
    end;
  end;
  return;
end;

global
procedure ReadImportTagCustomersRecord(record CUVc CUr)
begin
  string 255 tstr;

    RecordNew(CUr);
    CUr.Code = ImportField;
    CUr.Name = ImportField;
    CUr.Person = ImportField;
    CUr.WarnText1 = ImportField;
    if (NextImportLine(true)) then begin end;
    CUr.InvAddr0 = ImportField;
    CUr.InvAddr1 = ImportField;
    CUr.InvAddr2 = ImportField;
    CUr.InvoiceToCode = ImportField;
    if (NextImportLine(true)) then begin end;
    CUr.DelAddr0 = ImportField;
    CUr.DelAddr1 = ImportField;
    CUr.DelAddr2 = ImportField;
    if (NextImportLine(true)) then begin end;
    CUr.Phone = ImportField;
    CUr.Fax = ImportField;
    CUr.CustCat = ImportField;
    CUr.Comment = ImportField;
    CUr.PayDeal = ImportField;
    CUr.ExportFlag = StringToInt(ImportField);
    CUr.AccFlag = StringToInt(ImportField);
    CUr.Objects = ImportField;
    tstr = ImportField;
    if (blank(tstr)) then begin
      CUr.InterestFlag = 1;
    end else begin
      CUr.InterestFlag = StringToInt(tstr);
    end;
    CUr.VATNr = ImportField;
    CUr.CountryCode = ImportField;
    CUr.SearchKey = ImportField;
    tstr = ImportField;
    if (blank(tstr)) then begin
      CUr.RemndrFlag = 1;
    end else begin
      CUr.RemndrFlag = StringToInt(tstr);
    end;
    CUr.LangCode = ImportField;
    CUr.CurncyCode = ImportField;
    CUr.OnAccount = StringToInt(ImportField);
    CUr.SalesMan = ImportField;
    CUr.CreditLimit = StringToVal(ImportField,M4Val);
    CUr.ShipDeal = ImportField;
    CUr.ShipMode = ImportField;
  return;
end;

updating procedure ReadImportTagCustomers()
begin
  record CUVc CUr;
  record CUVc CU2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagCustomersRecord(CUr);

    CU2r.Code = CUr.Code;
    if (ReadFirstMain(CU2r,1,true)) then begin
      if (blankuuid(CUr.UUID)) then begin
        CUr.UUID = CU2r.UUID;
        CUr.ServerSequence = CU2r.ServerSequence;
        CUr.SyncFlags = CU2r.SyncFlags;
      end;
      if (RecordUpdate(CU2r,CUr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(CUr,false)) then begin end;
    end;
  end;
  return;
end;

global
procedure ReadImportTagCustomers2Record(record CUVc CUr)
begin
  string 255 tstr;

    RecordNew(CUr);
    CUr.Code = ImportField;
    CUr.Name = ImportField;
    CUr.Person = ImportField;
    CUr.WarnText1 = ImportField;
    CUr.InvAddr0 = ImportField;
    CUr.InvAddr1 = ImportField;
    CUr.InvAddr2 = ImportField;
    CUr.InvoiceToCode = ImportField;
    CUr.DelAddr0 = ImportField;
    CUr.DelAddr1 = ImportField;
    CUr.DelAddr2 = ImportField;
    CUr.Phone = ImportField;
    CUr.Fax = ImportField;
    CUr.CustCat = ImportField;
    CUr.Comment = ImportField;
    CUr.PayDeal = ImportField;
    CUr.ExportFlag = StringToInt(ImportField);
    CUr.AccFlag = StringToInt(ImportField);
    CUr.Objects = ImportField;
    tstr = ImportField;
    if (blank(tstr)) then begin
      CUr.InterestFlag = 1;
    end else begin
      CUr.InterestFlag = StringToInt(tstr);
    end;
    CUr.VATNr = ImportField;
    CUr.CountryCode = ImportField;
    CUr.SearchKey = ImportField;
    tstr = ImportField;
    if (blank(tstr)) then begin
      CUr.RemndrFlag = 1;
    end else begin
      CUr.RemndrFlag = StringToInt(tstr);
    end;
    CUr.LangCode = ImportField;
    CUr.CurncyCode = ImportField;
    CUr.OnAccount = StringToInt(ImportField);
    CUr.SalesMan = ImportField;
    CUr.CreditLimit = StringToVal(ImportField,M4Val);
    CUr.ShipDeal = ImportField;
    CUr.ShipMode = ImportField;

    CUr.VATCode = ImportField;
    CUr.Department = ImportField;
    CUr.OrderComment = ImportField;
    CUr.FreightNr = ImportField;
    CUr.PLCode = ImportField;
    CUr.RebCode = ImportField;
    CUr.Classification = ImportField;
    CUr.blockedFlag = StringToInt(ImportField);
    CUr.DateChanged = StringToDate(ImportField);
    CUr.AccOperator = ImportField;
    CUr.SecAccount = ImportField;
    CUr.BankAccount = ImportField;
    CUr.JobDesc = ImportField;
    CUr.CustType = StringToInt(ImportField);
    CUr.ComCode = ImportField;
    CUr.Sorting = ImportField;
    CUr.RegNr1 = ImportField;
    CUr.RegNr2 = ImportField;
    CUr.CPRNr = ImportField;
    CUr.wwwAddr = ImportField;
    CUr.CompItemCode = ImportField;
    CUr.ANACode = ImportField;
    CUr.EDIFlag = StringToInt(ImportField);
    CUr.eMail = ImportField;
    CUr.IntRate = StringToVal(ImportField,M4Val);
    CUr.TheirCode = ImportField;
    CUr.PriceBasedOn = StringToInt(ImportField);
    CUr.DeliveryBasedOn = StringToInt(ImportField);
    CUr.SalesGroup = ImportField;
    CUr.SortCode = ImportField;
    CUr.AllowLogin = StringToInt(ImportField);
    CUr.Password = StringToLongInt(ImportField);
    CUr.FTPLogin = StringToInt(ImportField);
    CUr.DateCreated = StringToDate(ImportField);
    CUr.EGOFlag = StringToInt(ImportField);
    CUr.InvAddr3 = ImportField;
    CUr.DelAddr3 = ImportField;
    CUr.xArea = ImportField;
    CUr.xAreaName = ImportField;
    CUr.InvAddr4 = ImportField;
    CUr.DelAddr4 = ImportField;
    CUr.WebConf = ImportField;
    CUr.WebStartPage = ImportField;
    CUr.FreightCode = ImportField;
    CUr.MainDispGroup = ImportField;
    CUr.AutoGiro = StringToInt(ImportField);
    CUr.OnHoldFlag = StringToInt(ImportField);
    CUr.ColectionFlag = StringToInt(ImportField);
    CUr.LocationCode = ImportField;
    CUr.WebDisplays = ImportField;
    CUr.Mobile = ImportField;
    CUr.NoLetterPosting = StringToInt(ImportField);
    CUr.FiscalFlag = StringToInt(ImportField);
    CUr.UserStr1 = ImportField;
    CUr.UserStr2 = ImportField;
    CUr.UserStr3 = ImportField;
    CUr.UserStr4 = ImportField;
    CUr.UserStr5 = ImportField;
    CUr.UserVal1 = StringToVal(ImportField,M4UVal);
    CUr.UserVal2 = StringToVal(ImportField,M4UVal);
    CUr.UserVal3 = StringToVal(ImportField,M4UVal);
    CUr.UserDate1 = StringToDate(ImportField);
    CUr.UserDate2 = StringToDate(ImportField);
    CUr.UserDate3 = StringToDate(ImportField);
    CUr.CUType = 1;
  return;
end;

updating procedure ReadImportTagCustomers2()
begin
  record CUVc CUr;
  record CUVc CU2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagCustomers2Record(CUr);

    CU2r.Code = CUr.Code;
    if (ReadFirstMain(CU2r,1,true)) then begin
      if (blankuuid(CUr.UUID)) then begin
        CUr.UUID = CU2r.UUID;
        CUr.ServerSequence = CU2r.ServerSequence;
        CUr.SyncFlags = CU2r.SyncFlags;
      end;
      if (RecordUpdate(CU2r,CUr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(CUr,false)) then begin end;
    end;
  end;
  return;
end;

global
procedure ReadImportTagCustomers3Record(record CUVc CUr)
begin
  string 255 tstr;

    RecordNew(CUr);
    CUr.Code = ImportField;
    CUr.Name = ImportField;
    CUr.Person = ImportField;
    CUr.WarnText1 = ImportField;
    CUr.InvAddr0 = ImportField;
    CUr.InvAddr1 = ImportField;
    CUr.InvAddr2 = ImportField;
    CUr.InvoiceToCode = ImportField;
    CUr.DelAddr0 = ImportField;
    CUr.DelAddr1 = ImportField;
    CUr.DelAddr2 = ImportField;
    CUr.Phone = ImportField;
    CUr.Fax = ImportField;
    CUr.CustCat = ImportField;
    CUr.Comment = ImportField;
    CUr.PayDeal = ImportField;
    CUr.ExportFlag = StringToInt(ImportField);
    CUr.AccFlag = StringToInt(ImportField);
    CUr.Objects = ImportField;
    CUr.InterestFlag = StringToInt(ImportField);
    CUr.VATNr = ImportField;
    CUr.CountryCode = ImportField;
    CUr.SearchKey = ImportField;
    CUr.RemndrFlag = StringToInt(ImportField);
    CUr.LangCode = ImportField;
    CUr.CurncyCode = ImportField;
    CUr.OnAccount = StringToInt(ImportField);
    CUr.SalesMan = ImportField;
    CUr.CreditLimit = StringToVal(ImportField,M4Val);
    CUr.ShipDeal = ImportField;
    CUr.ShipMode = ImportField;
    CUr.VATCode = ImportField;
    CUr.Department = ImportField;
    CUr.OrderComment = ImportField;
    CUr.FreightNr = ImportField;
    CUr.PLCode = ImportField;
    CUr.RebCode = ImportField;
    CUr.Classification = ImportField;
    CUr.blockedFlag = StringToInt(ImportField);
    CUr.DateChanged = StringToDate(ImportField);
    CUr.AccOperator = ImportField;
    CUr.SecAccount = ImportField;
    CUr.BankAccount = ImportField;
    CUr.JobDesc = ImportField;
    CUr.CustType = StringToInt(ImportField);
    CUr.ComCode = ImportField;
    CUr.Sorting = ImportField;
    CUr.RegNr1 = ImportField;
    CUr.RegNr2 = ImportField;
    CUr.CPRNr = ImportField;
    CUr.wwwAddr = ImportField;
    CUr.CompItemCode = ImportField;
    CUr.ANACode = ImportField;
    CUr.EDIFlag = StringToInt(ImportField);
    CUr.eMail = ImportField;
    CUr.IntRate = StringToVal(ImportField,M4Val);
    CUr.TheirCode = ImportField;
    CUr.PriceBasedOn = StringToInt(ImportField);
    CUr.DeliveryBasedOn = StringToInt(ImportField);
    CUr.SalesGroup = ImportField;
    CUr.SortCode = ImportField;
    CUr.AllowLogin = StringToInt(ImportField);
    CUr.Password = StringToLongInt(ImportField);
    CUr.FTPLogin = StringToInt(ImportField);
    CUr.DateCreated = StringToDate(ImportField);
    CUr.EGOFlag = StringToInt(ImportField);
    CUr.InvAddr3 = ImportField;
    CUr.DelAddr3 = ImportField;
    CUr.xArea = ImportField;
    CUr.xAreaName = ImportField;
    CUr.InvAddr4 = ImportField;
    CUr.DelAddr4 = ImportField;
    CUr.WebConf = ImportField;
    CUr.WebStartPage = ImportField;
    CUr.FreightCode = ImportField;
    CUr.MainDispGroup = ImportField;
    CUr.AutoGiro = StringToInt(ImportField);
    CUr.OnHoldFlag = StringToInt(ImportField);
    CUr.ColectionFlag = StringToInt(ImportField);
    CUr.LocationCode = ImportField;
    CUr.WebDisplays = ImportField;
    CUr.Mobile = ImportField;
    CUr.NoLetterPosting = StringToInt(ImportField); // Temp until we get the Customer Lists
    CUr.FiscalFlag = StringToInt(ImportField);
    CUr.UserStr1 = ImportField;
    CUr.UserStr2 = ImportField;
    CUr.UserStr3 = ImportField;
    CUr.UserStr4 = ImportField;
    CUr.UserStr5 = ImportField;
    CUr.UserVal1 = StringToVal(ImportField,M4UVal);
    CUr.UserVal2 = StringToVal(ImportField,M4UVal);
    CUr.UserVal3 = StringToVal(ImportField,M4UVal);
    CUr.UserDate1 = StringToDate(ImportField);
    CUr.UserDate2 = StringToDate(ImportField);
    CUr.UserDate3 = StringToDate(ImportField);
    CUr.AccAP = ImportField;
    CUr.AccCost = ImportField;
    CUr.Bank = ImportField;
    CUr.OnAccAccAP = ImportField;
    CUr.MinOrdSum = StringToVal(ImportField,M4Val);
    CUr.PurchAcc = ImportField;
    CUr.RefStr = ImportField;
    CUr.WithPayMode = ImportField;
    CUr.RetainPrc = ImportField; //?
    CUr.NoMailPosting = StringToInt(ImportField); // Temp until we get the Customer Lists
    CUr.VEType = StringToInt(ImportField);
    CUr.CUType = StringToInt(ImportField);
    CUr.VEPayDeal = ImportField;
    CUr.VEShipDeal = ImportField;
    CUr.VEShipMode = ImportField;  
    CUr.VECreditLimit = StringToVal(ImportField,M4Val);
    CUr.VEObjects = ImportField;  
    CUr.VEWarnText1 = ImportField;  
    CUr.VEFactoring = ImportField;  
    CUr.VECurncyCode = ImportField;  
    CUr.VECustID = ImportField;  
    CUr.VEVATCode = ImportField;  
    CUr.NoFactoringFlag = StringToInt(ImportField);
    CUr.NoRepa = StringToInt(ImportField);
    CUr.VECat = ImportField;
    CUr.IBANCode = ImportField;
    CUr.xEInvAddr = ImportField;
    CUr.xEInvFunc = StringToInt(ImportField);
    CUr.xAcceptanceGroup = ImportField;
    CUr.WebServiceChannel = StringToInt(ImportField);
    CUr.SkypeName = ImportField;
    CUr.Region = ImportField;
    CUr.NoTax1 = StringToInt(ImportField);
    CUr.NoTax2 = StringToInt(ImportField);
    CUr.GuestType = StringToInt(ImportField);
    CUr.PassportNr = ImportField;
    CUr.Profesion = ImportField;
    CUr.Nationality = ImportField;
    CUr.BirthDate = StringToDate(ImportField);
    CUr.Gender = StringToInt(ImportField);
    CUr.Newspaper = ImportField;
    CUr.Smoking = StringToInt(ImportField);
    CUr.DocType = ImportField;
    CUr.Blacklist = StringToInt(ImportField);
    CUr.MarStatus = StringToInt(ImportField);
    CUr.Passphrase = ImportField;
    CUr.SIPCode = ImportField;
    CUr.AltPhone = ImportField;
    CUr.Comment0 = ImportField;
    CUr.Comment1 = ImportField;
    CUr.Comment2 = ImportField;
    CUr.Title = ImportField;
    CUr.Salutation1 = ImportField;
    CUr.Salutation2 = ImportField;
    CUr.Salutation3 = ImportField;
    CUr.DealerType = StringToInt(ImportField);
    CUr.GroupInv = StringToInt(ImportField);
    CUr.AddressBooks = ImportField;
    CUr.Extension = ImportField;
  return;
end;

updating procedure ReadImportTagCustomers3()
begin
  record CUVc CUr;
  record CUVc CU2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagCustomers3Record(CUr);

    CU2r.Code = CUr.Code;
    if (ReadFirstMain(CU2r,1,true)) then begin
      if (blankuuid(CUr.UUID)) then begin
        CUr.UUID = CU2r.UUID;
        CUr.ServerSequence = CU2r.ServerSequence;
        CUr.SyncFlags = CU2r.SyncFlags;
      end;
      if (RecordUpdate(CU2r,CUr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(CUr,false)) then begin end;
    end;
  end;
  return;
end;

global
procedure ReadImportTagCurrenciesRecord(record CurncyCodeVc CurncyCoder)
begin
  RecordNew(CurncyCoder);
  CurncyCoder.CurncyCode = ImportField;
  CurncyCoder.Comment = ImportField;
  return;
end;

updating procedure ReadImportTagCurrencies()
begin
  record CurncyCodeVc CurncyCoder;
  record CurncyCodeVc CurncyCode2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagCurrenciesRecord(CurncyCoder);
    
    CurncyCode2r.CurncyCode = CurncyCoder.CurncyCode;
    if (ReadFirstMain(CurncyCode2r,1,true)) then begin
      if (blankuuid(CurncyCoder.UUID)) then begin
        CurncyCoder.UUID = CurncyCode2r.UUID;
        CurncyCoder.ServerSequence = CurncyCode2r.ServerSequence;
        CurncyCoder.SyncFlags = CurncyCode2r.SyncFlags;
      end;
      if (RecordUpdate(CurncyCode2r,CurncyCoder,false)==0) then begin end;
    end else begin
      if (RecordImportStore(CurncyCoder,false)) then begin end;
    end;
  end;
  return;
end;

global
procedure ReadImportTagDprModelsRecord(record DprModVc DprModr)
begin
  string 255 tstr;

  RecordNew(DprModr);
  DprModr.Code = ImportField;
  DprModr.Description = ImportField;
  DprModr.DeprMethod = StringToInt(ImportField);
  DprModr.DeprPerc = StringToVal(ImportField,M45Val);
  tstr = ImportField;
  if (blank(tstr)) then begin
    DprModr.DeprRnd = 2;
  end else begin
    DprModr.DeprRnd = StringToInt(tstr);
  end;  
  DprModr.DeprPeriod = StringToInt(ImportField);    
  return;
end;

updating procedure ReadImportTagDprModels()
begin
  record DprModVc DprModr;
  record DprModVc DprMod2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagDprModelsRecord(DprModr);
    
    DprMod2r.Code = DprModr.Code;
    if (ReadFirstMain(DprMod2r,1,true)) then begin
      if (RecordUpdate(DprMod2r,DprModr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(DprModr,false)) then begin end;
    end;
  end;
  return;
end;

global
procedure ReadImportTagDeliveryModesRecord(record DMVc DMr)
begin
  RecordNew(DMr);
  DMr.Code = ImportField;
  DMr.Comment = ImportField;
  return;
end;

updating procedure ReadImportTagDeliveryModes()
begin
  record DMVc DMr;
  record DMVc DM2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagDeliveryModesRecord(DMr);

    DM2r.Code = DMr.Code;
    if (ReadFirstMain(DM2r,1,true)) then begin
      if (RecordUpdate(DM2r,DMr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(DMr,false)) then begin end;
    end;
  end;
  return;
end;

global
procedure ReadImportTagDocumentsRecord(record DocVc Docr,Integer ver)
begin
  row DocVc Docrw;
  Integer rwcnt,fldno;
  string 255 tstr;
  val t;

    RecordNew(Docr);
    if ((ver==1) or (ver==2)) then begin
      Docr.Code = ImportField;
      Docr.Comment = ImportField;
      Docr.nrOfMatrixLinesOnly = StringToInt(ImportField);
      Docr.pcFormLines = StringToInt(ImportField);
      Docr.pcFormVisible = StringToInt(ImportField);
      Docr.pcFormMargin = StringToInt(ImportField);
      Docr.pcFormCRend = StringToInt(ImportField);
      Docr.nrofex = StringToInt(ImportField);
      Docr.DocName = ImportField;
      Docr.JobDf = StringToInt(ImportField);
      Docr.extext0 = ImportField;
      Docr.PaperTray0 = ImportField;
      Docr.extext1 = ImportField;
      Docr.PaperTray1 = ImportField;
      Docr.extext2 = ImportField;
      Docr.PaperTray2 = ImportField;
      Docr.extext3 = ImportField;
      Docr.PaperTray3 = ImportField;
      Docr.extext4 = ImportField;
      Docr.PaperTray4 = ImportField;
      Docr.DocType = StringToInt(ImportField);
      tstr = ImportField;
      if (nonblank(tstr)) then begin
        Docr.nrOfMatrixLinesFirst = StringToInt(tstr);
      end else begin
        Docr.nrOfMatrixLinesFirst = Docr.nrOfMatrixLinesOnly;
      end;
      tstr = ImportField;
      if (nonblank(tstr)) then begin
        Docr.nrOfMatrixLinesMiddle = StringToInt(tstr);
      end else begin
        Docr.nrOfMatrixLinesMiddle = Docr.nrOfMatrixLinesOnly;
      end;
      tstr = ImportField;
      if (nonblank(tstr)) then begin
        Docr.nrOfMatrixLinesLast = StringToInt(tstr);
      end else begin
        Docr.nrOfMatrixLinesLast = Docr.nrOfMatrixLinesOnly;
      end;

      //vg  5.4
      Docr.HalRoutine = ImportField;
      Docr.DontPrintf = StringToInt(ImportField);
      Docr.HeaderStyle = ImportField;
      Docr.HeaderHeight = StringToInt(ImportField);
      Docr.DescriptionStyle = ImportField;
      Docr.DescriptionHeight = StringToInt(ImportField);
      Docr.ItemlineStyle = ImportField;
      Docr.ItemlineHeight = StringToInt(ImportField);
      Docr.SubTotalStyle = ImportField;
      Docr.SubTotalHeight = StringToInt(ImportField);
      Docr.CreditInvStyle = ImportField;
      Docr.CreditInvHeight = StringToInt(ImportField);
      Docr.PrepaymentStyle = ImportField;
      Docr.PrepaymentHeight = StringToInt(ImportField);
      Docr.CodePage = StringToInt(ImportField);
      //---

      rwcnt = 0;
      while (NextImportLine(false)) begin
        ClearRow(Docr,Docrw,1);
        Docrw.unitType = StringToInt(ImportField);
        Docrw.xpos = StringToVal(ImportField,M4Qty);
        Docrw.ypos = StringToVal(ImportField,M4Qty);
        Docrw.unitWidth = StringToVal(ImportField,M4Qty);
        Docrw.unitHeight = StringToVal(ImportField,M4Qty);
        Docrw.unitStyle = ImportField;
        Docrw.unitText = ImportField;
        Docrw.just = StringToInt(ImportField);
        Docrw.lineHeight = StringToInt(ImportField);
        tstr = ImportField;
        Docrw.clip = StringToInt(ImportField);
        Docrw.EscSeq = ImportField;
        Docrw.excludeFirst = StringToInt(ImportField);
        Docrw.excludeMiddle = StringToInt(ImportField);
        Docrw.excludeLast = StringToInt(ImportField);
        Docrw.excludeOnly = StringToInt(ImportField);
        Docrw.wordWrap = StringToInt(ImportField);
        Docrw.formatNr = StringToInt(ImportField);
        if (Docrw.xpos>Docrw.unitWidth) then begin
          t = Docrw.xpos;
          Docrw.xpos = Docrw.unitWidth;
          Docrw.unitWidth = t;
        end;
        if (Docrw.ypos>Docrw.unitHeight) then begin
          t = Docrw.ypos;
          Docrw.ypos = Docrw.unitHeight;
          Docrw.unitHeight = t;
        end;
        if ((nonblank(tstr)) or (Docrw.unitType!=4)) then begin
          Docrw.fieldSetNr = StringToInt(tstr);
          if (ver==1) then begin
            if (Docrw.fieldSetNr>9) then begin
              Docrw.fieldSetNr = Docrw.fieldSetNr + 1;
            end;
          end;
        end else begin
//          GetSetFromStr(101,Docrw.unitText,&fldno,&nr);//todo
          if (fldno!=0) then begin
            Docrw.unitText = "";
          end;
          Docrw.fieldSetNr = fldno;
        end;
        MatRowPut(Docr,rwcnt,Docrw);
        rwcnt = rwcnt + 1;
      end;
    end;
    if (ver==3) then begin
      tstr = ImportField;
      Docr.nrofex = StringToInt(ImportField);
      Docr.DocName = ImportField;
      Docr.JobDf = StringToInt(ImportField);
      Docr.Comment = ImportField;
      if (NextImportLine(true)) then begin end;
      Docr.extext0 = ImportField;
      Docr.PaperTray0 = ImportField;
      if (NextImportLine(true)) then begin end;
      Docr.extext1 = ImportField;
      Docr.PaperTray1 = ImportField;
      if (NextImportLine(true)) then begin end;
      Docr.extext2 = ImportField;
      Docr.PaperTray2 = ImportField;
      if (NextImportLine(true)) then begin end;
      Docr.extext3 = ImportField;
      Docr.PaperTray3 = ImportField;
      if (NextImportLine(true)) then begin end;
      Docr.extext4 = ImportField;
      Docr.PaperTray4 = ImportField;
      if (NextImportLine(true)) then begin end;
      tstr = tstr & "_";
      Docr.Code = tstr;
    end;
  return;
end;

updating procedure ReadImportTagDocuments(Integer ver)
begin
  record DocVc Docr;
  record DocVc Doc2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagDocumentsRecord(Docr,ver);
         
    Doc2r.Code = Docr.Code;
    if (ReadFirstMain(Doc2r,1,true)) then begin
      if (blankuuid(Docr.UUID)) then begin
        Docr.UUID = Doc2r.UUID;
        Docr.ServerSequence = Doc2r.ServerSequence;
        Docr.SyncFlags = Doc2r.SyncFlags;
      end;
      if (RecordUpdate(Doc2r,Docr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Docr,false)) then begin end;
    end;
  end;
  return;
end;

global
procedure ReadImportTagForwardBalancesRecord(record FBVc FBr)
begin
  row FBVc FBrw;
  Integer rwcnt;
  val v;

    RecordNew(FBr);    
    FBr.SerNr = StringToLongInt(ImportField);
    FBr.Comment = ImportField;
    FBr.TransDate = StringToDate(ImportField);
    FBr.Sign = ImportField;
    FBr.Objects = ImportField;
    FBr.SimFlag = StringToInt(ImportField);
    FBr.DSum = StringToVal(ImportField,M4Val);
    FBr.CSum = StringToVal(ImportField,M4NegVal);
    FBr.DiffVal = StringToVal(ImportField,M4Val);
    FBr.xMainf = StringToInt(ImportField);
    FBr.Balf = StringToInt(ImportField);
    FBr.D2Sum = StringToVal(ImportField,M4Val);
    FBr.C2Sum = StringToVal(ImportField,M4NegVal);
    FBr.Diff2Val = StringToVal(ImportField,M4Val);
    rwcnt = 0;
    while (NextImportLine(false)) begin
      ClearRow(FBr,FBrw,1);
      FBrw.AccNumber = ImportField;
      FBrw.Comment = ImportField;
      v = StringToVal(ImportField,M4Val); 
      FBrw.DebVal = StringToVal(ImportField,M4Val); 
      FBrw.CredVal = StringToVal(ImportField,M4Val); 
      FBrw.Deb2Val = StringToVal(ImportField,M4Val); 
      FBrw.Cred2Val = StringToVal(ImportField,M4Val); 
      FBrw.CurDebVal = StringToVal(ImportField,M4Val); 
      FBrw.CurCredVal = StringToVal(ImportField,M4Val); 
      FBrw.CurncyCode = ImportField;
      if (FBrw.Deb2Val==0) then begin FBrw.Deb2Val = blankval; end;
      if (FBrw.Cred2Val==0) then begin FBrw.Cred2Val = blankval; end;
      if (FBrw.CurDebVal==0) then begin FBrw.CurDebVal = blankval; end;
      if (FBrw.CurCredVal==0) then begin FBrw.CurCredVal = blankval; end;
      if (v>=0) then begin
        FBrw.DebVal = FBrw.DebVal + v;
      end else begin
        FBrw.CredVal = FBrw.CredVal - v;
      end;
      if (FBrw.DebVal==0) then begin FBrw.DebVal = blankval; end;
      if (FBrw.CredVal==0) then begin FBrw.CredVal = blankval; end;
      MatRowPut(FBr,rwcnt,FBrw);
      rwcnt = rwcnt + 1;
    end;
  return;
end;

updating procedure ReadImportTagForwardBalances()
begin
  record FBVc FBr;
  record FBVc FB2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagForwardBalancesRecord(FBr);
    
    FB2r.SerNr = FBr.SerNr;
    if (ReadFirstMain(FB2r,1,true)) then begin
//      if (RecordUpdate(FB2r,FBr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(FBr,false)) then begin end;
    end;
  end;
  return;
end;

global
procedure ReadImportTagItemsRecord(record INVc INr,Integer ver,var val upric2,var string vc2)
begin
  row INVc INrw;
  Integer rwcnt;
  string 255 tstr;

  upric2 = blankval;
  RecordNew(INr);  
  if (ver==2) then begin
    INr.Code = ImportField;
    INr.Name = ImportField;
    INr.Unittext = ImportField;
    INr.MinLevel = StringToVal(ImportField,M4Qty);
    INr.Objects = ImportField;
    INr.SalesAcc = ImportField;
    INr.UPrice1 = StringToVal(ImportField,M423Val);
    INr.ItemType = StringToInt(ImportField);
    INr.Group = ImportField;
    vc2 = ImportField;
    upric2 = StringToVal(ImportField,M4Val);
    INr.InPrice = StringToVal(ImportField,M4Val);
    INr.InvCode = ImportField;
    INr.ExtraCost = StringToVal(ImportField,M4Val);
    INr.SerNrf = StringToInt(ImportField);
    INr.Department = ImportField;
    INr.Weight = StringToVal(ImportField,M4UVal);
    INr.Volume = StringToVal(ImportField,M4UVal);
    INr.EUCodex = ImportField;
    INr.InCurncyCode = ImportField;
    INr.Bonus = StringToVal(ImportField,M4Val);
    INr.Recepy = ImportField;
    INr.Markup = StringToVal(ImportField,M4Val);
    tstr = ImportField;
    if (tstr=="1") then begin
      INr.ItemType = 2;
    end;
    INr.BarCode = ImportField;
    INr.UpdateCost = StringToInt(ImportField);
    INr.LastPriceChange = StringToDate(ImportField);
    INr.CalcPrice = ImportField;
    INr.VATCode = ImportField;
    tstr = ImportField;
    if (nonblank(tstr)) then begin
      INr.PriceFactor = StringToVal(ImportField,M4Val);
    end else begin
      INr.PriceFactor = blankval;
    end;
    INr.Terminated = StringToInt(ImportField);
    INr.AvgMarkup = StringToVal(ImportField,M4Val);
    INr.LastPurchPrice = StringToVal(ImportField,M4Val);
    INr.LastPurchCurncyCode = ImportField;
    INr.WeighedAvPrice = StringToVal(ImportField,M4Val);      
    while (NextImportLine(false)) begin
      ClearRow(INr,INrw,1);
      INrw.LangCode = ImportField;
      INrw.Text = ImportField;
      MatRowPut(INr,rwcnt,INrw);
      rwcnt = rwcnt + 1;
    end;    
  end;
  if (ver==1) then begin
    INr.Code = ImportField;
    INr.Name = ImportField;
    INr.Unittext = ImportField;
    INr.MinLevel = StringToVal(ImportField,M4Qty);
    INr.Objects = ImportField;
    INr.SalesAcc = ImportField;
    INr.UPrice1 = StringToVal(ImportField,M423Val);
    INr.ItemType = StringToInt(ImportField);
    INr.Group = ImportField;
    vc2 = ImportField;
    upric2 = StringToVal(ImportField,M4Val);
    INr.InPrice = StringToVal(ImportField,M423Val);
    INr.InvCode = ImportField;
    INr.ExtraCost = StringToVal(ImportField,M4Val);
    tstr = ImportField;
    tstr = ImportField;
    INr.SerNrf = StringToInt(ImportField);
    INr.Department = ImportField;
    INr.Weight = StringToVal(ImportField,M4Qty);
    INr.Volume = StringToVal(ImportField,M4Qty);
    INr.EUCodex = ImportField;
    INr.InCurncyCode = ImportField;
    INr.Bonus = StringToVal(ImportField,M4Val);
    INr.Recepy = ImportField;
    INr.Markup = StringToVal(ImportField,M4Val);
    INr.PriceFactor = blankval;
    INr.Terminated = 0;
  end;
  return;
end;

updating procedure ReadImportTagItems(Integer ver)
begin
  record INVc INr;
  record INVc IN2r;
  Integer cnt;
  val upric2;
  record PLVc PLR;  
  string 255 tstr,vc2;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagItemsRecord(INr,ver,upric2,vc2);

    if (upric2!=0) then begin      
      tstr = "2";
      PLR.PLCode = tstr;
      PLR.ArtCode = INr.Code;
      PLR.ExVatPrice = upric2;
      PLR.Comment = INr.Name;
      PLR.SalesAcc = vc2;
      if (RecordStore(PLR,false)) then begin end;
    end;  
    IN2r.Code = INr.Code;
    if (ReadFirstMain(IN2r,1,true)) then begin
      if (blankuuid(INr.UUID)) then begin
        INr.UUID = IN2r.UUID;
        INr.ServerSequence = IN2r.ServerSequence;
        INr.SyncFlags = IN2r.SyncFlags;
      end;
      if (RecordUpdate(IN2r,INr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(INr,false)) then begin end;
    end;
  end;
  return;
end;

global
procedure ReadImportTagItemGroupsRecord(record ITVc ITr,Integer ver)
begin
  Integer oldcostmodel;
  
  RecordNew(ITr);  
  if (ver==1) then begin
    ITr.Code = ImportField;
    ITr.Comment = ImportField;
    ITr.CostAcc = ImportField;
    ITr.InvAcc = ImportField;    
    ITr.CostPerc = StringToVal(ImportField,M4Val);
    oldcostmodel = StringToInt(ImportField);
    switch (oldcostmodel) begin
      case 1: ITr.PrimaryCostModel = 1;
      case 2: ITr.PrimaryCostModel = 2;
      case 4: ITr.PrimaryCostModel = 4;
      case 5: ITr.PrimaryCostModel = 3;
      case 9: ITr.PrimaryCostModel = 9;
    end;
    ITr.QueuedCostModel = 0;

    ITr.SalesAcc = ImportField;    
    ITr.VATCodeDom = ImportField;    
    ITr.VATCodeEU = ImportField;    
    ITr.VATCodeExp = ImportField;    
  end;
  if (ver==2) then begin
    ITr.Code = ImportField;
    ITr.Comment = ImportField;
    ITr.CostAcc = ImportField;
    ITr.InvAcc = ImportField;    
    ITr.CostPerc = StringToVal(ImportField,M4Val);
    oldcostmodel = StringToInt(ImportField);
    switch (oldcostmodel) begin
      case 1: ITr.PrimaryCostModel = 1;
      case 2: ITr.PrimaryCostModel = 2;
      case 4: ITr.PrimaryCostModel = 4;
      case 5: ITr.PrimaryCostModel = 3;
      case 9: ITr.PrimaryCostModel = 9;
    end;
    ITr.QueuedCostModel = 0;
    ITr.Sign = ImportField;    
    ITr.SalesAcc = ImportField;    
    ITr.VATCodeDom = ImportField;    
    ITr.VATCodeEU = ImportField;    
    ITr.VATCodeExp = ImportField;    
    ITr.EUSalesAcc = ImportField;    
    ITr.ExpSalesAcc = ImportField;    
    ITr.ExclFrLabPr = StringToInt(ImportField);
    ITr.Internal = StringToInt(ImportField);
    ITr.InclItemFreight = StringToInt(ImportField);
    ITr.FixedFreight = StringToVal(ImportField,M4Val);
    ITr.SwapAccounts = StringToInt(ImportField);    
  end;
  return;
end;

updating procedure ReadImportTagItemGroups(Integer ver)
begin
  record ITVc ITr;
  record ITVc IT2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagItemGroupsRecord(ITr,ver);
  
    IT2r.Code = ITr.Code;
    if (ReadFirstMain(IT2r,1,true)) then begin
      if (blankuuid(ITr.UUID)) then begin
        ITr.UUID = IT2r.UUID;
        ITr.ServerSequence = IT2r.ServerSequence;
        ITr.SyncFlags = IT2r.SyncFlags;
      end;
      if (RecordUpdate(IT2r,ITr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(ITr,false)) then begin end;
    end;
  end;
  return;
end;

global
procedure ReadImportTagMailHistoryRecord(record MailReadVc MailReadr)
begin
  string 255 uscod,mnam,name;
    
  RecordNew(MailReadr);  
  MailReadr.mailSerNr = StringToLongInt(ImportField);
  uscod = ImportField;
  FindUserMailboxName(uscod,mnam,name);
  if (nonblank(mnam)) then begin
    MailReadr.mailBoxNr = StringToLongInt(mnam);
  end else begin
    MailReadr.mailBoxNr = StringToLongInt(uscod);
  end;
  MailReadr.accode = StringToInt(ImportField);
  MailReadr.fDate = StringToDate(ImportField);
  MailReadr.fTime = StringToTime(ImportField);
  if (MailReadr.accode==1) then begin MailReadr.accode = 0; end;      
  return;
end;

updating procedure ReadImportTagMailHistory()
begin
  record MailReadVc MailReadr;
  Integer cnt;
  
  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagMailHistoryRecord(MailReadr);
    
    if (RecordImportStore(MailReadr,false)) then begin end;
  end;
  return;
end;

global
procedure ReadImportTagPayDealsRecord(record PDVc PDr)
begin
  RecordNew(PDr);  
  PDr.PDType = StringToInt(ImportField);
  PDr.Code = ImportField;
  PDr.pdays = StringToLongInt(ImportField);
  PDr.pdvrebt = StringToVal(ImportField,M41Val);
  PDr.pdrdays = StringToLongInt(ImportField);
  PDr.pdComment = ImportField;
  return;
end;

updating procedure ReadImportTagPayDeals()
begin
  record PDVc PDr;
  record PDVc PD2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagPayDealsRecord(PDr);

    PD2r.Code = PDr.Code;
    if (ReadFirstMain(PD2r,1,true)) then begin
      if (blankuuid(PDr.UUID)) then begin
        PDr.UUID = PD2r.UUID;
        PDr.ServerSequence = PD2r.ServerSequence;
        PDr.SyncFlags = PD2r.SyncFlags;
      end;
      if (RecordUpdate(PD2r,PDr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(PDr,false)) then begin end;
    end;
  end;
  return;
end;

global
procedure ReadImportTagProjRecord(record PRVc PRr)
begin
  RecordNew(PRr);  
  PRr.Code = ImportField;
  PRr.CustCode = ImportField;
  PRr.Name = ImportField;
  PRr.Desc0 = ImportField;
  PRr.Desc1 = ImportField;
  PRr.Desc2 = ImportField;
  PRr.CustName = ImportField;
  PRr.Terminated = StringToInt(ImportField);
  PRr.StopInvoicing = StringToInt(ImportField);
  if (NextImportLine(true)) then begin end;
  PRr.Leader = ImportField;
  PRr.LeaderName = ImportField;
  PRr.StartDate = StringToDate(ImportField);
  PRr.EndDate = StringToDate(ImportField);
  PRr.InvoiceTime = StringToInt(ImportField);
  PRr.InvoicePurch = StringToInt(ImportField);
  PRr.InvoiceStock = StringToInt(ImportField);
  PRr.NoInvBefore = StringToDate(ImportField);
  PRr.BuildOn = StringToInt(ImportField);
  PRr.Contact = ImportField;
  PRr.PRCodeOnInv = StringToInt(ImportField);
  PRr.PRNameOnInv = StringToInt(ImportField);
  PRr.PRContOnInv = StringToInt(ImportField);
  PRr.PRTextOnInv = StringToInt(ImportField);
  PRr.DownPaySent = blankval;
  PRr.DownPayRedcd = blankval;
  return;
end;

updating procedure ReadImportTagProj()
begin
  record PRVc PRr;
  record PRVc PR2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagProjRecord(PRr);

    PR2r.Code = PRr.Code;
    if (ReadFirstMain(PR2r,1,true)) then begin
      if (RecordUpdate(PR2r,PRr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(PRr,false)) then begin end;
    end;
  end;
  return;
end;

updating procedure ReadImportTagProj2()
begin
  record PRVc PRr;
  record PRVc PR2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagProj2Record(PRr);

    PR2r.Code = PRr.Code;
    if (ReadFirstMain(PR2r,1,true)) then begin
      if (RecordUpdate(PR2r,PRr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(PRr,false)) then begin end;
    end;
  end;
  return;
end;

updating procedure ReadImportTagShipDeals()
begin
  record ShipDealVc ShipDealr;
  record ShipDealVc ShipDeal2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagShipDealsRecord(ShipDealr);
    
    ShipDeal2r.Code = ShipDealr.Code;
    if (ReadFirstMain(ShipDeal2r,1,true)) then begin
      if (RecordUpdate(ShipDeal2r,ShipDealr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(ShipDealr,false)) then begin end;
    end;
  end;
  return;
end;

updating procedure ReadImportTagUnits()
begin
  record UnitVc Unitr;
  record UnitVc Unit2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagUnitsRecord(Unitr);
        
    Unit2r.Code = Unitr.Code;
    if (ReadFirstMain(Unit2r,1,true)) then begin
      if (blankuuid(Unitr.UUID)) then begin
        Unitr.UUID = Unit2r.UUID;
        Unitr.ServerSequence = Unit2r.ServerSequence;
        Unitr.SyncFlags = Unit2r.SyncFlags;
      end;
      if (RecordUpdate(Unit2r,Unitr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Unitr,false)) then begin end;
    end;
  end;
  return;
end;

updating procedure ReadImportTagDprMods()
begin
  record DprModVc DprModr;
  record DprModVc DprMod2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagDprModsRecord(DprModr);
        
    DprMod2r.Code = DprModr.Code;
    if (ReadFirstMain(DprMod2r,1,true)) then begin
      if (RecordUpdate(DprMod2r,DprModr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(DprModr,false)) then begin end;
    end;
  end;
  return;
end;

updating procedure ReadImportTagVarieties()
begin
  record VARVc VARr;
  record VARVc VAR2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagVarietiesRecord(VARr);
    
    VAR2r.Code = VARr.Code;
    if (ReadFirstMain(VAR2r,1,true)) then begin
      if (blankuuid(VARr.UUID)) then begin
        VARr.UUID = VAR2r.UUID;
        VARr.ServerSequence = VAR2r.ServerSequence;
        VARr.SyncFlags = VAR2r.SyncFlags;
      end;
      if (RecordUpdate(VAR2r,VARr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(VARr,false)) then begin end;
    end;
  end;
  return;
end;

updating procedure ReadImportTagSuppliers()
begin
  record VEVc VEr;
  record VEVc VE2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagSuppliersRecord(VEr);
    
    VE2r.Code = VEr.Code;
    if (ReadFirstMain(VE2r,1,true)) then begin
      if (RecordUpdate(VE2r,VEr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(VEr,false)) then begin end;
    end;
  end;
  return;
end;

updating procedure ReadImportTagTimeSheet()
begin
  record TSVc TSr;
  record TSVc TS2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagTimeSheetRecord(TSr);    

    TS2r.SerNr = TSr.SerNr;
    if (ReadFirstMain(TS2r,1,true)) then begin
      if (RecordUpdate(TS2r,TSr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(TSr,false)) then begin end;
    end;
  end;
  return;
end;
/*
global
updating procedure ReadImportTag(string thetag)
begin

  switch (thetag) begin
//    case "access": ReadImportTagAccessGroups;
//    case "access2": ReadImportTagAccessGroups;
//    case "act": ReadImportTagActivities;
//    case "at": ReadImportTagAssets;
//    case "at2": ReadImportTagAssets2;
//    case "bank": ReadImportTagBanks;    
//    case "budford": ReadImportTagBudgetKeys;
//    case "budg2v2": ReadImportTagRevBudgets;
//    case "conference": ReadImportTagConferences(2);
//    case "mailbox": ReadImportTagConferences(1);
//    case "ConfVc": ReadImportTagConferences(3);
//    case "konto3": ReadImportTagAccounts;
//    case "kund1": ReadImportTagCustomers;
//    case "currency1": ReadImportTagCurrencies;
//    case "dprmod": ReadImportTagDprModels;
//    case "dm": ReadImportTagDeliveryModes;
//    case "doc": ReadImportTagDocuments(1);
//    case "doc2": ReadImportTagDocuments(2);
//    case "fp": ReadImportTagDocuments(3);
//    case "fb1": ReadImportTagForwardBalances;
//    case "artikel1": ReadImportTagItems(1);
//    case "artikel2": ReadImportTagItems(2);
//    case "artgrupp1": ReadImportTagItemGroups(1);
//    case "ITVc": ReadImportTagItemGroups(2);        
//    case "mailread": ReadImportTagMailHistory;
//    case "betvillk1": ReadImportTagPayDeals;
//    case "projects": ReadImportTagProj;
//    case "shipdeal": ReadImportTagShipDeals;
//    case "enhet1": ReadImportTagUnits;
//    case "VARVc": ReadImportTagVarieties;
//    case "leverantﾚr1": ReadImportTagSuppliers;
//    case "TimeSheets": ReadImportTagTimeSheet;
//    case "betal2": ReadImportTagReceipts(2);
//    case "betal3": ReadImportTagReceipts(3);
//    case "fakt1": ReadImportTagInvoices;
//    case "utbet1": ReadImportTagPayments;
//    case "order1": ReadImportTagOrders;
//    case "sm1": ReadImportTagSimulations;
//    case "lfakt1": ReadImportTagPurchaseInvoices(1);
//    case "VIVc": ReadImportTagPurchaseInvoices(2);
//    case "lfakthuvud": ReadImportTagPurchaseInvoices(99);
//    case "trans4": ReadImportTagTransactions;
//    case "ship1": ReadImportTagDeliveries;
//    case "qt1": ReadImportTagQuotes;
//    case "purchase1": ReadImportTagGoodsReceipts(1);
//    case "purchase2": ReadImportTagGoodsReceipts(2);
//    case "po1": ReadImportTagPurchaseOrders;
//    case "AttachVc": ReadImportTagAttachments;
  end;
  return;
end;
*/

global
updating procedure ReadImportTagkonto3(string thetag)
begin
  ReadImportTagAccounts;
  return;
end;

global
updating procedure ReadImportTagaccess(string thetag)
begin
  ReadImportTagAccessGroups;
  return;
end;

global
updating procedure ReadImportTagaccess2(string thetag)
begin
  ReadImportTagAccessGroups;
  return;
end;

global
updating procedure ReadImportTagact(string thetag)
begin
  ReadImportTagActivities;
  return;
end;

global
updating procedure ReadImportTagat(string thetag)
begin
  ReadImportTagAssets;
  return;
end;

global
updating procedure ReadImportTagat2(string thetag)
begin
  ReadImportTagAssets2;
  return;
end;

global
updating procedure ReadImportTagAttachVc(string thetag)
begin
  ReadImportTagAttachments;
  return;
end;

global
updating procedure ReadImportTagbank(string thetag)
begin
  ReadImportTagBanks;
  return;
end;

global
updating procedure ReadImportTagbudford(string thetag)
begin
  ReadImportTagBudgetKeys;
  return;
end;

global
updating procedure ReadImportTagbudg2v2(string thetag)
begin
  ReadImportTagRevBudgets;
  return;
end;

global
updating procedure ReadImportTagconference(string thetag)
begin
  ReadImportTagConferences(2);
  return;
end;

global
updating procedure ReadImportTagmailbox(string thetag)
begin
  ReadImportTagConferences(1);
  return;
end;

global
updating procedure ReadImportTagConfVc(string thetag)
begin
  ReadImportTagConferences(3);
  return;
end;

global
updating procedure ReadImportTagkund1(string thetag)
begin
  ReadImportTagCustomers;
  return;
end;

global
updating procedure ReadImportTagcu2(string thetag)
begin
  ReadImportTagCustomers2;
  return;
end;

global
updating procedure ReadImportTagcu3(string thetag)
begin
  ReadImportTagCustomers3;
  return;
end;

global
updating procedure ReadImportTagcurrency1(string thetag)
begin
  ReadImportTagCurrencies;
  return;
end;

global
updating procedure ReadImportTagdprmod(string thetag)
begin
  ReadImportTagDprModels;
  return;
end;

global
updating procedure ReadImportTagdm(string thetag)
begin
  ReadImportTagDeliveryModes;
  return;
end;

global
updating procedure ReadImportTagdoc(string thetag)
begin
  ReadImportTagDocuments(1);
  return;
end;

global
updating procedure ReadImportTagdoc2(string thetag)
begin
  ReadImportTagDocuments(2);
  return;
end;

global
updating procedure ReadImportTagfp(string thetag)
begin
  ReadImportTagDocuments(3);
  return;
end;

global
updating procedure ReadImportTagfb1(string thetag)
begin
  ReadImportTagForwardBalances;
  return;
end;

global
updating procedure ReadImportTagartikel1(string thetag)
begin
  ReadImportTagItems(1);
  return;
end;

global
updating procedure ReadImportTagartikel2(string thetag)
begin
  ReadImportTagItems(2);
  return;
end;

global
updating procedure ReadImportTagartgrupp1(string thetag)
begin
  ReadImportTagItemGroups(1);
  return;
end;

global
updating procedure ReadImportTagITVc(string thetag)
begin
  ReadImportTagItemGroups(2);
  return;
end;

global
updating procedure ReadImportTagbetal2(string thetag)
begin
  ReadImportTagReceipts(2);
  return;
end;

global
updating procedure ReadImportTagbetal3(string thetag)
begin
  ReadImportTagReceipts(3);
  return;
end;

global
updating procedure ReadImportTagfakt1(string thetag)
begin
  ReadImportTagInvoices;
  return;
end;

global
updating procedure ReadImportTagmailread(string thetag)
begin
  ReadImportTagMailHistory;
  return;
end;

global
updating procedure ReadImportTagutbet1(string thetag)
begin
  ReadImportTagPayments;
  return;
end;

global
updating procedure ReadImportTagorder1(string thetag)
begin
  ReadImportTagOrders;
  return;
end;

global
updating procedure ReadImportTagsm1(string thetag)
begin
  ReadImportTagSimulations;
  return;
end;

global
updating procedure ReadImportTagbetvillk1(string thetag)
begin
  ReadImportTagPayDeals;
  return;
end;

global
updating procedure ReadImportTagpo1(string thetag)
begin
  ReadImportTagPurchaseOrders;
  return;
end;

global
updating procedure ReadImportTagprojects(string thetag)
begin
  ReadImportTagProj;
  return;
end;

global
updating procedure ReadImportTagpr2(string thetag)
begin
  ReadImportTagProj2;
  return;
end;


global
updating procedure ReadImportTagshipdeal(string thetag)
begin
  ReadImportTagShipDeals;
  return;
end;

global
updating procedure ReadImportTagenhet1(string thetag)
begin
  ReadImportTagUnits;
  return;
end;

global
updating procedure ReadImportTagVARVc(string thetag)
begin
  ReadImportTagVarieties;
  return;
end;

global
updating procedure ReadImportTagleverant_r1(string thetag)
begin
  ReadImportTagSuppliers;
  return;
end;

global
updating procedure ReadImportTagTimeSheets(string thetag)
begin
  ReadImportTagTimeSheet;
  return;
end;

global
updating procedure ReadImportTagDprModVc(string thetag)
begin
  ReadImportTagDprMods;
  return;
end;

global
updating procedure ReadImportTagVARSubsetsVc(string thetag)
begin
  record VARSubsetsVc VARSubsetsr;
  record VARSubsetsVc VARSubsets2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    RecordNew(VARSubsetsr);  
    VARSubsetsr.Subset = ImportField;
    VARSubsetsr.Comment = ImportField;        
    if (RecordImportStore(VARSubsetsr,false)) then begin end;
    cnt = cnt + 1;
  end;
  return;
end;

global
updating procedure ReadImportTagVARMasksVc(string thetag)
begin
  record VARMasksVc VARMasksr;
  record VARMasksVc VARMasks2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    RecordNew(VARMasksr);  
    VARMasksr.Masks = ImportField;
    VARMasksr.Comment = ImportField;        
    if (RecordImportStore(VARMasksr,false)) then begin end;
    cnt = cnt + 1;
  end;
  return;
end;

global
updating procedure ReadImportTagItemStatusVc(string thetag)
begin
  record ItemStatusVc ISr;
  record ItemStatusVc IS2r;
  Integer cnt,keys;
  record INVc INr;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    RecordNew(ISr);  
    ISr.Code = ImportField;
    ISr.Location = ImportField;
    ISr.UValue = StringToVal(ImportField,M4Qty);
    ISr.Instock = StringToVal(ImportField,M4Qty);
    ISr.OrddOut = StringToVal(ImportField,M4Qty);
    ISr.POQty = StringToVal(ImportField,M4Qty);
    ISr.RsrvQty = StringToVal(ImportField,M4Qty);
    ISr.POUnOKQty = StringToVal(ImportField,M4Qty);
    ISr.InShipment = StringToVal(ImportField,M4Qty);
    ISr.Instock2 = StringToVal(ImportField,M45Val);
    ISr.ProdOrd = StringToVal(ImportField,M4Qty);
    ISr.NoDataBefore = StringToDate(ImportField); 
    ISr.WOrd = StringToVal(ImportField,M4Qty);
    ISr.InWSheet = StringToVal(ImportField,M4Qty);
    ISr.LeadDate = StringToDate(ImportField); 
    ISr.WeighedAvPrice = StringToVal(ImportField,M45Val);
    if (ReadFirstItem(ISr.Code,INr,false,true)) then begin
    end;
    ISr.Variety = right(ISr.Code,len(ISr.Code)-len(INr.Code));
    ISr.Code = INr.Code;
    
    IS2r.Code = ISr.Code;
    IS2r.Location = ISr.Location;
    if (nonblank(ISr.Variety)) then begin
      IS2r.Variety = ISr.Variety;
      keys = 3;
    end else begin
      keys = 2;
    end;
    if (ReadFirstMain(IS2r,keys,true)) then begin
      if (RecordUpdate(IS2r,ISr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(ISr,false)) then begin end;
    end;
    cnt = cnt + 1;
  end;
  return;
end;

procedure ReadImportTagSVOSerVcRecord(record SVOSerVc SVOSerr)
begin
  RecordNew(SVOSerr);
  SVOSerr.SerialNr = ImportField;
  SVOSerr.ItemCode = ImportField;
  SVOSerr.ItemName = ImportField;
  SVOSerr.CustCode = ImportField;
  SVOSerr.CustName = ImportField;
  SVOSerr.xInStock = StringToVal(ImportField,M4UVal);
  SVOSerr.SalesPrice = StringToVal(ImportField,M423Val);
  SVOSerr.CostPrice = StringToVal(ImportField,M423Val);
  SVOSerr.SoldDate = StringToDate(ImportField);
  SVOSerr.WarrantyUntil = StringToDate(ImportField);
  SVOSerr.MotherNr = ImportField;
  SVOSerr.VECode = ImportField;
  SVOSerr.Contract = StringToLongint(ImportField);
  SVOSerr.ChildCONr = StringToLongint(ImportField);
  SVOSerr.WarrantyStatus = ImportField;
  SVOSerr.CoverageStartDate = StringToDate(ImportField);
  SVOSerr.EstimatedPurchaseDate = StringToDate(ImportField);
  SVOSerr.GlobalWarranty = StringToInt(ImportField);
  SVOSerr.OnsiteStartDate = StringToDate(ImportField);
  SVOSerr.OnsiteEndDate = StringToDate(ImportField);
  SVOSerr.PurchaseCountry = ImportField;
  SVOSerr.RegistrationDate = StringToDate(ImportField);
  SVOSerr.ImageURL = ImportField;
  SVOSerr.ExplodedViewURL = ImportField;
  SVOSerr.ManualURL = ImportField;
  SVOSerr.ProductDescription = ImportField;
  SVOSerr.ConfigDescription = ImportField;
  SVOSerr.SLAGroupDesc = ImportField;
  SVOSerr.PowerTrainFlag = StringToInt(ImportField);
  SVOSerr.TriCareFlag = StringToInt(ImportField);
  SVOSerr.EcorathFlag = StringToInt(ImportField);
  SVOSerr.ContractCoverageEndDate = StringToDate(ImportField);
  SVOSerr.ContractCoverageStartDate = StringToDate(ImportField);
  SVOSerr.ContractType = ImportField;
  SVOSerr.LaborCovered = StringToInt(ImportField);
  SVOSerr.LimitedWarranty = StringToInt(ImportField);
  SVOSerr.PartCovered = StringToInt(ImportField);
  SVOSerr.CSCode = ImportField;
  SVOSerr.CSType = ImportField;
  SVOSerr.Personalized = StringToInt(ImportField);
  SVOSerr.LastGSXQuery = StringToDate(ImportField);
  SVOSerr.WarrantyRefNo = ImportField;
  
  return;
end;

global
updating procedure ReadImportTagSVOSerVc(string thetag)
begin
  record SVOSerVc SVOSerr;
  record SVOSerVc SVOSer2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagSVOSerVcRecord(SVOSerr);
    SVOSer2r.SerialNr = SVOSerr.SerialNr;
    SVOSer2r.ItemCode = SVOSerr.ItemCode;
    if (ReadFirstMain(SVOSer2r,2,true)) then begin
//      if (RecordUpdate(SVOSer2r,SVOSerr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(SVOSerr,false)) then begin end;
    end;
  end;
  
  return;
end;
