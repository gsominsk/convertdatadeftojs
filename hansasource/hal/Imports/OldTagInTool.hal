external procedure ReadImportTagCClassDRecord(record CClassDVc);
external procedure ReadImportTagAttachmentsRecord(record Attach2Vc,record MailVc);
external procedure ReadImportTagPurchaseOrdersRecord(record POVc);
external procedure ReadImportTagGoodsReceiptsRecord(record PUVc,Integer);
external procedure ReadImportTagqtRecordRead(record QTVc);
external procedure ReadImportTagQuotesRecord(record QTVc);
external procedure ReadImportTagDeliveriesRecord(record SHVc);
external procedure ReadImportTagTransactionsRecord(record TRVc,Integer);
external procedure ReadImportTagPurchaseInvoicesRecord(record VIVc,Integer);
external procedure ReadImportTagSimulationsRecord(record SMVc);
external procedure ReadImportTagOrdersRecord(record ORVc);
external procedure ReadImportTagPaymentsRecord(record OPVc);
external procedure ReadImportTagInvoicesRecord(record IVVc);
external procedure ReadImportTagReceiptsRecord(record IPVc,Integer);
external procedure ReadImportTagAccountsRecord(record AccVc);
external procedure ReadImportTagArtikelInfo1RecordRead(record INVc);

external procedure CheckFlush(var Integer,Integer);
external updating procedure TestORArts(record ORVc);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure TRTestVATCode(record TRVc);
external updating function Boolean TRTestAccs(record TRVc);
external updating procedure SaveTrans(record TRVc);
external procedure SetORFlags(record ORVc);
external procedure ORSumup(var record ORVc);
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);

global
updating procedure ReadImportTagArtikelInfo1(string thetag)
begin
  record INVc INr;
  record INVc IN2r;
  Integer cnt;
  row INVc INrw;
  Integer rwcnt,i;
  
  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagArtikelInfo1RecordRead(INr);
    
    RecordNew(IN2r);
    IN2r.Code = INr.Code;
    if (ReadFirstMain(IN2r,1,true)) then begin
      rwcnt = MatRowCnt(IN2r);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IN2r,i,INrw);
        MatRowPut(INr,i,INrw);
      end;
      if (RecordImportStore(INr,false)) then begin end;
    end else begin
      if (RecordImportStore(INr,false)) then begin end;
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagAccounts()
begin
  record AccVc Accr;
  record AccVc Acc2r;
  Integer cnt;
  
  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagAccountsRecord(Accr);

    Acc2r.AccNumber = Accr.AccNumber;
    if (ReadFirstMain(Acc2r,1,true)) then begin
      if (blankuuid(Accr.UUID)) then begin
        Accr.UUID = Acc2r.UUID;
        Accr.ServerSequence = Acc2r.ServerSequence;
        Accr.SyncFlags = Acc2r.SyncFlags;
      end;
      if (RecordUpdate(Acc2r,Accr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Accr,false)) then begin end;
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagReceipts(Integer ver)
begin
  record IPVc IPr;
  record IPVc IP2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagReceiptsRecord(IPr,ver);

    IP2r.SerNr = IPr.SerNr;
    if (ReadFirstMain(IP2r,1,true)) then begin
//      if (RecordUpdate(IP2r,IPr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(IPr,false)) then begin end;
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagInvoices()
begin
  record IVVc IVr;
  record IVVc IV2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagInvoicesRecord(IVr);

    IV2r.SerNr = IVr.SerNr;
    if (ReadFirstMain(IV2r,1,true)) then begin
//      if (RecordUpdate(IV2r,IVr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(IVr,false)) then begin end;
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagPayments()
begin
  record OPVc OPr;
  record OPVc OP2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagPaymentsRecord(OPr);    

    OP2r.SerNr = OPr.SerNr;
    if (ReadFirstMain(OP2r,1,true)) then begin
//      if (RecordUpdate(OP2r,OPr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(OPr,false)) then begin end;
    end;
  end;
  return;
end;



global
updating procedure ReadImportTagOrders()
begin
  Integer cnt;
  record ORVc ORr;
  record ORVc OR2r;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagOrdersRecord(ORr);    

    OR2r.SerNr = ORr.SerNr;
    if (ReadFirstMain(OR2r,1,true)) then begin
//      if (RecordUpdate(OR2r,ORr,false)==0) then begin end;
    end else begin
      if (blank(ORr.Sum4)) then begin
        ORSumup(ORr);
      end;
      SetORFlags(ORr);
      if (Importing==false) then begin
        TestORArts(ORr);
      end;
      if (RecordImportStore(ORr,false)) then begin end;
    end;
  end;
  return;
end;


global
updating procedure ReadImportTagSimulations()
begin
  record SMVc SMr;
  record SMVc SM2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagSimulationsRecord(SMr);
    
    SM2r.SerNr = SMr.SerNr;
    if (ReadFirstMain(SM2r,1,true)) then begin
//      if (RecordUpdate(SM2r,SMr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(SMr,false)) then begin end;
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagPurchaseInvoices(Integer ver)
begin
  record VIVc VIr;
  record VIVc VI2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagPurchaseInvoicesRecord(VIr,ver);

    VI2r.SerNr = VIr.SerNr;
    if (ReadFirstMain(VI2r,1,true)) then begin
//      if (RecordUpdate(VI2r,VIr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(VIr,false)) then begin end;
    end;
  end;
  return;
end;

updating function Boolean TransactionsSideeffect(var record TRVc TRr)
begin
  Boolean res;

  res = TRTestAccs(TRr);
  TRTestVATCode(TRr);
/*this is import from 1.2 version
  if (oldSim) then begin
    if (TestOldSim(TRr.Number,TRr.TransDate) and (TRr.IntYc<IVYc)) then begin
      SaveTRasSM(TRr);
    end else begin
      SaveTrans(TRr);
    end;
  end else begin
    SaveTrans(TRr);
  end;
*/  
  SaveTrans(TRr);
  TransactionsSideeffect = res;
  return;
end;
 
global
updating procedure ReadImportTagTransactions(Integer ver)
begin
  Integer cnt;
  record TRVc TRr;
  record TRVc TR2r;
  Boolean sidef;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagTransactionsRecord(TRr,ver);

    TR2r.Number = TRr.Number;
    TR2r.IntYc = TRr.IntYc;
    if (ReadFirstMain(TR2r,2,true)) then begin
//      if (RecordUpdate(TR2r,TRr,false)==0) then begin end;
    end else begin
      if (CheckTrans(TRr,0,false)=="") then begin end;
      if (ver==3) then begin        
        sidef = TransactionsSideeffect(TRr);
      end;
      if (RecordImportStore(TRr,false)) then begin end;
    end;
  end;
  if (sidef) then begin
    MessageBox(1069,"");
  end;
  return;
end;

global
updating procedure ReadImportTagDeliveries()
begin
  record SHVc SHr;
  record SHVc SH2r;
  Integer cnt;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagDeliveriesRecord(SHr);    
    
    SH2r.SerNr = SHr.SerNr;
    if (ReadFirstMain(SH2r,1,true)) then begin
//      if (RecordUpdate(SH2r,SHr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(SHr,false)) then begin end;
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagQuotes()
begin
  Integer cnt;
  record QTVc QTr;
  record QTVc QT2r;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagQuotesRecord(QTr);

    QT2r.SerNr = QTr.SerNr;
    if (ReadFirstMain(QT2r,1,true)) then begin
//      if (RecordUpdate(QT2r,QTr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(QTr,false)) then begin end;
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagqt(string thetag)
begin
  Integer cnt;
  record QTVc QTr;
  record QTVc QT2r;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagqtRecordRead(QTr);

    QT2r.SerNr = QTr.SerNr;
    if (ReadFirstMain(QT2r,1,true)) then begin
//      if (RecordUpdate(QT2r,QTr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(QTr,false)) then begin end;
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagGoodsReceipts(Integer ver)
begin
  Integer cnt;
  record PUVc PUr;
  record PUVc PU2r;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagGoodsReceiptsRecord(PUr,ver);
            
    PU2r.SerNr = PUr.SerNr;
    if (ReadFirstMain(PU2r,1,true)) then begin
//      if (RecordUpdate(PU2r,PUr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(PUr,false)) then begin end;
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagPurchaseOrders()
begin
  Integer cnt;
  record POVc POr;
  record POVc PO2r;

  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagPurchaseOrdersRecord(POr);
    
    PO2r.SerNr = POr.SerNr;
    if (ReadFirstMain(PO2r,1,true)) then begin
//      if (RecordUpdate(PO2r,POr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(POr,false)) then begin end;
    end;    
  end;
  return;
end;

global
updating procedure ReadImportTagAttachments()
begin
  record Attach2Vc Attachr;
  record Attach2Vc Attach2r;
  record MailVc Mailr;
  Integer cnt,curcomp;
  
  curcomp = CurrentCompany;
  cnt = 0;
  while (NextImportLine(false)) begin
    CheckFlush(cnt,10);
    ReadImportTagAttachmentsRecord(Attachr,Mailr);

    CreateRecordLink(Mailr,curcomp,Attachr,curcomp);  
    if (ReadFirstMain(Attach2r,1,true)) then begin
//      if (RecordUpdate(Attach2r,Attachr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Attachr,false)) then begin end;
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagAttach2Vc()
begin
  record Attach2Vc Attachr;
  
  while (NextImportLine(false)) begin
    RecordNew(Attachr);
    
    Attachr.SerNr = StringToLongInt(ImportField);
    Attachr.FileName = ImportField;
    Attachr.PackTyp = StringToInt(ImportField);
    Attachr.Uploading = StringToInt(ImportField);
    Attachr.FileSize = StringToLongInt(ImportField);
    Attachr.Type = StringToInt(ImportField);
    
    RecordImportStore(Attachr,false);
  end;
end;

procedure ReadOldRepGenHeader(record RepGenVc RepGenr)
begin
  RepGenr.Code = ImportField;
  RepGenr.xxinModule = ImportField;
  RepGenr.TransDate = StringToDate(ImportField);
  RepGenr.Comment = ImportField;
  RepGenr.MainLoopVc = ImportField;
  RepGenr.MainKey = ImportField;
  RepGenr.Media = StringToInt(ImportField);
  RepGenr.JobDf = StringToInt(ImportField);
  RepGenr.Width = StringToLongInt(ImportField);
  RepGenr.Scaling = StringToInt(ImportField);
  RepGenr.SpecWinWidth = StringToLongInt(ImportField);
  RepGenr.SpecWinHeigth = StringToLongInt(ImportField);
  RepGenr.SkipHeader = StringToInt(ImportField);
end;

procedure ReadOldRepGenRow(row RepGenVc RepGenrw)
begin
  RepGenrw.stp = StringToInt(ImportField);
  RepGenrw.Cond1 = ImportField;
  RepGenrw.Oper = ImportField;
  RepGenrw.Cond2 = ImportField;
  RepGenrw.rj = StringToLongInt(ImportField);
  RepGenrw.Col1 = StringToLongInt(ImportField);
  RepGenrw.Col2 = StringToLongInt(ImportField);
  RepGenrw.vPos = StringToLongInt(ImportField);
  RepGenrw.Type = StringToInt(ImportField);
  RepGenrw.xxSetType = StringToInt(ImportField);
  RepGenrw.setno = StringToInt(ImportField);
  RepGenrw.Dirf = StringToInt(ImportField);
  RepGenrw.Record = ImportField;
  RepGenrw.Key = ImportField;
  RepGenrw.SectionType = StringToInt(ImportField);
  RepGenrw.BaseLine = StringToVal(ImportField,M4Val);
  RepGenrw.S3 = ImportField;
  RepGenrw.S4 = ImportField;
  RepGenrw.S5 = ImportField;
  RepGenrw.S6 = ImportField;
  RepGenrw.LineHeight = StringToVal(ImportField,M4UVal);
  RepGenrw.Drillf = StringToInt(ImportField);
  RepGenrw.h = StringToLongInt(ImportField);
  RepGenrw.v = StringToLongInt(ImportField);
  RepGenrw.l = StringToLongInt(ImportField);
  RepGenrw.rowtyp = StringToLongInt(ImportField);
  RepGenrw.l1 = StringToLongInt(ImportField);
  RepGenrw.l2 = StringToLongInt(ImportField);
  RepGenrw.l3 = StringToLongInt(ImportField);
  RepGenrw.l4 = StringToLongInt(ImportField);
  RepGenrw.l5 = StringToLongInt(ImportField);
  RepGenrw.f1 = StringToInt(ImportField);
  RepGenrw.f2 = StringToInt(ImportField);
  RepGenrw.f3 = StringToInt(ImportField);
  RepGenrw.f4 = StringToInt(ImportField);
  RepGenrw.f5 = StringToInt(ImportField);
end;

global
updating procedure ReadImportTagRepGenVc()
begin
  record RepGenVc RepGenr;
  row RepGenVc RepGenrw;
  integer rwcnt;
  
  while (NextImportLine(false)) begin
    RecordNew(RepGenr);
    
    ReadOldRepGenHeader(RepGenr);
    
    rwcnt = 0;
    while (NextImportLine(false)) begin
      ClearRow(RepGenr,RepGenrw,1);
      ReadOldRepGenRow(RepGenrw);
      MatRowPut(RepGenr,rwcnt,RepGenrw);
      rwcnt = rwcnt + 1;
    end;
    
    RecordImportStore(RepGenr,false);
  end;
  return;
end;

updating procedure ReadImportTagSupplierWithholdingsRecord(record WHVEVc oWHVEr,record WHVEVc WHVEr)
begin
  return;
end;

global
updating procedure ReadImportTagSupplierWithholdings(Integer ver)
begin
  record WHVEVc WHVEr;
  record WHVEVc WHVE2r;
  record WHVEVc oWHVEr;
  Integer cnt;
  row WHVEVc WHVErw;
  row WHVEVc WHVErw2;
  Integer i,j,rwcnt;
  Date startdate,blankd;

  cnt = 0;
  while (NextImportLine(false)) begin
    RecordClear(WHVEr);
    startdate = blankd;    
    WHVEr.VECode = ImportField;
    WHVEr.Comment = ImportField;
    rwcnt = 0;
    while (NextImportLine(false)) begin
      ClearRow(WHVEr,WHVErw,1);
      WHVErw.WHTax = ImportField;
      WHVErw.StartDate = StringToDate(ImportField);
      if (blankdate(startdate)) then begin
        startdate = WHVErw.StartDate;
      end;
      WHVErw.Discount = StringToVal(ImportField,M4Val);
      WHVErw.Comment = ImportField;
      MatRowPut(WHVEr,rwcnt,WHVErw);
      rwcnt = rwcnt + 1;
    end;
    WHVEr.StartDate = startdate;
    
    RecordCopy(oWHVEr,WHVEr);    
    rwcnt = MatRowCnt(WHVEr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(WHVEr,i,WHVErw);
      for (j=i+1;j<rwcnt;j=j+1) begin
        MatRowGet(WHVEr,j,WHVErw2);
        if (WHVErw2.WHTax==WHVErw.WHTax) then begin
          if (blankdate(WHVEr.EndDate)) then begin
            WHVEr.EndDate = AddDay(WHVEr.StartDate,-1);
            MatRowPut(WHVEr,i,WHVErw);
          end;
          MatRowDelete(WHVEr,j);
          rwcnt = MatRowCnt(WHVEr);
          j = rwcnt;
          i = 0;
        end;
      end;
    end;
    oWHVEr.EndDate = WHVEr.EndDate;
    
    WHVE2r.VECode = WHVEr.VECode;
    WHVE2r.StartDate = WHVEr.StartDate;
    if (ReadFirstMain(WHVE2r,2,true)) then begin
//      if (RecordUpdate(WHVE2r,WHVEr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(WHVEr,false)) then begin end;
//      ReadImportTagSupplierWithholdingsRecord(oWHVEr,WHVEr); //?
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagPurchaseItems(Integer ver)
begin
  record PIVc PIr;
  record PIVc PI2r;
  row PIVc PIrw;
  Integer rwcnt;

  while (NextImportLine(false)) begin
    RecordClear(PIr);
    PIr.ItemCode = ImportField;
    PIr.VECode = ImportField;
    PIr.VEItemCode = ImportField;
    PIr.Comment = ImportField;
    PIr.PurPrice = StringToVal(ImportField,M45Val);
    PIr.DefaultChoice = StringToInt(ImportField);
    PIr.VEName = ImportField;
    PIr.NormPOQty = StringToVal(ImportField,M4Qty);
    PIr.MinPOQty = StringToVal(ImportField,M4Qty);
    PIr.Manufacturer = ImportField;
    PIr.OrgCountry = ImportField;
    PIr.VendDefChoice = StringToInt(ImportField);
    PIr.PIFactor = StringToVal(ImportField,M45Val);
    PIr.PurchaseCost = ImportField;
    PIr.CurncyCode = ImportField;
    PIr.ExtraCaost = StringToVal(ImportField,M4Val);
    PIr.Unit = ImportField;
    PIr.VEUnit = ImportField;
    PIr.PlannedDelDays = StringToVal(ImportField,M4UVal);
    PIr.SalesGroup = ImportField;
    PIr.SalesMan = ImportField;
    PIr.Location = ImportField;

    rwcnt = 0;
    while (NextImportLine(false)) begin
      ClearRow(PIr,PIrw,1);
      PIrw.Text = ImportField;
      MatRowPut(PIr,rwcnt,PIrw);
      rwcnt = rwcnt + 1;
    end;
    if (ReadFirstMain(PI2r,2,true)) then begin
//      if (RecordUpdate(PI2r,PIr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(PIr,false)) then begin end;
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagCClassDVc()
begin
  Integer cnt;
  record CClassDVc CCDr;
  record CClassDVc CCD2r;

  cnt = 0;
  while (NextImportLine(false)) begin
    ReadImportTagCClassDRecord(CCDr);

    CCD2r.Code = CCDr.Code;
    if (ReadFirstMain(CCD2r,1,true)) then begin
//      if (RecordUpdate(QT2r,CCDr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(CCDr,false)) then begin end;
    end;
  end;
  return;
end;
