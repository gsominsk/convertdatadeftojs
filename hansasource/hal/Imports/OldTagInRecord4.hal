
procedure ReadImportTaglocationRecord(record LocationVc Locationr)
begin
  RecordNew(Locationr);
  Locationr.Code = ImportField;
  Locationr.Name = ImportField;
  Locationr.Addr0 = ImportField;
  Locationr.Addr1 = ImportField;
  Locationr.Addr2 = ImportField;
  Locationr.Contact = ImportField;
  Locationr.Phone = ImportField;
  Locationr.Fax = ImportField;
  Locationr.StockAcc = ImportField;
  Locationr.IgnoreChronology = StringToInt(ImportField);
  Locationr.LastOKNr = StringToVal(ImportField,M4Qty);
  Locationr.Email = ImportField;
  Locationr.PriceList = ImportField;
  Locationr.RequirePos = StringToInt(ImportField);
  Locationr.Addr3 = ImportField;
  Locationr.Addr4 = ImportField;
  Locationr.Objects = ImportField;
  Locationr.Type = StringToInt(ImportField);
  Locationr.RespPerson = ImportField;
  Locationr.ReservLocAccess = ImportField;
  Locationr.BranchID = ImportField;
  Locationr.PurLoc = ImportField;
  Locationr.ShipToAccount = ImportField;
  Locationr.Group = ImportField;
  Locationr.Classification = ImportField;
  Locationr.WHMPalletArea = ImportField;
  Locationr.WHMDefPUPosCode = ImportField;
  Locationr.WHMDefProdPosCode = ImportField;
  Locationr.WHMPickArea = ImportField;
  Locationr.WHMWraperPosCode = ImportField;
  Locationr.WHMDeliveryPosCode = ImportField;
  Locationr.WHMForkLiftSystem = StringToInt(ImportField);
  Locationr.WHMAutOKStockMovements = StringToInt(ImportField);
  Locationr.WHMDeliveryArea = ImportField;
  Locationr.WHMPickOrderPerArea = StringToInt(ImportField);
  Locationr.WHMHighestPosCodeFirst = StringToInt(ImportField);
  Locationr.WHMDefPUVECode = ImportField;
  Locationr.WHMExpressOrderClass = ImportField;
  
  return;
end;

global
updating procedure ReadImportTaglocation(string thetag)
begin
  record LocationVc Locationr;
  record LocationVc Location2r;
  
  while (NextImportLine(false)) begin
    ReadImportTaglocationRecord(Locationr);
    Location2r.Code = Locationr.Code;
    if (ReadFirstMain(Location2r,1,true)) then begin
      if (blankuuid(Locationr.UUID)) then begin
        Locationr.UUID = Location2r.UUID;
        Locationr.ServerSequence = Location2r.ServerSequence;
        Locationr.SyncFlags = Location2r.SyncFlags;
      end;
      if (RecordUpdate(Location2r,Locationr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Locationr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrlocation(Integer compnr,string thetag)
begin
  record LocationVc Locationr;
  
  Locationr.Code = ImportField;
  ReadRecordIdStrlocation = BuildRecordIdStr(Locationr,compnr);
  return;
end;

procedure ReadImportTagCredCardTypeVcRecord(record CredCardTypeVc CredCardTyper)
begin
  RecordNew(CredCardTyper);
  CredCardTyper.Code = ImportField;
  CredCardTyper.CardType = StringToInt(ImportField);
  CredCardTyper.Comment = ImportField;
  CredCardTyper.Interest = StringToVal(ImportField,M4Qty);
  CredCardTyper.Fee = StringToVal(ImportField,M4Val);
  CredCardTyper.Direct = StringToInt(ImportField);
  CredCardTyper.VECode = ImportField;
  CredCardTyper.AccNumber = ImportField;
  CredCardTyper.AccNumber1 = ImportField;
  CredCardTyper.AccNumber2 = ImportField;
  CredCardTyper.CompCode1 = ImportField;
  CredCardTyper.CompCode2 = ImportField;
  CredCardTyper.CompCode3 = ImportField;
  CredCardTyper.CompCode4 = ImportField;
  CredCardTyper.CompCode5 = ImportField;
  CredCardTyper.PayMode = ImportField;
  CredCardTyper.UseOnWeb = StringToInt(ImportField);
  CredCardTyper.UseOnPos = StringToInt(ImportField);
  CredCardTyper.PayTerm = ImportField;
  CredCardTyper.TargetAcc = ImportField;
  
  return;
end;

global
updating procedure ReadImportTagCredCardTypeVc(string thetag)
begin
  record CredCardTypeVc CredCardTyper;
  record CredCardTypeVc CredCardType2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagCredCardTypeVcRecord(CredCardTyper);
    CredCardType2r.Code = CredCardTyper.Code;
    if (ReadFirstMain(CredCardType2r,1,true)) then begin
      if (blankuuid(CredCardTyper.UUID)) then begin
        CredCardTyper.UUID = CredCardType2r.UUID;
        CredCardTyper.ServerSequence = CredCardType2r.ServerSequence;
        CredCardTyper.SyncFlags = CredCardType2r.SyncFlags;
      end;
      if (RecordUpdate(CredCardType2r,CredCardTyper,false)==0) then begin end;
    end else begin
      if (RecordImportStore(CredCardTyper,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrCredCardTypeVc(Integer compnr,string thetag)
begin
  record CredCardTypeVc CredCardTyper;
  
  CredCardTyper.Code = ImportField;
  ReadRecordIdStrCredCardTypeVc = BuildRecordIdStr(CredCardTyper,compnr);
  return;
end;

procedure ReadImportTagkonto4Record(record AccVc Accr)
begin
  row AccVc Accrw;
  integer rwcnt;
  
  RecordNew(Accr);
  Accr.AccNumber = ImportField;
  Accr.Comment = ImportField;
  Accr.AccType = StringToInt(ImportField);
  Accr.NVD = StringToInt(ImportField);
  Accr.NVC = StringToInt(ImportField);
  Accr.AutCode = ImportField;
  Accr.blockedFlag = StringToInt(ImportField);
  Accr.VATCode = ImportField;
  Accr.ControlType = StringToInt(ImportField);
  Accr.Curncy = ImportField;
  Accr.ConsAccNumber = ImportField;
  Accr.Conspr = StringToInt(ImportField);
  Accr.Objects = ImportField;
  Accr.SRUCode = ImportField;
  Accr.ExclFrRep = StringToInt(ImportField);
  Accr.PeriodCode = ImportField;
  Accr.GroupAcc = StringToInt(ImportField);
  Accr.TransAutCode = ImportField;
  Accr.TaxTemplateCode = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(Accr,Accrw,1);
    Accrw.LangCode = ImportField;
    Accrw.Text = ImportField;
    MatRowPut(Accr,rwcnt,Accrw);
    rwcnt = rwcnt + 1;
  end;
  

  return;
end;

global
updating procedure ReadImportTagkonto4(string thetag)
begin
  record AccVc Accr;
  record AccVc Acc2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagkonto4Record(Accr);
    Acc2r.AccNumber = Accr.AccNumber;
    if (ReadFirstMain(Acc2r,1,true)) then begin
      if (blankuuid(Accr.UUID)) then begin
        Accr.UUID = Acc2r.UUID;
        Accr.ServerSequence = Acc2r.ServerSequence;
        Accr.SyncFlags = Acc2r.SyncFlags;
      end;
      if (RecordUpdate(Acc2r,Accr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(Accr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrkonto4(Integer compnr,string thetag)
begin
  record AccVc Accr;
  
  Accr.AccNumber = ImportField;
  ReadRecordIdStrkonto4 = BuildRecordIdStr(Accr,compnr);
  return;
end;

global
updating procedure ReadImportTagPOSCurrenciesBlock(string thetag)
begin
  record POSCurrenciesBlock POSCurrenciesr;
  
  if (NextImportLine(false)) then begin
    POSCurrenciesr.Currencies = ImportField;
    POSCurrenciesr.ChangeCurrencies = ImportField;
    
    BlockStore(POSCurrenciesr);
  end;
  
  return;
end;

global
updating procedure ReadImportTagCashPrintBlock(string thetag)
begin
  record CashPrintBlock CPb;
  
  if (NextImportLine(false)) then begin
    CPb.Head0 = ImportField;
    CPb.Head1 = ImportField;
    CPb.Head2 = ImportField;
    CPb.Head3 = ImportField;
    CPb.Head4 = ImportField;
    CPb.Foot0 = ImportField;
    CPb.Foot1 = ImportField;
    CPb.Foot2 = ImportField;
    CPb.Foot3 = ImportField;
    CPb.Foot4 = ImportField;
    CPb.PrinterType = StringToInt(ImportField);
    CPb.MinCashLen = StringToInt(ImportField);
    CPb.CommPort = ImportField;
    CPb.FiscalPrinter = StringToInt(ImportField);
    CPb.DisplayText = ImportField;    
    BlockStore(CPb);
  end;
  
  return;
end;

global
updating procedure ReadImportTagFormBlock(string thetag)
begin
  record FormBlock Formb;
  
  if (NextImportLine(false)) then begin
    Formb.PrintBlankLines = StringToInt(ImportField);
    Formb.PrintOrgName = StringToInt(ImportField);
    Formb.Addr0NoNewLine = StringToInt(ImportField);
    Formb.Addr0TrailingSep = ImportField;
    Formb.Addr1NoNewLine = StringToInt(ImportField);
    Formb.Addr1TrailingSep = ImportField;
    Formb.Addr2NoNewLine = StringToInt(ImportField);
    Formb.Addr2TrailingSep = ImportField;
    Formb.Addr3NoNewLine = StringToInt(ImportField);
    Formb.Addr3TrailingSep = ImportField;
    Formb.Addr4NoNewLine = StringToInt(ImportField);
    Formb.Addr4TrailingSep = ImportField;
    BlockStore(Formb);
  end;
  
  return;
end;

procedure ReadImportTagPersonnelPaymentRecord(record PPVc PPr)
begin
  row PPVc PPrw;
  integer rwcnt;
  
  RecordClear(PPr);
  PPr.SerNr = StringToLongInt(ImportField);
  PPr.BankAcc = ImportField;
  PPr.Sign = ImportField;
  PPr.PayVal = StringToVal(ImportField,M4Val);
  PPr.RegDate = StringToDate(ImportField);
  PPr.TransDate = StringToDate(ImportField);
  PPr.PayMode = ImportField;
  PPr.OrderedFlag = StringToInt(ImportField);
  PPr.SentFlag = StringToInt(ImportField);
  PPr.DoneFlag = StringToInt(ImportField);
  PPr.BankName = ImportField;
  PPr.CurncyCode = ImportField;
  PPr.ToRateB1 = StringToVal(ImportField,M4Rate);
  PPr.BasePayVal = StringToVal(ImportField,M4Val);
  PPr.ExtraCost = StringToVal(ImportField,M4Val);
  PPr.PayDate = StringToDate(ImportField);
  PPr.xStatFlag = StringToInt(ImportField);
  PPr.ExportedFlag = StringToInt(ImportField);
  PPr.FrRate = StringToVal(ImportField,M4Rate);
  PPr.ToRateB2 = StringToVal(ImportField,M4Rate);
  PPr.BaseRate1 = StringToVal(ImportField,M4Rate);
  PPr.BaseRate2 = StringToVal(ImportField,M4Rate);
  PPr.PPOKNr = StringToLongInt(ImportField);
  PPr.Invalid = StringToInt(ImportField);  
  rwcnt = 0;  
  while (NextImportLine(false)) begin
    ClearRow(PPr,PPrw,1);
    PPrw.stp = StringToInt(ImportField);
    PPrw.ovst = StringToInt(ImportField);
    PPrw.Person = ImportField;
    PPrw.BankAcc = ImportField;
    PPrw.Comment = ImportField;
    PPrw.PayVal = StringToVal(ImportField,M4Val);
    PPrw.Objects = ImportField;
    PPrw.PayMode = ImportField;
    PPrw.ChequeNr = StringToLongInt(ImportField);
    PPrw.rkPayNumber = ImportField;
    PPrw.ExpUsedPayVal = PPrw.PayVal;
    MatRowPut(PPr,rwcnt,PPrw);
    rwcnt = rwcnt + 1;
  end;  
  return;
end;

global
updating procedure ReadImportTagpp1(string thetag)
begin
  record PPVc PPr;
  record PPVc PP2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagPersonnelPaymentRecord(PPr);
    PP2r.SerNr = PPr.SerNr;
    if (ReadFirstMain(PP2r,1,true)) then begin
      if (RecordUpdate(PP2r,PPr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(PPr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
updating procedure ReadImportTagLoyaltyPointsVc2(string thetag)
begin
  record LocLoyaltyPointsVc LLPr;
  row LocLoyaltyPointsVc LLPrw;
  Integer rwcnt;
  string 255 dummystr;
  
  if (NextImportLine(false)) then begin
    LLPr.Location = ImportField;
    LLPr.Comment = ImportField;

    rwcnt = 0;  
    while (NextImportLine(false)) begin
      ClearRow(LLPr,LLPrw,1);
      LLPr.LCMLevel = ImportField;
      
      LLPrw.Amount = StringToVal(ImportField,M4Val);
      LLPrw.RndTo = StringToInt(ImportField);
      LLPrw.Points = StringToVal(ImportField,M4Val);
      MatRowPut(LLPr,rwcnt,LLPrw);
      
      if (RecordImportStore(LLPr,false)) then begin
      end;
    end;    
  end;  
  return;
end;

global
updating procedure ReadImportTagLoyPointsRedeemVc2(string thetag)
begin
  record LocLoyPointsRedeemVc LLPRr;
  row LocLoyPointsRedeemVc LLPRrw;
  Integer rwcnt;
  string 255 dummystr;
  
  if (NextImportLine(false)) then begin
    LLPRr.Location = ImportField;
    LLPRr.Comment = ImportField;

    rwcnt = 0;  
    while (NextImportLine(false)) begin
      ClearRow(LLPRr,LLPRrw,1);
      LLPRr.LCMLevel = ImportField;
      
      LLPRrw.Amount = StringToVal(ImportField,M4Val);
      LLPRrw.Points = StringToVal(ImportField,M4Val);
      MatRowPut(LLPRr,rwcnt,LLPRrw);
      
      if (RecordImportStore(LLPRr,false)) then begin
      end;
    end;    
  end;  
  return;
end;

global
updating procedure ReadImportTagLoyaltyPointsBlock(string thetag)
begin
  record LoyaltyPointsVc LPr;
  
  while (NextImportLine(false)) begin
    LPr.LCMLevel = ImportField;
    LPr.Amount = StringToVal(ImportField,M4Val);
    LPr.RndTo = StringToLongInt(ImportField);
    LPr.Points = StringToVal(ImportField,M4Val);         
    if (RecordImportStore(LPr,false)) then begin
    end;
  end;
  return;
end;

global
updating procedure ReadImportTagLoyPointRedeemBlock(string thetag)
begin
  record LoyPointsRedeemVc LPRr;
  
  while (NextImportLine(false)) begin
    LPRr.LCMLevel = ImportField;
    LPRr.Amount = StringToVal(ImportField,M4Val);
    LPRr.Points = StringToVal(ImportField,M4Val);         
    if (RecordImportStore(LPRr,false)) then begin
    end;
  end;
  return;
end;

procedure ReadImportTagVARVc2Record(record VARVc VARr)
begin
  row VARVc VARrw;
  integer rwcnt;
  
  RecordNew(VARr);
  VARr.Code = ImportField;
  VARr.Comment = ImportField;
  VARr.VARGCode = ImportField;
  VARr.TerminateFlag = StringToInt(ImportField);
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(VARr,VARrw,1);
    VARrw.LangCode = ImportField;
    VARrw.Text = ImportField;
    MatRowPut(VARr,rwcnt,VARrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagVARVc2(string thetag)
begin
  record VARVc VARr;
  record VARVc VAR2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagVARVc2Record(VARr);
    VAR2r.Code = VARr.Code;
    if (ReadFirstMain(VAR2r,1,true)) then begin
      if (blankuuid(VARr.UUID)) then begin
        VARr.UUID = VAR2r.UUID;
        VARr.ServerSequence = VAR2r.ServerSequence;
        VARr.SyncFlags = VAR2r.SyncFlags;
      end;
      if (RecordUpdate(VAR2r,VARr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(VARr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrVARVc2(Integer compnr,string thetag)
begin
  record VARVc VARr;
  
  VARr.Code = ImportField;
  ReadRecordIdStrVARVc2 = BuildRecordIdStr(VARr,compnr);
  return;
end;

procedure ReadImportTagVARSubsetsVc2Record(record VARSubsetsVc VARSubsetsr)
begin
  RecordNew(VARSubsetsr);
  VARSubsetsr.Code = ImportField;
  VARSubsetsr.Subset = ImportField;
  VARSubsetsr.Comment = ImportField;
  
  return;
end;

global
updating procedure ReadImportTagVARSubsetsVc2(string thetag)
begin
  record VARSubsetsVc VARSubsetsr;
  record VARSubsetsVc VARSubsets2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagVARSubsetsVc2Record(VARSubsetsr);
    VARSubsets2r.Code = VARSubsetsr.Code;
    if (ReadFirstMain(VARSubsets2r,1,true)) then begin
      if (blankuuid(VARSubsetsr.UUID)) then begin
        VARSubsetsr.UUID = VARSubsets2r.UUID;
        VARSubsetsr.ServerSequence = VARSubsets2r.ServerSequence;
        VARSubsetsr.SyncFlags = VARSubsets2r.SyncFlags;
      end;
      if (RecordUpdate(VARSubsets2r,VARSubsetsr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(VARSubsetsr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrVARSubsetsVc2(Integer compnr,string thetag)
begin
  record VARSubsetsVc VARSubsetsr;
  
  VARSubsetsr.Code = ImportField;
  ReadRecordIdStrVARSubsetsVc2 = BuildRecordIdStr(VARSubsetsr,compnr);
  return;
end;

procedure ReadImportTagVARMasksVc2Record(record VARMasksVc VARMasksr)
begin
  RecordNew(VARMasksr);
  VARMasksr.Code = ImportField;
  VARMasksr.Masks = ImportField;
  VARMasksr.Comment = ImportField;
  
  return;
end;

global
updating procedure ReadImportTagVARMasksVc2(string thetag)
begin
  record VARMasksVc VARMasksr;
  record VARMasksVc VARMasks2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagVARMasksVc2Record(VARMasksr);
    VARMasks2r.Code = VARMasksr.Code;
    if (ReadFirstMain(VARMasks2r,1,true)) then begin
      if (blankuuid(VARMasksr.UUID)) then begin
        VARMasksr.UUID = VARMasks2r.UUID;
        VARMasksr.ServerSequence = VARMasks2r.ServerSequence;
        VARMasksr.SyncFlags = VARMasks2r.SyncFlags;
      end;
      if (RecordUpdate(VARMasks2r,VARMasksr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(VARMasksr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrVARMasksVc2(Integer compnr,string thetag)
begin
  record VARMasksVc VARMasksr;
  
  VARMasksr.Code = ImportField;
  ReadRecordIdStrVARMasksVc2 = BuildRecordIdStr(VARMasksr,compnr);
  return;
end;

procedure ReadImportTagVARGVcRecord(record VARGVc VARGr)
begin
  RecordNew(VARGr);
  VARGr.Code = ImportField;
  VARGr.Comment = ImportField;
  VARGr.VarSize = ImportField;
  VARGr.TopOnDocMat = StringToInt(ImportField);
  
  return;
end;

global
updating procedure ReadImportTagVARGVc(string thetag)
begin
  record VARGVc VARGr;
  record VARGVc VARG2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagVARGVcRecord(VARGr);
    VARG2r.Code = VARGr.Code;
    if (ReadFirstMain(VARG2r,1,true)) then begin
      if (blankuuid(VARGr.UUID)) then begin
        VARGr.UUID = VARG2r.UUID;
        VARGr.ServerSequence = VARG2r.ServerSequence;
        VARGr.SyncFlags = VARG2r.SyncFlags;
      end;
      if (RecordUpdate(VARG2r,VARGr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(VARGr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrVARGVc(Integer compnr,string thetag)
begin
  record VARGVc VARGr;
  
  VARGr.Code = ImportField;
  ReadRecordIdStrVARGVc = BuildRecordIdStr(VARGr,compnr);
  return;
end;

procedure ReadImportTagIVVcRecord(record IVVc IVr)
begin
  record TaxMatrixVc TMr;
  row IVVc IVrw;
  integer rwcnt;
  
  RecordNew(IVr);
  IVr.SerNr = StringToLongint(ImportField);
  IVr.InvDate = StringToDate(ImportField);
  IVr.CustCode = ImportField;
  IVr.PayDate = StringToDate(ImportField);
  IVr.Addr0 = ImportField;
  IVr.Addr1 = ImportField;
  IVr.Addr2 = ImportField;
  IVr.Addr3 = ImportField;
  IVr.OurContact = ImportField;
  IVr.ClientContact = ImportField;
  IVr.ExportFlag = StringToInt(ImportField);
  IVr.PayDeal = ImportField;
  IVr.OrderNr = StringToLongint(ImportField);
  IVr.Prntdf = StringToInt(ImportField);
  IVr.OKFlag = StringToInt(ImportField);
  IVr.pdays = StringToLongint(ImportField);
  IVr.pdvrebt = StringToVal(ImportField,M4Qty);
  IVr.pdrdays = StringToLongint(ImportField);
  IVr.CustCat = ImportField;
  IVr.pdComment = ImportField;
  /*IVr.x1 =*/ ImportField;
  IVr.InvType = StringToInt(ImportField);
  if (HasLocalization("RUS")) then begin
    if (IVr.InvType==kInvoiceTypeDebit) then begin
      IVr.InvType = kInvoiceTypePrepayment;
    end;
  end;
  IVr.xStatFlag = StringToInt(ImportField);
  IVr.PriceList = ImportField;
  IVr.Objects = ImportField;
  IVr.InclVAT = StringToInt(ImportField);
  IVr.ARAcc = ImportField;
  IVr.InvComment = ImportField;
  IVr.CredInv = StringToLongint(ImportField);
  IVr.CredMark = ImportField;
  IVr.SalesMan = ImportField;
  IVr.ToRateB1 = StringToVal(ImportField,M4Rate);
  IVr.TransDate = StringToDate(ImportField);
  IVr.CurncyCode = ImportField;
  IVr.LangCode = ImportField;
  IVr.UpdStockFlag = StringToInt(ImportField);
  IVr.LastRemndr = StringToLongint(ImportField);
  IVr.LastRemDate = StringToDate(ImportField);
  IVr.Sign = ImportField;
  IVr.FrPrice = StringToVal(ImportField,M4Val);
  IVr.FrBase = StringToVal(ImportField,M4Val);
  IVr.FrItem = ImportField;
  IVr.FrVATCode = ImportField;
  IVr.FrObjects = ImportField;
  IVr.OrgCust = ImportField;
  IVr.FrGP = StringToVal(ImportField,M4Val);
  IVr.FrGPPercent = StringToVal(ImportField,M4Val);
  IVr.Sum0 = StringToVal(ImportField,M4Val);
  IVr.Sum1 = StringToVal(ImportField,M4Val);
  IVr.Sum2 = StringToVal(ImportField,M4Val);
  IVr.Sum3 = StringToVal(ImportField,M4Val);
  IVr.Sum4 = StringToVal(ImportField,M4Val);
  IVr.VATNr = ImportField;
  IVr.ShipDeal = ImportField;
  IVr.ShipAddr0 = ImportField;
  IVr.ShipAddr1 = ImportField;
  IVr.ShipAddr2 = ImportField;
  IVr.ShipAddr3 = ImportField;
  IVr.ShipMode = ImportField;
  IVr.Location = ImportField;
  IVr.PRCode = ImportField;
  IVr.FrSalesAcc = ImportField;
  IVr.TAX1Sum = StringToVal(ImportField,M4Val);
  IVr.CustVATCode = ImportField;
  IVr.RebCode = ImportField;
  IVr.CalcFinRef = ImportField;
  IVr.Phone = ImportField;
  IVr.Fax = ImportField;
  IVr.IntCode = ImportField;
  IVr.ARonTR = StringToInt(ImportField);
  IVr.CustOrdNr = ImportField;
  IVr.ExportedFlag = StringToInt(ImportField);
  IVr.BaseSum4 = StringToVal(ImportField,M4Val);
  IVr.FrRate = StringToVal(ImportField,M4Rate);
  IVr.ToRateB2 = StringToVal(ImportField,M4Rate);
  IVr.BaseRate1 = StringToVal(ImportField,M4Rate);
  IVr.BaseRate2 = StringToVal(ImportField,M4Rate);
  IVr.InvoiceNr = ImportField;
  IVr.DiscPerc = StringToVal(ImportField,M4Qty);
  IVr.DiscSum = StringToVal(ImportField,M4Val);
  IVr.TotGP = StringToVal(ImportField,M4Val);
  IVr.LocOKNr = StringToVal(ImportField,M4Qty);
  IVr.Invalid = StringToInt(ImportField);
  IVr.CreditCard = ImportField;
  IVr.AuthorizationCode = ImportField;
  IVr.RecValue = StringToVal(ImportField,M4Val);
  IVr.RetValue = StringToVal(ImportField,M4Val);
  IVr.FromBUQT = StringToInt(ImportField);
  IVr.Sorting = ImportField;
  IVr.NoInterestFlag = StringToInt(ImportField);
  IVr.NoRemndrFlag = StringToInt(ImportField);
  IVr.SVONr = StringToLongint(ImportField);
  IVr.InstallmentInv = StringToInt(ImportField);
  IVr.OfficialSerNr = ImportField;
  IVr.OfficialSerNr2 = ImportField;
  IVr.TotQty = StringToVal(ImportField,M4Qty);
  IVr.TotWeight = StringToVal(ImportField,M4Qty);
  IVr.TotVolume = StringToVal(ImportField,M4Qty);
  IVr.Commision = StringToVal(ImportField,M4Val);
  IVr.SumIncCom = StringToVal(ImportField,M4Val);
  IVr.InvAddr3 = ImportField;
  IVr.InvAddr4 = ImportField;
  IVr.DelAddr3 = ImportField;
  IVr.DelAddr4 = ImportField;
  IVr.DelAddrCode = ImportField;
  IVr.AutoGiro = StringToInt(ImportField);
  IVr.SalesGroup = ImportField;
  IVr.DisputedFlag = StringToInt(ImportField);
  IVr.NoColectionFlag = StringToInt(ImportField);
  IVr.QTNr = StringToLongint(ImportField);
  IVr.FiscalFlag = StringToInt(ImportField);
  IVr.JobNr = StringToLongint(ImportField);
  IVr.RetnValue = StringToVal(ImportField,M4Val);
  IVr.MachineName = ImportField;
  IVr.TransTime = StringToTime(ImportField);
  IVr.DrawerCode = ImportField;
  IVr.SiteX = ImportField;
  IVr.colnr = StringToInt(ImportField);
  IVr.StatVal = StringToVal(ImportField,M4Val);
  IVr.EInvFunc = StringToInt(ImportField);
  IVr.EInvExpFlag = StringToInt(ImportField);
  IVr.EInvExpDate = StringToDate(ImportField);
  IVr.EInvExpQty = StringToLongint(ImportField);
  IVr.ServiceDelDate = StringToDate(ImportField);
  IVr.Region = ImportField;
  IVr.RefStr = ImportField;
  IVr.TAX2Sum = StringToVal(ImportField,M4Val);
  IVr.pdvrebt2 = StringToVal(ImportField,M4Qty);
  IVr.pdrdays2 = StringToLongint(ImportField);
  IVr.NoTax1 = StringToInt(ImportField);
  IVr.NoTax2 = StringToInt(ImportField);
  IVr.FreightCode = ImportField;
  IVr.BankCode = ImportField;
  IVr.InvalidDate = StringToDate(ImportField);
  IVr.InvalidLocOKNr = StringToVal(ImportField,M4Qty);
  IVr.NoEInvoice = StringToInt(ImportField);
  IVr.TaxAuthID = ImportField;
  IVr.TaxAuthIDCC = ImportField;
  IVr.BranchID = ImportField;
  IVr.Status = StringToInt(ImportField);
  IVr.NoTAXonVAT = StringToLongint(ImportField);
  IVr.TotalwoTAX = StringToInt(ImportField);
  IVr.CredManNr = StringToLongint(ImportField);
  IVr.RegDate = StringToDate(ImportField);
  IVr.RegTime = StringToTime(ImportField);
  IVr.COCUSerNr = StringToLongint(ImportField);
  IVr.CAE = ImportField;
  IVr.CAEExpiry = StringToDate(ImportField);
  IVr.VINr = StringToLongint(ImportField);
  IVr.TerminalID = ImportField;
  IVr.OrderType = StringToInt(ImportField);
  IVr.FiscalDeviceSeqNr = StringToLongint(ImportField);
  IVr.CCTransID = ImportField;
  IVr.AcceptanceStatus = StringToInt(ImportField);
  ImportPackedMatrix(TMr);
  PackFieldMatrix(IVr,"TaxMatrix",TMr);
  IVr.CustTaxTemplateCode = ImportField;
  IVr.RoyaltyIVFlag = StringToInt(ImportField);
  IVr.LoyaltyCardNr = ImportField;
  IVr.LCMLevel = ImportField;
  IVr.Points = StringToVal(ImportField,M4Val);
  IVr.DepCode = ImportField;
  IVr.SelfBilling = StringToInt(ImportField);
  IVr.Hash = ImportField;
  IVr.HashKeyVersion = StringToInt(ImportField);
  IVr.InvCountry = ImportField;
  IVr.DelCountry = ImportField;
  IVr.TREONr = StringToLongint(ImportField);
  IVr.ORCONr = StringToLongint(ImportField);
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(IVr,IVrw,1);
    IVrw.stp = StringToInt(ImportField);
    IVrw.ArtCode = ImportField;
    IVrw.Quant = StringToVal(ImportField,M4UVal);
    IVrw.Price = StringToVal(ImportField,M423Val);
    IVrw.Sum = StringToVal(ImportField,M4Val);
    IVrw.vRebate = StringToVal(ImportField,M41Val);
    IVrw.SalesAcc = ImportField;
    IVrw.Objects = ImportField;
    IVrw.OrdRow = StringToLongint(ImportField);
    IVrw.BasePrice = StringToVal(ImportField,M4Val);
    IVrw.rowGP = StringToVal(ImportField,M4Val);
    IVrw.FIFO = StringToVal(ImportField,M45Val);
    IVrw.Spec = ImportField;
    IVrw.VATCode = ImportField;
    IVrw.Recepy = ImportField;
    IVrw.SerialNr = ImportField;
    IVrw.PriceFactor = StringToVal(ImportField,M45Val);
    IVrw.VARList = ImportField;
    IVrw.CUPNr = StringToLongint(ImportField);
    IVrw.FIFORowVal = StringToVal(ImportField,M45Val);
    IVrw.Coefficient = StringToVal(ImportField,M45Val);
    IVrw.CuAccCode = ImportField;
    IVrw.ExciseNr = ImportField;
    IVrw.PeriodCode = ImportField;
    IVrw.UnitCode = ImportField;
    IVrw.UnitFactQuant = StringToVal(ImportField,M4UVal);
    IVrw.UnitFactPrice = StringToVal(ImportField,M423Val);
    IVrw.UnitXval = StringToVal(ImportField,M4UVal);
    IVrw.UnitYval = StringToVal(ImportField,M4UVal);
    IVrw.UnitZval = StringToVal(ImportField,M4UVal);
    IVrw.VECode = ImportField;
    IVrw.CreditCard = ImportField;
    IVrw.AuthorizationCode = ImportField;
    IVrw.PosCode = ImportField;
    IVrw.CurncyCode = ImportField;
    IVrw.FrRate = StringToVal(ImportField,M4Rate);
    IVrw.ToRateB1 = StringToVal(ImportField,M4Rate);
    IVrw.ToRateB2 = StringToVal(ImportField,M4Rate);
    IVrw.BaseRate1 = StringToVal(ImportField,M4Rate);
    IVrw.BaseRate2 = StringToVal(ImportField,M4Rate);
    IVrw.PayMode = ImportField;
    IVrw.GCNr = StringToLongint(ImportField);
    IVrw.CustOrdNr = ImportField;
    IVrw.RepaExVAT = StringToVal(ImportField,M4Val);
    IVrw.BasePriceB2 = StringToVal(ImportField,M4Val);
    IVrw.TAX2Code = ImportField;
    IVrw.TAX2Prc = StringToVal(ImportField,M423Val);
    IVrw.TAX2Reb = StringToVal(ImportField,M4Val);
    IVrw.TAX1Reb = StringToVal(ImportField,M4Val);
    IVrw.TAX2Acc = ImportField;
    IVrw.CreditedRow = StringToLongint(ImportField);
    IVrw.NotUpdStockFlag = StringToInt(ImportField);
    IVrw.CUServiceHistNr = StringToLongint(ImportField);
    IVrw.CUServiceUntilDate = StringToDate(ImportField);
    IVrw.ServiceDelDate = StringToDate(ImportField);
    IVrw.Location = ImportField;
    IVrw.Comment = ImportField;
    IVrw.DiscApprovedBy = ImportField;
    IVrw.Perceptions = StringToInt(ImportField);
    IVrw.VoidedRowNr = StringToLongint(ImportField);
    IVrw.VoidedSign = ImportField;
    IVrw.ovst = StringToInt(ImportField);
    IVrw.Withholdings = StringToInt(ImportField);
    IVrw.WHTax = ImportField;
    IVrw.CCTransID = ImportField;
    ImportPackedMatrix(TMr);
    PackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
    IVrw.TaxTemplateCode = ImportField;
    IVrw.ResUsage = ImportField;
    IVrw.MBRCode = ImportField;
    IVrw.ChequeNr = StringToLongint(ImportField);
    IVrw.CheckNr = ImportField;
    IVrw.Points = StringToVal(ImportField,M4Val);
    IVrw.SalesAssistant = ImportField;
    IVrw.CCTimestamp = ImportField;
    IVrw.MotherArtCode = ImportField;
    IVrw.RecipeQuant = StringToVal(ImportField,M4Qty);
    MatRowPut(IVr,rwcnt,IVrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagIVVc(string thetag)
begin
  record IVVc IVr;
  record IVVc IV2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagIVVcRecord(IVr);
    if (ReadFirstMain(IV2r,0,true)) then begin
      if (RecordUpdate(IV2r,IVr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(IVr,false)) then begin end;
    end;
  end;
  
  return;
end;

procedure ReadImportTagVIVc3Record(record VIVc VIr)
begin
  record TaxMatrixVc TMr;
  row VIVc VIrw;
  integer rwcnt;
  
  RecordNew(VIr);
  VIr.SerNr = StringToLongint(ImportField);
  VIr.InvDate = StringToDate(ImportField);
  VIr.PayVal = StringToVal(ImportField,M4Val);
  VIr.RegDate = StringToDate(ImportField);
  VIr.InvoiceNr = ImportField;
  VIr.OKFlag = StringToInt(ImportField);
  VIr.PayDeal = ImportField;
  VIr.VECode = ImportField;
  VIr.VEName = ImportField;
  VIr.DueDate = StringToDate(ImportField);
  VIr.RebDate = StringToDate(ImportField);
  VIr.RefStr = ImportField;
  VIr.BankAcc = ImportField;
  VIr.Sign = ImportField;
  VIr.RebVal = StringToVal(ImportField,M4Val);
  VIr.TransDate = StringToDate(ImportField);
  VIr.InvType = StringToInt(ImportField);
  if (HasLocalization("RUS")) then begin
    if (VIr.InvType==kInvoiceTypeDebit) then begin
      VIr.InvType = kInvoiceTypePrepayment;
    end;
  end;
  VIr.VATVal = StringToVal(ImportField,M4Val);
  VIr.APAcc = ImportField;
  VIr.VEFactoring = ImportField;
  VIr.BankName = ImportField;
  VIr.OKPersons = ImportField;
  VIr.CurncyCode = ImportField;
  VIr.ToRateB1 = StringToVal(ImportField,M4Rate);
  VIr.ExportFlag = StringToInt(ImportField);
  VIr.VEVatCode = ImportField;
  VIr.Comment = ImportField;
  VIr.CalcVATVal = StringToVal(ImportField,M4Val);
  VIr.Closed = StringToInt(ImportField);
  VIr.Objects = ImportField;
  VIr.PrelBook = StringToInt(ImportField);
  VIr.BankCode = ImportField;
  VIr.CredInv = StringToLongint(ImportField);
  VIr.xStatFlag = StringToInt(ImportField);
  VIr.CORefStr = ImportField;
  VIr.ExportedFlag = StringToInt(ImportField);
  VIr.POSerNr = StringToLongint(ImportField);
  VIr.FrRate = StringToVal(ImportField,M4Rate);
  VIr.ToRateB2 = StringToVal(ImportField,M4Rate);
  VIr.BaseRate1 = StringToVal(ImportField,M4Rate);
  VIr.BaseRate2 = StringToVal(ImportField,M4Rate);
  VIr.CredMark = ImportField;
  VIr.APonTR = StringToInt(ImportField);
  VIr.Invalid = StringToInt(ImportField);
  VIr.VATNr = ImportField;
  VIr.LangCode = ImportField;
  VIr.InstallmentInv = StringToInt(ImportField);
  VIr.POCQStatNr = StringToLongint(ImportField);
  VIr.SortCode = ImportField;
  VIr.SalesGroup = ImportField;
  VIr.SalesMan = ImportField;
  VIr.POCOSerNr = StringToLongint(ImportField);
  VIr.HoldSum = StringToVal(ImportField,M4Val);
  VIr.DiffVal = StringToVal(ImportField,M4Val);
  VIr.BarCode = ImportField;
  VIr.StatVal = StringToVal(ImportField,M4Val);
  VIr.xAcceptanceState = StringToInt(ImportField);
  VIr.xAcceptanceGroup = ImportField;
  VIr.WithHoldingTax = StringToVal(ImportField,M4Val);
  VIr.SupCurVal = StringToVal(ImportField,M4Val);
  VIr.RcvDate = StringToDate(ImportField);
  VIr.TAX1Sum = StringToVal(ImportField,M4Val);
  VIr.ServiceDelDate = StringToDate(ImportField);
  VIr.OfficialSerNr = ImportField;
  VIr.TAX2Sum = StringToVal(ImportField,M4Val);
  VIr.RebDate2 = StringToDate(ImportField);
  VIr.TaxAuthID = ImportField;
  VIr.TaxAuthIDCC = ImportField;
  VIr.BranchID = ImportField;
  VIr.NoTAXonVAT = StringToLongint(ImportField);
  VIr.IVNr = StringToLongint(ImportField);
  VIr.CAE = ImportField;
  VIr.CAEExpiry = StringToDate(ImportField);
  VIr.Region = ImportField;
  VIr.OrderType = StringToInt(ImportField);
  VIr.RebVal2 = StringToVal(ImportField,M4Val);
  VIr.AcceptanceStatus = StringToInt(ImportField);
  VIr.VETaxTemplateCode = ImportField;
  ImportPackedMatrix(TMr);
  PackFieldMatrix(VIr,"TaxMatrix",TMr);
  VIr.SelfBilling = StringToInt(ImportField);
  VIr.FiscalFlag = StringToInt(ImportField);
  VIr.VATFrRate = StringToVal(ImportField,M4Rate);
  VIr.VATToRateB1 = StringToVal(ImportField,M4Rate);
  VIr.VATToRateB2 = StringToVal(ImportField,M4Rate);
  VIr.VATBaseRate1 = StringToVal(ImportField,M4Rate);
  VIr.VATBaseRate2 = StringToVal(ImportField,M4Rate);
  VIr.Addr1 = ImportField;
  VIr.Addr2 = ImportField;
  VIr.Addr3 = ImportField;
  VIr.InvAddr3 = ImportField;
  VIr.InvAddr4 = ImportField;
  VIr.InvCountry = ImportField;
  VIr.Phone = ImportField;
  VIr.Fax = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(VIr,VIrw,1);
    VIrw.stp = StringToInt(ImportField);
    VIrw.ovst = StringToInt(ImportField);
    VIrw.AccNumber = ImportField;
    VIrw.Objects = ImportField;
    VIrw.Comment = ImportField;
    VIrw.Sum = StringToVal(ImportField,M4Val);
    VIrw.Item = ImportField;
    VIrw.qty = StringToVal(ImportField,M4UVal);
    VIrw.PRCode = ImportField;
    VIrw.VATCode = ImportField;
    VIrw.VEPNr = StringToLongint(ImportField);
    VIrw.PrepayNr = StringToLongint(ImportField);
    VIrw.PrepayAmount = StringToVal(ImportField,M4Val);
    VIrw.OrdRow = StringToLongint(ImportField);
    VIrw.VATVal = StringToVal(ImportField,M4Val);
    VIrw.PeriodCode = ImportField;
    VIrw.ACShort = ImportField;
    VIrw.PUNr = StringToLongint(ImportField);
    VIrw.PURow = StringToLongint(ImportField);
    VIrw.VarianceAmount = StringToVal(ImportField,M4Val);
    VIrw.POCORow = StringToLongint(ImportField);
    VIrw.TAX2Prc = StringToVal(ImportField,M423Val);
    VIrw.PONr = StringToLongint(ImportField);
    VIrw.StockType = StringToInt(ImportField);
    VIrw.SerialNr = ImportField;
    VIrw.WHTax = ImportField;
    VIrw.TaxTemplateCode = ImportField;
    ImportPackedMatrix(TMr);
    PackRowFieldMatrix(VIrw,"TaxMatrix",TMr);
    VIrw.InventoryNr = ImportField;
    VIrw.AssetTransType = StringToInt(ImportField);
    MatRowPut(VIr,rwcnt,VIrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagVIVc3(string thetag)
begin
  record VIVc VIr;
  record VIVc VI2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagVIVc3Record(VIr);
    if (ReadFirstMain(VI2r,0,true)) then begin
      if (RecordUpdate(VI2r,VIr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(VIr,false)) then begin end;
    end;
  end;
  
  return;
end;

procedure ReadImportTagMachineCashVcRecord(record MachineCashVc MachineCashr)
begin
  row MachineCashVc MachineCashrw;
  integer rwcnt;
  
  RecordNew(MachineCashr);
  ImportField;
  ImportField;
  ImportField;
  MachineCashr.Code = ImportField;
  MachineCashr.Comment = ImportField;
  MachineCashr.Head0 = ImportField;
  MachineCashr.Head1 = ImportField;
  MachineCashr.Head2 = ImportField;
  MachineCashr.Head3 = ImportField;
  MachineCashr.Head4 = ImportField;
  MachineCashr.Foot0 = ImportField;
  MachineCashr.Foot1 = ImportField;
  MachineCashr.Foot2 = ImportField;
  MachineCashr.Foot3 = ImportField;
  MachineCashr.Foot4 = ImportField;
  MachineCashr.PrinterType = StringToInt(ImportField);
  MachineCashr.MinCashLen = StringToInt(ImportField);
  MachineCashr.CommPort = ImportField;
  MachineCashr.DisplayText = ImportField;
  MachineCashr.FiscalPrinter = StringToInt(ImportField);
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(MachineCashr,MachineCashrw,1);
    MachineCashrw.RegDef = ImportField;
    MachineCashrw.CUVATRules = StringToInt(ImportField);
    MatRowPut(MachineCashr,rwcnt,MachineCashrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagMachineCashVc(string thetag)
begin
  record MachineCashVc MachineCashr;
  record MachineCashVc MachineCash2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagMachineCashVcRecord(MachineCashr);
    MachineCash2r.Code = MachineCashr.Code;
    if (ReadFirstMain(MachineCash2r,1,true)) then begin
      if (blankuuid(MachineCashr.UUID)) then begin
        MachineCashr.UUID = MachineCash2r.UUID;
        MachineCashr.ServerSequence = MachineCash2r.ServerSequence;
        MachineCashr.SyncFlags = MachineCash2r.SyncFlags;
      end;
      if (RecordUpdate(MachineCash2r,MachineCashr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(MachineCashr,false)) then begin end;
    end;
  end;
  
  return;
end;

procedure ReadImportTagKPIDefVcRecord(record KPIDefVc KPIDefr)
begin
  RecordNew(KPIDefr);
  KPIDefr.SerNr = StringToLongint(ImportField);
  KPIDefr.Sorting = StringToLongint(ImportField);
  KPIDefr.Sign = ImportField;
  KPIDefr.Type = StringToInt(ImportField);
  KPIDefr.AllowManualRecalcf = StringToInt(ImportField);
  KPIDefr.Frequency = StringToTime(ImportField);
  KPIDefr.Company = StringToLongint(ImportField);
  KPIDefr.Status = StringToInt(ImportField);
  KPIDefr.Current = StringToVal(ImportField,M4Val);
  KPIDefr.Previous = StringToVal(ImportField,M4Val);
  KPIDefr.LastCalcDate = StringToDate(ImportField);
  KPIDefr.LastCalcTime = StringToTime(ImportField);
  KPIDefr.URL = ImportField;
  KPIDefr.OpenType = StringToInt(ImportField);
  KPIDefr.PeriodLength = StringToInt(ImportField) + 1;
  KPIDefr.PeriodType = StringToInt(ImportField) + 1;
  KPIDefr.OwnTitle = ImportField;
  KPIDefr.ReverseArrowf = StringToInt(ImportField);
  KPIDefr.Person = ImportField;
  KPIDefr.PeriodUnits = 1;
  if (KPIDefr.PeriodLength==kPeriodLengthQuarter) then begin
    KPIDefr.PeriodLength = kPeriodLengthMonth;
    KPIDefr.PeriodUnits = 3;
  end;
  
  return;
end;

global
updating procedure ReadImportTagKPIDefVc(string thetag)
begin
  record KPIDefVc KPIDefr;
  
  while (NextImportLine(false)) begin
    ReadImportTagKPIDefVcRecord(KPIDefr);
    RecordImportStore(KPIDefr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrKPIDefVc(Integer compnr,string thetag)
begin
  record KPIDefVc KPIDefr;
  
  KPIDefr.SerNr = StringToLongint(ImportField);
  ReadRecordIdStrKPIDefVc = BuildRecordIdStr(KPIDefr,compnr);
  return;
end;


procedure ReadImportTagIVVc2Record(record IVVc IVr)
begin
  record TaxMatrixVc TMr;
  row IVVc IVrw;
  integer rwcnt;
  
  RecordNew(IVr);
  IVr.SerNr = StringToLongint(ImportField);
  IVr.InvDate = StringToDate(ImportField);
  IVr.CustCode = ImportField;
  IVr.PayDate = StringToDate(ImportField);
  IVr.Addr0 = ImportField;
  IVr.Addr1 = ImportField;
  IVr.Addr2 = ImportField;
  IVr.Addr3 = ImportField;
  IVr.OurContact = ImportField;
  IVr.ClientContact = ImportField;
  IVr.ExportFlag = StringToInt(ImportField);
  IVr.PayDeal = ImportField;
  IVr.OrderNr = StringToLongint(ImportField);
  IVr.Prntdf = StringToInt(ImportField);
  IVr.OKFlag = StringToInt(ImportField);
  IVr.pdays = StringToLongint(ImportField);
  IVr.pdvrebt = StringToVal(ImportField,M4Qty);
  IVr.pdrdays = StringToLongint(ImportField);
  IVr.CustCat = ImportField;
  IVr.pdComment = ImportField;
  /*IVr.x1 =*/ ImportField;
  IVr.InvType = StringToInt(ImportField);
  IVr.xStatFlag = StringToInt(ImportField);
  IVr.PriceList = ImportField;
  IVr.Objects = ImportField;
  IVr.InclVAT = StringToInt(ImportField);
  IVr.ARAcc = ImportField;
  IVr.InvComment = ImportField;
  IVr.CredInv = StringToLongint(ImportField);
  IVr.CredMark = ImportField;
  IVr.SalesMan = ImportField;
  IVr.ToRateB1 = StringToVal(ImportField,M4Rate);
  IVr.TransDate = StringToDate(ImportField);
  IVr.CurncyCode = ImportField;
  IVr.LangCode = ImportField;
  IVr.UpdStockFlag = StringToInt(ImportField);
  IVr.LastRemndr = StringToLongint(ImportField);
  IVr.LastRemDate = StringToDate(ImportField);
  IVr.Sign = ImportField;
  IVr.FrPrice = StringToVal(ImportField,M4Val);
  IVr.FrBase = StringToVal(ImportField,M4Val);
  IVr.FrItem = ImportField;
  IVr.FrVATCode = ImportField;
  IVr.FrObjects = ImportField;
  IVr.OrgCust = ImportField;
  IVr.FrGP = StringToVal(ImportField,M4Val);
  IVr.FrGPPercent = StringToVal(ImportField,M4Val);
  IVr.Sum0 = StringToVal(ImportField,M4Val);
  IVr.Sum1 = StringToVal(ImportField,M4Val);
  IVr.Sum2 = StringToVal(ImportField,M4Val);
  IVr.Sum3 = StringToVal(ImportField,M4Val);
  IVr.Sum4 = StringToVal(ImportField,M4Val);
  IVr.VATNr = ImportField;
  IVr.ShipDeal = ImportField;
  IVr.ShipAddr0 = ImportField;
  IVr.ShipAddr1 = ImportField;
  IVr.ShipAddr2 = ImportField;
  IVr.ShipAddr3 = ImportField;
  IVr.ShipMode = ImportField;
  IVr.Location = ImportField;
  IVr.PRCode = ImportField;
  IVr.FrSalesAcc = ImportField;
  IVr.TAX1Sum = StringToVal(ImportField,M4Val);
  IVr.CustVATCode = ImportField;
  IVr.RebCode = ImportField;
  IVr.CalcFinRef = ImportField;
  IVr.Phone = ImportField;
  IVr.Fax = ImportField;
  IVr.IntCode = ImportField;
  IVr.ARonTR = StringToInt(ImportField);
  IVr.CustOrdNr = ImportField;
  IVr.ExportedFlag = StringToInt(ImportField);
  IVr.BaseSum4 = StringToVal(ImportField,M4Val);
  IVr.FrRate = StringToVal(ImportField,M4Rate);
  IVr.ToRateB2 = StringToVal(ImportField,M4Rate);
  IVr.BaseRate1 = StringToVal(ImportField,M4Rate);
  IVr.BaseRate2 = StringToVal(ImportField,M4Rate);
  IVr.InvoiceNr = ImportField;
  IVr.DiscPerc = StringToVal(ImportField,M4Qty);
  IVr.DiscSum = StringToVal(ImportField,M4Val);
  IVr.TotGP = StringToVal(ImportField,M4Val);
  IVr.LocOKNr = StringToVal(ImportField,M4Qty);
  IVr.Invalid = StringToInt(ImportField);
  IVr.CreditCard = ImportField;
  IVr.AuthorizationCode = ImportField;
  IVr.RecValue = StringToVal(ImportField,M4Val);
  IVr.RetValue = StringToVal(ImportField,M4Val);
  IVr.FromBUQT = StringToInt(ImportField);
  IVr.Sorting = ImportField;
  IVr.NoInterestFlag = StringToInt(ImportField);
  IVr.NoRemndrFlag = StringToInt(ImportField);
  IVr.SVONr = StringToLongint(ImportField);
  IVr.InstallmentInv = StringToInt(ImportField);
  IVr.OfficialSerNr = ImportField;
  IVr.OfficialSerNr2 = ImportField;
  IVr.TotQty = StringToVal(ImportField,M4Qty);
  IVr.TotWeight = StringToVal(ImportField,M4Qty);
  IVr.TotVolume = StringToVal(ImportField,M4Qty);
  IVr.Commision = StringToVal(ImportField,M4Val);
  IVr.SumIncCom = StringToVal(ImportField,M4Val);
  IVr.InvAddr3 = ImportField;
  IVr.InvAddr4 = ImportField;
  IVr.DelAddr3 = ImportField;
  IVr.DelAddr4 = ImportField;
  IVr.DelAddrCode = ImportField;
  IVr.AutoGiro = StringToInt(ImportField);
  IVr.SalesGroup = ImportField;
  IVr.DisputedFlag = StringToInt(ImportField);
  IVr.NoColectionFlag = StringToInt(ImportField);
  IVr.QTNr = StringToLongint(ImportField);
  IVr.FiscalFlag = StringToInt(ImportField);
  IVr.JobNr = StringToLongint(ImportField);
  IVr.RetnValue = StringToVal(ImportField,M4Val);
  IVr.MachineName = ImportField;
  IVr.TransTime = StringToTime(ImportField);
  IVr.DrawerCode = ImportField;
  IVr.SiteX = ImportField;
  IVr.colnr = StringToInt(ImportField);
  IVr.StatVal = StringToVal(ImportField,M4Val);
  IVr.EInvFunc = StringToInt(ImportField);
  IVr.EInvExpFlag = StringToInt(ImportField);
  IVr.EInvExpDate = StringToDate(ImportField);
  IVr.EInvExpQty = StringToLongint(ImportField);
  IVr.ServiceDelDate = StringToDate(ImportField);
  IVr.Region = ImportField;
  IVr.RefStr = ImportField;
  IVr.TAX2Sum = StringToVal(ImportField,M4Val);
  IVr.pdvrebt2 = StringToVal(ImportField,M4Qty);
  IVr.pdrdays2 = StringToLongint(ImportField);
  IVr.NoTax1 = StringToInt(ImportField);
  IVr.NoTax2 = StringToInt(ImportField);
  IVr.FreightCode = ImportField;
  IVr.BankCode = ImportField;
  IVr.InvalidDate = StringToDate(ImportField);
  IVr.InvalidLocOKNr = StringToVal(ImportField,M4Qty);
  IVr.NoEInvoice = StringToInt(ImportField);
  IVr.TaxAuthID = ImportField;
  IVr.TaxAuthIDCC = ImportField;
  IVr.BranchID = ImportField;
  IVr.Status = StringToInt(ImportField);
  IVr.NoTAXonVAT = StringToLongint(ImportField);
  IVr.TotalwoTAX = StringToInt(ImportField);
  IVr.CredManNr = StringToLongint(ImportField);
  IVr.RegDate = StringToDate(ImportField);
  IVr.RegTime = StringToTime(ImportField);
  IVr.COCUSerNr = StringToLongint(ImportField);
  IVr.CAE = ImportField;
  IVr.CAEExpiry = StringToDate(ImportField);
  IVr.VINr = StringToLongint(ImportField);
  IVr.TerminalID = ImportField;
  IVr.OrderType = StringToInt(ImportField);
  IVr.FiscalDeviceSeqNr = StringToLongint(ImportField);
  IVr.CCTransID = ImportField;
  IVr.AcceptanceStatus = StringToInt(ImportField);
  ImportPackedMatrix(TMr);
  PackFieldMatrix(IVr,"TaxMatrix",TMr);
  IVr.CustTaxTemplateCode = ImportField;
  IVr.RoyaltyIVFlag = StringToInt(ImportField);
  IVr.LoyaltyCardNr = ImportField;
  IVr.LCMLevel = ImportField;
  IVr.Points = StringToVal(ImportField,M4Val);
  IVr.DepCode = ImportField;
  IVr.SelfBilling = StringToInt(ImportField);
  IVr.Hash = ImportField;
  IVr.HashKeyVersion = StringToInt(ImportField);
  IVr.InvCountry = ImportField;
  IVr.DelCountry = ImportField;
  IVr.TREONr = StringToLongint(ImportField);
  IVr.ORCONr = StringToLongint(ImportField);
  IVr.CAEAStartDate = StringToDate(ImportField);
  IVr.CAEAExpiryDate = StringToDate(ImportField);
  IVr.CAEAFlag = StringToInt(ImportField);
  IVr.FInvExpFlag = StringToInt(ImportField);
  IVr.GroupInv = StringToInt(ImportField);
  IVr.Suspended = StringToInt(ImportField);
  IVr.AcceptanceBy = ImportField;
  IVr.RetNr = StringToLongint(ImportField);
  IVr.TaxAdminServSignatureTimeStamp = ImportField;
  IVr.TaxAdminServCertificateNr = ImportField;
  IVr.TaxAdminServSeal = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(IVr,IVrw,1);
    IVrw.stp = StringToInt(ImportField);
    IVrw.ArtCode = ImportField;
    IVrw.Quant = StringToVal(ImportField,M4UVal);
    IVrw.Price = StringToVal(ImportField,M423Val);
    IVrw.Sum = StringToVal(ImportField,M4Val);
    IVrw.vRebate = StringToVal(ImportField,M41Val);
    IVrw.SalesAcc = ImportField;
    IVrw.Objects = ImportField;
    IVrw.OrdRow = StringToLongint(ImportField);
    IVrw.BasePrice = StringToVal(ImportField,M4Val);
    IVrw.rowGP = StringToVal(ImportField,M4Val);
    IVrw.FIFO = StringToVal(ImportField,M45Val);
    IVrw.Spec = ImportField;
    IVrw.VATCode = ImportField;
    IVrw.Recepy = ImportField;
    IVrw.SerialNr = ImportField;
    IVrw.PriceFactor = StringToVal(ImportField,M45Val);
    IVrw.VARList = ImportField;
    IVrw.CUPNr = StringToLongint(ImportField);
    IVrw.FIFORowVal = StringToVal(ImportField,M45Val);
    IVrw.Coefficient = StringToVal(ImportField,M45Val);
    IVrw.CuAccCode = ImportField;
    IVrw.ExciseNr = ImportField;
    IVrw.PeriodCode = ImportField;
    IVrw.UnitCode = ImportField;
    IVrw.UnitFactQuant = StringToVal(ImportField,M4UVal);
    IVrw.UnitFactPrice = StringToVal(ImportField,M423Val);
    IVrw.UnitXval = StringToVal(ImportField,M4UVal);
    IVrw.UnitYval = StringToVal(ImportField,M4UVal);
    IVrw.UnitZval = StringToVal(ImportField,M4UVal);
    IVrw.VECode = ImportField;
    IVrw.CreditCard = ImportField;
    IVrw.AuthorizationCode = ImportField;
    IVrw.PosCode = ImportField;
    IVrw.CurncyCode = ImportField;
    IVrw.FrRate = StringToVal(ImportField,M4Rate);
    IVrw.ToRateB1 = StringToVal(ImportField,M4Rate);
    IVrw.ToRateB2 = StringToVal(ImportField,M4Rate);
    IVrw.BaseRate1 = StringToVal(ImportField,M4Rate);
    IVrw.BaseRate2 = StringToVal(ImportField,M4Rate);
    IVrw.PayMode = ImportField;
    IVrw.GCNr = StringToLongint(ImportField);
    IVrw.CustOrdNr = ImportField;
    IVrw.RepaExVAT = StringToVal(ImportField,M4Val);
    IVrw.BasePriceB2 = StringToVal(ImportField,M4Val);
    IVrw.TAX2Code = ImportField;
    IVrw.TAX2Prc = StringToVal(ImportField,M423Val);
    IVrw.TAX2Reb = StringToVal(ImportField,M4Val);
    IVrw.TAX1Reb = StringToVal(ImportField,M4Val);
    IVrw.TAX2Acc = ImportField;
    IVrw.CreditedRow = StringToLongint(ImportField);
    IVrw.NotUpdStockFlag = StringToInt(ImportField);
    IVrw.CUServiceHistNr = StringToLongint(ImportField);
    IVrw.CUServiceUntilDate = StringToDate(ImportField);
    IVrw.ServiceDelDate = StringToDate(ImportField);
    IVrw.Location = ImportField;
    IVrw.Comment = ImportField;
    IVrw.DiscApprovedBy = ImportField;
    IVrw.Perceptions = StringToInt(ImportField);
    IVrw.VoidedRowNr = StringToLongint(ImportField);
    IVrw.VoidedSign = ImportField;
    IVrw.ovst = StringToInt(ImportField);
    IVrw.Withholdings = StringToInt(ImportField);
    IVrw.WHTax = ImportField;
    IVrw.CCTransID = ImportField;
    ImportPackedMatrix(TMr);
    PackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
    IVrw.TaxTemplateCode = ImportField;
    IVrw.ResUsage = ImportField;
    IVrw.MBRCode = ImportField;
    IVrw.ChequeNr = StringToLongint(ImportField);
    IVrw.CheckNr = ImportField;
    IVrw.Points = StringToVal(ImportField,M4Val);
    IVrw.SalesAssistant = ImportField;
    IVrw.CCTimestamp = ImportField;
    IVrw.MotherArtCode = ImportField;
    IVrw.RecipeQuant = StringToVal(ImportField,M4Qty);
    IVrw.OrdNr = StringToLongint(ImportField);
    IVrw.IVNr = StringToLongint(ImportField);
    IVrw.RetRow = StringToLongint(ImportField);
    if (IVr.QTNr>0) then begin
      IVrw.QTRow = IVrw.OrdRow;
      IVrw.OrdRow = -1;
    end;
    MatRowPut(IVr,rwcnt,IVrw);
    rwcnt = rwcnt + 1;
  end;
  return;
end;

global
updating procedure ReadImportTagIVVc2(string thetag)
begin
  record IVVc IVr;
  record IVVc IV2r;
  
  while (NextImportLine(false)) begin
    ReadImportTagIVVc2Record(IVr);
    if (ReadFirstMain(IV2r,0,true)) then begin
      if (RecordUpdate(IV2r,IVr,false)==0) then begin end;
    end else begin
      if (RecordImportStore(IVr,false)) then begin end;
    end;
  end;
  return;
end;

procedure ReadImportTagTodoAccessVcRecord(record TodoAccessVc TodoAccessr)
begin
  row TodoAccessVc TodoAccessrw;
  integer rwcnt;
  
  RecordNew(TodoAccessr);
  TodoAccessr.Code = ImportField;
  TodoAccessr.Comment = ImportField;
  TodoAccessr.StartLevel = StringToInt(ImportField);
  if (TodoAccessr.StartLevel==0) then begin
    TodoAccessr.StartLevel = kAccessLevelNone;
  end;  
  rwcnt = 0;  
  while (NextImportLine(false)) begin
    ClearRow(TodoAccessr,TodoAccessrw,1);
    TodoAccessrw.Person = ImportField;
    TodoAccessrw.AccFunc = StringToInt(ImportField);
    TodoAccessrw.AccLevel = StringToInt(ImportField);
    if (TodoAccessrw.AccLevel==0) then begin
      TodoAccessrw.AccLevel = kAccessLevelNone;
    end;
    MatRowPut(TodoAccessr,rwcnt,TodoAccessrw);
    rwcnt = rwcnt + 1;
  end;  
  return;
end;

global
updating procedure ReadImportTagTodoAccessVc(string thetag)
begin
  record TodoAccessVc TodoAccessr;
  
  while (NextImportLine(false)) begin
    ReadImportTagTodoAccessVcRecord(TodoAccessr);
    RecordImportStore(TodoAccessr,false);
  end;  
  return;
end;

/*
procedure ReadImportTagCreditCardVcRecord(record CreditCardVc CreditCardr)
begin
  RecordNew(CreditCardr);
  CreditCardr.CreditCardNr = ImportField;
  CreditCardr.BankCode = ImportField;
  CreditCardr.BankName = ImportField;
  CreditCardr.CUCode = ImportField;
  CreditCardr.CUName = ImportField;
  CreditCardr.ValidThru = ImportField;
  CreditCardr.SecurityCode = ImportField;
  CreditCardr.Invalid = StringToInt(ImportField);
  CreditCardr.CredCardType = ImportField;
  CreditCardr.ID = ImportField;
  CreditCardr.UserStr1 = ImportField;
  CreditCardr.UserStr2 = ImportField;
  CreditCardr.UserStr3 = ImportField;
  CreditCardr.UserStr4 = ImportField;
  CreditCardr.UserStr5 = ImportField;
  CreditCardr.UserVal1 = StringToVal(ImportField,M4UVal);
  CreditCardr.UserVal2 = StringToVal(ImportField,M4UVal);
  CreditCardr.UserVal3 = StringToVal(ImportField,M4UVal);
  CreditCardr.UserDate1 = StringToDate(ImportField);
  CreditCardr.UserDate2 = StringToDate(ImportField);
  CreditCardr.UserDate3 = StringToDate(ImportField);
  CreditCardr.Start = ImportField;
  CreditCardr.Issue = ImportField;
  
  return;
end;

global
updating procedure ReadImportTagCreditCardVc(string thetag)
begin
  record CreditCardVc CreditCardr;
  
  while (NextImportLine(false)) begin
    ReadImportTagCreditCardVcRecord(CreditCardr);
    CreditCardr.SerNr = NextSerNr("CreditCardVc",CurrentDate,-1,false,"");
    RecordImportStore(CreditCardr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrCreditCardVc(Integer compnr,string thetag)
begin
  record CreditCardVc CreditCardr;
  
  CreditCardr.CreditCardNr = ImportField;
  ReadRecordIdStrCreditCardVc = BuildRecordIdStr(CreditCardr,compnr);
  return;
end;
*/

procedure ReadImportTagCCatVcRecord(record CCatVc CCatr)
begin
  RecordNew(CCatr);
  CCatr.Code = ImportField;
  CCatr.Comment = ImportField;
  CCatr.PLCode = ImportField;
  CCatr.ARAcc = ImportField;
  CCatr.RebCode = ImportField;
  CCatr.ComCode = ImportField;
  CCatr.OnAccAcc = ImportField;
  CCatr.DownPayPerc = StringToVal(ImportField,M4Qty);
  CCatr.WebOrderClass = ImportField;
  CCatr.MainDispGroup = ImportField;
  CCatr.WebDisplays = ImportField;
  CCatr.BadARAcc = ImportField;
  CCatr.AccAP = ImportField;
  CCatr.RetainAcc = ImportField;
  CCatr.OnAccAccAP = ImportField;
  CCatr.ClassType = ImportField;
  
  return;
end;

global
updating procedure ReadImportTagCCatVc(string thetag)
begin
  record CCatVc CCatr;
  
  while (NextImportLine(false)) begin
    ReadImportTagCCatVcRecord(CCatr);
    RecordImportStore(CCatr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrCCatVc(Integer compnr,string thetag)
begin
  record CCatVc CCatr;
  
  CCatr.Code = ImportField;
  ReadRecordIdStrCCatVc = BuildRecordIdStr(CCatr,compnr);
  return;
end;

procedure ReadImportTagMachineHoursVcRecord(record MachineHoursVc MachineHoursr)
begin
  RecordNew(MachineHoursr);
  MachineHoursr.Code = ImportField;
  MachineHoursr.Description = ImportField;
  MachineHoursr.MonStart = StringToTime(ImportField);
  MachineHoursr.MonEnd = StringToVal(ImportField,M41Val);
  MachineHoursr.TueStart = StringToTime(ImportField);
  MachineHoursr.TueEnd = StringToVal(ImportField,M41Val);
  MachineHoursr.WedStart = StringToTime(ImportField);
  MachineHoursr.WedEnd = StringToVal(ImportField,M41Val);
  MachineHoursr.ThuStart = StringToTime(ImportField);
  MachineHoursr.ThuEnd = StringToVal(ImportField,M41Val);
  MachineHoursr.FriStart = StringToTime(ImportField);
  MachineHoursr.FriEnd = StringToVal(ImportField,M41Val);
  MachineHoursr.SatStart = StringToTime(ImportField);
  MachineHoursr.SatEnd = StringToVal(ImportField,M41Val);
  MachineHoursr.SunStart = StringToTime(ImportField);
  MachineHoursr.SunEnd = StringToVal(ImportField,M41Val);
  MachineHoursr.ResMgrColNr = StringToInt(ImportField);
  
  return;
end;

global
updating procedure ReadImportTagMachineHoursVc(string thetag)
begin
  record MachineHoursVc MachineHoursr;
  
  while (NextImportLine(false)) begin
    ReadImportTagMachineHoursVcRecord(MachineHoursr);
    MachineHoursr.SerNr = NextSerNr("MachineHoursVc",CurrentDate,-1,false,"");
    RecordImportStore(MachineHoursr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrMachineHoursVc(Integer compnr,string thetag)
begin
  record MachineHoursVc MachineHoursr;
  
  MachineHoursr.Code = ImportField;
  ReadRecordIdStrMachineHoursVc = BuildRecordIdStr(MachineHoursr,compnr);
  return;
end;

procedure ReadImportTagORVcRecord(record ORVc ORr)
begin
  record TaxMatrixVc TMr;
  row ORVc ORrw;
  integer rwcnt;
  
  RecordNew(ORr);
  ORr.SerNr = StringToLongint(ImportField);
  ORr.OrdDate = StringToDate(ImportField);
  ORr.CustCode = ImportField;
  ORr.Addr0 = ImportField;
  ORr.Addr1 = ImportField;
  ORr.Addr2 = ImportField;
  ORr.Addr3 = ImportField;
  ORr.OurContact = ImportField;
  ORr.CustContact = ImportField;
  ORr.ExportFlag = StringToInt(ImportField);
  ORr.InvFlag = StringToInt(ImportField);
  ORr.ShipFlag = StringToInt(ImportField);
  ORr.Prntdf = StringToInt(ImportField);
  ORr.PayDeal = ImportField;
  ORr.CustCat = ImportField;
  ORr.InvMark = StringToInt(ImportField);
  ORr.ShipMark = StringToInt(ImportField);
  ORr.Objects = ImportField;
  ORr.ShipMode = ImportField;
  ORr.OrderStatus = StringToInt(ImportField);
  ORr.PlanShip = ImportField;
  ORr.SalesMan = ImportField;
  ORr.Sign = ImportField;
  ORr.ShipDeal = ImportField;
  ORr.ShipAddr0 = ImportField;
  ORr.ShipAddr1 = ImportField;
  ORr.ShipAddr2 = ImportField;
  ORr.ShipAddr3 = ImportField;
  ORr.CurncyCode = ImportField;
  ORr.LangCode = ImportField;
  ORr.InvoiceToCode = ImportField;
  ORr.Closed = StringToInt(ImportField);
  ORr.ToRateB1 = StringToVal(ImportField,M4Rate);
  ORr.BuildOn = StringToInt(ImportField);
  ORr.PRCode = ImportField;
  ORr.Comment = ImportField;
  ORr.InvOnlyOnFull = StringToInt(ImportField);
  ORr.DownPaySent = StringToVal(ImportField,M4Val);
  ORr.DownPayRedcd = StringToVal(ImportField,M4Val);
  ORr.OrderClass = ImportField;
  ORr.CustOrdNr = ImportField;
  ORr.PriceList = ImportField;
  ORr.InclVAT = StringToInt(ImportField);
  ORr.Sum0 = StringToVal(ImportField,M4Val);
  ORr.Sum1 = StringToVal(ImportField,M4Val);
  ORr.Sum2 = StringToVal(ImportField,M4Val);
  ORr.Sum3 = StringToVal(ImportField,M4Val);
  ORr.Sum4 = StringToVal(ImportField,M4Val);
  ORr.Reserved = StringToInt(ImportField);
  ORr.OSFlag = StringToInt(ImportField);
  ORr.Location = ImportField;
  ORr.CustVATCode = ImportField;
  ORr.RebCode = ImportField;
  ORr.VATNr = ImportField;
  ORr.Phone = ImportField;
  ORr.Fax = ImportField;
  ORr.ExportedFlag = StringToInt(ImportField);
  ORr.BaseSum4 = StringToVal(ImportField,M4Val);
  ORr.FrRate = StringToVal(ImportField,M4Rate);
  ORr.ToRateB2 = StringToVal(ImportField,M4Rate);
  ORr.BaseRate1 = StringToVal(ImportField,M4Rate);
  ORr.BaseRate2 = StringToVal(ImportField,M4Rate);
  ORr.DiscPerc = StringToVal(ImportField,M4Qty);
  ORr.DiscSum = StringToVal(ImportField,M4Val);
  ORr.TotGP = StringToVal(ImportField,M4Val);
  ORr.Probability = StringToVal(ImportField,M41Val);
  ORr.CreditCard = ImportField;
  ORr.AuthorizationCode = ImportField;
  ORr.GPProc = StringToVal(ImportField,M41Val);
  ORr.DespatchDate = StringToDate(ImportField);
  ORr.DespatchTime = StringToTime(ImportField);
  ORr.SalesGroup = ImportField;
  ORr.Sorting = ImportField;
  ORr.TotQty = StringToVal(ImportField,M4Qty);
  ORr.TotWeight = StringToVal(ImportField,M4Qty);
  ORr.TotVolume = StringToVal(ImportField,M4Qty);
  ORr.Commision = StringToVal(ImportField,M4Val);
  ORr.SumIncCom = StringToVal(ImportField,M4Val);
  ORr.FrPrice = StringToVal(ImportField,M4Val);
  ORr.FrBase = StringToVal(ImportField,M4Val);
  ORr.FrItem = ImportField;
  ORr.FrVATCode = ImportField;
  ORr.FrObjects = ImportField;
  ORr.InvAddr3 = ImportField;
  ORr.InvAddr4 = ImportField;
  ORr.DelAddr3 = ImportField;
  ORr.DelAddr4 = ImportField;
  ORr.DelAddrCode = ImportField;
  ORr.TAX1Sum = StringToVal(ImportField,M4Val);
  ORr.QuoteNr = StringToLongint(ImportField);
  ORr.InvBeforeShip = StringToInt(ImportField);
  ORr.colnr = StringToInt(ImportField);
  ORr.OKFlag = StringToInt(ImportField);
  ORr.PlanShipDate = StringToDate(ImportField);
  ORr.PrepaidAmount = StringToVal(ImportField,M4Val);
  ORr.Region = ImportField;
  ORr.RefStr = ImportField;
  ORr.GroupOrdNr = StringToLongint(ImportField);
  ORr.NoDelivery = StringToInt(ImportField);
  ORr.NoInvoice = StringToInt(ImportField);
  ORr.TAX2Sum = StringToVal(ImportField,M4Val);
  ORr.NoTax1 = StringToInt(ImportField);
  ORr.NoTax2 = StringToInt(ImportField);
  ORr.BranchID = ImportField;
  ORr.NoTAXonVAT = StringToLongint(ImportField);
  ORr.TotalwoTAX = StringToInt(ImportField);
  ORr.OrderType = StringToInt(ImportField);
  ORr.AcceptanceStatus = StringToInt(ImportField);
  ORr.CustTaxTemplateCode = ImportField;
  ImportPackedMatrix(TMr);
  PackFieldMatrix(ORr,"TaxMatrix",TMr);
  ORr.TerminalID = ImportField;
  ORr.OfficialSerNr = ImportField;
  ORr.Hash = ImportField;
  ORr.HashKeyVersion = StringToInt(ImportField);
  ORr.RegDate = StringToDate(ImportField);
  ORr.RegTime = StringToTime(ImportField);
  ORr.LocalMachineCode = ImportField;
  ORr.InvCountry = ImportField;
  ORr.DelCountry = ImportField;
  ORr.TREONr = StringToLongint(ImportField);
  ORr.TREOExpDate = StringToDate(ImportField);
  ORr.ORCONr = StringToLongint(ImportField);
  ORr.AcceptanceBy = ImportField;
  ORr.AcceptanceFYI = ImportField;
  ORr.BankCode = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(ORr,ORrw,1);
    ORrw.stp = StringToInt(ImportField);
    ORrw.ArtCode = ImportField;
    ORrw.Quant = StringToVal(ImportField,M4UVal);
    ORrw.Price = StringToVal(ImportField,M423Val);
    ORrw.Sum = StringToVal(ImportField,M4Val);
    ORrw.vRebate = StringToVal(ImportField,M41Val);
    ORrw.SalesAcc = ImportField;
    ORrw.Shipd1 = StringToVal(ImportField,M4UVal);
    ORrw.Shipd2 = StringToVal(ImportField,M4UVal);
    ORrw.Invd = StringToVal(ImportField,M4UVal);
    ORrw.Objects = ImportField;
    ORrw.BasePrice = StringToVal(ImportField,M423Val);
    ORrw.rowGP = StringToVal(ImportField,M4Val);
    ORrw.Spec = ImportField;
    ORrw.VATCode = ImportField;
    ORrw.Recepy = ImportField;
    ORrw.SerialNr = ImportField;
    ORrw.PriceFactor = StringToVal(ImportField,M45Val);
    ORrw.VARList = ImportField;
    ORrw.Location = ImportField;
    ORrw.Source = ImportField;
    ORrw.PickingDate = StringToDate(ImportField);
    ORrw.PickingTime = ImportField;
    ORrw.InloadingDate = StringToDate(ImportField);
    ORrw.InloadingTime = ImportField;
    ORrw.DespatchRowDate = StringToDate(ImportField);
    ORrw.DespatchRowTime = ImportField;
    ORrw.PlanShipRow = ImportField;
    ORrw.ShipNote = ImportField;
    ORrw.UnitCode = ImportField;
    ORrw.UnitFactQuant = StringToVal(ImportField,M4UVal);
    ORrw.UnitFactPrice = StringToVal(ImportField,M423Val);
    ORrw.UnitXval = StringToVal(ImportField,M4UVal);
    ORrw.UnitYval = StringToVal(ImportField,M4UVal);
    ORrw.UnitZval = StringToVal(ImportField,M4UVal);
    ORrw.Coefficient = StringToVal(ImportField,M45Val);
    ORrw.VECode = ImportField;
    ORrw.Production = ImportField;
    ORrw.GroupOrdRow = StringToLongint(ImportField);
    ORrw.TAX2Code = ImportField;
    ORrw.TAX2Prc = StringToVal(ImportField,M423Val);
    ORrw.TAX2Reb = StringToVal(ImportField,M4Val);
    ORrw.TAX1Reb = StringToVal(ImportField,M4Val);
    ORrw.TAX2Acc = ImportField;
    ORrw.PlanShipRowDate = StringToDate(ImportField);
    ORrw.CUServiceHistNr = StringToLongint(ImportField);
    ORrw.CUServiceUntilDate = StringToDate(ImportField);
    ORrw.Position = ImportField;
    ORrw.RowOrderType = StringToInt(ImportField);
    ORrw.TaxTemplateCode = ImportField;
    ImportPackedMatrix(TMr);
    PackRowFieldMatrix(ORrw,"TaxMatrix",TMr);
    ORrw.Region = ImportField;
    ORrw.Perceptions = StringToInt(ImportField);
    ORrw.MotherArtCode = ImportField;
    ORrw.RecipeQuant = StringToVal(ImportField,M4Qty);
    ORrw.CustArtCode = ImportField;
    ORrw.Salesmen = ImportField;
    ORrw.OrderType = kOrderTypeDefault;
    MatRowPut(ORr,rwcnt,ORrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagORVc(string thetag)
begin
  record ORVc ORr;
  
  while (NextImportLine(false)) begin
    ReadImportTagORVcRecord(ORr);
    RecordImportStore(ORr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrORVc(Integer compnr,string thetag)
begin
  record ORVc ORr;
  
  ORr.SerNr = StringToLongint(ImportField);
  ReadRecordIdStrORVc = BuildRecordIdStr(ORr,compnr);
  return;
end;

procedure ReadImportTagPOVcRecord(record POVc POr)
begin
  record TaxMatrixVc TMr;
  row POVc POrw;
  integer rwcnt;
  
  RecordNew(POr);
  POr.SerNr = StringToLongint(ImportField);
  POr.VECode = ImportField;
  POr.TransDate = StringToDate(ImportField);
  POr.PayDeal = ImportField;
  POr.ExportFlag = StringToInt(ImportField);
  POr.OKFlag = StringToInt(ImportField);
  POr.Addr0 = ImportField;
  POr.Addr1 = ImportField;
  POr.Addr2 = ImportField;
  POr.Addr3 = ImportField;
  POr.ShipAddr0 = ImportField;
  POr.ShipAddr1 = ImportField;
  POr.ShipAddr2 = ImportField;
  POr.ShipAddr3 = ImportField;
  POr.VEContact = ImportField;
  POr.OurContact = ImportField;
  POr.ShipMode = ImportField;
  POr.CurncyCode = ImportField;
  POr.PlanShip = ImportField;
  POr.Sign = ImportField;
  POr.ShipDeal = ImportField;
  POr.LangCode = ImportField;
  POr.OrdNr = StringToLongint(ImportField);
  POr.ToRateB1 = StringToVal(ImportField,M4Rate);
  POr.Closed = StringToInt(ImportField);
  POr.CostPerUnit = ImportField;
  POr.Sum0 = StringToVal(ImportField,M4Val);
  POr.Sum1 = StringToVal(ImportField,M4Val);
  POr.Sum2 = StringToVal(ImportField,M4Val);
  POr.Sum3 = StringToVal(ImportField,M4Val);
  POr.Sum4 = StringToVal(ImportField,M4Val);
  POr.PRCode = ImportField;
  POr.Printdf = StringToInt(ImportField);
  POr.Comment = ImportField;
  POr.InclVAT = StringToInt(ImportField);
  POr.Location = ImportField;
  POr.VEFactoring = ImportField;
  POr.PUFlag = StringToInt(ImportField);
  POr.OSFlag = StringToInt(ImportField);
  POr.ExportedFlag = StringToInt(ImportField);
  POr.FrRate = StringToVal(ImportField,M4Rate);
  POr.ToRateB2 = StringToVal(ImportField,M4Rate);
  POr.BaseRate1 = StringToVal(ImportField,M4Rate);
  POr.BaseRate2 = StringToVal(ImportField,M4Rate);
  POr.WONr = StringToLongint(ImportField);
  POr.Objects = ImportField;
  POr.PIFlag = StringToInt(ImportField);
  POr.InvFlag = StringToInt(ImportField);
  POr.Reference = ImportField;
  POr.SalesMan = ImportField;
  POr.OKPersons = ImportField;
  POr.POClass = ImportField;
  POr.POCQStatNr = StringToLongint(ImportField);
  POr.SalesGroup = ImportField;
  POr.InvAddr3 = ImportField;
  POr.InvAddr4 = ImportField;
  POr.DelAddr3 = ImportField;
  POr.DelAddr4 = ImportField;
  POr.POCOSerNr = StringToLongint(ImportField);
  POr.VEVATCode = ImportField;
  POr.TotPalletNr = StringToVal(ImportField,M4UVal);
  POr.Cost1 = StringToVal(ImportField,M4UVal);
  POr.Cost2 = StringToVal(ImportField,M4UVal);
  POr.Cost3 = StringToVal(ImportField,M4UVal);
  POr.Cost4 = StringToVal(ImportField,M4UVal);
  POr.Cost5 = StringToVal(ImportField,M4UVal);
  POr.CustomsCost = StringToVal(ImportField,M4UVal);
  POr.ShipCost = StringToVal(ImportField,M4UVal);
  POr.IntORNo = StringToLongint(ImportField);
  POr.xAcceptanceState = StringToInt(ImportField);
  POr.xAcceptanceGroup = ImportField;
  POr.PlanShipDate = StringToDate(ImportField);
  POr.PrepaidAmount = StringToVal(ImportField,M4Val);
  POr.InvBeforePU = StringToInt(ImportField);
  POr.TAX1Sum = StringToVal(ImportField,M4Val);
  POr.TAX2Sum = StringToVal(ImportField,M4Val);
  POr.BranchID = ImportField;
  POr.NoTAXonVAT = StringToLongint(ImportField);
  POr.Region = ImportField;
  POr.OrderType = StringToInt(ImportField);
  POr.AcceptanceStatus = StringToInt(ImportField);
  POr.SVONr = StringToLongint(ImportField);
  POr.OrderStockFlag = StringToInt(ImportField);
  POr.ValidUntil = StringToDate(ImportField);
  POr.VETaxTemplateCode = ImportField;
  ImportPackedMatrix(TMr);
  PackFieldMatrix(POr,"TaxMatrix",TMr);
  POr.RebCode = ImportField;
  POr.InvoiceToCode = ImportField;
  POr.AcceptanceBy = ImportField;
  POr.ExtraCostsCalculation = StringToInt(ImportField);
  POr.AcceptanceFYI = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(POr,POrw,1);
    POrw.stp = StringToInt(ImportField);
    POrw.ovst = StringToInt(ImportField);
    POrw.VEArtCode = ImportField;
    POrw.ArtCode = ImportField;
    POrw.Quant = StringToVal(ImportField,M4UVal);
    POrw.Spec = ImportField;
    POrw.Price = StringToVal(ImportField,M45Val);
    POrw.Sum = StringToVal(ImportField,M45Val);
    POrw.vRebate = StringToVal(ImportField,M41Val);
    POrw.VATCode = ImportField;
    POrw.Objects = ImportField;
    POrw.Shipd2 = StringToVal(ImportField,M4UVal);
    POrw.Shipd1 = StringToVal(ImportField,M4UVal);
    POrw.VEQuant = StringToVal(ImportField,M4UVal);
    POrw.PIFactor = StringToVal(ImportField,M4UVal);
    POrw.PriceFactor = StringToVal(ImportField,M45Val);
    POrw.VARList = ImportField;
    POrw.PRCode = ImportField;
    POrw.WSNr = StringToLongint(ImportField);
    POrw.Invd = StringToVal(ImportField,M4UVal);
    POrw.CostAcc = ImportField;
    POrw.PlanShipRow = ImportField;
    POrw.Comment = ImportField;
    POrw.Coefficient = StringToVal(ImportField,M45Val);
    POrw.RentSerialNr = ImportField;
    POrw.PalletNr = StringToVal(ImportField,M4UVal);
    POrw.UnitCode = ImportField;
    POrw.VEUnit = ImportField;
    POrw.RowCost1 = StringToVal(ImportField,M4UVal);
    POrw.RowCost2 = StringToVal(ImportField,M4UVal);
    POrw.RowCost3 = StringToVal(ImportField,M4UVal);
    POrw.RowCost4 = StringToVal(ImportField,M4UVal);
    POrw.RowCost5 = StringToVal(ImportField,M4UVal);
    POrw.ShipCost = StringToVal(ImportField,M45Val);
    POrw.CustomsCost = ImportField;
    POrw.IntORRow = StringToLongint(ImportField);
    POrw.POCORow = StringToLongint(ImportField);
    POrw.TAX2Code = ImportField;
    POrw.TAX2Prc = StringToVal(ImportField,M423Val);
    POrw.TAX2Reb = StringToVal(ImportField,M4Val);
    POrw.TAX1Reb = StringToVal(ImportField,M4Val);
    POrw.TAX2Acc = ImportField;
    POrw.ChargeNumber = StringToLongint(ImportField);
    POrw.StockType = StringToInt(ImportField);
    POrw.OrdRow = StringToLongint(ImportField);
    POrw.TaxTemplateCode = ImportField;
    ImportPackedMatrix(TMr);
    PackRowFieldMatrix(POrw,"TaxMatrix",TMr);
    POrw.TREO = StringToInt(ImportField);
    POrw.OrderType = kOrderTypeDefault;
//    POrw.OrdNr = POr.OrdNr;
    MatRowPut(POr,rwcnt,POrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagPOVc(string thetag)
begin
  record POVc POr;
  
  while (NextImportLine(false)) begin
    ReadImportTagPOVcRecord(POr);
    RecordImportStore(POr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrPOVc(Integer compnr,string thetag)
begin
  record POVc POr;
  
  POr.SerNr = StringToLongint(ImportField);
  ReadRecordIdStrPOVc = BuildRecordIdStr(POr,compnr);
  return;
end;

procedure ReadImportTagVIVc4Record(record VIVc VIr)
begin
  record TaxMatrixVc TMr;
  row VIVc VIrw;
  integer rwcnt;
  
  RecordNew(VIr);
  VIr.SerNr = StringToLongint(ImportField);
  VIr.InvDate = StringToDate(ImportField);
  VIr.PayVal = StringToVal(ImportField,M4Val);
  VIr.RegDate = StringToDate(ImportField);
  VIr.InvoiceNr = ImportField;
  VIr.OKFlag = StringToInt(ImportField);
  VIr.PayDeal = ImportField;
  VIr.VECode = ImportField;
  VIr.VEName = ImportField;
  VIr.DueDate = StringToDate(ImportField);
  VIr.RebDate = StringToDate(ImportField);
  VIr.RefStr = ImportField;
  VIr.BankAcc = ImportField;
  VIr.Sign = ImportField;
  VIr.RebVal = StringToVal(ImportField,M4Val);
  VIr.TransDate = StringToDate(ImportField);
  VIr.InvType = StringToInt(ImportField);
  VIr.VATVal = StringToVal(ImportField,M4Val);
  VIr.APAcc = ImportField;
  VIr.VEFactoring = ImportField;
  VIr.BankName = ImportField;
  VIr.OKPersons = ImportField;
  VIr.CurncyCode = ImportField;
  VIr.ToRateB1 = StringToVal(ImportField,M4Rate);
  VIr.ExportFlag = StringToInt(ImportField);
  VIr.VEVatCode = ImportField;
  VIr.Comment = ImportField;
  VIr.CalcVATVal = StringToVal(ImportField,M4Val);
  VIr.Closed = StringToInt(ImportField);
  VIr.Objects = ImportField;
  VIr.PrelBook = StringToInt(ImportField);
  VIr.BankCode = ImportField;
  VIr.CredInv = StringToLongint(ImportField);
  VIr.xStatFlag = StringToInt(ImportField);
  VIr.CORefStr = ImportField;
  VIr.ExportedFlag = StringToInt(ImportField);
  VIr.POSerNr = StringToLongint(ImportField);
  VIr.FrRate = StringToVal(ImportField,M4Rate);
  VIr.ToRateB2 = StringToVal(ImportField,M4Rate);
  VIr.BaseRate1 = StringToVal(ImportField,M4Rate);
  VIr.BaseRate2 = StringToVal(ImportField,M4Rate);
  VIr.CredMark = ImportField;
  VIr.APonTR = StringToInt(ImportField);
  VIr.Invalid = StringToInt(ImportField);
  VIr.VATNr = ImportField;
  VIr.LangCode = ImportField;
  VIr.InstallmentInv = StringToInt(ImportField);
  VIr.POCQStatNr = StringToLongint(ImportField);
  VIr.SortCode = ImportField;
  VIr.SalesGroup = ImportField;
  VIr.SalesMan = ImportField;
  VIr.POCOSerNr = StringToLongint(ImportField);
  VIr.HoldSum = StringToVal(ImportField,M4Val);
  VIr.DiffVal = StringToVal(ImportField,M4Val);
  VIr.BarCode = ImportField;
  VIr.StatVal = StringToVal(ImportField,M4Val);
  VIr.xAcceptanceState = StringToInt(ImportField);
  VIr.xAcceptanceGroup = ImportField;
  VIr.WithHoldingTax = StringToVal(ImportField,M4Val);
  VIr.SupCurVal = StringToVal(ImportField,M4Val);
  VIr.RcvDate = StringToDate(ImportField);
  VIr.TAX1Sum = StringToVal(ImportField,M4Val);
  VIr.ServiceDelDate = StringToDate(ImportField);
  VIr.OfficialSerNr = ImportField;
  VIr.TAX2Sum = StringToVal(ImportField,M4Val);
  VIr.RebDate2 = StringToDate(ImportField);
  VIr.TaxAuthID = ImportField;
  VIr.TaxAuthIDCC = ImportField;
  VIr.BranchID = ImportField;
  VIr.NoTAXonVAT = StringToLongint(ImportField);
  VIr.IVNr = StringToLongint(ImportField);
  VIr.CAE = ImportField;
  VIr.CAEExpiry = StringToDate(ImportField);
  VIr.Region = ImportField;
  VIr.OrderType = StringToInt(ImportField);
  VIr.RebVal2 = StringToVal(ImportField,M4Val);
  VIr.AcceptanceStatus = StringToInt(ImportField);
  VIr.VETaxTemplateCode = ImportField;
  ImportPackedMatrix(TMr);
  PackFieldMatrix(VIr,"TaxMatrix",TMr);
  VIr.SelfBilling = StringToInt(ImportField);
  VIr.FiscalFlag = StringToInt(ImportField);
  VIr.VATFrRate = StringToVal(ImportField,M4Rate);
  VIr.VATToRateB1 = StringToVal(ImportField,M4Rate);
  VIr.VATToRateB2 = StringToVal(ImportField,M4Rate);
  VIr.VATBaseRate1 = StringToVal(ImportField,M4Rate);
  VIr.VATBaseRate2 = StringToVal(ImportField,M4Rate);
  VIr.Addr1 = ImportField;
  VIr.Addr2 = ImportField;
  VIr.Addr3 = ImportField;
  VIr.InvAddr3 = ImportField;
  VIr.InvAddr4 = ImportField;
  VIr.InvCountry = ImportField;
  VIr.Phone = ImportField;
  VIr.Fax = ImportField;
  VIr.CAEAFlag = StringToInt(ImportField);
  VIr.PRCode = ImportField;
  VIr.OrgVE = ImportField;
  VIr.AcceptanceBy = ImportField;
  VIr.AcceptanceFYI = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(VIr,VIrw,1);
    VIrw.stp = StringToInt(ImportField);
    VIrw.ovst = StringToInt(ImportField);
    VIrw.AccNumber = ImportField;
    VIrw.Objects = ImportField;
    VIrw.Comment = ImportField;
    VIrw.Sum = StringToVal(ImportField,M4Val);
    VIrw.Item = ImportField;
    VIrw.qty = StringToVal(ImportField,M4UVal);
    VIrw.PRCode = ImportField;
    VIrw.VATCode = ImportField;
    VIrw.VEPNr = StringToLongint(ImportField);
    VIrw.PrepayNr = StringToLongint(ImportField);
    VIrw.PrepayAmount = StringToVal(ImportField,M4Val);
    VIrw.OrdRow = StringToLongint(ImportField);
    VIrw.VATVal = StringToVal(ImportField,M4Val);
    VIrw.PeriodCode = ImportField;
    VIrw.ACShort = ImportField;
    VIrw.PUNr = StringToLongint(ImportField);
    VIrw.PURow = StringToLongint(ImportField);
    VIrw.VarianceAmount = StringToVal(ImportField,M4Val);
    VIrw.POCORow = StringToLongint(ImportField);
    VIrw.TAX2Prc = StringToVal(ImportField,M423Val);
    VIrw.PONr = StringToLongint(ImportField);
    VIrw.StockType = StringToInt(ImportField);
    VIrw.SerialNr = ImportField;
    VIrw.WHTax = ImportField;
    VIrw.TaxTemplateCode = ImportField;
    ImportPackedMatrix(TMr);
    PackRowFieldMatrix(VIrw,"TaxMatrix",TMr);
    VIrw.InventoryNr = ImportField;
    VIrw.AssetTransType = StringToInt(ImportField);
    VIrw.OrderType = kOrderTypeDefault;
    MatRowPut(VIr,rwcnt,VIrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagVIVc4(string thetag)
begin
  record VIVc VIr;
  
  while (NextImportLine(false)) begin
    ReadImportTagVIVc4Record(VIr);
    RecordImportStore(VIr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrVIVc4(Integer compnr,string thetag)
begin
  record VIVc VIr;
  
  VIr.SerNr = StringToLongint(ImportField);
  ReadRecordIdStrVIVc4 = BuildRecordIdStr(VIr,compnr);
  return;
end;

procedure ReadImportTagWHCertificateVcRecord(record WHCertificateVc WHCr)
begin
  RecordNew(WHCr);
  WHCr.SerNr = StringToLongint(ImportField);
  WHCr.WHTaxSerNr = StringToLongint(ImportField);
  WHCr.CalcForm = ImportField;
  WHCr.PayMode = ImportField;
  WHCr.VECode = ImportField;
  WHCr.VEName = ImportField;
  WHCr.Sign = ImportField;
  WHCr.UserName = ImportField;
  WHCr.Comment = ImportField;
  WHCr.OPNr = StringToLongint(ImportField);
  WHCr.OPTransDate = StringToDate(ImportField);
  WHCr.OPRefStr = ImportField;
  WHCr.OPComment = ImportField;
  WHCr.BankCurncy = ImportField;
  WHCr.CalcBase = StringToVal(ImportField,M4Val);
  WHCr.Amount = StringToVal(ImportField,M4Val);
  WHCr.LangCode = ImportField;
  WHCr.OPRow = StringToLongint(ImportField);
  WHCr.DocName = ImportField;
  WHCr.WHTax = ImportField;
  WHCr.MinAmount = StringToVal(ImportField,M4Qty);
  WHCr.NoTaxAmount = StringToVal(ImportField,M4Qty);
  WHCr.BaseAmount = StringToVal(ImportField,M4Qty);
  WHCr.BaseCalc = StringToInt(ImportField);
  WHCr.TaxCalc = StringToInt(ImportField);
  WHCr.WHTaxComment = ImportField;
  WHCr.Invalid = StringToInt(ImportField);
  WHCr.ExportedFlag = StringToInt(ImportField);
  WHCr.TaxPrc = StringToVal(ImportField,M4Val);
  
  return;
end;

global
updating procedure ReadImportTagWHCertificateVc(string thetag)
begin
  record WHCertificateVc WHCr;
  
  while (NextImportLine(false)) begin
    ReadImportTagWHCertificateVcRecord(WHCr);
    RecordImportStore(WHCr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrWHCertificateVc(Integer compnr,string thetag)
begin
  record WHCertificateVc WHCr;
  
  WHCr.SerNr = StringToLongint(ImportField);
  ReadRecordIdStrWHCertificateVc = BuildRecordIdStr(WHCr,compnr);
  return;
end;

procedure ReadImportTagGlobalUserVcRecord(record GlobalUserVc GlobalUserr)
begin
  row GlobalUserVc GlobalUserrw;
  integer rwcnt;
  
  RecordNew(GlobalUserr);
  GlobalUserr.Code = ImportField;
  GlobalUserr.Name = ImportField;
  GlobalUserr.AccessGroup = ImportField;
  GlobalUserr.emailAddr = ImportField;
  GlobalUserr.NewPassWord = ImportField;
  GlobalUserr.LangCode = ImportField;
  GlobalUserr.FTPLogin = StringToInt(ImportField);
  GlobalUserr.Closed = StringToInt(ImportField);
  GlobalUserr.OnlyVoiceLogin = StringToInt(ImportField);
  GlobalUserr.DateCreated = StringToDate(ImportField);
  GlobalUserr.OneFunction = ImportField;
  GlobalUserr.TypeOfUser = StringToInt(ImportField);
  GlobalUserr.CanUseOS = StringToInt(ImportField);
  GlobalUserr.Magic = StringToLongint(ImportField);
  GlobalUserr.Newf = StringToInt(ImportField);
  GlobalUserr.MainCRMCompany = ImportField;
  GlobalUserr.CustCode = ImportField;
  GlobalUserr.RegistrationNumber = StringToLongint(ImportField);
  GlobalUserr.StartLevel = StringToInt(ImportField);
  GlobalUserr.Magic2 = StringToLongint(ImportField);
  GlobalUserr.DiscPassword = ImportField;
  GlobalUserr.PasswordNeverExpires = StringToInt(ImportField);
  GlobalUserr.ExpiryDate = StringToDate(ImportField);
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(GlobalUserr,GlobalUserrw,1);
    GlobalUserrw.CompCode = ImportField;
    GlobalUserrw.CompName = ImportField;
    GlobalUserrw.AccessGroup = ImportField;
    GlobalUserrw.StartLevel = StringToInt(ImportField);
    MatRowPut(GlobalUserr,rwcnt,GlobalUserrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagGlobalUserVc(string thetag)
begin
  record GlobalUserVc GlobalUserr;
  
  while (NextImportLine(false)) begin
    ReadImportTagGlobalUserVcRecord(GlobalUserr);
    RecordImportStore(GlobalUserr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrGlobalUserVc(Integer compnr,string thetag)
begin
  record GlobalUserVc GlobalUserr;
  
  GlobalUserr.Code = ImportField;
  ReadRecordIdStrGlobalUserVc = BuildRecordIdStr(GlobalUserr,compnr);
  return;
end;

procedure ReadImportTagConfAccVcRecord(record ConfAccVc ConfAccr)
begin
  RecordNew(ConfAccr);
  ConfAccr.Code = ImportField;
  ConfAccr.Comment = ImportField;
  ConfAccr.AccLevel = StringToInt(ImportField);
  
  return;
end;

global
updating procedure ReadImportTagConfAccVc(string thetag)
begin
  record ConfAccVc ConfAccr;
  
  while (NextImportLine(false)) begin
    ReadImportTagConfAccVcRecord(ConfAccr);
    RecordImportStore(ConfAccr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrConfAccVc(Integer compnr,string thetag)
begin
  record ConfAccVc ConfAccr;
  
  ConfAccr.Code = ImportField;
  ReadRecordIdStrConfAccVc = BuildRecordIdStr(ConfAccr,compnr);
  return;
end;

procedure ReadImportTagActVcRecord(record ActVc Actr)
begin
  row ActVc Actrw;
  integer rwcnt;
  
  RecordNew(Actr);
  Actr.SerNr = StringToLongint(ImportField);
  Actr.MainPersons = ImportField;
  Actr.CCPersons = ImportField;
  Actr.TransDate = StringToDate(ImportField);
  Actr.EndDate = StringToDate(ImportField);
  Actr.StartTime = StringToTime(ImportField);
  Actr.EndTime = StringToTime(ImportField);
  Actr.CostTime = StringToTime(ImportField);
  Actr.CUCode = ImportField;
  Actr.CUName = ImportField;
  Actr.Contact = ImportField;
  Actr.Phone = ImportField;
  Actr.ActType = ImportField;
  Actr.ActResult = ImportField;
  Actr.OKFlag = StringToInt(ImportField);
  Actr.PrioLevel = StringToLongint(ImportField);
  Actr.PrivateFlag = StringToInt(ImportField);
  Actr.TodoFlag = StringToInt(ImportField);
  Actr.CalTimeFlag = StringToInt(ImportField);
  Actr.PRCode = ImportField;
  Actr.ItemCode = ImportField;
  Actr.Comment = ImportField;
  Actr.LengthClass = StringToInt(ImportField);
  Actr.Resources = ImportField;
  Actr.Invalid = StringToInt(ImportField);
  Actr.TimeClass = ImportField;
  Actr.SymbNr = StringToInt(ImportField);
  Actr.Supervisor = ImportField;
  Actr.CreationDate = StringToDate(ImportField);
  Actr.LastChangedDate = StringToDate(ImportField);
  Actr.LangCode = ImportField;
  Actr.UserStr1 = ImportField;
  Actr.UserStr2 = ImportField;
  Actr.UserStr3 = ImportField;
  Actr.UserStr4 = ImportField;
  Actr.UserStr5 = ImportField;
  Actr.UserVal1 = StringToVal(ImportField,M4UVal);
  Actr.UserVal2 = StringToVal(ImportField,M4UVal);
  Actr.UserVal3 = StringToVal(ImportField,M4UVal);
  Actr.UserDate1 = StringToDate(ImportField);
  Actr.UserDate2 = StringToDate(ImportField);
  Actr.UserDate3 = StringToDate(ImportField);
  Actr.ArtCode = ImportField;
  Actr.SerialNr = ImportField;
  Actr.SVOSerNr = StringToLongint(ImportField);
  Actr.ProdSerNr = StringToLongint(ImportField);
  Actr.AlarmType = StringToInt(ImportField);
  Actr.AlarmWhen = StringToInt(ImportField);
  Actr.AlarmUnits = StringToInt(ImportField);
  Actr.ExternalType = StringToInt(ImportField);
  Actr.ExternalID = ImportField;
  Actr.InventoryNr = ImportField;
  Actr.ProdOpSerNr = StringToLongint(ImportField);
  Actr.Mother = StringToLongint(ImportField);
  Actr.TRSerNr = StringToLongint(ImportField);
  Actr.RsrtEventSerNr = StringToLongint(ImportField);
  Actr.AutoGenCallFlag = StringToInt(ImportField);
  Actr.FromFileName = ImportField;
  Actr.FromSerNr = ImportField;
  Actr.ActTypeComment = ImportField;
  Actr.NextApprovers = ImportField;
  Actr.NextApproversType = StringToInt(ImportField);
  Actr.NextFYIPersons = ImportField;
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(Actr,Actrw,1);
    Actrw.TextCode = ImportField;
    Actrw.Text = ImportField;
    MatRowPut(Actr,rwcnt,Actrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagActVc(string thetag)
begin
  record ActVc Actr;
  
  while (NextImportLine(false)) begin
    ReadImportTagActVcRecord(Actr);
    RecordImportStore(Actr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrActVc(Integer compnr,string thetag)
begin
  record ActVc Actr;
  
  Actr.SerNr = StringToLongint(ImportField);
  ReadRecordIdStrActVc = BuildRecordIdStr(Actr,compnr);
  return;
end;

procedure ReadImportTagartikel4Record(record INVc INr)
begin
  row INVc INrw;
  integer rwcnt;
  
  RecordNew(INr);
  ImportField; // NewAutosyncRegister
  ImportField; // NewAutosyncRegister
  ImportField; // NewAutosyncRegister
  INr.Code = ImportField;
  INr.Name = ImportField;
  INr.Unittext = ImportField;
  INr.MinLevel = StringToVal(ImportField,M4Qty);
  INr.Objects = ImportField;
  INr.SalesAcc = ImportField;
  INr.UPrice1 = StringToVal(ImportField,M423Val);
  INr.ItemType = StringToInt(ImportField);
  INr.Group = ImportField;
  /*INr.x1 =*/ ImportField;
  /*INr.x2 =*/ ImportField;
  INr.InPrice = StringToVal(ImportField,M45Val);
  INr.InvCode = ImportField;
  INr.ExtraCost = StringToVal(ImportField,M4Val);
  INr.SerNrf = StringToInt(ImportField);
  INr.Department = ImportField;
  INr.Weight = StringToVal(ImportField,M45Val);
  INr.Volume = StringToVal(ImportField,M45Val);
  INr.EUCodex = ImportField;
  INr.InCurncyCode = ImportField;
  INr.Bonus = StringToVal(ImportField,M4Qty);
  INr.Recepy = ImportField;
  INr.Markup = StringToVal(ImportField,M4Qty);
  /*INr.x3 =*/ ImportField;
  INr.BarCode = ImportField;
  INr.UpdateCost = StringToInt(ImportField);
  INr.LastPriceChange = StringToDate(ImportField);
  INr.CalcPrice = ImportField;
  INr.VATCode = ImportField;
  INr.PriceFactor = StringToVal(ImportField,M45Val);
  INr.Terminated = StringToInt(ImportField);
  INr.AvgMarkup = StringToVal(ImportField,M4Val);
  INr.LastPurchPrice = StringToVal(ImportField,M45Val);
  INr.LastPurchCurncyCode = ImportField;
  INr.WeighedAvPrice = StringToVal(ImportField,M45Val);
  INr.Conversion1 = StringToVal(ImportField,M45Val);
  INr.Conversion2 = StringToVal(ImportField,M45Val);
  INr.WarrantyLength = StringToVal(ImportField,M4Qty);
  INr.InvRecepy = ImportField;
  INr.EUSalesAcc = ImportField;
  INr.ExpSalesAcc = ImportField;
  INr.VATCodeEU = ImportField;
  INr.VATCodeExp = ImportField;
  INr.ChangePrice = StringToInt(ImportField);
  INr.RebCode = ImportField;
  INr.ExplodeRec = StringToInt(ImportField);
  INr.Unittext2 = ImportField;
  INr.UnitCoefficient = StringToVal(ImportField,M45Val);
  INr.WarnText1 = ImportField;
  INr.VARList = ImportField;
  INr.ItemMaterial = StringToInt(ImportField);
  INr.AlcPrc = StringToVal(ImportField,M4UVal);
  INr.DefaultSource = ImportField;
  INr.AlternativeCode = ImportField;
  INr.CostAcc = ImportField;
  INr.DefLocation = ImportField;
  INr.LastBasePriceChange = StringToDate(ImportField);
  INr.MaxLevel = StringToVal(ImportField,M4Qty);
  INr.LastPurchPrice2 = StringToVal(ImportField,M45Val);
  INr.Width = StringToVal(ImportField,M4UVal);
  INr.Height = StringToVal(ImportField,M4UVal);
  INr.Depth = StringToVal(ImportField,M4UVal);
  INr.ContractItem = ImportField;
  INr.Internal = StringToInt(ImportField);
  INr.InclItemFreight = StringToInt(ImportField);
  INr.FixedFreight = StringToVal(ImportField,M4Val);
  INr.DispGroups = ImportField;
  INr.HazLevCode = ImportField;
  INr.Density = StringToVal(ImportField,M45Val);
  INr.xClassification = ImportField;
  INr.CredSalesAcc = ImportField;
  INr.CredEUSalesAcc = ImportField;
  INr.CredExpSalesAcc = ImportField;
  INr.CredVATCode = ImportField;
  INr.CredVATCodeEU = ImportField;
  INr.CredVATCodeExp = ImportField;
  INr.RentalItem = ImportField;
  INr.CompUsage = ImportField;
  INr.colnr = StringToInt(ImportField);
  INr.VARMask = ImportField;
  INr.VARRepOrder = ImportField;
  INr.VARSubsets = ImportField;
  INr.LocArea = ImportField;
  INr.EKNCode = ImportField;
  INr.DefPalletItem = ImportField;
  INr.QtyonPallet = StringToVal(ImportField,M4UVal);
  INr.PalletWidth = StringToVal(ImportField,M4UVal);
  INr.PalletHeight = StringToVal(ImportField,M4UVal);
  INr.PalletDepth = StringToVal(ImportField,M4UVal);
  INr.Brand = ImportField;
  INr.BrandType = ImportField;
  INr.PickArea = ImportField;
  INr.SWWCode = ImportField;
  INr.RepaPricePerWeight = StringToVal(ImportField,M4Val);
  INr.PalletsInPickArea = StringToVal(ImportField,M4UVal);
  INr.DefPosWidth = StringToVal(ImportField,M4UVal);
  INr.DefPosHeight = StringToVal(ImportField,M4UVal);
  INr.DefPosDepth = StringToVal(ImportField,M4UVal);
  INr.InPriceB2 = StringToVal(ImportField,M45Val);
  INr.WeighedAvPriceB2 = StringToVal(ImportField,M45Val);
  INr.EUCostAcc = ImportField;
  INr.ExpCostAcc = ImportField;
  INr.PalletLayers = StringToVal(ImportField,M4UVal);
  INr.QtyonPalletLayer = StringToVal(ImportField,M4UVal);
  INr.UserStr1 = ImportField;
  INr.UserStr2 = ImportField;
  INr.UserStr3 = ImportField;
  INr.UserStr4 = ImportField;
  INr.UserStr5 = ImportField;
  INr.UserVal1 = StringToVal(ImportField,M4UVal);
  INr.UserVal2 = StringToVal(ImportField,M4UVal);
  INr.UserVal3 = StringToVal(ImportField,M4UVal);
  INr.UserDate1 = StringToDate(ImportField);
  INr.UserDate2 = StringToDate(ImportField);
  INr.UserDate3 = StringToDate(ImportField);
  INr.RentGroup = ImportField;
  INr.FAGroup = ImportField;
  INr.NetWeight = StringToVal(ImportField,M45Val);
  INr.PrimaryCostModel = StringToInt(ImportField);
  INr.QueuedCostModel = StringToInt(ImportField);
  INr.CostPerc = StringToVal(ImportField,M4Val);
  INr.FIFOPerSerialNr = StringToInt(ImportField);
  INr.FIFOPerLocation = StringToInt(ImportField);
  INr.WAPerLocation = StringToInt(ImportField);
  INr.CostPricePerLocation = StringToInt(ImportField);
  INr.NotForSales = StringToInt(ImportField);
  INr.SRUpdateCost = StringToInt(ImportField);
  INr.SuppSerialNr = ImportField;
  INr.MajStoneDet = ImportField;
  INr.Colour = ImportField;
  INr.Clarity = ImportField;
  INr.Cert = ImportField;
  INr.MinStoneDet = ImportField;
  INr.Metal = ImportField;
  INr.RowWeight = ImportField;
  INr.Size = ImportField;
  INr.Length = ImportField;
  INr.WatchBrand = ImportField;
  INr.StyleName = ImportField;
  INr.WatchMetal = ImportField;
  INr.Movement = ImportField;
  INr.BrcStr = ImportField;
  INr.Gender = ImportField;
  INr.Other = ImportField;
  INr.Other2 = ImportField;
  INr.Reference = ImportField;
  INr.Perceptions = StringToInt(ImportField);
  INr.Withholdings = StringToInt(ImportField);
  INr.TaxTemplateCode = ImportField;
  INr.TaxTemplateCodeEU = ImportField;
  INr.TaxTemplateCodeExp = ImportField;
  INr.DonotRequireBatchNrOnIVCash = StringToInt(ImportField);
  INr.HotelWIPAcc = ImportField;
  INr.CPSCode = ImportField;
  INr.SVOInvbleSalesAcc = ImportField;
  INr.SVOWarrantySalesAcc = ImportField;
  INr.SVOContractSalesAcc = ImportField;
  INr.SVOGoodwillSalesAcc = ImportField;
  INr.SVOInvbleCostAcc = ImportField;
  INr.SVOWarrantyCostAcc = ImportField;
  INr.SVOContractCostAcc = ImportField;
  INr.SVOGoodwillCostAcc = ImportField;
  INr.HasExcise = StringToInt(ImportField);
  INr.ProjMaterialsUsageAcc = ImportField;
  INr.DefOrderType = StringToInt(ImportField);
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(INr,INrw,1);
    INrw.LangCode = ImportField;
    INrw.Text = ImportField;
    MatRowPut(INr,rwcnt,INrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagartikel4(string thetag)
begin
  record INVc INr;
  
  while (NextImportLine(false)) begin
    ReadImportTagartikel4Record(INr);
    RecordImportStore(INr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrartikel4(Integer compnr,string thetag)
begin
  record INVc INr;
  
  INr.Code = ImportField;
  ReadRecordIdStrartikel4 = BuildRecordIdStr(INr,compnr);
  return;
end;

procedure ReadImportTagLocalINVcRecord(record LocalINVc LocalINr)
begin
  row LocalINVc LocalINrw;
  integer rwcnt;
  
  RecordNew(LocalINr);
  LocalINr.seqnr = StringToLongint(ImportField);
  LocalINr.Code = ImportField;
  LocalINr.Name = ImportField;
  LocalINr.Unittext = ImportField;
  LocalINr.MinLevel = StringToVal(ImportField,M4Qty);
  LocalINr.Objects = ImportField;
  LocalINr.SalesAcc = ImportField;
  LocalINr.UPrice1 = StringToVal(ImportField,M423Val);
  LocalINr.ItemType = StringToInt(ImportField);
  LocalINr.Group = ImportField;
  /*LocalINr.x1 =*/ ImportField;
  /*LocalINr.x2 =*/ ImportField;
  LocalINr.InPrice = StringToVal(ImportField,M45Val);
  LocalINr.InvCode = ImportField;
  LocalINr.ExtraCost = StringToVal(ImportField,M4Val);
  LocalINr.SerNrf = StringToInt(ImportField);
  LocalINr.Department = ImportField;
  LocalINr.Weight = StringToVal(ImportField,M45Val);
  LocalINr.Volume = StringToVal(ImportField,M45Val);
  LocalINr.EUCodex = ImportField;
  LocalINr.InCurncyCode = ImportField;
  LocalINr.Bonus = StringToVal(ImportField,M4Qty);
  LocalINr.Recepy = ImportField;
  LocalINr.Markup = StringToVal(ImportField,M4Qty);
  /*LocalINr.x3 =*/ ImportField;
  LocalINr.BarCode = ImportField;
  LocalINr.UpdateCost = StringToInt(ImportField);
  LocalINr.LastPriceChange = StringToDate(ImportField);
  LocalINr.CalcPrice = ImportField;
  LocalINr.VATCode = ImportField;
  LocalINr.PriceFactor = StringToVal(ImportField,M45Val);
  LocalINr.Terminated = StringToInt(ImportField);
  LocalINr.AvgMarkup = StringToVal(ImportField,M4Val);
  LocalINr.LastPurchPrice = StringToVal(ImportField,M45Val);
  LocalINr.LastPurchCurncyCode = ImportField;
  LocalINr.WeighedAvPrice = StringToVal(ImportField,M45Val);
  LocalINr.Conversion1 = StringToVal(ImportField,M45Val);
  LocalINr.Conversion2 = StringToVal(ImportField,M45Val);
  LocalINr.WarrantyLength = StringToVal(ImportField,M4Qty);
  LocalINr.InvRecepy = ImportField;
  LocalINr.EUSalesAcc = ImportField;
  LocalINr.ExpSalesAcc = ImportField;
  LocalINr.VATCodeEU = ImportField;
  LocalINr.VATCodeExp = ImportField;
  LocalINr.ChangePrice = StringToInt(ImportField);
  LocalINr.RebCode = ImportField;
  LocalINr.ExplodeRec = StringToInt(ImportField);
  LocalINr.Unittext2 = ImportField;
  LocalINr.UnitCoefficient = StringToVal(ImportField,M45Val);
  LocalINr.WarnText1 = ImportField;
  LocalINr.VARList = ImportField;
  LocalINr.ItemMaterial = StringToInt(ImportField);
  LocalINr.AlcPrc = StringToVal(ImportField,M4UVal);
  LocalINr.DefaultSource = ImportField;
  LocalINr.AlternativeCode = ImportField;
  LocalINr.CostAcc = ImportField;
  LocalINr.DefLocation = ImportField;
  LocalINr.LastBasePriceChange = StringToDate(ImportField);
  LocalINr.MaxLevel = StringToVal(ImportField,M4Qty);
  LocalINr.LastPurchPrice2 = StringToVal(ImportField,M45Val);
  LocalINr.Width = StringToVal(ImportField,M4UVal);
  LocalINr.Height = StringToVal(ImportField,M4UVal);
  LocalINr.Depth = StringToVal(ImportField,M4UVal);
  LocalINr.ContractItem = ImportField;
  LocalINr.Internal = StringToInt(ImportField);
  LocalINr.InclItemFreight = StringToInt(ImportField);
  LocalINr.FixedFreight = StringToVal(ImportField,M4Val);
  LocalINr.DispGroups = ImportField;
  LocalINr.HazLevCode = ImportField;
  LocalINr.Density = StringToVal(ImportField,M45Val);
  LocalINr.xClassification = ImportField;
  LocalINr.CredSalesAcc = ImportField;
  LocalINr.CredEUSalesAcc = ImportField;
  LocalINr.CredExpSalesAcc = ImportField;
  LocalINr.CredVATCode = ImportField;
  LocalINr.CredVATCodeEU = ImportField;
  LocalINr.CredVATCodeExp = ImportField;
  LocalINr.RentalItem = ImportField;
  LocalINr.CompUsage = ImportField;
  LocalINr.colnr = StringToInt(ImportField);
  LocalINr.VARMask = ImportField;
  LocalINr.VARRepOrder = ImportField;
  LocalINr.VARSubsets = ImportField;
  LocalINr.LocArea = ImportField;
  LocalINr.EKNCode = ImportField;
  LocalINr.DefPalletItem = ImportField;
  LocalINr.QtyonPallet = StringToVal(ImportField,M4UVal);
  LocalINr.PalletWidth = StringToVal(ImportField,M4UVal);
  LocalINr.PalletHeight = StringToVal(ImportField,M4UVal);
  LocalINr.PalletDepth = StringToVal(ImportField,M4UVal);
  LocalINr.Brand = ImportField;
  LocalINr.BrandType = ImportField;
  LocalINr.PickArea = ImportField;
  LocalINr.SWWCode = ImportField;
  LocalINr.RepaPricePerWeight = StringToVal(ImportField,M4Val);
  LocalINr.PalletsInPickArea = StringToVal(ImportField,M4UVal);
  LocalINr.DefPosWidth = StringToVal(ImportField,M4UVal);
  LocalINr.DefPosHeight = StringToVal(ImportField,M4UVal);
  LocalINr.DefPosDepth = StringToVal(ImportField,M4UVal);
  LocalINr.InPriceB2 = StringToVal(ImportField,M45Val);
  LocalINr.WeighedAvPriceB2 = StringToVal(ImportField,M45Val);
  LocalINr.EUCostAcc = ImportField;
  LocalINr.ExpCostAcc = ImportField;
  LocalINr.PalletLayers = StringToVal(ImportField,M4UVal);
  LocalINr.QtyonPalletLayer = StringToVal(ImportField,M4UVal);
  LocalINr.UserStr1 = ImportField;
  LocalINr.UserStr2 = ImportField;
  LocalINr.UserStr3 = ImportField;
  LocalINr.UserStr4 = ImportField;
  LocalINr.UserStr5 = ImportField;
  LocalINr.UserVal1 = StringToVal(ImportField,M4UVal);
  LocalINr.UserVal2 = StringToVal(ImportField,M4UVal);
  LocalINr.UserVal3 = StringToVal(ImportField,M4UVal);
  LocalINr.UserDate1 = StringToDate(ImportField);
  LocalINr.UserDate2 = StringToDate(ImportField);
  LocalINr.UserDate3 = StringToDate(ImportField);
  LocalINr.RentGroup = ImportField;
  LocalINr.FAGroup = ImportField;
  LocalINr.NetWeight = StringToVal(ImportField,M45Val);
  LocalINr.PrimaryCostModel = StringToInt(ImportField);
  LocalINr.QueuedCostModel = StringToInt(ImportField);
  LocalINr.CostPerc = StringToVal(ImportField,M4Val);
  LocalINr.FIFOPerSerialNr = StringToInt(ImportField);
  LocalINr.FIFOPerLocation = StringToInt(ImportField);
  LocalINr.WAPerLocation = StringToInt(ImportField);
  LocalINr.CostPricePerLocation = StringToInt(ImportField);
  LocalINr.NotForSales = StringToInt(ImportField);
  LocalINr.SRUpdateCost = StringToInt(ImportField);
  LocalINr.SuppSerialNr = ImportField;
  LocalINr.MajStoneDet = ImportField;
  LocalINr.Colour = ImportField;
  LocalINr.Clarity = ImportField;
  LocalINr.Cert = ImportField;
  LocalINr.MinStoneDet = ImportField;
  LocalINr.Metal = ImportField;
  LocalINr.RowWeight = ImportField;
  LocalINr.Size = ImportField;
  LocalINr.Length = ImportField;
  LocalINr.WatchBrand = ImportField;
  LocalINr.StyleName = ImportField;
  LocalINr.WatchMetal = ImportField;
  LocalINr.Movement = ImportField;
  LocalINr.BrcStr = ImportField;
  LocalINr.Gender = ImportField;
  LocalINr.Other = ImportField;
  LocalINr.Other2 = ImportField;
  LocalINr.Reference = ImportField;
  LocalINr.Perceptions = StringToInt(ImportField);
  LocalINr.Withholdings = StringToInt(ImportField);
  LocalINr.TaxTemplateCode = ImportField;
  LocalINr.TaxTemplateCodeEU = ImportField;
  LocalINr.TaxTemplateCodeExp = ImportField;
  LocalINr.DonotRequireBatchNrOnIVCash = StringToInt(ImportField);
  LocalINr.HotelWIPAcc = ImportField;
  LocalINr.CPSCode = ImportField;
  LocalINr.SVOInvbleSalesAcc = ImportField;
  LocalINr.SVOWarrantySalesAcc = ImportField;
  LocalINr.SVOContractSalesAcc = ImportField;
  LocalINr.SVOGoodwillSalesAcc = ImportField;
  LocalINr.SVOInvbleCostAcc = ImportField;
  LocalINr.SVOWarrantyCostAcc = ImportField;
  LocalINr.SVOContractCostAcc = ImportField;
  LocalINr.SVOGoodwillCostAcc = ImportField;
  LocalINr.HasExcise = StringToInt(ImportField);
  LocalINr.ProjMaterialsUsageAcc = ImportField;
  LocalINr.DefOrderType = StringToInt(ImportField);
  
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(LocalINr,LocalINrw,1);
    LocalINrw.LangCode = ImportField;
    LocalINrw.Text = ImportField;
    MatRowPut(LocalINr,rwcnt,LocalINrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagLocalINVc(string thetag)
begin
  record LocalINVc LocalINr;
  
  while (NextImportLine(false)) begin
    ReadImportTagLocalINVcRecord(LocalINr);
    RecordImportStore(LocalINr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrLocalINVc(Integer compnr,string thetag)
begin
  record LocalINVc LocalINr;
  
  LocalINr.Code = ImportField;
  ReadRecordIdStrLocalINVc = BuildRecordIdStr(LocalINr,compnr);
  return;
end;

procedure ReadImportTagcu4Record(var record CUVc CUr)
begin
  RecordNew(CUr);
  
  ImportField; // NewAutosyncRegister
  ImportField; // NewAutosyncRegister
  ImportField; // NewAutosyncRegister
  CUr.Code = ImportField;
  CUr.Name = ImportField;
  CUr.Person = ImportField;
  CUr.WarnText1 = ImportField;
  CUr.InvAddr0 = ImportField;
  CUr.InvAddr1 = ImportField;
  CUr.InvAddr2 = ImportField;
  CUr.InvoiceToCode = ImportField;
  CUr.DelAddr0 = ImportField;
  CUr.DelAddr1 = ImportField;
  CUr.DelAddr2 = ImportField;
  CUr.Phone = ImportField;
  CUr.Fax = ImportField;
  CUr.CustCat = ImportField;
  CUr.Comment = ImportField;
  CUr.PayDeal = ImportField;
  CUr.ExportFlag = StringToInt(ImportField);
  CUr.AccFlag = StringToInt(ImportField);
  CUr.Objects = ImportField;
  CUr.InterestFlag = StringToInt(ImportField);
  CUr.VATNr = ImportField;
  CUr.CountryCode = ImportField;
  CUr.SearchKey = ImportField;
  CUr.RemndrFlag = StringToInt(ImportField);
  CUr.LangCode = ImportField;
  CUr.CurncyCode = ImportField;
  CUr.OnAccount = StringToInt(ImportField);
  CUr.SalesMan = ImportField;
  CUr.CreditLimit = StringToVal(ImportField,M4Val);
  CUr.ShipDeal = ImportField;
  CUr.ShipMode = ImportField;
  CUr.VATCode = ImportField;
  CUr.Department = ImportField;
  CUr.OrderComment = ImportField;
  CUr.FreightNr = ImportField;
  CUr.PLCode = ImportField;
  CUr.RebCode = ImportField;
  CUr.Classification = ImportField;
  CUr.blockedFlag = StringToInt(ImportField);
  CUr.DateChanged = StringToDate(ImportField);
  CUr.AccOperator = ImportField;
  CUr.SecAccount = ImportField;
  CUr.BankAccount = ImportField;
  CUr.JobDesc = ImportField;
  CUr.CustType = StringToInt(ImportField);
  CUr.ComCode = ImportField;
  CUr.Sorting = ImportField;
  CUr.RegNr1 = ImportField;
  CUr.RegNr2 = ImportField;
  CUr.CPRNr = ImportField;
  CUr.wwwAddr = ImportField;
  CUr.CompItemCode = ImportField;
  CUr.ANACode = ImportField;
  CUr.EDIFlag = StringToInt(ImportField);
  CUr.eMail = ImportField;
  CUr.IntRate = StringToVal(ImportField,M4Val);
  CUr.TheirCode = ImportField;
  CUr.PriceBasedOn = StringToInt(ImportField);
  CUr.DeliveryBasedOn = StringToInt(ImportField);
  CUr.SalesGroup = ImportField;
  CUr.SortCode = ImportField;
  CUr.AllowLogin = StringToInt(ImportField);
  CUr.Password = StringToLongint(ImportField);
  CUr.FTPLogin = StringToInt(ImportField);
  CUr.DateCreated = StringToDate(ImportField);
  CUr.EGOFlag = StringToInt(ImportField);
  CUr.InvAddr3 = ImportField;
  CUr.DelAddr3 = ImportField;
  CUr.xArea = ImportField;
  CUr.xAreaName = ImportField;
  CUr.InvAddr4 = ImportField;
  CUr.DelAddr4 = ImportField;
  CUr.WebConf = ImportField;
  CUr.WebStartPage = ImportField;
  CUr.FreightCode = ImportField;
  CUr.MainDispGroup = ImportField;
  CUr.AutoGiro = StringToInt(ImportField);
  CUr.OnHoldFlag = StringToInt(ImportField);
  CUr.ColectionFlag = StringToInt(ImportField);
  CUr.LocationCode = ImportField;
  CUr.WebDisplays = ImportField;
  CUr.Mobile = ImportField;
  CUr.NoLetterPosting = StringToInt(ImportField);
  CUr.FiscalFlag = StringToInt(ImportField);
  CUr.UserStr1 = ImportField;
  CUr.UserStr2 = ImportField;
  CUr.UserStr3 = ImportField;
  CUr.UserStr4 = ImportField;
  CUr.UserStr5 = ImportField;
  CUr.UserVal1 = StringToVal(ImportField,M4UVal);
  CUr.UserVal2 = StringToVal(ImportField,M4UVal);
  CUr.UserVal3 = StringToVal(ImportField,M4UVal);
  CUr.UserDate1 = StringToDate(ImportField);
  CUr.UserDate2 = StringToDate(ImportField);
  CUr.UserDate3 = StringToDate(ImportField);
  CUr.AccAP = ImportField;
  CUr.AccCost = ImportField;
  CUr.Bank = ImportField;
  CUr.OnAccAccAP = ImportField;
  CUr.MinOrdSum = StringToVal(ImportField,M4Val);
  CUr.PurchAcc = ImportField;
  CUr.RefStr = ImportField;
  CUr.WithPayMode = ImportField;
  CUr.RetainPrc = ImportField;
  CUr.NoMailPosting = StringToInt(ImportField);
  CUr.VEType = StringToInt(ImportField);
  CUr.CUType = StringToInt(ImportField);
  CUr.VEPayDeal = ImportField;
  CUr.VEShipDeal = ImportField;
  CUr.VEShipMode = ImportField;
  CUr.VECreditLimit = StringToVal(ImportField,M4Val);
  CUr.VEObjects = ImportField;
  CUr.VEWarnText1 = ImportField;
  CUr.VEFactoring = ImportField;
  CUr.VECurncyCode = ImportField;
  CUr.VECustID = ImportField;
  CUr.VEVATCode = ImportField;
  CUr.NoFactoringFlag = StringToInt(ImportField);
  CUr.NoRepa = StringToInt(ImportField);
  CUr.VECat = ImportField;
  CUr.IBANCode = ImportField;
  CUr.xEInvAddr = ImportField;
  CUr.xEInvFunc = StringToInt(ImportField);
  CUr.xAcceptanceGroup = ImportField;
  CUr.WebServiceChannel = StringToInt(ImportField);
  CUr.SkypeName = ImportField;
  CUr.Region = ImportField;
  CUr.NoTax1 = StringToInt(ImportField);
  CUr.NoTax2 = StringToInt(ImportField);
  CUr.GuestType = StringToInt(ImportField);
  CUr.PassportNr = ImportField;
  CUr.Profesion = ImportField;
  CUr.Nationality = ImportField;
  CUr.BirthDate = StringToDate(ImportField);
  CUr.Gender = StringToInt(ImportField);
  CUr.Newspaper = ImportField;
  CUr.Smoking = StringToInt(ImportField);
  CUr.DocType = ImportField;
  CUr.Blacklist = StringToInt(ImportField);
  CUr.MarStatus = StringToInt(ImportField);
  CUr.Passphrase = ImportField;
  CUr.SIPCode = ImportField;
  CUr.AltPhone = ImportField;
  CUr.Comment0 = ImportField;
  CUr.Comment1 = ImportField;
  CUr.Comment2 = ImportField;
  CUr.Title = ImportField;
  CUr.Salutation1 = ImportField;
  CUr.Salutation2 = ImportField;
  CUr.Salutation3 = ImportField;
  CUr.xUserCode = ImportField;
  CUr.DealerType = StringToInt(ImportField);
  CUr.GroupInv = StringToInt(ImportField);
  CUr.AddressBooks = ImportField;
  CUr.Extension = ImportField;
  CUr.TourOperator = ImportField;
  CUr.Agent = ImportField;
  CUr.DietRemarks = ImportField;
  CUr.RequirementRemarks = ImportField;
  CUr.AgeStatus = StringToInt(ImportField);
  CUr.Age = StringToLongint(ImportField);
  CUr.DefGuestPayMode = ImportField;
  CUr.BookOrigin = ImportField;
  CUr.TaxTemplateCode = ImportField;
  CUr.VETaxTemplateCode = ImportField;
  CUr.EmployeeType = StringToInt(ImportField);
  CUr.Ethnicity = ImportField;
  CUr.BirthPlace = ImportField;
  CUr.IDNr = ImportField;
  CUr.VisaType = ImportField;
  CUr.VisaNr = ImportField;
  CUr.VisaExpiry = StringToDate(ImportField);
  CUr.MilitaryDocNr = ImportField;
  CUr.SocialSecurityNr = ImportField;
  CUr.DisabledStatus = StringToInt(ImportField);
  CUr.Disability = ImportField;
  CUr.HealthStatus = ImportField;
  CUr.HealthIssues = ImportField;
  CUr.DriverLicenceCategory = ImportField;
  CUr.SchoolName = ImportField;
  CUr.EducationalDegree = ImportField;
  CUr.EducationalMajor = ImportField;
  CUr.EducationStatus = StringToInt(ImportField);
  CUr.PreviousEmployer = ImportField;
  CUr.PreviousJobTitle = ImportField;
  CUr.Birthday = ImportField;
  CUr.VERebCode = ImportField;
  CUr.SelfBilling = StringToInt(ImportField);
  CUr.DelCountry = ImportField;
  CUr.VEInvoiceToCode = ImportField;
  CUr.MainPartner = ImportField;
  CUr.CreditLimitDays = StringToLongint(ImportField);
  CUr.VECreditLimitDays = StringToLongint(ImportField);
  CUr.FTax = StringToInt(ImportField);
  CUr.SuframaRegNr = ImportField;
  CUr.DefMarkup = ImportField;
  CUr.InvCountryName = ImportField;
  CUr.DelCountryName = ImportField;
  CUr.PaymentCode = ImportField;
  CUr.MarketUserName = ImportField;
  CUr.RemoteBackupsPassword = ImportField;
  CUr.RemoteBackupsAddress = ImportField;
  CUr.RemoteBackupsPort = StringToInt(ImportField);
  CUr.BirthCountry = ImportField;
  CUr.LegalForm = ImportField;
  CUr.VATNrCheckDate = StringToDate(ImportField);
  CUr.QQName = ImportField;
  CUr.WeiboName = ImportField;
  CUr.RecipientGLN = ImportField;
  CUr.IPBookVAT = StringToInt(ImportField);
  CUr.OPBookVAT = StringToInt(ImportField);
  CUr.BillingTypePreference = StringToInt(ImportField);
  
  return;
end;

global
updating procedure ReadImportTagcu4(string thetag)
begin
  record CUVc CUr;
  
  while (NextImportLine(false)) begin
    ReadImportTagcu4Record(CUr);
    RecordImportStore(CUr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrcu4(Integer compnr,string thetag)
begin
  record CUVc CUr;
  
  CUr.Code = ImportField;
  ReadRecordIdStrcu4 = BuildRecordIdStr(CUr,compnr);
  return;
end;

procedure ReadImportTagRestAccVcRecord(record RestAccVc RestAccr,Integer UseTaxTemplatesforTaxCalc)
begin
  record TaxMatrixVc TMr;
  row RestAccVc RestAccrw;
  Integer rwcnt;
  string 255 tstr;
  
  RecordNew(RestAccr);
  RestAccr.SerNr = StringToLongint(ImportField);
  RestAccr.TransDate = StringToDate(ImportField);
  RestAccr.TransTime = StringToTime(ImportField);
  RestAccr.CustCode = ImportField;
  RestAccr.Cashier = ImportField;
  RestAccr.Comment = ImportField;
  RestAccr.Closed = StringToInt(ImportField);
  RestAccr.Sum4 = StringToVal(ImportField,M4Val);
  RestAccr.Sum1 = StringToVal(ImportField,M4Val);
  RestAccr.Paid = StringToVal(ImportField,M4Val);
  RestAccr.Resource = ImportField;
  RestAccr.CreditCard = ImportField;
  RestAccr.AuthorizationCode = ImportField;
  RestAccr.PayDeal = ImportField;
  RestAccr.CUCode = ImportField;
  RestAccr.CUName = ImportField;
  RestAccr.MachineName = ImportField;
  RestAccr.PaySerNr = StringToLongint(ImportField);
  RestAccr.Invalid = StringToInt(ImportField);
  RestAccr.SalesGroup = ImportField;
  RestAccr.GuestCode = ImportField;
  RestAccr.GuestName = ImportField;
  RestAccr.NLFlag = StringToInt(ImportField);
  RestAccr.StockMovFlag = StringToInt(ImportField);
  RestAccr.Discount = ImportField;
  RestAccr.Waiter2 = ImportField;
  RestAccr.CashValue = StringToVal(ImportField,M4Val);
  RestAccr.RetValue = StringToVal(ImportField,M4Val);
  RestAccr.Paid2 = StringToVal(ImportField,M4Val);
  RestAccr.Paid3 = StringToVal(ImportField,M4Val);
  RestAccr.PayDeal2 = ImportField;
  RestAccr.PayDeal3 = ImportField;
  RestAccr.PayDeal4 = ImportField;
  RestAccr.RemValue = StringToVal(ImportField,M4Val);
  RestAccr.TendValue = StringToVal(ImportField,M4Val);
  RestAccr.TipValue = StringToVal(ImportField,M4Val);
  RestAccr.DrawerCode = ImportField;
  RestAccr.Persons = StringToLongint(ImportField);
  RestAccr.AuthorizationCode2 = ImportField;
  RestAccr.ServCharge = StringToVal(ImportField,M4Val);
  RestAccr.Objects = ImportField;
  RestAccr.StockFileName = ImportField;
  RestAccr.StockTransNr = StringToLongint(ImportField);
  RestAccr.PriceList = ImportField;
  RestAccr.TerminalID = ImportField;
  RestAccr.LoyaltyCardNr = ImportField;
  RestAccr.LCMLevel = ImportField;
  RestAccr.Points = StringToVal(ImportField,M4Val);
  RestAccr.MergedToSerNr = StringToLongint(ImportField);
  RestAccr.StartTime = StringToTime(ImportField);
  RestAccr.BranchID = ImportField;
  RestAccr.ReportingDate = StringToDate(ImportField);
  RestAccr.Location = ImportField;
  RestAccr.Class = ImportField;
  ImportPackedMatrix(TMr);
  PackFieldMatrix(RestAccr,"TaxMatrix",TMr);
  RestAccr.KitchenOrdNr = StringToLongint(ImportField);
  RestAccr.Sum3 = StringToVal(ImportField,M4Val);
  RestAccr.TransferToSL = StringToInt(ImportField);
  RestAccr.ARAcc = ImportField;
  RestAccr.RebCode = ImportField;
  RestAccr.Sum0 = StringToVal(ImportField,M4Val);
  RestAccr.FiscalFlag = StringToInt(ImportField);
  RestAccr.Prntdf = StringToInt(ImportField);
  RestAccr.OfficialSerNr = ImportField;
  RestAccr.RefStr = ImportField;
  RestAccr.OfficialSerNr2 = ImportField;
  RestAccr.PrintDate = StringToDate(ImportField);
  RestAccr.Hash = ImportField;
  RestAccr.HashKeyVersion = StringToInt(ImportField);
  RestAccr.LangCode = ImportField;
  RestAccr.Addr0 = ImportField;
  RestAccr.Addr1 = ImportField;
  RestAccr.Addr2 = ImportField;
  RestAccr.Addr3 = ImportField;
  RestAccr.InvAddr3 = ImportField;
  RestAccr.InvAddr4 = ImportField;
  RestAccr.RegNr1 = ImportField;
  RestAccr.RegNr2 = ImportField;
  RestAccr.VATNr = ImportField;
  if (UseTaxTemplatesforTaxCalc!=0) then begin
    RestAccr.InclVAT = StringToInt(ImportField);
  end else begin
    tstr = ImportField;
    RestAccr.InclVAT = kBasePriceInclVAT;
  end;
  RestAccr.CustTaxTemplateCode = ImportField;
  RestAccr.CustCat = ImportField;
  RestAccr.TaxAdminServSeal = ImportField;
  RestAccr.IVNr = StringToLongint(ImportField);
  RestAccr.SplitQty = StringToLongint(ImportField);
  RestAccr.OfficialSerNrSerie = ImportField;
  RestAccr.OfficialSerNr2Serie = ImportField;
 
  rwcnt = 0;
  
  while (NextImportLine(false)) begin
    ClearRow(RestAccr,RestAccrw,1);
    RestAccrw.ArtCode = ImportField;
    RestAccrw.Quant = StringToVal(ImportField,M4UVal);
    RestAccrw.Price = StringToVal(ImportField,M423Val);
    RestAccrw.Spec = ImportField;
    RestAccrw.SplitQty = StringToVal(ImportField,M4UVal);
    RestAccrw.VATCode = ImportField;
    RestAccrw.AlreadyPrinted = StringToInt(ImportField);
    RestAccrw.stp = StringToInt(ImportField);
    RestAccrw.Sum = StringToVal(ImportField,M4Val);
    RestAccrw.GCNr = StringToLongint(ImportField);
    RestAccrw.PayMode = ImportField;
    RestAccrw.CreditCard = ImportField;
    RestAccrw.AuthorizationCode = ImportField;
    RestAccrw.CurncyCode = ImportField;
    RestAccrw.FrRate = StringToVal(ImportField,M4Rate);
    RestAccrw.ToRateB1 = StringToVal(ImportField,M4Rate);
    RestAccrw.ToRateB2 = StringToVal(ImportField,M4Rate);
    RestAccrw.BaseRate1 = StringToVal(ImportField,M4Rate);
    RestAccrw.BaseRate2 = StringToVal(ImportField,M4Rate);
    RestAccrw.VoidedRowNr = StringToLongint(ImportField);
    RestAccrw.Sign = ImportField;
    RestAccrw.ovst = StringToInt(ImportField);
    RestAccrw.TranferStatus = StringToInt(ImportField);
    RestAccrw.TranferRestAccNr = StringToLongint(ImportField);
    RestAccrw.KitchenStatus = StringToInt(ImportField);
    RestAccrw.ChequeNr = StringToLongint(ImportField);
    RestAccrw.CheckNr = ImportField;
    RestAccrw.Points = StringToVal(ImportField,M4Val);
    RestAccrw.SalesAssistant = ImportField;
    RestAccrw.VoidedSign = ImportField;
    RestAccrw.PrintGroupCode = ImportField;
    RestAccrw.Modifier = StringToInt(ImportField);
    RestAccrw.TaxTemplateCode = ImportField;
    ImportPackedMatrix(TMr);
    PackRowFieldMatrix(RestAccrw,"TaxMatrix",TMr);
    RestAccrw.vRebate = StringToVal(ImportField,M41Val);
    RestAccrw.BasePrice = StringToVal(ImportField,M4Val);
    RestAccrw.rowGP = StringToVal(ImportField,M4Val);
    RestAccrw.PriceFactor = StringToVal(ImportField,M45Val);
    RestAccrw.AlreadyPrintedToKitchen = StringToInt(ImportField);
    RestAccrw.StandProblemCode = ImportField;
    RestAccrw.MealCourse = ImportField;
    RestAccrw.SeatCode = ImportField;
    RestAccrw.KitchenDepartment = ImportField;
    MatRowPut(RestAccr,rwcnt,RestAccrw);
    rwcnt = rwcnt + 1;
  end;
  
  return;
end;

global
updating procedure ReadImportTagRestAccVc(string thetag)
begin
  record RestAccVc RestAccr;
  record CYBlock CYb;

  BlockLoad(CYb);  
  while (NextImportLine(false)) begin
    ReadImportTagRestAccVcRecord(RestAccr,CYb.UseTaxTemplatesforTaxCalc);
    RecordImportStore(RestAccr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrRestAccVc(Integer compnr,string thetag)
begin
  record RestAccVc RestAccr;
  
  RestAccr.SerNr = StringToLongint(ImportField);
  ReadRecordIdStrRestAccVc = BuildRecordIdStr(RestAccr,compnr);
  return;
end;

procedure ReadImportTagRcVcRecord(record RcVc Rcr)
begin
  string 255 tstr;
  RecordNew(Rcr);
  Rcr.SerNr = StringToLongint(ImportField);
  Rcr.ReportSet = ImportField;
  Rcr.Media = StringToInt(ImportField);
  Rcr.RsMode = StringToInt(ImportField);
  Rcr.JobDf = StringToInt(ImportField);
  Rcr.repname = ImportField;
  Rcr.Custf = StringToInt(ImportField);
  Rcr.searchstr = ImportField;
  Rcr.stoff = ImportField;
  Rcr.frc = StringToInt(ImportField);
  Rcr.toc = StringToInt(ImportField);
  Rcr.tpe = StringToInt(ImportField);
  Rcr.critname = ImportField;
  Rcr.OKmode = StringToInt(ImportField);
  Rcr.ArtMode = StringToInt(ImportField);
  Rcr.f1 = ImportField;
  Rcr.f2 = ImportField;
  Rcr.f3 = ImportField;
  Rcr.Period2Str = ImportField;
  Rcr.d1 = StringToDate(ImportField);
  Rcr.Start1Month = StringToInt(ImportField);
  Rcr.d2 = StringToDate(ImportField);
  Rcr.OnlyUnprntd = StringToInt(ImportField);
  Rcr.long1 = StringToLongint(ImportField);
  Rcr.long2 = StringToLongint(ImportField);
  Rcr.End1Month = StringToInt(ImportField);
  Rcr.flags[0] = StringToInt(ImportField);
  Rcr.flags[1] = StringToInt(ImportField);
  Rcr.flags[2] = StringToInt(ImportField);
  Rcr.flags[3] = StringToInt(ImportField);
  Rcr.flags[4] = StringToInt(ImportField);
  Rcr.flags[5] = StringToInt(ImportField);
  Rcr.flags[6] = StringToInt(ImportField);
  Rcr.flags[7] = StringToInt(ImportField);
  Rcr.flags[8] = StringToInt(ImportField);
  Rcr.flags[9] = StringToInt(ImportField);
  Rcr.flags[10] = StringToInt(ImportField);
  Rcr.flags[11] = StringToInt(ImportField);
  Rcr.flags[12] = StringToInt(ImportField);
  Rcr.flags[13] = StringToInt(ImportField);
  Rcr.flags[14] = StringToInt(ImportField);
  Rcr.flags[15] = StringToInt(ImportField);
  Rcr.flags[16] = StringToInt(ImportField);
  Rcr.flags[17] = StringToInt(ImportField);
  Rcr.flags[18] = StringToInt(ImportField);
  Rcr.flags[19] = StringToInt(ImportField);
  Rcr.flags[20] = StringToInt(ImportField);
  Rcr.flags[21] = StringToInt(ImportField);
  Rcr.flags[22] = StringToInt(ImportField);
  Rcr.flags[23] = StringToInt(ImportField);
  Rcr.flags[24] = StringToInt(ImportField);
  Rcr.flags[25] = StringToInt(ImportField);
  Rcr.flags[26] = StringToInt(ImportField);
  Rcr.flags[27] = StringToInt(ImportField);
  Rcr.flags[28] = StringToInt(ImportField);
  Rcr.flags[29] = StringToInt(ImportField);
  Rcr.UsedOnly = StringToInt(ImportField);
  Rcr.ObjStr = ImportField;
  Rcr.ObjType = ImportField;
  Rcr.Stext = ImportField;
  Rcr.SimVerf = StringToInt(ImportField);
  Rcr.Comparison = StringToInt(ImportField);
  Rcr.FirstAcc = ImportField;
  Rcr.LastAcc = ImportField;
  Rcr.GroupsOnly = StringToInt(ImportField);
  Rcr.Notation = StringToInt(ImportField);
  Rcr.TSep = StringToInt(ImportField);
  Rcr.AccSpec = StringToInt(ImportField);
  Rcr.CorrM = StringToInt(ImportField);
  Rcr.FirstVer = StringToLongint(ImportField);
  Rcr.LastVer = StringToLongint(ImportField);
  Rcr.RegDate = StringToDate(ImportField);
  Rcr.AccStr = ImportField;
  Rcr.TransStr = ImportField;
  Rcr.sm1 = StringToInt(ImportField);
  Rcr.vals0 = StringToVal(ImportField,M4Val);
  Rcr.vals1 = StringToVal(ImportField,M4Val);
  Rcr.vals2 = StringToVal(ImportField,M4Val);
  Rcr.vals3 = StringToVal(ImportField,M4Val);
  Rcr.vals4 = StringToVal(ImportField,M4Val);
  Rcr.sStartDate = StringToDate(ImportField);
  Rcr.em1 = StringToInt(ImportField);
  Rcr.sEndDate = StringToDate(ImportField);
  Rcr.CurncyCode = ImportField;
  Rcr.wholemonthf = StringToInt(ImportField);
  Rcr.basecurncy = StringToInt(ImportField);
  Rcr.sStartTime = StringToTime(ImportField);
  Rcr.sEndTime = StringToTime(ImportField);
  Rcr.Language = ImportField;
  Rcr.f4 = ImportField;
  Rcr.f5 = ImportField;
  Rcr.f6 = ImportField;
  Rcr.CalledFromHAL = StringToInt(ImportField);
  Rcr.IncDaughter = StringToInt(ImportField);
  Rcr.Priority = StringToInt(ImportField);
  Rcr.PocketPC = StringToInt(ImportField);
  Rcr.Scaling = StringToInt(ImportField);
  Rcr.BaseWidth = StringToLongint(ImportField);
  Rcr.Mirrorf = StringToInt(ImportField);
  Rcr.RecidStr = ImportField;
  Rcr.NoTimeoutLimit = StringToInt(ImportField);
  Rcr.RecordUUID = StringToUUID(ImportField);
  Rcr.f7 = ImportField;
  Rcr.f8 = ImportField;
  Rcr.f9 = ImportField;
  Rcr.f10 = ImportField;
  Rcr.f11 = ImportField;
  Rcr.f12 = ImportField;
  Rcr.shortname = ImportField;
  Rcr.faxno = ImportField;
  Rcr.LSRunOnServer = StringToInt(ImportField);
  Rcr.d1Code = ImportField;
  Rcr.d2Code = ImportField;
  Rcr.Period2Str2 = ImportField;
  Rcr.sStartDate2 = StringToDate(ImportField);
  Rcr.sEndDate2 = StringToDate(ImportField);
  Rcr.RegCode = ImportField;
  Rcr.Comment = ImportField;
  Rcr.DefUser = ImportField;
  Rcr.TemplateType = StringToInt(ImportField);
  Rcr.PdfOrientf = StringToInt(ImportField);
  Rcr.Blob = ImportField;
  
  return;
end;

global
updating procedure ReadImportTagRcVc(string thetag)
begin
  record RcVc Rcr;
  
  while (NextImportLine(false)) begin
    ReadImportTagRcVcRecord(Rcr);
    RecordImportStore(Rcr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrRcVc(Integer compnr,string thetag)
begin
  record RcVc Rcr;
  
  Rcr.SerNr = StringToLongint(ImportField);
  ReadRecordIdStrRcVc = BuildRecordIdStr(Rcr,compnr);
  return;
end;

updating function Boolean ReadImportTagEInvCUVcRecord(record EInvCUVc EInvCUr)
begin
  Boolean res;
  string 255 tstr;
  record CUVc CUr;
  record CUVc oldCUr;
  
  RecordNew(EInvCUr);
  EInvCUr.CustCode = ImportField;
  EInvCUr.Name = ImportField;
  EInvCUr.RcvInvoicePref = StringToInt(ImportField);
  EInvCUr.StopEInvoices = StringToInt(ImportField);
  EInvCUr.EInvoiceAccount = ImportField;
  EInvCUr.Postage = StringToInt(ImportField);
  EInvCUr.EInvoiceAccount2 = ImportField;
  EInvCUr.AttachPDFtoElectronicInvoice = StringToInt(ImportField);
  EInvCUr.RcvToCompanyCode = ImportField;
  EInvCUr.eMail = ImportField;
  EInvCUr.RecipientGLN = ImportField;
  EInvCUr.RcvInvoicePref2 = StringToInt(ImportField);
  EInvCUr.ShortNote = StringToInt(ImportField);
  EInvCUr.AttachFInvoicetoEInv = StringToInt(ImportField);  
  CUr.Code = EInvCUr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    RecordCopy(oldCUr,CUr);
    CUr.eInvAlternativeAccount = EInvCUr.EInvoiceAccount2;
    CUr.eInvRcvPref = EInvCUr.RcvInvoicePref;
    CUr.eInvAltRcvPref = EInvCUr.RcvInvoicePref2;
    if (HasLocalization("FIN")) then begin
      if (CUr.eInvRcvPref==kEInvoiceRcvPreferencePaper) then begin
        CUr.eInvRcvPref = kEInvoiceRcvPreferenceElectronic;
      end;
      if (CUr.eInvAltRcvPref==kEInvoiceRcvPreferencePaper) then begin
        CUr.eInvAltRcvPref = kEInvoiceRcvPreferenceElectronic;
      end;
    end;
    CUr.eInvStop = EInvCUr.StopEInvoices;
    CUr.eInvPostage = EInvCUr.Postage;
    CUr.eInvAttachPDF = EInvCUr.AttachPDFtoElectronicInvoice;
    CUr.eInvShortNote = EInvCUr.ShortNote;
    CUr.eInvRcvToCompanyCode = EInvCUr.RcvToCompanyCode;
    if (blank(CUr.ANACode)) then begin
      CUr.ANACode = EInvCUr.EInvoiceAccount;
    end else begin
      if (blank(CUr.eInvAlternativeAccount)) then begin
        CUr.eInvAlternativeAccount = EInvCUr.EInvoiceAccount;
      end;
    end;
    RecordUpdate(oldCUr,CUr,false);
    res = true;
  end;
  ReadImportTagEInvCUVcRecord = res;
  return;
end;

global
updating procedure ReadImportTagEInvCUVc(string thetag)
begin
  record EInvCUVc EInvCUr;
  
  while (NextImportLine(false)) begin
    if (ReadImportTagEInvCUVcRecord(EInvCUr)==false) then begin
    end;
    RecordImportStore(EInvCUr,false);
  end;
  
  return;
end;

global
function string 120 ReadRecordIdStrEInvCUVc(Integer compnr,string thetag)
begin
  record EInvCUVc EInvCUr;
  
  EInvCUr.CustCode = ImportField;
  ReadRecordIdStrEInvCUVc = BuildRecordIdStr(EInvCUr,compnr);
  return;
end;

global
updating procedure ReadImportTagEInvoiceBlock(string thetag)
begin
  record EInvoiceBlock EIb;
  
  if (NextImportLine(false)) then begin
    EIb.Header0 = ImportField;
    EIb.Header1 = ImportField;
    EIb.Header2 = ImportField;
    EIb.Footer0 = ImportField;
    EIb.Footer1 = ImportField;
    EIb.Footer2 = ImportField;
    EIb.Folder = ImportField;
    EIb.RcvInvoicePref = StringToInt(ImportField);
    EIb.OutEInvoices = StringToInt(ImportField);
    EIb.InEInvoices = StringToInt(ImportField);
    EIb.StopEInvoices = StringToInt(ImportField);
    EIb.WhomEInvoices = 0;
    EIb.StopReason = ImportField;
    EIb.OutEPayments = StringToInt(ImportField);
    EIb.RcvEInvoices = StringToInt(ImportField);
    EIb.TestFlag = StringToInt(ImportField);
    EIb.RegAtPartner = StringToInt(ImportField);
    EIb.OutEDirDebt = StringToInt(ImportField);
    EIb.UseOCRReference = StringToInt(ImportField);
    EIb.PrintLayout = ImportField;
    EIb.Postage = StringToInt(ImportField);
    EIb.CashNotes = StringToInt(ImportField);
    EIb.DblAcceptEPay = StringToInt(ImportField);
    EIb.DblAcceptMinSumEPay = StringToVal(ImportField,M4Val);
    EIb.DefaultEBehave = StringToInt(ImportField);
    EIb.NoLineswoItemonEInv = StringToInt(ImportField);
    EIb.Certificate = ImportField;
    EIb.PrivateKey = ImportField;
    EIb.Passphrase = ImportField;
    EIb.GMTOffset = StringToInt(ImportField);
    EIb.OutArgEInvoices = StringToInt(ImportField);
    EIb.AttachPDFtoElectronicInvoice = StringToInt(ImportField);
    EIb.VEIVRowTransfer = StringToInt(ImportField);
    EIb.EInvoiceStoragePath = ImportField;
    EIb.SendExportIV = StringToInt(ImportField);
    EIb.OutEVat = StringToInt(ImportField);
    EIb.ArgSelfBilling = StringToInt(ImportField);
    EIb.CAEA = ImportField;
    EIb.CAEAStartDate = StringToDate(ImportField);
    EIb.CAEAExpiryDate = StringToDate(ImportField);
    EIb.LastFortnightCAEA = ImportField;
    EIb.LastFortnightCAEAStartDate = StringToDate(ImportField);
    EIb.LastFortnightCAEAExpiryDate = StringToDate(ImportField);
    EIb.ScdLastFortnightCAEA = ImportField;
    EIb.ScdLastFortnightCAEAStartDate = StringToDate(ImportField);
    EIb.ScdLastFortnightCAEAExpiryDate = StringToDate(ImportField);
    EIb.EPayCertificate = ImportField;
    EIb.EPayPrivateKey = ImportField;
    EIb.EPayPassphrase = ImportField;
    EIb.EPaySignerRole = ImportField;
    EIb.EPayRecipient = ImportField;
    EIb.EPayRecipientCertificate = ImportField;
    EIb.EPayRequestCertificate = ImportField;
    EIb.EPayRequestPrivateKey = ImportField;
    EIb.CertificateNr = ImportField;
    EIb.LiveHostName = ImportField;
    EIb.LivePort = StringToInt(ImportField);
    EIb.TestHostName = ImportField;
    EIb.TestPort = StringToInt(ImportField);
    EIb.IVVcDefaultXML = ImportField;
    EIb.IVCashVcDefaultXML = ImportField;
    EIb.RestAccVcDefaultXML = ImportField;
    EIb.LivePath = ImportField;
    EIb.TestPath = ImportField;
    EIb.ExportIVSendPlainINasStockIN = StringToInt(ImportField);
    EIb.AssignOfficialSerNr = StringToInt(ImportField);
    EIb.MexEInvType = StringToInt(ImportField);
    EIb.DomesticInvoiceinBase1 = StringToInt(ImportField);
    EIb.ClearLoginTicketTime = StringToTime(ImportField);
    EIb.NoVATOnVEIVVcRow = StringToInt(ImportField);
    EIb.SaveXMLFlag = StringToInt(ImportField);
    EIb.OutEstEInvoices = StringToInt(ImportField);
    EIb.CntOutEstEInvoices = StringToInt(ImportField);
    EIb.LastOutEstEInvoicesDate = StringToDate(ImportField);
    EIb.LastOutEstEInvoicesTime = StringToTime(ImportField);
    EIb.StopOutEstEInvoices = StringToInt(ImportField);
    EIb.LastOutEstEInvStatusDate = StringToDate(ImportField);
    EIb.LastOutEstEInvStatusTime = StringToTime(ImportField);
    EIb.StopOutEstEInvStatus = StringToInt(ImportField);
    EIb.InEstEInvoices = StringToInt(ImportField);
    EIb.CntInEstEInvoices = StringToInt(ImportField);
    EIb.LastInEstEInvoicesDate = StringToDate(ImportField);
    EIb.LastInEstEInvoicesTime = StringToTime(ImportField);
    EIb.StopInEstEInvoices = StringToInt(ImportField);
    EIb.LastInEstEInvStatusDate = StringToDate(ImportField);
    EIb.LastInEstEInvStatusTime = StringToTime(ImportField);
    EIb.LastInEstEInvStatusSerial = StringToLongint(ImportField);
    EIb.StopInEstEInvStatus = StringToInt(ImportField);
    EIb.CntInEstEInvPdf = StringToInt(ImportField);
    EIb.StopInEstEInvPdf = StringToInt(ImportField);
    EIb.DebugFlag = StringToInt(ImportField);
    EIb.ServiceMessage = ImportField;
    EIb.AttachFInvoicetoEInv = StringToInt(ImportField);
    
    BlockStore(EIb);
  end;
  
  return;
end;
