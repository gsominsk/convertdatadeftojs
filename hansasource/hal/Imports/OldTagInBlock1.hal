external updating procedure RentResDefBlockImport();
external updating procedure AgreementDetDefBlockImport();
external updating procedure CollectionDefBlockImport();
external updating procedure AgreementDefBlockImport();
external updating procedure Or2DefBlockImport();
external updating procedure OrdDefBlockImport();
external updating procedure QTDefBlockImport();
external updating procedure VATIVDefBlockImport();
external updating procedure RemDefBlockImport();
external updating procedure IPDDefBlockImport();
external updating procedure PRInvDefBlockImport();
external updating procedure Inv1DefBlockImport();
external updating procedure CuPerDefBlockImport();
external updating procedure ARSDefBlockImport();
external updating procedure InvDefBlockImport();
external updating procedure InStaDefBlockImport();
external updating procedure IIDefBlockImport();
external updating procedure FEIVDefBlockImport();
external updating procedure CredDefBlockImport();
external updating procedure CashDefBlockImport();
external updating procedure OPDDefBlockImport();
external updating procedure APSDefBlockImport();
external updating procedure InStaPuDefBlockImport();
external updating procedure OP2DDefBlockImport();
external updating procedure VATRepDefBlockImport();
external updating procedure LetDefBlockImport();
external updating procedure ActDocDefBlockImport();
external updating procedure TimeSheetDefBlockImport();
external updating procedure ProjectInfoDefBlockImport();
external updating procedure ProjectDefBlockImport();
external updating procedure TBBudgetDefBlockImport();
external updating procedure MailDefBlockImport();
external updating procedure TransferDocDefBlockImport();
external updating procedure ExcurDocDefBlockImport();
external updating procedure ResAvDefBlockImport();
external updating procedure JobDefBlockImport();
external updating procedure GuestDocDefBlockImport();
external updating procedure RestAccDefBlockImport();
external updating procedure IVCashDefBlockImport();
external updating procedure WSDefBlockImport();
external updating procedure WOrdDefBlockImport();
external updating procedure SVGMFDefBlockImport();
external updating procedure SVODefBlockImport();
external procedure BlockFromOldbln(Integer,var string);

updating procedure CustomsDefBlockImport()
begin
  record CustomsDefBlock CustomsDefRec;
  row CustomsDefBlock CustomsDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(CustomsDefRec,CustomsDefrw,1);
    CustomsDefrw.LangCode = ImportField;
    CustomsDefrw.UserGroup = ImportField;
    CustomsDefrw.SerNr = StringToLongInt(ImportField);
    CustomsDefrw.FPCode = ImportField;
    CustomsDefrw.PrintGroupCode = ImportField;
    CustomsDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(CustomsDefRec,i,CustomsDefrw);
    i = i + 1;
  end;
  BlockStore(CustomsDefRec);
  return;
end;

updating procedure OwnChkDefBlockImport()
begin
  record OwnChkDefBlock OwnChkDefRec;
  row OwnChkDefBlock OwnChkDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(OwnChkDefRec,OwnChkDefrw,1);
    OwnChkDefrw.LangCode = ImportField;
    OwnChkDefrw.UserGroup = ImportField;
    OwnChkDefrw.SerNr = StringToLongInt(ImportField);
    OwnChkDefrw.FPCode = ImportField;
    OwnChkDefrw.PrintGroupCode = ImportField;
    OwnChkDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(OwnChkDefRec,i,OwnChkDefrw);
    i = i + 1;
  end;
  BlockStore(OwnChkDefRec);
  return;
end;

updating procedure CLInDefBlockImport()
begin
  record CLInDefBlock CLInDefRec;
  row CLInDefBlock CLInDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(CLInDefRec,CLInDefrw,1);
    CLInDefrw.LangCode = ImportField;
    CLInDefrw.UserGroup = ImportField;
    CLInDefrw.SerNr = StringToLongInt(ImportField);
    CLInDefrw.FPCode = ImportField;
    CLInDefrw.PrintGroupCode = ImportField;
    CLInDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(CLInDefRec,i,CLInDefrw);
    i = i + 1;
  end;
  BlockStore(CLInDefRec);
  return;
end;

updating procedure CLIn1DefBlockImport()
begin
  record CLIn1DefBlock CLIn1DefRec;
  row CLIn1DefBlock CLIn1Defrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(CLIn1DefRec,CLIn1Defrw,1);
    CLIn1Defrw.LangCode = ImportField;
    CLIn1Defrw.UserGroup = ImportField;
    CLIn1Defrw.SerNr = StringToLongInt(ImportField);
    CLIn1Defrw.FPCode = ImportField;
    CLIn1Defrw.PrintGroupCode = ImportField;
    CLIn1Defrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(CLIn1DefRec,i,CLIn1Defrw);
    i = i + 1;
  end;
  BlockStore(CLIn1DefRec);
  return;
end;

updating procedure CLIn2DefBlockImport()
begin
  record CLIn2DefBlock CLIn2DefRec;
  row CLIn2DefBlock CLIn2Defrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(CLIn2DefRec,CLIn2Defrw,1);
    CLIn2Defrw.LangCode = ImportField;
    CLIn2Defrw.UserGroup = ImportField;
    CLIn2Defrw.SerNr = StringToLongInt(ImportField);
    CLIn2Defrw.FPCode = ImportField;
    CLIn2Defrw.PrintGroupCode = ImportField;
    CLIn2Defrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(CLIn2DefRec,i,CLIn2Defrw);
    i = i + 1;
  end;
  BlockStore(CLIn2DefRec);
  return;
end;

updating procedure CLOutDefBlockImport()
begin
  record CLOutDefBlock CLOutDefRec;
  row CLOutDefBlock CLOutDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(CLOutDefRec,CLOutDefrw,1);
    CLOutDefrw.LangCode = ImportField;
    CLOutDefrw.UserGroup = ImportField;
    CLOutDefrw.SerNr = StringToLongInt(ImportField);
    CLOutDefrw.FPCode = ImportField;
    CLOutDefrw.PrintGroupCode = ImportField;
    CLOutDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(CLOutDefRec,i,CLOutDefrw);
    i = i + 1;
  end;
  BlockStore(CLOutDefRec);
  return;
end;

updating procedure CLOut1DefBlockImport()
begin
  record CLOut1DefBlock CLOut1DefRec;
  row CLOut1DefBlock CLOut1Defrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(CLOut1DefRec,CLOut1Defrw,1);
    CLOut1Defrw.LangCode = ImportField;
    CLOut1Defrw.UserGroup = ImportField;
    CLOut1Defrw.SerNr = StringToLongInt(ImportField);
    CLOut1Defrw.FPCode = ImportField;
    CLOut1Defrw.PrintGroupCode = ImportField;
    CLOut1Defrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(CLOut1DefRec,i,CLOut1Defrw);
    i = i + 1;
  end;
  BlockStore(CLOut1DefRec);
  return;
end;

updating procedure CLOut2DefBlockImport()
begin
  record CLOut2DefBlock CLOut2DefRec;
  row CLOut2DefBlock CLOut2Defrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(CLOut2DefRec,CLOut2Defrw,1);
    CLOut2Defrw.LangCode = ImportField;
    CLOut2Defrw.UserGroup = ImportField;
    CLOut2Defrw.SerNr = StringToLongInt(ImportField);
    CLOut2Defrw.FPCode = ImportField;
    CLOut2Defrw.PrintGroupCode = ImportField;
    CLOut2Defrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(CLOut2DefRec,i,CLOut2Defrw);
    i = i + 1;
  end;
  BlockStore(CLOut2DefRec);
  return;
end;

updating procedure CLOut3DefBlockImport()
begin
  record CLOut3DefBlock CLOut3DefRec;
  row CLOut3DefBlock CLOut3Defrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(CLOut3DefRec,CLOut3Defrw,1);
    CLOut3Defrw.LangCode = ImportField;
    CLOut3Defrw.UserGroup = ImportField;
    CLOut3Defrw.SerNr = StringToLongInt(ImportField);
    CLOut3Defrw.FPCode = ImportField;
    CLOut3Defrw.PrintGroupCode = ImportField;
    CLOut3Defrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(CLOut3DefRec,i,CLOut3Defrw);
    i = i + 1;
  end;
  BlockStore(CLOut3DefRec);
  return;
end;

updating procedure CLInColDefBlockImport()
begin
  record CLInColDefBlock CLInColDefRec;
  row CLInColDefBlock CLInColDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(CLInColDefRec,CLInColDefrw,1);
    CLInColDefrw.LangCode = ImportField;
    CLInColDefrw.UserGroup = ImportField;
    CLInColDefrw.SerNr = StringToLongInt(ImportField);
    CLInColDefrw.FPCode = ImportField;
    CLInColDefrw.PrintGroupCode = ImportField;
    CLInColDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(CLInColDefRec,i,CLInColDefrw);
    i = i + 1;
  end;
  BlockStore(CLInColDefRec);
  return;
end;

updating procedure CLOutColDefBlockImport()
begin
  record CLOutColDefBlock CLOutColDefRec;
  row CLOutColDefBlock CLOutColDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(CLOutColDefRec,CLOutColDefrw,1);
    CLOutColDefrw.LangCode = ImportField;
    CLOutColDefrw.UserGroup = ImportField;
    CLOutColDefrw.SerNr = StringToLongInt(ImportField);
    CLOutColDefrw.FPCode = ImportField;
    CLOutColDefrw.PrintGroupCode = ImportField;
    CLOutColDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(CLOutColDefRec,i,CLOutColDefrw);
    i = i + 1;
  end;
  BlockStore(CLOutColDefRec);
  return;
end;

updating procedure AT2DefBlockImport()
begin
  record AT2DefBlock AT2DefRec;
  row AT2DefBlock AT2Defrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(AT2DefRec,AT2Defrw,1);
    AT2Defrw.LangCode = ImportField;
    AT2Defrw.UserGroup = ImportField;
    AT2Defrw.SerNr = StringToLongInt(ImportField);
    AT2Defrw.FPCode = ImportField;
    AT2Defrw.PrintGroupCode = ImportField;
    AT2Defrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(AT2DefRec,i,AT2Defrw);
    i = i + 1;
  end;
  BlockStore(AT2DefRec);
  return;
end;

updating procedure AT2TakeDefBlockImport()
begin
  record AT2TakeDefBlock AT2TakeDefRec;
  row AT2TakeDefBlock AT2TakeDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(AT2TakeDefRec,AT2TakeDefrw,1);
    AT2TakeDefrw.LangCode = ImportField;
    AT2TakeDefrw.UserGroup = ImportField;
    AT2TakeDefrw.SerNr = StringToLongInt(ImportField);
    AT2TakeDefrw.FPCode = ImportField;
    AT2TakeDefrw.PrintGroupCode = ImportField;
    AT2TakeDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(AT2TakeDefRec,i,AT2TakeDefrw);
    i = i + 1;
  end;
  BlockStore(AT2TakeDefRec);
  return;
end;

updating procedure AT2WrofDefBlockImport()
begin
  record AT2WrofDefBlock AT2WrofDefRec;
  row AT2WrofDefBlock AT2WrofDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(AT2WrofDefRec,AT2WrofDefrw,1);
    AT2WrofDefrw.LangCode = ImportField;
    AT2WrofDefrw.UserGroup = ImportField;
    AT2WrofDefrw.SerNr = StringToLongInt(ImportField);
    AT2WrofDefrw.FPCode = ImportField;
    AT2WrofDefrw.PrintGroupCode = ImportField;
    AT2WrofDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(AT2WrofDefRec,i,AT2WrofDefrw);
    i = i + 1;
  end;
  BlockStore(AT2WrofDefRec);
  return;
end;

updating procedure AT2RevDefBlockImport()
begin
  record AT2RevDefBlock AT2RevDefRec;
  row AT2RevDefBlock AT2RevDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(AT2RevDefRec,AT2RevDefrw,1);
    AT2RevDefrw.LangCode = ImportField;
    AT2RevDefrw.UserGroup = ImportField;
    AT2RevDefrw.SerNr = StringToLongInt(ImportField);
    AT2RevDefrw.FPCode = ImportField;
    AT2RevDefrw.PrintGroupCode = ImportField;
    AT2RevDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(AT2RevDefRec,i,AT2RevDefrw);
    i = i + 1;
  end;
  BlockStore(AT2RevDefRec);
  return;
end;

updating procedure ContractDefBlockImport()
begin
  record ContractDefBlock ContractDefRec;
  row ContractDefBlock ContractDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(ContractDefRec,ContractDefrw,1);
    ContractDefrw.LangCode = ImportField;
    ContractDefrw.UserGroup = ImportField;
    ContractDefrw.SerNr = StringToLongInt(ImportField);
    ContractDefrw.FPCode = ImportField;
    ContractDefrw.PrintGroupCode = ImportField;
    ContractDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(ContractDefRec,i,ContractDefrw);
    i = i + 1;
  end;
  BlockStore(ContractDefRec);
  return;
end;

updating procedure ContQuoteDefBlockImport()
begin
  record ContQuoteDefBlock ContQuoteDefRec;
  row ContQuoteDefBlock ContQuoteDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(ContQuoteDefRec,ContQuoteDefrw,1);
    ContQuoteDefrw.LangCode = ImportField;
    ContQuoteDefrw.UserGroup = ImportField;
    ContQuoteDefrw.SerNr = StringToLongInt(ImportField);
    ContQuoteDefrw.FPCode = ImportField;
    ContQuoteDefrw.PrintGroupCode = ImportField;
    ContQuoteDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(ContQuoteDefRec,i,ContQuoteDefrw);
    i = i + 1;
  end;
  BlockStore(ContQuoteDefRec);
  return;
end;

updating procedure CuLabDefBlockImport()
begin
  record CuLabDefBlock CuLabDefRec;
  row CuLabDefBlock CuLabDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(CuLabDefRec,CuLabDefrw,1);
    CuLabDefrw.LangCode = ImportField;
    CuLabDefrw.UserGroup = ImportField;
    CuLabDefrw.SerNr = StringToLongInt(ImportField);
    CuLabDefrw.FPCode = ImportField;
    CuLabDefrw.PrintGroupCode = ImportField;
    CuLabDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(CuLabDefRec,i,CuLabDefrw);
    i = i + 1;
  end;
  BlockStore(CuLabDefRec);
  return;
end;

updating procedure ContLabDefBlockImport()
begin
  record ContLabDefBlock ContLabDefRec;
  row ContLabDefBlock ContLabDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(ContLabDefRec,ContLabDefrw,1);
    ContLabDefrw.LangCode = ImportField;
    ContLabDefrw.UserGroup = ImportField;
    ContLabDefrw.SerNr = StringToLongInt(ImportField);
    ContLabDefrw.FPCode = ImportField;
    ContLabDefrw.PrintGroupCode = ImportField;
    ContLabDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(ContLabDefRec,i,ContLabDefrw);
    i = i + 1;
  end;
  BlockStore(ContLabDefRec);
  return;
end;

updating procedure AdrLabDefBlockImport()
begin
  record AdrLabDefBlock AdrLabDefRec;
  row AdrLabDefBlock AdrLabDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(AdrLabDefRec,AdrLabDefrw,1);
    AdrLabDefrw.LangCode = ImportField;
    AdrLabDefrw.UserGroup = ImportField;
    AdrLabDefrw.SerNr = StringToLongInt(ImportField);
    AdrLabDefrw.FPCode = ImportField;
    AdrLabDefrw.PrintGroupCode = ImportField;
    AdrLabDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(AdrLabDefRec,i,AdrLabDefrw);
    i = i + 1;
  end;
  BlockStore(AdrLabDefRec);
  return;
end;

updating procedure BPChangeDefBlockImport()
begin
  record BPChangeDefBlock BPChangeDefRec;
  row BPChangeDefBlock BPChangeDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(BPChangeDefRec,BPChangeDefrw,1);
    BPChangeDefrw.LangCode = ImportField;
    BPChangeDefrw.UserGroup = ImportField;
    BPChangeDefrw.SerNr = StringToLongInt(ImportField);
    BPChangeDefrw.FPCode = ImportField;
    BPChangeDefrw.PrintGroupCode = ImportField;
    BPChangeDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(BPChangeDefRec,i,BPChangeDefrw);
    i = i + 1;
  end;
  BlockStore(BPChangeDefRec);
  return;
end;

updating procedure Sh1DefBlockImport()
begin
  record Sh1DefBlock Sh1DefRec;
  row Sh1DefBlock Sh1Defrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(Sh1DefRec,Sh1Defrw,1);
    Sh1Defrw.LangCode = ImportField;
    Sh1Defrw.UserGroup = ImportField;
    Sh1Defrw.SerNr = StringToLongInt(ImportField);
    Sh1Defrw.FPCode = ImportField;
    Sh1Defrw.PrintGroupCode = ImportField;
    Sh1Defrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(Sh1DefRec,i,Sh1Defrw);
    i = i + 1;
  end;
  BlockStore(Sh1DefRec);
  return;
end;

updating procedure Sh2DefBlockImport()
begin
  record Sh2DefBlock Sh2DefRec;
  row Sh2DefBlock Sh2Defrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(Sh2DefRec,Sh2Defrw,1);
    Sh2Defrw.LangCode = ImportField;
    Sh2Defrw.UserGroup = ImportField;
    Sh2Defrw.SerNr = StringToLongInt(ImportField);
    Sh2Defrw.FPCode = ImportField;
    Sh2Defrw.PrintGroupCode = ImportField;
    Sh2Defrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(Sh2DefRec,i,Sh2Defrw);
    i = i + 1;
  end;
  BlockStore(Sh2DefRec);
  return;
end;

updating procedure Sh3DefBlockImport()
begin
  record Sh3DefBlock Sh3DefRec;
  row Sh3DefBlock Sh3Defrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(Sh3DefRec,Sh3Defrw,1);
    Sh3Defrw.LangCode = ImportField;
    Sh3Defrw.UserGroup = ImportField;
    Sh3Defrw.SerNr = StringToLongInt(ImportField);
    Sh3Defrw.FPCode = ImportField;
    Sh3Defrw.PrintGroupCode = ImportField;
    Sh3Defrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(Sh3DefRec,i,Sh3Defrw);
    i = i + 1;
  end;
  BlockStore(Sh3DefRec);
  return;
end;

updating procedure SHLabDefBlockImport()
begin
  record SHLabDefBlock SHLabDefRec;
  row SHLabDefBlock SHLabDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(SHLabDefRec,SHLabDefrw,1);
    SHLabDefrw.LangCode = ImportField;
    SHLabDefrw.UserGroup = ImportField;
    SHLabDefrw.SerNr = StringToLongInt(ImportField);
    SHLabDefrw.FPCode = ImportField;
    SHLabDefrw.PrintGroupCode = ImportField;
    SHLabDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(SHLabDefRec,i,SHLabDefrw);
    i = i + 1;
  end;
  BlockStore(SHLabDefRec);
  return;
end;

updating procedure PrelPUDefBlockImport()
begin
  record PrelPUDefBlock PrelPUDefRec;
  row PrelPUDefBlock PrelPUDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(PrelPUDefRec,PrelPUDefrw,1);
    PrelPUDefrw.LangCode = ImportField;
    PrelPUDefrw.UserGroup = ImportField;
    PrelPUDefrw.SerNr = StringToLongInt(ImportField);
    PrelPUDefrw.FPCode = ImportField;
    PrelPUDefrw.PrintGroupCode = ImportField;
    PrelPUDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(PrelPUDefRec,i,PrelPUDefrw);
    i = i + 1;
  end;
  BlockStore(PrelPUDefRec);
  return;
end;

updating procedure PurchaseDefBlockImport()
begin
  record PurchaseDefBlock PurchaseDefRec;
  row PurchaseDefBlock PurchaseDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(PurchaseDefRec,PurchaseDefrw,1);
    PurchaseDefrw.LangCode = ImportField;
    PurchaseDefrw.UserGroup = ImportField;
    PurchaseDefrw.SerNr = StringToLongInt(ImportField);
    PurchaseDefrw.FPCode = ImportField;
    PurchaseDefrw.PrintGroupCode = ImportField;
    PurchaseDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(PurchaseDefRec,i,PurchaseDefrw);
    i = i + 1;
  end;
  BlockStore(PurchaseDefRec);
  return;
end;

updating procedure ItemLabelDefBlockImport()
begin
  record ItemLabelDefBlock ItemLabelDefRec;
  row ItemLabelDefBlock ItemLabelDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(ItemLabelDefRec,ItemLabelDefrw,1);
    ItemLabelDefrw.LangCode = ImportField;
    ItemLabelDefrw.UserGroup = ImportField;
    ItemLabelDefrw.SerNr = StringToLongInt(ImportField);
    ItemLabelDefrw.FPCode = ImportField;
    ItemLabelDefrw.PrintGroupCode = ImportField;
    ItemLabelDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(ItemLabelDefRec,i,ItemLabelDefrw);
    i = i + 1;
  end;
  BlockStore(ItemLabelDefRec);
  return;
end;

updating procedure LateCostDefBlockImport()
begin
  record LateCostDefBlock LateCostDefRec;
  row LateCostDefBlock LateCostDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(LateCostDefRec,LateCostDefrw,1);
    LateCostDefrw.LangCode = ImportField;
    LateCostDefrw.UserGroup = ImportField;
    LateCostDefrw.SerNr = StringToLongInt(ImportField);
    LateCostDefrw.FPCode = ImportField;
    LateCostDefrw.PrintGroupCode = ImportField;
    LateCostDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(LateCostDefRec,i,LateCostDefrw);
    i = i + 1;
  end;
  BlockStore(LateCostDefRec);
  return;
end;

updating procedure PULabDefBlockImport()
begin
  record PULabDefBlock PULabDefRec;
  row PULabDefBlock PULabDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(PULabDefRec,PULabDefrw,1);
    PULabDefrw.LangCode = ImportField;
    PULabDefrw.UserGroup = ImportField;
    PULabDefrw.SerNr = StringToLongInt(ImportField);
    PULabDefrw.FPCode = ImportField;
    PULabDefrw.PrintGroupCode = ImportField;
    PULabDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(PULabDefRec,i,PULabDefrw);
    i = i + 1;
  end;
  BlockStore(PULabDefRec);
  return;
end;

updating procedure RetDefBlockImport()
begin
  record RetDefBlock RetDefRec;
  row RetDefBlock RetDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(RetDefRec,RetDefrw,1);
    RetDefrw.LangCode = ImportField;
    RetDefrw.UserGroup = ImportField;
    RetDefrw.SerNr = StringToLongInt(ImportField);
    RetDefrw.FPCode = ImportField;
    RetDefrw.PrintGroupCode = ImportField;
    RetDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(RetDefRec,i,RetDefrw);
    i = i + 1;
  end;
  BlockStore(RetDefRec);
  return;
end;

updating procedure SDDefBlockImport()
begin
  record SDDefBlock SDDefRec;
  row SDDefBlock SDDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(SDDefRec,SDDefrw,1);
    SDDefrw.LangCode = ImportField;
    SDDefrw.UserGroup = ImportField;
    SDDefrw.SerNr = StringToLongInt(ImportField);
    SDDefrw.FPCode = ImportField;
    SDDefrw.PrintGroupCode = ImportField;
    SDDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(SDDefRec,i,SDDefrw);
    i = i + 1;
  end;
  BlockStore(SDDefRec);
  return;
end;

updating procedure StockMovDefBlockImport()
begin
  record StockMovDefBlock StockMovDefRec;
  row StockMovDefBlock StockMovDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(StockMovDefRec,StockMovDefrw,1);
    StockMovDefrw.LangCode = ImportField;
    StockMovDefrw.UserGroup = ImportField;
    StockMovDefrw.SerNr = StringToLongInt(ImportField);
    StockMovDefrw.FPCode = ImportField;
    StockMovDefrw.PrintGroupCode = ImportField;
    StockMovDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(StockMovDefRec,i,StockMovDefrw);
    i = i + 1;
  end;
  BlockStore(StockMovDefRec);
  return;
end;

updating procedure PersPayDefBlockImport()
begin
  record PersPayDefBlock PersPayDefRec;
  row PersPayDefBlock PersPayDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(PersPayDefRec,PersPayDefrw,1);
    PersPayDefrw.LangCode = ImportField;
    PersPayDefrw.UserGroup = ImportField;
    PersPayDefrw.SerNr = StringToLongInt(ImportField);
    PersPayDefrw.FPCode = ImportField;
    PersPayDefrw.PrintGroupCode = ImportField;
    PersPayDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(PersPayDefRec,i,PersPayDefrw);
    i = i + 1;
  end;
  BlockStore(PersPayDefRec);
  return;
end;

updating procedure ExpenseDefBlockImport()
begin
  record ExpenseDefBlock ExpenseDefRec;
  row ExpenseDefBlock ExpenseDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(ExpenseDefRec,ExpenseDefrw,1);
    ExpenseDefrw.LangCode = ImportField;
    ExpenseDefrw.UserGroup = ImportField;
    ExpenseDefrw.SerNr = StringToLongInt(ImportField);
    ExpenseDefrw.FPCode = ImportField;
    ExpenseDefrw.PrintGroupCode = ImportField;
    ExpenseDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(ExpenseDefRec,i,ExpenseDefrw);
    i = i + 1;
  end;
  BlockStore(ExpenseDefRec);
  return;
end;

updating procedure WayListDefBlockImport()
begin
  record WayListDefBlock WayListDefRec;
  row WayListDefBlock WayListDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(WayListDefRec,WayListDefrw,1);
    WayListDefrw.LangCode = ImportField;
    WayListDefrw.UserGroup = ImportField;
    WayListDefrw.SerNr = StringToLongInt(ImportField);
    WayListDefrw.FPCode = ImportField;
    WayListDefrw.PrintGroupCode = ImportField;
    WayListDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(WayListDefRec,i,WayListDefrw);
    i = i + 1;
  end;
  BlockStore(WayListDefRec);
  return;
end;

updating procedure IntORDefBlockImport()
begin
  record IntORDefBlock IntORDefRec;
  row IntORDefBlock IntORDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(IntORDefRec,IntORDefrw,1);
    IntORDefrw.LangCode = ImportField;
    IntORDefrw.UserGroup = ImportField;
    IntORDefrw.SerNr = StringToLongInt(ImportField);
    IntORDefrw.FPCode = ImportField;
    IntORDefrw.PrintGroupCode = ImportField;
    IntORDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(IntORDefRec,i,IntORDefrw);
    i = i + 1;
  end;
  BlockStore(IntORDefRec);
  return;
end;

updating procedure PODefBlockImport()
begin
  record PODefBlock PODefRec;
  row PODefBlock PODefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(PODefRec,PODefrw,1);
    PODefrw.LangCode = ImportField;
    PODefrw.UserGroup = ImportField;
    PODefrw.SerNr = StringToLongInt(ImportField);
    PODefrw.FPCode = ImportField;
    PODefrw.PrintGroupCode = ImportField;
    PODefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(PODefRec,i,PODefrw);
    i = i + 1;
  end;
  BlockStore(PODefRec);
  return;
end;

updating procedure POConfDefBlockImport()
begin
  record POConfDefBlock POConfDefRec;
  row POConfDefBlock POConfDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(POConfDefRec,POConfDefrw,1);
    POConfDefrw.LangCode = ImportField;
    POConfDefrw.UserGroup = ImportField;
    POConfDefrw.SerNr = StringToLongInt(ImportField);
    POConfDefrw.FPCode = ImportField;
    POConfDefrw.PrintGroupCode = ImportField;
    POConfDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(POConfDefRec,i,POConfDefrw);
    i = i + 1;
  end;
  BlockStore(POConfDefRec);
  return;
end;

updating procedure POQTDefBlockImport()
begin
  record POQTDefBlock POQTDefRec;
  row POQTDefBlock POQTDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(POQTDefRec,POQTDefrw,1);
    POQTDefrw.LangCode = ImportField;
    POQTDefrw.UserGroup = ImportField;
    POQTDefrw.SerNr = StringToLongInt(ImportField);
    POQTDefrw.FPCode = ImportField;
    POQTDefrw.PrintGroupCode = ImportField;
    POQTDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(POQTDefRec,i,POQTDefrw);
    i = i + 1;
  end;
  BlockStore(POQTDefRec);
  return;
end;

updating procedure PORemDefBlockImport()
begin
  record PORemDefBlock PORemDefRec;
  row PORemDefBlock PORemDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(PORemDefRec,PORemDefrw,1);
    PORemDefrw.LangCode = ImportField;
    PORemDefrw.UserGroup = ImportField;
    PORemDefrw.SerNr = StringToLongInt(ImportField);
    PORemDefrw.FPCode = ImportField;
    PORemDefrw.PrintGroupCode = ImportField;
    PORemDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(PORemDefRec,i,PORemDefrw);
    i = i + 1;
  end;
  BlockStore(PORemDefRec);
  return;
end;

updating procedure ProdOrderDefBlockImport()
begin
  record ProdOrderDefBlock ProdOrderDefRec;
  row ProdOrderDefBlock ProdOrderDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(ProdOrderDefRec,ProdOrderDefrw,1);
    ProdOrderDefrw.LangCode = ImportField;
    ProdOrderDefrw.UserGroup = ImportField;
    ProdOrderDefrw.SerNr = StringToLongInt(ImportField);
    ProdOrderDefrw.FPCode = ImportField;
    ProdOrderDefrw.PrintGroupCode = ImportField;
    ProdOrderDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(ProdOrderDefRec,i,ProdOrderDefrw);
    i = i + 1;
  end;
  BlockStore(ProdOrderDefRec);
  return;
end;

updating procedure ProdLabelDefBlockImport()
begin
  record ProdLabelDefBlock ProdLabelDefRec;
  row ProdLabelDefBlock ProdLabelDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(ProdLabelDefRec,ProdLabelDefrw,1);
    ProdLabelDefrw.LangCode = ImportField;
    ProdLabelDefrw.UserGroup = ImportField;
    ProdLabelDefrw.SerNr = StringToLongInt(ImportField);
    ProdLabelDefrw.FPCode = ImportField;
    ProdLabelDefrw.PrintGroupCode = ImportField;
    ProdLabelDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(ProdLabelDefRec,i,ProdLabelDefrw);
    i = i + 1;
  end;
  BlockStore(ProdLabelDefRec);
  return;
end;

updating procedure ProdOrder2DefBlockImport()
begin
  record ProdOrder2DefBlock ProdOrder2DefRec;
  row ProdOrder2DefBlock ProdOrder2Defrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(ProdOrder2DefRec,ProdOrder2Defrw,1);
    ProdOrder2Defrw.LangCode = ImportField;
    ProdOrder2Defrw.UserGroup = ImportField;
    ProdOrder2Defrw.SerNr = StringToLongInt(ImportField);
    ProdOrder2Defrw.FPCode = ImportField;
    ProdOrder2Defrw.PrintGroupCode = ImportField;
    ProdOrder2Defrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(ProdOrder2DefRec,i,ProdOrder2Defrw);
    i = i + 1;
  end;
  BlockStore(ProdOrder2DefRec);
  return;
end;

updating procedure InternMovDefBlockImport()
begin
  record InternMovDefBlock InternMovDefRec;
  row InternMovDefBlock InternMovDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(InternMovDefRec,InternMovDefrw,1);
    InternMovDefrw.LangCode = ImportField;
    InternMovDefrw.UserGroup = ImportField;
    InternMovDefrw.SerNr = StringToLongInt(ImportField);
    InternMovDefrw.FPCode = ImportField;
    InternMovDefrw.PrintGroupCode = ImportField;
    InternMovDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(InternMovDefRec,i,InternMovDefrw);
    i = i + 1;
  end;
  BlockStore(InternMovDefRec);
  return;
end;

updating procedure OffHireDefBlockImport()
begin
  record OffHireDefBlock OffHireDefRec;
  row OffHireDefBlock OffHireDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(OffHireDefRec,OffHireDefrw,1);
    OffHireDefrw.LangCode = ImportField;
    OffHireDefrw.UserGroup = ImportField;
    OffHireDefrw.SerNr = StringToLongInt(ImportField);
    OffHireDefrw.FPCode = ImportField;
    OffHireDefrw.PrintGroupCode = ImportField;
    OffHireDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(OffHireDefRec,i,OffHireDefrw);
    i = i + 1;
  end;
  BlockStore(OffHireDefRec);
  return;
end;

updating procedure DispatchDefBlockImport()
begin
  record DispatchDefBlock DispatchDefRec;
  row DispatchDefBlock DispatchDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(DispatchDefRec,DispatchDefrw,1);
    DispatchDefrw.LangCode = ImportField;
    DispatchDefrw.UserGroup = ImportField;
    DispatchDefrw.SerNr = StringToLongInt(ImportField);
    DispatchDefrw.FPCode = ImportField;
    DispatchDefrw.PrintGroupCode = ImportField;
    DispatchDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(DispatchDefRec,i,DispatchDefrw);
    i = i + 1;
  end;
  BlockStore(DispatchDefRec);
  return;
end;

updating procedure INTransferDefBlockImport()
begin
  record INTransferDefBlock INTransferDefRec;
  row INTransferDefBlock INTransferDefrw;
  Integer i;
  
  while (NextImportLine(false)) begin
    ClearRow(INTransferDefRec,INTransferDefrw,1);
    INTransferDefrw.LangCode = ImportField;
    INTransferDefrw.UserGroup = ImportField;
    INTransferDefrw.SerNr = StringToLongInt(ImportField);
    INTransferDefrw.FPCode = ImportField;
    INTransferDefrw.PrintGroupCode = ImportField;
    INTransferDefrw.intdocnr = StringToLongInt(ImportField);
    MatRowPut(INTransferDefRec,i,INTransferDefrw);
    i = i + 1;
  end;
  BlockStore(INTransferDefRec);
  return;
end;

global
updating procedure ReadImportTagdefblock2(string thetag)
begin
  Integer oldbln;
  string 255 bln;
  
  if (NextImportLine(true)) then begin end;
  oldbln = StringToInt(ImportField);
  if (oldbln==0) then begin goto LReadImportTagdefblock2; end;
  BlockFromOldbln(oldbln,bln);
  if (blank(bln)) then begin goto LReadImportTagdefblock2; end;
  switch (bln) begin
    case "CustomsDefBlock": CustomsDefBlockImport;
    case "OwnChkDefBlock": OwnChkDefBlockImport;
    case "CLInDefBlock": CLInDefBlockImport;
    case "CLIn1DefBlock": CLIn1DefBlockImport;
    case "CLIn2DefBlock": CLIn2DefBlockImport;
    case "CLOutDefBlock": CLOutDefBlockImport;
    case "CLOut1DefBlock": CLOut1DefBlockImport;
    case "CLOut2DefBlock": CLOut2DefBlockImport;
    case "CLOut3DefBlock": CLOut3DefBlockImport;
    case "CLInColDefBlock": CLInColDefBlockImport;
    case "CLOutColDefBlock": CLOutColDefBlockImport;
    case "AT2DefBlock": AT2DefBlockImport;
    case "AT2TakeDefBlock": AT2TakeDefBlockImport;
    case "AT2WrofDefBlock": AT2WrofDefBlockImport;
    case "AT2RevDefBlock": AT2RevDefBlockImport;
    case "ContractDefBlock": ContractDefBlockImport;
    case "ContQuoteDefBlock": ContQuoteDefBlockImport;
    case "CuLabDefBlock": CuLabDefBlockImport;
    case "ContLabDefBlock": ContLabDefBlockImport;
    case "AdrLabDefBlock": AdrLabDefBlockImport;
    case "BPChangeDefBlock": BPChangeDefBlockImport;
    case "Sh1DefBlock": Sh1DefBlockImport;
    case "Sh2DefBlock": Sh2DefBlockImport;
    case "Sh3DefBlock": Sh3DefBlockImport;
    case "SHLabDefBlock": SHLabDefBlockImport;
    case "PrelPUDefBlock": PrelPUDefBlockImport;
    case "PurchaseDefBlock": PurchaseDefBlockImport;
    case "ItemLabelDefBlock": ItemLabelDefBlockImport;
    case "LateCostDefBlock": LateCostDefBlockImport;
    case "PULabDefBlock": PULabDefBlockImport;
    case "RetDefBlock": RetDefBlockImport;
    case "SDDefBlock": SDDefBlockImport;
    case "StockMovDefBlock": StockMovDefBlockImport;
    case "PersPayDefBlock": PersPayDefBlockImport;
    case "ExpenseDefBlock": ExpenseDefBlockImport;
    case "WayListDefBlock": WayListDefBlockImport;
    case "IntORDefBlock": IntORDefBlockImport;
    case "PODefBlock": PODefBlockImport;
    case "POConfDefBlock": POConfDefBlockImport;
    case "POQTDefBlock": POQTDefBlockImport;
    case "PORemDefBlock": PORemDefBlockImport;
    case "ProdOrderDefBlock": ProdOrderDefBlockImport;
    case "ProdLabelDefBlock": ProdLabelDefBlockImport;
    case "ProdOrder2DefBlock": ProdOrder2DefBlockImport;
    case "InternMovDefBlock": InternMovDefBlockImport;
    case "OffHireDefBlock": OffHireDefBlockImport;
    case "DispatchDefBlock": DispatchDefBlockImport;
    case "INTransferDefBlock": INTransferDefBlockImport;
    case "AgreementDefBlock": AgreementDefBlockImport;
    case "CollectionDefBlock": CollectionDefBlockImport;
    case "AgreementDetDefBlock": AgreementDetDefBlockImport;
    case "RentResDefBlock": RentResDefBlockImport;
    case "QTDefBlock": QTDefBlockImport;
    case "OrdDefBlock": OrdDefBlockImport;
    case "Or2DefBlock": Or2DefBlockImport;
    case "CashDefBlock": CashDefBlockImport;
    case "CredDefBlock": CredDefBlockImport;
    case "FEIVDefBlock": FEIVDefBlockImport;
    case "IIDefBlock": IIDefBlockImport;
    case "InStaDefBlock": InStaDefBlockImport;
    case "InvDefBlock": InvDefBlockImport;
    case "ARSDefBlock": ARSDefBlockImport;
    case "CuPerDefBlock": CuPerDefBlockImport;
    case "Inv1DefBlock": Inv1DefBlockImport;
    case "PRInvDefBlock": PRInvDefBlockImport;
    case "IPDDefBlock": IPDDefBlockImport;
    case "RemDefBlock": RemDefBlockImport;
    case "VATIVDefBlock": VATIVDefBlockImport;
    case "ActDocDefBlock": ActDocDefBlockImport;
    case "LetDefBlock": LetDefBlockImport;
    case "VATRepDefBlock": VATRepDefBlockImport;
    case "OP2DDefBlock": OP2DDefBlockImport;
    case "InStaPuDefBlock": InStaPuDefBlockImport;
    case "APSDefBlock": APSDefBlockImport;
    case "OPDDefBlock": OPDDefBlockImport;
    case "MailDefBlock": MailDefBlockImport;
    case "TBBudgetDefBlock": TBBudgetDefBlockImport;
    case "ProjectDefBlock": ProjectDefBlockImport;
    case "ProjectInfoDefBlock": ProjectInfoDefBlockImport;
    case "TimeSheetDefBlock": TimeSheetDefBlockImport;
    case "SVODefBlock": SVODefBlockImport;
    case "SVGMFDefBlock": SVGMFDefBlockImport;
    case "WOrdDefBlock": WOrdDefBlockImport;
    case "WSDefBlock": WSDefBlockImport;
    case "IVCashDefBlock": IVCashDefBlockImport;
    case "RestAccDefBlock": RestAccDefBlockImport;
    case "GuestDocDefBlock": GuestDocDefBlockImport;
    case "JobDefBlock": JobDefBlockImport;
    case "ResAvDefBlock": ResAvDefBlockImport;
    case "ExcurDocDefBlock": ExcurDocDefBlockImport;
    case "TransferDocDefBlock": TransferDocDefBlockImport;

  end;
LReadImportTagdefblock2:;
  return;
end;
