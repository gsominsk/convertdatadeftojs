updating procedure ReadIVCashVc()
BEGIN
  record IVCashVc blankIVCashr;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Boolean testf,storef;
  Integer rwcnt,stp;
  string 255 SerStr;
  
  testf = true;
  while (testf) begin
    RecordNew(IVCashr);
    IVCashr = blankIVCashr;
    SerStr = ImportField;
    if ((SerStr=="S") or (SerStr=="s")) then begin
      IVCashr.SerNr = NextSerNr("IVCashVc",IVCashr.TransDate,-1,false,"");
    end else begin
      IVCashr.SerNr = FirstInRange(SerStr,10);
    end;
    IVCashr.InvDate = StringToDate(ImportField);
    IVCashr.CustCode = ImportField;
    IVCashr.Addr0 = ImportField;
    IVCashr.Addr1 = ImportField;
    IVCashr.Addr2 = ImportField;
    IVCashr.Addr3 = ImportField;
    IVCashr.CustCat = ImportField;
    IVCashr.OKFlag = StringToInt(ImportField);
    IVCashr.ARonTR = StringToInt(ImportField);
    IVCashr.UpdStockFlag = StringToInt(ImportField);
    IVCashr.ExportedFlag = StringToInt(ImportField);
    IVCashr.InclVAT = StringToInt(ImportField);
    IVCashr.PayDate = StringToDate(ImportField);
    IVCashr.TransDate = StringToDate(ImportField);
    IVCashr.OurContact = ImportField;
    IVCashr.ClientContact = ImportField;
    IVCashr.SalesMan = ImportField;
    IVCashr.PayDeal = ImportField;
    IVCashr.RecValue = StringToVal(ImportField,M4Val);
    IVCashr.RetValue = StringToVal(ImportField,M4Val);
    IVCashr.Sum0 = StringToVal(ImportField,M4Val);
    IVCashr.Sum1 = StringToVal(ImportField,M4Val);
    IVCashr.Sum2 = StringToVal(ImportField,M4Val);
    IVCashr.Sum3 = StringToVal(ImportField,M4Val);
    IVCashr.Sum4 = StringToVal(ImportField,M4Val);
    IVCashr.VATNr = ImportField;
    IVCashr.BaseSum4 = StringToVal(ImportField,M4Val);
    IVCashr.FrRate = StringToVal(ImportField,M4Rate);
    IVCashr.ToRateB1 = StringToVal(ImportField,M4Rate);
    IVCashr.ToRateB2 = StringToVal(ImportField,M4Rate);
    IVCashr.BaseRate1 = StringToVal(ImportField,M4Rate);
    IVCashr.BaseRate2 = StringToVal(ImportField,M4Rate);
    IVCashr.CurncyCode = ImportField;
    IVCashr.LangCode = ImportField;
    IVCashr.CustOrdNr = ImportField;
    IVCashr.PriceList = ImportField;
    IVCashr.CustVATCode = ImportField;
    IVCashr.RebCode = ImportField;
    IVCashr.CreditCard = ImportField;
    IVCashr.AuthorizationCode = ImportField;
    IVCashr.InvComment = ImportField;
    IVCashr.LocOKNr = StringToVal(ImportField,M4Qty);
    IVCashr.Invalid = StringToInt(ImportField);
    IVCashr.Prntdf = StringToInt(ImportField);
    IVCashr.pdays = FirstInRange(ImportField,10);
    IVCashr.pdvrebt = StringToVal(ImportField,M4Val);
    IVCashr.pdrdays = FirstInRange(ImportField,10);
    IVCashr.TotGP = StringToVal(ImportField,M4Val);
    IVCashr.Objects = ImportField;
    IVCashr.Location = ImportField;
    IVCashr.ARAcc = ImportField;
    IVCashr.POSNr = FirstInRange(ImportField,10);
    IVCashr.TransTime = StringToTime(ImportField);
    IVCashr.NLFlag = StringToInt(ImportField);
    IVCashr.CashValue = StringToVal(ImportField,M4Val);
    IVCashr.PayDeal2 = ImportField;
    IVCashr.RecValue2 = StringToVal(ImportField,M4Val);
    IVCashr.CreditCard2 = ImportField;
    IVCashr.AuthorizationCode2 = ImportField;
    IVCashr.TotQty = StringToVal(ImportField,M4Qty);
    IVCashr.TotWeight = StringToVal(ImportField,M4Qty);
    IVCashr.TotVolume = StringToVal(ImportField,M4Qty);
    IVCashr.LocalMachineCode = ImportField;
    IVCashr.InvAddr3 = ImportField;
    IVCashr.InvAddr4 = ImportField;
    IVCashr.DelAddrCode = ImportField;
    IVCashr.CashValueB2 = StringToVal(ImportField,M4Val);
    IVCashr.RetValueB2 = StringToVal(ImportField,M4Val);
    IVCashr.CashValueCur = StringToVal(ImportField,M4Val);
    IVCashr.RetValueCur = StringToVal(ImportField,M4Val);
    IVCashr.POSCurncyCode = ImportField;
    IVCashr.TAX1Sum = StringToVal(ImportField,M4Val);
    rwcnt = 0;
    testf = NextImportLine(false);
    while (testf) begin
      stp = StringToInt(ImportField);
      ClearRow(IVCashr,IVCashrw,stp);
      IVCashrw.stp = stp;
      IVCashrw.ArtCode = ImportField;
      IVCashrw.Quant = StringToVal(ImportField,M4UVal);
      IVCashrw.Price = StringToVal(ImportField,M423Val);
      IVCashrw.Sum = StringToVal(ImportField,M4Val);
      IVCashrw.vRebate = StringToVal(ImportField,M41Val);
      IVCashrw.SalesAcc = ImportField;
      IVCashrw.Objects = ImportField;
      IVCashrw.BasePrice = StringToVal(ImportField,M4Val);
      IVCashrw.rowGP = StringToVal(ImportField,M4Val);
      IVCashrw.FIFO = StringToVal(ImportField,M45Val);
      IVCashrw.Spec = ImportField;
      IVCashrw.VATCode = ImportField;
      IVCashrw.Recepy = ImportField;
      IVCashrw.SerialNr = ImportField;
      IVCashrw.PriceFactor = StringToVal(ImportField,M45Val);
      IVCashrw.FIFORowVal = StringToVal(ImportField,M45Val);
      IVCashrw.Coefficient = StringToVal(ImportField,M45Val);
      IVCashrw.ExciseNr = ImportField;
      MatRowPut(IVCashr,rwcnt,IVCashrw);
      rwcnt = rwcnt + 1;
      testf = NextImportLine(false);
    end;
    if (IVCashr.SerNr>0) then begin
      storef = RecordStore(IVCashr,false);
    end;  
    testf = NextImportLine(false);    
  end;  
  RETURN;
END;

updating procedure ImpSpecAuto(string typs)
BEGIN

  if (typs=="IVCashVc") then begin
    ReadIVCashVc;
  end;
  if (typs=="fakt1") then begin
    RegisterImport("fakt1");
  end;
  RETURN;
END;

function
Boolean GetTyps(var string typs)
BEGIN
  string 255 tstr;
  Boolean testf;
  Boolean resf;

  typs = "";
  testf = true;
  resf = true;
  while (testf and resf) begin
    typs = ImportField;
    resf = NextImportLine(false);
    if (nonblank(typs)) then begin
      testf = false;
    end;
  end;  
  UserTrace(typs,1);
  GetTyps = resf;
  RETURN;
END;

updating procedure Do4Import()
BEGIN
  Integer cnt;
  string 255 typs;
  Boolean testf;
  
  cnt = 0;
  
  testf = GetTyps(typs);
  while (testf) begin
    if (nonblank(typs)) then begin
      UserTrace(typs,0);
      ImpSpecAuto(typs);
    end;   
    cnt = cnt + 1;
    testf = GetTyps(typs);
  end;
//  if (startupFlag==false) then
//    CheckDBKey();
  RETURN;
END;

global
updating procedure POSIn()
BEGIN
  Do4Import;
  RETURN;
END;

