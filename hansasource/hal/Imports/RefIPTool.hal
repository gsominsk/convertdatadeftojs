external function Date DateFromString(string,string);
external function roundmode GetTotalRoundMode(record RoundBlock);
external function roundmode DefaultRoundMode();
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function LongInt DateDiff(Date,Date);
external procedure SetIPFlags(record IPVc);
external procedure IPSumup(var record IPVc);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external procedure FromBankDate2(string,var Date);
external procedure M4ILMidstr(string,var string,Integer,Integer);

global
procedure SetupSweGIP(var record IPVc gIPp,string paymode,Date paydatep)
BEGIN
  record SRBlock SRRec;

  BlockLoad(SRRec);
  RecordNew(gIPp);
  gIPp.TransDate = paydatep;
  gIPp.SerNr = NextSerNr("IPVc",gIPp.TransDate,SRRec.LastPayNr,false,"");
  if (gIPp.SerNr<=0) then begin
    gIPp.SerNr = NextSerNr("IPVc",gIPp.TransDate,-1,false,"");
  end;
  gIPp.RegDate = CurrentDate;
  gIPp.OKFlag = 0;
  gIPp.PayMode = paymode;
  gIPp.TransDate = paydatep;
  gIPp.Comment = "Postgiroinbetalning";
  RETURN;
END;

global
updating procedure SaveGIP(record IPVc gIPp)
BEGIN
  if (MatRowCnt(gIPp)>0) then begin
    IPSumup(gIPp);
    SetIPFlags(gIPp);
    UserTrace(gIPp.SerNr,M4Long);
    if (RecordStore(gIPp,false)) then begin end;
  end;
  RETURN;
END;

global
updating procedure ImpIceBank(string lstr,var record IPVc gIPp)
BEGIN
  record ARVc ARr;
  record IVVc IVr;
  row IPVc IPrw;
  record RoundBlock RoundRec;
  record CYBlock CompYear;
  Date paydate,rebdate,rowpayd;
  val tv,rv,rv2,openval;
  val payval,rebval,invval,overdueval,feeval;
  LongInt rebdays;
  LongInt latedays;
  LongInt refno;
  Integer i,rwcnt;
  string 255 tstr,custcode,custname;
  string 10 icecurncy,invcurncy;
  string 20 curegid,custnr;
  string 5 paymode;
  Boolean invfound;
  Date blankd;

  BlockLoad(CompYear);  
  BlockLoad(RoundRec);  
  M4ILMidstr(lstr,tstr,1,6);
  if (len(tstr)==0) then begin goto LImpIceBank; end;
  if (CompYear.Bank2!=tstr) then begin goto LImpIceBank; end;
  paydate = gIPp.TransDate;
  paymode = "";
  icecurncy = "";
  custcode = "";
  custname = "";
  rebval = blankval;
  feeval = blankval;
  overdueval = blankval;
  M4ILMidstr(lstr,tstr,7,6);     // Duedate 
  M4ILMidstr(lstr,custnr,13,6);  // Number 
  M4ILMidstr(lstr,tstr,19,11);   // Paid Amount 
  payval = StringToVal(tstr,M4Val);
  payval = payval/100;
  payval = Round(payval,DefaultRoundMode);
  M4ILMidstr(lstr,tstr,30,11);   // Overdue Amount 
  overdueval = StringToVal(tstr,M4Val);
  overdueval = overdueval/100;
  overdueval = Round(overdueval,DefaultRoundMode);
  M4ILMidstr(lstr,tstr,41,11);   // Overdue Interest 
  M4ILMidstr(lstr,tstr,52,6);    // Date of Payment 
  rowpayd = blankd;
  FromBankDate2(tstr,rowpayd);
  M4ILMidstr(lstr,tstr,58,4);    // Banknr where paid 
  M4ILMidstr(lstr,tstr,62,4);    // Bulknumber 
  M4ILMidstr(lstr,tstr,66,3);    // Nr of Payment 
  M4ILMidstr(lstr,tstr,69,6);    // Date of Bank transfer 
  M4ILMidstr(lstr,tstr,75,1);    // Nr of Payment 
  M4ILMidstr(lstr,tstr,76,1);    // Nr of Payment 
  M4ILMidstr(lstr,tstr,77,11);   // Overdue Amount 
  feeval = StringToVal(tstr,M4Val);
  feeval = feeval/100;
  feeval = Round(feeval,DefaultRoundMode);
  M4ILMidstr(lstr,tstr,88,10);   // Our ID 
  M4ILMidstr(lstr,tstr,98,3);    // Owner Serial number 
  M4ILMidstr(lstr,curegid,101,10); // Customer ID 
  M4ILMidstr(lstr,tstr,111,3);  // Customer Serial Number 
  M4ILMidstr(lstr,tstr,114,7);  // Threir Reference Number 
  refno = StringToLongInt(tstr);
  IVr.SerNr = refno;
  invfound = ReadFirstMain(IVr,1,true);
  rwcnt = MatRowCnt(gIPp);
  if (rwcnt>90) then begin
    SaveGIP(gIPp);
    SetupSweGIP(gIPp,paymode,paydate);
    gIPp.Comment = "";
    rwcnt = MatRowCnt(gIPp);
  end;
  if (invfound) then begin
    custcode = IVr.CustCode;
    custname = IVr.Addr0;
    if (nonblank(custname)) then begin custname = custname & ", "; end;
    custname = custname & custnr;
  end;
  ARr.InvoiceNr = IVr.SerNr;
  if (ReadFirstMain(ARr,1,true)) then begin
    rv = ARr.RVal;
    rv2 = ARr.RVal;
    openval = ARr.RVal;
    rebdate = ARr.ARRebDate;
  end else begin
    rv = blankval;
    rv2 = blankval;
    openval = blankval;
    rebdate = blankd;
  end;
  invcurncy = icecurncy;
  if (invfound) then begin
    invcurncy = IVr.CurncyCode;
    if (IVr.pdvrebt!=0) then begin
      rebdays = DateDiff(rebdate,paydate);
      if (rebdays>=0) then begin
        rebval = rv*IVr.pdvrebt;
        rebval = rebval/100;
        rebval = Round(rebval,GetTotalRoundMode(RoundRec));
        rv = rv - rebval;
        openval = rv;
      end;
      if (invfound) then begin
        if (icecurncy!=IVr.CurncyCode) then begin
          rv = MulRateToBase1(IVr.CurncyCode,rv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          rv2 = MulRateToBase1(IVr.CurncyCode,rv2,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
        end;
      end;
      tv = payval - rv;
      if (tv<-5) then begin
        rebval = blankval;
      end else begin
        rebval = rv2 - payval;
      end;
    end;
  end;
  if (payval!=0) then begin
    rwcnt = rwcnt + 1;
    ClearRow(gIPp,IPrw,1);
    i = rwcnt-1;
    IPrw.stp = 1;
    IPrw.ovst = 0;
    IPrw.InvoiceNr = IVr.SerNr;
    IPrw.CustCode = custcode;
    IPrw.CustName = custname;
    IPrw.PayDate = paydate;
    if (nonblankdate(rowpayd)) then begin 
      IPrw.PayDate = rowpayd;
    end;
    if (invfound) then begin
      IPrw.InvCurncy = invcurncy;
      IPrw.BankCurncy = icecurncy;
      IPrw.RecCurncy = icecurncy;
    end;
    invval = payval;
    if (invfound) then begin
      if (invcurncy!=icecurncy) then begin
        CurValToOtherCur(IVr.TransDate,icecurncy,payval,invcurncy,invval,DefaultCurRoundOff);
      end;
    end;
    IPrw.InvVal = invval;
    IPrw.InvOutstand = openval;
    IPrw.BankVal = payval;
    IPrw.RecVal = payval;
    IPrw.latedays = latedays;
    IPrw.CUPNr = -1;
    IPrw.CredManNr = IVr.CredManNr;
    MatRowPut(gIPp,i,IPrw);
  end;
  if (rebval!=0) then begin
    rwcnt = rwcnt + 1;
    ClearRow(gIPp,IPrw,5);
    i = rwcnt-1;
    IPrw.stp = 5;
    IPrw.ovst = 0;
    IPrw.InvoiceNr = IVr.SerNr;
    IPrw.CustCode = custcode;
    IPrw.CustName = custname;
    IPrw.PayDate = paydate;
    if (nonblankdate(rowpayd)) then begin
      IPrw.PayDate = rowpayd;
    end;
    if (invfound) then begin
      IPrw.InvCurncy = invcurncy;
      IPrw.BankCurncy = icecurncy;
      IPrw.RecCurncy = icecurncy;
    end;
    invval = rebval;
    if (invfound) then begin
      if (invcurncy!=icecurncy) then begin
        CurValToOtherCur(IVr.TransDate,icecurncy,rebval,invcurncy,invval,DefaultCurRoundOff);
      end;
    end;
    IPrw.InvVal = invval;
    IPrw.InvOutstand = openval;
    IPrw.BankVal = rebval;
    IPrw.RecVal = rebval;
    IPrw.latedays = -1;
    IPrw.CUPNr = -1;
    IPrw.CredManNr = IVr.CredManNr;
    MatRowPut(gIPp,i,IPrw);
  end;
  if (feeval!=0) then begin
    rwcnt = rwcnt + 1;
    ClearRow(gIPp,IPrw,7);
    i = rwcnt-1;
    IPrw.stp = 7;
    IPrw.ovst = 0;
    IPrw.InvoiceNr = IVr.SerNr;
    IPrw.CustCode = custcode;
    IPrw.CustName = custname;
    IPrw.PayDate = paydate;
    if (nonblankdate(rowpayd)) then begin
      IPrw.PayDate = rowpayd;
    end;
    if (invfound) then begin
      IPrw.InvCurncy = invcurncy;
      IPrw.BankCurncy = icecurncy;
      IPrw.RecCurncy = icecurncy;
    end;
    invval = feeval;
    if (invfound) then begin
      if (invcurncy!=icecurncy) then begin
        CurValToOtherCur(IVr.TransDate,icecurncy,feeval,invcurncy,invval,DefaultCurRoundOff);
      end;
    end;
    IPrw.InvVal = invval;
    IPrw.InvOutstand = openval;
    IPrw.BankVal = feeval;
    IPrw.RecVal = feeval;
    IPrw.latedays = -1;
    IPrw.CUPNr = -1;
    IPrw.CredManNr = IVr.CredManNr;
    MatRowPut(gIPp,i,IPrw);
  end;
  if (overdueval!=0) then begin
    rwcnt = rwcnt + 1;
    ClearRow(gIPp,IPrw,7);
    i = rwcnt-1;
    IPrw.stp = 7;
    IPrw.ovst = 0;
    IPrw.InvoiceNr = IVr.SerNr;
    IPrw.CustCode = custcode;
    IPrw.CustName = custname;
    IPrw.PayDate = paydate;
    if (nonblankdate(rowpayd)) then begin
      IPrw.PayDate = rowpayd;
    end;
    if (invfound) then begin
      IPrw.InvCurncy = invcurncy;
      IPrw.BankCurncy = icecurncy;
      IPrw.RecCurncy = icecurncy;
    end;
    invval = overdueval;
    if (invfound) then begin
      if (invcurncy!=icecurncy) then begin
        CurValToOtherCur(IVr.TransDate,icecurncy,overdueval,invcurncy,invval,DefaultCurRoundOff);
      end;
    end;
    IPrw.InvVal = invval;
    IPrw.InvOutstand = openval;
    IPrw.BankVal = overdueval;
    IPrw.RecVal = overdueval;
    IPrw.latedays = -1;
    IPrw.CUPNr = -1;
    IPrw.CredManNr = IVr.CredManNr;
    MatRowPut(gIPp,i,IPrw);
  end;
LImpIceBank:;
  RETURN;
END;

procedure StripLeadZeros(string tstr,var string res)
BEGIN
  Integer i;
  
  res = "";
  for (i=0;i<=len(tstr);i=i+1) begin
    if ((len(res)!=0) or (Mid(tstr,i,1)!="0")) then begin
      res = res & Mid(tstr,i,1);
    end;
  end;
  RETURN;
END;

global
updating procedure ImpPankkiNorPosten(string lstr,record IPVc gIPp)
BEGIN
  string 255 tstr;
  string 255 refstr;
  record IPVc MR;
  record ARVc ARr;
  row IPVc IPrw;
  LongInt latedays;
  Integer i,PMn,rwcnt;
  val tv,rv;
  Date transdate,paydate;
  LongInt invoicenr;
  val payval,rebval,credval;
  string 10 paymode;
  record IVVc IVr;
  LongInt rebdays;
  string 20 custcode;
  string 60 custname;
  row PMBlock pmrw;
  record PMBlock PMRec;
  record SRBlock SRRec;
  record RoundBlock RoundRec;
  Boolean invfound;

  BlockLoad(RoundRec);  
  BlockLoad(SRRec);  
  M4ILMidstr(lstr,tstr,2,2); // day 
  transdate = AddDay(transdate,StringToInt(tstr));
  M4ILMidstr(lstr,tstr,4,2); // month 
  transdate = AddMonth(transdate,StringToInt(tstr));
  M4ILMidstr(lstr,tstr,6,2); // year 
  transdate = AddYear(transdate,StringToInt(tstr)+1900);
  if (GetYear(transdate)<1930) then begin 
    transdate = AddYear(transdate,StringToInt(tstr)+100);  
  end;
  paydate = transdate;
  M4ILMidstr(lstr,tstr,28,6); // invoice nr 
  invoicenr = StringToLongInt(tstr);  
  M4ILMidstr(lstr,tstr,35,11); // amount 
  tv = StringToVal(tstr,M4Val);
  tv = tv/100;
  payval = Round(tv,DefaultRoundMode);  
  M4ILMidstr(lstr,tstr,8,7); // our account 
  BlockLoad(PMRec);
  rwcnt = MatRowCnt(PMRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PMRec,i,pmrw);
    if (pmrw.BankNr==tstr) then begin
      PMn = i;
      i = rwcnt;
      paymode = pmrw.Code;
    end;
  end;
    // set paymode  
  StripLeadZeros(tstr,refstr);
  custcode = "";
  custname = "";
  rebval = blankval;
  credval = blankval;
  IVr.SerNr = invoicenr;
  invfound = ReadFirstMain(IVr,1,true);
  if (invfound) then begin
    custcode = IVr.CustCode;
    custname = IVr.Addr0;
  end;
  ARr.InvoiceNr = invoicenr;
  if (ReadFirstMain(ARr,1,true)) then begin
    rv = ARr.RVal;
  end;
  if (IVr.pdvrebt!=0) then begin
    rebdays = DateDiff(ARr.ARRebDate,paydate);
    if (rebdays>=0) then begin
      rebval = rv*IVr.pdvrebt;
      rebval = rebval/100;
      rebval = Round(rebval,GetTotalRoundMode(RoundRec));
      rv = rv - rebval;
    end;
    tv = payval - rv;
    if (tv<-5) then begin
      rebval = blankval;
    end else begin
      rebval = ARr.RVal - payval;
    end;
  end;
  RecordNew(gIPp);
  gIPp.SerNr = NextSerNr("IPVc",gIPp.TransDate,SRRec.LastPayNr,false,"");
  gIPp.RegDate = CurrentDate;
  gIPp.OKFlag = 0;
  gIPp.PayMode = paymode;
  gIPp.TransDate = transdate;
  gIPp.Comment = refstr;
  rwcnt = 0;
  if (payval!=0) then begin
    rwcnt = rwcnt + 1;
    ClearRow(gIPp,IPrw,1);
    i = rwcnt-1;
    IPrw.stp = 1;
    IPrw.ovst = 0;
    IPrw.InvoiceNr = invoicenr;
    IPrw.CustCode = custcode;
    IPrw.CustName = custcode;
    IPrw.PayDate = paydate;
    IPrw.InvVal = payval;
    if (invfound) then begin
      IPrw.InvCurncy = IVr.CurncyCode;
    end;
    IPrw.latedays = latedays;
    MatRowPut(gIPp,i,IPrw);
  end;
  if (rebval!=0) then begin
    rwcnt = rwcnt + 1;
    ClearRow(gIPp,IPrw,5);
    i = rwcnt-1;
    IPrw.stp = 5;
    IPrw.ovst = 0;
    IPrw.InvoiceNr = invoicenr;
    IPrw.CustCode = custcode;
    IPrw.CustName = custcode;
    IPrw.PayDate = paydate;
    IPrw.InvVal = rebval;
    if (invfound) then begin
      IPrw.InvCurncy = IVr.CurncyCode;
    end;
    IPrw.latedays = -1;
    MatRowPut(gIPp,i,IPrw);
  end;
  if (credval!=0) then begin
    rwcnt = rwcnt + 1;
    ClearRow(gIPp,IPrw,6);
    i = rwcnt-1;
    IPrw.stp = 6;
    IPrw.ovst = 0;
    IPrw.InvoiceNr = invoicenr;
    IPrw.CustCode = custcode;
    IPrw.CustName = custname;
    IPrw.PayDate = paydate;
    IPrw.InvVal = credval;
    if (invfound) then begin
      IPrw.InvCurncy = IVr.CurncyCode;
    end;
    IPrw.latedays = latedays;
    MatRowPut(gIPp,i,IPrw);
  end;
  UserTrace(gIPp.SerNr,M4Long);
  IPSumup(gIPp);
  SetIPFlags(gIPp);
  if (RecordStore(gIPp,false)) then begin end;
  RecordNew(gIPp);
  RETURN;
END;

global
updating procedure StoreIPRecords(record IPVc IPp)
BEGIN
  record IPVc IPr;
  row IPVc IPrw;
  record SRBlock SRRec;
  Integer i,loci,rwcnt;
  
  rwcnt = MatRowCnt(IPp);
  BlockLoad(SRRec);
  RecordNew(IPr);
  IPr.TransDate = IPp.TransDate;
  IPr.RegDate = IPp.RegDate;
  IPr.OKFlag = 0;
  IPr.PayMode = IPp.PayMode;
  IPr.Comment = IPp.Comment;
  i = 0;
L22StoreIPRecords:;
  loci = 0;
  while ((loci<=299) and (i<rwcnt)) begin
    MatRowGet(IPp,i,IPrw);
    i = i + 1;
    MatRowPut(IPr,loci,IPrw);
    loci = loci + 1;
  end;
  IPSumup(IPr);
  SetIPFlags(IPr);
  UserTrace(IPr.SerNr,M4Long);
  IPr.SerNr = NextSerNr("IPVc",IPr.TransDate,SRRec.LastPayNr,false,"");
  if (RecordStore(IPr,false)) then begin end;
  IPr.SerNr = IPr.SerNr + 1;
  if (i<rwcnt) then begin
    goto L22StoreIPRecords;
  end;
  RETURN;
END;

global
updating procedure ImpNordeaBankDenmark(string lstr,var record IPVc gIPp)
begin
  record ARVc ARr;
  record IVVc IVr;
  row IPVc IPrw;
  record RoundBlock RoundRec;
  record CYBlock CompYear;
  Date paydate,rebdate,rowpayd;
  val tv,rv,rv2,openval;
  val payval,rebval,invval,overdueval,feeval;
  LongInt rebdays;
  LongInt latedays;
  LongInt refno;
  Integer i,rwcnt;
  string 255 tstr,custcode,custname;
  string 10 icecurncy,invcurncy;
  string 20 curegid,custnr;
  string 5 paymode;
  Boolean invfound;
  Date blankd;

  BlockLoad(CompYear);  
  BlockLoad(RoundRec);  
  M4ILMidstr(lstr,tstr,1,5);
  if (len(tstr)==0) then begin goto LImpNordeaBankDenmark; end;
  if (tstr!="FI030") then begin goto LImpNordeaBankDenmark; end;

//  if (CompYear.Bank2!=tstr) then begin goto LImpNordeaBankDenmark; end;
  paydate = gIPp.TransDate;
  paymode = "";
  icecurncy = "";
  custcode = "";
  custname = "";
  rebval = blankval;
  feeval = blankval;
  overdueval = blankval;
  M4ILMidstr(lstr,custnr,20,6);  // Customer Number 
  M4ILMidstr(lstr,tstr,16,12);  // Invoice Number 
  refno = StringToLongInt(tstr);
  M4ILMidstr(lstr,tstr,6,8);  // payment Date 
  rowpayd = DateFromString(tstr,"YYYYMMDD");
  if (blankdate(paydate)) then begin
    paydate = rowpayd;
  end;
  M4ILMidstr(lstr,tstr,65,15);  // value
  payval = StringToVal(tstr,M4Val);
  payval = payval/100;   
  payval = Round(payval,DefaultRoundMode);
  IVr.SerNr = refno;
  invfound = ReadFirstMain(IVr,1,true);
  rwcnt = MatRowCnt(gIPp);
  if (rwcnt==0) then begin
    SetupSweGIP(gIPp,paymode,paydate);
  end;
  gIPp.TransDate = paydate;
  if (rwcnt>90) then begin
    SaveGIP(gIPp);
    SetupSweGIP(gIPp,paymode,paydate);
    gIPp.Comment = "";
    rwcnt = MatRowCnt(gIPp);
  end;
  if (invfound) then begin
    custcode = IVr.CustCode;
    custname = IVr.Addr0;
    if (nonblank(custname)) then begin custname = custname & ", "; end;
    custname = custname & custnr;
  end;
  ARr.InvoiceNr = IVr.SerNr;
  if (ReadFirstMain(ARr,1,true)) then begin
    rv = ARr.RVal;
    rv2 = ARr.RVal;
    openval = ARr.RVal;
    rebdate = ARr.ARRebDate;
  end else begin
    rv = blankval;
    rv2 = blankval;
    openval = blankval;
    rebdate = blankd;
  end;
  invcurncy = icecurncy;
  if (invfound) then begin
    invcurncy = IVr.CurncyCode;
    if (IVr.pdvrebt!=0) then begin
      rebdays = DateDiff(rebdate,paydate);
      if (rebdays>=0) then begin
        rebval = rv*IVr.pdvrebt;
        rebval = rebval/100;
        rebval = Round(rebval,GetTotalRoundMode(RoundRec));
        rv = rv - rebval;
        openval = rv;
      end;
      if (invfound) then begin
        if (icecurncy!=IVr.CurncyCode) then begin
          rv = MulRateToBase1(IVr.CurncyCode,rv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          rv2 = MulRateToBase1(IVr.CurncyCode,rv2,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
        end;
      end;
      tv = payval - rv;
      if (tv<-5) then begin
        rebval = blankval;
      end else begin
        rebval = rv2 - payval;
      end;
    end;
  end;
  if (payval!=0) then begin
    rwcnt = rwcnt + 1;
    ClearRow(gIPp,IPrw,1);
    i = rwcnt-1;
    IPrw.stp = 1;
    IPrw.ovst = 0;
    IPrw.InvoiceNr = IVr.SerNr;
    IPrw.CustCode = custcode;
    IPrw.CustName = custname;
    IPrw.PayDate = paydate;
    if (nonblankdate(rowpayd)) then begin 
      IPrw.PayDate = rowpayd;
    end;
    if (invfound) then begin
      IPrw.InvCurncy = invcurncy;
      IPrw.BankCurncy = icecurncy;
      IPrw.RecCurncy = icecurncy;
    end;
    invval = payval;
    if (invfound) then begin
      if (invcurncy!=icecurncy) then begin
        CurValToOtherCur(IVr.TransDate,icecurncy,payval,invcurncy,invval,DefaultCurRoundOff);
      end;
    end;
    IPrw.InvVal = invval;
    IPrw.InvOutstand = openval;
    IPrw.BankVal = payval;
    IPrw.RecVal = payval;
    IPrw.latedays = latedays;
    IPrw.CUPNr = -1;
    IPrw.CredManNr = IVr.CredManNr;
    MatRowPut(gIPp,i,IPrw);
  end;
  if (rebval!=0) then begin
    rwcnt = rwcnt + 1;
    ClearRow(gIPp,IPrw,5);
    i = rwcnt-1;
    IPrw.stp = 5;
    IPrw.ovst = 0;
    IPrw.InvoiceNr = IVr.SerNr;
    IPrw.CustCode = custcode;
    IPrw.CustName = custname;
    IPrw.PayDate = paydate;
    if (nonblankdate(rowpayd)) then begin
      IPrw.PayDate = rowpayd;
    end;
    if (invfound) then begin
      IPrw.InvCurncy = invcurncy;
      IPrw.BankCurncy = icecurncy;
      IPrw.RecCurncy = icecurncy;
    end;
    invval = rebval;
    if (invfound) then begin
      if (invcurncy!=icecurncy) then begin
        CurValToOtherCur(IVr.TransDate,icecurncy,rebval,invcurncy,invval,DefaultCurRoundOff);
      end;
    end;
    IPrw.InvVal = invval;
    IPrw.InvOutstand = openval;
    IPrw.BankVal = rebval;
    IPrw.RecVal = rebval;
    IPrw.latedays = -1;
    IPrw.CUPNr = -1;
    IPrw.CredManNr = IVr.CredManNr;
    MatRowPut(gIPp,i,IPrw);
  end;
  if (feeval!=0) then begin
    rwcnt = rwcnt + 1;
    ClearRow(gIPp,IPrw,7);
    i = rwcnt-1;
    IPrw.stp = 7;
    IPrw.ovst = 0;
    IPrw.InvoiceNr = IVr.SerNr;
    IPrw.CustCode = custcode;
    IPrw.CustName = custname;
    IPrw.PayDate = paydate;
    if (nonblankdate(rowpayd)) then begin
      IPrw.PayDate = rowpayd;
    end;
    if (invfound) then begin
      IPrw.InvCurncy = invcurncy;
      IPrw.BankCurncy = icecurncy;
      IPrw.RecCurncy = icecurncy;
    end;
    invval = feeval;
    if (invfound) then begin
      if (invcurncy!=icecurncy) then begin
        CurValToOtherCur(IVr.TransDate,icecurncy,feeval,invcurncy,invval,DefaultCurRoundOff);
      end;
    end;
    IPrw.InvVal = invval;
    IPrw.InvOutstand = openval;
    IPrw.BankVal = feeval;
    IPrw.RecVal = feeval;
    IPrw.latedays = -1;
    IPrw.CUPNr = -1;
    IPrw.CredManNr = IVr.CredManNr;
    MatRowPut(gIPp,i,IPrw);
  end;
  if (overdueval!=0) then begin
    rwcnt = rwcnt + 1;
    ClearRow(gIPp,IPrw,7);
    i = rwcnt-1;
    IPrw.stp = 7;
    IPrw.ovst = 0;
    IPrw.InvoiceNr = IVr.SerNr;
    IPrw.CustCode = custcode;
    IPrw.CustName = custname;
    IPrw.PayDate = paydate;
    if (nonblankdate(rowpayd)) then begin
      IPrw.PayDate = rowpayd;
    end;
    if (invfound) then begin
      IPrw.InvCurncy = invcurncy;
      IPrw.BankCurncy = icecurncy;
      IPrw.RecCurncy = icecurncy;
    end;
    invval = overdueval;
    if (invfound) then begin
      if (invcurncy!=icecurncy) then begin
        CurValToOtherCur(IVr.TransDate,icecurncy,overdueval,invcurncy,invval,DefaultCurRoundOff);
      end;
    end;
    IPrw.InvVal = invval;
    IPrw.InvOutstand = openval;
    IPrw.BankVal = overdueval;
    IPrw.RecVal = overdueval;
    IPrw.latedays = -1;
    IPrw.CUPNr = -1;
    IPrw.CredManNr = IVr.CredManNr;
    MatRowPut(gIPp,i,IPrw);
  end;
LImpNordeaBankDenmark:;
  return;
end;
