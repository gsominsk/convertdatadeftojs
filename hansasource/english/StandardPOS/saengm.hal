external function Boolean HasIncomeAndExpenseBook();
/* sasengm.hal */
/* Standard POS by HansaWorld */
external function Boolean HasDeveloperMode();
external function Boolean HasLoyaltyCards();
external function Boolean HasModDI();
external function Boolean HasPersons();
external function Boolean HasModQT();
external function Boolean HasSerialNumbers();
external function Boolean HasModAT2();
external function Boolean HasModCL();
external function Boolean HasStandardCRM();
external function Boolean HasModExp();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();
external function Boolean HasModSO();
external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModSL();
external function Boolean HasModPL();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModRest();
external function Boolean HasModCRM();
external function Boolean HasPayroll();

external function Boolean HasAdvancedPricing();
external function Boolean HasBase2();
external function Boolean HasCategories();
external function Boolean HasContactClassification();
external function Boolean HasFormEditor();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLocalMachines();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNumberSeries();
external function Boolean HasOfficialSerNr();
external function Boolean HasObjects();
external function Boolean HasPriceLists();
external function Boolean HasPaymentGateway();
external function Boolean HasVarieties();
external function Boolean HasIntegratedNL();
external procedure SetProductTags();
external procedure LoadWindowTags();


begin
  Real h,v,l,vs;
  Boolean modsysf;
  
  SetLangMode(LangEnglish,"ENG",2);
  
  // this is for when it's a hardcoded list of options
  // we'll get some better solution for that later, but for now we
  // need one product folder per set of default options


  if (BuildProductCode=="StandardPOS") then begin
  
  if (HasLocalization("HRV,SGP,SRB,SVN")) then begin
    UseActivationCodes(true);
  end;
  SetProductTags;
  LoadWindowTags;
    
  if (HasStandardCRM) then begin
    Module("CRM","",730,modCRM);  
    Module("Calendar","",730,modCAL);  
    Module("Task Manager","",730,modTASK);
  end;
  if (HasModCL) then begin
    Module("Cash Book","",730,modCL);
  end;
  if (HasStandardCommunicator and HasStandardCRM==false and HasStandardOrganizer==false) then begin 
    Module("Communicator","",730,modCRM);
  end;
  if (HasModNL) then begin
    Module("#Nominal Ledger#","",730,modNL);
  end;
  if (HasStandardOrganizer and HasStandardCRM==false) then begin 
    Module("Organizer","",730,modCRM);
  end;
  if (HasModPOS) then begin
    Module("Point of Sales","",730,modPOS);  
  end;
  if (HasModPL) then begin
    Module("#Purchase Ledger#","",730,modPL);  
  end;
  if (HasModPO) then begin
    Module("Purchase Orders","",730,modPO);
  end;
  if (HasLocalization("PRT")) then begin
    if (HasModQT) then begin
      Module("Quotations","",730,modQT);
    end;  
  end;
  if (HasModRest) then begin
    Module("#Restaurant#","",730,modRest);  
  end;
  if (HasModSL) then begin
    Module("#Sales Ledger#","",730,modSL);
  end;
  if (HasModSO) then begin
    Module("Sales Orders","",730,modSO);
  end;
  if (HasModIN) then begin
    Module("#Stock#","",730,modIN);
  end;
  if (HasModDI) then begin
    Module("Pricing","",730,modDI);  
  end;
  modsysf = HasStandardCRM or HasModQT or HasModPL or HasModSL or HasModSO or HasModIN or HasFormEditor or HasMultiCurrency or HasBase2;
  modsysf = modsysf or HasObjects or HasStandardCRM or HasStandardCommunicator or HasStandardOrganizer;
  if (modsysf) then begin
    Module("System","",730,modSY);
  end;
   
/* modSY */
  // debug
  if (HasDeveloperMode) then begin
    Setting("Cloud Services",EnabServerTClass,modSY);
    Setting("Configuration",ModulesTClass,modSY);
    Setting("Current License Flags",CurLicensesClass,modSY);
    Setting("Internet Enablers",InternetEnablerTClass,modSY);
    Setting("Licenses",LicensesLClass,modSY);
    RegisterWS("Mailboxes","Mailboxes","New Mailbox",ConferenceWClass,modSY);
    Setting("My IP Address",MyIPAddrTClass,modSY);
    Setting("Program Mode",ProgramStatusTClass,modSY);
    Setting("Services Cache",ServiceCacheLClass,modSY);
    Setting("Std Registration Data",StdRegDataWClass,modSY);
  end;
  // end debug code

  if ((ClientMode and LicenseMode==kLicenseModeServer) or HasPersons or HasLocalization("HRV") or HasDeveloperMode) then begin
    RegisterWS("Persons","Persons","New Person",UserVc,modSY);
  end;
  if (HasFormEditor) then begin
    if (GuiType!=kGuiiPhone) then begin
      RegisterWS("Forms","Forms","New Form",DocVc,modSY);
    end;
    RegisterWS("Styles","Styles","New Style",StyleVc,modSY);
  end;
  if (HasMultiCurrency or HasBase2) then begin
    RegisterWS("Currencies","Currencies","New Currency",CurncyCodeVc,modSY); 
  end;
  if (HasMultiCurrency) then begin
    RegisterWS("Exchange Rates","Exchange Rates","New Exchange Rate",ERVc,modSY);
  end;

  if (HasStandardCRM or HasStandardCommunicator or HasStandardOrganizer) then begin
    Setting("Access Groups",AccessLClass,modSY);
  end;
  if (HasStandardCRM or HasStandardCommunicator or HasStandardOrganizer) then begin
    Setting("Active Users",ListUsersClass,modSY);
  end;
  if (HasBase2) then begin
    Setting("Base Currency",BaseCurTClass,modSY);
    Setting("Base Currency Rates",BaseERLClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Brazilian Invoice Types",BrazilEInvTypeLClass,modSY);
  end;
  if (HasStandardCRM or HasStandardCommunicator or HasStandardOrganizer) then begin
    Setting("Companies",CompaniesTClass,modSY);
    Setting("Company Date and Numeric Format",SysFormatTClass,modSY);
  end;
  Setting("Company Info",CYWClass,modSY);
  if (ClientMode) then begin
    switch (LicenseMode) begin
      case kLicenseModeClient:
      case kLicenseModeServer:
//        Setting("Configuration",ModulesTClass,modSY);
        Setting("Configure Users",ConfigureUsersTClass,modSY);
    end;
  end;
  if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
    Setting("Conversions - Master",ConvMasterTClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Districts",DistrictLClass,modSY);
  end;

  if (HasModNL) then begin
    Setting("Fiscal Years",YearTClass,modSY);
  end;
  if (HasItemGroups or HasLocalization("PRT")) then begin
    Setting("Item Groups",ITLClass,modSY);
  end;
  if (HasKPIs) then begin
    Setting("KPIs",KPIDefLClass,modSY);
  end;
  if (HasLanguages) then begin
    Setting("Languages",LangTClass,modSY); 
  end;
  if (HasNumberSeries or HasLocalization("HRV,LVA")) then begin
    Setting("Legal Invoice Numbers",LegalInvNrTClass,modSY);
  end;  
  if (HasModNL) then begin
    Setting("Locking",DBLockTClass,modSY);
  end;

/*  
  if (UseAppStoreEnabler==false) then begin
    Setting("Internet Enablers",InternetEnablerTClass,modSY);
  end;
*/  
  if (HasLocalization("BRA")) then begin
    Setting("Municipalities",MunicipalityLClass,modSY);
  end;
  if (HasObjects and HasModNL==false) then begin
    Setting("Tags/Objects",ObjLClass,modSY);
    Setting("Tag/Object Types",OTLClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Operation Types",OperationTypeLClass,modSY);
  end;
  if (HasModSL==false) then begin
    Setting("Payment Terms",PDLClass,modSY);
    Setting("Persons",UserLClass,modSY);
  end;
//  if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
//    Setting("Rate Gain/Loss",NLRateTClass,modSY);
//  end;

  Setting("Reporting Periods",PeriodTClass,modSY);
  Setting("Units",UnitLClass,modSY);
  if (HasLanguages) then begin
    Setting("Values in Text",LangNrLClass,modSY);
  end;
  if (HasModNL==false) then begin
    Setting("#VAT# Codes",VATCodeTClass,modSY); 
  end;
  //Setting("Values in Text",LangNrLClass,modSY);
  //Setting("Test Function Tags",WindowTagTestClass,modSY);
  
  Report("Company Info",CompInfoRClass,CompInfoRn,0,modSY);

  Export("Base Registers",GBaseEClass,GBaseEn,modSY);
  //Export("Company Text Backup",TBEClass,CompanyTBEn,modSY);
  if (GuiType!=kGuiiPhone) then begin
    Export("Database Text Backup",TBEClass,DatabaseTBEn,modSY);
  end;
  if (HasLocalization("HRV")) then begin
    Export("Register Export",ExpRegEClass,ExpRegEn,modSY);
  end;
  //Export("Remote Backup",TBRemoteEClass,RemoteTBEn,modSY);
  Export("Item Base Registers",GItemBaseEClass,GItemBaseEn,modSY);
  if (HasModSL==false) then begin
    if (HasLocalization("PRT")) then begin
      Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modSY);
    end;  
  end;  
  if (HasLocalization("LTU")) then begin
    Export("#S/L# #VAT# Invoices (Lithuania)",LitVATRegIVEClass,LitVATRegIVEn,modSY);
  end;
  Export("System Data",SysEClass,SysEn,modSY);
  Export("Transaction Registers",GTransEClass,GTransEn,modSY);
  Export("Transaction Registers (period)",GTrans2EClass,GTrans2En,modSY);
  
  Import("Automatic",0,FullyAutIn,modSY);
  Import("Manual file search",0,AutIn,modSY);
  Import("Remote backup",RemoteInIClass,RemoteIn,modSY);

  if (HasIntegratedNL) then begin
    Maintenance("Create #N/L# Transactions",TransGenVClass,GenTransMn,modSY); 
  end;
//  Maintenance("Restore Application",ResetDBWClass,0,modSY);
  Maintenance("Send Invitation for New User",SubscriptionInvitationVClass,SubscriptionInvitationMn,modSY);

/* modSL */
  
  RegisterWS("Invoices","Invoices","New Invoice",IVVc,modSL);
  RegisterWS("Receipts","Receipts","New Receipt",IPVc,modSL);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modSL);
  RegisterWS("Items","Items","New Item",INVc,modSL);
  if (HasPriceLists) then begin
    RegisterWS("Prices","Prices","New Price",PLVc,modSL);
  end;
  if (HasLocalization("HRV")) then begin
    RegisterWS("Quotations","Quotations","New Quotation",QTVc,modSL);
  end;
  
  if (HasModNL) then begin
    Setting("Account Usage #S/L#",AccTClass,modSL);
  end;
  if (HasContactClassification) then begin
    Setting("Contact Classifications",CClassLClass,modSL);
  end;
  if (HasCategories) then begin
    Setting("Customer Categories",CCatLClass,modSL);
  end;
//  Setting("Electronic Invoices Customers Data",EInvCULClass,modSL);
//  Setting("Electronic Invoices Settings",EInvoiceTClass,modSL);
//  Setting("Electronic Invoices Queue",EInvoiceQueLClass,modSL);
//  Setting("Electronic Record Statuses",ERecordStatusLClass,modSL);
  if (HasModNL and HasModPL and HasMultiCurrency) then begin
    Setting("Internal Invoices",IntIVLClass,modSL);
  end;

  if (HasModNL==false) then begin
    Setting("Invoice Settings",AccTClass,modSL);
  end;
  if (HasItemGroups or HasLocalization("PRT")) then begin
    Setting("Item Groups",ITLClass,modSL);
  end;
  if (HasModSL and HasLocalization("PRT")) then begin
    Setting("Item Group Withholdings",WHITLClass,modSL);
  end;
  if (HasNumberSeries) then begin
    Setting("Number Series - Invoices",IVSerTClass,modSL);
    Setting("Number Series - Receipts",IPSerTClass,modSL);
    if (HasModNL) and (HasLocalization("POL")) then begin
      Setting("Number Series - #VAT# Corrections #S/L#",VATIVSerTClass,modSL);
    end;
  end;
  Setting("Payment Modes",PMTClass,modSL);
  Setting("Payment Terms",PDLClass,modSL);
  if (HasPriceLists) then begin
    Setting("Price Lists",PLDefLClass,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Setting("Reference Number Settings",CalcRefTClass,modSL);
  end;
  Setting("Sales Invoice Settings",IVTTClass,modSL);    
  Setting("Units",UnitLClass,modSL);
  if (HasLocalization("POL")) and (HasModNL) then begin
    Setting("#VAT# Corrections #S/L#",VATIVLClass,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Setting("#VAT# Codes",VATCodeTClass,modSL); 
  end;  
  if (HasLocalization("PRT") and (HasModPL or HasModSL)) then begin
    Setting("Withholding Calculation Formulae",WHCalcFormLClass,modSL);
    Setting("Withholding Taxes",WHTaxTClass,modSL);
  end;    

  Document("Cash Notes",KIVRClass,CashInvForm,CashFClass,modSL);
  Document("#Credit Notes#",CIVRClass,CredInvForm,CredFClass,modSL);
  Document("Customer Labels",CuLabRClass,CuLabForm,CuLabFClass,modSL);
  if (HasLocalization("POL")) then begin
    Document("Debtors Letter",DebtLetRClass,DebtorLetForm,DebtLetFClass,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Document("Interest Invoices",IIVRClass,IIInvForm,IIFClass,modSL);
  end;
  Document("Invoices",IVRClass,InvForm,InvFClass,modSL); 
  Document("Open Invoice Customer Statement",ARSRClass,ARSForm,ARSFClass,modSL);
  Document("Periodic Customer Statement",CuPerRClass,CuPerForm,CuPerFClass,modSL);
  if (HasLocalization("POL")) then begin
    Document("Proforma Invoices",Inv1RClass,Inv1Form,Inv1FClass,modSL);
  end;
  if (HasLocalization("HRV")) then begin
    Document("Quotations",QTRClass,QTForm,QTFClass,modSL);
  end;
  Document("Receipt Forms",IPDRClass,IPDForm,IPDFClass,modSL);
  if (HasLocalization("POL")) then begin
    Document("Reminders",RemRClass,RemForm,RemFClass,modSL);
  end;

  if (HasLocalization("HRV")) then begin
    Report("Consumption Taxes Summary",ConsTaxSumRClass,ConsTaxSumRn,0,modSL);
  end;
  Report("Contact List",CURClass,CustRn,0,modSL);
  Report("Customer/Item Statistics",CuArtSTRClass,CuArtSTRn,0,modSL);
  Report("Customer Statistics",CustSTRClass,CustSTRn,0,modSL);
  if (HasLocalization("HRV")) then begin
    Report("GP, Invoices",IVGPRClass,IVGPRn,0,modSL);
  end;
//  Report("Electronic Invoice Status",HTSStatIVRClass,HTSStatIVRn,0,modSL);
  Report("Invoice Journal",IVJRClass,InvoiceRn,0,modSL);
  Report("Item List",ArtRClass,ArtRn,0,modSL);
  Report("Item Statistics",ArtSTRClass,ArtSTRn,0,modSL);
  Report("Open Invoice Customer Statement",ARS2RClass,ARS2Rn,0,modSL);
  Report("Periodic Customer Statement",CuPer2RClass,CuPerRn,0,modSL);
  if (HasPriceLists) then begin
    Report("Price List",PriceRClass,PriceRn,0,modSL);
  end;
  if (HasLocalization("HRV")) then begin
    Report("Quotation Journal",QTJRClass,QTJRn,0,modSL);
  end;
  Report("Receipts Forecast",IPProgRClass,IPProgRn,0,modSL);
  Report("Receipt Journal",IPRClass,IPRn,0,modSL);
  Report("#Sales Ledger#",ARRClass,ARRn,0,modSL);
  if (HasLocalization("PRT")) then begin
    Report("#VAT Code# Statistics",SLVATRClass,SLVATRn,0,modSL);
  end;
  if (HasLocalization("POL")) and (HasModNL) then begin
    Report("#VAT# Report Sales",SLVATRepRClass,SLVATRepRn,0,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Report("#VAT# Report Sales (Lithuania)",SLVATLitRClass,SLVATLitRn,0,modSL);  
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Customer Sales",RealCustRClass,RealCustRn,0,modSL);
  end;
  
  if (HasModNL) then begin
    if (HasLocalization("PRT")) then begin
      Maintenance("Transfer to Bad Debtors",BadCUVClass,BadCUMn,modSL);
    end;
  end;

  if (HasLocalization("LTU")) then begin
    Export("#S/L# #VAT# Invoices",LitVATRegIVEClass,LitVATRegIVEn,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Export("SAFT",PortTaxXmlEClass,PortTaxXmlEn,modSL);
  end;  

/* modPL */

  RegisterWS("#Purchase Invoices#","#Purchase Invoices#","New #Purchase Invoice#",VIVc,modPL);
  RegisterWS("Payments","Payments","New Payment",OPVc,modPL);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modPL);

  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Setting("Account Usage #P/L#",APAccTClass,modPL);
  end;
  if (HasLocalization("AUS,ESP,FIN,GBR,NOR,SWE")) then begin
    Setting("#Bank Files#",BankFileTClass,modPL);
  end;
  if (HasNumberSeries) then begin
    Setting("Number Series - #Purchase Invoices#",VISerTClass,modPL);
    Setting("Number Series - Payments",OPSerTClass,modPL);
    if (HasModNL or HasIncomeAndExpenseBook) and (HasLocalization("POL,HRV")) then begin
      Setting("Number Series - #VAT# Corrections #P/L#",VATVISerTClass,modPL);
    end;
  end;
  Setting("Payment Modes",PMTClass,modPL);
  Setting("Payment Terms",PDLClass,modPL);
  if (HasCategories) then begin
    Setting("#Supplier# Categories",VGLClass,modPL);
  end;
  if (HasModNL or HasIncomeAndExpenseBook) and (HasLocalization("POL,HRV")) then begin
    Setting("#VAT# Corrections #P/L#",VATVILClass,modPL);
    Setting("#VAT# Correction #P/L# Types",VATVITypeTClass,modPL);
  end;
  if (HasLocalization("PRT,ITA")) then begin
    Setting("Withholding Calculation Formulae",WHCalcFormLClass,modPL);
    Setting("Withholding Taxes",WHTaxTClass,modPL);
  end;  
  if (HasLocalization("ESP,FIN,RUS")) then begin
    Setting("Banks",BankLClass,modPL);
  end;
  
  if (HasLocalization("LTU,POL")) then begin
    Document("Open Invoice #Supplier# Statement",APSRClass,APSForm,APSFClass,modPL);
  end;
  Document("Payment Forms",OPDRClass,OPDForm,OPDFClass,modPL);
  Document("Payment Lists",OPRClass,OPForm,0,modPL);
  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Document("#Purchase Invoices#",VIRClass,VIForm,VIFClass,modPL);
  end;

  if (HasLocalization("LTU")) then begin
    Report("Open Invoice #Supplier# Statement",APS2RClass,APS2Rn,0,modPL);
  end;
  Report("Payments Forecast",OPProgRClass,OPProgRn,0,modPL);
  Report("Payment Journal",OPJRClass,OPJRn,0,modPL);
  Report("Periodic #Supplier# Statement",VePer2RClass,VePerRn,0,modPL);
  if (HasLocalization("LVA")) then begin
    Report("Prepayment History #P/L#",PerPayHisPLRClass,PerPayHisPLRn,0,modPL);
  end;
  Report("#Purchase Invoice# Journal",VIJRClass,VIJRn,0,modPL);
  Report("#Purchase Ledger#",APRClass,APRn,0,modPL);
  Report("#Supplier# List",VERClass,VERn,0,modPL);
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("LVA,POL")) and (HasModNL or HasIncomeAndExpenseBook) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# #Supplier# Purchases",RealSuppRClass,RealSuppRn,0,modPL); 
  end;
  if (HasLocalization("HND")) then begin
    Report("#VAT# Report Purchases (Honduras)",PLVATHonRClass,PLVATHonRn,0,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Report("#VAT# Report Purchases (Lithuania)",PLVATLitRClass,PLVATLitRn,0,modPL);
  end;
  
  if (HasLocalization("AUS,ESP,FIN,GBR,NOR,SWE")) then begin
    Export("Banking File",MPEClass,MPEn,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#P/L# #VAT# Invoices (Lithuania)",LitVATRegVIEClass,LitVATRegVIEn,modPL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#P/L# Latvian #VAT# Report",PLVAT1ExpEClass,PLVAT1En,modPL);
    Export("#VAT# Purchases (Latvia)",LatVATPurchasesEClass,LatVATPurchasesEn,modPL);
  end;
    
  if (HasModNL) and (HasLocalization("HRV")) then begin
    Maintenance("Create #VAT# Corrections #P/L#",VATVIVClass,VATVIMn,modPL);
  end;

/* modCL */

  RegisterWS("Cash In","Cash In","New Cash In",CLInVc,modCL);
  RegisterWS("Cash Out","Cash Out","New Cash Out",CLOutVc,modCL);
  if (HasModSL and HasLocalization("POL")==false) then begin
    RegisterWS("Receipts","Receipts","New Receipt",IPVc,modCL);
  end;
  if (HasModPL and HasLocalization("POL")==false) then begin
    RegisterWS("Payments","Payments","New Payment",OPVc,modCL);
  end;
  if (HasModExp) then begin
    RegisterWS("Personnel Payments","Personnel Payments","New Personnel Payment",PPVc,modCL);
  end;
  
  Setting("Cash Book Settings",MainCLTClass,modCL);
  Setting("Expense Accounts",CLCorspLClass,modCL);
  if (HasNumberSeries) then begin
    Setting("Number Series - Cash In",CLInSerTClass,modCL);
    Setting("Number Series - Cash Out",CLOutSerTClass,modCL);
  end;
  Setting("Payment Modes",PMTClass,modCL);
  
  Report("Cash Book",CLIORClass,CashBRn,0,modCL);
  if (HasLocalization("LTU")) then begin
    Report("Cash Book (Lithuania)",CashBookLitRClass,CashBookLitRn,0,modCL);
  end;
  Report("Cash In Journal",CLInJRClass,CLInJRn,0,modCL);  
  Report("Cash Out Journal",CLOutJRClass,CLOutJRn,0,modCL);  
  if (HasIntegratedNL) then begin
    Report("#N/L# Cash Book",CashBookLatRClass,CashBookLatRn,0,modCL);
  end;

  Document("Cash In",CLInRClass,CLInForm,CLInFClass,modCL);
  Document("Cash Out",CLOutRClass,CLOutForm,CLOutFClass,modCL);

  Maintenance("OK Cash Ins and Cash Outs",OKCLVClass,OKCLMn,modCL);

/* modNL */
  
  if (HasModNL==false) then begin
    if (HasIncomeAndExpenseBook) then begin
      RegisterWS("Accounts","Accounts","New Account",AccVc,modNL);
      RegisterWS("#Transactions#","#Transactions#","New #Transaction#",TRVc,modNL);

      Setting("Fiscal Years",YearTClass,modNL);
      Setting("Income & Expense Book",IncExpBookLClass,modNL);
      if (HasNumberSeries) then begin
        Setting("Number Series - Transactions",TRSerTClass,modNL);
      end;
      Setting("Sub Systems",TRGenTClass,modNL);
      Setting("#VAT# Codes",VATCodeTClass,modNL);
      
      Report("Income & Expense Book",IncExpBookRClass,IncExpBookRn,0,modNL);
    end;
  end else begin
    RegisterWS("Transactions","Transactions","New Transaction",TRVc,modNL);
    if (HasLocalization("AGO,PRT")) then begin
      RegisterWS("Simulations","Simulations","New Simulation",SMVc,modNL);  
    end;
    
    if (HasLocalization("AUS")) then begin
      Register("Account Reconciliation","Account Reconciliation",BankRecWClass,modNL);
    end;
    if (HasLocalization("AUS")==false) then begin
      RegisterWS("Brought Forward Balances","Brought Fwd Balances","New Brought Fwd Balance",FBVc,modNL);
    end;
    RegisterWS("Accounts","Accounts","New Account",AccVc,modNL);


    if (HasLocalization("AGO,POL,PRT")) then begin
      Setting("Account Transfers",AccTransLClass,modNL);
    end;
    Setting("Fiscal Years",YearTClass,modNL);
    if (HasIncomeAndExpenseBook) then begin
      Setting("Income & Expense Book",IncExpBookLClass,modNL);
    end;
    if (HasNumberSeries) then begin
      Setting("Number Series - Transactions",TRSerTClass,modNL);
    end;
    if (HasObjects) then begin
      Setting("Tags/Objects",ObjLClass,modNL);
      Setting("Tag/Object Types",OTLClass,modNL);
    end;
//    if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
//      Setting("Rate Gain/Loss",NLRateTClass,modNL);
//    end;
    Setting("Report Settings",Rs2WClass,modNL);
    Setting("Sub Systems",TRGenTClass,modNL);
    Setting("Sub-ledger Control Accounts",SLAccTClass,modNL);
    if (HasLocalization("HRV,LVA")) then begin
      Setting("Tax Reports",TaxRepLClass,modNL);
    end;
    if (HasLocalization("BRA,HRV,LVA")) then begin
      Setting("Tax Rules",TaxRulesLClass,modNL);
      Setting("Tax Templates",TaxTemplateLClass,modNL);
      Setting("Transaction Settings",TrTClass,modNL);
    end;
    if (HasLocalization("KEN")) then begin
      Setting("Tax Templates",TaxTemplateLClass,modNL);
    end;
    Setting("#VAT# Codes",VATCodeTClass,modNL);
  
    if (HasLocalization("HRV,LVA")) then begin
      Document("Tax Report",TaxDocRClass,TaxRepForm,TaxRepFClass,modNL);
    end;
    Document("Transactions",TRRClass,TRForm,TRFClass,modNL);

    Report("Account Reconciliation",ACReconRClass,ACRecRn,0,modNL);

    if (HasLocalization("AGO,BRA,POL,PRT")) then begin
      Report("Analytical Balance",MBARClass,MBARn,0,modNL);
    end;
    Report("Balance Sheet",BalRClass,BalRn,UserDefRepDClass,modNL);
    Report("Chart of Accounts",AccListRClass,AccListRn,0,modNL);
    Report("Correction List",CorrRClass,CorrRn,0,modNL);
    if (HasLocalization("LTU,LVA")) then begin
      Report("Corresponding Accounts",CorspRClass,CorspRn,0,modNL);
    end;
    if (HasMultiCurrency) then begin
      Report("Currency A/C Rate Change",NLRateRClass,NLRateRn,0,modNL);
    end;
    if (HasIncomeAndExpenseBook) then begin
      Report("Income & Expense Book",IncExpBookRClass,IncExpBookRn,0,modNL);
    end;
    if (HasMultiCurrency) then begin
      Report("Multicurrency Accounts Rate Difference",MultiCurAccRClass,MultiCurAccRn,0,modNL);
    end;
    Report("#Nominal Ledger#",MainRClass,MainRn,0,modNL);
    Report("Profit & Loss",ResRClass,ResRn,UserDefRepDClass,modNL);
    if (HasLocalization("LVA")) then begin
      Report("Tax Calculations", Tax100Class,Tax100Rn,0,modNL);
      Report("Test Corresponding Rules",CorstRClass,CorstRn,0,modNL);
    end;
    Report("Transaction Journal",TransRClass,TransRn,0,modNL);
    Report("Trial Balance",SBRClass,TrialRn,0,modNL);
    if (HasLocalization("POL,PRT")==false) then begin
      Report("#VAT# Listing",ALLVATRClass,ALLVATRn,0,modNL);
    end;
    if (HasLocalization("POL")==false) then begin
      Report("#VAT# Report",VATRClass,VAT2Rn,UserDefRepDClass,modNL);
    end;

    if (HasLocalization("FRA")) then begin
      Export("FEC Export",FrenchFECEClass,FrenchFECEn,modNL);
    end;
    if (HasLocalization("SGP")) then begin
      Export("IRAS audit File",GenIRASEClass,IRASAuditEn,modNL);
    end;
    Export("Monthly Balances",MBEClass,MBEn,modNL);
    if (HasLocalization("SWE")) then begin
      Export("SIE (Swedish Export/Import)",SieEClass,SieEn,modNL);
    end;
    Export("Trial Balance",SBEClass,SBEn,modNL);
    if (HasLocalization("PRT")) then begin
      Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modNL);
    end;  
    if (HasLocalization("LTU")) then begin
      Export("#VAT# Periodic Declaration (Lithuania)",LTUVATEClass,LTUVATEn,modNL);
    end;
  
    if (HasLocalization("SWE")) then begin
      Import("SIE (Swedish Export/Import)",0,SieIn,modNL);
    end;
    
    if (HasLocalization("AGO,POL,PRT")) then begin
      Maintenance("Account Balance Transfer",AccTransVClass,AccTransMn,modNL);
    end;
  end;
    
/*modPOS*/

  RegisterWS("POS Invoices","POS Invoices","New POS Invoice",NPTSIVCashLClass,modPOS);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modPOS);
  RegisterWS("Items","Items","New Item",INVc,modPOS);
  if (HasItemGroups) then begin
    RegisterWS("Item Groups","Item Groups","New Item Group",ITVc,modPOS);
  end;

  if (modsysf==false) then begin
    if (HasLocalization("BRA")) then begin
      Setting("Brazilian Invoice Types",BrazilEInvTypeLClass,modPOS);
      Setting("Districts",DistrictLClass,modPOS);
      Setting("Municipalities",MunicipalityLClass,modPOS);
      Setting("Operation Types",OperationTypeLClass,modPOS);
    end;
  end;
  if (HasLocalization("HRV")) then begin
    Setting("Cash Events",CashLClass,modPOS);
  end;
  if (modsysf==false) then begin
    Setting("Company Info",CYWClass,modPOS);
  end; 
  if (ClientMode) then begin
    switch (LicenseMode) begin
      case kLicenseModeClient:
      case kLicenseModeServer:
//        Setting("Configuration",ModulesTClass,modPOS);
        Setting("Configure Users",ConfigureUsersTClass,modPOS);
    end;
  end;
  if (HasLocalization("BRA,ZWE")) then begin
    Setting("Fiscal Printer #VAT# Codes",ZimFiscalPrinterVATCodeTClass,modPOS);
  end;
  if (HasItemClassification) then begin
    Setting("Item Classifications",DILClass,modPOS);
  end;
  if (HasItemGroups or HasLocalization("PRT")) then begin
    Setting("Item Groups",ITLClass,modPOS);
  end;
  Setting("Invoice Settings",AccTClass,modPOS);
  if (modsysf==false) then begin
    if (HasKPIs) then begin
      Setting("KPIs",KPIDefLClass,modPOS);
    end;
    if (HasLanguages) then begin
      Setting("Languages",LangTClass,modPOS); 
    end;
    Setting("Values in Text",LangNrLClass,modPOS);
  end;
  if (modsysf==false) then begin
    if (HasNumberSeries or HasLocalization("HRV,LVA")) then begin
      Setting("Legal Invoice Numbers",LegalInvNrTClass,modPOS);
    end;  
  end;
  if (HasLocalMachines) then begin
    Setting("Local Machine",LocalMachineTClass,modPOS);
  end;
  if (HasLoyaltyCards) then begin
    Setting("Loyalty Card Membership Levels",LCMemberLevelLClass,modPOS);
    Setting("Loyalty Card Membership Level Structure",LCMLevelSetTClass,modPOS);
    Setting("Loyalty Points",LoyaltyPointsLClass,modPOS);
    Setting("Loyalty Points per Location",LocLoyaltyPointsLClass,modPOS);
    Setting("Loyalty Points Redemption",LoyPointRedeemLClass,modPOS);
    Setting("Loyalty Points Redemption per Location",LocLoyPointRedeemLClass,modPOS);
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Setting("Payment Currencies",POSCurrenciesTClass,modPOS);
  end;    
  if (HasPaymentGateway) then begin
    Setting("Payment Gateways",CCAccountIDLClass,modPOS);
  end;  
  Setting("Payment Modes",PMTClass,modPOS);
  Setting("POS Buttons",POSButtonsLClass,modPOS);
  if (HasLocalization("HRV")) then begin
    Setting("POS Settings",CashierDefTClass,modPOS);
  end;
  if (modsysf==false) then begin
    Setting("Reporting Periods",PeriodTClass,modPOS);
  end;
  if (HasModNL==false) then begin
    if (HasLocalization("BRA,HRV")) then begin
      Setting("Tax Templates",TaxTemplateLClass,modPOS);
      Setting("Transaction Settings",TrTClass,modPOS);
    end;
    if (HasLocalization("KEN")) then begin
      Setting("Tax Templates",TaxTemplateLClass,modPOS);
    end;
  end;
  Setting("Units",UnitLClass,modPOS);   
  Setting("#VAT# Codes",VATCodeTClass,modPOS); 
  if (HasLocalization("HRV,SVN,SRB")) then begin
    Setting("XML Schema Definitions",XMLExportLClass,modPOS);
  end;

  Document("POS Invoices",IVCashRClass,InvCashForm,IVCashFClass,modPOS);

//  Report("Cash Receipts",CashReceiptRClass,CashReceiptRn,0,modPOS);
  Report("Cash Up",CashupRClass,CashupRn,0,modPOS);
  if (HasLocalization("HRV")) then begin
    Report("Consumption Taxes Summary",ConsTaxSumRClass,ConsTaxSumRn,0,modPOS);
  end;
  if (HasModIN) then begin
    Report("GP, POS Invoices", PIVGPRClass,PIVGPRn,0,modPOS);
  end;
  Report("Item List",ArtRClass,ArtRn,0,modPOS);
  Report("Item Statistics",ArtSTRClass,ArtSTRn,0,modPOS);
  if (HasIntegratedNL) then begin
    Report("#N/L# Transfer, Cash Invoices", TransGenPOSRClass,TransGenPOSRn,0,modPOS);
  end;
//  Report("GP, POS Invoices", PIVGPRClass,PIVGPRn,0,modPOS);
  if (HasLoyaltyCards) then begin    
    Report("Loyalty Card Statement",LoyaltyCardRClass,LoyaltyCardRn,0,modPOS);
  end;
  Report("POS Invoice Journal",IVCJRClass,InvCashRn,0,modPOS);
  if (HasVarieties) then begin
    Report("Variety Enquiry",VarEnqRClass,VarEnqRn,0,modPOS);
  end;
  
  if (HasIntegratedNL) then begin
    Maintenance("Cash Up",CashupVClass,CashupMn,modPOS);
  end;
  if (HasLocalization("HRV")) then begin
    Maintenance("Invoices without Official No.",XMLExportVClass,XMLExportMn,modPOS);
  end;
  if (HasModIN) then begin
    Maintenance("Update #Stock#",POSUpdStockVClass,POSUpdStockMn,modPOS);
  end;
  if (modsysf==false) then begin
//    Maintenance("Restore Application",ResetDBWClass,0,modPOS);
  end;
  

  if (modsysf==false) then begin
    Export("Base Registers",GBaseEClass,GBaseEn,modPOS);
    Export("Item Base Registers",GItemBaseEClass,GItemBaseEn,modPOS);
    if (GuiType!=kGuiiPhone) then begin
      Export("Database Text Backup",TBEClass,DatabaseTBEn,modPOS);
    end;
    if (HasLocalization("HRV")) then begin
      Export("Register Export",ExpRegEClass,ExpRegEn,modPOS);
    end;
    //Export("Remote Backup",TBRemoteEClass,RemoteTBEn,modPOS);
    if (HasLocalization("LTU")) then begin
      Export("#S/L# #VAT# Invoices (Lithuania)",LitVATRegIVEClass,LitVATRegIVEn,modPOS);
    end;
    Export("System Data",SysEClass,SysEn,modPOS);
    Export("Transaction Registers",GTransEClass,GTransEn,modPOS);
    Export("Transaction Registers (period)",GTrans2EClass,GTrans2En,modPOS);
  end;
  if (HasModSL==false) then begin
    if (HasLocalization("PRT")) then begin
      Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modPOS);
    end;  
  end;
  
  if (modsysf==false) then begin
    Import("Automatic",0,FullyAutIn,modPOS);
    Import("Manual file search",0,AutIn,modPOS);
    Import("Remote backup",RemoteInIClass,RemoteIn,modPOS);
  end;

/* modSO */
  
  RegisterWS("Orders","Orders","New Order",ORVc,modSO);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modSO);
  RegisterWS("Items","Items","New Item",INVc,modSO);
  if (HasItemGroups or HasLocalization("PRT")) then begin
    RegisterWS("Item Groups","Item Groups","New Item Group",ITVc,modSO);
  end;
  if (HasPriceLists) then begin
    RegisterWS("Prices","Prices","New Price",PLVc,modSO);
  end;

  if (HasModIN) then begin
    Setting("Delivery Terms",ShipDealLClass,modSO);
  end;
  if (HasModSL) then begin
    Setting("Down Payments",DownPayTClass,modSO);
  end;
  if (HasModSL==false) then begin
    Setting("Invoice Settings",AccTClass,modSO);
  end;
  if (HasNumberSeries) then begin
    Setting("Number Series - Orders",ORSerTClass,modSO);
  end;
  Setting("Payment Terms",PDLClass,modSO);
  Setting("Planned Delivery",PlanDeliveryTClass,modSO);
  Setting("Units",UnitLClass,modSO);
  
  Document("Orders",ORRClass,OrdForm,OrdFClass,modSO);
  
  if (HasModIN) then begin
    Report("Deliverable List",ShipableRClass,ShipableRn,0,modSO);
    Report("Delivery List",DeliveryRClass,DeliveryRn,0,modSO);
  end;
  Report("GP, Orders",ORGPRClass,ORGPRn,0,modSO);
  Report("Item List",ArtRClass,ArtRn,0,modSO);
  Report("Order Journal",ORJRClass,OrdRn,0,modSO);
  Report("Ordered Items",OrdItemRClass,OrdItemRn,0,modSO);
  if (HasModIN) then begin
    Report("Outstanding Orders",OrderStockRClass,OrderStockRn,0,modSO);
  end;
  
/* modIN */
  
  if (HasModSO) then begin
    Register("Deliveries","Deliveries",SHVc,modIN);
  end;
  RegisterWS("Goods Receipts","Goods Receipts","New Goods Receipt",PUVc,modIN);
  RegisterWS("#Stock Depreciations#","#Stock Depreciations#","New #Stock Depreciation#",SDVc,modIN);
  if (HasLocalization("PRT")) then begin
    Register("Returned Goods","Returned Goods",RetVc,modIN);
    RegisterWS("Returned Goods to #Suppliers#","Ret. Goods to #Suppliers#","New Ret. Goods to #Suppliers#",RetPUVc,modIN);
    RegisterWS("#Stocktaking#","#Stocktaking#","New #Stocktaking#",StockTakeVc,modIN);
  end else begin
    RegisterWS("#Stocktaking#","#Stocktaking#","New #Stocktaking#",StockTakeVc,modIN);
    RegisterWS("Items","Items","New Item",INVc,modIN);
    RegisterWS("Contacts","Contacts","New Contact",CUVc,modIN);
  end;
  if (HasMultiLocations) then begin 
    RegisterWS("Locations","Locations","New Location",LocationVc,modIN);
    RegisterWS("#Stock# Movements","#Stock# Movements","New #Stock# Movement",StockMovVc,modIN);
  end;

  if (HasModNL) then begin
    Setting("Account Usage #Stock#",INAccTClass,modIN); 
  end;
  Setting("Barcodes",BarcodeLClass,modIN);  
  if (HasModCRM) then begin
    Setting("Contacts",CULClass,modIN);
  end;
  Setting("Cost Accounting",CostAccTClass,modIN);
  if (HasItemGroups or HasLocalization("PRT")) then begin
    Setting("Item Groups",ITLClass,modIN);
  end;
  if (HasLocalization("PRT")) then begin 
    Setting("Items",INLClass,modIN);
  end;
  if (HasVarieties) then begin
    Setting("Item Varieties",VARLClass,modIN);
    Setting("Item Variety Groups",VARGLClass,modIN);
  end;
  if (HasNumberSeries) then begin
    if (HasModSO) then begin
      Setting("Number Series - Deliveries",SHSerTClass,modIN);
    end;
    if (HasNumberSeries and HasLocalization("PRT")) then begin 
      Setting("Number Series - Returned Goods",RetSerTClass,modIN);
      Setting("Number Series - Returned Goods to #Supplier#",RetPUSerTClass,modIN);
    end;
    Setting("Number Series - Goods Receipts",PUSerTClass,modIN);
    Setting("Number Series - #Stock Depreciations#",SDSerTClass,modIN);
    if (HasNumberSeries and HasLocalization("PRT")) then begin 
      if (HasMultiLocations) then begin 
        Setting("Number Series - #Stock# Movements",StockMovSerTClass,modIN);
      end;
    end;
    Setting("Number Series - #Stocktaking#",StockTakeSerTClass,modIN);
  end;
  if (HasLocalization("HRV")) then begin
    Setting("Recipes",RecLClass,modIN);
  end;
  if (HasMultiLocations) then begin 
    Setting("#Stock# Settings",MainStockTClass,modIN);
  end;  
  if (HasVarieties) then begin
    Setting("Variety Masks",VARMaskTClass,modIN);
    Setting("Variety Sets",VARMasksLClass,modIN);
    Setting("Variety Settings",VarietyTClass,modIN);
    Setting("Variety Subsets",VARSubsetsLClass,modIN);
  end;

  if (HasModSO) then begin
    Document("Address Labels",AdrLabRClass,AdrLabForm,AdrLabFClass,modIN);
    Document("Delivery Notes",Sh1RClass,Sh1Form,Sh1FClass,modIN);
    Document("Freight Labels",SHLabRClass,SHLabForm,SHLabFClass,modIN);
  end;
  Document("Goods Receipt Labels",PULabRClass,PULabForm,PULabFClass,modIN);
  Document("Goods Receipts",PurchaseRClass,PurchaseForm,PurchaseFClass,modIN);
  Document("Item Labels",ItemLabelRClass,ItemLabelForm,ItemLabelFClass,modIN);
  if (HasModSO) then begin
    Document("Picking Lists",Sh2RClass,Sh2Form,Sh2FClass,modIN);
  end;
  Document("#Stock Depreciations#",SDRClass,SDForm,SDFClass,modIN);
  if (HasLocalization("HRV")) then begin
    Document("#Stock# Movements",StockMovRClass,StockMovForm,StockMovFClass,modIN);
  end;

  if (HasModPO or HasModSO) then begin
    Report("Deficiency List",PurRClass,PurRn,0,modIN);
  end;
  if (HasModSO) then begin
    Report("Delivery Journal",SHJRClass,ShipRn,0,modIN);
    Report("Delivery List",SHListRClass,ShipListRn,0,modIN);
  end;
  Report("Goods Receipt Journal",PUJRClass,PUJRn,0,modIN);
  Report("Item History",INrsRClass,INrsRn,0,modIN);
  Report("Item List",ArtRClass,ArtRn,0,modIN);
  Report("#Stock Depreciation# Journal",SDJRClass,StockDepRn,0,modIN);
  Report("#Stock# In Journal",StockJInRClass,StockInRn,0,modIN);
  Report("#Stock# List",INRClass,InvValRn,0,modIN);
  Report("#Stock# Out Journal",StockJOutRClass,StockOutRn,0,modIN);
  Report("#Stocktaking# Comparison",STCompRClass,STCompRn,0,modIN);
  Report("#Stocktaking# List",StockTakeRClass,StockTakeRn,0,modIN);
  Report("#Supplier#/Item Statistics",VeInRClass,VeInRn,0,modIN);

  Maintenance("#Stocktaking# Comparison",STCompVClass,STCompMn,modIN);
  
  if (HasLocalization("PRT")) then begin
    Export("Inventory List for Tax Authorities",PRTInventoryEClass,PRTInventoryEn,modIN);
  end;

/*modPO*/

  RegisterWS("Purchase Orders","Purchase Orders","New Purchase Order",POVc,modPO);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modPO);
  RegisterWS("Items","Items","New Item",INVc,modPO);

  if (HasModIN) then begin
    Setting("Delivery Terms",ShipDealLClass,modPO);
  end;
  if (HasNumberSeries) then begin
    Setting("Number Series - Purchase Orders",POSerTClass,modPO);
  end;

  Report("Deficiency List",PurRClass,PurRn,0,modPO);
  Report("Outstanding Purchase Orders",POOrdStockRClass,POOrdStockRn,0,modPO);  
  Report("Purchase Order Journal",PurOrdJRClass,PurOrdJRn,0,modPO);

  Document("Purchase Orders",PORClass,POForm,POFClass,modPO); 

/* modQT */
  RegisterWS("Quotations","Quotations","New Quotation",QTVc,modQT);
  if (HasModCRM) then begin
    RegisterWS("Contacts","Contacts","New Contact",CUVc,modQT);
  end;
  RegisterWS("Items","Items","New Item",INVc,modQT);
  if (HasPriceLists) then begin
    RegisterWS("Prices","Prices","New Price",PLVc,modQT);
  end;
  //RegisterWS("Pre Quotations","Pre Quotations","New Pre Quotation",PreQTVc,modQT); no funcionality for this one
  if (HasNumberSeries) then begin
    Setting("Number Series - Quotations",QTSerTClass,modQT);
  end;
  Setting("Quotation Classes",QuoteClassTClass,modQT);
  Setting("Quotation Settings",QTSettTClass,modQT);

  Document("Quotations",QTRClass,QTForm,QTFClass,modQT);
  if (HasLocalization("PRT")) then begin
    Document("Proforma Invoice, Quotations",ProformaQTRClass,ProformaQTForm,ProformaQTFClass,modQT);
  end;
  
  if (HasLocalization("PRT")) then begin
    Report("Proforma Invoice Journal",ProformaIVJRClass,ProformaIVJRn,0,modQT);
  end;
  Report("Accepted Quotations Journal",QTHistoryRClass,QTHstRn,0,modQT);
  Report("Outstanding Quotations",QTStkRClass,QTStkRn,0,modQT);
  Report("Pipeline",QTPipelineRClass,QTPipelineRn,0,modQT);
  Report("Quotation Journal",QTJRClass,QTJRn,0,modQT);

/* modRest */
  RegisterWS("Tabs","Tabs","New Tab",RestAccVc,modRest);
  RegisterWS("Items","Items","New Item",INVc,modRest);
  Register("Table Layout","Table Layout",TableLayoutClass,modRest);

  Setting("Daily Statistics",SalesTimeTClass,modRest); 
  Setting("Default Payment Modes",DefCashTClass,modRest);
  Setting("Invoice Settings",AccTClass,modRest);
  if (HasItemGroups or HasLocalization("PRT")) then begin
    Setting("Item Groups",ITLClass,modRest);
  end;
  Setting("Payment Modes",PMTClass,modRest); 
  Setting("POS Buttons",POSButtonsLClass,modRest);
  Setting("Tables",NeighbourHoodLClass,modRest);
  Setting("Units",UnitLClass,modRest);

  Document("Bar Tab",RestAccRClass,RestAccForm,RestAccFClass,modRest);
  Document("Bar Tab Receipt",RestAccReceiptRClass,RestAccReceiptForm,RestAccReceiptFClass,modRest);
  Document("Cancel Order",RestAccRClass,RestAccCancelForm,RestAccCancelFClass,modRest);
  Document("Cash Events",CashRClass,CashForm,CashFClass,modRest);
  Document("Fire Order",RestAccRClass,RestAccFireOrderForm,RestAccFireOrderFClass,modRest);
  Document("Guest Bill ",RestAccGuestBillRClass,RestAccGuestBillForm,RestAccGuestBillFClass,modRest);

  Export("#Restaurant# Daily Statistics",SalesTimeEClass,SalesTimeEn,modRest);  

  Report("Item List",ArtRClass,ArtRn,0,modRest);
  Report("#Restaurant# Daily Statistics",DetSalesTimeRClass,DetSalesTimeRn,0,modRest);  
//  Report("Cash Up",CashupRClass,CashupRn,0,modRest);
  Report("#Restaurant# Daily Statistics",DetSalesTimeRClass,DetSalesTimeRn,0,modRest);  
  Report("#Restaurant# Item Statistics",BarItemStatRClass,BarItemStatRn,0,modRest);
  Report("Tabs Journal",RestAccJRClass,RestAccJRn,0,modRest);
  Report("Void Report",VoidedRowsRClass,VoidedRowsRn,0,modRest);
  
/* modCRM */

  if (HasStandardCRM) then begin  
    RegisterWS("Quotations","Quotations","New Quotation",QTVc,modCRM);
  end;
  RegisterWS("Activities","Activities","New Activity",ActVc,modCRM);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modCRM);
  if (HasStandardCRM) then begin  
    RegisterWS("Items","Items","New Item",INVc,modCRM);
  end;

  Report("Birthday List",BirthDayRClass,BirthDayRn,0,modCRM);
  Report("Call History",CallHistRClass,CallHistRn,0,modCRM);
  Report("Contact List",CURClass,CustRn,0,modCRM);
  if (HasStandardOrganizer==false) then begin
    Report("Customer Status",CustPSRClass,CustPSRn,0,modCRM);
  end;
  Report("List Invalid Phone Numbers",InvPhoneNoRClass,InvPhoneNoRn,0,modCRM);
  if (HasStandardCRM) then begin  
    Report("Outstanding Quotations",QTStkRClass,QTStkRn,0,modCRM);
  end;
  Report("Person List",UserRClass,UserRn,0,modCRM);
  Report("Personal Calendar",ActCalRClass,ActCalRn,0,modCRM);
  if (HasStandardCRM) then begin  
    Report("Pipeline",QTPipelineRClass,QTPipelineRn,0,modCRM);
    Report("Quotation Journal",QTJRClass,QTJRn,0,modCRM);
  end;
  Report("Search for Contact Person",SearchContactRClass,SearchContactRn,0,modCRM);

  Document("Activities",ActDocRClass,ActDocForm,ActDocFClass,modCRM);
  Document("Contact Labels",CoLabRClass,CoLabForm,CoLabFClass,modCRM);
  if (HasStandardCRM) then begin  
    Document("Quotations",QTRClass,QTForm,QTFClass,modCRM);
  end;

  Setting("Activity Classes",ActTypeGrLClass,modCRM);
  Setting("Activity Types",ActTypeLClass,modCRM);
  Setting("Customer Relations",ContactRelLClass,modCRM);
  if (HasStandardCRM or HasStandardCommunicator) then begin  
    Setting("Info in Customer Status Report",CustPSLClass,modCRM);
  end;
  if (HasStandardCRM) then begin  
    Setting("Payment Terms",PDLClass,modCRM);
  end;
  Setting("Program Mode",ProgramStatusTClass,modCRM);//clouds ? 
  if (HasStandardCRM) then begin  
    Setting("Quotation Classes",QuoteClassTClass,modCRM);
  end;
  Setting("Text Types",TextTypeLClass,modCRM);
  Setting("Units",UnitLClass,modCRM);
  if (HasLocalization("PRT") or HasLocalization("BRA")) then begin
    Setting("User Defined Fields - Contacts",CUUserLabelTClass,modCRM);
  end;
  Maintenance("Rebuild Number Recognition Register",NormPhoneNumVClass,NormPhoneNumMn,modCRM);
  Maintenance("System Message",SysMessVClass,SysMessMn,modCRM); // Must have ONE, otherwise it crashes.... goes for all these types...

/* modDI */
  
  RegisterWS("Items","Items","New Item",INVc,modDI);
  RegisterWS("Item Formulae","Item Formulae","New Item Formulae",CPMVc,modDI);
  RegisterWS("Discount Matrices","Discount Matrices","New Discount Matrix",RebVc,modDI);
//  RegisterWS("Multi-buy Discounts","Multi-buy Discounts","New Multi-buy Discount",MultiBuyRebVc,modDI);  
  RegisterWS("Prices","Prices","New Price",PLVc,modDI);
  RegisterWS("Price Lists","Price Lists","New Price List",PLDefVc,modDI);
  RegisterWS("Price Formulae","Price Formulae","New Price Formulae",PFormVc,modDI);
  RegisterWS("Quantity Dependent Discounts","Qty Depend. Discounts","New Qty Depend. Discount",StaffVc,modDI);

  Report("Discount Matrices List",RebListRClass,RebListRn,0,modDI);
  Report("Discount Statistics",Cust2STRClass,Cust2STRn,0,modDI);
  Report("Item List",ArtRClass,ArtRn,0,modDI);
  Report("Price List",PriceRClass,PriceRn,0,modDI);

  if (HasLocalization("DEN")) then begin
    Import("Item Prices import",INDanIn,INDanIn,modDI);
  end;
  Import("Update Cost Prices import",INPrUpdIn,INPrUpdIn,modDI);

  Setting("Qty Dependent Prices",PLQLClass,modDI);
  if (HasItemGroups) then begin
    Setting("Item Groups",ITLClass,modDI);
  end;

  Maintenance("Calculate Prices",CalcPricesVClass,CalcPriceListsMn,modDI);
  Maintenance("Delete Prices",DelPriceListVClass,DelPriceLMn,modDI);
  Maintenance("Update Item Base Prices",ItemPricesVClass,ItemPricesMn,modDI);
  Maintenance("Update Item Cost Prices",ItemCostPricesVClass,INCostPriceMn,modDI);

  end;
  return;
end;
