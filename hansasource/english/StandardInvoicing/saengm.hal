/* sasengm.hal */
/* Standard Accounts by HansaWorld */
external function Boolean HasDeveloperMode();
external function Boolean HasPersons();
external function Boolean HasETaxDocuments();
external function Boolean HasModQT();
external function Boolean HasSerialNumbers();
external function Boolean HasModAT2();
external function Boolean HasModCL();
external function Boolean HasStandardCRM();
external function Boolean HasModExp();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();
external function Boolean HasModSO();
external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModSL();
external function Boolean HasModPL();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModRest();
external function Boolean HasModCRM();
external function Boolean HasPayroll();
external function Boolean HasEMail();

external function Boolean HasAdvancedPricing();
external function Boolean HasBase2();
external function Boolean HasCategories();
external function Boolean HasContactClassification();
external function Boolean HasFiscalPrinter();
external function Boolean HasFormEditor();
external function Boolean HasIncomeAndExpenseBook();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLocalMachines();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNumberSeries();
external function Boolean HasOfficialSerNr();
external function Boolean HasObjects();
external function Boolean HasPriceLists();
external function Boolean HasVarieties();
external procedure LoadWindowTags();
external procedure SetProductTags();

begin
  Real h,v,l,vs;
  
  SetLangMode(LangEnglish,"ENG",2);
  
  // this is for when it's a hardcoded list of options
  // we'll get some better solution for that later, but for now we
  // need one product folder per set of default options

  if (BuildProductCode=="StandardInvoicing") then begin

  if (HasLocalization("HRV,SRB")) then begin
    UseActivationCodes(true);
  end;
  
  SetProductTags;
  LoadWindowTags;
  
  if (HasModSL) then begin
    Module("Invoicing","",730,modSL);
  end;
  if (HasModSL or HasModIN or HasModSO or HasModRest or HasModQT or HasModPO or HasPayroll or HasModPL or HasModPOS or HasModNL or HasIncomeAndExpenseBook or HasModCL or HasStandardCRM) then begin
    Module("System","",730,modSY);
  end;

  // debug
  if (HasDeveloperMode) then begin
    Setting("Cloud Services",EnabServerTClass,modSY);
    Setting("Configuration",ModulesTClass,modSY);
    Setting("Current License Flags",CurLicensesClass,modSY);
    Setting("Internet Enablers",InternetEnablerTClass,modSY);
    Setting("Licenses",LicensesLClass,modSY);
    Register("Mailboxes","Mailboxes",ConferenceWClass,modSY);
    Setting("My IP Address",MyIPAddrTClass,modSY);
    Setting("Program Mode",ProgramStatusTClass,modSY);
    Setting("Services Cache",ServiceCacheLClass,modSY);
    Setting("Std Registration Data",StdRegDataWClass,modSY);
    Setting("Legal SerNo's",OffSerNrLClass,modSY);
    Setting("User Feature Pref",UserFeaturePrefTClass,modSY);    
  end;
  // end debug code
  
/* modSL */
  
  Register("Invoices","Invoices",IVVc,modSL);
  Register("Receipts","Receipts",IPVc,modSL);
  Register("Contacts","Contacts",CUVc,modSL);
  Register("Items","Items",INVc,modSL);
  if (HasModNL==false and HasIncomeAndExpenseBook==false) then begin
    Setting("Invoice Settings",AccTClass,modSL);
  end;
  Setting("Payment Modes",PMTClass,modSL);
  Setting("Payment Terms",PDLClass,modSL);
  Setting("Sales Invoice Settings",IVTTClass,modSL);    
  Setting("Units",UnitLClass,modSL);
  Setting("#VAT# Codes",VATCodeTClass,modSL); 


  if (HasLocalization("RUS")==false) then begin
    Document("Cash Notes",KIVRClass,CashInvForm,CashFClass,modSL);
  end;
  
  Document("#Credit Notes#",CIVRClass,CredInvForm,CredFClass,modSL);  
  Document("Invoices",IVRClass,InvForm,InvFClass,modSL); 
  Document("Open Invoice Customer Statement",ARSRClass,ARSForm,ARSFClass,modSL);
  Document("Periodic Customer Statement",CuPerRClass,CuPerForm,CuPerFClass,modSL);
  Document("Receipt Forms",IPDRClass,IPDForm,IPDFClass,modSL);

  Report("Contact List",CURClass,CustRn,0,modSL);
  Report("Customer/Item Statistics",CuArtSTRClass,CuArtSTRn,0,modSL);
  Report("Customer Statistics",CustSTRClass,CustSTRn,0,modSL);
  Report("GP, Invoices",IVGPRClass,IVGPRn,0,modSL);
  Report("Invoice Journal",IVJRClass,InvoiceRn,0,modSL);
  Report("Item List",ArtRClass,ArtRn,0,modSL);
  Report("Item Statistics",ArtSTRClass,ArtSTRn,0,modSL);
  Report("Open Invoice Customer Statement",ARS2RClass,ARS2Rn,0,modSL);
  Report("Periodic Customer Statement",CuPer2RClass,CuPerRn,0,modSL);
  Report("Receipts Forecast",IPProgRClass,IPProgRn,0,modSL);
  Report("Receipt Journal",IPRClass,IPRn,0,modSL);
  Report("#Sales Ledger#",ARRClass,ARRn,0,modSL);
  Report("#VAT# Report Sales",SLVATRepRClass,SLVATRepRn,0,modSL);
  

  
/* modPL */

  Register("#Purchase Invoices#","#Purchase Invoices#",VIVc,modPL);
  Register("Payments","Payments",OPVc,modPL);
  Register("Contacts","Contacts",CUVc,modPL);

  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Setting("Account Usage #P/L#",APAccTClass,modPL);
  end;
  if (HasLocalization("AUS,ESP,FIN,GBR,NOR,SWE")) then begin
    Setting("#Bank Files#",BankFileTClass,modPL);
  end;
  if (HasNumberSeries) then begin
    Setting("Number Series - #Purchase Invoices#",VISerTClass,modPL);
    Setting("Number Series - Payments",OPSerTClass,modPL);
    if (HasModNL or HasIncomeAndExpenseBook) and (HasLocalization("POL,HRV")) then begin
      Setting("Number Series - #VAT# Corrections #P/L#",VATVISerTClass,modPL);
    end;
  end;
  Setting("Payment Modes",PMTClass,modPL);
  Setting("Payment Terms",PDLClass,modPL);
  if (HasCategories) then begin
    Setting("#Supplier# Categories",VGLClass,modPL);
  end;
  if (HasModNL or HasIncomeAndExpenseBook) and (HasLocalization("POL,HRV")) then begin
    Setting("#VAT# Corrections #P/L#",VATVILClass,modPL);
    Setting("#VAT# Correction #P/L# Types",VATVITypeTClass,modPL);
  end;
  if (HasLocalization("PRT,ITA")) then begin
    Setting("Withholding Calculation Formulae",WHCalcFormLClass,modPL);
    Setting("Withholding Taxes",WHTaxTClass,modPL);
  end;  
  if (HasLocalization("ESP,FIN,RUS")) then begin
    Setting("Banks",BankLClass,modPL);
  end;
  
  if (HasLocalization("LTU,POL")) then begin
    Document("Open Invoice #Supplier# Statement",APSRClass,APSForm,APSFClass,modPL);
  end;
  Document("Payment Forms",OPDRClass,OPDForm,OPDFClass,modPL);
  Document("Payment Lists",OPRClass,OPForm,0,modPL);
  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Document("#Purchase Invoices#",VIRClass,VIForm,VIFClass,modPL);
  end;

  if (HasLocalization("LTU")) then begin
    Report("Open Invoice #Supplier# Statement",APS2RClass,APS2Rn,0,modPL);
  end;
  Report("Payments Forecast",OPProgRClass,OPProgRn,0,modPL);
  Report("Payment Journal",OPJRClass,OPJRn,0,modPL);
  Report("Periodic #Supplier# Statement",VePer2RClass,VePerRn,0,modPL);
  if (HasLocalization("LVA")) then begin
    Report("Prepayment History #P/L#",PerPayHisPLRClass,PerPayHisPLRn,0,modPL);
  end;
  Report("#Purchase Invoice# Journal",VIJRClass,VIJRn,0,modPL);
  Report("#Purchase Ledger#",APRClass,APRn,0,modPL);
  Report("#Supplier# List",VERClass,VERn,0,modPL);
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("LVA,POL")) and (HasModNL or HasIncomeAndExpenseBook) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# #Supplier# Purchases",RealSuppRClass,RealSuppRn,0,modPL); 
  end;
  if (HasLocalization("HND")) then begin
    Report("#VAT# Report Purchases (Honduras)",PLVATHonRClass,PLVATHonRn,0,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Report("#VAT# Report Purchases (Lithuania)",PLVATLitRClass,PLVATLitRn,0,modPL);
  end;
  
  if (HasLocalization("AUS,ESP,FIN,GBR,NOR,SWE")) then begin
    Export("Banking File",MPEClass,MPEn,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#P/L# #VAT# Invoices (Lithuania)",LitVATRegVIEClass,LitVATRegVIEn,modPL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#P/L# Latvian #VAT# Report",PLVAT1ExpEClass,PLVAT1En,modPL);
    Export("#VAT# Purchases (Latvia)",LatVATPurchasesEClass,LatVATPurchasesEn,modPL);
  end;
    
  if (HasModNL) and (HasLocalization("HRV")) then begin
    Maintenance("Create #VAT# Corrections #P/L#",VATVIVClass,VATVIMn,modPL);
  end;

/* modNL */
  
  if (HasModNL==false) then begin
    if (HasIncomeAndExpenseBook) then begin
      Register("Accounts","Accounts",AccVc,modNL);
      Register("#Transactions#","#Transactions#",TRVc,modNL);

      Setting("Fiscal Years",YearTClass,modNL);
      Setting("Income & Expense Book",IncExpBookLClass,modNL);
      if (HasNumberSeries) then begin
        Setting("Number Series - Transactions",TRSerTClass,modNL);
      end;
      Setting("Sub Systems",TRGenTClass,modNL);
      Setting("#VAT# Codes",VATCodeTClass,modNL);
      
      Report("Income & Expense Book",IncExpBookRClass,IncExpBookRn,0,modNL);
    end;
  end else begin
    Register("Transactions","Transactions",TRVc,modNL);
    if (HasLocalization("AGO,PRT")) then begin
      Register("Simulations","Simulations",SMVc,modNL);  
    end;
    
    if (HasLocalization("AUS")) then begin
      Register("Account Reconciliation","Account Reconciliation",BankRecWClass,modNL);
    end;
    if (HasLocalization("AUS")==false) then begin
      Register("Brought Forward Balances","Brought Fwd Balances",FBVc,modNL);
    end;
    Register("Accounts","Accounts",AccVc,modNL);


    if (HasLocalization("AGO,POL,PRT")) then begin
      Setting("Account Transfers",AccTransLClass,modNL);
    end;
    Setting("Fiscal Years",YearTClass,modNL);
    if (HasIncomeAndExpenseBook) then begin
      Setting("Income & Expense Book",IncExpBookLClass,modNL);
    end;
    if (HasNumberSeries) then begin
      Setting("Number Series - Transactions",TRSerTClass,modNL);
    end;
    if (HasObjects) then begin
      Setting("Tags/Objects",ObjLClass,modNL);
      Setting("Tag/Object Types",OTLClass,modNL);
    end;
//    if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
//      Setting("Rate Gain/Loss",NLRateTClass,modNL);
//    end;
    Setting("Report Settings",Rs2WClass,modNL);
    Setting("Sub Systems",TRGenTClass,modNL);
    Setting("Sub-ledger Control Accounts",SLAccTClass,modNL);
    if (HasLocalization("HRV,LVA")) then begin
      Setting("Tax Reports",TaxRepLClass,modNL);
    end;
    if (HasLocalization("BRA,HRV,LVA")) then begin
      Setting("Tax Rules",TaxRulesLClass,modNL);
      Setting("Tax Templates",TaxTemplateLClass,modNL);
      Setting("Transaction Settings",TrTClass,modNL);
    end;
    if (HasLocalization("KEN")) then begin
      Setting("Tax Templates",TaxTemplateLClass,modNL);
    end;
    Setting("#VAT# Codes",VATCodeTClass,modNL);
  
    if (HasLocalization("HRV,LVA")) then begin
      Document("Tax Report",TaxDocRClass,TaxRepForm,TaxRepFClass,modNL);
    end;
    Document("Transactions",TRRClass,TRForm,TRFClass,modNL);

    if (HasLocalization("AUS")) then begin
      Report("Account Reconciliation",ACReconRClass,ACRecRn,0,modNL);
    end;

    if (HasLocalization("AGO,BRA,POL,PRT")) then begin
      Report("Analytical Balance",MBARClass,MBARn,0,modNL);
    end;
    Report("Balance Sheet",BalRClass,BalRn,UserDefRepDClass,modNL);
    Report("Chart of Accounts",AccListRClass,AccListRn,0,modNL);
    Report("Correction List",CorrRClass,CorrRn,0,modNL);
    if (HasLocalization("LTU,LVA")) then begin
      Report("Corresponding Accounts",CorspRClass,CorspRn,0,modNL);
    end;
    if (HasMultiCurrency) then begin
      Report("Currency A/C Rate Change",NLRateRClass,NLRateRn,0,modNL);
    end;
    if (HasIncomeAndExpenseBook) then begin
      Report("Income & Expense Book",IncExpBookRClass,IncExpBookRn,0,modNL);
    end;
    if (HasMultiCurrency) then begin
      Report("Multicurrency Accounts Rate Difference",MultiCurAccRClass,MultiCurAccRn,0,modNL);
    end;
    Report("#Nominal Ledger#",MainRClass,MainRn,0,modNL);
    Report("Profit & Loss",ResRClass,ResRn,UserDefRepDClass,modNL);
    if (HasLocalization("LVA")) then begin
      Report("Tax Calculations", Tax100Class,Tax100Rn,0,modNL);
      Report("Test Corresponding Rules",CorstRClass,CorstRn,0,modNL);
    end;
    Report("Transaction Journal",TransRClass,TransRn,0,modNL);
    Report("Trial Balance",SBRClass,TrialRn,0,modNL);
    if (HasLocalization("POL,PRT")==false) then begin
      Report("#VAT# Listing",ALLVATRClass,ALLVATRn,0,modNL);
    end;
    if (HasLocalization("POL")==false) then begin
      Report("#VAT# Report",VATRClass,VAT2Rn,UserDefRepDClass,modNL);
    end;

    if (HasLocalization("FRA")) then begin
      Export("FEC Export",FrenchFECEClass,FrenchFECEn,modNL);
    end;
    if (HasLocalization("SGP")) then begin
      Export("IRAS audit File",GenIRASEClass,IRASAuditEn,modNL);
    end;
    Export("Monthly Balances",MBEClass,MBEn,modNL);
    if (HasLocalization("SWE")) then begin
      Export("SIE (Swedish Export/Import)",SieEClass,SieEn,modNL);
    end;
    Export("Trial Balance",SBEClass,SBEn,modNL);
    if (HasLocalization("PRT")) then begin
      Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modNL);
    end;  
  if (HasLocalization("LTU")) then begin
    Export("#VAT# Periodic Declaration (Lithuania)",LTUVATEClass,LTUVATEn,modNL);
  end;
  
    if (HasLocalization("SWE")) then begin
      Import("SIE (Swedish Export/Import)",0,SieIn,modNL);
    end;
    
    if (HasLocalization("AGO,POL,PRT")) then begin
      Maintenance("Account Balance Transfer",AccTransVClass,AccTransMn,modNL);
    end;
  end;
        
/* modSY */

  if ((ClientMode and LicenseMode==kLicenseModeServer) or HasPersons or HasDeveloperMode) then begin
    Register("Persons","Persons",UserVc,modSY);
  end;


  if (HasDeveloperMode) then begin
    Setting("E-Learning URL Cache",UniversityURLCacheLClass,modSY);  
    Setting("E-Learning URL Cache (TX)",UniversityURLTXCacheLClass,modSY);
    Setting("Internet Services Server IP",EnabServerTClass,modSY);
    Setting("Services Cache",ServiceCacheLClass,modSY);
  end;

  if (LicenseMode==kLicenseModeServer or ClientMode) then begin
    Setting("Access Groups",AccessLClass,modSY);
  end;
  if (LicenseMode==kLicenseModeServer or ClientMode) then begin
    Setting("Active Users",ListUsersClass,modSY);
  end;
  Setting("Companies",CompaniesTClass,modSY);
  Setting("Company Info",CYWClass,modSY);
  if (LicenseMode==kLicenseModeServer) then begin
    Setting("Configure Users",ConfigureUsersTClass,modSY);
  end;
  Setting("Invoice Settings",AccTClass,modSY);
  Setting("Payment Terms",PDLClass,modSY);

  Setting("Reporting Periods",PeriodTClass,modSY);
  Setting("Units",UnitLClass,modSY);
  Setting("#VAT# Codes",VATCodeTClass,modSY); 
  if (HasLocalization("HRV,SVN,SRB")) then begin
    Setting("XML Schema Definitions",XMLExportLClass,modSY);
  end;
  
  Report("Company Info",CompInfoRClass,CompInfoRn,0,modSY);

  Export("Base Registers",GBaseEClass,GBaseEn,modSY);
  if (GuiType!=kGuiiPhone) then begin  
    Export("Database Text Backup",TBDatabaseEClass,DatabaseTBEn,modSY);
  end;
  //Export("Remote Backup",TBRemoteEClass,RemoteTBEn,modSY);
  Export("Transaction Registers",GTransEClass,GTransEn,modSY);
  Export("Transaction Registers (period)",GTrans2EClass,GTrans2En,modSY);
  
  if (GuiType!=kGuiiPhone) then begin
    Export("Run Timed Backup",TBRunTimedEClass,RunTimedTBEn,modSY);
  end;
  
  Import("Automatic",0,FullyAutIn,modSY);
  Import("Manual file search",0,AutIn,modSY);
  Import("Remote backup",RemoteInIClass,RemoteIn,modSY);
  
//  Maintenance("Restore Application",ResetDBWClass,0,modSY);
  Maintenance("Invoices without Official No.",XMLExportVClass,XMLExportMn,modSY);


  end;
  return;
end;
