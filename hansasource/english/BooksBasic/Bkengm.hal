/* sasengm.hal */
/* Books by HansaWorld */
external function Boolean HasDeveloperMode();
external function Boolean HasETaxDocuments();
external function Boolean HasModQT();
external function Boolean HasSerialNumbers();
external function Boolean HasModAT2();
external function Boolean HasModCL();
external function Boolean HasStandardCRM();
external function Boolean HasModExp();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();
external function Boolean HasModSO();
external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModSL();
external function Boolean HasModPL();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModRest();
external function Boolean HasModCRM();
external function Boolean HasPayroll();

external function Boolean HasAdvancedPricing();
external function Boolean HasBase2();
external function Boolean HasContactClassification();
external function Boolean HasFormEditor();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLocalMachines();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNumberSeries();
external function Boolean HasOfficialSerNr();
external function Boolean HasObjects();
external function Boolean HasPriceLists();
external function Boolean HasVarieties();
external procedure SetProductTags();
external procedure LoadWindowTags();

begin
  Real h,v,l,vs;
  
  SetLangMode(LangEnglish,"ENG",2);
  
  // this is for when it's a hardcoded list of options
  // we'll get some better solution for that later, but for now we
  // need one product folder per set of default options

  SetProductTags;
  LoadWindowTags;
  
  if (HasStandardCRM) then begin
    Module("CRM","",730,modCRM);  
    Module("Calendar","",730,modCAL);  
    Module("Task Manager","",730,modTASK);
  end;
  if (HasModCL) then begin
    Module("Cash Book","",730,modCL);
  end;
  if (HasStandardCommunicator and HasStandardCRM==false and HasStandardOrganizer==false) then begin 
    Module("Communicator","",730,modCRM);
  end;
  if (HasModNL) then begin
    Module("#Nominal Ledger#","",730,modNL);
  end;
  if (HasStandardOrganizer and HasStandardCRM==false) then begin 
    Module("Organizer","",730,modCRM);
  end;
  if (HasModPOS) then begin
    Module("Point of Sales","",730,modPOS);  
  end;
  if (HasModPL) then begin
    Module("#Purchase Ledger#","",730,modPL);  
  end;
  if (HasModPO) then begin
    Module("#Purchase Orders#","",730,modPO);
  end;
  if (HasModQT) then begin
    Module("Quotations","",730,modQT);
  end;  
  if (HasModRest) then begin
    Module("#Restaurant#","",730,modRest);  
  end;
  if (HasModSL) then begin
    Module("#Sales Ledger#","",730,modSL);
  end;
  if (HasModSO) then begin
    Module("Sales Orders","",730,modSO);
  end;
  if (HasModIN) then begin
    Module("#Stock#","",730,modIN);
  end;
  if (HasModSL==false) then begin
    Module("Invoicing","",730,modSY);
  end else begin
    Module("System","",730,modSY);
  end;
  Module("Technics","",730,modTC);
  Module("User Settings","",730,modUserSet);
  
  // debug
  if (HasDeveloperMode) then begin
    Setting("Cloud Services",EnabServerTClass,modSY);
    Setting("Configuration",ModulesTClass,modSY);
    Setting("Current License Flags",CurLicensesClass,modSY);
    Setting("Internet Enablers",InternetEnablerTClass,modSY);
    Setting("Licenses",LicensesLClass,modSY);
    Register("Mailboxes","Mailboxes",ConferenceWClass,modSY);
    Setting("Services Cache",ServiceCacheLClass,modSY);
    Setting("Std Registration Data",StdRegDataWClass,modSY);
  end;
  // end debug code
  
/* modSL */
  
  Register("Invoices","Invoices",IVVc,modSL);
  Register("Receipts","Receipts",IPVc,modSL);
  Register("Contacts","Contacts",CUVc,modSL);
  Register("Items","Items",INVc,modSL);
  if (HasPriceLists) then begin
    Register("Prices","Prices",PLVc,modSL);
  end;
  if (HasLocalization("RUS")) then begin
    Register("Sales Orders","Sales Orders",ORVc,modSL);
  end;
  
  if (HasModNL) then begin
    Setting("Account Usage #S/L#",AccTClass,modSL);
  end;
  if (HasLocalization("FIN,RUS")) then begin
    Setting("Banks",BankLClass,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Setting("Cloud Services Settings",EInvoiceTClass,modSL);
  end;
  if (HasContactClassification) then begin
    Setting("Contact Classifications",CClassLClass,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Setting("Credit Limit",CreditLimitTClass,modSL);
  end;
  Setting("Customer Categories",CCatLClass,modSL);
  if (HasLocalization("FIN")) then begin
    Setting("Electronic Invoices Customers Data",EInvCULClass,modSL);
    Setting("Electronic Invoices Queue",EInvoiceQueLClass,modSL);
    Setting("Electronic Record Statuses",ERecordStatusLClass,modSL);
    Setting("Info in Customer Status Report",CustPSLClass,modSL);
  end;

  if (HasModNL and HasModPL and HasMultiCurrency) then begin
    Setting("Internal Invoices",IntIVLClass,modSL);
  end;

  if (HasModNL==false) then begin
    Setting("Invoice Settings",AccTClass,modSL);
  end;
  if (HasItemGroups or HasLocalization("ITA,PRT")) then begin
    Setting("Item Groups",ITLClass,modSL);
  end;
  if (HasModSL and HasLocalization("ITA,PRT")) then begin
    Setting("Item Group Withholdings",WHITLClass,modSL);
  end;
  if (HasNumberSeries or HasLocalization("LVA")) then begin
    Setting("Legal Invoice Numbers",LegalInvNrTClass,modSL);
  end;  
  if (HasNumberSeries) then begin
    Setting("Number Series - Invoices",IVSerTClass,modSL);
    Setting("Number Series - Receipts",IPSerTClass,modSL);
    if (HasModNL) and (HasLocalization("POL,HRV")) then begin
      Setting("Number Series - #VAT# Corrections #S/L#",VATIVSerTClass,modSL);
    end;
  end;
  Setting("Payment Modes",PMTClass,modSL);
  Setting("Payment Terms",PDLClass,modSL);
  if (HasPriceLists) then begin
    Setting("Price Lists",PLDefLClass,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Setting("Reference Number Settings",CalcRefTClass,modSL);
    Setting("Reminders Texts",RMLClass,modSL);
  end;
  if (HasModNL==false) then begin
    if (HasLocalization("BRA,HRV")) then begin
      Setting("Tax Templates",TaxTemplateLClass,modSL);
      Setting("Transaction Settings",TrTClass,modSL);
    end;
  end;
  Setting("Units",UnitLClass,modSL);
  if (HasLocalization("POL,HRV")) and (HasModNL) then begin
    Setting("#VAT# Corrections #S/L#",VATIVLClass,modSL);
    Setting("#VAT# Correction #S/L# Types",VATIVTypeTClass,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Setting("#VAT# Codes",VATCodeTClass,modSL); 
  end;  
  if (HasLocalization("PRT,ITA") and (HasModPL or HasModSL)) then begin
    Setting("Withholding Calculation Formulae",WHCalcFormLClass,modSL);
    Setting("Withholding Taxes",WHTaxTClass,modSL);
  end;    

  Document("Cash Notes",KIVRClass,CashInvForm,CashFClass,modSL);
  Document("#Credit Notes#",CIVRClass,CredInvForm,CredFClass,modSL);
  Document("Customer Labels",CuLabRClass,CuLabForm,CuLabFClass,modSL);
  if (HasLocalization("POL")) then begin
    Document("Debtors Letter",DebtLetRClass,DebtorLetForm,DebtLetFClass,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Document("Interest Invoices",IIVRClass,IIInvForm,IIFClass,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Document("Intrastat #S/L#",IntraStaRClass,InStaForm,InStaFClass,modSL);
  end;
  Document("Invoices",IVRClass,InvForm,InvFClass,modSL); 
  Document("Open Invoice Customer Statement",ARSRClass,ARSForm,ARSFClass,modSL);
  Document("Periodic Customer Statement",CuPerRClass,CuPerForm,CuPerFClass,modSL);
  if (HasLocalization("POL")) then begin
    Document("Proforma Invoices",Inv1RClass,Inv1Form,Inv1FClass,modSL);
  end;
  Document("Receipt Forms",IPDRClass,IPDForm,IPDFClass,modSL);
  if (HasLocalization("LVA,FIN,POL")) then begin
    Document("Reminders",RemRClass,RemForm,RemFClass,modSL);
  end;
  if (HasLocalization("RUS")) then begin
    Document("Orders",ORRClass,OrdForm,OrdFClass,modSL);
  end;

  if (HasLocalization("FIN")) then begin
    Report("Bonus, #Salesman#",BonusRClass,BonusRn,0,modSL);
  end;
  Report("Contact List",CURClass,CustRn,0,modSL);
  Report("Customer/Item Statistics",CuArtSTRClass,CuArtSTRn,0,modSL);
  Report("Customer Statistics",CustSTRClass,CustSTRn,0,modSL);
  if (HasLocalization("FIN")) then begin
    Report("Electronic Invoice Status",HTSStatIVRClass,HTSStatIVRn,0,modSL);
  end;
  if (HasLocalization("LVA")) then begin
    Report("EU #VAT# Sales",SLEUVATRClass,SLEUVATRn,0,modSL);
  end;
//  Report("Electronic Invoice Status",HTSStatIVRClass,HTSStatIVRn,0,modSL);
  if (HasLocalization("HRV")) then begin
    Report("GP, Invoices",IVGPRClass,IVGPRn,0,modSL);
  end;
  Report("Invoice Journal",IVJRClass,InvoiceRn,0,modSL);
  Report("Item List",ArtRClass,ArtRn,0,modSL);
  Report("Item Statistics",ArtSTRClass,ArtSTRn,0,modSL);
  if (HasLocalization("LVA")) then begin
    Report("Legal Invoice Forms Usage",LegInvFormRClass,LegInvFormRn,0,modSL);
  end;
  Report("Open Invoice Customer Statement",ARS2RClass,ARS2Rn,0,modSL);
  if (HasLocalization("RUS")) then begin
    Report("Order Journal",ORJRClass,OrdRn,0,modSL);
    Report("Order Payment Status",ORPayStatusRClass,ORPayStatusRn,0,modSL);
  end;
  Report("Periodic Customer Statement",CuPer2RClass,CuPerRn,0,modSL);
  if (HasLocalization("LVA")) then begin
    Report("Prepayment History #S/L#",PerPayHisSLRClass,PerPayHisSLRn,0,modSL);
  end;
  if (HasPriceLists) then begin
    Report("Price List",PriceRClass,PriceRn,0,modSL);
  end;
  Report("Receipts Forecast",IPProgRClass,IPProgRn,0,modSL);
  if (HasLocalization("FIN")) then begin
    Report("Receipt History",CUPayHistoryRClass,CUPayHistoryRn,0,modSL);
  end;
  Report("Receipt Journal",IPRClass,IPRn,0,modSL);
  Report("#Sales Ledger#",ARRClass,ARRn,0,modSL);
  if (HasLocalization("PRT")) then begin
    Report("#VAT Code# Statistics",SLVATRClass,SLVATRn,0,modSL);
  end;
  if (HasLocalization("LVA")) then begin
    Report("#VAT# Declaration Annex, #VAT#-2 (Latvia)",LATEUSalesRClass,LATEUSalesRn,0,modSL);
  end;  
  if (HasLocalization("POL")) and (HasModNL) then begin
    Report("#VAT# Report Sales",SLVATRepRClass,SLVATRepRn,0,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Report("#VAT# Report Sales (Lithuania)",SLVATLitRClass,SLVATLitRn,0,modSL);  
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Customer Sales",RealCustRClass,RealCustRn,0,modSL);
  end;
  
  if (HasModNL) then begin
    if (HasLocalization("PRT")) then begin
      Maintenance("Transfer to Bad Debtors",BadCUVClass,BadCUMn,modSL);
    end;
  end;
  if (HasModNL) and (HasLocalization("HRV")) then begin
    Maintenance("Create #VAT# Corrections #S/L#",VATIVVClass,VATIVMn,modSL);
  end;

  if (HasLocalization("FIN")) then begin
    Export("Customer Statistics",CustSTEClass,CustSTEn,modSL);
    Export("Customer/Item Statistics",ICSEClass,ICSEn,modSL);
  end;

  if (HasLocalization("LVA")) then begin
    Export("EU Sales Export (Latvia)",LatEUSalesEClass,LatEUSalesEn,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Export("Finvoice",FInvoiceEClass,FInvoiceEn,modSL);
  end;
  if (HasLocalization("BRA")) then begin
    Export("Fiscal Note for Services",BraFiscalNoteEClass,BraFiscalNoteEn,modSL); 
  end;
  if (HasLocalization("FIN")) then begin
    Export("Invoices for Factoring",InvFactEClass,InvFactEn,modSL);
    Export("Item Statistics",ArtSTEClass,ArtSTEn,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#S/L# #VAT# Invoices (Lithuania)",LitVATRegIVEClass,LitVATRegIVEn,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modSL);
    Export("Communication of Invoices to AT - SAFT",PortTaxXml2EClass,PortTaxXml2En,modSL);    
  end;  
  if (HasLocalization("LVA")) then begin
    Export("#VAT# Declaration Annex #VAT#1-III (Latvia)",LatVATSalesEClass,LatVATSalesEn,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Export("Finvoice",FInvoiceEClass,FInvoiceEn,modSL);
  end;
  
  if (HasLocalization("FIN,LVA")) then begin
    Import("Banking File",RefIPIn,RefIPIn,modSL);
  end;
  
/* modPL */

  Register("#Purchase Invoices#","#Purchase Invoices#",VIVc,modPL);
  Register("Payments","Payments",OPVc,modPL);
  Register("Contacts","Contacts",CUVc,modPL);
  if (HasLocalization("FIN")) then begin
    Register("E-#Purchase Invoices#","E-#Purchase Invoices#",VEIVVc,modPL);
  end;

  if (HasModNL) then begin
    Setting("Account Usage #P/L#",APAccTClass,modPL);
  end;
  if (HasLocalization("FIN,LVA,RUS")) then begin
    Setting("Banks",BankLClass,modPL);
  end;
  if (HasLocalization("FIN")) then begin
    Setting("Bank Transfer",BankFileTClass,modPL);
  end;
  //Setting("#Bank Files#",BankFileTClass,modPL); // Local functionality
  if (HasNumberSeries) then begin
    Setting("Number Series - #Purchase Invoices#",VISerTClass,modPL);
    Setting("Number Series - Payments",OPSerTClass,modPL);
    if (HasModNL) and (HasLocalization("POL,HRV")) then begin
      Setting("Number Series - #VAT# Corrections #P/L#",VATVISerTClass,modPL);
    end;
  end;
  Setting("Payment Modes",PMTClass,modPL);
  Setting("Payment Terms",PDLClass,modPL);
  if (HasLocalization("FIN")) then begin
    Setting("#Purchase Invoice# Settings",VITTClass,modPL);
  end;
  Setting("#Supplier# Categories",VGLClass,modPL);
  if (HasModNL) and (HasLocalization("POL,HRV")) then begin
    Setting("#VAT# Corrections #P/L#",VATVILClass,modPL);
    Setting("#VAT# Correction #P/L# Types",VATVITypeTClass,modPL);
  end;
  if (HasLocalization("PRT,ITA")) then begin
    Setting("Withholding Calculation Formulae",WHCalcFormLClass,modPL);
    Setting("Withholding Taxes",WHTaxTClass,modPL);
  end;    
  if (HasLocalization("LTU,POL")) then begin
    Document("Open Invoice #Supplier# Statement",APSRClass,APSForm,APSFClass,modPL);
  end;
  Document("Payment Forms",OPDRClass,OPDForm,OPDFClass,modPL);
  Document("Payment Lists",OPRClass,OPForm,0,modPL);
  if (HasModNL) then begin
    Document("#Purchase Invoices#",VIRClass,VIForm,VIFClass,modPL);
  end;

  if (HasLocalization("LTU")) then begin
    Report("Open Invoice #Supplier# Statement",APS2RClass,APS2Rn,0,modPL);
  end;
  Report("Payments Forecast",OPProgRClass,OPProgRn,0,modPL);
  Report("Payment Journal",OPJRClass,OPJRn,0,modPL);
  if (HasLocalization("FIN")) then begin
    Report("#P/L# #VAT Code# Statistics",PLVATRClass,PLVATRn,0,modPL);
  end;
  if (HasLocalization("LVA")) then begin
    Report("#P/L# #VAT# Report",PLVAT2RClass,PLVAT2Rn,0,modPL);
  end;  
  Report("Periodic #Supplier# Statement",VePer2RClass,VePerRn,0,modPL);
  if (HasLocalization("LVA")) then begin
    Report("Prepayment History #P/L#",PerPayHisPLRClass,PerPayHisPLRn,0,modPL);
  end;
  Report("#Purchase Invoice# Journal",VIJRClass,VIJRn,0,modPL);
  Report("#Purchase Ledger#",APRClass,APRn,0,modPL);
  Report("#Supplier# List",VERClass,VERn,0,modPL);
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("LVA,POL")) and (HasModNL) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# #Supplier# Purchases",RealSuppRClass,RealSuppRn,0,modPL); 
  end;
  if (HasLocalization("LTU")) then begin
    Report("#VAT# Report Purchases (Lithuania)",PLVATLitRClass,PLVATLitRn,0,modPL);
  end;
  
  if (HasLocalization("FIN,LVA")) then begin
    Export("Banking File",MPEClass,MPEn,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#P/L# #VAT# Invoices (Lithuania)",LitVATRegVIEClass,LitVATRegVIEn,modPL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#P/L# Latvian #VAT# Report",PLVAT1ExpEClass,PLVAT1En,modPL);
    Export("#VAT# Purchases (Latvia)",LatVATPurchasesEClass,LatVATPurchasesEn,modPL);
  end;
    
  if (HasModNL) and (HasLocalization("HRV")) then begin
    Maintenance("Create #VAT# Corrections #P/L#",VATVIVClass,VATVIMn,modPL);
  end;

/* modNL */
  
  Register("Transactions","Transactions",TRVc,modNL);
  if (HasLocalization("PRT")) then begin
    Register("Simulations","Simulations",SMVc,modNL);  
  end;
//  Register("Account Reconciliation","Account Reconciliation",BankRecWClass,modNL);
  Register("Brought Forward Balances","Brought Fwd Balances",FBVc,modNL);
  Register("Accounts","Accounts",AccVc,modNL);
  if (HasLocalization("FIN")) then begin
    Register("Account Reconciliation","Account Reconciliation",BankRecWClass,modNL);
  end;


  if (HasLocalization("POL,PRT")) then begin
    Setting("Account Transfers",AccTransLClass,modNL);
  end;
  if (HasLocalization("FIN")) then begin
    Setting("Autotransactions",AutLClass,modNL);
  end;
  Setting("Fiscal Years",YearTClass,modNL);
  if (HasNumberSeries) then begin
    Setting("Number Series - Transactions",TRSerTClass,modNL);
  end;
  if (HasObjects) then begin
    Setting("Tags/Objects",ObjLClass,modNL);
    Setting("Tag/Object Types",OTLClass,modNL);
  end;
  if (HasLocalization("FIN")) then begin
    Setting("Presentation of Balances",AGrTClass,modNL);
  end;
  if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
    Setting("Rate Gain/Loss",NLRateTClass,modNL);
  end;
  Setting("Report Settings",Rs2WClass,modNL);
  Setting("Sub Systems",TRGenTClass,modNL);
  Setting("Sub-ledger Control Accounts",SLAccTClass,modNL);
  if (HasLocalization("HRV,LVA")) then begin
    Setting("Tax Reports",TaxRepLClass,modNL);
  end;
  if (HasLocalization("LVA")) then begin
    Setting("Tax Rules",TaxRulesLClass,modNL);
  end;
  if (HasLocalization("BRA,HRV")) then begin
    Setting("Tax Templates",TaxTemplateLClass,modNL);
  end;
  if (HasLocalization("BRA,HRV,FIN")) then begin
    Setting("Transaction Settings",TrTClass,modNL);
  end;
  Setting("#VAT# Codes",VATCodeTClass,modNL);
  
  if (HasLocalization("HRV,LVA")) then begin
    Document("Tax Report",TaxDocRClass,TaxRepForm,TaxRepFClass,modNL);
  end;
  Document("Transactions",TRRClass,TRForm,TRFClass,modNL);

//  Report("Account Reconciliation",ACReconRClass,ACRecRn,0,modNL);

  if (HasLocalization("FIN")) then begin
    Report("Account Reconciliation",ACReconRClass,ACRecRn,0,modNL);
  end;
  if (HasLocalization("POL,PRT")) then begin
    Report("Analytical Balance",MBARClass,MBARn,0,modNL);
  end;
  Report("Balance Sheet",BalRClass,BalRn,UserDefRepDClass,modNL);
  Report("Chart of Accounts",AccListRClass,AccListRn,0,modNL);
  Report("Correction List",CorrRClass,CorrRn,0,modNL);
  if (HasLocalization("LVA")) then begin
    Report("Corresponding Accounts",CorspRClass,CorspRn,0,modNL);
  end;
  if (HasMultiCurrency) then begin
    Report("Currency A/C Rate Change",NLRateRClass,NLRateRn,0,modNL);
  end;
  if (HasLocalization("FIN")) then begin
    Report("Key Financial Ratios",KeyRClass,KeyRn,UserDefRepDClass,modNL);
  end;
  if (HasMultiCurrency) then begin
    Report("Multicurrency Accounts Rate Difference",MultiCurAccRClass,MultiCurAccRn,0,modNL);
  end;
  Report("#Nominal Ledger#",MainRClass,MainRn,0,modNL);
  Report("Profit & Loss",ResRClass,ResRn,UserDefRepDClass,modNL);
  if (HasLocalization("LVA")) then begin
    Report("Tax Calculations", Tax100Class,Tax100Rn,0,modNL);
    Report("Test Corresponding Rules",CorstRClass,CorstRn,0,modNL);
  end;
  Report("Transaction Journal",TransRClass,TransRn,0,modNL);
  Report("Trial Balance",SBRClass,TrialRn,0,modNL);
  if (HasLocalization("POL,PRT")==false) then begin
    Report("#VAT# Listing",ALLVATRClass,ALLVATRn,0,modNL);
  end;
  if (HasLocalization("POL")==false) then begin
    Report("#VAT# Report",VATRClass,VAT2Rn,UserDefRepDClass,modNL);
  end;

  Export("Monthly Balances",MBEClass,MBEn,modNL);
  if (HasLocalization("SWE")) then begin
    Export("SIE (Swedish Export/Import)",SieEClass,SieEn,modNL);
  end;
  Export("Trial Balance",SBEClass,SBEn,modNL);
  if (HasLocalization("PRT")) then begin
    Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modNL);
  end;  
  if (HasLocalization("LVA")) then begin
    Export("#VAT# Annual (Latvia)",LatAnnualVATEClass,LatAnnualVATEn,modNL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#VAT# Periodic (Latvia)",LatPeriodicVATEClass,LatPeriodicVATEn,modNL);
  end;
  
  if (HasLocalization("SWE")) then begin
    Import("SIE (Swedish Export/Import)",0,SieIn,modNL);
  end;
    
  if (HasLocalization("POL,PRT")) then begin
    Maintenance("Account Balance Transfer",AccTransVClass,AccTransMn,modNL);
  end;
        
/* modSY */

  Register("Persons","Persons",UserVc,modSY);
  Register("Companies","Companies",CompaniesTClass,modSY);
  if (HasMultiCurrency or HasBase2) then begin
    Register("Currencies","Currencies",CurncyCodeVc,modSY); 
  end;
  if (HasMultiCurrency) then begin
    Register("Exchange Rates","Exchange Rates",ERVc,modSY);
  end;
  if (HasFormEditor) then begin
    if (GuiType!=kGuiiPhone) then begin
      Register("Forms","Forms",DocVc,modSY);
    end;
    Register("Styles","Styles",StyleVc,modSY);
  end;

  if (HasDeveloperMode) then begin
    Setting("E-Learning URL Cache",UniversityURLCacheLClass,modSY);  
    Setting("E-Learning URL Cache (TX)",UniversityURLTXCacheLClass,modSY);
    Setting("Services Cache",ServiceCacheLClass,modSY);
  end;

  Setting("Access Groups",AccessLClass,modSY);
  if (HasStandardCRM or HasStandardCommunicator or HasStandardOrganizer) then begin
    Setting("Active Users",ListUsersClass,modSY);
  end;
  Setting("Auto Actions",AutoActionTClass,modSY);
  Setting("Base Currency",BaseCurTClass,modSY);
  if (HasBase2) then begin
    Setting("Base Currency Rates",BaseERLClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Brazilian Invoice Types",BrazilEInvTypeLClass,modSY);
  end;
  Setting("Cloud Services",EnabServerTClass,modSY);
  Setting("Companies",CompaniesTClass,modSY);
  Setting("Company Date and Numeric Format",SysFormatTClass,modSY);
  Setting("Company Info",CYWClass,modSY);
  Setting("Configuration",ModulesTClass,modSY);
  if (ClientMode) then begin
    Setting("Configure Users",ConfigureUsersTClass,modSY);
  end;
  Setting("Conversions - Accounts and #VAT Code#",ConvAccTClass,modSY);
  Setting("Conversions - Contacts",ConvCustTClass,modSY);
  if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
    Setting("Conversions - Currency Codes",ConvCurncyCodeTClass,modSY);
  end;
  if (HasModIN) then begin
    Setting("Conversions - Items",ConvItemTClass,modSY);
  end;
  Setting("Conversions - Master",ConvMasterTClass,modSY);
  Setting("Conversions - #Suppliers#",ConvVendTClass,modSY);
  Setting("Conversions - Users",ConvUserTClass,modSY);
  Setting("Database Status",DBERecordsTClass,modSY);
  if (HasLocalization("BRA")) then begin
    Setting("Districts",DistrictLClass,modSY);
  end;
  Setting("Form Settings",FormTClass,modSY);
  Setting("Internet Enablers",InternetEnablerTClass,modSY);
  if (HasKPIs) then begin
    Setting("KPIs",KPIDefLClass,modSY);
  end;
  if (HasLanguages) then begin
    Setting("Languages",LangTClass,modSY); 
  end;
  if (HasModNL) then begin
    Setting("Locking",DBLockTClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Municipalities",MunicipalityLClass,modSY);
  end;
  if (HasObjects and HasModNL==false) then begin
    Setting("Tags/Objects",ObjLClass,modSY);
    Setting("Tag/Object Types",OTLClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Operation Types",OperationTypeLClass,modSY);
  end;
  Setting("Optional Features",UXFTClass,modSY);

  Setting("Reporting Periods",PeriodTClass,modSY);
  Setting("Round Off",RoundTClass,modSY);
  Setting("Sub-ledger Control Accounts",SLAccTClass,modSY);
  Setting("Units",UnitLClass,modSY);
  Setting("User Warnings on UnOKed Records",UserUnOkWarnLClass,modSY);
  //Setting("Values in Text",LangNrLClass,modSY);
  //Setting("Test Function Tags",WindowTagTestClass,modSY);
  if (HasLanguages) then begin
    Setting("Values in Text",LangNrLClass,modSY);
  end;
  if (HasModNL==false) then begin
    Setting("#VAT# Codes",VATCodeTClass,modSY); 
  end;
  if (HasNumberSeries or HasLocalization("LVA")) then begin
    Setting("Legal Invoice Numbers",LegalInvNrTClass,modSY);
  end;  
  if (HasLocalization("PRT")) then begin
    Setting("Item Groups",ITLClass,modSY);
  end;
  if (HasLocalization("HRV,SVN,SRB")) then begin
    Setting("XML Schema Definitions",XMLExportLClass,modSY);
  end;
  
  Report("Company Info",CompInfoRClass,CompInfoRn,0,modSY);
  if (HasMultiCurrency or HasBase2) then begin
    Report("Exchange Rates",ERDateRClass,ERDateRn,0,modSY);
  end;
  Report("System Documentation",SysRClass,SysRn,0,modSY);

  if (HasModSL) then begin
    Export("Base Registers",GBaseEClass,GBaseEn,modSY);
    Export("Company Text Backup",TBEClass,CompanyTBEn,modSY);
    Export("Database Text Backup",TBDatabaseEClass,DatabaseTBEn,modSY);
    //Export("Remote Backup",TBRemoteEClass,RemoteTBEn,modSY);
    if (HasModIN or HasModSL or HasStandardCRM or HasMultiLocations or HasModPL or HasAdvancedPricing) then begin
      Export("Item Base Registers",GItemBaseEClass,GItemBaseEn,modSY);
    end;
    Export("System Data",SysEClass,SysEn,modSY);
    Export("Transaction Registers",GTransEClass,GTransEn,modSY);
    Export("Transaction Registers (period)",GTrans2EClass,GTrans2En,modSY);
  end;
  
  Export("Run Timed Backup",TBRunTimedEClass,RunTimedTBEn,modSY);
  
  Import("Automatic",0,FullyAutIn,modSY);
  Import("Manual file search",0,AutIn,modSY);
  Import("Remote backup",RemoteInIClass,RemoteIn,modSY);

//  if (HasModIN or HasModSL or HasModPL or HasModPOS or HasModAT2 or HasModCL or HasModExp or HasModPO) and (HasModNL) then begin
  if (HasModNL) then begin
    Maintenance("Create #N/L# Transactions",TransGenVClass,GenTransMn,modSY);
  end;
//  Maintenance("Restore Application",ResetDBWClass,0,modSY);
  if (ClientMode) then begin 
    Maintenance("Send Invitation for New User",SubscriptionInvitationVClass,SubscriptionInvitationMn,modSY);
  end;
  if (HasLocalization("HRV")) then begin
    Maintenance("Invoices without Official No.",XMLExportVClass,XMLExportMn,modSY);
  end;

/* modSO */
  
  Register("Orders","Orders",ORVc,modSO);
  Register("Contacts","Contacts",CUVc,modSO);
  Register("Items","Items",INVc,modSO);
  if (HasItemGroups) then begin
    Register("Item Groups","Item Groups",ITVc,modSO);
  end;
  if (HasPriceLists) then begin
    Register("Prices","Prices",PLVc,modSO);
  end;

  if (HasModIN) then begin
    Setting("Delivery Terms",ShipDealLClass,modSO);
  end;
  if (HasModSL) then begin
    Setting("Down Payments",DownPayTClass,modSO);
  end;
  if (HasLocalization("LVA,PRT")) then begin
    Setting("Freight Companies",FreightCompanyLClass,modSO);
  end;
  if (HasNumberSeries) then begin
    Setting("Number Series - Orders",ORSerTClass,modSO);
  end;
  Setting("Payment Terms",PDLClass,modSO);
  Setting("Planned Delivery",PlanDeliveryTClass,modSO);
  Setting("Units",UnitLClass,modSO);
  
  Document("Orders",ORRClass,OrdForm,OrdFClass,modSO);
  
  if (HasModIN) then begin
    Report("Deliverable List",ShipableRClass,ShipableRn,0,modSO);
    Report("Delivery List",DeliveryRClass,DeliveryRn,0,modSO);
  end;
  Report("GP, Orders",ORGPRClass,ORGPRn,0,modSO);
  Report("Item List",ArtRClass,ArtRn,0,modSO);
  Report("Order Journal",ORJRClass,OrdRn,0,modSO);
  Report("Ordered Items",OrdItemRClass,OrdItemRn,0,modSO);
  if (HasModIN) then begin
    Report("Outstanding Orders",OrderStockRClass,OrderStockRn,0,modSO);
  end;
  
/* modIN */
  
  if (HasModSO or HasLocalization("RUS") or HasLocalization("HRV")) then begin
    Register("Deliveries","Deliveries",SHVc,modIN);
  end;
  Register("Goods Receipts","Goods Receipts",PUVc,modIN);
  Register("#Stock Depreciations#","#Stock Depreciations#",SDVc,modIN);
  if (HasLocalization("PRT")) then begin
    Register("Returned Goods","Returned Goods",RetVc,modIN);
    Register("Returned Goods to #Suppliers#","Ret. Goods to #Suppliers#",RetPUVc,modIN);
    Register("#Stocktaking#","#Stocktaking#",StockTakeVc,modIN);
  end else begin
    Register("#Stocktaking#","#Stocktaking#",StockTakeVc,modIN);
    Register("Items","Items",INVc,modIN);
//    Register("Contacts","Contacts",CUVc,modIN);
  end;
  if (HasMultiLocations) then begin 
    Register("Locations","Locations",LocationVc,modIN);
    Register("#Stock# Movements","#Stock# Movements",StockMovVc,modIN);
  end;

  if (HasLocalization("HRV")) then begin 
    Setting("Base Price Changes",BPCLClass,modIN);
  end;
  if (HasModNL) then begin
    Setting("Account Usage #Stock#",INAccTClass,modIN); 
  end;
  if (HasModCRM) then begin
    Setting("Contacts",CULClass,modIN);
  end;
  Setting("Cost Accounting",CostAccTClass,modIN);
  if (HasLocalization("PRT")) then begin 
    if (HasETaxDocuments) then begin
      Setting("Electronic Shipment",EShipPRTTClass,modIN);
    end;
  end;
  if (HasItemGroups) then begin
    Setting("Item Groups",ITLClass,modIN);
  end;
  if (HasLocalization("PRT")) then begin 
    Setting("Items",INLClass,modIN);
  end;
  if (HasVarieties) then begin
    Setting("Item Varieties",VARLClass,modIN);
    Setting("Item Variety Groups",VARGLClass,modIN);
  end;
  if (HasNumberSeries) then begin
    if (HasModSO) then begin
      Setting("Number Series - Deliveries",SHSerTClass,modIN);
    end;
    if (HasNumberSeries and HasLocalization("PRT")) then begin 
      Setting("Number Series - Returned Goods",RetSerTClass,modIN);
      Setting("Number Series - Returned Goods to #Supplier#",RetPUSerTClass,modIN);
    end;
    Setting("Number Series - Goods Receipts",PUSerTClass,modIN);
    Setting("Number Series - #Stock Depreciations#",SDSerTClass,modIN);
    if (HasNumberSeries and HasLocalization("PRT")) then begin 
      if (HasMultiLocations) then begin 
        Setting("Number Series - #Stock# Movements",StockMovSerTClass,modIN);
      end;
    end;
    Setting("Number Series - #Stocktaking#",StockTakeSerTClass,modIN);
  end;
  if (HasLocalization("PRT")) then begin 
    Setting("Optional features",OFTClass,modIN);
  end;
  if (HasMultiLocations) then begin 
    Setting("#Stock# Settings",MainStockTClass,modIN);
  end;
  if (HasVarieties) then begin
    Setting("Variety Masks",VARMaskTClass,modIN);
    Setting("Variety Sets",VARMasksLClass,modIN);
    Setting("Variety Settings",VarietyTClass,modIN);
    Setting("Variety Subsets",VARSubsetsLClass,modIN);
  end;

  if (HasModSO or HasLocalization("RUS")) then begin
    if (HasModSO) then begin 
      Document("Address Labels",AdrLabRClass,AdrLabForm,AdrLabFClass,modIN);
      Document("Delivery Notes",Sh1RClass,Sh1Form,Sh1FClass,modIN);
      Document("Freight Labels",SHLabRClass,SHLabForm,SHLabFClass,modIN);     
    end else begin
      if (HasLocalization("RUS")) then begin 
        Document("Delivery Notes",Sh1RClass,Sh1Form,Sh1FClass,modIN);
      end;
    end;
  end else begin
    if (HasLocalization("HRV")) then begin
      Document("Base Price Change",BasePriceChangeRClass,BPChangeForm,BasePriceChangeFClass,modIN);
      Document("Delivery Notes",Sh1RClass,Sh1Form,Sh1FClass,modIN);
    end;
  end;
  Document("Goods Receipt Labels",PULabRClass,PULabForm,PULabFClass,modIN);
  Document("Goods Receipts",PurchaseRClass,PurchaseForm,PurchaseFClass,modIN);
  Document("Item Labels",ItemLabelRClass,ItemLabelForm,ItemLabelFClass,modIN);
  if (HasModSO or HasLocalization("RUS")) then begin
    Document("Picking Lists",Sh2RClass,Sh2Form,Sh2FClass,modIN);
  end;
  Document("#Stock Depreciations#",SDRClass,SDForm,SDFClass,modIN);

  if (HasModPO or HasModSO) then begin
    Report("Deficiency List",PurRClass,PurRn,0,modIN);
  end;
  if (HasModSO) then begin
    Report("Delivery Journal",SHJRClass,ShipRn,0,modIN);
    Report("Delivery List",SHListRClass,ShipListRn,0,modIN);
  end;
  Report("Goods Receipt Journal",PUJRClass,PUJRn,0,modIN);
  Report("Item History",INrsRClass,INrsRn,0,modIN);
  Report("Item List",ArtRClass,ArtRn,0,modIN);
  Report("#Stock Depreciation# Journal",SDJRClass,StockDepRn,0,modIN);
  Report("#Stock# In Journal",StockJInRClass,StockInRn,0,modIN);
  Report("#Stock# List",INRClass,InvValRn,0,modIN);
  Report("#Stock# Out Journal",StockJOutRClass,StockOutRn,0,modIN);
  Report("#Stocktaking# Comparison",STCompRClass,STCompRn,0,modIN);
  Report("#Stocktaking# List",StockTakeRClass,StockTakeRn,0,modIN);
  Report("#Supplier#/Item Statistics",VeInRClass,VeInRn,0,modIN);

  Maintenance("#Stocktaking# Comparison",STCompVClass,STCompMn,modIN);

/*
  if (HasLocalization("PRT")) then begin
    Export("SAFT Stock",PortStockXmlEClass,PortStockXmlEn,modIN);
  end;
*/
/*modPO*/

  Register("Purchase Orders","Purchase Orders",POVc,modPO);
  Register("Contacts","Contacts",CUVc,modPO);
  Register("Items","Items",INVc,modPO);

  if (HasModIN) then begin
    Setting("Delivery Terms",ShipDealLClass,modPO);
  end;
  Setting("#Supplier# Categories",VGLClass,modPO);
  if (HasNumberSeries) then begin
    Setting("Number Series - Purchase Orders",POSerTClass,modPO);
  end;

  Report("Deficiency List",PurRClass,PurRn,0,modPO);
  Report("Outstanding Purchase Orders",POOrdStockRClass,POOrdStockRn,0,modPO);  
  Report("Purchase Order Journal",PurOrdJRClass,PurOrdJRn,0,modPO);

  Document("Purchase Orders",PORClass,POForm,POFClass,modPO); 

/* modQT */
  Register("Quotations","Quotations",QTVc,modQT);
  if (HasModCRM) then begin
    Register("Contacts","Contacts",CUVc,modQT);
  end;
  Register("Items","Items",INVc,modQT);
  if (HasPriceLists) then begin
    Register("Prices","Prices",PLVc,modQT);
  end;
  //Register("Pre Quotations","Pre Quotations",PreQTVc,modQT); no funcionality for this one
  if (HasNumberSeries) then begin
    Setting("Number Series - Quotations",QTSerTClass,modQT);
  end;
  Setting("Quotation Classes",QuoteClassTClass,modQT);
  Setting("Quotation Settings",QTSettTClass,modQT);

  Document("Quotations",QTRClass,QTForm,QTFClass,modQT);
  if (HasLocalization("PRT")) then begin
    Document("Proforma Invoice, Quotations",ProformaQTRClass,ProformaQTForm,ProformaQTFClass,modQT);
  end;
  
  if (HasLocalization("PRT")) then begin
    Report("Proforma Invoice Journal",ProformaIVJRClass,ProformaIVJRn,0,modQT);
  end;
  Report("Accepted Quotations Journal",QTHistoryRClass,QTHstRn,0,modQT);
  Report("Outstanding Quotations",QTStkRClass,QTStkRn,0,modQT);
  Report("Pipeline",QTPipelineRClass,QTPipelineRn,0,modQT);
  Report("Quotation Journal",QTJRClass,QTJRn,0,modQT);

  Maintenance("Update Quotations",UpdateQTVClass,UpdateQTMn,modQT);
  
/*modPOS*/

  Register("POS Invoices","POS Invoices",NPTSIVCashLClass,modPOS);
  Register("Contacts","Contacts",CUVc,modPOS);
  Register("Items","Items",INVc,modPOS);
  Register("Cashier Counts","Cashier Counts",CashierBalVc,modPOS);
  
  Setting("Cash Events",CashLClass,modPOS);
  Setting("Default Payment Modes",DefCashTClass,modPOS);
  Setting("Drawers",DrawerLClass,modPOS); 
  Setting("Invoice Settings",AccTClass,modPOS);
  if (HasItemClassification) then begin
    Setting("Item Classifications",DILClass,modPOS);
  end;
  if (HasItemGroups) then begin
    Setting("Item Groups",ITLClass,modPOS);
  end;
  if (HasLocalMachines) then begin
    Setting("Local Machine",LocalMachineTClass,modPOS);
  end;
//  Setting("Local Machine Payment Modes",RestPMTClass,modPOS);
//  Setting("Local Serial Port Devices",LSerialPortDeviceLClass,modPOS);
  if (HasNumberSeries) then begin
    Setting("Number Series - POS Invoices",IVCashSerTClass,modPOS); 
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Setting("Payment Currencies",POSCurrenciesTClass,modPOS);
  end;
  Setting("Payment Modes",PMTClass,modPOS);
  Setting("POS Balances",POSBalanceLCLass,modPOS);
  Setting("POS Buttons",POSButtonsLClass,modPOS);
  Setting("POS Sessions",POSEventLCLass,modPOS);
  Setting("POS Settings",CashierDefTClass,modPOS);

  Report("Cash Up",CashupRClass,CashupRn,0,modPOS);
//  Report("Daily Balance",DayBalRClass,DayBalRn,0,modPOS); //not in 63
  if (HasModIN) then begin
    Report("GP, POS Invoices", PIVGPRClass,PIVGPRn,0,modPOS);
  end;
  Report("Item List",ArtRClass,ArtRn,0,modPOS);
  Report("Item Statistics",ArtSTRClass,ArtSTRn,0,modPOS);
  if (HasModNL) then begin
    Report("#N/L# Transfer, Cash Invoices", TransGenPOSRClass,TransGenPOSRn,0,modPOS);
  end;
  Report("POS Invoice Journal",IVCJRClass,InvCashRn,0,modPOS);
  if (HasVarieties) then begin
    Report("Variety Enquiry",VarEnqRClass,VarEnqRn,0,modPOS);
  end;

  Document("POS Invoices",IVCashRClass,InvCashForm,IVCashFClass,modPOS);

  if (HasModNL) then begin
    Maintenance("Cash Up",CashupVClass,CashupMn,modPOS);
  end;
  if (HasModIN) then begin
    Maintenance("Update #Stock#",POSUpdStockVClass,POSUpdStockMn,modPOS);
  end;

/* modRest */
  Register("Tabs","Tabs",RestAccVc,modRest);
  Register("Items","Items",INVc,modRest);
  Register("Table Layout","Table Layout",TableLayoutClass,modRest);

  Setting("Daily Statistics",SalesTimeTClass,modRest); 
  Setting("Default Payment Modes",DefCashTClass,modRest);
  Setting("Invoice Settings",AccTClass,modRest);
  if (HasItemGroups) then begin
    Setting("Item Groups",ITLClass,modRest);
  end;
  Setting("Payment Modes",PMTClass,modRest); 
  Setting("POS Buttons",POSButtonsLClass,modRest);
  Setting("Tables",NeighbourHoodLClass,modRest);
  Setting("Units",UnitLClass,modRest);

  Document("Bar Tab",RestAccRClass,RestAccForm,RestAccFClass,modRest);
  Document("Bar Tab Receipt",RestAccReceiptRClass,RestAccReceiptForm,RestAccReceiptFClass,modRest);
  Document("Cancel Order",RestAccRClass,RestAccCancelForm,RestAccCancelFClass,modRest);
  Document("Cash Events",CashRClass,CashForm,CashFClass,modRest);
  Document("Fire Order",RestAccRClass,RestAccFireOrderForm,RestAccFireOrderFClass,modRest);
  Document("Guest Bill ",RestAccGuestBillRClass,RestAccGuestBillForm,RestAccGuestBillFClass,modRest);

  Export("#Restaurant# Daily Statistics",SalesTimeEClass,SalesTimeEn,modRest);  

  Report("Item List",ArtRClass,ArtRn,0,modRest);
  Report("#Restaurant# Daily Statistics",DetSalesTimeRClass,DetSalesTimeRn,0,modRest);  
//  Report("Cash Up",CashupRClass,CashupRn,0,modRest);
  Report("#Restaurant# Daily Statistics",DetSalesTimeRClass,DetSalesTimeRn,0,modRest);  
  Report("#Restaurant# Item Statistics",BarItemStatRClass,BarItemStatRn,0,modRest);
  Report("Tabs Journal",RestAccJRClass,RestAccJRn,0,modRest);
  Report("Void Report",VoidedRowsRClass,VoidedRowsRn,0,modRest);
  
/* modCRM */

  if (HasStandardCRM) then begin  
    Register("Quotations","Quotations",QTVc,modCRM);
  end;
  Register("Activities","Activities",ActVc,modCRM);
  Register("Contacts","Contacts",CUVc,modCRM);
  if (HasStandardCRM) then begin  
    Register("Items","Items",INVc,modCRM);
  end;

  Report("Birthday List",BirthDayRClass,BirthDayRn,0,modCRM);
  Report("Call History",CallHistRClass,CallHistRn,0,modCRM);
  Report("Contact List",CURClass,CustRn,0,modCRM);
  if (HasStandardOrganizer==false) then begin
    Report("Customer Status",CustPSRClass,CustPSRn,0,modCRM);
  end;
  Report("List Invalid Phone Numbers",InvPhoneNoRClass,InvPhoneNoRn,0,modCRM);
  Report("Person List",UserRClass,UserRn,0,modCRM);
  Report("Personal Calendar",ActCalRClass,ActCalRn,0,modCRM);

  Report("Search for Contact Person",SearchContactRClass,SearchContactRn,0,modCRM);

  Document("Activities",ActDocRClass,ActDocForm,ActDocFClass,modCRM);
  Document("Contact Labels",CoLabRClass,CoLabForm,CoLabFClass,modCRM);

  Setting("Activity Classes",ActTypeGrLClass,modCRM);
  Setting("Activity Types",ActTypeLClass,modCRM);
  Setting("Customer Relations",ContactRelLClass,modCRM);
  if (HasStandardCRM or HasStandardCommunicator) then begin  
    Setting("Info in Customer Status Report",CustPSLClass,modCRM);
  end;
  if (HasStandardCRM) then begin  
    Setting("Payment Terms",PDLClass,modCRM);
  end;
  Setting("Program Mode",ProgramStatusTClass,modCRM);//clouds ? 
  Setting("Text Types",TextTypeLClass,modCRM);
  Setting("Units",UnitLClass,modCRM);
  if (HasLocalization("PRT") or HasLocalization("BRA")) then begin
    Setting("User Defined Fields - Contacts",CUUserLabelTClass,modCRM);
  end;
  Maintenance("Rebuild Number Recognition Register",NormPhoneNumVClass,NormPhoneNumMn,modCRM);
  Maintenance("System Message",SysMessVClass,SysMessMn,modCRM); // Must have ONE, otherwise it crashes.... goes for all these types...

/* modUserSet */

  Setting("Client Date and Numeric Format",ClientFormatTClass,modUserSet);
  Setting("Client Language",UserLanguageTClass,modUserSet);
  if (HasLanguages) then begin
    Setting("Local Machine",LocalMachineTClass,modUserSet);
  end;
  Setting("Warnings on UnOKed Records",UserUnOkWarnWClass,modUserSet);
  Setting("Web Client",WebClientTClass,modUserSet);

/* modCL */

  Register("Cash In","Cash In",CLInVc,modCL);
  Register("Cash Out","Cash Out",CLOutVc,modCL);
  if (HasModSL) then begin
    Register("Receipts","Receipts",IPVc,modCL);
  end;
  if (HasModPL) then begin
    Register("Payments","Payments",OPVc,modCL);
  end;
  if (HasModExp) then begin
    Register("Personnel Payments","Personnel Payments",PPVc,modCL);
  end;
  
  Setting("Cash Book Settings",MainCLTClass,modCL);
  Setting("Expense Accounts",CLCorspLClass,modCL);
  if (HasNumberSeries) then begin
    Setting("Number Series - Cash In",CLInSerTClass,modCL);
    Setting("Number Series - Cash Out",CLOutSerTClass,modCL);
  end;
  Setting("Payment Modes",PMTClass,modCL);
  
  if (HasLocalization("POL")==false) then begin
    Report("Cash Book",CLIORClass,CashBRn,0,modCL);
  end;
  if (HasLocalization("LTU")) then begin
    Report("Cash Book (Lithuania)",CashBookLitRClass,CashBookLitRn,0,modCL);
  end;
  Report("Cash In Journal",CLInJRClass,CLInJRn,0,modCL);  
  Report("Cash Out Journal",CLOutJRClass,CLOutJRn,0,modCL);  
  if (HasModNL or HasLocalization("POL")) then begin
    Report("#N/L# Cash Book",CashBookLatRClass,CashBookLatRn,0,modCL);
  end;

  Document("Cash In",CLInRClass,CLInForm,CLInFClass,modCL);
  Document("Cash Out",CLOutRClass,CLOutForm,CLOutFClass,modCL);

  Maintenance("OK Cash Ins and Cash Outs",OKCLVClass,OKCLMn,modCL);
  
/* modTC */
  
  Register("Program Mode","Program Mode",ProgramStatusTClass,modTC);
  Register("Global Users","Global Users",GlobalUserVc,modTC);
  
  Setting("Database Status",DBERecordsTClass,modTC);
  Setting("Mailboxes",ConferenceWClass,modTC);
  Setting("Services Cache",ServiceCacheLClass,modTC);
  Setting("Timed Operations",BackupTClass,modTC);

  Maintenance("System Message",SysMessVClass,SysMessMn,modTC);

  return;
end;
