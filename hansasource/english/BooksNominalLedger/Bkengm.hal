/* sasengm.hal */
/* Books by HansaWorld */
external function Boolean HasDeveloperMode();
external function Boolean HasPersons();
external function Boolean HasETaxDocuments();
external function Boolean HasModQT();
external function Boolean HasSerialNumbers();
external function Boolean HasModAT2();
external function Boolean HasModCL();
external function Boolean HasStandardCRM();
external function Boolean HasModExp();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();
external function Boolean HasModSO();
external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModSL();
external function Boolean HasModPL();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModRest();
external function Boolean HasModCRM();
external function Boolean HasPayroll();

external function Boolean HasAdvancedPricing();
external function Boolean HasBase2();
external function Boolean HasContactClassification();
external function Boolean HasFormEditor();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLocalMachines();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNumberSeries();
external function Boolean HasOfficialSerNr();
external function Boolean HasObjects();
external function Boolean HasPriceLists();
external function Boolean HasVarieties();
external procedure SetProductTags();
external procedure LoadWindowTags();

begin
  Real h,v,l,vs;
  
  SetLangMode(LangEnglish,"ENG",2);
  
  // this is for when it's a hardcoded list of options
  // we'll get some better solution for that later, but for now we
  // need one product folder per set of default options

  SetProductTags;
  LoadWindowTags;
   
  if (HasModNL) then begin
    Module("#Nominal Ledger#","",730,modNL);
  end;
  
  // debug
  if (HasDeveloperMode) then begin
    Setting("Cloud Services",EnabServerTClass,modSY);
    Setting("Configuration",ModulesTClass,modSY);
    Setting("Current License Flags",CurLicensesClass,modSY);
    Setting("Internet Enablers",InternetEnablerTClass,modSY);
    Setting("Licenses",LicensesLClass,modSY);
    Register("Mailboxes","Mailboxes",ConferenceWClass,modSY);
    Setting("Services Cache",ServiceCacheLClass,modSY);
    Setting("Std Registration Data",StdRegDataWClass,modSY);
  end;
  // end debug code
  
  
/* modNL */
  
  Register("Transactions","Transactions",TRVc,modNL);
  Register("Accounts","Accounts",AccVc,modNL);
  Register("Companies","Companies",CompaniesTClass,modNL);
  Register("Brought Forward Balances","Brought Fwd Balances",FBVc,modNL);
  Register("Autotransactions","Autotransactions",AutVc,modNL);
  if (HasDeveloperMode or HasPersons) then begin
    Register("Persons","Persons",UserVc,modNL);
  end;

  Setting("Activity Classes",ActTypeGrLClass,modNL);
  Setting("Activity Types",ActTypeLClass,modNL);
  if (HasLanguages or HasLocalization("FIN")) then begin
    Setting("Client Language",UserLanguageTClass,modNL);
  end;
  if (HasLanguages) then begin
    Setting("Languages",LangTClass,modNL);
  end;
  Setting("Company Date and Numeric Format",SysFormatTClass,modNL);
  Setting("Company Info",CYWClass,modNL);
  Setting("Configuration",ModulesTClass,modNL);
  Setting("Conversions - Master",ConvMasterTClass,modNL);
  Setting("Conversions - Accounts and #VAT# Codes",ConvAccVATCodeTClass,modNL);
  Setting("Fiscal Years",YearTClass,modNL);
  Setting("Internet Enablers",InternetEnablerTClass,modNL);
  if (HasLocalMachines) then begin
    Setting("Local Machine",LocalMachineTClass,modNL);
  end;
  Setting("Locking",DBLockTClass,modNL);
  Setting("Optional Features",UXFTClass,modNL);
  Setting("Presentation of Balances",AGrTClass,modNL);
  Setting("Report Settings",Rs2WClass,modNL);
  Setting("Reporting Periods",PeriodTClass,modNL);
  Setting("Transaction Settings",TrTClass,modNL);
  Setting("Timed Operations",BackupTClass,modNL);
  Setting("#VAT# Codes",VATCodeTClass,modNL);
  Setting("Weeks",WeekLClass,modNL);

  Report("Balance Sheet",BalRClass,BalRn,UserDefRepDClass,modNL);
  Report("Company Info",CompInfoRClass,CompInfoRn,0,modNL);
  Report("Correction List",CorrRClass,CorrRn,0,modNL);
  Report("Nominal Ledger",MainRClass,MainRn,0,modNL);
  Report("Profit & Loss",ResRClass,ResRn,UserDefRepDClass,modNL);
  Report("Transaction Journal",TransRClass,TransRn,0,modNL);
  Report("Trial Balance",SBRClass,TrialRn,0,modNL);
  Report("#VAT# Report",VATRClass,VAT2Rn,UserDefRepDClass,modNL);

  Export("Company Text Backup",TBCompanyEClass,CompanyTBEn,modNL);
  Export("Database Text Backup",TBDatabaseEClass,DatabaseTBEn,modNL);
  Export("Monthly Balances",MBEClass,MBEn,modNL);
  Export("Trial Balance",SBEClass,SBEn,modNL);
  Export("System Data",SysEClass,SysEn,modNL);

  Import("Automatic",0,FullyAutIn,modNL);
  Import("Manual file search",0,AutIn,modNL);

  Maintenance("System Message",SysMessVClass,SysMessMn,modNL);

  return;
end;
