/* epengm.hal */
/* This is no longer an Event, make sure you don't have this in */
external function Boolean HasDeveloperMode();
external function Boolean HasPersons();
external function Boolean HasModQT();
external function Boolean HasSerialNumbers();
external function Boolean HasModAT2();
external function Boolean HasModCL();
external function Boolean HasModCO();
external function Boolean HasStandardCRM();
external function Boolean HasModExp();
external function Boolean HasSalesmanBonus();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();
external function Boolean HasModSO();
external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModSL();
external function Boolean HasModPL();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModRest();
external function Boolean HasModCRM();
external function Boolean HasEMail();
external function Boolean HasModSVO();
external function Boolean HasModProd();
external function Boolean HasModTS();

external function Boolean HasAccessGroups();
external function Boolean HasAccountRecon();
external function Boolean HasAdvancedPricing();
external function Boolean HasBase2();
external function Boolean HasCategories();
external function Boolean HasContactClassification();
external function Boolean HasFormEditor();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLocalMachines();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNumberSeries();
external function Boolean HasObjects();
external function Boolean HasPriceLists();
external function Boolean HasReturnedGoods();
external function Boolean HasRetGoodsToSupp();
external function Boolean HasVarieties();
external procedure SetProductTags();
external procedure LoadWindowTags();

//event startup
begin

  SetLangMode(LangEnglish,"ENG",0);

  if (BuildProductCode=="Advocate") then begin

  SetProductTags;
  LoadWindowTags;

  SetWhiteLabelProduct(true);

/* The modules should keep there codes even if we rename the modules. The code is part of the Export format */
  if (HasModCL) then begin
    Module("Cash Book","",730,modCL);
  end;
  if (HasModNL) then begin
    Module("#Nominal Ledger#","",730,modNL);
  end;
  if (HasModCO) then begin
    Module("Contracts","",730,modCO);
  end;
  if (HasModCRM or HasStandardCRM) then begin
    Module("CRM","",730,modCRM);
  end;
  
  if (HasEMail) then begin
    Module("Email","",730,modEmail);
  end;
  if (HasModExp) then begin
    Module("Expenses","",730,modExp);
  end;
/*  
  if (HasModPOS) then begin
    Module("Point of Sales","",730,modPOS);  
  end;
*/  
  if (HasAdvancedPricing) then begin
    Module("Pricing","",730,modDI);
  end;
  if (HasModProd) then begin
    Module("Production","",730,modProd);
  end;
  if (HasModTS) then begin
    Module("Projects","",730,modTS);
  end;
  if (HasModPL) then begin
    Module("#Purchase Ledger#","",730,modPL);
  end;
  if (HasModPO) then begin
    Module("Purchase Orders","",730,modPO);
  end;
  if (HasModQT) then begin
    Module("Quotations","",730,modQT);
  end;
  if (HasModSL) then begin
    Module("#Sales Ledger#","",730,modSL);
  end;
  if (HasModSO) then begin
    Module("Sales Orders","",730,modSO);
  end;
  if (HasModSVO) then begin
    Module("Service Orders","",730,modSVO);
  end;
  if (HasModIN) then begin
    Module("#Stock#","",730,modIN);
  end;
  Module("System","",730,modSY);


  // debug
  if (HasDeveloperMode) then begin
    Setting("Cloud Services",EnabServerTClass,modSY);
    Setting("Configuration",ModulesTClass,modSY);
    Setting("Current License Flags",CurLicensesClass,modSY);
    if (IsUsingActivationCodes==false) then begin
      Setting("Internet Enablers",InternetEnablerTClass,modSY);
    end;
    Setting("Licenses",LicensesLClass,modSY);
    Register("Mailboxes","Mailboxes",ConferenceWClass,modSY);
    Setting("Services Cache",ServiceCacheLClass,modSY);
    Setting("Std Registration Data",StdRegDataWClass,modSY);
  end;

  if (HasMultiCurrency or HasBase2) then begin
    Register("Currencies","Currencies",CurncyCodeVc,modSY); 
  end;
  if (HasMultiCurrency) then begin
    Register("Exchange Rates","Exchange Rates",ERVc,modSY);
  end;
  if (HasFormEditor) then begin
    if (GuiType!=kGuiiPhone) then begin
      Register("Forms","Forms",DocVc,modSY);
    end;
    Register("Styles","Styles",StyleVc,modSY);
  end;
  if (HasDeveloperMode or HasPersons) then begin
    Register("Persons","Persons",UserVc,modSY);
  end;  

//  if (HasStandardCRM or HasStandardCommunicator or HasStandardOrganizer) then begin // New in-app : HasAccessGroups
  if (HasAccessGroups) then begin
    Setting("Access Groups",AccessLClass,modSY);
  end;
  if (HasStandardCRM or HasStandardCommunicator or HasStandardOrganizer) then begin
    Setting("Active Users",ListUsersClass,modSY);
  end;
  if (HasBase2) then begin
    Setting("Base Currency",BaseCurTClass,modSY);
    Setting("Base Currency Rates",BaseERLClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Brazilian Invoice Types",BrazilEInvTypeLClass,modSY);
  end;
  if (HasStandardCRM or HasStandardCommunicator or HasStandardOrganizer) then begin
    Setting("Companies",CompaniesTClass,modSY);
    Setting("Company Date and Numeric Format",SysFormatTClass,modSY);
  end;
  Setting("Company Info",CYWClass,modSY);
  if (LicenseMode==kLicenseModeServer) then begin
    Setting("Configure Users",ConfigureUsersTClass,modSY);
  end;
  if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
    Setting("Conversions - Master",ConvMasterTClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Districts",DistrictLClass,modSY);
  end;
/*  
  if (UseAppStoreEnabler==false) then begin
    Setting("Internet Enablers",InternetEnablerTClass,modSY);
  end;
*/  
  if (IsUsingActivationCodes) then begin
    Setting("Internet Enablers",InternetEnablerTClass,modSY);
  end;
  if (HasKPIs) then begin
    Setting("KPIs",KPIDefLClass,modSY);
  end;
  if (HasLanguages) then begin
    Setting("Languages",LangTClass,modSY); 
  end;
  if (HasModNL) then begin
    Setting("Locking",DBLockTClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Municipalities",MunicipalityLClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Operation Types",OperationTypeLClass,modSY);
  end;

  Setting("Reporting Periods",PeriodTClass,modSY);
  if (HasLanguages) then begin
    Setting("Values in Text",LangNrLClass,modSY);
  end;
  if (HasNumberSeries or HasLocalization("LVA")) then begin
    Setting("Legal Invoice Numbers",LegalInvNrTClass,modSY);
  end;  
  
  Report("Company Info",CompInfoRClass,CompInfoRn,0,modSY);

  Export("Base Registers",GBaseEClass,GBaseEn,modSY);
//Export("Company Text Backup",TBEClass,CompanyTBEn,modSY);
  if (GuiType!=kGuiiPhone) then begin
    Export("Database Text Backup",TBDatabaseEClass,DatabaseTBEn,modSY);
  end;
  Export("Remote Backup",TBRemoteEClass,RemoteTBEn,modSY);
  if (HasModIN or HasModSL or HasStandardCRM or HasMultiLocations or HasModPL or HasAdvancedPricing) then begin
    Export("Item Base Registers",GItemBaseEClass,GItemBaseEn,modSY);
  end;
  Export("System Data",SysEClass,SysEn,modSY);
  Export("Transaction Registers",GTransEClass,GTransEn,modSY);
  Export("Transaction Registers (period)",GTrans2EClass,GTrans2En,modSY);
  
  Import("Automatic",0,FullyAutIn,modSY);
  Import("Manual file search",0,AutIn,modSY);
  Import("Remote backup",RemoteInIClass,RemoteIn,modSY);

//  if (HasModIN or HasModSL or HasModPL or HasModPOS or HasModAT2 or HasModCL or HasModExp or HasModPO) and (HasModNL) then begin
  if (HasModNL) then begin
    Maintenance("Create #N/L# Transactions",TransGenVClass,GenTransMn,modSY);
  end;
//  Maintenance("Restore Application",ResetDBWClass,0,modSY);
  Maintenance("Send Invitation for New User",SubscriptionInvitationVClass,SubscriptionInvitationMn,modSY);

/* modNL */
  
  Register("Transactions","Transactions",TRVc,modNL);
  if (HasLocalization("PRT")) then begin
    Register("Simulations","Simulations",SMVc,modNL);  
  end;
  if (HasAccountRecon) then begin
    Register("Account Reconciliation","Account Reconciliation",BankRecWClass,modNL);
  end;
  Register("Brought Forward Balances","Brought Fwd Balances",FBVc,modNL);
  Register("Accounts","Accounts",AccVc,modNL);


  if (HasLocalization("POL,PRT")) then begin
    Setting("Account Transfers",AccTransLClass,modNL);
  end;
  Setting("Fiscal Years",YearTClass,modNL);
  if (HasNumberSeries) then begin
    if (HasLocalization("PRT")) then begin
      Setting("Number Series - Simulations",SMSerTClass,modNL);
    end;
    Setting("Number Series - Transactions",TRSerTClass,modNL);
  end;
  if (HasObjects) then begin
    Setting("Tags/Objects",ObjLClass,modNL);
    Setting("Tag/Object Type Control",OTCheckTClass,modNL);
    Setting("Tag/Object Types",OTLClass,modNL);
  end;
//  if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
//    Setting("Rate Gain/Loss",NLRateTClass,modNL);
//  end;
  Setting("Report Settings",Rs2WClass,modNL);
  Setting("Sub Systems",TRGenTClass,modNL);
  Setting("Sub-ledger Control Accounts",SLAccTClass,modNL);
  if (HasLocalization("BRA,HRV,LVA")) then begin
    Setting("Tax Rules",TaxRulesLClass,modNL);
    Setting("Tax Templates",TaxTemplateLClass,modNL);
    Setting("Transaction Settings",TrTClass,modNL);
  end;
  if (HasLocalization("KEN")) then begin
    Setting("Tax Templates",TaxTemplateLClass,modNL);
  end;
  Setting("#VAT# Codes",VATCodeTClass,modNL);
  
  Document("Transactions",TRRClass,TRForm,TRFClass,modNL);

//  Report("Account Reconciliation",ACReconRClass,ACRecRn,0,modNL);

  if (HasLocalization("BRA,POL,PRT")) then begin
    Report("Analytical Balance",MBARClass,MBARn,0,modNL);
  end;
  Report("Balance Sheet",BalRClass,BalRn,UserDefRepDClass,modNL);
  if (HasAccountRecon) then begin
    Report("Bank Reconciliation",BankReconRClass,BankRecRn,0,modNL);
  end;
  Report("Chart of Accounts",AccListRClass,AccListRn,0,modNL);
  Report("Correction List",CorrRClass,CorrRn,0,modNL);
  if (HasLocalization("LTU,LVA")) then begin
    Report("Corresponding Accounts",CorspRClass,CorspRn,0,modNL);
  end;
  Report("#Nominal Ledger#",MainRClass,MainRn,0,modNL);
  Report("Profit & Loss",ResRClass,ResRn,UserDefRepDClass,modNL);
  Report("Transaction Journal",TransRClass,TransRn,0,modNL);
  Report("Trial Balance",SBRClass,TrialRn,0,modNL);
  if (HasLocalization("POL,PRT")==false) then begin
    Report("#VAT# Listing",ALLVATRClass,ALLVATRn,0,modNL);
  end;
  if (HasLocalization("POL")==false) then begin
    Report("#VAT# Report",VATRClass,VAT2Rn,UserDefRepDClass,modNL);
  end;
//  if (HasLocalization("KEN")) then begin  // Approved for all countries.
    Report("#VAT# Transaction Journal",VATTransJRClass,VATTransJRn,0,modNL);
//  end;

  if (HasLocalization("FRA")) then begin
    Export("FEC Export",FrenchFECEClass,FrenchFECEn,modNL);
  end;
  Export("Monthly Balances",MBEClass,MBEn,modNL);
  if (HasLocalization("SWE")) then begin
    Export("SIE (Swedish Export/Import)",SieEClass,SieEn,modNL);
  end;
  Export("Trial Balance",SBEClass,SBEn,modNL);
  if (HasLocalization("PRT")) then begin
    Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modNL);
  end;  
  if (HasLocalization("SWE")) then begin
    Import("SIE (Swedish Export/Import)",0,SieIn,modNL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#VAT# Periodic Declaration (Lithuania)",LTUVATEClass,LTUVATEn,modNL);
  end;

  if (HasLocalization("POL,PRT")) then begin
    Maintenance("Account Balance Transfer",AccTransVClass,AccTransMn,modNL);
  end;

/* modPL */

  Register("#Purchase Invoices#","#Purchase Invoices#",VIVc,modPL);
  Register("Payments","Payments",OPVc,modPL);
  Register("Contacts","Contacts",CUVc,modPL);

  if (HasModNL) then begin
    Setting("Account Usage #P/L#",APAccTClass,modPL);
  end;
  if (HasLocalization("AUS,FIN,GBR,NOR,SWE")) then begin
    Setting("#Bank Files#",BankFileTClass,modPL);
  end;
  if (HasLocalization("FIN,RUS")) then begin
    Setting("Banks",BankLClass,modPL);
  end;
  if (HasNumberSeries) then begin
    Setting("Number Series - #Purchase Invoices#",VISerTClass,modPL);
    Setting("Number Series - Payments",OPSerTClass,modPL);
    if (HasModNL) and (HasLocalization("POL")) then begin
      Setting("Number Series - #VAT# Corrections #P/L#",VATVISerTClass,modPL);
    end;
  end;
  Setting("Payment Modes",PMTClass,modPL);
  Setting("Payment Terms",PDLClass,modPL);
  if (HasCategories) then begin
    Setting("#Supplier# Categories",VGLClass,modPL);
  end;
  if (HasModNL) and (HasLocalization("POL")) then begin
    Setting("#VAT# Corrections #P/L#",VATVILClass,modPL);
  end;
  if (HasLocalization("PRT")) then begin
    Setting("Withholding Calculation Formulae",WHCalcFormLClass,modPL);
    Setting("Withholding Taxes",WHTaxTClass,modPL);
  end;  

  if (HasLocalization("LTU,POL")) then begin
    Document("Open Invoice #Supplier# Statement",APSRClass,APSForm,APSFClass,modPL);
  end;
  Document("Payment Forms",OPDRClass,OPDForm,OPDFClass,modPL);
  Document("Payment Lists",OPRClass,OPForm,0,modPL);
  if (HasModNL) then begin
    Document("#Purchase Invoices#",VIRClass,VIForm,VIFClass,modPL);
  end;

  if (HasLocalization("LTU")) then begin
    Report("Open Invoice #Supplier# Statement",APS2RClass,APS2Rn,0,modPL);
  end;
  Report("Payments Forecast",OPProgRClass,OPProgRn,0,modPL);
  Report("Payment Journal",OPJRClass,OPJRn,0,modPL);
  Report("Periodic #Supplier# Statement",VePer2RClass,VePerRn,0,modPL);
  Report("#Purchase Invoice# Journal",VIJRClass,VIJRn,0,modPL);
  Report("#Purchase Ledger#",APRClass,APRn,0,modPL);
  Report("#Supplier# List",VERClass,VERn,0,modPL);
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("POL")) and (HasModNL) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# #Supplier# Purchases",RealSuppRClass,RealSuppRn,0,modPL); 
  end;
  if (HasLocalization("LTU")) then begin
    Report("#VAT# Report Purchases (Lithuania)",PLVATLitRClass,PLVATLitRn,0,modPL);
  end;
  
  if (HasLocalization("AUS,FIN,GBR,NOR,SWE")) then begin
    Export("Banking File",MPEClass,MPEn,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#P/L# #VAT# Invoices (Lithuania)",LitVATRegVIEClass,LitVATRegVIEn,modPL);
  end;
  

/* modSL */
  
  Register("Invoices","Invoices",IVVc,modSL);
  Register("Receipts","Receipts",IPVc,modSL);
  Register("Contacts","Contacts",CUVc,modSL);
  Register("Items","Items",INVc,modSL);
  if (HasPriceLists) then begin
    Register("Prices","Prices",PLVc,modSL);
  end;
  if (HasLocalization("RUS")) then begin
    Register("Sales Orders","Sales Orders",ORVc,modSL);
  end;
  
  if (HasModNL) then begin
    Setting("Account Usage #S/L#",AccTClass,modSL);
  end;
  Setting("Age Limits",AgedTClass,modSL);
  if (HasContactClassification) then begin
    Setting("Contact Classifications",CClassLClass,modSL);
  end;
  Setting("Credit Limit",CreditLimitTClass,modSL);
  if (HasCategories) then begin
    Setting("Customer Categories",CCatLClass,modSL);
  end;
//  Setting("Electronic Invoices Customers Data",EInvCULClass,modSL);
//  Setting("Electronic Invoices Settings",EInvoiceTClass,modSL);
//  Setting("Electronic Invoices Queue",EInvoiceQueLClass,modSL);
//  Setting("Electronic Record Statuses",ERecordStatusLClass,modSL);
  if (HasModNL and HasModPL and HasMultiCurrency) then begin
    Setting("Internal Invoices",IntIVLClass,modSL);
  end;

  if (HasModNL==false) then begin
    Setting("Invoice Settings",AccTClass,modSL);
  end;
  if (HasItemClassification) then begin
    Setting("Item Classifications",DILClass,modSL);
  end;
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT,ZWE")) then begin
    Setting("Item Groups",ITLClass,modSL);
  end;
  if (HasModSL and HasLocalization("ITA,PRT")) then begin
    Setting("Item Group Withholdings",WHITLClass,modSL);
  end;
  if (HasNumberSeries or HasLocalization("HRV,LVA")) then begin
    Setting("Legal Invoice Numbers",LegalInvNrTClass,modSL);
  end;  
  if (HasNumberSeries) then begin
    Setting("Number Series - Invoices",IVSerTClass,modSL);
    Setting("Number Series - Receipts",IPSerTClass,modSL);
    if (HasModNL) and (HasLocalization("POL")) then begin
      Setting("Number Series - #VAT# Corrections #S/L#",VATIVSerTClass,modSL);
    end;
  end;
  Setting("Payment Modes",PMTClass,modSL);
  Setting("Payment Terms",PDLClass,modSL);
  if (HasPriceLists) then begin
    Setting("Price Lists",PLDefLClass,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Setting("Reference Number Settings",CalcRefTClass,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Setting("Standard Problems",StandProblemLClass,modSL);
  end;
  
  Setting("Units",UnitLClass,modSL);
  if (HasLocalization("POL")) and (HasModNL) then begin
    Setting("#VAT# Corrections #S/L#",VATIVLClass,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Setting("#VAT# Codes",VATCodeTClass,modSL); 
  end;  
  if (HasLocalization("PRT,ITA") and (HasModPL or HasModSL)) then begin
    Setting("Withholding Calculation Formulae",WHCalcFormLClass,modSL);
    Setting("Withholding Taxes",WHTaxTClass,modSL);
  end;    

  Document("Cash Notes",KIVRClass,CashInvForm,CashFClass,modSL);
  Document("#Credit Notes#",CIVRClass,CredInvForm,CredFClass,modSL);
  Document("Customer Labels",CuLabRClass,CuLabForm,CuLabFClass,modSL);
  if (HasLocalization("POL")) then begin
    Document("Debtors Letter",DebtLetRClass,DebtorLetForm,DebtLetFClass,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Document("Interest Invoices",IIVRClass,IIInvForm,IIFClass,modSL);
  end;
  Document("Invoices",IVRClass,InvForm,InvFClass,modSL); 
  if (HasLocalization("PRT")) then begin
    Document("Invoice/Receipt's",KIVRClass,CashInvRecPRTForm,CashRecPRTFClass,modSL);
  end;
  Document("Open Invoice Customer Statement",ARSRClass,ARSForm,ARSFClass,modSL);
  Document("Periodic Customer Statement",CuPerRClass,CuPerForm,CuPerFClass,modSL);
  if (HasLocalization("POL")) then begin
    Document("Proforma Invoices",Inv1RClass,Inv1Form,Inv1FClass,modSL);
  end;
  Document("Receipt Forms",IPDRClass,IPDForm,IPDFClass,modSL);
  if (HasLocalization("POL")) then begin
    Document("Reminders",RemRClass,RemForm,RemFClass,modSL);
  end;

  if (HasSalesmanBonus) then begin
    Report("Bonus, #Salesman#",BonusRClass,BonusRn,0,modSL);
  end;
  Report("Contact List",CURClass,CustRn,0,modSL);
  Report("Customer/Item Statistics",CuArtSTRClass,CuArtSTRn,0,modSL);
  Report("Customer Statistics",CustSTRClass,CustSTRn,0,modSL);
//  Report("Electronic Invoice Status",HTSStatIVRClass,HTSStatIVRn,0,modSL);
  if (HasLocalization("LTU")) then begin
    Report("EU #VAT# Sales",SLEUVATRClass,SLEUVATRn,0,modSL);
  end;
  Report("Invoice Journal",IVJRClass,InvoiceRn,0,modSL);
  Report("Item List",ArtRClass,ArtRn,0,modSL);
  Report("Item Statistics",ArtSTRClass,ArtSTRn,0,modSL);
  if (HasSalesmanBonus) then begin
    Report("Item/Salesman Statistics",IStatRClass,IStatRn,0,modSL);
  end;
  Report("Open Invoice Customer Statement",ARS2RClass,ARS2Rn,0,modSL);
  Report("Periodic Customer Statement",CuPer2RClass,CuPerRn,0,modSL);
  if (HasPriceLists) then begin
    Report("Price List",PriceRClass,PriceRn,0,modSL);
  end;
  Report("Receipts Forecast",IPProgRClass,IPProgRn,0,modSL);
  Report("Receipt Journal",IPRClass,IPRn,0,modSL);
  Report("#Sales Ledger#",ARRClass,ARRn,0,modSL);
  if (HasLocalization("PRT")) then begin
    Report("#VAT Code# Statistics",SLVATRClass,SLVATRn,0,modSL);
  end;
  if (HasLocalization("POL")) and (HasModNL) then begin
    Report("#VAT# Report Sales",SLVATRepRClass,SLVATRepRn,0,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Report("#VAT# Report Sales",SLVATLitRClass,SLVATLitRn,0,modSL);  
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Customer Sales",RealCustRClass,RealCustRn,0,modSL);
  end;
  
  if (HasEMail) then begin
    Maintenance("Create Periodic Customer Statement Email",CUPerEmailVClass,CUPerEmailMn,modSL); // We have this belowe SendPerStatVClass
  end;  
  if (HasModNL) then begin
    if (HasLocalization("PRT,ZWE")) then begin
      Maintenance("Transfer to Bad Debtors",BadCUVClass,BadCUMn,modSL);
    end;
  end;
  if (HasLocalization("PRT")) then begin
    if (HasEMail) then begin
      Maintenance("SAFT to Email",SAFTtoEmailVClass,SAFTtoEmailMn,modSL);
    end;
  end;
  
  if (HasLocalization("PRT")) then begin
//    Export("Communication of Invoices to AT - SAFT",PortTaxXml2EClass,PortTaxXml2En,modSL);    
  end;
  if (HasLocalization("LTU")) then begin
    Export("EU #VAT# Sales (Lithuania)",SLEUVATLitECLass,SLEUVATLitEn,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Export("Finvoice",FInvoiceEClass,FInvoiceEn,modSL);
  end;
  if (HasLocalization("BRA")) then begin
    Export("Fiscal Note for Services",BraFiscalNoteEClass,BraFiscalNoteEn,modSL); 
  end;
  if (HasLocalization("LTU")) then begin
    Export("#S/L# #VAT# Invoices (Lithuania)",LitVATRegIVEClass,LitVATRegIVEn,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modSL);
  end;

  if (HasLocalization("FIN")) then begin
    Import("Banking File",RefIPIn,RefIPIn,modSL);
  end;
  if (HasLocalization("BRA")) then begin
    Import("Fiscal Note for Services Reply",0,BraFiscalNoteIn,modSL);
  end;
  

/* modSO */
  
  Register("Orders","Orders",ORVc,modSO);
  Register("Contacts","Contacts",CUVc,modSO);
  Register("Items","Items",INVc,modSO);
  if (HasItemGroups) then begin
    Register("Item Groups","Item Groups",ITVc,modSO);
  end;
  if (HasPriceLists) then begin
    Register("Prices","Prices",PLVc,modSO);
  end;

  if (HasModIN) then begin
    Setting("Delivery Terms",ShipDealLClass,modSO);
  end;
  if (HasModSL) then begin
    Setting("Down Payments",DownPayTClass,modSO);
  end;
  if (HasModSL==false) then begin
    Setting("Invoice Settings",AccTClass,modSO);
  end;
  if (HasNumberSeries) then begin
    Setting("Number Series - Orders",ORSerTClass,modSO);
  end;
  Setting("Payment Terms",PDLClass,modSO);
  Setting("Planned Delivery",PlanDeliveryTClass,modSO);
  Setting("Units",UnitLClass,modSO);
  
  Document("Orders",ORRClass,OrdForm,OrdFClass,modSO);
  
  if (HasModIN) then begin
    Report("Deliverable List",ShipableRClass,ShipableRn,0,modSO);
    Report("Delivery List",DeliveryRClass,DeliveryRn,0,modSO);
  end;
  Report("GP, Orders",ORGPRClass,ORGPRn,0,modSO);
  Report("Item List",ArtRClass,ArtRn,0,modSO);
  Report("Order Journal",ORJRClass,OrdRn,0,modSO);
  Report("Ordered Items",OrdItemRClass,OrdItemRn,0,modSO);
  if (HasModIN) then begin
    Report("Outstanding Orders",OrderStockRClass,OrderStockRn,0,modSO);
  end;

/*modPO*/

  Register("Purchase Orders","Purchase Orders",POVc,modPO);
  Register("Contacts","Contacts",CUVc,modPO);
  Register("Items","Items",INVc,modPO);

  if (HasModIN) then begin
    Setting("Delivery Terms",ShipDealLClass,modPO);
  end;
  if (HasNumberSeries) then begin
    Setting("Number Series - Purchase Orders",POSerTClass,modPO);
  end;

  Report("Deficiency List",PurRClass,PurRn,0,modPO);
  Report("Outstanding Purchase Orders",POOrdStockRClass,POOrdStockRn,0,modPO);  
  Report("Purchase Order Journal",PurOrdJRClass,PurOrdJRn,0,modPO);

  Document("Purchase Orders",PORClass,POForm,POFClass,modPO); 

/* modQT */
  Register("Quotations","Quotations",QTVc,modQT);
  if (HasModCRM) then begin
    Register("Contacts","Contacts",CUVc,modQT);
  end;
  Register("Items","Items",INVc,modQT);
  if (HasPriceLists) then begin
    Register("Prices","Prices",PLVc,modQT);
  end;
  //Register("Pre Quotations","Pre Quotations",PreQTVc,modQT); no funcionality for this one
  if (HasNumberSeries) then begin
    Setting("Number Series - Quotations",QTSerTClass,modQT);
  end;
  Setting("Quotation Classes",QuoteClassTClass,modQT);
  Setting("Quotation Settings",QTSettTClass,modQT);

  Document("Quotations",QTRClass,QTForm,QTFClass,modQT);
  if (HasLocalization("PRT")) then begin
    Document("Proforma Invoice, Quotations",ProformaQTRClass,ProformaQTForm,ProformaQTFClass,modQT);
  end;
  
  if (HasLocalization("PRT")) then begin
    Report("Proforma Invoice Journal",ProformaIVJRClass,ProformaIVJRn,0,modQT);
  end;
  Report("Accepted Quotations Journal",QTHistoryRClass,QTHstRn,0,modQT);
  Report("Outstanding Quotations",QTStkRClass,QTStkRn,0,modQT);
  Report("Pipeline",QTPipelineRClass,QTPipelineRn,0,modQT);
  Report("Quotation Journal",QTJRClass,QTJRn,0,modQT);

/* modDI */
  
  Register("Items","Items",INVc,modDI);
//  Register("Item Formulae","Item Formulae",CPMVc,modDI);
  Register("Discount Matrices","Discount Matrices",RebVc,modDI);
  Register("Prices","Prices",PLVc,modDI);
  Register("Price Lists","Price Lists",PLDefVc,modDI);
  Register("Price Formulae","Price Formulae",PFormVc,modDI);
//  Register("Quantity Dependent Discounts","Qty Depend. Discounts",StaffVc,modDI);

  Report("Discount Matrices List",RebListRClass,RebListRn,0,modDI);
  Report("Discount Statistics",Cust2STRClass,Cust2STRn,0,modDI);
  Report("Item List",ArtRClass,ArtRn,0,modDI);
  Report("Price List",PriceRClass,PriceRn,0,modDI);

  if (HasLocalization("DEN")) then begin
    Import("Item Prices import",INDanIn,INDanIn,modDI);
  end;
  Import("Update Cost Prices import",INPrUpdIn,INPrUpdIn,modDI);

  Setting("Qty Dependent Prices",PLQLClass,modDI);
  if (HasItemGroups) then begin
    Setting("Item Groups",ITLClass,modDI);
  end;

  Maintenance("Calculate Prices",CalcPricesVClass,CalcPriceListsMn,modDI);
  Maintenance("Delete Prices",DelPriceListVClass,DelPriceLMn,modDI);
  Maintenance("Update Item Base Prices",ItemPricesVClass,ItemPricesMn,modDI);
  Maintenance("Update Item Cost Prices",ItemCostPricesVClass,INCostPriceMn,modDI);
        
/* modIN */
  
  if (HasModSO) then begin
    Register("Deliveries","Deliveries",SHVc,modIN);
  end;
  Register("Goods Receipts","Goods Receipts",PUVc,modIN);
  Register("#Stock Depreciations#","#Stock Depreciations#",SDVc,modIN);
  if (HasLocalization("PRT")) then begin
    Register("Returned Goods","Returned Goods",RetVc,modIN);
    Register("Returned Goods to #Suppliers#","Ret. Goods to #Suppliers#",RetPUVc,modIN);
    Register("#Stocktaking#","#Stocktaking#",StockTakeVc,modIN);
  end else begin
    if (HasReturnedGoods) then begin 
      Register("Returned Goods","Returned Goods",RetVc,modIN);
    end;
    if (HasRetGoodsToSupp) then begin 
      Register("Returned Goods to #Suppliers#","Ret. Goods to #Suppliers#",RetPUVc,modIN);
    end;
    Register("#Stocktaking#","#Stocktaking#",StockTakeVc,modIN);
    Register("Items","Items",INVc,modIN);
//    Register("Contacts","Contacts",CUVc,modIN);
  end;
  if (HasMultiLocations) then begin
    if (HasModSO and HasReturnedGoods and HasRetGoodsToSupp) then begin
      Register("#Stock# Movements","#Stock# Movements",StockMovVc,modIN);
    end else begin
      Register("Locations","Locations",LocationVc,modIN);
      Register("#Stock# Movements","#Stock# Movements",StockMovVc,modIN);
    end;
  end;

  if (HasModNL) then begin
    Setting("Account Usage #Stock#",INAccTClass,modIN); 
  end;
  Setting("Barcodes",BarcodeLClass,modIN);    
  if (HasModCRM) then begin
    Setting("Contacts",CULClass,modIN);
  end;
  Setting("Cost Accounting",CostAccTClass,modIN);
  if (HasItemGroups) then begin
    Setting("Item Groups",ITLClass,modIN);
  end;
  Setting("Items",INLClass,modIN);
  if (HasVarieties) then begin
    Setting("Item Varieties",VARLClass,modIN);
    Setting("Item Variety Groups",VARGLClass,modIN);
  end;
  if (HasModSO and HasReturnedGoods and HasRetGoodsToSupp) then begin
    Setting("Locations",LocationLClass,modIN);
  end;
  if (HasNumberSeries) then begin
    if (HasModSO) then begin
      Setting("Number Series - Deliveries",SHSerTClass,modIN);
    end;
    if (HasNumberSeries and HasLocalization("PRT")) then begin 
      Setting("Number Series - Returned Goods",RetSerTClass,modIN);
      Setting("Number Series - Returned Goods to #Supplier#",RetPUSerTClass,modIN);
    end;
    Setting("Number Series - Goods Receipts",PUSerTClass,modIN);
    Setting("Number Series - #Stock Depreciations#",SDSerTClass,modIN);
    if (HasNumberSeries and HasLocalization("PRT")) then begin 
      if (HasMultiLocations) then begin 
        Setting("Number Series - #Stock# Movements",StockMovSerTClass,modIN);
      end;
    end;
    Setting("Number Series - #Stocktaking#",StockTakeSerTClass,modIN);
  end;
  if (HasMultiLocations) then begin 
    Setting("#Stock# Settings",MainStockTClass,modIN);
  end;
  if (HasVarieties) then begin
    Setting("Variety Masks",VARMaskTClass,modIN);
    Setting("Variety Sets",VARMasksLClass,modIN);
    Setting("Variety Settings",VarietyTClass,modIN);
    Setting("Variety Subsets",VARSubsetsLClass,modIN);
  end;

  if (HasModSO) then begin
    Document("Address Labels",AdrLabRClass,AdrLabForm,AdrLabFClass,modIN);
    Document("Delivery Notes",Sh1RClass,Sh1Form,Sh1FClass,modIN);
    Document("Freight Labels",SHLabRClass,SHLabForm,SHLabFClass,modIN);
  end;
  Document("Goods Receipt Labels",PULabRClass,PULabForm,PULabFClass,modIN);
  Document("Goods Receipts",PurchaseRClass,PurchaseForm,PurchaseFClass,modIN);
  Document("Item Labels",ItemLabelRClass,ItemLabelForm,ItemLabelFClass,modIN);
  if (HasModSO) then begin
    Document("Picking Lists",Sh2RClass,Sh2Form,Sh2FClass,modIN);
  end;
  if (HasReturnedGoods) then begin 
    Document("Returned Goods",RetRClass,RetForm,RetFClass,modIN);
  end;
  if (HasRetGoodsToSupp) then begin 
    Document("Returned Goods To #Supplier#",RetPURClass,RetPurchaseForm,RetPUFClass,modIN);  
  end;
  Document("#Stock Depreciations#",SDRClass,SDForm,SDFClass,modIN);

  if (HasModPO or HasModSO) then begin
    Report("Deficiency List",PurRClass,PurRn,0,modIN);
  end;
  if (HasModSO) then begin
    Report("Delivery Journal",SHJRClass,ShipRn,0,modIN);
    Report("Delivery List",SHListRClass,ShipListRn,0,modIN);
  end;
  Report("Goods Receipt Journal",PUJRClass,PUJRn,0,modIN);
  Report("Item History",INrsRClass,INrsRn,0,modIN);
  Report("Item List",ArtRClass,ArtRn,0,modIN);
  Report("#Stock Depreciation# Journal",SDJRClass,StockDepRn,0,modIN);
  Report("#Stock# In Journal",StockJInRClass,StockInRn,0,modIN);
  Report("#Stock# List",INRClass,InvValRn,0,modIN);
  Report("#Stock# Out Journal",StockJOutRClass,StockOutRn,0,modIN);
  Report("#Stocktaking# Comparison",STCompRClass,STCompRn,0,modIN);
  Report("#Stocktaking# List",StockTakeRClass,StockTakeRn,0,modIN);
  Report("#Supplier#/Item Statistics",VeInRClass,VeInRn,0,modIN);


  Maintenance("#Stocktaking# Comparison",STCompVClass,STCompMn,modIN);
  if (HasModProd) then begin
    Maintenance("Update Recipes",UpdRecepyVClass,UpdRecepyMn,modIN);
  end;

//  if (HasLocalization("PRT")) then begin
//    Export("SAFT Stock",PortStockXmlEClass,PortStockXmlEn,modIN);
//  end;

/* modExp */

  Register("Expenses","Expenses",ExpVc,modExp);
  Register("Personnel Payments","Personnel Payments",PPVc,modExp);
  if (HasFormEditor) then begin
    Register("Forms","Forms",DocVc,modExp);
  end;

  Setting("Accounts",AccLClass,modExp); 
  Setting("Company Info",CYWClass,modExp); 
  if (IsUsingActivationCodes) then begin
    Setting("Internet Enablers",InternetEnablerTClass,modExp);
  end;
  Setting("Payment Modes",PMTClass,modExp); 
/*  
//  if (ClientMode) then begin //or persons which are not supposed to login but they do have expenses
    Setting("Persons",UserLClass,modExp);
//  end;
*/
  Setting("Reporting Periods",PeriodTClass,modExp);
  if (HasFormEditor) then begin
    Setting("Styles",StyleLClass,modExp); 
  end;
  Setting("#VAT# Codes",VATCodeTClass,modExp); 

  Document("Expenses",ExpRClass,ExpForm,ExpFClass,modExp);
  Document("Personnel Payment Receipts",PPRClass,PersPayForm,PPDFClass,modExp);

  Report("Company Info",CompInfoRClass,CompInfoRn,0,modExp);
  Report("Expenses Journal",ExpJRClass,ExpRn,0,modExp);
//  Report("Periodic Personnel Statement",PersPerRClass,PersPerRn,0,modExp);
  Report("Personnel Payment Journal",PPJRClass,PPRn,0,modExp);

//  Export("Company Text Backup",TBEClass,CompanyTBEn,modExp);
  if (GuiType!=kGuiiPhone) then begin
    Export("Database Text Backup",TBEClass,DatabaseTBEn,modExp);
  end;
  Export("Remote Backup",TBRemoteEClass,RemoteTBEn,modExp);

  Import("Automatic",0,FullyAutIn,modExp);
  Import("Automatic, manual file search",0,AutIn,modExp);

/* modCO */

  Register("Contracts","Contracts",COVc,modCO);
  Register("Invoices","Invoices",IVVc,modCO);
  Register("Contacts","Contacts",CUVc,modCO);
  Register("Items","Items",INVc,modCO);
  if (HasFormEditor) then begin
    Register("Forms","Forms",DocVc,modCO);
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Register("Currencies","Currencies",CurncyCodeVc,modCO); 
  end;
  if (HasMultiCurrency) then begin
    Register("Exchange Rates","Exchange Rates",ERVc,modCO);
  end;

  Document("Cash Notes",KIVRClass,CashInvForm,CashFClass,modCO);
  Document("Contracts",ContractRClass,ContractForm,ContractFClass,modCO);
  Document("#Credit Notes#",CIVRClass,CredInvForm,CredFClass,modCO);
  Document("Invoices",IVRClass,InvForm,InvFClass,modCO); 
  Document("Periodic Customer Statement",CuPerRClass,CuPerForm,CuPerFClass,modCO);
  Document("Receipt Forms",IPDRClass,IPDForm,IPDFClass,modCO);

  Setting("Company Info",CYWClass,modCO); 
  if (LicenseMode==kLicenseModeServer) then begin
    Setting("Configure Users",ConfigureUsersTClass,modCO);
  end;
  Setting("Contract Classes",ContractClassTClass,modCO);
  Setting("Contract Defaults",CODefValTClass,modCO);
//  Setting("Contract Settings",ContractSetTClass,modCO);
//  Setting("Customer Contract Defaults",CUCODefValLClass,modCO);
//  Setting("Renew Contracts",RenewCOLClass,modCO);
//  Setting("Credit Limit",CreditLimitTClass,modCO);
//  Setting("Interest",IITClass,modCO);
//  Setting("Info in Customer Status Report",CustPSLClass,modCO);
  Setting("Invoice Settings",AccTClass,modCO);
/*  
  if (UseAppStoreEnabler==false) then begin
    Setting("Internet Enablers",InternetEnablerTClass,modCO);
  end;
*/  
  if (HasItemClassification) then begin
    Setting("Item Classifications",DILClass,modCO);
  end;
  if (IsUsingActivationCodes) then begin
    Setting("Internet Enablers",InternetEnablerTClass,modSY);
  end;
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT,ZWE")) then begin
    Setting("Item Groups",ITLClass,modCO);
  end;
  if (HasNumberSeries or HasLocalization("LVA")) then begin
    Setting("Legal Invoice Numbers",LegalInvNrTClass,modCO);
  end;    
  Setting("Payment Modes",PMTClass,modCO);
  Setting("Payment Terms",PDLClass,modCO);
  Setting("Reporting Periods",PeriodTClass,modCO);
  if (HasFormEditor) then begin      
    Setting("Styles",StyleLClass,modCO); 
  end;
  Setting("Units",UnitLClass,modCO);
  Setting("#VAT# Codes",VATCodeTClass,modCO); 

  Report("Company Info",CompInfoRClass,CompInfoRn,0,modCO);
  Report("Contract Contacts",Contra2RClass,Contra2Rn,0,modCO);
  Report("Contract History",COHistRClass,COHistRn,0,modCO);
//  Report("Contract Item Statistics",COINStatisticsRClass,COINStatisticsRn,0,modCO);
  Report("Contract List",CORClass,CORn,0,modCO);

  Report("Contract Worth",COworthRClass,COworthRn,0,modCO);

  Report("Customer List",CURClass,CustRn,0,modCO);

  Report("Invoice Journal",IVJRClass,InvoiceRn,0,modCO);
  Report("Invoiceable Contracts",COInvRClass,COInvRn,0,modCO);
  Report("Item List",ArtRClass,ArtRn,0,modCO);

  Maintenance("Cancel Unpaid Contracts",CancelDueCOVClass,CancelDueCOMn,modCO);
//  Maintenance("Change Contract Currency",ChangeCOCurrencyVClass,ChangeCOCurrencyMn,modCO);
  Maintenance("Change Contracts",ChangeCOVClass,ChangeCOMn,modCO);
  Maintenance("Create Contract Invoices",CreateCOInvVClass,CreateCOInvMn,modCO);
  Maintenance("Renew Contracts",RenewCOVClass,RenewCOMn,modCO);
  Maintenance("Update Contracts",UpdateCOVClass,UpdateCOMn,modCO);

  if (HasLocalization("PRT")) then begin
//    Export("Communication of Invoices to AT - SAFT",PortTaxXml2EClass,PortTaxXml2En,modCO);    
  end;  
  if (GuiType!=kGuiiPhone) then begin
    Export("Database Text Backup",TBEClass,DatabaseTBEn,modCO);  
  end;
  Export("Remote Backup",TBRemoteEClass,RemoteTBEn,modCO);
  if (HasLocalization("PRT")) then begin
    Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modCO);
  end;  
  
  Import("Automatic",0,FullyAutIn,modCO);
  Import("Manual file search",0,AutIn,modCO);

/*modPOS*/

  Register("POS Invoices","POS Invoices",NPTSIVCashLClass,modPOS);
  Register("Contacts","Contacts",CUVc,modPOS);
  Register("Items","Items",INVc,modPOS);

  if (HasLocalization("HRV")) then begin
    Setting("Cash Events",CashLClass,modPOS);
  end;
  Setting("Company Info",CYWClass,modPOS); 
  if (LicenseMode==kLicenseModeServer) then begin
    Setting("Configure Users",ConfigureUsersTClass,modPOS);
  end;
  Setting("Default Payment Modes",DefCashTClass,modPOS);
  if (HasLocalization("BRA")) then begin
    Setting("Fiscal Printer #VAT# Codes (Brazil)",ZimFiscalPrinterVATCodeTClass,modPOS);
  end;
  if (HasLocalization("ZWE")) then begin
    Setting("Fiscal Printer #VAT# Codes (Zimbabwe)",ZimFiscalPrinterVATCodeTClass,modPOS);
  end;
  if (IsUsingActivationCodes) then begin
    Setting("Internet Enablers",InternetEnablerTClass,modPOS);
  end;
  if (HasItemClassification) then begin
    Setting("Item Classifications",DILClass,modPOS);
  end;
  if (HasItemGroups or HasLocalization("BRA,PRT,ZWE")) then begin
    Setting("Item Groups",ITLClass,modPOS);
  end;
  Setting("Invoice Settings",AccTClass,modPOS);
  if (HasLocalMachines) then begin
    Setting("Local Machine",LocalMachineTClass,modPOS);
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Setting("Payment Currencies",POSCurrenciesTClass,modPOS);
  end;    
  Setting("Payment Modes",PMTClass,modPOS); 
  if (ClientMode) then begin
    Setting("Persons",UserLClass,modPOS);
  end;
  Setting("POS Buttons",POSButtonsLClass,modPOS);
  if (HasLocalization("HRV")) then begin
    Setting("POS Settings",CashierDefTClass,modPOS);
  end;
  Setting("Reporting Periods",PeriodTClass,modPOS);
  if (HasFormEditor) then begin
    Setting("Styles",StyleLClass,modPOS); 
  end;
  if (HasModNL==false) then begin
    if (HasLocalization("BRA,HRV")) then begin
      Setting("Tax Templates",TaxTemplateLClass,modPOS);
      Setting("Transaction Settings",TrTClass,modPOS);
    end;
    if (HasLocalization("KEN")) then begin
      Setting("Tax Templates",TaxTemplateLClass,modPOS);
    end;
  end;
  Setting("Units",UnitLClass,modPOS);   
  Setting("#VAT# Codes",VATCodeTClass,modPOS); 
  if (HasLocalization("HRV,SVN,SRB")) then begin
    Setting("XML Schema Definitions",XMLExportLClass,modPOS);
  end;

  Document("POS Invoices",IVCashRClass,InvCashForm,IVCashFClass,modPOS);

//  Report("Cash Receipts",CashReceiptRClass,CashReceiptRn,0,modPOS);
  if (HasLocalization("HRV")) then begin
    Report("Cash Up",CashupRClass,CashupRn,0,modPOS);
  end;
  Report("Company Info",CompInfoRClass,CompInfoRn,0,modPOS);
  if (HasLocalization("HRV")) then begin
    Report("Consumption Taxes Summary",ConsTaxSumRClass,ConsTaxSumRn,0,modPOS);
  end;
  if (HasModIN) then begin
    Report("GP, POS Invoices", PIVGPRClass,PIVGPRn,0,modPOS);
  end;
  Report("Item List",ArtRClass,ArtRn,0,modPOS);
  Report("Item Statistics",ArtSTRClass,ArtSTRn,0,modPOS);
  if (HasModNL) then begin
    Report("#N/L# Transfer, Cash Invoices", TransGenPOSRClass,TransGenPOSRn,0,modPOS);
  end;
//  Report("GP, POS Invoices", PIVGPRClass,PIVGPRn,0,modPOS);
  Report("POS Invoice Journal",IVCJRClass,InvCashRn,0,modPOS);
  if (HasVarieties) then begin
    Report("Variety Enquiry",VarEnqRClass,VarEnqRn,0,modPOS);
  end;
  
  if (HasModNL) then begin
    Maintenance("Cash Up",CashupVClass,CashupMn,modPOS);
  end;
  if (HasModIN) then begin
    Maintenance("Update #Stock#",POSUpdStockVClass,POSUpdStockMn,modPOS);
  end;
  
  Maintenance("Cash Up",CashupVClass,CashupMn,modPOS);
  Maintenance("Create POS Buttons",CreatePOSButtonsVClass,CreatePOSButtonsMn,modPOS);
  Maintenance("Create Slips #N/L# Trans",NLTransCredCardSlipVClass,NLTransCredCardSlipMn,modPOS);
//  Maintenance("Create #NL# Transaction",DayBalVClass,DayBalMn,modPOS); // Don't think it should be used any more
  if (HasLocalization("HRV")) then begin
    Maintenance("Invoices without Official No.",XMLExportVClass,XMLExportMn,modPOS);
  end;
  Maintenance("Process Deferred CC Transactions",ProDefCCTransVClass,ProDefCCTransMn,modPOS);
  Maintenance("Update #Stock#",POSUpdStockVClass,POSUpdStockMn,modPOS);

  if (HasLocalization("PRT")) then begin
    Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modPOS);
  end;  

/* modCRM */

  Register("Contacts","Contacts",CUVc,modCRM);
  Register("Activities","Activities",ActVc,modCRM);
  if (HasModQT) then begin
    Register("Quotations","Quotations",QTVc,modCRM);
    Register("Items","Items",INVc,modCRM);
  end;
  
  Report("Activities, Contacts",ActCURClass,ActCURn,0,modCRM);
  Report("Activity History",CallHistRClass,CallHistRn,0,modCRM);
  Report("Activities, Persons",ActPersRClass,ActPersRn,0,modCRM);
  Report("Birthday List",BirthDayRClass,BirthDayRn,0,modCRM);
  Report("Company Info",CompInfoRClass,CompInfoRn,0,modCRM);
  Report("Contact List",CURClass,CustRn,0,modCRM);
  Report("Customer Status",CustPSRClass,CustPSRn,0,modCRM);
  if (HasModQT) then begin
    Report("Item List",ArtRClass,ArtRn,0,modCRM);
  end;
  Report("List Invalid Phone Numbers",InvPhoneNoRClass,InvPhoneNoRn,0,modCRM);
  if (HasModQT) then begin
    Report("Outstanding Quotations",QTStkRClass,QTStkRn,0,modCRM);
  end;
  Report("Person List",UserRClass,UserRn,0,modCRM);
  Report("Personal Calendar",ActCalRClass,ActCalRn,0,modCRM);
  if (HasModQT) then begin
    Report("Pipeline",QTPipelineRClass,QTPipelineRn,0,modCRM);
    Report("Quotation Journal",QTJRClass,QTJRn,0,modCRM);
  end;
  Report("Search for Contact Person",SearchContactRClass,SearchContactRn,0,modCRM);

  Document("Activities",ActDocRClass,ActDocForm,ActDocFClass,modCRM);
  Document("Contact Labels",CoLabRClass,CoLabForm,CoLabFClass,modCRM);
  if (HasModQT) then begin
    Document("Quotations",QTRClass,QTForm,QTFClass,modCRM);
  end;

  if (HasAccessGroups) then begin
    Setting("Access Groups",AccessLClass,modCRM);
  end;
  Setting("Active Users",ListUsersClass,modCRM);
  Setting("Activity Classes",ActTypeGrLClass,modCRM);
  Setting("Activity Types",ActTypeLClass,modCRM);
  if (HasFormEditor) then begin
    Setting("Forms",DocLClass,modCRM);
  end;
  Setting("Company Date and Numeric Format",SysFormatTClass,modCRM);
  Setting("Company Info",CYWClass,modCRM);
  if (LicenseMode==kLicenseModeServer) then begin
    Setting("Configure Users",ConfigureUsersTClass,modCRM);
  end;
  Setting("Contact Relations",ContactRelLClass,modCRM);
  if (HasModQT) then begin
    Setting("Customer Relations",ContactRelLClass,modCRM);
  end;
  Setting("Info in Customer Status Report",CustPSLClass,modCRM);
/*  
  if (UseAppStoreEnabler==false) then begin
    Setting("Internet Enablers",InternetEnablerTClass,modCRM);
  end;
*/  
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT,ZWE")) then begin
    Setting("Item Groups",ITLClass,modCRM);
  end;  
  Setting("Local Machine",LocalMachineTClass,modCRM);
  if (ClientMode) then begin
    Setting("Persons",UserLClass,modCRM);
  end;
  if (HasModQT) then begin
    Setting("Payment Terms",PDLClass,modCRM);
  end;
//  Setting("Program Mode",ProgramStatusTClass,modCRM);//cloud hosting
  if (HasModQT) then begin
    Setting("Quotation Classes",QuoteClassTClass,modCRM);
  end;
  Setting("Reporting Periods",PeriodTClass,modCRM);
  if (HasFormEditor) then begin
    Setting("Styles",StyleLClass,modCRM);
  end;
  if (HasModQT) then begin
    if (HasLocalization("BRA,KEN")) then begin
      Setting("Tax Templates",TaxTemplateLClass,modCRM);
    end;  
  end;
  Setting("Text Types",TextTypeLClass,modCRM);
  if (HasModQT) then begin
    Setting("Units",UnitLClass,modCRM);
  end;
/*  
  if (HasLocalization("BRA")) then begin
    Setting("User Defined Fields - Contacts",CUUserLabelTClass,modCRM);
  end;
*/  
  if (HasModQT) then begin
    Setting("#VAT# Codes",VATCodeTClass,modCRM);
  end;

  Export("Activities",ExpActEClass,ExpActEn,modCRM);
//  Export("Client Text Backup",TBEClass,ClientTBEn,modCRM);
//  Export("Company Text Backup",TBEClass,CompanyTBEn,modCRM);
  if (GuiType!=kGuiiPhone) then begin
    Export("Database Text Backup",TBEClass,DatabaseTBEn,modCRM);
  end;
  Export("Remote Backup",TBRemoteEClass,RemoteTBEn,modCRM);  
  Export("Contacts",BPCUEClass,BPCUEn,modCRM);//for Business Phone, why in this module?? We have the Integration module, it should probably be there
//  Export("Raw Data",TBEClass,RawDataEn,modCRM);
//  Export("Run Timed Backup",TBEClass,RunTimedTBEn,modCRM);

  Import("Automatic",FullyAutIn,FullyAutIn,modCRM);// if we put it like that we will be able to make access systme working
  Import("Manual File Search",AutIn,AutIn,modCRM);// if we put it like that we will be able to make access systme working

  Maintenance("Rebuild Number Recognition Register",NormPhoneNumVClass,NormPhoneNumMn,modCRM);
//  Maintenance("Restore Application",ResetDBWClass,0,modCRM);

/* modCL */

  Register("Cash In","Cash In",CLInVc,modCL);
  Register("Cash Out","Cash Out",CLOutVc,modCL);
  if (HasModSL and HasLocalization("POL")==false) then begin
    Register("Receipts","Receipts",IPVc,modCL);
  end;
  if (HasModPL and HasLocalization("POL")==false) then begin
    Register("Payments","Payments",OPVc,modCL);
  end;
  if (HasModExp) then begin
    Register("Personnel Payments","Personnel Payments",PPVc,modCL);
  end;
  
  Setting("Cash Book Settings",MainCLTClass,modCL);
  Setting("Expense Accounts",CLCorspLClass,modCL);
  if (HasNumberSeries) then begin
    Setting("Number Series - Cash In",CLInSerTClass,modCL);
    Setting("Number Series - Cash Out",CLOutSerTClass,modCL);
  end;
  Setting("Payment Modes",PMTClass,modCL);
  
  Report("Cash Book",CLIORClass,CashBRn,0,modCL);
  if (HasLocalization("LTU")) then begin
    Report("Cash Book (Lithuania)",CashBookLitRClass,CashBookLitRn,0,modCL);
  end;
  Report("Cash In Journal",CLInJRClass,CLInJRn,0,modCL);  
  Report("Cash Out Journal",CLOutJRClass,CLOutJRn,0,modCL);  
  if (HasModNL or HasLocalization("POL")) then begin
    Report("#N/L# Cash Book",CashBookLatRClass,CashBookLatRn,0,modCL);
  end;

  Document("Cash In",CLInRClass,CLInForm,CLInFClass,modCL);
  Document("Cash Out",CLOutRClass,CLOutForm,CLOutFClass,modCL);

  Maintenance("OK Cash Ins and Cash Outs",OKCLVClass,OKCLMn,modCL);

/* modEmail */

  Register("Email Queue","Email Queue",EMailQueVc,modEmail);
  Register("Mailboxes","Mailboxes",ConferenceWClass,modEmail);

  Setting("Email SMTP Server",EmailTClass,modEmail);
  
/* modSVO */
  Register("Service Orders","Service Orders",SVOVc,modSVO);
  Register("Work Orders","Work Orders",WOVc,modSVO);
  
  if (HasNumberSeries) then begin
    Setting("Number Series - Service Orders",SVOSerTClass,modSVO);
    Setting("Number Series - Work Sheets",WSSerTClass,modSVO);
  end;
  Setting("Standard Problems",StandProblemLClass,modSVO);
  
  Document("Service Orders",SVORClass,SVOForm,SVOFClass,modSVO);
  Document("Work Sheets",WSRClass,WSForm,WSFClass,modSVO);
  
  Report("Outstanding Service Orders",SVOStockRClass,SVOStockRn,0,modSVO);
  Report("Service Order Journal",SVOListRClass,SVOListRn,0,modSVO);
  Report("Service Order Status",SVOStaRClass,SVOStaRn,0,modSVO);
  Report("Work Sheet Journal",WSListRClass,WSListRn,0,modSVO);
  
/* modProd */

  Register("Productions","Productions",ProdVc,modProd);
  Register("Recipes","Recipes",RecVc,modProd);
  Register("Items","Items",INVc,modProd);

  Setting("Number Series - Productions",ProdSerTClass,modProd);

  Report("Production Journal",ProdRClass,ProdRn,0,modProd);
  Report("Production Queue",ProdOrderQueueRClass,ProdOrderQueue2Rn,0,modProd);
  Report("Production Status",ProdStatusRClass,ProdStatusRn,0,modProd);
  Report("Recipe List (Made of)",Rec2RClass,Rec2Rn,0,modProd);
  Report("Recipe List (Part of)",RecRClass,RecRn,0,modProd);

  Document("Productions",ProdOrderRClass,ProdOrderForm,ProdOrderFClass,modProd);
  Document("Recipe",RecDocRClass,RecForm,RecFClass,modProd);

  Maintenance("Create Planned Records from Ordered Items",PlanRecordsVClass,PlanRecordsMn,modProd);
  Maintenance("Update Recipes",UpdRecepyVClass,UpdRecepyMn,modProd);
  
/* modTS */
  
  Register("Time & Materials","Time & Materials",TSVc,modTS);
  Register("Projects","Projects",PRVc,modTS);
  Register("Project Transactions","Project Transactions",TBIVVc,modTS);
  Register("Project Budgets","Project Budgets",TBBUVc,modTS);
  Register("Quotations","Quotations",QTVc,modTS);
  Register("Items","Items",INVc,modTS);
  Register("Contacts","Contacts",CUVc,modTS);

  if (HasItemGroups or HasLocalization("BRA,ITA,PRT")) then begin
    Setting("Item Groups",ITLClass,modTS);
  end;
  if (HasNumberSeries) then begin
    Setting("Number Series - Projects",PRSerTClass,modTS);
    Setting("Number Series - Quotations",QTSerTClass,modTS);
    Setting("Number Series - Time & Materials",TSSerTClass,modTS);
  end;
  Setting("Project Classes",PRClassTClass,modTS);
  Setting("Project Settings",PRITClass,modTS);
  Setting("Quotation Classes",QuoteClassTClass,modTS);  
  Setting("#VAT# Codes",VATCodeTClass,modTS);

  Report("Budget Follow-up",BudFollPRClass,BudPFoll2Rn,0,modTS);
  Report("Project Invoicing",ProInvRClass,ProInvRn,0,modTS);
  Report("Project List",ProListRClass,PRListRn,0,modTS);
  Report("Project Price List",ProjPLRClass,ProjPLRn,0,modTS);
  Report("Project Status",ProStatRClass,ProStatRn,0,modTS);
  Report("Project Transactions",PrTransRClass,PrTranRn,0,modTS);
  Report("Quotation Journal",QTJRClass,QTJRn,0,modTS);
  Report("Time & Materials Journal",TSJRClass,TSJRn,0,modTS);

  Document("Project Budgets",TBBudgetRClass,TBBudgetForm,TBBudgetFClass,modTS);
  Document("Project Info",ProjectInfoRClass,ProjectInfoForm,ProjectInfoFClass,modTS);
  Document("Project Transactions",ProjectTransRClass,ProjectTransForm,ProjectTransFClass,modTS);
  Document("Projects",ProjectRClass,ProjectForm,ProjectFClass,modTS);
  Document("Quotations",QTRClass,QTForm,QTFClass,modTS);
  Document("Time & Materials",TimeSheetRClass,TimeSheetForm,TimeSheetFClass,modTS);

  Maintenance("Create Project Invoices",ProInvVClass,ProInvMn,modTS);
  
  end;

  return;
end;
