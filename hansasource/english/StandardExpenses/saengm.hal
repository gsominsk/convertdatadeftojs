/* sxsengm1.hal */
/* Standard Expenses by HansaWorld */

/* This is no longer an Event, make sure you don't have this in */
// event startup
external function Boolean HasDeveloperMode();
external function Boolean HasPersons();
external function Boolean HasFormEditor();
external function Boolean HasModQT();
external function Boolean HasSerialNumbers();
external function Boolean HasModAT2();
external function Boolean HasModCL();
external function Boolean HasStandardCRM();
external function Boolean HasModExp();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();
external function Boolean HasModSO();
external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModSL();
external function Boolean HasModPL();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModRest();
external function Boolean HasModCRM();
external function Boolean HasPayroll();

external function Boolean HasAdvancedPricing();
external function Boolean HasBase2();
external function Boolean HasContactClassification();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLocalMachines();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNumberSeries();
external function Boolean HasOfficialSerNr();
external function Boolean HasObjects();
external function Boolean HasPriceLists();
external function Boolean HasVarieties();
external procedure SetProductTags();
external procedure LoadWindowTags();


begin
  Real h,v,l,vs;

  SetLangMode(LangEnglish,"ENG",2);

  if (BuildProductCode=="StandardExpenses") then begin
  
  SetProductTags;
  LoadWindowTags;

  Module("Expenses","",730,modExp);
  
  RegisterWS("Expenses","Expenses","New Expense",ExpVc,modExp);
  RegisterWS("Personnel Payments","Personnel Payments","New Personnel Payment",PPVc,modExp);
  if (HasFormEditor) then begin
    RegisterWS("Forms","Forms","New Form",DocVc,modExp);
  end;
  if (HasDeveloperMode or HasPersons) then begin
    RegisterWS("Persons","Persons","New Person",UserVc,modExp);
  end;  

  Setting("Accounts",AccLClass,modExp); 
  Setting("Company Info",CYWClass,modExp); 
  if (LicenseMode==kLicenseModeServer) then begin
    Setting("Configure Users",ConfigureUsersTClass,modExp);
  end;
  if (IsUsingActivationCodes) then begin
    Setting("Internet Enablers",InternetEnablerTClass,modExp);
  end;
  Setting("Payment Modes",PMTClass,modExp); 
//  if (ClientMode) then begin //or persons which are not supposed to login but they do have expenses
    Setting("Persons",UserLClass,modExp);
//  end;
  Setting("Reporting Periods",PeriodTClass,modExp);
  if (HasFormEditor) then begin
    Setting("Styles",StyleLClass,modExp); 
  end;
  Setting("#VAT# Codes",VATCodeTClass,modExp); 

  Document("Expenses",ExpRClass,ExpForm,ExpFClass,modExp);
  Document("Personnel Payment Receipts",PPRClass,PersPayForm,PPDFClass,modExp);

  Report("Company Info",CompInfoRClass,CompInfoRn,0,modExp);
  Report("Expenses Journal",ExpJRClass,ExpRn,0,modExp);
//  Report("Periodic Personnel Statement",PersPerRClass,PersPerRn,0,modExp);
  Report("Personnel Payment Journal",PPJRClass,PPRn,0,modExp);

//  Export("Company Text Backup",TBEClass,CompanyTBEn,modExp);
  if (GuiType!=kGuiiPhone) then begin
    Export("Database Text Backup",TBEClass,DatabaseTBEn,modExp);
  end;
  //Export("Remote Backup",TBRemoteEClass,RemoteTBEn,modExp);

  Import("Automatic",0,FullyAutIn,modExp);
  Import("Automatic, manual file search",0,AutIn,modExp);
  
  end;  
  return;
end;
