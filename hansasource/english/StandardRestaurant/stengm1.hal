/* stengm1.hal */
/* Standard Restaurant by HansaWorld */

/* This is no longer an Event, make sure you don't have this in */
// event startup
external function Boolean HasDeveloperMode();
external function Boolean HasRestaurantBookings();
external function Boolean HasPersons();
external function Boolean HasModQT();
external function Boolean HasSerialNumbers();
external function Boolean HasModAT2();
external function Boolean HasModCL();
external function Boolean HasStandardCRM();
external function Boolean HasModExp();
external function Boolean HasIncomeAndExpenseBook();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();
external function Boolean HasModSO();
external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModSL();
external function Boolean HasModPL();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModRest();
external function Boolean HasModCRM();
external function Boolean HasPayroll();

external function Boolean HasFormEditor();
external function Boolean HasAdvancedPricing();
external function Boolean HasBase2();
external function Boolean HasCategories();
external function Boolean HasContactClassification();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLocalMachines();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNumberSeries();
external function Boolean HasOfficialSerNr();
external function Boolean HasObjects();
external function Boolean HasPriceLists();
external function Boolean HasVarieties();
external procedure SetProductTags();
external procedure LoadWindowTags();


begin
  Real h,v,l,vs;

  SetLangMode(LangEnglish,"ENG",2);

  if (BuildProductCode=="StandardRestaurant") then begin

  SetProductTags;
  LoadWindowTags;

  Module("#Restaurant#","",730,modRest);
  
  if (HasModNL) then begin
    Module("#Nominal Ledger#","",730,modNL);
  end;
  if (HasModCL) then begin
    Module("Cash Book","",730,modCL);
  end;
  if (HasModPL) then begin
    Module("#Purchase Ledger#","",730,modPL);  
  end;
  if (HasModPO) then begin
    Module("#Purchase Orders#","",730,modPO);
  end;
  if (HasModIN) then begin
    Module("#Stock#","",730,modIN);
  end;
  
/* modRest */

  RegisterWS("Tabs","Tabs","New Tab",RestAccVc,modRest);
  RegisterWS("Items","Items","New Item",INVc,modRest);
  if (HasFormEditor) then begin
    RegisterWS("Forms","Forms","New Form",DocVc,modRest);
  end;
  if (HasRestaurantBookings) then begin
    RegisterWS("#Restaurant# Bookings","#Restaurant# Bookings","New Rest. Bookings",RestBookingVc,modRest);
  end;
  if (HasDeveloperMode or HasPersons) then begin
    RegisterWS("Persons","Persons","New Person",UserVc,modRest);
  end;

  if (HasDeveloperMode) then begin
    Setting("Configuration",ModulesTClass,modRest);
    Setting("Cloud Services",EnabServerTClass,modRest);
    Setting("Current License Flags",CurLicensesClass,modRest);
    Setting("Internet Enablers",InternetEnablerTClass,modRest);
    Setting("Licenses",LicensesLClass,modRest);
    RegisterWS("Mailboxes","Mailboxes","New Mailbox",ConferenceWClass,modRest);
    Setting("Std Registration Data",StdRegDataWClass,modRest);
  end;

//  Setting("Bar Tab Classes",RestAccClassLClass,modRest);
  Setting("Company Info",CYWClass,modRest); 
  if (LicenseMode==kLicenseModeServer) then begin
    Setting("Configure Users",ConfigureUsersTClass,modRest);
  end;
//  Setting("Customer Categories",CCatLClass,modRest);
  Setting("Daily Statistics",SalesTimeTClass,modRest); 
  Setting("Default Payment Modes",DefCashTClass,modRest);
//  Setting("Item Classifications",DILClass,modRest);
//  Setting("Item Groups",ITLClass,modRest);
  if (HasLocalization("BRA")) then begin
    Setting("Fiscal Printer #VAT# Codes (Brazil)",ZimFiscalPrinterVATCodeTClass,modPOS);
  end;
  if (HasLocalization("ZWE")) then begin
    Setting("Fiscal Printer #VAT# Codes (Zimbabwe)",ZimFiscalPrinterVATCodeTClass,modRest);
  end;
  if (IsUsingActivationCodes) then begin
    Setting("Internet Enablers",InternetEnablerTClass,modRest);
  end;
  if (HasNumberSeries or HasLocalization("HRV,LVA")) then begin
    Setting("Legal Invoice Numbers",LegalInvNrTClass,modRest);
  end;  
  if (HasLocalMachines) then begin
    Setting("Local Machine",LocalMachineTClass,modRest);
  end;
  Setting("Payment Modes",PMTClass,modRest); 
  if (ClientMode) then begin
    Setting("Persons",UserLClass,modRest);
  end;
//  Setting("POS Button Groups",POSButtonGroupsLClass,modRest);
  Setting("POS Buttons",POSButtonsLClass,modRest);
  if (HasLocalization("HRV")) then begin
    Setting("POS Settings",CashierDefTClass,modRest);
  end;
  Setting("Reporting Periods",PeriodTClass,modRest);
  if (HasRestaurantBookings) then begin
    Setting("#Restaurant# Booking Types",RestBookTypeLClass,modRest);
  end;
//  Setting("#Restaurant# Open Hours",RestOpenHoursLClass,modRest);
//  Setting("#Restaurant# Settings",RestTClass,modRest);
  if (HasFormEditor) then begin
    Setting("Styles",StyleLClass,modRest); 
  end;
  Setting("Tables",NeighbourHoodLClass,modRest);
  if (HasModNL==false) then begin
    if (HasLocalization("BRA,HRV")) then begin
      Setting("Tax Templates",TaxTemplateLClass,modRest);
      Setting("Transaction Settings",TrTClass,modRest);
    end;
    if (HasLocalization("KEN")) then begin
      Setting("Tax Templates",TaxTemplateLClass,modRest);
    end;
  end;
//  Setting("Tables Views",TablesViewsLClass,modRest);
  Setting("Tables View",TableLayoutClass,modRest);
  Setting("Units",UnitLClass,modRest);   
  Setting("#VAT# Codes",VATCodeTClass,modRest); 
  if (HasLocalization("HRV,SVN,SRB")) then begin
    Setting("XML Schema Definitions",XMLExportLClass,modRest);
  end;

  Document("Bar Tab",RestAccRClass,RestAccForm,RestAccFClass,modRest);
//  Document("Bar Tab Kitchen Order",RestAccKitchenRClass,RestAccKitchenForm,RestAccKitchenFClass,modRest);
  Document("Bar Tab Receipt",RestAccReceiptRClass,RestAccReceiptForm,RestAccReceiptFClass,modRest);
  Document("Cancel Order",RestAccRClass,RestAccCancelForm,RestAccCancelFClass,modRest);
  Document("Fire Order",RestAccRClass,RestAccFireOrderForm,RestAccFireOrderFClass,modRest);
  Document("Guest Bill ",RestAccGuestBillRClass,RestAccGuestBillForm,RestAccGuestBillFClass,modRest);

  if (HasLocalization("HRV")) then begin
    Report("Cash Up",CashupRClass,CashupRn,0,modRest);
  end;
  Report("Company Info",CompInfoRClass,CompInfoRn,0,modRest);
  if (HasLocalization("HRV")) then begin
    Report("Consumption Taxes Summary",ConsTaxSumRClass,ConsTaxSumRn,0,modRest);
  end;
  Report("Item List",ArtRClass,ArtRn,0,modRest);
  if (HasRestaurantBookings) then begin
    Report("#Restaurant# Bookings",RestBookingRClass,RestBookingRn,0,modRest);
  end;
  Report("#Restaurant# Daily Statistics",DetSalesTimeRClass,DetSalesTimeRn,0,modRest);  
  Report("#Restaurant# Item Statistics",BarItemStatRClass,BarItemStatRn,0,modRest);
//  Report("#Restaurant# Planning",RestPlanningRClass,RestPlanningRn,0,modRest);
  Report("Tabs Journal",RestAccJRClass,RestAccJRn,0,modRest);
  Report("Void Report",VoidedRowsRClass,VoidedRowsRn,0,modRest);

  if (GuiType!=kGuiiPhone) then begin
    Export("Database Text Backup",TBEClass,DatabaseTBEn,modRest);
  end;
  //Export("Remote Backup",TBRemoteEClass,RemoteTBEn,modRest);
  if (HasLocalization("HRV")) then begin
    Export("Register Export",ExpRegEClass,ExpRegEn,modRest);
  end;
  Export("#Restaurant# Daily Statistics",SalesTimeEClass,SalesTimeEn,modRest);  

  Import("Automatic",0,FullyAutIn,modRest);
  Import("Automatic, manual file search",0,AutIn,modRest);
  
/* modIN */

  if (HasLocalization("HRV")) then begin
    Maintenance("Invoices without Official No.",XMLExportVClass,XMLExportMn,modRest);
  end;
  
  if (HasModSO or HasLocalization("RUS") or HasLocalization("HRV")) then begin
    Register("Deliveries","Deliveries",SHVc,modIN);
  end;
  RegisterWS("Goods Receipts","Goods Receipts","New Goods Receipt",PUVc,modIN);
  RegisterWS("#Stock Depreciations#","#Stock Depreciations#","New #Stock Depreciation#",SDVc,modIN);
  if (HasLocalization("PRT")) then begin 
    if (HasMultiLocations) then begin
      RegisterWS("#Stock# Movements","#Stock# Movements","New #Stock# Movement",StockMovVc,modIN);
    end;
    Register("Returned Goods","Returned Goods",RetVc,modIN);
    RegisterWS("Returned Goods to #Suppliers#","Ret. Goods to #Suppliers#","New Ret. Goods to #Suppliers#",RetPUVc,modIN);
    RegisterWS("#Stocktaking#","#Stocktaking#","New #Stocktaking#",StockTakeVc,modIN);
  end else begin
    RegisterWS("#Stocktaking#","#Stocktaking#","New #Stocktaking#",StockTakeVc,modIN);
    RegisterWS("Items","Items","New Item",INVc,modIN);
//    RegisterWS("Contacts","Contacts",CUVc,modIN);
  end;
  if (HasMultiLocations) then begin 
    RegisterWS("Locations","Locations","New Location",LocationVc,modIN);
//    RegisterWS("#Stock# Movements","#Stock# Movements","New #Stock# Movement",StockMovVc,modIN);
  end;

  if (HasLocalization("HRV")) then begin 
    Setting("Base Price Changes",BPCLClass,modIN);
  end;
  if (HasModNL) then begin
    Setting("Account Usage #Stock#",INAccTClass,modIN); 
  end;
  if (HasModCRM) then begin
    Setting("Contacts",CULClass,modIN);
  end;
  Setting("Cost Accounting",CostAccTClass,modIN);
  if (HasItemGroups) then begin
    Setting("Item Groups",ITLClass,modIN);
  end;
  if (HasLocalization("PRT")) then begin 
    Setting("Items",INLClass,modIN);
  end;
  if (HasVarieties) then begin
    Setting("Item Varieties",VARLClass,modIN);
    Setting("Item Variety Groups",VARGLClass,modIN);
  end;
  if (HasNumberSeries) then begin
    if (HasModSO) then begin
      Setting("Number Series - Deliveries",SHSerTClass,modIN);
    end;
    if (HasNumberSeries and HasLocalization("PRT")) then begin 
      Setting("Number Series - Returned Goods",RetSerTClass,modIN);
      Setting("Number Series - Returned Goods to #Supplier#",RetPUSerTClass,modIN);
    end;
    Setting("Number Series - Goods Receipts",PUSerTClass,modIN);
    Setting("Number Series - #Stock Depreciations#",SDSerTClass,modIN);
    if (HasNumberSeries and HasLocalization("PRT")) then begin 
      if (HasMultiLocations) then begin 
        Setting("Number Series - #Stock# Movements",StockMovSerTClass,modIN);
      end;
    end;
    Setting("Number Series - #Stocktaking#",StockTakeSerTClass,modIN);
  end;
  if (HasLocalization("HRV")) then begin 
    Setting("Recipes",RecLClass,modIN);
  end;
  if (HasMultiLocations) then begin 
    Setting("#Stock# Settings",MainStockTClass,modIN);
  end;  
  if (HasVarieties) then begin
    Setting("Variety Masks",VARMaskTClass,modIN);
    Setting("Variety Sets",VARMasksLClass,modIN);
    Setting("Variety Settings",VarietyTClass,modIN);
    Setting("Variety Subsets",VARSubsetsLClass,modIN);
  end;

  if (HasModSO) then begin
    Document("Address Labels",AdrLabRClass,AdrLabForm,AdrLabFClass,modIN);
    Document("Delivery Notes",Sh1RClass,Sh1Form,Sh1FClass,modIN);
    Document("Freight Labels",SHLabRClass,SHLabForm,SHLabFClass,modIN);
  end else begin
    if (HasLocalization("HRV")) then begin
      Document("Base Price Change",BasePriceChangeRClass,BPChangeForm,BasePriceChangeFClass,modIN);
      Document("Delivery Notes",Sh1RClass,Sh1Form,Sh1FClass,modIN);
    end;
  end;
  Document("Goods Receipt Labels",PULabRClass,PULabForm,PULabFClass,modIN);
  Document("Goods Receipts",PurchaseRClass,PurchaseForm,PurchaseFClass,modIN);
  Document("Item Labels",ItemLabelRClass,ItemLabelForm,ItemLabelFClass,modIN);
  if (HasModSO) then begin
    Document("Picking Lists",Sh2RClass,Sh2Form,Sh2FClass,modIN);
  end;
  Document("#Stock Depreciations#",SDRClass,SDForm,SDFClass,modIN);
  if (HasLocalization("HRV") or (HasModIN and HasMultiLocations)) then begin
    Document("#Stock# Movements",StockMovRClass,StockMovForm,StockMovFClass,modIN);
  end;

  if (HasModPO or HasModSO) then begin
    Report("Deficiency List",PurRClass,PurRn,0,modIN);
  end;
  if (HasModSO) then begin
    Report("Delivery Journal",SHJRClass,ShipRn,0,modIN);
    Report("Delivery List",SHListRClass,ShipListRn,0,modIN);
  end;
  Report("Goods Receipt Journal",PUJRClass,PUJRn,0,modIN);
  Report("Item History",INrsRClass,INrsRn,0,modIN);
  Report("Item List",ArtRClass,ArtRn,0,modIN);
  if (HasLocalization("HRV")) then begin 
    Report("Recipe List (Made of)",Rec2RClass,Rec2Rn,0,modIN);
  end;
  Report("#Stock Depreciation# Journal",SDJRClass,StockDepRn,0,modIN);
  Report("#Stock# In Journal",StockJInRClass,StockInRn,0,modIN);
  Report("#Stock# List",INRClass,InvValRn,0,modIN);
  Report("#Stock# Out Journal",StockJOutRClass,StockOutRn,0,modIN);
  Report("#Stocktaking# Comparison",STCompRClass,STCompRn,0,modIN);
  Report("#Stocktaking# List",StockTakeRClass,StockTakeRn,0,modIN);
  Report("#Supplier#/Item Statistics",VeInRClass,VeInRn,0,modIN);

  Maintenance("#Stocktaking# Comparison",STCompVClass,STCompMn,modIN);
  
/* modPL */

  RegisterWS("#Purchase Invoices#","#Purchase Invoices#","New #Purchase Invoice#",VIVc,modPL);
  RegisterWS("Payments","Payments","New Payment",OPVc,modPL);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modPL);

  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Setting("Account Usage #P/L#",APAccTClass,modPL);
  end;
  if (HasLocalization("AUS,ESP,FIN,GBR,NOR,SWE")) then begin
    Setting("#Bank Files#",BankFileTClass,modPL);
  end;
  if (HasNumberSeries) then begin
    Setting("Number Series - #Purchase Invoices#",VISerTClass,modPL);
    Setting("Number Series - Payments",OPSerTClass,modPL);
    if (HasModNL or HasIncomeAndExpenseBook) and (HasLocalization("POL,HRV")) then begin
      Setting("Number Series - #VAT# Corrections #P/L#",VATVISerTClass,modPL);
    end;
  end;
  Setting("Payment Modes",PMTClass,modPL);
  Setting("Payment Terms",PDLClass,modPL);
  if (HasCategories) then begin
    Setting("#Supplier# Categories",VGLClass,modPL);
  end;
  if (HasModNL or HasIncomeAndExpenseBook) and (HasLocalization("POL,HRV")) then begin
    Setting("#VAT# Corrections #P/L#",VATVILClass,modPL);
    Setting("#VAT# Correction #P/L# Types",VATVITypeTClass,modPL);
  end;
  if (HasLocalization("PRT,ITA")) then begin
    Setting("Withholding Calculation Formulae",WHCalcFormLClass,modPL);
    Setting("Withholding Taxes",WHTaxTClass,modPL);
  end;  
  if (HasLocalization("ESP,FIN,RUS")) then begin
    Setting("Banks",BankLClass,modPL);
  end;
  
  if (HasLocalization("LTU,POL")) then begin
    Document("Open Invoice #Supplier# Statement",APSRClass,APSForm,APSFClass,modPL);
  end;
  Document("Payment Forms",OPDRClass,OPDForm,OPDFClass,modPL);
  Document("Payment Lists",OPRClass,OPForm,0,modPL);
  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Document("#Purchase Invoices#",VIRClass,VIForm,VIFClass,modPL);
  end;

  if (HasLocalization("LTU")) then begin
    Report("Open Invoice #Supplier# Statement",APS2RClass,APS2Rn,0,modPL);
  end;
  Report("Payments Forecast",OPProgRClass,OPProgRn,0,modPL);
  Report("Payment Journal",OPJRClass,OPJRn,0,modPL);
  Report("Periodic #Supplier# Statement",VePer2RClass,VePerRn,0,modPL);
  if (HasLocalization("LVA")) then begin
    Report("Prepayment History #P/L#",PerPayHisPLRClass,PerPayHisPLRn,0,modPL);
  end;
  Report("#Purchase Invoice# Journal",VIJRClass,VIJRn,0,modPL);
  Report("#Purchase Ledger#",APRClass,APRn,0,modPL);
  Report("#Supplier# List",VERClass,VERn,0,modPL);
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("LVA,POL")) and (HasModNL or HasIncomeAndExpenseBook) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# #Supplier# Purchases",RealSuppRClass,RealSuppRn,0,modPL); 
  end;
  if (HasLocalization("HND")) then begin
    Report("#VAT# Report Purchases (Honduras)",PLVATHonRClass,PLVATHonRn,0,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Report("#VAT# Report Purchases (Lithuania)",PLVATLitRClass,PLVATLitRn,0,modPL);
  end;
  
  if (HasLocalization("AUS,ESP,FIN,GBR,NOR,SWE")) then begin
    Export("Banking File",MPEClass,MPEn,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#P/L# #VAT# Invoices (Lithuania)",LitVATRegVIEClass,LitVATRegVIEn,modPL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#P/L# Latvian #VAT# Report",PLVAT1ExpEClass,PLVAT1En,modPL);
    Export("#VAT# Purchases (Latvia)",LatVATPurchasesEClass,LatVATPurchasesEn,modPL);
  end;
    
  if (HasModNL) and (HasLocalization("HRV")) then begin
    Maintenance("Create #VAT# Corrections #P/L#",VATVIVClass,VATVIMn,modPL);
  end;

/* modCL */

  RegisterWS("Cash In","Cash In","New Cash In",CLInVc,modCL);
  RegisterWS("Cash Out","Cash Out","New Cash Out",CLOutVc,modCL);
  if (HasModSL and HasLocalization("POL")==false) then begin
    RegisterWS("Receipts","Receipts","New Receipt",IPVc,modCL);
  end;
  if (HasModPL and HasLocalization("POL")==false) then begin
    RegisterWS("Payments","Payments","New Payment",OPVc,modCL);
  end;
  if (HasModExp) then begin
    RegisterWS("Personnel Payments","Personnel Payments","New Personnel Payment",PPVc,modCL);
  end;
  
  Setting("Cash Book Settings",MainCLTClass,modCL);
  Setting("Expense Accounts",CLCorspLClass,modCL);
  if (HasNumberSeries) then begin
    Setting("Number Series - Cash In",CLInSerTClass,modCL);
    Setting("Number Series - Cash Out",CLOutSerTClass,modCL);
  end;
  Setting("Payment Modes",PMTClass,modCL);
  
  Report("Cash Book",CLIORClass,CashBRn,0,modCL);
  if (HasLocalization("LTU")) then begin
    Report("Cash Book (Lithuania)",CashBookLitRClass,CashBookLitRn,0,modCL);
  end;
  Report("Cash In Journal",CLInJRClass,CLInJRn,0,modCL);  
  Report("Cash Out Journal",CLOutJRClass,CLOutJRn,0,modCL);  
  if (HasModNL or HasLocalization("POL")) then begin
    Report("#N/L# Cash Book",CashBookLatRClass,CashBookLatRn,0,modCL);
  end;

  Document("Cash In",CLInRClass,CLInForm,CLInFClass,modCL);
  Document("Cash Out",CLOutRClass,CLOutForm,CLOutFClass,modCL);

  Maintenance("OK Cash Ins and Cash Outs",OKCLVClass,OKCLMn,modCL);

/* modNL */
  
  if (HasModNL==false) then begin
    if (HasIncomeAndExpenseBook) then begin
      RegisterWS("Accounts","Accounts","New Account",AccVc,modNL);
      RegisterWS("#Transactions#","#Transactions#","New #Transaction#",TRVc,modNL);

      Setting("Fiscal Years",YearTClass,modNL);
      Setting("Income & Expense Book",IncExpBookLClass,modNL);
      if (HasNumberSeries) then begin
        Setting("Number Series - Transactions",TRSerTClass,modNL);
      end;
      Setting("Sub Systems",TRGenTClass,modNL);
      Setting("#VAT# Codes",VATCodeTClass,modNL);
      
      Report("Income & Expense Book",IncExpBookRClass,IncExpBookRn,0,modNL);
    end;
  end else begin
    RegisterWS("Transactions","Transactions","New Transaction",TRVc,modNL);
    if (HasLocalization("AGO,PRT")) then begin
      RegisterWS("Simulations","Simulations","New Simulation",SMVc,modNL);  
    end;
    
    if (HasLocalization("AUS")) then begin
      Register("Account Reconciliation","Account Reconciliation",BankRecWClass,modNL);
    end;
    if (HasLocalization("AUS")==false) then begin
      RegisterWS("Brought Forward Balances","Brought Fwd Balances","New Brought Fwd Balance",FBVc,modNL);
    end;
    RegisterWS("Accounts","Accounts","New Account",AccVc,modNL);


    if (HasLocalization("AGO,POL,PRT")) then begin
      Setting("Account Transfers",AccTransLClass,modNL);
    end;
    Setting("Fiscal Years",YearTClass,modNL);
    if (HasIncomeAndExpenseBook) then begin
      Setting("Income & Expense Book",IncExpBookLClass,modNL);
    end;
    if (HasNumberSeries) then begin
      Setting("Number Series - Transactions",TRSerTClass,modNL);
    end;
    if (HasObjects) then begin
      Setting("Tags/Objects",ObjLClass,modNL);
      Setting("Tag/Object Types",OTLClass,modNL);
    end;
//    if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
//      Setting("Rate Gain/Loss",NLRateTClass,modNL);
//    end;
    Setting("Report Settings",Rs2WClass,modNL);
    Setting("Sub Systems",TRGenTClass,modNL);
    Setting("Sub-ledger Control Accounts",SLAccTClass,modNL);
    if (HasLocalization("HRV,LVA")) then begin
      Setting("Tax Reports",TaxRepLClass,modNL);
    end;
    if (HasLocalization("BRA,HRV,LVA")) then begin
      Setting("Tax Rules",TaxRulesLClass,modNL);
      Setting("Tax Templates",TaxTemplateLClass,modNL);
      Setting("Transaction Settings",TrTClass,modNL);
    end;
    if (HasLocalization("KEN")) then begin
      Setting("Tax Templates",TaxTemplateLClass,modNL);
    end;
    Setting("#VAT# Codes",VATCodeTClass,modNL);
  
    if (HasLocalization("HRV,LVA")) then begin
      Document("Tax Report",TaxDocRClass,TaxRepForm,TaxRepFClass,modNL);
    end;
    Document("Transactions",TRRClass,TRForm,TRFClass,modNL);

    Report("Account Reconciliation",ACReconRClass,ACRecRn,0,modNL);

    if (HasLocalization("AGO,BRA,POL,PRT")) then begin
      Report("Analytical Balance",MBARClass,MBARn,0,modNL);
    end;
    Report("Balance Sheet",BalRClass,BalRn,UserDefRepDClass,modNL);
    Report("Chart of Accounts",AccListRClass,AccListRn,0,modNL);
    Report("Correction List",CorrRClass,CorrRn,0,modNL);
    if (HasLocalization("LTU,LVA")) then begin
      Report("Corresponding Accounts",CorspRClass,CorspRn,0,modNL);
    end;
    if (HasMultiCurrency) then begin
      Report("Currency A/C Rate Change",NLRateRClass,NLRateRn,0,modNL);
    end;
    if (HasIncomeAndExpenseBook) then begin
      Report("Income & Expense Book",IncExpBookRClass,IncExpBookRn,0,modNL);
    end;
    if (HasMultiCurrency) then begin
      Report("Multicurrency Accounts Rate Difference",MultiCurAccRClass,MultiCurAccRn,0,modNL);
    end;
    Report("#Nominal Ledger#",MainRClass,MainRn,0,modNL);
    Report("Profit & Loss",ResRClass,ResRn,UserDefRepDClass,modNL);
    if (HasLocalization("LVA")) then begin
      Report("Tax Calculations", Tax100Class,Tax100Rn,0,modNL);
      Report("Test Corresponding Rules",CorstRClass,CorstRn,0,modNL);
    end;
    Report("Transaction Journal",TransRClass,TransRn,0,modNL);
    Report("Trial Balance",SBRClass,TrialRn,0,modNL);
    if (HasLocalization("POL,PRT")==false) then begin
      Report("#VAT# Listing",ALLVATRClass,ALLVATRn,0,modNL);
    end;
    if (HasLocalization("POL")==false) then begin
      Report("#VAT# Report",VATRClass,VAT2Rn,UserDefRepDClass,modNL);
    end;

    if (HasLocalization("FRA")) then begin
      Export("FEC Export",FrenchFECEClass,FrenchFECEn,modNL);
    end;
    if (HasLocalization("SGP")) then begin
      Export("IRAS audit File",GenIRASEClass,IRASAuditEn,modNL);
    end;
    Export("Monthly Balances",MBEClass,MBEn,modNL);
    if (HasLocalization("SWE")) then begin
      Export("SIE (Swedish Export/Import)",SieEClass,SieEn,modNL);
    end;
    Export("Trial Balance",SBEClass,SBEn,modNL);
    if (HasLocalization("PRT")) then begin
      Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modNL);
    end;  
    if (HasLocalization("LTU")) then begin
      Export("#VAT# Periodic Declaration (Lithuania)",LTUVATEClass,LTUVATEn,modNL);
    end;
  
    if (HasLocalization("SWE")) then begin
      Import("SIE (Swedish Export/Import)",0,SieIn,modNL);
    end;
    
    if (HasLocalization("AGO,POL,PRT")) then begin
      Maintenance("Account Balance Transfer",AccTransVClass,AccTransMn,modNL);
    end;
  end;
  
  /*modPO*/

  RegisterWS("Purchase Orders","Purchase Orders","New Purchase Order",POVc,modPO);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modPO);
  RegisterWS("Items","Items","New Item",INVc,modPO);

  if (HasModIN) then begin
    Setting("Delivery Terms",ShipDealLClass,modPO);
  end;
  if (HasCategories) then begin
    Setting("#Supplier# Categories",VGLClass,modPO);
  end;
  if (HasNumberSeries) then begin
    Setting("Number Series - Purchase Orders",POSerTClass,modPO);
  end;

  Report("Deficiency List",PurRClass,PurRn,0,modPO);
  Report("Outstanding Purchase Orders",POOrdStockRClass,POOrdStockRn,0,modPO);  
  Report("Purchase Order Journal",PurOrdJRClass,PurOrdJRn,0,modPO);

  Document("Purchase Orders",PORClass,POForm,POFClass,modPO);
  
  end;
  return;
end;
