external procedure SetProductTags();
external procedure LoadWindowTags();

/* Haengm.hal */

#ifdef HAL
/* This is no longer an Event, make sure you don't have this in */
//external function Boolean HasJewelleryInterface();

//event startup
begin
  string 255 country;
  
  SetGlobalBoolean("IsEnterprise",true);
//  SetGlobalBoolean("HasPreferedOfficialSerNr",false);
//  SetGlobalBoolean("HasHideCostPrice",false);
  SetProductTags;
  LoadWindowTags;
  
  SetLangMode(LangEnglish,"ENG",2);

/* The modules should keep there codes even if we rename the modules. The code is part of the Export format */
  Module("Assets","",730,modAT2);
  Module("Business Alerts","",730,modBA);
  Module("Calendar","",730,modCAL);
  Module("Cash Book","",730,modCL);
  Module("#Cheques#","",730,modCheck);
  Module("Consolidation","",730,modCons);
  Module("Contracts","",730,modCO);
  Module("Course Booking","",730,modCourses); 
  Module("CRM","",730,modCRM);
  Module("Customs","",730,modCustom);
  Module("Data Integrity","",730,modDY);  
  Module("Database Maintenance","",730,modDBMain);  
  Module("EDI","",730,modEDI);  
  Module("Email and Conferences","",730,modEmail);
  Module("Expenses","",730,modExp);
  Module("External Gateway","",730,modEG);
  Module("Human Resources Management","",730,modHRM);
  Module("Integration","",730,modInteg);
  Module("Internal #Stock#","",730,modIntStock);
  Module("Job Costing","",730,modTS);
  Module("Local","",730,modLocal);
  Module("MRP","",730,modPOProg);
  Module("#Nominal Ledger#","",730,modNL);
  Module("Point of Sales","",730,modPOS);
  Module("POS Offline","",730,modPOSOffLine);
  Module("Pricing","",730,modDI);
  Module("Production","",730,modProd);
  Module("Production Scheduling","",730,modProdSched);
  Module("#Purchase Ledger#","",730,modPL);
  Module("#Purchase Orders#","",730,modPO);
  Module("Quotations","",730,modQT);
  Module("Rental","",730,modRent);
  Module("Report Generator","",730,modRepGen);
//  Module("Resort","",730,modRsrt); quite not finished
  Module("Resource Planning","",730,modPP);
  Module("#Sales Ledger#","",730,modSL);
  Module("Sales Orders","",730,modSO);
//  Module("Server","",730,modServ); //Not supported any more
  Module("Service Orders","",730,modSVO);
  Module("Shares Trading","",730,modShares);
  Module("Single Function User","",730,modOneFuncMod);
  Module("SmartApps Designer","",730,modMForms);
  Module("#Stock#","",730,modIN);
  Module("System","",730,modSY);
  Module("TAPI Gateway","",730,modTG);
  Module("Task Manager","",730,modTASK);
  Module("Technics","",730,modTC);
  Module("Telephony","",730,modTel);
  Module("Timekeeper","",730,modTimekeeper);
  Module("User Settings","",730,modUserSet);
  Module("Warehouse Management","",730,modWHM);
  Module("Web Shop","",730,modWebShop);
  Module("Web Shop and CMS","",730,modWebShopNG);
//  Module("Bank Reconciliation","",730,modBR);
//  Module("Limited Access","",730,modEU);
//  Module("Mail","",730,modML);
  Module("World Bank Reporting","",730,modWorldBankRep);
  
  if (TestEnablerFile("EnAppBill")) then begin
    Module("App Billing","",730,modAppBilling);
  end;
  
  RoleMod("Full Client","",730,rolFC,"");
  RoleMod("Mobile POS","",730,rolMP,"MobilePOSMasterWClass");
  RoleMod("Mobile Reports","",730,rolMR,"MobileReportsMasterWClass");
  RoleMod("Mobile Sales","",730,rolMM,"MobileSalesMasterWClass");
  RoleMod("Mobile Stock","",730,rolMS,"MobileStockMasterWClass");

/* modCons */

  Register("Main Owner Percentage","Owner Percentage",OwnerPrcVc,modCons);
  Register("Transactions","Transactions",TRVc,modCons);
  Register("Accounts","Accounts",AccVc,modCons);
  Register("Tags/Objects","Tags/Objects",ObjVc,modCons);
  Register("Simulations","Simulations",SMVc,modCons);

  Report("Balance Sheet, Consolidated",ConsBalRClass,BalRn,UserDefRepDClass,modCons);
  Report("Consolidation",ConsRClass,ConsRn,0,modCons);
  Report("Consolidation Chart of Accounts",AcConsRClass,AcConsRn,0,modCons); // from SY
  Report("Consolidation Key Financial Ratios",KeyConsRClass,KeyRn,UserDefRepDClass,modCons);
  Report("Correction List",CorrRClass,AllCompaniesCorrRn,0,modCons);
  Report("Profit & Loss, Consolidated",ConsResRClass,ResRn,UserDefRepDClass,modCons);
  Report("Transaction without Tags/Objects",TransNoObjRClass,TransNoObjRn,0,modCons);
  Report("Trial Balance, Consolidated",SB2RClass,TrialRn,0,modCons);

  Export("Consolidation",ConsEClass,ConsEn,modCons);
  Export("Transactions",ConsTREClass,ConsTREn,modCons);
  Export("Trial Balance, Consolidated",ConsSBEClass,ConsTrialEn,modCons);

  Setting("Auto Eliminations",AccElimLClass,modCons);
  Setting("Consolidation Exchange Rates",ConsERLClass,modCons);
  Setting("Consolidation Settings",ConsolidationTClass,modCons);
  Setting("Daughter Companies",DaughterCompTClass,modCons);
  Setting("Report Settings",Rs2WClass,modCons);

  Maintenance("Account Auto Elimination",AccElimConsVClass,AccElimMn,modCons);
  Maintenance("Consolidation",ConsVClass,ConsMn,modCons);

/* modCustom */
  Register("Customs Declarations","Customs Declarations",CustomsVc,modCustom);
  Register("Calculated Charges","Calculated Charges",CalcChargeVc,modCustom);
  Register("Commodity Codes","Commodity Codes",CommodityVc,modCustom);
  Register("Contacts","Contacts",CUVc,modCustom);
  Register("Purchase Items","Purchase Items",PIVc,modCustom);
  Register("Items","Items",INVc,modCustom);

  Setting("Certificates",CertificateLClass,modCustom);
  Setting("Customs Declaration Key",CustomDecKeyTClass,modCustom);
  Setting("Customs Default Setup",CustomsDefaultTClass,modCustom);
  Setting("Customs Exchange Rates",CustomsERLClass,modCustom);
  Setting("Customs Offices",CustomOfficesTClass,modCustom);
  Setting("Delivery Modes",DMLClass,modCustom);
  Setting("Delivery Terms",ShipDealLClass,modCustom);
  Setting("Duties and Charges",ChargesLClass,modCustom);
  Setting("Number Series - Customs Declarations",CustomsSerTClass,modCustom);
  Setting("Special Charges/Duties Setup",SpecChargeDealTClass,modCustom);
  Setting("Special Deals",CommDealLClass,modCustom);
  Setting("VY Key",VYKeyLClass,modCustom);

  Document("Customs Declaration",CustomsRClass,CustomsForm,CustomsFClass,modCustom); 

  Export("Customs Declaration",EDICustomsEClass,EDICustomsEn,modCustom);

  Import("Customs Commodity",CommodityIn,CommodityIn,modCustom);
  Import("Customs Response",EDICustomsIn,EDICustomsIn,modCustom);

/* modCheck */

  Register("Open #Cheques#","Open #Cheques#",OpenChkLClass,modCheck);
  Register("Deposited #Cheques#","Deposited #Cheques#",DepChkLClass,modCheck);
  Register("All #Cheques#","All #Cheques#",CheckVc,modCheck);
  Register("Issued Own #Cheques#","Issued Own #Cheques#",OpenOwnChkLClass,modCheck);
  Register("All Own #Cheques#","All Own #Cheques#",OwnCheckVc,modCheck);
  Register("Credit Cards","Credit Cards",CreditCardVc,modCheck);
  Register("Credit Card Slips","Credit Card Slips",CouponVc,modCheck);
  Register("Batch Deposit","Batch Deposit",ChqDepVc,modCheck);

  Setting("Account Usage, #Cheques#",CheckAccTClass,modCheck);
  Setting("#Cheque# Control Accounts",CheckTargetAccTClass,modCheck);
  Setting("#Cheques# Settings",CheckSetTClass,modCheck);
  Setting("Clearing Days",ClearDLClass,modCheck);
  Setting("Credit Card Types",CredCardTypeLClass,modCheck); 
  Setting("Number Series - Batch Deposits",ChqDepSerTClass,modCheck);
  Setting("Number Series - Own #Cheques#",OwnCheckSerTClass,modCheck);
  Setting("Number Series - Received #Cheques#",CheckSerTClass,modCheck);
  Setting("Payment Modes",PMTClass,modCheck);
  Setting("#Supplier# #Cheque# Name",OrdenChqLClass,modCheck); 
  
  Report("Batch Deposit Journal",ChqDepositJRClass,ChqDepositJRn,0,modCheck);
  Report("#Cheque# History",HisCheckRClass,HisCheckRn,0,modCheck);
  Report("#Cheques# List",ThirdCheckRClass,ThirdCheckRn,0,modCheck);
  Report("#Cheques# to be Deposited",DepCheckRClass,DepCheckRn,0,modCheck);
  if (HasLocalization("ARG,PRT")) then begin
    Report("Endorsed #Cheques#",EndosRClass,EndosRn,0,modCheck);
  end;
  Report("Own #Cheques# History",HisOwnCheckRClass,HisOwnCheckRn,0,modCheck);
  Report("Own #Cheques# List",OwnCheckRClass,OwnCheckRn,0,modCheck);
//  Report("Batch Deposit Journal",ChqDepRClass,ChqDepRn,0,modCheck);//no code
//  Report("Credit Card List",CCardRClass,CCardRn,0,modCheck); // No source code
//  Report("Credit Card Slips Journal",CouponListRClass,CouponListRn,0,modCheck); // No source code
//  Report("Reconciliation CreditCard Slips",ConsCoupRClass,ConsRn,0,modCheck);//does it call ConsRn?

  Maintenance("Create Own #Cheques#",GenOwnChkVClass,GenOwnChk3Mn,modCheck);
  if (HasLocalization("USA")==false) then begin
    Maintenance("Create Slips #N/L# Trans",NLTransCredCardSlipVClass,NLTransCredCardSlipMn,modCheck);
  end;
//  Maintenance("Adjustment Estimated Clearing Days",AdECDVClass,AdECDMn,modCheck);

  Document("Own #Cheques#",OwnChkRClass,OwnChkForm,OwnChkFClass,modCheck);
  Document("Own #Cheque# Labels",OwnChkLabRClass,OwnChkLabForm,OwnChkLabFClass,modCheck);
  Document("Batch Deposit",BatchDepRClass,BatchDepForm,BatchDepFClass,modCheck);
  
/* modCL */

  Register("Cash In","Cash In",CLInVc,modCL);
  Register("Cash Out","Cash Out",CLOutVc,modCL);
  Register("Receipts","Receipts",IPVc,modCL);
  Register("Payments","Payments",OPVc,modCL);
  Register("Personnel Payments","Personnel Payments",PPVc,modCL);
  Register("Simulations","Simulations",SMVc,modCL);
  Register("Account Reconciliation","Account Reconciliation",BankRecWClass,modCL);
  Register("Forex Trans.","Forex",ForexTRVc,modCL);
  
  Setting("Cash Book Settings",MainCLTClass,modCL);
  Setting("Credit Cards",CreditCardLClass,modCL);
  Setting("Expense Accounts",CLCorspLClass,modCL);
  Setting("Legal Cash In No.",LegalCLInNrTClass,modCL);
  Setting("Number Series - Cash In",CLInSerTClass,modCL);
  Setting("Number Series - Cash Out",CLOutSerTClass,modCL);
  Setting("Number Series - Forex Transactions",ForexTRSerTClass,modCL);
  Setting("Payment Modes",PMTClass,modCL);
  
  Report("Cash Book",CLIORClass,CashBRn,0,modCL); /* needs some english strings. */
  if (HasLocalization("LTU")) then begin
    Report("Cash Book (Lithuania)",CashBookLitRClass,CashBookLitRn,0,modCL);
  end;
  Report("Cash In Journal",CLInJRClass,CLInJRn,0,modCL);  
  Report("Cash Out Journal",CLOutJRClass,CLOutJRn,0,modCL);  
  Report("Cash Report",DayBalCashRClass,DayBalCashRn,0,modCL);
  Report("Corresponding Accounts List",CCtasRClass,CCtasRn,0,modCL);  
  Report("Invoices with Cash In",IVCLInRClass,IVCLInRn,0,modCL);
  Report("Invoices with Cash Out",VICLOutRClass,VICLOutRn,0,modCL);
  Report("Invoices without Cash In",IVnoCLInRClass,IVnoCLInRn,0,modCL);
  Report("Invoices without Cash Out",VInoCLOutRClass,VInoCLOutRn,0,modCL);
  Report("Liquidity Forecast",LiquidityRClass,LiquidityRn,0,modCL);
  Report("#N/L# Cash Book",CashBookLatRClass,CashBookLatRn,0,modCL);
//  Report("Credit Card Coupon List",CouponRClass,CouponRn,0,modCL); // No source code

  Document("Cash In",CLInRClass,CLInForm,CLInFClass,modCL);
//  Document("Cash In Collection",CLInColRClass,CLInColForm,CLInColFClass,modCL);
  Document("Cash In Invoices",CLIn2RClass,CLIn2Form,CLIn2FClass,modCL);
  Document("Cash In Receipts",CLIn1RClass,CLIn1Form,CLIn1FClass,modCL);
  Document("Cash Out",CLOutRClass,CLOutForm,CLOutFClass,modCL);
//  Document("Cash Out Collection",CLOutColRClass,CLOutColForm,CLOutColFClass,modCL);
  Document("Cash Out Invoices",CLOut2RClass,CLOut2Form,CLOut2FClass,modCL);
  Document("Cash Out Payments",CLOut1RClass,CLOut1Form,CLOut1FClass,modCL);
  Document("Cash Out Personnel Payments",CLOut3RClass,CLOut3Form,CLOut3FClass,modCL);

//  Maintenance("Create Collection Cash In",ColCLInVClass,ColCLInMn,modCL);//as far as i know not used
//  Maintenance("Create Collection Cash Out",ColCLOutVClass,ColCLOutMn,modCL);//as far as i know not used
  Maintenance("OK Cash Ins and Cash Outs",OKCLVClass,OKCLMn,modCL);
//  Maintenance("Change Coupon State",CouponVClass,CouponMn,modCL);

/* modAT2 */

  Register("Assets","Assets",AT2UnitVc,modAT2);
  Register("Asset Categories","Asset Categories",AT2Vc,modAT2);
  Register("Asset Disposals","Asset Disposals",AT2WrofVc,modAT2);
  Register("Asset Revaluations","Asset Revaluations",AT2DprVc,modAT2);
  Register("Asset Status","Asset Status",AT2TakeVc,modAT2);
  Register("Asset Transactions","Asset Transactions",AT2TransVc,modAT2);  
  Register("Depreciation Models","Depreciation Models",DprModVc,modAT2);

  Setting("Account Usage Assets",AT2AccTClass,modAT2);
  Setting("Asset Display Groups",AT2DispGroupTClass,modAT2);
  Setting("Assets #N/L# Classes",AC2TClass,modAT2);
  Setting("Contacts",CULClass,modAT2);
  Setting("Departments",DepLClass,modAT2);
  Setting("Inflation Coefficients",ATCoeffLClass,modAT2);
  Setting("Number Series - Asset Disposals",AT2WrofSerTClass,modAT2);
  Setting("Number Series - Asset Revaluations",AT2DprSerTClass,modAT2);
  Setting("Number Series - Asset Status",AT2TakeSerTClass,modAT2);
  Setting("Number Series - Revaluation Factors",AT2RevSerTClass,modAT2);
  Setting("Revaluation Factors",AT2RevLClass,modAT2);
  Setting("Revaluation Run Lists",AT2RevListLClass,modAT2);
//  Setting("Metals",MetalLClass,modAT2);
//  Setting("Number Series - Acquisitions",AT2PUSerTClass,modAT2);
//  Setting("Reasons",CauseLClass,modAT2);
//  Setting("Groups",AT2GroupLClass,modAT2);
//  Setting("Movements",AT2MovLClass,modAT2);
//  Setting("Responsibilities",AT2RespLClass,modAT2);

  Report("Accumulated Category Depreciation",AT2CatAcumRClass,AT2CatAcumRn,0,modAT2);
  Report("Asset at Point in Time",AssetAtTimeRClass,AssetAtTimeRn,0,modAT2);
  Report("Asset History",AT2HistRClass,AT2HistRn,0,modAT2);
  Report("Asset List",AT2ListRClass,AT2ListRn,0,modAT2);
  Report("Asset Status",AT2HistPortRClass,AT2HistPortRn,0,modAT2);
  Report("Department Summary",AT2DepRClass,AT2DepSumRn,0,modAT2);
  Report("Depreciation Plan",AT2DeprPlanRClass,AT2DeprPlanRn,0,modAT2);
  Report("Depreciations Report",AT2DeprRClass,AT2DeprRn,0,modAT2);
  Report("Disposals Journal",AT2WriteJRClass,AT2WriteJRn,0,modAT2);
  if (HasLocalization("PRT")) then begin
    Report("Fiscal Year Depreciation (Portugal)",AT2PortFormRClass,AT2PortFormRn,0,modAT2);
  end;
//  Report("Fiscal Year Revaluations",AT2FYRevRClass,AT2FYRevRn,0,modAT2);//not used
  if (HasLocalization("PRT")) then begin
    Report("Fiscal Year Write-offs (Portugal)",AT2FYWrofRClass,AT2FYWrofRn,0,modAT2);
  end;
  Report("Insurance Value Report",AT2InsValRClass,AT2InsValRn,0,modAT2);
  Report("Missing Asset from Rental Item",MissingAssetRClass,MissingAssetRn,0,modAT2);
  Report("Responsible Person List",AT2RespPersRClass,AT2RespPersRn,0,modAT2);
  Report("Responsible Person Summary",AT2CatRespRClass,AT2CatRespRn,0,modAT2);
  Report("Sim. Preview - Depreciations",AT2GenSMRClass,AT2GenSMRn,0,modAT2);
  Report("#Stocktaking# List, Assets",AT2StockTakeRClass,AT2StockTakeRn,0,modAT2);
  Report("Subsidy Assets",AT2SubRClass,AT2SubRn,0,modAT2);
  Report("Tax Depreciation",TaxDeprRClass,TaxDeprRn,0,modAT2);
  Report("Trans. Preview - Depreciations",AT2GenTRRClass,AT2GenTRRn,0,modAT2);
  Report("Update Department on Asset",DeptAssetRClass,DeptAssetRn,0,modAT2);
//  Report("Asset List for Date",AT2ListDateRClass,AT2ListDateRn,0,modAT2); // No code
//  Report("Asset List Lith",AT2ListLitRClass,AT2ListLitRn,0,modAT2);
//  Report("Responsible Persons List",AT2RespRClass,AT2RespRn,0,modAT2);, should be out, look line above it is the same

  Document("Asset Disposals",AT2WrofRClass,AT2WrofForm,AT2WrofFClass,modAT2);
  Document("Asset Forms",AT2InRClass,AT2InForm,AT2InFClass,modAT2);
  Document("Asset put in use",AT2RClass,AT2Form,AT2FClass,modAT2);
  Document("Asset Status",AT2TakeRClass,AT2TakeForm,AT2TakeFClass,modAT2);  
  Document("Revaluations Factors",AT2RevRClass,AT2RevForm,AT2RevFClass,modAT2);
//  Document("Depreciations",AT2DprRClass,AT2DprForm,AT2DprFClass,modAT2);// No source code
//  Document("Put in use",AT2PURClass,AT2PUForm,AT2PUFClass,modAT2); // No source code

  Maintenance("Create Depreciation Simulations",AT2GenSMVClass,AT2GenSMMn,modAT2);
  Maintenance("Create Depreciation Transactions",AT2GenTRVClass,AT2GenTRMn,modAT2);
  Maintenance("Create Put in use Transactions",AT2PutinVClass,AT2PutinMn,modAT2);
//  Maintenance("Create Tax Depreciation Transactions",AT2TaxDeprVClass,AT2TaxDeprMn,modAT2);
  Maintenance("Revalue Asset Acquisition Value",AT2ReevalVClass,AT2ReevalMn,modAT2);
  Maintenance("Update Department on Asset",DeptAssetVClass,DeptAssetMn,modAT2);
  Maintenance("Update Purchase Value on Asset",AT2PurchValVClass,AT2PurchValMn,modAT2);
//  Maintenance("Create Asset Status Records",AT2GenTransVClass,AT2GenTransMn,modAT2);
//  Maintenance("Create Depreciation Transactions",AT2GenTransVClass,AT2GenTransMn,modAT2);
//  Maintenance("Create Asset Records",AT2GenUnitVClass,AT2GenUnitMn,modAT2);

  Export("Export to new Fixed Assets Module",ATVcEClass,ATVcEn,modAT2);

/* modDI */
  
  Register("Items","Items",INVc,modDI);
  Register("Item Formulae","Item Formulae",CPMVc,modDI);
  Register("Discount Matrices","Discount Matrices",RebVc,modDI);
  Register("Multi-buy Discounts","Multi-buy Discounts",MultiBuyRebVc,modDI);
  Register("Prices","Prices",PLVc,modDI);
  Register("Price Lists","Price Lists",PLDefVc,modDI);
  Register("Price Formulae","Price Formulae",PFormVc,modDI);
  Register("Quantity Dependent Discounts","Qty Depend. Discounts",StaffVc,modDI);

  Report("Discount Matrices List",RebListRClass,RebListRn,0,modDI);
  Report("Discount Statistics",Cust2STRClass,Cust2STRn,0,modDI);
  Report("Item List",ArtRClass,ArtRn,0,modDI);
  Report("Price List",PriceRClass,PriceRn,0,modDI);
  Report("Sales Price Control",SalesPriceCheckRClass,SalesPriceCheckRn,0,modDI);

  if (HasLocalization("DEN")) then begin
    Import("Item Prices import",INDanIn,INDanIn,modDI);
  end;
  Import("Update Cost Prices import",INPrUpdIn,INPrUpdIn,modDI);

  Setting("Qty Dependent Prices",PLQLClass,modDI);
  Setting("Item Groups",ITLClass,modDI);

  Maintenance("Calculate Prices",CalcPricesVClass,CalcPriceListsMn,modDI);
  Maintenance("Delete Prices",DelPriceListVClass,DelPriceLMn,modDI);
  Maintenance("Update Item Base Prices",ItemPricesVClass,ItemPricesMn,modDI);
  Maintenance("Update Item Cost Prices",ItemCostPricesVClass,INCostPriceMn,modDI);

/* modCO */

  Register("Contracts","Contracts",COVc,modCO);
  Register("Contract Quotations","Contract Quotations",CQVc,modCO);
  Register("Contract Status","Contract Status",COCQStatVc,modCO);
  Register("Service Agreements","Service Agreements",SVCVc,modCO);
  Register("Contacts","Contacts",CUVc,modCO);
  Register("Items","Items",INVc,modCO);
  Register("Commission Contract","Commission Contract",ComisionCOVc,modCO);
  
  Document("Contract Person Labels",ContLabRClass,ContLabForm,ContLabFClass,modCO);
  Document("Contract Quotations",ContQuoteRClass,ContQuoteForm,ContQuoteFClass,modCO);
  Document("Contracts",ContractRClass,ContractForm,ContractFClass,modCO);
  Document("Customer/#Supplier# Labels",CuLabRClass,CuLabForm,CuLabFClass,modCO); 
//  Document("Credit Query",CreditQueryRClass,CreditQueryForm,CreditQueryFClass,modCO);
//  Document("Delivery Acceptance",ContDeliveryRClass,ContDeliveryForm,ContDeliveryFClass,modCO); 
//  Document("Insurance",InsuranceRClass,InsuranceForm,InsuranceFClass,modCO);
//  Document("Transfer Notice",TransNotRClass,TransNotForm,TransNotFClass,modCO);
//  Document("Sales Agreement",ContSalesRClass,ContSalesForm,ContSalesFClass,modCO); 

  Setting("Contract Classes",ContractClassTClass,modCO);
  Setting("Contract Classification Types",HWCOClassTypeLClass,modCO);  
  Setting("Contract Defaults",CODefValTClass,modCO);
  Setting("Contract Settings",ContractSetTClass,modCO);
  Setting("Customer Contract Defaults",CUCODefValLClass,modCO);
  Setting("Item Description Type",IDTTClass,modCO);
  Setting("Number Series - Contracts",COSerTClass,modCO);
  Setting("Renew Contracts",RenewCOLClass,modCO);
//  Setting("Funder Increase",FunderIncTClass,modCO);
//  Setting("Margin",MarginTClass,modCO);
//  Setting("Purchase Option",PurOptLClass,modCO);
//  Setting("Quotation of Bond",QBLClass,modCO);
//  Setting("SWAP Option",SWAPLClass,modCO);

  Report("Contract Contacts",Contra2RClass,Contra2Rn,0,modCO);
  Report("Contract History",COHistRClass,COHistRn,0,modCO);
  Report("Contract Item Statistics",COINStatisticsRClass,COINStatisticsRn,0,modCO);
  Report("Contract List",CORClass,CORn,0,modCO);
  Report("Contract/Quotation Status",CQStatRClass,CQStatRn,0,modCO);
  Report("Contract Worth",COworthRClass,COworthRn,0,modCO);
  Report("Factoring Customers Contract History",COInvToHistRClass,COInvToHistRn,0,modCO);
  Report("Factoring Customers Invoices",COInvToIVRClass,COInvToIVRn,0,modCO);
  Report("Invoiceable Contracts",COInvRClass,COInvRn,0,modCO);
//  Report("Contract Invoicing Per Month",ContrPeriodicRClass,ContrPer2Rn,0,modCO);
//the code doesn't care for period types, periods, contract numbers
//anything really but the class
//and it shows values per month, I think it was done for customer or for our internal use
//Plenty of lines code needed to be added to make it proper
//  Report("Contract Follow Up",FollowUpRClass,FollowUpRn,0,modCO);
/* Complain to Kjell before the end of January if you need this */
//  Report("Contract Value",COvalueRClass,COvalueRn,0,modCO);

  Maintenance("Cancel Unpaid Contracts",CancelDueCOVClass,CancelDueCOMn,modCO);
  Maintenance("Change Contract Currency",ChangeCOCurrencyVClass,ChangeCOCurrencyMn,modCO);
  Maintenance("Change Contracts",ChangeCOVClass,ChangeCOMn,modCO);
  Maintenance("Create Contract Invoices",CreateCOInvVClass,CreateCOInvMn,modCO);
  Maintenance("Renew Contracts",RenewCOVClass,RenewCOMn,modCO);
  Maintenance("Service Agreement",SVCVClass,SVCMn,modCO);
  Maintenance("Update Contracts",UpdateCOVClass,UpdateCOMn,modCO);

  Export("Circulation",CirculationEClass,CirculationEn,modCO);

/* modWHM */
  Register("Locations","Locations",LocationVc,modWHM);
  Register("Location Areas","Location Areas",LocAreaVc,modWHM);
  Register("Positions","Positions",PosVc,modWHM);
  Register("Forklift Queue","Forklift Queue",ForkLiftQueVc,modWHM);
  Register("Forklifts","Forklifts",ForkLiftVc,modWHM);
  Register("Forklift Driver Interface","Forklift Driver",ForkLiftDriverWClass,modWHM);
  Register("Warehouse Management","Warehouse Management",MainWHMTClass,modWHM);

  Document("Pallet Labels",PalletLabRClass,PalletLabForm,PalletLabFClass,modWHM);

  Report("Deliveries for Purchase",SHForPURClass,SHForPURn,0,modWHM);
  Report("Delivery Positions",PositionsForSHRClass,PositionsForSHRn,0,modWHM);
  Report("Forklift Queue Errors",ForkLiftQueErrRClass,ForkLiftQueErrRn,0,modWHM);
  Report("Items at Position",INPosRClass,INPosRn,0,modWHM);
  Report("Items to pick up",OrdersToForkLiftRClass,OrdersToForkLiftRn,0,modWHM);
  Report("Position Errors",PositionErrRClass,PositionErrRn,0,modWHM);
  Report("Position History",PositionHistRClass,PositionHistRn,0,modWHM);

  Maintenance("Assign Picking Queue to Forklift",AssignToForkLiftVClass,AssignToForkLiftMn,modWHM);
  Maintenance("Close Position",PositionCloseVClass,PositionCloseMn,modWHM);
  Maintenance("Move empty Pallets",MoveEmptyPalletsVClass,MoveEmptyPalletsMn,modWHM);
  Maintenance("Move Items to Picking Area",MoveToPickAreaVClass,MoveToPickAreaMn,modWHM);
  Maintenance("NT7000 Cold Restart",NT7000ColdRestartVClass,NT7000ColdRestartMn,modWHM);
//  Maintenance("Move On Positions",MoveToPosVClass,MoveToPosMn,modWHM);

  Setting("Forklift, NT7000",NT7000PickModeTClass,modWHM);
  Setting("NT7000 Locations Settings",NT7000ConnLClass,modWHM);
  Setting("NT7000 Locations Connection Settings",NT7000NumbersLClass,modWHM);

  Import("Positions",ImportPosIn,ImportPosIn,modWHM);

/* modIN */

  Register("Deliveries","Deliveries",SHVc,modIN);
  Register("Goods Receipts","Goods Receipts",PUVc,modIN);
  Register("#Stock Depreciations#","#Stock Depreciations#",SDVc,modIN);
  Register("#Stock# Movements","#Stock# Movements",StockMovVc,modIN);
  Register("Returned Goods","Returned Goods",RetVc,modIN);
  Register("Returned Goods to #Suppliers#","Ret. Goods to #Suppliers#",RetPUVc,modIN);
  Register("#Stocktaking#","#Stocktaking#",StockTakeVc,modIN);
  Register("#Stock# Revaluations","#Stock# Revaluations",SRVc,modIN);

  Setting("Account Usage #Stock#",INAccTClass,modIN); 
  Setting("Barcodes",BarcodeLClass,modIN);
  Setting("Base Price Changes",BPCLClass,modIN);
  Setting("Batch Specifications",BatchTextLClass,modIN);
  Setting("Cost Accounting",CostAccTClass,modIN);
  Setting("Delivery Packages",SHPackagesLClass,modIN);
  if (HasLocalization("PRT")) then begin 
    Setting("Electronic Shipment",EShipPRTTClass,modIN);
  end;
  Setting("Freight Companies",FreightCompanyLClass,modIN);
  Setting("Item Varieties",VARLClass,modIN);
  Setting("Item Variety Groups",VARGLClass,modIN);
  Setting("Items",INLClass,modIN);
  Setting("Location Accounts",LocationAccTClass,modIN); 
  Setting("Location Classification Types",LocClTypeLClass,modIN);
  Setting("Location Classifications",LocClLClass,modIN);
  Setting("Location Groups",LocGrLClass,modIN);
  Setting("Locations",LocationLClass,modIN);
  Setting("Minimum #Stock# Levels",MinPerLocLClass,modIN);
  Setting("Number Series - Deliveries",SHSerTClass,modIN);
  Setting("Number Series - Goods Receipts",PUSerTClass,modIN);
  Setting("Number Series - Returned Goods",RetSerTClass,modIN);
  Setting("Number Series - Returned Goods to #Supplier#",RetPUSerTClass,modIN);
  Setting("Number Series - #Stock Depreciations#",SDSerTClass,modIN);
  Setting("Number Series - #Stock# Movements",StockMovSerTClass,modIN);
  Setting("Number Series - #Stock# Revaluations",SRSerTClass,modIN);
  Setting("Number Series - #Stocktaking#",StockTakeSerTClass,modIN);
  Setting("Pack Types",PackTypeLClass,modIN);
  Setting("Recipes",RecLClass,modIN);
  Setting("Returned Goods Settings",RetGoodsTClass,modIN);
  Setting("Routes",DelRouteLClass,modIN);
  Setting("Routes/Locations Setting",CustRouteLClass,modIN);
  Setting("Serial Number Tracking",SerNrTrackTClass,modIN);
  Setting("Sources",SourceLClass,modIN);
  Setting("#Stock# Movement Durations",DurationLClass,modIN);
  Setting("#Stock# Revaluation Settings",SRSTClass,modIN);
  Setting("#Stock# Settings",MainStockTClass,modIN);
  Setting("Structured Items",StructPrintTClass,modIN);
  Setting("Supersession Items",SupersessionINLClass,modIN);
  Setting("#Supplier# Store ID's",VEStoreIDLClass,modIN);
  Setting("User Def. Field Labels - Extra Costs",ExtraCostLabelTClass,modIN);
  Setting("Variety Masks",VARMaskTClass,modIN);
  Setting("Variety Sets",VARMasksLClass,modIN);
  Setting("Variety Settings",VarietyTClass,modIN);
  Setting("Variety Subsets",VARSubsetsLClass,modIN);
  Setting("Weighted Average",WeigAvLClass,modIN);
  if (HasLocalization("NOR")) then begin 
    Setting("Winedi",WinediTClass,modIN); 
  end;
//  Setting("Goods In Transit",PrelPULClass,modIN);//not finished, noone interested in
//  Setting("Late Cost",LateCostLClass,modIN); will be in 4.1
//  Setting("Number Series - Late Cost",LateCostSerTClass,modIN); will be in 4.1
//  Setting("SerBals",SerBalLClass,modIN);

  Document("Address Labels",AdrLabRClass,AdrLabForm,AdrLabFClass,modIN);
  Document("Base Price Change",BasePriceChangeRClass,BPChangeForm,BasePriceChangeFClass,modIN);
  Document("Delivery Notes",Sh1RClass,Sh1Form,Sh1FClass,modIN);
  Document("Freight Labels",SHLabRClass,SHLabForm,SHLabFClass,modIN);
  Document("Goods Receipt Labels",PULabRClass,PULabForm,PULabFClass,modIN);
  Document("Goods Receipts",PurchaseRClass,PurchaseForm,PurchaseFClass,modIN);
  Document("Item Labels",ItemLabelRClass,ItemLabelForm,ItemLabelFClass,modIN);
  Document("Picking Lists",Sh2RClass,Sh2Form,Sh2FClass,modIN);
  Document("Proforma Deliveries",Sh3RClass,Sh3Form,Sh3FClass,modIN);
  Document("Returned Goods",RetRClass,RetForm,RetFClass,modIN);
  Document("Returned Goods To #Supplier#",RetPURClass,RetPurchaseForm,RetPUFClass,modIN);
  Document("#Stock Depreciations#",SDRClass,SDForm,SDFClass,modIN);
  Document("#Stock# Movements",StockMovRClass,StockMovForm,StockMovFClass,modIN);
  Document("#Stock# Revaluations",SRRClass,SRForm,SRFClass,modIN);
  Document("#Stocktaking# Comparison",STRClass,StockTakeForm,StockTakeFClass,modIN);
//  Document("Goods In Transit",PrelPURClass,PrelPUForm,PrelPUFClass,modIN); // no source code
//  Document("Late Cost",LateCostRClass,LateCostForm,LateCostFClass,modIN); will be in 4.1

  Report("Aged #Stock# Analysis",AgedINRClass,AgedINRn,0,modIN);
  Report("Best Before List",BestBefRClass,BestBefRn,0,modIN);
  Report("Cost Price Analysis",INCostAnalyseRClass,INCostAnalyseRn,0,modIN);
  Report("Credit Notes, Updating #Stock#",CrStckRClass,CrStckRn,0,modIN);
  Report("Deficiency List",PurRClass,PurRn,0,modIN);
  Report("Deficiency List per Location",PurLocRClass,PurLocRn,0,modIN);
  Report("Delivery Journal",SHJRClass,ShipRn,0,modIN);
  Report("Delivery List",SHListRClass,ShipListRn,0,modIN);
  if (HasLocalization("SRB")) then begin
    Report("Evidence of Trade (KEPU, Serbia)",KEPURClass,KEPURn,0,modIN);
  end;
  if (HasLocalization("HRV")) then begin
    Report("Evidence of Trade (KP)",KPHRVRClass,KPHRVRn,0,modIN);  
  end;
  Report("Goods Receipt Journal",PUJRClass,PUJRn,0,modIN);
  Report("Goods Receipt List",PUListRClass,PUListRn,0,modIN);
//  Report("Goods Receipt Reconciliation",PUReconRClass,PUReconRn,0,modIN);
  Report("Item Group List",ITListRClass,ITListRn,0,modIN);
  Report("Item History",INrsRClass,INrsRn,0,modIN);  
  Report("Item/Delivery Mode Statistics",INDMSRClass,INDMRn,0,modIN); 
  Report("Location List",LocationRClass,LocationRn,0,modIN);
  Report("Recipe List (Made of)",Rec2RClass,Rec2Rn,0,modIN);
  Report("Returned Goods Journal",RetJRClass,RetGoodsJRn,0,modIN);
  Report("Returned Goods To #Supplier# Journal",RetPUJRClass,RetPUJRn,0,modIN);
  if (HasLocalization("HRV")) then begin
    Report("Sales Price Calculation",SPCHRVRClass,SPCHRVRn,0,modIN);
  end;
  Report("Serial Number History",SerialNrRClass,SerialNrRn,0,modIN);
  Report("Source List",SourRClass,SourceListRn,0,modIN);  
  Report("#Stock Depreciation# Journal",SDJRClass,StockDepRn,0,modIN);
  Report("#Stock# In Journal",StockJInRClass,StockInRn,0,modIN);
//  Report("#Stock# Level Planning",PlannedStockRClass,PlannedStockRn,0,modIN);
  Report("#Stock# List",INRClass,InvValRn,0,modIN);
  Report("#Stock# List Comparison",StDifRClass,StDifRn,0,modIN);
  Report("#Stock# Movement Journal",StockMovJRClass,StockMovJRn,0,modIN);
  Report("#Stock# Out Journal",StockJOutRClass,StockOutRn,0,modIN);
  Report("#Stock# Revaluation Journal",SRJRClass,StockRevJRn,0,modIN);
  Report("#Stocktaking# Comparison",STCompRClass,STCompRn,0,modIN);
  Report("#Stocktaking# List",StockTakeRClass,StockTakeRn,0,modIN);
  Report("#Stocktaking# Journal",StTakeJRClass,StTakeJRn,0,modIN);
  Report("#Supplier#/Item Statistics",VeInRClass,VeInRn,0,modIN);
  if (HasLocalization("SRB")) then begin
    Report("Trade Book (Serbia)",TradeBookRClass,TradeBookRn,0,modIN);  
  end;
  Report("Trip Sheet",TripSheetRClass,TripSheetRn,0,modIN);
  Report("Varieties Enquiry",AvailVarsRClass,AvailVarsRn,0,modIN);
  Report("Varieties In #Stock#",VARMaskStockRClass,VARMaskStockRn,0,modIN);
  Report("Varieties Control",VarsControlRClass,VarsControlRn,0,modIN);
  Report("Weighted Average",WeighAvRClass,WeighAvRn,0,modIN);
//  Report("StockVc",StockVcListRClass,StockVcRn,0,modIN);// will be used in 4.1

  if (HasLocalization("SWE")) then begin 
    Export("ASG Labels",ExpASGEClass,ExpASGEn,modIN);
  end;
/*  
  if (HasLocalization("PRT")) then begin
    Export("SAFT Stock",PortStockXmlEClass,PortStockXmlEn,modIN);
  end;
*/  
  Export("#Stock# Balance",StBalClass,StBalEn,modIN);
  Export("#Stock# List",INEClass,InvValEn,modIN);
//  if (HasJewelleryInterface) then begin
//    Export("#Stock# List per Serial Number",INSerNoEClass,InvValSerNoEn,modIN);
//  end;
  if (HasLocalization("NOR")) then begin   
    Export("Winedi",WinEDIEClass,ExpWinEDIEn,modIN);
  end;

  Maintenance("Aged #Stock# Revaluation",AgedStockRevVClass,AgedStockRevMn,modIN);
  Maintenance("Cost Price Analysis Revaluation",INCostAnalyseVClass,INCostAnalyseMn,modIN);
  Maintenance("Create #Stocktaking# Records",GenSTVClass,GenSTMn,modIN);
//  Maintenance("Late Landed Cost Start",LateLandedCostVClass,LateLandedCostMn,modIN);// no func
  Maintenance("Setup Multi-location",ConvToMultiLocationVClass,ConvToMultiLocationMn,modIN);
  Maintenance("#Stocktaking# Comparison",STCompVClass,STCompMn,modIN);
  Maintenance("Update Item Cost Price",UpdInpriceVClass,UpdInpriceMn,modIN);
  Maintenance("Update Recipes",UpdRecepyVClass,UpdRecepyMn,modIN);

// modCuAcc

  Register("Customer Accounts","Customer Accounts",CuAccVc,modCuAcc);
  Register("Interest Terms","Interest Terms",IRVc,modCuAcc);
  Register("Contacts","Contacts",CUVc,modCuAcc);
  Register("Interest Codes","Interest Codes",IntVc,modCuAcc);

  Setting("Account Usage",CuAccTClass,modCuAcc);
  Setting("Loan Status",LoanStatusTClass,modCuAcc);
  Setting("Loan Success",LoanSuccessTClass,modCuAcc);

  Report("Interest Calculation",Int2RClass,Int2Rn,0,modCuAcc);
  Report("Loan Status",LoanStatRClass,LoanStatRn,0,modCuAcc);
/* This report is now commented out from C-Code. */
/* Give me feedback, why was it commented out from here? 
It has gone , thee second report has benn added instead*/
//  Report("Interest Calculation",IntRClass,IntRn,0,modCuAcc);
/* Come up with a better name for this report */

  Maintenance("Create Invoices",CreateLoanIVVClass,CreateLoanIVMn,modCuAcc);
  Maintenance("Recalculate #Instalments#",RecLoanIntVClass,RecLoanIntMn,modCuAcc);
  
// modExp

  Register("Expenses","Expenses",ExpVc,modExp);
  Register("Personnel Payments","Personnel Payments",PPVc,modExp);
  Register("#Mileages#","#Mileages#",WayListVc,modExp);
  Register("Daily Allowances","Daily Allowances",DAVc,modExp);

  Report("Daily Allowances Journal",DAJRClass,DAJRn,0,modExp);
  Report("Expenses Journal",ExpJRClass,ExpRn,0,modExp);
  Report("Periodic Personnel Statement",PersPerRClass,PersPerRn,0,modExp);
  Report("Personnel Payment Journal",PPJRClass,PPRn,0,modExp);
  Report("#VAT Code# Statistics",ExpVATRClass,ExpVATRn,0,modExp);
  Report("Way List Journal",WLJRClass,WLJRn,0,modExp);

  Setting("Cars",WLCarLClass,modExp);
  Setting("Daily Allowance Rates",DARateLClass,modExp);
  Setting("Daily Allowance Setting",DATClass,modExp);
  Setting("Distances",WLDistLClass,modExp);
  Setting("Expense Settings",ExpTClass,modExp);
  Setting("Fuel Types",WLPetroilTClass,modExp);
  Setting("#Mileage# Settings",WLSettingsWClass,modExp);
  Setting("Number Series - Daily Allowances",DASerTClass,modExp);
  Setting("Number Series - Expenses",ExpSerTClass,modExp);
  Setting("Number Series - Personnel Payments",PPersSerTClass,modExp);
  Setting("Number Series - #Mileage#",WayListSerTClass,modExp);
  Setting("Purposes",WLPurposeLClass,modExp);

  Document("Daily Allowances",DARClass,DAForm,DAFClass,modExp);
  Document("Expenses",ExpRClass,ExpForm,ExpFClass,modExp);
  Document("Personnel Payment Receipts",PPRClass,PersPayForm,PPDFClass,modExp);
  Document("Way Lists",WayListRClass,WayListForm,WayListFClass,modExp);

/* modPO */

  Register("#Purchase Orders#","#Purchase Orders#",POVc,modPO);
  Register("Purchase Quotations","Purchase Quotations",POQTVc,modPO);
  Register("Internal Orders","Internal Orders",IntORVc,modPO);
  Register("Purchase Items","Purchase Items",PIVc,modPO);
  Register("Items","Items",INVc,modPO);
  Register("Purchase Order Processes","P/Order Processes",POCQStatVc,modPO);
  Register("Contacts","Contacts",CUVc,modPO);
  Register("Shipment Notification","Shipment Notification",DropSHVc,modPO);
//  Register("#Supplier# Packing Lists","#Supplier# Pack Lists",SPLVc,modPO);//not finished, no waction, no code, do not put it in pls
  
  Setting("Delivery Terms",ShipDealLClass,modPO);
  Setting("Internal Order Classes",IntORClassLClass,modPO);
  Setting("Internal Order Settings",IntORSettingTClass,modPO);
  Setting("Number Series - Internal Orders",IntORSerTClass,modPO);
  Setting("Number Series - Purchase Order Processes",POCQStatSerTClass,modPO);
  Setting("Number Series - Purchase Order Quotations",POQTSerTClass,modPO);
  Setting("Number Series - #Purchase Orders#",POSerTClass,modPO);
//  Setting("Number Series - #Supplier# Packing Lists",SPLSerTClass,modPO);//not finished, no waction, no code, do not put it in pls
  Setting("Price Ranges",PriceRangeTClass,modPO);
  Setting("Purchase Order Classes",POrderClassLClass,modPO);
  Setting("Purchase Order Mail",POMailTClass,modPO);
  Setting("Purchase Order Settings",POSettingTClass,modPO);
  Setting("Tenders",TenderLClass,modPO);

  Document("Internal Orders",IntORRClass,IntORForm,IntORFClass,modPO); 
  Document("Purchase Order Confirmations",POConfRClass,POConfForm,POConfFClass,modPO);
  Document("Purchase Order Reminders",PORemRClass,PORemForm,PORemFClass,modPO); 
  Document("#Purchase Orders#",PORClass,POForm,POFClass,modPO); 
  Document("Purchase Quotations",POQTRClass,POQTForm,POQTFClass,modPO); 
  Document("Shipment Notifications",DropSHRClass,DropSHForm,DropSHFClass,modPO); 

  Report("Deficiency List",PurRClass,PurRn,0,modPO);
  Report("Deficiency #Stock#",DfncyStockRClass,DfncyStockRn,0,modPO);
  Report("Goods Receipt/#Purchase Invoice# Comparison",PUVIDiffRClass,PUVIDiffRn,0,modPO);
  Report("Internal Order Journal",IntOrdJRClass,IntOrdJRn,0,modPO);
  Report("Internal Order Status",IntORStatRClass,IntORStatRn,0,modPO);
  Report("Outstanding Internal Orders",IntORStockRClass,IntORStockRn,0,modPO);
  Report("Outstanding #Purchase Orders#",POOrdStockRClass,POOrdStockRn,0,modPO);  
  Report("Purchase Item Price List",PurPriceRClass,PurPriceRn,0,modPO);
  Report("Purchase Order Accruals",POCommitDetailRClass,POCommitDetailRn,0,modPO);
  Report("Purchase Order Journal",PurOrdJRClass,PurOrdJRn,0,modPO);
  Report("Purchase Order Status",POStatRClass,POStatRn,0,modPO);
  Report("Purchase Quotations Journal",PurOrdQTJRClass,PurOrdQTJRn,0,modPO);
  Report("Purchase Suggestion",CreatePORClass,CreatePORn,0,modPO);
  Report("Reordering Requirements",PORequireRClass,PORequireRn,0,modPO);  
  Report("#Supplier# Analysis",VEAnaRClass,VEAnaRn,0,modPO);
  Report("#Supplier# Evaluation",VEEvalRClass,VEEvalRn,0,modPO);
  Report("#Supplier#/Item Statistics",VeInRClass,VeInRn,0,modPO);
    
  Maintenance("Create #Purchase Orders#",CreatePOVClass,POCreateMn,modPO);
  Maintenance("Create #Purchase Orders# from Deficiency #Stock#",PODfncyStockVClass,DfncyStockMn,modPO);
  Maintenance("Delete Purchase Items",DelPIVcVClass,DelPIVcMn,modPO);
  Maintenance("Recalculate #Purchase Orders#",RecalcPOVClass,RecalcPOMn,modPO); // should be in modDBMain
  Maintenance("Reordering Requirements",PORequireVClass,PORequireMn,modPO);
  Maintenance("Update Purchase Items",UpdatePIVClass,UpdatePIMn,modPO);

/* modProd */

  Register("Productions","Productions",ProdVc,modProd);
  Register("Production Orders","Production Orders",ProdOrderVc,modProd);
  Register("Production Item Alternatives","Prod. Item Alternatives",ProdItemVc,modProd);
  Register("Production Operations","Production Operations",ProdOperationVc,modProd);
  Register("Recipes","Recipes",RecVc,modProd);
  Register("Items","Items",INVc,modProd);
  Register("Machine Hours","Machine Hours",MachineHoursVc,modProd);
  Register("Machine Hours Changes","Machine Hours Changes",MachineHoursChangesLClass,modProd);

  Setting("Account Usage Production",ProdAccClass,modProd);
  Setting("Auto Production Items",AutoProdLClass,modProd);
  Setting("Item Effectivity",INEffLClass,modProd);
  Setting("Machine Groups",MachineGroupsTClass,modProd);
  Setting("Materials",MaterialLClass,modProd);
  Setting("Number Series - Production Operations",ProdOperationSerTClass,modProd);
  Setting("Number Series - Production Orders",ProdOrderSerTClass,modProd);
  Setting("Number Series - Productions",ProdSerTClass,modProd);
  Setting("Production Classes",ProdClassLClass,modProd);
  Setting("Production Settings",ProdSettingsTClass,modProd);
  Setting("Routings",RoutingLClass,modProd);
  Setting("Standard Operations",StdOperationLClass,modProd);
  Setting("Standard Problems",StandProblemLClass,modProd);
  Setting("Work Shifts",WorkShiftLClass,modProd);

  Report("Deficiency List",PurRClass,PurRn,0,modProd);
//  Report("Discarded Statistics",ProdStatDiscRClass,ProdStatDiscRn,0,modProd); // Old Report
  Report("Discarded Statistics",DiscardStatRClass,DiscardStatRn,0,modProd);
  Report("Item Effectivity",EffectRClass,EffectRn,0,modProd);
  Report("Process Flow",ProcessFlowRClass,ProcessFlowRn,0,modProd);
  Report("Produceability List",MaxprodRClass,MaxprodRn,0,modProd);
  Report("Production Cost Allocation",CostAllocPlanRClass,CostAllocPlanRn,0,modProd);
  Report("Production Deficiency",ProdDefRClass,ProdDefRn,0,modProd);
  Report("Production Journal",ProdRClass,ProdRn,0,modProd);
  Report("Production Operations",ProdOperationsRClass,ProdOperationsRn,0,modProd);
  Report("Production Order Journal",ProdOrdRClass,ProdOrdRn,0,modProd);
  Report("Production Planning",ProdOrderPlanRClass,ProdOrderPlanRn,0,modProd);
  Report("Production Queue",ProdOrderQueueRClass,ProdOrderQueue2Rn,0,modProd);
  Report("Production Statistics",ProdStatRClass,ProdStatRn,0,modProd);
  Report("Production Status",ProdStatusRClass,ProdStatusRn,0,modProd);
  Report("Recipe Cost Calculation",CostCalcRClass,CostCalcRn,0,modProd);
  Report("Recipe Cost Comparison",RecCostCompRClass,RecCostCompRn,0,modProd);
  Report("Recipe List (Made of)",Rec2RClass,Rec2Rn,0,modProd);
  Report("Recipe List (Part of)",RecRClass,RecRn,0,modProd);
  Report("Running Production Orders",ProdQueueRClass,ProdQueueRn,0,modProd);
/* Complain to Kjell before the end of January if you need this */
//  Report("#Stock# Prediction Report",StockPredictRClass,ProdPlanRn,0,modProd);
//  Report("TestProdRep",TestProdRepRClass,TestProdRepRn,0,modDBMain);

  Document("Production Labels",ProdLabelRClass,ProdLabelForm,ProdLabelFClass,modProd);
  Document("Production Operation Picking Lists",ProdOperation2RClass,ProdOperation2Form,ProdOperation2FClass,modProd);
  Document("Production Orders",ProdOrder2RClass,ProdOrder2Form,ProdOrder2FClass,modProd);
  Document("Production Picking Lists",ProdOrder3RClass,ProdOrder3Form,ProdOrder3FClass,modProd);
  Document("Productions",ProdOrderRClass,ProdOrderForm,ProdOrderFClass,modProd);
  Document("Recipe",RecDocRClass,RecForm,RecFClass,modProd);
  Document("Routing",RoutingRClass,RoutingForm,RoutingFClass,modProd);
  Document("Routing Productions",RoutingPrRClass,RoutingPrForm,RoutingPrFClass,modProd);
  Document("Routing Production Orders",RoutingPrOrdRClass,RoutingPrOrdForm,RoutingPrOrdFClass,modProd);

  Maintenance("Create Planned Records from Ordered Items",PlanRecordsVClass,PlanRecordsMn,modProd);
  Maintenance("Update Recipes",UpdRecepyVClass,UpdRecepyMn,modProd);


/* modQT */

  Register("Quotations","Quotations",QTVc,modQT);
  Register("Contacts","Contacts",CUVc,modQT);
  Register("Items","Items",INVc,modQT);
  Register("Prices","Prices",PLVc,modQT);
//  Register("Pre Quotations","Pre Quotations",PreQTVc,modQT); no funcionality for this one

  Setting("Number Series - Quotations",QTSerTClass,modQT);
  Setting("Quotation Classes",QuoteClassTClass,modQT);
  Setting("Quotation Settings",QTSettTClass,modQT);

  Document("Quotations",QTRClass,QTForm,QTFClass,modQT);
  if (HasLocalization("PRT")) then begin
    Document("Proforma Invoice, Quotations",ProformaQTRClass,ProformaQTForm,ProformaQTFClass,modQT);
  end;

  Report("Accepted Quotations Journal",QTHistoryRClass,QTHstRn,0,modQT);
  Report("Outstanding Quotations",QTStkRClass,QTStkRn,0,modQT);
  Report("Pipeline",QTPipelineRClass,QTPipelineRn,0,modQT);
  Report("Price List",PriceRClass,PriceRn,0,modQT);
  if (HasLocalization("PRT")) then begin
    Report("Proforma Invoice Journal",ProformaIVJRClass,ProformaIVJRn,0,modQT);
  end;
  Report("Quotation Decision Statistics",QTAccRClass,QTAccRn,0,modQT);
  Report("Quotation Forecasting",QTForeCRClass,QTForecRn,0,modQT);
  Report("Quotation Journal",QTJRClass,QTJRn,0,modQT);
  Report("Quotation #Salesman# Statistics",QTSMStatsRClass,QTSMStatRn,0,modQT);
  Report("Quotation Status",QTStatusRClass,QTStatusRn,0,modQT);
//  Report("Forecast",ForecastRClass,ForecastRn,0,modQT);
//  Report("Quotation Statistics",QTStatRClass,QTStatRn,0,modQT);

  Maintenance("Update Quotations",UpdateQTVClass,UpdateQTMn,modQT);

/* modSO */

  Register("Orders","Orders",ORVc,modSO);
  Register("Contacts","Contacts",CUVc,modSO);
  Register("Items","Items",INVc,modSO);
  Register("Prices","Prices",PLVc,modSO);
  Register("Sales Contracts","Sales Contracts",ORCOVc,modSO);
/* What is this???????? */
//  Register("Repl Items","Repl Items",ReplINVc,modSO);

  Setting("Customer Items",CUINLClass,modSO);
  Setting("Delivery Addresses",DelAddrLClass,modSO);
  Setting("Delivery Modes",DMLClass,modSO);
  Setting("Delivery Terms",ShipDealLClass,modSO);
  Setting("Down Payments",DownPayTClass,modSO);
  Setting("Hazard Levels",HazLevLClass,modSO);
  Setting("Number Series - Orders",ORSerTClass,modSO);
  Setting("Order Classes",OrderClassLClass,modSO);
//  Setting("Order Mail",ORMailTClass,modSO);
  Setting("Order Settings",OrdSettTClass,modSO);
  Setting("Planned Delivery",PlanDeliveryTClass,modSO);
  Setting("#Stock# Reservation Access",ReservLocAccessLClass,modSO);
  Setting("#Stock# Reservation Settings",StockReservTClass,modSO);
  Setting("#Stock# Reservations",StockReservLClass,modSO);

  Document("Customer/#Supplier# Labels",CuLabRClass,CuLabForm,CuLabFClass,modSO);
  Document("Internal Sales Orders",Or2RClass,Or2Form,Or2FClass,modSO);
  Document("Orders",ORRClass,OrdForm,OrdFClass,modSO);
  
  Report("Deliverable List",ShipableRClass,ShipableRn,0,modSO);
  Report("Delivery List",DeliveryRClass,DeliveryRn,0,modSO);
  Report("Forecast",ForecastRClass,ForecastRn,0,modSO);
  Report("GP, Orders",ORGPRClass,ORGPRn,0,modSO);
  Report("Invoiceable Orders",InvableRClass,InvableRn,0,modSO);
  Report("Item List",ArtRClass,ArtRn,0,modSO);
  Report("Tag/Object/Order Statistics",ORObjStatRClass,ORObjStatRn,0,modSO);
  Report("Order Journal",ORJRClass,OrdRn,0,modSO);
  Report("Order Payment Status",ORPayStatusRClass,ORPayStatusRn,0,modSO);
  Report("Order Status",ORInfoRClass,ORInfoRn,0,modSO);
  Report("Ordered Items",OrdItemRClass,OrdItemRn,0,modSO);
  Report("Outstanding Orders",OrderStockRClass,OrderStockRn,0,modSO);
  Report("Over Delivered Orders",OverShippedRClass,OverShippedRn,0,modSO);
  Report("Price List",PriceRClass,PriceRn,0,modSO);
  Report("Produceability List",MaxprodRClass,MaxprodRn,0,modSO);
  Report("Sorted Order List",SORJRClass,SORJRn,0,modSO);
  Report("Sourcing List",SourceRClass,SourceRn,0,modSO);
  Report("#Stock# Reservations",INReservRClass,INReservRn,0,modSO);
  
  Maintenance("Barcode, EU Code and Item Code",ICToBCVClass,ICToBcMn,modSO);
  Maintenance("Create Deliveries from Orders",CreateSHsFSOsVClass,CreateSHsFromSOsMn,modSO);
  Maintenance("Create Planned Records from Ordered Items",PlanRecordsVClass,PlanRecordsMn,modSO);
  Maintenance("Create Planned Records from Orders",PlanSalesVClass,PlanSalesMn,modSO);
  Maintenance("Create #Purchase Orders#",GenPOFromORVClass,GenPOFromORMn,modSO);
  Maintenance("Create #Stock# Movements",SMFromORVClass,SMFromORMn,modSO);
  Maintenance("Group Invoicing",GroupInvoiceVClass,GroupInvoiceMn,modSO);
  Maintenance("Invoice Delivered Orders",CreateInvVClass,CreateInvMn,modSO);
  Maintenance("Recalculate Orders",RecalcORVClass,RecalcORMn,modSO);
/* WHAT IS THIS  ????? , it was written in HAL, someone has changed it and commented out, it was not me JJ*/
//  Maintenance("Create Simulations from Orders",CreateSMVClass,CreateSMMn,modSO);
/*##  Maintenance("Recalc #Stock#",FixStockVClass,FixStockMn,modSO);*/

/* modCredMan */
  
  Register("Credit Agreements","Credit Agreements",CredManVc,modCredMan);
  Register("Credit Agreement Types","Credit Agreement Types",CredManTypeVc,modCredMan);
  Register("Credit Applications","Credit Applications",CredManAppVc,modCredMan);
  Register("Contacts","Contacts",CUVc,modCredMan);
  Register("Items","Items",INVc,modCredMan);

  Setting("Credit Agreement Events",CredManEventLClass,modCredMan);
  Setting("Credit Agreement Settings",CredManSetTClass,modCredMan);
  Setting("Dwelling Types",DwellingTypeTClass,modCredMan);
  Setting("Ethnic Groups",EthnicGroupTClass,modCredMan);
  Setting("#Instalments#",InstallmentLClass,modCredMan);
  Setting("Interest Rates",CredManRateLClass,modCredMan);
  Setting("Number Series - Credit Agreements",CredManSerTClass,modCredMan);
  Setting("Number Series - Credit Applications",CredManAppSerTClass,modCredMan);
  Setting("Salutations",SalutationTClass,modCredMan);
  Setting("User Defined Fields - Credit Applications",CMAppUserLabelTClass,modCredMan);

  Report("Credit Agreement Info",CredManInfoRClass,CredManInfoRn,0,modCredMan);

  Document("Credit Agreement",CredManDocRClass,CredManForm,CredManFClass,modCredMan);
  Document("Credit Agreement Statement",CredManStatRClass,CredManStatForm,CredManStatFClass,modCredMan);
  
//  Maintenance("Create Credit Agreement Invoices",CreateContractIVVClass,CreateContractIVMn,modCredMan); // The Window definition and Procedure do not exist in master.

/* modSL */
  
  Register("Invoices","Invoices",IVVc,modSL);
  Register("Receipts","Receipts",IPVc,modSL);
  Register("Contacts","Contacts",CUVc,modSL);
  Register("Items","Items",INVc,modSL);
  Register("Item Groups","Item Groups",ITVc,modSL);
  Register("Internal Invoices","Internal Invoices",IntIVVc,modSL);
  if (HasLocalization("FIN")) then begin
    Register("Electronic Invoices Queue","Electronic Invoices Queue",EInvoiceQueVc,modSL);
    Register("Electronic Record Statuses","Electronic Record Statuses",ERecordStatusVc,modSL);
  end;

// Cash settings, report and maintenance were removed from #Sales Ledger# because they are POS things, if you want to use SL POS module, you have to get POS module anyway.
  Setting("Account Usage #S/L#",AccTClass,modSL);
  Setting("Age Limits",AgedTClass,modSL);
  Setting("Alternative Items",AltINLClass,modSL);
  Setting("Bonus",BonusDefLClass,modSL);
  //if (HasLocalization("BLR")) then begin
    //Setting("Cash Round Off for Belarus",BelRusCashTClass,modSL); 
  //end;
  Setting("Classification Types",CTypeLClass,modSL);
  Setting("Contact Credit Limits",CreditLimitLClass,modSL);
  Setting("Contact Document Types",CUDocTypeTClass,modSL);
  Setting("Contact Settings",CustomerSettingTClass,modSL);
  Setting("Credit Limit",CreditLimitTClass,modSL);
  Setting("Cross Sales Items",CrossINLClass,modSL);
  Setting("Customer Categories",CCatLClass,modSL);
  Setting("Default Items",CompItemLClass,modSL);
  Setting("Default Payment Modes",DefCashTClass,modSL);
  Setting("Electronic Invoices Customers Data",EInvCULClass,modSL);
  Setting("Electronic Invoices Layouts",EInvoiceLayoutTClass,modSL);
  Setting("Electronic Invoices Queue",EInvoiceQueLClass,modSL);
  Setting("Electronic Record Statuses",ERecordStatusLClass,modSL);
//  Setting("Electronic Invoicing",ElecInvTClass,modSL);//not used , different design
  Setting("Environment Tax",RepaTClass,modSL);
  Setting("Extra Tax Customer Discounts",Tax1RebLClass,modSL);
  Setting("Factoring Export",FactoringTClass,modSL);
  if (HasLocalization("LVA")) then begin
    Setting("FiDAViSta Import Filters",FVImpFilterTClass,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Setting("FInvoice Settings",FInvoiceSLTClass,modSL);
  end;
  if (HasLocalization("UKR")) then begin
    Setting("First Event Sales",FEIVLClass,modSL);
  end;
  Setting("Freight",FreightTClass,modSL);
  Setting("Freight/Weight Calculation",FreightWeightTClass,modSL);
  Setting("Gift Vouchers Issued",GCLClass,modSL);
  Setting("Gift Vouchers Received",GCRLClass,modSL);
  Setting("Gift Vouchers Settings",GCTClass,modSL);
  Setting("Gift Vouchers Sold",GCSLClass,modSL);
  Setting("#Instalments#",InstallmentLClass,modSL);
  Setting("Interest",IITClass,modSL);
  Setting("Interest Codes",IntLClass,modSL);
  Setting("Interest Terms",IRLClass,modSL);
  Setting("Intrastat Transaction Codes",IntrastatTransCodeTClass,modSL);
  Setting("Invoice Mail Settings",IVMailTClass,modSL);
  Setting("Item Classifications",DILClass,modSL);
  Setting("Item Group Withholdings",WHITLClass,modSL);
  Setting("Item Settings",ItemSettingTClass,modSL);
  Setting("Item Status Settings",ItemStatusSettTClass,modSL);
  Setting("Legal Record Numbers",LegalInvNrTClass,modSL);
  if (HasLocalization("HRV,POL")) then begin
    Setting("Legal Record Numbers 2",LegalInvNr2TClass,modSL);
  end;
  Setting("Number Series - Contacts",CUSerTClass,modSL);//PRSerTClass
  if (HasLocalization("UKR")) then begin
    Setting("Number Series - First Event Sales",FEIVSerTClass,modSL);
  end;
  Setting("Number Series - Gift Vouchers",GCSerTClass,modSL);
  Setting("Number Series - Gift Vouchers Received",GCRSerTClass,modSL);
  Setting("Number Series - Internal Invoices",IntIVSerTClass,modSL);
  Setting("Number Series - Invoices",IVSerTClass,modSL);
  Setting("Number Series - Receipts",IPSerTClass,modSL);
  if (HasLocalization("HRV,POL,SVN,SRB,UKR")) then begin
    Setting("Number Series - #VAT# Corrections #S/L#",VATIVSerTClass,modSL);
  end;
  Setting("Official Invoice Serial Number",OffInvTClass,modSL);
  Setting("Payment Modes",PMTClass,modSL);
  Setting("Payment Term Sales A/C",PDSalesAccTClass,modSL);
  Setting("Payment Terms",PDLClass,modSL);
  Setting("Receipts Setting",IPTClass,modSL);
  if (HasLocalization("FIN")) then begin
    Setting("Reference Number Settings",CalcRefTClass,modSL);
  end;
  Setting("Regions",RegionLClass,modSL);
  Setting("Regional Perception Customer Discounts",RPTaxRebLClass,modSL);
  Setting("Regional Perception Taxes",RPTaxLClass,modSL);
  Setting("Regional Perception Taxes for Customers",RPCUTaxLClass,modSL);
  Setting("Regional Sales Taxes",RSTaxLClass,modSL);
  Setting("Registration Defaults",RegDefTClass,modSL);
  Setting("Reminder Texts",RMLClass,modSL);
  Setting("Sales Invoice Settings",IVTTClass,modSL);
  Setting("Standard Problems",StandProblemLClass,modSL);
//  Setting("Tax Authorities IDs",TaxAuthIDBlockTClass,modSL);
  Setting("Units",UnitLClass,modSL);
  if (HasLocalization("HRV,POL,SVN,SRB,UKR")) then begin
    Setting("#VAT# Correction Originals at Our Company",VATIVReasonLClass,modSL);
    Setting("#VAT# Correction #S/L# Types",VATIVTypeTClass,modSL);
    Setting("#VAT# Corrections #S/L#",VATIVLClass,modSL);
    Setting("#VAT# Correction Settings",VATIVTTClass,modSL);
  end;
  Setting("#VAT# Zone Label",VATZoneLabelTClass,modSL);
//  Setting("Sales Codes",SalesCodeTClass,modSL); Manual says not used any more. Hmm, the manual is not correct then, they are used in the code!

  Document("Cash Notes",KIVRClass,CashInvForm,CashFClass,modSL);
  Document("#Credit Notes#",CIVRClass,CredInvForm,CredFClass,modSL);
  Document("Customer/#Supplier# Labels",CuLabRClass,CuLabForm,CuLabFClass,modSL);
  Document("Debtors Letter",DebtLetRClass,DebtorLetForm,DebtLetFClass,modSL);
  Document("EU #VAT# Sales",SLEUVAT2RClass,SLEUVATForm,SLEUVATFClass,modSL);
  if (HasLocalization("UKR")) then begin
    Document("First Event Sales",FEIVRClass,FEIVForm,FEIVFClass,modSL); 
  end;
  Document("Gift Vouchers",GCRClass,GCForm,GCFClass,modSL); 
  Document("Interest Invoices",IIVRClass,IIInvForm,IIFClass,modSL);
  Document("Internal Invoices",IntIVRClass,IntIVForm,IntIVFClass,modSL);
  Document("Intrastat #S/L#",IntraStaRClass,InStaForm,InStaFClass,modSL);
  if (HasLocalization("PRT")) then begin
    Document("Invoice/Receipt's",KIVRClass,CashInvRecPRTForm,CashRecPRTFClass,modSL);
  end;
  Document("Invoices",IVRClass,InvForm,InvFClass,modSL); 
  Document("Open Invoice Customer Statement",ARSRClass,ARSForm,ARSFClass,modSL);
  Document("Periodic Customer Statement",CuPerRClass,CuPerForm,CuPerFClass,modSL);
  if (HasLocalization("PRT")==false) then begin
    Document("Proforma Invoices",Inv1RClass,Inv1Form,Inv1FClass,modSL);
  end;
  Document("Project Invoices",PIVRClass,ProjInvForm,PRInvFClass,modSL);
  Document("Receipt Forms",IPDRClass,IPDForm,IPDFClass,modSL);
  Document("Reminders",RemRClass,RemForm,RemFClass,modSL);
  if (HasLocalization("RUS")) then begin
    Document("Sales Book",SalesB2RClass,SLBookForm,SLBookFClass,modSL); 
  end;
  if (HasLocalization("HRV,SVN")) then begin
    Document("Sales Book",SalesBookHRVRClass,SalesBookHRVForm,SalesBookHRVFClass,modSL); 
  end;
  
  if (HasLocalization("HRV,POL,SVN,SRB,UKR")) then begin
    Document("#VAT# Corrections #S/L#",VATIVRClass,VATIVForm,VATIVFClass,modSL); 
    Document("#VAT# Corrections #S/L# Credit Notes",VATCIVRClass,VATCIVForm,VATCIVFClass,modSL);
  end;
//  Document("#Sales Ledger#",AR2DRClass,ARDForm,ARDFClass,modSL);will be written soon

  Report("Bonus, #Salesman#",BonusRClass,BonusRn,0,modSL);
  Report("Cash Receipts",CashReceiptRClass,CashReceiptRn,0,modSL);
  Report("Contact List",CURClass,CustRn,0,modSL);
  if (HasLocalization("HRV")) then begin
    Report("Consumption Taxes Summary",ConsTaxSumRClass,ConsTaxSumRn,0,modSL);
  end;
  if (HasLocalization("EST")) then begin
    Report("Converting bank accounts (IBAN)",ConverttoIBANRClass,ConverttoIBANRn,0,modSL);
  end;
  Report("Credit Notes, Updating #Stock#",CrStckRClass,CrStckRn,0,modSL);
  Report("Customer Credit Status",CredStatusRClass,CredStatusRn,0,modSL);
  Report("Customer Sales Statistics",CustSalesRClass,CustSalesRn,0,modSL);
  Report("Customer Statistics",CustSTRClass,CustSTRn,0,modSL);
  Report("Customer Status",CustPSRClass,CustPSRn,0,modSL);
  Report("Customer Withholdings",CustWithHoldRClass,CustWithHoldRn,0,modSL);
  Report("Customer/Item Statistics",CuArtSTRClass,CuArtSTRn,0,modSL);
  if (HasLocalization("EST")) then begin
    Report("Data validation (Electronic Invoice)",FindMisMatchRClass,FindMisMatchRn,0,modSL);
  end;
  Report("Discount Statistics",Cust2STRClass,Cust2STRn,0,modSL);
  if (HasLocalization("ARG")) then begin
    Report("Electronic Invoice Status (Argentina)",HTSStatArgIVRClass,HTSStatArgIVRn,0,modSL);
  end;
  Report("Electronic Invoice Status",HTSStatIVRClass,HTSStatIVRn,0,modSL);
//  Report("Electronic Invoice Status",HTSIVStatRClass,HTSIVStatRn,0,modSL);//wierd one
  Report("EU #VAT# Sales",SLEUVATRClass,SLEUVATRn,0,modSL);
  if (HasLocalization("SVN")) then begin
//  Report("EU #VAT# Sales, Slovenia",SLEUVATSloRClass,SLEUVATSloRn,0,modSL);
  end;
  if (HasLocalization("NOR,SWE,FIN")) then begin
    Report("E-Invoicing Customer Data",EInvCustDataRClass,EInvCustDataRn,0,modSL);
  end;    
  if (HasLocalization("EST")) then begin
    Report("Failed Electronic Invoices",eAKErrInvRClass,eAKErrInvRn,0,modSL);
  end;
  if (HasLocalization("UKR")) then begin
    Report("First Event Sales Journal",FEIVJRClass,FEIVJRn,0,modSL);
  end;
  Report("Gift Vouchers",GiftCerRClass,GiftCerRn,0,modSL);
  Report("GP, Invoices",IVGPRClass,IVGPRn,0,modSL);
  Report("Interest Invoicing",CUIntRClass,CUIntRn,0,modSL);
  Report("Invoice Journal",IVJRClass,InvoiceRn,0,modSL);
  Report("Invoice Media Status",IVMediaStatusRClass,IVMediaStatusRn,0,modSL);
  Report("Item Classifications List",DIListRClass,DIListRn,0,modSL);
  Report("Item Group List",ITListRClass,ITListRn,0,modSL);
  Report("Item Group Sales Statistics",ItemGrSalesRClass,ItemSales2Rn,0,modSL);
  Report("Item Group #VAT#",ITVATRClass,ITVATRn,0,modSL);
  Report("Item List",ArtRClass,ArtRn,0,modSL);
  Report("Item Multi-Buy Statistics",INMultiBuyStatRClass,INMultiBuyStatRn,0,modSL);
  Report("Item Price List Statistics",INPriceListStatRClass,INPriceListStatRn,0,modSL);
  Report("Item/Quantity Statistics",INQtyRClass,INQtyRn,0,modSL);
  Report("Item/Salesman Statistics",IStatRClass,IStatRn,0,modSL);
  Report("Item Sales Statistics",ItemSalesRClass,ItemSalesRn,0,modSL);
  Report("Item Statistics",ArtSTRClass,ArtSTRn,0,modSL);
  Report("Item Turnover History",ItemTurnRClass,ItemTurnRn,0,modSL);  
  Report("Legal Invoice Forms Usage",LegInvFormRClass,LegInvFormRn,0,modSL);
  Report("Monthly Customer Sales History",MonthSalesHistCURClass,MonthSalesHistCURn,0,modSL);
  if (HasLocalization("SLV")) then begin
    Report("Monthly Sales Witholdings (El Salvador)",SLRetSLVRClass,SLRetSLVRn,0,modSL);
  end;
  Report("Monthly #Salesman# History",MonthSalesHistSMRClass,MonthSalesHistSMRn,0,modSL);
  Report("#N/L# Transfer, Invoices",BokundRClass,BokundRn,0,modSL);
  Report("Open Invoice Customer Statement",ARS2RClass,ARS2Rn,0,modSL);
  Report("Overview of #Instalments#",InstListSLRClass,InstListSLRn,0,modSL);
  Report("Perceptions Taxes",RPTaxJRClass,RPTaxJRn,0,modSL);
  Report("Periodic Customer Statement",CuPer2RClass,CuPerRn,0,modSL);
  Report("Prepayment History #S/L#",PerPayHisSLRClass,PerPayHisSLRn,0,modSL);
  Report("Price List",PriceRClass,PriceRn,0,modSL);
  Report("Receipt History",CUPayHistoryRClass,CUPayHistoryRn,0,modSL);
  Report("Receipt Journal",IPRClass,IPRn,0,modSL);
  Report("Receipt/Salesman History", IPSalesManRClass,IPSalesManRn,0,modSL);  
  Report("Receipts Forecast",IPProgRClass,IPProgRn,0,modSL);
  Report("Regional Taxes",RegVATCodeJRClass,RegVATCodeJRn,0,modSL);
  if (HasLocalization("RUS")) then begin
    Report("Sales Book",SalesB1RClass,SalesB1Rn,0,modSL);
  end;
  Report("#Sales Ledger#",ARRClass,ARRn,0,modSL);
  Report("#Sales & Purchase Ledger#",ARAPRClass,ARAPRn,0,modSL);
  Report("#Sales Ledger# Statistics",SLStatRClass,CUHistRn,0,modSL);
  Report("Sales Per Hour",IVPerHourRClass,IVPerHourRn,0,modSL);
  Report("Sales Per Location",IVPerLocRClass,IVPerLocRn,0,modSL);
  Report("Search for Item",SearchItemRClass,SearchItemRn,0,modSL);
  Report("Serial No. Item Sales Statistics",SerialItemStatRClass,SerialItemStatRn,0,modSL);
  Report("Transaction Tax Invoices", TransTaxIVRClass,TransTaxIVRn,0,modSL);  
  Report("#VAT Code# Statistics",SLVATRClass,SLVATRn,0,modSL);
  if (HasLocalization("UKR")) then begin
    Report("#VAT# Correction #S/L# Register (Ukraine)",VATIVRegUkrRClass,VATIVRegUkrRn,0,modSL);
  end;
  Report("#VAT# Customer Sales",RealCustRClass,RealCustRn,0,modSL);
  if (HasLocalization("LVA")) then begin
    Report("#VAT# Declaration Annex, #VAT#-2 (Latvia)",LATEUSalesRClass,LATEUSalesRn,0,modSL);
  end;  
  Report("#VAT# Differences",LithDiffRClass,LitDifRn,0,modSL);
  Report("#VAT# per Customer",SLVATCURClass,SLVATCURn,0,modSL);
  Report("#VAT Reg. Number# History",CUVERClass,CUVERn,0,modSL);
  if (HasLocalization("SLV")) then begin
    Report("#VAT# Report Base (El Salvador)",SLVATBaseSLVRClass,SLVATBaseSLVRn,0,modSL);
  end;
  Report("#VAT# Report Sales",SLVATRepRClass,SLVATRepRn,0,modSL);
  if (HasLocalization("ARG")) then begin
    Report("#VAT# Report Sales (Argentina)",SLVATArgRClass,SLVATArgRn,0,modSL);  
  end;
  if (HasLocalization("BOL")) then begin
    Report("#VAT# Report Sales (Bolivia)",SLVATBolRClass,SLVATBolRn,0,modSL);
  end;
  if (HasLocalization("SLV")) then begin
    Report("#VAT# Report Sales (El Salvador)",SLVATSLVRClass,SLVATSLVRn,0,modSL);
  end;
  if (HasLocalization("GTM")) then begin
    Report("#VAT# Report Sales (Guatemala)",SLVATGTRClass,SLVATGTRn,0,modSL);
  end;
  if (HasLocalization("HND")) then begin
    Report("#VAT# Report Sales (Honduras)",SLVATHonRClass,SLVATHonRn,0,modSL);  
  end;
  if (HasLocalization("HUN")) then begin
    Report("#VAT# Report Sales (Hungary)",SLVATHunRClass,SLVATHunRn,0,modSL);  
  end;
  if (HasLocalization("KEN")) then begin
    Report("#VAT# Report Sales (Kenya)",SLVATKenRClass,SLVATKenRn,0,modSL);  
  end;
  if (HasLocalization("LTU,KEN")) then begin
    country = "(Lithuania)";
    if (HasLocalization("KEN")) then begin 
      country = "(Kenya 1)";
    end;  
    Report("#VAT# Report Sales " & country,SLVATLitRClass,SLVATLitRn,0,modSL);  
  end;
  if (HasLocalization("MEX")) then begin
    Report("#VAT# Report Sales (Mexico)",SLVATMexRClass,SLVATMexRn,0,modSL);
  end;
  if (HasLocalization("NIC")) then begin
    Export("#VAT# Report Sales (Nicaragua)",SLVATNIRClass,SLVATNIRn,modSL);
  end;
  if (HasLocalization("PAN")) then begin
    Report("#VAT# Report Sales (Panama)",SLVATPARClass,SLVATPARn,0,modSL);
  end;
  if (HasLocalization("SRB")) then begin
    Report("#VAT# Report Sales (Serbia)",SLVATSerRClass,SLVATSerRn,0,modSL);  
  end;
  if (HasLocalization("UKR")) then begin
    Report("#VAT# Report (Ukraine)",SLVATUkrRClass,SLVATUkrRn,0,modSL);  
  end;
  Report("Void Report",VoidedRowsRClass,VoidedRowsRn,0,modSL);

/* Complain to Kjell before the end of January if you need this */
//  Report("Aged Receivables",AgRcRClass,AgedRecRn,0,modSL);
//  Report("Intrastat",IntraStaRClass,IntraStaRn,0,modSL);
  if (HasLocalization("HUN")) then begin
    Report("Invoice Journal (for Hungary)",IVJ2RClass,Invoice2Rn,0,modSL);
  end;
/* This is NOT in English... I know the company is called Kredits... but... */
//  Report("Kredittstyring",KreditstyRClass,KreditstyRn,0,modSL);  

  Export("Analytical Cash Flow",ExportCashFlowEClass,ExportCashFlowEn,modSL);
  if (HasLocalization("HRV,SVN")) then begin
    Export("(Croatia, Slovenia) Cash Invoices Export",CashInvCroEClass,CashInvExEn,modSL);
  end;
  if (HasLocalization("MEX")) then begin
    Export("CFDI E-invoicing (Mexico)",CFDIEInvEClass,CFDIEInvEn,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Export("Communication of Invoices to AT - SAFT",PortTaxXml2EClass,PortTaxXml2En,modSL);
  end;
  if (HasLocalization("SWE")) then begin
    Export("Credit Control",KreditstyEClass,KreditstyEn,modSL);
  end;
  Export("Customer Statistics",CustSTEClass,CustSTEn,modSL);
  Export("Customer Turnover History",CustTurnEClass,CustTurnEn,modSL);
  Export("Customer/Item Statistics",ICSEClass,ICSEn,modSL);
// These DD functions should have one window, one selection, depending on bank files setting or something
  if (HasLocalization("DEN")) then begin
    Export("DanInvoice",DanInvoiceEClass,DanInvoiceEn,modSL);
  end;
  Export("Debt Collection to Predator",InvInkassoEClass,InvInkassoEn,modSL);
  Export("Direct Debit to Hansabank",DDHansaEClass,DDHansaEn,modSL);
//  Export("Direct Debit to Norwegian BBS",DDNorBBSEClass,DDNorBBSEn,modSL);
  if (HasLocalization("HRV")) then begin
    Export("EU #VAT# Sales",SLEUVATHRVECLass,SLEUVATHRVEn,modSL);
  end;
  if (HasLocalization("EST")) then begin
    Export("Electronic Invoice",eInvoiceEClass,eInvoiceEn,modSY);
  end;
  if (HasLocalization("LVA")) then begin
    Export("EU Sales Export (Latvia)",LatEUSalesEClass,LatEUSalesEn,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("EU #VAT# Sales (Lithuania)",SLEUVATLitECLass,SLEUVATLitEn,modSL);
  end;
  if (HasLocalization("MEX")) then begin
    Export("E-Invoices Journal (Mexico)",EInvoicesJMexEClass,EInvoicesJMexEn,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Export("Finvoice",FInvoiceEClass,FInvoiceEn,modSL);
  end;
  if (HasLocalization("UKR")) then begin
    Export("First Event Sales Book",FEIVBookEClass,FEIVBookEn,modSL);  
  end;
  if (HasLocalization("BRA")) then begin
    Export("Fiscal Note for Services",BraFiscalNoteEClass,BraFiscalNoteEn,modSL); 
  end;
  if (HasLocalization("CZE,SVK")) then begin
    Export("Intrastat #S/L# (Czech Republic)",CZIntrastatIVEClass,CZIntIVEn,modSL);
  end;
  if (HasLocalization("EST")) then begin
    Export("Intrastat #S/L# (Estonia)",EstIntrastatIVEClass,EstIntIVEn,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Export("Intrastat #S/L# (Finland)",FinIntrastatIVEClass,FinIntIVEn,modSL);
  end;
  if (HasLocalization("DEU")) then begin
    Export("Intrastat #S/L# (Germany)",GerIntrastatIVEClass,GerIntIVEn,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("Intrastat #S/L# (Lithuania)",LitIntrastatIVEClass,LitIntIVEn,modSL);
  end;
  if (HasLocalization("SWE")) then begin
    Export("Intrastat #S/L# (Sweden, IDEP-SCB)",SWEIntraStatIVEClass,SWEIntraStatIVEn,modSL);
  end;
  Export("Intrastat Invoices",EngIntrastatIVEClass,EngIntIVEn,modSL);
  if (HasLocalization("GBR")) then begin
    Export("Intrastat Invoices (UK)",EngIntrastatIVUKEClass,EngIntIVUKEn,modSL);
  end;
  Export("Invoices for Factoring",InvFactEClass,InvFactEn,modSL);
  if (HasLocalization("SVN")) then begin
    Export("Invoices #S/L# (Slovenia)",IVSloEClass,IVSloEn,modSL);
  end;
  Export("Item Statistics",ArtSTEClass,ArtSTEn,modSL);
  Export("Item Turnover History",ItemTurnEClass,ItemTurnEn,modSL);
  Export("Items to Fiscal Printer Fi550",ItemstoFi550EClass,ItemstoFi550En,modSL);
  if (HasLocalization("ARG")) then begin
    Export("#P/L# Withholding and Perceptions (Argentina)",PLARCIBAEClass,PLARCIBAEn,modSL);
    Export("Regional Withholdings (Argentina)",SIFEREEClass,SIFEREEn,modSL);
    Export("#S/L# CITI (Argentina)",SLCITIEClass,SLCITIEn,modSL);
  end;
  Export("#S/L# Forest Export", ForestSLEClass,ForestSLEn,modSL);
  if (HasLocalization("ARG")) then begin
    Export("#S/L# Taxes - (Argentina)",SLWORMArgEClass,SLWORMArgEn,modSL);
    Export("#S/L# #VAT# Gross Income Perception (Argentina)",SLGIPArgEClass,SLGIPArgEn,modSL);
    Export("#S/L# #VAT# Gross Income Perceptions per Region (Argentina)",SLGIPRArgEClass,SLGIPRArgEn,modSL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#VAT# Declaration Annex #VAT#1-III (Latvia)",LatVATSalesEClass,LatVATSalesEn,modSL);
  end;
  if (HasLocalization("BOL")) then begin
    Export("#S/L# #VAT# Invoices (Bolivia)",SLVATBolEClass,SLVATBolEn,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#S/L# #VAT# Invoices (Lithuania)",LitVATRegIVEClass,LitVATRegIVEn,modSL);
  end;
  if (HasLocalization("SVN")) then begin
    Export("#S/L# #VAT# Invoices (Slovenia)",SLVATSloEClass,SLVATSloEn,modSL);
  end;
  if (HasLocalization("ARG")) then begin
    Export("#S/L# #VAT# Withholdings (Argentina)",SLVATWithArgEClass,SLVATWithArgEn,modSL);
  end;
//  Export("Telema Invoice (Estonia)",TelemaInvEClass,TelemaInvEn,modSL);
  if (HasLocalization("POL")) then begin
    Export("Ist@at - Items Export",IstaatItemExportEClass,IstaatItemExportEn,modSL);
  end;
  
  Import("Banking File",RefIPIn,RefIPIn,modSL);
  if (HasLocalization("MEX")) then begin
    Import("CFDI E-invoicing (Mexico)",0,CFDIEInvIn,modSL);
  end;
  if (HasLocalization("BRA")) then begin
    Import("Fiscal Note for Services Reply",0,BraFiscalNoteIn,modSL);
  end;
  if (HasLocalization("ARG")) then begin
    Import("Regional Perceptions & Withholdings (Argentina)",PercAndWHIClass,PercAndWHIn,modSL);
    Import("Regional Perceptions & Withholdings Corrections (Argentina)",PercAndWHCorrIClass,PercAndWHCorrIn,modSL);
  end;

  if (HasLocalization("MEX")) then begin
    Maintenance("CFDI E-invoicing Import (Mexico)",CFDIEInvVClass,CFDIEInvMn,modSL);
  end;
  if (HasLocalization("NOR,SWE,FIN")) then begin
    Maintenance("Create E-Invoicing Customer Data",CreateEInvCustDataVClass,CreateEInvCustDataMn,modSL);
  end;  
  Maintenance("Create Interest Invoices",CUIntVClass,CUIntMn,modSL);
  Maintenance("Create Mails from Invoices",IVToMailVClass,IVToMailMn,modSL);
  Maintenance("Create Open Invoice Customer Statement Email",ARSEmailVClass,ARSEmailMn,modSL);
  Maintenance("Create Periodic Customer Statement Email",CUPerEmailVClass,CUPerEmailMn,modSL); // We have this belowe SendPerStatVClass
  if (HasLocalization("EST")) then begin
    Maintenance("Create Receipts from Bank Transactions",IPFromBankTRVClass,IPFromBankTRMn,modSL);
  end;
  if (HasLocalization("HRV,POL,SVN,SRB,UKR")) then begin
    Maintenance("Create #VAT# Corrections #S/L#",VATIVVClass,VATIVMn,modSL);
  end;
  Maintenance("Delete Unused Items",DelNotUsedINVClass,DelNotUsedINMn,modSL);
  if (HasLocalization("EST")) then begin
    Maintenance("Direct Debit to SEB",DDSEBOClass,DDSEBMn,modSL);
    Maintenance("Generate Service ID/ Reference Number",AutoRefStrVClass,AutoRefStrMn,modSL);
  end;
  Maintenance("OK Invoices",OKInvVClass,OKInvMn,modSL);
  Maintenance("OK Invoices (Non Stop)",OKInvVClass,OKInvNSMn,modSL);
  Maintenance("Recreate Reference Field",RebFinRefVClass,RebFinRefMn,modSL);
  if (HasLocalization("PRT")) then begin
    Maintenance("SAFT to Email",SAFTtoEmailVClass,SAFTtoEmailMn,modSL);
  end;
  if (HasLocalization("EST")) then begin
    Maintenance("Resend Electronic Invoices",ResendEstEInvVClass,ResendEstEInvMn,modSL);
  end;
  if (HasLocalization("MEX")) then begin
    Maintenance("Send E-Invoices spool file (Mexico)",MexEInvSpoolVClass,MexEInvSpoolMn,modSL);
  end;
  Maintenance("Transfer to Bad Debtors",BadCUVClass,BadCUMn,modSL);
  Maintenance("Update Customer Classification",CustUpClass,CustUpMn,modSL);
  Maintenance("Write off Invoices",WriteOffVClass,WriteOffMn,modSL);

/* modCRM */

  Register("Target Time","Target Time",TargTimeVc,modCRM);
  Register("Customer Letters","Customer Letters",LetVc,modCRM);
  Register("Contacts","Contacts",CUVc,modCRM);
  Register("Standard Texts","Standard Texts",LTxtVc,modCRM);
  Register("Standard Periods","Standard Periods",StdPeriodVc,modCRM);
  Register("Mailing Lists","Mailing Lists",PersColVc,modCRM);
//  Register("SMSs","SMSs",SMSVc,modCRM);
  Register("Contact Relations","Contact Relations",ContactRelVc,modCRM);
//  Register("Chat Logs","Chat Logs",ChatLogVc,modCRM);

  Report("Activities Journal",ActJRClass,ActJRn,0,modCRM);
  Report("Activities Check, Persons",UserActCheckRClass,UserActCheckRn,0,modCRM);
  Report("Activities, Contacts",ActCURClass,ActCURn,0,modCRM);
  Report("Activities, Period", ActWeekRClass,ActWeekRn,0,modCRM);
  Report("Activities, Persons",ActPersRClass,ActPersRn,0,modCRM); // Shouldn't this be only in System?
  Report("Activity Type List",ActTypeRClass,ActTypRn,0,modCRM);
  Report("Birthday List",BirthDayRClass,BirthDayRn,0,modCRM);
  Report("Calendar Booking History",ActCalBookRClass,ActCalBookRn,0,modCRM);
  Report("Contact List",CURClass,CustRn,0,modCRM);
//  Report("Chat Log",ChatLogRClass,ChatLogRn,0,modCRM);
  Report("Contact List for all Companies",CUforAllCompaniesRClass,CustforAllCompaniesRn,0,modCRM);//internal use
//  Report("Contact Person List",ContactListRClass,ContactListRn,0,modCRM); // No more specific contact register
  if (HasLocalization("GBR")) then begin
    Report("Contact Validity (UK)",UKContactValidityRClass,UKContactValidityRn,0,modCRM);
  end;
  Report("Customer Sales Statistics",CustSalesRClass,CustSalesRn,0,modCRM);
  Report("Customer Statistics",CustSTRClass,CustSTRn,0,modCRM);
  Report("Customer Status",CustPSRClass,CustPSRn,0,modCRM);
  Report("Customer/Item Statistics",CuArtSTRClass,CuArtSTRn,0,modCRM);
  Report("Customers without/with Activities",NoActCURClass,NoActCURn,0,modCRM);
  Report("Employee Calendar",ActCalStaffRClass,ActCalStaffRn,0,modCRM);
  Report("Employee Time Statistics",EMTimeStatRClass,EMTimeRn,0,modCRM);
  Report("Item/Salesman Statistics",IStatRClass,IStatRn,0,modCRM);
  Report("Letter List",LetInfoRClass,LetInfoRn,0,modCRM);
  Report("List Invalid Phone Numbers",InvPhoneNoRClass,InvPhoneNoRn,0,modCRM);
  Report("Monthly Consulting",MonthConsultRClass,MonthConsultRn,0,modCRM);
  Report("Monthly Consulting Result",MonthConsultResRClass,MonthConsultResRn,0,modCRM);
  Report("Monthly Sales",MonthSalesRClass,MonthSalesRn,0,modCRM);
  Report("Monthly Sales Result",MonthSalesResRClass,MonthSalesResRn,0,modCRM);
  Report("Monthly Support",MonthSupportRClass,MonthSupportRn,0,modCRM);
  Report("Personal Calendar",ActCalRClass,ActCalRn,0,modCRM);
  Report("Search for Contact Person",SearchContactRClass,SearchContactRn,0,modCRM);
  Report("Soft Factor Analysis",SoftFactAnalysisRClass,SoftFactAnalysisRn,0,modCRM);
  Report("Target Time List",TargTimeJRClass,TargTimeJRn,0,modCRM);
  Report("Telephone List",TeleRClass,TeleRn,0,modCRM);
//  Report("User Activities",ActJRClass,ActJRn,0,modCRM);//same as Acitvities journal
  Report("Who has bought/not bought",NoSalesRClass,NoSalesRn,0,modCRM);
//  Report("Activity List",ActListRClass,ActListRn,0,modCRM);
/* Something is wrong with the way it reads records */
//  Report("Detailed Todo",ToDoExtendedRClass,Detail2DoRn,0,modCRM);
/* Time Statistics has all the functionallity now. */
//  Report("Employee Planned Time",EMPlanRClass,EMPlanRn,0,modCRM);
//  Report("To Do List",ActTodoRClass,ActTodoRn,0,modCRM);

  Setting("Activity Classes",ActTypeGrLClass,modCRM);
  Setting("Activity Consequences",ActSeqLClass,modCRM);
  Setting("Activity Types",ActTypeLClass,modCRM);
  Setting("Activity Types, Subsystems",ASTTClass,modCRM);
  Setting("Additional Email Recipients",EmailRecipLClass,modCRM);
  Setting("Classification Types",CTypeLClass,modCRM);
  Setting("Company Workflow Overview",PipelineOverviewTClass,modCRM);
  Setting("Contact Classifications",CClassLClass,modCRM);
  Setting("Contact Settings",CustomerSettingTClass,modCRM);
  Setting("Contact Sync",ContactSyncLClass,modCRM);
  Setting("CRM Settings",CRMTClass,modCRM);
  Setting("Courtesy Titles",CourtesyTitlesTClass,modCRM);
  Setting("Customer Categories",CCatLClass,modCRM);
  Setting("Default Activity Text Codes",CompTextTypeLClass,modCRM);
  Setting("#Favourite# Activity Types",FavActTypeLClass,modCRM);
  Setting("Global CRM Settings",GlobalCRMTClass,modCRM);
  Setting("Info in Customer Status Report",CustPSLClass,modCRM);
  Setting("Info in #Supplier# Status Report",VEPSLClass,modCRM);
  Setting("Job Titles",JobTitleLClass,modCRM);
  Setting("Lead Registration",LeadRegistTClass,modCRM);
  Setting("Map Setting",MapBlockTClass,modCRM);
  Setting("Monthly Forecast",ForecastUserLClass,modCRM); //internal
  Setting("Monthly Result",ResultUserLClass,modCRM); //internal
  Setting("Number Series - Activities, #N/L# Transactions",ActNLSerTClass,modCRM);
  Setting("Number Series - Customer Letters",LetSerTClass,modCRM);
  Setting("Normalized Phone Numbers",NormPhoneNumLClass,modCRM);
  Setting("Telephony Settings",CompPhonePrefsTClass,modCRM);
  Setting("Text Types",TextTypeLClass,modCRM);
  Setting("User Defined Fields - Activities",ActUserLabelTClass,modCRM);
  Setting("User Defined Fields - Contacts",CUUserLabelTClass,modCRM);
  Setting("User Defined Fields - Items",INUserLabelTClass,modCRM);
  Setting("User Workflow Overview",UserPipelineOverviewLClass,modCRM);
  Setting("User Settings - Monthly Report",MonthlyUserSetLClass,modCRM);

  Document("Activities",ActDocRClass,ActDocForm,ActDocFClass,modCRM);
  Document("Contact Labels",CoLabRClass,CoLabForm,CoLabFClass,modCRM);
  Document("Customer Letters",LetRClass,LetForm,LetFClass,modCRM);
  Document("Customer/#Supplier# Labels",CuLabRClass,CuLabForm,CuLabFClass,modCRM);

  Maintenance("Add Classification to Customers",NoSalesVClass,NoSalesMn,modCRM);
  Maintenance("Apply Standard Period",ApyStdPeriodMClass,ApyStdPeriodMn,modCRM);
  Maintenance("Close Contacts",CloseCUVClass,CloseCUMn,modCRM);
  Maintenance("Create Mails from Activities",ActToMailVClass,ActToMailMn,modCRM);
  Maintenance("Mass Emailing",MassMailVClass,MassMailMn,modCRM);
  Maintenance("Move Activities to Another Company",ActMoveCompVClass,ActMoveCompMn,modCRM);
  Maintenance("OK Period",OkPeriodVClass,OkPeriodMn,modCRM);
  Maintenance("Rebuild Number Recognition Register",NormPhoneNumVClass,NormPhoneNumMn,modCRM);
  Maintenance("Remove Classification from Contacts",RemoveClassCUMClass,RemoveClassMn,modCRM);
//  Maintenance("Send Periodical Customer Statements to Customer",SendPerStatVClass,SendPerStatMn,modCRM); // We have this above CUPerEmailVClass
  Maintenance("Update Contact Register Data",UpdContactVClass,UpdContactMn,modCRM);

/* modNL */
  
  Register("Transactions","Transactions",TRVc,modNL);
  Register("Simulations","Simulations",SMVc,modNL);
  Register("Account Reconciliation","Account Reconciliation",BankRecWClass,modNL);
  Register("Accounts","Accounts",AccVc,modNL);
  Register("Tags/Objects","Tags/Objects",ObjVc,modNL);
  Register("Budgets","Budgets",Bud1Vc,modNL);
  Register("Revised Budgets","Revised Budgets",Bud2Vc,modNL);
  Register("Payments Plan","Payments Plan",PlannedPaymentsWClass,modNL);

  Setting("Account Classifications",AccClassLClass,modNL);
  Setting("Account Classification Types",AccClassTypeLClass,modNL);
  Setting("Account Short Codes",ACShortLClass,modNL);
  Setting("Account Transfers",AccTransLClass,modNL);
  Setting("Accounting Periods",AccPeriodLClass,modNL);
  Setting("Autotransactions",AutLClass,modNL);
  Setting("Auto Eliminations",AccElimLClass,modNL);
  if (HasLocalization("EST")) then begin
    Setting("Bank Transactions",BankTRLClass,modNL);
  end;
  Setting("Brought Forward Balances",FBLClass,modNL);
  Setting("Budget Classes",BudgetClassTClass,modNL);
  Setting("Budget Keys",BFLClass,modNL);
  Setting("Calculation Formulae",CalcFormLClass,modNL);
  if (HasLocalization("HRV,SVN")) then begin
    Setting("(Croatia, Slovenia) #VAT# Rate Classification",CashInvCroSBlockTClass,modNL);
  end;  
  Setting("Electronic #VAT# Declaration",EVATDeclTClass,modNL);
  Setting("Fiscal Years",YearTClass,modNL);
  Setting("Income & Expense Book",IncExpBookLClass,modNL);
  Setting("Liquidity Report Info",LiqInfoLClass,modNL);  
  Setting("#N/L# Accruals",AutSimPerLClass,modNL);
  Setting("Number Series - Simulations",SMSerTClass,modNL);
  Setting("Number Series - Transactions",TRSerTClass,modNL);
  Setting("Tag/Object Type Control",OTCheckTClass,modNL);
  Setting("Tag/Object Types",OTLClass,modNL);
  Setting("Planned Payments",PlannedPaymentLClass,modNL);
  Setting("Presentation of Balances",AGrTClass,modNL);
  Setting("Rate Gain/Loss",NLRateTClass,modNL);
  Setting("Rate Gains/Losses",NLRateLClass,modNL);
  Setting("Reconciliation Descriptions",ReconCodeLClass,modNL);
  Setting("Reconciliation Settings",ReconSetTClass,modNL);
  Setting("Report Settings",Rs2WClass,modNL);
  Setting("Sub Systems",TRGenTClass,modNL);
  Setting("Sub-ledger Control Accounts",SLAccTClass,modNL); // More logical to be here...

  Setting("Tax Account Groups",TAccGroupLClass,modNL);
  Setting("Tax Accounts",TAccLClass,modNL);
  Setting("Tax Reports",TaxRepLClass,modNL);
  Setting("Tax Rules",TaxRulesLClass,modNL);
  Setting("Tax Templates",TaxTemplateLClass,modNL);
  if (HasLocalization("RUS")) then begin
    Setting("Tax Transactions",TTRLClass,modNL);
    Setting("Tax Transactions Fields",TTRFieldTClass,modNL);
    Setting("Tax Transactions Maps",TTRMapLClass,modNL);
    Setting("Tax Transactions Settings",TTRTClass,modNL);
  end;
  if (HasLocalization("DEN")) then begin
    Setting("Template Transactions",DanTRLClass,modNL);
    Setting("Template Transactions - Accounts",DanTRSetLClass,modNL);
  end;
  Setting("Transaction Settings",TrTClass,modNL);
  Setting("#VAT# Template Code Control",VATCodeControlTClass,modNL);
  Setting("#VAT Code# on Transaction rows",TaxTemplateTClass,modNL);
  Setting("#VAT# Codes",VATCodeTClass,modNL);
  if (HasLocalization("FIN,HRV,POL,PRT,SVN,SRB")) then begin
    Setting("#VAT# Declarations",VATDeclLClass,modNL);
    Setting("XBRL Reporting Elements",XBRLElementLClass,modNL);
    Setting("XBRL Reporting Settings",XBRLSettingsLClass,modNL);
  end;
  if (HasLocalization("EST")) then begin
    Setting("RiigiTarkvara",RTViiteNumTClass,modNL);
  end;
/*  Setting("New Year Accounts",NYTClass,modNL);*/

  if (HasLocalization("DEU")) then begin
    Document("Periodic #VAT# (Germany)",PerVATGerRClass,TaxRepForm,TaxRepFClass,modNL);
  end;
  Document("Simulations",Sim2RClass,SMForm,SMFClass,modNL);
  Document("Tax Report",TaxDocRClass,TaxRepForm,TaxRepFClass,modNL);
//  Document("Transactions",Trans2RClass,Trans2Rn,0,modNL);
  Document("Transactions",TRRClass,TRForm,TRFClass,modNL);

  Document("Key Financial Ratios",KeyDRClass,KFRForm,KFRFClass,modNL);

//  Document("#VAT# Report",VATDocRClass,VATRepForm,VATRepFClass,modNL);  //does not exist
  

  Report("Account Reconciliation",ACReconRClass,ACRecRn,0,modNL);
//  Report("Accrual Report",AccrualRClass,AccrualRn,0,modNL);
  Report("Accrual Report",AccrualNewRClass,AccrualNewRn,0,modNL);
  Report("Analytical Balance",MBARClass,MBARn,0,modNL);
  Report("Analytical Balance (Fiscal purposes)",MBA3RClass,MBA3Rn,0,modNL);
  Report("Balance Sheet",BalRClass,BalRn,UserDefRepDClass,modNL);
  Report("Bank Reconciliation",BankReconRClass,BankRecRn,0,modNL);
  Report("Bank Statement",BankStRClass,BankStRn,0,modNL);
  if (HasLocalization("EST")) then begin
    Report("Bank Transactions",BankTRRClass,BankTRRn,0,modNL);
  end;
  Report("Base Currency Rate Change",NLBRateRClass,NLBRateRn,0,modNL);
  Report("Budget Journal",BudgJRClass,BudgJRn,0,modNL);
  Report("Chart of Accounts",AccListRClass,AccListRn,0,modNL);
  Report("Correction List",CorrRClass,CorrRn,0,modNL);
  Report("Corresponding Accounts",CorspRClass,CorspRn,0,modNL);
  Report("Creditors Account",VeCreditRClass,VeCreditRn,0,modNL);
  Report("Currency A/C Rate Change",NLRateRClass,NLRateRn,0,modNL);
  Report("Daily Balances",DayBalNLRClass,DayBalNLRn,0,modNL);
  Report("Debtors Account",CuDebtorRClass,CuDebtorRn,0,modNL);
  if (HasLocalization("CRI")) then begin
    Report("Expenses Report D-151 (Overview) (Costa Rica)",CRD151RClass,CRD151Rn,0,modNL);
  end;
  Report("Forward Balance Journal",ForwBalJRClass,ForwBalJRn,0,modNL);
  Report("Income & Expense Book",IncExpBookRClass,IncExpBookRn,0,modNL);
  Report("Key Financial Ratios",KeyRClass,KeyRn,UserDefRepDClass,modNL);
  Report("Liquidity Forecast",LiquidityRClass,LiquidityRn,0,modNL);
  Report("Multicurrency Accounts Rate Difference",MultiCurAccRClass,MultiCurAccRn,0,modNL);
  Report("#N/L# Accrual Transactions",GenPerTRRClass,GenPerTRRn,0,modNL);
  Report("#N/L# Transfer, Subsystems",TransGenRClass,TransGenRn,0,modNL);
  Report("#Nominal Ledger#",MainRClass,MainRn,0,modNL);
  Report("Tag/Object Results",ObjResRClass,ObjResRn,0,modNL);
  Report("Tag/Object/Quantity Results",ObjQtyRClass,ObjQtyRn,0,modNL);
  Report("Profit & Loss",ResRClass,ResRn,UserDefRepDClass,modNL);
  Report("Revised Budget Journal",RevBudgJRClass,RevBudgJRn,0,modNL);
  Report("Tax Account Balances",TAccBalRClass,TAccBalRn,0,modNL);
  Report("Tax Calculations", Tax100Class,Tax100Rn,0,modNL);
  Report("Tax Transactions for Registers",TTRRClass,TTRRn,0,modNL);
  Report("Template Transaction Journal",DanTRJRClass,DanTRJRn,0,modNL);
  Report("Test Corresponding Rules",CorstRClass,CorstRn,0,modNL);//they wanted it back in Latvia
  Report("Transaction Journal",TransRClass,TransRn,0,modNL);
  Report("Transaction Summary",TransListRClass,TransListRn,0,modNL);
  Report("Trial Balance",SBRClass,TrialRn,0,modNL);
  Report("#VAT# Listing",ALLVATRClass,ALLVATRn,0,modNL);
  if (HasLocalization("UKR")) then begin
    Report("#VAT# Report Appendix 5 (Ukraine)",VATRepApp5RClass,VATRepApp5Rn,0,modNL);
  end;
  Report("#VAT# Report",VATRClass,VAT2Rn,UserDefRepDClass,modNL);
  Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modNL);
  Report("#VAT# Report Sales",SLVATRepRClass,SLVATRepRn,0,modNL);
  if (HasLocalization("ESP")) then begin
    Report("#VAT# Report Purchases (Spain)",PLESPInVATRClass,PLESPInVATRn,0,modNL);
    Report("#VAT# Report Sales (Spain)",SLESPOutVATRClass,SLESPOutVATRn,0,modNL);
  end;
  Report("#VAT# Transaction Journal",VATTransJRClass,VATTransJRn,0,modNL);
  Report("XBRL Report",XBRLReportRClass,XBRLReportRn,0,modNL);
//  Report("Base Currency Differences",Base2DiffRClass,Base2DiffRn,0,modNL); // Where is the code and the selection window
//  Report("Corresponding Accounts (Russia)",Corsp2RClass,Corsp2Rn,0,modNL);  
/* Estonia should Include this */
  if (HasLocalization("EST")) then begin
    Report("RiigiTarkvara Tag/Object Balance",RiigiRClass,RiigiRn,0,modNL);
    Report("RiigiTarkvara Budget Report",RTPrLosRClass,RTProLosRn,0,modNL); 
    Report("RiigiTarkvara Tag/Object Result",RiigiNewRClass,RiigiNewRn,0,modNL);
    Report("RiigiTarkvara Tag/Object Type Result",RiigiOTRClass,RiigiOTRn,0,modNL);
    Report("RiigiTarkvara Budget Comparison",RTPrLosNewRClass,RTProLosNewRn,0,modNL); 
  end;
/*remember to update RsWDel in main.c when adding report
  SelRep = SelRep - (X + nr of new reports);
  This is not good for HAL
*/

/* Finnish */
  
  Export("Accumulated Monthly #P/L# Report",MonthResEClass,MonthResEn,modNL);
  if (HasLocalization("GTM")) then begin
    Export("Assists Books (Guatemala)",GTVATEClass,GTVATEn,modNL);
  end;
  Export("Consolidation",ConsEClass,ConsEn,modNL);
  if (HasLocalization("SGP")) then begin
    Export("IRAS audit File",GenIRASEClass,IRASAuditEn,modNL);
  end;
  Export("Key Financial Ratios",KeyEClass,KeyEn,modNL);
  Export("Monthly Balances",MBEClass,MBEn,modNL);
  Export("Tag/Object Balances",FBEClass,FBEn,modNL);
  if (HasLocalization("CRI")) then begin
    Export("Expenses Report D-151 (Detailed) (Costa Rica)",CRD151EClass,ExpCRD151En,modNL);
  end;
  if (HasLocalization("EST")) then begin
    Export("Riigikassa Tag/Object Result",RiigiNewEClass,RiigiNewEn,modNL);
  end;
  if (HasLocalization("PAN")) then begin
    Export("Report 72 and 94 (Panama)",PANReport72y94EClass,PANReport72y94En,modNL);
    Export("Report 73 (Panama)",PANReport73EClass,PANReport73En,modNL);
  end;
  if (HasLocalization("PRT")) then begin
    Export("SAFT",PortTaxXmlEClass,PortTaxXmlEn,modNL);
  end;
  if (HasLocalization("SWE")) then begin
    Export("SIE (Swedish Std Export/Import)",SieEClass,SieEn,modNL);
  end;
  if (HasLocalization("SVN")) then begin
    Export("Transactions (Slovenia)",TRSloEClass,TRSloEn,modNL);
  end;
  Export("Trial Balance",SBEClass,SBEn,modNL);
  if (HasLocalization("EST")) then begin
    Export("RiigiTarkvara Tag/Object Balance",RiigiEClass,RiigiEn,modNL);
    Export("RiigiTarkvara Transaction Rows",RiigiTRrwEClass,RiigiTRrwEn,modNL);
  end;
  if (HasLocalization("FIN")) then begin
    Export("#VAT# Periodic (Finland)",FinPeriodicVATEClass,FinPeriodicVATEn,modNL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#VAT# Annual (Latvia)",LatAnnualVATEClass,LatAnnualVATEn,modNL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#VAT# Periodic Declaration (Lithuania)",LTUVATEClass,LTUVATEn,modNL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#VAT# Periodic (Latvia)",LatPeriodicVATEClass,LatPeriodicVATEn,modNL);
  end;
  if (HasLocalization("SVN")) then begin
    Export("#VAT# Periodic (Slovenia)",SloVATPeriodicEClass,SloVATPeriodicEn,modNL);
  end;
  Export("XBRL Report",XBRLReportEClass,XBRLReportEn,modNL);
  
  if (HasLocalization("SWE,NOR,FIN")) then begin
    Import("H-Laun Payroll",HLaunIn,HLaunIn,modNL);
    Import("Hogia Payroll",HogiaIn,AutIn,modNL);
  end;
  if (HasLocalization("EST")) then begin
//    Import("SEB Bank Transactions",SEBBankTRIn,SEBBankTRIn,modNL);//test code only
  end;
  if (HasLocalization("SWE")) then begin
    Import("SIE (Swedish Std Export/Import)",SieIn,SieIn,modNL);
  end;
  Import("Update SRU Codes",UpdateSRUIn,UpdateSRUIn,modNL);

  Maintenance("Account Auto Elimination",AccElimVClass,AccElimMn,modNL);
  Maintenance("Account Balance Transfer",AccTransVClass,AccTransMn,modNL);
  Maintenance("Add Tag/Object to Transactions",AddObjTRVClass,AddObjTRMn,modNL);
  Maintenance("Budget",Bud1VClass,Bud1Mn,modNL);
  Maintenance("Generate #N/L# Accrual Transactions",GenPerTRVClass,GenPerTRMn,modNL);
  Maintenance("Generate Planned Payments Records",GenPlanPymntVClass,GenPlanPymntMn,modNL);
  Maintenance("Lock #N/L#",LockNLVClass,LockNLMn,modNL);
  Maintenance("Rate Gain/Loss",NLRateVClass,NLRateMn,modNL);
  if (HasLocalization("ARG,BOL")) then begin
    Maintenance("Revaluation of Base Currency 1",NLBRate1VClass,NLBRate1Mn,modNL);
  end;  
  Maintenance("Revaluation of Base Currency 2",NLBRateVClass,NLBRateMn,modNL);
  Maintenance("Revised Budget from Budget",Bud2FromBud1VClass,Bud2FromBud1Mn,modNL);
  Maintenance("Revised Budget",Bud2VClass,Bud2Mn,modNL);
  if (HasLocalization("EST")) then begin
    Maintenance("RiigiTarkvara Tag/Object Balances",RiigiBalVClass,RiigiOTMn,modNL);
  end;
  Maintenance("Update Transactions",NLAddRateVClass,NLAddRateMn,modNL);
  Maintenance("Year End Simulation",CYearVClass,CloseYMn,modNL);
//  Maintenance("B/FW Balances",IBVClass,IBMn,modNL);
/* Estonia should Include this */
/* modPL */

  Register("#Purchase Invoices#","#Purchase Invoices#",VIVc,modPL);
  Register("Payments","Payments",OPVc,modPL);
  Register("Purchase Order Contracts","P/Order Contracts",POCOVc,modPL);
  Register("Contacts","Contacts",CUVc,modPL);
  Register("E-#Purchase Invoices#","E-#Purchase Invoices#",VEIVVc,modPL);
  Register("BuyBacks","BuyBacks",BuyBackVc,modPL);
  if (HasLocalization("USA")) then begin
    Register("Issued Own #Cheques#","Issued Own #Cheques#",OpenOwnChkLClass,modPL);
    Register("All Own #Cheques#","All Own #Cheques#",OwnCheckVc,modPL);
  end;

  Setting("Account Usage #P/L#",APAccTClass,modPL);
  Setting("Bank Transfer",BankFileTClass,modPL);
  Setting("Banks",BankLClass,modPL);
  Setting("Calculation Formulae",CalcFormLClass,modPL);
  if (HasLocalization("HRV,SVN")) then begin
    Setting("Contact Legal Forms",CULegalFormLClass,modPL);
  end;
  if (HasLocalization("EST,LVA")) then begin
    Setting("Electronic Payments Queue",EPaymentQueLClass,modPL);
  end;
  Setting("Eurocard",EuroCardLClass,modPL);
  Setting("Eurocard Import Settings",ECInSetTClass,modPL);
//  Setting("Extra Costs",ExtraCostLClass,modPL); not used
  if (HasLocalization("UKR")) then begin
    Setting("First Event Purchase",FEVILClass,modPL);
  end;
  If (HasLocalization("FIN")) then begin
    Setting("FInvoice",FInvoiceTClass,modPL);
  end;
  Setting("Intrastat Purchase",IntrastatVITClass,modPL);
  if (HasLocalization("UKR")) then begin
    Setting("Number Series - First Event Purchase",FEVISerTClass,modPL);
  end;
  Setting("Number Series - Payments",OPSerTClass,modPL);
  Setting("Number Series - #Purchase Invoices#",VISerTClass,modPL);
  if (HasLocalization("HRV,POL,SVN,SRB,UKR")) then begin
    Setting("Number Series - #VAT# Corrections #P/L#",VATVISerTClass,modPL);
  end;
  Setting("Payment Codes",PaymentCodeLClass,modPL);
  Setting("Payment Modes",PMTClass,modPL);
  Setting("Payment Settings",OPTTClass,modPL);
  Setting("Payment Terms",PDLClass,modPL);
//  Setting("PO Contract Extra Costs",POCOCostLClass,modPL);  not used
  Setting("#Purchase Invoice# Settings",VITTClass,modPL);
  if (HasLocalization("EST,LVA")) then begin
    Setting("Signing Requirements for Payments",EPaySignReqTClass,modPL);
  end;
//  Setting("#Stock# Exchange Prices",StExValLClass,modPL);//not used ever
  Setting("#Supplier# Categories",VGLClass,modPL);  
  Setting("#Supplier# Withholdings",WHVELClass,modPL);
  Setting("#VAT# Accounts",VATTClass,modPL);
  if (HasLocalization("HRV,POL,SVN,SRB,UKR")) then begin
    Setting("#VAT# Correction #P/L# Types",VATVITypeTClass,modPL);
    Setting("#VAT# Corrections #P/L#",VATVILClass,modPL);
  end;
  Setting("Withholding Calculation Formulae",WHCalcFormLClass,modPL);
  Setting("Withholding Certificates",WHCertificateLClass,modPL);
  Setting("Withholding Taxes",WHTaxTClass,modPL);

  Document("#Cheque# Documents",OP2DRClass,OP2DForm,OP2DFClass,modPL);
//  Document("#Credit Notes#",CredVIRClass,CredVIForm,CredVIFClass,modPL);
  Document("Debit Invoices",DebVIRClass,DebVIForm,DebVIFClass,modPL);
  Document("Electronic #Purchase Invoices#",VEIVRClass,VEIVForm,VEIVFClass,modPL);
  Document("Intrastat #P/L#",IntraStaPuRClass,InStaPuForm,InStaPuFClass,modPL);
  Document("Open Invoice #Supplier# Statement",APSRClass,APSForm,APSFClass,modPL);
  if (HasLocalization("RUS")) then begin 
    Document("Purchase Book",PurchB3RClass,PLBookForm,PLBookFClass,modPL); 
  end;
  Document("Payment Forms",OPDRClass,OPDForm,OPDFClass,modPL);
  Document("Payment Lists",OPRClass,OPForm,0,modPL);
  Document("Periodic #Supplier# Statement",VEPerRClass,VEPerForm,VEPerFClass,modPL);
  if (HasLocalization("HRV,SVN")) then begin
    Document("Purchase Book",PurchaseBookHRVRClass,PurchaseBookHRVForm,PurchaseBookHRVFClass,modPL); 
  end;
  Document("#Purchase Invoice# Forms",VIRClass,VIForm,VIFClass,modPL);
  Document("Purchase Order Contract",POCORClass,POCOForm,POCOFClass,modPL);
  Document("Withholding Certificates",WHCertificateRClass,WHCertificateForm,WHCertificateFClass,modPL);
  Document("Withholding Certificates Periodic Statement",WHCertificatePerRClass,WHCertificatePerForm,WHCertificatePerFClass,modPL);
//  Document("#VAT# Corrections #P/L#",VATVIRClass,VATVIForm,VATVIFClass,modPL); P Inv is report
/* Who made this one??? */
/* This is a Mock Doc, ie a Report. */
//  Document("#Purchase Invoices#",VIRClass,VIRn,0,modPL); /* Still exists as a HAL report */

  if (HasLocalization("PHL")) then begin
    Report("Alphalist (Philippines)",AlphalistRClass,AlphalistRn,0,modPL);
  end;
  Report("BuyBack Journal",BuyBackJRClass,BuyBackJRn,0,modPL);
  if (HasLocalization("EST,LVA")) then begin
    Report("Electronic Payment Status",HTSOPStatRClass,HTSOPStatRn,0,modPL);
  end;
  if (HasLocalization("EST")) then begin
    Report("Data validation (SEPA payments)",FindMisMatchSEPARClass,FindMisMatchSEPARn,0,modPL);
  end;
  Report("EU #VAT# Purchases",PLEUVATRClass,PLEUVATRn,0,modPL);
  if (HasLocalization("UKR")) then begin
    Report("First Event Purchase Journal",FEVIJRClass,FEVIJRn,0,modPL);
  end;
  if (HasLocalization("SLV")) then begin
    Report("Monthly Purchase Witholdings (El Salvador)",PLRetSLVRClass,PLRetSLVRn,0,modPL);
  end;
  Report("Open Invoice #Supplier# Statement",APS2RClass,APS2Rn,0,modPL);
  Report("Overview of #Instalments#",InstListPLRClass,InstListPLRn,0,modPL);
  Report("#P/L# #VAT Code# Statistics",PLVATRClass,PLVATRn,0,modPL);
  Report("#P/L# #VAT# Report",PLVAT2RClass,PLVAT2Rn,0,modPL);
  Report("Payment Journal",OPJRClass,OPJRn,0,modPL);
  Report("Payments Forecast",OPProgRClass,OPProgRn,0,modPL);
  Report("Periodic #Supplier# Statement",VePer2RClass,VePerRn,0,modPL);
  Report("Prepayment History #P/L#",PerPayHisPLRClass,PerPayHisPLRn,0,modPL);
  if (HasLocalization("BLR")) then begin
    Report("Purchase Book (Belarus)",PurchB2RClass,PurchB2Rn,0,modPL);
  end;
  if (HasLocalization("RUS")) then begin
    Report("Purchase Book (Russia)",PurchB1RClass,PurchB1Rn,0,modPL);
  end;
  Report("#Purchase Invoice# Journal",VIJRClass,VIJRn,0,modPL);
  Report("#Purchase Ledger#",APRClass,APRn,0,modPL);
  if (HasLocalization("LTU")) then begin
    Report("Purchased Items, #VAT# (Lithuania)",LitVATPurchRClass,VATPurchRn,0,modPL);
  end;
  Report("#Sales & Purchase Ledger#",ARAPRClass,ARAPRn,0,modPL);
  Report("#Supplier# List",VERClass,VERn,0,modPL);
  Report("#Supplier# Purchase History",MonthSalesHistVERClass,MonthSalesHistVERn,0,modPL);
  Report("#Supplier# Statistics",VSRClass,VSRn,0,modPL);
  Report("#Supplier# Withholdings",SuplWithHoldRClass,SuplWithHoldRn,0,modPL);
  if (HasLocalization("UKR")) then begin
    Report("#VAT# Correction #P/L# Register (Ukraine)",VATVIRegUkrRClass,VATVIRegUkrRn,0,modPL);
  end;
  Report("#VAT Reg. Number# History",CUVERClass,CUVERn,0,modPL);
  Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  if (HasLocalization("ARG")) then begin
    Report("#VAT# Report Purchases (Argentina)",ArgPurchVATRClass,ArgPurchVATRn,0,modPL);
    Report("Gross Income Perceptions (SI.FE.RE)",ArgGrIncPercRClass,ArgGrIncPercRn,0,modPL);
  end;
  if (HasLocalization("BOL")) then begin
    Report("#VAT# Report Purchases (Bolivia)",PLVATBolRClass,PLVATBolRn,0,modPL);
  end;
  if (HasLocalization("SLV")) then begin
    Report("#VAT# Report Purchases (El Salvador)",PLVATSLVRClass,PLVATSLVRn,0,modPL);
  end;
  if (HasLocalization("GTM")) then begin
    Report("#VAT# Report Purchases (Guatemala)",PLVATGTRClass,PLVATGTRn,0,modPL);
  end;
  if (HasLocalization("HND")) then begin
    Report("#VAT# Report Purchases (Honduras)",PLVATHonRClass,PLVATHonRn,0,modPL);
  end;
  if (HasLocalization("HUN")) then begin
    Report("#VAT# Report Purchases (Hungary)",PLVATHunRClass,PLVATHunRn,0,modPL);  
  end;
  if (HasLocalization("LTU,KEN")) then begin
    country = "(Lithuania)";
    if (HasLocalization("KEN")) then begin 
      country = "(Kenya 1)";
    end;    
    Report("#VAT# Report Purchases " & country,PLVATLitRClass,PLVATLitRn,0,modPL);
  end;
  if (HasLocalization("MEX")) then begin
    Report("#VAT# Report Purchases (Mexico)",PLVATMexRClass,PLVATMexRn,0,modPL);
  end;
  if (HasLocalization("NIC")) then begin
    Report("#VAT# Report Purchases (Nicaragua)",PLVATNIRClass,PLVATNIRn,0,modPL);
  end;
  if (HasLocalization("PAN")) then begin
    Report("#VAT# Report Purchases (Panama)",PLVATPARClass,PLVATPARn,0,modPL);
  end;  
  if (HasLocalization("SRB")) then begin
    Report("#VAT# Report Purchases (Serbia)",PLVATSerRClass,PLVATSerRn,0,modPL);  
  end;
  Report("#VAT# #Supplier# Purchases",RealSuppRClass,RealSuppRn,0,modPL);

  Export("Banking File",MPEClass,MPEn,modPL);
  if (HasLocalization("HRV")) then begin
    Export("EU #VAT# Purchases",PLEUVATHRVECLass,PLEUVATHRVEn,modPL);
  end;
  if (HasLocalization("UKR")) then begin
    Export("First Event Purchase Book",FEVIBookEClass,FEVIBookEn,modPL);
  end;
  if (HasLocalization("EST")) then begin
    Export("Intrastat #P/L# (Estonia)",EstIntrastatVIEClass,EstIntVIEn,modPL);
  end;
  if (HasLocalization("FIN")) then begin
    Export("Intrastat #P/L# (Finland)",FinIntrastatVIEClass,FinIntVIEn,modPL);
  end;
  if (HasLocalization("DEU")) then begin
    Export("Intrastat #P/L# (Germany)",GerIntrastatVIEClass,GerIntVIEn,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("Intrastat #P/L# (Lithuania)",LitIntrastatVIEClass,LitIntVIEn,modPL);
  end;
//  Export("Intrastat #Purchase Invoices#",EngIntrastatVIEClass,EngIntVIEn,modPL);
  if (HasLocalization("GBR")) then begin
    Export("Intrastat #Purchase Invoices# (UK)",EngIntrastatVIUKEClass,EngIntVIUKEn,modPL);
  end;
  if (HasLocalization("SVN")) then begin
    Export("Invoices #P/L# (Slovenia)",VISloEClass,VISloEn,modPL);
  end;
  if (HasLocalization("ARG")) then begin
    Export("#P/L# CITI (Argentina)",PLCITIEClass,PLCITIEn,modPL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#P/L# Forest Export", ForestPLEClass,ForestPLEn,modPL);
    Export("#P/L# Latvian #VAT# Report",PLVAT1ExpEClass,PLVAT1En,modPL);
  end;
  Export("#P/L# Liquidity List",PLLiqEClass,PLLiqEn,modPL);
  if (HasLocalization("ARG")) then begin
    Export("#P/L# #VAT# Gross Income Withholdings (Argentina)",PLGIWArgEClass,PLGIWArgEn,modPL);
  end;
  if (HasLocalization("BOL")) then begin
    Export("#P/L# #VAT# Invoices (Bolivia)",PLVATBolEClass,PLVATBolEn,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#P/L# #VAT# Invoices (Lithuania)",LitVATRegVIEClass,LitVATRegVIEn,modPL);
  end;
  if (HasLocalization("SVN")) then begin
    Export("#P/L# #VAT# Invoices (Slovenia)",PLVATSloEClass,PLVATSloEn,modPL);
  end;
  if (HasLocalization("ARG")) then begin
    Export("#P/L# #VAT# Perceptions (Argentina)",PLVATPercEClass,PLVATPercEn,modPL);
    Export("#P/L# Withholding and Perceptions (Argentina)",PLARCIBAEClass,PLARCIBAEn,modPL);
    Export("Regional Withholdings (Argentina)",SIFEREVIEClass,SIFEREVIEn,modPL);
  end;
  if (HasLocalization("PAN")) then begin
    Export("Report 43 (Panama)",PANExport43EClass,PANExport43En,modPL);
  end;
  if (HasLocalization("ARG")) then begin
    Export("SICORE #Suppliers# (Argentina)",SICORESubjEClass,SICORESubjEn,modPL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#VAT# Purchases (Latvia)",LatVATPurchasesEClass,LatVATPurchasesEn,modPL);
  end;
  if (HasLocalization("MEX")) then begin
    Export("#VAT# Purchases (Mexico, DIOT)",VATPurchMexEClass,VATPurchMexEn,modPL);
  end;
  if (HasLocalization("ARG")) then begin
    Export("Withholding Certificates (Argentina)",WHCertificateEClass,WHCertificateEn,modPL);
  end;
  if (HasLocalization("POL")) then begin
    Export("Ist@at - Items Import",IstaatItemImportEClass,IstaatItemImportEn,modPL);
  end;
  

//  Export("Postgiro (Swedish)",MPEClass,MP2En,modPL);
/* Internal Export Routine, could be commented out. */

  if (HasLocalization("HRV,POL,SVN,SRB,UKR")) then begin
    Maintenance("Create #VAT# Corrections #P/L#",VATVIVClass,VATVIMn,modPL);
  end;
  Maintenance("Create #Purchase Invoices# from BuyBack",VIFromBuyBackVClass,VIFromBuyBackMn,modPL);
  Maintenance("Create Periodic #Supplier# Statement Email",VEPerEmailVClass,VEPerEmailMn,modPL);
//  Maintenance("Split BuyBack Amounts",SplitBuyBackCostVClass,SplitBuyBackCostMn,modPL);
  Maintenance("Update #Suppliers#",UpdSupVClass,UpdSupMn,modPL);
//  Maintenance("Update #VAT Code# on #NL# Trans from Pur. Inv.",VITRUpdVATCodeVClass,VITRUpdVATCodeMn,modPL);//for Latvia Only

  if (HasLocalization("USA")==false) then begin
    Import("Eurocard Accounts",EuroCardAccIn,EuroCardAccIn,modPL);
    Import("EuroCard Invoice",EuroCardIn,EuroCardIn,modPL);
  end;
  if (HasLocalization("ARG")) then begin
    Import("Regional Perceptions & Withholdings (Argentina)",PercAndWHIClass,PercAndWHIn,modPL);
    Import("Regional Perceptions & Withholdings Corrections (Argentina)",PercAndWHCorrIClass,PercAndWHCorrIn,modPL);
  end;

/* modServ */
//  Register("Active Users","Active Users",ListUsersClass,modServ);

/* modTS */

  Register("#Time Sheets#","#Time Sheets#",TSVc,modTS);
  Register("Projects","Projects",PRVc,modTS);
  Register("Project Transactions","Project Transactions",TBIVVc,modTS);
  Register("Project Budgets","Project Budgets",TBBUVc,modTS);
  Register("Project Schedules","Project Schedules",PRScheduleVc,modTS);
  Register("Quotations","Quotations",QTVc,modTS);
  Register("Items","Items",INVc,modTS);
  Register("Contacts","Contacts",CUVc,modTS);

  Setting("Account Usage J/C",PRAccClass,modTS);
  Setting("Customer Discount",CDLClass,modTS);
  Setting("Force Time Entry",ForceTimeEntryTClass,modTS);
  Setting("Info In Project Info Report",ProjInfoRepLClass,modTS);
  Setting("Item Groups",ITLClass,modTS);
  Setting("Item/Job Group Prices",TILClass,modTS);
  Setting("Job Group/Item Prices",TJGILClass,modTS);
  Setting("Job Groups",EGLClass,modTS);
  Setting("Number Series - Projects",PRSerTClass,modTS);
  Setting("Number Series - #Time Sheets#",TSSerTClass,modTS);
  Setting("Project Classes",PRClassTClass,modTS);
  Setting("Project Classification Types",PRClTypeLClass,modTS);
  Setting("Project Classifications",PRClLClass,modTS);
  Setting("Project Item Handling",PRITHandleClass,modTS);
  Setting("Project Phases",PRStageLClass,modTS);
  Setting("Project Settings",PRITClass,modTS);
  Setting("Specified Project Item Handling",PRITHLClass,modTS);
  Setting("Time Billing Price Formulae",TBPFormLClass,modTS);
  Setting("Time Billing Price Lists",TBPLDefLClass,modTS);
  Setting("Time Classes",TimeClassLClass,modTS);
  Setting("User Def. Field Labels - Project Managers",PrManagerLabelTClass,modTS);
  Setting("Work In Progress Control",WIPCheckTClass,modTS);
//  Setting("Account Usage J/C",PRAccClass,modTS);

  Report("Budget Follow-up",BudFollPRClass,BudPFoll2Rn,0,modTS); // Rewritten version of above report
  Report("Employee Statistics",EMStatRClass,TSRn,0,modTS);
  Report("Employee Status",EmpStatusRClass,EmpStatusRn,0,modTS);
  Report("GP, Employees",GPEmpRClass,GPEmpRn,0,modTS);
  Report("GP, Projects",GPProRClass,GPProRn,0,modTS);
  Report("Project Actual vs Budget",PRActBudRClass,PRActBudRn,0,modTS);
  Report("Project Bonus",ProjBonusRClass,ProjBonusRn,0,modTS);
  Report("Project Invoicing",ProInvRClass,ProInvRn,0,modTS);
  Report("Project List",ProListRClass,PRListRn,0,modTS);
  Report("Project Price List",ProjPLRClass,ProjPLRn,0,modTS);
  Report("Project Profit & Loss",PRPLRClass,PRPLRn,0,modTS);
  Report("Project Purchases",PRPurRClass,PRPurRn,0,modTS);
  Report("Project #Purchase Orders#",PRPORClass,PRPORn,0,modTS);
  Report("Project Quotation/Budget",BUQTTBBURClass,BUQTTBBURn,0,modTS);
  Report("Project Revenue Recognition",PRRevRecRClass,PRRevRecRn,0,modTS);
  Report("Project Status",ProStatRClass,ProStatRn,0,modTS);
  Report("Project Transactions",PrTransRClass,PrTranRn,0,modTS);
  Report("Service Item Statistics",PrItemStatRClass,PrItemStatRn,0,modTS);
  Report("#Time Sheet# Journal",TSJRClass,TSJRn,0,modTS);
  Report("Validate Project Transactions",ChPrTransRClass,ChPrTransRn,0,modTS);
//  Report("Budget Follow-up",BudFollPRClass,BudPFollRn,0,modTS);
//  Report("Project Sales Orders",ProjSORClass,ProjSORn,0,modTS);

  Document("Project Budgets",TBBudgetRClass,TBBudgetForm,TBBudgetFClass,modTS);
  Document("Project Info",ProjectInfoRClass,ProjectInfoForm,ProjectInfoFClass,modTS);
  Document("Project Transactions",ProjectTransRClass,ProjectTransForm,ProjectTransFClass,modTS);
  Document("Projects",ProjectRClass,ProjectForm,ProjectFClass,modTS);
  Document("Project Schedules",PRScheduleRClass,PRScheduleForm,PRScheduleFClass,modTS);
  Document("Quotations",QTRClass,QTForm,QTFClass,modTS);
  Document("#Time Sheets#",TimeSheetRClass,TimeSheetForm,TimeSheetFClass,modTS);

  Maintenance("Build Project Transactions from Deliveries",BSHTSVClass,BSHTSMn,modTS);
  Maintenance("Change Project Currency",ChangePRCurVClass,ChangePRCurMn,modTS);
  Maintenance("Create Project Invoices",ProInvVClass,ProInvMn,modTS);

/* modPOS */

  Register("POS Invoices","POS Invoices",IVCashVc,modPOS);
  Register("Contacts","Contacts",CUVc,modPOS);
  Register("Cashier Counts","Cashier Counts",CashierBalVc,modPOS);
  Register("Credit Cards","Credit Cards",CreditCardVc,modPOS);
  Register("Items","Items",INVc,modPOS);
  Register("Loyalty Cards","Loyalty Cards",LoyaltyCardVc,modPOS);
  Register("Supermarket Invoices","Supermarket Invoices",POSPIVCashLClass,modPOS);
  Register("POS Invoices Touch Screen","POS Invoices Touch Screen",NPTSIVCashLClass,modPOS);
  
  Setting("Payment Gateways",CCAccountIDLClass,modPOS); 
  Setting("Apple Care Products",ACPLClass,modPOS);

  Setting("Baggers",BaggerTCLass,modPOS);
  Setting("Cash Events",CashLClass,modPOS);
//  Setting("Cash Printer Client Settings",CashSetTClass,modPOS);
  Setting("Credit Card Slips",CouponLClass,modPOS);
  Setting("Credit Card Types",CredCardTypeLClass,modPOS); 
  Setting("Default Payment Modes",DefCashTClass,modPOS);
  Setting("Deferred CC Transactions Rules",DefCCTransTClass,modPOS);
  Setting("Deferred CC Transactions Settings",DeferCCTClass,modPOS);
  Setting("Deferred CC Transactions",DefCCTransLClass,modPOS);
  Setting("Deferred CC Transactions Status",DefCCTransStatusLClass,modPOS);
  Setting("Drawers",DrawerLClass,modPOS); 
  Setting("Dynamic Barcode",VolumBarcodeTCLass,modPOS);
  Setting("Fields for creating New Customer",NPTSNewCUFieldsTCLass,modPOS);
  if (HasLocalization("BRA")) then begin
    Setting("Fiscal Printer #VAT# Codes (Brazil)",ZimFiscalPrinterVATCodeTClass,modPOS);
  end;
  if (HasLocalization("ZWE")) then begin
    Setting("Fiscal Printer #VAT# Codes (Zimbabwe)",ZimFiscalPrinterVATCodeTClass,modPOS);
  end;
  Setting("Gift Receipts",GiftReceiptLClass,modPOS);
  Setting("Gift Vouchers Settings",GCTClass,modPOS);
  Setting("Gift Vouchers Issued",GCLClass,modPOS);
  Setting("Gift Vouchers Received",GCRLClass,modPOS);
  Setting("Gift Vouchers Sold",GCSLClass,modPOS);
  Setting("Local Credit Card Terminal",RahaxiTClass,modPOS);
  Setting("Local Machine Payment Modes",RestPMTClass,modPOS);
  Setting("Local Machines",LocalMachineLClass,modPOS);
  Setting("Loyalty Card Membership Levels",LCMemberLevelLClass,modPOS);
  Setting("Loyalty Card Membership Level Structure",LCMLevelSetTClass,modPOS);
  Setting("Loyalty Points",LoyaltyPointsLClass,modPOS);
  Setting("Loyalty Points per Location",LocLoyaltyPointsLClass,modPOS);
  Setting("Loyalty Points Redemption",LoyPointRedeemLClass,modPOS);
  Setting("Loyalty Points Redemption per Location",LocLoyPointRedeemLClass,modPOS);
  Setting("Merchant ID",CCMerchantIDLClass,modPOS); 
  Setting("Modifiers",ModifiersLClass,modPOS);
  Setting("Number Series - Cash Events",CashSerTClass,modPOS);
  Setting("Number Series - Coupons",CouponSerTClass,modPOS);
  Setting("Number Series - Deferred CC Tansactions",DefCCTransSerTClass,modPOS); 
  Setting("Number Series - Gift Receipt",GiftReceiptSerTClass,modPOS); 
  Setting("Number Series - Gift Vouchers",GCSerTClass,modPOS);
  Setting("Number Series - Gift Vouchers Received",GCRSerTClass,modPOS);
  Setting("Number Series - POS Balances",POSBalanceSerTClass,modPOS);
  Setting("Number Series - POS Invoices",IVCashSerTClass,modPOS); 
  Setting("Number Series - POS Sessions",POSEventSerTClass,modPOS);
  Setting("Payment Currencies",POSCurrenciesTClass,modPOS);
  Setting("POS Balances",POSBalanceLCLass,modPOS);
  Setting("POS Button Groups",POSButtonGroupsLClass,modPOS);
  Setting("POS Buttons",POSButtonsLClass,modPOS);
  Setting("POS Commands",POSCommandsTCLass,modPOS);
  Setting("POS Sessions",POSEventLCLass,modPOS);
  Setting("POS Settings",CashierDefTClass,modPOS);
  Setting("Receipt Printer Texts",CashPrintTClass,modPOS);
  Setting("Receipt Printer Texts per Machine",MachineCashLClass,modPOS);
  Setting("Receipt Printers",CashPrSetLClass,modPOS);
  Setting("Split Items",SplitINLClass,modPOS);
  Setting("Supervisors",SupervisorTCLass,modPOS);
  Setting("User Defined Field Labels - Local Machine",LocalMachineLBlockTClass,modPOS);  
  
  if (HasLocalization("SRB")) then begin
    Report("Book of Daily Reports (OEDI, Serbia)",DayRepBookRClass,DayRepBookRn,0,modPOS);
  end;
  Report("Cash Up",CashupRClass,CashupRn,0,modPOS);
  Report("Cashier Statistics",CashierStatsRClass,CashierStatsRn,0,modPOS);
  Report("Collections Analysis",CollectionsAnalysisRClass,CollectionsAnalysisRn,0,modPOS);  
  Report("Credit Card Slips Reconciliation",CouponReconRClass,CouponReconRn,0,modPOS);
  Report("Daily Balance",DayBalRClass,DayBalRn,0,modPOS);
  if (HasLocalization("SWE")) then begin
    Report("Fiscal Control Report (Sweden)",CleanCashCashupRClass,CashupRn,0,modPOS);
  end;
  if (HasLocalization("PRT")) then begin
    Report("Fiscal Printer Cash (Portugal)",EncerrRClass,EncerrRn,0,modPOS);
  end;
  Report("GP, POS Invoices", PIVGPRClass,PIVGPRn,0,modPOS);
  Report("Item Group #VAT#",ITVATRClass,ITVATRn,0,modPOS);
  Report("Item Multi-Buy Statistics",INMultiBuyStatRClass,INMultiBuyStatRn,0,modPOS);
  Report("Item Price List Statistics",INPriceListStatRClass,INPriceListStatRn,0,modPOS);
  Report("Loyalty Card Statement",LoyaltyCardRClass,LoyaltyCardRn,0,modPOS);
  Report("#N/L# Transfer, Cash Invoices", TransGenPOSRClass,TransGenPOSRn,0,modPOS);
  Report("POS Invoice Journal",IVCJRClass,InvCashRn,0,modPOS);
  Report("Variety Enquiry",VarEnqRClass,VarEnqRn,0,modPOS);
  if (HasLocalization("MEX")) then begin
    Export("CFDI E-invoicing (Mexico)",CFDIEIVCashEClass,CFDIEIVCashEn,modPOS);
  end;
  if (HasLocalization("HRV,SVN")) then begin
    Export("(Slovenia, Croatia) Cash invoices export",CashInvCroEClass,CashInvExEn,modPOS);
  end;  
  Document("Cash Events",CashRClass,CashForm,CashFClass,modPOS);
  Document("Gift Receipt",GiftReceiptRClass,GiftReceiptForm,GiftReceiptFClass,modPOS);
  Document("POS Invoices",IVCashRClass,InvCashForm,IVCashFClass,modPOS);
  Document("Return POS Invoices",IVCashRetRClass,InvCashRetForm,IVCashRetFClass,modPOS);

  Maintenance("Cash Up",CashupVClass,CashupMn,modPOS);
  Maintenance("Create POS Buttons",CreatePOSButtonsVClass,CreatePOSButtonsMn,modPOS);
  Maintenance("Create Slips #N/L# Trans",NLTransCredCardSlipVClass,NLTransCredCardSlipMn,modPOS);
//  Maintenance("Create #NL# Transaction",DayBalVClass,DayBalMn,modPOS); // Don't think it should be used any more
  Maintenance("Process Deferred CC Transactions",ProDefCCTransVClass,ProDefCCTransMn,modPOS);
  Maintenance("Update #Stock#",POSUpdStockVClass,POSUpdStockMn,modPOS);

/* modPOSOffLine */

  Register("POS Invoices","POS Invoices",IVCashVc,modPOSOffLine);
  Register("Items","Items",INVc,modPOSOffLine);
  Register("Cashier Counts","Cashier Counts",CashierBalVc,modPOSOffLine);
  Register("Summary POS Sales","Summary POS Sales",POSSalesVc,modPOSOffLine);
  Register("Items Updating #Stock#","Items Updating #Stock#",ArtUpdStockVc,modPOSOffLine);
  Register("Supermarket Invoices","Supermarket Invoices",POSPIVCashLClass,modPOSOffLine);
  Register("Synchronised Number Series","Synchronised Number Series",SynkAutoSerVc,modPOSOffLine);

  Setting("Default Payment Modes",DefCashTClass,modPOSOffLine);
  Setting("Local Machine Payment Modes",RestPMTClass,modPOSOffLine);
  Setting("Offline Settings",OffLineSetTClass,modPOSOffLine);
  Setting("POS Commands",POSCommandsTCLass,modPOSOffLine);
//  Setting("Local OffLine No.",LocalOffLineNrTClass,modPOSOffLine);

  return;
end;

#endif
