/* seteng.hal */

#ifdef HAL

external function Boolean HasBar();
external function Boolean HasModHotel();
external function Boolean HasModCO();
external function Boolean HasModPL();
external function Boolean HasModPOS();
external function Boolean HasModRest();
external function Boolean HasModSL();
external function Boolean HasModSO();
external function Boolean HasModIN();
external function Boolean HasModExp();
external function Boolean HasModNL();
external function Boolean HasModCheck();
external function Boolean HasStandardCRM();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();
external function Boolean HasRussianPrepayment();
external function Boolean HasWorkflowOverview();
external function Boolean HasCustomerStatusReport();

//event startup
begin

  SetLangMode(LangEnglish,"ENG",2);

/* When you compile a Office/2, please remove all except Full and None */
  SetBegin(1);
  SetText(kAccessLevelFull,"Full");
/* Not for Office2 */
  SetText(kAccessLevelReadOnly,"Read");
  SetText(kAccessLevelReadNew,"Read/New");
  SetText(kAccessLevelBrowse,"Browse");
  SetText(kAccessLevelBrowseNew,"Browse/New");
  SetText(kAccessLevelReportNoDD,"Report without drilldown");
  // SetText(4,"Limited");
  SetText(kAccessLevelNone,"None");
  EndSet;
  
  SetBegin(2);
  SetText(kAccessTypeModule,"Module");
  SetText(kAccessTypeRegister,"Register");
  SetText(kAccessTypeSetting,"Setting");
  SetText(kAccessTypeReport,"Report");
  SetText(kAccessTypeDocument,"Document");
  SetText(kAccessTypeExport,"Export");
  SetText(kAccessTypeImport,"Import");
  SetText(kAccessTypeMaintenance,"Maintenance");
  SetText(kAccessTypeAction,"Action");
  SetText(kAccessTypeDisplayGroup,"Display Group");
  // SetText(kAccessTypeSpecial,"Special");
  EndSet;
  
  StrSetBegin(3); /* Try to keep them in alphabetical order */
  StrSetText(AllowAddingINtoRet,"Add Items to Returned Goods");
  StrSetText(AllowAddingINtoRetPOSIV,"Add Items to Returned POS Invoice");
  StrSetText(AllowAddingOrderDiscount,"Add Discount to Bar Tab");
  StrSetText(AllowCashDiscountIP,"Add Settlement Discount to Receipt");
  StrSetText(AllowUsersAdding,"Add Users");
  StrSetText(AllowWriteoffIP,"Add Write-off to Receipts");
  StrSetText(AmazonIntegration,"Amazon Integration");
  StrSetText(AdminClient,"Admin Client");
  StrSetText(AlertWhenNewVEIV,"Alert when new E-#Purchase Invoice#");
  StrSetText(AllowProjectActivitySupervisorChange,"Allow Changing Supervisor on Project Activity");
  StrSetText(AllowPrintEInvoicesFromIV,"Allow Printing Electronic Invoices from Invoice Record");
  StrSetText(AllowAmendLine,"Amend Lines on Touch Screen Invoice/POS Invoice/Bar Tab");
  StrSetText(ApproveSchedImport,"Approve Scheduled Import");
  StrSetText(ApproveSchedMaint,"Approve Scheduled Maintenance");
  StrSetText(AuthExp,"Authorise Expenses");
  StrSetText(BUQTToIV,"Budget Quotation to Invoice");
  StrSetText(AllowNPTSIVCancel,"Cancel Touch Screen Invoice");
  StrSetText(AllowCheckinBeforePlanned,"Checkin before Planned Date");
  StrSetText(AllowCheckoutBeforePlanned,"Checkin after Planned Date");
  StrSetText(AllowRestAccTransDateChange,"Change Bar Tab Date");
  StrSetText(AllowRestAccSerNrChange,"Change Bar Tab Number");
  StrSetText(AllowIVBranchIDChange,"Change Branch Code on Invoice");
  StrSetText(AllowQTBranchIDChange,"Change Branch Code on Quotation");
  StrSetText(AllowJobBranchIDChange,"Change Branch Code on Reservation");
  StrSetText(AllowORBranchIDChange,"Change Branch Code on Sales Order");
  StrSetText(UpdateCashEvent,"Change Cash Events");
  StrSetText(AllowCashierCountChange,"Change Cashier Count Date");
  StrSetText(IssueChk,"Change #Cheque# State");
  StrSetText(ChangeOwnCheckClearingDate,"Change Own #Cheque# Clearing Date");
  StrSetText(AllowCUSerNrChange,"Change Contact Number");
  StrSetText(ChangingCostOnInvoiceRow,"Change Cost on Invoice Rows");
  StrSetText(ChangingCostOnORRow,"Changeing Cost on Sales Order Rows");
  StrSetText(ChangingCostOnPU,"Change Cost on Goods Receipt");
  StrSetText(ChangingCostOnStockMov,"Change Cost on Stock Movements");
  StrSetText(AllowChangeCreditLimit,"Change Credit Limits");
  StrSetText(AllowChangeCreditLimitDays,"Change Credit Limit Days");
  StrSetText(AllowCustChange,"Change Customer Details");
  StrSetText(AllowDealerChange,"Change Dealers");
  StrSetText(ChangeDiscountMatrixonRestAcc,"Change Discount Matrix on Bar Tab");
  StrSetText(ChangeDiscountMatrixonIV,"Change Discount Matrix on Invoice");
  StrSetText(ChangeDiscountMatrixonIVCash,"Change Discount Matrix on POS Invoice");
  StrSetText(AllowGuestChange,"Change Guests");
  StrSetText(AllowResClassRTMonChanging,"Change Hotel Room Classification in Overview of Rooms");
  StrSetText(AllowResLocRTMonChanging,"Change Hotel Room Location in Overview of Rooms");
  StrSetText(AllowRoomChanging,"Change Hotel Rooms");
  StrSetText(AllowIVInvDateChange,"Change Invoice Date");
  StrSetText(AllowIVSerNrChange,"Change Invoice Number");
  StrSetText(ChangeSHItemSpec,"Change Item Description on Delivery");
  StrSetText(ChangeIVItemSpec,"Change Item Description on Invoice");
  StrSetText(ChangeORItemSpec,"Change Item Description on Order");
  StrSetText(ChangeQTItemSpec,"Change Item Description on Quotation");
  StrSetText(AllowINCostModelChange,"Change Item's Cost Model");
  StrSetText(ChangingINType,"Change Item's Type");
  StrSetText(AllowINWeighedAvChange,"Change Item's Weighted Average Cost");
  StrSetText(IssueOwnChk,"Change Own #Cheque# State");
  StrSetText(ReconciledChequeToEndorsed,"Change #Cheque# State from Reconciled to Endorsed");  
  StrSetText(EndorsedReconciledChequeToEndorsed,"Change #Cheque# State from Endorsed and Reconciled to Endorsed");
  StrSetText(ChangeRecordHeaderWhenPending,"Change Record Header when Approval Status is Pending");
  StrSetText(ChangeRecordMatrixWhenPending,"Change Record Matrix when Approval Status is Pending");
  StrSetText(ChangeDateinResourcePlanner,"Change Dates in Resource Planner");
  StrSetText(AllowPasswdChanging,"Change Passwords");
  StrSetText(ChangePrices,"Change Prices");
  StrSetText(AllowPOSerNrChange,"Change Purchase Order Numbers");
  StrSetText(AllowQTSerNrChange,"Change Quotation Numbers");
  StrSetText(AllowReservationChanging,"Change Reservations");
  StrSetText(ChangeReserved,"Change Reserved Status on Orders and #Stock# Movements");
  StrSetText(ChangeDropShipOrders,"Change Sales Order with Drop Ship Type");
  StrSetText(AllowORSerNrChange,"Change Sales Order Number");
  StrSetText(AllowSalesmanChangeonContact,"Change #Salesman# on Contact");
  StrSetText(AllowSalesmanChange,"Change #Salesman# on OKed Sales Invoice");
  StrSetText(AllowSalesmanChangeOnPOS,"Change #Salesman# on POS Invoice");
  StrSetText(AmendLineChangePrice,"Change Selling Price when Amending a Line");
  StrSetText(AllowSuppInvNoChangeOKVI,"Change #Supplier#'s Inv. No. on OKed #Purchase Invoice#");
  StrSetText(AllowSuppChange,"Change #Suppliers#");
  StrSetText(AllowLockingChange,"Change System Locking");
  StrSetText(ChangeUnitPrices,"Change Unit Prices");
  StrSetText(ChangingUpdateStockFlag,"Change Update #Stock# Flag on Invoice");
  StrSetText(PositionStatusChanging,"Change Warehouse Position Status");
  StrSetText(AllowWSUpdateStockChange,"Change Update #Stock# Flag on Work Sheet");
  StrSetText(DiffHalcust,"Compare halcust & halpatch");
  StrSetText(CompletingServiceOrders,"Complete Service Orders");
  StrSetText(StockMovOrdFlag,"Confirming #Stock# Movements");
  StrSetText(InvToCO,"Contract from Invoice");
  StrSetText(AllowCreateCust,"Creating Customers");
  StrSetText(AllowCreateDealer,"Creating Dealers");
  StrSetText(AllowCreateGuest,"Creating Hotel Guests");
  StrSetText(AllowNewCustomerfromNPTS,"Creating New Customer from Touch Screen POS Invoice");
  StrSetText(AllowCreateSupp,"Creating #Suppliers#");
  StrSetText(CreatingWithholdingCertificates,"Creating Withholding Certificates");
  StrSetText(RetPUToVI,"#Credit Note# from Returned Goods to #Supplier#");
  StrSetText(RetToIV,"#Credit Note# from Returned Goods");
  StrSetText(AllowRestAccRowsDelete,"Deleting Items on Bar Tab");
  StrSetText(AllowIVTSRowsDelete,"Delete Items on Touch Screen Invoice");
  StrSetText(DeleteNotOKedInvoiceWithCAE,"Deleting not OKed Invoices with CAE/CAEA");
  StrSetText(DeleteSharedRecord,"Deleting Records from Shared Registers");
  StrSetText(DeleteAnyRecord,"Deleting Records");
  StrSetText(ORToSH,"Delivery from Order");
  StrSetText(DisallowRetClose,"Disallow Changing 'No #Credit Notes#' on Returned Goods");
  StrSetText(DisallowPRBudgetChangefornonPRMan,"Disallow Changing Project Budget if not Project Manager");
  StrSetText(DisallowPojectChangefornonPRMan,"Disallow Changing Project if not Project Manager");
  StrSetText(DisallowPRScheduleChangefornonPRMan,"Disallow Changing Project Schedule if not Project Manager");
  StrSetText(DisallowChangeIVQtyFromOR,"Disallow Changing quantity on an Invoice created from an Order");
  StrSetText(DisallowSalesmanChange,"Disallow Changing #Salesman# on non OKed Sales Invoice");
  StrSetText(DisallowIntORClose,"Disallow Closing Internal Order");
  StrSetText(DisallowORClose,"Disallow Closing Order");
  StrSetText(DisallowCostVariance,"Disallow Cost Price Variance on Goods Receipts");
  StrSetText(NotOKORToSH,"Disallow Delivery from Un OKed Order");
  StrSetText(NotOKPOToPU,"Disallow Goods Receipt from Un OKed Purchase Order");
  StrSetText(DisallowSerNrItemsOnSR,"Disallow Items with Serial Number Tracking on #Stock# Revaluation");
  StrSetText(DisallownonSerNrItemsOnSR,"Disallow Items without Serial Number Tracking on #Stock# Revaluation");
  StrSetText(DisallowPostPRActualsfornonPRMan,"Disallow Posting Project actuals if not Project Member");
  StrSetText(DisallowPrepToNotOKOR,"Disallow Prepayment for not OKed Order");
  StrSetText(DisallowPrepToNotOKPO,"Disallow Prepayment for not OKed Purchase Order");
  StrSetText(DisallowPriceLowerCost,"Disallow Prices Lower than Cost Price");
  StrSetText(DisallowPrintCopy,"Disallow Printing Copies");
  StrSetText(DisallowSalesPlain,"Disallow Sales of Plain Items");
  StrSetText(DisallowSalesService,"Disallow Sales of Service Items");
  StrSetText(DisallowSalesStocked,"Disallow Sales of #Stocked# Items");
  StrSetText(DisallowSalesStructured,"Disallow Sales of Structured Items");
  StrSetText(DisallowDomSales,"Disallow Sales to #Domestic# Customers");
  StrSetText(DisallowExpSales,"Disallow Sales to Export Customers");
  StrSetText(DisallowSaleBelowGP,"Disallow Selling Below Minimum GP");
  StrSetText(DisallowWSFromSVO,"Disallow Work Sheets from Service Order");
  StrSetText(ShowSerialNronPOSInvoices,"Display Serial Number On POS Invoices");
  StrSetText(AllowDispute,"Dispute Invoices");
  StrSetText(DownloadHalcust,"Download halcust & halpatch");
  StrSetText(POToDownPay,"Downpayment from Purchase Order");
  StrSetText(ORToDownPay,"Downpayment from Sales Order");
  StrSetText(XXGRToXXGR,"Drag and Drop Balance Sheet and P&L Definitions");
  StrSetText(EditingCAEandCAEExpiry,"Editing CAE and CAE Expiry fields in Sales Invoices");
  StrSetText(EditingWithholdingCertificates,"Editing Withholding Certificates");
  StrSetText(EMailFromAcceptedPO,"Email from Accepted Purchase Orders");
  StrSetText(EMailFromOKPO,"Email from OKed Purchase Orders");
  StrSetText(IVToEDIInv,"EDI Invoice from Invoice");
  StrSetText(EditingWSCostAcc,"Editing Cost Account on Work Sheet");
  StrSetText(JobELockingSystem,"Electronic Locking System");
  StrSetText(EditFieldAccess,"Field Settings");
  StrSetText(HiddenLine,"Hidden Line");
  StrSetText(POToPU,"Goods Receipt from Purchase Order");
  StrSetText(AllowIncorrectSerial,"Incorrect Serial Numbers on POS Invoices");
  StrSetText(ActInvalid,"Invalidate Activities");
  StrSetText(AT2WrofInvalid,"Invalidate Asset Disposals");
  StrSetText(RestAccInvalid,"Invalidate Bar Tab");
  StrSetText(CLInInvalid,"Invalidate Cash In");
  StrSetText(CLOutInvalid,"Invalidate Cash Out");
  StrSetText(ExpInvalid,"Invalidate Expenses");
  StrSetText(PUInvalid,"Invalidate Goods Receipts");
  StrSetText(OPInvalid,"Invalidate Payments");
  StrSetText(PPInvalid,"Invalidate Personnel Payments");
  StrSetText(InvInvalid,"Invalidate Purchase and Sales Invoices");
  StrSetText(VIInvalid,"Invalidate #Purchase Invoices#");
  StrSetText(IVInvalid,"Invalidate Sales Invoices");
  StrSetText(InstallHalcust,"Install Halcust & Halpatch");
  StrSetText(InvalidateInvoice,"Invalidate Touch Screen Invoice");
  StrSetText(COToInv,"Invoice from Contract");
  StrSetText(JobToInv,"Invoice from Hotel Reservation");
  StrSetText(SHToInv,"Invoice from Delivery");
  StrSetText(ORToInv,"Invoice from Order");
  StrSetText(QTToIV,"Invoice from Quotation");
  StrSetText(SVOToInv,"Invoice from Service Order");
  StrSetText(SVOToOffHire,"Items In from Service Order");
  StrSetText(SVOToDispatch,"Items Out from Service Order");
  StrSetText(LimitToResLoc,"Limit User to Hotel Room Location");
  StrSetText(LockIgnoreTR,"Lock Exceptions for Transactions");
  StrSetText(LockIgnoreVI,"Lock Exceptions for Purchase Invoice");
  StrSetText(LockIgnoreIV,"Lock Exceptions for Sales Invoices");
  StrSetText(LockIgnoreAct,"Lock Exceptions for Activities");
  StrSetText(LockIgnoreOther,"Lock Exceptions for Other Records");
  StrSetText(AllowLoginOutsideWorkHours,"Login outside Work Hours");
  StrSetText(AllowNPTSIVLogout,"Logout on Touch Screen Invoice");
  StrSetText(LogoutUserAfterPrintingBarTab,"Logout User after printing Bar Tab");
  StrSetText(AllowIVTSLoyaltyPointsBonus,"Loyalty Bonus Points on Touch Screen Invoice");
  StrSetText(AllowIVTSLoyaltyPayment,"Loyalty Payment on Touch Screen Invoice");
  StrSetText(AllowMovingFoliotoRsrv,"Move Folio Items to another Hotel Reservation");
  StrSetText(AllowManyActiveProd,"Multiple Active Productions");
  StrSetText(AllowNegCLIn,"Negative Amount on Cash In");
  StrSetText(AllowNegCLOut,"Negative Amount on Cash Out");
  StrSetText(AllowNegOP,"Negative Amount on Payment");
  StrSetText(AllowNegIP,"Negative Amount on Receipt");
  StrSetText(AllowPOSIVNegQty,"Negative Quantity on POS Invoices");
  StrSetText(AllowNegativePriceonIV,"Negative Unit Price on an SL Invoice");
  StrSetText(SMToTrans,"#NL# Transactions from Simulations");
  StrSetText(ActOK,"OK Activities");
  StrSetText(AT2WrofOK,"OK Asset Disposals");
  StrSetText(BudOK,"OK Budget");
  StrSetText(OKCashIn,"OK Cash In");
  StrSetText(CashInvOK,"OK Cash Invoices");
  StrSetText(OKCashOut,"OK Cash Out");
  StrSetText(CredInvOK,"OK #Credit Notes#");
  StrSetText(DAOK,"OK Daily Allowances");
  StrSetText(SHOK,"OK Deliveries");
  StrSetText(HRMCOChangeOK,"OK Employment Contract Changes");
  StrSetText(HRMCOOK,"OK Employment Contracts");
  StrSetText(ExpenseOK,"OK Expenses");
  StrSetText(PUOK,"OK Goods Receipts");
  StrSetText(InvOK,"OK Invoices");
  StrSetText(HRMJPOK,"OK Job Positions");
  StrSetText(LeaveApplicationOK,"OK Leave Applications");
  StrSetText(LeaveTransferOK,"OK Leave Transfers");
  StrSetText(OROK,"OK Orders");
  StrSetText(OPOK,"OK Payments");
  StrSetText(ProdPlanOK,"OK Production Plan");
  StrSetText(CredVIOK,"OK Purchase #Credit Notes#");
  StrSetText(VIOK,"OK #Purchase Invoices#");
  StrSetText(POPlanOK,"OK Purchase Order Plan");
  StrSetText(POOK,"OK Purchase Orders");
  StrSetText(IPOK,"OK Receipts");
  StrSetText(RetPUOK,"OK Returned Goods to #Supplier#");
  StrSetText(RetOK,"OK Returned Goods");
  StrSetText(RevBudOK,"OK Revised Budget");
  StrSetText(SalesForecastOK,"OK Sales Forecast");
  StrSetText(DropSHOK,"OK Shipment Notifications");
  StrSetText(HRMSEOK,"OK Skills Evaluation");
  StrSetText(SDOK,"OK #Stock Depreciation#");
  StrSetText(StockPolicyOK,"OK #Stock# Policy");
  StrSetText(SROK,"OK #Stock# Revaluations");
  StrSetText(TimeSheetOK,"OK #Time Sheets#");
  StrSetText(WorkSheetOK,"OK Work Sheets");
  StrSetText(OpenCashDrawer,"Open Cash Drawer");
  StrSetText(OpenMarketplace,"Open Marketplace");
  StrSetText(OpenVcFromTBIV,"Open Register from Project Transaction");
  StrSetText(OpenTRFromSpec,"Open Transactions from Operations Menu");
  StrSetText(EDIORToOR,"Order from EDI Order");
  StrSetText(QTToOrd,"Order from Quotation");
  StrSetText(OPOrder,"Order Payments");
  StrSetText(OverrideLegalSerialNr,"Override Legal Serial No.");
  StrSetText(QTToIVCash,"POS Invoice from Quotation");
  StrSetText(AllowPOSOfflineChanging,"POS Offline Invoice Editing");
  StrSetText(IPToPrepIV,"Prepayment Receipt to Invoice");
  StrSetText(PrintToFiscPrnt,"Print To Fiscal Printer");
  StrSetText(QTToPR,"Project from Quotation");
  StrSetText(BUQTToTBBU,"Project Quotation to Budget");
  StrSetText(VEIVToVI,"#Purchase Invoice# from E-#Purchase Invoice#");
  StrSetText(PUToVI,"#Purchase Invoice# from Goods Receipt");
  StrSetText(POCOToVI,"#Purchase Invoice# from Purchase Order Contract");
  StrSetText(POToVI,"#Purchase Invoice# from Purchase Order");
  StrSetText(IntORToPO,"Purchase Order from Internal Order");
  StrSetText(ORToPO,"Purchase Order from Order");
  StrSetText(TBBUToPO,"Purchase Order from Project Budget");
  StrSetText(POCOToPO,"Purchase Order from Purchase Order Contract");
  StrSetText(POQTToPO,"Purchase Order from Purchase Quotation");
  StrSetText(SVOToPO,"Purchase Order from Service Order");
  StrSetText(WSToPO,"Purchase Order from Work Sheet");
  StrSetText(PrintPreviewNotApproved,"Print Preview not Approved Records");
  StrSetText(QualifyCUForRvrsVAT,"Qualify for Reverse #VAT#");
  StrSetText(StockMovOK,"Receive #Stock# Movements");
  StrSetText(ReloadBIData,"Reload BI Data");
  StrSetText(AllowNPTSReprint,"Reprint Touch Screen Invoice");
  //StrSetText(RequestSchedImport,"Request Scheduled Import");
  StrSetText(RequestSchedMaint,"Request Scheduled Maintenance");
  StrSetText(RequireAcceptanceMail,"Require Mail Acceptance");
  StrSetText(JobCheckOut,"Reservation Check Out");
  StrSetText(JobAddItem,"Reservation: Add Item");
  StrSetText(JobChargeStay,"Reservation: Charge Stay");
  StrSetText(JobCheckIn,"Reservation: Check In");
  StrSetText(JobShowAccount,"Reservation: Display Account");
  StrSetText(JobShowGuestAccount,"Reservation: Display Guest Account");
  StrSetText(JobGenPrepayment,"Reservation: Generate Prepayment");
  StrSetText(AddItemsRsrtEvent,"Resort Event: Add Item");
  StrSetText(RestaurantCustomerOnly,"#Restaurant# Customer Only");
  StrSetText(PUToRetPU,"Returned Goods to #Supplier# from Goods Receipt");
  StrSetText(ORToRet,"Returned Goods from Order");
  StrSetText(POToRetPU,"Returned Goods to #Supplier# from Purchase Order");
  StrSetText(SVOToRet,"Returned Goods from Service Order");
  StrSetText(WSToRet,"Returned Goods from Work Sheet");
  StrSetText(EnableRoomBookingCom,"Rooms available in Booking.com");
  StrSetText(SentStockMovOK,"Sending #Stock# Movements");
  StrSetText(SVOToSVGM,"Service #Stock# Transaction from Service Order");
  StrSetText(SendVATDeclNor,"Sending Electronic #VAT# Declaration");
  StrSetText(POToDropSH,"Shipment Notification from Purchase Order");
  StrSetText(AuthQualCon,"Sign Quality Control");
  StrSetText(AllowSplitItem,"Split Item on Touch Screen Invoice");
  StrSetText(IntORToSD,"#Stock Depreciation# from Internal Order");
  StrSetText(IntORToStockMov,"#Stock# Movement from Internal Order");
  StrSetText(ORToStockMov,"#Stock# Movement from Order");
  StrSetText(PRToStockMov,"#Stock# Movement from Production");
  StrSetText(AllowRestAccTransfertoSL,"Transfer Bar Tab to #Sales Ledger#");
  StrSetText(AllowRestAccTransfertoInvoice,"Transfer Bar Tab to #Sales Ledger# Invoice");
  StrSetText(AllowTransfertoQuotation,"Transfer POS Invoice to Quotation");
  StrSetText(AllowTransfertoInvoice,"Transfer POS Invoice to #Sales Ledger# Invoice");
  StrSetText(AllowTransfertoSL,"Transfer POS Invoice to #Sales Ledger#");
  StrSetText(AllowTransfertoOrder,"Transfer POS Invoice to Sales Order");
  StrSetText(StockMovOrdFlagOff,"Unconfirming #Stock# Movements");
  StrSetText(UnOKAll,"UnOK all records");
  StrSetText(UnOKBud,"UnOK Budgets");
  StrSetText(UnOKDA,"UnOK Daily Allowances");
  StrSetText(UnOKCashCount,"UnOK Cash Counts");
  StrSetText(UnOKOR,"UnOK Orders");
  StrSetText(UnOKPO,"UnOK Purchase Orders");
  StrSetText(UnOKRevBud,"UnOK Revised Budget");
  StrSetText(UpdatePOSEvent,"Update POS Sessions");
  StrSetText(AllowUsingAddonBarTab,"Use 'Add' Button on Bar Tab");
  StrSetText(AllowUsingBookingsonBarTab,"Use 'Bookings' Button on Bar Tab");
  StrSetText(AllowUsingPaymentonBarTab,"Use 'Payment' Button on Bar Tab");
  StrSetText(AllowUsingRoomonBarTab,"Use 'Room' Button on Bar Tab");
  StrSetText(AllowUsingSplitonBarTab,"Use 'Split' Button on Bar Tab");
  StrSetText(AllowUsingSubonBarTab,"Use 'Subtract' Button on Bar Tab");
  StrSetText(ViewBI,"View BI");
  StrSetText(ViewDashboard,"View Dashboard");
  StrSetText(ViewDashboardTopCustomers,"View Dashboard Top Customers");
  StrSetText(ViewDashboardDebCred,"View Dashboard Top Debtors");
  StrSetText(ViewDashboardTopItemGroups,"View Dashboard Top Item Groups");
  StrSetText(ViewDashboardPipeline,"View Dashboard Top Pipeline");
  StrSetText(ViewDashboardPnL,"View Dashboard Top P&L");
  StrSetText(ViewDashboardTopSalesmen,"View Dashboard Top Salesmen");
  StrSetText(ViewCostPrice,"View Item's Cost Price");
  StrSetText(AllowRestAccRowsVoid,"Void Bar Tab rows");
  StrSetText(AllowIVTSRowsVoid,"Void #S/L# Touch Screen Invoice rows");
  StrSetText(AllowNPTSIVRowsVoid,"Void Touch Screen Invoice rows");
  StrSetText(AllowNoClockInOut,"Work without Clock In/Out Activities");
  StrSetText(WorkflowOverview,"Workflow Overview");
  StrSetText(YodleeData,"Importing Yodlee Data");
  EndStrSet;
  
  SetBegin(11);
  SetText(0,"Project");
  SetText(1,"Order");
  SetText(2,"Customer");
  SetText(3,"Production");
  EndSet;
  
  SetBegin(12);
  SetText(0,"Normal");
  SetText(1,"Internal");
  EndSet;
  
  SetBegin(13);
  SetText(0,"-");
  SetText(1,"Running");
  SetText(2,"As Budgeted");
  SetText(3,"Internal");
  EndSet;

  SetBegin(14);
  SetText(kPLDefRowTypeItemGroup,"Item Group");
  SetText(kPLDefRowTypeItem,"Item");
  EndSet;
  
  SetBegin(15); /* Try to keep them in alphabetical order */
  SetText(ACTFORMPS,"Activity");
  SetText(ADRLABFORMPS,"Address Labels");
  SetText(AGREEMENTFORMPS,"Agreement");
  SetText(AT2WROFFORMPS,"Asset Disposal");
  SetText(AT2FORMPS,"Asset Form");
  SetText(AT2PUFORMPS,"Asset put in use");
  SetText(AT2REVFORMPS,"Asset Revaluation");
  SetText(AT2MOVFORMPS,"Asset Status");
  SetText(RESTACCFORMPS,"Bar Tab");
  SetText(BPCHANGEFORMPS,"Base Price Change"); 
  SetText(BATCHDEPFORMPS,"Batch Deposit"); 
  SetText(LETFORMPS,"Customer Letters");
  SetText(CASHEVENTFORMPS,"Cash Event");
  SetText(CASHINVFORMPS,"Cash Invoice");
  SetText(IVCASHFORMPS,"Cash Invoice(POS)");
  SetText(CLINFORMPS,"Cash In");
  SetText(CLINCOLFOMRPS,"Cash In Collection");      
  SetText(CLIN2FORMPS,"Cash In Invoices");
  SetText(CLIN1FORMPS,"Cash In Receipts");
  SetText(CLOUTFORMPS,"Cash Out");
  SetText(CLOUTCOLFOMRPS,"Cash Out Collection"); 
  SetText(CLOUT2FORMPS,"Cash Out Invoices");
  SetText(CLOUT1FORMPS,"Cash Out Payments");
  SetText(CLOUT3FORMPS,"Cash Out Personnel Payments");
  SetText(COLLECTIONFORMPS,"Collections");
  SetText(CONTRACTFORMPS,"Contract");
  SetText(CONTLABFORMPS,"Contract Label");
  SetText(CONTQUOTEFORMPS,"Contract Quotation");
  SetText(COURSEEVENTFORMPERPS,"Course Event");
  SetText(CREDMANFORMPS,"Credit Agreement");
  SetText(CREDMANSTATFORMPS,"Credit Agreement Statement");
  SetText(CULABFORMPS,"Customer/Contact Label");
  SetText(CUSTOMSFORMPS,"Customs Declaration");       
  SetText(DAFORMPS,"Daily Allowances");
  SetText(SHLABFORMPS,"Delivery Labels");
  SetText(SH1FORMPS,"Delivery Note");   
  SetText(DETAGREEMENTFORMPS,"Detailed Agreement");
  SetText(DROPSHIPFORMPS,"Shipment Notification");
  SetText(VEIVFORMPS,"Electronic #Purchase Invoice#");
  SetText(HRMCOFORMPS,"Employment Contract");
  SetText(SLEUVATFORMPS,"EU #VAT# Sales"); 
  SetText(EXPGETFORMPS,"Expenses");   
  SetText(FEIVFORMPS,"First Event Sales");   
  SetText(GIFTRECEIPTFORMPS,"Gift Receipt");
  SetText(GIFTCERTFORMPS,"Gift Vouchers");
  SetText(PURCHASEFORMPS,"Goods Receipt");
  SetText(PULABFORMPS,"Goods Receipt Labels");
  SetText(GUESTDOCFORMPS,"Guest");
  SetText(HWCONTRACTFORMPS,ProductName & " Contract"); // We should have an "internal" enabler thing... to show these things or not...
  SetText(INTIVFORMPS,"Internal Invoice");
  SetText(INTMOVEMENTFORMPS,"Internal Movements");
  SetText(INTORFORMPS,"Internal Order");
  SetText(OR2FORMPS,"Internal Sales Order");
  SetText(INTRASTATVIFORMPS,"Intrastat #P/L#");
  SetText(INTRASTATFORMPS,"Intrastat #S/L#");
  SetText(INV1FORMPS,"Invoice");
  SetText(ITEMLABELFORMPS,"Item Label");
  SetText(ITEMSINFORMPS,"Items In");
  SetText(ITEMSOUTFORMPS,"Items Out");
  SetText(KFRFORMPS,"Key Financial Ratio");
  SetText(MAILFORMPS,"Mail");
  SetText(ARSFORMPS,"Open Invoice Customer Statement");      
  SetText(APSFORMPS,"Open Invoice #Supplier# Statement");      
  SetText(ORDFORMPS,"Order");      
  SetText(OWNCHECKFORMPS,"Own #Cheques#");      
  SetText(PALLETLABFORMPS,"Pallet Label");
  SetText(OP2DFORMPS,"Payment #Cheques#");
  SetText(OPDFORMPS,"Payment Form");
  SetText(CUPERFORMPS,"Periodic Customer Statement");
  SetText(VEPERFORMPS,"Periodic #Supplier# Statement");
  SetText(PERSPAYFORMPS,"Personnel Payment Receipt");
  SetText(SH3FORMPS,"Picking List");
  SetText(PRODORDERFORMPS,"Production");
  SetText(PRODORDER3FORMPS,"Production Picking List");
  SetText(PRODOPERATIONFORMPS,"Production Operation Picking List");
  SetText(PRODORDFORMPS,"Production Order");
  SetText(PRODLABFORMPS,"Production Label");
  SetText(PROFORMAQTFORMPS,"Proforma Invoice, Quotation");       
  SetText(PROJECTFORMPS,"Project");
  SetText(TBBUDGETFORMPS,"Project Budget");
  SetText(PROJECTINFOFORMPS,"Project Info");
  SetText(PROJECTSCHEDULEFORMPS,"Project Schedule");
  SetText(PROJECTTRANSFORMPS,"Project Transactions");
  SetText(VIFORMPS,"#Purchase Invoice#"); 
  SetText(PLBOOKFORMFORMPS,"Purchase Book (Russia)");
  SetText(PLBOOKHRVFORMPS,"Purchase Book (Croatia)");
  SetText(POFORMPS,"Purchase Order");       
  SetText(POCOFORMPS,"Purchase Order Contracts");       
  SetText(POREMFORMPS,"Purchase Order Reminder");       
  SetText(POQTFORMPS,"Purchase Quotation");       
  SetText(QTFORMPS,"Quotation");       
  SetText(IPDFORMPS,"Receipt Form");
  SetText(RECIPEFORMPS,"Recipe"); 
  SetText(REMFORMPS,"Reminder");      
  SetText(RENTQTFORMPS,"Rental Quotation");      
  SetText(RENTRESFORMPS,"Rental Reservations");
  SetText(JOBFORMPS,"Reservation");
  SetText(RESAVFORMPS,"Reservation Quotation");
  SetText(RETFORMPS,"Returned Goods"); 
  SetText(RETPUFORMPS,"Returned Goods To #Supplier#"); 
  SetText(ROUTINGPRFORMPS,"Routing Production");
  SetText(ROUTINGPRORDFORMPS,"Routing Production Order");
  SetText(SLBOOKFORMFORMPS,"Sales Book (Russia)");
  SetText(SLBOOKHRVFORMPS,"Sales Book (Croatia)");
  SetText(SVOFORMPS,"Service Order");
  SetText(SVGMFORMPS,"Service #Stock# Transactions");
  SetText(SMFORMPS,"Simulations");  
  SetText(SDFORMPS,"#Stock Depreciation#");
  SetText(STOCKMOVFORMPS,"#Stock# Movement");
  SetText(STOCKMOVINVFORMPS,"#Stock# Movements Invoices");
  SetText(SRFORMPS,"#Stock# Revaluations");
  SetText(STOCKTRFORMPS,"#Stock# Transfers");
  SetText(STOCKTAKEFORMPS,"#Stocktaking#");
  SetText(TIMESHEETFORMPS,"#Time Sheet#");
  SetText(TAXREPFORMPS,"Tax Report");
  SetText(TOURISMLEVYFORMPS,"Tourism Levy");
  SetText(TRANSFERFORMPS,"Transfer");
  SetText(TRFORMPS,"Transactions");  
  SetText(VATIVFORMPS,"#VAT# Correction #S/L#");
  SetText(VATVIFORMPS,"#VAT# Correction #P/L#");
  SetText(VATREPFORMPS,"#VAT# Report");
  SetText(WAYLISTFORMPS,"Way List"); 
  SetText(WHCERTIFICATEFORMPS,"Withholding Certificate");
  SetText(WHCERTIFICATEFORMPERPS,"Withholding Certificate Periodic Statement");
  SetText(WOFORMPS,"Work Order");
  SetText(WSFORMPS,"Work Sheet");
//  SetText(AT2INFORMPS,"Asset Form"); 
//  SetText(AT2DPRFORMPS,"Asset Depreciation");
//  SetText(ATLABFORMPS,"Asset Labels");
//  SetText(AT2TAKEFORMPS,"Asset #Stocktaking#");
//  SetText(F_COMPANY,"Company");
//  SetText(CULABFORMPS,"Contact Label"); // Yes, they are the same... (as customer labels)
//  SetText(CONTCREDITFORMPS,"Contract Credit Query");
//  SetText(CONTDELIVERYFORMPS,"Contract Delivery");
//  SetText(CONTINSURANCEFORMPS,"Contract Insurance");
//  SetText(CONTSALESFORMPS,"Contract Sales Agreement");
//  SetText(CONTTRANSFERFORMPS,"Contract Transfer Notice");
//  SetText(PLACELABFORMPS,"Place Label");
//  SetText(PLACELETFORMPS,"Place Letter");
//  SetText(BUDGETQTFORMPS,"Project Quotations"); 
//  SetText(RESLETFORMPS,"Resource Letters");

//  SetText(INKASSOFORMPS,"Inkasso brev");      
//  SetText(INV1FORMPS,"Inv1Form");
//  SetText(INV2FORMPS,"Inv2Form");
//  SetText(INV3FORMPS,"Inv3Form");
//  SetText(AT2RESPFORMPS,"F/A Responsibles");
/*
//jarek, these are missing documents
Bar Tab  modRest);
Cash Invoices  modPOS);
Event  modRsrt);
Transfer  modRsrt);
Internal Invoices  modSL);
Intrastat P/L  modPL);
Pallet Labels  modWHM);
Production Order  modProd);
Prognosis Orders  modPOProg);
Purchase Order Reminders  modPO); 
Returned Goods To Supplier  modIN);
Tax Report  modNL);
VAT Correction  modSL); 
*/
  EndSet;

/* DON'T CHANGE THE ORDER OR CODES */
  SetBegin(16);
/* Australia */
//HasLocalization not working here
//  if (HasLocalization("AUS")) then begin  
    SetText(100,"Australia - Personal");
    SetText(101,"Australia - ABA");
//  end;
/* Czech */
//  if (HasLocalization("CZE")) then begin
    SetText(70,"Czech - Komercni banka - KB");
    SetText(71,"Czech - Ceskoslovenska obchodni banka - CSOB");
    SetText(72,"Czech - Ceska sporitelna - CS");
    SetText(73,"Czech - CITI bank");
    SetText(74,"Czech - ABO");
//  end;
/* Norway, Denmark*/
//  if (HasLocalization("DEN")) then begin
    SetText(0,"Denmark - Midtbank");
    SetText(1,"Denmark - Jyske Bank");
    SetText(2,"Denmark - Den Denske Bank");
    SetText(3,"Denmark - SYDBANK");
    SetText(4,"Denmark - Unibank");
    SetText(5,"Denmark - BGBank");
//  end;
/* Estonia */
//  if (HasLocalization("EST")) then begin
//  SetText(15,"Estonia - Microbanker");
    SetText(16,"Estonia - Telehansa");
//  SetText(17,"Estonia - Tele pank");
//  SetText(18,"Estonia - ﾆ_hispank");//not allowed, HTS will take over
    SetText(19,"Estonia - Riigikassa");
    SetText(80,"Estonia - SEB");
    SetText(82,"Estonia - Swedbank Gateway");
//  end;
/* Finland */
//  if (HasLocalization("FIN")) then begin
    SetText(13,"Finland - LM 00");
    SetText(14,"Finland - LM 02");
    SetText(24,"Finland - LM 03 (Sampo, Nordea, Optia)");
    SetText(25,"Finland - LM 03 (Osuuspankki)");
    SetText(26,"Finland - LM 03 (Handelsbanken)");
    SetText(27,"Finland - SEPA");
//  end;
/* Germany */
//  if (HasLocalization("DEU")) then begin
    SetText(140,"Germany - SEPA");
//  end;
/* Hungary */
//  if (HasLocalization("HUN")) then begin
    SetText(110,"Hungary - HVB");
//  end;
/* Italy */
    SetText(152,"Italy - SEPA");
/* Latvia */
//  if (HasLocalization("LVA")) then begin
    SetText(20,"Latvia - Unibanka");
    SetText(21,"Latvia - Nordea");
    SetText(22,"Latvia - HansaPlus");
    SetText(32,"Latvia - TeleHansa");
    SetText(52,"Latvia - Nord LB");
    SetText(150,"Latvia - FidaVista");
    SetText(154,"Latvia - SEPA");
//  SetText(33,"Latvia - Pareks-bank"); /* NO code for this bank*/
//  SetText(44,"Latvia - Vereinsbank"); /* NO code for this bank*/
//  end;
/* Lithuania */
//  if (HasLocalization("LTU")) then begin
    SetText(61,"Lithuania - LITAS-ESIS 1.1");
    SetText(153,"Lithuania - SEPA");
//    SetText(62,"Lithuania - 2"); not used anymore
//  end;
/* Cymot uses this to send Bank files, so added to standard */
//  if (HasLocalization("NAM")) then begin
    SetText(84,"Namibia");
//  end;

  /* New Zealand */
//  if (HasLocalization("NZL")) then begin
    SetText(120,"New Zealand - ANZ");
    SetText(121,"New Zealand - ASB");
    SetText(122,"New Zealand - BNZ");
    SetText(123,"New Zealand - KiwiBank");
    SetText(124,"New Zealand - National Bank");
    SetText(125,"New Zealand - Westpac");
//  end;
  
/* Norway */
//  if (HasLocalization("NOR")) then begin
    SetText(9,"Norway - DnB Telepay");
    SetText(10,"Norway - K-Link");
    SetText(11,"Norway - SparNett");
    SetText(12,"Norway - Postbanken");
    SetText(35,"Norway - Telepay 2"); //turned out to be unnessesary, if it isn't, we activate it again....
    SetText(156,"Norway - SEPA");
//  end;
  
/* South Africa */
//  SetText(130,"South Africa - NetBank Business");

/* Spain */
//  if (HasLocalization("ESP")) then begin
    SetText(151,"Spain - SEPA");
//  end;
/* Sweden */
//  if (HasLocalization("SWE")) then begin
    SetText(6,"Sweden - SE-Banken");
    SetText(7,"Sweden - Handelsbanken");
    SetText(8,"Sweden - Nordea");
    SetText(23,"Sweden - Swedbank");
    SetText(63,"Sweden - PlusGirot");
    SetText(155,"Sweden - SEPA");
//  end;
/* England */
/* Where is the code for this ???? */
/* Why 30 ???? 25 is free. Why skip numbers ???? */
//  if (HasLocalization("GBR")) then begin
    SetText(30,"UK - Albany");
    SetText(31,"UK - BACS");
    SetText(33,"UK - Hexagon");
//  end;
/* Iceland */
//  if (HasLocalization("ISL")) then begin
    SetText(40,"Iceland - bunaﾌarbankinn");
    SetText(41,"Iceland - LANDSBANKINN");
    SetText(42,"Iceland - ISLANDSBANKI");
    SetText(43,"Iceland - SPARISJODIR");
//  end;
/* Poland */
//  if (HasLocalization("POL")) then begin
    SetText(50,"Poland - ING Bank");
    SetText(51,"Poland - Reiffaisen Bank");
    SetText(53,"Poland - BPH (Elixir)");
//  SetText(54,"Poland - Nordea");
//  end;

//  if (HasLocalization("SVN")) then begin
    SetText(90,"Slovenia");
//  end;
  EndSet;

  SetBegin(17);
  SetText(0,"Customer");
  SetText(1,"Test dokument");
  EndSet;  
/*
  SetBegin(18);
  SetText(HANSAWORD,"Microsoft Word");
  SetText(HANSAEXCEL,"Microsoft Excel");
  EndSet;  
  
  SetBegin(19);
  SetText(HANSATRANS,"FinHansa");
  SetText(MERITATRANS,"Merita Pankki");
  EndSet;  
*/
  SetBegin(20);
  SetText(1,"Deposit");
  SetText(2,"Withdrawal");
  SetText(3,"Correction of Deposit");
  SetText(4,"Correction of Withdrawal");
  EndSet;  
  
/* Istﾊllet fﾚr kryssruta i matris */
  SetBegin(21);
  SetText(0,"-");
  SetText(1,"OK");
  EndSet;  
  
// Where is this used?? I can't find it anywhere...
  SetBegin(22);
  SetText(700,"Betalningsrﾚrelsetjﾊnst");
  SetText(701,"Service Periodic Payment");
  SetText(702,"Invoice Payment Service");
  SetText(703,"Payment Terminal Service");
  SetText(704,"Direct Debit/Automatic Payment Service");
  SetText(705,"Payment with reference");
  SetText(706,"Payment Service");
  SetText(710,"Deposit");
  SetText(720,"Withdrawal");
  SetText(721,"Payment With Card");
  SetText(722,"Check");
  SetText(723,"Taxi/Bus");
  SetText(730,"Commission");
  SetText(740,"Interest debit");
  SetText(750,"Interest credit");
  SetText(760,"Loan (amortisation, interest and commission");
  SetText(761,"Amortisation of loan");
  EndSet;  
  
  StrSetBegin(23);
  StrSetText(BalRn,"Balance Sheet");
  StrSetText(ResRn,"Profit & Loss");
  StrSetText(KeyRn,"Key Financial Ratios");
  StrSetText(VAT2Rn,"#VAT# Reporting");
  StrSetText(ICACRn,"Inter Company A/C Comparison");
  EndStrSet;
  
  SetBegin(24);
  SetText(kTransactionRowTypeAny,"Any");  //Any
  SetText(kTransactionRowTypeManual,"M");  //Manual
  SetText(kTransactionRowTypeCustomer,"C");  //Customer
  SetText(kTransactionRowTypeSupplier,"S");  //Supplier
  SetText(kTransactionRowTypeStock,"I");  //Stock
  EndSet;
  
  SetBegin(25);
  SetText(10,"Eksport/Import av skip");
  SetText(11,"Eksport/Import av plartform/riggar");
  SetText(12,"Eksport/Import av fly");
  EndSet;

  SetBegin(26);
//  SetText(kReceiptBankBPHPoland,"BPH (POL)");  
  SetText(12,"Customer Kid Code");
  SetText(kReceiptBankeCredit,"eCredit");
  SetText(10,"Kid Code 14");
  SetText(11,"Kid Code 15(2)");
//  SetText(2,"xxx?");  
//  SetText(8,"xxx"); // Finance Credit Norge ASA");  //should maybe be removed. They are bankrupt.  
//  if (HasLocalization("NOR")) then begin 
    SetText(kReceiptBankBBSOcrGiroNorway,"Norway - Nets OcrGiro");
    SetText(kReceiptBankGjensidigeNorway,"Norway - Gjensidige Bank");
    SetText(kReceiptBankFinansNorway,"Norway - NOR finans");
    SetText(kReceiptBankNordeaFinans,"Norway - Nordea finans");
    SetText(kReceiptBankBedriftsfinans,"Norway - Bedriftsfinans");
    SetText(kReceiptBankDNBNorway,"Norway - DNB Factoring");
    SetText(kReceiptBankKFinansNorway,"Norway - K-Finans");
    SetText(kReceiptBankNORDFinansNorway,"Norway - NORD finans");
    SetText(kReceiptBankSGFinansNorway,"Norway - SG Finans");  
//  end;
//  if (HasLocalization("DEN")) then begin 
    SetText(kReceiptBankNORDFinansDenmark,"Denmark - NORD finans");
    SetText(9,"Denmark - Nordea Bank");
//  end;
//  if (HasLocalization("SWE")) then begin 
    SetText(kReceiptBankBGcStandardSweden,"Sweden - Bgc standard");
    SetText(kReceiptBankPBKOutsourcingSweden,"Sweden - PBK Outsourcing");
//  end;
//  if (HasLocalization("CZE")) then begin 
    SetText(kReceiptBankCITIChech,"Czech Republic - CITI");
    SetText(kReceiptBankABOChech,"Czech Republic - ABO");
//  end;
//  if (HasLocalization("USA")) then begin 
    SetText(kReceiptBankChaseUSA,"USA - Chase");
    SetText(kReceiptBankCITIUSA,"USA - CITI");
    SetText(kReceiptBankUSUSA,"USA - US Bank");
//  end;
//  if (HasLocalization("FIN")) then begin 
    SetText(kReceiptBankNDAFIN,"Finland - NDA");
    SetText(kReceiptBankcamt054FIN,"Finland - camt.054");
    SetText(kReceiptBankSEBFinland,"Finland - SEB");
//  end;

//    SetText(kReceiptBankOFX,"OFX");
  EndSet;

  SetBegin(27);
  SetText(0,"-");
  SetText(1,"R");
  EndSet;

  SetBegin(28);
  SetText(kCompanyActive,"Active");
  SetText(kCompanyInactive,"Inactive");
  SetText(kCompanyDeleted,"Deleted");
  EndSet;

  SetBegin(29);
  SetText(kFactoringFormatNone,"No Factoring");
  SetText(kFactoringFormatNordeaBankFIN,"Nordea (FIN)");
  SetText(kFactoringFormatGjensidigeBankNOR,"Gjensidige Bank (NOR)");
  SetText(kFactoringFormatFactoringFinansNOR,"Factoring Finans (NOR)");
  SetText(kFactoringFormatOsuusPankkiFIN,"Osuus Pankki (FIN)");
  SetText(kFactoringFormatNordeaBankSWE,"Nordea (SWE)");
  SetText(kFactoringFormatNORDfinans,"NORD finans");
//  SetText(7,"xxx"); // Finance Credit Norge ASA");
  SetText(kFactoringFormatKredittstyring,"Kredittstyring");
  SetText(kFactoringFormatLIICE,"LI (ICE)");
  SetText(kFactoringFormatLBICE,"LB (ICE)");
  SetText(kFactoringFormatBIICE,"BI (ICE)");
  SetText(kFactoringFormatSPICE,"SP (ICE)");
  SetText(kFactoringFormatFaktabFinans,"Faktab Finans");
  SetText(kFactoringFormatIntrumJustitia,"Intrum Justitia");
  SetText(kFactoringFormatBedriftsfinans,"Bedriftsfinans");
  SetText(kFactoringFormatBunararbankinn,"Bunaﾌarbankinn");
  SetText(kFactoringFormatISLANDSBANKI,"ISLANDSBANKI");
  SetText(kFactoringFormatSPARISJODIR,"SPARISJODIR");
  SetText(kFactoringFormatLANDSBANKINN,"LANDSBANKINN");
  SetText(kFactoringFormatNORDfinansDK,"NORD finans (DK)");
  SetText(kFactoringFormatCredit,"eCredit");
  SetText(kFactoringFormatNordeafinans,"Nordea finans");
  SetText(kFactoringFormatSEB,"SEB");
  SetText(kFactoringFormatHandelsbankenSWE,"Handelsbanken (SWE)");
  SetText(kFactoringFormatSampoFIN,"Sampo (FIN)");
  SetText(kFactoringFormatSGFinansNOR,"SG Finans (NOR)");
  SetText(kFactoringFormatHandelsbankenFIN,"Handelsbanken (FIN)");
  SetText(kFactoringFormatFinvoiceFIN,"Finvoice (FIN)");
  EndSet;

  SetBegin(30);
  SetText(1,"Report");
  SetText(2,"Export");
  SetText(3,"Import");
  EndSet;

  SetBegin(31);
  SetText(0,"-");
  SetText(1,"Invoiceable");
  SetText(2,"Warranty");
  SetText(3,"Contract");
  SetText(4,"Goodwill");
  EndSet;

  SetBegin(32); /* */
  SetText(0,"Generate Transactions");
  SetText(1,"Do not Generate Transactions");
  EndSet;

  SetBegin(33);
  SetText(0,"Not Invoiced");
  SetText(1,"Already Invoiced");
  EndSet;
  
  SetBegin(34); // MailVc
  SetText(kMailRowTypeTo,"To");
  SetText(kMailRowTypeFrom,"From");
//  SetText(kMailRowTypeFile,"File");
  SetText(kMailRowTypeCC,"Cc");
  SetText(kMailRowTypeBCC,"Bcc");
  EndSet;
  
  SetBegin(35);
  SetText(kConfClassConference,"Conference");
  SetText(kConfClassNews,"News");
  SetText(kConfClassBillboard,"Billboard");
  SetText(kConfClassLibrary,"Library");
  SetText(kConfClassFolder,"Folder");
  SetText(kConfClassMailbox,"Mailbox");
  SetText(kConfClassArchive,"Archive");
  EndSet;
  
  SetBegin(36); /* */
  SetText(kPayModeTypeFree,"Free");
  SetText(kPayModeTypeCheque,"Received #Cheques#");
  SetText(kPayModeTypeOwnCheque,"Own #Cheques#");
  SetText(kPayModeTypeCreditCard,"Credit Card");
  SetText(kPayModeTypeDebitCard,"Debit Card");
  SetText(kPayModeTypeCash,"Cash");
  SetText(kPayModeTypeResource,"Resource");
  SetText(kPayModeTypeOnAccount,"On Account");
  SetText(kPayModeTypeRegionalWithholding,"Regional Withholding");
  SetText(kPayModeTypeSocialInsuranceWithholding,"Social Insurance Withholding");
  SetText(kPayModeTypeVATWithholding,"#VAT# Withholding");
  SetText(kPayModeTypeWithholding,"Withholding");
  SetText(kPayModeTypeBankTransfer,"Bank Transfer");
  SetText(kPayModeTypeGiftVoucher,"GiftVoucher");
  if (HasLocalization("PRT")) then begin 
    SetText(kPayModeTypeContraPayment,"Contra Payment");
    SetText(kPayModeTypeCommercialPaper,"Commercial Paper");
    SetText(kPayModeTypeRestaurantTicket,"Restaurant Ticket");
    SetText(kPayModeTypeGoodsExchange,"Goods Exchange");
    SetText(kPayModeTypeOther,"Other");
    SetText(kPayModeTypeATMReferences,"ATM Reference");
    SetText(kPayModeTypeEM_LoyaltyPoints,"Electronic money or Loyalty points");
  end;
  EndSet;

  SetBegin(37); /* */
  SetText(0,"Other");
  SetText(1,"Visa");
  SetText(2,"MasterCard");
  SetText(3,"American Express");
  SetText(4,"Diners");
  SetText(5,"Maestro/Switch");
  SetText(6,"Visa Electron");
  SetText(7,"Discover");
  SetText(8,"Carte Blanche");
  SetText(9,"JCB");
  SetText(10,"EnRoute");
  SetText(11,"JAL");
  SetText(12,"Delta");
  SetText(13,"Dankort");
  SetText(14,"Laser");
  SetText(15,"Carte Bleue");
  SetText(16,"Carta Si");
  SetText(17,"NRAH");
  SetText(18,"Tiliraha");
  EndSet;

  SetBegin(38); /* */
  SetText(0,"Allowed Target");
  SetText(1,"Allowed Origin");
  SetText(2,"Allowed Temporary");
  SetText(3,"Default Temporary Own #Cheque#");
  SetText(4,"Default Target #Cheque#");
  SetText(5,"Default Target IOU");
  SetText(6,"Default Temporary #Cheque#");
  SetText(7,"Default Temporary IOU");
  SetText(8,"Default Temporary Own IOU");
  SetText(9,"Allowed Origin Own");
  SetText(10,"Allowed Temporary Own #Cheque#");
  SetText(11,"Allowed Target Own #Cheque#");
  EndSet;

/* Removed from the Activities now. */
/*
  SetBegin(39);
  SetText(0,"No Link");
  SetText(1,"Quotation");
  SetText(2,"Sales Orders");
  SetText(3,"Sales Invoice");
  SetText(4,"Project");
  SetText(5,"#Purchase Invoice#");
  SetText(6,"Letter");
  SetText(7,"Work Order");
  SetText(8,"Contract");
  EndSet;
*/

  SetBegin(40);
  SetText(0,"Brutto");
  SetText(1,"BN");
  SetText(2,"BasicWithdrawn");
  SetText(3,"BasicTax");
  SetText(4,"Withdrown");
  SetText(5,"Tax");
  EndSet;

  SetBegin(41);
  SetText(0,"No Check");
  SetText(1,"Always Check");
  EndSet;

  SetBegin(42);
  SetText(0,"360 Days");
  SetText(1,"365 Days");
  EndSet;

  SetBegin(43);
  SetText(0,"Country Deal");
  SetText(1,"Special A-Tax");
  SetText(2,"#VAT Code#");
  EndSet;

  SetBegin(44);
  SetText(0,"Normal");
  SetText(1,"Never Remove");
  SetText(2,"Remove Next Day");
  EndSet;

  SetBegin(45);
  SetText(0,"Active");
  SetText(1,"Transferred");
  SetText(2,"Invalid");
  SetText(3,"Year End Stage 1");
  SetText(4,"Year End Stage 2");
  EndSet;

  SetBegin(46);
  SetText(kButtonColourDefault,"Default");
  SetText(kButtonColourBlack,"Black");
  SetText(kButtonColourRed,"Red");
  SetText(kButtonColourGreen,"Green");
  SetText(kButtonColourDeepBlue,"Deep Blue");
  SetText(kButtonColourYellow,"Yellow");
  SetText(kButtonColourCyan,"Cyan");
  SetText(kButtonColourPink,"Pink");
  SetText(kButtonColourStrawberry,"Strawberry");
  SetText(kButtonColourLime,"Lime");
  SetText(kButtonColourSkyBlue,"Sky Blue");
  SetText(kButtonColourBlue,"Blue");
  SetText(kButtonColourDeepPurple,"Deep Purple");
  SetText(kButtonColourGold,"Gold");
  SetText(kButtonColourCoffee,"Coffee");
  SetText(kButtonColourChocolate,"Chocolate");
  SetText(kButtonColourOrange,"Orange");
  SetText(kButtonColourPlum,"Plum");
  SetText(kButtonColourNightShade,"Night Shade");
  SetText(kButtonColourDeepForest,"Deep Forest");
  SetText(kButtonColourFlamingo,"Flamingo");
  SetText(kButtonColourGray,"Gray");
  EndSet;

  SetBegin(47);
  SetText(kRegisterLoggingNone,"No Logging");
  SetText(kRegisterLoggingAll,"Log User and Time");
  SetText(kRegisterLoggingAll_KeepRecord,"Keep Original Record");
  SetText(kRegisterLoggingOnlyUserChanges,"Log User and Time (User changes only)");
  SetText(kRegisterLoggingOnlyUserChanges_KeepRecord,"Keep Original Record (User changes only)");
//  SetText(kRegisterLoggingOnlyUserChanges_ChangedFields,"Log Changed field (User changes only)");
  SetText(kRegisterLogging_LogWhenFieldChanged_KeepRecord,"Keep Original Record when field changed");
  EndSet;

  SetBegin(48);
  SetText(0,"Internal Powerbook G3 Series");
  SetText(1,"U.S. Robotics 56k Faxmodem");
//  SetText(1,"Hayes 288"); /* ? */
//  SetText(2,"US Robotics 56k"); /* ? */
  EndSet;

  SetBegin(49);
  SetText(0,"14400");
  SetText(1,"9600");
  SetText(2,"7200");
  SetText(3,"4800");
  EndSet;

  SetBegin(50);
  SetText(0,"-");
  SetText(1,"Exclude from Official Reports");
//  SetText(2,"No #VAT#");// in Tax Rules, set 358
  EndSet;

  SetBegin(51);
  SetText(0,"-");
  SetText(1,"+");
  EndSet;

  StrSetBegin(52);
  StrSetText(All,"All mails");
  StrSetText(Recv,"Recipient");
  StrSetText(Received:,"Received");
  StrSetText(To:,"To");
  StrSetText(Send,"Sender");
  StrSetText(Subj,"Subject");
  StrSetText(Body,"Body");
  StrSetText(AllFour,"Recip or Recvd or To"); /* Can't use comma */
  EndStrSet;

  SetBegin(53);
  SetText(0,"New");
  SetText(1,"Used");
  SetText(2,"Repaired");
  EndSet;

  SetBegin(54);
  SetText(0,"Found");
  SetText(1,"Missing");
  SetText(2,"On loan");
  SetText(3,"Borrowed");
  SetText(4,"Laid off");
  SetText(5,"On Repair");
//  SetText(6,"Disposed");
  SetText(7,"Useable");
  SetText(8,"Damaged");
  SetText(9,"Damaged - Repairable");
  EndSet;

  SetBegin(55);
  SetText(0,"Asset Category");
  SetText(1,"Asset");
  EndSet;

  SetBegin(56);
  SetText(0,"None");
  SetText(1,"Epson TMU210"); 
  SetText(2,"Star TSP100"); 
  EndSet;

  SetBegin(57);
  SetText(0,"Period");
  SetText(1,"Non Period"); 
  EndSet;

  SetBegin(58);
  SetText(0,"First Day");
  SetText(1,"Every Day");
  SetText(2,"Last Day");
  EndSet;

  SetBegin(59);
  SetText(0,"Print");
  SetText(1,"Don't Print");
  EndSet;

  SetBegin(60);
  SetText(0,"Received");
  SetText(1,"Missing (Will be Charged)");
  SetText(2,"Stolen (Will be Charged)");
  SetText(6,"Keeping it (Will be Charged)");
  SetText(3,"Disposed");
  SetText(4,"For Service");
  SetText(5,"Rental Item");
  SetText(7,"Split Information");
  EndSet;

  SetBegin(61);
  SetText(0,"-");
  SetText(1,"Recipe");
  EndSet;

  SetBegin(62);
  SetText(0,"For Rent");
  SetText(1,"Disposable");
  SetText(2,"Chargeable");
  SetText(3,"3rd Party Rental");
  SetText(4,"Sub Contractor");
  EndSet;

  SetBegin(63);
  SetText(0,"Rental Item");
  SetText(1,"Accessory Item");
  EndSet;

  SetBegin(64);
  SetText(0,"Active");
  SetText(1,"In Service");
  SetText(2,"Inactive");
  EndSet;

  SetBegin(65);
  SetText(0,"-");
  SetText(1,"Force Bank Values in B1");
  SetText(2,"Force Bank Values in B1 and B2");
  EndSet;

  SetBegin(66);
  SetText(kCashInRowTypeNormal,"Cash In");
  if (HasModSL) then begin
    SetText(kCashInRowTypeInvoice,"Invoice");
  end;
  if (HasModPL) then begin
    SetText(kCashInRowTypeCredPurchaseInvoice,"Credit #Purchase Invoice#");
  end;
  if (HasModExp) then begin
    SetText(kCashInRowTypePersonnelPayment,"Personnel Payment");
  end;
  if (HasModSL and HasRussianPrepayment) then begin
    SetText(kCashInRowTypeCustomerPrepayment,"Prepayment from Customer");
  end;
  if (HasModPL and HasRussianPrepayment) then begin
    SetText(kCashInRowTypeSupplierRevPrepayment,"Rev. Prep. to #Supplier#");
  end;
  if (HasModCheck) then begin
    SetText(kCashInRowTypeCheque,"#Cheque#");
  end;
  EndSet;

  SetBegin(67);
  SetText(0,"Calendar");
  SetText(1,"To Do");
  SetText(2,"Timed To Do");
  EndSet;

  SetBegin(68);
  SetText(1,"Call");
  SetText(2,"Meeting");
  SetText(3,"Deskwork");
  SetText(0,"Other");
  EndSet;

  SetBegin(69);
  SetText(0,"None");
  SetText(1,"POSNET 1 (Poland)"); 
  SetText(2,"POSNET 2 (Poland)"); 
  SetText(3,"OPTIMUS (Poland)"); 
  SetText(4,"POSNET Thermal 5V (Poland)"); 
  SetText(5,"FP3000 (Slovakia)"); 
  SetText(6,"Hasar (Argentina)"); 
  SetText(7,"Epson (Argentina)"); 
  SetText(8,"Fi-550 (Serbia)"); 
  EndSet;  

  SetBegin(70);
  SetText(0,"No Decimals"); 
  SetText(1,"One Decimal"); 
  SetText(2,"Two Decimals"); 
  SetText(3,"Three Decimals"); 
  SetText(4,"Four Decimals"); 
  SetText(5,"Five Decimals"); 
  SetText(10,"0.05"); 
//  SetText(11,"Down to 0.05"); 
  SetText(-1,"Tens"); 
  SetText(-2,"Hundreds"); 
  SetText(-3,"Thousands"); 
  EndSet;

  SetBegin(71);
  SetText(0,"Master Control");
  SetText(1,"Bar Tab"); 
  SetText(2,"Resource Month"); 
  SetText(3,"Invoice (Touch Screen)"); 
  SetText(4,"Bar Tab New"); 
  SetText(5,"Production Time Entry"); 
  SetText(6,"Supermarket Invoice"); 
  SetText(7,"#Restaurant# Table Layout"); 
  SetText(8,"POS Invoices Touch Screen"); 
  SetText(9,"Activity"); 
  SetText(10,"Contacts"); 
  SetText(11,"Task Manager");
  SetText(12,"Business Comunicator");
  EndSet;

  SetBegin(72);
  SetText(0,"None");
  SetText(1,"Open"); 
  SetText(2,"Close"); 
  EndSet;

  SetBegin(73);
  SetText(kCashOutRowTypeNormal,"Cash Out");
  if (HasModSL) then begin
    SetText(kCashOutRowTypeCredSalesInvoice,"Credit Invoice");
  end;
  if (HasModPL) then begin
    SetText(kCashOutRowTypeInvoice,"#Purchase Invoice#");
  end;
  if (HasModExp) then begin
    SetText(kCashOutRowTypePersonnelPayment,"Personnel Payment");
  end;
  if (HasModPL and HasRussianPrepayment) then begin
    SetText(kCashOutRowTypeSupplierPrepayment,"Prepayment to #Supplier#");
  end;
  if (HasModSL and HasRussianPrepayment) then begin
    SetText(kCashOutRowTypeCustomerRevPrepayment,"Rev. Prep. from Customer");
  end;
  if (HasModCheck) then begin
    SetText(kCashOutRowTypeCheque,"#Cheque#");
    SetText(kCashOutRowTypeOwnCheque,"Own #Cheque#");
  end;
  EndSet;

  SetBegin(74);
  SetText(0,"Free");
  SetText(1,"Used");
  SetText(2,"Item on the Way");
  SetText(3,"Error");
  EndSet;

  SetBegin(75);
  SetText(0,"Ready to Send");
  SetText(1,"Sent to NT7000");
  SetText(2,"Accepted by NT7000");
  SetText(3,"Error");
  SetText(10,"On the Conveyour");
  EndSet;

  SetBegin(76);
  SetText(0,"Manual");
  SetText(1,"Delivery");
  SetText(2,"Movement");
  EndSet;

  SetBegin(77);
  SetText(0,"Automatic");
  SetText(1,"Picking");
  SetText(2,"-");//Manual, not implemented
  SetText(3,"Closed");
  EndSet;

  SetBegin(78);
  SetText(0,"Per Room");
  SetText(1,"Per Guest");
  EndSet;

  SetBegin(80);
  SetText(LangEnglish,"English");
  SetText(LangFrench,"French");
  SetText(LangGerman,"German");
  SetText(LangDutch,"Dutch");
  SetText(LangSwedish,"Swedish");
  SetText(LangSpanish,"Spanish");
  SetText(LangDanish,"Danish");
  SetText(LangPortuguese,"Portuguese");
  SetText(LangNorwegian,"Norwegian");
  SetText(LangJapanese,"Japanese");
  SetText(LangArabic,"Arabic");
  SetText(LangFarsi,"Farsi");
  SetText(LangFinnish,"Finnish");
  SetText(LangGreek,"Greek");
  SetText(LangHebrew,"Hebrew");
  SetText(LangIcelandic,"Icelandic");
  SetText(LangItalian,"Italian");
  SetText(LangLithuanian,"Lithuanian");
  SetText(LangPolish,"Polish");
  SetText(LangHungarian,"Hungarian");
  SetText(LangEstonian,"Estonian");
//  SetText(LangLettish,"Lettish");
  SetText(LangLatvian,"Latvian");
//  SetText(LangLapponian,"Lapponian");
  SetText(LangLappish,"Lappish");
  SetText(LangFaeroese,"Faeroese");
  SetText(LangRussian,"Russian");
  SetText(LangFlemish,"Flemish");
  SetText(LangIrish,"Irish");
  SetText(LangRomanian,"Romanian");
  SetText(LangCzech,"Czech");
  SetText(LangSimplifiedChinese,"Simplified Chinese");
  SetText(LangSlovak,"Slovak");
  SetText(LangSlovenian,"Slovenian");
  SetText(LangSerbian,"Serbian");
  SetText(LangMacedonian,"Macedonian");
  SetText(LangBulgarian,"Bulgarian");
  SetText(LangUkrainian,"Ukrainian");
  SetText(LangByelorussian,"Byelorussian");
  SetText(LangUzbek,"Uzbek");
  SetText(LangKazakh,"Kazakh");
  SetText(LangAzerbaijani,"Azerbaijani");
  SetText(LangAzerbaijanAr,"AzerbaijanAr");
  SetText(LangArmenian,"Armenian");
  SetText(LangGeorgian,"Georgian");
  SetText(LangMoldavian,"Moldavian");
  SetText(LangKirghiz,"Kirghiz");
  SetText(LangTajiki,"Tajiki");
  SetText(LangTurkmen,"Turkmen");
  SetText(LangWelsh,"Welsh");
  SetText(LangBasque,"Basque");
  SetText(LangCatalan,"Catalan");
  SetText(LangLatin,"Latin");
  SetText(LangBrazilian,"Brazilian");
  SetText(LangVietnamese,"Vietnamese");
  SetText(LangCanadian,"Canadian English");
  SetText(LangCroatian,"Croatian");
  SetText(LangTurkish,"Turkish");
  SetText(LangAngolanPortuguese,"Angolan Portuguese");
  SetText(LangMozambicanPortuguese,"Mozambican Portuguese");
  EndSet;

  SetBegin(81);
  SetText(vatEnglish,"Default"); // English is Default, it makes it easier for people in a country not listed
  SetText(vatAlgeria,"Algerian");
  SetText(vatAngolan,"Angolan");
  SetText(vatArgentinean,"Argentinean"); 
  SetText(vatAustralia,"Australian"); 
  SetText(vatAzerbaijan,"Azerbaijan");
  SetText(vatBahrain,"Bahrain");
  SetText(vatBelarusian,"Belarusian");
  SetText(vatBolivian,"Bolivian");
  SetText(vatBrazil,"Brazilian");
  SetText(vatCanada,"Canadian");
  SetText(vatChina,"Chinese");
  SetText(vatCostaRican,"Costarican");
  SetText(vatCroation,"Croatian");
  SetText(vatCzech,"Czech");
  SetText(vatDanish,"Danish");
  SetText(vatEgypt,"Egypt");
  SetText(vatEstonian,"Estonian");
  SetText(vatFinnish,"Finnish");
  SetText(vatFrench,"French");
  SetText(vatGerman,"German");
  SetText(vatGuatemalean,"Guatemalean");
  SetText(vatHungarian,"Hungarian");
  SetText(vatHonduran,"Honduran");
  SetText(vatIcelandic,"Icelandic");
  SetText(vatIndian,"Indian");
  SetText(vatItalian,"Italian");
  SetText(vatJordan,"Jordan");
  SetText(vatLithuanian,"Lithuanian");
  SetText(vatLatvian,"Latvian");
  SetText(vatKenyan,"Kenyan");
  SetText(vatKuwait,"Kuwait");
  SetText(vatLebanon,"Lebanon");
  SetText(vatMexican,"Mexican");
  SetText(vatMozambican,"Mozambican");
  SetText(vatNorwegian,"Norwegian");
  SetText(vatNamibian,"Namibian");
  SetText(vatNewZealand,"New Zealand");
  SetText(vatNicaraguan,"Nicaraguan");
  SetText(vatOman,"Oman");
  SetText(vatPanamanian,"Panamanian"); 
  SetText(vatParaguayan,"Paraguayan"); 
  SetText(vatPhilippinian,"Philippinian"); 
  SetText(vatPolish,"Polish");
  SetText(vatPortuguese,"Portuguese");
  SetText(vatQatar,"Qatar");
  SetText(vatRomanian,"Romanian");
  SetText(vatRussian,"Russian");
  SetText(vatSingaporean,"Singaporean");
  SetText(vatSalvadorian,"Salvadorian");
  SetText(vatSaudiArabia,"Saudi Arabia");
  SetText(vatSerbian,"Serbian");
  SetText(vatSlovak,"Slovak");
  SetText(vatSlovenian,"Slovenian");
  SetText(vatSAF,"South African");
  SetText(vatSpanish,"Spanish");
  SetText(vatSwedish,"Swedish");
  SetText(vatUkrainian,"Ukrainian");
  SetText(vatUAE,"United Arab Emirates");
  SetText(vatUnitedStates,"United States");
  SetText(vatYemen,"Yemen");
  SetText(vatZimbabwean,"Zimbabwean");
  EndSet;
    
  SetBegin(82);
  SetText(1,"boolean");
  SetText(2,"integer");
//  SetText(3,"real");
  SetText(4,"string");
//  SetText(6,"list");
//  SetText(7,"record");
//  SetText(9,"row");
  SetText(11,"decimal");
  SetText(12,"long");
  SetText(13,"date");
  SetText(17,"time");
//  SetText(21,"area");
//  SetText(22,"rectangle");
  EndSet;

  SetBegin(83);
  SetText(0,"Repetitive");
  SetText(1,"Invoice Once"); 
  EndSet;

  SetBegin(84);
  SetText(0,"Record");
  SetText(1,"Row"); 
  EndSet;

  SetBegin(85);
  SetText(kSingleFunctionComplex,"Single Function");
  SetText(kSingleFunctionRegister,"Register");
/* Isn't flexible enough to use these...
  SetText(kSingleFunctionSetting,"Setting");
  SetText(kSingleFunctionReport,"Report");
  SetText(kSingleFunctionDocument,"Document");
  SetText(kSingleFunctionExport,"Export");
  SetText(kSingleFunctionImport,"Import");
  SetText(kSingleFunctionMaintenance,"Maintenance");
*/
  EndSet;
  
  StrSetBegin(86);
  StrSetText(Orders,"Order Entry");
  StrSetText(Invoices,"Invoice Entry");
  StrSetText(Quotes,"Quotation Entry");
  StrSetText(Mail,"Mail and Conferences");
  StrSetText(Calendar,"Calendar and Task Manager");
  EndStrSet;
  
  SetBegin(87);
  SetText(0,"Choose One");
  SetText(1,"Mac OS"); // Should have ﾪ in the end, but it doesn't work in Windows....
  SetText(2,"Windows");
  SetText(3,"Linux");
  SetText(4,"AIX");
  SetText(5,"OS/400");
  SetText(6,"Solaris");
  SetText(31,"Other"); // Don't have any higher than this
  EndSet;
  
  SetBegin(88);
  SetText(0,"Choose One");
  SetText(1,"Apple Macintosh");
  SetText(2,"Generic PC");
  SetText(3,"IBM xSeries");
  SetText(4,"IBM pSeries");
  SetText(5,"IBM iSeries");
  SetText(6,"Sun Sparc");
  SetText(31,"Other"); // Don't have any higher than this
  EndSet;

  StrSetBegin(89);
  StrSetText("","UTF-8 (Unicode)");
  StrSetText(ISO-8859-1,"ISO 8859-1 (Western Europe)");
  StrSetText(ISO-8859-4,"ISO 8859-4 (Baltic)");
  StrSetText(ISO-8859-13,"ISO 8859-13 (Baltic)");
  StrSetText(ISO-8859-5,"ISO 8859-5 (Cyrillic)");
  StrSetText(ISO-8859-15,"ISO 8859-15 (western european with euro sign)");
  StrSetText(US-ASCII,"US ASCII");
  StrSetText(CP437,"DOS CP 437 (US)");
  StrSetText(CP850,"DOS CP 850 (Western Europe)");
  StrSetText(CP866,"DOS CP 866 (Cyrillic)");
  StrSetText(CP1250,"Windows codepage 1250 (Central Europe)");
  StrSetText(CP1251,"Windows codepage 1251 (Cyrillic)");
  StrSetText(CP1252,"Windows codepage 1252 (Western Europe)");
  StrSetText(CP1257,"Windows codepage 1257 (Baltic)");
  StrSetText(KOI8-R,"KOI8-R (Cyrillic)");
  StrSetText(MACINTOSH,"Apple Western Europe");
  StrSetText(ACE,"Apple Central Europe");
  StrSetText(ACYR,"Apple Cyrillic");
  StrSetText(MAZOVIA,"Mazovia");
  EndStrSet;
  
  SetBegin(90);
  SetText(kAnyClient,"Any Client");
  SetText(kClientAndroid,"Android");
  SetText(kClientBrowser,"Browser");
  SetText(kClientHandset,"Handset"); // Don't like the word, it WILL be misunderstood...
  SetText(kClientiPhone,"iOS");
  SetText(kClientLinux,"Linux");
  SetText(kClientClassic,"Mac OS 9");
  SetText(kClientOSX,"Mac OS X Carbon");
  SetText(kClientOSXCocoa,"Mac OS X Cocoa");
  SetText(kClientSymbian,"Symbian");
  SetText(kClientWindows,"Windows");
  SetText(kClientMetro,"Windows 8");
  SetText(kClientWindowsNet,"Windows .NET");
  SetText(kClientXT,"XT Client");
  SetText(kClientWebClient,"Web Client");
  SetText(kClientSyncClient,"Sync Client");
  SetText(kClientSlave,"Gateway");
  EndSet;

  SetBegin(91);
  SetText(0,"Accept");
  SetText(1,"Reject");
  EndSet;

  SetBegin(92);
  SetText(0,"Choose " & ProductName & " Company");
  SetText(13,"Argentina");
  SetText(29,"Australia");
  SetText(33,"Austria");
  SetText(109,"Azerbaijan");
  SetText(14,"Bolivia");
  SetText(41,"Canada");
  SetText(43,"Croatia");
  SetText(15,"Czech");
  SetText(5,"Denmark");
  SetText(94,"Dubai");
  SetText(17,"Ecuador");
  SetText(7,"Estonia " & ProductName);
  SetText(16,"Estonia (Excellent Business Solutions)");
  SetText(25,"Estonia (HansaRaama Customers)");
  SetText(4,"Finland");
  SetText(107,"France");
  SetText(32,"Germany");
  SetText(18,"Honduras");
  SetText(19,"Hungary");
  SetText(27,"Iceland");
  SetText(40,"Ireland");
  SetText(111,"Italy");
  SetText(44,"Kenya");
  SetText(8,"Latvia");
  SetText(9,"Lithuania");
  SetText(38,"Mexico");
  SetText(20,"Middle-Eastern Customers");
  SetText(42,"New Zealand");  
  SetText(112,"North America");
  SetText(2,"Norway " & ProductName);
  SetText(26,"Norway FirstOffice");
  SetText(21,"Paraguay");
  SetText(6,"Poland");
  SetText(22,"Portugal");
  SetText(10,"Russia");
  SetText(30,"Romania");
  SetText(39,"Singapore");
  SetText(31,"Slovakia");
  SetText(23,"Slovenia");
  SetText(28,"Sudan");
  SetText(12,"South Africa");
  SetText(3,"Sweden");
  SetText(34,"Switzerland");
  SetText(35,"Turkey");
  SetText(1,"United Kingdom");
  SetText(36,"Ukraine");
  SetText(37,"United States");
  SetText(24,"Uruguay");
  SetText(45,"Zimbabwe");
  SetText(99,"Auto Selected Company");
//  SetText(104,"Standard Apps");
  EndSet;
  
  SetBegin(93);
  SetText(0,"Finnvoice");
  EndSet;

  SetBegin(94);
  SetText(0,"Confirm Date");
  SetText(1,"Start Date");
  SetText(2,"End Date");
  EndSet;

  SetBegin(95);
  SetText(0 ,"-");
  SetText(1 ,"Number");
  SetText(2 ,"Name");
  SetText(3 ,"Price");
  SetText(4 ,"Picture");
  SetText(5 ,"Item Card Text");
  SetText(6 ,"Extra Text");
  SetText(7 ,"Buy Button");
  SetText(8 ,"Basket Contents");
  SetText(9 ,"Unit");
  SetText(10,"Basket Contents (editable)");
  SetText(11,"HTML code");
  EndSet;
  
  SetBegin(96);
  SetText(0,"no");
  SetText(1,"yes");
  EndSet;

  SetBegin(97);
  SetText(0,"Reminders");
  SetText(1,"No Reminders");
  EndSet;

  SetBegin(98);
  SetText(0 ,"-");
  SetText(1,"Item Unit Price");
  SetText(2,"Customs");
  SetText(3,"Freight");
  SetText(4,"Extra cost 1");
  SetText(5,"Extra cost 2");
  SetText(6,"Extra cost 3");
  SetText(7,"Extra cost 4");
  SetText(8,"Extra cost 5");
  EndSet;
  
  SetBegin(99);
  SetText(0 ,"All");
  SetText(1,"OKed");
  SetText(2,"Not OKed");
  EndSet;

// Dangerous to add 120, it is in the middle of document types....
  SetBegin(120);
  SetText(0,"-");
  SetText(1,"Hansa");
  SetText(2,"FInvoice");
  SetText(3,"EInvoice Denmark");
  EndSet;

// SETS 121 - 255 are busy (document types)
// We are running out of setnumbers, unless we can start from 255 and go up....

  SetBegin(300);
  SetText(0,"Will Sell At");
  SetText(1,"Not for Sale (official price)");
  EndSet;

  SetBegin(301);
  SetText(0,"Page with Conference Contents");
  SetText(1,"Dropdown list");
  SetText(2,"Own HAL Function (use field to enter)");
  SetText(3,"Login");
  SetText(4,"Logout");
  SetText(5,"Shopping Basket");
  SetText(6,"Item Browse");
  SetText(7,"Search");
  SetText(8,"New Customer");
  SetText(9,"Change Password");
  SetText(10,"Order Journal");  
  SetText(21,"Purchase Shopping Basket");  
  SetText(22,"Purchase Item Browse");  
  SetText(23,"Purchase Search");  
  SetText(24,"Purchase Order Journal");  
  EndSet;

  SetBegin(302);
  SetText(0,"One per Mail (Conference and Dropdowns)");
  SetText(1,"One per Conference (Conference and Dropdowns)");
  SetText(2,"One per Mail with Drilldown (Conference only)");
  SetText(3,"One per Mail with News (Conference only)");
  SetText(4,"One per Mail with Subject as Link (Conference only)");
  SetText(5,"One per Mail with Bulletpoints (Conference only)");
  SetText(6,"Conference Structure (HansaManuals)");
  EndSet;

/* Will be...
  SetBegin(301);
  SetText(0,"Conference Contents. Choose Options Below.");
//  SetText(1,"Dropdown list");
  SetText(2,"Own HAL Function (use field to enter)");
  SetText(3,"Login");
  SetText(4,"Logout");
  SetText(5,"Shopping Basket");
  SetText(6,"Item Browse");
  SetText(7,"Search");
  SetText(8,"New Customer");
  SetText(9,"Change Password");
  SetText(10,"Order Journal");  
  EndSet;

  SetBegin(302);
  SetText(0,"Mail List");
  SetText(1,"Conference List");
  SetText(2,"Drilldowns");
  SetText(3,"News");
  SetText(4,"Subject as Link");
  SetText(5,"Bulletpoints");
  SetText(6,"Conferences as a tree (see www.HansaManuals.com)");
  SetText(7,"Dropdown One Per Mail");
  SetText(8,"Dropdown One Per Conference");
  EndSet;
*/
  SetBegin(303);
  SetText(0,"One Transaction");
  SetText(1,"Reverse Transaction next Month");
  EndSet;

  SetBegin(304);
  SetText(1,"Client Machine Code");
  SetText(2,"User");
  SetText(3,"Access Group");
  EndSet;
  
  SetBegin(305);
  SetText(1,"Only server");
  SetText(2,"Client and Server");
  EndSet;

  SetBegin(309);// Zero is unknown, HF was set to 100....otherwise same as Set 310
  SetText(typFinancials,"Unspecified");
  SetText(100,"HansaFinancials (use HW instead)");
  SetText(typClassic,"Hansa Classic");
  SetText(typProfessional,"Hansa Professional");
  SetText(typHansaRaama,"HansaRaama");
  SetText(typFirstOffice,"FirstOffice");
  SetText(typFirstOfficePro,"FirstOffice Pro");
  SetText(typClassicLit,"Hansa Classic For Lithuania");
  SetText(typRiigiTarkvara,"HansaRiigitarkvara");
  SetText(typOffice2,"Office/2");
  SetText(typOffice2TB,"Office/2 for TimeBilling");
  SetText(typFirstOfficeSmall,"FirstOffice Small");
  SetText(typFirstOfficeCurrency,"FirstOffice Currency");
  SetText(typFirstContact,"HansaWorld CRM");
  SetText(typOffLine,"FirstOffice POS Offline");
  SetText(typFirstOfficeASP,"FirstOffice ASP");
  SetText(typHansaWorld,"HansaWorld/HansaFinancials");
  SetText(typRussianStandard,"RussianStandard");
  SetText(typHansaWorldSMB,"HansaWorld SMB/Express");
  SetText(typBusinessPhone,"Business Communicator");
  SetText(typSmartApps,"SmartApps");
  SetText(typBooks,"Books");
  SetText(typBooksPro,"Books Professional");
  SetText(typBooksProAdv,"Books Professional Advanced");
  SetText(typBooksJobCost,"Books Job Costing");
  SetText(typBooksAcc,"Books Accounting");
  SetText(typBooksPOS,"Books POS");
  SetText(typCRMBasic,"HansaWorld CRM Basic");
  SetText(typPOSStandalone,"POS Standalone");
  SetText(typStandardCommunicator,"Standard Communicator");
  SetText(typStandardCRM,"Standard CRM");
  SetText(typStandardOrganizer,"Standard Organizer");
  SetText(typStdAccounts,"Standard Accounts");
  SetText(typStdBar,"Standard Bar");
  SetText(typStdContracts,"Standard Contracts");
  SetText(typStdHotel,"Standard Hotel");
  SetText(typStdInvoicing,"Standard Invoicing");
  SetText(typStdNominalLedger,"Standard #Nominal Ledger#");
  SetText(typStdProjects,"Standard Projects");
  SetText(typStdRentals,"Standard Rentals");
  SetText(typStdRestaurant,"Standard #Restaurant#");
  SetText(typStdShop,"Standard Shop");
  SetText(typStdStock,"Standard #Stock#");
  SetText(typStdConferences,"Standard Conferences");
  SetText(typStdDocuments,"Standard Documents");
  SetText(typStdExpenses,"Standard Expenses");
  SetText(typStdHR,"Standard HR");
  SetText(typStdCRMServer,"Standard CRM Server");
  SetText(typStdAccountsServer,"Standard Accounts Server");
  SetText(typStdERP,"Standard Unused");
  SetText(typSberbankInvoices,"Sberbank Invoices");
  SetText(typSberbankStock,"Sberbank Stock");
  SetText(typSberbankStockandCRM,"Sberbank Stock and CRM");
  SetText(typAdmiral,"Admiral");
  SetText(typStandardERP,"Standard ERP");
  SetText(typPurplesoftERP,"Purplesoft ERP");
  SetText(typPAYYAPERP,"PAYYAP ERP");
  SetText(typOBSHousing,"OBS Housing");
  SetText(typTBAS,"Transaction Based Adaptive System");
  EndSet;
  
  SetBegin(310);// Zero is HF, but HF is added to HW
  SetText(typFinancials,"HansaFinancials (use HansaWorld instead)");
  SetText(typClassic,"Hansa Classic");
  SetText(typProfessional,"Hansa Professional");
  SetText(typHansaRaama,"HansaRaama");
  SetText(typFirstOffice,"FirstOffice");
  SetText(typFirstOfficePro,"FirstOffice Pro");
  SetText(typClassicLit,"Hansa Classic For Lithuania");
  SetText(typRiigiTarkvara,"HansaRiigitarkvara");
  SetText(typOffice2,"Office/2");
  SetText(typOffice2TB,"Office/2 for TimeBilling");
  SetText(typFirstOfficeSmall,"FirstOffice Small");
  SetText(typFirstOfficeCurrency,"FirstOffice Currency");
  SetText(typFirstContact,"HansaWorld CRM");
  SetText(typOffLine,"FirstOffice POS Offline");
  SetText(typFirstOfficeASP,"FirstOffice ASP");
  SetText(typHansaWorld,"HansaWorld/HansaFinancials");
  SetText(typRussianStandard,"RussianStandard");
  SetText(typHansaWorldSMB,"HansaWorld SMB/Express");
  SetText(typBusinessPhone,"Business Communicator");
  SetText(typSmartApps,"SmartApps");
  SetText(typBooks,"Books");
  SetText(typBooksPro,"Books Professional");
  SetText(typBooksProAdv,"Books Professional Advanced");
  SetText(typBooksJobCost,"Books Job Costing");
  SetText(typBooksAcc,"Books Accounting");
  SetText(typBooksPOS,"Books POS");
  SetText(typCRMBasic,"HansaWorld CRM Basic");
  SetText(typPOSStandalone,"POS Standalone");
  SetText(typStandardOrganizer,"Standard Organizer");
  SetText(typStandardCommunicator,"Standard Communicator");
  SetText(typStandardCRM,"Standard CRM");
  SetText(typStdAccounts,"Standard Accounts");
  SetText(typStdBar,"Standard Bar");
  SetText(typStdContracts,"Standard Contracts");
  SetText(typStdHotel,"Standard Hotel");
  SetText(typStdInvoicing,"Standard Invoicing");
  SetText(typStdNominalLedger,"Standard #Nominal Ledger#");
  SetText(typStdProjects,"Standard Projects");
  SetText(typStdRentals,"Standard Rentals");
  SetText(typStdRestaurant,"Standard #Restaurant#");
  SetText(typStdShop,"Standard Shop");
  SetText(typStdStock,"Standard #Stock#");
  SetText(typStdConferences,"Standard Conferences");
  SetText(typStdDocuments,"Standard Documents");
  SetText(typStdExpenses,"Standard Expenses");
  SetText(typStdHR,"Standard HR");
  SetText(typStdCRMServer,"Standard CRM Server");
  SetText(typStdAccountsServer,"Standard Accounts Server");
  SetText(typStdERP,"Standard Unused");
  SetText(typSberbankInvoices,"Sberbank Invoices");
  SetText(typSberbankStock,"Sberbank Stock");
  SetText(typSberbankStockandCRM,"Sberbank Stock and CRM");
  SetText(typAdmiral,"Admiral");
  SetText(typStandardERP,"Standard ERP");
  SetText(typPurplesoftERP,"Purplesoft ERP");
  SetText(typPAYYAPERP,"PAYYAP ERP");
  SetText(typOBSHousing,"OBS Housing");
  SetText(typTBAS,"Transaction Based Adaptive System");
  EndSet;
  
  SetBegin(311);
  SetText(1,"Comment");
  SetText(2,"Customer");
  SetText(3,"#Supplier#");
  SetText(4,"Item");
  SetText(5,"Trans. Date");
  SetText(6,"Tags/Objects");
  SetText(7,"Inventory No.");
  SetText(8,"Inventory Name");
  EndSet;
  
  SetBegin(312);
  SetText(kCCPartnerNone,"-");
//  SetText(kCCPartnerCommidea,"Commidea");
  SetText(kCCPartnerPayex,"Payex");
  SetText(kCCPartnerCyberSource,"CyberSource");
  SetText(kCCPartnerSamport,"Samport");
  SetText(kCCPartnerAuthorizeNetCHNotPresent,"Authorize.net (Card Holder not Present)");
  SetText(kCCPartnerAuthorizeNetCHPresent,"Authorize.net (Card Holder Present)");
  SetText(kCCPartnerANZeGate,"ANZ eGate");
  SetText(kCCPartnerPCEftpos,"PC-EFTPOS");
  SetText(kCCPartnerDotpay,"Dotpay");
  SetText(kCCPartnerPaypal,"Paypal");
  SetText(kCCPartnerPaytrail,"Paytrail");
  SetText(kCCPartnerPaysera,"Paysera");
  SetText(kCCPartnerStripe,"Stripe");
  SetText(kCCPartnerElavonCHNotPresent,"Elavon (Card Holder not Present)");
  SetText(kCCPartnerElavonCHPresent,"Elavon (Card Holder Present)");
  SetText(kCCPartnerBambora,"Bambora");
  EndSet;
  
  SetBegin(313);
  SetText(kResTypeSalesOrder,"Sales Order");
  SetText(kResTypeInternalOrder,"Internal Order");
  EndSet;
  
  SetBegin(314);
  SetText(kResTypeUndefined,"Choose");
  SetText(kResTypeExistingPO,"Purchase Order");
  SetText(kResTypeMakeNewPO,"Back to Back Purchase Order");
//  SetText(3,"Production"); // Not done yet
  SetText(kResTypeStock,"#Stock#");
  SetText(kResTypeNextStockIn,"Next Purchase Order");
  EndSet;
  
  SetBegin(315);
  SetText(0,"During Period");
  SetText(1,"Before Period");
  EndSet;
  
  SetBegin(316);
  SetText(0,"Day");
  SetText(1,"Month");
  EndSet;
  
  SetBegin(317);
  SetText(0,"Fixed Price");
  SetText(1,"Running");
  EndSet;
  
  SetBegin(318);
  SetText(0,"Allow");
  SetText(1,"Do not allow");
  EndSet;
  
  SetBegin(319);
  SetText(0,"Item");
  SetText(1,"Modifiers"); // Item collection would have been my suggestion, but modifiers is a commonly used POS term...
  SetText(2,"Bar Menu");
  EndSet;
  
  SetBegin(320);
  SetText(kWindowStyleFirenze,"Firenze");
  SetText(kWindowStyleClassic,"Normal");
//  SetText(kWindowStyleSpartan,"Spartan");
//  SetText(kWindowStyleHelsinki,"Helsinki");
//  SetText(kWindowStyleAqua,"Aqua");
//  SetText(kWindowStyleBavaria,"Bavaria");
//  SetText(kWindowStyleMetal,"Metal");
  SetText(kWindowStyleMetalBlue,"Blue Metal");
  EndSet;
  
// Please don't translate the first string, as it is a special code (all StrSet works that way)
  StrSetBegin(321);
  StrSetText(";Personal","Personal");
  StrSetText(";Company","Company");
  EndStrSet;
  
  SetBegin(322);
  SetText(kExternalActTypeNone,"None");
  SetText(kExternalActTypePhoneCall,"Phone Call");
  EndSet;
  
  SetBegin(323);
  SetText(kPOSCommandsTypeQuantityAddOne,"Add 1");
  SetText(kPOSCommandsTypeCash,"Cash");
  SetText(kPOSCommandsTypeCreditCardSum,"Credit Card Sum");
  SetText(kPOSCommandsTypeDeleteRow,"Delete Row");
  SetText(kPOSCommandsTypeRebate,"Discount");
  SetText(kPOSCommandsTypeFinish,"Finish");
//  SetText(kPOSCommandsTypeLoyaltyPointsBonus,"Loyalty Bonus Points");
//  SetText(kPOSCommandsTypeLoyaltyPointsPayment,"Loyalty Bonus Points Payment");
  SetText(kPOSCommandsTypeLoyaltyCard,"Loyalty Card No.");
//  SetText(kPOSCommandsTypeLoyaltyPointsPayment,"Loyalty Card Payment");
  SetText(kPOSCommandsTypeReprintReceipt,"Reprint Receipt");
  SetText(kPOSCommandsTypeQuantity,"Quantity");
  SetText(kPOSCommandsTypeQuantityAndItem,"Quantity Item");
  SetText(kPOSCommandsTypeSalesAssistant,"Sales Assistant");
  SetText(kPOSCommandsTypeVolumetricBarCodeScan,"Scan Dynamic Barcode");
  SetText(kPOSCommandsTypeSerialNr,"Serial No.");
  SetText(kPOSCommandsTypeQuantitySubOne,"Subtract 1");
  SetText(kPOSCommandsTypeVoidRow,"Void Item");
//  SetText(3,"Repeat");
//  SetText(5,"Credit Card No.");
//  SetText(7,"YYMM");
//  SetText(8,"CCV");
//  SetText(10,"ID");
//  SetText(11,"Credit");
//  SetText(12,"Control");
//  SetText(13,"Account");
//  SetText(14,"Attention");
//  SetText(15,"Yes");
//  SetText(16,"Delete");
//  SetText(17,"Invalidate");
//  SetText(19,"Online");
//  SetText(20,"Logout");
//  SetText(21,"Finish and Open Summary Window");
  EndSet;
  
  SetBegin(324);
  SetText(kOpenTypeList,"List");
  SetText(kOpenTypeNew,"New Record");
  EndSet;

  SetBegin(325);
  SetText(0,"-");
  SetText(1,"Discarded");
  EndSet;
  
  SetBegin(326);
  SetText(kCourseEventPaticipantStatusPaying,"Paying");
  SetText(kCourseEventPaticipantStatusCancelled,"Cancelled");
  SetText(kCourseEventPaticipantStatusNotPaying,"Non Paying");
  SetText(kCourseEventPaticipantStatusStandby,"Stand by");
  SetText(kCourseEventPaticipantStatusPreliminary,"Preliminary Booking");
  EndSet;

  SetBegin(327);
  SetText(kInternalServerUndefined,"-");
  SetText(kInternalServerHansaEInvocing,"HANSA E-Invoices");  
  SetText(2,"ELMA E-Invoices, Finland");
  SetText(3,"STRALFORS E-Invoices, Sweden");
  SetText(4,"ITELLA E-Invoices, Estonia");
  SetText(5,"Danish E-Invoices");
  SetText(6,"SEB E-Payments, Estonia");
  SetText(7,"HANSA E-Payments, Estonia");
  SetText(8,"SAMPO E-Payments, Estonia");
  SetText(9,"Krediidinfo, Estonia");
  SetText(10,"Lursoft, Latvia");
  SetText(11,"Post Coder, UK");
  SetText(12,"SMS Vianett, Norway");
  SetText(13,"SMS ASPSMS, Switzerland");
//  SetText(14,"Commidea Credit Card Payments, UK");
  SetText(15,"SEB Direct Debit, Estonia");
  SetText(16,"CyberSource Credit Card Payments, UK");
  SetText(17,"Electronic #VAT# Declarations, UK");
  SetText(18,"Lookup");
  SetText(19,"National Bank Currency Exchange Rates");
  SetText(20,"Samport Credit Card Payments, Sweden");
  SetText(21,"Business Check Credit History and Address Lookup, Sweden");
//  SetText(20,"Payex Credit Card Payments, Norway");
  SetText(22,"AFIP, Argentina");
  SetText(23,"EDB E-Invoices, Sweden");
  SetText(24,"Logiq E-Invoices, Norway");
  SetText(25,"SwedBank E-Payments, Estonia");
  SetText(26,"TIETO Svefaktura, Sweden");
  SetText(27,"EDX Signature, Mexico");
  SetText(28,"NETS, Norway");
  SetText(29,"ELMA E-Invoices New, Finland");
  SetText(30,"SMS Lattelecom, Latvia");
  SetText(31,"Email Validation");
  SetText(32,"APIX, Finland");
  SetText(kInternalServerAPIXNOR,"APIX, Norway");
  SetText(kInternalServerAPIXSWE,"APIX, Sweden");
  SetText(kInternalServerCompelloNOR,"Compello, Norway");
  SetText(kInternalServerConversionToStandard,"Conversion to Standard Accounts");
  SetText(kInternalServerDistimo,"CS - Downloads Server");
  SetText(kInternalServerMarketplace,"Marketplace Live");
  SetText(kInternalServerMarketplaceTest,"Marketplace Test");
  SetText(kInternalServerMarketplaceDev,"Marketplace Development");
  SetText(kInternalServerMarketplaceUpdate,"Marketplace Update");
  SetText(kInternalServerDataWarehouse,"DataWarehouse");
  SetText(kInternalServerStandardAccounts,"Website - Standard Accounts");
  SetText(kInternalServerZZISlovenia,"ZZI E-invoicing");
  SetText(kInternalServerPublishing,"Publishing");
  SetText(kInternalServerSMSSONERAFIN,"SMS Sonera, Finland");
  SetText(kInternalServerConversionToStandard,"Conversion to Standard Accounts");
  SetText(kInternalServerStandardID,"Standard ID");
  SetText(kInternalServerGooglePlayProds,"Google Play Prod. History");
  SetText(kInternalServeriTunesProds,"iTunes Prod. History");
  SetText(kInternalServerForum,"Forum");
  SetText(kInternalServerNavigationBannerLive,"Navigation Banner Server Live");
  SetText(kInternalServerNavigationBannerTest,"Navigation Banner Server Test");
  EndSet;

  SetBegin(328);
  SetText(0,"-");
  SetText(1,"Package");
  SetText(2,"Extra Clicks");
  SetText(3,"First Page");
  SetText(4,"Extra Pages");
  SetText(5,"Default Priority Postage");
  SetText(6,"Heavy Priority Postage");
  SetText(7,"Default Economy Postage");
  SetText(8,"Heavy Economy Postage");
  SetText(9,"Default Economy Postage EU");
  SetText(10,"Heavy Economy Postage EU");
  SetText(11,"Default Economy Postage not EU");
  SetText(12,"Heavy Economy Postage not EU");
  SetText(13,"First Page Storage");
  SetText(14,"Extra Pages Storage");
  SetText(15,"Storage and Console");
  SetText(16,"XML e-Invoice");
  SetText(17,"Email Invoice");
  EndSet;
  
  SetBegin(329);
  SetText(kWantedStatusStop,"Don't Run");
  SetText(kWantedStatusRun,"Run");
  SetText(kWantedStatusOnDemand,"On-demand");
  SetText(kWantedStatusMaintenence,"Maintenence Run");
  SetText(kWantedStatusManual,"Manual");
  SetText(kWantedStatusImportBackup,"Import Backup");
  SetText(kWantedStatusUpdateVersion,"Update Version");
  SetText(kWantedStatusCreateServer,"Create Server");
  SetText(kWantedStatusMoveServer,"Move Server");
  SetText(kWantedStatusRestart,"Restart");
  SetText(kWantedStatusExportDatabase,"Export Database");
  SetText(kWantedStatusExportRegister,"Export Register");
  SetText(kWantedStatusCreateStartedServer,"Create Running Server");
  SetText(kWantedStatusImportBackupAndRun,"Import Backup and Run");
  SetText(kWantedStatusLaunchReserveSystem,"Launch Reserve System");
  SetText(kWantedStatusExportCompany,"Export Company");
  SetText(kWantedStatusLaunchTestSystem,"Launch Test System");
  SetText(kWantedStatusLaunchUpdateSystem,"Launch Update System");
  SetText(kWantedStatusResetToBackup,"Reset to Backup");
  SetText(kWantedStatusRunUnjournaled,"Run Without Journaling");
  SetText(kWantedStatusChangeVersion,"Change Version");
  SetText(kWantedStatusForceStop,"Don't Run (Forced)");
  EndSet;
  
  SetBegin(330);
  SetText(typFinancials,"Hansa Financials");
  SetText(typClassic,"Classic"); /* or is it Hansa Classic? */
  SetText(typProfessional,"Professional");
  SetText(typHansaRaama,"HansaRaama");
  SetText(typFirstOffice,"FirstOffice");
  SetText(typClassicLit,"Classic Lit"); /* Lithuanian? */
  SetText(typRiigiTarkvara,"Riigi Tarkvara");
  SetText(typOffice2,"Office/2");
  SetText(typOffice2TB,"Office/2 TB");
  SetText(typFirstOfficeSmall,"FirstOffice Small");
  SetText(typFirstOfficeCurrency,"FirstOffice Currency");  /* Not valid as a type */
  SetText(typFirstContact,"HansaWorld CRM");
  SetText(typOffLine,"Off Line"); /* ??? */
  SetText(typFirstOfficeASP,"FirstOffice ASP");
  SetText(typHansaWorld,ProductName & " Standard ERP");
  SetText(typRussianStandard,ProductName & " RussianStandard");
  SetText(typHansaWorldSMB,"HansaWorld Express");
  SetText(typFirstOfficePro,"FirstOffice Professional");
  SetText(typBusinessPhone,"Business Communicator");
  SetText(typBusinessOrganizer,"Business Organiser");
  SetText(typBooks,"Books"); //?? CHECKBOOKSHAL
  SetText(typBooksPro,"Books Professional"); //?? CHECKBOOKSHAL
  SetText(typBooksProAdv,"Books Professional Advanced"); //?? CHECKBOOKSHAL
  SetText(typBooksJobCost,"Books Job Costing"); //?? CHECKBOOKSHAL
  SetText(typBooksAcc,"Books Accounting"); //?? CHECKBOOKSHAL
  SetText(typBooksPOS,"Books POS"); //?? CHECKBOOKSHAL
  SetText(typCRMBasic,"HansaWorld CRM Basic");
  SetText(typStandardOrganizer,"Standard Organizer");
  SetText(typStandardCommunicator,"Standard Communicator");
  SetText(typStandardCRM,"Standard CRM");
  SetText(typStdAccounts,"Standard Accounts");
  SetText(typStdBar,"Standard Bar");
  SetText(typStdContracts,"Standard Contracts");
  SetText(typStdHotel,"Standard Hotel");
  SetText(typStdInvoicing,"Standard Invoicing");
  SetText(typStdNominalLedger,"Standard #Nominal Ledger#");
  SetText(typStdProjects,"Standard Projects");
  SetText(typStdRentals,"Standard Rentals");
  SetText(typStdRestaurant,"Standard #Restaurant#");
  SetText(typStdShop,"Standard Shop");
  SetText(typStdStock,"Standard #Stock#");
  SetText(typStdConferences,"Standard Conferences");
  SetText(typStdDocuments,"Standard Documents");
  SetText(typStdExpenses,"Standard Expenses");
  SetText(typStdHR,"Standard HR");
  SetText(typStdCRMServer,"Standard CRM Server");
  SetText(typStdAccountsServer,"Standard Accounts Server");
  SetText(typStdERP,"Standard Unused");
  SetText(typSberbankInvoices,"Sberbank Invoices");
  SetText(typSberbankStock,"Sberbank Stock");
  SetText(typSberbankStockandCRM,"Sberbank Stock and CRM");
  SetText(typAdmiral,"Admiral");
  SetText(typStandardERP,ProductName & " Standard ERP");
  SetText(typOBSHousing,"OBS Housing");
  SetText(typTBAS,"Transaction Based Adaptive System");
  EndSet;
  
  SetBegin(331);
  SetText(kHostingTypeUnknown,"Unknown");
  SetText(kHostingTypeAmazon,"Amazon EC2");
  SetText(kHostingTypeAzure,"Windows Azure");
  SetText(kHostingTypeRackspace,"Rackspace");
  SetText(kHostingTypeGoogle,"Google Compute Engine");
  SetText(kHostingTypeSoftLayer,"IBM SoftLayer");
  EndSet;

  SetBegin(333);
  SetText(0,"UNKNOWN");
  SetText(1,"ONLINE");
  SetText(2,"UNSTABLE");  
  SetText(3,"BUSY");  
  SetText(4,"OFFLINE");  
  SetText(5,"DISABLED");  
  EndSet;
  
  // SetBegin(102); Is moved to Seteng2.hal
    
  SetBegin(334);
  //SetText(M4NoType,"");
  SetText(M4InvalidType,"-");
  SetText(M4Str,"string");
  SetText(M4Val,"decimal value");
  SetText(M4Chk,"checkbox");
  //SetText(M4Rad,"");
  SetText(M4Long,"long integer");
  SetText(M4Date,"date");
  SetText(M4DateTime,"date time");
  //SetText(M4DVal,"");
  //SetText(M4CVal,"");
  SetText(M4Int,"integer");
  //SetText(M4xxx1,"");
  //SetText(M4Label,"");
  //SetText(M4Bool,"");
  //SetText(M4Prcnt,"");
  //SetText(M4TVal,"");
  //SetText(M4MVal,"");
  SetText(M4UStr,"uppercase string");
  SetText(M4Mark,"check mark");
  //SetText(M4NLong,"");
  //SetText(M41Val,"");
  //SetText(M40Val,"");
  //SetText(M4Period,"");
  //SetText(M4UVal,"");
  //SetText(M4longDateTime,"");
  SetText(M4Star,"password input");
  //SetText(M4longDate,"");
  SetText(M4Code,"code");
  SetText(M4AppCode,"appcode");
  //SetText(M423Val,"");
  SetText(M4Set,"integer set");
  SetText(M4Matrix,"matrix");
  //SetText(M4StatMat,"");
  //SetText(M4XStr,"");
  //SetText(M4NegVal,"");
  //SetText(M4Rate,"");
  //SetText(M45Val,"");
  //SetText(M4UPrcnt,"");
  //SetText(M4Dummy,"");
  SetText(M4StrSet,"string set");
  SetText(M4TextField,"text field");
  SetText(M4Blob,"blob");
  //SetText(M4CStr,"");
  SetText(M4Time,"time");
  //SetText(M4STime,"");
  //SetText(M4Pict,"");
  //SetText(M4RLink,"");
  //SetText(M4PrcStr,"");
  //SetText(M4String,"");
  //SetText(M4Qty,"");
  SetText(M4CalPeriod,"calendar period");
  EndSet;
  
  SetBegin(335);
  SetText(ctBPadCE,"B-Pad");
  SetText(ctiPhone,"iPhone");
  SetText(ctNokiaE90,"Nokia E90"); // Could be called Series 60 Wide Screen
  SetText(ctNormal,"PC");
  SetText(ctSeries60,"Series 60");
  SetText(ctSeries60ss,"Series 60 Small Screen"); // 172 * 208
  SetText(ctSeries80,"Series 80");
  SetText(ctSeries90,"Series 90");
  SetText(ctWindowsCE,"Windows CE");
  SetText(ctWindowsCELandscape,"Windows CE Landscape");
  SetText(ctAndroidPhone,"Android Phone");
  SetText(ctAndroidTab,"Android Tab");
  SetText(ctWindows8Tab,"Windows Tablet");
  EndSet;
  
  SetBegin(336);
  SetText(k4PushButton,"push button");
  SetText(k4CheckBox,"check box");
  SetText(k4RadioButton,"radio button");
  //SetText(k4VScrollBar,"vertical scroll bar");
  //SetText(k4WideScrollBar,"wide scroll bar");
  SetText(k4HTab,"tile");
  //SetText(k4HTabSouth,"horizontal tab (south)");
  //SetText(k4PullDownMenu,"pull down menu");
  //SetText(k4LeftBrowse,"browse left button");
  //SetText(k4RightBrowse,"browse right button");
  //SetText(k4SegmentButton,"segment button");
  //SetText(k4ListHeader,"list header");
  SetText(k4ButtonFrame,"button frame");
  //SetText(k4DropDownMenu,"drop down menu");
  //SetText(k4NewTextArea,"text area");
  //SetText(k4ButtonIcon,"button icon");
  SetText(k4EditField,"edit field");
  //SetText(k4StatusField,"status field");
  // SetText(k4ResourceManager, -- not yet
  // SetText(k4ResourceRow, -- not yet
  //SetText(k4ResourceBox,"resource box");
  SetText(k4Matrix,"matrix");
  //SetText(k4TimeBoxes,"time boxes");
  //SetText(k4Calendar,"calendar");
  SetText(k4RecordList,"record list");
  SetText(k4RecordColumn,"record column");
  SetText(k4MatrixColumn,"matrix column");
  SetText(k4AttachDisplay,"attachments");
  SetText(k4Report,"report");
  SetText(k4VTab,"flip");
  SetText(k4SoundTool,"sound tool");
  SetText(k4Locationer,"location tool");
  SetText(k4StaticText,"static text");
  EndSet;
  
  SetBegin(337);
  SetText(AdjLeft,"Left");
//  SetText(AdjCenter,"Center");  // not implemented
  SetText(AdjRight,"Right");
  EndSet;
  
  SetBegin(338);
  SetText(CGother,"other");
  SetText(CGmlist,"mlist");
  SetText(CGslist,"slist");
  SetText(CGview,"view");
  SetText(CGRepW,"report");
  SetText(CGToolW,"tool");
  SetText(CGRcW,"rcw");
  SetText(CGEcW,"ecw");
  SetText(CGSbl,"sblock");
  SetText(CGHbl,"hblock");
  SetText(CGMnt,"mnt");
  SetText(CGDocW,"doc");
  SetText(CGEc2W,"ec2w");
  SetText(CGIcW,"icw");
  SetText(CGrlist,"rlist");
  EndSet;
  
  SetBegin(339);
  SetText(Normal,"normal");
  SetText(St_i,"edit on insert");
  SetText(ViewOnly,"view only");
  SetText(NewLOnly,"add lines only");
  EndSet;
  
  SetBegin(340);
  SetText(kFieldPosHeader,"header");
  SetText(kFieldPosRows,"row");
  EndSet;
  
  SetBegin(341);
  SetText(kProgramModeLocal,"Local");
  SetText(kProgramModeClient,"Client");
  SetText(kProgramModeLiveSync,"Live Sync");
  EndSet;
  
  SetBegin(342);
  SetText(0,"Default (binder)");
  SetText(701,"Binder");
  SetText(20409,"Billboard");
  SetText(993,"Birds");
  SetText(503,"Calendar");
  SetText(991,"Car");
  SetText(969,"Coins");
  SetText(997,"Cooking");
  SetText(718,"Document");
  SetText(29017,"#Favourites#");
  SetText(29021,"Folder");
  SetText(999,"Forum");
  SetText(967,"House");
  SetText(20501,"Mailbox");
  SetText(4017,"Measure");
  SetText(1003,"Navigate");
  SetText(20401,"Newspaper");
  SetText(805,"Key");
  SetText(20403,"Library");
  SetText(971,"Person");
  SetText(1037,"Phone");
  SetText(1005,"#Restaurant#");
  SetText(989,"Salad");
  SetText(985,"Search");
  SetText(29039,"Stocks");
  SetText(1041,"Todo");
  SetText(625,"Tools");
  SetText(29043,"Timesheets");
  EndSet;
  
  SetBegin(343);
  SetText(kAttachStorageSerNr,"SerNr");
  SetText(kAttachStorageUUID,"UUID");
  SetText(kAttachStorageInline,"Inline");
  EndSet;
  
  StrSetBegin(344); //Keep in sync with set 632
  StrSetText("ARB","Arabic");
  StrSetText("AGO","Portuguese (Angola)");
  StrSetText("AUS","English (Australia)");
  StrSetText("BRA","Portuguese (Brazil)");
  StrSetText("CHI","Chinese");
  StrSetText("CZE","Czech");
  StrSetText("CRO","Croatian");
  StrSetText("DAN","Danish");
  StrSetText("ENG","English (UK)");
  StrSetText("USA","English (US)");
  StrSetText("CAN","English (Canada)");
  StrSetText("IND","English (India)");
  StrSetText("KEE","English (Kenya)");
  StrSetText("NZE","English (New Zealand)");
  StrSetText("PHE","English (Philippines)");
  StrSetText("SGP","English (Singapore)");
  StrSetText("SAF","English (South Africa)");
  StrSetText("ZWE","English (Zimbabwe)");
  StrSetText("ESP","Spanish");
  StrSetText("USS","Spanish (US)");
  StrSetText("EST","Estonian");
  StrSetText("FIN","Finnish");
  StrSetText("FRA","French");
  StrSetText("FRC","French (Canada)");
  StrSetText("FAR","Farsi");
  StrSetText("GER","German");
  StrSetText("HEB","Hebrew");
  StrSetText("HUN","Hungarian");
  StrSetText("ITA","Italian");
  StrSetText("LAT","Latvian");
  StrSetText("LIT","Lithuanian");
  StrSetText("MOZ","Portuguese (Mozambique)");
  StrSetText("NOR","Norwegian");
  StrSetText("POL","Polish");
  StrSetText("POR","Portuguese");
  StrSetText("ROM","Romanian");
  StrSetText("RUS","Russian");
  StrSetText("SER","Serbian");
  StrSetText("SWE","Swedish");
  StrSetText("SLO","Slovenian");
  StrSetText("SVK","Slovakian");
  StrSetText("UKR","Ukranian");
  StrSetText("VIE","Vietnamese");
  StrSetText("","Other");
  EndStrSet;
  
  SetBegin(345);
  SetText(kEnablerFunctionDefault,"Package");
  SetText(kEnablerFunctionRegister,"SmartApp Register");
  SetText(kEnablerFunctionApp,"SmartApp Application");
  SetText(kEnablerFunctionAccess,"Access Type");
  SetText(kEnablerFunctionHALFile,"Attached File");
  SetText(kEnablerFunctionAdditionalSystem,"Additional System");
  EndSet;
  
  SetBegin(346);
  SetText(kIndexTypeNone,"None");
  SetText(kIndexTypeNormal,"Indexed");
  SetText(kIndexTypeCalendar,"In Calendar");
  EndSet;
  
  SetBegin(347);
  SetText(0,"-");
  SetText(1,"Box 1");
  SetText(2,"Box 2");
  SetText(3,"Box 3");
  SetText(4,"Box 4");
  SetText(5,"Box 5");
  SetText(6,"Box 6");
  SetText(7,"Box 7");
  SetText(8,"Box 8");
  SetText(9,"Box 9");
  EndSet;
  
  SetBegin(348);
  SetText(kWindowTypeNone,"-");
  SetText(kWindowTypeRecordList,"Record List");
  SetText(kWindowTypeInspect,"Inspect");
  SetText(kWindowTypePaste,"Paste");
  SetText(kWindowTypeOther,"Other");
  EndSet;
  
  SetBegin(349);
  SetText(kRegOpInsert,"insert"); // can also be translated as "create" or "add"
  SetText(kRegOpUpdate,"update");
  SetText(kRegOpDrop,"drop"); // can also be "remove" or "delete"
  EndSet;
  
  SetBegin(350);
  SetText(0,"Own Account");
  SetText(1,"Will Pay For");
  EndSet;

  SetBegin(351);
  SetText(0,"All Activities");
  SetText(1,"Private Activities");
  SetText(2,"Public Activities");
  EndSet;
  
  SetBegin(352); //subset of set 1
  SetText(kAccessLevelNone,"None");
  SetText(kAccessLevelReadOnly,"Read");
  SetText(kAccessLevelFull,"Full");
  EndSet;
  
  SetBegin(353);
  SetText(kStructTypePage,"Page");
  SetText(kStructTypeFolder,"Folder");
  SetText(kStructTypeHALFunction,"Hal function");
  SetText(kStructTypeRedirect,"Redirect");
  SetText(kStructTypeRedirectToCountry,"Redirect to Country Sub Page");
  SetText(kStructTypeRedirectToPlatform,"Redirect to Platform specific sub page");
  SetText(kStructTypeContentHandlerApp,"Content Handler App");
  SetText(kStructTypeForumApp,"Forum App");
  SetText(kStructTypeItemBrowse,"Item Browse");
  SetText(kStructTypeShoppingBasket,"Shopping Basket");
  SetText(kStructTypeItemOrder,"Item Order");
  SetText(kStructTypeUniversityApp,"University App");
  SetText(kStructTypeProductImageApp,"Product Image App");
  SetText(kStructTypeWebshopApp,"Webshop App");
  SetText(kStructTypeASPApp,"ASP App");
  SetText(kStructTypeDownloadRegistration,"Download Registration Page");
  SetText(kStructTypeOnlineReservationApp,"Online Reservation App");
  SetText(kStructTypeMyAccountApp,"My Account App");
  SetText(kStructTypeProductionPlan,"Production Plan");
  if (TestEnablerFile("EnSubscriptionsApp")) then begin
    SetText(kStructTypeSubscriptionsApp,"Subscriptions App");
  end;
  SetText(1000,"Page - only for Partners");
  SetText(kStructTypeAvailableApps,"Available Apps on Web");
  SetText(kStructTypeFile,"File");
  EndSet;

  SetBegin(354);
  SetText(0,"Before");
  SetText(1,"Content");
  SetText(2,"After");
  SetText(3,"HTML Head");
  EndSet;

  SetBegin(355);
  SetText(kElementTypePlainHTML,"Plain HTML");
  SetText(kElementTypeHALFunction,"HAL Function");
  SetText(kElementTypeWebMenu,"Web Menu");
  SetText(kElementTypeLoginControl,"Login Control");
//  SetText(kElementTypeShoppingBasket,"Shopping basket");
//  SetText(kElementTypeRegisterForm,"Register form");
//  SetText(kElementTypeEditCustomerDetailsForm,"Edit customer details form");
//  SetText(kElementTypeItemBrowse,"Item browse");
//  SetText(kElementTypeShoppingBasketStatus,"Shopping basket status");
  SetText(kElementTypeLanguageBox,"Language Switching Combo Box");
  SetText(kElementTypeLink,"Link");
  SetText(kElementTypeImage,"Image");
  SetText(kElementTypeLoginState,"Show Login State");
  SetText(kElementTypeCountryName,"Country Name");
//  SetText(kElementTypeShoppingBasketRecommended,"Shopping basket - recommended items");
  SetText(kElementTypeContentList,"Content List");
  SetText(kElementTypeContactUsForm,"Contact Us Form");
  SetText(kElementTypeRegisterNewCustomerForm,"Register New Customer Form");
  SetText(kElementTypeForgotPasswordForm,"Forgot Password Form");
  SetText(kElementTypeWebShopAddToBasketLink,"WebShop - Add to Basket Link");
  SetText(kElementTypeWebShopCheckoutLink,"WebShop - Checkout Link");
  //SetText(kElementTypeWebShopShoppingBasketStatus,"WebShop - Shopping basket status");
  SetText(kElementTypeUniversityWebTestList,"University - Show Web Test List");
  SetText(kElementTypeWebShopProductCategoryTree,"WebShop - Product Category Tree");
  SetText(kElementTypeLiveChat,"Live Chat");
  SetText(kElementTypeLoggedInUserName,"Logged In Customer/Person Name");
  SetText(kElementTypeCreateMailForm,"Create Mail Form");
  SetText(kElementTypeWebClientWindow,"Web Client Window");
  SetText(kElementTypeProductSearchForm,"WebShop - Search Item Form");
  SetText(kElementTypeWebShopShowField,"WebShop - Show Field");
  SetText(kElementTypeWebClientLink,"Webclient Link");
  SetText(kElementTypeForumBreadCumbs,"Forum Breadcrumbs");
  //SetText(kElementTypeWebShopPaymentMethodButtons,"WebShop - Payment Method Buttons");
  EndSet;
    
  SetBegin(356);
  SetText(-1,"Unknown");
  SetText(0,"Element");
  SetText(1,"Content");
  SetText(2,"Product");
  SetText(3,"Component");
  SetText(4,"Page");
  EndSet;

  SetBegin(357);
  SetText(0,"Before");
  SetText(1,"Content");
  SetText(2,"After");
  EndSet;

  SetBegin(358);
  SetText(kVATTypeAssets,"Assets #VAT#");
  SetText(kVATTypeAssetsExempt,"Assets Exempt #VAT#");
  SetText(kVATTypeConsumptionTax,"Consumption Tax");
  SetText(kVATTypeExempt,"Exempt #VAT#");
  SetText(kVATTypeExport,"Export #VAT#");
  SetText(kVATTypeExemptInsideEU,"Exempt #VAT# #Inside EU#");
  SetText(kVATTypeExemptwithInput,"Exempt #VAT# without input #VAT#");
  SetText(kVATTypeExempt3WayDeliveryInsideEU,"Exempt #VAT# 3-way delivery #Inside EU#");
  SetText(kVATTypeExportDeductable,"Export with Deductible #VAT#");
  SetText(kVATTypeGoods,"Goods #VAT#");
  SetText(kVATTypeGrossIncomePerception,"Gross Income Perception");
  SetText(kVATTypeICETax,"ICE Tax");
  SetText(kVATTypeImport,"Import #VAT#");
  SetText(kVATTypeIncomePerceptions,"Income Perceptions");
  SetText(kVATTypeInputTax,"Input Tax");
  SetText(kVATTypeISRWithholding,"ISR Withholding");
  SetText(kVATTypeLevy,"Levy");
  SetText(kVATTypeLumpSumCompensation,"Lump Sum Compensation");

  SetText(kVATTypeNoVAT,"No #VAT#");
  SetText(kVATTypeNonDeductable,"Non-Deductible #VAT#");
  SetText(kVATTypeNormal,"Normal");
  SetText(kVATTypeNormalWithInternalTaxes,"Normal with Internal Taxes");
  SetText(kVATTypeNormalWithVATPerceptions,"Normal with #VAT# Perceptions");
  SetText(kVATTypePurchasesWithInternalTaxes,"Purchases, Internal Taxes");
  SetText(kVATTypeRealEstate,"Real Estate #VAT#");
  SetText(kVATTypeRealEstateExempt,"Real Estate Exempt #VAT#");
  SetText(kVATTypeReversed,"Reversed");
  SetText(kVATTypeSaleswithInstallation,"Sales with Installation");
  SetText(kVATTypeSelfTaxingInsideImport,"Self-taxing Import");
  SetText(kVATTypeSelfTaxingInsideEU,"Self-taxing #Inside EU#");
  SetText(kVATTypeSelTaxingServicesEU,"Self-taxing Services #Inside EU#");
  SetText(kVATTypeSelfTaxingwithLocalVATID,"Self-taxing with local #VAT# ID");
  SetText(kVATTypeServices,"Services #VAT#");
  SetText(kVATTypeTaxedImport,"Taxed Import");
  SetText(kVATTypeTransitSalesInsideEU,"Transit Sales #Inside EU#");
  SetText(kVATTypeVATPerceptions,"#VAT# Perceptions");
  SetText(kVATTypeWithholding,"Withholding");
  EndSet;

  SetBegin(359);
  SetText(kStockTypePurchased,"Purchased");
  SetText(kStockTypeConsignment,"Consignment");
  EndSet;

  SetBegin(360);
  SetText(0,"-");
  SetText(1,"Tax Registered");//Responsable Inscripto
//  SetText(2,"Tax Not Registered");//Responsable no Inscripto
  SetText(3,"Exempt");//Exento
  SetText(4,"Not Responsible");//No Responsable
  SetText(5,"End Consumer");//Responsable final
//  SetText(6,"Responsible not Registered, Fixed Assets sales");//Responsable no Inscripto enta de bienes de uso
  SetText(7,"Responsible Professional");//Responsable monotributo
  SetText(8,"Responsible Social Professional");    //Monotributista social
  SetText(9,"Eventual Small Contributor");    //Pequeno contribuyene eventual
  SetText(10,"Eventual Small Social Contributor");    //Pequeno contribuyene eventual social
  SetText(11,"No Category");//No categorizado
  EndSet;

  SetBegin(361);
  SetText(kRecordStatusNone,"-");
  SetText(kRecordStatusInvalidated,"Invalidated");
  SetText(kRecordStatusLost,"Lost");
  SetText(kRecordStatusNotUsed,"Not Used");
//  if (HasLocalization("PRT")) then begin
    SetText(kRecordStatusManual,"Manual");
    SetText(kRecordStatusRecovered,"Recovered from Damaged Database");
//  end;
  EndSet;

  SetBegin(362);
  SetText(0,"-");
  SetText(kQCProdVc,"Production");
  SetText(kQCProdOperationVc,"Production Operation");
  SetText(kQCSDVc,"#Stock Depreciation#");
  SetText(kQCPUVc,"Goods Receipts");
  SetText(kQCRetVc,"Return Goods");
  SetText(kQCRetPUVc,"Return Goods to #Supplier#");
  EndSet;

  SetBegin(363);
  SetText(0,"-");
  SetText(kQCTestWeight,"Weight");
  SetText(kQCTestNetWeight,"Net Weight");
  SetText(kQCTestVolume,"Volume");
  SetText(kQCTestWidth,"Width");
  SetText(kQCTestHeight,"Height");
  SetText(kQCTestDepth,"Depth");
  SetText(kQCTestDensity,"Density");
  SetText(kQCTestAlcPrc,"Alcohol %");
  SetText(kQCTestUserVal1,"User Defined Value 1");
  SetText(kQCTestUserVal2,"User Defined Value 2");
  SetText(kQCTestUserVal3,"User Defined Value 3");
  EndSet;
  
  SetBegin(364);
  SetText(kAutoNumberingNone,"None");
  SetText(kAutoNumberingNormal,"Normal");
  EndSet;
  
  SetBegin(365);
  SetText(0,"From Operations Menu only");
  SetText(1,"From Operations Menu and When OKing Records");
  EndSet;
  
  SetBegin(366);
  SetText(kMSSQL,"Microsoft SQL Server");
  SetText(kOracle,"Oracle");
  //SetText(kIngres,"Ingres");
  //SetText(kDB2,"DB/2");
  SetText(kPostgreSQL,"PostgreSQL");
  EndSet;
    
  SetBegin(367);
  SetText(kStatusNone," ");
  SetText(kStatusConfigInError,"Configuration Error");
  SetText(kStatusStopped,"Not Running");
  SetText(kStatusRunning,"Running");
  SetText(kStatusStopping,"Stopping");
  SetText(kStatusStarting,"Starting");
  SetText(kStatusImportingBackup,"Importing Text Backup");
  SetText(kStatusDeleted,"Deleted");
  SetText(kStatusUpdatingVersion,"Updating Version");
  SetText(kStatusMoving,"Moving");
  SetText(kStatusCreated,"Created");
  SetText(kStatusCreating,"Creating");
  SetText(kStatusMaintenance,"Running (Maintenance)");
  SetText(kStatusExportingDatabase,"Exporting Database");
  SetText(kStatusExportedDatabase,"Export Finished");
  SetText(kStatusImportedBackup,"Import Finished");
  SetText(kStatusExportingRegister,"Exporting Register");
  SetText(kStatusExportedRegister,"Export Finished");
  SetText(kStatusNodeUnreachable,"Node Unreachable");
  SetText(kStatusExportingCompany,"Exporting Company");
  SetText(kStatusExportedCompany,"Export Finished");
  SetText(kStatusRunningTest,"Running (Test)");
  SetText(kStatusRunningReserve,"Ready (Reserve)");
  SetText(kStatusRunningPreparingTest,"Creating (Test)");
  SetText(kStatusRunningUpdate,"Ready (Update)");
  SetText(kStatusRunningPreparingUpdate,"Creating (Update)");
  SetText(kStatusRunningPendingStop,"Pending Restart");
  SetText(kStatusRunningPreparingReserve,"Creating (Reserve)");
  EndSet;
  
  SetBegin(368);
  SetText(0,"Increasing #Instalment# - Decreasing Interest");
  SetText(1,"Same #Instalment# - Decreasing Interest");
  SetText(2,"Same #Instalment# - Same Interest");
//  SetText(2,"Using Specific #Instalment# Record");
  EndSet;

  SetBegin(369); 
  SetText(0,"Unknown");
  SetText(1,"Webshop");
  SetText(2,"University");
  SetText(3,"Online Reservation");
  EndSet;
  
  SetBegin(370);
  SetText(0,"None required");
  SetText(1,"Exactly one");
  SetText(2,"At least one");
  SetText(3,"At most one");
  SetText(4,"All or none");
  EndSet;

  SetBegin(371);
  SetText(0,"Included");
  SetText(1,"Mandatory");
  SetText(2,"Optional");
  SetText(3,"Optional (Recommended)");
  EndSet;

  SetBegin(372);
  SetText(0,"-");
  SetText(1,"Choose least expensive");
  SetText(2,"Choose most expensive");
  EndSet;

  SetBegin(373);
  SetText(0,"One Time");
  SetText(1,"Monthly Fee");
  SetText(2,"#Instalment#");
  SetText(3,"Interest");
  EndSet;
  
  SetBegin(374);
  SetText(0,"One Time");
  SetText(1,"Monthly Fee");
  EndSet;
  
  SetBegin(375);
  SetText(0,"Full Access");
  SetText(1,"No Access");
  EndSet;
  
  SetBegin(376);
  SetText(0,"halcust");
  SetText(1,"halpatch");
  EndSet;
  
  SetBegin(377);
  SetText(0,"Only in Server");
  SetText(1,"Both in Server and in Client");
  EndSet;
  
  SetBegin(379);
  SetText(0,"Only Page Title");
  SetText(1,"Site and Page Title");
  SetText(2,"Only Site Title");
  SetText(3,"Page and Site Title");
  EndSet;

  SetBegin(380);
  SetText(0,"Product");
//  SetText(1,"Group");
  EndSet;
    
  SetBegin(381);
  SetText(kReportParallelityNone,"Not Parallel");
  SetText(kReportParallelitySingleThread,"Single thread Parallel");
  SetText(kReportParallelityMultiThread,"Multi threaded");
  EndSet;
    
  SetBegin(382);
  SetText(kDefaultCodepage,"Default");
  SetText(kISO88591,"ISO 8859-1 (Western Europe)");
  SetText(kISO88594,"ISO 8859-4 (Baltic)");
  SetText(kISO88595,"ISO 8859-5 (Cyrillic)");
  SetText(kISO885915,"ISO 8859-15 (western european with euro sign)");
  SetText(kcp1250,"Windows codepage 1250 (Central Europe)");
  SetText(kcp1251,"Windows codepage 1251 (Cyrillic)");
  SetText(kcp1252,"Windows codepage 1252 (Western Europe)");
  SetText(kcp1257,"Windows codepage 1257 (Baltic)");
  SetText(kKOI8R,"KOI8-R (Cyrillic)");
  EndSet;
  
  SetBegin(383);
  SetText(kCodeLevelSystem,"System");
  SetText(kCodeLevelCountry,"Country Specific");
  SetText(kCodeLevelIndustry,"Industry Specific");
  SetText(kCodeLevelSite,"Site Customization"); // Site means approx. "One Customer Site", could possibly be translated "Customer Specific"
  //SetText(kCodeLevelMax,"");
  EndSet;
  
  SetBegin(384);
  SetText(kUserDefRepColumnTypeCode,"Code");
  SetText(kUserDefRepColumnTypeComment,"Comment");
  SetText(kUserDefRepColumnTypeActuals,"Actuals");
  SetText(kUserDefRepColumnTypeColumnsSumup,"Columns Sumup");
  SetText(kUserDefRepColumnTypeBudget,"Budget");
  SetText(kUserDefRepColumnTypeRevBudget,"Revised Budget");
  SetText(kUserDefRepColumnTypePOCommitments,"Purchase Order Commitments");
  SetText(kUserDefRepColumnTypePUAccruals,"Goods Receipt Accruals");
  EndSet;
  
  SetBegin(385);
  SetText(kUserDefRepPeriodTypeSelectedPeriod,"Selected Period");
  SetText(kUserDefRepPeriodTypeMonth,"Month");
  SetText(kUserDefRepPeriodTypeYear,"Year");
  SetText(kUserDefRepPeriodTypeFiscalYearToDate,"Fiscal Year to Date");
  SetText(kUserDefRepPeriodTypeFiscalYear,"Fiscal Year");
  EndSet;

  SetBegin(386);
  SetText(0,"-");
  SetText(1,"Post Payment Withholding Tax");
  EndSet;

  SetBegin(387);
  SetText(0,"Due Date");
  SetText(1,"Inv. Date");
  SetText(2,"Rsrv. Date");
  EndSet;

  SetBegin(388);
  SetText(0,"Discount");
  SetText(1,"Markup %");
  SetText(2,"Markup");
  EndSet;

  SetBegin(389);
  SetText(0,"Pay. Mode");
  SetText(1,"Modifier");
  EndSet;

  SetBegin(390);
  SetText(kInvoiceRowTypeCashPayment,"Cash");
  SetText(kInvoiceRowTypeCreditCardPayment,"Credit Card");
//  SetText(kInvoiceRowTypeCreditCardPayment,"Debit Card");
  SetText(kInvoiceRowTypeGiftVoucherPayment,"Gift Voucher");
  SetText(kInvoiceRowTypeChequePayment,"#Cheque#");
  SetText(kInvoiceRowTypeLoyaltyPointsPayment,"Loyalty Points");
  EndSet;

  SetBegin(391);
  SetText(0,"Not Confirmed");
  SetText(1,"Confirmed");
  EndSet;

  SetBegin(392);
  SetText(0,"Specify Day");
  SetText(1,"Monday");
  SetText(2,"Tuesday");
  SetText(3,"Wednesday");
  SetText(4,"Thursday");
  SetText(5,"Friday");
  SetText(6,"Saturday");
  SetText(7,"Sunday");
  EndSet;
  
  SetBegin(393);
  SetText(0,"Default");
  SetText(1,"No Limited Access Control");
  EndSet;

  SetBegin(394);
  SetText(kUnknownOS,"Unknown");
  SetText(kAnyOS,"Any OS");
  SetText(kOSMacOSX,"Mac OS X");
  SetText(kOSWindows98,"Windows 98");
  SetText(kOSWindowsXP,"Windows 2K/XP/Vista");
  SetText(kOSMacOS9,"Mac OS 9");
  SetText(kOSLinux,"Linux");
  SetText(kOSWindowsCE,"Windows CE");
  SetText(kOSSymbian,"Symbian");
  SetText(kOSAndroid,"Android");
  EndSet;

  StrSetBegin(395);
  StrSetText("","All Products");
  StrSetText("0","Hansa Financials");
  StrSetText("1","Classic"); /* or is it Hansa Classic? */
  StrSetText("2","Professional");
  StrSetText("3","HansaRaama");
  StrSetText("4","FirstOffice");
  StrSetText("5","Classic Lit"); /* Lithuanian? */
  StrSetText("6","Riigi Tarkvara");
  StrSetText("7","Office/2");
  StrSetText("8","Office/2 TB");
  StrSetText("9","FirstOffice Small");
  StrSetText("10","FirstOffice Currency");  /* Not valid as a type */
  StrSetText("11","First Contact");
  StrSetText("12","Off Line"); /* ??? */
  StrSetText("13","FirstOffice ASP");
  StrSetText("14","HansaWorld Standard ERP");
  StrSetText("15","HansaWorld Express");
  StrSetText("16","FirstOffice Professional");
  StrSetText("17","Business Communicator");
  StrSetText("18","Business Organiser");
  StrSetText("19","SmartApps");
  StrSetText("67","Russian Standard");
  EndStrSet;
  
  SetBegin(396);
  SetText(0,"Default (Cost)");
  SetText(1,"Original Sales Price");
  SetText(2,"Actual Sales Price");
  EndSet;

  StrSetBegin(397);
  StrSetText("All","All"); 
  StrSetText("RestAccVc","Bar Tabs"); 
  StrSetText("IVVc","Invoices"); 
  StrSetText("QTVc","Quotations"); 
  StrSetText("ORVc","Orders"); 
  StrSetText("IVCashVc","POS Invoices"); 
  EndStrSet;

  SetBegin(398);
  SetText(kRoundingStepNone,"no step");
  SetText(kRoundingStep5,"5");
  SetText(kRoundingStep25,"2.5");
  EndSet;
  
  SetBegin(399);
  SetText(kRoundingModeHalfUp,"half up");
  SetText(kRoundingModeHalfDown,"half down");
  SetText(kRoundingModeToEven,"to even");
  SetText(kRoundingModeToOdd,"to odd");
  SetText(kRoundingModeTruncate,"truncate");
  EndSet;
  
  SetBegin(400);
  SetText(kRoundingDirectionToFromPosInf,"up is always positive");
  SetText(kRoundingDirectionToFromZero,"up is away from zero");
  EndSet;
  
  SetBegin(401); 
  SetText(kWebAccessUnknown,"Unknown");
  SetText(kWebAccessElement,"Element");
  SetText(kWebAccessStructure,"Structure");
  SetText(kWebAccessHansaManualsPage,"HansaManuals");
  SetText(kWebAccessMasterGlobe,"Click Globe");
  SetText(kWebAccessMasterHelp,"Click Help");
  SetText(kWebAccessMasterPay,"Click PAY");
  SetText(kWebAccessMasterBannner,"NC Banner: Clicked");
  SetText(kWebAccessMarketplace,"Click Marketplace");
  SetText(kWebAccessMarketplaceRegisterCC,"Marketplace Register CC");
  SetText(kWebAccessMarketplaceRegisterCCResult,"Marketplace Register CC Result");
  SetText(kWebAccessMasterBannnerShown,"NC Banner: Shown");
  EndSet;
  
  SetBegin(402); 
  SetText(0,"Default");
  SetText(1,"Official No per Page");
  EndSet;
  
  SetBegin(403);
  SetText(kKPITypeNone,"None");
  SetText(kKPITypeActivityCostTime,"Activities Cost Time");
  SetText(kKPITypeCost,"Cost of Sales");
  SetText(kKPITypeGPPrc,"GP %");
  SetText(kKPITypeActivityNr,"No. of Activities");
  SetText(kKPITypeORNr,"No. of Orders");
  SetText(kKPITypeQTNr,"No. of Quotations");
  SetText(kKPITypeORStock,"Outstanding Orders");
  SetText(kKPITypeQTStock,"Outstanding Quotations");
  SetText(kKPITypeAPDue,"#P/L# Due");
  SetText(kKPITypeAP,"#P/L# On Acc.");
  SetText(kKPITypeIP,"Receipts");
  SetText(kKPITypeSalesExclVAT,"Sales Excluding #VAT#");
  SetText(kKPITypeSalesInclVAT,"Sales Including #VAT#");
  SetText(kKPITypeARDueNoDisputed,"#S/L# Due excluding Disputed Invoices");
  SetText(kKPITypeARDue,"#S/L# Due");
  SetText(kKPITypeAR,"#S/L# On Acc.");
  EndSet;
  
  SetBegin(404);
  SetText(kNavLinkOpenInline,"Inline");
  SetText(kNavLinkOpenExternal,"External");
  EndSet;
  
  SetBegin(405);
  SetText(kKPIStatusInvalid,"Invalid");
  SetText(kKPIStatusValid,"Valid");
  SetText(kKPIStatusInvalidCalculating,"Recalculating");
  SetText(kKPIStatusValidCalculating,"Initial Calc.");
  EndSet;
  
  SetBegin(406);
  SetText(kWindowDataColumn,"Column");
  EndSet;
  
  SetBegin(407);
  SetText(kUniversityURLStateValid,"Valid");
  SetText(kUniversityURLStatePurge,"Purge");
  SetText(kUniversityURLStateRequest,"Request");
  SetText(kUniversityURLStateRequesting,"Requesting");
  SetText(kUniversityURLStateValidate,"Validate");
  SetText(kUniversityURLStateNothing,"Not Found");
  EndSet;
  
  StrSetBegin(408);
  StrSetText("","-");
  StrSetText("LANG","Language");
  StrSetText("MINVER","From version"); // DB version format
  StrSetText("MAXVER","To version");
  StrSetText("PROD","Product");
  StrSetText("INFOTYPE","Information type at URL");
  EndStrSet;
  
  SetBegin(409);
  SetText(kDeviceTypeiPhone,"iPhone");
  SetText(kDeviceTypePocketPC2003,"PocketPC 2003");
  SetText(kDeviceTypeSymbianS60,"Symbian S60");
  SetText(kDeviceTypeWindowsMobile5,"Windows Mobile");
  SetText(kDeviceTypeMaemo,"Maemo");
  SetText(kDeviceTypeAndroidPhone,"Android Phone");
  EndSet;

  SetBegin(410);
  SetText(0,"Downpayment");
  SetText(1,"Retention");
  EndSet;

  SetBegin(411);
  SetText(kLocalCCTerminalNone,"None");
  SetText(kLocalCCTerminalBambora,"Bambora");
  SetText(kLocalCCTerminalPCEFTPOS,"PC-EFTPOS (IP)");
  SetText(kLocalCCTerminalRahaxi,"Rahaxi");
  SetText(kLocalCCTerminalSteriaCOM,"SteriaPay (Serial/COM)");
  SetText(kLocalCCTerminalSteriaIP,"SteriaPay (IP)");
  SetText(kLocalCCTerminalVerifoneBanksys,"Verifone (Serial/COM)");
  SetText(kLocalCCTerminalYomaniBanksys,"Yomani banksys (Serial/COM)");
//  SetText(kLocalCCTerminalIngenico6550,"Ingenico 6550 (Serial/COM)");//not finished
  EndSet;
  
  SetBegin(412);
  SetText(kCompanyTypeUnknown,"Unknown");
  SetText(kCompanyTypeNonConsolidated,"Non Consolidated");
  SetText(kCompanyTypeConsolidated,"Consolidated");
  SetText(kCompanyTypeSingleUser,"Single User");
  SetText(kCompanyTypePerson,"Person/Individual");
  EndSet;

  SetBegin(413);
  if (HasLocalization("POL")==false) then begin
    SetText(kSerialPortDeviceClassReceiptPrinter,"Receipt Printer");
  end;
  SetText(kSerialPortDeviceClassFiscalPrinter,"Fiscal Printer");
//  if (HasLocalization("SWE")) then begin
    SetText(kSerialPortDeviceClassFiscalControlUnit,"Fiscal Control Unit");
//  end;
  SetText(kSerialPortDeviceClassDisplay,"Pole Display");
  SetText(kSerialPortDeviceClassDrawer,"Drawer");
//  SetText(kSerialPortDeviceClassStockControl,"#Stock# Control");
  if (HasLocalization("POL")==false) then begin
    SetText(kSerialPortDeviceClassCreditCardTerminal,"Credit Card Terminal");
  end;
  EndSet;

  SetBegin(414);
  SetText(kFlowControlDefault,"Default");
  SetText(kFlowControlDTRDSR,"DTR/DSR");
  SetText(kFlowControlRTSCTS,"RTS/CTS");
  SetText(kFlowControlNone,"None");
  EndSet;
  
  SetBegin(415);
  SetText(kSerialPortDeviceModelNone,"None");
//  if (HasLocalization("LTU")) then begin
    SetText(kSerialPortDeviceModelPrinterAxiohmA777,"Axiohm A777"); 
//  end;
//  if (HasLocalization("POL")==false) then begin
    SetText(kSerialPortDeviceModelPrinterEPSONTMU210,"Epson TMU210"); 
    SetText(kSerialPortDeviceModelPrinterSTARTSP210,"Star TSP100"); 
    SetText(kSerialPortDeviceModelPrinterEPSONTMT88II,"Epson TM-T88II"); 
//  end;
//    if (HasLocalization("LVA")) then begin
    SetText(kSerialPortDeviceModelPrinterAxiohmA777,"Axiohm A777"); 
    SetText(kSerialPortDeviceModelPrinterCHD6800,"CHD 6800 (Latvia)"); 
    SetText(kSerialPortDeviceModelVirtualFiscPrinterCHDFMPOS,"CHD Virtual Fiscal Printer (Latvia)"); 
    SetText(kSerialPortDeviceModelFiscPrinterFM32DLL,"Fiscal Printer Brio FM32 with Middle Ware (Latvia)");
//    end;
  
//  if (HasLocalization("POL")) then begin
    SetText(kSerialPortDeviceModelFiscPrinterPOSNET1,"Fiscal Printer POSNET 1 (Poland, DF301 Protocol)"); 
    SetText(kSerialPortDeviceModelFiscPrinterPOSNET2,"Fiscal Printer POSNET 2 (Poland, DF301 Protocol)"); 
    SetText(kSerialPortDeviceModelFiscPrinterOPTIMUS,"Fiscal Printer OPTIMUS (Poland, DF301 Protocol)"); 
    SetText(kSerialPortDeviceModelFiscPrinterPOSNETThermal5V,"Fiscal Printer POSNET Thermal 5V (Poland), DF301 Protocol"); 
    SetText(kSerialPortDeviceModelFiscPrinterPOSNET,"Fiscal Printer POSNET (Poland, POSNET Protocol)"); 
    SetText(kSerialPortDeviceModelFiscPrinterPOSNETwVATNr,"Fiscal Printer POSNET (Poland, POSNET Protocol w VAT, from 01/10/2013)"); 
    SetText(kSerialPortDeviceModelFiscPrinterPOSNETTCPIP,"Fiscal Printer POSNET HD FV EJ (Poland, POSNET Protocol over TCPIP)"); 
//  end;
//  SetText(kSerialPortDeviceModelFiscPrinterFP2000,"Fiscal Printer FP2000 (Zimbabwe)"); // no code
//  if (HasLocalization("SVK")) then begin
    SetText(kSerialPortDeviceModelFiscPrinterFP3000,"Fiscal Printer FP3000 (Slovakia)"); 
//  end;
//  if (HasLocalization("ARG")) then begin
    SetText(kSerialPortDeviceModelFiscPrinterHASAR,"Fiscal Printer Hasar (Argentina)"); 
//  end;
//  if (HasLocalization("PAN")) then begin
    SetText(kSerialPortDeviceModelFiscPrinterHASARPL23F,"Fiscal Printer Hasar PL23F (Panama)"); 
//  end;
//  if (HasLocalization("ARG")) then begin
    SetText(kSerialPortDeviceModelFiscPrinterEPSON,"Fiscal Printer Epson (Argentina)"); 
//  end;
//  if (HasLocalization("SRB")) then begin
    SetText(kSerialPortDeviceModelFiscPrinterFI550,"Fiscal Printer Fi-550 (Serbia)"); 
//  end;
//  if (HasLocalization("ARG")) then begin
    SetText(kSerialPortDeviceModelFiscPrinterEPSONTMU220,"Fiscal Printer Epson TM-U220 (Argentina)");
//  end;
//  if (HasLocalization("ZWE")) then begin
    SetText(kSerialPortDeviceModelFiscPrinterEPSONTMT81F,"Fiscal Printer Epson TM-T81F (Zimbabwe)");
//  end;
//  if (HasLocalization("KEN")) then begin
    SetText(kSerialPortDeviceModelFiscPrinterTSLFP05,"Fiscal Printer TSL FP05 (Kenya)");
//  end;
//  if (HasLocalization("LTU")) then begin
    SetText(kSerialPortDeviceModelFiscPrinterFB05,"Fiscal Printer Empirija FB05 (Lithuania)");
    SetText(kSerialPortDeviceModelFiscPrinterFB15,"Fiscal Printer Empirija FB15 (Lithuania)");
    SetText(kSerialPortDeviceModelFiscPrinterFB15DLL,"Fiscal Printer Empirija FB15 with Middle Ware (Lithuania)");
    SetText(kSerialPortDeviceModelFiscPrinterST05,"Fiscal Printer Citizen ST-05 (Lithuania)");
//  end;
//  if (HasLocalization("EST")) then begin
    SetText(kSerialPortDeviceModelFiscPrinterFPRINT02K,"Fiscal Printer FPrint 02K");
//  end;
  SetText(kSerialPortDeviceModelFiscPrinterRCHFlea,"Fiscal Printer RCH Flea");
//  SetText(kSerialPortDeviceModelDIGITAG,"Digitag"); 
//  if (HasLocalization("SWE")) then begin
    SetText(kSerialPortDeviceModelFiscPrinterCLEANCASHTypeA,"Clean Cash Type A (Sweden)");
    SetText(kSerialPortDeviceModelFiscPrinterCLEANCASHTypeC,"Clean Cash Type C (Sweden)");
//  end;
  SetText(kSerialPortDeviceModelDisplayGeneric,"Generic Pole Display");
  SetText(kSerialPortDeviceModelDisplayPosiFlex,"Posiflex Pole Display");
//  if (HasLocalization("FIN")) then begin
    SetText(kSerialPortDeviceModelCreditCardTerminalYomaniBanksys,"Credit Card Terminal Yomani Banksys");
    SetText(kSerialPortDeviceModelCreditCardTerminalVerifoneBanksys,"Credit Card Terminal Verifone");
//  end;
//  SetText(kSerialPortDeviceModelCreditCardTerminalIngenico6550,"Credit Card Terminal Ingenico 6550");
  SetText(kSerialPortDeviceModelFiscPrinterBematechMP2100,"Fiscal Printer Bematech MP-2100 TH FI");
  EndSet;

  SetBegin(416);
  SetText(0,"Requested");
  SetText(1,"Planned");
  SetText(2,"Confirmed");
  SetText(3,"?");
  SetText(4,"Cancelled");
  SetText(5,"No Show");
  SetText(6,"Late Cancellation");
  SetText(7,"Not Interested");
  SetText(8,"Not Allowed");
  SetText(9,"Waiting List");
  EndSet;

  SetBegin(417);
  SetText(kShopBaskOwnerCustomer,"Customer");
  SetText(kShopBaskOwnerReservation,"Reservation");
  SetText(kShopBaskOwnerRsrtEvent,"Resort Event");
  EndSet;

  SetBegin(418);
  SetText(kShopBaskDestinationOrder,"Order");
  SetText(kShopBaskDestinationInvoice,"Invoice");
  SetText(kShopBaskDestinationQuote,"Quotation");
  EndSet;
  
  SetBegin(419);
  SetText(kResortEventInvoiceable,"Invoicable");
  SetText(kResortEventOnReservation,"Reservation");
  SetText(kResortEventGoodwill,"Goodwill");
  EndSet;
  
  StrSetBegin(420);
  StrSetText("","Unknown");
  StrSetText("EA", "Arved.ee");
  StrSetText("EAm","Email");
  StrSetText("hEA","Swedbanki Internetipank");
  StrSetText("iEAb","Itella B2B Basic");
  StrSetText("kEA","i-pank");
  StrSetText("mEA","Nordea internetipank");
  StrSetText("oEA","S@mpo");
  StrSetText("yEA","U-Net / Business");
  EndStrSet;  
  
  SetBegin(421);
  SetText(kJobTypeUploadBackup,"Upload Backup");
  SetText(kJobTypeDownloadBackup,"Download Backup");
  EndSet;
  
  SetBegin(422);
  SetText(kJobStatusRunning,"Running"); // could be translated "in progress"
  SetText(kJobStatusFinished,"Finished");
  EndSet;

  StrSetBegin(423);
  StrSetText(British,"British");
  StrSetText(Polish,"Polish");
  EndStrSet;

  SetBegin(424);
  SetText(kPeriodLengthBlank,"-");
  SetText(kPeriodLengthWeek,"Week");
  SetText(kPeriodLengthMonth,"Month");
//  SetText(kPeriodLengthQuarter,"Quarter");
  SetText(kPeriodLengthYear,"Year");
  EndSet;

  SetBegin(425);
  SetText(kPeriodTypeBlank,"-");
  SetText(kPeriodTypeRolling,"Until Current Date");
  SetText(kPeriodTypeLastFull,"Current Full Unit");
  SetText(kPeriodTypeLastUntilSamePoint,"Current Unit, Until Current Date");
  EndSet;

  SetBegin(426);
  SetText(0," ");
  SetText(1,"Transferred");
  EndSet;

  SetBegin(427);
  SetText(kBiometricSignatureNone,"None");
  SetText(kBiometricSignatureFingerprint,"Fingerprint");
//  SetText(kBiometricSignatureVoiceprint,"Voiceprint");
//  SetText(kBiometricSignatureEyeimage,"Eye Image");
  EndSet;

  SetBegin(428);
  SetText(kBiometricDeviceNone,"None");
  SetText(kBiometricDeviceDigitalPersona,"DigitalPersona");
  EndSet;

  SetBegin(429);
  SetText(kRestAccRowStatusNormal,"Normal");
  SetText(kRestAccRowStatusOrdered,"Ordered");
  SetText(kRestAccRowStatusFireOrder,"Fire Order");
  SetText(kRestAccRowStatusFireCancelled,"Cancelled");
  EndSet;
  
/* 31000 32000 reserved for webshops and other customizations */
  
  StrSetBegin(430);
  StrSetText(103,"103 - Very old Hansa version!!");
  StrSetText(104,"104 - Very old Hansa version!!");
  StrSetText(105,"105 - Very old Hansa version!!");
  StrSetText(106,"106 - Very old Hansa version!!");
  StrSetText(107,"107 - Very old Hansa version!!");
  StrSetText(108,"108 - Very old Hansa version!!");
  StrSetText(109,"109 - Very old Hansa version!!");
  StrSetText(110,"110 - Very old Hansa version!!");
  StrSetText(111,"111 - HansaFinancials 3.6");
  StrSetText(112,"112 - Office/2 3.6");
  StrSetText(113,"113 - FirstOffice 3.6");
  StrSetText(115,"115 - HansaFinancials 3.7");
  StrSetText(116,"116 - Office/2 3.7");
  StrSetText(117,"117 - FirstOffice 3.7");
  StrSetText(118,"118 - FirstOffice Mini 3.7");
  StrSetText(119,"119 - FirstOffice Currency 3.7");
  StrSetText(120,"120 - HansaFinancials 3.8");
  StrSetText(121,"121 - Office/2 3.8");
  StrSetText(122,"122 - FirstOffice 3.8");
  StrSetText(123,"123 - FirstOffice Mini 3.8");
  StrSetText(124,"124 - FirstOffice Currency 3.8");
  StrSetText(125,"125 - FirstContact 3.8");
  StrSetText(130,"130 - HansaFinancials 3.9");
  StrSetText(131,"131 - Office/2 3.9");
  StrSetText(132,"132 - FirstOffice 3.9");
  StrSetText(133,"133 - FirstOffice Mini 3.9");
  StrSetText(134,"134 - FirstOffice Currency 3.9");
  StrSetText(135,"135 - FirstContact 3.9");
  StrSetText(140,"140 - HansaFinancials 4.0");
  StrSetText(141,"141 - Office/2 4.0");
  StrSetText(142,"142 - FirstOffice 4.0");
  StrSetText(143,"143 - FirstOffice Mini 4.0");
  StrSetText(144,"144 - FirstOffice Currency 4.0");
  StrSetText(145,"145 - FirstContact 4.0");
  
  StrSetText(147,"147 - HansaWorld 4.0");
  StrSetText(150,"150 - HansaFinancials 4.1 (first release)");
  StrSetText(151,"151 - Office/2 4.1 (first release)");
  StrSetText(152,"152 - FirstOffice 4.1 (first release)");
  StrSetText(153,"153 - FirstOffice Mini 4.1 (first release)");
  StrSetText(154,"154 - FirstOffice Currency 4.1 (first release)");
  StrSetText(155,"155 - FirstContact 4.1 (first release)");
  StrSetText(156,"156 - FirstOffice ASP 4.1 (first release)");
  StrSetText(157,"157 - HansaWorld SMB 4.1 (first release)");
  StrSetText(159,"159 - HansaWorld 4.1 (first release)");
  StrSetText(160,"160 - HansaFinancials 4.1");
  StrSetText(161,"161 - Office/2 4.1");
  StrSetText(162,"162 - FirstOffice 4.1");
  StrSetText(163,"163 - FirstOffice Mini 4.1");
  StrSetText(164,"164 - FirstOffice Currency 4.1");
  StrSetText(165,"165 - FirstContact 4.1");
  StrSetText(166,"166 - FirstOffice ASP 4.1");
  StrSetText(167,"167 - HansaWorld SMB 4.1");
  StrSetText(169,"169 - HansaWorld 4.1");
  StrSetText(171,"171 - Office/2 4.2");
  StrSetText(172,"172 - FirstOffice 4.2");
  StrSetText(173,"173 - FirstOffice Mini 4.2");
  StrSetText(174,"174 - FirstOffice Currency 4.2");
  StrSetText(175,"175 - FirstContact 4.2");
  StrSetText(176,"176 - FirstOffice ASP 4.2");
  StrSetText(177,"177 - HansaWorld SMB 4.2");
  StrSetText(179,"179 - HansaWorld 4.2");
  StrSetText(181,"181 - Office/2 4.3");
  StrSetText(182,"182 - FirstOffice 4.3");
  StrSetText(183,"183 - FirstOffice Mini 4.3");
  StrSetText(184,"184 - FirstOffice Currency 4.3");
  StrSetText(185,"185 - FirstContact 4.3");
  StrSetText(186,"186 - FirstOffice ASP 4.3");
  StrSetText(187,"187 - HansaWorld SMB 4.3");
  StrSetText(188,"188 - FirstOffice Pro");
  StrSetText(189,"189 - HansaWorld 4.3");
  StrSetText(191,"191 - Office/2 5.0");
  StrSetText(192,"192 - FirstOffice 5.0");
  StrSetText(193,"193 - FirstOffice Mini 5.0");
  StrSetText(194,"194 - FirstOffice Currency 5.0");
  StrSetText(195,"195 - FirstContact 5.0");
  StrSetText(196,"196 - FirstOffice ASP 5.0");
  StrSetText(197,"197 - HansaWorld SMB 5.0");
  StrSetText(198,"198 - FirstOffice Pro");
  StrSetText(199,"199 - HansaWorld 5.0");
  StrSetText(201,"201 - Office/2 5.1");
  StrSetText(202,"202 - FirstOffice 5.1");
  StrSetText(203,"203 - FirstOffice Mini 5.1");
  StrSetText(204,"204 - FirstOffice Currency 5.1");
  StrSetText(205,"205 - FirstContact 5.1");
  StrSetText(206,"206 - FirstOffice ASP 5.1");
  StrSetText(207,"207 - HansaWorld SMB 5.1");
  StrSetText(208,"208 - FirstOffice Pro 5.1");
  StrSetText(209,"209 - HansaWorld 5.1");
  
  StrSetText(211,"211 - Office/2 5.2");
  StrSetText(212,"212 - FirstOffice 5.2");
  StrSetText(213,"213 - FirstOffice Mini 5.2");
  StrSetText(214,"214 - FirstOffice Currency 5.2");
  StrSetText(215,"215 - FirstContact 5.2");
  StrSetText(216,"216 - FirstOffice ASP 5.2");
  StrSetText(217,"217 - HansaWorld SMB 5.2");
  StrSetText(218,"218 - FirstOffice Pro 5.2");
  StrSetText(219,"219 - HansaWorld 5.2");
  
  StrSetText(221,"221 - Office/2 5.3");
  StrSetText(222,"222 - FirstOffice 5.3");
  StrSetText(223,"223 - FirstOffice Mini 5.3");
  StrSetText(224,"224 - FirstOffice Currency 5.3");
  StrSetText(225,"225 - FirstContact 5.3");
  StrSetText(226,"226 - FirstOffice ASP 5.3");
  StrSetText(227,"227 - HansaWorld SMB 5.3");
  StrSetText(228,"228 - FirstOffice Pro 5.3");
  StrSetText(229,"229 - HansaWorld 5.3");
  
  StrSetText(231,"231 - Office/2 5.4");
  StrSetText(232,"232 - FirstOffice 5.4");
  StrSetText(233,"233 - FirstOffice Mini 5.4");
  StrSetText(234,"234 - FirstOffice Currency 5.4");
  StrSetText(235,"235 - FirstContact 5.4");
  StrSetText(236,"236 - FirstOffice ASP 5.4");
  StrSetText(237,"237 - HansaWorld SMB 5.4");
  StrSetText(238,"238 - FirstOffice Pro 5.4");
  StrSetText(239,"239 - HansaWorld 5.4");
  
  StrSetText(241,"241 - Office/2 6.0");
  StrSetText(242,"242 - FirstOffice 6.0");
  StrSetText(243,"243 - FirstOffice Mini 6.0");
  StrSetText(244,"244 - FirstOffice Currency 6.0");
  StrSetText(245,"245 - FirstContact 6.0");
  StrSetText(246,"246 - FirstOffice ASP 6.0");
  StrSetText(247,"247 - HansaWorld SMB 6.0");
  StrSetText(248,"248 - FirstOffice Pro 6.0");
  StrSetText(249,"249 - HansaWorld 6.0");
  StrSetText(250,"250 - Books 6.0");
  StrSetText(251,"251 - Books Professional 6.0");
  StrSetText(252,"252 - Books Professional Advanced 6.0");
  StrSetText(253,"253 - Books Job Costing 6.0");
  StrSetText(254,"254 - Books Accounting 6.0");
  StrSetText(255,"255 - Books POS 6.0");
  
  StrSetText(260,"260 - Books 6.1");
  StrSetText(261,"261 - Office/2 6.1");
  StrSetText(262,"262 - FirstOffice 6.1");
  StrSetText(263,"263 - FirstOffice Mini 6.1");
  StrSetText(264,"264 - FirstOffice Currency 6.1");
  StrSetText(265,"265 - FirstContact 6.1");
  StrSetText(266,"266 - FirstOffice ASP 6.1");
  StrSetText(267,"267 - HansaWorld SMB 6.1");
  StrSetText(268,"268 - FirstOffice Pro 6.1");
  StrSetText(269,"269 - HansaWorld 6.1");
  StrSetText(270,"270 - Books 6.2");
  StrSetText(271,"271 - Office/2 6.2");
  StrSetText(272,"272 - FirstOffice 6.2");
  StrSetText(273,"273 - FirstOffice Mini 6.2");
  StrSetText(274,"274 - FirstOffice Currency 6.2");
  StrSetText(275,"275 - FirstContact 6.2");
  StrSetText(276,"276 - FirstOffice ASP 6.2");
  StrSetText(277,"277 - HansaWorld SMB 6.2");
  StrSetText(278,"278 - FirstOffice Pro 6.2");
  StrSetText(279,"279 - HansaWorld 6.2");
  StrSetText(280,"280 - Books 6.3");
  StrSetText(281,"281 - Office/2 6.3");
  StrSetText(282,"282 - FirstOffice 6.3");
  StrSetText(283,"283 - FirstOffice Mini 6.3");
  StrSetText(284,"284 - FirstOffice Currency 6.3");
  StrSetText(285,"285 - FirstContact 6.3");
  StrSetText(286,"286 - FirstOffice ASP 6.3");
  StrSetText(287,"287 - HansaWorld SMB 6.3");
  StrSetText(288,"288 - FirstOffice Pro 6.3");
  StrSetText(289,"289 - HansaWorld 6.3");
  StrSetText(290,"290 - Books 6.4");
  StrSetText(291,"291 - Office/2 6.4");
  StrSetText(292,"292 - FirstOffice 6.4");
  StrSetText(293,"293 - FirstOffice Mini 6.4");
  StrSetText(294,"294 - FirstOffice Currency 6.4");
  StrSetText(295,"295 - FirstContact 6.4");
  StrSetText(296,"296 - FO ASP 6.4");
  StrSetText(297,"297 - HansaWorld SMB 6.4");
  StrSetText(298,"298 - FirstOffice Pro 6.4");
  StrSetText(299,"299 - HansaWorld 6.4");
  StrSetText(300,"300 - Books 7.0");
  StrSetText(301,"301 - Office/2 7.0");
  StrSetText(302,"302 - FirstOffice 7.0");
  StrSetText(303,"303 - FirstOffice Mini 7.0");
  StrSetText(304,"304 - FirstOffice Currency 7.0");
  StrSetText(305,"305 - FirstContact 7.0");
  StrSetText(306,"306 - FO ASP 7.0");
  StrSetText(307,"307 - HansaWorld SMB 7.0");
  StrSetText(308,"308 - FirstOffice Pro 7.0");
  StrSetText(309,"309 - HansaWorld 7.0");
  StrSetText(310,"310 - Books 7.1");
  StrSetText(311,"311 - Office/2 7.1");
  StrSetText(312,"312 - FirstOffice 7.1");
  StrSetText(313,"313 - FirstOffice Mini 7.1");
  StrSetText(314,"314 - FirstOffice Currency 7.1");
  StrSetText(315,"315 - FirstContact 7.1");
  StrSetText(316,"316 - FO ASP 7.1");
  StrSetText(317,"317 - HansaWorld SMB 7.1");
  StrSetText(318,"318 - HansaWorld 7.1");
  StrSetText(319,"319 - HansaWorld 7.1");
  StrSetText(320,"320 - Books 7.2");
  StrSetText(321,"321 - Office/2 7.2");
  StrSetText(322,"322 - FirstOffice 7.2");
  StrSetText(323,"323 - FirstOffice Mini 7.2");
  StrSetText(324,"324 - FirstOffice Currency 7.2");
  StrSetText(325,"325 - FirstContact 7.2");
  StrSetText(326,"326 - FO ASP 7.2");
  StrSetText(327,"327 - HansaWorld SMB 7.2");
  StrSetText(328,"328 - FirstOffice Pro 7.2");
  StrSetText(329,"329 - HansaWorld 7.2");

  StrSetText(330,"330 - Books 8.0");
  StrSetText(331,"331 - Office/2 8.0");
  StrSetText(332,"332 - FirstOffice 8.0");
  StrSetText(333,"333 - FirstOffice Mini 8.0");
  StrSetText(334,"334 - FirstOffice Currency 8.0");
  StrSetText(335,"335 - FirstContact 8.0");
  StrSetText(336,"336 - FO ASP 8.0");
  StrSetText(337,"337 - HansaWorld SMB 8.0");
  StrSetText(338,"338 - FirstOffice Pro 8.0");
  StrSetText(339,"339 - HansaWorld 8.0");

  StrSetText(340,"340 - Books 8.1");
  StrSetText(349,"349 - HansaWorld 8.1");
  StrSetText(359,"359 - Standard ERP 8.2 (pre release)");
  StrSetText(351,"351 - Standard Products 8.2");
  StrSetText(352,"352 - Standard ERP 8.2");
  StrSetText(353,"353 - Standard Products 8.3");
  StrSetText(354,"354 - Standard ERP 8.3");

  StrSetText(501,"501 - Old Lithuanian Classic!!");
  
  StrSetText(511,"511 - Standard Organizer 6.2");
  StrSetText(512,"512 - Standard Communicator 6.2");
  StrSetText(513,"513 - Standard CRM 6.2");
  StrSetText(514,"514 - Standard Accounts 6.2");
  StrSetText(515,"515 - Standard Bar 6.2");
  StrSetText(516,"516 - Standard Contracts 6.2");
  StrSetText(517,"517 - Standard Hotel 6.2");
  StrSetText(518,"518 - Standard Invoicing 6.2");
  StrSetText(519,"519 - Standard Nominal Ledger 6.2");
  StrSetText(520,"520 - Standard Projects 6.2");
  StrSetText(521,"521 - Standard Rentals 6.2");
  StrSetText(522,"522 - Standard Restaurant 6.2");
  StrSetText(523,"523 - Standard Shop 6.2");
  StrSetText(524,"524 - Standard Stock 6.2");
  StrSetText(525,"525 - Standard Conferences 6.2");
  StrSetText(526,"526 - Standard Documents 6.2");
  StrSetText(527,"527 - Standard Expenses 6.2");
  StrSetText(528,"528 - Standard HR 6.2");
  StrSetText(529,"529 - Standard CRM Server 6.2");
  StrSetText(530,"530 - Standard Accounts Server 6.2");
  StrSetText(531,"531 - Standard Organizer 6.4");
  StrSetText(532,"532 - Standard Communicator 6.4");
  StrSetText(533,"533 - Standard CRM 6.4");
  StrSetText(534,"534 - Standard Accounts 6.4");
  StrSetText(535,"535 - Standard Bar 6.4");
  StrSetText(536,"536 - Standard Contracts 6.4");
  StrSetText(537,"537 - Standard Hotel 6.4");
  StrSetText(538,"538 - Standard Invoicing 6.4");
  StrSetText(539,"539 - Standard Nominal Ledger 6.4");
  StrSetText(540,"540 - Standard Projects 6.4");
  StrSetText(541,"541 - Standard Rentals 6.4");
  StrSetText(542,"542 - Standard Restaurant 6.4");
  StrSetText(543,"543 - Standard Shop 6.4");
  StrSetText(544,"544 - Standard Stock 6.4");
  StrSetText(545,"545 - Standard Conferences 6.4");
  StrSetText(546,"546 - Standard Documents 6.4");
  StrSetText(547,"547 - Standard Expenses 6.4");
  StrSetText(548,"548 - Standard HR 6.4");
  StrSetText(549,"549 - Standard CRM Server 6.4");
  StrSetText(550,"550 - Standard Accounts Server 6.4");
  
  StrSetText(701,"701 - HansaWorld Money 6.2");
  StrSetText(624,"624 - Russian Standard 7.3");

  StrSetText(655,"655 - Purplesoft ERP 8.2");

  StrSetText(702,"702 - POS Standalone 6.2");
  StrSetText(712,"712 - POS Standalone 6.3");
  StrSetText(722,"722 - POS Standalone 6.4");
  StrSetText(801,"801 - BusinessPhone 5.2");
  StrSetText(802,"802 - BusinessPhone 5.3");
  StrSetText(803,"803 - BusinessPhone 5.4");
  StrSetText(804,"804 - BusinessPhone 6.0");
  StrSetText(805,"805 - BusinessPhone 6.1");
  StrSetText(806,"806 - BusinessPhone 6.2");
  StrSetText(807,"807 - BusinessPhone 6.3");
  StrSetText(808,"808 - BusinessPhone 6.4");
  StrSetText(809,"809 - BusinessPhone 7.0");
  StrSetText(810,"810 - BusinessPhone 7.1");
  StrSetText(811,"811 - BusinessPhone 7.2");
  StrSetText(812,"812 - BusinessPhone 8.0");

  StrSetText(901,"901 - Very old Raama version!!");
  StrSetText(902,"902 - Very old Raama version!!");
  StrSetText(903,"903 - HansaRaama 3.8");
  StrSetText(905,"905 - HansaRaama 3.9");
  StrSetText(906,"906 - HansaRaama 4.0");
  StrSetText(907,"907 - HansaRaama 4.1 (first release)");
  StrSetText(908,"908 - HansaRaama 4.1");
  StrSetText(909,"909 - HansaRaama 4.2");
  StrSetText(910,"910 - HansaRaama 4.3");
  StrSetText(911,"911 - HansaRaama 5.0");
  StrSetText(912,"912 - HansaRaama 5.1");
  StrSetText(913,"913 - HansaRaama 5.2");
  StrSetText(914,"914 - HansaRaama 5.3");
  StrSetText(915,"915 - HansaRaama 5.4");
  StrSetText(916,"916 - HansaRaama 6.0");
  StrSetText(917,"917 - HansaRaama 6.1");
  StrSetText(918,"918 - HansaRaama 6.2");
  StrSetText(919,"919 - HansaRaama 6.3");
  StrSetText(920,"920 - HansaRaama 6.4");
  StrSetText(921,"921 - Standard Hansa 7.0");
  StrSetText(922,"922 - HansaRaama 7.1");
  StrSetText(923,"923 - HansaRaama 7.2");
  StrSetText(924,"924 - HansaRaama 8.0");
  StrSetText(951,"951 - HansaRiigitarkvara");
  EndStrSet;
  
  SetBegin(440); //TODO: move into proper position before commit (position as sorted by Set number)
  SetText(0,"None");
  SetText(1,"FedEx");
  EndSet;

  SetBegin(441);
  SetText(0,"None");
  SetText(1,"Indirect");
  SetText(2,"Direct");
  SetText(3,"Adult");
  EndSet;

  SetBegin(442);
  SetText(0,"KG/CM");
  SetText(1,"LB/IN");
  EndSet;
  
  SetBegin(431);
  SetText(kPOSButtonTypeBlank,"Blank");
  SetText(kPOSButtonTypeAddCommentLine,"Add Comment Line");  
  SetText(kPOSButtonTypeAddHeaderLine,"Add Header Line");  
  SetText(kPOSButtonTypeAddHiddenLine,"Add Hidden Line");  
  SetText(kPOSButtonTypeServiceCharge,"Add Service Charge");  
  SetText(kPOSButtonTypeAddSubtotalLine,"Add Subtotal Line");  
  SetText(kPOSButtonTypeAddOrderDiscount,"Add Discount");  
  SetText(kPOSButtonTypeAllInvoices,"All Invoices");
  SetText(kPOSButtonTypeAmendLine,"Amend Line");
  SetText(kPOSButtonTypeAppleCancelAEOrder,"Apple Cancel AE Order");  
  SetText(kPOSButtonTypeAppleCreateAEOrder,"Apple Create AE Order");  
  SetText(kPOSButtonTypeAppleWarrantyStatusCheck,"Apple Warranty Status Check");  
  SetText(kPOSButtonTypeBaggerSearch,"Bagger Search");
  SetText(kPOSButtonTypeBookings,"Bookings");  
  SetText(kPOSButtonTypeCalculateTip,"Calculate Tip");  
  SetText(kPOSButtonTypeCashPayment,"Cash");
  SetText(kPOSButtonTypeChangeAddress,"Change Address");
  SetText(kPOSButtonTypeEditDate,"Change Date");
  SetText(kPOSButtonTypeChangeDiscountMatrix,"Change Discount Matrix");
  SetText(kPOSButtonTypeChangeTerms,"Change Terms");
  SetText(kPOSButtonTypeLogin,"Change User");  
  SetText(kPOSButtonTypeChequePayment,"#Cheque#");
  SetText(kPOSButtonTypeCloseSession,"Close Session");
//  if (HasLocalization("POL")) then begin
    SetText(kPOSButtonTypeCorrectionInvoice,"Correction Invoice");
//  end;
  SetText(kPOSButtonTypeCreateActivity,"Create Activity");
  SetText(kPOSButtonTypeCreateCashin,"Create Cash in");
  SetText(kPOSButtonTypeCreateCashOut,"Create Cash Out");
  SetText(kPOSButtonTypeCreateCorrectionInvoice,"Create Correction Invoice");
  SetText(kPOSButtonTypeCreateCreditNote,"Create #Credit Note#");
  SetText(kPOSButtonTypeCreateCreditEMail,"Create Email");
  SetText(kPOSButtonTypeCreateGC,"Create Gift Voucher");
  SetText(kPOSButtonTypeCreditCardPayment,"Credit Card");
  SetText(kPOSButtonTypeCreditCardPaymentReversal,"Credit Card Payment Reversal");
  SetText(kPOSButtonTypeCreditNote,"Credit Note");
  SetText(kPOSButtonTypeCustomerSearch,"Customer Search");
  SetText(kPOSButtonTypeCustomerSearchFiltered,"Customer Search BF");
  SetText(kPOSButtonTypeDebitCardPayment,"Debit Card");
  SetText(kPOSButtonTypeDeleteItem,"Delete Row");
  SetText(kPOSButtonTypeGotoPage,"Display Page");
  SetText(kPOSButtonTypeVolumetricBarCodeScan,"Dynamic Barcode");
  SetText(kPOSButtonTypeEnterReferenceNumber,"Enter Reference Number");
  SetText(kPOSButtonTypeFinish,"Finish");  
  SetText(kPOSButtonTypeGetCashFloat,"Get Cash Float");
  SetText(kPOSButtonTypeGiftReceipt,"Gift Receipt");
  SetText(kPOSButtonTypeGiftVoucherPayment,"Gift Voucher");
  SetText(kPOSButtonTypeInstructions,"Instructions");  
  SetText(kPOSButtonTypeInvalidateInvoice,"Invalidate Invoice");
  SetText(kPOSButtonTypeInvoiceStatus,"Invoice Status");
  SetText(kPOSButtonTypeItem,"Item");
  SetText(kPOSButtonTypeItemSearch,"Item Search");
  SetText(kPOSButtonTypeItemStatus,"Item Status");
  SetText(kPOSButtonTypeKitchenOrder,"Kitchen Order");  
  //SetText(kPOSButtonTypeLevelUp,"Level Up");
  SetText(kPOSButtonTypeLoyaltyPointsBonus,"Loyalty Bonus Points");
  SetText(kPOSButtonTypeLoyaltyCard,"Loyalty Card");
  SetText(kPOSButtonTypeLoyaltyPointsPayment,"Loyalty Points Payment");
  SetText(kPOSButtonTypeManagerDiscountOverride,"Manager Discount Override");
  SetText(kPOSButtonTypeMergeBarTabs,"Merge Bar Tabs");  
  SetText(kPOSButtonTypeMoveToBarTab,"Move Items to Bar Tab");  
  SetText(kPOSButtonTypeMainSerialNr,"Device Serial Number");  
  SetText(kPOSButtonTypeEnterReferenceNumber,"Enter Reference Number");
  SetText(kPOSButtonTypeModifier,"Modifier");
  SetText(kPOSButtonTypeOnAccountPayment,"On Account Payment");
  SetText(kPOSButtonTypeOnHotelGuestAccount,"On Hotel Guest Account");  
  SetText(kPOSButtonTypeOpenRecord,"Open Record");
  SetText(kPOSButtonTypeOpenCashDrawer,"Open Cash Drawer");  
  SetText(kPOSButtonTypeEditCustomerRecord,"Open Customer Record");
  SetText(kPOSButtonTypeEditItemRecord,"Open Item Record");
  SetText(kPOSButtonTypeOpenCalendar,"Open Calendar");  
  SetText(kPOSButtonTypeOpenNLTransaction,"Open #NL# Transaction");  
  SetText(kPOSButtonTypeOpenTaxMatrix,"Open Tax Matrix");  
  SetText(kPOSButtonTypOpenInvoices,"Open unfinished Invoices");  
  SetText(kPOSButtonTypeSpecialMenu,"Operations Menu Function");
  SetText(kPOSButtonTypeOpenSession,"Open Session");
  SetText(kPOSButtonTypeOverrideOfficialSerNr,"Override Official Serial Number");
  SetText(kPOSButtonTypePauseSales,"Pause Sales");  
  SetText(kPOSButtonTypePasteQuotation,"Paste Quotation");  
  SetText(kPOSButtonTypePasteSalesOrder,"Paste Sales Order");  
  SetText(kPOSButtonTypePayment,"Pay");
  SetText(kPOSButtonTypePaymentButtonsLayout,"Pay (Buttons layout)");
  SetText(kPOSButtonTypePaymentOneMode,"Pay (one Mode)");
  SetText(kPOSButtonTypePOSCommand,"POS Command");
  SetText(kPOSButtonTypePriceLookup,"Price Lookup");
  SetText(kPOSButtonTypePreviousSalesPrices,"Previous Sales Prices");
  SetText(kPOSButtonTypePrintCancellation,"Print Cancellation");  
  SetText(kPOSButtonTypePrintFireOrder,"Print Fire Order");  
  SetText(kPOSButtonTypePrintInvoice,"Print Invoice");  
  SetText(kPOSButtonTypePrintProformaInvoice,"Print Proforma Invoice");  
  SetText(kPOSButtonTypePrintOrder,"Print Tab");  
  SetText(kPOSButtonTypePrintOrderToKitchen,"Print Tab to Kitchen");  
  SetText(kPOSButtonTypePutCashFloat,"Put Cash Float");
  SetText(kPOSButtonTypeConnectToCCTerminal,"Connect to CC Terminal");
  SetText(kPOSButtonTypeReprintLastCCSlip,"Reprint Last CC Slip");
  SetText(kPOSButtonTypeReprintReceipt,"Reprint Receipt");
  SetText(kPOSButtonTypeResumeSales,"Resume Sales");  
  SetText(kPOSButtonTypeReturn,"Return");
  SetText(kPOSButtonTypeReturnInvoiceNo,"Return Invoice No.");
  SetText(kPOSButtonTypeReturnReason,"Return Reason");
  SetText(kPOSButtonTypeRunReportOnServer,"Run Report On Server");
  SetText(kPOSButtonTypeSalesAssistant,"Sales Assistant");
  SetText(kPOSButtonTypeSelectSalesman,"Select #Salesman#");
  SetText(kPOSButtonTypeGiftVoucherSales,"Sell Gift Voucher");
  SetText(kPOSButtonTypeSendToFiscalDevice,"Send to Fiscal Device");  
  SetText(kPOSButtonTypeSendEMail,"Send Email");
  SetText(kPOSButtonTypeSeniorCitizenDiscount,"Senior Citizen Discount");
  SetText(kPOSButtonTypeLookupSerialNr,"Serial No. Lookup");
  SetText(kPOSButtonTypeSetBarTabClass,"Set Bar Tab Class");  
  SetText(kPOSButtonTypeSetCovers,"Set Covers");  
  SetText(kPOSButtonTypeSetTable,"Set Table");  
  SetText(kPOSButtonTypeHotelGuests,"Show Hotel Guests");  
  SetText(kPOSButtonTypeSplitBarTabs,"Split Bar Tabs");  
  SetText(kPOSButtonTypeSplitItem,"Split Item");
  SetText(kPOSButtonTypeSupervisorSearch,"Supervisor Search");
  SetText(kPOSButtonTypSaveInvoice,"Suspend Invoice");  
  SetText(kPOSButtonTypeSyncNow,"Sync Now");
//  SetText(kPOSButtonTypeLevelDown,"Level Down");
  SetText(kPOSButtonTypeLevelTop,"Top Level");
  SetText(kPOSButtonTypeTransfertoInvoice,"Transfer to Invoice");
  SetText(kPOSButtonTypeTransfertoQuotation,"Transfer to Quotation");
  SetText(kPOSButtonTypeTransfertoSL,"Transfer to #Sales Ledger#");
  SetText(kPOSButtonTypeTransfertoOrder,"Transfer to Sales Order");
  SetText(kPOSButtonTypeVoidRow,"Void Item");  
  SetText(kPOSButtonTypeXReading,"X-Reading");
  SetText(kPOSButtonTypeYReading,"Y-Reading");
  SetText(kPOSButtonTypeZReading,"Z-Reading");
  EndSet;
  
  SetBegin(432);
  SetText(0,"No");
  SetText(1,"Yes");
  EndSet;

  SetBegin(433);
  SetText(kOrderTypeNormal,"Normal");
  SetText(kOrderTypeDropShip,"Drop Ship");
  EndSet;

  SetBegin(434);
  SetText(kAcceptanceAct,"Activities");
  SetText(kAcceptanceExp,"Expenses");
  SetText(kAcceptancePU,"Goods Receipts");
  SetText(kAcceptanceIntOR,"Internal Orders");
  SetText(kAcceptanceLeaveApplication,"Leave Application");
  SetText(kAcceptanceLeaveTransfer,"Leave Transfer");
  SetText(kAcceptanceOP,"Payments");
  SetText(kAcceptanceProjectAct,"Project Activities");
  SetText(kAcceptanceTBBU,"Project Budgets");
  SetText(kAcceptanceVI,"#Purchase Invoices#");
  SetText(kAcceptancePO,"Purchase Orders");
  SetText(kAcceptanceQT,"Quotations");
  SetText(kAcceptanceCashIV,"Sales Cash Notes");
  SetText(kAcceptanceCredIV,"Sales #Credit Notes#");
  SetText(kAcceptanceIV,"Sales Invoices");
  SetText(kAcceptanceOR,"Sales Orders");
  SetText(kAcceptanceSD,"#Stock Depreciations#");
  SetText(kAcceptanceTLog,"Travel Log");
  SetText(kAcceptanceMarginExcept,"Margin Exception");
//  SetText(kAcceptanceStockTake,"#Stocktaking#");
//  SetText(kAcceptanceSTERequest,"Short term enabler request"); //should this be available to all customers?
  EndSet;

  SetBegin(435);
  SetText(kAcceptanceTypeNone,"None");
  SetText(kAcceptanceTypeUser,"User");
//  SetText(kAcceptanceTypeJobGroup,"Job Group");//no code yet
  EndSet;

  SetBegin(436);
  SetText(kAcceptanceTypeActionNone,"None");
  SetText(kAcceptanceTypeActionByOne,"By one");
  SetText(kAcceptanceTypeActionByAll,"By all");
  EndSet;

  SetBegin(437);
  SetText(kAcceptanceTypeResultNone,"None");
  SetText(kAcceptanceTypeResultEmail,"Email");
  SetText(kAcceptanceTypeResultSMS,"#SMS#");
  SetText(kAcceptanceTypeResultAlert,"Message");
  SetText(kAcceptanceTypeResultNotification,"Notification");
  EndSet;

  SetBegin(438);
  SetText(kActSeqSetPersonFixed,"Specified Person");
  SetText(kActSeqSetPersonOriginatingRecord,"From Originating Record");
  EndSet;

  SetBegin(439);
  SetText(kAcceptanceNextLevelNone,"Not Required");
  SetText(kAcceptanceNextLevelRequired,"Required");
  EndSet;
  
  SetBegin(443);
  SetText(kAcceptanceStateNotRequired,"Not Required");
//  SetText(kAcceptanceStateNotStarted,"Not Started");
//state not needed, we assign it in recorddefault, and reset it in recordsave
  SetText(kAcceptanceStateNotRequested,"Not Requested");
  SetText(kAcceptanceStatePending,"Pending");
  SetText(kAcceptanceStateApproved,"Approved");
  SetText(kAcceptanceStateRejected,"Rejected");  
  EndSet;
  
/*
434-444 
reserved for acceptance
*/

  SetBegin(445);
  SetText(0,"Calculated");
  SetText(1,"String");
  SetText(2,"Separator");
  SetText(3,"Common String");
  SetText(4,"Field");
  EndSet; 
  
  StrSetBegin(446);
  StrSetText("Program_Version","Program Version");
  StrSetText("File_Identificator","File Identificator");//INN**KPPYYYYMMDDHHMMSS
  StrSetText("Document_Identificator","Document Identificator");//INN**KPPYYYYNNNNNNNN
  StrSetText("Current_Date","Current Date");
  StrSetText("Current_Date_YYYYMMDD","Current Date (YYYYMMDD)");
  StrSetText("Year","Year");
  StrSetText("Date_D1","Date D1");
  StrSetText("Date_D2","Date D2");
  StrSetText("Date_D3","Date D3");
  StrSetText("Date_D4","Date D4");
  StrSetText("VAT_Nr","#VAT# Nr");
  StrSetText("ANA_Code","ANA Code");
  StrSetText("Company_Name","Company Name");
  StrSetText("Period_Type","Period Type"); //1 - month, 3 - quarter
  StrSetText("Period_Number","Period Number"); //1-12 or 1-4
  StrSetText("Period_Quarter","Period Quarter");//3,6,9
  EndStrSet; 

  SetBegin(447);
  SetText(0,"TXT");
  SetText(1,"DBF");
  SetText(2,"XML");
  EndSet; 
  
  StrSetBegin(448);
  StrSetText(N,"Numeric (N)");
  StrSetText(C,"Char (C)");
  StrSetText(L,"Boolean (L)");
  StrSetText(D,"Date (D)");
  EndStrSet;  
  
  SetBegin(449);
  SetText(0,"-");
  SetText(1,"Fwd Balance");
  SetText(2,"Balance");
//  SetText(2,"XML");
  EndSet;
  
  SetBegin(450);
  SetText(kDiskErrorNoFile,"File or folder does not exist");
  SetText(kDiskErrorPermission,"Insuficcient permissions");
  SetText(kDiskErrorIO,"I/O Error");
  SetText(kDiskErrorBadFD,"Bad file number");
  SetText(kDiskErrorNoSpace,"No space, Disk full");
  SetText(kDiskErrorBrokenPipe,"Broken pipe");
  SetText(kDiskErrorInternal,"Internal disk error");
  SetText(kDiskErrorChecksum,"Cache checksum disk error");
  SetText(kDiskErrorUnknown,"Unknown disk error");
  SetText(kDiskErrorSeekFailed,"Seek Failed");
  SetText(kDiskErrorWriteFailed,"Write Failed");
  SetText(kDiskErrorCleanSectorInWriteList,"Clean sector in write list");
  SetText(kDiskErrorAllocatedDirtySector,"Allocated dirty sector");
  SetText(kDiskErrorDoubleDirtyingOfSector,"Double dirtying of sector");
  EndSet;
  
  SetBegin(451);
  SetText(0,"km");
  SetText(1,"#Mile#");
  EndSet;
  
  SetBegin(452);
  SetText(kTaxTransInclinTotalNo,"Tax not included in Total");
  SetText(kTaxTransInclinTotalYes,"Tax included in Total");
  EndSet;
  
  SetBegin(453);
  SetText(kTaxTransCalcBaseNet,"Net");
  SetText(kTaxTransCalcBaseInclAllPreviousTaxes,"Incl. all previously Calculated Taxes");
  SetText(kTaxTransCalculatedExternally,"Calculated Externally");
  EndSet;
  
  SetBegin(454);
  SetText(kBugStatusNotVerified,"Not Verified");
  SetText(kBugStatusVerified,"Verified");
  SetText(kBugStatusFixed,"Fixed");
  SetText(kBugStatusTested,"Tested");
  SetText(kBugStatusNotABug,"Not A Bug");
  SetText(kBugStatusDuplicate,"Duplicate");
  EndSet;
  
  SetBegin(455);
  SetText(kBugPrioCrash,"Crash");
  SetText(kBugPrioReleseCritical,"Release Critical");
  SetText(kBugPrioHigh,"High");
  SetText(kBugPrioNormal,"Normal");
  SetText(kBugPrioLow,"Low");
  EndSet;

  SetBegin(456);
  SetText(kCountryAddrLineUserAddrNone,"None");
  SetText(kCountryAddrLineUserAddr0,"Address 1");
  SetText(kCountryAddrLineUserAddr1,"Address 2");
  SetText(kCountryAddrLineUserAddr2,"Address 3");
  SetText(kCountryAddrLineUserAddr3,"Address 4");
  SetText(kCountryAddrLineUserAddr4,"Address 5");
  EndSet;
  
  SetBegin(457);
  SetText(0,"Main Item");
  SetText(1,"Part Item");
  EndSet;
  
  SetBegin(458);
  SetText(0,"-");
  SetText(kHttpStatusContinue,"100 - Continue");
  SetText(kHttpStatusSwitchingProtocols,"101 - Switching Protocols");
  SetText(kHttpStatusOK,"200 - OK");
  SetText(kHttpStatusCreated,"201 - Created");
  SetText(kHttpStatusAccepted,"202 - Accepted");
  SetText(kHttpStatusNonAuthInfo,"203 - Non Auth Info");
  SetText(kHttpStatusNoContent,"204 - No Content");
  SetText(kHttpStatusResetContent,"205 - Reset Content");
  SetText(kHttpStatusPartialContent,"206 - Partial Content");
  SetText(kHttpStatusMultipleChoices,"300 - Multiple Choices");
  SetText(kHttpStatusMovedPermanently,"301 - Moved Permanently");
  SetText(kHttpStatusFound,"302 - Found");
  SetText(kHttpStatusSeeOther,"303 - See Other");
  SetText(kHttpStatusNotModified,"304 - Not Modified");
  SetText(kHttpStatusUseProxy,"305 - Use Proxy");
  SetText(kHttpStatusUnused,"306 - Unused");
  SetText(kHttpStatusTemporaryRedirect,"307 - Temporary Redirect");
  SetText(kHttpStatusBadRequest,"400 - Bad Request");
  SetText(kHttpStatusUnauthorized,"401 - Unauthorized");
  SetText(kHttpStatusPaymentRequired,"402 - Payment Required");
  SetText(kHttpStatusForbidden,"403 - Forbidden");
  SetText(kHttpStatusNotFound,"404 - Not Found");
  SetText(kHttpStatusMethodNotAllowed,"405 - Method Not Allowed");
  SetText(kHttpStatusNotAcceptable,"406 - Not Acceptable");
  SetText(kHttpStatusProxyAuthRequired,"407 - Proxy Auth Required");
  SetText(kHttpStatusRequestTimeout,"408 - Request Timeout");
  SetText(kHttpStatusConflict,"409 - Conflict");
  SetText(kHttpStatusInternalServerError,"500 - Internal Server Error");
  SetText(kHttpStatusNotImplemented,"501 - Not Implemented");
  SetText(kHttpStatusBadGateway,"502 - Bad Gateway");
  SetText(kHttpStatusServiceUnavailable,"503 - Service Unavailable");
  SetText(kHttpStatusGatewayTimeout,"504 - Gateway Timeout");
  SetText(kHttpStatusHttpVersionNotSupported,"505 - Version Not Supported");
  EndSet;
  
  SetBegin(459);
  SetText(kWebFunctionAccessPublic,"Public");
  SetText(kWebFunctionAccessContactLogin,"Logged In Contact or User");
  SetText(kWebFunctionAccessUserLogin,"Logged In User");
  SetText(kWebFunctionAccessOAUTH2Login,"Logged In OAuth2 User");
  EndSet;
  
  SetBegin(460);
  SetText(kPURateFromPurchaseOrder,"From Purchase Order");
  SetText(kPURateOnGoodsReceiptDate,"On Goods Receipt Date");
  SetText(kPURateFromPrepayment,"From Prepayment");
  EndSet;
  
  SetBegin(461);
  SetText(kVIRateFromPurchaseOrder,"From Purchase Order");
  SetText(kVIRateOnPurchaseInvoiceDate,"On #Purchase Invoice# Date");
  SetText(kVIRateFromPrepayment,"From Prepayment");
  EndSet;
  
  SetBegin(462);
  SetText(kCURegFieldTypeName,"Name");
  SetText(kCURegFieldTypeInvAddr0,"Invoice Address 1");
  SetText(kCURegFieldTypeInvAddr1,"Invoice Address 2");
  SetText(kCURegFieldTypeInvAddr2,"Invoice Address 3");
  SetText(kCURegFieldTypeInvAddr3,"Invoice Address 4");
  SetText(kCURegFieldTypeInvAddr4,"Invoice Address 5");
  SetText(kCURegFieldTypeSorting,"Sort Key");
  SetText(kCURegFieldTypeDepartment,"Department");
  SetText(kCURegFieldTypePhone,"Telephone");
  SetText(kCURegFieldTypeFax,"Fax");
  SetText(kCURegFieldTypeAltPhone,"Alternate Phone");
  SetText(kCURegFieldTypeMobile,"#Mobile#");
  SetText(kCURegFieldTypeSkypeName,"Skype Name");
  SetText(kCURegFieldTypeSIPCode,"SIP");
  SetText(kCURegFieldTypeeMail,"Email");
  SetText(kCURegFieldTypeeMailConfirm,"Email (confirm)");
  SetText(kCURegFieldTypeExtension,"Extension");
  SetText(kCURegFieldTypePerson,"Primary Contact");
  SetText(kCURegFieldTypewwwAddr,"Web Site");
  SetText(kCURegFieldTypeClassificationSelect,"Classification (select)");
  SetText(kCURegFieldTypeClassificationRadio,"Classification (radio)");
  SetText(kCURegFieldTypeClassificationCheckbox,"Classification (checkbox)");
  SetText(kCURegFieldTypePassword,"Password");
  SetText(kCURegFieldTypePasswordConfirm,"Password (confirm)");
  SetText(kCURegFieldTypeDelAddr0,"Delivery Address 1");
  SetText(kCURegFieldTypeDelAddr1,"Delivery Address 2");
  SetText(kCURegFieldTypeDelAddr2,"Delivery Address 3");
  SetText(kCURegFieldTypeDelAddr3,"Delivery Address 4");
  SetText(kCURegFieldTypeDelAddr4,"Delivery Address 5");
  SetText(kCURegFieldTypeRegNr1,"#Reg. No.# 1");
  SetText(kCURegFieldTypeRegNr2,"#Reg. No. 2#");
  SetText(kCURegFieldTypeVATNr,"#VAT Reg. No.#");
  SetText(kCURegFieldTypeCountryCode,"Country");
  SetText(kCURegFieldTypeRegion,"Region");
  SetText(kCURegFieldTypeCustCat,"Customer Category");
  SetText(kCURegFieldTypeUserStr1,"User Defined String 1");
  SetText(kCURegFieldTypeUserStr2,"User Defined String 2");
  SetText(kCURegFieldTypeUserStr3,"User Defined String 3");
  SetText(kCURegFieldTypeUserStr4,"User Defined String 4");
  SetText(kCURegFieldTypeUserStr5,"User Defined String 5");
  SetText(kCURegFieldTypeUserVal1,"User Defined Value 1");
  SetText(kCURegFieldTypeUserVal2,"User Defined Value 2");
  SetText(kCURegFieldTypeUserVal3,"User Defined Value 3");
  SetText(kCURegFieldTypeUserDate1,"User Defined Date 1");
  SetText(kCURegFieldTypeUserDate2,"User Defined Date 2");
  SetText(kCURegFieldTypeUserDate3,"User Defined Date 3");
  SetText(kCURegFieldTypeNoLetterPosting,"No Mass Letters");
  SetText(kCURegFieldTypeNoMailPosting,"No Mass Emailing");
  SetText(kCURegFieldTypeCustCode,"Customer Code");
  SetText(kCURegFieldTypeBillingType,"Billing Type");
  SetText(kCURegFieldTypePaymentTerms,"Payment Terms");
  SetText(kCURegFieldTypeNewCreditCardNumber,"Credit Card Number");
  SetText(kCURegFieldTypeNewCreditCardExpiry,"Credit Card Expiry");
  EndSet;
    
  SetBegin(463);
  SetText(kHRMCOSalaryTypeMonthly,"Monthly");
  SetText(kHRMCOSalaryTypeYearly,"Yearly");
  SetText(kHRMCOSalaryTypeWeekly,"Weekly");
  SetText(kHRMCOSalaryTypeFortnightly,"Fortnightly");
  EndSet;
  
  
  StrSetBegin(465);
//  StrSetText(IVCashDClass,"POS Invoice");
  StrSetText(NPTSIVCashDClass,"Touch Screen Invoice - POS");
  StrSetText(RestAccDClass,"Bar Tab");
  StrSetText(IVDClass,"Touch Screen Invoice - SL");
  EndStrSet;
  
  SetBegin(466);
  SetText(kXBRLElementFieldTypeMonetary,"Monetary");
  SetText(kXBRLElementFieldTypeText,"Text");
  SetText(kXBRLElementFieldTypeTextFormula,"Text Formula");
  EndSet;
  
  SetBegin(467);
  SetText(kXBRLElementReportTypeI_BAL,"Balance Sheet");
  SetText(kXBRLElementReportTypeD_PL1,"Profit & Loss 1");
  SetText(kXBRLElementReportTypeD_PL2,"Profit & Loss 2");
  SetText(kXBRLElementReportTypeD_CF1,"Cash Flow 1");
  SetText(kXBRLElementReportTypeD_CF2,"Cash Flow 2");
  SetText(kXBRLElementReportTypeD_VAT,"#VAT# Report");
  SetText(kXBRLElementReportTypeE_TaxReport,"Tax Report");
  EndSet;
  
  SetBegin(468);
  SetText(kFunctionKeyNone,"-");
  SetText(kFunctionKeyF1,"F1");
  SetText(kFunctionKeyF2,"F2");
  SetText(kFunctionKeyF3,"F3");
  SetText(kFunctionKeyF4,"F4");
  SetText(kFunctionKeyF5,"F5");
  SetText(kFunctionKeyF6,"F6");
  SetText(kFunctionKeyF7,"F7");
  SetText(kFunctionKeyF8,"F8");
  SetText(kFunctionKeyF9,"F9");
  SetText(kFunctionKeyF10,"F10");
  SetText(kFunctionKeyF11,"F11");
  SetText(kFunctionKeyF12,"F12");
  SetText(kFunctionKeyF13,"F13");
  SetText(kFunctionKeyF14,"F14");
  SetText(kFunctionKeyF15,"F15");
  SetText(kFunctionKeyF16,"F16");
  SetText(kFunctionKeyF17,"F17");
  SetText(kFunctionKeyF18,"F18");
  SetText(kFunctionKeyF19,"F19");
  SetText(kFunctionKeyF20,"F20");
  SetText(kFunctionKeyF21,"F21");
  SetText(kFunctionKeyF22,"F22");
  SetText(kFunctionKeyF23,"F23");
  SetText(kFunctionKeyF24,"F24");
  EndSet;
  
  SetBegin(469);
  SetText(kHRMCOChangeReasonDummy,"Not defined");
  SetText(kHRMCOChangeReasonNew,"New Recruitment");
  SetText(kHRMCOChangeReasonPromotion,"Promotion");
  SetText(kHRMCOChangeReasonTransfer,"Transfer");
  SetText(kHRMCOChangeReasonDemotion,"Demotion");
  EndSet;

  SetBegin(470);
  SetText(kHRMCOReasonDummy,"None");
  SetText(kHRMCOReasonResignation,"Resignation");
  SetText(kHRMCOReasonNonRenewal,"Non-renewal of contract");
  SetText(kHRMCOReasonDismissalOperational,"Dismissal - operational requirements");
  SetText(kHRMCOReasonDismissalMisconduct,"Dismissal - misconduct");
  SetText(kHRMCOReasonDismissalIncapacity,"Dismissal - incapacity");
  SetText(kHRMCOReasonMoveToOtherDepartment,"Move to other Department");
  SetText(kHRMCOReasonMoveToOtherCountry,"Move to other Country");
  SetText(kHRMCOReasonDismissalRetirement,"Retirement");
  SetText(kHRMCOReasonDismissalDeath,"Death");
  EndSet;
  
  SetBegin(471);
  SetText(kHRMJPStatusOpening,"Opening");
  SetText(kHRMJPStatusFree,"Free");
  SetText(kHRMJPStatusFilled,"Filled");
  SetText(kHRMJPStatusCancelled,"Cancelled");
  EndSet;

  SetBegin(472);
  SetText(kPOSCommandsBeforeData,"Before Data");
  SetText(kPOSCommandsAfterDate,"After Data");
  EndSet;
  
  SetBegin(473);
  SetText(kPdfFontNone,"None");
  SetText(kPdfFontTimes,"Times");
  SetText(kPdfFontCourier,"Courier");
  SetText(kPdfFontHelvetica,"Helvetica");
  SetText(kPdfFontSymbol,"Symbol");
  SetText(kPdfFontZapfDingbats,"ZapfDingbats");
  EndSet;
  
  SetBegin(474);
  SetText(kPbxTypeAsterisk10,"Asterisk 1.0 (AMI)");
  SetText(kPbxTypeAsterisk12,"Asterisk 1.2 (AMI)");
  SetText(kPbxTypeAsterisk14,"Asterisk 1.4 (AMI)");
  SetText(kPbxTypeAsterisk16,"Asterisk 1.6 (AMI)");
  SetText(kPbxTypeAsterisk18,"Asterisk 1.8 (AMI)");
  SetText(kPbxTypeTrixBox,"TrixBox (AMI)");
  SetText(kPbxTypeDigium,"Digium Switchvox");
//  SetText(kPbxTypeTapi,"TAPI 2.1 (3rd-party)");
  SetText(kPbxTypeVPBX,"VPBX");
  SetText(kPbxType3CX12,"3CX Phone System v12-14");
  EndSet;
  
  SetBegin(475);
  SetText(kPbxRuleIgnoreSIPChannel,"Ignore SIP Channel");
  SetText(kPbxRuleNoActivityForInternalCalls,"No Act For Calls Between Extensions Shorter Than");
  SetText(kPBxTrackNumber,"Track Number");
  SetText(kPbxRuleUniqueCallers,"Unique Callers Only");
  EndSet;
  
  SetBegin(476);
  SetText(kRoomPriceRestictionTypeNone,"No restrictions");
  SetText(kRoomPriceRestictionTypeAdultsNo,"Number of Adults");
  SetText(kRoomPriceRestictionTypeChildrenNo,"Number of Children");
  SetText(kRoomPriceRestictionTypeGuestsNo,"Number of Guests");
  EndSet;
  
  SetBegin(477);
  SetText(kCompOpNone,"None");
  SetText(kCompOpEquals,"Equals");
  SetText(kCompOpGreaterThan,"Greater than");
  SetText(kCompOpLessThan,"Less than");
  SetText(kCompOpGreaterThanOrEqualTo,"Greater than or Equal to");
  SetText(kCompOpLessThanOrEqualTo,"Less than or Equal to");
  SetText(kCompOpNotEqual,"Not Equal");
  SetText(kCompOpNotLessThan,"Not Less than");
  SetText(kCompOpNotGreaterThan,"Not Greater than");
  SetText(kCompOpRange,"Between");
  SetText(kCompOpTrue,"True");
  SetText(kCompOpFalse,"False");
  EndSet;

  SetBegin(478);
  SetText(kChargeTypeFixedPrice,"Fixed price");
  SetText(kChargeTypePerAdult,"Per adult");
  SetText(kChargeTypePerChild,"Per child");
  SetText(kChargeTypePerGuest,"Per guest");
  EndSet;

  SetBegin(479);
  SetText(kELockSystemTypeNone,"None");
  SetText(kELockSystemTypeTESAHT28,"Onity TESA HT28");
  EndSet;

  SetBegin(480);
//  SetText(0,"Month, Day, Year");
//  SetText(1,"Day, Month, Year");
//  SetText(2,"Year, Month, Day");
  SetText(kCalendarGregorian,"Gregorian");
  SetText(kCalendarHijri,"Hijri");
  SetText(kCalendarPersian,"Persian");
  EndSet;

  SetBegin(481);
  SetText(kCompOpLessThan,"Must be less than");
  SetText(kCompOpGreaterThan,"Must be more than");
  SetText(kCompOpRange,"Must be between");
  SetText(kCompOpNotEqual,"Must not equal");
  EndSet;
  
  SetBegin(482);
  SetText(kCompOpTrue,"For all");
  SetText(kCompOpGreaterThanOrEqualTo,"From number");
  SetText(kCompOpRange,"Between number");
  EndSet;
  
  SetBegin(483);
  SetText(kRoyaltySaleNoMaint,"Normal - Excluding Maintenance");
  SetText(kRoyaltySaleWithMaint,"Normal - Including Maintenance");
  SetText(kRoyaltySaleRental,"Rental Sale");
  EndSet;

  SetBegin(484);
  SetText(kIncludedinAllowance,"Included in Allowance");
  SetText(kExcludedinAllowance,"Excluded from Allowance");
  EndSet;
  
  SetBegin(485);
  SetText(kMultiBuyTypeNone,"None");
  SetText(kMultiBuyTypeBOGOF,"Buy x get y for free");
  SetText(kMultiBuyTypeAnyQty,"Buy any Quantity from Item Set");
  EndSet; 

  SetBegin(486);
  SetText(kMultiBuyDiscountTypeNone,"None");
  SetText(kMultiBuyDiscountTypeCheapest,"Cheapest");
  SetText(kMultiBuyDiscountTypeMostExpensive,"Most Expensive");
  EndSet; 

  SetBegin(487);
  SetText(kHRMCOJobTypeMonthly,"Monthly");
  SetText(kHRMCOJobTypeYearly,"Yearly");
  SetText(kHRMCOJobTypeWeekly,"Weekly");
  SetText(kHRMCOJobTypeFortnightly,"Fortnightly");
  EndSet;

  SetBegin(488);
  SetText(kVolumetricBarcodeDefault,"Ignore");
  SetText(kVolumetricBarcodeArtCode,"Item");
  SetText(kVolumetricBarcodeWeight,"Weight");
  SetText(kVolumetricBarcodeWeightDecimals,"Weight Decimals");
  SetText(kVolumetricBarcodeDepartment,"Department");
  SetText(kVolumetricBarcodePrice,"Price");
  SetText(kVolumetricBarcodeCheckDigit,"Check Digit");
  EndSet;

  SetBegin(489);
  SetText(kMeasurementSystemImperial,"Imperial (lb/in)");
  SetText(kMeasurementSystemMetric,"Metric (kg/cm)");
  EndSet;

  SetBegin(490);
  SetText(kPointsHistoryLoyaltyCard,"Loyalty Card");
  SetText(kPointsHistoryGiftVoucher,"Gift Vouchers");
  EndSet;

  SetBegin(491);
  SetText(kKeyModifierNone,"-");
  if (GuiType==kGuiCocoa) then begin
    SetText(kKeyModifierCtrl,"Cmd");
  end else begin
    SetText(kKeyModifierCtrl,"Ctrl");
  end;
  SetText(kKeyModifierShift,"Shift");
  if (GuiType==kGuiCocoa) then begin
    SetText(kKeyModifierCtrlShift,"Cmd + Shift");
  end else begin
    SetText(kKeyModifierCtrlShift,"Ctrl + Shift");
  end;
  EndSet;

  SetBegin(492);
  SetText(kTransactionFiscalTypeNormal,"N - Normal");
  SetText(kTransactionFiscalTypeCorrection,"R - Corrections");
  SetText(kTransactionFiscalTypeAdjustment,"J - Adjustments");
  SetText(kTransactionFiscalTypeYearEnd,"A - Year End");
//  if (HasLocalization("ARG,PRT")) then begin
    SetText(kTransactionFiscalTypeYearEndStage1,"1 - Year End Stage 1");
    SetText(kTransactionFiscalTypeYearEndStage2,"2 - Year End Stage 2");
//  end;  
  EndSet;
     
  StrSetBegin(493);
  StrSetText(OpenPOSSessionsm,"Open Session");
  StrSetText(ClosePOSSessionsm,"Close Session");
  StrSetText(POSMoneyInsm,"Cash In");
  StrSetText(POSMoneyOutsm,"Cash Out");
  StrSetText(IVCashCashupRnsm,"Cash Up Report");
  EndStrSet;
  
  SetBegin(494); // bar tab, subset of 431
  SetText(kPOSButtonTypeBlank,"Blank");
  SetText(kPOSButtonTypeServiceCharge,"Add Service Charge");  
  SetText(kPOSButtonTypeAddOrderDiscount,"Add Discount");  
  SetText(kPOSButtonTypeAllInvoices,"All Tabs");
  SetText(kPOSButtonTypeAmendLine,"Amend Line");
  SetText(kPOSButtonTypeBookings,"Bookings");  
  SetText(kPOSButtonTypeCalculateTip,"Calculate Tip");  
  SetText(kPOSButtonTypeCashPayment,"Cash");
  SetText(kPOSButtonTypeCashupReport,"Cash Up Report");
  SetText(kPOSButtonTypeChangeAddress,"Change Address");    
  SetText(kPOSButtonTypeChangeDiscountMatrix,"Change Discount Matrix");
  SetText(kPOSButtonTypeLogin,"Change User");  
  SetText(kPOSButtonTypeChequePayment,"#Cheque#");
  SetText(kPOSButtonTypeCloseSession,"Close Session");
  SetText(kPOSButtonTypeCreditCardPayment,"Credit Card");
//  SetText(kPOSButtonTypeCreditCardPaymentReversal,"Credit Card Payment Reversal");
  SetText(kPOSButtonTypeCustomerSearch,"Customer Search");
  SetText(kPOSButtonTypeXReading,"Daily Report");
  SetText(kPOSButtonTypeZReading,"Daily Z Report");
  SetText(kPOSButtonTypeDebitCardPayment,"Debit Card");
  SetText(kPOSButtonTypeDeleteItem,"Delete Row");
  SetText(kPOSButtonTypeGotoPage,"Display Page");
  SetText(kPOSButtonTypeFinish,"Finish");  
  SetText(kPOSButtonTypeFinishAndPrint,"Finish and Print");  
  SetText(kPOSButtonTypeGiftVoucherPayment,"Gift Voucher");
  SetText(kPOSButtonTypeInsertFreeTextOnMatrix,"Free Text Instruction");
  SetText(kPOSButtonTypeInstructions,"Instructions");  
  SetText(kPOSButtonTypeInvalidateInvoice,"Invalidate Tab");
  SetText(kPOSButtonTypeItem,"Item");
  SetText(kPOSButtonTypeItemSearch,"Item Search");
  SetText(kPOSButtonTypeKitchenOrder,"Kitchen Order");  
  SetText(kPOSButtonTypeLoyaltyPointsBonus,"Loyalty Bonus Points");
  SetText(kPOSButtonTypeLoyaltyCard,"Loyalty Card");
  SetText(kPOSButtonTypeLoyaltyPointsPayment,"Loyalty Points Payment");
  SetText(kPOSButtonTypeMergeBarTabs,"Merge Tabs");  
  SetText(kPOSButtonTypeMoveToBarTab,"Move Items to Bar Tab");  
  SetText(kPOSButtonTypeModifier,"Modifier");
  SetText(kPOSButtonTypeOnHotelGuestAccount,"On Hotel Guest Account");  
  SetText(kPOSButtonTypeOpenCashDrawer,"Open Cash Drawer");  
  SetText(kPOSButtonTypeOpenRecord,"Open Record");
  SetText(kPOSButtonTypeOpenSession,"Open Session");
  SetText(kPOSButtonTypOpenInvoices,"Open unfinished Tabs");  
  SetText(kPOSButtonTypeOpenTaxMatrix,"Open Tax Matrix");  
  SetText(kPOSButtonTypSaveInvoice,"Park Tab");
  SetText(kPOSButtonTypePayment,"Pay");
  SetText(kPOSButtonTypePaymentButtonsLayout,"Pay (Buttons layout)");
  SetText(kPOSButtonTypePaymentOneMode,"Pay (one Mode)");
  SetText(kPOSButtonTypePriceLookup,"Price Lookup");
  SetText(kPOSButtonTypePrintCancellation,"Print Cancellation");  
  SetText(kPOSButtonTypePrintFireOrder,"Print Fire Order");  
  SetText(kPOSButtonTypePrintInvoice,"Print Invoice"); 
  SetText(kPOSButtonTypePrintPreview,"Print Preview");  
  SetText(kPOSButtonTypePrintOrder,"Print Tab");  
  SetText(kPOSButtonTypePrintOrderToKitchen,"Print Tab to Kitchen");  
  SetText(kPOSButtonTypeReprintReceipt,"Reprint Receipt");
  SetText(kPOSButtonTypeReturn,"Return");
  SetText(kPOSButtonTypeReturnInvoiceNo,"Return Invoice No.");
  SetText(kPOSButtonTypeRunReportOnServer,"Run Report On Server");
  SetText(kPOSButtonTypeSalesAssistant,"Sales Assistant");
  SetText(kPOSButtonTypeSelectSalesman,"Select Waiter");
  SetText(kPOSButtonTypeSetCovers,"Set Covers");  
  SetText(kPOSButtonTypeSetBarTabClass,"Set Tab Class");  
  SetText(kPOSButtonTypeSetTable,"Set Table");  
  SetText(kPOSButtonTypeHotelGuests,"Show Hotel Guests");  
  SetText(kPOSButtonTypeSplitBarTabs,"Split Tabs");  
  SetText(kPOSButtonTypeLevelTop,"Top Level");
  SetText(kPOSButtonTypeTransfertoInvoice,"Transfer to Invoice");
  SetText(kPOSButtonTypeTransfertoSL,"Transfer to #Sales Ledger#");
  SetText(kPOSButtonTypeVoidRow,"Void Item");
  EndSet;
  
  SetBegin(495); // pos invoice, subset of 431
  SetText(kPOSButtonTypeBlank,"Blank");
  SetText(kPOSButtonTypeAddCommentLine,"Add Comment Line");  
  SetText(kPOSButtonTypeAddHeaderLine,"Add Header Line");  
  SetText(kPOSButtonTypeAllInvoices,"All Invoices");
  SetText(kPOSButtonTypeAmendLine,"Amend Line");
  SetText(kPOSButtonTypeAppleCancelAEOrder,"Apple Cancel AE Order");  
  SetText(kPOSButtonTypeAppleCreateAEOrder,"Apple Create AE Order");  
  SetText(kPOSButtonTypeAppleWarrantyStatusCheck,"Apple Warranty Status Check");  
  SetText(kPOSButtonTypeBaggerSearch,"Bagger Search");
  SetText(kPOSButtonTypeCashPayment,"Cash");
  SetText(kPOSButtonTypeLogin,"Change User");  
  SetText(kPOSButtonTypeCashupReport,"Cash Up Report");
  SetText(kPOSButtonTypeChangeAddress,"Change Address");
  SetText(kPOSButtonTypeChangeDiscountMatrix,"Change Discount Matrix");
  SetText(kPOSButtonTypeChangeTerms,"Change Terms");
  SetText(kPOSButtonTypeChequePayment,"#Cheque#");
  SetText(kPOSButtonTypeCloseSession,"Close Session");
//  if (HasLocalization("POL")) then begin
    SetText(kPOSButtonTypeCorrectionInvoice,"Correction Invoice");
//  end;
  SetText(kPOSButtonTypeCreateGC,"Create Gift Voucher");
  SetText(kPOSButtonTypeCreditCardPayment,"Credit Card");
  SetText(kPOSButtonTypeCreditCardPaymentReversal,"Credit Card Payment Reversal");
  SetText(kPOSButtonTypeCreditNote,"Credit Note");
  SetText(kPOSButtonTypeCustomerSearch,"Customer Search");
  SetText(kPOSButtonTypeCustomerSearchFiltered,"Customer Search BF");
  SetText(kPOSButtonTypeXReading,"Daily Report");
  SetText(kPOSButtonTypeZReading,"Daily Z Report");
  SetText(kPOSButtonTypeDebitCardPayment,"Debit Card");
  SetText(kPOSButtonTypeDeleteItem,"Delete Row");
  SetText(kPOSButtonTypeMainSerialNr,"Device Serial Number");  
  SetText(kPOSButtonTypeGotoPage,"Display Page");
  SetText(kPOSButtonTypeVolumetricBarCodeScan,"Dynamic Barcode");
  SetText(kPOSButtonTypeEnterReferenceNumber,"Enter Reference Number");
  SetText(kPOSButtonTypeFinish,"Finish");  
  SetText(kPOSButtonTypeGetCashFloat,"Get Cash Float");
  SetText(kPOSButtonTypeGiftReceipt,"Gift Receipt");
  SetText(kPOSButtonTypeGiftVoucherPayment,"Gift Voucher");
  SetText(kPOSButtonTypeInvalidateInvoice,"Invalidate Invoice");
  SetText(kPOSButtonTypeItem,"Item");
  SetText(kPOSButtonTypeItemSearch,"Item Search");
  SetText(kPOSButtonTypeItemStatus,"Item Status");
  //SetText(kPOSButtonTypeLevelUp,"Level Up");
  SetText(kPOSButtonTypeLoyaltyPointsBonus,"Loyalty Bonus Points");
  SetText(kPOSButtonTypeLoyaltyCard,"Loyalty Card");
  SetText(kPOSButtonTypeLoyaltyPointsPayment,"Loyalty Points Payment");
  SetText(kPOSButtonTypeManagerDiscountOverride,"Manager Discount Override");
  SetText(kPOSButtonTypeModifier,"Modifier");
  SetText(kPOSButtonTypeOnAccountPayment,"On Account Payment");
  SetText(kPOSButtonTypeOnHotelGuestAccount,"On Hotel Guest Account");  
  SetText(kPOSButtonTypeOpenCashDrawer,"Open Cash Drawer");  
  SetText(kPOSButtonTypeEditCustomerRecord,"Open Customer Record");
  SetText(kPOSButtonTypeEditItemRecord,"Open Item Record");
  SetText(kPOSButtonTypOpenInvoices,"Open unfinished Invoices");  
  SetText(kPOSButtonTypeOpenSession,"Open Session");
  SetText(kPOSButtonTypeOpenTaxMatrix,"Open Tax Matrix");  
  SetText(kPOSButtonTypeSpecialMenu,"Operations Menu Function");
  SetText(kPOSButtonTypeOverrideOfficialSerNr,"Override Official Serial Number");
  SetText(kPOSButtonTypePayment,"Pay");
  SetText(kPOSButtonTypePaymentButtonsLayout,"Pay (Buttons layout)");
  SetText(kPOSButtonTypePaymentOneMode,"Pay (one Mode)");
  SetText(kPOSButtonTypePOSCommand,"POS Command");
  SetText(kPOSButtonTypePriceLookup,"Price Lookup");
  SetText(kPOSButtonTypePreviousSalesPrices,"Previous Sales Prices");
  SetText(kPOSButtonTypePrintInvoice,"Print Invoice");  
  SetText(kPOSButtonTypePutCashFloat,"Put Cash Float");
  SetText(kPOSButtonTypeConnectToCCTerminal,"Connect to CC Terminal");
  SetText(kPOSButtonTypePauseSales,"Pause Sales");  
  SetText(kPOSButtonTypePasteQuotation,"Paste Quotation");  
  SetText(kPOSButtonTypePasteSalesOrder,"Paste Sales Order");  
  SetText(kPOSButtonTypeReprintLastCCSlip,"Reprint Last CC Slip");
  SetText(kPOSButtonTypeReprintReceipt,"Reprint Receipt");
  SetText(kPOSButtonTypeResumeSales,"Resume Sales");  
  SetText(kPOSButtonTypeReturn,"Return");
  SetText(kPOSButtonTypeReturnInvoiceNo,"Return Invoice No.");
  SetText(kPOSButtonTypeReturnReason,"Return Reason");
  SetText(kPOSButtonTypeRunReportOnServer,"Run Report On Server");
  SetText(kPOSButtonTypeSalesAssistant,"Sales Assistant");
  SetText(kPOSButtonTypSaveInvoice,"Save Invoice");  
  SetText(kPOSButtonTypeSelectSalesman,"Select #Salesman#");
  SetText(kPOSButtonTypeGiftVoucherSales,"Sell Gift Voucher");
  SetText(kPOSButtonTypeSendEMail,"Send Email");
  SetText(kPOSButtonTypeSeniorCitizenDiscount,"Senior Citizen Discount");
  SetText(kPOSButtonTypeLookupSerialNr,"Serial No. Lookup");
  SetText(kPOSButtonTypeSplitItem,"Split Item");
  SetText(kPOSButtonTypeSupervisorSearch,"Supervisor Search");
//  SetText(kPOSButtonTypeLevelDown,"Level Down");
  SetText(kPOSButtonTypeLevelTop,"Top Level");
  SetText(kPOSButtonTypeTransfertoInvoice,"Transfer to Invoice");
  SetText(kPOSButtonTypeTransfertoQuotation,"Transfer to Quotation");
  SetText(kPOSButtonTypeTransfertoSL,"Transfer to Sales Ledger");
  SetText(kPOSButtonTypeTransfertoOrder,"Transfer to Sales Order");
  SetText(kPOSButtonTypeVoidRow,"Void Item");
  EndSet;
  
  SetBegin(496);
  SetText(kTableShapeRectangular,"Rectangular");
  SetText(kTableShapeRound,"Round");
  EndSet;
  
  SetBegin(497);
  SetText(kEditScale100,"100%");
  SetText(kEditScale150,"150%");
  SetText(kEditScale200,"200%");
  SetText(kEditScale300,"300%");
  EndSet;
  
  StrSetBegin(498);
  StrSetText("CashVc","Cash Events");
  StrSetText("CouponVc","Credit Card Slip");
  StrSetText("GiftReceiptVc","Gift Receipts");
  StrSetText("GCVc","Issued Gift Vouchers");
  //StrSetText("MailVc","Mails"); -- no number series for mails, uses uuid as mainkey instead
  StrSetText("POSBalanceVc","POS Balances");
  StrSetText("IVCashVc","POS Invoices");
  StrSetText("POSEventVc","POS Sessions");
  EndStrSet;
  
  SetBegin(499);
  SetText(kSyncCheckResultIdentical,"Identical");
  SetText(kSyncCheckResultDifferent,"Different");
  SetText(kSyncCheckResultDifferentOK,"Ok Difference");
  SetText(kSyncCheckResultNotOnServer,"Not On Server");
  EndSet;
  
  SetBegin(500);
  SetText(kOfficialNumTypeAllIVVc,"All Invoices");
  SetText(kOfficialNumTypeInterestIVVc,"Interest Invoices");
  SetText(kOfficialNumTypeCashIVVc,"Cash Notes");
  SetText(kOfficialNumTypeCreditIVVc,"#Credit Notes#");
//  if (HasLocalization("PRT")) then begin  //HasLocalization: Not showing for VAT Law : Portugal
    SetText(kOfficialNumTypeCashInvoiceReceiptPRTIVVc,"Invoice/Receipt");
    SetText(kOfficialNumTypeManualCashInvoiceReceiptIVVc,"Invoice/Receipt Manual");
    SetText(kOfficialNumTypeRecoverdCashInvoiceReceiptIVVc,"Invoice/Receipt Recovered");
//  end;
  SetText(kOfficialNumTypeIVVc,"Normal Invoice");
  SetText(kOfficialNumTypeReceiptIVVc,"Invoice/Self Employed Receipt");
  SetText(kOfficialNumTypeLiquidationIVVc,"Invoice/Liquidation");
  SetText(kOfficialNumTypeSpecialSalesIVVc,"Normal Invoice, Special Sales");
  SetText(kOfficialNumTypeRestAccVc,"Bar Tab");
  SetText(kOfficialNumTypePOSIVVc,"POS Invoice");
  SetText(kOfficialNumTypeSHVc,"Delivery");
//  if (HasLocalization("PRT")) then begin
    SetText(kOfficialNumTypeManualSHVc,"Deliveries Manual");
    SetText(kOfficialNumTypeRecoverdSHVc,"Deliveries Recovered");
//  end;
  SetText(kOfficialNumTypeQTProformaVc,"Proforma Invoices, Quotations");
  SetText(kOfficialNumTypeRetVc,"Returned Goods");
//  if (HasLocalization("PRT")) then begin
    SetText(kOfficialNumTypeManualRetVc,"Returned Goods Manual");
    SetText(kOfficialNumTypeRecoverdRetVc,"Returned Goods Recovered");
//  end;
  SetText(kOfficialNumTypeRetPUVc,"Returned Goods to #Supplier#");
//  if (HasLocalization("PRT")) then begin
    SetText(kOfficialNumTypeManualRetPUVc,"Returned Goods to #Supplier# Manual");
    SetText(kOfficialNumTypeRecoverdRetPUVc,"Returned Goods to #Supplier# Recovered");
//  end;
  SetText(kOfficialNumTypeStockMovVc,"#Stock# Movements");
//  if (HasLocalization("PRT")) then begin
    SetText(kOfficialNumTypeManualStockMovVc,"#Stock# Movements Manual");
    SetText(kOfficialNumTypeRecoverdStockMovVc,"#Stock# Movements Recovered");
//  end;
  SetText(kOfficialNumTypeOwnGoodsTransStockMovVc,"#Stock# Movements Transport of own goods");
//  if (HasLocalization("PRT")) then begin
    SetText(kOfficialNumTypeManualOwnGoodsTransStockMovVc,"#Stock# Movements Transport of own goods Manual");
    SetText(kOfficialNumTypeRecoverdOwnGoodsTransStockMovVc,"#Stock# Movements Transport of own goods Recovered");
//  end;
  SetText(kOfficialNumTypeConsigmentStockMovVc,"#Stock# Movements Sales Consignment Stock");
//  if (HasLocalization("PRT")) then begin
    SetText(kOfficialNumTypeManualConsigmentStockMovVc,"#Stock# Movements Sales Consignment Stock Manual");
    SetText(kOfficialNumTypeRecoverdConsigmentStockMovVc,"#Stock# Movements Sales Consignment Stock Recovered");
//  end;
  SetText(kOfficialNumTypeThirdEntGoodsTransStockMovVc,"#Stock# Movements Transport of goods of 3rd Entities");
//  if (HasLocalization("PRT")) then begin
    SetText(kOfficialNumTypeManualThirdEntGoodsTransStockMovVc,"#Stock# Movements Transport of goods of 3rd Entities Manual");
    SetText(kOfficialNumTypeRecoverdThirdEntGoodsTransStockMovVc,"#Stock# Movements Transport of goods of 3rd Entities Recovered");
//  end;
  SetText(kOfficialNumTypeGlobalTransStockMovVc,"#Stock# Movements Global Transport");
//  if (HasLocalization("PRT")) then begin
    SetText(kOfficialNumTypeManualGlobalTransStockMovVc,"#Stock# Movements Global Transport Manual");
    SetText(kOfficialNumTypeRecoverdGlobalTransStockMovVc,"#Stock# Movements Global Transport Recovered");
//  end;
  SetText(kOfficialNumTypeORVc,"Sales Orders");
  SetText(kOfficialNumTypeManualIVVc,"Normal Invoices Manual");
  SetText(kOfficialNumTypeManualCashIVVc,"Cash Notes Manual");
  SetText(kOfficialNumTypeManualPOSIVVc,"POS Invoices Manual");
  SetText(kOfficialNumTypeManualCreditIVVc,"#Credit Notes# Manual");
  SetText(kOfficialNumTypeManualInterestIVVc,"Interest Invoices Manual");
  SetText(kOfficialNumTypeRecoverdIVVc,"Normal Invoices recovered from Ddmaged Database");
  SetText(kOfficialNumTypeRecoverdCashIVVc,"Cash Notes recovered from damaged Database");
  SetText(kOfficialNumTypeRecoverdPOSIVVc,"POS Invoices recovered from damaged Database");
  SetText(kOfficialNumTypeRecoverdCreditIVVc,"#Credit Notes# recovered from damaged Database");
  SetText(kOfficialNumTypeRecoverdInterestIVVc,"Interest Invoices recovered from damaged Database");
//  if (HasLocalization("PRT")) then begin
    SetText(kOfficialNumTypeIPVc,"Receipts");
    SetText(kOfficialNumTypeManualIPVc,"Receipts Manual");
    SetText(kOfficialNumTypeRecoveredIPVc,"Receipts Recovered from Damaged Database");
    SetText(kOfficialNumTypeCreditIVCashVc,"Normal Credit POS Invoice");
    SetText(kOfficialNumTypeManualCreditIVCashVc,"Manual Credit POS invoice");
    SetText(kOfficialNumTypeRecoverdCreditIVCashVc,"Credit POS Invoice recovered from damaged Database");
//  end;
  SetText(kOfficialNumTypeConsignmentInvoiceStockMovVc,"#Stock# Movements Consignment Invoices");
  EndSet;
  
  SetBegin(501);
  SetText(kLegalInvNrSelectionTypeManual,"Manual");
  SetText(kLegalInvNrSelectionTypeAtOK,"At OK");
  SetText(kLegalInvNrSelectionTypeAtInsert,"At Insert");
  SetText(kLegalInvNrSelectionTypeAtPrintout,"At Printout");
//  if (HasLocalization("PRT")) then begin
    SetText(kLegalInvNrSelectionTypeAtSendingERecord,"At Sending E-Record");
//  end;
  EndSet;

  SetBegin(502);
  SetText(kLegalInvNrChronologyTypeNone,"None");
  SetText(kLegalInvNrChronologyTypeForced,"Force");
  EndSet;

  SetBegin(503);
  SetText(kDelAddrFieldTypeDelCode,"Del. Code");
  SetText(kDelAddrFieldTypeComment,"Comment");
  SetText(kDelAddrFieldTypeName,"Name");
  SetText(kDelAddrFieldTypeDelAddr0,"Delivery Address 1");
  SetText(kDelAddrFieldTypeDelAddr1,"Delivery Address 2");
  SetText(kDelAddrFieldTypeDelAddr2,"Delivery Address 3");
  SetText(kDelAddrFieldTypeDelAddr3,"Delivery Address 4");
  SetText(kDelAddrFieldTypeDelAddr4,"Delivery Address 5");
  SetText(kDelAddrFieldTypeDelCountry,"Country");
  SetText(kDelAddrFieldTypeContact,"Contact");
  SetText(kDelAddrFieldTypePhone,"Telephone");
  SetText(kDelAddrFieldTypeFax,"Fax");
  SetText(kDelAddrFieldTypeEmail,"Email");
  EndSet;
  
  SetBegin(504);
  SetText(kBarcodeTypeNone,"-");
  SetText(kBarcodeCode128,"Code 128");
  SetText(kBarcodeCode39,"Code 39");
  SetText(kBarcodeEAN13,"EAN 13");
  SetText(kBarcodeQR,"QR Code");
  EndSet;

  SetBegin(505);
  SetText(kCalculateTax,"Calculate");
  SetText(kDoNotCalculateTax,"Don't calculate");
  EndSet;
  
  StrSetBegin(506); //465 Subset for Books
  StrSetText(NPTSIVCashDClass,"POS Invoice");
  if (HasModRest or HasBar) then begin
    StrSetText(RestAccDClass,"Bar Tab");
  end;
  EndStrSet;

  SetBegin(507); //subset of set 71
  SetText(0,"Master Control");
  SetText(3,"Invoice"); 
  SetText(8,"POS Invoices Touch Screen"); 
  EndSet;
  
  SetBegin(508);
  SetText(kAssetTransTypeNone,"None");
  SetText(kAssetTransTypeNewAsset,"New Asset");
  SetText(kAssetTransTypeUpdateAsset,"Update Asset");
  SetText(kAssetTransTypeRevaluateAsset,"Revaluate Asset");
  EndSet;

  SetBegin(509);
  SetText(kNonTREO,"Non-TREO");
  SetText(kTREO,"TREO");
  EndSet;

  SetBegin(510);
  SetText(kNPTSNewCUFieldsEditStateNormal,"Normal");
  SetText(kNPTSNewCUFieldsEditStateViewOnly,"View Only");
  EndSet;

  SetBegin(511);
  SetText(kVATCalcRuleFullAmount,"Full Amount");
  SetText(kVATCalcRuleInRangeAmount,"Amount in Range");
  SetText(kVATCalcRuleSkip,"Skip Calculation");
  EndSet;

  SetBegin(512);  //subset of set 384
  SetText(kUserDefRepColumnTypeCode,"Code");
  SetText(kUserDefRepColumnTypeComment,"Comment");
  SetText(kUserDefRepColumnTypeActuals,"Actuals");
  SetText(kUserDefRepColumnTypeColumnsSumup,"Columns Sumup");
  EndSet;

  SetBegin(513); /* Subset of set 15 for Books Invoicing*/
  SetText(CASHINVFORMPS,"Cash Notes");
  SetText(CULABFORMPS,"Customer/Contact Label");
  SetText(INV1FORMPS,"Invoice");
  SetText(REMFORMPS,"Reminder");      
  EndSet;  

//remeber to update MailTextRegisterSClass
  SetBegin(514);
  SetText(kMailActivity,"Activity");
  SetText(kMailLetter,"Customer Letter");
  SetText(kMailInvoice,"Invoice");
  SetText(kMailOpenInvCustStatement,"Open Invoice Customer Statement");
  SetText(kMailPeriodicCustStatement,"Periodic Customer Statement");
  SetText(kMailPeriodicSuppStatement,"Periodic #Supplier# Statement");
  SetText(kMailPOSInvoice,"POS Invoice");
  SetText(kMailPurchaseOrder,"Purchase Order");
  SetText(kMailQuotation,"Quotation");
  SetText(kMailSalesOrder,"Sales Order");
  EndSet;

  SetBegin(515); 
  SetText(kMailRowTypeTo,"To");
  SetText(kMailRowTypeCC,"Cc");
  SetText(kMailRowTypeBCC,"Bcc");
  EndSet;

  SetBegin(516); 
  SetText(kOutArgEInvoicesDefault,"Default");
  SetText(kOutArgEInvoicesDonotSend,"Do not send");
  SetText(kOutArgEInvoicesSend,"Send using CAE");
  SetText(kOutArgEInvoicesSendWithCAEA,"Send using CAEA");
  EndSet;
  
  SetBegin(517); 
  EndSet;
  
  SetBegin(518); // touch screen invoice, subset of 431
  SetText(kPOSButtonTypeBlank,"Blank");
  SetText(kPOSButtonTypeAddCommentLine,"Add Comment Line");  
  SetText(kPOSButtonTypeAddHeaderLine,"Add Header Line");  
  SetText(kPOSButtonTypeAddHiddenLine,"Add Hidden Line");  
  SetText(kPOSButtonTypeAddSubtotalLine,"Add Subtotal Line");  
  SetText(kPOSButtonTypeAllInvoices,"All Invoices");
  SetText(kPOSButtonTypeAmendLine,"Amend Line");
  SetText(kPOSButtonTypeAppleCancelAEOrder,"Apple Cancel AE Order");  
  SetText(kPOSButtonTypeAppleCreateAEOrder,"Apple Create AE Order");  
  SetText(kPOSButtonTypeAppleWarrantyStatusCheck,"Apple Warranty Status Check");  
  SetText(kPOSButtonTypeCashPayment,"Cash");
  SetText(kPOSButtonTypeChangeAddress,"Change Address");
  SetText(kPOSButtonTypeChangeDiscountMatrix,"Change Discount Matrix");
  SetText(kPOSButtonTypeEditDate,"Change Date");
  SetText(kPOSButtonTypeChangeTerms,"Change Terms");
  SetText(kPOSButtonTypeLogin,"Change User");  
  SetText(kPOSButtonTypeCashupReport,"Cash Up Report");
  SetText(kPOSButtonTypeChequePayment,"#Cheque#");
  SetText(kPOSButtonTypeCloseSession,"Close Session");
  SetText(kPOSButtonTypeConnectToPrepayment,"Connect to Prepayment");
  SetText(kPOSButtonTypeCreateActivity,"Create Activity");
  SetText(kPOSButtonTypeCreateCashin,"Create Cash in");
  SetText(kPOSButtonTypeCreateCashOut,"Create Cash Out");
  SetText(kPOSButtonTypeCreateCorrectionInvoice,"Create Correction Invoice");
  SetText(kPOSButtonTypeCreateCreditNote,"Create #Credit Note#");
  SetText(kPOSButtonTypeCreateCreditEMail,"Create Email");
  SetText(kPOSButtonTypeCreateGC,"Create Gift Voucher");
  SetText(kPOSButtonTypeCreditCardPayment,"Credit Card");
  SetText(kPOSButtonTypeCustomerSearch,"Customer Search");
  SetText(kPOSButtonTypeCustomerSearchFiltered,"Customer Search BF");
  SetText(kPOSButtonTypeXReading,"Daily Report");
  SetText(kPOSButtonTypeZReading,"Daily Z Report");
  SetText(kPOSButtonTypeDebitCardPayment,"Debit Card");
  SetText(kPOSButtonTypeDeleteItem,"Delete Row");
  SetText(kPOSButtonTypeGotoPage,"Display Page");
  SetText(kPOSButtonTypeFinish,"Finish");  
  SetText(kPOSButtonTypeGetCashFloat,"Get Cash Float");
  SetText(kPOSButtonTypeGiftVoucherPayment,"Gift Voucher");
  SetText(kPOSButtonTypeInvoiceStatus,"Invoice Status");
  SetText(kPOSButtonTypeItem,"Item");
  SetText(kPOSButtonTypeItemSearch,"Item Search");
  SetText(kPOSButtonTypeItemStatus,"Item Status");
  SetText(kPOSButtonTypeLoyaltyPointsBonus,"Loyalty Bonus Points");
  SetText(kPOSButtonTypeLoyaltyCard,"Loyalty Card");
  SetText(kPOSButtonTypeLoyaltyPointsPayment,"Loyalty Points Payment");
  SetText(kPOSButtonTypeMainSerialNr,"Device Serial Number");  
  SetText(kPOSButtonTypeManagerDiscountOverride,"Manager Discount Override");
  SetText(kPOSButtonTypeOpenCalendar,"Open Calendar");  
  SetText(kPOSButtonTypeOpenCashDrawer,"Open Cash Drawer");  
  SetText(kPOSButtonTypeEditCustomerRecord,"Open Customer Record");
  SetText(kPOSButtonTypeEditItemRecord,"Open Item Record");
  SetText(kPOSButtonTypeOpenNLTransaction,"Open #NL# Transaction");  
  SetText(kPOSButtonTypeOpenSession,"Open Session");
  SetText(kPOSButtonTypeOpenTaxMatrix,"Open Tax Matrix");  
  SetText(kPOSButtonTypOpenInvoices,"Open unfinished Invoices");  
  SetText(kPOSButtonTypePasteQuotation,"Paste Quotation");  
  SetText(kPOSButtonTypePasteSalesOrder,"Paste Sales Order");  
  SetText(kPOSButtonTypePayment,"Pay");
  SetText(kPOSButtonTypePaymentButtonsLayout,"Pay (Buttons layout)");
  SetText(kPOSButtonTypePaymentOneMode,"Pay (one Mode)");
  SetText(kPOSButtonTypePOSCommand,"POS Command");
  SetText(kPOSButtonTypePrintProformaInvoice,"Print Proforma Invoice");  
  SetText(kPOSButtonTypePutCashFloat,"Put Cash Float");
  SetText(kPOSButtonTypeConnectToCCTerminal,"Connect to CC Terminal");
  SetText(kPOSButtonTypeReprintLastCCSlip,"Reprint Last CC Slip");
  SetText(kPOSButtonTypeReprintReceipt,"Reprint Receipt");
  SetText(kPOSButtonTypeReturn,"Return");
  SetText(kPOSButtonTypeReturnReason,"Return Reason");
  SetText(kPOSButtonTypeRunReportOnServer,"Run Report On Server");
  SetText(kPOSButtonTypeSelectSalesman,"Select #Salesman#");
  SetText(kPOSButtonTypeGiftVoucherSales,"Sell Gift Voucher");
  SetText(kPOSButtonTypeSendToFiscalDevice,"Send to Fiscal Device");  
  SetText(kPOSButtonTypeLookupSerialNr,"Serial No. Lookup");
  SetText(kPOSButtonTypeVoidRow,"Void Item");  
  EndSet;

  SetBegin(519); 
  SetText(kAcceptanceApproverSelectionAutomatic,"Automatic");
  SetText(kAcceptanceApproverSelectionManual,"Manual");
  EndSet;

  SetBegin(520); 
  SetText(kGSXAutoEnrollmentOrder,"Auto Enrollment Order");
  SetText(kGSXCancelAutoEnrollmentOrder,"Cancel Auto Enrollment Order");
  EndSet;

  SetBegin(521); 
  SetText(kDirectDebitBankNone,"None");
  SetText(kDirectDebitBankAUSABA,"Australia - ABA");
  EndSet;

  SetBegin(522);
  SetText(kReportingUnitTypeBlank,"-");
  SetText(kReportingUnitTypeCurrentDate,"Current Date");
  SetText(kReportingUnitTypeEndofUnit,"End of Unit");
  EndSet;

  SetBegin(523);
  SetText(kReportTemplateTypeSet,"Set");
  SetText(kReportTemplateTypeDefault,"Default");
  EndSet;
  
  SetBegin(524); // pos invoice Std Accounts, subset of 431
  SetText(kPOSButtonTypeBlank,"Blank");
  SetText(kPOSButtonTypeAmendLine,"Amend Line");
  SetText(kPOSButtonTypeCashPayment,"Cash");
  SetText(kPOSButtonTypeLogin,"Change User");
  SetText(kPOSButtonTypeChequePayment,"#Cheque#");
  SetText(kPOSButtonTypeCreditCardPayment,"Credit Card");
  SetText(kPOSButtonTypeCustomerSearch,"Customer Search");
//  if (HasModPOS) then begin
//    SetText(kPOSButtonTypeCreditCardPaymentReversal,"Credit Card Payment Reversal");
//  end;
  SetText(kPOSButtonTypeDebitCardPayment,"Debit Card");
  SetText(kPOSButtonTypeDeleteItem,"Delete Row");
  SetText(kPOSButtonTypeGotoPage,"Display Page");
  SetText(kPOSButtonTypeFinish,"Finish");
  SetText(kPOSButtonTypeInvalidateInvoice,"Invalidate Invoice");
  SetText(kPOSButtonTypeItem,"Item");
  SetText(kPOSButtonTypeItemSearch,"Item Search");
//  SetText(kPOSButtonTypeOpenCashDrawer,"Open Cash Drawer");
  SetText(kPOSButtonTypOpenInvoices,"Open Invoices");
  SetText(kPOSButtonTypeOpenTaxMatrix,"Open Tax Matrix");  
  SetText(kPOSButtonTypePayment,"Pay");
  SetText(kPOSButtonTypePaymentButtonsLayout,"Pay (Buttons layout)");
  SetText(kPOSButtonTypePaymentOneMode,"Pay (one Mode)");
  SetText(kPOSButtonTypePriceLookup,"Price Lookup");
  SetText(kPOSButtonTypePrintInvoice,"Print Invoice");  
  SetText(kPOSButtonTypeReturn,"Return");
  SetText(kPOSButtonTypeReturnInvoiceNo,"Return Invoice No.");
  SetText(kPOSButtonTypeSalesAssistant,"Sales Assistant");
  SetText(kPOSButtonTypSaveInvoice,"Save Invoice");
  SetText(kPOSButtonTypeSelectSalesman,"Select #Salesman#");
  SetText(kPOSButtonTypeVoidRow,"Void Item");
  EndSet;

  SetBegin(525); // Bar Tab Std Restaurant, subset of 431
  SetText(kPOSButtonTypeBlank,"Blank");
  SetText(kPOSButtonTypeAmendLine,"Amend Line");
  SetText(kPOSButtonTypeCashPayment,"Cash");
  SetText(kPOSButtonTypeCalculateTip,"Calculate Tip");
  SetText(kPOSButtonTypeLogin,"Change User");
  SetText(kPOSButtonTypeChequePayment,"#Cheque#");
  SetText(kPOSButtonTypeCloseSession,"Close Session");
  SetText(kPOSButtonTypeCreditCardPayment,"Credit Card");
  SetText(kPOSButtonTypeCreditCardPaymentReversal,"Credit Card Payment Reversal");
  SetText(kPOSButtonTypeCustomerSearch,"Customer Search");
  SetText(kPOSButtonTypeGotoPage,"Display Page");
  SetText(kPOSButtonTypeDebitCardPayment,"Debit Card");
  SetText(kPOSButtonTypeDeleteItem,"Delete Row");
  SetText(kPOSButtonTypeFinish,"Finish");
  SetText(kPOSButtonTypeInstructions,"Instructions");
  SetText(kPOSButtonTypeInvalidateInvoice,"Invalidate Tab");
  SetText(kPOSButtonTypeItem,"Item");
  SetText(kPOSButtonTypeItemSearch,"Item Search");
  SetText(kPOSButtonTypeMergeBarTabs,"Merge Bar Tabs");
  SetText(kPOSButtonTypeMoveToBarTab,"Move Items to Bar Tab");  
//  SetText(kPOSButtonTypeOpenCashDrawer,"Open Cash Drawer");
  SetText(kPOSButtonTypeOpenSession,"Open Session");
  SetText(kPOSButtonTypOpenInvoices,"Open Tabs");
  SetText(kPOSButtonTypeOpenTaxMatrix,"Open Tax Matrix");  
  SetText(kPOSButtonTypePayment,"Pay");
  SetText(kPOSButtonTypePaymentButtonsLayout,"Pay (Buttons layout)");
  SetText(kPOSButtonTypePaymentOneMode,"Pay (one Mode)");
  SetText(kPOSButtonTypSaveInvoice,"Park Tab");
  SetText(kPOSButtonTypePriceLookup,"Price Lookup");
  SetText(kPOSButtonTypePrintInvoice,"Print Invoice");
  SetText(kPOSButtonTypePrintOrder,"Print Tab");
  SetText(kPOSButtonTypePrintFireOrder,"Print Fire Order");
  SetText(kPOSButtonTypePrintCancellation,"Print Cancellation");
  SetText(kPOSButtonTypeReprintReceipt,"Reprint Receipt");
//  SetText(kPOSButtonTypeReturn,"Return");                         //not available
//  SetText(kPOSButtonTypeReturnInvoiceNo,"Return Invoice No.");    //not available
  SetText(kPOSButtonTypeSalesAssistant,"Sales Assistant");
  SetText(kPOSButtonTypeSetTable,"Set Table");
  SetText(kPOSButtonTypeSetCovers,"Set Covers");
  SetText(kPOSButtonTypeSplitBarTabs,"Split Bar Tabs");
  SetText(kPOSButtonTypeVoidRow,"Void Item");
  EndSet;
  
  StrSetBegin(526); // 531 //SetCurLicensesFlags
  StrSetText(HasBasePackage,"Base Package");
  StrSetText(HasModAT2,"Module Assets");
  StrSetText(HasModCL,"Module Cash Book");
  StrSetText(HasModCO,"Module Contracts");
  StrSetText(HasModCheck,"Module #Cheques#");
  StrSetText(HasModCRM,"Module CRM");
  StrSetText(HasModExp,"Module Expenses");
  StrSetText(HasModHotel,"Module Hotel");
  StrSetText(HasIncomeAndExpenseBook,"Income and Expense Book");
  StrSetText(HasModNL,"Module #Nominal Ledger#");
  StrSetText(HasModPOS,"Module POS");
  StrSetText(HasModProd,"Module Production");
  StrSetText(HasModTS,"Module Projects");
  StrSetText(HasModPL,"Module #Purchase Ledger#");
//  StrSetText(HasPLIntegratedWithNL,"Module #Purchase Ledger# integrated with #Nominal Ledger#");
  StrSetText(HasModQT,"Module Quotations");
  StrSetText(HasPayroll,"Module Payroll");
  StrSetText(HasModDI,"Module Pricing");
  StrSetText(HasModPO,"Module #Purchase Orders#");
  StrSetText(HasModPP,"Module Resource Planning");
  StrSetText(HasModRest,"Module Restaurant");
  StrSetText(HasModSL,"Module #Sales Ledger#");
//  StrSetText(HasSLIntegratedWithNL,"Module #Sales Ledger# integrated with #Nominal Ledger#");
  StrSetText(HasModSO,"Module #Sales Orders#");
  StrSetText(HasModSVO,"Module Service Orders");
  StrSetText(HasModIN,"Module #Stock#");
  StrSetText(HasAccessGroups,"Access Groups");
  StrSetText(HasAccountRecon,"Account Reconciliation"); 
  StrSetText(HasAdvancedAccounting,"Advanced Accounting");
  StrSetText(HasAdvancedPricing,"Advanced Pricing");
  StrSetText(HasAdvancedStock,"Advanced Stock");
  StrSetText(HasBase2,"Base Currency");
  StrSetText(HasNLBudget,"Budgets in Nominal Ledeger");
  StrSetText(HasModCalendar,"Calendar");
  StrSetText(HasCategories,"Categories");
  StrSetText(HasCharts,"Charts");
  StrSetText(HasDetailedCharts,"Detailed Charts");
  StrSetText(Company,"Company");
  StrSetText(HasConferences,"Conferences");
  StrSetText(HasContactRelations,"Contact Relations");
  StrSetText(HasCustomerLetter,"Customer Letters");
  StrSetText(HasCustomerStatusReport,"Customer Status Report");
  StrSetText(HasDownpayments,"Downpayments");
  StrSetText(HasEInvoicing,"E-Invoicing");
  StrSetText(HasEMail,"Email");
  StrSetText(HasETaxDocuments,"E-Tax Documents");
//  StrSetText(HasExternalEMail,"External Email");//pretty useless
  StrSetText(HasFiscalPrinter,"Fiscalization");
  StrSetText(HasFormEditor,"Forms");
  StrSetText(HasIntegratedNL,"Automated Accounting Package");
//  StrSetText(HasStockIntegratedNL,"Automated #Stock# Accounting Package");
  StrSetText(HasInvoicing,"Invoicing");
  StrSetText(HasItemGroups,"Item Groups");
  StrSetText(HasLanguages,"Languages");
  StrSetText(Mailbox,"Mailbox");
  StrSetText(HasMultiCurrency,"Multi Currency");
  StrSetText(HasMultiLocations,"Multi Locations");
  StrSetText(HasPersons,"Multi Persons");
  StrSetText(HasNumberSeries,"Number Series");
  StrSetText(HasNLBudget,"#N/L# Budget");
  StrSetText(HasNLBudgetClass,"#N/L# Budget Class");
  StrSetText(HasObjects,"Tags/Objects");
  StrSetText(HasOrderClasses,"Order Classes");
//  StrSetText(HasPackageAccounting,"Package Accounting");
  StrSetText(HasPrepayments,"Prepayments"); 
  StrSetText(HasPriceLists,"Price Lists");
  StrSetText(HasProjects,"Projects");
  StrSetText(HasRegistersExports,"Exports");
  StrSetText(HasReminderLevel,"Reminders");
  StrSetText(HasRetGoodsToSupp,"Return Goods to Suppliers"); 
  StrSetText(HasReturnedGoods,"Returned Goods"); 
  StrSetText(HasRoomPackages,"Room Packages");
  StrSetText(HasRoomTypes,"Room Types");
  StrSetText(HasSalesman,"Salesman");
  StrSetText(HasSalesmanBonus,"Salesman Bonus");
  StrSetText(HasSkypeConnection,"Skype Connection");
  StrSetText(HasSerialNumbers,"Serial Numbers");
  StrSetText(ServerSlot,"Server Slot");
  StrSetText(HasSettlementDiscount,"Settlement Discount");
  StrSetText(User,"User");
  StrSetText(HasVarieties,"Varieties");
  StrSetText(HasVATZone,"#VAT# Zones");
  StrSetText(HasWorkflowOverview,"Workflow Overview");
  StrSetText(HasYodlee,"Yodlee");
  EndStrSet;

  
  SetBegin(527);
  SetText(kLicItemUnused,"Unused");
  SetText(kLicItemUsedLocally,"Used Locally");
  SetText(kLicItemTransferred,"Transferred to server");
  EndSet;
  
  SetBegin(528);
  SetText(kLicItemSourceMacAppStore,"Mac AppStore");
  SetText(kLicItemSourceiTunesStore,"iTunes Store");
  SetText(kLicItemSourceAndroidMarket,"Android Market");
  SetText(kLicItemSourceCromeWebStore,"Chrome Web Store");
  SetText(kLicItemSourceWindowsMarketplace,"Windows Marketplace");
  SetText(kLicItemSourceHansaWorld,"HansaWorld");
  EndSet;
  
  SetBegin(529);
  SetText(kLicItemTypePermanent,"Permanent");
  SetText(kLicItemTypeExpiring,"Expiring");
  SetText(kLicItemTypeRecurring,"Recurring");
  SetText(kLicItemTypeLimited,"Limited");
  EndSet;
  
  SetBegin(530); /* Subset of set 15 for Standard Products*/
  if (HasStandardCRM or HasStandardOrganizer or HasStandardCommunicator) then begin
    SetText(ACTFORMPS,"Activity");
  end;
  if (HasModIN) then begin
    SetText(ADRLABFORMPS,"Address Labels");
  end;
  if (HasModRest) then begin
    SetText(RESTACCFORMPS,"Bar Tab");
  end;
  if (HasModPOS) then begin
    SetText(IVCASHFORMPS,"Cash Invoice (POS)");
  end;
  if (HasModCO) then begin
    SetText(CONTRACTFORMPS,"Contract");
  end;
  if (HasModSL or HasStandardCRM) then begin
    SetText(CULABFORMPS,"Customer/Contact Label");
  end;
  if (HasModSO and HasModIN) then begin
    SetText(SHLABFORMPS,"Delivery Labels");
    SetText(SH1FORMPS,"Delivery Note");
  end;
  if (HasModIN) then begin
    SetText(PURCHASEFORMPS,"Goods Receipt");
    SetText(PULABFORMPS,"Goods Receipt Labels");
  end;
  if (HasModSL) then begin
    SetText(INV1FORMPS,"Invoice");
  end;
  if (HasModIN) then begin
    SetText(ITEMLABELFORMPS,"Item Label");
  end;
  if (HasModSL) then begin
    SetText(ARSFORMPS,"Open Invoice Customer Statement");
  end;
  if (HasModSO) then begin
    SetText(ORDFORMPS,"Order");      
  end;
  if (HasModPL) then begin
    SetText(OP2DFORMPS,"Payment #Cheques#");
    SetText(OPDFORMPS,"Payment Form");
  end;
  if (HasModSL) then begin
    SetText(CUPERFORMPS,"Periodic Customer Statement");
  end;
  if (HasModSO and HasModIN) then begin
    SetText(SH3FORMPS,"Picking List");
  end;
  if (HasModPL) then begin
    SetText(VIFORMPS,"#Purchase Invoice#");
  end;
  if (HasStandardCRM) then begin
    SetText(QTFORMPS,"Quotation");
  end;
  if (HasModSL) then begin
    SetText(IPDFORMPS,"Receipt Form");
  end;
  if (HasModHotel) then begin
    SetText(JOBFORMPS,"Reservation");
  end;
  if (HasModIN) then begin
    SetText(SDFORMPS,"#Stock Depreciation#");
  end;
  if (HasModNL) then begin
    SetText(TRFORMPS,"Transactions");  
  end;
  EndSet;
  
  StrSetBegin(531); // mapping between SKU and internal lic items, from enum kStdLicItem
                    // should not be used
  StrSetText(1234,"1"); // server user / slot
  StrSetText(2345,"2"); // S/L
  StrSetText(3456,"3"); // P/L
  StrSetText(3456,"4"); // IN
  StrSetText(3456,"5"); // N/L
  EndStrSet;
  
  SetBegin(532);
  SetText(kQRErrorCorrectionL,"L");
  SetText(kQRErrorCorrectionM,"M");
  SetText(kQRErrorCorrectionQ,"Q");
  SetText(kQRErrorCorrectionH,"H");
  EndSet;
  
  SetBegin(533);
  SetText(0,"Debug Detailed"); // kVerbosityDebugDetailed
  SetText(1,"Debug"); // kVerbosityDebug
  SetText(2,"Verbose"); // kVerbosityVerbose
  SetText(3,"Silent (default)"); // kVerbositySilent
  EndSet;

  SetBegin(534);
  SetText(vatUAE,"ARE");
  SetText(vatArgentinean,"ARG");
  SetText(vatAustralia,"AUS");
  SetText(vatAzerbaijan,"AZE");
  SetText(vatAngolan,"AGO");  
  SetText(vatBahrain,"BHR");
  SetText(vatBelarusian,"BLR"); 
  SetText(vatBolivian,"BOL"); 
  SetText(vatBrazil,"BRA");
  SetText(vatCanada,"CAN");
  SetText(vatChina,"CHN");
  SetText(vatChilean,"CHL");
  SetText(vatColombian,"COL");
  SetText(vatCostaRican,"CRI");
  SetText(vatCzech,"CZE");
  SetText(vatDanish,"DEN");
  SetText(vatGerman,"DEU");
  SetText(vatAlgeria,"DZA");
  SetText(vatEgypt,"EGY");
  SetText(vatSpanish,"ESP");
  SetText(vatEstonian,"EST");
  SetText(vatFinnish,"FIN");
  SetText(vatFrench,"FRA");
  SetText(vatEnglish,"GBR");
  SetText(vatGuatemalean,"GTM");
  SetText(vatHonduran,"HND");
  SetText(vatCroation,"HRV");
  SetText(vatHungarian,"HUN");
  SetText(vatIndian,"IND");
  SetText(vatIcelandic,"ISL");
  SetText(vatItalian,"ITA");  
  SetText(vatJordan,"JOR");
  SetText(vatKenyan,"KEN");
  SetText(vatKuwait,"KWT");
  SetText(vatLebanon,"LBN");
  SetText(vatLithuanian,"LTU");
  SetText(vatLatvian,"LVA");
  SetText(vatMexican,"MEX");
  SetText(vatMozambican,"MOZ");
  SetText(vatNamibian,"NAM");
  SetText(vatNicaraguan,"NIC");
  SetText(vatNorwegian,"NOR");
  SetText(vatNewZealand,"NZL");
  SetText(vatOman,"OMN");
  SetText(vatPakistan,"PAK");
  SetText(vatPanamanian,"PAN"); 
  SetText(vatPhilippinian,"PHL"); 
  SetText(vatPolish,"POL");
  SetText(vatPortuguese,"PRT");
  SetText(vatQatar,"QAT");
  SetText(vatRomanian,"ROU");
  SetText(vatRussian,"RUS");
  SetText(vatSaudiArabia,"SAU");
  SetText(vatSingaporean,"SGP");
  SetText(vatSalvadorian,"SLV");
  SetText(vatSerbian,"SRB");
  SetText(vatSlovak,"SVK");
  SetText(vatSlovenian,"SVN");
  SetText(vatSwedish,"SWE");
  SetText(vatSyria,"SYR");
  SetText(vatUkrainian,"UKR");
  SetText(vatUnitedStates,"USA");
  SetText(vatYemen,"YEM");
  SetText(vatSAF,"ZAF");
  SetText(vatZimbabwean,"ZWE");
  EndSet;

  SetBegin(535);
  SetText(0,"Header");
  SetText(1,"Matrix");
  EndSet;

//Set 536,537,538,539,540,541 in SKUeng.hal
  
  SetBegin(542);
  SetText(vatAlgeria,"Algeria");
  SetText(vatAngolan,"Angola");
  SetText(vatArgentinean,"Argentina");
  SetText(vatAustralia,"Australia");
  SetText(vatAzerbaijan,"Azerbaijan");
  SetText(vatBahrain,"Bahrain");
  SetText(vatBelarusian,"Belarus");
  SetText(vatBolivian,"Bolivia"); 
  SetText(vatBrazil,"Brazil");
  SetText(vatCanada,"Canada");
  SetText(vatChina,"China");
  SetText(vatCostaRican,"Costa Rica");
  SetText(vatCroation,"Croatia");
  SetText(vatCzech,"Czech Republic");
  SetText(vatDanish,"Denmark");
  SetText(vatEgypt,"Egypt");
  SetText(vatEstonian,"Estonia");
  SetText(vatFinnish,"Finland");
  SetText(vatFrench,"France");
  SetText(vatGerman,"Germany");
  SetText(vatGuatemalean,"Guatemala");
  SetText(vatHonduran,"Honduras");
  SetText(vatHungarian,"Hungary");
  SetText(vatIcelandic,"Iceland");
  SetText(vatIndian,"India");
  SetText(vatItalian,"Italy");
  SetText(vatJordan,"Jordan");
  SetText(vatKenyan,"Kenya");
  SetText(vatKuwait,"Kuwait");
  SetText(vatLatvian,"Latvia");
  SetText(vatLebanon,"Lebanon");
  SetText(vatLithuanian,"Lithuania");
  SetText(vatMexican,"Mexico");
  SetText(vatMozambican,"Mozambican");
  SetText(vatNamibian,"Namibia");
  SetText(vatNicaraguan,"Nicaragua");
  SetText(vatNewZealand,"New Zealand");
  SetText(vatNorwegian,"Norway");
  SetText(vatOman,"Oman");
  SetText(vatPakistan,"Pakistan");
  SetText(vatPanamanian,"Panama");
  SetText(vatPhilippinian,"Philippines"); 
  SetText(vatPolish,"Poland");
  SetText(vatPortuguese,"Portugal");
  SetText(vatQatar,"Qatar");
  SetText(vatRomanian,"Romania");
  SetText(vatRussian,"Russia");
  SetText(vatSingaporean,"Singapore");
  SetText(vatSalvadorian,"El Salvador");
  SetText(vatSaudiArabia,"Saudi Arabia");
  SetText(vatSerbian,"Serbia");
  SetText(vatSlovak,"Slovak");
  SetText(vatSlovenian,"Slovenia");
  SetText(vatSAF,"South Africa");
  SetText(vatSpanish,"Spain");
  SetText(vatSwedish,"Sweden");
  SetText(vatSyria,"Syria");
  SetText(vatUkrainian,"Ukraine");
  SetText(vatUAE,"United Arab Emirates");
  SetText(vatEnglish,"United Kingdom");
  SetText(vatUnitedStates,"United States");
  SetText(vatYemen,"Yemen");
  SetText(vatZimbabwean,"Zimbabwe");
/*
  SetText(vatAlgeria,"CAN");
  SetText(vatBahrain,"CAN");
  SetText(vatEgypt,"CAN");
  SetText(vatJordan,"CAN");
  SetText(vatKuwait,"CAN");
  SetText(vatLebanon,"CAN");
  SetText(vatOman,"CAN");
  SetText(vatPakistan,"CAN");
  SetText(vatQatar,"CAN");
*/  
  SetText(vatSaudiArabia,"Saudi Arabia");
/*  
  SetText(vatSyria,"CAN");
  SetText(vatUnitedArabEmirates,"CAN");
  SetText(vatYemen,"CAN");
*/
  EndSet;
  
  SetBegin(543);//update set 613
  SetText(kBillPaymentCC,"Credit Card");
  SetText(kBillPaymentInvoice,"Invoice");
  SetText(kBillPaymentPaypal,"Paypal");
  SetText(kBillPaymentDotpay,"Dotpay");
  SetText(kBillPaymentPaytrail,"Paytrail");
  SetText(kBillPaymentPaysera,"Paysera");
  SetText(kBillPaymentOrder,"Order");
  EndSet;

  SetBegin(544);
  SetText(kGSXAutoEnrollmentNotSent,"Not Sent");
  SetText(kGSXAutoEnrollmentSent,"Sent");
  SetText(kGSXAutoEnrollmentCancelled,"Cancelled");
  EndSet;
  
  SetBegin(545); //DO NOT TRANSLATE
  SetText(0,"IsEnterprise");
  SetText(1,"IsStandardUnused");
  SetText(2,"HasATOL");
  SetText(3,"HasAdvancedPricing");
  SetText(4,"HasApprovals");
  SetText(5,"HasBar");
  SetText(6,"HasBase2");
  SetText(7,"HasCCPayments");
  SetText(8,"HasConsignmentStock");
  SetText(9,"HasContactClassification");
  SetText(10,"HasDeliveryAddress");
  SetText(11,"HasEInvoicing");
  SetText(12,"HasEMail");
  SetText(13,"HasExternalEMail");
  SetText(14,"HasExtraNLComment");
  SetText(15,"HasHotelInterface");
  SetText(16,"HasJewelleryInterface");
  SetText(17,"HasItemClassification");
  SetText(18,"HasItemGroups");
  SetText(19,"HasKPIs");
  SetText(20,"HasLanguages");
  SetText(21,"HasLimitedAccess");
  SetText(22,"HasLocalMachines");
  SetText(23,"HasLoyaltyCards");
  SetText(24,"HasMultiCurrency");
  SetText(25,"HasMultiLocations");
  SetText(26,"HasNumberSeries");
  SetText(27,"HasPocketScreen");
  SetText(28,"HasObjects");
  SetText(29,"HasPriceLists");
  SetText(30,"HasPositions");
  SetText(31,"HasProjects");
  SetText(32,"HasSerialNumbers");
  SetText(33,"HasSkypeConnection");
  SetText(34,"HasTestFeatures");
  SetText(35,"HasTouchScreenDevice");
  SetText(36,"HasVarieties");
  SetText(37,"HasModAT2");
  SetText(38,"HasModCheck");
  SetText(39,"HasModCL");
  SetText(40,"HasModCO");
  SetText(41,"HasModCRM");
  SetText(42,"HasModExp");
  SetText(43,"HasModIN");
  SetText(44,"HasModNL");
  SetText(45,"HasModPO");
  SetText(46,"HasModPOS");
  SetText(47,"HasModPL");
  SetText(48,"HasModPP");
  SetText(49,"HasModProd");
  SetText(50,"HasModQT");
  SetText(51,"HasModRent");
  SetText(52,"HasModRest");
  SetText(53,"HasModSL");
  SetText(54,"HasModSO");
  SetText(55,"HasModSVO");
  SetText(56,"HasModTS");
  SetText(57,"HasStandardCRM");
  SetText(58,"HasStandardOrganizer");
  SetText(59,"HasStandardCommunicator");
  SetText(60,"HasSIPServerConnection");
  SetText(61,"HasOfficialSerNr");
  SetText(62,"HasPreferedOfficialSerNr");
  SetText(63,"HasTaxMatrix");
  SetText(64,"HasSalesman");
  SetText(65,"HasSecondQuantity");
  SetText(66,"HasReconLevel2");
  SetText(67,"HasSettlementDiscount");
  SetText(68,"HasTREO");
  SetText(69,"HasSimulations");
  SetText(70,"HasCategories");
  SetText(71,"HasDepartments");
  SetText(72,"HasModCourses");
  SetText(73,"HasModHotel");
  SetText(74,"HasModRsrt");
  SetText(75,"HasModWHM");
  SetText(76,"HasModCredMan");
  SetText(77,"HasFavouriteActTypes");
  SetText(78,"HasConsolidation");
  SetText(79,"HasCommunicator");
  SetText(80,"HasReminderLevel");
  SetText(81,"HasRoute");
  SetText(82,"HasMainPartner");
  SetText(83,"HasGuestUserDefined");
  SetText(84,"HasWithholdingTax");
  SetText(85,"HasWithholdingTaxAdvanced");
  SetText(86,"HasRussianPrepayment");
  SetText(87,"HasResourceDisplayGroups");  
  SetText(88,"HasHideCostPrice");  
  SetText(89,"HasFreightAdvanced");  
  SetText(90,"HasQualityControl");  
  SetText(91,"HasExtTax");  
  SetText(92,"HasAdvancedAccounting");
  SetText(93,"HasAdvancedCRM");
  SetText(94,"HasCountryPerCustomer");
  SetText(95,"HasDefineColumns");
  SetText(96,"HasAdvancedStock");
  SetText(97,"HasBranch");
  SetText(98,"HasCustItem");
  SetText(99,"HasCustomerSearchKey");
  SetText(100,"HasVATZone");
  SetText(101,"HasModHRM");
  SetText(102,"HasWAN");
  SetText(103,"HasBasePackage");
  SetText(104,"Company");
  SetText(105,"HasIOUChecks");
  SetText(106,"HasEndorsedChecks");
  SetText(107,"HasPersons");
  SetText(108,"HasIncomeAndExpenseBook");
  SetText(109,"HasFormEditor");  
  SetText(110,"HasETaxDocuments");  
  SetText(111,"HasContactRelations");  
  SetText(112,"HasContactRelations");  //?
  SetText(113,"HasPayroll");  
  SetText(114,"HasModDI");  
  SetText(115,"HasModDI");  //?
  SetText(116,"HasInvoicing");  
  SetText(117,"HasAccessGroups");  
  SetText(118,"HasAccountRecon");
  SetText(119,"HasRetGoodsToSupp");
  SetText(120,"HasReturnedGoods");
  SetText(121,"HasPrepayments");
  SetText(122,"HasStrAsSignFType");
  SetText(123,"HasAddFee");
  SetText(124,"HasNLBudget");
  SetText(125,"HasSalesGroup");
  SetText(126,"HasCreditLimit");
  SetText(127,"HasBuyBack");
  SetText(128,"HasDownpayments");
  SetText(129,"HasRemoteBackup");
  SetText(130,"NumberOfCompanies");
  SetText(131,"HasSalesmanBonus");
  SetText(132,"HasModBA");
  SetText(133,"HasModCons");
  SetText(134,"HasModCustom");
  SetText(135,"HasModEDI");
  SetText(136,"HasModIntStock");
  SetText(137,"HasModPOProg");
  SetText(138,"HasAged");
  SetText(139,"HasAdvancedProduction");
  SetText(140,"HasFiscalPrinter");
  SetText(141,"HasAccPeriods");
  SetText(142,"HasMailTags");
  SetText(143,"HasOrderClasses");
  SetText(144,"HasWorkOrders");
  SetText(145,"HasThrouLocation");
  SetText(146,"HasInvoiceOfficialSerNr");
  SetText(147,"HasNLBudgetClass");
  SetText(148,"HasRegistersExports");
  SetText(149,"HasServerInCloud");
  SetText(150,"HasPaymentGateway");
  SetText(151,"HasBankImport");
  SetText(152,"HasRestaurantBookings");
  SetText(153,"HasSLIntegratedWithNL");//not used
  SetText(154,"HasPLIntegratedWithNL");//not used
  SetText(155,"HasIntegratedNL");
  SetText(156,"HasStockIntegratedNL");//not used
  SetText(157,"HasCustomerLetter");
  SetText(158,"HasRoomPackages");
  SetText(159,"HasConferences");
  SetText(160,"HasYodlee");
  SetText(161,"HasWorkflowOverview");
  SetText(162,"HasCustomerStatusReport");
  SetText(163,"HasModCalendar");
  SetText(164,"HasRoomTypes");
  SetText(165,"HasCharts");
  SetText(166,"HasDetailedCharts");
  SetText(167,"HasPackageAccounting");
  SetText(168,"Mailbox");
  SetText(169,"HasSimAccruals");
  SetText(170,"HasFunctionTagsMax");
//add before HasFunctionTagsMax and increase HasFunctionTagsMax value  
//amend LoadWindowTagsForStandard and SetDefaultWindowTags and SetProductTags and other loops using set 545  
//HasMetroTestFeatures  
  EndSet;

  StrSetBegin(546); // SetBuildProductCode
  StrSetText(Admiral,"Admiral");
  StrSetText(Books,"Books");
  StrSetText(BooksInvoicing,"BooksInvoicing");
  StrSetText(BooksNominalLedger,"BooksNominalLedger");
  StrSetText(BooksUninstaller,"BooksUninstaller");
  StrSetText(BusinessCommunicator,"BusinessCommunicator");
  StrSetText(CashLog,"CashLog");
  StrSetText(DPD,"DPD");
  StrSetText(DriveLog,"DriveLog");
  StrSetText(StandardERP,"StandardERP");
  StrSetText(HansaWorldCRM,"HansaWorldCRM");
  StrSetText(HansaWorldCRMBasic,"HansaWorldCRMBasic");
  StrSetText(HansaWorldDocuments,"HansaWorldDocuments");
  StrSetText(MobilePOS,"MobilePOS");
  StrSetText(MobileReports,"MobileReports");
  StrSetText(MobileRestaurant,"MobileRestaurant");
  StrSetText(MobileSalesman,"MobileSalesman");
  StrSetText(MobileStock,"MobileStock");
  StrSetText(MobileSynchronizedPOS,"MobileSynchronizedPOS");
  StrSetText(OBSHousing,"OBSHousing");
  StrSetText(POSStandalone,"POSStandalone");
  StrSetText(RussianStandard,"RussianStandard");
  StrSetText(SmartApps,"SmartApps");
  StrSetText(StandardAccounts,"StandardAccounts");
  StrSetText(StandardAccounts,"StandardAccountsiDream");
  StrSetText(StandardBar,"StandardBar");
  StrSetText(StandardBookkeepingLite,"StandardBookkeepingLite");
  StrSetText(StandardBookkeepingLite,"StandardBookkeepingLiteiDream");
  StrSetText(StandardBusiness,"StandardBusiness");
  StrSetText(StandardCRM,"StandardCRM");
  StrSetText(StandardContracts,"StandardContracts");
  StrSetText(StandardUnused,"StandardUnused");
  StrSetText(StandardExpenses,"StandardExpenses");
  StrSetText(StandardHotel,"StandardHotel");
  StrSetText(StandardInvoicing,"StandardInvoicing");
  StrSetText(StandardNominalLedger,"StandardNominalLedger");
  StrSetText(StandardOrganizerMobile,"StandardOrganizerMobile");
  StrSetText(StandardPOS,"StandardPOS");
  StrSetText(StandardProjects,"StandardProjects");
  StrSetText(StandardRentals,"StandardRentals");
  StrSetText(StandardRestaurant,"StandardRestaurant");
  StrSetText(StandardStock,"StandardStock");
  StrSetText(TimeLog,"TimeLog");
  StrSetText(TravelLog,"TravelLog");
  StrSetText(StandardServer,"StandardServer");
  StrSetText(Enterprise,"Enterprise");
  StrSetText(WeHaveStock,"WeHaveStock");
  StrSetText(WeHaveInvoices,"WeHaveInvoices");
  StrSetText(WeHaveStockAndCRM,"WeHaveStockAndCRM");
  StrSetText(PAYYAPERP,"PAYYAPERP");
  StrSetText(PurplesoftERP,"PurplesoftERP");
  StrSetText(TBAS,"TBAS");
  EndStrSet;

  SetBegin(547);
  SetText(kWatchpointDiskspaceLow,"Disk Space Low");
  SetText(kWatchpointNotRunning,"Not Running");
  SetText(kWatchpointNotResponding,"Not Responding");
  SetText(kWatchpointIntentionallyNotRunning,"Not Running (intentionally)");
  SetText(kWatchpointConfigError,"Configuration Error");
  EndSet;
  
  SetBegin(548);
  SetText(kOriginTypeDomestical,"#Domestic#");
  SetText(kOriginTypeDirectImport,"Direct Import");
  SetText(kOriginTypeIndirectImport,"Imported but Purchased Domestically");
  EndSet;
  
  SetBegin(549);
  SetText(kTaxRegimeSimpleNational,"Simple national");
  SetText(kTaxRegimeSimpleNationalExcess,"Simple national with excess on annual turnover");
  SetText(kTaxRegimeNormal,"Normal");
  EndSet;

  SetBegin(550);
  SetText(0,"modSL,kKPITypeARDue");
  SetText(1,"modPL,kKPITypeAPDue");
  EndSet;
  
  StrSetBegin(551);
  StrSetText(en,"ENG");
  StrSetText(fr_CA,"FRC");
  StrSetText(fr,"FRA");
  StrSetText(de,"GER");
  StrSetText(es,"ESP");
  StrSetText(it,"ITA");
  StrSetText(sv,"SWE");
  StrSetText(da,"DAN");
  StrSetText(nn,"NOR");
  StrSetText(nb,"NOR");
  StrSetText(fi,"FIN");
  StrSetText(en_US,"USA");
  StrSetText(pt,"POR");
  StrSetText(pt_AO,"AGO");
  StrSetText(pt_BR,"BRA");
  StrSetText(tr,"TUR");
  StrSetText(is,"ICE");
  StrSetText(ru,"RUS");
  StrSetText(hu,"HUN");
  StrSetText(en_NZ,"NZE");
  StrSetText(en_AU,"AUS");
  StrSetText(cs,"CZE");
  StrSetText(sk,"SVK");
  StrSetText(pl,"POL");
  StrSetText(sl,"SLV");
  StrSetText(zh,"CHI");
  StrSetText(zh_Hant,"CHI");
  StrSetText(zh_Hans,"CHI");
  StrSetText(ar,"ARB");
  StrSetText(en_CA,"CAN");
  StrSetText(en_ZA,"SAF");
  StrSetText(af,"SAF");
  StrSetText(et,"EST");
  StrSetText(fa,"FAR");
  StrSetText(he,"HEB");
  StrSetText(lv,"LAT");
  StrSetText(lt,"LIT");
  StrSetText(ro,"ROM");
  StrSetText(sr,"SER");
  StrSetText(uk,"UKR");
  StrSetText(vi,"VIE");
  EndStrSet;

  SetBegin(552);
  SetText(kWantedSubStatusNone," ");
  SetText(kWantedSubStatusBeforeExport,"Before Export");
  SetText(kWantedSubStatusExport,"Export");
  SetText(kWantedSubStatusAfterExport,"After Export");
  SetText(kWantedSubStatusImport,"Import");
  SetText(kWantedSubStatusAfterImport,"After Import");
  SetText(kWantedSubStatusFinishUpdate,"Finish Update");
  SetText(kWantedSubStatusSystemCopyBeforeUpdate,"System Copy Before Update");
  SetText(kWantedSubStatusStopForExport,"Stop Server Before Export");
  SetText(kWantedSubStatusSystemCopyDuringUpdate,"System Copy During Update");
  SetText(kWantedSubStatusStartSystemCopiesDuringUpdate,"Start System Copies During Update");
  SetText(kWantedSubStatusStopSystemCopiesDuringUpdate,"Stop System Copies During Update");
  SetText(kWantedSubStatusSetCrontabBeforeUpdate,"Set Crontab Before Update");
  SetText(kWantedSubStatusSetCrontabAfterUpdate,"Set Crontab After Update");
  SetText(kWantedSubStatusStartSystemCopiesBeforeExport,"Start System Copies Before Export");
  SetText(kWantedSubStatusDBCopyBeforeUpdate,"HDB Copy Before Update");
  SetText(kWantedSubStatusStopSlaveSystems,"Stop Slave Systems");
  EndSet;
  
  SetBegin(553);
  SetText(kSubStatusNone," ");
  SetText(kSubStatusBeforeExport,"Before Export");
  SetText(kSubStatusExporting,"Exporting");
  SetText(kSubStatusExportingCompleted,"Export Finished");
  SetText(kSubStatusAfterExport,"After Export");
  SetText(kSubStatusImporting,"Importing");
  SetText(kSubStatusImportingCompleted,"Import Finished");
  SetText(kSubStatusAfterImport,"After Import");
  SetText(kSubStatusSystemCopyBeforeUpdate,"Updating System Copies");
  SetText(kSubStatusSystemCopyBeforeUpdateCompleted,"Updated System Copies");
  SetText(kSubStatusStopForExport,"Stopping Server");
  SetText(kSubStatusStopForExportCompleted,"Stopped Server");
  SetText(kSubStatusSystemCopyDuringUpdate,"Updating System Copies");
  SetText(kSubStatusSystemCopyDuringUpdateCompleted,"Updated System Copies");
  SetText(kSubStatusStartingSystemCopiesDuringUpdate,"Starting System Copies");
  SetText(kSubStatusStoppingSystemCopiesDuringUpdate,"Stopping System Copies");
  SetText(kSubStatusStartingSystemCopiesDuringUpdateCompleted,"Started System Copies");
  SetText(kSubStatusStoppingSystemCopiesDuringUpdateCompleted,"Stopped System Copies");
  SetText(kSubStatusSetCrontabBeforeUpdate,"Updating Crontab");
  SetText(kSubStatusSetCrontabAfterUpdate,"Updating Crontab");
  SetText(kSubStatusSetCrontabBeforeUpdateCompleted,"Updated Crontab");
  SetText(kSubStatusSetCrontabAfterUpdateCompleted,"Updated Crontab");
  SetText(kSubStatusStartingSystemCopiesBeforeExport,"Starting System Copies");
  SetText(kSubStatusStartingSystemCopiesBeforeExportCompleted,"Started System Copies");
  SetText(kSubStatusDBCopyBeforeUpdate,"Copying Database");
  SetText(kSubStatusDBCopyBeforeUpdateCompleted,"Copied Database");
  SetText(kSubStatusStoppingSlaveSystems,"Stopping Slave Systems");
  SetText(kSubStatusStoppingSlaveSystemsCompleted,"Stopped Slave Systems");
  EndSet;

  SetBegin(555);
  SetText(kCheckKeyActionLimitNumberofUsers,"Limit number of Users by");
  EndSet;
  
  StrSetBegin(556);
  StrSetText(IVVc,"Invoice");
  StrSetText(IVCashVc,"POS Invoice");
  StrSetText(RestAccVc,"Bar Tab");
  StrSetText(LocationVc,"Location");
  StrSetText(VATDeclVc,"VAT Declaration");
  StrSetText(VATRepEUSales,"#VAT# Report EU Sales");
  StrSetText(VATRepEUPurchases,"#VAT# Report EU Purchases");
  EndStrSet;
  
  SetBegin(557);
  SetText(kXMLExportRowTypeFreeText,"Free Text");
  SetText(kXMLExportRowTypeOpenTag,"Open XML Tag");
  SetText(kXMLExportRowTypeCloseTag,"Close XML Tag");
  SetText(kXMLExportRowTypeTagWithDBField,"XML Tag with Database Field");
  SetText(kXMLExportRowTypeTagWithText,"XML Tag with Text");
  SetText(kXMLExportRowTypeDBField,"Database Field");
  SetText(kXMLExportRowTypeMatrixBegin,"Matrix Start");
  SetText(kXMLExportRowTypeEndMatrix,"Matrix End");
  SetText(kXMLExportRowTypeExportDate,"Export Date");
  SetText(kXMLExportRowTypeExportTime,"Export Time");
  SetText(kXMLExportRowTypeVATPerVATCodeStart,"VAT Per VAT Code Start");
  SetText(kXMLExportRowTypeVATPerVATCodeEnd,"VAT Per VAT Code End");
  SetText(kXMLExportRowTypeVATPerVATNrStart,"VAT Per VAT No. Start");
  SetText(kXMLExportRowTypeVATPerVATNrEnd,"VAT Per VAT No. End");
  SetText(kXMLExportRowTypeCalculatedField,"Calculated Field");
//  if (HasLocalization("HRV")) then begin
    SetText(kXMLExportRowTypeCroatianMessageID,"Message ID (Croatian fiscalization)");
    SetText(kXMLExportRowTypeCroatianControlCode,"Control Code (Croatian fiscalization)");
    SetText(kXMLExportRowTypeCroatianDigitalSignature,"Digital Signature (Croatian fiscalization)");
//  end;
  EndSet;

  SetBegin(558);
  SetText(kAppStoreProductStoreNotAccepted,"Not Accepted");
  SetText(kAppStoreProductStoreAccepted,"Accepted");
  SetText(kAppStoreProductStoreForSale,"For Sale");
  SetText(kAppStoreProductStoreNeverSubmit,"Never Submit");
  SetText(kAppStoreProductStoreRemovedfromSale,"Removed from Sale");
  EndSet;

  SetBegin(559);
  SetText(kAppStoreProductSubmissionStatusNone,"None");
  SetText(kAppStoreProductSubmissionStatusReview,"Review");
  EndSet;

  SetBegin(560);
  SetText(kAppStoreSubmissionStatusNotSent,"Not Sent");
  SetText(kAppStoreSubmissionStatusSent,"Sent");
  SetText(kAppStoreSubmissionStatusAccepted,"Accepted");
  SetText(kAppStoreSubmissionStatusRejected,"Rejected");
  EndSet;
  
  SetBegin(561);
  SetText(kActionToolAction,"Tool Action");
  SetText(kActionOpenedWindow,"Open Window");
  SetText(kActionClosedWindow,"Close Window");
  SetText(kActionPushButtonAfter,"PushButton After");
  SetText(kActionJavaScriptHal,"JavaScript to Hal");
  SetText(kActionApplicationLostFocus,"Application Lost Focus");
  SetText(kActionApplicationGainedFocus,"Application Gained Focus");
  SetText(kActionApplicationCrashed,"Possible Crash");
  SetText(kActionFirstRecord,"First Record");
  //SetText(kActionMarketplaceOpen,"Marketplace - Open"); Should be used "Open window" action with proper window name
  //SetText(kActionMarketplaceClose,"Marketplace - Close");
  SetText(kActionMarketplaceAddIN,"Marketplace - Add Subscription");
  SetText(kActionMarketplaceRemoveIN,"Marketplace - Remove From Basket");
  SetText(kActionMarketplaceActivateFreemium,"Marketplace - Activate Freemium");
  SetText(kActionMarketplaceOpenBasket,"Marketplace - Open Basket");
  SetText(kActionMarketplacePaymentStarted,"Marketplace - Start Payment");
  SetText(kActionMarketplacePaymentFinished,"Marketplace - Finished Payment");
  SetText(kActionMarketplacePaymentFailed,"Marketplace - Failed Payment");
  SetText(kActionMarketplaceUnsubscribe,"Marketplace - Unsubscribed");
  SetText(kActionMarketplaceFailedAgreement,"Marketplace - Failed to Agree to Terms");
  SetText(kActionMarketplaceRedirToDetails,"Marketplace - Got Redirected to Details Page");
  SetText(kActionStdStartRegistration,"Marketplace - Started Registration");
  SetText(kActionStdFinishRegistration,"Marketplace - Finished Registration");
  SetText(kActionAfterEditField,"Fill-in Invoice Details");
  SetText(kActionPrintRecord,"Print Invoice");
  SetText(kActionPrintRecordFirst,"Print First Invoice");
  SetText(kActionOKRecord,"OK Invoice");
  SetText(kActionOKRecordFirst,"OK First Invoice");
  SetText(kActionRecordCheckError,"Failed to Store Record");
  SetText(kActionRecordSaved,"Saved Record");
  SetText(kActionRecordUpdated,"Updated Record");
  SetText(kActionFaceTime,"Window Face Time");
  SetText(kActionFaceTimeWeb,"Web Face Time");
  SetText(kActionAutomatedSalesOpened,"Automated Sales - Opened");
  SetText(kActionAutomatedSalesClosed,"Automated Sales - Closed");
  SetText(kActionAutomatedSalesProceed,"Automated Sales - Proceed");
  SetText(kActionAutomatedSalesCancelled,"Automated Sales - Cancelled");
  SetText(kActionAutomatedSalesRemind,"Automated Sales - Remind Later");
  SetText(kActionAutomatedSalesPurchase,"Automated Sales - Purchase");
  SetText(kActionAutomatedSalesOpenMarketplace,"Automated Sales - Open Marketplace");
  SetText(kActionFirstStartup,"First Startup");

  EndSet;
  
  SetBegin(636);
  SetText(0,"Not included");
  SetText(1,"1");
  SetText(2,"2");
  SetText(3,"3");
  SetText(4,"4");
  SetText(5,"5");
  SetText(6,"6");
  SetText(7,"7");
  SetText(8,"8");
  SetText(9,"9");
  SetText(10,"10");
  SetText(11,"11");
  SetText(12,"12");
  SetText(13,"13");
  SetText(14,"14");
  SetText(15,"15");
  SetText(16,"16");
  SetText(17,"17");
  SetText(18,"18");
  SetText(19,"19");
  SetText(20,"20");
  SetText(21,"21");
  SetText(22,"22");
  SetText(23,"23");
  SetText(24,"24");
  SetText(25,"25");
  SetText(26,"26");
  SetText(27,"27");
  SetText(28,"28");
  SetText(29,"29");
  SetText(30,"30");
  SetText(31,"31");
  SetText(32,"32");
  SetText(33,"33");
  SetText(34,"34");
  SetText(35,"35");
  SetText(36,"36");
  SetText(37,"37");
  SetText(38,"38");
  SetText(39,"39");
  SetText(40,"40");
  SetText(41,"41");
  SetText(42,"42");
  SetText(43,"43");
  SetText(44,"44");
  SetText(45,"45");
  SetText(46,"46");
  SetText(47,"47");
  SetText(48,"48");
  SetText(49,"49");
  SetText(50,"50");
  SetText(51,"51");
  SetText(52,"52");
  SetText(53,"53");
  SetText(54,"54");
  SetText(55,"55");
  SetText(56,"56");
  SetText(57,"57");
  SetText(58,"58");
  SetText(59,"59");
  SetText(50,"50");
  SetText(61,"61");
  SetText(62,"62");
  SetText(63,"63");
  SetText(64,"64");
  SetText(65,"65");
  SetText(66,"66");
  SetText(67,"67");
  SetText(68,"68");
  SetText(69,"69");
  SetText(70,"70");
  SetText(71,"71");
  SetText(72,"72");
  SetText(73,"73");
  SetText(74,"74");
  SetText(75,"75");
  SetText(76,"76");
  SetText(77,"77");
  SetText(78,"78");
  SetText(79,"79");
  SetText(80,"80");
  SetText(81,"81");
  SetText(82,"82");
  SetText(83,"83");
  SetText(84,"84");
  SetText(85,"85");
  SetText(86,"86");
  SetText(87,"87");
  SetText(88,"88");
  SetText(89,"89");
  SetText(90,"90");
  SetText(91,"91");
  SetText(92,"92");
  SetText(93,"93");
  SetText(94,"94");
  SetText(95,"95");
  SetText(96,"96");
  SetText(97,"97");
  SetText(98,"98");
  SetText(99,"99");
  SetText(100,"Highest impact");
  EndSet;

  SetBegin(562);
  SetText(kDAMealProvided,"Provided");
  SetText(kDAMealNotProvided,"Not Provided");
  EndSet;

  SetBegin(563);
  SetText(kCYBusinessTypeOther,"-");
  SetText(kCYBusinessTypeRetail,"Retail");
  EndSet;

  SetBegin(564);
  SetText(kStockMovTypeNormal,"Normal");
  SetText(kStockMovTypeOwnGoodsTransport,"Transport of own goods");
  SetText(kStockMovTypeConsigment,"Sales Consignment Stock");
  SetText(kStockMovTypeThirdEntGoodsTransport,"Transport of 3rd Party Goods");
  SetText(kStockMovTypeGlobalTransport,"Global Transport");
  EndSet;
  
  SetBegin(565);
  SetText(kManagedServerItemEnabler,"Enabler");
  SetText(kManagedServerItemSystemCopy,"System Copy");
  SetText(kManagedServerItemCrontabEntry,"Crontab Entry");
  SetText(kManagedServerItemParameters,"Parameters");
  SetText(kManagedServerItemStartMaintenance,"Start in Maintenance");
  SetText(kManagedServerItemSlaveSystem,"Slave System");
  SetText(kManagedServerItemReserveSystem,"Reserve System");
  SetText(kManagedServerItemTestSystem,"Test System");
  SetText(kManagedServerItemMotherSystem,"Mother System");
  SetText(kManagedServerItemUpdateSystem,"Update System");
  EndSet;
  
  SetBegin(566);
  SetText(kManagedServerWhenAlways,"Always");
  SetText(kManagedServerWhenRunningNormally,"Running Normaly");
  SetText(kManagedServerWhenUpdating,"Updating Server");
  SetText(kManagedServerWhenUpdateBegins,"Update Begins and Server is Running");
  SetText(kManagedServerWhenUpdateEnds,"Update Ends and Server is Stopped");
  SetText(kManagedServerWhenUpdateImports,"Importing During Update");
  SetText(kManagedServerWhenUpdateExports,"Exporting During Update");
  SetText(kManagedServerWhenRunningMaintenance,"Running in Maintenance");
  SetText(kManagedServerWhenExportingDatabase,"Exporting Database");
  SetText(kManagedServerWhenExportingRegister,"Exporting Register");
  SetText(kManagedServerWhenExportingCompany,"Exporting Company");
  EndSet;

  SetBegin(567);
  SetText(kAnyClient,"Any Client");
  SetText(kClientWindows,"Windows");
  SetText(kClientOSXCocoa,"Cocoa");
  SetText(kClientiPhone,"iOS");
  SetText(kClientAndroid,"Android");
  SetText(kClientMetro,"Windows 8");
  EndSet;
  
  SetBegin(568);
  SetText(kOpenAttachedWindow,"Open Attached Window");
  EndSet;
  
  SetBegin(569);
  SetText(0,"-");
  SetText(1,"Find Invoice");
  SetText(2,"Create Prepayment");
  EndSet;

  SetBegin(570);
  SetText(kDenominationTypeUnknown,"Unknown");
  SetText(kDenominationTypeOneCent,"1 cent");
  SetText(kDenominationTypeTwoCents,"2 cents");
  SetText(kDenominationTypeFiveCents,"5 cents");
  SetText(kDenominationTypeTenCents,"10 cents");
  SetText(kDenominationTypeFifteenCents,"15 cents");
  SetText(kDenominationTypeTwentyCents,"20 cents");
  SetText(kDenominationTypeTwentyFiveCents,"25 cents");
  SetText(kDenominationTypeFiftyCents,"50 cents");
  SetText(kDenominationTypeOne,"1");
  SetText(kDenominationTypeFive,"5");
  SetText(kDenominationTypeTen,"10");
  SetText(kDenominationTypeTwenty,"20");
  SetText(kDenominationTypeFifty,"50");
  SetText(kDenominationTypeHundred,"100");
  SetText(kDenominationTypeTwoHundreds,"200");
  SetText(kDenominationTypeFiveHundreds,"500");
  SetText(kDenominationTypeThousand,"1000");
  SetText(kDenominationTypeTwoThousands,"2000");
  SetText(kDenominationTypeFiveThousands,"5000");
  EndSet;

  SetBegin(571);
  SetText(kExecutableTypeOptimizedDebug,"Server, Optimized");
  SetText(kExecutableTypeDebug,"Server, Debug");
  SetText(kExecutableTypeSlave,"Slave (Old Versions)");
  SetText(kExecutableTypeSlaveDebug,"Slave, Debug");
  SetText(kExecutableTypeSlaveOptimizedDebug,"Slave, Optimized");
  EndSet;

  SetBegin(572);
  SetText(kHalUpdateRuleNotTested,"Not tested");
  SetText(kHalUpdateRuleUseUpdated,"Use updated");
  SetText(kHalUpdateRuleUseCurrent,"Use current");
  SetText(kHalUpdateRuleDoNotUse,"Do not use");
  EndSet;

  SetBegin(573);
  SetText(kCloudNodeStateUnknown,"Unknown");
  SetText(kCloudNodeStateNormal,"Normal");
  SetText(kCloudNodeStateUpdating,"Updating");
  SetText(kCloudNodeStateGeneralFailure,"Failure");
  SetText(kCloudNodeStateUpdateFailure,"Update Failed");
  SetText(kCloudNodeStateDifferentVersion,"Version Mismatch");
  SetText(kCloudNodeStateCreating,"Creating");
  SetText(kCloudNodeStateStopping,"Stopping");
  SetText(kCloudNodeStateStopped,"Stopped");
  SetText(kCloudNodeStateStarting,"Starting");
  SetText(kCloudNodeStateTerminating,"Terminating");
  SetText(kCloudNodeStateMoving,"Moving");
  SetText(kCloudNodeStateModifying,"Modifying");
  EndSet;

  SetBegin(574);
  SetText(kHansaVersionStateUnknown,"Unknown");
  SetText(kHansaVersionStateNormal,"Up to date");
  SetText(kHansaVersionStateOld,"Out of date");
  SetText(kHansaVersionStateUnavailable,"Unavailable");
//  SetText(kHansaVersionStateChecking,"Checking");
  SetText(kHansaVersionStateUpdating,"Updating");
  SetText(kHansaVersionStateNotDownloaded,"Not downloaded");
  SetText(kHansaVersionStateInstalling,"Installing");
  SetText(kHansaVersionStateDeprecated,"Deprecated");
  SetText(kHansaVersionStateError,"Error");
  EndSet;
  
  SetBegin(575);
  SetText(kComMessageTypeSms,"#SMS#");
  SetText(kComMessageTypeSkypeChat,"Skype Chat");
  EndSet;

  SetBegin(576);
  SetText(kComMessageSubTypeNotDefined,"Not Defined");
  SetText(kComMessageSubTypeSetTopic,"Set Topic");
  SetText(kComMessageSubTypeSaid,"Said");
  SetText(kComMessageSubTypeSawMembers,"Saw Members");
  SetText(kComMessageSubTypeCreatedChatWith,"Created Chat with");
  SetText(kComMessageSubTypeLeft,"Left");
  SetText(kComMessageSubTypePostedContacts,"Posted Contacts");
  SetText(kComMessageSubTypeGapInChat,"Gap in Chat");
  SetText(kComMessageSubTypeSetRole,"Set Role");
  SetText(kComMessageSubTypeKicked,"Kicked");
  SetText(kComMessageSubTypeKickBanned,"Kick Banned");
  SetText(kComMessageSubTypeSetPicture,"Picture");
  SetText(kComMessageSubTypeSetGuideLines,"Set Guide Lines");
  SetText(kComMessageSubTypeUnknown,"Unknown");
  SetText(kComMessageSubTypeSetEmoted,"Emoted");
  SetText(kComMessageSubTypeAddedMembers,"Added Members");
  SetText(kComMessageSubTypeIncomingPSTN,"Incoming PSTN");
  SetText(kComMessageSubTypeOutgoingPSTN,"Outgoing PSTN");
  SetText(kComMessageSubTypeIncomingP2P,"Incoming P2P");
  SetText(kComMessageSubTypeOutgoingP2P,"Outgoing P2P");
  EndSet;
  
  SetBegin(577);
  SetText(kMessagePrivacyPrivateImport,"Not Public");
  SetText(kMessagePrivacyPrivateDoNotImport,"Do Not Import");
  SetText(kMessagePrivacyPublic,"Public");
  EndSet;

  SetBegin(578);
  SetText(kBillPaymentPrefNotDecided,"Not Decided");
  SetText(kBillPaymentPrefInvoice,"Invoice");
  SetText(kBillPaymentPrefCC,"Credit Card");
  SetText(kBillPaymentPrefPaypal,"Paypal");
  SetText(kBillPaymentPrefDotpay,"Dotpay");
  SetText(kBillPaymentPrefPaytrail,"Paytrail");
  SetText(kBillPaymentPrefInvoice,"Invoice");
  SetText(kBillPaymentPrefOrder,"Order");
  SetText(kBillPaymentPrefCCorInvoice,"Credit Card, Invoice or Paypal");
  SetText(kBillPaymentPrefInvoiceorCC,"Invoice, Credit Card or Paypal");
  SetText(kBillPaymentPrefPaypalorCC,"Paypal, Credit Card or Invoice");
  SetText(kBillPaymentPrefPaysera,"Paysera");
  EndSet;
  
  SetBegin(579);
  SetText(kMapEngineTypeUndefined,"Default");
  SetText(kMapEngineTypeGoogle,"Google Maps");
  SetText(kMapEngineTypeBing,"Bing Maps");
  EndSet;

  SetBegin(580);
  SetText(0,"Not specified");
  SetText(1,"Registration");
  SetText(2,"Invitation");
  EndSet;  

  SetBegin(581);
  SetText(kMessageCopyStatusNotSent,"Not Sent");
  SetText(kMessageCopyStatusReceived,"Received");
  SetText(kMessageCopyStatusSent,"Sent");
  EndSet;

  SetBegin(582);
  SetText(kComCallStatusUnknownCallStatus,"Unknown");
  SetText(kComCallStatusUnplaced,"Unplaced");
  SetText(kComCallStatusRouting,"Routing");
  SetText(kComCallStatusEarlymedia,"Earlymedia");
  SetText(kComCallStatusFailed,"Failed");
  SetText(kComCallStatusRinging,"Ringing");
  SetText(kComCallStatusInprogress,"Inprogress");
  SetText(kComCallStatusOnhold,"Onhold");
  SetText(kComCallStatusFinished,"Finished");
  SetText(kComCallStatusMissed,"Missed");
  SetText(kComCallStatusRefused,"Refused");
  SetText(kComCallStatusBusy,"Busy");
  SetText(kComCallStatusCancelled,"Cancelled");
  SetText(kComCallStatusTransferring,"Transferring");
  SetText(kComCallStatusTransferred,"Transferred");
  SetText(kComCallStatusVmBufferingGreeting,"Vm Buffering Greeting");
  SetText(kComCallStatusVmPlayingGreeting,"Vm Playing Greeting");
  SetText(kComCallStatusVmRecording,"Vm Recording");
  SetText(kComCallStatusVmUploading,"Vm Uploading");
  SetText(kComCallStatusVmSent,"Vm Sent");
  SetText(kComCallStatusVmCancelled,"Vm Cancelled");
  SetText(kComCallStatusVmFailed,"Vm Failed");
  SetText(kComCallStatusWaitingRedialCommand,"Waiting Redial Command");
  SetText(kComCallStatusRedialPending,"Redial Pending");
  EndSet;

  SetBegin(583);
  SetText(kHansaVersionUpdateTypeAll,"Replace all files in version");
  SetText(kHansaVersionUpdateTypeHOB,"Replace HOBs only");
  SetText(kHansaVersionUpdateTypeAU,"Replace Autoupdate Clients and the Slave EXE");
  SetText(kHansaVersionUpdateTypeWC,"Replace all Web Client files");
  SetText(kHansaVersionUpdateTypeEXE,"Replace all EXEs");
  SetText(kHansaVersionUpdateTypeHOBEXE,"Replace HOBs and Autoupdate Clients");
  SetText(kHansaVersionUpdateTypeEXEAU,"Replace all EXEs and Autoupdate Clients");
  EndSet;

  StrSetBegin(584);
  StrSetText(ActVc,"Activities");
  StrSetText(IntProjManActVc,"Project Activities");
  StrSetText(IntProjManToDoActVc,"To Dos");
  StrSetText(KitchenOrderVc,"Kitchen Orders");
  StrSetText(OYVc,"Opportunities");
  StrSetText(PRVc,"Projects");
  StrSetText(QTVc,"Quotations");
  StrSetText(ORVc,"Sales Orders");
  EndStrSet;

  SetBegin(585);
  SetText(khtmlColourBlack,"Black");
  SetText(khtmlColourRed,"Red");
  SetText(khtmlColourGreen,"Green");
  SetText(khtmlColourDeepBlue,"Deep Blue");
  SetText(khtmlColourPastelBlue,"Pastel Blue");
  SetText(khtmlColourPastelPurple,"Pastel Purple");
  SetText(khtmlColourPastelYellowGreen,"Pastel Yellow/Green");
  SetText(khtmlColourPastelGreen,"Pastel Green");
  SetText(khtmlColourLime,"Lime");
  SetText(khtmlColourSkyBlue,"Sky Blue");
  SetText(khtmlColourBlue,"Blue");
  SetText(khtmlColourDeepPurple,"Deep Purple");
  SetText(khtmlColourTiredGold,"Tired Gold");
  SetText(khtmlColourCoffee,"Coffee");
  SetText(khtmlColourChocolate,"Chocolate");
  SetText(khtmlColourOrange,"Orange");
  SetText(khtmlColourPlum,"Plum");
  SetText(khtmlColourNightShade,"Night Shade");
  SetText(khtmlColourDeepForest,"Deep Forest");
  SetText(khtmlColourFlamingo,"Flamingo");
  SetText(khtmlColourGray,"Gray");
  EndSet;

  SetBegin(586); //subset of set 1
  SetText(kAccessLevelNone,"None");
  SetText(kAccessLevelFull,"Full");
  EndSet;

  SetBegin(587);
  SetText(kAsteriskEventSoundQueueStart,"Initial Queue Message");
  SetText(kAsteriskEventSoundLineBusy,"Line Busy");
  SetText(kAsteriskEventSoundIVRClosed,"Menu Closed");
  SetText(kAsteriskEventSoundIVRStart,"Menu Message");
  SetText(kAsteriskEventSoundMusicOnHold,"Music on Hold");
  SetText(kAsteriskEventSoundLineClosed,"Queue Closed");
//  SetText(kAsteriskEventSoundWelcome,"Welcome"); //currently not used
  EndSet;
  
  SetBegin(588);
  SetText(0,"Normal");
  SetText(1,"Weekends");
  SetText(2,"#Bank Holidays#");
  SetText(3,"Monday");
  SetText(4,"Tuesday");
  SetText(5,"Wednesday");
  SetText(6,"Thursday");
  SetText(7,"Friday");
  SetText(8,"Saturday");
  SetText(9,"Sunday");
  EndSet;
  
  SetBegin(589);
  SetText(kTXServerErrorTypeEInvoiceStopped,"E-Invoice Error");
  SetText(kTXServerErrorTypeEMailQueueStopped,"Email Queue Error");
  EndSet;
  
  SetBegin(590);
  SetText(kBaseCurrency1,"Base Currency 1");
  SetText(kBaseCurrency2,"Base Currency 2");
  SetText(kBaseCurrencySpecified,"From Specification");
  EndSet;
  
  StrSetBegin(591);
  StrSetText(All,"All");
  StrSetText(TRVc,"Transactions");
  StrSetText(VIVc,"Purchase Invoices");
  StrSetText(IVVc,"Sales Invoices");
  StrSetText(ActVc,"Activities");
  StrSetText(Other,"Other");
  EndStrSet;  
  
  SetBegin(592);
  SetText(0,"Unlock");
  SetText(1,"Don't Warn");
  EndSet;
  
  SetBegin(593);
  SetText(kPaypalAddressNone,"-");
  SetText(kPaypalAddress1,"Address 1");
  SetText(kPaypalAddress2,"Address 2");
  SetText(kPaypalAddress3,"Address 3");
  SetText(kPaypalAddress4,"Address 4");
  SetText(kPaypalAddress5,"Address 5");
  EndSet;

  SetBegin(594);
  SetText(kAmountIncludingVAT,"Including #VAT#");
  SetText(kAmountExcludingVAT,"Excluding #VAT#");
  EndSet;

  SetBegin(595);//look at Set 385
  SetText(kUserDefRepPeriodTypeFromColumnsDefintion,"From Columns Definition");
  SetText(kUserDefRepPeriodTypeMonth,"Month");
  SetText(kUserDefRepPeriodTypeYear,"Year");
  SetText(kUserDefRepPeriodTypeFiscalYearToDate,"Fiscal Year to Date");
  SetText(kUserDefRepPeriodTypeFiscalYear,"Fiscal Year");
  EndSet;

  SetBegin(596);
  SetText(kArchiveFileTypeUnknown,"Unknown");
  SetText(kArchiveFileTypeTextBackup,"Text Backup");
  SetText(kArchiveFileTypeDataFolder,"Program Data Folder");
  SetText(kArchiveFileTypeHDB,"Database File");
  SetText(kArchiveFileTypeAttachments,"Attachments Archive");
  SetText(kArchiveFileTypeHal,"HAL Customizations and Patches");
  SetText(kArchiveFileTypeWebcust,"Web Site Files");
  SetText(kArchiveFileTypeRCSr,"Cloud Controller Server Record");
  EndSet;

  SetBegin(597);
  SetText(kArchiveFileStateUnknown,"Unknown");
  SetText(kArchiveFileStatePendingArchiving,"Pending");
  SetText(kArchiveFileStateArchivingingLocally,"Compressing");
  SetText(kArchiveFileStateLocal,"Available Locally");
  SetText(kArchiveFileStateUploadingToLongTerm,"Transferring to Long-Term Archive");
  SetText(kArchiveFileStateLocalAndLongTerm,"Available Locally and in Long-Term Archive");
  SetText(kArchiveFileStateLongTerm,"Available in Long-Term Archive");
  SetText(kArchiveFileStateDeleted,"Deleted");
  EndSet;

  SetBegin(598);
  SetText(kEmailValidationStateNotValidated,"Not Validated");
  SetText(kEmailValidationStatePending,"Pending");
  SetText(kEmailValidationStateSent,"Sent");
  SetText(kEmailValidationStateSucceeded,"Email Valid");
  SetText(kEmailValidationStateFailed,"Email invalid");
  EndSet;

  SetBegin(599);
  SetText(kServerTypeNormal,"Normal Server");
  SetText(kServerTypeCloudController,"Cloud Controller");
  SetText(kServerTypeCloudNode,"Cloud Node");
  SetText(kServerTypeCloudExporter,"Cloud Exporter");
  SetText(kServerTypeStandardID,"Standard ID");
  SetText(kServerTypeHansaMail,"HansaMail");
  SetText(kServerTypeLicensingServer,"Licensing Server");
  SetText(kServerTypeMyStandard,"My Standard");
  SetText(kServerTypeStandardInstall,"Standard Install");
  SetText(kServerTypePresence,"Presence");
  SetText(kServerTypeLogActions,"Log Actions");
  SetText(kServerTypeDownloads,"Downloads");
  EndSet;

  SetBegin(600);
  SetText(kAvailableAppOSiOS,"iOS");
  SetText(kAvailableAppOSAndroid,"Android");
  SetText(kAvailableAppOSMacOSX,"Mac OS X");
  SetText(kAvailableAppOSWindows,"Windows");
  SetText(kAvailableAppOSWindowsNET,"Windows .NET");
  SetText(kAvailableAppOSWindows8,"Windows 8");
  SetText(kAvailableAppOSLinux,"Linux");
  SetText(kAvailableAppOSWindows8ARM,"Windows 8 ARM");
  SetText(kAvailableAppOSWindows8x86,"Windows 8 x86");
  SetText(kAvailableAppOSWindows8x64,"Windows 8 x64");
  SetText(kAvailableAppOSWindowsx32,"Windows x32");
  SetText(kAvailableAppOSWindowsx64,"Windows x64");
  SetText(kAvailableAppOSMacAppStore,"Mac AppStore");
  SetText(kAvailableAppiOSAppStoreIRL,"iOS AppStore");
  SetText(kAvailableAppOSHAL,"HAL");
  EndSet;

  SetBegin(601);
  SetText(kPlatformUnknown,"Unknown");
  SetText(kPlatformMac,"Mac OS X");
  SetText(kPlatformWindows32,"32-bit Windows");
  SetText(kPlatformWindows64,"64-bit Windows");
  SetText(kPlatformLinux32,"32-bit Linux");
  SetText(kPlatformLinux64,"64-bit Linux");
  EndSet;

  SetBegin(602);
  SetText(kCampaignStatusPending,"Pending");
  SetText(kCampaignStatusStarted,"Started");
  SetText(kCampaignStatusFinished,"Finished");
  EndSet;

  SetBegin(603);
  SetText(kCampaignRowCodeTypeLead,"Lead");
  SetText(kCampaignRowCodeTypeCU,"Contact");
  EndSet;

  SetBegin(604);
  SetText(kServiceUsageStatusCreated,"Created");
  SetText(kServiceUsageStatusSent,"Sent");
  SetText(kServiceUsageStatusInvoiced,"Invoiced");
  SetText(kServiceUsageStatusPickedByLookup,"Picked by Lookup");
  EndSet;

  SetBegin(605);
  SetText(kWatchpointDiskspaceLow,"Less Than (Mb)");
  SetText(kWatchpointNotRunning,"Duration (minutes)");
  SetText(kWatchpointNotResponding,"Duration (seconds)");
  SetText(kWatchpointIntentionallyNotRunning,"Duration (minutes)");
  EndSet;

  SetBegin(606);
  SetText(kWatchpointStatusNone,"None");
  SetText(kWatchpointStatusCheck,"Checking");
  //SetText(kWatchpointDurationSent,"Message Sent (old)");
  SetText(kWatchpointStatusCancelled,"Cancelled");
  SetText(kWatchpointStatusActive,"Active");
  SetText(kWatchpointStatusSolved,"Solved");
  SetText(kWatchpointStatusSolvedAuto,"Solved Automatically");
  EndSet;

  SetBegin(607);
  SetText(kStockItemTypeNotDefined,"Not defined");
  SetText(kStockItemTypeMerchandise,"Merchandise");
  SetText(kStockItemTypeRawMaterials,"Raw Materials");
  SetText(kStockItemTypePartOf,"Part of other Product");
  SetText(kStockItemTypeScrap,"Scrap");
  SetText(kStockItemTypeWIP,"Work in progress");
  EndSet;

  SetBegin(608);
  SetText(kCloudMigrationStatusTryLater,"Try Later");
  SetText(kCloudMigrationStatusRequested,"Requested");
  SetText(kCloudMigrationStatusReceivingFile,"Receiving File");
  SetText(kCloudMigrationStatusProcessing,"Processing");
  SetText(kCloudMigrationStatusUpdating,"Updating");
  SetText(kCloudMigrationStatusCompleted,"Completed");
  SetText(kCloudMigrationStatusFailed,"Failed");
  SetText(kCloudMigrationStatusAllocFailed,"Failed to Allocate Server");
  EndSet;

  SetBegin(609);
  SetText(kTaxInvTypeNormal,"Normal");
  SetText(kTaxInvTypeReceipt,"Receipt");
  SetText(kTaxInvTypeLiquidation,"Liquidation");
  EndSet;

  /* The 610 set is for debug use only, not for UI */
  SetBegin(610);
  SetText(kHansaWorldIDUndefined,"Undefined");
  SetText(kHansaWorldIDInvalidEMail,"The email address is malformed");
  SetText(kHansaWorldIDCreatedAndLoggedIn,"The Standard ID was created and logged in");
  SetText(kHansaWorldIDCreatedButNotLoggedIn,"The Standard ID was created, but couldn't be logged in");
  SetText(kHansaWorldIDNotCreated,"The Standard ID couldn't be created");
  SetText(kHansaWorldIDAlreadyExists,"The Standard ID already exists");
  SetText(kHansaWorldIDWrongPassword,"The password is incorrect"); // not for UI, use string 27578 instead
  SetText(kHansaWorldIDNotFound,"The Standard ID is incorrect"); // not for UI, use string 27578 instead
  SetText(kHansaWorldIDAlreadyLoggedIn,"The Standard ID is already logged in");
  SetText(kHansaWorldIDLoggedIn,"Login successful");
  SetText(kHansaWorldIDLoggedOut,"The Standard ID has been logged out");
  SetText(kHansaWorldIDAlreadyLoggedOut,"The Standard ID is already logged out");
  SetText(kHansaWorldIDNotLoggedIn,"The Standard ID is not logged in");
  SetText(kHansaWorldIDTryAgain,"Server busy, try again");
  EndSet;
  
  StrSetBegin(611);
  StrSetText(AGO,"ago");
  StrSetText(ARE,"arb");
  StrSetText(ARG,"esp");
  StrSetText(AUS,"aus");
  StrSetText(BOL,"bol");
  StrSetText(BHR,"bhr");
  StrSetText(BRA,"bra");
  StrSetText(CAN,"can,frc");
  StrSetText(CHN,"chi");
  StrSetText(CHL,"chl");
  StrSetText(COL,"col");
  StrSetText(CRI,"cri");
  StrSetText(HRV,"cro");
  StrSetText(CZE,"");
  StrSetText(DEN,"dan");
  StrSetText(DZA,"dza");
  StrSetText(EGY,"egy");
  StrSetText(SLV,"slv");
  StrSetText(EST,"est");
  StrSetText(FIN,"fin,swe");
  StrSetText(FRA,"fra,frc");
  StrSetText(DEU,"ger");
  StrSetText(GBR,"");
  StrSetText(GTM,"gtm");
  StrSetText(HND,"hnd");
  StrSetText(ITA,"ita");
  StrSetText(JOR,"jor");
  StrSetText(KEN,"kee");
  StrSetText(KWT,"kwt");
  StrSetText(LBN,"lbn");
  StrSetText(LVA,"lat");
  StrSetText(LTU,"lit");
  StrSetText(MEX,"mex");
  StrSetText(MOZ,"moz");
  StrSetText(NIC,"nic");
  StrSetText(NOR,"nor");
  StrSetText(OMN,"omn");
  StrSetText(PAN,"pan");
  StrSetText(POL,"pol");
  StrSetText(PRT,"por");
  StrSetText(QAT,"qat");
  StrSetText(RUS,"rus");
  StrSetText(SAU,"sau");
  StrSetText(SRB,"ser");
  StrSetText(SGP,"sgp");
  StrSetText(SVN,"slo");
  StrSetText(ZAF,"saf");
  StrSetText(ESP,"");
  StrSetText(SWE,"swe");
  StrSetText(UKR,"ukr");
  StrSetText(YEM,"yem");
  StrSetText(USA,"usa,uss");
  StrSetText(ZWE,"zwe");
  EndStrSet;

  SetBegin(612);
  SetText(kCourseMediaTypeNone,"-");
  SetText(kCourseMediaTypeFile,"File");
  SetText(kCourseMediaTypeVideo,"Video");
  EndSet;

  SetBegin(613);//update set 543
  SetText(kWebPaymentMethodCC,"Credit Card");
  SetText(kWebPaymentMethodInvoice,"Invoice");
  SetText(kWebPaymentMethodPaypal,"Paypal");
  SetText(kWebPaymentMethodDotpay,"Dotpay");
  SetText(kWebPaymentMethodPaytrail,"Paytrail");
  SetText(kWebPaymentMethodOrder,"Order");
  SetText(kWebPaymentMethodPaysera,"Paysera");
  EndSet;

  SetBegin(614); // Do not change the order of these, numbering match setting in DBDEF.TXT HostingPartnerBlock
  // When adding to this list, also add to haldefs.h and to ainternal/english/startup.hal set 10005
  SetText(kHostingPartnerEurope,"HansaWorld Europe");
  SetText(kHostingPartnerAustralia,"HansaWorld Australia");
  SetText(kHostingPartnerPortugal,"HansaWorld Portugal");
  SetText(kHostingPartnerUSA,"HansaWorld USA");
  SetText(kHostingPartnerExcellent,"Excellent Business Solutions");
  SetText(kHostingPartnerBurti,"Burti Ltd.");
  SetText(kHostingPartnerAvone,"Avone IT");
  SetText(kHostingPartnerFinland,"HansaWorld Finland");
  SetText(kHostingPartnerTest,"HansaWorld Test");
  SetText(kHostingPartnerLatvia,"HansaWorld Latvia");
  SetText(kHostingPartnerX3msoft,"X3msoft");
  SetText(kHostingPartnerMWeb,"MWEB Internet Services");
  SetText(kHostingPartnerScaleTest,"HansaWorld Test (Large Scale)");
  SetText(kHostingPartnerSIL,"IT System Integrators Limited");
  EndSet;

  StrSetBegin(615);
  StrSetText(AGO,"Angola");
  StrSetText(ARE,"United Arab Emirates");
  StrSetText(ARG,"Argentina");
  StrSetText(AUS,"Australia");
  StrSetText(BOL,"Bolivia");
  StrSetText(BHR,"Bahrain");
  StrSetText(BRA,"Brazil");
  StrSetText(CAN,"Canada");
  StrSetText(CHN,"China");
  StrSetText(CHL,"Chile");
  StrSetText(COL,"Colombia");
  StrSetText(CRI,"Costa Rica");
  StrSetText(HRV,"Croatia");
  StrSetText(CZE,"Czech Republic");
  StrSetText(DEN,"Denmark");
  StrSetText(DZA,"Algeria");
  StrSetText(EGY,"Egypt");
  StrSetText(SLV,"El Salvador");
  StrSetText(EST,"Estonia");
  StrSetText(FIN,"Finland");
  StrSetText(FRA,"France");
  StrSetText(DEU,"Germany");
  StrSetText(GBR,"United Kingdom");
  StrSetText(GTM,"Guatemala");
  StrSetText(HND,"Honduras");
  StrSetText(ITA,"Italy");
  StrSetText(JOR,"Jordan");
  StrSetText(KEN,"Kenya");
  StrSetText(KWT,"Kuwait");
  StrSetText(LBN,"Lebanon");
  StrSetText(LVA,"Latvia");
  StrSetText(LTU,"Lithuania");
  StrSetText(MEX,"Mexico");
  StrSetText(MOZ,"Mozambique");
  StrSetText(NIC,"Nicaragua");
  StrSetText(NOR,"Norway");
  StrSetText(OMN,"Oman");
  StrSetText(PAN,"Panama");
  StrSetText(POL,"Poland");
  StrSetText(PRT,"Portugal");
  StrSetText(QAT,"Qatar");
  StrSetText(RUS,"Russia");
  StrSetText(SAU,"Saudi Arabia");
  StrSetText(SRB,"Serbia");
  StrSetText(SGP,"Singapore");
  StrSetText(SVN,"Slovenia");
  StrSetText(ZAF,"South Africa");
  StrSetText(ESP,"Spain");
  StrSetText(SWE,"Sweden");
  StrSetText(UKR,"Ukraine");
  StrSetText(YEM,"Yemen");
  StrSetText(USA,"United States");
  StrSetText(ZWE,"Zimbabwe");
  EndStrSet;

  SetBegin(616);
  SetText(kWatchointContactStatusNone,"Receiving messages");
  SetText(kWatchointContactStatusUrgentDealing,"Urgent and I am dealing with it now");
  SetText(kWatchointContactStatusUrgentBusy,"Urgent, but I cant deal with this right now");
  SetText(kWatchointContactStatusDealDay,"Not Urgent and I will deal with it within a day");
  SetText(kWatchointContactStatusDealHours,"Not Urgent and I will deal with it within a few hours");
  SetText(kWatchointContactStatusBusy,"Not Urgent and I can't deal with this right now");
  EndSet;

  SetBegin(617);
  SetText(kEditFieldAccessDontHide,"Show");
  SetText(kEditFieldAccessHide,"Hide");
  SetText(kEditFieldAccessHideIfNotEmpty,"Hide if not empty");
  EndSet;

  SetBegin(618);
  SetText(kEditFieldAccessFieldDefault,"Default");
  SetText(kEditFieldAccessFieldMandatory,"Mandatory");
  EndSet;

  SetBegin(619);
  SetText(LangEnglish,"ENG");
  SetText(LangFrench,"FRA");
  SetText(LangGerman,"GER");
  SetText(LangItalian,"ITA");
  SetText(LangSwedish,"SWE");
  SetText(LangSpanish,"ESP");
  SetText(LangDanish,"DAN");
  SetText(LangPortuguese,"POR");
  SetText(LangNorwegian,"NOR");
  SetText(LangArabic,"ARB");
  SetText(LangFinnish,"FIN");
  SetText(LangIcelandic,"ICE");
  SetText(LangItalian,"ITA");
  SetText(LangLithuanian,"LIT");
  SetText(LangPolish,"POL");
  SetText(LangHungarian,"HUN");
  SetText(LangEstonian,"EST");
  SetText(LangLatvian,"LAT");
  SetText(LangRussian,"RUS");
  SetText(LangRomanian,"ROM");
  SetText(LangCzech,"CZE");
  SetText(LangSlovak,"SVK");
  SetText(LangSlovenian,"SLO");
  SetText(LangSerbian,"SER");
  SetText(LangUkrainian,"UKR");
  SetText(LangBrazilian,"BRA");
  SetText(LangVietnamese,"VIE");
  SetText(LangCanadian,"CAN");
  SetText(LangCroatian,"CRO");
  SetText(LangTurkish,"TUR");
  SetText(LangUSA,"USA");
  SetText(LangAngolanPortuguese,"AGO");
  SetText(LangMozambicanPortuguese,"MOZ");
  EndSet;

  SetBegin(620);
  SetText(0,"N/L Transaction");
  SetText(IVYc,"S/L Invoice");
  SetText(IPYc,"Receipt");
  SetText(VIYc,"P/L Invoice");
  SetText(OPYc,"Payment");
  EndSet;

  SetBegin(621);
  SetText(kBankTRFileColumnUnassigned,"Unassigned");
  SetText(kBankTRFileColumnDate,"Date");
  SetText(kBankTRFileColumnTime,"Time");
  SetText(kBankTRFileColumnName,"Name");
  SetText(kBankTRFileColumnType,"Type");
  SetText(kBankTRFileColumnStatus,"Status");
  SetText(kBankTRFileColumnCurrency,"Currency");
  SetText(kBankTRFileColumnAmount,"Amount");
  SetText(kBankTRFileColumnReceipID,"Receipt ID");
  SetText(kBankTRFileColumnBalance,"Balance");
  SetText(kBankTRFileColumnComment,"Comment");
  SetText(kBankTRFileColumnBankAcc,"Bank Account");
  SetText(kBankTRFileColumnReference,"Reference");
  EndSet;

  SetBegin(622);
  SetText(kPOSActionNone,"None");
  SetText(kPOSActionAddInvoiceRow,"Add Invoice row");
  SetText(kPOSActionChangeInvoiceRowPrice,"Update Invoice row");
  SetText(kPOSActionVoidInvoiceRow,"Void Invoice row");
  SetText(kPOSActionDeleteInvoiceRow,"Delete Invoice row");
  SetText(kPOSActionPrintInvoice,"Print Invoice");
  SetText(kPOSActionPrintInvoiceCopy,"Print Invoice copy");
  SetText(kPOSActionPrintProformaInvoice,"Print Proforma Invoice");
  SetText(kPOSActionPrintProformaInvoiceCopy,"Print Proforma Invoice copy");
  SetText(kPOSActionPayInvoiceCash,"Cash Payment");
  SetText(kPOSActionPayInvoiceCC,"Credit Card Payment");
  SetText(kPOSActionPayInvoiceGV,"Gift Voucher Payment");
  SetText(kPOSActionPrintXReport,"X Report");
  SetText(kPOSActionPrintZReport,"Z Report");
  SetText(kPOSActionOpenDrawer,"Open Drawer");
  SetText(kPOSActionOpenBarTab,"Open Bar Tab");
  SetText(kPOSActionCloseBarTab,"Close Bar Tab");
  EndSet;

  SetBegin(623);
  SetText(kCurrencyGenderMasculin,"Masculin");
  SetText(kCurrencyGenderFeminine,"Feminine");
  EndSet;

  SetBegin(624);
  SetText(kSearchModeDefault,"Same");
  SetText(kSearchModeFilter,"Filtering");
  SetText(kSearchModePosition,"Searching");
  EndSet;

  SetBegin(625);
  SetText(kWatchointEscalateLevel1,"Level 1");
  SetText(kWatchointEscalateLevel2,"Level 2");
  SetText(kWatchointEscalateLevel3,"Level 3");
  EndSet;

  SetBegin(626);
  SetText(kOrderTypeDefault,"Default");
  SetText(kOrderTypeNormal,"Normal");
  SetText(kOrderTypeDropShip,"Drop Ship");
  EndSet;
  
  StrSetBegin(627); // ISO 3166-1 alpha-2 to alpha-3 table
  StrSetText(AF,"AFG"); // Afghanistan
  StrSetText(AX,"ALA"); // Aland Islands
  StrSetText(AL,"ALB"); // Albania
  StrSetText(DZ,"DZA"); // Algeria
  StrSetText(AS,"ASM"); // American Samoa
  StrSetText(AD,"AND"); // Andorra
  StrSetText(AO,"AGO"); // Angola
  StrSetText(AI,"AIA"); // Anguilla
  StrSetText(AQ,"ATA"); // Antarctica
  StrSetText(AG,"ATG"); // Antigua and Barbuda
  StrSetText(AR,"ARG"); // Argentina
  StrSetText(AM,"ARM"); // Armenia
  StrSetText(AW,"ABW"); // Aruba
  StrSetText(AU,"AUS"); // Australia
  StrSetText(AT,"AUT"); // Austria
  StrSetText(AZ,"AZE"); // Azerbaijan
  StrSetText(BS,"BHS"); // Bahamas
  StrSetText(BH,"BHR"); // Bahrain
  StrSetText(BD,"BGD"); // Bangladesh
  StrSetText(BB,"BRB"); // Barbados
  StrSetText(BY,"BLR"); // Belarus
  StrSetText(BE,"BEL"); // Belgium
  StrSetText(BZ,"BLZ"); // Belize
  StrSetText(BJ,"BEN"); // Benin
  StrSetText(BM,"BMU"); // Bermuda
  StrSetText(BT,"BTN"); // Bhutan
  StrSetText(BO,"BOL"); // Bolivia
  StrSetText(BA,"BIH"); // Bosnia and Herzegovina
  StrSetText(BW,"BWA"); // Botswana
  StrSetText(BV,"BVT"); // Bouvet Island
  StrSetText(BR,"BRA"); // Brazil
  StrSetText(VG,"VGB"); // British Virgin Islands
  StrSetText(IO,"IOT"); // British Indian Ocean Territory
  StrSetText(BN,"BRN"); // Brunei Darussalam
  StrSetText(BG,"BGR"); // Bulgaria
  StrSetText(BF,"BFA"); // Burkina Faso
  StrSetText(BI,"BDI"); // Burundi
  StrSetText(KH,"KHM"); // Cambodia
  StrSetText(CM,"CMR"); // Cameroon
  StrSetText(CA,"CAN"); // Canada
  StrSetText(CV,"CPV"); // Cape Verde
  StrSetText(KY,"CYM"); // Cayman Islands
  StrSetText(CF,"CAF"); // Central African Republic
  StrSetText(TD,"TCD"); // Chad
  StrSetText(CL,"CHL"); // Chile
  StrSetText(CN,"CHN"); // China
  StrSetText(HK,"HKG"); // Hong Kong, Special Administrative Region of China
  StrSetText(MO,"MAC"); // Macao, Special Administrative Region of China
  StrSetText(CX,"CXR"); // Christmas Island
  StrSetText(CC,"CCK"); // Cocos (Keeling) Islands
  StrSetText(CO,"COL"); // Colombia
  StrSetText(KM,"COM"); // Comoros
  StrSetText(CG,"COG"); // Congo (Brazzaville)
  StrSetText(CD,"COD"); // Congo, Democratic Republic of the
  StrSetText(CK,"COK"); // Cook Islands
  StrSetText(CR,"CRI"); // Costa Rica
  StrSetText(CI,"CIV"); // Côte d'Ivoire
  StrSetText(HR,"HRV"); // Croatia
  StrSetText(CU,"CUB"); // Cuba
  StrSetText(CY,"CYP"); // Cyprus
  StrSetText(CZ,"CZE"); // Czech Republic
  StrSetText(DK,"DNK"); // Denmark
  StrSetText(DJ,"DJI"); // Djibouti
  StrSetText(DM,"DMA"); // Dominica
  StrSetText(DO,"DOM"); // Dominican Republic
  StrSetText(EC,"ECU"); // Ecuador
  StrSetText(EG,"EGY"); // Egypt
  StrSetText(SV,"SLV"); // El Salvador
  StrSetText(GQ,"GNQ"); // Equatorial Guinea
  StrSetText(ER,"ERI"); // Eritrea
  StrSetText(EE,"EST"); // Estonia
  StrSetText(ET,"ETH"); // Ethiopia
  StrSetText(FK,"FLK"); // Falkland Islands (Malvinas)
  StrSetText(FO,"FRO"); // Faroe Islands
  StrSetText(FJ,"FJI"); // Fiji
  StrSetText(FI,"FIN"); // Finland
  StrSetText(FR,"FRA"); // France
  StrSetText(GF,"GUF"); // French Guiana
  StrSetText(PF,"PYF"); // French Polynesia
  StrSetText(TF,"ATF"); // French Southern Territories
  StrSetText(GA,"GAB"); // Gabon
  StrSetText(GM,"GMB"); // Gambia
  StrSetText(GE,"GEO"); // Georgia
  StrSetText(DE,"DEU"); // Germany
  StrSetText(GH,"GHA"); // Ghana
  StrSetText(GI,"GIB"); // Gibraltar
  StrSetText(GR,"GRC"); // Greece
  StrSetText(GL,"GRL"); // Greenland
  StrSetText(GD,"GRD"); // Grenada
  StrSetText(GP,"GLP"); // Guadeloupe
  StrSetText(GU,"GUM"); // Guam
  StrSetText(GT,"GTM"); // Guatemala
  StrSetText(GG,"GGY"); // Guernsey
  StrSetText(GN,"GIN"); // Guinea
  StrSetText(GW,"GNB"); // Guinea-Bissau
  StrSetText(GY,"GUY"); // Guyana
  StrSetText(HT,"HTI"); // Haiti
  StrSetText(HM,"HMD"); // Heard Island and Mcdonald Islands
  StrSetText(VA,"VAT"); // Holy See (Vatican City State)
  StrSetText(HN,"HND"); // Honduras
  StrSetText(HU,"HUN"); // Hungary
  StrSetText(IS,"ISL"); // Iceland
  StrSetText(IN,"IND"); // India
  StrSetText(ID,"IDN"); // Indonesia
  StrSetText(IR,"IRN"); // Iran, Islamic Republic of
  StrSetText(IQ,"IRQ"); // Iraq
  StrSetText(IE,"IRL"); // Ireland
  StrSetText(IM,"IMN"); // Isle of Man
  StrSetText(IL,"ISR"); // Israel
  StrSetText(IT,"ITA"); // Italy
  StrSetText(JM,"JAM"); // Jamaica
  StrSetText(JP,"JPN"); // Japan
  StrSetText(JE,"JEY"); // Jersey
  StrSetText(JO,"JOR"); // Jordan
  StrSetText(KZ,"KAZ"); // Kazakhstan
  StrSetText(KE,"KEN"); // Kenya
  StrSetText(KI,"KIR"); // Kiribati
  StrSetText(KP,"PRK"); // Korea, Democratic People's Republic of
  StrSetText(KR,"KOR"); // Korea, Republic of
  StrSetText(KW,"KWT"); // Kuwait
  StrSetText(KG,"KGZ"); // Kyrgyzstan
  StrSetText(LA,"LAO"); // Lao PDR
  StrSetText(LV,"LVA"); // Latvia
  StrSetText(LB,"LBN"); // Lebanon
  StrSetText(LS,"LSO"); // Lesotho
  StrSetText(LR,"LBR"); // Liberia
  StrSetText(LY,"LBY"); // Libya
  StrSetText(LI,"LIE"); // Liechtenstein
  StrSetText(LT,"LTU"); // Lithuania
  StrSetText(LU,"LUX"); // Luxembourg
  StrSetText(MK,"MKD"); // Macedonia, Republic of
  StrSetText(MG,"MDG"); // Madagascar
  StrSetText(MW,"MWI"); // Malawi
  StrSetText(MY,"MYS"); // Malaysia
  StrSetText(MV,"MDV"); // Maldives
  StrSetText(ML,"MLI"); // Mali
  StrSetText(MT,"MLT"); // Malta
  StrSetText(MH,"MHL"); // Marshall Islands
  StrSetText(MQ,"MTQ"); // Martinique
  StrSetText(MR,"MRT"); // Mauritania
  StrSetText(MU,"MUS"); // Mauritius
  StrSetText(YT,"MYT"); // Mayotte
  StrSetText(MX,"MEX"); // Mexico
  StrSetText(FM,"FSM"); // Micronesia, Federated States of
  StrSetText(MD,"MDA"); // Moldova
  StrSetText(MC,"MCO"); // Monaco
  StrSetText(MN,"MNG"); // Mongolia
  StrSetText(ME,"MNE"); // Montenegro
  StrSetText(MS,"MSR"); // Montserrat
  StrSetText(MA,"MAR"); // Morocco
  StrSetText(MZ,"MOZ"); // Mozambique
  StrSetText(MM,"MMR"); // Myanmar
  StrSetText(NA,"NAM"); // Namibia
  StrSetText(NR,"NRU"); // Nauru
  StrSetText(NP,"NPL"); // Nepal
  StrSetText(NL,"NLD"); // Netherlands
  StrSetText(AN,"ANT"); // Netherlands Antilles
  StrSetText(NC,"NCL"); // New Caledonia
  StrSetText(NZ,"NZL"); // New Zealand
  StrSetText(NI,"NIC"); // Nicaragua
  StrSetText(NE,"NER"); // Niger
  StrSetText(NG,"NGA"); // Nigeria
  StrSetText(NU,"NIU"); // Niue
  StrSetText(NF,"NFK"); // Norfolk Island
  StrSetText(MP,"MNP"); // Northern Mariana Islands
  StrSetText(NO,"NOR"); // Norway
  StrSetText(OM,"OMN"); // Oman
  StrSetText(PK,"PAK"); // Pakistan
  StrSetText(PW,"PLW"); // Palau
  StrSetText(PS,"PSE"); // Palestinian Territory, Occupied
  StrSetText(PA,"PAN"); // Panama
  StrSetText(PG,"PNG"); // Papua New Guinea
  StrSetText(PY,"PRY"); // Paraguay
  StrSetText(PE,"PER"); // Peru
  StrSetText(PH,"PHL"); // Philippines
  StrSetText(PN,"PCN"); // Pitcairn
  StrSetText(PL,"POL"); // Poland
  StrSetText(PT,"PRT"); // Portugal
  StrSetText(PR,"PRI"); // Puerto Rico
  StrSetText(QA,"QAT"); // Qatar
  StrSetText(RE,"REU"); // Réunion
  StrSetText(RO,"ROU"); // Romania
  StrSetText(RU,"RUS"); // Russian Federation
  StrSetText(RW,"RWA"); // Rwanda
  StrSetText(BL,"BLM"); // Saint-Barthélemy
  StrSetText(SH,"SHN"); // Saint Helena
  StrSetText(KN,"KNA"); // Saint Kitts and Nevis
  StrSetText(LC,"LCA"); // Saint Lucia
  StrSetText(MF,"MAF"); // Saint-Martin (French part)
  StrSetText(PM,"SPM"); // Saint Pierre and Miquelon
  StrSetText(VC,"VCT"); // Saint Vincent and Grenadines
  StrSetText(WS,"WSM"); // Samoa
  StrSetText(SM,"SMR"); // San Marino
  StrSetText(ST,"STP"); // Sao Tome and Principe
  StrSetText(SA,"SAU"); // Saudi Arabia
  StrSetText(SN,"SEN"); // Senegal
  StrSetText(RS,"SRB"); // Serbia
  StrSetText(SC,"SYC"); // Seychelles
  StrSetText(SL,"SLE"); // Sierra Leone
  StrSetText(SG,"SGP"); // Singapore
  StrSetText(SK,"SVK"); // Slovakia
  StrSetText(SI,"SVN"); // Slovenia
  StrSetText(SB,"SLB"); // Solomon Islands
  StrSetText(SO,"SOM"); // Somalia
  StrSetText(ZA,"ZAF"); // South Africa
  StrSetText(GS,"SGS"); // South Georgia and the South Sandwich Islands
  StrSetText(SS,"SSD"); // South Sudan
  StrSetText(ES,"ESP"); // Spain
  StrSetText(LK,"LKA"); // Sri Lanka
  StrSetText(SD,"SDN"); // Sudan
  StrSetText(SR,"SUR"); // Suriname *
  StrSetText(SJ,"SJM"); // Svalbard and Jan Mayen Islands
  StrSetText(SZ,"SWZ"); // Swaziland
  StrSetText(SE,"SWE"); // Sweden
  StrSetText(CH,"CHE"); // Switzerland
  StrSetText(SY,"SYR"); // Syrian Arab Republic (Syria)
  StrSetText(TW,"TWN"); // Taiwan, Republic of China
  StrSetText(TJ,"TJK"); // Tajikistan
  StrSetText(TZ,"TZA"); // Tanzania *, United Republic of
  StrSetText(TH,"THA"); // Thailand
  StrSetText(TL,"TLS"); // Timor-Leste
  StrSetText(TG,"TGO"); // Togo
  StrSetText(TK,"TKL"); // Tokelau
  StrSetText(TO,"TON"); // Tonga
  StrSetText(TT,"TTO"); // Trinidad and Tobago
  StrSetText(TN,"TUN"); // Tunisia
  StrSetText(TR,"TUR"); // Turkey
  StrSetText(TM,"TKM"); // Turkmenistan
  StrSetText(TC,"TCA"); // Turks and Caicos Islands
  StrSetText(TV,"TUV"); // Tuvalu
  StrSetText(UG,"UGA"); // Uganda
  StrSetText(UA,"UKR"); // Ukraine
  StrSetText(AE,"ARE"); // United Arab Emirates
  StrSetText(GB,"GBR"); // United Kingdom
  StrSetText(US,"USA"); // United States of America
  StrSetText(UM,"UMI"); // United States Minor Outlying Islands
  StrSetText(UY,"URY"); // Uruguay
  StrSetText(UZ,"UZB"); // Uzbekistan
  StrSetText(VU,"VUT"); // Vanuatu
  StrSetText(VE,"VEN"); // Venezuela (Bolivarian Republic of)
  StrSetText(VN,"VNM"); // Viet Nam
  StrSetText(VI,"VIR"); // Virgin Islands, US
  StrSetText(WF,"WLF"); // Wallis and Futuna Islands
  StrSetText(EH,"ESH"); // Western Sahara
  StrSetText(YE,"YEM"); // Yemen
  StrSetText(ZM,"ZMB"); // Zambia
  StrSetText(ZW,"ZWE"); // Zimbabwe
  EndStrSet;

  StrSetBegin(628); // post-period billed features
  StrSetText(modSL,"Sales Ledger");
  EndStrSet;

  SetBegin(629);
  SetText(kGuiNone,"-");
  SetText(kGuiCocoa,"Mac OS X");
  SetText(kGuiCarbon,"Carbon");
  SetText(kGuiXWindows,"Old Windows");
  SetText(kGuiQT,"-");
  SetText(kGuiGDI,"-");
  SetText(kGuiWindowsMobile,"Windows Mobile");
  SetText(kGuiiPhone,"iPhone");
  SetText(kGuiSymbian,"Symbian");
  SetText(kGuiWPF,"Windows");
  SetText(kGuiMaemo,"-");
  SetText(kGuiAndroid,"Android");
  SetText(kGuiMetro,"Windows Metro");
  SetText(kGuiWindowsDesktop,"Windows Desktop");
  EndSet;
  
  SetBegin(630);
  SetText(kStandardIDLoginPaidTypeNone,"Not Checked");
  SetText(kStandardIDLoginPaidTypePaid,"Paid");
  SetText(kStandardIDLoginPaidTypeFree,"Free");
  EndSet;  

  /* Lithuania Instrastat Export */
  StrSetBegin(631);
  StrSetText(O,"Primary");
  StrSetText(N,"Blank");
  StrSetText(M,"Revising");
  EndStrSet;

  StrSetBegin(632); //Do not translate, keep in sync with set 344
  StrSetText("ARB","Arabic");
  StrSetText("AGO","Portuguese (Angola)");
  StrSetText("AUS","English (Australia)");
  StrSetText("BRA","Portuguese (Brazil)");
  StrSetText("CHI","Chinese");
  StrSetText("CZE","Czech");
  StrSetText("DAN","Danish");
  StrSetText("ENG","English (UK)");
  StrSetText("USA","English (US)");
  StrSetText("CAN","English (Canada)");
  StrSetText("IND","English (India)");
  StrSetText("KEE","English (Kenya)");
  StrSetText("NZE","English (New Zealand)");
  StrSetText("PHE","English (Philippines)");
  StrSetText("SGP","English (Singapore)");
  StrSetText("SAF","English (South Africa)");
  StrSetText("ZWE","English (Zimbabwe)");
  StrSetText("ESP","Spanish");
  StrSetText("USS","Spanish (US)");
  StrSetText("EST","Estonian");
  StrSetText("FIN","Finnish");
  StrSetText("FRA","French");
  StrSetText("FRC","French (Canada)");
  StrSetText("FAR","Farsi");
  StrSetText("GER","German");
  StrSetText("HEB","Hebrew");
  StrSetText("HUN","Hungarian");
  StrSetText("ITA","Italian");
  StrSetText("LAT","Latvian");
  StrSetText("LIT","Lithuanian");
  StrSetText("MOZ","Portuguese (Mozambique)");
  StrSetText("NOR","Norwegian");
  StrSetText("POL","Polish");
  StrSetText("POR","Portuguese");
  StrSetText("ROM","Romanian");
  StrSetText("RUS","Russian");
  StrSetText("SER","Serbian");
  StrSetText("SWE","Swedish");
  StrSetText("SLO","Slovenian");
  StrSetText("SVK","Slovakian");
  StrSetText("UKR","Ukranian");
  StrSetText("VIE","Vietnamese");
  StrSetText("","Other");
  EndStrSet;
  
  /* Polish VAT Export */
  StrSetBegin(633);
  StrSetText("VATRateTierBasic","Basic Level");
  StrSetText("VATRateTier1","Reduced Level 1");
  StrSetText("VATRateTier2","Reduced Level 2");
  StrSetText("VATRateTier3","Reduced Level 3");
  StrSetText("VATRateTier4","Reduced Level 4");
  StrSetText("VATRateTierZero","Zero");
  StrSetText("VATRateTierExempt","Exempt");
  EndStrSet;  
 
  StrSetBegin(634);
  StrSetText(kBATrigerNone,"Undefined");
  StrSetText(kBATrigerUnexpectedSytemRestart,"Unexpected System Restart");
  StrSetText(kBATrigerEmailsQueueStopped,"Emails queue stopped");
  StrSetText(kBATrigerEInvoicesQueueStopped,"E-Invoices queue stopped");
  StrSetText(kBATrigerEInvoicesNotSent,"E-Invoices not sent during last 24h");
  EndStrSet;  

  SetBegin(636);
  SetText(kAutSalesActionNone,"None");
  SetText(kAutSalesActionRequest,"Request");
  EndSet;  

  SetBegin(637);
  SetText(kAutSalesTxtMsgTypePurchase,"Purchase");
  SetText(kAutSalesTxtMsgTypePurchaseConfirmation,"Purchase Confirmation");
  SetText(kAutSalesTxtMsgTypeExpiringLicenses,"Expiring Licenses");
  EndSet;  
  
  SetBegin(638);
  SetText(kAutSalesOnRequest,"On Request");
  SetText(kAutSalesOnLogin,"On Login");
  SetText(kAutSalesOnExipringLicense,"On Expiring License");
  SetText(kAutSalesPurchaseConfirmation,"Purchase Confirmation");
  EndSet;  
  
  SetBegin(639);
  SetText(13,"ARG");
  SetText(29,"AUS");
  SetText(33,"AUT");
  SetText(109,"AZE");
  SetText(14,"BOL");
  SetText(41,"CAN");
  SetText(43,"HRV");
  SetText(15,"CZE");
  SetText(5,"DEN");
  SetText(94,"UAE");
  SetText(17,"ECU");
  SetText(7,"EST");
  SetText(16,"EST");
  SetText(25,"EST");
  SetText(4,"FIN");
  SetText(107,"FRA");
  SetText(32,"DEU");
  SetText(18,"HND");
  SetText(19,"HUN");
  SetText(27,"ISL");
  SetText(40,"IRL");
  SetText(111,"ITA");
  SetText(44,"KEN");
  SetText(8,"LVA");
  SetText(9,"LTU");
  SetText(38,"MEX");
//  SetText(20,"Middle-Eastern Customers");
  SetText(42,"NZL");
//  SetText(112,"North America");
  SetText(2,"NOR");
  SetText(26,"NOR");
  SetText(21,"PRY");
  SetText(6,"POL");
  SetText(22,"PRT");
  SetText(10,"RUS");
  SetText(30,"ROU");
  SetText(39,"SGP");
  SetText(31,"SVK");
  SetText(23,"SVN");
  SetText(28,"SDN");
  SetText(12,"ZAF");
  SetText(3,"SWE");
  SetText(34,"CHE");
  SetText(35,"TUR");
  SetText(1,"GBR");
  SetText(36,"UKR");
  SetText(37,"USA");
  SetText(24,"URY");
  SetText(45,"ZWE");
  EndSet;

  SetBegin(640);
  SetText(kAutSalesMsgStatusDelivered,"Delivered");
  EndSet;  

  SetBegin(641);
  SetText(kPromotionRowTypeFilter,"Filter");
  SetText(kPromotionRowTypeCondition,"Condition");
  EndSet;  

  SetBegin(642);
  SetText(kPromotionFilterUndefined,"Not Defined");
  SetText(kPromotionFilterItem,"Item");
  SetText(kPromotionFilterItemGroup,"Item Group");
  SetText(kPromotionFilterItemClassification,"Item Classification");
  SetText(kPromotionFilterCustomer,"Customer");
  SetText(kPromotionFilterCustomerCategory,"Customer Category");
  SetText(kPromotionFilterCustomerClassification,"Customer Classification");
  EndSet;  

  SetBegin(643);
  SetText(kPromotionConditionUndefined,"Not Defined");
  SetText(kPromotionConditionAmount,"Amount above");
  SetText(kPromotionConditionNumberOfItems,"Number of Items");
  SetText(kPromotionConditionNumberOfINvoices,"Number of Invoices");
  SetText(kPromotionConditionBOGOF,"Buy x get y for free");
  EndSet;  


  SetBegin(644);
  SetText(kPromotionFilterUndefined,"Not Defined");
  SetText(kPromotionFilterItem,"Item");
  SetText(kPromotionFilterItemGroup,"Item Group");
  SetText(kPromotionFilterItemClassification,"Item Classification");
  SetText(kPromotionFilterCustomer,"Customer");
  SetText(kPromotionFilterCustomerCategory,"Customer Category");
  SetText(kPromotionFilterCustomerClassification,"Customer Classification");

  SetText(kPromotionConditionAmount,"Amount above");
  SetText(kPromotionConditionNumberOfItems,"Number of Items");
  SetText(kPromotionConditionNumberOfINvoices,"Number of Invoices");
  EndSet;  

  SetBegin(645);
  SetText(kPeriodLengthBlank,"Not Applicable");
  SetText(kPeriodLengthDay,"Dayly");
  SetText(kPeriodLengthWeek,"Week");
  SetText(kPeriodLengthMonth,"Month");
  SetText(kPeriodLengthQuarter,"Quarter");
  SetText(kPeriodLengthYear,"Year");
  EndSet;

  SetBegin(646);
  SetText(kWorkflowOverviewSortByIcon,"Icon");
  SetText(kWorkflowOverviewSortByValue,"Value");
  SetText(kWorkflowOverviewSortByCaption,"Caption");
  SetText(kWorkflowOverviewSortByDate,"Date");
  SetText(kWorkflowOverviewSortByCustomer,"Customer");
  EndSet;  

  SetBegin(647);
  SetText(0,"VAT 7 - 16");
  SetText(1,"VAT 7 - 17");
  EndSet;  

  SetBegin(648);
  SetText(H_OPER_NONE,"None");
  SetText(H_OPER_LT,"<");
  SetText(H_OPER_LE,"<=");
  SetText(H_OPER_GR,">");
  SetText(H_OPER_GE,">=");
  SetText(H_OPER_NE,"!=");
  SetText(H_OPER_EQ2,"==");
  EndSet;  

end;

#endif
