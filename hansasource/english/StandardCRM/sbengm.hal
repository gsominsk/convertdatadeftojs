// This file is for Standard CRM by HansaWorld
/* This is no longer an Event, make sure you don't have this in */
//event startup

external function Boolean HasDeveloperMode();
external function Boolean HasCategories();
external function Boolean HasPersons();
external function Boolean HasFormEditor();
external function Boolean HasItemGroups();
external function Boolean HasModQT();
external function Boolean HasSerialNumbers();
external function Boolean HasModAT2();
external function Boolean HasModCL();
external function Boolean HasStandardCRM();
external function Boolean HasModExp();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();
external function Boolean HasModSO();
external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModSL();
external function Boolean HasModPL();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModRest();
external function Boolean HasModCRM();
external function Boolean HasPayroll();
external function Boolean HasEMail();

external function Boolean HasAdvancedPricing();
external function Boolean HasBase2();
external function Boolean HasContactClassification();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLocalMachines();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNumberSeries();
external function Boolean HasOfficialSerNr();
external function Boolean HasObjects();
external function Boolean HasPriceLists();
external function Boolean HasSkypeConnection();
external function Boolean HasVarieties();
external function Boolean HasWorkflowOverview();
external function Boolean HasCustomerStatusReport();
external function Boolean HasAccessGroups();
external function Boolean HasIncomeAndExpenseBook();
external function Boolean HasIntegratedNL();
external function Boolean HasRegistersExports();
external function Boolean HasServerInCloud();
external function Boolean HasFiscalPrinter();
external function Boolean HasInvoiceOfficialSerNr();
external function Boolean HasCustomerLetter();
external procedure SetProductTags();
external procedure LoadWindowTags();

begin
  Real h,v,l,vs;

  SetLangMode(LangEnglish,"ENG",2);

  if (BuildProductCode=="StandardCRM") then begin
  
  SetProductTags;
  LoadWindowTags;

/* The modules should keep there codes even if we rename the modules. The code is part of the Export format */
  Module("CRM","",730,modCRM);
  
  if (HasEMail) then begin
    Module("Email","",730,modEmail);
  end;
  if (HasModQT) then begin
    Module("Quotations","",730,modQT);
  end;
  Module("System","",730,modSY);

  RegisterWS("Contacts","Contacts","New Contact",CUVc,modCRM);
  RegisterWS("Activities","Activities","New Activity",ActVc,modCRM);
//  Register("Campaigns","Campaigns",CampaignVc,modCRM);
  if (HasCustomerLetter) then begin  
    RegisterWS("Customer Letters","Customer Letters","New Customer Letter",LetVc,modCRM);
  end;
  RegisterWS("Leads","Leads","New Lead",CULeadLClass,modCRM);
  RegisterWS("Opportunities","Opportunities","New Opportunity",OYVc,modCRM);
//  if (HasModQT) then begin
//    RegisterWS("Quotations","Quotations","New Quotation",QTVc,modCRM);
//    RegisterWS("Items","Items","New Item",INVc,modCRM);
//  end;
  Report("Activities, Contacts",ActCURClass,ActCURn,0,modCRM);
  Report("Activity History",CallHistRClass,CallHistRn,0,modCRM);
  Report("Activities, Persons",ActPersRClass,ActPersRn,0,modCRM);
  Report("Birthday List",BirthDayRClass,BirthDayRn,0,modCRM);
  Report("Contact List",CURClass,CustRn,0,modCRM);
  if (HasCustomerStatusReport) then begin
    Report("Customer Status",CustPSRClass,CustPSRn,0,modCRM);
  end;
  if (HasModQT) then begin
    Report("Item List",ArtRClass,ArtRn,0,modCRM);
  end;
  if (HasModQT) then begin
    Report("Outstanding Quotations",QTStkRClass,QTStkRn,0,modCRM);
  end;
  Report("Person List",UserRClass,UserRn,0,modCRM);
  Report("Personal Calendar",ActCalRClass,ActCalRn,0,modCRM);
  if (HasModQT) then begin
    Report("Pipeline",QTPipelineRClass,QTPipelineRn,0,modCRM);
    Report("Quotation Journal",QTJRClass,QTJRn,0,modCRM);
  end;
  Report("Search for Contact Person",SearchContactRClass,SearchContactRn,0,modCRM);

  Document("Activities",ActDocRClass,ActDocForm,ActDocFClass,modCRM);
  Document("Contact Labels",CoLabRClass,CoLabForm,CoLabFClass,modCRM);
  if (HasModQT) then begin
    Document("Quotations",QTRClass,QTForm,QTFClass,modCRM);
  end;
  Setting("Activity Classes",ActTypeGrLClass,modCRM);
  Setting("Activity Types",ActTypeLClass,modCRM);
//  Setting("Campaign Statuses",CampaignStatusLClass,modCRM);
  if (HasWorkflowOverview) then begin
    Setting("Company Workflow Overview",PipelineOverviewTClass,modCRM);
  end;
  if (LicenseMode==kLicenseModeServer) then begin
    Setting("Configure Users",ConfigureUsersTClass,modCRM);
  end;
  Setting("Contact Relations",ContactRelLClass,modCRM);
  if (HasCategories) then begin
    Setting("Customer Categories",CCatLClass,modCRM);
  end;
  if (HasModQT) then begin
    Setting("Customer Relations",ContactRelLClass,modCRM);
  end;
  if (HasFormEditor) then begin
    Setting("Forms",DocLClass,modCRM);
  end;
  Setting("Industry",IndustryLClass,modCRM);
  if (HasCustomerStatusReport) then begin
    Setting("Info in Customer Status Report",CustPSLClass,modCRM);
  end;
/*  
  if (UseAppStoreEnabler==false) then begin
    Setting("Internet Enablers",InternetEnablerTClass,modCRM);
  end;
*/  
  if (HasItemClassification) then begin
    Setting("Item Classifications",DILClass,modCRM);
  end;
  if (HasItemGroups or HasLocalization("PRT,ITA")) then begin
    Setting("Item Groups",ITLClass,modCRM);
  end;  
  Setting("Lead Source",LeadSourceLClass,modCRM);
  Setting("Lead Status",LeadStatusLClass,modCRM);
  if (HasNumberSeries) then begin
    if (HasCustomerLetter) then begin
      Setting("Number Series - Customer Letters",LetSerTClass,modCRM);
    end;
    Setting("Number Series - Opportunities",OYSerTClass,modCRM);
  end;
  if (ClientMode) then begin
    Setting("Persons",UserLClass,modCRM);
  end;
//  Setting("Program Mode",ProgramStatusTClass,modCRM);//cloud hosting
  if (HasModQT) then begin
    Setting("Quotation Classes",QuoteClassTClass,modCRM);
  end;
  if (HasFormEditor) then begin
    Setting("Styles",StyleLClass,modCRM);
  end;
  if (HasModQT) then begin
    if (HasLocalization("BRA,KEN")) then begin
      Setting("Tax Templates",TaxTemplateLClass,modCRM);
    end;  
  end;
  Setting("Text Types",TextTypeLClass,modCRM);
  if (HasWorkflowOverview) then begin
    Setting("User Workflow Overview",UserPipelineOverviewLClass,modCRM);
  end;
/*  
  if (HasLocalization("BRA")) then begin
    Setting("User Defined Fields - Contacts",CUUserLabelTClass,modCRM);
  end;
*/  
  if (HasModQT) then begin
    Setting("#VAT# Codes",VATCodeTClass,modCRM);
  end;

  Export("Activities",ExpActEClass,ExpActEn,modCRM);
//  Export("Client Text Backup",TBEClass,ClientTBEn,modCRM);
//  Export("Company Text Backup",TBEClass,CompanyTBEn,modCRM);
  if (GuiType!=kGuiiPhone) then begin
    Export("Database Text Backup",TBEClass,DatabaseTBEn,modCRM);
  end;
  //Export("Remote Backup",TBRemoteEClass,RemoteTBEn,modCRM);
  //Export("Contacts",BPCUEClass,BPCUEn,modCRM);//for Business Phone, why in this module?? We have the Integration module, it should probably be there
//  Export("Raw Data",TBEClass,RawDataEn,modCRM);
//  Export("Run Timed Backup",TBEClass,RunTimedTBEn,modCRM);


//  Maintenance("Rebuild Number Recognition Register",NormPhoneNumVClass,NormPhoneNumMn,modCRM);
//  Maintenance("Restore Application",ResetDBWClass,0,modCRM);
  
/* modQT */
  RegisterWS("Quotations","Quotations","New Quotation",QTVc,modQT);
  if (HasModCRM) then begin
    RegisterWS("Contacts","Contacts","New Contact",CUVc,modQT);
  end;
  RegisterWS("Items","Items","New Item",INVc,modQT);
  if (HasPriceLists) then begin
    RegisterWS("Prices","Prices","New Price",PLVc,modQT);
  end;
  //RegisterWS("Pre Quotations","Pre Quotations","New Pre Quotation",PreQTVc,modQT); no funcionality for this one
  if (HasNumberSeries) then begin
    Setting("Number Series - Quotations",QTSerTClass,modQT);
  end;
  if (HasPriceLists) then begin
    Setting("Price Lists",PLDefLClass,modQT);
  end;
  Setting("Quotation Classes",QuoteClassTClass,modQT);
  Setting("Quotation Settings",QTSettTClass,modQT);

  Document("Quotations",QTRClass,QTForm,QTFClass,modQT);
  if (HasPriceLists) then begin
    Report("Price List",PriceRClass,PriceRn,0,modQT);
  end;
  if (HasLocalization("PRT")) then begin
    Document("Proforma Invoice, Quotations",ProformaQTRClass,ProformaQTForm,ProformaQTFClass,modQT);
  end;
  
  if (HasLocalization("PRT")) then begin
    Report("Proforma Invoice Journal",ProformaIVJRClass,ProformaIVJRn,0,modQT);
  end;
  Report("Accepted Quotations Journal",QTHistoryRClass,QTHstRn,0,modQT);
  Report("Outstanding Quotations",QTStkRClass,QTStkRn,0,modQT);
  Report("Pipeline",QTPipelineRClass,QTPipelineRn,0,modQT);
  Report("Quotation Journal",QTJRClass,QTJRn,0,modQT);

/* modEmail */

  Register("Email Queue","Email Queue",EMailQueVc,modEmail);
  RegisterWS("Mailboxes","Mailboxes","New Mailbox",ConferenceWClass,modEmail);

  Setting("Email SMTP Server",EmailTClass,modEmail);

/* modSY */

  if (HasDeveloperMode) then begin
    Setting("Cloud Services",EnabServerTClass,modSY);
    Setting("Configuration",ModulesTClass,modSY);
    Setting("Current License Flags",CurLicensesClass,modSY);
    Setting("E-Learning URL Cache",UniversityURLCacheLClass,modSY);
    Setting("Internet Enablers",InternetEnablerTClass,modSY);
    Setting("Licenses",LicensesLClass,modSY);
    RegisterWS("Mailboxes","Mailboxes","New Mail",ConferenceWClass,modSY);
    Setting("My IP Address",MyIPAddrTClass,modSY);
    Setting("Program Mode",ProgramStatusTClass,modSY);
    Setting("Services Cache",ServiceCacheLClass,modSY);
    Setting("Std Registration Data",StdRegDataWClass,modSY);
    Setting("Legal SerNo's",OffSerNrLClass,modSY);
    Setting("User Feature Pref",UserFeaturePrefTClass,modSY);    
    Setting("Login Options",LocalLoginOptionsTClass,modSY);
    Setting("Internet Enablers (old block)",InternetEnabOldTClass,modSY);
    Setting("Standard Server Type",StandardServerTClass,modSY);
  end;  

  if ((ClientMode and LicenseMode==kLicenseModeServer) or HasPersons or HasDeveloperMode) then begin
    RegisterWS("Persons","Persons","New Person",UserVc,modSY);
  end else begin
    RegisterWS("Persons","Persons","",UserVc,modSY);
  end;

  if (HasMultiCurrency or HasBase2) then begin
    RegisterWS("Currencies","Currencies","New Currency",CurncyCodeVc,modSY); 
  end;
  if (HasMultiCurrency) then begin
    RegisterWS("Exchange Rates","Exchange Rates","New Exchange Rate",ERVc,modSY);
  end;
  if (HasFormEditor) then begin
    if (GuiType!=kGuiiPhone) then begin
      RegisterWS("Forms","Forms","New Form",DocVc,modSY);
    end;
    RegisterWS("Styles","Styles","New Style",StyleVc,modSY);
  end;
  if (HasModSL==false) then begin
    if (HasModNL or HasIncomeAndExpenseBook) then begin
      RegisterWS("Accounts","Accounts","New Account",AccVc,modSY);
    end;
  end;

  if (HasAccessGroups) then begin
    Setting("Access Groups",AccessLClass,modSY);
  end;
  if (LicenseMode==kLicenseModeServer or ClientMode) then begin
    Setting("Active Users",ListUsersClass,modSY);
  end;
//  if (HasBase2 or (HasEInvoicing and HasLocalization("NOR,SWE"))) then begin
  if (HasBase2) then begin
    Setting("Base Currency",BaseCurTClass,modSY);
  end;
  if (HasBase2) then begin
    Setting("Base Currency Rates",BaseERLClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Brazilian Invoice Types",BrazilEInvTypeLClass,modSY);
  end;
  Setting("Companies",CompaniesTClass,modSY);
  if (HasStandardCRM or HasStandardCommunicator or HasStandardOrganizer) then begin
    Setting("Company Date and Numeric Format",SysFormatTClass,modSY);
  end;
  Setting("Company Info",CYWClass,modSY);
  if (HasContactClassification and HasModSL==false) then begin
    Setting("Contact Classifications",CClassLClass,modSY);
  end;
  if (HasMultiCurrency or HasBase2) and (HasIntegratedNL) then begin
    Setting("Conversions - Master",ConvMasterTClass,modSY);
    Setting("Conversions - Accounts and #VAT Code#",ConvAccTClass,modSY);
    Setting("Conversions - Contacts",ConvCustTClass,modSY);
    Setting("Conversions - Currency Codes",ConvCurncyCodeTClass,modSY);
    Setting("Conversions - Items",ConvItemTClass,modSY);
    Setting("Conversions - Users",ConvUserTClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Districts",DistrictLClass,modSY);
  end;
  if (IsUsingActivationCodes) then begin
    Setting("Internet Enablers",InternetEnablerTClass,modSY);
  end;
  if (HasModSL==false) then begin
    if (HasModNL or HasIncomeAndExpenseBook) then begin
      Setting("Account Usage",AccTClass,modSY);
    end else begin
      Setting("Invoice Settings",AccTClass,modSY);
    end;
  end;
  if (HasModSL==false and HasLocalization("PRT")) then begin
    Setting("Item Groups",ITLClass,modSY);
  end;
  if (HasLocalMachines or HasFiscalPrinter) then begin
    Setting("Local Machine",LocalMachineTClass,modSY);
  end;
  if (HasFiscalPrinter) then begin
    Setting("Local Machines",LocalMachineLClass,modSY);
    Setting("Local Serial Port Devices",LSerialPortDeviceLClass,modSY);
    Setting("Local Machine Serial Port Devices",SerialPortDeviceLClass,modSY);
  end;
  if (HasKPIs) then begin
    Setting("KPIs",KPIDefLClass,modSY);
  end;
  if (HasLanguages) then begin
    Setting("Languages",LangTClass,modSY); 
  end;
  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Setting("Locking",DBLockTClass,modSY);
  end;
  if (HasFiscalPrinter and HasLocalization("SVN")) then begin
    Setting("Main Premise",CYAWClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Municipalities",MunicipalityLClass,modSY);
  end;
  if (HasLocalization("FIN")) then begin
    Setting("Optional Features",UXFTClass,modSY);
  end;
  if (HasObjects and (HasModNL==false and HasIncomeAndExpenseBook==false)) then begin
    Setting("Tags/Objects",ObjLClass,modSY);
    Setting("Tag/Object Types",OTLClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Operation Types",OperationTypeLClass,modSY);
  end;
  if (HasPriceLists) then begin
    Setting("Price Lists",PLDefLClass,modSY);
    Setting("Prices",PLLClass,modSY);
  end;

  Setting("Reporting Periods",PeriodTClass,modSY);
  Setting("Round Off",RoundTClass,modSY);
  Setting("Units",UnitLClass,modSY);
  if (HasLanguages) then begin
    Setting("Values in Text",LangNrLClass,modSY);
  end;
  if (HasModNL==false and HasIncomeAndExpenseBook==false) then begin
    Setting("#VAT# Codes",VATCodeTClass,modSY); 
  end;
  if ((HasNumberSeries or HasLocalization("LVA")) and (HasOfficialSerNr or HasInvoiceOfficialSerNr)) or (HasFiscalPrinter and HasLocalization("SVN")) then begin
    Setting("Legal Invoice Numbers",LegalInvNrTClass,modSY);
  end;  
  if (HasLocalization("HRV,SVN,SRB")) then begin
    Setting("XML Schema Definitions",XMLExportLClass,modSY);
  end;
  
  Report("Company Info",CompInfoRClass,CompInfoRn,0,modSY);
  if (HasModSL==false) then begin
    Report("Contact List",CURClass,CustRn,0,modSY);
    if (HasMultiCurrency or HasBase2) then begin
      Report("Exchange Rates",ERDateRClass,ERDateRn,0,modSY);
    end;
    if (HasLocalization("RUS")) then begin
      Report("Order Journal",ORJRClass,OrdRn,0,modSY);
    end else begin
      if (HasModSL) then begin
        Report("Invoice Journal",IVJRClass,InvoiceRn,0,modSY);
      end;
    end;
    Report("Item List",ArtRClass,ArtRn,0,modSY);
    if (HasLocalization("LTU")) then begin
      Report("#VAT# Report Sales",SLVATLitRClass,SLVATLitRn,0,modSY);  
    end;
  end else begin
    if (HasMultiCurrency or HasBase2) then begin
      Report("Exchange Rates",ERDateRClass,ERDateRn,0,modSY);
    end;
  end;

  if (HasRegistersExports) then begin
    Export("Base Registers",GBaseEClass,GBaseEn,modSY);
  end;
  if (GuiType!=kGuiiPhone) then begin
    Export("Database Text Backup",TBDatabaseEClass,DatabaseTBEn,modSY);
  end;
  if (HasRegistersExports) then begin
    Export("Item Base Registers",GItemBaseEClass,GItemBaseEn,modSY);
  end;
  if (HasLocalization("HRV")) then begin
    Export("Register Export",ExpRegEClass,ExpRegEn,modSY);
  end;  
  if (GuiType!=kGuiiPhone) then begin
    Export("Run Timed Backup",TBRunTimedEClass,RunTimedTBEn,modSY);
  end;
  if (HasRegistersExports) then begin
    Export("System Data",SysEClass,SysEn,modSY);
  end;
  if (HasModSL==false) then begin
    if (HasLocalization("PRT")) then begin
      Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modSY);
    end;    
    if (HasLocalization("LTU")) then begin
      Export("#S/L# #VAT# Invoices (Lithuania)",LitVATRegIVEClass,LitVATRegIVEn,modSY);
    end;
  end;
  if (HasRegistersExports) then begin
    Export("Transaction Registers",GTransEClass,GTransEn,modSY);
    Export("Transaction Registers (period)",GTrans2EClass,GTrans2En,modSY);  
  end;
  
  Import("Automatic",0,FullyAutIn,modSY);
  Import("Manual file search",0,AutIn,modSY);
  Import("Remote backup",RemoteInIClass,RemoteIn,modSY);

  if (HasIntegratedNL) then begin
    Maintenance("Create #N/L# Transactions",TransGenVClass,GenTransMn,modSY);
  end;
  if (HasLocalization("HRV")) then begin
    Maintenance("Invoices without Official No.",XMLExportVClass,XMLExportMn,modSY);
  end;
  if (HasLocalization("POL")) then begin
    Maintenance("Fill-in Invoice No.",FillinIVNrVClass,FillinIVNrMn,modSY);
    Maintenance("Fill-in Receipt No.",FillinIPNrVClass,FillinIPNrMn,modSY);
  end;
  if (ClientMode and HasServerInCloud) then begin  
    Maintenance("Upload Logo File",UploadLogoFileVClass,UploadLogoFileMn,modSY);  
  end;


  end;
  return;
end;
