/* sasengm.hal */
/* Books by HansaWorld */
external function Boolean HasDeveloperMode();
external function Boolean HasETaxDocuments();
external function Boolean HasModQT();
external function Boolean HasSerialNumbers();
external function Boolean HasModAT2();
external function Boolean HasModCL();
external function Boolean HasStandardCRM();
external function Boolean HasModExp();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();
external function Boolean HasModSO();
external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModSL();
external function Boolean HasModPL();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModRest();
external function Boolean HasModCRM();
external function Boolean HasPayroll();

external function Boolean HasAdvancedPricing();
external function Boolean HasBase2();
external function Boolean HasContactClassification();
external function Boolean HasFormEditor();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLocalMachines();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNumberSeries();
external function Boolean HasOfficialSerNr();
external function Boolean HasObjects();
external function Boolean HasPriceLists();
external function Boolean HasVarieties();
external procedure SetProductTags();
external procedure LoadWindowTags();

begin
  Real h,v,l,vs;
  
  SetLangMode(LangEnglish,"ENG",2);
  
  // this is for when it's a hardcoded list of options
  // we'll get some better solution for that later, but for now we
  // need one product folder per set of default options

  SetProductTags;
  LoadWindowTags;
  
  
  if (HasModSL) then begin
    Module("#Sales Ledger#","",730,modSL);
  end;

  
  // debug
  if (HasDeveloperMode) then begin
    Setting("Cloud Services",EnabServerTClass,modSY);
    Setting("Configuration",ModulesTClass,modSY);
    Setting("Current License Flags",CurLicensesClass,modSY);
    Setting("Internet Enablers",InternetEnablerTClass,modSY);
    Setting("Licenses",LicensesLClass,modSY);
    Register("Mailboxes","Mailboxes",ConferenceWClass,modSY);
    Setting("Services Cache",ServiceCacheLClass,modSY);
    Setting("Std Registration Data",StdRegDataWClass,modSY);
  end;
  // end debug code
  
/* modSL */

  Register("Invoices","Invoices",IVVc,modSL);
  Register("Receipts","Receipts",IPVc,modSL);
  Register("Contacts","Contacts",CUVc,modSL);
  Register("Contact Relations","Contact Relations",ContactRelVc,modSL);
  Register("Items","Items",INVc,modSL);
  if (HasFormEditor) then begin
    Register("Forms","Forms",DocVc,modSL);
  end;
  if (HasLocalization("FIN")) then begin  
    Register("Electronic Invoices Queue","Electronic Invoices Queue",EInvoiceQueVc,modSL);
    Register("Electronic Record Statuses","Electronic Record Statuses",ERecordStatusVc,modSL);
  end;

  Setting("Activity Classes",ActTypeGrLClass,modSL);
  Setting("Activity Types",ActTypeLClass,modSL);
  Setting("Account Usage #S/L#",AccTClass,modSL);
  Setting("Banks",BankLClass,modSL);
  if (HasLocalization("FIN")) then begin
    Setting("Bank Transfer",BankFileTClass,modSL);
  end;
  Setting("Cloud Services",EnabServerTClass,modSL);
  if (HasLocalization("FIN")) then begin
    Setting("Cloud Services Settings",EInvoiceTClass,modSL);
  end;
  Setting("Configuration",ModulesTClass,modSL);
  Setting("Companies",CompaniesTClass,modSL);
  Setting("Company Date and Numeric Format",SysFormatTClass,modSL);
  Setting("Company Info",CYWClass,modSL);
  Setting("Credit Limit",CreditLimitTClass,modSL);
  Setting("Customer Categories",CCatLClass,modSL);
  Setting("Database Status",DBERecordsTClass,modSL);
  if (HasLocalization("FIN")) then begin
    Setting("Electronic Invoices Customers Data",EInvCULClass,modSL);
  end;
  Setting("Fiscal Years",YearTClass,modSL);
  if (HasFormEditor) then begin
    Setting("Form Settings",FormTClass,modSL);
  end;
  Setting("Info in Customer Status Report",CustPSLClass,modSL);
  Setting("Internet Enablers",InternetEnablerTClass,modSL);
  Setting("Item Groups",ITLClass,modSL);
  if (HasLanguages) then begin
    Setting("Client Language",UserLanguageTClass,modSL);
    Setting("Languages",LangTClass,modSL);
  end;
  Setting("Local Machine",LocalMachineTClass,modSL);
  Setting("Optional Features",UXFTClass,modSL);
  Setting("Payment Modes",PMTClass,modSL);
  Setting("Payment Terms",PDLClass,modSL);
  Setting("Persons",UserLClass,modSL);
  Setting("Prices",PLLClass,modSL);
  Setting("Price Lists",PLDefLClass,modSL);
  if (HasLocalization("FIN")) then begin
    Setting("Reference Number Settings",CalcRefTClass,modSL);
  end;
  Setting("Reminders Texts",RMLClass,modSL);
  Setting("Reporting Periods",PeriodTClass,modSL);
  Setting("Round Off",RoundTClass,modSL);
  Setting("Services Cache",ServiceCacheLClass,modSL);
  if (HasFormEditor) then begin
    Setting("Styles",StyleLClass,modSL);
  end;
  Setting("Timed Operations",BackupTClass,modSL);
  Setting("Units",UnitLClass,modSL);
  Setting("#VAT# Codes",VATCodeTClass,modSL);
  Setting("Weeks",WeekLClass,modSL);

  Document("Cash Notes",KIVRClass,CashInvForm,CashFClass,modSL);
  Document("#Credit Notes#",CIVRClass,CredInvForm,CredFClass,modSL);
  Document("Customer Labels",CuLabRClass,CuLabForm,CuLabFClass,modSL);
  Document("Invoices",IVRClass,InvForm,InvFClass,modSL); 
  Document("Reminders",RemRClass,RemForm,RemFClass,modSL);

  Report("Company Info",CompInfoRClass,CompInfoRn,0,modSL);
  Report("Contact List",CURClass,CustRn,0,modSL);
  Report("Customer Statistics",CustSTRClass,CustSTRn,0,modSL);
//  Report("Employee Calendar",ActCalStaffRClass,ActCalStaffRn,0,modSL);
  if (HasLocalization("FIN")) then begin
    Report("Electronic Invoice Status",HTSStatIVRClass,HTSStatIVRn,0,modSL);
    Report("Idle Tasks List",IdleTaskListRClass,IdleTaskListRn,0,modSL);
  end;
  Report("Invoice Journal",IVJRClass,InvoiceRn,0,modSL);
  Report("Item List",ArtRClass,ArtRn,0,modSL);
  Report("Item Statistics",ArtSTRClass,ArtSTRn,0,modSL);
//  Report("Payment Journal",OPJRClass,OPJRn,0,modSL);
//  Report("Payments Forecast",OPProgRClass,OPProgRn,0,modSL);
  Report("Periodic Customer Statement",CuPer2RClass,CuPerRn,0,modSL);
  Report("Receipts Forecast",IPProgRClass,IPProgRn,0,modSL);
  Report("Receipt Journal",IPRClass,IPRn,0,modSL);
  Report("#Sales Ledger#",ARRClass,ARRn,0,modSL);
  if (HasLocalization("FIN")) then begin
    Report("Services Test",ServicesTestRClass,ServicesTestRn,0,modSL);
  end;

  Export("Company Text Backup",TBEClass,CompanyTBEn,modSL);
  Export("Customer Statistics",CustSTEClass,CustSTEn,modSL);
  Export("Database Text Backup",TBDatabaseEClass,DatabaseTBEn,modSL);
  if (HasLocalization("FIN")) then begin
    Export("Finvoice",FInvoiceEClass,FInvoiceEn,modSL);
  end;
  Export("Item Statistics",ArtSTEClass,ArtSTEn,modSL);
  Export("Run Timed Backup",TBRunTimedEClass,RunTimedTBEn,modSL);

  Import("Automatic",0,FullyAutIn,modSL);
  Import("Manual file search",0,AutIn,modSL);
  if (HasLocalization("FIN")) then begin
    Import("Banking File",RefIPIn,RefIPIn,modSL);
  end;
  
  Maintenance("System Message",SysMessVClass,SysMessMn,modSL);

  return;
end;
