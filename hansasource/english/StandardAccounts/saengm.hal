/* sasengm.hal */
/* Standard Accounts by HansaWorld */
external function Boolean HasDeveloperMode();
external function Boolean HasConsStockMoveInvoices();
external function Boolean HasCustomerLetter();
external function Boolean HasDownpayments();
external function Boolean HasBankImport();
external function Boolean HasAccountRecon();
external function Boolean HasAdvancedAccounting();
external function Boolean HasInvoiceOfficialSerNr();
external function Boolean HasPersons();
external function Boolean HasETaxDocuments();
external function Boolean HasModQT();
external function Boolean HasSerialNumbers();
external function Boolean HasModAT2();
external function Boolean HasModCL();
external function Boolean HasStandardCRM();
external function Boolean HasModExp();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();
external function Boolean HasTaxMatrix();
external function Boolean HasModSO();
external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModSL();
external function Boolean HasModPL();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModRest();
external function Boolean HasModCRM();
external function Boolean HasPaymentGateway();
external function Boolean HasPayroll();
external function Boolean HasEMail();
external function Boolean HasModSVO();
external function Boolean HasModProd();
external function Boolean HasModTS();

external function Boolean HasAccessGroups();
external function Boolean HasAdvancedCRM();
external function Boolean HasAdvancedPricing();
external function Boolean HasBase2();
external function Boolean HasCategories();
external function Boolean HasContactClassification();
external function Boolean HasDepartments();
external function Boolean HasEInvoicing();
external function Boolean HasFiscalPrinter();
external function Boolean HasFormEditor();
external function Boolean HasIncomeAndExpenseBook();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLocalMachines();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNLBudget();
external function Boolean HasNumberSeries();
external function Boolean HasOfficialSerNr();
external function Boolean HasObjects();
external function Boolean HasPriceLists();
external function Boolean HasReminderLevel();
external function Boolean HasReturnedGoods();
external function Boolean HasRetGoodsToSupp();
external function Boolean HasSalesmanBonus();
external function Boolean HasServerInCloud();
external function Boolean HasSimulations();
external function Boolean HasVarieties();
external function Boolean HasRegistersExports();
external function Boolean HasSkypeConnection();
external function Boolean HasSLIntegratedWithNL();
external function Boolean HasPLIntegratedWithNL();
external function Boolean HasIntegratedNL();
external function Boolean HasVATZone();

external function Boolean HasWithholdingTax();
external function Boolean HasWithholdingTaxAdvanced();
external function Boolean HasPrepayments();
external procedure LoadWindowTags();
external procedure SetProductTags();

begin
  Real h,v,l,vs;
  
  SetLangMode(LangEnglish,"ENG",2);
  
  // this is for when it's a hardcoded list of options
  // we'll get some better solution for that later, but for now we
  // need one product folder per set of default options

  if (BuildProductCode=="StandardAccounts" or BuildProductCode=="StandardBusiness" or BuildProductCode=="StandardAccountsMWeb" or BuildProductCode=="StandardAccountsiDream" or BuildProductCode=="StandardAccountsWebRaama") then begin
  
  SetProductTags;
  LoadWindowTags;
  
/*not approved, according to OPM  
  if (HasStandardCRM) then begin
    Module("CRM","",730,modCRM);  
    Module("Calendar","",730,modCAL);  
    Module("Task Manager","",730,modTASK);
  end;
*/  
  if (HasModAT2) then begin
    Module("Assets","",730,modAT2);
  end;
  if (HasModCL) then begin
    Module("Cash Book","",730,modCL);
  end;
  if (HasStandardCommunicator and HasStandardCRM==false and HasStandardOrganizer==false) then begin 
    Module("Communicator","",730,modCRM);
  end;
  if (HasModCRM) then begin 
    Module("CRM","",730,modCRM);
  end;
  if (HasEMail) then begin
    Module("Email","",730,modEmail);
  end;
  if (HasModExp) then begin
    Module("Expenses","",730,modExp);
  end;
  if (HasModTS) then begin
    Module("Job Costing","",730,modTS);
  end;
  if (HasModNL) then begin
    Module("#Nominal Ledger#","",730,modNL);
  end else begin
    if (HasIncomeAndExpenseBook) then begin
      Module("#Nominal Ledger#","",730,modNL);
    end;
  end;
  if (HasStandardOrganizer and HasStandardCRM==false) then begin 
    Module("Organizer","",730,modCRM);
  end;
  if (HasModPOS) then begin
    Module("Point of Sales","",730,modPOS);  
  end;
  if (HasModPL) then begin
    Module("#Purchase Ledger#","",730,modPL);  
  end;
  if (HasModPO) then begin
    Module("#Purchase Orders#","",730,modPO);
  end;
  if (HasModQT) then begin
    Module("Quotations","",730,modQT);
  end;  
  if (HasModProd) then begin
    Module("Production","",730,modProd);
  end;
  if (HasModRest) then begin
    Module("#Restaurant#","",730,modRest);  
  end;
  if (HasModSL) then begin
    Module("#Sales Ledger#","",730,modSL);
  end;
  if (HasModSO) then begin
    Module("Sales Orders","",730,modSO);
  end;
  if (HasModIN) then begin
    Module("#Stock#","",730,modIN);
  end;
  if (HasModSL or HasModIN or HasModSO or HasModRest or HasModQT or HasModPO or HasPayroll or HasModPL or HasModPOS or HasModNL or HasIncomeAndExpenseBook or HasModCL or HasStandardCRM) then begin
    Module("System","",730,modSY);
  end;
  if (HasModSVO) then begin
    Module("Service Orders","",730,modSVO);
  end;
  if (HasPayroll) then begin
    Module("Personnel","",730,modSAL);
    Module("Payroll","",730,modPY);
  end;
    
  // debug
  if (HasDeveloperMode) then begin
    Setting("Aut. Sales Actions",AutSalesActionLClass,modSY);
    Setting("Cloud Services",EnabServerTClass,modSY);
    Setting("Configuration",ModulesTClass,modSY);
    Setting("Current License Flags",CurLicensesClass,modSY);
    Setting("Internet Enablers",InternetEnablerTClass,modSY);
    Setting("Licenses",LicensesLClass,modSY);
    RegisterWS("Mailboxes","Mailboxes","New Mail",ConferenceWClass,modSY);
    Setting("My IP Address",MyIPAddrTClass,modSY);
    Setting("Program Mode",ProgramStatusTClass,modSY);
    Setting("Services Cache",ServiceCacheLClass,modSY);
    Setting("Std Registration Data",StdRegDataWClass,modSY);
    Setting("Legal SerNo's",OffSerNrLClass,modSY);
    Setting("User Feature Pref",UserFeaturePrefTClass,modSY);    
    Setting("Login Options",LocalLoginOptionsTClass,modSY);
    Setting("Internet Enablers (old block)",InternetEnabOldTClass,modSY);
    Setting("Setup Status",SetupStatusTClass,modSY);
    Setting("Electronic Invoices Queue",EInvoiceQueLClass,modSY);
    Setting("Standard Server Type",StandardServerTClass,modSY);
    Report("Idle Tasks List",IdleTaskListRClass,IdleTaskListRn,0,modSY);
    Setting("Company Date and Numeric Format",SysFormatTClass,modSY);    

    RegisterWS("POS Invoices 2","POS Invoices 2","New Invoice",IVCashVc,modPOS);
    Setting("Legal Record Numbers",OffSerNrLClass,modPOS);
  end;
  // end debug code
  
/* modSL */
  
  RegisterWS("Invoices","Invoices","New Invoice",IVVc,modSL);
  RegisterWS("Receipts","Receipts","New Receipt",IPVc,modSL);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modSL);
  RegisterWS("Items","Items","New Item",INVc,modSL);
  if (HasPriceLists) then begin
    RegisterWS("Prices","Prices","New Price",PLVc,modSL);
  end;
  if (HasLocalization("POL") and HasVATZone) then begin
    RegisterWS("Internal Invoices","Internal Invoices","New Internal Invoice",IntIVVc,modSL);
  end;
  if (HasLocalization("RUS")) then begin
    RegisterWS("Sales Orders","Sales Orders","New Sales Order",ORVc,modSL);
  end;
  
  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Setting("Account Usage #S/L#",AccTClass,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Setting("Age Limits",AgedTClass,modSL);
  end;
  if (HasLocalization("BRA")) then begin 
    Setting("Bank Receipt Settings",BankReceiptTClass,modSL);
  end;
  if (HasLocalization("FIN,LVA,RUS") or HasEInvoicing) then begin
    Setting("Banks",BankLClass,modSL);
  end;
  if (HasSalesmanBonus) then begin
    Setting("Bonus",BonusDefLClass,modSL);
  end;
  if (HasPaymentGateway) then begin
    Setting("Payment Gateways",CCAccountIDLClass,modSL);
  end;
  if (HasContactClassification) then begin
    Setting("Contact Classifications",CClassLClass,modSL);
  end;
  if (HasCategories) then begin
    Setting("Customer Categories",CCatLClass,modSL);
  end;
  if (HasEInvoicing or NumberOfEInvoices>0) or (HasFiscalPrinter and HasLocalization("SVN")) then begin
    Setting("Electronic Invoices Settings",EInvoiceTClass,modSL);
  end;
  if (HasEInvoicing) then begin
    Setting("Electronic Invoices Queue",EInvoiceQueLClass,modSL);
    Setting("Electronic Record Statuses",ERecordStatusLClass,modSL);
  end;
  if (HasLocalization("POL") and HasVATZone) then begin
    Setting("Internal Invoices",IntIVLClass,modSL);
  end;
  if (HasEInvoicing and HasLocalization("ARG")) then begin
    Setting("Internet Service Server",HTSEInvoiceTClass,modSL);
  end;

  if (HasModNL==false and HasIncomeAndExpenseBook==false) then begin
    Setting("Invoice Settings",AccTClass,modSL);
  end;
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT")) then begin
    Setting("Item Groups",ITLClass,modSL);
  end;
  if (HasModSL and HasLocalization("ITA,PRT")) then begin
    Setting("Item Group Withholdings",WHITLClass,modSL);
  end;
  if ((HasNumberSeries or HasLocalization("HRV,LVA")) and (HasOfficialSerNr or HasInvoiceOfficialSerNr)) or (HasEInvoicing and HasLocalization("ARG")) then begin
    Setting("Legal Invoice Numbers",LegalInvNrTClass,modSL);
  end;  
  if (HasNumberSeries) then begin
    Setting("Number Series - Invoices",IVSerTClass,modSL);
    Setting("Number Series - Receipts",IPSerTClass,modSL);
    if (HasModNL or HasIncomeAndExpenseBook) and (HasLocalization("POL")) then begin
      Setting("Number Series - #VAT# Corrections #S/L#",VATIVSerTClass,modSL);
    end;
  end;
  if (HasPaymentGateway) then begin
    Setting("Payment Gateways",CCAccountIDLClass,modSL);
  end;
  Setting("Payment Modes",PMTClass,modSL);
  Setting("Payment Terms",PDLClass,modSL);
  if (HasPriceLists) then begin
    Setting("Price Lists",PLDefLClass,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Setting("Reference Number Settings",CalcRefTClass,modSL);
  end;
  if (HasLocalization("ARG")) then begin
    Setting("Registration Defaults",RegDefTClass,modSL);
  end;
  Setting("Sales Invoice Settings",IVTTClass,modSL);  
  if (HasLocalization("PRT")) then begin
    Setting("Standard Problems",StandProblemLClass,modSL);
  end;
  if (HasModNL==false) then begin
    if (HasLocalization("BRA,HRV")) then begin
      Setting("Tax Templates",TaxTemplateLClass,modSL);
      Setting("Transaction Settings",TrTClass,modSL);
    end;
    if (HasLocalization("BRA,HRV,KEN")) then begin
      Setting("Tax Templates",TaxTemplateLClass,modSL);
    end;
  end;
  Setting("Units",UnitLClass,modSL);
  if (HasLocalization("POL")) and (HasModNL or HasIncomeAndExpenseBook) then begin
    Setting("#VAT# Corrections #S/L#",VATIVLClass,modSL);
  end;
  if (HasLocalization("HRV")) and (HasModNL or HasIncomeAndExpenseBook) then begin
//    Setting("#VAT# Correction #S/L# Types",VATIVTypeTClass,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Setting("#VAT# Codes",VATCodeTClass,modSL); 
  end;  
  if (HasLocalization("ARG,BRA,ITA,KEN,MEX,PRT,SGP,ZAF") and (HasModPL or HasModSL) and (HasWithholdingTax or HasWithholdingTaxAdvanced)) then begin
    Setting("Withholding Calculation Formulae",WHCalcFormLClass,modSL);
    Setting("Withholding Taxes",WHTaxTClass,modSL);
  end;

  if (HasLocalization("RUS")==false) then begin
    Document("Cash Notes",KIVRClass,CashInvForm,CashFClass,modSL);
  end;
  
  Document("#Credit Notes#",CIVRClass,CredInvForm,CredFClass,modSL);
  
  if (HasLocalization("RUS")==false) then begin
    Document("Customer Labels",CuLabRClass,CuLabForm,CuLabFClass,modSL);
  end;
  
  if (HasLocalization("POL")) then begin
    Document("Debtors Letter",DebtLetRClass,DebtorLetForm,DebtLetFClass,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Document("Interest Invoices",IIVRClass,IIInvForm,IIFClass,modSL);
  end;
  if (HasLocalization("POL") and HasVATZone) then begin
    Document("Internal Invoices",IntIVRClass,IntIVForm,IntIVFClass,modSL);
  end;
  Document("Invoices",IVRClass,InvForm,InvFClass,modSL); 
  if (HasLocalization("PRT")) then begin
    Document("Invoice/Receipt's",KIVRClass,CashInvRecPRTForm,CashRecPRTFClass,modSL);
  end;    
  Document("Open Invoice Customer Statement",ARSRClass,ARSForm,ARSFClass,modSL);
  Document("Periodic Customer Statement",CuPerRClass,CuPerForm,CuPerFClass,modSL);
  if (HasLocalization("POL")) then begin
    Document("Proforma Invoices",Inv1RClass,Inv1Form,Inv1FClass,modSL);
  end;
  Document("Receipt Forms",IPDRClass,IPDForm,IPDFClass,modSL);
  if (HasLocalization("LTU,LVA,POL") or HasReminderLevel) then begin
    Document("Reminders",RemRClass,RemForm,RemFClass,modSL);
  end;
  if (HasLocalization("RUS")) then begin
    Document("Orders",ORRClass,OrdForm,OrdFClass,modSL);
  end;
  
  if (HasSalesmanBonus) then begin
    Report("Bonus, #Salesman#",BonusRClass,BonusRn,0,modSL);
  end;
  Report("Contact List",CURClass,CustRn,0,modSL);
  Report("Customer/Item Statistics",CuArtSTRClass,CuArtSTRn,0,modSL);
  Report("Customer Statistics",CustSTRClass,CustSTRn,0,modSL);
  if (HasEInvoicing) then begin
    Report("Electronic Invoice Status",HTSStatIVRClass,HTSStatIVRn,0,modSL);
  end;
  if (HasVATZone) then begin
    Report("EU #VAT# Sales",SLEUVATRClass,SLEUVATRn,0,modSL);
  end;
  if (HasLocalization("HRV,PRT")) then begin
    Report("GP, Invoices",IVGPRClass,IVGPRn,0,modSL);
  end;
  if (HasLocalization("ITA")==false) then begin 
    Report("Invoice Journal",IVJRClass,InvoiceRn,0,modSL);
  end; 
  Report("Item List",ArtRClass,ArtRn,0,modSL);
  Report("Item Statistics",ArtSTRClass,ArtSTRn,0,modSL);
  if (HasSalesmanBonus) then begin
    Report("Item/Salesman Statistics",IStatRClass,IStatRn,0,modSL);
  end;
  if (HasLocalization("LVA")) then begin
    Report("Legal Invoice Forms Usage",LegInvFormRClass,LegInvFormRn,0,modSL);
  end;
  Report("Open Invoice Customer Statement",ARS2RClass,ARS2Rn,0,modSL);
  if (HasLocalization("RUS")) then begin
    Report("Order Journal",ORJRClass,OrdRn,0,modSL);
    Report("Order Payment Status",ORPayStatusRClass,ORPayStatusRn,0,modSL);
  end;
  Report("Periodic Customer Statement",CuPer2RClass,CuPerRn,0,modSL);
  if (HasLocalization("LVA") or HasPrepayments) then begin
    Report("Prepayment History #S/L#",PerPayHisSLRClass,PerPayHisSLRn,0,modSL);
  end;
  if (HasPriceLists) then begin
    Report("Price List",PriceRClass,PriceRn,0,modSL);
  end;
  Report("Receipts Forecast",IPProgRClass,IPProgRn,0,modSL);
  Report("Receipt Journal",IPRClass,IPRn,0,modSL);
  Report("#Sales Ledger#",ARRClass,ARRn,0,modSL);
  if (HasLocalization("ITA,PRT")) then begin
    Report("#VAT Code# Statistics",SLVATRClass,SLVATRn,0,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Customer Sales",RealCustRClass,RealCustRn,0,modSL);
  end;
  if (HasLocalization("POL")) and (HasModNL or HasIncomeAndExpenseBook) then begin
    Report("#VAT# Report Sales",SLVATRepRClass,SLVATRepRn,0,modSL);
  end;
  if (HasLocalization("ARG")) then begin
    Report("#VAT# Report Sales",SLVATArgRClass,SLVATArgRn,0,modSL);  
  end;
  if (HasLocalization("LTU")) then begin
    Report("#VAT# Report Sales",SLVATLitRClass,SLVATLitRn,0,modSL);  
  end;
  if (HasLocalization("HND")) then begin
    Report("#VAT# Report Sales (Honduras)",SLVATHonRClass,SLVATHonRn,0,modSL);  
  end;
  
  if (HasModNL) then begin
    if (HasLocalization("PRT")) then begin
      Maintenance("Transfer to Bad Debtors",BadCUVClass,BadCUMn,modSL);
    end;
  end;
  if (HasEMail) then begin
    Maintenance("Create Periodic Customer Statement Email",CUPerEmailVClass,CUPerEmailMn,modSL); // We have this belowe SendPerStatVClass
  end;
  if (HasModNL) and (HasLocalization("HRV")) then begin
//    Maintenance("Create #VAT# Corrections #S/L#",VATIVVClass,VATIVMn,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    if (HasEMail) then begin
      Maintenance("SAFT to Email",SAFTtoEmailVClass,SAFTtoEmailMn,modSL);
    end;
  end;

  if (HasLocalization("PRT")) then begin
//    Export("Communication of Invoices to AT - SAFT",PortTaxXml2EClass,PortTaxXml2En,modSL);    
  end;
  if (HasLocalization("LVA")) then begin
    Export("EU Sales Export (Latvia)",LatEUSalesEClass,LatEUSalesEn,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("EU #VAT# Sales (Lithuania)",SLEUVATLitECLass,SLEUVATLitEn,modSL);
  end;
  if (HasLocalization("BRA")) then begin
    Export("Fiscal Note for Services",BraFiscalNoteEClass,BraFiscalNoteEn,modSL); 
  end;
  if (HasLocalization("LTU")) then begin
    Export("#S/L# #VAT# Invoices (Lithuania)",LitVATRegIVEClass,LitVATRegIVEn,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modSL);
  end; 
  if (HasLocalization("NOR")) then begin
    Export("SAFT",NorTaxXmlEClass,NorTaxXmlEn,modSL);
  end; 
  if (HasLocalization("LVA")) then begin
    Export("#VAT# Declaration Annex #VAT#1-III (Latvia)",LatVATSalesEClass,LatVATSalesEn,modSL);
  end;
  if (HasBankImport) then begin
    Import("Banking File",RefIPIn,RefIPIn,modSL);
  end;
  if (HasLocalization("BRA")) then begin
    Import("Fiscal Note for Services Reply",0,BraFiscalNoteIn,modSL);
  end;
  
/* modPL */

  RegisterWS("#Purchase Invoices#","#Purchase Invoices#","New #Purchase Invoice#",VIVc,modPL);
  RegisterWS("Payments","Payments","New Payment",OPVc,modPL);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modPL);

  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Setting("Account Usage #P/L#",APAccTClass,modPL);
  end;
  if (HasLocalization("AUS,ESP,FIN,LVA,RUS") or HasEInvoicing) then begin
    Setting("Banks",BankLClass,modPL);
  end;
  if (HasLocalization("AUS,ESP,FIN,GBR,LVA,NOR,POL,SWE")) then begin
    Setting("#Bank Files#",BankFileTClass,modPL);
  end;
  if (HasNumberSeries) then begin
    Setting("Number Series - #Purchase Invoices#",VISerTClass,modPL);
    Setting("Number Series - Payments",OPSerTClass,modPL);
    if (HasModNL or HasIncomeAndExpenseBook) and (HasLocalization("POL,HRV")) then begin
      Setting("Number Series - #VAT# Corrections #P/L#",VATVISerTClass,modPL);
    end;
  end;
  Setting("Payment Modes",PMTClass,modPL);
  Setting("Payment Terms",PDLClass,modPL);
  if (HasCategories) then begin
    Setting("#Supplier# Categories",VGLClass,modPL);
  end;
  if (HasLocalization("ARG,BRA,ITA,MEX,PRT,SGP,ZAF") and (HasWithholdingTax or HasWithholdingTaxAdvanced)) then begin
    Setting("#Supplier# Withholdings",WHVELClass,modPL);
  end;
  if (HasModNL or HasIncomeAndExpenseBook) and (HasLocalization("POL,HRV")) then begin
    Setting("#VAT# Corrections #P/L#",VATVILClass,modPL);
  end;
  if (HasModNL or HasIncomeAndExpenseBook) and (HasLocalization("HRV")) then begin
    Setting("#VAT# Correction #P/L# Types",VATVITypeTClass,modPL);
  end;
  if (HasLocalization("ARG,BRA,ITA,MEX,PRT,SGP,ZAF") and (HasWithholdingTax or HasWithholdingTaxAdvanced)) then begin
    Setting("Withholding Calculation Formulae",WHCalcFormLClass,modPL);
  end;
  if (HasLocalization("ARG,BRA,ITA,MEX,SGP,ZAF") and (HasWithholdingTax or HasWithholdingTaxAdvanced)) then begin
    Setting("Withholding Certificates",WHCertificateLClass,modPL);
  end;
  if (HasLocalization("ARG,BRA,ITA,KEN,MEX,PRT,SGP,ZAF") and (HasWithholdingTax or HasWithholdingTaxAdvanced)) then begin
    Setting("Withholding Taxes",WHTaxTClass,modPL);
  end;  
  
  Document("Open Invoice #Supplier# Statement",APSRClass,APSForm,APSFClass,modPL);
  Document("Payment Forms",OPDRClass,OPDForm,OPDFClass,modPL);
  Document("Payment Lists",OPRClass,OPForm,0,modPL);
  if (HasLocalization("LTU")) then begin
    Document("Periodic #Supplier# Statement",VEPerRClass,VEPerForm,VEPerFClass,modPL);
  end;
  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Document("#Purchase Invoices#",VIRClass,VIForm,VIFClass,modPL);
  end;

  if (HasVATZone) then begin
    Report("EU #VAT# Purchases",PLEUVATRClass,PLEUVATRn,0,modPL);
  end;
  Report("Open Invoice #Supplier# Statement",APS2RClass,APS2Rn,0,modPL);
  Report("Payments Forecast",OPProgRClass,OPProgRn,0,modPL);
  Report("Payment Journal",OPJRClass,OPJRn,0,modPL);
  Report("Periodic #Supplier# Statement",VePer2RClass,VePerRn,0,modPL);
  if (HasLocalization("LTU,LVA")) then begin
    Report("#P/L# #VAT# Report",PLVAT2RClass,PLVAT2Rn,0,modPL);
  end;
  if (HasLocalization("LTU,LVA") or HasPrepayments) then begin
    Report("Prepayment History #P/L#",PerPayHisPLRClass,PerPayHisPLRn,0,modPL);
  end;
  Report("#Purchase Invoice# Journal",VIJRClass,VIJRn,0,modPL);
  Report("#Purchase Ledger#",APRClass,APRn,0,modPL);
  Report("#Supplier# List",VERClass,VERn,0,modPL);
  if (HasLocalization("ARG")) then begin
    Report("#VAT# Report Purchases",ArgPurchVATRClass,ArgPurchVATRn,0,modPL);
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("LTU,LVA,POL")) and (HasModNL or HasIncomeAndExpenseBook) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# #Supplier# Purchases",RealSuppRClass,RealSuppRn,0,modPL); 
  end;
  if (HasLocalization("HND")) then begin
    Report("#VAT# Report Purchases (Honduras)",PLVATHonRClass,PLVATHonRn,0,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Report("#VAT# Report Purchases (Lithuania)",PLVATLitRClass,PLVATLitRn,0,modPL);
  end;
  
  if (HasLocalization("AUS,ESP,FIN,GBR,LVA,NOR,POL,SWE")) then begin
    Export("Banking File",MPEClass,MPEn,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#P/L# #VAT# Invoices (Lithuania)",LitVATRegVIEClass,LitVATRegVIEn,modPL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#P/L# Latvian #VAT# Report",PLVAT1ExpEClass,PLVAT1En,modPL);
    Export("#VAT# Purchases (Latvia)",LatVATPurchasesEClass,LatVATPurchasesEn,modPL);
  end;
    
  if (HasModNL) and (HasLocalization("HRV")) then begin
    Maintenance("Create #VAT# Corrections #P/L#",VATVIVClass,VATVIMn,modPL);
  end;

/* modNL */
  
  if (HasModNL==false) then begin
    if (HasIncomeAndExpenseBook) then begin
      RegisterWS("Accounts","Accounts","New Account",AccVc,modNL);
      RegisterWS("#Transactions#","#Transactions#","New #Transaction#",TRVc,modNL);

      Setting("Fiscal Years",YearTClass,modNL);
      Setting("Income & Expense Book",IncExpBookLClass,modNL);
      if (HasNumberSeries) then begin
        Setting("Number Series - Transactions",TRSerTClass,modNL);
      end;
      if (HasIntegratedNL) then begin
        Setting("Sub Systems",TRGenTClass,modNL);
      end;
      if (HasLocalization("POL")) then begin
        Setting("Tax Reporting Settings",TaxRepCUTClass,modNL);
      end;
      if (HasLocalization("BRA,CAN,HRV,LVA,KEN,POL,USA")) then begin
        Setting("Tax Rules",TaxRulesLClass,modNL);
      end;
      Setting("#VAT# Codes",VATCodeTClass,modNL);
      
      Report("Income & Expense Book",IncExpBookRClass,IncExpBookRn,0,modNL);
    end;
  end else begin
    RegisterWS("Transactions","Transactions","New Transaction",TRVc,modNL);
    if (HasLocalization("AGO,PRT")) then begin
      RegisterWS("Simulations","Simulations","New Simulation",SMVc,modNL);  
    end;
    
    if (HasAccountRecon) then begin
      Register("Account Reconciliation","Account Reconciliation",BankRecWClass,modNL);
    end;
    if (HasLocalization("AUS")==false) then begin
      RegisterWS("Brought Forward Balances","Brought Fwd Balances","New Fwd Balance",FBVc,modNL);
    end;
    RegisterWS("Accounts","Accounts","New Account",AccVc,modNL);
    if (HasNLBudget) then begin
      RegisterWS("Budgets","Budgets","New Budget",Bud1Vc,modNL);
      RegisterWS("Revised Budgets","Revised Budgets","New Revised Budget",Bud2Vc,modNL);
    end;
    
    if (HasLocalization("AGO,POL,PRT")) then begin
      Setting("Account Transfers",AccTransLClass,modNL);
    end;
    if (HasBankImport) then begin 
      Setting("#Bank Files#",BankFileTClass,modNL);    
    end;
    if (HasNLBudget) then begin
      Setting("Budget Keys",BFLClass,modNL);
    end;
    Setting("Fiscal Years",YearTClass,modNL);
    if (HasLocalization("NOR")) then begin
      Setting("Electronic #VAT# Declaration",EVATDeclTClass,modNL);
    end;
    if (HasIncomeAndExpenseBook) then begin
      Setting("Income & Expense Book",IncExpBookLClass,modNL);
    end;
    if (HasNumberSeries) then begin
      Setting("Number Series - Transactions",TRSerTClass,modNL);
    end;
    if (HasObjects) then begin
      Setting("Tags/Objects",ObjLClass,modNL);
      Setting("Tag/Object Type Control",OTCheckTClass,modNL);
      Setting("Tag/Object Types",OTLClass,modNL);
    end;
//    if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
//      Setting("Rate Gain/Loss",NLRateTClass,modNL);
//    end;
    if (HasLocalization("USA")) then begin
      Setting("Bank Transactions",BankTRLClass,modNL);
    end;
    if (HasAdvancedAccounting) then begin
      Setting("Presentation of Balances",AGrTClass,modNL);
      Setting("Report Settings",Rs2WClass,modNL);
    end;
    if (HasIntegratedNL) then begin
      Setting("Sub Systems",TRGenTClass,modNL);
    end;
    Setting("Sub-ledger Control Accounts",SLAccTClass,modNL);
    if (HasLocalization("POL")) then begin
      Setting("Tax Reporting Settings",TaxRepCUTClass,modNL);
    end;
    if (HasLocalization("HRV,LVA")) then begin
      Setting("Tax Reports",TaxRepLClass,modNL);
    end;
    if (HasLocalization("BRA,CAN,HRV,LVA,KEN,POL,USA")) then begin
      Setting("Tax Rules",TaxRulesLClass,modNL);
    end;
    if (HasLocalization("CAN,BRA,HRV,LVA,KEN,USA")) then begin
      Setting("Tax Templates",TaxTemplateLClass,modNL);
      if (HasTaxMatrix or HasAdvancedAccounting or HasLocalization("HRV")) then begin
        Setting("Transaction Settings",TrTClass,modNL);
      end;
    end;
    Setting("#VAT# Codes",VATCodeTClass,modNL);
    
    if (HasLocalization("NOR")) then begin
      Setting("#VAT# Declarations",VATDeclLClass,modNL);
    end;
    
    if (HasLocalization("HRV,LVA")) then begin
      Document("Tax Report",TaxDocRClass,TaxRepForm,TaxRepFClass,modNL);
    end;
    Document("Transactions",TRRClass,TRForm,TRFClass,modNL);

    if (HasAccountRecon) then begin
      Report("Account Reconciliation",ACReconRClass,ACRecRn,0,modNL);
    end;

    if (HasLocalization("AGO,BRA,LVA,POL,PRT")) then begin
      Report("Analytical Balance",MBARClass,MBARn,0,modNL);
    end;
    Report("Balance Sheet",BalRClass,BalRn,UserDefRepDClass,modNL);
    if (HasNLBudget) then begin
      Report("Budget Journal",BudgJRClass,BudgJRn,0,modNL);
    end;
    Report("Chart of Accounts",AccListRClass,AccListRn,0,modNL);
    Report("Correction List",CorrRClass,CorrRn,0,modNL);
    if (HasLocalization("LTU,LVA")) then begin
      Report("Corresponding Accounts",CorspRClass,CorspRn,0,modNL);
    end;
    if (HasMultiCurrency) then begin
      Report("Currency A/C Rate Change",NLRateRClass,NLRateRn,0,modNL);
    end;
    if (HasIncomeAndExpenseBook) then begin
      Report("Income & Expense Book",IncExpBookRClass,IncExpBookRn,0,modNL);
    end;
    if (HasLocalization("LTU") and HasIntegratedNL) then begin
      Report("iSAF",LitiSAFRClass,LitiSAFRn,0,modNL);
    end;
    if (HasMultiCurrency) then begin
      Report("Multicurrency Accounts Rate Difference",MultiCurAccRClass,MultiCurAccRn,0,modNL);
    end;
    Report("#N/L# Transfer, Subsystems",StdTransGenRClass,TransGenRn,0,modNL);
    Report("#Nominal Ledger#",MainRClass,MainRn,0,modNL);
    Report("Profit & Loss",ResRClass,ResRn,UserDefRepDClass,modNL);
    if (HasNLBudget) then begin
      Report("Revised Budget Journal",RevBudgJRClass,RevBudgJRn,0,modNL);
    end;
    if (HasLocalization("LVA")) then begin
      Report("Tax Calculations", Tax100Class,Tax100Rn,0,modNL);
      Report("Test Corresponding Rules",CorstRClass,CorstRn,0,modNL);
    end;
    Report("Transaction Journal",TransRClass,TransRn,0,modNL);
    Report("Trial Balance",SBRClass,TrialRn,0,modNL);
    if (HasLocalization("POL,PRT")==false) then begin
      Report("#VAT# Listing",ALLVATRClass,ALLVATRn,0,modNL);
    end;
    if (HasLocalization("POL")==false) then begin
      Report("#VAT# Report",VATRClass,VAT2Rn,UserDefRepDClass,modNL);
    end;

    if (HasLocalization("FRA")) then begin
      Export("FEC Export",FrenchFECEClass,FrenchFECEn,modNL);
    end;
    if (HasLocalization("LTU") and HasIntegratedNL) then begin
      Export("iSAF",LitTaxXmlEClass,LitTaxXmlEn,modNL);
    end;
    if (HasLocalization("SGP")) then begin
      Export("IRAS audit File",GenIRASEClass,IRASAuditEn,modNL);
    end;
    Export("Monthly Balances",MBEClass,MBEn,modNL);
    if (HasLocalization("SWE")) then begin
      Export("SIE (Swedish Export/Import)",SieEClass,SieEn,modNL);
    end;
    Export("Trial Balance",SBEClass,SBEn,modNL);
    if (HasLocalization("PRT")) then begin
      Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modNL);
    end;  
    if (HasLocalization("NOR")) then begin
      Export("SAFT",NorTaxXmlEClass,NorTaxXmlEn,modNL);
    end;
    if (HasLocalization("LTU") and HasIntegratedNL) then begin
    Export("SAFT",LitSAFTTaxXmlEClass,LitSAFTTaxXmlEn,modNL);
  end;
    if (HasLocalization("LVA")) then begin
      Export("#VAT# Annual (Latvia)",LatAnnualVATEClass,LatAnnualVATEn,modNL);
      Export("#VAT# Periodic (Latvia)",LatPeriodicVATEClass,LatPeriodicVATEn,modNL);
    end;
    if (HasLocalization("LTU")) then begin
      Export("#VAT# Periodic Declaration (Lithuania)",LTUVATEClass,LTUVATEn,modNL);
    end;
    if (HasLocalization("USA,CAN")) then begin
      Import("American Express Statement",AmexStatementIClass,AmexStatementIn,modNL);  
    end;  
    if (HasLocalization("USA")) then begin
      Import("Banking File",RefIPIn,RefIPIn,modNL);
    end;    
    if (HasLocalization("SWE")) then begin
      Import("SIE (Swedish Export/Import)",0,SieIn,modNL);
    end;
    
    if (HasNLBudget) then begin
      Maintenance("Revised Budget from Budget",Bud2FromBud1VClass,Bud2FromBud1Mn,modNL);
    end;
    if (HasLocalization("AGO,POL,PRT")) then begin
      Maintenance("Account Balance Transfer",AccTransVClass,AccTransMn,modNL);
    end;
  end;
  if (HasLocalization("POL")) then begin
    Export("Unified Export",PolUnifiedExportEClass,PolUnifiedExportEn,modNL);
  end;
        
/* modSY */

  if (HasModSL==false) then begin
    if (HasLocalization("RUS")) then begin
      RegisterWS("Sales Orders","Sales Orders","New Sales Order",ORVc,modSY);
    end else begin
      RegisterWS("Invoices","Invoices","New Invoice",IVVc,modSY);
    end;
    RegisterWS("Contacts","Contacts","New Contact",CUVc,modSY);
    RegisterWS("Items","Items","New Item",INVc,modSY);
  end;
  if (HasDeveloperMode or HasPersons) then begin
  end;
  if ((ClientMode and LicenseMode==kLicenseModeServer) or HasPersons or HasDeveloperMode) then begin
    RegisterWS("Persons","Persons","New Person",UserVc,modSY);
  end else begin
    RegisterWS("Persons","Persons","",UserVc,modSY);
  end;
  

  if (HasMultiCurrency or HasBase2) then begin
    RegisterWS("Currencies","Currencies","New Currency",CurncyCodeVc,modSY); 
  end;
  if (HasMultiCurrency) then begin
    RegisterWS("Exchange Rates","Exchange Rates","New Exchange Rate",ERVc,modSY);
  end;
  if (HasFormEditor) then begin
    if (GuiType!=kGuiiPhone) then begin
      RegisterWS("Forms","Forms","New Form",DocVc,modSY);
    end;
    RegisterWS("Styles","Styles","New Style",StyleVc,modSY);
  end;
  if (HasModSL==false) then begin
    if (HasModNL or HasIncomeAndExpenseBook) then begin
      RegisterWS("Accounts","Accounts","New Account",AccVc,modSY);
    end;
  end;

  if (HasDeveloperMode) then begin
    Setting("E-Learning URL Cache",UniversityURLCacheLClass,modSY);  
    Setting("E-Learning URL Cache (TX)",UniversityURLTXCacheLClass,modSY);
    Setting("Internet Services Server IP",EnabServerTClass,modSY);
    Setting("Services Cache",ServiceCacheLClass,modSY);
  end;

  if (HasAccessGroups) then begin
    Setting("Access Groups",AccessLClass,modSY);
  end;
  if (LicenseMode==kLicenseModeServer or ClientMode) then begin
    Setting("Active Users",ListUsersClass,modSY);
  end;
//  if (HasBase2 or (HasEInvoicing and HasLocalization("NOR,SWE"))) then begin
  if (HasBase2) then begin
    Setting("Base Currency",BaseCurTClass,modSY);
  end;
  if (HasBase2) then begin
    Setting("Base Currency Rates",BaseERLClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Brazilian Invoice Types",BrazilEInvTypeLClass,modSY);
  end;
  Setting("Companies",CompaniesTClass,modSY);
  if (HasStandardCRM or HasStandardCommunicator or HasStandardOrganizer) then begin
    Setting("Company Date and Numeric Format",SysFormatTClass,modSY);
  end;
  Setting("Company Info",CYWClass,modSY);
  if (HasContactClassification and HasModSL==false) then begin
    Setting("Contact Classifications",CClassLClass,modSY);
  end;
  if (HasMultiCurrency or HasBase2) and (HasIntegratedNL) then begin
    Setting("Conversions - Master",ConvMasterTClass,modSY);
    Setting("Conversions - Accounts and #VAT Code#",ConvAccTClass,modSY);
    Setting("Conversions - Contacts",ConvCustTClass,modSY);
    Setting("Conversions - Currency Codes",ConvCurncyCodeTClass,modSY);
    Setting("Conversions - Items",ConvItemTClass,modSY);
    Setting("Conversions - Users",ConvUserTClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Districts",DistrictLClass,modSY);
  end;
  if (IsUsingActivationCodes) then begin
    Setting("Internet Enablers",InternetEnablerTClass,modSY);
  end;
  if (HasModSL==false) then begin
    if (HasModNL or HasIncomeAndExpenseBook) then begin
      Setting("Account Usage",AccTClass,modSY);
    end else begin
      Setting("Invoice Settings",AccTClass,modSY);
    end;
  end;
  if (HasModSL==false and HasLocalization("PRT")) then begin
    Setting("Item Groups",ITLClass,modSY);
  end;
  if (HasLocalMachines or HasFiscalPrinter) then begin
    Setting("Local Machine",LocalMachineTClass,modSY);
  end;
  if (HasFiscalPrinter) then begin
    Setting("Local Machines",LocalMachineLClass,modSY);
    if (HasLocalization("SVN")==false) then begin
      Setting("Local Serial Port Devices",LSerialPortDeviceLClass,modSY);
      Setting("Local Machine Serial Port Devices",SerialPortDeviceLClass,modSY);
    end;
  end;
  if (HasKPIs) then begin
    Setting("KPIs",KPIDefLClass,modSY);
  end;
  if (HasLanguages) then begin
    Setting("Languages",LangTClass,modSY); 
  end;
  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Setting("Locking",DBLockTClass,modSY);
  end;
  if (HasFiscalPrinter and HasLocalization("SVN")) then begin
    Setting("Main Premise",CYAWClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Municipalities",MunicipalityLClass,modSY);
  end;
  if (HasLocalization("FIN")) then begin
    Setting("Optional Features",UXFTClass,modSY);
  end;
  if (HasObjects and (HasModNL==false and HasIncomeAndExpenseBook==false)) then begin
    Setting("Tags/Objects",ObjLClass,modSY);
    Setting("Tag/Object Types",OTLClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Operation Types",OperationTypeLClass,modSY);
  end;
  if (HasModSL==false) then begin
    Setting("Payment Terms",PDLClass,modSY);
  end;
  if (HasPriceLists) then begin
    Setting("Price Lists",PLDefLClass,modSY);
    Setting("Prices",PLLClass,modSY);
  end;

  Setting("Reporting Periods",PeriodTClass,modSY);
  Setting("Round Off",RoundTClass,modSY);
  Setting("Units",UnitLClass,modSY);
  //Setting("Values in Text",LangNrLClass,modSY);
  //Setting("Test Function Tags",WindowTagTestClass,modSY);
  if (HasLanguages) then begin
    Setting("Values in Text",LangNrLClass,modSY);
  end;
  if (HasModNL==false and HasIncomeAndExpenseBook==false) then begin
    Setting("#VAT# Codes",VATCodeTClass,modSY); 
  end;
  if ((HasNumberSeries or HasLocalization("LVA")) and (HasOfficialSerNr or HasInvoiceOfficialSerNr)) or (HasFiscalPrinter and HasLocalization("SVN")) then begin
    Setting("Legal Invoice Numbers",LegalInvNrTClass,modSY);
  end;  
  if (HasLocalization("PRT")) then begin
    Setting("Item Groups",ITLClass,modSY);
  end;
  if (HasLocalization("HRV,SRB")) then begin
    Setting("XML Schema Definitions",XMLExportLClass,modSY);
  end;
  
  Report("Company Info",CompInfoRClass,CompInfoRn,0,modSY);
  if (HasModSL==false) then begin
    Report("Contact List",CURClass,CustRn,0,modSY);
    if (HasMultiCurrency or HasBase2) then begin
      Report("Exchange Rates",ERDateRClass,ERDateRn,0,modSY);
    end;
    if (HasLocalization("RUS")) then begin
      Report("Order Journal",ORJRClass,OrdRn,0,modSY);
    end else begin
      Report("Invoice Journal",IVJRClass,InvoiceRn,0,modSY);
    end;
    Report("Item List",ArtRClass,ArtRn,0,modSY);
    if (HasLocalization("LTU")) then begin
      Report("#VAT# Report Sales",SLVATLitRClass,SLVATLitRn,0,modSY);  
    end;
  end else begin
    if (HasMultiCurrency or HasBase2) then begin
      Report("Exchange Rates",ERDateRClass,ERDateRn,0,modSY);
    end;
  end;

  if (HasRegistersExports) then begin
    Export("Base Registers",GBaseEClass,GBaseEn,modSY);
  end;
  if (GuiType!=kGuiiPhone) then begin
    Export("Database Text Backup",TBDatabaseEClass,DatabaseTBEn,modSY);
  end;
  if (HasRegistersExports) then begin
    Export("Item Base Registers",GItemBaseEClass,GItemBaseEn,modSY);
  end;
  if (HasLocalization("HRV")) then begin
    Export("Register Export",ExpRegEClass,ExpRegEn,modSY);
  end;  
  //Export("Remote Backup",TBRemoteEClass,RemoteTBEn,modSY);
  if (GuiType!=kGuiiPhone) then begin
    Export("Run Timed Backup",TBRunTimedEClass,RunTimedTBEn,modSY);
  end;
  if (HasRegistersExports) then begin
    Export("System Data",SysEClass,SysEn,modSY);
  end;
  if (HasModSL==false) then begin
    if (HasLocalization("PRT")) then begin
      Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modSY);
    end;    
    if (HasLocalization("NOR")) then begin
      Export("SAFT",NorTaxXmlEClass,NorTaxXmlEn,modSY);
    end;
    if (HasLocalization("LTU")) then begin
      Export("#S/L# #VAT# Invoices (Lithuania)",LitVATRegIVEClass,LitVATRegIVEn,modSY);
    end;
  end;
  if (HasRegistersExports) then begin
    Export("Transaction Registers",GTransEClass,GTransEn,modSY);
    Export("Transaction Registers (period)",GTrans2EClass,GTrans2En,modSY);  
  end;
  
  Import("Automatic",0,FullyAutIn,modSY);
  Import("Manual file search",0,AutIn,modSY);
  Import("Remote backup",RemoteInIClass,RemoteIn,modSY);

//  if (HasModIN or HasModSL or HasModPL or HasModPOS or HasModAT2 or HasModCL or HasModExp or HasModPO) and (HasModNL) then begin
  if (HasIntegratedNL) then begin
    Maintenance("Create #N/L# Transactions",TransGenVClass,GenTransMn,modSY);
  end;
  if (HasLocalization("HRV")) then begin
    Maintenance("Invoices without Official No.",XMLExportVClass,XMLExportMn,modSY);
  end;
  if (HasLocalization("POL")) then begin
    Maintenance("Fill-in Invoice No.",FillinIVNrVClass,FillinIVNrMn,modSY);
    Maintenance("Fill-in Receipt No.",FillinIPNrVClass,FillinIPNrMn,modSY);
  end;
//  Maintenance("Restore Application",ResetDBWClass,0,modSY);
  if (ClientMode) then begin
    Maintenance("System Message",SysMessVClass,SysMessMn,modSY); // Must have ONE, otherwise it crashes.... goes for all these types...
  end;
//  if (ClientMode) then begin 
//    Maintenance("Send Invitation for New User",SubscriptionInvitationVClass,SubscriptionInvitationMn,modSY);
//  end;
  if (ClientMode and HasServerInCloud) then begin  
    Maintenance("Upload Logo File",UploadLogoFileVClass,UploadLogoFileMn,modSY);  
  end;

/* modSO */
  
  RegisterWS("Orders","Orders","New Order",ORVc,modSO);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modSO);
  RegisterWS("Items","Items","New Item",INVc,modSO);
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT")) then begin
    RegisterWS("Item Groups","Item Groups","New Item Group",ITVc,modSO);
  end;
  if (HasPriceLists) then begin
    RegisterWS("Prices","Prices","New Price",PLVc,modSO);
  end;

  if (HasModIN) then begin
    Setting("Delivery Terms",ShipDealLClass,modSO);
  end;
  if (HasDownpayments) then begin
    Setting("Down Payments",DownPayTClass,modSO);
  end;
  if (HasLocalization("LVA,PRT")) then begin
    Setting("Freight Companies",FreightCompanyLClass,modSO);
  end;
  if (HasModSL==false) then begin
    Setting("Invoice Settings",AccTClass,modSO);
  end;
  if (HasNumberSeries) then begin
    Setting("Number Series - Orders",ORSerTClass,modSO);
  end;
  Setting("Payment Terms",PDLClass,modSO);
  Setting("Planned Delivery",PlanDeliveryTClass,modSO);
  if (HasPriceLists) then begin
    Setting("Price Lists",PLDefLClass,modSO);
  end;
  Setting("Units",UnitLClass,modSO);
  
  Document("Orders",ORRClass,OrdForm,OrdFClass,modSO);
  
  if (HasModIN) then begin
    Report("Deliverable List",ShipableRClass,ShipableRn,0,modSO);
    Report("Delivery List",DeliveryRClass,DeliveryRn,0,modSO);
  end;
  Report("GP, Orders",ORGPRClass,ORGPRn,0,modSO);
  Report("Item List",ArtRClass,ArtRn,0,modSO);
  Report("Order Journal",ORJRClass,OrdRn,0,modSO);
  Report("Ordered Items",OrdItemRClass,OrdItemRn,0,modSO);
  Report("Order Status",ORInfoRClass,ORInfoRn,0,modSO);
  if (HasModIN) then begin
    Report("Outstanding Orders",OrderStockRClass,OrderStockRn,0,modSO);
  end;
  
/* modIN */
  
  if (HasModSO or HasLocalization("RUS") or HasLocalization("HRV")) then begin
    RegisterWS("Deliveries","Deliveries","New Delivery",SHVc,modIN);
  end;
  RegisterWS("Goods Receipts","Goods Receipts","New Goods Receipt",PUVc,modIN);
  RegisterWS("#Stock Depreciations#","#Stock Depreciations#","New #Stock Depreciation#",SDVc,modIN);
  RegisterWS("#Stocktaking#","#Stocktaking#","New #Stocktaking#",StockTakeVc,modIN);
  RegisterWS("Items","Items","New Item",INVc,modIN);
  if (HasReturnedGoods) then begin
    RegisterWS("Returned Goods","Returned Goods","New Returned Goods",RetVc,modIN);
  end;
  if (HasRetGoodsToSupp) then begin
    RegisterWS("Returned Goods to #Suppliers#","Ret. Goods to #Suppliers#","New Ret. Goods to #Suppliers#",RetPUVc,modIN);
  end;
  if (HasMultiLocations) then begin 
    RegisterWS("Locations","Locations","New Location",LocationVc,modIN);
    RegisterWS("#Stock# Movements","#Stock# Movements","New #Stock# Movement",StockMovVc,modIN);
  end;
  
  Setting("Barcodes",BarcodeLClass,modIN);  
  if (HasLocalization("HRV")) then begin 
    Setting("Base Price Changes",BPCLClass,modIN);
  end;
  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Setting("Account Usage #Stock#",INAccTClass,modIN); 
  end;
  if (HasModCRM) then begin
    Setting("Contacts",CULClass,modIN);
  end;
  Setting("Cost Accounting",CostAccTClass,modIN);
  if (HasLocalization("PRT")) then begin 
    if (HasETaxDocuments) then begin
      Setting("Electronic Shipment",EShipPRTTClass,modIN);
    end;
  end;
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT")) then begin
    Setting("Item Groups",ITLClass,modIN);
  end;
  if (HasLocalization("PRT")) then begin 
    Setting("Items",INLClass,modIN);
  end;
  if (HasVarieties) then begin
    Setting("Item Varieties",VARLClass,modIN);
    Setting("Item Variety Groups",VARGLClass,modIN);
  end;
  if (HasNumberSeries) then begin
    if (HasModSO) then begin
      Setting("Number Series - Deliveries",SHSerTClass,modIN);
    end;
    if (HasNumberSeries) then begin 
      if (HasReturnedGoods) then begin
        Setting("Number Series - Returned Goods",RetSerTClass,modIN);
      end;
      if (HasRetGoodsToSupp) then begin
        Setting("Number Series - Returned Goods to #Supplier#",RetPUSerTClass,modIN);
      end;
    end;
    Setting("Number Series - Goods Receipts",PUSerTClass,modIN);
    Setting("Number Series - #Stock Depreciations#",SDSerTClass,modIN);
    if (HasNumberSeries) then begin 
      if (HasMultiLocations) then begin 
        Setting("Number Series - #Stock# Movements",StockMovSerTClass,modIN);
      end;
    end;
    Setting("Number Series - #Stocktaking#",StockTakeSerTClass,modIN);
  end;
  if (HasLocalization("PRT")) then begin 
    Setting("Optional features",OFTClass,modIN);
  end;
  if (HasMultiLocations) then begin 
    Setting("#Stock# Settings",MainStockTClass,modIN);
  end;
  if (HasVarieties) then begin
    Setting("Variety Masks",VARMaskTClass,modIN);
    Setting("Variety Sets",VARMasksLClass,modIN);
    Setting("Variety Settings",VarietyTClass,modIN);
    Setting("Variety Subsets",VARSubsetsLClass,modIN);
  end;

  if (HasModSO or HasLocalization("RUS")) then begin
    if (HasModSO) then begin 
      Document("Address Labels",AdrLabRClass,AdrLabForm,AdrLabFClass,modIN);
      Document("Delivery Notes",Sh1RClass,Sh1Form,Sh1FClass,modIN);
      Document("Freight Labels",SHLabRClass,SHLabForm,SHLabFClass,modIN);     
    end else begin
      if (HasLocalization("RUS")) then begin 
        Document("Delivery Notes",Sh1RClass,Sh1Form,Sh1FClass,modIN);
      end;
    end;
  end else begin
    if (HasLocalization("HRV")) then begin
      Document("Base Price Change",BasePriceChangeRClass,BPChangeForm,BasePriceChangeFClass,modIN);
      Document("Delivery Notes",Sh1RClass,Sh1Form,Sh1FClass,modIN);
    end;
  end;
  Document("Goods Receipt Labels",PULabRClass,PULabForm,PULabFClass,modIN);
  Document("Goods Receipts",PurchaseRClass,PurchaseForm,PurchaseFClass,modIN);
  Document("Item Labels",ItemLabelRClass,ItemLabelForm,ItemLabelFClass,modIN);
  if (HasModSO or HasLocalization("RUS")) then begin
    Document("Picking Lists",Sh2RClass,Sh2Form,Sh2FClass,modIN);
  end;
  if (HasReturnedGoods) then begin
    Document("Returned Goods",RetRClass,RetForm,RetFClass,modIN);
  end;
  if (HasRetGoodsToSupp) then begin
    Document("Returned Goods To #Supplier#",RetPURClass,RetPurchaseForm,RetPUFClass,modIN);
  end;
  Document("#Stock Depreciations#",SDRClass,SDForm,SDFClass,modIN);
  if (HasLocalization("HRV") or (HasModIN and HasMultiLocations)) then begin
    Document("#Stock# Movements",StockMovRClass,StockMovForm,StockMovFClass,modIN);
  end;
  if (HasConsStockMoveInvoices) then begin
    Document("#Stock# Movement Invoices",StockMovInvRClass,StockMovInvForm,StockMovInvFClass,modIN);
  end;

  if (HasModPO or HasModSO) then begin
    Report("Deficiency List",PurRClass,PurRn,0,modIN);
  end;
  if (HasModSO) then begin
    Report("Delivery Journal",SHJRClass,ShipRn,0,modIN);
    Report("Delivery List",SHListRClass,ShipListRn,0,modIN);
  end;
  Report("Goods Receipt Journal",PUJRClass,PUJRn,0,modIN);
  Report("Item History",INrsRClass,INrsRn,0,modIN);
  Report("Item List",ArtRClass,ArtRn,0,modIN);
  if (HasReturnedGoods) then begin
    Report("Returned Goods Journal",RetJRClass,RetGoodsJRn,0,modIN);
  end;
  if (HasRetGoodsToSupp) then begin
    Report("Returned Goods To #Supplier# Journal",RetPUJRClass,RetPUJRn,0,modIN);
  end;
  if (HasSerialNumbers) then begin
    Report("Serial Number History",SerialNrRClass,SerialNrRn,0,modIN);
  end;
  Report("#Stock Depreciation# Journal",SDJRClass,StockDepRn,0,modIN);
  Report("#Stock# In Journal",StockJInRClass,StockInRn,0,modIN);
  Report("#Stock# List",INRClass,InvValRn,0,modIN);
  Report("#Stock# Out Journal",StockJOutRClass,StockOutRn,0,modIN);
  Report("#Stocktaking# Comparison",STCompRClass,STCompRn,0,modIN);
  Report("#Stocktaking# List",StockTakeRClass,StockTakeRn,0,modIN);
  Report("#Supplier#/Item Statistics",VeInRClass,VeInRn,0,modIN);
  if (HasLocalization("LTU")) then begin
    Report("iVAZ",LitiVAZRClass,LitiVAZRn,0,modIN);
  end; 

  Maintenance("#Stocktaking# Comparison",STCompVClass,STCompMn,modIN);
  if (HasModProd) then begin
    Maintenance("Update Recipes",UpdRecepyVClass,UpdRecepyMn,modIN);
  end;
  if (HasMultiLocations) then begin 
    Maintenance("Setup Multi-location",ConvToMultiLocationVClass,ConvToMultiLocationMn,modIN);
  end;
  if (HasLocalization("PRT")) then begin
    Export("Inventory List for Tax Authorities",PRTInventoryEClass,PRTInventoryEn,modIN);
  end;
  if (HasLocalization("LTU")) then begin
    Export("iVAZ",LitiVAZEClass,LitiVAZEn,modIN);
  end;
/*
  if (HasLocalization("PRT")) then begin
    Export("SAFT Stock",PortStockXmlEClass,PortStockXmlEn,modIN);
  end;
*/
/*modPO*/

  RegisterWS("Purchase Orders","Purchase Orders","New Purchase Order",POVc,modPO);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modPO);
  RegisterWS("Items","Items","New Item",INVc,modPO);

  if (HasModIN) then begin
    Setting("Delivery Terms",ShipDealLClass,modPO);
  end;
  if (HasCategories) then begin
    Setting("#Supplier# Categories",VGLClass,modPO);
  end;
  if (HasNumberSeries) then begin
    Setting("Number Series - Purchase Orders",POSerTClass,modPO);
  end;

  if (HasModIN) then begin
    Report("Deficiency List",PurRClass,PurRn,0,modPO);
  end;
  Report("Outstanding Purchase Orders",POOrdStockRClass,POOrdStockRn,0,modPO);  
  Report("Purchase Order Journal",PurOrdJRClass,PurOrdJRn,0,modPO);

  Document("Purchase Orders",PORClass,POForm,POFClass,modPO); 

/* modQT */
  RegisterWS("Quotations","Quotations","New Quotation",QTVc,modQT);
  if (HasModCRM) then begin
    RegisterWS("Contacts","Contacts","New Contact",CUVc,modQT);
  end;
  RegisterWS("Items","Items","New Item",INVc,modQT);
  if (HasPriceLists) then begin
    RegisterWS("Prices","Prices","New Price",PLVc,modQT);
  end;
  //Register("Pre Quotations","Pre Quotations",PreQTVc,modQT); no funcionality for this one
  if (HasNumberSeries) then begin
    Setting("Number Series - Quotations",QTSerTClass,modQT);
  end;
  if (HasPriceLists) then begin
    Setting("Price Lists",PLDefLClass,modQT);
  end;
  Setting("Quotation Classes",QuoteClassTClass,modQT);
  if (HasAdvancedCRM) then begin
    Setting("Quotation Settings",QTSettTClass,modQT);
  end;

  Document("Quotations",QTRClass,QTForm,QTFClass,modQT);
  if (HasLocalization("PRT")) then begin
    Document("Proforma Invoice, Quotations",ProformaQTRClass,ProformaQTForm,ProformaQTFClass,modQT);
  end;
  
  if (HasLocalization("PRT")) then begin
    Report("Proforma Invoice Journal",ProformaIVJRClass,ProformaIVJRn,0,modQT);
  end;
  Report("Accepted Quotations Journal",QTHistoryRClass,QTHstRn,0,modQT);
  Report("Outstanding Quotations",QTStkRClass,QTStkRn,0,modQT);
  Report("Pipeline",QTPipelineRClass,QTPipelineRn,0,modQT);
  Report("Quotation Journal",QTJRClass,QTJRn,0,modQT);

/*modPOS*/

  if (HasLocalization("PRT")==false) then begin 
//in Portugal they using SL tocugh screen, POS Invoices not certified yet
    RegisterWS("POS Invoices","POS Invoices","New POS Invoice",NPTSIVCashLClass,modPOS);
  end;
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modPOS);
  RegisterWS("Items","Items","New Item",INVc,modPOS);
  RegisterWS("Cashier Counts","Cashier Counts","New Cashier Count",CashierBalVc,modPOS);
  
  Setting("Cash Events",CashLClass,modPOS);
  Setting("Default Payment Modes",DefCashTClass,modPOS);
  Setting("Drawers",DrawerLClass,modPOS); 
  if (HasLocalization("BRA,ZWE")) then begin
    Setting("Fiscal Printer #VAT# Codes",ZimFiscalPrinterVATCodeTClass,modPOS);
  end;
  Setting("Invoice Settings",AccTClass,modPOS);
  if (HasItemClassification) then begin
    Setting("Item Classifications",DILClass,modPOS);
  end;
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT")) then begin
    Setting("Item Groups",ITLClass,modPOS);
  end;
  if (HasLocalMachines or HasFiscalPrinter) then begin
    Setting("Local Machine",LocalMachineTClass,modPOS);
  end;
//  Setting("Local Machine Payment Modes",RestPMTClass,modPOS);
//  Setting("Local Serial Port Devices",LSerialPortDeviceLClass,modPOS);
  if (HasNumberSeries) then begin
    Setting("Number Series - POS Invoices",IVCashSerTClass,modPOS); 
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Setting("Payment Currencies",POSCurrenciesTClass,modPOS);
  end;
  Setting("Payment Modes",PMTClass,modPOS);
  Setting("POS Balances",POSBalanceLCLass,modPOS);
  Setting("POS Buttons",POSButtonsLClass,modPOS);
  Setting("POS Sessions",POSEventLCLass,modPOS);
  Setting("POS Settings",CashierDefTClass,modPOS);

  Report("Cash Up",CashupRClass,CashupRn,0,modPOS);
//  Report("Daily Balance",DayBalRClass,DayBalRn,0,modPOS); //not in 63
  if (HasModIN) then begin
    Report("GP, POS Invoices", PIVGPRClass,PIVGPRn,0,modPOS);
  end;
  Report("Item List",ArtRClass,ArtRn,0,modPOS);
  Report("Item Statistics",ArtSTRClass,ArtSTRn,0,modPOS);
  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Report("#N/L# Transfer, Cash Invoices", TransGenPOSRClass,TransGenPOSRn,0,modPOS);
  end;
  Report("POS Invoice Journal",IVCJRClass,InvCashRn,0,modPOS);
  if (HasVarieties) then begin
    Report("Variety Enquiry",VarEnqRClass,VarEnqRn,0,modPOS);
  end;

  Document("POS Invoices",IVCashRClass,InvCashForm,IVCashFClass,modPOS);

  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Maintenance("Cash Up",CashupVClass,CashupMn,modPOS);
  end;
  if (HasModIN) then begin
    Maintenance("Update #Stock#",POSUpdStockVClass,POSUpdStockMn,modPOS);
  end;

/* modRest */
  RegisterWS("Tabs","Tabs","New Tab",RestAccVc,modRest);
  RegisterWS("Items","Items","New Item",INVc,modRest);
  Register("Table Layout","Table Layout",TableLayoutClass,modRest);

  Setting("Daily Statistics",SalesTimeTClass,modRest); 
  Setting("Default Payment Modes",DefCashTClass,modRest);
  Setting("Invoice Settings",AccTClass,modRest);
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT")) then begin
    Setting("Item Groups",ITLClass,modRest);
  end;
  Setting("Payment Modes",PMTClass,modRest); 
  Setting("POS Buttons",POSButtonsLClass,modRest);
  Setting("Tables",NeighbourHoodLClass,modRest);
  Setting("Units",UnitLClass,modRest);

  Document("Bar Tab",RestAccRClass,RestAccForm,RestAccFClass,modRest);
  Document("Bar Tab Receipt",RestAccReceiptRClass,RestAccReceiptForm,RestAccReceiptFClass,modRest);
  Document("Cancel Order",RestAccRClass,RestAccCancelForm,RestAccCancelFClass,modRest);
  Document("Cash Events",CashRClass,CashForm,CashFClass,modRest);
  Document("Fire Order",RestAccRClass,RestAccFireOrderForm,RestAccFireOrderFClass,modRest);
  Document("Guest Bill ",RestAccGuestBillRClass,RestAccGuestBillForm,RestAccGuestBillFClass,modRest);

  Export("#Restaurant# Daily Statistics",SalesTimeEClass,SalesTimeEn,modRest);  

  Report("Item List",ArtRClass,ArtRn,0,modRest);
  Report("#Restaurant# Daily Statistics",DetSalesTimeRClass,DetSalesTimeRn,0,modRest);  
//  Report("Cash Up",CashupRClass,CashupRn,0,modRest);
  Report("#Restaurant# Daily Statistics",DetSalesTimeRClass,DetSalesTimeRn,0,modRest);  
  Report("#Restaurant# Item Statistics",BarItemStatRClass,BarItemStatRn,0,modRest);
  Report("Tabs Journal",RestAccJRClass,RestAccJRn,0,modRest);
  Report("Void Report",VoidedRowsRClass,VoidedRowsRn,0,modRest);
  
/* modCRM */

  if (HasStandardCRM) then begin  
    RegisterWS("Quotations","Quotations","New Quotation",QTVc,modCRM);
  end;
  RegisterWS("Activities","Activities","New Activity",ActVc,modCRM);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modCRM);
  if (HasStandardCRM) then begin  
    RegisterWS("Items","Items","New Item",INVc,modCRM);
  end;
  if (HasCustomerLetter) then begin  
    RegisterWS("Customer Letters","Customer Letters","New Customer Letter",LetVc,modCRM);
  end;


  Report("Activities, Contacts",ActCURClass,ActCURn,0,modCRM);
  Report("Activities, Persons",ActPersRClass,ActPersRn,0,modCRM);
  Report("Birthday List",BirthDayRClass,BirthDayRn,0,modCRM);
  if (HasSkypeConnection) then begin
    Report("Call History",CallHistRClass,CallHistRn,0,modCRM);
  end;
  Report("Contact List",CURClass,CustRn,0,modCRM);
  if (HasStandardOrganizer==false) then begin
    Report("Customer Status",CustPSRClass,CustPSRn,0,modCRM);
  end;
  Report("List Invalid Phone Numbers",InvPhoneNoRClass,InvPhoneNoRn,0,modCRM);
  Report("Person List",UserRClass,UserRn,0,modCRM);
  Report("Personal Calendar",ActCalRClass,ActCalRn,0,modCRM);

  Report("Search for Contact Person",SearchContactRClass,SearchContactRn,0,modCRM);

  Document("Activities",ActDocRClass,ActDocForm,ActDocFClass,modCRM);
  Document("Contact Labels",CoLabRClass,CoLabForm,CoLabFClass,modCRM);

  Setting("Activity Classes",ActTypeGrLClass,modCRM);
  Setting("Activity Types",ActTypeLClass,modCRM);
  Setting("Customer Relations",ContactRelLClass,modCRM);
  if (HasStandardCRM or HasStandardCommunicator) then begin  
    Setting("Info in Customer Status Report",CustPSLClass,modCRM);
  end;
  if (HasStandardCRM) then begin  
    Setting("Payment Terms",PDLClass,modCRM);
  end;
  Setting("Text Types",TextTypeLClass,modCRM);
//  if (HasLocalization("PRT") or HasLocalization("BRA")) then begin
//    Setting("User Defined Fields - Contacts",CUUserLabelTClass,modCRM);
//  end;
  Maintenance("Rebuild Number Recognition Register",NormPhoneNumVClass,NormPhoneNumMn,modCRM);

/* modCL */

  RegisterWS("Cash In","Cash In","New Cash In",CLInVc,modCL);
  RegisterWS("Cash Out","Cash Out","New Cash Out",CLOutVc,modCL);
  if (HasModSL and HasLocalization("POL")==false) then begin
    RegisterWS("Receipts","Receipts","New Receipt",IPVc,modCL);
  end;
  if (HasModPL and HasLocalization("POL")==false) then begin
    RegisterWS("Payments","Payments","New Payment",OPVc,modCL);
  end;
  if (HasModExp) then begin
    RegisterWS("Personnel Payments","Personnel Payments","New Personnel Payment",PPVc,modCL);
  end;
  
  Setting("Cash Book Settings",MainCLTClass,modCL);
  Setting("Expense Accounts",CLCorspLClass,modCL);
  if (HasNumberSeries) then begin
    Setting("Number Series - Cash In",CLInSerTClass,modCL);
    Setting("Number Series - Cash Out",CLOutSerTClass,modCL);
  end;
  Setting("Payment Modes",PMTClass,modCL);
  
  Report("Cash Book",CLIORClass,CashBRn,0,modCL);
  if (HasLocalization("LTU")) then begin
    Report("Cash Book (Lithuania)",CashBookLitRClass,CashBookLitRn,0,modCL);
  end;
  Report("Cash In Journal",CLInJRClass,CLInJRn,0,modCL);  
  Report("Cash Out Journal",CLOutJRClass,CLOutJRn,0,modCL);  
  if (HasModNL or HasLocalization("POL")) then begin
    Report("#N/L# Cash Book",CashBookLatRClass,CashBookLatRn,0,modCL);
  end;

  Document("Cash In",CLInRClass,CLInForm,CLInFClass,modCL);
  Document("Cash Out",CLOutRClass,CLOutForm,CLOutFClass,modCL);

  Maintenance("OK Cash Ins and Cash Outs",OKCLVClass,OKCLMn,modCL);

/* modEmail */

  Register("Email Queue","Email Queue",EMailQueVc,modEmail);
  RegisterWS("Mailboxes","Mailboxes","New Mailbox",ConferenceWClass,modEmail);

  Setting("Email SMTP Server",EmailTClass,modEmail);

  if (HasModSVO) then begin
    RegisterWS("Service Orders","Service Orders","New Service Order",SVOVc,modSVO);
    RegisterWS("Work Sheets","Work Sheets","New Work Sheet",WSVc,modSVO);
  
    if (HasNumberSeries) then begin
      Setting("Number Series - Service Orders",SVOSerTClass,modSVO);
      Setting("Number Series - Work Sheets",WSSerTClass,modSVO);
    end;
    Setting("Standard Problems",StandProblemLClass,modSVO);
  
    Document("Service Orders",SVORClass,SVOForm,SVOFClass,modSVO);
    Document("Work Sheets",WSRClass,WSForm,WSFClass,modSVO);
  
    Report("Outstanding Service Orders",SVOStockRClass,SVOStockRn,0,modSVO);
    Report("Service Order Journal",SVOListRClass,SVOListRn,0,modSVO);
    Report("Service Order Status",SVOStaRClass,SVOStaRn,0,modSVO);
    Report("Work Sheet Journal",WSListRClass,WSListRn,0,modSVO);
  end;
  
/* modProd */

  if (HasModProd) then begin
    RegisterWS("Productions","Productions","New Production",ProdVc,modProd);
    RegisterWS("Recipes","Recipes","New Recipe",RecVc,modProd);
    RegisterWS("Items","Items","New Item",INVc,modProd);

    if (HasNumberSeries) then begin
      Setting("Number Series - Productions",ProdSerTClass,modProd);
    end;

    Report("Production Journal",ProdRClass,ProdRn,0,modProd);
    Report("Recipe List (Made of)",Rec2RClass,Rec2Rn,0,modProd);
    Report("Recipe List (Part of)",RecRClass,RecRn,0,modProd);

    Document("Productions",ProdOrderRClass,ProdOrderForm,ProdOrderFClass,modProd);
    Document("Recipe",RecDocRClass,RecForm,RecFClass,modProd);

    Maintenance("Create Planned Records from Ordered Items",PlanRecordsVClass,PlanRecordsMn,modProd);
    Maintenance("Update Recipes",UpdRecepyVClass,UpdRecepyMn,modProd);
  end;
  
/* modExp */

  RegisterWS("Expenses","Expenses","New Expense",ExpVc,modExp);
  RegisterWS("Personnel Payments","Personnel Payments","New Personnel Payment",PPVc,modExp);

  Setting("Account Usage Expenses",ExpAccTClass,modExp);
  Setting("Accounts",AccLClass,modExp); 
  if (HasNumberSeries) then begin
    Setting("Number Series - Expenses",ExpSerTClass,modExp);
    Setting("Number Series - Personnel Payments",PPersSerTClass,modExp);
  end;
  Setting("Payment Modes",PMTClass,modExp); 
  Setting("#VAT# Codes",VATCodeTClass,modExp); 

  Document("Expenses",ExpRClass,ExpForm,ExpFClass,modExp);
  Document("Personnel Payment Receipts",PPRClass,PersPayForm,PPDFClass,modExp);

  Report("Expenses Journal",ExpJRClass,ExpRn,0,modExp);
  if (HasModNL) then begin
    Report("Periodic Personnel Statement",PersPerRClass,PersPerRn,0,modExp);
  end;
  Report("Personnel Payment Journal",PPJRClass,PPRn,0,modExp);  
  
/* modTS */
  
  RegisterWS("Time & Materials","Time & Materials","New Time & Material",TSVc,modTS);
  RegisterWS("Projects","Projects","New Project",PRVc,modTS);
  RegisterWS("Project Transactions","Project Transactions","New Project Transaction",TBIVVc,modTS);
  RegisterWS("Project Budgets","Project Budgets","New Project Budget",TBBUVc,modTS);
  if (HasModQT) then begin
    RegisterWS("Quotations","Quotations","New Quotation",QTVc,modTS);
  end;
  RegisterWS("Items","Items","New Item",INVc,modTS);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modTS);

  if (HasNumberSeries) then begin
    Setting("Number Series - Projects",PRSerTClass,modTS);
    if (HasModQT) then begin
      Setting("Number Series - Quotations",QTSerTClass,modTS);
    end;
    Setting("Number Series - Time & Materials",TSSerTClass,modTS);
  end;
  Setting("Project Classes",PRClassTClass,modTS);
  Setting("Project Settings",PRITClass,modTS);
  if (HasModQT) then begin
    Setting("Quotation Classes",QuoteClassTClass,modTS);  
  end;

  Report("Budget Follow-up",BudFollPRClass,BudPFoll2Rn,0,modTS);
  Report("Project Invoicing",ProInvRClass,ProInvRn,0,modTS);
  Report("Project List",ProListRClass,PRListRn,0,modTS);
  Report("Project Price List",ProjPLRClass,ProjPLRn,0,modTS);
  Report("Project Status",ProStatRClass,ProStatRn,0,modTS);
  Report("Project Transactions",PrTransRClass,PrTranRn,0,modTS);
  if (HasModQT) then begin
    Report("Quotation Journal",QTJRClass,QTJRn,0,modTS);
  end;
  Report("Time & Materials Journal",TSJRClass,TSJRn,0,modTS);
  
  Document("Project Budgets",TBBudgetRClass,TBBudgetForm,TBBudgetFClass,modTS);
  Document("Project Info",ProjectInfoRClass,ProjectInfoForm,ProjectInfoFClass,modTS);
  Document("Project Transactions",ProjectTransRClass,ProjectTransForm,ProjectTransFClass,modTS);
  Document("Projects",ProjectRClass,ProjectForm,ProjectFClass,modTS);
  if (HasModQT) then begin
    Document("Quotations",QTRClass,QTForm,QTFClass,modTS);
  end;
  Document("Time & Materials",TimeSheetRClass,TimeSheetForm,TimeSheetFClass,modTS);
  
  Maintenance("Create Project Invoices",ProInvVClass,ProInvMn,modTS);
  

/* modAT2 */

  RegisterWS("Assets","Assets","New Asset",AT2UnitVc,modAT2);
  if (HasModNL) then begin
    RegisterWS("Asset Categories","Asset Categories","New Asset Category",AT2Vc,modAT2);
  end;
  RegisterWS("Asset Disposals","Asset Disposals","New Asset Disposal",AT2WrofVc,modAT2);
  if (HasLocalization("LVA")) then begin
    Register("Asset Transactions","Asset Transactions",AT2TransVc,modAT2);  
  end;
  RegisterWS("Depreciation Models","Depreciation Models","New Depreciation Model",DprModVc,modAT2);

  if (HasModNL) then begin
    Setting("Account Usage Assets",AT2AccTClass,modAT2);
    Setting("Assets #N/L# Classes",AC2TClass,modAT2);
  end;
  Setting("Contacts",CULClass,modAT2);
  if (HasDepartments) then begin
    Setting("Departments",DepLClass,modAT2);
  end;
  Setting("Inflation Coefficients",ATCoeffLClass,modAT2);
  if (HasNumberSeries) then begin
    Setting("Number Series - Asset Disposals",AT2WrofSerTClass,modAT2);
    Setting("Number Series - Asset Revaluations",AT2DprSerTClass,modAT2);
    Setting("Number Series - Asset Status",AT2TakeSerTClass,modAT2);
    Setting("Number Series - Revaluation Factors",AT2RevSerTClass,modAT2);
  end;
  
  if (HasModNL) then begin
    Report("Accumulated Category Depreciation",AT2CatAcumRClass,AT2CatAcumRn,0,modAT2);
  end;
  Report("Asset at Point in Time",AssetAtTimeRClass,AssetAtTimeRn,0,modAT2);
  Report("Asset History",AT2HistRClass,AT2HistRn,0,modAT2);
  Report("Asset List",AT2ListRClass,AT2ListRn,0,modAT2);
  Report("Asset Status",AT2HistPortRClass,AT2HistPortRn,0,modAT2);
  if (HasDepartments) then begin
    Report("Department Summary",AT2DepRClass,AT2DepSumRn,0,modAT2);
  end;
  Report("Depreciation Plan",AT2DeprPlanRClass,AT2DeprPlanRn,0,modAT2);
  Report("Depreciations Report",AT2DeprRClass,AT2DeprRn,0,modAT2);
  Report("Disposals Journal",AT2WriteJRClass,AT2WriteJRn,0,modAT2);
  Report("Responsible Person List",AT2RespPersRClass,AT2RespPersRn,0,modAT2);
  Report("Responsible Person Summary",AT2CatRespRClass,AT2CatRespRn,0,modAT2);
  if (HasSimulations) then begin
    Report("Sim. Preview - Depreciations",AT2GenSMRClass,AT2GenSMRn,0,modAT2);
  end;
  if (HasModIN) then begin
    Report("#Stocktaking# List, Assets",AT2StockTakeRClass,AT2StockTakeRn,0,modAT2);
  end;
  Report("Subsidy Assets",AT2SubRClass,AT2SubRn,0,modAT2);
  Report("Tax Depreciation",TaxDeprRClass,TaxDeprRn,0,modAT2);
  if (HasModNL) then begin
    Report("Trans. Preview - Depreciations",AT2GenTRRClass,AT2GenTRRn,0,modAT2);
  end;
  
  Document("Asset Disposals",AT2WrofRClass,AT2WrofForm,AT2WrofFClass,modAT2);
  Document("Asset Forms",AT2InRClass,AT2InForm,AT2InFClass,modAT2);
  Document("Asset put in use",AT2RClass,AT2Form,AT2FClass,modAT2);
  Document("Asset Status",AT2TakeRClass,AT2TakeForm,AT2TakeFClass,modAT2);  
  Document("Revaluations Factors",AT2RevRClass,AT2RevForm,AT2RevFClass,modAT2);
  
  if (HasSimulations) then begin //
    Maintenance("Create Depreciation Simulations",AT2GenSMVClass,AT2GenSMMn,modAT2);
  end;
  if (HasModNL) then begin
    Maintenance("Create Depreciation Transactions",AT2GenTRVClass,AT2GenTRMn,modAT2);
    Maintenance("Create Put in use Transactions",AT2PutinVClass,AT2PutinMn,modAT2);
  end;
  Maintenance("Revalue Asset Acquisition Value",AT2ReevalVClass,AT2ReevalMn,modAT2);

 
  if (HasPayroll) then begin
    Setting("Post Groups",EPPostGroupLClass,modSAL);      
    Setting("Allowances/Deductions",EPPrivLClass,modSAL);
    Setting("Allowance/Deduction types",EPPrivTypeWClass,modSAL);
    Setting("Employee Groups",EPEmpGroupLClass,modSAL);
    Setting("Employee Classes",EPEmpClassLClass,modSAL);
    Setting("Document types",EPDocTypeWClass,modSAL);
  //  Setting("FiziskÇs personas",EPPersonEmpLClass,modSAL);
  
    Setting("Education",EPEducLClass,modSAL);
    Setting("Education Levels",EPEducLevelWClass,modSAL);
    Setting("Education Types",EPEducTypeWClass,modSAL);
    Setting("Absence Periods",EPOffTrTypeLClass,modSAL);
    Setting("Absence Types",EPOffWorkGroupLClass,modSAL);
    Setting("Time Classes",TimeClassLClass,modSAL);
    Setting("Order Fields",EPOrderFieldsTClass,modSAL);
    Setting("Tax Groups",EPTaxGroupLClass,modSAL);
    if (HasNumberSeries) then begin
      Setting("Number Series - Absences",EPOffWorkSerTClass,modSAL);
      Setting("Number Series - Orders",EPOrderDocSerTClass,modSAL);
    end;
    Setting("Sample",EPStrSampleWClass,modSAL);
    Setting("Order Types",EPOrderTypeWClass,modSAL);
    Setting("Periodic Action Groups",EPActionGroupLClass,modSAL);
    Setting("Tenderer Applications",EPPostEntryLClass,modSAL);
    Setting("Post Classification",EPOffPostCodeLClass,modSAL);
    Setting("Relatives",EPRelLClass,modSAL);
    Setting("Relative Types",EPRelTypeWClass,modSAL);
    Setting("Regions",EPRegionLClass,modSAL);
    Setting("Standard Texts",LTxtLClass,modSAL);
  //  Setting("Tarifu tipi",EPTariffTypeWClass,modSAL);
    Setting("Text Line Types",EPStrTypeLClass,modSAL);
    Setting("Text Line Type Groups",EPStrGroupTypeWClass,modSAL);
    Setting("Text Types",TextTypeLClass,modSAL);
    Setting("Languages",EPLangLClass,modSAL);
    Setting("Language Levels",EPLangLevelWClass,modSAL);
    Setting("Post Competitions",EPPostCompLClass,modSAL);
   
    RegisterWS("Department","Department","New Department",EPDepartmentVc,modSAL);
    RegisterWS("Employees","Employees","New Employee",EPEmpEmpLClass,modSAL);
    RegisterWS("Orders","Orders","New Order",EPOrderDocVc,modSAL);
    RegisterWS("Posts","Posts","New Post",EPPostVc,modSAL);
    RegisterWS("Absences","Absences","New Absence",EPOffWorkVc,modSAL);
    RegisterWS("Periodic Actions","Periodic Actions","New Periodic Action",EPDatedActionsVc,modSAL);
  //  Register("Darbinieki un Fiz.Pers.","Darbinieki un Fiz.Pers.",EPEmpVc,modSAL);
    
  //  Report("Br¥vdienas",EPHolidayRCLass,EPHolidayRn,0,modSAL);   
    Report("Post Competitions",EPPostCompAppRClass,EPPostCompAppRn,0,modSAL);
    Report("Allowances/Deductions",EPEmpPrivRCLass,EPEmpPrivRn,0,modSAL);
    Report("Free Posts",EPFreePostsRCLass,EPFreePostsRn,0,modSAL);  
    Report("Employee Seniority",EPSeniorityRClass,EPSeniorityRn,0,modSAL);
    Report("Employee Education",EPEmpEduRClass,EPEmpEducationRn,0,modSAL);
    Report("Employee Absences",EPEmpOffWRClass,EPEmpOffWRn,0,modSAL);
  //  Report("Laika uzskaites tabeles",EPEmpTimeStatRClass,EPEmpTimeStatRn,0,modSAL);
    Report("Employee Relatives",EPEmpRelRClass,EPEmpRelRn,0,modSAL);
    Report("Employees",EPEmpRCLass,EPEmpRn,0,modSAL);  
    Report("Employee Languages",EPEmpLangRCLass,EPEmpLangRn,0,modSAL); 
    Report("Department Structure",EPDepStrRCLass,EPDepStrRn,0,modSAL); 
    Report("Absence Calculation",EPOffWorkCalcRClass,EPOffWorkCalcRn,0,modSAL); 
    Report("Statistics - Post/Salary",EPPostStatRClass,EPPostStatRn,0,modSAL);
    Report("Statistics - Post/Age",EPAgePostStatRClass,EPAgePostStatRn,0,modSAL);
    Report("Orders",EPEmpOrdersRCLass,EPEmpOrdersRn,0,modSAL);
    Report("Periodic Actions",EPDatedActionsRClass,EPDatedActionsRn,0,modSAL);
    Report("Tenderer Applications",EPPostEntryRClass,EPPostEntryRn,0,modSAL);
    Report("Accrued Vacation Analysis",EPEmpAccVacRClass,EPEmpAccVacRn,0,modSAL);
  
    Document("Employees",EPEmpDocRClass,EPEmpForm,EPEmpFClass,modSAL);  //-----
    Document("Time Sheets",EPEmpTimeStatRClass,EPEmpTimeStatForm,EPEmpTimeStatFClass,modSAL);
    Document("Orders",EPOrderDocRClass,EPOrderDocForm,EPOrderDocFClass,modSAL);
    Document("Employee Information",EPEmpInfoRClass,EPEmpInfoDocForm,EPEmpInfoDocFClass,modSAL);  //-----
    
    Export("EDS - Employee Information",EDSEPEmpInfoEClass,EDSEPEmpInfoEn,modSAL);
    //Export("Iestat¥jumu eksports",EPSettingsECLass,EPSettingsEn,modSAL); // Parvietots uz Integracijas moduli
    Export("Employee Information",EPEmpInfoEClass,EPEmpInfoEn,modSAL); 
  
   
    Maintenance("Transfer Persons to Employees Register",CopyUserToEmpVClass,CopyUserToEmpMn,modSAL);  
  
    
  //=========== Payroll =============================== 
    RegisterWS("Employee Contracts","Employee Contracts","New Employee Contract",EPEmpContractLClass,modPY);
    RegisterWS("Employees","Employees","New Employee",EPEmpLClass,modPY);
    RegisterWS("Salary Payments","Salary Payments","New Salary Payment",EPPVc,modPY);
    RegisterWS("Time Sheets","Time Sheets","New Time Sheet",EPTS2LClass,modPY);
    RegisterWS("Calculation","Calculation","New Calculation",EPCalcResVc,modPY);
    RegisterWS("Bonuses","Bonuses","New Bonus",EPBonussVc,modPY);
    RegisterWS("Absences","Absences","New Absence",EPOffWorkVc,modPY);
    Register("Salary Input","Salary Input",EPEntryDClass,modPY);
   
    Setting("Payroll Parameters",EPPayrollSetWClass,modPY);  
    Setting("Payroll Input Window Parameters",EPEntrySetTClass,modPY);
    Setting("Days In Calculations",EPCalcDaysLClass,modPY);
    Setting("EDS Export Parameters",EPExpSetLClass,modPY);
    Setting("Physical Persons",EPPersonEmpLClass,modPY);
    Setting("Physical Person Contracts",EPPersonContractLClass,modPY);
    Setting("Income Types",EPIncTypeLClass,modPY);
    Setting("Constants",EPConstWClass,modPY);
  
    Setting("Time Sheet (old register)",EPTSLClass,modPY);
    Setting("Time Sheet Codes",EPTSCodeLClass,modPY);
    Setting("EDS Export Fields",EPExpFieldsTClass,modPY);
  
    Setting("Wages",EPTaxesLClass,modPY);
    Setting("Contract Changes",EPContrChangeLClass,modPY);
    Setting("Contract Sample",EPContrTemplateTClass,modPY);
    Setting("Tax Reports (formulas)",TaxRepPYLClass,modPY);
    if (HasNumberSeries) then begin
      Setting("Number Series - Salary Payments",EPPSerTClass,modPY);
      Setting("Number Series - Calculations",EPCalcResTClass,modPY);
      Setting("Number Series - Calculation Corrections",EPCalcCorTClass,modPY);
  //  Setting("Numuru sïrijas - laika tabulas",EPTSSerTClass,modPY);
      Setting("Number Series - Time Sheets",EPTS2SerTClass,modPY);
      Setting("Number Series - Bonuses/Deductions",EPBonussSerTClass,modPY);
    end;  
    Setting("Operation Types",EPTrTypeLClass,modPY);
    Setting("Operation Type Groups",EPTrTypeGroupLClass,modPY);
    Setting("Operation Type Chart of Accounts",EPAccWClass,modPY);
    Setting("FWD Balance",EPInitAmountsLClass,modPY);
    Setting("Changed Work Days",EPWorkDayChLClass,modPY);
    Setting("Country Holidays",BHollLClass,modPY);
    Setting("All Contracts",EPContractLClass,modPY);
    
    Report("Salary Payments",EPPayJrnRCLass,EPPayJrnRn,0,modPY);  
    Report("Salary Calculations",EPCalcTaxRClass,EPCalcTaxRn,0,modPY);
    Report("Aprï˙inu vad¥ba",EPCalcResManRClass,EPCalcResManRn,0,modPY);
    
    Report("Employee Contracts",EPEmpContractsRClass,EPEmpContractsRn,0,modPY);
    Report("Payment Journal",EPPaymentJRCLass,EPPaymentJRn,0,modPY); 
    Report("Taxes per Region",EPRegionTaxesRclass,EPRegionTaxesRn,0,modPY); 
  //  Report("PÇrskats par personÇm",EPPPSRClass,EPPPSRn,0,modPY);
    Report("Bonus/Deduction Statistics",EPBonussRClass,EPBonussRn,0,modPY);
    Report("Amount Distribution per Payment Types",EPTrTypeStatRclass,EPTrTypeStatRn,0,modPY);
    Report("Accrued Vacation Analysis",EPEmpAccVacRClass,EPEmpAccVacRn,0,modPY);
   // Report("Zi¿as par darbiniekiem",EPEmpInfoRClass,EPEmpInfoRn,0,modPY);
  
    Maintenance("Fill Income Type Field in Calculations",EPCalcFillIncTypeVClass,EPCalcFillIncTypeMn,modPY);
    Maintenance("Calculate Salary",EPCalcPayVClass,EPCalcPayMn,modPY);
    Maintenance("Calculate Accrued Vacation",UpdateVacationVClass,UpdateVacationMn,modPY);  
    Maintenance("Update Contracts",EPUpdateContractsVClass,EPUpdateContractsMn,modPY);
    Maintenance("Delete Calculations",EPDelCalcResVClass,EPDelCalcResMn,modPY);
    Maintenance("Change Scale Form",EPScaleFormVClass,EPScaleFormMn,modPY);
    Maintenance("Create Payouts",EPCalcPay2VClass,EPCalcPay2Mn,modPY);
    Maintenance("Create Bonuses/Payouts",EPMakePayVClass,EPMakePayMn,modPY);
    Maintenance("Create Transactions",EPCreateTRVClass,EPCreateTRMn,modPY);
    Maintenance("Recalculate Average Salary Field",EPRecalcAVSalFieldVClass,EPRecalcAVSalFieldMn,modPY);
  //  Maintenance("Main¥t aprï˙inu statusu",EPCreateTRVClass,SetCalcStatMn,modPY);
    
    Document("Salary Sheets",EPCalcListFormRClass,EPCalcListForm,EPCalcListFClass,modPY);
    Document("Salary Payments",EPPRClass,EPPForm,EPPFClass,modPY);
    Document("Salary Calculation and Payout list",EPPStatDocRClass,EPEmpStatDocForm,EPEmpStatDocFClass,modPY); //---------pedejais done
    Document("Calculations",EPCalcResFormRClass,EPCalcResForm,EPCalcResFClass,modPY);
    Document("Cash exp. - Salary payments",CLOut4RClass,CLOut4Form,CLOut4FClass,modPY);
    Document("Reg. No. 166, 1. attachment",EPEmpIncDocRClass,EPEmpIncDocForm,EPEmpIncDocFClass,modPY);//------
    Document("Reg. No. 166, 2. attachment",EPEmployerIncDocRClass,EPEmployerIncDocForm,EPEmployerIncDocFClass,modPY);//------
    Document("Reg. No. 166, 6. attachment",EPInc2DocRClass,EPEmpInc2DocForm,EPEmpInc2DocFClass,modPY);//----------
    Document("Reg. No. 942, 3. attachment",EPEmpSocIncDocRClass,EPEmpSocIncDocForm,EPEmpSocIncDocFClass,modPY);//-----
    Document("Reg. No. 677, 1. attachment",EPInc677DocRClass,EPEmpInc677DocForm,EPEmpInc677DocFClass,modPY);//----------
  //  Document("VSAOI (mïn.)",EPEmployeeSocMonthDocRClass,EPEmployeeSocMonthDocForm,EPEmpInfoDocFClass,modPY);
  //  Document("PÇrskats par iedz. ienÇkuma nod. summÇm",EPEmployeeIncStatDocRClass,EPEmployeeIncStatDocForm,EPEmployeeIncStatDocFClass,modPY);
    Document("Personal Account",EPEmpAccDocRClass,EPEmpAccDocForm,EPEmpAccDocFClass,modPY); //-----
    Document("Bonuses/Payouts",EPBonussDocRClass,EPBonussForm,EPBonussFClass,modPY);
    Document("Social Tax",EPEmpSocTaxStatDocRClass,EPEmpSocTaxStatDocForm,EPEmpSocTaxStatDocFClass,modPY);//----------
    
    Export("Payroll Register",EPSettingsECLass,EPRegistersEn,modPY); 
    Export("Cabinet Rules No. 942, 3. attachment",EPEmpSocIncEClass,EPEmpSocIncEn,modPY);
    Export("Notice of PP Paid Amounts",EDSEmp677IncEClass,EDSEmp677IncEn,modPY); 
  end;

  end;
  return;
end;
