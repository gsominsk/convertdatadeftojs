external inner function val FindCostPriceSerialNumberBackDated(Integer,record INVc,string,string,val,val,Date,Boolean,Integer,Boolean,Integer,Integer);
external inner function Integer ItemCostPerLocation(record INVc);
external inner function val FindCostPriceFIFOBackDated(Integer,record INVc,string,string,val,val,Date,Boolean,Integer,Boolean,Integer,Integer,Integer);
external inner function val FindCostPriceLIFOBackDated(Integer,record INVc,string,string,val,Date,Boolean,Integer,Boolean,Integer,Integer,Integer);
external inner function val FindWAPriceBackdated(Integer,record INVc,string,val,Date,Boolean,Integer);
external inner function val GetStockQty2(string,string,Date,Boolean,Integer);
external inner procedure CalcCostPrice(val,val,val,Integer,val,var val,var val);

global
procedure FindAllStocksValueWA(record INVc INp,Integer UseDiscount,var val totvalp,Date todatp,Integer sumf,Integer consigstock,Integer repcalcwa)
begin
  Boolean TrHs,testf;
  record LocationVc Locr;
  val instock;
  val loctotval;
  array string 20 aloc;
  record WeigAvVc war;
  val t;
  
  totvalp = blankval;
  TrHs = true;
  while (LoopMain(Locr,1,TrHs)) begin
    if (TrHs) then begin
      instock = GetStockQty2(INp.Code,Locr.Code,todatp,false,sumf);
      if (instock!=0) then begin
        if (blankdate(todatp)) or (todatp==CurrentDate) then begin
          war.ArtCode = INp.Code;
          war.Location = Locr.Code;
          if (ReadFirstMain(war,2,true)) then begin
            CalcCostPrice(instock,war.WeighedAvPrice,INp.PriceFactor,UseDiscount,100,t,loctotval);
          end;
        end else begin
          loctotval = FindWAPriceBackdated(1,INp,Locr.Code,instock,todatp,false,repcalcwa);
          CalcCostPrice(instock,loctotval/instock,INp.PriceFactor,UseDiscount,100,t,loctotval);
        end;
        totvalp = totvalp + loctotval;
      end;
    end;
  end;
  return;
end;

global
procedure FindAllStocksValueLIFO(string artcode,record INVc INp,val instock,var val totvalp,Date todatp,Integer printf,Integer OverwriteCostModel,Integer sumf,Integer consigstock,Integer repcalcwa)
begin
  Boolean TrHs,testf;
  record LocationVc Locr;
  val linstock;
  val loctotval;
  array string 20 aloc;
  Integer perloc;


  perloc = ItemCostPerLocation(INp);
  linstock = instock;
  totvalp = blankval;
  TrHs = true;
  while (LoopMain(Locr,1,TrHs)) begin
    if (TrHs) then begin
      if (perloc) then begin
        linstock = GetStockQty2(artcode,Locr.Code,todatp,false,sumf);
      end;
      if (linstock!=0) then begin
        loctotval = FindCostPriceLIFOBackDated(perloc,INp,Locr.Code,"",linstock,todatp,false,printf,false,OverwriteCostModel,consigstock,repcalcwa);
        totvalp = totvalp + loctotval;
      end;
    end;
  end;
  return;
end;

global
procedure FindAllStocksValueFIFO(string artcode,record INVc INp,val instock,var val totvalp,Date todatp,Integer printf,Integer OverwriteCostModel,Integer sumf,Integer consigstock,Integer repcalcwa)
begin
  Boolean TrHs,testf;
  record LocationVc Locr;
  val linstock;
  val loctotval,adjqty,t;
  array string 20 aloc;
  Integer perloc;
  record WeigAvVc war;
  
  perloc = ItemCostPerLocation(INp);
  linstock = instock;
  totvalp = blankval;
  TrHs = true;
  while (LoopMain(Locr,1,TrHs)) begin
    if (TrHs) then begin
      if (perloc) then begin
        linstock = GetStockQty2(artcode,Locr.Code,todatp,false,sumf);
      end;
      if (linstock!=0) then begin
//        if (linstock>0) then begin
          loctotval = FindCostPriceFIFOBackDated(perloc,INp,Locr.Code,"",linstock,0,todatp,false,printf,false,OverwriteCostModel,consigstock,repcalcwa);
/*
        end else begin
          if (blankdate(todatp)) or (todatp==CurrentDate) then begin
            war.ArtCode = INp.Code;
            war.Location = Locr.Code;
            if (ReadFirstMain(war,2,true)) then begin
              CalcCostPrice(linstock,war.WeighedAvPrice,INp.PriceFactor,0,100,t,loctotval);//UseDiscount
            end;
          end else begin
            loctotval = FindWAPriceBackdated(1,INp,Locr.Code,instock,todatp,false,repcalcwa);
            CalcCostPrice(instock,loctotval/instock,INp.PriceFactor,0,100,t,loctotval);//UseDiscount
          end;
        end;
*/
        totvalp = totvalp + loctotval;
      end;
    end;
  end;
  return;
end;

global
procedure FindAllStocksValueSerialNumber(string artcode,record INVc INp,val instock,var val totvalp,Date todatp,Integer printf,Integer OverwriteCostModel,Integer sumf,Integer consigstock)
begin
  Boolean TrHs,testf;
  record LocationVc Locr;
  val linstock;
  val loctotval,adjqty;
  array string 20 aloc;
  Integer perloc;
  
  perloc = ItemCostPerLocation(INp);
  linstock = instock;
  totvalp = blankval;
  TrHs = true;
  while (LoopMain(Locr,1,TrHs)) begin
    if (TrHs) then begin
      if (perloc) then begin
        linstock = GetStockQty2(artcode,Locr.Code,todatp,false,sumf);
      end;
      if (linstock!=0) then begin
        loctotval = FindCostPriceSerialNumberBackDated(perloc,INp,Locr.Code,"",linstock,0,todatp,false,printf,false,0,consigstock);        
        totvalp = totvalp + loctotval;
      end;
    end;
  end;
  return;
end;
