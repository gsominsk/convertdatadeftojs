external inner function LongInt DateDiff(Date,Date);
external inner function Date DateFromString(string,string);
external inner procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external inner function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external inner function Boolean GetFirstPurchaseItem2(string,string,string,var record PIVc);
external inner function Boolean GetPurchaseItem(string,string,var record PIVc);
external inner procedure SendDateParameter(Date,var Area);
external inner procedure SendValParameter(val,var Area);
external inner procedure SendTextParameter(string,var Area);
external inner procedure SendEOLParameter(var Area);
external inner procedure HTSuppGroup(string,var string);
external inner procedure HTLocations(string, string, var string);
external inner procedure HTItems(string,var string);
external inner procedure HTITs(string,string,var string);
external inner procedure HTVends(string, string, var string);
external inner procedure HT2Per(Date, Date , var string);
external inner procedure HTConsigment(Integer, var string);


procedure ConsItemStatRnHeader(record RcVc RepSpec)
begin
  Integer rw;
  string 255 tstr;
  string 255 frloc,toloc;
  string 255 frit,toit;
  string 255 frve,tove;
  
  frloc = FirstInRange(RepSpec.f3,20);
  toloc = LastInRange(RepSpec.f3,20);
  frit = FirstInRange(RepSpec.LastAcc,20);
  toit = LastInRange(RepSpec.LastAcc,20);
  frve = FirstInRange(RepSpec.f1,20);
  tove = LastInRange(RepSpec.f1,20);

  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;  
  HTVends(frve,tove,tstr);
  Header(rw,tstr,0);
  HTSuppGroup(RepSpec.FirstAcc,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTItems(RepSpec.f2,tstr);
  Header(rw,tstr,0);  
  HTITs(frit,toit,tstr);
  Header(rw,tstr,1);
  rw = rw + 1; 
  if (nonblank(RepSpec.LastAcc)) then begin
    HTLocations(frloc,toloc,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  HTConsigment(RepSpec.flags[1],tstr);
  Header(rw,tstr,1);
  rw = rw + 1; 
  switch (RepSpec.flags[2]) begin
    case 0: tstr = USetStr(27450);
    case 1: tstr = USetStr(27451);
    case 2: tstr = USetStr(27452);
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
  return;
end;

procedure FindSourcePU(record IVVc IVr,Integer invrownr,string artcode,string serialnr,record PUVc sPUr,row PUVc sPUrw,var Integer spurow,var Boolean consgstockf,var Boolean TREOf)
begin
  record ItemHistVc IHr;
  record ItemHistVc sourceIHr;
  Boolean found;
  record SHVc SHr;
  
  spurow = -1;
  RecordNew(sPUr);
  sPUr.SerNr = -1;
  ClearRow(sPUr,sPUrw,1);  
  if (IVr.OrderNr<0) then begin
    IHr.FileName = "IVVc";
    IHr.TransNr = IVr.SerNr;
    IHr.Row = invrownr;
    if (ReadFirstKey("FNTransNr",IHr,3,true)) then begin
      sourceIHr.SerNr = IHr.Source;
      if (ReadFirstMain(sourceIHr,1,true)) then begin
        switch (sourceIHr.FileName) begin
          case "PUVc":
            sPUr.SerNr = sourceIHr.TransNr;
            if (ReadFirstMain(sPUr,1,true)) then begin
              MatRowGet(sPUr,sourceIHr.Row,sPUrw);
              spurow = sourceIHr.Row;
            end;
        end;
      end else begin
        sourceIHr.ArtCode = artcode;
        sourceIHr.SerialNr = serialnr;
        sourceIHr.FileName = "PUVc";
        if (ReadFirstKey("ArtCodeSerialNr",sourceIHr,3,true)) then begin
          sPUr.SerNr = sourceIHr.TransNr;
          if (ReadFirstMain(sPUr,1,true)) then begin
            MatRowGet(sPUr,sourceIHr.Row,sPUrw);
            spurow = sourceIHr.Row;
          end;
        end;        
      end;
      consgstockf = IHr.ConsigStock!=0;
      TREOf = IHr.TREOStock!=0;
    end;
  end else begin
    IHr.ArtCode = artcode;
    IHr.SerialNr = serialnr;
    IHr.FileName = "SHVc";
    found = true;
    while (LoopKey("ArtCodeSerialNr",IHr,3,found)) begin
      if (IHr.ArtCode!=artcode) then begin found = false; end;
      if (IHr.SerialNr!=serialnr) then begin found = false; end;
      if (IHr.FileName!="SHVc") then begin found = false; end;
      if (found) then begin
        sourceIHr.SerNr = IHr.Source;
        if (ReadFirstMain(sourceIHr,1,true)) then begin
          switch (sourceIHr.FileName) begin
            case "PUVc":
              sPUr.SerNr = sourceIHr.TransNr;
              if (ReadFirstMain(sPUr,1,true)) then begin
                MatRowGet(sPUr,sourceIHr.Row,sPUrw);
                spurow = sourceIHr.Row;
              end;
          end;
        end;
        consgstockf = IHr.ConsigStock!=0;   
        TREOf = IHr.TREOStock!=0;
        found = false;   
      end;
    end;
  end;
  return;
end;

procedure FindPO(record PUVc sPUr,row PUVc sPUrw,record POVc sPOr,row POVc sPOrw)
begin
  
  RecordNew(sPOr);
  ClearRow(sPOr,sPOrw,1);
  if (sPUr.PONr>0) then begin
    sPOr.SerNr = sPUr.PONr;
  end else begin
    sPOr.SerNr = sPUrw.PONr;
  end;
  if (ReadFirstMain(sPOr,1,true)) then begin
    MatRowGet(sPOr,sPUrw.OrdRow,sPOrw);
  end else begin
    if (sPUr.PONr>0) then begin
      sPOr.SerNr = sPUr.PONr;
    end else begin
      sPOr.SerNr = sPUrw.PONr;
    end;
  end;
  return;
end;

procedure AddToItemSoldArea(record RcVc RepSpec,string frve,string tove,string frin,string toin,string frit,string toit,string frloc,string toloc,
                            record IVVc IVr,row IVVc IVrw,Integer invrownr,vector Boolean vlineadded,Area solditemsarea,var LongInt acnt)
begin  
  record PUVc sPUr;
  row PUVc sPUrw;
  record POVc sPOr;
  row POVc sPOrw;
  LongInt l,startlineoff;
  string 255 tstr;
  Boolean testf;
  record CUVc VEr;
  record INVc INr;
  record PIVc PIr;
  Boolean consgstockf,TREOf;
  string 255 location;
  Integer spurow;
  val rowsum,t;
  record TaxMatrixVc TMr;
    
  if (blank(IVrw.ArtCode)) then begin goto LAddToItemSoldArea; end;
  if (blank(IVrw.SerialNr)) then begin goto LAddToItemSoldArea; end;

  startlineoff = GetAreaLength(solditemsarea);
  FindSourcePU(IVr,invrownr,IVrw.ArtCode,IVrw.SerialNr,sPUr,sPUrw,spurow,consgstockf,TREOf);
  if (blank(sPUr.VECode)) then begin
    if (RepSpec.flags[2]!=0) then begin
      location = IVrw.Location;
      if (blank(location)) then begin location = IVr.Location; end;      
      GetPurchaseItem(IVrw.ArtCode,location,PIr);
      sPUr.VECode = PIr.VECode;
    end;
  end;
//  if (vlineadded[sPUr.VECode & ":" & IVrw.ArtCode]==false) then begin
  if (true) then begin
    testf = true;
    VEr.Code = sPUr.VECode;
    if (ReadFirstMain(VEr,1,true)) then begin
    end;
    switch (RepSpec.flags[1]) begin
      case 0:  ;
      case 1: 
        if (consgstockf) then begin testf = false; end;
      case 2: 
        if (consgstockf==false) then begin testf = false; end;
    end;
    switch (RepSpec.flags[3]) begin
      case 0:  ;
      case 1: 
        if (TREOf) then begin testf = false; end;
      case 2: 
        if (TREOf==false) then begin testf = false; end;
    end;
    if (nonblank(RepSpec.f1)) then begin
      if (sPUr.VECode<frve) then begin testf = false; end;
      if (sPUr.VECode>tove) then begin testf = false; end;
    end;
    if (nonblank(RepSpec.FirstAcc)) then begin
      if (VEr.VECat!=RepSpec.FirstAcc) then begin testf = false; end;
    end;
    if (nonblank(VEr.Code)) then begin
      if (VEr.VEType==0) then begin testf = false; end;
    end;
    if (nonblank(RepSpec.TransStr)) then begin
      if (SetInSet(RepSpec.TransStr,VEr.Classification)==false) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      INr.Code = IVrw.ArtCode;
      if (ReadFirstMain(INr,1,true)) then begin
      end;    
    end;
    if (nonblank(RepSpec.f2)) then begin
      if (INr.Code<frin) then begin testf = false; end;
      if (INr.Code>toin) then begin testf = false; end;
    end;
    if (nonblank(RepSpec.LastAcc)) then begin
      if (INr.Group<frit) then begin testf = false; end;
      if (INr.Group>toit) then begin testf = false; end;
    end;
    if (nonblank(RepSpec.AccStr)) then begin
      if (SetInSet(RepSpec.AccStr,INr.DispGroups)==false) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      FindPO(sPUr,sPUrw,sPOr,sPOrw);
      l = 0;
      AddLongToArea(0,solditemsarea); l = l + 4;
      SendTextParameter(sPUr.VECode,solditemsarea); l = l + len(sPUr.VECode) + 1;
      SendTextParameter(VEr.Name,solditemsarea); l = l + BytesInString(VEr.Name) + 1;   
      SendTextParameter(IVrw.ArtCode,solditemsarea); l = l + len(IVrw.ArtCode) + 1;
      SendTextParameter(INr.Name,solditemsarea); l = l + BytesInString(INr.Name) + 1;
      SendTextParameter(sPUr.SerNr,solditemsarea); l = l + len(sPUr.SerNr) + 1;   
      SendTextParameter(spurow,solditemsarea); l = l + len(spurow) + 1;   
      SendTextParameter(sPOr.SerNr,solditemsarea); l = l + len(sPOr.SerNr) + 1;
      SendTextParameter(sPOr.Reference,solditemsarea); l = l + BytesInString(sPOr.Reference) + 1;
      if (IVr.InvType==kInvoiceTypeCredit) then begin
        IVrw.Quant = -IVrw.Quant;
      end;      
      tstr = ValToString(IVrw.Quant,M45Val,"",".",0);
      AddTextToArea(tstr & chr(9),solditemsarea); l = l + len(tstr) + 1;
     switch (RepSpec.Media) begin
        case mtFile:
          if (IVrw.Quant<0) then begin
            tstr = ValToString(-IVrw.Sum/IVrw.Quant,M45Val,"",".",0);
          end else begin
            tstr = ValToString(IVrw.Sum/IVrw.Quant,M45Val,"",".",0);
          end;
        case mtExcel:
          if (IVrw.Quant<0) then begin
            tstr = ValToString(-IVrw.Sum/IVrw.Quant,M45Val,"",".",0);
          end else begin
            tstr = ValToString(IVrw.Sum/IVrw.Quant,M45Val,"",".",0);
          end;
        otherwise
          tstr = ValToString(IVrw.FIFORowVal/IVrw.Quant,M45Val,"",".",0);
      end;
      AddTextToArea(tstr & chr(9),solditemsarea); l = l + len(tstr) + 1;
      tstr = ValToString(IVrw.FIFORowVal/IVrw.Quant,M45Val,"",".",0);
      AddTextToArea(tstr & chr(9),solditemsarea); l = l + len(tstr) + 1;
      SendTextParameter(IVrw.SerialNr,solditemsarea); l = l + len(IVrw.SerialNr) + 1;
      SendTextParameter(IVr.SerNr,solditemsarea); l = l + len(IVr.SerNr) + 1;
      SendTextParameter(DateToString(IVr.InvDate,"YYYYMMDD"),solditemsarea); l = l + len(DateToString(IVr.InvDate,"YYYYMMDD")) + 1;

      UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
      FindSalesExVat(TMr,IVrw.VATCode,IVrw.Sum,IVr.InclVAT,IVr.NoTAXonVAT,rowsum);      
      t = IVrw.Quant * IVrw.BasePrice;
      if (IVrw.PriceFactor!=0) then begin
        t = t/IVrw.PriceFactor;
      end;
      t = (rowsum - t)/rowsum;
      t = t*100;
      tstr = ValToString(t,M4Val,"",".",0);
      SendTextParameter(tstr,solditemsarea); l = l + len(tstr) + 1;

      SendTextParameter(consgstockf,solditemsarea); l = l + len(consgstockf) + 1;
      SendEOLParameter(solditemsarea); l = l + 2;
      acnt = acnt + 1;
      vlineadded[sPUr.VECode & ":" & IVrw.ArtCode] = true;

      PutLongInArea(l,solditemsarea,startlineoff);  

      startlineoff = startlineoff + l;  
    end;
  end;
LAddToItemSoldArea:;  

  return;
end;
/*
old , find crash
procedure SortItemSoldArea(Area solditemsarea,LongInt acnt)
begin
  LongInt i;
  LongInt l1,l2;
  LongInt off1,off2;
  LongInt beg1,beg2;
  LongInt l,begl;
  string 255 artcode1,vecode1;
  string 255 artcode2,vecode2;
  Area tmpsolditemsarea1,tmpsolditemsarea2;
  Boolean changef;
  Area a_tmpbeg,a_tmp1,a_tmp2,a_tmpend;

//  CreateFile("SortItemSoldArea1.txt");
//  CloseFile;
//  WriteAreaToFile(solditemsarea,"SortItemSoldArea1.txt",0);
  
  off1 = 0; off2 = 0;
  changef = true;
  while (changef) begin
    changef = false;
    off1 = 0;
    for (i=0;i<(acnt-1);i=i+1) begin    
      SetAreaZeroSize(tmpsolditemsarea1);
      SetAreaZeroSize(tmpsolditemsarea2);

//  CreateFile("SortItemSoldArea111.txt");
//  CloseFile;
//  WriteAreaToFile(tmpsolditemsarea1,"SortItemSoldArea111.txt",0);

      l1 = GetLongFromArea(solditemsarea,off1);
      beg1 = GetAreaFromArea(solditemsarea,off1+4,l1-4,tmpsolditemsarea1);              

//  CreateFile("SortItemSoldArea11.txt");
//  CloseFile;
//  WriteAreaToFile(tmpsolditemsarea1,"SortItemSoldArea11.txt",0);

      vecode1 = GetTabTextFromArea(0,0,tmpsolditemsarea1);
      artcode1 = GetTabTextFromArea(0,1,tmpsolditemsarea1);
      off2 = off1 + l1;
      l2 = GetLongFromArea(solditemsarea,off2);

      beg2 = GetAreaFromArea(solditemsarea,off2+4,l2-4,tmpsolditemsarea2);
      vecode2 = GetTabTextFromArea(0,0,tmpsolditemsarea2);
      artcode2 = GetTabTextFromArea(0,1,tmpsolditemsarea2);

//  CreateFile("SortItemSoldArea12.txt");
//  CloseFile;
//  WriteAreaToFile(tmpsolditemsarea2,"SortItemSoldArea12.txt",0);

      if ((vecode1>vecode2) or 
         ((vecode1==vecode2) and (artcode1>artcode2))) then begin
        SetAreaZeroSize(a_tmpbeg);
        SetAreaZeroSize(a_tmp1);
        SetAreaZeroSize(a_tmp2);
        SetAreaZeroSize(a_tmpend);
                
        begl = GetAreaFromArea(solditemsarea,0,off1,a_tmpbeg);              
        l = GetAreaFromArea(solditemsarea,off1,l1,a_tmp1);      
        l = GetAreaFromArea(solditemsarea,off2,l2,a_tmp2);      
        l = GetAreaFromArea(solditemsarea,off2+l2,GetAreaLength(solditemsarea)-(off2+l2),a_tmpend);      
        SetAreaZeroSize(solditemsarea);
        InsertAreaBeforeArea(a_tmpend,solditemsarea);
        InsertAreaBeforeArea(a_tmp1,solditemsarea);
        InsertAreaBeforeArea(a_tmp2,solditemsarea);
        InsertAreaBeforeArea(a_tmpbeg,solditemsarea);
        changef = true;
        off1 = off1 + l2;
      end else begin
        off1 = off1 + l1;
      end;
    end;
  end;
//  CreateFile("SortItemSoldArea2.txt");
//  CloseFile;
//  WriteAreaToFile(solditemsarea,"SortItemSoldArea2.txt",0);
  return;
end;
*/

procedure SortItemSoldArea(Area solditemsarea,LongInt acnt,integer sortorder)
begin
  LongInt i;
  LongInt l1,l2;
  LongInt off1,off2;
  LongInt beg1,beg2;
  LongInt l,begl,startlineoff;
  string 255 artcode1,vecode1;
  string 255 artcode2,vecode2;
  string 255 vename1,vename2;
  string 255 artname1,artname2;
  string 255 punr1,punr2;
  string 255 purow1,purow2;
  string 255 ponr1,ponr2;
  string 255 poreference1,poreference2;
  string 255 q1,q2;
  string 255 frw1,frw2;
  string 255 frw11,frw12;
  string 255 serialnr1,serialnr2;
  string 255 ivnr1,ivnr2;
  string 255 ivdate1,ivdate2;
  string 255 consgstockf1,consgstockf2;
  string 255 gp1,gp2;
  
  Area tmpsolditemsarea1,tmpsolditemsarea2,tmpsolditemsarea;
  Boolean changef;

//  CreateFile("SortItemSoldArea1.txt");
//  CloseFile;
//  WriteAreaToFile(solditemsarea,"SortItemSoldArea1.txt",0);
  
  if (acnt>=2) then begin
    changef = true;
  end;
  while (changef) begin
    changef = false;
    off1 = 0;
    SetAreaZeroSize(tmpsolditemsarea);
    beg1 = GetAreaFromArea(solditemsarea,0,GetAreaLength(solditemsarea),tmpsolditemsarea);              
    SetAreaZeroSize(solditemsarea);

    for (i=0;i<(acnt-1);i=i+1) begin    
      SetAreaZeroSize(tmpsolditemsarea1);
      SetAreaZeroSize(tmpsolditemsarea2);

      if (off1>=GetAreaLength(tmpsolditemsarea)) then begin
        goto LENDOFSORTINGINNERLOOP;
      end;

      l1 = GetLongFromArea(tmpsolditemsarea,off1);
      beg1 = GetAreaFromArea(tmpsolditemsarea,off1+4,l1-4,tmpsolditemsarea1);              

      vecode1 = GetTabTextFromArea(0,0,tmpsolditemsarea1);
      vename1 = GetTabTextFromArea(0,1,tmpsolditemsarea1);
      artcode1 = GetTabTextFromArea(0,2,tmpsolditemsarea1);
      artname1 = GetTabTextFromArea(0,3,tmpsolditemsarea1);
      punr1 = GetTabTextFromArea(0,4,tmpsolditemsarea1);
      purow1 = GetTabTextFromArea(0,5,tmpsolditemsarea1);
      ponr1 = GetTabTextFromArea(0,6,tmpsolditemsarea1);
      poreference1 = GetTabTextFromArea(0,7,tmpsolditemsarea1);
      q1 = GetTabTextFromArea(0,8,tmpsolditemsarea1);
      frw1 = GetTabTextFromArea(0,9,tmpsolditemsarea1);
      frw11 = GetTabTextFromArea(0,10,tmpsolditemsarea1);
      serialnr1 = GetTabTextFromArea(0,11,tmpsolditemsarea1);
      ivnr1 = GetTabTextFromArea(0,12,tmpsolditemsarea1);    
      ivdate1 = GetTabTextFromArea(0,13,tmpsolditemsarea1);    
      gp1 = GetTabTextFromArea(0,14,tmpsolditemsarea1);
      consgstockf1 = GetTabTextFromArea(0,15,tmpsolditemsarea1);
      off2 = off1 + l1;
      off1 = off1 + l1;
      if (off2>=GetAreaLength(tmpsolditemsarea)) then begin
        startlineoff = GetAreaLength(solditemsarea);
        l = 0;
        AddLongToArea(startlineoff,solditemsarea); l = l + 4;
        SendTextParameter(vecode1,solditemsarea); l = l + len(vecode1) + 1;
        SendTextParameter(vename1,solditemsarea); l = l + BytesInString(vename1) + 1;   
        SendTextParameter(artcode1,solditemsarea); l = l + len(artcode1) + 1;
        SendTextParameter(artname1,solditemsarea); l = l + BytesInString(artname1) + 1;
        SendTextParameter(punr1,solditemsarea); l = l + len(punr1) + 1;   
        SendTextParameter(purow1,solditemsarea); l = l + len(purow1) + 1;   
        SendTextParameter(ponr1,solditemsarea); l = l + len(ponr1) + 1;
        SendTextParameter(poreference1,solditemsarea); l = l + BytesInString(poreference1) + 1;
        SendTextParameter(q1,solditemsarea); l = l + len(q1) + 1;
        SendTextParameter(frw1,solditemsarea); l = l + len(frw1) + 1;
        SendTextParameter(frw11,solditemsarea); l = l + len(frw11) + 1;
        SendTextParameter(serialnr1,solditemsarea); l = l + len(serialnr1) + 1;
        SendTextParameter(ivnr1,solditemsarea); l = l + len(ivnr1) + 1;
        SendTextParameter(ivdate1,solditemsarea); l = l + len(ivdate1) + 1;
        SendTextParameter(gp1,solditemsarea); l = l + len(ivdate1) + 1;
        SendTextParameter(consgstockf1,solditemsarea); l = l + len(consgstockf1) + 1;
        SendEOLParameter(solditemsarea); l = l + 2;
        PutLongInArea(l,solditemsarea,startlineoff);  
        goto LENDOFSORTINGINNERLOOP;
      end;
      
      l2 = GetLongFromArea(tmpsolditemsarea,off2);
      beg2 = GetAreaFromArea(tmpsolditemsarea,off2+4,l2-4,tmpsolditemsarea2);

      vecode2 = GetTabTextFromArea(0,0,tmpsolditemsarea2);
      vename2 = GetTabTextFromArea(0,1,tmpsolditemsarea2);
      artcode2 = GetTabTextFromArea(0,2,tmpsolditemsarea2);
      artname2 = GetTabTextFromArea(0,3,tmpsolditemsarea2);
      punr2 = GetTabTextFromArea(0,4,tmpsolditemsarea2);
      purow2 = GetTabTextFromArea(0,5,tmpsolditemsarea2);
      ponr2 = GetTabTextFromArea(0,6,tmpsolditemsarea2);
      poreference2 = GetTabTextFromArea(0,7,tmpsolditemsarea2);
      q2 = GetTabTextFromArea(0,8,tmpsolditemsarea2);
      frw2 = GetTabTextFromArea(0,9,tmpsolditemsarea2);
      frw12 = GetTabTextFromArea(0,10,tmpsolditemsarea2);
      serialnr2 = GetTabTextFromArea(0,11,tmpsolditemsarea2);
      ivnr2 = GetTabTextFromArea(0,12,tmpsolditemsarea2);    
      ivdate2 = GetTabTextFromArea(0,13,tmpsolditemsarea2);    
      gp2 = GetTabTextFromArea(0,14,tmpsolditemsarea2);    
      consgstockf2 = GetTabTextFromArea(0,15,tmpsolditemsarea2);

      off1 = off1 + l2;
      startlineoff = GetAreaLength(solditemsarea);

      if ((sortorder==1) and ((vecode1>vecode2) or 
         ((vecode1==vecode2) and (artcode1>artcode2)))) or 
         ((sortorder==0) and ((vename1>vename2) or 
         ((vename1==vename2) and (artcode1>artcode2))))
         then begin


         l = 0;
         AddLongToArea(startlineoff,solditemsarea); l = l + 4;
         SendTextParameter(vecode2,solditemsarea); l = l + len(vecode2) + 1;
         SendTextParameter(vename2,solditemsarea); l = l + BytesInString(vename2) + 1;   
         SendTextParameter(artcode2,solditemsarea); l = l + len(artcode2) + 1;
         SendTextParameter(artname2,solditemsarea); l = l + BytesInString(artname2) + 1;
         SendTextParameter(punr2,solditemsarea); l = l + len(punr2) + 1;   
         SendTextParameter(purow2,solditemsarea); l = l + len(purow2) + 1;   
         SendTextParameter(ponr2,solditemsarea); l = l + len(ponr2) + 1;
         SendTextParameter(poreference2,solditemsarea); l = l + BytesInString(poreference2) + 1;
         SendTextParameter(q2,solditemsarea); l = l + len(q2) + 1;
         SendTextParameter(frw2,solditemsarea); l = l + len(frw2) + 1;
         SendTextParameter(frw12,solditemsarea); l = l + len(frw12) + 1;
         SendTextParameter(serialnr2,solditemsarea); l = l + len(serialnr2) + 1;
         SendTextParameter(ivnr2,solditemsarea); l = l + len(ivnr2) + 1;
         SendTextParameter(ivdate2,solditemsarea); l = l + len(ivdate2) + 1;
         SendTextParameter(gp2,solditemsarea); l = l + len(gp2) + 1;
         SendTextParameter(consgstockf2,solditemsarea); l = l + len(consgstockf2) + 1;
         SendEOLParameter(solditemsarea); l = l + 2;
         PutLongInArea(l,solditemsarea,startlineoff);  
         
         startlineoff = startlineoff + l;
         l = 0;
         AddLongToArea(startlineoff,solditemsarea); l = l + 4;
         SendTextParameter(vecode1,solditemsarea); l = l + len(vecode1) + 1;
         SendTextParameter(vename1,solditemsarea); l = l + BytesInString(vename1) + 1;   
         SendTextParameter(artcode1,solditemsarea); l = l + len(artcode1) + 1;
         SendTextParameter(artname1,solditemsarea); l = l + BytesInString(artname1) + 1;
         SendTextParameter(punr1,solditemsarea); l = l + len(punr1) + 1;   
         SendTextParameter(purow1,solditemsarea); l = l + len(purow1) + 1;   
         SendTextParameter(ponr1,solditemsarea); l = l + len(ponr1) + 1;
         SendTextParameter(poreference1,solditemsarea); l = l + BytesInString(poreference1) + 1;
         SendTextParameter(q1,solditemsarea); l = l + len(q1) + 1;
         SendTextParameter(frw1,solditemsarea); l = l + len(frw1) + 1;
         SendTextParameter(frw11,solditemsarea); l = l + len(frw11) + 1;
         SendTextParameter(serialnr1,solditemsarea); l = l + len(serialnr1) + 1;
         SendTextParameter(ivnr1,solditemsarea); l = l + len(ivnr1) + 1;
         SendTextParameter(ivdate1,solditemsarea); l = l + len(ivdate1) + 1;
         SendTextParameter(gp1,solditemsarea); l = l + len(gp1) + 1;
         SendTextParameter(consgstockf1,solditemsarea); l = l + len(consgstockf1) + 1;
         SendEOLParameter(solditemsarea); l = l + 2;
         PutLongInArea(l,solditemsarea,startlineoff);  
                  
         changef = true;
        
      end else begin
         l = 0;
         AddLongToArea(startlineoff,solditemsarea); l = l + 4;
         SendTextParameter(vecode1,solditemsarea); l = l + len(vecode1) + 1;
         SendTextParameter(vename1,solditemsarea); l = l + BytesInString(vename1) + 1;   
         SendTextParameter(artcode1,solditemsarea); l = l + len(artcode1) + 1;
         SendTextParameter(artname1,solditemsarea); l = l + BytesInString(artname1) + 1;
         SendTextParameter(punr1,solditemsarea); l = l + len(punr1) + 1;   
         SendTextParameter(purow1,solditemsarea); l = l + len(purow1) + 1;   
         SendTextParameter(ponr1,solditemsarea); l = l + len(ponr1) + 1;
         SendTextParameter(poreference1,solditemsarea); l = l + BytesInString(poreference1) + 1;
         SendTextParameter(q1,solditemsarea); l = l + len(q1) + 1;
         SendTextParameter(frw1,solditemsarea); l = l + len(frw1) + 1;
         SendTextParameter(frw11,solditemsarea); l = l + len(frw11) + 1;
         SendTextParameter(serialnr1,solditemsarea); l = l + len(serialnr1) + 1;
         SendTextParameter(ivnr1,solditemsarea); l = l + len(ivnr1) + 1;
         SendTextParameter(ivdate1,solditemsarea); l = l + len(ivdate1) + 1;
         SendTextParameter(gp1,solditemsarea); l = l + len(gp1) + 1;
         SendTextParameter(consgstockf1,solditemsarea); l = l + len(consgstockf1) + 1;
         SendEOLParameter(solditemsarea); l = l + 2;
         PutLongInArea(l,solditemsarea,startlineoff);  

         startlineoff = startlineoff + l;
         l = 0;
         AddLongToArea(startlineoff,solditemsarea); l = l + 4;
         SendTextParameter(vecode2,solditemsarea); l = l + len(vecode2) + 1;
         SendTextParameter(vename2,solditemsarea); l = l + BytesInString(vename2) + 1;   
         SendTextParameter(artcode2,solditemsarea); l = l + len(artcode2) + 1;
         SendTextParameter(artname2,solditemsarea); l = l + BytesInString(artname2) + 1;
         SendTextParameter(punr2,solditemsarea); l = l + len(punr2) + 1;   
         SendTextParameter(purow2,solditemsarea); l = l + len(purow2) + 1;   
         SendTextParameter(ponr2,solditemsarea); l = l + len(ponr2) + 1;
         SendTextParameter(poreference2,solditemsarea); l = l + BytesInString(poreference2) + 1;
         SendTextParameter(q2,solditemsarea); l = l + len(q2) + 1;
         SendTextParameter(frw2,solditemsarea); l = l + len(frw2) + 1;
         SendTextParameter(frw12,solditemsarea); l = l + len(frw12) + 1;
         SendTextParameter(serialnr2,solditemsarea); l = l + len(serialnr2) + 1;
         SendTextParameter(ivnr2,solditemsarea); l = l + len(ivnr2) + 1;
         SendTextParameter(ivdate2,solditemsarea); l = l + len(ivdate2) + 1;
         SendTextParameter(gp2,solditemsarea); l = l + len(gp2) + 1;
         SendTextParameter(consgstockf2,solditemsarea); l = l + len(consgstockf2) + 1;
         SendEOLParameter(solditemsarea); l = l + 2;
         PutLongInArea(l,solditemsarea,startlineoff);  

      end;
    end;
LENDOFSORTINGINNERLOOP:;    
  end;
LSortItemSoldArea:;  
//  CreateFile("SortItemSoldArea2.txt");
//  CloseFile;
//  WriteAreaToFile(solditemsarea,"SortItemSoldArea2.txt",0);
  return;
end;

procedure PrintItemSoldArea(record RcVc RepSpec,Area solditemsarea,LongInt acnt)
begin
  LongInt i;
  LongInt off,l,beg;
  Area tmpsolditemsarea;
  string 255 artcode,vecode,consgstockf;
  string 255 lasrtartcode,lastvecode,vename;
  string 255 artname,ponr,poreference,serialnr,ivnr,punr,spurow;
  string 40 veitemcode,veserialnr;
  val q,frw,frw2;
  val totsalesqty,totsales;
  record CUVc VEr;
  record PUVc PUr;
  row PUVc PUrw;
  Boolean veprntf;
  record PIVc PIr;
  record BatchTextVc btr;
  record INVc INr;
  val costprice,gp;
  Date ivdate;
  
  off = 0;
  for (i=0;i<acnt;i=i+1) begin
    SetAreaZeroSize(tmpsolditemsarea);

    l = GetLongFromArea(solditemsarea,off);
    beg = GetAreaFromArea(solditemsarea,off+4,l-4,tmpsolditemsarea);              

//  CreateFile("SPrintItemSoldArea.txt");
//  CloseFile;
//  WriteAreaToFile(tmpsolditemsarea,"SPrintItemSoldArea.txt",0);

    vecode = GetTabTextFromArea(0,0,tmpsolditemsarea);    
    vename = GetTabTextFromArea(0,1,tmpsolditemsarea);    
    artcode = GetTabTextFromArea(0,2,tmpsolditemsarea);
    artname = GetTabTextFromArea(0,3,tmpsolditemsarea);
    punr = GetTabTextFromArea(0,4,tmpsolditemsarea);    
    if (punr=="-1") then begin punr = ""; end;
    spurow = GetTabTextFromArea(0,5,tmpsolditemsarea);    
    if (spurow=="-1") then begin spurow = ""; end;
    ponr = GetTabTextFromArea(0,6,tmpsolditemsarea);
    if (ponr=="-1") then begin ponr = ""; end;
    poreference = GetTabTextFromArea(0,7,tmpsolditemsarea);
    q = StringToVal(GetTabTextFromArea(0,8,tmpsolditemsarea),M45Val);
    frw = StringToVal(GetTabTextFromArea(0,9,tmpsolditemsarea),M45Val);
    frw2 = StringToVal(GetTabTextFromArea(0,10,tmpsolditemsarea),M45Val);
    serialnr = GetTabTextFromArea(0,11,tmpsolditemsarea);
    ivnr = GetTabTextFromArea(0,12,tmpsolditemsarea);    
    ivdate = DateFromString(GetTabTextFromArea(0,13,tmpsolditemsarea),"YYYYMMDD");    
    gp = StringToVal(GetTabTextFromArea(0,14,tmpsolditemsarea),M4Val);
    consgstockf = GetTabTextFromArea(0,15,tmpsolditemsarea);    
    off = off + l;
    if (blank(vecode)) then begin
      goto LSKIPLINE;
    end;
    switch (RepSpec.Media) begin
      case mtFile:
        goto LPRINTLINETOFILE;      
      case mtExcel:
LPRINTLINETOFILE:;   
        ReadFirstItem(artcode,INr,false,false);
        PUr.SerNr = StringToLongInt(punr);
        if (ReadFirstMain(PUr,1,true)) then begin end;
/*        if (nonblank(spurow)) then begin
          MatRowGet(PUr,StringToInt(spurow),PUrw);
          costprice = PUrw.CostPrice;
        end else begin
          costprice = INr.InPrice;
        end;*/
        costprice = frw2;
        StartFormat(15);        
         OutString(0,0,vecode,false);
         OutString(0,0,vename,false);
         GetFirstPurchaseItem2(artcode,"",vecode,PIr);
         if (blank(PIr.VEItemCode)) then begin
           GetFirstPurchaseItem2(artcode,"","",PIr);
         end;
         OutString(0,0,PIr.VEItemCode,false);
         btr.ArtCode = artcode;
         btr.SerialNr = serialnr;
         if (ReadFirstMain(btr,2,true)) then begin
         end;
         OutString(0,0,btr.SuppSerialNr,false);         
         OutString(0,"DblINVc",artcode,false);
         if (consgstockf=="1") then begin
           OutString(0,0,serialnr,false);
           OutString(0,0,"(*)",false);
         end else begin
           OutString(0,0,serialnr,false);
           OutString(0,0,"",false);
         end;
         OutString(0,0,INr.Group,false);         
         OutString(0,0,INr.DispGroups,false);         
         OutString(0,0,INr.Name,false);
         OutString(0,0,INr.Unittext,false);
         OutVal(0,0,q,M4Val,true);
         if (q<0) then begin
           INr.UPrice1 = -INr.UPrice1;
           costprice = -costprice;
         end;
         OutVal(0,0,costprice,M4Val,true);
         OutVal(0,0,INr.UPrice1,M4Val,true);                           
         if (q<0) then begin
           OutVal(0,0,frw,M4Val,true);
         end else begin
           OutVal(0,0,frw,M4Val,true);
         end;
         OutDate(0,0,PUr.TransDate,false);
         OutLongInt(0,0,DateDiff(ivdate,PUr.TransDate),false);
         OutString(0,0,PUr.Location,false);         
         OutString(0,0,ponr,false);
         OutString(0,0,poreference,false);
         OutString(0,0,ivnr,false);           
         OutDate(0,0,ivdate,false);           
         OutString(0,0,gp & "%",true);
        EndFormat;
      otherwise
        if (ReadFirstItem(artcode,INr,false,false)) then begin end;
        if (lastvecode!=vecode) then begin
          if (nonblank(lastvecode)) then begin
            StartFormat(15);
            EndFormat;
            Gray_Divider(0,1);
          end;
          VEr.Code = vecode;
          if (ReadFirstMain(VEr,1,true)) then begin end;
          StartFormat(15);
           OutString(0,"DblVEVc",VEr.Code,false);
           OutString(75,0,VEr.Name,false);
          EndFormat;
          Gray_Divider(0,300);
        end;
        if (RepSpec.flags[0]!=0) then begin
          StartFormat(15);        
           OutString(0,"DblINVc",artcode,false);
           OutString(75,0,Left(artname,20),false);
           OutVal(230,0,q,M4Val,true);
           if (q<0) then begin
             OutVal(290,0,-frw,M4Val,true);
           end else begin
             OutVal(290,0,frw,M4Val,true);
           end;
           OutString(295,"DblPOVc",ponr,false);
    //       OutString(295,0,ponr,false);
           OutString(350,0,poreference,false);
           OutString(445,"DblIVVc",ivnr,false);           
          EndFormat;
          StartFormat(15);        
           if (consgstockf=="1") then begin
             OutString(75,0,serialnr & "(*)",false);
           end else begin
             OutString(75,0,serialnr,false);
           end;
          GetFirstPurchaseItem2(artcode,"",vecode,PIr);
          if (blank(PIr.VEItemCode)) then begin
            GetFirstPurchaseItem2(artcode,"","",PIr);
          end;
          OutString(175,0,PIr.VEItemCode,false);
          OutImage(295,100,30,INr);
          EndFormat;
        end else begin
          StartFormat(15);        
           OutString(0,"DblINVc",artcode,false);
           OutString(75,0,Left(artname,20),false);
           OutVal(230,0,q,M4Val,true);
           OutVal(290,0,frw,M4Val,true);
           OutLongInt(295,"DblPOVc",ponr,false);
    //       OutLongInt(295,0,ponr,false);
           OutString(350,0,poreference,false);
           OutLongInt(445,"DblIVVc",ivnr,false);           
          EndFormat;
        end;
    end;
    totsalesqty = totsalesqty + q;
    totsales = totsales + q*frw;
    lastvecode = vecode;
LSKIPLINE:;    
  end;
  veprntf = false;
  off = 0;
  for (i=0;i<acnt;i=i+1) begin
    SetAreaZeroSize(tmpsolditemsarea);

    l = GetLongFromArea(solditemsarea,off);
    beg = GetAreaFromArea(solditemsarea,off+4,l-4,tmpsolditemsarea);              

    vecode = GetTabTextFromArea(0,0,tmpsolditemsarea);    
    vename = GetTabTextFromArea(0,1,tmpsolditemsarea);    
    artcode = GetTabTextFromArea(0,2,tmpsolditemsarea);
    artname = GetTabTextFromArea(0,3,tmpsolditemsarea);
    punr = GetTabTextFromArea(0,4,tmpsolditemsarea);    
    if (punr=="-1") then begin punr = ""; end;
    spurow = GetTabTextFromArea(0,5,tmpsolditemsarea);    
    if (spurow=="-1") then begin spurow = ""; end;
    ponr = GetTabTextFromArea(0,6,tmpsolditemsarea);
    if (ponr=="-1") then begin ponr = ""; end;
    poreference = GetTabTextFromArea(0,7,tmpsolditemsarea);
    q = StringToVal(GetTabTextFromArea(0,8,tmpsolditemsarea),M45Val);
    frw = StringToVal(GetTabTextFromArea(0,9,tmpsolditemsarea),M45Val);
    frw2 = StringToVal(GetTabTextFromArea(0,10,tmpsolditemsarea),M45Val);
    serialnr = GetTabTextFromArea(0,11,tmpsolditemsarea);
    ivnr = GetTabTextFromArea(0,12,tmpsolditemsarea);    
    ivdate = DateFromString(GetTabTextFromArea(0,13,tmpsolditemsarea),"YYYYMMDD");    
    gp = StringToVal(GetTabTextFromArea(0,14,tmpsolditemsarea),M4Val);
    consgstockf = GetTabTextFromArea(0,15,tmpsolditemsarea);    
    off = off + l;
    if (nonblank(vecode)) then begin
      goto LSKIPLINEWVE;
    end;
    switch (RepSpec.Media) begin
      case mtFile:
        goto LPRINTLINEWOVETOFILE;      
      case mtExcel:
LPRINTLINEWOVETOFILE:;      
        if (ReadFirstItem(artcode,INr,false,false)) then begin end;
        PUr.SerNr = StringToLongInt(punr);
        if (ReadFirstMain(PUr,1,true)) then begin end;
        if (nonblank(spurow)) then begin
          MatRowGet(PUr,StringToInt(spurow),PUrw);
          costprice = PUrw.CostPrice;
        end else begin
          costprice = INr.InPrice;
        end;
        costprice = frw2;
        StartFormat(15);        
         OutString(0,0,vecode,false);
         OutString(0,0,vename,false);
         GetFirstPurchaseItem2(artcode,"",vecode,PIr);
         if (blank(PIr.VEItemCode)) then begin
           GetFirstPurchaseItem2(artcode,"","",PIr);
         end;
         OutString(0,0,PIr.VEItemCode,false);
         btr.ArtCode = artcode;
         btr.SerialNr = serialnr;
         if (ReadFirstMain(btr,2,true)) then begin
         end;
         OutString(0,0,btr.SuppSerialNr,false);         
         OutString(0,"DblINVc",artcode,false);
         if (consgstockf=="1") then begin
           OutString(0,0,serialnr,false);
           OutString(0,0,"(*)",false);
         end else begin
           OutString(0,0,serialnr,false);
           OutString(0,0,"",false);
         end;
         OutString(0,0,INr.Group,false);         
         OutString(0,0,INr.DispGroups,false);         
         OutString(0,0,INr.Name,false);
         OutString(0,0,INr.Unittext,false);
         OutVal(0,0,q,M4Val,true);
         if (q<0) then begin
           INr.UPrice1 = -INr.UPrice1;
           costprice = -costprice;
         end;
         OutVal(0,0,costprice,M4Val,true);
         OutVal(0,0,INr.UPrice1,M4Val,true);                           
         OutVal(0,0,frw,M4Val,true);
         OutDate(0,0,PUr.TransDate,false);
         OutLongInt(0,0,DateDiff(ivdate,PUr.TransDate),false);
         OutString(0,0,PUr.Location,false);         
         OutString(0,0,ponr,false);
         OutString(0,0,poreference,false);
         OutString(0,0,ivnr,false);           
        EndFormat;

      otherwise
        if (veprntf==false) then begin
          StartFormat(15);
          EndFormat;
          Gray_Divider(0,1);
          VEr.Name = USetStr(16628);
          StartFormat(15);
           OutString(75,0,VEr.Name,false);
          EndFormat;
          Gray_Divider(0,300);
          veprntf = true;
        end;
        if (RepSpec.flags[0]!=0) then begin
          StartFormat(15);        
           OutString(0,"DblINVc",artcode,false);
           OutString(75,0,Left(artname,20),false);
           OutVal(230,0,q,M4Val,true);
           OutVal(290,0,frw,M4Val,true);
      //       OutString(295,"DblPOVc",ponr,false);
           OutString(295,0,ponr,false);
           OutString(350,0,poreference,false);
           OutString(445,"DblIVVc",ivnr,false);           
          EndFormat;
          StartFormat(15);        
           if (consgstockf=="1") then begin
           OutString(75,0,serialnr & "(*)",false);
           end else begin
           OutString(75,0,serialnr,false);
           end;
          EndFormat;
        end else begin
          StartFormat(15);        
           OutString(0,"DblINVc",artcode,false);
           OutString(75,0,Left(artname,20),false);
           OutVal(230,0,q,M4Val,true);
           OutVal(290,0,frw,M4Val,true);
      //       OutLongInt(295,"DblPOVc",ponr,false);
           OutLongInt(295,0,ponr,false);
           OutString(350,0,poreference,false);
           OutLongInt(445,"DblIVVc",ivnr,false);           
          EndFormat;
        end;
      end;
      totsalesqty = totsalesqty + q;
      totsales = totsales + q*frw;
LSKIPLINEWVE:;    
  end;
  switch (RepSpec.Media) begin
    case mtFile:
      goto LPRINTTOTALLINETOFILE;      
    case mtExcel:
LPRINTTOTALLINETOFILE:;      
      StartFormat(15);
       OutString(0,0,"",false);
       OutString(0,0,"",false);
       OutString(0,0,"",false);
       OutString(0,0,"",false);
       OutString(0,0,"",false);
       OutString(0,0,"",false);
       OutString(0,0,"",false);
       OutString(0,0,"",false);
       OutString(0,0,"",false);
       OutString(0,0,"",false);
       OutString(0,0,"",false);
       OutVal(230,0,totsalesqty,M4Val,true);
//totsales       
       OutString(0,0,"",false);
       OutString(0,0,"",false);
       OutString(0,0,"",false);
      EndFormat;
    otherwise
      Gray_Divider(0,1);  
      StartFormat(15);
       OutVal(230,0,totsalesqty,M4Val,true);
       OutVal(290,0,totsales,M4Val,true);
      EndFormat;
  end;
  return;
end;

global
procedure SerialItemStatRn(record RcVc RepSpec)
begin
  Boolean found,testf;
  Integer sort,keys;
  Area solditemsarea;
  record IVVc IVr;
  row IVVc IVrw;
  Integer i,rwcnt;
  LongInt acnt;
  vector Boolean vlineadded;
  string 255 frve,tove;
  string 255 frit,toit;
  string 255 frin,toin;
  string 255 frloc,toloc;

  StartReportJob(USetStr(17230));
   ConsItemStatRnHeader(RepSpec);
  EndHeader;

  switch (RepSpec.Media) begin
    case mtFile:
      goto LPRINTHEADERLINETOFILE;      
    case mtExcel:
LPRINTHEADERLINETOFILE:;      
      StartFormat(15);
       OutString(0,0,USetStr(17242),false);
       OutString(0,0,USetStr(17243),false);
       OutString(0,0,USetStr(17244),false);
       OutString(0,0,USetStr(17245),false);
       OutString(0,0,USetStr(17231),false);
       OutString(0,0,USetStr(17233),false);
       OutString(0,0,USetStr(17247),false);
       OutString(0,0,USetStr(17248),false);
       OutString(0,0,USetStr(17249),false);
       OutString(75,0,USetStr(17232),false);
       OutString(0,0,USetStr(17246),false);
       OutString(230,0,USetStr(17234),true);       
       OutString(0,0,USetStr(17229),false);       
       OutString(0,0,USetStr(17228),false);
       OutString(0,0,USetStr(17227),false);
       OutString(0,0,USetStr(17226),false);
       OutString(0,0,USetStr(17225),false);
       OutString(0,0,USetStr(17224),false);
       OutString(295,0,USetStr(17236),false);
       OutString(350,0,USetStr(17237),false);
       OutString(445,0,USetStr(17238),false);
       OutString(445,0,USetStr(17222),false);
       OutString(445,0,USetStr(17223),false);
      EndFormat;
    otherwise
      if (RepSpec.flags[0]!=0) then begin
        StartFormat(15);
         OutString(0,0,USetStr(17231),false);
         OutString(75,0,USetStr(17232),false);
         OutString(230,0,USetStr(17234),true);
         OutString(290,0,USetStr(17235),true);
         OutString(295,0,USetStr(17236),false);
         OutString(350,0,USetStr(17237),false);
         OutString(445,0,USetStr(17238),false);           
        EndFormat;
      end else begin
        StartFormat(15);
         OutString(0,0,USetStr(17231),false);
         OutString(75,0,USetStr(17232),false);
         OutString(230,0,USetStr(17234),true);
         OutString(290,0,USetStr(17235),true);
         OutString(295,0,USetStr(17236),false);
         OutString(350,0,USetStr(17237),false);
         OutString(445,0,USetStr(17238),false);           
        EndFormat;
      end;
      Gray_Divider(0,1);  
  end;
  frve = FirstInRange(RepSpec.f1,20);  
  tove = LastInRange(RepSpec.f1,20);
  frit = FirstInRange(RepSpec.LastAcc,20);
  toit = LastInRange(RepSpec.LastAcc,20);
  frin = FirstInRange(RepSpec.f2,20);
  toin = LastInRange(RepSpec.f2,20);
  frloc = FirstInRange(RepSpec.f3,20);
  toloc = LastInRange(RepSpec.f3,20);
  acnt = 0;
  found = true;
  IVr.TransDate = RepSpec.sStartDate;


  while (LoopKey("TransDate",IVr,1,found)) begin
    if (IVr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (IVr.Invalid!=0) then begin testf = false; end;
      if (IVr.OKFlag==0) then begin testf = false; end;
      if (testf) then begin
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          switch (IVrw.stp) begin
            case kInvoiceRowTypeNormal:  AddToItemSoldArea(RepSpec,frve,tove,frin,toin,frit,toit,frloc,toloc,IVr,IVrw,i,vlineadded,solditemsarea,acnt);
            case kInvoiceRowTypeStructuredItemComponent:  AddToItemSoldArea(RepSpec,frve,tove,frin,toin,frit,toit,frloc,toloc,IVr,IVrw,i,vlineadded,solditemsarea,acnt);
            case 11: AddToItemSoldArea(RepSpec,frve,tove,frin,toin,frit,toit,frloc,toloc,IVr,IVrw,i,vlineadded,solditemsarea,acnt);
          end;
        end;
      end;
    end;
  end;
  SortItemSoldArea(solditemsarea,acnt,0);
  PrintItemSoldArea(RepSpec,solditemsarea,acnt);
  EndJob;
  return;
end;
