/* sasengm.hal */
/* Standard Accounts by HansaWorld */
external function Boolean HasDeveloperMode();
external function Boolean HasConsStockMoveInvoices();
external function Boolean HasCustomerLetter();
external function Boolean HasDownpayments();
external function Boolean HasBankImport();
external function Boolean HasAccountRecon();
external function Boolean HasAdvancedAccounting();
external function Boolean HasInvoiceOfficialSerNr();
external function Boolean HasPersons();
external function Boolean HasETaxDocuments();
external function Boolean HasModQT();
external function Boolean HasSerialNumbers();
external function Boolean HasModAT2();
external function Boolean HasModCL();
external function Boolean HasStandardCRM();
external function Boolean HasModExp();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();
external function Boolean HasTaxMatrix();
external function Boolean HasModSO();
external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModSL();
external function Boolean HasModPL();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModRest();
external function Boolean HasModCRM();
external function Boolean HasPaymentGateway();
external function Boolean HasPayroll();
external function Boolean HasEMail();
external function Boolean HasModSVO();
external function Boolean HasModProd();
external function Boolean HasModTS();

external function Boolean HasAccessGroups();
external function Boolean HasAdvancedCRM();
external function Boolean HasAdvancedPricing();
external function Boolean HasBase2();
external function Boolean HasCategories();
external function Boolean HasContactClassification();
external function Boolean HasDepartments();
external function Boolean HasEInvoicing();
external function Boolean HasFiscalPrinter();
external function Boolean HasFormEditor();
external function Boolean HasIncomeAndExpenseBook();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLocalMachines();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNLBudget();
external function Boolean HasNumberSeries();
external function Boolean HasOfficialSerNr();
external function Boolean HasObjects();
external function Boolean HasPriceLists();
external function Boolean HasReminderLevel();
external function Boolean HasReturnedGoods();
external function Boolean HasRetGoodsToSupp();
external function Boolean HasSalesmanBonus();
external function Boolean HasServerInCloud();
external function Boolean HasSimulations();
external function Boolean HasVarieties();
external function Boolean HasRegistersExports();
external function Boolean HasSkypeConnection();
external function Boolean HasSLIntegratedWithNL();
external function Boolean HasPLIntegratedWithNL();
external function Boolean HasIntegratedNL();
external function Boolean HasVATZone();

external function Boolean HasWithholdingTax();
external function Boolean HasWithholdingTaxAdvanced();
external function Boolean HasPrepayments();
external procedure LoadWindowTags();
external procedure SetProductTags();

begin
  Real h,v,l,vs;

  SetLangMode(LangRussian,"RUS",0);

  // this is for when it's a hardcoded list of options
  // we'll get some better solution for that later, but for now we
  // need one product folder per set of default options

  if (BuildProductCode=="StandardAccounts" or BuildProductCode=="StandardBusiness" or BuildProductCode=="StandardAccountsMWeb" or BuildProductCode=="StandardAccountsiDream" or BuildProductCode=="StandardAccountsWebRaama") then begin

  SetProductTags;
  LoadWindowTags;

/*not approved, according to OPM 
  if (HasStandardCRM) then begin
    Module("CRM","",730,modCRM);  
    Module("Calendar","",730,modCAL);  
    Module("Менджер задач","",730,modTASK);
  end;
*/ 
  if (HasModAT2) then begin
    Module("Активы","",730,modAT2); 
  end;
  if (HasModCL) then begin
    Module("Кассовая книга","",730,modCL);
  end;
  if (HasStandardCommunicator and HasStandardCRM==false and HasStandardOrganizer==false) then begin 
    Module("Коммуникатор","",730,modCRM);
  end;
  if (HasModCRM) then begin 
    Module("CRM","",730,modCRM); 
  end;
  if (HasEMail) then begin
    Module("Электронная почта","",730,modEmail);
  end;
  if (HasModExp) then begin
    Module("Затраты","",730,modExp); 
  end;
  if (HasModTS) then begin
    Module("Расчёт трудозатрат","",730,modTS); 
  end;
  if (HasModNL) then begin
    Module("Финансы","",730,modNL);
  end else begin
    if (HasIncomeAndExpenseBook) then begin
      Module("Финансы","",730,modNL);
    end;
  end;
  if (HasStandardOrganizer and HasStandardCRM==false) then begin 
    Module("Органайзер","",730,modCRM);
  end;
  if (HasModPOS) then begin
    Module("Кассовый терминал","",730,modPOS);  
  end;
  if (HasModPL) then begin
    Module("Расчёты с поставщиками","",730,modPL);  
  end;
  if (HasModPO) then begin
    Module("Заказы поставщикам","",730,modPO);
  end;
  if (HasModQT) then begin
    Module("Коммерческие предложения","",730,modQT);
  end;  
  if (HasModProd) then begin
    Module("Производство","",730,modProd); 
  end;
  if (HasModRest) then begin
    Module("Ресторан","",730,modRest);  
  end;
  if (HasModSL) then begin
    Module("Расчёты с клиентами","",730,modSL);
  end;
  if (HasModSO) then begin
    Module("Счета клиентам","",730,modSO);
  end;
  if (HasModIN) then begin
    Module("Склад","",730,modIN);
  end;
  if (HasModSL or HasModIN or HasModSO or HasModRest or HasModQT or HasModPO or HasPayroll or HasModPL or HasModPOS or HasModNL or HasIncomeAndExpenseBook or HasModCL or HasStandardCRM) then begin
    Module("Система","",730,modSY);
  end;
  if (HasModSVO) then begin
    Module("Заказы на обслуживание","",730,modSVO); 
  end;
    if (HasPayroll) then begin
      Module("Персонал","",730,modSAL);
      Module("Платёж","",730,modPY);
  end;
  
  // debug
  if (HasDeveloperMode) then begin
    Setting("Aut. Sales Actions",AutSalesActionLClass,modSY); //!!TRANSLATE
    Setting("Облачные сервисы",EnabServerTClass,modSY);
    Setting("Конфигурация",ModulesTClass,modSY);
    Setting("Текущие лицензии",CurLicensesClass,modSY);
    Setting("Интернет-ключи",InternetEnablerTClass,modSY);
    Setting("Лицензии",LicensesLClass,modSY);
    RegisterWS("Почтовые ящики","Почтовые ящики","Новый почтовый ящик",ConferenceWClass,modSY); 
    Setting("Мой IP-адрес",MyIPAddrTClass,modSY);
    Setting("Режим программы",ProgramStatusTClass,modSY);
    Setting("Кэш сервисов",ServiceCacheLClass,modSY);
    Setting("Регистрационные данные",StdRegDataWClass,modSY);
    Setting("Нумерация официальных документов",OffSerNrLClass,modSY);
    Setting("Дополнения системы",UserFeaturePrefTClass,modSY); 
    Setting("Опции входа",LocalLoginOptionsTClass,modSY); 
    Setting("Интернет-ключи (старый блок)",InternetEnabOldTClass,modSY); 
    Setting("Установить Статус",SetupStatusTClass,modSY); 
    Setting("Очередь электрнных сч/ф",EInvoiceQueLClass,modSY);
    Setting("Тип стандарт сервера",StandardServerTClass,modSY); 
    Report("Список ожидающих задач",IdleTaskListRClass,IdleTaskListRn,0,modSY);
    Setting("Дата Компании и Цифровой формат",SysFormatTClass,modSY);

    RegisterWS("POS Invoices 2","POS Invoices 2","New Invoice",IVCashVc,modPOS); //!!TRANSLATE
    Setting("Legal Record Numbers",OffSerNrLClass,modPOS); //!!TRANSLATE
  end;
  // end debug code
  
/* modSL */
  
  RegisterWS("Счета-фактуры","Счета-фактуры","Новый счёт-фактура",IVVc,modSL); 
  RegisterWS("Платежи","Платежи","Новый платёж",IPVc,modSL); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modSL); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modSL); 
  if (HasPriceLists) then begin
    RegisterWS("Цены","Цены","Новая цена",PLVc,modSL); 
  end;
  if (HasLocalization("POL") and HasVATZone) then begin
    RegisterWS("Internal Invoices","Internal Invoices","New Internal Invoice",IntIVVc,modSL); //!!TRANSLATE
  end;
  if (HasLocalization("RUS")) then begin
    RegisterWS("Счета клиентам","Счета клиентам","Новый счёт клиенту",ORVc,modSL); 
  end;
  
  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Setting("Настройки записей - Расчёты с клиентами",AccTClass,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Setting("Age Limits",AgedTClass,modSL); 
  end;
  if (HasLocalization("BRA")) then begin 
    Setting("Bank Receipt Settings",BankReceiptTClass,modSL); //!!TRANSLATE
  end;
  if (HasLocalization("FIN,LVA,RUS") or HasEInvoicing) then begin
    Setting("Банки",BankLClass,modSL);
  end;
  if (HasSalesmanBonus) then begin
    Setting("Бонус",BonusDefLClass,modSL); 
  end;
  if (HasPaymentGateway) then begin
    Setting("Порты для платежей",CCAccountIDLClass,modSL); 
  end;
  if (HasContactClassification) then begin
    Setting("Классификации контактов",CClassLClass,modSL);
  end;
  if (HasCategories) then begin
  	Setting("Категории клиентов",CCatLClass,modSL);
  end;	
  if (HasEInvoicing or NumberOfEInvoices>0) or (HasFiscalPrinter and HasLocalization("SVN")) then begin
    Setting("Настройки электронного выставления счетов",EInvoiceTClass,modSL);
  end;
  if (HasEInvoicing) then begin
    Setting("Очередь электронных счетов-фактур",EInvoiceQueLClass,modSL);
    Setting("Статусы электронных записей",ERecordStatusLClass,modSL);
  end;
  if (HasLocalization("POL") and HasVATZone) then begin
    Setting("Internal Invoices",IntIVLClass,modSL);
  end;
  if (HasEInvoicing and HasLocalization("ARG")) then begin
    Setting("Internet Service Server",HTSEInvoiceTClass,modSL); //!!TRANSLATE
  end;

  if (HasModNL==false and HasIncomeAndExpenseBook==false) then begin
    Setting("Настройки реализации",AccTClass,modSL);
  end;
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT")) then begin
    Setting("Группы товаров",ITLClass,modSL);
  end;
  if (HasModSL and HasLocalization("ITA,PRT")) then begin
    Setting("Item Group Withholdings",WHITLClass,modSL);
  end;
  if ((HasNumberSeries or HasLocalization("HRV,LVA")) and (HasOfficialSerNr or HasInvoiceOfficialSerNr)) or (HasEInvoicing and HasLocalization("ARG")) then begin
    Setting("Legal Invoice Numbers",LegalInvNrTClass,modSL);
  end;  
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Сч/ф",IVSerTClass,modSL);
    Setting("Серии номеров - Платежи клиентов",IPSerTClass,modSL);
    if (HasModNL or HasIncomeAndExpenseBook) and (HasLocalization("POL")) then begin
      Setting("Серии номеров - #VAT# Corrections #S/L#",VATIVSerTClass,modSL);
    end;
    end;
  if (HasPaymentGateway) then begin
    Setting("Порты для платежей",CCAccountIDLClass,modSL);
    end;
  Setting("Способы оплаты",PMTClass,modSL);
  Setting("Условия оплаты",PDLClass,modSL);
  if (HasPriceLists) then begin
    Setting("Прейскуранты",PLDefLClass,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Setting("Reference Number Settings",CalcRefTClass,modSL);
  end;
  if (HasLocalization("ARG")) then begin
    Setting("Registration Defaults",RegDefTClass,modSL); //!!TRANSLATE
  end;
  Setting("Настройки счетов-фактур реализации",IVTTClass,modSL);
  if (HasLocalization("PRT")) then begin
    Setting("Standard Problems",StandProblemLClass,modSL);
  end;
  if (HasModNL==false) then begin
    if (HasLocalization("BRA,HRV")) then begin
      Setting("Налоговые шаблоны",TaxTemplateLClass,modSL);
      Setting("Transaction Settings",TrTClass,modSL);
    end;
    if (HasLocalization("BRA,HRV,KEN")) then begin
      Setting("Налоговые шаблоны",TaxTemplateLClass,modSL);
    end;
  end;
  Setting("Единицы",UnitLClass,modSL);
  if (HasLocalization("POL")) and (HasModNL or HasIncomeAndExpenseBook) then begin
    Setting("НДС коррекции книги продаж",VATIVLClass,modSL); 
  end;
  if (HasLocalization("HRV")) and (HasModNL or HasIncomeAndExpenseBook) then begin
//    Setting("#VAT# Correction #S/L# Types",VATIVTypeTClass,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Setting("Коды НДС",VATCodeTClass,modSL);  
  end;  
  if (HasLocalization("ARG,BRA,ITA,KEN,MEX,PRT,SGP,ZAF") and (HasModPL or HasModSL) and (HasWithholdingTax or HasWithholdingTaxAdvanced)) then begin
    Setting("Формула расчета удержания",WHCalcFormLClass,modSL);
    Setting("Удерживаемые налоги",WHTaxTClass,modSL);
  end;
  
  if (HasLocalization("RUS")==false) then begin
  Document("Чеки",KIVRClass,CashInvForm,CashFClass,modSL);
  end;
  
  Document("Кредит-ноты",CIVRClass,CredInvForm,CredFClass,modSL);

  if (HasLocalization("RUS")==false) then begin
  Document("Этикетки клиентов",CuLabRClass,CuLabForm,CuLabFClass,modSL);
  end;
  
    if (HasLocalization("POL")) then begin
    Document("Debtors Letter",DebtLetRClass,DebtorLetForm,DebtLetFClass,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Document("Счета пени",IIVRClass,IIInvForm,IIFClass,modSL);
  end;
  if (HasLocalization("POL") and HasVATZone) then begin
    Document("Внутренние счета-фактуры",IntIVRClass,IntIVForm,IntIVFClass,modSL);
  end;
  Document("Реализации",IVRClass,InvForm,InvFClass,modSL);
    if (HasLocalization("PRT")) then begin
    Document("Invoice/Receipt's",KIVRClass,CashInvRecPRTForm,CashRecPRTFClass,modSL);
  end;
  Document("Ведомость неоплаченных реализаций",ARSRClass,ARSForm,ARSFClass,modSL);
  Document("Ведомость расчетов с клиентами",CuPerRClass,CuPerForm,CuPerFClass,modSL);
  if (HasLocalization("POL")) then begin
    Document("Proforma Invoices",Inv1RClass,Inv1Form,Inv1FClass,modSL);
  end;
  Document("Платежные документы",IPDRClass,IPDForm,IPDFClass,modSL);
  if (HasLocalization("LTU,LVA,POL") or HasReminderLevel) then begin
    Document("Reminders",RemRClass,RemForm,RemFClass,modSL);
  end;
  if (HasLocalization("RUS")) then begin
    Document("Счета",ORRClass,OrdForm,OrdFClass,modSL);
  end;

  if (HasSalesmanBonus) then begin
    Report("Бонус по продавцу",BonusRClass,BonusRn,0,modSL); 
  end;
  Report("Список контактов",CURClass,CustRn,0,modSL);
  Report("Клиент/товар статистика",CuArtSTRClass,CuArtSTRn,0,modSL);
  Report("Статистика по клиенту",CustSTRClass,CustSTRn,0,modSL);
  if (HasEInvoicing) then begin
    Report("Статус электронных сч/ф",HTSStatIVRClass,HTSStatIVRn,0,modSL);
  end;
  if (HasVATZone) then begin
    Report("EU #VAT# Sales",SLEUVATRClass,SLEUVATRn,0,modSL);
  end;  
  if (HasLocalization("HRV,PRT")) then begin
    Report("Прибыль брутто, счета-фактуры",IVGPRClass,IVGPRn,0,modSL);
  end;
  if (HasLocalization("ITA")==false) then begin 
  Report("Журнал реализаций",IVJRClass,InvoiceRn,0,modSL);
  end; 
  Report("Список товаров",ArtRClass,ArtRn,0,modSL);
  Report("Статистика по товарам",ArtSTRClass,ArtSTRn,0,modSL);
  if (HasSalesmanBonus) then begin
    Report("Статистика по товару и продавцу",IStatRClass,IStatRn,0,modSL); 
  end;
  if (HasLocalization("LVA")) then begin
    Report("Legal Invoice Forms Usage",LegInvFormRClass,LegInvFormRn,0,modSL);
  end;
  Report("Журнал неоплаченных реализаций",ARS2RClass,ARS2Rn,0,modSL);
  if (HasLocalization("RUS")) then begin
    Report("Журнал счетов",ORJRClass,OrdRn,0,modSL);
    Report("Статус оплат по счетам",ORPayStatusRClass,ORPayStatusRn,0,modSL);
  end;
  Report("Ведомость расчетов с клиентами",CuPer2RClass,CuPerRn,0,modSL);
  if (HasLocalization("LVA") or HasPrepayments) then begin
    Report("История предоплат книги продаж",PerPayHisSLRClass,PerPayHisSLRn,0,modSL);
  end;
  if (HasPriceLists) then begin
    Report("Прейскуранты",PriceRClass,PriceRn,0,modSL);
  end;
  Report("Прогноз платежей",IPProgRClass,IPProgRn,0,modSL);
  Report("Журнал платежей клиентов",IPRClass,IPRn,0,modSL);
  Report("Дебиторская задолженность",ARRClass,ARRn,0,modSL);
  if (HasLocalization("ITA,PRT")) then begin
    Report("#VAT Code# Statistics",SLVATRClass,SLVATRn,0,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Customer Sales",RealCustRClass,RealCustRn,0,modSL);
  end;
  if (HasLocalization("POL")) and (HasModNL or HasIncomeAndExpenseBook) then begin
    Report("#VAT# Report Sales",SLVATRepRClass,SLVATRepRn,0,modSL);
  end;
  if (HasLocalization("ARG")) then begin
    Report("#VAT# Report Sales",SLVATArgRClass,SLVATArgRn,0,modSL);   //!!TRANSLATE
  end;
  if (HasLocalization("LTU")) then begin
    Report("Отчёт по НДС с продаж (Литва)",SLVATLitRClass,SLVATLitRn,0,modSL);  
  end;
  if (HasLocalization("HND")) then begin
    Report("Отчёт по НДС с продаж (Гондурас)",SLVATHonRClass,SLVATHonRn,0,modSL);  
  end;
  
  if (HasModNL) then begin
    if (HasLocalization("PRT")) then begin
      Maintenance("Transfer to Bad Debtors",BadCUVClass,BadCUMn,modSL);
    end;
  end;  
  if (HasEMail) then begin
    Maintenance("Создать Эл.почту ведомости расчетов с клиентами ",CUPerEmailVClass,CUPerEmailMn,modSL); // We have this belowe SendPerStatVClass
  end;
  if (HasModNL) and (HasLocalization("HRV")) then begin
//    Maintenance("Create #VAT# Corrections #S/L#",VATIVVClass,VATIVMn,modSL);
  end;
  if (HasLocalization("PRT")) then begin
   if (HasEMail) then begin
     Maintenance("SAFT через Электронную почту",SAFTtoEmailVClass,SAFTtoEmailMn,modSL);
   end;
  end;
    
  if (HasLocalization("PRT")) then begin
//    Export("Communication of Invoices to AT - SAFT",PortTaxXml2EClass,PortTaxXml2En,modSL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("EU Sales Export (Latvia)",LatEUSalesEClass,LatEUSalesEn,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("Продажи #VAT# ЕС (Литва)",SLEUVATLitECLass,SLEUVATLitEn,modSL); 
  end;
  if (HasLocalization("BRA")) then begin
    Export("Фискальная записка для Услуг",BraFiscalNoteEClass,BraFiscalNoteEn,modSL); 
  end;
  if (HasLocalization("LTU")) then begin
    Export("Счета-фактуры НДС (Литва)",LitVATRegIVEClass,LitVATRegIVEn,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modSL);
  end;  
  if (HasLocalization("NOR")) then begin
    Export("SAFT",NorTaxXmlEClass,NorTaxXmlEn,modSL); //!!TRANSLATE
  end; 
  if (HasLocalization("LVA")) then begin
    Export("#VAT# Declaration Annex #VAT#1-III (Latvia)",LatVATSalesEClass,LatVATSalesEn,modSL);
  end;
  if (HasBankImport) then begin
    Import("Банковский файл",RefIPIn,RefIPIn,modSL);
  end;
  if (HasLocalization("BRA")) then begin
    Import("Fiscal Note for Services Reply",0,BraFiscalNoteIn,modSL);
  end;
  
/* modPL */

  RegisterWS("Счета-фактуры поставщика","Счета-фактуры поставщика","Новый счёт-фактура поставщика",VIVc,modPL); 
  RegisterWS("Платежи","Платежи","Новый платёж",OPVc,modPL); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modPL); 

  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Setting("Настройки записей - расчеты с поставщиками",APAccTClass,modPL);
  end;
  if (HasLocalization("AUS,ESP,FIN,LVA,RUS") or HasEInvoicing) then begin
    Setting("Банки",BankLClass,modPL);
  end;
  if (HasLocalization("AUS,ESP,FIN,GBR,LVA,NOR,POL,SWE")) then begin
    Setting("Банковские файлы",BankFileTClass,modPL);
  end;
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Сч/ф поставщиков",VISerTClass,modPL);
    Setting("Серии номеров - платежи поставщикам",OPSerTClass,modPL);
    if (HasModNL or HasIncomeAndExpenseBook) and (HasLocalization("POL,HRV")) then begin
      Setting("Серии номеров - НДС коррекции #P/L#",VATVISerTClass,modPL);
    end;
  end;
  Setting("Способы оплаты",PMTClass,modPL);
  Setting("Условия оплаты",PDLClass,modPL);
  if (HasCategories) then begin
   Setting("Категории поставщиков",VGLClass,modPL);
  end; 
    if (HasLocalization("ARG,BRA,ITA,MEX,PRT,SGP,ZAF") and (HasWithholdingTax or HasWithholdingTaxAdvanced)) then begin
    Setting("Удержания поставщиков",WHVELClass,modPL); 
  end;
  if (HasModNL or HasIncomeAndExpenseBook) and (HasLocalization("POL,HRV")) then begin
    Setting("НДС коррекции #P/L#",VATVILClass,modPL);
  end;
  if (HasModNL or HasIncomeAndExpenseBook) and (HasLocalization("HRV")) then begin
    Setting("Типы НДС коррекции #P/L#",VATVITypeTClass,modPL);
  end;
  if (HasLocalization("ARG,BRA,ITA,MEX,PRT,SGP,ZAF") and (HasWithholdingTax or HasWithholdingTaxAdvanced)) then begin
    Setting("Формула расчета удержания",WHCalcFormLClass,modPL);
    end;
  if (HasLocalization("ARG,BRA,ITA,MEX,SGP,ZAF") and (HasWithholdingTax or HasWithholdingTaxAdvanced)) then begin
    Setting("Withholding Certificates",WHCertificateLClass,modPL);
  end;
  if (HasLocalization("ARG,BRA,ITA,KEN,MEX,PRT,SGP,ZAF") and (HasWithholdingTax or HasWithholdingTaxAdvanced)) then begin
    Setting("Удерживаемые налоги",WHTaxTClass,modPL);
  end;  

  Document("Открыть список неоплаченных счетов поставщика",APSRClass,APSForm,APSFClass,modPL);
  Document("Платежные документы",OPDRClass,OPDForm,OPDFClass,modPL);
  Document("Платежи",OPRClass,OPForm,0,modPL);
  if (HasLocalization("LTU")) then begin
    Document("Periodic #Supplier# Statement",VEPerRClass,VEPerForm,VEPerFClass,modPL); 
  end;
  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Document("Сч/ф поставщиков",VIRClass,VIForm,VIFClass,modPL);
  end;

  if (HasVATZone) then begin
    Report("EU #VAT# Purchases",PLEUVATRClass,PLEUVATRn,0,modPL); 
  end;
    Report("Отчёт о неоплаченных счетах-фактурах поставщика",APS2RClass,APS2Rn,0,modPL);
  Report("Прогноз платежей",OPProgRClass,OPProgRn,0,modPL);
  Report("Журнал платежей",OPJRClass,OPJRn,0,modPL);
  Report("Ведомость расчетов с поставщиками",VePer2RClass,VePerRn,0,modPL);
  if (HasLocalization("LTU,LVA")) then begin
    Report("Отчёт по НДС, прибыль и убытки",PLVAT2RClass,PLVAT2Rn,0,modPL); 
  end;
  if (HasLocalization("LTU,LVA") or HasPrepayments) then begin
    Report("Prepayment History #P/L#",PerPayHisPLRClass,PerPayHisPLRn,0,modPL);
  end;
  Report("Журнал сч/ф поставщиков",VIJRClass,VIJRn,0,modPL);
  Report("Кредиторская задолженность",APRClass,APRn,0,modPL);
  Report("Список поставщиков",VERClass,VERn,0,modPL);
  if (HasLocalization("ARG")) then begin
    Report("#VAT# Report Purchases",ArgPurchVATRClass,ArgPurchVATRn,0,modPL); //!!TRANSLATE
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("LTU,LVA,POL")) and (HasModNL or HasIncomeAndExpenseBook) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# #Supplier# Покупки",RealSuppRClass,RealSuppRn,0,modPL); 
  end;
  if (HasLocalization("HND")) then begin
    Report("Отчёт по НДС с закупок (Гондурас)",PLVATHonRClass,PLVATHonRn,0,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Report("Отчёт по НДС с закупок (Литва)",PLVATLitRClass,PLVATLitRn,0,modPL);
  end;
  
  if (HasLocalization("AUS,ESP,FIN,GBR,LVA,NOR,POL,SWE")) then begin
    Export("Банковский файл",MPEClass,MPEn,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#P/L# #VAT# Invoices (Lithuania)",LitVATRegVIEClass,LitVATRegVIEn,modPL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#P/L# Latvian #VAT# Report",PLVAT1ExpEClass,PLVAT1En,modPL);
    Export("#VAT# Purchases (Latvia)",LatVATPurchasesEClass,LatVATPurchasesEn,modPL);
  end;
    
  if (HasModNL) and (HasLocalization("HRV")) then begin
    Maintenance("Create #VAT# Corrections #P/L#",VATVIVClass,VATVIMn,modPL);
  end;

/* modNL */
  
  if (HasModNL==false) then begin
    if (HasIncomeAndExpenseBook) then begin
      RegisterWS("Счета","Счета","Новый счёт",AccVc,modNL); 
      RegisterWS("Записи операций","Записи операций","Новая запись",TRVc,modNL); 

      Setting("Финансовые года",YearTClass,modNL);
      Setting("Книга приходов и расходов",IncExpBookLClass,modNL); 
      if (HasNumberSeries) then begin
        Setting("Серии номеров - Записи операций",TRSerTClass,modNL); 
      end;
      if (HasIntegratedNL) then begin
      Setting("Подсистемы",TRGenTClass,modNL); 
      end;
      if (HasLocalization("POL")) then begin
        Setting("Tax Reporting Settings",TaxRepCUTClass,modNL); //!!TRANSLATE
      end;
      if (HasLocalization("BRA,CAN,HRV,LVA,KEN,POL,USA")) then begin
        Setting("Tax Rules",TaxRulesLClass,modNL); //!!TRANSLATE
      end;
      Setting("Коды НДС",VATCodeTClass,modNL); 

      Report("Книга приходов и расходов",IncExpBookRClass,IncExpBookRn,0,modNL); 
    end;
  end else begin
    RegisterWS("Записи операций","Записи операций","Новая запись операций",TRVc,modNL); 
    if (HasLocalization("AGO,PRT")) then begin
      RegisterWS("Симуляции","Симуляции","Новая симуляция",SMVc,modNL);   
    end;
  //  Register("Выверка счетов","Выверка счетов",BankRecWClass,modNL);
    if (HasAccountRecon) then begin
      Register("Выверка счетов","Выверка счетов",BankRecWClass,modNL);
    end;
    if (HasLocalization("AUS")==false) then begin
      RegisterWS("Начальные сальдо","Начальные сальдо","Новое начальное сальдо",FBVc,modNL); 
    end;   
    RegisterWS("Счета","Счета","Новый счёт",AccVc,modNL); 
    if (HasNLBudget) then begin
      RegisterWS("Бюджеты","Бюджеты","Новый бюджет",Bud1Vc,modNL); 
      RegisterWS("Пересмотр. бюджеты","Пересмотр. бюджет","Новый пересмотренный бюджет",Bud2Vc,modNL); 
    end;

    if (HasLocalization("AGO,POL,PRT")) then begin
      Setting("Account Transfers",AccTransLClass,modNL);
    end;
    if (HasBankImport) then begin 
      Setting("Банковские файлы",BankFileTClass,modNL);     
    end;
    if (HasNLBudget) then begin
      Setting("Показатели бюджета",BFLClass,modNL); 
    end;
    Setting("Финансовые года",YearTClass,modNL);
    if (HasLocalization("NOR")) then begin
      Setting("Electronic #VAT# Declaration",EVATDeclTClass,modNL); //!!TRANSLATE
    end;
    if (HasIncomeAndExpenseBook) then begin
      Setting("Income & Expense Book",IncExpBookLClass,modNL);
    end;
    if (HasNumberSeries) then begin
      Setting("Серии номеров - Записи операций",TRSerTClass,modNL);
    end;
    if (HasObjects) then begin
      Setting("Объекты",ObjLClass,modNL);
      Setting("Контроль типов объектов",OTCheckTClass,modNL); 
      Setting("Типы объектов",OTLClass,modNL);
    end;
//    if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
//      Setting("Rate Gain/Loss",NLRateTClass,modNL);
//    end;
    if (HasLocalization("USA")) then begin
      Setting("Банковские операции",BankTRLClass,modNL); 
    end;
    if (HasAdvancedAccounting) then begin
      Setting("Представление сальдо",AGrTClass,modNL); 
    Setting("Настройки отчетов",Rs2WClass,modNL);
    end;
    if (HasIntegratedNL) then begin
    Setting("Записи из подсистем",TRGenTClass,modNL);
    end;
    Setting("Контрольные счета записей подсистем",SLAccTClass,modNL);
    if (HasLocalization("POL")) then begin
      Setting("Tax Reporting Settings",TaxRepCUTClass,modNL); //!!TRANSLATE
    end;
    if (HasLocalization("HRV,LVA")) then begin
      Setting("Tax Reports",TaxRepLClass,modNL);
    end;
    if (HasLocalization("BRA,CAN,HRV,LVA,KEN,POL,USA")) then begin
      Setting("Tax Rules",TaxRulesLClass,modNL);
    end;
    if (HasLocalization("CAN,BRA,HRV,LVA,KEN,USA")) then begin
      Setting("Шаблон налога",TaxTemplateLClass,modNL);
      if (HasTaxMatrix or HasAdvancedAccounting or HasLocalization("HRV")) then begin
      Setting("Настройки проводок",TrTClass,modNL);
      end;
    end;
    Setting("Коды НДС",VATCodeTClass,modNL);
    
    if (HasLocalization("NOR")) then begin
      Setting("#VAT# Declarations",VATDeclLClass,modNL); //!!TRANSLATE
    end;
    
    if (HasLocalization("HRV,LVA")) then begin
      Document("Tax Report",TaxDocRClass,TaxRepForm,TaxRepFClass,modNL);
    end;
    Document("Записи операций",TRRClass,TRForm,TRFClass,modNL);
  
    if (HasAccountRecon) then begin
      Report("Выверка счетов",ACReconRClass,ACRecRn,0,modNL);
    end;

    if (HasLocalization("AGO,BRA,LVA,POL,PRT")) then begin
      Report("Analytical Balance",MBARClass,MBARn,0,modNL);
    end;
    Report("Баланс",BalRClass,BalRn,UserDefRepDClass,modNL);
    if (HasNLBudget) then begin
      Report("Журнал бюджетов",BudgJRClass,BudgJRn,0,modNL); 
    end;
    Report("План счетов",AccListRClass,AccListRn,0,modNL);
    Report("Список исправлений",CorrRClass,CorrRn,0,modNL);
    if (HasLocalization("LTU,LVA")) then begin
      Report("Corresponding Accounts",CorspRClass,CorspRn,0,modNL);
    end;
    if (HasMultiCurrency) then begin
      Report("Currency A/C Rate Change",NLRateRClass,NLRateRn,0,modNL);
    end;
    if (HasIncomeAndExpenseBook) then begin
      Report("Income & Expense Book",IncExpBookRClass,IncExpBookRn,0,modNL);
    end;
    if (HasLocalization("LTU") and HasIntegratedNL) then begin
      Report("iSAF",LitiSAFRClass,LitiSAFRn,0,modNL); //!!TRANSLATE
    end;
    if (HasMultiCurrency) then begin
      Report("Multicurrency Accounts Rate Difference",MultiCurAccRClass,MultiCurAccRn,0,modNL);
    end;
      Report("#N/L# Transfer, Subsystems",StdTransGenRClass,TransGenRn,0,modNL);
    Report("#Главная книга#",MainRClass,MainRn,0,modNL);
    Report("Прибыль и убытки",ResRClass,ResRn,UserDefRepDClass,modNL);
    if (HasNLBudget) then begin
      Report("Журнал пересмотренных бюджетов",RevBudgJRClass,RevBudgJRn,0,modNL); 
    end;
    if (HasLocalization("LVA")) then begin
      Report("Tax Calculations", Tax100Class,Tax100Rn,0,modNL);
      Report("Test Corresponding Rules",CorstRClass,CorstRn,0,modNL);
    end;
    Report("Журнал операций",TransRClass,TransRn,0,modNL);
    Report("Проверочный баланс",SBRClass,TrialRn,0,modNL);
    if (HasLocalization("POL,PRT")==false) then begin
      Report("Отчёт по НДС, сводный",ALLVATRClass,ALLVATRn,0,modNL);
    end;
    if (HasLocalization("POL")==false) then begin
      Report("Декларация по НДС",VATRClass,VAT2Rn,UserDefRepDClass,modNL);
    end;    

    if (HasLocalization("FRA")) then begin
      Export("Экспорт FEC",FrenchFECEClass,FrenchFECEn,modNL);
    end;
    if (HasLocalization("LTU") and HasIntegratedNL) then begin
      Export("iSAF",LitTaxXmlEClass,LitTaxXmlEn,modNL); //!!TRANSLATE
    end;
    if (HasLocalization("SGP")) then begin
      Export("Файл аудита IRAS",GenIRASEClass,IRASAuditEn,modNL);
    end;
    Export("Ежемесячные балансы",MBEClass,MBEn,modNL);
    if (HasLocalization("SWE")) then begin
      Export("SIE (Swedish Export/Import)",SieEClass,SieEn,modNL);
    end;
    Export("Проверочный баланс",SBEClass,SBEn,modNL);
    if (HasLocalization("PRT")) then begin
      Export("SAFT (Португалия)",PortTaxXmlEClass,PortTaxXmlEn,modNL);
    end;  
    if (HasLocalization("NOR")) then begin
      Export("SAFT",NorTaxXmlEClass,NorTaxXmlEn,modNL); //!!TRANSLATE
    end;
    if (HasLocalization("LTU") and HasIntegratedNL) then begin
    Export("SAFT",LitSAFTTaxXmlEClass,LitSAFTTaxXmlEn,modNL); //!!TRANSLATE
  end;
    if (HasLocalization("LVA")) then begin
      Export("Ежегодная декларация НДС (Латвия)",LatAnnualVATEClass,LatAnnualVATEn,modNL); 
      Export("Периодическая декларация НДС (Латвия)",LatPeriodicVATEClass,LatPeriodicVATEn,modNL); 
    end;
  if (HasLocalization("LTU")) then begin
    Export("Периодическаая декларация #VAT# (Литва)",LTUVATEClass,LTUVATEn,modNL);
    end;  
    if (HasLocalization("USA,CAN")) then begin
      Import("Декларация American Express",AmexStatementIClass,AmexStatementIn,modNL);   
    end;  
    if (HasLocalization("USA")) then begin
      Import("Банковский файл",RefIPIn,RefIPIn,modNL);
    end;  
    if (HasLocalization("SWE")) then begin
      Import("SIE (Швеция)",0,SieIn,modNL);
    end;  

    if (HasNLBudget) then begin
      Maintenance("Пересмотренный бюджет из записи бюджета",Bud2FromBud1VClass,Bud2FromBud1Mn,modNL); 
    end;
    if (HasLocalization("AGO,POL,PRT")) then begin
      Maintenance("Трансфер баланса на счёте",AccTransVClass,AccTransMn,modNL);
    end;
  end;
  if (HasLocalization("POL")) then begin
    Export("Unified Export",PolUnifiedExportEClass,PolUnifiedExportEn,modNL); //!!TRANSLATE
  end;
  
/* modSY */

  if (HasModSL==false) then begin
    if (HasLocalization("RUS")) then begin
      RegisterWS("Счета клиентам","Счета клиентам","Новый счёт клиенту",ORVc,modSY); 
    end else begin
      RegisterWS("Счета-фактуры","Счета-фактуры","Новый счёт-фактура",IVVc,modSY); 
    end;
    RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modSY); 
    RegisterWS("Товары","Товары","Новый товар",INVc,modSY); 
  end;
  if (HasDeveloperMode or HasPersons) then begin
  end;
  if ((ClientMode and LicenseMode==kLicenseModeServer) or HasPersons or HasDeveloperMode) then begin
    RegisterWS("Сотрудники","Сотрудники","Новый сотрудник",UserVc,modSY); 
  end else begin
    RegisterWS("Персоны","Персоны","",UserVc,modSY); 
  end;
  
  
  if (HasMultiCurrency or HasBase2) then begin
    RegisterWS("Валюты","Валюты","Новая валюта",CurncyCodeVc,modSY);  
  end;
  if (HasMultiCurrency) then begin
    RegisterWS("Курсы обмена","Курсы обмена","Курс обмена",ERVc,modSY); 
  end;
  if (HasFormEditor) then begin
    if (GuiType!=kGuiiPhone) then begin
      RegisterWS("Формы","Формы","Новая форма",DocVc,modSY); 
    end;
    RegisterWS("Стили","Стили","Новый стиль",StyleVc,modSY); 
  end;
  if (HasModSL==false) then begin
    if (HasModNL or HasIncomeAndExpenseBook) then begin
      RegisterWS("Счета","Счета","Новый счёт",AccVc,modSY);   
    end;
  end;

  if (HasDeveloperMode) then begin
    Setting("URL кэш электронного обучения",UniversityURLCacheLClass,modSY);  
    Setting("URL кэш электронного обучения (TX)",UniversityURLTXCacheLClass,modSY);
    Setting("IP сервер интернет сервиса",EnabServerTClass,modSY);
    Setting("Кэш служб",ServiceCacheLClass,modSY);
  end;

  if (HasAccessGroups) then begin
    Setting("Группы доступа",AccessLClass,modSY);
  end;
  if (LicenseMode==kLicenseModeServer or ClientMode) then begin
    Setting("Активные пользователи",ListUsersClass,modSY);
  end;
//  if (HasBase2 or (HasEInvoicing and HasLocalization("NOR,SWE"))) then begin
  if (HasBase2) then begin
    Setting("Основная валюта",BaseCurTClass,modSY);
  end;
  if (HasBase2) then begin
    Setting("Курсы основных валют",BaseERLClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Brazilian Invoice Types",BrazilEInvTypeLClass,modSY);
  end;
  Setting("Компании",CompaniesTClass,modSY);
  if (HasStandardCRM or HasStandardCommunicator or HasStandardOrganizer) then begin
    Setting("Формат даты и чисел компании",SysFormatTClass,modSY);
  end;
  Setting("Информация о компании",CYWClass,modSY);
  if (HasContactClassification and HasModSL==false) then begin
    Setting("Классификации контакта",CClassLClass,modSY);
  end;
  if (HasMultiCurrency or HasBase2) and (HasIntegratedNL) then begin
    Setting("Конвертация - Основная",ConvMasterTClass,modSY);
    Setting("Конвертация - Счета и коды НДС",ConvAccTClass,modSY);
    Setting("Конвертация - Контакты",ConvCustTClass,modSY);
    Setting("Конвертация - Коды валют",ConvCurncyCodeTClass,modSY);
    Setting("Конвертация - Товары",ConvItemTClass,modSY);
    Setting("Конвертация - Пользователи",ConvUserTClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Districts",DistrictLClass,modSY);
  end;
  if (IsUsingActivationCodes) then begin
    Setting("Интернет ключи",InternetEnablerTClass,modSY);
  end;
  if (HasModSL==false) then begin
    if (HasModNL or HasIncomeAndExpenseBook) then begin
      Setting("Account Usage",AccTClass,modSY);
    end else begin
      Setting("Настройки счетов",AccTClass,modSY);
    end;
  end;
  if (HasModSL==false and HasLocalization("PRT")) then begin
    Setting("Группы товаров",ITLClass,modSY);
  end;
  if (HasLocalMachines or HasFiscalPrinter) then begin
    Setting("Локальная машина",LocalMachineTClass,modSY);
  end;
  if (HasFiscalPrinter) then begin
    Setting("Локальные машины",LocalMachineLClass,modSY);
    if (HasLocalization("SVN")==false) then begin
    Setting("Локальные устройства (порт COM)",LSerialPortDeviceLClass,modSY);
    Setting("Устройства на локальной машине (порт COM)",SerialPortDeviceLClass,modSY);
    end;
  end;
  if (HasKPIs) then begin
    Setting("KPIs",KPIDefLClass,modSY);
  end;
   if (HasLanguages) then begin
    Setting("Языки",LangTClass,modSY); 
  end;
  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Setting("Закрытие периодов",DBLockTClass,modSY);
  end;
  if (HasFiscalPrinter and HasLocalization("SVN")) then begin
    Setting("Главная предпосылка",CYAWClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Муниципалитеты",MunicipalityLClass,modSY);
  end;
  if (HasLocalization("FIN")) then begin
    Setting("Optional Features",UXFTClass,modSY); 
  end;
  if (HasObjects and (HasModNL==false and HasIncomeAndExpenseBook==false)) then begin
    Setting("Объекты",ObjLClass,modSY);
    Setting("Типы объектов",OTLClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Типы операций",OperationTypeLClass,modSY);
  end;
  if (HasModSL==false) then begin
    Setting("Условия оплаты",PDLClass,modSY);
  end;
  if (HasPriceLists) then begin
    Setting("Прейскуранты",PLDefLClass,modSY);
    Setting("Цены",PLLClass,modSY);
  end;
 
  Setting("Отчётные периоды",PeriodTClass,modSY);
  Setting("Округление",RoundTClass,modSY); 
  Setting("Единицы изм.",UnitLClass,modSY);
  //Setting("Values in Text",LangNrLClass,modSY);
  //Setting("Test Function Tags",WindowTagTestClass,modSY);
  if (HasLanguages) then begin
    Setting("Значения в тексте",LangNrLClass,modSY);
  end;
  if (HasModNL==false and HasIncomeAndExpenseBook==false) then begin
    Setting("Коды НДС",VATCodeTClass,modSY); 
  end;
  if ((HasNumberSeries or HasLocalization("LVA")) and (HasOfficialSerNr or HasInvoiceOfficialSerNr)) or (HasFiscalPrinter and HasLocalization("SVN")) then begin
    Setting("Официальные серии номеров",LegalInvNrTClass,modSY);
  end;  
  if (HasLocalization("PRT")) then begin
    Setting("Группы товаров",ITLClass,modSY);
  end;
  if (HasLocalization("HRV,SRB")) then begin
    Setting("Настройки XML",XMLExportLClass,modSY);
  end;
  
  Report("Информация о компании",CompInfoRClass,CompInfoRn,0,modSY);
  if (HasModSL==false) then begin
    Report("Список клиентов",CURClass,CustRn,0,modSY);
    if (HasMultiCurrency or HasBase2) then begin
      Report("Курсы обмена",ERDateRClass,ERDateRn,0,modSY);
    end;
    if (HasLocalization("RUS")) then begin
      Report("Журнал счетов",ORJRClass,OrdRn,0,modSY);
    end else begin
      Report("Журнал реализаций",IVJRClass,InvoiceRn,0,modSY);
    end;
    Report("Список товаров",ArtRClass,ArtRn,0,modSY);
      if (HasLocalization("LTU")) then begin
      Report("#VAT# Report Sales (Lithuania)",SLVATLitRClass,SLVATLitRn,0,modSY);  
    end;
end else begin
    if (HasMultiCurrency or HasBase2) then begin
      Report("Курсы обмена",ERDateRClass,ERDateRn,0,modSY);
    end;
  end;

  if (HasRegistersExports) then begin
    Export("Основные регистры",GBaseEClass,GBaseEn,modSY);
  end;
    if (GuiType!=kGuiiPhone) then begin
      Export("Текстовая копия БД",TBDatabaseEClass,DatabaseTBEn,modSY);
  end;
  if (HasRegistersExports) then begin
    Export("Основные регистры по товарам",GItemBaseEClass,GItemBaseEn,modSY);
    end;
    if (HasLocalization("HRV")) then begin
    Export("Register Export",ExpRegEClass,ExpRegEn,modSY);
    end;
  //Export("Контакты",TBRemoteEClass,RemoteTBEn,modSY);
  if (GuiType!=kGuiiPhone) then begin
    Export("Запланированное резервное копирование",TBRunTimedEClass,RunTimedTBEn,modSY);
    end;
  if (HasRegistersExports) then begin
    Export("Системные данные",SysEClass,SysEn,modSY);
    end;
  if (HasModSL==false) then begin
    if (HasLocalization("PRT")) then begin
      Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modSY);
    end;    
    if (HasLocalization("NOR")) then begin
      Export("SAFT",NorTaxXmlEClass,NorTaxXmlEn,modSY); //!!TRANSLATE
    end;    
    if (HasLocalization("LTU")) then begin
      Export("#S/L# #VAT# Invoices (Lithuania)",LitVATRegIVEClass,LitVATRegIVEn,modSY);
    end;
  end;
  if (HasRegistersExports) then begin
    Export("Регистры Записей операций",GTransEClass,GTransEn,modSY); 
    Export("Регистры Записей операций (период)",GTrans2EClass,GTrans2En,modSY);
  end;
  
  Import("Автоматически",0,FullyAutIn,modSY);
  Import("Найти файл...",0,AutIn,modSY);
  Import("Удаленная копия БД",RemoteInIClass,RemoteIn,modSY);
  
//  if (HasModIN or HasModSL or HasModPL or HasModPOS or HasModAT2 or HasModCL or HasModExp or HasModPO) and (HasModNL) then begin
  if (HasIntegratedNL) then begin
  Maintenance("Создать записи операций",TransGenVClass,GenTransMn,modSY);
  end;
  if (HasLocalization("HRV")) then begin
    Maintenance("XML Export",XMLExportVClass,XMLExportMn,modSY);
  end;
  if (HasLocalization("POL")) then begin
    Maintenance("Fill-in Invoice No.",FillinIVNrVClass,FillinIVNrMn,modSY);
    Maintenance("Fill-in Receipt No.",FillinIPNrVClass,FillinIPNrMn,modSY);
  end;
//  Maintenance("Restore Application",ResetDBWClass,0,modSY);
  if (ClientMode) then begin
    Maintenance("Системное сообщение",SysMessVClass,SysMessMn,modSY); // Must have ONE, otherwise it crashes.... goes for all these types...
  end;
//  if (ClientMode) then begin 
//    Maintenance("",SubscriptionInvitationVClass,SubscriptionInvitationMn,modSY);
//  end;
  if (ClientMode and HasServerInCloud) then begin  
    Maintenance("Загрузить файл логотипа",UploadLogoFileVClass,UploadLogoFileMn,modSY);   
  end;

/* modSO */
  
  RegisterWS("Счета клиентам","Счета клиентам","Новый счёт клиенту",ORVc,modSO); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modSO); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modSO); 
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT")) then begin
    RegisterWS("Группы товаров","Группы товаров","Новая группа товаров",ITVc,modSO); 
  end;
  if (HasPriceLists) then begin
    RegisterWS("Цены","Цены","Новая цена",PLVc,modSO); 
  end;

  if (HasModIN) then begin
    Setting("Условия отгрузки",ShipDealLClass,modSO);
  end;
  if (HasDownpayments) then begin
    Setting("Предоплаты",DownPayTClass,modSO);
  end;
  if (HasLocalization("LVA,PRT")) then begin
    Setting("Транспортные компании",FreightCompanyLClass,modSO);
  end;
  if (HasModSL==false) then begin
    Setting("Настройки реализации",AccTClass,modSO);
  end;
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Счета клиентам",ORSerTClass,modSO);
  end;
  Setting("Условия оплаты",PDLClass,modSO);
  Setting("Запланированная отгрузка",PlanDeliveryTClass,modSO);
  if (HasPriceLists) then begin
    Setting("Прейскуранты",PLDefLClass,modSO);
  end;
  Setting("Единицы измерения",UnitLClass,modSO);
  
  Document("Счета",ORRClass,OrdForm,OrdFClass,modSO);
  
  if (HasModIN) then begin
    Report("Невыполненная отгрузка",ShipableRClass,ShipableRn,0,modSO);
    Report("Список отгрузки",DeliveryRClass,DeliveryRn,0,modSO);
  end;
  Report("Валовая прибыль, Счета",ORGPRClass,ORGPRn,0,modSO);
  Report("Список товаров",ArtRClass,ArtRn,0,modSO);
  Report("Журнал счетов",ORJRClass,OrdRn,0,modSO);
  Report("Заказанные товары",OrdItemRClass,OrdItemRn,0,modSO);
  Report("Статус счёта",ORInfoRClass,ORInfoRn,0,modSO); 
  if (HasModIN) then begin
    Report("Незавершенные счета",OrderStockRClass,OrderStockRn,0,modSO);
  end;
  
/* modIN */
  
  if (HasModSO or HasLocalization("RUS") or HasLocalization("HRV")) then begin
    RegisterWS("Отгрузки","Отгрузки","Новая отгрузка",SHVc,modIN); 
  end;
  RegisterWS("Поступления","Поступления","Поступления",PUVc,modIN); 
  RegisterWS("Списания со склада","Списания со склада","Новое списание со склада",SDVc,modIN); 
    RegisterWS("Инвентаризации","Инвентаризации","Новая инвентаризация",StockTakeVc,modIN); 
    RegisterWS("Товары","Товары","Новый товар",INVc,modIN); 
    if (HasReturnedGoods) then begin
      RegisterWS("Возвраты товаров","Возвраты товаров","Новый возврат",RetVc,modIN); 
    end;
    if (HasRetGoodsToSupp) then begin
      RegisterWS("Возвраты товаров поставщикам","Возвраты товаров поставщикам","Новый возврат",RetPUVc,modIN); 
  end;
  if (HasMultiLocations) then begin 
    RegisterWS("Склады","Склады","Новые склады",LocationVc,modIN); 
    RegisterWS("Перемещения товаров","Перемещения товаров","Новое перемещение товаров",StockMovVc,modIN); 
  end;
  
  Setting("Штрих коды",BarcodeLClass,modIN);  
  if (HasLocalization("HRV")) then begin 
    Setting("Base Price Changes",BPCLClass,modIN);
  end;
  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Setting("Настройки записей склад",INAccTClass,modIN); 
  end;
  if (HasModCRM) then begin
    Setting("Контакты",CULClass,modIN); 
  end;
  Setting("Учет стоимостей",CostAccTClass,modIN);
  if (HasLocalization("PRT")) then begin 
    if (HasETaxDocuments) then begin
      Setting("Electronic Shipment",EShipPRTTClass,modIN);
    end;
  end;
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT")) then begin
    Setting("Группы товара",ITLClass,modIN);
  end;
  if (HasLocalization("PRT")) then begin 
    Setting("Товары",INLClass,modIN);
  end;
  if (HasVarieties) then begin
    Setting("Варианты товара",VARLClass,modIN);
    Setting("Группы вариантов товара",VARGLClass,modIN);
  end;
  if (HasNumberSeries) then begin
    if (HasModSO) then begin
      Setting("Серии номеров - Отгрузки",SHSerTClass,modIN);
    end;
    if (HasNumberSeries) then begin 
      if (HasReturnedGoods) then begin
      Setting("Серии номеров - Returned Goods",RetSerTClass,modIN);
      end;
      if (HasRetGoodsToSupp) then begin
      Setting("Серии номеров - Возвраты товаров поставщику",RetPUSerTClass,modIN);
      end;
    end;
    Setting("Серии номеров - Поступления",PUSerTClass,modIN);
    Setting("Серии номеров - Списание со склада",SDSerTClass,modIN);
    if (HasNumberSeries) then begin 
      if (HasMultiLocations) then begin 
        Setting("Серии номеров - Перемещения",StockMovSerTClass,modIN);
      end;
    end;
    Setting("Серии номеров - Инвентаризация",StockTakeSerTClass,modIN);
  end;
  if (HasLocalization("PRT")) then begin 
    Setting("Optional features",OFTClass,modIN);
  end;
  if (HasMultiLocations) then begin 
    Setting("Настройки склада",MainStockTClass,modIN);
  end;
  if (HasVarieties) then begin
    Setting("Variety Masks",VARMaskTClass,modIN);
    Setting("Variety Sets",VARMasksLClass,modIN);
    Setting("Variety Settings",VarietyTClass,modIN);
    Setting("Variety Subsets",VARSubsetsLClass,modIN);
  end;

  if (HasModSO or HasLocalization("RUS")) then begin
    if (HasModSO) then begin
      Document("Этикетки адреса",AdrLabRClass,AdrLabForm,AdrLabFClass,modIN);
      Document("Накладные",Sh1RClass,Sh1Form,Sh1FClass,modIN);
      Document("Этикетки груза",SHLabRClass,SHLabForm,SHLabFClass,modIN);
    end else begin
        if (HasLocalization("RUS")) then begin 
          Document("Накладные",Sh1RClass,Sh1Form,Sh1FClass,modIN);
        end;
    end;
  end else begin
    if (HasLocalization("HRV")) then begin
      Document("Base Price Change",BasePriceChangeRClass,BPChangeForm,BasePriceChangeFClass,modIN);
      Document("Delivery Notes",Sh1RClass,Sh1Form,Sh1FClass,modIN);
    end;
  end;
  Document("Этикетки поступлений",PULabRClass,PULabForm,PULabFClass,modIN);
  Document("Поступления",PurchaseRClass,PurchaseForm,PurchaseFClass,modIN);
  Document("Этикетки товаров",ItemLabelRClass,ItemLabelForm,ItemLabelFClass,modIN);
  if (HasModSO or HasLocalization("RUS")) then begin
    Document("Лист сборки",Sh2RClass,Sh2Form,Sh2FClass,modIN);
  end;
  if (HasReturnedGoods) then begin
    Document("Возвраты товаров",RetRClass,RetForm,RetFClass,modIN); 
  end;
  if (HasRetGoodsToSupp) then begin
    Document("Возвраты товаров поставщику",RetPURClass,RetPurchaseForm,RetPUFClass,modIN); 
  end;
  Document("Списание со склада",SDRClass,SDForm,SDFClass,modIN);
  if (HasLocalization("HRV") or (HasModIN and HasMultiLocations)) then begin
    Document("Перемещения",StockMovRClass,StockMovForm,StockMovFClass,modIN);
  end;
  if (HasConsStockMoveInvoices) then begin
    Document("Склад Движение сч.-ф.",StockMovInvRClass,StockMovInvForm,StockMovInvFClass,modIN);
  end;
  
  if (HasModPO or HasModSO) then begin
  Report("Нормативы остатков склада",PurRClass,PurRn,0,modIN);
  end;
  if (HasModSO) then begin
    Report("Журнал отгрузки",SHJRClass,ShipRn,0,modIN);
    Report("Список отгрузки",SHListRClass,ShipListRn,0,modIN);
  end;
  Report("Журнал поступлений",PUJRClass,PUJRn,0,modIN);
  Report("История товаров",INrsRClass,INrsRn,0,modIN);
  Report("Список товаров",ArtRClass,ArtRn,0,modIN);
  if (HasReturnedGoods) then begin
    Report("Журнал возвратов",RetJRClass,RetGoodsJRn,0,modIN); 
  end;
  if (HasRetGoodsToSupp) then begin
    Report("Журнал возвратов",RetPUJRClass,RetPUJRn,0,modIN); 
  end;
  if (HasSerialNumbers) then begin
    Report("История серийных номеров",SerialNrRClass,SerialNrRn,0,modIN); 
  end;
  Report("Журнал списаний со склада",SDJRClass,StockDepRn,0,modIN);
  Report("Журнал по складу",StockJInRClass,StockInRn,0,modIN);
  Report("Список складов",INRClass,InvValRn,0,modIN);
  Report("Журнал отсутствия товаров",StockJOutRClass,StockOutRn,0,modIN);
  Report("Сравнение инвентаризации",STCompRClass,STCompRn,0,modIN);
  Report("Перечень инвентаризации",StockTakeRClass,StockTakeRn,0,modIN);
  Report("Статистика поставщик/товар",VeInRClass,VeInRn,0,modIN);
  if (HasLocalization("LTU")) then begin
    Report("iVAZ",LitiVAZRClass,LitiVAZRn,0,modIN); //!!TRANSLATE
  end; 

  Maintenance("Сравнение инвентаризации",STCompVClass,STCompMn,modIN);
  if (HasModProd) then begin
    Maintenance("Обновить рецепты",UpdRecepyVClass,UpdRecepyMn,modIN); 
  end;
  if (HasMultiLocations) then begin 
    Maintenance("Настроить дополнительные склады",ConvToMultiLocationVClass,ConvToMultiLocationMn,modIN);
  end;
  if (HasLocalization("PRT")) then begin
    Export("Список Инвентарь для Налоговых Органов",PRTInventoryEClass,PRTInventoryEn,modIN);  
  end;
  if (HasLocalization("LTU")) then begin
    Export("iVAZ",LitiVAZEClass,LitiVAZEn,modIN); //!!TRANSLATE
  end;
/*
  if (HasLocalization("PRT")) then begin
    Export("SAFT Stock",PortStockXmlEClass,PortStockXmlEn,modIN);
  end;
*/
/*modPO*/

  RegisterWS("Заказы поставщикам","Заказы поставщикам","Новый заказ поставщику",POVc,modPO); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modPO); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modPO); 

  if (HasModIN) then begin
    Setting("Условия доставки",ShipDealLClass,modPO);
  end;
  if (HasCategories) then begin
    Setting("Категории поставщика",VGLClass,modPO);
  end;
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Заказы поставщикам",POSerTClass,modPO);
  end;

  if (HasModIN) then begin
  Report("Нормативы остатков склада",PurRClass,PurRn,0,modPO);
  end;
  Report("Отчёт по заказам поставщикам",POOrdStockRClass,POOrdStockRn,0,modPO);  
  Report("Журнал заказов поставщикам",PurOrdJRClass,PurOrdJRn,0,modPO);

  Document("Заказы поставщикам",PORClass,POForm,POFClass,modPO); 

/* modQT */
  RegisterWS("Коммерческие предложения","Коммерческие предложения","Новое комм. предложение",QTVc,modQT); 
  if (HasModCRM) then begin
    RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modQT); 
  end;
  RegisterWS("Товары","Товары","Новый товар",INVc,modQT); 
  if (HasPriceLists) then begin
    RegisterWS("Цены","Цены","Новая цена",PLVc,modQT); 
  end;
  //Register("Pre Quotations","Pre Quotations",PreQTVc,modQT); no funcionality for this one
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Коммерческие предложения",QTSerTClass,modQT);
  end;
  if (HasPriceLists) then begin
    Setting("Прейскуранты",PLDefLClass,modQT);
  end;  
  Setting("Классы коммерческих предложений",QuoteClassTClass,modQT);
  if (HasAdvancedCRM) then begin
  Setting("Quotation Settings",QTSettTClass,modQT);
  end;

  Document("Quotations",QTRClass,QTForm,QTFClass,modQT);
  if (HasLocalization("PRT")) then begin
    Document("Proforma Invoice, Quotations",ProformaQTRClass,ProformaQTForm,ProformaQTFClass,modQT);
  end;
  
  if (HasLocalization("PRT")) then begin
    Report("Proforma Invoice Journal",ProformaIVJRClass,ProformaIVJRn,0,modQT);
  end;
  Report("Журнал подтвержденных предложений",QTHistoryRClass,QTHstRn,0,modQT);
  Report("Список предложений",QTStkRClass,QTStkRn,0,modQT);
  Report("Воронка продаж",QTPipelineRClass,QTPipelineRn,0,modQT);
  Report("Журнал коммерческих предложений",QTJRClass,QTJRn,0,modQT);

/*modPOS*/

  if (HasLocalization("PRT")==false) then begin 
//in Portugal they using SL tocugh screen, POS Invoices not certified yet
    RegisterWS("Сч/ф кассового терминала","Сч/ф кассового терминала","Новый сч/ф кассового терминала",NPTSIVCashLClass,modPOS); 
  end;
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modPOS); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modPOS); 
  RegisterWS("Остатки по кассе","Остатки по кассе","Новый остаток по кассе",CashierBalVc,modPOS); 
  
  Setting("Cash Events",CashLClass,modPOS);
  Setting("Default Payment Modes",DefCashTClass,modPOS);
  Setting("Drawers",DrawerLClass,modPOS); 
  if (HasLocalization("BRA,ZWE")) then begin
    Setting("#VAT# Коды, фискальный принтер (Зимбабве)",ZimFiscalPrinterVATCodeTClass,modPOS);
  end;
  Setting("Invoice Settings",AccTClass,modPOS);
  if (HasItemClassification) then begin
    Setting("Классификации товаров",DILClass,modPOS);
  end;
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT")) then begin
    Setting("Группы товаров",ITLClass,modPOS);
  end;
  if (HasLocalMachines or HasFiscalPrinter) then begin
    Setting("Локальная машина",LocalMachineTClass,modPOS);
  end;
//  Setting("Local Machine Payment Modes",RestPMTClass,modPOS);
//  Setting("Local Serial Port Devices",LSerialPortDeviceLClass,modPOS);
  if (HasNumberSeries) then begin
    Setting("Серии номеров - счета POS",IVCashSerTClass,modPOS); 
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Setting("Валюты платежей",POSCurrenciesTClass,modPOS);
  end;
  Setting("Способы платежей",PMTClass,modPOS);
  Setting("POS - балансы",POSBalanceLCLass,modPOS);
  Setting("POS - кнопки",POSButtonsLClass,modPOS);
  Setting("POS - сессии",POSEventLCLass,modPOS);
  Setting("POS - настройки",CashierDefTClass,modPOS);

  Report("Cash Up",CashupRClass,CashupRn,0,modPOS);
//  Report("Daily Balance",DayBalRClass,DayBalRn,0,modPOS); //not in 63
  if (HasModIN) then begin
    Report("GP, POS Invoices", PIVGPRClass,PIVGPRn,0,modPOS);
  end;
  Report("Item List",ArtRClass,ArtRn,0,modPOS);
  Report("Item Statistics",ArtSTRClass,ArtSTRn,0,modPOS);
  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Report("#N/L# Transfer, Cash Invoices", TransGenPOSRClass,TransGenPOSRn,0,modPOS);
  end;
  Report("POS Invoice Journal",IVCJRClass,InvCashRn,0,modPOS);
  if (HasVarieties) then begin
    Report("Variety Enquiry",VarEnqRClass,VarEnqRn,0,modPOS);
  end;

  Document("Счета POS",IVCashRClass,InvCashForm,IVCashFClass,modPOS);

  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Maintenance("Cash Up",CashupVClass,CashupMn,modPOS);
  end;
  if (HasModIN) then begin
    Maintenance("Update #Stock#",POSUpdStockVClass,POSUpdStockMn,modPOS);
  end;

/* modRest */
  RegisterWS("Счета","Счета","Новый счёт",RestAccVc,modRest); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modRest); 
  Register("Столики","Столики",TableLayoutClass,modRest);

  Setting("Ежедневная статистика",SalesTimeTClass,modRest); 
  Setting("Default Payment Modes",DefCashTClass,modRest);
  Setting("Invoice Settings",AccTClass,modRest);
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT")) then begin
    Setting("Группы товаров",ITLClass,modRest);
  end;
  Setting("Способы платежей",PMTClass,modRest); 
  Setting("POS Buttons",POSButtonsLClass,modRest);
  Setting("Tables",NeighbourHoodLClass,modRest);
  Setting("Units",UnitLClass,modRest);

  Document("Bar Tab",RestAccRClass,RestAccForm,RestAccFClass,modRest);
  Document("Bar Tab Receipt",RestAccReceiptRClass,RestAccReceiptForm,RestAccReceiptFClass,modRest);
  Document("Cancel Order",RestAccRClass,RestAccCancelForm,RestAccCancelFClass,modRest);
  Document("Cash Events",CashRClass,CashForm,CashFClass,modRest);
  Document("Fire Order",RestAccRClass,RestAccFireOrderForm,RestAccFireOrderFClass,modRest);
  Document("Guest Bill ",RestAccGuestBillRClass,RestAccGuestBillForm,RestAccGuestBillFClass,modRest);

  Export("#Restaurant# Daily Statistics",SalesTimeEClass,SalesTimeEn,modRest);  

  Report("Item List",ArtRClass,ArtRn,0,modRest);
  Report("#Restaurant# Daily Statistics",DetSalesTimeRClass,DetSalesTimeRn,0,modRest);  
//  Report("Cash Up",CashupRClass,CashupRn,0,modRest);
  Report("#Restaurant# Daily Statistics",DetSalesTimeRClass,DetSalesTimeRn,0,modRest);  
  Report("#Restaurant# Item Statistics",BarItemStatRClass,BarItemStatRn,0,modRest);
  Report("Tabs Journal",RestAccJRClass,RestAccJRn,0,modRest);
  Report("Void Report",VoidedRowsRClass,VoidedRowsRn,0,modRest);
  
/* modCRM */

  if (HasStandardCRM) then begin  
    RegisterWS("Коммерческие предложения","Коммерческие предложения","Новое комм. предложение",QTVc,modCRM); 
  end;
  RegisterWS("Деятельности","Деятельности","Новая деятельность",ActVc,modCRM); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modCRM); 
  if (HasStandardCRM) then begin  
    RegisterWS("Товары","Товары","Новый товар",INVc,modCRM); 
  end;
  if (HasCustomerLetter) then begin  
    RegisterWS("Письма клиентам","Письма клиентам","Новое письмо клиенту",LetVc,modCRM); 
  end;


  Report("Деятельность - контакты",ActCURClass,ActCURn,0,modCRM);
  Report("Деятельность по сотрудникам",ActPersRClass,ActPersRn,0,modCRM);
  Report("Список дней рождений",BirthDayRClass,BirthDayRn,0,modCRM);
  if (HasSkypeConnection) then begin
  Report("История звонков",CallHistRClass,CallHistRn,0,modCRM);
  end;
  Report("Список контактов",CURClass,CustRn,0,modCRM);
  if (HasStandardOrganizer==false) then begin
    Report("Справка по клиенту",CustPSRClass,CustPSRn,0,modCRM);
  end;
  Report("Отчёт неверных тел.номеров",InvPhoneNoRClass,InvPhoneNoRn,0,modCRM);
  Report("Список лиц",UserRClass,UserRn,0,modCRM);
  Report("Личный календарь",ActCalRClass,ActCalRn,0,modCRM);

  Report("Поиск контактного лица",SearchContactRClass,SearchContactRn,0,modCRM);

  Document("Деятельности",ActDocRClass,ActDocForm,ActDocFClass,modCRM);
  Document("Этикетки контактов",CoLabRClass,CoLabForm,CoLabFClass,modCRM);

  Setting("Классы деятельностей",ActTypeGrLClass,modCRM);
  Setting("Типы деятельностей",ActTypeLClass,modCRM);
  Setting("Связи с контактами",ContactRelLClass,modCRM);
  if (HasStandardCRM or HasStandardCommunicator) then begin  
    Setting("Информаци в Справка по клиенту",CustPSLClass,modCRM);
  end;
  if (HasStandardCRM) then begin  
    Setting("Условия оплаты",PDLClass,modCRM);
  end;
  Setting("Типы текстов",TextTypeLClass,modCRM);
//  if (HasLocalization("PRT") or HasLocalization("BRA")) then begin
//    Setting("User Defined Fields - Contacts",CUUserLabelTClass,modCRM);
//  end;
  Maintenance("Rebuild Number Recognition Register",NormPhoneNumVClass,NormPhoneNumMn,modCRM);

/* modCL */

  RegisterWS("Приходы в кассу","Приходы в кассу","Новый приход",CLInVc,modCL); 
  RegisterWS("Расходы из кассы","Расходы из кассы","Новый расход",CLOutVc,modCL); 
  if (HasModSL and HasLocalization("POL")==false) then begin
    RegisterWS("Платежи","Платежи","Новый платёж",IPVc,modCL); 
  end;
  if (HasModPL and HasLocalization("POL")==false) then begin
    RegisterWS("Платежи","Платежи","Новый платёж",OPVc,modCL); 
  end;
  if (HasModExp) then begin
    RegisterWS("Выплату персоналу","Выплату персоналу","Новая выплата персоналу",PPVc,modCL); 
  end;
  
  Setting("Настройки кассовой книги",MainCLTClass,modCL);
  Setting("Expense Accounts",CLCorspLClass,modCL);
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Cash In",CLInSerTClass,modCL);
    Setting("Серии номеров - Cash Out",CLOutSerTClass,modCL);
  end;
  Setting("Способы платежей",PMTClass,modCL);

    Report("Кассовая книга",CLIORClass,CashBRn,0,modCL);
  if (HasLocalization("LTU")) then begin
    Report("Cash Book (Lithuania)",CashBookLitRClass,CashBookLitRn,0,modCL);
  end;
  Report("Журнал прихода в кассу",CLInJRClass,CLInJRn,0,modCL);  
  Report("Журнал расходов из кассы",CLOutJRClass,CLOutJRn,0,modCL);  
  if (HasModNL or HasLocalization("POL")) then begin
    Report("Кассовая книга по записям операций",CashBookLatRClass,CashBookLatRn,0,modCL);
  end;

  Document("Приход",CLInRClass,CLInForm,CLInFClass,modCL);
  Document("Расход",CLOutRClass,CLOutForm,CLOutFClass,modCL);

  Maintenance("Утвердить приход и расход",OKCLVClass,OKCLMn,modCL);

/* modEmail */

  Register("Очередь электронной почты","Очередь электронной почты",EMailQueVc,modEmail);
  RegisterWS("Почтовые ящики","Почтовые ящики","Новый почтовый ящик",ConferenceWClass,modEmail); 

  Setting("SMTP Сервер",EmailTClass,modEmail);

  if (HasModSVO) then begin
    RegisterWS("Заказы на обслуживание","Заказы на обслуживание","Новый заказ на обслуживание",SVOVc,modSVO); 
    RegisterWS("Рабочие листы","Рабочие листы","Новые Рабочие листы",WSVc,modSVO);  
  
    if (HasNumberSeries) then begin
      Setting("Серии номеров - Заказы на обслуживание",SVOSerTClass,modSVO); 
      Setting("Серии номеров - Рабочие листы",WSSerTClass,modSVO); 
    end;
    Setting("Стандартные проблемы",StandProblemLClass,modSVO); 
  
    Document("Заказы на обслуживание",SVORClass,SVOForm,SVOFClass,modSVO); 
    Document("Рабочие листы",WSRClass,WSForm,WSFClass,modSVO); 
  
    Report("Ожидающие заказы на обслуживание",SVOStockRClass,SVOStockRn,0,modSVO); 
    Report("Журнал заказов на обслуживание",SVOListRClass,SVOListRn,0,modSVO); 
    Report("Статус заказа на обслуживание",SVOStaRClass,SVOStaRn,0,modSVO); 
    Report("Журнал рабочих листов",WSListRClass,WSListRn,0,modSVO); 
  end;
  
/* modProd */

  if (HasModProd) then begin
    RegisterWS("Производства","Производства","Новое производство",ProdVc,modProd); 
    RegisterWS("Рецепты","Рецепты","Новый рецепт",RecVc,modProd); 
    RegisterWS("Товары","Товары","Новый товар",INVc,modProd); 

    if (HasNumberSeries) then begin
    Setting("Серии номеров - Производства",ProdSerTClass,modProd); 
    end;

    Report("Журнал производств",ProdRClass,ProdRn,0,modProd); 
    Report("Список рецептов (Сделано из...)",Rec2RClass,Rec2Rn,0,modProd); 
    Report("Список рецептов (Часть от...)",RecRClass,RecRn,0,modProd); 

    Document("Производства",ProdOrderRClass,ProdOrderForm,ProdOrderFClass,modProd); 
    Document("Рецепт",RecDocRClass,RecForm,RecFClass,modProd); 

    Maintenance("Создать планируемые записи из заказов",PlanRecordsVClass,PlanRecordsMn,modProd); 
    Maintenance("Обновить рецепты",UpdRecepyVClass,UpdRecepyMn,modProd); 
  end;
  
/* modExp */

  RegisterWS("Затраты","Затраты","Новая затрата",ExpVc,modExp); 
  RegisterWS("Выплаты персоналу","Выплаты персоналу","Новая выплата персоналу",PPVc,modExp); 

  Setting("Расходы по использованию счета",ExpAccTClass,modExp); 
  Setting("Счета",AccLClass,modExp);  
  if (HasNumberSeries) then begin
    Setting("Серии номеров - затраты",ExpSerTClass,modExp); 
    Setting("Серии номеров - выплаты персоналу",PPersSerTClass,modExp); 
  end;
  Setting("Способы платежей",PMTClass,modExp);  
  Setting("Коды НДС",VATCodeTClass,modExp);  

  Document("Затраты",ExpRClass,ExpForm,ExpFClass,modExp); 
  Document("Получения по выплатам персоналу",PPRClass,PersPayForm,PPDFClass,modExp); 

  Report("Expenses Journal",ExpJRClass,ExpRn,0,modExp); 
  if (HasModNL) then begin
    Report("Журнал расчётов с подотчётными лицами",PersPerRClass,PersPerRn,0,modExp); 
  end;
  Report("Журнал выплат персоналу",PPJRClass,PPRn,0,modExp);   
  
/* modTS */
  
  RegisterWS("Время и материалы","Время и материалы","Новое время и материалы",TSVc,modTS); 
  RegisterWS("Проекты","Проекты","Новый проект",PRVc,modTS); 
  RegisterWS("Операции по проекту","Операции по проекту","Новая операция по проекту",TBIVVc,modTS); 
  RegisterWS("Бюджеты по проекту","Бюджеты по проекту","Новый бюджет по проекту",TBBUVc,modTS); 
  if (HasModQT) then begin
    RegisterWS("Коммерческие предложения","Коммерческие предложения","Новое комм. предложение",QTVc,modTS); 
  end;
  RegisterWS("Товары","Товары","Новый товар",INVc,modTS); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modTS); 

  if (HasNumberSeries) then begin
    Setting("Серии номеров - Проекты",PRSerTClass,modTS); 
    if (HasModQT) then begin
      Setting("Серии номеров - Коммерческие предложения",QTSerTClass,modTS); 
    end;
    Setting("Серии номеров - Time & Materials",TSSerTClass,modTS); 
  end;
  Setting("Классы проектов",PRClassTClass,modTS); 
  Setting("Настройки проектов",PRITClass,modTS); 
  if (HasModQT) then begin
    Setting("Классы коммерческих предложений",QuoteClassTClass,modTS);   
  end;

  Report("Контроль исполнения бюджета",BudFollPRClass,BudPFoll2Rn,0,modTS); 
  Report("Счета-фактуры по проектам",ProInvRClass,ProInvRn,0,modTS); 
  Report("Список проектов",ProListRClass,PRListRn,0,modTS); 
  Report("Прейскуранты по проектам",ProjPLRClass,ProjPLRn,0,modTS); 
  Report("Статус проекта",ProStatRClass,ProStatRn,0,modTS); 
  Report("Записи операций по проекту",PrTransRClass,PrTranRn,0,modTS); 
  if (HasModQT) then begin
    Report("Журнал коммерческих предложений",QTJRClass,QTJRn,0,modTS); 
  end;
  Report("Журнал времени и материалов",TSJRClass,TSJRn,0,modTS); 
  
  Document("Бюджета по проектам",TBBudgetRClass,TBBudgetForm,TBBudgetFClass,modTS); 
  Document("Информация о проекте",ProjectInfoRClass,ProjectInfoForm,ProjectInfoFClass,modTS); 
  Document("Записи операций по проекту",ProjectTransRClass,ProjectTransForm,ProjectTransFClass,modTS); 
  Document("Проекты",ProjectRClass,ProjectForm,ProjectFClass,modTS); 
  if (HasModQT) then begin
    Document("Коммерческие предложения",QTRClass,QTForm,QTFClass,modTS); 
  end;
  Document("Время и материалы",TimeSheetRClass,TimeSheetForm,TimeSheetFClass,modTS); 
  
  Maintenance("Создать счета-фактуры по проекту",ProInvVClass,ProInvMn,modTS); 
  

/* modAT2 */

  RegisterWS("Активы","Активы","Новый актив",AT2UnitVc,modAT2); 
  if (HasModNL) then begin
    RegisterWS("Категории активов","Категории активов","Новая категория активов",AT2Vc,modAT2); 
  end;
  RegisterWS("Выбытия активов","Выбытия активов","Новое выбытие активов",AT2WrofVc,modAT2); 
  if (HasLocalization("LVA")) then begin
    Register("Движение активов","Движение активов",AT2TransVc,modAT2);   
  end;
  RegisterWS("Модели амортизации","Модели амортизации","Новая модель амортизации",DprModVc,modAT2); 

  if (HasModNL) then begin
    Setting("Настройки записей - активы",AT2AccTClass,modAT2); 
    Setting("Виды активов",AC2TClass,modAT2); 
  end;
  Setting("Контакты",CULClass,modAT2); 
  if (HasDepartments) then begin
    Setting("Отделы",DepLClass,modAT2); 
  end;
  Setting("Коеффициенты инфляции",ATCoeffLClass,modAT2); 
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Выбытие активов",AT2WrofSerTClass,modAT2); 
    Setting("Серии номеров - Переоценка активов",AT2DprSerTClass,modAT2); 
    Setting("Серии номеров - Статусы активов",AT2TakeSerTClass,modAT2); 
    Setting("Серии номеров - Фактуры переоценки",AT2RevSerTClass,modAT2); 
  end;
  
  if (HasModNL) then begin
    Report("Накопленная амортизация по категории",AT2CatAcumRClass,AT2CatAcumRn,0,modAT2); 
  end;
  Report("Cостояние актива на дату",AssetAtTimeRClass,AssetAtTimeRn,0,modAT2); 
  Report("История актива",AT2HistRClass,AT2HistRn,0,modAT2); 
  Report("Список активов",AT2ListRClass,AT2ListRn,0,modAT2); 
  Report("Статус актива",AT2HistPortRClass,AT2HistPortRn,0,modAT2); 
  if (HasDepartments) then begin
    Report("Сводный отчет по отделам",AT2DepRClass,AT2DepSumRn,0,modAT2); 
  end;
  Report("План амортизации",AT2DeprPlanRClass,AT2DeprPlanRn,0,modAT2); 
  Report("Отчёт по амортизации",AT2DeprRClass,AT2DeprRn,0,modAT2); 
  Report("Журнал выбытия активов",AT2WriteJRClass,AT2WriteJRn,0,modAT2); 
  Report("Список мат. ответственных",AT2RespPersRClass,AT2RespPersRn,0,modAT2); 
  Report("Сводный отчет по мат. ответственным",AT2CatRespRClass,AT2CatRespRn,0,modAT2); 
  if (HasSimulations) then begin
    Report("Предпросмотр симуляций по амортизации",AT2GenSMRClass,AT2GenSMRn,0,modAT2); 
  end;
  if (HasModIN) then begin
    Report("Инвентаризационная ведомость активов",AT2StockTakeRClass,AT2StockTakeRn,0,modAT2); 
  end;
  Report("Субсидированные активы",AT2SubRClass,AT2SubRn,0,modAT2); 
  Report("Налоговая амортизация",TaxDeprRClass,TaxDeprRn,0,modAT2); 
  if (HasModNL) then begin
    Report("Предпросмотр зап. операций - Амортизация",AT2GenTRRClass,AT2GenTRRn,0,modAT2); 
  end;
  
  Document("Выбытие активов",AT2WrofRClass,AT2WrofForm,AT2WrofFClass,modAT2); 
  Document("Активы",AT2InRClass,AT2InForm,AT2InFClass,modAT2); 
  Document("Введённые в эксплуатацию активы",AT2RClass,AT2Form,AT2FClass,modAT2); 
  Document("Статус актива",AT2TakeRClass,AT2TakeForm,AT2TakeFClass,modAT2);   
  Document("Факторы переоценки",AT2RevRClass,AT2RevForm,AT2RevFClass,modAT2); 
  
  if (HasSimulations) then begin //
    Maintenance("Создание симуляций по амортизации",AT2GenSMVClass,AT2GenSMMn,modAT2); 
  end;
  if (HasModNL) then begin
    Maintenance("Создание операций по амортизации",AT2GenTRVClass,AT2GenTRMn,modAT2); 
    Maintenance("Создание записей по вводу в эксплуатацию",AT2PutinVClass,AT2PutinMn,modAT2); 
  end;
  Maintenance("Переоценка стоимости активов",AT2ReevalVClass,AT2ReevalMn,modAT2); 

 
  if (HasPayroll) then begin
    Setting("Post Groups",EPPostGroupLClass,modSAL);      
    Setting("Allowances/Deductions",EPPrivLClass,modSAL);
    Setting("Allowance/Deduction types",EPPrivTypeWClass,modSAL);
    Setting("Employee Groups",EPEmpGroupLClass,modSAL);
    Setting("Employee Classes",EPEmpClassLClass,modSAL);
    Setting("Document types",EPDocTypeWClass,modSAL);
  //  Setting("Fizisk√Зs personas",EPPersonEmpLClass,modSAL);
  
    Setting("Education",EPEducLClass,modSAL);
    Setting("Education Levels",EPEducLevelWClass,modSAL);
    Setting("Education Types",EPEducTypeWClass,modSAL);
    Setting("Absence Periods",EPOffTrTypeLClass,modSAL);
    Setting("Absence Types",EPOffWorkGroupLClass,modSAL);
    Setting("Time Classes",TimeClassLClass,modSAL);
    Setting("Order Fields",EPOrderFieldsTClass,modSAL);
    Setting("Tax Groups",EPTaxGroupLClass,modSAL);
    if (HasNumberSeries) then begin
    Setting("Серии номеров - Absences",EPOffWorkSerTClass,modSAL);
    Setting("Серии номеров - Orders",EPOrderDocSerTClass,modSAL);
    end;
    Setting("Sample",EPStrSampleWClass,modSAL);
    Setting("Order Types",EPOrderTypeWClass,modSAL);
    Setting("Periodic Action Groups",EPActionGroupLClass,modSAL);
    Setting("Tenderer Applications",EPPostEntryLClass,modSAL);
    Setting("Post Classification",EPOffPostCodeLClass,modSAL);
    Setting("Relatives",EPRelLClass,modSAL);
    Setting("Relative Types",EPRelTypeWClass,modSAL);
    Setting("Regions",EPRegionLClass,modSAL);
    Setting("Standard Texts",LTxtLClass,modSAL);
  //  Setting("Tarifu tipi",EPTariffTypeWClass,modSAL);
    Setting("Text Line Types",EPStrTypeLClass,modSAL);
    Setting("Text Line Type Groups",EPStrGroupTypeWClass,modSAL);
    Setting("Text Types",TextTypeLClass,modSAL);
    Setting("Languages",EPLangLClass,modSAL);
    Setting("Language Levels",EPLangLevelWClass,modSAL);
    Setting("Post Competitions",EPPostCompLClass,modSAL);
   
    RegisterWS("Отдел","Отдел","Новый отдел",EPDepartmentVc,modSAL); 
    RegisterWS("Работники","Работники","Новый работник",EPEmpEmpLClass,modSAL); 
    RegisterWS("Счета клиентам","Счета клиентам","Новый счёт клиенту",EPOrderDocVc,modSAL); 
    RegisterWS("Должности","Должности","Новая должность",EPPostVc,modSAL); 
    RegisterWS("Пропуски","Пропуски","Новый пропуск",EPOffWorkVc,modSAL); 
    RegisterWS("Периодические действия","Периодические действия","Новое периодическое действие",EPDatedActionsVc,modSAL); 
  //  Register("Darbinieki un Fiz.Pers.","Darbinieki un Fiz.Pers.",EPEmpVc,modSAL);
    
  //  Report("Br¬•vdienas",EPHolidayRCLass,EPHolidayRn,0,modSAL);   
    Report("Post Competitions",EPPostCompAppRClass,EPPostCompAppRn,0,modSAL);
    Report("Allowances/Deductions",EPEmpPrivRCLass,EPEmpPrivRn,0,modSAL);
    Report("Free Posts",EPFreePostsRCLass,EPFreePostsRn,0,modSAL);  
    Report("Employee Seniority",EPSeniorityRClass,EPSeniorityRn,0,modSAL);
    Report("Employee Education",EPEmpEduRClass,EPEmpEducationRn,0,modSAL);
    Report("Employee Absences",EPEmpOffWRClass,EPEmpOffWRn,0,modSAL);
  //  Report("Laika uzskaites tabeles",EPEmpTimeStatRClass,EPEmpTimeStatRn,0,modSAL);
    Report("Employee Relatives",EPEmpRelRClass,EPEmpRelRn,0,modSAL);
    Report("Работники",EPEmpRCLass,EPEmpRn,0,modSAL);  
    Report("Employee Languages",EPEmpLangRCLass,EPEmpLangRn,0,modSAL); 
    Report("Department Structure",EPDepStrRCLass,EPDepStrRn,0,modSAL); 
    Report("Absence Calculation",EPOffWorkCalcRClass,EPOffWorkCalcRn,0,modSAL); 
    Report("Statistics - Post/Salary",EPPostStatRClass,EPPostStatRn,0,modSAL);
    Report("Statistics - Post/Age",EPAgePostStatRClass,EPAgePostStatRn,0,modSAL);
    Report("Orders",EPEmpOrdersRCLass,EPEmpOrdersRn,0,modSAL);
    Report("Periodic Actions",EPDatedActionsRClass,EPDatedActionsRn,0,modSAL);
    Report("Tenderer Applications",EPPostEntryRClass,EPPostEntryRn,0,modSAL);
    Report("Accrued Vacation Analysis",EPEmpAccVacRClass,EPEmpAccVacRn,0,modSAL);
  
    Document("Работники",EPEmpDocRClass,EPEmpForm,EPEmpFClass,modSAL);  //-----
    Document("Time Sheets",EPEmpTimeStatRClass,EPEmpTimeStatForm,EPEmpTimeStatFClass,modSAL);
    Document("Orders",EPOrderDocRClass,EPOrderDocForm,EPOrderDocFClass,modSAL);
    Document("Employee Information",EPEmpInfoRClass,EPEmpInfoDocForm,EPEmpInfoDocFClass,modSAL);  //-----
    
    Export("EDS - Employee Information",EDSEPEmpInfoEClass,EDSEPEmpInfoEn,modSAL);
    //Export("Iestat¬•jumu eksports",EPSettingsECLass,EPSettingsEn,modSAL); // Parvietots uz Integracijas moduli
    Export("Employee Information",EPEmpInfoEClass,EPEmpInfoEn,modSAL); 

   
    Maintenance("Transfer Persons to Employees Register",CopyUserToEmpVClass,CopyUserToEmpMn,modSAL);  
  
    
  //=========== Payroll =============================== 
    RegisterWS("Договоры о найме","Договоры о найме","Новый договор о найме",EPEmpContractLClass,modPY); 
    RegisterWS("Работники","Работники","Новый работник",EPEmpLClass,modPY); 
    RegisterWS("Выплаты по зарплате","Выплаты по зарплате","Новая выплата по зарплате",EPPVc,modPY); 
    RegisterWS("Учётные листы","Учётные листы","Новый учётный лист",EPTS2LClass,modPY); 
    RegisterWS("Расчёт","Расчёт","Новйы расчёт",EPCalcResVc,modPY); 
    RegisterWS("Бонусы","Бонусы","Новый бонус",EPBonussVc,modPY); 
    RegisterWS("Пропуски","Пропуски","Новый пропуск",EPOffWorkVc,modPY); 
    Register("Ввод зарплат","Ввод зарплат",EPEntryDClass,modPY); 
   
    Setting("Настройки выплат по зарплатам",EPPayrollSetWClass,modPY);  
    Setting("Настройка окна ввода зарплат",EPEntrySetTClass,modPY);
    Setting("Дни в расчётах",EPCalcDaysLClass,modPY);
    Setting("Настройки экспорта EDS",EPExpSetLClass,modPY);
    Setting("Physical Persons",EPPersonEmpLClass,modPY);
    Setting("Physical Person Contracts",EPPersonContractLClass,modPY);
    Setting("Income Types",EPIncTypeLClass,modPY);
    Setting("Constants",EPConstWClass,modPY);
  
    Setting("Time Sheet (old register)",EPTSLClass,modPY);
    Setting("Time Sheet Codes",EPTSCodeLClass,modPY);
    Setting("EDS Export Fields",EPExpFieldsTClass,modPY);
  
    Setting("Wages",EPTaxesLClass,modPY);
    Setting("Contract Changes",EPContrChangeLClass,modPY);
    Setting("Contract Sample",EPContrTemplateTClass,modPY);
    Setting("Tax Reports (formulas)",TaxRepPYLClass,modPY);
    if (HasNumberSeries) then begin
    Setting("Серии номеров - Salary Payments",EPPSerTClass,modPY);
    Setting("Серии номеров - Calculations",EPCalcResTClass,modPY);
    Setting("Серии номеров - Calculation Corrections",EPCalcCorTClass,modPY);
  //  Setting("Numuru s√ѓrijas - laika tabulas",EPTSSerTClass,modPY);
    Setting("Серии номеров - Time Sheets",EPTS2SerTClass,modPY);
    Setting("Серии номеров - Bonuses/Deductions",EPBonussSerTClass,modPY);
    end;  
    Setting("Operation Types",EPTrTypeLClass,modPY);
    Setting("Operation Type Groups",EPTrTypeGroupLClass,modPY);
    Setting("Operation Type Chart of Accounts",EPAccWClass,modPY);
    Setting("FWD Balance",EPInitAmountsLClass,modPY);
    Setting("Changed Work Days",EPWorkDayChLClass,modPY);
    Setting("Country Holidays",BHollLClass,modPY);
    Setting("All Contracts",EPContractLClass,modPY);
    
    Report("Salary Payments",EPPayJrnRCLass,EPPayJrnRn,0,modPY);  
    Report("Salary Calculations",EPCalcTaxRClass,EPCalcTaxRn,0,modPY);
    Report("Apr√ѓЋЩinu vad¬•ba",EPCalcResManRClass,EPCalcResManRn,0,modPY);
    
    Report("Договоры о найме",EPEmpContractsRClass,EPEmpContractsRn,0,modPY);
    Report("Payment Journal",EPPaymentJRCLass,EPPaymentJRn,0,modPY); 
    Report("Taxes per Region",EPRegionTaxesRclass,EPRegionTaxesRn,0,modPY); 
  //  Report("P√Зrskats par person√Зm",EPPPSRClass,EPPPSRn,0,modPY);
    Report("Bonus/Deduction Statistics",EPBonussRClass,EPBonussRn,0,modPY);
    Report("Amount Distribution per Payment Types",EPTrTypeStatRclass,EPTrTypeStatRn,0,modPY);
    Report("Accrued Vacation Analysis",EPEmpAccVacRClass,EPEmpAccVacRn,0,modPY);
   // Report("Zi¬њas par darbiniekiem",EPEmpInfoRClass,EPEmpInfoRn,0,modPY);
  
    Maintenance("Fill Income Type Field in Calculations",EPCalcFillIncTypeVClass,EPCalcFillIncTypeMn,modPY);
    Maintenance("Calculate Salary",EPCalcPayVClass,EPCalcPayMn,modPY);
    Maintenance("Calculate Accrued Vacation",UpdateVacationVClass,UpdateVacationMn,modPY);  
    Maintenance("Update Contracts",EPUpdateContractsVClass,EPUpdateContractsMn,modPY);
    Maintenance("Delete Calculations",EPDelCalcResVClass,EPDelCalcResMn,modPY);
    Maintenance("Change Scale Form",EPScaleFormVClass,EPScaleFormMn,modPY);
    Maintenance("Create Payouts",EPCalcPay2VClass,EPCalcPay2Mn,modPY);
    Maintenance("Create Bonuses/Payouts",EPMakePayVClass,EPMakePayMn,modPY);
    Maintenance("Create Transactions",EPCreateTRVClass,EPCreateTRMn,modPY);
    Maintenance("Recalculate Average Salary Field",EPRecalcAVSalFieldVClass,EPRecalcAVSalFieldMn,modPY);
  //  Maintenance("Main¬•t apr√ѓЋЩinu statusu",EPCreateTRVClass,SetCalcStatMn,modPY);
    
    Document("Salary Sheets",EPCalcListFormRClass,EPCalcListForm,EPCalcListFClass,modPY);
    Document("Salary Payments",EPPRClass,EPPForm,EPPFClass,modPY);
    Document("Salary Calculation and Payout list",EPPStatDocRClass,EPEmpStatDocForm,EPEmpStatDocFClass,modPY); //---------pedejais done
    Document("Calculations",EPCalcResFormRClass,EPCalcResForm,EPCalcResFClass,modPY);
    Document("Cash exp. - Salary payments",CLOut4RClass,CLOut4Form,CLOut4FClass,modPY);
    Document("Reg. No. 166, 1. attachment",EPEmpIncDocRClass,EPEmpIncDocForm,EPEmpIncDocFClass,modPY);//------
    Document("Reg. No. 166, 2. attachment",EPEmployerIncDocRClass,EPEmployerIncDocForm,EPEmployerIncDocFClass,modPY);//------
    Document("Reg. No. 166, 6. attachment",EPInc2DocRClass,EPEmpInc2DocForm,EPEmpInc2DocFClass,modPY);//----------
    Document("Reg. No. 942, 3. attachment",EPEmpSocIncDocRClass,EPEmpSocIncDocForm,EPEmpSocIncDocFClass,modPY);//-----
    Document("Reg. No. 677, 1. attachment",EPInc677DocRClass,EPEmpInc677DocForm,EPEmpInc677DocFClass,modPY);//----------
  //  Document("VSAOI (m√ѓn.)",EPEmployeeSocMonthDocRClass,EPEmployeeSocMonthDocForm,EPEmpInfoDocFClass,modPY);
  //  Document("P√Зrskats par iedz. ien√Зkuma nod. summ√Зm",EPEmployeeIncStatDocRClass,EPEmployeeIncStatDocForm,EPEmployeeIncStatDocFClass,modPY);
    Document("Personal Account",EPEmpAccDocRClass,EPEmpAccDocForm,EPEmpAccDocFClass,modPY); //-----
    Document("Bonuses/Payouts",EPBonussDocRClass,EPBonussForm,EPBonussFClass,modPY);
    Document("Social Tax",EPEmpSocTaxStatDocRClass,EPEmpSocTaxStatDocForm,EPEmpSocTaxStatDocFClass,modPY);//----------
    
    Export("Payroll Register",EPSettingsECLass,EPRegistersEn,modPY); 
    Export("Cabinet Rules No. 942, 3. attachment",EPEmpSocIncEClass,EPEmpSocIncEn,modPY);
    Export("Notice of PP Paid Amounts",EDSEmp677IncEClass,EDSEmp677IncEn,modPY); 
  end;

  end;
  return;
end;
