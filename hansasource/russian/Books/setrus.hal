/* setrus.hal */

#ifdef HAL

external function Boolean HasBar();
external function Boolean HasModHotel();
external function Boolean HasModCO();
external function Boolean HasModPL();
external function Boolean HasModPOS();
external function Boolean HasModRest();
external function Boolean HasModSL();
external function Boolean HasModSO();
external function Boolean HasModIN();
external function Boolean HasModExp();
external function Boolean HasModNL();
external function Boolean HasModCheck();
external function Boolean HasStandardCRM();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();
external function Boolean HasRussianPrepayment();
external function Boolean HasWorkflowOverview();
external function Boolean HasCustomerStatusReport();

//event startup
begin

  SetLangMode(LangRussian,"RUS",0); //##ii

/* When you compile a Office/2, please remove all except Full and None */
/* When you compile a Office/2, please remove all except Full and None */
  SetBegin(1);
  SetText(kAccessLevelFull,"Полный");
/* Not for Office2 */
  SetText(kAccessLevelReadOnly,"Просмотр записей");
  SetText(kAccessLevelReadNew,"Просмотр записей/Новые записи");
  SetText(kAccessLevelBrowse,"Просмотр списка");
  SetText(kAccessLevelBrowseNew,"Просмотр списка/Новые записи");
  SetText(kAccessLevelReportNoDD,"Отчет без развертке");
  // SetText(4,"Ограниченный");
  SetText(kAccessLevelNone,"Нет доступа");
  EndSet;
  
  SetBegin(2);
  SetText(kAccessTypeModule,"Модуль");
  SetText(kAccessTypeRegister,"Регистр");
  SetText(kAccessTypeSetting,"Настройка");
  SetText(kAccessTypeReport,"Отчёт");
  SetText(kAccessTypeDocument,"Документ");
  SetText(kAccessTypeExport,"Экспорт");
  SetText(kAccessTypeImport,"Импорт");
  SetText(kAccessTypeMaintenance,"Обслуживание системы");
  SetText(kAccessTypeAction,"Действие");
  SetText(kAccessTypeDisplayGroup,"Группа отображ.");
  // SetText(kAccessTypeSpecial,"Special");
  EndSet;
  
  StrSetBegin(3); /* Try to keep them in alphabetical order */
  StrSetText(AllowAddingINtoRet,"Добавлять товары в возвраты");
  StrSetText(AllowAddingINtoRetPOSIV,"Добавлять товары в возвраты сч/ф кас. терминала");
  StrSetText(AllowAddingOrderDiscount,"Add Discount to Bar Tab");
  StrSetText(AllowCashDiscountIP,"Добавлять скидку в платежи клиента");
  StrSetText(AllowUsersAdding,"Добавлять пользователя");
  StrSetText(AllowWriteoffIP,"Добавлять списания в  платежи клиента");
  StrSetText(AmazonIntegration,"Amazon Integration"); //!!TRANSLATE
  StrSetText(AdminClient,"Администрирующий клиент");
  StrSetText(AlertWhenNewVEIV,"Оповещение о новом эл. счёте-фактуре поставщика");
  StrSetText(AllowProjectActivitySupervisorChange,"Allow Changing Supervisor on Project Activity"); //!!TRANSLATE
  StrSetText(AllowPrintEInvoicesFromIV,"Разрешить распечатку электронных счетов-фактур из записей счетов-фактур.");         
  StrSetText(AllowAmendLine,"Разрешить изменение строки на сч/ф (сенсорный экран)");
  StrSetText(ApproveSchedImport,"Approve Scheduled Import");
  StrSetText(ApproveSchedMaint,"Approve Scheduled Maintenance");
  StrSetText(AuthExp,"Авторизирование авансовых отчетов");
  StrSetText(BUQTToIV,"Предложение бюджета в сч/ф");
  StrSetText(AllowNPTSIVCancel,"Отменять с/ф, сенс. экран");
  StrSetText(AllowCheckinBeforePlanned,"Чекин до запланированной даты"); 
  StrSetText(AllowCheckoutBeforePlanned,"Чекин после запланированной даты"); 
  StrSetText(AllowRestAccTransDateChange,"Изменение даты счета ресторана");
  StrSetText(AllowRestAccSerNrChange,"Change Bar Tab No.");
  StrSetText(AllowIVBranchIDChange,"Change Branch Code on Invoice");
  StrSetText(AllowQTBranchIDChange,"Change Branch Code on Quotation");
  StrSetText(AllowJobBranchIDChange,"Change Branch Code on Reservation");  
  StrSetText(AllowORBranchIDChange,"Change Branch Code on Sales Order");
  StrSetText(UpdateCashEvent,"Изменение событий кассы");
  StrSetText(AllowCashierCountChange,"Изменение даты в остатках по кассе");
  StrSetText(IssueChk,"Изменение статуса чека");
  StrSetText(ChangeOwnCheckClearingDate,"Change Own #Cheque# Clearing Date");
  StrSetText(AllowCUSerNrChange,"Change Contact Number");
  StrSetText(ChangingCostOnInvoiceRow,"Изменение себест. на строке сч/ф");
  StrSetText(ChangingCostOnORRow,"Изменение стоимости на счёте клиенту"); 
  StrSetText(ChangingCostOnPU,"Изменять стоимость при приёме товара");         
  StrSetText(ChangingCostOnStockMov,"Изменять стоимость при перемещении движения");         
  StrSetText(AllowChangeCreditLimit,"Изменение лимита кредита");
  StrSetText(AllowChangeCreditLimitDays,"Change Credit Limit Days");
  StrSetText(AllowCustChange,"Change Customer Details");
  StrSetText(AllowDealerChange,"Изменение дилеров");
  StrSetText(ChangeDiscountMatrixonRestAcc,"Change Discount Matrix on Bar Tab");
  StrSetText(ChangeDiscountMatrixonIV,"Change Discount Matrix on Invoice");
  StrSetText(ChangeDiscountMatrixonIVCash,"Change Discount Matrix on POS Invoice");
  StrSetText(AllowGuestChange,"Изменение гостей");
  StrSetText(AllowResClassRTMonChanging,"Изменение классификации комнат в обзоре комнат");
  StrSetText(AllowResLocRTMonChanging,"Изменение местоположения комнат в обзоре комнат");
  StrSetText(AllowRoomChanging,"Изменение комнаты");
  StrSetText(AllowIVInvDateChange,"Изменение даты счета-фактуры");
  StrSetText(AllowIVSerNrChange,"Изменение номера счета-фактуры");
  StrSetText(ChangeSHItemSpec,"Измен. наимен. товара в отгрузке");
  StrSetText(ChangeIVItemSpec,"Измен. наимен. товара в с/ф");
  StrSetText(ChangeORItemSpec,"Измен. наимен. товара в счете");
  StrSetText(ChangeQTItemSpec,"Измен. наимен. товара в ком. предложении");
  StrSetText(AllowINCostModelChange,"Изменение модели стоимости товара");
  StrSetText(ChangingINType,"Change Item's Type");
  StrSetText(AllowINWeighedAvChange,"Изменение средневзвешенной цены в карточке товара");
  StrSetText(IssueOwnChk,"Изменение статуса собственного чека");
  StrSetText(ReconciledChequeToEndorsed,"Change #Cheque# State from Reconciled to Endorsed");  
  StrSetText(EndorsedReconciledChequeToEndorsed,"Change #Cheque# State from Endorsed and Reconciled to Endorsed");
  StrSetText(ChangeRecordHeaderWhenPending,"Change Record Header when Approval Status is Pending");  
  StrSetText(ChangeRecordMatrixWhenPending,"Change Record Matrix when Approval Status is Pending");  
  StrSetText(ChangeDateinResourcePlanner,"Change Dates in Resource Planner");
  StrSetText(AllowPasswdChanging,"Изменение пароля");
  StrSetText(ChangePrices,"Изменение цен");
  StrSetText(AllowPOSerNrChange,"Изменение номера заказа поставщику");
  StrSetText(AllowQTSerNrChange,"Изменение номера коммерческого предложения");
  StrSetText(AllowReservationChanging,"Изменение резервирования");
  StrSetText(ChangeReserved,"Изменение статуса Резервировать в счетах и перемещениях товара");
  StrSetText(ChangeDropShipOrders,"Change Sales Order with Drop Ship Type"); 
  StrSetText(AllowORSerNrChange,"Изменение номера счета клиенту");
  StrSetText(AllowSalesmanChangeonContact,"Change #Salesman# on Contact");  
  StrSetText(AllowSalesmanChange,"Изменение продавца в утвержденных сч/ф");
  StrSetText(AllowSalesmanChangeOnPOS,"Изменение продавца на сч/ф кассового терминала");
  StrSetText(AmendLineChangePrice,"Изменение при редактировании линии");
  StrSetText(AllowSuppInvNoChangeOKVI,"Изменение № сч/ф поставщика на утвежденных сч/ф поставщика");
  StrSetText(AllowSuppChange,"Изменение поставщиков");
  StrSetText(AllowLockingChange,"Изменение настроек закрытия");
  StrSetText(ChangeUnitPrices,"Изменение цены товара");
  StrSetText(ChangingUpdateStockFlag,"Изменение поля Обновить склад на сч/ф клиенту");
  StrSetText(PositionStatusChanging,"Изменение статуса места");
  StrSetText(AllowWSUpdateStockChange,"Изменение в таблицах работ - Обновление склада");
  StrSetText(DiffHalcust,"Compare halcust & halpatch");  
  StrSetText(CompletingServiceOrders,"Complete Service Orders");  
  StrSetText(StockMovOrdFlag,"Confirming #Stock# Movements"); //!!TRANSLATE
  StrSetText(InvToCO,"Контракт из сч/ф");
  StrSetText(AllowCreateCust,"Создавать клиентов");
  StrSetText(AllowCreateDealer,"Создавать дилеров");
  StrSetText(AllowCreateGuest,"Создавать гостей");
  StrSetText(AllowNewCustomerfromNPTS,"Создавать клиентов из сч/ф кассового терминала с сенс. экраном");
  StrSetText(AllowCreateSupp,"Создавать поставщиков");
  StrSetText(CreatingWithholdingCertificates,"Создание сертификатов для удержания"); 
  StrSetText(RetPUToVI,"Кредитный счет из возврата товаров поставщику");
  StrSetText(RetToIV,"Кредитный счет из возврата товаров");
  StrSetText(AllowRestAccRowsDelete,"Удаление товаров из счета ресторана");
  StrSetText(AllowIVTSRowsDelete,"Удаление товаров из счета, сенс. экран");
  StrSetText(DeleteNotOKedInvoiceWithCAE,"Deleting not OKed Invoices with CAE/CAEA"); 
  StrSetText(DeleteSharedRecord,"Удаление записей из разделенных регистров");
  StrSetText(DeleteAnyRecord,"Удаление записей");
  StrSetText(ORToSH,"Отгрузка из счетов клиентам");
  StrSetText(DisallowRetClose,"Disallow Changing 'No Credit Notes' on Returned Goods");  
  StrSetText(DisallowPRBudgetChangefornonPRMan,"Не разрешать изменение бюджета проекта всем, кроме руководителя проекта");
  StrSetText(DisallowPojectChangefornonPRMan,"Не разрешать изменение проекта всем, кроме руководителя проекта");
  StrSetText(DisallowPRScheduleChangefornonPRMan,"Не разрешать изменение графика проекта всем, кроме руководителя проекта");
  StrSetText(DisallowChangeIVQtyFromOR,"Не разрешать изменять к-во на сч/ф созданном из счета");
  StrSetText(DisallowSalesmanChange,"Не разрешать менять продавца на неутвержденных сч/ф");
  StrSetText(DisallowIntORClose,"Не разрешать закрытие внутренних заказов");
  StrSetText(DisallowORClose,"Не разрешать закрытие счетов");
  StrSetText(DisallowCostVariance,"Не разрешать изменения цены в поступлениях товара");
  StrSetText(NotOKORToSH,"Не разрешать отгрузку из неутвержденных счетов");
  StrSetText(NotOKPOToPU,"Не разрешать поступления из неутвержденных заказов поставщику");
  StrSetText(DisallowSerNrItemsOnSR,"Не разрешать товары с трекингом сер. номера на переоценку склада");
  StrSetText(DisallownonSerNrItemsOnSR,"Не разрешать товары без трекинга сер. номера на переоценку склада");
  StrSetText(DisallowPostPRActualsfornonPRMan,"Disallow posting Project actuals if not Project Member");
  StrSetText(DisallowPrepToNotOKOR,"Не разрешать предоплаты для неутвержденных счетов");
  StrSetText(DisallowPrepToNotOKPO,"Не разрешать предоплаты для неутвержденных заказов");
  StrSetText(DisallowPriceLowerCost,"Не разрешать цены ниже себестоимости");
  StrSetText(DisallowPrintCopy,"Не разрешать печать копий");
  StrSetText(DisallowSalesPlain,"Не разрешать продажиf свободных товаров");
  StrSetText(DisallowSalesService,"Не разрешать продажи работ");
  StrSetText(DisallowSalesStocked,"Не разрешать продажи складируемых товаров");
  StrSetText(DisallowSalesStructured,"Не разрешать продажи структурированных товаров");
  StrSetText(DisallowDomSales,"Не разрешать продажи внутренним клиентам");
  StrSetText(DisallowExpSales,"Не разрешать экспортные продажи");
  StrSetText(DisallowSaleBelowGP,"Не разрешать продажи ниже минимальной прибыли");
  StrSetText(DisallowWSFromSVO,"Не разрешать заказы на работу из заказа на обслуживание");
  StrSetText(ShowSerialNronPOSInvoices,"Отображать сер.№ на сч/ф кассвого терминала");
  StrSetText(AllowDispute,"Согласовывать сч/ф");
  StrSetText(DownloadHalcust,"Download halcust & halpatch");  
  StrSetText(POToDownPay,"Предв. платёж по заказу поставщику"); 
  StrSetText(ORToDownPay,"Аванс из счета клиенту");
  StrSetText(XXGRToXXGR,"Копирование (Drag and Drop) определений баланса и прибылей/убытков");
  StrSetText(EditingCAEandCAEExpiry,"Editing CAE and CAE Expiry fields in Sales Invoices");
  StrSetText(EditingWithholdingCertificates,"Editing Withholding Certificates"); 
  StrSetText(EMailFromAcceptedPO,"E-mail из принятого заказа поставщику");
  StrSetText(EMailFromOKPO,"E-mail из утвержденного заказа поставщику");
  StrSetText(IVToEDIInv,"Сч/ф EDI из сч/ф");
  StrSetText(EditingWSCostAcc,"Изменение расходного счета на таблице работ");
  StrSetText(JobELockingSystem,"Электронная замочная система");
  StrSetText(EditFieldAccess,"Настройки поля");
  StrSetText(HiddenLine,"Hidden Line"); //!!TRANSLATE
  StrSetText(POToPU,"Поступление из заказа поставщику");
  StrSetText(AllowIncorrectSerial,"Некорректные серийные номера на сф/ф ЕККА");
  StrSetText(ActInvalid,"Аннулировать деятельности");
  StrSetText(AT2WrofInvalid,"Аннулировать списания активов");
  StrSetText(RestAccInvalid,"Аннулировать счета ресторана");
  StrSetText(CLInInvalid,"Аннулировать приходный ордер");
  StrSetText(CLOutInvalid,"Аннулировать расходный ордер");
  StrSetText(ExpInvalid,"Аннулировать авансовый отчет");
  StrSetText(PUInvalid,"Аннулировать поступление на склад");
  StrSetText(OPInvalid,"Аннулировать платежи");
  StrSetText(PPInvalid,"Аннулировать выплаты подотчетному лицу");
  StrSetText(InvInvalid,"Аннулировать сч/ф поставщиков и клиентам");
  StrSetText(VIInvalid,"Аннулировать сч/ф поставщиков");
  StrSetText(IVInvalid,"Аннулировать сч/ф клиентам");
  StrSetText(InstallHalcust,"Install Halcust & Halpatch");  
  StrSetText(InvalidateInvoice,"Аннулировать сч/ф сенсорного экрана");
  StrSetText(COToInv,"Сч/ф из контракта");
  StrSetText(JobToInv,"Сч/ф из резервирования");
  StrSetText(SHToInv,"Счёт-фактура из отгрузки"); 
  StrSetText(ORToInv,"Сч/ф из счета клиенту");
  StrSetText(QTToIV,"Сч/ф из коммерческого предложения");
  StrSetText(SVOToInv,"Сч/ф из обслуживания и ремонта");
  StrSetText(SVOToOffHire,"Items In from Service Order");
  StrSetText(SVOToDispatch,"Items Out from Service Order");
  StrSetText(LimitToResLoc,"Ограничить пользователя по местоположению комнаты");
  StrSetText(LockIgnoreTR,"Блокировать исключения для транзакций");         
  StrSetText(LockIgnoreVI,"Блокировать исключения для расчётов с поставщиками");         
  StrSetText(LockIgnoreIV,"Блокировать исключения для расчётов с клиентами");         
  StrSetText(LockIgnoreAct,"Блокировать исключения для детельностей");         
  StrSetText(LockIgnoreOther,"Блокировать исключения для других записей");         
  StrSetText(AllowLoginOutsideWorkHours,"Вход в систему не в рабочее время");
  StrSetText(AllowNPTSIVLogout,"Выход из системы с сч/ф (сенсорный экран)");
  StrSetText(LogoutUserAfterPrintingBarTab,"Выход пользователя из системы после печати счета ресторана");
  StrSetText(AllowIVTSLoyaltyPointsBonus,"Бонусные накопительные баллы в  сч/ф сенсорн. экр.");
  StrSetText(AllowIVTSLoyaltyPayment,"Оплата накопительными баллами сч/ф (сенсорный экран)");
  StrSetText(AllowMovingFoliotoRsrv,"Перемещение товаров на другое резервир.");
  StrSetText(AllowManyActiveProd,"Несколько активных производств");
  StrSetText(AllowNegCLIn,"Отрицательные суммы в ПКО");
  StrSetText(AllowNegCLOut,"Отрицательные суммы в РКО");
  StrSetText(AllowNegOP,"Отрицательные значения на платеже поставщику");
  StrSetText(AllowNegIP,"Отрицательные значения на платеже клиента");
  StrSetText(AllowPOSIVNegQty,"Отрицательное количество в сч/ф кассового терминала");
  StrSetText(AllowNegativePriceonIV,"Negative Unit Price on an SL Invoice");  
  StrSetText(SMToTrans,"Запись операций из симуляций");
  StrSetText(ActOK,"Утвержение активностей");
  StrSetText(AT2WrofOK,"Утверждение выбытия ОС");
  StrSetText(BudOK,"Утверждение бюджета");
  StrSetText(OKCashIn,"Утверждение ПКО");
  StrSetText(CashInvOK,"Утверждение сч/ф на наличные");
  StrSetText(OKCashOut,"Утверждение РКО");
  StrSetText(CredInvOK,"Утверждение кредитных сч/ф");
  StrSetText(DAOK,"OK Суточные возмещения");
  StrSetText(SHOK,"Утверждение отгрузок");
  StrSetText(HRMCOChangeOK,"Утверждение приложений к трудовым договорам");
  StrSetText(HRMCOOK,"Утверждение трудовых договоров");
  StrSetText(ExpenseOK,"Утверждение авансового отчета");
  StrSetText(PUOK,"Утверждение поступлений на склад");
  StrSetText(InvOK,"Утверждение сч/ф клиенту");
  StrSetText(HRMJPOK,"Утверждение должностей");
  StrSetText(LeaveApplicationOK,"OKing Leave Applications");
  StrSetText(LeaveTransferOK,"OKing Leave Transfers");
  StrSetText(OROK,"Утверждение счетов");
  StrSetText(OPOK,"Утверждение платежей поставщикам");
  StrSetText(ProdPlanOK,"Утверждение плана произзводства");
  StrSetText(CredVIOK,"Утверждение кредитных сч/ф поставщика");
  StrSetText(VIOK,"Утверждение сч/ф поставщика");
  StrSetText(POPlanOK,"Утверждение плана закупок");
  StrSetText(POOK,"Утверждение заказов поставщикам");
  StrSetText(IPOK,"Утверждение платежей клиентов");
  StrSetText(RetPUOK,"Утверждение возврата поставщику");
  StrSetText(RetOK,"Утверждение возврата");
  StrSetText(RevBudOK,"Утверждение прогнозов");
  StrSetText(SalesForecastOK,"Утверждение прогнозов продаж");
  StrSetText(DropSHOK,"Утверждение уведомл. об отгр.");
  StrSetText(HRMSEOK,"Утверждение оценки знаний");
  StrSetText(SDOK,"Утверждение списания со склада");
  StrSetText(StockPolicyOK,"Утверждение складской политики");
  StrSetText(SROK,"Утверждение переоценки склада");
  StrSetText(TimeSheetOK,"Утверждение таблиц времени");
  StrSetText(WorkSheetOK,"Утверждение таблиц времени");
  StrSetText(OpenCashDrawer,"Открытие кассы");
  StrSetText(OpenMarketplace,"Открыть Магазин"); 
  StrSetText(OpenVcFromTBIV,"Открытие регистра из записи операции по проекту");
  StrSetText(OpenTRFromSpec,"Открытие записи из меню Операция");
  StrSetText(EDIORToOR,"Счёт из EDI счетов");
  StrSetText(QTToOrd,"Счёт из предложения");
  StrSetText(OPOrder,"Заказ платежа");
  StrSetText(OverrideLegalSerialNr,"Override Legal Serial No."); //!!TRANSLATE
  StrSetText(QTToIVCash,"POS Invoice from Quotation");
  StrSetText(AllowPOSOfflineChanging,"Pедактирование счетов-фактур кассового терминала оффлайн");
  StrSetText(IPToPrepIV,"Предоплата клиента в сч/ф");
  StrSetText(PrintToFiscPrnt,"Печать на фискальном принтере");
  StrSetText(QTToPR,"Project from Quotation");  
  StrSetText(BUQTToTBBU,"Предложение по проекту в бюджет");
  StrSetText(VEIVToVI,"Сч/ф поставщика из электронного сч/ф поставщика");
  StrSetText(PUToVI,"Сч/ф поставщика из поступления");
  StrSetText(POCOToVI,"Сч/ф поставщика из паспорта сделки");
  StrSetText(POToVI,"Сч/ф поставщика из заказа поставщику");
  StrSetText(IntORToPO,"Заказ постащику из внутреннего заказа");
  StrSetText(ORToPO,"Счёт поставщика из счета клиенту");
  StrSetText(TBBUToPO,"Заказ поставщику из бюджета проекта");
  StrSetText(POCOToPO,"Заказ поставщику из контракта поставщика");
  StrSetText(POQTToPO,"Заказ поставщику из предложения на покупку");
  StrSetText(SVOToPO,"Заказ постащику из заказа на обсл.");
  StrSetText(WSToPO,"Заказ постащику из таблицы работ");
  StrSetText(PrintPreviewNotApproved,"Print Preview not Approved Records"); //!!TRANSLATE
  StrSetText(QualifyCUForRvrsVAT,"Qualify for Reverse #VAT#"); //!!TRANSLATE
  StrSetText(StockMovOK,"Получение перемещения товара");
  StrSetText(ReloadBIData,"Перезагрузить данные БА"); 
  StrSetText(AllowNPTSReprint," Перепечатать строки сч/ф (сенсорный экран)");
  //StrSetText(RequestSchedImport,"Request Scheduled Import");
  StrSetText(RequestSchedMaint,"Request Scheduled Maintenance");
  StrSetText(RequireAcceptanceMail,"Require Mail Acceptance"); //!!TRANSLATE
  StrSetText(JobCheckOut,"Резервирование - Выезд");
  StrSetText(JobAddItem,"Резервирование - Добавить товар");
  StrSetText(JobChargeStay,"Резервирование - Оплатить пребывание");
  StrSetText(JobCheckIn,"Резервирование - Заезд");
  StrSetText(JobShowAccount,"Резервирование - Показать состояние счета");
  StrSetText(JobShowGuestAccount,"Резервирование - Показать счет гостя");
  StrSetText(JobGenPrepayment,"Резервирование - Сгенерировать предоплату");
  StrSetText(AddItemsRsrtEvent,"Курорт - добавить мероприяие");
  StrSetText(RestaurantCustomerOnly,"Только клиент ресторана");
  StrSetText(PUToRetPU,"Возврат товаров из поступлений");
  StrSetText(ORToRet,"Возврат товаров из счетов клиентам");
  StrSetText(POToRetPU,"Возврат товаров из заказов поставщикам");
  StrSetText(SVOToRet,"Returned Goods from Service Order");
  StrSetText(WSToRet,"Returned Goods from Work Sheet");
  StrSetText(EnableRoomBookingCom,"Свободные номера на Booking.com");
  StrSetText(SentStockMovOK,"Отгрузка при перемещении товаров");
  StrSetText(SVOToSVGM,"Service Stock Transaction from Service Order");
  StrSetText(SendVATDeclNor,"Sending Electronic #VAT# Declaration");
  StrSetText(POToDropSH,"Уведомл. об отгр. из заказа поставщику");
  StrSetText(AuthQualCon,"Подписать проверку качества");
  StrSetText(AllowSplitItem,"Разделить товар на сч/ф сенсорн. экрана");
  StrSetText(IntORToSD,"Списание со склада из внутреннего заказа");
  StrSetText(IntORToStockMov,"Перемещение товаров из внутреннего заказа");
  StrSetText(ORToStockMov,"Перемещение товаров из счетов");
  StrSetText(PRToStockMov,"Перемещение товаров из производства");
  StrSetText(AllowRestAccTransfertoSL,"Перемещение счета ресторана в книгу продаж");
  StrSetText(AllowRestAccTransfertoInvoice,"Transfer Bar Tab to #Sales Ledger# Invoice");
  StrSetText(AllowTransfertoQuotation,"Transfer POS Invoice to Quotation");
  StrSetText(AllowTransfertoInvoice,"Перемещение сч/ф кас. терм. в сч/ф");
  StrSetText(AllowTransfertoSL,"Перемещение сч/ф кас. терм. в книгу продаж");
  StrSetText(AllowTransfertoOrder,"Перемещение сч/ф кас. терм. в счет клиенту");
  StrSetText(StockMovOrdFlagOff,"Unconfirming #Stock# Movements"); //!!TRANSLATE
  StrSetText(UnOKAll,"Снимать OK со всех записей");
  StrSetText(UnOKBud,"Снимать OK с бюджетов");
  StrSetText(UnOKDA,"Сниамть OK с суточных возмещений");
  StrSetText(UnOKCashCount,"Снимать OK со снятия кассы");
  StrSetText(UnOKOR,"Снимать OK со счетов");
  StrSetText(UnOKPO,"Снимать OK с заказов поставщикам");
  StrSetText(UnOKRevBud,"Снимать OK с прогнозов");
  StrSetText(UpdatePOSEvent,"Разрешить обновлять сессии POS");
  StrSetText(AllowUsingAddonBarTab,"Использовать кнопку Добавить на счете ресторана");
  StrSetText(AllowUsingBookingsonBarTab,"Использовать кнопку 'Резерв.' на счете ресторана");
  StrSetText(AllowUsingPaymentonBarTab,"Использовать кнопку 'Платеж' на счете ресторана");
  StrSetText(AllowUsingRoomonBarTab,"Использовать кнопку 'Комната' на счете ресторана");
  StrSetText(AllowUsingSplitonBarTab,"Использовать кнопку 'Разделить' на счете ресторана");
  StrSetText(AllowUsingSubonBarTab,"Использовать кнопку 'Вычесть' на счете ресторана");
  StrSetText(ViewBI,"Просмотр BI");
  StrSetText(ViewDashboard,"Просмотр панели инструментов");
  StrSetText(ViewDashboardTopCustomers,"Просмотр панели инструментов - топ клиентов"); 
  StrSetText(ViewDashboardDebCred,"Просмотр панели инструментов - топ должников"); 
  StrSetText(ViewDashboardTopItemGroups,"Просмотр панели инструментов - топ групп товара"); 
  StrSetText(ViewDashboardPipeline,"Просмотр панели инструментов - топ в воронке"); 
  StrSetText(ViewDashboardPnL,"Просмотр панели инструментов - -топ по прибыли и убыткам"); 
  StrSetText(ViewDashboardTopSalesmen,"Просмотр панели инструментов - топ продавцы"); 
  StrSetText(ViewCostPrice,"Посмотреть стоимость затрат");
  StrSetText(AllowRestAccRowsVoid,"Отменять строки в счетах ресторана");
  StrSetText(AllowIVTSRowsVoid,"Отменять строки сч/ф, сенс. экран");
  StrSetText(AllowNPTSIVRowsVoid,"Отменять строки счета кас.терм., сенс. экран");
  StrSetText(AllowNoClockInOut,"Разрешить работу без активностей включения/выключения счет. врем.");
  StrSetText(WorkflowOverview,"Обзор рабочих процессов");  
  StrSetText(YodleeData,"Importing Yodlee Data"); //!!TRANSLATE
  EndStrSet;
  
  SetBegin(11);
  SetText(0,"Проект");
  SetText(1,"Счет");
  SetText(2,"Клиент");
  SetText(3,"Производство");
  EndSet;
  
  SetBegin(12);
  SetText(0,"Обычный");
  SetText(1,"Внутренний");
  EndSet;
  
  SetBegin(13);
  SetText(0,"-");
  SetText(1,"В процессе");
  SetText(2,"В бюджете");
  SetText(3,"Внутренний");
  EndSet;

  SetBegin(14);
  SetText(kPLDefRowTypeItemGroup,"Группа товаров");
  SetText(kPLDefRowTypeItem,"Товар"); 
  EndSet;
  
  SetBegin(15); /* Try to keep them in alphabetical order */
  SetText(ACTFORMPS,"Деятельность");
  SetText(ADRLABFORMPS,"Карточки адресов");
  SetText(AGREEMENTFORMPS,"Соглашение");
  SetText(AT2WROFFORMPS,"Выбытие актива");
  SetText(AT2FORMPS,"Актив");
  SetText(AT2PUFORMPS,"Ввод актива в эксплуатацию");
  SetText(AT2REVFORMPS,"Переоценка актива");
  SetText(AT2MOVFORMPS,"Статус актива");
  SetText(RESTACCFORMPS,"Счёт ресторана");
  SetText(BPCHANGEFORMPS,"Изменение отпускной цены"); 
  SetText(BATCHDEPFORMPS,"Batch Deposit"); 
  SetText(LETFORMPS,"Письмо клиенту");
  SetText(CASHEVENTFORMPS,"Событие кассы");
  SetText(CASHINVFORMPS,"Сч/ф на наличные");
  SetText(IVCASHFORMPS,"Сч/ф на наличные (POS)");
  SetText(CLINFORMPS,"Приход");
  SetText(CLINCOLFOMRPS,"Приходные ордер (составной)");      
  SetText(CLIN2FORMPS,"Сч/ф на приход в кассу");
  SetText(CLIN1FORMPS,"Приходный ордер");
  SetText(CLOUTFORMPS,"Расход");
  SetText(CLOUTCOLFOMRPS,"Расходный ордер (составной)"); 
  SetText(CLOUT2FORMPS,"Расходный ордер 2");
  SetText(CLOUT1FORMPS,"Расходный ордер");
  SetText(CLOUT3FORMPS,"Выплаты под отчет");
  SetText(COLLECTIONFORMPS,"Наборы");
  SetText(CONTRACTFORMPS,"Контракт");
  SetText(CONTLABFORMPS,"Этикетки контракта");
  SetText(CONTQUOTEFORMPS,"Предложение по контракту");
  SetText(COURSEEVENTFORMPERPS,"Проведение курса");
  SetText(CREDMANFORMPS,"Кредитный договор");
  SetText(CREDMANSTATFORMPS,"Выписки кредитного договора");
  SetText(CULABFORMPS,"Этикетки клиента/контактных лиц");
  SetText(CUSTOMSFORMPS,"Таможенная декларация");       
  SetText(DAFORMPS,"Суточные возмещения");
  SetText(SHLABFORMPS,"Этикетки отгрузки");
  SetText(SH1FORMPS,"Расходная накладная");   
  SetText(DETAGREEMENTFORMPS,"Подробное соглашение");
  SetText(DROPSHIPFORMPS,"Уведомление об отгр.");
  SetText(VEIVFORMPS,"Сч/ф поставщика");
  SetText(HRMCOFORMPS,"Трудовой договор");
  SetText(SLEUVATFORMPS,"НДС продаж (ЕС)"); 
  SetText(EXPGETFORMPS,"Авансовый отчет");   
  SetText(FEIVFORMPS,"Первое событие (продажи)");   
  SetText(GIFTRECEIPTFORMPS,"Подарочные чеки");
  SetText(GIFTCERTFORMPS,"Подарочные сертификаты");
  SetText(PURCHASEFORMPS,"Приходная накладная");
  SetText(PULABFORMPS,"Этикетки поступлений");
  SetText(GUESTDOCFORMPS,"Карточка гостя");
  SetText(HWCONTRACTFORMPS,ProductName & " Contract"); // We should have an "internal" enabler thing... to show these things or not...  
  SetText(INTIVFORMPS,"Внутренний счет-фактура");
  SetText(INTMOVEMENTFORMPS,"Внутренне перемещение");
  SetText(INTORFORMPS,"Внутренний заказ");
  SetText(OR2FORMPS,"Внутренний заказ клиента");
  SetText(INTRASTATVIFORMPS,"Intrastat #P/L#");
  SetText(INTRASTATFORMPS,"Intrastat #S/L#");
  SetText(INV1FORMPS,"Сч/ф");
  SetText(ITEMLABELFORMPS,"Товарные этикетки");
  SetText(ITEMSINFORMPS,"Прием товара");
  SetText(ITEMSOUTFORMPS,"Выдача товара");
  SetText(KFRFORMPS,"Ключевой финансовый показатель");
  SetText(MAILFORMPS,"Письмо");
  SetText(ARSFORMPS,"Ведомость неоплаченных сч/ф клиентам");      
  SetText(APSFORMPS,"Ведомость неоплаченных сч/ф поставщиков");      
  SetText(ORDFORMPS,"Счёт клиенту");      
  SetText(OWNCHECKFORMPS,"Собственные чеки");      
  SetText(PALLETLABFORMPS,"Этикеткии паллет");
  SetText(OP2DFORMPS,"Чеки на оплату");
  SetText(OPDFORMPS,"Платеж поставщику");
  SetText(CUPERFORMPS,"Ведомость расчетов с клиентами");
  SetText(VEPERFORMPS,"Ведомость расчетов с поставщиками");
  SetText(PERSPAYFORMPS,"Выплаты сотрудникам");
  SetText(SH3FORMPS,"Накладная");
  SetText(PRODORDERFORMPS,"Производство");
  SetText(PRODORDER3FORMPS,"Накладная производства");
  SetText(PRODOPERATIONFORMPS,"Накладная производственной операции");
  SetText(PRODORDFORMPS,"Заказ на производство");
  SetText(PRODLABFORMPS,"Этикетки производства");
  SetText(PROFORMAQTFORMPS,"Proforma Invoice, Quotation");       
  SetText(PROJECTFORMPS,"Проект");
  SetText(TBBUDGETFORMPS,"Бюджет проекта");
  SetText(PROJECTINFOFORMPS,"Информация о проекте");
  SetText(PROJECTSCHEDULEFORMPS,"График проекта");
  SetText(PROJECTTRANSFORMPS,"Записи операций по проекту");
  SetText(VIFORMPS,"Сч/ф покупку"); 
  SetText(PLBOOKFORMFORMPS,"Книга покупок (Россия)");
  SetText(PLBOOKHRVFORMPS,"Книга покупок (Хорватия)");
  SetText(POFORMPS,"Заказ поставщику");       
  SetText(POCOFORMPS,"Договора поставок");       
  SetText(POREMFORMPS,"Напоминание для закакза поставщику");       
  SetText(POQTFORMPS,"Ком. пред. поставщика");       
  SetText(QTFORMPS,"Коммерческое предложение");       
  SetText(IPDFORMPS,"Платеж клиента");
  SetText(RECIPEFORMPS,"Recipe"); 
  SetText(REMFORMPS,"Напоминание");      
  SetText(RENTQTFORMPS,"Предложение аренды");      
  SetText(RENTRESFORMPS,"Резервирование аренды");
  SetText(JOBFORMPS,"Резервирование");
  SetText(RESAVFORMPS,"Предложение по резервированию");
  SetText(RETFORMPS,"Возврат товаров"); 
  SetText(RETPUFORMPS,"Возврат товаров поставщику"); 
  SetText(ROUTINGPRFORMPS,"Маршрут производства");
  SetText(ROUTINGPRORDFORMPS,"Маршрут заказов на производство");
  SetText(SLBOOKFORMFORMPS,"Книга продаж (Россия)");
  SetText(SLBOOKHRVFORMPS,"Sales Book (Croatia)");
  SetText(SVOFORMPS,"Заказ на обслуживание");
  SetText(SVGMFORMPS,"Приемка/выдача");
  SetText(SMFORMPS,"Simulations");
  SetText(SDFORMPS,"Акт списания со склада");
  SetText(STOCKMOVFORMPS,"Акт перемещения товаров");
  SetText(STOCKMOVINVFORMPS,"#Склад# Движение сч-ф"); 
  SetText(SRFORMPS,"Переоценка склада");
  SetText(STOCKTRFORMPS,"Складские перемещения");
  SetText(STOCKTAKEFORMPS,"Инвентаризация");
  SetText(TIMESHEETFORMPS,"Таблица времени");
  SetText(TAXREPFORMPS,"Налоговый отчет");
  SetText(TOURISMLEVYFORMPS,"Туристический сбор");
  SetText(TRANSFERFORMPS,"Перемещение");
  SetText(TRFORMPS,"Записи операций");  
  SetText(VATIVFORMPS,"Коррекция НДС (продажи)");
  SetText(VATVIFORMPS,"Коррекция НДС (покупки)");
  SetText(VATREPFORMPS,"Отчёт по НДС");
  SetText(WAYLISTFORMPS,"Путевой лист"); 
  SetText(WHCERTIFICATEFORMPS,"Сертификат удержания");
  SetText(WHCERTIFICATEFORMPERPS,"Ведомость сертификатов удержания");
  SetText(WOFORMPS,"Заказ на работу");
  SetText(WSFORMPS,"Таблица работ");
//  SetText(AT2INFORMPS,"Asset Form"); 
//  SetText(AT2DPRFORMPS,"Asset Depreciation");
//  SetText(ATLABFORMPS,"Asset Labels");
//  SetText(AT2TAKEFORMPS,"Asset #Stocktaking#");
//  SetText(F_COMPANY,"Company");
//  SetText(CULABFORMPS,"Contact Label"); // Yes, they are the same... (as customer labels)
//  SetText(CONTCREDITFORMPS,"Contract Credit Query");
//  SetText(CONTDELIVERYFORMPS,"Contract Delivery");
//  SetText(CONTINSURANCEFORMPS,"Contract Insurance");
//  SetText(CONTSALESFORMPS,"Contract Sales Agreement");
//  SetText(CONTTRANSFERFORMPS,"Contract Transfer Notice");
//  SetText(PLACELABFORMPS,"Place Label");
//  SetText(PLACELETFORMPS,"Place Letter");
//  SetText(BUDGETQTFORMPS,"Project Quotations"); 
//  SetText(RESLETFORMPS,"Resource Letters");

//  SetText(INKASSOFORMPS,"Inkasso brev");      
//  SetText(INV1FORMPS,"Inv1Form");
//  SetText(INV2FORMPS,"Inv2Form");
//  SetText(INV3FORMPS,"Inv3Form");
//  SetText(AT2RESPFORMPS,"F/A Responsibles");
/*
//jarek, these are missing documents
Bar Tab  modRest);
Cash Invoices  modPOS);
Event  modRsrt);
Transfer  modRsrt);
Internal Invoices  modSL);
Intrastat P/L  modPL);
Pallet Labels  modWHM);
Production Order  modProd);
Prognosis Orders  modPOProg);
Purchase Order Reminders  modPO); 
Returned Goods To Supplier  modIN);
Tax Report  modNL);
VAT Correction  modSL); 
*/
  EndSet;  

/* DON'T CHANGE THE ORDER OR CODES */
  SetBegin(16);
/* Australia */
//  if (HasLocalization("AUS")) then begin
//  if (HasLocalization("AUS")) then begin  
    SetText(100,"Australia - Personal");
    SetText(101,"Australia - ABA");
//  end;
/* Czech */
//  if (HasLocalization("CZE")) then begin
    SetText(70,"Czech - Komercni banka - KB");
    SetText(71,"Czech - Ceskoslovenska obchodni banka - CSOB");
    SetText(72,"Czech - Ceska sporitelna - CS");
    SetText(73,"Czech - CITI bank");
    SetText(74,"Czech - ABO");
/* Norway, Denmark*/
/* Norway, Denmark*/
//  if (HasLocalization("DEN")) then begin
    SetText(0,"Denmark - Midtbank");
    SetText(1,"Denmark - Jyske Bank");
    SetText(2,"Denmark - Den Denske Bank");
    SetText(3,"Denmark - SYDBANK");
    SetText(4,"Denmark - Unibank");
    SetText(5,"Denmark - BGBank");
/* Estonia */
/* Estonia */
//  if (HasLocalization("EST")) then begin
//  SetText(15,"Estonia - Microbanker");
    SetText(16,"Estonia - Telehansa");
//  SetText(17,"Estonia - Tele pank");
//  SetText(18,"Estonia - пЊЖ_hispank");//not allowed, HTS will take over
    SetText(19,"Estonia - Riigikassa");
    SetText(80,"Estonia - SEB");
    SetText(82,"Estonia - Swedbank Gateway");
/* Finland */
/* Finland */
//  if (HasLocalization("FIN")) then begin
    SetText(13,"Finland - LM 00");
    SetText(14,"Finland - LM 02");
    SetText(24,"Finland - LM 03 (Sampo, Nordea, Optia)");
    SetText(25,"Finland - LM 03 (Osuuspankki)");
    SetText(26,"Finland - LM 03 (Handelsbanken)");
    SetText(27,"Finland - SEPA");
/* Germany */
/* Hungary */
/* Latvia */
    SetText(140,"Германия - SEPA");         
//  end;
/* Hungary */
//  if (HasLocalization("HUN")) then begin
    SetText(110,"Венгрия - HVB");         
//  end;
/* Latvia */
    SetText(152,"Italy - SEPA");  
/* Latvia */
//  if (HasLocalization("LVA")) then begin
    SetText(20,"Latvia - Unibanka");
    SetText(21,"Latvia - Nordea");
    SetText(22,"Latvia - HansaPlus");
    SetText(32,"Latvia - TeleHansa");
    SetText(52,"Latvia - Nord LB");
    SetText(150,"Latvia - FidaVista");
    SetText(154,"Latvia - SEPA");
//  SetText(33,"Latvia - Pareks-bank"); /* NO code for this bank*/
//  SetText(44,"Latvia - Vereinsbank"); /* NO code for this bank*/
/* Lithuania */
/* Lithuania */
//  if (HasLocalization("LTU")) then begin
    SetText(61,"Lithuania - LITAS-ESIS 1.1");
    SetText(153,"Литва - СЕПА");  
//    SetText(62,"Lithuania - 2"); not used anymore

  /* New Zealand */
//  if (HasLocalization("NAM")) then begin
    SetText(84,"Намибия");         
//  end;

  /* New Zealand */
//  if (HasLocalization("NZL")) then begin
  SetText(120,"New Zealand - ANZ");
  SetText(121,"New Zealand - ASB");
  SetText(122,"New Zealand - BNZ");
  SetText(123,"New Zealand - KiwiBank");
  SetText(124,"New Zealand - National Bank");
  SetText(125,"New Zealand - Westpac");
  
/* Norway */
/* Norway */
//  if (HasLocalization("NOR")) then begin
    SetText(9,"Norway - DnB Telepay");
    SetText(10,"Norway - K-Link");
    SetText(11,"Norway - SparNett");
    SetText(12,"Norway - Postbanken");
    SetText(35,"Norway - Telepay 2"); //turned out to be unnessesary, if it isn't, we activate it again....
    SetText(156,"Norway - SEPA"); //!!TRANSLATE
  
/* South Africa */
//  SetText(130,"South Africa - NetBank Business");
  
/* Sweden */
/* Sweden */
//  if (HasLocalization("ESP")) then begin
    SetText(151,"Испания - SEPA");         
//  end;
/* Sweden */
//  if (HasLocalization("SWE")) then begin
    SetText(6,"Sweden - SE-Banken");
    SetText(7,"Sweden - Handelsbanken");
    SetText(8,"Sweden - Nordea");
    SetText(23,"Sweden - Swedbank");
    SetText(63,"Sweden - PlusGirot");
    SetText(155,"Sweden - SEPA"); //!!TRANSLATE
/* England */
/* Where is the code for this ???? */
/* Why 30 ???? 25 is free. Why skip numbers ???? */
/* Why 30 ???? 25 is free. Why skip numbers ???? */
//  if (HasLocalization("GBR")) then begin
    SetText(30,"UK - Albany");
    SetText(31,"UK - BACS");
    SetText(33,"UK - Hexagon");
/* Iceland */
/* Iceland */
//  if (HasLocalization("ISL")) then begin
    SetText(40,"Iceland - bunaarbankinn");
    SetText(41,"Iceland - LANDSBANKINN");
    SetText(42,"Iceland - ISLANDSBANKI");
    SetText(43,"Iceland - SPARISJODIR");
/* Poland */
/* Poland */
//  if (HasLocalization("POL")) then begin
    SetText(50,"Poland - ING Bank");
    SetText(51,"Poland - Reiffaisen Bank");
    SetText(53,"Poland - BPH");
//  SetText(54,"Poland - Nordea");


//  if (HasLocalization("SVN")) then begin
    SetText(90,"Словения");         
//  end;
  EndSet;

  SetBegin(17);
  SetText(0,"Клиент");
  SetText(1,"Пробный документ");
  EndSet;  
/*
  SetBegin(18);
  SetText(HANSAWORD,"Microsoft Word");
  SetText(HANSAEXCEL,"Microsoft Excel");
  EndSet;  
  
  SetBegin(19);
  SetText(HANSATRANS,"FinHansa");
  SetText(MERITATRANS,"Merita Pankki");
  EndSet;  
*/
  SetBegin(20);
  SetText(1,"Депозит");
  SetText(2,"Удержание");
  SetText(3,"Исправление депозита");
  SetText(4,"Исправление удержания");
  EndSet;  
  
/* IstпЊКllet fпЊЪr kryssruta i matris */
  SetBegin(21);
  SetText(0,"-");
  SetText(1,"OK");
  EndSet;  
  
// Where is this used?? I can't find it anywhere...
  SetBegin(22);
  SetText(700,"BetalningsrпЊЪrelsetjпЊКnst");
  SetText(701,"Service Periodic Payment");
  SetText(702,"Invoice Payment Service");
  SetText(703,"Payment Terminal Service");
  SetText(704,"Direct Debit/Automatic Payment Service");
  SetText(705,"Payment with reference");
  SetText(706,"Payment Service");
  SetText(710,"Deposit");
  SetText(720,"Withdrawal");
  SetText(721,"Payment With Card");
  SetText(722,"Проверить");
  SetText(723,"Taxi/Bus");
  SetText(730,"Commission");
  SetText(740,"Interest debit");
  SetText(750,"Interest credit");
  SetText(760,"Loan (amortisation, interest and commission");
  SetText(761,"Amortisation of loan");
  EndSet;  

  StrSetBegin(23);
  StrSetText(BalRn,"Баланс");
  StrSetText(ResRn,"Прибыль/убытки");
  StrSetText(KeyRn,"Финансовые показатели");
  StrSetText(VAT2Rn,"Отчёт по НДС");
  StrSetText(ICACRn,"Сравнение межфирменных A/C");  
  EndStrSet;

  SetBegin(24);
  SetText(kTransactionRowTypeAny,"Любые");  //Any
  SetText(kTransactionRowTypeManual,"Р");  //Manual
  SetText(kTransactionRowTypeCustomer,"К");  //Customer
  SetText(kTransactionRowTypeSupplier,"П");  //Supplier
  SetText(kTransactionRowTypeStock,"С");  //Stock
  EndSet;
  
  SetBegin(25);
  SetText(10,"Eksport/Import av skip");
  SetText(11,"Eksport/Import av plartform/riggar");
  SetText(12,"Eksport/Import av fly");
  EndSet;

  SetBegin(26);
//  SetText(kReceiptBankBPHPoland,"xxx?");  
  SetText(12,"Customer Kid Code");
  SetText(kReceiptBankeCredit,"эл.кредит"); 
  SetText(10,"Kid Code 14");
  SetText(11,"Kid Code 15(2)");
//  SetText(2,"xxx?");  
//  SetText(8,"xxx?"); // Finance Credit Norge ASA"
//  if (HasLocalization("NOR")) then begin 
  SetText(kReceiptBankBBSOcrGiroNorway,"BBS OcrGiro (NOR)");
  SetText(kReceiptBankGjensidigeNorway,"Gjensidige Bank (NOR)");
    SetText(kReceiptBankFinansNorway,"Норвегия - NOR finans"); 
    SetText(kReceiptBankNordeaFinans,"Норвегия - Nordea finans"); 
  SetText(kReceiptBankBedriftsfinans,"Bedriftsfinans");
  SetText(kReceiptBankDNBNorway,"DNB Factoring (NOR)");
  SetText(kReceiptBankKFinansNorway,"K-Finans (NOR)");
  SetText(kReceiptBankNORDFinansNorway,"NORD finans (NOR)");
  SetText(kReceiptBankSGFinansNorway,"SG Finans (NOR)");
//  SetText(8,"xxx"); // Finance Credit Norge ASA");  //should maybe be removed. They are bankrupt.
//  if (HasLocalization("DEN")) then begin 
    SetText(kReceiptBankNORDFinansDenmark,"Дания - NORD finans"); 
  SetText(9,"Kid Code 15");
//  end;
//  if (HasLocalization("SWE")) then begin 
  SetText(kReceiptBankBGcStandardSweden,"Bgc standard (SWE)");
  SetText(kReceiptBankPBKOutsourcingSweden,"PBK Outsourcing (SWE)");
//  SetText(kReceiptBankBPHPoland,"BPH (POL)");
//  if (HasLocalization("CZE")) then begin 
  SetText(kReceiptBankCITIChech,"CITI (CZE)");
  SetText(kReceiptBankABOChech,"ABO (CZE)");
//  end;
//  if (HasLocalization("USA")) then begin 
  SetText(kReceiptBankChaseUSA,"Chase (USA)");
  SetText(kReceiptBankCITIUSA,"CITI (USA)");
  SetText(kReceiptBankUSUSA,"US Bank (USA)");
//  end;
//  if (HasLocalization("FIN")) then begin 
  SetText(kReceiptBankNDAFIN,"NDA (FIN)");
  SetText(kReceiptBankcamt054FIN,"camt.054 (FIN)");
  SetText(kReceiptBankSEBFinland,"SEB (FIN)"); 
//  end;

//    SetText(kReceiptBankOFX,"Credit Note");
  EndSet;

  SetBegin(27);
  SetText(0,"-");
  SetText(1,"С");
  EndSet;

  SetBegin(28);
  SetText(kCompanyActive,"Активный");
  SetText(kCompanyInactive,"Неактивный");
  SetText(kCompanyDeleted,"Удаленный");
  EndSet;

  SetBegin(29);
  SetText(kFactoringFormatNone,"No Factoring");
  SetText(kFactoringFormatNordeaBankFIN,"Nordea (FIN)");
  SetText(kFactoringFormatGjensidigeBankNOR,"Gjensidige Bank (NOR)");
  SetText(kFactoringFormatFactoringFinansNOR,"Factoring Finans (NOR)");
  SetText(kFactoringFormatOsuusPankkiFIN,"Osuus Pankki (FIN)");
  SetText(kFactoringFormatNordeaBankSWE,"Nordea (SWE)");
  SetText(kFactoringFormatNORDfinans,"NORD finans");
//  SetText(7,"xxx"); // Finance Credit Norge ASA");
  SetText(kFactoringFormatKredittstyring,"Kredittstyring");
  SetText(kFactoringFormatLIICE,"LI (ICE)");
  SetText(kFactoringFormatLBICE,"LB (ICE)");
  SetText(kFactoringFormatBIICE,"BI (ICE)");
  SetText(kFactoringFormatSPICE,"SP (ICE)");
  SetText(kFactoringFormatFaktabFinans,"Faktab Finans");
  SetText(kFactoringFormatIntrumJustitia,"Intrum Justitia");
  SetText(kFactoringFormatBedriftsfinans,"Bedriftsfinans");
  SetText(kFactoringFormatBunararbankinn,"BunaпЊМarbankinn");
  SetText(kFactoringFormatISLANDSBANKI,"ISLANDSBANKI");
  SetText(kFactoringFormatSPARISJODIR,"SPARISJODIR");
  SetText(kFactoringFormatLANDSBANKINN,"LANDSBANKINN");
  SetText(kFactoringFormatNORDfinansDK,"NORD finans (DK)");
  SetText(kFactoringFormatCredit,"eCredit");
  SetText(kFactoringFormatNordeafinans,"Nordea finans");
  SetText(kFactoringFormatSEB,"SEB");
  SetText(kFactoringFormatHandelsbankenSWE,"Handelsbanken (SWE)");
  SetText(kFactoringFormatSampoFIN,"Sampo (FIN)");
  SetText(kFactoringFormatSGFinansNOR,"SG Finans (NOR)");
  SetText(kFactoringFormatHandelsbankenFIN,"Handelsbanken (FIN)");
  SetText(kFactoringFormatFinvoiceFIN,"Finvoice (FIN)");
  EndSet;

  SetBegin(30);
  SetText(1,"Отчёт");
  SetText(2,"Экспорт данных");
  SetText(3,"Импорт данных");
  EndSet;

  SetBegin(31);
  SetText(0,"-");
  SetText(1,"С возм. фактурир.");
  SetText(2,"Гарантия");
  SetText(3,"Контракт");
  SetText(4,"Goodwill");
  EndSet;

  SetBegin(32); /* */
  SetText(0,"Созд. зап. опер.");
  SetText(1,"Не созд. зап. опер.");
  EndSet;

  SetBegin(33);
  SetText(0,"Сч/ф не выставлен");
  SetText(1,"Сч/ф уже выставлен");
  EndSet;

  SetBegin(34); // MailVc
  SetText(kMailRowTypeTo,"Кому");
  SetText(kMailRowTypeFrom,"От");
//  SetText(kMailRowTypeFile,"Файл");
  SetText(kMailRowTypeCC,"Cc");
  SetText(kMailRowTypeBCC,"Bcc");
  EndSet;

  SetBegin(35);
  SetText(kConfClassConference,"Конференция");
  SetText(kConfClassNews,"Новости");
  SetText(kConfClassBillboard,"Доска объявлений");
  SetText(kConfClassLibrary,"Библиотека");
  SetText(kConfClassFolder,"Папка");
  SetText(kConfClassMailbox,"Почт. ящик");
  SetText(kConfClassArchive,"Архив");
  EndSet;
  
  SetBegin(36); /* */
  SetText(kPayModeTypeFree,"Свободный");
  SetText(kPayModeTypeCheque,"Полученные чеки");
  SetText(kPayModeTypeOwnCheque,"Собственные чеки");
  SetText(kPayModeTypeCreditCard,"Кредитная карта");
  SetText(kPayModeTypeDebitCard,"Дебитная карта");
  SetText(kPayModeTypeWithholding,"Kinnipidamine");//##ii
  SetText(kPayModeTypeCash,"Наличными");
  SetText(kPayModeTypeResource,"Ресурс");
  SetText(kPayModeTypeOnAccount,"На счет");
  SetText(kPayModeTypeRegionalWithholding,"Региональное удержание");
  SetText(kPayModeTypeSocialInsuranceWithholding,"Social Insurance Withholding"); 
  SetText(kPayModeTypeVATWithholding,"Удержание НДС");
  SetText(kPayModeTypeWithholding,"Удержано");
  SetText(kPayModeTypeBankTransfer,"Bank Transfer");
  SetText(kPayModeTypeGiftVoucher,"GiftVoucher");
  if (HasLocalization("PRT")) then begin 
    SetText(kPayModeTypeContraPayment,"Contra Payment");
    SetText(kPayModeTypeCommercialPaper,"Commercial Paper");
    SetText(kPayModeTypeRestaurantTicket,"Restaurant Ticket");
    SetText(kPayModeTypeGoodsExchange,"Goods Exchange");
    SetText(kPayModeTypeOther,"Другое");
    SetText(kPayModeTypeATMReferences,"ATM Reference");
    SetText(kPayModeTypeEM_LoyaltyPoints,"Electronic money or Loyalty points");
  end;
  EndSet;

  SetBegin(37); /* */
  SetText(0,"Другое");
  SetText(1,"Visa");
  SetText(2,"MasterCard");
  SetText(3,"American Express");
  SetText(4,"Diners");
  SetText(5,"Maestro/Switch");
  SetText(6,"Visa Electron");
  SetText(7,"Discover");
  SetText(8,"Carte Blanche");
  SetText(9,"JCB");
  SetText(10,"EnRoute");
  SetText(11,"JAL");
  SetText(12,"Delta");
  SetText(13,"Dankort");
  SetText(14,"Laser");
  SetText(15,"Carte Bleue");
  SetText(16,"Carta Si");
  SetText(17,"NRAH");
  SetText(18,"Tiliraha");
  EndSet;

  SetBegin(38); /* */
  SetText(0,"Allowed Target");
  SetText(1,"Allowed Origin");
  SetText(2,"Allowed Temporary");
  SetText(3,"Default Temporary Собственные чеки");
  SetText(4,"Default Target Cheque");
  SetText(5,"Default Target IOU");
  SetText(6,"Default Temporary #Cheque#");
  SetText(7,"Default Temporary IOU");
  SetText(8,"Default Temporary Own IOU");
  SetText(9,"Allowed Origin Own");
  SetText(10,"Allowed Temporary Own Cheque");
  SetText(11,"Allowed Target Own Cheque");
  EndSet;

/* Removed from the Activities now. */
/*
  SetBegin(39);
  SetText(0,"Нет связи");
  SetText(1,"Предложения");
  SetText(2,"Счета клиентам");
  SetText(3,"Сч/ф клиентам");
  SetText(4,"Проект");
  SetText(5,"Сч/ф поставщика");
  SetText(6,"Письмо");
  SetText(7,"Заказ на работу");
  SetText(8,"Контракт");//JJ
  EndSet;
*/

  SetBegin(40);
  SetText(0,"Брутто");
  SetText(1,"BN");
  SetText(2,"BasicWithdrawn");
  SetText(3,"BasicTax");
  SetText(4,"Withdrown");
  SetText(5,"Налог");
  EndSet;

  SetBegin(41);
  SetText(0,"Не отмечать");
  SetText(1,"Всегда отмечать");
  EndSet;

  SetBegin(42);
  SetText(0,"360 дней");
  SetText(1,"365 дней");
  EndSet;

  SetBegin(43);
  SetText(0,"Country Deal");
  SetText(1,"Special A-Tax");
  SetText(2,"Код НДС");
  EndSet;

  SetBegin(44);
  SetText(0,"Обычные");
  SetText(1,"Не удалять");
  SetText(2,"Удалять на следующий день");
  EndSet;

  SetBegin(45);
  SetText(0,"Активно");
  SetText(1,"Передано");
  SetText(2,"Неверно");
  SetText(3,"Закрытие года - стадия 1");
  SetText(4,"Закрытие года - стадия 2");
  EndSet;

  SetBegin(46);
  SetText(kButtonColourDefault,"Default"); //!!TRANSLATE
  SetText(kButtonColourBlack,"Чёрный");
  SetText(kButtonColourRed,"Красный");
  SetText(kButtonColourGreen,"Зеленый");
  SetText(kButtonColourDeepBlue,"Голубой");
  SetText(kButtonColourYellow,"Желтый");
  SetText(kButtonColourCyan,"Темно-синий");
  SetText(kButtonColourPink,"Розовый");
  SetText(kButtonColourStrawberry,"Ярко-красный");
  SetText(kButtonColourLime,"Лимонный");
  SetText(kButtonColourSkyBlue,"Ярко-голубой");
  SetText(kButtonColourBlue,"Синий");
  SetText(kButtonColourDeepPurple,"Темно-пурпурный");
  SetText(kButtonColourGold,"Золотой");
  SetText(kButtonColourCoffee,"Кофейный");
  SetText(kButtonColourChocolate,"Шоколадный");
  SetText(kButtonColourOrange,"Оранжевый");
  SetText(kButtonColourPlum,"Сиреневый");
  SetText(kButtonColourNightShade,"Темно-фиолетовый");
  SetText(kButtonColourDeepForest,"Темно-зеленый");
  SetText(kButtonColourFlamingo,"Фламинго");
  SetText(kButtonColourGray,"Серый");
  EndSet;

  SetBegin(47);
  SetText(kRegisterLoggingNone,"Не регистрировать");
  SetText(kRegisterLoggingAll,"Регистрировать пользователя и время");
  SetText(kRegisterLoggingAll_KeepRecord,"Сохранять оригинальную запись");
  SetText(kRegisterLoggingOnlyUserChanges,"Сохранять пользователя и время (только пользоват. изменения)");
  SetText(kRegisterLoggingOnlyUserChanges_KeepRecord,"Сохранять оригинальную запись (только пользоват. изменения)");
//  SetText(kRegisterLoggingOnlyUserChanges_ChangedFields,"Log Changed field (User changes only)");
  SetText(kRegisterLogging_LogWhenFieldChanged_KeepRecord,"Keep Original Record when field changed"); //!!TRANSLATE
  EndSet;

  SetBegin(48);
  SetText(0,"Серия Internal Powerbook G3");
  SetText(1,"Факс/Модем U.S. Robotics 56k");
//  SetText(1,"Hayes 288"); /* ? */
//  SetText(2,"US Robotics 56k"); /* ? */
  EndSet;

  SetBegin(49);
  SetText(0,"14400");
  SetText(1,"9600");
  SetText(2,"7200");
  SetText(3,"4800");
  EndSet;

  SetBegin(50);
  SetText(0,"-");
  SetText(1,"Исключать из налоговых отчетов");
//  SetText(2,"Не облагается НДС");
  EndSet;

  SetBegin(51);
  SetText(0,"-");
  SetText(1,"+");
  EndSet;

  StrSetBegin(52);
  StrSetText(All,"Все сообщения");
  StrSetText(Recv,"Получатель");
  StrSetText(Received:,"Получено");
  StrSetText(To:,"Кому");
  StrSetText(Send,"Отправитель");
  StrSetText(Subj,"Тема");
  StrSetText(Body,"Содержание");
  StrSetText(AllFour,"Получатель или Получено или Кому"); /* Can't use comma */
  EndStrSet;

  SetBegin(53);
  SetText(0,"Новое");
  SetText(1,"БУ");
  SetText(2,"Восстановлено");
  EndSet;

  SetBegin(54);
  SetText(0,"Найдено");
  SetText(1,"Не найдено");
  SetText(2,"Лизинг");
  SetText(3,"Арендовано");
  SetText(4,"Законсервировано");
  SetText(5,"В ремонте");
//  SetText(6,"Disposed");
  SetText(7,"Useable"); //!!TRANSLATE
  SetText(8,"Damaged"); //!!TRANSLATE
  SetText(9,"Damaged - Repairable"); //!!TRANSLATE
  EndSet;

  SetBegin(55);
  SetText(0,"Группа активов");
  SetText(1,"Активы");
  EndSet;

  SetBegin(56);
  SetText(0,"Нет");
  SetText(1,"Epson TMU210"); 
  SetText(2,"Star TSP100"); 
  EndSet;

  SetBegin(57);
  SetText(0,"Период");
  SetText(1,"Без периода"); 
  EndSet;

  SetBegin(58);
  SetText(0,"Первый день");
  SetText(1,"Каждый день");
  SetText(2,"Последний день");
  EndSet;

  SetBegin(59);
  SetText(0,"Печатать");
  SetText(1,"Не печатать");
  EndSet;

  SetBegin(60);
  SetText(0,"Получено");
  SetText(1,"Отсутствует (будет начисление)");
  SetText(2,"Украдено (будет начисление)");
  SetText(6,"Удерживает (будет начисление)");
  SetText(3,"Выбыто");
  SetText(4,"Для обслуживания");
  SetText(5,"Товар аренды");
  SetText(7,"Разделить информацию");
  EndSet;

  SetBegin(61);
  SetText(0,"-");
  SetText(1,"Структура");
  EndSet;

  SetBegin(62);
  SetText(0,"Для аренды");
  SetText(1,"Может быть списан");
  SetText(2,"Может быть продан");
  SetText(3,"Аренда 3-им лицам");
  SetText(4,"Субподрядчик");
  EndSet;

  SetBegin(63);
  SetText(0,"Товар аренды");
  SetText(1,"Аксессуар");
  EndSet;

  SetBegin(64);
  SetText(0,"Активный");
  SetText(1,"На обслуживании");
  SetText(2,"Не активный");
  EndSet;

  SetBegin(65);
  SetText(0,"-");
  SetText(1,"Требовать суммы банка в осн.вал.1");
  SetText(2,"Требовать суммы банка в осн.вал.1 и 2");
  EndSet;

  SetBegin(66);
  SetText(kCashInRowTypeNormal,"ПКО");
  if (HasModSL) then begin
    SetText(kCashInRowTypeInvoice,"Счёт-фактура");         
  end;
  if (HasModPL) then begin
    SetText(kCashInRowTypeCredPurchaseInvoice,"Кред. сч/ф пост.");
  end;
  if (HasModExp) then begin
    SetText(kCashInRowTypePersonnelPayment,"Выплата");
  end;
  if (HasModSL and HasRussianPrepayment) then begin
    SetText(kCashInRowTypeCustomerPrepayment,"Предоплата клиента");
  end;
  if (HasModPL and HasRussianPrepayment) then begin
    SetText(kCashInRowTypeSupplierRevPrepayment,"Возврат предоплаты поставщиком");
  end;
  if (HasModCheck) then begin
    SetText(kCashInRowTypeCheque,"Чек");
  end;
  EndSet;

  SetBegin(67);
  SetText(0,"Календарь");
  SetText(1,"План");
  SetText(2,"План на время");
  EndSet;

  SetBegin(68);
  SetText(1,"Звонок");
  SetText(2,"Встреча");
  SetText(3,"Офис");
  SetText(0,"Другое");
  EndSet;

  SetBegin(69);
  SetText(0,"Нет");
  SetText(1,"POSNET 1 (Poland)"); 
  SetText(2,"POSNET 2 (Poland)"); 
  SetText(3,"OPTIMUS (Poland)"); 
  SetText(4,"POSNET Thermal 5V (Poland)"); 
  SetText(5,"FP3000 (Slovakia)"); 
  SetText(6,"Hasar (Argentina)"); 
  SetText(7,"Epson (Argentina)"); 
  SetText(8,"Fi-550 (Serbia)"); 
  EndSet;  

  SetBegin(70);
  SetText(0,"без десятичных"); 
  SetText(1,"один знак после"); 
  SetText(2,"два знака после"); 
  SetText(3,"три знака после"); 
  SetText(4,"четыре знака после"); 
  SetText(5,"пять знаков после"); 
  SetText(10,"0.05"); 
//  SetText(11,"вниз до 0.05"); 
  SetText(-1,"десятки"); 
  SetText(-2,"сотни"); 
  SetText(-3,"тысячи"); 
  EndSet;

  SetBegin(71);
  SetText(0,"Панель управления");
  SetText(1,"Счёт рест."); 
  SetText(2,"Месяц по ресурсу"); 
  SetText(3,"Счёт-фактура"); 
  SetText(4,"Новый счет рест."); 
  SetText(5,"Ввод времени производства"); 
  SetText(6,"Сч/ф супермаркета"); 
  SetText(7,"Расположение столиков в ресторане"); 
  SetText(8,"Сч/ф POS для сенсорн. экранов"); 
  SetText(9,"Деятельность"); 
  SetText(10,"Контакты"); 
  SetText(11,"Менджер задач");  
  SetText(12,"Business Comunicator");  
  EndSet;

  SetBegin(72);
  SetText(0,"Нет");
  SetText(1,"Открыто"); 
  SetText(2,"Закрыто"); 
  EndSet;

  SetBegin(73);
  SetText(kCashOutRowTypeNormal,"РКО");
  if (HasModSL) then begin
    SetText(kCashOutRowTypeCredSalesInvoice,"Кредит-нота");         
  end;
  if (HasModPL) then begin
    SetText(kCashOutRowTypeInvoice,"Сч/ф пост.");
  end;
  if (HasModExp) then begin
    SetText(kCashOutRowTypePersonnelPayment,"Выплата");
  end;
  if (HasModPL and HasRussianPrepayment) then begin
    SetText(kCashOutRowTypeSupplierPrepayment,"Предоплата поставщику");
  end;
  if (HasModSL and HasRussianPrepayment) then begin
    SetText(kCashOutRowTypeCustomerRevPrepayment,"Возврат предоплаты клиента");
  end;
  if (HasModCheck) then begin
    SetText(kCashOutRowTypeCheque,"Чек");
    SetText(kCashOutRowTypeOwnCheque,"Собственный #Cheque#");         
  end;
  EndSet;

  SetBegin(74);
  SetText(0,"Свободный");
  SetText(1,"Используется");
  SetText(2,"Товар в пути");
  SetText(3,"Ошибка");
  EndSet;

  SetBegin(75);
  SetText(0,"Готово к отсылке");
  SetText(1,"Послано на NT7000");
  SetText(2,"Принято NT7000");
  SetText(3,"Ошибка");
  SetText(10,"На конвеере");
  EndSet;

  SetBegin(76);
  SetText(0,"Вручную");
  SetText(1,"Отгрузка");
  SetText(2,"Перемещение");
  EndSet;

  SetBegin(77);
  SetText(0,"Автоматически");
  SetText(1,"Погрузка");
  SetText(2,"-");//Manual, not implemented
  SetText(3,"Закрыто");
  EndSet;

  SetBegin(78);
  SetText(0,"За комнату");
  SetText(1,"За гостя");
  EndSet;

  SetBegin(80);
  SetText(LangEnglish,"Английский");
  SetText(LangFrench,"Французкий");
  SetText(LangGerman,"Немецкий");
  SetText(LangDutch,"Голландский");
  SetText(LangSwedish,"Шведский");
  SetText(LangSpanish,"Испанский");
  SetText(LangDanish,"Датский");
  SetText(LangPortuguese,"Португальский");
  SetText(LangNorwegian,"Норвежский");
  SetText(LangJapanese,"Японский");
  SetText(LangArabic,"Арабский");
  SetText(LangFarsi,"Фарси");
  SetText(LangFinnish,"Финский");
  SetText(LangGreek,"Греческий");
  SetText(LangHebrew,"Иврит");
  SetText(LangIcelandic,"Исландский");
  SetText(LangItalian,"Итальянский");
  SetText(LangLithuanian,"Литовский");
  SetText(LangPolish,"Польский");
  SetText(LangHungarian,"Венгерский");
  SetText(LangEstonian,"Эстонский");
//  SetText(LangLettish,"Lettish");
  SetText(LangLatvian,"Латышский");
//  SetText(LangLapponian,"Lapponian");
  SetText(LangLappish,"Саамский");
  SetText(LangFaeroese,"Фарерский");
  SetText(LangRussian,"Русский");
  SetText(LangFlemish,"Фламандский");
  SetText(LangIrish,"Ирландский");
  SetText(LangRomanian,"Румынский");
  SetText(LangCzech,"Чешский");
  SetText(LangSimplifiedChinese,"Simplified Chinese");
  SetText(LangSlovak,"Словацкий");
  SetText(LangSlovenian,"Словенский");
  SetText(LangSerbian,"Сербский");
  SetText(LangMacedonian,"Македонский");
  SetText(LangBulgarian,"Болгарский");
  SetText(LangUkrainian,"Украинский");
  SetText(LangByelorussian,"Белорусский");
  SetText(LangUzbek,"Узбекский");
  SetText(LangKazakh,"Казахский");
  SetText(LangAzerbaijani,"Азербайджанский");
  SetText(LangAzerbaijanAr,"Азербайджанский (арабский)");
  SetText(LangArmenian,"Армянский");
  SetText(LangGeorgian,"Грузинский");
  SetText(LangMoldavian,"Молдавский");
  SetText(LangKirghiz,"Киргизкий");
  SetText(LangTajiki,"Таджикский");
  SetText(LangTurkmen,"Туркменский");
  SetText(LangWelsh,"Валийский");
  SetText(LangBasque,"Баскский");
  SetText(LangCatalan,"Каталонский");
  SetText(LangLatin,"Латинский");
  SetText(LangBrazilian,"Бразильский");
  SetText(LangVietnamese,"Вьетнамский");
  SetText(LangCanadian,"Канадский английский");
  SetText(LangCroatian,"Хорватский");
  SetText(LangTurkish,"Турецкий");
  SetText(LangAngolanPortuguese,"Angolan Portuguese");
  SetText(LangMozambicanPortuguese,"Мозамбийский Португальский"); 
  EndSet;

  SetBegin(81);
  SetText(vatEnglish,"по умолчанию (Великобритания)"); // English is Default, it makes it easier for people in a country not listed
  SetText(vatAlgeria,"Алжир"); 
  SetText(vatAngolan,"Анголия"); 
  SetText(vatArgentinean,"Аргентина"); 
  SetText(vatAustralia,"Австралия");   
  SetText(vatAzerbaijan,"Азербайджан");
  SetText(vatBahrain,"Бахрейн"); 
  SetText(vatBelarusian,"Белоруссия");
  SetText(vatBolivian,"Боливия");
  SetText(vatBrazil,"Бразилия");
  SetText(vatCanada,"Канада");  
  SetText(vatChina,"Китай");
  SetText(vatCostaRican,"Коста-Рика");
  SetText(vatCroation,"Хорватия");
  SetText(vatCzech,"Чехия");
  SetText(vatDanish,"Дания");
  SetText(vatEgypt,"Египет"); 
  SetText(vatEstonian,"Эстония");
  SetText(vatFinnish,"Финляндия");
  SetText(vatFrench,"Франция");
  SetText(vatGerman,"Германия");
  SetText(vatGuatemalean,"Гватемала");
  SetText(vatHungarian,"Венгрия");
  SetText(vatHonduran,"Гондурас");
  SetText(vatIcelandic,"Исландия");
  SetText(vatIndian,"Индия");
  SetText(vatItalian,"Италия");
  SetText(vatJordan,"Иордания"); 
  SetText(vatLithuanian,"Литва");
  SetText(vatLatvian,"Латвия");
  SetText(vatKenyan,"Кения");
  SetText(vatKuwait,"Кувейт"); 
  SetText(vatLebanon,"Ливан"); 
  SetText(vatMexican,"Мексика");
  SetText(vatMozambican,"Мозамбийский"); 
  SetText(vatNorwegian,"Норвегия");
  SetText(vatNamibian,"Намибия");
  SetText(vatNewZealand,"Новая Зеландия");  
  SetText(vatNicaraguan,"Никарагуа");
  SetText(vatOman,"Оман"); 
  SetText(vatPanamanian,"Панама");
  SetText(vatParaguayan,"Парагвай"); 
  SetText(vatPhilippinian,"Филиппины");
  SetText(vatPolish,"Польша");
  SetText(vatPortuguese,"Португалия");
  SetText(vatQatar,"Катар"); 
  SetText(vatRomanian,"Румыния");
  SetText(vatRussian,"Россия");
  SetText(vatSingaporean,"Сингапур");
  SetText(vatSalvadorian,"Сальвадор");
  SetText(vatSaudiArabia,"Саудовская Аравия");
  SetText(vatSerbian,"Сербия");
  SetText(vatSlovak,"Словакия"); 
  SetText(vatSlovenian,"Словения");
  SetText(vatSAF,"ЮАР");
  SetText(vatSpanish,"Испания");
  SetText(vatSwedish,"Швеция");
  SetText(vatUkrainian,"Украина");
  SetText(vatUAE,"ОАЭ"); 
  SetText(vatUnitedStates,"США");
  SetText(vatYemen,"Йемен"); 
  SetText(vatZimbabwean,"Зимбабве");
  EndSet;
  
  SetBegin(82);
  SetText(1,"boolean");
  SetText(2,"integer");
//  SetText(3,"real");
  SetText(4,"string");
//  SetText(6,"list");
//  SetText(7,"record");
//  SetText(9,"row");
  SetText(11,"decimal");
  SetText(12,"long");
  SetText(13,"Дата");
  SetText(17,"Время");
//  SetText(21,"area");
//  SetText(22,"rectangle");
  EndSet;

  SetBegin(83);
  SetText(0,"повтор.");
  SetText(1,"один раз"); 
  EndSet;

  SetBegin(84);
  SetText(0,"Запись");
  SetText(1,"Строка"); 
  EndSet;

  SetBegin(85);
  SetText(kSingleFunctionComplex,"Простая функция");
  SetText(kSingleFunctionRegister,"Регистр");
/* Isn't flexible enough to use these...
  SetText(kSingleFunctionSetting,"Setting");
  SetText(kSingleFunctionReport,"Report");
  SetText(kSingleFunctionDocument,"Document");
  SetText(kSingleFunctionExport,"Export");
  SetText(kSingleFunctionImport,"Import");
  SetText(kSingleFunctionMaintenance,"Maintenance");  
*/
  EndSet;
  
  StrSetBegin(86);
  StrSetText(Orders,"Ввод счетов");
  StrSetText(Invoices,"Ввод сч/ф");
  StrSetText(Quotes,"Ввод предложений");
  StrSetText(Mail,"Почта и конференции");
  StrSetText(Calendar,"Календарь и Диспетчер Задач"); 
  EndStrSet;
  
  SetBegin(87);
  SetText(0,"Выберите");
  SetText(1,"Mac OS"); // Should have пЊ™ in the end, but it doesn't work in Windows....
  SetText(2,"Windows");
  SetText(3,"Linux");
  SetText(4,"AIX");
  SetText(5,"OS/400");
  SetText(6,"Solaris");
  SetText(31,"Другое"); // Don't have any higher than this
  EndSet;
  
  SetBegin(88);
  SetText(0,"Выберите");
  SetText(1,"Apple Macintosh");
  SetText(2,"Generic PC");
  SetText(3,"IBM xSeries");
  SetText(4,"IBM pSeries");
  SetText(5,"IBM iSeries");
  SetText(6,"Sun Sparc");
  SetText(31,"Другое"); // Don't have any higher than this
  EndSet;

  StrSetBegin(89);
  StrSetText("","UTF-8 (Unicode)");
  StrSetText(ISO-8859-1,"ISO 8859-1 (Western Europe)");
  StrSetText(ISO-8859-4,"ISO 8859-4 (Baltic)");
  StrSetText(ISO-8859-13,"ISO 8859-13 (Baltic)"); //!!TRANSLATE
  StrSetText(ISO-8859-5,"ISO 8859-5 (Cyrillic)");
  StrSetText(ISO-8859-15,"ISO 8859-15 (western european with euro sign)");
  StrSetText(US-ASCII,"US ASCII");
  StrSetText(CP437,"DOS CP 437 (US)");
  StrSetText(CP850,"DOS CP 850 (Western Europe)");
  StrSetText(CP866,"DOS CP 866 (Cyrillic)");
  StrSetText(CP1250,"Windows codepage 1250 (Central Europe)");
  StrSetText(CP1251,"Windows codepage 1251 (Cyrillic)");
  StrSetText(CP1252,"Windows codepage 1252 (Western Europe)");
  StrSetText(CP1257,"Windows codepage 1257 (Baltic)");
  StrSetText(KOI8-R,"KOI8-R (Cyrillic)");
  StrSetText(MACINTOSH,"Apple Western Europe");
  StrSetText(ACE,"Apple Central Europe");
  StrSetText(ACYR,"Apple Cyrillic");
  StrSetText(MAZOVIA,"Mazovia");
  EndStrSet;
  
  SetBegin(90);
  SetText(kAnyClient,"Любой клиент");
  SetText(kClientAndroid,"Android");
  SetText(kClientBrowser,"Browser");
  SetText(kClientHandset,"Handset"); // Don't like the word, it WILL be misunderstood...
  SetText(kClientiPhone,"iOS");
  SetText(kClientLinux,"Linux");
  SetText(kClientClassic,"Mac OS 9");
  SetText(kClientOSX,"Mac OS X Carbon");
  SetText(kClientOSXCocoa,"Mac OS X Cocoa");
  SetText(kClientSymbian,"Symbian");
  SetText(kClientWindows,"Windows");
  SetText(kClientMetro,"Windows 8");
  SetText(kClientWindowsNet,"Windows .NET");
  SetText(kClientXT,"XT Client");
  SetText(kClientWebClient,"Веб-клиент");  
  SetText(kClientSyncClient,"Синхронизация клиента");         
  SetText(kClientSlave,"Gateway"); //!!TRANSLATE
  EndSet;

  SetBegin(91);
  SetText(0,"Принято");
  SetText(1,"Отклонено");
  EndSet;

  SetBegin(92);
  SetText(0,"Choose " & ProductName & " Company");
  SetText(13,"Аргентина");
  SetText(29,"Австралия");
  SetText(33,"Австрия");
  SetText(109,"Азербайджан");
  SetText(14,"Боливия");
  SetText(41,"Канада");
  SetText(43,"Хорватия");
  SetText(15,"Чехия");
  SetText(5,"Дания");
  SetText(94,"Dubai");
  SetText(17,"Эквадор");
  SetText(7,"Estonia " & ProductName);
  SetText(16,"Эстония (Excellent Business Solutions)");
  SetText(25,"Эстония (клиенты HansaRaama)");
  SetText(4,"Финляндия");
  SetText(107,"France");
  SetText(32,"Германия");
  SetText(18,"Гондурас");
  SetText(19,"Венгрия");
  SetText(27,"Исландия");
  SetText(40,"Ирландия");
  SetText(111,"Италия"); 
  SetText(44,"Кения");
  SetText(8,"Латвия");
  SetText(9,"Литва");
  SetText(38,"Мексика");
  SetText(20,"Ближний Восток");
  SetText(42,"Новая Зеландия");  
  SetText(112,"Северная Америка"); 
  SetText(2,"Norway " & ProductName);
  SetText(26,"Норвегия FirstOffice");
  SetText(21,"Парагвай");
  SetText(6,"Польша");
  SetText(22,"Португалия");
  SetText(10,"Россия");
  SetText(30,"Румыния");
  SetText(39,"Сингапур");
  SetText(31,"Словакия");
  SetText(23,"Словения");
  SetText(28,"Судан");
  SetText(12,"ЮАР");
  SetText(3,"Швеция");
  SetText(34,"Швецария");
  SetText(35,"Турция");
  SetText(1,"Великобритания");
  SetText(36,"Украина");
  SetText(37,"США");
  SetText(24,"Уругвай");
  SetText(45,"Zimbabwe");  
  SetText(99,"Компания, выбранная автоматически");
//  SetText(104,"Standard Apps");
  EndSet;
  
  SetBegin(93);
  SetText(0,"Finnvoice");
  EndSet;

  SetBegin(94);
  SetText(0,"Дата подтв.");
  SetText(1,"Дата нач.");
  SetText(2,"Дата окон.");
  EndSet;

  SetBegin(95);
  SetText(0 ,"-");
  SetText(1 ,"Номер");
  SetText(2 ,"Наименование");
  SetText(3 ,"Цена");
  SetText(4 ,"Картинка");
  SetText(5 ,"Текст товара");
  SetText(6 ,"Экстра текст");
  SetText(7 ,"Кнопка покупки");
  SetText(8 ,"Содержимое корзины");
  SetText(9 ,"Един.");
  SetText(10,"Содержимое корзины (редактир.)");
  SetText(11,"HTML код");
  EndSet;
  
  SetBegin(96);
  SetText(0,"нет");
  SetText(1,"да");
  EndSet;

  SetBegin(97);
  SetText(0,"Напоминания");
  SetText(1,"Без напоминаний");
  EndSet;

  SetBegin(98);
  SetText(0 ,"-");
  SetText(1,"Цена товара");
  SetText(2,"Таможня");
  SetText(3,"Фрахт");
  SetText(4,"Накладные 1");
  SetText(5,"Накладные 2");
  SetText(6,"Накладные 3");
  SetText(7,"Накладные 4");
  SetText(8,"Накладные 5");
  EndSet;
  
  SetBegin(99);
  SetText(0 ,"Все");
  SetText(1,"утвержд.");
  SetText(2,"неутвержд.");
  EndSet;

// Dangerous to add 120, it is in the middle of document types....
  SetBegin(120);
  SetText(0,"-");
  SetText(1,"Hansa");
  SetText(2,"Эл. сч/ф");
  SetText(3,"Эл. сч/ф, Дания");
  EndSet;

// SETS 121 - 255 are busy (document types)
// We are running out of setnumbers, unless we can start from 255 and go up....

  SetBegin(300);
  SetText(0,"Будет продано");
  SetText(1,"Не для продажи (официальная цена)");
  EndSet;

  SetBegin(301);
  SetText(0,"Страница с содержимым конференции");
  SetText(1,"Выпадающий список");
  SetText(2,"Собственная HAL-функция (используйте поле для ввода)");
  SetText(3,"Вход");
  SetText(4,"Выход");
  SetText(5,"Корзина покупок");
  SetText(6,"Список товаров");
  SetText(7,"Поиск");
  SetText(8,"Новый клиент");
  SetText(9,"Смена пароля");
  SetText(10,"Журнал счетов");  
  SetText(21,"Корзина заказов поставщику");  
  SetText(22,"Список приобретаемых товаров");  
  SetText(23,"Поиск покупок");  
  SetText(24,"Журнал заказов поставщика");  
  EndSet;

  SetBegin(302);
  SetText(0,"Одна на сообщение (Конференция и выпад.список)");
  SetText(1,"Одна на конференцию (Конференция и выпад.список)");
  SetText(2,"Одна на сообщение со сквозным просмотром (Только конференция)");
  SetText(3,"Одна на сообщение с новостями (Только конференция)");
  SetText(4,"Одна на сообщение с темой в виде ссылки (Только конференция)");
  SetText(5,"Одна на сообщение с большой точкой (Только конференция)");
  SetText(6,"Структура конференций (HansaManuals)");
  EndSet;

/* Will be...
  SetBegin(301);
  SetText(0,"Conference Contents. Choose Options Below.");
//  SetText(1,"Dropdown list");
  SetText(2,"Own HAL Function (use field to enter)");
  SetText(3,"Логин");
  SetText(4,"Logout");
  SetText(5,"Shopping Basket");
  SetText(6,"Item Browse");
  SetText(7,"Поиск");
  SetText(8,"New Customer");
  SetText(9,"Сменить пароль");
  SetText(10,"Order Journal");  
  EndSet;

  SetBegin(302);
  SetText(0,"Mail List");
  SetText(1,"Conference List");
  SetText(2,"Drilldowns");
  SetText(3,"News");
  SetText(4,"Subject as Link");
  SetText(5,"Bulletpoints");
  SetText(6,"Conferences as a tree (see www.HansaManuals.com)");
  SetText(7,"Dropdown One Per Mail");
  SetText(8,"Dropdown One Per Conference");
  EndSet;
*/
  SetBegin(303);
  SetText(0,"Одна транзакция");
  SetText(1,"Реверсировать транзакцию в следующем месяце");
  EndSet;

  SetBegin(304);
  SetText(1,"Код клиентской машины");
  SetText(2,"Пользователь");
  SetText(3,"Группа доступа");
  EndSet;
  
  SetBegin(305);
  SetText(1,"Только сервер");
  SetText(2,"Клиент и сервер");
  EndSet;

  SetBegin(309);// Zero is unknown, HF was set to 100....otherwise same as Set 310
  SetText(typFinancials,"Неопределенно");
  SetText(100,"HansaFinancials (используйте HW вместо)");
  SetText(typClassic,"Hansa Classic");
  SetText(typProfessional,"Hansa Professional");
  SetText(typHansaRaama,"HansaRaama");
  SetText(typFirstOffice,"FirstOffice");
  SetText(typFirstOfficePro,"FirstOffice Pro");
  SetText(typClassicLit,"Hansa Classic For Lithuania");
  SetText(typRiigiTarkvara,"HansaRiigitarkvara");
  SetText(typOffice2,"Office/2");
  SetText(typOffice2TB,"Office/2 for TimeBilling");
  SetText(typFirstOfficeSmall,"FirstOffice Small");
  SetText(typFirstOfficeCurrency,"FirstOffice Currency");
  SetText(typFirstContact,"HansaWorld CRM");
  SetText(typOffLine,"FirstOffice POS Offline");
  SetText(typFirstOfficeASP,"FirstOffice ASP");
  SetText(typHansaWorld,"HansaWorld/HansaFinancials");
  SetText(typRussianStandard,"RussianStandard");         
  SetText(typHansaWorldSMB,"HansaWorld SMB/Express");
  SetText(typBusinessPhone,"Business Communicator");
  SetText(typSmartApps,"SmartApps");
  SetText(typBooks,"Books");
  SetText(typBooksPro,"Books Professional");
  SetText(typBooksProAdv,"Books Professional Advanced");
  SetText(typBooksJobCost,"Books Job Costing");
  SetText(typBooksAcc,"Books Accounting");
  SetText(typBooksPOS,"Books POS");
  SetText(typCRMBasic,"HansaWorld CRM Basic");
  SetText(typPOSStandalone,"Стандарт Розница");
  SetText(typStandardCommunicator,"Стандарт Коммуникатор");
  SetText(typStandardCRM,"Стандарт CRM");
  SetText(typStandardOrganizer,"Стандарт Органайзер");
  SetText(typStdAccounts,"Standard Accounts");
  SetText(typStdBar,"Standard Bar");
  SetText(typStdContracts,"Standard Contracts");
  SetText(typStdHotel,"Standard Hotel");
  SetText(typStdInvoicing,"Standard Invoicing");
  SetText(typStdNominalLedger,"Standard #Nominal Ledger#");
  SetText(typStdProjects,"Standard Projects");
  SetText(typStdRentals,"Standard Rentals");
  SetText(typStdRestaurant,"Standard #Restaurant#");
  SetText(typStdShop,"Standard Shop");
  SetText(typStdStock,"Standard #Stock#");
  SetText(typStdConferences,"Standard Conferences");
  SetText(typStdDocuments,"Standard Documents");
  SetText(typStdExpenses,"Standard Expenses");
  SetText(typStdHR,"Standard HR");
  SetText(typStdCRMServer,"Standard CRM Server");
  SetText(typStdAccountsServer,"Standard Accounts Server");
  SetText(typStdERP,"Стандарт ERP");
  SetText(typSberbankInvoices,"Sberbank Invoices");
  SetText(typSberbankStock,"Sberbank Stock");
  SetText(typSberbankStockandCRM,"Sberbank Stock and CRM");
  SetText(typAdmiral,"Admiral"); 
  SetText(typStandardERP,"Стандарт ERP"); 
  SetText(typPurplesoftERP,"Purplesoft ERP"); 
  SetText(typPAYYAPERP,"PAYYAP ERP"); 
  SetText(typOBSHousing,"OBS Housing"); //!!TRANSLATE
  SetText(typTBAS,"Transaction Based Adaptive System"); //!!TRANSLATE
  EndSet;
  
  SetBegin(310);// Zero is HF, but HF is added to HW
  SetText(typFinancials,"HansaFinancials (используйте HW вместо)");
  SetText(typClassic,"Hansa Classic");
  SetText(typProfessional,"Hansa Professional");
  SetText(typHansaRaama,"HansaRaama");
  SetText(typFirstOffice,"FirstOffice");
  SetText(typFirstOfficePro,"FirstOffice Pro");
  SetText(typClassicLit,"Hansa Classic For Lithuania");
  SetText(typRiigiTarkvara,"HansaRiigitarkvara");
  SetText(typOffice2,"Office/2");
  SetText(typOffice2TB,"Office/2 for TimeBilling");
  SetText(typFirstOfficeSmall,"FirstOffice Small");
  SetText(typFirstOfficeCurrency,"FirstOffice Currency");
  SetText(typFirstContact,"HansaWorld CRM");
  SetText(typOffLine,"FirstOffice POS Offline");
  SetText(typFirstOfficeASP,"FirstOffice ASP");
  SetText(typHansaWorld,"HansaWorld/HansaFinancials");
  SetText(typRussianStandard,"RussianStandard");         
  SetText(typHansaWorldSMB,"HansaWorld SMB/Express");
  SetText(typBusinessPhone,"Business Communicator");
  SetText(typSmartApps,"SmartApps");
  SetText(typBooks,"Books");
  SetText(typBooksPro,"Books Professional");
  SetText(typBooksProAdv,"Books Professional Advanced");
  SetText(typBooksJobCost,"Books Job Costing");
  SetText(typBooksAcc,"Books Accounting");
  SetText(typBooksPOS,"Books POS");
  SetText(typCRMBasic,"HansaWorld CRM Basic");
  SetText(typPOSStandalone,"Стандарт Розница");
  SetText(typStandardOrganizer,"Standard Organizer");
  SetText(typStandardCommunicator,"Standard Communicator");
  SetText(typStandardCRM,"Standard CRM");
  SetText(typStdAccounts,"Standard Accounts");
  SetText(typStdBar,"Standard Bar");
  SetText(typStdContracts,"Standard Contracts");
  SetText(typStdHotel,"Standard Hotel");
  SetText(typStdInvoicing,"Standard Invoicing");
  SetText(typStdNominalLedger,"Standard #Nominal Ledger#");
  SetText(typStdProjects,"Standard Projects");
  SetText(typStdRentals,"Standard Rentals");
  SetText(typStdRestaurant,"Standard #Restaurant#");
  SetText(typStdShop,"Standard Shop");
  SetText(typStdStock,"Standard #Stock#");
  SetText(typStdConferences,"Standard Conferences");
  SetText(typStdDocuments,"Standard Documents");
  SetText(typStdExpenses,"Standard Expenses");
  SetText(typStdHR,"Standard HR");
  SetText(typStdCRMServer,"Standard CRM Server");
  SetText(typStdAccountsServer,"Standard Accounts Server");
  SetText(typStdERP,"Стандарт ERP");
  SetText(typSberbankInvoices,"Sberbank Invoices");
  SetText(typSberbankStock,"Sberbank Stock");
  SetText(typSberbankStockandCRM,"Sberbank Stock and CRM");
  SetText(typAdmiral,"Admiral"); 
  SetText(typStandardERP,"Стандарт ERP");
  SetText(typPurplesoftERP,"Purplesoft ERP"); 
  SetText(typPAYYAPERP,"PAYYAP ERP"); 
  SetText(typOBSHousing,"OBS Housing"); //!!TRANSLATE
  SetText(typTBAS,"Transaction Based Adaptive System"); //!!TRANSLATE
  EndSet;

  SetBegin(311);
  SetText(1,"Комментарий");
  SetText(2,"Клиент");
  SetText(3,"Поставщик");
  SetText(4,"Товар");
  SetText(5,"Дата операции");
  SetText(6,"Объекты");
  SetText(7,"Номер ОС");
  SetText(8,"Наименование ОС");
  EndSet;

  SetBegin(312);
  SetText(kCCPartnerNone,"-");
//  SetText(kCCPartnerCommidea,"Commidea");
  SetText(kCCPartnerPayex,"Payex");
  SetText(kCCPartnerCyberSource,"CyberSource");
  SetText(kCCPartnerSamport,"Samport");
  SetText(kCCPartnerAuthorizeNetCHNotPresent,"Authorize.net (Card Holder not Present)");
  SetText(kCCPartnerAuthorizeNetCHPresent,"Authorize.net (Card Holder Present)");
  SetText(kCCPartnerANZeGate,"ANZ eGate");
  SetText(kCCPartnerPCEftpos,"PC-EFTPOS");
  SetText(kCCPartnerDotpay,"Dotpay");
  SetText(kCCPartnerPaypal,"Paypal"); 
  SetText(kCCPartnerPaytrail,"Paytrail"); 
  SetText(kCCPartnerPaysera,"Paysera"); //!!TRANSLATE
  SetText(kCCPartnerStripe,"Stripe");  
  SetText(kCCPartnerElavonCHNotPresent,"Elavon (Card Holder not Present)"); 
  SetText(kCCPartnerElavonCHPresent,"Elavon (Card Holder Present)"); 
  SetText(kCCPartnerBambora,"Bambora"); 
  EndSet;

  SetBegin(313);
  SetText(kResTypeSalesOrder,"Счет");
  SetText(kResTypeInternalOrder,"Внутрен. заказ");
  EndSet;

  SetBegin(314);
  SetText(kResTypeUndefined,"Выберите");
  SetText(kResTypeExistingPO,"Заказ поставщику");
  SetText(kResTypeMakeNewPO,"Назад к обратному заказу поставщику");
//  SetText(3,"Production"); // Not done yet
  SetText(kResTypeStock,"Склад");
  SetText(kResTypeNextStockIn,"Следующее поступление");
  EndSet;

  SetBegin(315);
  SetText(0,"В течении периода");
  SetText(1,"До периода");
  EndSet;

  SetBegin(316);
  SetText(0,"День");
  SetText(1,"Месяц");
  EndSet;

  SetBegin(317);
  SetText(0,"Фиксированная цена");
  SetText(1,"Выполняется");
  EndSet;

  SetBegin(318);
  SetText(0,"Разрешено");
  SetText(1,"Не разрешено");
  EndSet;

  SetBegin(319);
  SetText(0,"Товар");
  SetText(1,"Модиф-ры"); // Item collection would have been my suggestion, but modifiers is a commonly used POS term...
  SetText(2,"Меню бара");
  EndSet;
  
  SetBegin(320);
  SetText(kWindowStyleFirenze,"Флоренция");
  SetText(kWindowStyleClassic,"Обычный");
//  SetText(kWindowStyleSpartan,"Спартанский");
//  SetText(kWindowStyleHelsinki,"Хельсинки");
//  SetText(kWindowStyleAqua,"Аква");
//  SetText(kWindowStyleBavaria,"Бавария");
//  SetText(kWindowStyleMetal,"Металлический");
  SetText(kWindowStyleMetalBlue,"Голубой металл");
  EndSet;
  
// Please don't translate the first string, as it is a special code (all StrSet works that way)
  StrSetBegin(321);
  StrSetText(";Personal","Личная");
  StrSetText(";Company","Компания");
  EndStrSet;
  
  SetBegin(322);
  SetText(kExternalActTypeNone,"Нет");
  SetText(kExternalActTypePhoneCall,"Тел. звонок");
  EndSet;
  
  SetBegin(323);
  SetText(kPOSCommandsTypeQuantityAddOne,"Добав. 1");
  SetText(kPOSCommandsTypeCash,"Наличные");
  SetText(kPOSCommandsTypeCreditCardSum,"Сумма кредитной карты");
  SetText(kPOSCommandsTypeDeleteRow,"Удалить строку");
  SetText(kPOSCommandsTypeRebate,"Скидка");
  SetText(kPOSCommandsTypeFinish,"Завершить");
//  SetText(kPOSCommandsTypeLoyaltyPointsBonus,"Бонусные накопит. баллы");
//  SetText(kPOSCommandsTypeLoyaltyPointsPayment,"Платеж накопит. картой");
  SetText(kPOSCommandsTypeLoyaltyCard,"№ накопит. карты");
//  SetText(kPOSCommandsTypeLoyaltyPointsPayment,"Платеж накопит. картой");
  SetText(kPOSCommandsTypeReprintReceipt,"Перепечатать чек");
  SetText(kPOSCommandsTypeQuantity,"Количество");
  SetText(kPOSCommandsTypeQuantityAndItem,"Товар к-ва");
  SetText(kPOSCommandsTypeSalesAssistant,"Помошник продавца");
  SetText(kPOSCommandsTypeVolumetricBarCodeScan,"Скан. динамич. штрих-код");
  SetText(kPOSCommandsTypeSerialNr,"Сер. №");
  SetText(kPOSCommandsTypeQuantitySubOne,"Отнять 1");
  SetText(kPOSCommandsTypeVoidRow,"Отменить товар");
//  SetText(3,"Повторить");
//  SetText(5,"№ кредитной карты");
//  SetText(7,"ГГMM");
//  SetText(8,"CCV");
//  SetText(10,"ID");
//  SetText(11,"Кредит");
//  SetText(12,"Контроль");
//  SetText(13,"Счет");
//  SetText(14,"Внимание");
//  SetText(15,"Да");
//  SetText(16,"Удалить");
//  SetText(17,"Аннулировать");
//  SetText(19,"Online");
//  SetText(20,"Выход");
//  SetText(21,"Завершить и открыть результирующее окно");
  EndSet;
  
  SetBegin(324);
  SetText(kOpenTypeList,"Список");
  SetText(kOpenTypeNew,"Новая запись");
  EndSet;

  SetBegin(325);
  SetText(0,"-");
  SetText(1,"Отбраковано");
  EndSet;

  SetBegin(326);
  SetText(kCourseEventPaticipantStatusPaying,"Paying");
  SetText(kCourseEventPaticipantStatusCancelled,"Cancelled");
  SetText(kCourseEventPaticipantStatusNotPaying,"Non Paying");
  SetText(kCourseEventPaticipantStatusStandby,"Stand by");
  SetText(kCourseEventPaticipantStatusPreliminary,"Preliminary Booking");
  EndSet;

  SetBegin(327);
  SetText(kInternalServerUndefined,"-");
  SetText(kInternalServerHansaEInvocing,"HANSA E-Invoices");  
  SetText(2,"ELMA E-Invoices, Finland");
  SetText(3,"STRALFORS E-Invoices, Sweden");
  SetText(4,"ITELLA E-Invoices, Estonia");
  SetText(5,"Danish E-Invoices");
  SetText(6,"SEB E-Payments, Estonia");
  SetText(7,"HANSA E-Payments, Estonia");
  SetText(8,"SAMPO E-Payments, Estonia");
  SetText(9,"Krediidinfo, Estonia");
  SetText(10,"Lursoft, Latvia");
  SetText(11,"Post Coder, UK");
  SetText(12,"SMS Vianett, Норвегия");
  SetText(13,"SMS ASPSMS, Швейцария");
//  SetText(14,"Commidea Credit Card Payments, UK");
  SetText(15,"SEB Direct Debit, Estonia");
  SetText(16,"CyberSource Credit Card Payments, UK");
  SetText(17,"Electronic #VAT# Declarations, UK");
  SetText(18,"Lookup");
  SetText(19,"National Bank Currency Exchange Rates");
  SetText(20,"Samport Credit Card Payments, Sweden");
  SetText(21,"Business Check Credit History and Address Lookup, Sweden");
//  SetText(20,"Payex Credit Card Payments, Norway");
  SetText(22,"AFIP, Аргентина");
  SetText(23,"EDB E-Invoices, Sweden");
  SetText(24,"Logiq E-Invoices, Норвегия");
  SetText(25,"SwedBank E-Payments, Estonia");
  SetText(26,"TIETO Svefaktura, Sweden");
  SetText(27,"EDX Signature, Mexico");
  SetText(28,"NETS, Norway");  
  SetText(29,"ELMA E-Invoices New, Finland");  
  SetText(30,"SMS Lattelecom, Латвия"); 
  SetText(31,"Подтверждение электронной почты"); 
  SetText(32,"APIX, Финляндия"); 
  SetText(kInternalServerAPIXNOR,"APIX, Норвегия");  
  SetText(kInternalServerAPIXSWE,"APIX, Швеция"); 
  SetText(kInternalServerCompelloNOR,"Compello, Норвегия"); 
  SetText(kInternalServerConversionToStandard,"Преобразование в Стандарт Бизнес"); 
  SetText(kInternalServerDistimo,"CS - Downloads Server"); 
  SetText(kInternalServerMarketplace,"Marketplace Live"); 
  SetText(kInternalServerMarketplaceTest,"Marketplace Test"); 
  SetText(kInternalServerMarketplaceDev,"Marketplace Development"); 
  SetText(kInternalServerMarketplaceUpdate,"Marketplace Update"); 
  SetText(kInternalServerDataWarehouse,"DataWarehouse"); 
  SetText(kInternalServerStandardAccounts,"Website - Standard Accounts"); 
  SetText(kInternalServerZZISlovenia,"ZZI E-invoicing"); 
  SetText(kInternalServerPublishing,"Publishing");
  SetText(kInternalServerSMSSONERAFIN,"SMS Sonera, Finland"); 
  SetText(kInternalServerConversionToStandard,"Преобразование в Стандарт Бизнес"); 
  SetText(kInternalServerStandardID,"Standard ID"); //!!TRANSLATE
  SetText(kInternalServerGooglePlayProds,"Google Play Prod. History"); //!!TRANSLATE
  SetText(kInternalServeriTunesProds,"iTunes Prod. History"); //!!TRANSLATE
  SetText(kInternalServerForum,"Forum"); //!!TRANSLATE
  SetText(kInternalServerNavigationBannerLive,"Navigation Banner Server Live"); //!!TRANSLATE
  SetText(kInternalServerNavigationBannerTest,"Navigation Banner Server Test"); //!!TRANSLATE
  EndSet;
  
  SetBegin(328);
  SetText(0,"-");
  SetText(1,"Package");
  SetText(2,"Extra Clicks");
  SetText(3,"First Page");
  SetText(4,"Extra Pages");
  SetText(5,"Default Priority Postage");
  SetText(6,"Heavy Priority Postage");
  SetText(7,"Default Economy Postage");
  SetText(8,"Heavy Economy Postage");
  SetText(9,"Default Economy Postage EU");
  SetText(10,"Heavy Economy Postage EU");
  SetText(11,"Default Economy Postage not EU");
  SetText(12,"Heavy Economy Postage not EU");
  SetText(13,"First Page Storage");
  SetText(14,"Extra Pages Storage");
  SetText(15,"Storage and Console");
  SetText(16,"XML e-Invoice");
  SetText(17,"e-Mail Invoice");
  EndSet;
  
  SetBegin(329);
  SetText(kWantedStatusStop,"Stop");
  SetText(kWantedStatusRun,"Запуск");
  SetText(kWantedStatusOnDemand,"On Demand");
  SetText(kWantedStatusMaintenence,"Maintenence Run");
  SetText(kWantedStatusManual,"Manual");
  SetText(kWantedStatusImportBackup,"Import Text Backup");  
  SetText(kWantedStatusUpdateVersion,"Update Version");
  SetText(kWantedStatusCreateServer,"Create Server");
  SetText(kWantedStatusMoveServer,"Move Server");
  SetText(kWantedStatusRestart,"Restart");  
  SetText(kWantedStatusExportDatabase,"Export Database");  
  SetText(kWantedStatusExportRegister,"Export Register");         
  SetText(kWantedStatusCreateStartedServer,"Создать запущенный сервер"); 
  SetText(kWantedStatusImportBackupAndRun,"Загрузить резервную копию и запустить"); 
  SetText(kWantedStatusLaunchReserveSystem,"Запуск резерв. системы"); 
  SetText(kWantedStatusExportCompany,"Экспортировать компании"); 
  SetText(kWantedStatusLaunchTestSystem,"Запуск тест. системы"); 
  SetText(kWantedStatusLaunchUpdateSystem,"Запуск системы для обнов."); 
  SetText(kWantedStatusResetToBackup,"Сброс до рез. копии"); 
  SetText(kWantedStatusRunUnjournaled,"Работать без Журналирования");  
  SetText(kWantedStatusChangeVersion,"Change Version"); //!!TRANSLATE
  SetText(kWantedStatusForceStop,"Don't Run (Forced)"); //!!TRANSLATE
  EndSet;
  
  SetBegin(330);
  SetText(typFinancials,"Hansa Financials");
  SetText(typClassic,"Classic"); /* or is it Hansa Classic? */
  SetText(typProfessional,"Professional");
  SetText(typHansaRaama,"HansaRaama");
  SetText(typFirstOffice,"FirstOffice");
  SetText(typClassicLit,"Classic Lit"); /* Lithuanian? */
  SetText(typRiigiTarkvara,"Riigi Tarkvara");
  SetText(typOffice2,"Office/2");
  SetText(typOffice2TB,"Office/2 TB");
  SetText(typFirstOfficeSmall,"FirstOffice Small");
  SetText(typFirstOfficeCurrency,"FirstOffice Currency");  /* Not valid as a type */
  SetText(typFirstContact,"HansaWorld CRM");
  SetText(typOffLine,"Off Line"); /* ??? */
  SetText(typFirstOfficeASP,"FirstOffice ASP");
  SetText(typHansaWorld,ProductName & " Enterprise");
  SetText(typRussianStandard,ProductName & " RussianStandard");         
  SetText(typHansaWorldSMB,"HansaWorld Express");
  SetText(typFirstOfficePro,"FirstOffice Professional");
  SetText(typBusinessPhone,"Business Communicator");
  SetText(typBusinessOrganizer,"Business Organiser");
  SetText(typBooks,"Books"); //?? CHECKBOOKSHAL
  SetText(typBooksPro,"Books Professional"); //?? CHECKBOOKSHAL
  SetText(typBooksProAdv,"Books Professional Advanced"); //?? CHECKBOOKSHAL
  SetText(typBooksJobCost,"Books Job Costing"); //?? CHECKBOOKSHAL
  SetText(typBooksAcc,"Books Accounting"); //?? CHECKBOOKSHAL
  SetText(typBooksPOS,"Books POS"); //?? CHECKBOOKSHAL
  SetText(typCRMBasic,"HansaWorld CRM Basic");
  SetText(typStandardOrganizer,"Standard Organizer");
  SetText(typStandardCommunicator,"Standard Communicator");
  SetText(typStandardCRM,"Standard CRM");
  SetText(typStdAccounts,"Standard Accounts");
  SetText(typStdBar,"Standard Bar");
  SetText(typStdContracts,"Standard Contracts");
  SetText(typStdHotel,"Standard Hotel");
  SetText(typStdInvoicing,"Standard Invoicing");
  SetText(typStdNominalLedger,"Standard #Nominal Ledger#");
  SetText(typStdProjects,"Standard Projects");
  SetText(typStdRentals,"Standard Rentals");
  SetText(typStdRestaurant,"Standard #Restaurant#");
  SetText(typStdShop,"Standard Shop");
  SetText(typStdStock,"Standard #Stock#");
  SetText(typStdConferences,"Standard Conferences");
  SetText(typStdDocuments,"Standard Documents");
  SetText(typStdExpenses,"Standard Expenses");
  SetText(typStdHR,"Standard HR");
  SetText(typStdCRMServer,"Standard CRM Server");
  SetText(typStdAccountsServer,"Standard Accounts Server");
  SetText(typStdERP,"Стандарт ERP");
  SetText(typSberbankInvoices,"Sberbank Invoices");
  SetText(typSberbankStock,"Sberbank Stock");
  SetText(typSberbankStockandCRM,"Sberbank Stock and CRM");
  SetText(typAdmiral,"Admiral"); 
  SetText(typStandardERP,ProductName & " Стандарт ERP"); 
  SetText(typOBSHousing,"OBS Housing"); //!!TRANSLATE
  SetText(typTBAS,"Transaction Based Adaptive System"); //!!TRANSLATE
  EndSet;
  
  SetBegin(331);
  SetText(kHostingTypeUnknown,"Unknown"); 
  SetText(kHostingTypeAmazon,"Amazon EC2"); 
  SetText(kHostingTypeAzure,"Windows Azure"); 
  SetText(kHostingTypeRackspace,"Rackspace"); 
  SetText(kHostingTypeGoogle,"Google Compute Engine"); 
  SetText(kHostingTypeSoftLayer,"IBM SoftLayer"); //!!TRANSLATE
  EndSet;

  SetBegin(333);
  SetText(0,"UNKNOWN");
  SetText(1,"ONLINE");
  SetText(2,"UNSTABLE");  
  SetText(3,"BUSY");  
  SetText(4,"OFFLINE");  
  SetText(5,"DISABLED");  
  EndSet;
    
  SetBegin(334);
  //SetText(M4NoType,"");
  SetText(M4InvalidType,"-");
  SetText(M4Str,"string");
  SetText(M4Val,"decimal value");
  SetText(M4Chk,"checkbox");
  //SetText(M4Rad,"");
  SetText(M4Long,"long integer");
  SetText(M4Date,"Дата");
  SetText(M4DateTime,"date time");
  //SetText(M4DVal,"");
  //SetText(M4CVal,"");
  SetText(M4Int,"integer");
  //SetText(M4xxx1,"");
  //SetText(M4Label,"");
  //SetText(M4Bool,"");
  //SetText(M4Prcnt,"");
  //SetText(M4TVal,"");
  //SetText(M4MVal,"");
  SetText(M4UStr,"uppercase string");
  SetText(M4Mark,"check mark");
  //SetText(M4NLong,"");
  //SetText(M41Val,"");
  //SetText(M40Val,"");
  //SetText(M4Period,"");
  //SetText(M4UVal,"");
  //SetText(M4longDateTime,"");
  SetText(M4Star,"password input");
  //SetText(M4longDate,"");
  SetText(M4Code,"Код");
  SetText(M4AppCode,"appcode");
  //SetText(M423Val,"");
  SetText(M4Set,"integer set");
  SetText(M4Matrix,"matrix");
  //SetText(M4StatMat,"");
  //SetText(M4XStr,"");
  //SetText(M4NegVal,"");
  //SetText(M4Rate,"");
  //SetText(M45Val,"");
  //SetText(M4UPrcnt,"");
  //SetText(M4Dummy,"");
  SetText(M4StrSet,"string set");
  SetText(M4TextField,"text field");
  SetText(M4Blob,"blob");
  //SetText(M4CStr,"");
  SetText(M4Time,"Время");
  //SetText(M4STime,"");
  //SetText(M4Pict,"");
  //SetText(M4RLink,"");
  //SetText(M4PrcStr,"");
  //SetText(M4String,"");
  //SetText(M4Qty,"");
  SetText(M4CalPeriod,"calendar period");
  EndSet;
  
  SetBegin(335);
  SetText(ctBPadCE,"B-Pad");
  SetText(ctiPhone,"iPhone");
  SetText(ctNokiaE90,"Nokia E90"); // Could be called Series 60 Wide Screen
  SetText(ctNormal,"PC");
  SetText(ctSeries60,"Series 60");
  SetText(ctSeries60ss,"Series 60 Small Screen"); // 172 * 208
  SetText(ctSeries80,"Series 80");
  SetText(ctSeries90,"Series 90");
  SetText(ctWindowsCE,"Windows CE");
  SetText(ctWindowsCELandscape,"Windows CE Landscape");
  SetText(ctAndroidPhone,"Android Phone");
  SetText(ctAndroidTab,"Android Tab");
  SetText(ctWindows8Tab,"Планшет на Windows");         
  EndSet;
  
  SetBegin(336);
  SetText(k4PushButton,"push button");
  SetText(k4CheckBox,"Чекбокс");
  SetText(k4RadioButton,"Переключатель");
  //SetText(k4VScrollBar,"vertical scroll bar");
  //SetText(k4WideScrollBar,"wide scroll bar");
  SetText(k4HTab,"tile");
  //SetText(k4HTabSouth,"horizontal tab (south)");
  //SetText(k4PullDownMenu,"pull down menu");
  //SetText(k4LeftBrowse,"browse left button");
  //SetText(k4RightBrowse,"browse right button");
  //SetText(k4SegmentButton,"segment button");
  //SetText(k4ListHeader,"list header");
  SetText(k4ButtonFrame,"button frame");
  //SetText(k4DropDownMenu,"drop down menu");
  //SetText(k4NewTextArea,"text area");
  //SetText(k4ButtonIcon,"button icon");
  SetText(k4EditField,"edit field");
  //SetText(k4StatusField,"status field");
  // SetText(k4ResourceManager, -- not yet
  // SetText(k4ResourceRow, -- not yet
  //SetText(k4ResourceBox,"resource box");
  SetText(k4Matrix,"matrix");
  //SetText(k4TimeBoxes,"time boxes");
  //SetText(k4Calendar,"calendar");
  SetText(k4RecordList,"record list");
  SetText(k4RecordColumn,"record column");
  SetText(k4MatrixColumn,"matrix column");
  SetText(k4AttachDisplay,"attachments");
  SetText(k4Report,"report");
  SetText(k4VTab,"flip");
  SetText(k4SoundTool,"sound tool");
  SetText(k4Locationer,"location tool");
  SetText(k4StaticText,"static text");
  EndSet;
  
  SetBegin(337);
  SetText(AdjLeft,"влево");
//  SetText(AdjCenter,"по центру");  // not implemented
  SetText(AdjRight,"вправо");
  EndSet;
  
  SetBegin(338);
  SetText(CGother,"Другое");
  SetText(CGmlist,"mlist");
  SetText(CGslist,"slist");
  SetText(CGview,"Вид");
  SetText(CGRepW,"report");
  SetText(CGToolW,"tool");
  SetText(CGRcW,"rcw");
  SetText(CGEcW,"ecw");
  SetText(CGSbl,"sblock");
  SetText(CGHbl,"hblock");
  SetText(CGMnt,"mnt");
  SetText(CGDocW,"doc");
  SetText(CGEc2W,"ec2w");
  SetText(CGIcW,"icw");
  SetText(CGrlist,"rlist");
  EndSet;
  
  SetBegin(339);
  SetText(Normal,"normal");
  SetText(St_i,"edit on insert");
  SetText(ViewOnly,"view only");
  SetText(NewLOnly,"add lines only");
  EndSet;
  
  SetBegin(340);
  SetText(kFieldPosHeader,"header");
  SetText(kFieldPosRows,"row");
  EndSet;
  
  SetBegin(341);
  SetText(kProgramModeLocal,"Локально");
  SetText(kProgramModeClient,"Клиент");
  SetText(kProgramModeLiveSync,"Синхрон.");
  EndSet;
  
  SetBegin(342);
  SetText(0,"Default (binder)");
  SetText(701,"Binder");
  SetText(20409,"Billboard");
  SetText(993,"Birds");
  SetText(503,"Calendar");
  SetText(991,"Car");
  SetText(969,"Coins");
  SetText(997,"Cooking");
  SetText(718,"Document");
  SetText(29017,"Favourites");
  SetText(29021,"Folder");
  SetText(999,"Форум");
  SetText(967,"House");
  SetText(20501,"Mailbox");
  SetText(4017,"Measure");
  SetText(1003,"Navigate");
  SetText(20401,"Newspaper");
  SetText(805,"Key");
  SetText(20403,"Library");
  SetText(971,"Сотрудник");
  SetText(1037,"Phone");
  SetText(1005,"#Restaurant#");
  SetText(989,"Salad");
  SetText(985,"Найти");
  SetText(29039,"Stocks");
  SetText(1041,"Todo");
  SetText(625,"Tools");
  SetText(29043,"Timesheets");
  EndSet;
  
  SetBegin(343);
  SetText(kAttachStorageSerNr,"Сер. №");
  SetText(kAttachStorageUUID,"UUID");
  SetText(kAttachStorageInline,"Inline");
  EndSet;
  
  StrSetBegin(344);
  StrSetText("ARB","Арабский");
  StrSetText("AUS","Английский (Австралия)");
  StrSetText("BRA","Португальский (Бразилия)");
  StrSetText("CHI","Китайский");
  StrSetText("CZE","Чешский");
  StrSetText("DAN","Датский");
  StrSetText("ENG","Английский");
  StrSetText("USA","Английский (США)");
  StrSetText("CAN","Английский (Канада)");
  StrSetText("IND","Английский (Индия)");
  StrSetText("KEE","Английский (Кения)");
  StrSetText("NZE","Английский (Новая Зеландия)");
  StrSetText("PHE","Английский (Филиппины)");
  StrSetText("SGP","English (Singapore)"); 	
  StrSetText("ESP","Испанский");
  StrSetText("USS","Испанский (США)");
  StrSetText("EST","Эстонский");
  StrSetText("FIN","Финский");
  StrSetText("FRA","Французский");
  StrSetText("FRC","Французский (Канада)");
  StrSetText("FAR","Фарси");
  StrSetText("GER","Немецкий");
  StrSetText("HEB","Иврит");
  StrSetText("HUN","Венгерский");
  StrSetText("ITA","Итальянский");
  StrSetText("LAT","Латышский");
  StrSetText("LIT","Литовский");
  StrSetText("NOR","Норвежский");
  StrSetText("POL","Польский");
  StrSetText("POR","Португальский");
  StrSetText("ANG","Portuguese (Angola)");
  StrSetText("ROM","Румынский");
  StrSetText("RUS","Русский");
  StrSetText("SER","Сербский");
  StrSetText("SWE","Шведский");
  StrSetText("SLO","Словенский");
  StrSetText("SVK","Словацкий");
  StrSetText("UKR","Украинский");
  StrSetText("VIE","Вьетнамский");
  StrSetText("","Другой");
  StrSetText("","Другое");  
  StrSetText("","Другое"); 
  StrSetText("","Другие"); 
  StrSetText("","Other"); //!!TRANSLATE
  EndStrSet;
  
  SetBegin(345);
  SetText(kEnablerFunctionDefault,"Package");
  SetText(kEnablerFunctionRegister,"SmartApp Register");
  SetText(kEnablerFunctionApp,"SmartApp Application");
  SetText(kEnablerFunctionAccess,"Access Type");
  SetText(kEnablerFunctionHALFile,"Attached File");
  SetText(kEnablerFunctionAdditionalSystem,"Дополнительная система");  
  EndSet;

  SetBegin(346);
  SetText(kIndexTypeNone,"Нет");
  SetText(kIndexTypeNormal,"Индексировано");
  SetText(kIndexTypeCalendar,"В календаре");
  EndSet;
  
  SetBegin(347);
  SetText(0,"-");
  SetText(1,"Box 1");
  SetText(2,"Box 2");
  SetText(3,"Box 3");
  SetText(4,"Box 4");
  SetText(5,"Box 5");
  SetText(6,"Box 6");
  SetText(7,"Box 7");
  SetText(8,"Box 8");
  SetText(9,"Box 9");
  EndSet;

  SetBegin(348);
  SetText(kWindowTypeNone,"-");
  SetText(kWindowTypeRecordList,"Record List");
  SetText(kWindowTypeInspect,"Inspect");
  SetText(kWindowTypePaste,"Paste");
  SetText(kWindowTypeOther,"Другое");
  EndSet;
  
  SetBegin(349);
  SetText(kRegOpInsert,"добавить"); // can also be translated as "Создать" or "add"
  SetText(kRegOpUpdate,"обновить");
  SetText(kRegOpDrop,"удалить"); // can also be "Удалить" or "Удалить"
  EndSet;
  
  SetBegin(350);
  SetText(0,"Собственный счет");
  SetText(1,"Будет платить за");
  EndSet;

  SetBegin(351);
  SetText(0,"Все деятельности");
  SetText(1,"Личные деятельности");
  SetText(2,"Публичные деятельности");
  EndSet;
  
  SetBegin(352); //subset of set 1
  SetText(kAccessLevelNone,"Нет");
  SetText(kAccessLevelReadOnly,"Чтение");
  SetText(kAccessLevelFull,"Полный");
  EndSet;
  
  SetBegin(353);
  SetText(kStructTypePage,"Страница");
  SetText(kStructTypeFolder,"Папка");
  SetText(kStructTypeHALFunction,"Функция HAl");
  SetText(kStructTypeRedirect,"Перенаправ.");
  SetText(kStructTypeRedirectToCountry,"Перенаправление на суб-страницу страны");
  SetText(kStructTypeRedirectToPlatform,"Перенаправление на суб-страницу по признаку ОС");
  SetText(kStructTypeContentHandlerApp,"Приложение - обработка контента");
  SetText(kStructTypeForumApp,"Приложение - форум");
  SetText(kStructTypeItemBrowse,"Просмотр товаров");
  SetText(kStructTypeShoppingBasket,"Корзина");
  SetText(kStructTypeItemOrder,"Заказ/счёт на товар");
  SetText(kStructTypeUniversityApp,"University App");
  SetText(kStructTypeProductImageApp,"Приложение - изображение продукта");
  SetText(kStructTypeWebshopApp,"Webshop App");
  SetText(kStructTypeASPApp,"Приложение - ASР");
  SetText(kStructTypeDownloadRegistration,"Страница регистрации инсталляции");
  SetText(kStructTypeOnlineReservationApp,"Приложение - онлайн резервация");
  SetText(kStructTypeMyAccountApp,"Приложение - мой профиль");
  SetText(kStructTypeProductionPlan,"План производства");
  if (TestEnablerFile("EnSubscriptionsApp")) then begin
    SetText(kStructTypeSubscriptionsApp,"Приложение - подписки");
  end;
    SetText(1000,"Страница - только для партнёров");  
  SetText(kStructTypeAvailableApps,"Доступные в интернете приложения");
  SetText(kStructTypeFile,"Файл"); 
  EndSet;

  SetBegin(354);
  SetText(0,"До");
  SetText(1,"Контент");
  SetText(2,"После");
  SetText(3,"HTML Заголовок");
  EndSet;

  SetBegin(355);
  SetText(kElementTypePlainHTML,"Простой HTML");
  SetText(kElementTypeHALFunction,"HAL-функция");
  SetText(kElementTypeWebMenu,"Веб-меню");
  SetText(kElementTypeLoginControl,"Контроль входа в систему");
//  SetText(kElementTypeShoppingBasket,"Shopping basket");
//  SetText(kElementTypeRegisterForm,"Register form");
//  SetText(kElementTypeEditCustomerDetailsForm,"Edit customer details form");
//  SetText(kElementTypeItemBrowse,"Item browse");
//  SetText(kElementTypeShoppingBasketStatus,"Shopping basket status");
  SetText(kElementTypeLanguageBox,"Выпадающий список переключения языков");
  SetText(kElementTypeLink,"Ссылка");
  SetText(kElementTypeImage,"Картинка");
  SetText(kElementTypeLoginState,"Show Login State");
  SetText(kElementTypeCountryName,"Страна");
//  SetText(kElementTypeShoppingBasketRecommended,"Shopping basket - recommended items");
  SetText(kElementTypeContentList,"Список с содержанием");
  SetText(kElementTypeContactUsForm,"Форма для связи");
  SetText(kElementTypeRegisterNewCustomerForm,"Форма регистрации нового клиента");
  SetText(kElementTypeForgotPasswordForm,"Форма восстановления забытого пароля");
  SetText(kElementTypeWebShopAddToBasketLink,"Интернет-магазин - ссылка на добавление в корзину");
  SetText(kElementTypeWebShopCheckoutLink,"Интернет-магазин - ссылка на подтвреждение заказа");
  //SetText(kElementTypeWebShopShoppingBasketStatus,"WebShop - Shopping basket status");
  SetText(kElementTypeUniversityWebTestList,"University - Show Web Test List");
  SetText(kElementTypeWebShopProductCategoryTree,"Интернет-магазин - дерево категорий продуктов");
  SetText(kElementTypeLiveChat,"Live Chat");
  SetText(kElementTypeLoggedInUserName,"Вошедший в систему Клиент/ФИО Сотрудника");
  SetText(kElementTypeCreateMailForm,"Create Mail Form");  
  SetText(kElementTypeWebClientWindow,"Окно веб-клиента");
  SetText(kElementTypeProductSearchForm,"WebShop - Search Item Form");
  SetText(kElementTypeWebShopShowField,"Интернет-магазин - показать поле");
  SetText(kElementTypeWebClientLink,"Ссылка на веб-клиент"); 
  SetText(kElementTypeForumBreadCumbs,"Навигационная цепочка форума"); 
  //SetText(kElementTypeWebShopPaymentMethodButtons,"WebShop - Payment Method Buttons");
  EndSet;
    
  SetBegin(356);
  SetText(-1,"Неизвестно");
  SetText(0,"Элемент");
  SetText(1,"Контент");
  SetText(2,"Продукт");
  SetText(3,"Компонент");
  SetText(4,"Страница");
  EndSet;

  SetBegin(357);
  SetText(0,"До");
  SetText(1,"Контент");
  SetText(2,"После");
  EndSet;

  SetBegin(358);
  SetText(kVATTypeAssets,"Assets #VAT#");
  SetText(kVATTypeAssetsExempt,"Assets Exempt #VAT#");
  SetText(kVATTypeConsumptionTax,"Consumption Tax");
  SetText(kVATTypeExempt,"Exempt #VAT#");
  SetText(kVATTypeExport,"Export #VAT#");
  SetText(kVATTypeExemptInsideEU,"Exempt #VAT# #Inside EU#");
  SetText(kVATTypeExemptwithInput,"Exempt #VAT# without input #VAT#");
  SetText(kVATTypeExempt3WayDeliveryInsideEU,"Exempt #VAT# 3-way delivery #Inside EU#");
  SetText(kVATTypeExportDeductable,"Экспорт с вычитаемым НДС"); 
  SetText(kVATTypeGoods,"Goods #VAT#");
  SetText(kVATTypeGrossIncomePerception,"Gross Income Perception");
  SetText(kVATTypeICETax,"ICE Tax");
  SetText(kVATTypeImport,"Import #VAT#");
  SetText(kVATTypeIncomePerceptions,"Income Perceptions");
  SetText(kVATTypeInputTax,"Input Tax");
  SetText(kVATTypeISRWithholding,"ISR Withholding");
  SetText(kVATTypeLevy,"Levy"); 
  SetText(kVATTypeLumpSumCompensation,"Lump Sum Compensation");

  SetText(kVATTypeNoVAT,"No #VAT#");
  SetText(kVATTypeNonDeductable,"Non-deductable #VAT#");
  SetText(kVATTypeNormal,"Normal");
  SetText(kVATTypeNormalWithInternalTaxes,"Normal with Internal Taxes");
  SetText(kVATTypeNormalWithVATPerceptions,"Normal with #VAT# Perceptions");
  SetText(kVATTypePurchasesWithInternalTaxes,"Purchases, Internal Taxes");
  SetText(kVATTypeRealEstate,"Real Estate #VAT#");
  SetText(kVATTypeRealEstateExempt,"Real Estate Exempt #VAT#");
  SetText(kVATTypeReversed,"Reversed");
  SetText(kVATTypeSaleswithInstallation,"Sales with Installation");
  SetText(kVATTypeSelfTaxingInsideImport,"Self-taxing Import");
  SetText(kVATTypeSelfTaxingInsideEU,"Self-taxing #Inside EU#");
  SetText(kVATTypeSelTaxingServicesEU,"Self-taxing Services #Inside EU#");
  SetText(kVATTypeSelfTaxingwithLocalVATID,"Self-taxing with local #VAT# ID");
  SetText(kVATTypeServices,"Services #VAT#");
  SetText(kVATTypeTaxedImport,"Taxed Import");
  SetText(kVATTypeTransitSalesInsideEU,"Transit Sales #Inside EU#");
  SetText(kVATTypeVATPerceptions,"#VAT# Perceptions");
  SetText(kVATTypeWithholding,"Withholding");
  EndSet;

  SetBegin(359);
  SetText(kStockTypePurchased,"Приобретение");
  SetText(kStockTypeConsignment,"Комиссия");
  EndSet;

  SetBegin(360);
  SetText(0,"-");
  SetText(1,"Tax Registered");//Responsable Inscripto
//  SetText(2,"Tax Not Registered");//Responsable no Inscripto
  SetText(3,"Exempt");//Exento
  SetText(4,"Not Responsible");//No Responsable
  SetText(5,"End Consumer");//Responsable final
//  SetText(6,"Responsible not Registered, Fixed Assets sales");//Responsable no Inscripto enta de bienes de uso
  SetText(7,"Responsible Professional");//Responsable monotributo
  SetText(8,"Responsible Social Professional");    //Monotributista social
  SetText(9,"Eventual Small Contributor");    //Pequeno contribuyene eventual
  SetText(10,"Eventual Small Social Contributor");    //Pequeno contribuyene eventual social
  SetText(11,"No Category");//No categorizado
  EndSet;

  SetBegin(361);
  SetText(kRecordStatusNone,"-");
  SetText(kRecordStatusInvalidated,"Invalidated");
  SetText(kRecordStatusLost,"Lost");
  SetText(kRecordStatusNotUsed,"Не используется");
//  if (HasLocalization("PRT")) then begin
    SetText(kRecordStatusManual,"Manual");
    SetText(kRecordStatusRecovered,"Recovered from Damaged Database");
//  end;
  EndSet;

  SetBegin(362);
  SetText(0,"-");
  SetText(kQCProdVc,"Производство");
  SetText(kQCProdOperationVc,"Операция производства");
  SetText(kQCSDVc,"Списание со склада");
  SetText(kQCPUVc,"Поступление товара");
  SetText(kQCRetVc,"Возврат товара");
  SetText(kQCRetPUVc,"Возврат товара поставщику");
  EndSet;

  SetBegin(363);
  SetText(0,"-");
  SetText(kQCTestWeight,"Вес");
  SetText(kQCTestNetWeight,"Вес-нетто");
  SetText(kQCTestVolume,"Объем");
  SetText(kQCTestWidth,"Ширина");
  SetText(kQCTestHeight,"Высота");
  SetText(kQCTestDepth,"Глубинп");
  SetText(kQCTestDensity,"Плотность");
  SetText(kQCTestAlcPrc,"% алкоголя");
  SetText(kQCTestUserVal1,"Величина, заданная пользователем 1");
  SetText(kQCTestUserVal2,"Величина, заданная пользователем 2");
  SetText(kQCTestUserVal3,"Величина, заданная пользователем 3");
  EndSet;
  
  SetBegin(364);
  SetText(kAutoNumberingNone,"Нет");
  SetText(kAutoNumberingNormal,"Обычный");
  EndSet;
  
  SetBegin(365);
  SetText(0,"Только из меню Операции");
  SetText(1,"Из меню Операции и при утверждении записей");
  EndSet;

  SetBegin(366);
  SetText(kMSSQL,"Microsoft SQL Server");
  SetText(kOracle,"Oracle");
  //SetText(kIngres,"Ingres");
  //SetText(kDB2,"DB/2");
  SetText(kPostgreSQL,"PostgreSQL"); 
  EndSet;
    
  SetBegin(367);
  SetText(kStatusNone,"");
  SetText(kStatusConfigInError,"Ошибка конфигурации");
  SetText(kStatusStopped,"Остановлен");
  SetText(kStatusRunning,"В работе");
  SetText(kStatusStopping,"Останавливается");
  SetText(kStatusStarting,"Запускается");
  SetText(kStatusImportingBackup,"Импортирую текст. копию...");  
  SetText(kStatusDeleted,"Удалён");
  SetText(kStatusUpdatingVersion,"Обновляю версию...");
  SetText(kStatusMoving,"Перемещается");
  SetText(kStatusCreated,"Создан");
  SetText(kStatusCreating,"Создаётся");
  SetText(kStatusMaintenance,"Запущен (обслуживание)");  
  SetText(kStatusExportingDatabase,"Экспортирую БД...");  
  SetText(kStatusExportedDatabase,"Экспорт БД завершён");  
  SetText(kStatusImportedBackup,"Import Finished");  
  SetText(kStatusExportingRegister,"Экспортирую регистр...");         
  SetText(kStatusExportedRegister,"Экспорт завершён.");         
  SetText(kStatusNodeUnreachable,"Невозможно установить связь с узлом"); 
  SetText(kStatusExportingCompany,"ЭКспортирую компанию..."); 
  SetText(kStatusExportedCompany,"Экспорт завершён."); 
  SetText(kStatusRunningTest,"Запущен (тест)"); 
  SetText(kStatusRunningReserve,"Готов (резерв.)"); 
  SetText(kStatusRunningPreparingTest,"Создаётся (тест)"); 
  SetText(kStatusRunningUpdate,"Готов (обнов.)"); 
  SetText(kStatusRunningPreparingUpdate,"Создаётся (обнов.)"); 
  SetText(kStatusRunningPendingStop,"Ожидание перезагрузки"); 
  SetText(kStatusRunningPreparingReserve,"Создается (резерв)"); 
  EndSet;
  
  SetBegin(368);
  SetText(0,"Аннуитетные платежи");
  SetText(1,"Постоянный платеж по кредиту - снижающийся платеж по процентам");
  SetText(2,"Постоянный платеж по кредиту - постоянный платеж по процентам");
//  SetText(2,"Using Specific #Instalment# Record");
  EndSet;

  SetBegin(369); 
  SetText(0,"Неизвестный");
  SetText(1,"Интернет-магазин");
  SetText(2,"University");
  SetText(3,"Онлайн-резервирование");
  EndSet;
  
  SetBegin(370);
  SetText(0,"Не требуется");
  SetText(1,"Требуется только один");
  SetText(2,"По крайней мере требуется один");
  SetText(3,"Самое большое разрешено только один");
  SetText(4,"Требуются все или ни одного");
  EndSet;

  SetBegin(371);
  SetText(0,"Включено");
  SetText(1,"Обязательно");
  SetText(2,"Опционально");
  SetText(3,"Опционально (Рекомендуется)");
  EndSet;

  SetBegin(372);
  SetText(0,"-");
  SetText(1,"Выбрать самый дешевый");
  SetText(2,"Выбрать самый дорогой");
  EndSet;

  SetBegin(373);
  SetText(0,"Единовременный");
  SetText(1,"Ежемесячная плата");
  SetText(2,"Платеж");
  SetText(3,"Процент");
  EndSet;
  
  SetBegin(374);
  SetText(0,"Единовременный");
  SetText(1,"Ежемесячная плата");
  EndSet;
  
  SetBegin(375);
  SetText(0,"Полный доступ");
  SetText(1,"Нет доступа");
  EndSet;

  SetBegin(376);
  SetText(0,"halcust");
  SetText(1,"halpatch");
  EndSet;
  
  SetBegin(377);
  SetText(0,"Только в сервере");
  SetText(1,"И в сервере и в клиенте");
  EndSet;
  
  SetBegin(379);
  SetText(0,"Только заголовок страницы");
  SetText(1,"Сайт и заголовок страницы");
  SetText(2,"Только заголовок сайта");
  SetText(3,"Страница и заголовок сайта");
  EndSet;

  SetBegin(380);
  SetText(0,"Продукт");
//  SetText(1,"Группы");
  EndSet;
    
  SetBegin(381);
  SetText(kReportParallelityNone,"Не паралельно");
  SetText(kReportParallelitySingleThread,"Последовательная паралель");
  SetText(kReportParallelityMultiThread,"Много последовательная");
  EndSet;
  
  SetBegin(382);
  SetText(kDefaultCodepage,"По умолчанию");
  SetText(kISO88591,"ISO 8859-1 (Западная Европа)");
  SetText(kISO88594,"ISO 8859-4 (Балтика)");
  SetText(kISO88595,"ISO 8859-5 (Кирилица)");
  SetText(kISO885915,"ISO 8859-15 (Западн. европа с еврп. символами)");
  SetText(kcp1250,"Windows codepage 1250 (Центральная Европа)");
  SetText(kcp1251,"Windows codepage 1251 (Кирилица)");
  SetText(kcp1252,"Windows codepage 1252 (Западная Европа)");
  SetText(kcp1257,"Windows codepage 1257 (Балтика)");
  SetText(kKOI8R,"KOI8-R (Кирилица)");
  EndSet;
  
  SetBegin(383);
  SetText(kCodeLevelSystem,"Система");
  SetText(kCodeLevelCountry,"Зависящ. от страны");
  SetText(kCodeLevelIndustry,"Зависящ. от индустрии");
  SetText(kCodeLevelSite,"Зависящ от клиента"); // Site means approx. "One Customer Site", could possibly be translated "Customer Specific"
  //SetText(kCodeLevelMax,"");
  EndSet;
  
  SetBegin(384);
  SetText(kUserDefRepColumnTypeCode,"Код");
  SetText(kUserDefRepColumnTypeComment,"Комментарий");
  SetText(kUserDefRepColumnTypeActuals,"Реальные данные");
  SetText(kUserDefRepColumnTypeColumnsSumup,"Суммиров. колонки");
  SetText(kUserDefRepColumnTypeBudget,"Бюджет");
  SetText(kUserDefRepColumnTypeRevBudget,"Прогноз");
  SetText(kUserDefRepColumnTypePOCommitments,"Обязательства заказа поставщику");
  SetText(kUserDefRepColumnTypePUAccruals,"Суммы к уплате за товар");
  EndSet;
  
  SetBegin(385);
  SetText(kUserDefRepPeriodTypeSelectedPeriod,"Выбранный период");
  SetText(kUserDefRepPeriodTypeMonth,"Месяц"); 
  SetText(kUserDefRepPeriodTypeYear,"Год"); 
  SetText(kUserDefRepPeriodTypeFiscalYearToDate,"Финансовый год до даты"); 
  SetText(kUserDefRepPeriodTypeFiscalYear,"Финансовый год"); 
  EndSet;

  SetBegin(386);
  SetText(0,"-");
  SetText(1,"Запись операции из платежа на удерживаемый налог");
  EndSet;

  SetBegin(387);
  SetText(0,"Дата оплаты");
  SetText(1,"Дата сч/ф");
  SetText(2,"Дата резервир.");
  EndSet;

  SetBegin(388);
  SetText(0,"Скидка");
  SetText(1,"Наценка %");
  SetText(2,"Наценка");
  EndSet;

  SetBegin(389);
  SetText(0,"Метод оплаты");
  SetText(1,"Модификатор");
  EndSet;

  SetBegin(390);
  SetText(kInvoiceRowTypeCashPayment,"Наличные");
  SetText(kInvoiceRowTypeCreditCardPayment,"Кредитная карта");
//  SetText(kInvoiceRowTypeCreditCardPayment,"Дебитная карта");
  SetText(kInvoiceRowTypeGiftVoucherPayment,"Подарочный ваучер");
  SetText(kInvoiceRowTypeChequePayment,"Чек");
  SetText(kInvoiceRowTypeLoyaltyPointsPayment,"Накопительные баллы");
  EndSet;

  SetBegin(391);
  SetText(0,"Не подтвержден");
  SetText(1,"Подтвержден");
  EndSet;

  SetBegin(392);
  SetText(0,"Укажите день");
  SetText(1,"Понедельник");
  SetText(2,"Вторник");
  SetText(3,"Среда");
  SetText(4,"Четверг");
  SetText(5,"Пятница");
  SetText(6,"Суббота");
  SetText(7,"Воскресенье");
  EndSet;
  
  SetBegin(393);
  SetText(0,"По умолчанию");
  SetText(1,"Контроль доступа без ограничений");
  EndSet;

  SetBegin(394);
  SetText(kUnknownOS,"Неизвестен");
  SetText(kAnyOS,"Любая опер. система");
  SetText(kOSMacOSX,"Mac OS X");
  SetText(kOSWindows98,"Windows 98");
  SetText(kOSWindowsXP,"Windows 2K/XP/Vista");
  SetText(kOSMacOS9,"Mac OS 9");
  SetText(kOSLinux,"Linux");
  SetText(kOSWindowsCE,"Windows CE");
  SetText(kOSSymbian,"Symbian");
  SetText(kOSAndroid,"Android");
  EndSet;

  StrSetBegin(395);
  StrSetText("","Все продукты");
  StrSetText("0","Hansa Financials");
  StrSetText("1","Classic"); /* or is it Hansa Classic? */
  StrSetText("2","Professional");
  StrSetText("3","HansaRaama");
  StrSetText("4","FirstOffice");
  StrSetText("5","Classic Lit"); /* Lithuanian? */
  StrSetText("6","Riigi Tarkvara");
  StrSetText("7","Office/2");
  StrSetText("8","Office/2 TB");
  StrSetText("9","FirstOffice Small");
  StrSetText("10","FirstOffice Currency");  /* Not valid as a type */
  StrSetText("11","First Contact");
  StrSetText("12","Off Line"); /* ??? */
  StrSetText("13","First Office ASP");
  StrSetText("14","HansaWorld Enterprise");
  StrSetText("15","HansaWorld Express");
  StrSetText("16","FirstOffice Professional");
  StrSetText("17","Business Communicator");
  StrSetText("18","Business Organiser");
  StrSetText("19","SmartApps");
  StrSetText("67","Russian Standard");         
  EndStrSet;
  
  SetBegin(396);
  SetText(0,"По умолчанию (стоимость)");
  SetText(1,"Первоначальная цена");
  SetText(2,"Действительная цена");
  EndSet;

  StrSetBegin(397);
  StrSetText("Все","Все"); 
  StrSetText("RestAccVc","Счета бара"); 
  StrSetText("IVVc","Счета-фактуры"); 
  StrSetText("QTVc","Предложения"); 
  StrSetText("ORVc","Счета"); 
  StrSetText("IVCashVc","Сч/ф POS"); 
  EndStrSet;

  SetBegin(398);
  SetText(kRoundingStepNone,"нет шага");
  SetText(kRoundingStep5,"5");
  SetText(kRoundingStep25,"2.5");
  EndSet;
  
  SetBegin(399);
  SetText(kRoundingModeHalfUp,"половина вверх");
  SetText(kRoundingModeHalfDown,"половина вниз");
  SetText(kRoundingModeToEven,"к четному");
  SetText(kRoundingModeToOdd,"к нечетному");
  SetText(kRoundingModeTruncate,"отбросить");
  EndSet;
  
  SetBegin(400);
  SetText(kRoundingDirectionToFromPosInf,"вверх (математически)");
  SetText(kRoundingDirectionToFromZero,"вверх по модулю");
  EndSet;
  
  SetBegin(401); 
  SetText(kWebAccessUnknown,"Unknown");
  SetText(kWebAccessElement,"Element");
  SetText(kWebAccessStructure,"Structure");
  SetText(kWebAccessHansaManualsPage,"HansaManuals");
  SetText(kWebAccessMasterGlobe,"Click Globe");
  SetText(kWebAccessMasterHelp,"Click Help");
  SetText(kWebAccessMasterPay,"Click PAY");
  SetText(kWebAccessMasterBannner,"Click Master Control Banner");
  SetText(kWebAccessMarketplace,"Click Marketplace");
  SetText(kWebAccessMarketplaceRegisterCC,"Интернет-магазин: регистрировать кредитную карту");         
  SetText(kWebAccessMarketplaceRegisterCCResult,"Интернет: результат регистрации кредитной карты");         
  SetText(kWebAccessMasterBannnerShown,"NC Banner: Shown"); //!!TRANSLATE
  EndSet;
  
  SetBegin(402); 
  SetText(0,"По умолчанию");
  SetText(1,"Офиц. номер на стр.");
  EndSet;
  
  SetBegin(403);
  SetText(kKPITypeNone,"None");
  SetText(kKPITypeActivityCostTime,"Стоимость деятельности");
  SetText(kKPITypeCost,"Стоимость продаж");
  SetText(kKPITypeGPPrc,"Приб. %");
  SetText(kKPITypeActivityNr,"Нр. деятельности");
  SetText(kKPITypeORNr,"Нр.счетов");
  SetText(kKPITypeQTNr,"Нр. комм. предложений");
  SetText(kKPITypeORStock,"Невыполненные счета");
  SetText(kKPITypeQTStock,"Невыполненные комм. предл.");
  SetText(kKPITypeAPDue,"#P/L# Due");
  SetText(kKPITypeAP,"#P/L# On Acc.");
  SetText(kKPITypeIP,"Платежи");
  SetText(kKPITypeSalesExclVAT,"Продажи без НДС");
  SetText(kKPITypeSalesInclVAT,"Продажи с НДС");
  SetText(kKPITypeARDueNoDisputed,"#S/L# Due excluding Disputed Invoices");
  SetText(kKPITypeARDue,"#S/L# Due");
  SetText(kKPITypeAR,"#S/L# On Acc.");
  EndSet;
  
  SetBegin(404);
  SetText(kNavLinkOpenInline,"Inline");
  SetText(kNavLinkOpenExternal,"External");
  EndSet;
  
  SetBegin(405);
  SetText(kKPIStatusInvalid,"Invalid");
  SetText(kKPIStatusValid,"Valid");
  SetText(kKPIStatusInvalidCalculating,"Recalculating");
  SetText(kKPIStatusValidCalculating,"Initial Calc.");
  EndSet;
  
  SetBegin(406);
  SetText(kWindowDataColumn,"Колонка");
  EndSet;
  
  SetBegin(407);
  SetText(kUniversityURLStateValid,"Valid");
  SetText(kUniversityURLStatePurge,"Purge");
  SetText(kUniversityURLStateRequest,"Request");
  SetText(kUniversityURLStateRequesting,"Запрашиваю..."); 
  SetText(kUniversityURLStateValidate,"Validate");
  SetText(kUniversityURLStateNothing,"Not Found");
  EndSet;
  
  StrSetBegin(408);
  StrSetText("","-");
  StrSetText("LANG","Язык");
  StrSetText("MINVER","С версии"); // DB version format
  StrSetText("MAXVER","По версию");
  StrSetText("PROD","Продукт");
  StrSetText("INFOTYPE","Information type at URL");
  EndStrSet;
  
  SetBegin(409);
  SetText(kDeviceTypeiPhone,"iPhone");
  SetText(kDeviceTypePocketPC2003,"PocketPC 2003");
  SetText(kDeviceTypeSymbianS60,"Symbian S60");
  SetText(kDeviceTypeWindowsMobile5,"Windows Mobile");
  SetText(kDeviceTypeMaemo,"Maemo");
  SetText(kDeviceTypeAndroidPhone,"Android Phone");
  EndSet;

  SetBegin(410);
  SetText(0,"Аванс");
  SetText(1,"Удержание");
  EndSet;

  SetBegin(411);
  SetText(kLocalCCTerminalNone,"None");
  SetText(kLocalCCTerminalBambora,"Bambora (IP)");
  SetText(kLocalCCTerminalPCEFTPOS,"PC-EFTPOS (IP)");
  SetText(kLocalCCTerminalRahaxi,"Rahaxi");
  SetText(kLocalCCTerminalSteriaCOM,"SteriaPay (Serial/COM)");
  SetText(kLocalCCTerminalSteriaIP,"SteriaPay (IP)");
  SetText(kLocalCCTerminalVerifoneBanksys,"Verifone (Serial/COM)"); //!!TRANSLATE
  SetText(kLocalCCTerminalYomaniBanksys,"Yomani banksys (Serial/COM)");
//  SetText(kLocalCCTerminalIngenico6550,"Ingenico 6550 (Serial/COM)");//not finished
  EndSet;
  
  SetBegin(412);
  SetText(kCompanyTypeUnknown,"Неизвестный");
  SetText(kCompanyTypeNonConsolidated,"Неконсолидируемая");
  SetText(kCompanyTypeConsolidated,"Консолидируемая");
  SetText(kCompanyTypeSingleUser,"Однопользовательская");
  SetText(kCompanyTypePerson,"Person/Individual");
  EndSet;

  SetBegin(413);
  if (HasLocalization("POL")==false) then begin
  SetText(kSerialPortDeviceClassReceiptPrinter,"Принтеров чеков");
  end;
  SetText(kSerialPortDeviceClassFiscalPrinter,"Фискальный принтер");
//  if (HasLocalization("SWE")) then begin
    SetText(kSerialPortDeviceClassFiscalControlUnit,"Fiscal Control Unit");
//  end;
  SetText(kSerialPortDeviceClassDisplay,"Дисплей покупателя");
  SetText(kSerialPortDeviceClassDrawer,"Ящик");
//  SetText(kSerialPortDeviceClassStockControl,"#Stock# Control");
  if (HasLocalization("POL")==false) then begin
  SetText(kSerialPortDeviceClassCreditCardTerminal,"Credit Card Terminal");
  end;
  EndSet;

  SetBegin(414);
  SetText(kFlowControlDefault,"По умолчанию");
  SetText(kFlowControlDTRDSR,"DTR/DSR");
  SetText(kFlowControlRTSCTS,"RTS/CTS");
  SetText(kFlowControlNone,"None");
  EndSet;
  
  SetBegin(415);
  SetText(kSerialPortDeviceModelNone,"None");
//  if (HasLocalization("LTU")) then begin
  SetText(kSerialPortDeviceModelPrinterAxiohmA777,"Axiohm A777"); 
//  end;
//  if (HasLocalization("POL")==false) then begin
  SetText(kSerialPortDeviceModelPrinterEPSONTMU210,"Epson TMU210"); 
  SetText(kSerialPortDeviceModelPrinterSTARTSP210,"Star TSP100"); 
  SetText(kSerialPortDeviceModelPrinterEPSONTMT88II,"Epson TM-T88II"); 
//  end;

  SetText(kSerialPortDeviceModelPrinterAxiohmA777,"Axiohm A777"); 
      SetText(kSerialPortDeviceModelPrinterCHD6800,"CHD 6800 (Latvia)");
    SetText(kSerialPortDeviceModelVirtualFiscPrinterCHDFMPOS,"CHD Virtual Fiscal Printer (Latvia)");
    SetText(kSerialPortDeviceModelFiscPrinterFM32DLL,"Fiscal Printer Brio FM32 with Middle Ware (Latvia)"); //!!TRANSLATE
//  end;
  
//  if (HasLocalization("POL")) then begin
  SetText(kSerialPortDeviceModelFiscPrinterPOSNET1,"Fiscal Printer POSNET 1 (Poland, DF301 Protocol)"); 
  SetText(kSerialPortDeviceModelFiscPrinterPOSNET2,"Fiscal Printer POSNET 2 (Poland, DF301 Protocol)"); 
  SetText(kSerialPortDeviceModelFiscPrinterOPTIMUS,"Fiscal Printer OPTIMUS (Poland, DF301 Protocol)"); 
  SetText(kSerialPortDeviceModelFiscPrinterPOSNETThermal5V,"Fiscal Printer POSNET Thermal 5V (Poland), DF301 Protocol"); 
  SetText(kSerialPortDeviceModelFiscPrinterPOSNET,"Fiscal Printer POSNET (Poland, POSNET Protocol)"); 
  SetText(kSerialPortDeviceModelFiscPrinterPOSNETwVATNr,"Fiscal Printer POSNET (Poland, POSNET Protocol w VAT, from 01/10/2013)");   
    SetText(kSerialPortDeviceModelFiscPrinterPOSNETTCPIP,"Fiscal Printer POSNET HD FV EJ (Poland, POSNET Protocol over TCPIP)");  //!!TRANSLATE
//  SetText(kSerialPortDeviceModelFiscPrinterFP2000,"Fiscal Printer FP2000 (Zimbabwe)"); // no code
//  SetText(kSerialPortDeviceModelFiscPrinterFP2000,"ARG,PRT"); // no code
//  if (HasLocalization("SVK")) then begin
  SetText(kSerialPortDeviceModelFiscPrinterFP3000,"Fiscal Printer FP3000 (Slovakia)"); 
//  end;
//  if (HasLocalization("ARG")) then begin
  SetText(kSerialPortDeviceModelFiscPrinterHASAR,"Fiscal Printer Hasar (Argentina)"); 
//  end;
//  if (HasLocalization("PAN")) then begin
  SetText(kSerialPortDeviceModelFiscPrinterHASARPL23F,"Fiscal Printer Hasar PL23F (Panama)"); 
//  end;
//  if (HasLocalization("ARG")) then begin
  SetText(kSerialPortDeviceModelFiscPrinterEPSON,"Fiscal Printer Epson (Argentina)"); 
//  end;
//  if (HasLocalization("SRB")) then begin
  SetText(kSerialPortDeviceModelFiscPrinterFI550,"Fiscal Printer Fi-550 (Serbia)"); 
//  end;
//  if (HasLocalization("ARG")) then begin
  SetText(kSerialPortDeviceModelFiscPrinterEPSONTMU220,"Fiscal Printer Epson TM-U220 (Argentina)");
//  end;
//  if (HasLocalization("ZWE")) then begin
  SetText(kSerialPortDeviceModelFiscPrinterEPSONTMT81F,"Fiscal Printer Epson TM-T81F (Zimbabwe)");
//  end;
//  if (HasLocalization("KEN")) then begin
    SetText(kSerialPortDeviceModelFiscPrinterTSLFP05,"Fiscal Printer TSL FP05 (Kenya)");
//  end;
//  if (HasLocalization("LTU")) then begin
  SetText(kSerialPortDeviceModelFiscPrinterFB05,"Fiscal Printer Empirija FB05 (Lithuania)");
    SetText(kSerialPortDeviceModelFiscPrinterFB15,"Fiscal Printer Empirija FB15 (Lithuania)"); //!!TRANSLATE
    SetText(kSerialPortDeviceModelFiscPrinterFB15DLL,"Fiscal Printer Empirija FB15 with Middle Ware (Lithuania)"); //!!TRANSLATE
  SetText(kSerialPortDeviceModelFiscPrinterST05,"Fiscal Printer Citizen ST-05 (Lithuania)");
//  end;
//  if (HasLocalization("EST")) then begin
    SetText(kSerialPortDeviceModelFiscPrinterFPRINT02K,"Fiscal Printer FPrint 02K");
//  end;
  SetText(kSerialPortDeviceModelFiscPrinterRCHFlea,"Fiscal Printer RCH Flea");
//  SetText(kSerialPortDeviceModelDIGITAG,"Digitag"); 
//  if (HasLocalization("SWE")) then begin
  SetText(kSerialPortDeviceModelFiscPrinterCLEANCASHTypeA,"Clean Cash Type A(Sweden)");
  SetText(kSerialPortDeviceModelFiscPrinterCLEANCASHTypeC,"Clean Cash Type C (Sweden)");
//  end;
  SetText(kSerialPortDeviceModelDisplayGeneric,"Generic Pole Display");
  SetText(kSerialPortDeviceModelDisplayPosiFlex,"Posiflex Pole Display");
//  if (HasLocalization("FIN")) then begin
    SetText(kSerialPortDeviceModelCreditCardTerminalYomaniBanksys,"Credit Card Terminal Yomani Banksys");
    SetText(kSerialPortDeviceModelCreditCardTerminalVerifoneBanksys,"Credit Card Terminal Verifone"); //!!TRANSLATE
//  end;
//  SetText(kSerialPortDeviceModelCreditCardTerminalIngenico6550,"Credit Card Terminal Ingenico 6550");
  SetText(kSerialPortDeviceModelFiscPrinterBematechMP2100,"Фискальный принтер Bematech MP-2100 TH FI");         
  EndSet;

  SetBegin(416);
  SetText(0,"Requested");
  SetText(1,"Planned");
  SetText(2,"Confirmed");
  SetText(3,"?");
  SetText(4,"Cancelled");
  SetText(5,"No Show");
  SetText(6,"Late Cancellation");
  SetText(7,"Not Interested");
  SetText(8,"Not Allowed");
  SetText(9,"Waiting List");
  EndSet;

  SetBegin(417);
  SetText(kShopBaskOwnerCustomer,"Клиент");
  SetText(kShopBaskOwnerReservation,"Reservation");
  SetText(kShopBaskOwnerRsrtEvent,"Курорт - мероприятие");
  EndSet;

  SetBegin(418);
  SetText(kShopBaskDestinationOrder,"Order");
  SetText(kShopBaskDestinationInvoice,"Счёт-фактура");
  SetText(kShopBaskDestinationQuote,"Quotation");
  EndSet;
  
  SetBegin(419);
  SetText(kResortEventInvoiceable,"Invoicable");
  SetText(kResortEventOnReservation,"Reservation");
  SetText(kResortEventGoodwill,"Goodwill");
  EndSet;
  
  StrSetBegin(420);
  StrSetText("","Unknown");
  StrSetText("EA", "Arved.ee");
  StrSetText("EAm","Электронная почта");
  StrSetText("hEA","Swedbanki Internetipank");
  StrSetText("iEAb","Itella B2B Basic");
  StrSetText("kEA","i-pank");
  StrSetText("mEA","Nordea internetipank");
  StrSetText("oEA","S@mpo");
  StrSetText("yEA","U-Net / Business");
  EndStrSet;  
  
  SetBegin(421);
  SetText(kJobTypeUploadBackup,"Upload Backup");
  SetText(kJobTypeDownloadBackup,"Download Backup");
  EndSet;
  
  SetBegin(422);
  SetText(kJobStatusRunning,"Running"); // could be translated "in progress"
  SetText(kJobStatusFinished,"Finished");
  EndSet;

  StrSetBegin(423);
  StrSetText(British,"British");
  StrSetText(Polish,"Polish");
  EndStrSet;

  SetBegin(424);
  SetText(kPeriodLengthBlank,"-");
  SetText(kPeriodLengthWeek,"Неделя");
  SetText(kPeriodLengthMonth,"Month");
//  SetText(kPeriodLengthQuarter,"Quarter");
  SetText(kPeriodLengthYear,"Year");
  EndSet;

  SetBegin(425);
  SetText(kPeriodTypeBlank,"-");
  SetText(kPeriodTypeRolling,"From Current Date");
  SetText(kPeriodTypeLastFull,"Current Full Unit");
  SetText(kPeriodTypeLastUntilSamePoint,"Current Unit, Until Current Date");
  EndSet;

  SetBegin(426);
  SetText(0,"");
  SetText(1,"Transferred");
  EndSet;

  SetBegin(427);
  SetText(kBiometricSignatureNone,"None");
  SetText(kBiometricSignatureFingerprint,"Fingerprint");
//  SetText(kBiometricSignatureVoiceprint,"Voiceprint");
//  SetText(kBiometricSignatureEyeimage,"Eye Image");
  EndSet;

  SetBegin(428);
  SetText(kBiometricDeviceNone,"None");
  SetText(kBiometricDeviceDigitalPersona,"DigitalPersona");
  EndSet;

  SetBegin(429);
  SetText(kRestAccRowStatusNormal,"Normal");
  SetText(kRestAccRowStatusOrdered,"Ordered");
  SetText(kRestAccRowStatusFireOrder,"Fire Order");
  SetText(kRestAccRowStatusFireCancelled,"Cancelled");
  EndSet;
  
/* 31000 32000 reserved for webshops and other customizations */
  
  StrSetBegin(430);
  StrSetText(103,"103 - Очень старая версия Hansa!!");
  StrSetText(104,"104 - Очень старая версия Hansa!!");
  StrSetText(105,"105 - Очень старая версия Hansa!!");
  StrSetText(106,"106 - Очень старая версия Hansa!!");
  StrSetText(107,"107 - Очень старая версия Hansa!!");
  StrSetText(108,"108 - Очень старая версия Hansa!!");
  StrSetText(109,"109 - Очень старая версия Hansa!!");
  StrSetText(110,"110 - Очень старая версия Hansa!!");
  StrSetText(111,"111 - HansaFinancials 3.6");
  StrSetText(112,"112 - Office/2 3.6");
  StrSetText(113,"113 - FirstOffice 3.6");
  StrSetText(115,"115 - HansaFinancials 3.7");
  StrSetText(116,"116 - Office/2 3.7");
  StrSetText(117,"117 - FirstOffice 3.7");
  StrSetText(118,"118 - FirstOffice Mini 3.7");
  StrSetText(119,"119 - FirstOffice Currency 3.7");
  StrSetText(120,"120 - HansaFinancials 3.8");
  StrSetText(121,"121 - Office/2 3.8");
  StrSetText(122,"122 - FirstOffice 3.8");
  StrSetText(123,"123 - FirstOffice Mini 3.8");
  StrSetText(124,"124 - FirstOffice Currency 3.8");
  StrSetText(125,"125 - FirstContact 3.8");
  StrSetText(130,"130 - HansaFinancials 3.9");
  StrSetText(131,"131 - Office/2 3.9");
  StrSetText(132,"132 - FirstOffice 3.9");
  StrSetText(133,"133 - FirstOffice Mini 3.9");
  StrSetText(134,"134 - FirstOffice Currency 3.9");
  StrSetText(135,"135 - FirstContact 3.9");
  StrSetText(140,"140 - HansaFinancials 4.0");
  StrSetText(141,"141 - Office/2 4.0");
  StrSetText(142,"142 - FirstOffice 4.0");
  StrSetText(143,"143 - FirstOffice Mini 4.0");
  StrSetText(144,"144 - FirstOffice Currency 4.0");
  StrSetText(145,"145 - FirstContact 4.0");
  
  StrSetText(147,"147 - HansaWorld 4.0");
  StrSetText(150,"150 - HansaFinancials 4.1 (first release)");
  StrSetText(151,"151 - Office/2 4.1 (first release)");
  StrSetText(152,"152 - FirstOffice 4.1 (first release)");
  StrSetText(153,"153 - FirstOffice Mini 4.1 (first release)");
  StrSetText(154,"154 - FirstOffice Currency 4.1 (first release)");
  StrSetText(155,"155 - FirstContact 4.1 (first release)");
  StrSetText(156,"156 - FirstOffice ASP 4.1 (first release)");
  StrSetText(157,"157 - HansaWorld SMB 4.1 (first release)");
  StrSetText(159,"159 - HansaWorld 4.1 (first release)");
  StrSetText(160,"160 - HansaFinancials 4.1");
  StrSetText(161,"161 - Office/2 4.1");
  StrSetText(162,"162 - FirstOffice 4.1");
  StrSetText(163,"163 - FirstOffice Mini 4.1");
  StrSetText(164,"164 - FirstOffice Currency 4.1");
  StrSetText(165,"165 - FirstContact 4.1");
  StrSetText(166,"166 - FirstOffice ASP 4.1");
  StrSetText(167,"167 - HansaWorld SMB 4.1");
  StrSetText(169,"169 - HansaWorld 4.1");
  StrSetText(171,"171 - Office/2 4.2");
  StrSetText(172,"172 - FirstOffice 4.2");
  StrSetText(173,"173 - FirstOffice Mini 4.2");
  StrSetText(174,"174 - FirstOffice Currency 4.2");
  StrSetText(175,"175 - FirstContact 4.2");
  StrSetText(176,"176 - FirstOffice ASP 4.2");
  StrSetText(177,"177 - HansaWorld SMB 4.2");
  StrSetText(179,"179 - HansaWorld 4.2");
  StrSetText(181,"181 - Office/2 4.3");
  StrSetText(182,"182 - FirstOffice 4.3");
  StrSetText(183,"183 - FirstOffice Mini 4.3");
  StrSetText(184,"184 - FirstOffice Currency 4.3");
  StrSetText(185,"185 - FirstContact 4.3");
  StrSetText(186,"186 - FirstOffice ASP 4.3");
  StrSetText(187,"187 - HansaWorld SMB 4.3");
  StrSetText(188,"188 - FirstOffice Pro");
  StrSetText(189,"189 - HansaWorld 4.3");
  StrSetText(191,"191 - Office/2 5.0");
  StrSetText(192,"192 - FirstOffice 5.0");
  StrSetText(193,"193 - FirstOffice Mini 5.0");
  StrSetText(194,"194 - FirstOffice Currency 5.0");
  StrSetText(195,"195 - FirstContact 5.0");
  StrSetText(196,"196 - FirstOffice ASP 5.0");
  StrSetText(197,"197 - HansaWorld SMB 5.0");
  StrSetText(198,"198 - FirstOffice Pro");
  StrSetText(199,"199 - HansaWorld 5.0");
  StrSetText(201,"201 - Office/2 5.1");
  StrSetText(202,"202 - FirstOffice 5.1");
  StrSetText(203,"203 - FirstOffice Mini 5.1");
  StrSetText(204,"204 - FirstOffice Currency 5.1");
  StrSetText(205,"205 - FirstContact 5.1");
  StrSetText(206,"206 - FirstOffice ASP 5.1");
  StrSetText(207,"207 - HansaWorld SMB 5.1");
  StrSetText(208,"208 - FirstOffice Pro 5.1");
  StrSetText(209,"209 - HansaWorld 5.1");
  
  StrSetText(211,"211 - Office/2 5.2");
  StrSetText(212,"212 - FirstOffice 5.2");
  StrSetText(213,"213 - FirstOffice Mini 5.2");
  StrSetText(214,"214 - FirstOffice Currency 5.2");
  StrSetText(215,"215 - FirstContact 5.2");
  StrSetText(216,"216 - FirstOffice ASP 5.2");
  StrSetText(217,"217 - HansaWorld SMB 5.2");
  StrSetText(218,"218 - FirstOffice Pro 5.2");
  StrSetText(219,"219 - HansaWorld 5.2");
  
  StrSetText(221,"221 - Office/2 5.3");
  StrSetText(222,"222 - FirstOffice 5.3");
  StrSetText(223,"223 - FirstOffice Mini 5.3");
  StrSetText(224,"224 - FirstOffice Currency 5.3");
  StrSetText(225,"225 - FirstContact 5.3");
  StrSetText(226,"226 - FirstOffice ASP 5.3");
  StrSetText(227,"227 - HansaWorld SMB 5.3");
  StrSetText(228,"228 - FirstOffice Pro 5.3");
  StrSetText(229,"229 - HansaWorld 5.3");
  
  StrSetText(231,"231 - Office/2 5.4");
  StrSetText(232,"232 - FirstOffice 5.4");
  StrSetText(233,"233 - FirstOffice Mini 5.4");
  StrSetText(234,"234 - FirstOffice Currency 5.4");
  StrSetText(235,"235 - FirstContact 5.4");
  StrSetText(236,"236 - FirstOffice ASP 5.4");
  StrSetText(237,"237 - HansaWorld SMB 5.4");
  StrSetText(238,"238 - FirstOffice Pro 5.4");
  StrSetText(239,"239 - HansaWorld 5.4");
  
  StrSetText(241,"241 - Office/2 6.0");
  StrSetText(242,"242 - FirstOffice 6.0");
  StrSetText(243,"243 - FirstOffice Mini 6.0");
  StrSetText(244,"244 - FirstOffice Currency 6.0");
  StrSetText(245,"245 - FirstContact 6.0");
  StrSetText(246,"246 - FirstOffice ASP 6.0");
  StrSetText(247,"247 - HansaWorld SMB 6.0");
  StrSetText(248,"248 - FirstOffice Pro 6.0");
  StrSetText(249,"249 - HansaWorld 6.0");
  StrSetText(250,"250 - Books 6.0");
  StrSetText(251,"251 - Books Professional 6.0");
  StrSetText(252,"252 - Books Professional Advanced 6.0");
  StrSetText(253,"253 - Books Job Costing 6.0");
  StrSetText(254,"254 - Books Accounting 6.0");
  StrSetText(255,"255 - Books POS 6.0");
  
  StrSetText(260,"260 - Books 6.1");
  StrSetText(261,"261 - Office/2 6.1");
  StrSetText(262,"262 - FirstOffice 6.1");
  StrSetText(263,"263 - FirstOffice Mini 6.1");
  StrSetText(264,"264 - FirstOffice Currency 6.1");
  StrSetText(265,"265 - FirstContact 6.1");
  StrSetText(266,"266 - FirstOffice ASP 6.1");
  StrSetText(267,"267 - HansaWorld SMB 6.1");
  StrSetText(268,"268 - FirstOffice Pro 6.1");
  StrSetText(269,"269 - HansaWorld 6.1");
  StrSetText(270,"270 - Books 6.2");
  StrSetText(271,"271 - Office/2 6.2");
  StrSetText(272,"272 - FirstOffice 6.2");
  StrSetText(273,"273 - FirstOffice Mini 6.2");
  StrSetText(274,"274 - FirstOffice Currency 6.2");
  StrSetText(275,"275 - FirstContact 6.2");
  StrSetText(276,"276 - FirstOffice ASP 6.2");
  StrSetText(277,"277 - HansaWorld SMB 6.2");
  StrSetText(278,"278 - FirstOffice Pro 6.2");
  StrSetText(279,"279 - HansaWorld 6.2");
  StrSetText(280,"280 - Books 6.3");
  StrSetText(281,"281 - Office/2 6.3");
  StrSetText(282,"282 - FirstOffice 6.3");
  StrSetText(283,"283 - FirstOffice Mini 6.3");
  StrSetText(284,"284 - FirstOffice Currency 6.3");
  StrSetText(285,"285 - FirstContact 6.3");
  StrSetText(286,"286 - FirstOffice ASP 6.3");
  StrSetText(287,"287 - HansaWorld SMB 6.3");
  StrSetText(288,"288 - FirstOffice Pro 6.3");
  StrSetText(289,"289 - HansaWorld 6.3");
  StrSetText(290,"290 - Books 6.4");  
  StrSetText(291,"291 - Office/2 6.4");         
  StrSetText(292,"292 - FirstOffice 6.4");         
  StrSetText(293,"293 - FirstOffice Mini 6.4");         
  StrSetText(294,"294 - FirstOffice Currency 6.4");         
  StrSetText(295,"295 - FirstContact 6.4");         
  StrSetText(296,"296 - FO ASP 6.4");         
  StrSetText(297,"297 - HansaWorld SMB 6.4");         
  StrSetText(298,"298 - FirstOffice Pro 6.4");         
  StrSetText(299,"299 - HansaWorld 6.4");
  StrSetText(300,"300 - Books 7.0");         
  StrSetText(301,"301 - Office/2 7.0");         
  StrSetText(302,"302 - FirstOffice 7.0");         
  StrSetText(303,"303 - FirstOffice Mini 7.0");         
  StrSetText(304,"304 - FirstOffice Currency 7.0");         
  StrSetText(305,"305 - FirstContact 7.0");         
  StrSetText(306,"306 - FO ASP 7.0");         
  StrSetText(307,"307 - HansaWorld SMB 7.0");         
  StrSetText(308,"308 - FirstOffice Pro 7.0");         
  StrSetText(309,"309 - HansaWorld 7.0");
  StrSetText(310,"310 - Books 7.1");         
  StrSetText(311,"311 - Office/2 7.1");         
  StrSetText(312,"312 - FirstOffice 7.1");         
  StrSetText(313,"313 - FirstOffice Mini 7.1");         
  StrSetText(314,"314 - FirstOffice Currency 7.1");         
  StrSetText(315,"315 - FirstContact 7.1");         
  StrSetText(316,"316 - FO ASP 7.1");         
  StrSetText(317,"317 - HansaWorld SMB 7.1");         
  StrSetText(318,"318 - HansaWorld 7.1");         
  StrSetText(319,"319 - HansaWorld 7.1");  
  StrSetText(320,"320 - Books 7.2");         
  StrSetText(321,"321 - Office/2 7.2");         
  StrSetText(322,"322 - FirstOffice 7.2");         
  StrSetText(323,"323 - FirstOffice Mini 7.2");         
  StrSetText(324,"324 - FirstOffice Currency 7.2");         
  StrSetText(325,"325 - FirstContact 7.2");         
  StrSetText(326,"326 - FO ASP 7.2");         
  StrSetText(327,"327 - HansaWorld SMB 7.2");         
  StrSetText(328,"328 - FirstOffice Pro 7.2");         
  StrSetText(329,"329 - HansaWorld 7.2");
  
  StrSetText(330,"330 - Books 8.0"); 
  StrSetText(331,"331 - Office/2 8.0"); 
  StrSetText(332,"332 - FirstOffice 8.0"); 
  StrSetText(333,"333 - FirstOffice Mini 8.0"); 
  StrSetText(334,"334 - FirstOffice Currency 8.0"); 
  StrSetText(335,"335 - FirstContact 8.0"); 
  StrSetText(336,"336 - FO ASP 8.0"); 
  StrSetText(337,"337 - HansaWorld SMB 8.0"); 
  StrSetText(338,"338 - FirstOffice Pro 8.0"); 
  StrSetText(339,"339 - HansaWorld 8.0"); 

  StrSetText(340,"340 - Books 8.1");  
  StrSetText(349,"349 - HansaWorld 8.1");  
  StrSetText(359,"359 - Standard ERP 8.2"); 
  StrSetText(351,"351 - Standard ERP 8.2"); //!!TRANSLATE
  StrSetText(352,"352 - Standard Products"); //!!TRANSLATE
  StrSetText(353,"353 - Standard Products 8.3"); //!!TRANSLATE
  StrSetText(354,"354 - Standard ERP 8.3"); //!!TRANSLATE

  StrSetText(501,"501 - Old Lithuanian Classic!!");
  
  StrSetText(511,"511 - Standard Organizer 6.2");
  StrSetText(512,"512 - Standard Communicator 6.2");
  StrSetText(513,"513 - Standard CRM 6.2");
  StrSetText(514,"514 - Standard Accounts 6.2");
  StrSetText(515,"515 - Standard Bar 6.2");
  StrSetText(516,"516 - Standard Contracts 6.2");
  StrSetText(517,"517 - Standard Hotel 6.2");
  StrSetText(518,"518 - Standard Invoicing 6.2");
  StrSetText(519,"519 - Standard #Nominal Ledger# 6.2");
  StrSetText(520,"520 - Standard Projects 6.2");
  StrSetText(521,"521 - Standard Rentals 6.2");
  StrSetText(522,"522 - Standard #Restaurant# 6.2");
  StrSetText(523,"523 - Standard Shop 6.2");
  StrSetText(524,"524 - Standard #Stock# 6.2");
  StrSetText(525,"525 - Standard Conferences 6.2");
  StrSetText(526,"526 - Standard Documents 6.2");
  StrSetText(527,"527 - Standard Expenses 6.2");
  StrSetText(528,"528 - Standard HR 6.2");
  StrSetText(529,"529 - Standard CRM Server 6.2");
  StrSetText(530,"530 - Standard Accounts Server 6.2");
  StrSetText(531,"531 - Standard Organizer 6.4");         
  StrSetText(532,"532 - Standard Communicator 6.4");         
  StrSetText(533,"533 - Standard CRM 6.4");         
  StrSetText(534,"534 - Standard Accounts 6.4");         
  StrSetText(535,"535 - Standard Bar 6.4");         
  StrSetText(536,"536 - Standard Contracts 6.4");         
  StrSetText(537,"537 - Standard Hotel 6.4");         
  StrSetText(538,"538 - Standard Invoicing 6.4");         
  StrSetText(539,"539 - Standard Nominal Ledger 6.4");         
  StrSetText(540,"540 - Standard Projects 6.4");         
  StrSetText(541,"541 - Standard Rentals 6.4");         
  StrSetText(542,"542 - Standard Restaurant 6.4");         
  StrSetText(543,"543 - Standard Shop 6.4");         
  StrSetText(544,"544 - Standard Stock 6.4");         
  StrSetText(545,"545 - Standard Conferences 6.4");         
  StrSetText(546,"546 - Standard Documents 6.4");         
  StrSetText(547,"547 - Standard Expenses 6.4");         
  StrSetText(548,"548 - Standard HR 6.4");         
  StrSetText(549,"549 - Standard CRM Server 6.4");         
  StrSetText(550,"550 - Standard Accounts Server 6.4");         
  
  StrSetText(701,"701 - HansaWorld Money 6.2");
  StrSetText(624,"624 - Russian Standard 7.3");         

  StrSetText(655,"655 - Purplesoft ERP 8.2"); 

  StrSetText(702,"702 - POS Standalone 6.2");
  StrSetText(712,"712 - POS Standalone 6.3");
  StrSetText(722,"722 - POS Standalone 6.4");
  StrSetText(801,"801 - BusinessPhone 5.2");
  StrSetText(802,"802 - BusinessPhone 5.3");
  StrSetText(803,"803 - BusinessPhone 5.4");
  StrSetText(804,"804 - BusinessPhone 6.0");
  StrSetText(805,"805 - BusinessPhone 6.1");
  StrSetText(806,"806 - BusinessPhone 6.2");
  StrSetText(807,"807 - BusinessPhone 6.3");         
  StrSetText(808,"808 - BusinessPhone 6.4");         
  StrSetText(809,"809 - BusinessPhone 7.0");         
  StrSetText(810,"810 - BusinessPhone 7.1");         
  StrSetText(811,"811 - BusinessPhone 7.2");         
  StrSetText(812,"812 - BusinessPhone 8.0"); 

  StrSetText(901,"901 - Very old Raama version!!");
  StrSetText(902,"902 - Very old Raama version!!");
  StrSetText(903,"903 - HansaRaama 3.8");
  StrSetText(905,"905 - HansaRaama 3.9");
  StrSetText(906,"906 - HansaRaama 4.0");
  StrSetText(907,"907 - HansaRaama 4.1 (first release)");
  StrSetText(908,"908 - HansaRaama 4.1");
  StrSetText(909,"909 - HansaRaama 4.2");
  StrSetText(910,"910 - HansaRaama 4.3");
  StrSetText(911,"911 - HansaRaama 5.0");
  StrSetText(912,"912 - HansaRaama 5.1");
  StrSetText(913,"913 - HansaRaama 5.2");
  StrSetText(914,"914 - HansaRaama 5.3");
  StrSetText(915,"915 - HansaRaama 5.4");
  StrSetText(916,"916 - HansaRaama 6.0");
  StrSetText(917,"917 - HansaRaama 6.1");
  StrSetText(918,"918 - HansaRaama 6.2");
  StrSetText(919,"919 - HansaRaama 6.3");
  StrSetText(920,"920 - HansaRaama 6.4");
  StrSetText(921,"921 - Standard Hansa 7.0");
  StrSetText(922,"922 - HansaRaama 7.1");  
  StrSetText(923,"923 - HansaRaama 7.2");
  StrSetText(924,"924 - HansaRaama 8.0"); 
  StrSetText(951,"951 - HansaRiigitarkvara");
  EndStrSet;
  
  SetBegin(440); //TODO: move into proper position before commit (position as sorted by Set number)
  SetText(0,"Нет");
  SetText(1,"FedEx");
  EndSet;

  SetBegin(441);
  SetText(0,"None");
  SetText(1,"Indirect");
  SetText(2,"Direct");
  SetText(3,"Adult");
  EndSet;

  SetBegin(442);
  SetText(0,"KG/CM");
  SetText(1,"LB/IN");
  EndSet;
  
  SetBegin(431);
  SetText(kPOSButtonTypeBlank,"Пустой");
  SetText(kPOSButtonTypeAddCommentLine,"Добавить комментарий");    
  SetText(kPOSButtonTypeAddHeaderLine,"Добавить заголовок");
  SetText(kPOSButtonTypeAddHiddenLine,"Добавить скрытую строку");
  SetText(kPOSButtonTypeServiceCharge,"Включить стоимость услуг");
  SetText(kPOSButtonTypeAddSubtotalLine,"Добавить строку с промежуточным результатом");
  SetText(kPOSButtonTypeAddOrderDiscount,"Добавить скидку на заказ");
  SetText(kPOSButtonTypeAllInvoices,"Все сч/ф");
  SetText(kPOSButtonTypeAmendLine,"Изменить строку");
  SetText(kPOSButtonTypeAppleCancelAEOrder,"Apple Cancel AE Order");
  SetText(kPOSButtonTypeAppleCreateAEOrder,"Apple Create AE Order");
  SetText(kPOSButtonTypeAppleWarrantyStatusCheck,"Apple Warranty Status Check");    
  SetText(kPOSButtonTypeBaggerSearch,"Поиск упаковщика");
  SetText(kPOSButtonTypeBookings,"Резервирования");
  SetText(kPOSButtonTypeCalculateTip,"Посчитать чаевые");
  SetText(kPOSButtonTypeCashPayment,"Наличные");
  SetText(kPOSButtonTypeChangeAddress,"Change Address");
  SetText(kPOSButtonTypeEditDate,"Change Date");
  SetText(kPOSButtonTypeChangeDiscountMatrix,"Change Discount Matrix");
  SetText(kPOSButtonTypeChangeTerms,"Change Terms");
  SetText(kPOSButtonTypeLogin,"Сменить пользов.");  
  SetText(kPOSButtonTypeChequePayment,"Чек");
  SetText(kPOSButtonTypeCloseSession,"Открыть сессию");
//  if (HasLocalization("POL")) then begin
    SetText(kPOSButtonTypeCorrectionInvoice,"Correction Invoice");
//  end;
  SetText(kPOSButtonTypeCreateActivity,"Создать Деятельность");
  SetText(kPOSButtonTypeCreateCashin,"Создать приход");
  SetText(kPOSButtonTypeCreateCashOut,"Create Cash Out");
  SetText(kPOSButtonTypeCreateCorrectionInvoice,"Create Correction Invoice");
  SetText(kPOSButtonTypeCreateCreditNote,"Создать кредит-ноту");
  SetText(kPOSButtonTypeCreateCreditEMail,"Создать электронное письмо");
  SetText(kPOSButtonTypeCreateGC,"Создать Подарочный сертификат");  
  SetText(kPOSButtonTypeCreditCardPayment,"Кредитная карточка");
  SetText(kPOSButtonTypeCreditCardPaymentReversal,"Credit Card Payment Reversal");  
  SetText(kPOSButtonTypeCreditNote,"Кредитная нота");  
  SetText(kPOSButtonTypeCustomerSearch,"Найти клиента");
  SetText(kPOSButtonTypeCustomerSearchFiltered,"Найти клиента BF");
  SetText(kPOSButtonTypeDebitCardPayment,"Дебитная карточка");
  SetText(kPOSButtonTypeDeleteItem,"Удалить строку");
  SetText(kPOSButtonTypeGotoPage,"Открыть страницу");
  SetText(kPOSButtonTypeVolumetricBarCodeScan,"Динамический штрих-код");
  SetText(kPOSButtonTypeEnterReferenceNumber,"Enter Reference Number"); //!!TRANSLATE
  SetText(kPOSButtonTypeFinish,"Завершить");
  SetText(kPOSButtonTypeGetCashFloat,"Get Cash Float");
  SetText(kPOSButtonTypeGiftReceipt,"Подарочный чек");
  SetText(kPOSButtonTypeGiftVoucherPayment,"Подарочный сертификат");
  SetText(kPOSButtonTypeInstructions,"Инструкции");
  SetText(kPOSButtonTypeInvalidateInvoice,"Аннулировать сч/ф");
  SetText(kPOSButtonTypeInvoiceStatus,"Статус счёта-фактуры");
  SetText(kPOSButtonTypeItem,"Товар");
  SetText(kPOSButtonTypeItemSearch,"Найти товар");
  SetText(kPOSButtonTypeItemStatus,"Статус товара");
  SetText(kPOSButtonTypeKitchenOrder,"Заказ на кухню");  
  //SetText(kPOSButtonTypeLevelUp,"Level Up");
  SetText(kPOSButtonTypeLoyaltyPointsBonus,"Бонусные накопит. баллы");
  SetText(kPOSButtonTypeLoyaltyCard,"Накопительная карта");
  SetText(kPOSButtonTypeLoyaltyPointsPayment,"Платеж  накопит. баллами");
  SetText(kPOSButtonTypeManagerDiscountOverride,"Manager Discount Override");  
  SetText(kPOSButtonTypeMergeBarTabs,"Объеденить счета ресторана");  
  SetText(kPOSButtonTypeMoveToBarTab,"Move Items to Bar Tab");    
  SetText(kPOSButtonTypeMainSerialNr,"Device Serial Number");
  SetText(kPOSButtonTypeEnterReferenceNumber,"Enter Reference Number"); //!!TRANSLATE
  SetText(kPOSButtonTypeModifier,"Модификатор");
  SetText(kPOSButtonTypeOnAccountPayment,"On Account Payment");
  SetText(kPOSButtonTypeOnHotelGuestAccount,"На счет гостя отеля");  
  SetText(kPOSButtonTypeOpenRecord,"Open Record");  
  SetText(kPOSButtonTypeOpenCashDrawer,"Открыть денежн.ящик");  
  SetText(kPOSButtonTypeEditCustomerRecord,"Open Customer Record");
  SetText(kPOSButtonTypeEditItemRecord,"Open Item Record");
  SetText(kPOSButtonTypeOpenCalendar,"Open Calendar");
  SetText(kPOSButtonTypeOpenNLTransaction,"Открыть запись операции");
  SetText(kPOSButtonTypeOpenTaxMatrix,"Открыть матрицу налогов");
  SetText(kPOSButtonTypOpenInvoices,"Неоплаченные сч/ф");  
  SetText(kPOSButtonTypeSpecialMenu,"Функция меню операций");
  SetText(kPOSButtonTypeOpenSession,"Открыть сессию");
  SetText(kPOSButtonTypeOverrideOfficialSerNr,"Override Official Serial Number"); //!!TRANSLATE
  SetText(kPOSButtonTypePauseSales,"Остановить продажи");    
  SetText(kPOSButtonTypePasteQuotation,"Вставить Коммерческое предложение");    
  SetText(kPOSButtonTypePasteSalesOrder,"Вставить Счёт клиенту");    
  SetText(kPOSButtonTypePayment,"Заплатить");
  SetText(kPOSButtonTypePaymentButtonsLayout,"Pay (Buttons layout)"); //!!TRANSLATE
  SetText(kPOSButtonTypePaymentOneMode,"Pay (one Mode)"); //!!TRANSLATE
  SetText(kPOSButtonTypePOSCommand,"Команда кас.терм.");
  SetText(kPOSButtonTypePriceLookup,"Посмотреть цену");
  SetText(kPOSButtonTypePreviousSalesPrices,"Предыдущие цены на продажу");
  SetText(kPOSButtonTypePrintCancellation,"Печатать отмену");  
  SetText(kPOSButtonTypePrintFireOrder,"Печатать срочный заказ");  
  SetText(kPOSButtonTypePrintInvoice,"Печатать сч/ф");  
  SetText(kPOSButtonTypePrintProformaInvoice,"Печатать счёт-проформу");
  SetText(kPOSButtonTypePrintOrder,"Печатать сч/ф ресторана");  
  SetText(kPOSButtonTypePrintOrderToKitchen,"Печатать счет рест. на кухню");  
  SetText(kPOSButtonTypePutCashFloat,"Put Cash Float");  
  SetText(kPOSButtonTypeConnectToCCTerminal,"Подключение к Кредитному терминалу");  
  SetText(kPOSButtonTypeReprintLastCCSlip,"Перепечатка Последнего Кредитного окна");  
  SetText(kPOSButtonTypeReprintReceipt,"Перепечатать чек");
  SetText(kPOSButtonTypeResumeSales,"Итог продаж");    
  SetText(kPOSButtonTypeReturn,"Возврат");
  SetText(kPOSButtonTypeReturnInvoiceNo,"№ возврата");
  SetText(kPOSButtonTypeReturnReason,"Причина Возврата");
  SetText(kPOSButtonTypeRunReportOnServer,"Запустить отчет на сервере");
  SetText(kPOSButtonTypeSalesAssistant,"Помошник продавца");
  SetText(kPOSButtonTypeSelectSalesman,"Выбрать продавца");
  SetText(kPOSButtonTypeGiftVoucherSales,"Продать подарочный сертификат");
  SetText(kPOSButtonTypeSendToFiscalDevice,"Отправить на фискальное устройство");
  SetText(kPOSButtonTypeSendEMail,"Послать эл.почту");
  SetText(kPOSButtonTypeSeniorCitizenDiscount,"Скидка пенсионерам");
  SetText(kPOSButtonTypeLookupSerialNr,"Поиск сер. №");
  SetText(kPOSButtonTypeSetBarTabClass,"Указать класс счета ресторана");  
  SetText(kPOSButtonTypeSetCovers,"Указать к-во мест");  
  SetText(kPOSButtonTypeSetTable,"Указать столик");  
  SetText(kPOSButtonTypeHotelGuests,"Показать гостей отеля");  
  SetText(kPOSButtonTypeSplitBarTabs,"Разделить счета ресторана");  
  SetText(kPOSButtonTypeSplitItem,"Разделить товар");
  SetText(kPOSButtonTypeSupervisorSearch,"Поиск контролера");
  SetText(kPOSButtonTypSaveInvoice,"Отложить сч/ф");  
  SetText(kPOSButtonTypeSyncNow,"Синхронизировать");
//  SetText(kPOSButtonTypeLevelDown,"Level Down");
  SetText(kPOSButtonTypeLevelTop,"Главная");
  SetText(kPOSButtonTypeTransfertoInvoice,"Передать в сч/ф клиенту");
  SetText(kPOSButtonTypeTransfertoQuotation,"Transfer to Quotation");
  SetText(kPOSButtonTypeTransfertoSL,"Передеать в книгу продаж");
  SetText(kPOSButtonTypeTransfertoOrder,"Передать в счет клиенту");
  SetText(kPOSButtonTypeVoidRow,"Отменить товар");  
  SetText(kPOSButtonTypeXReading,"X-Reading");
  SetText(kPOSButtonTypeYReading,"Y-Reading");
  SetText(kPOSButtonTypeZReading,"З-отчёт");         
  EndSet;
  
  SetBegin(432);
  SetText(0,"Нет");
  SetText(1,"Да");
  EndSet;

  SetBegin(433);
  SetText(kOrderTypeNormal,"Обычный");
  SetText(kOrderTypeDropShip,"Прямая отгр.");
  EndSet;

  SetBegin(434);
  SetText(kAcceptanceAct,"Activities"); //!!TRANSLATE
  SetText(kAcceptanceExp,"Авансовые отчеты");
  SetText(kAcceptancePU,"Поступления");
  SetText(kAcceptanceIntOR,"Внутренние заказы");
  SetText(kAcceptanceLeaveApplication,"Leave Application");
  SetText(kAcceptanceLeaveTransfer,"Leave Transfer");
  SetText(kAcceptanceOP,"Платежи");
  SetText(kAcceptanceProjectAct,"Деятельность Проекта");
  SetText(kAcceptanceTBBU,"Бюджеты проектов");
  SetText(kAcceptanceVI,"С/ф поставщика");
  SetText(kAcceptancePO,"Заказы поставщикам");
  SetText(kAcceptanceQT,"Счета клиентам");
  SetText(kAcceptanceCashIV,"Извещ. о платеже кл.");
  SetText(kAcceptanceCredIV,"Кредитов. сч/ф");
  SetText(kAcceptanceIV,"С/ф клиентам");
  SetText(kAcceptanceOR,"Счета клиентам");
  SetText(kAcceptanceSD,"Списания со склада");
  SetText(kAcceptanceTLog,"Travel Log");  
  SetText(kAcceptanceMarginExcept,"Margin Exception"); //!!TRANSLATE
//  SetText(kAcceptanceStockTake,"Инвентаризация");
//  SetText(kAcceptanceSTERequest,"Short term enabler request"); //should this be available to all customers?
  EndSet;

  SetBegin(435);
  SetText(kAcceptanceTypeNone,"Нет");
  SetText(kAcceptanceTypeUser,"Пользователь");
//  SetText(kAcceptanceTypeJobGroup,"Job Group");//no code yet
  EndSet;

  SetBegin(436);
  SetText(kAcceptanceTypeActionNone,"Нет");
  SetText(kAcceptanceTypeActionByOne,"Одним");
  SetText(kAcceptanceTypeActionByAll,"Всеми");
  EndSet;

  SetBegin(437);
  SetText(kAcceptanceTypeResultNone,"Нет");
  SetText(kAcceptanceTypeResultEmail,"Электронная почта");
  SetText(kAcceptanceTypeResultSMS,"SMS");
  SetText(kAcceptanceTypeResultAlert,"Сообщение");
  SetText(kAcceptanceTypeResultNotification,"Оповещение"); 
  EndSet;

  SetBegin(438);
  SetText(kActSeqSetPersonFixed,"Сотрудник");
  SetText(kActSeqSetPersonOriginatingRecord,"Из первичной записи");
  EndSet;

  SetBegin(439);
  SetText(kAcceptanceNextLevelNone,"не обязательно");
  SetText(kAcceptanceNextLevelRequired,"обязательно");
  EndSet;
  
  SetBegin(443);
  SetText(kAcceptanceStateNotRequired,"не обязательно");
//  SetText(kAcceptanceStateNotStarted,"Not Started");
//state not needed, we assign it in recorddefault, and reset it in recordsave
  SetText(kAcceptanceStateNotRequested,"не запрошено");
  SetText(kAcceptanceStatePending,"в ожидании");
  SetText(kAcceptanceStateApproved,"утверждено");
  SetText(kAcceptanceStateRejected,"отклонено");  
  EndSet;
  
/*
434-444 
reserved for acceptance
*/

  SetBegin(445);
  SetText(0,"Посчитано");
  SetText(1,"String");
  SetText(2,"Разделитель");
  SetText(3,"Common String");
  SetText(4,"Поле");
  EndSet; 
  
  StrSetBegin(446);
  StrSetText("Program_Version","Версия программы");
  StrSetText("File_Identificator","Идентифик-р файла");//INN**KPPYYYYMMDDHHMMSS
  StrSetText("Document_Identificator","Document Identificator");//INN**KPPYYYYNNNNNNNN
  StrSetText("Current_Date","Текущая дата");
  StrSetText("Current_Date_YYYYMMDD","Текущая дата (YYYYMMDD)");
  StrSetText("Year","Год");
  StrSetText("Date_D1","Дата D1");
  StrSetText("Date_D2","Дата D2");
  StrSetText("Date_D3","Дата D3");
  StrSetText("Date_D4","Дата D4");
  StrSetText("VAT_Nr","ИНН");
  StrSetText("ANA_Code","КПП");
  StrSetText("Company_Name","Наемнов. компании");
  StrSetText("Period_Type","Тип периода"); //1 - month, 3 - quarter
  StrSetText("Period_Number","Номер периода"); //1-12 or 1-4
  StrSetText("Period_Quarter","Квартал");//3,6,9
  EndStrSet; 

  SetBegin(447);
  SetText(0,"TXT");
  SetText(1,"DBF");
  SetText(2,"XML");
  EndSet; 
  
  StrSetBegin(448);
  StrSetText(N,"Numeric (N)");
  StrSetText(C,"Char (C)");
  StrSetText(L,"Boolean (L)");
  StrSetText(D,"Date (D)");
  EndStrSet;  
  
  SetBegin(449);
  SetText(0,"-");
  SetText(1,"Остаток на нач. периода");
  SetText(2,"Остаток");
//  SetText(2,"XML");
  EndSet;
  
  SetBegin(450);
  SetText(kDiskErrorNoFile,"Файл или папка не существ.");
  SetText(kDiskErrorPermission,"Insuficcient permissions");
  SetText(kDiskErrorIO,"I/O Error");
  SetText(kDiskErrorBadFD,"Bad file number");
  SetText(kDiskErrorNoSpace,"Недостаточно места, диск заполнен");
  SetText(kDiskErrorBrokenPipe,"Broken pipe");
  SetText(kDiskErrorInternal,"Внурен. ошибка диска");
  SetText(kDiskErrorChecksum,"Cache checksum disk error");
  SetText(kDiskErrorUnknown,"Unknown disk error");
  SetText(kDiskErrorSeekFailed,"Seek Failed");
  SetText(kDiskErrorWriteFailed,"Write Failed");
  SetText(kDiskErrorCleanSectorInWriteList,"Clean sector in write list");
  SetText(kDiskErrorAllocatedDirtySector,"Allocated dirty sector");
  SetText(kDiskErrorDoubleDirtyingOfSector,"Double dirtying of sector");
  EndSet;
  
  SetBegin(451);
  SetText(0,"км");
  SetText(1,"миля");
  EndSet;
  
  SetBegin(452);
  SetText(kTaxTransInclinTotalNo,"Налог не включен в общ. сумму");
  SetText(kTaxTransInclinTotalYes,"Налог включен в общ. сумму");
  EndSet;
  
  SetBegin(453);
  SetText(kTaxTransCalcBaseNet,"Сальдо");
  SetText(kTaxTransCalcBaseInclAllPreviousTaxes,"Вкл. все расчит. ранее налоги");
  SetText(kTaxTransCalculatedExternally,"Calculated Externally"); //!!TRANSLATE
  EndSet;
  
  SetBegin(454);
  SetText(kBugStatusNotVerified,"Not Verified");
  SetText(kBugStatusVerified,"Verified");
  SetText(kBugStatusFixed,"Fixed");
  SetText(kBugStatusTested,"Tested");
  SetText(kBugStatusNotABug,"Not A Bug");
  SetText(kBugStatusDuplicate,"Duplicate");
  EndSet;
  
  SetBegin(455);
  SetText(kBugPrioCrash,"Crash");
  SetText(kBugPrioReleseCritical,"Release Critical");
  SetText(kBugPrioHigh,"High");
  SetText(kBugPrioNormal,"Normal");
  SetText(kBugPrioLow,"Low");
  EndSet;

  SetBegin(456);
  SetText(kCountryAddrLineUserAddrNone,"None");
  SetText(kCountryAddrLineUserAddr0,"Адрес 1");
  SetText(kCountryAddrLineUserAddr1,"Адрес 2");
  SetText(kCountryAddrLineUserAddr2,"Адрес 3");
  SetText(kCountryAddrLineUserAddr3,"Адрес 4");
  SetText(kCountryAddrLineUserAddr4,"Адрес 5");
  EndSet;
  
  SetBegin(457);
  SetText(0,"Main Item");
  SetText(1,"Part Item");
  EndSet;

  SetBegin(458);
  SetText(0,"-");
  SetText(kHttpStatusContinue,"100 - Continue");
  SetText(kHttpStatusSwitchingProtocols,"101 - Switching Protocols");
  SetText(kHttpStatusOK,"200 - OK");
  SetText(kHttpStatusCreated,"201 - Created");
  SetText(kHttpStatusAccepted,"202 - Accepted");
  SetText(kHttpStatusNonAuthInfo,"203 - Non Auth Info");
  SetText(kHttpStatusNoContent,"204 - No Content");
  SetText(kHttpStatusResetContent,"205 - Reset Content");
  SetText(kHttpStatusPartialContent,"206 - Partial Content");
  SetText(kHttpStatusMultipleChoices,"300 - Multiple Choices");
  SetText(kHttpStatusMovedPermanently,"301 - Moved Permanently");
  SetText(kHttpStatusFound,"302 - Found");
  SetText(kHttpStatusSeeOther,"303 - See Other");
  SetText(kHttpStatusNotModified,"304 - Not Modified");
  SetText(kHttpStatusUseProxy,"305 - Use Proxy");
  SetText(kHttpStatusUnused,"306 - Unused");
  SetText(kHttpStatusTemporaryRedirect,"307 - Temporary Redirect");
  SetText(kHttpStatusBadRequest,"400 - Bad Request");
  SetText(kHttpStatusUnauthorized,"401 - Unauthorized");
  SetText(kHttpStatusPaymentRequired,"402 - Payment Required");
  SetText(kHttpStatusForbidden,"403 - Forbidden");
  SetText(kHttpStatusNotFound,"404 - Not Found");
  SetText(kHttpStatusMethodNotAllowed,"405 - Method Not Allowed");
  SetText(kHttpStatusNotAcceptable,"406 - Not Acceptable");
  SetText(kHttpStatusProxyAuthRequired,"407 - Proxy Auth Required");
  SetText(kHttpStatusRequestTimeout,"408 - Request Timeout");
  SetText(kHttpStatusConflict,"409 - Conflict");
  SetText(kHttpStatusInternalServerError,"500 - Internal Server Error");
  SetText(kHttpStatusNotImplemented,"501 - Not Implemented");
  SetText(kHttpStatusBadGateway,"502 - Bad Gateway");
  SetText(kHttpStatusServiceUnavailable,"503 - Service Unavailable");
  SetText(kHttpStatusGatewayTimeout,"504 - Gateway Timeout");
  SetText(kHttpStatusHttpVersionNotSupported,"505 - Version Not Supported");
  EndSet;
  
  SetBegin(459);
  SetText(kWebFunctionAccessPublic,"Public");
  SetText(kWebFunctionAccessContactLogin,"Logged In Contact or User");
  SetText(kWebFunctionAccessUserLogin,"Logged In User");
  SetText(kWebFunctionAccessOAUTH2Login,"Logged In OAuth2 User"); //!!TRANSLATE
  EndSet;
  
  SetBegin(460);
  SetText(kPURateFromPurchaseOrder,"From Purchase Order");
  SetText(kPURateOnGoodsReceiptDate,"On Goods Receipt Date");
  SetText(kPURateFromPrepayment,"From Prepayment");
  EndSet;
  
  SetBegin(461);
  SetText(kVIRateFromPurchaseOrder,"From Purchase Order");
  SetText(kVIRateOnPurchaseInvoiceDate,"On #Purchase Invoice# Date");
  SetText(kVIRateFromPrepayment,"From Prepayment");
  EndSet;
  
  SetBegin(462);
  SetText(kCURegFieldTypeName,"Наименование");
  SetText(kCURegFieldTypeInvAddr0,"Invoice Address 1");
  SetText(kCURegFieldTypeInvAddr1,"Invoice Address 2");
  SetText(kCURegFieldTypeInvAddr2,"Invoice Address 3");
  SetText(kCURegFieldTypeInvAddr3,"Invoice Address 4");
  SetText(kCURegFieldTypeInvAddr4,"Invoice Address 5");
  SetText(kCURegFieldTypeSorting,"Sort Key");
  SetText(kCURegFieldTypeDepartment,"Департамент");
  SetText(kCURegFieldTypePhone,"Telephone");
  SetText(kCURegFieldTypeFax,"Fax");
  SetText(kCURegFieldTypeAltPhone,"Alternate Phone");
  SetText(kCURegFieldTypeMobile,"#Mobile#");
  SetText(kCURegFieldTypeSkypeName,"Skype Name");
  SetText(kCURegFieldTypeSIPCode,"SIP");
  SetText(kCURegFieldTypeeMail,"Электронная почта");
  SetText(kCURegFieldTypeeMailConfirm,"E-Mail (confirm)");
  SetText(kCURegFieldTypeExtension,"Extension");
  SetText(kCURegFieldTypePerson,"Primary Contact");
  SetText(kCURegFieldTypewwwAddr,"Веб-сайт");
  SetText(kCURegFieldTypeClassificationSelect,"Classification (select)");
  SetText(kCURegFieldTypeClassificationRadio,"Classification (radio)");
  SetText(kCURegFieldTypeClassificationCheckbox,"Classification (checkbox)");
  SetText(kCURegFieldTypePassword,"Пароль");
  SetText(kCURegFieldTypePasswordConfirm,"Пароль (подтв.)");
  SetText(kCURegFieldTypeDelAddr0,"Delivery Address 1");
  SetText(kCURegFieldTypeDelAddr1,"Delivery Address 2");
  SetText(kCURegFieldTypeDelAddr2,"Delivery Address 3");
  SetText(kCURegFieldTypeDelAddr3,"Delivery Address 4");
  SetText(kCURegFieldTypeDelAddr4,"Delivery Address 5");
  SetText(kCURegFieldTypeRegNr1,"#Reg. No.# 1");
  SetText(kCURegFieldTypeRegNr2,"#Reg. No. 2#");
  SetText(kCURegFieldTypeVATNr,"№ рег. НДС");
  SetText(kCURegFieldTypeCountryCode,"Страна");
  SetText(kCURegFieldTypeRegion,"Region");
  SetText(kCURegFieldTypeCustCat,"Категория клиента");
  SetText(kCURegFieldTypeUserStr1,"User Defined String 1");
  SetText(kCURegFieldTypeUserStr2,"User Defined String 2");
  SetText(kCURegFieldTypeUserStr3,"User Defined String 3");
  SetText(kCURegFieldTypeUserStr4,"User Defined String 4");
  SetText(kCURegFieldTypeUserStr5,"User Defined String 5");
  SetText(kCURegFieldTypeUserVal1,"User Defined Value 1");
  SetText(kCURegFieldTypeUserVal2,"User Defined Value 2");
  SetText(kCURegFieldTypeUserVal3,"User Defined Value 3");
  SetText(kCURegFieldTypeUserDate1,"Пользовательская дата 1");
  SetText(kCURegFieldTypeUserDate2,"Пользовательская дата 2");
  SetText(kCURegFieldTypeUserDate3,"Пользовательская дата 3");
  SetText(kCURegFieldTypeNoLetterPosting,"No Mass Letters");
  SetText(kCURegFieldTypeNoMailPosting,"No Mass Emailing");
  SetText(kCURegFieldTypeCustCode,"Кол Клиента"); 
  SetText(kCURegFieldTypeBillingType,"Billing Type");
  SetText(kCURegFieldTypePaymentTerms,"Payment Terms");
  SetText(kCURegFieldTypeNewCreditCardNumber,"Номер кредитной карты"); 
  SetText(kCURegFieldTypeNewCreditCardExpiry,"Срок действия кредитной карты"); 
  EndSet;
    
  SetBegin(463);
  SetText(kHRMCOSalaryTypeMonthly,"Monthly");
  SetText(kHRMCOSalaryTypeYearly,"Yearly");
  SetText(kHRMCOSalaryTypeWeekly,"Weekly");
  SetText(kHRMCOSalaryTypeFortnightly,"Fortnightly");
  EndSet;
  
  
  StrSetBegin(465);
//  StrSetText(IVCashDClass,"С/ф кассового терминала");
  StrSetText(NPTSIVCashDClass,"Новый с/ф кассового терминала");
  StrSetText(RestAccDClass,"Счёт ресторана");
  StrSetText(IVDClass,"Счёт-фактура (сенсорный экран) - Расчёты с клиентами");
  EndStrSet;
  
  SetBegin(466);
  SetText(kXBRLElementFieldTypeMonetary,"Monetary");
  SetText(kXBRLElementFieldTypeText,"Текст");
  SetText(kXBRLElementFieldTypeTextFormula,"Формула текста");
  EndSet;
  
  SetBegin(467);
  SetText(kXBRLElementReportTypeI_BAL,"Баланс");
  SetText(kXBRLElementReportTypeD_PL1,"Прибыль и убытки 1");
  SetText(kXBRLElementReportTypeD_PL2,"Прибыль и убытки 2");
  SetText(kXBRLElementReportTypeD_CF1,"Движ. ден. ср-в 1");
  SetText(kXBRLElementReportTypeD_CF2,"Движ. ден. ср-в 2");
  SetText(kXBRLElementReportTypeD_VAT,"Отчёт НДС");
  SetText(kXBRLElementReportTypeE_TaxReport,"Налоговый отчёт");         
  EndSet;
  
  SetBegin(468);
  SetText(kFunctionKeyNone,"-");
  SetText(kFunctionKeyF1,"F1");
  SetText(kFunctionKeyF2,"F2");
  SetText(kFunctionKeyF3,"F3");
  SetText(kFunctionKeyF4,"F4");
  SetText(kFunctionKeyF5,"F5");
  SetText(kFunctionKeyF6,"F6");
  SetText(kFunctionKeyF7,"F7");
  SetText(kFunctionKeyF8,"F8");
  SetText(kFunctionKeyF9,"F9");
  SetText(kFunctionKeyF10,"F10");
  SetText(kFunctionKeyF11,"F11");
  SetText(kFunctionKeyF12,"F12");
  SetText(kFunctionKeyF13,"F13");
  SetText(kFunctionKeyF14,"F14");
  SetText(kFunctionKeyF15,"F15");
  SetText(kFunctionKeyF16,"F16");
  SetText(kFunctionKeyF17,"F17");
  SetText(kFunctionKeyF18,"F18");
  SetText(kFunctionKeyF19,"F19");
  SetText(kFunctionKeyF20,"F20");
  SetText(kFunctionKeyF21,"F21");
  SetText(kFunctionKeyF22,"F22");
  SetText(kFunctionKeyF23,"F23");
  SetText(kFunctionKeyF24,"F24");
  EndSet;
  
  SetBegin(469);
  SetText(kHRMCOChangeReasonDummy,"Не определено");
  SetText(kHRMCOChangeReasonNew,"New Recruitment");
  SetText(kHRMCOChangeReasonPromotion,"Promotion");
  SetText(kHRMCOChangeReasonTransfer,"Transfer");
  SetText(kHRMCOChangeReasonDemotion,"Demotion");
  EndSet;

  SetBegin(470);
  SetText(kHRMCOReasonDummy,"None");
  SetText(kHRMCOReasonResignation,"Resignation");
  SetText(kHRMCOReasonNonRenewal,"Non-renewal of contract");
  SetText(kHRMCOReasonDismissalOperational,"Dismissal - operational requirements");
  SetText(kHRMCOReasonDismissalMisconduct,"Dismissal - misconduct");
  SetText(kHRMCOReasonDismissalIncapacity,"Dismissal - incapacity");
  SetText(kHRMCOReasonMoveToOtherDepartment,"Переместить в другой департамент"); 
  SetText(kHRMCOReasonMoveToOtherCountry,"Переместить в другую страну"); 
  SetText(kHRMCOReasonDismissalRetirement,"Retirement");
  SetText(kHRMCOReasonDismissalDeath,"Death");
  EndSet;
  
  SetBegin(471);
  SetText(kHRMJPStatusOpening,"Opening");
  SetText(kHRMJPStatusFree,"Free");
  SetText(kHRMJPStatusFilled,"Filled");
  SetText(kHRMJPStatusCancelled,"Cancelled");
  EndSet;

  SetBegin(472);
  SetText(kPOSCommandsBeforeData,"Before Data");
  SetText(kPOSCommandsAfterDate,"After Data");
  EndSet;
  
  SetBegin(473);
  SetText(kPdfFontNone,"None");
  SetText(kPdfFontTimes,"Times");
  SetText(kPdfFontCourier,"Courier");
  SetText(kPdfFontHelvetica,"Helvetica");
  SetText(kPdfFontSymbol,"Symbol");
  SetText(kPdfFontZapfDingbats,"ZapfDingbats");
  EndSet;
  
  SetBegin(474);
  SetText(kPbxTypeAsterisk10,"Asterisk 1.0 (AMI)");
  SetText(kPbxTypeAsterisk12,"Asterisk 1.2 (AMI)");
  SetText(kPbxTypeAsterisk14,"Asterisk 1.4 (AMI)");
  SetText(kPbxTypeAsterisk16,"Asterisk 1.6 (AMI)");
  SetText(kPbxTypeAsterisk18,"Asterisk 1.8 (AMI)");  
  SetText(kPbxTypeTrixBox,"TrixBox (AMI)");
  SetText(kPbxTypeDigium,"Digium Switchvox");
//  SetText(kPbxTypeTapi,"TAPI 2.1 (3rd-party)");
  SetText(kPbxTypeVPBX,"VPBX");
  SetText(kPbxType3CX12,"3CX Система 12");         
  EndSet;
  
  SetBegin(475);
  SetText(kPbxRuleIgnoreSIPChannel,"Игнорировать SIP канал");
  SetText(kPbxRuleNoActivityForInternalCalls,"No Act For Calls Between Extensions Shorter Than");  
  SetText(kPBxTrackNumber,"Track Number");
  SetText(kPbxRuleUniqueCallers,"Unique Callers Only");
  EndSet;
  
  SetBegin(476);
  SetText(kRoomPriceRestictionTypeNone,"Без ограничений");
  SetText(kRoomPriceRestictionTypeAdultsNo,"К-во взрослых");
  SetText(kRoomPriceRestictionTypeChildrenNo,"К-во детей");
  SetText(kRoomPriceRestictionTypeGuestsNo,"К-во гостей");
  EndSet;
  
  SetBegin(477);
  SetText(kCompOpNone,"Нет");
  SetText(kCompOpEquals,"Равно");
  SetText(kCompOpGreaterThan,"Больше");
  SetText(kCompOpLessThan,"Меньше");
  SetText(kCompOpGreaterThanOrEqualTo,"Больше или равно");
  SetText(kCompOpLessThanOrEqualTo,"меньше или равно");
  SetText(kCompOpNotEqual,"Не равно");
  SetText(kCompOpNotLessThan,"Не меньше, чем");
  SetText(kCompOpNotGreaterThan,"Не больше, чем");
  SetText(kCompOpRange,"Между");
  SetText(kCompOpTrue,"Истина");
  SetText(kCompOpFalse,"Ложь");
  EndSet;

  SetBegin(478);
  SetText(kChargeTypeFixedPrice,"Фикс. цена");
  SetText(kChargeTypePerAdult,"За взрослого");
  SetText(kChargeTypePerChild,"За ребенка");
  SetText(kChargeTypePerGuest,"За гостя");
  EndSet;

  SetBegin(479);
  SetText(kELockSystemTypeNone,"Нет");
  SetText(kELockSystemTypeTESAHT28,"Onity TESA HT28");
  EndSet;

  SetBegin(480);
//  SetText(0,"Month, Day, Year");
//  SetText(1,"Day, Month, Year");
//  SetText(2,"Year, Month, Day");
  SetText(kCalendarGregorian,"Григорианский");
  SetText(kCalendarHijri,"Исламский");
  SetText(kCalendarPersian,"Иранский");
  EndSet;

  SetBegin(481);
  SetText(kCompOpLessThan,"Должно быть меньше");
  SetText(kCompOpGreaterThan,"Должно быть больше");
  SetText(kCompOpRange,"Должно быть между");
  SetText(kCompOpNotEqual,"Не должно равняться");
  EndSet;
  
  SetBegin(482);
  SetText(kCompOpTrue,"Для всех");
  SetText(kCompOpGreaterThanOrEqualTo,"С номера");
  SetText(kCompOpRange,"Между номеров");
  EndSet;
  
  SetBegin(483);
  SetText(kRoyaltySaleNoMaint,"Normal - Excluding Maintenance");
  SetText(kRoyaltySaleWithMaint,"Normal - Including Maintenance");
  SetText(kRoyaltySaleRental,"Rental Sale");
  EndSet;

  SetBegin(484);
  SetText(kIncludedinAllowance,"Included in Allowance");
  SetText(kExcludedinAllowance,"Excluded from Allowance");
  EndSet;
  
  SetBegin(485);
  SetText(kMultiBuyTypeNone,"Нет");
  SetText(kMultiBuyTypeBOGOF,"Купи x - получи y бесплатно");
  SetText(kMultiBuyTypeAnyQty,"Купи любое количество из набора товаров");
  EndSet; 

  SetBegin(486);
  SetText(kMultiBuyDiscountTypeNone,"Нет");
  SetText(kMultiBuyDiscountTypeCheapest,"Наболее дешевыt");
  SetText(kMultiBuyDiscountTypeMostExpensive,"Наиболее дорогие");
  EndSet; 

  SetBegin(487);
  SetText(kHRMCOJobTypeMonthly,"Monthly");
  SetText(kHRMCOJobTypeYearly,"Yearly");
  SetText(kHRMCOJobTypeWeekly,"Weekly");
  SetText(kHRMCOJobTypeFortnightly,"Fortnightly");
  EndSet;

  SetBegin(488);
  SetText(kVolumetricBarcodeDefault,"Пропускать");
  SetText(kVolumetricBarcodeArtCode,"Товар");
  SetText(kVolumetricBarcodeWeight,"Вес");
  SetText(kVolumetricBarcodeWeightDecimals,"Десятичн. веса");
  SetText(kVolumetricBarcodeDepartment,"Отдел");
  SetText(kVolumetricBarcodePrice,"Цена");
  SetText(kVolumetricBarcodeCheckDigit,"Контрольная цифра");
  EndSet;

  SetBegin(489);
  SetText(kMeasurementSystemImperial,"Имперический (lb/in)");
  SetText(kMeasurementSystemMetric,"Метрический (кг/см)");
  EndSet;

  SetBegin(490);
  SetText(kPointsHistoryLoyaltyCard,"Накаопительная карта");
  SetText(kPointsHistoryGiftVoucher,"Подарочн. сертификат");
  EndSet;

  SetBegin(491);
  SetText(kKeyModifierNone,"-");
  if (GuiType==kGuiCocoa) then begin
    SetText(kKeyModifierCtrl,"Cmd");
  end else begin
    SetText(kKeyModifierCtrl,"Ctrl");
  end;
  SetText(kKeyModifierShift,"Shift");
  if (GuiType==kGuiCocoa) then begin
    SetText(kKeyModifierCtrlShift,"Cmd + Shift");
  end else begin
    SetText(kKeyModifierCtrlShift,"Ctrl + Shift");
  end;
  EndSet;

  SetBegin(492);
  SetText(kTransactionFiscalTypeNormal,"N - Normal");
  SetText(kTransactionFiscalTypeCorrection,"R - Corrections");
  SetText(kTransactionFiscalTypeAdjustment,"J - Adjustments");
  SetText(kTransactionFiscalTypeYearEnd,"A - Year End");
//  if (HasLocalization("ARG,PRT")) then begin
    SetText(kTransactionFiscalTypeYearEndStage1,"1 - Year End Stage 1");
    SetText(kTransactionFiscalTypeYearEndStage2,"2 - Year End Stage 2");
//  end;  
  EndSet;
  
  StrSetBegin(493);
  StrSetText(OpenPOSSessionsm,"Открыть сессию");
  StrSetText(ClosePOSSessionsm,"Закрыть сессию");
  StrSetText(POSMoneyInsm,"Приход");
  StrSetText(POSMoneyOutsm,"Расход");
  StrSetText(IVCashCashupRnsm,"Отчёт Снятие кассы");
  EndStrSet;
  
  SetBegin(494); // bar tab, subset of 431
  SetText(kPOSButtonTypeBlank,"Пустой");
  SetText(kPOSButtonTypeServiceCharge,"Включить стоимость услуг");  
  SetText(kPOSButtonTypeAddOrderDiscount,"Добавить скидку");  
  SetText(kPOSButtonTypeAllInvoices,"All Tabs");
  SetText(kPOSButtonTypeAmendLine,"Изменить строку");
  SetText(kPOSButtonTypeBookings,"Резервирования");  
  SetText(kPOSButtonTypeCalculateTip,"Подсчитать чаевые");  
  SetText(kPOSButtonTypeCashPayment,"Наличные");
  SetText(kPOSButtonTypeCashupReport,"Cash Up Report");
  SetText(kPOSButtonTypeChangeAddress,"Сменить адрес");
  SetText(kPOSButtonTypeChangeDiscountMatrix,"Сменить матрицу скидок");
  SetText(kPOSButtonTypeLogin,"Сменить пользов.");  
  SetText(kPOSButtonTypeChequePayment,"Чек");
  SetText(kPOSButtonTypeCloseSession,"Закрыть сессию"); 
  SetText(kPOSButtonTypeCreditCardPayment,"Кредитная карточка");
//  SetText(kPOSButtonTypeCreditCardPaymentReversal,"Credit Card Payment Reversal");
  SetText(kPOSButtonTypeCustomerSearch,"Найти клиента");
  SetText(kPOSButtonTypeXReading,"Ежедневный отчет");
  SetText(kPOSButtonTypeZReading,"Ежедневный Z-отчёт");         
  SetText(kPOSButtonTypeDebitCardPayment,"Дебитная карточка");
  SetText(kPOSButtonTypeDeleteItem,"Удалить строку");
  SetText(kPOSButtonTypeGotoPage,"Открыть страницу");
  SetText(kPOSButtonTypeFinish,"Завершить");  
  SetText(kPOSButtonTypeFinishAndPrint,"Завершить и распечатать");  
  SetText(kPOSButtonTypeGiftVoucherPayment,"Подарочный сертификат");
  SetText(kPOSButtonTypeInsertFreeTextOnMatrix,"Free Text Instruction");
  SetText(kPOSButtonTypeInstructions,"Инструкции");  
  SetText(kPOSButtonTypeInvalidateInvoice,"Аннулировать сч/ф");
  SetText(kPOSButtonTypeItem,"Товар");
  SetText(kPOSButtonTypeItemSearch,"Найти товар");
  SetText(kPOSButtonTypeKitchenOrder,"Заказ на кухню");  
  SetText(kPOSButtonTypeLoyaltyPointsBonus,"Бонусные накопит. баллы");
  SetText(kPOSButtonTypeLoyaltyCard,"Накопительная карта");
  SetText(kPOSButtonTypeLoyaltyPointsPayment,"Платеж  накопит. баллами");
  SetText(kPOSButtonTypeMergeBarTabs,"Объеденить счета ресторана");  
  SetText(kPOSButtonTypeMoveToBarTab,"Move Items to Bar Tab");    
  SetText(kPOSButtonTypeModifier,"Модификатор");
  SetText(kPOSButtonTypeOnHotelGuestAccount,"На счет гостя отеля");  
  SetText(kPOSButtonTypeOpenCashDrawer,"Открыть денежн.ящик");  
  SetText(kPOSButtonTypeOpenRecord,"Open Record");  
  SetText(kPOSButtonTypeOpenSession,"Открыть сессию"); 
  SetText(kPOSButtonTypOpenInvoices,"Open unfinished Tabs");
  SetText(kPOSButtonTypeOpenTaxMatrix,"Открыть матрицу налогов");  
  SetText(kPOSButtonTypSaveInvoice,"Park Tab");
  SetText(kPOSButtonTypePayment,"Заплатить");
  SetText(kPOSButtonTypePaymentButtonsLayout,"Pay (Buttons layout)"); //!!TRANSLATE
  SetText(kPOSButtonTypePaymentOneMode,"Pay (one Mode)"); //!!TRANSLATE
  SetText(kPOSButtonTypePriceLookup,"Посмотреть цену");
  SetText(kPOSButtonTypePrintCancellation,"Печать отмену заказа");  
  SetText(kPOSButtonTypePrintFireOrder,"Печатать срочный заказ");  
  SetText(kPOSButtonTypePrintInvoice,"Печатать сч/ф");
  SetText(kPOSButtonTypePrintPreview,"Print Preview");   
  SetText(kPOSButtonTypePrintOrder,"Печатать сч/ф ресторана");  
  SetText(kPOSButtonTypePrintOrderToKitchen,"Печатать счет рест. на кухню");  
  SetText(kPOSButtonTypeReprintReceipt,"Перепечатать чек");
  SetText(kPOSButtonTypeReturn,"Возврат");         
  SetText(kPOSButtonTypeReturnInvoiceNo,"№ возврата");
  SetText(kPOSButtonTypeRunReportOnServer,"Запустить отчет на сервере");
  SetText(kPOSButtonTypeSalesAssistant,"Помошник продавца");
  SetText(kPOSButtonTypeSelectSalesman,"Продавец");
  SetText(kPOSButtonTypeSetCovers,"Указать к-во мест");  
  SetText(kPOSButtonTypeSetBarTabClass,"Указать класс счета рест.");  
  SetText(kPOSButtonTypeSetTable,"Указать столик");  
  SetText(kPOSButtonTypeHotelGuests,"Показать гостей отеля");  
  SetText(kPOSButtonTypeSplitBarTabs,"Разделить счета ресторана");  
  SetText(kPOSButtonTypeLevelTop,"Главная");
  SetText(kPOSButtonTypeTransfertoInvoice,"Перенесети в счёт-фактуру");
  SetText(kPOSButtonTypeTransfertoSL,"Transfer to #Sales Ledger#");
  SetText(kPOSButtonTypeVoidRow,"Отменить товар");
  EndSet;
  
  SetBegin(495); // pos invoice, subset of 431
  SetText(kPOSButtonTypeBlank,"Пустой");
  SetText(kPOSButtonTypeAddCommentLine,"Добавить комментарий");    
  SetText(kPOSButtonTypeAddHeaderLine,"Добавить заголовок");  
  SetText(kPOSButtonTypeAllInvoices,"Все сч/ф");
  SetText(kPOSButtonTypeAmendLine,"Изменить строку");
  SetText(kPOSButtonTypeAppleCancelAEOrder,"Apple Cancel AE Order");  
  SetText(kPOSButtonTypeAppleCreateAEOrder,"Apple Create AE Order");  
  SetText(kPOSButtonTypeAppleWarrantyStatusCheck,"Apple Warranty Status Check");  
  SetText(kPOSButtonTypeBaggerSearch,"Поиск упаковщика");
  SetText(kPOSButtonTypeCashPayment,"Наличные");
  SetText(kPOSButtonTypeLogin,"Сменить пользов."); 
  SetText(kPOSButtonTypeCashupReport,"Отчёт по наличным");
  SetText(kPOSButtonTypeChangeAddress,"Change Address");
  SetText(kPOSButtonTypeChangeDiscountMatrix,"Change Discount Matrix");
  SetText(kPOSButtonTypeChangeTerms,"Change Terms");
  SetText(kPOSButtonTypeChequePayment,"Чек");
  SetText(kPOSButtonTypeCloseSession,"Закрыть сессию");
//  if (HasLocalization("POL")) then begin
    SetText(kPOSButtonTypeCorrectionInvoice,"Correction Invoice");
//  end;
  SetText(kPOSButtonTypeCreateGC,"Создать Подарочный сертификат");  
  SetText(kPOSButtonTypeCreditCardPayment,"Кредитная карточка");
  SetText(kPOSButtonTypeCreditCardPaymentReversal,"Отмена оплаты кредитной картой");
  SetText(kPOSButtonTypeCreditNote,"Кредитная нота");  
  SetText(kPOSButtonTypeCustomerSearch,"Найти клиента");
  SetText(kPOSButtonTypeCustomerSearchFiltered,"Найти клиента BF");
  SetText(kPOSButtonTypeXReading,"Дневной отчет");
  SetText(kPOSButtonTypeZReading,"Ежедневный Z-отчёт");         
  SetText(kPOSButtonTypeDebitCardPayment,"Дебитная карточка");
  SetText(kPOSButtonTypeDeleteItem,"Удалить строку");
  SetText(kPOSButtonTypeMainSerialNr,"Device Serial Number");  
  SetText(kPOSButtonTypeGotoPage,"Показать страницу");
  SetText(kPOSButtonTypeVolumetricBarCodeScan,"Динамический штрих-код");
  SetText(kPOSButtonTypeEnterReferenceNumber,"Enter Reference Number"); //!!TRANSLATE
  SetText(kPOSButtonTypeFinish,"Завершить"); 
  SetText(kPOSButtonTypeGetCashFloat,"Вынос наличных"); 
  SetText(kPOSButtonTypeGiftReceipt,"Подарочный чек");
  SetText(kPOSButtonTypeGiftVoucherPayment,"Подарочный сертификат");
  SetText(kPOSButtonTypeInvalidateInvoice,"Аннулировать сч/ф");
  SetText(kPOSButtonTypeItem,"Товар");
  SetText(kPOSButtonTypeItemSearch,"Найти товар");
  SetText(kPOSButtonTypeItemStatus,"Статус товара");
  //SetText(kPOSButtonTypeLevelUp,"Level Up");
  SetText(kPOSButtonTypeLoyaltyPointsBonus,"Бонусные накопит. баллы");
  SetText(kPOSButtonTypeLoyaltyCard,"Накопительная карта");
  SetText(kPOSButtonTypeLoyaltyPointsPayment,"Платеж  накопит. баллами");
  SetText(kPOSButtonTypeManagerDiscountOverride,"Manager Discount Override"); //!!TRANSLATE
  SetText(kPOSButtonTypeModifier,"Модификатор");
  SetText(kPOSButtonTypeOnAccountPayment,"On Account Payment");
  SetText(kPOSButtonTypeOnHotelGuestAccount,"На счёт постояльца");   
  SetText(kPOSButtonTypeOpenCashDrawer,"Открыть денежн.ящик");  
  SetText(kPOSButtonTypeEditCustomerRecord,"Open Customer Record");
  SetText(kPOSButtonTypeEditItemRecord,"Open Item Record");
  SetText(kPOSButtonTypOpenInvoices,"Неоплаченные сч/ф");
  SetText(kPOSButtonTypeOpenSession,"Открыть сессию");
  SetText(kPOSButtonTypeOpenTaxMatrix,"Открыть матрицу налогов");  
  SetText(kPOSButtonTypeSpecialMenu,"Меню операций");
  SetText(kPOSButtonTypeOverrideOfficialSerNr,"Override Official Serial Number"); //!!TRANSLATE
  SetText(kPOSButtonTypePayment,"Заплатить");
  SetText(kPOSButtonTypePaymentButtonsLayout,"Pay (Buttons layout)"); //!!TRANSLATE
  SetText(kPOSButtonTypePaymentOneMode,"Pay (one Mode)"); //!!TRANSLATE
  SetText(kPOSButtonTypePOSCommand,"Команда кас. терм.");
  SetText(kPOSButtonTypePriceLookup,"Посмотреть цену");
  SetText(kPOSButtonTypePreviousSalesPrices,"Предыдущие цены на продажу");
  SetText(kPOSButtonTypePrintInvoice,"Print Invoice");  
  SetText(kPOSButtonTypePutCashFloat,"Внос наличных");
  SetText(kPOSButtonTypeConnectToCCTerminal,"Подключение к Кредитному терминалу");  
  SetText(kPOSButtonTypePauseSales,"Остановить продажи");    
  SetText(kPOSButtonTypePasteQuotation,"Вставить Коммерческое предложение");    
  SetText(kPOSButtonTypePasteSalesOrder,"Вставить Счёт клиенту");    
  SetText(kPOSButtonTypeReprintLastCCSlip,"Перепечатка Последнего Кредитного окна");  
  SetText(kPOSButtonTypeReprintReceipt,"Перепечатать чек");
  SetText(kPOSButtonTypeResumeSales,"Итог продаж");    
  SetText(kPOSButtonTypeReturn,"Возврат");
  SetText(kPOSButtonTypeReturnInvoiceNo,"№ возврата");
  SetText(kPOSButtonTypeReturnReason,"Причина Возврата");
  SetText(kPOSButtonTypeRunReportOnServer,"Запустить отчет на сервере");
  SetText(kPOSButtonTypeSalesAssistant,"Помошник продавца");
  SetText(kPOSButtonTypSaveInvoice,"Сохранить сч/ф");  
  SetText(kPOSButtonTypeSelectSalesman,"Продавец");
  SetText(kPOSButtonTypeGiftVoucherSales,"Продать подарочн. сетриф.");
  SetText(kPOSButtonTypeSendEMail,"Send e-Mail");
  SetText(kPOSButtonTypeSeniorCitizenDiscount,"Скидка пенсионерам");
  SetText(kPOSButtonTypeLookupSerialNr,"Поиск сер. №");
  SetText(kPOSButtonTypeSplitItem,"Разделить товар");
  SetText(kPOSButtonTypeSupervisorSearch,"Поиск контролера");
//  SetText(kPOSButtonTypeLevelDown,"Level Down");
  SetText(kPOSButtonTypeLevelTop,"Главная");
  SetText(kPOSButtonTypeTransfertoInvoice,"Передать в сч/ф клиенту");
  SetText(kPOSButtonTypeTransfertoQuotation,"Transfer to Quotation");
  SetText(kPOSButtonTypeTransfertoSL,"Передеать в книгу продаж");
  SetText(kPOSButtonTypeTransfertoOrder,"Передать в счет клиенту");
  SetText(kPOSButtonTypeVoidRow,"Отменить товар");
  EndSet;
  
  SetBegin(496);
  SetText(kTableShapeRectangular,"Прямоугольный");
  SetText(kTableShapeRound,"Круглый");
  EndSet;
  
  SetBegin(497);
  SetText(kEditScale100,"100%");
  SetText(kEditScale150,"150%");
  SetText(kEditScale200,"200%");
  SetText(kEditScale300,"300%");
  EndSet;

  StrSetBegin(498);
  StrSetText("CashVc","События кассы"); 
  StrSetText("CouponVc","Credit Card Slip");
  StrSetText("GiftReceiptVc","Gift Receipts");
  StrSetText("GCVc","Выпущен. подарочные сертификаты"); 
  //StrSetText("MailVc","Mails"); -- no number series for mails, uses uuid as mainkey instead
  StrSetText("POSBalanceVc","Остатки"); 
  StrSetText("IVCashVc","Сч/ф кассового терминала"); 
  StrSetText("POSEventVc","Сессии кассового терминала"); 
  EndStrSet;

  SetBegin(499);
  SetText(kSyncCheckResultIdentical,"Identical");
  SetText(kSyncCheckResultDifferent,"Different");
  SetText(kSyncCheckResultDifferentOK,"Ok Difference");
  SetText(kSyncCheckResultNotOnServer,"Not On Server");
  EndSet;

  SetBegin(500);
  SetText(kOfficialNumTypeAllIVVc,"Все сч/ф");
  SetText(kOfficialNumTypeInterestIVVc,"Interest Invoices");
  SetText(kOfficialNumTypeCashIVVc,"на налич.");
  SetText(kOfficialNumTypeCreditIVVc,"Кредит-ноты");
//  if (HasLocalization("PRT")) then begin  //HasLocalization: Not showing for VAT Law : Portugal
    SetText(kOfficialNumTypeCashInvoiceReceiptPRTIVVc,"Invoice/Receipt");
    SetText(kOfficialNumTypeManualCashInvoiceReceiptIVVc,"Invoice/Receipt Manual");
    SetText(kOfficialNumTypeRecoverdCashInvoiceReceiptIVVc,"Invoice/Receipt Recovered");
//  end;
  SetText(kOfficialNumTypeIVVc,"Обычные сч/ф");
  SetText(kOfficialNumTypeReceiptIVVc,"Счёт-фактура/счёт самозанятого лица"); 
  SetText(kOfficialNumTypeLiquidationIVVc,"Счёт-фактура/Уплата"); 
  SetText(kOfficialNumTypeSpecialSalesIVVc,"Normal Invoice, Special Sales");
  SetText(kOfficialNumTypeRestAccVc,"Сч/ф бара");
  SetText(kOfficialNumTypePOSIVVc,"Сч/ф кассы");
  SetText(kOfficialNumTypeSHVc,"Отгрузка");
//  if (HasLocalization("PRT")) then begin
    SetText(kOfficialNumTypeManualSHVc,"Delivery Manual");
    SetText(kOfficialNumTypeRecoverdSHVc,"Delivery Recovered");
//  end;
  SetText(kOfficialNumTypeQTProformaVc,"Проформа сч-ф, комм. предложение"); 
  SetText(kOfficialNumTypeRetVc,"Возврат товаров");
//  if (HasLocalization("PRT")) then begin
    SetText(kOfficialNumTypeManualRetVc,"Returned Goods Manual");
    SetText(kOfficialNumTypeRecoverdRetVc,"Returned Goods Recoverd");
//  end;
  SetText(kOfficialNumTypeRetPUVc,"Возврат товаров поставщику");
//  if (HasLocalization("PRT")) then begin
    SetText(kOfficialNumTypeManualRetPUVc,"Возвраты товаров поставщику Manual");
    SetText(kOfficialNumTypeRecoverdRetPUVc,"Возвраты товаров поставщику Recoverd");
//  end;
  SetText(kOfficialNumTypeStockMovVc,"Перемещение");
//  if (HasLocalization("PRT")) then begin
    SetText(kOfficialNumTypeManualStockMovVc,"#Stock# Movements Manual");
    SetText(kOfficialNumTypeRecoverdStockMovVc,"#Stock# Movements Recoverd");
//  end;
  SetText(kOfficialNumTypeOwnGoodsTransStockMovVc,"#Stock# Movements Transport of own goods");
//  if (HasLocalization("PRT")) then begin
    SetText(kOfficialNumTypeManualOwnGoodsTransStockMovVc,"#Stock# Movements Transport of own goods Manual");
    SetText(kOfficialNumTypeRecoverdOwnGoodsTransStockMovVc,"#Stock# Movements Transport of own goods Recoverd");
//  end;
  SetText(kOfficialNumTypeConsigmentStockMovVc,"#Stock# Movements Sales Consignment Stock");
//  if (HasLocalization("PRT")) then begin
    SetText(kOfficialNumTypeManualConsigmentStockMovVc,"#Stock# Movements Sales Consignment Stock Manual");
    SetText(kOfficialNumTypeRecoverdConsigmentStockMovVc,"#Stock# Movements Sales Consignment Stock Recoverd");
//  end;
  SetText(kOfficialNumTypeThirdEntGoodsTransStockMovVc,"#Stock# Movements Transport of goods of 3rd Entities");
//  if (HasLocalization("PRT")) then begin
    SetText(kOfficialNumTypeManualThirdEntGoodsTransStockMovVc,"#Stock# Movements Transport of goods of 3rd Entities Manual");
    SetText(kOfficialNumTypeRecoverdThirdEntGoodsTransStockMovVc,"#Stock# Movements Transport of goods of 3rd Entities Recoverd");
//  end;
  SetText(kOfficialNumTypeGlobalTransStockMovVc,"#Stock# Movements Global Transport");
//  if (HasLocalization("PRT")) then begin
    SetText(kOfficialNumTypeManualGlobalTransStockMovVc,"#Stock# Movements Global Transport Manual");
    SetText(kOfficialNumTypeRecoverdGlobalTransStockMovVc,"#Stock# Movements Global Transport Recoverd");
//  end;
  SetText(kOfficialNumTypeORVc,"Счета клиентам");
  SetText(kOfficialNumTypeManualIVVc,"Manual Normal Invoice");
  SetText(kOfficialNumTypeManualCashIVVc,"Manual Cash Notes");
  SetText(kOfficialNumTypeManualPOSIVVc,"Manual POS Invoice");
  SetText(kOfficialNumTypeManualCreditIVVc,"Manual Credit Notes");
  SetText(kOfficialNumTypeManualInterestIVVc,"Manual Interest Invoices");
  SetText(kOfficialNumTypeRecoverdIVVc,"Recovered from Damaged Database Normal Invoice");
  SetText(kOfficialNumTypeRecoverdCashIVVc,"Recovered from Damaged Database Cash Notes");
  SetText(kOfficialNumTypeRecoverdPOSIVVc,"Recovered from Damaged Database POS Invoice");
  SetText(kOfficialNumTypeRecoverdCreditIVVc,"Recovered from Damaged Database Credit Notes");
  SetText(kOfficialNumTypeRecoverdInterestIVVc,"Recovered from Damaged Database Interest Invoices");
//  if (HasLocalization("PRT")) then begin
    SetText(kOfficialNumTypeIPVc,"Receipts");
    SetText(kOfficialNumTypeManualIPVc,"Manual Receipts");
    SetText(kOfficialNumTypeRecoveredIPVc,"Recovered from Damaged Database Receipts");
    SetText(kOfficialNumTypeCreditIVCashVc,"счёт-фактура нормального кредита POS");  
    SetText(kOfficialNumTypeManualCreditIVCashVc,"руководство в ручную счётом-фактурой кредита POS");  
    SetText(kOfficialNumTypeRecoverdCreditIVCashVc,"Кредитная POS Счет восстанавился от поврежденной базы данных");  
//  end;
  SetText(kOfficialNumTypeConsignmentInvoiceStockMovVc,"#Склад# Движения консигн. сч-ф"); 
  EndSet;
  
  SetBegin(501);
  SetText(kLegalInvNrSelectionTypeManual,"В ручную");
  SetText(kLegalInvNrSelectionTypeAtOK,"После OK");
  SetText(kLegalInvNrSelectionTypeAtInsert,"После вставки");
  SetText(kLegalInvNrSelectionTypeAtPrintout,"At Printout");
//  if (HasLocalization("PRT")) then begin
    SetText(kLegalInvNrSelectionTypeAtSendingERecord,"At Sending E-Shipment");
//  end;
  EndSet;

  SetBegin(502);
  SetText(kLegalInvNrChronologyTypeNone,"Нет");
  SetText(kLegalInvNrChronologyTypeForced,"Есть");
  EndSet;

  SetBegin(503);
  SetText(kDelAddrFieldTypeDelCode,"Код доставк.");
  SetText(kDelAddrFieldTypeComment,"Комментарий");
  SetText(kDelAddrFieldTypeName,"Наименование");
  SetText(kDelAddrFieldTypeDelAddr0,"Адрес доставки 1");
  SetText(kDelAddrFieldTypeDelAddr1,"Адрес доставки 2");
  SetText(kDelAddrFieldTypeDelAddr2,"Адрес доставки 3");
  SetText(kDelAddrFieldTypeDelAddr3,"Адрес доставки 4");
  SetText(kDelAddrFieldTypeDelAddr4,"Адрес доставки 5");
  SetText(kDelAddrFieldTypeDelCountry,"Страна");
  SetText(kDelAddrFieldTypeContact,"Контакт");
  SetText(kDelAddrFieldTypePhone,"Телефон");
  SetText(kDelAddrFieldTypeFax,"Факс");
  SetText(kDelAddrFieldTypeEmail,"Электронная почта");
  EndSet;

  SetBegin(504);
  SetText(kBarcodeTypeNone,"-");
  SetText(kBarcodeCode128,"Код 128");
  SetText(kBarcodeCode39,"Код 39");
  SetText(kBarcodeEAN13,"EAN 13");
  SetText(kBarcodeQR,"QR код");
  EndSet;

  SetBegin(505);
  SetText(kCalculateTax,"Расчитать");
  SetText(kDoNotCalculateTax,"Не расчитывать");
  EndSet;
  
  StrSetBegin(506); //465 Subset for Books
  StrSetText(NPTSIVCashDClass,"Сч/ф кассового терм.");
  if (HasModRest or HasBar) then begin
    StrSetText(RestAccDClass,"Bar Tab");
  end;
  EndStrSet;

  SetBegin(507); //subset of set 71
  SetText(0,"Панель управления");
  SetText(3,"Сч/ф"); 
  SetText(8,"Сч/ф кас. терм. (сенс. экран)"); 
  EndSet;
  
  SetBegin(508);
  SetText(kAssetTransTypeNone,"Нет");
  SetText(kAssetTransTypeNewAsset,"Новый актив");
  SetText(kAssetTransTypeUpdateAsset,"Изменить актив");
  SetText(kAssetTransTypeRevaluateAsset,"Переоценка актива");
  EndSet;

  SetBegin(509);
  SetText(kNonTREO,"Non-TREO");
  SetText(kTREO,"TREO");
  EndSet;

  SetBegin(510);
  SetText(kNPTSNewCUFieldsEditStateNormal,"Нормальное");
  SetText(kNPTSNewCUFieldsEditStateViewOnly,"Только просмотр");
  EndSet;

  SetBegin(511);
  SetText(kVATCalcRuleFullAmount,"Полная сумма");
  SetText(kVATCalcRuleInRangeAmount,"Amount in Range");
  SetText(kVATCalcRuleSkip,"Пропустить расчет");
  EndSet;

  SetBegin(512);  //subset of set 384
  SetText(kUserDefRepColumnTypeCode,"Код");
  SetText(kUserDefRepColumnTypeComment,"Комментарий");
  SetText(kUserDefRepColumnTypeActuals,"Факт");
  SetText(kUserDefRepColumnTypeColumnsSumup,"Всего по колонке");
  EndSet;

  SetBegin(513); /* Subset of set 15 for Books Invoicing*/
  SetText(CASHINVFORMPS,"Кассовый ордер");
  SetText(CULABFORMPS,"Этикетка клиента/контакта");
  SetText(INV1FORMPS,"Сч/ф");
  SetText(REMFORMPS,"Напоминание");      
  EndSet;  

//remeber to update MailTextRegisterSClass
  SetBegin(514);
  SetText(kMailActivity,"Деятельность");
  SetText(kMailLetter,"Customer Letter");
  SetText(kMailInvoice,"Сч/ф");
  SetText(kMailOpenInvCustStatement,"Ведомость неоплаченных сч/ф");
  SetText(kMailPeriodicCustStatement,"Ведомость расчетов с клиентами");
  SetText(kMailPeriodicSuppStatement,"Periodic #Supplier# Statement");
  SetText(kMailPOSInvoice,"POS Invoice");
  SetText(kMailPurchaseOrder,"Заказ поставщику");
  SetText(kMailQuotation,"Коммерческое предложение");
  SetText(kMailSalesOrder,"Счёт клиенту");
  EndSet;

  SetBegin(515); 
  SetText(kMailRowTypeTo,"Кому");
  SetText(kMailRowTypeCC,"Cc");
  SetText(kMailRowTypeBCC,"Bcc");
  EndSet;

  SetBegin(516); 
  SetText(kOutArgEInvoicesDefault,"По умолч.");
  SetText(kOutArgEInvoicesDonotSend,"Не отправлять");
  SetText(kOutArgEInvoicesSend,"Send using CAE");
  SetText(kOutArgEInvoicesSendWithCAEA,"Send using CAEA");
  EndSet;
  
  SetBegin(517); 
  EndSet;
  
  SetBegin(518); // touch screen invoice, subset of 431
  SetText(kPOSButtonTypeBlank,"Blank");
  SetText(kPOSButtonTypeAddCommentLine,"Добавить комментарий");    
  SetText(kPOSButtonTypeAddHeaderLine,"Добавить заголовок");  
  SetText(kPOSButtonTypeAddHiddenLine,"Добавить скрытую строку");  
  SetText(kPOSButtonTypeAddSubtotalLine,"Добавить строку с промежуточным результатом");  
  SetText(kPOSButtonTypeAllInvoices,"All Invoices");
  SetText(kPOSButtonTypeAmendLine,"Amend Line");
  SetText(kPOSButtonTypeAppleCancelAEOrder,"Apple Cancel AE Order");  
  SetText(kPOSButtonTypeAppleCreateAEOrder,"Apple Create AE Order");  
  SetText(kPOSButtonTypeAppleWarrantyStatusCheck,"Apple Warranty Status Check");  
  SetText(kPOSButtonTypeCashPayment,"Cash");
  SetText(kPOSButtonTypeChangeAddress,"Change Address");
  SetText(kPOSButtonTypeChangeDiscountMatrix,"Change Discount Matrix");
  SetText(kPOSButtonTypeEditDate,"Change Date");
  SetText(kPOSButtonTypeChangeTerms,"Change Terms");
  SetText(kPOSButtonTypeLogin,"Change User");  
  SetText(kPOSButtonTypeCashupReport,"Cash Up Report");
  SetText(kPOSButtonTypeChequePayment,"#Cheque#");
  SetText(kPOSButtonTypeCloseSession,"Открыть сессию");
  SetText(kPOSButtonTypeConnectToPrepayment,"Connect to Prepayment");
  SetText(kPOSButtonTypeCreateActivity,"Создать Деятельность");
  SetText(kPOSButtonTypeCreateCashin,"Создать приход");
  SetText(kPOSButtonTypeCreateCashOut,"Create Cash Out");
  SetText(kPOSButtonTypeCreateCorrectionInvoice,"Create Correction Invoice");
  SetText(kPOSButtonTypeCreateCreditNote,"Создать кредит-ноту");
  SetText(kPOSButtonTypeCreateCreditEMail,"Создать электронное письмо");
  SetText(kPOSButtonTypeCreateGC,"Создать Подарочный сертификат");  
  SetText(kPOSButtonTypeCreditCardPayment,"Credit Card");
  SetText(kPOSButtonTypeCustomerSearch,"Customer Search");
  SetText(kPOSButtonTypeCustomerSearchFiltered,"Customer Search BF");
  SetText(kPOSButtonTypeXReading,"Daily Report");
  SetText(kPOSButtonTypeZReading,"Ежедневный Z-отчёт");         
  SetText(kPOSButtonTypeDebitCardPayment,"Debit Card");
  SetText(kPOSButtonTypeDeleteItem,"Delete Row");
  SetText(kPOSButtonTypeGotoPage,"Display Page");
  SetText(kPOSButtonTypeFinish,"Finish");  
  SetText(kPOSButtonTypeGetCashFloat,"Get Cash Float");
  SetText(kPOSButtonTypeGiftVoucherPayment,"Gift Voucher");
  SetText(kPOSButtonTypeInvoiceStatus,"Статус счёта-фактуры");
  SetText(kPOSButtonTypeItem,"Item");
  SetText(kPOSButtonTypeItemSearch,"Поиск товара");
  SetText(kPOSButtonTypeItemStatus,"Статус товара");
  SetText(kPOSButtonTypeLoyaltyPointsBonus,"Loyalty Bonus Points");
  SetText(kPOSButtonTypeLoyaltyCard,"Loyalty Card");
  SetText(kPOSButtonTypeLoyaltyPointsPayment,"Loyalty Points Payment");
  SetText(kPOSButtonTypeMainSerialNr,"Device Serial Number");  
  SetText(kPOSButtonTypeManagerDiscountOverride,"Manager Discount Override");
  SetText(kPOSButtonTypeOpenCalendar,"Open Calendar");  
  SetText(kPOSButtonTypeOpenCashDrawer,"Open Cash Drawer");  
  SetText(kPOSButtonTypeEditCustomerRecord,"Open Customer Record");
  SetText(kPOSButtonTypeEditItemRecord,"Open Item Record");
  SetText(kPOSButtonTypeOpenNLTransaction,"Открыть запись операции");  
  SetText(kPOSButtonTypeOpenSession,"Открыть сессию");
  SetText(kPOSButtonTypeOpenTaxMatrix,"Открыть матрицу налогов");  
  SetText(kPOSButtonTypOpenInvoices,"Open unfinished Invoices");  
  SetText(kPOSButtonTypePasteQuotation,"Вставить Коммерческое предложение");    
  SetText(kPOSButtonTypePasteSalesOrder,"Вставить Счёт клиенту");    
  SetText(kPOSButtonTypePayment,"Pay");
  SetText(kPOSButtonTypePaymentButtonsLayout,"Pay (Buttons layout)"); //!!TRANSLATE
  SetText(kPOSButtonTypePaymentOneMode,"Pay (one Mode)"); //!!TRANSLATE
  SetText(kPOSButtonTypePOSCommand,"POS Command");
  SetText(kPOSButtonTypePrintProformaInvoice,"Печатать счёт-проформу");  
  SetText(kPOSButtonTypePutCashFloat,"Put Cash Float");
  SetText(kPOSButtonTypeConnectToCCTerminal,"Подключение к Кредитному терминалу");  
  SetText(kPOSButtonTypeReprintLastCCSlip,"Перепечатка Последнего Кредитного окна");  
  SetText(kPOSButtonTypeReprintReceipt,"Reprint Receipt");
  SetText(kPOSButtonTypeReturn,"Return");
  SetText(kPOSButtonTypeReturnReason,"Return Reason");
  SetText(kPOSButtonTypeRunReportOnServer,"Run Report On Server");
  SetText(kPOSButtonTypeSelectSalesman,"Select #Salesman#");
  SetText(kPOSButtonTypeGiftVoucherSales,"Sell Gift Voucher");
  SetText(kPOSButtonTypeSendToFiscalDevice,"Send to Fiscal Device");  
  SetText(kPOSButtonTypeLookupSerialNr,"Serial No. Lookup");
  SetText(kPOSButtonTypeVoidRow,"Void Item");  
  EndSet;

  SetBegin(519); 
  SetText(kAcceptanceApproverSelectionAutomatic,"Automatic");
  SetText(kAcceptanceApproverSelectionManual,"Manual");
  EndSet;

  SetBegin(520); 
  SetText(kGSXAutoEnrollmentOrder,"Auto Enrollment Order");
  SetText(kGSXCancelAutoEnrollmentOrder,"Cancel Auto Enrollment Order");
  EndSet;

  SetBegin(521); 
  SetText(kDirectDebitBankNone,"None");
  SetText(kDirectDebitBankAUSABA,"Australia - ABA");
  EndSet;

  SetBegin(522);
  SetText(kReportingUnitTypeBlank,"-");
  SetText(kReportingUnitTypeCurrentDate,"Current Date");
  SetText(kReportingUnitTypeEndofUnit,"End of Unit");
  EndSet;

  SetBegin(523);
  SetText(kReportTemplateTypeSet,"Set");
  SetText(kReportTemplateTypeDefault,"По умолчанию");
  EndSet;
  
  SetBegin(524); // pos invoice Std Accounts, subset of 431
  SetText(kPOSButtonTypeBlank,"Blank");
  SetText(kPOSButtonTypeAmendLine,"Amend Line");
  SetText(kPOSButtonTypeCashPayment,"Cash");
  SetText(kPOSButtonTypeLogin,"Change User");
  SetText(kPOSButtonTypeChequePayment,"#Cheque#");
  SetText(kPOSButtonTypeCreditCardPayment,"Credit Card");
  SetText(kPOSButtonTypeCustomerSearch,"Customer Search");
//  if (HasModPOS) then begin
//    SetText(kPOSButtonTypeCreditCardPaymentReversal,"Credit Card Payment Reversal");
//  end;
  SetText(kPOSButtonTypeDebitCardPayment,"Debit Card");
  SetText(kPOSButtonTypeDeleteItem,"Delete Row");
  SetText(kPOSButtonTypeGotoPage,"Display Page");
  SetText(kPOSButtonTypeFinish,"Finish");
  SetText(kPOSButtonTypeInvalidateInvoice,"Invalidate Invoice");
  SetText(kPOSButtonTypeItem,"Item");
  SetText(kPOSButtonTypeItemSearch,"Поиск товара");
//  SetText(kPOSButtonTypeOpenCashDrawer,"Open Cash Drawer");
  SetText(kPOSButtonTypOpenInvoices,"Open Invoices");
  SetText(kPOSButtonTypeOpenTaxMatrix,"Открыть матрицу налогов");  
  SetText(kPOSButtonTypePayment,"Pay");
  SetText(kPOSButtonTypePaymentButtonsLayout,"Pay (Buttons layout)"); //!!TRANSLATE
  SetText(kPOSButtonTypePaymentOneMode,"Pay (one Mode)"); //!!TRANSLATE
  SetText(kPOSButtonTypePriceLookup,"Price Lookup");
  SetText(kPOSButtonTypePrintInvoice,"Печать счёта-фактуру");   
  SetText(kPOSButtonTypeReturn,"Return");
  SetText(kPOSButtonTypeReturnInvoiceNo,"Return Invoice No.");
  SetText(kPOSButtonTypeSalesAssistant,"Sales Assistant");
  SetText(kPOSButtonTypSaveInvoice,"Save Invoice");
  SetText(kPOSButtonTypeSelectSalesman,"Select #Salesman#");
  SetText(kPOSButtonTypeVoidRow,"Void Item");
  EndSet;

  SetBegin(525); // Bar Tab Std Restaurant, subset of 431
  SetText(kPOSButtonTypeBlank,"Blank");
  SetText(kPOSButtonTypeAmendLine,"Amend Line");
  SetText(kPOSButtonTypeCashPayment,"Cash");
  SetText(kPOSButtonTypeCalculateTip,"Calculate Tip");
  SetText(kPOSButtonTypeLogin,"Change User");
  SetText(kPOSButtonTypeChequePayment,"#Cheque#");
  SetText(kPOSButtonTypeCloseSession,"Открыть сессию");         
  SetText(kPOSButtonTypeCreditCardPayment,"Credit Card");
  SetText(kPOSButtonTypeCreditCardPaymentReversal,"Credit Card Payment Reversal");
  SetText(kPOSButtonTypeCustomerSearch,"Customer Search");
  SetText(kPOSButtonTypeGotoPage,"Display Page");
  SetText(kPOSButtonTypeDebitCardPayment,"Debit Card");
  SetText(kPOSButtonTypeDeleteItem,"Delete Row");
  SetText(kPOSButtonTypeFinish,"Finish");
  SetText(kPOSButtonTypeInstructions,"Instructions");
  SetText(kPOSButtonTypeInvalidateInvoice,"Invalidate Tab");
  SetText(kPOSButtonTypeItem,"Item");
  SetText(kPOSButtonTypeItemSearch,"Поиск товара");
  SetText(kPOSButtonTypeMergeBarTabs,"Merge Bar Tabs");
  SetText(kPOSButtonTypeMoveToBarTab,"Move Items to Bar Tab");    
//  SetText(kPOSButtonTypeOpenCashDrawer,"Open Cash Drawer");
  SetText(kPOSButtonTypeOpenSession,"Открыть сессию");         
  SetText(kPOSButtonTypOpenInvoices,"Открыть счета");
  SetText(kPOSButtonTypeOpenTaxMatrix,"Открыть матрицу налогов");  
  SetText(kPOSButtonTypePayment,"Pay");
  SetText(kPOSButtonTypePaymentButtonsLayout,"Pay (Buttons layout)"); //!!TRANSLATE
  SetText(kPOSButtonTypePaymentOneMode,"Pay (one Mode)"); //!!TRANSLATE
  SetText(kPOSButtonTypSaveInvoice,"Park Tab");
  SetText(kPOSButtonTypePriceLookup,"Price Lookup");
  SetText(kPOSButtonTypePrintInvoice,"Print Invoice");
  SetText(kPOSButtonTypePrintOrder,"Print Tab");
  SetText(kPOSButtonTypePrintFireOrder,"Print Fire Order");
  SetText(kPOSButtonTypePrintCancellation,"Print Cancellation");
  SetText(kPOSButtonTypeReprintReceipt,"Reprint Receipt");
//  SetText(kPOSButtonTypeReturn,"Return");                         //not available
//  SetText(kPOSButtonTypeReturnInvoiceNo,"Return Invoice No.");    //not available
  SetText(kPOSButtonTypeSalesAssistant,"Sales Assistant");
  SetText(kPOSButtonTypeSetTable,"Set Table");
  SetText(kPOSButtonTypeSetCovers,"Set Covers");
  SetText(kPOSButtonTypeSplitBarTabs,"Split Bar Tabs");
  SetText(kPOSButtonTypeVoidRow,"Void Item");
  EndSet;
  
  StrSetBegin(526); // 531 //SetCurLicensesFlags
  StrSetText(HasBasePackage,"Base Package");
  StrSetText(HasModAT2,"Мод. Основные средства"); 
  StrSetText(HasModCL,"Мод. Cash Book");  
  StrSetText(HasModCO,"Мод. Contracts");
  StrSetText(HasModCheck,"Module #Cheques#"); //!!TRANSLATE
  StrSetText(HasModCRM,"Мод. CRM");
  StrSetText(HasModExp,"Мод. Expenses");
  StrSetText(HasModHotel,"Mod. Отель"); 
  StrSetText(HasIncomeAndExpenseBook,"Income and Expense Book");
  StrSetText(HasModNL,"Мод. #Nominal Ledger#");
  StrSetText(HasModPOS,"Мод. POS"); 
  StrSetText(HasModProd,"Мод. Производство"); 
  StrSetText(HasModTS,"Mod. Projects"); 
  StrSetText(HasModPL,"Мод. #Purchase Ledger#");
//  StrSetText(HasPLIntegratedWithNL,"Module #Purchase Ledger# integrated with #Nominal Ledger#");
  StrSetText(HasModQT,"Мод. Коммерческие предложения");
  StrSetText(HasPayroll,"Mod. Зарплаты"); 
  StrSetText(HasModDI,"Mod. Ценообразование"); 
  StrSetText(HasModPO,"Мод. #Purchase Order#");
  StrSetText(HasModPP,"Module Resource Planning"); //!!TRANSLATE
  StrSetText(HasModRest,"Мод. Ресторан"); 
  StrSetText(HasModSL,"Мод. #Sales Ledger#");
//  StrSetText(HasSLIntegratedWithNL,"Module #Sales Ledger# integrated with #Nominal Ledger#");
  StrSetText(HasModSO,"Мод. #Sales Order#");
  StrSetText(HasModSVO,"Мод. Заказы на обслуживание"); 
  StrSetText(HasModIN,"Мод. #Stock#");
  StrSetText(HasAccessGroups,"Группы доступа");         
  StrSetText(HasAccountRecon,"Корреспонденция счетов");          
  StrSetText(HasAdvancedAccounting,"Расширенная бухгалтерия"); 
  StrSetText(HasAdvancedPricing,"Расширенное ценообразование"); 
  StrSetText(HasAdvancedStock,"Расширенный склад"); 
  StrSetText(HasBase2,"Base Currency"); //!!TRANSLATE
  StrSetText(HasNLBudget,"Бюджеты в Мод. ""Финансы"""); 
  StrSetText(HasModCalendar,"Calendar"); //!!TRANSLATE
  StrSetText(HasCategories,"Категории"); 
  StrSetText(HasCharts,"Charts"); //!!TRANSLATE
  StrSetText(HasDetailedCharts,"Detailed Charts"); //!!TRANSLATE
  StrSetText(Company,"Компания"); 
  StrSetText(HasConferences,"Conferences"); //!!TRANSLATE
  StrSetText(HasContactRelations,"Взаимоотношения контактов"); 
  StrSetText(HasCustomerLetter,"Customer Letters"); //!!TRANSLATE
  StrSetText(HasCustomerStatusReport,"Customer Status Report"); //!!TRANSLATE
  StrSetText(HasDownpayments,"Предоплата");
  StrSetText(HasEInvoicing,"Эл.счета-фактуры"); 
  StrSetText(HasEMail,"Эл.почта");  
  StrSetText(HasETaxDocuments,"Эл. налоговые документы"); 
//  StrSetText(HasExternalEMail,"External E-Mail");//pretty useless
  StrSetText(HasFiscalPrinter,"Фискальный принтер"); 
  StrSetText(HasFormEditor,"Редактор форм"); 
  StrSetText(HasIntegratedNL,"Интегрированные #Финансы#");
//  StrSetText(HasStockIntegratedNL,"Automated #Stock# Accounting Package");
  StrSetText(HasInvoicing,"Счета"); 
  StrSetText(HasItemGroups,"Группы товаров"); 
  StrSetText(HasLanguages,"Языки"); 
  StrSetText(HasMultiCurrency,"Мультивалютность"); 
  StrSetText(HasMultiLocations,"Дополнительные склады"); 
  StrSetText(HasPersons,"Сотрудники"); 
  StrSetText(HasNumberSeries,"Серии номеров"); 
  StrSetText(HasNLBudget,"#N/L# Budget"); 
  StrSetText(HasNLBudgetClass,"Классы бюджетов"); 
  StrSetText(HasObjects,"Объекты"); 
  StrSetText(HasOrderClasses,"Классы счетов клиентам"); 
//  StrSetText(HasPackageAccounting,"Package Accounting");
  StrSetText(HasPrepayments,"Предоплаты");  
  StrSetText(HasPriceLists,"Прейскуранты"); 
  StrSetText(HasProjects,"Проекты"); 
  StrSetText(HasRegistersExports,"Экспорты"); 
  StrSetText(HasReminderLevel,"Reminders"); //!!TRANSLATE
  StrSetText(HasRetGoodsToSupp,"Has Return Goods to Suppliers");          
  StrSetText(HasReturnedGoods,"Has Returned Goods");          
  StrSetText(HasRoomPackages,"Room Packages"); //!!TRANSLATE
  StrSetText(HasRoomTypes,"Room Types"); //!!TRANSLATE
  StrSetText(HasSalesman,"Продавец"); 
  StrSetText(HasSalesmanBonus,"Бонусы продавцов"); 
  StrSetText(HasSkypeConnection,"Интеграция со Skype"); 
  StrSetText(HasSerialNumbers,"Серийные номера");
  StrSetText(ServerSlot,"Сервер"); 
  StrSetText(HasSettlementDiscount,"Settlement Discount"); //!!TRANSLATE
  StrSetText(User,"Пользователь"); 
  StrSetText(HasVarieties,"Разновидности"); 
  StrSetText(HasVATZone,"Зоны НДС"); 
  StrSetText(HasWorkflowOverview,"Workflow Overview"); //!!TRANSLATE
  StrSetText(HasYodlee,"Yodlee"); //!!TRANSLATE
  EndStrSet;

  
  SetBegin(527);
  SetText(kLicItemUnused,"Unused");
  SetText(kLicItemUsedLocally,"Used Locally");
  SetText(kLicItemTransferred,"Transferred to server");
  EndSet;
  
  SetBegin(528);
  SetText(kLicItemSourceMacAppStore,"Mac AppStore");
  SetText(kLicItemSourceiTunesStore,"iTunes Store");
  SetText(kLicItemSourceAndroidMarket,"Android Market");
  SetText(kLicItemSourceCromeWebStore,"Chrome Web Store");
  SetText(kLicItemSourceWindowsMarketplace,"Windows Marketplace");
  SetText(kLicItemSourceHansaWorld,"HansaWorld");
  EndSet;
  
  SetBegin(529);
  SetText(kLicItemTypePermanent,"Безлимитный");
  SetText(kLicItemTypeExpiring,"Конечный");
  SetText(kLicItemTypeRecurring,"Повторяющийся");
  SetText(kLicItemTypeLimited,"Ограниченный"); 
  EndSet;
  
  SetBegin(530); /* Subset of set 15 for Standard Products*/
  if (HasStandardCRM or HasStandardOrganizer or HasStandardCommunicator) then begin
    SetText(ACTFORMPS,"Activity");
  end;
  if (HasModIN) then begin
    SetText(ADRLABFORMPS,"Address Labels");
  end;
  if (HasModRest) then begin
    SetText(RESTACCFORMPS,"Bar Tab");
  end;
  if (HasModPOS) then begin
    SetText(IVCASHFORMPS,"Cash Invoice (POS)");
  end;
  if (HasModCO) then begin
    SetText(CONTRACTFORMPS,"Contract");
  end;
  if (HasModSL or HasStandardCRM) then begin
    SetText(CULABFORMPS,"Customer/Contact Label");
  end;
  if (HasModSO and HasModIN) then begin
    SetText(SHLABFORMPS,"Delivery Labels");
    SetText(SH1FORMPS,"Delivery Note");
  end;
  if (HasModIN) then begin
    SetText(PURCHASEFORMPS,"Goods Receipt");
    SetText(PULABFORMPS,"Goods Receipt Labels");
  end;
  if (HasModSL) then begin
    SetText(INV1FORMPS,"Счёт-фактура");
  end;
  if (HasModIN) then begin
    SetText(ITEMLABELFORMPS,"Item Label");
  end;
  if (HasModSL) then begin
    SetText(ARSFORMPS,"Open Invoice Customer Statement");
  end;
  if (HasModSO) then begin
    SetText(ORDFORMPS,"Order");      
  end;
  if (HasModPL) then begin
    SetText(OP2DFORMPS,"Payment #Cheques#");
    SetText(OPDFORMPS,"Payment Form");
  end;
  if (HasModSL) then begin
    SetText(CUPERFORMPS,"Periodic Customer Statement");
  end;
  if (HasModSO and HasModIN) then begin
    SetText(SH3FORMPS,"Picking List");
  end;
  if (HasModPL) then begin
    SetText(VIFORMPS,"#Purchase Invoice#");
  end;
  if (HasStandardCRM) then begin
    SetText(QTFORMPS,"Quotation");
  end;
  if (HasModSL) then begin
    SetText(IPDFORMPS,"Receipt Form");
  end;
  if (HasModHotel) then begin
    SetText(JOBFORMPS,"Reservation");
  end;
  if (HasModIN) then begin
    SetText(SDFORMPS,"#Stock Depreciation#");
  end;
  if (HasModNL) then begin
    SetText(TRFORMPS,"Записи операций");  
  end;
  EndSet;
  
  StrSetBegin(531); // mapping between SKU and internal lic items, from enum kStdLicItem
                    // should not be used
  StrSetText(1234,"1"); // server user / slot
  StrSetText(2345,"2"); // S/L
  StrSetText(3456,"3"); // P/L
  StrSetText(3456,"4"); // IN
  StrSetText(3456,"5"); // N/L
  EndStrSet;
  
  SetBegin(532);
  SetText(kQRErrorCorrectionL,"L");
  SetText(kQRErrorCorrectionM,"M");
  SetText(kQRErrorCorrectionQ,"Q");
  SetText(kQRErrorCorrectionH,"H");
  EndSet;
  
  SetBegin(533);
  SetText(0,"Debug Detailed"); // kVerbosityDebugDetailed
  SetText(1,"Debug"); // kVerbosityDebug
  SetText(2,"Verbose"); // kVerbosityVerbose
  SetText(3,"Silent (default)"); // kVerbositySilent
  EndSet;

  SetBegin(534);
  SetText(vatUAE,"ARE"); 
  SetText(vatArgentinean,"ARG");
  SetText(vatAustralia,"AUS"); 
  SetText(vatAzerbaijan,"AZE");
  SetText(vatAngolan,"AGO");   
  SetText(vatBahrain,"BHR");  
  SetText(vatBelarusian,"BLR"); 
  SetText(vatBolivian,"BOL"); 
  SetText(vatBrazil,"BRA");  
  SetText(vatCanada,"CAN");  
  SetText(vatChina,"CHN");  
  SetText(vatChilean,"CHL"); //!!TRANSLATE
  SetText(vatColombian,"COL"); //!!TRANSLATE
  SetText(vatCostaRican,"CRI");  
  SetText(vatCzech,"CZE");
  SetText(vatDanish,"DEN");
  SetText(vatGerman,"DEU");  
  SetText(vatAlgeria,"DZA");  
  SetText(vatEgypt,"EGY");  
  SetText(vatSpanish,"ESP");  
  SetText(vatEstonian,"EST");
  SetText(vatFinnish,"FIN");
  SetText(vatFrench,"FRA");  
  SetText(vatEnglish,"GBR");  
  SetText(vatGuatemalean,"GTM");
  SetText(vatHonduran,"HND");
  SetText(vatCroation,"HRV");  
  SetText(vatHungarian,"HUN");
  SetText(vatIndian,"IND");
  SetText(vatIcelandic,"ISL");  
  SetText(vatItalian,"ITA");
  SetText(vatJordan,"JOR");  
  SetText(vatKenyan,"KEN");
  SetText(vatKuwait,"KWT");  
  SetText(vatLebanon,"LBN");  
  SetText(vatLithuanian,"LTU");  
  SetText(vatLatvian,"LVA");  
  SetText(vatMexican,"MEX");
  SetText(vatMozambican,"MOZ"); 
  SetText(vatNamibian,"NAM");
  SetText(vatNicaraguan,"NIC");
  SetText(vatNorwegian,"NOR");
  SetText(vatNewZealand,"NZL");  
  SetText(vatOman,"OMN");  
  SetText(vatPakistan,"PAK");  
  SetText(vatPanamanian,"PAN"); 
  SetText(vatPhilippinian,"PHL"); 
  SetText(vatPolish,"POL");
  SetText(vatPortuguese,"PRT");
  SetText(vatQatar,"QAT");  
  SetText(vatRomanian,"ROU");
  SetText(vatRussian,"RUS");
  SetText(vatSaudiArabia,"SAU");  
  SetText(vatSingaporean,"SGP");
  SetText(vatSalvadorian,"SLV");
  SetText(vatSerbian,"SRB");
  SetText(vatSlovak,"SVK"); 
  SetText(vatSlovenian,"SVN");
  SetText(vatSwedish,"SWE");  
  SetText(vatSyria,"SYR");  
  SetText(vatUkrainian,"UKR");
  SetText(vatUnitedStates,"USA");
  SetText(vatYemen,"YEM");  
  SetText(vatSAF,"ZAF");  
  SetText(vatZimbabwean,"ZWE");
  EndSet;

  SetBegin(535);
  SetText(0,"Header");
  SetText(1,"Matrix");
  EndSet;

//Set 536,537,538,539,540,541 in SKUeng.hal
  
  SetBegin(542);
  SetText(vatAlgeria,"Алжир");
  SetText(vatAngolan,"Ангола"); 
  SetText(vatArgentinean,"Аргентина");
  SetText(vatAustralia,"Австралия");
  SetText(vatAzerbaijan,"Азейрбайджан");
  SetText(vatBahrain,"Бахрей");
  SetText(vatBelarusian,"Беларусь");
  SetText(vatBolivian,"Боливия"); 
  SetText(vatBrazil,"Бразилия");
  SetText(vatCanada,"Канада");
  SetText(vatChina,"Китай");
  SetText(vatCostaRican,"Коста Рика");
  SetText(vatCroation,"Хорватия");
  SetText(vatCzech,"Чехия");
  SetText(vatDanish,"Дания");
  SetText(vatEgypt,"Египет");
  SetText(vatEstonian,"Эстония");
  SetText(vatFinnish,"Финляндия");
  SetText(vatFrench,"Франция");
  SetText(vatGerman,"Германия");
  SetText(vatGuatemalean,"Гватемала");
  SetText(vatHonduran,"Гондурас");
  SetText(vatHungarian,"Венгрия");
  SetText(vatIcelandic,"Исландия");
  SetText(vatIndian,"Индия");
  SetText(vatItalian,"Италия");
  SetText(vatJordan,"Иордания");
  SetText(vatKenyan,"Кения");
  SetText(vatKuwait,"Кувейт");
  SetText(vatLatvian,"Латвия");
  SetText(vatLebanon,"Ливан");
  SetText(vatLithuanian,"Литва");
  SetText(vatMexican,"Мексика");
  SetText(vatMozambican,"Мозамбийский"); 
  SetText(vatNamibian,"Намибия");
  SetText(vatNicaraguan,"Никарагуа");
  SetText(vatNewZealand,"Новая Зеландия");  
  SetText(vatNorwegian,"Норвегия");
  SetText(vatOman,"Оман");
  SetText(vatPakistan,"Пакистан");
  SetText(vatPanamanian,"Панама");
  SetText(vatPhilippinian,"Филиппины"); 
  SetText(vatPolish,"Польша");
  SetText(vatPortuguese,"Португалия");
  SetText(vatQatar,"Катар");
  SetText(vatRomanian,"Румыния");
  SetText(vatRussian,"Россия");
  SetText(vatSingaporean,"Сингапур");
  SetText(vatSalvadorian,"Эль-Сальвадор");
  SetText(vatSaudiArabia,"Саудовская Аравия");
  SetText(vatSerbian,"Сербия");
  SetText(vatSlovak,"Словакия"); 
  SetText(vatSlovenian,"Словения");
  SetText(vatSAF,"Южная Африка");
  SetText(vatSpanish,"Испания");
  SetText(vatSwedish,"Швеция");
  SetText(vatSyria,"Сирия");
  SetText(vatUkrainian,"Украина");
  SetText(vatUAE,"ОАЭ");
  SetText(vatEnglish,"Великобритания");
  SetText(vatUnitedStates,"США");
  SetText(vatYemen,"Йемен");
  SetText(vatZimbabwean,"Зимбабве");
/*
  SetText(vatAlgeria,"CAN");
  SetText(vatBahrain,"CAN");
  SetText(vatEgypt,"CAN");
  SetText(vatJordan,"CAN");
  SetText(vatKuwait,"CAN");
  SetText(vatLebanon,"CAN");
  SetText(vatOman,"CAN");
  SetText(vatPakistan,"CAN");
  SetText(vatQatar,"CAN");
*/  
  SetText(vatSaudiArabia,"Saudi Arabia");
/*  
  SetText(vatSyria,"CAN");
  SetText(vatUnitedArabEmirates,"CAN");
  SetText(vatYemen,"CAN");
*/
  EndSet;
  
  SetBegin(543);
  SetText(kBillPaymentCC,"CC");
  SetText(kBillPaymentInvoice,"Inv");
  SetText(kBillPaymentPaypal,"Paypal"); 
  SetText(kBillPaymentDotpay,"Dotpay"); 
  SetText(kBillPaymentPaytrail,"Paytrail"); 
  SetText(kBillPaymentPaysera,"Paysera"); //!!TRANSLATE
  SetText(kBillPaymentOrder,"Счета клиенту"); 
  EndSet;

  SetBegin(544);
  SetText(kGSXAutoEnrollmentNotSent,"Не отправлено");
  SetText(kGSXAutoEnrollmentSent,"Отправлено");
  SetText(kGSXAutoEnrollmentCancelled,"Отменено");
  EndSet;
  
  SetBegin(545);
  SetText(0,"IsEnterprise");
  SetText(1,"IsStandardERP");
  SetText(2,"HasATOL");
  SetText(3,"HasAdvancedPricing");
  SetText(4,"HasApprovals");
  SetText(5,"HasBar");
  SetText(6,"HasBase2");
  SetText(7,"HasCCPayments");
  SetText(8,"HasConsignmentStock");
  SetText(9,"HasContactClassification");
  SetText(10,"HasDeliveryAddress");
  SetText(11,"HasEInvoicing");
  SetText(12,"HasEMail");
  SetText(13,"HasExternalEMail");
  SetText(14,"HasExtraNLComment");
  SetText(15,"HasHotelInterface");
  SetText(16,"HasJewelleryInterface");
  SetText(17,"HasItemClassification");
  SetText(18,"HasItemGroups");
  SetText(19,"HasKPIs");
  SetText(20,"HasLanguages");
  SetText(21,"HasLimitedAccess");
  SetText(22,"HasLocalMachines");
  SetText(23,"HasLoyaltyCards");
  SetText(24,"HasMultiCurrency");
  SetText(25,"HasMultiLocations");
  SetText(26,"HasNumberSeries");
  SetText(27,"HasPocketScreen");
  SetText(28,"HasObjects");
  SetText(29,"HasPriceLists");
  SetText(30,"HasPositions");
  SetText(31,"HasProjects");
  SetText(32,"HasSerialNumbers");
  SetText(33,"HasSkypeConnection");
  SetText(34,"HasTestFeatures");
  SetText(35,"HasTouchScreenDevice");
  SetText(36,"HasVarieties");
  SetText(37,"HasModAT2");
  SetText(38,"HasModCheck");
  SetText(39,"HasModCL");
  SetText(40,"HasModCO");
  SetText(41,"HasModCRM");
  SetText(42,"HasModExp");
  SetText(43,"HasModIN");
  SetText(44,"HasModNL");
  SetText(45,"HasModPO");
  SetText(46,"HasModPOS");
  SetText(47,"HasModPL");
  SetText(48,"HasModPP");
  SetText(49,"HasModProd");
  SetText(50,"HasModQT");
  SetText(51,"HasModRent");
  SetText(52,"HasModRest");
  SetText(53,"HasModSL");
  SetText(54,"HasModSO");
  SetText(55,"HasModSVO");
  SetText(56,"HasModTS");
  SetText(57,"HasStandardCRM");
  SetText(58,"HasStandardOrganizer");
  SetText(59,"HasStandardCommunicator");
  SetText(60,"HasSIPServerConnection");
  SetText(61,"HasOfficialSerNr");
  SetText(62,"HasPreferedOfficialSerNr");
  SetText(63,"HasTaxMatrix");
  SetText(64,"HasSalesman");
  SetText(65,"HasSecondQuantity");
  SetText(66,"HasReconLevel2");
  SetText(67,"HasSettlementDiscount");
  SetText(68,"HasTREO");
  SetText(69,"HasSimulations");
  SetText(70,"HasCategories");
  SetText(71,"HasDepartments");
  SetText(72,"HasModCourses");
  SetText(73,"HasModHotel");
  SetText(74,"HasModRsrt");
  SetText(75,"HasModWHM");
  SetText(76,"HasModCredMan");
  SetText(77,"HasFavouriteActTypes");
  SetText(78,"HasConsolidation");
  SetText(79,"HasCommunicator");
  SetText(80,"HasReminderLevel");
  SetText(81,"HasRoute");
  SetText(82,"HasMainPartner");
  SetText(83,"HasGuestUserDefined");
  SetText(84,"HasWithholdingTax");
  SetText(85,"HasWithholdingTaxAdvanced");
  SetText(86,"HasRussianPrepayment");
  SetText(87,"HasResourceDisplayGroups");  
  SetText(88,"HasHideCostPrice");  
  SetText(89,"HasFreightAdvanced");  
  SetText(90,"HasQualityControl");  
  SetText(91,"HasExtTax");  
  SetText(92,"HasAdvancedAccounting");
  SetText(93,"HasAdvancedCRM");
  SetText(94,"HasCountryPerCustomer");
  SetText(95,"HasDefineColumns");
  SetText(96,"HasAdvancedStock");
  SetText(97,"HasBranch");
  SetText(98,"HasCustItem");
  SetText(99,"HasCustomerSearchKey");
  SetText(100,"HasVATZone");
  SetText(101,"HasModHRM");
  SetText(102,"HasWAN");
  SetText(103,"HasBasePackage");
  SetText(104,"Company");
  SetText(105,"HasIOUChecks");
  SetText(106,"HasEndorsedChecks");
  SetText(107,"HasPersons");
  SetText(108,"HasIncomeAndExpenseBook");
  SetText(109,"HasFormEditor");    
  SetText(110,"HasETaxDocuments");    
  SetText(111,"HasContactRelations");    
  SetText(112,"HasContactRelations");    
  SetText(113,"HasPayroll");    
  SetText(114,"HasModDI");    
  SetText(115,"HasModDI");    
  SetText(116,"HasInvoicing");           
  SetText(117,"HasAccessGroups");           
  SetText(118,"HasAccountRecon");         
  SetText(119,"HasRetGoodsToSupp");         
  SetText(120,"HasReturnedGoods");         
  SetText(121,"HasPrepayments");         
  SetText(122,"HasStrAsSignFType");         
  SetText(123,"HasAddFee");         
  SetText(124,"HasNLBudget");         
  SetText(125,"HasSalesGroup");         
  SetText(126,"HasCreditLimit");         
  SetText(127,"HasBuyBack");         
  SetText(128,"HasDownpayments");         
  SetText(129,"HasRemoteBackup"); 
  SetText(130,"NumberOfCompanies"); 
  SetText(131,"HasSalesmanBonus"); 
  SetText(132,"HasModBA"); 
  SetText(133,"HasModCons"); 
  SetText(134,"HasModCustom"); 
  SetText(135,"HasModEDI"); 
  SetText(136,"HasModIntStock"); 
  SetText(137,"HasModPOProg"); 
  SetText(138,"HasAged"); 
  SetText(139,"HasAdvancedProduction"); 
  SetText(140,"HasFiscalPrinter"); 
  SetText(141,"HasAccPeriods"); 
  SetText(142,"HasMailTags"); 
  SetText(143,"HasOrderClasses"); 
  SetText(144,"HasWorkOrders"); 
  SetText(145,"HasThrouLocation"); 
  SetText(146,"HasInvoiceOfficialSerNr"); 
  SetText(147,"HasNLBudgetClass"); 
  SetText(148,"HasBankImports"); 
  SetText(149,"HasServerInCloud"); 
  SetText(150,"HasPaymentGateway"); 
  SetText(151,"HasBankImport"); 
  SetText(152,"HasRestaurantBookings"); 
  SetText(153,"HasSLIntegratedWithNL");
  SetText(154,"HasPLIntegratedWithNL");
  SetText(155,"HasFunctionTagsMax"); 
  SetText(156,"HasFunctionTagsMax");
  SetText(157,"HasFunctionTagsMax"); 
  SetText(158,"HasFunctionTagsMax"); //!!TRANSLATE
  SetText(159,"HasConferences"); //!!TRANSLATE
  SetText(160,"HasFunctionTagsMax"); //!!TRANSLATE
  SetText(161,"HasWorkflowOverview"); //!!TRANSLATE
  SetText(162,"HasCustomerStatusReport"); //!!TRANSLATE
  SetText(163,"HasModCalendar"); //!!TRANSLATE
  SetText(164,"HasRoomTypes"); //!!TRANSLATE
  SetText(165,"HasCharts"); //!!TRANSLATE
  SetText(166,"HasDetailedCharts"); //!!TRANSLATE
  SetText(167,"HasPackageAccounting"); //!!TRANSLATE
  SetText(168,"HasFunctionTagsMax"); //!!TRANSLATE
//add before HasFunctionTagsMax and increase HasFunctionTagsMax value  
//amend LoadWindowTagsForStandard and SetDefaultWindowTags and SetProductTags and other loops using set 545  
//HasMetroTestFeatures 
  EndSet;

  StrSetBegin(546); // SetBuildProductCode
  StrSetText(Admiral,"Admiral"); 
  StrSetText(Books,"Books");
  StrSetText(BooksInvoicing,"BooksInvoicing");
  StrSetText(BooksNominalLedger,"BooksNominalLedger");         
  StrSetText(BooksUninstaller,"BooksUninstaller");
  StrSetText(BusinessCommunicator,"BusinessCommunicator");
  StrSetText(CashLog,"CashLog");
  StrSetText(DPD,"DPD"); 
  StrSetText(DriveLog,"DriveLog");
  StrSetText(StandardERP,"StandardERP"); 
  StrSetText(HansaWorldCRM,"HansaWorldCRM");
  StrSetText(HansaWorldCRMBasic,"HansaWorldCRMBasic");
  StrSetText(HansaWorldDocuments,"HansaWorldDocuments");
  StrSetText(MobilePOS,"MobilePOS");
  StrSetText(MobileReports,"MobileReports");
  StrSetText(MobileRestaurant,"MobileRestaurant");
  StrSetText(MobileSalesman,"MobileSalesman");
  StrSetText(MobileStock,"MobileStock");
  StrSetText(MobileSynchronizedPOS,"MobileSynchronizedPOS");
  StrSetText(OBSHousing,"OBSHousing"); //!!TRANSLATE
  StrSetText(POSStandalone,"POSStandalone");
  StrSetText(RussianStandard,"RussianStandard");         
  StrSetText(SmartApps,"SmartApps");
  StrSetText(StandardAccounts,"StandardAccounts");
  StrSetText(StandardAccounts,"StandardAccountsiDream"); //!!TRANSLATE
  StrSetText(StandardBar,"StandardBar");
  StrSetText(StandardBookkeepingLite,"StandardBookkeepingLite"); //!!TRANSLATE
  StrSetText(StandardBookkeepingLite,"StandardBookkeepingLite");         
  StrSetText(StandardBusiness,"StandardBusiness");         
  StrSetText(StandardCRM,"StandardCRM");
  StrSetText(StandardContracts,"StandardContracts");
  StrSetText(StandardUnused,"StandardUnused"); 
  StrSetText(StandardExpenses,"StandardExpenses");
  StrSetText(StandardHotel,"StandardHotel");
  StrSetText(StandardInvoicing,"StandardInvoicing");
  StrSetText(StandardNominalLedger,"StandardNominalLedger");
  StrSetText(StandardOrganizerMobile,"StandardOrganizerMobile");
  StrSetText(StandardPOS,"StandardPOS");
  StrSetText(StandardProjects,"StandardProjects");
  StrSetText(StandardRentals,"StandardRentals");
  StrSetText(StandardRestaurant,"StandardRestaurant");
  StrSetText(StandardStock,"StandardStock");
  StrSetText(TimeLog,"TimeLog");
  StrSetText(TravelLog,"TravelLog");
  StrSetText(StandardServer,"StandardServer"); 
  StrSetText(Enterprise,"Enterprise"); 
  StrSetText(WeHaveStock,"WeHaveStock");
  StrSetText(WeHaveInvoices,"WeHaveInvoices");
  StrSetText(WeHaveStockAndCRM,"WeHaveStockAndCRM");
  StrSetText(PAYYAPERP,"PAYYAPERP"); 
  StrSetText(PurplesoftERP,"PurplesoftERP"); //!!TRANSLATE
  StrSetText(TBAS,"TBAS"); //!!TRANSLATE
  EndStrSet;

  SetBegin(547);
  SetText(kWatchpointDiskspaceLow,"Мало свободного места"); 
  SetText(kWatchpointNotRunning,"Не запущен"); 
  SetText(kWatchpointNotResponding,"Не отвечает"); 
  SetText(kWatchpointIntentionallyNotRunning,"Не запущен (преднам.)"); 
  SetText(kWatchpointConfigError,"Ошибка конфигурации");
  EndSet;
  
  SetBegin(548);
  SetText(kOriginTypeDomestical,"Внутренний");
  SetText(kOriginTypeDirectImport,"Прямой импорт");
  SetText(kOriginTypeIndirectImport,"Импортирован, но приобретен внутри страны");
  EndSet;
  
  SetBegin(549);
  SetText(kTaxRegimeSimpleNational,"Simple national");
  SetText(kTaxRegimeSimpleNationalExcess,"Simple national with excess on annual turnover");
  SetText(kTaxRegimeNormal,"Normal");
  EndSet;

  SetBegin(550);
  SetText(0,"modSL,kKPITypeARDue");
  SetText(1,"modPL,kKPITypeAPDue");
  EndSet;
  
  StrSetBegin(551);
  StrSetText(en,"ENG");
  StrSetText(fr_CA,"FRC");
  StrSetText(fr,"FRA");
  StrSetText(de,"GER");
  StrSetText(es,"ESP");
  StrSetText(it,"ITA");
  StrSetText(sv,"SWE");
  StrSetText(da,"DAN");
  StrSetText(nn,"NOR");
  StrSetText(nb,"NOR");
  StrSetText(fi,"FIN");
  StrSetText(en_US,"USA");
  StrSetText(pt,"POR");
  StrSetText(pt_AO,"AGO"); 
  StrSetText(pt_BR,"BRA");
  StrSetText(tr,"TUR");
  StrSetText(is,"ICE");
  StrSetText(ru,"RUS");
  StrSetText(hu,"HUN");
  StrSetText(en_NZ,"NZE");
  StrSetText(en_AU,"AUS");
  StrSetText(cs,"CZE");
  StrSetText(sk,"SVK");
  StrSetText(pl,"POL");
  StrSetText(sl,"SLV");
  StrSetText(zh,"CHI");
  StrSetText(zh_Hant,"CHI");
  StrSetText(zh_Hans,"CHI");
  StrSetText(ar,"ARB");
  StrSetText(en_CA,"CAN");
  StrSetText(en_ZA,"SAF");
  StrSetText(af,"SAF");
  StrSetText(et,"EST");
  StrSetText(fa,"FAR");
  StrSetText(he,"HEB");
  StrSetText(lv,"LAT");
  StrSetText(lt,"LIT");
  StrSetText(ro,"ROM");
  StrSetText(sr,"SER");
  StrSetText(uk,"UKR");
  StrSetText(vi,"VIE");
  EndStrSet;

  SetBegin(552);
  SetText(kWantedSubStatusNone,"");
  SetText(kWantedSubStatusBeforeExport,"Before Export");
  SetText(kWantedSubStatusExport,"Export");
  SetText(kWantedSubStatusAfterExport,"After Export");
  SetText(kWantedSubStatusImport,"Import");
  SetText(kWantedSubStatusAfterImport,"After Import");
  SetText(kWantedSubStatusFinishUpdate,"Finish Update");
  SetText(kWantedSubStatusSystemCopyBeforeUpdate,"System Copy Before Update");  
  SetText(kWantedSubStatusStopForExport,"Stop Server Before Export");  
  SetText(kWantedSubStatusSystemCopyDuringUpdate,"System Copy During Update");
  SetText(kWantedSubStatusStartSystemCopiesDuringUpdate,"Start System Copies During Update");  
  SetText(kWantedSubStatusStopSystemCopiesDuringUpdate,"Stop System Copies During Update");  
  SetText(kWantedSubStatusSetCrontabBeforeUpdate,"Set Crontab Before Update");  
  SetText(kWantedSubStatusSetCrontabAfterUpdate,"Set Crontab After Update");  
  SetText(kWantedSubStatusStartSystemCopiesBeforeExport,"Start System Copies Before Export");  
  SetText(kWantedSubStatusDBCopyBeforeUpdate,"HDB Copy Before Update");  
  SetText(kWantedSubStatusStopSlaveSystems,"Stop Slave Systems");  
  EndSet;
  
  SetBegin(553);
  SetText(kSubStatusNone,"");
  SetText(kSubStatusBeforeExport,"Before Export");
  SetText(kSubStatusExporting,"Exporting");
  SetText(kSubStatusExportingCompleted,"Exporting Completed");
  SetText(kSubStatusAfterExport,"After Export");
  SetText(kSubStatusImporting,"Importing");
  SetText(kSubStatusImportingCompleted,"Importing Completed");
  SetText(kSubStatusAfterImport,"After Import");
  SetText(kSubStatusSystemCopyBeforeUpdate,"Copying System Before Update");  
  SetText(kSubStatusSystemCopyBeforeUpdateCompleted,"System Copy Before Update Completed");  
  SetText(kSubStatusStopForExport,"Stopping Server Before Export");  
  SetText(kSubStatusStopForExportCompleted,"Stopped Server Before Export");  
  SetText(kSubStatusSystemCopyDuringUpdate,"Copying System During Update");  
  SetText(kSubStatusSystemCopyDuringUpdateCompleted,"System Copy During Update Completed");  
  SetText(kSubStatusStartingSystemCopiesDuringUpdate,"Starting System Copies");  
  SetText(kSubStatusStoppingSystemCopiesDuringUpdate,"Stopping System Copies");  
  SetText(kSubStatusStartingSystemCopiesDuringUpdateCompleted,"Started System Copies");  
  SetText(kSubStatusStoppingSystemCopiesDuringUpdateCompleted,"Stopped System Copies");  
  SetText(kSubStatusSetCrontabBeforeUpdate,"Setting Crontab Before Update");  
  SetText(kSubStatusSetCrontabAfterUpdate,"Setting Crontab After Update");  
  SetText(kSubStatusSetCrontabBeforeUpdateCompleted,"Setting Crontab Before Update Completed");  
  SetText(kSubStatusSetCrontabAfterUpdateCompleted,"Setting Crontab After Update Completed");  
  SetText(kSubStatusStartingSystemCopiesBeforeExport,"Starting System Copies");  
  SetText(kSubStatusStartingSystemCopiesBeforeExportCompleted,"Started System Copies");  
  SetText(kSubStatusDBCopyBeforeUpdate,"Copying Database");  
  SetText(kSubStatusDBCopyBeforeUpdateCompleted,"Copied Database");  
  SetText(kSubStatusStoppingSlaveSystems,"Stopping Slave Systems");  
  SetText(kSubStatusStoppingSlaveSystemsCompleted,"Stopped Slave Systems");  
  EndSet;

  SetBegin(555);
  SetText(kCheckKeyActionLimitNumberofUsers,"Limit number of Users by");
  EndSet;

  StrSetBegin(556);
  StrSetText(IVVc,"Счёт-фактура");
  StrSetText(IVCashVc,"POS Invoice");
  StrSetText(RestAccVc,"Bar Tab");
  StrSetText(LocationVc,"Склад");
  StrSetText(VATDeclVc,"Декларация НДС");         
  StrSetText(VATRepEUSales,"Отчёт по продажам ЕС НДС");         
  StrSetText(VATRepEUPurchases,"Отчёт по закупкам ЕС НДС");         
  EndStrSet;
  
  SetBegin(557);
  SetText(kXMLExportRowTypeFreeText,"Free Text");
  SetText(kXMLExportRowTypeOpenTag,"Open XML Tag");
  SetText(kXMLExportRowTypeCloseTag,"Close XML Tag");
  SetText(kXMLExportRowTypeTagWithDBField,"XML Tag with Database Field");
  SetText(kXMLExportRowTypeTagWithText,"XML Tag with Text");
  SetText(kXMLExportRowTypeDBField,"Database Field");
  SetText(kXMLExportRowTypeMatrixBegin,"Matrix Start");
  SetText(kXMLExportRowTypeEndMatrix,"Matrix End");
  SetText(kXMLExportRowTypeExportDate,"Export Date");
  SetText(kXMLExportRowTypeExportTime,"Export Time");
  SetText(kXMLExportRowTypeVATPerVATCodeStart,"VAT Per VAT Code Start");
  SetText(kXMLExportRowTypeVATPerVATCodeEnd,"VAT Per VAT Code End");
  SetText(kXMLExportRowTypeVATPerVATNrStart,"НДС по № НДС: Начало"); 
  SetText(kXMLExportRowTypeVATPerVATNrEnd,"НДС по № НДС: Конец"); 
  SetText(kXMLExportRowTypeCalculatedField,"Посчитанное значение");         
//  if (HasLocalization("HRV")) then begin
    SetText(kXMLExportRowTypeCroatianMessageID,"Message ID (Croatian fiscalization)");
    SetText(kXMLExportRowTypeCroatianControlCode,"Control Code (Croatian fiscalization)");
    SetText(kXMLExportRowTypeCroatianDigitalSignature,"Digital Signature (Croatian fiscalization)");
//  end;
  EndSet;

  SetBegin(558);
  SetText(kAppStoreProductStoreNotAccepted,"Not Accepted");
  SetText(kAppStoreProductStoreAccepted,"Accepted");
  SetText(kAppStoreProductStoreForSale,"For Sale");
  SetText(kAppStoreProductStoreNeverSubmit,"Never Submit");
  SetText(kAppStoreProductStoreRemovedfromSale,"Исключить из продажи");         
  EndSet;

  SetBegin(559);
  SetText(kAppStoreProductSubmissionStatusNone,"None");
  SetText(kAppStoreProductSubmissionStatusReview,"Review");
  EndSet;

  SetBegin(560);
  SetText(kAppStoreSubmissionStatusNotSent,"Not Sent");
  SetText(kAppStoreSubmissionStatusSent,"Отправ.");
  SetText(kAppStoreSubmissionStatusAccepted,"Accepted");
  SetText(kAppStoreSubmissionStatusRejected,"Rejected");
  EndSet;

  SetBegin(561);
  SetText(kActionToolAction,"Tool Action");
  SetText(kActionOpenedWindow,"Open Window");
  SetText(kActionClosedWindow,"Close Window");
  SetText(kActionPushButtonAfter,"PushButton After");
  SetText(kActionJavaScriptHal,"JavaScript to Hal");
  SetText(kActionApplicationLostFocus,"Приложение потеряло фокус");         
  SetText(kActionApplicationGainedFocus,"Приложение сфокусировалось");         
  SetText(kActionApplicationCrashed,"Возможен сбой!"); 
  SetText(kActionFirstRecord,"Первая запись"); 
  //SetText(kActionMarketplaceOpen,"Marketplace - Open"); Should be used "Open window" action with proper window name
  //SetText(kActionMarketplaceClose,"Marketplace - Close");
  SetText(kActionMarketplaceAddIN,"Магазин - Добавить подписку"); 
  SetText(kActionMarketplaceRemoveIN,"Магазин - Отменить подписку"); 
  SetText(kActionMarketplaceActivateFreemium,"Магазин - Активировать Фримиум"); 
  SetText(kActionMarketplaceOpenBasket,"Магазин - Открыть корзину"); 
  SetText(kActionMarketplacePaymentStarted,"Магазин - Начать платёж"); 
  SetText(kActionMarketplacePaymentFinished,"Магазин - Завершить платёж"); 
  SetText(kActionMarketplacePaymentFailed,"Магазин - Платёж не удался"); 
  SetText(kActionMarketplaceUnsubscribe,"Магазин - Отписаться"); 
  SetText(kActionMarketplaceFailedAgreement,"Магазин - Отсутствует подтверждение условий"); 
  SetText(kActionMarketplaceRedirToDetails,"Магазин - Переадресован на страницу с подробностями"); 
  SetText(kActionStdStartRegistration,"Магазин - Начало регистрации");  
  SetText(kActionStdFinishRegistration,"Магазин - Оеончание регистрации");  
  SetText(kActionAfterEditField,"Заполнить детали счета-фактуры");  
  SetText(kActionPrintRecord,"печатать счет-фактуру");  
  SetText(kActionPrintRecordFirst,"печатать первый счет-фактуру");  
  SetText(kActionOKRecord,"OK счет-фактура ");  
  SetText(kActionOKRecordFirst,"OK первый счет-фактуру");  
  SetText(kActionRecordCheckError,"Не удалось сохранить запись");  
  SetText(kActionRecordSaved,"Сохранить запись");  
  SetText(kActionRecordUpdated,"Обновление Записи");  
  SetText(kActionFaceTime,"Window Face Time");  
  SetText(kActionFaceTimeWeb,"Web Face Time");  
  SetText(kActionAutomatedSalesOpened,"Automated Sales - Opened"); //!!TRANSLATE
  SetText(kActionAutomatedSalesClosed,"Automated Sales - Closed"); //!!TRANSLATE
  SetText(kActionAutomatedSalesProceed,"Automated Sales - Proceed"); //!!TRANSLATE
  SetText(kActionAutomatedSalesCancelled,"Automated Sales - Cancelled"); //!!TRANSLATE
  SetText(kActionAutomatedSalesRemind,"Automated Sales - Remind Later"); //!!TRANSLATE
  SetText(kActionAutomatedSalesPurchase,"Automated Sales - Purchase"); //!!TRANSLATE
  SetText(kActionAutomatedSalesOpenMarketplace,"Automated Sales - Open Marketplace"); //!!TRANSLATE
  SetText(kActionFirstStartup,"First Startup"); //!!TRANSLATE

  EndSet;

  SetBegin(636);
  SetText(0,"Not included");
  SetText(1,"1");
  SetText(2,"2");
  SetText(3,"3");
  SetText(4,"4");
  SetText(5,"5");
  SetText(6,"6");
  SetText(7,"7");
  SetText(8,"8");
  SetText(9,"9");
  SetText(10,"10");
  SetText(11,"11");
  SetText(12,"12");
  SetText(13,"13");
  SetText(14,"14");
  SetText(15,"15");
  SetText(16,"16");
  SetText(17,"17");
  SetText(18,"18");
  SetText(19,"19");
  SetText(20,"20");
  SetText(21,"21");
  SetText(22,"22");
  SetText(23,"23");
  SetText(24,"24");
  SetText(25,"25");
  SetText(26,"26");
  SetText(27,"27");
  SetText(28,"28");
  SetText(29,"29");
  SetText(30,"30");
  SetText(31,"31");
  SetText(32,"32");
  SetText(33,"33");
  SetText(34,"34");
  SetText(35,"35");
  SetText(36,"36");
  SetText(37,"37");
  SetText(38,"38");
  SetText(39,"39");
  SetText(40,"40");
  SetText(41,"41");
  SetText(42,"42");
  SetText(43,"43");
  SetText(44,"44");
  SetText(45,"45");
  SetText(46,"46");
  SetText(47,"47");
  SetText(48,"48");
  SetText(49,"49");
  SetText(50,"50");
  SetText(51,"51");
  SetText(52,"52");
  SetText(53,"53");
  SetText(54,"54");
  SetText(55,"55");
  SetText(56,"56");
  SetText(57,"57");
  SetText(58,"58");
  SetText(59,"59");
  SetText(50,"50");
  SetText(61,"61");
  SetText(62,"62");
  SetText(63,"63");
  SetText(64,"64");
  SetText(65,"65");
  SetText(66,"66");
  SetText(67,"67");
  SetText(68,"68");
  SetText(69,"69");
  SetText(70,"70");
  SetText(71,"71");
  SetText(72,"72");
  SetText(73,"73");
  SetText(74,"74");
  SetText(75,"75");
  SetText(76,"76");
  SetText(77,"77");
  SetText(78,"78");
  SetText(79,"79");
  SetText(80,"80");
  SetText(81,"81");
  SetText(82,"82");
  SetText(83,"83");
  SetText(84,"84");
  SetText(85,"85");
  SetText(86,"86");
  SetText(87,"87");
  SetText(88,"88");
  SetText(89,"89");
  SetText(90,"90");
  SetText(91,"91");
  SetText(92,"92");
  SetText(93,"93");
  SetText(94,"94");
  SetText(95,"95");
  SetText(96,"96");
  SetText(97,"97");
  SetText(98,"98");
  SetText(99,"99");
  SetText(100,"Highest impact");
  EndSet;

  SetBegin(562);
  SetText(kDAMealProvided,"Предоставлено");
  SetText(kDAMealNotProvided,"Не предоставлено");
  EndSet;

  SetBegin(563);
  SetText(kCYBusinessTypeOther,"-");
  SetText(kCYBusinessTypeRetail,"Retail");
  EndSet;

  SetBegin(564);
  SetText(kStockMovTypeNormal,"Обычный");
  SetText(kStockMovTypeOwnGoodsTransport,"Собственный транспорт");
  SetText(kStockMovTypeConsigment,"Продажи консигнационных запасов");
  SetText(kStockMovTypeThirdEntGoodsTransport,"Перевозчики");
  SetText(kStockMovTypeGlobalTransport,"Глобальный транспорт");
  EndSet;
  
  SetBegin(565);
  SetText(kManagedServerItemEnabler,"Enabler");
  SetText(kManagedServerItemSystemCopy,"System Copy");
  SetText(kManagedServerItemCrontabEntry,"Crontab Entry");  
  SetText(kManagedServerItemParameters,"Parameters");  
  SetText(kManagedServerItemStartMaintenance,"Start in Maintenance");  
  SetText(kManagedServerItemSlaveSystem,"Slave System");  
  SetText(kManagedServerItemReserveSystem,"Резеврная система"); 
  SetText(kManagedServerItemTestSystem,"Тестовая система"); 
  SetText(kManagedServerItemMotherSystem,"Материнская система"); 
  SetText(kManagedServerItemUpdateSystem,"Систма для обновлений"); 
  EndSet;
  
  SetBegin(566);
  SetText(kManagedServerWhenAlways,"Always");
  SetText(kManagedServerWhenRunningNormally,"Running Normaly");  
  SetText(kManagedServerWhenUpdating,"Updating Server");  
  SetText(kManagedServerWhenUpdateBegins,"Update Begins and Server is Running");  
  SetText(kManagedServerWhenUpdateEnds,"Update Ends and Server is Stopped");  
  SetText(kManagedServerWhenUpdateImports,"Importing During Update");  
  SetText(kManagedServerWhenUpdateExports,"Exporting During Update");  
  SetText(kManagedServerWhenRunningMaintenance,"Running in Maintenance");  
  SetText(kManagedServerWhenExportingDatabase,"Exporting Database");  
  SetText(kManagedServerWhenExportingRegister,"Экспортирую регистр...");         
  SetText(kManagedServerWhenExportingCompany,"Экспортирую компанию..."); 
  EndSet;

  SetBegin(567);
  SetText(kAnyClient,"Any Client");
  SetText(kClientWindows,"Windows");
  SetText(kClientOSXCocoa,"Cocoa");
  SetText(kClientiPhone,"iOS");
  SetText(kClientAndroid,"Android");
  SetText(kClientMetro,"Windows 8");
  EndSet;
  
  SetBegin(568);
  SetText(kOpenAttachedWindow,"Open Attached Window");
  EndSet;
  
  SetBegin(569);
  SetText(0,"-");
  SetText(1,"Find Invoice");
  SetText(2,"Create Prepayment");
  EndSet;

  SetBegin(570);
  SetText(kDenominationTypeUnknown,"Unknown");
  SetText(kDenominationTypeOneCent,"1 цент");
  SetText(kDenominationTypeTwoCents,"2 цента");
  SetText(kDenominationTypeFiveCents,"5 центов");
  SetText(kDenominationTypeTenCents,"10 центов");
  SetText(kDenominationTypeFifteenCents,"15 центов");
  SetText(kDenominationTypeTwentyCents,"20 центов");
  SetText(kDenominationTypeTwentyFiveCents,"25 центов"); 
  SetText(kDenominationTypeFiftyCents,"50 центов");
  SetText(kDenominationTypeOne,"1");
  SetText(kDenominationTypeFive,"5");
  SetText(kDenominationTypeTen,"10");
  SetText(kDenominationTypeTwenty,"20");
  SetText(kDenominationTypeFifty,"50");
  SetText(kDenominationTypeHundred,"100");
  SetText(kDenominationTypeTwoHundreds,"200");
  SetText(kDenominationTypeFiveHundreds,"500");
  SetText(kDenominationTypeThousand,"1000");
  SetText(kDenominationTypeTwoThousands,"2000");
  SetText(kDenominationTypeFiveThousands,"5000");
  EndSet;

  SetBegin(571);
  SetText(kExecutableTypeOptimizedDebug,"Optimized Debug");
  SetText(kExecutableTypeDebug,"Debug");
  SetText(kExecutableTypeSlave,"Slave");  
  SetText(kExecutableTypeSlaveDebug,"Slave, Debug"); 
  SetText(kExecutableTypeSlaveOptimizedDebug,"Slave, оптимизированный"); 
  EndSet;

  SetBegin(572);
  SetText(kHalUpdateRuleNotTested,"Not tested");
  SetText(kHalUpdateRuleUseUpdated,"Use updated");
  SetText(kHalUpdateRuleUseCurrent,"Use current");
  SetText(kHalUpdateRuleDoNotUse,"Не использовать");
  EndSet;

  SetBegin(573);
  SetText(kCloudNodeStateUnknown,"Unknown");
  SetText(kCloudNodeStateNormal,"Normal");
  SetText(kCloudNodeStateUpdating,"Updating");
  SetText(kCloudNodeStateGeneralFailure,"Failure");
  SetText(kCloudNodeStateUpdateFailure,"Update Failed");
  SetText(kCloudNodeStateDifferentVersion,"Version Mismatch");
  SetText(kCloudNodeStateCreating,"Создание..."); 
  SetText(kCloudNodeStateStopping,"Остановка..."); 
  SetText(kCloudNodeStateStopped,"Остановлено"); 
  SetText(kCloudNodeStateStarting,"Запуск..."); 
  SetText(kCloudNodeStateTerminating,"Завершение..."); 
  SetText(kCloudNodeStateMoving,"Перемещение..."); 
  SetText(kCloudNodeStateModifying,"Изменение..."); 
  EndSet;

  SetBegin(574);
  SetText(kHansaVersionStateUnknown,"Unknown");
  SetText(kHansaVersionStateNormal,"Up to date");
  SetText(kHansaVersionStateOld,"Out of date");
  SetText(kHansaVersionStateUnavailable,"Unavailable");
//  SetText(kHansaVersionStateChecking,"Checking");
  SetText(kHansaVersionStateUpdating,"Updating");
  SetText(kHansaVersionStateNotDownloaded,"Not downloaded");
  SetText(kHansaVersionStateInstalling,"Installing");
  SetText(kHansaVersionStateDeprecated,"Deprecated");
  SetText(kHansaVersionStateError,"Error");
  EndSet;
  
  SetBegin(575);
  SetText(kComMessageTypeSms,"SMS");
  SetText(kComMessageTypeSkypeChat,"Skype Chat");
  EndSet;

  SetBegin(576);
  SetText(kComMessageSubTypeNotDefined,"Не определено");
  SetText(kComMessageSubTypeSetTopic,"Set Topic");
  SetText(kComMessageSubTypeSaid,"Said");
  SetText(kComMessageSubTypeSawMembers,"Saw Members");
  SetText(kComMessageSubTypeCreatedChatWith,"Created Chat with");
  SetText(kComMessageSubTypeLeft,"Left");
  SetText(kComMessageSubTypePostedContacts,"Posted Contacts");
  SetText(kComMessageSubTypeGapInChat,"Gap in Chat");
  SetText(kComMessageSubTypeSetRole,"Set Role");
  SetText(kComMessageSubTypeKicked,"Kicked");
  SetText(kComMessageSubTypeKickBanned,"Kick Banned");
  SetText(kComMessageSubTypeSetPicture,"Picture");
  SetText(kComMessageSubTypeSetGuideLines,"Set Guide Lines");
  SetText(kComMessageSubTypeUnknown,"Unknown");
  SetText(kComMessageSubTypeSetEmoted,"Emoted");
  SetText(kComMessageSubTypeAddedMembers,"Added Members");  
  SetText(kComMessageSubTypeIncomingPSTN,"Incoming PSTN");  
  SetText(kComMessageSubTypeOutgoingPSTN,"Outgoing PSTN");  
  SetText(kComMessageSubTypeIncomingP2P,"Incoming P2P");  
  SetText(kComMessageSubTypeOutgoingP2P,"Outgoing P2P");  
  EndSet;
  
  SetBegin(577);
  SetText(kMessagePrivacyPrivateImport,"Not Public");
  SetText(kMessagePrivacyPrivateDoNotImport,"Do Not Import");
  SetText(kMessagePrivacyPublic,"Public");
  EndSet;

  SetBegin(578);
  SetText(kBillPaymentPrefNotDecided,"Not Decided");
  SetText(kBillPaymentPrefInvoice,"Счёт-фактура");
  SetText(kBillPaymentPrefCC,"Credit Card");
  SetText(kBillPaymentPrefPaypal,"Paypal"); 
  SetText(kBillPaymentPrefDotpay,"Dotpay"); 
  SetText(kBillPaymentPrefPaytrail,"Paytrail"); 
  SetText(kBillPaymentPrefInvoice,"Счёт-фактура"); 
  SetText(kBillPaymentPrefOrder,"Счёт клиенту"); 
  SetText(kBillPaymentPrefCCorInvoice,"Кредитная карта или счёт-фактура");
  SetText(kBillPaymentPrefInvoiceorCC,"Счёт-фактура или кредитная карта");
  SetText(kBillPaymentPrefPaypalorCC,"Paypal, кредитная карта или счёт-фактура"); 
  SetText(kBillPaymentPrefPaysera,"Paysera"); //!!TRANSLATE
  EndSet;
  
  SetBegin(579);
  SetText(kMapEngineTypeUndefined,"По умолчанию");
  SetText(kMapEngineTypeGoogle,"Google Maps");
  SetText(kMapEngineTypeBing,"Bing Maps");
  EndSet;

  SetBegin(580);
  SetText(0,"Not specified");  
  SetText(1,"Регистрация");  
  SetText(2,"Invitation");  
  EndSet;  

  SetBegin(581);
  SetText(kMessageCopyStatusNotSent,"Not Sent");  
  SetText(kMessageCopyStatusReceived,"Received");  
  SetText(kMessageCopyStatusSent,"Отправ.");  
  EndSet;

  SetBegin(582);
  SetText(kComCallStatusUnknownCallStatus,"Unknown");  
  SetText(kComCallStatusUnplaced,"Unplaced");  
  SetText(kComCallStatusRouting,"Routing");  
  SetText(kComCallStatusEarlymedia,"Earlymedia");  
  SetText(kComCallStatusFailed,"Failed");  
  SetText(kComCallStatusRinging,"Ringing");  
  SetText(kComCallStatusInprogress,"Inprogress");  
  SetText(kComCallStatusOnhold,"Onhold");  
  SetText(kComCallStatusFinished,"Finished");  
  SetText(kComCallStatusMissed,"Missed");  
  SetText(kComCallStatusRefused,"Refused");  
  SetText(kComCallStatusBusy,"Busy");  
  SetText(kComCallStatusCancelled,"Cancelled");  
  SetText(kComCallStatusTransferring,"Transferring");  
  SetText(kComCallStatusTransferred,"Transferred");  
  SetText(kComCallStatusVmBufferingGreeting,"Vm Buffering Greeting");  
  SetText(kComCallStatusVmPlayingGreeting,"Vm Playing Greeting");  
  SetText(kComCallStatusVmRecording,"Vm Recording");  
  SetText(kComCallStatusVmUploading,"Vm Uploading");  
  SetText(kComCallStatusVmSent,"Vm Sent");  
  SetText(kComCallStatusVmCancelled,"Vm Cancelled");  
  SetText(kComCallStatusVmFailed,"Vm Failed");  
  SetText(kComCallStatusWaitingRedialCommand,"Waiting Redial Command");  
  SetText(kComCallStatusRedialPending,"Redial Pending");  
  EndSet;

  SetBegin(583);
  SetText(kHansaVersionUpdateTypeAll,"Replace all files in version"); 
  SetText(kHansaVersionUpdateTypeHOB,"Replace HOBs only"); 
  SetText(kHansaVersionUpdateTypeAU,"Replace Autoupdate Clients and the Slave EXE"); 
  SetText(kHansaVersionUpdateTypeWC,"Replace all Web Client files"); 
  SetText(kHansaVersionUpdateTypeEXE,"Replace all EXEs"); 
  SetText(kHansaVersionUpdateTypeHOBEXE,"Replace HOBs and Autoupdate Clients"); 
  SetText(kHansaVersionUpdateTypeEXEAU,"Replace all EXEs and Autoupdate Clients"); 
  EndSet;

  StrSetBegin(584);
  StrSetText(ActVc,"Детяельности"); 
  StrSetText(IntProjManActVc,"Детяельности по проекту"); 
  StrSetText(IntProjManToDoActVc,"Сделать"); 
  StrSetText(KitchenOrderVc,"Заказы на кухню");         
  StrSetText(OYVc,"Возможности"); 
  StrSetText(PRVc,"Проекты"); 
  StrSetText(QTVc,"Счета клиентам");         
  StrSetText(ORVc,"Счета клиентам");         
  EndStrSet;

  SetBegin(585);
  SetText(khtmlColourBlack,"Чёрный");         
  SetText(khtmlColourRed,"Красный");         
  SetText(khtmlColourGreen,"Зелёный");         
  SetText(khtmlColourDeepBlue,"Тёмно-синий");         
  SetText(khtmlColourPastelBlue,"Голубой");         
  SetText(khtmlColourPastelPurple,"Сиреневый");         
  SetText(khtmlColourPastelYellowGreen,"Жёлто-зелёный");         
  SetText(khtmlColourPastelGreen,"Зелёный");         
  SetText(khtmlColourLime,"Лайм");         
  SetText(khtmlColourSkyBlue,"Небесно-голубой");         
  SetText(khtmlColourBlue,"Синий");         
  SetText(khtmlColourDeepPurple,"Фиолетовый");         
  SetText(khtmlColourTiredGold,"Золотой");         
  SetText(khtmlColourCoffee,"Кофе");         
  SetText(khtmlColourChocolate,"Коричневый");         
  SetText(khtmlColourOrange,"Оранжевый");         
  SetText(khtmlColourPlum,"Сливовый");         
  SetText(khtmlColourNightShade,"Ночное небо");         
  SetText(khtmlColourDeepForest,"Лес");         
  SetText(khtmlColourFlamingo,"Розовый");         
  SetText(khtmlColourGray,"Серый");         
  EndSet;

  SetBegin(586); //subset of set 1
  SetText(kAccessLevelNone,"Нет");         
  SetText(kAccessLevelFull,"Полный");         
  EndSet;

  SetBegin(587);
  SetText(kAsteriskEventSoundQueueStart,"Первичное сообщение очереди");         
  SetText(kAsteriskEventSoundLineBusy,"Линия занята");         
  SetText(kAsteriskEventSoundIVRClosed,"Меню закрыто");         
  SetText(kAsteriskEventSoundIVRStart,"Сообщение меню");         
  SetText(kAsteriskEventSoundMusicOnHold,"Музыка остановлена");         
  SetText(kAsteriskEventSoundLineClosed,"Очередь закрыта");         
//  SetText(kAsteriskEventSoundWelcome,"Добро пожаловать"); //currently not used
  EndSet;
  
  SetBegin(588);
  SetText(0,"Нормализованно");         
  SetText(1,"Выходные");         
  SetText(2,"#Bank Holidays#");         
  SetText(3,"Понедельник");         
  SetText(4,"Вторник");         
  SetText(5,"Среда");         
  SetText(6,"Четверг");         
  SetText(7,"Пятница");         
  SetText(8,"Суббота");         
  SetText(9,"Воскресенье");         
  EndSet;
  
  SetBegin(589);
  SetText(kTXServerErrorTypeEInvoiceStopped,"Ошибка электронного счёта");         
  SetText(kTXServerErrorTypeEMailQueueStopped,"Ошибка очережи электронных счетов");         
  EndSet;
  
  SetBegin(590);
  SetText(kBaseCurrency1,"Основная валюта 1");         
  SetText(kBaseCurrency2,"Основная валюта 2"); 
  SetText(kBaseCurrencySpecified,"Из спецификации"); 
  EndSet;
  
  StrSetBegin(591);
  StrSetText(All,"Все");         
  StrSetText(TRVc,"Транзакции");         
  StrSetText(VIVc,"Счета по закупкам");         
  StrSetText(IVVc,"Счета по продажам");         
  StrSetText(ActVc,"Деятельности");         
  StrSetText(Other,"Другие");         
  EndStrSet;  
  
  SetBegin(592);
  SetText(0,"Открыть");         
  SetText(1,"Не предупреждать");         
  EndSet;
  
  SetBegin(593);
  SetText(kPaypalAddressNone,"-"); 
  SetText(kPaypalAddress1,"Адрес 1"); 
  SetText(kPaypalAddress2,"Адрес 2"); 
  SetText(kPaypalAddress3,"Адрес 3"); 
  SetText(kPaypalAddress4,"Адрес 4"); 
  SetText(kPaypalAddress5,"Адрес 5"); 
  EndSet;

  SetBegin(594);
  SetText(kAmountIncludingVAT,"Включая #VAT#"); 
  SetText(kAmountExcludingVAT,"Исключая #VAT#"); 
  EndSet;

  SetBegin(595);//look at Set 385
  SetText(kUserDefRepPeriodTypeFromColumnsDefintion,"Из определения столбцов"); 
  SetText(kUserDefRepPeriodTypeMonth,"Месяц"); 
  SetText(kUserDefRepPeriodTypeYear,"Год"); 
  SetText(kUserDefRepPeriodTypeFiscalYearToDate,"Финансовый год до Даты"); 
  SetText(kUserDefRepPeriodTypeFiscalYear,"Финансовый год"); 
  EndSet;

  SetBegin(596);
  SetText(kArchiveFileTypeUnknown,"Неизвестно"); 
  SetText(kArchiveFileTypeTextBackup,"Текстовая резервная копия"); 
  SetText(kArchiveFileTypeDataFolder,"Папка программы"); 
  SetText(kArchiveFileTypeHDB,"Файл БД"); 
  SetText(kArchiveFileTypeAttachments,"Архив приложений"); 
  SetText(kArchiveFileTypeHal,"Доработки и патчи на HAL"); 
  SetText(kArchiveFileTypeWebcust,"Веб-файлы"); 
  SetText(kArchiveFileTypeRCSr,"Запись сервера Cloud Controller"); 
  EndSet;

  SetBegin(597);
  SetText(kArchiveFileStateUnknown,"Неизвестно"); 
  SetText(kArchiveFileStatePendingArchiving,"Ожидание"); 
  SetText(kArchiveFileStateArchivingingLocally,"Сжатие..."); 
  SetText(kArchiveFileStateLocal,"Доступно локально"); 
  SetText(kArchiveFileStateUploadingToLongTerm,"Перенос в долгосрочный архив..."); 
  SetText(kArchiveFileStateLocalAndLongTerm,"Доступно локально и в долгосрочном архиве."); 
  SetText(kArchiveFileStateLongTerm,"Доступно в долгосрочном архиве."); 
  SetText(kArchiveFileStateDeleted,"Deleted"); //!!TRANSLATE
  EndSet;

  SetBegin(598);
  SetText(kEmailValidationStateNotValidated,"Не утверждены"); 
  SetText(kEmailValidationStatePending,"Ожидание"); 
  SetText(kEmailValidationStateSent,"Отправлено"); 
  SetText(kEmailValidationStateSucceeded,"Эл. адрес верен"); 
  SetText(kEmailValidationStateFailed,"Эл. адрес неверен"); 
  EndSet;

  SetBegin(599);
  SetText(kServerTypeNormal,"Обычный сервер"); 
  SetText(kServerTypeCloudController,"Cloud Controller"); 
  SetText(kServerTypeCloudNode,"Облачный узел"); 
  SetText(kServerTypeCloudExporter,"Cloud Exporter"); 
  SetText(kServerTypeStandardID,"Стандарт ID"); 
  SetText(kServerTypeHansaMail,"HansaMail"); //!!TRANSLATE
  SetText(kServerTypeLicensingServer,"Licensing Server"); //!!TRANSLATE
  SetText(kServerTypeMyStandard,"My Standard"); //!!TRANSLATE
  SetText(kServerTypeStandardInstall,"Standard Install"); //!!TRANSLATE
  SetText(kServerTypePresence,"Presence"); //!!TRANSLATE
  SetText(kServerTypeLogActions,"Log Actions"); //!!TRANSLATE
  SetText(kServerTypeDownloads,"Downloads"); //!!TRANSLATE
  EndSet;

  SetBegin(600);
  SetText(kAvailableAppOSiOS,"iOS"); 
  SetText(kAvailableAppOSAndroid,"Android"); 
  SetText(kAvailableAppOSMacOSX,"Mac OS X"); 
  SetText(kAvailableAppOSWindows,"Windows"); 
  SetText(kAvailableAppOSWindowsNET,"Windows .NET"); 
  SetText(kAvailableAppOSWindows8,"Windows 8"); 
  SetText(kAvailableAppOSLinux,"Linux"); 
  SetText(kAvailableAppOSWindows8ARM,"Windows 8 ARM"); 
  SetText(kAvailableAppOSWindows8x86,"Windows 8 x86"); 
  SetText(kAvailableAppOSWindows8x64,"Windows 8 x64"); 
  SetText(kAvailableAppOSWindowsx32,"Windows x32"); 
  SetText(kAvailableAppOSWindowsx64,"Windows x64"); 
  SetText(kAvailableAppOSMacAppStore,"Mac AppStore"); //!!TRANSLATE
  SetText(kAvailableAppiOSAppStoreIRL,"iOS AppStore"); //!!TRANSLATE
  SetText(kAvailableAppOSHAL,"HAL"); //!!TRANSLATE
  EndSet;

  SetBegin(601);
  SetText(kPlatformUnknown,"Неизвестно"); 
  SetText(kPlatformMac,"Mac OS X"); 
  SetText(kPlatformWindows32,"Windows (32 бит)"); 
  SetText(kPlatformWindows64,"Windows (64 бит)"); 
  SetText(kPlatformLinux32,"Linux (32 бит)"); 
  SetText(kPlatformLinux64,"Linux (64 бит)"); 
  EndSet;

  SetBegin(602);
  SetText(kCampaignStatusPending,"Ожидает"); 
  SetText(kCampaignStatusStarted,"Начато"); 
  SetText(kCampaignStatusFinished,"Завершено"); 
  EndSet;

  SetBegin(603);
  SetText(kCampaignRowCodeTypeLead,"Лид"); 
  SetText(kCampaignRowCodeTypeCU,"Контакт"); 
  EndSet;

  SetBegin(604);
  SetText(kServiceUsageStatusCreated,"Создано"); 
  SetText(kServiceUsageStatusSent,"Отправлено"); 
  SetText(kServiceUsageStatusInvoiced,"Отфактурировано"); 
  SetText(kServiceUsageStatusPickedByLookup,"Подхвачено поисковым механизмом"); 
  EndSet;

  SetBegin(605);
  SetText(kWatchpointDiskspaceLow,"Менее (Мб)"); 
  SetText(kWatchpointNotRunning,"Длительность (минут)"); 
  SetText(kWatchpointNotResponding,"Длительность (секунд)"); 
  SetText(kWatchpointIntentionallyNotRunning,"Длительность (минут)"); 
  EndSet;

  SetBegin(606);
  SetText(kWatchpointStatusNone,"Нет");
  SetText(kWatchpointStatusCheck,"Проверка");
  //SetText(kWatchpointDurationSent,"Message Sent (old)");
  SetText(kWatchpointStatusCancelled,"Отменено");
  SetText(kWatchpointStatusActive,"Активно"); 
  SetText(kWatchpointStatusSolved,"Разрешено"); 
  SetText(kWatchpointStatusSolvedAuto,"Разрешено автоматически"); 
  EndSet;

  SetBegin(607);
  SetText(kStockItemTypeNotDefined,"Не определено"); 
  SetText(kStockItemTypeMerchandise,"Товар"); 
  SetText(kStockItemTypeRawMaterials,"Сырьё"); 
  SetText(kStockItemTypePartOf,"Часть другого продукта"); 
  SetText(kStockItemTypeScrap,"Отходы/лом"); 
  SetText(kStockItemTypeWIP,"Работа в процессе"); 
  EndSet;

  SetBegin(608);
  SetText(kCloudMigrationStatusTryLater,"Попробуйте позже"); 
  SetText(kCloudMigrationStatusRequested,"Запрошено");
  SetText(kCloudMigrationStatusReceivingFile,"Получаю файл");
  SetText(kCloudMigrationStatusProcessing,"Обрабатываю..."); 
  SetText(kCloudMigrationStatusUpdating,"Обновляю..."); 
  SetText(kCloudMigrationStatusCompleted,"Завершено");
  SetText(kCloudMigrationStatusFailed,"Не удалось");
  SetText(kCloudMigrationStatusAllocFailed,"Не удалось разместить сервер"); 
  EndSet;

  SetBegin(609);
  SetText(kTaxInvTypeNormal,"Нормальное"); 
  SetText(kTaxInvTypeReceipt,"Поступление"); 
  SetText(kTaxInvTypeLiquidation,"Погашение"); 
  EndSet;

  /* The 610 set is for debug use only, not for UI */
  SetBegin(610);
  SetText(kHansaWorldIDUndefined,"Не определено"); 
  SetText(kHansaWorldIDInvalidEMail,"Этот адрес электронной почты неверен."); 
  SetText(kHansaWorldIDCreatedAndLoggedIn,"HansaWorld ID создан; вход выполнен."); 
  SetText(kHansaWorldIDCreatedButNotLoggedIn,"HansaWorld ID создан, но вход не может быть выполнен"); 
  SetText(kHansaWorldIDNotCreated,"Невозможно создать HansaWorld ID"); 
  SetText(kHansaWorldIDAlreadyExists,"HansaWorld ID уже существует"); 
  SetText(kHansaWorldIDWrongPassword,"Пароль указан неверно"); // not for UI, use string 27578 instead 
  SetText(kHansaWorldIDNotFound,"HansaWorld ID указан неверно"); // not for UI, use string 27578 instead 
  SetText(kHansaWorldIDAlreadyLoggedIn,"Вход с данного HansaWorld ID уже выполнен"); 
  SetText(kHansaWorldIDLoggedIn,"Вход успешно выполнен"); 
  SetText(kHansaWorldIDLoggedOut,"Выполнен выход Вашего HansaWorld ID"); 
  SetText(kHansaWorldIDAlreadyLoggedOut,"HansaWorld ID уже активен"); 
  SetText(kHansaWorldIDNotLoggedIn,"HansaWorld ID не активен"); 
  SetText(kHansaWorldIDTryAgain,"Сервер не отвечает. Пожалуйста повторите попытку"); 
  EndSet;
  
  StrSetBegin(611);
  StrSetText(AGO,"ago"); 
  StrSetText(ARE,"arb");
  StrSetText(ARG,"esp"); 
  StrSetText(AUS,"aus"); 
  StrSetText(BOL,"bol"); 
  StrSetText(BHR,"bhr"); 
  StrSetText(BRA,"bra"); 
  StrSetText(CAN,"can,frc"); 
  StrSetText(CHN,"chi"); 
  StrSetText(CHL,"chl"); //!!TRANSLATE
  StrSetText(COL,"col"); //!!TRANSLATE
  StrSetText(CRI,"cri"); 
  StrSetText(HRV,"cro"); 
  StrSetText(CZE,""); 
  StrSetText(DEN,"dan"); 
  StrSetText(DZA,"dza"); 
  StrSetText(EGY,"egy"); 
  StrSetText(SLV,"slv"); 
  StrSetText(EST,"est"); 
  StrSetText(FIN,"fin,swe"); 
  StrSetText(FRA,"fra,frc"); 
  StrSetText(DEU,"ger"); 
  StrSetText(GBR,""); 
  StrSetText(GTM,"gtm"); 
  StrSetText(HND,"hnd"); 
  StrSetText(ITA,"ita"); 
  StrSetText(JOR,"jor"); 
  StrSetText(KEN,"kee"); 
  StrSetText(KWT,"kwt"); 
  StrSetText(LBN,"lbn"); 
  StrSetText(LVA,"lat"); 
  StrSetText(LTU,"lit"); 
  StrSetText(MEX,"mex"); 
  StrSetText(MOZ,"moz"); 
  StrSetText(NIC,"nic"); 
  StrSetText(NOR,"nor"); 
  StrSetText(OMN,"omn"); 
  StrSetText(PAN,"pan"); 
  StrSetText(POL,"pol"); 
  StrSetText(PRT,"por"); 
  StrSetText(QAT,"qat"); 
  StrSetText(RUS,"rus"); 
  StrSetText(SAU,"sau"); 
  StrSetText(SRB,"ser"); 
  StrSetText(SGP,"sgp"); 
  StrSetText(SVN,"slo"); 
  StrSetText(ZAF,"saf"); 
  StrSetText(ESP,""); 
  StrSetText(SWE,"swe"); 
  StrSetText(UKR,"ukr"); 
  StrSetText(YEM,"yem"); 
  StrSetText(USA,"usa,uss"); 
  StrSetText(ZWE,"zwe"); 
  EndStrSet;

  SetBegin(612);
  SetText(kCourseMediaTypeNone,"-"); 
  SetText(kCourseMediaTypeFile,"Файл"); 
  SetText(kCourseMediaTypeVideo,"Видео"); 
  EndSet;

  SetBegin(613);//update set 543
  SetText(kWebPaymentMethodCC,"Кредитная карта"); 
  SetText(kWebPaymentMethodInvoice,"Счёт-фактура"); 
  SetText(kWebPaymentMethodPaypal,"Paypal"); 
  SetText(kWebPaymentMethodDotpay,"Dotpay"); 
  SetText(kWebPaymentMethodPaytrail,"Paytrail"); 
  SetText(kWebPaymentMethodOrder,"Счёт клиенту"); 
  SetText(kWebPaymentMethodPaysera,"Paysera"); //!!TRANSLATE
  EndSet;

  SetBegin(614);
  // When adding to this list, also add to haldefs.h and to ainternal/ruslish/startup.hal set 10005
  SetText(kHostingPartnerEurope,"HansaWorld Европа");
  SetText(kHostingPartnerAustralia,"HansaWorld Австралия");
  SetText(kHostingPartnerPortugal,"HansaWorld Португалия"); 
  SetText(kHostingPartnerUSA,"HansaWorld США");
  SetText(kHostingPartnerExcellent,"Excellent Business Solutions");
  SetText(kHostingPartnerBurti,"Burti Ltd.");
  SetText(kHostingPartnerAvone,"Avone IT");
  SetText(kHostingPartnerFinland,"HansaWorld Finland");
  SetText(kHostingPartnerTest,"HansaWorld Test");
  SetText(kHostingPartnerLatvia,"HansaWorld Latvia");
  SetText(kHostingPartnerX3msoft,"X3msoft");
  SetText(kHostingPartnerMWeb,"MWEB Интернет услуги"); 
  SetText(kHostingPartnerScaleTest,"HansaWorld Тест (Крупный масштаб)"); 
  SetText(kHostingPartnerSIL,"IT System Integrators Limited"); //!!TRANSLATE
  EndSet;

  StrSetBegin(615);
  StrSetText(AGO,"Ангола"); 
  StrSetText(ARE,"Объединённые Арабские Эмираты"); 
  StrSetText(ARG,"Аргентина"); 
  StrSetText(AUS,"Австралия"); 
  StrSetText(BOL,"Боливия"); 
  StrSetText(BHR,"Бахрейн"); 
  StrSetText(BRA,"Бразилия"); 
  StrSetText(CAN,"Канада"); 
  StrSetText(CHN,"Китай"); 
  StrSetText(CHL,"Chile"); //!!TRANSLATE
  StrSetText(COL,"Colombia"); //!!TRANSLATE
  StrSetText(CRI,"Коста Рика"); 
  StrSetText(HRV,"Хорватия"); 
  StrSetText(CZE,"Чехия"); 
  StrSetText(DEN,"Дания"); 
  StrSetText(DZA,"Алжир"); 
  StrSetText(EGY,"Египет"); 
  StrSetText(SLV,"Сальвадор"); 
  StrSetText(EST,"Эстония"); 
  StrSetText(FIN,"Финляндия"); 
  StrSetText(FRA,"Франция"); 
  StrSetText(DEU,"Германия"); 
  StrSetText(GBR,"Великобритания"); 
  StrSetText(GTM,"Гватемала"); 
  StrSetText(HND,"Гондурас"); 
  StrSetText(ITA,"Италия"); 
  StrSetText(JOR,"Иордания"); 
  StrSetText(KEN,"Кения"); 
  StrSetText(KWT,"Кувейт"); 
  StrSetText(LBN,"Ливан"); 
  StrSetText(LVA,"Латвия"); 
  StrSetText(LTU,"Литва"); 
  StrSetText(MEX,"Мексика"); 
  StrSetText(MOZ,"Мозамбийский"); 
  StrSetText(NIC,"Никарагуа"); 
  StrSetText(NOR,"Норвегия"); 
  StrSetText(OMN,"Оман"); 
  StrSetText(PAN,"Панама"); 
  StrSetText(POL,"Польша"); 
  StrSetText(PRT,"Португалия"); 
  StrSetText(QAT,"Катар"); 
  StrSetText(RUS,"Россия"); 
  StrSetText(SAU,"Саудовская Аравия"); 
  StrSetText(SRB,"Сербия"); 
  StrSetText(SGP,"Сингапур"); 
  StrSetText(SVN,"Словения"); 
  StrSetText(ZAF,"Южная Африка"); 
  StrSetText(ESP,"Испания"); 
  StrSetText(SWE,"Швеция"); 
  StrSetText(UKR,"Украина"); 
  StrSetText(YEM,"Йемен"); 
  StrSetText(USA,"Соединённые Штаты Америки"); 
  StrSetText(ZWE,"Зимбабве"); 
  EndStrSet;

  SetBegin(616);
  SetText(kWatchointContactStatusNone,"Активен");
  SetText(kWatchointContactStatusUrgentDealing,"Срочно, и я работаю над этим в настоящее время");  
  SetText(kWatchointContactStatusUrgentBusy,"Срочно, но я не могу работать над этим прямо сейчас");  
  SetText(kWatchointContactStatusDealDay,"Не Срочно, и я буду работать над этим в течение дня");  
  SetText(kWatchointContactStatusDealHours,"Не Срочно, и я буду работать над этим в течение нескольких часов");  
  SetText(kWatchointContactStatusBusy,"Не Срочно, и я буду работать над этим прямо сейчас");  
  EndSet;

  SetBegin(617); //reserved for 82
  SetText(kEditFieldAccessDontHide,"Показать");  
  SetText(kEditFieldAccessHide,"Скрыть");  
  SetText(kEditFieldAccessHideIfNotEmpty,"Скрыть, если не пусто");
  EndSet;

  SetBegin(618); //reserved for 82
  SetText(kEditFieldAccessFieldDefault,"По умолчанию");  
  SetText(kEditFieldAccessFieldMandatory,"Обязательно");  
  EndSet;

  SetBegin(619);
  SetText(LangEnglish,"ENG");
  SetText(LangFrench,"FRA");
  SetText(LangGerman,"GER");
  SetText(LangItalian,"ITA");
  SetText(LangSwedish,"SWE");
  SetText(LangSpanish,"ESP");
  SetText(LangDanish,"DAN");
  SetText(LangPortuguese,"POR");
  SetText(LangNorwegian,"NOR");
  SetText(LangArabic,"ARB");
  SetText(LangFinnish,"FIN");
  SetText(LangIcelandic,"ICE");
  SetText(LangItalian,"ITA");
  SetText(LangLithuanian,"LIT");
  SetText(LangPolish,"POL");
  SetText(LangHungarian,"HUN");
  SetText(LangEstonian,"EST");
  SetText(LangLatvian,"LAT");
  SetText(LangRussian,"RUS");
  SetText(LangRomanian,"ROM");
  SetText(LangCzech,"CZE");
  SetText(LangSlovak,"SVK");
  SetText(LangSlovenian,"SLO");
  SetText(LangSerbian,"SER");
  SetText(LangUkrainian,"UKR");
  SetText(LangBrazilian,"BRA");
  SetText(LangVietnamese,"VIE");
  SetText(LangCanadian,"CAN");
  SetText(LangCroatian,"CRO");
  SetText(LangTurkish,"TUR");
  SetText(LangUSA,"USA");
  SetText(LangAngolanPortuguese,"AGO");
  SetText(LangMozambicanPortuguese,"MOZ"); 
  EndSet;

  SetBegin(620); //reserved for 82
  SetText(0,"Финансовые операции");  
  SetText(IVYc,"счет-фактура Реализации");  
  SetText(IPYc,"Чеки");  
  SetText(VIYc,"Сч/ф поставщиков");  
  SetText(OPYc,"Платежи");  
  EndSet;

  SetBegin(621); //reserved for 82
  SetText(kBankTRFileColumnUnassigned,"Не назначено");  
  SetText(kBankTRFileColumnDate,"Дата");  
  SetText(kBankTRFileColumnTime,"Время");  
  SetText(kBankTRFileColumnName,"Имя");  
  SetText(kBankTRFileColumnType,"Тип");  
  SetText(kBankTRFileColumnStatus,"Статус");  
  SetText(kBankTRFileColumnCurrency,"Валюта");  
  SetText(kBankTRFileColumnAmount,"Кол-во");  
  SetText(kBankTRFileColumnReceipID,"Получение ID");  
  SetText(kBankTRFileColumnBalance,"Баланс");  
  SetText(kBankTRFileColumnComment,"Комментарий");  
  SetText(kBankTRFileColumnBankAcc,"Банковский счёт");  
  SetText(kBankTRFileColumnReference,"Ссылка");  
  EndSet;

  SetBegin(622); //reserved for 82
  SetText(kPOSActionNone,"Никто");  
  SetText(kPOSActionAddInvoiceRow,"Добавить ряд в счете-фактуре ");  
  SetText(kPOSActionChangeInvoiceRowPrice,"Обновить ряд в счете-фактуре");  
  SetText(kPOSActionVoidInvoiceRow,"Отмен ряд в счете-фактуре");  
  SetText(kPOSActionDeleteInvoiceRow,"Удалить ряд в счете-фактуре");  
  SetText(kPOSActionPrintInvoice,"Печатать счет-фактуру ");  
  SetText(kPOSActionPrintInvoiceCopy,"Печатать копию счета-фактуры");  
  SetText(kPOSActionPrintProformaInvoice,"Печатать счёт-проформу");  
  SetText(kPOSActionPrintProformaInvoiceCopy,"Печатать копию счёта-проформы");  
  SetText(kPOSActionPayInvoiceCash,"Оплата наличными");  
  SetText(kPOSActionPayInvoiceCC,"Оплата Кредитной картой");  
  SetText(kPOSActionPayInvoiceGV,"Оплата Подарочным сертификатом");  
  SetText(kPOSActionPrintXReport,"X отчёт");  
  SetText(kPOSActionPrintZReport,"Z отчёт");  
  SetText(kPOSActionOpenDrawer,"Открыть секцию");  
  SetText(kPOSActionOpenBarTab,"Открыть Bar Tab");  
  SetText(kPOSActionCloseBarTab,"Закрыть Bar Tab");  
  EndSet;

  SetBegin(623);
  SetText(kCurrencyGenderMasculin,"Мужской");  
  SetText(kCurrencyGenderFeminine,"Женский");  
  EndSet;

  SetBegin(624);
  SetText(kSearchModeDefault,"По умолчанию");  
  SetText(kSearchModeFilter,"Фильтр");  
  SetText(kSearchModePosition,"Позиция");  
  EndSet;

  SetBegin(625);
  SetText(kWatchointEscalateLevel1,"Уровень 1");  
  SetText(kWatchointEscalateLevel2,"Уровень 2");  
  SetText(kWatchointEscalateLevel3,"Уровень 3");  
  EndSet;

  SetBegin(626);
  SetText(kOrderTypeDefault,"По умолчанию"); 
  SetText(kOrderTypeNormal,"Нормальный"); 
  SetText(kOrderTypeDropShip,"прямая поставка"); 
  EndSet;

  StrSetBegin(627); // ISO 3166-1 alpha-2 to alpha-3 table
  StrSetText(AF,"AFG"); // Afghanistan
  StrSetText(AX,"ALA"); // Aland Islands
  StrSetText(AL,"ALB"); // Albania
  StrSetText(DZ,"DZA"); // Algeria
  StrSetText(AS,"ASM"); // American Samoa
  StrSetText(AD,"AND"); // Andorra
  StrSetText(AO,"AGO"); // Angola
  StrSetText(AI,"AIA"); // Anguilla
  StrSetText(AQ,"ATA"); // Antarctica
  StrSetText(AG,"ATG"); // Antigua and Barbuda
  StrSetText(AR,"ARG"); // Argentina
  StrSetText(AM,"ARM"); // Armenia
  StrSetText(AW,"ABW"); // Aruba
  StrSetText(AU,"AUS"); // Australia
  StrSetText(AT,"AUT"); // Austria
  StrSetText(AZ,"AZE"); // Azerbaijan
  StrSetText(BS,"BHS"); // Bahamas
  StrSetText(BH,"BHR"); // Bahrain
  StrSetText(BD,"BGD"); // Bangladesh
  StrSetText(BB,"BRB"); // Barbados
  StrSetText(BY,"BLR"); // Belarus
  StrSetText(BE,"BEL"); // Belgium
  StrSetText(BZ,"BLZ"); // Belize
  StrSetText(BJ,"BEN"); // Benin
  StrSetText(BM,"BMU"); // Bermuda
  StrSetText(BT,"BTN"); // Bhutan
  StrSetText(BO,"BOL"); // Bolivia
  StrSetText(BA,"BIH"); // Bosnia and Herzegovina
  StrSetText(BW,"BWA"); // Botswana
  StrSetText(BV,"BVT"); // Bouvet Island
  StrSetText(BR,"BRA"); // Brazil
  StrSetText(VG,"VGB"); // British Virgin Islands
  StrSetText(IO,"IOT"); // British Indian Ocean Territory
  StrSetText(BN,"BRN"); // Brunei Darussalam
  StrSetText(BG,"BGR"); // Bulgaria
  StrSetText(BF,"BFA"); // Burkina Faso
  StrSetText(BI,"BDI"); // Burundi
  StrSetText(KH,"KHM"); // Cambodia
  StrSetText(CM,"CMR"); // Cameroon
  StrSetText(CA,"CAN"); // Canada
  StrSetText(CV,"CPV"); // Cape Verde
  StrSetText(KY,"CYM"); // Cayman Islands
  StrSetText(CF,"CAF"); // Central African Republic
  StrSetText(TD,"TCD"); // Chad
  StrSetText(CL,"CHL"); // Chile
  StrSetText(CN,"CHN"); // China
  StrSetText(HK,"HKG"); // Hong Kong, Special Administrative Region of China
  StrSetText(MO,"MAC"); // Macao, Special Administrative Region of China
  StrSetText(CX,"CXR"); // Christmas Island
  StrSetText(CC,"CCK"); // Cocos (Keeling) Islands
  StrSetText(CO,"COL"); // Colombia
  StrSetText(KM,"COM"); // Comoros
  StrSetText(CG,"COG"); // Congo (Brazzaville)
  StrSetText(CD,"COD"); // Congo, Democratic Republic of the
  StrSetText(CK,"COK"); // Cook Islands
  StrSetText(CR,"CRI"); // Costa Rica
  StrSetText(CI,"CIV"); // Cte d'Ivoire
  StrSetText(HR,"HRV"); // Croatia
  StrSetText(CU,"CUB"); // Cuba
  StrSetText(CY,"CYP"); // Cyprus
  StrSetText(CZ,"CZE"); // Czech Republic
  StrSetText(DK,"DNK"); // Denmark
  StrSetText(DJ,"DJI"); // Djibouti
  StrSetText(DM,"DMA"); // Dominica
  StrSetText(DO,"DOM"); // Dominican Republic
  StrSetText(EC,"ECU"); // Ecuador
  StrSetText(EG,"EGY"); // Egypt
  StrSetText(SV,"SLV"); // El Salvador
  StrSetText(GQ,"GNQ"); // Equatorial Guinea
  StrSetText(ER,"ERI"); // Eritrea
  StrSetText(EE,"EST"); // Estonia
  StrSetText(ET,"ETH"); // Ethiopia
  StrSetText(FK,"FLK"); // Falkland Islands (Malvinas)
  StrSetText(FO,"FRO"); // Faroe Islands
  StrSetText(FJ,"FJI"); // Fiji
  StrSetText(FI,"FIN"); // Finland
  StrSetText(FR,"FRA"); // France
  StrSetText(GF,"GUF"); // French Guiana
  StrSetText(PF,"PYF"); // French Polynesia
  StrSetText(TF,"ATF"); // French Southern Territories
  StrSetText(GA,"GAB"); // Gabon
  StrSetText(GM,"GMB"); // Gambia
  StrSetText(GE,"GEO"); // Georgia
  StrSetText(DE,"DEU"); // Germany
  StrSetText(GH,"GHA"); // Ghana
  StrSetText(GI,"GIB"); // Gibraltar
  StrSetText(GR,"GRC"); // Greece
  StrSetText(GL,"GRL"); // Greenland
  StrSetText(GD,"GRD"); // Grenada
  StrSetText(GP,"GLP"); // Guadeloupe
  StrSetText(GU,"GUM"); // Guam
  StrSetText(GT,"GTM"); // Guatemala
  StrSetText(GG,"GGY"); // Guernsey
  StrSetText(GN,"GIN"); // Guinea
  StrSetText(GW,"GNB"); // Guinea-Bissau
  StrSetText(GY,"GUY"); // Guyana
  StrSetText(HT,"HTI"); // Haiti
  StrSetText(HM,"HMD"); // Heard Island and Mcdonald Islands
  StrSetText(VA,"VAT"); // Holy See (Vatican City State)
  StrSetText(HN,"HND"); // Honduras
  StrSetText(HU,"HUN"); // Hungary
  StrSetText(IS,"ISL"); // Iceland
  StrSetText(IN,"IND"); // India
  StrSetText(ID,"IDN"); // Indonesia
  StrSetText(IR,"IRN"); // Iran, Islamic Republic of
  StrSetText(IQ,"IRQ"); // Iraq
  StrSetText(IE,"IRL"); // Ireland
  StrSetText(IM,"IMN"); // Isle of Man
  StrSetText(IL,"ISR"); // Israel
  StrSetText(IT,"ITA"); // Italy
  StrSetText(JM,"JAM"); // Jamaica
  StrSetText(JP,"JPN"); // Japan
  StrSetText(JE,"JEY"); // Jersey
  StrSetText(JO,"JOR"); // Jordan
  StrSetText(KZ,"KAZ"); // Kazakhstan
  StrSetText(KE,"KEN"); // Kenya
  StrSetText(KI,"KIR"); // Kiribati
  StrSetText(KP,"PRK"); // Korea, Democratic People's Republic of
  StrSetText(KR,"KOR"); // Korea, Republic of
  StrSetText(KW,"KWT"); // Kuwait
  StrSetText(KG,"KGZ"); // Kyrgyzstan
  StrSetText(LA,"LAO"); // Lao PDR
  StrSetText(LV,"LVA"); // Latvia
  StrSetText(LB,"LBN"); // Lebanon
  StrSetText(LS,"LSO"); // Lesotho
  StrSetText(LR,"LBR"); // Liberia
  StrSetText(LY,"LBY"); // Libya
  StrSetText(LI,"LIE"); // Liechtenstein
  StrSetText(LT,"LTU"); // Lithuania
  StrSetText(LU,"LUX"); // Luxembourg
  StrSetText(MK,"MKD"); // Macedonia, Republic of
  StrSetText(MG,"MDG"); // Madagascar
  StrSetText(MW,"MWI"); // Malawi
  StrSetText(MY,"MYS"); // Malaysia
  StrSetText(MV,"MDV"); // Maldives
  StrSetText(ML,"MLI"); // Mali
  StrSetText(MT,"MLT"); // Malta
  StrSetText(MH,"MHL"); // Marshall Islands
  StrSetText(MQ,"MTQ"); // Martinique
  StrSetText(MR,"MRT"); // Mauritania
  StrSetText(MU,"MUS"); // Mauritius
  StrSetText(YT,"MYT"); // Mayotte
  StrSetText(MX,"MEX"); // Mexico
  StrSetText(FM,"FSM"); // Micronesia, Federated States of
  StrSetText(MD,"MDA"); // Moldova
  StrSetText(MC,"MCO"); // Monaco
  StrSetText(MN,"MNG"); // Mongolia
  StrSetText(ME,"MNE"); // Montenegro
  StrSetText(MS,"MSR"); // Montserrat
  StrSetText(MA,"MAR"); // Morocco
  StrSetText(MZ,"MOZ"); // Mozambique
  StrSetText(MM,"MMR"); // Myanmar
  StrSetText(NA,"NAM"); // Namibia
  StrSetText(NR,"NRU"); // Nauru
  StrSetText(NP,"NPL"); // Nepal
  StrSetText(NL,"NLD"); // Netherlands
  StrSetText(AN,"ANT"); // Netherlands Antilles
  StrSetText(NC,"NCL"); // New Caledonia
  StrSetText(NZ,"NZL"); // New Zealand
  StrSetText(NI,"NIC"); // Nicaragua
  StrSetText(NE,"NER"); // Niger
  StrSetText(NG,"NGA"); // Nigeria
  StrSetText(NU,"NIU"); // Niue
  StrSetText(NF,"NFK"); // Norfolk Island
  StrSetText(MP,"MNP"); // Northern Mariana Islands
  StrSetText(NO,"NOR"); // Norway
  StrSetText(OM,"OMN"); // Oman
  StrSetText(PK,"PAK"); // Pakistan
  StrSetText(PW,"PLW"); // Palau
  StrSetText(PS,"PSE"); // Palestinian Territory, Occupied
  StrSetText(PA,"PAN"); // Panama
  StrSetText(PG,"PNG"); // Papua New Guinea
  StrSetText(PY,"PRY"); // Paraguay
  StrSetText(PE,"PER"); // Peru
  StrSetText(PH,"PHL"); // Philippines
  StrSetText(PN,"PCN"); // Pitcairn
  StrSetText(PL,"POL"); // Poland
  StrSetText(PT,"PRT"); // Portugal
  StrSetText(PR,"PRI"); // Puerto Rico
  StrSetText(QA,"QAT"); // Qatar
  StrSetText(RE,"REU"); // Runion
  StrSetText(RO,"ROU"); // Romania
  StrSetText(RU,"RUS"); // Russian Federation
  StrSetText(RW,"RWA"); // Rwanda
  StrSetText(BL,"BLM"); // Saint-Barthlemy
  StrSetText(SH,"SHN"); // Saint Helena
  StrSetText(KN,"KNA"); // Saint Kitts and Nevis
  StrSetText(LC,"LCA"); // Saint Lucia
  StrSetText(MF,"MAF"); // Saint-Martin (French part)
  StrSetText(PM,"SPM"); // Saint Pierre and Miquelon
  StrSetText(VC,"VCT"); // Saint Vincent and Grenadines
  StrSetText(WS,"WSM"); // Samoa
  StrSetText(SM,"SMR"); // San Marino
  StrSetText(ST,"STP"); // Sao Tome and Principe
  StrSetText(SA,"SAU"); // Saudi Arabia
  StrSetText(SN,"SEN"); // Senegal
  StrSetText(RS,"SRB"); // Serbia
  StrSetText(SC,"SYC"); // Seychelles
  StrSetText(SL,"SLE"); // Sierra Leone
  StrSetText(SG,"SGP"); // Singapore
  StrSetText(SK,"SVK"); // Slovakia
  StrSetText(SI,"SVN"); // Slovenia
  StrSetText(SB,"SLB"); // Solomon Islands
  StrSetText(SO,"SOM"); // Somalia
  StrSetText(ZA,"ZAF"); // South Africa
  StrSetText(GS,"SGS"); // South Georgia and the South Sandwich Islands
  StrSetText(SS,"SSD"); // South Sudan
  StrSetText(ES,"ESP"); // Spain
  StrSetText(LK,"LKA"); // Sri Lanka
  StrSetText(SD,"SDN"); // Sudan
  StrSetText(SR,"SUR"); // Suriname *
  StrSetText(SJ,"SJM"); // Svalbard and Jan Mayen Islands
  StrSetText(SZ,"SWZ"); // Swaziland
  StrSetText(SE,"SWE"); // Sweden
  StrSetText(CH,"CHE"); // Switzerland
  StrSetText(SY,"SYR"); // Syrian Arab Republic (Syria)
  StrSetText(TW,"TWN"); // Taiwan, Republic of China
  StrSetText(TJ,"TJK"); // Tajikistan
  StrSetText(TZ,"TZA"); // Tanzania *, United Republic of
  StrSetText(TH,"THA"); // Thailand
  StrSetText(TL,"TLS"); // Timor-Leste
  StrSetText(TG,"TGO"); // Togo
  StrSetText(TK,"TKL"); // Tokelau
  StrSetText(TO,"TON"); // Tonga
  StrSetText(TT,"TTO"); // Trinidad and Tobago
  StrSetText(TN,"TUN"); // Tunisia
  StrSetText(TR,"TUR"); // Turkey
  StrSetText(TM,"TKM"); // Turkmenistan
  StrSetText(TC,"TCA"); // Turks and Caicos Islands
  StrSetText(TV,"TUV"); // Tuvalu
  StrSetText(UG,"UGA"); // Uganda
  StrSetText(UA,"UKR"); // Ukraine
  StrSetText(AE,"ARE"); // United Arab Emirates
  StrSetText(GB,"GBR"); // United Kingdom
  StrSetText(US,"USA"); // United States of America
  StrSetText(UM,"UMI"); // United States Minor Outlying Islands
  StrSetText(UY,"URY"); // Uruguay
  StrSetText(UZ,"UZB"); // Uzbekistan
  StrSetText(VU,"VUT"); // Vanuatu
  StrSetText(VE,"VEN"); // Venezuela (Bolivarian Republic of)
  StrSetText(VN,"VNM"); // Viet Nam
  StrSetText(VI,"VIR"); // Virgin Islands, US
  StrSetText(WF,"WLF"); // Wallis and Futuna Islands
  StrSetText(EH,"ESH"); // Western Sahara
  StrSetText(YE,"YEM"); // Yemen
  StrSetText(ZM,"ZMB"); // Zambia
  StrSetText(ZW,"ZWE"); // Zimbabwe
  EndStrSet;

  StrSetBegin(628); // post-period billed features
  StrSetText(modSL,"Sales Ledger");
  EndStrSet;

  SetBegin(629);
  SetText(kGuiNone,"-"); 
  SetText(kGuiCocoa,"Mac OS X"); 
  SetText(kGuiCarbon,"Carbon"); 
  SetText(kGuiXWindows,"Old Windows"); 
  SetText(kGuiQT,"-"); 
  SetText(kGuiGDI,"-"); 
  SetText(kGuiWindowsMobile,"Windows Mobile"); 
  SetText(kGuiiPhone,"iPhone"); 
  SetText(kGuiSymbian,"Symbian"); 
  SetText(kGuiWPF,"-"); 
  SetText(kGuiMaemo,"-"); 
  SetText(kGuiAndroid,"Android"); 
  SetText(kGuiMetro,"Windows Metro"); 
  SetText(kGuiWindowsDesktop,"Windows"); 
  EndSet;
  
  SetBegin(630);
  SetText(kStandardIDLoginPaidTypeNone,"Не проверено"); 
  SetText(kStandardIDLoginPaidTypePaid,"Платно"); 
  SetText(kStandardIDLoginPaidTypeFree,"Бесплатно"); 
  EndSet;  

  /* Lithuania Instrastat Export */
  StrSetBegin(631);
  StrSetText(O,"Primary"); //!!TRANSLATE
  StrSetText(N,"Blank"); //!!TRANSLATE
  StrSetText(M,"Revising"); //!!TRANSLATE
  EndStrSet;

  StrSetBegin(632); //Do not translate, keep in sync with set 344
  StrSetText("ARB","Arabic"); //!!TRANSLATE
  StrSetText("AGO","Portuguese (Angola)"); //!!TRANSLATE
  StrSetText("AUS","English (Australia)"); //!!TRANSLATE
  StrSetText("BRA","Portuguese (Brazil)"); //!!TRANSLATE
  StrSetText("CHI","Chinese"); //!!TRANSLATE
  StrSetText("CZE","Czech"); //!!TRANSLATE
  StrSetText("DAN","Danish"); //!!TRANSLATE
  StrSetText("ENG","English (UK)"); //!!TRANSLATE
  StrSetText("USA","English (US)"); //!!TRANSLATE
  StrSetText("CAN","English (Canada)"); //!!TRANSLATE
  StrSetText("IND","English (India)"); //!!TRANSLATE
  StrSetText("KEE","English (Kenya)"); //!!TRANSLATE
  StrSetText("NZE","English (New Zealand)"); //!!TRANSLATE
  StrSetText("PHE","English (Philippines)"); //!!TRANSLATE
  StrSetText("SGP","English (Singapore)"); //!!TRANSLATE
  StrSetText("SAF","English (South Africa)"); //!!TRANSLATE
  StrSetText("ZWE","English (Zimbabwe)"); //!!TRANSLATE
  StrSetText("ESP","Spanish"); //!!TRANSLATE
  StrSetText("USS","Spanish (US)"); //!!TRANSLATE
  StrSetText("EST","Estonian"); //!!TRANSLATE
  StrSetText("FIN","Finnish"); //!!TRANSLATE
  StrSetText("FRA","French"); //!!TRANSLATE
  StrSetText("FRC","French (Canada)"); //!!TRANSLATE
  StrSetText("FAR","Farsi"); //!!TRANSLATE
  StrSetText("GER","German"); //!!TRANSLATE
  StrSetText("HEB","Hebrew"); //!!TRANSLATE
  StrSetText("HUN","Hungarian"); //!!TRANSLATE
  StrSetText("ITA","Italian"); //!!TRANSLATE
  StrSetText("LAT","Latvian"); //!!TRANSLATE
  StrSetText("LIT","Lithuanian"); //!!TRANSLATE
  StrSetText("MOZ","Portuguese (Mozambique)"); //!!TRANSLATE
  StrSetText("NOR","Norwegian"); //!!TRANSLATE
  StrSetText("POL","Polish"); //!!TRANSLATE
  StrSetText("POR","Portuguese"); //!!TRANSLATE
  StrSetText("ROM","Romanian"); //!!TRANSLATE
  StrSetText("RUS","Russian"); //!!TRANSLATE
  StrSetText("SER","Serbian"); //!!TRANSLATE
  StrSetText("SWE","Swedish"); //!!TRANSLATE
  StrSetText("SLO","Slovenian"); //!!TRANSLATE
  StrSetText("SVK","Slovakian"); //!!TRANSLATE
  StrSetText("UKR","Ukranian"); //!!TRANSLATE
  StrSetText("VIE","Vietnamese"); //!!TRANSLATE
  StrSetText("","Other"); //!!TRANSLATE
  EndStrSet;
  
  /* Lithuania Instrastat Export */
  StrSetBegin(633);
  StrSetText("VATRateTierBasic","Basic Level"); //!!TRANSLATE
  StrSetText("VATRateTier1","Reduced Level 1"); //!!TRANSLATE
  StrSetText("VATRateTier2","Reduced Level 2"); //!!TRANSLATE
  StrSetText("VATRateTier3","Reduced Level 3"); //!!TRANSLATE
  StrSetText("VATRateTier4","Reduced Level 4"); //!!TRANSLATE
  StrSetText("VATRateTierZero","Zero"); //!!TRANSLATE
  StrSetText("VATRateTierExempt","Exempt"); //!!TRANSLATE
  EndStrSet;  

  StrSetBegin(634);
  StrSetText(kBATrigerNone,"Undefined"); //!!TRANSLATE
  StrSetText(kBATrigerUnexpectedSytemRestart,"Unexpected System Restart"); //!!TRANSLATE
  StrSetText(kBATrigerEmailsQueueStopped,"Emails queue stopped"); //!!TRANSLATE
  StrSetText(kBATrigerEInvoicesQueueStopped,"E-Invoices queue stopped"); //!!TRANSLATE
  StrSetText(kBATrigerEInvoicesNotSent,"E-Invoices not sent during last 24h"); //!!TRANSLATE
  EndStrSet;  

  SetBegin(636);
  SetText(kAutSalesActionNone,"None"); //!!TRANSLATE
  SetText(kAutSalesActionRequest,"Request"); //!!TRANSLATE
  EndSet;  

  SetBegin(637);
  SetText(kAutSalesTxtMsgTypePurchase,"Purchase"); //!!TRANSLATE
  SetText(kAutSalesTxtMsgTypePurchaseConfirmation,"Purchase Confirmation"); //!!TRANSLATE
  SetText(kAutSalesTxtMsgTypeExpiringLicenses,"Expiring Licenses"); //!!TRANSLATE
  EndSet;  

  SetBegin(638);
  SetText(kAutSalesOnRequest,"On Request"); //!!TRANSLATE
  SetText(kAutSalesOnLogin,"On Login"); //!!TRANSLATE
  SetText(kAutSalesOnExipringLicense,"On Expiring License"); //!!TRANSLATE
  SetText(kAutSalesPurchaseConfirmation,"Purchase Confirmation"); //!!TRANSLATE
  EndSet;  
  
  SetBegin(639);
  SetText(13,"ARG"); //!!TRANSLATE
  SetText(29,"AUS"); //!!TRANSLATE
  SetText(33,"AUT"); //!!TRANSLATE
  SetText(109,"AZE"); //!!TRANSLATE
  SetText(14,"BOL"); //!!TRANSLATE
  SetText(41,"CAN"); //!!TRANSLATE
  SetText(43,"HRV"); //!!TRANSLATE
  SetText(15,"CZE"); //!!TRANSLATE
  SetText(5,"DEN"); //!!TRANSLATE
  SetText(94,"UAE"); //!!TRANSLATE
  SetText(17,"ECU"); //!!TRANSLATE
  SetText(7,"EST"); //!!TRANSLATE
  SetText(16,"EST"); //!!TRANSLATE
  SetText(25,"EST"); //!!TRANSLATE
  SetText(4,"FIN"); //!!TRANSLATE
  SetText(107,"FRA"); //!!TRANSLATE
  SetText(32,"DEU"); //!!TRANSLATE
  SetText(18,"HND"); //!!TRANSLATE
  SetText(19,"HUN"); //!!TRANSLATE
  SetText(27,"ISL"); //!!TRANSLATE
  SetText(40,"IRL"); //!!TRANSLATE
  SetText(111,"ITA"); //!!TRANSLATE
  SetText(44,"KEN"); //!!TRANSLATE
  SetText(8,"LVA"); //!!TRANSLATE
  SetText(9,"LTU"); //!!TRANSLATE
  SetText(38,"MEX"); //!!TRANSLATE
//  SetText(20,"Middle-Eastern Customers");
  SetText(42,"NZL"); //!!TRANSLATE
//  SetText(112,"North America");
  SetText(2,"NOR"); //!!TRANSLATE
  SetText(26,"NOR"); //!!TRANSLATE
  SetText(21,"PRY"); //!!TRANSLATE
  SetText(6,"POL"); //!!TRANSLATE
  SetText(22,"PRT"); //!!TRANSLATE
  SetText(10,"RUS"); //!!TRANSLATE
  SetText(30,"ROU"); //!!TRANSLATE
  SetText(39,"SGP"); //!!TRANSLATE
  SetText(31,"SVK"); //!!TRANSLATE
  SetText(23,"SVN"); //!!TRANSLATE
  SetText(28,"SDN"); //!!TRANSLATE
  SetText(12,"ZAF"); //!!TRANSLATE
  SetText(3,"SWE"); //!!TRANSLATE
  SetText(34,"CHE"); //!!TRANSLATE
  SetText(35,"TUR"); //!!TRANSLATE
  SetText(1,"GBR"); //!!TRANSLATE
  SetText(36,"UKR"); //!!TRANSLATE
  SetText(37,"USA"); //!!TRANSLATE
  SetText(24,"URY"); //!!TRANSLATE
  SetText(45,"ZWE"); //!!TRANSLATE
  EndSet;

  SetBegin(640);
  SetText(kAutSalesMsgStatusDelivered,"Delivered"); //!!TRANSLATE
  EndSet;  

  SetBegin(641);
  SetText(kPromotionRowTypeFilter,"Filter"); //!!TRANSLATE
  SetText(kPromotionRowTypeCondition,"Condition"); //!!TRANSLATE
  EndSet;  

  SetBegin(642);
  SetText(kPromotionFilterUndefined,"Not Defined"); //!!TRANSLATE
  SetText(kPromotionFilterItem,"Item"); //!!TRANSLATE
  SetText(kPromotionFilterItemGroup,"Item Group"); //!!TRANSLATE
  SetText(kPromotionFilterItemClassification,"Item Classification"); //!!TRANSLATE
  SetText(kPromotionFilterCustomer,"Customer"); //!!TRANSLATE
  SetText(kPromotionFilterCustomerCategory,"Customer Category"); //!!TRANSLATE
  SetText(kPromotionFilterCustomerClassification,"Customer Classification"); //!!TRANSLATE
  EndSet;  

  SetBegin(643);
  SetText(kPromotionConditionUndefined,"Not Defined"); //!!TRANSLATE
  SetText(kPromotionConditionAmount,"Amount above"); //!!TRANSLATE
  SetText(kPromotionConditionNumberOfItems,"Number of Items"); //!!TRANSLATE
  SetText(kPromotionConditionNumberOfINvoices,"Number of Invoices"); //!!TRANSLATE
  SetText(kPromotionConditionBOGOF,"Buy x get y for free"); //!!TRANSLATE
  EndSet;  


  SetBegin(644);
  SetText(kPromotionFilterUndefined,"Not Defined"); //!!TRANSLATE
  SetText(kPromotionFilterItem,"Item"); //!!TRANSLATE
  SetText(kPromotionFilterItemGroup,"Item Group"); //!!TRANSLATE
  SetText(kPromotionFilterItemClassification,"Item Classification"); //!!TRANSLATE
  SetText(kPromotionFilterCustomer,"Customer"); //!!TRANSLATE
  SetText(kPromotionFilterCustomerCategory,"Customer Category"); //!!TRANSLATE
  SetText(kPromotionFilterCustomerClassification,"Customer Classification"); //!!TRANSLATE

  SetText(kPromotionConditionAmount,"Amount above"); //!!TRANSLATE
  SetText(kPromotionConditionNumberOfItems,"Number of Items"); //!!TRANSLATE
  SetText(kPromotionConditionNumberOfINvoices,"Number of Invoices"); //!!TRANSLATE
  EndSet;  

  SetBegin(645);
  SetText(kPeriodLengthBlank,"Not Applicable"); //!!TRANSLATE
  SetText(kPeriodLengthDay,"Dayly"); //!!TRANSLATE
  SetText(kPeriodLengthWeek,"Week"); //!!TRANSLATE
  SetText(kPeriodLengthMonth,"Month"); //!!TRANSLATE
  SetText(kPeriodLengthQuarter,"Quarter"); //!!TRANSLATE
  SetText(kPeriodLengthYear,"Year"); //!!TRANSLATE
  EndSet;

  SetBegin(646);
  SetText(kWorkflowOverviewSortByIcon,"Icon"); //!!TRANSLATE
  SetText(kWorkflowOverviewSortByValue,"Value"); //!!TRANSLATE
  SetText(kWorkflowOverviewSortByCaption,"Caption"); //!!TRANSLATE
  SetText(kWorkflowOverviewSortByDate,"Date"); //!!TRANSLATE
  SetText(kWorkflowOverviewSortByCustomer,"Customer"); //!!TRANSLATE
  EndSet;  

  SetBegin(647);
  SetText(0,"VAT 7 - 16"); //!!TRANSLATE
  SetText(1,"VAT 7 - 17"); //!!TRANSLATE
  EndSet;  

  SetBegin(648);
  SetText(H_OPER_NONE,"None"); //!!TRANSLATE
  SetText(H_OPER_LT,"<"); //!!TRANSLATE
  SetText(H_OPER_LE,"<="); //!!TRANSLATE
  SetText(H_OPER_GR,">"); //!!TRANSLATE
  SetText(H_OPER_GE,">="); //!!TRANSLATE
  SetText(H_OPER_NE,"!="); //!!TRANSLATE
  SetText(H_OPER_EQ2,"=="); //!!TRANSLATE
  EndSet;  
  
  //Bk HAL start
  SetBegin(667);
  SetText(0,"vali teenus");
  SetText(1,"HansaWorld");
  SetText(2,"Arvete saatmine (Omniva)");
  SetText(3,"Tarnija arvete vastuvЫtmine (Omniva)");
  SetText(4,"Pensioni liitumispКring");
  SetText(5,"Аriregistri pКring");
  SetText(6,"Valuutakursside pКring");
  EndSet;
//Bk HAL end

//Bk SEPA start
  StrSetBegin(668);
  StrSetText(SEPA,"SEPA tsoon");
  StrSetText(Foreign,"VКlispank");
  EndStrSet;
//Bk SEPA end

  SetBegin(622); //reserved for 82
  EndSet;

  SetBegin(623);
  SetText(kSearchModeDefault,"Default"); //!!TRANSLATE
  SetText(kSearchModeFilter,"Filter"); //!!TRANSLATE
  SetText(kSearchModePosition,"Position"); //!!TRANSLATE
  EndSet;

end;

#endif
