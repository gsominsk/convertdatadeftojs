/* WindowFunctions.hal */

external function LongInt GetLicenseQty(string);
external procedure ExtractObj(string,var Integer,var string);
external function string 60 TileUserDefined(string,Integer,var Integer);
external function string 20 GetMenuCode(string);
external function string 60 UserDefined(string,string);
external function Boolean GetSKUData(LongInt,var array record IAPProductVC);

global
procedure DefineTTRRowTypes(Integer v)
begin
  record TTRFieldBlock TTRFb;
  row TTRFieldBlock TTRFrw;
  Integer i,rwcnt;
  Boolean found;
  Real t;
  
  BlockLoad(TTRFb);
  rwcnt = MatRowCnt(TTRFb);
  if (rwcnt>0) then begin 
    MatrixBegin(4,v+=45,-20,-26,-,60);
    MatTypedRow(stp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TTRFb,i,TTRFrw);
      MatText(t=TTRFrw.RowType,24,TTRFrw.Code,false);
      MatCol(t,174,"Значение",0,Value,false,0);
    end;
    EndMatrix;
  end;  
  return;
end;

global
procedure RusTaxComUserFillFields(var integer am,var array string labelstr)
begin
  record RusTaxComBlock RusTaxComb;
  row RusTaxComBlock RusTaxComrw;
  integer i;
  
  BlockLoad(RusTaxComb);
  am = MatRowCnt(RusTaxComb);
  for (i=0;i<am;i=i+1) begin
    MatRowGet(RusTaxComb,i,RusTaxComrw);
    labelstr[i] = RusTaxComrw.FieldSpec & " (" & RusTaxComrw.FieldCode & ")";
  end; 
  return;
end;

global
procedure AddTouchScreenPasteButton(integer h,integer v,Integer bh,Integer bv,string wndName,integer ButtonNr,string ButtonSpec,integer ButtonColor)
begin
  string 255 ButtonProc;
  
  ButtonProc = wndName & "TouchScreenPasteButton";
  //ButtonProc = ButtonProc & ButtonNr;
  ColourPushButtonTag(h,v,h+bh,v+bv,ButtonProc,ButtonSpec,ButtonColor,ButtonNr);
  return;
end;

global
procedure MakeUserDefinedTile(longint tileno)
begin
  real i,h,h1,h2,h3,h4,h5,h6,h7,hm,hs,v,l,vs,v2,vm,f,t,fs;
  string 255 label;
  
  v = 6; vs = 20; h = 100; h2 = 270; h3 = 420; h4 = 440; fs = 100;
  
  Tile(tileno,240,false,"tileno",-);
  fs = 80;
  h = 180;
  label = UserDefined("ActVc","UserStr1");
  if (nonblank(label)) then begin
    EditField(h,v=6 ,-20,label,Normal,UserStr1,false,0);
  end;
  label = UserDefined("ActVc","UserStr2");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserStr2,false,0);
  end;
  label = UserDefined("ActVc","UserStr3");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserStr3,false,0);
  end;
  label = UserDefined("ActVc","UserStr4");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserStr4,false,0);
  end;
  label = UserDefined("ActVc","UserStr5");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserStr5,false,0);
  end;
  label = UserDefined("ActVc","UserVal1");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,50,label,Normal,UserVal1,true,0);
  end;
  label = UserDefined("ActVc","UserVal2");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,50,label,Normal,UserVal2,true,0);
  end;
  label = UserDefined("ActVc","UserVal3");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,50,label,Normal,UserVal3,true,0);
  end;
  label = UserDefined("ActVc","UserDate1");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,80,label,Normal,UserDate1,true,PasteCurDate);
  end;
  label = UserDefined("ActVc","UserDate2");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,80,label,Normal,UserDate2,true,PasteCurDate);
  end;
  label = UserDefined("ActVc","UserDate3");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,80,label,Normal,UserDate3,true,PasteCurDate);
  end;
  
  return;
end;

global
function Boolean DisplayLoginButtons()
begin
  Boolean res;
  record LocalLoginOptBlock LocalOptionsRec;
  
  BlockLoad(LocalOptionsRec);
  if (LocalOptionsRec.DisplayLoginButtons!=0) then begin res = true; end;
  DisplayLoginButtons = res;
  return;
end;

global
function Integer LoginShortcutsLines(Integer modv)
begin
  record LocalLoginBlock LocalLoginRec;
  Integer lines,rwcnt;
  
  BlockLoad(LocalLoginRec);
  
  rwcnt = MatRowCnt(LocalLoginRec);
  if (rwcnt>16) then begin rwcnt = 16; end;
  lines = rwcnt/modv;
  if (Mod(rwcnt,modv)!=0) then begin
    lines = lines + 1;
  end;
  LoginShortcutsLines = lines;
return;
end;

global
function Integer LoginShortcutsPos(Real startv,Integer modv)
begin
  Real v,vs,hs,h2,h;
  record LocalLoginBlock LocalLoginRec;
  row LocalLoginBlock LocalLoginrw;
  Integer i,rwcnt,j,lines;
  string 255 procstr;

  if (DisplayLoginButtons==false) then begin goto LLoginShortcutsPos; end;
  v = startv; hs = 87; h2 = 85; vs = 32;

  BlockLoad(LocalLoginRec);
  h = 17;
  rwcnt = MatRowCnt(LocalLoginRec);
  if (rwcnt>16) then begin rwcnt = 16; end;
  lines = rwcnt/modv;
  
  if (Mod(rwcnt,modv)!=0) then begin
    lines = lines + 1;
  end;
  
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LocalLoginRec,i,LocalLoginrw);
    j = j + 1;
    procstr = "LoginClassShortcut" & j;
    ColourPushButton(h,v,h+h2,v+30,procstr,LocalLoginrw.Code,LocalLoginrw.colnr);
    h = h+hs;
    if (Mod(j,modv)==0) and (j!=0) then begin
      h = 17;
      v = v + vs;
    end;
  end;  
  
  LLoginShortcutsPos:;  
  v = startv + lines*vs;
  LoginShortcutsPos = v;
  return;
end;

global
function Integer NumberofBarTabTiles()
begin
  NumberofBarTabTiles = 11;
  return;
end;

// function buttons
global
function real GenericFunctionButton(real h,real v,real h2,real v3,string wclass,string butbase,LongInt butno,string deflabel)
begin
  string 20 label;
  Integer colnr;
  real hs;

  hs = 87;

  label = TileUserDefined(wclass,butno,colnr);
  if (blank(label)) then begin
    label = deflabel;
  end;

  ColourPushButton(h,v,h+h2,v+v3,butbase & butno,label,colnr);  

  GenericFunctionButton = h + hs;
  return;
end;

global
function real ItemButtons(string dclass,Integer tilenr)
begin
  Real v,vs,hs,h2,h;
  Integer i,rwcnt,j,butnr;
  record ItemButtonsBlock IBb;
  row ItemButtonsBlock IBrw;
  string 255 procstr;
  Integer numtiles;
  
  v = 72; hs = 87; h2 = 80; vs = 60;
  h = 17;
  butnr = 1;
  
  switch (dclass) begin
    case "RestAccOldDClass": numtiles = NumberofBarTabTiles;
    case "RestAccDClass": numtiles = NumberofBarTabTiles;
    otherwise numtiles = 10;
  end;
  
  BlockLoad(IBb);
  rwcnt = MatRowCnt(IBb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IBb,i,IBrw);
    if (IBrw.TileNr==tilenr) then begin
      if (IBrw.ButtonType<=1) then begin
        procstr = dclass & "PasteItem";
        j = i + 1;
        procstr = procstr & j;
      end else begin
        procstr = "RestAccTile" & (StringToInt(IBrw.ArtCode) + numtiles);
        j = i + 1;
        //procstr = procstr & j;
      end;
      ColourPushButton(h,v,h+85,v+50,procstr,IBrw.Label,IBrw.colnr);
      h = h+hs;
      if (Mod(butnr,8)==0) and (butnr!=0) then begin
        h = 17;
        v = v + vs;
      end;
      butnr = butnr + 1;
      if (butnr==33) then begin
        goto LItemButtons;
      end;
    end;
  end;
LItemButtons:;
  ItemButtons = v;
  return;
end;

global
function Integer LoginShortcuts()
begin
  Real v,vs,hs,h2,h;
  record LocalLoginBlock LocalLoginRec;
  row LocalLoginBlock LocalLoginrw;
  Integer i,rwcnt,j;
  string 255 procstr;

  if (DisplayLoginButtons==false) then begin goto LLoginShortcuts; end;
  v = 12; hs = 87; h2 = 85; vs = 32;

  BlockLoad(LocalLoginRec);
  h = 17;
  rwcnt = MatRowCnt(LocalLoginRec);
  if (rwcnt>16) then begin rwcnt = 16; end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LocalLoginRec,i,LocalLoginrw);
    j = j + 1;
    procstr = "LoginClassShortcut" & j;
    ColourPushButton(h,v,h+h2,v+30,procstr,LocalLoginrw.Code,LocalLoginrw.colnr);
    h = h+hs;
    if (Mod(j,4)==0) and (j!=0) then begin
      h = 17;
      v = v + vs;
    end;
  end;  
  LoginShortcuts = v;
LLoginShortcuts:;  
  return;
end;

global
function string 255 SetVATZoneLabel()
begin
  string 255 res;
  record VATZoneLabelBlock VATZoneLb;
  
  BlockLoad(VATZoneLb);
  if (nonblank(VATZoneLb.VATZoneName)) then begin 
    res = VATZoneLb.VATZoneName;
  end;
  SetVATZoneLabel = res;
  return;
end;

global
function Boolean DefCustCodeSetup()
begin
  Boolean res;
  record CashierDefBlock CashierDefRec;
  
  BlockLoad(CashierDefRec);
  res = nonblank(CashierDefRec.DefCustCode);
  
  DefCustCodeSetup = res;
  return;
end;

global
procedure HWStoreWClassAddProducts(Integer active)
begin
  LongInt base,i;
  record IAPProductVC IAPProductr;
  array record IAPProductVC IAPProductra;
  Boolean testf;
  string 255 title;
  string 255 description;
  string 255 price;

  for (base = 29000; base<30000; base = base + 20) begin
    if (GetSKUData(base,IAPProductra)==false) then begin
      goto LNextItem;
    end;
    for (i=0;i<IAPProductra.length;i=i+1) begin
      IAPProductr = IAPProductra[i];
      testf = true;
      switch (active) begin
        case 0:
          if (GetLicenseQty(USetStr(base + 8))>0) then begin
            testf = false;
          end;
        case 1:
          if (GetLicenseQty(USetStr(base + 8))<=0) then begin
            testf = false;
          end;
      end;
      if (testf) then begin
        testf = SetInSet(BuildProductCode,USetStr(base+9));
      end;
      if (testf) then begin
        title = IAPProductr.LocalizedTitle;
        description = USetStr(base+6); //%% should be in IAPProductr

//        AddBic(15031,15032,0,0,ToolMakeInAppPurchase,base,title);
        GridButton(15031,patM4green,patM4white,kGridButtonStyleStore,title,"",ToolMakeInAppPurchase,base);
        ControlLabel(10,40,0,5,description,"SmallFont",11,kTextStyleNone,AdjLeft,patM4white);
        ControlLabel(0,0,-10,-1,IAPProductr.PriceDesc & " " & IAPProductr.Price,"LargeFont",11,kTextStyleBold,AdjLeft,patM4white);
      end;
    end;
LNextItem:;
  end;
end;

global
function Boolean HasCharts()
begin
  Boolean res;
  res = FileExists(ResourceFolder & "/dojo.js"); 
  if (res==false) then begin
    res = WindowsMode;
  end;
  HasCharts = res;
end;

global
procedure RateField(real h,real v,real fl,string tstr1,integer ftp,string field,
                    boolean justification,real h2,real v2,string tstr2,boolean justification2)
begin
  string 255 tstr;
  boolean print2f;
  
  if (GuiType==kGuiiPhone or GuiType==kGuiAndroid) then begin 
    tstr = tstr2;
  end else begin
    tstr = tstr1;
    print2f = NonBlank(tstr2);  
  end;

  switch (field) begin
    case "ToRate1":  
        EditField(h,v,fl,tstr,ftp,ToRate1,justification,0);
        if (print2f) then begin 
          StaticText(h2,v2,tstr2,false);  
        end;
    case "ToRate2":  
        EditField(h,v,fl,tstr,ftp,ToRate2,justification,0);
        if (print2f) then begin 
          StaticText(h2,v2,tstr2,false);  
        end;              
    case "PurchaseRateTo1":  
        EditField(h,v,fl,tstr,ftp,PurchaseRateTo1,justification,0);
        if (print2f) then begin 
          StaticText(h2,v2,tstr2,false);  
        end;
    case "SalesRateTo1":
        EditField(h,v,fl,tstr,ftp,SalesRateTo1,justification,0);
        if (print2f) then begin 
          StaticText(h2,v2,tstr2,false);  
        end;          
    case "ToRateB1":  
        EditField(h,v,fl,tstr,ftp,ToRateB1,justification,0);
        if (print2f) then begin 
          StaticText(h2,v2,tstr2,false);  
        end;
    case "ToRateB2":  
        EditField(h,v,fl,tstr,ftp,ToRateB2,justification,0);
        if (print2f) then begin 
          StaticText(h2,v2,tstr2,false);  
        end;    
    case "VATToRateB1":  
        EditField(h,v,fl,tstr,ftp,VATToRateB1,justification,0);
        if (print2f) then begin 
          StaticText(h2,v2,tstr2,false);  
        end;    
    case "VATToRateB2":  
        EditField(h,v,fl,tstr,ftp,VATToRateB2,justification,0);
        if (print2f) then begin 
          StaticText(h2,v2,tstr2,false);  
        end;                       
    case "PLFrRate":  
        EditField(h,v,fl,tstr,ftp,PLFrRate,justification,0);
        if (print2f) then begin 
          StaticText(h2,v2,tstr2,false);  
        end;  
    case "PLToRate1":  
        EditField(h,v,fl,tstr,ftp,PLToRate1,justification,0);
        if (print2f) then begin 
          StaticText(h2,v2,tstr2,false);  
        end;
    case "PLToRate2":  
        EditField(h,v,fl,tstr,ftp,PLToRate2,justification,0);
        if (print2f) then begin 
          StaticText(h2,v2,tstr2,false);  
        end;   
    case "BalFrRate":  
        EditField(h,v,fl,tstr,ftp,BalFrRate,justification,0);
        if (print2f) then begin 
          StaticText(h2,v2,tstr2,false);  
        end;    
    case "BalToRate1":  
        EditField(h,v,fl,tstr,ftp,BalToRate1,justification,0);
        if (print2f) then begin 
          StaticText(h2,v2,tstr2,false);  
        end;        
    case "BalToRate2":  
        EditField(h,v,fl,tstr,ftp,BalToRate2,justification,0);
        if (print2f) then begin 
          StaticText(h2,v2,tstr2,false);  
        end;                             
  end;
  return;
end;

