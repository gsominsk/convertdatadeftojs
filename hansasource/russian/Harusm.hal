external function Boolean HasConsStockMoveInvoices();
external function Boolean HasAccountRecon();
external function Boolean HasMultiLocations();
external function Boolean HasNLBudget();
external function Boolean HasObjects();
external function Boolean HasRetGoodsToSupp();
external function Boolean HasReturnedGoods();
external function Boolean HasSimulations();

external function Boolean HasEMail();
external function Boolean HasExternalEMail();

external function Boolean HasModAT2();
external function Boolean HasModBA();
external function Boolean HasBuyBack();
external function Boolean HasModCheck();
external function Boolean HasModCons();
external function Boolean HasModCL();
external function Boolean HasModCO();
external function Boolean HasModCourses();
external function Boolean HasModCredMan();
external function Boolean HasModCRM();
external function Boolean HasModCustom();
external function Boolean HasModEDI();
external function Boolean HasModExp();
external function Boolean HasModHotel();
external function Boolean HasModHRM();
external function Boolean HasModIN();
external function Boolean HasModINTSTOCK();
external function Boolean HasModNL();
external function Boolean HasModPO();
external function Boolean HasModPOProg();
external function Boolean HasModPOS();
external function Boolean HasModPL();
external function Boolean HasModPP();
external function Boolean HasModProd();
external function Boolean HasModQT();
external function Boolean HasModRent();
external function Boolean HasModRest();
external function Boolean HasModRsrt();
external function Boolean HasModSO();
external function Boolean HasModSL();
external function Boolean HasModSVO();
external function Boolean HasModTS();
external function Boolean HasModWHM();
external function Boolean HasModDI();

external procedure SetProductTags();
external procedure LoadWindowTags();

/* Harusm.hal */

#ifdef HAL
/* This is no longer an Event, make sure you don't have this in */
//external function Boolean HasJewelleryInterface();

//event startup
begin
  string 255 country;
  record CYBlock CYb;
  record ModuleBlock Modb;
  
  SetGlobalBoolean("IsEnterprise",true);
//  SetGlobalBoolean("HasPreferedOfficialSerNr",false);
//  SetGlobalBoolean("HasHideCostPrice",false);
  
  SetProductTags;
  //LoadWindowTags;
 
  SetLangMode(LangRussian,"RUS",0);

  BlockLoad(CYb);
  BlockLoad(Modb);

/* The modules should keep there codes even if we rename the modules. The code is part of the Export format */
  Module("ASP","",730,modASP);
  if (HasModAT2) then begin
  Module("Активы","",730,modAT2);
  end;
  if (HasModBA) then begin
  Module("Бизнес оповещения","",730,modBA);
  end;
  if (HasModCRM or HasCalendar) then begin
  Module("Календарь","",730,modCAL);
  end;
  if (HasModCL) then begin
  Module("Кассовая книга","",730,modCL);
  end;
  if (HasModCheck) then begin
  Module("Чеки","",730,modCheck);
  end;
  if (HasModCons) then begin
  Module("Консолидация","",730,modCons);
  end;
  if (HasModCO) then begin
  Module("Контракты","",730,modCO);
  end;
  if (HasModCourses) then begin
  Module("Проведение курсов","",730,modCourses); 
  end;
  if (HasModCredMan) then begin
  Module("Управление кредитами","",730,modCredMan);
  end;
  if (HasModCRM) then begin
  Module("CRM","",730,modCRM);
  end;
  if (HasModCustom) then begin
  Module("Таможня","",730,modCustom);
  end;
  Module("Целостность данных","",730,modDY);  
  Module("Обслуживание базы данных","",730,modDBMain);  
  if (HasModEDI) then begin
  Module("EDI","",730,modEDI);  
  end;
  if (HasEMail) then begin
  Module("Почта и конференции","",730,modEmail);
  end;
  Module("Ключи","",730,modEnabReg);
  if (HasModExp) then begin
  Module("Затраты","",730,modExp);
  end;
  Module("Внешний шлюз","",730,modEG);
  Module("Межфирменный","",730,modIC);  
  Module(ProductName & "Контракты ","",730,modOurContracts);
  Module("HTS Сервер","",730,modHTS);
  //if (HasModHotel) then begin
    Module("Отель","",730,modHotel);
  //end;
  if (HasModHRM) then begin
  Module("Управление персоналом","",730,modHRM);
  end;
  Module("Интеграция","",730,modInteg);
  if (HasModIntStock) then begin
  Module("Внутренний склад","",730,modIntStock);
  end;
  if (HasModTS) then begin
  Module("Расчет трудозатрат","",730,modTS);
  end;
  Module("Займы","",730,modCuAcc);
  Module("Внутренняя почта","",730,modLocal);
  if (HasModPOProg) then begin
  Module("MRP","",730,modPOProg);
  end;
  if (HasModNL) then begin
  Module("Финансы","",730,modNL);
  end;
  if (HasModPOS) then begin
  Module("Кассовый терминал","",730,modPOS);
  end;
  Module("POS оффлайн","",730,modPOSOffLine);
  if (HasModDI) then begin
  Module("Ценообразование","",730,modDI);
  end;
  if (HasModProd) then begin
  Module("Производство","",730,modProd);
  end;
  Module("Планирование производства","",730,modProdSched);
  Module("Администрация проектов","",730,modIntProjMan);
  if (HasModPL) then begin
  Module("Расчёты с поставщиками","",730,modPL);
  end;
  if (HasModPO) then begin
  Module("Заказы поставщикам","",730,modPO);
  end;
  if (HasModQT) then begin
  Module("Коммерческие предложения","",730,modQT);
  end;
  if (HasModRent) then begin
  Module("Аренда","",730,modRent);
  end;
  Module("Генератор отчётов","",730,modRepGen);
//  Module("Туризм","",730,modRsrt); quite not finished
  if (HasModPP) then begin
  Module("Планирование ресурсов","",730,modPP);
  end;
  Module("Rest API","",730,modRestAPI); //!!TRANSLATE
  if (HasModRest) then begin
  Module("Ресторан","",730,modRest);
  end;
  if (HasModSL) then begin
  Module("Расчёты с клиентами","",730,modSL);
  end;
  if (HasModSO) then begin
  Module("Счета клиентам","",730,modSO);
  end;
//  Module("Server","",730,modServ); //Not supported any more
  if (HasModSVO) then begin
  Module("Заказы на обслуживание","",730,modSVO);
  end;
  Module("Акции","",730,modShares);
  Module("Пользователь одной функции","",730,modOneFuncMod);
  Module("Дизайнер SmartApps","",730,modMForms);
  Module("Склад","",730,modIN);
  Module("Система","",730,modSY);
  Module("TAPI шлюз","",730,modTG);
  Module("Планировщик задач","",730,modTASK);
  Module("Технические параметры","",730,modTC);
  Module("Телефония","",730,modTel);
  Module("Контролер времени","",730,modTimekeeper);
  Module("Настройки пользователя","",730,modUserSet);
  if (HasModWHM) then begin
  Module("Управление складом","",730,modWHM);
  end;
  Module("Интернет-магазин","",730,modWebShop);
  Module("Интернет-магазин и CMS","",730,modWebShopNG);
//  Module("Bank Reconciliation","",730,modBR);
//  Module("Limited Access","",730,modEU);
//  Module("Mail","",730,modML);
  Module("Отчётность для всемирного банка","",730,modWorldBankRep);
  
  RoleMod("Full Client","",730,rolFC,"");
  RoleMod("Mobile POS","",730,rolMP,"MobilePOSMasterWClass");
  RoleMod("Mobile Reports","",730,rolMR,"MobileReportsMasterWClass");
  RoleMod("Mobile Sales","",730,rolMM,"MobileSalesMasterWClass");
  RoleMod("Mobile Stock","",730,rolMS,"MobileStockMasterWClass");

/* modCons */

  RegisterWS("Доля основного держателя","Доля держателя","Новая доля держателя",OwnerPrcVc,modCons); 
  RegisterWS("Записи операций","Записи операций","Новая запись операций",TRVc,modCons); 
  RegisterWS("Счета","Счета","Новый счёт",AccVc,modCons); 
  RegisterWS("Объекты","Объекты","Новый объект",ObjVc,modCons); 
  RegisterWS("Симуляции","Симуляции","Новая симуляция",SMVc,modCons); 

  Report("Консолидированный баланс",ConsBalRClass,BalRn,UserDefRepDClass,modCons);
  Report("Консолидация",ConsRClass,ConsRn,0,modCons);
  Report("Консолидированный план счетов",AcConsRClass,AcConsRn,0,modCons); // from SY
  Report("Consolidation Key Financial Ratios",KeyConsRClass,KeyRn,UserDefRepDClass,modCons);
  Report("Список исправлений",CorrRClass,AllCompaniesCorrRn,0,modCons);
  Report("Discount Statistics, Consolidated",ConsCust2STRClass,Cust2STRn,0,modCons); //!!TRANSLATE
  Report("Консоидированный отчёт о прибыли и бутыках",ConsResRClass,ResRn,UserDefRepDClass,modCons);
  Report("Записи операций без объектов",TransNoObjRClass,TransNoObjRn,0,modCons);
  Report("Проверочный баланс консолидации",SB2RClass,TrialRn,0,modCons);

  Export("Консолидация",ConsEClass,ConsEn,modCons);
  Export("Записи операций",ConsTREClass,ConsTREn,modCons);
  Export("Trial Balance, Consolidated",ConsSBEClass,ConsTrialEn,modCons);

  Setting("Автоматические исключения",AccElimLClass,modCons);
  Setting("Курсы обмена валют консолидации",ConsERLClass,modCons);
  Setting("Настройки консолидации",ConsolidationTClass,modCons);
  Setting("Дочерние компании",DaughterCompTClass,modCons);
  Setting("Настройки отчётов",Rs2WClass,modCons);

  Maintenance("Автоматическое исключение счетов",AccElimConsVClass,AccElimMn,modCons);
  Maintenance("Консолидация",ConsVClass,ConsMn,modCons);

/* modCustom */
  RegisterWS("Таможенные декларации","Таможенные декларации","Новая таможенная декларация",CustomsVc,modCustom); 
  RegisterWS("Расчётные сборы","Расчётные сборы","Новые расчётные сборы",CalcChargeVc,modCustom); 
  RegisterWS("Обозначения товаров","Обозначения товаров","Новое обозначение товара",CommodityVc,modCustom); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modCustom); 
  RegisterWS("Товары поставщиков","Товары поставщиков","Новый товар поставщика",PIVc,modCustom); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modCustom); 

  Setting("Сертификаты",CertificateLClass,modCustom);
  Setting("Ключ таможенной декларации",CustomDecKeyTClass,modCustom);
  Setting("Настройки таможни",CustomsDefaultTClass,modCustom);
  Setting("Курсы обмена валюты таможни",CustomsERLClass,modCustom);
  Setting("Таможни",CustomOfficesTClass,modCustom);
  Setting("Способы отгрузки",DMLClass,modCustom);
  Setting("Условия доставки",ShipDealLClass,modCustom);
  Setting("Пошлины и сборы",ChargesLClass,modCustom);
  Setting("Серии номеров - Таможенные декларации",CustomsSerTClass,modCustom);
  Setting("Настройки специальных пошлин/сборов",SpecChargeDealTClass,modCustom);
  Setting("Особые товарные сделки",CommDealLClass,modCustom);
  Setting("VY ключ",VYKeyLClass,modCustom);

  Document("Таможенная декларация",CustomsRClass,CustomsForm,CustomsFClass,modCustom); 

  Export("Таможенные декларации",EDICustomsEClass,EDICustomsEn,modCustom);

  Import("Коды таможни",CommodityIn,CommodityIn,modCustom);
  Import("Ответ таможни",EDICustomsIn,EDICustomsIn,modCustom);

/* modCheck */

  RegisterWS("Открытые чеки","Открытые чеки","Новый открытый чек",OpenChkLClass,modCheck); 
  RegisterWS("Депозитные чеки","Депозитные чеки","Новый депозитный чек",DepChkLClass,modCheck); 
  RegisterWS("Все чеки","Все чеки","Новый чек",CheckVc,modCheck); 
  RegisterWS("Выданные собственные чеки","Выданные собственные чеки","Новый собственный чек",OpenOwnChkLClass,modCheck); 
  RegisterWS("Все собственные чеки","Все собственные чеки","Новый собственный чек",OwnCheckVc,modCheck); 
  RegisterWS("Кредитные карты","Кредитные карты","Новая кредитная карта",CreditCardVc,modCheck); 
  RegisterWS("Квитанции кредитных карт","Квитанции кредитных карт","Новая квитанция кред. карты",CouponVc,modCheck); 
  RegisterWS("Массоый депозит","Массоый депозит","Новый массовый депозит",ChqDepVc,modCheck); 

  Setting("Настройки записей - Чеки",CheckAccTClass,modCheck);
  Setting("Контроль счетов, Чеки",CheckTargetAccTClass,modCheck);
  Setting("#Cheques# Settings",CheckSetTClass,modCheck);
  Setting("Даты клиринга",ClearDLClass,modCheck);
  Setting("Виды кредитных карточек",CredCardTypeLClass,modCheck);
  Setting("Серии номеров - Депозит партии",ChqDepSerTClass,modCheck);
  Setting("Серии номеров - Own Cheques",OwnCheckSerTClass,modCheck);
  Setting("Серии номеров - Received Cheques",CheckSerTClass,modCheck);
  Setting("Способы оплаты",PMTClass,modCheck);
  Setting("Наимен. орган. выпустившей чек",OrdenChqLClass,modCheck); 
 
  Report("Журнал депозитов партии",ChqDepositJRClass,ChqDepositJRn,0,modCheck);
  Report("История чеков",HisCheckRClass,HisCheckRn,0,modCheck);
  Report("Список чеков",ThirdCheckRClass,ThirdCheckRn,0,modCheck);
  Report("Чеки на депозит",DepCheckRClass,DepCheckRn,0,modCheck);
  if (HasLocalization("ARG,PRT")) then begin
    Report("Подписанные чеки",EndosRClass,EndosRn,0,modCheck);
  end;
  Report("История собственных чеков",HisOwnCheckRClass,HisOwnCheckRn,0,modCheck);
  Report("Список собственных чеков",OwnCheckRClass,OwnCheckRn,0,modCheck);
//  Report("Batch Deposit Journal",ChqDepRClass,ChqDepRn,0,modCheck);//no code
//  Report("Список кредитных карт",CCardRClass,CCardRn,0,modCheck); // No source code
//  Report("Credit Card Slips Journal",CouponListRClass,CouponListRn,0,modCheck); // No source code
//  Report("Reconciliation CreditCard Slips",ConsCoupRClass,ConsRn,0,modCheck);//does it call ConsRn?

  Maintenance("Выписать собственные чеки",GenOwnChkVClass,GenOwnChk3Mn,modCheck);
  if (HasLocalization("USA")==false) then begin
    Maintenance("Создать транз. фин. квитанций",NLTransCredCardSlipVClass,NLTransCredCardSlipMn,modCheck);
  end;
//  Maintenance("Adjustment Estimated Clearing Days",AdECDVClass,AdECDMn,modCheck);

  Document("Собственные чеки",OwnChkRClass,OwnChkForm,OwnChkFClass,modCheck);
  Document("Этикетки собственных чеков",OwnChkLabRClass,OwnChkLabForm,OwnChkLabFClass,modCheck);
  Document("Batch Deposit",BatchDepRClass,BatchDepForm,BatchDepFClass,modCheck);

/* modCL - Касса*/

  RegisterWS("Приходы в кассу","Приходы в кассу","Новый приход",CLInVc,modCL); 
  RegisterWS("Расходы из кассы","Расходы из кассы","Новый расход",CLOutVc,modCL); 
  RegisterWS("Платежи","Платежи","Новый платёж",IPVc,modCL); 
  RegisterWS("Платежи","Платежи","Новый платёж",OPVc,modCL); 
  RegisterWS("Выплаты персоналу","Выплаты персоналу","Новая выплата персоналу",PPVc,modCL); 
  RegisterWS("Симуляции","Симуляции","Новая симуляция",SMVc,modCL); 
  Register("Сверка","Сверка",BankRecWClass,modCL);
  RegisterWS("Операции Forex","Форекс","Новая операция Forex",ForexTRVc,modCL); 

  Setting("Настройки кассы",MainCLTClass,modCL);
  Setting("Кредитные карты",CreditCardLClass,modCL);
  Setting("Представительские расходы",CLCorspLClass,modCL);
  Setting("№ для печати (ПКО)",LegalCLInNrTClass,modCL);
  Setting("Серии номеров - Приход",CLInSerTClass,modCL);
  Setting("Серии номеров - Расход",CLOutSerTClass,modCL);
  Setting("Серии номеров - Операции Forex",ForexTRSerTClass,modCL);
  Setting("Способы оплаты",PMTClass,modCL);
  
  Report("Кассовая книга",CLIORClass,CashBRn,0,modCL); /* needs some english strings. */
  if (HasLocalization("LTU")) then begin
    Report("Кассовая книга (Литва)",CashBookLitRClass,CashBookLitRn,0,modCL);
  end;
  Report("Журнал прихода в кассу",CLInJRClass,CLInJRn,0,modCL);  
  Report("Журнал расхода из кассы",CLOutJRClass,CLOutJRn,0,modCL);  
  Report("Отчёт по кассе",DayBalCashRClass,DayBalCashRn,0,modCL);
  Report("Список корреспондирующих счетов",CCtasRClass,CCtasRn,0,modCL);  
  Report("Счета-фактуры с приходными ордерами",IVCLInRClass,IVCLInRn,0,modCL);
  Report("Счета-фактуры с расходными ордерами",VICLOutRClass,VICLOutRn,0,modCL);
  Report("Счета-фактуры без приходных ордеров",IVnoCLInRClass,IVnoCLInRn,0,modCL);
  Report("Счета-фактуры без расходных ордеров",VInoCLOutRClass,VInoCLOutRn,0,modCL);
  Report("Прогноз ликвидности",LiquidityRClass,LiquidityRn,0,modCL);
  Report("Кассовая книга по записям операций",CashBookLatRClass,CashBookLatRn,0,modCL);
//  Report("Список купонов кредитных карт",CouponRClass,CouponRn,0,modCL); // No source code

  Document("Приход в кассу",CLInRClass,CLInForm,CLInFClass,modCL);
//  Document("Cash In Collection",CLInColRClass,CLInColForm,CLInColFClass,modCL);
  Document("Сч/ф на платежи в кассу",CLIn2RClass,CLIn2Form,CLIn2FClass,modCL);
  Document("Приходные ордера",CLIn1RClass,CLIn1Form,CLIn1FClass,modCL);
  Document("Расход из кассы",CLOutRClass,CLOutForm,CLOutFClass,modCL);
//  Document("Cash Out Collection",CLOutColRClass,CLOutColForm,CLOutColFClass,modCL);
  Document("Сч/ф на платежи из кассы",CLOut2RClass,CLOut2Form,CLOut2FClass,modCL);
  Document("Расходные ордера",CLOut1RClass,CLOut1Form,CLOut1FClass,modCL);
  Document("Выплаты из кассы",CLOut3RClass,CLOut3Form,CLOut3FClass,modCL);

//  Maintenance("Создать составной приходный ордер",ColCLInVClass,ColCLInMn,modCL);//as far as i know not used
//  Maintenance("Создать составной расходный ордер",ColCLOutVClass,ColCLOutMn,modCL);//as far as i know not used
  Maintenance("Утвердить приходные и расходные ордера",OKCLVClass,OKCLMn,modCL);
//  Maintenance("Изменить состояние купона",CouponVClass,CouponMn,modCL);

/* modAT2 */

  RegisterWS("Активы","Активы","Новый актив",AT2UnitVc,modAT2); 
  RegisterWS("Категории активов","Категории активов","Новая категория активов",AT2Vc,modAT2); 
  RegisterWS("Выбытия активов","Выбытия активов","Новое выбытие активов",AT2WrofVc,modAT2); 
  RegisterWS("Переоценки активов","Переоценки активов","Новая переоценка активов",AT2DprVc,modAT2); 
  RegisterWS("Статус актива","Статус актива","Новый статус актива",AT2TakeVc,modAT2); 
  Register("Движение активов","Движение активов",AT2TransVc,modAT2);  
  RegisterWS("Модели амортизации","Модели амортизации","Новая модель амортизации",DprModVc,modAT2); 

  Setting("Настройки записей - активы",AT2AccTClass,modAT2); 
  Setting("Asset Classifications",AT2ClassLClass,modAT2); //!!TRANSLATE
  Setting("Группы активов",AT2DispGroupTClass,modAT2);
  Setting("Виды активов",AC2TClass,modAT2);
  Setting("Контакты",CULClass,modAT2);
  Setting("Отделы",DepLClass,modAT2);
  Setting("Коэффициенты инфляции",ATCoeffLClass,modAT2);
  Setting("Серии номеров - Выбытие активов",AT2WrofSerTClass,modAT2);
  Setting("Серии номеров - Переоценка активов",AT2DprSerTClass,modAT2);
  Setting("Серии номеров - Статус активов",AT2TakeSerTClass,modAT2);
  Setting("Серии номеров - Коэффициенты переоценки",AT2RevSerTClass,modAT2);
  Setting("Коэффициенты переоценки ОС",AT2RevLClass,modAT2);
  Setting("Список переоценки ОС",AT2RevListLClass,modAT2);
//  Setting("Драгоценные металлы",MetalLClass,modAT2);
//  Setting("Серии номеров - Оприходование активов",AT2PUSerTClass,modAT2);
//  Setting("Причины выбытия",CauseLClass,modAT2);
//  Setting("Группы ОС",AT2GroupLClass,modAT2);
//  Setting("Перемещение активов",AT2MovLClass,modAT2);
//  Setting("Мат. ответственность",AT2RespLClass,modAT2);

  Report("Накопленная амортизация по категории",AT2CatAcumRClass,AT2CatAcumRn,0,modAT2);  
  Report("Состояние актива на дату",AssetAtTimeRClass,AssetAtTimeRn,0,modAT2);
  Report("История активов",AT2HistRClass,AT2HistRn,0,modAT2);
  Report("Список ОС",AT2ListRClass,AT2ListRn,0,modAT2);
  Report("Статус активов",AT2HistPortRClass,AT2HistPortRn,0,modAT2);
  Report("Сводный отчет по отделам",AT2DepRClass,AT2DepSumRn,0,modAT2);
  Report("План амортизации",AT2DeprPlanRClass,AT2DeprPlanRn,0,modAT2);
  Report("Отчёт по амортизации",AT2DeprRClass,AT2DeprRn,0,modAT2);
  Report("Журнал выбытий активов",AT2WriteJRClass,AT2WriteJRn,0,modAT2);
  if (HasLocalization("PRT")) then begin
    Report("Амортизация за год (Португалия)",AT2PortFormRClass,AT2PortFormRn,0,modAT2);
  end;
//  Report("Переоценка за год",AT2FYRevRClass,AT2FYRevRn,0,modAT2);//not used
  if (HasLocalization("PRT")) then begin
    Report("Списание за год (Португалия)",AT2FYWrofRClass,AT2FYWrofRn,0,modAT2);
  end;
  Report("Отчёт по страховке",AT2InsValRClass,AT2InsValRn,0,modAT2);
  Report("Отсутствующие активы из товаров аренды",MissingAssetRClass,MissingAssetRn,0,modAT2);
  Report("Список мат. ответственных",AT2RespPersRClass,AT2RespPersRn,0,modAT2);
  Report("Сводный отчет по мат. ответственным",AT2CatRespRClass,AT2CatRespRn,0,modAT2);
  Report("Симуляции по амортизации - предварительно",AT2GenSMRClass,AT2GenSMRn,0,modAT2);
  Report("Инвентаризационная ведомость активов",AT2StockTakeRClass,AT2StockTakeRn,0,modAT2);  
  Report("Субсидированные активы",AT2SubRClass,AT2SubRn,0,modAT2);
  Report("Налоговая амортизации",TaxDeprRClass,TaxDeprRn,0,modAT2);
  Report("Предпросмотр симуляций по амортизации",AT2GenTRRClass,AT2GenTRRn,0,modAT2);
  Report("Определите обновление отдела в активах",DeptAssetRClass,DeptAssetRn,0,modAT2);
//  Report("Список активов на дату",AT2ListDateRClass,AT2ListDateRn,0,modAT2);  // No code
//  Report("Asset List Lith",AT2ListLitRClass,AT2ListLitRn,0,modAT2);
//  Report("Список активов по мат. ответственным",AT2RespRClass,AT2RespRn,0,modAT2);, should be out, look line above it is the same

  Document("Выбытие активов",AT2WrofRClass,AT2WrofForm,AT2WrofFClass,modAT2);
  Document("Активы",AT2InRClass,AT2InForm,AT2InFClass,modAT2);
  Document("Ввод в эксплуатацию",AT2RClass,AT2Form,AT2FClass,modAT2);
  Document("Статус активов",AT2TakeRClass,AT2TakeForm,AT2TakeFClass,modAT2);  
  Document("Факторы переоценки",AT2RevRClass,AT2RevForm,AT2RevFClass,modAT2);
//  Document("Амотизация активов",AT2DprRClass,AT2DprForm,AT2DprFClass,modAT2);// No source code
//  Document("Оприходование активов",AT2PURClass,AT2PUForm,AT2PUFClass,modAT2); // No source code

  Maintenance("Создание симуляций по амортизации",AT2GenSMVClass,AT2GenSMMn,modAT2);
  Maintenance("Создание операций по амортизации",AT2GenTRVClass,AT2GenTRMn,modAT2);
  Maintenance("Создание записей по вводу в эксплуатацию",AT2PutinVClass,AT2PutinMn,modAT2);
//  Maintenance("Create Tax Depreciation Transactions",AT2TaxDeprVClass,AT2TaxDeprMn,modAT2);
  Maintenance("Переоценка стоимости ОС",AT2ReevalVClass,AT2ReevalMn,modAT2);
  Maintenance("Определите обновление отдела в активах",DeptAssetVClass,DeptAssetMn,modAT2);
  Maintenance("Обновить начальную стоимость активов",AT2PurchValVClass,AT2PurchValMn,modAT2);
//  Maintenance("Create Asset Status Records",AT2GenTransVClass,AT2GenTransMn,modAT2);
//  Maintenance("Создание операций по амортизации",AT2GenTransVClass,AT2GenTransMn,modAT2);
//  Maintenance("Создать записи активов",AT2GenUnitVClass,AT2GenUnitMn,modAT2);

  Export("Экспорт в новый модуль Активы",ATVcEClass,ATVcEn,modAT2);

/* modDI - Ценообразование*/
  
  RegisterWS("Товары","Товары","Новый товар",INVc,modDI); 
  RegisterWS("Формула товаров","Формула товаров","Новая формула товаров",CPMVc,modDI); 
  RegisterWS("Скидочные матрицы","Скидочные матрицы","Новая скидочная матрица",RebVc,modDI); 
  RegisterWS("Скидки по мультпокупке","Скидки при мультипокупке","Скидки при мультипокупке",MultiBuyRebVc,modDI); 
  RegisterWS("Цены","Цены","Новая цена",PLVc,modDI); 
  RegisterWS("Прейскуранты","Прейскуранты","Новый прейскурант",PLDefVc,modDI); 
  RegisterWS("Формулы цен","Формулы цен","Новая формула цен",PFormVc,modDI); 
//  RegisterWS("Promotions","Promotions","New Promotion",PromotionVc,modDI);
//  RegisterWS("Promotion Conditions","Promotion Conditions","New Promotion Condition",PromotionCondVc,modDI);
//  RegisterWS("Promotion Filters","Promotion Filters","New Promotion Filter",PromotionFilterVc,modDI);
  RegisterWS("Скидки от количества","Скидки от количества","Новая скидка от количества",StaffVc,modDI); 

  Report("Список таблиц скидок",RebListRClass,RebListRn,0,modDI);
  Report("Статистика скидок",Cust2STRClass,Cust2STRn,0,modDI);
  Report("Список товаров",ArtRClass,ArtRn,0,modDI);
  Report("Прейскуранты",PriceRClass,PriceRn,0,modDI);
  Report("Контроль цены продажи",SalesPriceCheckRClass,SalesPriceCheckRn,0,modDI);

  if (HasLocalization("DEN")) then begin
    Import("Импорт цен товаров",INDanIn,INDanIn,modDI);
  end;
  Import("Обновление стоимости",INPrUpdIn,INPrUpdIn,modDI);

  Setting("Цены со скидкой",PLQLClass,modDI);
  Setting("Группы товаров",ITLClass,modDI);

  Maintenance("Рассчитать цены",CalcPricesVClass,CalcPriceListsMn,modDI);
  Maintenance("Удалить цены",DelPriceListVClass,DelPriceLMn,modDI);
  Maintenance("Обновить отпускные цены товаров",ItemPricesVClass,ItemPricesMn,modDI);
  Maintenance("Обновить стоимость товаров",ItemCostPricesVClass,INCostPriceMn,modDI);

/* modCO - Контракты*/

  RegisterWS("Contracts","Contracts","New Contract",COVc,modCO); 
  RegisterWS("Комм. предложения по контрактам","Комм. предложения по контрактам","Новое комм. предложение по контрактам",CQVc,modCO); 
  RegisterWS("Статус контракта","Статус контракта","Новый статус контракта",COCQStatVc,modCO); 
  RegisterWS("Сервисные соглашения","Сервисные соглашения","Новое сервисное соглашение",SVCVc,modCO); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modCO); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modCO); 
  RegisterWS("Комиссионный контракт","Комиссионный контракт","Новый комиссионный контракт",ComisionCOVc,modCO); 
  
  Document("Персональные этикетки контрактов",ContLabRClass,ContLabForm,ContLabFClass,modCO);
  Document("Предложения по контрактам",ContQuoteRClass,ContQuoteForm,ContQuoteFClass,modCO);
  Document("Контракты",ContractRClass,ContractForm,ContractFClass,modCO);
  Document("Этикетки клиентов/поставщиков",CuLabRClass,CuLabForm,CuLabFClass,modCO); 
//  Document("Credit Query",CreditQueryRClass,CreditQueryForm,CreditQueryFClass,modCO);
//  Document("Delivery Acceptance",ContDeliveryRClass,ContDeliveryForm,ContDeliveryFClass,modCO); 
//  Document("Insurance",InsuranceRClass,InsuranceForm,InsuranceFClass,modCO);
//  Document("Transfer Notice",TransNotRClass,TransNotForm,TransNotFClass,modCO);
//  Document("Sales Agreement",ContSalesRClass,ContSalesForm,ContSalesFClass,modCO); 

  Setting("Типы контрактов",ContractClassTClass,modCO);
  Setting("Типы калссификации контрактов",HWCOClassTypeLClass,modCO);  
  Setting("Постоянные контракта",CODefValTClass,modCO);
  Setting("Настройки контрактов",ContractSetTClass,modCO);
  Setting("Постоянные контракта клиента",CUCODefValLClass,modCO);
  Setting("Типы описания товаров",IDTTClass,modCO);
  Setting("Серии номеров - Contracts",COSerTClass,modCO);
  Setting("Обновление контрактов",RenewCOLClass,modCO);
//  Setting("Funder Increase",FunderIncTClass,modCO);
//  Setting("Margin",MarginTClass,modCO);
//  Setting("Purchase Option",PurOptLClass,modCO);
//  Setting("Quotation of Bond",QBLClass,modCO);
//  Setting("SWAP Option",SWAPLClass,modCO);

  Report("Контакты по контрактам",Contra2RClass,Contra2Rn,0,modCO);
  Report("История контрактов",COHistRClass,COHistRn,0,modCO);
  Report("Статистика по товарам контракта",COINStatisticsRClass,COINStatisticsRn,0,modCO);
  Report("Список контрактов",CORClass,CORn,0,modCO);
  Report("Статус контрактов/предложений",CQStatRClass,CQStatRn,0,modCO);
  Report("Стоимость контрактов",COworthRClass,COworthRn,0,modCO);
  Report("История контрактов факторинг-клиентов",COInvToHistRClass,COInvToHistRn,0,modCO);  
  Report("Сч/ф факторинг-клиентам",COInvToIVRClass,COInvToIVRn,0,modCO);
  Report("Сч/ф по контрактам",COInvRClass,COInvRn,0,modCO);
//  Report("Контракты отфактурируемые за месяц",ContrPeriodicRClass,ContrPer2Rn,0,modCO);
//the code doesn't care for period types, periods, contract numbers
//anything really but the class
//and it shows values per month, I think it was done for customer or for our internal use
//Plenty of lines code needed to be added to make it proper
//  Report("Contract Follow Up",FollowUpRClass,FollowUpRn,0,modCO);
/* Complain to Kjell before the end of January if you need this */
//  Report("Contract Value",COvalueRClass,COvalueRn,0,modCO);

  Maintenance("Закрыть неоплаченные контракты",CancelDueCOVClass,CancelDueCOMn,modCO);
  Maintenance("Изменить валюту контракта",ChangeCOCurrencyVClass,ChangeCOCurrencyMn,modCO);
  Maintenance("Изменить контракты",ChangeCOVClass,ChangeCOMn,modCO);
  Maintenance("Выписать сч/ф по контрактам",CreateCOInvVClass,CreateCOInvMn,modCO);
  Maintenance("Возобновить контракты",RenewCOVClass,RenewCOMn,modCO);
  Maintenance("Соглашения об обслуживании",SVCVClass,SVCMn,modCO);
  Maintenance("Обновить контракты",UpdateCOVClass,UpdateCOMn,modCO);

  Export("Циркуляция",CirculationEClass,CirculationEn,modCO);

/* modWHM */
  RegisterWS("Склады","Склады","Новый склад",LocationVc,modWHM); 
  RegisterWS("Местонахождения складов","Местонахождения складов","Новое местонахождение склада",LocAreaVc,modWHM); 
  RegisterWS("Позиции","Позиции","Новая позиция",PosVc,modWHM); 
  Register("Очередь погрузчика","Очередь погрузчика",ForkLiftQueVc,modWHM);
  RegisterWS("Подъёмники","Подъёмники","Новый подъёмник",ForkLiftVc,modWHM); 
  Register("Интерфейс водителя погрузчика","Водитель погрузчика",ForkLiftDriverWClass,modWHM);
  Register("Управление складом","Управление складом",MainWHMTClass,modWHM); 

  Document("Ярлыки паллет",PalletLabRClass,PalletLabForm,PalletLabFClass,modWHM);

  Report("Deliveries for Purchase",SHForPURClass,SHForPURn,0,modWHM);
  Report("Места отгрузки",PositionsForSHRClass,PositionsForSHRn,0,modWHM);
  Report("Ошибки очереди погрузчика",ForkLiftQueErrRClass,ForkLiftQueErrRn,0,modWHM);
  Report("Товары на местах",INPosRClass,INPosRn,0,modWHM);
  Report("Товары на погрузку",OrdersToForkLiftRClass,OrdersToForkLiftRn,0,modWHM);
  Report("Ошибки места",PositionErrRClass,PositionErrRn,0,modWHM);
  Report("История места",PositionHistRClass,PositionHistRn,0,modWHM);

  Maintenance("Assign Picking Queue to ForkLift",AssignToForkLiftVClass,AssignToForkLiftMn,modWHM);
  Maintenance("Закрыть место",PositionCloseVClass,PositionCloseMn,modWHM);
  Maintenance("Пеереместить пустые паллеты",MoveEmptyPalletsVClass,MoveEmptyPalletsMn,modWHM);
  Maintenance("Переместить товары на участок погрузки",MoveToPickAreaVClass,MoveToPickAreaMn,modWHM);
  Maintenance("NT7000 Cold Restart",NT7000ColdRestartVClass,NT7000ColdRestartMn,modWHM);
//  Maintenance("Move On Positions",MoveToPosVClass,MoveToPosMn,modWHM);

  Setting("Погрузчик, NT7000",NT7000PickModeTClass,modWHM);
  Setting("NT7000 Настройки складов",NT7000ConnLClass,modWHM);
  Setting("NT7000 Locations Connection Settings",NT7000NumbersLClass,modWHM);

  Import("Места",ImportPosIn,ImportPosIn,modWHM);

/* modIN - Склад */

  RegisterWS("Отгрузки","Отгрузки","Новая отгрузка",SHVc,modIN); 
  RegisterWS("Поступления","Поступления","Поступления",PUVc,modIN); 
  RegisterWS("Списания со склада","Списания со склада","Новое списание со склада",SDVc,modIN); 
  if (HasMultiLocations) then begin
    RegisterWS("Перемещения товаров","Перемещения товаров","Новое перемещение товаров",StockMovVc,modIN); 
  end;
  if (HasReturnedGoods) then begin
    RegisterWS("Возвраты товаров","Возвраты товаров","Новый возврат",RetVc,modIN); 
  end;
  if (HasRetGoodsToSupp) then begin
    RegisterWS("Возвраты товаров поставщикам","Возвраты товаров поставщику","Новый возрат товаров поставщику",RetPUVc,modIN); 
  end;
  RegisterWS("Инвентаризации","Инвентаризации","Новая инвентаризация",StockTakeVc,modIN); 
  RegisterWS("Переоценка склада","Переоценка склада","Новая переоенка склада",SRVc,modIN); 

  Setting("Настройки записей - склад",INAccTClass,modIN); 
  Setting("Штрих-коды",BarcodeLClass,modIN);
  Setting("Изменения отпускных цен",BPCLClass,modIN);
  Setting("Спецификации партий",BatchTextLClass,modIN);
  Setting("Учет стоимостей",CostAccTClass,modIN);
  Setting("Пакеты отгрузки",SHPackagesLClass,modIN);
  if (HasLocalization("PRT")) then begin 
    Setting("Electronic Shipment",EShipPRTTClass,modIN);
  end;
  Setting("Транспортные компании",FreightCompanyLClass,modIN);
  Setting("Варианты товаров",VARLClass,modIN);
  Setting("Группы варианта товаров",VARGLClass,modIN);
  Setting("Товары",INLClass,modIN);
  Setting("Счета складов",LocationAccTClass,modIN); 
  Setting("Типы классификаций складов",LocClTypeLClass,modIN);
  Setting("Классификации складов",LocClLClass,modIN);
  Setting("Группы складов",LocGrLClass,modIN);
  Setting("Склады",LocationLClass,modIN);
  Setting("Минимальные кол-ва по складам",MinPerLocLClass,modIN);
  Setting("Серии номеров - Отгрузки",SHSerTClass,modIN);
  Setting("Серии номеров - Поступления",PUSerTClass,modIN);
  Setting("Серии номеров - Возвраты товаров",RetSerTClass,modIN);
  Setting("Серии номеров - Возвраты товаров поставщикам",RetPUSerTClass,modIN);
  Setting("Серии номеров - Списания со склада",SDSerTClass,modIN);
  Setting("Серии номеров - Перемещения товаров",StockMovSerTClass,modIN);
  Setting("Серии номеров - #Склад# Движение сч.-ф.",StockMovInvSerTClass,modIN); 
  Setting("Серии номеров - Переоценка склада",SRSerTClass,modIN);
  Setting("Серии номеров - Инвентаризации",StockTakeSerTClass,modIN);
  Setting("Типы упаковок",PackTypeLClass,modIN);
  Setting("Отгрузочные листы",PrickingListTClass,modIN); 
  Setting("Структуры",RecLClass,modIN);
  Setting("Настройки возврата товаров",RetGoodsTClass,modIN);
  Setting("Маршруты",DelRouteLClass,modIN);
  Setting("Маршруты/Настройки складов",CustRouteLClass,modIN);
  Setting("Настройки серийных номеров товаров",SerNrTrackTClass,modIN);
  Setting("Источники",SourceLClass,modIN);
  Setting("Длительности перемещений",DurationLClass,modIN);
  Setting("Настройки переоценки склада",SRSTClass,modIN);
  Setting("Настройки склада",MainStockTClass,modIN);
  Setting("Структурированные товары",StructPrintTClass,modIN);
  Setting("Товары замены",SupersessionINLClass,modIN);
  Setting("ID магазинов поставщика",VEStoreIDLClass,modIN);
  Setting("Поля, задаваемые пользователем - Накладные расходы",ExtraCostLabelTClass,modIN);
  Setting("Маски вариантов товаров",VARMaskTClass,modIN);
  Setting("Наборы вариантов",VARMasksLClass,modIN);
  Setting("Настройки вариантов",VarietyTClass,modIN);
  Setting("Подмножества вариантов",VARSubsetsLClass,modIN);
  Setting("Средневзвешенные",WeigAvLClass,modIN);
  if (HasLocalization("NOR")) then begin   
    Setting("Winedi",WinediTClass,modIN); 
  end;
//  Setting("Goods In Transit",PrelPULClass,modIN);//not finished, noone interested in
//  Setting("Late Cost",LateCostLClass,modIN); will be in 4.1
//  Setting("Серии номеров - Late Cost",LateCostSerTClass,modIN); will be in 4.1
//  Setting("SerBals",SerBalLClass,modIN);

  Document("Этикетки адресов",AdrLabRClass,AdrLabForm,AdrLabFClass,modIN);
  Document("Изменение отпускной цены",BasePriceChangeRClass,BPChangeForm,BasePriceChangeFClass,modIN);
  Document("Накладные отгрузки",Sh1RClass,Sh1Form,Sh1FClass,modIN);
  Document("Этикетки фрахта",SHLabRClass,SHLabForm,SHLabFClass,modIN);
  Document("Этикетки поступлений",PULabRClass,PULabForm,PULabFClass,modIN);
  Document("Поступления",PurchaseRClass,PurchaseForm,PurchaseFClass,modIN);
  Document("Этикетки товаров",ItemLabelRClass,ItemLabelForm,ItemLabelFClass,modIN);
  Document("Накладные",Sh2RClass,Sh2Form,Sh2FClass,modIN);
  Document("Проформы отгрузки",Sh3RClass,Sh3Form,Sh3FClass,modIN);
  Document("Возврат товаров",RetRClass,RetForm,RetFClass,modIN);
  Document("Возврат товара поставщику",RetPURClass,RetPurchaseForm,RetPUFClass,modIN);
  Document("Списание со склада",SDRClass,SDForm,SDFClass,modIN);
  Document("Перемещение товаров",StockMovRClass,StockMovForm,StockMovFClass,modIN);
  if (HasConsStockMoveInvoices) then begin
  Document("Склад Движение сч.-ф.",StockMovInvRClass,StockMovInvForm,StockMovInvFClass,modIN); 
  end;
  Document("Переоценки склада",SRRClass,SRForm,SRFClass,modIN);
  Document("Инвентаризация, сравнение",STRClass,StockTakeForm,StockTakeFClass,modIN);
//  Document("Товары в пути",PrelPURClass,PrelPUForm,PrelPUFClass,modIN);
//  Document("Late Cost",LateCostRClass,LateCostForm,LateCostFClass,modIN); will be in 4.1

  Report("Анализ просроченности склада",AgedINRClass,AgedINRn,0,modIN);
  Report("Сроки годности",BestBefRClass,BestBefRn,0,modIN);
  Report("Анализ стоимости",INCostAnalyseRClass,INCostAnalyseRn,0,modIN);
  Report("Кредитные счета, возврат на склад",CrStckRClass,CrStckRn,0,modIN);
  Report("Нормативы остатков склада",PurRClass,PurRn,0,modIN);
  Report("Нормативы остатков по складу",PurLocRClass,PurLocRn,0,modIN);
  Report("Журнал отгрузки",SHJRClass,ShipRn,0,modIN);
  Report("Отчёт по отгрузкам",SHListRClass,ShipListRn,0,modIN);
  if (HasLocalization("SRB")) then begin
    Report("Evidence of Trade (KEPU, Serbia)",KEPURClass,KEPURn,0,modIN);
  end;
  if (HasLocalization("HRV")) then begin         
    Report("Удостоверение сделки",KPHRVRClass,KPHRVRn,0,modIN);           
  end;
  Report("Журнал поступлений",PUJRClass,PUJRn,0,modIN);
  Report("Список поступлений",PUListRClass,PUListRn,0,modIN);
//  Report("Сверка поступления",PUReconRClass,PUReconRn,0,modIN);
  Report("Список групп товаров",ITListRClass,ITListRn,0,modIN);
  Report("История товаров",INrsRClass,INrsRn,0,modIN);  
  Report("Статистика товар/способ отгрузки",INDMSRClass,INDMRn,0,modIN); 
  if (HasLocalization("LTU")) then begin
    Report("iVAZ",LitiVAZRClass,LitiVAZRn,0,modIN); //!!TRANSLATE
  end; 
  Report("Список складов",LocationRClass,LocationRn,0,modIN);
  Report("Список структур (сделано из)",Rec2RClass,Rec2Rn,0,modIN);
  Report("Журнал возвратов на склад",RetJRClass,RetGoodsJRn,0,modIN);
  Report("Журнал возвратов поставщикам",RetPUJRClass,RetPUJRn,0,modIN);
  if (HasLocalization("HRV")) then begin         
    Report("Расчёт цен по продажам",SPCHRVRClass,SPCHRVRn,0,modIN);         
  end;
  Report("История серийных номеров",SerialNrRClass,SerialNrRn,0,modIN);
  Report("Список источников",SourRClass,SourceListRn,0,modIN);  
  Report("Журнал списаний со склада",SDJRClass,StockDepRn,0,modIN);
  Report("Журнал по складу",StockJInRClass,StockInRn,0,modIN);
//  Report("Stock Level Planning",PlannedStockRClass,PlannedStockRn,0,modIN);
  Report("Отчёт по складу",INRClass,InvValRn,0,modIN);
  Report("Сравнение отчетов по складу",StDifRClass,StDifRn,0,modIN);
  Report("Журнал перемещения товаров",StockMovJRClass,StockMovJRn,0,modIN);
  Report("Журнал отсутствия товаров",StockJOutRClass,StockOutRn,0,modIN);
  Report("Журнал переоценки стоимости склада ",SRJRClass,StockRevJRn,0,modIN); 
  Report("Сравнение инвентаризации",STCompRClass,STCompRn,0,modIN);
  Report("Перечень инвентаризации",StockTakeRClass,StockTakeRn,0,modIN);
  Report("Журнал инвентаризации",StTakeJRClass,StTakeJRn,0,modIN);
  Report("Статистика поставщик/товар",VeInRClass,VeInRn,0,modIN);
  if (HasLocalization("SRB")) then begin
    Report("Торговая книга (Сербия)",TradeBookRClass,TradeBookRn,0,modIN);  
  end;
  Report("Таблица поездки",TripSheetRClass,TripSheetRn,0,modIN);
  Report("Доступные варианты товаров",AvailVarsRClass,AvailVarsRn,0,modIN);
  Report("Варианты товаров на складе",VARMaskStockRClass,VARMaskStockRn,0,modIN);
  Report("Контроль вариантов товара",VarsControlRClass,VarsControlRn,0,modIN);
  Report("Средневзвешенная",WeighAvRClass,WeighAvRn,0,modIN);
//  Report("StockVc",StockVcListRClass,StockVcRn,0,modIN);// will be used in 4.1
//  Report("StockVc",StockVcListRClass,StockVcRn,0,modIN);// will be used in 4.1
  if (HasLocalization("SWE")) then begin   
    Export("ASG Labels",ExpASGEClass,ExpASGEn,modIN);  
  end;
    
  if (HasLocalization("PRT")) then begin
    Export("Инвентарный лист для налоговых служб",PRTInventoryEClass,PRTInventoryEn,modIN); 
//    Export("",PortStockXmlEClass,PortStockXmlEn,modIN);
  end;
  if (HasLocalization("LTU")) then begin
    Export("iVAZ",LitiVAZEClass,LitiVAZEn,modIN); //!!TRANSLATE
  end;  
  
  Export("Остатки по складу",StBalClass,StBalEn,modIN);
  Export("Отчёт по складу",INEClass,InvValEn,modIN);
//  if (HasJewelleryInterface) then begin
//    Export("#Stock# List per Serial Number",INSerNoEClass,InvValSerNoEn,modIN);
//  end;
  if (HasLocalization("NOR")) then begin     
  Export("Winedi",WinEDIEClass,ExpWinEDIEn,modIN);
  end;

  Maintenance("Переоценка склада",AgedStockRevVClass,AgedStockRevMn,modIN);
  Maintenance("Анализ переоценки стоимости",INCostAnalyseVClass,INCostAnalyseMn,modIN);
  Maintenance("Создать записи инвентаризации",GenSTVClass,GenSTMn,modIN);
//  Maintenance("Начало последнего взноса стоимости",LateLandedCostVClass,LateLandedCostMn,modIN);
//  Maintenance("Setup Multi-location",ConvToMultiLocationVClass,ConvToMultiLocationMn,modIN);
  Maintenance("Сравнение инвентаризации",STCompVClass,STCompMn,modIN);
  Maintenance("Изменить учетные стоимости",UpdInpriceVClass,UpdInpriceMn,modIN);
  Maintenance("Обновить структуры",UpdRecepyVClass,UpdRecepyMn,modIN);

// modCuAcc

  RegisterWS("Клиентские счета","Клиентские счета","Новый клиентский счёт",CuAccVc,modCuAcc); 
  RegisterWS("Процентные условия","Процентные условия","Новые процентные условия",IRVc,modCuAcc); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modCuAcc); 
  RegisterWS("Процентные коды","Процентные коды","Новый процентный код",IntVc,modCuAcc); 

  Setting("Настройки записей - займы",CuAccTClass,modCuAcc);
  Setting("Статус займа",LoanStatusTClass,modCuAcc);
  Setting("Успешность займа",LoanSuccessTClass,modCuAcc);

  Report("Вычисление процентов",Int2RClass,Int2Rn,0,modCuAcc);
  Report("Статус займа",LoanStatRClass,LoanStatRn,0,modCuAcc);
/* This report is now commented out from C-Code. */
/* Give me feedback, why was it commented out from here? 
It has gone , thee second report has benn added instead*/
//  Report("Interest Calculation",IntRClass,IntRn,0,modCuAcc);
/* Come up with a better name for this report */

  Maintenance("Выписать сч/ф",CreateLoanIVVClass,CreateLoanIVMn,modCuAcc);
  Maintenance("Пересчитать взносы",RecLoanIntVClass,RecLoanIntMn,modCuAcc);
  
// modExp

  RegisterWS("Авансовые отчеты","Авансовые отчеты","Новый авансовый отчет",ExpVc,modExp); 
  RegisterWS("Выплаты персоналу","Выплаты персоналу","Новая выплата персоналу",PPVc,modExp); 
  RegisterWS("Путевые листы","Путевые листы","Новый путевой лист",WayListVc,modExp); 
  RegisterWS("Суточные возмещения","Суточные возмещения","Новые суточные возмещения",DAVc,modExp); 

  Report("Журнал суточных возмещений",DAJRClass,DAJRn,0,modExp);
  Report("Журнал авансовых отчетов",ExpJRClass,ExpRn,0,modExp);
  Report("Журнал  расчетов с ПЛ",PersPerRClass,PersPerRn,0,modExp);
  Report("Журнал выплат",PPJRClass,PPRn,0,modExp);
  Report("Статистика НДС по аванс. отчетам",ExpVATRClass,ExpVATRn,0,modExp);
  Report("Журнал путевых листов",WLJRClass,WLJRn,0,modExp);

//  Setting("Account Usage Expenses",ExpAccTClass,modExp);
  Setting("Машины",WLCarLClass,modExp);
  Setting("Нормы суточных возмещений",DARateLClass,modExp);
  Setting("Настройки суточных возмещений",DATClass,modExp);
  Setting("Расстояния",WLDistLClass,modExp);
  Setting("Настройки авансовых отчетов",ExpTClass,modExp);
  Setting("Типы горючего",WLPetroilTClass,modExp);
  Setting("Настройки путевого листа",WLSettingsWClass,modExp);
  Setting("Серии номеров - Суточные возмещения",DASerTClass,modExp);
  Setting("Серии номеров - Авансовые отчеты",ExpSerTClass,modExp);
  Setting("Серии номеров - Выплаты",PPersSerTClass,modExp);
  Setting("Серии номеров - Путевые листы",WayListSerTClass,modExp);
  Setting("Цели поездок",WLPurposeLClass,modExp);

  Document("Суточные возмещения",DARClass,DAForm,DAFClass,modExp);
  Document("Авансовые отчеты",ExpRClass,ExpForm,ExpFClass,modExp);
  Document("Выплаты ПЛ",PPRClass,PersPayForm,PPDFClass,modExp);
  Document("Путевые листы",WayListRClass,WayListForm,WayListFClass,modExp);

/* modPO */

  RegisterWS("Заказы поставщикам","Заказы поставщикам","Новый заказ поставщику",POVc,modPO); 
  RegisterWS("Комм. предложения на закупку","Комм. предложения на закупку","Новое комм. предложение на закупку",POQTVc,modPO); 
  RegisterWS("Внутренние заказы","Внутренние заказы","Новый внутренний заказ",IntORVc,modPO); 
  RegisterWS("Товары поставщиков","Товары поставщиков","Новый товар поставщика",PIVc,modPO); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modPO); 
  RegisterWS("Закупочные процессы","Закупочные процессы","Новый закупочный процесс",POCQStatVc,modPO); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modPO); 
  RegisterWS("Уведомления о поставке","Уведомления о поставке","Новое уведомление о поставке",DropSHVc,modPO); 
//  Register("Списки поставки","Списки поставки",SPLVc,modPO);
  
  Setting("Условия доставки",ShipDealLClass,modPO);
  Setting("Предоплаты",PODownPayTClass,modPO); 
  Setting("Классы внутренних заказов",IntORClassLClass,modPO);
  Setting("Настройки внутренних заказов",IntORSettingTClass,modPO);
  Setting("Серии номеров - Внутренние заказы",IntORSerTClass,modPO);
  Setting("Серии номеров - Процессы по заказам поставщиков",POCQStatSerTClass,modPO);
  Setting("Серии номеров - Предложения по заказам поставщиков",POQTSerTClass,modPO);
  Setting("Серии номеров - Заказы поставщикам",POSerTClass,modPO);
//  Setting("Серии номеров - Списки поставки",SPLSerTClass,modPO);
  Setting("Диапазон цен",PriceRangeTClass,modPO);
  Setting("Типы заказов поставщикам",POrderClassLClass,modPO);
  Setting("Письмо с заказом поставщику",POMailTClass,modPO);
  Setting("Настройки заказов поставщикам",POSettingTClass,modPO);
  Setting("Тендеры",TenderLClass,modPO);

  Document("Внутренние заказы",IntORRClass,IntORForm,IntORFClass,modPO); 
  Document("Подтверждения заказов поставщикам",POConfRClass,POConfForm,POConfFClass,modPO); 
  Document("Напоминания заказов поставщикам",PORemRClass,PORemForm,PORemFClass,modPO); 
  Document("Заказы поставщикам",PORClass,POForm,POFClass,modPO);
  Document("Предложения по заказам поставщикам",POQTRClass,POQTForm,POQTFClass,modPO); 
  Document("Уведомл. об отгрузке",DropSHRClass,DropSHForm,DropSHFClass,modPO); 
  
  Report("Нормативы остатков склада",PurRClass,PurRn,0,modPO);
  Report("Недостаток по складу",DfncyStockRClass,DfncyStockRn,0,modPO);
  Report("Сравнение поступлений со сч/ф поставщика",PUVIDiffRClass,PUVIDiffRn,0,modPO);
  Report("Журнал внутренних заказов",IntOrdJRClass,IntOrdJRn,0,modPO);
  Report("Статус внутренних заказов",IntORStatRClass,IntORStatRn,0,modPO);
  Report("Список внутренних заказов",IntORStockRClass,IntORStockRn,0,modPO);
  Report("Отчёт по заказам поставщикам",POOrdStockRClass,POOrdStockRn,0,modPO);
  Report("Прейскуранты поставщиков",PurPriceRClass,PurPriceRn,0,modPO);
  Report("Расх. будущих периодов по заказам",POCommitDetailRClass,POCommitDetailRn,0,modPO);//JJ
  Report("Журнал заказов поставщикам",PurOrdJRClass,PurOrdJRn,0,modPO);
  Report("Справка по заказам поставщикам",POStatRClass,POStatRn,0,modPO);
  Report("Журнал заказов коммерческих предложений поставщикам",PurOrdQTJRClass,PurOrdQTJRn,0,modPO);
  Report("Заявки на покупку",CreatePORClass,CreatePORn,0,modPO);
  Report("Перераспределение требований",PORequireRClass,PORequireRn,0,modPO);  
  Report("Анализ поставщика",VEAnaRClass,VEAnaRn,0,modPO);
  Report("Оценка поставщика",VEEvalRClass,VEEvalRn,0,modPO);
  Report("Статистика поставщик/товар",VeInRClass,VeInRn,0,modPO);

  Maintenance("Создать заказы поставщику",CreatePOVClass,POCreateMn,modPO);
  Maintenance("Создать заказы поставщику из недостатка по складу",PODfncyStockVClass,DfncyStockMn,modPO);
  Maintenance("Удалить товары поставщиков",DelPIVcVClass,DelPIVcMn,modPO);
  Maintenance("Пересчитать заказы поставщикам",RecalcPOVClass,RecalcPOMn,modPO); // should be in modDBMain
  Maintenance("Перераспределение требований",PORequireVClass,PORequireMn,modPO);
  Maintenance("Обновить приобретаемые товары",UpdatePIVClass,UpdatePIMn,modPO);

/* modProd - Производство */

  RegisterWS("Сессии производства","Сессии производства","Новое производство",ProdVc,modProd); 
  RegisterWS("Заказы на производство","Заказы на производство","Новый заказ на производство",ProdOrderVc,modProd); 
  RegisterWS("Субституты","Субституты","Новый субститут",ProdItemVc,modProd); 
  RegisterWS("Операции в производстве","Операции в производстве","Новая операция в производстве",ProdOperationVc,modProd); 
  RegisterWS("Рецепты","Рецепты","Новый рецепт",RecVc,modProd); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modProd); 
  RegisterWS("Машинные часы","Машинные часы","Новый машинный час",MachineHoursVc,modProd); 
  RegisterWS("Изменения в машинных часах","Изменения в машинных часах","Новое изменение в машинных часах",MachineHoursChangesLClass,modProd); 

  Setting("Настройки счетов для модуля Производство",ProdAccClass,modProd);
  Setting("Товары автоматического производства",AutoProdLClass,modProd);
  Setting("Норма выхода товара",INEffLClass,modProd);
  Setting("Группы машин",MachineGroupsTClass,modProd);
  Setting("Материалы",MaterialLClass,modProd); 
  Setting("Серии номеров - Операции производства",ProdOperationSerTClass,modProd);
  Setting("Серии номеров - Заказы на производство",ProdOrderSerTClass,modProd);
  Setting("Серии номеров - Производство",ProdSerTClass,modProd);
  Setting("Классы производства",ProdClassLClass,modProd);
  Setting("Настройки производства",ProdSettingsTClass,modProd);
  Setting("Маршрут",RoutingLClass,modProd);
  Setting("Стандартные операции",StdOperationLClass,modProd);
  Setting("Стандартные проблемы",StandProblemLClass,modProd);
  Setting("Рабочие смены",WorkShiftLClass,modProd);

  Report("Нормативы остатков склада",PurRClass,PurRn,0,modProd);
//  Report("Статистика снятий с производства",ProdStatDiscRClass,ProdStatDiscRn,0,modProd);
  Report("Статистика снятий с производства",DiscardStatRClass,DiscardStatRn,0,modProd);
  Report("Эффективность товара",EffectRClass,EffectRn,0,modProd);
  Report("Технологический процесс",ProcessFlowRClass,ProcessFlowRn,0,modProd);
  Report("Возможности производства",MaxprodRClass,MaxprodRn,0,modProd);
  Report("Production Cost Allocation",CostAllocPlanRClass,CostAllocPlanRn,0,modProd);
  Report("Недопроизводство",ProdDefRClass,ProdDefRn,0,modProd);
  Report("Журнал производства",ProdRClass,ProdRn,0,modProd);
  Report("Создание операций производства",ProdOperationsRClass,ProdOperationsRn,0,modProd);
  Report("Журнал заказов на производство",ProdOrdRClass,ProdOrdRn,0,modProd);
  Report("Планирование производства",ProdOrderPlanRClass,ProdOrderPlanRn,0,modProd);
  Report("Очередь производства",ProdOrderQueueRClass,ProdOrderQueue2Rn,0,modProd);
  Report("Статистика производства",ProdStatRClass,ProdStatRn,0,modProd);
  Report("Статус производства",ProdStatusRClass,ProdStatusRn,0,modProd);
  Report("Расчет стоимости структуры",CostCalcRClass,CostCalcRn,0,modProd);
  Report("Сравнение стоимости структур",RecCostCompRClass,RecCostCompRn,0,modProd);
  Report("Список структур (сделано из)",Rec2RClass,Rec2Rn,0,modProd);
  Report("Список структур (компоненты)",RecRClass,RecRn,0,modProd);
  Report("Запуск заказов производства",ProdQueueRClass,ProdQueueRn,0,modProd);
/* Complain to Kjell before the end of January if you need this */
//  Report("#Stock# Prediction Report",StockPredictRClass,ProdPlanRn,0,modProd);
//  Report("TestProdRep",TestProdRepRClass,TestProdRepRn,0,modDBMain);

  Document("Этикетки производства",ProdLabelRClass,ProdLabelForm,ProdLabelFClass,modProd);
  Document("Накладные операций производства",ProdOperation2RClass,ProdOperation2Form,ProdOperation2FClass,modProd);
  Document("Заказ на производство",ProdOrder2RClass,ProdOrder2Form,ProdOrder2FClass,modProd);
  Document("Накладные производства",ProdOrder3RClass,ProdOrder3Form,ProdOrder3FClass,modProd);
  Document("Производство",ProdOrderRClass,ProdOrderForm,ProdOrderFClass,modProd);
  Document("Recipe",RecDocRClass,RecForm,RecFClass,modProd);
  Document("Routing",RoutingRClass,RoutingForm,RoutingFClass,modProd);
  Document("Маршрут производства",RoutingPrRClass,RoutingPrForm,RoutingPrFClass,modProd);
  Document("Маршрут заказа на производство",RoutingPrOrdRClass,RoutingPrOrdForm,RoutingPrOrdFClass,modProd);

  Maintenance("Создать планируемые записи",PlanRecordsVClass,PlanRecordsMn,modProd);
  Maintenance("Обновить структуры",UpdRecepyVClass,UpdRecepyMn,modProd);
 
 
/* modQT - Предложения*/

  RegisterWS("Коммерческие предложения","Коммерческие предложения","Новое комм. предложение",QTVc,modQT); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modQT); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modQT); 
  RegisterWS("Цены","Цены","Новая цена",PLVc,modQT); 
//  Register("Предв. предложения","Предв. предложения",PreQTVc,modQT); no funcionality for this one

  Setting("Серии номеров - Предложения",QTSerTClass,modQT);
  Setting("Виды предложений",QuoteClassTClass,modQT);
  Setting("Настройки предложений",QTSettTClass,modQT);

  Document("Предложения",QTRClass,QTForm,QTFClass,modQT);
  if (HasLocalization("AGO,PRT")) then begin
  Document("Проформа сч/ф, Коммерческое предложение",ProformaQTRClass,ProformaQTForm,ProformaQTFClass,modQT);  
  end;

  Report("Журнал подтвержденных предложений",QTHistoryRClass,QTHstRn,0,modQT);
  Report("Список предложений",QTStkRClass,QTStkRn,0,modQT);
  Report("Воронка продаж",QTPipelineRClass,QTPipelineRn,0,modQT);
  Report("Прейскурант",PriceRClass,PriceRn,0,modQT);
  if (HasLocalization("AGO,PRT")) then begin
  Report("Журнал инвойс-проформ",ProformaIVJRClass,ProformaIVJRn,0,modQT); 
  end;
  Report("Статистика решений по предложениям",QTAccRClass,QTAccRn,0,modQT);
  Report("Прогноз предложений",QTForeCRClass,QTForecRn,0,modQT);
  Report("Журнал предложений",QTJRClass,QTJRn,0,modQT);
  Report("Статистика предложений по продавцам",QTSMStatsRClass,QTSMStatRn,0,modQT);
  Report("Статус предложения",QTStatusRClass,QTStatusRn,0,modQT);
//  Report("Прогноз",ForecastRClass,ForecastRn,0,modQT);
//  Report("Статистика предложений",QTStatRClass,QTStatRn,0,modQT);

  Maintenance("Обновить предложения",UpdateQTVClass,UpdateQTMn,modQT);

/* modSO - Счета клиентам*/

  RegisterWS("Счета клиентам","Счета клиентам","Новый счёт клиенту",ORVc,modSO); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modSO); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modSO); 
  RegisterWS("Цены","Цены","Новая цена",PLVc,modSO); 
  RegisterWS("Торговые контракты","Торговые контракты","Новый торговый контракт",ORCOVc,modSO); 
/* What is this???????? */
//  Register("Товары для замены","Замена",ReplINVc,modSO);

  Setting("Товары клиентов",CUINLClass,modSO);
  Setting("Адреса доставки",DelAddrLClass,modSO);
  Setting("Способы отгрузки",DMLClass,modSO);
  Setting("Условия отгрузки",ShipDealLClass,modSO);
  Setting("Авансовые платежи",DownPayTClass,modSO);
  Setting("Уровни риска",HazLevLClass,modSO);
  Setting("Серии номеров - Счета клиентам",ORSerTClass,modSO);
  Setting("Виды счетов",OrderClassLClass,modSO);
// Setting("Письмо со счетом клиенту",ORMailTClass,modSO);
  Setting("Настройки счетов",OrdSettTClass,modSO);
  Setting("Запланированная отгрузка",PlanDeliveryTClass,modSO);
  Setting("Доступ резервирования склада",ReservLocAccessLClass,modSO);
  Setting("Настройки складских резервирований",StockReservTClass,modSO);
  Setting("Складские резервирования",StockReservLClass,modSO);
 
 Document("Этикетки клиентов/поставщиков",CuLabRClass,CuLabForm,CuLabFClass,modSO);
  Document("Внутренние заказы клиентов",Or2RClass,Or2Form,Or2FClass,modSO);
  Document("Счета клиентам",ORRClass,OrdForm,OrdFClass,modSO);
  
  Report("Невыполненная отгрузка по счетам",ShipableRClass,ShipableRn,0,modSO);
  Report("Список запланированной отгрузки",DeliveryRClass,DeliveryRn,0,modSO);
  Report("Прогноз",ForecastRClass,ForecastRn,0,modSO);
  Report("Прибыль по счетам",ORGPRClass,ORGPRn,0,modSO);
  Report("Возможность фактурирования",InvableRClass,InvableRn,0,modSO);
  Report("Список товаров",ArtRClass,ArtRn,0,modSO);
  Report("Статистика объект/счет",ORObjStatRClass,ORObjStatRn,0,modSO);
  Report("Журнал счетов клиентам",ORJRClass,OrdRn,0,modSO);
  Report("Статус оплат по счетам",ORPayStatusRClass,ORPayStatusRn,0,modSO);
  Report("Статус счета клиенту",ORInfoRClass,ORInfoRn,0,modSO);
  Report("Заказанные товары",OrdItemRClass,OrdItemRn,0,modSO);
  Report("Отчёт по счетам клиентам",OrderStockRClass,OrderStockRn,0,modSO);
  Report("Несоответствие отгрузки счетам",OverShippedRClass,OverShippedRn,0,modSO);
  Report("Прейскурант",PriceRClass,PriceRn,0,modSO);
  Report("Возможности производства",MaxprodRClass,MaxprodRn,0,modSO);
  Report("Отсортированный список счетов клиентам",SORJRClass,SORJRn,0,modSO);
  Report("Список источников",SourceRClass,SourceRn,0,modSO);
  Report("Складские резервирования",INReservRClass,INReservRn,0,modSO);

  Maintenance("Штрих-коды и коды товаров",ICToBCVClass,ICToBcMn,modSO);
  Maintenance("Создать отгрузку по счетам",CreateSHsFSOsVClass,CreateSHsFromSOsMn,modSO);
  Maintenance("Создать счета-фактуры по предоплатам",DPFromORVClass,DownPayFromORMn,modSO); 
  Maintenance("Создать запланированные записи",PlanRecordsVClass,PlanRecordsMn,modSO);
  Maintenance("Создать запланированные записи по счетам",PlanSalesVClass,PlanSalesMn,modSO);
  Maintenance("Создать заказы поставщикам",GenPOFromORVClass,GenPOFromORMn,modSO);
  Maintenance("Cоздать перемещение по складам",SMFromORVClass,SMFromORMn,modSO);
  Maintenance("Выписать сч/ф на группу",GroupInvoiceVClass,GroupInvoiceMn,modSO);
  Maintenance("Выписать сч/ф по отгруженным счетам",CreateInvVClass,CreateInvMn,modSO);
  Maintenance("Пересчитать счета",RecalcORVClass,RecalcORMn,modSO);
/* WHAT IS THIS  ????? , it was written in HAL, someone has changed it and commented out, it was not me JJ*/
//  Maintenance("Создать симуляции из счетов",CreateSMVClass,CreateSMMn,modSO);
/*##  Maintenance("Пересчитать склад",FixStockVClass,FixStockMn,modSO);*/

/* modCredMan */
  
  RegisterWS("Кредитные соглашения","Кредитные соглашения","Кредитное соглашение",CredManVc,modCredMan); 
  RegisterWS("Типы кредитных соглашений","Типы кредитных соглашений","Новый тип кредитного соглашения",CredManTypeVc,modCredMan); 
  RegisterWS("Заявки на кредит","Заявки на кредит","Новая заявка на кредит",CredManAppVc,modCredMan); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modCredMan); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modCredMan); 

  Setting("События кредитного договора",CredManEventLClass,modCredMan);
  Setting("Настройки кредитного договора",CredManSetTClass,modCredMan);
  Setting("Типы жилья",DwellingTypeTClass,modCredMan);
  Setting("Этнические группы",EthnicGroupTClass,modCredMan);
  Setting("Платежи",InstallmentLClass,modCredMan);
  Setting("Проценты",CredManRateLClass,modCredMan);
  Setting("Серии номеров - Кредитный договор",CredManSerTClass,modCredMan);
  Setting("Серии номеров - Кредитные приложения",CredManAppSerTClass,modCredMan);
  Setting("Приветствия",SalutationTClass,modCredMan);
  Setting("Поля опред. пользователем - Кредитные приложения",CMAppUserLabelTClass,modCredMan);

  Report("Информация о кредитном договоре",CredManInfoRClass,CredManInfoRn,0,modCredMan);

  Document("Кредитные договоры",CredManDocRClass,CredManForm,CredManFClass,modCredMan);
  Document("Счёт кредитного договора",CredManStatRClass,CredManStatForm,CredManStatFClass,modCredMan);

//  Maintenance("Создайте сч/ф по контракту",CreateContractIVVClass,CreateContractIVMn,modCredMan);
  
/* modSL - Расчёты с клиентами*/
  
  RegisterWS("Счета-фактуры","Счета-фактуры","Новый счёт-фактура",IVVc,modSL); 
  RegisterWS("Платежи","Платежи","Новый платёж",IPVc,modSL); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modSL); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modSL); 
  RegisterWS("Группы товаров","Группы товаров","Новая группа товаров",ITVc,modSL); 
  RegisterWS("Internal Invoices","Internal Invoices","New Internal Invoice",IntIVVc,modSL); 
  if (HasLocalization("FIN")) then begin  
    Register("Electronic Invoices Queue","Electronic Invoices Queue",EInvoiceQueVc,modSL);  
    Register("Electronic Record Statuses","Electronic Record Statuses",ERecordStatusVc,modSL);  
  end;

// Cash settings, report and maintenance were removed from #Sales Ledger# because they are POS things, if you want to use SL POS module, you have to get POS module anyway.
  Setting("Настройки записей",AccTClass,modSL);
  Setting("Лимит задолженности",AgedTClass,modSL);
  Setting("Товары-заменители",AltINLClass,modSL);
  Setting("Премии",BonusDefLClass,modSL);
  //if (HasLocalization("BLR")) then begin
    //Setting("Cash Round Off for Belarus",BelRusCashTClass,modSL); 
  //end;
  if (HasLocalization("BRA")) then begin 
    Setting("Bank Receipt",BankReceiptTClass,modSL); //!!TRANSLATE
  end;
  Setting("Виды классификаций",CTypeLClass,modSL);
  Setting("Кредитные лимиты контактов",CreditLimitLClass,modSL);         
  Setting("Типы документов контакта",CUDocTypeTClass,modSL);
  Setting("Настройки контакта",CustomerSettingTClass,modSL);
  Setting("Лимит кредита",CreditLimitTClass,modSL);
  Setting("Сопутствующие товары",CrossINLClass,modSL);
  Setting("Категории клиентов",CCatLClass,modSL);
  Setting("Товары по умолчанию",CompItemLClass,modSL);
  Setting("Способы оплаты по умолчанию",DefCashTClass,modSL);
//  Setting("Electronic Invoices Customers Data",EInvCULClass,modSL);
  Setting("Форматы электронных сч/ф",EInvoiceLayoutTClass,modSL);
  Setting("Очередь электронных сч/ф",EInvoiceQueLClass,modSL);
  Setting("Статусы электронных записей",ERecordStatusLClass,modSL);
//  Setting("Electronic Invoicing",ElecInvTClass,modSL);//not used , different design
  Setting("Налог на окружающую среду",RepaTClass,modSL);
  Setting("Скидки клиентам с доп.налога",Tax1RebLClass,modSL);
  Setting("Экспорт факторинга",FactoringTClass,modSL);
  if (HasLocalization("LVA")) then begin
    Setting("FiDAViSta Import Filters",FVImpFilterTClass,modSL);
  end;
  if (HasLocalization("FIN")) then begin         
    Setting("Настройки финсчётов",FInvoiceSLTClass,modSL);         
  end;
  if (HasLocalization("UKR")) then begin
  	Setting("Первое событие (продажи)",FEIVLClass,modSL);
  end;
  Setting("Фрахт",FreightTClass,modSL); 
  Setting("Расчет от веса/фрахта",FreightWeightTClass,modSL);
  Setting("Выпущенные подарочные сертификаты",GCLClass,modSL);
  Setting("Полученные подарочные сертификаты",GCRLClass,modSL);
  Setting("Настройки подарочных сертификатов",GCTClass,modSL);
  Setting("Проданные подарочные сертификаты",GCSLClass,modSL);
  Setting("Взносы",InstallmentLClass,modSL);
  Setting("Проценты пени",IITClass,modSL);
  Setting("Коды взносов",IntLClass,modSL);
  Setting("% ставка",IRLClass,modSL); 
  Setting("Intrastat Transaction Codes",IntrastatTransCodeTClass,modSL);  
  Setting("Настройки письма сч/ф",IVMailTClass,modSL);
  Setting("Классификации товаров",DILClass,modSL);
  Setting("Группы товаров удержания",WHITLClass,modSL);
  if (HasLocalization("LVA")) then begin
    Setting("Ресурсы товаров",ItemResourceLClass,modSL); 
  end;
  Setting("Настройки товаров",ItemSettingTClass,modSL);
  Setting("Настройки статуса товара",ItemStatusSettTClass,modSL);
  Setting("Официальные номера документов",LegalInvNrTClass,modSL);
  if (HasLocalization("LVA")) then begin
    Setting("Виды природных ресурсов",NatResourceTypeLClass,modSL); 
  end;
  if (HasLocalization("HRV,POL")) then begin
    Setting("Официальные номера документов 2",LegalInvNr2TClass,modSL);
  end;
  Setting("Серии номеров - Контакты",CUSerTClass,modSL);//PRSerTClass
  if (HasLocalization("UKR")) then begin
    Setting("Серии номеров - Первое событие (продажи)",FEIVSerTClass,modSL);
  end;
  Setting("Cерии номеров - Подарочные сертификаты",GCSerTClass,modSL);
  Setting("Cерии номеров - Подарочные сертификаты полученные",GCRSerTClass,modSL);
  Setting("Cерии номеров - Внутренние счета-фактуры",IntIVSerTClass,modSL);
  Setting("Серии номеров - Сч/ф",IVSerTClass,modSL);
  Setting("Серии номеров - Платежи клиентов",IPSerTClass,modSL);
  if (HasLocalization("HRV,POL,SVN,SRB,UKR")) then begin
    Setting("Серии номеров - Коррекции НДС расчетов с клиентами",VATIVSerTClass,modSL);
  end;
  if (HasLocalization("AGO,BRA,PRT")==false) then begin
  Setting("Официалльный серийный номер счет-фактуры",OffInvTClass,modSL);
  end;
  Setting("Способы оплаты",PMTClass,modSL);
  Setting("Счёт реализации условий оплаты",PDSalesAccTClass,modSL);
  Setting("Условия оплаты",PDLClass,modSL);
  Setting("Настройки платежей клиентов",IPTClass,modSL);
  if (HasLocalization("FIN")) then begin
    Setting("Reference Number Settings",CalcRefTClass,modSL);
  end;
  Setting("Регионы",RegionLClass,modSL);
  if (HasLocalization("ARG")) then begin
  Setting("Скидки клиентам с региональных сборов",RPTaxRebLClass,modSL);
  Setting("Региональные налоговые сборы",RPTaxLClass,modSL);
  Setting("Региональные налоговые сборы для клиентов",RPCUTaxLClass,modSL);
    Setting("Regional Perception Customer' Excemptions",RPCUTaxExmptLClass,modSL); 
  Setting("Региональные налоги с продаж",RSTaxLClass,modSL);
  end;
  Setting("Настройки регистрации по умолчанию",RegDefTClass,modSL);
  Setting("Тексты напоминаний",RMLClass,modSL);
  Setting("Настройки счетов-фактур реализации",IVTTClass,modSL);
  Setting("Стандартные проблемы",StandProblemLClass,modSL);
  if (HasLocalization("BOL")) then begin
    Setting("ID налоговых служб",TaxAuthIDBlockTClass,modSL); 
  end;
  Setting("Единицы измерения",UnitLClass,modSL);
  if (HasLocalization("HRV,POL,SVN,SRB,UKR")) then begin
    Setting("Причины корректировки НДС",VATIVReasonLClass,modSL);
    Setting("Виды коррекци НДС продаж",VATIVTypeTClass,modSL);
    Setting("Коррекции НДС - расчеты с клиент.",VATIVLClass,modSL);
    Setting("Настройки корректировки НДС",VATIVTTClass,modSL);
  end;
  Setting("Название региона НДС",VATZoneLabelTClass,modSL);
//  Setting("Коды реализации",SalesCodeTClass,modSL); Manual says not used any more. Hmm, the manual is not correct then, they are used in the code!

  Document("Кассовые ордера",KIVRClass,CashInvForm,CashFClass,modSL);
  Document("Кредитные счета",CIVRClass,CredInvForm,CredFClass,modSL);
  Document("Этикетки клиентов/поставщиков",CuLabRClass,CuLabForm,CuLabFClass,modSL);
  Document("Письмо дебитору",DebtLetRClass,DebtorLetForm,DebtLetFClass,modSL);
  Document("НДС продаж (ЕС)",SLEUVAT2RClass,SLEUVATForm,SLEUVATFClass,modSL);
  if (HasLocalization("UKR")) then begin
    Document("Первое событие (продажи)",FEIVRClass,FEIVForm,FEIVFClass,modSL); 
  end;
  Document("Подарочные сертификаты",GCRClass,GCForm,GCFClass,modSL); 
  Document("Счета пени",IIVRClass,IIInvForm,IIFClass,modSL);
  Document("Внутренние счета-фактуры",IntIVRClass,IntIVForm,IntIVFClass,modSL);
  Document("Intrastat - Расчёты с клиентами",IntraStaRClass,InStaForm,InStaFClass,modSL);
  if (HasLocalization("PRT")) then begin
    Document("Invoice/Receipt's",KIVRClass,CashInvRecPRTForm,CashRecPRTFClass,modSL);
  end;
  Document("Счета-фактуры",IVRClass,InvForm,InvFClass,modSL); 
  Document("Ведомость неоплаченных сч/ф",ARSRClass,ARSForm,ARSFClass,modSL);
  Document("Ведомость расчетов с клиентами",CuPerRClass,CuPerForm,CuPerFClass,modSL);
  if (HasLocalization("PRT")==false) then begin
    Document("Проформы сч/ф",Inv1RClass,Inv1Form,Inv1FClass,modSL);
  end;
  Document("Сч/ф проекта",PIVRClass,ProjInvForm,PRInvFClass,modSL);
  Document("Платежные документы",IPDRClass,IPDForm,IPDFClass,modSL);
  Document("Напоминания",RemRClass,RemForm,RemFClass,modSL);
  if (HasLocalization("RUS")) then begin
    Document("Книга продаж",SalesB2RClass,SLBookForm,SLBookFClass,modSL); 
  end;
  if (HasLocalization("HRV,SVN")) then begin
    Document("Книга продаж",SalesBookHRVRClass,SalesBookHRVForm,SalesBookHRVFClass,modSL); 
  end;
  
  if (HasLocalization("HRV,POL,SVN,SRB,UKR")) then begin
    Document("Коррекции НДС книги продаж",VATIVRClass,VATIVForm,VATIVFClass,modSL); 
    Document("Коррекции НДС книги продаж (кредитов.)",VATCIVRClass,VATCIVForm,VATCIVFClass,modSL);
  end;
//  Document("#Sales Ledger#",AR2DRClass,ARDForm,ARDFClass,modSL);will be written soon
  Report("Премии продавцам",BonusRClass,BonusRn,0,modSL);
  Report("Приходные ордеры",CashReceiptRClass,CashReceiptRn,0,modSL);
  Report("Список клиентов",CURClass,CustRn,0,modSL);
  if (HasLocalization("HRV")) then begin
    Report("Consumption Taxes Summary",ConsTaxSumRClass,ConsTaxSumRn,0,modSL);
  end;
  if (HasLocalization("EST")) then begin         
    Report("Конвертация банковских счетов (IBAN)",ConverttoIBANRClass,ConverttoIBANRn,0,modSL);         
  end;
  Report("Кредитные счета, обновление склада",CrStckRClass,CrStckRn,0,modSL);
  Report("Cтатус кредита клиенту",CredStatusRClass,CredStatusRn,0,modSL);
  Report("Статистика продаж по клиентам",CustSalesRClass,CustSalesRn,0,modSL);
  Report("Статистика по клиентам",CustSTRClass,CustSTRn,0,modSL);
  Report("Справка по клиентам",CustPSRClass,CustPSRn,0,modSL);
  if (HasLocalization("ARG")) then begin
  Report("Удержания по клиентам",CustWithHoldRClass,CustWithHoldRn,0,modSL);
  end;
  Report("Статистика клиент/товар",CuArtSTRClass,CuArtSTRn,0,modSL);
  if (HasLocalization("EST")) then begin         
    Report("Валидация данных (электронный счёт)",FindMisMatchRClass,FindMisMatchRn,0,modSL);         
  end;
  Report("Статистика скидок",Cust2STRClass,Cust2STRn,0,modSL);
  if (HasLocalization("ARG")) then begin
    Report("Статус электронного сч/ф (Аргентина)",HTSStatArgIVRClass,HTSStatArgIVRn,0,modSL);
  end;
  Report("Статус электронного сч/ф",HTSStatIVRClass,HTSStatIVRn,0,modSL);
//  Report("Electronic Invoice Status",HTSIVStatRClass,HTSIVStatRn,0,modSL);//wierd one
  Report("Статистика продаж (ЕС)",SLEUVATRClass,SLEUVATRn,0,modSL);
  if (HasLocalization("SVN")) then begin
//  Report("EU #VAT# Sales, Slovenia",SLEUVATSloRClass,SLEUVATSloRn,0,modSL);
  end;
  if (HasLocalization("NOR,SWE,FIN")) then begin
    Report("E-Invoicing Customer Data",EInvCustDataRClass,EInvCustDataRn,0,modSL);
  end;    
  if (HasLocalization("EST")) then begin         
    Report("Неудавшиеся электронные счета",eAKErrInvRClass,eAKErrInvRn,0,modSL);         
  end;
  if (HasLocalization("UKR")) then begin
    Report("Журнал продаж по первым событиям",FEIVJRClass,FEIVJRn,0,modSL);
  end;
  Report("Подарочные сертификаты",GiftCerRClass,GiftCerRn,0,modSL);
  Report("Прибыль по счетам-фактурам",IVGPRClass,IVGPRn,0,modSL);
  Report("Счета пени",CUIntRClass,CUIntRn,0,modSL);
  if (HasLocalization("LVA")) then begin
    Report("Интрастат продажи (Латвия)",LatIntrastatIVRClass,LatIntrastatIVRn,0,modSL);  
  end;
  Report("Журнал счетов-фактур",IVJRClass,InvoiceRn,0,modSL);
  if (HasLocalization("HUN")) then begin
    Report("Журнал счетов-фактур (Венгрия)",IVJ2RClass,Invoice2Rn,0,modSL); 
  end;
  Report("Статус медиа сч/ф ",IVMediaStatusRClass,IVMediaStatusRn,0,modSL);
  Report("Статус счёта-фактуры",IVInfoRClass,IVInfoRn,0,modSL); 
  Report("Список классификаций товаров",DIListRClass,DIListRn,0,modSL);
  Report("Список групп товаров",ITListRClass,ITListRn,0,modSL);
  Report("Статистика продаж по группам товаров, исключая скидку",ItemGrSalesRClass,ItemSales2Rn,0,modSL);
  Report("НДС группы товаров",ITVATRClass,ITVATRn,0,modSL);
  Report("Список товаров",ArtRClass,ArtRn,0,modSL);
  Report("Статистика кампании по товара",INMultiBuyStatRClass,INMultiBuyStatRn,0,modSL);
  Report("Статистика по прейскурантам на товар ",INPriceListStatRClass,INPriceListStatRn,0,modSL);
  Report("Статистика товар/количество",INQtyRClass,INQtyRn,0,modSL);
  Report("Статистика товар/продавец",IStatRClass,IStatRn,0,modSL);
  Report("Статистика продаж по товарам",ItemSalesRClass,ItemSalesRn,0,modSL);
  Report("Статистика по товарам",ArtSTRClass,ArtSTRn,0,modSL);
  Report("История оборота по товарам",ItemTurnRClass,ItemTurnRn,0,modSL);  
  Report("Использование официальных бланков сч/ф",LegInvFormRClass,LegInvFormRn,0,modSL);
  Report("История продаж по клиентам по месяцам",MonthSalesHistCURClass,MonthSalesHistCURn,0,modSL);
  if (HasLocalization("SLV")) then begin
    Report("Monthly Sales Witholdings (El Salvador)",SLRetSLVRClass,SLRetSLVRn,0,modSL);
  end;
  Report("История по продавцам по месяцам",MonthSalesHistSMRClass,MonthSalesHistSMRn,0,modSL);
  if (HasLocalization("LVA")) then begin
    Report("Использование природных ресурсов",ItemResourceUsageRClass,ItemResourceUsageRn,0,modSL); 
  end;
  Report("Журнал записей операций по сч/ф",BokundRClass,BokundRn,0,modSL);
  Report("Журнал неоплаченных сч/ф",ARS2RClass,ARS2Rn,0,modSL);
  Report("Сводный отчет по взносам",InstListSLRClass,InstListSLRn,0,modSL);
  if (HasLocalization("ARG")) then begin
  Report("Взыскиваемые налоги",RPTaxJRClass,RPTaxJRn,0,modSL);
  end;
  Report("Ведомость расчетов с клиентами",CuPer2RClass,CuPerRn,0,modSL);
  Report("История предоплат клиентов",PerPayHisSLRClass,PerPayHisSLRn,0,modSL);
  Report("Прейскуранты",PriceRClass,PriceRn,0,modSL);
  Report("История платежей клиентов",CUPayHistoryRClass,CUPayHistoryRn,0,modSL);
  Report("Журнал платежей клиентов",IPRClass,IPRn,0,modSL);
  if (HasLocalization("PHL")) then begin
    Report("Receipt Journal BIR",IPBIRJRClass,IPBIRJRn,0,modSL); //!!TRANSLATE
  end;
  Report("История платежей по продавцам", IPSalesManRClass,IPSalesManRn,0,modSL);  
  Report("Прогноз платежей",IPProgRClass,IPProgRn,0,modSL);
  if (HasLocalization("ARG")) then begin
  Report("Региональные налоги",RegVATCodeJRClass,RegVATCodeJRn,0,modSL);
  end;
  if (HasLocalization("RUS")) then begin
    Report("Книга продаж (Россия)",SalesB1RClass,SalesB1Rn,0,modSL);
  end;
  Report("Дебиторская задолженность",ARRClass,ARRn,0,modSL);
  Report("Дебиторская и кредиторская задолженность",ARAPRClass,ARAPRn,0,modSL);
  Report("Статистика расчетов с клиентами",SLStatRClass,CUHistRn,0,modSL);
  Report("Продажи по часам",IVPerHourRClass,IVPerHourRn,0,modSL);
  Report("Продажи по складам",IVPerLocRClass,IVPerLocRn,0,modSL);
  Report("Поиск товара",SearchItemRClass,SearchItemRn,0,modSL);
  Report("Статистика сер. № товара",SerialItemStatRClass,SerialItemStatRn,0,modSL);
  Report("Счета налоговых транзакций", TransTaxIVRClass,TransTaxIVRn,0,modSL);  
  Report("Статистика по кодам НДС",SLVATRClass,SLVATRn,0,modSL);
  if (HasLocalization("UKR")) then begin
    Report("Регистр коррекций продаж (Украина)",VATIVRegUkrRClass,VATIVRegUkrRn,0,modSL);
  end;
  Report("НДС по продажам",RealCustRClass,RealCustRn,0,modSL);
  if (HasLocalization("PHL")) then begin
    Report("НДС к выплате",VATCustSalesPHLRClass,VATCustSalesPHLRn,0,modSL); 
  end;
  if (HasLocalization("LVA")) then begin
    Report("#VAT# Declaration Annex, #VAT#-2 (Latvia)",LATEUSalesRClass,LATEUSalesRn,0,modSL);
  end;  
  Report("Разница по НДС",LithDiffRClass,LitDifRn,0,modSL);
  Report("НДС по клиенту",SLVATCURClass,SLVATCURn,0,modSL);
  Report("История ИНН",CUVERClass,CUVERn,0,modSL);
  if (HasLocalization("SLV")) then begin
    Report("Отчёт по НДС по продажам (Сальвадор)",SLVATBaseSLVRClass,SLVATBaseSLVRn,0,modSL);
  end;
  Report("НДС отчет по продажам",SLVATRepRClass,SLVATRepRn,0,modSL);
  if (HasLocalization("ARG")) then begin
    Report("Отчёт по НДС по продажам (Аргентина)",SLVATArgRClass,SLVATArgRn,0,modSL);  
  end;
  if (HasLocalization("BOL")) then begin
    Report("НДС отчет по продажам (Боливия)",SLVATBolRClass,SLVATBolRn,0,modSL);
  end;
  if (HasLocalization("SLV")) then begin
    Report("#VAT# Report Sales (Сальвадор)",SLVATSLVRClass,SLVATSLVRn,0,modSL);
  end;
  if (HasLocalization("GTM")) then begin
    Report("#VAT# Report Sales (Гватемала)",SLVATGTRClass,SLVATGTRn,0,modSL);
  end;
  if (HasLocalization("HND")) then begin
    Report("НДС отчет по продажам (Гондурас)",SLVATHonRClass,SLVATHonRn,0,modSL);  
  end;
  if (HasLocalization("HUN")) then begin
    Report("НДС отчет по продажам (Венгрия)",SLVATHunRClass,SLVATHunRn,0,modSL);  
  end;
  if (HasLocalization("ITA")) then begin
    Report("#VAT# Report Sales (Italy) ",SLVATITARClass,SLVATITARn,0,modSL); //!!TRANSLATE
  end;
  if (HasLocalization("KEN")) then begin
    Report("НДС отчет по продажам (Кения)",SLVATKenRClass,SLVATKenRn,0,modSL);  
  end;
  if (HasLocalization("LTU,KEN")) then begin
    country = "(Lithuania)";
    if (HasLocalization("KEN")) then begin 
      country = "(Kenya 1)";
    end;  
    Report("#VAT# Report Sales " & country,SLVATLitRClass,SLVATLitRn,0,modSL);  
  end;
  if (HasLocalization("MEX")) then begin
    Report("НДС отчет по продажам (Мексика)",SLVATMexRClass,SLVATMexRn,0,modSL);
  end;
  if (HasLocalization("NIC")) then begin
    Export("#VAT# Report Sales (Никарагуа)",SLVATNIRClass,SLVATNIRn,modSL);
  end;
  if (HasLocalization("PAN")) then begin
    Report("#VAT# Report Sales (Панама)",SLVATPARClass,SLVATPARn,0,modSL);
  end;
  if (HasLocalization("SRB")) then begin
    Report("НДС отчет по продажам (Сербия)",SLVATSerRClass,SLVATSerRn,0,modSL);  
  end;
  if (HasLocalization("UKR")) then begin
    Report("НДС отчет (Украина)",SLVATUkrRClass,SLVATUkrRn,0,modSL);  
  end;
  Report("Отчёт отмен",VoidedRowsRClass,VoidedRowsRn,0,modSL);

/* Complain to Kjell before the end of January if you need this */
//  Report("Просроченные дебит. задолженности",AgRcRClass,AgedRecRn,0,modSL);
//  Report("Intrastat",IntraStaRClass,IntraStaRn,0,modSL);
/* This is NOT in English... I know the company is called Kredits... but... */
//  Report("Отчёт для Kredittstyring (Норвегия)",KreditstyRClass,KreditstyRn,0,modSL);  

  Export("Анализ движения денежных средств",ExportCashFlowEClass,ExportCashFlowEn,modSL);
  if (HasLocalization("HRV,SVN")) then begin
    Export("(Croatia, Slovenia) Cash Invoices Export",CashInvCroEClass,CashInvExEn,modSL);
  end;
  if (HasLocalization("MEX")) then begin
    Export("CFDI E-invoicing (Mexico)",CFDIEInvEClass,CFDIEInvEn,modSL);
  end;
  if (HasLocalization("NOR")) then begin
    Export("Счета-фактуры Compello",CompelloInvEClass,CompelloInvEn,modSL); 
    Export("Счета-фактуры Compello",CompelloXMLInvRClass,CompelloXMLInvEn,modSL); 
  end;
  if (HasLocalization("PRT")) then begin
//    Export("Communication of Invoices to AT - SAFT",PortTaxXml2EClass,PortTaxXml2En,modSL);
  end;
  if (HasLocalization("SWE")) then begin
    Export("Управление кредитом",KreditstyEClass,KreditstyEn,modSL);
  end;
  Export("Статистика клиентов",CustSTEClass,CustSTEn,modSL);
  Export("История оборотов по клиентам",CustTurnEClass,CustTurnEn,modSL);
  Export("Статистика клиент/товар",ICSEClass,ICSEn,modSL);
// These DD functions should have one window, one selection, depending on bank files setting or something
  if (HasLocalization("DEN")) then begin
    Export("DanInvoice",DanInvoiceEClass,DanInvoiceEn,modSL);
  end;
  if (HasLocalization("NOR")) then begin
  Export("Сбор задолженности в Predator",InvInkassoEClass,InvInkassoEn,modSL);
  end;
  if (HasLocalization("EST")) then begin
  Export("Прямой дебит в Hansabank",DDHansaEClass,DDHansaEn,modSL);
  end;
//  Export("Direct Debit to Norwegian BBS",DDNorBBSEClass,DDNorBBSEn,modSL);
  if (HasLocalization("HRV")) then begin
    Export("Продажи #VAT# ЕС",SLEUVATHRVECLass,SLEUVATHRVEn,modSL);         
  end;
  if (HasLocalization("EST")) then begin         
    Export("Электронный счёт",eInvoiceEClass,eInvoiceEn,modSL);
  end;
  if (HasLocalization("LVA")) then begin         
    Export("Экспорт кодов НДС по продажам ЕС (Латвия)",LatEUSalesEClass,LatEUSalesEn,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("Экспорт продаж ЕС (Литва)",SLEUVATLitECLass,SLEUVATLitEn,modSL);
  end;
  if (HasLocalization("MEX")) then begin
    Export("E-Invoices Journal (Mexico)",EInvoicesJMexEClass,EInvoicesJMexEn,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Export("Finvoice",FInvoiceEClass,FInvoiceEn,modSL);
  end;  
  if (HasLocalization("UKR")) then begin
    Export("Книга продаж по первым событиям",FEIVBookEClass,FEIVBookEn,modSL);  
  end;
  if (HasLocalization("BRA")) then begin
    Export("Fiscal Note for Services",BraFiscalNoteEClass,BraFiscalNoteEn,modSL); 
  end;
  if (HasLocalization("CZE,SVK")) then begin
    Export("Intrastat продажи (Чехия)",CZIntrastatIVEClass,CZIntIVEn,modSL);
  end;
  if (HasLocalization("EST")) then begin
    Export("Intrastat продажи (Эстония)",EstIntrastatIVEClass,EstIntIVEn,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Export("Intrastat продажи (Финляндия)",FinIntrastatIVEClass,FinIntIVEn,modSL);
  end;
  if (HasLocalization("DEU")) then begin
    Export("Intrastat продажи (Германия)",GerIntrastatIVEClass,GerIntIVEn,modSL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("Интрастат продажи (Латвия)",LatIntrastatIVEClass,LatIntrastatIVEn,modSL);  
  end;
  if (HasLocalization("LTU")) then begin
    Export("Intrastat продажи (Литва)",LitIntrastatIVEClass,LitIntIVEn,modSL);
  end;
  if (HasLocalization("SWE")) then begin
    Export("Intrastat продажи (Швеция, IDEP-SCB)",SWEIntraStatIVEClass,SWEIntraStatIVEn,modSL);
  end;
  Export("Сч/ф Intrastat",EngIntrastatIVEClass,EngIntIVEn,modSL);
  if (HasLocalization("GBR")) then begin
    Export("Intrastat Invoices (UK)",EngIntrastatIVUKEClass,EngIntIVUKEn,modSL);
  end;
  Export("Счета факторинга",InvFactEClass,InvFactEn,modSL);
  if (HasLocalization("SVN")) then begin
    Export("Счета-фактуры (Словения)",IVSloEClass,IVSloEn,modSL);
  end;
  Export("Статистика товаров",ArtSTEClass,ArtSTEn,modSL);
  Export("История оборота товаров",ItemTurnEClass,ItemTurnEn,modSL);
  Export("Товары для фискального принтера Fi550",ItemstoFi550EClass,ItemstoFi550En,modSL);
  if (HasLocalization("ARG")) then begin
    Export("#P/L# Withholding and Perceptions (Argentina)",PLARCIBAEClass,PLARCIBAEn,modSL);
    Export("Региональные удержания (Аргентина)",SIFEREEClass,SIFEREEn,modSL);
    Export("S/L CITI (Argentina)",SLCITIEClass,SLCITIEn,modSL);
  end;
  if (HasLocalization("LVA")) then begin 
  Export("Экспорт продаж для лесных компаний", ForestSLEClass,ForestSLEn,modSL);
  end;
  if (HasLocalization("ARG")) then begin
    Export("Налоги по продажам - (Аргентина)",SLWORMArgEClass,SLWORMArgEn,modSL);
    Export("Доходы по НДС (Аргентина)",SLGIPArgEClass,SLGIPArgEn,modSL);
    Export("S/L VAT Gross Income Perceptions per Region (Аргентина)",SLGIPRArgEClass,SLGIPRArgEn,modSL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#VAT# Declaration Annex #VAT#1-III (Latvia)",LatVATSalesEClass,LatVATSalesEn,modSL);
  end;
  if (HasLocalization("BOL")) then begin
    Export("Счета-фактуры НДС (Боливия)",SLVATBolEClass,SLVATBolEn,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("Счета-фактуры НДС (Литва)",LitVATRegIVEClass,LitVATRegIVEn,modSL);
  end;
  if (HasLocalization("SVN")) then begin
    Export("#S/L# #VAT# Invoices (Slovenia)",SLVATSloEClass,SLVATSloEn,modSL);
  end;
  if (HasLocalization("ARG")) then begin
    Export("Удержания НДС по продажам (Аргентина)",SLVATWithArgEClass,SLVATWithArgEn,modSL);
  end;
  if (HasLocalization("HUN")) then begin
    Export("Услуги налогового органа управления данными",HunTaxControlXmlEClass,HunTaxControlXmlEn,modSL);  
  end;
//  Export("Telema Invoice (Estonia)",TelemaInvEClass,TelemaInvEn,modSL);
  if (HasLocalization("POL")) then begin  
    Export("Ist@at - Items Export",IstaatItemExportEClass,IstaatItemExportEn,modSL);  
  end;

  if (HasLocalization("ARG")) then begin
    Import("ARBA Tax List for Customer Perceptions",ARBAVEPercIClass,ARBAVEPercIn,modSL); //!!TRANSLATE
  end;
  Import("Банковский файл",RefIPIn,RefIPIn,modSL);
  if (HasLocalization("MEX")) then begin
    Import("CFDI E-invoicing (Mexico)",0,CFDIEInvIn,modSL);
  end;
  if (HasLocalization("BRA")) then begin
    Import("Fiscal Note for Services Reply",0,BraFiscalNoteIn,modSL);
  end;
  if (HasLocalization("ARG")) then begin
    Import("Региональный сборы и удержания (Аргентина)",PercAndWHIClass,PercAndWHIn,modSL);
    Import("Корректировки региональных сборов и удержаний (Аргентина)",PercAndWHCorrIClass,PercAndWHCorrIn,modSL);
  end;

  if (HasLocalization("MEX")) then begin
    Maintenance("CFDI E-invoicing Import (Mexico)",CFDIEInvVClass,CFDIEInvMn,modSL);  
  end;
  Maintenance("Создать счета-фактуры по предоплатам на основании поступлений",DownPayFromIPVClass,DownPayFromIPMn,modSL); 
  Maintenance("Выписать счет пени",CUIntVClass,CUIntMn,modSL);
  Maintenance("Создать письма из счетов-фактур",IVToMailVClass,IVToMailMn,modSL);
  Maintenance("Создать письмо с неоплаченными сч/ф",ARSEmailVClass,ARSEmailMn,modSL);
  Maintenance("Создать письмо с ведомостью расчётов с клиентом",CUPerEmailVClass,CUPerEmailMn,modSL);// We have this belowe SendPerStatVClass
  if (HasLocalization("EST")) then begin 
  Maintenance("Создать выписки из банковских операций",IPFromBankTRVClass,IPFromBankTRMn,modSL);
  end;
  if (HasLocalization("HRV,POL,SVN,SRB,UKR")) then begin
    Maintenance("Создать коррекции НДС книги продаж",VATIVVClass,VATIVMn,modSL);
  end;
  Maintenance("Удалить неиспользуемые товары",DelNotUsedINVClass,DelNotUsedINMn,modSL);
  if (HasLocalization("EST")) then begin 
    Maintenance("Прямой дебет в SEB",DDSEBOClass,DDSEBMn,modSL); 
    Maintenance("Генерировать ID  услуги/номер ссылки",AutoRefStrVClass,AutoRefStrMn,modSL);         
  end;
  Maintenance("Утвердить сч/ф",OKInvVClass,OKInvMn,modSL);
  Maintenance("Утвердить сч/ф (Непрерывно)",OKInvVClass,OKInvNSMn,modSL);
  Maintenance("Перестроить поле Ссылка",RebFinRefVClass,RebFinRefMn,modSL);
  if (HasLocalization("PRT")) then begin
    Maintenance("SAFT через электронную почту",SAFTtoEmailVClass,SAFTtoEmailMn,modSL);         
  end;
  if (HasLocalization("EST")) then begin         
    Maintenance("Повторить отправки электронных счетов",ResendEstEInvVClass,ResendEstEInvMn,modSL);         
  end;
  if (HasLocalization("MEX")) then begin         
    Maintenance("Send E-Invoices spool file (Mexico)",MexEInvSpoolVClass,MexEInvSpoolMn,modSL);
  end;
  Maintenance("Перевод в безнадежные дебиторы",BadCUVClass,BadCUMn,modSL);
  Maintenance("Обновить классификацию клиентов",CustUpClass,CustUpMn,modSL);
  Maintenance("Списать безнадежные долги",WriteOffVClass,WriteOffMn,modSL);

/* modCRM */

  RegisterWS("Целевое время","Целевое время","Новое целевое время",TargTimeVc,modCRM); 
  RegisterWS("Письма клиентам","Письма клиентам","Новое письмо клиенту",LetVc,modCRM); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modCRM); 
  RegisterWS("Стандартные тексты","Стандартные тексты","Новый стандартный текст",LTxtVc,modCRM); 
  RegisterWS("Стандартный периоды","Стандартнырй периоды","Новый стандартнырй период",StdPeriodVc,modCRM); 
  RegisterWS("Адресные ведомости","Адресные ведомости","Новая адресная ведомость",PersColVc,modCRM); 
  RegisterWS("Связи контактов","Связи контактов","Новая связь контактов",ContactRelVc,modCRM); 
  RegisterWS("Возможности","Возможности","Новая возможность",OYVc,modCRM); 

  Report("Журнал деятельности",ActJRClass,ActJRn,0,modCRM);
  Report("Проверка деятельности сотрудников",UserActCheckRClass,UserActCheckRn,0,modCRM);
  Report("Деятельность - контакты",ActCURClass,ActCURn,0,modCRM);
  Report("Деятельность за период", ActWeekRClass,ActWeekRn,0,modCRM);
  Report("Деятельность по сотрудникам",ActPersRClass,ActPersRn,0,modCRM); // Shouldn't this be only in System?
  Report("Список видов деятельности",ActTypeRClass,ActTypRn,0,modCRM);
  Report("Список дней рождений",BirthDayRClass,BirthDayRn,0,modCRM);
  Report("История заполнения календаря",ActCalBookRClass,ActCalBookRn,0,modCRM);
  Report("Список клиентов",CURClass,CustRn,0,modCRM);
//  Report("Chat Log",ChatLogRClass,ChatLogRn,0,modCRM);
  Report("Список контактов по всем компаниям",CUforAllCompaniesRClass,CustforAllCompaniesRn,0,modCRM);//internal use
//  Report("Contact Person List",ContactListRClass,ContactListRn,0,modCRM); // No more specific contact register
  if (HasLocalization("GBR")) then begin
    Report("Действительность контакта (Англия)",UKContactValidityRClass,UKContactValidityRn,0,modCRM);
  end;
  Report("Статистика продаж по клиентам",CustSalesRClass,CustSalesRn,0,modCRM);
  Report("Статистика по клиенту",CustSTRClass,CustSTRn,0,modCRM);
  Report("Справка по клиенту",CustPSRClass,CustPSRn,0,modCRM);
  Report("Статистика клиент/товар",CuArtSTRClass,CuArtSTRn,0,modCRM);
  Report("Клиенты без/с записями деятельности",NoActCURClass,NoActCURn,0,modCRM);
  Report("Календарь сотрудников",ActCalStaffRClass,ActCalStaffRn,0,modCRM);
  Report("Статистика рабочего времени сотрудника",EMTimeStatRClass,EMTimeRn,0,modCRM);
  Report("Статистика товар/продавец",IStatRClass,IStatRn,0,modCRM);
  Report("Список писем",LetInfoRClass,LetInfoRn,0,modCRM);
  Report("Список неправильных телефонных номеров",InvPhoneNoRClass,InvPhoneNoRn,0,modCRM);
  Report("Консультации за месяц",MonthConsultRClass,MonthConsultRn,0,modCRM);
  Report("Результат консультаций за месяц",MonthConsultResRClass,MonthConsultResRn,0,modCRM);
  Report("Продажи за месяц",MonthSalesRClass,MonthSalesRn,0,modCRM);
  Report("Результат продаж за месяц",MonthSalesResRClass,MonthSalesResRn,0,modCRM);
  Report("Поддержка за месяц",MonthSupportRClass,MonthSupportRn,0,modCRM);
  Report("Личный календарь",ActCalRClass,ActCalRn,0,modCRM);
  Report("Повторяющиеся Задачи",ActReqListRClass,ActReqListRn,0,modCRM); 
  Report("Поиск контактных лиц",SearchContactRClass,SearchContactRn,0,modCRM);
  Report("Расширения SIP, по сотрудникам",SIPUserRClass,SIPUserRn,0,modCRM); 
  Report("Звонки",SwitchboardCallsRClass,SwtchbrdCallsRn,0,modCRM);
  Report("Список целевого времени",TargTimeJRClass,TargTimeJRn,0,modCRM);
  Report("Телефонный справочник",TeleRClass,TeleRn,0,modCRM);
//  Report("User Activities",ActJRClass,ActJRn,0,modCRM);//same as Acitvities journal
  Report("Кто купил/не купил",NoSalesRClass,NoSalesRn,0,modCRM);
//  Report("Activity List",ActListRClass,ActListRn,0,modCRM);
/* Something is wrong with the way it reads records */
//  Report("Detailed Todo",ToDoExtendedRClass,Detail2DoRn,0,modCRM);
/* Time Statistics has all the functionallity now. */
//  Report("Запланированное время сотрудников",EMPlanRClass,EMPlanRn,0,modCRM);
//  Report("План работы",ActTodoRClass,ActTodoRn,0,modCRM);

  Setting("Классы деятельностей",ActTypeGrLClass,modCRM);
  Setting("Последующие деятельности",ActSeqLClass,modCRM);
  Setting("Activity Priorities",ActPrioLevelTClass,modCRM); //!!TRANSLATE
  Setting("Виды деятельности",ActTypeLClass,modCRM);
  Setting("Виды деятельности, подсистемы",ASTTClass,modCRM);
  Setting("Дополнительные получатели e-mail",EmailRecipLClass,modCRM);
//  Setting("Campaigns",CampaignLClass,modCRM);
//  Setting("Campaign Statuses",CampaignStatusLClass,modCRM);
  Setting("Виды классификации",CTypeLClass,modCRM);
  Setting("Управление Рабочими Процессами - Компания",PipelineOverviewTClass,modCRM); 
  Setting("Классификации контактов",CClassLClass,modCRM);
  Setting("Настройки контактов",CustomerSettingTClass,modCRM);
  Setting("Синхронизация контактов",ContactSyncLClass,modCRM);
  Setting("Customer Letter Senders",LetSenderTClass,modCRM); //!!TRANSLATE
  Setting("Настройки CRM",CRMTClass,modCRM);
  Setting("Должности",CourtesyTitlesTClass,modCRM);
  Setting("Категории клиентов",CCatLClass,modCRM);
  Setting("Коды текстов деятельностей (по умолчанию)",CompTextTypeLClass,modCRM);
  Setting("Избранные типы деятельности",FavActTypeLClass,modCRM);  
  Setting("Глобальные настройки CRM",GlobalCRMTClass,modCRM);
  Setting("Индустрия",IndustryLClass,modCRM); 
  Setting("Лид",CULeadLClass,modCRM); 
  Setting("Источник лида",LeadSourceLClass,modCRM); 
  Setting("Статус лида",LeadStatusLClass,modCRM); 
  Setting("Справка по клиентам",CustPSLClass,modCRM);
  Setting("Справка по поставщикам",VEPSLClass,modCRM);
  Setting("Должности",JobTitleLClass,modCRM);
  Setting("Регистрация потенциальных клиентов",LeadRegistTClass,modCRM);
  Setting("Типы медиа",MediaTypeLClass,modCRM); 
  Setting("Настройки карты",MapBlockTClass,modCRM);
  Setting("Ежемесячные прогнозы",ForecastUserLClass,modCRM); //internal
  Setting("Ежемесячные результаты",ResultUserLClass,modCRM); //internal
  Setting("Серии номеров - Деятельности, записи операций",ActNLSerTClass,modCRM);
  Setting("Серии номеров - Письма клиентам",LetSerTClass,modCRM);
  Setting("Серии номеров - Возможности",OYSerTClass,modCRM); 
  Setting("Стандартизация телефонных номеров",NormPhoneNumLClass,modCRM);
  Setting("Настройки телефонии",CompPhonePrefsTClass,modCRM);
  Setting("Виды текста",TextTypeLClass,modCRM);
  Setting("Пользовательские поля - Деятельности",ActUserLabelTClass,modCRM);
  Setting("Пользовательские поля - Контакты",CUUserLabelTClass,modCRM);
  Setting("Пользовательские поля - Товары",INUserLabelTClass,modCRM);
  Setting("Управление Рабочими Процессами - Пользователь",UserPipelineOverviewLClass,modCRM); 
  Setting("Настройки пользователя - Ежемесячный отчёт",MonthlyUserSetLClass,modCRM);

  Document("Деятельность",ActDocRClass,ActDocForm,ActDocFClass,modCRM);
  Document("Этикетки контактных лиц",CoLabRClass,CoLabForm,CoLabFClass,modCRM);
  Document("Письма клиентам",LetRClass,LetForm,LetFClass,modCRM);
  Document("Этикетки клиентов/поставщиков",CuLabRClass,CuLabForm,CuLabFClass,modCRM);

  Maintenance("Добавить классификацию клиентам",NoSalesVClass,NoSalesMn,modCRM);
  Maintenance("Применить стандартный период",ApyStdPeriodMClass,ApyStdPeriodMn,modCRM);
  Maintenance("Закрытие контактов",CloseCUVClass,CloseCUMn,modCRM);
  Maintenance("Create Mails from Activities",ActToMailVClass,ActToMailMn,modCRM);
  Maintenance("Массовая электронная рассылка",MassMailVClass,MassMailMn,modCRM);
  Maintenance("Переместить деятельности в другую компанию",ActMoveCompVClass,ActMoveCompMn,modCRM);
  Maintenance("Утвердить период",OkPeriodVClass,OkPeriodMn,modCRM);
  Maintenance("Перестр. регистра распознав. номеров",NormPhoneNumVClass,NormPhoneNumMn,modCRM);
  Maintenance("Удалить классификацию с контактов",RemoveClassCUMClass,RemoveClassMn,modCRM);
//  Maintenance("Send Periodical Customer Statements to Customer",SendPerStatVClass,SendPerStatMn,modCRM); // We have this above CUPerEmailVClass
  Maintenance("Update Activities",UpdateActVClass,UpdateActMn,modCRM); //!!TRANSLATE
  Maintenance("Обновить данные в регистре контактов",UpdContactVClass,UpdContactMn,modCRM);

/* modNL - Финансы */
  
  RegisterWS("Записи операций","Записи операций","Новая запись операций",TRVc,modNL); 
  if (HasSimulations) then begin
    RegisterWS("Симуляции","Симуляции","Новая симуляция",SMVc,modNL); 
  end;
  if (HasAccountRecon) then begin
  Register("Сверка","Сверка",BankRecWClass,modNL);
  end;
  RegisterWS("Счета","Счета","Новый счёт",AccVc,modNL); 
  if (HasObjects) then begin
    RegisterWS("Объекты","Объекты","Новый объект",ObjVc,modNL); 
  end;
  if (HasNLBudget) then begin
    RegisterWS("Бюджеты","Бюджеты","Новый бюджет",Bud1Vc,modNL); 
    RegisterWS("Пересмотр. бюджеты","Пересмотр. бюджет","Новый пересмотренный бюджет",Bud2Vc,modNL); 
  end;
  Register("План платежей","План платежей",PlannedPaymentsWClass,modNL);         
  Register("Банковская выверка","Банковская выверка",BankAccountReconWClass,modNL);  

  Setting("Классификации счетов",AccClassLClass,modNL);
  Setting("Типы классификации счетов",AccClassTypeLClass,modNL);
  Setting("Коды счетов",ACShortLClass,modNL);
  Setting("Переносы счетов",AccTransLClass,modNL);
  Setting("Учетные периоды",AccPeriodLClass,modNL);
  Setting("Автопроводки",AutLClass,modNL);
  Setting("Автоматическое исключение",AccElimLClass,modNL);
  if (HasLocalization("EST,USA")) then begin
  Setting("Банковские транзакции",BankTRLClass,modNL);
  end;
  Setting("Перенесённые балансы",FBLClass,modNL);         
  Setting("Классы бюджета",BudgetClassTClass,modNL);         
  Setting("Показатели бюджета",BFLClass,modNL);
  Setting("Формулы расчета",CalcFormLClass,modNL);
  if (HasLocalization("RUS")) then begin
    Setting("Корреспондирующие счета",CrspAccTClass,modNL); 
  end;
  if (HasLocalization("HRV,SVN")) then begin
    Setting("(Croatia, Slovenia) #VAT# Rate Classification",CashInvCroSBlockTClass,modNL);
  end;
  Setting("Электронная НДС декларация",EVATDeclTClass,modNL);
  Setting("Финансовые годы",YearTClass,modNL);
  Setting("Книга доходов и расходов",IncExpBookLClass,modNL);

  if (Modb.InterCompany) then begin
    Setting("Правила межфирменных операций",ICTRuleLClass,modNL);  
  end;
  
  Setting("Информация отчета по ликвидности",LiqInfoLClass,modNL);  
  Setting("Расходы/доходы будущих периодов",AutSimPerLClass,modNL);
  Setting("Серии номеров - Симуляции",SMSerTClass,modNL);
  Setting("Серии номеров - Записи операций",TRSerTClass,modNL);
  Setting("Контроль типов объектов",OTCheckTClass,modNL);
  Setting("Типы объектов",OTLClass,modNL);
  if (HasLocalization("FIN,HRV,POL,PRT,SRB,SVN")) then begin 
    Setting("Серии номеров - Декларации НДС",VATDeclTClass,modNL); 
  end;
  Setting("Запланированный платёж",PlannedPaymentLClass,modNL);         
  Setting("Представление сальдо",AGrTClass,modNL);
  Setting("Учет курсовых разниц",NLRateTClass,modNL);
  Setting("Курсовые разницы",NLRateLClass,modNL);
  Setting("Описания сверок",ReconCodeLClass,modNL);
  Setting("Настройки сверок",ReconSetTClass,modNL);
  Setting("Настройки отчетов",Rs2WClass,modNL);
  Setting("Записи из подсистем",TRGenTClass,modNL);
  Setting("Счета контроля подсистем",SLAccTClass,modNL); // More logical to be here...

  Setting("Группы налоговых счетов",TAccGroupLClass,modNL);
  Setting("Налоговые счета",TAccLClass,modNL);
  if (HasLocalization("POL")) then begin
    Setting("Tax Authorities IDs",TaxAuthIDBlockTClass,modNL); //!!TRANSLATE
  end;
  if (HasLocalization("USA")) then begin
    Setting("Tax Integration Avalara",TaxRateInterfaceTClass,modNL); //!!TRANSLATE
  end;
  Setting("Налоговые отчёты",TaxRepLClass,modNL);
  if (HasLocalization("POL")) then begin
    Setting("Tax Reporting Settings",TaxRepCUTClass,modNL); //!!TRANSLATE
  end;
  Setting("Налоговые правила",TaxRulesLClass,modNL);
  Setting("Шаблоны расч. налогов",TaxTemplateLClass,modNL);
  if (HasLocalization("RUS")) then begin         
  Setting("Налоговые записи операций",TTRLClass,modNL);
  Setting("Поля налоговых записей",TTRFieldTClass,modNL);
  Setting("Сопоставления налоговых записей",TTRMapLClass,modNL);
  Setting("Настройки налоговых записей",TTRTClass,modNL);
  end;
  if (HasLocalization("DEN")) then begin         
  Setting("Шаблоны проводок",DanTRLClass,modNL); //Danish only
  Setting("Шаблоны проводок - Счета",DanTRSetLClass,modNL); //Danish only
  end;
  Setting("Настройки записей операций",TrTClass,modNL);
  if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
  Setting("Контроль кодов налоговых шаблонов",VATCodeControlTClass,modNL);
  end else begin
    Setting("Контроль кодов НДС",VATCodeControlTClass,modNL); 
  end;
  if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
  Setting("Код НДС в строках транзакции",TaxTemplateTClass,modNL);
  end;
  Setting("Коды НДС",VATCodeTClass,modNL);
  if (HasLocalization("DEU,FIN,HRV,NOR,POL,PRT,SRB,SVN")) then begin
    Setting("#VAT# Declarations",VATDeclLClass,modNL);
  end;
  if (HasLocalization("DEU,FIN,HRV,POL,PRT,SRB,SVN")) then begin
  Setting("Элементы XBRL отчетности",XBRLElementLClass,modNL);
  Setting("Настройки XBRL отчетности",XBRLSettingsLClass,modNL);
  end;
  if (HasLocalization("EST")) then begin
    Setting("Настройки отчёта НДС INF",VATInfReportTClass,modNL); 
  end;
  Setting("Элементы отчётности XBRL",XBRLElementLClass,modNL); 
  Setting("Настройки отчётности XBRL",XBRLSettingsLClass,modNL); 
  if (HasLocalization("EST")) then begin 
    Setting("RiigiTarkvara",RTViiteNumTClass,modNL);
  end;
/*  Setting("Курсовые разницы по базовым валютам",NYTClass,modNL);*/

  if (HasLocalization("DEU")) then begin
    Document("НДС за период (Германия)",PerVATGerRClass,TaxRepForm,TaxRepFClass,modNL);
  end;
  Document("Симуляции",Sim2RClass,SMForm,SMFClass,modNL);
  Document("Налоговый отчет",TaxDocRClass,TaxRepForm,TaxRepFClass,modNL);
//  Document("Записи операций",Trans2RClass,Trans2Rn,0,modNL);
  Document("Записи операций",TRRClass,TRForm,TRFClass,modNL);

  Document("Финансовые показатели",KeyDRClass,KFRForm,KFRFClass,modNL);

//Document("Отчёт по НДС",VATDocRClass,VATRepForm,VATRepFClass,modNL);  //does not exist


  Report("Сверка записей",ACReconRClass,ACRecRn,0,modNL);
//  Report("Accrual Report",AccrualRClass,AccrualRn,0,modNL);
  Report("Отчёт по записям будущих периодов",AccrualNewRClass,AccrualNewRn,0,modNL);
  Report("Оборотно-сальдовая ведомость",MBARClass,MBARn,0,modNL);
  Report("Оборотно-сальдовая ведомость (фиск.)",MBA3RClass,MBA3Rn,0,modNL);
  Report("Баланс",BalRClass,BalRn,UserDefRepDClass,modNL);
  Report("Банковское согласование",BankReconRClass,BankRecRn,0,modNL);
  Report("Выписка банка",BankStRClass,BankStRn,0,modNL);
  if (HasLocalization("EST")) then begin 
  Report("Операции банка",BankTRRClass,BankTRRn,0,modNL);
  end;
  Report("Курсы обмена основных валют",NLBRateRClass,NLBRateRn,0,modNL);
  Report("Журнал бюджетов",BudgJRClass,BudgJRn,0,modNL);
  Report("План счетов",AccListRClass,AccListRn,0,modNL);
  if (HasLocalization("EST")) then begin 
    Report("Проверка данных НДС контактов",CUVATInfRClass,CUVATInfRn,0,modNL); 
  end;
  Report("Список исправлений",CorrRClass,CorrRn,0,modNL);
  Report("Корреспонденция счетов",CorspRClass,CorspRn,0,modNL);
  Report("Справка по счету кредиторов",VeCreditRClass,VeCreditRn,0,modNL);
  Report("Изменение курса на валютных счетах",NLRateRClass,NLRateRn,0,modNL);
  Report("Остатки на счетах по дням",DayBalNLRClass,DayBalNLRn,0,modNL);
  Report("Справка по счету дебиторов",CuDebtorRClass,CuDebtorRn,0,modNL);
  if (HasLocalization("CRI")) then begin
    Report("Expenses Report D-151 (Overview) (Costa Rica)",CRD151RClass,CRD151Rn,0,modNL);
  end;
  Report("Журнал начального сальдо",ForwBalJRClass,ForwBalJRn,0,modNL);
  Report("Книга приходов и расходов",IncExpBookRClass,IncExpBookRn,0,modNL);
  if (Modb.InterCompany) then begin
    Report("Межфирменное сравнение счёта",ICACRClass,ICACRn,UserDefRepDClass,modNL);  
  end;
  if (HasLocalization("LTU")) then begin
    Report("iSAF",LitiSAFRClass,LitiSAFRn,0,modNL); //!!TRANSLATE
  end;
  Report("Финансовые показатели",KeyRClass,KeyRn,UserDefRepDClass,modNL);
  Report("Прогноз ликвидности",LiquidityRClass,LiquidityRn,0,modNL);
  Report("Курсовые разницы на валютных счетах",MultiCurAccRClass,MultiCurAccRn,0,modNL);
  Report("Записи операции по будущим периодам",GenPerTRRClass,GenPerTRRn,0,modNL);
  Report("Записи операций, подсистемы",TransGenRClass,TransGenRn,0,modNL);
  Report("Главная книга",MainRClass,MainRn,0,modNL);
  Report("Сальдо объектов",ObjResRClass,ObjResRn,0,modNL);
  Report("Отчёт объект/количество",ObjQtyRClass,ObjQtyRn,0,modNL);
  Report("Прибыль и убытки",ResRClass,ResRn,UserDefRepDClass,modNL);
  Report("Журнал пересмотренных бюджетов",RevBudgJRClass,RevBudgJRn,0,modNL);
  Report("Журнал симуляций",SMJRClass,SMJRn,0,modNL);         
  Report("Оборот налоговых счетов",TAccBalRClass,TAccBalRn,0,modNL);
  Report("Вычисление налогов", Tax100Class,Tax100Rn,0,modNL);
  Report("Налоговые записи по регистрам",TTRRClass,TTRRn,0,modNL);
  Report("Журнал шаблонов записей операций",DanTRJRClass,DanTRJRn,0,modNL);
  Report("Проверка корреспонденции",CorstRClass,CorstRn,0,modNL);//they wanted it back in Latvia
  Report("Журнал операций",TransRClass,TransRn,0,modNL);
  Report("Сводный отчет по записям операций",TransListRClass,TransListRn,0,modNL);
  Report("Проверочный баланс",SBRClass,TrialRn,0,modNL);
  if (HasLocalization("EST")) then begin 
    Report("НДС INF",VATInfRClass,VATInfRn,0,modNL); 
  end;
  if (HasLocalization("KEN,ZWE")) then begin
    Report("Отчёт по НДС, сводный",ALLVATZWERClass,ALLVATZWERn,0,modNL); 
    if (HasLocalization("KEN")) then begin
      Report("Листинг НДС (Кения)",ALLVATKENRClass,ALLVATKENRn,0,modNL); 
    end;
  end else begin
    Report("Отчёт по НДС, сводный",ALLVATRClass,ALLVATRn,0,modNL); 
  end;
  if (HasLocalization("UKR")) then begin
    Report("Приложение к декларации по НДС № 5 (Украина)",VATRepApp5RClass,VATRepApp5Rn,0,modNL);
  end;
  Report("Отчёт по НДС",VATRClass,VAT2Rn,UserDefRepDClass,modNL);
  Report("Отчёт по НДС по покупкам",PLVATRepRClass,PLVATRepRn,0,modNL);
  Report("Отчёт по НДС по продажам",SLVATRepRClass,SLVATRepRn,0,modNL);
  if (HasLocalization("ESP")) then begin
    Report("#VAT# Report Purchases (Spain)",PLESPInVATRClass,PLESPInVATRn,0,modNL);
    Report("#VAT# Report Sales (Spain)",SLESPOutVATRClass,SLESPOutVATRn,0,modNL);
  end;
  Report("Журнал операций по НДС",VATTransJRClass,VATTransJRn,0,modNL);
  Report("XBRL Report",XBRLReportRClass,XBRLReportRn,0,modNL);
//  Report("Курсовые разницы по базовым валютам",Base2DiffRClass,Base2DiffRn,0,modNL);
//  Report("Корреспонденция счетов (Россия)",CorspRClass,CorspRn,0,modNL);
/* Estonia should Include this */
  if (HasLocalization("EST")) then begin
    Report("RiigiTarkvara Object Balance",RiigiRClass,RiigiRn,0,modNL);
    Report("RiigiTarkvara Budget Report",RTPrLosRClass,RTProLosRn,0,modNL);   
    Report("RiigiTarkvara Object Result",RiigiNewRClass,RiigiNewRn,0,modNL);  
    Report("RiigiTarkvara Object Type Result",RiigiOTRClass,RiigiOTRn,0,modNL);  
    Report("RiigiTarkvara Budget Comparison",RTPrLosNewRClass,RTProLosNewRn,0,modNL);   
  end;
/*remember to update RsWDel in main.c when adding report
  SelRep = SelRep - (X + nr of new reports);
  This is not good for HAL
*/

/* Finnish */
  
  Export("Суммированный ежемесячный отчет о прибылях и убытках",MonthResEClass,MonthResEn,modNL);
  if (HasLocalization("GTM")) then begin
    Export("Assists Books (Guatemala)",GTVATEClass,GTVATEn,modNL);
  end;
  Export("Консолидация",ConsEClass,ConsEn,modNL);
  if (HasLocalization("FRA")) then begin
    Export("Экспорт FEC",FrenchFECEClass,FrenchFECEn,modNL); 
  end;
  if (HasLocalization("DEU")) then begin
    Export("GDPdU Data to Simba",GDPdUDataToSimbaEClass,GDPdUDataToSimbaEn,modNL); 
  end;
  if (HasLocalization("SGP")) then begin 
    Export("Файл аудита IRAS",GenIRASEClass,IRASAuditEn,modNL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("iSAF",LitTaxXmlEClass,LitTaxXmlEn,modNL); //!!TRANSLATE
  end;
  if (HasLocalization("ESP")) then begin
    Export("Экспорт НДС (Гипузкоа)",GipuzkoaVATEClass,GipuzkoaVATEn,modNL); 
  end;
  Export("Финансовые показатели",KeyEClass,KeyEn,modNL);
  Export("Сальдо по месяцам",MBEClass,MBEn,modNL);
  Export("Сальдо объектов",FBEClass,FBEn,modNL);
  if (HasLocalization("MEX")) then begin
    Export("E-Bookkeeping",EBookkeepingEClass,EBookkeepingEn,modNL); 
  end;
  if (HasLocalization("CRI")) then begin
    Export("Expenses Report D-151 (Detailed) (Costa Rica)",CRD151EClass,ExpCRD151En,modNL);
  end;
  if (HasLocalization("EST")) then begin
    Export("Riigikassa Object Result",RiigiNewEClass,RiigiNewEn,modNL);
  end;
  if (HasLocalization("PAN")) then begin
    Export("Report 72 and 94 (Panama)",PANReport72y94EClass,PANReport72y94En,modNL);
    Export("Report 73 (Panama)",PANReport73EClass,PANReport73En,modNL);
  end;
  if (HasLocalization("PRT")) then begin
    Export("SAFT (Португалия)",PortTaxXmlEClass,PortTaxXmlEn,modNL);
  end;
  if (HasLocalization("NOR")) then begin
    Export("SAFT",NorTaxXmlEClass,NorTaxXmlEn,modNL); //!!TRANSLATE
  end;
  if (HasLocalization("LTU")) then begin
    Export("SAFT",LitSAFTTaxXmlEClass,LitSAFTTaxXmlEn,modNL); //!!TRANSLATE
  end;
  if (HasLocalization("SWE")) then begin
    Export("SIE (Швеция Экспорт/Импорт)",SieEClass,SieEn,modNL);
  end;
  if (HasLocalization("SVN")) then begin
    Export("Записи операций (Словения)",TRSloEClass,TRSloEn,modNL);
  end;
  Export("Проверочный баланс",SBEClass,SBEn,modNL);
  if (HasLocalization("EST")) then begin
    Export("RiigiTarkvara Object Balance",RiigiEClass,RiigiEn,modNL);
    Export("RiigiTarkvara Transaction Rows",RiigiTRrwEClass,RiigiTRrwEn,modNL);  
  end;
  if (HasLocalization("POL")) then begin
    Export("Unified Export",PolUnifiedExportEClass,PolUnifiedExportEn,modNL); //!!TRANSLATE
  end;
  if (HasLocalization("FIN")) then begin
    Export("#VAT# Periodic (Finland)",FinPeriodicVATEClass,FinPeriodicVATEn,modNL);  
  end;
  if (HasLocalization("LVA")) then begin
    Export("Годовой НДС (Латвия)",LatAnnualVATEClass,LatAnnualVATEn,modNL);
  end;
  if (HasLocalization("EST")) then begin 
    Export("VAT INF",VATInfEClass,VATInfEn,modNL); 
  end;
  if (HasLocalization("LTU")) then begin 
    Export("Периодическая декларация НДС (Литва)",LTUVATEClass,LTUVATEn,modNL);  
  end;
  if (HasLocalization("LVA")) then begin  
    Export("НДС за период (Латвия)",LatPeriodicVATEClass,LatPeriodicVATEn,modNL);
  end;
  if (HasLocalization("SVN")) then begin
    Export("НДС за период (Словения)",SloVATPeriodicEClass,SloVATPeriodicEn,modNL);
  end;
  Export("XBRL отчет",XBRLReportEClass,XBRLReportEn,modNL);
  
  if (HasLocalization("CAN")) then begin
    Import("American Express Statement",AmexStatementIClass,AmexStatementIn,modNL);   
  end;
  if (HasLocalization("USA")) then begin
    Import("American Express Statement",AmexStatementIClass,AmexStatementIn,modNL);   
    Import("Amex Statment Import",AmexBTAIn,AmexBTAIn,modNL); 
  end;
  Import("Банковские операции",BankTRIClass,BankTRIn,modNL);  
  if (HasLocalization("SWE,NOR,FIN")) then begin
    Import("H-Laun зарплата",HLaunIn,HLaunIn,modNL);
    Import("Hogia зарплата",AutIn,AutIn,modNL);
  end;
  if (HasLocalization("EST")) then begin 
//  Import("SEB Bank Transactions",SEBBankTRIn,SEBBankTRIn,modNL);//test code only
  end;
  if (HasLocalization("SWE")) then begin
    Import("SIE (Швеция)",SieIn,SieIn,modNL);
  end;
  Import("Обновить SRU Коды",UpdateSRUIn,UpdateSRUIn,modNL);

  Maintenance("Автоматическое исключение счетов",AccElimVClass,AccElimMn,modNL);
  Maintenance("Перенос сальдо счетов",AccTransVClass,AccTransMn,modNL);
  Maintenance("Добавить объект в записи операций",AddObjTRVClass,AddObjTRMn,modNL);
  Maintenance("Изменить бюджет",Bud1VClass,Bud1Mn,modNL);
  Maintenance("Создать записи по расходам будущих периодов",GenPerTRVClass,GenPerTRMn,modNL);
  Maintenance("Генерировать записи планированных платежей",GenPlanPymntVClass,GenPlanPymntMn,modNL);         
  Maintenance("Закрытие записей операций",LockNLVClass,LockNLMn,modNL);
  Maintenance("Вставить код контакта в виде объекта на записях операций",ContactToTRObjVClass,ContactToTRObjMn,modNL); 
  Maintenance("Списание курсовых разниц",NLRateVClass,NLRateMn,modNL);
  if (HasLocalization("ARG,BOL")) then begin  
    Maintenance("Revaluation of Base Currency 1",NLBRate1VClass,NLBRate1Mn,modNL);  
  end;  
  Maintenance("Переоценка основной валюты 2",NLBRateVClass,NLBRateMn,modNL);
  Maintenance("Пересмотренный бюджет из бюджета",Bud2FromBud1VClass,Bud2FromBud1Mn,modNL);         
  Maintenance("Изменить пересмотренный бюджет",Bud2VClass,Bud2Mn,modNL);
  if (HasLocalization("EST")) then begin
    Maintenance("RiigiTarkvara Object Balances",RiigiBalVClass,RiigiOTMn,modNL);
  end;
  Maintenance("Обновить записи операций",NLAddRateVClass,NLAddRateMn,modNL);
  Maintenance("Симуляции конца года",CYearVClass,CloseYMn,modNL);
//  Maintenance("B/FW Balances",IBVClass,IBMn,modNL);
/* Estonia should Include this */
/* modPL - Расчёты с поставщиками*/


  RegisterWS("Счета-фактуры поставщика","Счета-фактуры поставщика","Новый счёт-фактура поставщика",VIVc,modPL); 
  RegisterWS("Платежи","Платежи","Новый платёж",OPVc,modPL); 
  RegisterWS("Контракты Расчётов с Поставщиками","P/Order Contracts","New P/Order Contract",POCOVc,modPL); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modPL); 
  Register("Эл. cч/ф поставщиков","Эл. cч/ф поставщиков",VEIVVc,modPL);
  if (HasBuyBack) then begin
  RegisterWS("Обратные закупки","Обратные закупки","Новые обратные закупки",BuyBackVc,modPL); 
  end;
  if (HasLocalization("USA")) then begin
    RegisterWS("Выданные собственные чеки","Выданные собственные чеки","Новый собственный чек",OpenOwnChkLClass,modPL); 
    RegisterWS("Все собственные чеки","Все собственные чеки","Новый собственный чек",OwnCheckVc,modPL); 
  end;

  Setting("Настройки записей - расчеты с поставщиками",APAccTClass,modPL);
  Setting("Обмен данными с банк-клиентом",BankFileTClass,modPL);
  Setting("Банки",BankLClass,modPL);
  Setting("Формулы расчета",CalcFormLClass,modPL);
  if (HasLocalization("HRV,SVN")) then begin         
    Setting("Официальные формы контактов",CULegalFormLClass,modPL);         
  end;
  if (HasLocalization("EST,LVA")) then begin
    Setting("Очередь электронных платежей",EPaymentQueLClass,modPL);
  end;
  Setting("Eurocard",EuroCardLClass,modPL);
  Setting("Настройки импорта Eurocard",ECInSetTClass,modPL);
//  Setting("Extra Costs",ExtraCostLClass,modPL); not used
  if (HasLocalization("UKR")) then begin
    Setting("Первое событие (покупки)",FEVILClass,modPL);
  end;
  if (HasLocalization("FIN")) then begin
    Setting("FInvoice",FInvoiceTClass,modPL);  
  end;
  Setting("Intrastat покупки",IntrastatVITClass,modPL);
  if (HasLocalization("UKR")) then begin
    Setting("Серии номеров - Первое событие (покупки)",FEVISerTClass,modPL);
  end;
  Setting("Серии номеров - Платежи поставщикам",OPSerTClass,modPL);
  Setting("Серии номеров - Сч/ф поставщиков",VISerTClass,modPL);
  if (HasLocalization("HRV,POL,SVN,SRB,UKR")) then begin
    Setting("Серии номеров - Коррекции НДС расчетов с поставщиками",VATVISerTClass,modPL);
  end;
  Setting("Коды оплаты",PaymentCodeLClass,modPL);
  Setting("Способы оплаты",PMTClass,modPL);
  Setting("Настройки платежей",OPTTClass,modPL);
  Setting("Условия оплаты",PDLClass,modPL);
//  Setting("PO Contract Extra Costs",POCOCostLClass,modPL);  not used
  Setting("Настройки сч/ф поставщиков",VITTClass,modPL);
  if (HasLocalization("EST,LVA")) then begin
    Setting("Signing Requirements for Payments",EPaySignReqTClass,modPL);
  end;
//  Setting("#Stock# Exchange Prices",StExValLClass,modPL);//not used ever
  Setting("Категории поставщиков",VGLClass,modPL);  
  if (HasLocalization("ARG,BRA,ITA,KEN,MEX,PHL,PRT,SGP,ZAF")) then begin
  Setting("Удержания поставщиков",WHVELClass,modPL);
  end;
  if (HasLocalization("ARG,PHL")) then begin
  Setting("#Supplier# Withholdings Excemptions",WHVEExmptLClass,modPL); 
  end;
  Setting("Счета НДС",VATTClass,modPL);
    if (HasLocalization("HRV,POL,RUS,SLV,SVN,SRB,UKR")) then begin
    Setting("Виды коррекций НДС для покупок",VATVITypeTClass,modPL);
    Setting("Коррекция НДС для покупок",VATVILClass,modPL);
  end;
  if (HasLocalization("ARG,BRA,ITA,KEN,MEX,PHL,PRT,SGP,ZAF")) then begin
  Setting("Формула расчета удержания",WHCalcFormLClass,modPL);
  Setting("Сертификат удержания",WHCertificateLClass,modPL);
  Setting("Удерживаемые налоги",WHTaxTClass,modPL);
  end;

  Document("Чековые документы",OP2DRClass,OP2DForm,OP2DFClass,modPL);
//  Document("Credit Notes",CredVIRClass,CredVIForm,CredVIFClass,modPL);
  Document("Дебитовые сч/ф",DebVIRClass,DebVIForm,DebVIFClass,modPL);
  Document("Электронные сч/ф поставщикам",VEIVRClass,VEIVForm,VEIVFClass,modPL);
  Document("Intrastat - Расчёты с поставщиками",IntraStaPuRClass,InStaPuForm,InStaPuFClass,modPL);
  Document("Список неоплаченных счетов-фактур поставщика",APSRClass,APSForm,APSFClass,modPL);
  if (HasLocalization("RUS")) then begin 
  	Document("Книга покупок",PurchB3RClass,PLBookForm,PLBookFClass,modPL); 
  end;
  Document("Платежные документы",OPDRClass,OPDForm,OPDFClass,modPL);
  Document("Платежи",OPRClass,OPForm,0,modPL);
  Document("Ведомость расчета с поставщиками",VEPerRClass,VEPerForm,VEPerFClass,modPL);
  if (HasLocalization("HRV,SVN")) then begin
    Document("Purchase Book",PurchaseBookHRVRClass,PurchaseBookHRVForm,PurchaseBookHRVFClass,modPL); 
  end;
  Document("Сч/ф поставщиков",VIRClass,VIForm,VIFClass,modPL);
  Document("Договоры поставок",POCORClass,POCOForm,POCOFClass,modPL);
  if (HasLocalization("ARG,BRA,ITA,PRT,SGP")) then begin
  Document("Сертификаты удержания",WHCertificateRClass,WHCertificateForm,WHCertificateFClass,modPL);
  end;
  if (HasLocalization("SGP")) then begin
  Document("Ведомость сертификатов удержания",WHCertificatePerRClass,WHCertificatePerForm,WHCertificatePerFClass,modPL);
  end;
//  Document("Коррекция НДС книги покупок",VATVIRClass,VATVIForm,VATVIFClass,modPL); P Inv is report
/* Who made this one??? */
/* This is a Mock Doc, ie a Report. */
//  Document("Сч/ф поставщиков",VIRClass,VIRn,0,modPL); /* Still exists as a HAL report */

  if (HasLocalization("PHL")) then begin
    Report("Alphalist (Philippines)",AlphalistRClass,AlphalistRn,0,modPL);
  end;
  if (HasBuyBack) then begin
  Report("Журнал обратных закупок",BuyBackJRClass,BuyBackJRn,0,modPL);
  end;
  if (HasLocalization("EST,LVA")) then begin
    Report("Статус электронного платежа",HTSOPStatRClass,HTSOPStatRn,0,modPL);
  end;
  if (HasLocalization("EST")) then begin         
    Report("Валидация данных (платежи SEPA)",FindMisMatchSEPARClass,FindMisMatchSEPARn,0,modPL);         
  end;
  Report("НДС покупок для ЕС",PLEUVATRClass,PLEUVATRn,0,modPL);
  if (HasLocalization("UKR")) then begin
    Report("Журнал покупок по первым событиям",FEVIJRClass,FEVIJRn,0,modPL);
  end;
  if (HasLocalization("ARG")) then begin
    Report("Gross Income Perceptions (SI.FE.RE)",ArgGrIncPercRClass,ArgGrIncPercRn,0,modPL);
  end;
  Report("Interest Cost Calculation",VIIntCostCalcRClass,VIIntCostCalcRn,0,modPL); //!!TRANSLATE
  if (HasLocalization("LVA")) then begin
    Report("Интрастат покупки (Латвия)",LatIntrastatPURClass,LatIntrastatPURn,0,modPL);  
  end;
  if (HasLocalization("SLV")) then begin
    Report("Monthly Purchase Witholdings (El Salvador)",PLRetSLVRClass,PLRetSLVRn,0,modPL);
  end;
  Report("Отчёт о неоплаченных счетах-фактурах поставщика",APS2RClass,APS2Rn,0,modPL);
  Report("Сводный отчет по взносам",InstListPLRClass,InstListPLRn,0,modPL);
  Report("Статистика ставок НДС",PLVATRClass,PLVATRn,0,modPL);
  Report("Отчёт по НДС",PLVAT2RClass,PLVAT2Rn,0,modPL);
  Report("Журнал платежей",OPJRClass,OPJRn,0,modPL);
  if (HasLocalization("PHL")) then begin
    Report("Payment Journal BIR",OPBIRJRClass,OPBIRJRn,0,modPL); //!!TRANSLATE
  end;
  Report("Прогноз платежей",OPProgRClass,OPProgRn,0,modPL);
  Report("Ведомость расчетов с поставщиками",VePer2RClass,VePerRn,0,modPL);
  Report("История предоплат поставщикам",PerPayHisPLRClass,PerPayHisPLRn,0,modPL);
  if (HasLocalization("BLR")) then begin
    Report("Книга покупок (Белоруссия)",PurchB2RClass,PurchB2Rn,0,modPL);
  end;
  if (HasLocalization("RUS")) then begin
    Report("Книга покупок (Россия)",PurchB1RClass,PurchB1Rn,0,modPL);
  end;
  Report("Журнал счетов-фактур поставщиков",VIJRClass,VIJRn,0,modPL);
  Report("Статус счетов-фактур поставщиков",VIInfoRClass,VIInfoRn,0,modPL); 
  Report("Кредиторская задолженность",APRClass,APRn,0,modPL);
  if (HasLocalization("LTU")) then begin
    Report("НДС по приобретенным товарам (Литва)",LitVATPurchRClass,VATPurchRn,0,modPL);
  end;
  Report("Дебиторская и кредиторская задолженность",ARAPRClass,ARAPRn,0,modPL);
  Report("Список поставщиков",VERClass,VERn,0,modPL);
  Report("История покупок по поставщику",MonthSalesHistVERClass,MonthSalesHistVERn,0,modPL);
  Report("Статистика поставщиков",VSRClass,VSRn,0,modPL);
  Report("Удержания по поставщикам",SuplWithHoldRClass,SuplWithHoldRn,0,modPL);
  if (HasLocalization("UKR")) then begin
    Report("Регистр коррекций НДС для покупок (Украина)",VATVIRegUkrRClass,VATVIRegUkrRn,0,modPL);
  end;
  Report("История ИНН",CUVERClass,CUVERn,0,modPL);
  Report("НДС отчет по покупкам",PLVATRepRClass,PLVATRepRn,0,modPL);
  if (HasLocalization("ARG")) then begin
    Report("НДС отчет по покупкам (Аргентина)",ArgPurchVATRClass,ArgPurchVATRn,0,modPL);
  end;
  if (HasLocalization("BOL")) then begin
    Report("НДС отчет по покупкам (Боливия)",PLVATBolRClass,PLVATBolRn,0,modPL);
  end;
  if (HasLocalization("ITA")) then begin
    Report("#VAT# Report Purchases (Italy)",PLVATITARClass,PLVATITARn,0,modPL); //!!TRANSLATE
  end;
  if (HasLocalization("SLV")) then begin
    Report("#VAT# Report Purchases (Сальвадор)",PLVATSLVRClass,PLVATSLVRn,0,modPL);
  end;
  if (HasLocalization("GTM")) then begin
    Report("#VAT# Report Purchases (Гватемала)",PLVATGTRClass,PLVATGTRn,0,modPL);
  end;
  if (HasLocalization("HND")) then begin
    Report("НДС отчет по покупкам (Гондурас)",PLVATHonRClass,PLVATHonRn,0,modPL);
  end;
  if (HasLocalization("HUN")) then begin
    Report("НДС отчет по покупкам (Венгрия)",PLVATHunRClass,PLVATHunRn,0,modPL);  
  end;
  if (HasLocalization("LTU,KEN")) then begin
    country = "(Lithuania)";
    if (HasLocalization("KEN")) then begin 
      country = "(Kenya 1)";
    end;    
    Report("#VAT# Report Purchases " & country,PLVATLitRClass,PLVATLitRn,0,modPL);
  end;
  if (HasLocalization("MEX")) then begin
    Report("НДС отчет по покупкам (Мексика)",PLVATMexRClass,PLVATMexRn,0,modPL);
  end;
  if (HasLocalization("NIC")) then begin
    Report("НДС отчет по покупкам (Никарагуа)",PLVATNIRClass,PLVATNIRn,0,modPL);
  end;
  if (HasLocalization("PAN")) then begin
    Report("НДС отчет по покупкам (Панама)",PLVATPARClass,PLVATPARn,0,modPL);
  end;
  if (HasLocalization("SRB")) then begin
    Report("НДС отчет по покупкам (Serbia)",PLVATSerRClass,PLVATSerRn,0,modPL);    
  end;
  Report("НДС по покупкам",RealSuppRClass,RealSuppRn,0,modPL);
  if (HasLocalization("PHL")) then begin
    Report("НДС к получению",VATSuppPurchasesPHLRClass,VATSuppPurchasesPHLRn,0,modPL); 
  end;

  Export("Банковский файл",MPEClass,MPEn,modPL);
  if (HasLocalization("HRV")) then begin
    Export("Закупки #VAT# ЕС",PLEUVATHRVECLass,PLEUVATHRVEn,modPL);         
  end;
  if (HasLocalization("UKR")) then begin         
    Export("Книга покупок по первым событиям",FEVIBookEClass,FEVIBookEn,modPL);
  end;
  if (HasLocalization("EST")) then begin
    Export("Intrastat покупки (Эстония)",EstIntrastatVIEClass,EstIntVIEn,modPL);
  end;
  if (HasLocalization("FIN")) then begin
    Export("Intrastat покупки (Финляндия)",FinIntrastatVIEClass,FinIntVIEn,modPL);
  end;
  if (HasLocalization("DEU")) then begin
    Export("Intrastat покупки (Германия)",GerIntrastatVIEClass,GerIntVIEn,modPL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("Интрастат покупки (Латвия)",LatIntrastatPUEClass,LatIntrastatPUEn,modPL);  
  end;
  if (HasLocalization("LTU")) then begin
    Export("Intrastat покупки (Литва)",LitIntrastatVIEClass,LitIntVIEn,modPL);
  end;
//  Export("Intrastat #Purchase Invoices#",EngIntrastatVIEClass,EngIntVIEn,modPL);
  if (HasLocalization("GBR")) then begin
    Export("Intrastat #Purchase Invoices# (UK)",EngIntrastatVIUKEClass,EngIntVIUKEn,modPL);
  end;
  if (HasLocalization("SVN")) then begin
    Export("Счета-фактуры поставщиков (Словения)",VISloEClass,VISloEn,modPL);
  end;
  if (HasLocalization("ARG")) then begin
    Export("P/L CITI (Аргентина)",PLCITIEClass,PLCITIEn,modPL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("Книга покупок для деревообр. промыш.", ForestPLEClass,ForestPLEn,modPL);
    Export("P/L Latvian VAT Report",PLVAT1ExpEClass,PLVAT1En,modPL);
  end;
  Export("Отчёт о ликвидности - Расчёты с поставщиками",PLLiqEClass,PLLiqEn,modPL);
  if (HasLocalization("ARG")) then begin
    Export("P/L VAT Gross Income Withholdinggs (Аргентина)",PLGIWArgEClass,PLGIWArgEn,modPL);
  end;
  if (HasLocalization("BOL")) then begin
    Export("НДС сч/ф поставщиков (Боливия)",PLVATBolEClass,PLVATBolEn,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("НДС сч/ф поставщиков (Литва)",LitVATRegVIEClass,LitVATRegVIEn,modPL);
  end;
  if (HasLocalization("SVN")) then begin
    Export("НДС сч/ф поставщиков (Словения)",PLVATSloEClass,PLVATSloEn,modPL);
  end;
  if (HasLocalization("ARG")) then begin
    Export("Расчёты с поставщиками - сборы НДС  (Аргентина)",PLVATPercEClass,PLVATPercEn,modPL);
    Export("Расчёты с поставщиками - сборы и удержания (Аргентина)",PLARCIBAEClass,PLARCIBAEn,modPL);
    Export("Regional Withholdings (Argentina)",SIFEREVIEClass,SIFEREVIEn,modPL);  
  end;
  if (HasLocalization("PAN")) then begin
    Export("Report 43 (Panama)",PANExport43EClass,PANExport43En,modPL);
  end;
  if (HasLocalization("ARG")) then begin
    Export("Поставщики SICORE (Аргентина)",SICORESubjEClass,SICORESubjEn,modPL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("НДС по покупкам (Латвия)",LatVATPurchasesEClass,LatVATPurchasesEn,modPL);
  end;
  if (HasLocalization("MEX")) then begin
    Export("НДС по покупкам (Мексика, DIOT)",VATPurchMexEClass,VATPurchMexEn,modPL);
  end;
  if (HasLocalization("ARG")) then begin
    Export("Withholding Certificates (Argentina)",WHCertificateEClass,WHCertificateEn,modPL);
  end;
  if (HasLocalization("POL")) then begin  
    Export("Ist@at - Items Import",IstaatItemImportEClass,IstaatItemImportEn,modPL);  
  end;


//  Export("Postgiro (Швеция)",MPEClass,MP2En,modPL);
/* Internal Export Routine, could be commented out. */
 
  if (HasLocalization("HRV,POL,SVN,SRB,UKR")) then begin
    Maintenance("Создать коррекции НДС книги покупок",VATVIVClass,VATVIMn,modPL);
  end;
  if (HasBuyBack) then begin
  Maintenance("Создать счета-фактуры из обратных закупок",VIFromBuyBackVClass,VIFromBuyBackMn,modPL);
  end;
  Maintenance("Создать Е-email из ведомости расчетов с поставщиками",VEPerEmailVClass,VEPerEmailMn,modPL);
  if (HasBuyBack) then begin
//  Maintenance("Split BuyBack Amounts",SplitBuyBackCostVClass,SplitBuyBackCostMn,modPL);
  end;
  Maintenance("Обновить данные поставщиков",UpdSupVClass,UpdSupMn,modPL);
//  Maintenance("Update #VAT Code# on #NL# Trans from Pur. Inv.",VITRUpdVATCodeVClass,VITRUpdVATCodeMn,modPL);//for Latvia Only

  if (HasLocalization("ARG")) then begin
    Import("ARBA Tax List for Supplier Withholdings",ARBAVEWHIClass,ARBAVEWHIn,modPL); //!!TRANSLATE
  end;
  if (HasLocalization("USA")==false) then begin
    Import("Счета Eurocard",EuroCardAccIn,EuroCardAccIn,modPL);
    Import("Счёт-фактура Eurocard",EuroCardIn,EuroCardIn,modPL);
  end else begin
    Import("Импорт ведомости Amex",AmexBTAIn,AmexBTAIn,modPL); 
  end;
  if (HasLocalization("ARG")) then begin
    Import("Региональны сборы и удержания (Аргентина)",PercAndWHIClass,PercAndWHIn,modPL);
    Import("Коррекции региональных сборов и удержаний (Аргентина)",PercAndWHCorrIClass,PercAndWHCorrIn,modPL);
  end;

/* modServ */
//  Register("Активные пользователи","Пользователи",ListUsersClass,modServ);

/* modTS */

  RegisterWS("#Time Sheets#","#Time Sheets#","New #Time Sheet#",TSVc,modTS); 
  RegisterWS("Проекты","Проекты","Новый проект",PRVc,modTS); 
  Register("Записи операций проектов","Записи операций проектов",TBIVVc,modTS);
  RegisterWS("Бюджеты по проекту","Бюджеты по проекту","Новый бюджет по проекту",TBBUVc,modTS); 
  RegisterWS("Планы проектов","Планы проектов","Новый план проекта",PRScheduleVc,modTS); 
  RegisterWS("Коммерческие предложения","Коммерческие предложения","Новое комм. предложение",QTVc,modTS); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modTS); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modTS); 

  Setting("Настройки записей - Расчёт трудозатрат",PRAccClass,modTS);
  Setting("Скидки клиентам",CDLClass,modTS);
  Setting("Требовать заполнение календаря",ForceTimeEntryTClass,modTS);
  Setting("Информация в отчёте о проекте",ProjInfoRepLClass,modTS); 
  Setting("Группы товаров",ITLClass,modTS);
  Setting("Цены на товары/группы работ",TILClass,modTS);
  Setting("Цены на группы работ/товары",TJGILClass,modTS);
  Setting("Группы работ",EGLClass,modTS);
  Setting("Серии номеров - Проекты",PRSerTClass,modTS);
  Setting("Серии номеров - таблицы времени",TSSerTClass,modTS);
  Setting("Типы проектов",PRClassTClass,modTS);
  Setting("Виды классификаций проектов",PRClTypeLClass,modTS);
  Setting("Классификации проектов",PRClLClass,modTS);
  Setting("Настройки товаров проекта",PRITHandleClass,modTS);
  Setting("Этапы проекта",PRStageLClass,modTS);
  Setting("Настройки проектов",PRITClass,modTS);
  Setting("Настройки заданных товаров проекта",PRITHLClass,modTS);
  Setting("Формулы расчета стоимости времени",TBPFormLClass,modTS);
  Setting("Прейскуранты калькуляции проектов",TBPLDefLClass,modTS);
  Setting("Классы времени",TimeClassLClass,modTS);
  Setting("Определённые пользов. назв. полей - Менеджер проекта",PrManagerLabelTClass,modTS);
  Setting("Контроль процесса работы",WIPCheckTClass,modTS);
//  Setting("Использование счетов для кал.проектов",PRAccClass,modTS);

  Report("Контроль исполнения бюджета",BudFollPRClass,BudPFoll2Rn,0,modTS); // Rewritten version of above report
  Report("Статистика сотрудников",EMStatRClass,TSRn,0,modTS);
  Report("Статус сотрудников",EmpStatusRClass,EmpStatusRn,0,modTS);
  Report("Прибыль по сотрудникам",GPEmpRClass,GPEmpRn,0,modTS);
  Report("Прибыль по проектам",GPProRClass,GPProRn,0,modTS);
  Report("Сравнение факта с бюджетом по проектам",PRActBudRClass,PRActBudRn,0,modTS);
  Report("Бонусы проектов",ProjBonusRClass,ProjBonusRn,0,modTS);
  Report("Сч/ф по проектам",ProInvRClass,ProInvRn,0,modTS);
  Report("Список проектов",ProListRClass,PRListRn,0,modTS);
  Report("Прейскуранты проектов",ProjPLRClass,ProjPLRn,0,modTS);
  Report("Отчёт о прибыли и убытках по проектам",PRPLRClass,PRPLRn,0,modTS);
  Report("Покупки проекта",PRPurRClass,PRPurRn,0,modTS);
  Report("Заказы поставщикам по проектам",PRPORClass,PRPORn,0,modTS); 
  Report("Бюджет/предложение проекта",BUQTTBBURClass,BUQTTBBURn,0,modTS);
  Report("Определение доходности проекта",PRRevRecRClass,PRRevRecRn,0,modTS);
  Report("Статус проекта",ProStatRClass,ProStatRn,0,modTS);
  Report("Записи операций по проектам",PrTransRClass,PrTranRn,0,modTS);
  Report("Статистика по товарам обслуживания",PrItemStatRClass,PrItemStatRn,0,modTS);
  Report("Журнал таблиц времени",TSJRClass,TSJRn,0,modTS);
  Report("Действительные записи операции по проекту",ChPrTransRClass,ChPrTransRn,0,modTS);
//  Report("Контроль исполнения бюджета",BudFollPRClass,BudPFollRn,0,modTS);
//  Report("Счета клиентам проекта",ProjSORClass,ProjSORn,0,modTS);

  Document("Бюджеты проекта",TBBudgetRClass,TBBudgetForm,TBBudgetFClass,modTS);
  Document("Информация о проекте",ProjectInfoRClass,ProjectInfoForm,ProjectInfoFClass,modTS);
  Document("Записи операций по проектам",ProjectTransRClass,ProjectTransForm,ProjectTransFClass,modTS);
  Document("Проекты",ProjectRClass,ProjectForm,ProjectFClass,modTS);
  Document("Расписания проектов",PRScheduleRClass,PRScheduleForm,PRScheduleFClass,modTS);
  Document("Коммерческое предложение",QTRClass,QTForm,QTFClass,modTS);
  Document("Таблицы времени",TimeSheetRClass,TimeSheetForm,TimeSheetFClass,modTS);

  Maintenance("Создать записи операций по проекту из отгрузок",BSHTSVClass,BSHTSMn,modTS);
  Maintenance("Изменить валюту проекта",ChangePRCurVClass,ChangePRCurMn,modTS);
  Maintenance("Выписать сч/ф по проекту",ProInvVClass,ProInvMn,modTS);
  
/* modPOS */

    RegisterWS("Счета-фактуры кассового терминала","Счета-фактуры кассового терминала","Новый счёт-фактура",IVCashVc,modPOS); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modPOS); 
  RegisterWS("Остатки по кассе","Остатки по кассе","Новый остаток по кассе",CashierBalVc,modPOS); 
  RegisterWS("Кредитные карты","Кредитные карты","Новая кредитная карта",CreditCardVc,modPOS); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modPOS); 
  RegisterWS("Карты лояльности","Карты лояльности","Новая карта лояльности",LoyaltyCardVc,modPOS); 
    RegisterWS("Счета-фактуры супермаркета","Счета-фактуры супермаркета","Новый счёт-фактура супермаркета",POSPIVCashLClass,modPOS); 
    RegisterWS("Сч/ф кассового терминала","Сч/ф кассового терминала","Новый сч/ф кассового терминала",NPTSIVCashLClass,modPOS); 
  
  Setting("Идентификаторы счета",CCAccountIDLClass,modPOS); 
  Setting("Продукты Apple",ACPLClass,modPOS);

  Setting("Упаковщики",BaggerTCLass,modPOS);
  Setting("События кассы",CashLClass,modPOS);
//  Setting("Cash Printer Client Settings",CashSetTClass,modPOS);
  Setting("Квитанции кредитных карт",CouponLClass,modPOS);
  Setting("Типы кредитных карт",CredCardTypeLClass,modPOS);
  Setting("Способы оплаты по умолчанию",DefCashTClass,modPOS);
  Setting("Правила острочки платежей крелитными картами",DefCCTransTClass,modPOS);  
  Setting("Настройки острочки платежей кредитными картами",DeferCCTClass,modPOS);  
  Setting("Отсроченные платежи кредитными картами",DefCCTransLClass,modPOS);  
  Setting("Статус отсроченных платежей кредитными картами",DefCCTransStatusLClass,modPOS);  
  Setting("Ящики",DrawerLClass,modPOS); 
  Setting("Динамические штрих-коды",VolumBarcodeTCLass,modPOS);
  Setting("Поля для создания нового клиента",NPTSNewCUFieldsTCLass,modPOS);
  if (HasLocalization("BRA")) then begin         
    Setting("Налоговые шаблоны (Бразилия)",ZimFiscalPrinterVATCodeTClass,modPOS);         
  end;
  if (HasLocalization("ZWE")) then begin
    Setting("Налоговые шаблоны (Zimbabwe)",ZimFiscalPrinterVATCodeTClass,modPOS);  
  end;
  Setting("Подарочные чеки",GiftReceiptLClass,modPOS);
  Setting("Типы Подарочных сертификатов ",GCTypeLClass,modPOS);  
  Setting("Настройки подарочных сертификатов",GCTClass,modPOS);
  Setting("Подарочные сертификаты выпущенн.",GCLClass,modPOS);
  Setting("Подарочные сертификаты получен.",GCRLClass,modPOS);
  Setting("Подарочные сертификаты продан.",GCSLClass,modPOS);
  Setting("Терминал",RahaxiTClass,modPOS);
  Setting("Способы оплаты локальной машины",RestPMTClass,modPOS);
  Setting("Локальные машины",LocalMachineLClass,modPOS);
  Setting("Программы лояльности накопительной карты",LCMemberLevelLClass,modPOS);
  Setting("Структура программы лояльности накопительной карты",LCMLevelSetTClass,modPOS);
  Setting("Накопительные баллы",LoyaltyPointsLClass,modPOS);
  Setting("Накопительные баллы по складу",LocLoyaltyPointsLClass,modPOS);
  Setting("Использование накопительных баллов",LoyPointRedeemLClass,modPOS);
  Setting("Использование накопительных баллов по магазинам",LocLoyPointRedeemLClass,modPOS);
  Setting("Идентификаторы продавцов",CCMerchantIDLClass,modPOS); 
  Setting("Модиф-ры",ModifiersLClass,modPOS);
  Setting("Серии номеров - События кассы",CashSerTClass,modPOS);
  Setting("Серии номеров - Купоны",CouponSerTClass,modPOS);
  Setting("Серии номеровs - Отсроченные платежи кредитными картами",DefCCTransSerTClass,modPOS);   
  Setting("Серии номеров - Подарочн. чеки",GiftReceiptSerTClass,modPOS); 
  Setting("Серии номеров - Подарочные сертификаты",GCSerTClass,modPOS);
  Setting("Серии номеров - Подарочные сертификаты получен.",GCRSerTClass,modPOS);
  Setting("Серии номеров - Остатки по кассе",POSBalanceSerTClass,modPOS);
  Setting("Серии номеров - Сч/ф кассового терминала",IVCashSerTClass,modPOS); 
  Setting("Серии номеров - Сессии кассового терминала",POSEventSerTClass,modPOS);
  Setting("Валюты платежей",POSCurrenciesTClass,modPOS);
  Setting("Балансы кас.терм.",POSBalanceLCLass,modPOS);
  Setting("Группы кнопок кас.терм.",POSButtonGroupsLClass,modPOS);
  Setting("POS Button Pictures",POSButtonPictureLClass,modPOS); //!!TRANSLATE
  Setting("Кнопки кас.терм.",POSButtonsLClass,modPOS);
  Setting("Команды кас.терм.",POSCommandsTCLass,modPOS);
  Setting("Сессии кас.терм.",POSEventLCLass,modPOS);
  Setting("Настройки кас.терм.",CashierDefTClass,modPOS);
  Setting("Тексты принтеров",CashPrintTClass,modPOS);
  Setting("Тексты принтеров по локальным машинам",MachineCashLClass,modPOS);
  Setting("Принтеры касс",CashPrSetLClass,modPOS);
  Setting("Разделить товары",SplitINLClass,modPOS);
  Setting("Контролеры",SupervisorTCLass,modPOS);
  Setting("Названия полей задан. пользов. - лок. машина",LocalMachineLBlockTClass,modPOS);
  
  if (HasLocalization("SRB")) then begin
    Report("Книга ежедневных отчетов(OEDI, Сербия)",DayRepBookRClass,DayRepBookRn,0,modPOS);
  end;
  Report("Снятия кассы",CashupRClass,CashupRn,0,modPOS);
  Report("Cтатистика по кассиру",CashierStatsRClass,CashierStatsRn,0,modPOS);
  Report("Анализ сборов",CollectionsAnalysisRClass,CollectionsAnalysisRn,0,modPOS);  
  Report("Сверка квитанций кредитных карт",CouponReconRClass,CouponReconRn,0,modPOS);
  Report("Остатки по дням",DayBalRClass,DayBalRn,0,modPOS);
  if (HasLocalization("SWE")) then begin
    Report("Электронный Журнал",POSEJournalRClass,POSEJournalRn,0,modPOS);  
    Report("Fiscal Control Report (Швеция)",CleanCashCashupRClass,CashupRn,0,modPOS);
  end;
  if (HasLocalization("PRT")) then begin
    Report("Кассовый отчет по фискальному принтеру (Португалия)",EncerrRClass,EncerrRn,0,modPOS);
  end;
  Report("Подарочные сертификаты",GiftCerRClass,GiftCerRn,0,modPOS);  
  Report("Прибыль, сч/ф кассового терминала", PIVGPRClass,PIVGPRn,0,modPOS);
  Report("НДС группы товаров",ITVATRClass,ITVATRn,0,modPOS);
  Report("Статистика кампании по товара",INMultiBuyStatRClass,INMultiBuyStatRn,0,modPOS);
  Report("Статистика по прейскурантам на товар ",INPriceListStatRClass,INPriceListStatRn,0,modPOS);
  Report("Отчёт по накопительной карточке",LoyaltyCardRClass,LoyaltyCardRn,0,modPOS);
  Report("Создание записей операций для сч/ф на наличные", TransGenPOSRClass,TransGenPOSRn,0,modPOS);
  Report("POS Бонус",POSBonusRClass,POSBonusRn,0,modPOS);  
  Report("Журнал сч/ф кассового терминала",IVCJRClass,InvCashRn,0,modPOS);
  if (HasLocalization("PHL")) then begin
    Report("Senior Citizen Discount",SnrCtznDscRClass,SnrCtznDscRn,0,modPOS); //!!TRANSLATE
    Report("Данные терминала",TerminalPHLZRClass,TerminalPHLZPOSRn,0,modPOS); 
  end;
  Report("Варианты товаров",VarEnqRClass,VarEnqRn,0,modPOS);
  if (HasLocalization("SWE")) then begin
    Report("X-Отчёт",POSXRClass,POSZRn,0,modPOS);  
    Report("Z-Отчёт",POSZRClass,POSZRn,0,modPOS);  
  end;

  if (HasLocalization("MEX")) then begin
    Export("CFDI E-invoicing (Mexico)",CFDIEIVCashEClass,CFDIEIVCashEn,modPOS);
  end;
  if (HasLocalization("HRV,SVN")) then begin
    Export("(Slovenia, Croatia) Cash invoices export",CashInvCroEClass,CashInvExEn,modPOS);
  end;  
  if (HasLocalization("PHL")) then begin
    Export("BIR E-Sales",BIRESalesEClass,BIRESalesEn,modPOS); //!!TRANSLATE
  end;
  
  Document("События кассы",CashRClass,CashForm,CashFClass,modPOS);
  Document("Подарочный чек",GiftReceiptRClass,GiftReceiptForm,GiftReceiptFClass,modPOS);
  Document("Gift Vouchers",GCRClass,GCForm,GCFClass,modPOS);   //!!TRANSLATE
  Document("Сч/ф кассового терминала",IVCashRClass,InvCashForm,IVCashFClass,modPOS);
  Document("Return POS Invoices",IVCashRetRClass,InvCashRetForm,IVCashRetFClass,modPOS);

  Maintenance("Снятие кассы",CashupVClass,CashupMn,modPOS);
  Maintenance("Создать кнопки POS",CreatePOSButtonsVClass,CreatePOSButtonsMn,modPOS);
  Maintenance("Создать запись операций квитанций",NLTransCredCardSlipVClass,NLTransCredCardSlipMn,modPOS);
//  Maintenance("Create #NL# Transaction",DayBalVClass,DayBalMn,modPOS); // Don't think it should be used any more
  Maintenance("Обработка отложенных CC транзакций",ProDefCCTransVClass,ProDefCCTransMn,modPOS);
  Maintenance("Обновить склад",POSUpdStockVClass,POSUpdStockMn,modPOS);

/* modPOSOffLine */

  RegisterWS("Счета-фактуры кассового терминала","Счета-фактуры кассового терминала","Новый счёт-фактура",IVCashVc,modPOSOffLine); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modPOSOffLine); 
  RegisterWS("Остатки по кассе","Остатки по кассе","Новый остаток по кассе",CashierBalVc,modPOSOffLine); 
  RegisterWS("Сводная продаж кассового терминала","Сводная продаж кассового терминала","Новый счёт-фактура",POSSalesVc,modPOSOffLine); 
  RegisterWS("Товары, обнов. склад","Товары, обнов. склад","Новые товары, обнов. склад",ArtUpdStockVc,modPOSOffLine); 
  if (HasLocalization("PRT")==false) then begin
    RegisterWS("Счета-фактуры супермаркета","Счета-фактуры супермаркета","Новый счёт-фактура супермаркета",POSPIVCashLClass,modPOSOffLine); 
  end;
  Register("Номера синхронизации","Номера синхронизации",SynkAutoSerVc,modPOSOffLine);

  Setting("Способы оплаты по умолчанию",DefCashTClass,modPOSOffLine);
  Setting("Способы оплаты локальной машины",RestPMTClass,modPOSOffLine);
  Setting("Настройки кассового терминала офлайн",OffLineSetTClass,modPOSOffLine);
  Setting("Команды кассового терминала",POSCommandsTCLass,modPOSOffLine);
//  Setting("Local OffLine No.",LocalOffLineNrTClass,modPOSOffLine);

  return;
end;

#endif
