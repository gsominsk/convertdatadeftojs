/* EngWindowFunctions.hal */
external function Boolean TouchScreenLookVertical();
external function Boolean HasModPL();
external function Boolean HasModPP();
external function Boolean HasModSL();

external function Boolean HasApprovals();
external function Boolean HasCCPayments();
external function Boolean HasAdvancedPricing();
external function Boolean HasBar();
external function Boolean HasBase2();
external function Boolean HasCategories();
external function Boolean HasConsignmentStock();
external function Boolean HasContactClassification();
external function Boolean HasDeliveryAddress();
external function Boolean HasDepartments();
external function Boolean HasEInvoicing();
external function Boolean HasExtraNLComment();
external function Boolean HasHotelInterface();
external function Boolean HasJewelleryInterface();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLimitedAccess();
external function Boolean HasLocalMachines();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasLoyaltyCards();
external function Boolean HasObjects();
external function Boolean HasOfficialSerNr();
external function Boolean HasPreferedOfficialSerNr();
external function Boolean HasNumberSeries();
external function Boolean HasPocketScreen();
external function Boolean HasPositions();
external function Boolean HasProjects();
external function Boolean HasPriceLists();
external function Boolean HasReconLevel2();
external function Boolean HasSalesman();
external function Boolean HasSecondQuantity();
external function Boolean HasSerialNumbers();
external function Boolean HasSettlementDiscount();
external function Boolean HasSimulations();
external function Boolean HasSkypeConnection();
external function Boolean HasSimulations();
external function Boolean HasSIPServerConnection();
external function Boolean HasTaxMatrix();
external function Boolean HasTestFeatures();
external function Boolean HasTouchScreenDevice();
external function Boolean HasTouchScreenLook();
external function Boolean HasTREO();
external function Boolean HasVarieties();

external function Boolean HasStandardCRM();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();

external function Boolean HasEMail();
external function Boolean HasExternalEMail();

external function Boolean HasModAT2();
external function Boolean HasModCheck();
external function Boolean HasModCL();
external function Boolean HasModCO();
external function Boolean HasModCRM();
external function Boolean HasModExp();
external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModPL();
external function Boolean HasModPP();
external function Boolean HasModProd();
external function Boolean HasModQT();
external function Boolean HasModRent();
external function Boolean HasModRest();
external function Boolean HasModSO();
external function Boolean HasModSL();
external function Boolean HasModSVO();
external function Boolean HasModTS();
external function Boolean HasModWHM();

external procedure ExtractObj(string,var Integer,var string);
external procedure AddTouchScreenPasteButton(integer,integer,Integer,Integer,string,integer,string,integer);
external procedure MakeUserDefinedTile(longint);
external function real GenericFunctionButton(real,real,real,real,string,string,LongInt,string);
external function string 255 SetVATZoneLabel();
external function string 20 GetMenuCode(string);
external function Integer NumberofBarTabTiles();

external function Boolean IsEnterprise();

external function Boolean HasLimitedAccess();
external function Boolean HasLocalMachines();

external function Boolean HasMultiLocations();

external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModPOS();
external function Boolean HasModSO();
external function Boolean HasModRest();

event DefineWindows
begin
  Real h,h1,h2,h3,h4,h5,h6,h7,hm,v,v2,v3,l,vs,vm,f,t,x;
  string 255 label;
  
  SetLangMode(LangRussian,"RUS",0); 
  return;
end;

global
procedure OKCancel_RUS()
begin
  real h,v;
    
  h=-200; v=-30;
  PushButton(h,v,h+60,v+20,ToolOK,"OK"); 
  if (GuiType!=kGuiiPhone) then begin
  h=-120;
  end;
  PushButton(h,v,h+60,v+20,ToolRestore,"Отмена");
  
  return;
end;

procedure TSERW2(Boolean gtcol)
begin
  real h,h1,h2,h3,h4,h5,v;
    
  h = 8; v = 60;
  h1=24; h2=h1+80; h3=h2+80; h4=h3+80; h5=h4+80;
  if (GuiType==kGuiCocoa or GuiType==kGuiiPhone) then begin
    SetWRect(20,80,600,351);
    Sizeable(-1,-1,0,0);
    MatrixBegin(h,v,-31,-20,IVSerRowType,199);
    MatCol(1,h1,"С номера",0,TSerStart,false,0);
    MatCol(1,h2,"По номер",0,TSerEnd,false,0);
    MatCol(1,h3,"С даты",0,StartDate,false,0);
    MatCol(1,h4,"По дату",0,EndDate,false,0);
    MatCol(1,h5,"Коммент.",0,TSerCom,false,0);
    if (gtcol and Left(BuildProductCode,5)!="Books") then begin
      MatCol(1,-100,"Запись опер.",0,DonotGenTrans,false,SetSClass);
    end;
  end else begin
    SetWRect(20,80,532,357);
    Sizeable(-1,-1,0,0);
    StaticText(h+h1+5,v-23,"Номера",false);
    StaticText(h+h3+5,v-23,"Дата",false);
    MatrixBegin(h,v,-31,-20,IVSerRowType,199);
    MatCol(1,h1,"С",0,TSerStart,false,0);
    MatCol(1,h2,"По",0,TSerEnd,false,0);
    MatCol(1,h3,"С",0,StartDate,false,0);
    MatCol(1,h4,"По",0,EndDate,false,0);
    MatCol(1,h5,"Коммент.",0,TSerCom,false,0);
    if (gtcol and Left(BuildProductCode,5)!="Books") then begin
      MatCol(1,-70,"Запись опер.",0,DonotGenTrans,false,SetSClass);
    end;
  end;
  /*The name DonotGenTrans is beacause of default value whcich is zero*/
  EndMatrix;
  //SpecialMenu("Magic Serial Help",' ',1,"MagicSerialHelp");
  return;
end;

global
procedure TSERW_RUS() begin
  TSERW2(HasModNL);
  return;
end;

global
procedure TSERWNT_RUS() begin
  TSERW2(false);
  return;
end;

global
procedure TSERWTouch_RUS() begin
  real h,h1,h2,h3,h4,h5,v,t;

  h = 8; v = 60;
  h1=24; h2=h1+60; h3=h2+60; h4=h3+85; h5=h4+85;
  SetWRect(20,80,562,351);
  Sizeable(-1,-1,0,0);
  MatrixBegin(h,v,-31,-20,IVSerRowType,199);
  MatCell(t=1,10,6,70,19,TSerStart,false,12,patM4blue);
  MatCell(t,140,6,180,19,TSerEnd,true,12,patM4black);
  MatCell(t,190,6,250,19,StartDate,true,12,patM4black);
  MatCell(t,10,26,180,39,EndDate,false,12,patM4gray);
  MatCell(t,190,26,250,39,TSerCom,false,12,patM4gray);
  EndMatrix;
  return;
end;

global
procedure TSERWTEST_RUS()
begin
  real h,h1,h2,h3,h4,h5,v;
    
  h = 8; v = 60;
  h1=24; h2=h1+60; h3=h2+60; h4=h3+85; h5=h4+85;
  if (GuiType==kGuiCocoa) then begin
    SetWRect(20,80,562,351);
    Sizeable(-1,-1,0,0);
    MatrixBegin(h,v,-31,-20,IVSerRowType,199);
    MatCol(1,h1,"C",0,TSerStart,false,0);
    MatCol(1,h2,"По",0,TSerEnd,false,0);
    MatCol(1,h3,"С даты",0,StartDate,false,0);
    MatCol(1,h4,"По дату",0,EndDate,false,0);
    MatCol(1,h5,"Коммент.",0,TSerCom,false,0);
    if (Left(BuildProductCode,5)!="Books") then begin
      MatCol(1,-100,"Запись опер.",0,DonotGenTrans,false,SetSClass);
    end;
  end else begin
    SetWRect(20,80,532,350);
    Sizeable(-1,-1,0,0);
    StaticText(h+h1+2,v-25,"№",false);
    StaticText(h+h3,v-25,"Дата",false);
    MatrixBegin(h,v,-31,-20,IVSerRowType,199);
    MatCol(1,h1,"C",0,TSerStart,false,0);
    MatCol(1,h2,"По",0,TSerEnd,false,0);
    MatCol(1,h3,"С",0,StartDate,false,0);
    MatCol(1,h4,"По",0,EndDate,false,0);
    MatCol(1,h5,"Коммент.",0,TSerCom,false,0);
    if (Left(BuildProductCode,5)!="Books") then begin
      MatCol(1,-70,"Запись опер.",0,DonotGenTrans,false,SetSClass);
    end;
  end;
  EndMatrix;
  DeleteRowTest;
  //SpecialMenu("Magic Serial Help",' ',1,"MagicSerialHelp");
  return;
end;

global
procedure FORMDEF_RUS()
begin
  real h,h1,h2,h3,h4,v;

  SetWRect(20,80,600,298);
  Sizeable(-1,-1,0,0);
  MatrixBegin(5,27,-21,-20,FormDefRowType,99);
  MatCol(1,24,"Посл.",0,intdocnr,false,0);
  MatCol(1,54,"Язык",0,LangCode,false,LangSClass);
  MatCol(1,94,"Гр. дост.",0,UserGroup,false,AccessSClass);
  MatCol(1,154,"Серии №",0,SerNr,false,0);
  MatCol(1,224,"Форма",0,FPCode,false,DocSClass);
  /* No code behind this */
  //  MatCol(1,324,"E-Form",0,EformCode,false,0);
  MatCol(1,424,"Принтер",0,PrintGroupCode,false,PrintGroupSClass);
  MatCol(1,-60,"Статус",0,Typ,false,SetSClass);
  EndMatrix;
  return;
end;

global
procedure FORMDEF2_RUS()
begin
  real h,h1,h2,h3,h4,h5,h6,h7,v,l,vs,vm,f,t;

  SetWRect(20,80,529,299);
  Sizeable(-1,-1,0,0);
  MatrixBegin(5,27,-21,-20,FormDefRowType,99);
  MatCol(1,24,"Посл.",0,intdocnr,false,0);
  MatCol(1,54,"Язык",0,LangCode,false,LangSClass);
  MatCol(1,94,"Форма",0,FPCode,false,DocSClass);
  EndMatrix;
  return;
end;

global
procedure FORMDEF3_RUS() begin
  real h,h1,h2,h3,h4,h5,h6,h7,v,l,vs,vm,f,t;

  SetWRect(20,80,529,299);
  Sizeable(-1,-1,0,0);
  MatrixBegin(5,27,-21,-20,FormDefRowType,99);
  MatCol(1,24,"Посл.",0,intdocnr,false,0);
  MatCol(1,54,"Форма",0,FPCode,false,DocSClass);
  EndMatrix;
  return;
end;


global
procedure INVFORM_RUS(Boolean einvf)
begin
  real h,h1,h2,h3,h4,v;
  Boolean testf;

  if (IsEnterprise) then begin
  SetWRect(20,80,440,300);
  PeriodField(h=100,v=6,"Период");
  EditFieldTL(h,v+=20, 150,"№",   M4Str,Normal,30,f1,false,0);
    EditFieldTL(h,v+=20, 150,"Офиц. номер",   M4Str,Normal,60,f3,false,0); 
  EditFieldTL(100,v+=20,150,"Клиент",M4UStr,Normal,41,f2,false,CUSClass);
  EditFieldTL(100,v+=20, 50,"Язык",   M4Str,Normal,5,Language,false,LangSClass);
    ButtonFrame(h=30,v=127,175,3,"Статус");
  RadioButton(h,v,0,0,"Только нераспечатанные",OnlyUnprntd);
  RadioButton(h,v+=16,1,0,"Все",OnlyUnprntd);
  RadioButton(h,v+=16,2,0,"Оригинальные",OnlyUnprntd);
    ButtonFrame(h,v=210,175,5,"Педставление строки");
  RadioButton(h,v,0,0,"Нет",flags[15]);
  RadioButton(h,v+=16,1,0,"По группе товаров",flags[15]);
  RadioButton(h,v+=16,2,0,"По гр. тов. - Одна строка",flags[15]);
  RadioButton(h,v+=16,3,0,"По пакету комнаты",flags[15]);  
  RadioButton(h,v+=16,4,0,"Одна строка",flags[15]);
    CheckBox(h1=225,v=120,0,"Только неоплач. с/ф",flags[10]);
  CheckBox(h1,v+=16,0,"Пропустить недейств. сч/ф",flags[11]);
  if (einvf) then begin
    CheckBox(h1,v+=16,0,"Включить сч/ф EDI",flags[28]);
    CheckBox(h1,v+=16,0,"Включить электр. сч/ф",flags[5]);
  end;
    ButtonFrame(h1,v=210,165,4,"Вид сч/ф");  
  CheckBox(h1,v,0,"Счёт-фактура",flags[1]);
  CheckBox(h1,v+=16,0,"Сч/ф  на наличные",flags[2]);
  CheckBox(h1,v+=16,0,"Кредитовый сч/ф",flags[3]);
  CheckBox(h1,v+=16,0,"Счёт пени",flags[4]);
  end else begin
    SetWRect(64,80,444,250);
    PeriodField(h=120,v=6,"Период"); 
    testf = true;
    if (Left(BuildProductCode,8)=="Standard" or (Left(BuildProductCode,6)=="WeHave")) then begin  
      if (HasLocalization("POL")) then begin 
        EditFieldTL(h,v+=20, 150,"Номер",   M4Str,Normal,60,f3,false,0); 
        testf = false;
      end;
    end;
    if (testf) then begin
    EditFieldTL(h,v+=20, 150,"Номер",   M4Str,Normal,30,f1,false,0); 
      if (HasOfficialSerNr) then begin
        EditFieldTL(h,v+=20, 150,"Офиц. №",   M4Str,Normal,60,f3,false,0); 
      end;
    end;
    ButtonFrame(h,v+=40,150,3,"Статус"); 
    RadioButton(h,v,0,0,"Только нераспечатанные",OnlyUnprntd); 
    RadioButton(h,v+=16,1,0,"Все",OnlyUnprntd); 
    RadioButton(h,v+=16,2,0,"Оригинальные",OnlyUnprntd); 
    ButtonFrame(h,v+=45,153,3,"Вид сч/ф");   
    CheckBox(h,v,0,"Сч/ф",flags[1]); 
    CheckBox(h,v+=16,0,"Сч/ф на наличные",flags[2]); 
    CheckBox(h,v+=16,0,"Кредит. сч/ф",flags[3]); 
    if (HasLocalization("PRT")) then begin  
      CheckBox(h,v+=16,0,"I_nterest Invoice",flags[4]);  
    end;
    if (HasLocalization("FIN")) then begin  
      CheckBox(h,v+=16,0,"Include E-Invoices",flags[5]);  
    end;
    EndFrame;
  end;
  return;
end;

global
function Boolean DisplayLoginKeyPad_RUS()
begin
  Boolean res;
  record LocalLoginOptBlock LocalOptionsRec;

  BlockLoad(LocalOptionsRec);
  if (LocalOptionsRec.DisplayLoginKeyPad!=0) then begin res = true; end;
  DisplayLoginKeyPad_RUS = res;
  return;
end;

global
procedure LoginButtons_RUS(Real vm)
begin
  Real h,v,v2,vs,h2,hs,hm;
  
  if (DisplayLoginKeyPad_RUS==false) then begin goto LLoginButtons; end;
  
  hm = 132; h2 = 40; hs = 41; vs = 34; v2 = 33;
  v = vm+10;
  h = hm; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad1","1_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad2","2_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad3","3_",2);
  v = v+vs;
  h = hm; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad4","4_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad5","5_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad6","6_",2);
  v = v+vs;
  h = hm; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad7","7_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad8","8_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad9","9_",2);
  v = v+vs;
  h = hm+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad0","0_",2);
  
LLoginButtons:;
  return;
end;

global
procedure LoginButtons2_RUS(Real starth,Real vm)
begin
  Real h,v,v2,vs,h2,hs,hm;
  
  if (DisplayLoginKeyPad_RUS==false) then begin goto LLoginButtons2; end;
  
  hm = starth; h2 = 40; hs = 41; vs = 34; v2 = 33;
  v = vm+10;
  h = hm; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad1","1_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad2","2_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad3","3_",2);
  v = v+vs;
  h = hm; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad4","4_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad5","5_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad6","6_",2);
  v = v+vs;
  h = hm; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad7","7_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad8","8_",2);
  h = h+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad9","9_",2);
  v = v+vs;
  h = hm+hs; ColourPushButton(h,v,h+h2,v+v2,"RestAccToolKeyPad0","0_",2);
  
LLoginButtons2:;
  return;
end;

global
procedure DrawPOSButtons_rus(longint ah2,longint av,longint width,longint height,longint dh,longint dv,record POSButtonsVc POSBr,string ovrclass,Integer stackspace)
begin
  row POSButtonsVc POSBrw;
  record POSButtonsVc POSB2r;
  Integer i,rwcnt;
  Real h,v,v2;
  //hs,h1,h2,h3,h4,h5,h6,h7,hm,v2,l,vs,vm,f,t,x;
  string 255 procstr;
  Integer wn;
  boolean ItemPage;
  string 60 ostr;
  Integer pos;
  string 255 stack;
  string 255 lblstr;
  string 255 tagstr;
  integer selitemline,LateralButtonAmtMax;
  longint heighttemp,ah;
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);
  heighttemp = height;
  ah = ah2;
  h = ah;
  v = av;

  ItemPage = false;  
  if (ItemPage) then begin
    SoftEditField(h=80,v+=49, 80,"Товар",Normal ,"touchscreenitem",false,INSClass,M4Str,255);
    //  SoftEditField(h+=140,v, 80,"Serial No.",Normal ,"touchscreenitemserialnr",false,SerialNrSClass,M4Str,255);
    //no stock updating    SoftEditField(h+=120,v, 40,"Qty",Normal ,"touchscreenitemqty",false,0,M4Str,255);
    SoftEditField(h+=120,v, 60,"Цена",Normal ,"touchscreenitemprice",false,0,M4Str,255);
    SoftEditField(h=80,v+=20,-500,"",ViewOnly ,"touchscreenitemname",false,0,M4Str,255);
  end;
  
  //outside of screen
  SoftEditField(2000,2000,70,"",ViewOnly ,"touchscreenwindowpage",false,0,M4Str,255);
  SoftEditField(2000,2000,70,"",ViewOnly ,"touchscreenwindowpagestack",false,0,M4Str,255);
  SoftEditField(2000,2000,70,"",ViewOnly ,"touchscreenwindowprinterstack",false,0,M4Str,255);
  SoftEditField(2000,2000,70,"",ViewOnly ,"touchscreenwindowpageprevious",false,0,M4Str,255);
  //SoftEditField(2000,2000,70,"",ViewOnly ,"touchscreenselecteditemtag",false,0,M4Str,255);
  
  wn = CurWindow;
  stack = GetWindowString(wn,"touchscreenwindowpagestack");
  
  if (stack=="") then begin
    //PutWindowString(wn,"touchscreenwindowpage",1)
    //PutWindowString(wn,"touchscreenwindowpagestack",1)
    stack = "1";
  end;
  
  pos = 0;
  ExtractObj(stack,pos,ostr);
  h = ah;
  v = v + stackspace;
  if (GuiType==kGuiAndroid) then begin
    heighttemp = heighttemp + 8;
    v = v - 55; v2 = v;
  end;  
  if (GuiType==kGuiiPhone) then begin
    heighttemp = heighttemp + 8;
  end;  
  while (nonblank(ostr)) begin
    if (ovrclass<>"") then begin
      procstr = "IVCashDClass";
    end else begin
      procstr = POSBr.WindowClass;
    end;
    
    procstr = procstr & "TouchScreenStackButton";
    
    POSB2r.WindowClass = POSBr.WindowClass;
    POSB2r.POSButtonGroupCode = POSBr.POSButtonGroupCode;
    POSB2r.Page = StringToInt(ostr);
    
    if (ReadFirstMain(POSB2r,3,true)) then begin
      lblstr = POSB2r.Comment;
    end else begin
      lblstr = "Страница: " & ostr;
    end;
    
    if (POSB2r.KeyCode!=kFunctionKeyNone) then begin
      lblstr = lblstr & "<BR>";
      switch (POSB2r.Modifiers) begin
        case kKeyModifierNone:
        case kKeyModifierCtrl: lblstr = lblstr & USetStr(24185) & "+";
        case kKeyModifierShift: lblstr = lblstr & USetStr(24186) & "+";
        case kKeyModifierCtrlShift: lblstr = lblstr & USetStr(24185) & "+" & USetStr(24186) & "+";
      end;
      lblstr = lblstr & "F" & POSB2r.KeyCode;
    end;

 
    ColourPushButtonTag(h,v,h + width,v + heighttemp,procstr,lblstr,2,ostr); // time color no. 2

    if (GuiType==kGuiAndroid) then begin
      v = v + heighttemp + dv;
    end else begin
    h = h + width + dh;
    end;
    ExtractObj(stack,pos,ostr);
  end;

  //v = v - 80;
  v = v + heighttemp + dv;
  h = ah;

  //ButtonFrame(h,v+=82,400,0,"");
  switch (LMb.POSPanelSize) begin
    case kPOSPanelSizeSmall:
      ButtonFrame(h,v+=5,795,0,"");         
    otherwise
  ButtonFrame(h,v+=5,400,0,"");
  end;

  if (GuiType!=kGuiiPhone or GuiType==kGuiAndroid) then begin
    v = v + 10;
  end else begin
    v = v - dv;
    heighttemp = heighttemp - 8;
  end;

  if (GuiType==kGuiAndroid) then begin
    v = v2;
    h = h + width + dh + 8;
    ah = h;
  end;
  switch (GuiType) begin
    case kGuiiPhone: // Possible need for kGuiiPad ? Use CompileType==ctiPad if so
    if (TouchScreenLookVertical) then begin
      LateralButtonAmtMax = 4;
    end else begin
      LateralButtonAmtMax = 7;
    end;  
    case kGuiAndroid:
        LateralButtonAmtMax = 4;
    otherwise
    switch (LMb.POSPanelSize) begin
      case kPOSPanelSizeSmall:
        LateralButtonAmtMax = 8;
      otherwise
        LateralButtonAmtMax = 4;
    end;
  end;

  rwcnt = MatRowCnt(POSBr);

  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(POSBr,i,POSBrw);
    procstr = POSBr.WindowClass;

    if (procstr=="NPTSIVCashDClass") then begin
      procstr = "IVCashDClass";
    end;

    lblstr = POSBrw.Label;

    if (POSBrw.KeyCode<>kFunctionKeyNone) then begin
      lblstr = lblstr & "<BR>";
      switch (POSbrw.Modifiers) begin
        case kKeyModifierNone:
        case kKeyModifierCtrl: lblstr = lblstr & USetStr(24185) & "+";
        case kKeyModifierShift: lblstr = lblstr & USetStr(24186) & "+";
        case kKeyModifierCtrlShift: lblstr = lblstr & USetStr(24185) & "+" & USetStr(24186) & "+";
      end;
      lblstr = lblstr & "F" & POSBrw.KeyCode;
    end;

    switch (POSBrw.ButtonType) begin
      case kPOSButtonTypeItem:
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeInstructions:
        procstr = procstr & "TouchScreenPasteButton";
        tagstr = i + 1;
      case kPOSButtonTypeModifier:
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeLevelTop:
        procstr = procstr & "PageTop";
        /*
        case kPOSButtonTypeLevelUp:
        procstr = procstr & "LevelUp";
        */
      case kPOSButtonTypeGotoPage:
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      /*
      case kPOSButtonTypeLevelDown:
        procstr = procstr & "LevelDown";
      */
      case kPOSButtonTypeCashPayment:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypePayment:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypePaymentButtonsLayout:  
        procstr = procstr & "TouchScreenPasteButton"; //!!TRANSLATE
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypePaymentOneMode:  
        procstr = procstr & "TouchScreenPasteButton"; //!!TRANSLATE
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeChequePayment:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeCreditCardPayment:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeCreditCardPaymentReversal:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeDebitCardPayment:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeGiftVoucherPayment:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeOnAccountPayment:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeOnHotelGuestAccount:  
        procstr = procstr & "TouchScreenPasteButton";
        //procstr = procstr & i+1;
        tagstr = i + 1;
      case kPOSButtonTypeFinish:  
        procstr = procstr & "TouchScreenFinishButton";
        case kPOSButtonTypeVoidRow:  
        procstr = procstr & "TouchScreenVoidRow";
        tagstr = POSBrw.Code;
      case kPOSButtonTypeAmendLine:  
        procstr = procstr & "TouchScreenAmendLine";
      case kPOSButtonTypeAddOrderDiscount:  
        procstr = procstr & "TouchScreenAddOrderDiscount";
      case kPOSButtonTypeKitchenOrder:  
        procstr = procstr & "TouchScreenKitchenOrder";
      case kPOSButtonTypeLoyaltyCard:  
        procstr = procstr & "TouchScreenLoyaltyCard";
      case kPOSButtonTypeEnterReferenceNumber:  
        procstr = procstr & "TouchScreenEnterReferenceNumber"; //!!TRANSLATE
      case kPOSButtonTypeSeniorCitizenDiscount:  
        procstr = procstr & "TouchScreenSeniorCitizenCard";
      case kPOSButtonTypeSplitItem:  
        procstr = procstr & "TouchScreenSplitItem";
      case kPOSButtonTypeTransfertoSL:  
        procstr = procstr & "TouchScreenTransfertoSL";
      case kPOSButtonTypeTransfertoInvoice:  
        procstr = procstr & "TouchScreenTransfertoInvoice";
      case kPOSButtonTypeTransfertoOrder:  
        procstr = procstr & "TouchScreenTransfertoOrder";
      case kPOSButtonTypeTransfertoQuotation:  
        procstr = procstr & "TouchScreenTransfertoQuotation";
      case kPOSButtonTypeInvalidateInvoice:  
        procstr = procstr & "TouchScreenInvalidateInvoice";
      case kPOSButtonTypeAddCommentLine:  
        procstr = procstr & "TouchScreenCommentLine";  
      case kPOSButtonTypeAddHeaderLine:  
        procstr = procstr & "TouchScreenHeaderLine";
      case kPOSButtonTypeAddHiddenLine:  
        procstr = procstr & "TouchScreenHiddenLine";
      case kPOSButtonTypeAddSubtotalLine:  
        procstr = procstr & "TouchScreenSubtotalLine";
      case kPOSButtonTypeInvoiceStatus:  
        procstr = procstr & "TouchScreenInvoiceStatus";
      case kPOSButtonTypeOpenNLTransaction:  
        procstr = procstr & "TouchScreenOpenNLTransaction";
      case kPOSButtonTypeSendToFiscalDevice:  
        procstr = procstr & "TouchScreenSendToFiscalDevice";
      case kPOSButtonTypePrintProformaInvoice:  
        procstr = procstr & "TouchScreenProformaInvoice";
      case kPOSButtonTypeConnectToPrepayment:  
        procstr = procstr & "TouchScreenConnectToPrepayment";
      case kPOSButtonTypeCreateCashOut:  
        procstr = procstr & "TouchScreenCreateCashout";
      case kPOSButtonTypeCreateCashin:  
        procstr = procstr & "TouchScreenCreateCashin";
      case kPOSButtonTypeCreateCreditNote:  
        procstr = procstr & "TouchScreenCreateCreditNote";
      case kPOSButtonTypeCreateCorrectionInvoice:  
        procstr = procstr & "TouchScreenCreateCorrectionInvoice";
      case kPOSButtonTypeEditItemRecord:  
        procstr = procstr & "TouchScreenEditItemRecord";
      case kPOSButtonTypeSendEMail:  
        procstr = procstr & "TouchScreenSendEmail";
      case kPOSButtonTypePreviousSalesPrices:  
        procstr = procstr & "TouchScreenPreviousSalesPrices";
      case kPOSButtonTypeEditCustomerRecord:  
        procstr = procstr & "TouchScreenEditCustomerRecord";
      case kPOSButtonTypeEditDate:  
        procstr = procstr & "TouchScreenEditDate";
      case kPOSButtonTypeCreateCreditEMail:  
        procstr = procstr & "TouchScreenCreateCreditEMail";
      case kPOSButtonTypeCreateActivity:  
        procstr = procstr & "TouchScreenCreateActivity";
      case kPOSButtonTypeOpenCalendar:  
        procstr = procstr & "TouchScreenOpenCalendar";
      case kPOSButtonTypeChangeTerms:  
        procstr = procstr & "TouchScreenChangeTerms";
      case kPOSButtonTypeChangeAddress:  
        procstr = procstr & "TouchScreenChangeAddress";
      case kPOSButtonTypeChangeDiscountMatrix:  
        procstr = procstr & "TouchScreenChangeDiscountMatrix";  
      case kPOSButtonTypeCashupReport:  
        procstr = procstr & "TouchScreenCashupReport";
      case kPOSButtonTypeOpenSession:  
        procstr = procstr & "TouchScreenOpenSession";
      case kPOSButtonTypeCloseSession:  
        procstr = procstr & "TouchScreenCloseSession";
      case kPOSButtonTypeCorrectionInvoice:  
        procstr = procstr & "TouchScreenCorrectionInvoice";
      case kPOSButtonTypePutCashFloat:  
        procstr = procstr & "TouchScreenPutCashFloat";
      case kPOSButtonTypeGetCashFloat:  
        procstr = procstr & "TouchScreenGetCashFloat";
      case kPOSButtonTypeManagerDiscountOverride:  
        procstr = procstr & "TouchScreenManagerDiscountOverride";
      case kPOSButtonTypeOpenTaxMatrix:  
        procstr = procstr & "TouchScreenOpenTaxMatrix";
      case kPOSButtonTypeReturn:  
        procstr = procstr & "TouchScreenReturn";
      case kPOSButtonTypeCreditNote:  
        procstr = procstr & "TouchScreenCreditNote"; 
      case kPOSButtonTypeReturnReason:  
        procstr = procstr & "TouchScreenReturnReason";
        tagstr = POSBrw.Code;
      case kPOSButtonTypeReturnInvoiceNo:  
        procstr = procstr & "TouchScreenReturnInvNo";
        tagstr = POSBrw.Code;
      case kPOSButtonTypeLookupSerialNr:  
        procstr = procstr & "TouchScreenLookupSerialNr";
      case kPOSButtonTypeMainSerialNr:  
        procstr = procstr & "TouchScreenMainSerialNr";
      case kPOSButtonTypeAppleWarrantyStatusCheck:  
        procstr = procstr & "TouchScreenAppleWarrantyStatusCheck";
      case kPOSButtonTypeAppleCreateAEOrder:  
        procstr = procstr & "TouchScreenAppleCreateAEOrder";
      case kPOSButtonTypeAppleCancelAEOrder:  
        procstr = procstr & "TouchScreenAppleCancelAEOrder";
      case kPOSButtonTypeLogin:  
        procstr = procstr & "TouchScreenButtonLogin";
      case kPOSButtonTypeDeleteItem:
        procstr = procstr & "TouchScreenDeleteItem";
      case kPOSButtonTypeLoyaltyPointsPayment:
        procstr = procstr & "TouchScreenLoyaltyPointsPayment";
      case kPOSButtonTypeLoyaltyPointsBonus:
        procstr = procstr & "TouchScreenLoyaltyPointsBonus";
      case kPOSButtonTypeGiftVoucherSales:
        procstr = procstr & "TouchScreenPasteButton";
        tagstr = i + 1;
      case kPOSButtonTypeCreateGC:
        procstr = procstr & "TouchScreenPasteButton";  
        tagstr = i + 1;
      case kPOSButtonTypeGiftReceipt:
        procstr = procstr & "TouchScreenGiftReceipt";  
      case kPOSButtonTypePasteQuotation:  
        procstr = procstr & "TouchScreenPasteQT";  
      case kPOSButtonTypePasteSalesOrder:  
        procstr = procstr & "TouchScreenPasteOR";  
      case kPOSButtonTypePauseSales:  
        procstr = procstr & "TouchScreenPauseSales";  
      case kPOSButtonTypeResumeSales:  
        procstr = procstr & "TouchScreenGiftReceipt";
      case kPOSButtonTypeOverrideOfficialSerNr:  
        procstr = procstr & "TouchScreenOverrideOfficialSerNr"; //!!TRANSLATE
        case kPOSButtonTypePriceLookup:
        AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypePOSCommand:
        AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeCustomerSearch:
        AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeSelectSalesman:
        AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeBaggerSearch:
        AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeSupervisorSearch:
        AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeVolumetricBarCodeScan:
        AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeSalesAssistant:
        AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeItemSearch:
        AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeItemStatus:
        AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeOpenCashDrawer:
        AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypOpenInvoices:  
        procstr = procstr & "TouchScreenOpenInvoices";
      case kPOSButtonTypSaveInvoice:  
        tagstr = i + 1;
        procstr = procstr & "TouchScreenPasteButton";
      case kPOSButtonTypeBookings:  
        AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypePrintInvoice:  
        procstr = procstr & "TouchScreenPrint";
      case kPOSButtonTypePrintOrder:  
        procstr = procstr & "TouchScreenPrint";
      case kPOSButtonTypePrintFireOrder:  
        procstr = "RestAccPrintFireOrder";
      case kPOSButtonTypePrintCancellation:  
        procstr = "RestAccPrintCancel";
      case kPOSButtonTypePrintOrderToKitchen:  
        procstr = "RestAccPrintToKitchen";
//      case kPOSButtonTypeOpenCashDrawer:  //already above
//        procstr = "OpenCashDrawer";
      case kPOSButtonTypeCalculateTip:  
        procstr = "RestAccTip";
      case kPOSButtonTypeServiceCharge:  
        procstr = "RestAccServiceCharge";
      case kPOSButtonTypeHotelGuests:  
        procstr = "StayingTool";
      case kPOSButtonTypeSetTable:  
        AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeOpenRecord:  
        procstr = procstr & "TouchScreenPasteButton";  
        tagstr = i + 1;
      case kPOSButtonTypeSetCovers:  
        procstr = procstr & "TouchScreenPasteButton";
        tagstr = i + 1;
      case kPOSButtonTypeSetBarTabClass:  
        procstr = procstr & "TouchScreenPasteButton";
        tagstr = i + 1;
      case kPOSButtonTypeMergeBarTabs:  
        procstr = procstr & "TouchScreenPasteButton";
        tagstr = i + 1;
      case kPOSButtonTypeMoveToBarTab:  
        procstr = procstr & "TouchScreenPasteButton";  
        tagstr = i + 1;
      case kPOSButtonTypeSplitBarTabs:  
        procstr = procstr & "TouchScreenPasteButton";
        tagstr = i + 1;
      case kPOSButtonTypeSpecialMenu:  
        procstr = procstr & "TouchScreenSpecialMenu";
        tagstr = POSBrw.Code;
      case kPOSButtonTypeReprintReceipt:
        AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeXReading:
        procstr = procstr & "TouchScreenXReading";
      case kPOSButtonTypeYReading:
        procstr = procstr & "TouchScreenYReading";
      case kPOSButtonTypeZReading:
        procstr = procstr & "TouchScreenZReading";         
      case kPOSButtonTypeAllInvoices:
        procstr = procstr & "TouchScreenAllInvoices";
      case kPOSButtonTypeSyncNow:
        procstr = procstr & "TouchScreenSyncNow";
      case kPOSButtonTypeRunReportOnServer:
        AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";
      case kPOSButtonTypeFinishAndPrint:  
        procstr = procstr & "TouchScreenFinishAndPrintButton";        
      case kPOSButtonTypePrintPreview:  
        procstr = procstr & "TouchScreenPrintPreview";           
      case kPOSButtonTypeInsertFreeTextOnMatrix:
        AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";          
      case kPOSButtonTypeReprintLastCCSlip:
        AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";  
      case kPOSButtonTypeConnectToCCTerminal:
        AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
        procstr = "";  
      case kPOSButtonTypeBlank:
        goto LLDrawPOSButtons_RUS;
    end;
    
    if (procstr<>"") then begin
      if (LMb.POSShowButtonPictures) then begin
        POSButtonWithPicture(h,v,h + width,v + heighttemp,procstr,lblstr,POSBrw.colnr,tagstr,"POSButtonPictureVc",POSBrw.POSButtonPictureCode); //!!TRANSLATE
      end else begin
      if (tagstr<>"") then begin
        ColourPushButtonTag(h,v,h + width,v + heighttemp,procstr,lblstr,POSBrw.colnr,tagstr);
      end else begin
        ColourPushButton(h,v,h + width,v + heighttemp,procstr,lblstr,POSBrw.colnr);
        end;
      end;
    end;
  LLDrawPOSButtons_RUS:;  
    h = h + width + dh;
    if (Mod(i+1,LateralButtonAmtMax)==0) then begin
      v = v + heighttemp + dv;
      h = ah;
    end;
  end;
  
  return;
end;

function LongInt POSButtonsNeededHeight(LongInt width,LongInt height,LongInt dh,LongInt dv,record POSButtonsVc POSBr,Integer stackspace,Integer minrows,Integer maxrows)
begin
  Integer i,rwcnt,rownr;
  LongInt h,v;
  Integer wn;
  string 60 ostr;
  Integer pos;
  string 255 stack;
  Integer LateralButtonAmtMax;
  LongInt heighttemp;
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);
  heighttemp = height;
  h = 0;
  v = 0;
  
  wn = CurWindow;
  stack = GetWindowString(wn,"touchscreenwindowpagestack");
  
  if (stack=="") then begin         
    stack = "1";         
  end;
  
  pos = 0;
  ExtractObj(stack,pos,ostr);
  v = v + stackspace;
  if (GuiType==kGuiiPhone or GuiType==kGuiAndroid) then begin
    heighttemp = heighttemp + 8;
  end;
  v = v + heighttemp + dv;

  if (GuiType!=kGuiiPhone and GuiType!=kGuiAndroid) then begin
    v = v + 10;
  end else begin
    v = v - dv;
    heighttemp = heighttemp - 8;
  end;
  
  if (GuiType==kGuiiPhone or GuiType==kGuiAndroid) then begin    // Possible need for kGuiiPad ?
      if (TouchScreenLookVertical) then begin
        LateralButtonAmtMax = 4;
      end else begin
        LateralButtonAmtMax = 7;
      end;  
    end else begin
      switch (LMb.POSPanelSize) begin
        case kPOSPanelSizeSmall:
          LateralButtonAmtMax = 8;
        otherwise
      LateralButtonAmtMax = 4;
      end;
    end;   
  
  rownr = 0;
  rwcnt = MatRowCnt(POSBr);

  for (i = 0; i<rwcnt or rownr<minrows; i = i + 1) begin  
    h = h + width + dh;
    if (Mod(i+1,LateralButtonAmtMax)==0) then begin
      v = v + heighttemp + dv;
      h = 0;
      rownr = rownr + 1;
      if (rownr>=maxrows) then begin
        i = i + 1;
        goto LPOSButtonsNeededHeight;
      end;
    end;
  end;
  
LPOSButtonsNeededHeight:;
  if (Mod(i,LateralButtonAmtMax)==0) then begin
    v = v + (heighttemp + dv) * 0.5;
  end else begin
    v = v + (heighttemp + dv) * 1.5;
  end;
  
  POSButtonsNeededHeight = v;
end;

global
procedure DrawPOSInterface_RUS(string bc1,string bc2,record POSButtonsVc POSBr,Integer acnt,string ovrclass,Integer stackspace)
begin
  record LocalMachineBlock LMb;
  record CashierDefBlock CDb;

  longint h,v,i,h4,tx,ty,bx,by,wn,dh,dv,height,width,btnpnlh;
  Integer minrows,maxrows,stackspaceh,imageFrameSz,imageFrameX;
  
  BlockLoad(LMb);
  BlockLoad(CDb);
  
  stackspaceh = stackspace;
  if (HasJewelleryInterface) then begin stackspaceh = stackspaceh + 30; end;
  h = 20; v = 26;
  
  //h2 = -150; h3 = -70;
  
  h4 = -24;
  if (LMb.WideScrollBars!=0) then begin
    h4 = -44;
  end;
  
  switch (GuiType) begin
    case kGuiiPhone:
      dh = 3; dv = 3; height = 70; width = 101;
      if (TouchScreenLookVertical) then begin
        minrows = 1; maxrows = 3; // Should perhaps come from setting?
      end else begin
        minrows = 3; maxrows = 6; // Should perhaps come from setting?
      end;
      btnpnlh = POSButtonsNeededHeight(width,height,dh,dv,POSBr,stackspaceh,minrows,maxrows);
    otherwise
      dh = 2; dv = 5; height = 55; width = 98;
  end;
  
  if (GuiType==kGuiiPhone) then begin
    tx = 0; 
    wn = CurWindow;
    if (wn>0) then begin
      switch (GetWindowClass(wn)) begin
        case "RestAccDClass": ty = 120; by = -345; bx = -8; h = 8; v = 525;
        otherwise
            if (TouchScreenLookVertical) then begin
              ty = 8; by = -130; bx = -430; h = -420; v = -85;
            end else begin
            switch (LMb.TouchScreenLookPicture) begin
              case 1: 
                by = -445;
              otherwise
                by = -345; 
            end;
            ty = 120; bx = -1;  h = 20; v = 517;
            end;
      end;
      v = -btnpnlh;
      by = v + stackspaceh - 40;
    end;  
  end else begin
    // DrawPOSStringList();
    switch (LMb.POSButtonsPosition) begin
      case kPOSButtonsPositionLeft:
        tx = 420; 
        ty = 180;
        bx = h4;
        by = -10;    
        h = 8;      
        switch (LMb.POSPanelSize) begin
          case kPOSPanelSizeSmall:
            tx = tx+395;
        end;
      case kPOSButtonsPositionRight:
        tx = 8; 
        ty = 180;
        bx = -430;
        by = -10;        
        h = -410;
        switch (LMb.POSPanelSize) begin
          case kPOSPanelSizeSmall:
            bx = bx-395;
            h = h-395;
        end;
    end;
    if (GuiType==kGuiMetro) then begin
      ty = 120;
    end;
    if (GuiType==kGuiAndroid) then begin
       tx = 0; ty = 8; bx = 380;  by = -230; v = 0; h = 390; height = 84; width = 155; dh = 2; dv = 2;
    end;
  end;
  if (LMb.POSButtonHeight>0) then begin height = LMb.POSButtonHeight; end;
  if (LMb.POSButtonWidth>0) then begin width = LMb.POSButtonWidth; end;
  
  DataList(tx,ty,bx,by,"receipt");
  
  switch (GuiType) begin
    case kGuiiPhone:
    if (TouchScreenLookVertical) then begin 
      DataListColumn(1,6,90,AdjLeft,"qty","К-во",M4Val);
      DataListColumn(1,95,-130,AdjLeft,"artcode","Код",M4Code);      
      DataListColumn(1,-125,-8,AdjRight,"rowsum","Сумма",M4Val);      
      DataListColumn(2,6,-6,AdjLeft,"spec","",M4Str);
      DataListColumn(3,6,60,AdjLeft,"artcode1","",M4Code);
      DataListColumn(3,64,160,AdjLeft,"spec","",M4Str);
      DataListColumn(3,164,210,AdjRight,"qty","",M4Val);
      DataListColumn(3,214,320,AdjLeft,"artcode2","",M4Code);
      DataListColumn(3,324,360,AdjLeft,"s","",M4Str);       
    end else begin 
      DataListColumn(1,8,90,AdjLeft,"artcode","Код",M4Code);
      DataListColumn(1,105,-340,AdjLeft,"spec","Наименов.",M4Str);
      DataListColumn(1,-335,-270,AdjRight,"qty","К-во",M4Val);
      DataListColumn(1,-265,-190,AdjRight,"price","Цена",M4Val);
      DataListColumn(1,-185,-130,AdjRight,"rebate","Скидка",M4Val);
      DataListColumn(1,-125,-8,AdjRight,"rowsum","Сумма",M4Val);
      //DataListColumn(1,-20,-6,AdjRight,"","",M4Str); // Added to provide some extra space for scroll bar.
      
      DataListColumn(2,6,-1,AdjLeft,"spec","",M4Str);
      
      DataListColumn(3,6,60,AdjLeft,"artcode1","",M4Code);
      DataListColumn(3,64,160,AdjLeft,"spec","",M4Str);
      DataListColumn(3,164,210,AdjRight,"qty","",M4Val);
      DataListColumn(3,214,320,AdjLeft,"artcode2","",M4Code);
      DataListColumn(3,324,360,AdjLeft,"s","",M4Str); 
    end; 
    case kGuiAndroid:
      DataListColumn(1,8,70,AdjLeft,"artcode","Code",M4Code);
      DataListColumn(1,72,180,AdjLeft,"spec","Description",M4Str);
      DataListColumn(1,185,215,AdjRight,"qty","Qty",M4Val);
      DataListColumn(1,222,275,AdjRight,"price","Price",M4Val);
      DataListColumn(1,280,320,AdjRight,"rebate","Disc.",M4Val);
      DataListColumn(1,325,-1,AdjRight,"rowsum","Sum",M4Val);
      //DataListColumn(1,-20,-6,AdjRight,"","",M4Str); // Added to provide some extra space for scroll bar.

      DataListColumn(2,6,-1,AdjLeft,"spec","",M4Str); //!!TRANSLATE

      DataListColumn(3,6,60,AdjLeft,"artcode1","",M4Code); //!!TRANSLATE
      DataListColumn(3,64,160,AdjLeft,"spec","",M4Str); //!!TRANSLATE
      DataListColumn(3,164,210,AdjRight,"qty","",M4Val); //!!TRANSLATE
      DataListColumn(3,214,320,AdjLeft,"artcode2","",M4Code); //!!TRANSLATE
      DataListColumn(3,324,360,AdjLeft,"s","",M4Str); //!!TRANSLATE
    otherwise
    DataListColumn(1,6,90,AdjLeft,"artcode","Код",M4Code);
    if (HasJewelleryInterface) then begin
      if (POSBr.WindowClass=="IVDClass") then begin//in 71 should be in for SL and POS Invoice
        DataListColumn(1,91,-500,AdjLeft,"spec","Наименов.",M4Str);
        DataListColumn(1,-495,-460,AdjRight,"vatcode","НДС",M4Str);
        DataListColumn(1,-455,-380,AdjRight,"Склад","Склад",M4Str);
      end else begin
        DataListColumn(1,91,-460,AdjLeft,"spec","Наименов.",M4Str);
        DataListColumn(1,-455,-380,AdjRight,"vatcode","НДС",M4Str);
    end;
      DataListColumn(1,-375,-300,AdjRight,"qty","К-во",M4Val);
      DataListColumn(1,-295,-210,AdjRight,"price","Цена",M4Val);
      DataListColumn(1,-205,-150,AdjRight,"rebate","Скидка",M4Val);
      DataListColumn(1,-145,-21,AdjRight,"rowsum","Сумма",M4Val);
    end else begin
      DataListColumn(1,91,-340,AdjLeft,"spec","Наименов.",M4Str);
      DataListColumn(1,-335,-270,AdjRight,"qty","К-во",M4Val);
      DataListColumn(1,-265,-190,AdjRight,"price","Цена",M4Val);
      DataListColumn(1,-185,-130,AdjRight,"rebate","Скидка",M4Val);
      DataListColumn(1,-125,-21,AdjRight,"rowsum","Сумма",M4Val);
    end;
    DataListColumn(1,-20,-6,AdjRight,"","",M4Str); // Added to provide some extra space for scroll bar.
    
    DataListColumn(2,6,-6,AdjLeft,"spec","",M4Str);
    
    DataListColumn(3,6,60,AdjLeft,"artcode1","",M4Code);
    DataListColumn(3,64,160,AdjLeft,"spec","",M4Str);
    DataListColumn(3,164,210,AdjRight,"qty","",M4Val);
    DataListColumn(3,214,320,AdjLeft,"artcode2","",M4Code);
    DataListColumn(3,324,360,AdjLeft,"s","",M4Str);

/*
      DataListColumn(4,6,60,AdjLeft,"qtytotal","",M4Str); //!!TRANSLATE
      DataListColumn(4,64,160,AdjLeft,"subtotaltext","",M4Str); //!!TRANSLATE
      DataListColumn(4,164,210,AdjRight,"subtotal","",M4Val); //!!TRANSLATE
      DataListColumn(4,214,320,AdjLeft,"vattotaltext","",M4Str); //!!TRANSLATE
      DataListColumn(5,324,360,AdjRight,"vattotal","",M4Val); //!!TRANSLATE
*/      
  end;
  if (GuiType==kGuiiPhone) then begin
    if (TouchScreenLookVertical==false and GetWindowClass(wn)!="RestAccDClass") then begin         
      SoftEditField(-226,by+5,200,"Товар/команда"  ,Normal ,"ivcashcommand",false,0,M4Str,255);         
    end;
  end;
  if (GuiType==kGuiAndroid) then begin
    if (TouchScreenLookVertical==false and GetWindowClass(wn)!="RestAccDClass") then begin //!!TRANSLATE
      StaticTextWithColor(20,by+5,"$POSfoot_rebate",false,9,patM4black);
      StaticTextWithColor(bx-10,by+5,"$POSfoot_total",true,9,patM4black);
      StaticTextWithColor(20,by+28,"$POSfoot_CHANGE",false,9,patM4black);
      StaticTextWithColor(bx-10,by+28,"$POSfoot_VAT",true,9,patM4black); //!!TRANSLATE
      StaticTextWithColor(bx-10,by+51,"$POSfoot_change",true,9,patM4black); //!!TRANSLATE
      SoftEditField(20,by+60,200,"Item/Command"  ,Normal ,"ivcashcommand",false,0,M4Str,255); //!!TRANSLATE
    end;
  end;
  // DrawPOSData();
  // DrawPOSData();
  if (CDb.ItemPictureCashier!=kPOSItemPictureOff) then begin
    imageFrameSz = 150;
    if (LMb.POSButtonsPosition==kPOSButtonsPositionLeft) then begin
      imageFrameX = 20;
    end else begin
      imageFrameX = -20-imageFrameSz;
    end;
    Pict_Field(imageFrameX,-40-imageFrameSz,imageFrameX+imageFrameSz,-40,"");  
  end;

  
  if (acnt>0) then begin
    DrawPOSButtons_rus(h,v,width,height,dh,dv,POSBr,ovrclass,stackspaceh);
  end else begin
    RecordClear(POSBr);
    DrawPOSButtons_rus(h,v,width,height,dh,dv,POSBr,ovrclass,stackspaceh);
  end;
  
  //selitemline = StringToInt(GetWindowString(wn,"touchscreenselecteditemtag"));
  //SetSelectedListLine(wn,selitemline);
  
  return;
end;

global
procedure DisplayRecordDetails_RUS(LongInt ah,LongInt av,string compname,date td,time tt,string lmc,string sm,string nr,string custcode,string custname,
                               string addr1,string addr2,string addr3,string phone,string objects,
                               string loyaltycardnr,Integer ShowBaggerSupervisor,string bagger,string supervisor,string disccardnr,val discfwdbal,
                               string sessiondesc,Boolean showlc,string OfficialNum,string taxseal)
begin
  real h,h2,h3,h4,h5,h6,v,vs,vj,v2,v3,v4;
  string 255 tstr;
  Integer icn;

  h = ah;
  h2 = h + 150;
  h3 = h + 240;
  h4 = 335;
  vs = 16;
  v = av;  v2 = av; v3 = av; v4 = av;

  if (GuiType==kGuiiPhone) then begin
    vs = 20;
    h2 = h + 180;
    h3 = h + 270;
    StaticText(h,v,Left(compname,18),false);
  
    StaticText(h2,v,td,false);
    StaticText(h3,v,Left(tt,5),false);
    StaticText(h,v+=vs,nr,false);
    StaticText(h2,v,"Till: " & lmc,false);
    StaticText(h3,v,sm,false);
  
    tstr = "Клиент: ";
    tstr = tstr & custcode;
    StaticText(h,v+=vs,Left(tstr,18),false);
    tstr = Left(custname,20);
    StaticText(h2,v,tstr,false);
  
    if (showlc) then begin
      tstr = "Накопительная карта: ";
      tstr = tstr & loyaltycardnr;
      StaticText(h,v+=vs,tstr,false);
    end else begin
      v = v + vs;
    end;
  
    if (ShowBaggerSupervisor!=0) then begin
      tstr = "Упаковщик: ";
      tstr = tstr & bagger;
      StaticText(h2,v,tstr,false);
      v = v + vs;
    end;
    
    if (nonblank(disccardnr)) then begin
      tstr = "Скидочн. карт.: ";
      tstr = tstr & disccardnr;
      StaticText(h2,v,tstr,false);
      tstr = "Баланс: " & discfwdbal;
      StaticText(h2,v+=vs,tstr,false);
    end;
    if (nonblank(sessiondesc)) then begin
      StaticText(h,v+=vs,sessiondesc,false);
    end;

    goto LDisplayRecordDetails_RUS01;
  end;  
  if (GuiType==kGuiAndroid) then begin
    v = 13;
    vs = 20;
    h = 400;
    h2 = h + 100;
    h3 = h2 + 100;
    h4 = h3 + 120;
    h5 = h4 + 100;
    h6 = h5 + 100;
    //StaticTextWithColor(h,v,Left(compname,18),false,-1,patM4white);
  
    //StaticTextWithColor(h2,v,"
    //StaticTextWithColor(h3,v,"
    StaticTextWithColor(h2,v,nr,false,-1,patM4white);
    StaticTextWithColor(h,v,"Till: " & lmc,false,-1,patM4white); //!!TRANSLATE
    StaticTextWithColor(h3,v,sm,false,-1,patM4white);
    if (showlc) then begin
      tstr = "Loyalty Card: "; //!!TRANSLATE
      tstr = tstr & loyaltycardnr;
      StaticTextWithColor(h4,v,tstr,false,-1,patM4white);
    end else begin
      v = v + vs;
    end;
    if (nonblank(disccardnr)) then begin
      tstr = "Discount Card: "; //!!TRANSLATE
      tstr = tstr & disccardnr;
      StaticTextWithColor(h4,v,tstr,false,-1,patM4white);
      tstr = "Discount Fwd. Bal.: " & discfwdbal; //!!TRANSLATE
      StaticTextWithColor(h6,v,tstr,false,-1,patM4white);
    end;
    v = v+vs;
    if (nonblank(sessiondesc)) then begin
      StaticTextWithColor(h,v,sessiondesc,false,-1,patM4white);
    end;

    tstr = "Customer: "; //!!TRANSLATE
    tstr = tstr & custcode;
    tstr = tstr & " " & Left(custname,20); //!!TRANSLATE
    StaticTextWithColor(h3,v,tstr,false,-1,patM4white);

    if (ShowBaggerSupervisor!=0) then begin
      tstr = "Bagger: "; //!!TRANSLATE
      tstr = tstr & bagger;
      StaticTextWithColor(h6,v,tstr,false,-1,patM4white);
      v = v + vs;
    end;

    goto LDisplayRecordDetails_RUS01;
  end;  
  v = av+45; v2 = av+45; v3 = av+45; v4 = av+45;

  icn = StringToInt(USetStr(912));
  if (icn==0) then begin icn = 1044; end;
  if (GuiType==kGuiCocoa) then begin
    AddBic(icn,icn,140,30,ToolHomepage,0,""); 
  end else begin
    //PictureButton(h-1,6,310,126,icn,icn,icn,"","",ToolHomepage);
    PictureButton(h-1,6,h-1+305,6+44,icn,icn,icn,"","",ToolHomepage);
  end;

  StaticText(h,v,Left(compname,20),false); v = v + vs;

  StaticText(h2,v2,td,false); v2 = v2 + vs;
  StaticText(h3,v3,Left(tt,5),false); v3 = v3 + vs;
  StaticText(h,v,nr,false); v = v + vs;
  StaticText(h2,v2,"Till: " & lmc,false);  v2 = v2 + vs;
  StaticText(h3,v3,sm,false); v3 = v3 + vs;
  if (HasLocalization("HRV,PHL,PRT")) then begin 
    tstr = "Офиц. номер: " & OfficialNum;
    StaticText(h4,v4,tstr,false); v4 = v4 + vs;
  end;

  tstr = "Клиент: ";
  tstr = tstr & custcode;
  StaticText(h,v,tstr,false); v = v + vs;
  StaticText(h2,v2,Left(custname,25),false); vj = v2; v2 = v2 + vs;

  if (showlc) and (nonblank(loyaltycardnr)) then begin
    tstr = "Накопительная карта: ";
    tstr = tstr & loyaltycardnr;
    StaticText(h,v,tstr,false);  v = v + vs;
  end;

  if (ShowBaggerSupervisor!=0) then begin
    tstr = "Упаковщик: ";
    tstr = tstr & bagger;
    StaticText(h2,v2,tstr,false); v2 = v2 + vs;
  end;
  
  if (nonblank(disccardnr)) then begin
    tstr = "Скидочн. карт.: ";
    tstr = tstr & disccardnr;
    StaticText(h2,v2,tstr,false); v2 = v2 + vs;
    tstr = "Баланс: " & discfwdbal;
    StaticText(h4,v4,tstr,false); v4 = v4 + vs;
  end;
  if (HasJewelleryInterface) then begin
    if (nonblank(addr1)) then begin
      tstr = "Адрес: ";
      tstr = tstr & addr1;
      StaticText(h4,vj,left(tstr,30),false); vj = vj + vs;
    end;
    tstr = ""; 
    if (nonblank(addr2)) then begin
      tstr = addr2;
      if (nonblank(addr3)) then begin tstr = tstr & ""; end;
    end;
    if (nonblank(addr3)) then begin
      tstr = tstr & addr3;
    end;
    if (nonblank(tstr)) then begin
      StaticText(h4,vj,left(tstr,30),false);
    end;
  end;
  if (nonblank(sessiondesc)) then begin
    StaticText(h,v,sessiondesc,false);  v = v + vs;
  end;
  if (HasJewelleryInterface) then begin
    if (nonblank(objects)) then begin
      tstr = "Объекты: ";
      tstr = tstr & objects;
      StaticText(h2,v2,tstr,false); v2 = v2 + vs;
    end; 
  end;
  if (nonblank(phone)) then begin
    tstr = "Телефон: " & phone;
    StaticText(h4,v4,tstr,false); v4 = v4 + vs;
  end;
LDisplayRecordDetails_RUS01:;  
  return;
end;

global
procedure TBEClassDef_RUS()
begin
  SetWRect(20,80,400,150);
  EditFieldTL(130,6,-20,"Комментарий",M4Str,Normal,40 ,f3,false,0);
  return;
end;

global
procedure MakeCustomerTile_RUS(longint tileno)
begin
  real i,h,h1,h2,h3,h4,h5,h6,h7,hm,hs,v,l,vs,v2,vm,f,t,fs;
  string 255 label;

  v = 6; vs = 20; h = 100; h2 = 270; h3 = 420; h4 = 440; fs = 100;

  Tile(tileno,70,false,tileno,PRCode);
  EditField(h,vm=v,80,"Проект",Normal,PRCode,false,PRSClass);
  EditField(h,v+=vs,80,"Клиент",Normal,CUCode,false,AllCUSClass);
  EditField(h,v+=vs,80,"Товар сч/ф",Normal,ItemCode,false,INSClass);
  EnterSkip(Math);
  EditField(h2,v=vm,-40,"Наимен.",Normal,CUName,false,0);
  EditField(h2,v+=vs,-40,"Телефон",Normal,Phone,false,0);
  EditField(h2,v+=vs,-40,"Контакт",Normal,Contact,false,ContactSClass);
end;

global
procedure MakeTagsTile_RUS(longint tileno)
begin
  real i,h,h1,h2,h3,h4,h5,h6,h7,hm,hs,v,l,vs,v2,vm,f,t,fs;
  string 255 label;

  v = 6; vs = 20; h = 100; h2 = 270; h3 = 420; h4 = 440; fs = 100;

  Tile(tileno,100,true,tileno,Math);
  MatrixBegin(4,v=24,-32,-30,ActRowType,99);
  MatCol(1,24,"Контакт",0,TextCode,false,TextTypeSClass);
  MatCol(1,84,"Текст",0,Text,false,0);
  EndMatrix;
  HalPushButton(-140,-30,-40,-10,"ActDEndActivity","ActDEndActivity");
end;

global
procedure MakeSubTaskTile_RUS(longint tileno)
begin
  real i,h,h1,h2,h3,h4,h5,h6,h7,hm,hs,v,l,vs,v2,vm,f,t,fs;
  string 255 label;

  v = 6; vs = 20; h = 100; h2 = 270; h3 = 420; h4 = 440; fs = 100;

  Tile(tileno,200,true,tileno,-);

  HalPushButton(h,v,h+100,v+20,"ActDClassCreateSubTask","Новоя под-задача");
  v = v + vs;
  RecordList2(10,v+=vs,-30,-10,"ActVc");
  RlColKey(4,4,"Задача",Comment,false,ActComment);
  RlColKey(-50,-50,"Все",Comment,false,Comment);
end;

global
procedure MakeCruftTile_RUS(longint tileno)
begin
  real i,h,h1,h2,h3,h4,h5,h6,h7,hm,hs,v,l,vs,v2,vm,f,t,fs;
  string 255 label;

  v = 6; vs = 20; h = 100; h2 = 270; h3 = 420; h4 = 440; fs = 100;

  Tile(tileno,240,false,"tileno",-);
  EditField(h,v+=vs,80,"Язык",Normal,LangCode,false,LangSClass);
  CheckBox(-100,-36,0,"Л_ичное",PrivateFlag);
  
  return;
end;

global
procedure MakeActWindowTypeCalendar_RUS(record ActVc Actr)
begin
  real i,h,h1,h2,h3,h4,h5,h6,h7,hm,hs,v,l,vs,v2,vm,f,t,fs;
  string 255 label;

  v = 6; vs = 20; h = 100; h2 = 270; h3 = 420; h4 = 440; fs = 100;

  TileButton(1,"Время");
  TileButton(2,"Клиент");
  TileButton(3,"Тэги");
  TileButton(4,"Оповещение");
  TileButton(5,"Ресурсы");
  TileButton(6,"Обслуживание");
  TileButton(7,"Опред. пользователем");
  TileButton(8,"Разн.");
  
  Tile(1,70,false,"1",StartTime);
  h = 100; h2 = 270;
  EditField(h,v=6,60,"Время начала",Normal,StartTime,false,PasteCurTime);
  EditField(h,v+=vs,60,"Время оконч.",Normal,EndTime,false,PasteCurTime);
  EditField(h,v+=vs,60,"Итого времени",Normal,CostTime,false,PasteCurTime);
  EditField(h2,v=6 ,80,"Дата начала",Normal,TransDate,false,PasteCurDate);
  EditField(h2,v+=vs,80,"Дата оконч.",Normal,EndDate,false,PasteCurDate);
  EditField(h2,v+=vs,80,"Класс вр.",Normal,TimeClass,false,TimeClassSClass);
  v = 18;
  vm = v;
  h3=h2+120;

  h3 = h3+160;
  ButtonFrame(h3,v=vm,100,3,"Календарь");
  RadioButton(h3,v,kCalTimeFlagTime,0,"Время",CalTimeFlag);
  RadioButton(h3,v+=16,kCalTimeFlagProfile,0,"Прогноз",CalTimeFlag);
  RadioButton(h3,v+=16,kCalTimeFlagNoshow,0,"Не показывать",CalTimeFlag);
  EnterSkip(PRCode);

  MakeCustomerTile_RUS(2);
  MakeTagsTile_RUS(3);

  Tile(4,140,false,"4",-);
  h3 = 40;
  ButtonFrame(h3,v=18,130,4,"Напоминание:");
  RadioButton(h3,v,0,0,"Нет",AlarmType);
  RadioButton(h3,v+=16,1,0,"Сообщение",AlarmType);
  RadioButton(h3,v+=16,2,0,"SMS",AlarmType);
  RadioButton(h3,v+=16,3,0,"Электронная почта",AlarmType);
  ButtonFrame(h3+=160,v=18,130,7,"Оповещение");
  RadioButton(h3,v,0,0,"Минут до",AlarmWhen);
  RadioButton(h3,v+=16,1,0,"Часов до",AlarmWhen);
  RadioButton(h3,v+=16,2,0,"Дней до",AlarmWhen);
  RadioButton(h3,v+=16,3,0,"Минут после",AlarmWhen);
  RadioButton(h3,v+=16,4,0,"Часов после",AlarmWhen);
  RadioButton(h3,v+=16,5,0,"Дней после",AlarmWhen);
  EditField(h3+75,v+=17,50,"Единиц",Normal,AlarmUnits,false,0);
  ButtonFrame(h4=h3+160,v=18,130,4,"Значок");
  RadioButton(h4,v,1,0,"Звонок",SymbNr);
  RadioButton(h4,v+=16,2,0,"Встреча",SymbNr);
  RadioButton(h4,v+=16,3,0,"Офис",SymbNr);
  RadioButton(h4,v+=16,0,0,"Другое",SymbNr);
  Tile(5,30,false,"5",Resources);
  EditField(h,v=6,300,"Ресурсы",Normal,Resources,false,ResSClass);
  EditField(h+400,v, fs,"Актив",Normal,InventoryNr,false,AT2UnitSClass);
  Tile(6,50,false,"6",SVOSerNr);
  EditField(h,v=6, fs,"Серийный №",Normal,SerialNr,false,SVOSerSClass);
  EditField(h+200,v,fs,"Товар",Normal,ArtCode,false,INSClass);
  EditField(h+400,v, fs,"Опер. пр-ва",Normal,ProdOpSerNr,false,0);
  EditField(h,v+=vs, fs,"Заказ на обсл.",Normal,SVOSerNr,false,SVOSClass);
  EditField(h+200,v,fs,"Товар сч/ф",Normal,ItemCode,false,INSClass);
  EditField(h+400,v, fs,"Производство",Normal,ProdSerNr,false,0);
end;

global
procedure MakeActWindowTypeToDo_RUS(record ActVc Actr)
begin
  real i,h,h1,h2,h3,h4,h5,h6,h7,hm,hs,v,l,vs,v2,vm,f,t,fs;
  string 255 label;

  //TileButton(-,"Время");
  //TileButton(1,"Текст");
  TileButton(1,"Тэги");
  TileButton(2,"Под-задачи");
  TileButton(3,"Клиент");
  //TileButton(-,"Alarm");
  //TileButton(-,"Resources");
  //TileButton(-,"Service");
  TileButton(4,"Опред. пользователем");
  TileButton(5,"Разн.");

  //MakeTextTile(1);
  MakeTagsTile_RUS(1);
  MakeSubTaskTile_RUS(2);
  MakeCustomerTile_RUS(3);
  MakeUserDefinedTile(4);
  MakeCruftTile_RUS(5);
end;

global
procedure SetupNightAuditWindowControls_RUS(Boolean DoPrefWindowf)
begin
  real h,h2,v,vs,v2,vm;

  if DoPrefWindowf then begin
    h = 70; h2 = 265; v = 10; vs = 20;
    EditField(h,v,60,"Пользователь",Normal,UserCode,false,UserSClass);
    EditField(175,v,265,"Наименование",Normal,UserName,false,UserSClass);
    EditField(h,v+=vs,280,"Местораполож.",Normal,Locations,false,LocationSClass);
    StaticText(h+290,v+14,"(В процессе разработки)",false);
    v = 69;
  end else begin
    h = 30; v = 13;
    EditField(h+30,v,80,"Дата",Normal,sStartDate,false,PasteCurDate);   
    v = v+46;
  end;
  //Section 1
  ButtonFrame(h,v,370,2,"Секция 1 (Заполненность)");
  if DoPrefWindowf then begin
    CheckBox(h,v,0,"Включить",Sec1Enabled);  
    CheckBox(h,v+=16,0,"Детали по комнате",Sec1RoomDetails);
  end else begin
    CheckBox(h,v,0,"Включить",flags[0]);
    CheckBox(h,v+=16,0,"Детали по комнате",flags[1]);
  end;
  v = v+45; v2 = v+12;
  if (HasModNL) then begin
  //Section 2
  ButtonFrame(h,v,370,5,"Секция 2 (Revenue)");
  if DoPrefWindowf then begin
    CheckBox(h,v,0,"Включить",Sec2Enabled);
  end else begin
    CheckBox(h,v,0,"Включить",flags[2]);
  end;
  h2 = h+10;
  ButtonFrame(h2,v+=37,100,2,"Тип периода");
  if DoPrefWindowf then begin
    RadioButton(h2,v,0,0,"Календарные годы",Sec2PeriodType);
    RadioButton(h2,v+=16,1,0,"Финансовые годы",Sec2PeriodType);
  end else begin
    RadioButton(h2,v,0,0,"Календарные годы",flags[17]);
    RadioButton(h2,v+=16,1,0,"Финансовые годы",flags[17]);
  end;
  h2 = h+200;
  if DoPrefWindowf then begin
    EditField(h2,v2,160,"Счета",Normal,Sec2Account,false,AccSClass);
    EditField(h2,v2+=21,160,"Тип объекта",Normal,Sec2ObjType,false,OTSClass);
    EditField(h2,v2+=21,160,"Объекты",Normal,Sec2Obj,false,ObjSClass);  
  end else begin
    EditField(h2,v2,160,"Счета",Normal,AccStr,false,AccSClass);
    EditField(h2,v2+=21,160,"Тип объекта",Normal,ObjType,false,OTSClass);
    EditField(h2,v2+=21,160,"Объекты",Normal,ObjStr,false,ObjSClass);  
  end;
  v = v+55; v2 = v;
  end;
  //Section 3
  ButtonFrame(h,v,370,2,"Секция 3 (Cust/Guest Ledger)");
  if DoPrefWindowf then begin
    CheckBox(h,v,0,"Включить",Sec3Enabled);
    CheckBox(h,v+=16,0,"Показать Агентов",Sec3ShowAgents);
    CheckBox(h+195  ,v2,0,"Показать Гостей",Sec3ShowGuests);
  end else begin
    CheckBox(h,v,0,"Включить",flags[4]);
    CheckBox(h,v+=16,0,"Показать Агентов",flags[5]);
    CheckBox(h+195  ,v2,0,"Показать Гостей",flags[6]);
  end;
  v = v+43; v2 = v+8;
  //Section 4
  ButtonFrame(h,v,370,2,"Секция 4 (Revenue Details)");
  if DoPrefWindowf then begin
    CheckBox(h,v,0,"Включить",Sec4Enabled);
    CheckBox(h,v+=16,0,"Подробный",Sec4Detailed);
    if (HasMultiLocations) then begin
    EditField(h+200,v2,160,"Местоположения",Normal,Sec4Locations,false,LocationSClass);
    end;
  end else begin
    CheckBox(h,v,0,"Включить",flags[7]);
    CheckBox(h,v+=16,0,"Подробный",flags[8]);
    if (HasMultiLocations) then begin
    EditField(h+200,v2,160,"Местоположения",Normal,f1,false,LocationSClass);
    end;
  end;
  v = v+43; v2 = v+8;
  //Section 5
  ButtonFrame(h,v,370,2,"Секция 5 (Receipts Analysis)");
  if DoPrefWindowf then begin
    CheckBox(h,v,0,"Включить",Sec5Enabled);
    CheckBox(h,v+=16,0,"Подробный",Sec5Detailed);
    if (HasLocalMachines) then begin
    EditField(h+200,v2,160,"Машины",Normal,Sec5Machines,false,LocalMachineSClass);
    end;
  end else begin
    CheckBox(h,v,0,"Включить",flags[9]);
    CheckBox(h,v+=16,0,"Подробный",flags[10]);
    if (HasLocalMachines) then begin
    EditField(h+200,v2,160,"Машины",Normal,f2,false,LocalMachineSClass);
  end;
  end;
  v = v+43;
  if (IsEnterprise) then begin
  //Section 6
  ButtonFrame(h,v,370,2,"Секция 6 (Анализ Forex) - в процессе разработки");
  if DoPrefWindowf then begin
    CheckBox(h,v,0,"Включить",Sec6Enabled);
    CheckBox(h,v+=16,0,"Подробный",Sec6Detailed);
  end else begin
    CheckBox(h,v,0,"Включить",flags[11]);
    CheckBox(h,v+=16,0,"Подробный",flags[12]);
  end;
  v = v+43; v2 = v; vm = v;
  end;
  //Section 7
  if (HasLimitedAccess or HasMultiLocations) then begin
  ButtonFrame(h,v,370,3,"Секция 7 (System Controls)");
  if DoPrefWindowf then begin
    CheckBox(h,v+=5,0,"Включить",Sec7Enabled);
    CheckBox(h+120,v2+=5,0,"UnOKed Sales Trans.",Sec7DoSalesGroup);
    CheckBox(h+120,v2+=20,0,"UnOKed Stock Trans.",Sec7DoLocations);
      if (HasLimitedAccess) then begin
    EditField(h+260,vm+=5,100,"",Normal,Sec7SalesGroups,false,SalesGroupSClass);
      end;
      if (HasMultiLocations) then begin
    EditField(h+260,vm+=22,100,"",Normal,Sec7Locations,false,LocationSClass);
      end;
  end else begin
    CheckBox(h,v+=5,0,"Включить",flags[13]);
    CheckBox(h+120,v2+=5,0,"UnOKed Sales Trans.",flags[15]);
    CheckBox(h+120,v2+=20,0,"UnOKed Stock Trans.",flags[16]);
      if (HasLimitedAccess) then begin
    EditField(h+260,vm+=5,100,"",Normal,f3,false,SalesGroupSClass);
      end;
      if (HasMultiLocations) then begin
    EditField(h+260,vm+=22,100,"",Normal,f4,false,LocationSClass);
      end;
    end;    
  end;    
  return;
end;

global
procedure DefineElearningURLCacheLClass_RUS()
begin
  SetWRect(10,80,600,291);
  Sizeable(-1,-1,0,0);
  RecordList(4,17,-21,-39);
  //  RlColKey(6,6,"UUID",UUID,false,UUID);
  RlColKey(6,6,"Наим. окна",WindowName,false,WindowName);
  RlCol(150,150,"URL",URL,false);
  RlCol(-200,-200,"Дата",UDate,true);
  RlCol(-130,-130,"Время",UTime,true);
  RlCol(-60,-60,"Статус",State,true);
  SearchField("Поиск");
  return;
end;

global
procedure DefineElearningURLCacheDClass_RUS()
begin
  real vs,h,h2,h3,v;

  SetWRect(20,80,500,420);
  vs = 20; h = 100; h2 = 240;h3 = 380; v = 6;
  EditField(h,v,320,"UUID",Normal,UUID,false,0);
  EditField(h,v+=vs,-20,"Наим. окна",Normal,WindowName,false,0);
  EditField(h,v+=vs,-20,"URL",Normal,URL,false,0);
  EditField(h,v+=vs,80,"Дата",Normal,UDate,false,PasteCurDate);
  EditField(h2,v,80,"Время",Normal,UTime,false,PasteCurTime);
  EditField(h3,v,-20,"Статус",Normal,State,false,SetSClass);
  MatrixBegin(4,v=(v+=40),-32,-20,-,99);
  MatCol(1,24,"Property",0,Property,false,StrSetSClass);
  MatCol(1,-200,"Значение",0,Value,false,0);
  MatCol(1,-150,"Код продукта",0,ProductCode,false,StrSetSClass);
  EndMatrix;
  return;
end;

global
procedure DisplayRecordDetailsCustDisplay_RUS(LongInt ah,LongInt av,string compname,date td,time tt,string lmc,string sm,string nr,string custcode,string custname,
                                          string loyaltycardnr,Integer ShowBaggerSupervisor,string bagger,string supervisor,string disccardnr,val discfwdbal)
begin
  real h,h2,h3,h4,v;
  string 255 tstr;
  record LocalMachineBlock LMb;
  longint i;
  
  BlockLoad(LMb);

  h = ah;
  h2 = h + 150;
  h3 = h + 240;
  v = av;

  StaticText(h,v,Left(compname,20),false);

  StaticText(h2,v,td,false);
  StaticText(h3,v,Left(tt,5),false);
  StaticText(h,v+=20,nr,false);
  StaticText(h2,v,"Касса: " & lmc,false);
  StaticText(h3,v,sm,false);
/*
  tstr = "Клиент: ";
  tstr = tstr & custcode;
  StaticText(h,v+=20,tstr,false);
  StaticText(h2,v,Left(custname,35),false);

  tstr = "Накопит. карт.: ";
  tstr = tstr & loyaltycardnr;
  StaticText(h,v+=20,tstr,false);
*/
  if (ShowBaggerSupervisor!=0) then begin
    tstr = "Упаковщик: ";
    tstr = tstr & bagger;
    StaticText(h2,v,tstr,false);
    v = v + 20;
  end;
  if (nonblank(disccardnr)) then begin
    tstr = "Скидочн. карт.: ";
    tstr = tstr & disccardnr;
    StaticText(h2,v,tstr,false);
    tstr = "Баланс: " & discfwdbal;
    StaticText(h2,v+=20,tstr,false);
  end;
  
  
  h = 20; v = 26;
  
  //h2 = -150; h3 = -70;
  
  h4 = -24;
  if (LMb.WideScrollBars!=0) then begin
    h4 = -44;
  end;
  
  // DrawPOSStringList();
  switch (LMb.POSButtonsPosition) begin
    case kPOSButtonsPositionLeft:
      DataList(630,105+60+15,h4,-10,"receipt");
      h = 8;
    case kPOSButtonsPositionRight:
      DataList(8,105+60+15,-660,-10,"receipt");
      h = -630;
  end;
  
  DataListColumn(1,6,90,AdjLeft,"artcode","Код",M4Code); 
  DataListColumn(1,96,-270,AdjLeft,"spec","Наимен.",M4Str);
  DataListColumn(1,-265,-210,AdjRight,"qty","К-во",M4Val); 
  DataListColumn(1,-205,-150,AdjRight,"price","Цена",M4Val); 
  DataListColumn(1,-145,-90,AdjRight,"rebate","Скидка",M4Val); 
  DataListColumn(1,-85,-26,AdjRight,"rowsum","Сумма",M4Val); 
  DataListColumn(1,-20,-6,AdjRight,"","",M4Str); // Added to provide some extra space for scroll bar. 
  
  DataListColumn(2,6,-6,AdjLeft,"spec","",M4Str);
  
  DataListColumn(3,6,60,AdjLeft,"artcode1","",M4Code);
  DataListColumn(3,64,160,AdjLeft,"spec","",M4Str);
  DataListColumn(3,164,210,AdjRight,"qty","",M4Val);
  DataListColumn(3,214,320,AdjLeft,"artcode2","",M4Code);
  DataListColumn(3,324,360,AdjLeft,"s","",M4Str);
  
  return;
end;

global
procedure DisplayRecordDetailsRA_RUS(LongInt ah,LongInt av,string compname,date td,time tt,string lmc,string sm,string nr,string custcode,string custname,
                                 string loyaltycardnr,Integer ShowBaggerSupervisor,string table,LongInt covers,Date rd,string class,LongInt kitchenordnr,
                                 string taxseal)
begin
  real h,h2,h3,h4,h5,v,tv,tv2,truncval;
  string 255 tstr;

  h = ah;
  h2 = h + 160;
  h3 = h + 250;
  switch (GuiType) begin
    case kGuiiPhone: truncval = 20;
    otherwise
      truncval = 35;
  end;   
  h4 = h + 350;
  v = av;
 

  StaticText(h,v,Left(compname,20),false);

  StaticText(h2,v,td,false);
  StaticText(h3,v,Left(tt,5),false);
  StaticText(h,v+=20,nr,false);
  StaticText(h2,v,USetStr(28201) & lmc,false);
  StaticText(h3,v,sm,false);

  tstr = USetStr(28202);
  tstr = tstr & custcode;
  StaticText(h,v+=20,tstr,false);
  StaticText(h2,v,Left(custname,truncval),false);

  v = v + 20;
  h4 = h; h5 = h2;
  if (HasLoyaltyCards) then begin
  tstr = USetStr(28203);
  tstr = tstr & loyaltycardnr;
    StaticText(h,v,tstr,false);
    h4 = h2; h5 = h3;
  end;

  tstr = USetStr(28204);
  tstr = tstr & table;
  StaticText(h4,v,tstr,false);
  tstr = USetStr(28205);
  if (covers<0) then begin
  end else begin
    tstr = tstr & covers;
  end;
  switch (GuiType) begin
    case kGuiiPhone: tv = h; v = v + 20; h = h2; h2 = h3+120; h3 = h4 + 130; tv2 = v;
    otherwise
      tv = h5; tv2 = v + 20;
  end;  
  StaticText(tv,v,Left(tstr,35),false);

  tstr = USetStr(28206);
  tstr = tstr & " " & rd;
  StaticText(h,tv2,tstr,false);
  if (HasLocalization("HRV")) then begin  
    tstr = USetStr(28209) & ": " & taxseal;  
    StaticText(h2,tv2,tstr,false);
  end else begin
  if (HasModRest==false) then begin 
  tstr = USetStr(28207);
  tstr = tstr & class;
  StaticText(h2,tv2,tstr,false);
  tstr = USetStr(28208);
  if (kitchenordnr > 0) then begin 
    tstr = tstr & kitchenordnr;
  end;
  StaticText(h3,tv2,tstr,false);
    end;
  end;
  return;
end;

global
procedure DrawModifierButtons2_RUS(var integer ht,var integer vt)
begin
  record ModifiersVc Modifiersr;
  row ModifiersVc Modifiersrw;
  Integer i,rwcnt;
  record RcVc RepSpec;
  real h0,h,h2,v,vs,v2;
  Integer wn,mwn;
  vector Integer vgroupitemscnt;
  LongInt lastgroup;
  Boolean checkboxf;

  ht = 0;
  wn = CurWindow;
  if (GetWindowClass(wn)=="SelectModifiers2WClass") then begin
    if (wn>0) then begin
//      if (GetWindowFileName(wn)=="RcVc") then begin
        GetWindowRecord(wn,RepSpec);
//      end;
    end;
    h0 = 30; h2 = 200; v2 = 40; v = -20; vt = 0; vs = 50;
    Modifiersr.Code = RepSpec.f1;
    if (ReadFirstMain(Modifiersr,1,true)) then begin
      StaticText(10,20,"Выберите модификатор для товара " & Modifiersr.Comment,false);
      rwcnt = MatRowCnt(Modifiersr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Modifiersr,i,Modifiersrw);
        vgroupitemscnt[Modifiersrw.Group] = vgroupitemscnt[Modifiersrw.Group] + 1;
      end;
      h = h0;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Modifiersr,i,Modifiersrw);
        if (lastgroup!=Modifiersrw.Group) then begin
//          PutWindowInteger(wn,"SelectModifiers2WClass" & Modifiersrw.Group,-1); moved to OpenSelectModifiers2WClass cause of crashes on windows
          if (vgroupitemscnt[Modifiersrw.Group]==1) then begin
            h = 2*120;
          end else begin
            h = vgroupitemscnt[Modifiersrw.Group]*120;
          end;
          if (ht<(h+130)) then begin ht = h + 130; end;
          h = h0;
          v = v + vs;
          vt = vt + 50;
        end;
        if (vgroupitemscnt[Modifiersrw.Group]==1) then begin
          RadioButton2(h,v,100,40,-1,0,"Нет","SelectModifiers2WClass" & Modifiersrw.Group,2,2);
          h = h + 120;
        end;
        RadioButton2(h,v,100,40,i,0,Modifiersrw.Name,"SelectModifiers2WClass" & Modifiersrw.Group,2,2);
        h = h + 120;
        lastgroup = Modifiersrw.Group;
      end;
    end;
  end;
  return;
end;

global
procedure DrawRestPMOtherPay_RUS()
begin
  real h,v;
  record LocalMachineBlock LMb;
  record RestPMBlock RestPMb;
  row RestPMBlock RestPMbrw;
  Integer i,rwcnt,pmcnt;
  integer rows,cols,btnwidth,btnheight,hpad,vpad;
  string 255 label;
  Integer colnr;
  //change RestPMOtherPayVClassOnOpenWindow when changing this
  
  btnwidth = 85;
  btnheight = 50;
  hpad = 5;
  vpad = 5;
  
  BlockLoad(RestPMb);
  BlockLoad(LMb);
  rwcnt = MatRowCnt(RestPMb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RestPMb,i,RestPMbrw);
    if (RestPMbrw.MachineName==LMb.LocalMachineCode) then begin
      pmcnt = pmcnt + 1;
    end;
  end;
  
  cols = squareroot(pmcnt-1);
  cols = cols+1;
  rows = pmcnt/cols;
  if (mod(pmcnt,cols)!=0) then begin
    rows = rows + 1;
  end;
  
  SetWRect(20,80,20+(cols*btnwidth)+(cols+1)*hpad,80+(rows*btnheight)+(rows+1)*vpad);
  if (GuiType!=kGuiiPhone) then begin
    SoftEditField(20+(cols*btnwidth)+(cols+1)*hpad+100,v,20,"",Normal ,"Dummy",false,0,M4Str,2);
  end;
  
  h = hpad;
  v = vpad;
  pmcnt = 1;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RestPMb,i,RestPMbrw);
    if (RestPMbrw.MachineName==LMb.LocalMachineCode) then begin
      label = RestPMbrw.Label;
      colnr = RestPMbrw.colnr;
      if (colnr<=0) then begin colnr = 9; end;
      switch (RestPMbrw.rowstp) begin
        case kInvoiceRowTypeLoyaltyPointsPayment:
          if (blank(label)) then begin label = "Нак.баллы"; end;            
        case kInvoiceRowTypeCashPayment:
          if (blank(label)) then begin label = "Наличные"; end;            
        case kInvoiceRowTypeCreditCardPayment:
          if (blank(label)) then begin label = "Кр.карта"; end;            
        case kInvoiceRowTypeGiftVoucherPayment:
          if (blank(label)) then begin label = "ПС"; end;            
        case kInvoiceRowTypeChequePayment:
          if (blank(label)) then begin label = "ПС"; end;            
      end;
      SoftEditField(h+5,v+5,20,"",Normal ,"PMCode" & pmcnt,false,0,M4Str,2);
      SoftEditField(h+5,v+5,20,"",Normal ,"PMCodeLabel" & pmcnt,false,0,M4Str,2);
      SoftEditField(h+5,v+5,20,"",Normal ,"rowstp" & pmcnt,false,0,M4Str,2);
      ColourPushButton(h,v,h+btnwidth,v+btnheight,"RestPMOtherPayDsm" & pmcnt,label,colnr);
      h = h + btnwidth + hpad;
      if (Mod(pmcnt,cols)==0) then begin
        v = v + btnheight + vpad;
        h = hpad;
      end;
      pmcnt = pmcnt + 1;
    end;
  end;
  
  return;
end;

global
function real DrawPaymentModesButtons_RUS()
begin
  real h,v,vm,vs,v3,h2,h3,h4;
  record LocalMachineBlock LMb;
  record RestPMBlock RestPMb;
  row RestPMBlock RestPMbrw;
  Integer i,rwcnt;
  Boolean treatedf;
  string 255 label,fieldname;
  Integer colnr,pmcnt;

  v = 6;
  //  hs = 87; h2 = 80; v3 = 33; vs = 37; h3 = 180; h4 = 280;
  h2 = 80; v3 = 33; vs = 37; h3 = 180; h4 = 280;
  h = 17;
  BlockLoad(RestPMb);
  BlockLoad(LMb);
  rwcnt = MatRowCnt(RestPMb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RestPMb,i,RestPMbrw);
    if (RestPMbrw.MachineName==LMb.LocalMachineCode) then begin
      pmcnt = pmcnt + 1;
    end;
  end;
  if (pmcnt>2) then begin
    pmcnt = 1;
    h = 17;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RestPMb,i,RestPMbrw);
      if (RestPMbrw.MachineName==LMb.LocalMachineCode) then begin
        label = RestPMbrw.Label;
        colnr = RestPMbrw.colnr;
        if (colnr<=0) then begin colnr = 9; end;
        h2 = 85;
        if (len(label)>10) then begin h2 = len(label)*85/10; end;
        if (pmcnt==4) then begin
          ColourPushButton(h,v,h+85,v+50,"RestPMOtherIVsm","Другое",2);
          h=h+87;
          i = rwcnt;
        end else begin
          switch (RestPMbrw.rowstp) begin
            case kInvoiceRowTypeLoyaltyPointsPayment:
              if (blank(label)) then begin label = "Наличные"; end;            
              SoftEditField(h+10,v,20,"",Normal ,"RestAccPMCodeCash",false,0,M4Str,2);
              SoftEditField(h+10,v,20,"",Normal ,"RestAccrowstpCash",false,0,M4Str,2);
              ColourPushButton(h,v,h+85,v+50,"CashRestAccsm",label,colnr);
              h = h+87;
            case kInvoiceRowTypeCashPayment:
              if (blank(label)) then begin label = "Наличные"; end;            
              SoftEditField(h+10,v,20,"",Normal ,"RestAccPMCodeCash",false,0,M4Str,2);
              SoftEditField(h+10,v,20,"",Normal ,"RestAccrowstpCash",false,0,M4Str,2);
              ColourPushButton(h,v,h+85,v+50,"CashRestAccsm",label,colnr);
              h = h+87;
            case kInvoiceRowTypeCreditCardPayment:
              if (blank(label)) then begin label = "Кр. карты"; end;            
              SoftEditField(h+10,v,20,"",Normal ,"RestAccPMCodeCC",false,0,M4Str,2);
              SoftEditField(h+10,v,20,"",Normal ,"RestAccrowstpCC",false,0,M4Str,2);
              ColourPushButton(h,v,h+85,v+50,"CredCardRestAccsm",label,colnr);
              h = h+87;
            case kInvoiceRowTypeGiftVoucherPayment:
              if (blank(label)) then begin label = "ПС"; end;            
              SoftEditField(h+10,v,20,"",Normal ,"RestAccPMCodeGVR",false,0,M4Str,2);
              SoftEditField(h+10,v,20,"",Normal ,"RestAccrowstpGVR",false,0,M4Str,2);
              ColourPushButton(h,v,h+85,v+50,"GVRRestAccsm",label,colnr);
              h = h+87;
            case kInvoiceRowTypeChequePayment:
              if (blank(label)) then begin label = "Чек"; end;            
              SoftEditField(h+10,v,20,"",Normal ,"RestAccPMCodeCHQ",false,0,M4Str,2);
              SoftEditField(h+10,v,20,"",Normal ,"RestAccrowstpCHQ",false,0,M4Str,2);
              ColourPushButton(h,v,h+85,v+50,"ChequeRestAccsm",label,colnr);
              h = h+87;
            end;
          end;
          pmcnt = pmcnt + 1;
          treatedf = true;
        end;
      end;
      v = v + 60;
    end;
    if (treatedf==false) then begin
    ColourPushButton(h,vm=v,h+h2,v+v3,"RestAccPaymentCash","Наличные",9);
    EditField(h4,v+10,70,"Cash",Normal,CashValue,true,0);
    ColourPushButton(h,v=v+vs,h+h2,v+v3,"RestAccPaymentCard1","Кр.карта 1",9);
    EditField(h3,v+10,20,"Pay Mode",Normal,PayDeal2,false,RestPMSClass);
    EditField(h4,v+10,70,"Card 1",Normal,Paid,true,0);
    ColourPushButton(h,v=v+vs,h+h2,v+v3,"RestAccPaymentCard2","Кр.карта 2",9);
    EditField(h3,v+10,20,"Pay Mode",Normal,PayDeal3,false,RestPMSClass);
    EditField(h4,v+10,70,"Card 2",Normal,Paid2,true,0);
    ColourPushButton(h,v=v+vs,h+h2,v+v3,"RestAccPaymentCard3","Кр.карта 3",9);
    EditField(h3,v+10,20,"Pay Mode",Normal,PayDeal4,false,RestPMSClass);
    EditField(h4,v+10,70,"Card 3",Normal,Paid3,true,0);
  end;

  //  ColourPushButton(h=h+62,v,h+60,v+33,"CashRestAccDsm","Cash",2);//not ready yet
  //  ColourPushButton(h=h+62,v,h+60,v+33,"CredCardRestAccDsm","Cred. Card",2);

  DrawPaymentModesButtons_RUS = v;
  return;
end;

global
function real RestAccOldDClassFunctionButtons_RUS()
begin
  Real v,hs,h2,h,v3;
  Integer colnr;

  h = 17; v = 12; h2 = 85; v3 = 52;

  h = GenericFunctionButton(h,v,h2,v3,"RestAccOldDClass","RestAccTile",1,"Напитки");
  h = GenericFunctionButton(h,v,h2,v3,"RestAccOldDClass","RestAccTile",2,"Бутылки"); 
  h = GenericFunctionButton(h,v,h2,v3,"RestAccOldDClass","RestAccTile",3,"Сильные напитки"); 
  h = GenericFunctionButton(h,v,h2,v3,"RestAccOldDClass","RestAccTile",4,"Ланчи"); 
  h = GenericFunctionButton(h,v,h2,v3,"RestAccOldDClass","RestAccTile",5,"Сэндвичи"); 
  h = GenericFunctionButton(h,v,h2,v3,"RestAccOldDClass","RestAccTile",6,"Осн.&Десерты"); 
  h = GenericFunctionButton(h,v,h2,v3,"RestAccOldDClass","RestAccTile",7,"Вина"); 
  h = GenericFunctionButton(h,v,h2,v3,"RestAccOldDClass","RestAccTile",8,"Другое"); 

  RestAccOldDClassFunctionButtons_RUS = v;
  return;
end;

global
function real POSPIVCashDClassFunctionButtons_RUS()
begin
  Real v,hs,h2,h,v3;
  Integer colnr;

  h = 17; v = 12; h2 = 85; v3 = 52;

  h = GenericFunctionButton(h,v,h2,v3,"POSPIVCashDClass","POSPIVCashDClassTileItemsSet",1,"Товары 1");
  h = GenericFunctionButton(h,v,h2,v3,"POSPIVCashDClass","POSPIVCashDClassTileItemsSet",2,"Товары 2"); 
  h = GenericFunctionButton(h,v,h2,v3,"POSPIVCashDClass","POSPIVCashDClassTileItemsSet",3,"Товары 3"); 
  h = GenericFunctionButton(h,v,h2,v3,"POSPIVCashDClass","POSPIVCashDClassTileItemsSet",4,"Товары 4"); 
  h = GenericFunctionButton(h,v,h2,v3,"POSPIVCashDClass","POSPIVCashDClassTileItemsSet",5,"Товары 5"); 
  h = GenericFunctionButton(h,v,h2,v3,"POSPIVCashDClass","POSPIVCashDClassTileItemsSet",6,"Товары 6"); 
  h = GenericFunctionButton(h,v,h2,v3,"POSPIVCashDClass","POSPIVCashDClassTileItemsSet",7,"Товары 7"); 
  h = GenericFunctionButton(h,v,h2,v3,"POSPIVCashDClass","POSPIVCashDClassTileItemsSet",8,"Другие товары"); 

LPOSPIVCashDClassFunctionButtons_RUS:;
  POSPIVCashDClassFunctionButtons_RUS = v;
  return;
end;

global
function real IVDClassFunctionButtons_RUS()
begin
  Real v,hs,h2,h,v3;
  Integer colnr;

  h = 17; v = 12; h2 = 85; v3 = 52;

  h = GenericFunctionButton(h,v,h2,v3,"IVDClass","IVDClassTileItemsSet",1,"Товары 1");
  h = GenericFunctionButton(h,v,h2,v3,"IVDClass","IVDClassTileItemsSet",2,"Товары 2"); 
  h = GenericFunctionButton(h,v,h2,v3,"IVDClass","IVDClassTileItemsSet",3,"Товары 3"); 
  h = GenericFunctionButton(h,v,h2,v3,"IVDClass","IVDClassTileItemsSet",4,"Товары 4"); 
  h = GenericFunctionButton(h,v,h2,v3,"IVDClass","IVDClassTileItemsSet",5,"Товары 5"); 
  h = GenericFunctionButton(h,v,h2,v3,"IVDClass","IVDClassTileItemsSet",6,"Товары 6"); 
  h = GenericFunctionButton(h,v,h2,v3,"IVDClass","IVDClassTileItemsSet",7,"Товары 7"); 
  h = GenericFunctionButton(h,v,h2,v3,"IVDClass","IVDClassTileItemsSet",8,"Другие товары"); 

LIVDClassFunctionButtons_RUS:;
  IVDClassFunctionButtons_RUS = v;
  return;
end;

global
function real FunctionButtons_RUS(string dclass)
begin
  Real v;
  
  switch (dclass) begin
    case "RestAccOldDClass": v = RestAccOldDClassFunctionButtons_RUS;
    case "RestAccPriceLookupDClass": v = RestAccOldDClassFunctionButtons_RUS;
    case "POSPIVCashDClass": v = POSPIVCashDClassFunctionButtons_RUS;
    case "IVDClass": v = IVDClassFunctionButtons_RUS;
  end;
  
LFunctionButtons_RUS:;
  FunctionButtons_RUS = v;
  return;
end;

global
function real VATZoneButtonsLabelsRUS(real h,real v,real bl,real vs)
begin
  string 255 label,label2,label3,label4,label5;
    
  label = SetVATZoneLabel;
  
  if (blank(label)) then begin 
    label2 = "в пределах ЕС"; 
    label3 = "в предалах ЕС (НДС)"; 
    label4 = "за пределами ЕС"; 
    label5 = "за пределами ЕС (НДС)"; 
  end else begin
    label2 = "в пределах " & label; 
    label3 = "в пределах " & label & " (НДС)"; 
    label4 = "за пределами " & label; 
    label5 = "за пределами " & label & " (НДС)"; 
  end;

  ButtonFrame(h,v,bl,5,"НДС");
  RadioButton(h,v,0,0,"Внутренний",ExportFlag);
  RadioButton(h,v+=vs,1,0,label2,ExportFlag);
  if (IsEnterprise or HasLocalization("POL")==false) then begin
  RadioButton(h,v+=vs,3,0,label3,ExportFlag);
  end;
  RadioButton(h,v+=vs,2,0,label4,ExportFlag);
  if (IsEnterprise or HasLocalization("POL")==false) then begin
  RadioButton(h,v+=vs,4,0,label5,ExportFlag);
  end;
  
  VATZoneButtonsLabelsRUS = v;
  return;
end;

global
function string 255 VATZoneEditFieldLabelRUS(Integer typ)
begin
  string 255 label,res;
    
  label = SetVATZoneLabel;
  
  if (blank(label)) then begin 
    switch (typ) begin
      case 1: res = "В ЕС "; 
      case 2: res = "Вне ЕС "; 
    end;
  end else begin
    switch (typ) begin
      case 1: res = "В " & label & " ";
      case 2: res = "Вне " & label & " ";
    end;
  end; 
  VATZoneEditFieldLabelRUS = res;
  return;
end;

global
function string 255 VATZoneNameRUS()
begin
  string 255 label,res;
    
  label = SetVATZoneLabel;
  
  if (blank(label)) then begin 
    res = "ЕС "; 
  end else begin
    res = label & " "; 
  end; 
  VATZoneNameRUS = res;
  return;
end;

global
function string 255 DemoMsgWClassTitle_RUS(Boolean isreg,Boolean haskey)
begin
  string 255 res;
  
  if (DaysUntilRestricted>0) then begin
    if (isreg) then begin
      if (haskey) then begin
        res = "Информация о регистрации";
      end else begin
        res = "База скоро перейдет в ограниченный режим";
      end;
    end else begin
      res = "Пожалуйста, зарегистрируйте вашу копию HansaWorld Enterprise";
    end;
  end else begin
    res = "База данных в ограниченном режиме";
  end;
  
  DemoMsgWClassTitle_RUS = res;
  return;
end;

global
function real DrawPaymentModesButtons_IV_RUS(real pv)
begin
  real h,v,vm,vs,v3,h2,h3,h4;
  record LocalMachineBlock LMb;
  record RestPMBlock RestPMb;
  row RestPMBlock RestPMbrw;
  Integer i,rwcnt,pmcnt;
  Boolean treatedf;
  string 255 label;
  Integer colnr;
  
  v = pv+195;
  h2 = 85; v3 = 50; vs = 37; h3 = 180; h4 = 280;
  h = 17;
  BlockLoad(RestPMb);
  BlockLoad(LMb);
  rwcnt = MatRowCnt(RestPMb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RestPMb,i,RestPMbrw);
    if (RestPMbrw.MachineName==LMb.LocalMachineCode) then begin
      pmcnt = pmcnt + 1;
    end;
  end;
  if (pmcnt>2) then begin
    pmcnt = 1;
    h = 17;;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RestPMb,i,RestPMbrw);
      if (RestPMbrw.MachineName==LMb.LocalMachineCode) then begin
        label = RestPMbrw.Label;
        colnr = RestPMbrw.colnr;
        if (colnr<=0) then begin colnr = 2; end;
        h2 = 85;
        if (len(label)>10) then begin h2 = len(label)*85/10; end;
        if (pmcnt==3) then begin
          ColourPushButton(h,v,h+85,v+50,"RestPMOtherIVsm","Другой",2);
          h = h+87;
          i = rwcnt;
        end else begin
          switch (RestPMbrw.rowstp) begin
            case kInvoiceRowTypeLoyaltyPointsPayment:
              if (blank(label)) then begin label = "Нак. баллы"; end;            
              ColourPushButton(h,v,h+85,v+50,"CashIVsm",label,colnr);
              h=h+87;
            case kInvoiceRowTypeCashPayment:
              if (blank(label)) then begin label = "Наличные"; end;            
              ColourPushButton(h,v,h+85,v+50,"CashIVsm",label,colnr);
              h=h+87;
            case kInvoiceRowTypeCreditCardPayment:
              if (blank(label)) then begin label = "Кредит. карта"; end;            
              SoftEditField(h+5,v+5,20,"",Normal ,"PMCode" & pmcnt,false,0,M4Str,2);
              SoftEditField(h+5,v+5,20,"",Normal ,"PMCodeLabel" & pmcnt,false,0,M4Str,2);
              SoftEditField(h+5,v+5,20,"",Normal ,"rowstp" & pmcnt,false,0,M4Str,2);
              ColourPushButton(h,v,h+85,v+50,"CredCardIVsm" & pmcnt,label,colnr);
              h=h+87;
            case kInvoiceRowTypeGiftVoucherPayment:
              if (blank(label)) then begin label = "ПС"; end;            
              ColourPushButton(h,v,h+85,v+50,"GCRIVsm",label,colnr);
              h=h+87;
            case kInvoiceRowTypeChequePayment:
              if (blank(label)) then begin label = "Чек"; end;            
              ColourPushButton(h,v,h+85,v+50,"ChequeIVsm",label,colnr);
              h=h+87;
          end;
        end;
        pmcnt = pmcnt + 1;
        treatedf = true;
      end;
    end;
    ColourPushButton(h,v,h+85,v+50,"IVFinishAndPrint","Завершить",1); // Prints Receipt, closes record and opens new window
  end else begin
/*  
    for (i=0;i<3;i=i+1) begin
      MatRowGet(RestPMb,i,RestPMbrw);
      if (RestPMbrw.MachineName==LMb.LocalMachineCode) then begin
        label = RestPMbrw.Label;
        colnr = RestPMbrw.colnr;
        if (colnr<=0) then begin colnr = 9; end;
        h2 = 85;
        if (len(label)>10) then begin h2 = len(label)*85/10; end;
        switch (RestPMbrw.rowstp) begin
          case kInvoiceRowTypeCashPayment:
            if (blank(label)) then begin label = "Cash"; end;            
            ColourPushButton(h=h+87,v,h+85,v+50,"CashIVsm",label,2);
          case kInvoiceRowTypeCreditCardPayment:
            if (blank(label)) then begin label = "Cred. Card"; end;            
            ColourPushButton(h=h+87,v,h+85,v+50,"CredCardIVsm",label,2);
          case kInvoiceRowTypeGiftVoucherPayment:
            if (blank(label)) then begin label = "Rcv. GV"; end;            
            ColourPushButton(h=h+87,v,h+85,v+50,"GCRIVsm",label,2);
          case kInvoiceRowTypeChequePayment:
            if (blank(label)) then begin label = "Rcv. GV"; end;            
            ColourPushButton(h=h+87,v,h+85,v+50,"ChequeIVsm",label,2);
        end;
        treatedf = true;
      end;
    end;
    if (treatedf) then begin
      ColourPushButton(h,v,h+85,v+50,"IVFinishAndPrint","Finish",1); // Prints Receipt, closes record and opens new window
    end;
*/    
  end;
  if (treatedf==false) then begin
    ColourPushButton(h=17,v,h+85,v+50,"CashIVsm","Наличные",2);
    ColourPushButton(h=h+87,v,h+85,v+50,"CredCardIVsm","Кредит. карта",2);
    ColourPushButton(h=h+87,v,h+85,v+50,"GCRIVsm","ПС",2);
    ColourPushButton(h=h+87,v,h+85,v+50,"IVFinishAndPrint","Завершить",1); // Prints Receipt, closes record and opens new window
  end;
  DrawPaymentModesButtons_IV_RUS = h;
  return;
end;

function real VATZoneButtonsLabelsIDRUS(real h,real v,real bl,real vs)
begin
  string 255 label,label2,label3,label4,label5;
  
  label = SetVATZoneLabel;
  
  if (blank(label)) then begin 
    label2 = "в пределах ЕС"; 
    label3 = "в предалах ЕС (НДС)"; 
    label4 = "за пределами ЕС"; 
    label5 = "за пределами ЕС (НДС)"; 
  end else begin
    label2 = "в пределах " & label; 
    label3 = "в пределах " & label & " (НДС)"; 
    label4 = "за пределами " & label; 
    label5 = "за пределами " & label & " (НДС)"; 
  end;

  ButtonFrame(h,v,bl,5,"НДС");
  RadioButton(h,v,0,0,"Внутренний",ExportFlag);
  RadioButton(h,v+=vs,1,0,label2,ExportFlag);
  RadioButton(h,v+=vs,3,0,label3,ExportFlag);
  RadioButton(h,v+=vs,2,0,label4,ExportFlag);
  RadioButton(h,v+=vs,4,0,label5,ExportFlag);
  
  VATZoneButtonsLabelsIDRUS = v;
  return;
end;

global
function real TravelLogDeductions_RUS(real h,real vm)
begin
  real v,vs;
  record TravelLogBlock TravelLogRec;
  Integer DeductCount;
  
  BlockLoad(TravelLogRec);
  v = vm; vs = 16;

  if (nonblank(TravelLogRec.DeductDesc0)) then begin
    DeductCount = DeductCount + 1;
  end;
  if (nonblank(TravelLogRec.DeductDesc1)) then begin
    DeductCount = DeductCount + 1;
  end;
  if (nonblank(TravelLogRec.DeductDesc2)) then begin
    DeductCount = DeductCount + 1;
  end;
  if (nonblank(TravelLogRec.DeductDesc3)) then begin
    DeductCount = DeductCount + 1;
  end;
  if (nonblank(TravelLogRec.DeductDesc4)) then begin
    DeductCount = DeductCount + 1;
  end;
  
  if (DeductCount>0) then begin
    v = v + 30;
    ButtonFrame(h,v+vs,260,DeductCount,"Deductions");
    if (nonblank(TravelLogRec.DeductDesc0)) then begin
      CheckBox(h,v+=vs,0,TravelLogRec.DeductDesc0,Deduct0);
    end;
    if (nonblank(TravelLogRec.DeductDesc1)) then begin
      CheckBox(h,v+=vs,0,TravelLogRec.DeductDesc1,Deduct1);
    end;
    if (nonblank(TravelLogRec.DeductDesc2)) then begin
      CheckBox(h,v+=vs,0,TravelLogRec.DeductDesc2,Deduct2);
    end;
    if (nonblank(TravelLogRec.DeductDesc3)) then begin
      CheckBox(h,v+=vs,0,TravelLogRec.DeductDesc3,Deduct3);
    end;
    if (nonblank(TravelLogRec.DeductDesc4)) then begin
      CheckBox(h,v+=vs,0,TravelLogRec.DeductDesc4,Deduct4);
    end;
    v = v + 10;
  end;
  
  TravelLogDeductions_RUS = v;
  return;
end;

global
procedure DrawBarMenuTiles_RUS(string wclass)
begin
  Real v,vs,hs,h2,h;
  Integer i,rwcnt,j,butnr;
  Integer tilenr;
  Integer rw,rwc;
  record ItemButtonsBlock IBb;
  record BarMenuVc BarMenur;
  row BarMenuVc BarMenurw;
  row ItemButtonsBlock IBrw;
  string 255 procstr;
  
  BlockLoad(IBb);
  rwcnt = MatRowCnt(IBb);
  for (i=0;i<rwcnt;i=i+1) begin
    butnr = 1;
    v = 72; hs = 87; h2 = 80; vs = 60; h = 17;
    MatRowGet(IBb,i,IBrw);
    if (IBrw.ButtonType==2) then begin
      BarMenur.Code = GetMenuCode(IBrw.ArtCode);
      if (ReadFirstMain(BarMenur,1,true)) then begin
        tilenr = NumberofBarTabTiles + StringToInt(IBrw.ArtCode); //Bar Tab tiles + 
        Tile(tilenr,400,false,"" & tilenr,-);
        v = FunctionButtons_RUS(wclass);
        v = 71;
        rwc = MatRowCnt(BarMenur);
        for (rw = 0; rw <rwc; rw =rw +1) begin
          MatRowGet(BarMenur,rw,BarMenurw);
          procstr = "RestBarMenu"  & IBrw.ArtCode & "Товар" & (rw+1);
          ColourPushButton(h,v,h+85,v+50,procstr,BarMenurw.Name,BarMenurw.clr);
          h = h+hs;
          if (Mod(butnr,8)==0) and (butnr!=0) then begin
            h = 17;
            v = v + vs;
          end;
          butnr = butnr + 1;
          if (butnr==33) then begin
            goto LMenuItemButtons;
          end;  
        end;
      end;
    end;
LMenuItemButtons:;
  end;
  return;
end;

global
procedure CreditCardWindowHeader_RUS(Boolean shownamef,Boolean showcurncyf,Real vin)
begin
  Real v,vs,h;

  v = vin; vs = 20; h=190;
  EditFieldTL(h,v+=6, 100,"Сумма",M4Val,ViewOnly,0,vals0,false,0);
  if (showcurncyf) then begin
    EditFieldTL(h+190,v,-20,"Валюта",M4UStr,ViewOnly,3,CurncyCode,false,0);
  end;
  EditFieldTL(h,v+=20, -20,"Номер ссылки платежа",M4Str,ViewOnly,60,f3,false,0);
  if (shownamef) then begin
    EditFieldTL(h,v+=20, -20,"Имя (как на карте)",M4Str,Normal,255,f1,false,0);
  end;
  EditFieldTL(h,v+=20, 100,"Тип карты",M4Str,Normal,10,Stext,false,CredCardTypeSClass);
  EditFieldTL(h,v+=20, -20,"Номер карты",M4UStr,Normal,255,f2,false,0);
  EditFieldTL(h,v+=20, 20,"Действительна до, месяц (MM/ГГГГ)",M4UStr,Normal,2,FirstAcc,false,0);
  EditFieldTL(h+30,v, 40,"",M4UStr,Normal,4,LastAcc,false,0);
  EditFieldTL(h,v+=20, 30,"код подтверждения (CVV)",M4UStr,Normal,10,AccStr,false,0);
  EditFieldTL(h,v+=20, 20,"Дата начала, месяц (MM/ГГГГ)",M4UStr,Normal,2,ObjType,false,0);
  EditFieldTL(h+30,v, 40,"",M4UStr,Normal,4,ObjStr,false,0);
  EditFieldTL(h,v+=20, 30,"Номер остатка",M4UStr,Normal,2,TransStr,false,0);
  return;
end;

global
procedure CreditCardWindowInvoiceDetail_RUS(Real vin)
begin
  Real v,vs,h;

  v = vin; vs = 20; h=190;
  StaticText(h,v+=20,"Юр. адрес:",false);
  SoftEditField(h,v+=6,-20,"Имя",Normal,"ccpayaddr1",false,0,M4Str,50);
  SoftEditField(h,v+=20,-20,"Фамилия",Normal,"ccpayaddr2",false,0,M4Str,50);
  SoftEditField(h,v+=20,-20,"Наименование компании",Normal,"ccpaycompany",false,0,M4Str,50);
  SoftEditField(h,v+=20,-20,"Улица",Normal,"ccpayaddr3",false,0,M4Str,50);
  SoftEditField(h,v+=20,-20,"Город",Normal,"ccpayaddr4",false,0,M4Str,50);
  SoftEditField(h,v+=20,-20,"Почтовый индекс",Normal,"ccpayaddr6",false,0,M4Str,50);
  SoftEditField(h,v+=20,30,"Штат (США/Канада)",Normal,"ccpayaddr5",false,0,M4Str,2);
  SoftEditField(h,v+=20,20,"Страна",Normal,"cccountry",false,0,M4Str,2);
  return;
end;

global
procedure CreditCardWindowDeliveryDetail_RUS(Real vin)
begin
  Real v,vs,h;

  v = vin; vs = 20; h=190;
  StaticText(h,v+=20,"Адрес доставки:",false);
  SoftEditField(h,v+=6,-20,"Имя",Normal,"ccdeladdr_first",false,0,M4Str,50);
  SoftEditField(h,v+=20,-20,"Фамилия",Normal,"ccdeladdr_last",false,0,M4Str,50);
  SoftEditField(h,v+=20,-20,"Наименование компании",Normal,"ccdeladdr_company",false,0,M4Str,50);
  SoftEditField(h,v+=20,-20,"Улица",Normal,"ccdeladdr_addr1",false,0,M4Str,50);
  SoftEditField(h,v+=20,-20,"Город",Normal,"ccdeladdr_addr2",false,0,M4Str,50);
  SoftEditField(h,v+=20,-20,"Почтовый индекс",Normal,"ccdeladdr_postcode",false,0,M4Str,50);
  SoftEditField(h,v+=20,30,"Штат (США/Канада)",Normal,"ccdeladdr_state",false,0,M4Str,2);
  SoftEditField(h,v+=20,20,"Страна",Normal,"ccdeladdr_country",false,0,M4Str,2);
  return;
end;

global
procedure CreditCardWindowButtons_RUS(string halfuncproceed,string halfunccancel,real v)
begin
  Real h;

  if (v!=-70) then begin
    HalPushButton(h=120,v,h+100,v+20,halfuncproceed,"Продолжить");
    HalPushButton(h+=130,v,h+100,v+20,halfunccancel,"Отмена");
  end else begin
    ColourPushButton(h=50,v,h+150,v+48,halfunccancel,"Отмена<BR>F2",20);
    ColourPushButton(h+=180,v,h+150,v+48,halfuncproceed,"Продолжить<BR>F1",20);
  end;
  return;
end;

global
procedure CURClassDefinitionRUS()
begin
  real h,hs,v,vs,vm;
  Boolean testf;

  SetWRect(20,80,555,450);
  v = 6; vs = 20;
  if (HasModPL or HasModPP or IsEnterprise) then begin
  EditFieldTL(h=150,v=10, 150,"Контакт",   M4UStr,Normal,30,f1,false,CUSClass);
  end else begin
    EditFieldTL(h=150,v=10, 150,"Клиент",   M4UStr,Normal,30,f1,false,CUSClass); 
  end;
  if (HasCategories) then begin
    EditFieldTL(h,v+=vs,50,"Категория",   M4UStr,Normal,5,f3,false,CCatSClass);
  end;
  if (HasSalesman) then begin
    EditFieldTL(h,v+=vs,50,"Продавец",   M4UStr,Normal,10,TransStr,false,UserSClass);
  end;
  if (IsEnterprise) then begin
    EditFieldTL(h,v+=vs,50,"Группа по продажам",   M4UStr,Normal,5,Language,false,SalesGroupSClass);
  end;
  if (HasLanguages) then begin
    EditFieldTL(h,v+=vs,50,"Язык",   M4UStr,Normal,5,FirstAcc,false,LangSClass);
  end;
  if (HasModSL or HasModPL) then begin
    EditFieldTL(h,v+=vs,30,"Условия платежа",   M4UStr,Normal,2,LastAcc,false,PDSClass);
  end;
  if (HasContactClassification) then begin
    EditFieldTL(h,v+=vs,150,"Классификация",M4UStr,Normal,30,Stext,false,CClassSClass);
    EditFieldTL(h,v+=20 ,80,"Вид классификации",M4UStr,Normal,60,f5,false,CTypeSClass);
  end;
  if (HasDepartments) then begin
    EditFieldTL(h,v+=vs,80,"Департамент",M4UStr,Normal,10,f7,false,DepSClass);
  end;
  if (HasObjects) then begin
  EditFieldTL(h,v+=20, 150,"Oбъект",M4UStr,Normal,20,AccStr,false,ObjSClass);
  end;
  if (IsEnterprise) then begin
    EditFieldTL(h,v+=20, 150,"Cтрана",M4UStr,Normal,100,f9,false,CountrySClass);
  end;
  if (Left(BuildProductCode,5)!="Books") then begin         
  EditFieldTL(h,vm=(v+=vs),80,"Дата создания/изменения",M4Date,Normal,0,d1,false,PasteCurDate);
  end;
  if (IsEnterprise) then begin
  EditFieldTL(h,vm=(v+=vs),80,"Ключ сортировки",M4Str,Normal,20,ObjStr,false,DelRouteSClass);
  end;
  if (IsEnterprise or HasLocalization("POL")) then begin 
  EditFieldTL(h,vm=(v+=vs),80,"Сокр.",M4Str,Normal,10,f4,false,0);
  end;
  if (HasModNL and Left(BuildProductCode,5)!="Books") then begin
    EditFieldTL(h,vm=(v+=vs),80,"Счет",M4Str,Normal,10,f6,false,AccSClass);
  end;
  EditFieldTL(h,vm=(v+=vs),150,"Коммент.",M4Str,Normal,200,f8,false,0); 
  v = v + vs; vm = v;
  if (Left(BuildProductCode,5)!="Books") then begin         
    PeriodField(h,v,"Созданный за период");
  end;
  h=30; v=vm+24;
  if (Left(BuildProductCode,5)!="Books") then begin         
    if (HasModCRM) then begin
      CheckBox(h,v,0,"Включить все контакты",flags[2]); v = v + 16;
      CheckBox(h,v,0,"Проверить контакты ",flags[4]); v = v + 16;
    end;
    CheckBox(h,v,0,"Пропустить контакты с адресами эл. почты",flags[5]); v = v + 16;
    CheckBox(h,v,0,"Только контакты с общими адресами эл. почты",flags[8]); v = v + 16;
    CheckBox(h,v,0,"Пропустить контакты с номерами факса",flags[6]); v = v + 16;
    CheckBox(h,v,0,"Пропустить контакты с мобильными номерами",flags[10]); v = v + 16;
    CheckBox(h,v+=16,0,"Пропустить Контакты без каких-либо Телефон Но.",flags[12]);  
    v = v + 16;
  end;
  if (HasContactClassification) then begin
    CheckBox(h,v,0,"Подсчёт контактов по классификациям",flags[7]);         
  end;
  vm = v;
  if (vm<200) then begin
    SetWRect(20,80,400,450);
    h = 30;
    v = vm + 50;
  end else begin
    h = 340;
    v = 20;
  end;
  ButtonFrame(h,v,155,7,"Сортировть по:");
  RadioButton(h,v,0,0,"коду",flags[1]);
  RadioButton(h,v+=16,1,0,"наименованию",flags[1]);
  if (HasCategories) then begin
  RadioButton(h,v+=16,2,0,"категории",flags[1]);
  end;
  if (IsEnterprise) then begin
    RadioButton(h,v+=16,3,0,"Сорт. по",flags[1]); 
  RadioButton(h,v+=16,4,0,"отделу",flags[1]);
  end;
  RadioButton(h,v+=16,5,0,"телефону",flags[1]);
  RadioButton(h,v+=16,6,0,"Страна",flags[1]);  
  EndFrame;
  ButtonFrame(h,v+=45,155,4,"Функция");
  RadioButton(h,v,0,0,"Подробный",flags[0]);
  RadioButton(h,v+=16,1,0,"Телефон",flags[0]);
  RadioButton(h,v+=16,2,0,"Факс",flags[0]);
  RadioButton(h,v+=16,3,0,"Электронная почта",flags[0]);
  if (vm<200) then begin
    h = 210;
    v = vm + 50;
  end else begin
    v = v + 45;
  end;
  ButtonFrame(h,v,155,3,"Включать:");
  RadioButton(h,v,0,0,"Не закрытые",flags[3]);
  RadioButton(h,v+=16,1,0,"Закрытые",flags[3]);
  RadioButton(h,v+=16,2,0,"Только закрытые",flags[3]);
  if (IsEnterprise) then begin
  ButtonFrame(h,v+=45,155,3,"Включить:"); 
  RadioButton(h,v,0,0,"Только незамороженные",flags[11]); 
  RadioButton(h,v+=16,1,0,"Замороженные и не замороженные",flags[11]); 
  RadioButton(h,v+=16,2,0,"Только замороженные",flags[11]); 
  end;
  testf = true;
  if (IsEnterprise) then begin testf = true; v = v-16; end;
  if (HasModSL and HasModPL) then begin testf = true; end;
  if (HasModSL and HasModPP) then begin testf = true; end;
  if (testf) then begin
    ButtonFrame(h,v+=61,155,6,"Выберите");
    RadioButton(h,v,0,0,"Клиенты",flags[9]);
    if (HasModPL) then begin
      RadioButton(h,v+=16,1,0,"Поставщики",flags[9]);
    end;
    if (HasModPP) then begin
      RadioButton(h,v+=16,2,0,"Гости",flags[9]);
    end;
    if (IsEnterprise) then begin
      RadioButton(h,v+=16,3,0,"Дилеры",flags[9]);
      RadioButton(h,v+=16,5,0,"Сотрудники",flags[9]);
    end;
    RadioButton(h,v+=16,4,0,"Все",flags[9]); 
    EndFrame;
  end;
  return;
end;

global
function string 255 ResDayWClassWindowTitle_RUS()
begin
  string 255 res;
    
  if (ValuePack(11)==false) then begin
    res = "Resource Day Overview: "; //!!TRANSLATE
  end else begin
    res = "Overview Rooms Ledger: "; //!!TRANSLATE
  end;
  ResDayWClassWindowTitle_RUS = res;
  return;
end;

global
function string 255 ResMonWClassWindowTitle_RUS()
begin
  string 255 res;

  if (ValuePack(11)==false) then begin
    res = "Resource Month Overview: "; //!!TRANSLATE
  end else begin
    res = "Month Overview Rooms: "; //!!TRANSLATE
  end;
  if (IsStandardProduct) then begin
    res = "Reservations Manager: "; //!!TRANSLATE
  end;
  ResMonWClassWindowTitle_RUS = res;
  return;
end;

global
function string 255 RTMonWClassWindowTitle_RUS()
begin  
  if (ValuePack(11)==false) then begin
    RTMonWClassWindowTitle_RUS = "Обзор типа ресурса за месяц: ";
  end else begin
    RTMonWClassWindowTitle_RUS = "Month Overview of Room Types: ";
  end;
  
  return;
end;

global
procedure JobRClass_RUS()
begin  
  real h,v;

  SetWRect(20,80,400,150);
  EditFieldTL(h=120,v=6,153,"Номер резервир.",M4Str,Normal,30,f1,false,0); 
  CheckBox(h,v+=30,0,"Детально",flags[0]); 
  EndWindow;
  return;
end;

global
procedure ARS2RClass_RUS()
begin
  real h,v,vm,vs;

  if (IsEnterprise()) then begin 
    SetWRect(20,80,450,450);
  end else begin
    SetWRect(20,80,410,250);
  end;  
  
  vs=20;
  if (IsEnterprise) then begin
    h = 180;
  end else begin
    h = 130;
  end;
  EditFieldTL(h,v=6, 150,"Клиент",   M4UStr,Normal,30,f1,false,CUSClass); 
  if (HasCategories) then begin
  EditFieldTL(h,v+=20,50, "Категория",   M4UStr,Normal,5,f3,false,CCatSClass); 
  end;
  if (HasObjects) then begin
    EditFieldTL(h,v+=20,150, "Объект",   M4UStr,Normal,20,ObjStr,false,ObjSClass); 
  end;
  if (HasContactClassification) then begin
    EditFieldTL(h,v+=20,50, "Классификация",   M4UStr,Normal,30,f4,false,CClassSClass); 
  end;
  if (IsEnterprise()) then begin
    EditFieldTL(h,v+=20,20, "Просроченно дней(не менее)",   M4Int,Normal,5,Comparison,false,0); 
    // EditFieldTL(h,v+=vs ,80,"Мин. оборот",M4Val,Normal,0,vals0,true,0);// this is too slow
    EditFieldTL(h,v+=20,80, "Осн. партнер",   M4UStr,Normal,20,LastAcc,false,CUSClass); 
    EditFieldTL(h,v+=vs ,80,"Мин. баланс",M4Val,Normal,0,vals2,true,0); 
    EditFieldTL(h,v+=vs ,80,"Мин.ко-вo сч/ф",M4Long,Normal,0,long1,true,0); 
    EditFieldTL(h,v+=20,80,"Дата",M4Date,Normal,0,d1,false,PasteCurDate); 
    // CheckBox(20,v+=20,0,"Endast kunder med saldo",flags[1]);
  end;

  ButtonFrame(h=30,vm=(v+=40),123,2,"Сч/ф");  
  RadioButton(h,v,0,0,"Не просроч.",flags[0]); 
  RadioButton(h,v+=16,2,0,"Просроч.",flags[0]); 

  if (HasMultiCurrency or HasBase2) then begin
    ButtonFrame(h,v+=40,123,2,"Суммы"); 
    RadioButton(h,v,0,0,"Осн. валюта",flags[4]); 
    RadioButton(h,v+=16,1,0,"Валюта",flags[4]); 
  end;
  if (IsEnterprise()) then begin
    CheckBox(h,v+=30,0,"Только предоплаты",flags[10]); 
    CheckBox(h,v+=16,0,"Предопл. №",flags[14]); 
    CheckBox(h,v+=16,0,"Show #Instalments#",flags[19]);  
    CheckBox(h,v+=16,0,"Вкл. открытые кредит-ноты",flags[9]); 
  end;
  if (HasOfficialSerNr) then begin
    if (IsEnterprise) then begin 
      v = v + 16;
    end else begin
      v = v + 25;
    end;
    CheckBox(h,v,0,"Офиц. №",flags[15]); 
  end;
    ButtonFrame(h+=195,v=vm,125,3,"Статус");
  RadioButton(h,v,1,0,"Сводный",flags[5]);  
  RadioButton(h,v+=16,2,0,"По клиенту",flags[5]);  
  RadioButton(h,v+=16,0,0,"Подробно",flags[5]);  
  
  if (IsEnterprise()) then begin
    ButtonFrame(h,v+=40,125,3,"Статус");  
    CheckBox(h,v,0,"Не показывать спорные",flags[11]);
    CheckBox(h,v+=16,0,"Не показывать 'без напоминания'",flags[12]);
    CheckBox(h,v+=16,0,"Не показывать 'без сборов'",flags[13]);
  end;
  return;
end;

global
procedure ALLVATRClass_RUS()
begin
  real h,h2,v,vm,vs;

  if (IsEnterprise) then begin
    SetWRect(20,80,520,430);
  end else begin
    SetWRect(20,80,400,250);
  end;
  vs = 30;

  if (IsEnterprise==false) then begin
    PeriodField(h=100,v=6,"Период"); 
    ButtonFrame(h,v+=40,200,3,"Определите"); 
    CheckBox(h,v,0,"Сч/ф кл.",flags[1]); 
    CheckBox(h,v+=16,0,"Сч/ф пост.",flags[3]); 
    CheckBox(h,v+=16,0,"Проводки",flags[4]); 
    EndFrame;
    if (Left(BuildProductCode,5)!="Books" and HasOfficialSerNr) then begin
      CheckBox(h,v+=24,0,"Show Official No.",flags[20]);  
  end;
  end;

  if (IsEnterprise) then begin
    PeriodField(h=150,v=6,"Период"); 
    EditFieldTL(h,v+=20,100,"Номер",M4UStr,Normal,60 ,f1,false,0); 
    EditFieldTL(h,v+=20,100,"Только зарег. с",M4Date,Normal,100,d1,false,0); 
    EditFieldTL(h,v+=20,100,"НДС",M4UStr,Normal,20,f2,false,VATCodeSClass); 
    StaticText(h+110,v+12,"Подроб.",false); 
    ButtonFrame(h=120,v+=40,250,6,"Specify");
    CheckBox(h,vm=v,0,"Sales Invoices",flags[1]);
    CheckBox(h,v+=16,0,"Приход",flags[8]);
    CheckBox(h,v+=16,0,"Receipts",flags[10]);
    CheckBox(h,v+=16,0,"#VAT# Corr. #S/L#",flags[13]);
    CheckBox(h,v+=16,0,"#N/L# Transactions",flags[4]);
    CheckBox(h,v+=16,0,"POS Balances",flags[16]);
    CheckBox(h2=250,v=vm,0,"#Purchase Invoices#",flags[3]);
    CheckBox(h2,v+=16,0,"Расход",flags[9]);
    CheckBox(h2,v+=16,0,"Платежи",flags[11]);
    CheckBox(h2,v+=16,0,"#VAT# Corr. #P/L#",flags[15]);
    CheckBox(h2,v+=16,0,"Затраты",flags[5]);
    EndFrame;
    ButtonFrame(h=120,v+=60,250,2,"Exclude"); //!!TRANSLATE
    CheckBox(h,v,0,"Credit Notes",flags[20]); //!!TRANSLATE
    CheckBox(h,v+=16,0,"Cash Notes",flags[21]); //!!TRANSLATE
    EndFrame;

    CheckBox(h,v+=32,0,"Show totals only (Overview only)",flags[6]);
    CheckBox(h,v+=16,0,"Show Official No.",flags[20]);
    CheckBox(h,v+=16,0,"Show Official Serial No. (#P/L# #S/L# Sorted by Branch)",flags[12]);
  end;

  if (IsEnterprise) then begin
    ButtonFrame(h=30,vm=(v+=40),180,3,"Select"); //!!TRANSLATE
    RadioButton(h,v,0,0,"Все проводки",flags[7]);
    RadioButton(h,v+=16,1,0,"Все проводки без НДС",flags[7]);
    RadioButton(h,v+=16,2,0,"Все проводки с НДС",flags[7]);
    EndFrame;
  end else begin
    ButtonFrame(h,v+=40,200,2,"Выбрать");
    RadioButton(h,v,0,0,"Все проводки",flags[7]);
    RadioButton(h,v+=16,1,0,"Все проводки без НДС",flags[7]);
    EndFrame;
  end;

  if (IsEnterprise()) then begin
    ButtonFrame(h=230,v=vm,123,2,"Функция");
    RadioButton(h,v,0,0,"Сводный",flags[14]);
    RadioButton(h,v+=16,1,0,"Подробный",flags[14]);
    EndFrame;
/* I can't find the code for this
    ButtonFrame(h=120,v+=50,200,3,"Зона НДС");  
    CheckBox(h,v,0,"#Domestic#",flags[10]);  
    CheckBox(h,v+=16,0,"#NL#-#Inside EU#",flags[11]);  
    CheckBox(h,v+=16,0,"#NL#-#Outside EU#",flags[12]);  
    EndFrame;
*/
  end;
  return;
end;
  
global
procedure SysEClass_Tool(Integer cnt,var real v,var real h)
begin
  if (cnt==9) then begin  
    h = 270;
    v = 35;
  end;
  return;
end;

global
procedure GTransEClass_Tool(Integer cnt,var real v,var real h)
begin
  if (cnt==14) then begin  
    h = 180;
    v = 38;
  end;
  if (cnt==28) then begin  
    h = 340;
    v = 38;
  end;
  return;
end;

global
procedure GTrans2EClass_Tool(Integer cnt,var real v,var real vm,var real h)
begin
  if (cnt==11) then begin  
    if (v>vm) then begin vm = v; end;
    h = 180;
    v = 38;
  end;
  if (cnt==22) then begin  
    if (v>vm) then begin vm = v; end;
    h = 340;
    v = 38;
  end;
  return;
end;

global
procedure GBaseEClass_Tool(Integer cnt,var real v,var real h)
begin
  if (cnt==8) then begin  
    h = 200;
    v = 35;
  end;
  if (cnt==16) then begin  
    h = 350;
    v = 35;
  end;
  return;
end;

global
procedure TransGenVClass_Tool(Integer cnt,var real v,var real h)
begin
  if (cnt==14) then begin  
    h = 200;
    v = 18;
  end;
  if (cnt==28) then begin  
    h = 350;
    v = 18;
  end;
  return;
end;

global
function Integer FlipCharCode(Integer langmode,Integer latincode)
begin
  Integer res;
  
  switch (langmode) begin
    case LangArabic:
      switch (chr(latincode)) begin
        case "A": res = 1575;
        case "B": res = 1576;
        case "C": res = 1580;
        case "D": res = 1583;
        case "E": res = 1607;
        case "F": res = 1608;
        case "G": res = 1586;
        case "H": res = 1581;
        case "I": res = 1591;
        case "J": res = 1610;
        otherwise 
          res = latincode;
      end;
    otherwise
      res = latincode;
  end;
  FlipCharCode = res;
  return;
end;

global
function Boolean AcceptanceStatusColumnTest(string filename)
begin
  Boolean res;
  record AcceptanceRulesVc Acptr;

  if (HasApprovals) then begin
    switch (filename) begin
      case "ExpVc": Acptr.Register = kAcceptanceExp;
      case "IntORVc": Acptr.Register = kAcceptanceIntOR;
      case "IVVc": Acptr.Register = kAcceptanceIV;
      case "LeaveApplicationVc": Acptr.Register = kAcceptanceLeaveApplication;
      case "LeaveTransferVc": Acptr.Register = kAcceptanceLeaveTransfer;
      case "OPVc": Acptr.Register = kAcceptanceOP;
      case "ORVc": Acptr.Register = kAcceptanceOR;
      case "POVc": Acptr.Register = kAcceptancePO;
      case "PUVc": Acptr.Register = kAcceptancePU;
      case "QTVc": Acptr.Register = kAcceptanceQT;
      case "SDVc": Acptr.Register = kAcceptanceSD;
      case "StockTakeVc": Acptr.Register = kAcceptanceStockTake;
      case "TBBUVc": Acptr.Register = kAcceptanceTBBU;
      case "VIVc": Acptr.Register = kAcceptanceVI;
      case "HMTravelLogVc": Acptr.Register = kAcceptanceTLog; 
    end;
    res = ReadFirstMain(Acptr,1,true);
  end;
  AcceptanceStatusColumnTest = res;
  return;
end;
