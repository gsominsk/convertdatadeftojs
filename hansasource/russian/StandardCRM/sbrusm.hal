// This file is for Standard CRM by HansaWorld
/* This is no longer an Event, make sure you don't have this in */
//event startup

external function Boolean HasDeveloperMode();
external function Boolean HasCategories();
external function Boolean HasPersons();
external function Boolean HasFormEditor();
external function Boolean HasItemGroups();
external function Boolean HasModQT();
external function Boolean HasSerialNumbers();
external function Boolean HasModAT2();
external function Boolean HasModCL();
external function Boolean HasStandardCRM();
external function Boolean HasModExp();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();
external function Boolean HasModSO();
external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModSL();
external function Boolean HasModPL();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModRest();
external function Boolean HasModCRM();
external function Boolean HasPayroll();
external function Boolean HasEMail();

external function Boolean HasAdvancedPricing();
external function Boolean HasBase2();
external function Boolean HasContactClassification();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLocalMachines();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNumberSeries();
external function Boolean HasOfficialSerNr();
external function Boolean HasObjects();
external function Boolean HasPriceLists();
external function Boolean HasSkypeConnection();
external function Boolean HasVarieties();
external function Boolean HasWorkflowOverview();
external function Boolean HasCustomerStatusReport();
external function Boolean HasAccessGroups();
external function Boolean HasIncomeAndExpenseBook();
external function Boolean HasIntegratedNL();
external function Boolean HasRegistersExports();
external function Boolean HasServerInCloud();
external function Boolean HasFiscalPrinter();
external function Boolean HasInvoiceOfficialSerNr();
external function Boolean HasCustomerLetter();
external procedure SetProductTags();
external procedure LoadWindowTags();

begin
  Real h,v,l,vs;
  SetLangMode(LangRussian,"RUS",0);


  if (BuildProductCode=="StandardCRM") then begin
  
  SetProductTags;
  LoadWindowTags;
  
/* The modules should keep there codes even if we rename the modules. The code is part of the Export format */
  Module("CRM","",730,modCRM);
  
  if (HasEMail) then begin
    Module("Электронная почта","",730,modEmail);
  end;
  if (HasModQT) then begin
    Module("Счета клиентам","",730,modQT);
  end;
  Module("Система","",730,modSY); 
  
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modCRM); 
  RegisterWS("Задачи","Задачи","Новая задача",ActVc,modCRM); 
//  Register("Campaigns","Campaigns",CampaignVc,modCRM);
  if (HasCustomerLetter) then begin  
    RegisterWS("Письма клиентам","Письма клиентам","Новое письмо клиенту",LetVc,modCRM); 
  end;
  RegisterWS("Наводки","Наводки","Новая наводка",CULeadLClass,modCRM); 
  RegisterWS("Перспективы","Перспективы","Новая перспектива",OYVc,modCRM); 
//  if (HasModQT) then begin
//   Register("Предожения","Предложения",QTVc,modCRM);
//   Register("Товары","Товары",INVc,modCRM);
//  end;
  Report("Деятельности, Контакты",ActCURClass,ActCURn,0,modCRM);
  Report("История звонков",CallHistRClass,CallHistRn,0,modCRM);
  Report("Деятельности, Сотрудники",ActPersRClass,ActPersRn,0,modCRM);
  Report("Список дней рождений",BirthDayRClass,BirthDayRn,0,modCRM);
  Report("Список контактов",CURClass,CustRn,0,modCRM);
  if (HasCustomerStatusReport) then begin
  Report("Справка по клиенту",CustPSRClass,CustPSRn,0,modCRM);
  end;
  if (HasModQT) then begin
    Report("Список товаров",ArtRClass,ArtRn,0,modCRM);
  end;
  if (HasModQT) then begin
    Report("Просроченные коммерческие предложения",QTStkRClass,QTStkRn,0,modCRM);
  end;
  Report("Список сотрудников",UserRClass,UserRn,0,modCRM);
  Report("Личный календарь",ActCalRClass,ActCalRn,0,modCRM);
  if (HasModQT) then begin
    Report("Воронка продаж",QTPipelineRClass,QTPipelineRn,0,modCRM);
    Report("Журнал коммерческих предложений",QTJRClass,QTJRn,0,modCRM);
  end;
  Report("Поиск контактного лица",SearchContactRClass,SearchContactRn,0,modCRM);

  Document("Деятельности",ActDocRClass,ActDocForm,ActDocFClass,modCRM);
  Document("Этикетки контактных лиц",CoLabRClass,CoLabForm,CoLabFClass,modCRM);
  if (HasModQT) then begin
    Document("Счета клиентам",QTRClass,QTForm,QTFClass,modCRM);
  end;
  Setting("Классы деятельностей",ActTypeGrLClass,modCRM);
  Setting("Виды деятельностей",ActTypeLClass,modCRM);
//  Setting("Campaign Statuses",CampaignStatusLClass,modCRM);
  if (HasWorkflowOverview) then begin
    Setting("Обзор рабочих процессов",PipelineOverviewTClass,modCRM); 
  end;
  if (LicenseMode==kLicenseModeServer) then begin
    Setting("Конфигурация пользователей",ConfigureUsersTClass,modCRM);
  end;
  Setting("Связи с контактами",ContactRelLClass,modCRM);
  if (HasCategories) then begin
    Setting("Категории клиентов",CCatLClass,modCRM);
  end;
   if (HasModQT) then begin
     Setting("Связи с контактами",ContactRelLClass,modCRM);
  end;
  if (HasFormEditor) then begin
    Setting("Формы",DocLClass,modCRM);
  end;
  Setting("Индустрия",IndustryLClass,modCRM); 
  if (HasCustomerStatusReport) then begin
  Setting("Информация в отчете Справка по клиенту",CustPSLClass,modCRM);
  end;
/*  
  if (UseAppStoreEnabler==false) then begin
    Setting("Интернет Ключ",InternetEnablerTClass,modCRM);
  end;
*/  
  if (HasItemClassification) then begin
    Setting("Классификация товара",DILClass,modCRM); 
  end;
  if (HasItemGroups or HasLocalization("PRT,ITA")) then begin
    Setting("Группы товаров",ITLClass,modCRM);
  end;
  Setting("Источник лида",LeadSourceLClass,modCRM); 
  Setting("Статус лида",LeadStatusLClass,modCRM); 
  if (HasNumberSeries) then begin
    if (HasCustomerLetter) then begin
      Setting("Серийные номера - Письма клиентам",LetSerTClass,modCRM); 
    end;
    Setting("Серийные номера - Перспективы",OYSerTClass,modCRM); 
  end;
  if (ClientMode) then begin
    Setting("Личное",UserLClass,modCRM);
  end;
//  Setting("Program Mode",ProgramStatusTClass,modCRM);//cloud hosting
  if (HasModQT) then begin
    Setting("Виды предложений",QuoteClassTClass,modCRM);
  end;
  if (HasFormEditor) then begin
    Setting("Стили",StyleLClass,modCRM);
  end;
  if (HasModQT) then begin
    if (HasLocalization("BRA,KEN")) then begin
      Setting("Налоговые шаблоны",TaxTemplateLClass,modCRM);
    end;  
  end;
  Setting("Виды текста",TextTypeLClass,modCRM);
  if (HasWorkflowOverview) then begin
    Setting("Рабочие процессы пользователя",UserPipelineOverviewLClass,modCRM); 
  end;
/*  
  if (HasLocalization("BRA")) then begin
    Setting("User Defined Fields - Contacts",CUUserLabelTClass,modCRM);
  end;
*/  
  if (HasModQT) then begin
    Setting("Коды НДС",VATCodeTClass,modCRM);
  end;

  Export("Деятельности",ExpActEClass,ExpActEn,modCRM);
//  Export("Текстовая копия клиента",TBEClass,ClientTBEn,modCRM);
//  Export("Company Text Backup",TBEClass,CompanyTBEn,modCRM);
  if (GuiType!=kGuiiPhone) then begin
  	Export("Текстовая копия базы данных",TBEClass,DatabaseTBEn,modCRM);
  end;
  //Export("Remote Backup",TBRemoteEClass,RemoteTBEn,modCRM);
  //Export("Contacts",BPCUEClass,BPCUEn,modCRM);//for Business Phone, why in this module?? We have the Integration module, it should probably be there
//  Export("Raw Data",TBEClass,RawDataEn,modCRM);
//  Export("Run Timed Backup",TBEClass,RunTimedTBEn,modCRM);

  
//  Maintenance("Перестроить регистр распознавания номеров",NormPhoneNumVClass,NormPhoneNumMn,modCRM);
//  Maintenance("Restore Application",ResetDBWClass,0,modCRM);
  
/* modQT */
  RegisterWS("Коммерческие предложения","Коммерческие предложения","Новое комм. предложение",QTVc,modQT); 
  if (HasModCRM) then begin
    RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modQT); 
  end;
  RegisterWS("Товары","Товары","Новый товар",INVc,modQT); 
  if (HasPriceLists) then begin
    RegisterWS("Цены","Цены","Новая цена",PLVc,modQT); 
  end;
  //Register("Pre Quotations","Pre Quotations",PreQTVc,modQT); no funcionality for this one
  if (HasNumberSeries) then begin
    Setting("Серии номеров - предложения",QTSerTClass,modQT);
  end;
  if (HasPriceLists) then begin
    Setting("Прайс-лист",PLDefLClass,modQT); 
  end;
  Setting("Виды предложений",QuoteClassTClass,modQT);
  Setting("Настройки предложений",QTSettTClass,modQT);

  Document("Предложения",QTRClass,QTForm,QTFClass,modQT);
  if (HasPriceLists) then begin
    Report("Прайс-лист",PriceRClass,PriceRn,0,modQT); 
  end;
  if (HasLocalization("PRT")) then begin
    Document("Proforma Invoice, Quotations",ProformaQTRClass,ProformaQTForm,ProformaQTFClass,modQT);
  end;
  
  if (HasLocalization("PRT")) then begin
    Report("Proforma Invoice Journal",ProformaIVJRClass,ProformaIVJRn,0,modQT);
  end;
  Report("Журнал подтвержденных предложений",QTHistoryRClass,QTHstRn,0,modQT);
  Report("Список предложений",QTStkRClass,QTStkRn,0,modQT);
  Report("Воронка предложений",QTPipelineRClass,QTPipelineRn,0,modQT);
  Report("Журнал предложений",QTJRClass,QTJRn,0,modQT);
  
/* modEmail */

  Register("Очередь электронной почты","Очередь электронной почты",EMailQueVc,modEmail);
  RegisterWS("Почтовые ящики","Почтовые ящики","Новый почтовый ящик",ConferenceWClass,modEmail); 

  Setting("E-mail SMTP Серевер",EmailTClass,modEmail);

/* modSY */

  if (HasDeveloperMode) then begin
    Setting("Облачные сервисы",EnabServerTClass,modSY);
    Setting("Конфигурация",ModulesTClass,modSY);
    Setting("Текущие лицензии",CurLicensesClass,modSY);
    Setting("Кэш URL (Эл. обучение)",UniversityURLCacheLClass,modSY);
    Setting("Интернет-ключи",InternetEnablerTClass,modSY);
    Setting("Лицензии",LicensesLClass,modSY);
    RegisterWS("Почтовые ящики","Почтовые ящики","Новый почтовый ящик",ConferenceWClass,modSY);
    Setting("Мой IP-адрес",MyIPAddrTClass,modSY);
    Setting("Режим работы программы",ProgramStatusTClass,modSY);
    Setting("Кэш сервисов",ServiceCacheLClass,modSY);
    Setting("Регистрационные данные",StdRegDataWClass,modSY);
    Setting("Нумерация официальных документов",OffSerNrLClass,modSY);
    Setting("Дополнения системы",UserFeaturePrefTClass,modSY);    
    Setting("Опции входа",LocalLoginOptionsTClass,modSY);
    Setting("Интернет-ключи (старый блок)",InternetEnabOldTClass,modSY);
    Setting("Тип стандарт-сервера",StandardServerTClass,modSY);
  end;  

  if ((ClientMode and LicenseMode==kLicenseModeServer) or HasPersons or HasDeveloperMode) then begin
    RegisterWS("Сотрудники","Сотрудники","Новый сотрудник",UserVc,modSY);
  end else begin
    RegisterWS("Сотрудники","Сотрудники","",UserVc,modSY); 
  end;

  if (HasMultiCurrency or HasBase2) then begin
    RegisterWS("Валюты","Валюты","Новая валюта",CurncyCodeVc,modSY);  
  end;
  if (HasMultiCurrency) then begin
    RegisterWS("Обменный курс","Обменный курс","Новый Обменный курс",ERVc,modSY); 
  end;
  if (HasFormEditor) then begin
    if (GuiType!=kGuiiPhone) then begin
      RegisterWS("Формы","Формы","Новая форма",DocVc,modSY); 
    end;
    RegisterWS("Стили","Стили","Новый стиль",StyleVc,modSY); 
  end;
  if (HasModSL==false) then begin
    if (HasModNL or HasIncomeAndExpenseBook) then begin
      RegisterWS("Счета","Счета","Новый счет",AccVc,modSY); 
    end;
  end;

  if (HasAccessGroups) then begin
    Setting("Группы доступа",AccessLClass,modSY);
  end;
  if (LicenseMode==kLicenseModeServer or ClientMode) then begin
    Setting("Активные пользователи",ListUsersClass,modSY);
  end;
//  if (HasBase2 or (HasEInvoicing and HasLocalization("NOR,SWE"))) then begin
  if (HasBase2) then begin
    Setting("Базовая валюта",BaseCurTClass,modSY); 
  end;
  if (HasBase2) then begin
    Setting("Курс базовой валюты",BaseERLClass,modSY); 
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Brazilian Invoice Types",BrazilEInvTypeLClass,modSY); 
  end;
  Setting("Компании",CompaniesTClass,modSY); 
  if (HasStandardCRM or HasStandardCommunicator or HasStandardOrganizer) then begin
    Setting("Формат даты и чисел в компании",SysFormatTClass,modSY);
  end;
  Setting("Информация о компании",CYWClass,modSY);
  if (HasContactClassification and HasModSL==false) then begin
    Setting("Классификация контактов",CClassLClass,modSY); 
  end;
  if (HasMultiCurrency or HasBase2) and (HasIntegratedNL) then begin
    Setting("Conversions - Master",ConvMasterTClass,modSY); 
    Setting("Conversions - Accounts and #VAT Code#",ConvAccTClass,modSY); 
    Setting("Conversions - Contacts",ConvCustTClass,modSY); 
    Setting("Conversions - Currency Codes",ConvCurncyCodeTClass,modSY); 
    Setting("Conversions - Items",ConvItemTClass,modSY); 
    Setting("Conversions - Users",ConvUserTClass,modSY); 
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Districts",DistrictLClass,modSY); 
  end;
  if (IsUsingActivationCodes) then begin
    Setting("Интернет-ключи",InternetEnablerTClass,modSY);
  end;
  if (HasModSL==false) then begin
    if (HasModNL or HasIncomeAndExpenseBook) then begin
      Setting("Использов. счета",AccTClass,modSY); 
    end else begin
      Setting("Настройки сч.ф.",AccTClass,modSY); 
    end;
  end;
  if (HasModSL==false and HasLocalization("PRT")) then begin
    Setting("Группы товара",ITLClass,modSY); 
  end;
  if (HasLocalMachines or HasFiscalPrinter) then begin
    Setting("Локальная Машина",LocalMachineTClass,modSY);
  end;
  if (HasFiscalPrinter) then begin
    Setting("Локальные машины",LocalMachineLClass,modSY); 
    Setting("Локальные устройство посл.порта",LSerialPortDeviceLClass,modSY); 
    Setting("Устройство посл.порта локалтной машины",SerialPortDeviceLClass,modSY); 
  end;
  if (HasKPIs) then begin
    Setting("КПЭ",KPIDefLClass,modSY); 
  end;
  if (HasLanguages) then begin
    Setting("Языки",LangTClass,modSY);  
  end;
  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Setting("Блокировка",DBLockTClass,modSY); 
  end;
  if (HasFiscalPrinter and HasLocalization("SVN")) then begin
    Setting("Основное помещение",CYAWClass,modSY); 
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Муниципалитеты",MunicipalityLClass,modSY); 
  end;
  if (HasLocalization("FIN")) then begin
    Setting("Дополнительные возможности",UXFTClass,modSY); 
  end;
  if (HasObjects and (HasModNL==false and HasIncomeAndExpenseBook==false)) then begin
    Setting("Метки/Объекты",ObjLClass,modSY); 
    Setting("Метки/Объекты Тип",OTLClass,modSY); 
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Operation Types",OperationTypeLClass,modSY); 
  end;
  if (HasPriceLists) then begin
    Setting("Прайс-лист",PLDefLClass,modSY); 
    Setting("Цены",PLLClass,modSY); 
  end;

  Setting("Отчётные периоды",PeriodTClass,modSY);
  Setting("Округление",RoundTClass,modSY); 
  Setting("Единицы",UnitLClass,modSY);
  if (HasLanguages) then begin
    Setting("В тексте",LangNrLClass,modSY); 
  end;
  if (HasModNL==false and HasIncomeAndExpenseBook==false) then begin
    Setting("#НДС# Код",VATCodeTClass,modSY);  
  end;
  if ((HasNumberSeries or HasLocalization("LVA")) and (HasOfficialSerNr or HasInvoiceOfficialSerNr)) or (HasFiscalPrinter and HasLocalization("SVN")) then begin
    Setting("Юридические номера счетов",LegalInvNrTClass,modSY); 
  end;  
  if (HasLocalization("HRV,SVN,SRB")) then begin
    Setting("XML установка схемы",XMLExportLClass,modSY); 
  end;
  
  Report("Информация о компании",CompInfoRClass,CompInfoRn,0,modSY);
  if (HasModSL==false) then begin
    Report("Список контактов",CURClass,CustRn,0,modSY); 
    if (HasMultiCurrency or HasBase2) then begin
      Report("Курс валют",ERDateRClass,ERDateRn,0,modSY); 
    end;
    if (HasLocalization("RUS")) then begin
      Report("Журнал заказов",ORJRClass,OrdRn,0,modSY); 
    end else begin
      if (HasModSL) then begin
      Report("Журнал счет-фактур",IVJRClass,InvoiceRn,0,modSY); 
      end;
    end;
    Report("Список товаров",ArtRClass,ArtRn,0,modSY); 
    if (HasLocalization("LTU")) then begin
      Report("Отчет #НДС# Продаж",SLVATLitRClass,SLVATLitRn,0,modSY);   
    end;
  end else begin
    if (HasMultiCurrency or HasBase2) then begin
      Report("Курс валют",ERDateRClass,ERDateRn,0,modSY); 
    end;
  end;

  if (HasRegistersExports) then begin
    Export("Базовые регистры",GBaseEClass,GBaseEn,modSY); 
  end;
  if (GuiType!=kGuiiPhone) then begin
    Export("Текстовая копия базы данных",TBDatabaseEClass,DatabaseTBEn,modSY); 
  end;
  if (HasRegistersExports) then begin
    Export("Регистр базы товаров",GItemBaseEClass,GItemBaseEn,modSY); 
  end;
  if (HasLocalization("HRV")) then begin
    Export("Экспорт регистра",ExpRegEClass,ExpRegEn,modSY); 
  end;  
  if (GuiType!=kGuiiPhone) then begin
    Export("Запустить запл. резерв.копию",TBRunTimedEClass,RunTimedTBEn,modSY); 
  end;
  if (HasRegistersExports) then begin
    Export("Дата системы",SysEClass,SysEn,modSY); 
  end;
  if (HasModSL==false) then begin
    if (HasLocalization("PRT")) then begin
      Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modSY); 
    end;    
    if (HasLocalization("LTU")) then begin
      Export("#S/L# #VAT# Invoices (Lithuania)",LitVATRegIVEClass,LitVATRegIVEn,modSY); //!!TRANSLATE
    end;
  end;
  if (HasRegistersExports) then begin
    Export("Регистр транзакций",GTransEClass,GTransEn,modSY); 
    Export("Регистры транзакций (период)",GTrans2EClass,GTrans2En,modSY);   
  end;
  
  Import("Автоматический",0,FullyAutIn,modSY);
  Import("Выбрать файл",0,AutIn,modSY); 
  Import("Удалённая копия БД",RemoteInIClass,RemoteIn,modSY);

  if (HasIntegratedNL) then begin
    Maintenance("Создать транзакции #N/L#",TransGenVClass,GenTransMn,modSY); 
  end;
  if (HasLocalization("HRV")) then begin
    Maintenance("Счет-фактуры без официального номера",XMLExportVClass,XMLExportMn,modSY); 
  end;
  if (HasLocalization("POL")) then begin
    Maintenance("Заполнить номера сч.ф.",FillinIVNrVClass,FillinIVNrMn,modSY); 
    Maintenance("Заполнить номера счетов",FillinIPNrVClass,FillinIPNrMn,modSY); 
  end;
  if (ClientMode and HasServerInCloud) then begin  
    Maintenance("Загрузить файл логотипа",UploadLogoFileVClass,UploadLogoFileMn,modSY);   
  end;


  end;
  return;
end;
