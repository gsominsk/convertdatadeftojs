/* pypengm.hal */
/* This is no longer an Event, make sure you don't have this in */
external function Boolean HasDeveloperMode();
external function Boolean HasPersons();
external function Boolean HasModQT();
external function Boolean HasSerialNumbers();
external function Boolean HasModAT2();
external function Boolean HasModCL();
external function Boolean HasModCO();
external function Boolean HasStandardCRM();
external function Boolean HasModExp();
external function Boolean HasSalesmanBonus();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();
external function Boolean HasModSO();
external function Boolean HasModIN();
external function Boolean HasModINTSTOCK();
external function Boolean HasModNL();
external function Boolean HasModSL();
external function Boolean HasModPL();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModRest();
external function Boolean HasModCRM();
external function Boolean HasEMail();
external function Boolean HasModSVO();
external function Boolean HasModPP();
external function Boolean HasModProd();
external function Boolean HasModTS();

external function Boolean HasAccessGroups();
external function Boolean HasAccountRecon();
external function Boolean HasAdvancedPricing();
external function Boolean HasBase2();
external function Boolean HasCategories();
external function Boolean HasContactClassification();
external function Boolean HasFormEditor();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLocalMachines();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNLBudget();
external function Boolean HasNumberSeries();
external function Boolean HasObjects();
external function Boolean HasPriceLists();
external function Boolean HasReturnedGoods();
external function Boolean HasRetGoodsToSupp();
external function Boolean HasSimulations();
external function Boolean HasVarieties();
external procedure SetProductTags();
external procedure LoadWindowTags();

//event startup
begin
  string 255 country;
  record CYBlock CYb;
  
  SetLangMode(LangRussian,"RUS",0);

  SetGlobalBoolean("IsEnterprise",false);

  if (BuildProductCode=="PAYYAPERP") then begin

  SetProductTags;
  LoadWindowTags;

  SetWhiteLabelProduct(true);

  BlockLoad(CYb);

/* The modules should keep there codes even if we rename the modules. The code is part of the Export format */
  if (HasModAT2) then begin
    Module("Assets","",730,modAT2);
  end;
  if (HasModCL) then begin
    Module("Cash Book","",730,modCL);
  end;
  if (HasModCRM or HasCalendar) then begin
    Module("Calendar","",730,modCAL);
  end;
  if (HasModCO) then begin
    Module("Contracts","",730,modCO);
  end;
  if (HasModCRM or HasStandardCRM) then begin
    Module("CRM","",730,modCRM);
  end;
   Module("Database Maintenance","",730,modDBMain);  
 
  if (HasEMail) then begin
    Module("Email","",730,modEmail);
  end;
  if (HasModExp) then begin
    Module("Expenses","",730,modExp);
  end;
  Module("Integration","",730,modInteg);
  if (HasModIntStock) then begin
    Module("Internal #Stock#","",730,modIntStock);
  end;
  if (HasModNL) then begin
    Module("#Nominal Ledger#","",730,modNL);
  end;
  if (HasModPOS) then begin
    Module("Point of Sales","",730,modPOS);  
    Module("POS Offline","",730,modPOSOffLine);
  end;
  if (HasAdvancedPricing) then begin
    Module("Pricing","",730,modDI);
  end;
  if (HasModProd) then begin
    Module("Production","",730,modProd);
  end;
  if (HasModTS) then begin
    Module("Projects","",730,modTS);
  end;
  if (HasModPL) then begin
    Module("#Purchase Ledger#","",730,modPL);
  end;
  if (HasModPO) then begin
    Module("Purchase Orders","",730,modPO);
  end;
  if (HasModQT) then begin
    Module("Quotations","",730,modQT);
  end;
//  Module("","",730,modRepGen);
  if (HasModPP) then begin
    Module("Resource Planning","",730,modPP);
  end;
  if (HasModRest) then begin
    Module("#Restaurant#","",730,modRest);
  end;
  if (HasModSL) then begin
    Module("#Sales Ledger#","",730,modSL);
  end;
  if (HasModSO) then begin
    Module("Sales Orders","",730,modSO);
  end;
  if (HasModSVO) then begin
    Module("Service Orders","",730,modSVO);
  end;
  if (HasModIN) then begin
    Module("#Stock#","",730,modIN);
  end;
  Module("System","",730,modSY);
  if (HasModCRM) then begin
  Module("Task Manager","",730,modTASK);
  end;
  Module("Technics","",730,modTC);
  Module("User Settings","",730,modUserSet);
//  Module("","",730,modWebShop);
//  Module("","",730,modWebShopNG);


/* modSY */

  Register("Companies","Companies",CompaniesTClass,modSY);
  RegisterWS("Persons","Persons","New Person",UserVc,modSY);
  RegisterWS("Accounts","Accounts","New Account",AccVc,modSY);
  RegisterWS("Objects","Objects","New Object",ObjVc,modSY);
  RegisterWS("Currencies","Currencies","New Currency",CurncyCodeVc,modSY);
  RegisterWS("Exchange Rates","Exchange Rates","New Exchange Rate",ERVc,modSY);
//  if (GuiType!=kGuiiPhone) then begin
    RegisterWS("Form Templates","Form Templates","New Form Template",DocVc,modSY);
//  end;
  RegisterWS("Activities","Activities","New Activity",ActVc,modSY);

  Setting("Access Groups",AccessLClass,modSY);
  Setting("Active Users",ListUsersClass,modSY);
  Setting("Auto Actions",AutoActionTClass,modSY);
  Setting("Backup Settings",BackupSettingsTClass,modSY);
  Setting("#Bank Holidays#",BHollLClass,modSY);
  Setting("Base Currency",BaseCurTClass,modSY);
  Setting("Base Currency Rates",BaseERLClass,modSY);
  if (HasLocalization("BRA")) then begin
    Setting("Brazilian Invoice Types",BrazilEInvTypeLClass,modSY);
  end;
  if (HasLocalization("EST,LVA")) then begin
    Setting("Cloud Service Access Control",ISAccessTClass,modSY);
  end;
  Setting("Cloud Services",EnabServerTClass,modSY);
  Setting("Cloud Services Settings",EInvoiceTClass,modSY);
  Setting("Company Date and Numeric Format",SysFormatTClass,modSY);
  Setting("Company Info",CYWClass,modSY);
  Setting("Company Timezone",CompanyTimezoneTClass,modSY);
  if (HasDeveloperMode) then begin
    Setting("Aut. Sales Actions",AutSalesActionLClass,modSY); //!!TRANSLATE
  Setting("Configuration",ModulesTClass,modSY);
    Setting("Internet Enablers",InternetEnablerTClass,modSY);
    Setting("Current License Flags",CurLicensesClass,modSY); //!!TRANSLATE
    Setting("Licenses",LicensesLClass,modSY); //!!TRANSLATE
    Setting("Std Registration Data",StdRegDataWClass,modSY); //!!TRANSLATE
    Setting("Services Cache",ServiceCacheLClass,modSY); //!!TRANSLATE
    Setting("User Feature Pref",UserFeaturePrefTClass,modSY);     //!!TRANSLATE
  end;
//  Setting("Configurations (NEW)",CUServiceEnabLClass,modSY);
//  Setting("Conversions - Accounts and #VAT# Codes",ConvAccVATCodeTClass,modSY);
  Setting("Conversions - Accounts and #VAT Code#",ConvAccTClass,modSY);
  Setting("Conversions - Activity Types",ConvActTypeTClass,modSY);
  Setting("Conversions - Contact Classifications",ConvCustClassTClass,modSY);
  Setting("Conversions - Contacts",ConvCustTClass,modSY);
  Setting("Conversions - Currency Codes",ConvCurncyCodeTClass,modSY);
  Setting("Conversions - Items",ConvItemTClass,modSY);
  Setting("Conversions - Locations",ConvLocationTClass,modSY);
  Setting("Conversions - Master",ConvMasterTClass,modSY);
  Setting("Conversions - Objects",ConvObjTClass,modSY);
  Setting("Conversions - Quotation Classes",ConvQuoteClassTClass,modSY);
  Setting("Conversions - #Suppliers#",ConvVendTClass,modSY);
  Setting("Conversions - Users",ConvUserTClass,modSY);
  Setting("Countries",CountryLClass,modSY);
  Setting("Countries Regions",CountryRegionLClass,modSY);
  Setting("Currency Round Off",CurncyRoundOffTClass,modSY);
  Setting("Days and Months",DNMLClass,modSY);
  Setting("Default Values Decimals (old)",DefValDecimalsTClass,modSY);
  Setting("Departments",DepLClass,modSY);
  Setting("Discount Options",GeneralOptionTClass,modSY);
  Setting("Display Groups",CalDispGroupTClass,modSY);
  if (HasLocalization("BRA,ITA")) then begin
    Setting("Districts",DistrictLClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin  
    Setting("Federal Services",FederalSerLClass,modSY);
  end;
  if (HasLocalization("EST")) then begin
    Setting("Electronic Invoices Queries Intervals",EInvQueryIntrvlTClass,modSY);
  end;
  Setting("Exchange Rates Settings",ERTClass,modSY);
  Setting("Form Settings",FormTClass,modSY);
  Setting("Global Warnings on UnOKed Records",UnOkWarnTClass,modSY);
  if (!WindowsMode) then begin
    Setting("Job Status",JobStatusClass,modSY);
  end;
  Setting("Journaling",JournalClass,modSY);
  Setting("KPIs",KPIDefLClass,modSY);
  Setting("Languages",LangTClass,modSY);
  Setting("Locking",DBLockTClass,modSY);
  Setting("Locking Exceptions",LockExceptTClass,modSY);
  if (HasLocalization("SVN")) then begin
    Setting("Main Premise",CYAWClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Municipalities",MunicipalityLClass,modSY);
  end;
  Setting("Number Series Defaults",SRTClass,modSY);
  Setting("Opened Windows History",OpenWindowsHistoryOClass,modSY);
  if (HasLocalization("BRA")) then begin
    Setting("Operation Types",OperationTypeLClass,modSY);
  end;
  Setting("Optional Features",UXFTClass,modSY);
  Setting("Page Setup",PageSetupTClass,modSY);
  Setting("Password Security",PasswdSetTClass,modSY);
  Setting("Persons' Costs",CostUserLClass,modSY);
  Setting("Printer Settings",PrinterSettingsWClass,modSY);
  Setting("Printers",PrintGroupTClass,modSY);
  Setting("Reporting Periods",PeriodTClass,modSY);
  Setting("Round Off",RoundTClass,modSY);
  Setting("Sales Groups",SalesGroupLClass,modSY);
  Setting("Single Functions",OneFunctionLClass,modSY);
  Setting("Special Days",SpecDayLClass,modSY);
  Setting("Styles",StyleLClass,modSY);
  Setting("Sub-ledger Control Accounts",SLAccTClass,modSY);
  Setting("Task Manager Access",TodoAccessLClass,modSY);
  Setting("User Warnings on UnOKed Records",UserUnOkWarnLClass,modSY);
  Setting("Values in Text",LangNrLClass,modSY);
  Setting("#VAT Reg. Number# Masks",VATMaskTClass,modSY);
  Setting("Weeks",WeekLClass,modSY);
//  Setting("Communicate With " & ProductName,HWCommTClass,modSY);
//  Setting("Conversions - Conference Addresses",ConvConfAddrTClass,modSY); no code using it
//  Setting("System Usage",ModulesTClass,modSY); // Is no more... Look at the Configuration Window. Tell this to EVERYONE!!!
  if (HasLocalization("HRV,SVN,SRB")) then begin
    Setting("XML Schema Definitions",XMLExportLClass,modSY);
  end;
  //Setting("ZIP Codes",ZIPLClass,modSY);
//  Setting("BI",BIWClass,modSY);
//  Setting("CEO Dashboard",DashboardWClass,modSY);

  Report("Access Control",UserAccessRClass,UserAccessRn,0,modSY);
  Report("Activities, Persons",ActPersRClass,ActPersRn,0,modSY);
  Report("Company Info",CompInfoRClass,CompInfoRn,0,modSY);
  Report("Electronic Invoices Setup Status",EInvSetupStatusRClass,EInvSetupStatusRn,0,modSY);
  Report("Exchange Rates",ERDateRClass,ERDateRn,0,modSY);
  Report("Job Status",JobStatusRClass,JobStatusRn,0,modSY);
  Report("Numbers per Machine",NrsperMachineRClass,NrsperMachineRn,0,modSY);
  Report("Person List",UserRClass,UserRn,0,modSY);
  Report("Services Test",ServicesTestRClass,ServicesTestRn,0,modSY);
  Report("Subsystems Checking",Check1TRRClass,Check1TRRn,0,modSY);
  Report("Sync Check",SyncCheckRClass,SyncCheckRn,0,modSY);
  Report("Sync Status",SyncStatusRClass,SyncStatusRn,0,modSY);
  Report("Sync Client Status",SyncClientStatusRClass,SyncClientStatusRn,0,modSY);
  Report("System Documentation",SysRClass,SysRn,0,modSY);
  Report("Transaction Checking",Check2TRRClass,Check2TRRn,0,modSY);
  Report("User Activities",UserActRClass,UserActRn,0,modSY);
  Report("User Login History",UserHistRClass,UserHistRn,0,modSY);
//  Report("Mail List",MailListRClass,MailListRn,0,modSY);
/* Why?? it is the Object Result report, why should it be in System ?? */
//  Report("Object List",ObjResRClass,ObjResRn,0,modSY);
/* Doesn't do much */
//  Report("Settingscontrol",SettingsRClass,SettingsRn,0,modSY);

  Document("Mail",MailRClass,MailForm,MailFClass,modSY);

  Export("Client Text Backup",TBEClass,ClientTBEn,modSY);
  Export("Company Text Backup",TBCompanyEClass,CompanyTBEn,modSY);
  Export("Database Text Backup",TBDatabaseEClass,DatabaseTBEn,modSY);
  Export("Raw Data",TBRawDataEClass,RawDataEn,modSY);
  Export("Run Timed Backup",TBRunTimedEClass,RunTimedTBEn,modSY);

  Import("Automatic",FullyAutIn,FullyAutIn,modSY);// if we put it like that we will be able to make access systme working
  Import("Manual file search",AutIn,AutIn,modSY);// if we put it like that we will be able to make access systme working

  Maintenance("Create #N/L# Transactions",TransGenVClass,GenTransMn,modSY);
  Maintenance("Delete Old Transactions",DelTransVClass,DelTransMn,modSY);
  if (HasLocalization("HRV")) then begin
    Maintenance("Invoices without Official No.",XMLExportVClass,XMLExportMn,modSY);
  end;

/* modNL */
  
  RegisterWS("Transactions","Transactions","New Transaction",TRVc,modNL);
  if (HasSimulations) then begin
    RegisterWS("Simulations","Simulations","New Simulation",SMVc,modNL);
  end;
  if (HasAccountRecon) then begin
    Register("Account Reconciliation","Account Reconciliation",BankRecWClass,modNL);
  end;
  RegisterWS("Accounts","Accounts","New Account",AccVc,modNL);
  if (HasObjects) then begin
    RegisterWS("Objects","Objects","New Object",ObjVc,modNL);
  end;
  if (HasNLBudget) then begin
    RegisterWS("Budgets","Budgets","New Budget",Bud1Vc,modNL);
    RegisterWS("Revised Budgets","Revised Budgets","New Revised Budget",Bud2Vc,modNL);
  end;
  Register("Payments Plan","Payments Plan",PlannedPaymentsWClass,modNL);
  Register("Bank Reconciliation","Bank Reconciliation",BankAccountReconWClass,modNL);

  Setting("Account Classifications",AccClassLClass,modNL);
  Setting("Account Classification Types",AccClassTypeLClass,modNL);
  Setting("Account Short Codes",ACShortLClass,modNL);
  Setting("Account Transfers",AccTransLClass,modNL);
  Setting("Accounting Periods",AccPeriodLClass,modNL);
  Setting("Autotransactions",AutLClass,modNL);
  Setting("Auto Eliminations",AccElimLClass,modNL);
  if (HasLocalization("EST,USA")) then begin
    Setting("Bank Transactions",BankTRLClass,modNL);
  end;
  Setting("Brought Forward Balances",FBLClass,modNL);
  Setting("Budget Classes",BudgetClassTClass,modNL);
  Setting("Budget Keys",BFLClass,modNL);
  Setting("Calculation Formulae",CalcFormLClass,modNL);
  if (HasLocalization("RUS")) then begin
    Setting("Corresponding Accounts",CrspAccTClass,modNL);
  end;
  if (HasLocalization("HRV,SVN")) then begin
    Setting("(Croatia, Slovenia) #VAT# Rate Classification",CashInvCroSBlockTClass,modNL);
  end;  
  Setting("Electronic #VAT# Declaration",EVATDeclTClass,modNL);
  Setting("Fiscal Years",YearTClass,modNL);
  Setting("Income & Expense Book",IncExpBookLClass,modNL);  
  Setting("Liquidity Report Info",LiqInfoLClass,modNL);  
  Setting("#N/L# Accruals",AutSimPerLClass,modNL);
  Setting("Number Series - Simulations",SMSerTClass,modNL);
  Setting("Number Series - Transactions",TRSerTClass,modNL);
  Setting("Object Type Control",OTCheckTClass,modNL);
  Setting("Object Types",OTLClass,modNL);
  if (HasLocalization("FIN,HRV,POL,PRT,SRB,SVN")) then begin
    Setting("Number Series - #VAT# Declarations",VATDeclTClass,modNL);
  end;
  Setting("Planned Payments",PlannedPaymentLClass,modNL);
  Setting("Presentation of Balances",AGrTClass,modNL);
  Setting("Rate Gain/Loss",NLRateTClass,modNL);
  Setting("Rate Gains/Losses",NLRateLClass,modNL);
  Setting("Reconciliation Descriptions",ReconCodeLClass,modNL);
  Setting("Reconciliation Settings",ReconSetTClass,modNL);
  Setting("Report Settings",Rs2WClass,modNL);
  Setting("Sub Systems",TRGenTClass,modNL);
  Setting("Sub-ledger Control Accounts",SLAccTClass,modNL); // More logical to be here...

  Setting("Tax Account Groups",TAccGroupLClass,modNL);
  Setting("Tax Accounts",TAccLClass,modNL);
  Setting("Tax Reports",TaxRepLClass,modNL);
  Setting("Tax Rules",TaxRulesLClass,modNL);
  Setting("Tax Templates",TaxTemplateLClass,modNL);
  if (HasLocalization("RUS")) then begin
    Setting("Tax Transactions",TTRLClass,modNL);
    Setting("Tax Transactions Fields",TTRFieldTClass,modNL);
    Setting("Tax Transactions Maps",TTRMapLClass,modNL);
    Setting("Tax Transactions Settings",TTRTClass,modNL);
  end;
  if (HasLocalization("DEN")) then begin
    Setting("Template Transactions",DanTRLClass,modNL);
    Setting("Template Transactions - Accounts",DanTRSetLClass,modNL);
  end;
  Setting("Transaction Settings",TrTClass,modNL);
  if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
    Setting("Tax Template Code Control",VATCodeControlTClass,modNL);
  end else begin
    Setting("#VAT# Code Control",VATCodeControlTClass,modNL);
  end;
  Setting("#VAT Code# on Transaction rows",TaxTemplateTClass,modNL);
  Setting("#VAT# Codes",VATCodeTClass,modNL);
  if (HasLocalization("DEU,FIN,HRV,NOR,POL,PRT,SRB,SVN")) then begin
    Setting("#VAT# Declarations",VATDeclLClass,modNL);
  end;
  if (HasLocalization("DEU,FIN,HRV,POL,PRT,SRB,SVN")) then begin
    Setting("XBRL Reporting Elements",XBRLElementLClass,modNL);
    Setting("XBRL Reporting Settings",XBRLSettingsLClass,modNL);
  end;
  if (HasLocalization("EST")) then begin
    Setting("#VAT# INF report settings",VATInfReportTClass,modNL);
  end;
  Setting("XBRL Reporting Elements",XBRLElementLClass,modNL);
  Setting("XBRL Reporting Settings",XBRLSettingsLClass,modNL);
  if (HasLocalization("EST")) then begin
    Setting("RiigiTarkvara",RTViiteNumTClass,modNL);
  end;
/*  Setting("New Year Accounts",NYTClass,modNL);*/

  if (HasLocalization("DEU")) then begin
    Document("Periodic #VAT# (Germany)",PerVATGerRClass,TaxRepForm,TaxRepFClass,modNL);
  end;
  Document("Simulations",Sim2RClass,SMForm,SMFClass,modNL);
  Document("Tax Report",TaxDocRClass,TaxRepForm,TaxRepFClass,modNL);
//  Document("Transactions",Trans2RClass,Trans2Rn,0,modNL);
  Document("Transactions",TRRClass,TRForm,TRFClass,modNL);

  Document("Key Financial Ratios",KeyDRClass,KFRForm,KFRFClass,modNL);

//  Document("#VAT# Report",VATDocRClass,VATRepForm,VATRepFClass,modNL);  //does not exist
  

  Report("Account Reconciliation",ACReconRClass,ACRecRn,0,modNL);
//  Report("Accrual Report",AccrualRClass,AccrualRn,0,modNL);
  Report("Accrual Report",AccrualNewRClass,AccrualNewRn,0,modNL);
  Report("Analytical Balance",MBARClass,MBARn,0,modNL);
  Report("Analytical Balance (Fiscal purposes)",MBA3RClass,MBA3Rn,0,modNL);
  Report("Balance Sheet",BalRClass,BalRn,UserDefRepDClass,modNL);
  Report("Bank Reconciliation",BankReconRClass,BankRecRn,0,modNL);
  Report("Bank Statement",BankStRClass,BankStRn,0,modNL);
  if (HasLocalization("EST")) then begin
    Report("Bank Transactions",BankTRRClass,BankTRRn,0,modNL);
  end;
  Report("Base Currency Rate Change",NLBRateRClass,NLBRateRn,0,modNL);
  Report("Budget Journal",BudgJRClass,BudgJRn,0,modNL);
  Report("Chart of Accounts",AccListRClass,AccListRn,0,modNL);
  if (HasLocalization("EST")) then begin
    Report("Contacts VAT data check",CUVATInfRClass,CUVATInfRn,0,modNL);
  end;
  Report("Correction List",CorrRClass,CorrRn,0,modNL);
  Report("Corresponding Accounts",CorspRClass,CorspRn,0,modNL);
  Report("Creditors Account",VeCreditRClass,VeCreditRn,0,modNL);
  Report("Currency A/C Rate Change",NLRateRClass,NLRateRn,0,modNL);
  Report("Daily Balances",DayBalNLRClass,DayBalNLRn,0,modNL);
  Report("Debtors Account",CuDebtorRClass,CuDebtorRn,0,modNL);
  if (HasLocalization("CRI")) then begin
    Report("Expenses Report D-151 (Overview) (Costa Rica)",CRD151RClass,CRD151Rn,0,modNL);
  end;
  Report("Forward Balance Journal",ForwBalJRClass,ForwBalJRn,0,modNL);
  Report("Income & Expense Book",IncExpBookRClass,IncExpBookRn,0,modNL);
  Report("Key Financial Ratios",KeyRClass,KeyRn,UserDefRepDClass,modNL);
  Report("Liquidity Forecast",LiquidityRClass,LiquidityRn,0,modNL);
  Report("Multicurrency Accounts Rate Difference",MultiCurAccRClass,MultiCurAccRn,0,modNL);
  Report("#N/L# Accrual Transactions",GenPerTRRClass,GenPerTRRn,0,modNL);
  Report("#N/L# Transfer, Subsystems",TransGenRClass,TransGenRn,0,modNL);
  Report("#Nominal Ledger#",MainRClass,MainRn,0,modNL);
  Report("Object Results",ObjResRClass,ObjResRn,0,modNL);
  Report("Object/Quantity Results",ObjQtyRClass,ObjQtyRn,0,modNL);
  Report("Profit & Loss",ResRClass,ResRn,UserDefRepDClass,modNL);
  Report("Revised Budget Journal",RevBudgJRClass,RevBudgJRn,0,modNL);
  Report("Simulation Journal",SMJRClass,SMJRn,0,modNL);
  Report("Tax Account Balances",TAccBalRClass,TAccBalRn,0,modNL);
  Report("Tax Calculations", Tax100Class,Tax100Rn,0,modNL);
  Report("Tax Transactions for Registers",TTRRClass,TTRRn,0,modNL);
  Report("Template Transaction Journal",DanTRJRClass,DanTRJRn,0,modNL);
  Report("Test Corresponding Rules",CorstRClass,CorstRn,0,modNL);//they wanted it back in Latvia
  Report("Transaction Journal",TransRClass,TransRn,0,modNL);
  Report("Transaction Summary",TransListRClass,TransListRn,0,modNL);
  Report("Trial Balance",SBRClass,TrialRn,0,modNL);
  if (HasLocalization("EST")) then begin
    Report("VAT INF",VATInfRClass,VATInfRn,0,modNL);
  end;
  if (HasLocalization("KEN,ZWE")) then begin
    Report("#VAT# Listing",ALLVATZWERClass,ALLVATZWERn,0,modNL);
    if (HasLocalization("KEN")) then begin
      Report("iTax (Kenya)",ALLVATKENRClass,ALLVATKENRn,0,modNL);
    end;
  end else begin
    Report("#VAT# Listing",ALLVATRClass,ALLVATRn,0,modNL);
  end;
  if (HasLocalization("UKR")) then begin
    Report("#VAT# Report Appendix 5 (Ukraine)",VATRepApp5RClass,VATRepApp5Rn,0,modNL);
  end;
  Report("#VAT# Report",VATRClass,VAT2Rn,UserDefRepDClass,modNL);
  Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modNL);
  Report("#VAT# Report Sales",SLVATRepRClass,SLVATRepRn,0,modNL);
  if (HasLocalization("ESP")) then begin
    Report("#VAT# Report Purchases (Spain)",PLESPInVATRClass,PLESPInVATRn,0,modNL);
    Report("#VAT# Report Sales (Spain)",SLESPOutVATRClass,SLESPOutVATRn,0,modNL);
  end;
  Report("#VAT# Transaction Journal",VATTransJRClass,VATTransJRn,0,modNL);
  Report("XBRL Report",XBRLReportRClass,XBRLReportRn,0,modNL);
//  Report("Base Currency Differences",Base2DiffRClass,Base2DiffRn,0,modNL); // Where is the code and the selection window
//  Report("Corresponding Accounts (Russia)",Corsp2RClass,Corsp2Rn,0,modNL);  
/* Estonia should Include this */
  if (HasLocalization("EST")) then begin
    Report("RiigiTarkvara Object Balance",RiigiRClass,RiigiRn,0,modNL);
    Report("RiigiTarkvara Budget Report",RTPrLosRClass,RTProLosRn,0,modNL); 
    Report("RiigiTarkvara Object Result",RiigiNewRClass,RiigiNewRn,0,modNL);
    Report("RiigiTarkvara Object Type Result",RiigiOTRClass,RiigiOTRn,0,modNL);
    Report("RiigiTarkvara Budget Comparison",RTPrLosNewRClass,RTProLosNewRn,0,modNL); 
  end;
/*remember to update RsWDel in main.c when adding report
  SelRep = SelRep - (X + nr of new reports);
  This is not good for HAL
*/

/* Finnish */
  
  Export("Accumulated Monthly #P/L# Report",MonthResEClass,MonthResEn,modNL);
  if (HasLocalization("GTM")) then begin
    Export("Assists Books (Guatemala)",GTVATEClass,GTVATEn,modNL);
  end;
  Export("Consolidation",ConsEClass,ConsEn,modNL);
  if (HasLocalization("FRA")) then begin
    Export("FEC Export",FrenchFECEClass,FrenchFECEn,modNL);
  end;
  if (HasLocalization("DEU")) then begin
    Export("GDPdU Data to Simba",GDPdUDataToSimbaEClass,GDPdUDataToSimbaEn,modNL);
  end;
  if (HasLocalization("SGP")) then begin
    Export("IRAS audit File",GenIRASEClass,IRASAuditEn,modNL);
  end;
  if (HasLocalization("ESP")) then begin
    Export("Gipuzkoa VAT Export",GipuzkoaVATEClass,GipuzkoaVATEn,modNL);
  end;
  Export("Key Financial Ratios",KeyEClass,KeyEn,modNL);
  Export("Monthly Balances",MBEClass,MBEn,modNL);
  Export("Object Balances",FBEClass,FBEn,modNL);
  if (HasLocalization("MEX")) then begin
    Export("E-Bookkeeping",EBookkeepingEClass,EBookkeepingEn,modNL);
  end;
  if (HasLocalization("CRI")) then begin
    Export("Expenses Report D-151 (Detailed) (Costa Rica)",CRD151EClass,ExpCRD151En,modNL);
  end;
  if (HasLocalization("EST")) then begin
    Export("Riigikassa Object Result",RiigiNewEClass,RiigiNewEn,modNL);
  end;
  if (HasLocalization("PAN")) then begin
    Export("Report 72 and 94 (Panama)",PANReport72y94EClass,PANReport72y94En,modNL);
    Export("Report 73 (Panama)",PANReport73EClass,PANReport73En,modNL);
  end;
  if (HasLocalization("PRT")) then begin
    Export("SAFT",PortTaxXmlEClass,PortTaxXmlEn,modNL);
  end;
  if (HasLocalization("SWE")) then begin
    Export("SIE (Swedish Std Export/Import)",SieEClass,SieEn,modNL);
  end;
  if (HasLocalization("SVN")) then begin
    Export("Transactions (Slovenia)",TRSloEClass,TRSloEn,modNL);
  end;
  Export("Trial Balance",SBEClass,SBEn,modNL);
  if (HasLocalization("EST")) then begin
    Export("RiigiTarkvara Object Balance",RiigiEClass,RiigiEn,modNL);
    Export("RiigiTarkvara Transaction Rows",RiigiTRrwEClass,RiigiTRrwEn,modNL);
  end;
  if (HasLocalization("FIN")) then begin
    Export("#VAT# Periodic (Finland)",FinPeriodicVATEClass,FinPeriodicVATEn,modNL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#VAT# Annual (Latvia)",LatAnnualVATEClass,LatAnnualVATEn,modNL);
  end;
  if (HasLocalization("EST")) then begin
    Export("VAT INF",VATInfEClass,VATInfEn,modNL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#VAT# Periodic Declaration (Lithuania)",LTUVATEClass,LTUVATEn,modNL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#VAT# Periodic (Latvia)",LatPeriodicVATEClass,LatPeriodicVATEn,modNL);
  end;
  if (HasLocalization("SVN")) then begin
    Export("#VAT# Periodic (Slovenia)",SloVATPeriodicEClass,SloVATPeriodicEn,modNL);
  end;
  Export("XBRL Report",XBRLReportEClass,XBRLReportEn,modNL);
  
  if (HasLocalization("CAN")) then begin
    Import("American Express Statement",AmexStatementIClass,AmexStatementIn,modNL);  
  end;
  if (HasLocalization("USA")) then begin
    Import("American Express Statement",AmexStatementIClass,AmexStatementIn,modNL);  
    Import("Amex Statment Import",AmexBTAIn,AmexBTAIn,modNL);
  end;
  Import("Bank Transactions",BankTRIClass,BankTRIn,modNL);
  if (HasLocalization("SWE,NOR,FIN")) then begin
    Import("H-Laun Payroll",HLaunIn,HLaunIn,modNL);
    Import("Hogia Payroll",AutIn,AutIn,modNL);
  end;
  if (HasLocalization("EST")) then begin
//    Import("SEB Bank Transactions",SEBBankTRIn,SEBBankTRIn,modNL);//test code only
  end;
  if (HasLocalization("SWE")) then begin
    Import("SIE (Swedish Std Export/Import)",SieIn,SieIn,modNL);
  end;
  Import("Update SRU Codes",UpdateSRUIn,UpdateSRUIn,modNL);

  Maintenance("Account Auto Elimination",AccElimVClass,AccElimMn,modNL);
  Maintenance("Account Balance Transfer",AccTransVClass,AccTransMn,modNL);
  Maintenance("Add Object to Transactions",AddObjTRVClass,AddObjTRMn,modNL);
  Maintenance("Budget",Bud1VClass,Bud1Mn,modNL);
  Maintenance("Generate #N/L# Accrual Transactions",GenPerTRVClass,GenPerTRMn,modNL);
  Maintenance("Generate Planned Payments Records",GenPlanPymntVClass,GenPlanPymntMn,modNL);
  Maintenance("Lock #N/L#",LockNLVClass,LockNLMn,modNL);
  Maintenance("Put Contact Code as Object on Transactions",ContactToTRObjVClass,ContactToTRObjMn,modNL);
  Maintenance("Rate Gain/Loss",NLRateVClass,NLRateMn,modNL);
  if (HasLocalization("ARG,BOL")) then begin
    Maintenance("Revaluation of Base Currency 1",NLBRate1VClass,NLBRate1Mn,modNL);
  end;  
  Maintenance("Revaluation of Base Currency 2",NLBRateVClass,NLBRateMn,modNL);
  Maintenance("Revised Budget from Budget",Bud2FromBud1VClass,Bud2FromBud1Mn,modNL);
  Maintenance("Revised Budget",Bud2VClass,Bud2Mn,modNL);
  if (HasLocalization("EST")) then begin
    Maintenance("RiigiTarkvara Object Balances",RiigiBalVClass,RiigiOTMn,modNL);
  end;
  Maintenance("Update Transactions",NLAddRateVClass,NLAddRateMn,modNL);
  Maintenance("Year End Simulation",CYearVClass,CloseYMn,modNL);
//  Maintenance("B/FW Balances",IBVClass,IBMn,modNL);
/* Estonia should Include this */

/* modPL */

  RegisterWS("#Purchase Invoices#","#Purchase Invoices#","New #Purchase Invoice#",VIVc,modPL);
  RegisterWS("Payments","Payments","New Payment",OPVc,modPL);
  RegisterWS("Purchase Order Contracts","P/Order Contracts","New P/Order Contract",POCOVc,modPL);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modPL);
  Register("E-#Purchase Invoices#","E-#Purchase Invoices#",VEIVVc,modPL);
  RegisterWS("BuyBacks","BuyBacks","New BuyBack",BuyBackVc,modPL);
  if (HasLocalization("USA")) then begin
    RegisterWS("Issued Own #Cheques#","Issued Own #Cheques#","New Issued Own #Cheque#",OpenOwnChkLClass,modPL);
    RegisterWS("All Own #Cheques#","All Own #Cheques#","New Own #Cheque#",OwnCheckVc,modPL);
  end;

  Setting("Account Usage #P/L#",APAccTClass,modPL);
  Setting("Bank Transfer",BankFileTClass,modPL);
  Setting("Banks",BankLClass,modPL);
  Setting("Calculation Formulae",CalcFormLClass,modPL);
  if (HasLocalization("HRV,SVN")) then begin
    Setting("Contact Legal Forms",CULegalFormLClass,modPL);
  end;
  if (HasLocalization("EST,LVA")) then begin
    Setting("Electronic Payments Queue",EPaymentQueLClass,modPL);
  end;
  Setting("Eurocard",EuroCardLClass,modPL);
  Setting("Eurocard Import Settings",ECInSetTClass,modPL);
//  Setting("Extra Costs",ExtraCostLClass,modPL); not used
  if (HasLocalization("UKR")) then begin
    Setting("First Event Purchase",FEVILClass,modPL);
  end;
  If (HasLocalization("FIN")) then begin
    Setting("FInvoice",FInvoiceTClass,modPL);
  end;
  Setting("Intrastat Purchase",IntrastatVITClass,modPL);
  if (HasLocalization("UKR")) then begin
    Setting("Number Series - First Event Purchase",FEVISerTClass,modPL);
  end;
  Setting("Number Series - Payments",OPSerTClass,modPL);
  Setting("Number Series - #Purchase Invoices#",VISerTClass,modPL);
  if (HasLocalization("HRV,POL,SVN,SRB,UKR")) then begin
    Setting("Number Series - #VAT# Corrections #P/L#",VATVISerTClass,modPL);
  end;
  Setting("Payment Codes",PaymentCodeLClass,modPL);
  Setting("Payment Modes",PMTClass,modPL);
  Setting("Payment Settings",OPTTClass,modPL);
  Setting("Payment Terms",PDLClass,modPL);
//  Setting("PO Contract Extra Costs",POCOCostLClass,modPL);  not used
  Setting("#Purchase Invoice# Settings",VITTClass,modPL);
  if (HasLocalization("EST,LVA")) then begin
    Setting("Signing Requirements for Payments",EPaySignReqTClass,modPL);
  end;
//  Setting("#Stock# Exchange Prices",StExValLClass,modPL);//not used ever
  Setting("#Supplier# Categories",VGLClass,modPL);  
  if (HasLocalization("ARG,BRA,ITA,PRT,SGP")) then begin
    Setting("#Supplier# Withholdings",WHVELClass,modPL);
  end;
  Setting("#Supplier# Withholdings Exemptions",WHVEExmptLClass,modPL);
  Setting("#VAT# Accounts",VATTClass,modPL);
  if (HasLocalization("HRV,POL,SVN,SRB,UKR")) then begin
    Setting("#VAT# Correction #P/L# Types",VATVITypeTClass,modPL);
    Setting("#VAT# Corrections #P/L#",VATVILClass,modPL);
  end;
  if (HasLocalization("ARG,BRA,ITA,PRT,SGP,ZAF")) then begin
    Setting("Withholding Calculation Formulae",WHCalcFormLClass,modPL);
    Setting("Withholding Certificates",WHCertificateLClass,modPL);
  end;
  if (HasLocalization("ARG,BRA,ITA,MEX,PRT,SGP,ZAF")) then begin
    Setting("Withholding Taxes",WHTaxTClass,modPL);
  end;

  Document("#Cheque# Documents",OP2DRClass,OP2DForm,OP2DFClass,modPL);
//  Document("#Credit Notes#",CredVIRClass,CredVIForm,CredVIFClass,modPL);
  Document("Debit Invoices",DebVIRClass,DebVIForm,DebVIFClass,modPL);
  Document("Electronic #Purchase Invoices#",VEIVRClass,VEIVForm,VEIVFClass,modPL);
  Document("Intrastat #P/L#",IntraStaPuRClass,InStaPuForm,InStaPuFClass,modPL);
  Document("Open Invoice #Supplier# Statement",APSRClass,APSForm,APSFClass,modPL);
  if (HasLocalization("RUS")) then begin 
    Document("Purchase Book",PurchB3RClass,PLBookForm,PLBookFClass,modPL); 
  end;
  Document("Payment Forms",OPDRClass,OPDForm,OPDFClass,modPL);
  Document("Payment Lists",OPRClass,OPForm,0,modPL);
  Document("Periodic #Supplier# Statement",VEPerRClass,VEPerForm,VEPerFClass,modPL);
  if (HasLocalization("HRV,SVN")) then begin
    Document("Purchase Book",PurchaseBookHRVRClass,PurchaseBookHRVForm,PurchaseBookHRVFClass,modPL); 
  end;
  Document("#Purchase Invoice# Forms",VIRClass,VIForm,VIFClass,modPL);
  Document("Purchase Order Contract",POCORClass,POCOForm,POCOFClass,modPL);
  if (HasLocalization("ARG,BRA,ITA,PRT,SGP")) then begin
    Document("Withholding Certificates",WHCertificateRClass,WHCertificateForm,WHCertificateFClass,modPL);
  end;
  if (HasLocalization("SGP")) then begin
    Document("Withholding Certificates Periodic Statement",WHCertificatePerRClass,WHCertificatePerForm,WHCertificatePerFClass,modPL);
  end;
//  Document("#VAT# Corrections #P/L#",VATVIRClass,VATVIForm,VATVIFClass,modPL); P Inv is report
/* Who made this one??? */
/* This is a Mock Doc, ie a Report. */
//  Document("#Purchase Invoices#",VIRClass,VIRn,0,modPL); /* Still exists as a HAL report */

  if (HasLocalization("PHL")) then begin
    Report("Alphalist",AlphalistRClass,AlphalistRn,0,modPL);
  end;
  Report("BuyBack Journal",BuyBackJRClass,BuyBackJRn,0,modPL);
  if (HasLocalization("EST,LVA")) then begin
    Report("Electronic Payment Status",HTSOPStatRClass,HTSOPStatRn,0,modPL);
  end;
  if (HasLocalization("EST")) then begin
    Report("Data validation (SEPA payments)",FindMisMatchSEPARClass,FindMisMatchSEPARn,0,modPL);
  end;
  Report("EU #VAT# Purchases",PLEUVATRClass,PLEUVATRn,0,modPL);
  if (HasLocalization("UKR")) then begin
    Report("First Event Purchase Journal",FEVIJRClass,FEVIJRn,0,modPL);
  end;
  if (HasLocalization("ARG")) then begin
    Report("Gross Income Perceptions (SI.FE.RE)",ArgGrIncPercRClass,ArgGrIncPercRn,0,modPL);
  end;
  if (HasLocalization("LVA")) then begin
    Report("Intrastat #P/L# (Latvia)",LatIntrastatPURClass,LatIntrastatPURn,0,modPL);
  end;
  if (HasLocalization("SLV")) then begin
    Report("Monthly Purchase Witholdings (El Salvador)",PLRetSLVRClass,PLRetSLVRn,0,modPL);
  end;
  Report("Open Invoice #Supplier# Statement",APS2RClass,APS2Rn,0,modPL);
  Report("Overview of #Instalments#",InstListPLRClass,InstListPLRn,0,modPL);
  Report("#P/L# #VAT Code# Statistics",PLVATRClass,PLVATRn,0,modPL);
  Report("#P/L# #VAT# Report",PLVAT2RClass,PLVAT2Rn,0,modPL);
  Report("Payment Journal",OPJRClass,OPJRn,0,modPL);
  Report("Payments Forecast",OPProgRClass,OPProgRn,0,modPL);
  Report("Periodic #Supplier# Statement",VePer2RClass,VePerRn,0,modPL);
  Report("Prepayment History #P/L#",PerPayHisPLRClass,PerPayHisPLRn,0,modPL);
  if (HasLocalization("BLR")) then begin
    Report("Purchase Book (Belarus)",PurchB2RClass,PurchB2Rn,0,modPL);
  end;
  if (HasLocalization("RUS")) then begin
    Report("Purchase Book (Russia)",PurchB1RClass,PurchB1Rn,0,modPL);
  end;
  Report("#Purchase Invoice# Journal",VIJRClass,VIJRn,0,modPL);
  Report("#Purchase Invoice# Status",VIInfoRClass,VIInfoRn,0,modPL);
  Report("#Purchase Ledger#",APRClass,APRn,0,modPL);
  if (HasLocalization("LTU")) then begin
    Report("Purchased Items, #VAT# (Lithuania)",LitVATPurchRClass,VATPurchRn,0,modPL);
  end;
  Report("#Sales & Purchase Ledger#",ARAPRClass,ARAPRn,0,modPL);
  Report("#Supplier# List",VERClass,VERn,0,modPL);
  Report("#Supplier# Purchase History",MonthSalesHistVERClass,MonthSalesHistVERn,0,modPL);
  Report("#Supplier# Statistics",VSRClass,VSRn,0,modPL);
  Report("#Supplier# Withholdings",SuplWithHoldRClass,SuplWithHoldRn,0,modPL);
  if (HasLocalization("UKR")) then begin
    Report("#VAT# Correction #P/L# Register (Ukraine)",VATVIRegUkrRClass,VATVIRegUkrRn,0,modPL);
  end;
  Report("#VAT Reg. Number# History",CUVERClass,CUVERn,0,modPL);
  Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  if (HasLocalization("ARG")) then begin
    Report("#VAT# Report Purchases (Argentina)",ArgPurchVATRClass,ArgPurchVATRn,0,modPL);
  end;
  if (HasLocalization("BOL")) then begin
    Report("#VAT# Report Purchases (Bolivia)",PLVATBolRClass,PLVATBolRn,0,modPL);
  end;
  if (HasLocalization("SLV")) then begin
    Report("#VAT# Report Purchases (El Salvador)",PLVATSLVRClass,PLVATSLVRn,0,modPL);
  end;
  if (HasLocalization("GTM")) then begin
    Report("#VAT# Report Purchases (Guatemala)",PLVATGTRClass,PLVATGTRn,0,modPL);
  end;
  if (HasLocalization("HND")) then begin
    Report("#VAT# Report Purchases (Honduras)",PLVATHonRClass,PLVATHonRn,0,modPL);
  end;
  if (HasLocalization("HUN")) then begin
    Report("#VAT# Report Purchases (Hungary)",PLVATHunRClass,PLVATHunRn,0,modPL);  
  end;
  if (HasLocalization("LTU,KEN")) then begin
    country = "(Lithuania)";
    if (HasLocalization("KEN")) then begin 
      country = "(Kenya 1)";
    end;    
    Report("#VAT# Report Purchases " & country,PLVATLitRClass,PLVATLitRn,0,modPL);
  end;
  if (HasLocalization("MEX")) then begin
    Report("#VAT# Report Purchases (Mexico)",PLVATMexRClass,PLVATMexRn,0,modPL);
  end;
  if (HasLocalization("NIC")) then begin
    Report("#VAT# Report Purchases (Nicaragua)",PLVATNIRClass,PLVATNIRn,0,modPL);
  end;
  if (HasLocalization("PAN")) then begin
    Report("#VAT# Report Purchases (Panama)",PLVATPARClass,PLVATPARn,0,modPL);
  end;  
  if (HasLocalization("SRB")) then begin
    Report("#VAT# Report Purchases (Serbia)",PLVATSerRClass,PLVATSerRn,0,modPL);  
  end;
  Report("#VAT# #Supplier# Purchases",RealSuppRClass,RealSuppRn,0,modPL);
  if (HasLocalization("PHL")) then begin
    Report("#VAT# Input",VATSuppPurchasesPHLRClass,VATSuppPurchasesPHLRn,0,modPL);
  end;

  Export("Banking File",MPEClass,MPEn,modPL);
  if (HasLocalization("HRV")) then begin
    Export("EU #VAT# Purchases",PLEUVATHRVECLass,PLEUVATHRVEn,modPL);
  end;
  if (HasLocalization("UKR")) then begin
    Export("First Event Purchase Book",FEVIBookEClass,FEVIBookEn,modPL);
  end;
  if (HasLocalization("EST")) then begin
    Export("Intrastat #P/L# (Estonia)",EstIntrastatVIEClass,EstIntVIEn,modPL);
  end;
  if (HasLocalization("FIN")) then begin
    Export("Intrastat #P/L# (Finland)",FinIntrastatVIEClass,FinIntVIEn,modPL);
  end;
  if (HasLocalization("DEU")) then begin
    Export("Intrastat #P/L# (Germany)",GerIntrastatVIEClass,GerIntVIEn,modPL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("Intrastat #P/L# (Latvia)",LatIntrastatPUEClass,LatIntrastatPUEn,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("Intrastat #P/L# (Lithuania)",LitIntrastatVIEClass,LitIntVIEn,modPL);
  end;
//  Export("Intrastat #Purchase Invoices#",EngIntrastatVIEClass,EngIntVIEn,modPL);
  if (HasLocalization("GBR")) then begin
    Export("Intrastat #Purchase Invoices# (UK)",EngIntrastatVIUKEClass,EngIntVIUKEn,modPL);
  end;
  if (HasLocalization("SVN")) then begin
    Export("Invoices #P/L# (Slovenia)",VISloEClass,VISloEn,modPL);
  end;
  if (HasLocalization("ARG")) then begin
    Export("#P/L# CITI (Argentina)",PLCITIEClass,PLCITIEn,modPL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#P/L# Forest Export", ForestPLEClass,ForestPLEn,modPL);
    Export("#P/L# Latvian #VAT# Report",PLVAT1ExpEClass,PLVAT1En,modPL);
  end;
  Export("#P/L# Liquidity List",PLLiqEClass,PLLiqEn,modPL);
  if (HasLocalization("ARG")) then begin
    Export("#P/L# #VAT# Gross Income Withholdings (Argentina)",PLGIWArgEClass,PLGIWArgEn,modPL);
  end;
  if (HasLocalization("BOL")) then begin
    Export("#P/L# #VAT# Invoices (Bolivia)",PLVATBolEClass,PLVATBolEn,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#P/L# #VAT# Invoices (Lithuania)",LitVATRegVIEClass,LitVATRegVIEn,modPL);
  end;
  if (HasLocalization("SVN")) then begin
    Export("#P/L# #VAT# Invoices (Slovenia)",PLVATSloEClass,PLVATSloEn,modPL);
  end;
  if (HasLocalization("ARG")) then begin
    Export("#P/L# #VAT# Perceptions (Argentina)",PLVATPercEClass,PLVATPercEn,modPL);
    Export("#P/L# Withholding and Perceptions (Argentina)",PLARCIBAEClass,PLARCIBAEn,modPL);
    Export("Regional Withholdings (Argentina)",SIFEREVIEClass,SIFEREVIEn,modPL);
  end;
  if (HasLocalization("PAN")) then begin
    Export("Report 43 (Panama)",PANExport43EClass,PANExport43En,modPL);
  end;
  if (HasLocalization("ARG")) then begin
    Export("SICORE #Suppliers# (Argentina)",SICORESubjEClass,SICORESubjEn,modPL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#VAT# Purchases (Latvia)",LatVATPurchasesEClass,LatVATPurchasesEn,modPL);
  end;
  if (HasLocalization("MEX")) then begin
    Export("#VAT# Purchases (Mexico, DIOT)",VATPurchMexEClass,VATPurchMexEn,modPL);
  end;
  if (HasLocalization("ARG")) then begin
    Export("Withholding Certificates (Argentina)",WHCertificateEClass,WHCertificateEn,modPL);
  end;
  if (HasLocalization("POL")) then begin
    Export("Ist@at - Items Import",IstaatItemImportEClass,IstaatItemImportEn,modPL);
  end;
  

//  Export("Postgiro (Swedish)",MPEClass,MP2En,modPL);
/* Internal Export Routine, could be commented out. */

  if (HasLocalization("HRV,POL,SVN,SRB,UKR")) then begin
    Maintenance("Create #VAT# Corrections #P/L#",VATVIVClass,VATVIMn,modPL);
  end;
  Maintenance("Create #Purchase Invoices# from BuyBack",VIFromBuyBackVClass,VIFromBuyBackMn,modPL);
  Maintenance("Create Periodic #Supplier# Statement Email",VEPerEmailVClass,VEPerEmailMn,modPL);
//  Maintenance("Split BuyBack Amounts",SplitBuyBackCostVClass,SplitBuyBackCostMn,modPL);
  Maintenance("Update #Suppliers#",UpdSupVClass,UpdSupMn,modPL);
//  Maintenance("Update #VAT Code# on #NL# Trans from Pur. Inv.",VITRUpdVATCodeVClass,VITRUpdVATCodeMn,modPL);//for Latvia Only

  if (HasLocalization("USA")==false) then begin
    Import("Eurocard Accounts",EuroCardAccIn,EuroCardAccIn,modPL);
    Import("EuroCard Invoice",EuroCardIn,EuroCardIn,modPL);
  end else begin
    Import("Amex Statment Import",AmexBTAIn,AmexBTAIn,modPL);
  end;
  if (HasLocalization("ARG")) then begin
    Import("Regional Perceptions & Withholdings (Argentina)",PercAndWHIClass,PercAndWHIn,modPL);
    Import("Regional Perceptions & Withholdings Corrections (Argentina)",PercAndWHCorrIClass,PercAndWHCorrIn,modPL);
  end;
  

/* modSL */
  
   RegisterWS("Invoices","Invoices","New Invoice",IVVc,modSL);
  RegisterWS("Receipts","Receipts","New Receipt",IPVc,modSL);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modSL);
  RegisterWS("Items","Items","New Item",INVc,modSL);
  RegisterWS("Item Groups","Item Groups","New Item Group",ITVc,modSL);
  RegisterWS("Internal Invoices","Internal Invoices","New Internal Invoice",IntIVVc,modSL);
  if (HasLocalization("FIN")) then begin
    Register("Electronic Invoices Queue","Electronic Invoices Queue",EInvoiceQueVc,modSL);
    Register("Electronic Record Statuses","Electronic Record Statuses",ERecordStatusVc,modSL);
  end;

// Cash settings, report and maintenance were removed from #Sales Ledger# because they are POS things, if you want to use SL POS module, you have to get POS module anyway.
  Setting("Account Usage #S/L#",AccTClass,modSL);
  Setting("Age Limits",AgedTClass,modSL);
  Setting("Alternative Items",AltINLClass,modSL);
  Setting("Bonus",BonusDefLClass,modSL);
  //if (HasLocalization("BLR")) then begin
    //Setting("Cash Round Off for Belarus",BelRusCashTClass,modSL); 
  //end;
  Setting("Classification Types",CTypeLClass,modSL);
  Setting("Contact Credit Limits",CreditLimitLClass,modSL);
  Setting("Contact Document Types",CUDocTypeTClass,modSL);
  Setting("Contact Settings",CustomerSettingTClass,modSL);
  Setting("Credit Limit",CreditLimitTClass,modSL);
  Setting("Cross Sales Items",CrossINLClass,modSL);
  Setting("Customer Categories",CCatLClass,modSL);
  Setting("Default Items",CompItemLClass,modSL);
  Setting("Default Payment Modes",DefCashTClass,modSL);
//  Setting("Electronic Invoices Customers Data",EInvCULClass,modSL);
  Setting("Electronic Invoices Layouts",EInvoiceLayoutTClass,modSL);
  Setting("Electronic Invoices Queue",EInvoiceQueLClass,modSL);
  Setting("Electronic Record Statuses",ERecordStatusLClass,modSL);
//  Setting("Electronic Invoicing",ElecInvTClass,modSL);//not used , different design
  Setting("Environment Tax",RepaTClass,modSL);
  Setting("Extra Tax Customer Discounts",Tax1RebLClass,modSL);
  Setting("Factoring Export",FactoringTClass,modSL);
  if (HasLocalization("LVA")) then begin
    Setting("FiDAViSta Import Filters",FVImpFilterTClass,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Setting("FInvoice Settings",FInvoiceSLTClass,modSL);
  end;
  if (HasLocalization("UKR")) then begin
    Setting("First Event Sales",FEIVLClass,modSL);
  end;
  Setting("Freight",FreightTClass,modSL);
  Setting("Freight/Weight Calculation",FreightWeightTClass,modSL);
  Setting("Gift Vouchers Issued",GCLClass,modSL);
  Setting("Gift Vouchers Received",GCRLClass,modSL);
  Setting("Gift Vouchers Settings",GCTClass,modSL);
  Setting("Gift Vouchers Sold",GCSLClass,modSL);
  Setting("#Instalments#",InstallmentLClass,modSL);
  Setting("Interest",IITClass,modSL);
  Setting("Interest Codes",IntLClass,modSL);
  Setting("Interest Terms",IRLClass,modSL);
  Setting("Intrastat Transaction Codes",IntrastatTransCodeTClass,modSL);
  Setting("Invoice Mail Settings",IVMailTClass,modSL);
  Setting("Item Classifications",DILClass,modSL);
  Setting("Item Group Withholdings",WHITLClass,modSL);
  if (HasLocalization("LVA")) then begin
    Setting("Item Resources",ItemResourceLClass,modSL);
  end;
  Setting("Item Settings",ItemSettingTClass,modSL);
  Setting("Item Status Settings",ItemStatusSettTClass,modSL);
  Setting("Legal Record Numbers",LegalInvNrTClass,modSL);
  if (HasLocalization("LVA")) then begin
    Setting("Natural Resource Types",NatResourceTypeLClass,modSL);
  end;
  if (HasLocalization("HRV,POL")) then begin
    Setting("Legal Record Numbers 2",LegalInvNr2TClass,modSL);
  end;
  Setting("Number Series - Contacts",CUSerTClass,modSL);//PRSerTClass
  if (HasLocalization("UKR")) then begin
    Setting("Number Series - First Event Sales",FEIVSerTClass,modSL);
  end;
  Setting("Number Series - Gift Vouchers",GCSerTClass,modSL);
  Setting("Number Series - Gift Vouchers Received",GCRSerTClass,modSL);
  Setting("Number Series - Internal Invoices",IntIVSerTClass,modSL);
  Setting("Number Series - Invoices",IVSerTClass,modSL);
  Setting("Number Series - Receipts",IPSerTClass,modSL);
  if (HasLocalization("HRV,POL,SVN,SRB,UKR")) then begin
    Setting("Number Series - #VAT# Corrections #S/L#",VATIVSerTClass,modSL);
  end;
  if (HasLocalization("AGO,BRA,PRT")==false) then begin
    Setting("Official Invoice Serial Number",OffInvTClass,modSL);
  end;
  Setting("Payment Modes",PMTClass,modSL);
  Setting("Payment Term Sales A/C",PDSalesAccTClass,modSL);
  Setting("Payment Terms",PDLClass,modSL);
  Setting("Receipts Setting",IPTClass,modSL);
  if (HasLocalization("FIN")) then begin
    Setting("Reference Number Settings",CalcRefTClass,modSL);
  end;
  Setting("Regions",RegionLClass,modSL);
  if (HasLocalization("ARG")) then begin
    Setting("Regional Perception Customer Discounts",RPTaxRebLClass,modSL);
    Setting("Regional Perception Taxes",RPTaxLClass,modSL);
    Setting("Regional Perception Taxes for Customers",RPCUTaxLClass,modSL);
    Setting("Regional Perception Customer Exemptions",RPCUTaxExmptLClass,modSL);
    Setting("Regional Sales Taxes",RSTaxLClass,modSL);
  end;
  Setting("Registration Defaults",RegDefTClass,modSL);
  Setting("Reminder Texts",RMLClass,modSL);
  Setting("Sales Invoice Settings",IVTTClass,modSL);
  Setting("Standard Problems",StandProblemLClass,modSL);
  if (HasLocalization("BOL")) then begin
    Setting("Tax Authorities IDs",TaxAuthIDBlockTClass,modSL);
  end;
  Setting("Units",UnitLClass,modSL);
  if (HasLocalization("HRV,POL,SVN,SRB,UKR")) then begin
    Setting("#VAT# Correction Originals at Our Company",VATIVReasonLClass,modSL);
    Setting("#VAT# Correction #S/L# Types",VATIVTypeTClass,modSL);
    Setting("#VAT# Corrections #S/L#",VATIVLClass,modSL);
    Setting("#VAT# Correction Settings",VATIVTTClass,modSL);
  end;
  Setting("#VAT# Zone Label",VATZoneLabelTClass,modSL);
//  Setting("Sales Codes",SalesCodeTClass,modSL); Manual says not used any more. Hmm, the manual is not correct then, they are used in the code!

  Document("Cash Notes",KIVRClass,CashInvForm,CashFClass,modSL);
  Document("#Credit Notes#",CIVRClass,CredInvForm,CredFClass,modSL);
  Document("Customer/#Supplier# Labels",CuLabRClass,CuLabForm,CuLabFClass,modSL);
  Document("Debtors Letter",DebtLetRClass,DebtorLetForm,DebtLetFClass,modSL);
  Document("EU #VAT# Sales",SLEUVAT2RClass,SLEUVATForm,SLEUVATFClass,modSL);
  if (HasLocalization("UKR")) then begin
    Document("First Event Sales",FEIVRClass,FEIVForm,FEIVFClass,modSL); 
  end;
  Document("Gift Vouchers",GCRClass,GCForm,GCFClass,modSL); 
  Document("Interest Invoices",IIVRClass,IIInvForm,IIFClass,modSL);
  Document("Internal Invoices",IntIVRClass,IntIVForm,IntIVFClass,modSL);
  Document("Intrastat #S/L#",IntraStaRClass,InStaForm,InStaFClass,modSL);
  if (HasLocalization("PRT")) then begin
    Document("Invoice/Receipt's",KIVRClass,CashInvRecPRTForm,CashRecPRTFClass,modSL);
  end;
  Document("Invoices",IVRClass,InvForm,InvFClass,modSL); 
  Document("Open Invoice Customer Statement",ARSRClass,ARSForm,ARSFClass,modSL);
  Document("Periodic Customer Statement",CuPerRClass,CuPerForm,CuPerFClass,modSL);
  if (HasLocalization("PRT")==false) then begin
    Document("Proforma Invoices",Inv1RClass,Inv1Form,Inv1FClass,modSL);
  end;
  Document("Project Invoices",PIVRClass,ProjInvForm,PRInvFClass,modSL);
  Document("Receipt Forms",IPDRClass,IPDForm,IPDFClass,modSL);
  Document("Reminders",RemRClass,RemForm,RemFClass,modSL);
  if (HasLocalization("RUS")) then begin
    Document("Sales Book",SalesB2RClass,SLBookForm,SLBookFClass,modSL); 
  end;
  if (HasLocalization("HRV,SVN")) then begin
    Document("Sales Book",SalesBookHRVRClass,SalesBookHRVForm,SalesBookHRVFClass,modSL); 
  end;
  
  if (HasLocalization("HRV,POL,SVN,SRB,UKR")) then begin
    Document("#VAT# Corrections #S/L#",VATIVRClass,VATIVForm,VATIVFClass,modSL); 
    Document("#VAT# Corrections #S/L# Credit Notes",VATCIVRClass,VATCIVForm,VATCIVFClass,modSL);
  end;

  Report("Bonus, #Salesman#",BonusRClass,BonusRn,0,modSL);
  Report("Cash Receipts",CashReceiptRClass,CashReceiptRn,0,modSL);
  Report("Contact List",CURClass,CustRn,0,modSL);
  if (HasLocalization("HRV")) then begin
    Report("Consumption Taxes Summary",ConsTaxSumRClass,ConsTaxSumRn,0,modSL);
  end;
  if (HasLocalization("EST")) then begin
    Report("Converting bank accounts (IBAN)",ConverttoIBANRClass,ConverttoIBANRn,0,modSL);
  end;
  Report("Credit Notes, Updating #Stock#",CrStckRClass,CrStckRn,0,modSL);
  Report("Customer Credit Status",CredStatusRClass,CredStatusRn,0,modSL);
  Report("Customer Sales Statistics",CustSalesRClass,CustSalesRn,0,modSL);
  Report("Customer Statistics",CustSTRClass,CustSTRn,0,modSL);
  Report("Customer Status",CustPSRClass,CustPSRn,0,modSL);
  if (HasLocalization("ARG")) then begin
    Report("Customer Withholdings",CustWithHoldRClass,CustWithHoldRn,0,modSL);
  end;
  Report("Customer/Item Statistics",CuArtSTRClass,CuArtSTRn,0,modSL);
  if (HasLocalization("EST")) then begin
    Report("Data validation (Electronic Invoice)",FindMisMatchRClass,FindMisMatchRn,0,modSL);
  end;
  Report("Discount Statistics",Cust2STRClass,Cust2STRn,0,modSL);
  if (HasLocalization("ARG")) then begin
    Report("Electronic Invoice Status (Argentina)",HTSStatArgIVRClass,HTSStatArgIVRn,0,modSL);
  end;
  Report("Electronic Invoice Status",HTSStatIVRClass,HTSStatIVRn,0,modSL);
//  Report("Electronic Invoice Status",HTSIVStatRClass,HTSIVStatRn,0,modSL);//wierd one
  Report("EU #VAT# Sales",SLEUVATRClass,SLEUVATRn,0,modSL);
  if (HasLocalization("SVN")) then begin
//  Report("EU #VAT# Sales, Slovenia",SLEUVATSloRClass,SLEUVATSloRn,0,modSL);
  end;
  if (HasLocalization("NOR,SWE,FIN")) then begin
    Report("E-Invoicing Customer Data",EInvCustDataRClass,EInvCustDataRn,0,modSL);
  end;    
  if (HasLocalization("EST")) then begin
    Report("Failed Electronic Invoices",eAKErrInvRClass,eAKErrInvRn,0,modSL);
  end;
  if (HasLocalization("UKR")) then begin
    Report("First Event Sales Journal",FEIVJRClass,FEIVJRn,0,modSL);
  end;
  Report("Gift Vouchers",GiftCerRClass,GiftCerRn,0,modSL);
  Report("GP, Invoices",IVGPRClass,IVGPRn,0,modSL);
  Report("Interest Invoicing",CUIntRClass,CUIntRn,0,modSL);
  if (HasLocalization("LVA")) then begin
    Report("Intrastat #S/L# (Latvia)",LatIntrastatIVRClass,LatIntrastatIVRn,0,modSL);
  end;
  Report("Invoice Journal",IVJRClass,InvoiceRn,0,modSL);
  if (HasLocalization("HUN")) then begin
    Report("Invoice Journal (Hungary)",IVJ2RClass,Invoice2Rn,0,modSL);
  end;
  Report("Invoice Media Status",IVMediaStatusRClass,IVMediaStatusRn,0,modSL);
  Report("Invoice Status",IVInfoRClass,IVInfoRn,0,modSL);
  Report("Item Classifications List",DIListRClass,DIListRn,0,modSL);
  Report("Item Group List",ITListRClass,ITListRn,0,modSL);
  Report("Item Group Sales Statistics",ItemGrSalesRClass,ItemSales2Rn,0,modSL);
  Report("Item Group #VAT#",ITVATRClass,ITVATRn,0,modSL);
  Report("Item List",ArtRClass,ArtRn,0,modSL);
  Report("Item Multi-Buy Statistics",INMultiBuyStatRClass,INMultiBuyStatRn,0,modSL);
  Report("Item Price List Statistics",INPriceListStatRClass,INPriceListStatRn,0,modSL);
  Report("Item/Quantity Statistics",INQtyRClass,INQtyRn,0,modSL);
  Report("Item/Salesman Statistics",IStatRClass,IStatRn,0,modSL);
  Report("Item Sales Statistics",ItemSalesRClass,ItemSalesRn,0,modSL);
  Report("Item Statistics",ArtSTRClass,ArtSTRn,0,modSL);
  Report("Item Turnover History",ItemTurnRClass,ItemTurnRn,0,modSL);  
  Report("Legal Invoice Forms Usage",LegInvFormRClass,LegInvFormRn,0,modSL);
  Report("Monthly Customer Sales History",MonthSalesHistCURClass,MonthSalesHistCURn,0,modSL);
  if (HasLocalization("SLV")) then begin
    Report("Monthly Sales Witholdings (El Salvador)",SLRetSLVRClass,SLRetSLVRn,0,modSL);
  end;
  Report("Monthly #Salesman# History",MonthSalesHistSMRClass,MonthSalesHistSMRn,0,modSL);
  if (HasLocalization("LVA")) then begin
    Report("Natural Resource Usage",ItemResourceUsageRClass,ItemResourceUsageRn,0,modSL);
  end;
  Report("#N/L# Transfer, Invoices",BokundRClass,BokundRn,0,modSL);
  Report("Open Invoice Customer Statement",ARS2RClass,ARS2Rn,0,modSL);
  Report("Overview of #Instalments#",InstListSLRClass,InstListSLRn,0,modSL);
  if (HasLocalization("ARG")) then begin
    Report("Perceptions Taxes",RPTaxJRClass,RPTaxJRn,0,modSL);
  end;
  Report("Periodic Customer Statement",CuPer2RClass,CuPerRn,0,modSL);
  Report("Prepayment History #S/L#",PerPayHisSLRClass,PerPayHisSLRn,0,modSL);
  Report("Price List",PriceRClass,PriceRn,0,modSL);
  Report("Receipt History",CUPayHistoryRClass,CUPayHistoryRn,0,modSL);
  Report("Receipt Journal",IPRClass,IPRn,0,modSL);
  Report("Receipt/Salesman History", IPSalesManRClass,IPSalesManRn,0,modSL);  
  Report("Receipts Forecast",IPProgRClass,IPProgRn,0,modSL);
  if (HasLocalization("ARG")) then begin
    Report("Regional Taxes",RegVATCodeJRClass,RegVATCodeJRn,0,modSL);
  end;
  if (HasLocalization("RUS")) then begin
    Report("Sales Book",SalesB1RClass,SalesB1Rn,0,modSL);
  end;
  Report("#Sales Ledger#",ARRClass,ARRn,0,modSL);
  Report("#Sales & Purchase Ledger#",ARAPRClass,ARAPRn,0,modSL);
  Report("#Sales Ledger# Statistics",SLStatRClass,CUHistRn,0,modSL);
  Report("Sales Per Hour",IVPerHourRClass,IVPerHourRn,0,modSL);
  Report("Sales Per Location",IVPerLocRClass,IVPerLocRn,0,modSL);
  Report("Search for Item",SearchItemRClass,SearchItemRn,0,modSL);
  Report("Serial No. Item Sales Statistics",SerialItemStatRClass,SerialItemStatRn,0,modSL);
  Report("Transaction Tax Invoices", TransTaxIVRClass,TransTaxIVRn,0,modSL);  
  Report("#VAT Code# Statistics",SLVATRClass,SLVATRn,0,modSL);
  if (HasLocalization("UKR")) then begin
    Report("#VAT# Correction #S/L# Register (Ukraine)",VATIVRegUkrRClass,VATIVRegUkrRn,0,modSL);
  end;
  Report("#VAT# Customer Sales",RealCustRClass,RealCustRn,0,modSL);
  if (HasLocalization("PHL")) then begin
    Report("#VAT# Output",VATCustSalesPHLRClass,VATCustSalesPHLRn,0,modSL);
  end;
  if (HasLocalization("LVA")) then begin
    Report("#VAT# Declaration Annex, #VAT#-2 (Latvia)",LATEUSalesRClass,LATEUSalesRn,0,modSL);
  end;  
  Report("#VAT# Differences",LithDiffRClass,LitDifRn,0,modSL);
  Report("#VAT# per Customer",SLVATCURClass,SLVATCURn,0,modSL);
  Report("#VAT Reg. Number# History",CUVERClass,CUVERn,0,modSL);
  if (HasLocalization("SLV")) then begin
    Report("#VAT# Report Base (El Salvador)",SLVATBaseSLVRClass,SLVATBaseSLVRn,0,modSL);
  end;
  Report("#VAT# Report Sales",SLVATRepRClass,SLVATRepRn,0,modSL);
  if (HasLocalization("ARG")) then begin
    Report("#VAT# Report Sales (Argentina)",SLVATArgRClass,SLVATArgRn,0,modSL);  
  end;
  if (HasLocalization("BOL")) then begin
    Report("#VAT# Report Sales (Bolivia)",SLVATBolRClass,SLVATBolRn,0,modSL);
  end;
  if (HasLocalization("SLV")) then begin
    Report("#VAT# Report Sales (El Salvador)",SLVATSLVRClass,SLVATSLVRn,0,modSL);
  end;
  if (HasLocalization("GTM")) then begin
    Report("#VAT# Report Sales (Guatemala)",SLVATGTRClass,SLVATGTRn,0,modSL);
  end;
  if (HasLocalization("HND")) then begin
    Report("#VAT# Report Sales (Honduras)",SLVATHonRClass,SLVATHonRn,0,modSL);  
  end;
  if (HasLocalization("HUN")) then begin
    Report("#VAT# Report Sales (Hungary)",SLVATHunRClass,SLVATHunRn,0,modSL);  
  end;
  if (HasLocalization("KEN")) then begin
    Report("#VAT# Report Sales (Kenya)",SLVATKenRClass,SLVATKenRn,0,modSL);  
  end;
  if (HasLocalization("LTU,KEN")) then begin
    country = "(Lithuania)";
    if (HasLocalization("KEN")) then begin 
      country = "(Kenya 1)";
    end;  
    Report("#VAT# Report Sales " & country,SLVATLitRClass,SLVATLitRn,0,modSL);  
  end;
  if (HasLocalization("MEX")) then begin
    Report("#VAT# Report Sales (Mexico)",SLVATMexRClass,SLVATMexRn,0,modSL);
  end;
  if (HasLocalization("NIC")) then begin
    Export("#VAT# Report Sales (Nicaragua)",SLVATNIRClass,SLVATNIRn,modSL);
  end;
  if (HasLocalization("PAN")) then begin
    Report("#VAT# Report Sales (Panama)",SLVATPARClass,SLVATPARn,0,modSL);
  end;
  if (HasLocalization("SRB")) then begin
    Report("#VAT# Report Sales (Serbia)",SLVATSerRClass,SLVATSerRn,0,modSL);  
  end;
  if (HasLocalization("UKR")) then begin
    Report("#VAT# Report (Ukraine)",SLVATUkrRClass,SLVATUkrRn,0,modSL);  
  end;
  Report("Void Report",VoidedRowsRClass,VoidedRowsRn,0,modSL);

/* Complain to Kjell before the end of January if you need this */
//  Report("Aged Receivables",AgRcRClass,AgedRecRn,0,modSL);
//  Report("Intrastat",IntraStaRClass,IntraStaRn,0,modSL);
/* This is NOT in English... I know the company is called Kredits... but... */
//  Report("Kredittstyring",KreditstyRClass,KreditstyRn,0,modSL);  

  Export("Analytical Cash Flow",ExportCashFlowEClass,ExportCashFlowEn,modSL);
  if (HasLocalization("HRV,SVN")) then begin
    Export("(Croatia, Slovenia) Cash Invoices Export",CashInvCroEClass,CashInvExEn,modSL);
  end;
  if (HasLocalization("MEX")) then begin
    Export("CFDI E-invoicing",CFDIEInvEClass,CFDIEInvEn,modSL);
  end;
  if (HasLocalization("NOR")) then begin
    Export("Compello Invoices",CompelloInvEClass,CompelloInvEn,modSL);
    Export("Compello XML Invoices",CompelloXMLInvRClass,CompelloXMLInvEn,modSL);
  end;
  if (HasLocalization("PRT")) then begin
//    Export("Communication of Invoices to AT - SAFT",PortTaxXml2EClass,PortTaxXml2En,modSL);
  end;
  if (HasLocalization("SWE")) then begin
    Export("Credit Control",KreditstyEClass,KreditstyEn,modSL);
  end;
  Export("Customer Statistics",CustSTEClass,CustSTEn,modSL);
  Export("Customer Turnover History",CustTurnEClass,CustTurnEn,modSL);
  Export("Customer/Item Statistics",ICSEClass,ICSEn,modSL);
// These DD functions should have one window, one selection, depending on bank files setting or something
  if (HasLocalization("DEN")) then begin
    Export("DanInvoice",DanInvoiceEClass,DanInvoiceEn,modSL);
  end;
  if (HasLocalization("NOR")) then begin
    Export("Debt Collection to Predator",InvInkassoEClass,InvInkassoEn,modSL);
  end;
  if (HasLocalization("EST")) then begin
    Export("Direct Debit to Hansabank",DDHansaEClass,DDHansaEn,modSL);
  end;
//  Export("Direct Debit to Norwegian BBS",DDNorBBSEClass,DDNorBBSEn,modSL);
  if (HasLocalization("HRV")) then begin
    Export("EU #VAT# Sales",SLEUVATHRVECLass,SLEUVATHRVEn,modSL);
  end;
  if (HasLocalization("EST")) then begin
    Export("Electronic Invoice",eInvoiceEClass,eInvoiceEn,modSL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("EU Sales Export",LatEUSalesEClass,LatEUSalesEn,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("EU #VAT# Sales",SLEUVATLitECLass,SLEUVATLitEn,modSL);
  end;
  if (HasLocalization("MEX")) then begin
    Export("E-Invoices Journal (Mexico)",EInvoicesJMexEClass,EInvoicesJMexEn,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Export("Finvoice",FInvoiceEClass,FInvoiceEn,modSL);
  end;
  if (HasLocalization("UKR")) then begin
    Export("First Event Sales Book",FEIVBookEClass,FEIVBookEn,modSL);  
  end;
  if (HasLocalization("BRA")) then begin
    Export("Fiscal Note for Services",BraFiscalNoteEClass,BraFiscalNoteEn,modSL); 
  end;
  if (HasLocalization("CZE,SVK")) then begin
    Export("Intrastat #S/L# (Czech Republic)",CZIntrastatIVEClass,CZIntIVEn,modSL);
  end;
  if (HasLocalization("EST")) then begin
    Export("Intrastat #S/L# (Estonia)",EstIntrastatIVEClass,EstIntIVEn,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Export("Intrastat #S/L# (Finland)",FinIntrastatIVEClass,FinIntIVEn,modSL);
  end;
  if (HasLocalization("DEU")) then begin
    Export("Intrastat #S/L# (Germany)",GerIntrastatIVEClass,GerIntIVEn,modSL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("Intrastat #S/L# (Latvia)",LatIntrastatIVEClass,LatIntrastatIVEn,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("Intrastat #S/L# (Lithuania)",LitIntrastatIVEClass,LitIntIVEn,modSL);
  end;
  if (HasLocalization("SWE")) then begin
    Export("Intrastat #S/L# (Sweden, IDEP-SCB)",SWEIntraStatIVEClass,SWEIntraStatIVEn,modSL);
  end;
  Export("Intrastat Invoices",EngIntrastatIVEClass,EngIntIVEn,modSL);
  if (HasLocalization("GBR")) then begin
    Export("Intrastat Invoices (UK)",EngIntrastatIVUKEClass,EngIntIVUKEn,modSL);
  end;
  Export("Invoices for Factoring",InvFactEClass,InvFactEn,modSL);
  if (HasLocalization("SVN")) then begin
    Export("Invoices #S/L# (Slovenia)",IVSloEClass,IVSloEn,modSL);
  end;
  Export("Item Statistics",ArtSTEClass,ArtSTEn,modSL);
  Export("Item Turnover History",ItemTurnEClass,ItemTurnEn,modSL);
  Export("Items to Fiscal Printer Fi550",ItemstoFi550EClass,ItemstoFi550En,modSL);
  if (HasLocalization("ARG")) then begin
    Export("#P/L# Withholding and Perceptions (Argentina)",PLARCIBAEClass,PLARCIBAEn,modSL);
    Export("Regional Withholdings (Argentina)",SIFEREEClass,SIFEREEn,modSL);
    Export("#S/L# CITI (Argentina)",SLCITIEClass,SLCITIEn,modSL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#S/L# Forest Export", ForestSLEClass,ForestSLEn,modSL);
  end;
  if (HasLocalization("ARG")) then begin
    Export("#S/L# Taxes - (Argentina)",SLWORMArgEClass,SLWORMArgEn,modSL);
    Export("#S/L# #VAT# Gross Income Perception (Argentina)",SLGIPArgEClass,SLGIPArgEn,modSL);
    Export("#S/L# #VAT# Gross Income Perceptions per Region (Argentina)",SLGIPRArgEClass,SLGIPRArgEn,modSL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#VAT# Declaration Annex #VAT#1-III (Latvia)",LatVATSalesEClass,LatVATSalesEn,modSL);
  end;
  if (HasLocalization("BOL")) then begin
    Export("#S/L# #VAT# Invoices (Bolivia)",SLVATBolEClass,SLVATBolEn,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#S/L# #VAT# Invoices (Lithuania)",LitVATRegIVEClass,LitVATRegIVEn,modSL);
  end;
  if (HasLocalization("SVN")) then begin
    Export("#S/L# #VAT# Invoices (Slovenia)",SLVATSloEClass,SLVATSloEn,modSL);
  end;
  if (HasLocalization("ARG")) then begin
    Export("#S/L# #VAT# Withholdings (Argentina)",SLVATWithArgEClass,SLVATWithArgEn,modSL);
  end;
  if (HasLocalization("HUN")) then begin
    Export("Tax Authority Control Data Service",HunTaxControlXmlEClass,HunTaxControlXmlEn,modSL);
  end;
//  Export("Telema Invoice (Estonia)",TelemaInvEClass,TelemaInvEn,modSL);
  if (HasLocalization("POL")) then begin
    Export("Ist@at - Items Export",IstaatItemExportEClass,IstaatItemExportEn,modSL);
  end;
  
  Import("Banking File",RefIPIn,RefIPIn,modSL);
  if (HasLocalization("MEX")) then begin
    Import("CFDI E-invoicing (Mexico)",0,CFDIEInvIn,modSL);
  end;
  if (HasLocalization("BRA")) then begin
    Import("Fiscal Note for Services Reply",0,BraFiscalNoteIn,modSL);
  end;
  if (HasLocalization("ARG")) then begin
    Import("Regional Perceptions & Withholdings (Argentina)",PercAndWHIClass,PercAndWHIn,modSL);
    Import("Regional Perceptions & Withholdings Corrections (Argentina)",PercAndWHCorrIClass,PercAndWHCorrIn,modSL);
  end;

  if (HasLocalization("MEX")) then begin
    Maintenance("CFDI E-invoicing Import (Mexico)",CFDIEInvVClass,CFDIEInvMn,modSL);
  end;
  Maintenance("Create Down Payment Invoices from Receipts",DownPayFromIPVClass,DownPayFromIPMn,modSL);
  Maintenance("Create Interest Invoices",CUIntVClass,CUIntMn,modSL);
  Maintenance("Create Mails from Invoices",IVToMailVClass,IVToMailMn,modSL);
  Maintenance("Create Open Invoice Customer Statement Email",ARSEmailVClass,ARSEmailMn,modSL);
  Maintenance("Create Periodic Customer Statement Email",CUPerEmailVClass,CUPerEmailMn,modSL); // We have this belowe SendPerStatVClass
  if (HasLocalization("EST")) then begin
    Maintenance("Create Receipts from Bank Transactions",IPFromBankTRVClass,IPFromBankTRMn,modSL);
  end;
  if (HasLocalization("HRV,POL,SVN,SRB,UKR")) then begin
    Maintenance("Create #VAT# Corrections #S/L#",VATIVVClass,VATIVMn,modSL);
  end;
  Maintenance("Delete Unused Items",DelNotUsedINVClass,DelNotUsedINMn,modSL);
  if (HasLocalization("EST")) then begin
    Maintenance("Direct Debit to SEB",DDSEBOClass,DDSEBMn,modSL);
    Maintenance("Generate Service ID/ Reference Number",AutoRefStrVClass,AutoRefStrMn,modSL);
  end;
  Maintenance("OK Invoices",OKInvVClass,OKInvMn,modSL);
  Maintenance("OK Invoices (Non Stop)",OKInvVClass,OKInvNSMn,modSL);
  Maintenance("Recreate Reference Field",RebFinRefVClass,RebFinRefMn,modSL);
  if (HasLocalization("PRT")) then begin
    Maintenance("SAFT to Email",SAFTtoEmailVClass,SAFTtoEmailMn,modSL);
  end;
  if (HasLocalization("EST")) then begin
    Maintenance("Resend Electronic Invoices",ResendEstEInvVClass,ResendEstEInvMn,modSL);
  end;
  if (HasLocalization("MEX")) then begin
    Maintenance("Send E-Invoices spool file (Mexico)",MexEInvSpoolVClass,MexEInvSpoolMn,modSL);
  end;
  Maintenance("Transfer to Bad Debtors",BadCUVClass,BadCUMn,modSL);
  Maintenance("Update Customer Classification",CustUpClass,CustUpMn,modSL);
  Maintenance("Write off Invoices",WriteOffVClass,WriteOffMn,modSL);
  

/* modSO */
  
  RegisterWS("Orders","Orders","New Order",ORVc,modSO);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modSO);
  RegisterWS("Items","Items","New Item",INVc,modSO);
  RegisterWS("Prices","Prices","New Price",PLVc,modSO);
  RegisterWS("Sales Contracts","Sales Contracts","New Sales Contract",ORCOVc,modSO);
/* What is this???????? */
//  Register("Repl Items","Repl Items",ReplINVc,modSO);

  Setting("Customer Items",CUINLClass,modSO);
  Setting("Delivery Addresses",DelAddrLClass,modSO);
  Setting("Delivery Modes",DMLClass,modSO);
  Setting("Delivery Terms",ShipDealLClass,modSO);
  Setting("Down Payments",DownPayTClass,modSO);
  Setting("Hazard Levels",HazLevLClass,modSO);
  Setting("Number Series - Orders",ORSerTClass,modSO);
  Setting("Order Classes",OrderClassLClass,modSO);
//  Setting("Order Mail",ORMailTClass,modSO);
  Setting("Order Settings",OrdSettTClass,modSO);
  Setting("Planned Delivery",PlanDeliveryTClass,modSO);
  Setting("#Stock# Reservation Access",ReservLocAccessLClass,modSO);
  Setting("#Stock# Reservation Settings",StockReservTClass,modSO);
  Setting("#Stock# Reservations",StockReservLClass,modSO);

  Document("Customer/#Supplier# Labels",CuLabRClass,CuLabForm,CuLabFClass,modSO);
  Document("Internal Sales Orders",Or2RClass,Or2Form,Or2FClass,modSO);
  Document("Orders",ORRClass,OrdForm,OrdFClass,modSO);
  
  Report("Deliverable List",ShipableRClass,ShipableRn,0,modSO);
  Report("Delivery List",DeliveryRClass,DeliveryRn,0,modSO);
  Report("Forecast",ForecastRClass,ForecastRn,0,modSO);
  Report("GP, Orders",ORGPRClass,ORGPRn,0,modSO);
  Report("Invoiceable Orders",InvableRClass,InvableRn,0,modSO);
  Report("Item List",ArtRClass,ArtRn,0,modSO);
  Report("Object/Order Statistics",ORObjStatRClass,ORObjStatRn,0,modSO);
  Report("Order Journal",ORJRClass,OrdRn,0,modSO);
  Report("Order Payment Status",ORPayStatusRClass,ORPayStatusRn,0,modSO);
  Report("Order Status",ORInfoRClass,ORInfoRn,0,modSO);
  Report("Ordered Items",OrdItemRClass,OrdItemRn,0,modSO);
  Report("Outstanding Orders",OrderStockRClass,OrderStockRn,0,modSO);
  Report("Over Delivered Orders",OverShippedRClass,OverShippedRn,0,modSO);
  Report("Price List",PriceRClass,PriceRn,0,modSO);
  Report("Producible List",MaxprodRClass,MaxprodRn,0,modSO);
  Report("Sorted Order List",SORJRClass,SORJRn,0,modSO);
  Report("Sourcing List",SourceRClass,SourceRn,0,modSO);
  Report("#Stock# Reservations",INReservRClass,INReservRn,0,modSO);
  
  Maintenance("Barcode, EU Code and Item Code",ICToBCVClass,ICToBcMn,modSO);
  Maintenance("Create Deliveries from Orders",CreateSHsFSOsVClass,CreateSHsFromSOsMn,modSO);
  Maintenance("Create Downpayment Invoices",DPFromORVClass,DownPayFromORMn,modSO);
  Maintenance("Create Planned Records from Ordered Items",PlanRecordsVClass,PlanRecordsMn,modSO);
  Maintenance("Create Planned Records from Orders",PlanSalesVClass,PlanSalesMn,modSO);
  Maintenance("Create #Purchase Orders#",GenPOFromORVClass,GenPOFromORMn,modSO);
  Maintenance("Create #Stock# Movements",SMFromORVClass,SMFromORMn,modSO);
  Maintenance("Group Invoicing",GroupInvoiceVClass,GroupInvoiceMn,modSO);
  Maintenance("Invoice Delivered Orders",CreateInvVClass,CreateInvMn,modSO);
  Maintenance("Recalculate Orders",RecalcORVClass,RecalcORMn,modSO);
/* WHAT IS THIS  ????? , it was written in HAL, someone has changed it and commented out, it was not me JJ*/
//  Maintenance("Create Simulations from Orders",CreateSMVClass,CreateSMMn,modSO);
/*##  Maintenance("Recalc #Stock#",FixStockVClass,FixStockMn,modSO);*/

/*modPO*/

  RegisterWS("#Purchase Orders#","#Purchase Orders#","New #Purchase Order#",POVc,modPO);
  RegisterWS("Purchase Quotations","Purchase Quotations","New Purchase Quotation",POQTVc,modPO);
  RegisterWS("Internal Orders","Internal Orders","New Internal Order",IntORVc,modPO);
  RegisterWS("Purchase Items","Purchase Items","New Purchase Item",PIVc,modPO);
  RegisterWS("Items","Items","New Item",INVc,modPO);
  RegisterWS("Purchase Order Processes","P/Order Processes","New P/Order Processes",POCQStatVc,modPO);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modPO);
  RegisterWS("Shipment Notification","Shipment Notification","New Shipment Notification",DropSHVc,modPO);
//  Register("#Supplier# Packing Lists","#Supplier# Pack Lists",SPLVc,modPO);//not finished, no waction, no code, do not put it in pls
  
  Setting("Delivery Terms",ShipDealLClass,modPO);
  Setting("Down Payments",PODownPayTClass,modPO);
  Setting("Internal Order Classes",IntORClassLClass,modPO);
  Setting("Internal Order Settings",IntORSettingTClass,modPO);
  Setting("Number Series - Internal Orders",IntORSerTClass,modPO);
  Setting("Number Series - Purchase Order Processes",POCQStatSerTClass,modPO);
  Setting("Number Series - Purchase Order Quotations",POQTSerTClass,modPO);
  Setting("Number Series - #Purchase Orders#",POSerTClass,modPO);
//  Setting("Number Series - #Supplier# Packing Lists",SPLSerTClass,modPO);//not finished, no waction, no code, do not put it in pls
  Setting("Price Ranges",PriceRangeTClass,modPO);
  Setting("Purchase Order Classes",POrderClassLClass,modPO);
  Setting("Purchase Order Mail",POMailTClass,modPO);
  Setting("Purchase Order Settings",POSettingTClass,modPO);
  Setting("Tenders",TenderLClass,modPO);

  Document("Internal Orders",IntORRClass,IntORForm,IntORFClass,modPO); 
  Document("Purchase Order Confirmations",POConfRClass,POConfForm,POConfFClass,modPO);
  Document("Purchase Order Reminders",PORemRClass,PORemForm,PORemFClass,modPO); 
  Document("#Purchase Orders#",PORClass,POForm,POFClass,modPO); 
  Document("Purchase Quotations",POQTRClass,POQTForm,POQTFClass,modPO); 
  Document("Shipment Notifications",DropSHRClass,DropSHForm,DropSHFClass,modPO); 

  Report("Deficiency List",PurRClass,PurRn,0,modPO);
  Report("Deficiency #Stock#",DfncyStockRClass,DfncyStockRn,0,modPO);
  Report("Goods Receipt/#Purchase Invoice# Comparison",PUVIDiffRClass,PUVIDiffRn,0,modPO);
  Report("Internal Order Journal",IntOrdJRClass,IntOrdJRn,0,modPO);
  Report("Internal Order Status",IntORStatRClass,IntORStatRn,0,modPO);
  Report("Outstanding Internal Orders",IntORStockRClass,IntORStockRn,0,modPO);
  Report("Outstanding #Purchase Orders#",POOrdStockRClass,POOrdStockRn,0,modPO);  
  Report("Purchase Item Price List",PurPriceRClass,PurPriceRn,0,modPO);
  Report("Purchase Order Accruals",POCommitDetailRClass,POCommitDetailRn,0,modPO);
  Report("Purchase Order Journal",PurOrdJRClass,PurOrdJRn,0,modPO);
  Report("Purchase Order Status",POStatRClass,POStatRn,0,modPO);
  Report("Purchase Quotations Journal",PurOrdQTJRClass,PurOrdQTJRn,0,modPO);
  Report("Purchase Suggestion",CreatePORClass,CreatePORn,0,modPO);
  Report("Reordering Requirements",PORequireRClass,PORequireRn,0,modPO);  
  Report("#Supplier# Analysis",VEAnaRClass,VEAnaRn,0,modPO);
  Report("#Supplier# Evaluation",VEEvalRClass,VEEvalRn,0,modPO);
  Report("#Supplier#/Item Statistics",VeInRClass,VeInRn,0,modPO);
    
  Maintenance("Create #Purchase Orders#",CreatePOVClass,POCreateMn,modPO);
  Maintenance("Create #Purchase Orders# from Deficiency #Stock#",PODfncyStockVClass,DfncyStockMn,modPO);
  Maintenance("Delete Purchase Items",DelPIVcVClass,DelPIVcMn,modPO);
  Maintenance("Recalculate #Purchase Orders#",RecalcPOVClass,RecalcPOMn,modPO); // should be in modDBMain
  Maintenance("Reordering Requirements",PORequireVClass,PORequireMn,modPO);
  Maintenance("Update Purchase Items",UpdatePIVClass,UpdatePIMn,modPO);

/* modQT */

  RegisterWS("Quotations","Quotations","New Quotation",QTVc,modQT);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modQT);
  RegisterWS("Items","Items","New Item",INVc,modQT);
  RegisterWS("Prices","Prices","New Price",PLVc,modQT);
//  Register("Pre Quotations","Pre Quotations",PreQTVc,modQT); no funcionality for this one

  Setting("Number Series - Quotations",QTSerTClass,modQT);
  Setting("Quotation Classes",QuoteClassTClass,modQT);
  Setting("Quotation Settings",QTSettTClass,modQT);

  Document("Quotations",QTRClass,QTForm,QTFClass,modQT);
  if (HasLocalization("AGO,PRT")) then begin
    Document("Proforma Invoice, Quotations",ProformaQTRClass,ProformaQTForm,ProformaQTFClass,modQT);
  end;

  Report("Accepted Quotations Journal",QTHistoryRClass,QTHstRn,0,modQT);
  Report("Outstanding Quotations",QTStkRClass,QTStkRn,0,modQT);
  Report("Pipeline",QTPipelineRClass,QTPipelineRn,0,modQT);
  Report("Price List",PriceRClass,PriceRn,0,modQT);
  if (HasLocalization("AGO,PRT")) then begin
    Report("Proforma Invoice Journal",ProformaIVJRClass,ProformaIVJRn,0,modQT);
  end;
  Report("Quotation Decision Statistics",QTAccRClass,QTAccRn,0,modQT);
  Report("Quotation Forecasting",QTForeCRClass,QTForecRn,0,modQT);
  Report("Quotation Journal",QTJRClass,QTJRn,0,modQT);
  Report("Quotation #Salesman# Statistics",QTSMStatsRClass,QTSMStatRn,0,modQT);
  Report("Quotation Status",QTStatusRClass,QTStatusRn,0,modQT);
//  Report("Forecast",ForecastRClass,ForecastRn,0,modQT);
//  Report("Quotation Statistics",QTStatRClass,QTStatRn,0,modQT);

  Maintenance("Update Quotations",UpdateQTVClass,UpdateQTMn,modQT);

/* modDI */
  
  RegisterWS("Items","Items","New Item",INVc,modDI);
  RegisterWS("Item Formulae","Item Formulae","New Item Formula",CPMVc,modDI);
  RegisterWS("Discount Matrices","Discount Matrices","New Discount Matrix",RebVc,modDI);
  RegisterWS("Multi-buy Discounts","Multi-buy Discounts","New Multi-buy Discount",MultiBuyRebVc,modDI);
  RegisterWS("Prices","Prices","New Price",PLVc,modDI);
  RegisterWS("Price Lists","Price Lists","New Price List",PLDefVc,modDI);
  RegisterWS("Price Formulae","Price Formulae","New Price Formula",PFormVc,modDI);
  RegisterWS("Quantity Dependent Discounts","Qty Depend. Discounts","New Qty Depend. Discount",StaffVc,modDI);

  Report("Discount Matrices List",RebListRClass,RebListRn,0,modDI);
  Report("Discount Statistics",Cust2STRClass,Cust2STRn,0,modDI);
  Report("Item List",ArtRClass,ArtRn,0,modDI);
  Report("Price List",PriceRClass,PriceRn,0,modDI);
  Report("Sales Price Control",SalesPriceCheckRClass,SalesPriceCheckRn,0,modDI);

  if (HasLocalization("DEN")) then begin
    Import("Item Prices import",INDanIn,INDanIn,modDI);
  end;
  Import("Update Cost Prices import",INPrUpdIn,INPrUpdIn,modDI);

  Setting("Qty Dependent Prices",PLQLClass,modDI);
  Setting("Item Groups",ITLClass,modDI);

  Maintenance("Calculate Prices",CalcPricesVClass,CalcPriceListsMn,modDI);
  Maintenance("Delete Prices",DelPriceListVClass,DelPriceLMn,modDI);
  Maintenance("Update Item Base Prices",ItemPricesVClass,ItemPricesMn,modDI);
  Maintenance("Update Item Cost Prices",ItemCostPricesVClass,INCostPriceMn,modDI);
        
/* modIN */
  
  RegisterWS("Deliveries","Deliveries","New Delivery",SHVc,modIN);
  RegisterWS("Goods Receipts","Goods Receipts","New Goods Receipt",PUVc,modIN);
  RegisterWS("#Stock Depreciations#","#Stock Depreciations#","New #Stock Depreciation#",SDVc,modIN);
  if (HasMultiLocations) then begin
    RegisterWS("#Stock# Movements","#Stock# Movements","New #Stock# Movement",StockMovVc,modIN);
  end;
  if (HasReturnedGoods) then begin
    RegisterWS("Returned Goods","Returned Goods","New Returned Goods",RetVc,modIN);
  end;
  if (HasRetGoodsToSupp) then begin
    RegisterWS("Returned Goods to #Suppliers#","Ret. Goods to #Suppliers#","New Ret. Goods to #Supplier#",RetPUVc,modIN);
  end;
  RegisterWS("#Stocktaking#","#Stocktaking#","New #Stocktaking#",StockTakeVc,modIN);
  RegisterWS("#Stock# Revaluations","#Stock# Revaluations","New #Stock# Revaluation",SRVc,modIN);

  Setting("Account Usage #Stock#",INAccTClass,modIN); 
  Setting("Barcodes",BarcodeLClass,modIN);
  Setting("Base Price Changes",BPCLClass,modIN);
  Setting("Batch Specifications",BatchTextLClass,modIN);
  Setting("Cost Accounting",CostAccTClass,modIN);
  Setting("Delivery Packages",SHPackagesLClass,modIN);
  if (HasLocalization("PRT")) then begin //aloc ? 
    Setting("Electronic Shipment",EShipPRTTClass,modIN);
  end;
  Setting("Freight Companies",FreightCompanyLClass,modIN);
  Setting("Item Varieties",VARLClass,modIN);
  Setting("Item Variety Groups",VARGLClass,modIN);
  Setting("Items",INLClass,modIN);
  Setting("Location Accounts",LocationAccTClass,modIN); 
  Setting("Location Classification Types",LocClTypeLClass,modIN);
  Setting("Location Classifications",LocClLClass,modIN);
  Setting("Location Groups",LocGrLClass,modIN);
  Setting("Locations",LocationLClass,modIN);
  Setting("Minimum #Stock# Levels",MinPerLocLClass,modIN);
  Setting("Number Series - Deliveries",SHSerTClass,modIN);
  Setting("Number Series - Goods Receipts",PUSerTClass,modIN);
  Setting("Number Series - Returned Goods",RetSerTClass,modIN);
  Setting("Number Series - Returned Goods to #Supplier#",RetPUSerTClass,modIN);
  Setting("Number Series - #Stock Depreciations#",SDSerTClass,modIN);
  Setting("Number Series - #Stock# Movements",StockMovSerTClass,modIN);
  Setting("Number Series - #Stock# Revaluations",SRSerTClass,modIN);
  Setting("Number Series - #Stocktaking#",StockTakeSerTClass,modIN);
  Setting("Pack Types",PackTypeLClass,modIN);
  Setting("Picking Lists",PrickingListTClass,modIN);
  Setting("Recipes",RecLClass,modIN);
  Setting("Returned Goods Settings",RetGoodsTClass,modIN);
  Setting("Routes",DelRouteLClass,modIN);
  Setting("Routes/Locations Setting",CustRouteLClass,modIN);
  Setting("Serial Number Tracking",SerNrTrackTClass,modIN);
  Setting("Sources",SourceLClass,modIN);
  Setting("#Stock# Movement Durations",DurationLClass,modIN);
  Setting("#Stock# Revaluation Settings",SRSTClass,modIN);
  Setting("#Stock# Settings",MainStockTClass,modIN);
  Setting("Structured Items",StructPrintTClass,modIN);
  Setting("Supersession Items",SupersessionINLClass,modIN);
  Setting("#Supplier# Store ID's",VEStoreIDLClass,modIN);
  Setting("User Def. Field Labels - Extra Costs",ExtraCostLabelTClass,modIN);
  Setting("Variety Masks",VARMaskTClass,modIN);
  Setting("Variety Sets",VARMasksLClass,modIN);
  Setting("Variety Settings",VarietyTClass,modIN);
  Setting("Variety Subsets",VARSubsetsLClass,modIN);
  Setting("Weighted Average",WeigAvLClass,modIN);
  if (HasLocalization("NOR")) then begin 
    Setting("Winedi",WinediTClass,modIN); 
  end;
//  Setting("Goods In Transit",PrelPULClass,modIN);//not finished, noone interested in
//  Setting("Late Cost",LateCostLClass,modIN); will be in 4.1
//  Setting("Number Series - Late Cost",LateCostSerTClass,modIN); will be in 4.1
//  Setting("SerBals",SerBalLClass,modIN);

  Document("Address Labels",AdrLabRClass,AdrLabForm,AdrLabFClass,modIN);
  Document("Base Price Change",BasePriceChangeRClass,BPChangeForm,BasePriceChangeFClass,modIN);
  Document("Delivery Notes",Sh1RClass,Sh1Form,Sh1FClass,modIN);
  Document("Freight Labels",SHLabRClass,SHLabForm,SHLabFClass,modIN);
  Document("Goods Receipt Labels",PULabRClass,PULabForm,PULabFClass,modIN);
  Document("Goods Receipts",PurchaseRClass,PurchaseForm,PurchaseFClass,modIN);
  Document("Item Labels",ItemLabelRClass,ItemLabelForm,ItemLabelFClass,modIN);
  Document("Picking Lists",Sh2RClass,Sh2Form,Sh2FClass,modIN);
  Document("Proforma Deliveries",Sh3RClass,Sh3Form,Sh3FClass,modIN);
  Document("Returned Goods",RetRClass,RetForm,RetFClass,modIN);
  Document("Returned Goods To #Supplier#",RetPURClass,RetPurchaseForm,RetPUFClass,modIN);
  Document("#Stock Depreciations#",SDRClass,SDForm,SDFClass,modIN);
  Document("#Stock# Movements",StockMovRClass,StockMovForm,StockMovFClass,modIN);
  Document("#Stock# Revaluations",SRRClass,SRForm,SRFClass,modIN);
  Document("#Stocktaking# Comparison",STRClass,StockTakeForm,StockTakeFClass,modIN);
//  Document("Goods In Transit",PrelPURClass,PrelPUForm,PrelPUFClass,modIN); // no source code
//  Document("Late Cost",LateCostRClass,LateCostForm,LateCostFClass,modIN); will be in 4.1

  Report("Aged #Stock# Analysis",AgedINRClass,AgedINRn,0,modIN);
  Report("Best Before List",BestBefRClass,BestBefRn,0,modIN);
  Report("Cost Price Analysis",INCostAnalyseRClass,INCostAnalyseRn,0,modIN);
  Report("Credit Notes, Updating #Stock#",CrStckRClass,CrStckRn,0,modIN);
  Report("Deficiency List",PurRClass,PurRn,0,modIN);
  Report("Deficiency List per Location",PurLocRClass,PurLocRn,0,modIN);
  Report("Delivery Journal",SHJRClass,ShipRn,0,modIN);
  Report("Delivery List",SHListRClass,ShipListRn,0,modIN);
  if (HasLocalization("SRB")) then begin
    Report("Evidence of Trade (KEPU, Serbia)",KEPURClass,KEPURn,0,modIN);
  end;
  if (HasLocalization("HRV")) then begin
    Report("Evidence of Trade (KP)",KPHRVRClass,KPHRVRn,0,modIN);  
  end;
  Report("Goods Receipt Journal",PUJRClass,PUJRn,0,modIN);
  Report("Goods Receipt List",PUListRClass,PUListRn,0,modIN);
//  Report("Goods Receipt Reconciliation",PUReconRClass,PUReconRn,0,modIN);
  Report("Item Group List",ITListRClass,ITListRn,0,modIN);
  Report("Item History",INrsRClass,INrsRn,0,modIN);  
  Report("Item/Delivery Mode Statistics",INDMSRClass,INDMRn,0,modIN); 
  Report("Location List",LocationRClass,LocationRn,0,modIN);
  Report("Recipe List (Made of)",Rec2RClass,Rec2Rn,0,modIN);
  Report("Returned Goods Journal",RetJRClass,RetGoodsJRn,0,modIN);
  Report("Returned Goods To #Supplier# Journal",RetPUJRClass,RetPUJRn,0,modIN);
  if (HasLocalization("HRV")) then begin
    Report("Sales Price Calculation",SPCHRVRClass,SPCHRVRn,0,modIN);
  end;
  Report("Serial Number History",SerialNrRClass,SerialNrRn,0,modIN);
  Report("Source List",SourRClass,SourceListRn,0,modIN);  
  Report("#Stock Depreciation# Journal",SDJRClass,StockDepRn,0,modIN);
  Report("#Stock# In Journal",StockJInRClass,StockInRn,0,modIN);
//  Report("#Stock# Level Planning",PlannedStockRClass,PlannedStockRn,0,modIN);
  Report("#Stock# List",INRClass,InvValRn,0,modIN);
  Report("#Stock# List Comparison",StDifRClass,StDifRn,0,modIN);
  Report("#Stock# Movement Journal",StockMovJRClass,StockMovJRn,0,modIN);
  Report("#Stock# Out Journal",StockJOutRClass,StockOutRn,0,modIN);
  Report("#Stock# Revaluation Journal",SRJRClass,StockRevJRn,0,modIN);
  Report("#Stocktaking# Comparison",STCompRClass,STCompRn,0,modIN);
  Report("#Stocktaking# List",StockTakeRClass,StockTakeRn,0,modIN);
  Report("#Stocktaking# Journal",StTakeJRClass,StTakeJRn,0,modIN);
  Report("#Supplier#/Item Statistics",VeInRClass,VeInRn,0,modIN);
  if (HasLocalization("SRB")) then begin
    Report("Trade Book (Serbia)",TradeBookRClass,TradeBookRn,0,modIN);  
  end;
  Report("Trip Sheet",TripSheetRClass,TripSheetRn,0,modIN);
  Report("Varieties Enquiry",AvailVarsRClass,AvailVarsRn,0,modIN);
  Report("Varieties In #Stock#",VARMaskStockRClass,VARMaskStockRn,0,modIN);
  Report("Varieties Control",VarsControlRClass,VarsControlRn,0,modIN);
  Report("Weighted Average",WeighAvRClass,WeighAvRn,0,modIN);
//  Report("StockVc",StockVcListRClass,StockVcRn,0,modIN);// will be used in 4.1

  if (HasLocalization("SWE")) then begin 
    Export("ASG Labels",ExpASGEClass,ExpASGEn,modIN);
  end;
    
  if (HasLocalization("PRT")) then begin
    Export("Inventory List for Tax Authorities",PRTInventoryEClass,PRTInventoryEn,modIN);
//    Export("SAFT Stock",PortStockXmlEClass,PortStockXmlEn,modIN);
  end;  
  
  Export("#Stock# Balance",StBalClass,StBalEn,modIN);
  Export("#Stock# List",INEClass,InvValEn,modIN);
//  if (HasJewelleryInterface) then begin
//    Export("#Stock# List per Serial Number",INSerNoEClass,InvValSerNoEn,modIN);
//  end;
  if (HasLocalization("NOR")) then begin   
    Export("Winedi",WinEDIEClass,ExpWinEDIEn,modIN);
  end;

  Maintenance("Aged #Stock# Revaluation",AgedStockRevVClass,AgedStockRevMn,modIN);
  Maintenance("Cost Price Analysis Revaluation",INCostAnalyseVClass,INCostAnalyseMn,modIN);
  Maintenance("Create #Stocktaking# Records",GenSTVClass,GenSTMn,modIN);
//  Maintenance("Late Landed Cost Start",LateLandedCostVClass,LateLandedCostMn,modIN);// no func
//  Maintenance("Setup Multi-location",ConvToMultiLocationVClass,ConvToMultiLocationMn,modIN);
  Maintenance("#Stocktaking# Comparison",STCompVClass,STCompMn,modIN);
  Maintenance("Update Item Cost Price",UpdInpriceVClass,UpdInpriceMn,modIN);
  Maintenance("Update Recipes",UpdRecepyVClass,UpdRecepyMn,modIN);

/* modExp */

  RegisterWS("Expenses","Expenses","New Expense",ExpVc,modExp);
  RegisterWS("Personnel Payments","Personnel Payments","New Personnel Payment",PPVc,modExp);
  RegisterWS("#Mileages#","#Mileages#","New #Mileage#",WayListVc,modExp);
  RegisterWS("Daily Allowances","Daily Allowances","New Daily Allowance",DAVc,modExp);

  Report("Daily Allowances Journal",DAJRClass,DAJRn,0,modExp);
  Report("Expenses Journal",ExpJRClass,ExpRn,0,modExp);
  Report("Periodic Personnel Statement",PersPerRClass,PersPerRn,0,modExp);
  Report("Personnel Payment Journal",PPJRClass,PPRn,0,modExp);
  Report("#VAT Code# Statistics",ExpVATRClass,ExpVATRn,0,modExp);
  Report("Way List Journal",WLJRClass,WLJRn,0,modExp);

//  Setting("Account Usage Expenses",ExpAccTClass,modExp);
  Setting("Cars",WLCarLClass,modExp);
  Setting("Daily Allowance Rates",DARateLClass,modExp);
  Setting("Daily Allowance Setting",DATClass,modExp);
  Setting("Distances",WLDistLClass,modExp);
  Setting("Expense Settings",ExpTClass,modExp);
  Setting("Fuel Types",WLPetroilTClass,modExp);
  Setting("#Mileage# Settings",WLSettingsWClass,modExp);
  Setting("Number Series - Daily Allowances",DASerTClass,modExp);
  Setting("Number Series - Expenses",ExpSerTClass,modExp);
  Setting("Number Series - Personnel Payments",PPersSerTClass,modExp);
  Setting("Number Series - #Mileage#",WayListSerTClass,modExp);
  Setting("Purposes",WLPurposeLClass,modExp);

  Document("Daily Allowances",DARClass,DAForm,DAFClass,modExp);
  Document("Expenses",ExpRClass,ExpForm,ExpFClass,modExp);
  Document("Personnel Payment Receipts",PPRClass,PersPayForm,PPDFClass,modExp);
  Document("Way Lists",WayListRClass,WayListForm,WayListFClass,modExp);

/* modCO */

  RegisterWS("Contracts","Contracts","New Contract",COVc,modCO);
  RegisterWS("Contract Quotations","Contract Quotations","New Contract Quotation",CQVc,modCO);
  RegisterWS("Contract Status","Contract Status","New Contract Status",COCQStatVc,modCO);
  RegisterWS("Service Agreements","Service Agreements","New Service Agreement",SVCVc,modCO);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modCO);
  RegisterWS("Items","Items","New Item",INVc,modCO);
  RegisterWS("Commission Contract","Commission Contract","New Commission Contract",ComisionCOVc,modCO);
  
  Document("Contract Person Labels",ContLabRClass,ContLabForm,ContLabFClass,modCO);
  Document("Contract Quotations",ContQuoteRClass,ContQuoteForm,ContQuoteFClass,modCO);
  Document("Contracts",ContractRClass,ContractForm,ContractFClass,modCO);
  Document("Customer/#Supplier# Labels",CuLabRClass,CuLabForm,CuLabFClass,modCO); 
//  Document("Credit Query",CreditQueryRClass,CreditQueryForm,CreditQueryFClass,modCO);
//  Document("Delivery Acceptance",ContDeliveryRClass,ContDeliveryForm,ContDeliveryFClass,modCO); 
//  Document("Insurance",InsuranceRClass,InsuranceForm,InsuranceFClass,modCO);
//  Document("Transfer Notice",TransNotRClass,TransNotForm,TransNotFClass,modCO);
//  Document("Sales Agreement",ContSalesRClass,ContSalesForm,ContSalesFClass,modCO); 

  Setting("Contract Classes",ContractClassTClass,modCO);
  Setting("Contract Classification Types",HWCOClassTypeLClass,modCO);  
  Setting("Contract Defaults",CODefValTClass,modCO);
  Setting("Contract Settings",ContractSetTClass,modCO);
  Setting("Customer Contract Defaults",CUCODefValLClass,modCO);
  Setting("Item Description Type",IDTTClass,modCO);
  Setting("Number Series - Contracts",COSerTClass,modCO);
  Setting("Renew Contracts",RenewCOLClass,modCO);
//  Setting("Funder Increase",FunderIncTClass,modCO);
//  Setting("Margin",MarginTClass,modCO);
//  Setting("Purchase Option",PurOptLClass,modCO);
//  Setting("Quotation of Bond",QBLClass,modCO);
//  Setting("SWAP Option",SWAPLClass,modCO);

  Report("Contract Contacts",Contra2RClass,Contra2Rn,0,modCO);
  Report("Contract History",COHistRClass,COHistRn,0,modCO);
  Report("Contract Item Statistics",COINStatisticsRClass,COINStatisticsRn,0,modCO);
  Report("Contract List",CORClass,CORn,0,modCO);
  Report("Contract/Quotation Status",CQStatRClass,CQStatRn,0,modCO);
  Report("Contract Worth",COworthRClass,COworthRn,0,modCO);
  Report("Factoring Customers Contract History",COInvToHistRClass,COInvToHistRn,0,modCO);
  Report("Factoring Customers Invoices",COInvToIVRClass,COInvToIVRn,0,modCO);
  Report("Invoiceable Contracts",COInvRClass,COInvRn,0,modCO);
//  Report("Contract Invoicing Per Month",ContrPeriodicRClass,ContrPer2Rn,0,modCO);
//the code doesn't care for period types, periods, contract numbers
//anything really but the class
//and it shows values per month, I think it was done for customer or for our internal use
//Plenty of lines code needed to be added to make it proper
//  Report("Contract Follow Up",FollowUpRClass,FollowUpRn,0,modCO);
/* Complain to Kjell before the end of January if you need this */
//  Report("Contract Value",COvalueRClass,COvalueRn,0,modCO);

  Maintenance("Cancel Unpaid Contracts",CancelDueCOVClass,CancelDueCOMn,modCO);
  Maintenance("Change Contract Currency",ChangeCOCurrencyVClass,ChangeCOCurrencyMn,modCO);
  Maintenance("Change Contracts",ChangeCOVClass,ChangeCOMn,modCO);
  Maintenance("Create Contract Invoices",CreateCOInvVClass,CreateCOInvMn,modCO);
  Maintenance("Renew Contracts",RenewCOVClass,RenewCOMn,modCO);
  Maintenance("Service Agreement",SVCVClass,SVCMn,modCO);
  Maintenance("Update Contracts",UpdateCOVClass,UpdateCOMn,modCO);

  Export("Circulation",CirculationEClass,CirculationEn,modCO);

/* modCRM */

  RegisterWS("Target Time","Target Time","New Target Time",TargTimeVc,modCRM);
  RegisterWS("Customer Letters","Customer Letters","New Customer Letter",LetVc,modCRM);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modCRM);
  RegisterWS("Standard Texts","Standard Texts","New Standard Text",LTxtVc,modCRM);
  RegisterWS("Standard Periods","Standard Periods","New Standard Period",StdPeriodVc,modCRM);
  RegisterWS("Mailing Lists","Mailing Lists","New Mailing List",PersColVc,modCRM);
  RegisterWS("Contact Relations","Contact Relations","New Contact Relation",ContactRelVc,modCRM);
  RegisterWS("Opportunities","Opportunities","New Opportunity",OYVc,modCRM);

  Report("Activities Journal",ActJRClass,ActJRn,0,modCRM);
  Report("Activities Check, Persons",UserActCheckRClass,UserActCheckRn,0,modCRM);
  Report("Activities, Contacts",ActCURClass,ActCURn,0,modCRM);
  Report("Activities, Period", ActWeekRClass,ActWeekRn,0,modCRM);
  Report("Activities, Persons",ActPersRClass,ActPersRn,0,modCRM); // Shouldn't this be only in System?
  Report("Activity Type List",ActTypeRClass,ActTypRn,0,modCRM);
  Report("Birthday List",BirthDayRClass,BirthDayRn,0,modCRM);
  Report("Calendar Booking History",ActCalBookRClass,ActCalBookRn,0,modCRM);
  Report("Contact List",CURClass,CustRn,0,modCRM);
//  Report("Chat Log",ChatLogRClass,ChatLogRn,0,modCRM);
  Report("Contact List for all Companies",CUforAllCompaniesRClass,CustforAllCompaniesRn,0,modCRM);//internal use
//  Report("Contact Person List",ContactListRClass,ContactListRn,0,modCRM); // No more specific contact register
  if (HasLocalization("GBR")) then begin
    Report("Contact Validity (UK)",UKContactValidityRClass,UKContactValidityRn,0,modCRM);
  end;
  Report("Customer Sales Statistics",CustSalesRClass,CustSalesRn,0,modCRM);
  Report("Customer Statistics",CustSTRClass,CustSTRn,0,modCRM);
  Report("Customer Status",CustPSRClass,CustPSRn,0,modCRM);
  Report("Customer/Item Statistics",CuArtSTRClass,CuArtSTRn,0,modCRM);
  Report("Customers without/with Activities",NoActCURClass,NoActCURn,0,modCRM);
  Report("Employee Calendar",ActCalStaffRClass,ActCalStaffRn,0,modCRM);
  Report("Employee Time Statistics",EMTimeStatRClass,EMTimeRn,0,modCRM);
  Report("Item/Salesman Statistics",IStatRClass,IStatRn,0,modCRM);
  Report("Letter List",LetInfoRClass,LetInfoRn,0,modCRM);
  Report("List Invalid Phone Numbers",InvPhoneNoRClass,InvPhoneNoRn,0,modCRM);
  Report("Monthly Consulting",MonthConsultRClass,MonthConsultRn,0,modCRM);
  Report("Monthly Consulting Result",MonthConsultResRClass,MonthConsultResRn,0,modCRM);
  Report("Monthly Sales",MonthSalesRClass,MonthSalesRn,0,modCRM);
  Report("Monthly Sales Result",MonthSalesResRClass,MonthSalesResRn,0,modCRM);
  Report("Monthly Support",MonthSupportRClass,MonthSupportRn,0,modCRM);
  Report("Personal Calendar",ActCalRClass,ActCalRn,0,modCRM);
  Report("Search for Contact Person",SearchContactRClass,SearchContactRn,0,modCRM);
  Report("SIP Extensions, Persons",SIPUserRClass,SIPUserRn,0,modCRM);
  Report("Soft Factor Analysis",SoftFactAnalysisRClass,SoftFactAnalysisRn,0,modCRM);
  Report("Switchboard Calls",SwitchboardCallsRClass,SwtchbrdCallsRn,0,modCRM);
  Report("Target Time List",TargTimeJRClass,TargTimeJRn,0,modCRM);
  Report("Telephone List",TeleRClass,TeleRn,0,modCRM);
//  Report("User Activities",ActJRClass,ActJRn,0,modCRM);//same as Acitvities journal
  Report("Who has bought/not bought",NoSalesRClass,NoSalesRn,0,modCRM);
//  Report("Activity List",ActListRClass,ActListRn,0,modCRM);
/* Something is wrong with the way it reads records */
//  Report("Detailed Todo",ToDoExtendedRClass,Detail2DoRn,0,modCRM);
/* Time Statistics has all the functionallity now. */
//  Report("Employee Planned Time",EMPlanRClass,EMPlanRn,0,modCRM);
//  Report("To Do List",ActTodoRClass,ActTodoRn,0,modCRM);

  Setting("Activity Classes",ActTypeGrLClass,modCRM);
  Setting("Activity Consequences",ActSeqLClass,modCRM);
  Setting("Activity Types",ActTypeLClass,modCRM);
  Setting("Activity Types, Subsystems",ASTTClass,modCRM);
  Setting("Additional Email Recipients",EmailRecipLClass,modCRM);
//  Setting("Campaigns",CampaignLClass,modCRM);
//  Setting("Campaign Statuses",CampaignStatusLClass,modCRM);
  Setting("Classification Types",CTypeLClass,modCRM);
  Setting("Company Workflow Overview",PipelineOverviewTClass,modCRM);
  Setting("Contact Classifications",CClassLClass,modCRM);
  Setting("Contact Settings",CustomerSettingTClass,modCRM);
  Setting("Contact Sync",ContactSyncLClass,modCRM);
  Setting("CRM Settings",CRMTClass,modCRM);
  Setting("Courtesy Titles",CourtesyTitlesTClass,modCRM);
  Setting("Customer Categories",CCatLClass,modCRM);
  Setting("Default Activity Text Codes",CompTextTypeLClass,modCRM);
  Setting("#Favourite# Activity Types",FavActTypeLClass,modCRM);
  Setting("Global CRM Settings",GlobalCRMTClass,modCRM);
  Setting("Industry",IndustryLClass,modCRM);
  Setting("Lead",CULeadLClass,modCRM);
  Setting("Lead Source",LeadSourceLClass,modCRM);
  Setting("Lead Status",LeadStatusLClass,modCRM);
  Setting("Info in Customer Status Report",CustPSLClass,modCRM);
  Setting("Info in #Supplier# Status Report",VEPSLClass,modCRM);
  Setting("Job Titles",JobTitleLClass,modCRM);
  Setting("Lead Registration",LeadRegistTClass,modCRM);
  Setting("Media Types",MediaTypeLClass,modCRM);
  Setting("Map Setting",MapBlockTClass,modCRM);
  Setting("Monthly Forecast",ForecastUserLClass,modCRM); //internal
  Setting("Monthly Result",ResultUserLClass,modCRM); //internal
  Setting("Number Series - Activities, #N/L# Transactions",ActNLSerTClass,modCRM);
  Setting("Number Series - Customer Letters",LetSerTClass,modCRM);
  Setting("Number Series - Opportunities",OYSerTClass,modCRM);
  Setting("Normalized Phone Numbers",NormPhoneNumLClass,modCRM);
  Setting("Telephony Settings",CompPhonePrefsTClass,modCRM);
  Setting("Text Types",TextTypeLClass,modCRM);
  Setting("User Defined Fields - Activities",ActUserLabelTClass,modCRM);
  Setting("User Defined Fields - Contacts",CUUserLabelTClass,modCRM);
  Setting("User Defined Fields - Items",INUserLabelTClass,modCRM);
  Setting("User Workflow Overview",UserPipelineOverviewLClass,modCRM);
  Setting("User Settings - Monthly Report",MonthlyUserSetLClass,modCRM);

  Document("Activities",ActDocRClass,ActDocForm,ActDocFClass,modCRM);
  Document("Contact Labels",CoLabRClass,CoLabForm,CoLabFClass,modCRM);
  Document("Customer Letters",LetRClass,LetForm,LetFClass,modCRM);
  Document("Customer/#Supplier# Labels",CuLabRClass,CuLabForm,CuLabFClass,modCRM);

  Maintenance("Add Classification to Contacts",NoSalesVClass,NoSalesMn,modCRM);
  Maintenance("Apply Standard Period",ApyStdPeriodMClass,ApyStdPeriodMn,modCRM);
  Maintenance("Close Contacts",CloseCUVClass,CloseCUMn,modCRM);
  Maintenance("Create Mails from Activities",ActToMailVClass,ActToMailMn,modCRM);
  Maintenance("Mass Emailing",MassMailVClass,MassMailMn,modCRM);
  Maintenance("Move Activities to Another Company",ActMoveCompVClass,ActMoveCompMn,modCRM);
  Maintenance("OK Period",OkPeriodVClass,OkPeriodMn,modCRM);
  Maintenance("Rebuild Number Recognition Register",NormPhoneNumVClass,NormPhoneNumMn,modCRM);
  Maintenance("Remove Classification from Contacts",RemoveClassCUMClass,RemoveClassMn,modCRM);
//  Maintenance("Send Periodical Customer Statements to Customer",SendPerStatVClass,SendPerStatMn,modCRM); // We have this above CUPerEmailVClass
  Maintenance("Update Contact Data",UpdContactVClass,UpdContactMn,modCRM);

/* modCL */

  RegisterWS("Cash In","Cash In","New Cash In",CLInVc,modCL);
  RegisterWS("Cash Out","Cash Out","New Cash Out",CLOutVc,modCL);
  RegisterWS("Receipts","Receipts","New Receipt",IPVc,modCL);
  RegisterWS("Payments","Payments","New Payment",OPVc,modCL);
  RegisterWS("Personnel Payments","Personnel Payments","New Personnel Payment",PPVc,modCL);
  RegisterWS("Simulations","Simulations","New Simulation",SMVc,modCL);
  Register("Account Reconciliation","Account Reconciliation",BankRecWClass,modCL);
  RegisterWS("Forex Trans.","Forex","New Forex Transaction",ForexTRVc,modCL);
  
  Setting("Cash Book Settings",MainCLTClass,modCL);
  Setting("Credit Cards",CreditCardLClass,modCL);
  Setting("Expense Accounts",CLCorspLClass,modCL);
  Setting("Legal Cash In No.",LegalCLInNrTClass,modCL);
  Setting("Number Series - Cash In",CLInSerTClass,modCL);
  Setting("Number Series - Cash Out",CLOutSerTClass,modCL);
  Setting("Number Series - Forex Transactions",ForexTRSerTClass,modCL);
  Setting("Payment Modes",PMTClass,modCL);
  
  Report("Cash Book",CLIORClass,CashBRn,0,modCL); /* needs some english strings. */
  if (HasLocalization("LTU")) then begin
    Report("Cash Book (Lithuania)",CashBookLitRClass,CashBookLitRn,0,modCL);
  end;
  Report("Cash In Journal",CLInJRClass,CLInJRn,0,modCL);  
  Report("Cash Out Journal",CLOutJRClass,CLOutJRn,0,modCL);  
  Report("Cash Report",DayBalCashRClass,DayBalCashRn,0,modCL);
  Report("Corresponding Accounts List",CCtasRClass,CCtasRn,0,modCL);  
  Report("Invoices with Cash In",IVCLInRClass,IVCLInRn,0,modCL);
  Report("Invoices with Cash Out",VICLOutRClass,VICLOutRn,0,modCL);
  Report("Invoices without Cash In",IVnoCLInRClass,IVnoCLInRn,0,modCL);
  Report("Invoices without Cash Out",VInoCLOutRClass,VInoCLOutRn,0,modCL);
  Report("Liquidity Forecast",LiquidityRClass,LiquidityRn,0,modCL);
  Report("#N/L# Cash Book",CashBookLatRClass,CashBookLatRn,0,modCL);
//  Report("Credit Card Coupon List",CouponRClass,CouponRn,0,modCL); // No source code

  Document("Cash In",CLInRClass,CLInForm,CLInFClass,modCL);
//  Document("Cash In Collection",CLInColRClass,CLInColForm,CLInColFClass,modCL);
  Document("Cash In Invoices",CLIn2RClass,CLIn2Form,CLIn2FClass,modCL);
  Document("Cash In Receipts",CLIn1RClass,CLIn1Form,CLIn1FClass,modCL);
  Document("Cash Out",CLOutRClass,CLOutForm,CLOutFClass,modCL);
//  Document("Cash Out Collection",CLOutColRClass,CLOutColForm,CLOutColFClass,modCL);
  Document("Cash Out Invoices",CLOut2RClass,CLOut2Form,CLOut2FClass,modCL);
  Document("Cash Out Payments",CLOut1RClass,CLOut1Form,CLOut1FClass,modCL);
  Document("Cash Out Personnel Payments",CLOut3RClass,CLOut3Form,CLOut3FClass,modCL);

//  Maintenance("Create Collection Cash In",ColCLInVClass,ColCLInMn,modCL);//as far as i know not used
//  Maintenance("Create Collection Cash Out",ColCLOutVClass,ColCLOutMn,modCL);//as far as i know not used
  Maintenance("OK Cash Ins and Cash Outs",OKCLVClass,OKCLMn,modCL);
//  Maintenance("Change Coupon State",CouponVClass,CouponMn,modCL);

/* modEmail */

  RegisterWS("Email Aliases","Email Aliases","New Email Alias",EmailAliasVc,modEmail);
  RegisterWS("POP3 Servers","POP3 Servers","New POP3 Server",Pop3ServVc,modEmail);
  Register("Email Queue","Email Queue",EMailQueVc,modEmail);
  Register("Mailboxes","Mailboxes",ConferenceWClass,modEmail);
  RegisterWS("Available Chat Users","Available Chat Users","New Available Chat User",ExtChatUsersVc,modEmail);
  RegisterWS("HTML Templates","HTML Templates","New HTML Template",HtmlTemplateVc,modEmail);
//  Register("Mail Folders","Mail Folders",MailFolderVc,modEmail);
//  Register("Mail Filters","Mail Filters",MailFilterVc,modEmail);

  Setting("Attached Files",Attach2LClass,modEmail);
  Setting("Auto Replies",ConfAutoReplyLClass,modEmail);
  Setting("Conference Access Groups",ConfAccLClass,modEmail);
  Setting("Email Addresses",EmailAddrLClass,modEmail);
  Setting("Email SMTP Server",EmailTClass,modEmail);
  Setting("Gateway Settings",GatewayTClass,modEmail);
  Setting("Mail and Conference Settings",MailSettingsTClass,modEmail);
  Setting("Mail Tags",MailTagLClass,modEmail);
  Setting("Mail Texts",MailTextLClass,modEmail);
  Setting("Mailbox Browse",ConfLClass,modEmail);
  Setting("Number Series - Mails",MailSerTClass,modEmail);  
  Setting("Presentations",ConfPresLClass,modEmail);
  Setting("Signatures",ConfSignLClass,modEmail);

  Report("Active Chats",ChatRClass,ChatRn,0,modEmail);
  Report("Attached Files",Attach2RClass,Attach2Rn,0,modEmail);
  Report("Conference Access",ConfAccessRClass,ConfAccessRn,0,modEmail);
  Report("Email Aliases",EMailAliasRClass,EMailAliasRn,0,modEmail);
  Report("Email Queue List",EMailQueJRClass,EMailQueJRn,0,modEmail);
  Report("Email Validation Status",StdIDValidationStatusRClass,StdIDValidationStatusRn,0,modEmail);
  Report("Mail Count",ConfCntRClass,ConfCntRn,0,modEmail);
  Report("Mail History",MailReadRClass,MailReadRn,0,modEmail);
  Report("Sent Email Queue",EmailQueListRClass,EmailQueListRn,0,modEmail);
  Report("Signatures",SignatureRClass,SignatureRn,0,modEmail);
  Report("Users missing Email Address",UserWOEmailAddressRClass,UserWOEmailAddressRn,0,modEmail);
  Report("User Conference Access",UserConfAccessRClass,UserConfAccessRn,0,modEmail);


  Document("Mail",MailRClass,MailForm,MailFClass,modEmail);

  Maintenance("Attached Files",Attach2VClass,Attach2Mn,modEmail);
  Maintenance("Change Default Mailbox Mail Format",ChMaiboxMailFmtVClass,ChMaiboxMailFmtMn,modEmail);
  Maintenance("Change Mailbox Name",ChMaiboxNameVClass,ChMaiboxNameMn,modEmail);
  Maintenance("Clean Up Mail Registers",CleanMailVClass,CleanMailMn,modEmail);
  Maintenance("Clean Up Orphan emails",CleanOrpanedEmailsVClass,CleanOrpanedEmailsMn,modEmail);
  Maintenance("Deactivate Auto Replies",DeactivateAutoRepliesVClass,DeactivateAutoRepliesMn,modEmail);
  Maintenance("Delete Email Queue", DelSentMailVClass,DelSentMailMn,modEmail);
  Maintenance("Empty Mailbox",MailboxCleanVClass,MailboxCleanMn,modEmail);
  Maintenance("Move Emails",MoveEmailVClass,MoveEmailMn,modEmail);
  Maintenance("Restore Deleted Mail",RestoreMailVClass,RestoreMailMn,modEmail);
  Maintenance("Send and Receive Email",SendAndRecVClass,SendAndRecMn,modEmail);
  Maintenance("Update Postmaster Mailbox",UpdPostmasterVClass,UpdPostmasterMn,modEmail);
  
/* modSVO */

 RegisterWS("Service Orders","Service Orders","New Service Order",SVOVc,modSVO);
  RegisterWS("Work Orders","Work Orders","New Work Order",WOVc,modSVO);
  RegisterWS("Work Sheets","Work Sheets","New Work Sheet",WSVc,modSVO);
  Register("Service #Stock# Transactions","Service #Stock# Transactions",SVGMVc,modSVO);
  Register("Work Sheet Transactions","Work Sheet Transactions",WSIVVc,modSVO);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modSVO);
  RegisterWS("Items","Items","New Item",INVc,modSVO);
  RegisterWS("Known Serial Numbers","Known Serial Numbers","New Known Serial Number",SVOSerVc,modSVO);

  Setting("Account Usage Service Order",AccSVOTClass,modSVO);
//  Setting("Apple GSX Queue",GSXQueueLClass,modSVO);

  Setting("Apple GSX Settings",GSXSettingsTClass,modSVO);
  Setting("Batch Quality Control",QualConLClass,modSVO);
  Setting("Batch Quality Control Rules",QCTestRulesTClass,modSVO);
//  Setting("Batch Quality Control Units",QCUnitLClass,modSVO);
  Setting("Batch Quality Control Templates",QCTemplateLClass,modSVO);
  Setting("Batch Quality Control Tests",QCTestLClass,modSVO);
  Setting("Batch Status",BatchStatusLClass,modSVO);
  Setting("Classification Types",CTypeLClass,modSVO);
  Setting("Contact Classifications",CClassLClass,modSVO);
//  Setting("Contact Persons",ContactLClass,modSVO);
  Setting("Info in Customer Status Report",CustPSLClass,modSVO);
  Setting("Locations",LocationLClass,modSVO);
  Setting("Number Series - Service Orders",SVOSerTClass,modSVO);
  Setting("Number Series - Service #Stock# Transactions",SVGMSerTClass,modSVO);
  Setting("Number Series - Work Orders",WOSerTClass,modSVO);
  Setting("Number Series - Work Sheets",WSSerTClass,modSVO);
  Setting("Order Classes",OrderClassLClass,modSVO);
  Setting("Payment Terms",PDLClass,modSVO);
  Setting("Planned Delivery",PlanDeliveryTClass,modSVO);
  Setting("Replaced Items",ReplItemsLClass,modSVO);
  Setting("Serial Number Text",SVOTextLClass,modSVO);
  Setting("Standard Problem Modifiers",StdProblemModLClass,modSVO);
  Setting("Standard Problems",StandProblemLClass,modSVO);
  Setting("#Stock# Settings",MainStockTClass,modSVO);

  Import("Known Serial Numbers",SVOSerIn,SVOSerIn,modSVO); // Now it is possible to use, I have changed how it works.

  Document("Service Orders",SVORClass,SVOForm,SVOFClass,modSVO);
  Document("Service #Stock# Transactions",SVGMRClass,SVGMForm,SVGMFClass,modSVO);
  Document("Work Orders",WOrdRClass,WOrdForm,WOrdFClass,modSVO);
  Document("Work Sheets",WSRClass,WSForm,WSFClass,modSVO);

  Report("Batch Quality Control Results",QualConResRClass,QualConResRn,0,modSVO);
  Report("Batch Quality Control Tests",QualConRClass,QualConRn,0,modSVO);
  Report("Batch Quality Reclamations",QualConRecRClass,QualConRecRn,0,modSVO);
  Report("Item Statistics",ArtSTRClass,ArtSTRn,0,modSVO);
  Report("Outstanding Service Orders",SVOStockRClass,SVOStockRn,0,modSVO);
  Report("Serial Number History",SerialNrRClass,SerialNrRn,0,modSVO);
  Report("Service Order Employee Statistics",SVOEMStatRClass,SVOEMStatRn,0,modSVO);
  Report("Service Order Journal",SVOListRClass,SVOListRn,0,modSVO);
  Report("Service Order Status",SVOStaRClass,SVOStaRn,0,modSVO);
  Report("Service #Stock# Item History",SVOINRClass,SVOItemRn,0,modSVO);
  Report("Service #Stock# Transaction Journal",GIOListRClass,GIOListRn,0,modSVO);
  Report("Work Order Journal",WOListRClass,WOListRn,0,modSVO);
  Report("Work Sheet Journal",WSListRClass,WSListRn,0,modSVO);
  Report("Work Sheet Transactions",WSTransRClass,WSTranRn,0,modSVO);
//  Report("Average Service Interval ",AvgServIntRClass,AvgServIntRn,0,modSVO);
//  Report("Standard Problems ",StandProblemsRClass,StandProblemsRn,0,modSVO);

  Maintenance("Batch Status Change",BatchStatChVClass,BatchStatChMn,modSVO);
  Maintenance("Create Work Orders",WorkOrderVClass,WorkOrderMn,modSVO);
  Maintenance("Recalculate Invoiced",RecSVOVClass,RecSVOMn,modSVO);
//  Maintenance("Create Invoices",SVOInvVClass,MakeInvMn,modSVO);//doesn't exist
  
/* modProd */

  RegisterWS("Productions","Productions","New Production",ProdVc,modProd);
  RegisterWS("Production Orders","Production Orders","New Production Order",ProdOrderVc,modProd);
  RegisterWS("Production Item Alternatives","Prod. Item Alternatives","New Prod. Item Alternative",ProdItemVc,modProd);
  RegisterWS("Production Operations","Production Operations","New Production Operation",ProdOperationVc,modProd);
  RegisterWS("Recipes","Recipes","New Recipe",RecVc,modProd);
  RegisterWS("Items","Items","New Item",INVc,modProd);
  RegisterWS("Machine Hours","Machine Hours","New Machine Hour",MachineHoursVc,modProd);
  RegisterWS("Machine Hours Changes","Machine Hours Changes","New Machine Hours Change",MachineHoursChangesLClass,modProd);

  Setting("Account Usage Production",ProdAccClass,modProd);
  Setting("Auto Production Items",AutoProdLClass,modProd);
  Setting("Item Effectivity",INEffLClass,modProd);
  Setting("Machine Groups",MachineGroupsTClass,modProd);
  Setting("Materials",MaterialLClass,modProd);
  Setting("Number Series - Production Operations",ProdOperationSerTClass,modProd);
  Setting("Number Series - Production Orders",ProdOrderSerTClass,modProd);
  Setting("Number Series - Productions",ProdSerTClass,modProd);
  Setting("Production Classes",ProdClassLClass,modProd);
  Setting("Production Settings",ProdSettingsTClass,modProd);
  Setting("Routings",RoutingLClass,modProd);
  Setting("Standard Operations",StdOperationLClass,modProd);
  Setting("Standard Problems",StandProblemLClass,modProd);
  Setting("Work Shifts",WorkShiftLClass,modProd);

  Report("Deficiency List",PurRClass,PurRn,0,modProd);
//  Report("Discarded Statistics",ProdStatDiscRClass,ProdStatDiscRn,0,modProd); // Old Report
  Report("Discarded Statistics",DiscardStatRClass,DiscardStatRn,0,modProd);
  Report("Item Effectivity",EffectRClass,EffectRn,0,modProd);
  Report("Process Flow",ProcessFlowRClass,ProcessFlowRn,0,modProd);
  Report("Producible List",MaxprodRClass,MaxprodRn,0,modProd);
  Report("Production Cost Allocation",CostAllocPlanRClass,CostAllocPlanRn,0,modProd);
  Report("Production Deficiency",ProdDefRClass,ProdDefRn,0,modProd);
  Report("Production Journal",ProdRClass,ProdRn,0,modProd);
  Report("Production Operations",ProdOperationsRClass,ProdOperationsRn,0,modProd);
  Report("Production Order Journal",ProdOrdRClass,ProdOrdRn,0,modProd);
  Report("Production Planning",ProdOrderPlanRClass,ProdOrderPlanRn,0,modProd);
  Report("Production Queue",ProdOrderQueueRClass,ProdOrderQueue2Rn,0,modProd);
  Report("Production Statistics",ProdStatRClass,ProdStatRn,0,modProd);
  Report("Production Status",ProdStatusRClass,ProdStatusRn,0,modProd);
  Report("Recipe Cost Calculation",CostCalcRClass,CostCalcRn,0,modProd);
  Report("Recipe Cost Comparison",RecCostCompRClass,RecCostCompRn,0,modProd);
  Report("Recipe List (Made of)",Rec2RClass,Rec2Rn,0,modProd);
  Report("Recipe List (Part of)",RecRClass,RecRn,0,modProd);
  Report("Running Production Orders",ProdQueueRClass,ProdQueueRn,0,modProd);
/* Complain to Kjell before the end of January if you need this */
//  Report("#Stock# Prediction Report",StockPredictRClass,ProdPlanRn,0,modProd);
//  Report("TestProdRep",TestProdRepRClass,TestProdRepRn,0,modDBMain);

  Document("Production Labels",ProdLabelRClass,ProdLabelForm,ProdLabelFClass,modProd);
  Document("Production Operation Picking Lists",ProdOperation2RClass,ProdOperation2Form,ProdOperation2FClass,modProd);
  Document("Production Orders",ProdOrder2RClass,ProdOrder2Form,ProdOrder2FClass,modProd);
  Document("Production Picking Lists",ProdOrder3RClass,ProdOrder3Form,ProdOrder3FClass,modProd);
  Document("Productions",ProdOrderRClass,ProdOrderForm,ProdOrderFClass,modProd);
  Document("Recipe",RecDocRClass,RecForm,RecFClass,modProd);
  Document("Routing",RoutingRClass,RoutingForm,RoutingFClass,modProd);
  Document("Routing Productions",RoutingPrRClass,RoutingPrForm,RoutingPrFClass,modProd);
  Document("Routing Production Orders",RoutingPrOrdRClass,RoutingPrOrdForm,RoutingPrOrdFClass,modProd);

  Maintenance("Create Planned Records from Ordered Items",PlanRecordsVClass,PlanRecordsMn,modProd);
  Maintenance("Update Recipes",UpdRecepyVClass,UpdRecepyMn,modProd);

/* modTS */
  
  RegisterWS("#Time Sheets#","#Time Sheets#","New #Time Sheet#",TSVc,modTS);
  RegisterWS("Projects","Projects","New Project",PRVc,modTS);
  Register("Project Transactions","Project Transactions",TBIVVc,modTS);
  RegisterWS("Project Budgets","Project Budgets","New Project Budget",TBBUVc,modTS);
  RegisterWS("Project Schedules","Project Schedules","New Project Schedule",PRScheduleVc,modTS);
  RegisterWS("Quotations","Quotations","New Quotation",QTVc,modTS);
  RegisterWS("Items","Items","New Item",INVc,modTS);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modTS);

  Setting("Account Usage J/C",PRAccClass,modTS);
  Setting("Customer Discount",CDLClass,modTS);
  Setting("Force Time Entry",ForceTimeEntryTClass,modTS);
  Setting("Info In Project Info Report",ProjInfoRepLClass,modTS);
  Setting("Item Groups",ITLClass,modTS);
  Setting("Item/Job Group Prices",TILClass,modTS);
  Setting("Job Group/Item Prices",TJGILClass,modTS);
  Setting("Job Groups",EGLClass,modTS);
  Setting("Number Series - Projects",PRSerTClass,modTS);
  Setting("Number Series - #Time Sheets#",TSSerTClass,modTS);
  Setting("Project Classes",PRClassTClass,modTS);
  Setting("Project Classification Types",PRClTypeLClass,modTS);
  Setting("Project Classifications",PRClLClass,modTS);
  Setting("Project Item Handling",PRITHandleClass,modTS);
  Setting("Project Phases",PRStageLClass,modTS);
  Setting("Project Settings",PRITClass,modTS);
  Setting("Specified Project Item Handling",PRITHLClass,modTS);
  Setting("Time Billing Price Formulae",TBPFormLClass,modTS);
  Setting("Time Billing Price Lists",TBPLDefLClass,modTS);
  Setting("Time Classes",TimeClassLClass,modTS);
  Setting("User Def. Field Labels - Project Managers",PrManagerLabelTClass,modTS);
  Setting("Work In Progress Control",WIPCheckTClass,modTS);
//  Setting("Account Usage J/C",PRAccClass,modTS);

  Report("Budget Follow-up",BudFollPRClass,BudPFoll2Rn,0,modTS); // Rewritten version of above report
  Report("Employee Statistics",EMStatRClass,TSRn,0,modTS);
  Report("Employee Status",EmpStatusRClass,EmpStatusRn,0,modTS);
  Report("GP, Employees",GPEmpRClass,GPEmpRn,0,modTS);
  Report("GP, Projects",GPProRClass,GPProRn,0,modTS);
  Report("Project Actual vs Budget",PRActBudRClass,PRActBudRn,0,modTS);
  Report("Project Bonus",ProjBonusRClass,ProjBonusRn,0,modTS);
  Report("Project Invoicing",ProInvRClass,ProInvRn,0,modTS);
  Report("Project List",ProListRClass,PRListRn,0,modTS);
  Report("Project Price List",ProjPLRClass,ProjPLRn,0,modTS);
  Report("Project Profit & Loss",PRPLRClass,PRPLRn,0,modTS);
  Report("Project Purchases",PRPurRClass,PRPurRn,0,modTS);
  Report("Project #Purchase Orders#",PRPORClass,PRPORn,0,modTS);
  Report("Project Quotation/Budget",BUQTTBBURClass,BUQTTBBURn,0,modTS);
  Report("Project Revenue Recognition",PRRevRecRClass,PRRevRecRn,0,modTS);
  Report("Project Status",ProStatRClass,ProStatRn,0,modTS);
  Report("Project Transactions",PrTransRClass,PrTranRn,0,modTS);
  Report("Service Item Statistics",PrItemStatRClass,PrItemStatRn,0,modTS);
  Report("#Time Sheet# Journal",TSJRClass,TSJRn,0,modTS);
  Report("Validate Project Transactions",ChPrTransRClass,ChPrTransRn,0,modTS);
//  Report("Budget Follow-up",BudFollPRClass,BudPFollRn,0,modTS);
//  Report("Project Sales Orders",ProjSORClass,ProjSORn,0,modTS);

  Document("Project Budgets",TBBudgetRClass,TBBudgetForm,TBBudgetFClass,modTS);
  Document("Project Info",ProjectInfoRClass,ProjectInfoForm,ProjectInfoFClass,modTS);
  Document("Project Transactions",ProjectTransRClass,ProjectTransForm,ProjectTransFClass,modTS);
  Document("Projects",ProjectRClass,ProjectForm,ProjectFClass,modTS);
  Document("Project Schedules",PRScheduleRClass,PRScheduleForm,PRScheduleFClass,modTS);
  Document("Quotations",QTRClass,QTForm,QTFClass,modTS);
  Document("#Time Sheets#",TimeSheetRClass,TimeSheetForm,TimeSheetFClass,modTS);

  Maintenance("Build Project Transactions from Deliveries",BSHTSVClass,BSHTSMn,modTS);
  Maintenance("Change Project Currency",ChangePRCurVClass,ChangePRCurMn,modTS);
  Maintenance("Create Project Invoices",ProInvVClass,ProInvMn,modTS);

/* modAT2 */

  RegisterWS("Assets","Assets","New Asset",AT2UnitVc,modAT2);
  RegisterWS("Asset Categories","Asset Categories","New Asset Category",AT2Vc,modAT2);
  RegisterWS("Asset Disposals","Asset Disposals","New Asset Disposal",AT2WrofVc,modAT2);
  RegisterWS("Asset Revaluations","Asset Revaluations","New Asset Revaluation",AT2DprVc,modAT2);
  RegisterWS("Asset Status","Asset Status","New Asset Status",AT2TakeVc,modAT2);
  Register("Asset Transactions","Asset Transactions",AT2TransVc,modAT2);  
  RegisterWS("Depreciation Models","Depreciation Models","New Depreciation Model",DprModVc,modAT2);

  Setting("Account Usage Assets",AT2AccTClass,modAT2);
  Setting("Asset Display Groups",AT2DispGroupTClass,modAT2);
  Setting("Assets #N/L# Classes",AC2TClass,modAT2);
  Setting("Contacts",CULClass,modAT2);
  Setting("Departments",DepLClass,modAT2);
  Setting("Inflation Coefficients",ATCoeffLClass,modAT2);
  Setting("Number Series - Asset Disposals",AT2WrofSerTClass,modAT2);
  Setting("Number Series - Asset Revaluations",AT2DprSerTClass,modAT2);
  Setting("Number Series - Asset Status",AT2TakeSerTClass,modAT2);
  Setting("Number Series - Revaluation Factors",AT2RevSerTClass,modAT2);
  Setting("Revaluation Factors",AT2RevLClass,modAT2);
  Setting("Revaluation Run Lists",AT2RevListLClass,modAT2);
//  Setting("Metals",MetalLClass,modAT2);
//  Setting("Number Series - Acquisitions",AT2PUSerTClass,modAT2);
//  Setting("Reasons",CauseLClass,modAT2);
//  Setting("Groups",AT2GroupLClass,modAT2);
//  Setting("Movements",AT2MovLClass,modAT2);
//  Setting("Responsibilities",AT2RespLClass,modAT2);

  Report("Accumulated Category Depreciation",AT2CatAcumRClass,AT2CatAcumRn,0,modAT2);
  Report("Asset at Point in Time",AssetAtTimeRClass,AssetAtTimeRn,0,modAT2);
  Report("Asset History",AT2HistRClass,AT2HistRn,0,modAT2);
  Report("Asset List",AT2ListRClass,AT2ListRn,0,modAT2);
  Report("Asset Status",AT2HistPortRClass,AT2HistPortRn,0,modAT2);
  Report("Department Summary",AT2DepRClass,AT2DepSumRn,0,modAT2);
  Report("Depreciation Plan",AT2DeprPlanRClass,AT2DeprPlanRn,0,modAT2);
  Report("Depreciations Report",AT2DeprRClass,AT2DeprRn,0,modAT2);
  Report("Disposals Journal",AT2WriteJRClass,AT2WriteJRn,0,modAT2);
  if (HasLocalization("PRT")) then begin
    Report("Fiscal Year Depreciation (Portugal)",AT2PortFormRClass,AT2PortFormRn,0,modAT2);
  end;
//  Report("Fiscal Year Revaluations",AT2FYRevRClass,AT2FYRevRn,0,modAT2);//not used
  if (HasLocalization("PRT")) then begin
    Report("Fiscal Year Write-offs (Portugal)",AT2FYWrofRClass,AT2FYWrofRn,0,modAT2);
  end;
  Report("Insurance Value Report",AT2InsValRClass,AT2InsValRn,0,modAT2);
  Report("Missing Asset from Rental Item",MissingAssetRClass,MissingAssetRn,0,modAT2);
  Report("Responsible Person List",AT2RespPersRClass,AT2RespPersRn,0,modAT2);
  Report("Responsible Person Summary",AT2CatRespRClass,AT2CatRespRn,0,modAT2);
  Report("Sim. Preview - Depreciations",AT2GenSMRClass,AT2GenSMRn,0,modAT2);
  Report("#Stocktaking# List, Assets",AT2StockTakeRClass,AT2StockTakeRn,0,modAT2);
  Report("Subsidy Assets",AT2SubRClass,AT2SubRn,0,modAT2);
  Report("Tax Depreciation",TaxDeprRClass,TaxDeprRn,0,modAT2);
  Report("Trans. Preview - Depreciations",AT2GenTRRClass,AT2GenTRRn,0,modAT2);
  Report("Update Department on Asset",DeptAssetRClass,DeptAssetRn,0,modAT2);
//  Report("Asset List for Date",AT2ListDateRClass,AT2ListDateRn,0,modAT2); // No code
//  Report("Asset List Lith",AT2ListLitRClass,AT2ListLitRn,0,modAT2);
//  Report("Responsible Persons List",AT2RespRClass,AT2RespRn,0,modAT2);, should be out, look line above it is the same

  Document("Asset Disposals",AT2WrofRClass,AT2WrofForm,AT2WrofFClass,modAT2);
  Document("Asset Forms",AT2InRClass,AT2InForm,AT2InFClass,modAT2);
  Document("Asset put in use",AT2RClass,AT2Form,AT2FClass,modAT2);
  Document("Asset Status",AT2TakeRClass,AT2TakeForm,AT2TakeFClass,modAT2);  
  Document("Revaluations Factors",AT2RevRClass,AT2RevForm,AT2RevFClass,modAT2);
//  Document("Depreciations",AT2DprRClass,AT2DprForm,AT2DprFClass,modAT2);// No source code
//  Document("Put in use",AT2PURClass,AT2PUForm,AT2PUFClass,modAT2); // No source code

  Maintenance("Create Depreciation Simulations",AT2GenSMVClass,AT2GenSMMn,modAT2);
  Maintenance("Create Depreciation Transactions",AT2GenTRVClass,AT2GenTRMn,modAT2);
  Maintenance("Create Put in use Transactions",AT2PutinVClass,AT2PutinMn,modAT2);
//  Maintenance("Create Tax Depreciation Transactions",AT2TaxDeprVClass,AT2TaxDeprMn,modAT2);
  Maintenance("Revalue Asset Acquisition Value",AT2ReevalVClass,AT2ReevalMn,modAT2);
  Maintenance("Update Department on Asset",DeptAssetVClass,DeptAssetMn,modAT2);
  Maintenance("Update Purchase Value on Asset",AT2PurchValVClass,AT2PurchValMn,modAT2);
//  Maintenance("Create Asset Status Records",AT2GenTransVClass,AT2GenTransMn,modAT2);
//  Maintenance("Create Depreciation Transactions",AT2GenTransVClass,AT2GenTransMn,modAT2);
//  Maintenance("Create Asset Records",AT2GenUnitVClass,AT2GenUnitMn,modAT2);
  
/* modRepGen */

  RegisterWS("Reports","Reports","New Report",RepGenVc,modRepGen);
  RegisterWS("Form Templates","Form Templates","New Form Template",DocVc,modRepGen);
  RegisterWS("Styles","Styles","New Style",StyleVc,modRepGen);
//  Register("Sets","Sets",RepSetVc,modRepGen);

  Setting("Reports in Interface",UIReportLClass,modRepGen);

/* modCAL */
  Setting("Calendar Options",CalendarOptionTClass,modCAL);

/* modDY */
   Report("Access Control",AccessControlRClass,AccessControlRn,0,modDY);

  Report("#N/L# Correction List",CorrRClass,CorrRn,0,modDY);
  Report("#N/L# Correction List, Consolidated",CorrRClass,AllCompaniesCorrRn,0,modDY);

  Report("#Purchase Ledger# Checking",APCheckRClass,APCheckRn,0,modDY);
  Report("#Purchase Ledger# Roll Forward",APRollFwdRClass,APRollFwdRn,0,modDY);

  Report("#Sales Ledger# Checking",ARCheckRClass,ARCheckRn,0,modDY);
  Report("#Sales Ledger# Roll Forward",ARRollFwdRClass,ARRollFwdRn,0,modDY);

  Report("Subsystems Checking",Check1TRRClass,Check1TRRn,0,modDY);
  Report("Transaction Checking",Check2TRRClass,Check2TRRn,0,modDY);

  Export("Item History Export",ItemHistEClass,ItemHistEn,modDY);

/* modPP */

  RegisterWS("Reservations","Reservations","New Reservation",JobVc,modPP);
  RegisterWS("Resources","Resources","Nwe Resource",ResVc,modPP);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modPP);
  RegisterWS("Items","Items","New Item",INVc,modPP);

  Setting("Display Groups",CalDispGroupTClass,modPP);
  Setting("Exists",ResExistLClass,modPP);
  Setting("Invoice Items",ResArtCodeLClass,modPP);
  Setting("Number Series - Reservations",JobSerTClass,modPP);
  Setting("Prices",PLLClass,modPP);
  Setting("Resource Classification",ResClasLClass,modPP);
  Setting("Resource Classification Types",ResClasTypeLClass,modPP);
  Setting("Resource Settings",ResSettingTClass,modPP);
  Setting("Resource Type Support",ResTypeSupportLClass,modPP);
  Setting("Resource Types",ResTypeLClass,modPP);
  Setting("Resource Locations",ResLocLClass,modPP);
  Setting("Resource Status",ResourceStatusLClass,modPP);
  Setting("Reservation Status",ReservationStatusLClass,modPP);
  Setting("Resource Usage",ResUsageLClass,modPP);
  Setting("Reservation Status Sequences",ReserSeqLClass,modPP);
// I picket the name, and I don't like it -- Change welcome! -- Erik
  Setting("Resource Planner",ResPlanTClass,modPP);

  Report("Available Resources",ResAvailRClass,FindJobRn,0,modPP);
  Report("Last Reservation",LastGuestRClass,LastGuestRn,0,modPP);
  Report("Reservation Journal",JobJourRClass,JobJourRn,0,modPP);
  Report("Resource Activities",ResActivitiesRClass,ResActRn,0,modPP);
  Report("Resource History",ResHistRClass,ResHistRn,0,modPP);
  Report("Resource Info",ResInfoRClass,ResInfoRn,0,modPP);
  Report("Resource List",TodayResAvailRClass,TodayResAvailRn,0,modPP);

  Document("Reservations",JobRClass,JobForm,JobFClass,modPP);

  Maintenance("Create Invoices",PPInvVClass,PPInvMn,modPP);
  Maintenance("Rebuild Resource Type Support",RebuildResTypeSupVClass,RebuildResTypeSupMn,modPP);
  Maintenance("Recalculate Invoicable",RecJobInvVClass,RecJobInvMn,modPP);
  Maintenance("Update Customer Accounts",UpdateCustAccVClass,UpdateCustAccMn,modPP);

/* modRest */

  RegisterWS("Tabs","Tabs","New Tab",RestAccVc,modRest);
  RegisterWS("Cashier Counts","Cashier Counts","New Cashier Count",CashierBalVc,modRest);
  RegisterWS("Credit Cards","Credit Cards","New Credit Card",CreditCardVc,modRest);
  RegisterWS("Items","Items","New Item",INVc,modRest);
  RegisterWS("POS Balances","POS Balance","New POS Balance",POSBalanceVc,modRest);
  RegisterWS("POS Sessions","POS Sessions","New POS Session",POSEventVc,modRest);
  RegisterWS("Cash Event","Cash Event","New Cash Event",CashVc,modRest);
  RegisterWS("#Restaurant# Bookings","Rest. Bookings","New Rest. Booking",RestBookingVc,modRest);

  Setting("Account Usage #Restaurant#",RestAccTClass,modRest);
  Setting("Active Bar Menus",BarMenuSetTClass,modRest);
  Setting("Bar Tab Classes",RestAccClassLClass,modRest);
  Setting("Bar Menu Types",BarMenuTypeLClass,modRest);
  Setting("Bar Menus",BarMenuLClass,modRest);
  Setting("Blocked Items",BranchBlockINLClass,modRest);
  Setting("Daily Statistics",SalesTimeTClass,modRest);
  Setting("Default Payment Modes",DefCashTClass,modRest);
  Setting("Drawers",DrawerLClass,modRest);
  Setting("Item Classifications",DILClass,modRest);
  Setting("Item Departments",RestItemDeptLClass,modRest);
  Setting("Kitchen Departments",RestOrderDeptLClass,modRest);
  Setting("Kitchen Orders",KitchenOrderLClass,modRest);
  Setting("Kitchen Order Screen",RestKItchenOrdWClass,modRest);  
  Setting("Kitchen Order Screen #Colours#",RestPanelColourLClass,modRest);
  Setting("Local Machine Groups",LocalMachineGroupsTClass,modRest);
  Setting("Local Machines",LocalMachineLClass,modRest);
  Setting("Local Machine Payment Modes",RestPMTClass,modRest);
  Setting("Loyalty Cards",LoyaltyCardLClass,modRest);
  Setting("Loyalty Card Membership Levels",LCMemberLevelLClass,modRest);
  Setting("Loyalty Card Membership Level Structure",LCMLevelSetTClass,modRest);
  Setting("Loyalty Points",LoyaltyPointsLClass,modRest);
  Setting("Loyalty Points per Location",LocLoyaltyPointsLClass,modRest);
  Setting("Loyalty Points Redemption",LoyPointRedeemLClass,modRest);
  Setting("Loyalty Points Redemption per Location",LocLoyPointRedeemLClass,modRest);
  Setting("Meal Courses",MealCourseLClass,modRest);
  Setting("Modifiers",ModifiersLClass,modRest);
  Setting("Nightly Maintenance",NightMaintRestTClass,modRest);
//  Setting("Number Series - Cash",CashSerTClass,modRest); // I belive we should remove this completly
  Setting("Number Series - Bar Tabs",RestAccSerTClass,modRest);
  Setting("POS Button Groups",POSButtonGroupsLClass,modRest);
  Setting("POS Button Pictures",POSButtonPictureLClass,modPOS); //!!TRANSLATE
  Setting("POS Buttons",POSButtonsLClass,modRest);
  Setting("POS Sessions",POSEventLCLass,modRest);
  Setting("POS Settings",CashierDefTClass,modRest);
  Setting("#Restaurant# Booking Types",RestBookTypeLClass,modRest);
  Setting("#Restaurant# Open Hours",RestOpenHoursLClass,modRest);
  Setting("#Restaurant# Settings",RestTClass,modRest);
  Setting("#Restaurant# Setup",RestSetupLClass,modRest);
  Setting("Service Charges",ServiceChargeLClass,modRest);
  Setting("Tables",NeighbourHoodLClass,modRest);
  Setting("Tables Views",TablesViewsLClass,modRest);
  Setting("Tabs Old View",RestAccOldLClass,modRest);
//  Setting("Tables Layouts",TLLClass,modRest);
//  Setting("Tables View",TablesViewWClass,modRest);
  Setting("New Tables View",TableLayoutClass,modRest);

  Document("Bar Tab",RestAccRClass,RestAccForm,RestAccFClass,modRest);
  Document("Bar Tab Kitchen Order",RestAccKitchenRClass,RestAccKitchenForm,RestAccKitchenFClass,modRest);
  Document("Bar Tab Receipt",RestAccReceiptRClass,RestAccReceiptForm,RestAccReceiptFClass,modRest);
  Document("Cancel Order",RestAccRClass,RestAccCancelForm,RestAccCancelFClass,modRest);
  Document("Cash Events",CashRClass,CashForm,CashFClass,modRest);
  Document("Fire Order",RestAccRClass,RestAccFireOrderForm,RestAccFireOrderFClass,modRest);
  Document("Guest Bill ",RestAccGuestBillRClass,RestAccGuestBillForm,RestAccGuestBillFClass,modRest);
  if (HasLocalization("HRV,SVN")) then begin
    Export("(Croatia, Slovenia) Cash invoices export",CashInvCroEClass,CashInvExEn,modRest);
  end;
  Export("#Restaurant# Daily Statistics",SalesTimeEClass,SalesTimeEn,modRest);

  Report("Bar Tabs Journal",RestAccJRClass,RestAccJRn,0,modRest);
  Report("Cash Up",CashupRClass,CashupRn,0,modRest);
  Report("GP, Bar Tabs", RestAccGPRClass,RestAccGPRn,0,modRest);
  Report("Loyalty Card Statement",LoyaltyCardRClass,LoyaltyCardRn,0,modRest);
  Report("#Restaurant# Bookings",RestBookingRClass,RestBookingRn,0,modRest);
//  Report("#Restaurant# Cash Report",BarCashRClass,BarCashRn,0,modRest); // Don't think it does anything useful, should use Cashup Report instead
  Report("#Restaurant# Daily Statistics",DetSalesTimeRClass,DetSalesTimeRn,0,modRest);
  Report("#Restaurant# Item Statistics",BarItemStatRClass,BarItemStatRn,0,modRest);
  Report("#Restaurant# Planning",RestPlanningRClass,RestPlanningRn,0,modRest);
  Report("Void Report",VoidedRowsRClass,VoidedRowsRn,0,modRest);
//  Report("Sales Statistics",BarSalesStatRClass,BarSalesStatRn,0,modRest); // Is not very useful

  Maintenance("Cash Up",CashupVClass,CashupMn,modRest);
  Maintenance("Create POS Buttons",CreatePOSButtonsVClass,CreatePOSButtonsMn,modRest);
//  Maintenance("Generate Daily #NL# Transactions",BarGenNLVClass,BarGenNLMn,modRest); // Don't think it should be used any more
  Maintenance("Nightly Maintenance",MidStatRestVClass,MidStatRestMn,modRest);
  Maintenance("Update #Stock#",BarGenSDVClass,BarGenSDMn,modRest);

/* modInteg */

  Import("Banking File, TeleHansa",TeleHipmIn,TeleHipmIn,modInteg); // I moved it here because I don't know if it is beeing used
  Import("POS Off-line",POSIn,POSIn,modInteg);
  Import("Transaction as rows",TRRowIn,TRRowIn,modInteg);

//  Import("Banking File, Nord Finans",IPNordFNor,IPNordFNor,modInteg); // Nor, no code
//  Import("Check File from Hogia",0,ARFromHogia2In,modInteg);
//  Import("New backup, manual file search",0,NBIn,modInteg);
  if (HasLocalization("NOR")) then begin
    Import("#Sales Ledger# from Hogia",ICSIClass,ARFromHogiaIn,modInteg);
  end;
  if (HasLocalization("FIN,NOR,SWE")) then begin
    Import("Transactions from Analyste",0,SpecTrIn,modInteg);
  end;
//  Import("Update Known Serial Numbers",SVOSerUpIn,SVOSerUpIn,modInteg); // There is code for a SVOUpIn...


  Export("Activities",ExpActEClass,ExpActEn,modInteg);
  Export("Bar Tabs",ExTabRowsEClass,ExTabRowsEn,modInteg);
  Export("Base Registers",GBaseEClass,GBaseEn,modInteg);
  Export("Communication Centre Contacts",BPCUEClass,BPCUEn,modInteg);
  Export("Contact List",Customer1EClass,Customer1En,modInteg);
  Export("Contact List (Hansa format)",ContactsEClass,ContactsEn,modInteg);
//  Export("Contact Data",CustAdrEClass,CustAdrEn,modInteg); // SAme export as contact list, only less info beeing exported...
  Export("Contact List to Palm3",PalmEClass,PalmEn,modInteg);
  Export("Contact Relations List",Contact1EClass,Contact1En,modInteg);
  Export("Invoices",InvEClass,InvEn,modInteg);
  Export("Invoice Rows",InvRowEClass,InvRowEn,modInteg);
//  Export("Item Base Registers",GItemBaseEClass,GItemBaseEn,modInteg);
  Export("Items Data",ItemsDataEClass,ItemsDataEn,modInteg);
  Export("Item Info",Art2EClass,Art2En,modInteg);
  Export("Order Rows",OrdRowEClass,OrdRowEn,modInteg);
  Export("Open Invoices",OpenInvEClass,OpenInvEn,modInteg);
  Export("Open #Purchase Invoices#",OpenVIEClass,OpenVIEn,modInteg);
  Export("Payroll System Export",HOLEClass,HOLEn,modInteg);
  Export("POS Server Export",POSServEClass,POSServEn,modInteg); //synchronization instead
  Export("POS Off-line Export",POSClientEClass,POSClientEn,modInteg); //synchronization instead
  Export("Purchase Order Rows",POOrdRowEClass,POOrdRowEn,modInteg);
  Export("Quotation Rows",QTRowEClass,QTRowEn,modInteg);
  Export("Sales Data",SalesDataEClass,SalesDataEn,modInteg);
  Export("Settings",SettingsEClass,SettingsEn,modInteg);
//  Export("System Data",SysEClass,SysEn,modInteg); // Why rewrite it and call i SysDataEn and still keep the old code?
  Export("System Data",SysDataEClass,SysDataEn,modInteg);
  Export("#Time Sheet# Rows",TSRowEClass,TSRowEn,modInteg);
  Export("Transaction Registers",GTransEClass,GTransEn,modInteg);
  Export("Transaction Registers (period)",GTrans2EClass,GTrans2En,modInteg);
  Export("Transactions",TrEClass,GLEn,modInteg);
  if (HasLocalization("UKR")) then begin
    Export("#VAT# Correction Register (Ukraine)",VATIVVIRegUkrEClass,VATIVVIRegUkrEn,modInteg);
  end;
  Export("Web Shop Data",WebShopDataEClass,ToolWebShopDataEn,modInteg);
  Export("Web Shop and CMS Data",WebNGDataEClass,ToolWebNGDataEn,modInteg);

//  Export("Company New Backup",TBEClass,CompanyNBEn,modInteg);
//  Export("Contract Invoicing Per Month",ContrPeriodicEClass,ContrPerEn,modInteg);
//  Export("E-Post Invoices",EPostInvEClass,EPostInvEn,modInteg); // For whom is this??
//  Export("Joined Forest Export", ForestNewClass,ForestNewEn,modInteg); // no source code
//  Export("Electronic Invoicing",ElecInvEClass,ElecInvEn,modInteg);//NO EXPORT ; HTS will TAKE OVER
//  Export("Utleveranser",SHEClass,SHEn,modInteg);
//  Export("Transactions from Other Systems",SpecTrEClass,SFBEn,modInteg);
//  Export("Corresponding Account Export",CorspEClass,CorspEn,modInteg);
//  Export("Reservation Flow",JobFlowEClass,JobFlowEn,modInteg); // there is code behind it, but it is a confusing function
//  Export("Reservation Journal",JobJourEClass,JobJourEn,modInteg); // there is code behind it, but it is a confusing function
//  Export("Email alias",EmailAliasEClass,EmailAliasEn,modInteg);

  Report("Apple GDV Inventory",AppleGDVInvRClass,AppleGDVInvRn,0,modInteg);
  Report("Apple GDV Sell Through",AppleGDVSellRClass,AppleGDVSellRn,0,modInteg);

/* modIntStock */

  RegisterWS("Items In","Items In","New Items In",OffHireVc,modIntStock);
  RegisterWS("Items Out","Items Out","New Items Out",DispatchVc,modIntStock);
  RegisterWS("#Stock# Transfers","#Stock# Transfers","New #Stock# Transfer",INTransferVc,modIntStock);
  RegisterWS("Internal Movements","Internal Movements","New Internal Movement",InternMovVc,modIntStock);
  RegisterWS("Rental Items","Rental Items","New Rental Item",RentINVc,modIntStock);
  RegisterWS("Items","Items","New Item",INLClass,modIntStock);
//  Register("Assets","Assets",AT2UnitVc,modIntStock);
//  Register("Known Serial No.","Known Ser.No.",SVOSerVc,modIntStock);

  Setting("Internal #Stock# Settings",IntSettingTClass,modIntStock);
  Setting("Number Series - Items In",OffHireSerTClass,modIntStock);
  Setting("Number Series - Items Out",DispatchSerTClass,modIntStock);
  Setting("Number Series - #Stock# Transfers",INTransferSerTClass,modIntStock);

  Report("Internal #Stock# List",IntINRClass,IntInvValRn,0,modIntStock);
  Report("Items In Journal",GoodsINRClass,GoodsinRn,0,modIntStock);
  Report("Items Out Journal",GoodsOutRclass,GoodsOutRn,0,modIntStock);
  Report("#Stock# Transfer Journal",INTransferRClass,INTransferRn,0,modIntStock);
  Report("Serial Number History",SerialNrRClass,SerialNrRn,0,modIntStock);

  Document("Internal Movements",InternMovRClass,InternMovForm,InternMovFClass,modIntStock);
  Document("Items In",OffHireRClass,OffHireForm,OffHireFClass,modIntStock);
  Document("Items Out",DispatchRClass,DispatchForm,DispatchFClass,modIntStock);
  Document("#Stock# Transfers",INTransferRClass,INTransferForm,INTransferFClass,modIntStock);

/* modTC */

  Register("Program Mode","Program Mode",ProgramStatusTClass,modTC);
  RegisterWS("Global Users","Global Users","New Global User",GlobalUserVc,modTC);
  RegisterWS("ODBC Events","ODBC Events","New ODBC Event",ODBCEventVc,modTC);
  Register("Firewall","Firewall",FirewallTClass,modTC);
  RegisterWS("Presentations","Presentations","New Presentation",ConfPresVc,modTC);
  RegisterWS("Signatures","Signatures","New Signature",ConfSignVc,modTC);
  Register("Email Queue","Email Queue",EMailQueVc,modTC);
  Register("Fax Queue","Fax Queue",FaxQueVc,modTC);

  Setting("Alarms",AlarmLClass,modTC);
  Setting("Archives",ArchiveLClass,modTC);
  Setting("Available Client Version",AvailableClientTClass,modTC);
  Setting("Biometric Signatures",BiometricSignLClass,modTC);
//  Setting("Client Certificates",ClientCertificateLClass,modTC); //  Not used anymore.
  Setting("Client Integration",ClientIntegrationClass,modTC);
  Setting("Contact Persons (Old Register)",ContactLClass,modTC);
  Setting("CRM Limitations",CRMLimitsTClass,modTC);
  Setting("Database Log",DBLogTClass,modTC);
  Setting("Database Status",DBERecordsTClass,modTC);
  Setting("Escape Sequences",EscSeqLClass,modTC);
  Setting("Fax Settings",FaxSettingsTClass,modTC);
  Setting("Fields Settings",EditFieldsAccessLClass,modTC);
  Setting("Global CRM Settings",GlobalCRMTClass,modTC);
  Setting("Guests (Old Register)",ProfileLClass,modTC);
  Setting("HAL Rules",HALRulesLClass,modTC);
  Setting("Internal System Alerts",BASysIntTClass,modTC);
  Setting("Item Buttons",LocalMachineIBLClass,modTC);
  Setting("Item Tile Labels",LocalMachineITLLClass,modTC);
//  Setting("Local Machines Fiscal Printer Options",LocalMachineFPLClass,modTC); //where is it ?
  Setting("Limited Access",LimitedAccessTClass,modTC);
  Setting("Local Machines",LocalMachineLClass,modTC);
  Setting("Local Machine Serial Port Devices",SerialPortDeviceLClass,modTC);
  Setting("Local Settings",LocalMachineSetLClass,modTC);
  Setting("Logging Control",RHistSetTClass,modTC);
  Setting("Login Actions",LoginActionLClass,modTC);
  Setting("Login Shortcuts",LocalMachineLoginLClass,modTC);
  Setting("Macro",MacroWClass,modTC);
  Setting("Mailboxes",ConferenceWClass,modTC);
  Setting("Mobile Devices",MobileDeviceLClass,modTC);
  Setting("MS Exchange",MSExchangeTClass,modTC);
  Setting("My IP Address",MyIPAddrTClass,modTC);
  Setting("Navigation Links",NavLinkLClass,modTC);
  Setting("ODBC Links",ODBCLinkTClass,modTC);
  Setting("Open TCP/IP", OpenTCPIPTClass,modTC);
  Setting("Password Server",PwdServerTClass,modTC);
  Setting("Poll Registers With Sync",PollRegWithSyncLClass,modTC);
  Setting("Position Alerts",PositionAlertLClass,modTC);
  Setting("Public IP Addresses",PublicIPTClass,modTC);
  Setting("Receipt Printer Texts per Machine",MachineCashLClass,modTC);
  Setting("Register Search Mode",RegSearchTClass,modTC);
  Setting("Relational DB Registers", RDBRegsTClass,modTC);
  Setting("Relational DB Settings", RDBTClass,modTC);
  Setting("Report Specifications", RcLClass,modTC);
  Setting("Secondary Servers",SatServersClass,modTC);
  Setting("Serial Printer",LocalMachineSPLClass,modTC);
  Setting("Services Cache",ServiceCacheLClass,modTC);
  Setting("Shared Blocks",ShareBlockSetTClass,modTC);
  Setting("Shared Registers",ShareVcSetTClass,modTC);
  Setting("SIP Servers (Old, Unused)",SIPServerTClass,modTC);
  Setting("#Supplier# Categories(Old Register)",VGLClass,modTC);
  Setting("#Suppliers# (Old Register)",VELClass,modTC);
  Setting("Synchronisation Settings",SyncOptionTClass,modTC);
  Setting("Synchronised Number Series",SynkAutoSerLClass,modTC);
  Setting("Synchronised Number Series (global registers)",SynkGlobalAutoSerLClass,modTC);
  Setting("Sync. Allocated Serial Numbers",SynkDBIDTakenSerLClass,modTC);
  Setting("Sync. Registered Database ID",SynkDBIDRegLClass,modTC);
  Setting("Sync. Allocated Serial Numbers (global registers)",SynkGlobalDBIDTakenSerLClass,modTC);
  Setting("Sync. Registered Database ID (global registers)",SynkGlobalDBIDRegLClass,modTC);
  Setting("System Logs",SysLogTClass,modTC);
  Setting("TAPI Gateway",TAPIGWTClass,modTC);
  Setting("Timed Operations",BackupTClass,modTC);
  Setting("Timed Imports",TimedImportLClass,modTC);
  Setting("Timed Maintenances",TimedMaintLClass,modTC);
  Setting("Web Client Settings",WebClientSettingsTClass,modTC);
  Setting("Web Nav Links",WebNavLinkLClass,modTC);
  Setting("Web Requests",WebRequestsTClass,modTC);

//  Setting("User Feature Pref.",UserFeaturePrefTClass,modTC);
//  Setting("Features",FeaturesWClass,modTC);
  
  
//  Setting("Company Signature",CompSignTClass,modTC);
//  Setting("Calendar",CalWClass,modTC);
//  Setting("Download Files",FileTransferTClass,modTC);

// I guess these things should be available in the Database Maintenance module
//  Setting("INSeres",INSerLClass,modTC);
//  Setting("INrs",INrsLClass,modTC);
//  Setting("PErsVc",PErsLClass,modTC);
//  Setting("MainAcc",MainAccrualLClass,modTC);
//  Setting("CUToCUs",CUToCULClass,modTC);


/* modPOS */

  RegisterWS("POS Invoices","POS Invoices","New Invoice",IVCashVc,modPOS);
  RegisterWS("Contacts","Contacts","New Contact",CUVc,modPOS);
  RegisterWS("Cashier Counts","Cashier Counts","New Cashier Count",CashierBalVc,modPOS);
  RegisterWS("Credit Cards","Credit Cards","New Credit Card",CreditCardVc,modPOS);
  RegisterWS("Items","Items","New Item",INVc,modPOS);
  RegisterWS("Loyalty Cards","Loyalty Cards","New Loyalty Card",LoyaltyCardVc,modPOS);
  RegisterWS("Supermarket Invoices","Supermarket Invoices","New Invoice",POSPIVCashLClass,modPOS);
  RegisterWS("POS Invoices Touch Screen","POS Invoices Touch Screen","New Invoice",NPTSIVCashLClass,modPOS);
  
  Setting("Payment Gateways",CCAccountIDLClass,modPOS); 
  Setting("Apple Care Products",ACPLClass,modPOS);

  Setting("Baggers",BaggerTCLass,modPOS);
  Setting("Cash Events",CashLClass,modPOS);
//  Setting("Cash Printer Client Settings",CashSetTClass,modPOS);
  Setting("Credit Card Slips",CouponLClass,modPOS);
  Setting("Credit Card Types",CredCardTypeLClass,modPOS); 
  Setting("Default Payment Modes",DefCashTClass,modPOS);
  Setting("Deferred CC Transactions Rules",DefCCTransTClass,modPOS);
  Setting("Deferred CC Transactions Settings",DeferCCTClass,modPOS);
  Setting("Deferred CC Transactions",DefCCTransLClass,modPOS);
  Setting("Deferred CC Transactions Status",DefCCTransStatusLClass,modPOS);
  Setting("Drawers",DrawerLClass,modPOS); 
  Setting("Dynamic Barcode",VolumBarcodeTCLass,modPOS);
  Setting("Fields for creating New Customer",NPTSNewCUFieldsTCLass,modPOS);
  if (HasLocalization("BRA")) then begin
    Setting("Fiscal Printer #VAT# Codes (Brazil)",ZimFiscalPrinterVATCodeTClass,modPOS);
  end;
  if (HasLocalization("ZWE")) then begin
    Setting("Fiscal Printer #VAT# Codes (Zimbabwe)",ZimFiscalPrinterVATCodeTClass,modPOS);
  end;
  Setting("Gift Receipts",GiftReceiptLClass,modPOS);
  Setting("Gift Voucher Types",GCTypeLClass,modPOS);
  Setting("Gift Vouchers Settings",GCTClass,modPOS);
  Setting("Gift Vouchers Issued",GCLClass,modPOS);
  Setting("Gift Vouchers Received",GCRLClass,modPOS);
  Setting("Gift Vouchers Sold",GCSLClass,modPOS);
  Setting("Local Credit Card Terminal",RahaxiTClass,modPOS);
  Setting("Local Machine Payment Modes",RestPMTClass,modPOS);
  Setting("Local Machines",LocalMachineLClass,modPOS);
  Setting("Loyalty Card Membership Levels",LCMemberLevelLClass,modPOS);
  Setting("Loyalty Card Membership Level Structure",LCMLevelSetTClass,modPOS);
  Setting("Loyalty Points",LoyaltyPointsLClass,modPOS);
  Setting("Loyalty Points per Location",LocLoyaltyPointsLClass,modPOS);
  Setting("Loyalty Points Redemption",LoyPointRedeemLClass,modPOS);
  Setting("Loyalty Points Redemption per Location",LocLoyPointRedeemLClass,modPOS);
  Setting("Merchant ID",CCMerchantIDLClass,modPOS); 
  Setting("Modifiers",ModifiersLClass,modPOS);
  Setting("Number Series - Cash Events",CashSerTClass,modPOS);
  Setting("Number Series - Coupons",CouponSerTClass,modPOS);
  Setting("Number Series - Deferred CC Tansactions",DefCCTransSerTClass,modPOS); 
  Setting("Number Series - Gift Receipt",GiftReceiptSerTClass,modPOS); 
  Setting("Number Series - Gift Vouchers",GCSerTClass,modPOS);
  Setting("Number Series - Gift Vouchers Received",GCRSerTClass,modPOS);
  Setting("Number Series - POS Balances",POSBalanceSerTClass,modPOS);
  Setting("Number Series - POS Invoices",IVCashSerTClass,modPOS); 
  Setting("Number Series - POS Sessions",POSEventSerTClass,modPOS);
  Setting("Payment Currencies",POSCurrenciesTClass,modPOS);
  Setting("POS Balances",POSBalanceLCLass,modPOS);
  Setting("POS Button Groups",POSButtonGroupsLClass,modPOS);
  Setting("POS Buttons",POSButtonsLClass,modPOS);
  Setting("POS Commands",POSCommandsTCLass,modPOS);
  Setting("POS Sessions",POSEventLCLass,modPOS);
  Setting("POS Settings",CashierDefTClass,modPOS);
  Setting("Receipt Printer Texts",CashPrintTClass,modPOS);
  Setting("Receipt Printer Texts per Machine",MachineCashLClass,modPOS);
  Setting("Receipt Printers",CashPrSetLClass,modPOS);
  Setting("Split Items",SplitINLClass,modPOS);
  Setting("Supervisors",SupervisorTCLass,modPOS);
  Setting("User Defined Field Labels - Local Machine",LocalMachineLBlockTClass,modPOS);  
  
  if (HasLocalization("SRB")) then begin
    Report("Book of Daily Reports (OEDI, Serbia)",DayRepBookRClass,DayRepBookRn,0,modPOS);
  end;
  Report("Cash Up",CashupRClass,CashupRn,0,modPOS);
  Report("Cashier Statistics",CashierStatsRClass,CashierStatsRn,0,modPOS);
  Report("Collections Analysis",CollectionsAnalysisRClass,CollectionsAnalysisRn,0,modPOS);  
  Report("Credit Card Slips Reconciliation",CouponReconRClass,CouponReconRn,0,modPOS);
  Report("Daily Balance",DayBalRClass,DayBalRn,0,modPOS);
  if (HasLocalization("SWE")) then begin
    Report("Electronic Journal",POSEJournalRClass,POSEJournalRn,0,modPOS);
    Report("Fiscal Control Report (Sweden)",CleanCashCashupRClass,CashupRn,0,modPOS);
  end;
  if (HasLocalization("PRT")) then begin
    Report("Fiscal Printer Cash (Portugal)",EncerrRClass,EncerrRn,0,modPOS);
  end;
  Report("Gift Vouchers",GiftCerRClass,GiftCerRn,0,modPOS);
  Report("GP, POS Invoices", PIVGPRClass,PIVGPRn,0,modPOS);
  Report("Item Group #VAT#",ITVATRClass,ITVATRn,0,modPOS);
  Report("Item Multi-Buy Statistics",INMultiBuyStatRClass,INMultiBuyStatRn,0,modPOS);
  Report("Item Price List Statistics",INPriceListStatRClass,INPriceListStatRn,0,modPOS);
  Report("Loyalty Card Statement",LoyaltyCardRClass,LoyaltyCardRn,0,modPOS);
  Report("#N/L# Transfer, Cash Invoices", TransGenPOSRClass,TransGenPOSRn,0,modPOS);
  Report("POS Bonus",POSBonusRClass,POSBonusRn,0,modPOS);
  Report("POS Invoice Journal",IVCJRClass,InvCashRn,0,modPOS);
  if (HasLocalization("PHL")) then begin
    Report("Terminal Reading",TerminalPHLZRClass,TerminalPHLZPOSRn,0,modPOS);
  end;
  Report("Variety Enquiry",VarEnqRClass,VarEnqRn,0,modPOS);
  if (HasLocalization("SWE")) then begin
    Report("X-Report",POSXRClass,POSZRn,0,modPOS);
    Report("Z-Report",POSZRClass,POSZRn,0,modPOS);
  end;

  if (HasLocalization("MEX")) then begin
    Export("CFDI E-invoicing (Mexico)",CFDIEIVCashEClass,CFDIEIVCashEn,modPOS);
  end;
  if (HasLocalization("HRV,SVN")) then begin
    Export("(Slovenia, Croatia) Cash invoices export",CashInvCroEClass,CashInvExEn,modPOS);
  end;  
  
  Document("Cash Events",CashRClass,CashForm,CashFClass,modPOS);
  Document("Gift Receipt",GiftReceiptRClass,GiftReceiptForm,GiftReceiptFClass,modPOS);
  Document("Gift Vouchers",GCRClass,GCForm,GCFClass,modPOS);    
  Document("POS Invoices",IVCashRClass,InvCashForm,IVCashFClass,modPOS);
  Document("Return POS Invoices",IVCashRetRClass,InvCashRetForm,IVCashRetFClass,modPOS);

  Maintenance("Cash Up",CashupVClass,CashupMn,modPOS);
  Maintenance("Create POS Buttons",CreatePOSButtonsVClass,CreatePOSButtonsMn,modPOS);
  Maintenance("Create Slips #N/L# Trans",NLTransCredCardSlipVClass,NLTransCredCardSlipMn,modPOS);
//  Maintenance("Create #NL# Transaction",DayBalVClass,DayBalMn,modPOS); // Don't think it should be used any more
  Maintenance("Process Deferred CC Transactions",ProDefCCTransVClass,ProDefCCTransMn,modPOS);
  Maintenance("Update #Stock#",POSUpdStockVClass,POSUpdStockMn,modPOS);

/* modPOSOffLine */

  RegisterWS("POS Invoices","POS Invoices","New Invoice",IVCashVc,modPOSOffLine);
  RegisterWS("Items","Items","New Item",INVc,modPOSOffLine);
  RegisterWS("Cashier Counts","Cashier Counts","New Cashier Count",CashierBalVc,modPOSOffLine);
  RegisterWS("Summary POS Sales","Summary POS Sales","New Invoice",POSSalesVc,modPOSOffLine);
  RegisterWS("Items Updating #Stock#","Items Updating #Stock#","New Item Updating #Stock#",ArtUpdStockVc,modPOSOffLine);
  if (HasLocalization("PRT")==false) then begin
    RegisterWS("Supermarket Invoices","Supermarket Invoices","New Invoice",POSPIVCashLClass,modPOSOffLine);
  end;
  Register("Synchronised Number Series","Synchronised Number Series",SynkAutoSerVc,modPOSOffLine);

  Setting("Default Payment Modes",DefCashTClass,modPOSOffLine);
  Setting("Local Machine Payment Modes",RestPMTClass,modPOSOffLine);
  Setting("Offline Settings",OffLineSetTClass,modPOSOffLine);
  Setting("POS Commands",POSCommandsTCLass,modPOSOffLine);
//  Setting("Local OffLine No.",LocalOffLineNrTClass,modPOSOffLine);

/* modUserSet */

  /* this module is for settings an ordinary user should be allowed to do that would */
  /* otherwise fit in the system module */

  RegisterWS("Item Buttons","Item Buttons","New Item Button",ItemButtonsTClass,modUserSet);
  RegisterWS("Item Status Settings","Item Status Settings","New Item Status Setting",ItemStatUserVc,modUserSet);
  Register("Item Tile Labels","Item Tile Labels",ItemTileLabelTClass,modUserSet);
  Register("Login Shortcuts","Login Shortcuts",LocalLoginTClass,modUserSet);
  RegisterWS("Tab Item Groups","Tab Item Groups","New Tab Item Group",RestITVc,modUserSet);

  Setting("Client Date and Numeric Format",ClientFormatTClass,modUserSet);
  Setting("Client Language",UserLanguageTClass,modUserSet);
  Setting("Fiscal Printer Reports",FM3000CommandsClass,modUserSet);
//  Setting("Local Items",LocalINLClass,modUserSet);
//  Setting("Local Item Groups",LocalITLClass,modUserSet);
  Setting("Local Machine",LocalMachineTClass,modUserSet);
  Setting("Local Optional Features",LocalOptionalFeaturesTClass,modUserSet);
  
  Setting("Local Machine Payment Modes",RestPMTClass,modUserSet);
  Setting("Login Options",LocalLoginOptionsTClass,modUserSet);
//  Setting("Local Prices",LocalPLLClass,modUserSet);
  Setting("Local Serial Port Devices",LSerialPortDeviceLClass,modUserSet);
  Setting("Matrix Printer",PCPrintTClass,modUserSet);
  Setting("Serial Printer",SerPrintTClass,modUserSet);
  Setting("User Defined Field Labels - Local Machine",LocalMachineLBlockTClass,modUserSet);
  Setting("User Warnings on UnOKed Records",UserUnOkWarnWClass,modUserSet);
  Setting("Web Client",WebClientTClass,modUserSet);

  Report("Connection Log",ConnectionLogRClass,ConnectionLogRn,0,modUserSet);
  Report("Latency",LatencyRClass,LatencyRn,0,modUserSet);
  Report("Report Status",MyStatusRClass,StatusRn,0,modUserSet);
  
//  Report("Skype Import Status",SkypeImportStatusRClass,SkypeImportStatusRn,0,modUserSet);
  
/* modWebShop */

  Register("Shopping Basket","Shopping Basket",ShopBaskVc,modWebShop);
  RegisterWS("Item Classifications","Item Classifications","New Item Classification",DIVc,modWebShop);
  RegisterWS("HTML Extras","HTML Extras","New HTML Extra",WebHTMLVc,modWebShop);
  RegisterWS("Web Item Listing","Web Item Listing","New Web Item Listing",WebItemListVc,modWebShop);
//  Register("Mail","Mail",MailVc,modWebShop);

  Report("Identifiers List",MailIdentRClass,MailIdentRn,0,modWebShop);

  Setting("Access to functions from Web",FunctionsOnWebTClass,modWebShop);
  Setting("Payment Gateways",CCAccountIDLClass,modWebShop);
  Setting("Conference Alias",ConfAliasLClass,modWebShop);
  Setting("Credit Card Payment Refernce No.",ORSerNrTClass,modWebShop);
  Setting("Credit Card Types",CredCardTypeLClass,modWebShop);
  Setting("Default Payment Modes",DefCashTClass,modWebShop);
  Setting("Frames",WebFramesTClass,modWebShop);
  Setting("Framesets",WebFrameSetTClass,modWebShop);
  Setting("Internet Service Tariffs",ISPackageLClass,modWebShop);
  Setting("Merchant ID",CCMerchantIDLClass,modWebShop);
  Setting("Objects for CC Invoices",WebShopSettingTClass,modWebShop);
  Setting("Parameter Conversion",WebParamConvLClass,modWebShop);
  Setting("Web Adverts",WebNewAdvertLClass,modWebShop);
  Setting("Web Adverts Setting",WebAdvertTClass,modWebShop);
  Setting("Web Contents",WebContentsTClass,modWebShop);
  Setting("Web Freight",WebFreightLClass,modWebShop);
  Setting("Web Key Words",WebKeywordsTClass,modWebShop);
  Setting("Web Link Lists",WebLinkListsLClass,modWebShop);
  Setting("Web Links",WebLinkLClass,modWebShop);
  Setting("Web Menus",WebMenuLClass,modWebShop);
  Setting("Web Pages",WebPagesLClass,modWebShop);
  Setting("Web Order Report",WebOrdRepTClass,modWebShop);
  Setting("Web Settings",WebControlTClass,modWebShop);
//  Setting("Web Shop Mail",WebRegMailTClass,modWebShop);
  Setting("Web Sites",WebSitesTClass,modWebShop);
  Setting("Web Subcodes",WebSubLClass,modWebShop);
  Setting("Web Texts",WebTextLClass,modWebShop);
/*
  Setting("Item Note Matrix",WebItemNoteLClass,modWebShop);
  Setting("Item Notes",WebNoteLClass,modWebShop);
  Setting("Item Picture Matrix",WebItemPicLClass,modWebShop);
  Setting("Item Pictures",WebPicLClass,modWebShop);
  Setting("Item Tree",WebINTreeLClass,modWebShop);
*/
//  Setting("Shopping Basket Control",WebBaskCtrlLClass,modWebShop);
//  Setting("Web Conferences",WebConferenceTClass,modWebShop);

/* modWebShopNG */

  RegisterWS("Content","Content","New Content",WebNGContentVc,modWebShopNG);
  RegisterWS("Translations","Translations","New Translation",WebNGTranslateVc,modWebShopNG);
  RegisterWS("Pages","Pages","New Page",WebNGPageVc,modWebShopNG);
  RegisterWS("Menus","Menus","New Menu",WebNGMenuVc,modWebShopNG);
  RegisterWS("Elements","Elements","New Element",WebNGElementVc,modWebShopNG);
  RegisterWS("Structure","Structure","New Structure",WebNGStructVc,modWebShopNG);
  RegisterWS("Products","Products","New Product",WebNGProductVc,modWebShopNG);
//  Register("Component Groups","Component Groups",WebNGComponentVc,modWebShopNG);
  Register("Statistics","Statistics",WebNGStatVc,modWebShopNG);

//  Setting("Component Categories",WebNGComponentCatLClass,modWebShopNG);
  Setting("Content Categories",WebNGContentCatLClass,modWebShopNG);
  Setting("Content Styles",WebNGContentStyleLClass,modWebShopNG);
  Setting("Countries on Web",WebNGCountryLClass,modWebShopNG);
  Setting("Country Regions",WebNGCountryRegionLClass,modWebShopNG);
  Setting("Customer Registration Fields",CURegFieldLClass,modWebShopNG);
  Setting("Delivery Address Fields",DelAddrFieldLClass,modWebShopNG);
  Setting("Display on the Web",WebDisplayLClass,modWebShopNG);
  Setting("Favourite Items",WebNGFavItemLClass,modWebShopNG);
  Setting("Forum Setting",WebNGForumTClass,modWebShopNG);
  Setting("Forum Records",WebNGForumRecLClass,modWebShopNG);
  Setting("Forum Tags",WebNGForumTagsTClass,modWebShopNG);
  Setting("Google ReCaptcha Settings",WebNGReCaptchaTClass,modWebShopNG);  
  Setting("Host Redirects",HttpHostRedirectLClass,modWebShopNG);
  Setting("Item Search Settings",WebNGSearchTClass,modWebShopNG);
  Setting("Languages on Web",WebNGLanguageLClass,modWebShopNG);
  Setting("Mail Confirmation Sessions",MailConfirmLClass,modWebShopNG);
  Setting("Mappings Company/Country",WebNGCompCountryLClass,modWebShopNG);
  Setting("Mappings Hostname/Country",WebNGHostCountryLClass,modWebShopNG);
  Setting("My Account Settings",MyAccountTClass,modWebShopNG);
  Setting("Objects for CC Invoices",WebShopSettingTClass,modWebShopNG);
  Setting("Path Redirects",HttpPathRedirectLClass,modWebShopNG);
  Setting("Payment Sessions",WebNGPaySessionLClass,modWebShopNG);
  Setting("Paypal Settings",PaypalTClass,modWebShopNG);
  Setting("Product Categories",WebNGProductCatLClass,modWebShopNG);
  Setting("Product Views",WebNGProductViewLClass,modWebShopNG);
  Setting("Settings for Testing",WebNGTestTClass,modWebShopNG);
  Setting("Simple Website",SimpleWebTClass,modWebShopNG);
  Setting("Sites",WebNGSiteTClass,modWebShopNG);
  Setting("University settings",WebNGUniversityTClass,modWebShopNG);
  Setting("Web Payment Methods",WebPayMethodLClass,modWebShopNG);
  Setting("Web Shop Email",WebRegMailTClass,modWebShopNG);
  Setting("Web Server Settings",WebNGSettingsTClass,modWebShopNG);
  Setting("Web Texts",WebTextLClass,modWebShopNG);
  Setting("Webshop Baskets",WebNGShopBasketLClass,modWebShopNG);
  Setting("Webshop Company Settings",WebNGShopCompTClass,modWebShopNG);
  Setting("Webshop Settings",WebNGShopTClass,modWebShopNG);

  Maintenance("Create Products from Items",WebNGCreateProductsVClass,CreateWebProductsMn,modWebShopNG);

  Report("Web Statistics",WebStatRClass,WebStatRn,0,modWebShopNG);
  Report("Used Web Pages",UsedWebPageListRClass,UsedWebPageListRn,0,modWebShopNG);
  Report("WebSite Info",WebSiteInfoRClass,WebSiteInfoRn,0,modWebShopNG);

/* modDBMain */
/* This module doesn't have to be translated, if you don't want to. */
/* It is for all the functions that help consultants to find logical errors in the database */
/* All functions that could be nice to have but shouldn't be shown to, or used by, the customers, should go here */
/* This module can be activated by placing a file called "DBMAINT" in the CLIENT folder */
/* Feel free to suggest moving things here that really doesn't belong where it is now. */
  Register("Data Purge","Data Purge",RegArchiveVc,modDBMain);
  Register("Attached Files","Attached Files",Attach2Vc,modDBMain);
  Register("Notes","Notes",NotepadVc,modDBMain);
  Register("Messages","Messages",SMSVc,modDBMain);

// Norway, you can put this to modSL or something, to have easier access

  Report("Activities in Other Companies",ActUserCompRClass,ActUserCompRn,0,modDBMain);
  Report("Activity Type Check",ActTypeCheckRClass,ActTypeCheckRn,0,modDBMain);
  Report("Message History",ChatHistoryRClass,ChatHistoryRn,0,modDBMain);
  Report("Global Message History",GlobalChatHistoryRClass,GlobalChatHistoryRn,0,modDBMain);
  Report("Close Items",CloseINRClass,CloseINRn,0,modDBMain);
  Report("Delay Debug Report",DelayRClass,DelayRn,0,modDBMain);
  Report("Missing Linked Records",LinkedRecsRClass,LinkedRecsRn,0,modDBMain);
  Report("Missing Records from Connected Registers",ConectedRecsRClass,ConectedRecsRn,0,modDBMain);
  Report("Order Integrity Check",ORIntCheckRClass,ORIntCheckRn,0,modDBMain);
// Norway, you can put this to modSL or something, to have easier access
  Report("Old #VAT# Code Invoice Test",OldVATCodeTestRClass,OldVATCodeTestRn,0,modDBMain);
  Report("Skype Call History",SkypeCallHistoryRClass,SkypeCallHistoryRn,0,modDBMain);
  Report("Skype Message Count",SkypeMessageCountRClass,SkypeMessageCountRn,0,modDBMain);
  Report("User Log",UserLogRClass,UserLogRn,0,modDBMain);

//  Import("Sonic Q",SonicQIn,SonicQIn,modDBMain);

  Export("Companies Text Backup",TBE2Class,CompanyTBEn,modDBMain);
  Export(ProductName & " Files",HWFilesClass,HWFilesEn,modDBMain);
  Export("Special Company Backup",TBE3Class,SpecCompTBEn,modDBMain);
  Export("Register Export",ExpRegEClass,ExpRegEn,modDBMain);

  Setting("Agreement Charges",RentChrgLClass,modDBMain);
  Setting("Asset History Support Register",InvrsLClass,modDBMain);
  Setting("Chat Name to Contacts",ChatNameContactLClass,modDBMain);
  Setting("Data Purge Details",RegArchiveDetailLClass,modDBMain);
  Setting("Deficiency #Stock#",DfncyStockLClass,modDBMain);
  Setting("#Favourite# Activity Types",FavActTypeLClass,modDBMain);
  Setting("Form Definitions",FormDefLClass,modDBMain);
  Setting("#Instalments# AP",APInstallLClass,modDBMain);
  Setting("#Instalments# AR",ARInstallLClass,modDBMain);
  Setting("#Instalment# History",ARInstallHistLClass,modDBMain);
  Setting("Item History Support Register",ItemHistLClass,modDBMain);
  Setting("Item Sales Statistics",STLClass,modDBMain);
  Setting("Item Status Support Register",ItemStatusLClass,modDBMain);
  Setting("Item Internal #Stock# Status Support Register",IntISLClass,modDBMain);
  Setting("Item Status at Positions Support Register",PISLClass,modDBMain);
  Setting("Job Descriptions (old)",JobDescTClass,modDBMain);
  Setting("Local Messages",SMSLocLClass,modDBMain);
  Setting("Legal Record Numbers",OffSerNrLClass,modDBMain);
  Setting("Log Item Status Updates",TestItemStatusTClass,modDBMain);
  Setting("Loyalty Points History",PointsHistLClass,modDBMain);
  Setting("Message Filter",SMSFilterLClass,modDBMain);
  Setting("Payment History",OPrsLClass,modDBMain);
  Setting("POS Journal",POSJournalLClass,modDBMain);
  Setting("Cashup Hist",CashupHistLClass,modDBMain);
  Setting("Prepayments AP",APPayHistLClass,modDBMain);
  Setting("Prepayments AR",ARPayHistLClass,modDBMain);
  Setting("Prepayments Open AR",ARPayLClass,modDBMain);
  Setting("Price Variance",VarianceStatusLClass,modDBMain);
  Setting("Product Name",ProductNameTClass,modDBMain);
  Setting("Receipt History",IPrsLClass,modDBMain);
  Setting("Record Links",RLinkLClass,modDBMain);
  Setting("Resort Event History Support Register",RsrtEventHistLClass,modDBMain);
  Setting("Sequence Numbers",SeqNrTClass,modDBMain);
  Setting("Serial Number Support Register",SerBalLClass,modDBMain);
  Setting("Skype Import Progress",MsgImportProgressLClass,modDBMain);
  Setting("Status History - Cheques",CheckHistLClass,modDBMain);
  Setting("Status History - Own Cheques",OwnCheckHistLClass,modDBMain);
  Setting("#Suppliers# Retentions",VEPRRetentionLClass,modDBMain);
  if (HasLocalization("PRT")) then begin
    Setting("Tax Authorities Replies for e-Deliveries",eShipTaxAuthReplyLClass,modDBMain);
  end;
  Setting("Temp #Stock#",TempStockLClass,modDBMain);
  Setting("User Defined",RepDefTClass,modDBMain);
  Setting("User Defined Reports",UserDefRepLClass,modDBMain);
  Setting("User Defined Columns",UserDefRepColumnsLClass,modDBMain);
  Setting("User Defined Lines",UserDefRepLinesLClass,modDBMain);
  Setting("UUID History",UUIDHistoryLClass,modDBMain);
  Setting("#VAT# Codes (Old)",OldVATCodeTClass,modDBMain);
  Setting("XS",XSLClass,modDBMain);
  Setting("XSrs",XSrsLClass,modDBMain);
  Setting("PurgeTR",PurgeTRLClass,modDBMain);

  Maintenance("Add #Salesman#",AddSalesManVClass,AddSalesManMn,modDBMain);
//  Maintenance("Check crashed database",FixDBVClass,FixDBMn,modDBMain);// no code
//  Maintenance("Check Database",CheckDBVClass,CheckDBMn,modDBMain);// no code
  Maintenance("Clear and resync register",ClearAndResetSyncVClass,ClearAndResetSyncMn,modDBMain);
  Maintenance("Clear Empty RLinks",ClearRLinkVClass,ClearRLinkMn,modDBMain);
  Maintenance("Close Items",CloseINVClass,CloseINMn,modDBMain);
  if (HasLocalization("EST")) then begin
    Maintenance("Converting bank accounts (IBAN)",ConverttoIBANVClass,ConverttoIBANMn,modDBMain);
  end;
  Maintenance("Correct Attachment Filenames",Attach2FixUUIDFileVClass,Attach2FixUUIDFileMn,modDBMain);
  Maintenance("Corrections to Shopping Basket",CorrectJobInfVClass,CorrectJobInfMn,modDBMain);
  Maintenance("Create Autoupdate Clients",MakeAutoClientsVClass,MakeAutoClientsMn,modDBMain);
  Maintenance("Create Contracts",CreateCOVClass,CreateCOMn,modDBMain);
  Maintenance("Create Instalments History",CreateInstlHistVClass,CreateInstlHistMn,modDBMain);
  Maintenance("Create Random Bar Tabs",CreateRandomRestAccVClass,CreateRandomRestAccMn,modDBMain);
  Maintenance("Create Random Customers",CreateRandomCustomersVClass,CreateRandomCustomersMn,modDBMain);
  Maintenance("Create Random Invoices",CreateRandomInvoicesVClass,CreateRandomInvoicesMn,modDBMain);
  Maintenance("Create Random Items",CreateRandomItemsVClass,CreateRandomItemsMn,modDBMain);
  Maintenance("Create Random Orders",CreateRandomOrdersVClass,CreateRandomOrdersMn,modDBMain);
  Maintenance("Create Random POS Invoices",CreateRandomIVCashVClass,CreateRandomIVCashMn,modDBMain);
  Maintenance("Data Purge",RegArchiveVClass,RegArchiveMn,modDBMain);
  Maintenance("Delete Asset Transactions",DelATTransVClass,DelATTransMn,modDBMain);
  Maintenance("Delete Attachments",ClearAttachVClass,ClearAttachMn,modDBMain);
  Maintenance("Fill-up Sales Group",PutSalesGroupVClass,PutSalesGroupMn,modDBMain);
//  Maintenance("Generate Random Invoices",InvGenVClass,InvGenMn,modDBMain);  // no code
  Maintenance("Generate Random #N/L# Trans",RandomTransVClass,RandomTransMn,modDBMain);
  Maintenance("Generate Random Sales Orders",RandomORVClass,RandomORMn,modDBMain);
  Maintenance("Move Between Companies",MoveRecordsVcVClass,MoveRecordsVcMn,modDBMain);
  Maintenance("OK #Stock# Records",OKStockVClass,OKStockMn,modDBMain);
/* This should maybe not be shown to customers, it is used to fix a bug */
/* ins Time Billing when you update from version 3.1 to 3.2 or 3.3 */
/* There is a HAL report available to see what will happend */
/* You can have it in, since it helps a few customers (one Swedish customer asked for it */
  Maintenance("Rebuild Project Transactions",RebPTVClass,RebPTMn,modDBMain);
/* This is NOT the same routine as the previous line, this is built to restore */
/* more than the #Time Sheets#. It is recreating the Proj.Trans. that is missing */
/* in the report "Check Project Transactions". */
  Maintenance("Restore Project Transactions",ChPrTransVClass,ChPrTransMn,modDBMain);
  Maintenance("Renumber System Records",RenoSysRecVClass,RenoSysRecMn,modDBMain);
//  Maintenance("Rebuild Support Registers",RebuildSupVClass,RebuildSupMn,modDBMain);
  Maintenance("Update Invoices",FixIVBaseSumVClass,FixIVBaseSumMn,modDBMain);
  Maintenance("Update Trans. Registers Base Cur. Rate",UpdTransBRateVClass,UpdTransBRateMn,modDBMain);

  end;

  return;
end;
