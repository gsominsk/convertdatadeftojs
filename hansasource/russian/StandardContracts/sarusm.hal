external function Boolean HasFormEditor();
external function Boolean HasItemGroups();
/* stengm.hal */
/* Standard Contracts by HansaWorld */

/* This is no longer an Event, make sure you don't have this in */
// event startup
external function Boolean HasDeveloperMode();
external function Boolean HasPersons();
external function Boolean HasModQT();
external function Boolean HasSerialNumbers();
external function Boolean HasModAT2();
external function Boolean HasModCL();
external function Boolean HasStandardCRM();
external function Boolean HasModExp();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();
external function Boolean HasModSO();
external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModSL();
external function Boolean HasModPL();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModRest();
external function Boolean HasModCRM();
external function Boolean HasPayroll();
external function Boolean HasEMail();

external function Boolean HasAdvancedPricing();
external function Boolean HasBase2();
external function Boolean HasCategories();
external function Boolean HasContactClassification();
external function Boolean HasIncomeAndExpenseBook();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLocalMachines();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNumberSeries();
external function Boolean HasOfficialSerNr();
external function Boolean HasObjects();
external function Boolean HasPriceLists();
external function Boolean HasVarieties();
external procedure SetProductTags();
external procedure LoadWindowTags();


begin
  Real h,v,l,vs;

  SetLangMode(LangRussian,"RUS",0);

  if (BuildProductCode=="StandardContracts") then begin

  SetProductTags;
  LoadWindowTags;

  Module("Контракты","",730,modCO);
  
  if (HasEMail) then begin
    Module("Электронная почта","",730,modEmail);
  end;  
  if (HasModNL) then begin
    Module("#Nominal Ledger#","",730,modNL);
  end;
  if (HasModSL) then begin
    Module("#Sales Ledger#","",730,modSL);
  end;
  if (HasModCL) then begin
    Module("Кассовая книга","",730,modCL);
  end;
  if (HasModPL) then begin
    Module("#Purchase Ledger#","",730,modPL);  
  end;
/* modCO */


  RegisterWS("Контракты","Контракты","Новый контракт",COVc,modCO); 
  RegisterWS("Счета-фактуры","Счета-фактуры","Новый счёт-фактура",IVVc,modCO); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modCO); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modCO); 
  if (HasFormEditor) then begin
    RegisterWS("Формы","Формы","Новая форма",DocVc,modCO); 
    RegisterWS("Стили","Стили","Новый стиль",StyleVc,modSY); 
  end;
  if ((ClientMode and LicenseMode==kLicenseModeServer) or HasPersons or HasDeveloperMode) then begin
    RegisterWS("Сотрудники","Сотрудники","Новый сотрудник",UserVc,modSY); 
  end;
  if (HasMultiCurrency or HasBase2) then begin
    RegisterWS("Валюты","Валюты","Новая валюта",CurncyCodeVc,modCO);  
  end;
  if (HasMultiCurrency) then begin
    RegisterWS("Курсы обмена","Курсы обмена","Курс обмена",ERVc,modCO); 
  end;

  Document("Cash Notes",KIVRClass,CashInvForm,CashFClass,modCO);
  Document("Contracts",ContractRClass,ContractForm,ContractFClass,modCO);
  Document("#Credit Notes#",CIVRClass,CredInvForm,CredFClass,modCO);
  Document("Invoices",IVRClass,InvForm,InvFClass,modCO); 
  Document("Periodic Customer Statement",CuPerRClass,CuPerForm,CuPerFClass,modCO);
  Document("Receipt Forms",IPDRClass,IPDForm,IPDFClass,modCO);

  Setting("Company Info",CYWClass,modCO); 
  if (ClientMode) then begin
    switch (LicenseMode) begin
      case kLicenseModeClient:
      case kLicenseModeServer:
//        Setting("Configuration",ModulesTClass,modSY);
        Setting("Конфигурация пользователей",ConfigureUsersTClass,modSY);
    end;
  end;
  Setting("Contract Classes",ContractClassTClass,modCO);
  Setting("Contract Defaults",CODefValTClass,modCO);
//  Setting("Contract Settings",ContractSetTClass,modCO);
//  Setting("Customer Contract Defaults",CUCODefValLClass,modCO);
//  Setting("Renew Contracts",RenewCOLClass,modCO);
//  Setting("Credit Limit",CreditLimitTClass,modCO);
//  Setting("Interest",IITClass,modCO);
//  Setting("Info in Customer Status Report",CustPSLClass,modCO);
  Setting("Invoice Settings",AccTClass,modCO);
/*  
  if (UseAppStoreEnabler==false) then begin
    Setting("Internet Enablers",InternetEnablerTClass,modCO);
  end;
*/  
  if (HasItemClassification) then begin
    Setting("Классификации товаров",DILClass,modCO);
  end;
  if (IsUsingActivationCodes) then begin
    Setting("Internet Enablers",InternetEnablerTClass,modSY);
  end;
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT")) then begin
    Setting("Группы товаров",ITLClass,modCO);
  end;
  if (HasNumberSeries or HasLocalization("LVA")) then begin
    Setting("Legal Invoice Numbers",LegalInvNrTClass,modCO);
  end;    
  Setting("Методы платежа",PMTClass,modCO);
  Setting("Условия платежа",PDLClass,modCO);
  Setting("Reporting Periods",PeriodTClass,modCO);
  if (HasFormEditor) then begin      
    Setting("Стили",StyleLClass,modCO); 
  end;
  if (HasModNL==false) then begin
    if (HasLocalization("BRA,HRV,KEN")) then begin
      Setting("Налоговые шаблоны",TaxTemplateLClass,modCO);
    end;
  end;
  Setting("Units",UnitLClass,modCO);
  Setting("Коды НДС",VATCodeTClass,modCO); 

  Report("Company Info",CompInfoRClass,CompInfoRn,0,modCO);
  Report("Contract Contacts",Contra2RClass,Contra2Rn,0,modCO);
  Report("Contract History",COHistRClass,COHistRn,0,modCO);
//  Report("Contract Item Statistics",COINStatisticsRClass,COINStatisticsRn,0,modCO);
  Report("Contract List",CORClass,CORn,0,modCO);

  Report("Contract Worth",COworthRClass,COworthRn,0,modCO);

  Report("Customer List",CURClass,CustRn,0,modCO);

  Report("Invoice Journal",IVJRClass,InvoiceRn,0,modCO);
  Report("Invoiceable Contracts",COInvRClass,COInvRn,0,modCO);
  Report("Item List",ArtRClass,ArtRn,0,modCO);

  Maintenance("Cancel Unpaid Contracts",CancelDueCOVClass,CancelDueCOMn,modCO);
//  Maintenance("Change Contract Currency",ChangeCOCurrencyVClass,ChangeCOCurrencyMn,modCO);
  Maintenance("Change Contracts",ChangeCOVClass,ChangeCOMn,modCO);
  Maintenance("Create Contract Invoices",CreateCOInvVClass,CreateCOInvMn,modCO);
  Maintenance("Renew Contracts",RenewCOVClass,RenewCOMn,modCO);
  Maintenance("Update Contracts",UpdateCOVClass,UpdateCOMn,modCO);

  if (HasLocalization("PRT")) then begin
//    Export("Communication of Invoices to AT - SAFT",PortTaxXml2EClass,PortTaxXml2En,modCO);    
  end;  
  if (GuiType!=kGuiiPhone) then begin
    Export("Database Text Backup",TBEClass,DatabaseTBEn,modCO);  
  end;
  //Export("Remote Backup",TBRemoteEClass,RemoteTBEn,modCO);
  if (HasLocalization("PRT")) then begin
    Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modCO);
  end;  
  
  Import("Automatic",0,FullyAutIn,modCO);
  Import("Manual file search",0,AutIn,modCO);
  
/* modSL */
  
  RegisterWS("Счета-фактуры","Счета-фактуры","Новый счёт-фактура",IVVc,modSL); 
  RegisterWS("Платежи","Платежи","Новый платёж",IPVc,modSL); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modSL); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modSL); 
  if (HasPriceLists) then begin
    RegisterWS("Цены","Цены","Новая цена",PLVc,modSL); 
  end;
  if (HasLocalization("RUS")) then begin
    RegisterWS("Счета клиентам","Счета клиентам","Новый счёт клиенту",ORVc,modSL); 
  end;
  
  Setting("Age Limits",AgedTClass,modSL);
  if (HasModNL) then begin
    Setting("Account Usage #S/L#",AccTClass,modSL);
  end;
  if (HasLocalization("FIN,RUS")) then begin
    Setting("Banks",BankLClass,modSL);
  end;
  if (HasContactClassification) then begin
    Setting("Contact Classifications",CClassLClass,modSL);
  end;
  if (HasCategories) then begin
    Setting("Customer Categories",CCatLClass,modSL);
  end;
//  Setting("Electronic Invoices Customers Data",EInvCULClass,modSL);
//  Setting("Electronic Invoices Settings",EInvoiceTClass,modSL);
//  Setting("Electronic Invoices Queue",EInvoiceQueLClass,modSL);
//  Setting("Electronic Record Statuses",ERecordStatusLClass,modSL);
  if (HasLocalization("BRA")) then begin
    Export("Фискальная нота для услуг",BraFiscalNoteEClass,BraFiscalNoteEn,modSL); 
  end;

  if (HasLocalization("BRA")) then begin
    Import("Ответ на фискальную ноту для услуг",0,BraFiscalNoteIn,modSL);
  end;
  if (HasModNL and HasModPL and HasMultiCurrency) then begin
    Setting("Внутренние счета",IntIVLClass,modSL);
  end;

  if (HasModNL==false) then begin
    Setting("Invoice Settings",AccTClass,modSL);
  end;
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT")) then begin
    Setting("Группы товаров",ITLClass,modSL);
  end;
  if (HasModSL and HasLocalization("PRT,ITA")) then begin
    Setting("Item Group Withholdings",WHITLClass,modSL);
  end;
  if (HasNumberSeries or HasLocalization("LVA")) then begin
    Setting("Legal Invoice Numbers",LegalInvNrTClass,modSL);
  end;  
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Invoices",IVSerTClass,modSL);
    Setting("Серии номеров - Receipts",IPSerTClass,modSL);
    if (HasModNL) and (HasLocalization("POL,HRV")) then begin
      Setting("Серии номеров - #VAT# Corrections #S/L#",VATIVSerTClass,modSL);
    end;
  end;
  Setting("Методы платежа",PMTClass,modSL);
  Setting("Условия платежа",PDLClass,modSL);
  if (HasPriceLists) then begin
    Setting("Price Lists",PLDefLClass,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Setting("Reference Number Settings",CalcRefTClass,modSL);
  end;
  Setting("Sales Invoice Settings",IVTTClass,modSL);     //!!TRANSLATE
  if (HasLocalization("PRT")) then begin
    Setting("Standard Problems",StandProblemLClass,modSL);
  end;  
  if (HasModNL==false) then begin
    if (HasLocalization("BRA,HRV")) then begin
      Setting("Налоговые шаблоны",TaxTemplateLClass,modSL);
      Setting("Настройки транзакций",TrTClass,modSL);
    end;
    if (HasLocalization("KEN")) then begin
      Setting("Налоговые шаблоны",TaxTemplateLClass,modSL);
    end;
  end;  
  Setting("Units",UnitLClass,modSL);
  if (HasLocalization("POL,HRV")) and (HasModNL) then begin
    Setting("#VAT# Corrections #S/L#",VATIVLClass,modSL);
    Setting("#VAT# Correction #S/L# Types",VATIVTypeTClass,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Setting("Коды НДС",VATCodeTClass,modSL); 
  end;  
  if (HasLocalization("PRT,ITA") and (HasModPL or HasModSL)) then begin
    Setting("Withholding Calculation Formulae",WHCalcFormLClass,modSL);
    Setting("Withholding Taxes",WHTaxTClass,modSL);
  end;    

  Document("Cash Notes",KIVRClass,CashInvForm,CashFClass,modSL);
  Document("#Credit Notes#",CIVRClass,CredInvForm,CredFClass,modSL);
  Document("Customer Labels",CuLabRClass,CuLabForm,CuLabFClass,modSL);
  if (HasLocalization("POL")) then begin
    Document("Debtors Letter",DebtLetRClass,DebtorLetForm,DebtLetFClass,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Document("Interest Invoices",IIVRClass,IIInvForm,IIFClass,modSL);
  end;
  Document("Invoices",IVRClass,InvForm,InvFClass,modSL); 
  if (HasLocalization("PRT")) then begin
    Document("Invoice/Receipt's",KIVRClass,CashInvRecPRTForm,CashRecPRTFClass,modSL);
  end;  
  Document("Open Invoice Customer Statement",ARSRClass,ARSForm,ARSFClass,modSL);
  Document("Periodic Customer Statement",CuPerRClass,CuPerForm,CuPerFClass,modSL);
  if (HasLocalization("POL")) then begin
    Document("Proforma Invoices",Inv1RClass,Inv1Form,Inv1FClass,modSL);
  end;
  Document("Receipt Forms",IPDRClass,IPDForm,IPDFClass,modSL);
  if (HasLocalization("LVA,POL")) then begin
    Document("Reminders",RemRClass,RemForm,RemFClass,modSL);
  end;
  if (HasLocalization("RUS")) then begin
    Document("Orders",ORRClass,OrdForm,OrdFClass,modSL);
  end;

  Report("Contact List",CURClass,CustRn,0,modSL);
  Report("Customer/Item Statistics",CuArtSTRClass,CuArtSTRn,0,modSL);
  Report("Customer Statistics",CustSTRClass,CustSTRn,0,modSL);
  Report("Справка по клиенту",CustPSRClass,CustPSRn,0,modSL);
  if (HasLocalization("LVA")) then begin
    Report("EU #VAT# Sales",SLEUVATRClass,SLEUVATRn,0,modSL);
  end;
//  Report("Electronic Invoice Status",HTSStatIVRClass,HTSStatIVRn,0,modSL);
  if (HasLocalization("HRV")) then begin
    Report("GP, Invoices",IVGPRClass,IVGPRn,0,modSL);
  end;
  Report("Invoice Journal",IVJRClass,InvoiceRn,0,modSL);
  Report("Item List",ArtRClass,ArtRn,0,modSL);
  Report("Item Statistics",ArtSTRClass,ArtSTRn,0,modSL);
  if (HasLocalization("LVA")) then begin
    Report("Legal Invoice Forms Usage",LegInvFormRClass,LegInvFormRn,0,modSL);
  end;
  Report("Open Invoice Customer Statement",ARS2RClass,ARS2Rn,0,modSL);
  if (HasLocalization("RUS")) then begin
    Report("Order Journal",ORJRClass,OrdRn,0,modSL);
    Report("Order Payment Status",ORPayStatusRClass,ORPayStatusRn,0,modSL);
  end;
  Report("Periodic Customer Statement",CuPer2RClass,CuPerRn,0,modSL);
  if (HasLocalization("LVA")) then begin
    Report("Prepayment History #S/L#",PerPayHisSLRClass,PerPayHisSLRn,0,modSL);
  end;
  if (HasPriceLists) then begin
    Report("Прейскурант",PriceRClass,PriceRn,0,modSL);
  end;
  Report("Receipts Forecast",IPProgRClass,IPProgRn,0,modSL);
  Report("Receipt History",CUPayHistoryRClass,CUPayHistoryRn,0,modSL);
  Report("Receipt Journal",IPRClass,IPRn,0,modSL);
  Report("#Sales Ledger#",ARRClass,ARRn,0,modSL);
  if (HasLocalization("PRT")) then begin
    Report("#VAT Code# Statistics",SLVATRClass,SLVATRn,0,modSL);
  end;
  if (HasLocalization("POL")) and (HasModNL) then begin
    Report("#VAT# Report Sales",SLVATRepRClass,SLVATRepRn,0,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Report("#VAT# Report Sales (Lithuania)",SLVATLitRClass,SLVATLitRn,0,modSL);  
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Customer Sales",RealCustRClass,RealCustRn,0,modSL);
  end;
  
  if (HasEMail) then begin
    Maintenance("Создать письмо с ведомостью о расчётах с клиентом",CUPerEmailVClass,CUPerEmailMn,modSL); // We have this belowe SendPerStatVClass
  end;
  if (HasModNL) and (HasLocalization("HRV")) then begin
    Maintenance("Создать коррекции #VAT# #S/L#",VATIVVClass,VATIVMn,modSL);
  end;
  if (HasModNL) then begin
    if (HasLocalization("PRT")) then begin
      Maintenance("Transfer to Bad Debtors",BadCUVClass,BadCUMn,modSL);
    end;
  end;
  if (HasLocalization("PRT")) then begin
    if (HasEMail) then begin
      Maintenance("SAFT через электронную почту",SAFTtoEmailVClass,SAFTtoEmailMn,modSL);
    end;
   end;

  if (HasLocalization("LVA")) then begin
    Export("EU Sales Export (Latvia)",LatEUSalesEClass,LatEUSalesEn,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#S/L# #VAT# Invoices (Lithuania)",LitVATRegIVEClass,LitVATRegIVEn,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modSL);
  end;  
  if (HasLocalization("LVA")) then begin
    Export("#VAT# Declaration Annex #VAT#1-III (Latvia)",LatVATSalesEClass,LatVATSalesEn,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Export("Finvoice",FInvoiceEClass,FInvoiceEn,modSL);
  end;  
  
  /* modPL */

  RegisterWS("Счета-фактуры поставщика","Счета-фактуры поставщика","Новый счёт-фактура поставщика",VIVc,modPL); 
  RegisterWS("Платежи","Платежи","Новый платёж",OPVc,modPL); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modPL); 

  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Setting("Использование счетов #P/L#",APAccTClass,modPL);
  end;
  if (HasLocalization("AUS,ESP,FIN,GBR,NOR,SWE")) then begin
    Setting("Банковские файлы",BankFileTClass,modPL);
  end;
  if (HasNumberSeries) then begin
    Setting("Серии Номеров - Счета по закупке",VISerTClass,modPL);
    Setting("Серии Номерв - Платежи",OPSerTClass,modPL);
    if (HasModNL or HasIncomeAndExpenseBook) and (HasLocalization("POL,HRV")) then begin
      Setting("Серии Номеров - Коррекции НДС #P/L#",VATVISerTClass,modPL);
    end;
  end;
  Setting("Методы платежа",PMTClass,modPL);
  Setting("Условия платежа",PDLClass,modPL);
  if (HasCategories) then begin
    Setting("Категории поставщиков",VGLClass,modPL);
  end;
  if (HasModNL or HasIncomeAndExpenseBook) and (HasLocalization("POL,HRV")) then begin
    Setting("Коррекции НДС #P/L#",VATVILClass,modPL);
    Setting("Виды коррекций НДС #P/L#",VATVITypeTClass,modPL);
  end;
  if (HasLocalization("PRT,ITA")) then begin
    Setting("Калькуляция удержания налогов",WHCalcFormLClass,modPL);
    Setting("Удержание налогов",WHTaxTClass,modPL);
  end;  
  if (HasLocalization("ESP,FIN,RUS")) then begin
   Setting("Банки",BankLClass,modPL);
 end;

  if (HasLocalization("LTU,POL")) then begin
    Document("Открыть список неоплаченных счетов поставщика",APSRClass,APSForm,APSFClass,modPL);
  end;
  Document("Формы платежей",OPDRClass,OPDForm,OPDFClass,modPL);
  Document("Списки платежей",OPRClass,OPForm,0,modPL);
  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Document("Счета на закупку",VIRClass,VIForm,VIFClass,modPL);
  end;

  if (HasLocalization("LTU")) then begin
    Report("Открыть список неоплаченных счетов поставщика",APS2RClass,APS2Rn,0,modPL);
  end;
  Report("Payments Forecast",OPProgRClass,OPProgRn,0,modPL);
  Report("Payment Journal",OPJRClass,OPJRn,0,modPL);
  Report("Periodic #Supplier# Statement",VePer2RClass,VePerRn,0,modPL);
  if (HasLocalization("LVA")) then begin
    Report("Prepayment History #P/L#",PerPayHisPLRClass,PerPayHisPLRn,0,modPL);
  end;
  Report("#Purchase Invoice# Journal",VIJRClass,VIJRn,0,modPL);
  Report("#Purchase Ledger#",APRClass,APRn,0,modPL);
  Report("#Supplier# List",VERClass,VERn,0,modPL);
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("LVA,POL")) and (HasModNL or HasIncomeAndExpenseBook) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# #Supplier# Purchases",RealSuppRClass,RealSuppRn,0,modPL); 
  end;
  if (HasLocalization("HND")) then begin
    Report("#VAT# Report Purchases (Honduras)",PLVATHonRClass,PLVATHonRn,0,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Report("#VAT# Report Purchases (Lithuania)",PLVATLitRClass,PLVATLitRn,0,modPL);
  end;
  
  if (HasLocalization("AUS,ESP,FIN,GBR,NOR,SWE")) then begin
    Export("Банковский файл",MPEClass,MPEn,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#P/L# #VAT# Invoices (Lithuania)",LitVATRegVIEClass,LitVATRegVIEn,modPL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#P/L# Latvian #VAT# Report",PLVAT1ExpEClass,PLVAT1En,modPL);
    Export("#VAT# Purchases (Latvia)",LatVATPurchasesEClass,LatVATPurchasesEn,modPL);
  end;
    
  if (HasModNL) and (HasLocalization("HRV")) then begin
    Maintenance("Create #VAT# Corrections #P/L#",VATVIVClass,VATVIMn,modPL); 
  end;

/* modNL */
  
  RegisterWS("Приходы в кассу","Приходы в кассу","Новый приход",CLInVc,modCL); 
  RegisterWS("Расходы из кассы","Расходы из кассы","Новый расход",CLOutVc,modCL); 
  if (HasModSL and HasLocalization("POL")==false) then begin
    RegisterWS("Платежи","Платежи","Новый платёж",IPVc,modCL); 
  end;
  if (HasModPL and HasLocalization("POL")==false) then begin
    RegisterWS("Платежи","Платежи","Новый платёж",OPVc,modCL); 
  end;
  if (HasModExp) then begin
    RegisterWS("Выплату персоналу","Выплату персоналу","Новая выплата персоналу",PPVc,modCL); 
  end;
  
  Setting("Настройки кассовой книги",MainCLTClass,modCL);
  Setting("Счета издержек",CLCorspLClass,modCL);
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Приход",CLInSerTClass,modCL);
    Setting("Серии номеров - Расход",CLOutSerTClass,modCL);
  end;
  Setting("Способы платежей",PMTClass,modCL);
  
  Report("Кассовая нига",CLIORClass,CashBRn,0,modCL);
  if (HasLocalization("LTU")) then begin
    Report("Cash Book (Lithuania)",CashBookLitRClass,CashBookLitRn,0,modCL);
  end;
  Report("Журнал прихода",CLInJRClass,CLInJRn,0,modCL);  
  Report("Журнал расхода",CLOutJRClass,CLOutJRn,0,modCL);  
  if (HasModNL or HasLocalization("POL")) then begin
    Report("Кассовая книга по записям операций",CashBookLatRClass,CashBookLatRn,0,modCL);
  end;

  Document("Приход",CLInRClass,CLInForm,CLInFClass,modCL);
  Document("Расход",CLOutRClass,CLOutForm,CLOutFClass,modCL);

  Maintenance("Утвердить приход и расход",OKCLVClass,OKCLMn,modCL);
    
/* modNL */
  
  if (HasModNL==false) then begin
    if (HasIncomeAndExpenseBook) then begin
      RegisterWS("Счета","Счета","Новый счёт",AccVc,modNL); 
      RegisterWS("Записи операций","Записи операций","Новая запись",TRVc,modNL); 

      Setting("Финансовые годы",YearTClass,modNL);
      Setting("Книга доходов и расходов",IncExpBookLClass,modNL);
      if (HasNumberSeries) then begin
        Setting("Серии номеров - транзакции",TRSerTClass,modNL);
      end;
      Setting("Sub Systems",TRGenTClass,modNL);
      Setting("Коды НДС",VATCodeTClass,modNL);
      
      Report("Income & Expense Book",IncExpBookRClass,IncExpBookRn,0,modNL);
    end;
  end else begin
    RegisterWS("Записи операций","Записи операций","Новая запись операций",TRVc,modNL); 
    if (HasLocalization("AGO,PRT")) then begin
      RegisterWS("Симуляции","Симуляции","Новая симуляция",SMVc,modNL);   
  end;
//  Register("Выверка счетов","Выверка счетов",BankRecWClass,modNL);
    if (HasLocalization("AUS")) then begin
      Register("Выверка счетов","Выверка счетов",BankRecWClass,modNL);
    end;
    if (HasLocalization("AUS")==false) then begin
      RegisterWS("Начальное сальдо","Начальное сальдо","Новое начальное сальдо",FBVc,modNL);    
      end;
    RegisterWS("Счета","Счета","Новый счёт",AccVc,modNL); 


  if (HasLocalization("AGO,POL,PRT")) then begin
    Setting("Трансфера по счетам",AccTransLClass,modNL);
  end;
  Setting("Финансовые годы",YearTClass,modNL);
    if (HasIncomeAndExpenseBook) then begin
      Setting("Книга доходов и расходов",IncExpBookLClass,modNL);
    end;
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Транзакции",TRSerTClass,modNL);
  end;
  if (HasObjects) then begin
    Setting("Объекты",ObjLClass,modNL);
    Setting("Типы объектов",OTLClass,modNL);
  end;
//  if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
//    Setting("Rate Gain/Loss",NLRateTClass,modNL);
//  end;
  Setting("Настройки отчётов",Rs2WClass,modNL);
  Setting("Субсистемы",TRGenTClass,modNL);
    Setting("Контрольные счета записей подсистем",SLAccTClass,modNL);
  if (HasLocalization("HRV,LVA")) then begin
    Setting("Налоговые отчёты",TaxRepLClass,modNL);
  end;
  if (HasLocalization("BRA,HRV,LVA")) then begin
    Setting("Налоговые правила",TaxRulesLClass,modNL);
    Setting("Налоговые шаблоны",TaxTemplateLClass,modNL);
    Setting("Настройки транзакций",TrTClass,modNL);
  end;
  if (HasLocalization("KEN")) then begin
    Setting("Налоговые шаблоны",TaxTemplateLClass,modNL);
  end;
  Setting("Коды НДС",VATCodeTClass,modNL);
  
  if (HasLocalization("HRV,LVA")) then begin
    Document("Налоговый отчёт",TaxDocRClass,TaxRepForm,TaxRepFClass,modNL);
  end;
  Document("Транзакции",TRRClass,TRForm,TRFClass,modNL);

  Report("Выверка счетов",ACReconRClass,ACRecRn,0,modNL);

  if (HasLocalization("AGO,BRA,POL,PRT")) then begin
    Report("Аналитический баланс",MBARClass,MBARn,0,modNL);
  end;
  Report("Баланс",BalRClass,BalRn,UserDefRepDClass,modNL);
  Report("План счетов",AccListRClass,AccListRn,0,modNL);
  Report("Список коррекций",CorrRClass,CorrRn,0,modNL);
  if (HasLocalization("LTU,LVA")) then begin
    Report("Корреспонденция счетов",CorspRClass,CorspRn,0,modNL);
  end;
  if (HasMultiCurrency) then begin
    Report("Изменения курсов валют",NLRateRClass,NLRateRn,0,modNL);
  end;
    if (HasIncomeAndExpenseBook) then begin
      Report("Книга прибыли и убытков",IncExpBookRClass,IncExpBookRn,0,modNL);
    end;
    if (HasMultiCurrency) then begin
    Report("Multicurrency Accounts Rate Difference",MultiCurAccRClass,MultiCurAccRn,0,modNL);
  end;
  Report("#Nominal Ledger#",MainRClass,MainRn,0,modNL);
  Report("Приыбль и убытки",ResRClass,ResRn,UserDefRepDClass,modNL);
  if (HasLocalization("LVA")) then begin
    Report("Вычисление налогов", Tax100Class,Tax100Rn,0,modNL);
    Report("Проверка правил корреспонденции",CorstRClass,CorstRn,0,modNL);
  end;
  Report("Журнал транзакций",TransRClass,TransRn,0,modNL);
  Report("Проверочный баланс",SBRClass,TrialRn,0,modNL);
  if (HasLocalization("POL,PRT")==false) then begin
    Report("Отчёт по НДС, сводный",ALLVATRClass,ALLVATRn,0,modNL);
  end;
  if (HasLocalization("POL")==false) then begin
    Report("Отчёт по НДС",VATRClass,VAT2Rn,UserDefRepDClass,modNL);
  end;

    if (HasLocalization("FRA")) then begin
      Export("FEC Export",FrenchFECEClass,FrenchFECEn,modNL);
    end;
    if (HasLocalization("SGP")) then begin
      Export("IRAS audit File",GenIRASEClass,IRASAuditEn,modNL);
    end;
  Export("Ежемесячные балансы",MBEClass,MBEn,modNL);
  if (HasLocalization("SWE")) then begin
    Export("SIE (Экспорт/импорт, Швеция)",SieEClass,SieEn,modNL);
  end;
  Export("Проверочный баланс",SBEClass,SBEn,modNL);
  if (HasLocalization("PRT")) then begin
    Export("SAFT (Португалия)",PortTaxXmlEClass,PortTaxXmlEn,modNL);
    end;  
    if (HasLocalization("LTU")) then begin
      Export("Периодическая декларация НДС (Литва)",LTUVATEClass,LTUVATEn,modNL);
  end;  
  
  if (HasLocalization("SWE")) then begin
    Import("SIE (Экспорт/импорт, Швеция)",0,SieIn,modNL);
  end;
    
  if (HasLocalization("AGO,POL,PRT")) then begin
    Maintenance("Трансфер баланса по счетам",AccTransVClass,AccTransMn,modNL);
  end;
  end;
  
  
  StrSetBegin(3); /* Try to keep them in alphabetical order */
//  StrSetText(AdminClient,"Admin Client");
  StrSetText(AllowAddingINtoRet,"Allow Adding Items to Return Goods");
  StrSetText(AllowAddingINtoRetPOSIV,"Allow Adding Items to Return POS Invoice");
  StrSetText(AllowIVTSLoyaltyPayment,"Allow Loyalty Payment on Touch Screen Invoice");
  StrSetText(AllowCashDiscountIP,"Allow Adding Settlement Discount to Receipt");
  StrSetText(AllowUsersAdding,"Allow Adding Users");
  StrSetText(AllowWriteoffIP,"Allow Adding Write-off to Receipt");
  StrSetText(AllowAmendLine,"Allow Amending Line on Touch Screen Invoice");
  StrSetText(AllowNPTSIVCancel,"Allow Cancelling Touch Screen Invoice");
  StrSetText(AllowRestAccTransDateChange,"Allow Changing Bar Tab Date");
  StrSetText(AllowCUSerNrChange,"Allow Changing Contact No.");
  StrSetText(ChangingCostOnInvoiceRow,"Allow Changing Cost on Invoice Rows");
  StrSetText(AllowCustChange,"Allow Changing Customers");
  StrSetText(AllowIVInvDateChange,"Allow Changing Invoice Date");
  StrSetText(AllowIVSerNrChange,"Allow Changing Invoice No.");
  StrSetText(UpdateCashEvent,"Allow Changing of Cash Events");
  StrSetText(AmendLineChangePrice,"Allow Changing Price when Amending Line");
  StrSetText(AllowCashierCountChange,"Allow Changing of Cashier Count Date");
  StrSetText(AllowChangeCreditLimit,"Allow Changing of Credit Limit");
  StrSetText(AllowINCostModelChange,"Allow Changing of Item's Cost Model");
  StrSetText(AllowINWeighedAvChange,"Allow Changing of Item's Weighted Average Price");
  StrSetText(AllowLockingChange,"Allow Changing of Locking");
  StrSetText(AllowPasswdChanging,"Allow Changing of Passwords");
  StrSetText(AllowReservationChanging,"Allow Changing of Reservation");
  StrSetText(PositionStatusChanging,"Allow Changing Position Status");
  StrSetText(AllowPOSerNrChange,"Allow Changing Purchase № счёта");
  StrSetText(AllowQTSerNrChange,"Allow Changing Quotation No.");
  StrSetText(AllowORSerNrChange,"Allow Changing Sales № счёта");
  StrSetText(AllowSalesmanChange,"Allow Changing #Salesman# on OKed Sales Invoice");
  StrSetText(AllowSalesmanChangeOnPOS,"Allow Changing #Salesman# on POS Invoice");
  StrSetText(AllowSuppInvNoChangeOKVI,"Allow Changing #Supplier#'s Inv. No. on OKed #Purchase Invoice#");
  StrSetText(AllowSuppChange,"Allow Changing #Suppliers#");
  StrSetText(ChangingUpdateStockFlag,"Allow Changing Update #Stock# Flag Invoice");
  StrSetText(AllowWSUpdateStockChange,"Allow Changing Work Sheet Update #Stock#");
  StrSetText(AllowCreateCust,"Allow Creating Customers");
  StrSetText(AllowCreateDealer,"Allow Creating Dealers");
  StrSetText(AllowCreateGuest,"Allow Creating Guests");
  StrSetText(AllowCreateSupp,"Allow Creating #Suppliers#");
  StrSetText(AllowIVTSRowsDelete,"Allow Deleting Items on Touch Screen Invoice");
  StrSetText(AllowDispute,"Allow Disputing Invoice");
  StrSetText(ORToDownPay,"Allow Downpayment from Sales Order");
  StrSetText(AllowLoginOutsideWorkHours,"Allow Login outside Work Hours");
  StrSetText(AllowNPTSIVLogout,"Allow Logout on Touch Screen Invoice");
  StrSetText(AllowIVTSLoyaltyPointsBonus,"Allow Loyalty Bonus Points on Touch Screen Invoice");
  StrSetText(AllowManyActiveProd,"Allow Multiple Active Productions");
  StrSetText(AllowNegCLIn,"Allow Negative Amount on Cash In");
  StrSetText(AllowNegCLOut,"Allow Negative Amount on Cash Out");
  StrSetText(AllowNegOP,"Allow Negative Amount on Payment");
  StrSetText(AllowNegIP,"Allow Negative Amount on Receipt");
  StrSetText(AllowPOSIVNegQty,"Allow Negative Qty on POS Invoices");
  StrSetText(AllowSplitItem,"Allow Splitting Item on Touch Screen Invoice");
  StrSetText(AllowTransfertoSL,"Allow Transferring POS Invoice to #Sales Ledger#");
  StrSetText(UpdatePOSEvent,"Allow Updating POS Sessions");
  StrSetText(AllowNPTSReprint,"Allow Reprinting Touch Screen Invoice rows");
  StrSetText(AllowUsingPaymentonBarTab,"Allow using 'Payment' Button on Bar Tab");
  StrSetText(AllowUsingSplitonBarTab,"Allow using 'Split' Button on Bar Tab");
  StrSetText(AllowUsingSubonBarTab,"Allow using 'Subtract' Button on Bar Tab");
  StrSetText(AllowPOSOfflineChanging,"Allow POS Offline Invoice Editing");  
//  StrSetText(AllowNoClockInOut,"Allow Working without Clock In/Out Activities");
  StrSetText(AllowNPTSIVRowsVoid,"Allow Voiding Touch Screen Invoice rows");
//  StrSetText(AllowNoClockInOut,"Allow Working without Clock In/Out Activities");
  StrSetText(BUQTToIV,"Budget Quotation to Invoice");
  StrSetText(IssueChk,"Change Cheque State");
  StrSetText(ChangeIVItemSpec,"Change Item Description on Invoice");
  StrSetText(IssueOwnChk,"Change Own Cheque State");
  StrSetText(ChangePrices,"Change Prices");
  StrSetText(ChangeReserved,"Change Reserved Status on Orders and #Stock# Movements");
  StrSetText(ChangeUnitPrices,"Change Unit Prices");
  StrSetText(InvToCO,"Contract from Invoice");
  StrSetText(RoyaltyRepToCO,"Contract from Royalty Sales records");
  StrSetText(RetToIV,"Credit Note from Returned Goods");
  StrSetText(RetPUToVI,"Credit Note from Возвраты товаров поставщику  ");
  StrSetText(DeleteAnyRecord,"Deleting Records");
  StrSetText(ORToSH,"Delivery from Order");
  StrSetText(DisallowSalesmanChange,"Disallow Changing #Salesman# on non OKed Sales Invoice//??");
  StrSetText(DisallowIntORClose,"Disallow Closing Internal Order");
  StrSetText(DisallowORClose,"Disallow Closing Order");
  StrSetText(DisallowCostVariance,"Disallow Cost Price Variance on Goods Receipts");
  StrSetText(NotOKORToSH,"Disallow Delivery from not OKed Order");
  StrSetText(NotOKPOToPU,"Disallow Goods Receipt from not OKed Purchase Order");
  StrSetText(DisallowSerNrItemsOnSR,"Disallow Items with Serial Number Tracking on #Stock# Revaluation");
  StrSetText(DisallownonSerNrItemsOnSR,"Disallow Items without Serial Number Tracking on #Stock# Revaluation");
  StrSetText(DisallowPrepToNotOKOR,"Disallow Prepayment for not OKed Order");
  StrSetText(DisallowPrepToNotOKPO,"Disallow Prepayment for not OKed Purchase Order");
  StrSetText(DisallowPriceLowerCost,"Disallow Prices Lower than Cost Price");
  StrSetText(DisallowPrintCopy,"Disallow Printing Copies");
  StrSetText(DisallowSalesPlain,"Disallow Sales of Plain Items");
  StrSetText(DisallowSalesService,"Disallow Sales of Service Items");
  StrSetText(DisallowSalesStocked,"Disallow Sales of #Stocked# Items");
  StrSetText(DisallowSalesStructured,"Disallow Sales of Structured Items");
  StrSetText(DisallowDomSales,"Disallow Sales to #Domestic# Customers");
  StrSetText(DisallowExpSales,"Disallow Sales to Export Customers");
  StrSetText(DisallowSaleBelowGP,"Disallow Selling Below Minimum GP");
  StrSetText(DisallowWSFromSVO,"Disallow Work Sheets from Service Order");
  StrSetText(XXGRToXXGR,"Drag and Drop Balance Sheet and P&L Definitions");
  StrSetText(EMailFromOKPO,"E-mail from OKed Purchase Orders");
  StrSetText(POToPU,"Goods Receipt from Purchase Order");
  StrSetText(ActInvalid,"Invalidating Activities");
  StrSetText(AT2WrofInvalid,"Invalidating Выбытие активов");
  StrSetText(RestAccInvalid,"Invalidating Bar Tab");
  StrSetText(CLInInvalid,"Invalidating Cash In");
  StrSetText(CLOutInvalid,"Invalidating Cash Out");
  StrSetText(PUInvalid,"Invalidating Goods Receipts");
  StrSetText(OPInvalid,"Invalidating Payments");
  StrSetText(InvInvalid,"Invalidating Purchase and Sales Invoices");
  StrSetText(VIInvalid,"Invalidating #Purchase Invoices#");
  StrSetText(IVInvalid,"Invalidating Sales Invoices");
  StrSetText(InvalidateInvoice,"Invalidating Touch Screen Invoice");
  StrSetText(COToInv,"Invoice from Contract");
  StrSetText(COCUServiceToIV,"Invoice from HansaWorld Contract");
  StrSetText(ORToInv,"Invoice from Order");
  StrSetText(QTToIV,"Invoice from Quotation");
  StrSetText(ActOK,"OKing Activities");
  StrSetText(BudOK,"OKing Budget");
  StrSetText(OKCashIn,"OKing Cash In");
  StrSetText(CashInvOK,"OKing Cash Invoices");
  StrSetText(OKCashOut,"OKing Cash Out");
  StrSetText(CredInvOK,"OKing Credit Notes");
  StrSetText(SHOK,"OKing Deliveries");
  StrSetText(PUOK,"OKing Goods Receipts");
  StrSetText(InvOK,"OKing Invoices");
  StrSetText(OROK,"OKing Orders");
  StrSetText(OPOK,"OKing Payments");
  StrSetText(CredVIOK,"OKing Purchase Credit Notes");
  StrSetText(VIOK,"OKing #Purchase Invoices#");
  StrSetText(POOK,"OKing Purchase Orders");
  StrSetText(IPOK,"OKing Receipts");
  StrSetText(RetOK,"OKing Returned Goods");
  StrSetText(RetPUOK,"OKing Возвраты товаров поставщику");
  StrSetText(RevBudOK,"OKing Revised Budget");
  StrSetText(DropSHOK,"OKing Shipment Notifications");
  StrSetText(SDOK,"OKing #Stock Depreciation#");
  StrSetText(SROK,"OKing #Stock# Revaluations");
  StrSetText(OpenCashDrawer,"Open Cash Drawer");
  StrSetText(OpenTRFromSpec,"Open Transactions from Operations Menu");
  StrSetText(QTToOrd,"Order from Quotation");
  StrSetText(OPOrder,"Ordering Payment  ");
  StrSetText(IPToPrepIV,"Prepayment Receipt to Invoice");
  StrSetText(PrintToFiscPrnt,"Print To Fiscal Printer");
  StrSetText(PUToVI,"#Purchase Invoice# from Goods Receipt");
  StrSetText(POCOToVI,"#Purchase Invoice# from PO Contract");
  StrSetText(POToVI,"#Purchase Invoice# from Purchase Order");
  StrSetText(IntORToPO,"Purchase Order from Internal Order");
  StrSetText(ORToPO,"Purchase Order from Order");
  StrSetText(POCOToPO,"Purchase Order from PO Contract");
  StrSetText(POQTToPO,"Purchase Order from Purchase Quotation");
  StrSetText(StockMovOK,"Receiving #Stock# Movements");
  StrSetText(PUToRetPU,"Returned Goods from Goods Receipt");
  StrSetText(ORToRet,"Returned Goods from Order");
  StrSetText(POToRetPU,"Returned Goods from Purchase Order");
  StrSetText(SentStockMovOK,"Sending #Stock# Movements");
  StrSetText(POToDropSH,"Shipment Notification from Purchase Order");
  StrSetText(ShowSerialNronPOSInvoices,"Show Serial No. On POS Invoices");
  StrSetText(IntORToSD,"#Stock Depreciation# from Internal Order");
  StrSetText(IntORToStockMov,"#Stock# Movement from Internal Order");
  StrSetText(ORToStockMov,"#Stock# Movement from Order");
  StrSetText(PRToStockMov,"#Stock# Movement from Production");
  StrSetText(SMToTrans,"Transactions from Simulations");
  StrSetText(UnOKAll,"UnOK all records");
  StrSetText(UnOKBud,"UnOK Budget");
  StrSetText(UnOKCashCount,"UnOK Cash Count");
  StrSetText(UnOKOR,"UnOK Orders");
  StrSetText(UnOKPO,"UnOK Purchase Orders");
  StrSetText(UnOKRevBud,"UnOK Revised Budget");
  StrSetText(ViewCostPrice,"View Cost Price");
  StrSetText(UpdCUSY,"Update Customer System Usage");
  StrSetText(EnabINF,"Enabler Information");
  EndStrSet;

  end;
  return;
end;
