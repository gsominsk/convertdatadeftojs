/* sasengm.hal */
/* We have Stock by HansaWorld */
external function Boolean HasDeveloperMode();
external function Boolean HasPersons();
external function Boolean HasETaxDocuments();
external function Boolean HasModQT();
external function Boolean HasSerialNumbers();
external function Boolean HasModAT2();
external function Boolean HasModCL();
external function Boolean HasStandardCRM();
external function Boolean HasModExp();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();
external function Boolean HasModSO();
external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModSL();
external function Boolean HasModPL();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModRest();
external function Boolean HasModCRM();
external function Boolean HasPayroll();

external function Boolean HasAdvancedPricing();
external function Boolean HasBase2();
external function Boolean HasCategories();
external function Boolean HasContactClassification();
external function Boolean HasFormEditor();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLocalMachines();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNumberSeries();
external function Boolean HasOfficialSerNr();
external function Boolean HasObjects();
external function Boolean HasPriceLists();
external function Boolean HasVarieties();
external procedure SetProductTags();
external procedure LoadWindowTags();

begin
  Real h,v,l,vs;

  SetLangMode(LangRussian,"RUS",0);

  // this is for when it's a hardcoded list of options
  // we'll get some better solution for that later, but for now we
  // need one product folder per set of default options

  if (BuildProductCode=="WeHaveStock") then begin  

  SetProductTags;
  LoadWindowTags;

  if (HasModCRM) then begin
    Module("CRM","",730,modCRM);  
    Module("Календарь","",730,modCAL);  
    Module("Задачи","",730,modTASK);
  end;
  if (HasStandardCommunicator and HasModCRM==false and HasStandardOrganizer==false) then begin 
    Module("Коммуникатор","",730,modCRM);
  end;
  if (HasModNL) then begin
    Module("Финансы","",730,modNL);
  end; 
  if (HasStandardOrganizer and HasModCRM==false) then begin 
    Module("Органайзер","",730,modCRM);
  end;
  if (HasModPOS) then begin
    Module("Кассовый терминал","",730,modPOS);  
  end;
  if (HasModPL) then begin
    Module("Расчёты с поставщиками","",730,modPL);  
  end;
  if (HasModPO) then begin
    Module("Заказы поставщикам","",730,modPO);
  end;
  if (HasModQT) then begin
    Module("Счета клиентам","",730,modQT);
  end;  
  if (HasModRest) then begin
    Module("Ресторан","",730,modRest);  
  end;
  if (HasModSL) then begin
    Module("Расчёты с клиентами","",730,modSL);
  end;
  if (HasModSO) then begin
    Module("Счета клиентам","",730,modSO);
  end;
  if (HasModIN) then begin
    Module("Склад","",730,modIN);
  end;
  if (HasModSL==false) then begin
    Module("Счета","",730,modSY);
  end else begin
    Module("Система","",730,modSY);
  end;
  if (HasLocalization("LVA")) then begin
    if (HasPayroll) then begin
      Module("Personnel","",730,modSAL);
      Module("Платёж","",730,modPY);
    end;
  end;
  
  // debug
  if (HasDeveloperMode) then begin
    Setting("Cloud Services",EnabServerTClass,modSY);
    Setting("Configuration",ModulesTClass,modSY);
    Setting("Current License Flags",CurLicensesClass,modSY);
    Setting("Internet Enablers",InternetEnablerTClass,modSY);
    Setting("Licenses",LicensesLClass,modSY);
    RegisterWS("Почтовые ящики","Почтовые ящики","Новый почтовый ящик",ConferenceWClass,modSY); 
    Setting("Program Mode",ProgramStatusTClass,modSY);
    Setting("Services Cache",ServiceCacheLClass,modSY);
    Setting("Std Registration Data",StdRegDataWClass,modSY);
    Setting("Дополнения системы",UserFeaturePrefTClass,modSY);     
    Setting("Интернет-ключи (старый блок)",InternetEnabOldTClass,modSY); 
  end;
  // end debug code
  
/* modSL */
  
  RegisterWS("Счета-фактуры","Счета-фактуры","Новый счёт-фактура",IVVc,modSL); 
  RegisterWS("Платежи","Платежи","Новый платёж",IPVc,modSL); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modSL); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modSL); 
  if (HasPriceLists) then begin
    RegisterWS("Цены","Цены","Новая цена",PLVc,modSL); 
  end;
  if (HasLocalization("RUS")) then begin
    RegisterWS("Счета клиентам","Счета клиентам","Новый счёт клиенту",ORVc,modSL); 
  end;
  
  if (HasModNL) then begin
    Setting("Настройки записей",AccTClass,modSL);
  end;
  if (HasLocalization("FIN,RUS")) then begin
    Setting("Банки",BankLClass,modSL);
  end;
  if (HasContactClassification) then begin
    Setting("Классификации контактов",CClassLClass,modSL);
  end;
  if (HasCategories) then begin
  	Setting("Категории клиентов",CCatLClass,modSL);
  end;	
//  Setting("Electronic Invoices Customers Data",EInvCULClass,modSL);
//  Setting("Electronic Invoices Settings",EInvoiceTClass,modSL);
//  Setting("Electronic Invoices Queue",EInvoiceQueLClass,modSL);
//  Setting("Electronic Record Statuses",ERecordStatusLClass,modSL);
  if (HasModNL and HasModPL and HasMultiCurrency) then begin
    Setting("Internal Invoices",IntIVLClass,modSL);
  end;

  if (HasModNL==false) then begin
    Setting("Настройки реализации",AccTClass,modSL);
  end;
  if (HasItemGroups or HasLocalization("ITA,PRT")) then begin
    Setting("Группы товаров",ITLClass,modSL);
  end;
  if (HasModSL and HasLocalization("ITA,PRT")) then begin
    Setting("Item Group Withholdings",WHITLClass,modSL);
  end;
  if (HasNumberSeries or HasLocalization("HRV,LVA")) then begin
    Setting("Legal Invoice Numbers",LegalInvNrTClass,modSL);
  end;  
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Сч/ф",IVSerTClass,modSL);
    Setting("Серии номеров - Платежи клиентов",IPSerTClass,modSL);
    if (HasModNL) and (HasLocalization("POL,HRV")) then begin
      Setting("Серии номеров - #VAT# Corrections #S/L#",VATIVSerTClass,modSL);
    end;
  end;
  Setting("Способы оплаты",PMTClass,modSL);
  Setting("Условия оплаты",PDLClass,modSL);
  if (HasPriceLists) then begin
    Setting("Прейскуранты",PLDefLClass,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Setting("Reference Number Settings",CalcRefTClass,modSL);
  end;
  Setting("Sales Invoice Settings",IVTTClass,modSL);     //!!TRANSLATE
  if (HasLocalization("PRT")) then begin
    Setting("Standard Problems",StandProblemLClass,modSL);
  end;
  if (HasModNL==false) then begin
    if (HasLocalization("BRA,HRV")) then begin
      Setting("Налоговые шаблоны",TaxTemplateLClass,modSL);
      Setting("Transaction Settings",TrTClass,modSL);
    end;
  end;
  Setting("Единицы",UnitLClass,modSL);
  if (HasLocalization("POL,HRV")) and (HasModNL) then begin
    Setting("НДС коррекции книги продаж",VATIVLClass,modSL); 
    Setting("Типы НДС коррекции книги продаж",VATIVTypeTClass,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Setting("Коды НДС",VATCodeTClass,modSL);  
  end;  
  if (HasLocalization("PRT,ITA") and (HasModPL or HasModSL)) then begin
    Setting("Withholding Calculation Formulae",WHCalcFormLClass,modSL); // NEWTRANSLATE
    Setting("Withholding Taxes",WHTaxTClass,modSL); // NEWTRANSLATE
  end;
  
  Document("Чеки",KIVRClass,CashInvForm,CashFClass,modSL);
  Document("Кредит-ноты",CIVRClass,CredInvForm,CredFClass,modSL);
  Document("Этикетки клиентов",CuLabRClass,CuLabForm,CuLabFClass,modSL);
  if (HasLocalization("POL")) then begin
    Document("Debtors Letter",DebtLetRClass,DebtorLetForm,DebtLetFClass,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Document("Interest Invoices",IIVRClass,IIInvForm,IIFClass,modSL); // NEWTRANSLATE
  end;
  Document("Реализации",IVRClass,InvForm,InvFClass,modSL);
  Document("Ведомость неоплаченных реализаций",ARSRClass,ARSForm,ARSFClass,modSL);
  Document("Ведомость расчетов с клиентами",CuPerRClass,CuPerForm,CuPerFClass,modSL);
  if (HasLocalization("POL")) then begin
    Document("Proforma Invoices",Inv1RClass,Inv1Form,Inv1FClass,modSL);
  end;
  Document("Платежные документы",IPDRClass,IPDForm,IPDFClass,modSL);
  if (HasLocalization("LVA,POL")) then begin
    Document("Reminders",RemRClass,RemForm,RemFClass,modSL);
  end;
  if (HasLocalization("RUS")) then begin
    Document("Счета",ORRClass,OrdForm,OrdFClass,modSL);
  end;

  Report("Список контактов",CURClass,CustRn,0,modSL);
  Report("Клиент/товар статистика",CuArtSTRClass,CuArtSTRn,0,modSL);
  Report("Статистика по клиенту",CustSTRClass,CustSTRn,0,modSL);
  if (HasLocalization("LVA")) then begin
    Report("EU #VAT# Sales",SLEUVATRClass,SLEUVATRn,0,modSL);
  end;
//  Report("Electronic Invoice Status",HTSStatIVRClass,HTSStatIVRn,0,modSL);
  if (HasLocalization("HRV")) then begin
    Report("GP, Invoices",IVGPRClass,IVGPRn,0,modSL);
  end;
  Report("Журнал реализаций",IVJRClass,InvoiceRn,0,modSL);
  Report("Список товаров",ArtRClass,ArtRn,0,modSL);
  Report("Статистика по товарам",ArtSTRClass,ArtSTRn,0,modSL);
  if (HasLocalization("LVA")) then begin
    Report("Legal Invoice Forms Usage",LegInvFormRClass,LegInvFormRn,0,modSL);
  end;
  Report("Журнал неоплаченных реализаций",ARS2RClass,ARS2Rn,0,modSL);
  if (HasLocalization("RUS")) then begin
    Report("Журнал счетов",ORJRClass,OrdRn,0,modSL);
    Report("Статус оплат по счетам",ORPayStatusRClass,ORPayStatusRn,0,modSL);
  end;
  Report("Ведомость расчетов с клиентами",CuPer2RClass,CuPerRn,0,modSL);
  if (HasLocalization("LVA")) then begin
    Report("История предоплат книги продаж",PerPayHisSLRClass,PerPayHisSLRn,0,modSL);
  end;
  if (HasPriceLists) then begin
    Report("Прейскуранты",PriceRClass,PriceRn,0,modSL);
  end;
  Report("Прогноз платежей",IPProgRClass,IPProgRn,0,modSL);
  Report("Журнал платежей клиентов",IPRClass,IPRn,0,modSL);
  Report("Дебиторская задолженность",ARRClass,ARRn,0,modSL);
  if (HasLocalization("PRT")) then begin
    Report("#VAT Code# Statistics",SLVATRClass,SLVATRn,0,modSL);
  end;
  if (HasLocalization("POL")) and (HasModNL) then begin
    Report("#VAT# Report Sales",SLVATRepRClass,SLVATRepRn,0,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Report("#VAT# Report Sales (Lithuania)",SLVATLitRClass,SLVATLitRn,0,modSL);  
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Customer Sales",RealCustRClass,RealCustRn,0,modSL);
  end;
  
  if (HasModNL) then begin
    if (HasLocalization("PRT")) then begin
      Maintenance("Transfer to Bad Debtors",BadCUVClass,BadCUMn,modSL);
    end;
  end;  
  if (HasModNL) and (HasLocalization("HRV")) then begin
    Maintenance("Создать НДС коррекции книги продаж",VATIVVClass,VATIVMn,modSL);
  end;
  
  if (HasLocalization("PRT")) then begin
    Export("Communication of Invoices to AT - SAFT",PortTaxXml2EClass,PortTaxXml2En,modSL);    
  end;
  if (HasLocalization("LVA")) then begin
    Export("EU Sales Export (Latvia)",LatEUSalesEClass,LatEUSalesEn,modSL);
  end;
  if (HasLocalization("BRA")) then begin
    Export("Фискальная записка для Услуг",BraFiscalNoteEClass,BraFiscalNoteEn,modSL); 
  end;
  if (HasLocalization("LTU")) then begin
    Export("#S/L# #VAT# Invoices (Lithuania)",LitVATRegIVEClass,LitVATRegIVEn,modSL); // NEWTRANSLATE
  end;
  if (HasLocalization("PRT")) then begin
    Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modSL);
  end;  
  if (HasLocalization("LVA")) then begin
    Export("#VAT# Declaration Annex #VAT#1-III (Latvia)",LatVATSalesEClass,LatVATSalesEn,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Export("Finvoice",FInvoiceEClass,FInvoiceEn,modSL);
  end;
  
  if (HasLocalization("BRA")) then begin
    Import("Fiscal Note for Services Reply",0,BraFiscalNoteIn,modSL);
  end;
  
/* modPL */

  RegisterWS("Счета-фактуры поставщика","Счета-фактуры поставщика","Новый счёт-фактура поставщика",VIVc,modPL); 
  RegisterWS("Платежи","Платежи","Новый платёж",OPVc,modPL); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modPL); 

  if (HasModNL) then begin
    Setting("Настройки записей - расчеты с поставщиками",APAccTClass,modPL);
  end;
  //Setting("Банковские файлы",BankFileTClass,modPL); // Local functionality
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Сч/ф поставщиков",VISerTClass,modPL);
    Setting("Серии номеров - платежи поставщикам",OPSerTClass,modPL);
    if (HasModNL) and (HasLocalization("POL,HRV")) then begin
      Setting("Серии номеров - НДС коррекции #P/L#",VATVISerTClass,modPL); // NEWTRANSLATE
    end;
  end;
  Setting("Способы оплаты",PMTClass,modPL);
  Setting("Условия оплаты",PDLClass,modPL);
  if (HasCategories) then begin
   Setting("Категории поставщиков",VGLClass,modPL);
  end; 
  if (HasModNL) and (HasLocalization("POL,HRV")) then begin
    Setting("НДС коррекции #P/L#",VATVILClass,modPL); // NEWTRANSLATE
    Setting("Типы НДС коррекции #P/L#",VATVITypeTClass,modPL);
  end;
  if (HasLocalization("PRT,ITA")) then begin
    Setting("Withholding Calculation Formulae",WHCalcFormLClass,modPL); // NEWTRANSLATE
    Setting("Withholding Taxes",WHTaxTClass,modPL); // NEWTRANSLATE
  end;  
  if (HasLocalization("FIN,RUS")) then begin
    Setting("Банки",BankLClass,modPL);
  end;  

  if (HasLocalization("LTU,POL")) then begin
    Document("Открыть список неоплаченных счетов поставщика",APSRClass,APSForm,APSFClass,modPL); // NEWTRANSLATE
  end;
  Document("Платежные документы",OPDRClass,OPDForm,OPDFClass,modPL);
  Document("Платежи",OPRClass,OPForm,0,modPL);
  if (HasModNL) then begin
    Document("Сч/ф поставщиков",VIRClass,VIForm,VIFClass,modPL);
  end;

  if (HasLocalization("LTU")) then begin
    Report("Отчёт о неоплаченных счетах-фактурах поставщика",APS2RClass,APS2Rn,0,modPL);
  end;
  Report("Прогноз платежей",OPProgRClass,OPProgRn,0,modPL);
  Report("Журнал платежей",OPJRClass,OPJRn,0,modPL);
  Report("Ведомость расчетов с поставщиками",VePer2RClass,VePerRn,0,modPL);
  if (HasLocalization("LVA")) then begin
    Report("Prepayment History #P/L#",PerPayHisPLRClass,PerPayHisPLRn,0,modPL);
  end;
  Report("Журнал сч/ф поставщиков",VIJRClass,VIJRn,0,modPL);
  Report("Кредиторская задолженность",APRClass,APRn,0,modPL);
  Report("Список поставщиков",VERClass,VERn,0,modPL);
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("LVA,POL")) and (HasModNL) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# #Supplier# Purchases",RealSuppRClass,RealSuppRn,0,modPL); 
  end;
  if (HasLocalization("LTU")) then begin
    Report("#VAT# Report Purchases (Lithuania)",PLVATLitRClass,PLVATLitRn,0,modPL);
  end;
  
  if (HasLocalization("FIN")) then begin
    Export("Банковский файл",MPEClass,MPEn,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#P/L# #VAT# Invoices (Lithuania)",LitVATRegVIEClass,LitVATRegVIEn,modPL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#P/L# Latvian #VAT# Report",PLVAT1ExpEClass,PLVAT1En,modPL);
    Export("#VAT# Purchases (Latvia)",LatVATPurchasesEClass,LatVATPurchasesEn,modPL);
  end;
    
  if (HasModNL) and (HasLocalization("HRV")) then begin
    Maintenance("Create #VAT# Corrections #P/L#",VATVIVClass,VATVIMn,modPL);
  end;

/* modNL */
  
  RegisterWS("Записи операций","Записи операций","Новая запись операций",TRVc,modNL); 
  if (HasLocalization("PRT")) then begin
    RegisterWS("Симуляции","Симуляции","Новая симуляция",SMVc,modNL);   
  end;
//  Register("Выверка счетов","Выверка счетов",BankRecWClass,modNL);
  RegisterWS("Начальное сальдо","Начальное сальдо","Новое начальное сальдо",FBVc,modNL); 
  RegisterWS("Счета","Счета","Новый счёт",AccVc,modNL); 


  if (HasLocalization("POL,PRT")) then begin
    Setting("Account Transfers",AccTransLClass,modNL);
  end;
  Setting("Финансовые года",YearTClass,modNL);
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Записи операций",TRSerTClass,modNL);
  end;
  if (HasObjects) then begin
    Setting("Объекты",ObjLClass,modNL);
    Setting("Типы объектов",OTLClass,modNL);
  end;
//    if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
//      Setting("Rate Gain/Loss",NLRateTClass,modNL);
//    end;
  Setting("Настройки отчетов",Rs2WClass,modNL);
  Setting("Записи из подсистем",TRGenTClass,modNL);
  Setting("Контрольные счета записей подсистем",SLAccTClass,modNL);
  if (HasLocalization("HRV,LVA")) then begin
    Setting("Tax Reports",TaxRepLClass,modNL);
  end;
  if (HasLocalization("BRA,HRV,LVA")) then begin
    Setting("Tax Rules",TaxRulesLClass,modNL);
    Setting("Шаблон налога",TaxTemplateLClass,modNL);
    Setting("Настройки проводок",TrTClass,modNL);
  end;
  Setting("Коды НДС",VATCodeTClass,modNL);
  
  if (HasLocalization("HRV,LVA")) then begin
    Document("Tax Report",TaxDocRClass,TaxRepForm,TaxRepFClass,modNL);
  end;
  Document("Записи операций",TRRClass,TRForm,TRFClass,modNL);

//  Report("Сверка записей",ACReconRClass,ACRecRn,0,modNL);

  if (HasLocalization("POL,PRT")) then begin
    Report("Analytical Balance",MBARClass,MBARn,0,modNL);
  end;
  Report("Баланс",BalRClass,BalRn,UserDefRepDClass,modNL);
  Report("План счетов",AccListRClass,AccListRn,0,modNL);
  Report("Список исправлений",CorrRClass,CorrRn,0,modNL);
  if (HasLocalization("LVA")) then begin
    Report("Corresponding Accounts",CorspRClass,CorspRn,0,modNL);
  end;
  if (HasMultiCurrency) then begin
    Report("Currency A/C Rate Change",NLRateRClass,NLRateRn,0,modNL);
    Report("Multicurrency Accounts Rate Difference",MultiCurAccRClass,MultiCurAccRn,0,modNL);
  end;
  Report("#Главная книга#",MainRClass,MainRn,0,modNL);
  Report("Прибыль и убытки",ResRClass,ResRn,UserDefRepDClass,modNL);
  if (HasLocalization("LVA")) then begin
    Report("Tax Calculations", Tax100Class,Tax100Rn,0,modNL);
    Report("Test Corresponding Rules",CorstRClass,CorstRn,0,modNL);
  end;
  Report("Журнал операций",TransRClass,TransRn,0,modNL);
  Report("Проверочный баланс",SBRClass,TrialRn,0,modNL);
  if (HasLocalization("POL,PRT")==false) then begin
    Report("Отчёт по НДС, сводный",ALLVATRClass,ALLVATRn,0,modNL);
  end;
  if (HasLocalization("POL")==false) then begin  
    Report("Отчёт по НДС",VATRClass,VAT2Rn,UserDefRepDClass,modNL);
  end;

  Export("Ежемесячные балансы",MBEClass,MBEn,modNL);
  if (HasLocalization("SWE")) then begin
    Export("SIE (Swedish Export/Import)",SieEClass,SieEn,modNL);
  end;
  Export("Проверочный баланс",SBEClass,SBEn,modNL);
  if (HasLocalization("PRT")) then begin
    Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modNL); // NEWTRANSLATE
  end;  

  if (HasLocalization("SWE")) then begin
    Import("SIE (Swedish Export/Import)",0,SieIn,modNL); // NEWTRANSLATE
  end;  

  if (HasLocalization("POL,PRT")) then begin
    Maintenance("Account Balance Transfer",AccTransVClass,AccTransMn,modNL);
  end;

/* modSY */

 if (HasModSL==false) then begin
   if (HasLocalization("RUS")) then begin
      RegisterWS("Счета клиентам","Счета клиентам","Новый счёт клиенту",ORVc,modSY); 
   end else begin
      RegisterWS("Счета-фактуры","Счета-фактуры","Новый счёт-фактура",IVVc,modSY); 
   end;
    RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modSY); 
    RegisterWS("Товары","Товары","Новый товар",INVc,modSY); 
 end;
  if (HasDeveloperMode or HasPersons) then begin
    RegisterWS("Сотрудники","Сотрудники","Новый сотрудник",UserVc,modSY); 
 end;
 if (HasMultiCurrency or HasBase2) then begin
    RegisterWS("Валюты","Валюты","Новая валюта",CurncyCodeVc,modSY);  
 end;
 if (HasMultiCurrency) then begin
    RegisterWS("Курсы обмена","Курсы обмена","Курс обмена",ERVc,modSY); 
 end;
 if (HasFormEditor) then begin
   if (GuiType!=kGuiiPhone) then begin
      RegisterWS("Формы","Формы","Новая форма",DocVc,modSY); 
   end;
    RegisterWS("Стили","Стили","Новый стиль",StyleVc,modSY); 
 end;
 if (HasModSL==false) then begin
   if (HasModNL) then begin
      RegisterWS("Счета","Счета","Новый счёт",AccVc,modSY); 
   end;
 end;

  if (HasDeveloperMode) then begin
   Setting("URL кэш электронного обучения",UniversityURLCacheLClass,modSY);  
   Setting("URL кэш электронного обучения (TX)",UniversityURLTXCacheLClass,modSY);
   Setting("Кэш служб",ServiceCacheLClass,modSY);
 end;

 if (HasBase2) then begin
   Setting("Основная валюта",BaseCurTClass,modSY);
   Setting("Курсы основных валют",BaseERLClass,modSY);
 end;
 if (HasLocalization("BRA")) then begin
   Setting("Brazilian Invoice Types",BrazilEInvTypeLClass,modSY);
 end;
 Setting("Формат даты и чисел компании",SysFormatTClass,modSY);
 Setting("Информация о компании",CYWClass,modSY);
 if (ClientMode) then begin
  Setting("Конфигурация пользователей",ConfigureUsersTClass,modSY);
 end;
 if (HasContactClassification and HasModSL==false) then begin
   Setting("Классификации контакта",CClassLClass,modSY);
 end;
 if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
   Setting("Конвертация - Основная",ConvMasterTClass,modSY);
   Setting("Конвертация - Счета и коды НДС",ConvAccTClass,modSY);
   Setting("Конвертация - Контакты",ConvCustTClass,modSY);
   Setting("Конвертация - Коды валют",ConvCurncyCodeTClass,modSY);
   Setting("Конвертация - Товары",ConvItemTClass,modSY);
   Setting("Конвертация - Пользователи",ConvUserTClass,modSY);
 end;
  Setting("Страны",CountryLClass,modSY);
  if (IsUsingActivationCodes) then begin
    Setting("Интернет ключи",InternetEnablerTClass,modSY);
  end;
  if (HasModSL==false) then begin
    if (HasModNL) then begin
      Setting("Account Usage",AccTClass,modSY);
    end else begin
      Setting("Настройки счетов",AccTClass,modSY);
    end;
  end;
  if (HasModSL==false and HasLocalization("PRT")) then begin
    Setting("Группы товаров",ITLClass,modSY);
  end;
  if (HasKPIs) then begin
    Setting("KPIs",KPIDefLClass,modSY);
  end;
   if (HasLanguages) then begin
    Setting("Языки",LangTClass,modSY); 
  end;
  if (HasModNL) then begin
    Setting("Закрытие периодов",DBLockTClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Municipalities",MunicipalityLClass,modSY);
  end;
  if (HasObjects and HasModNL==false) then begin
    Setting("Объекты",ObjLClass,modSY);
    Setting("Типы объектов",OTLClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Operation Types",OperationTypeLClass,modSY);
  end;
  if (HasModSL==false) then begin
    Setting("Условия оплаты",PDLClass,modSY);
    if (ClientMode or HasDeveloperMode) then begin
      Setting("Сотрудники",UserLClass,modSY);
    end;
  end;

  Setting("Отчётные периоды",PeriodTClass,modSY);
  Setting("Единицы изм.",UnitLClass,modSY);
  //Setting("Values in Text",LangNrLClass,modSY);
  //Setting("Test Function Tags",WindowTagTestClass,modSY);
  if (HasLanguages) then begin
    Setting("Values in Text",LangNrLClass,modSY);
  end;
  if (HasModNL==false) then begin
    Setting("Коды НДС",VATCodeTClass,modSY); 
  end;
  if (HasNumberSeries or HasLocalization("HRV,LVA")) then begin
    Setting("Официальные серии номеров",LegalInvNrTClass,modSY);
  end;  
  if (HasLocalization("PRT")) then begin
    Setting("Группы товаров",ITLClass,modSY);
  end;
  if (HasLocalization("HRV,SVN,SRB")) then begin
    Setting("XML Schema Definitions",XMLExportLClass,modSY);
  end;
  
  Report("Информация о компании",CompInfoRClass,CompInfoRn,0,modSY);
  if (HasModSL==false) then begin
    Report("Список клиентов",CURClass,CustRn,0,modSY);
    if (HasMultiCurrency or HasBase2) then begin
      Report("Курсы обмена",ERDateRClass,ERDateRn,0,modSY);
    end;
    if (HasLocalization("RUS")) then begin
      Report("Журнал счетов",ORJRClass,OrdRn,0,modSY);
    end else begin
      Report("Журнал реализаций",IVJRClass,InvoiceRn,0,modSY);
    end;
    Report("Список товаров",ArtRClass,ArtRn,0,modSY);
      if (HasLocalization("LTU")) then begin
      Report("#VAT# Report Sales (Lithuania)",SLVATLitRClass,SLVATLitRn,0,modSY);  
    end;
end else begin
    if (HasMultiCurrency or HasBase2) then begin
      Report("Курсы обмена",ERDateRClass,ERDateRn,0,modSY);
    end;
  end;

  if (HasModSL) then begin
     Export("Основные регистры",GBaseEClass,GBaseEn,modSY);
    //Export("Company Text Backup",TBEClass,CompanyTBEn,modSY);
    if (GuiType!=kGuiiPhone) then begin
      Export("Текстовая копия БД",TBDatabaseEClass,DatabaseTBEn,modSY);
    end;
    if (HasLocalization("HRV")) then begin
      Export("Register Export",ExpRegEClass,ExpRegEn,modSL);
    end;
//    Export("Удаленная копия БД",TBRemoteEClass,RemoteTBEn,modSY);
    if (HasModIN or HasModSL or HasModCRM or HasMultiLocations or HasModPL or HasAdvancedPricing) then begin
      Export("Основные регистры по товарам",GItemBaseEClass,GItemBaseEn,modSY);
    end;
    Export("Системные данные",SysEClass,SysEn,modSY);
    Export("Регистры записей операций",GTransEClass,GTransEn,modSY);
    Export("Регистры записей операций (период)",GTrans2EClass,GTrans2En,modSY);
  end else begin
    Export("Основные регистры",GBaseEClass,GBaseEn,modSY);
    if (GuiType!=kGuiiPhone) then begin  
      Export("Текстовая копия БД",TBDatabaseEClass,DatabaseTBEn,modSY);
    end;
    if (HasLocalization("HRV")) then begin
      Export("Register Export",ExpRegEClass,ExpRegEn,modSL);
    end;
//    Export("Удаленная копия БД",TBRemoteEClass,RemoteTBEn,modSY);
        if (HasLocalization("LTU")) then begin
      Export("#S/L# #VAT# Invoices (Lithuania)",LitVATRegIVEClass,LitVATRegIVEn,modSY);
    end;
    if (HasLocalization("PRT")) then begin
      Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modSY);
    end;    
    Export("Регистры Записей операций",GTransEClass,GTransEn,modSY); 
    Export("Регистры Записей операций (период)",GTrans2EClass,GTrans2En,modSY);
  end;
    
  if (GuiType!=kGuiiPhone) then begin
  	Export("Запланированное резервное копирование",TBRunTimedEClass,RunTimedTBEn,modSY);
  end;
  
  Import("Автоматически",0,FullyAutIn,modSY);
  Import("Найти файл...",0,AutIn,modSY);
//  Import("Удаленная копия БД",RemoteInIClass,RemoteIn,modSY);
  
//  if (HasModIN or HasModSL or HasModPL or HasModPOS or HasModAT2 or HasModCL or HasModExp or HasModPO) and (HasModNL) then begin
  if (HasModNL) then begin
  Maintenance("Создать записи операций",TransGenVClass,GenTransMn,modSY);
  end;
//  Maintenance("Restore Application",ResetDBWClass,0,modSY);
  if (ClientMode) then begin 
    Maintenance("Послать приглашение новому пользователю",SubscriptionInvitationVClass,SubscriptionInvitationMn,modSY);
  end;
  if (HasLocalization("HRV")) then begin
    Maintenance("XML Export",XMLExportVClass,XMLExportMn,modSY);
  end;
  if (HasLocalization("POL")) then begin
    Maintenance("Fill-in Invoice No.",FillinIVNrVClass,FillinIVNrMn,modSY);
  end;
  
/* modSO */
  
  RegisterWS("Счета клиентам","Счета клиентам","Новый счёт клиенту",ORVc,modSO); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modSO); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modSO); 
  if (HasItemGroups or HasLocalization("PRT,ITA")) then begin
    RegisterWS("Группы товаров","Группы товаров","Новая группа товаров",ITVc,modSO); 
  end;
  if (HasPriceLists) then begin
    RegisterWS("Цены","Цены","Новая цена",PLVc,modSO); 
  end;

  if (HasModIN) then begin
    Setting("Условия отгрузки",ShipDealLClass,modSO);
  end;
  if (HasModSL) then begin
    Setting("Предоплаты",DownPayTClass,modSO);
  end;
  if (HasLocalization("LVA,PRT")) then begin
    Setting("Транспортные компании",FreightCompanyLClass,modSO);
  end;
  if (HasModSL==false) then begin
    Setting("Настройки реализации",AccTClass,modSO);
  end;
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Счета клиентам",ORSerTClass,modSO);
  end;
  Setting("Условия оплаты",PDLClass,modSO);
  Setting("Запланированная отгрузка",PlanDeliveryTClass,modSO);
  Setting("Единицы измерения",UnitLClass,modSO);
  
  Document("Счета",ORRClass,OrdForm,OrdFClass,modSO);
  
  if (HasModIN) then begin
    Report("Невыполненная отгрузка",ShipableRClass,ShipableRn,0,modSO);
    Report("Список отгрузки",DeliveryRClass,DeliveryRn,0,modSO);
  end;
  Report("Валовая прибыль, Счета",ORGPRClass,ORGPRn,0,modSO);
  Report("Список товаров",ArtRClass,ArtRn,0,modSO);
  Report("Журнал счетов",ORJRClass,OrdRn,0,modSO);
  Report("Заказанные товары",OrdItemRClass,OrdItemRn,0,modSO);
  if (HasModIN) then begin
    Report("Незавершенные счета",OrderStockRClass,OrderStockRn,0,modSO);
  end;
  
/* modIN */
  
  if (HasModSO or HasLocalization("RUS") or HasLocalization("HRV")) then begin
    RegisterWS("Отгрузки","Отгрузки","Новая отгрузка",SHVc,modIN); 
  end;
  RegisterWS("Поступления","Поступления","Поступления",PUVc,modIN); 
  RegisterWS("Списания со склада","Списания со склада","Новое списание со склада",SDVc,modIN); 
  if (HasLocalization("PRT")) then begin 
    RegisterWS("Возвраты товаров","Возвраты товаров","Новый возврат",RetVc,modIN); 
    if (HasModPO) then begin
      RegisterWS("Возвраты товаров поставщикам","Возвраты товаров поставщику","New Ret. Goods to #Supplier",RetPUVc,modIN); 
    end;
    RegisterWS("Инвентаризации","Инвентаризации","Новая инвентаризация",StockTakeVc,modIN); 
  end else begin
    RegisterWS("Инвентаризации","Инвентаризации","Новая инвентаризация",StockTakeVc,modIN); 
    RegisterWS("Товары","Товары","Новый товар",INVc,modIN); 
//    Register("Контакты","Контакты",CUVc,modIN);
  end;
  if (HasMultiLocations) then begin 
    RegisterWS("Склады","Склады","Новые склады",LocationVc,modIN); 
    RegisterWS("Перемещения товаров","Перемещения товаров","Новое перемещение товаров",StockMovVc,modIN); 
  end;

  if (HasLocalization("HRV")) then begin 
    Setting("Base Price Changes",BPCLClass,modIN);
  end;
  if (HasModNL) then begin
    Setting("Настройки записей склад",INAccTClass,modIN); 
  end;
  Setting("Штрих коды",BarcodeLClass,modIN);    
  if (HasModCRM) then begin
    Setting("Контакты",CULClass,modIN); 
  end;
  Setting("Учет стоимостей",CostAccTClass,modIN);
  if (HasLocalization("PRT")) then begin 
    if (HasETaxDocuments) then begin
      Setting("Electronic Shipment",EShipPRTTClass,modIN);
    end;
  end;
  if (HasItemGroups or HasLocalization("PRT,ITA")) then begin
    Setting("Группы товара",ITLClass,modIN);
  end;
  if (HasLocalization("PRT")) then begin 
    Setting("Товары",INLClass,modIN);
  end;
  if (HasVarieties) then begin
    Setting("Варианты товара",VARLClass,modIN);
    Setting("Группы вариантов товара",VARGLClass,modIN);
  end;
  if (HasNumberSeries) then begin
    if (HasModSO) then begin
      Setting("Серии номеров - Отгрузки",SHSerTClass,modIN);
    end;
    if (HasNumberSeries and HasLocalization("PRT")) then begin 
      Setting("Серии номеров - Returned Goods",RetSerTClass,modIN);
      Setting("Серии номеров - Возвраты товаров поставщику",RetPUSerTClass,modIN);
    end;
    Setting("Серии номеров - Поступления",PUSerTClass,modIN);
    Setting("Серии номеров - Списание со склада",SDSerTClass,modIN);
    if (HasNumberSeries and HasLocalization("PRT")) then begin 
      if (HasMultiLocations) then begin 
        Setting("Серии номеров - Перемещения",StockMovSerTClass,modIN);
      end;
    end;
    Setting("Серии номеров - Инвентаризация",StockTakeSerTClass,modIN);
  end;
  if (HasLocalization("PRT")) then begin 
    Setting("Optional features",OFTClass,modIN);
  end;
  if (HasMultiLocations) then begin 
    Setting("Настройки склада",MainStockTClass,modIN);
  end;
  if (HasVarieties) then begin
    Setting("Variety Masks",VARMaskTClass,modIN);
    Setting("Variety Sets",VARMasksLClass,modIN);
    Setting("Variety Settings",VarietyTClass,modIN);
    Setting("Variety Subsets",VARSubsetsLClass,modIN);
  end;

  if (HasModSO or HasLocalization("RUS")) then begin
    if (HasModSO) then begin
      Document("Этикетки адреса",AdrLabRClass,AdrLabForm,AdrLabFClass,modIN);
      Document("Накладные",Sh1RClass,Sh1Form,Sh1FClass,modIN);
      Document("Этикетки груза",SHLabRClass,SHLabForm,SHLabFClass,modIN);
    end else begin
        if (HasLocalization("RUS")) then begin 
          Document("Накладные",Sh1RClass,Sh1Form,Sh1FClass,modIN);
        end;
    end;
  end else begin
    if (HasLocalization("HRV")) then begin
      Document("Base Price Change",BasePriceChangeRClass,BPChangeForm,BasePriceChangeFClass,modIN);
      Document("Delivery Notes",Sh1RClass,Sh1Form,Sh1FClass,modIN);
    end;
  end;
  Document("Этикетки поступлений",PULabRClass,PULabForm,PULabFClass,modIN);
  Document("Поступления",PurchaseRClass,PurchaseForm,PurchaseFClass,modIN);
  Document("Этикетки товаров",ItemLabelRClass,ItemLabelForm,ItemLabelFClass,modIN);
  if (HasModSO or HasLocalization("RUS")) then begin
    Document("Лист сборки",Sh2RClass,Sh2Form,Sh2FClass,modIN);
  end;
  Document("Списание со склада",SDRClass,SDForm,SDFClass,modIN);
  if (HasLocalization("HRV") or (HasModIN and HasMultiLocations)) then begin
    Document("Перемещения",StockMovRClass,StockMovForm,StockMovFClass,modIN);
  end;
  
  if (HasModPO or HasModSO) then begin
  Report("Нормативы остатков склада",PurRClass,PurRn,0,modIN);
  end;
  if (HasModSO) then begin
    Report("Журнал отгрузки",SHJRClass,ShipRn,0,modIN);
    Report("Список отгрузки",SHListRClass,ShipListRn,0,modIN);
  end;
  Report("Журнал поступлений",PUJRClass,PUJRn,0,modIN);
  Report("История товаров",INrsRClass,INrsRn,0,modIN);
  Report("Список товаров",ArtRClass,ArtRn,0,modIN);
  Report("Журнал списаний со склада",SDJRClass,StockDepRn,0,modIN);
  Report("Журнал по складу",StockJInRClass,StockInRn,0,modIN);
  Report("Список складов",INRClass,InvValRn,0,modIN);
  Report("Журнал отсутствия товаров",StockJOutRClass,StockOutRn,0,modIN);
  Report("Сравнение инвентаризации",STCompRClass,STCompRn,0,modIN);
  Report("Перечень инвентаризации",StockTakeRClass,StockTakeRn,0,modIN);
  Report("Статистика поставщик/товар",VeInRClass,VeInRn,0,modIN);

  Maintenance("Сравнение инвентаризации",STCompVClass,STCompMn,modIN);
  
/*
  if (HasLocalization("PRT")) then begin
    Export("SAFT Stock",PortStockXmlEClass,PortStockXmlEn,modIN);
  end;
*/
/*modPO*/

  RegisterWS("Заказы поставщикам","Заказы поставщикам","Новый заказ поставщику",POVc,modPO); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modPO); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modPO); 

  if (HasModIN) then begin
    Setting("Условия доставки",ShipDealLClass,modPO);
  end;
  if (HasCategories) then begin
    Setting("Категории поставщика",VGLClass,modPO);
  end;
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Заказы поставщикам",POSerTClass,modPO);
  end;

  Report("Нормативы остатков склада",PurRClass,PurRn,0,modPO);
  Report("Отчёт по заказам поставщикам",POOrdStockRClass,POOrdStockRn,0,modPO);  
  Report("Журнал заказов поставщикам",PurOrdJRClass,PurOrdJRn,0,modPO);

  Document("Заказы поставщикам",PORClass,POForm,POFClass,modPO); 

/* modQT */
  RegisterWS("Коммерческие предложения","Коммерческие предложения","Новое комм. предложение",QTVc,modQT); 
  if (HasModCRM) then begin
    RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modQT); 
  end;
  RegisterWS("Товары","Товары","Новый товар",INVc,modQT); 
  if (HasPriceLists) then begin
    RegisterWS("Цены","Цены","Новая цена",PLVc,modQT); 
  end;
  //Register("Pre Quotations","Pre Quotations",PreQTVc,modQT); no funcionality for this one
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Коммерческие предложения",QTSerTClass,modQT);
  end;
  Setting("Виды предложений",QuoteClassTClass,modQT);
  Setting("Настройки предожений",QTSettTClass,modQT);

  Document("Предложения",QTRClass,QTForm,QTFClass,modQT);
  if (HasLocalization("PRT")) then begin
    Document("Proforma Invoice, Quotations",ProformaQTRClass,ProformaQTForm,ProformaQTFClass,modQT);
  end;
  
  if (HasLocalization("PRT")) then begin
    Report("Proforma Invoice Journal",ProformaIVJRClass,ProformaIVJRn,0,modQT);
  end;
  Report("Журнал подтвержденных предложений",QTHistoryRClass,QTHstRn,0,modQT);
  Report("Список предложений",QTStkRClass,QTStkRn,0,modQT);
  Report("Воронка продаж",QTPipelineRClass,QTPipelineRn,0,modQT);
  Report("Журнал коммерческих предложений",QTJRClass,QTJRn,0,modQT);

/*modPOS*/

  RegisterWS("Сч/ф кассового терминала","Сч/ф кассового терминала","Новый сч/ф кассового терминала",NPTSIVCashLClass,modPOS); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modPOS); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modPOS); 
  RegisterWS("Остатки по кассе","Остатки по кассе","Новый остаток по кассе",CashierBalVc,modPOS); 
  
  Setting("Cash Events",CashLClass,modPOS);
  Setting("Default Payment Modes",DefCashTClass,modPOS);
  Setting("Drawers",DrawerLClass,modPOS); 
  Setting("Invoice Settings",AccTClass,modPOS);
  if (HasItemClassification) then begin
    Setting("Классификации товаров",DILClass,modPOS);
  end;
  if (HasItemGroups or HasLocalization("PRT,ITA")) then begin
    Setting("Группы товаров",ITLClass,modPOS);
  end;
  if (HasLocalMachines) then begin
    Setting("Local Machine",LocalMachineTClass,modPOS);
  end;
//  Setting("Local Machine Payment Modes",RestPMTClass,modPOS);
//  Setting("Local Serial Port Devices",LSerialPortDeviceLClass,modPOS);
  if (HasNumberSeries) then begin
    Setting("Серии номеров - POS Invoices",IVCashSerTClass,modPOS); 
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Setting("Payment Currencies",POSCurrenciesTClass,modPOS);
  end;
  Setting("Способы платежей",PMTClass,modPOS);
  Setting("POS Balances",POSBalanceLCLass,modPOS);
  Setting("POS Buttons",POSButtonsLClass,modPOS);
  Setting("POS Sessions",POSEventLCLass,modPOS);
  Setting("POS Settings",CashierDefTClass,modPOS);

  Report("Cash Up",CashupRClass,CashupRn,0,modPOS);
//  Report("Daily Balance",DayBalRClass,DayBalRn,0,modPOS); //not in 63
  if (HasModIN) then begin
    Report("GP, POS Invoices", PIVGPRClass,PIVGPRn,0,modPOS);
  end;
  Report("Item List",ArtRClass,ArtRn,0,modPOS);
  Report("Item Statistics",ArtSTRClass,ArtSTRn,0,modPOS);
  if (HasModNL) then begin
    Report("#N/L# Transfer, Cash Invoices", TransGenPOSRClass,TransGenPOSRn,0,modPOS);
  end;
  Report("POS Invoice Journal",IVCJRClass,InvCashRn,0,modPOS);
  if (HasVarieties) then begin
    Report("Variety Enquiry",VarEnqRClass,VarEnqRn,0,modPOS);
  end;

  Document("Счета POS",IVCashRClass,InvCashForm,IVCashFClass,modPOS);

  if (HasModNL) then begin
    Maintenance("Cash Up",CashupVClass,CashupMn,modPOS);
  end;
  if (HasModIN) then begin
    Maintenance("Update #Stock#",POSUpdStockVClass,POSUpdStockMn,modPOS);
  end;

/* modRest */
  RegisterWS("Счета","Счета","Новый счёт",RestAccVc,modRest); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modRest); 
  RegisterWS("Столики","Столики","Новое расположение столиков",TableLayoutClass,modRest); 

  Setting("Ежедневная статистика",SalesTimeTClass,modRest); 
  Setting("Default Payment Modes",DefCashTClass,modRest);
  Setting("Invoice Settings",AccTClass,modRest);
  if (HasItemGroups or HasLocalization("PRT,ITA")) then begin
    Setting("Группы товаров",ITLClass,modRest);
  end;
  Setting("Способы платежей",PMTClass,modRest); 
  Setting("POS Buttons",POSButtonsLClass,modRest);
  Setting("Tables",NeighbourHoodLClass,modRest);
  Setting("Units",UnitLClass,modRest);

  Document("Bar Tab",RestAccRClass,RestAccForm,RestAccFClass,modRest);
  Document("Bar Tab Receipt",RestAccReceiptRClass,RestAccReceiptForm,RestAccReceiptFClass,modRest);
  Document("Cancel Order",RestAccRClass,RestAccCancelForm,RestAccCancelFClass,modRest);
  Document("Cash Events",CashRClass,CashForm,CashFClass,modRest);
  Document("Fire Order",RestAccRClass,RestAccFireOrderForm,RestAccFireOrderFClass,modRest);
  Document("Guest Bill ",RestAccGuestBillRClass,RestAccGuestBillForm,RestAccGuestBillFClass,modRest);

  Export("#Restaurant# Daily Statistics",SalesTimeEClass,SalesTimeEn,modRest);  

  Report("Item List",ArtRClass,ArtRn,0,modRest);
  Report("#Restaurant# Daily Statistics",DetSalesTimeRClass,DetSalesTimeRn,0,modRest);  
//  Report("Cash Up",CashupRClass,CashupRn,0,modRest);
  Report("#Restaurant# Daily Statistics",DetSalesTimeRClass,DetSalesTimeRn,0,modRest);  
  Report("#Restaurant# Item Statistics",BarItemStatRClass,BarItemStatRn,0,modRest);
  Report("Tabs Journal",RestAccJRClass,RestAccJRn,0,modRest);
  Report("Void Report",VoidedRowsRClass,VoidedRowsRn,0,modRest);
  
/* modCRM */

  if (HasModCRM) then begin  
    RegisterWS("Коммерческие предложения","Коммерческие предложения","Новое комм. предложение",QTVc,modCRM); 
  end;
  RegisterWS("Деятельности","Деятельности","Новая деятельность",ActVc,modCRM); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modCRM); 
  if (HasModCRM) then begin  
    RegisterWS("Товары","Товары","Новый товар",INVc,modCRM); 
  end;

  Report("Список дней рождений",BirthDayRClass,BirthDayRn,0,modCRM);
  Report("История звонков",CallHistRClass,CallHistRn,0,modCRM);
  Report("Список контактов",CURClass,CustRn,0,modCRM);
  if (HasStandardOrganizer==false) then begin
    Report("Справка по клиенту",CustPSRClass,CustPSRn,0,modCRM);
  end;
  Report("Отчёт неверных тел.номеров",InvPhoneNoRClass,InvPhoneNoRn,0,modCRM);
  Report("Список лиц",UserRClass,UserRn,0,modCRM);
  Report("Личный календарь",ActCalRClass,ActCalRn,0,modCRM);

  Report("Поиск контактного лица",SearchContactRClass,SearchContactRn,0,modCRM);

  Document("Деятельности",ActDocRClass,ActDocForm,ActDocFClass,modCRM);
  Document("Этикетки контактов",CoLabRClass,CoLabForm,CoLabFClass,modCRM);

  Setting("Классы деятельностей",ActTypeGrLClass,modCRM);
  Setting("Типы деятельностей",ActTypeLClass,modCRM);
  Setting("Связи с контактами",ContactRelLClass,modCRM);
  if (HasModCRM or HasStandardCommunicator) then begin  
    Setting("Информаци в Справка по клиенту",CustPSLClass,modCRM);
  end;
  if (HasModCRM) then begin  
    Setting("Условия оплаты",PDLClass,modCRM);
  end;
  Setting("Program Mode",ProgramStatusTClass,modCRM);//clouds ? 
  Setting("Типы текстов",TextTypeLClass,modCRM);
  Setting("Единицы измерений",UnitLClass,modCRM);
  if (HasLocalization("PRT") or HasLocalization("BRA")) then begin
    Setting("User Defined Fields - Contacts",CUUserLabelTClass,modCRM);
  end;
  Maintenance("Rebuild Number Recognition Register",NormPhoneNumVClass,NormPhoneNumMn,modCRM);
  Maintenance("Системное сообщение",SysMessVClass,SysMessMn,modCRM); // Must have ONE, otherwise it crashes.... goes for all these types...

  end;
  return;
end;
