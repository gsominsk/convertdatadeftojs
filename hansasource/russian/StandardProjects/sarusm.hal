/* sjsengm.hal */
/* Standard Projects by HansaWorld */
external function Boolean HasDeveloperMode();
external function Boolean HasPersons();
external function Boolean HasModQT();
external function Boolean HasSerialNumbers();
external function Boolean HasModAT2();
external function Boolean HasModCL();
external function Boolean HasStandardCRM();
external function Boolean HasModExp();
external function Boolean HasIncomeAndExpenseBook();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();
external function Boolean HasModSO();
external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModSL();
external function Boolean HasModPL();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModRest();
external function Boolean HasModCRM();
external function Boolean HasPayroll();
external function Boolean HasEMail();

external function Boolean HasAdvancedPricing();
external function Boolean HasBase2();
external function Boolean HasCategories();
external function Boolean HasContactClassification();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLocalMachines();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNumberSeries();
external function Boolean HasOfficialSerNr();
external function Boolean HasObjects();
external function Boolean HasPriceLists();
external function Boolean HasVarieties();
external procedure SetProductTags();
external function Boolean HasFormEditor();
external function Boolean HasNumberSeries();
external procedure LoadWindowTags();


begin
  Real h,v,l,vs;

  SetLangMode(LangRussian,"RUS",0);

  DictTerm("#Time Sheet#","Time & Material");
  DictTerm("#Time Sheets#","Time & Materials");

  if (BuildProductCode=="StandardProjects") then begin

  SetProductTags;
  LoadWindowTags;

if (HasModCL) then begin
    Module("Кассовая книга","",730,modCL);
  end;
  Module("Projects","",730,modTS);
  if (HasModSL) then begin
    Module("#Sales Ledger#","",730,modSL);
  end;
  Module("System","",730,modSY);
  
  if (HasModNL) then begin
    Module("#Nominal Ledger#","",730,modNL);
  end;
  if (HasModPL) then begin
    Module("#Purchase Ledger#","",730,modPL);  
  end;
  if (HasModPO) then begin
    Module("#Purchase Orders#","",730,modPO);
  end;
  if (HasModIN) then begin
    Module("#Stock#","",730,modIN);
  end;
  if (HasModSO) then begin
    Module("#Sales Orders#","",730,modSO);
  end;

/* modSL */
  
  RegisterWS("Счета-фактуры","Счета-фактуры","Новый счёт-фактура",IVVc,modSL); 
  RegisterWS("Платежи","Платежи","Новый платёж",IPVc,modSL); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modSL); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modSL); 
  if (HasPriceLists) then begin
    RegisterWS("Цены","Цены","Новая цена",PLVc,modSL); 
  end;
  
  if (HasCategories) then begin
    Setting("Customer Categories",CCatLClass,modSL);
  end;
  Setting("Invoice Settings",AccTClass,modSL);
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT")) then begin
    Setting("Группы товаров",ITLClass,modSL);
  end;
  if (HasNumberSeries or HasLocalization("LVA")) then begin
    Setting("Legal Invoice Numbers",LegalInvNrTClass,modSL);
  end;    
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Invoices",IVSerTClass,modSL);
    Setting("Серии номеров - Receipts",IPSerTClass,modSL);
  end;
  Setting("Способы платежей",PMTClass,modSL);
  Setting("Payment Terms",PDLClass,modSL);
  if (HasPriceLists) then begin
    Setting("Price Lists",PLDefLClass,modSL);
  end; 
  if (HasLocalization("FIN")) then begin
    Setting("Reference Number Settings",CalcRefTClass,modSL);
  end;
  Setting("Sales Invoice Settings",IVTTClass,modSL);     //!!TRANSLATE
  if (HasLocalization("PRT")) then begin
    Setting("Standard Problems",StandProblemLClass,modSL);
  end; 
  if (HasModNL==false) then begin
    if (HasLocalization("BRA,HRV,KEN")) then begin
      Setting("Налоговые шаблоны",TaxTemplateLClass,modSL);
    end;
  end;   
  Setting("Units",UnitLClass,modSL);
  Setting("Коды НДС",VATCodeTClass,modSL);

  Document("Cash Notes",KIVRClass,CashInvForm,CashFClass,modSL);
  Document("#Credit Notes#",CIVRClass,CredInvForm,CredFClass,modSL);
  Document("Invoices",IVRClass,InvForm,InvFClass,modSL); 
  if (HasLocalization("PRT")) then begin
    Document("Invoice/Receipt's",KIVRClass,CashInvRecPRTForm,CashRecPRTFClass,modSL);
  end;  
  Document("Open Invoice Customer Statement",ARSRClass,ARSForm,ARSFClass,modSL);
  Document("Periodic Customer Statement",CuPerRClass,CuPerForm,CuPerFClass,modSL);
  if (HasLocalization("PRT")) then begin
    Document("Proforma Invoice, Quotations",ProformaQTRClass,ProformaQTForm,ProformaQTFClass,modSL);
  end;
  Document("Project Invoices",PIVRClass,ProjInvForm,PRInvFClass,modSL);
  Document("Receipt Forms",IPDRClass,IPDForm,IPDFClass,modSL);

  Report("Customer List",CURClass,CustRn,0,modSL);
  Report("Customer Statistics",CustSTRClass,CustSTRn,0,modSL);
  Report("Invoice Journal",IVJRClass,InvoiceRn,0,modSL);
  Report("Item List",ArtRClass,ArtRn,0,modSL);
  Report("Open Invoice Customer Statement",ARS2RClass,ARS2Rn,0,modSL);
  Report("Periodic Customer Statement",CuPer2RClass,CuPerRn,0,modSL);
  if (HasPriceLists) then begin
    Report("Прейскурант",PriceRClass,PriceRn,0,modSL);
  end;
  Report("Receipts Forecast",IPProgRClass,IPProgRn,0,modSL);
  Report("Receipt Journal",IPRClass,IPRn,0,modSL);
  Report("#Sales Ledger#",ARRClass,ARRn,0,modSL);
  
  if (HasLocalization("PRT")) then begin
    if (HasEMail) then begin
      Maintenance("SAFT через электронную почту",SAFTtoEmailVClass,SAFTtoEmailMn,modSL);
    end;
  
    Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modSL);
  end;  
  
/* modTS */

  RegisterWS("Время и материалы","Время и материалы","Новое время и материалы",TSVc,modTS); 
  RegisterWS("Проекты","Проекты","Новый проект",PRVc,modTS); 
  RegisterWS("Операции по проекту","Операции по проекту","Новая операция по проекту",TBIVVc,modTS); 
  RegisterWS("Бюджеты по проекту","Бюджеты по проекту","Новый бюджет по проекту",TBBUVc,modTS); 
  RegisterWS("Коммерческие предложения","Коммерческие предложения","Новое комм. предложение",QTVc,modTS); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modTS); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modTS); 

  if (HasItemGroups or HasLocalization("BRA,ITA,PRT")) then begin
    Setting("Группы товаров",ITLClass,modTS);
  end;
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Проекты",PRSerTClass,modTS);
    Setting("Серии номеров - Коммерческие предложения",QTSerTClass,modTS);
    Setting("Серии номеров - Time & Materials",TSSerTClass,modTS);
  end;
  Setting("Классы проектов",PRClassTClass,modTS);
  Setting("Настройки проектов",PRITClass,modTS);
  Setting("Классы коммерческих предложений",QuoteClassTClass,modTS);  
  Setting("Коды НДС",VATCodeTClass,modTS);

  Report("Контроль исполнения бюджета",BudFollPRClass,BudPFoll2Rn,0,modTS);
  Report("Счета-фактуры по проектам",ProInvRClass,ProInvRn,0,modTS);
  Report("Список проектов",ProListRClass,PRListRn,0,modTS);
  Report("Прейскуранты по проектам",ProjPLRClass,ProjPLRn,0,modTS);
  Report("Статус проекта",ProStatRClass,ProStatRn,0,modTS);
  Report("Записи операций по проекту",PrTransRClass,PrTranRn,0,modTS);
  Report("Журнал коммерческих предложений",QTJRClass,QTJRn,0,modTS);
  Report("Журнал времени и материалов",TSJRClass,TSJRn,0,modTS);

  Document("Бюджета по проектам",TBBudgetRClass,TBBudgetForm,TBBudgetFClass,modTS);
  Document("Информация о проекте",ProjectInfoRClass,ProjectInfoForm,ProjectInfoFClass,modTS);
  Document("Записи операций по проекту",ProjectTransRClass,ProjectTransForm,ProjectTransFClass,modTS);
  Document("Projects",ProjectRClass,ProjectForm,ProjectFClass,modTS);
  Document("Quotations",QTRClass,QTForm,QTFClass,modTS);
  Document("Time & Materials",TimeSheetRClass,TimeSheetForm,TimeSheetFClass,modTS);

  Maintenance("Создать счета-фактуры по проекту",ProInvVClass,ProInvMn,modTS);
  
  
/* modSY */
  if (HasDeveloperMode or HasPersons) then begin
    RegisterWS("Сотрудники","Сотрудники","Новый сотрудник",UserVc,modSY); 
  end;
  if (HasMultiCurrency or HasBase2) then begin
    RegisterWS("Валюты","Валюты","Новая валюта",CurncyCodeVc,modSY);  
  end;
  if (HasMultiCurrency) then begin
    RegisterWS("Курсы обмена","Курсы обмена","Курс обмена",ERVc,modSY); 
  end;
  if (HasFormEditor) then begin
    RegisterWS("Формы","Формы","Новая форма",DocVc,modSY); 
    RegisterWS("Стили","Стили","Новый стиль",StyleVc,modSY); 
  end;
  if ((ClientMode and LicenseMode==kLicenseModeServer) or HasPersons or HasDeveloperMode) then begin
    RegisterWS("Сотрудники","Сотрудники","Новый сотрудник",UserVc,modSY); 
  end;

  Setting("Company Info",CYWClass,modSY);
  if (ClientMode) then begin
    switch (LicenseMode) begin
      case kLicenseModeClient:
      case kLicenseModeServer:
//        Setting("Configuration",ModulesTClass,modSY);
        Setting("Конфигурация пользователей",ConfigureUsersTClass,modSY);
    end;
  end;
  if (IsUsingActivationCodes) then begin
    Setting("Internet Enablers",InternetEnablerTClass,modSY);
  end;
  Setting("Reporting Periods",PeriodTClass,modSY);
  
  Report("Company Info",CompInfoRClass,CompInfoRn,0,modSY);

  Export("Base Registers",GBaseEClass,GBaseEn,modSY);
  if (GuiType!=kGuiiPhone) then begin
    Export("Database Text Backup",TBEClass,DatabaseTBEn,modSY);
  end;
  //Export("Remote Backup",TBRemoteEClass,RemoteTBEn,modSY);
  Export("System Data",SysEClass,SysEn,modSY);
  
  Import("Automatic",0,FullyAutIn,modSY);
/*  
  if (UseAppStoreEnabler==false) then begin
    Setting("Internet Enablers",InternetEnablerTClass,modSY);
  end;
*/  
  Import("Manual file search",0,AutIn,modSY);
  
/* modPL */

  RegisterWS("Счета-фактуры поставщика","Счета-фактуры поставщика","Новый счёт-фактура поставщика",VIVc,modPL); 
  RegisterWS("Платежи","Платежи","Новый платёж",OPVc,modPL); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modPL); 

  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Setting("Account Usage #P/L#",APAccTClass,modPL);
  end;
  if (HasLocalization("AUS,ESP,FIN,GBR,NOR,SWE")) then begin
    Setting("Банковские файлы",BankFileTClass,modPL);
  end;
  if (HasNumberSeries) then begin
    Setting("Серии номеров - #Purchase Invoices#",VISerTClass,modPL);
    Setting("Серии номеров - Payments",OPSerTClass,modPL);
    if (HasModNL or HasIncomeAndExpenseBook) and (HasLocalization("POL,HRV")) then begin
      Setting("Серии номеров - #VAT# Corrections #P/L#",VATVISerTClass,modPL);
    end;
  end;
  Setting("Способы платежей",PMTClass,modPL);
  Setting("Payment Terms",PDLClass,modPL);
  if (HasCategories) then begin
    Setting("#Supplier# Categories",VGLClass,modPL);
  end;
  if (HasModNL or HasIncomeAndExpenseBook) and (HasLocalization("POL,HRV")) then begin
    Setting("#VAT# Corrections #P/L#",VATVILClass,modPL);
    Setting("#VAT# Correction #P/L# Types",VATVITypeTClass,modPL);
  end;
  if (HasLocalization("PRT,ITA")) then begin
    Setting("Withholding Calculation Formulae",WHCalcFormLClass,modPL);
    Setting("Withholding Taxes",WHTaxTClass,modPL);
  end;  
  if (HasLocalization("ESP,FIN,RUS")) then begin
    Setting("Banks",BankLClass,modPL);
  end;

  if (HasLocalization("LTU,POL")) then begin
    Document("Открыть список неоплаченных счетов поставщика",APSRClass,APSForm,APSFClass,modPL);
  end;
  Document("Формы платежей",OPDRClass,OPDForm,OPDFClass,modPL);
  Document("Списки платежей",OPRClass,OPForm,0,modPL);
  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Document("#Purchase Invoices#",VIRClass,VIForm,VIFClass,modPL);
  end;

  if (HasLocalization("LTU")) then begin
    Report("Открыть список неоплаченных счетов поставщика",APS2RClass,APS2Rn,0,modPL);
  end;
  Report("Payments Forecast",OPProgRClass,OPProgRn,0,modPL);
  Report("Payment Journal",OPJRClass,OPJRn,0,modPL);
  Report("Periodic #Supplier# Statement",VePer2RClass,VePerRn,0,modPL);
  if (HasLocalization("LVA")) then begin
    Report("Prepayment History #P/L#",PerPayHisPLRClass,PerPayHisPLRn,0,modPL);
  end;
  Report("#Purchase Invoice# Journal",VIJRClass,VIJRn,0,modPL);
  Report("#Purchase Ledger#",APRClass,APRn,0,modPL);
  Report("#Supplier# List",VERClass,VERn,0,modPL);
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("LVA,POL")) and (HasModNL or HasIncomeAndExpenseBook) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# #Supplier# Purchases",RealSuppRClass,RealSuppRn,0,modPL); 
  end;
  if (HasLocalization("HND")) then begin
    Report("#VAT# Report Purchases (Honduras)",PLVATHonRClass,PLVATHonRn,0,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Report("#VAT# Report Purchases (Lithuania)",PLVATLitRClass,PLVATLitRn,0,modPL);
  end;
  
  if (HasLocalization("AUS,ESP,FIN,GBR,NOR,SWE")) then begin
    Export("Банковский файл",MPEClass,MPEn,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#P/L# #VAT# Invoices (Lithuania)",LitVATRegVIEClass,LitVATRegVIEn,modPL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#P/L# Latvian #VAT# Report",PLVAT1ExpEClass,PLVAT1En,modPL);
    Export("#VAT# Purchases (Latvia)",LatVATPurchasesEClass,LatVATPurchasesEn,modPL);
  end;
    
  if (HasModNL) and (HasLocalization("HRV")) then begin
    Maintenance("Create #VAT# Corrections #P/L#",VATVIVClass,VATVIMn,modPL);
  end;

/* modNL */
  
  if (HasModNL==false) then begin
    if (HasIncomeAndExpenseBook) then begin
      RegisterWS("Счета","Счета","Новый счёт",AccVc,modNL); 
      RegisterWS("Записи операций","Записи операций","Новая запись",TRVc,modNL); 

      Setting("Fiscal Years",YearTClass,modNL);
      Setting("Income & Expense Book",IncExpBookLClass,modNL);
      if (HasNumberSeries) then begin
        Setting("Серии номеров - Transactions",TRSerTClass,modNL);
      end;
      Setting("Sub Systems",TRGenTClass,modNL);
      Setting("Коды НДС",VATCodeTClass,modNL);
      
      Report("Income & Expense Book",IncExpBookRClass,IncExpBookRn,0,modNL);
    end;
  end else begin
    RegisterWS("Записи операций","Записи операций","Новая запись операций",TRVc,modNL); 
    if (HasLocalization("AGO,PRT")) then begin
      RegisterWS("Симуляции","Симуляции","Новая симуляция",SMVc,modNL);   
  end;
//  Register("Выверка счетов","Выверка счетов",BankRecWClass,modNL);
    if (HasLocalization("AUS")) then begin
      Register("Выверка счетов","Выверка счетов",BankRecWClass,modNL);
    end;
    if (HasLocalization("AUS")==false) then begin
      RegisterWS("Начальное сальдо","Начальное сальдо","Новое начальное сальдо",FBVc,modNL); 
    end;
    RegisterWS("Счета","Счета","Новый счёт",AccVc,modNL); 


  if (HasLocalization("AGO,POL,PRT")) then begin
    Setting("Account Transfers",AccTransLClass,modNL);
  end;
  Setting("Fiscal Years",YearTClass,modNL);
  if (HasIncomeAndExpenseBook) then begin
      Setting("Income & Expense Book",IncExpBookLClass,modNL);
    end;
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Transactions",TRSerTClass,modNL);
  end;
  if (HasObjects) then begin
    Setting("Объекты",ObjLClass,modNL);
    Setting("Типы объектов",OTLClass,modNL);
  end;
//  if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
//    Setting("Rate Gain/Loss",NLRateTClass,modNL);
//  end;
  Setting("Report Settings",Rs2WClass,modNL);
  Setting("Sub Systems",TRGenTClass,modNL);
  Setting("Контрольные счета записей подсистем",SLAccTClass,modNL);
  if (HasLocalization("HRV,LVA")) then begin
    Setting("Tax Reports",TaxRepLClass,modNL);
  end;
  if (HasLocalization("BRA,HRV,LVA")) then begin
    Setting("Tax Rules",TaxRulesLClass,modNL);
    Setting("Налоговые шаблоны",TaxTemplateLClass,modNL);
    Setting("Transaction Settings",TrTClass,modNL);
  end;
  if (HasLocalization("KEN")) then begin
    Setting("Налоговые шаблоны",TaxTemplateLClass,modNL);
  end;  
  Setting("Коды НДС",VATCodeTClass,modNL);
  
  if (HasLocalization("HRV,LVA")) then begin
    Document("Tax Report",TaxDocRClass,TaxRepForm,TaxRepFClass,modNL);
  end;
  Document("Записи операций",TRRClass,TRForm,TRFClass,modNL);

  Report("Выверка счетов",ACReconRClass,ACRecRn,0,modNL);

  if (HasLocalization("AGO,BRA,POL,PRT")) then begin
    Report("Analytical Balance",MBARClass,MBARn,0,modNL);
  end;
  Report("Balance Sheet",BalRClass,BalRn,UserDefRepDClass,modNL);
  Report("Chart of Accounts",AccListRClass,AccListRn,0,modNL);
  Report("Correction List",CorrRClass,CorrRn,0,modNL);
  if (HasLocalization("LTU,LVA")) then begin
    Report("Corresponding Accounts",CorspRClass,CorspRn,0,modNL);
  end;
  if (HasMultiCurrency) then begin
    Report("Currency A/C Rate Change",NLRateRClass,NLRateRn,0,modNL);
    end;
    if (HasIncomeAndExpenseBook) then begin
      Report("Income & Expense Book",IncExpBookRClass,IncExpBookRn,0,modNL);
    end;
    if (HasMultiCurrency) then begin
    Report("Multicurrency Accounts Rate Difference",MultiCurAccRClass,MultiCurAccRn,0,modNL);
  end;
  Report("#Nominal Ledger#",MainRClass,MainRn,0,modNL);
  Report("Profit & Loss",ResRClass,ResRn,UserDefRepDClass,modNL);
  if (HasLocalization("LVA")) then begin
    Report("Tax Calculations", Tax100Class,Tax100Rn,0,modNL);
    Report("Test Corresponding Rules",CorstRClass,CorstRn,0,modNL);
  end;
  Report("Transaction Journal",TransRClass,TransRn,0,modNL);
  Report("Проверочный баланс",SBRClass,TrialRn,0,modNL);
  if (HasLocalization("POL,PRT")==false) then begin
    Report("Отчёт по НДС, сводный",ALLVATRClass,ALLVATRn,0,modNL);
  end;
  if (HasLocalization("POL")==false) then begin
    Report("#VAT# Report",VATRClass,VAT2Rn,UserDefRepDClass,modNL);
  end;

  if (HasLocalization("FRA")) then begin
      Export("FEC Export",FrenchFECEClass,FrenchFECEn,modNL);
    end;
    if (HasLocalization("SGP")) then begin
      Export("IRAS audit File",GenIRASEClass,IRASAuditEn,modNL);
    end;
  Export("Monthly Balances",MBEClass,MBEn,modNL);
  if (HasLocalization("SWE")) then begin
    Export("SIE (Swedish Export/Import)",SieEClass,SieEn,modNL);
  end;
  Export("Проверочный баланс",SBEClass,SBEn,modNL);
  if (HasLocalization("PRT")) then begin
    Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modNL);
  end; 
      if (HasLocalization("LTU")) then begin
      Export("Периодическая декларация НДС (Литва)",LTUVATEClass,LTUVATEn,modNL);
  end;   
  
  if (HasLocalization("SWE")) then begin
    Import("SIE (Swedish Export/Import)",0,SieIn,modNL);
  end;
    
  if (HasLocalization("AGO,POL,PRT")) then begin
    Maintenance("Account Balance Transfer",AccTransVClass,AccTransMn,modNL);
  end;
  end;
  
/* modCL */

  RegisterWS("Приходы в кассу","Приходы в кассу","Новый приход",CLInVc,modCL); 
  RegisterWS("Расходы из кассы","Расходы из кассы","Новый расход",CLOutVc,modCL); 
  if (HasModSL and HasLocalization("POL")==false) then begin
    RegisterWS("Платежи","Платежи","Новый платёж",IPVc,modCL); 
  end;
  if (HasModPL and HasLocalization("POL")==false) then begin
    RegisterWS("Платежи","Платежи","Новый платёж",OPVc,modCL); 
  end;
  if (HasModExp) then begin
    RegisterWS("Выплату персоналу","Выплату персоналу","Новая выплата персоналу",PPVc,modCL); 
  end;
  
  Setting("Настройки кассовой книги",MainCLTClass,modCL);
  Setting("Expense Accounts",CLCorspLClass,modCL);
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Cash In",CLInSerTClass,modCL);
    Setting("Серии номеров - Cash Out",CLOutSerTClass,modCL);
  end;
  Setting("Способы платежей",PMTClass,modCL);
  
  Report("Кассовая книга",CLIORClass,CashBRn,0,modCL);
  if (HasLocalization("LTU")) then begin
    Report("Cash Book (Lithuania)",CashBookLitRClass,CashBookLitRn,0,modCL);
  end;
  Report("Журнал прихода в кассу",CLInJRClass,CLInJRn,0,modCL);  
  Report("Журнал расходов из кассы",CLOutJRClass,CLOutJRn,0,modCL);  
  if (HasModNL or HasLocalization("POL")) then begin
    Report("Кассовая книга по записям операций",CashBookLatRClass,CashBookLatRn,0,modCL);
  end;

  Document("Приход",CLInRClass,CLInForm,CLInFClass,modCL);
  Document("Расход",CLOutRClass,CLOutForm,CLOutFClass,modCL);

  Maintenance("Утвердить приход и расход",OKCLVClass,OKCLMn,modCL);
  
/* modIN */
  
  if (HasModSO or HasLocalization("RUS") or HasLocalization("HRV")) then begin
    Register("Deliveries","Deliveries",SHVc,modIN);
  end;
  RegisterWS("Поступления","Поступления","Поступления",PUVc,modIN); 
  RegisterWS("Списания со склада","Списания со склада","Новое списание со склада",SDVc,modIN); 
  if (HasLocalization("PRT")) then begin 
    if (HasMultiLocations) then begin
      RegisterWS("Перемещения товаров","Перемещения товаров","Новое перемещение товаров",StockMovVc,modIN); 
    end;
    Register("Возвраты товаров","Возвраты товаров",RetVc,modIN);
    RegisterWS("Возвраты товаров поставщикам","Возвраты товаров поставщику","Новый возрат товаров поставщику",RetPUVc,modIN); 
    RegisterWS("Инвентаризации","Инвентаризации","Новая инвентаризация",StockTakeVc,modIN); 
  end else begin
    RegisterWS("Инвентаризации","Инвентаризации","Новая инвентаризация",StockTakeVc,modIN); 
    RegisterWS("Товары","Товары","Новый товар",INVc,modIN); 
//    Register("Контакты","Контакты",CUVc,modIN);
  end;
  if (HasMultiLocations) then begin 
    RegisterWS("Склады","Склады","Новые склады",LocationVc,modIN); 
//    Register("Перемещения","Перемещения",StockMovVc,modIN);
  end;

  if (HasLocalization("HRV")) then begin 
    Setting("Base Price Changes",BPCLClass,modIN);
  end;
  if (HasModNL) then begin
    Setting("Account Usage #Stock#",INAccTClass,modIN); 
  end;
  if (HasModCRM) then begin
    Setting("Контакты",CULClass,modIN);
  end;
  Setting("Cost Accounting",CostAccTClass,modIN);
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT")) then begin
    Setting("Группы товаров",ITLClass,modIN);
  end;
  if (HasLocalization("PRT")) then begin 
    Setting("Товары",INLClass,modIN);
  end;
  if (HasVarieties) then begin
    Setting("Item Varieties",VARLClass,modIN);
    Setting("Item Variety Groups",VARGLClass,modIN);
  end;
  if (HasNumberSeries) then begin
    if (HasModSO) then begin
      Setting("Серии номеров - Deliveries",SHSerTClass,modIN);
    end;
    if (HasNumberSeries and HasLocalization("PRT")) then begin 
      Setting("Серии номеров - Returned Goods",RetSerTClass,modIN);
      Setting("Серии номеров - Возвраты товаров поставщику",RetPUSerTClass,modIN);
    end;
    Setting("Серии номеров - Goods Receipts",PUSerTClass,modIN);
    Setting("Серии номеров - #Stock Depreciations#",SDSerTClass,modIN);
    if (HasNumberSeries and HasLocalization("PRT")) then begin 
      if (HasMultiLocations) then begin 
        Setting("Серии номеров - #Stock# Movements",StockMovSerTClass,modIN);
      end;
    end;
    Setting("Серии номеров - #Stocktaking#",StockTakeSerTClass,modIN);
  end;
  if (HasLocalization("PRT")) then begin 
    Setting("Optional features",OFTClass,modIN);
  end;
  if (HasMultiLocations) then begin 
    Setting("#Stock# Settings",MainStockTClass,modIN);
  end;
  if (HasVarieties) then begin
    Setting("Variety Masks",VARMaskTClass,modIN);
    Setting("Variety Sets",VARMasksLClass,modIN);
    Setting("Variety Settings",VarietyTClass,modIN);
    Setting("Variety Subsets",VARSubsetsLClass,modIN);
  end;

  if (HasModSO or HasLocalization("RUS")) then begin
    if (HasModSO) then begin 
      Document("Address Labels",AdrLabRClass,AdrLabForm,AdrLabFClass,modIN);
      Document("Delivery Notes",Sh1RClass,Sh1Form,Sh1FClass,modIN);
      Document("Freight Labels",SHLabRClass,SHLabForm,SHLabFClass,modIN);     
    end else begin
      if (HasLocalization("RUS")) then begin 
        Document("Delivery Notes",Sh1RClass,Sh1Form,Sh1FClass,modIN);
      end;
    end;
  end else begin
    if (HasLocalization("HRV")) then begin
      Document("Base Price Change",BasePriceChangeRClass,BPChangeForm,BasePriceChangeFClass,modIN);
      Document("Delivery Notes",Sh1RClass,Sh1Form,Sh1FClass,modIN);
    end;
  end;
  Document("Goods Receipt Labels",PULabRClass,PULabForm,PULabFClass,modIN);
  Document("Goods Receipts",PurchaseRClass,PurchaseForm,PurchaseFClass,modIN);
  Document("Item Labels",ItemLabelRClass,ItemLabelForm,ItemLabelFClass,modIN);
  if (HasModSO or HasLocalization("RUS")) then begin
    Document("Picking Lists",Sh2RClass,Sh2Form,Sh2FClass,modIN);
  end;
  Document("#Stock Depreciations#",SDRClass,SDForm,SDFClass,modIN);

  if (HasModPO or HasModSO) then begin
    Report("Deficiency List",PurRClass,PurRn,0,modIN);
  end;
  if (HasModSO) then begin
    Report("Delivery Journal",SHJRClass,ShipRn,0,modIN);
    Report("Delivery List",SHListRClass,ShipListRn,0,modIN);
  end;
  Report("Goods Receipt Journal",PUJRClass,PUJRn,0,modIN);
  Report("Item History",INrsRClass,INrsRn,0,modIN);
  Report("Item List",ArtRClass,ArtRn,0,modIN);
  Report("#Stock Depreciation# Journal",SDJRClass,StockDepRn,0,modIN);
  Report("#Stock# In Journal",StockJInRClass,StockInRn,0,modIN);
  Report("#Stock# List",INRClass,InvValRn,0,modIN);
  Report("#Stock# Out Journal",StockJOutRClass,StockOutRn,0,modIN);
  Report("#Stocktaking# Comparison",STCompRClass,STCompRn,0,modIN);
  Report("#Stocktaking# List",StockTakeRClass,StockTakeRn,0,modIN);
  Report("#Supplier#/Item Statistics",VeInRClass,VeInRn,0,modIN);

  Maintenance("#Stocktaking# Comparison",STCompVClass,STCompMn,modIN);

/*modPO*/

  RegisterWS("Заказы поставщикам","Заказы поставщикам","Новый заказ поставщику",POVc,modPO); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modPO); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modPO); 

  if (HasModIN) then begin
    Setting("Delivery Terms",ShipDealLClass,modPO);
  end;
  if (HasCategories) then begin
    Setting("#Supplier# Categories",VGLClass,modPO);
  end;
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Purchase Orders",POSerTClass,modPO);
  end;

  Report("Deficiency List",PurRClass,PurRn,0,modPO);
  Report("Outstanding Purchase Orders",POOrdStockRClass,POOrdStockRn,0,modPO);  
  Report("Purchase Order Journal",PurOrdJRClass,PurOrdJRn,0,modPO);

  Document("Purchase Orders",PORClass,POForm,POFClass,modPO); 
  
/* modSO */

  RegisterWS("Счета клиентам","Счета клиентам","Новый счёт клиенту",ORVc,modSO); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modSO); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modSO); 
  
  Setting("Delivery Terms",ShipDealLClass,modSO);
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Orders",ORSerTClass,modSO);
  end;
  
  Document("Orders",ORRClass,OrdForm,OrdFClass,modSO);
  
  if (HasModIN) then begin
    Report("Deliverable List",ShipableRClass,ShipableRn,0,modSO);
    Report("Delivery List",DeliveryRClass,DeliveryRn,0,modSO);
  end;
  Report("Order Journal",ORJRClass,OrdRn,0,modSO);
  Report("Ordered Items",OrdItemRClass,OrdItemRn,0,modSO);
  if (HasModIN) then begin
    Report("Outstanding Orders",OrderStockRClass,OrderStockRn,0,modSO);
  end;
  
  
  end;
  return;
end;
