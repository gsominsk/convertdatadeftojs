external function Boolean HasIncomeAndExpenseBook();
/* sasrusm.hal */
/* Standard POS by HansaWorld */
external function Boolean HasDeveloperMode();
external function Boolean HasLoyaltyCards();
external function Boolean HasModDI();
external function Boolean HasPersons();
external function Boolean HasModQT();
external function Boolean HasSerialNumbers();
external function Boolean HasModAT2();
external function Boolean HasModCL();
external function Boolean HasStandardCRM();
external function Boolean HasModExp();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();
external function Boolean HasModSO();
external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModSL();
external function Boolean HasModPL();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModRest();
external function Boolean HasModCRM();
external function Boolean HasPayroll();

external function Boolean HasAdvancedPricing();
external function Boolean HasBase2();
external function Boolean HasCategories();
external function Boolean HasContactClassification();
external function Boolean HasFormEditor();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLocalMachines();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNumberSeries();
external function Boolean HasOfficialSerNr();
external function Boolean HasObjects();
external function Boolean HasPriceLists();
external function Boolean HasPaymentGateway();
external function Boolean HasVarieties();
external function Boolean HasIntegratedNL();
external procedure SetProductTags();
external procedure LoadWindowTags();


begin
  Real h,v,l,vs;
  Boolean modsysf;  
  
  SetLangMode(LangRussian,"RUS",0);
  
  // this is for when it's a hardcoded list of options
  // we'll get some better solution for that later, but for now we
  // need one product folder per set of default options
  

  if (BuildProductCode=="StandardPOS") then begin
  
  if (HasLocalization("HRV,SGP,SRB,SVN")) then begin
    UseActivationCodes(true);
  end;
  SetProductTags;
  LoadWindowTags;
    
  if (HasStandardCRM) then begin
    Module("CRM","",730,modCRM);  
    Module("Календарь","",730,modCAL);  
    Module("Задачи","",730,modTASK);
  end;
  if (HasModCL) then begin
    Module("Кассовая книга","",730,modCL);
  end;
  if (HasStandardCommunicator and HasStandardCRM==false and HasStandardOrganizer==false) then begin 
    Module("Коммуникатор","",730,modCRM);
  end;
  if (HasModNL) then begin
    Module("Финансы","",730,modNL);
  end;
  if (HasStandardOrganizer and HasStandardCRM==false) then begin 
    Module("Органайзер","",730,modCRM);
  end;
  if (HasModPOS) then begin
    Module("Кассовый терминал","",730,modPOS);  
  end;
  if (HasModPL) then begin
    Module("Расчёты с поставщиками","",730,modPL);  
  end;
  if (HasModPO) then begin
    Module("Заказы поставщикам","",730,modPO);
  end;
  if (HasLocalization("PRT")) then begin
    if (HasModQT) then begin
      Module("Счета клиентам","",730,modQT);
    end;  
  end;
  if (HasModRest) then begin
    Module("Ресторан","",730,modRest);  
  end;
  if (HasModSL) then begin
    Module("Расчёты с клиентами","",730,modSL);
  end;
  if (HasModSO) then begin
    Module("Счета клиентам","",730,modSO);
  end;
  if (HasModIN) then begin
    Module("Склад","",730,modIN);
  end;
  if (HasModDI) then begin
    Module("Ценообразование","",730,modDI);
    end;  
  modsysf = HasStandardCRM or HasModQT or HasModPL or HasModSL or HasModSO or HasModIN or HasFormEditor or HasMultiCurrency or HasBase2;
  modsysf = modsysf or HasObjects or HasStandardCRM or HasStandardCommunicator or HasStandardOrganizer;
  if (modsysf) then begin
  Module("Система","",730,modSY);
  end;
   
/* modSY */
  // debug
  if (HasDeveloperMode) then begin
    Setting("Cloud Services",EnabServerTClass,modSY);
    Setting("Configuration",ModulesTClass,modSY);
    Setting("Current License Flags",CurLicensesClass,modSY);
    Setting("Internet Enablers",InternetEnablerTClass,modSY);
    Setting("Licenses",LicensesLClass,modSY);
    RegisterWS("Почтовые ящики","Почтовые ящики","Новый почтовый ящик",ConferenceWClass,modSY); 
    Setting("My IP Address",MyIPAddrTClass,modSY);
    Setting("Program Mode",ProgramStatusTClass,modSY);
    Setting("Services Cache",ServiceCacheLClass,modSY);
    Setting("Std Registration Data",StdRegDataWClass,modSY);
  end;
  // end debug code

  if ((ClientMode and LicenseMode==kLicenseModeServer) or HasPersons or HasLocalization("HRV") or HasDeveloperMode) then begin
    RegisterWS("Сотрудники","Сотрудники","Новый сотрудник",UserVc,modSY); 
  end;
  if (HasFormEditor) then begin
  if (GuiType!=kGuiiPhone) then begin
      RegisterWS("Формы","Формы","Новая форма",DocVc,modSY); 
    end;
    RegisterWS("Стили","Стили","Новый стиль",StyleVc,modSY); 
  end;
  if (HasMultiCurrency or HasBase2) then begin
    RegisterWS("Валюты","Валюты","Новая валюта",CurncyCodeVc,modSY);  
  end;
  if (HasMultiCurrency) then begin
    RegisterWS("Курсы обмена","Курсы обмена","Курс обмена",ERVc,modSY); 
  end;

  if (HasStandardCRM or HasStandardCommunicator or HasStandardOrganizer) then begin
    Setting("Группа доступа",AccessLClass,modSY);
  end;
  if (HasStandardCRM or HasStandardCommunicator or HasStandardOrganizer) then begin
    Setting("Активные пользователи",ListUsersClass,modSY);
  end;
  if (HasBase2) then begin
    Setting("Основная валюта",BaseCurTClass,modSY);
    Setting("Курсы основных валют",BaseERLClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Brazilian E-invoice Types",BrazilEInvTypeLClass,modSY);
  end;
  if (HasStandardCRM or HasStandardCommunicator or HasStandardOrganizer) then begin
    Setting("Компании",CompaniesTClass,modSY);
    Setting("Формат даты и чисел компании",SysFormatTClass,modSY);
  end;
  Setting("Информация о компании",CYWClass,modSY);
  if (ClientMode) then begin
    switch (LicenseMode) begin
      case kLicenseModeClient:
      case kLicenseModeServer:
//        Setting("Configuration",ModulesTClass,modSY);
        Setting("Конфигурация пользователей",ConfigureUsersTClass,modSY);
    end;
  end;
  if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
    Setting("Конвертации - Мастер",ConvMasterTClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Районы",DistrictLClass,modSY);
  end;

  if (HasModNL) then begin
    Setting("Финансовые года",YearTClass,modSY);
  end;
  if (HasItemGroups or HasLocalization("PRT")) then begin
    Setting("Группы товаров",ITLClass,modSY);
  end;
  if (HasKPIs) then begin
    Setting("КПЭ",KPIDefLClass,modSY);
  end;
  if (HasLanguages) then begin
    Setting("Языки",LangTClass,modSY); 
  end;
  if (HasNumberSeries or HasLocalization("HRV,LVA")) then begin
    Setting("Оффиц.серии номеров",LegalInvNrTClass,modSY);
  end;  
  if (HasModNL) then begin
    Setting("Locking",DBLockTClass,modSY);
  end;
  
/*
  if (UseAppStoreEnabler==false) then begin
    Setting("Интернет ключи",InternetEnablerTClass,modSY);
  end;
*/
  if (HasLocalization("BRA")) then begin
    Setting("Municipalities",MunicipalityLClass,modSY);
  end;
  if (HasObjects and HasModNL==false) then begin
    Setting("Объекты",ObjLClass,modSY);
    Setting("Типы объектов",OTLClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Типы операций",OperationTypeLClass,modSY);
  end;
  if (HasModSL==false) then begin
    Setting("Условия оплаты",PDLClass,modSY);
    Setting("Сотрудники",UserLClass,modSY);
  end;
//  if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
//    Setting("Курсовая прибыль/убыток",NLRateTClass,modSY);
//  end;

  Setting("Отчётные периоды",PeriodTClass,modSY);
  Setting("Единицы",UnitLClass,modSY);
  if (HasLanguages) then begin
    Setting("Значения в тексте",LangNrLClass,modSY);
  end;
  if (HasModNL==false) then begin
    Setting("Код НДС",VATCodeTClass,modSY); 
  end;
  //Setting("Values in Text",LangNrLClass,modSY);
  //Setting("Test Function Tags",WindowTagTestClass,modSY);
  
  Report("Информация о компании",CompInfoRClass,CompInfoRn,0,modSY);

  Export("Базовые регистры",GBaseEClass,GBaseEn,modSY);
  //Export("Company Text Backup",TBEClass,CompanyTBEn,modSY);
  if (GuiType!=kGuiiPhone) then begin
    Export("Текстовая копия базы данных",TBEClass,DatabaseTBEn,modSY);
  end;
  if (HasLocalization("HRV")) then begin
    Export("Register Export",ExpRegEClass,ExpRegEn,modSY);
  end;
  //Export("Remote Backup",TBRemoteEClass,RemoteTBEn,modSY);
  Export("Базовые регистры товара",GItemBaseEClass,GItemBaseEn,modSY);
  if (HasModSL==false) then begin
  if (HasLocalization("PRT")) then begin
    Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modSY);
    end;  
  end;    
  if (HasLocalization("LTU")) then begin
    Export("#S/L# #VAT# Invoices (Lithuania)",LitVATRegIVEClass,LitVATRegIVEn,modSY);
  end;
  Export("Системные данные",SysEClass,SysEn,modSY);
  Export("Регистры операций",GTransEClass,GTransEn,modSY);
  Export("Регистры операций (период)",GTrans2EClass,GTrans2En,modSY);
  
  Import("Автоматический",0,FullyAutIn,modSY);
  Import("Найти файл...",0,AutIn,modSY);
  Import("Удалённая резервная копия",RemoteInIClass,RemoteIn,modSY);

  if (HasIntegratedNL) then begin
    Maintenance("Создать проводку",TransGenVClass,GenTransMn,modSY); 
  end;
//  Maintenance("Restore Application",ResetDBWClass,0,modSY);
  Maintenance("Послать приглашение новому пользователю",SubscriptionInvitationVClass,SubscriptionInvitationMn,modSY);

/* modSL */
  
  RegisterWS("Счета-фактуры","Счета-фактуры","Новый счёт-фактура",IVVc,modSL); 
  RegisterWS("Платежи","Платежи","Новый платёж",IPVc,modSL); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modSL); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modSL); 
  if (HasPriceLists) then begin
    RegisterWS("Цены","Цены","Новая цена",PLVc,modSL); 
  end;
  if (HasLocalization("HRV")) then begin
    RegisterWS("Коммерческие предложения","Коммерческие предложения","Новое комм. предложение",QTVc,modSL); 
  end;
  
  if (HasModNL) then begin
    Setting("Настройки записей операций",AccTClass,modSL);
  end;
  if (HasContactClassification) then begin
    Setting("Классификации контактов",CClassLClass,modSL);
  end;
  if (HasCategories) then begin
  	Setting("Категории клиентов",CCatLClass,modSL);
  end;	
//  Setting("Electronic Invoices Customers Data",EInvCULClass,modSL);
//  Setting("Electronic Invoices Settings",EInvoiceTClass,modSL);
//  Setting("Electronic Invoices Queue",EInvoiceQueLClass,modSL);
//  Setting("Electronic Record Statuses",ERecordStatusLClass,modSL);
  if (HasModNL and HasModPL and HasMultiCurrency) then begin
    Setting("Внутренние сч-ф",IntIVLClass,modSL);
  end;

  if (HasModNL==false) then begin
    Setting("Настройки сч-фактур",AccTClass,modSL);
  end;
  if (HasItemGroups or HasLocalization("PRT")) then begin
    Setting("Группы товаров",ITLClass,modSL);
  end;
  if (HasModSL and HasLocalization("PRT")) then begin
    Setting("Item Group Withholdings",WHITLClass,modSL);
  end;
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Сч/ф клиентов",IVSerTClass,modSL);
    Setting("Серии номеров - Платежи",IPSerTClass,modSL);
    if (HasModNL) and (HasLocalization("POL")) then begin
      Setting("Серии номеров - Коррекции НДС книги продаж",VATIVSerTClass,modSL);
    end;
  end;
  Setting("Методы оплаты",PMTClass,modSL);
  Setting("Условия оплаты",PDLClass,modSL);
  if (HasPriceLists) then begin
    Setting("Прейскуранты",PLDefLClass,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Setting("Reference Number Settings",CalcRefTClass,modSL);
  end;
  Setting("Sales Invoice Settings",IVTTClass,modSL);     //!!TRANSLATE
  Setting("Единицы измерения",UnitLClass,modSL);
  if (HasLocalization("POL")) and (HasModNL) then begin
    Setting("Коррекции НДС, расчеты с кл.",VATIVLClass,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Setting("Коды НДС",VATCodeTClass,modSL); 
  end;  
  if (HasLocalization("PRT") and (HasModPL or HasModSL)) then begin
    Setting("Withholding Calculation Formulae",WHCalcFormLClass,modSL);
    Setting("Withholding Taxes",WHTaxTClass,modSL);
  end;    

  Document("ПКО",KIVRClass,CashInvForm,CashFClass,modSL);
  Document("Кредит-нота",CIVRClass,CredInvForm,CredFClass,modSL);
  Document("Этикетки клиентов",CuLabRClass,CuLabForm,CuLabFClass,modSL);
  if (HasLocalization("POL")) then begin
    Document("Debtors Letter",DebtLetRClass,DebtorLetForm,DebtLetFClass,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Document("Interest Invoices",IIVRClass,IIInvForm,IIFClass,modSL);
  end;
  Document("Счета-фактуры",IVRClass,InvForm,InvFClass,modSL); 
  Document("Ведомость неоплаченных счетов-фактур",ARSRClass,ARSForm,ARSFClass,modSL);
  Document("Ведомость расчетов с клиентами",CuPerRClass,CuPerForm,CuPerFClass,modSL);
  if (HasLocalization("POL")) then begin
    Document("Проформа счет-фактуры",Inv1RClass,Inv1Form,Inv1FClass,modSL);
  end;
  if (HasLocalization("HRV")) then begin
    Document("Quotations",QTRClass,QTForm,QTFClass,modSL);
  end;
  Document("Платеж",IPDRClass,IPDForm,IPDFClass,modSL);
  if (HasLocalization("POL")) then begin
    Document("Reminders",RemRClass,RemForm,RemFClass,modSL);
  end;

  if (HasLocalization("HRV")) then begin
    Report("Consumption Taxes Summary",ConsTaxSumRClass,ConsTaxSumRn,0,modSL);
  end;
  Report("Список контактов",CURClass,CustRn,0,modSL);
  Report("Статистика Клиент/Товар",CuArtSTRClass,CuArtSTRn,0,modSL);
  Report("Статистика по клиенту",CustSTRClass,CustSTRn,0,modSL);
  if (HasLocalization("HRV")) then begin
    Report("GP, Invoices",IVGPRClass,IVGPRn,0,modSL);
  end;
//  Report("Electronic Invoice Status",HTSStatIVRClass,HTSStatIVRn,0,modSL);
  Report("Журнал счетов-фактур",IVJRClass,InvoiceRn,0,modSL);
  Report("Список товаров",ArtRClass,ArtRn,0,modSL);
  Report("Статистика по товару",ArtSTRClass,ArtSTRn,0,modSL);
  Report("Журнал неоплаченных счетов-фактур",ARS2RClass,ARS2Rn,0,modSL);
  Report("Ведомость расчетов с клиентами",CuPer2RClass,CuPerRn,0,modSL);
  if (HasPriceLists) then begin
    Report("Прейскуранты",PriceRClass,PriceRn,0,modSL);
  end;
  if (HasLocalization("HRV")) then begin
    Report("Журнал коммерческих предложений",QTJRClass,QTJRn,0,modSL);
  end;
  Report("Прогноз платежей",IPProgRClass,IPProgRn,0,modSL);
  Report("Журнал платежей",IPRClass,IPRn,0,modSL);
  Report("Книга продаж",ARRClass,ARRn,0,modSL);
  if (HasLocalization("PRT")) then begin
    Report("Статистика по кодам НДС",SLVATRClass,SLVATRn,0,modSL);
  end;
  if (HasLocalization("POL")) and (HasModNL) then begin
    Report("#VAT# Report Sales",SLVATRepRClass,SLVATRepRn,0,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Report("#VAT# Report Sales (Lithuania)",SLVATLitRClass,SLVATLitRn,0,modSL);  
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Customer Sales",RealCustRClass,RealCustRn,0,modSL);
  end;
  
  if (HasModNL) then begin
    if (HasLocalization("PRT")) then begin
      Maintenance("Transfer to Bad Debtors",BadCUVClass,BadCUMn,modSL);
    end;
  end;

  if (HasLocalization("LTU")) then begin
    Export("#S/L# #VAT# Invoices",LitVATRegIVEClass,LitVATRegIVEn,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Export("SAFT",PortTaxXmlEClass,PortTaxXmlEn,modSL);
  end;  

/* modPL */

  RegisterWS("Счета-фактуры поставщика","Счета-фактуры поставщика","Новый счёт-фактура поставщика",VIVc,modPL); 
  RegisterWS("Платежи","Платежи","Новый платёж",OPVc,modPL); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modPL); 

  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Setting("Настройки записей операций",APAccTClass,modPL);
  end;
  if (HasLocalization("AUS,ESP,FIN,GBR,NOR,SWE")) then begin
    Setting("Банковские файлы",BankFileTClass,modPL);
  end;
  if (HasNumberSeries) then begin
    Setting("Серии номеров - сч/ф пост.",VISerTClass,modPL);
    Setting("Серии номеров - платежи",OPSerTClass,modPL);
  if (HasModNL or HasIncomeAndExpenseBook) and (HasLocalization("POL,HRV")) then begin
      Setting("Серии номеров - #VAT# Corrections #P/L#",VATVISerTClass,modPL);
    end;
  end;
  Setting("Методы оплаты",PMTClass,modPL);
  Setting("Условия оплаты",PDLClass,modPL);
  if (HasCategories) then begin
  	Setting("Категория поставщика",VGLClass,modPL);
  end;
  if (HasModNL or HasIncomeAndExpenseBook) and (HasLocalization("POL,HRV")) then begin
    Setting("Коррекции НДС книги покупок",VATVILClass,modPL);
    Setting("#VAT# Correction #P/L# Types",VATVITypeTClass,modPL);
  end;
  if (HasLocalization("PRT,ITA")) then begin
    Setting("Withholding Calculation Formulae",WHCalcFormLClass,modPL);
    Setting("Withholding Taxes",WHTaxTClass,modPL);
  end;  
  if (HasLocalization("ESP,FIN,RUS")) then begin
    Setting("Banks",BankLClass,modPL);
  end;  

  if (HasLocalization("LTU,POL")) then begin
    Document("Открыть список неоплаченных счетов поставщика",APSRClass,APSForm,APSFClass,modPL);
  end;
  Document("Платежки",OPDRClass,OPDForm,OPDFClass,modPL);
  Document("Список платежей",OPRClass,OPForm,0,modPL);
  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Document("Сч/ф поставщика",VIRClass,VIForm,VIFClass,modPL);
  end;

  if (HasLocalization("LTU")) then begin
    Report("Ведомость неоплаченных сч/ф поставщика",APS2RClass,APS2Rn,0,modPL);
  end;
  Report("Прогноз платежей",OPProgRClass,OPProgRn,0,modPL);
  Report("Журнал платежей",OPJRClass,OPJRn,0,modPL);
  Report("Ведомость расчетов с поставщиками",VePer2RClass,VePerRn,0,modPL);
  if (HasLocalization("LVA")) then begin
    Report("Prepayment History #P/L#",PerPayHisPLRClass,PerPayHisPLRn,0,modPL);
  end;
  Report("Журнал сч-ф поставщиков",VIJRClass,VIJRn,0,modPL);
  Report("Книга покупок",APRClass,APRn,0,modPL);
  Report("Список поставщиков",VERClass,VERn,0,modPL);
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("LVA,POL")) and (HasModNL or HasIncomeAndExpenseBook) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# #Supplier# Purchases",RealSuppRClass,RealSuppRn,0,modPL); 
  end;
  if (HasLocalization("HND")) then begin
    Report("#VAT# Report Purchases (Honduras)",PLVATHonRClass,PLVATHonRn,0,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Report("#VAT# Report Purchases (Lithuania)",PLVATLitRClass,PLVATLitRn,0,modPL);
  end;

  if (HasLocalization("AUS,ESP,FIN,GBR,NOR,SWE")) then begin
    Export("Банковский файл",MPEClass,MPEn,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#P/L# #VAT# Invoices (Lithuania)",LitVATRegVIEClass,LitVATRegVIEn,modPL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#P/L# Latvian #VAT# Report",PLVAT1ExpEClass,PLVAT1En,modPL);
    Export("#VAT# Purchases (Latvia)",LatVATPurchasesEClass,LatVATPurchasesEn,modPL);
  end;
    
  if (HasModNL) and (HasLocalization("HRV")) then begin
    Maintenance("Create #VAT# Corrections #P/L#",VATVIVClass,VATVIMn,modPL);
  end; 
  
  //Export("Банковский файл",MPEClass,MPEn,modPL); // Local functionality

  RegisterWS("Приходы в кассу","Приходы в кассу","Новый приход",CLInVc,modCL); 
  RegisterWS("Расходы из кассы","Расходы из кассы","Новый расход",CLOutVc,modCL); 
  if (HasModSL and HasLocalization("POL")==false) then begin
    RegisterWS("Платежи","Платежи","Новый платёж",IPVc,modCL); 
  end;
  if (HasModPL and HasLocalization("POL")==false) then begin
    RegisterWS("Платежи","Платежи","Новый платёж",OPVc,modCL); 
  end;
  if (HasModExp) then begin
    RegisterWS("Выплату персоналу","Выплату персоналу","Новая выплата персоналу",PPVc,modCL); 
  end;
  
  Setting("Настройки кассовой книги",MainCLTClass,modCL);
  Setting("Expense Accounts",CLCorspLClass,modCL);
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Cash In",CLInSerTClass,modCL);
    Setting("Серии номеров - Cash Out",CLOutSerTClass,modCL);
  end;
  Setting("Способы платежей",PMTClass,modCL);
  
  Report("Кассовая книга",CLIORClass,CashBRn,0,modCL);
  if (HasLocalization("LTU")) then begin
    Report("Cash Book (Lithuania)",CashBookLitRClass,CashBookLitRn,0,modCL);
  end;
  Report("Журнал прихода в кассу",CLInJRClass,CLInJRn,0,modCL);  
  Report("Журнал расходов из кассы",CLOutJRClass,CLOutJRn,0,modCL);  
  if (HasIntegratedNL) then begin
    Report("Кассовая книга по записям операций",CashBookLatRClass,CashBookLatRn,0,modCL);
  end;

  Document("Приход",CLInRClass,CLInForm,CLInFClass,modCL);
  Document("Расход",CLOutRClass,CLOutForm,CLOutFClass,modCL);

  Maintenance("Утвердить приход и расход",OKCLVClass,OKCLMn,modCL);

/* modNL */

  if (HasModNL==false) then begin
    if (HasIncomeAndExpenseBook) then begin
      RegisterWS("Счета","Счета","Новый счёт",AccVc,modNL); 
      RegisterWS("Записи операций","Записи операций","Новая запись",TRVc,modNL); 

      Setting("Fiscal Years",YearTClass,modNL);
      Setting("Income & Expense Book",IncExpBookLClass,modNL);
      if (HasNumberSeries) then begin
        Setting("Серии номеров - Transactions",TRSerTClass,modNL);
      end;
      Setting("Sub Systems",TRGenTClass,modNL);
      Setting("Коды НДС",VATCodeTClass,modNL);
      
      Report("Income & Expense Book",IncExpBookRClass,IncExpBookRn,0,modNL);
    end;
  end else begin
    RegisterWS("Записи операций","Записи операций","Новая запись операций",TRVc,modNL); 
    if (HasLocalization("AGO,PRT")) then begin
      RegisterWS("Симуляции","Симуляции","Новая симуляция",SMVc,modNL);   
  end;
//  Register("Выверка счетов","Выверка счетов",BankRecWClass,modNL);
    if (HasLocalization("AUS")) then begin
      Register("Выверка счетов","Выверка счетов",BankRecWClass,modNL);
    end;
    if (HasLocalization("AUS")==false) then begin
      RegisterWS("Начальное сальдо","Начальное сальдо","Новое начальное сальдо",FBVc,modNL); 
    end;
    RegisterWS("Счета","Счета","Новый счёт",AccVc,modNL); 


  if (HasLocalization("AGO,POL,PRT")) then begin
    Setting("Account Transfers",AccTransLClass,modNL);
  end;
  Setting("Финансовые годы",YearTClass,modNL);
    if (HasIncomeAndExpenseBook) then begin
      Setting("Income & Expense Book",IncExpBookLClass,modNL);
    end;  
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Операции",TRSerTClass,modNL);
  end;
  if (HasObjects) then begin
    Setting("Объекты",ObjLClass,modNL);
    Setting("Типы объектов",OTLClass,modNL);
  end;
//    if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
//      Setting("Rate Gain/Loss",NLRateTClass,modNL);
//    end;  
  Setting("Настройки отчетов",Rs2WClass,modNL);
  Setting("Подсистемы",TRGenTClass,modNL);
    Setting("Контрольные счета записей подсистем",SLAccTClass,modNL);
    if (HasLocalization("HRV,LVA")) then begin
      Setting("Tax Reports",TaxRepLClass,modNL);
    end;
    if (HasLocalization("BRA,HRV,LVA")) then begin
      Setting("Tax Rules",TaxRulesLClass,modNL);
      Setting("Tax Templates",TaxTemplateLClass,modNL);
      Setting("Transaction Settings",TrTClass,modNL);
  end;
  if (HasLocalization("KEN")) then begin
    Setting("Налоговые шаблоны",TaxTemplateLClass,modNL);
  end;
  Setting("Коды НДС",VATCodeTClass,modNL);
  
    if (HasLocalization("HRV,LVA")) then begin
      Document("Tax Report",TaxDocRClass,TaxRepForm,TaxRepFClass,modNL);
    end;
  Document("Проводки",TRRClass,TRForm,TRFClass,modNL);

  Report("Выверка счетов",ACReconRClass,ACRecRn,0,modNL);

  if (HasLocalization("AGO,BRA,POL,PRT")) then begin
    Report("Аналитический баланс",MBARClass,MBARn,0,modNL);
  end;
  Report("Баланс",BalRClass,BalRn,UserDefRepDClass,modNL);
  Report("План счетов",AccListRClass,AccListRn,0,modNL);
  Report("Лист коррекций",CorrRClass,CorrRn,0,modNL);
    if (HasLocalization("LTU,LVA")) then begin
      Report("Corresponding Accounts",CorspRClass,CorspRn,0,modNL);
    end;
    if (HasMultiCurrency) then begin
      Report("Currency A/C Rate Change",NLRateRClass,NLRateRn,0,modNL);
    end;
    if (HasIncomeAndExpenseBook) then begin
      Report("Income & Expense Book",IncExpBookRClass,IncExpBookRn,0,modNL);
    end;
    if (HasMultiCurrency) then begin
      Report("Multicurrency Accounts Rate Difference",MultiCurAccRClass,MultiCurAccRn,0,modNL);
    end;
  Report("Главная книга",MainRClass,MainRn,0,modNL);
  Report("Прибыли и убытки",ResRClass,ResRn,UserDefRepDClass,modNL);
    if (HasLocalization("LVA")) then begin
      Report("Tax Calculations", Tax100Class,Tax100Rn,0,modNL);
      Report("Test Corresponding Rules",CorstRClass,CorstRn,0,modNL);
    end;
  Report("Журнал проводок",TransRClass,TransRn,0,modNL);
  Report("Проверочный баланс",SBRClass,TrialRn,0,modNL);
  if (HasLocalization("POL,PRT")==false) then begin
    Report("Отчёт по НДС, сводный",ALLVATRClass,ALLVATRn,0,modNL);
  end;
  if (HasLocalization("POL")==false) then begin
    Report("#VAT# Report",VATRClass,VAT2Rn,UserDefRepDClass,modNL);
  end;

  if (HasLocalization("FRA")) then begin
      Export("FEC Export",FrenchFECEClass,FrenchFECEn,modNL);
    end;
    if (HasLocalization("SGP")) then begin
      Export("IRAS audit File",GenIRASEClass,IRASAuditEn,modNL);
    end;
  Export("Ежемесячные балансы",MBEClass,MBEn,modNL);
  if (HasLocalization("SWE")) then begin
    Export("SIE (Swedish Export/Import)",SieEClass,SieEn,modNL);
  end;
  Export("Проверочный баланс",SBEClass,SBEn,modNL);
  if (HasLocalization("PRT")) then begin
    Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modNL);
  end;  
      if (HasLocalization("LTU")) then begin
      Export("Периодическая декларация НДС (Литва)",LTUVATEClass,LTUVATEn,modNL);
    end;
  
  if (HasLocalization("SWE")) then begin
    Import("SIE (Swedish Export/Import)",0,SieIn,modNL);
  end;
  
  if (HasLocalization("AGO,POL,PRT")) then begin
    Maintenance("Account Balance Transfer",AccTransVClass,AccTransMn,modNL);
    end;
  end;
    
/*modPOS*/

  RegisterWS("Сч/ф кассового терминала","Сч/ф кассового терминала","Новый сч/ф кассового терминала",NPTSIVCashLClass,modPOS); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modPOS); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modPOS); 
  if (HasItemGroups) then begin
    RegisterWS("Группы товаров","Группы товаров","Новая группа товаров",ITVc,modPOS); 
  end;

  if (modsysf==false) then begin
    if (HasLocalization("BRA")) then begin
      Setting("Вида счетов (Бразилия)",BrazilEInvTypeLClass,modPOS);
      Setting("Районы",DistrictLClass,modPOS);
      Setting("Муниципалитеты",MunicipalityLClass,modPOS);
      Setting("Виды операций",OperationTypeLClass,modPOS);
    end;
  end;
  if (HasLocalization("HRV")) then begin
    Setting("Cash Events",CashLClass,modPOS);
  end;
  if (modsysf==false) then begin
  Setting("Информация о компании",CYWClass,modPOS); 
  end; 
  if (ClientMode) then begin
    switch (LicenseMode) begin
      case kLicenseModeClient:
          case kLicenseModeServer:
//        Setting("Configuration",ModulesTClass,modPOS);
        Setting("Конфигурация пользователей",ConfigureUsersTClass,modPOS);
    end;
  end;
  if (HasLocalization("BRA,ZWE")) then begin
    Setting("#VAT# коды, фискальный принтер (Зимбабве)",ZimFiscalPrinterVATCodeTClass,modPOS);
  end;
  if (HasItemClassification) then begin
  	Setting("Классификация товаров",DILClass,modPOS);
  end;
  if (HasItemGroups or HasLocalization("PRT")) then begin
  	Setting("Группы товаров",ITLClass,modPOS);
  end;
  Setting("Настройки POS-инвойсов",AccTClass,modPOS);
  if (modsysf==false) then begin
    if (HasKPIs) then begin
      Setting("КПЭ",KPIDefLClass,modPOS);
    end;
    if (HasLanguages) then begin
      Setting("Языки",LangTClass,modPOS); 
    end;
    Setting("Значения в тексте",LangNrLClass,modPOS);
  end;
  if (modsysf==false) then begin
    if (HasNumberSeries or HasLocalization("HRV,LVA")) then begin
      Setting("Официальная нумерация счетов",LegalInvNrTClass,modPOS);
    end;  
  end;
  if (HasLocalMachines) then begin
    Setting("Локальная машина",LocalMachineTClass,modPOS);
  end;
  if (HasLoyaltyCards) then begin
    Setting("Программы лояльности накопительной карты",LCMemberLevelLClass,modPOS); 
    Setting("Структура программы лояльности накопительной карты",LCMLevelSetTClass,modPOS); 
    Setting("Накопительные баллы по складам",LoyaltyPointsLClass,modPOS);  
    Setting("Накопительные баллы по складам",LocLoyaltyPointsLClass,modPOS); 
    Setting("Использование накопительных баллов",LoyPointRedeemLClass,modPOS); 
    Setting("Использование накопительных баллов по магазинам",LocLoyPointRedeemLClass,modPOS); 
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Setting("Валюты платежей",POSCurrenciesTClass,modPOS);
  end;    
  if (HasPaymentGateway) then begin
    Setting("Каналы платежей",CCAccountIDLClass,modPOS); 
  end;    
  Setting("Методы оплат",PMTClass,modPOS); 
  Setting("Кнопки ПОС",POSButtonsLClass,modPOS);
  if (HasLocalization("HRV")) then begin
    Setting("Настройки ПОС",CashierDefTClass,modPOS);
  end;
  if (modsysf==false) then begin
  Setting("Отчётные периоды",PeriodTClass,modPOS);
  end;	
  if (HasModNL==false) then begin
    if (HasLocalization("BRA,HRV")) then begin
      Setting("Налоговые шаблоны",TaxTemplateLClass,modPOS);
      Setting("Transaction Settings",TrTClass,modPOS);
    end;
    if (HasLocalization("KEN")) then begin
      Setting("Налоговые шаблоны",TaxTemplateLClass,modPOS);
    end;
  end;
  Setting("Единицы",UnitLClass,modPOS);   
  Setting("Коды НДС",VATCodeTClass,modPOS); 
  if (HasLocalization("HRV,SVN,SRB")) then begin
    Setting("XML Schema Definitions",XMLExportLClass,modPOS);
  end;

  Document("ПОС Инвойсы",IVCashRClass,InvCashForm,IVCashFClass,modPOS);

//  Report("Cash Receipts",CashReceiptRClass,CashReceiptRn,0,modPOS);
    Report("Снятие кассы",CashupRClass,CashupRn,0,modPOS);
  if (HasLocalization("HRV")) then begin
    Report("Consumption Taxes Summary",ConsTaxSumRClass,ConsTaxSumRn,0,modPOS);
  end;
  if (HasModIN) then begin
    Report("Валовая прибыль, ПОС инвойсы", PIVGPRClass,PIVGPRn,0,modPOS);
  end;
  Report("Список товаров",ArtRClass,ArtRn,0,modPOS);
  Report("Статистика товара",ArtSTRClass,ArtSTRn,0,modPOS);
  if (HasIntegratedNL) then begin
    Report("Перевод в гл. книгу, нал. инвойсы", TransGenPOSRClass,TransGenPOSRn,0,modPOS);
  end;
//  Report("GP, POS Invoices", PIVGPRClass,PIVGPRn,0,modPOS);
  if (HasLoyaltyCards) then begin    
    Report("Loyalty Card Statement",LoyaltyCardRClass,LoyaltyCardRn,0,modPOS); //!!TRANSLTE
  end;
  Report("Журнал ПОС инвойсов",IVCJRClass,InvCashRn,0,modPOS);
  if (HasVarieties) then begin
    Report("Запрос варианта",VarEnqRClass,VarEnqRn,0,modPOS);
  end;
  
  if (HasIntegratedNL) then begin
    Maintenance("Снятие кассы",CashupVClass,CashupMn,modPOS);
  end;
  if (HasLocalization("HRV")) then begin
    Maintenance("Счета без официального номера",XMLExportVClass,XMLExportMn,modPOS);
  end;  
  if (HasModIN) then begin
    Maintenance("Обновить склад",POSUpdStockVClass,POSUpdStockMn,modPOS);
  end;
  if (modsysf==false) then begin
//    Maintenance("Restore Application",ResetDBWClass,0,modPOS);
  end;


  if (modsysf==false) then begin
    Export("Base Registers",GBaseEClass,GBaseEn,modPOS);
    Export("Item Base Registers",GItemBaseEClass,GItemBaseEn,modPOS);
    if (GuiType!=kGuiiPhone) then begin
      Export("Database Text Backup",TBEClass,DatabaseTBEn,modPOS);
    end;
    if (HasLocalization("HRV")) then begin
      Export("Register Export",ExpRegEClass,ExpRegEn,modPOS);
    end;
    //Export("Remote Backup",TBRemoteEClass,RemoteTBEn,modPOS);
    if (HasLocalization("LTU")) then begin
      Export("#S/L# #VAT# Invoices (Lithuania)",LitVATRegIVEClass,LitVATRegIVEn,modPOS);
    end;
    Export("System Data",SysEClass,SysEn,modPOS);
    Export("Transaction Registers",GTransEClass,GTransEn,modPOS);
    Export("Transaction Registers (period)",GTrans2EClass,GTrans2En,modPOS);
  end;
  if (HasModSL==false) then begin
  if (HasLocalization("PRT")) then begin
    Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modPOS);
    end;  
  end;  

  if (modsysf==false) then begin
    Import("Автоматически",0,FullyAutIn,modPOS);
    Import("Найти файл...",0,AutIn,modPOS);
    Import("Удалённая резервная копия",RemoteInIClass,RemoteIn,modPOS);
  end;

/* modSO */
  
  RegisterWS("Счета клиентам","Счета клиентам","Новый счёт клиенту",ORVc,modSO); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modSO); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modSO); 
  if (HasItemGroups or HasLocalization("PRT")) then begin
    RegisterWS("Группы товаров","Группы товаров","Новая группа товаров",ITVc,modSO); 
  end;
  if (HasPriceLists) then begin
    RegisterWS("Цены","Цены","Новая цена",PLVc,modSO); 
  end;

  if (HasModIN) then begin
    Setting("Условия доставки",ShipDealLClass,modSO);
  end;
  if (HasModSL) then begin
    Setting("Взносы",DownPayTClass,modSO);
  end;
  if (HasModSL==false) then begin
    Setting("Настройки сч/ф",AccTClass,modSO);
  end;
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Счета",ORSerTClass,modSO);
  end;
  Setting("Условия оплаты",PDLClass,modSO);
  Setting("Планируемая доставка",PlanDeliveryTClass,modSO);
  Setting("Единицы",UnitLClass,modSO);
  
  Document("Счета клиентам",ORRClass,OrdForm,OrdFClass,modSO);
  
  if (HasModIN) then begin
    Report("Список к отгрузке",ShipableRClass,ShipableRn,0,modSO);
    Report("Список отгрузок",DeliveryRClass,DeliveryRn,0,modSO);
  end;
  Report("Прибыль по счетам",ORGPRClass,ORGPRn,0,modSO);
  Report("Список товаров",ArtRClass,ArtRn,0,modSO);
  Report("Журнал счетов",ORJRClass,OrdRn,0,modSO);
  Report("Заказанные товары",OrdItemRClass,OrdItemRn,0,modSO);
  if (HasModIN) then begin
    Report("Невыполненные заказы",OrderStockRClass,OrderStockRn,0,modSO);
  end;
  
/* modIN */
  
  if (HasModSO) then begin
    Register("Отгрузки","Отгрузки",SHVc,modIN);
  end;
  RegisterWS("Поступления","Поступления","Поступления",PUVc,modIN); 
  RegisterWS("Списания со склада","Списания со склада","Новое списание со склада",SDVc,modIN); 
  if (HasLocalization("PRT")) then begin 
    Register("Возвраты","Возвраты",RetVc,modIN);
    RegisterWS("Возвраты товаров поставщикам","Возвраты товаров поставщику","Новый возрат товаров поставщику",RetPUVc,modIN); 
    RegisterWS("Инвентаризации","Инвентаризации","Новая инвентаризация",StockTakeVc,modIN); 
  end else begin
    RegisterWS("Инвентаризации","Инвентаризации","Новая инвентаризация",StockTakeVc,modIN); 
    RegisterWS("Товары","Товары","Новый товар",INVc,modIN); 
    RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modIN); 
  end;
  if (HasMultiLocations) then begin 
    RegisterWS("Склады","Склады","Новые склады",LocationVc,modIN); 
    RegisterWS("Перемещения товаров","Перемещения товаров","Новое перемещение товаров",StockMovVc,modIN); 
  end;

  if (HasModNL) then begin
    Setting("Настройки записей Склад",INAccTClass,modIN); 
  end;
  Setting("Штрих коды",BarcodeLClass,modIN);  
  if (HasModCRM) then begin
    Setting("Контакты",CULClass,modIN);
  end;
  Setting("Учет себестоимостей",CostAccTClass,modIN);
  if (HasItemGroups or HasLocalization("PRT")) then begin
    Setting("Группы товаров",ITLClass,modIN);
  end;
  if (HasLocalization("PRT")) then begin 
    Setting("Товары",INLClass,modIN);
  end;
  if (HasVarieties) then begin
    Setting("Варианты товаров",VARLClass,modIN);
    Setting("Группы вариантов",VARGLClass,modIN);
  end;
  if (HasNumberSeries) then begin
    if (HasModSO) then begin
      Setting("Серии номеров - Отгрузки",SHSerTClass,modIN);
    end;
    if (HasNumberSeries and HasLocalization("PRT")) then begin 
      Setting("Серии номеров - Возврат товаров",RetSerTClass,modIN);
      Setting("Серии номеров - Возврат товаров поставщику",RetPUSerTClass,modIN);
    end;
    Setting("Серии номеров - Поступления",PUSerTClass,modIN);
    Setting("Серии номеров - Списания",SDSerTClass,modIN);
    if (HasNumberSeries and HasLocalization("PRT")) then begin 
      if (HasMultiLocations) then begin 
        Setting("Серии номеров - Перемещения",StockMovSerTClass,modIN);
      end;
    end;
    Setting("Серии номеров - Инвентаризация",StockTakeSerTClass,modIN);
  end;
  if (HasLocalization("HRV")) then begin
    Setting("Recipes",RecLClass,modIN);
  end;
  if (HasMultiLocations) then begin 
    Setting("Настройки склада",MainStockTClass,modIN);
  end;  
  if (HasVarieties) then begin
    Setting("Маски вариантов",VARMaskTClass,modIN);
    Setting("Наборы вариантов",VARMasksLClass,modIN);
    Setting("Настройки вариантов",VarietyTClass,modIN);
    Setting("Подмножества вариантов",VARSubsetsLClass,modIN);
  end;

  if (HasModSO) then begin
    Document("Этикетки адресов",AdrLabRClass,AdrLabForm,AdrLabFClass,modIN);
    Document("Уведомления отгрузки",Sh1RClass,Sh1Form,Sh1FClass,modIN);
    Document("Этикетки фрахта",SHLabRClass,SHLabForm,SHLabFClass,modIN);
  end;
  Document("Этикетки пост. товаров",PULabRClass,PULabForm,PULabFClass,modIN);
  Document("Поступления товаров",PurchaseRClass,PurchaseForm,PurchaseFClass,modIN);
  Document("Этикетки товаров",ItemLabelRClass,ItemLabelForm,ItemLabelFClass,modIN);
  if (HasModSO) then begin
    Document("Накладные",Sh2RClass,Sh2Form,Sh2FClass,modIN);
  end;
  Document("Списания",SDRClass,SDForm,SDFClass,modIN);
  if (HasLocalization("HRV")) then begin
    Document("Перемещения",StockMovRClass,StockMovForm,StockMovFClass,modIN);
  end;
  
  if (HasModPO or HasModSO) then begin
    Report("Дефицит",PurRClass,PurRn,0,modIN);
  end;
  if (HasModSO) then begin
    Report("Журнал отгрузки",SHJRClass,ShipRn,0,modIN);
    Report("Список отгрузки",SHListRClass,ShipListRn,0,modIN);
  end;
  Report("Журнал товаров поступлений",PUJRClass,PUJRn,0,modIN);
  Report("История товара",INrsRClass,INrsRn,0,modIN);
  Report("Список товаров",ArtRClass,ArtRn,0,modIN);
  Report("Журнал списаний",SDJRClass,StockDepRn,0,modIN);
  Report("Журнал поступлений на склад",StockJInRClass,StockInRn,0,modIN);
  Report("Отчёт по складу",INRClass,InvValRn,0,modIN);
  Report("Журнал выбытий со склада",StockJOutRClass,StockOutRn,0,modIN);
  Report("Сравнение инвентаризации",STCompRClass,STCompRn,0,modIN);
  Report("Список инвентаризации",StockTakeRClass,StockTakeRn,0,modIN);
  Report("Поставщик/Статистика товара",VeInRClass,VeInRn,0,modIN);

  Maintenance("Сравнение инвентаризации",STCompVClass,STCompMn,modIN);

  if (HasLocalization("PRT")) then begin
    Export("Список Инвентаря для Налоговых Органов",PRTInventoryEClass,PRTInventoryEn,modIN);  
  end;

/*modPO*/

  RegisterWS("Заказы поставщикам","Заказы поставщикам","Новый заказ поставщику",POVc,modPO); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modPO); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modPO); 

  if (HasModIN) then begin
    Setting("Условия отгрузки",ShipDealLClass,modPO);
  end;
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Заказы поставщику",POSerTClass,modPO);
  end;

  Report("Дефицит",PurRClass,PurRn,0,modPO);
  Report("Невыполненные заказы поставщикам",POOrdStockRClass,POOrdStockRn,0,modPO);  
  Report("Журнал заказов поставщику",PurOrdJRClass,PurOrdJRn,0,modPO);

  Document("Заказы поставщику",PORClass,POForm,POFClass,modPO); 

/* modQT */
  RegisterWS("Коммерческие предложения","Коммерческие предложения","Новое комм. предложение",QTVc,modQT); 
  if (HasModCRM) then begin
    RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modQT); 
  end;
  RegisterWS("Товары","Товары","Новый товар",INVc,modQT); 
  if (HasPriceLists) then begin
    RegisterWS("Цены","Цены","Новая цена",PLVc,modQT); 
  end;
  //Register("Pre Quotations","Pre Quotations",PreQTVc,modQT); no funcionality for this one
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Предложения",QTSerTClass,modQT);
  end;
  Setting("Классы предложений",QuoteClassTClass,modQT);
  Setting("Настройки предложений",QTSettTClass,modQT);

  Document("Предложения",QTRClass,QTForm,QTFClass,modQT);
  if (HasLocalization("PRT")) then begin
    Document("Проформа инвойс, Предложения",ProformaQTRClass,ProformaQTForm,ProformaQTFClass,modQT);
  end;
  
  if (HasLocalization("PRT")) then begin
    Report("Журнал проформ инвойсов",ProformaIVJRClass,ProformaIVJRn,0,modQT);
  end;
  Report("Журнал утвержденных предложений",QTHistoryRClass,QTHstRn,0,modQT);
  Report("Открытые предложения",QTStkRClass,QTStkRn,0,modQT);
  Report("Воронка продаж",QTPipelineRClass,QTPipelineRn,0,modQT);
  Report("Журнал предложений",QTJRClass,QTJRn,0,modQT);

/* modRest */
  RegisterWS("Счета","Счета","Новый счёт",RestAccVc,modRest); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modRest); 
  Register("Расположение стола","Расположение стола",TableLayoutClass,modRest);

  Setting("Ежедневная статистика",SalesTimeTClass,modRest); 
  Setting("Метод оплаты по умолчанию",DefCashTClass,modRest);
  Setting("Настройки сч/ф",AccTClass,modRest);
  if (HasItemGroups or HasLocalization("PRT")) then begin
    Setting("Группы товаров",ITLClass,modRest);
  end;
  Setting("Методы оплаты",PMTClass,modRest); 
  Setting("Кнопки ПОС",POSButtonsLClass,modRest);
  Setting("Столы",NeighbourHoodLClass,modRest);
  Setting("Единицы",UnitLClass,modRest);

  Document("Bar Tab",RestAccRClass,RestAccForm,RestAccFClass,modRest);
  Document("Bar Tab Receipt",RestAccReceiptRClass,RestAccReceiptForm,RestAccReceiptFClass,modRest);
  Document("Отмена заказа",RestAccRClass,RestAccCancelForm,RestAccCancelFClass,modRest);
  Document("События кассы",CashRClass,CashForm,CashFClass,modRest);
  Document("Fire Order",RestAccRClass,RestAccFireOrderForm,RestAccFireOrderFClass,modRest);
  Document("Гостевой счет",RestAccGuestBillRClass,RestAccGuestBillForm,RestAccGuestBillFClass,modRest);

  Export("Ежедневная статистика ресторана",SalesTimeEClass,SalesTimeEn,modRest);  

  Report("Список товаров",ArtRClass,ArtRn,0,modRest);
  Report("Ежедневная статистика ресторана",DetSalesTimeRClass,DetSalesTimeRn,0,modRest);  
//  Report("Cash Up",CashupRClass,CashupRn,0,modRest);
  Report("Ежедневная статистика ресторана",DetSalesTimeRClass,DetSalesTimeRn,0,modRest);  
  Report("Статистика товаров ресторана",BarItemStatRClass,BarItemStatRn,0,modRest);
  Report("Журнал столов",RestAccJRClass,RestAccJRn,0,modRest);
  Report("Отчёт по простою",VoidedRowsRClass,VoidedRowsRn,0,modRest);
  
/* modCRM */

  if (HasStandardCRM) then begin  
    RegisterWS("Коммерческие предложения","Коммерческие предложения","Новое комм. предложение",QTVc,modCRM); 
  end;
  RegisterWS("Деятельности","Деятельности","Новая деятельность",ActVc,modCRM); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modCRM); 
  if (HasStandardCRM) then begin  
    RegisterWS("Товары","Товары","Новый товар",INVc,modCRM); 
  end;

  Report("Список дней рождений",BirthDayRClass,BirthDayRn,0,modCRM);
  Report("История звонков",CallHistRClass,CallHistRn,0,modCRM);
  Report("Список контактов",CURClass,CustRn,0,modCRM);
  if (HasStandardOrganizer==false) then begin
    Report("Справка по клиенту",CustPSRClass,CustPSRn,0,modCRM);
  end;
  Report("Список недейств. тел. номеров",InvPhoneNoRClass,InvPhoneNoRn,0,modCRM);
  if (HasStandardCRM) then begin  
    Report("Открытые предложения",QTStkRClass,QTStkRn,0,modCRM);
  end;
  Report("Список сотрудников",UserRClass,UserRn,0,modCRM);
  Report("Личный календарь",ActCalRClass,ActCalRn,0,modCRM);
  if (HasStandardCRM) then begin  
    Report("Воронка продаж",QTPipelineRClass,QTPipelineRn,0,modCRM);
    Report("Журнал предложений",QTJRClass,QTJRn,0,modCRM);
  end;
  Report("Поиск по контактным лицам",SearchContactRClass,SearchContactRn,0,modCRM);

  Document("Деятельности",ActDocRClass,ActDocForm,ActDocFClass,modCRM);
  Document("Этикетки контактов",CoLabRClass,CoLabForm,CoLabFClass,modCRM);
  if (HasStandardCRM) then begin  
    Document("Предложения",QTRClass,QTForm,QTFClass,modCRM);
  end;

  Setting("Классы деятельностей",ActTypeGrLClass,modCRM);
  Setting("Виды деятельности",ActTypeLClass,modCRM);
  Setting("Связи с клиентами",ContactRelLClass,modCRM);
  if (HasStandardCRM or HasStandardCommunicator) then begin  
    Setting("Информация в отчете Справка по клиенту",CustPSLClass,modCRM);
  end;
  if (HasStandardCRM) then begin  
    Setting("Условия оплаты",PDLClass,modCRM);
  end;
  Setting("Методы оплаты",ProgramStatusTClass,modCRM);//clouds ? 
  if (HasStandardCRM) then begin  
    Setting("Классы предложений",QuoteClassTClass,modCRM);
  end;
  Setting("Типы текста",TextTypeLClass,modCRM);
  Setting("Единицы",UnitLClass,modCRM);
  if (HasLocalization("PRT") or HasLocalization("BRA")) then begin
    Setting("Пользовательские поля - Контакты",CUUserLabelTClass,modCRM);
  end;
  Maintenance("Перестроить регистр распознования номера",NormPhoneNumVClass,NormPhoneNumMn,modCRM);
  Maintenance("Системное сообщение",SysMessVClass,SysMessMn,modCRM); // Must have ONE, otherwise it crashes.... goes for all these types...

/* modDI */  
  
  RegisterWS("Товары","Товары","Новый товар",INVc,modDI); 
  RegisterWS("Формула товаров","Формула товаров","Новая формула товаров",CPMVc,modDI); 
  RegisterWS("Скидочные матрицы","Скидочные матрицы","Новая скидочная матрица",RebVc,modDI); 
//  Register("Скидки при мультипокупке","Скидки при мультипокупке",MultiBuyRebVc,modDI);  
  RegisterWS("Цены","Цены","Новая цена",PLVc,modDI); 
  RegisterWS("Прейскуранты","Прейскуранты","Новый прейкурант",PLDefVc,modDI); 
  RegisterWS("Формулы цен","Формулы цен","Новая формула цен",PFormVc,modDI); 
  RegisterWS("Скидки от количества","Скидки от количества","Новые скидки от количества",StaffVc,modDI); 

  Report("Список таблиц скидок",RebListRClass,RebListRn,0,modDI); 
  Report("Статистика скидок",Cust2STRClass,Cust2STRn,0,modDI); 
  Report("Список товара",ArtRClass,ArtRn,0,modDI); 
  Report("Прейскурант",PriceRClass,PriceRn,0,modDI); 

  if (HasLocalization("DEN")) then begin
    Import("Item Prices import",INDanIn,INDanIn,modDI);
  end;
  Import("Обновление стоимости",INPrUpdIn,INPrUpdIn,modDI); 

  Setting("Цены от кол-ва",PLQLClass,modDI); 
  if (HasItemGroups) then begin
    Setting("Группы товара",ITLClass,modDI); 
  end;

  Maintenance("Расчёт цен ",CalcPricesVClass,CalcPriceListsMn,modDI); 
  Maintenance("Удаление цен из прейскуранта",DelPriceListVClass,DelPriceLMn,modDI); 
  Maintenance("Обновление цен на товары",ItemPricesVClass,ItemPricesMn,modDI); 
  Maintenance("Обновление стоимости товаров",ItemCostPricesVClass,INCostPriceMn,modDI); 

  end;
  return;
end;
