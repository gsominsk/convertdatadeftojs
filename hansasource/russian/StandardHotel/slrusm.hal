
/* slengm.hal */
/* Standard Hotel by HansaWorld */

/* This is no longer an Event, make sure you don't have this in */
// event startup
external function Boolean HasDeveloperMode();
external function Boolean HasInvoiceOfficialSerNr();
external function Boolean HasFormEditor();
external function Boolean HasPersons();
external function Boolean HasModQT();
external function Boolean HasSerialNumbers();
external function Boolean HasModAT2();
external function Boolean HasModCL();
external function Boolean HasIncomeAndExpenseBook();
external function Boolean HasStandardCRM();
external function Boolean HasModExp();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();
external function Boolean HasModSO();
external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModSL();
external function Boolean HasModPL();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModRest();
external function Boolean HasModCRM();
external function Boolean HasPayroll();
external function Boolean HasEMail();

external function Boolean HasAdvancedPricing();
external function Boolean HasAdvancedAccounting();
external function Boolean HasBase2();
external function Boolean HasContactClassification();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasIntegratedNL();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLocalMachines();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNumberSeries();
external function Boolean HasOfficialSerNr();
external function Boolean HasObjects();
external function Boolean HasPriceLists();
external function Boolean HasRoomPackages();
external function Boolean HasRoomTypes();
external function Boolean HasVarieties();
external function Boolean HasCategories();
external function Boolean HasEMail();
external function Boolean HasAccessGroups();
external function Boolean HasRegistersExports();
external function Boolean HasServerInCloud();
external function Boolean HasFiscalPrinter();
external procedure SetProductTags();
external procedure LoadWindowTags();

begin
  Real h,v,l,vs;

  SetLangMode(LangRussian,"RUS",0);

  if (BuildProductCode=="StandardHotel") then begin

  SetProductTags;
  LoadWindowTags;

  Module("Hotel","",730,modHotel);
//  Module("Resource Planning","",730,modPP);
  if (HasModNL) then begin
    Module("#Nominal Ledger#","",730,modNL);
  end;
  if (HasModCL) then begin
    Module("Кассовая книга","",730,modCL);
  end;
  if (HasModPL) then begin
    Module("#Purchase Ledger#","",730,modPL);  
  end;
  if (HasModSL) then begin
    Module("#Sales Ledger#","",730,modSL);
  end;
  if (HasModIN) then begin
    Module("#Stock#","",730,modIN); //!!TRANSLATE
  end;
  Module("System","",730,modSY); //!!TRANSLATE
  
/* modSL */
  RegisterWS("Счета-фактуры","Счета-фактуры","Новый счёт-фактура",IVVc,modSL); 
  RegisterWS("Платежи","Платежи","Новый платёж",IPVc,modSL); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modSL); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modSL); 
  if (HasPriceLists) then begin
    RegisterWS("Цены","Цены","Новая цена",PLVc,modSL); 
  end;
  if (HasLocalization("RUS")) then begin
    RegisterWS("Счета клиентам","Счета клиентам","Новый счёт клиенту",ORVc,modSL); 
  end;
  
  Setting("Age Limits",AgedTClass,modSL);
  if (HasModNL) then begin
    Setting("Account Usage #S/L#",AccTClass,modSL);
  end;
  if (HasLocalization("FIN,RUS")) then begin
    Setting("Banks",BankLClass,modSL);
  end;
  if (HasContactClassification) then begin
    Setting("Contact Classifications",CClassLClass,modSL);
  end;
  if (HasCategories) then begin
    Setting("Customer Categories",CCatLClass,modSL);
  end;
  Setting("Contact Document Types",CUDocTypeTClass,modSL);  
//  Setting("Electronic Invoices Customers Data",EInvCULClass,modSL);
//  Setting("Electronic Invoices Settings",EInvoiceTClass,modSL);
//  Setting("Electronic Invoices Queue",EInvoiceQueLClass,modSL);
//  Setting("Electronic Record Statuses",ERecordStatusLClass,modSL);
  if (HasLocalization("BRA")) then begin
    Export("Fiscal Note for Services",BraFiscalNoteEClass,BraFiscalNoteEn,modSL); 
  end;

  if (HasLocalization("BRA")) then begin
    Import("Fiscal Note for Services Reply",0,BraFiscalNoteIn,modSL);
  end;
  if (HasModNL and HasModPL and HasMultiCurrency) then begin
    Setting("Internal Invoices",IntIVLClass,modSL);
  end;

  if (HasModNL==false) then begin
    Setting("Invoice Settings",AccTClass,modSL);
  end;
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT")) then begin
    Setting("Группы товаров",ITLClass,modSL);
  end;
  if (HasModSL and HasLocalization("PRT,ITA")) then begin
    Setting("Item Group Withholdings",WHITLClass,modSL);
  end;
  if ((HasNumberSeries or HasLocalization("HRV,LVA")) and (HasOfficialSerNr or HasInvoiceOfficialSerNr)) then begin  
    Setting("Legal Invoice Numbers",LegalInvNrTClass,modSL);
  end;  
  if (HasLocalMachines) then begin
    Setting("Локальный компьютер",LocalMachineTClass,modSL);  
  end;  
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Invoices",IVSerTClass,modSL);
    Setting("Серии номеров - Receipts",IPSerTClass,modSL);
    if (HasModNL) and (HasLocalization("POL,HRV")) then begin
      Setting("Серии номеров - #VAT# Corrections #S/L#",VATIVSerTClass,modSL);
    end;
  end;
  Setting("Способы платежей",PMTClass,modSL);
  Setting("Payment Terms",PDLClass,modSL);
  if (HasPriceLists) then begin
    Setting("Price Lists",PLDefLClass,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Setting("Reference Number Settings",CalcRefTClass,modSL);
  end;
  Setting("Sales Invoice Settings",IVTTClass,modSL);     //!!TRANSLATE
  if (HasLocalization("PRT")) then begin
    Setting("Standard Problems",StandProblemLClass,modSL);
  end;  
    if (HasLocalization("BRA,HRV,KEN")) then begin
      Setting("Налоговые шаблоны",TaxTemplateLClass,modSL);
      Setting("Transaction Settings",TrTClass,modSL);
  end;  
  Setting("Units",UnitLClass,modSL);
  if (HasLocalization("POL,HRV")) and (HasModNL) then begin
    Setting("#VAT# Corrections #S/L#",VATIVLClass,modSL);
    Setting("#VAT# Correction #S/L# Types",VATIVTypeTClass,modSL);
  end;
  if (HasLocalization("KEN,PRT")) then begin
    Setting("Коды НДС",VATCodeTClass,modSL); 
  end;  
  if (HasLocalization("PRT,ITA") and (HasModPL or HasModSL)) then begin
    Setting("Withholding Calculation Formulae",WHCalcFormLClass,modSL);
    Setting("Withholding Taxes",WHTaxTClass,modSL);
  end;    

  Document("Cash Notes",KIVRClass,CashInvForm,CashFClass,modSL);
  Document("#Credit Notes#",CIVRClass,CredInvForm,CredFClass,modSL);
  Document("Customer Labels",CuLabRClass,CuLabForm,CuLabFClass,modSL);
  if (HasLocalization("POL")) then begin
    Document("Debtors Letter",DebtLetRClass,DebtorLetForm,DebtLetFClass,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Document("Interest Invoices",IIVRClass,IIInvForm,IIFClass,modSL);
  end;
  Document("Invoices",IVRClass,InvForm,InvFClass,modSL); 
  if (HasLocalization("PRT")) then begin
    Document("Invoice/Receipt's",KIVRClass,CashInvRecPRTForm,CashRecPRTFClass,modSL);
  end;  
  Document("Open Invoice Customer Statement",ARSRClass,ARSForm,ARSFClass,modSL);
  Document("Periodic Customer Statement",CuPerRClass,CuPerForm,CuPerFClass,modSL);
  if (HasLocalization("POL")) then begin
    Document("Proforma Invoices",Inv1RClass,Inv1Form,Inv1FClass,modSL);
  end;
  Document("Receipt Forms",IPDRClass,IPDForm,IPDFClass,modSL);
  if (HasLocalization("LVA,POL")) then begin
    Document("Reminders",RemRClass,RemForm,RemFClass,modSL);
  end;
  if (HasLocalization("RUS")) then begin
    Document("Orders",ORRClass,OrdForm,OrdFClass,modSL);
  end;

  Report("Contact List",CURClass,CustRn,0,modSL);
  Report("Customer/Item Statistics",CuArtSTRClass,CuArtSTRn,0,modSL);
  Report("Customer Statistics",CustSTRClass,CustSTRn,0,modSL);
  Report("Справка по клиенту",CustPSRClass,CustPSRn,0,modSL);
  if (HasLocalization("LVA")) then begin
    Report("EU #VAT# Sales",SLEUVATRClass,SLEUVATRn,0,modSL);
  end;
//  Report("Electronic Invoice Status",HTSStatIVRClass,HTSStatIVRn,0,modSL);
  if (HasLocalization("HRV")) then begin
    Report("GP, Invoices",IVGPRClass,IVGPRn,0,modSL);
  end;
  Report("Invoice Journal",IVJRClass,InvoiceRn,0,modSL);
  if (HasLocalization("KEN")) then begin
    Report("iTax (Kenya)",ALLVATKENRClass,ALLVATKENRn,0,modSL);  
  end;
  Report("Item List",ArtRClass,ArtRn,0,modSL);
  Report("Item Statistics",ArtSTRClass,ArtSTRn,0,modSL);
  if (HasLocalization("LVA")) then begin
    Report("Legal Invoice Forms Usage",LegInvFormRClass,LegInvFormRn,0,modSL);
  end;
  Report("Open Invoice Customer Statement",ARS2RClass,ARS2Rn,0,modSL);
  if (HasLocalization("RUS")) then begin
    Report("Order Journal",ORJRClass,OrdRn,0,modSL);
    Report("Order Payment Status",ORPayStatusRClass,ORPayStatusRn,0,modSL);
  end;
  Report("Periodic Customer Statement",CuPer2RClass,CuPerRn,0,modSL);
  if (HasLocalization("LVA")) then begin
    Report("Prepayment History #S/L#",PerPayHisSLRClass,PerPayHisSLRn,0,modSL);
  end;
  if (HasPriceLists) then begin
    Report("Прейскурант",PriceRClass,PriceRn,0,modSL);
  end;
  Report("Receipts Forecast",IPProgRClass,IPProgRn,0,modSL);
  Report("Receipt History",CUPayHistoryRClass,CUPayHistoryRn,0,modSL);
  Report("Receipt Journal",IPRClass,IPRn,0,modSL);
  Report("#Sales Ledger#",ARRClass,ARRn,0,modSL);
  if (HasLocalization("PRT")) then begin
    Report("#VAT Code# Statistics",SLVATRClass,SLVATRn,0,modSL);
  end;
  if (HasLocalization("POL")) and (HasModNL) then begin
    Report("#VAT# Report Sales",SLVATRepRClass,SLVATRepRn,0,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Report("#VAT# Report Sales (Lithuania)",SLVATLitRClass,SLVATLitRn,0,modSL);  
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Customer Sales",RealCustRClass,RealCustRn,0,modSL);
  end;
  
  if (HasEMail) then begin
    Maintenance("Create Periodic Customer Statement E-mail",CUPerEmailVClass,CUPerEmailMn,modSL); // We have this belowe SendPerStatVClass
  end;
  if (HasModNL) and (HasLocalization("HRV")) then begin
    Maintenance("Create #VAT# Corrections #S/L#",VATIVVClass,VATIVMn,modSL);
  end;
  if (HasModNL) then begin
    if (HasLocalization("PRT")) then begin
      Maintenance("Transfer to Bad Debtors",BadCUVClass,BadCUMn,modSL);
    end;
  end;

  if (HasLocalization("LVA")) then begin
    Export("EU Sales Export (Latvia)",LatEUSalesEClass,LatEUSalesEn,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#S/L# #VAT# Invoices (Lithuania)",LitVATRegIVEClass,LitVATRegIVEn,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modSL);
  end;  
  if (HasLocalization("LVA")) then begin
    Export("#VAT# Declaration Annex #VAT#1-III (Latvia)",LatVATSalesEClass,LatVATSalesEn,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Export("Finvoice",FInvoiceEClass,FInvoiceEn,modSL);
  end;
  
/* modNL */

  RegisterWS("Счета-фактуры поставщика","Счета-фактуры поставщика","Новый счёт-фактура поставщика",VIVc,modPL); 
  RegisterWS("Платежи","Платежи","Новый платёж",OPVc,modPL); 
  RegisterWS("Контакты","Контакты","Новый контакт",CUVc,modPL); 

  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Setting("Account Usage #P/L#",APAccTClass,modPL);
  end;
    if (HasLocalization("AUS,ESP,FIN,GBR,NOR,SWE")) then begin
    Setting("Банковские файлы",BankFileTClass,modPL);
  end;  
if (HasNumberSeries) then begin
    Setting("Серии номеров - #Purchase Invoices#",VISerTClass,modPL);
    Setting("Серии номеров - Payments",OPSerTClass,modPL);
    if (HasModNL or HasIncomeAndExpenseBook) and (HasLocalization("POL,HRV")) then begin
      Setting("Серии номеров - #VAT# Corrections #P/L#",VATVISerTClass,modPL);
    end;
  end;
  Setting("Способы платежей",PMTClass,modPL);
  Setting("Payment Terms",PDLClass,modPL);
  if (HasCategories) then begin
    Setting("#Supplier# Categories",VGLClass,modPL);
  end;
  if (HasModNL or HasIncomeAndExpenseBook) and (HasLocalization("POL,HRV")) then begin
    Setting("#VAT# Corrections #P/L#",VATVILClass,modPL);
    Setting("#VAT# Correction #P/L# Types",VATVITypeTClass,modPL);
  end;
  if (HasLocalization("PRT,ITA")) then begin
    Setting("Withholding Calculation Formulae",WHCalcFormLClass,modPL);
    Setting("Withholding Taxes",WHTaxTClass,modPL);
  end;  
  if (HasLocalization("ESP,FIN,RUS")) then begin
    Setting("Banks",BankLClass,modPL);
  end;
  
  if (HasLocalization("LTU,POL")) then begin
    Document("Открыть список неоплаченных счетов поставщика",APSRClass,APSForm,APSFClass,modPL);
  end;
  Document("Формы платежей",OPDRClass,OPDForm,OPDFClass,modPL);
  Document("Списки платежей",OPRClass,OPForm,0,modPL);
  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Document("#Purchase Invoices#",VIRClass,VIForm,VIFClass,modPL);
  end;

  if (HasLocalization("LTU")) then begin
    Report("Открыть список неоплаченных счетов поставщика",APS2RClass,APS2Rn,0,modPL);
  end;
  Report("Payments Forecast",OPProgRClass,OPProgRn,0,modPL);
  Report("Payment Journal",OPJRClass,OPJRn,0,modPL);
  Report("Periodic #Supplier# Statement",VePer2RClass,VePerRn,0,modPL);
  if (HasLocalization("LVA")) then begin
    Report("Prepayment History #P/L#",PerPayHisPLRClass,PerPayHisPLRn,0,modPL);
  end;
  Report("#Purchase Invoice# Journal",VIJRClass,VIJRn,0,modPL);
  Report("#Purchase Ledger#",APRClass,APRn,0,modPL);
  Report("#Supplier# List",VERClass,VERn,0,modPL);
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("LVA,POL")) and (HasModNL or HasIncomeAndExpenseBook) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# #Supplier# Purchases",RealSuppRClass,RealSuppRn,0,modPL); 
  end;
  if (HasLocalization("HND")) then begin
    Report("#VAT# Report Purchases (Honduras)",PLVATHonRClass,PLVATHonRn,0,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Report("#VAT# Report Purchases (Lithuania)",PLVATLitRClass,PLVATLitRn,0,modPL);
  end;
  
  if (HasLocalization("AUS,ESP,FIN,GBR,NOR,SWE")) then begin
    Export("Банковский файл",MPEClass,MPEn,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#P/L# #VAT# Invoices (Lithuania)",LitVATRegVIEClass,LitVATRegVIEn,modPL);
  end;
  if (HasLocalization("LVA")) then begin
    Export("#P/L# Latvian #VAT# Report",PLVAT1ExpEClass,PLVAT1En,modPL);
    Export("#VAT# Purchases (Latvia)",LatVATPurchasesEClass,LatVATPurchasesEn,modPL);
  end;
    
  if (HasModNL) and (HasLocalization("HRV")) then begin
    Maintenance("Create #VAT# Corrections #P/L#",VATVIVClass,VATVIMn,modPL);
  end;
//  if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
//    Setting("Rate Gain/Loss",NLRateTClass,modNL);
//  end;
  RegisterWS("Приходы в кассу","Приходы в кассу","Новый приход",CLInVc,modCL); 
  RegisterWS("Расходы из кассы","Расходы из кассы","Новый расход",CLOutVc,modCL); 
  if (HasModSL and HasLocalization("POL")==false) then begin
    RegisterWS("Платежи","Платежи","Новый платёж",IPVc,modCL); 
  end;
  if (HasModPL and HasLocalization("POL")==false) then begin
    RegisterWS("Платежи","Платежи","Новый платёж",OPVc,modCL); 
  end;
  if (HasModExp) then begin
    RegisterWS("Выплату персоналу","Выплату персоналу","Новая выплата персоналу",PPVc,modCL); 
  end;
  
  Setting("Настройки кассовой книги",MainCLTClass,modCL);
  Setting("Expense Accounts",CLCorspLClass,modCL);
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Cash In",CLInSerTClass,modCL);
    Setting("Серии номеров - Cash Out",CLOutSerTClass,modCL);
  end;
  Setting("Способы платежей",PMTClass,modCL);
  
  Report("Кассовая книга",CLIORClass,CashBRn,0,modCL);
  if (HasLocalization("LTU")) then begin
    Report("Cash Book (Lithuania)",CashBookLitRClass,CashBookLitRn,0,modCL);
  end;
  Report("Журнал прихода в кассу",CLInJRClass,CLInJRn,0,modCL);  
  Report("Журнал расходов из кассы",CLOutJRClass,CLOutJRn,0,modCL);  
  if (HasModNL or HasLocalization("POL")) then begin
    Report("#N/L# Cash Book",CashBookLatRClass,CashBookLatRn,0,modCL);
  end;

  Document("Приход",CLInRClass,CLInForm,CLInFClass,modCL);
  Document("Расход",CLOutRClass,CLOutForm,CLOutFClass,modCL);

  Maintenance("Утвердить приход и расход",OKCLVClass,OKCLMn,modCL);  

/* modNL */
  
if (HasModNL==false) then begin
    if (HasIncomeAndExpenseBook) then begin
      RegisterWS("Счета","Счета","Новый счёт",AccVc,modNL); 
      RegisterWS("Записи операций","Записи операций","Новая запись",TRVc,modNL); 

      Setting("Fiscal Years",YearTClass,modNL);
      Setting("Income & Expense Book",IncExpBookLClass,modNL);
      if (HasNumberSeries) then begin
        Setting("Серии номеров - Transactions",TRSerTClass,modNL);
      end;
      if (HasIntegratedNL) then begin
      Setting("Sub Systems",TRGenTClass,modNL);
      end;
      Setting("Коды НДС",VATCodeTClass,modNL);
      
      Report("Income & Expense Book",IncExpBookRClass,IncExpBookRn,0,modNL);
    end;
  end else begin
    RegisterWS("Записи операций","Записи операций","Новая запись операций",TRVc,modNL); 
    if (HasLocalization("AGO,PRT")) then begin
      RegisterWS("Симуляции","Симуляции","Новая симуляция",SMVc,modNL);   
    end;
    
    if (HasLocalization("AUS")) then begin
      Register("Выверка счетов","Выверка счетов",BankRecWClass,modNL);
    end;
    if (HasLocalization("AUS")==false) then begin
      RegisterWS("Начальное сальдо","Начальное сальдо","Новое начальное сальдо",FBVc,modNL);    
      end;
    RegisterWS("Счета","Счета","Новый счёт",AccVc,modNL); 


    if (HasLocalization("AGO,POL,PRT")) then begin
      Setting("Account Transfers",AccTransLClass,modNL);
    end;
    Setting("Fiscal Years",YearTClass,modNL);
    if (HasIncomeAndExpenseBook) then begin
      Setting("Income & Expense Book",IncExpBookLClass,modNL);
    end;
    if (HasNumberSeries) then begin
      Setting("Серии номеров - Transactions",TRSerTClass,modNL);
    end;
    if (HasObjects) then begin
      Setting("Объекты",ObjLClass,modNL);
      Setting("Object Types",OTLClass,modNL);
    end;
//    if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
//      Setting("Rate Gain/Loss",NLRateTClass,modNL);
//    end;
    if (HasAdvancedAccounting) then begin
    Setting("Report Settings",Rs2WClass,modNL);
    end;
    if (HasIntegratedNL) then begin
    Setting("Sub Systems",TRGenTClass,modNL);
    end;
    if (HasIntegratedNL) then begin
    Setting("Контрольные счета записей подсистем",SLAccTClass,modNL);
    end;
    if (HasLocalization("HRV,LVA")) then begin
      Setting("Tax Reports",TaxRepLClass,modNL);
    end;
    if (HasLocalization("BRA,HRV,KEN,LVA")) then begin
    Setting("Tax Rules",TaxRulesLClass,modNL);
    Setting("Налоговые шаблоны",TaxTemplateLClass,modNL);
    Setting("Transaction Settings",TrTClass,modNL);
  end;
  if (HasLocalization("KEN")) then begin
    Setting("Налоговые шаблоны",TaxTemplateLClass,modNL);
  end;
    Setting("Коды НДС",VATCodeTClass,modNL);
  
    if (HasLocalization("HRV,LVA")) then begin
      Document("Tax Report",TaxDocRClass,TaxRepForm,TaxRepFClass,modNL);
    end;
    Document("Записи операций",TRRClass,TRForm,TRFClass,modNL);

    Report("Account Reconciliation",ACReconRClass,ACRecRn,0,modNL);
  
  if (HasLocalization("AGO,BRA,POL,PRT")) then begin
    Report("Analytical Balance",MBARClass,MBARn,0,modNL);
  end;  
    Report("Balance Sheet",BalRClass,BalRn,UserDefRepDClass,modNL);
    Report("Chart of Accounts",AccListRClass,AccListRn,0,modNL);
    Report("Correction List",CorrRClass,CorrRn,0,modNL);
    if (HasLocalization("LTU,LVA")) then begin
      Report("Corresponding Accounts",CorspRClass,CorspRn,0,modNL);
    end;
  if (HasMultiCurrency) then begin
    Report("Currency A/C Rate Change",NLRateRClass,NLRateRn,0,modNL);
    end;
    if (HasIncomeAndExpenseBook) then begin
      Report("Income & Expense Book",IncExpBookRClass,IncExpBookRn,0,modNL);
    end;
    if (HasMultiCurrency) then begin
    Report("Multicurrency Accounts Rate Difference",MultiCurAccRClass,MultiCurAccRn,0,modNL);
    end;
    if (HasIntegratedNL==false) then begin
      Report("#N/L# Transfer, Subsystems",StdTransGenRClass,TransGenRn,0,modNL); //!!TRANSLATE
    end;
    Report("#Nominal Ledger#",MainRClass,MainRn,0,modNL);
    Report("Profit & Loss",ResRClass,ResRn,UserDefRepDClass,modNL);
    if (HasLocalization("LVA")) then begin
      Report("Tax Calculations", Tax100Class,Tax100Rn,0,modNL);
      Report("Test Corresponding Rules",CorstRClass,CorstRn,0,modNL);
    end;
    Report("Transaction Journal",TransRClass,TransRn,0,modNL);
    Report("Проверочный баланс",SBRClass,TrialRn,0,modNL);
  if (HasLocalization("POL,PRT")==false) then begin
    Report("Отчёт по НДС, сводный",ALLVATRClass,ALLVATRn,0,modNL);
  end; 
  if (HasLocalization("POL")==false) then begin
      Report("#VAT# Report",VATRClass,VAT2Rn,UserDefRepDClass,modNL);
    end;

    if (HasLocalization("FRA")) then begin
      Export("FEC Export",FrenchFECEClass,FrenchFECEn,modNL);
    end;
    if (HasLocalization("SGP")) then begin
      Export("IRAS audit File",GenIRASEClass,IRASAuditEn,modNL);
    end;
    Export("Monthly Balances",MBEClass,MBEn,modNL);
    if (HasLocalization("SWE")) then begin
      Export("SIE (Swedish Export/Import)",SieEClass,SieEn,modNL);
    end;
    Export("Проверочный баланс",SBEClass,SBEn,modNL);
    if (HasLocalization("PRT")) then begin
      Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modNL);
    end;  
  if (HasLocalization("LTU")) then begin
    Export("Периодическая декларация НДС (Литва)",LTUVATEClass,LTUVATEn,modNL);
  end;
  
    if (HasLocalization("SWE")) then begin
      Import("SIE (Swedish Export/Import)",0,SieIn,modNL);
  end;  

  if (HasLocalization("AGO,POL,PRT")) then begin
    Maintenance("Account Balance Transfer",AccTransVClass,AccTransMn,modNL);
  end;
  end;
  
/* modHotel */  
  RegisterWS("Резервации","Резервации","Новая резервация",JobVc,modHotel); 
  RegisterWS("Счета-фактуры","Счета-фактуры","Новый счёт-фактура",IVVc,modHotel); 
  RegisterWS("Гости","Гости","Новый гость",CUVc,modHotel); 
  RegisterWS("Комната","Комната","Новая комната",ResVc,modHotel); 
  RegisterWS("Товары","Товары","Новый товар",INVc,modHotel);   

  Setting("Company Info",CYWClass,modHotel); 
  Setting("Hotel Settings",HotelTClass,modHotel);
  if (HasRoomPackages) then begin
    Setting("Invoice Items",ResArtCodeLClass,modHotel);      //!!TRANSLATE
  end;
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT")) then begin
    Setting("Группы товаров",ITLClass,modHotel);
  end;
  if ((HasNumberSeries or HasLocalization("HRV,LVA")) and (HasOfficialSerNr or HasInvoiceOfficialSerNr)) then begin
    Setting("Legal Invoice Numbers",LegalInvNrTClass,modHotel);
  end;    
  Setting("Payment Terms",PDLClass,modHotel);
  Setting("Reservation Status",ReservationStatusLClass,modHotel);
  Setting("Reporting Periods",PeriodTClass,modHotel);    
  Setting("Resource Planner",ResPlanTClass,modHotel); //!!TRANSLATE
  if (HasRoomPackages) then begin
    Setting("Room Package",ResUsageLClass,modHotel);  //!!TRANSLATE
  end;
  if (HasRoomTypes) then begin 
  Setting("Room Types",ResTypeLClass,modHotel);  //!!TRANSLATE
  end;
  if (HasLocalization("PRT")) then begin
    Setting("Standard Problems",StandProblemLClass,modHotel);
  end;  
  Setting("Units",UnitLClass,modHotel);   
  Setting("VAT Codes",VATCodeTClass,modHotel); 
  Setting("Down Payments",DownPayHotelTClass,modHotel);
  if (HasPriceLists) then begin
    Setting("Price Lists",PLDefLClass,modHotel);  //!!TRANSLATE
    Setting("Prices",PLLClass,modHotel); //!!TRANSLATE
  end;
  if (HasLocalization("PRT")) then begin
    Setting("Группы товаров",ITLClass,modHotel);
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Setting("Payment Currencies",POSCurrenciesTClass,modHotel);
  end;
  if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
    Setting("Conversions - Master",ConvMasterTClass,modHotel);
  end;
  Report("Guest Book",GuestBookRClass,GuestBookRn,0,modHotel); //!!TRANSLATE
  if (HasPriceLists) then begin
    Report("Price List",PriceRClass,PriceRn,0,modHotel); //!!TRANSLATE
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT Code# Statistics",SLVATRClass,SLVATRn,0,modHotel);
  end;  
  if (HasLocalization("PRT")) then begin
    Document("Interest Invoices",IIVRClass,IIInvForm,IIFClass,modHotel);
  end;
  if (HasLocalization("PRT")) then begin
    Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modHotel);
  end;    

  if (HasLocalization("HRV")) then begin
    Maintenance("Invoices without Official No.",XMLExportVClass,XMLExportMn,modHotel);
  end;
  if (HasLocalization("PRT")) then begin
    if (HasEMail) then begin
      Maintenance("SAFT через электронную почту",SAFTtoEmailVClass,SAFTtoEmailMn,modHotel);
    end;
  end;
  if (HasModNL) then begin
    if (HasLocalization("PRT")) then begin
      Maintenance("Transfer to Bad Debtors",BadCUVClass,BadCUMn,modHotel);
    end;
  end;
 
  Document("Cash Notes",KIVRClass,InvForm,CashFClass,modHotel);    
  Document("#Credit Notes#",CIVRClass,InvForm,CredFClass,modHotel);
  Document("Invoices",IVRClass,InvForm,InvFClass,modHotel); 
  if (HasLocalization("PRT")) then begin
    Document("Invoice/Receipt's",KIVRClass,CashInvRecPRTForm,CashRecPRTFClass,modHotel);
  end;  
  Document("Reservation Confirmations",JobRClass,Job3Form,Job3FClass,modHotel);
  Document("Reservation Check Outs",JobRClass,Job1Form,Job1FClass,modHotel);
  Document("Reservation Enquiries",JobRClass,Job2Form,Job2FClass,modHotel);
  Document("Резервации",JobRClass,JobForm,JobFClass,modHotel);
//  Document("Customer Labels",CuLabRClass,CuLabForm,CuLabFClass,modHotel);
  Report("Check Ins",CheckInRClass,CheckInRn,0,modHotel);  
  Report("Check Outs",CheckOutRClass,CheckOutRn,0,modHotel);  
  Report("Contact List",CURClass,CustRn,0,modHotel);
  Report("Guest History",GuestHistRClass,GuestHistRn,0,modHotel);
  Report("Hotel Daily Statistics",SalesTimeRClass,SalesTimeRn,0,modHotel);  
  Report("In-House Guests",InHouseRClass,InHouseRn,0,modHotel);   
  Report("Invoice Journal",IVJRClass,InvoiceRn,0,modHotel);//JRN050607
  Report("Item List",ArtRClass,ArtRn,0,modHotel);
  Report("Room List",TodayRoomAvailRClass,TodayRoomAvailRn,0,modHotel);
//  Report("#Sales Ledger#",ARRClass,ARRn,0,modHotel);    
//  Report("Guest List",GuestListRClass,GuestListRn,0,modHotel);
  if (HasDeveloperMode) then begin
    Setting("Configuration",ModulesTClass,modHotel);
    Setting("Cloud Services",EnabServerTClass,modHotel);
    Setting("Current License Flags",CurLicensesClass,modHotel);
    Setting("Internet Enablers",InternetEnablerTClass,modHotel);
    Setting("Licenses",LicensesLClass,modHotel);
    RegisterWS("Почтовые ящики","Почтовые ящики","Новый почтовый ящик",ConferenceWClass,modHotel); 
    Setting("Std Registration Data",StdRegDataWClass,modHotel);
    Setting("Reservation Prices",JobPriceLClass,modHotel); //!!TRANSLATE

    Setting("E-Learning URL Cache",UniversityURLCacheLClass,modSY);   //!!TRANSLATE
    Setting("E-Learning URL Cache (TX)",UniversityURLTXCacheLClass,modSY); //!!TRANSLATE
    Setting("Internet Services Server IP",EnabServerTClass,modSY); //!!TRANSLATE
    Setting("Services Cache",ServiceCacheLClass,modSY); //!!TRANSLATE
    Setting("Aut. Sales Actions",AutSalesActionLClass,modSY); //!!TRANSLATE
    Setting("Cloud Services",EnabServerTClass,modSY); //!!TRANSLATE
    Setting("Configuration",ModulesTClass,modSY); //!!TRANSLATE
    Setting("Current License Flags",CurLicensesClass,modSY); //!!TRANSLATE
    Setting("Internet Enablers",InternetEnablerTClass,modSY);
    Setting("Licenses",LicensesLClass,modSY); //!!TRANSLATE
    
    Setting("My IP Address",MyIPAddrTClass,modSY); //!!TRANSLATE
    Setting("Program Mode",ProgramStatusTClass,modSY); //!!TRANSLATE
    Setting("Services Cache",ServiceCacheLClass,modSY); //!!TRANSLATE
    Setting("Std Registration Data",StdRegDataWClass,modSY); //!!TRANSLATE
    Setting("Legal SerNo's",OffSerNrLClass,modSY); //!!TRANSLATE
    Setting("User Feature Pref",UserFeaturePrefTClass,modSY);     //!!TRANSLATE
    Setting("Login Options",LocalLoginOptionsTClass,modSY); //!!TRANSLATE
    Setting("Internet Enablers (old block)",InternetEnabOldTClass,modSY); //!!TRANSLATE
    Setting("Setup Status",SetupStatusTClass,modSY); //!!TRANSLATE
    Setting("Electronic Invoices Queue",EInvoiceQueLClass,modSY); //!!TRANSLATE
    Setting("Standard Server Type",StandardServerTClass,modSY); //!!TRANSLATE
    Report("Idle Tasks List",IdleTaskListRClass,IdleTaskListRn,0,modSY); //!!TRANSLATE
    Setting("Company Date and Numeric Format",SysFormatTClass,modSY);     //!!TRANSLATE

    Setting("Resource Type Support",ResTypeSupportLClass,modHotel); //!!TRANSLATE
    
    RegisterWS("POS Invoices 2","POS Invoices 2","New Invoice",IVCashVc,modPOS); //!!TRANSLATE
    Setting("Legal Record Numbers",OffSerNrLClass,modPOS); //!!TRANSLATE
  end;
  // end debug code  


/* modIN */

  RegisterWS("Goods Receipts","Goods Receipts","New Goods Receipt",PUVc,modIN); //!!TRANSLATE
  RegisterWS("#Stock Depreciations#","#Stock Depreciations#","New #Stock Depreciation#",SDVc,modIN); //!!TRANSLATE
  RegisterWS("#Stocktaking#","#Stocktaking#","New #Stocktaking#",StockTakeVc,modIN); //!!TRANSLATE
  RegisterWS("Items","Items","New Item",INVc,modIN); //!!TRANSLATE

  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Setting("Account Usage #Stock#",INAccTClass,modIN);  //!!TRANSLATE
  end;
  Setting("Cost Accounting",CostAccTClass,modIN); //!!TRANSLATE
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT")) then begin
    Setting("Item Groups",ITLClass,modIN); //!!TRANSLATE
  end;
  if (HasNumberSeries) then begin
    Setting("Number Series - Goods Receipts",PUSerTClass,modIN); //!!TRANSLATE
    Setting("Number Series - #Stock Depreciations#",SDSerTClass,modIN); //!!TRANSLATE
    Setting("Number Series - #Stocktaking#",StockTakeSerTClass,modIN); //!!TRANSLATE
  end;
  if (HasMultiLocations) then begin 
    Setting("#Stock# Settings",MainStockTClass,modIN); //!!TRANSLATE
  end;

  Document("Goods Receipt Labels",PULabRClass,PULabForm,PULabFClass,modIN); //!!TRANSLATE
  Document("Goods Receipts",PurchaseRClass,PurchaseForm,PurchaseFClass,modIN); //!!TRANSLATE
  Document("Item Labels",ItemLabelRClass,ItemLabelForm,ItemLabelFClass,modIN); //!!TRANSLATE

  Report("Goods Receipt Journal",PUJRClass,PUJRn,0,modIN); //!!TRANSLATE
  Report("Item History",INrsRClass,INrsRn,0,modIN); //!!TRANSLATE
  Report("Item List",ArtRClass,ArtRn,0,modIN); //!!TRANSLATE
  Report("#Stock Depreciation# Journal",SDJRClass,StockDepRn,0,modIN); //!!TRANSLATE
  Report("#Stock# In Journal",StockJInRClass,StockInRn,0,modIN); //!!TRANSLATE
  Report("#Stock# List",INRClass,InvValRn,0,modIN); //!!TRANSLATE
  Report("#Stock# Out Journal",StockJOutRClass,StockOutRn,0,modIN); //!!TRANSLATE
  Report("#Stocktaking# Comparison",STCompRClass,STCompRn,0,modIN); //!!TRANSLATE
  Report("#Stocktaking# List",StockTakeRClass,StockTakeRn,0,modIN); //!!TRANSLATE
  Report("#Supplier#/Item Statistics",VeInRClass,VeInRn,0,modIN); //!!TRANSLATE

  if (HasLocalization("PRT")) then begin
    Export("Inventory List for Tax Authorities",PRTInventoryEClass,PRTInventoryEn,modIN); //!!TRANSLATE
  end;

  Maintenance("#Stocktaking# Comparison",STCompVClass,STCompMn,modIN); //!!TRANSLATE
  
/* modSY */

  if ((ClientMode and LicenseMode==kLicenseModeServer) or HasPersons or HasDeveloperMode) then begin
    RegisterWS("Persons","Persons","New Person",UserVc,modSY); //!!TRANSLATE
  end else begin
    RegisterWS("Persons","Persons","",UserVc,modSY); //!!TRANSLATE
  end;

  if (HasMultiCurrency or HasBase2) then begin
    RegisterWS("Валюты","Валюты","Новая валюта",CurncyCodeVc,modSY); 
  end;
  if (HasMultiCurrency) then begin
    RegisterWS("Курсы обмена","Курсы обмена","Курс обмена",ERVc,modSY);
  end;
  if (HasFormEditor) then begin
    if (GuiType!=kGuiiPhone) then begin
      RegisterWS("Формы","Формы","Новая форма",DocVc,modSY);
    end;
    RegisterWS("Styles","Styles","New Style",StyleVc,modSY); //!!TRANSLATE
  end;
  if (HasModSL==false) then begin
    if (HasModNL or HasIncomeAndExpenseBook) then begin
      RegisterWS("Accounts","Accounts","New Account",AccVc,modSY); //!!TRANSLATE
    end;
  end;

  if (HasAccessGroups) then begin
    Setting("Access Groups",AccessLClass,modSY); //!!TRANSLATE
  end;
  if (LicenseMode==kLicenseModeServer or ClientMode) then begin
    Setting("Active Users",ListUsersClass,modSY); //!!TRANSLATE
  end;
//  if (HasBase2 or (HasEInvoicing and HasLocalization("NOR,SWE"))) then begin
  if (HasBase2) then begin
    Setting("Base Currency",BaseCurTClass,modSY); //!!TRANSLATE
  end;
  if (HasBase2) then begin
    Setting("Base Currency Rates",BaseERLClass,modSY); //!!TRANSLATE
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Brazilian Invoice Types",BrazilEInvTypeLClass,modSY); //!!TRANSLATE
  end;
  Setting("Companies",CompaniesTClass,modSY); //!!TRANSLATE
  if (HasStandardCRM or HasStandardCommunicator or HasStandardOrganizer) then begin
    Setting("Company Date and Numeric Format",SysFormatTClass,modSY); //!!TRANSLATE
  end;
  Setting("Company Info",CYWClass,modSY); //!!TRANSLATE
  if (LicenseMode==kLicenseModeServer) then begin
    Setting("Configure Users",ConfigureUsersTClass,modSY);
  end;
  if (HasContactClassification and HasModSL==false) then begin
    Setting("Contact Classifications",CClassLClass,modSY); //!!TRANSLATE
  end;
  if (HasMultiCurrency or HasBase2) and (HasIntegratedNL) then begin
    Setting("Conversions - Master",ConvMasterTClass,modSY); //!!TRANSLATE
    Setting("Conversions - Accounts and #VAT Code#",ConvAccTClass,modSY); //!!TRANSLATE
    Setting("Conversions - Contacts",ConvCustTClass,modSY); //!!TRANSLATE
    Setting("Conversions - Currency Codes",ConvCurncyCodeTClass,modSY); //!!TRANSLATE
    Setting("Conversions - Items",ConvItemTClass,modSY); //!!TRANSLATE
    Setting("Conversions - Users",ConvUserTClass,modSY); //!!TRANSLATE
  end;
  if (HasLocalization("BRA,PRT")==false) then begin
    Setting("Countries",CountryLClass,modSY);  
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Districts",DistrictLClass,modSY); //!!TRANSLATE
  end;
  if (IsUsingActivationCodes) then begin
    Setting("Internet Enablers",InternetEnablerTClass,modSY);
  end;
  if (HasModSL==false) then begin
    if (HasModNL or HasIncomeAndExpenseBook) then begin
      Setting("Account Usage",AccTClass,modSY); //!!TRANSLATE
    end else begin
      Setting("Invoice Settings",AccTClass,modSY);
    end;
  end;
  if (HasModSL==false and HasLocalization("PRT")) then begin
    Setting("Item Groups",ITLClass,modSY); //!!TRANSLATE
  end;
  if (HasLocalMachines or HasFiscalPrinter) then begin
    Setting("Local Machine",LocalMachineTClass,modSY); //!!TRANSLATE
  end;
  if (HasFiscalPrinter) then begin
    Setting("Local Machines",LocalMachineLClass,modSY); //!!TRANSLATE
    Setting("Local Serial Port Devices",LSerialPortDeviceLClass,modSY); //!!TRANSLATE
    Setting("Local Machine Serial Port Devices",SerialPortDeviceLClass,modSY); //!!TRANSLATE
  end;
  if (HasKPIs) then begin
    Setting("KPIs",KPIDefLClass,modSY); //!!TRANSLATE
  end;
  if (HasLanguages) then begin
    Setting("Languages",LangTClass,modSY);  //!!TRANSLATE
  end;
  if (HasModNL or HasIncomeAndExpenseBook) then begin
    Setting("Locking",DBLockTClass,modSY); //!!TRANSLATE
  end;
  if (HasFiscalPrinter and HasLocalization("SVN")) then begin
    Setting("Main Premise",CYAWClass,modSY); //!!TRANSLATE
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Municipalities",MunicipalityLClass,modSY); //!!TRANSLATE
  end;
  if (HasLocalization("FIN")) then begin
    Setting("Optional Features",UXFTClass,modSY); //!!TRANSLATE
  end;
  if (HasObjects and (HasModNL==false and HasIncomeAndExpenseBook==false)) then begin
    Setting("Tags/Objects",ObjLClass,modSY); //!!TRANSLATE
    Setting("Tag/Object Types",OTLClass,modSY); //!!TRANSLATE
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Operation Types",OperationTypeLClass,modSY); //!!TRANSLATE
  end;
  if (HasPriceLists) then begin
    Setting("Price Lists",PLDefLClass,modSY); //!!TRANSLATE
    Setting("Prices",PLLClass,modSY); //!!TRANSLATE
  end;

  Setting("Reporting Periods",PeriodTClass,modSY); //!!TRANSLATE
  Setting("Round Off",RoundTClass,modSY); //!!TRANSLATE
  if (HasModNL==false) then begin
    if (HasLocalization("BRA,HRV,LVA")) then begin
      Setting("Налоговые шаблоны",TaxTemplateLClass,modSY);
      Setting("Transaction Settings",TrTClass,modSY);
      Setting("Tax Rules",TaxRulesLClass,modSY);      
    end;
    if (HasLocalization("KEN")) then begin
      Setting("Налоговые шаблоны",TaxTemplateLClass,modSY);
    end;
  end;
  Setting("Units",UnitLClass,modSY); //!!TRANSLATE
  if (HasLanguages) then begin
    Setting("Values in Text",LangNrLClass,modSY); //!!TRANSLATE
  end;
  if (HasModNL==false and HasIncomeAndExpenseBook==false) then begin
    Setting("#VAT# Codes",VATCodeTClass,modSY);  //!!TRANSLATE
  end;
  if ((HasNumberSeries or HasLocalization("LVA")) and (HasOfficialSerNr or HasInvoiceOfficialSerNr)) or (HasFiscalPrinter and HasLocalization("SVN")) then begin
    Setting("Legal Invoice Numbers",LegalInvNrTClass,modSY); //!!TRANSLATE
  end;  
  if (HasLocalization("HRV,SVN,SRB")) then begin
    Setting("XML Schema Definitions",XMLExportLClass,modSY); //!!TRANSLATE
  end;
  
  Report("Company Info",CompInfoRClass,CompInfoRn,0,modSY);
  if (HasModSL==false) then begin
    Report("Contact List",CURClass,CustRn,0,modSY); //!!TRANSLATE
    if (HasMultiCurrency or HasBase2) then begin
      Report("Exchange Rates",ERDateRClass,ERDateRn,0,modSY);
    end;
    if (HasLocalization("RUS")) then begin
      Report("Order Journal",ORJRClass,OrdRn,0,modSY); //!!TRANSLATE
    end else begin
      Report("Invoice Journal",IVJRClass,InvoiceRn,0,modSY); //!!TRANSLATE
    end;
    Report("Item List",ArtRClass,ArtRn,0,modSY); //!!TRANSLATE
    if (HasLocalization("LTU")) then begin
      Report("#VAT# Report Sales",SLVATLitRClass,SLVATLitRn,0,modSY);   //!!TRANSLATE
    end;
  end else begin
    if (HasMultiCurrency or HasBase2) then begin
      Report("Exchange Rates",ERDateRClass,ERDateRn,0,modSY);
    end;
  end;

  if (HasRegistersExports) then begin
    Export("Base Registers",GBaseEClass,GBaseEn,modSY); //!!TRANSLATE
  end;
  if (GuiType!=kGuiiPhone) then begin
    Export("Database Text Backup",TBDatabaseEClass,DatabaseTBEn,modSY);
  end;
  if (HasRegistersExports) then begin
    Export("Item Base Registers",GItemBaseEClass,GItemBaseEn,modSY); //!!TRANSLATE
  end;
  if (HasLocalization("HRV")) then begin
    Export("Register Export",ExpRegEClass,ExpRegEn,modSY);
  end;  
  if (GuiType!=kGuiiPhone) then begin
    Export("Run Timed Backup",TBRunTimedEClass,RunTimedTBEn,modSY);
  end;
  if (HasRegistersExports) then begin
    Export("System Data",SysEClass,SysEn,modSY); //!!TRANSLATE
  end;
  if (HasModSL==false) then begin
    if (HasLocalization("PRT")) then begin
      Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modSY); //!!TRANSLATE
    end;    
    if (HasLocalization("LTU")) then begin
      Export("#S/L# #VAT# Invoices (Lithuania)",LitVATRegIVEClass,LitVATRegIVEn,modSY); //!!TRANSLATE
    end;
  end;
  if (HasRegistersExports) then begin
    Export("Transaction Registers",GTransEClass,GTransEn,modSY); //!!TRANSLATE
    Export("Transaction Registers (period)",GTrans2EClass,GTrans2En,modSY);   //!!TRANSLATE
  end;
  
  Import("Automatic",0,FullyAutIn,modSY);
  Import("Manual file search",0,AutIn,modSY); //!!TRANSLATE
  Import("Удалённая резервная копия",RemoteInIClass,RemoteIn,modSY);

  if (HasIntegratedNL) then begin
    Maintenance("Create #N/L# Transactions",TransGenVClass,GenTransMn,modSY); //!!TRANSLATE
  end;
  if (HasLocalization("HRV")) then begin
    Maintenance("Invoices without Official No.",XMLExportVClass,XMLExportMn,modSY); //!!TRANSLATE
  end;
  if (HasLocalization("POL")) then begin
    Maintenance("Fill-in Invoice No.",FillinIVNrVClass,FillinIVNrMn,modSY); //!!TRANSLATE
    Maintenance("Fill-in Receipt No.",FillinIPNrVClass,FillinIPNrMn,modSY); //!!TRANSLATE
  end;
  if (ClientMode and HasServerInCloud) then begin  
    Maintenance("Upload Logo File",UploadLogoFileVClass,UploadLogoFileMn,modSY);   //!!TRANSLATE
  end;

  end;  

  return;
end;
