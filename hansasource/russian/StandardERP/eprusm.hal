/* epengm.hal */
/* This is no longer an Event, make sure you don't have this in */
external function Boolean HasPersons();
external function Boolean HasModQT();
external function Boolean HasSerialNumbers();
external function Boolean HasModAT2();
external function Boolean HasModCL();
external function Boolean HasModCO();
external function Boolean HasStandardCRM();
external function Boolean HasModExp();
external function Boolean HasSalesmanBonus();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();
external function Boolean HasModSO();
external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModSL();
external function Boolean HasModPL();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModRest();
external function Boolean HasModCRM();
external function Boolean HasEMail();
external function Boolean HasModSVO();
external function Boolean HasModProd();

external function Boolean HasAccessGroups();
external function Boolean HasAccountRecon();
external function Boolean HasAdvancedPricing();
external function Boolean HasBase2();
external function Boolean HasCategories();
external function Boolean HasContactClassification();
external function Boolean HasFormEditor();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLocalMachines();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNumberSeries();
external function Boolean HasObjects();
external function Boolean HasPriceLists();
external function Boolean HasReturnedGoods();
external function Boolean HasRetGoodsToSupp();
external function Boolean HasVarieties();
external procedure SetProductTags();
external procedure LoadWindowTags();

//event startup
begin

  SetLangMode(LangRussian,"RUS",0);
  
  if (BuildProductCode=="StandardERP") then begin

  SetProductTags;
  LoadWindowTags;

/* The modules should keep there codes even if we rename the modules. The code is part of the Export format */
  if (HasModCL) then begin
    Module("Кассовая книга","",730,modCL);
  end;
  Module("Финансы","",730,modNL);
  if (HasModCO) then begin
    Module("Контракты","",730,modCO);
  end;
  if (HasModCRM or HasStandardCRM) then begin
    Module("CRM","",730,modCRM);
  end;
  
  if (HasEMail) then begin
    Module("Электронная почта","",730,modEmail);
  end;
  if (HasModExp) then begin
    Module("Затраты","",730,modExp);
  end;
  if (HasModPOS and HasLocalization("PRT")==false) then begin
    Module("POS","",730,modPOS);  
  end;
  Module("Ценообразование","",730,modDI);
  if (HasModProd and (HasLocalization("KEN,ZWE"))) then begin
    Module("Производство","",730,modProd);
  end;
  Module("Расчеты с поставщиками","",730,modPL);
  Module("Заказы поставщикам","",730,modPO);
  Module("Счета клиентам","",730,modQT);
  Module("Расчеты с клиентами","",730,modSL);
  Module("Счета клиентам","",730,modSO);
  if (HasModSVO and (HasLocalization("ZWE") or HasLocalization("KEN"))) then begin
    Module("Заказы на обслуживание","",730,modSVO);
  end;
  Module("Склад","",730,modIN);
  Module("Система","",730,modSY);


  // debug
  if (TestEnablerFile("DbgLics")) then begin
    Setting("Cloud Services",EnabServerTClass,modSY);
    Setting("Configuration",ModulesTClass,modSY);
    Setting("Current License Flags",CurLicensesClass,modSY);
    if (IsUsingActivationCodes==false) then begin
      Setting("Internet Enablers",InternetEnablerTClass,modSY);
    end;
    Setting("Licenses",LicensesLClass,modSY);
    Register("Почтовые ящики","Почтовые ящики",ConferenceWClass,modSY);
    Setting("Services Cache",ServiceCacheLClass,modSY);
    Setting("Std Registration Data",StdRegDataWClass,modSY);
  end;

  if (HasMultiCurrency or HasBase2) then begin
    Register("Валюты","Валюты",CurncyCodeVc,modSY); 
  end;
  if (HasMultiCurrency) then begin
    Register("Курсы обмена","Курсы обмена",ERVc,modSY);
  end;
  if (HasFormEditor) then begin
    if (GuiType!=kGuiiPhone) then begin
      Register("Формы","Формы",DocVc,modSY);
    end;
    Register("Стили","Стили",StyleVc,modSY);
  end;
  if (TestEnablerFile("DbgLics") or HasPersons) then begin
    Register("Сотрудники","Сотрудники",UserVc,modSY);
  end;  

//  if (HasStandardCRM or HasStandardCommunicator or HasStandardOrganizer) then begin // New in-app : HasAccessGroups
  if (HasAccessGroups) then begin
    Setting("Группы доступа",AccessLClass,modSY);
  end;
  if (HasStandardCRM or HasStandardCommunicator or HasStandardOrganizer) then begin
    Setting("Активные пользователи",ListUsersClass,modSY);
  end;
  if (HasBase2) then begin
    Setting("Базовая валюта 2",BaseCurTClass,modSY);
    Setting("Курсы основных валют",BaseERLClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Brazilian Invoice Types",BrazilEInvTypeLClass,modSY);
  end;
  if (HasStandardCRM or HasStandardCommunicator or HasStandardOrganizer) then begin
    Setting("Компании",CompaniesTClass,modSY);
    Setting("Формат даты и чисел",SysFormatTClass,modSY);
  end;
  Setting("Информация о компании",CYWClass,modSY);
  if (LicenseMode==kLicenseModeServer) then begin
    Setting("Configure Users",ConfigureUsersTClass,modSY);
  end;
  if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
    Setting("Конвертации - Мастер",ConvMasterTClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Районы",DistrictLClass,modSY);
  end;
/*  
  if (UseAppStoreEnabler==false) then begin
    Setting("Интернет ключи",InternetEnablerTClass,modSY);
  end;
*/  
  if (IsUsingActivationCodes) then begin
    Setting("Интернет ключи",InternetEnablerTClass,modSY);
  end;
  if (HasKPIs) then begin
    Setting("КПЭ",KPIDefLClass,modSY);
  end;
  if (HasLanguages) then begin
    Setting("Языки",LangTClass,modSY); 
  end;
  if (HasModNL) then begin
    Setting("Locking",DBLockTClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Municipalities",MunicipalityLClass,modSY);
  end;
  if (HasLocalization("BRA")) then begin
    Setting("Операционные типы",OperationTypeLClass,modSY);
  end;

  Setting("Отчётные периоды",PeriodTClass,modSY);
  if (HasLanguages) then begin
    Setting("Значения в тексте",LangNrLClass,modSY);
  end;
  if (HasNumberSeries or HasLocalization("LVA")) then begin
    Setting("Официальные номера сч-ф",LegalInvNrTClass,modSY);
  end;  
  
  Report("Информация о компании",CompInfoRClass,CompInfoRn,0,modSY);

  Export("Базовые регистры",GBaseEClass,GBaseEn,modSY);
//Export("Company Text Backup",TBEClass,CompanyTBEn,modSY);
  if (GuiType!=kGuiiPhone) then begin
    Export("Текстовый бэкап базы",TBDatabaseEClass,DatabaseTBEn,modSY);
  end;
  Export("Remote Backup",TBRemoteEClass,RemoteTBEn,modSY);
  if (HasModIN or HasModSL or HasStandardCRM or HasMultiLocations or HasModPL or HasAdvancedPricing) then begin
    Export("Регистры базовых товаров",GItemBaseEClass,GItemBaseEn,modSY);
  end;
  Export("Системные даннын",SysEClass,SysEn,modSY);
  Export("Записи операций",GTransEClass,GTransEn,modSY);
  Export("Регистры записей (период)",GTrans2EClass,GTrans2En,modSY);
  
  Import("Автоматически",0,FullyAutIn,modSY);
  Import("Найти вручную",0,AutIn,modSY);
  Import("Remote backup",RemoteInIClass,RemoteIn,modSY);

//  if (HasModIN or HasModSL or HasModPL or HasModPOS or HasModAT2 or HasModCL or HasModExp or HasModPO) and (HasModNL) then begin
  if (HasModNL) then begin
    Maintenance("Создать записи операций",TransGenVClass,GenTransMn,modSY);
  end;
  Maintenance("Сброс данных приложения",ResetDBWClass,0,modSY);
  Maintenance("Послать приглашение новому пользователю",SubscriptionInvitationVClass,SubscriptionInvitationMn,modSY);

/* modNL */
  
  Register("Записи операций","Записи операций",TRVc,modNL);
  if (HasLocalization("AGO,PRT")) then begin
    Register("Симуляции","Симуляции",SMVc,modNL);  
  end;
  if (HasAccountRecon) then begin
    Register("Сверка счетов","Сверка счетов",BankRecWClass,modNL);
  end;  
  Register("Начальные сальдо","Начальные сальдо",FBVc,modNL);
  Register("План счетов","План счетов",AccVc,modNL);

  if (HasLocalization("KEN,NAM,ZAF,ZWE")) then begin
    Setting("Отчётные периоды",AccPeriodLClass,modNL);
  end;
  if (HasLocalization("AGO,POL,PRT")) then begin
    Setting("Трансферы между счетами",AccTransLClass,modNL);
  end;
  Setting("Финансовые года",YearTClass,modNL);
  if (HasNumberSeries) then begin
    if (HasLocalization("PRT")) then begin
      Setting("Серии номеров - симуляции",SMSerTClass,modNL);
    end;
    Setting("Серии номеров - Записи операций",TRSerTClass,modNL);
  end;
  if (HasObjects) then begin
    Setting("Объекты",ObjLClass,modNL);
    Setting("Управление типами объектов",OTCheckTClass,modNL);
    Setting("Типы объектов",OTLClass,modNL);
  end;
//  if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
//    Setting("Rate Gain/Loss",NLRateTClass,modNL);
//  end;
  Setting("Настройки отчетов",Rs2WClass,modNL);
  Setting("Записи из подсистем",TRGenTClass,modNL);
  Setting("Контрольные счета вспомогательной книги",SLAccTClass,modNL);  
  if (HasLocalization("BRA,HRV,LVA")) then begin
    Setting("Правила налогов",TaxRulesLClass,modNL);
    Setting("Шаблоны налогов",TaxTemplateLClass,modNL);
    Setting("Настройки записей операций",TrTClass,modNL);
  end;
  if (HasLocalization("KEN")) then begin
    Setting("Шаблоны налогов",TaxTemplateLClass,modNL);
    Setting("Настройки транзакций",TrTClass,modNL);
  end;
  Setting("Коды НДС",VATCodeTClass,modNL);
  
  Document("Записи операций",TRRClass,TRForm,TRFClass,modNL);

//  Report("Выверка счетов",ACReconRClass,ACRecRn,0,modNL);

  if (HasLocalization("AGO,BRA,POL,PRT")) then begin
    Report("Аналитический баланс",MBARClass,MBARn,0,modNL);
  end;
  Report("Баланс",BalRClass,BalRn,UserDefRepDClass,modNL);
  if (HasAccountRecon) then begin
    Report("Банковское согласование",BankReconRClass,BankRecRn,0,modNL);
  end;
  Report("План счетов",AccListRClass,AccListRn,0,modNL);
  Report("Список коррекций",CorrRClass,CorrRn,0,modNL);
  if (HasLocalization("LTU,LVA")) then begin
    Report("Корреспондирующие счета",CorspRClass,CorspRn,0,modNL);
  end;
  Report("Прогноз ликвидности",LiquidityRClass,LiquidityRn,0,modNL);
  Report("Финансы",MainRClass,MainRn,0,modNL);
  Report("Прибыли и убытки",ResRClass,ResRn,UserDefRepDClass,modNL);
  Report("Журнал операций",TransRClass,TransRn,0,modNL);
  Report("Проверочный баланс",SBRClass,TrialRn,0,modNL);
  if (HasLocalization("POL,PRT")==false) then begin
    Report("Отчёт по НДС, сводный",ALLVATRClass,ALLVATRn,0,modNL);
  end;
  if (HasLocalization("POL")==false) then begin
    Report("Отчёт по НДС",VATRClass,VAT2Rn,UserDefRepDClass,modNL);
  end;

    Report("Журнал транзакций #VAT#",VATTransJRClass,VATTransJRn,0,modNL);
//  end;

  if (HasLocalization("FRA")) then begin
    Export("Экспорт FEC",FrenchFECEClass,FrenchFECEn,modNL);
  end;
  Export("Месячные балансы",MBEClass,MBEn,modNL);
  if (HasLocalization("SWE")) then begin
    Export("SIE (Swedish Export/Import)",SieEClass,SieEn,modNL);
  end;
  Export("Проверочный баланс",SBEClass,SBEn,modNL);
  if (HasLocalization("PRT")) then begin
    Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modNL);
  end;  
  if (HasLocalization("SWE")) then begin
    Import("SIE (Swedish Export/Import)",0,SieIn,modNL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("Периодическая декларация #VAT# (Литва)",LTUVATEClass,LTUVATEn,modNL);
  end;

  if (HasLocalization("AGO,POL,PRT")) then begin
    Maintenance("Account Balance Transfer",AccTransVClass,AccTransMn,modNL);
  end;

/* modPL */

  Register("Сч-ф поставщиков","Сч-ф поставщиков",VIVc,modPL);
  Register("Платежи","Платежи",OPVc,modPL);
  Register("Контакты","Контакты",CUVc,modPL);

  if (HasModNL) then begin
    Setting("Записи операций",APAccTClass,modPL);
  end;
  if (HasLocalization("AUS,FIN,GBR,NOR,SWE")) then begin
    Setting("Банковские файлы",BankFileTClass,modPL);
  end;
  if (HasLocalization("FIN,RUS")) then begin
    Setting("Банки",BankLClass,modPL);
  end;
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Расчеты с поставщиками",VISerTClass,modPL);
    Setting("Серии номеров - Платежи",OPSerTClass,modPL);
    if (HasModNL) and (HasLocalization("POL")) then begin
      Setting("Серии номеров - Коррекции НДС",VATVISerTClass,modPL);
    end;
  end;
  Setting("Способы оплаты",PMTClass,modPL);
  Setting("Условия оплаты",PDLClass,modPL);
  if (HasCategories) then begin
    Setting("Категории поставщиков",VGLClass,modPL);
  end;
  if (HasModNL) and (HasLocalization("POL")) then begin
    Setting("НДС коррекции расч. с пост.",VATVILClass,modPL);
  end;
  if (HasLocalization("PRT")) then begin
    Setting("Формула расчета удержания",WHCalcFormLClass,modPL);
    Setting("Налоги удержания",WHTaxTClass,modPL);
  end;  

  if (HasLocalization("LTU,POL")) then begin
    Document("Открыть список неоплаченных счетов поставщика",APSRClass,APSForm,APSFClass,modPL);
  end;
  Document("Платежные формы",OPDRClass,OPDForm,OPDFClass,modPL);
  Document("Платежные списки",OPRClass,OPForm,0,modPL);
  if (HasModNL) then begin
    Document("Сч-ф поставщиков",VIRClass,VIForm,VIFClass,modPL);
  end;

  if (HasLocalization("LTU")) then begin
    Report("Неоплаченные сч/ф поставщиков",APS2RClass,APS2Rn,0,modPL);
  end;
  Report("Прогноз платежей",OPProgRClass,OPProgRn,0,modPL);
  Report("Журнал платежей",OPJRClass,OPJRn,0,modPL);
  Report("Ведомость расчетов с поставщиками",VePer2RClass,VePerRn,0,modPL);
  Report("Журнал сч-ф поставщиков",VIJRClass,VIJRn,0,modPL);
  Report("Кредиторская задолженность",APRClass,APRn,0,modPL);
  Report("Список поставщиков",VERClass,VERn,0,modPL);
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("POL")) and (HasModNL) then begin
    Report("#VAT# Report Purchases",PLVATRepRClass,PLVATRepRn,0,modPL);
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# #Supplier# Purchases",RealSuppRClass,RealSuppRn,0,modPL); 
  end;
  if (HasLocalization("LTU")) then begin
    Report("#VAT# Report Purchases (Lithuania)",PLVATLitRClass,PLVATLitRn,0,modPL);
  end;
  
  if (HasLocalization("AUS,FIN,GBR,NOR,SWE")) then begin
    Export("Банковский файл",MPEClass,MPEn,modPL);
  end;
  if (HasLocalization("LTU")) then begin
    Export("#P/L# #VAT# Invoices (Lithuania)",LitVATRegVIEClass,LitVATRegVIEn,modPL);
  end;
  

/* modSL */
  
  Register("Счета-фактуры","Счета-фактуры",IVVc,modSL);
  Register("Платежи","Платежи",IPVc,modSL);
  Register("Контакты","Контакты",CUVc,modSL);
  Register("Товары","Товары",INVc,modSL);
  if (HasPriceLists) then begin
    Register("Цены","Цены",PLVc,modSL);
  end;
  if (HasLocalization("RUS")) then begin
    Register("Счета клиентам","Счета клиентам",ORVc,modSL);
  end;
  
  if (HasModNL) then begin
    Setting("Записи операций",AccTClass,modSL);
  end;
  Setting("Возрастные ограничения",AgedTClass,modSL);
  if (HasContactClassification) then begin
    Setting("Классификации контактов",CClassLClass,modSL);
  end;
  Setting("Кредитный лимит",CreditLimitTClass,modSL);
  if (HasCategories) then begin
    Setting("Категории клиентов",CCatLClass,modSL);
  end;
//  Setting("Electronic Invoices Customers Data",EInvCULClass,modSL);
//  Setting("Electronic Invoices Settings",EInvoiceTClass,modSL);
//  Setting("Electronic Invoices Queue",EInvoiceQueLClass,modSL);
//  Setting("Electronic Record Statuses",ERecordStatusLClass,modSL);
  if (HasModNL and HasModPL and HasMultiCurrency) then begin
    Setting("Внутренние сч-ф",IntIVLClass,modSL);
  end;

  if (HasModNL==false) then begin
    Setting("Настройки сч-ф",AccTClass,modSL);
  end;
  if (HasItemClassification) then begin
    Setting("Классификации товаров",DILClass,modSL);
  end;
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT,ZWE")) then begin
    Setting("Группы товаров",ITLClass,modSL);
  end;
  if (HasModSL and HasLocalization("ITA,PRT")) then begin
    Setting("Группы товаров удержания",WHITLClass,modSL);
  end;
  if (HasNumberSeries or HasLocalization("HRV,LVA")) then begin
    Setting("Legal Invoice Numbers",LegalInvNrTClass,modSL);
  end;  
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Сч-ф",IVSerTClass,modSL);
    Setting("Серии номеров - Платежи",IPSerTClass,modSL);
    if (HasModNL) and (HasLocalization("POL")) then begin
      Setting("Серии номеров - НДС коррекции",VATIVSerTClass,modSL);
    end;
  end;
  Setting("Способы оплаты",PMTClass,modSL);
  Setting("Условия оплаты",PDLClass,modSL);
  if (HasPriceLists) then begin
    Setting("Прайслисты",PLDefLClass,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Setting("Reference Number Settings",CalcRefTClass,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Setting("Standard Problems",StandProblemLClass,modSL);
  end;
  
  Setting("Единицы",UnitLClass,modSL);
  if (HasLocalization("POL")) and (HasModNL) then begin
    Setting("#VAT# Corrections #S/L#",VATIVLClass,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Setting("Коды НДС",VATCodeTClass,modSL); 
  end;  
  if (HasLocalization("PRT,ITA") and (HasModPL or HasModSL)) then begin
    Setting("Withholding Calculation Formulae",WHCalcFormLClass,modSL);
    Setting("Withholding Taxes",WHTaxTClass,modSL);
  end;    

  Document("Кассовый ордер",KIVRClass,CashInvForm,CashFClass,modSL);
  Document("Кредит-нота",CIVRClass,CredInvForm,CredFClass,modSL);
  Document("Этикетки товаров",CuLabRClass,CuLabForm,CuLabFClass,modSL);
  if (HasLocalization("POL")) then begin
    Document("Debtors Letter",DebtLetRClass,DebtorLetForm,DebtLetFClass,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Document("Interest Invoices",IIVRClass,IIInvForm,IIFClass,modSL);
  end;
  Document("Сч-ф",IVRClass,InvForm,InvFClass,modSL);
  if (HasLocalization("PRT")) then begin
    Document("Invoice/Receipt's",KIVRClass,CashInvRecPRTForm,CashRecPRTFClass,modSL);
  end;
  Document("Неоплаченные сч-ф клиентов",ARSRClass,ARSForm,ARSFClass,modSL);
  Document("Ведомость расчетов с клиентами",CuPerRClass,CuPerForm,CuPerFClass,modSL);
  if (HasLocalization("POL")) then begin
    Document("Proforma Invoices",Inv1RClass,Inv1Form,Inv1FClass,modSL);
  end;
  Document("Receipt Forms",IPDRClass,IPDForm,IPDFClass,modSL);
  if (HasLocalization("POL")) then begin
    Document("Reminders",RemRClass,RemForm,RemFClass,modSL);
  end;

  if (HasSalesmanBonus) then begin
    Report("Бонус, #Salesman#",BonusRClass,BonusRn,0,modSL);
  end;
  Report("Список контактов",CURClass,CustRn,0,modSL);
  Report("Статистика товаров по клиентам",CuArtSTRClass,CuArtSTRn,0,modSL);
  Report("Статистика клиентов",CustSTRClass,CustSTRn,0,modSL);
//  Report("Electronic Invoice Status",HTSStatIVRClass,HTSStatIVRn,0,modSL);
  if (HasLocalization("LTU")) then begin
    Report("Продажи #VAT# ЕС",SLEUVATRClass,SLEUVATRn,0,modSL);
  end;
  Report("Журнал сч-ф",IVJRClass,InvoiceRn,0,modSL);
  Report("Список товаров",ArtRClass,ArtRn,0,modSL);
  Report("Статистика товаров",ArtSTRClass,ArtSTRn,0,modSL);
  if (HasSalesmanBonus) then begin
    Report("Статистика: товар/продавец",IStatRClass,IStatRn,0,modSL);
  end;
  Report("Неоплаченные сч-ф клиентов",ARS2RClass,ARS2Rn,0,modSL);
  Report("Ведомость расчетов с клиентами",CuPer2RClass,CuPerRn,0,modSL);
  if (HasPriceLists) then begin
    Report("Прейскурант",PriceRClass,PriceRn,0,modSL);
  end;
  Report("Прогноз платежей",IPProgRClass,IPProgRn,0,modSL);
  Report("Журнла платежей",IPRClass,IPRn,0,modSL);
  Report("Расчеты с клиентами",ARRClass,ARRn,0,modSL);
  if (HasLocalization("PRT")) then begin
    Report("#VAT Code# Statistics",SLVATRClass,SLVATRn,0,modSL);
  end;
  if (HasLocalization("POL")) and (HasModNL) then begin
    Report("#VAT# Report Sales",SLVATRepRClass,SLVATRepRn,0,modSL);
  end;
  if (HasLocalization("LTU")) then begin
    Report("#VAT# Report Sales (Lithuania)",SLVATLitRClass,SLVATLitRn,0,modSL);  
  end;
  if (HasLocalization("PRT")) then begin
    Report("#VAT# Customer Sales",RealCustRClass,RealCustRn,0,modSL);
  end;
  
  if (HasEMail) then begin
    Maintenance("Cоздать E-mail ведомости расчетов с клиентами",CUPerEmailVClass,CUPerEmailMn,modSL); // We have this belowe SendPerStatVClass
  end;  
  if (HasModNL) then begin
    if (HasLocalization("PRT,ZWE")) then begin
      Maintenance("Transfer to Bad Debtors",BadCUVClass,BadCUMn,modSL);
    end;
  end;
  if (HasLocalization("PRT")) then begin
    if (HasEMail) then begin
      Maintenance("SAFT через электронную почту",SAFTtoEmailVClass,SAFTtoEmailMn,modSL);
    end;
  end;  
  
  if (HasLocalization("PRT")) then begin
//  Export("Передача счетов AT - SAFT",PortTaxXml2EClass,PortTaxXml2En,modSL);    
  end;
  if (HasLocalization("LTU")) then begin
    Export("Продажи #VAT# ЕС (Литва)",SLEUVATLitECLass,SLEUVATLitEn,modSL);
  end;
  if (HasLocalization("FIN")) then begin
    Export("Финсчёт (Finvoice)",FInvoiceEClass,FInvoiceEn,modSL);
  end;
  if (HasLocalization("BRA")) then begin
    Export("Фискальная нота для услуг",BraFiscalNoteEClass,BraFiscalNoteEn,modSL); 
  end;
  if (HasLocalization("LTU")) then begin
    Export("Счета #S/L# #VAT# (Литва)",LitVATRegIVEClass,LitVATRegIVEn,modSL);
  end;
  if (HasLocalization("PRT")) then begin
    Export("SAFT (Португалия)",PortTaxXmlEClass,PortTaxXmlEn,modSL);
  end;
  
  if (HasLocalization("FIN")) then begin
    Import("Банковский файл",RefIPIn,RefIPIn,modSL);
  end;  
  if (HasLocalization("BRA")) then begin
    Import("Fiscal Note for Services Reply",0,BraFiscalNoteIn,modSL);
  end;
  

/* modSO */
  
  Register("Счета","Счета",ORVc,modSO);
  Register("Контакты","Контакты",CUVc,modSO);
  Register("Товары","Товары",INVc,modSO);
  if (HasItemGroups) then begin
    Register("Группы Товаров","Группы Товаров",ITVc,modSO);
  end;
  if (HasPriceLists) then begin
    Register("Цены","Цены",PLVc,modSO);
  end;

  if (HasModIN) then begin
    Setting("Условия отгрузки",ShipDealLClass,modSO);
  end;
  if (HasModSL) then begin
    Setting("Предоплаты",DownPayTClass,modSO);
  end;
  if (HasModSL==false) then begin
    Setting("Настройки сч/ф",AccTClass,modSO);
  end;
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Счета",ORSerTClass,modSO);
  end;
  Setting("Условия оплат",PDLClass,modSO);
  Setting("Запланированная отгрузка",PlanDeliveryTClass,modSO);
  Setting("Единицы",UnitLClass,modSO);
  
  Document("Счета",ORRClass,OrdForm,OrdFClass,modSO);
  
  if (HasModIN) then begin
    Report("Невыполненная отгрузка",ShipableRClass,ShipableRn,0,modSO);
    Report("Запланированная отгрузка",DeliveryRClass,DeliveryRn,0,modSO);
  end;
  Report("Валовая прибыль по счетам",ORGPRClass,ORGPRn,0,modSO);
  Report("Список товаров",ArtRClass,ArtRn,0,modSO);
  Report("Журнал счетов",ORJRClass,OrdRn,0,modSO);
  Report("Заказанные товары",OrdItemRClass,OrdItemRn,0,modSO);
  if (HasModIN) then begin
    Report("Невыполненные заказы",OrderStockRClass,OrderStockRn,0,modSO);
  end;

/*modPO*/

  Register("Заказы поставщикам","Заказы поставщикам",POVc,modPO);
  Register("Контакты","Контакты",CUVc,modPO);
  Register("Товары","Товары",INVc,modPO);

  if (HasModIN) then begin
    Setting("Условия отгрузки",ShipDealLClass,modPO);
  end;
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Заказы поставщикам",POSerTClass,modPO);
  end;

  Report("Нормативы остатков склада",PurRClass,PurRn,0,modPO);
  Report("Незавершенные заказы",POOrdStockRClass,POOrdStockRn,0,modPO);  
  Report("Журнал заказов",PurOrdJRClass,PurOrdJRn,0,modPO);

  Document("Заказы поставщикам",PORClass,POForm,POFClass,modPO); 

/* modQT */
  Register("Предложения","Предложения",QTVc,modQT);
  if (HasModCRM) then begin
    Register("Контакты","Контакты",CUVc,modQT);
  end;
  Register("Товары","Товары",INVc,modQT);
  if (HasPriceLists) then begin
    Register("Цены","Цены",PLVc,modQT);
  end;
  //Register("Pre Quotations","Pre Quotations",PreQTVc,modQT); no funcionality for this one
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Коммерческие предложения",QTSerTClass,modQT);
  end;
  Setting("Классы коммерческий предложений",QuoteClassTClass,modQT);
  Setting("Настройки коммерческих предложений",QTSettTClass,modQT);

  Document("Счета клиентам",QTRClass,QTForm,QTFClass,modQT);
  if (HasLocalization("PRT")) then begin
    Document("Проформа Инвойс",ProformaQTRClass,ProformaQTForm,ProformaQTFClass,modQT);
  end;
  
  if (HasLocalization("PRT")) then begin
    Report("Журнал проформ инвойс",ProformaIVJRClass,ProformaIVJRn,0,modQT);
  end;
  Report("Журнал принятых предложений",QTHistoryRClass,QTHstRn,0,modQT);
  Report("Незавершенные предложения",QTStkRClass,QTStkRn,0,modQT);
  Report("Предложения в работе",QTPipelineRClass,QTPipelineRn,0,modQT);
  Report("Журнал предложений",QTJRClass,QTJRn,0,modQT);


/* modDI */  
  Register("Товары","Товары",INVc,modDI);
//  Register("Формула Товара","Формула Товара",CPMVc,modDI);
  Register("Талица скидок","Таблица скидок",RebVc,modDI);
  Register("Цены","Цены",PLVc,modDI);
  Register("Прейскуранты","Прейскуранты",PLDefVc,modDI);
  Register("Формула цены","Формула цены",PFormVc,modDI);
//  Register("Скидки от количества","Qty Depend. Discounts",StaffVc,modDI);

  Report("Список таблиц скидок",RebListRClass,RebListRn,0,modDI);
  Report("Статистика скидок",Cust2STRClass,Cust2STRn,0,modDI);
  Report("Список товаров",ArtRClass,ArtRn,0,modDI);
  Report("Список цен",PriceRClass,PriceRn,0,modDI);

  if (HasLocalization("DEN")) then begin
    Import("Импорт цен",INDanIn,INDanIn,modDI);
  end;
  Import("Update Cost Prices import",INPrUpdIn,INPrUpdIn,modDI);

  Setting("Цены от кол-в",PLQLClass,modDI);
  if (HasItemGroups) then begin
    Setting("Группы товаров",ITLClass,modDI);
  end;
  
  Maintenance("Рассчитать цены",CalcPricesVClass,CalcPriceListsMn,modDI);
  Maintenance("Удалить цены",DelPriceListVClass,DelPriceLMn,modDI);
  Maintenance("Обновить базовые цены",ItemPricesVClass,ItemPricesMn,modDI);
  Maintenance("Обновить стоимости",ItemCostPricesVClass,INCostPriceMn,modDI);
        
/* modIN */
  
  if (HasModSO) then begin
    Register("Отгрузки","Отгрузки",SHVc,modIN);
  end;
  Register("Поступления","Поступления",PUVc,modIN);
  Register("Списания","Списания",SDVc,modIN);
  if (HasLocalization("PRT")) then begin 
    Register("Возврат","Возврат",RetVc,modIN);
    Register("Возвраты поставщикам","Возвраты поставщикам",RetPUVc,modIN);
    Register("Инвентаризация","Инвентаризация",StockTakeVc,modIN);
  end else begin
    if (HasReturnedGoods) then begin 
      Register("Возвраты товаров","Возвраты товаров",RetVc,modIN);
    end;
    if (HasRetGoodsToSupp) then begin 
      Register("Возвраты товаров поставщикам","Возвраты товаров поставщикам",RetPUVc,modIN);
    end;  
    Register("Инвентаризация","Инвентаризация",StockTakeVc,modIN);
    Register("Товары","Товары",INVc,modIN);
//    Register("Контакты","Контакты",CUVc,modIN);
  end;
  if (HasMultiLocations) then begin 
    if (HasModSO and HasReturnedGoods and HasRetGoodsToSupp) then begin
      Register("Перемещения","Перемещения",StockMovVc,modIN);
    end else begin
    Register("Склады","Склады",LocationVc,modIN);
      Register("Перемещения","Перемещения",StockMovVc,modIN);
    end;
  end;

  if (HasModNL) then begin
    Setting("Записи операций",INAccTClass,modIN); 
  end;
  Setting("Штрих кода",BarcodeLClass,modIN);    
  if (HasModCRM) then begin
    Setting("Контакты",CULClass,modIN);
  end;
  Setting("Учет стоимостей",CostAccTClass,modIN);
  if (HasItemGroups) then begin
    Setting("Группы товаров",ITLClass,modIN);
  end;
  Setting("Товары",INLClass,modIN);
  if (HasVarieties) then begin
    Setting("Варианты товаров",VARLClass,modIN);
    Setting("Группы вариантов товаров",VARGLClass,modIN);
  end;
  if (HasModSO and HasReturnedGoods and HasRetGoodsToSupp) then begin
    Setting("Locations",LocationLClass,modIN);
  end;
  if (HasNumberSeries) then begin
    if (HasModSO) then begin
      Setting("Серии номеров - Отгрузки",SHSerTClass,modIN);
    end;
    if (HasNumberSeries and HasLocalization("PRT")) then begin 
      Setting("Серии номеров - Возвраты",RetSerTClass,modIN);
      Setting("Серии номеров - Возвраты поставщикам",RetPUSerTClass,modIN);
    end;
    Setting("Серии номеров - Поступления",PUSerTClass,modIN);
    Setting("Серии номеров - Списания",SDSerTClass,modIN);
    if (HasNumberSeries and HasLocalization("PRT")) then begin 
      if (HasMultiLocations) then begin 
        Setting("Серии номеров - Перемещения",StockMovSerTClass,modIN);
      end;
    end;
    Setting("Серии номеров - Инвентаризация",StockTakeSerTClass,modIN);
  end;
  if (HasMultiLocations) then begin 
    Setting("Настройки склада",MainStockTClass,modIN);
  end;
  if (HasVarieties) then begin
    Setting("Маски вариантов",VARMaskTClass,modIN);
    Setting("Наборы вариантов",VARMasksLClass,modIN);
    Setting("Настройки вариантов",VarietyTClass,modIN);
    Setting("Доп. наборы вариантов",VARSubsetsLClass,modIN);
  end;

  if (HasModSO) then begin
    Document("Этикетки адресов",AdrLabRClass,AdrLabForm,AdrLabFClass,modIN);
    Document("Уведомление об отгрузке",Sh1RClass,Sh1Form,Sh1FClass,modIN);
    Document("Этикетки фрахта",SHLabRClass,SHLabForm,SHLabFClass,modIN);
  end;
  Document("Этикетки товаров поставщика",PULabRClass,PULabForm,PULabFClass,modIN);
  Document("Поступление",PurchaseRClass,PurchaseForm,PurchaseFClass,modIN);
  Document("Этикетки товаров",ItemLabelRClass,ItemLabelForm,ItemLabelFClass,modIN);
  if (HasModSO) then begin
    Document("Отгрузка",Sh2RClass,Sh2Form,Sh2FClass,modIN);
  end;
  if (HasReturnedGoods) then begin 
    Document("Возвраты товаров",RetRClass,RetForm,RetFClass,modIN);
  end;
  if (HasRetGoodsToSupp) then begin 
    Document("Возвращённые товары поставщику #Supplier#",RetPURClass,RetPurchaseForm,RetPUFClass,modIN);  
  end;
  Document("Списание",SDRClass,SDForm,SDFClass,modIN);

  if (HasModPO or HasModSO) then begin
    Report("Нормативы остатков склада",PurRClass,PurRn,0,modIN);
  end;
  if (HasModSO) then begin
    Report("Журнал отгрузок",SHJRClass,ShipRn,0,modIN);
    Report("Список отгрузок",SHListRClass,ShipListRn,0,modIN);
  end;
  Report("Журнал поступлений",PUJRClass,PUJRn,0,modIN);
  Report("История товаров",INrsRClass,INrsRn,0,modIN);
  Report("Список товаров",ArtRClass,ArtRn,0,modIN);
  if (HasSerialNumbers) then begin
    Report("История серийных номеров",SerialNrRClass,SerialNrRn,0,modIN);
  end;
  Report("Журнал списаний",SDJRClass,StockDepRn,0,modIN);
  Report("Журнал оприходования",StockJInRClass,StockInRn,0,modIN);
  Report("Отчёт по складу",INRClass,InvValRn,0,modIN);
  Report("Выбытие со склада",StockJOutRClass,StockOutRn,0,modIN);
  Report("Сравнение инвентаризации",STCompRClass,STCompRn,0,modIN);
  Report("Список инвентаризации",StockTakeRClass,StockTakeRn,0,modIN);
  Report("Статистика Поставщик/Товар",VeInRClass,VeInRn,0,modIN);


  Maintenance("Сравнение инвентаризации",STCompVClass,STCompMn,modIN);
  if (HasModProd) then begin
    Maintenance("Обновить рецепты",UpdRecepyVClass,UpdRecepyMn,modIN);
  end;
//  if (HasLocalization("PRT")) then begin
//    Export("SAFT Stock",PortStockXmlEClass,PortStockXmlEn,modIN);
//  end;

/* modExp */


  Register("Затраты","Затраты",ExpVc,modExp);
  Register("Выплаты","Выплаты",PPVc,modExp);
  if (HasFormEditor) then begin
    Register("Формы","Формы",DocVc,modExp);
  end;

  Setting("Счата",AccLClass,modExp); 
  Setting("Информация о компании",CYWClass,modExp);  
  if (IsUsingActivationCodes) then begin
    Setting("Интернет ключи",InternetEnablerTClass,modExp);
  end;
  Setting("Способы оплаты",PMTClass,modExp); 
/*  
//  if (ClientMode) then begin //or persons which are not supposed to login but they do have expenses
    Setting("Сотрудники",UserLClass,modExp);
//  end;
*/
  Setting("Отчётные периоды",PeriodTClass,modExp);
  if (HasFormEditor) then begin
    Setting("Стили",StyleLClass,modExp); 
  end;
  Setting("Коды НДС",VATCodeTClass,modExp); 

  Document("Затраты",ExpRClass,ExpForm,ExpFClass,modExp);
  Document("Выплаты подотчетным лицам",PPRClass,PersPayForm,PPDFClass,modExp);

  Report("Журнал авансовых отчетов",ExpJRClass,ExpRn,0,modExp);
//  Report("Журнал расчётов с подотчётными лицами",PersPerRClass,PersPerRn,0,modExp);
  Report("Журнал выплат подотчетным лицам",PPJRClass,PPRn,0,modExp);

//  Export("Company Text Backup",TBEClass,CompanyTBEn,modExp);
  if (GuiType!=kGuiiPhone) then begin
    Export("Текстовая копия базы данных",TBEClass,DatabaseTBEn,modExp);
  end;
  Export("Удаленная копия базы данных",TBRemoteEClass,RemoteTBEn,modExp);

  Import("Автоматический",0,FullyAutIn,modExp);
  Import("Ручной поиск файлов",0,AutIn,modExp);

/* modCO */

  Register("Контракты","Контракты",COVc,modCO);
  Register("Счета- фактуры","Счета- фактуры",IVVc,modCO);
  Register("Конткты","Контакты",CUVc,modCO);
  Register("Товары","Товары",INVc,modCO);
  if (HasFormEditor) then begin
    Register("Формы","Формы",DocVc,modCO);
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Register("Валюты","Валюты",CurncyCodeVc,modCO); 
  end;
  if (HasMultiCurrency) then begin
    Register("Курсы","Куосы",ERVc,modCO);
  end;

  Document("Кассовые ордера",KIVRClass,CashInvForm,CashFClass,modCO);
  Document("Котнракты",ContractRClass,ContractForm,ContractFClass,modCO);
  Document("Кредитные сч/ф",CIVRClass,CredInvForm,CredFClass,modCO);
  Document("Счета - фактуры",IVRClass,InvForm,InvFClass,modCO); 
  Document("Ведомость расчетов с клиентами",CuPerRClass,CuPerForm,CuPerFClass,modCO);
  Document("Платежные документы",IPDRClass,IPDForm,IPDFClass,modCO);

  Setting("Информация о компании",CYWClass,modCO); 
  if (LicenseMode==kLicenseModeServer) then begin
    Setting("Конфигурация пользователей",ConfigureUsersTClass,modCO);
  end;
  Setting("Типы контрактов",ContractClassTClass,modCO);
  Setting("Постоянные контракты",CODefValTClass,modCO);
//  Setting("Contract Settings",ContractSetTClass,modCO);
//  Setting("Customer Contract Defaults",CUCODefValLClass,modCO);
//  Setting("Renew Contracts",RenewCOLClass,modCO);
//  Setting("Credit Limit",CreditLimitTClass,modCO);
//  Setting("Interest",IITClass,modCO);
//  Setting("Info in Customer Status Report",CustPSLClass,modCO);
  Setting("Настройки записей - сч/ф",AccTClass,modCO);
/*  
  if (UseAppStoreEnabler==false) then begin
    Setting("Internet Enablers",InternetEnablerTClass,modCO);
  end;
*/  
  if (HasItemClassification) then begin
    Setting("Классификации товаров",DILClass,modCO);
  end;
  if (IsUsingActivationCodes) then begin
    Setting("Интернет ключи",InternetEnablerTClass,modSY);
  end;
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT,ZWE")) then begin
    Setting("Группы товаров",ITLClass,modCO);
  end;
  if (HasNumberSeries or HasLocalization("LVA")) then begin
    Setting("Legal Invoice Numbers",LegalInvNrTClass,modCO);
  end;    
  Setting("Способы оплаты",PMTClass,modCO);
  Setting("Условия оплаты",PDLClass,modCO);
  Setting("Отчётные периоды",PeriodTClass,modCO);
  if (HasFormEditor) then begin      
    Setting("Стили",StyleLClass,modCO); 
  end;
  Setting("Единицы",UnitLClass,modCO);
  Setting("Коды НДС",VATCodeTClass,modCO); 

  Report("Контактные лица",Contra2RClass,Contra2Rn,0,modCO);
  Report("История контрактов",COHistRClass,COHistRn,0,modCO);
//  Report("Contract Item Statistics",COINStatisticsRClass,COINStatisticsRn,0,modCO);
  Report("Список контрактов",CORClass,CORn,0,modCO);

  Report("Стоимость контрактов",COworthRClass,COworthRn,0,modCO);

  Report("Список контактов",CURClass,CustRn,0,modCO);

  Report("Журнал сч/ф",IVJRClass,InvoiceRn,0,modCO);
  Report("Контракты с возможностью фактурирования",COInvRClass,COInvRn,0,modCO);
  Report("Item List",ArtRClass,ArtRn,0,modCO);

  Maintenance("Закрытие неоплаченных контрактов",CancelDueCOVClass,CancelDueCOMn,modCO);
//  Maintenance("Change Contract Currency",ChangeCOCurrencyVClass,ChangeCOCurrencyMn,modCO);
  Maintenance("Изменение контрактов",ChangeCOVClass,ChangeCOMn,modCO);
  Maintenance("Создание сч/ф по контрактам",CreateCOInvVClass,CreateCOInvMn,modCO);
  Maintenance("Возобновить контракты",RenewCOVClass,RenewCOMn,modCO);
  Maintenance("Обновить контракты",UpdateCOVClass,UpdateCOMn,modCO);

  if (HasLocalization("PRT")) then begin
 //  Export("Communication of Invoices to AT - SAFT",PortTaxXml2EClass,PortTaxXml2En,modCO);    
  end;  
  if (GuiType!=kGuiiPhone) then begin
    Export("Текстовая копия базы данных",TBEClass,DatabaseTBEn,modCO);  
  end;
  Export("Удаленная копия базы данных",TBRemoteEClass,RemoteTBEn,modCO);
  if (HasLocalization("PRT")) then begin
    Export("SAFT (Portugal)",PortTaxXmlEClass,PortTaxXmlEn,modCO);
  end;  
  
  Import("Автоматический",0,FullyAutIn,modCO);
  Import("Ручной поиск файлов",0,AutIn,modCO);

/*modPOS*/

  Register("Счета- фактуры","Счета- фактуры",NPTSIVCashLClass,modPOS);
  Register("Контакты","Контакты",CUVc,modPOS);
  Register("Товары","Товары",INVc,modPOS);

    Setting("Cash Events",CashLClass,modPOS);
  Setting("Методы платежей по умолчанию",DefCashTClass,modPOS);
  Setting("Контейнеры",DrawerLClass,modPOS); 
  if (HasLocalization("BRA")) then begin
    Setting("#VAT# Коды, фискальный принтер (Зимбабве)",ZimFiscalPrinterVATCodeTClass,modPOS);
  end;
    if (HasLocalization("ZWE")) then begin
    Setting("#VAT# Коды, фискальный принтер (Зимбабве)",ZimFiscalPrinterVATCodeTClass,modPOS);
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Setting("Валюта оплаты",POSCurrenciesTClass,modPOS);
  end;
  Setting("Балансы POS",POSBalanceLCLass,modPOS);    
  Setting("Кнопки POS",POSButtonsLClass,modPOS);
    Setting("Настройки кассового терминала",CashierDefTClass,modPOS);
  Setting("Сессии POS",POSEventLCLass,modPOS);

  Document("Счета - фактуры",IVCashRClass,InvCashForm,IVCashFClass,modPOS);

    Report("Cash Up",CashupRClass,CashupRn,0,modPOS);
  if (HasModIN) then begin
    Report("Прибыль, сч/ф POS", PIVGPRClass,PIVGPRn,0,modPOS);
  end;
  if (HasModNL) then begin
    Report("Перенос сч/ф POS в главную книгу", TransGenPOSRClass,TransGenPOSRn,0,modPOS);
  end;
  Report("Журнал счетов-фактур POS",IVCJRClass,InvCashRn,0,modPOS);
  if (HasVarieties) then begin
    Report("Варианты товаров",VarEnqRClass,VarEnqRn,0,modPOS);
  end;
  
  if (HasModNL) then begin
    Maintenance("Снятие кассы",CashupVClass,CashupMn,modPOS);
  end;
    Maintenance("Create POS Buttons",CreatePOSButtonsVClass,CreatePOSButtonsMn,modPOS);
  Maintenance("Create Slips #N/L# Trans",NLTransCredCardSlipVClass,NLTransCredCardSlipMn,modPOS);
   if (HasLocalization("HRV")) then begin
     Maintenance("Invoices without Official No.",XMLExportVClass,XMLExportMn,modPOS);
   end;
  if (HasModIN) then begin 
  Maintenance("Update #Stock#",POSUpdStockVClass,POSUpdStockMn,modPOS);
  end;  

/* modCRM */

  Register("Контакты","Контакты",CUVc,modCRM);
  Register("Задачи","Задачи",ActVc,modCRM);
  if (HasModQT) then begin
    Register("Коммерч. предложения","Коммерч. предложения",QTVc,modCRM);
    Register("Товары","Товары",INVc,modCRM);
  end;
  
  Report("Клиенты без/с записями деятельностей",ActCURClass,ActCURn,0,modCRM);
  Report("История звонков",CallHistRClass,CallHistRn,0,modCRM);
  Report("Деятельности по сотрудникам",ActPersRClass,ActPersRn,0,modCRM);
  Report("Очет по дням рождения",BirthDayRClass,BirthDayRn,0,modCRM);
  Report("Список контактов",CURClass,CustRn,0,modCRM);
  Report("Справка по клиенту",CustPSRClass,CustPSRn,0,modCRM);
  if (HasModQT) then begin
    Report("Список товаров",ArtRClass,ArtRn,0,modCRM);
  end;
  Report("Список неправильных телефонных номеров",InvPhoneNoRClass,InvPhoneNoRn,0,modCRM);
  if (HasModQT) then begin
    Report("Список предложений",QTStkRClass,QTStkRn,0,modCRM);
  end;
  Report("Список сотрудников",UserRClass,UserRn,0,modCRM);
  Report("Календарь сотрудников",ActCalRClass,ActCalRn,0,modCRM);
  if (HasModQT) then begin
    Report("Воронка продаж",QTPipelineRClass,QTPipelineRn,0,modCRM);
    Report("Журнал предложений",QTJRClass,QTJRn,0,modCRM);
  end;
  Report("Поиск контактных лиц",SearchContactRClass,SearchContactRn,0,modCRM);

  Document("Деятельности",ActDocRClass,ActDocForm,ActDocFClass,modCRM);
  Document("Этикетки контактных лиц",CoLabRClass,CoLabForm,CoLabFClass,modCRM);
  if (HasModQT) then begin
    Document("Предложения",QTRClass,QTForm,QTFClass,modCRM);
  end;

  if (HasAccessGroups) then begin
  Setting("Группы доступа",AccessLClass,modCRM);
  end;
  Setting("Активные пользователи",ListUsersClass,modCRM);
  Setting("Классы деятельностей",ActTypeGrLClass,modCRM);
  Setting("Виды деятельности",ActTypeLClass,modCRM);
  if (HasFormEditor) then begin
    Setting("Формы",DocLClass,modCRM);
  end;
  Setting("Компания - Формат даты и чисел",SysFormatTClass,modCRM);
  Setting("Информация о компании",CYWClass,modCRM);
  if (LicenseMode==kLicenseModeServer) then begin
    Setting("Конфигурации пользователей",ConfigureUsersTClass,modCRM);
  end;
  Setting("Связи с контактами",ContactRelLClass,modCRM);
  if (HasModQT) then begin
    Setting("Связи с контактами",ContactRelLClass,modCRM);
  end;
  Setting("Информация в справке по клиенту",CustPSLClass,modCRM);
/*  
  if (UseAppStoreEnabler==false) then begin
    Setting("Internet Enablers",InternetEnablerTClass,modCRM);
  end;
*/  
  if (HasItemGroups or HasLocalization("BRA,ITA,PRT,ZWE")) then begin
    Setting("Группы товаров",ITLClass,modCRM);
  end;  
  Setting("Локальная машина",LocalMachineTClass,modCRM);
  if (ClientMode) then begin
    Setting("Сотрудники",UserLClass,modCRM);
  end;
  if (HasModQT) then begin
    Setting("Условия оплаты",PDLClass,modCRM);
  end;
//  Setting("Program Mode",ProgramStatusTClass,modCRM);//cloud hosting
  if (HasModQT) then begin
    Setting("Виды предложений",QuoteClassTClass,modCRM);
  end;
  Setting("Отчётные периоды",PeriodTClass,modCRM);
  if (HasFormEditor) then begin
    Setting("Стили",StyleLClass,modCRM);
  end;
  if (HasModQT) then begin
    if (HasLocalization("BRA,KEN")) then begin
      Setting("Налоговые шаблоны",TaxTemplateLClass,modCRM);
    end;  
  end;
  Setting("Виды текста",TextTypeLClass,modCRM);
  if (HasModQT) then begin
    Setting("Единицы",UnitLClass,modCRM);
  end;
/*  
  if (HasLocalization("BRA")) then begin
    Setting("User Defined Fields - Contacts",CUUserLabelTClass,modCRM);
  end;
*/  
  if (HasModQT) then begin
    Setting("Коды НДС",VATCodeTClass,modCRM);
  end;

  Export("Activities",ExpActEClass,ExpActEn,modCRM);
//  Export("Client Text Backup",TBEClass,ClientTBEn,modCRM);
//  Export("Company Text Backup",TBEClass,CompanyTBEn,modCRM);
  if (GuiType!=kGuiiPhone) then begin
    Export("Database Text Backup",TBEClass,DatabaseTBEn,modCRM);
  end;
  Export("Remote Backup",TBRemoteEClass,RemoteTBEn,modCRM);  
  Export("Контакты",BPCUEClass,BPCUEn,modCRM);//for Business Phone, why in this module?? We have the Integration module, it should probably be there
//  Export("Raw Data",TBEClass,RawDataEn,modCRM);
//  Export("Run Timed Backup",TBEClass,RunTimedTBEn,modCRM);

  Import("Automatic",FullyAutIn,FullyAutIn,modCRM);// if we put it like that we will be able to make access systme working
  Import("Manual File Search",AutIn,AutIn,modCRM);// if we put it like that we will be able to make access systme working

  Maintenance("Rebuild Number Recognition Register",NormPhoneNumVClass,NormPhoneNumMn,modCRM);
  Maintenance("Restore Application",ResetDBWClass,0,modCRM);  

/* modCL */

  Register("Приход","Приход",CLInVc,modCL);
  Register("Расход","Расход",CLOutVc,modCL);
  if (HasModSL and HasLocalization("POL")==false) then begin
    Register("Receipts","Receipts",IPVc,modCL);
  end;
  if (HasModPL and HasLocalization("POL")==false) then begin
    Register("Платежи","Платежи",OPVc,modCL);
  end;
  if (HasModExp) then begin
    Register("Выплаты персоналу","Выплаты персоналу",PPVc,modCL);
  end;
  
  Setting("Настройки кассовой книги",MainCLTClass,modCL);
  Setting("Expense Accounts",CLCorspLClass,modCL);
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Cash In",CLInSerTClass,modCL);
    Setting("Серии номеров - Cash Out",CLOutSerTClass,modCL);
  end;
  Setting("Способы платежей",PMTClass,modCL);
  
  Report("Кассовая книга",CLIORClass,CashBRn,0,modCL);
  if (HasLocalization("LTU")) then begin
    Report("Cash Book (Lithuania)",CashBookLitRClass,CashBookLitRn,0,modCL);
  end;
  Report("Журнал прихода в кассу",CLInJRClass,CLInJRn,0,modCL);  
  Report("Журнал расходов из кассы",CLOutJRClass,CLOutJRn,0,modCL);  
  if (HasModNL or HasLocalization("POL")) then begin
    Report("Кассовая книга по записям операций",CashBookLatRClass,CashBookLatRn,0,modCL);
  end;

  Document("Приход",CLInRClass,CLInForm,CLInFClass,modCL);
  Document("Расход",CLOutRClass,CLOutForm,CLOutFClass,modCL);

  Maintenance("Утвердить приход и расход",OKCLVClass,OKCLMn,modCL);
  
/* modEmail */

  Register("Очередь электронной почты","Очередь электронной почты",EMailQueVc,modEmail);
  Register("Почтовые ящики","Почтовые ящики",ConferenceWClass,modEmail);

  Setting("E-mail Сервер SMTP",EmailTClass,modEmail);
  
/* modSVO */
  Register("Заказы на обслуживание","Заказы на обслуживание",SVOVc,modSVO);
  Register("Рабочие задачи","Рабочие задачи",WOVc,modSVO);
  
  if (HasNumberSeries) then begin
    Setting("Серии номеров - Заказы на обслуживание",SVOSerTClass,modSVO);
    Setting("Серии номеров - Таблицы работ",WSSerTClass,modSVO);
  end;
  Setting("Стандартные проблемы",StandProblemLClass,modSVO);
  
  Document("Заказы на обслуживание",SVORClass,SVOForm,SVOFClass,modSVO);
  Document("Таблицы работ",WSRClass,WSForm,WSFClass,modSVO);
  
  Report("Невыполненные заказы на обслуживание",SVOStockRClass,SVOStockRn,0,modSVO);
  Report("Журнал заказов на обслуживание",SVOListRClass,SVOListRn,0,modSVO);
  Report("Статус заказов на осблуживание",SVOStaRClass,SVOStaRn,0,modSVO);
  Report("Журнал таблиц работ",WSListRClass,WSListRn,0,modSVO);
  
/* modProd */

  Register("Производства","Производства",ProdVc,modProd);
  Register("Рецепты","Рецепты",RecVc,modProd);
  Register("Товары","Товары",INVc,modProd);

  Setting("Серии номеров - Производства",ProdSerTClass,modProd);

  Report("Журнал по производству",ProdRClass,ProdRn,0,modProd);
  Report("Очередь на производство",ProdOrderQueueRClass,ProdOrderQueue2Rn,0,modProd);
  Report("Статус производства",ProdStatusRClass,ProdStatusRn,0,modProd);
  Report("Список рецептов (Сделано из...)",Rec2RClass,Rec2Rn,0,modProd);
  Report("Список рецептов (Часть от...)",RecRClass,RecRn,0,modProd);

  Document("Производства",ProdOrderRClass,ProdOrderForm,ProdOrderFClass,modProd);
  Document("Рецепт",RecDocRClass,RecForm,RecFClass,modProd);

  Maintenance("Создать планируемые записи из заказов",PlanRecordsVClass,PlanRecordsMn,modProd);
  Maintenance("Обновить рецепты",UpdRecepyVClass,UpdRecepyMn,modProd); 

  end;
  
  return;
end;
